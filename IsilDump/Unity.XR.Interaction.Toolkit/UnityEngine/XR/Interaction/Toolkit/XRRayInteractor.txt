Type: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor

Method: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/LineType get_lineType()

Disassembly:
	0x03B5FD2C CBZ X20, 0x3B5FEBC
	0x03B5FD30 ADRP X8, 0x594000

ISIL:
	001 Move W0, [X0+656]
	002 Return X0

Method: System.Void set_lineType(UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/LineType value)

Disassembly:
	0x03B5FD34 LDR X8, [X8 + 0x5A0]
	0x03B5FD38 MOV X0, X20

ISIL:
	001 Move [X0+656], W1
	002 Return 

Method: System.Boolean get_blendVisualLinePoints()

Disassembly:
	0x03B5FD3C MOV X1, X31
	0x03B5FD40 LDR X8, [X8]

ISIL:
	001 Move W0, [X0+660]
	002 Return X0

Method: System.Void set_blendVisualLinePoints(System.Boolean value)

Disassembly:
	0x03B5FD44 LDR X8, [X8 + 0xB8]
	0x03B5FD48 LDP S1, S2, [X8 + 0x4]
	0x03B5FD4C LDR V0, [X8]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+660], W8
	003 Return 

Method: System.Single get_maxRaycastDistance()

Disassembly:
	0x03B5FD50 BL 0x3C3EC04
	0x03B5FD54 ADRP X20, 0x879000

ISIL:
	001 Move V0, [X0+664]
	002 Return V0

Method: System.Void set_maxRaycastDistance(System.Single value)

Disassembly:
	0x03B5FD58 LDRB W8, [X20 + 0x793]
	0x03B5FD5C LDR X19, [X19 + 0x2A0]

ISIL:
	001 Move [X0+664], S0
	002 Return 

Method: UnityEngine.Transform get_rayOriginTransform()

Disassembly:
	0x03B5FD60 CBNZ W8, 0x3B5FD78
	0x03B5FD64 ADRP X0, 0x595000

ISIL:
	001 Move X0, [X0+672]
	002 Return X0

Method: System.Void set_rayOriginTransform(UnityEngine.Transform value)

Disassembly:
	0x03B5FD68 LDR X0, [X0 + 0x5A8]
	0x03B5FD6C BL 0x1C16CF4
	0x03B5FD70 MOVZ W8, 0x1
	0x03B5FD74 STRB W8, [X20 + 0x793]
	0x03B5FD78 CBZ X19, 0x3B5FEBC
	0x03B5FD7C ADRP X8, 0x595000
	0x03B5FD80 LDR X8, [X8 + 0x5A8]
	0x03B5FD84 LDR X8, [X8]
	0x03B5FD88 LDR X8, [X8 + 0xB8]
	0x03B5FD8C LDP S2, S3, [X8 + 0x8]
	0x03B5FD90 LDP S0, S1, [X8]
	0x03B5FD94 B 0x3B5FE24
	0x03B5FD98 LDR X0, [X19 + 0x50]
	0x03B5FD9C CBZ X0, 0x3B5FEBC
	0x03B5FDA0 MOV X1, X31
	0x03B5FDA4 BL 0x3C3F49C
	0x03B5FDA8 MOV X20, X0
	0x03B5FDAC MOV X0, X19
	0x03B5FDB0 MOV X1, X31
	0x03B5FDB4 BL 0x3C32E90
	0x03B5FDB8 LDR X8, [X22]
	0x03B5FDBC MOV X21, X0
	0x03B5FDC0 LDR W9, [X8 + 0xE0]
	0x03B5FDC4 CBNZ W9, 0x3B5FDD0
	0x03B5FDC8 MOV X0, X8
	0x03B5FDCC BL 0x1C16DFC
	0x03B5FDD0 MOV X0, X20
	0x03B5FDD4 MOV X1, X21
	0x03B5FDD8 MOV X2, X31
	0x03B5FDDC BL 0x3C3883C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x884000
	007 Move X21, 0x595000
	008 Move W8, [X22+2437]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x595000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2437], W8
	021 Move [X19+672], X20
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Inequality, X0, X1
	031 And W8, W0, 1
	032 Move [X19+856], W8
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Return 

Method: UnityEngine.Transform get_referenceFrame()

Disassembly:
	0x03B5FDE0 LDR X8, [X19 + 0x50]
	0x03B5FDE4 CBZ X8, 0x3B5FEBC

ISIL:
	001 Move X0, [X0+680]
	002 Return X0

Method: System.Void set_referenceFrame(UnityEngine.Transform value)

Disassembly:
	0x03B5FDE8 LDR X20, [X19 + 0x2A0]
	0x03B5FDEC TBZ X0, 0x0, 0x3B5FE44
	0x03B5FDF0 MOV X0, X8
	0x03B5FDF4 MOV X1, X31
	0x03B5FDF8 BL 0x3C3EB78
	0x03B5FDFC CBZ X20, 0x3B5FEBC
	0x03B5FE00 MOV X0, X20
	0x03B5FE04 MOV X1, X31
	0x03B5FE08 BL 0x3C3EC04
	0x03B5FE0C LDR X0, [X19 + 0x50]
	0x03B5FE10 CBZ X0, 0x3B5FEBC
	0x03B5FE14 LDR X19, [X19 + 0x2A0]
	0x03B5FE18 MOV X1, X31
	0x03B5FE1C BL 0x3C3F830
	0x03B5FE20 CBZ X19, 0x3B5FEBC
	0x03B5FE24 MOV X0, X19
	0x03B5FE28 LDP X20, X19, [X31 + 0x30]
	0x03B5FE2C LDP X22, X21, [X31 + 0x20]
	0x03B5FE30 LDR X30, [X31 + 0x18]
	0x03B5FE34 LDP D9, D8, [X31 + 0x8]
	0x03B5FE38 MOV X1, X31
	0x03B5FE3C LDR V10, [X31], #0x40
	0x03B5FE40 B 0x3C3F8B8
	0x03B5FE44 MOV X0, X8
	0x03B5FE48 MOV X1, X31
	0x03B5FE4C BL 0x3C3F58C
	0x03B5FE50 LDR X0, [X19 + 0x50]
	0x03B5FE54 CBZ X0, 0x3B5FEBC
	0x03B5FE58 MOV X1, X31
	0x03B5FE5C MOV V8.16B, V0.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x884000
	007 Move X21, 0x595000
	008 Move W8, [X22+2438]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x595000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2438], W8
	021 Move [X19+680], X20
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Inequality, X0, X1
	031 And W8, W0, 1
	032 Move [X19+857], W8
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Return 

Method: System.Single get_velocity()

Disassembly:
	0x03B5FE60 MOV V9.16B, V1.16B
	0x03B5FE64 MOV V10.16B, V2.16B

ISIL:
	001 Move V0, [X0+688]
	002 Return V0

Method: System.Void set_velocity(System.Single value)

Disassembly:
	0x03B5FE68 BL 0x3C3DEB4
	0x03B5FE6C CBZ X20, 0x3B5FEBC

ISIL:
	001 Move [X0+688], S0
	002 Return 

Method: System.Single get_acceleration()

Disassembly:
	0x03B5FE70 MOV V4.16B, V0.16B
	0x03B5FE74 MOV V5.16B, V1.16B

ISIL:
	001 Move V0, [X0+692]
	002 Return V0

Method: System.Void set_acceleration(System.Single value)

Disassembly:
	0x03B5FE78 MOV X0, X20
	0x03B5FE7C MOV V0.16B, V8.16B

ISIL:
	001 Move [X0+692], S0
	002 Return 

Method: System.Single get_additionalGroundHeight()

Disassembly:
	0x03B5FE80 MOV V1.16B, V9.16B
	0x03B5FE84 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move V0, [X0+696]
	002 Return V0

Method: System.Void set_additionalGroundHeight(System.Single value)

Disassembly:
	0x03B5FE88 LDP X22, X21, [X31 + 0x20]
	0x03B5FE8C LDR X30, [X31 + 0x18]

ISIL:
	001 Move [X0+696], S0
	002 Return 

Method: System.Single get_additionalFlightTime()

Disassembly:
	0x03B5FE90 LDP D9, D8, [X31 + 0x8]
	0x03B5FE94 MOV V6.16B, V2.16B

ISIL:
	001 Move V0, [X0+700]
	002 Return V0

Method: System.Void set_additionalFlightTime(System.Single value)

Disassembly:
	0x03B5FE98 MOV V7.16B, V3.16B
	0x03B5FE9C MOV V2.16B, V10.16B

ISIL:
	001 Move [X0+700], S0
	002 Return 

Method: System.Single get_endPointDistance()

Disassembly:
	0x03B5FEA0 MOV V3.16B, V4.16B
	0x03B5FEA4 MOV V4.16B, V5.16B

ISIL:
	001 Move V0, [X0+704]
	002 Return V0

Method: System.Void set_endPointDistance(System.Single value)

Disassembly:
	0x03B5FEA8 MOV V5.16B, V6.16B
	0x03B5FEAC MOV V6.16B, V7.16B

ISIL:
	001 Move [X0+704], S0
	002 Return 

Method: System.Single get_endPointHeight()

Disassembly:
	0x03B5FEB0 MOV X1, X31
	0x03B5FEB4 LDR V10, [X31], #0x40

ISIL:
	001 Move V0, [X0+708]
	002 Return V0

Method: System.Void set_endPointHeight(System.Single value)

Disassembly:
	0x03B5FEB8 B 0x3C40000
	0x03B5FEBC BL 0x1C16F20

ISIL:
	001 Move [X0+708], S0
	002 Return 

Method: System.Single get_controlPointDistance()

Disassembly:
	0x03B5FEC0 STP X30, X19, [X31 - 0x10]!
	0x03B5FEC4 MOV X19, X0

ISIL:
	001 Move V0, [X0+712]
	002 Return V0

Method: System.Void set_controlPointDistance(System.Single value)

Disassembly:
	0x03B5FEC8 BL 0x3B52688
	0x03B5FECC MOV X0, X19

ISIL:
	001 Move [X0+712], S0
	002 Return 

Method: System.Single get_controlPointHeight()

Disassembly:
	0x03B5FED0 BL 0x3B51E98
	0x03B5FED4 LDRB W8, [X19 + 0x2FC]

ISIL:
	001 Move V0, [X0+716]
	002 Return V0

Method: System.Void set_controlPointHeight(System.Single value)

Disassembly:
	0x03B5FED8 CBZ W8, 0x3B5FEF0
	0x03B5FEDC LDR X0, [X19 + 0x3D0]

ISIL:
	001 Move [X0+716], S0
	002 Return 

Method: System.Int32 get_sampleFrequency()

Disassembly:
	0x03B5FEE0 CBZ X0, 0x3B5FEF0
	0x03B5FEE4 MOV X1, X31

ISIL:
	001 Move W0, [X0+720]
	002 Return X0

Method: System.Void set_sampleFrequency(System.Int32 value)

Disassembly:
	0x03B5FEE8 LDP X30, X19, [X31], #0x10
	0x03B5FEEC B 0x3B99B3C
	0x03B5FEF0 LDP X30, X19, [X31], #0x10
	0x03B5FEF4 RET
	0x03B5FEF8 STR X30, [X31 - 0x20]!
	0x03B5FEFC STP X20, X19, [X31 + 0x10]
	0x03B5FF00 ADRP X20, 0x883000
	0x03B5FF04 LDRB W8, [X20 + 0x98B]
	0x03B5FF08 MOV X19, X0
	0x03B5FF0C TBNZ X8, 0x0, 0x3B5FF24
	0x03B5FF10 ADRP X0, 0x5FC000
	0x03B5FF14 LDR X0, [X0 + 0x2F0]
	0x03B5FF18 BL 0x1C16CF4
	0x03B5FF1C MOVZ W8, 0x1
	0x03B5FF20 STRB W8, [X20 + 0x98B]
	0x03B5FF24 MOV X0, X19
	0x03B5FF28 BL 0x3B5272C
	0x03B5FF2C LDR X8, [X19 + 0x3A0]
	0x03B5FF30 CBZ X8, 0x3B5FF40
	0x03B5FF34 LDR W9, [X8 + 0x1C]
	0x03B5FF38 ADD W9, W9, 0x1
	0x03B5FF3C STP W31, W9, [X8 + 0x18]
	0x03B5FF40 LDRB W8, [X19 + 0x2FC]
	0x03B5FF44 CBZ W8, 0x3B5FF60
	0x03B5FF48 LDR X0, [X19 + 0x3D0]
	0x03B5FF4C CBZ X0, 0x3B5FF60
	0x03B5FF50 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x884000
	007 Move X22, 0x5FC000
	008 Move W8, [X21+2439]
	009 Move X22, [X22+1984]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5FC000
	017 Move X0, [X0+1984]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2439], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move W8, 2
	028 NotImplemented "Instruction CSEL not yet implemented."
	029 Move [X19+720], W8
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return 

Method: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/HitDetectionType get_hitDetectionType()

Disassembly:
	0x03B5FF64 LDR X30, [X31], #0x20
	0x03B5FF68 RET

ISIL:
	001 Move W0, [X0+724]
	002 Return X0

Method: System.Void set_hitDetectionType(UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/HitDetectionType value)

Disassembly:
	0x03B5FF6C SUB X31, X31, 0x120
	0x03B5FF70 STP D15, D14, [X31 + 0xB0]

ISIL:
	001 Move [X0+724], W1
	002 Return 

Method: System.Single get_sphereCastRadius()

Disassembly:
	0x03B5FF74 STP D13, D12, [X31 + 0xC0]
	0x03B5FF78 STP D11, D10, [X31 + 0xD0]

ISIL:
	001 Move V0, [X0+728]
	002 Return V0

Method: System.Void set_sphereCastRadius(System.Single value)

Disassembly:
	0x03B5FF7C STP D9, D8, [X31 + 0xE0]
	0x03B5FF80 STP X29, X30, [X31 + 0xF0]

ISIL:
	001 Move [X0+728], S0
	002 Return 

Method: System.Single get_coneCastAngle()

Disassembly:
	0x03B5FF84 STP X22, X21, [X31 + 0x100]
	0x03B5FF88 STP X20, X19, [X31 + 0x110]

ISIL:
	001 Move V0, [X0+732]
	002 Return V0

Method: System.Void set_coneCastAngle(System.Single value)

Disassembly:
	0x03B5FF8C ADRP X20, 0x883000
	0x03B5FF90 LDRB W8, [X20 + 0x98C]

ISIL:
	001 Move [X0+732], S0
	002 Return 

Method: UnityEngine.LayerMask get_raycastMask()

Disassembly:
	0x03B5FF94 MOV X19, X0
	0x03B5FF98 TBNZ X8, 0x0, 0x3B5FFE0

ISIL:
	001 Move W0, [X0+736]
	002 Return X0

Method: System.Void set_raycastMask(UnityEngine.LayerMask value)

Disassembly:
	0x03B5FF9C ADRP X0, 0x594000
	0x03B5FFA0 LDR X0, [X0 + 0x970]

ISIL:
	001 Move [X0+736], W1
	002 Return 

Method: UnityEngine.QueryTriggerInteraction get_raycastTriggerInteraction()

Disassembly:
	0x03B5FFA4 BL 0x1C16CF4
	0x03B5FFA8 ADRP X0, 0x5FB000

ISIL:
	001 Move W0, [X0+740]
	002 Return X0

Method: System.Void set_raycastTriggerInteraction(UnityEngine.QueryTriggerInteraction value)

Disassembly:
	0x03B5FFAC LDR X0, [X0 + 0xB08]
	0x03B5FFB0 BL 0x1C16CF4

ISIL:
	001 Move [X0+740], W1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/QuerySnapVolumeInteraction get_raycastSnapVolumeInteraction()

Disassembly:
	0x03B5FFB4 ADRP X0, 0x5FB000
	0x03B5FFB8 LDR X0, [X0 + 0xB10]

ISIL:
	001 Move W0, [X0+744]
	002 Return X0

Method: System.Void set_raycastSnapVolumeInteraction(UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/QuerySnapVolumeInteraction value)

Disassembly:
	0x03B5FFBC BL 0x1C16CF4
	0x03B5FFC0 ADRP X0, 0x594000

ISIL:
	001 Move [X0+744], W1
	002 Return 

Method: System.Boolean get_hitClosestOnly()

Disassembly:
	0x03B5FFC4 LDR X0, [X0 + 0x598]
	0x03B5FFC8 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+748]
	002 Return X0

Method: System.Void set_hitClosestOnly(System.Boolean value)

Disassembly:
	0x03B5FFCC ADRP X0, 0x5FB000
	0x03B5FFD0 LDR X0, [X0 + 0x7C0]
	0x03B5FFD4 BL 0x1C16CF4

ISIL:
	001 And W8, W1, 1
	002 Move [X0+748], W8
	003 Return 

Method: System.Boolean get_hoverToSelect()

Disassembly:
	0x03B5FFD8 MOVZ W8, 0x1
	0x03B5FFDC STRB W8, [X20 + 0x98C]

ISIL:
	001 Move W0, [X0+749]
	002 Return X0

Method: System.Void set_hoverToSelect(System.Boolean value)

Disassembly:
	0x03B5FFE0 MOVI V0.2D, 0x0
	0x03B5FFE4 STUR V0, [X31 + 0x9C]
	0x03B5FFE8 STP V0, V0, [X31 + 0x80]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+749], W8
	003 Return 

Method: System.Single get_hoverTimeToSelect()

Disassembly:
	0x03B5FFEC STP V0, V0, [X31 + 0x60]
	0x03B5FFF0 STP V0, V0, [X31 + 0x40]

ISIL:
	001 Move V0, [X0+752]
	002 Return V0

Method: System.Void set_hoverTimeToSelect(System.Single value)

Disassembly:
	0x03B5FFF4 STR V0, [X31 + 0x3]
	0x03B5FFF8 LDR W8, [X19 + 0x290]

ISIL:
	001 Move [X0+752], S0
	002 Return 

Method: System.Boolean get_autoDeselect()

Disassembly:
	0x03B5FFFC CBNZ W8, 0x3B60348
	0x03B60000 ADRP X8, 0x593000

ISIL:
	001 Move W0, [X0+756]
	002 Return X0

Method: System.Void set_autoDeselect(System.Boolean value)

Disassembly:
	0x03B60004 LDR X8, [X8 + 0x598]
	0x03B60008 LDR X20, [X19 + 0x2A0]
	0x03B6000C LDR X0, [X8]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+756], W8
	003 Return 

Method: System.Single get_timeToAutoDeselect()

Disassembly:
	0x03B60010 LDR W8, [X0 + 0xE0]
	0x03B60014 CBNZ W8, 0x3B6001C

ISIL:
	001 Move V0, [X0+760]
	002 Return V0

Method: System.Void set_timeToAutoDeselect(System.Single value)

Disassembly:
	0x03B60018 BL 0x1C16DFC
	0x03B6001C MOV X0, X20

ISIL:
	001 Move [X0+760], S0
	002 Return 

Method: System.Boolean get_enableUIInteraction()

Disassembly:
	0x03B60020 MOV X1, X31
	0x03B60024 MOV X2, X31

ISIL:
	001 Move W0, [X0+764]
	002 Return X0

Method: System.Void set_enableUIInteraction(System.Boolean value)

Disassembly:
	0x03B60028 BL 0x3C354F8
	0x03B6002C TBZ X0, 0x0, 0x3B60038
	0x03B60030 LDR X20, [X19 + 0x2A0]
	0x03B60034 B 0x3B60048
	0x03B60038 MOV X0, X19
	0x03B6003C MOV X1, X31
	0x03B60040 BL 0x3C32E90
	0x03B60044 MOV X20, X0
	0x03B60048 CBZ X20, 0x3B607A4
	0x03B6004C MOV X0, X20
	0x03B60050 MOV X1, X31
	0x03B60054 BL 0x3C3F58C

ISIL:
	001 Move W8, [X0+764]
	002 And W9, W1, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move X8, [X0+976]
	005 Move [X0+764], W9
	006 Compare X8, 0
	007 JumpIfEqual {13}
	008 And W1, W1, 1
	009 Move X0, X8
	010 Move X2, X31
	011 Call RegisteredUIInteractorCache.RegisterOrUnregisterXRUIInputModule, X0, X1
	012 Return 
	013 Return 

Method: System.Boolean get_blockUIOnInteractableSelection()

Disassembly:
	0x03B60058 MOV X0, X20
	0x03B6005C MOV X1, X31

ISIL:
	001 Move W0, [X0+765]
	002 Return X0

Method: System.Void set_blockUIOnInteractableSelection(System.Boolean value)

Disassembly:
	0x03B60060 MOV V13.16B, V0.16B
	0x03B60064 MOV V12.16B, V1.16B
	0x03B60068 MOV V11.16B, V2.16B

ISIL:
	001 And W8, W1, 1
	002 Move [X0+765], W8
	003 Return 

Method: System.Boolean get_allowAnchorControl()

Disassembly:
	0x03B6006C BL 0x3C3FA04
	0x03B60070 LDR V3, [X19 + 0x298]

ISIL:
	001 Move W0, [X0+766]
	002 Return X0

Method: System.Void set_allowAnchorControl(System.Boolean value)

Disassembly:
	0x03B60074 ADRP X8, 0xFFFFFFFFFCF8A000
	0x03B60078 ADRP X9, 0xFFFFFFFFFCF89000
	0x03B6007C ADRP X10, 0xFFFFFFFFFCF8A000

ISIL:
	001 And W8, W1, 1
	002 Move [X0+766], W8
	003 Return 

Method: System.Boolean get_useForceGrab()

Disassembly:
	0x03B60080 FMUL S0, S0, S3
	0x03B60084 FMUL S1, S1, S3

ISIL:
	001 Move W0, [X0+767]
	002 Return X0

Method: System.Void set_useForceGrab(System.Boolean value)

Disassembly:
	0x03B60088 FMUL S2, S2, S3
	0x03B6008C FADD S9, S13, S0
	0x03B60090 FADD S0, S12, S1

ISIL:
	001 And W8, W1, 1
	002 Move [X0+767], W8
	003 Return 

Method: System.Single get_rotateSpeed()

Disassembly:
	0x03B60094 ADRP X11, 0xFFFFFFFFFCF89000
	0x03B60098 STR S0, [X31 + 0x2C]

ISIL:
	001 Move V0, [X0+768]
	002 Return V0

Method: System.Void set_rotateSpeed(System.Single value)

Disassembly:
	0x03B6009C FADD S10, S11, S2
	0x03B600A0 LDR V0, [X8 + 0x1B0]

ISIL:
	001 Move [X0+768], S0
	002 Return 

Method: System.Single get_translateSpeed()

Disassembly:
	0x03B600A4 LDR V1, [X9 + 0xFA8]
	0x03B600A8 LDR V2, [X10 + 0x1E0]

ISIL:
	001 Move V0, [X0+772]
	002 Return V0

Method: System.Void set_translateSpeed(System.Single value)

Disassembly:
	0x03B600AC LDR V3, [X11 + 0xFAC]
	0x03B600B0 MOV X0, X31

ISIL:
	001 Move [X0+772], S0
	002 Return 

Method: UnityEngine.Transform get_anchorRotateReferenceFrame()

Disassembly:
	0x03B600B4 BL 0x3C0D030
	0x03B600B8 LDR W8, [X19 + 0x2D4]

ISIL:
	001 Move X0, [X0+776]
	002 Return X0

Method: System.Void set_anchorRotateReferenceFrame(UnityEngine.Transform value)

Disassembly:
	0x03B600BC CMP W8, 0x2
	0x03B600C0 B.EQ 0x3B600F4

ISIL:
	001 Move [X0+776], X1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/AnchorRotationMode get_anchorRotationMode()

Disassembly:
	0x03B600C4 CMP W8, 0x1
	0x03B600C8 B.EQ 0x3B60234

ISIL:
	001 Move W0, [X0+784]
	002 Return X0

Method: System.Void set_anchorRotationMode(UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/AnchorRotationMode value)

Disassembly:
	0x03B600CC CBNZ W8, 0x3B60348
	0x03B600D0 LDR V4, [X31 + 0x2C]

ISIL:
	001 Move [X0+784], W1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.UI.UIHoverEnterEvent get_uiHoverEntered()

Disassembly:
	0x03B600D4 MOV V0.16B, V13.16B
	0x03B600D8 MOV V1.16B, V12.16B

ISIL:
	001 Move X0, [X0+792]
	002 Return X0

Method: System.Void set_uiHoverEntered(UnityEngine.XR.Interaction.Toolkit.UI.UIHoverEnterEvent value)

Disassembly:
	0x03B600DC MOV V2.16B, V11.16B
	0x03B600E0 MOV V3.16B, V9.16B

ISIL:
	001 Move [X0+792], X1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.UI.UIHoverExitEvent get_uiHoverExited()

Disassembly:
	0x03B600E4 MOV V5.16B, V10.16B
	0x03B600E8 MOV X0, X31

ISIL:
	001 Move X0, [X0+800]
	002 Return X0

Method: System.Void set_uiHoverExited(UnityEngine.XR.Interaction.Toolkit.UI.UIHoverExitEvent value)

Disassembly:
	0x03B600EC BL 0x3C0CB04
	0x03B600F0 B 0x3B60348

ISIL:
	001 Move [X0+800], X1
	002 Return 

Method: System.Boolean get_enableARRaycasting()

Disassembly:
	0x03B600F4 ADRP X8, 0xFFFFFFFFFCF8A000
	0x03B600F8 LDR V0, [X19 + 0x2DC]

ISIL:
	001 Move W0, [X0+808]
	002 Return X0

Method: System.Void set_enableARRaycasting(System.Boolean value)

Disassembly:
	0x03B600FC LDR V1, [X8 + 0x104]
	0x03B60100 FMUL S0, S0, S1
	0x03B60104 FMOV S1, 0.5

ISIL:
	001 And W8, W1, 1
	002 Move [X0+808], W8
	003 Return 

Method: System.Boolean get_occludeARHitsWith3DObjects()

Disassembly:
	0x03B60108 FMUL S0, S0, S1
	0x03B6010C BL 0x3EB1E50

ISIL:
	001 Move W0, [X0+809]
	002 Return X0

Method: System.Void set_occludeARHitsWith3DObjects(System.Boolean value)

Disassembly:
	0x03B60110 LDR V1, [X19 + 0x298]
	0x03B60114 MOV X0, X20
	0x03B60118 MOV X1, X31

ISIL:
	001 And W8, W1, 1
	002 Move [X0+809], W8
	003 Return 

Method: System.Boolean get_occludeARHitsWith2DObjects()

Disassembly:
	0x03B6011C FMUL S14, S0, S1
	0x03B60120 BL 0x3C3F988

ISIL:
	001 Move W0, [X0+810]
	002 Return X0

Method: System.Void set_occludeARHitsWith2DObjects(System.Boolean value)

Disassembly:
	0x03B60124 FMUL S3, S14, S0
	0x03B60128 FMUL S0, S14, S1
	0x03B6012C STR S0, [X31 + 0x18]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+810], W8
	003 Return 

Method: System.Single get_angle()

Disassembly:
	0x03B60130 FMUL S0, S14, S2
	0x03B60134 MOV X0, X20
	0x03B60138 MOV X1, X31
	0x03B6013C STP S0, S3, [X31 + 0x1C]
	0x03B60140 BL 0x3C3F90C
	0x03B60144 MOV V8.16B, V10.16B
	0x03B60148 STR S14, [X31 + 0x24]
	0x03B6014C FMUL S15, S14, S0
	0x03B60150 FMUL S1, S14, S1
	0x03B60154 FMUL S10, S14, S2
	0x03B60158 MOV V3.16B, V9.16B
	0x03B6015C MOV V14.16B, V9.16B
	0x03B60160 LDR V9, [X31 + 0x2C]
	0x03B60164 STP S1, S15, [X31 + 0xC]
	0x03B60168 MOV V0.16B, V13.16B
	0x03B6016C MOV V1.16B, V12.16B

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Add X1, X31, 0
	005 Add X2, X31, 16
	006 Move X19, X0
	007 Move [X31+24], W31
	008 Move [X31+16], X31
	009 Move [X31+8], W31
	010 Move [X31], X31
	011 Call XRRayInteractor.GetLineOriginAndDirection, X0, X1, X2
	012 Move S0, [X31+16]
	013 Move S1, [X31+20]
	014 Move V2, [X31+24]
	015 Move X0, X19
	016 Move X30, [X31+32]
	017 Move X19, [X31+40]
	018 Add X31, X31, 48
	019 Call XRRayInteractor.GetProjectileAngle, X0, X1
	020 Return V0

Method: UnityEngine.XR.Interaction.Toolkit.IXRInteractable get_currentNearestValidTarget()

Disassembly:
	0x03B60480 CBNZ W8, 0x3B60498
	0x03B60484 ADRP X0, 0x593000

ISIL:
	001 Move X0, [X0+816]
	002 Return X0

Method: System.Void set_currentNearestValidTarget(UnityEngine.XR.Interaction.Toolkit.IXRInteractable value)

Disassembly:
	0x03B60488 LDR X0, [X0 + 0x5A0]
	0x03B6048C BL 0x1C16CF4

ISIL:
	001 Move [X0+816], X1
	002 Return 

Method: UnityEngine.Vector3 get_rayEndPoint()

Disassembly:
	0x03B60490 MOVZ W8, 0x1
	0x03B60494 STRB W8, [X20 + 0x783]
	0x03B60498 ADRP X8, 0x593000
	0x03B6049C LDR X8, [X8 + 0x5A0]

ISIL:
	001 Move V0, [X0+824]
	002 Move V1, [X0+828]
	003 Move V2, [X0+832]
	004 Return X0

Method: System.Void set_rayEndPoint(UnityEngine.Vector3 value)

Disassembly:
	0x03B604A0 LDR X8, [X8]
	0x03B604A4 LDR X8, [X8 + 0xB8]
	0x03B604A8 LDP S0, S1, [X8]
	0x03B604AC LDR V2, [X8 + 0x8]

ISIL:
	001 Move [X0+824], S0
	002 Move [X0+828], S1
	003 Move [X0+832], S2
	004 Return 

Method: UnityEngine.Transform get_rayEndTransform()

Disassembly:
	0x03B604B0 ADRP X8, 0xFFFFFFFFFCF8A000
	0x03B604B4 LDR V3, [X8 + 0x400]

ISIL:
	001 Move X0, [X0+840]
	002 Return X0

Method: System.Void set_rayEndTransform(UnityEngine.Transform value)

Disassembly:
	0x03B604B8 LDR V5, [X31 + 0x2C]
	0x03B604BC MOV X0, X31

ISIL:
	001 Move [X0+840], X1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.ScaleMode get_scaleMode()

Disassembly:
	0x03B604C0 FMUL S0, S0, S3
	0x03B604C4 FMUL S1, S1, S3

ISIL:
	001 Move W0, [X0+848]
	002 Return X0

Method: System.Void set_scaleMode(UnityEngine.XR.Interaction.Toolkit.ScaleMode value)

Disassembly:
	0x03B604C8 FMUL S2, S2, S3
	0x03B604CC FADD S3, S12, S0

ISIL:
	001 Move [X0+848], W1
	002 Return 

Method: System.Single get_scaleValue()

Disassembly:
	0x03B604D0 FADD S4, S13, S1
	0x03B604D4 FADD S5, S5, S2

ISIL:
	001 Move V0, [X0+852]
	002 Return V0

Method: System.Void set_scaleValue(System.Single value)

Disassembly:
	0x03B604D8 MOV V0.16B, V9.16B
	0x03B604DC MOV V1.16B, V10.16B

ISIL:
	001 Move [X0+852], S0
	002 Return 

Method: UnityEngine.Transform get_effectiveRayOrigin()

Disassembly:
	0x03B604E0 MOV V2.16B, V11.16B
	0x03B604E4 BL 0x3C0CB04
	0x03B604E8 ADD X1, X31, 0x30
	0x03B604EC ADD X2, X31, 0xAC
	0x03B604F0 MOV X0, X19
	0x03B604F4 STR W31, [X31 + 0xAC]

ISIL:
	001 Move W8, [X0+856]
	002 Compare W8, 0
	003 JumpIfEqual {6}
	004 Move X0, [X0+672]
	005 Return X0
	006 Move X1, X31
	007 Call Component.get_transform, X0
	008 Return X0

Method: UnityEngine.Vector3 get_referenceUp()

Disassembly:
	0x03B604F8 BL 0x3B61B5C
	0x03B604FC TBZ X0, 0x0, 0x3B60610
	0x03B60500 ADRP X8, 0xFFFFFFFFFCF8A000
	0x03B60504 ADRP X9, 0xFFFFFFFFFCF89000
	0x03B60508 ADRP X10, 0xFFFFFFFFFCF8A000
	0x03B6050C ADRP X11, 0xFFFFFFFFFCF89000
	0x03B60510 LDR V0, [X8 + 0x1B0]
	0x03B60514 LDR V1, [X9 + 0xFA8]
	0x03B60518 LDR V2, [X10 + 0x1E0]
	0x03B6051C LDR V3, [X11 + 0xFAC]
	0x03B60520 MOV X0, X31
	0x03B60524 BL 0x3C0D030
	0x03B60528 ADRP X20, 0x878000
	0x03B6052C LDP S8, S9, [X31 + 0x5C]
	0x03B60530 LDP S10, S11, [X31 + 0x64]
	0x03B60534 LDRB W8, [X20 + 0x785]
	0x03B60538 LDP S13, S12, [X31 + 0x6C]
	0x03B6053C CBNZ W8, 0x3B60554
	0x03B60540 ADRP X0, 0x593000
	0x03B60544 LDR X0, [X0 + 0x5A8]
	0x03B60548 BL 0x1C16CF4
	0x03B6054C MOVZ W8, 0x1
	0x03B60550 STRB W8, [X20 + 0x785]
	0x03B60554 ADRP X8, 0x593000
	0x03B60558 LDR X8, [X8 + 0x5A8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+857]
	004 Compare W8, 0
	005 JumpIfEqual {14}
	006 Move X0, [X0+680]
	007 Compare X0, 0
	008 JumpIfEqual {33}
	009 Move X1, X31
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Call Transform.get_up, X0
	013 Return X0
	014 Move X19, 0x879000
	015 Move W8, [X19+1926]
	016 Compare W8, 0
	017 JumpIfNotEqual {23}
	018 Move X0, 0x594000
	019 Move X0, [X0+1440]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+1926], W8
	023 Move X8, 0x594000
	024 Move X8, [X8+1440]
	025 Move X8, [X8]
	026 Move X8, [X8+184]
	027 Move S0, [X8+24]
	028 Move S1, [X8+28]
	029 Move V2, [X8+32]
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Return X0
	033 Call 0x1C17F20

Method: UnityEngine.Vector3 get_referencePosition()

Disassembly:
	0x03B6055C LDR X0, [X8]
	0x03B60560 LDR W8, [X0 + 0xE0]
	0x03B60564 CBNZ W8, 0x3B6056C
	0x03B60568 BL 0x1C16DFC
	0x03B6056C FMUL S0, S11, S11
	0x03B60570 FMUL S1, S13, S13
	0x03B60574 ADRP X8, 0xFFFFFFFFFCF8A000
	0x03B60578 FADD S0, S0, S1
	0x03B6057C LDR V1, [X8 + 0x17C]
	0x03B60580 FMUL S2, S12, S12
	0x03B60584 FADD S0, S2, S0
	0x03B60588 FSQRT S2, S0
	0x03B6058C FCMP S2, S1
	0x03B60590 B.LE 0x3B605A4
	0x03B60594 FDIV S0, S11, S2
	0x03B60598 FDIV S1, S13, S2
	0x03B6059C FDIV S2, S12, S2
	0x03B605A0 B 0x3B605DC
	0x03B605A4 ADRP X20, 0x878000
	0x03B605A8 LDRB W8, [X20 + 0x783]
	0x03B605AC CBNZ W8, 0x3B605C4
	0x03B605B0 ADRP X0, 0x593000
	0x03B605B4 LDR X0, [X0 + 0x5A0]
	0x03B605B8 BL 0x1C16CF4
	0x03B605BC MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+857]
	004 Compare W8, 0
	005 JumpIfEqual {14}
	006 Move X0, [X0+680]
	007 Compare X0, 0
	008 JumpIfEqual {33}
	009 Move X1, X31
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Call Transform.get_position, X0
	013 Return X0
	014 Move X19, 0x879000
	015 Move W8, [X19+1923]
	016 Compare W8, 0
	017 JumpIfNotEqual {23}
	018 Move X0, 0x594000
	019 Move X0, [X0+1440]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+1923], W8
	023 Move X8, 0x594000
	024 Move X8, [X8+1440]
	025 Move X8, [X8]
	026 Move X8, [X8+184]
	027 Move S0, [X8]
	028 Move S1, [X8+4]
	029 Move V2, [X8+8]
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Return X0
	033 Call 0x1C17F20

Method: System.Int32 get_closestAnyHitIndex()

Disassembly:
	0x03B605C0 STRB W8, [X20 + 0x783]
	0x03B605C4 ADRP X8, 0x593000
	0x03B605C8 LDR X8, [X8 + 0x5A0]
	0x03B605CC LDR X8, [X8]
	0x03B605D0 LDR X8, [X8 + 0xB8]
	0x03B605D4 LDP S0, S1, [X8]
	0x03B605D8 LDR V2, [X8 + 0x8]
	0x03B605DC ADRP X8, 0xFFFFFFFFFCF8A000
	0x03B605E0 LDR V3, [X8 + 0x400]
	0x03B605E4 MOV X0, X31
	0x03B605E8 FMUL S0, S0, S3

ISIL:
	001 Move W8, [X0+940]
	002 Move W0, [X0+944]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CSEL not yet implemented."
	007 Return X0
	008 Move W0, W8
	009 Return X0

Method: System.Void OnValidate()

Disassembly:
	0x03B605EC FMUL S1, S1, S3
	0x03B605F0 FMUL S2, S2, S3
	0x03B605F4 FADD S3, S8, S0
	0x03B605F8 FADD S4, S9, S1
	0x03B605FC FADD S5, S10, S2
	0x03B60600 MOV V0.16B, V8.16B
	0x03B60604 MOV V1.16B, V9.16B
	0x03B60608 MOV V2.16B, V10.16B
	0x03B6060C BL 0x3C0CB04
	0x03B60610 LDR W8, [X19 + 0x3AC]
	0x03B60614 LDR W21, [X19 + 0x3B0]
	0x03B60618 CMP W8, 0x1
	0x03B6061C B.LT 0x3B60638
	0x03B60620 CMP W21, 0x1
	0x03B60624 B.LT 0x3B60634
	0x03B60628 CMP W8, W21
	0x03B6062C CSEL W21, W8, W21, LT
	0x03B60630 B 0x3B60638
	0x03B60634 MOV W21, W8
	0x03B60638 LDR X0, [X19 + 0x3A0]
	0x03B6063C CBZ X0, 0x3B607A4
	0x03B60640 ADRP X9, 0xFFFFFFFFFCF8A000
	0x03B60644 LDR V0, [X9 + 0x3C4]
	0x03B60648 ADRP X11, 0xFFFFFFFFFCF89000
	0x03B6064C ADRP X12, 0xFFFFFFFFFCF8A000
	0x03B60650 ADRP X13, 0xFFFFFFFFFCF8A000
	0x03B60654 STR S0, [X31 + 0x2C]
	0x03B60658 LDR V0, [X11 + 0xFB0]
	0x03B6065C ADRP X8, 0xFFFFFFFFFCF89000
	0x03B60660 ADRP X10, 0xFFFFFFFFFCF8A000
	0x03B60664 ADRP X22, 0x5FA000
	0x03B60668 STR S0, [X31 + 0x28]
	0x03B6066C LDR V0, [X12 + 0x404]
	0x03B60670 LDR V14, [X8 + 0xF54]
	0x03B60674 LDR V15, [X10 + 0x394]
	0x03B60678 MOV W20, W31
	0x03B6067C STR S0, [X31 + 0x24]
	0x03B60680 LDR V0, [X13 + 0x254]
	0x03B60684 STR S0, [X31 + 0x20]
	0x03B60688 LDR X22, [X22 + 0xB10]
	0x03B6068C LDR W8, [X0 + 0x18]
	0x03B60690 CMP W20, W8
	0x03B60694 B.GE 0x3B607A8
	0x03B60698 LDR X2, [X22]
	0x03B6069C MOV W1, W20
	0x03B606A0 BL 0x317B51C
	0x03B606A4 LDR W8, [X19 + 0x2D4]
	0x03B606A8 MOV V8.16B, V0.16B
	0x03B606AC MOV V9.16B, V1.16B
	0x03B606B0 MOV V10.16B, V2.16B
	0x03B606B4 CMP W8, 0x1
	0x03B606B8 MOV V11.16B, V14.16B
	0x03B606BC B.NE 0x3B606C4
	0x03B606C0 LDR V11, [X19 + 0x2D8]
	0x03B606C4 CBZ W21, 0x3B606E0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x883000
	006 Move X20, 0x594000
	007 Move W8, [X21+2440]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x594000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move X0, 0x5FB000
	018 Move X0, [X0+1984]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2440], W8
	022 Move X0, [X20]
	023 Move X21, 0x5FB000
	024 Move X20, [X19+672]
	025 Move W8, [X0+224]
	026 Move X21, [X21+1984]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Inequality, X0, X1
	034 Move X8, [X19+680]
	035 And W9, W0, 1
	036 Move X1, X31
	037 Move X2, X31
	038 Move X0, X8
	039 Move [X19+856], W9
	040 Call Object.op_Inequality, X0, X1
	041 And W8, W0, 1
	042 Move [X19+857], W8
	043 Move X0, [X21]
	044 Move W20, [X19+720]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, [X19+976]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move W8, 2
	052 NotImplemented "Instruction CSEL not yet implemented."
	053 Move [X19+720], W8
	054 Compare X0, 0
	055 JumpIfEqual {64}
	056 Move W1, [X19+764]
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X2, X31
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Call RegisteredUIInteractorCache.RegisterOrUnregisterXRUIInputModule, X0, X1
	063 Return 
	064 Move X20, [X31+16]
	065 Move X19, [X31+24]
	066 Move X30, [X31+32]
	067 Move X21, [X31+40]
	068 Return 

Method: System.Void OnXRControllerChanged()

Disassembly:
	0x03B606C8 LDR V1, [X31 + 0x2C]
	0x03B606CC CMP W20, W21
	0x03B606D0 FMOV S3, 0.5
	0x03B606D4 MOV V2.16B, V15.16B
	0x03B606D8 MOV V0.16B, V15.16B
	0x03B606DC B.GE 0x3B606EC
	0x03B606E0 LDP S2, S1, [X31 + 0x20]
	0x03B606E4 LDR V0, [X31 + 0x28]
	0x03B606E8 FMOV S3, 0.75
	0x03B606EC MOV X0, X31
	0x03B606F0 BL 0x3C0D030
	0x03B606F4 MOV V0.16B, V8.16B
	0x03B606F8 MOV V1.16B, V9.16B
	0x03B606FC MOV V2.16B, V10.16B
	0x03B60700 MOV X0, X31
	0x03B60704 BL 0x3887BE0
	0x03B60708 MOV V3.16B, V11.16B
	0x03B6070C MOV X0, X31
	0x03B60710 BL 0x3C0CC38
	0x03B60714 LDR X0, [X19 + 0x3A0]
	0x03B60718 CBZ X0, 0x3B607A4
	0x03B6071C LDR W8, [X0 + 0x18]
	0x03B60720 SUB W8, W8, 0x1
	0x03B60724 CMP W20, W8
	0x03B60728 ADD W20, W20, 0x1
	0x03B6072C B.GE 0x3B607A0
	0x03B60730 LDR X2, [X22]
	0x03B60734 MOV W1, W20
	0x03B60738 BL 0x317B51C
	0x03B6073C MOV V11.16B, V0.16B
	0x03B60740 MOV V12.16B, V1.16B
	0x03B60744 MOV V13.16B, V2.16B
	0x03B60748 MOV V0.16B, V8.16B
	0x03B6074C MOV V1.16B, V9.16B
	0x03B60750 MOV V2.16B, V10.16B
	0x03B60754 MOV X0, X31
	0x03B60758 BL 0x3887BE0
	0x03B6075C MOV V8.16B, V0.16B
	0x03B60760 MOV V9.16B, V1.16B
	0x03B60764 MOV V10.16B, V2.16B
	0x03B60768 MOV V0.16B, V11.16B
	0x03B6076C MOV V1.16B, V12.16B
	0x03B60770 MOV V2.16B, V13.16B
	0x03B60774 MOV X0, X31
	0x03B60778 BL 0x3887BE0
	0x03B6077C MOV V3.16B, V0.16B
	0x03B60780 MOV V4.16B, V1.16B
	0x03B60784 MOV V5.16B, V2.16B
	0x03B60788 MOV V0.16B, V8.16B
	0x03B6078C MOV V1.16B, V9.16B
	0x03B60790 MOV V2.16B, V10.16B
	0x03B60794 MOV X0, X31
	0x03B60798 BL 0x3C0CB04
	0x03B6079C LDR X0, [X19 + 0x3A0]
	0x03B607A0 CBNZ X0, 0x3B6068C
	0x03B607A4 BL 0x1C16F20
	0x03B607A8 LDR W8, [X19 + 0x290]
	0x03B607AC CMP W8, 0x2
	0x03B607B0 B.EQ 0x3B60818
	0x03B607B4 CMP W8, 0x1
	0x03B607B8 B.NE 0x3B608E0
	0x03B607BC LDR X8, [X19 + 0x3C0]
	0x03B607C0 CBZ X8, 0x3B607A4
	0x03B607C4 LDR W9, [X8 + 0x18]
	0x03B607C8 CBZ W9, 0x3B60904
	0x03B607CC LDP S0, S1, [X8 + 0x20]
	0x03B607D0 LDR V2, [X8 + 0x28]
	0x03B607D4 MOV X0, X31
	0x03B607D8 BL 0x3887BE0
	0x03B607DC LDR X8, [X19 + 0x3C0]
	0x03B607E0 CBZ X8, 0x3B607A4
	0x03B607E4 LDR W9, [X8 + 0x18]
	0x03B607E8 CMP W9, 0x1
	0x03B607EC B.LS 0x3B60904
	0x03B607F0 MOV V9.16B, V0.16B
	0x03B607F4 MOV V10.16B, V1.16B
	0x03B607F8 MOV V11.16B, V2.16B
	0x03B607FC LDP S0, S1, [X8 + 0x2C]
	0x03B60800 LDR V2, [X8 + 0x34]
	0x03B60804 MOV X0, X31
	0x03B60808 BL 0x3887BE0
	0x03B6080C LDR X8, [X19 + 0x3C0]
	0x03B60810 CBNZ X8, 0x3B60870
	0x03B60814 B 0x3B607A4
	0x03B60818 LDR X8, [X19 + 0x3B8]
	0x03B6081C CBZ X8, 0x3B607A4
	0x03B60820 LDR W9, [X8 + 0x18]
	0x03B60824 CBZ W9, 0x3B60904
	0x03B60828 LDP S0, S1, [X8 + 0x20]
	0x03B6082C LDR V2, [X8 + 0x28]
	0x03B60830 MOV X0, X31
	0x03B60834 BL 0x3887BE0
	0x03B60838 LDR X8, [X19 + 0x3B8]
	0x03B6083C CBZ X8, 0x3B607A4
	0x03B60840 LDR W9, [X8 + 0x18]
	0x03B60844 CMP W9, 0x1
	0x03B60848 B.LS 0x3B60904
	0x03B6084C MOV V9.16B, V0.16B
	0x03B60850 MOV V10.16B, V1.16B
	0x03B60854 MOV V11.16B, V2.16B
	0x03B60858 LDP S0, S1, [X8 + 0x2C]
	0x03B6085C LDR V2, [X8 + 0x34]
	0x03B60860 MOV X0, X31
	0x03B60864 BL 0x3887BE0
	0x03B60868 LDR X8, [X19 + 0x3B8]
	0x03B6086C CBZ X8, 0x3B607A4
	0x03B60870 LDR W9, [X8 + 0x18]
	0x03B60874 STR S2, [X31 + 0x2C]
	0x03B60878 CMP W9, 0x2
	0x03B6087C B.LS 0x3B60904
	0x03B60880 MOV V13.16B, V1.16B
	0x03B60884 MOV V12.16B, V0.16B
	0x03B60888 LDP S0, S1, [X8 + 0x38]
	0x03B6088C LDR V2, [X8 + 0x40]
	0x03B60890 MOV X0, X31
	0x03B60894 BL 0x3887BE0
	0x03B60898 ADRP X8, 0x5FA000
	0x03B6089C LDR X8, [X8 + 0x7C0]
	0x03B608A0 MOV V14.16B, V0.16B
	0x03B608A4 MOV V15.16B, V1.16B
	0x03B608A8 MOV V8.16B, V2.16B
	0x03B608AC LDR X0, [X8]
	0x03B608B0 LDR W8, [X0 + 0xE0]
	0x03B608B4 CBNZ W8, 0x3B608BC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x883000
	005 Move W8, [X20+2441]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {31}
	011 Move X0, 0x5FC000
	012 Move X0, [X0+680]
	013 Call 0x1C17CF4
	014 Move X0, 0x594000
	015 Move X0, [X0+2600]
	016 Call 0x1C17CF4
	017 Move X0, 0x594000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x5FC000
	021 Move X0, [X0+688]
	022 Call 0x1C17CF4
	023 Move X0, 0x5FC000
	024 Move X0, [X0+696]
	025 Call 0x1C17CF4
	026 Move X0, 0x5FC000
	027 Move X0, [X0+704]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+2441], W8
	031 Move X8, 0x594000
	032 Move X9, [X19+608]
	033 Move X8, [X8+1432]
	034 Compare X9, 0
	035 JumpIfEqual {43}
	036 Move X10, 0x5FC000
	037 Move X10, [X10+680]
	038 Move X11, [X9]
	039 Move X10, [X10]
	040 Move W13, [X11+304]
	041 Move W12, [X10+304]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X20, X31
	044 Move X11, [X11+200]
	045 Add X11, X11, X12
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CSEL not yet implemented."
	049 Move [X19+1128], X20
	050 Move X0, [X8]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, X20
	056 Move X1, X31
	057 Move X2, X31
	058 Call Object.op_Inequality, X0, X1
	059 Move X8, [X19+608]
	060 And W9, W0, 1
	061 Move [X19+1152], W9
	062 Compare X8, 0
	063 JumpIfEqual {71}
	064 Move X9, 0x5FC000
	065 Move X9, [X9+688]
	066 Move X10, [X8]
	067 Move X9, [X9]
	068 Move W12, [X10+304]
	069 Move W11, [X9+304]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X0, X31
	072 Move X10, [X10+200]
	073 Add X10, X10, X11
	074 NotImplemented "Instruction LDUR not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction CSEL not yet implemented."
	077 Move X1, X31
	078 Move X2, X31
	079 Move [X19+1136], X0
	080 Call Object.op_Inequality, X0, X1
	081 Move X8, [X19+608]
	082 And W9, W0, 1
	083 Move [X19+1153], W9
	084 Compare X8, 0
	085 JumpIfEqual {93}
	086 Move X9, 0x5FC000
	087 Move X9, [X9+696]
	088 Move X10, [X8]
	089 Move X9, [X9]
	090 Move W12, [X10+304]
	091 Move W11, [X9+304]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X0, X31
	094 Move X10, [X10+200]
	095 Add X10, X10, X11
	096 NotImplemented "Instruction LDUR not yet implemented."
	097 NotImplemented "Instruction CMP not yet implemented."
	098 NotImplemented "Instruction CSEL not yet implemented."
	099 Move X1, X31
	100 Move X2, X31
	101 Move [X19+1144], X0
	102 Call Object.op_Inequality, X0, X1
	103 And W8, W0, 1
	104 Move [X19+1154], W8
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {115}
	109 Move W8, [X19+766]
	110 Compare W8, 0
	111 JumpIfEqual {115}
	112 Move W8, [X19+784]
	113 Compare W8, 0
	114 JumpIfEqual {119}
	115 Move X20, [X31+16]
	116 Move X19, [X31+24]
	117 Move X30, [X31+32]
	118 Return 
	119 Move X8, 0x594000
	120 Move X8, [X8+2600]
	121 Move X0, [X8]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1C17DFC
	126 Move X8, 0x5FC000
	127 Move X8, [X8+704]
	128 Move X1, X19
	129 Move X20, [X31+16]
	130 Move X19, [X31+24]
	131 Move X2, X31
	132 Move X0, [X8]
	133 Move X30, [X31+32]
	134 Call Debug.LogWarning, X0, X1
	135 Return 

Method: System.Void Awake()

Disassembly:
	0x03B56DC0 B.EQ 0x3B56DF4
	0x03B56DC4 SUBS X9, X9, 0x1
	0x03B56DC8 ADD X10, X10, 0x10
	0x03B56DCC B.NE 0x3B56DB8
	0x03B56DD0 MOVZ W2, 0x3
	0x03B56DD4 MOV X0, X19
	0x03B56DD8 BL 0x1C5C788
	0x03B56DDC B 0x3B56E04
	0x03B56DE0 LDR V0, [X20 + 0x2F8]
	0x03B56DE4 LDP X20, X19, [X31 + 0x20]
	0x03B56DE8 LDP X22, X21, [X31 + 0x10]
	0x03B56DEC LDR X30, [X31], #0x30
	0x03B56DF0 RET
	0x03B56DF4 LDR W9, [X10]
	0x03B56DF8 ADD W9, W9, 0x3
	0x03B56DFC ADD X8, X8, W9, 0x4, SXTW
	0x03B56E00 ADD X0, X8, 0x138
	0x03B56E04 LDP X2, X1, [X0]
	0x03B56E08 MOV X0, X19
	0x03B56E0C LDP X20, X19, [X31 + 0x20]
	0x03B56E10 LDP X22, X21, [X31 + 0x10]
	0x03B56E14 LDR X30, [X31], #0x30
	0x03B56E18 BR X2
	0x03B56E1C STP X30, X21, [X31 - 0x20]!
	0x03B56E20 STP X20, X19, [X31 + 0x10]
	0x03B56E24 ADRP X21, 0x88C000
	0x03B56E28 ADRP X20, 0x604000
	0x03B56E2C LDRB W8, [X21 + 0x943]
	0x03B56E30 LDR X20, [X20 + 0x7C0]
	0x03B56E34 MOV X19, X0
	0x03B56E38 TBNZ X8, 0x0, 0x3B56E50
	0x03B56E3C ADRP X0, 0x604000
	0x03B56E40 LDR X0, [X0 + 0x7C0]
	0x03B56E44 BL 0x1C16CF4
	0x03B56E48 MOVZ W8, 0x1
	0x03B56E4C STRB W8, [X21 + 0x943]
	0x03B56E50 FMOV V0.2S, 0x0
	0x03B56E54 MOVZ W8, 0x3F800000
	0x03B56E58 STR D0, [X19 + 0x488]
	0x03B56E5C STR W8, [X19 + 0x49C]
	0x03B56E60 LDR X0, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x88D000
	005 Move W8, [X20+2442]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x605000
	012 Move X0, [X0+3696]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2442], W8
	016 Move X0, X19
	017 Call XRBaseControllerInteractor.Awake, X0
	018 Move X0, X19
	019 Move X1, X31
	020 Call Component.get_gameObject, X0
	021 Compare X0, 0
	022 JumpIfEqual {48}
	023 Move X20, 0x605000
	024 Move X20, [X20+3696]
	025 Move X1, X31
	026 Call GameObject.get_scene, X0
	027 And X0, X0, 0
	028 Move X1, X31
	029 Call PhysicsSceneExtensions.GetPhysicsScene, X0
	030 Move [X19+968], W0
	031 Move X0, [X20]
	032 Call 0x1C17F10
	033 Move X1, X19
	034 Move X2, X31
	035 Move X20, X0
	036 Call RegisteredUIInteractorCache..ctor, X0, X1
	037 Move X0, X19
	038 Move [X19+976], X20
	039 Call XRRayInteractor.CreateSamplePointsListsIfNecessary, X0
	040 Move X0, X19
	041 Call XRRayInteractor.FindReferenceFrame, X0
	042 Move X0, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Call XRRayInteractor.CreateRayOrigin, X0
	047 Return 
	048 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x03B60EC0 STR S2, [X31 + 0x48]
	0x03B60EC4 BL 0x3B5F4F8
	0x03B60EC8 MOV X0, X31
	0x03B60ECC BL 0x3887BE4
	0x03B60ED0 ADD X1, X31, 0x90
	0x03B60ED4 ADD X2, X31, 0x40
	0x03B60ED8 ADD X3, X31, 0x30
	0x03B60EDC MOV X0, X21
	0x03B60EE0 STP S0, S1, [X31 + 0x30]
	0x03B60EE4 STR S2, [X31 + 0x38]
	0x03B60EE8 BL 0x3B61F8C
	0x03B60EEC LDR X8, [X21 + 0x3B8]
	0x03B60EF0 CBZ X8, 0x3B61130
	0x03B60EF4 LDR W9, [X8 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call XRBaseInteractor.FindCreateInteractionManager, X0
	005 Move X0, X19
	006 Call XRBaseInteractor.RegisterWithInteractionManager, X0
	007 Move W8, [X19+764]
	008 Compare W8, 0
	009 JumpIfEqual {18}
	010 Move X0, [X19+976]
	011 Compare X0, 0
	012 JumpIfEqual {18}
	013 Move X1, X31
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Call RegisteredUIInteractorCache.RegisterWithXRUIInputModule, X0
	017 Return 
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Return 

Method: System.Void OnDisable()

Disassembly:
	0x03B60EF8 CBZ W9, 0x3B61134
	0x03B60EFC LDR V0, [X8 + 0x20]
	0x03B60F00 LDR V1, [X8 + 0x28]
	0x03B60F04 CMP W9, 0x1
	0x03B60F08 STR D0, [X31 + 0x70]
	0x03B60F0C STR S1, [X31 + 0x78]
	0x03B60F10 B.EQ 0x3B61134
	0x03B60F14 LDUR V0, [X8 + 0x2C]
	0x03B60F18 LDR V1, [X8 + 0x34]
	0x03B60F1C CMP W9, 0x2
	0x03B60F20 STR D0, [X31 + 0x60]
	0x03B60F24 STR S1, [X31 + 0x68]
	0x03B60F28 B.LS 0x3B61134
	0x03B60F2C LDR V0, [X8 + 0x38]
	0x03B60F30 LDR V1, [X8 + 0x40]
	0x03B60F34 CMP W20, 0x2
	0x03B60F38 STR D0, [X31 + 0x50]
	0x03B60F3C STR S1, [X31 + 0x58]
	0x03B60F40 B.LT 0x3B61110
	0x03B60F44 SUB W8, W20, 0x1
	0x03B60F48 FMOV S0, 1
	0x03B60F4C SCVTF S1, W8
	0x03B60F50 FDIV S9, S0, S1
	0x03B60F54 MOVZ W21, 0x1
	0x03B60F58 SCVTF S0, W21
	0x03B60F5C FMUL S8, S9, S0
	0x03B60F60 ADD X0, X31, 0x70
	0x03B60F64 ADD X1, X31, 0x60
	0x03B60F68 ADD X2, X31, 0x50

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x883000
	005 Move W8, [X20+2443]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x5FC000
	012 Move X0, [X0+752]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2443], W8
	016 Move X0, X19
	017 Call XRBaseInteractor.UnregisterWithInteractionManager, X0
	018 Move X8, [X19+928]
	019 Compare X8, 0
	020 JumpIfEqual {25}
	021 Move W9, [X8+28]
	022 Add W9, W9, 1
	023 Move [X8+24], W31
	024 Move [X8+28], W9
	025 Move W8, [X19+764]
	026 Compare W8, 0
	027 JumpIfEqual {37}
	028 Move X0, [X19+976]
	029 Compare X0, 0
	030 JumpIfEqual {37}
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X1, X31
	034 Move X30, [X31+32]
	035 Call RegisteredUIInteractorCache.UnregisterFromXRUIInputModule, X0
	036 Return 
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return 

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x03B60F6C ADD X3, X31, 0x20
	0x03B60F70 MOV V0.16B, V8.16B
	0x03B60F74 MOV X4, X31
	0x03B60F78 BL 0x3B9375C
	0x03B60F7C LDR W9, [X19 + 0x1C]
	0x03B60F80 LDP S0, S1, [X31 + 0x20]
	0x03B60F84 LDR V2, [X31 + 0x28]
	0x03B60F88 LDR X8, [X19 + 0x10]
	0x03B60F8C LDR X10, [X22]
	0x03B60F90 ADD W9, W9, 0x1
	0x03B60F94 STR W9, [X19 + 0x1C]
	0x03B60F98 CBZ X8, 0x3B61130
	0x03B60F9C LDRSW X9, [X19 + 0x18]
	0x03B60FA0 LDR W11, [X8 + 0x18]
	0x03B60FA4 CMP W9, W11
	0x03B60FA8 B.CS 0x3B60FC4
	0x03B60FAC ADD W10, W9, 0x1
	0x03B60FB0 ADD X8, X8, X9, 0x4, LSL
	0x03B60FB4 STR W10, [X19 + 0x18]
	0x03B60FB8 STP S0, S1, [X8 + 0x20]
	0x03B60FBC STP S2, S8, [X8 + 0x28]
	0x03B60FC0 B 0x3B60FDC
	0x03B60FC4 LDR X8, [X10 + 0x20]
	0x03B60FC8 MOV X0, X19
	0x03B60FCC MOV V3.16B, V8.16B
	0x03B60FD0 LDR X8, [X8 + 0xC0]
	0x03B60FD4 LDR X1, [X8 + 0x70]
	0x03B60FD8 BL 0x317B844
	0x03B60FDC ADD W21, W21, 0x1
	0x03B60FE0 CMP W20, W21
	0x03B60FE4 B.NE 0x3B60F58
	0x03B60FE8 B 0x3B61110
	0x03B60FEC MOV V0.16B, V10.16B
	0x03B60FF0 MOV V1.16B, V9.16B
	0x03B60FF4 MOV V2.16B, V8.16B
	0x03B60FF8 MOV X0, X31
	0x03B60FFC BL 0x3887BE4
	0x03B61000 LDP S3, S4, [X31 + 0xD0]
	0x03B61004 LDR V5, [X31 + 0xD8]
	0x03B61008 STP S0, S1, [X31 + 0xC0]
	0x03B6100C STR S2, [X31 + 0xC8]
	0x03B61010 MOV V0.16B, V3.16B
	0x03B61014 MOV V1.16B, V4.16B
	0x03B61018 MOV V2.16B, V5.16B
	0x03B6101C MOV X0, X31
	0x03B61020 BL 0x3887BE4
	0x03B61024 ADD X1, X31, 0xC0
	0x03B61028 ADD X2, X31, 0x90
	0x03B6102C ADD X3, X31, 0xB0
	0x03B61030 ADD X4, X31, 0xA0
	0x03B61034 ADD X5, X31, 0x9C
	0x03B61038 MOV X0, X21
	0x03B6103C STP S0, S1, [X31 + 0x90]
	0x03B61040 STR S2, [X31 + 0x98]
	0x03B61044 BL 0x3B62080
	0x03B61048 CMP W20, 0x2
	0x03B6104C B.LT 0x3B61110
	0x03B61050 LDR V0, [X31 + 0x9C]
	0x03B61054 SUB W8, W20, 0x1
	0x03B61058 SCVTF S1, W8
	0x03B6105C MOVZ W21, 0x1
	0x03B61060 FDIV S9, S0, S1
	0x03B61064 SCVTF S0, W21
	0x03B61068 FMUL S8, S9, S0
	0x03B6106C ADD X0, X31, 0xC0
	0x03B61070 ADD X1, X31, 0xB0
	0x03B61074 ADD X2, X31, 0xA0
	0x03B61078 ADD X3, X31, 0x80
	0x03B6107C MOV V0.16B, V8.16B
	0x03B61080 MOV X4, X31
	0x03B61084 BL 0x3B93EE8
	0x03B61088 LDR W9, [X19 + 0x1C]
	0x03B6108C LDP S0, S1, [X31 + 0x80]
	0x03B61090 LDR V2, [X31 + 0x88]
	0x03B61094 LDR X8, [X19 + 0x10]
	0x03B61098 LDR X10, [X22]
	0x03B6109C ADD W9, W9, 0x1
	0x03B610A0 STR W9, [X19 + 0x1C]
	0x03B610A4 CBZ X8, 0x3B61130
	0x03B610A8 LDRSW X9, [X19 + 0x18]
	0x03B610AC LDR W11, [X8 + 0x18]
	0x03B610B0 CMP W9, W11
	0x03B610B4 B.CS 0x3B610D0
	0x03B610B8 ADD W10, W9, 0x1
	0x03B610BC ADD X8, X8, X9, 0x4, LSL
	0x03B610C0 STR W10, [X19 + 0x18]
	0x03B610C4 STP S0, S1, [X8 + 0x20]
	0x03B610C8 STP S2, S8, [X8 + 0x28]
	0x03B610CC B 0x3B610E8
	0x03B610D0 LDR X8, [X10 + 0x20]
	0x03B610D4 MOV X0, X19
	0x03B610D8 MOV V3.16B, V8.16B
	0x03B610DC LDR X8, [X8 + 0xC0]
	0x03B610E0 LDR X1, [X8 + 0x70]
	0x03B610E4 BL 0x317B844
	0x03B610E8 ADD W21, W21, 0x1
	0x03B610EC CMP W20, W21
	0x03B610F0 B.NE 0x3B61064
	0x03B610F4 B 0x3B61110
	0x03B610F8 LDR X8, [X9 + 0x20]
	0x03B610FC FMOV S3, 1
	0x03B61100 MOV X0, X19
	0x03B61104 LDR X8, [X8 + 0xC0]
	0x03B61108 LDR X1, [X8 + 0x70]
	0x03B6110C BL 0x317B844
	0x03B61110 LDP X20, X19, [X31 + 0x130]
	0x03B61114 LDP X22, X21, [X31 + 0x120]
	0x03B61118 LDP X30, X23, [X31 + 0x110]
	0x03B6111C LDR X29, [X31 + 0x108]
	0x03B61120 LDP D9, D8, [X31 + 0xF8]
	0x03B61124 LDR V10, [X31 + 0xF0]
	0x03B61128 ADD X31, X31, 0x140
	0x03B6112C RET
	0x03B61130 BL 0x1C16F20
	0x03B61134 BL 0x1C16F28
	0x03B61138 SUB X31, X31, 0x120
	0x03B6113C STP D11, D10, [X31 + 0xC0]
	0x03B61140 STP D9, D8, [X31 + 0xD0]
	0x03B61144 STP X29, X30, [X31 + 0xE0]
	0x03B61148 STP X24, X23, [X31 + 0xF0]
	0x03B6114C STP X22, X21, [X31 + 0x100]
	0x03B61150 STP X20, X19, [X31 + 0x110]
	0x03B61154 ADRP X24, 0x881000
	0x03B61158 LDRB W8, [X24 + 0x9A6]
	0x03B6115C MOV X21, X4
	0x03B61160 MOV X19, X3
	0x03B61164 MOV W23, W2
	0x03B61168 MOV X22, X1
	0x03B6116C MOV X20, X0
	0x03B61170 TBNZ X8, 0x0, 0x3B61194
	0x03B61174 ADRP X0, 0x5F9000
	0x03B61178 LDR X0, [X0 + 0xB08]
	0x03B6117C BL 0x1C16CF4
	0x03B61180 ADRP X0, 0x5F9000
	0x03B61184 LDR X0, [X0 + 0xB10]
	0x03B61188 BL 0x1C16CF4
	0x03B6118C MOVZ W8, 0x1
	0x03B61190 STRB W8, [X24 + 0x9A6]
	0x03B61194 CMP W23, 0x1
	0x03B61198 STR W31, [X31 + 0xA8]
	0x03B6119C STR X31, [X31 + 0xA0]
	0x03B611A0 STR W31, [X31 + 0x98]
	0x03B611A4 STR X31, [X31 + 0x90]
	0x03B611A8 STR W31, [X31 + 0x88]
	0x03B611AC STR X31, [X31 + 0x80]
	0x03B611B0 STR W31, [X31 + 0x78]
	0x03B611B4 STR X31, [X31 + 0x70]
	0x03B611B8 STR W31, [X31 + 0x68]
	0x03B611BC STR X31, [X31 + 0x60]
	0x03B611C0 STR W31, [X31 + 0x5C]
	0x03B611C4 B.LT 0x3B611DC
	0x03B611C8 CBZ X22, 0x3B61444
	0x03B611CC LDR W8, [X22 + 0x18]
	0x03B611D0 CMP W8, W23
	0x03B611D4 B.LE 0x3B611E0
	0x03B611D8 B 0x3B611E8
	0x03B611DC CBZ X22, 0x3B61444
	0x03B611E0 LDR W8, [X22 + 0x18]
	0x03B611E4 SUB W23, W8, 0x1
	0x03B611E8 ADRP X24, 0x5F9000
	0x03B611EC LDR X24, [X24 + 0xB10]
	0x03B611F0 MOV X0, X22
	0x03B611F4 MOV W1, W23
	0x03B611F8 LDR X2, [X24]
	0x03B611FC BL 0x317B51C
	0x03B61200 LDR X2, [X24]
	0x03B61204 MOV X0, X22
	0x03B61208 MOV W1, W31
	0x03B6120C STR D0, [X31]
	0x03B61210 STR D1, [X31 + 0x10]
	0x03B61214 MOV V8.16B, V2.16B
	0x03B61218 MOV V9.16B, V3.16B
	0x03B6121C BL 0x317B51C
	0x03B61220 STP S0, S1, [X31 + 0xB0]
	0x03B61224 STR S2, [X31 + 0xB8]
	0x03B61228 LDR W8, [X20 + 0x290]
	0x03B6122C CMP W8, 0x2
	0x03B61230 B.EQ 0x3B612A4
	0x03B61234 LDP V16, V17, [X31]
	0x03B61238 MOV V4.16B, V0.16B
	0x03B6123C MOV V4.S[1], V1.S[0]
	0x03B61240 FADD S5, S8, S2
	0x03B61244 MOV V3.16B, V16.16B
	0x03B61248 MOV V3.S[1], V17.S[0]
	0x03B6124C MOVI V6.2S, 0x3F, 0x18
	0x03B61250 FMOV S7, 0.5
	0x03B61254 FADD V3.2S, V3.2S, V4.2S
	0x03B61258 CMP W8, 0x1
	0x00000000 INVALID
	0x03B61260 FMUL S10, S5, S7
	0x03B61264 B.EQ 0x3B61324
	0x03B61268 CBNZ W8, 0x3B61420
	0x03B6126C CBZ X19, 0x3B61444
	0x03B61270 LDR W8, [X19 + 0x18]
	0x03B61274 CBZ W8, 0x3B61440
	0x03B61278 CMP W8, 0x1
	0x03B6127C STP S0, S1, [X19 + 0x20]
	0x03B61280 STR S2, [X19 + 0x28]
	0x03B61284 B.EQ 0x3B61440
	0x03B61288 MOV V3.16B, V17.16B
	0x03B6128C MOV V4.16B, V16.16B
	0x03B61290 CMP W8, 0x2
	0x03B61294 STUR D11, [X19 + 0x2C]
	0x03B61298 STR S10, [X19 + 0x34]
	0x03B6129C B.HI 0x3B61418
	0x03B612A0 B 0x3B61440
	0x03B612A4 LDR X9, [X20 + 0x3B8]
	0x03B612A8 CBZ X9, 0x3B61444
	0x03B612AC LDR W8, [X9 + 0x18]
	0x03B612B0 CBZ W8, 0x3B61440
	0x03B612B4 CBZ X19, 0x3B61444
	0x03B612B8 LDR W8, [X19 + 0x18]
	0x03B612BC CBZ W8, 0x3B61440
	0x03B612C0 LDR V0, [X9 + 0x20]
	0x03B612C4 LDR V1, [X9 + 0x28]
	0x03B612C8 STR D0, [X19 + 0x20]
	0x03B612CC STR S1, [X19 + 0x28]
	0x03B612D0 LDR X9, [X20 + 0x3B8]
	0x03B612D4 CBZ X9, 0x3B61444
	0x03B612D8 LDR W10, [X9 + 0x18]
	0x03B612DC CMP W10, 0x1
	0x03B612E0 B.LS 0x3B61440
	0x03B612E4 CMP W8, 0x1
	0x03B612E8 B.LS 0x3B61440
	0x03B612EC LDUR V0, [X9 + 0x2C]
	0x03B612F0 LDR V1, [X9 + 0x34]
	0x03B612F4 STUR D0, [X19 + 0x2C]
	0x03B612F8 STR S1, [X19 + 0x34]
	0x03B612FC LDR X9, [X20 + 0x3B8]
	0x03B61300 CBZ X9, 0x3B61444
	0x03B61304 LDR W10, [X9 + 0x18]
	0x03B61308 CMP W10, 0x2
	0x03B6130C B.LS 0x3B61440
	0x03B61310 CMP W8, 0x2
	0x03B61314 B.LS 0x3B61440
	0x03B61318 LDP S3, S8, [X9 + 0x3C]
	0x03B6131C LDR V4, [X9 + 0x38]
	0x03B61320 B 0x3B61418
	0x03B61324 LDUR V0, [X21 + 0xC]
	0x03B61328 LDR V1, [X21]
	0x03B6132C ADD X1, X31, 0x20
	0x03B61330 ADD X2, X31, 0xA0
	0x03B61334 ADD X3, X31, 0x90
	0x03B61338 MOV X0, X20
	0x03B6133C STUR V0, [X31 + 0x2C]
	0x03B61340 STR V1, [X31 + 0x2]
	0x03B61344 BL 0x3B6161C
	0x03B61348 LDP S0, S1, [X31 + 0xA0]
	0x03B6134C LDR V2, [X31 + 0xA8]
	0x03B61350 MOV X0, X31
	0x03B61354 BL 0x3887BE4
	0x03B61358 LDP S3, S4, [X31 + 0x90]
	0x03B6135C LDR V5, [X31 + 0x98]
	0x03B61360 STP S0, S1, [X31 + 0x50]
	0x03B61364 STR S2, [X31 + 0x58]
	0x03B61368 MOV V0.16B, V3.16B
	0x03B6136C MOV V1.16B, V4.16B
	0x03B61370 MOV V2.16B, V5.16B
	0x03B61374 MOV X0, X31
	0x03B61378 BL 0x3887BE4
	0x03B6137C ADD X1, X31, 0x50
	0x03B61380 ADD X2, X31, 0x40
	0x03B61384 ADD X3, X31, 0x80
	0x03B61388 ADD X4, X31, 0x70
	0x03B6138C ADD X5, X31, 0x5C
	0x03B61390 MOV X0, X20
	0x03B61394 STP S0, S1, [X31 + 0x40]
	0x03B61398 STR S2, [X31 + 0x48]
	0x03B6139C BL 0x3B62080
	0x03B613A0 FMOV S0, 0.5
	0x03B613A4 FMUL S0, S9, S0
	0x03B613A8 ADD X0, X31, 0xB0
	0x03B613AC ADD X1, X31, 0x80
	0x03B613B0 ADD X2, X31, 0x70
	0x03B613B4 ADD X3, X31, 0x60
	0x03B613B8 MOV X4, X31
	0x03B613BC BL 0x3B93EE8
	0x03B613C0 CBZ X19, 0x3B61444
	0x03B613C4 LDR W8, [X19 + 0x18]
	0x03B613C8 CBZ W8, 0x3B61440
	0x03B613CC LDR V3, [X31 + 0xB8]
	0x03B613D0 LDR V0, [X31 + 0x60]
	0x03B613D4 LDR V2, [X31 + 0xB0]
	0x03B613D8 LDR V1, [X31 + 0x68]
	0x03B613DC STR S3, [X19 + 0x28]
	0x03B613E0 LDP V4, V3, [X31]
	0x03B613E4 CMP W8, 0x1
	0x03B613E8 STR D2, [X19 + 0x20]
	0x03B613EC B.EQ 0x3B61440
	0x03B613F0 FSUB V0.2S, V0.2S, V11.2S
	0x03B613F4 FSUB S1, S1, S10
	0x03B613F8 FADD V0.2S, V0.2S, V0.2S
	0x03B613FC FADD S1, S1, S1
	0x03B61400 CMP W8, 0x2
	0x03B61404 FADD V0.2S, V11.2S, V0.2S
	0x03B61408 FADD S1, S10, S1
	0x03B6140C STUR D0, [X19 + 0x2C]
	0x03B61410 STR S1, [X19 + 0x34]
	0x03B61414 B.LS 0x3B61440
	0x03B61418 STP S4, S3, [X19 + 0x38]
	0x03B6141C STR S8, [X19 + 0x40]
	0x03B61420 LDP X20, X19, [X31 + 0x110]
	0x03B61424 LDP X22, X21, [X31 + 0x100]
	0x03B61428 LDP X24, X23, [X31 + 0xF0]
	0x03B6142C LDP X29, X30, [X31 + 0xE0]
	0x03B61430 LDP D9, D8, [X31 + 0xD0]
	0x03B61434 LDP D11, D10, [X31 + 0xC0]
	0x03B61438 ADD X31, X31, 0x120
	0x03B6143C RET
	0x03B61440 BL 0x1C16F28
	0x03B61444 BL 0x1C16F20
	0x03B61448 SUB X31, X31, 0x60
	0x03B6144C STP X30, X23, [X31 + 0x30]
	0x03B61450 STP X22, X21, [X31 + 0x40]
	0x03B61454 STP X20, X19, [X31 + 0x50]
	0x03B61458 ADRP X22, 0x881000
	0x03B6145C LDRB W8, [X22 + 0x990]
	0x03B61460 MOV X20, X2
	0x03B61464 MOV X19, X1
	0x03B61468 MOV X21, X0
	0x03B6146C TBNZ X8, 0x0, 0x3B614B4
	0x03B61470 ADRP X0, 0x5F9000
	0x03B61474 LDR X0, [X0 + 0xA80]
	0x03B61478 BL 0x1C16CF4
	0x03B6147C ADRP X0, 0x5FA000
	0x03B61480 LDR X0, [X0 + 0x300]
	0x03B61484 BL 0x1C16CF4
	0x03B61488 ADRP X0, 0x5BD000
	0x03B6148C LDR X0, [X0 + 0x1F8]
	0x03B61490 BL 0x1C16CF4
	0x03B61494 ADRP X0, 0x5FA000
	0x03B61498 LDR X0, [X0 + 0x308]
	0x03B6149C BL 0x1C16CF4
	0x03B614A0 ADRP X0, 0x594000
	0x03B614A4 LDR X0, [X0 + 0x9B0]
	0x03B614A8 BL 0x1C16CF4
	0x03B614AC MOVZ W8, 0x1
	0x03B614B0 STRB W8, [X22 + 0x990]
	0x03B614B4 STP X31, X31, [X31 + 0x20]
	0x03B614B8 ADRP X23, 0x5FA000
	0x03B614BC LDR X1, [X19]
	0x03B614C0 LDR X23, [X23 + 0x308]
	0x03B614C4 CBNZ X1, 0x3B61524
	0x03B614C8 ADRP X8, 0x5F9000
	0x03B614CC LDR X8, [X8 + 0xA80]
	0x03B614D0 LDR X22, [X8]
	0x03B614D4 LDR X8, [X22 + 0x38]
	0x03B614D8 CBNZ X8, 0x3B614E8
	0x03B614DC MOV X0, X22
	0x03B614E0 BL 0x1C5C6E0
	0x03B614E4 LDR X8, [X22 + 0x38]
	0x03B614E8 LDR X0, [X8 + 0x10]
	0x03B614EC LDRB W8, [X0 + 0x135]
	0x03B614F0 TBNZ X8, 0x0, 0x3B614F8
	0x03B614F4 BL 0x1C5C684
	0x03B614F8 LDR W8, [X0 + 0xE0]
	0x03B614FC CBNZ W8, 0x3B61504
	0x03B61500 BL 0x1C16DFC
	0x03B61504 LDR X8, [X22 + 0x38]
	0x03B61508 LDR X0, [X8 + 0x10]
	0x03B6150C LDRB W8, [X0 + 0x135]
	0x03B61510 TBNZ X8, 0x0, 0x3B61518
	0x03B61514 BL 0x1C5C684
	0x03B61518 LDR X8, [X0 + 0xB8]
	0x03B6151C LDR X1, [X8]
	0x03B61520 STR X1, [X19]
	0x03B61524 LDR X3, [X23]
	0x03B61528 ADD X0, X31, 0x20
	0x03B6152C MOVZ W2, 0x2
	0x03B61530 BL 0x23F104C
	0x03B61534 ADD X1, X31, 0x20
	0x03B61538 ADD X3, X31, 0x0
	0x03B6153C MOV X0, X21
	0x03B61540 MOV X2, X20
	0x03B61544 STP X31, X31, [X31]
	0x03B61548 STR W31, [X31 + 0x18]
	0x03B6154C STR X31, [X31 + 0x10]
	0x03B61550 BL 0x3B4E6C8
	0x03B61554 LDR X1, [X19]
	0x03B61558 CBZ X1, 0x3B615CC
	0x03B6155C LDR W8, [X31 + 0x28]
	0x03B61560 LDR W9, [X1 + 0x18]
	0x03B61564 ADRP X22, 0x5FA000
	0x03B61568 ADRP X21, 0x5BD000
	0x03B6156C LDR X22, [X22 + 0x300]
	0x03B61570 LDR X21, [X21 + 0x1F8]
	0x03B61574 MOV W20, W0
	0x03B61578 CMP W8, W9
	0x03B6157C B.EQ 0x3B6159C
	0x03B61580 ADRP X9, 0x594000
	0x03B61584 LDR X9, [X9 + 0x9B0]
	0x03B61588 MOV W1, W8
	0x03B6158C LDR X0, [X9]
	0x03B61590 BL 0x1C16D6C
	0x03B61594 MOV X1, X0
	0x03B61598 STR X0, [X19]
	0x03B6159C LDR X2, [X22]
	0x03B615A0 ADD X0, X31, 0x20
	0x03B615A4 BL 0x23F1420
	0x03B615A8 LDR X1, [X21]
	0x03B615AC ADD X0, X31, 0x20
	0x03B615B0 BL 0x23F1210
	0x03B615B4 AND W0, W20, 0x1
	0x03B615B8 LDP X20, X19, [X31 + 0x50]
	0x03B615BC LDP X22, X21, [X31 + 0x40]
	0x03B615C0 LDP X30, X23, [X31 + 0x30]
	0x03B615C4 ADD X31, X31, 0x60
	0x03B615C8 RET
	0x03B615CC BL 0x1C16F20
	0x03B615D0 STP X30, X21, [X31 - 0x20]!
	0x03B615D4 STP X20, X19, [X31 + 0x10]
	0x03B615D8 CBZ X0, 0x3B61618
	0x03B615DC MOV X21, X1
	0x03B615E0 MOV X1, X31
	0x03B615E4 MOV X19, X2
	0x03B615E8 MOV X20, X0
	0x03B615EC BL 0x3C3F58C
	0x03B615F0 MOV X0, X20
	0x03B615F4 MOV X1, X31
	0x03B615F8 STP S0, S1, [X21]
	0x03B615FC STR S2, [X21 + 0x8]
	0x03B61600 BL 0x3C3FA04
	0x03B61604 STP S0, S1, [X19]
	0x03B61608 STR S2, [X19 + 0x8]
	0x03B6160C LDP X20, X19, [X31 + 0x10]
	0x03B61610 LDP X30, X21, [X31], #0x20
	0x03B61614 RET
	0x03B61618 BL 0x1C16F20
	0x03B6161C SUB X31, X31, 0x50
	0x03B61620 STP X30, X23, [X31 + 0x20]
	0x03B61624 STP X22, X21, [X31 + 0x30]
	0x03B61628 STP X20, X19, [X31 + 0x40]
	0x03B6162C ADRP X23, 0x881000
	0x03B61630 LDRB W8, [X23 + 0x992]
	0x03B61634 MOV X19, X3
	0x03B61638 MOV X20, X2
	0x03B6163C MOV X21, X1
	0x03B61640 MOV X22, X0
	0x03B61644 TBNZ X8, 0x0, 0x3B61668
	0x03B61648 ADRP X0, 0x5FA000
	0x03B6164C LDR X0, [X0 + 0x310]
	0x03B61650 BL 0x1C16CF4
	0x03B61654 ADRP X0, 0x5FA000
	0x03B61658 LDR X0, [X0 + 0x318]
	0x03B6165C BL 0x1C16CF4
	0x03B61660 MOVZ W8, 0x1
	0x03B61664 STRB W8, [X23 + 0x992]
	0x03B61668 LDRB W8, [X21]
	0x03B6166C CBZ W8, 0x3B616BC
	0x03B61670 ADRP X8, 0x5FA000
	0x03B61674 LDR X8, [X8 + 0x318]
	0x03B61678 MOV X0, X21
	0x03B6167C LDR X1, [X8]
	0x03B61680 ADD X8, X31, 0x8
	0x03B61684 BL 0x24381B0
	0x03B61688 LDR V0, [X31 + 0x8]
	0x03B6168C LDR V1, [X31 + 0x10]
	0x03B61690 LDUR V2, [X31 + 0x14]
	0x03B61694 LDR V3, [X31 + 0x1C]
	0x03B61698 STR D0, [X20]
	0x03B6169C STR S1, [X20 + 0x8]
	0x03B616A0 STR D2, [X19]
	0x03B616A4 STR S3, [X19 + 0x8]
	0x03B616A8 LDP X20, X19, [X31 + 0x40]
	0x03B616AC LDP X22, X21, [X31 + 0x30]
	0x03B616B0 LDP X30, X23, [X31 + 0x20]
	0x03B616B4 ADD X31, X31, 0x50
	0x03B616B8 RET
	0x03B616BC MOV X0, X22
	0x03B616C0 MOV X1, X20
	0x03B616C4 MOV X2, X19
	0x03B616C8 LDP X20, X19, [X31 + 0x40]
	0x03B616CC LDP X22, X21, [X31 + 0x30]
	0x03B616D0 LDP X30, X23, [X31 + 0x20]
	0x03B616D4 ADD X31, X31, 0x50
	0x03B616D8 B 0x3B5F170
	0x03B616DC STR D10, [X31 - 0x60]!
	0x03B616E0 STP D9, D8, [X31 + 0x10]
	0x03B616E4 STP X30, X25, [X31 + 0x20]
	0x03B616E8 STP X24, X23, [X31 + 0x30]
	0x03B616EC STP X22, X21, [X31 + 0x40]
	0x03B616F0 STP X20, X19, [X31 + 0x50]
	0x03B616F4 ADRP X21, 0x881000
	0x03B616F8 LDRB W8, [X21 + 0x995]
	0x03B616FC MOV X20, X1
	0x03B61700 MOV X19, X0
	0x03B61704 TBNZ X8, 0x0, 0x3B61764
	0x03B61708 ADRP X0, 0x596000
	0x03B6170C LDR X0, [X0 + 0x3B8]
	0x03B61710 BL 0x1C16CF4
	0x03B61714 ADRP X0, 0x596000
	0x03B61718 LDR X0, [X0 + 0x380]
	0x03B6171C BL 0x1C16CF4
	0x03B61720 ADRP X0, 0x5FA000
	0x03B61724 LDR X0, [X0 + 0x320]
	0x03B61728 BL 0x1C16CF4
	0x03B6172C ADRP X0, 0x5F9000
	0x03B61730 LDR X0, [X0 + 0xB08]
	0x03B61734 BL 0x1C16CF4
	0x03B61738 ADRP X0, 0x5F9000
	0x03B6173C LDR X0, [X0 + 0xB10]
	0x03B61740 BL 0x1C16CF4
	0x03B61744 ADRP X0, 0x5EC000
	0x03B61748 LDR X0, [X0 + 0xFE8]
	0x03B6174C BL 0x1C16CF4
	0x03B61750 ADRP X0, 0x5FA000
	0x03B61754 LDR X0, [X0 + 0x258]
	0x03B61758 BL 0x1C16CF4
	0x03B6175C MOVZ W8, 0x1
	0x03B61760 STRB W8, [X21 + 0x995]
	0x03B61764 ADRP X22, 0x5FA000
	0x03B61768 LDR X22, [X22 + 0x258]
	0x03B6176C MOV X0, X19
	0x03B61770 MOV X1, X31
	0x03B61774 BL 0x3C32454
	0x03B61778 TBZ X0, 0x0, 0x3B617AC
	0x03B6177C LDR X8, [X19 + 0x3A0]
	0x03B61780 CBZ X8, 0x3B617AC
	0x03B61784 LDRB W8, [X19 + 0x2FC]
	0x03B61788 CBZ W8, 0x3B617A0
	0x03B6178C LDRB W8, [X19 + 0x2FD]
	0x03B61790 CBZ W8, 0x3B617A0
	0x03B61794 MOV X0, X19
	0x03B61798 BL 0x3B4B6D0
	0x03B6179C TBNZ X0, 0x0, 0x3B617AC
	0x03B617A0 MOV X0, X19
	0x03B617A4 BL 0x3B48408
	0x03B617A8 TBZ X0, 0x0, 0x3B617E4
	0x03B617AC LDR X0, [X22]
	0x03B617B0 LDR W8, [X0 + 0xE0]
	0x03B617B4 CBNZ W8, 0x3B617BC
	0x03B617B8 BL 0x1C16DFC
	0x03B617BC MOV X0, X20
	0x03B617C0 LDP X20, X19, [X31 + 0x50]
	0x03B617C4 LDP X22, X21, [X31 + 0x40]
	0x03B617C8 LDP X24, X23, [X31 + 0x30]
	0x03B617CC LDP X30, X25, [X31 + 0x20]
	0x03B617D0 LDP D9, D8, [X31 + 0x10]
	0x03B617D4 MOV W1, W31
	0x03B617D8 MOV X2, X31
	0x03B617DC LDR V10, [X31], #0x60
	0x03B617E0 B 0x3B9F378
	0x03B617E4 LDRB W8, [X19 + 0x358]
	0x03B617E8 CBZ W8, 0x3B617F8
	0x03B617EC LDR X21, [X19 + 0x2A0]
	0x03B617F0 CBNZ X21, 0x3B6180C
	0x03B617F4 B 0x3B619D0
	0x03B617F8 MOV X0, X19
	0x03B617FC MOV X1, X31
	0x03B61800 BL 0x3C32E90
	0x03B61804 MOV X21, X0
	0x03B61808 CBZ X21, 0x3B619D0
	0x03B6180C MOV X0, X21
	0x03B61810 MOV X1, X31
	0x03B61814 BL 0x3C3F58C
	0x03B61818 LDR X0, [X22]
	0x03B6181C MOV V8.16B, V0.16B
	0x03B61820 MOV V9.16B, V1.16B
	0x03B61824 MOV V10.16B, V2.16B
	0x03B61828 LDR W8, [X0 + 0xE0]
	0x03B6182C CBNZ W8, 0x3B61834
	0x03B61830 BL 0x1C16DFC
	0x03B61834 MOV X0, X20
	0x03B61838 MOV V0.16B, V8.16B
	0x03B6183C MOV V1.16B, V9.16B
	0x03B61840 MOV V2.16B, V10.16B
	0x03B61844 MOV X1, X31
	0x03B61848 BL 0x3B9EE04
	0x03B6184C MOV X0, X21
	0x03B61850 MOV X1, X31
	0x03B61854 BL 0x3C3DEB4
	0x03B61858 MOV X0, X20
	0x03B6185C MOV X1, X31
	0x03B61860 BL 0x3B9EED4
	0x03B61864 LDR X8, [X19]
	0x03B61868 MOV X0, X19
	0x03B6186C LDR X9, [X8 + 0x768]
	0x03B61870 LDR X1, [X8 + 0x770]
	0x03B61874 BLR X9
	0x03B61878 AND W1, W0, 0x1
	0x03B6187C MOV X0, X20
	0x03B61880 MOV X2, X31
	0x03B61884 BL 0x3B9ED2C
	0x03B61888 MOV X0, X19
	0x03B6188C BL 0x3B4FFD4
	0x03B61890 MOV X0, X20
	0x03B61894 MOV X1, X31
	0x03B61898 BL 0x3B9F0F8
	0x03B6189C LDR W1, [X19 + 0x2E0]
	0x03B618A0 MOV X0, X20
	0x03B618A4 MOV X2, X31
	0x03B618A8 BL 0x3B9F068
	0x03B618AC MOV X0, X20
	0x03B618B0 MOV W1, W31
	0x03B618B4 MOV X2, X31
	0x03B618B8 BL 0x3B9F218
	0x03B618BC LDR X20, [X20 + 0xD8]
	0x03B618C0 CBZ X20, 0x3B619D0
	0x03B618C4 LDR W8, [X20 + 0x1C]
	0x03B618C8 MOV X0, X19
	0x03B618CC ADD W8, W8, 0x1
	0x03B618D0 STP W31, W8, [X20 + 0x18]
	0x03B618D4 BL 0x3B619D4
	0x03B618D8 LDR X8, [X19 + 0x3A0]
	0x03B618DC CBZ X8, 0x3B619D0
	0x03B618E0 LDR W21, [X8 + 0x18]
	0x03B618E4 CMP W21, 0x1
	0x03B618E8 B.LT 0x3B619B4
	0x03B618EC ADRP X8, 0x5FA000
	0x03B618F0 LDR X8, [X8 + 0x320]
	0x03B618F4 MOV X0, X20
	0x03B618F8 LDR X1, [X8]
	0x03B618FC BL 0x30CBCE4
	0x03B61900 CMP W0, W21
	0x03B61904 B.GE 0x3B61920

ISIL:
	001 Subtract X31, X31, 288
	002 Move [X31+176], D15
	003 Move [X31+184], D14
	004 Move [X31+192], D13
	005 Move [X31+200], D12
	006 Move [X31+208], D11
	007 Move [X31+216], D10
	008 Move [X31+224], D9
	009 Move [X31+232], D8
	010 Move [X31+240], X29
	011 Move [X31+248], X30
	012 Move [X31+256], X22
	013 Move [X31+264], X21
	014 Move [X31+272], X20
	015 Move [X31+280], X19
	016 Move X20, 0x883000
	017 Move W8, [X20+2444]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {40}
	023 Move X0, 0x594000
	024 Move X0, [X0+2416]
	025 Call 0x1C17CF4
	026 Move X0, 0x5FB000
	027 Move X0, [X0+2824]
	028 Call 0x1C17CF4
	029 Move X0, 0x5FB000
	030 Move X0, [X0+2832]
	031 Call 0x1C17CF4
	032 Move X0, 0x594000
	033 Move X0, [X0+1432]
	034 Call 0x1C17CF4
	035 Move X0, 0x5FB000
	036 Move X0, [X0+1984]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X20+2444], W8
	040 NotImplemented "Instruction MOVI not yet implemented."
	041 Move [X31+156], V0
	042 Move [X31+128], V0
	043 Move [X31+136], V0
	044 Move [X31+96], V0
	045 Move [X31+104], V0
	046 Move [X31+64], V0
	047 Move [X31+72], V0
	048 Move [X31+3], V0
	049 Move W8, [X19+656]
	050 Compare W8, 0
	051 JumpIfNotEqual {268}
	052 Move X8, 0x593000
	053 Move X8, [X8+1432]
	054 Move X20, [X19+672]
	055 Move X0, [X8]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X20
	061 Move X1, X31
	062 Move X2, X31
	063 Call Object.op_Inequality, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {69}
	068 Move X20, [X19+672]
	069 Move X0, X19
	070 Move X1, X31
	071 Call Component.get_transform, X0
	072 Move X20, X0
	073 Compare X20, 0
	074 JumpIfEqual {562}
	075 Move X0, X20
	076 Move X1, X31
	077 Call Transform.get_position, X0
	078 Move X0, X20
	079 Move X1, X31
	080 Move V13, V0
	081 Move V12, V1
	082 Move V11, V2
	083 Call Transform.get_forward, X0
	084 Move V3, [X19+664]
	085 Move X8, -50814976
	086 Move X9, -50819072
	087 Move X10, -50814976
	088 Multiply S0, S0, S3
	089 Multiply S1, S1, S3
	090 Multiply S2, S2, S3
	091 Add S9, S13, S0
	092 Add S0, S12, S1
	093 Move X11, -50819072
	094 Move [X31+44], S0
	095 Add S10, S11, S2
	096 Move V0, [X8+432]
	097 Move V1, [X9+4008]
	098 Move V2, [X10+480]
	099 Move V3, [X11+4012]
	100 Move X0, X31
	101 Call Gizmos.set_color, X0
	102 Move W8, [X19+724]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Compare W8, 0
	106 JumpIfNotEqual {268}
	107 Move V4, [X31+44]
	108 Move V0, V13
	109 Move V1, V12
	110 Move V2, V11
	111 Move V3, V9
	112 Move V5, V10
	113 Move X0, X31
	114 Call Gizmos.DrawLine, X0, X1
	115 Move X8, -50814976
	116 Move V0, [X19+732]
	117 Move V1, [X8+260]
	118 Multiply S0, S0, S1
	119 Move S1, 0.5
	120 Multiply S0, S0, S1
	121 Call 0x3EB2E50
	122 Move V1, [X19+664]
	123 Move X0, X20
	124 Move X1, X31
	125 Multiply S14, S0, S1
	126 Call Transform.get_up, X0
	127 Multiply S3, S14, S0
	128 Multiply S0, S14, S1
	129 Move [X31+24], S0
	130 Multiply S0, S14, S2
	131 Move X0, X20
	132 Move X1, X31
	133 Move [X31+28], S0
	134 Move [X31+36], S3
	135 Call Transform.get_right, X0
	136 Move V8, V10
	137 Move [X31+36], S14
	138 Multiply S15, S14, S0
	139 Multiply S1, S14, S1
	140 Multiply S10, S14, S2
	141 Move V3, V9
	142 Move V14, V9
	143 Move V9, [X31+44]
	144 Move [X31+12], S1
	145 Move [X31+20], S15
	146 Move V0, V13
	147 Move V1, V12
	148 Move V2, V11
	149 Move V4, V9
	150 Move V5, V8
	151 Move X0, X31
	152 Call Gizmos.DrawLine, X0, X1
	153 Add S3, S14, S15
	154 Move V15, [X31+12]
	155 Add S5, S8, S10
	156 Move V0, V13
	157 Move V1, V12
	158 Add S4, S9, S15
	159 Move V2, V11
	160 Move X0, X31
	161 Move [X31+40], S8
	162 Call Gizmos.DrawLine, X0, X1
	163 Move V0, [X31+16]
	164 Subtract S4, S9, S15
	165 Subtract S5, S8, S10
	166 Move V1, V12
	167 Subtract S3, S14, S0
	168 Move V0, V13
	169 Move V2, V11
	170 Move X0, X31
	171 Call Gizmos.DrawLine, X0, X1
	172 Move S8, [X31+28]
	173 Move S15, [X31+32]
	174 Move V10, [X31+24]
	175 Move V0, [X31+40]
	176 Move V1, V12
	177 Add S3, S14, S15
	178 Add S4, S9, S10
	179 Add S5, S0, S8
	180 Move V0, V13
	181 Move V2, V11
	182 Move X0, X31
	183 Call Gizmos.DrawLine, X0, X1
	184 Subtract S4, S9, S10
	185 Move V10, [X31+40]
	186 Subtract S3, S14, S15
	187 Move V0, V13
	188 Move V1, V12
	189 Subtract S5, S10, S8
	190 Move V2, V11
	191 Move X0, X31
	192 Call Gizmos.DrawLine, X0, X1
	193 Move V3, [X31+36]
	194 Move V0, V14
	195 Move V1, V9
	196 Move V2, V10
	197 Move X0, X20
	198 Move X1, X31
	199 Call Transform.get_up, X0
	200 Move V3, [X19+728]
	201 Move X0, X20
	202 Move X1, X31
	203 Multiply S4, S0, S3
	204 Multiply S0, S1, S3
	205 Move [X31+32], S0
	206 Move [X31+40], S4
	207 Multiply S0, S2, S3
	208 Move [X31+28], S0
	209 Call Transform.get_right, X0
	210 Move V3, [X19+728]
	211 Move X0, X31
	212 Move [X31+40], S10
	213 Multiply S14, S0, S3
	214 Multiply S15, S1, S3
	215 Multiply S8, S2, S3
	216 Move V0, V13
	217 Move V1, V12
	218 Move V2, V11
	219 Call Gizmos.DrawWireSphere, X0, V0
	220 Move [X31+20], S9
	221 Add S3, S9, S14
	222 Move V9, [X31+44]
	223 Add S0, S13, S14
	224 Add S1, S12, S15
	225 Add S2, S11, S8
	226 Add S4, S9, S15
	227 Add S5, S10, S8
	228 Move X0, X31
	229 Call Gizmos.DrawLine, X0, X1
	230 Move V10, [X31+20]
	231 Subtract S0, S13, S14
	232 Subtract S1, S12, S15
	233 Subtract S2, S11, S8
	234 Subtract S3, S10, S14
	235 Move V14, [X31+40]
	236 Subtract S4, S9, S15
	237 Move X0, X31
	238 Subtract S5, S14, S8
	239 Call Gizmos.DrawLine, X0, X1
	240 Move S8, [X31+32]
	241 Move S4, [X31+36]
	242 Move V6, [X31+28]
	243 Move X0, X31
	244 Add S0, S13, S4
	245 Add S1, S12, S8
	246 Add S2, S11, S6
	247 Add S3, S10, S4
	248 Move V15, V4
	249 Add S4, S9, S8
	250 Add S5, S14, S6
	251 Move V9, V6
	252 Call Gizmos.DrawLine, X0, X1
	253 Subtract S2, S11, S9
	254 Move V11, [X31+44]
	255 Subtract S0, S13, S15
	256 Subtract S1, S12, S8
	257 Subtract S3, S10, S15
	258 Subtract S4, S11, S8
	259 Subtract S5, S14, S9
	260 Move X0, X31
	261 Call Gizmos.DrawLine, X0, X1
	262 Move V3, [X19+728]
	263 Move V0, V10
	264 Move V1, V11
	265 Move V2, V14
	266 Move X0, X31
	267 Call Gizmos.DrawWireSphere, X0, V0
	268 Move X8, 0x593000
	269 Move X8, [X8+2416]
	270 Move X0, [X8]
	271 Move W8, [X0+224]
	272 Compare W8, 0
	273 JumpIfNotEqual {275}
	274 Call 0x1C17DFC
	275 Move X0, X31
	276 Call Application.get_isPlaying
	277 Move TEMP, X0
	278 And TEMP, TEMP, 1
	279 Compare TEMP, 1
	280 JumpIfNotEqual {650}
	281 Move X8, [X19+928]
	282 Compare X8, 0
	283 JumpIfEqual {650}
	284 Move W8, [X8+24]
	285 NotImplemented "Instruction CMP not yet implemented."
	286 Add X1, X31, 128
	287 Add X2, X31, 172
	288 Move X0, X19
	289 Move [X31+172], W31
	290 Call XRRayInteractor.TryGetCurrent3DRaycastHit, X0, X1, X2
	291 Move TEMP, X0
	292 And TEMP, TEMP, 1
	293 Compare TEMP, 1
	294 JumpIfNotEqual {381}
	295 Move X8, -50814976
	296 Move X9, -50819072
	297 Move X10, -50814976
	298 Move X11, -50819072
	299 Move V0, [X8+432]
	300 Move V1, [X9+4008]
	301 Move V2, [X10+480]
	302 Move V3, [X11+4012]
	303 Move X0, X31
	304 Call Gizmos.set_color, X0
	305 Add X0, X31, 128
	306 Move X1, X31
	307 Call RaycastHit.get_point, X0
	308 Add X0, X31, 128
	309 Move X1, X31
	310 Move V9, V0
	311 Move V10, V1
	312 Move V11, V2
	313 Call RaycastHit.get_point, X0
	314 Add X0, X31, 128
	315 Move X1, X31
	316 Move V12, V0
	317 Move V13, V1
	318 Move [X31+44], S2
	319 Call RaycastHit.get_normal, X0
	320 Move X20, 0x878000
	321 Move W8, [X20+1925]
	322 Move V14, V0
	323 Move V15, V1
	324 Move V8, V2
	325 Compare W8, 0
	326 JumpIfNotEqual {332}
	327 Move X0, 0x593000
	328 Move X0, [X0+1448]
	329 Call 0x1C17CF4
	330 Move W8, 1
	331 Move [X20+1925], W8
	332 Move X8, 0x593000
	333 Move X8, [X8+1448]
	334 Move X0, [X8]
	335 Move W8, [X0+224]
	336 Compare W8, 0
	337 JumpIfNotEqual {339}
	338 Call 0x1C17DFC
	339 Multiply S0, S14, S14
	340 Multiply S1, S15, S15
	341 Move X8, -50814976
	342 Add S0, S0, S1
	343 Move V1, [X8+380]
	344 Multiply S2, S8, S8
	345 Add S0, S2, S0
	346 NotImplemented "Instruction FSQRT not yet implemented."
	347 NotImplemented "Instruction FCMP not yet implemented."
	348 NotImplemented "Instruction FDIV not yet implemented."
	349 NotImplemented "Instruction FDIV not yet implemented."
	350 NotImplemented "Instruction FDIV not yet implemented."
	351 Move X20, 0x878000
	352 Move W8, [X20+1923]
	353 Compare W8, 0
	354 JumpIfNotEqual {360}
	355 Move X0, 0x593000
	356 Move X0, [X0+1440]
	357 Call 0x1C17CF4
	358 Move W8, 1
	359 Move [X20+1923], W8
	360 Move X8, 0x593000
	361 Move X8, [X8+1440]
	362 Move X8, [X8]
	363 Move X8, [X8+184]
	364 Move S0, [X8]
	365 Move S1, [X8+4]
	366 Move V2, [X8+8]
	367 Move X8, -50814976
	368 Move V3, [X8+1024]
	369 Move V5, [X31+44]
	370 Move X0, X31
	371 Multiply S0, S0, S3
	372 Multiply S1, S1, S3
	373 Multiply S2, S2, S3
	374 Add S3, S12, S0
	375 Add S4, S13, S1
	376 Add S5, S5, S2
	377 Move V0, V9
	378 Move V1, V10
	379 Move V2, V11
	380 Call Gizmos.DrawLine, X0, X1
	381 Add X1, X31, 48
	382 Add X2, X31, 172
	383 Move X0, X19
	384 Move [X31+172], W31
	385 Call XRRayInteractor.TryGetCurrentUIRaycastResult, X0, X1, X2
	386 Move TEMP, X0
	387 And TEMP, TEMP, 1
	388 Compare TEMP, 1
	389 JumpIfNotEqual {463}
	390 Move X8, -50814976
	391 Move X9, -50819072
	392 Move X10, -50814976
	393 Move X11, -50819072
	394 Move V0, [X8+432]
	395 Move V1, [X9+4008]
	396 Move V2, [X10+480]
	397 Move V3, [X11+4012]
	398 Move X0, X31
	399 Call Gizmos.set_color, X0
	400 Move X20, 0x878000
	401 Move S8, [X31+92]
	402 Move S9, [X31+96]
	403 Move S10, [X31+100]
	404 Move S11, [X31+104]
	405 Move W8, [X20+1925]
	406 Move S13, [X31+108]
	407 Move S12, [X31+112]
	408 Compare W8, 0
	409 JumpIfNotEqual {415}
	410 Move X0, 0x593000
	411 Move X0, [X0+1448]
	412 Call 0x1C17CF4
	413 Move W8, 1
	414 Move [X20+1925], W8
	415 Move X8, 0x593000
	416 Move X8, [X8+1448]
	417 Move X0, [X8]
	418 Move W8, [X0+224]
	419 Compare W8, 0
	420 JumpIfNotEqual {422}
	421 Call 0x1C17DFC
	422 Multiply S0, S11, S11
	423 Multiply S1, S13, S13
	424 Move X8, -50814976
	425 Add S0, S0, S1
	426 Move V1, [X8+380]
	427 Multiply S2, S12, S12
	428 Add S0, S2, S0
	429 NotImplemented "Instruction FSQRT not yet implemented."
	430 NotImplemented "Instruction FCMP not yet implemented."
	431 NotImplemented "Instruction FDIV not yet implemented."
	432 NotImplemented "Instruction FDIV not yet implemented."
	433 NotImplemented "Instruction FDIV not yet implemented."
	434 Move X20, 0x878000
	435 Move W8, [X20+1923]
	436 Compare W8, 0
	437 JumpIfNotEqual {443}
	438 Move X0, 0x593000
	439 Move X0, [X0+1440]
	440 Call 0x1C17CF4
	441 Move W8, 1
	442 Move [X20+1923], W8
	443 Move X8, 0x593000
	444 Move X8, [X8+1440]
	445 Move X8, [X8]
	446 Move X8, [X8+184]
	447 Move S0, [X8]
	448 Move S1, [X8+4]
	449 Move V2, [X8+8]
	450 Move X8, -50814976
	451 Move V3, [X8+1024]
	452 Move X0, X31
	453 Multiply S0, S0, S3
	454 Multiply S1, S1, S3
	455 Multiply S2, S2, S3
	456 Add S3, S8, S0
	457 Add S4, S9, S1
	458 Add S5, S10, S2
	459 Move V0, V8
	460 Move V1, V9
	461 Move V2, V10
	462 Call Gizmos.DrawLine, X0, X1
	463 Move W8, [X19+940]
	464 Move W21, [X19+944]
	465 NotImplemented "Instruction CMP not yet implemented."
	466 NotImplemented "Instruction CMP not yet implemented."
	467 NotImplemented "Instruction CMP not yet implemented."
	468 NotImplemented "Instruction CSEL not yet implemented."
	469 Move W21, W8
	470 Move X0, [X19+928]
	471 Compare X0, 0
	472 JumpIfEqual {562}
	473 Move X9, -50814976
	474 Move V0, [X9+964]
	475 Move X11, -50819072
	476 Move X12, -50814976
	477 Move X13, -50814976
	478 Move [X31+44], S0
	479 Move V0, [X11+4016]
	480 Move X8, -50819072
	481 Move X10, -50814976
	482 Move X22, 0x5FA000
	483 Move [X31+40], S0
	484 Move V0, [X12+1028]
	485 Move V14, [X8+3924]
	486 Move V15, [X10+916]
	487 Move W20, W31
	488 Move [X31+36], S0
	489 Move V0, [X13+596]
	490 Move [X31+32], S0
	491 Move X22, [X22+2832]
	492 Move W8, [X0+24]
	493 NotImplemented "Instruction CMP not yet implemented."
	494 Move X2, [X22]
	495 Move W1, W20
	496 Call List`1<SamplePoint>.get_Item, X0, X1
	497 Move W8, [X19+724]
	498 Move V8, V0
	499 Move V9, V1
	500 Move V10, V2
	501 NotImplemented "Instruction CMP not yet implemented."
	502 Move V11, V14
	503 Move V11, [X19+728]
	504 Compare W21, 0
	505 JumpIfEqual {511}
	506 Move V1, [X31+44]
	507 NotImplemented "Instruction CMP not yet implemented."
	508 Move S3, 0.5
	509 Move V2, V15
	510 Move V0, V15
	511 Move S2, [X31+32]
	512 Move S1, [X31+36]
	513 Move V0, [X31+40]
	514 Move S3, 0.75
	515 Move X0, X31
	516 Call Gizmos.set_color, X0
	517 Move V0, V8
	518 Move V1, V9
	519 Move V2, V10
	520 Move X0, X31
	521 Call float3.op_Implicit, X0
	522 Move V3, V11
	523 Move X0, X31
	524 Call Gizmos.DrawSphere, X0, V0
	525 Move X0, [X19+928]
	526 Compare X0, 0
	527 JumpIfEqual {562}
	528 Move W8, [X0+24]
	529 Subtract W8, W8, 1
	530 NotImplemented "Instruction CMP not yet implemented."
	531 Add W20, W20, 1
	532 Move X2, [X22]
	533 Move W1, W20
	534 Call List`1<SamplePoint>.get_Item, X0, X1
	535 Move V11, V0
	536 Move V12, V1
	537 Move V13, V2
	538 Move V0, V8
	539 Move V1, V9
	540 Move V2, V10
	541 Move X0, X31
	542 Call float3.op_Implicit, X0
	543 Move V8, V0
	544 Move V9, V1
	545 Move V10, V2
	546 Move V0, V11
	547 Move V1, V12
	548 Move V2, V13
	549 Move X0, X31
	550 Call float3.op_Implicit, X0
	551 Move V3, V0
	552 Move V4, V1
	553 Move V5, V2
	554 Move V0, V8
	555 Move V1, V9
	556 Move V2, V10
	557 Move X0, X31
	558 Call Gizmos.DrawLine, X0, X1
	559 Move X0, [X19+928]
	560 Compare X0, 0
	561 JumpIfNotEqual {492}
	562 Call 0x1C17F20
	563 Move W8, [X19+656]
	564 NotImplemented "Instruction CMP not yet implemented."
	565 NotImplemented "Instruction CMP not yet implemented."
	566 Move X8, [X19+960]
	567 Compare X8, 0
	568 JumpIfEqual {562}
	569 Move W9, [X8+24]
	570 Compare W9, 0
	571 JumpIfEqual {666}
	572 Move S0, [X8+32]
	573 Move S1, [X8+36]
	574 Move V2, [X8+40]
	575 Move X0, X31
	576 Call float3.op_Implicit, X0
	577 Move X8, [X19+960]
	578 Compare X8, 0
	579 JumpIfEqual {562}
	580 Move W9, [X8+24]
	581 NotImplemented "Instruction CMP not yet implemented."
	582 Move V9, V0
	583 Move V10, V1
	584 Move V11, V2
	585 Move S0, [X8+44]
	586 Move S1, [X8+48]
	587 Move V2, [X8+52]
	588 Move X0, X31
	589 Call float3.op_Implicit, X0
	590 Move X8, [X19+960]
	591 Compare X8, 0
	592 JumpIfNotEqual {620}
	593 Move X8, [X19+952]
	594 Compare X8, 0
	595 JumpIfEqual {562}
	596 Move W9, [X8+24]
	597 Compare W9, 0
	598 JumpIfEqual {666}
	599 Move S0, [X8+32]
	600 Move S1, [X8+36]
	601 Move V2, [X8+40]
	602 Move X0, X31
	603 Call float3.op_Implicit, X0
	604 Move X8, [X19+952]
	605 Compare X8, 0
	606 JumpIfEqual {562}
	607 Move W9, [X8+24]
	608 NotImplemented "Instruction CMP not yet implemented."
	609 Move V9, V0
	610 Move V10, V1
	611 Move V11, V2
	612 Move S0, [X8+44]
	613 Move S1, [X8+48]
	614 Move V2, [X8+52]
	615 Move X0, X31
	616 Call float3.op_Implicit, X0
	617 Move X8, [X19+952]
	618 Compare X8, 0
	619 JumpIfEqual {562}
	620 Move W9, [X8+24]
	621 Move [X31+44], S2
	622 NotImplemented "Instruction CMP not yet implemented."
	623 Move V13, V1
	624 Move V12, V0
	625 Move S0, [X8+56]
	626 Move S1, [X8+60]
	627 Move V2, [X8+64]
	628 Move X0, X31
	629 Call float3.op_Implicit, X0
	630 Move X8, 0x5FA000
	631 Move X8, [X8+1984]
	632 Move V14, V0
	633 Move V15, V1
	634 Move V8, V2
	635 Move X0, [X8]
	636 Move W8, [X0+224]
	637 Compare W8, 0
	638 JumpIfNotEqual {640}
	639 Call 0x1C17DFC
	640 Move V5, [X31+44]
	641 Move V0, V9
	642 Move V1, V10
	643 Move V2, V11
	644 Move V3, V12
	645 Move V4, V13
	646 Move [X31+4], S15
	647 Move [X31+12], S8
	648 Move [X31], S14
	649 Call XRRayInteractor.DrawQuadraticBezierGizmo, X0, X1, X2
	650 Move X20, [X31+272]
	651 Move X19, [X31+280]
	652 Move X22, [X31+256]
	653 Move X21, [X31+264]
	654 Move X29, [X31+240]
	655 Move X30, [X31+248]
	656 Move D9, [X31+224]
	657 Move D8, [X31+232]
	658 Move D11, [X31+208]
	659 Move D10, [X31+216]
	660 Move D13, [X31+192]
	661 Move D12, [X31+200]
	662 Move D15, [X31+176]
	663 Move D14, [X31+184]
	664 Add X31, X31, 288
	665 Return 
	666 Call 0x1C17F28

Method: System.Void DrawQuadraticBezierGizmo(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2)

Disassembly:
	0x03B61940 LDR X2, [X23]
	0x03B61944 MOV W1, W22
	0x03B61948 BL 0x317B51C
	0x03B6194C MOV X0, X31
	0x03B61950 BL 0x3887BE0
	0x03B61954 LDR W10, [X20 + 0x1C]
	0x03B61958 LDR X8, [X20 + 0x10]
	0x03B6195C LDR X9, [X24]
	0x03B61960 ADD W10, W10, 0x1
	0x03B61964 STR W10, [X20 + 0x1C]
	0x03B61968 CBZ X8, 0x3B619D0
	0x03B6196C LDRSW X10, [X20 + 0x18]
	0x03B61970 LDR W11, [X8 + 0x18]
	0x03B61974 CMP W10, W11
	0x03B61978 B.CS 0x3B61994
	0x03B6197C ADD W9, W10, 0x1
	0x03B61980 MADD X8, X10, X25, X8
	0x03B61984 STR W9, [X20 + 0x18]
	0x03B61988 STP S0, S1, [X8 + 0x20]
	0x03B6198C STR S2, [X8 + 0x28]
	0x03B61990 B 0x3B619A8
	0x03B61994 LDR X8, [X9 + 0x20]
	0x03B61998 MOV X0, X20
	0x03B6199C LDR X8, [X8 + 0xC0]
	0x03B619A0 LDR X1, [X8 + 0x70]
	0x03B619A4 BL 0x30CC1B4
	0x03B619A8 ADD W22, W22, 0x1
	0x03B619AC CMP W21, W22
	0x03B619B0 B.NE 0x3B61938
	0x03B619B4 LDP X20, X19, [X31 + 0x50]
	0x03B619B8 LDP X22, X21, [X31 + 0x40]
	0x03B619BC LDP X24, X23, [X31 + 0x30]
	0x03B619C0 LDP X30, X25, [X31 + 0x20]
	0x03B619C4 LDP D9, D8, [X31 + 0x10]
	0x03B619C8 LDR V10, [X31], #0x60
	0x03B619CC RET
	0x03B619D0 BL 0x1C16F20
	0x03B619D4 SUB X31, X31, 0x40
	0x03B619D8 STR X30, [X31 + 0x20]
	0x03B619DC STP X20, X19, [X31 + 0x30]
	0x03B619E0 MOV X19, X0
	0x03B619E4 BL 0x3B5F8B8
	0x03B619E8 LDR W20, [X19 + 0x3A8]
	0x03B619EC MOV X0, X31
	0x03B619F0 BL 0x3C3C88C
	0x03B619F4 CMP W20, W0
	0x03B619F8 B.EQ 0x3B61A28
	0x03B619FC LDR W1, [X19 + 0x2D0]
	0x03B61A00 LDR X2, [X19 + 0x3A0]
	0x03B61A04 ADD X3, X31, 0x0
	0x03B61A08 MOV X0, X19
	0x03B61A0C STP X31, X31, [X31]
	0x03B61A10 STR W31, [X31 + 0x18]
	0x03B61A14 STR X31, [X31 + 0x10]
	0x03B61A18 BL 0x3B60C54
	0x03B61A1C MOV X0, X31
	0x03B61A20 BL 0x3C3C88C
	0x03B61A24 STR W0, [X19 + 0x3A8]
	0x03B61A28 LDP X20, X19, [X31 + 0x30]
	0x03B61A2C LDR X30, [X31 + 0x20]
	0x03B61A30 ADD X31, X31, 0x40
	0x03B61A34 RET
	0x03B61A38 STP X30, X21, [X31 - 0x20]!
	0x03B61A3C STP X20, X19, [X31 + 0x10]
	0x03B61A40 ADRP X21, 0x881000
	0x03B61A44 LDRB W8, [X21 + 0x996]
	0x03B61A48 MOV X19, X1
	0x03B61A4C MOV X20, X0
	0x03B61A50 TBNZ X8, 0x0, 0x3B61A68
	0x03B61A54 ADRP X0, 0x5FA000
	0x03B61A58 LDR X0, [X0 + 0x258]
	0x03B61A5C BL 0x1C16CF4
	0x03B61A60 MOVZ W8, 0x1
	0x03B61A64 STRB W8, [X21 + 0x996]
	0x03B61A68 LDR X0, [X20 + 0x3D0]
	0x03B61A6C CBZ X0, 0x3B61A84
	0x03B61A70 MOV X1, X19
	0x03B61A74 LDP X20, X19, [X31 + 0x10]
	0x03B61A78 MOV X2, X31
	0x03B61A7C LDP X30, X21, [X31], #0x20
	0x03B61A80 B 0x3B9A1D4
	0x03B61A84 ADRP X20, 0x5FA000
	0x03B61A88 LDR X20, [X20 + 0x258]
	0x03B61A8C LDR X0, [X20]
	0x03B61A90 LDR W8, [X0 + 0xE0]
	0x03B61A94 CBNZ W8, 0x3B61A9C
	0x03B61A98 BL 0x1C16DFC
	0x03B61A9C ADRP X21, 0x881000
	0x03B61AA0 LDRB W8, [X21 + 0x9AD]
	0x03B61AA4 CBNZ W8, 0x3B61ABC
	0x03B61AA8 ADRP X0, 0x5FA000
	0x03B61AAC LDR X0, [X0 + 0x258]
	0x03B61AB0 BL 0x1C16CF4
	0x03B61AB4 MOVZ W8, 0x1
	0x03B61AB8 STRB W8, [X21 + 0x9AD]
	0x03B61ABC LDR X0, [X20]
	0x03B61AC0 LDR W8, [X0 + 0xE0]
	0x03B61AC4 CBNZ W8, 0x3B61AD0
	0x03B61AC8 BL 0x1C16DFC
	0x03B61ACC LDR X0, [X20]
	0x03B61AD0 LDR X1, [X0 + 0xB8]
	0x03B61AD4 MOVZ W2, 0x158
	0x03B61AD8 MOV X0, X19
	0x03B61ADC BL 0x3EB1B30
	0x03B61AE0 LDP X20, X19, [X31 + 0x10]
	0x03B61AE4 MOV W0, W31
	0x03B61AE8 LDP X30, X21, [X31], #0x20
	0x03B61AEC RET
	0x03B61AF0 STR X30, [X31 - 0x10]!
	0x03B61AF4 LDR W8, [X0 + 0x390]
	0x03B61AF8 CMP W8, 0x1
	0x03B61AFC B.LT 0x3B61B30
	0x03B61B00 LDR X9, [X0 + 0x388]
	0x03B61B04 CBZ X9, 0x3B61B54
	0x03B61B08 LDR W10, [X9 + 0x18]
	0x03B61B0C CBZ W10, 0x3B61B58
	0x03B61B10 LDR W10, [X9 + 0x48]
	0x03B61B14 LDR X11, [X9 + 0x40]
	0x03B61B18 LDP V1, V0, [X9 + 0x20]
	0x03B61B1C STR W10, [X1 + 0x28]
	0x03B61B20 STR X11, [X1 + 0x20]
	0x03B61B24 STP V1, V0, [X1]
	0x03B61B28 LDR W9, [X0 + 0x3AC]
	0x03B61B2C B 0x3B61B40
	0x03B61B30 MOV W9, W31
	0x03B61B34 MOVI V0.2D, 0x0
	0x03B61B38 STUR V0, [X1 + 0x1C]
	0x03B61B3C STP V0, V0, [X1]
	0x03B61B40 CMP W8, 0x0
	0x03B61B44 CSET W0, GT

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move V11, V1
	012 Move S15, [X31+112]
	013 Move S14, [X31+116]
	014 Move V1, [X31+120]
	015 Move V9, V3
	016 Move V8, V2
	017 Move [X31+108], S2
	018 Move [X31+4], S14
	019 Move [X31+12], S1
	020 Move V13, V0
	021 Move S0, 1
	022 Move S1, W31
	023 Move S2, W31
	024 Move S3, 0.75
	025 Move X0, X31
	026 Move V12, V5
	027 Move V10, V4
	028 Call Gizmos.set_color, X0
	029 Move X8, -50819072
	030 Move V3, [X8+3924]
	031 Move V0, V13
	032 Move V1, V11
	033 Move V2, V8
	034 Move X0, X31
	035 Move V8, V3
	036 Call Gizmos.DrawSphere, X0, V0
	037 Move V0, V9
	038 Move V1, V10
	039 Move V2, V12
	040 Move V3, V8
	041 Move X0, X31
	042 Call Gizmos.DrawSphere, X0, V0
	043 Move V1, V14
	044 Move V14, [X31+8]
	045 Move V0, V15
	046 Move V3, V8
	047 Move X0, X31
	048 Move V2, V14
	049 Move [X31], S15
	050 Call Gizmos.DrawSphere, X0, V0
	051 Move S0, 0.5
	052 Move S1, 0.5
	053 Move S2, 0.5
	054 Move S3, 0.75
	055 Move X0, X31
	056 Call Gizmos.set_color, X0
	057 Move V8, [X31+108]
	058 Move V0, V13
	059 Move V1, V11
	060 Move V3, V9
	061 Move V2, V8
	062 Move V4, V10
	063 Move V5, V12
	064 Move X0, X31
	065 Call Gizmos.DrawLine, X0, X1
	066 Move V3, V15
	067 Move V15, [X31+4]
	068 Move V0, V9
	069 Move V1, V10
	070 Move V2, V12
	071 Move V4, V15
	072 Move V5, V14
	073 Move X0, X31
	074 Call Gizmos.DrawLine, X0, X1
	075 Move X8, -50814976
	076 Move V2, [X8+252]
	077 Move S0, W31
	078 Move S1, W31
	079 Move S3, 0.75
	080 Move X0, X31
	081 Call Gizmos.set_color, X0
	082 Subtract S0, S9, S13
	083 Move X8, -50814976
	084 Move [X31+24], S0
	085 Move [X31+32], S13
	086 Subtract S6, S10, S11
	087 Subtract S0, S12, S8
	088 Move V14, [X8+188]
	089 Move X8, -50814976
	090 Move [X31+16], S0
	091 Move [X31+24], S6
	092 Move V0, [X8+196]
	093 Move [X31+104], S11
	094 Move V8, V9
	095 Subtract S11, S15, S10
	096 Move [X31+12], S0
	097 Move V0, [X31]
	098 Subtract S13, S0, S9
	099 Move V0, [X31+8]
	100 Move V9, V10
	101 Move V10, V12
	102 Subtract S15, S0, S12
	103 Move V12, V14
	104 Move S0, 1
	105 NotImplemented "Instruction FMIN not yet implemented."
	106 NotImplemented "Instruction FCMP not yet implemented."
	107 Move S1, W31
	108 NotImplemented "Instruction FCSEL not yet implemented."
	109 Move S2, [X31+20]
	110 Move S1, [X31+24]
	111 Move V3, [X31+16]
	112 Multiply S4, S13, S0
	113 Multiply S5, S11, S0
	114 Multiply S1, S1, S0
	115 Multiply S2, S2, S0
	116 Multiply S3, S3, S0
	117 Multiply S6, S15, S0
	118 Move V0, [X31+28]
	119 Move X0, X31
	120 Add S0, S0, S1
	121 Move V1, [X31+104]
	122 Add S1, S1, S2
	123 Move V2, [X31+108]
	124 Add S2, S2, S3
	125 Add S3, S8, S4
	126 Add S4, S9, S5
	127 Add S5, S10, S6
	128 Call Gizmos.DrawLine, X0, X1
	129 Move V0, [X31+12]
	130 Add S12, S12, S14
	131 NotImplemented "Instruction FCMP not yet implemented."
	132 Move X30, [X31+96]
	133 Move D9, [X31+80]
	134 Move D8, [X31+88]
	135 Move D11, [X31+64]
	136 Move D10, [X31+72]
	137 Move D13, [X31+48]
	138 Move D12, [X31+56]
	139 Move D15, [X31+32]
	140 Move D14, [X31+40]
	141 Add X31, X31, 112
	142 Return 

Method: System.Void FindReferenceFrame()

Disassembly:
	0x03B609EC BL 0x3C0CC38
	0x03B609F0 FMOV S0, 0.5
	0x03B609F4 FMOV S1, 0.5
	0x03B609F8 FMOV S2, 0.5
	0x03B609FC FMOV S3, 0.75
	0x03B60A00 MOV X0, X31
	0x03B60A04 BL 0x3C0D030
	0x03B60A08 LDR V8, [X31 + 0x6C]
	0x03B60A0C MOV V0.16B, V13.16B
	0x03B60A10 MOV V1.16B, V11.16B
	0x03B60A14 MOV V3.16B, V9.16B
	0x03B60A18 MOV V2.16B, V8.16B
	0x03B60A1C MOV V4.16B, V10.16B
	0x03B60A20 MOV V5.16B, V12.16B
	0x03B60A24 MOV X0, X31
	0x03B60A28 BL 0x3C0CB04
	0x03B60A2C MOV V3.16B, V15.16B
	0x03B60A30 LDR V15, [X31 + 0x4]
	0x03B60A34 MOV V0.16B, V9.16B
	0x03B60A38 MOV V1.16B, V10.16B
	0x03B60A3C MOV V2.16B, V12.16B
	0x03B60A40 MOV V4.16B, V15.16B
	0x03B60A44 MOV V5.16B, V14.16B
	0x03B60A48 MOV X0, X31
	0x03B60A4C BL 0x3C0CB04
	0x03B60A50 ADRP X8, 0xFFFFFFFFFCF8A000
	0x03B60A54 LDR V2, [X8 + 0xFC]
	0x03B60A58 FMOV S0, W31
	0x03B60A5C FMOV S1, W31
	0x03B60A60 FMOV S3, 0.75
	0x03B60A64 MOV X0, X31
	0x03B60A68 BL 0x3C0D030
	0x03B60A6C FSUB S0, S9, S13
	0x03B60A70 ADRP X8, 0xFFFFFFFFFCF8A000
	0x03B60A74 STP S0, S13, [X31 + 0x18]
	0x03B60A78 FSUB S6, S10, S11
	0x03B60A7C FSUB S0, S12, S8
	0x03B60A80 LDR V14, [X8 + 0xBC]
	0x03B60A84 ADRP X8, 0xFFFFFFFFFCF8A000
	0x03B60A88 STP S0, S6, [X31 + 0x10]
	0x03B60A8C LDR V0, [X8 + 0xC4]
	0x03B60A90 STR S11, [X31 + 0x68]
	0x03B60A94 MOV V8.16B, V9.16B
	0x03B60A98 FSUB S11, S15, S10
	0x03B60A9C STR S0, [X31 + 0xC]
	0x03B60AA0 LDR V0, [X31]
	0x03B60AA4 FSUB S13, S0, S9
	0x03B60AA8 LDR V0, [X31 + 0x8]
	0x03B60AAC MOV V9.16B, V10.16B
	0x03B60AB0 MOV V10.16B, V12.16B
	0x03B60AB4 FSUB S15, S0, S12
	0x03B60AB8 MOV V12.16B, V14.16B
	0x03B60ABC FMOV S0, 1
	0x03B60AC0 FMIN S0, S12, S0
	0x03B60AC4 FCMP S12, 0x0
	0x03B60AC8 FMOV S1, W31
	0x03B60ACC FCSEL S0, S0, S1, PL
	0x03B60AD0 LDP S2, S1, [X31 + 0x14]
	0x03B60AD4 LDR V3, [X31 + 0x10]
	0x03B60AD8 FMUL S4, S13, S0
	0x03B60ADC FMUL S5, S11, S0
	0x03B60AE0 FMUL S1, S1, S0
	0x03B60AE4 FMUL S2, S2, S0
	0x03B60AE8 FMUL S3, S3, S0
	0x03B60AEC FMUL S6, S15, S0
	0x03B60AF0 LDR V0, [X31 + 0x1C]
	0x03B60AF4 MOV X0, X31
	0x03B60AF8 FADD S0, S0, S1
	0x03B60AFC LDR V1, [X31 + 0x68]
	0x03B60B00 FADD S1, S1, S2
	0x03B60B04 LDR V2, [X31 + 0x6C]
	0x03B60B08 FADD S2, S2, S3
	0x03B60B0C FADD S3, S8, S4
	0x03B60B10 FADD S4, S9, S5
	0x03B60B14 FADD S5, S10, S6
	0x03B60B18 BL 0x3C0CB04
	0x03B60B1C LDR V0, [X31 + 0xC]
	0x03B60B20 FADD S12, S12, S14
	0x03B60B24 FCMP S12, S0
	0x03B60B28 B.LS 0x3B60ABC
	0x03B60B2C LDR X30, [X31 + 0x60]
	0x03B60B30 LDP D9, D8, [X31 + 0x50]
	0x03B60B34 LDP D11, D10, [X31 + 0x40]
	0x03B60B38 LDP D13, D12, [X31 + 0x30]
	0x03B60B3C LDP D15, D14, [X31 + 0x20]
	0x03B60B40 ADD X31, X31, 0x70
	0x03B60B44 RET
	0x03B60B48 STP X30, X19, [X31 - 0x10]!
	0x03B60B4C MOV X19, X0
	0x03B60B50 BL 0x3B5FB58
	0x03B60B54 LDR X0, [X19 + 0x2A0]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x883000
	007 Move X21, 0x594000
	008 Move W8, [X20+2445]
	009 Move X21, [X21+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0x5FB000
	016 Move X0, [X0+2424]
	017 Call 0x1C17CF4
	018 Move X0, 0x594000
	019 Move X0, [X0+2600]
	020 Call 0x1C17CF4
	021 Move X0, 0x594000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move X0, 0x5FC000
	025 Move X0, [X0+728]
	026 Call 0x1C17CF4
	027 Move X0, 0x5FC000
	028 Move X0, [X0+736]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+2445], W8
	032 Move X0, [X21]
	033 Move [X31+8], X31
	034 Move X20, [X19+680]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Inequality, X0, X1
	043 And W8, W0, 1
	044 Move [X19+857], W8
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {105}
	049 Move X8, 0x5FB000
	050 Move X8, [X8+2424]
	051 Add X0, X31, 8
	052 Move X1, [X8]
	053 Call 0x2960A30, X0
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {83}
	058 Move X8, [X31+8]
	059 Compare X8, 0
	060 JumpIfEqual {111}
	061 Move X0, [X21]
	062 Move X20, [X8+56]
	063 Move W9, [X0+224]
	064 Compare W9, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X0, X20
	068 Move X1, X31
	069 Move X2, X31
	070 Call Object.op_Inequality, X0, X1
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {92}
	075 Compare X20, 0
	076 JumpIfEqual {111}
	077 Move X0, X20
	078 Move X1, X31
	079 Call GameObject.get_transform, X0
	080 Move W8, 1
	081 Move [X19+680], X0
	082 Move [X19+857], W8
	083 Move X8, 0x594000
	084 Move X8, [X8+2600]
	085 Move X0, [X8]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X8, 0x5FC000
	091 Move X8, [X8+728]
	092 Move X8, 0x594000
	093 Move X8, [X8+2600]
	094 Move X0, [X8]
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 Move X8, 0x5FC000
	100 Move X8, [X8+736]
	101 Move X0, [X8]
	102 Move X1, X19
	103 Move X2, X31
	104 Call Debug.Log, X0, X1
	105 Move X20, [X31+32]
	106 Move X19, [X31+40]
	107 Move X30, [X31+16]
	108 Move X21, [X31+24]
	109 Add X31, X31, 48
	110 Return 
	111 Call 0x1C17F20

Method: System.Void CreateRayOrigin()

Disassembly:
	0x03B60B58 LDP X30, X19, [X31], #0x10
	0x03B60B5C RET
	0x03B60B60 STP X30, X19, [X31 - 0x10]!
	0x03B60B64 MOV X19, X0
	0x03B60B68 BL 0x3B524B4
	0x03B60B6C LDR X0, [X19 + 0x50]
	0x03B60B70 LDP X30, X19, [X31], #0x10
	0x03B60B74 RET
	0x03B60B78 B 0x3B5ED68
	0x03B60B7C STR X1, [X0 + 0x50]
	0x03B60B80 RET
	0x03B60B84 LDRB W8, [X0 + 0x2FC]
	0x03B60B88 CBZ W8, 0x3B60B9C
	0x03B60B8C LDR X0, [X0 + 0x3D0]
	0x03B60B90 CBZ X0, 0x3B60B9C
	0x03B60B94 MOV X1, X31
	0x03B60B98 B 0x3B9A3F0
	0x03B60B9C MOV W0, W31
	0x03B60BA0 RET
	0x03B60BA4 SUB X31, X31, 0x30
	0x03B60BA8 STP X30, X21, [X31 + 0x10]
	0x03B60BAC STP X20, X19, [X31 + 0x20]
	0x03B60BB0 ADRP X21, 0x882000
	0x03B60BB4 LDRB W8, [X21 + 0x993]
	0x03B60BB8 MOV W20, W1
	0x03B60BBC MOV X19, X0
	0x03B60BC0 TBNZ X8, 0x0, 0x3B60BF0
	0x03B60BC4 ADRP X0, 0x5BE000
	0x03B60BC8 LDR X0, [X0 + 0x1F8]
	0x03B60BCC BL 0x1C16CF4
	0x03B60BD0 ADRP X0, 0x5BE000
	0x03B60BD4 LDR X0, [X0 + 0x1F0]
	0x03B60BD8 BL 0x1C16CF4
	0x03B60BDC ADRP X0, 0x5FA000
	0x03B60BE0 LDR X0, [X0 + 0x9B0]
	0x03B60BE4 BL 0x1C16CF4
	0x03B60BE8 MOVZ W8, 0x1
	0x03B60BEC STRB W8, [X21 + 0x993]
	0x03B60BF0 LDR X8, [X19]
	0x03B60BF4 CBZ X8, 0x3B60C18
	0x03B60BF8 LDR W8, [X19 + 0x8]
	0x03B60BFC CMP W8, W20
	0x03B60C00 B.GE 0x3B60C44
	0x03B60C04 ADRP X8, 0x5BE000
	0x03B60C08 LDR X8, [X8 + 0x1F8]
	0x03B60C0C MOV X0, X19
	0x03B60C10 LDR X1, [X8]
	0x03B60C14 BL 0x23F1210
	0x03B60C18 ADRP X8, 0x5BE000
	0x03B60C1C LDR X8, [X8 + 0x1F0]
	0x03B60C20 ADD X0, X31, 0x0
	0x03B60C24 MOVZ W2, 0x4
	0x03B60C28 MOVZ W3, 0x1
	0x03B60C2C LDR X4, [X8]
	0x03B60C30 MOV W1, W20
	0x03B60C34 STP X31, X31, [X31]
	0x03B60C38 BL 0x23F0FB0
	0x03B60C3C LDR V0, [X31]
	0x03B60C40 STR V0, [X19]
	0x03B60C44 LDP X20, X19, [X31 + 0x20]
	0x03B60C48 LDP X30, X21, [X31 + 0x10]
	0x03B60C4C ADD X31, X31, 0x30
	0x03B60C50 RET
	0x03B60C54 SUB X31, X31, 0x140
	0x03B60C58 STR D10, [X31 + 0xF0]
	0x03B60C5C STP D9, D8, [X31 + 0xF8]
	0x03B60C60 STR X29, [X31 + 0x108]
	0x03B60C64 STP X30, X23, [X31 + 0x110]
	0x03B60C68 STP X22, X21, [X31 + 0x120]
	0x03B60C6C STP X20, X19, [X31 + 0x130]
	0x03B60C70 ADRP X23, 0x882000
	0x03B60C74 LDRB W8, [X23 + 0x9A1]
	0x03B60C78 MOV X22, X3
	0x03B60C7C MOV X19, X2
	0x03B60C80 MOV W20, W1
	0x03B60C84 MOV X21, X0
	0x03B60C88 TBNZ X8, 0x0, 0x3B60CB8
	0x03B60C8C ADRP X0, 0x5FB000
	0x03B60C90 LDR X0, [X0 + 0x2F8]
	0x03B60C94 BL 0x1C16CF4
	0x03B60C98 ADRP X0, 0x5FB000
	0x03B60C9C LDR X0, [X0 + 0x2F0]
	0x03B60CA0 BL 0x1C16CF4
	0x03B60CA4 ADRP X0, 0x5FA000
	0x03B60CA8 LDR X0, [X0 + 0xB10]
	0x03B60CAC BL 0x1C16CF4
	0x03B60CB0 MOVZ W8, 0x1
	0x03B60CB4 STRB W8, [X23 + 0x9A1]
	0x03B60CB8 STR W31, [X31 + 0xE8]
	0x03B60CBC STR X31, [X31 + 0xE0]
	0x03B60CC0 STR W31, [X31 + 0xD8]
	0x03B60CC4 STR X31, [X31 + 0xD0]
	0x03B60CC8 STR W31, [X31 + 0xC8]
	0x03B60CCC STR X31, [X31 + 0xC0]
	0x03B60CD0 STR W31, [X31 + 0xB8]
	0x03B60CD4 STR X31, [X31 + 0xB0]
	0x03B60CD8 STR W31, [X31 + 0xA8]
	0x03B60CDC STP X31, X31, [X31 + 0x98]
	0x03B60CE0 STR X31, [X31 + 0x90]
	0x03B60CE4 STR W31, [X31 + 0x88]
	0x03B60CE8 STR X31, [X31 + 0x80]
	0x03B60CEC STR W31, [X31 + 0x78]
	0x03B60CF0 STR X31, [X31 + 0x70]
	0x03B60CF4 STR W31, [X31 + 0x68]
	0x03B60CF8 STR X31, [X31 + 0x60]
	0x03B60CFC STR W31, [X31 + 0x58]
	0x03B60D00 STR X31, [X31 + 0x50]
	0x03B60D04 STR W31, [X31 + 0x48]
	0x03B60D08 STR X31, [X31 + 0x40]
	0x03B60D0C STUR X31, [X31 + 0x34]
	0x03B60D10 STR W31, [X31 + 0x28]
	0x03B60D14 STR X31, [X31 + 0x20]
	0x03B60D18 LDUR V0, [X22 + 0xC]
	0x03B60D1C LDR V1, [X22]
	0x03B60D20 ADD X1, X31, 0x0
	0x03B60D24 ADD X2, X31, 0xE0
	0x03B60D28 ADD X3, X31, 0xD0
	0x03B60D2C MOV X0, X21
	0x03B60D30 STUR V0, [X31 + 0xC]
	0x03B60D34 STR V1, [X31]
	0x03B60D38 BL 0x3B6161C
	0x03B60D3C CBZ X19, 0x3B61130
	0x03B60D40 LDR W8, [X19 + 0x1C]
	0x03B60D44 ADRP X22, 0x5FB000
	0x03B60D48 MOV X0, X31
	0x03B60D4C ADD W8, W8, 0x1
	0x03B60D50 STP W31, W8, [X19 + 0x18]
	0x03B60D54 LDP S10, S9, [X31 + 0xE0]
	0x03B60D58 LDR V8, [X31 + 0xE8]
	0x03B60D5C LDR X22, [X22 + 0x2F8]
	0x03B60D60 MOV V0.16B, V10.16B
	0x03B60D64 MOV V1.16B, V9.16B
	0x03B60D68 MOV V2.16B, V8.16B
	0x03B60D6C BL 0x3887BE4
	0x03B60D70 LDR W10, [X19 + 0x1C]
	0x03B60D74 LDR X8, [X19 + 0x10]
	0x03B60D78 LDR X9, [X22]
	0x03B60D7C ADD W10, W10, 0x1
	0x03B60D80 STR W10, [X19 + 0x1C]
	0x03B60D84 CBZ X8, 0x3B61130
	0x03B60D88 LDRSW X10, [X19 + 0x18]
	0x03B60D8C LDR W11, [X8 + 0x18]
	0x03B60D90 CMP W10, W11
	0x03B60D94 B.CS 0x3B60DB4
	0x03B60D98 ADD W9, W10, 0x1
	0x03B60D9C ADD X8, X8, X10, 0x4, LSL
	0x03B60DA0 STR W9, [X19 + 0x18]
	0x03B60DA4 STP S0, S1, [X8 + 0x20]
	0x03B60DA8 STR S2, [X8 + 0x28]
	0x03B60DAC STR W31, [X8 + 0x2C]
	0x03B60DB0 B 0x3B60DCC
	0x03B60DB4 LDR X8, [X9 + 0x20]
	0x03B60DB8 FMOV S3, W31
	0x03B60DBC MOV X0, X19
	0x03B60DC0 LDR X8, [X8 + 0xC0]
	0x03B60DC4 LDR X1, [X8 + 0x70]
	0x03B60DC8 BL 0x317B844
	0x03B60DCC LDR W8, [X21 + 0x290]
	0x03B60DD0 CMP W8, 0x2
	0x03B60DD4 B.EQ 0x3B60E80
	0x03B60DD8 CMP W8, 0x1
	0x03B60DDC B.EQ 0x3B60FEC
	0x03B60DE0 CBNZ W8, 0x3B61110
	0x03B60DE4 ADRP X8, 0x5FA000
	0x03B60DE8 LDR X8, [X8 + 0xB10]
	0x03B60DEC MOV X0, X19
	0x03B60DF0 MOV W1, W31
	0x03B60DF4 LDR X2, [X8]
	0x03B60DF8 BL 0x317B51C
	0x03B60DFC LDR V3, [X31 + 0xD8]
	0x03B60E00 MOV V8.16B, V0.16B
	0x03B60E04 MOV V9.16B, V1.16B
	0x03B60E08 LDP S0, S1, [X31 + 0xD0]
	0x03B60E0C MOV V10.16B, V2.16B
	0x03B60E10 MOV V2.16B, V3.16B
	0x03B60E14 MOV X0, X31
	0x03B60E18 BL 0x3887BE4
	0x03B60E1C LDR W10, [X19 + 0x1C]
	0x03B60E20 LDR V3, [X21 + 0x298]
	0x03B60E24 LDR X8, [X19 + 0x10]
	0x03B60E28 LDR X9, [X22]
	0x03B60E2C ADD W10, W10, 0x1
	0x03B60E30 STR W10, [X19 + 0x1C]
	0x03B60E34 CBZ X8, 0x3B61130
	0x03B60E38 LDRSW X10, [X19 + 0x18]
	0x03B60E3C LDR W11, [X8 + 0x18]
	0x03B60E40 FMUL S0, S0, S3
	0x03B60E44 FMUL S1, S1, S3
	0x03B60E48 FMUL S2, S2, S3
	0x03B60E4C FADD S0, S8, S0
	0x03B60E50 FADD S1, S9, S1
	0x03B60E54 CMP W10, W11
	0x03B60E58 FADD S2, S10, S2
	0x03B60E5C B.CS 0x3B610F8
	0x03B60E60 ADD W9, W10, 0x1
	0x03B60E64 ADD X8, X8, X10, 0x4, LSL
	0x03B60E68 MOVZ W10, 0x3F800000
	0x03B60E6C STR W9, [X19 + 0x18]
	0x03B60E70 STP S0, S1, [X8 + 0x20]
	0x03B60E74 STR S2, [X8 + 0x28]
	0x03B60E78 STR W10, [X8 + 0x2C]
	0x03B60E7C B 0x3B61110
	0x03B60E80 MOV V0.16B, V10.16B
	0x03B60E84 MOV V1.16B, V9.16B
	0x03B60E88 MOV V2.16B, V8.16B
	0x03B60E8C MOV X0, X31
	0x03B60E90 BL 0x3887BE4
	0x03B60E94 LDP S3, S4, [X31 + 0xD0]
	0x03B60E98 LDR V5, [X31 + 0xD8]
	0x03B60E9C STP S0, S1, [X31 + 0x90]
	0x03B60EA0 STR S2, [X31 + 0x98]
	0x03B60EA4 MOV V0.16B, V3.16B
	0x03B60EA8 MOV V1.16B, V4.16B
	0x03B60EAC MOV V2.16B, V5.16B
	0x03B60EB0 MOV X0, X31
	0x03B60EB4 BL 0x3887BE4
	0x03B60EB8 MOV X0, X21
	0x03B60EBC STP S0, S1, [X31 + 0x40]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x883000
	010 Move X22, 0x594000
	011 Move W8, [X20+2446]
	012 Move X22, [X22+1432]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0x594000
	019 Move X0, [X0+2648]
	020 Call 0x1C17CF4
	021 Move X0, 0x594000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move X0, 0x594000
	025 Move X0, [X0+3784]
	026 Call 0x1C17CF4
	027 Move X0, 0x5FC000
	028 Move X0, [X0+744]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+2446], W8
	032 Move X0, [X22]
	033 Move X20, [X19+672]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X20
	039 Move X1, X31
	040 Move X2, X31
	041 Call Object.op_Inequality, X0, X1
	042 And W8, W0, 1
	043 Move [X19+856], W8
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {57}
	048 Move X20, [X31+48]
	049 Move X19, [X31+56]
	050 Move X22, [X31+32]
	051 Move X21, [X31+40]
	052 Move X30, [X31+24]
	053 Move D9, [X31+8]
	054 Move D8, [X31+16]
	055 Move V10, [X31+64]
	056 Return 
	057 Move X0, X19
	058 Move X1, X31
	059 Call Component.get_gameObject, X0
	060 Compare X0, 0
	061 JumpIfEqual {267}
	062 Move X1, X31
	063 Call Object.get_name, X0
	064 Move X8, 0x594000
	065 Move X8, [X8+3784]
	066 Move X9, 0x5FC000
	067 Move X9, [X9+744]
	068 Move X1, X0
	069 Move X8, [X8]
	070 Move X3, X31
	071 Move X2, [X9]
	072 Move X0, X8
	073 Call String.Concat, X0, X1, X2
	074 Move X8, 0x594000
	075 Move X8, [X8+2648]
	076 Move X21, X0
	077 Move X8, [X8]
	078 Move X0, X8
	079 Call 0x1C17F10
	080 Move X1, X21
	081 Move X2, X31
	082 Move X20, X0
	083 Call GameObject..ctor, X0, X1
	084 Compare X20, 0
	085 JumpIfEqual {267}
	086 Move X0, X20
	087 Move X1, X31
	088 Call GameObject.get_transform, X0
	089 Move X20, X0
	090 Move [X19+672], X0
	091 Move W8, 1
	092 Move X0, X19
	093 Move X1, X31
	094 Move [X19+856], W8
	095 Call Component.get_transform, X0
	096 Compare X20, 0
	097 JumpIfEqual {267}
	098 Move X1, X0
	099 Move X0, X20
	100 Move W2, W31
	101 Move X3, X31
	102 Call Transform.SetParent, X0, X1, X2
	103 Move X0, [X22]
	104 Move X20, [X19+80]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 Move X0, X20
	110 Move X1, X31
	111 Move X2, X31
	112 Call Object.op_Equality, X0, X1
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfNotEqual {119}
	117 Move X0, X19
	118 Call XRBaseInteractor.CreateAttachTransform, X0
	119 Move X0, [X22]
	120 Move X20, [X19+80]
	121 Move W8, [X0+224]
	122 Compare W8, 0
	123 JumpIfNotEqual {125}
	124 Call 0x1C17DFC
	125 Move X0, X20
	126 Move X1, X31
	127 Move X2, X31
	128 Call Object.op_Equality, X0, X1
	129 Move TEMP, X0
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfNotEqual {175}
	133 Move X21, 0x879000
	134 Move W8, [X21+1923]
	135 Move X20, [X19+672]
	136 Compare W8, 0
	137 JumpIfNotEqual {143}
	138 Move X0, 0x594000
	139 Move X0, [X0+1440]
	140 Call 0x1C17CF4
	141 Move W8, 1
	142 Move [X21+1923], W8
	143 Compare X20, 0
	144 JumpIfEqual {267}
	145 Move X8, 0x594000
	146 Move X8, [X8+1440]
	147 Move X0, X20
	148 Move X1, X31
	149 Move X8, [X8]
	150 Move X8, [X8+184]
	151 Move S1, [X8+4]
	152 Move S2, [X8+8]
	153 Move V0, [X8]
	154 Call Transform.set_localPosition, X0, X1
	155 Move X20, 0x879000
	156 Move W8, [X20+1939]
	157 Move X19, [X19+672]
	158 Compare W8, 0
	159 JumpIfNotEqual {165}
	160 Move X0, 0x595000
	161 Move X0, [X0+1448]
	162 Call 0x1C17CF4
	163 Move W8, 1
	164 Move [X20+1939], W8
	165 Compare X19, 0
	166 JumpIfEqual {267}
	167 Move X8, 0x595000
	168 Move X8, [X8+1448]
	169 Move X8, [X8]
	170 Move X8, [X8+184]
	171 Move S2, [X8+8]
	172 Move S3, [X8+12]
	173 Move S0, [X8]
	174 Move S1, [X8+4]
	175 Move X0, [X19+80]
	176 Compare X0, 0
	177 JumpIfEqual {267}
	178 Move X1, X31
	179 Call Transform.get_parent, X0
	180 Move X20, X0
	181 Move X0, X19
	182 Move X1, X31
	183 Call Component.get_transform, X0
	184 Move X8, [X22]
	185 Move X21, X0
	186 Move W9, [X8+224]
	187 Compare W9, 0
	188 JumpIfNotEqual {191}
	189 Move X0, X8
	190 Call 0x1C17DFC
	191 Move X0, X20
	192 Move X1, X21
	193 Move X2, X31
	194 Call Object.op_Equality, X0, X1
	195 Move X8, [X19+80]
	196 Compare X8, 0
	197 JumpIfEqual {267}
	198 Move X20, [X19+672]
	199 Move TEMP, X0
	200 And TEMP, TEMP, 1
	201 Compare TEMP, 1
	202 JumpIfNotEqual {231}
	203 Move X0, X8
	204 Move X1, X31
	205 Call Transform.get_localPosition, X0
	206 Compare X20, 0
	207 JumpIfEqual {267}
	208 Move X0, X20
	209 Move X1, X31
	210 Call Transform.set_localPosition, X0, X1
	211 Move X0, [X19+80]
	212 Compare X0, 0
	213 JumpIfEqual {267}
	214 Move X19, [X19+672]
	215 Move X1, X31
	216 Call Transform.get_localRotation, X0
	217 Compare X19, 0
	218 JumpIfEqual {267}
	219 Move X0, X19
	220 Move X20, [X31+48]
	221 Move X19, [X31+56]
	222 Move X22, [X31+32]
	223 Move X21, [X31+40]
	224 Move X30, [X31+24]
	225 Move D9, [X31+8]
	226 Move D8, [X31+16]
	227 Move X1, X31
	228 Move V10, [X31+64]
	229 Call Transform.set_localRotation, X0, X1
	230 Return 
	231 Move X0, X8
	232 Move X1, X31
	233 Call Transform.get_position, X0
	234 Move X0, [X19+80]
	235 Compare X0, 0
	236 JumpIfEqual {267}
	237 Move X1, X31
	238 Move V8, V0
	239 Move V9, V1
	240 Move V10, V2
	241 Call Transform.get_rotation, X0
	242 Compare X20, 0
	243 JumpIfEqual {267}
	244 Move V4, V0
	245 Move V5, V1
	246 Move X0, X20
	247 Move V0, V8
	248 Move V1, V9
	249 Move X20, [X31+48]
	250 Move X19, [X31+56]
	251 Move X22, [X31+32]
	252 Move X21, [X31+40]
	253 Move X30, [X31+24]
	254 Move D9, [X31+8]
	255 Move D8, [X31+16]
	256 Move V6, V2
	257 Move V7, V3
	258 Move V2, V10
	259 Move V3, V4
	260 Move V4, V5
	261 Move V5, V6
	262 Move V6, V7
	263 Move X1, X31
	264 Move V10, [X31+64]
	265 Call Transform.SetPositionAndRotation, X0, X1, X2
	266 Return 
	267 Call 0x1C17F20

Method: UnityEngine.Transform UnityEngine.XR.Interaction.Toolkit.IXRRayProvider.GetOrCreateRayOrigin()

Disassembly:
	0x03B61B48 STR W9, [X2]
	0x03B61B4C LDR X30, [X31], #0x10
	0x03B61B50 RET
	0x03B61B54 BL 0x1C16F20
	0x03B61B58 BL 0x1C16F28
	0x03B61B5C SUB X31, X31, 0x1E0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call XRRayInteractor.CreateRayOrigin, X0
	005 Move X0, [X19+672]
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: UnityEngine.Transform UnityEngine.XR.Interaction.Toolkit.IXRRayProvider.GetOrCreateAttachTransform()

Disassembly:
	0x03B61B60 STP X29, X30, [X31 + 0x1B0]
	0x03B61B64 STP X22, X21, [X31 + 0x1C0]
	0x03B61B68 STP X20, X19, [X31 + 0x1D0]
	0x03B61B6C ADRP X22, 0x881000
	0x03B61B70 LDRB W8, [X22 + 0x997]
	0x03B61B74 MOV X19, X2

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call XRBaseInteractor.CreateAttachTransform, X0
	005 Move X0, [X19+80]
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Void UnityEngine.XR.Interaction.Toolkit.IXRRayProvider.SetRayOrigin(UnityEngine.Transform newOrigin)

Disassembly:
	0x03B61B78 MOV X20, X1

ISIL:
	001 Call XRRayInteractor.set_rayOriginTransform, X0, X1
	002 Return 

Method: System.Void UnityEngine.XR.Interaction.Toolkit.IXRRayProvider.SetAttachTransform(UnityEngine.Transform newAttach)

Disassembly:
	0x03B61B7C MOV X21, X0
	0x03B61B80 TBNZ X8, 0x0, 0x3B61B98

ISIL:
	001 Move [X0+80], X1
	002 Return 

Method: System.Boolean IsOverUIGameObject()

Disassembly:
	0x03B61B84 ADRP X0, 0x5FA000
	0x03B61B88 LDR X0, [X0 + 0x258]
	0x03B61B8C BL 0x1C16CF4
	0x03B61B90 MOVZ W8, 0x1
	0x03B61B94 STRB W8, [X22 + 0x997]
	0x03B61B98 ADD X0, X31, 0x58
	0x03B61B9C MOVZ W2, 0x158
	0x03B61BA0 MOV W1, W31

ISIL:
	001 Move W8, [X0+764]
	002 Compare W8, 0
	003 JumpIfEqual {10}
	004 Move X0, [X0+976]
	005 Compare X0, 0
	006 JumpIfEqual {10}
	007 Move X1, X31
	008 Call RegisteredUIInteractorCache.IsOverUIGameObject, X0
	009 Return X0
	010 Move W0, W31
	011 Return X0

Method: System.Boolean GetLinePoints(ref Unity.Collections.NativeArray`1<UnityEngine.Vector3> linePoints, out System.Int32 numPoints, System.Nullable`1<UnityEngine.Ray> rayOriginOverride = null)

Disassembly:
	0x03B4F6C8 STP X30, X27, [X31 + 0x60]
	0x03B4F6CC STP X26, X25, [X31 + 0x70]
	0x03B4F6D0 STP X24, X23, [X31 + 0x80]
	0x03B4F6D4 STP X22, X21, [X31 + 0x90]
	0x03B4F6D8 STP X20, X19, [X31 + 0xA0]
	0x03B4F6DC ADRP X21, 0x893000
	0x03B4F6E0 LDRB W8, [X21 + 0x8E6]
	0x03B4F6E4 MOV X20, X1
	0x03B4F6E8 MOV X19, X0
	0x03B4F6EC TBNZ X8, 0x0, 0x3B4F758
	0x03B4F6F0 ADRP X0, 0x60B000
	0x03B4F6F4 LDR X0, [X0 + 0xB48]
	0x03B4F6F8 BL 0x1C16CF4
	0x03B4F6FC ADRP X0, 0x60B000
	0x03B4F700 LDR X0, [X0 + 0xB50]
	0x03B4F704 BL 0x1C16CF4
	0x03B4F708 ADRP X0, 0x60B000
	0x03B4F70C LDR X0, [X0 + 0xB58]
	0x03B4F710 BL 0x1C16CF4
	0x03B4F714 ADRP X0, 0x60B000
	0x03B4F718 LDR X0, [X0 + 0xB60]
	0x03B4F71C BL 0x1C16CF4
	0x03B4F720 ADRP X0, 0x60B000
	0x03B4F724 LDR X0, [X0 + 0xB68]
	0x03B4F728 BL 0x1C16CF4
	0x03B4F72C ADRP X0, 0x60B000
	0x03B4F730 LDR X0, [X0 + 0xB70]
	0x03B4F734 BL 0x1C16CF4
	0x03B4F738 ADRP X0, 0x5A4000
	0x03B4F73C LDR X0, [X0 + 0x598]
	0x03B4F740 BL 0x1C16CF4
	0x03B4F744 ADRP X0, 0x60B000
	0x03B4F748 LDR X0, [X0 + 0xB78]
	0x03B4F74C BL 0x1C16CF4
	0x03B4F750 MOVZ W8, 0x1
	0x03B4F754 STRB W8, [X21 + 0x8E6]
	0x03B4F758 STP X31, X31, [X31 + 0x40]
	0x03B4F75C STR X31, [X31 + 0x50]
	0x03B4F760 STP X31, X31, [X31 + 0x30]
	0x03B4F764 STR X31, [X31 + 0x28]
	0x03B4F768 CBZ X20, 0x3B4F984
	0x03B4F76C ADRP X8, 0x60B000
	0x03B4F770 LDR X8, [X8 + 0xB70]
	0x03B4F774 ADRP X24, 0x60B000
	0x03B4F778 ADRP X25, 0x5A4000
	0x03B4F77C ADRP X26, 0x60B000
	0x03B4F780 LDR X24, [X24 + 0xB50]
	0x03B4F784 LDR X25, [X25 + 0x598]
	0x03B4F788 LDR X26, [X26 + 0xB68]
	0x03B4F78C LDR X1, [X8]
	0x03B4F790 ADRP X23, 0x60B000
	0x03B4F794 ADRP X27, 0x60B000
	0x03B4F798 ADRP X22, 0x60B000
	0x03B4F79C LDR X23, [X23 + 0xB78]
	0x03B4F7A0 LDR X27, [X27 + 0xB60]
	0x03B4F7A4 LDR X22, [X22 + 0xB48]
	0x03B4F7A8 ADD X8, X31, 0x10
	0x03B4F7AC MOV X0, X20
	0x03B4F7B0 BL 0x301CB58
	0x03B4F7B4 LDR V0, [X31 + 0x1]
	0x03B4F7B8 LDR X8, [X31 + 0x20]
	0x03B4F7BC STR V0, [X31 + 0x4]
	0x03B4F7C0 STR X8, [X31 + 0x50]
	0x03B4F7C4 LDR X1, [X24]
	0x03B4F7C8 ADD X0, X31, 0x40
	0x03B4F7CC BL 0x2BC4350
	0x03B4F7D0 TBZ X0, 0x0, 0x3B4F930
	0x03B4F7D4 LDR X20, [X31 + 0x50]
	0x03B4F7D8 CBZ X20, 0x3B4F7C4
	0x03B4F7DC LDR X0, [X25]
	0x03B4F7E0 LDR W8, [X0 + 0xE0]
	0x03B4F7E4 CBNZ W8, 0x3B4F7F0
	0x03B4F7E8 BL 0x1C16DFC
	0x03B4F7EC LDR X0, [X25]
	0x03B4F7F0 LDR X8, [X20]
	0x03B4F7F4 LDRB W9, [X0 + 0x130]
	0x03B4F7F8 LDRB W10, [X8 + 0x130]
	0x03B4F7FC CMP W10, W9
	0x03B4F800 B.CS 0x3B4F80C
	0x03B4F804 MOV X0, X31
	0x03B4F808 B 0x3B4F820
	0x03B4F80C LDR X8, [X8 + 0xC8]
	0x03B4F810 ADD X8, X8, X9, 0x3, LSL
	0x03B4F814 LDUR X8, [X8 - 0x8]
	0x03B4F818 CMP X8, X0
	0x03B4F81C CSEL X0, X20, X31, EQ
	0x03B4F820 MOV X1, X31
	0x03B4F824 MOV X2, X31
	0x03B4F828 BL 0x3C3883C
	0x03B4F82C TBNZ X0, 0x0, 0x3B4F7C4
	0x03B4F830 LDR X0, [X19 + 0x268]
	0x03B4F834 CBZ X0, 0x3B4F960
	0x03B4F838 LDR X2, [X26]
	0x03B4F83C ADD X1, X31, 0x38
	0x03B4F840 BL 0x2EF1058
	0x03B4F844 LDR X8, [X31 + 0x38]
	0x03B4F848 STP X0, X1, [X31 + 0x28]
	0x03B4F84C CBZ X8, 0x3B4F8F0
	0x03B4F850 MOV X0, X8
	0x03B4F854 MOV X1, X19
	0x03B4F858 MOV X2, X31
	0x03B4F85C BL 0x3B6BD18
	0x03B4F860 LDR X0, [X31 + 0x38]
	0x03B4F864 CBZ X0, 0x3B4F8F8
	0x03B4F868 MOV X1, X20
	0x03B4F86C MOV X2, X31
	0x03B4F870 BL 0x3B6BD8C
	0x03B4F874 LDR X8, [X20]
	0x03B4F878 LDR X21, [X31 + 0x38]
	0x03B4F87C LDR X1, [X27]
	0x03B4F880 LDRH W9, [X8 + 0x12E]
	0x03B4F884 CBZ X9, 0x3B4F8A8
	0x03B4F888 LDR X10, [X8 + 0xB0]
	0x03B4F88C ADD X10, X10, 0x8
	0x03B4F890 LDUR X11, [X10 - 0x8]
	0x03B4F894 CMP X11, X1
	0x03B4F898 B.EQ 0x3B4F8B8
	0x03B4F89C SUBS X9, X9, 0x1
	0x03B4F8A0 ADD X10, X10, 0x10
	0x03B4F8A4 B.NE 0x3B4F890
	0x03B4F8A8 MOVZ W2, 0x2
	0x03B4F8AC MOV X0, X20
	0x03B4F8B0 BL 0x1C5C788
	0x03B4F8B4 B 0x3B4F8C8
	0x03B4F8B8 LDR W9, [X10]
	0x03B4F8BC ADD W9, W9, 0x2
	0x03B4F8C0 ADD X8, X8, W9, 0x4, SXTW
	0x03B4F8C4 ADD X0, X8, 0x138
	0x03B4F8C8 LDP X8, X2, [X0]
	0x03B4F8CC MOV X0, X20
	0x03B4F8D0 MOV X1, X21
	0x03B4F8D4 BLR X8
	0x03B4F8D8 MOV X21, X31
	0x03B4F8DC LDR X1, [X23]
	0x03B4F8E0 ADD X0, X31, 0x28
	0x03B4F8E4 BL 0x24A6DD0
	0x03B4F8E8 CBZ X21, 0x3B4F7C4
	0x03B4F8EC B 0x3B4F958
	0x03B4F8F0 BL 0x1C16F20
	0x03B4F8F4 B 0x3B4F988
	0x03B4F8F8 BL 0x1C16F20
	0x03B4F8FC B 0x3B4F988
	0x03B4F900 B 0x3B4F908
	0x03B4F904 B 0x3B4F908
	0x03B4F908 MOV X8, X1
	0x03B4F90C MOV X20, X0
	0x03B4F910 CMP W8, 0x1
	0x03B4F914 STR X1, [X31 + 0x8]
	0x03B4F918 B.NE 0x3B4F964
	0x03B4F91C MOV X0, X20
	0x03B4F920 BL 0x3EB1AD0
	0x03B4F924 LDR X21, [X0]
	0x03B4F928 BL 0x3EB1AE0
	0x03B4F92C B 0x3B4F8DC
	0x03B4F930 LDR X1, [X22]
	0x03B4F934 ADD X0, X31, 0x40
	0x03B4F938 BL 0x2BC434C
	0x03B4F93C LDP X20, X19, [X31 + 0xA0]
	0x03B4F940 LDP X22, X21, [X31 + 0x90]
	0x03B4F944 LDP X24, X23, [X31 + 0x80]
	0x03B4F948 LDP X26, X25, [X31 + 0x70]
	0x03B4F94C LDP X30, X27, [X31 + 0x60]
	0x03B4F950 ADD X31, X31, 0xB0
	0x03B4F954 RET
	0x03B4F958 MOV X0, X21
	0x03B4F95C BL 0x1C16F18
	0x03B4F960 BL 0x1C16F20
	0x03B4F964 MOV X21, X31
	0x03B4F968 LDR X1, [X23]
	0x03B4F96C ADD X0, X31, 0x28
	0x03B4F970 BL 0x24A6DD0
	0x03B4F974 LDR X1, [X31 + 0x8]
	0x03B4F978 CBZ X21, 0x3B4F9B0
	0x03B4F97C MOV X0, X21
	0x03B4F980 BL 0x1C16F18
	0x03B4F984 BL 0x1C16F20
	0x03B4F988 MOV X20, X0
	0x03B4F98C STR X1, [X31 + 0x8]
	0x03B4F990 B 0x3B4F968
	0x03B4F994 B 0x3B4F9AC
	0x03B4F998 B 0x3B4F9AC
	0x03B4F99C B 0x3B4F9AC
	0x03B4F9A0 B 0x3B4F9AC
	0x03B4F9A4 B 0x3B4F9AC
	0x03B4F9A8 B 0x3B4F9AC
	0x03B4F9AC MOV X20, X0
	0x03B4F9B0 CMP W1, 0x1
	0x03B4F9B4 B.NE 0x3B4F9E0
	0x03B4F9B8 MOV X0, X20
	0x03B4F9BC BL 0x3EB1AD0
	0x03B4F9C0 LDR X19, [X0]
	0x03B4F9C4 BL 0x3EB1AE0
	0x03B4F9C8 LDR X1, [X22]
	0x03B4F9CC ADD X0, X31, 0x40
	0x03B4F9D0 BL 0x2BC434C
	0x03B4F9D4 CBZ X19, 0x3B4F93C
	0x03B4F9D8 MOV X0, X19
	0x03B4F9DC BL 0x1C16F18
	0x03B4F9E0 MOV X19, X31
	0x03B4F9E4 B 0x3B4F9EC
	0x03B4F9E8 MOV X20, X0
	0x03B4F9EC LDR X1, [X22]
	0x03B4F9F0 ADD X0, X31, 0x40
	0x03B4F9F4 BL 0x2BC434C
	0x03B4F9F8 CBNZ X19, 0x3B4FA04
	0x03B4F9FC MOV X0, X20
	0x03B4FA00 BL 0x1D2C690
	0x03B4FA04 MOV X0, X19
	0x03B4FA08 BL 0x1C16F18
	0x03B4FA0C BL 0x1990590
	0x03B4FA10 SUB X31, X31, 0xB0
	0x03B4FA14 STP X30, X27, [X31 + 0x60]
	0x03B4FA18 STP X26, X25, [X31 + 0x70]
	0x03B4FA1C STP X24, X23, [X31 + 0x80]
	0x03B4FA20 STP X22, X21, [X31 + 0x90]
	0x03B4FA24 STP X20, X19, [X31 + 0xA0]
	0x03B4FA28 ADRP X21, 0x893000
	0x03B4FA2C LDRB W8, [X21 + 0x8E7]
	0x03B4FA30 MOV X20, X1
	0x03B4FA34 MOV X19, X0
	0x03B4FA38 TBNZ X8, 0x0, 0x3B4FAA4
	0x03B4FA3C ADRP X0, 0x60B000
	0x03B4FA40 LDR X0, [X0 + 0xB48]
	0x03B4FA44 BL 0x1C16CF4
	0x03B4FA48 ADRP X0, 0x60B000
	0x03B4FA4C LDR X0, [X0 + 0xB50]
	0x03B4FA50 BL 0x1C16CF4
	0x03B4FA54 ADRP X0, 0x60B000
	0x03B4FA58 LDR X0, [X0 + 0xB58]
	0x03B4FA5C BL 0x1C16CF4
	0x03B4FA60 ADRP X0, 0x60B000
	0x03B4FA64 LDR X0, [X0 + 0xB60]
	0x03B4FA68 BL 0x1C16CF4
	0x03B4FA6C ADRP X0, 0x60B000
	0x03B4FA70 LDR X0, [X0 + 0xB80]
	0x03B4FA74 BL 0x1C16CF4
	0x03B4FA78 ADRP X0, 0x60B000
	0x03B4FA7C LDR X0, [X0 + 0xB70]
	0x03B4FA80 BL 0x1C16CF4
	0x03B4FA84 ADRP X0, 0x5A4000
	0x03B4FA88 LDR X0, [X0 + 0x598]
	0x03B4FA8C BL 0x1C16CF4
	0x03B4FA90 ADRP X0, 0x60B000
	0x03B4FA94 LDR X0, [X0 + 0xB88]
	0x03B4FA98 BL 0x1C16CF4
	0x03B4FA9C MOVZ W8, 0x1
	0x03B4FAA0 STRB W8, [X21 + 0x8E7]
	0x03B4FAA4 STP X31, X31, [X31 + 0x40]
	0x03B4FAA8 STR X31, [X31 + 0x50]
	0x03B4FAAC STP X31, X31, [X31 + 0x30]
	0x03B4FAB0 STR X31, [X31 + 0x28]
	0x03B4FAB4 CBZ X20, 0x3B4FCD0
	0x03B4FAB8 ADRP X8, 0x60B000
	0x03B4FABC LDR X8, [X8 + 0xB70]
	0x03B4FAC0 ADRP X24, 0x60B000
	0x03B4FAC4 ADRP X25, 0x5A4000
	0x03B4FAC8 ADRP X26, 0x60B000
	0x03B4FACC LDR X24, [X24 + 0xB50]
	0x03B4FAD0 LDR X25, [X25 + 0x598]
	0x03B4FAD4 LDR X26, [X26 + 0xB80]
	0x03B4FAD8 LDR X1, [X8]
	0x03B4FADC ADRP X23, 0x60B000
	0x03B4FAE0 ADRP X27, 0x60B000
	0x03B4FAE4 ADRP X22, 0x60B000
	0x03B4FAE8 LDR X23, [X23 + 0xB88]
	0x03B4FAEC LDR X27, [X27 + 0xB60]
	0x03B4FAF0 LDR X22, [X22 + 0xB48]
	0x03B4FAF4 ADD X8, X31, 0x10
	0x03B4FAF8 MOV X0, X20
	0x03B4FAFC BL 0x301CB58
	0x03B4FB00 LDR V0, [X31 + 0x1]
	0x03B4FB04 LDR X8, [X31 + 0x20]
	0x03B4FB08 STR V0, [X31 + 0x4]
	0x03B4FB0C STR X8, [X31 + 0x50]
	0x03B4FB10 LDR X1, [X24]
	0x03B4FB14 ADD X0, X31, 0x40
	0x03B4FB18 BL 0x2BC4350
	0x03B4FB1C TBZ X0, 0x0, 0x3B4FC7C
	0x03B4FB20 LDR X20, [X31 + 0x50]
	0x03B4FB24 CBZ X20, 0x3B4FB10
	0x03B4FB28 LDR X0, [X25]
	0x03B4FB2C LDR W8, [X0 + 0xE0]
	0x03B4FB30 CBNZ W8, 0x3B4FB3C
	0x03B4FB34 BL 0x1C16DFC
	0x03B4FB38 LDR X0, [X25]
	0x03B4FB3C LDR X8, [X20]
	0x03B4FB40 LDRB W9, [X0 + 0x130]
	0x03B4FB44 LDRB W10, [X8 + 0x130]
	0x03B4FB48 CMP W10, W9
	0x03B4FB4C B.CS 0x3B4FB58
	0x03B4FB50 MOV X0, X31
	0x03B4FB54 B 0x3B4FB6C
	0x03B4FB58 LDR X8, [X8 + 0xC8]
	0x03B4FB5C ADD X8, X8, X9, 0x3, LSL
	0x03B4FB60 LDUR X8, [X8 - 0x8]
	0x03B4FB64 CMP X8, X0
	0x03B4FB68 CSEL X0, X20, X31, EQ
	0x03B4FB6C MOV X1, X31
	0x03B4FB70 MOV X2, X31
	0x03B4FB74 BL 0x3C3883C
	0x03B4FB78 TBNZ X0, 0x0, 0x3B4FB10
	0x03B4FB7C LDR X0, [X19 + 0x270]
	0x03B4FB80 CBZ X0, 0x3B4FCAC
	0x03B4FB84 LDR X2, [X26]
	0x03B4FB88 ADD X1, X31, 0x38
	0x03B4FB8C BL 0x2EF1058
	0x03B4FB90 LDR X8, [X31 + 0x38]
	0x03B4FB94 STP X0, X1, [X31 + 0x28]
	0x03B4FB98 CBZ X8, 0x3B4FC3C
	0x03B4FB9C MOV X0, X8
	0x03B4FBA0 MOV X1, X19
	0x03B4FBA4 MOV X2, X31
	0x03B4FBA8 BL 0x3B6BE50
	0x03B4FBAC LDR X0, [X31 + 0x38]
	0x03B4FBB0 CBZ X0, 0x3B4FC44
	0x03B4FBB4 MOV X1, X20
	0x03B4FBB8 MOV X2, X31
	0x03B4FBBC BL 0x3B6BEC4
	0x03B4FBC0 LDR X8, [X20]
	0x03B4FBC4 LDR X21, [X31 + 0x38]
	0x03B4FBC8 LDR X1, [X27]
	0x03B4FBCC LDRH W9, [X8 + 0x12E]
	0x03B4FBD0 CBZ X9, 0x3B4FBF4
	0x03B4FBD4 LDR X10, [X8 + 0xB0]
	0x03B4FBD8 ADD X10, X10, 0x8
	0x03B4FBDC LDUR X11, [X10 - 0x8]
	0x03B4FBE0 CMP X11, X1
	0x03B4FBE4 B.EQ 0x3B4FC04
	0x03B4FBE8 SUBS X9, X9, 0x1
	0x03B4FBEC ADD X10, X10, 0x10
	0x03B4FBF0 B.NE 0x3B4FBDC
	0x03B4FBF4 MOVZ W2, 0x3
	0x03B4FBF8 MOV X0, X20
	0x03B4FBFC BL 0x1C5C788

ISIL:
	001 Subtract X31, X31, 272
	002 Move [X31+192], D8
	003 Move [X31+208], X29
	004 Move [X31+216], X30
	005 Move [X31+224], X24
	006 Move [X31+232], X23
	007 Move [X31+240], X22
	008 Move [X31+248], X21
	009 Move [X31+256], X20
	010 Move [X31+264], X19
	011 Move X22, 0x894000
	012 Move W8, [X22+2447]
	013 Move X23, X3
	014 Move X21, X2
	015 Move X20, X1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0x60C000
	022 Move X0, [X0+2824]
	023 Call 0x1C17CF4
	024 Move X0, 0x60C000
	025 Move X0, [X0+2832]
	026 Call 0x1C17CF4
	027 Move X0, 0x60C000
	028 Move X0, [X0+2536]
	029 Call 0x1C17CF4
	030 Move X0, 0x60C000
	031 Move X0, [X0+1984]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+2447], W8
	035 Move [X31+184], W31
	036 Move [X31+176], X31
	037 Move [X31+168], W31
	038 Move [X31+160], X31
	039 Move [X31+152], W31
	040 Move [X31+144], X31
	041 Move [X31+136], W31
	042 Move [X31+128], X31
	043 Move [X31+120], W31
	044 Move [X31+112], X31
	045 Move [X31+104], W31
	046 Move [X31+96], X31
	047 Move [X31+88], W31
	048 Move [X31+80], X31
	049 Move [X31+72], W31
	050 Move [X31+64], X31
	051 Move X8, [X19+928]
	052 Compare X8, 0
	053 JumpIfEqual {92}
	054 Move W22, [X8+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move W8, [X19+660]
	057 Compare W8, 0
	058 JumpIfEqual {94}
	059 Move X0, X19
	060 Call XRRayInteractor.CreateSamplePointsListsIfNecessary, X0
	061 Move X8, [X19+928]
	062 Compare X8, 0
	063 JumpIfEqual {294}
	064 Move X24, 0x60C000
	065 Move X24, [X24+1984]
	066 Move W22, [X8+24]
	067 Move X0, [X24]
	068 Move W9, [X0+224]
	069 Compare W9, 0
	070 JumpIfNotEqual {73}
	071 Call 0x1C17DFC
	072 Move X0, [X24]
	073 Move X8, [X0+184]
	074 NotImplemented "Instruction LDUR not yet implemented."
	075 Move V1, [X23]
	076 Add X3, X31, 32
	077 Move X2, [X8+24]
	078 Move X0, X19
	079 Move W1, W22
	080 Move [X31+44], V0
	081 Move [X31+2], V1
	082 Call XRRayInteractor.UpdateSamplePoints, X0, X1, X2, X3
	083 Move W8, [X19+656]
	084 Compare W8, 0
	085 JumpIfEqual {128}
	086 Move W8, [X19+940]
	087 Move W22, [X19+944]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 NotImplemented "Instruction CMP not yet implemented."
	090 NotImplemented "Instruction CMP not yet implemented."
	091 NotImplemented "Instruction CSEL not yet implemented."
	092 Move W0, W31
	093 Move [X21], W31
	094 Move [X21], W22
	095 Move X8, 0x60C000
	096 Move X8, [X8+1984]
	097 Move X0, [X8]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move X0, X20
	103 Move W1, W22
	104 Call XRRayInteractor.EnsureCapacity, X0, X1
	105 Move X8, 0x60C000
	106 Move X8, [X8+2536]
	107 Move X0, X20
	108 Move X1, [X8]
	109 Call NativeArray`1<Vector3>.Reinterpret, X0
	110 Move W8, [X21]
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move X23, 0x60C000
	113 Move X23, [X23+2832]
	114 Move X20, X31
	115 Add X22, X0, 8
	116 Move X0, [X19+928]
	117 Compare X0, 0
	118 JumpIfEqual {294}
	119 Move X2, [X23]
	120 Move W1, W20
	121 Call List`1<SamplePoint>.get_Item, X0, X1
	122 Move [X22-8], S0
	123 Move [X22], S1
	124 Move [X22+12], S2
	125 NotImplemented "Instruction LDRSW not yet implemented."
	126 Add X20, X20, 1
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move W8, 2
	129 Move [X21], W8
	130 Move X0, [X24]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {135}
	134 Call 0x1C17DFC
	135 Move W1, 2
	136 Move X0, X20
	137 Call XRRayInteractor.EnsureCapacity, X0, X1
	138 Move X8, 0x60C000
	139 Move X8, [X8+2536]
	140 Move X0, X20
	141 Move X1, [X8]
	142 Call NativeArray`1<Vector3>.Reinterpret, X0
	143 Move X8, [X24]
	144 Move X8, [X8+184]
	145 Move X8, [X8+24]
	146 Compare X8, 0
	147 JumpIfEqual {294}
	148 Move X21, 0x60C000
	149 Move X21, [X21+2832]
	150 Move X20, X0
	151 Move X0, X8
	152 Move W1, W31
	153 Move X2, [X21]
	154 Call List`1<SamplePoint>.get_Item, X0, X1
	155 Move [X20], S0
	156 Move [X20+8], S1
	157 Move [X20+8], S2
	158 Move X0, [X19+928]
	159 Compare X0, 0
	160 JumpIfEqual {294}
	161 Move W8, [X0+24]
	162 Move X2, [X21]
	163 Subtract W1, W8, 1
	164 Call List`1<SamplePoint>.get_Item, X0, X1
	165 Move [X20+12], S0
	166 Move [X20+20], S1
	167 Move [X20+20], S2
	168 Move W22, W8
	169 Move X0, [X24]
	170 Move W8, [X0+224]
	171 Compare W8, 0
	172 JumpIfNotEqual {175}
	173 Call 0x1C17DFC
	174 Move X0, [X24]
	175 Move X8, [X0+184]
	176 Move V0, [X23]
	177 NotImplemented "Instruction LDUR not yet implemented."
	178 Add X4, X31, 0
	179 Move X1, [X8+24]
	180 Move X3, [X8+32]
	181 Move X0, X19
	182 Move W2, W22
	183 Move [X31+12], V1
	184 Move [X31], V0
	185 Call XRRayInteractor.CreateBezierCurve, X0, X1, X2, X3, X4
	186 Move X8, [X24]
	187 Move X8, [X8+184]
	188 Move X8, [X8+32]
	189 Compare X8, 0
	190 JumpIfEqual {294}
	191 Move W9, [X8+24]
	192 Compare W9, 0
	193 JumpIfEqual {350}
	194 NotImplemented "Instruction CMP not yet implemented."
	195 NotImplemented "Instruction CMP not yet implemented."
	196 Add X0, X8, 32
	197 Add X1, X8, 44
	198 Add X2, X8, 56
	199 Add X3, X31, 176
	200 Add X4, X31, 160
	201 Add X5, X31, 112
	202 Add X6, X31, 96
	203 Move X7, X31
	204 Call CurveUtility.ElevateQuadraticToCubicBezier, X0, X1, X2, X3, X4, X5, X6
	205 Move X8, [X19+960]
	206 Compare X8, 0
	207 JumpIfEqual {294}
	208 Move W9, [X8+24]
	209 Compare W9, 0
	210 JumpIfEqual {350}
	211 NotImplemented "Instruction CMP not yet implemented."
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Add X0, X8, 32
	214 Add X1, X8, 44
	215 Add X2, X8, 56
	216 Add X3, X31, 96
	217 Add X4, X31, 112
	218 Add X5, X31, 144
	219 Add X6, X31, 128
	220 Move X7, X31
	221 Call CurveUtility.ElevateQuadraticToCubicBezier, X0, X1, X2, X3, X4, X5, X6
	222 NotImplemented "Instruction CMP not yet implemented."
	223 Move X8, [X19+928]
	224 Compare X8, 0
	225 JumpIfEqual {294}
	226 Move W23, [X8+24]
	227 Subtract W8, W23, 1
	228 NotImplemented "Instruction CMP not yet implemented."
	229 Move W8, [X19+656]
	230 NotImplemented "Instruction CMP not yet implemented."
	231 Move [X21], W23
	232 Move X0, [X24]
	233 Move W8, [X0+224]
	234 Compare W8, 0
	235 JumpIfNotEqual {237}
	236 Call 0x1C17DFC
	237 Move X0, X20
	238 Move W1, W23
	239 Call XRRayInteractor.EnsureCapacity, X0, X1
	240 Move X8, 0x60C000
	241 Move X8, [X8+2536]
	242 Move X0, X20
	243 Move X1, [X8]
	244 Call NativeArray`1<Vector3>.Reinterpret, X0
	245 Move W8, [X31+184]
	246 Move X9, [X31+176]
	247 NotImplemented "Instruction SCVTF not yet implemented."
	248 Move S1, 1
	249 Move X20, X0
	250 Move W21, 1
	251 NotImplemented "Instruction FDIV not yet implemented."
	252 Move W23, 12
	253 Move [X0], X9
	254 Move [X0+8], W8
	255 NotImplemented "Instruction SCVTF not yet implemented."
	256 Multiply S0, S8, S0
	257 Add X0, X31, 176
	258 Add X1, X31, 160
	259 Add X2, X31, 144
	260 Add X3, X31, 128
	261 Add X4, X31, 80
	262 Move X5, X31
	263 Call CurveUtility.SampleCubicBezierPoint, X0, X1, X2, X3, V0, X4
	264 Move W9, [X31+88]
	265 Move X10, [X31+80]
	266 NotImplemented "Instruction NOP not yet implemented."
	267 NotImplemented "Instruction SMADDL not yet implemented."
	268 Add W21, W21, 1
	269 NotImplemented "Instruction CMP not yet implemented."
	270 Move [X8+8], W9
	271 Move [X8], X10
	272 Move X0, [X19+928]
	273 Compare X0, 0
	274 JumpIfEqual {294}
	275 Move X8, W22
	276 Move X22, 0x60C000
	277 Move X22, [X22+2832]
	278 Move W9, 12
	279 Add X21, X8, 1
	280 NotImplemented "Instruction MADD not yet implemented."
	281 Add X20, X8, 8
	282 NotImplemented "Instruction LDRSW not yet implemented."
	283 NotImplemented "Instruction CMP not yet implemented."
	284 Move X2, [X22]
	285 Move W1, W21
	286 Call List`1<SamplePoint>.get_Item, X0, X1
	287 Move [X20-8], S0
	288 Move [X20], S1
	289 Move [X20+12], S2
	290 Move X0, [X19+928]
	291 Add X21, X21, 1
	292 Compare X0, 0
	293 JumpIfNotEqual {282}
	294 Call 0x1C17F20
	295 Move W22, [X19+720]
	296 Move [X21], W22
	297 Move X0, [X24]
	298 Move W8, [X0+224]
	299 Compare W8, 0
	300 JumpIfNotEqual {302}
	301 Call 0x1C17DFC
	302 Move X0, X20
	303 Move W1, W22
	304 Call XRRayInteractor.EnsureCapacity, X0, X1
	305 Move X8, 0x60C000
	306 Move X8, [X8+2536]
	307 Move X0, X20
	308 Move X1, [X8]
	309 Call NativeArray`1<Vector3>.Reinterpret, X0
	310 Move X8, [X31+176]
	311 Move W9, [X31+184]
	312 Move [X0], X8
	313 Move [X0+8], W9
	314 Move W8, [X19+720]
	315 NotImplemented "Instruction CMP not yet implemented."
	316 Subtract W8, W8, 1
	317 Move S0, 1
	318 NotImplemented "Instruction SCVTF not yet implemented."
	319 Add X20, X0, 12
	320 NotImplemented "Instruction FDIV not yet implemented."
	321 Move W21, 1
	322 NotImplemented "Instruction SCVTF not yet implemented."
	323 Multiply S0, S8, S0
	324 Add X0, X31, 176
	325 Add X1, X31, 160
	326 Add X2, X31, 144
	327 Add X3, X31, 128
	328 Add X4, X31, 64
	329 Move X5, X31
	330 Call CurveUtility.SampleCubicBezierPoint, X0, X1, X2, X3, V0, X4
	331 Move W8, [X31+72]
	332 Move X9, [X31+64]
	333 Add X21, X21, 1
	334 Move [X20+8], W8
	335 Move [X20+12], X9
	336 NotImplemented "Instruction LDRSW not yet implemented."
	337 NotImplemented "Instruction CMP not yet implemented."
	338 Move W0, 1
	339 Move X20, [X31+256]
	340 Move X19, [X31+264]
	341 Move X22, [X31+240]
	342 Move X21, [X31+248]
	343 Move X24, [X31+224]
	344 Move X23, [X31+232]
	345 Move X29, [X31+208]
	346 Move X30, [X31+216]
	347 Move V8, [X31+192]
	348 Add X31, X31, 272
	349 Return X0
	350 Call 0x1C17F28

Method: System.Boolean GetLinePoints(ref UnityEngine.Vector3[] linePoints, out System.Int32 numPoints)

Disassembly:
	0x03B62448 LDP S1, S2, [X8 + 0x1C]
	0x03B6244C LDR V0, [X8 + 0x18]
	0x03B62450 LDP D9, D8, [X31], #0x30
	0x03B62454 B 0x3C40678
	0x03B62458 BL 0x1C16F20
	0x03B6245C STR D14, [X31 - 0x50]!
	0x03B62460 STP D13, D12, [X31 + 0x8]
	0x03B62464 STP D11, D10, [X31 + 0x18]
	0x03B62468 STP D9, D8, [X31 + 0x28]
	0x03B6246C STR X30, [X31 + 0x38]
	0x03B62470 STP X20, X19, [X31 + 0x40]
	0x03B62474 ADRP X20, 0x877000
	0x03B62478 LDRB W8, [X20 + 0x5AA]
	0x03B6247C MOV V12.16B, V1.16B
	0x03B62480 MOV V13.16B, V0.16B
	0x03B62484 FMUL S0, S0, S0
	0x03B62488 FMUL S1, S1, S1
	0x03B6248C MOV V9.16B, V5.16B
	0x03B62490 MOV V8.16B, V4.16B
	0x03B62494 MOV V11.16B, V3.16B
	0x03B62498 MOV V10.16B, V2.16B
	0x03B6249C MOV X19, X1
	0x03B624A0 FADD S14, S0, S1
	0x03B624A4 CBNZ W8, 0x3B624BC
	0x03B624A8 ADRP X0, 0x598000
	0x03B624AC LDR X0, [X0 + 0x4B8]
	0x03B624B0 BL 0x1C16CF4
	0x03B624B4 MOVZ W8, 0x1
	0x03B624B8 STRB W8, [X20 + 0x5AA]
	0x03B624BC ADRP X8, 0x598000
	0x03B624C0 LDR X8, [X8 + 0x4B8]
	0x03B624C4 ADRP X9, 0xFFFFFFFFFCF88000
	0x03B624C8 LDR V0, [X9 + 0x240]
	0x03B624CC FABS S1, S14
	0x03B624D0 LDR X8, [X8]
	0x03B624D4 FMOV S2, W31
	0x03B624D8 FMAXNM S1, S1, S2
	0x03B624DC FMUL S0, S1, S0
	0x03B624E0 LDR X8, [X8 + 0xB8]
	0x03B624E4 FMOV S1, 8
	0x03B624E8 LDR V3, [X8]
	0x03B624EC FMUL S1, S3, S1
	0x03B624F0 FCMP S0, S1
	0x03B624F4 FCSEL S0, S0, S1, GT
	0x03B624F8 FABD S1, S2, S2
	0x03B624FC FCMP S1, S0
	0x03B62500 B.MI 0x3B625F8
	0x03B62504 MOV V0.16B, V13.16B
	0x03B62508 MOV V1.16B, V12.16B
	0x03B6250C BL 0x3EB1C40
	0x03B62510 ADRP X20, 0x876000
	0x03B62514 LDRB W8, [X20 + 0x786]
	0x03B62518 MOV V12.16B, V0.16B
	0x03B6251C CBNZ W8, 0x3B62534
	0x03B62520 ADRP X0, 0x591000
	0x03B62524 LDR X0, [X0 + 0x5A0]
	0x03B62528 BL 0x1C16CF4
	0x03B6252C MOVZ W8, 0x1
	0x03B62530 STRB W8, [X20 + 0x786]
	0x03B62534 ADRP X8, 0x591000
	0x03B62538 LDR X8, [X8 + 0x5A0]
	0x03B6253C ADRP X9, 0xFFFFFFFFFCF88000
	0x03B62540 LDR V0, [X9 + 0x448]
	0x03B62544 MOV X0, X31
	0x03B62548 LDR X8, [X8]
	0x03B6254C FMUL S0, S12, S0
	0x03B62550 LDR X8, [X8 + 0xB8]
	0x03B62554 LDP S1, S2, [X8 + 0x18]
	0x03B62558 LDR V3, [X8 + 0x20]
	0x03B6255C BL 0x3C2A758
	0x03B62560 CBZ X19, 0x3B62614
	0x03B62564 FMUL S4, S9, S3
	0x03B62568 FMUL S5, S10, S0
	0x03B6256C FMUL S6, S11, S1
	0x03B62570 FMUL S7, S8, S2
	0x03B62574 FMUL S16, S10, S1
	0x03B62578 FMUL S17, S9, S2
	0x03B6257C FMUL S18, S8, S3
	0x03B62580 FMUL S19, S11, S0
	0x03B62584 FMUL S20, S11, S3
	0x03B62588 FMUL S21, S11, S2
	0x03B6258C FMUL S22, S10, S2
	0x03B62590 FMUL S2, S10, S3
	0x03B62594 FMUL S3, S8, S0
	0x03B62598 FMUL S0, S9, S0
	0x03B6259C FMUL S23, S9, S1
	0x03B625A0 FMUL S24, S8, S1
	0x03B625A4 MOV X0, X19
	0x03B625A8 LDP X20, X19, [X31 + 0x40]
	0x03B625AC LDR X30, [X31 + 0x38]
	0x03B625B0 LDP D9, D8, [X31 + 0x28]
	0x03B625B4 LDP D11, D10, [X31 + 0x18]
	0x03B625B8 LDP D13, D12, [X31 + 0x8]
	0x03B625BC FSUB S1, S4, S5
	0x03B625C0 FADD S4, S17, S18
	0x03B625C4 FADD S5, S23, S20
	0x03B625C8 FADD S0, S0, S2
	0x03B625CC FSUB S1, S1, S6

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X22, 0x881000
	009 Move W8, [X22+2448]
	010 Move X20, X2
	011 Move X19, X1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0x5F9000
	018 Move X0, [X0+2688]
	019 Call 0x1C17CF4
	020 Move X0, 0x5FA000
	021 Move X0, [X0+768]
	022 Call 0x1C17CF4
	023 Move X0, 0x5BD000
	024 Move X0, [X0+504]
	025 Call 0x1C17CF4
	026 Move X0, 0x5FA000
	027 Move X0, [X0+776]
	028 Call 0x1C17CF4
	029 Move X0, 0x594000
	030 Move X0, [X0+2480]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X22+2448], W8
	034 Move [X31+32], X31
	035 Move [X31+40], X31
	036 Move X23, 0x5FA000
	037 Move X1, [X19]
	038 Move X23, [X23+776]
	039 Compare X1, 0
	040 JumpIfNotEqual {72}
	041 Move X8, 0x5F9000
	042 Move X8, [X8+2688]
	043 Move X22, [X8]
	044 Move X8, [X22+56]
	045 Compare X8, 0
	046 JumpIfNotEqual {50}
	047 Move X0, X22
	048 Call 0x1C5D6E0
	049 Move X8, [X22+56]
	050 Move X0, [X8+16]
	051 Move W8, [X0+309]
	052 Move TEMP, X8
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {57}
	056 Call 0x1C5D684
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move X8, [X22+56]
	062 Move X0, [X8+16]
	063 Move W8, [X0+309]
	064 Move TEMP, X8
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfEqual {69}
	068 Call 0x1C5D684
	069 Move X8, [X0+184]
	070 Move X1, [X8]
	071 Move [X19], X1
	072 Move X3, [X23]
	073 Add X0, X31, 32
	074 Move W2, 2
	075 Call NativeArray`1<Vector3>..ctor, X0, X1, X2
	076 Add X1, X31, 32
	077 Add X3, X31, 0
	078 Move X0, X21
	079 Move X2, X20
	080 Move [X31], X31
	081 Move [X31+8], X31
	082 Move [X31+24], W31
	083 Move [X31+16], X31
	084 Call XRRayInteractor.GetLinePoints, X0, X1, X2, X3
	085 Move X1, [X19]
	086 Compare X1, 0
	087 JumpIfEqual {118}
	088 Move W8, [X31+40]
	089 Move W9, [X1+24]
	090 Move X22, 0x5FA000
	091 Move X21, 0x5BD000
	092 Move X22, [X22+768]
	093 Move X21, [X21+504]
	094 Move W20, W0
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X9, 0x594000
	097 Move X9, [X9+2480]
	098 Move W1, W8
	099 Move X0, [X9]
	100 Call 0x1C17D6C
	101 Move X1, X0
	102 Move [X19], X0
	103 Move X2, [X22]
	104 Add X0, X31, 32
	105 Call NativeArray`1<Vector3>.CopyTo, X0, X1
	106 Move X1, [X21]
	107 Add X0, X31, 32
	108 Call NativeArray`1<Vector3>.Dispose, X0
	109 And W0, W20, 1
	110 Move X20, [X31+80]
	111 Move X19, [X31+88]
	112 Move X22, [X31+64]
	113 Move X21, [X31+72]
	114 Move X30, [X31+48]
	115 Move X23, [X31+56]
	116 Add X31, X31, 96
	117 Return X0
	118 Call 0x1C17F20

Method: System.Void GetLineOriginAndDirection(out UnityEngine.Vector3 origin, out UnityEngine.Vector3 direction)

Disassembly:
	0x03B60170 MOV V2.16B, V11.16B
	0x03B60174 MOV V4.16B, V9.16B
	0x03B60178 MOV V5.16B, V8.16B
	0x03B6017C MOV X0, X31
	0x03B60180 BL 0x3C0CB04
	0x03B60184 FADD S3, S14, S15
	0x03B60188 LDR V15, [X31 + 0xC]
	0x03B6018C FADD S5, S8, S10
	0x03B60190 MOV V0.16B, V13.16B
	0x03B60194 MOV V1.16B, V12.16B
	0x03B60198 FADD S4, S9, S15
	0x03B6019C MOV V2.16B, V11.16B
	0x03B601A0 MOV X0, X31
	0x03B601A4 STR S8, [X31 + 0x28]
	0x03B601A8 BL 0x3C0CB04
	0x03B601AC LDR V0, [X31 + 0x10]
	0x03B601B0 FSUB S4, S9, S15
	0x03B601B4 FSUB S5, S8, S10
	0x03B601B8 MOV V1.16B, V12.16B
	0x03B601BC FSUB S3, S14, S0
	0x03B601C0 MOV V0.16B, V13.16B
	0x03B601C4 MOV V2.16B, V11.16B
	0x03B601C8 MOV X0, X31
	0x03B601CC BL 0x3C0CB04
	0x03B601D0 LDP S8, S15, [X31 + 0x1C]
	0x03B601D4 LDR V10, [X31 + 0x18]
	0x03B601D8 LDR V0, [X31 + 0x28]
	0x03B601DC MOV V1.16B, V12.16B
	0x03B601E0 FADD S3, S14, S15
	0x03B601E4 FADD S4, S9, S10
	0x03B601E8 FADD S5, S0, S8
	0x03B601EC MOV V0.16B, V13.16B
	0x03B601F0 MOV V2.16B, V11.16B
	0x03B601F4 MOV X0, X31
	0x03B601F8 BL 0x3C0CB04

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x883000
	007 Move W8, [X22+2449]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x5FB000
	016 Move X0, [X0+1984]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+2449], W8
	020 Move X22, 0x5FB000
	021 Move W8, [X21+856]
	022 Move X22, [X22+1984]
	023 Compare W8, 0
	024 JumpIfEqual {26}
	025 Move X21, [X21+672]
	026 Move X0, X21
	027 Move X1, X31
	028 Call Component.get_transform, X0
	029 Move X21, X0
	030 Move X0, [X22]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X21
	036 Move X1, X20
	037 Move X2, X19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X30, [X31+48]
	043 Call XRRayInteractor.GetLineOriginAndDirection, X0, X1, X2
	044 Return 

Method: System.Void GetLineOriginAndDirection(System.Nullable`1<UnityEngine.Ray> rayOriginOverride, out UnityEngine.Vector3 origin, out UnityEngine.Vector3 direction)

Disassembly:
	0x03B6261C STP D15, D14, [X31 + 0x20]
	0x03B62620 STP D13, D12, [X31 + 0x30]
	0x03B62624 STP D11, D10, [X31 + 0x40]
	0x03B62628 STP D9, D8, [X31 + 0x50]
	0x03B6262C STR X30, [X31 + 0x60]
	0x03B62630 STP X22, X21, [X31 + 0x70]
	0x03B62634 STP X20, X19, [X31 + 0x80]
	0x03B62638 ADRP X22, 0x880000
	0x03B6263C LDRB W8, [X22 + 0x99C]
	0x03B62640 MOV V8.16B, V0.16B
	0x03B62644 MOV X19, X2
	0x03B62648 MOV X21, X1
	0x03B6264C MOV X20, X0
	0x03B62650 TBNZ X8, 0x0, 0x3B62668
	0x03B62654 ADRP X0, 0x5F8000
	0x03B62658 LDR X0, [X0 + 0x7C0]
	0x03B6265C BL 0x1C16CF4
	0x03B62660 MOVZ W8, 0x1
	0x03B62664 STRB W8, [X22 + 0x99C]
	0x03B62668 ADRP X22, 0x877000
	0x03B6266C LDRB W8, [X22 + 0x5AA]
	0x03B62670 STR W31, [X31 + 0x18]
	0x03B62674 STR X31, [X31 + 0x10]
	0x03B62678 STR W31, [X31 + 0x8]
	0x03B6267C STR X31, [X31]
	0x03B62680 CBNZ W8, 0x3B62698
	0x03B62684 ADRP X0, 0x598000
	0x03B62688 LDR X0, [X0 + 0x4B8]
	0x03B6268C BL 0x1C16CF4
	0x03B62690 MOVZ W8, 0x1
	0x03B62694 STRB W8, [X22 + 0x5AA]
	0x03B62698 ADRP X8, 0x598000
	0x03B6269C LDR X8, [X8 + 0x4B8]
	0x03B626A0 ADRP X9, 0xFFFFFFFFFCF88000
	0x03B626A4 LDR V0, [X9 + 0x240]
	0x03B626A8 FABS S1, S8
	0x03B626AC LDR X8, [X8]
	0x03B626B0 FMOV S2, W31
	0x03B626B4 FMAXNM S1, S1, S2
	0x03B626B8 FMUL S0, S1, S0
	0x03B626BC LDR X8, [X8 + 0xB8]
	0x03B626C0 FMOV S1, 8
	0x03B626C4 LDR V3, [X8]
	0x03B626C8 FMUL S1, S3, S1
	0x03B626CC FCMP S0, S1
	0x03B626D0 FCSEL S0, S0, S1, GT
	0x03B626D4 FABD S1, S2, S2
	0x03B626D8 FCMP S1, S0

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X23, 0x881000
	009 Move W8, [X23+2450]
	010 Move X19, X3
	011 Move X20, X2
	012 Move X21, X1
	013 Move X22, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x5FA000
	019 Move X0, [X0+784]
	020 Call 0x1C17CF4
	021 Move X0, 0x5FA000
	022 Move X0, [X0+792]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+2450], W8
	026 Move W8, [X21]
	027 Compare W8, 0
	028 JumpIfEqual {51}
	029 Move X8, 0x5FA000
	030 Move X8, [X8+792]
	031 Move X0, X21
	032 Move X1, [X8]
	033 Add X8, X31, 8
	034 Call Nullable`1<Ray>.get_Value, X0
	035 Move V0, [X31+8]
	036 Move V1, [X31+16]
	037 NotImplemented "Instruction LDUR not yet implemented."
	038 Move V3, [X31+28]
	039 Move [X20], D0
	040 Move [X20+8], S1
	041 Move [X19], D2
	042 Move [X19+8], S3
	043 Move X20, [X31+64]
	044 Move X19, [X31+72]
	045 Move X22, [X31+48]
	046 Move X21, [X31+56]
	047 Move X30, [X31+32]
	048 Move X23, [X31+40]
	049 Add X31, X31, 80
	050 Return 
	051 Move X0, X22
	052 Move X1, X20
	053 Move X2, X19
	054 Move X20, [X31+64]
	055 Move X19, [X31+72]
	056 Move X22, [X31+48]
	057 Move X21, [X31+56]
	058 Move X30, [X31+32]
	059 Move X23, [X31+40]
	060 Add X31, X31, 80
	061 Call XRRayInteractor.GetLineOriginAndDirection, X0, X1, X2
	062 Return 

Method: System.Void GetLineOriginAndDirection(UnityEngine.Transform rayOrigin, out UnityEngine.Vector3 origin, out UnityEngine.Vector3 direction)

Disassembly:
	0x03B625D0 FADD S2, S16, S4
	0x03B625D4 FADD S4, S3, S5
	0x03B625D8 FADD S0, S21, S0
	0x03B625DC FSUB S3, S1, S7
	0x03B625E0 FSUB S2, S2, S19
	0x03B625E4 FSUB S1, S4, S22
	0x03B625E8 FSUB S0, S0, S24
	0x03B625EC MOV X1, X31
	0x03B625F0 LDR V14, [X31], #0x50
	0x03B625F4 B 0x3C3F7AC
	0x03B625F8 LDP X20, X19, [X31 + 0x40]
	0x03B625FC LDR X30, [X31 + 0x38]
	0x03B62600 LDP D9, D8, [X31 + 0x28]
	0x03B62604 LDP D11, D10, [X31 + 0x18]
	0x03B62608 LDP D13, D12, [X31 + 0x8]
	0x03B6260C LDR V14, [X31], #0x50
	0x03B62610 RET
	0x03B62614 BL 0x1C16F20
	0x03B62618 SUB X31, X31, 0x90

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {26}
	007 Move X21, X1
	008 Move X1, X31
	009 Move X19, X2
	010 Move X20, X0
	011 Call Transform.get_position, X0
	012 Move X0, X20
	013 Move X1, X31
	014 Move [X21], S0
	015 Move [X21+8], S1
	016 Move [X21+8], S2
	017 Call Transform.get_forward, X0
	018 Move [X19], S0
	019 Move [X19+8], S1
	020 Move [X19+8], S2
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Return 
	026 Call 0x1C17F20

Method: System.Void EnsureCapacity(ref Unity.Collections.NativeArray`1<UnityEngine.Vector3> linePoints, System.Int32 numPoints)

Disassembly:
	0x03B61BA4 BL 0x3EB1B10
	0x03B61BA8 MOVI V0.2D, 0x0
	0x03B61BAC ADD X1, X31, 0x58
	0x03B61BB0 MOV X0, X21
	0x03B61BB4 STP V0, V0, [X31 + 0x30]
	0x03B61BB8 STP V0, V0, [X31 + 0x10]
	0x03B61BBC STR V0, [X31]
	0x03B61BC0 BL 0x3B61A38
	0x03B61BC4 TBZ X0, 0x0, 0x3B61C34
	0x03B61BC8 ADRP X22, 0x5FA000
	0x03B61BCC LDR X22, [X22 + 0x258]
	0x03B61BD0 LDR X0, [X22]
	0x03B61BD4 LDR W8, [X0 + 0xE0]
	0x03B61BD8 CBNZ W8, 0x3B61BE0
	0x03B61BDC BL 0x1C16DFC
	0x03B61BE0 ADD X8, X31, 0x58
	0x03B61BE4 ADD X21, X8, 0xE0
	0x03B61BE8 ADD X0, X31, 0x0
	0x03B61BEC MOVZ W2, 0x50
	0x03B61BF0 MOV X1, X21
	0x03B61BF4 BL 0x3EB1AC0
	0x03B61BF8 ADD X0, X31, 0x0
	0x03B61BFC MOV X1, X31
	0x03B61C00 BL 0x3E5AC40
	0x03B61C04 TBZ X0, 0x0, 0x3B61C34
	0x03B61C08 LDR X0, [X22]
	0x03B61C0C LDR W8, [X0 + 0xE0]
	0x03B61C10 CBNZ W8, 0x3B61C18
	0x03B61C14 BL 0x1C16DFC
	0x03B61C18 MOVZ W2, 0x50
	0x03B61C1C MOV X0, X20
	0x03B61C20 MOV X1, X21
	0x03B61C24 BL 0x3EB1AC0
	0x03B61C28 LDR W8, [X31 + 0x188]
	0x03B61C2C MOVZ W0, 0x1
	0x03B61C30 B 0x3B61C4C
	0x03B61C34 MOV W8, W31
	0x03B61C38 MOV W0, W31
	0x03B61C3C MOVI V0.2D, 0x0
	0x03B61C40 STP V0, V0, [X20 + 0x30]
	0x03B61C44 STP V0, V0, [X20 + 0x10]
	0x03B61C48 STR V0, [X20]
	0x03B61C4C STR W8, [X19]
	0x03B61C50 LDP X20, X19, [X31 + 0x1D0]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x882000
	007 Move W8, [X21+2451]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x5BE000
	015 Move X0, [X0+504]
	016 Call 0x1C17CF4
	017 Move X0, 0x5BE000
	018 Move X0, [X0+496]
	019 Call 0x1C17CF4
	020 Move X0, 0x5FA000
	021 Move X0, [X0+2480]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2451], W8
	025 Move X8, [X19]
	026 Compare X8, 0
	027 JumpIfEqual {35}
	028 Move W8, [X19+8]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, 0x5BE000
	031 Move X8, [X8+504]
	032 Move X0, X19
	033 Move X1, [X8]
	034 Call NativeArray`1<Vector3>.Dispose, X0
	035 Move X8, 0x5BE000
	036 Move X8, [X8+496]
	037 Add X0, X31, 0
	038 Move W2, 4
	039 Move W3, 1
	040 Move X4, [X8]
	041 Move W1, W20
	042 Move [X31], X31
	043 Move [X31+8], X31
	044 Call NativeArray`1<Vector3>..ctor, X0, X1, X2, X3
	045 Move V0, [X31]
	046 Move [X19], V0
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+16]
	050 Move X21, [X31+24]
	051 Add X31, X31, 48
	052 Return 

Method: System.Boolean TryGetHitInfo(out UnityEngine.Vector3 position, out UnityEngine.Vector3 normal, out System.Int32 positionInLine, out System.Boolean isValidTarget)

Disassembly:
	0x03B57838 LDR X1, [X23]
	0x03B5783C ADD X8, X31, 0x8
	0x03B57840 BL 0x301CB58
	0x03B57844 LDUR V0, [X31 + 0x8]
	0x03B57848 LDR X8, [X31 + 0x18]
	0x03B5784C MOV W20, W31
	0x03B57850 STR V0, [X31 + 0x4]
	0x03B57854 STR X8, [X31 + 0x50]
	0x03B57858 LDR X1, [X24]
	0x03B5785C ADD X0, X31, 0x40
	0x03B57860 BL 0x2BC4350
	0x03B57864 TBZ X0, 0x0, 0x3B57974
	0x03B57868 LDR X0, [X25]
	0x03B5786C LDR X21, [X31 + 0x50]
	0x03B57870 LDR W8, [X0 + 0xE0]
	0x03B57874 CBNZ W8, 0x3B5787C
	0x03B57878 BL 0x1C16DFC
	0x03B5787C MOV X0, X21
	0x03B57880 MOV X1, X31
	0x03B57884 MOV X2, X31
	0x03B57888 BL 0x3C354F8
	0x03B5788C TBZ X0, 0x0, 0x3B57858
	0x03B57890 LDR X1, [X26]
	0x03B57894 MOV X0, X21
	0x03B57898 BL 0x1C16E00
	0x03B5789C MOV X1, X0
	0x03B578A0 CBZ X1, 0x3B57858
	0x03B578A4 ADD W21, W20, 0x1
	0x03B578A8 MOV X0, X19
	0x03B578AC MOV W2, W20
	0x03B578B0 BL 0x3B57D38
	0x03B578B4 MOV W20, W21
	0x03B578B8 B 0x3B57858
	0x03B578BC B 0x3B578CC
	0x03B578C0 B 0x3B578CC
	0x03B578C4 B 0x3B578CC
	0x03B578C8 B 0x3B578CC
	0x03B578CC CMP W1, 0x1
	0x03B578D0 STR X0, [X31 + 0x68]
	0x03B578D4 B.NE 0x3B57B9C
	0x03B578D8 LDR X0, [X31 + 0x68]
	0x03B578DC BL 0x3EB1AD0
	0x03B578E0 LDR X20, [X0]
	0x03B578E4 BL 0x3EB1AE0
	0x03B578E8 LDR X1, [X22]
	0x03B578EC ADD X0, X31, 0x40
	0x03B578F0 BL 0x2BC434C
	0x03B578F4 CBNZ X20, 0x3B57C74
	0x03B578F8 LDR X0, [X19 + 0x50]
	0x03B578FC CBZ X0, 0x3B57B98
	0x03B57900 LDR X1, [X23]
	0x03B57904 ADD X8, X31, 0x8
	0x03B57908 BL 0x301CB58
	0x03B5790C LDUR V0, [X31 + 0x8]
	0x03B57910 LDR X8, [X31 + 0x18]
	0x03B57914 STR V0, [X31 + 0x4]
	0x03B57918 STR X8, [X31 + 0x50]
	0x03B5791C LDR X1, [X24]
	0x03B57920 ADD X0, X31, 0x40
	0x03B57924 BL 0x2BC4350
	0x03B57928 TBZ X0, 0x0, 0x3B57974
	0x03B5792C LDR X0, [X25]
	0x03B57930 LDR X20, [X31 + 0x50]
	0x03B57934 LDR W8, [X0 + 0xE0]
	0x03B57938 CBNZ W8, 0x3B57940
	0x03B5793C BL 0x1C16DFC
	0x03B57940 MOV X0, X20
	0x03B57944 MOV X1, X31
	0x03B57948 MOV X2, X31
	0x03B5794C BL 0x3C354F8
	0x03B57950 TBZ X0, 0x0, 0x3B5791C
	0x03B57954 LDR X1, [X26]
	0x03B57958 MOV X0, X20
	0x03B5795C BL 0x1C16E00
	0x03B57960 MOV X1, X0
	0x03B57964 CBZ X1, 0x3B5791C
	0x03B57968 MOV X0, X19
	0x03B5796C BL 0x3B57F28
	0x03B57970 B 0x3B5791C
	0x03B57974 LDR X1, [X22]
	0x03B57978 ADD X0, X31, 0x40
	0x03B5797C BL 0x2BC434C
	0x03B57980 LDR X0, [X19 + 0x30]
	0x03B57984 MOV X1, X31
	0x03B57988 BL 0x322DA44
	0x03B5798C TBZ X0, 0x0, 0x3B579AC
	0x03B57990 MOV X0, X19
	0x03B57994 MOV X1, X31
	0x03B57998 BL 0x3C32ECC
	0x03B5799C CBZ X0, 0x3B57B98
	0x03B579A0 MOV X1, X31
	0x03B579A4 BL 0x3C389D4
	0x03B579A8 STR X0, [X19 + 0x30]
	0x03B579AC MOV X0, X19
	0x03B579B0 BL 0x3B574DC
	0x03B579B4 LDR X0, [X19 + 0x58]
	0x03B579B8 CBZ X0, 0x3B57B98
	0x03B579BC ADRP X8, 0x603000
	0x03B579C0 LDR X8, [X8 + 0xF38]
	0x03B579C4 ADRP X28, 0x603000
	0x03B579C8 ADRP X27, 0x603000
	0x03B579CC LDR X1, [X8]
	0x03B579D0 LDR X28, [X28 + 0xF28]
	0x03B579D4 LDR X27, [X27 + 0xF20]
	0x03B579D8 ADD X8, X31, 0x8
	0x03B579DC BL 0x301CB58
	0x03B579E0 LDUR V0, [X31 + 0x8]
	0x03B579E4 LDR X8, [X31 + 0x18]
	0x03B579E8 STR V0, [X31 + 0x2]
	0x03B579EC STR X8, [X31 + 0x30]
	0x03B579F0 LDR X1, [X28]
	0x03B579F4 ADD X0, X31, 0x20
	0x03B579F8 BL 0x2BC4350
	0x03B579FC TBZ X0, 0x0, 0x3B57B18
	0x03B57A00 LDR X21, [X31 + 0x30]
	0x03B57A04 CBZ X21, 0x3B57B5C
	0x03B57A08 LDR X0, [X25]
	0x03B57A0C LDR X20, [X21 + 0x10]
	0x03B57A10 LDR W8, [X0 + 0xE0]
	0x03B57A14 CBNZ W8, 0x3B57A1C
	0x03B57A18 BL 0x1C16DFC
	0x03B57A1C MOV X0, X20
	0x03B57A20 MOV X1, X31
	0x03B57A24 MOV X2, X31
	0x03B57A28 BL 0x3C3883C
	0x03B57A2C TBNZ X0, 0x0, 0x3B579F0
	0x03B57A30 LDR X1, [X26]
	0x03B57A34 MOV X0, X20
	0x03B57A38 BL 0x1C16E00
	0x03B57A3C MOV X20, X0
	0x03B57A40 CBZ X0, 0x3B579F0
	0x03B57A44 LDR X0, [X21 + 0x18]
	0x03B57A48 CBZ X0, 0x3B57B8C
	0x03B57A4C LDR X1, [X23]
	0x03B57A50 ADD X8, X31, 0x8
	0x03B57A54 BL 0x301CB58
	0x03B57A58 LDUR V0, [X31 + 0x8]
	0x03B57A5C LDR X8, [X31 + 0x18]
	0x03B57A60 STR V0, [X31 + 0x4]
	0x03B57A64 STR X8, [X31 + 0x50]
	0x03B57A68 LDR X1, [X24]
	0x03B57A6C ADD X0, X31, 0x40
	0x03B57A70 BL 0x2BC4350
	0x03B57A74 TBZ X0, 0x0, 0x3B57AC4
	0x03B57A78 LDR X0, [X25]
	0x03B57A7C LDR X21, [X31 + 0x50]
	0x03B57A80 LDR W8, [X0 + 0xE0]
	0x03B57A84 CBNZ W8, 0x3B57A8C
	0x03B57A88 BL 0x1C16DFC
	0x03B57A8C MOV X0, X21
	0x03B57A90 MOV X1, X31
	0x03B57A94 MOV X2, X31
	0x03B57A98 BL 0x3C354F8
	0x03B57A9C TBZ X0, 0x0, 0x3B57A68
	0x03B57AA0 LDR X1, [X26]
	0x03B57AA4 MOV X0, X21
	0x03B57AA8 BL 0x1C16E00
	0x03B57AAC MOV X2, X0
	0x03B57AB0 CBZ X0, 0x3B57A68
	0x03B57AB4 MOV X0, X19
	0x03B57AB8 MOV X1, X20
	0x03B57ABC BL 0x3B58064
	0x03B57AC0 B 0x3B57A68
	0x03B57AC4 MOV X20, X31
	0x03B57AC8 MOVZ W21, 0x9
	0x03B57ACC LDR X1, [X22]
	0x03B57AD0 ADD X0, X31, 0x40
	0x03B57AD4 BL 0x2BC434C
	0x03B57AD8 CBNZ X20, 0x3B57B90
	0x03B57ADC CMP W21, 0x9
	0x03B57AE0 B.EQ 0x3B579F0
	0x03B57AE4 CBZ W21, 0x3B579F0
	0x03B57AE8 B 0x3B57B4C
	0x03B57AEC B 0x3B57AFC
	0x03B57AF0 B 0x3B57AFC
	0x03B57AF4 B 0x3B57AFC

ISIL:
	001 Move [X31-80], X29
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Subtract X31, X31, 448
	011 Move X25, 0x88C000
	012 Move W8, [X25+2452]
	013 Move X19, X4
	014 Move X20, X3
	015 Move X22, X2
	016 Move X23, X1
	017 Move X21, X0
	018 Add X24, X31, 160
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {40}
	023 Move X0, 0x604000
	024 Move X0, [X0+3752]
	025 Call 0x1C17CF4
	026 Move X0, 0x604000
	027 Move X0, [X0+2568]
	028 Call 0x1C17CF4
	029 Move X0, 0x604000
	030 Move X0, [X0+2816]
	031 Call 0x1C17CF4
	032 Move X0, 0x604000
	033 Move X0, [X0+2576]
	034 Call 0x1C17CF4
	035 Move X0, 0x59D000
	036 Move X0, [X0+1432]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X25+2452], W8
	040 NotImplemented "Instruction MOVI not yet implemented."
	041 Add X1, X31, 400
	042 Add X2, X31, 396
	043 Add X3, X31, 304
	044 Add X4, X31, 300
	045 Add X5, X31, 296
	046 Move X0, X21
	047 Move [X31+396], W31
	048 Move [X31+384], X31
	049 Move [X31+300], W31
	050 Move [X31+296], W31
	051 Move [X31+288], X31
	052 Move [X31+416], V0
	053 Move [X31+424], V0
	054 Move [X31+25], V0
	055 Move [X31+352], V0
	056 Move [X31+360], V0
	057 Move [X31+320], V0
	058 Move [X31+328], V0
	059 Move [X31+19], V0
	060 Move [X24+108], V0
	061 Move [X31+240], V0
	062 Move [X31+248], V0
	063 Move [X23+8], W31
	064 Move [X23], X31
	065 Move [X22+8], W31
	066 Move [X22], X31
	067 Move [X20], W31
	068 Move [X19], W31
	069 Call XRRayInteractor.TryGetCurrentRaycast, X0, X1, X2, X3, X4, X5
	070 Move W8, W0
	071 Move W0, W31
	072 Move TEMP, X8
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {126}
	076 Move W8, [X31+304]
	077 Move W9, [X31+296]
	078 And W31, W9, W8
	079 Move X21, 0x604000
	080 Move X21, [X21+2816]
	081 Add X8, X31, 80
	082 Add X0, X31, 304
	083 Move X1, [X21]
	084 Call Nullable`1<RaycastResult>.get_Value, X0
	085 Add X0, X31, 160
	086 Add X1, X31, 80
	087 Move W2, 80
	088 Call 0x3EB2AC0
	089 Move W8, [X31+212]
	090 NotImplemented "Instruction LDUR not yet implemented."
	091 Add X0, X31, 304
	092 Move [X23+8], W8
	093 Move [X23], X9
	094 Move X1, [X21]
	095 Add X8, X31, 0
	096 Call Nullable`1<RaycastResult>.get_Value, X0
	097 Add X0, X31, 80
	098 Add X1, X31, 0
	099 Move W2, 80
	100 Call 0x3EB2AC0
	101 Move X8, [X31+136]
	102 Move W9, [X31+144]
	103 Add X0, X31, 304
	104 Move [X22], X8
	105 Move [X22+8], W9
	106 Move W8, [X31+300]
	107 Move [X20], W8
	108 Move X1, [X21]
	109 Add X8, X31, 0
	110 Call Nullable`1<RaycastResult>.get_Value, X0
	111 Move X8, 0x59D000
	112 Move X8, [X8+1432]
	113 Move X20, [X31]
	114 Move X0, [X8]
	115 Move W8, [X0+224]
	116 Compare W8, 0
	117 JumpIfNotEqual {119}
	118 Call 0x1C17DFC
	119 Move X0, X20
	120 Move X1, X31
	121 Move X2, X31
	122 Call Object.op_Inequality, X0, X1
	123 And W8, W0, 1
	124 Move [X19], W8
	125 Move W0, 1
	126 Add X31, X31, 448
	127 Move X20, [X31+64]
	128 Move X19, [X31+72]
	129 Move X22, [X31+48]
	130 Move X21, [X31+56]
	131 Move X24, [X31+32]
	132 Move X23, [X31+40]
	133 Move X30, [X31+16]
	134 Move X25, [X31+24]
	135 Move X29, [X31+80]
	136 Return X0
	137 Move W8, [X31+400]
	138 Compare W8, 0
	139 JumpIfEqual {125}
	140 Move X25, 0x604000
	141 Move X25, [X25+2576]
	142 Add X8, X31, 160
	143 Add X0, X31, 400
	144 Move X1, [X25]
	145 Call Nullable`1<RaycastHit>.get_Value, X0
	146 Move V0, [X31+160]
	147 Move V1, [X31+176]
	148 NotImplemented "Instruction LDUR not yet implemented."
	149 Add X0, X31, 240
	150 Move X1, X31
	151 Move [X31+240], V0
	152 Move [X31+248], V1
	153 Move [X24+108], V2
	154 Call RaycastHit.get_point, X0
	155 Move [X23], S0
	156 Move [X23+8], S1
	157 Move [X23+8], S2
	158 Move X1, [X25]
	159 Add X8, X31, 160
	160 Add X0, X31, 400
	161 Call Nullable`1<RaycastHit>.get_Value, X0
	162 Move V0, [X31+160]
	163 Move V1, [X31+176]
	164 NotImplemented "Instruction LDUR not yet implemented."
	165 Add X0, X31, 240
	166 Move X1, X31
	167 Move [X31+240], V0
	168 Move [X31+248], V1
	169 Move [X24+108], V2
	170 Call RaycastHit.get_normal, X0
	171 Move [X22], S0
	172 Move [X22+8], S1
	173 Move [X22+8], S2
	174 Move W8, [X31+396]
	175 Add X0, X31, 400
	176 Move [X20], W8
	177 Move X1, [X25]
	178 Move X20, [X21+48]
	179 Add X8, X31, 160
	180 Call Nullable`1<RaycastHit>.get_Value, X0
	181 Move V0, [X31+160]
	182 Move V1, [X31+176]
	183 NotImplemented "Instruction LDUR not yet implemented."
	184 Add X0, X31, 240
	185 Move X1, X31
	186 Move [X31+240], V0
	187 Move [X31+248], V1
	188 Move [X24+108], V2
	189 Call RaycastHit.get_collider, X0
	190 Compare X20, 0
	191 JumpIfEqual {205}
	192 Move X1, X0
	193 Add X2, X31, 288
	194 Move X0, X20
	195 Move X3, X31
	196 Call XRInteractionManager.TryGetInteractableForCollider, X0, X1, X2
	197 Move TEMP, X0
	198 And TEMP, TEMP, 1
	199 Compare TEMP, 1
	200 JumpIfNotEqual {204}
	201 Move X1, [X31+288]
	202 Move X0, X21
	203 Call XRBaseInteractor.IsHovering, X0, X1
	204 Move W8, W31
	205 Call 0x1C17F20

Method: System.Void UpdateUIModel(ref UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel model)

Disassembly:
	0x03B626DC B.MI 0x3B6279C
	0x03B626E0 ADRP X8, 0x5F8000
	0x03B626E4 LDR X8, [X8 + 0x7C0]
	0x03B626E8 LDR X0, [X8]
	0x03B626EC LDR W8, [X0 + 0xE0]
	0x03B626F0 CBNZ W8, 0x3B626F8
	0x03B626F4 BL 0x1C16DFC
	0x03B626F8 ADD X1, X31, 0x10
	0x03B626FC ADD X2, X31, 0x0
	0x03B62700 MOV X0, X21
	0x03B62704 BL 0x3B615D0
	0x03B62708 CBZ X19, 0x3B627C0
	0x03B6270C MOV X0, X19
	0x03B62710 MOV X1, X31
	0x03B62714 BL 0x3C3F58C
	0x03B62718 LDP S12, S13, [X31]
	0x03B6271C LDR V14, [X31 + 0x8]
	0x03B62720 LDR V15, [X20 + 0x304]
	0x03B62724 MOV X0, X31
	0x03B62728 MOV V9.16B, V0.16B
	0x03B6272C MOV V10.16B, V1.16B
	0x03B62730 MOV V11.16B, V2.16B
	0x03B62734 BL 0x3C3C714
	0x03B62738 FMUL S1, S15, S8
	0x03B6273C LDP S2, S3, [X31 + 0x10]
	0x03B62740 LDR V4, [X31 + 0x18]
	0x03B62744 FMUL S0, S1, S0
	0x03B62748 FMUL S1, S12, S0
	0x03B6274C FMUL S5, S13, S0
	0x03B62750 FMUL S0, S14, S0
	0x03B62754 FADD S1, S9, S1
	0x03B62758 FADD S5, S10, S5
	0x03B6275C FADD S6, S11, S0
	0x03B62760 FSUB S0, S1, S2
	0x03B62764 FSUB S7, S5, S3
	0x03B62768 FSUB S16, S6, S4
	0x03B6276C FMUL S0, S12, S0
	0x03B62770 FMUL S7, S13, S7
	0x03B62774 FMUL S16, S14, S16
	0x03B62778 FADD S0, S0, S7
	0x03B6277C FADD S0, S16, S0
	0x03B62780 FCMP S0, 0x0
	0x03B62784 FCSEL S0, S1, S2, GT
	0x03B62788 FCSEL S1, S5, S3, GT
	0x03B6278C FCSEL S2, S6, S4, GT
	0x03B62790 MOV X0, X19
	0x03B62794 MOV X1, X31
	0x03B62798 BL 0x3C3F62C
	0x03B6279C LDP X20, X19, [X31 + 0x80]
	0x03B627A0 LDP X22, X21, [X31 + 0x70]
	0x03B627A4 LDR X30, [X31 + 0x60]
	0x03B627A8 LDP D9, D8, [X31 + 0x50]
	0x03B627AC LDP D11, D10, [X31 + 0x40]
	0x03B627B0 LDP D13, D12, [X31 + 0x30]
	0x03B627B4 LDP D15, D14, [X31 + 0x20]
	0x03B627B8 ADD X31, X31, 0x90
	0x03B627BC RET
	0x03B627C0 BL 0x1C16F20
	0x03B627C4 SUB X31, X31, 0x70
	0x03B627C8 STP D15, D14, [X31 + 0x10]
	0x03B627CC STP D13, D12, [X31 + 0x20]
	0x03B627D0 STP D11, D10, [X31 + 0x30]
	0x03B627D4 STP D9, D8, [X31 + 0x40]
	0x03B627D8 STP X30, X21, [X31 + 0x50]
	0x03B627DC STP X20, X19, [X31 + 0x60]
	0x03B627E0 ADRP X20, 0x880000
	0x03B627E4 LDRB W8, [X20 + 0x9A2]
	0x03B627E8 MOV X19, X0
	0x03B627EC TBNZ X8, 0x0, 0x3B62810
	0x03B627F0 ADRP X0, 0x5F8000
	0x03B627F4 LDR X0, [X0 + 0xB08]
	0x03B627F8 BL 0x1C16CF4
	0x03B627FC ADRP X0, 0x5F8000
	0x03B62800 LDR X0, [X0 + 0xB10]
	0x03B62804 BL 0x1C16CF4
	0x03B62808 MOVZ W8, 0x1
	0x03B6280C STRB W8, [X20 + 0x9A2]
	0x03B62810 LDR X0, [X19 + 0x3A0]
	0x03B62814 STR W31, [X19 + 0x390]
	0x03B62818 STR W31, [X19 + 0x3AC]
	0x03B6281C CBZ X0, 0x3B62924
	0x03B62820 ADRP X21, 0x5F8000
	0x03B62824 LDR X21, [X21 + 0xB10]
	0x03B62828 MOVZ W20, 0x1
	0x03B6282C LDR W8, [X0 + 0x18]
	0x03B62830 CMP W20, W8
	0x03B62834 B.GE 0x3B6292C
	0x03B62838 LDR X2, [X21]
	0x03B6283C MOV W1, W31
	0x03B62840 BL 0x317B51C
	0x03B62844 LDR X0, [X19 + 0x3A0]
	0x03B62848 CBZ X0, 0x3B62924
	0x03B6284C LDR X2, [X21]
	0x03B62850 SUB W1, W20, 0x1
	0x03B62854 STR S2, [X31 + 0xC]
	0x03B62858 MOV V10.16B, V1.16B
	0x03B6285C MOV V9.16B, V0.16B
	0x03B62860 BL 0x317B51C
	0x03B62864 LDR X0, [X19 + 0x3A0]
	0x03B62868 CBZ X0, 0x3B62924
	0x03B6286C LDR X2, [X21]
	0x03B62870 MOV W1, W20
	0x03B62874 MOV V11.16B, V0.16B
	0x03B62878 MOV V12.16B, V1.16B
	0x03B6287C MOV V13.16B, V2.16B
	0x03B62880 BL 0x317B51C
	0x03B62884 MOV V14.16B, V0.16B
	0x03B62888 MOV V15.16B, V1.16B
	0x03B6288C MOV V8.16B, V2.16B
	0x03B62890 MOV V0.16B, V11.16B
	0x03B62894 MOV V1.16B, V12.16B
	0x03B62898 MOV V2.16B, V13.16B
	0x03B6289C MOV X0, X31
	0x03B628A0 BL 0x3887BE0
	0x03B628A4 MOV V11.16B, V0.16B
	0x03B628A8 MOV V12.16B, V1.16B
	0x03B628AC MOV V13.16B, V2.16B
	0x03B628B0 MOV V0.16B, V14.16B
	0x03B628B4 MOV V1.16B, V15.16B
	0x03B628B8 MOV V2.16B, V8.16B
	0x03B628BC MOV X0, X31
	0x03B628C0 BL 0x3887BE0
	0x03B628C4 MOV V15.16B, V2.16B
	0x03B628C8 LDR V2, [X31 + 0xC]
	0x03B628CC MOV V8.16B, V0.16B
	0x03B628D0 MOV V14.16B, V1.16B
	0x03B628D4 MOV V0.16B, V9.16B
	0x03B628D8 MOV V1.16B, V10.16B
	0x03B628DC MOV X0, X31
	0x03B628E0 BL 0x3887BE0
	0x03B628E4 STP S1, S2, [X31 + 0x4]
	0x03B628E8 STR S0, [X31]
	0x03B628EC MOV X0, X19
	0x03B628F0 MOV V0.16B, V11.16B
	0x03B628F4 MOV V1.16B, V12.16B
	0x03B628F8 MOV V2.16B, V13.16B
	0x03B628FC MOV V3.16B, V8.16B
	0x03B62900 MOV V4.16B, V14.16B
	0x03B62904 MOV V5.16B, V15.16B
	0x03B62908 BL 0x3B636A0
	0x03B6290C LDR W8, [X19 + 0x390]
	0x03B62910 CMP W8, 0x1
	0x03B62914 B.GE 0x3B62928
	0x03B62918 LDR X0, [X19 + 0x3A0]
	0x03B6291C ADD W20, W20, 0x1
	0x03B62920 CBNZ X0, 0x3B6282C
	0x03B62924 BL 0x1C16F20
	0x03B62928 STR W20, [X19 + 0x3AC]
	0x03B6292C LDP X20, X19, [X31 + 0x60]
	0x03B62930 LDP X30, X21, [X31 + 0x50]
	0x03B62934 LDP D9, D8, [X31 + 0x40]
	0x03B62938 LDP D11, D10, [X31 + 0x30]
	0x03B6293C LDP D13, D12, [X31 + 0x20]
	0x03B62940 LDP D15, D14, [X31 + 0x10]
	0x03B62944 ADD X31, X31, 0x70
	0x03B62948 RET
	0x03B6294C SUB X31, X31, 0xC0
	0x03B62950 STP D13, D12, [X31 + 0x60]
	0x03B62954 STP D11, D10, [X31 + 0x70]
	0x03B62958 STP D9, D8, [X31 + 0x80]
	0x03B6295C STP X30, X23, [X31 + 0x90]
	0x03B62960 STP X22, X21, [X31 + 0xA0]
	0x03B62964 STP X20, X19, [X31 + 0xB0]
	0x03B62968 ADRP X21, 0x880000
	0x03B6296C LDRB W8, [X21 + 0x99E]
	0x03B62970 MOV W20, W1
	0x03B62974 MOV X19, X0
	0x03B62978 TBNZ X8, 0x0, 0x3B629CC
	0x03B6297C ADRP X0, 0x5B9000
	0x03B62980 LDR X0, [X0 + 0x70]
	0x03B62984 BL 0x1C16CF4
	0x03B62988 ADRP X0, 0x597000
	0x03B6298C LDR X0, [X0 + 0x8C0]
	0x03B62990 BL 0x1C16CF4
	0x03B62994 ADRP X0, 0x5B9000
	0x03B62998 LDR X0, [X0 + 0x3C0]
	0x03B6299C BL 0x1C16CF4
	0x03B629A0 ADRP X0, 0x597000
	0x03B629A4 LDR X0, [X0 + 0x8C8]
	0x03B629A8 BL 0x1C16CF4
	0x03B629AC ADRP X0, 0x591000
	0x03B629B0 LDR X0, [X0 + 0x598]
	0x03B629B4 BL 0x1C16CF4
	0x03B629B8 ADRP X0, 0x5F8000
	0x03B629BC LDR X0, [X0 + 0x7C0]
	0x03B629C0 BL 0x1C16CF4
	0x03B629C4 MOVZ W8, 0x1
	0x03B629C8 STRB W8, [X21 + 0x99E]
	0x03B629CC MOV X0, X19
	0x03B629D0 MOV W1, W20

ISIL:
	001 Move [X31-96], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0x881000
	013 Move W8, [X21+2453]
	014 Move X20, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {43}
	020 Move X0, 0x596000
	021 Move X0, [X0+952]
	022 Call 0x1C17CF4
	023 Move X0, 0x596000
	024 Move X0, [X0+896]
	025 Call 0x1C17CF4
	026 Move X0, 0x5FA000
	027 Move X0, [X0+800]
	028 Call 0x1C17CF4
	029 Move X0, 0x5F9000
	030 Move X0, [X0+2824]
	031 Call 0x1C17CF4
	032 Move X0, 0x5F9000
	033 Move X0, [X0+2832]
	034 Call 0x1C17CF4
	035 Move X0, 0x5EC000
	036 Move X0, [X0+4072]
	037 Call 0x1C17CF4
	038 Move X0, 0x5FA000
	039 Move X0, [X0+600]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X21+2453], W8
	043 Move X22, 0x5FA000
	044 Move X22, [X22+600]
	045 Move X0, X19
	046 Move X1, X31
	047 Call Behaviour.get_isActiveAndEnabled, X0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {73}
	052 Move X8, [X19+928]
	053 Compare X8, 0
	054 JumpIfEqual {73}
	055 Move W8, [X19+764]
	056 Compare W8, 0
	057 JumpIfEqual {67}
	058 Move W8, [X19+765]
	059 Compare W8, 0
	060 JumpIfEqual {67}
	061 Move X0, X19
	062 Call XRBaseInteractor.get_hasSelection, X0
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfEqual {73}
	067 Move X0, X19
	068 Call XRInteractorExtensions.IsBlockedByInteractionWithinGroup, X0
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {94}
	073 Move X0, [X22]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X0, X20
	079 Move X20, [X31+80]
	080 Move X19, [X31+88]
	081 Move X22, [X31+64]
	082 Move X21, [X31+72]
	083 Move X24, [X31+48]
	084 Move X23, [X31+56]
	085 Move X30, [X31+32]
	086 Move X25, [X31+40]
	087 Move D9, [X31+16]
	088 Move D8, [X31+24]
	089 Move W1, W31
	090 Move X2, X31
	091 Move V10, [X31+96]
	092 Call TrackedDeviceModel.Reset, X0, X1
	093 Return 
	094 Move W8, [X19+856]
	095 Compare W8, 0
	096 JumpIfEqual {100}
	097 Move X21, [X19+672]
	098 Compare X21, 0
	099 JumpIfNotEqual {106}
	100 Move X0, X19
	101 Move X1, X31
	102 Call Component.get_transform, X0
	103 Move X21, X0
	104 Compare X21, 0
	105 JumpIfEqual {226}
	106 Move X0, X21
	107 Move X1, X31
	108 Call Transform.get_position, X0
	109 Move X0, [X22]
	110 Move V8, V0
	111 Move V9, V1
	112 Move V10, V2
	113 Move W8, [X0+224]
	114 Compare W8, 0
	115 JumpIfNotEqual {117}
	116 Call 0x1C17DFC
	117 Move X0, X20
	118 Move V0, V8
	119 Move V1, V9
	120 Move V2, V10
	121 Move X1, X31
	122 Call TrackedDeviceModel.set_position, X0, X1
	123 Move X0, X21
	124 Move X1, X31
	125 Call Transform.get_rotation, X0
	126 Move X0, X20
	127 Move X1, X31
	128 Call TrackedDeviceModel.set_orientation, X0, X1
	129 Move X8, [X19]
	130 Move X0, X19
	131 Move X9, [X8+1896]
	132 Move X1, [X8+1904]
	133 NotImplemented "Instruction BLR not yet implemented."
	134 And W1, W0, 1
	135 Move X0, X20
	136 Move X2, X31
	137 Call TrackedDeviceModel.set_select, X0, X1
	138 Move X0, X19
	139 Call XRBaseControllerInteractor.get_uiScrollValue, X0
	140 Move X0, X20
	141 Move X1, X31
	142 Call TrackedDeviceModel.set_scrollDelta, X0, X1
	143 Move W1, [X19+736]
	144 Move X0, X20
	145 Move X2, X31
	146 Call TrackedDeviceModel.set_raycastLayerMask, X0, X1
	147 Move X0, X20
	148 Move W1, W31
	149 Move X2, X31
	150 Call TrackedDeviceModel.set_interactionType, X0, X1
	151 Move X20, [X20+216]
	152 Compare X20, 0
	153 JumpIfEqual {226}
	154 Move W8, [X20+28]
	155 Move X0, X19
	156 Add W8, W8, 1
	157 Move [X20+24], W31
	158 Move [X20+28], W8
	159 Call XRRayInteractor.UpdateSamplePointsIfNecessary, X0
	160 Move X8, [X19+928]
	161 Compare X8, 0
	162 JumpIfEqual {226}
	163 Move W21, [X8+24]
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Move X8, 0x5FA000
	166 Move X8, [X8+800]
	167 Move X0, X20
	168 Move X1, [X8]
	169 Call List`1<Vector3>.get_Capacity, X0
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Move X8, 0x5EC000
	172 Move X8, [X8+4072]
	173 Move X0, X20
	174 Move W1, W21
	175 Move X2, [X8]
	176 Call List`1<Vector3>.set_Capacity, X0, X1
	177 Move X23, 0x5F9000
	178 Move X24, 0x596000
	179 Move X23, [X23+2832]
	180 Move X24, [X24+952]
	181 Move W22, W31
	182 Move W25, 12
	183 Move X0, [X19+928]
	184 Compare X0, 0
	185 JumpIfEqual {226}
	186 Move X2, [X23]
	187 Move W1, W22
	188 Call List`1<SamplePoint>.get_Item, X0, X1
	189 Move X0, X31
	190 Call float3.op_Implicit, X0
	191 Move W10, [X20+28]
	192 Move X8, [X20+16]
	193 Move X9, [X24]
	194 Add W10, W10, 1
	195 Move [X20+28], W10
	196 Compare X8, 0
	197 JumpIfEqual {226}
	198 NotImplemented "Instruction LDRSW not yet implemented."
	199 Move W11, [X8+24]
	200 NotImplemented "Instruction CMP not yet implemented."
	201 Add W9, W10, 1
	202 NotImplemented "Instruction MADD not yet implemented."
	203 Move [X20+24], W9
	204 Move [X8+32], S0
	205 Move [X8+40], S1
	206 Move [X8+40], S2
	207 Move X8, [X9+32]
	208 Move X0, X20
	209 Move X8, [X8+192]
	210 Move X1, [X8+112]
	211 Call List`1<Vector3>.AddWithResize, X0, X1
	212 Add W22, W22, 1
	213 NotImplemented "Instruction CMP not yet implemented."
	214 Move X20, [X31+80]
	215 Move X19, [X31+88]
	216 Move X22, [X31+64]
	217 Move X21, [X31+72]
	218 Move X24, [X31+48]
	219 Move X23, [X31+56]
	220 Move X30, [X31+32]
	221 Move X25, [X31+40]
	222 Move D9, [X31+16]
	223 Move D8, [X31+24]
	224 Move V10, [X31+96]
	225 Return 
	226 Call 0x1C17F20

Method: System.Boolean TryGetUIModel(out UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel model)

Disassembly:
	0x03B62A38 ADD X0, X31, 0x50
	0x03B62A3C MOV X1, X31
	0x03B62A40 BL 0x3E63D7C
	0x03B62A44 TBZ X0, 0x0, 0x3B62CF0
	0x03B62A48 LDR X0, [X19 + 0x470]
	0x03B62A4C CBZ X0, 0x3B632F8
	0x03B62A50 MOV X1, X31
	0x03B62A54 BL 0x3B34C50
	0x03B62A58 LDR X8, [X19 + 0x470]
	0x03B62A5C CBZ X8, 0x3B632F8
	0x03B62A60 ADRP X23, 0x597000
	0x03B62A64 LDR X23, [X23 + 0x8C8]
	0x03B62A68 MOV X20, X0
	0x03B62A6C LDR W22, [X8 + 0xC4]
	0x03B62A70 LDR V8, [X8 + 0xB8]
	0x03B62A74 LDR X0, [X23]
	0x03B62A78 MOV X21, X1
	0x03B62A7C LDR W9, [X0 + 0xE0]
	0x03B62A80 CBNZ W9, 0x3B62A88
	0x03B62A84 BL 0x1C16DFC
	0x03B62A88 ADD X3, X31, 0x4C
	0x03B62A8C MOV X0, X20
	0x03B62A90 MOV X1, X21
	0x03B62A94 MOV W2, W22
	0x03B62A98 MOV V0.16B, V8.16B
	0x03B62A9C MOV X4, X31
	0x03B62AA0 BL 0x3B851AC
	0x03B62AA4 LDR X0, [X19 + 0x470]
	0x03B62AA8 CBZ X0, 0x3B632F8
	0x03B62AAC MOV X1, X31
	0x03B62AB0 BL 0x3B34C50
	0x03B62AB4 LDR X8, [X19 + 0x470]
	0x03B62AB8 CBZ X8, 0x3B632F8
	0x03B62ABC LDR W2, [X8 + 0xC8]
	0x03B62AC0 LDR V0, [X8 + 0xB8]
	0x03B62AC4 ADD X3, X31, 0x48
	0x03B62AC8 MOV X4, X31
	0x03B62ACC BL 0x3B851AC
	0x03B62AD0 LDRB W8, [X31 + 0x4C]
	0x03B62AD4 LDRB W9, [X31 + 0x48]
	0x03B62AD8 ORR W9, W9, W8, 0x0
	0x03B62ADC ANDS W31, W9, 0xFF
	0x03B62AE0 B.EQ 0x3B62B30
	0x03B62AE4 LDRB W9, [X19 + 0x358]
	0x03B62AE8 CMP W8, 0x0
	0x03B62AEC FMOV S0, 1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x881000
	006 Move W8, [X21+2454]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x5FA000
	014 Move X0, [X0+600]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2454], W8
	018 Move X0, [X20+976]
	019 Compare X0, 0
	020 JumpIfEqual {29}
	021 Move X1, X19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X2, X31
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Call RegisteredUIInteractorCache.TryGetUIModel, X0, X1
	028 Return X0
	029 Move X20, 0x5FA000
	030 Move X20, [X20+600]
	031 Move X0, [X20]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X21, 0x881000
	037 Move W8, [X21+2477]
	038 Compare W8, 0
	039 JumpIfNotEqual {45}
	040 Move X0, 0x5FA000
	041 Move X0, [X0+600]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X21+2477], W8
	045 Move X0, [X20]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {51}
	049 Call 0x1C17DFC
	050 Move X0, [X20]
	051 Move X1, [X0+184]
	052 Move W2, 344
	053 Move X0, X19
	054 Call 0x3EB2B30
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move W0, W31
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 Return X0

Method: System.Boolean TryGetCurrent3DRaycastHit(out UnityEngine.RaycastHit raycastHit)

Disassembly:
	0x03B61908 ADRP X8, 0x5EC000
	0x03B6190C LDR X8, [X8 + 0xFE8]
	0x03B61910 MOV X0, X20
	0x03B61914 MOV W1, W21
	0x03B61918 LDR X2, [X8]
	0x03B6191C BL 0x30CBD00
	0x03B61920 ADRP X23, 0x5F9000

ISIL:
	001 Move [X31-16], X30
	002 Add X2, X31, 12
	003 Move [X31+12], W31
	004 Call XRRayInteractor.TryGetCurrent3DRaycastHit, X0, X1, X2
	005 And W0, W0, 1
	006 Move X30, [X31+16]
	007 Return X0

Method: System.Boolean TryGetCurrent3DRaycastHit(out UnityEngine.RaycastHit raycastHit, out System.Int32 raycastEndpointIndex)

Disassembly:
	0x03B62AF0 FMOV S1, -1
	0x03B62AF4 FCSEL S8, S1, S0, EQ
	0x03B62AF8 CBZ W9, 0x3B62B04
	0x03B62AFC LDR X1, [X19 + 0x2A0]
	0x03B62B00 B 0x3B62B14
	0x03B62B04 MOV X0, X19
	0x03B62B08 MOV X1, X31
	0x03B62B0C BL 0x3C32E90
	0x03B62B10 MOV X1, X0
	0x03B62B14 LDR X8, [X19]
	0x03B62B18 LDR X2, [X19 + 0x50]
	0x03B62B1C MOV X0, X19
	0x03B62B20 MOV V0.16B, V8.16B
	0x03B62B24 LDR X9, [X8 + 0x938]
	0x03B62B28 LDR X3, [X8 + 0x940]
	0x03B62B2C BLR X9
	0x03B62B30 LDR W8, [X19 + 0x310]
	0x03B62B34 CMP W8, 0x1
	0x03B62B38 B.EQ 0x3B62C00
	0x03B62B3C CBNZ W8, 0x3B62CF0
	0x03B62B40 LDR X0, [X19 + 0x470]
	0x03B62B44 CBZ X0, 0x3B632F8
	0x03B62B48 MOV X1, X31
	0x03B62B4C BL 0x3B34C50
	0x03B62B50 LDR X8, [X19 + 0x470]
	0x03B62B54 CBZ X8, 0x3B632F8
	0x03B62B58 MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+912]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move X9, [X0+904]
	005 Compare X9, 0
	006 JumpIfEqual {29}
	007 Move W10, [X9+24]
	008 Compare W10, 0
	009 JumpIfEqual {30}
	010 Move W10, [X9+72]
	011 Move X11, [X9+64]
	012 Move V1, [X9+32]
	013 Move V0, [X9+48]
	014 Move [X1+40], W10
	015 Move [X1+32], X11
	016 Move [X1], V1
	017 Move [X1+8], V0
	018 Move W9, [X0+940]
	019 Move W9, W31
	020 NotImplemented "Instruction MOVI not yet implemented."
	021 Move [X1+28], V0
	022 Move [X1], V0
	023 Move [X1+8], V0
	024 NotImplemented "Instruction CMP not yet implemented."
	025 NotImplemented "Instruction CSET not yet implemented."
	026 Move [X2], W9
	027 Move X30, [X31+16]
	028 Return X0
	029 Call 0x1C17F20
	030 Call 0x1C17F28

Method: System.Boolean TryGetCurrentUIRaycastResult(out UnityEngine.EventSystems.RaycastResult raycastResult)

Disassembly:
	0x03B61924 ADRP X24, 0x596000
	0x03B61928 LDR X23, [X23 + 0xB10]
	0x03B6192C LDR X24, [X24 + 0x3B8]
	0x03B61930 MOV W22, W31
	0x03B61934 MOVZ W25, 0xC
	0x03B61938 LDR X0, [X19 + 0x3A0]
	0x03B6193C CBZ X0, 0x3B619D0

ISIL:
	001 Move [X31-16], X30
	002 Add X2, X31, 12
	003 Move [X31+12], W31
	004 Call XRRayInteractor.TryGetCurrentUIRaycastResult, X0, X1, X2
	005 And W0, W0, 1
	006 Move X30, [X31+16]
	007 Return X0

Method: System.Boolean TryGetCurrentUIRaycastResult(out UnityEngine.EventSystems.RaycastResult raycastResult, out System.Int32 raycastEndpointIndex)

Disassembly:
	0x03B62B5C LDR X0, [X23]
	0x03B62B60 LDR W22, [X8 + 0xBC]
	0x03B62B64 LDR V8, [X8 + 0xB8]
	0x03B62B68 MOV X21, X1
	0x03B62B6C LDR W9, [X0 + 0xE0]
	0x03B62B70 CBNZ W9, 0x3B62B78
	0x03B62B74 BL 0x1C16DFC
	0x03B62B78 ADD X3, X31, 0x44
	0x03B62B7C MOV X0, X20
	0x03B62B80 MOV X1, X21
	0x03B62B84 MOV W2, W22
	0x03B62B88 MOV V0.16B, V8.16B
	0x03B62B8C MOV X4, X31
	0x03B62B90 BL 0x3B851AC
	0x03B62B94 LDR X0, [X19 + 0x470]
	0x03B62B98 CBZ X0, 0x3B632F8
	0x03B62B9C MOV X1, X31
	0x03B62BA0 BL 0x3B34C50
	0x03B62BA4 LDR X8, [X19 + 0x470]
	0x03B62BA8 CBZ X8, 0x3B632F8
	0x03B62BAC LDR W2, [X8 + 0xC0]
	0x03B62BB0 LDR V0, [X8 + 0xB8]
	0x03B62BB4 ADD X3, X31, 0x40
	0x03B62BB8 MOV X4, X31
	0x03B62BBC BL 0x3B851AC
	0x03B62BC0 LDRB W8, [X31 + 0x44]
	0x03B62BC4 LDRB W9, [X31 + 0x40]
	0x03B62BC8 ORR W9, W9, W8, 0x0
	0x03B62BCC ANDS W31, W9, 0xFF
	0x03B62BD0 B.EQ 0x3B62CF0
	0x03B62BD4 LDR X9, [X19]
	0x03B62BD8 CMP W8, 0x0
	0x03B62BDC LDR X1, [X19 + 0x50]
	0x03B62BE0 FMOV S0, -1
	0x03B62BE4 LDR X8, [X9 + 0x918]
	0x03B62BE8 LDR X2, [X9 + 0x920]
	0x03B62BEC FMOV S1, 1
	0x03B62BF0 FCSEL S0, S1, S0, EQ
	0x03B62BF4 MOV X0, X19
	0x03B62BF8 BLR X8
	0x03B62BFC B 0x3B62CF0
	0x03B62C00 LDR X0, [X19 + 0x470]
	0x03B62C04 CBZ X0, 0x3B632F8
	0x03B62C08 MOV X1, X31
	0x03B62C0C BL 0x3B34C50
	0x03B62C10 LDR X8, [X19 + 0x470]
	0x03B62C14 CBZ X8, 0x3B632F8
	0x03B62C18 MOV X20, X0
	0x03B62C1C LDR X0, [X23]
	0x03B62C20 LDR W22, [X8 + 0xCC]
	0x03B62C24 MOV X21, X1
	0x03B62C28 LDR W9, [X0 + 0xE0]
	0x03B62C2C CBNZ W9, 0x3B62C34
	0x03B62C30 BL 0x1C16DFC
	0x03B62C34 ADD X3, X31, 0x38
	0x03B62C38 MOV X0, X20
	0x03B62C3C MOV X1, X21
	0x03B62C40 MOV W2, W22
	0x03B62C44 MOV X4, X31
	0x03B62C48 BL 0x3B857E4
	0x03B62C4C TBZ X0, 0x0, 0x3B62CF0
	0x03B62C50 ADRP X8, 0x591000
	0x03B62C54 LDR X8, [X8 + 0x598]
	0x03B62C58 LDR X20, [X19 + 0x308]
	0x03B62C5C LDR X0, [X8]
	0x03B62C60 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 480
	002 Move [X31+432], X29
	003 Move [X31+440], X30
	004 Move [X31+448], X22
	005 Move [X31+456], X21
	006 Move [X31+464], X20
	007 Move [X31+472], X19
	008 Move X22, 0x881000
	009 Move W8, [X22+2455]
	010 Move X19, X2
	011 Move X20, X1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x5FA000
	018 Move X0, [X0+600]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+2455], W8
	022 Add X0, X31, 88
	023 Move W2, 344
	024 Move W1, W31
	025 Call 0x3EB2B10
	026 NotImplemented "Instruction MOVI not yet implemented."
	027 Add X1, X31, 88
	028 Move X0, X21
	029 Move [X31+48], V0
	030 Move [X31+56], V0
	031 Move [X31+16], V0
	032 Move [X31+24], V0
	033 Move [X31], V0
	034 Call XRRayInteractor.TryGetUIModel, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {70}
	039 Move X22, 0x5FA000
	040 Move X22, [X22+600]
	041 Move X0, [X22]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Add X8, X31, 88
	047 Add X21, X8, 224
	048 Add X0, X31, 0
	049 Move W2, 80
	050 Move X1, X21
	051 Call 0x3EB2AC0
	052 Add X0, X31, 0
	053 Move X1, X31
	054 Call RaycastResult.get_isValid, X0
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {70}
	059 Move X0, [X22]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move W2, 80
	065 Move X0, X20
	066 Move X1, X21
	067 Call 0x3EB2AC0
	068 Move W8, [X31+392]
	069 Move W0, 1
	070 Move W8, W31
	071 Move W0, W31
	072 NotImplemented "Instruction MOVI not yet implemented."
	073 Move [X20+48], V0
	074 Move [X20+56], V0
	075 Move [X20+16], V0
	076 Move [X20+24], V0
	077 Move [X20], V0
	078 Move [X19], W8
	079 Move X20, [X31+464]
	080 Move X19, [X31+472]
	081 Move X22, [X31+448]
	082 Move X21, [X31+456]
	083 Move X29, [X31+432]
	084 Move X30, [X31+440]
	085 Add X31, X31, 480
	086 Return X0

Method: System.Boolean TryGetCurrentRaycast(out System.Nullable`1<UnityEngine.RaycastHit> raycastHit, out System.Int32 raycastHitIndex, out System.Nullable`1<UnityEngine.EventSystems.RaycastResult> uiRaycastHit, out System.Int32 uiRaycastHitIndex, out System.Boolean isUIHitClosest)

Disassembly:
	0x03B4C59C LDR X8, [X20]
	0x03B4C5A0 LDR X9, [X31 + 0x30]
	0x03B4C5A4 LDR W10, [X31 + 0x38]
	0x03B4C5A8 CMP X29, X28
	0x03B4C5AC ADD X8, X8, X19
	0x03B4C5B0 ADD X8, X8, X24
	0x03B4C5B4 STR W10, [X8 + 0x8]
	0x03B4C5B8 STR X9, [X8]
	0x03B4C5BC ADD X8, X29, 0x1
	0x03B4C5C0 B.CS 0x3B4C5D8
	0x03B4C5C4 ADD X9, X25, X29
	0x03B4C5C8 CMP X9, X26
	0x03B4C5CC ADD X24, X24, 0xC
	0x03B4C5D0 MOV X29, X8
	0x03B4C5D4 B.LT 0x3B4C4DC
	0x03B4C5D8 LDR X9, [X31 + 0x8]
	0x03B4C5DC ADD W8, W9, W8
	0x03B4C5E0 SUB W0, W8, 0x1
	0x03B4C5E4 B 0x3B4C614
	0x03B4C5E8 LDR X8, [X20]
	0x03B4C5EC LDR W11, [X31 + 0x38]
	0x03B4C5F0 LDR X12, [X31 + 0x30]
	0x03B4C5F4 LDR X0, [X31 + 0x8]
	0x03B4C5F8 ADD W9, W25, W29
	0x03B4C5FC MOVZ W10, 0xC
	0x03B4C600 SUB W9, W9, 0x1
	0x03B4C604 UMADDL X8, X9, X10, X8
	0x03B4C608 STR W11, [X8 + 0x8]
	0x03B4C60C STR X12, [X8]
	0x03B4C610 ADD W0, W0, W29
	0x03B4C614 LDP X20, X19, [X31 + 0xB0]
	0x03B4C618 LDP X22, X21, [X31 + 0xA0]
	0x03B4C61C LDP X24, X23, [X31 + 0x90]
	0x03B4C620 LDP X26, X25, [X31 + 0x80]
	0x03B4C624 LDP X28, X27, [X31 + 0x70]
	0x03B4C628 LDP X29, X30, [X31 + 0x60]
	0x03B4C62C LDP D9, D8, [X31 + 0x50]
	0x03B4C630 ADD X31, X31, 0xC0
	0x03B4C634 RET
	0x03B4C638 SUB X31, X31, 0x90
	0x03B4C63C STP D15, D14, [X31 + 0x10]
	0x03B4C640 STP D13, D12, [X31 + 0x20]
	0x03B4C644 STP D11, D10, [X31 + 0x30]
	0x03B4C648 STP D9, D8, [X31 + 0x40]
	0x03B4C64C STP X30, X25, [X31 + 0x50]
	0x03B4C650 STP X24, X23, [X31 + 0x60]
	0x03B4C654 STP X22, X21, [X31 + 0x70]
	0x03B4C658 STP X20, X19, [X31 + 0x80]
	0x03B4C65C ADRP X24, 0x895000
	0x03B4C660 LDR V9, [X3]
	0x03B4C664 LDR V11, [X3 + 0x8]
	0x03B4C668 LDR V10, [X2]
	0x03B4C66C LDRB W8, [X24 + 0x585]
	0x03B4C670 LDR V12, [X2 + 0x8]
	0x03B4C674 MOV X21, X4
	0x03B4C678 MOV X19, X3
	0x03B4C67C MOV X20, X2
	0x03B4C680 MOV X22, X1
	0x03B4C684 MOV W23, W0
	0x03B4C688 MOV V8.16B, V0.16B
	0x03B4C68C CBNZ W8, 0x3B4C6A4
	0x03B4C690 ADRP X0, 0x5A7000
	0x03B4C694 LDR X0, [X0 + 0x5A8]
	0x03B4C698 BL 0x1C16CF4
	0x03B4C69C MOVZ W8, 0x1
	0x03B4C6A0 STRB W8, [X24 + 0x585]
	0x03B4C6A4 ADRP X25, 0x5A7000
	0x03B4C6A8 LDR X25, [X25 + 0x5A8]
	0x03B4C6AC FSUB V10.2S, V9.2S, V10.2S
	0x03B4C6B0 FSUB S9, S11, S12
	0x03B4C6B4 LDR X0, [X25]
	0x03B4C6B8 LDR W8, [X0 + 0xE0]
	0x03B4C6BC CBNZ W8, 0x3B4C6C4
	0x03B4C6C0 BL 0x1C16DFC
	0x00000000 INVALID
	0x03B4C6C8 FMUL S0, S9, S9
	0x03B4C6CC FADDP S1, V1.2S

ISIL:
	001 Subtract X31, X31, 320
	002 Move [X31+224], X29
	003 Move [X31+240], X30
	004 Move [X31+248], X27
	005 Move [X31+256], X26
	006 Move [X31+264], X25
	007 Move [X31+272], X24
	008 Move [X31+280], X23
	009 Move [X31+288], X22
	010 Move [X31+296], X21
	011 Move [X31+304], X20
	012 Move [X31+312], X19
	013 Move X27, 0x897000
	014 Move X26, 0x60F000
	015 Move X25, 0x60F000
	016 Move W8, [X27+2456]
	017 Move X26, [X26+2640]
	018 Move X25, [X25+2648]
	019 Move X19, X5
	020 Move X20, X4
	021 Move X22, X3
	022 Move X23, X2
	023 Move X24, X1
	024 Move X21, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {37}
	029 Move X0, 0x60F000
	030 Move X0, [X0+2640]
	031 Call 0x1C17CF4
	032 Move X0, 0x60F000
	033 Move X0, [X0+2648]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X27+2456], W8
	037 NotImplemented "Instruction MOVI not yet implemented."
	038 Add X8, X21, 988
	039 Move [X31+112], V0
	040 Move [X31+120], V0
	041 Move [X31+6], V0
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 Move V2, [X8]
	044 Move V1, [X8+16]
	045 Move X2, [X26]
	046 Add X0, X31, 96
	047 Add X1, X31, 0
	048 Move [X31+28], V0
	049 Move [X31], V2
	050 Move [X31+8], V1
	051 Call Nullable`1<RaycastHit>..ctor, X0, X1
	052 Move V1, [X31+112]
	053 Move V0, [X31+128]
	054 Move V2, [X31+6]
	055 Add X1, X21, 1032
	056 Add X0, X31, 144
	057 Move [X24+16], V1
	058 Move [X24+24], V0
	059 Move [X24], V2
	060 Move W8, [X21+940]
	061 NotImplemented "Instruction MOVI not yet implemented."
	062 Move W2, 80
	063 Move [X23], W8
	064 Move X23, [X25]
	065 Move [X31+80], X31
	066 Move [X31+48], V0
	067 Move [X31+56], V0
	068 Move [X31+16], V0
	069 Move [X31+24], V0
	070 Move [X31], V0
	071 Call 0x3EB2AC0
	072 Add X0, X31, 0
	073 Add X1, X31, 144
	074 Move X2, X23
	075 Call Nullable`1<RaycastResult>..ctor, X0, X1
	076 Add X1, X31, 0
	077 Move W2, 88
	078 Move X0, X22
	079 Call 0x3EB2AC0
	080 Move W8, [X21+944]
	081 Move X24, [X31+272]
	082 Move X23, [X31+280]
	083 Move X26, [X31+256]
	084 Move X25, [X31+264]
	085 Move X30, [X31+240]
	086 Move X27, [X31+248]
	087 Move [X20], W8
	088 Move W8, [X21+1112]
	089 Move X29, [X31+224]
	090 Move [X19], W8
	091 Move W0, [X21+984]
	092 Move X20, [X31+304]
	093 Move X19, [X31+312]
	094 Move X22, [X31+288]
	095 Move X21, [X31+296]
	096 Add X31, X31, 320
	097 Return X0

Method: System.Void CacheRaycastHit()

Disassembly:
	0x03B62C64 CBNZ W8, 0x3B62C6C
	0x03B62C68 BL 0x1C16DFC
	0x03B62C6C MOV X0, X20
	0x03B62C70 MOV X1, X31
	0x03B62C74 MOV X2, X31
	0x03B62C78 BL 0x3C354F8
	0x03B62C7C TBZ X0, 0x0, 0x3B62C8C
	0x03B62C80 LDR X0, [X19 + 0x308]
	0x03B62C84 CBNZ X0, 0x3B62CAC
	0x03B62C88 B 0x3B632F8
	0x03B62C8C LDRB W8, [X19 + 0x358]
	0x03B62C90 CBZ W8, 0x3B62C9C
	0x03B62C94 LDR X0, [X19 + 0x2A0]
	0x03B62C98 B 0x3B62CA8
	0x03B62C9C MOV X0, X19
	0x03B62CA0 MOV X1, X31
	0x03B62CA4 BL 0x3C32E90
	0x03B62CA8 CBZ X0, 0x3B632F8
	0x03B62CAC MOV X1, X31
	0x03B62CB0 BL 0x3C3DEB4
	0x03B62CB4 LDR X8, [X19]
	0x03B62CB8 MOV V4.16B, V0.16B
	0x03B62CBC MOV V5.16B, V1.16B
	0x03B62CC0 LDR X1, [X19 + 0x50]
	0x03B62CC4 LDP S0, S1, [X31 + 0x38]
	0x03B62CC8 LDR X9, [X8 + 0x928]
	0x03B62CCC LDR X2, [X8 + 0x930]
	0x03B62CD0 MOV V6.16B, V2.16B
	0x03B62CD4 MOV V7.16B, V3.16B
	0x03B62CD8 MOV X0, X19
	0x03B62CDC MOV V2.16B, V4.16B
	0x03B62CE0 MOV V3.16B, V5.16B
	0x03B62CE4 MOV V4.16B, V6.16B
	0x03B62CE8 MOV V5.16B, V7.16B
	0x03B62CEC BLR X9
	0x03B62CF0 LDRB W8, [X19 + 0x480]
	0x03B62CF4 CBZ W8, 0x3B62FC0
	0x03B62CF8 LDR X8, [X19 + 0x468]
	0x03B62CFC CBZ X8, 0x3B632F8
	0x03B62D00 LDR X9, [X8 + 0x220]
	0x03B62D04 LDR V0, [X8 + 0x21]
	0x03B62D08 ADD X0, X31, 0x20
	0x03B62D0C MOV X1, X31
	0x03B62D10 STR X9, [X31 + 0x30]
	0x03B62D14 STR V0, [X31 + 0x2]
	0x03B62D18 BL 0x3745120
	0x03B62D1C ADRP X21, 0x5F8000
	0x03B62D20 LDR X21, [X21 + 0x7C0]
	0x03B62D24 MOV X20, X0
	0x03B62D28 LDR X8, [X21]
	0x03B62D2C LDR W9, [X8 + 0xE0]
	0x03B62D30 CBNZ W9, 0x3B62D3C
	0x03B62D34 MOV X0, X8
	0x03B62D38 BL 0x1C16DFC
	0x03B62D3C CBZ X20, 0x3B62D5C
	0x03B62D40 MOV X0, X20
	0x03B62D44 MOV X1, X31
	0x03B62D48 BL 0x3734AB8
	0x03B62D4C TBZ X0, 0x0, 0x3B62D5C
	0x03B62D50 LDRB W8, [X19 + 0x35A]
	0x03B62D54 EOR W8, W8, 0x1
	0x03B62D58 STRB W8, [X19 + 0x35A]
	0x03B62D5C LDRB W8, [X19 + 0x35A]
	0x03B62D60 CBZ W8, 0x3B62DCC
	0x03B62D64 LDR W8, [X19 + 0x350]
	0x03B62D68 CMP W8, 0x1
	0x03B62D6C B.NE 0x3B62FC0
	0x03B62D70 LDR X8, [X19 + 0x468]
	0x03B62D74 CBZ X8, 0x3B632F8
	0x03B62D78 ADD X8, X8, 0x228
	0x03B62D7C LDR X9, [X8 + 0x10]
	0x03B62D80 LDR V0, [X8]
	0x03B62D84 ADD X0, X31, 0x20
	0x03B62D88 MOV X1, X31
	0x03B62D8C STR X9, [X31 + 0x30]
	0x03B62D90 STR V0, [X31 + 0x2]
	0x03B62D94 BL 0x3745120
	0x03B62D98 LDR X8, [X21]
	0x03B62D9C MOV X20, X0
	0x03B62DA0 LDR W9, [X8 + 0xE0]
	0x03B62DA4 CBNZ W9, 0x3B62DB0
	0x03B62DA8 MOV X0, X8
	0x03B62DAC BL 0x1C16DFC
	0x03B62DB0 ADD X1, X31, 0x0
	0x03B62DB4 MOV X0, X20
	0x03B62DB8 BL 0x3B62260
	0x03B62DBC TBZ X0, 0x0, 0x3B62FC0
	0x03B62DC0 LDR V0, [X31 + 0x4]
	0x03B62DC4 STR S0, [X19 + 0x354]
	0x03B62DC8 B 0x3B62FC0
	0x03B62DCC LDR W8, [X19 + 0x310]
	0x03B62DD0 CMP W8, 0x1
	0x03B62DD4 B.EQ 0x3B62E4C
	0x03B62DD8 CBNZ W8, 0x3B62F34
	0x03B62DDC LDR X8, [X19 + 0x468]
	0x03B62DE0 CBZ X8, 0x3B632F8
	0x03B62DE4 ADD X8, X8, 0x1C8
	0x03B62DE8 LDR X9, [X8 + 0x10]
	0x03B62DEC LDR V0, [X8]
	0x03B62DF0 ADD X0, X31, 0x20
	0x03B62DF4 MOV X1, X31
	0x03B62DF8 STR X9, [X31 + 0x30]
	0x03B62DFC STR V0, [X31 + 0x2]
	0x03B62E00 BL 0x3745120
	0x03B62E04 LDR X8, [X21]
	0x03B62E08 MOV X20, X0
	0x03B62E0C LDR W9, [X8 + 0xE0]
	0x03B62E10 CBNZ W9, 0x3B62E1C
	0x03B62E14 MOV X0, X8
	0x03B62E18 BL 0x1C16DFC
	0x03B62E1C ADD X1, X31, 0x10
	0x03B62E20 MOV X0, X20
	0x03B62E24 BL 0x3B62260
	0x03B62E28 TBZ X0, 0x0, 0x3B62F34
	0x03B62E2C LDR X8, [X19]
	0x03B62E30 LDR X1, [X19 + 0x50]
	0x03B62E34 LDR V0, [X31 + 0x10]
	0x03B62E38 MOV X0, X19
	0x03B62E3C LDR X9, [X8 + 0x918]
	0x03B62E40 LDR X2, [X8 + 0x920]
	0x03B62E44 BLR X9
	0x03B62E48 B 0x3B62F34
	0x03B62E4C LDR X8, [X19 + 0x468]
	0x03B62E50 CBZ X8, 0x3B632F8
	0x03B62E54 LDR X9, [X8 + 0x1F0]
	0x03B62E58 LDR V0, [X8 + 0x1E]
	0x03B62E5C ADD X0, X31, 0x20
	0x03B62E60 MOV X1, X31
	0x03B62E64 STR X9, [X31 + 0x30]
	0x03B62E68 STR V0, [X31 + 0x2]
	0x03B62E6C BL 0x3745120
	0x03B62E70 LDR X8, [X21]
	0x03B62E74 MOV X20, X0
	0x03B62E78 LDR W9, [X8 + 0xE0]
	0x03B62E7C CBNZ W9, 0x3B62E88
	0x03B62E80 MOV X0, X8
	0x03B62E84 BL 0x1C16DFC
	0x03B62E88 ADD X1, X31, 0x8
	0x03B62E8C MOV X0, X20
	0x03B62E90 BL 0x3B62260
	0x03B62E94 TBZ X0, 0x0, 0x3B62F34
	0x03B62E98 ADRP X8, 0x591000
	0x03B62E9C LDR X8, [X8 + 0x598]
	0x03B62EA0 LDR X20, [X19 + 0x308]
	0x03B62EA4 LDR X0, [X8]
	0x03B62EA8 LDR W8, [X0 + 0xE0]
	0x03B62EAC CBNZ W8, 0x3B62EB4
	0x03B62EB0 BL 0x1C16DFC
	0x03B62EB4 MOV X0, X20
	0x03B62EB8 MOV X1, X31
	0x03B62EBC MOV X2, X31
	0x03B62EC0 BL 0x3C354F8
	0x03B62EC4 TBZ X0, 0x0, 0x3B62ED0
	0x03B62EC8 LDR X0, [X19 + 0x308]
	0x03B62ECC B 0x3B62EEC
	0x03B62ED0 LDRB W8, [X19 + 0x358]
	0x03B62ED4 CBZ W8, 0x3B62EE0
	0x03B62ED8 LDR X0, [X19 + 0x2A0]
	0x03B62EDC B 0x3B62EEC
	0x03B62EE0 MOV X0, X19
	0x03B62EE4 MOV X1, X31
	0x03B62EE8 BL 0x3C32E90
	0x03B62EEC CBZ X0, 0x3B632F8
	0x03B62EF0 MOV X1, X31
	0x03B62EF4 BL 0x3C3DEB4
	0x03B62EF8 LDR X8, [X19]
	0x03B62EFC MOV V4.16B, V0.16B
	0x03B62F00 MOV V5.16B, V1.16B
	0x03B62F04 LDR X1, [X19 + 0x50]
	0x03B62F08 LDP S0, S1, [X31 + 0x8]
	0x03B62F0C LDR X9, [X8 + 0x928]
	0x03B62F10 LDR X2, [X8 + 0x930]
	0x03B62F14 MOV V6.16B, V2.16B
	0x03B62F18 MOV V7.16B, V3.16B
	0x03B62F1C MOV X0, X19
	0x03B62F20 MOV V2.16B, V4.16B
	0x03B62F24 MOV V3.16B, V5.16B
	0x03B62F28 MOV V4.16B, V6.16B
	0x03B62F2C MOV V5.16B, V7.16B

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+144], D8
	003 Move [X31+152], X30
	004 Move [X31+160], X22
	005 Move [X31+168], X21
	006 Move [X31+176], X20
	007 Move [X31+184], X19
	008 Move X20, 0x881000
	009 Move W8, [X20+2457]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x5F9000
	016 Move X0, [X0+2264]
	017 Call 0x1C17CF4
	018 Move X0, 0x5F9000
	019 Move X0, [X0+2824]
	020 Call 0x1C17CF4
	021 Move X0, 0x5F9000
	022 Move X0, [X0+2832]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2457], W8
	026 NotImplemented "Instruction MOVI not yet implemented."
	027 Add X20, X19, 988
	028 Add X1, X31, 96
	029 Add X2, X31, 92
	030 Move X0, X19
	031 Move [X31+92], W31
	032 Move [X31+124], V0
	033 Move [X31+96], V0
	034 Move [X31+104], V0
	035 Move [X31+48], V0
	036 Move [X31+56], V0
	037 Move [X31+16], V0
	038 Move [X31+24], V0
	039 Move [X31], V0
	040 Move [X19+984], W31
	041 Move [X19+840], X31
	042 Move [X19+1120], X31
	043 Move [X20], V0
	044 Move [X20+8], V0
	045 Move [X20+32], V0
	046 Move [X20+40], V0
	047 Move [X20+64], V0
	048 Move [X20+72], V0
	049 Move [X20+6], V0
	050 Move [X20+109], V0
	051 Call XRRayInteractor.TryGetCurrent3DRaycastHit, X0, X1, X2
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {69}
	056 NotImplemented "Instruction LDUR not yet implemented."
	057 Move V2, [X31+96]
	058 Move V1, [X31+112]
	059 Add X0, X31, 96
	060 Move X1, X31
	061 Move [X20+28], V0
	062 Move [X20], V2
	063 Move [X20+8], V1
	064 Move W21, [X31+92]
	065 Call RaycastHit.get_distance, X0
	066 Move V8, V0
	067 Move W8, 1
	068 Move [X19+984], W8
	069 Move TEMP, 0x80800000
	070 Not TEMP
	071 Move W8, TEMP
	072 Move TEMP, 0x80000000
	073 Not TEMP
	074 Move W21, TEMP
	075 Move S8, W8
	076 Add X2, X19, 944
	077 Add X1, X31, 0
	078 Move X0, X19
	079 Call XRRayInteractor.TryGetCurrentUIRaycastResult, X0, X1, X2
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {94}
	084 Add X0, X19, 1032
	085 Add X1, X31, 0
	086 Move W2, 80
	087 Call 0x3EB2AC0
	088 Move W9, [X19+944]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 NotImplemented "Instruction CSEL not yet implemented."
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move W9, 1
	093 Move X8, X19
	094 Move W8, [X19+984]
	095 Compare W8, 0
	096 JumpIfNotEqual {124}
	097 Move X0, X19
	098 Call XRRayInteractor.UpdateSamplePointsIfNecessary, X0
	099 Move X0, [X19+928]
	100 Compare X0, 0
	101 JumpIfEqual {207}
	102 Move X9, 0x5F9000
	103 Move W8, [X0+24]
	104 Move X9, [X9+2832]
	105 Subtract W1, W8, 1
	106 Move X2, [X9]
	107 Call List`1<SamplePoint>.get_Item, X0, X1
	108 Move X0, X31
	109 Call float3.op_Implicit, X0
	110 Move [X19+824], S0
	111 Move [X19+828], S1
	112 Move [X19+832], S2
	113 Move W9, W31
	114 Move X8, X19
	115 Move V0, [X31+16]
	116 NotImplemented "Instruction FCMP not yet implemented."
	117 NotImplemented "Instruction CSET not yet implemented."
	118 Move W9, W31
	119 Compare X8, 0
	120 JumpIfEqual {207}
	121 Move [X8+1112], W9
	122 Move W8, 1
	123 Move [X19+984], W8
	124 Move W8, [X19+1112]
	125 Compare W8, 0
	126 JumpIfEqual {137}
	127 Add X8, X19, 1032
	128 Move X0, [X19+1032]
	129 NotImplemented "Instruction LDUR not yet implemented."
	130 Move V1, [X8+52]
	131 Move [X19+824], D0
	132 Move [X19+832], S1
	133 Compare X0, 0
	134 JumpIfEqual {207}
	135 Move X1, X31
	136 Call GameObject.get_transform, X0
	137 Move X0, X20
	138 Move X1, X31
	139 Call RaycastHit.get_point, X0
	140 Move X21, [X19+48]
	141 Move X0, X20
	142 Move X1, X31
	143 Move [X19+824], S0
	144 Move [X19+828], S1
	145 Move [X19+832], S2
	146 Call RaycastHit.get_collider, X0
	147 Compare X21, 0
	148 JumpIfEqual {207}
	149 Add X22, X19, 1120
	150 Move X1, X0
	151 Move X0, X21
	152 Move X2, X22
	153 Move X3, X31
	154 Call XRInteractionManager.TryGetInteractableForCollider, X0, X1, X2
	155 Move TEMP, X0
	156 And TEMP, TEMP, 1
	157 Compare TEMP, 1
	158 JumpIfNotEqual {179}
	159 Move X20, [X22]
	160 Compare X20, 0
	161 JumpIfEqual {207}
	162 Move X10, 0x5F9000
	163 Move X8, [X20]
	164 Move X10, [X10+2264]
	165 Move W21, W0
	166 NotImplemented "Instruction LDRH not yet implemented."
	167 Move X1, [X10]
	168 Compare X9, 0
	169 JumpIfEqual {176}
	170 Move X10, [X8+176]
	171 Add X10, X10, 8
	172 NotImplemented "Instruction LDUR not yet implemented."
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Subtract X9, X9, 1
	175 Add X10, X10, 16
	176 Move W2, 7
	177 Move X0, X20
	178 Call 0x1C5D788
	179 Move X0, X20
	180 Move X1, X31
	181 Call RaycastHit.get_transform, X0
	182 Move W9, [X10]
	183 Add W9, W9, 7
	184 Add X8, X8, W9
	185 Add X0, X8, 312
	186 Move X8, [X0]
	187 Move X2, [X0+8]
	188 Move X0, X20
	189 Move X1, X19
	190 NotImplemented "Instruction BLR not yet implemented."
	191 Compare X19, 0
	192 JumpIfEqual {207}
	193 Xor W8, W21, 1
	194 Move TEMP, X8
	195 And TEMP, TEMP, 1
	196 Compare TEMP, 1
	197 JumpIfEqual {207}
	198 Move [X19+840], X0
	199 Move X20, [X31+176]
	200 Move X19, [X31+184]
	201 Move X22, [X31+160]
	202 Move X21, [X31+168]
	203 Move X30, [X31+152]
	204 Move V8, [X31+144]
	205 Add X31, X31, 192
	206 Return 
	207 Call 0x1C17F20

Method: System.Void UpdateUIHover()

Disassembly:
	0x03B62F30 BLR X9
	0x03B62F34 LDR X8, [X19 + 0x468]
	0x03B62F38 CBZ X8, 0x3B632F8
	0x03B62F3C ADD X8, X8, 0x1F8
	0x03B62F40 LDR X9, [X8 + 0x10]
	0x03B62F44 LDR V0, [X8]
	0x03B62F48 ADD X0, X31, 0x20
	0x03B62F4C MOV X1, X31
	0x03B62F50 STR X9, [X31 + 0x30]
	0x03B62F54 STR V0, [X31 + 0x2]
	0x03B62F58 BL 0x3745120
	0x03B62F5C LDR X8, [X21]
	0x03B62F60 MOV X20, X0
	0x03B62F64 LDR W9, [X8 + 0xE0]
	0x03B62F68 CBNZ W9, 0x3B62F74
	0x03B62F6C MOV X0, X8
	0x03B62F70 BL 0x1C16DFC
	0x03B62F74 ADD X1, X31, 0x18
	0x03B62F78 MOV X0, X20
	0x03B62F7C BL 0x3B62260
	0x03B62F80 TBZ X0, 0x0, 0x3B62FC0
	0x03B62F84 LDRB W8, [X19 + 0x358]
	0x03B62F88 CBZ W8, 0x3B62F94

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, X31
	005 Call Time.get_time
	006 Move W8, [X19+1112]
	007 Compare W8, 0
	008 JumpIfEqual {20}
	009 Move V2, [X19+896]
	010 Move V1, [X19+752]
	011 Subtract S0, S0, S2
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 Move V2, [X19+760]
	014 Add S1, S1, S2
	015 NotImplemented "Instruction FCMP not yet implemented."
	016 Move W8, [X19+901]
	017 Compare W8, 0
	018 JumpIfEqual {20}
	019 Move W8, 1
	020 Move W8, W31
	021 Move [X19+900], W8
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Return 

Method: System.Void UpdateBezierControlPoints(in Unity.Mathematics.float3 lineOrigin, in Unity.Mathematics.float3 lineDirection, in Unity.Mathematics.float3 curveReferenceUp)

Disassembly:
	0x03B62F8C LDR X1, [X19 + 0x2A0]
	0x03B62F90 B 0x3B62FA4
	0x03B62F94 MOV X0, X19
	0x03B62F98 MOV X1, X31
	0x03B62F9C BL 0x3C32E90
	0x03B62FA0 MOV X1, X0
	0x03B62FA4 LDR X8, [X19]
	0x03B62FA8 LDR X2, [X19 + 0x50]
	0x03B62FAC LDR V0, [X31 + 0x1C]
	0x03B62FB0 MOV X0, X19
	0x03B62FB4 LDR X9, [X8 + 0x938]
	0x03B62FB8 LDR X3, [X8 + 0x940]
	0x03B62FBC BLR X9
	0x03B62FC0 LDRB W8, [X19 + 0x482]
	0x03B62FC4 CBZ W8, 0x3B63154
	0x03B62FC8 LDR W8, [X19 + 0x310]
	0x03B62FCC CMP W8, 0x1
	0x03B62FD0 B.NE 0x3B63138
	0x03B62FD4 LDR X8, [X19 + 0x478]
	0x03B62FD8 CBZ X8, 0x3B632F8
	0x03B62FDC LDR X9, [X8 + 0x160]
	0x03B62FE0 LDR V0, [X8 + 0x15]
	0x03B62FE4 ADD X0, X31, 0x20
	0x03B62FE8 MOV X1, X31
	0x03B62FEC STR X9, [X31 + 0x30]
	0x03B62FF0 STR V0, [X31 + 0x2]
	0x03B62FF4 BL 0x3745120
	0x03B62FF8 CBZ X0, 0x3B63090
	0x03B62FFC LDR X8, [X19 + 0x478]
	0x03B63000 CBZ X8, 0x3B632F8
	0x03B63004 LDR X9, [X8 + 0x160]
	0x03B63008 LDR V0, [X8 + 0x15]
	0x03B6300C ADD X0, X31, 0x20
	0x03B63010 MOV X1, X31
	0x03B63014 STR X9, [X31 + 0x30]
	0x03B63018 STR V0, [X31 + 0x2]
	0x03B6301C BL 0x3745120
	0x03B63020 CBZ X0, 0x3B632F8
	0x03B63024 MOV X1, X31
	0x03B63028 BL 0x3734774
	0x03B6302C MOV X1, X31
	0x03B63030 BL 0x37C1380
	0x03B63034 TBZ X0, 0x0, 0x3B63090
	0x03B63038 LDR X8, [X19 + 0x478]
	0x03B6303C CBZ X8, 0x3B632F8
	0x03B63040 LDR X9, [X8 + 0x160]
	0x03B63044 LDR V0, [X8 + 0x15]
	0x03B63048 ADD X0, X31, 0x20
	0x03B6304C MOV X1, X31
	0x03B63050 STR X9, [X31 + 0x30]
	0x03B63054 STR V0, [X31 + 0x2]
	0x03B63058 BL 0x3745120
	0x03B6305C CBZ X0, 0x3B632F8
	0x03B63060 ADRP X8, 0x596000
	0x03B63064 LDR X8, [X8 + 0x8C0]
	0x03B63068 LDR X1, [X8]
	0x03B6306C BL 0x21F5D8C
	0x03B63070 LDR X8, [X19]
	0x03B63074 LDR X1, [X19 + 0x50]
	0x03B63078 FNEG S0, S0
	0x03B6307C LDR X9, [X8 + 0x918]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+952]
	003 Compare X8, 0
	004 JumpIfEqual {65}
	005 Move W9, [X8+24]
	006 Compare W9, 0
	007 JumpIfEqual {64}
	008 Move V0, [X1]
	009 Move V1, [X1+8]
	010 Move [X8+32], D0
	011 Move [X8+40], S1
	012 Move X8, [X0+952]
	013 Compare X8, 0
	014 JumpIfEqual {65}
	015 Move W9, [X8+24]
	016 Compare W9, 0
	017 JumpIfEqual {64}
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move V0, [X0+712]
	020 Move V3, [X2+8]
	021 Move V4, [X2]
	022 Move V1, [X0+716]
	023 Move V2, [X8+40]
	024 Move V5, [X3+8]
	025 Move V6, [X3]
	026 Multiply S3, S0, S3
	027 NotImplemented "Instruction INVALID not yet implemented."
	028 Move V4, [X8+32]
	029 Multiply S5, S1, S5
	030 NotImplemented "Instruction INVALID not yet implemented."
	031 Add S2, S2, S3
	032 Add V0, V4, V0
	033 Add S2, S2, S5
	034 Add V0, V0, V1
	035 Move [X8+44], D0
	036 Move [X8+52], S2
	037 Move X8, [X0+952]
	038 Compare X8, 0
	039 JumpIfEqual {65}
	040 Move W9, [X8+24]
	041 Compare W9, 0
	042 JumpIfEqual {64}
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move V0, [X0+704]
	045 Move V3, [X2+8]
	046 Move V4, [X2]
	047 Move V1, [X0+708]
	048 Move V2, [X8+40]
	049 Move V5, [X3+8]
	050 Move V6, [X3]
	051 Multiply S3, S0, S3
	052 NotImplemented "Instruction INVALID not yet implemented."
	053 Move V4, [X8+32]
	054 Multiply S5, S1, S5
	055 NotImplemented "Instruction INVALID not yet implemented."
	056 Add S2, S2, S3
	057 Add V0, V4, V0
	058 Add S2, S2, S5
	059 Add V0, V0, V1
	060 Move [X8+56], D0
	061 Move [X8+64], S2
	062 Move X30, [X31+16]
	063 Return 
	064 Call 0x1C17F28
	065 Call 0x1C17F20

Method: System.Single GetProjectileAngle(UnityEngine.Vector3 lineDirection)

Disassembly:
	0x03B601FC FSUB S4, S9, S10
	0x03B60200 LDR V10, [X31 + 0x28]
	0x03B60204 FSUB S3, S14, S15
	0x03B60208 MOV V0.16B, V13.16B
	0x03B6020C MOV V1.16B, V12.16B
	0x03B60210 FSUB S5, S10, S8
	0x03B60214 MOV V2.16B, V11.16B
	0x03B60218 MOV X0, X31
	0x03B6021C BL 0x3C0CB04
	0x03B60220 LDR V3, [X31 + 0x24]
	0x03B60224 MOV V0.16B, V14.16B
	0x03B60228 MOV V1.16B, V9.16B
	0x03B6022C MOV V2.16B, V10.16B
	0x03B60230 B 0x3B60340
	0x03B60234 MOV X0, X20
	0x03B60238 MOV X1, X31
	0x03B6023C BL 0x3C3F988
	0x03B60240 LDR V3, [X19 + 0x2D8]
	0x03B60244 MOV X0, X20
	0x03B60248 MOV X1, X31
	0x03B6024C FMUL S4, S0, S3
	0x03B60250 FMUL S0, S1, S3
	0x03B60254 STP S0, S4, [X31 + 0x20]
	0x03B60258 FMUL S0, S2, S3
	0x03B6025C STR S0, [X31 + 0x1C]
	0x03B60260 BL 0x3C3F90C
	0x03B60264 LDR V3, [X19 + 0x2D8]
	0x03B60268 MOV X0, X31
	0x03B6026C STR S10, [X31 + 0x28]
	0x03B60270 FMUL S14, S0, S3
	0x03B60274 FMUL S15, S1, S3
	0x03B60278 FMUL S8, S2, S3
	0x03B6027C MOV V0.16B, V13.16B
	0x03B60280 MOV V1.16B, V12.16B
	0x03B60284 MOV V2.16B, V11.16B
	0x03B60288 BL 0x3C0CB98
	0x03B6028C STR S9, [X31 + 0x14]
	0x03B60290 FADD S3, S9, S14
	0x03B60294 LDR V9, [X31 + 0x2C]
	0x03B60298 FADD S0, S13, S14
	0x03B6029C FADD S1, S12, S15
	0x03B602A0 FADD S2, S11, S8
	0x03B602A4 FADD S4, S9, S15
	0x03B602A8 FADD S5, S10, S8
	0x03B602AC MOV X0, X31
	0x03B602B0 BL 0x3C0CB04
	0x03B602B4 LDR V10, [X31 + 0x14]
	0x03B602B8 FSUB S0, S13, S14
	0x03B602BC FSUB S1, S12, S15
	0x03B602C0 FSUB S2, S11, S8
	0x03B602C4 FSUB S3, S10, S14
	0x03B602C8 LDR V14, [X31 + 0x28]
	0x03B602CC FSUB S4, S9, S15
	0x03B602D0 MOV X0, X31
	0x03B602D4 FSUB S5, S14, S8
	0x03B602D8 BL 0x3C0CB04
	0x03B602DC LDP S8, S4, [X31 + 0x20]
	0x03B602E0 LDR V6, [X31 + 0x1C]
	0x03B602E4 MOV X0, X31
	0x03B602E8 FADD S0, S13, S4
	0x03B602EC FADD S1, S12, S8
	0x03B602F0 FADD S2, S11, S6
	0x03B602F4 FADD S3, S10, S4
	0x03B602F8 MOV V15.16B, V4.16B
	0x03B602FC FADD S4, S9, S8
	0x03B60300 FADD S5, S14, S6
	0x03B60304 MOV V9.16B, V6.16B
	0x03B60308 BL 0x3C0CB04
	0x03B6030C FSUB S2, S11, S9
	0x03B60310 LDR V11, [X31 + 0x2C]
	0x03B60314 FSUB S0, S13, S15
	0x03B60318 FSUB S1, S12, S8
	0x03B6031C FSUB S3, S10, S15
	0x03B60320 FSUB S4, S11, S8
	0x03B60324 FSUB S5, S14, S9
	0x03B60328 MOV X0, X31
	0x03B6032C BL 0x3C0CB04
	0x03B60330 LDR V3, [X19 + 0x2D8]
	0x03B60334 MOV V0.16B, V10.16B
	0x03B60338 MOV V1.16B, V11.16B
	0x03B6033C MOV V2.16B, V14.16B
	0x03B60340 MOV X0, X31
	0x03B60344 BL 0x3C0CB98
	0x03B60348 ADRP X8, 0x593000
	0x03B6034C LDR X8, [X8 + 0x970]
	0x03B60350 LDR X0, [X8]
	0x03B60354 LDR W8, [X0 + 0xE0]
	0x03B60358 CBNZ W8, 0x3B60360
	0x03B6035C BL 0x1C16DFC
	0x03B60360 MOV X0, X31
	0x03B60364 BL 0x3C018E4
	0x03B60368 TBZ X0, 0x0, 0x3B608E0
	0x03B6036C LDR X8, [X19 + 0x3A0]
	0x03B60370 CBZ X8, 0x3B608E0
	0x03B60374 LDR W8, [X8 + 0x18]
	0x03B60378 CMP W8, 0x2
	0x03B6037C B.LT 0x3B608E0
	0x03B60380 ADD X1, X31, 0x80
	0x03B60384 ADD X2, X31, 0xAC
	0x03B60388 MOV X0, X19
	0x03B6038C STR W31, [X31 + 0xAC]
	0x03B60390 BL 0x3B61AF0
	0x03B60394 TBZ X0, 0x0, 0x3B604E8
	0x03B60398 ADRP X8, 0xFFFFFFFFFCF8A000
	0x03B6039C ADRP X9, 0xFFFFFFFFFCF89000
	0x03B603A0 ADRP X10, 0xFFFFFFFFFCF8A000
	0x03B603A4 ADRP X11, 0xFFFFFFFFFCF89000
	0x03B603A8 LDR V0, [X8 + 0x1B0]
	0x03B603AC LDR V1, [X9 + 0xFA8]
	0x03B603B0 LDR V2, [X10 + 0x1E0]
	0x03B603B4 LDR V3, [X11 + 0xFAC]
	0x03B603B8 MOV X0, X31
	0x03B603BC BL 0x3C0D030
	0x03B603C0 ADD X0, X31, 0x80
	0x03B603C4 MOV X1, X31
	0x03B603C8 BL 0x3C8E66C
	0x03B603CC ADD X0, X31, 0x80
	0x03B603D0 MOV X1, X31
	0x03B603D4 MOV V9.16B, V0.16B
	0x03B603D8 MOV V10.16B, V1.16B
	0x03B603DC MOV V11.16B, V2.16B
	0x03B603E0 BL 0x3C8E66C
	0x03B603E4 ADD X0, X31, 0x80
	0x03B603E8 MOV X1, X31
	0x03B603EC MOV V12.16B, V0.16B
	0x03B603F0 MOV V13.16B, V1.16B
	0x03B603F4 STR S2, [X31 + 0x2C]
	0x03B603F8 BL 0x3C8E678
	0x03B603FC ADRP X20, 0x878000
	0x03B60400 LDRB W8, [X20 + 0x785]
	0x03B60404 MOV V14.16B, V0.16B
	0x03B60408 MOV V15.16B, V1.16B
	0x03B6040C MOV V8.16B, V2.16B
	0x03B60410 CBNZ W8, 0x3B60428
	0x03B60414 ADRP X0, 0x593000
	0x03B60418 LDR X0, [X0 + 0x5A8]
	0x03B6041C BL 0x1C16CF4
	0x03B60420 MOVZ W8, 0x1
	0x03B60424 STRB W8, [X20 + 0x785]
	0x03B60428 ADRP X8, 0x593000
	0x03B6042C LDR X8, [X8 + 0x5A8]
	0x03B60430 LDR X0, [X8]
	0x03B60434 LDR W8, [X0 + 0xE0]
	0x03B60438 CBNZ W8, 0x3B60440
	0x03B6043C BL 0x1C16DFC
	0x03B60440 FMUL S0, S14, S14
	0x03B60444 FMUL S1, S15, S15
	0x03B60448 ADRP X8, 0xFFFFFFFFFCF8A000
	0x03B6044C FADD S0, S0, S1
	0x03B60450 LDR V1, [X8 + 0x17C]
	0x03B60454 FMUL S2, S8, S8
	0x03B60458 FADD S0, S2, S0
	0x03B6045C FSQRT S2, S0
	0x03B60460 FCMP S2, S1
	0x03B60464 B.LE 0x3B60478
	0x03B60468 FDIV S0, S14, S2
	0x03B6046C FDIV S1, S15, S2
	0x03B60470 FDIV S2, S8, S2
	0x03B60474 B 0x3B604B0
	0x03B60478 ADRP X20, 0x878000
	0x03B6047C LDRB W8, [X20 + 0x783]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move V8, V2
	014 Move V9, V1
	015 Move V10, V0
	016 Call XRRayInteractor.get_referenceUp, X0
	017 Move X19, 0x879000
	018 Move W8, [X19+3641]
	019 Move V11, V0
	020 Move V12, V1
	021 Move V13, V2
	022 Compare W8, 0
	023 JumpIfNotEqual {29}
	024 Move X0, 0x59B000
	025 Move X0, [X0+1208]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X19+3641], W8
	029 Move X19, 0x59B000
	030 Move X19, [X19+1208]
	031 Multiply S0, S11, S11
	032 Multiply S1, S12, S12
	033 Add S0, S0, S1
	034 Move X8, [X19]
	035 Multiply S1, S13, S13
	036 Add S0, S1, S0
	037 Move X8, [X8+184]
	038 Move V2, [X8]
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 Multiply S1, S10, S11
	041 Multiply S2, S9, S12
	042 Multiply S3, S8, S13
	043 Add S1, S1, S2
	044 Add S1, S3, S1
	045 Multiply S2, S11, S1
	046 Multiply S3, S12, S1
	047 Multiply S1, S13, S1
	048 NotImplemented "Instruction FDIV not yet implemented."
	049 NotImplemented "Instruction FDIV not yet implemented."
	050 NotImplemented "Instruction FDIV not yet implemented."
	051 Subtract S4, S10, S2
	052 Subtract S1, S9, S3
	053 Subtract S0, S8, S0
	054 Move [X31+88], S1
	055 Move [X31+96], S4
	056 Move [X31+12], S0
	057 Move [X31+88], S9
	058 Move [X31+96], S10
	059 Move [X31+12], S8
	060 Move X20, 0x879000
	061 Move W8, [X20+2596]
	062 Compare W8, 0
	063 JumpIfNotEqual {69}
	064 Move X0, 0x594000
	065 Move X0, [X0+1448]
	066 Call 0x1C17CF4
	067 Move W8, 1
	068 Move [X20+2596], W8
	069 Multiply S0, S10, S10
	070 Multiply S1, S9, S9
	071 Move X20, 0x594000
	072 Move X20, [X20+1448]
	073 Add S0, S0, S1
	074 Multiply S1, S8, S8
	075 Add S15, S1, S0
	076 Move S1, [X31+88]
	077 Move S0, [X31+92]
	078 Move X0, [X20]
	079 Multiply S0, S0, S0
	080 Multiply S1, S1, S1
	081 Add S0, S0, S1
	082 Move V1, [X31+12]
	083 Move W8, [X0+224]
	084 Multiply S1, S1, S1
	085 Add S14, S1, S0
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Move X8, -50814976
	090 Move V1, [X8+4072]
	091 Multiply S0, S15, S14
	092 NotImplemented "Instruction FSQRT not yet implemented."
	093 Move S15, W31
	094 NotImplemented "Instruction FCMP not yet implemented."
	095 Move S2, [X31+88]
	096 Move S1, [X31+92]
	097 Move V3, [X31+12]
	098 Move X0, [X20]
	099 Multiply S1, S10, S1
	100 Multiply S2, S9, S2
	101 Multiply S3, S8, S3
	102 Add S1, S1, S2
	103 Add S1, S3, S1
	104 Move W8, [X0+224]
	105 NotImplemented "Instruction FDIV not yet implemented."
	106 Move S1, 1
	107 Move S2, -1
	108 NotImplemented "Instruction FMIN not yet implemented."
	109 NotImplemented "Instruction FCMP not yet implemented."
	110 NotImplemented "Instruction FCSEL not yet implemented."
	111 Compare W8, 0
	112 JumpIfNotEqual {114}
	113 Call 0x1C17DFC
	114 NotImplemented "Instruction FCVT not yet implemented."
	115 Call 0x3EB2B80
	116 Move X8, -50810880
	117 Move V1, [X8+1096]
	118 NotImplemented "Instruction INVALID not yet implemented."
	119 Multiply S15, S0, S1
	120 Move X20, 0x87A000
	121 Move W8, [X20+1450]
	122 Compare W8, 0
	123 JumpIfNotEqual {129}
	124 Move X0, 0x59B000
	125 Move X0, [X0+1208]
	126 Call 0x1C17CF4
	127 Move W8, 1
	128 Move [X20+1450], W8
	129 Move X8, [X19]
	130 Move X9, -50810880
	131 Move V2, [X9+576]
	132 NotImplemented "Instruction FABS not yet implemented."
	133 Move X8, [X8+184]
	134 Move S1, W31
	135 Move S4, 8
	136 NotImplemented "Instruction FMAXNM not yet implemented."
	137 Move V3, [X8]
	138 Multiply S0, S0, S2
	139 NotImplemented "Instruction FABD not yet implemented."
	140 Multiply S2, S3, S4
	141 NotImplemented "Instruction FCMP not yet implemented."
	142 NotImplemented "Instruction FCSEL not yet implemented."
	143 NotImplemented "Instruction FCMP not yet implemented."
	144 Multiply S0, S8, S12
	145 Multiply S1, S9, S13
	146 Multiply S2, S10, S13
	147 Multiply S3, S8, S11
	148 Multiply S4, S9, S11
	149 Multiply S5, S10, S12
	150 Subtract S0, S0, S1
	151 Subtract S1, S2, S3
	152 Subtract S2, S4, S5
	153 Move S4, [X31+88]
	154 Move S3, [X31+92]
	155 Move V5, [X31+12]
	156 Move [X31+4], S1
	157 Move [X31+12], S2
	158 Move [X31], S0
	159 Move V0, V10
	160 Move V1, V9
	161 Move V2, V8
	162 Move X0, X31
	163 Call 0x1DD5D78
	164 Move S0, W31
	165 Move X20, [X31+96]
	166 Move X19, [X31+104]
	167 Move X30, [X31+80]
	168 Move D9, [X31+64]
	169 Move D8, [X31+72]
	170 Move D11, [X31+48]
	171 Move D10, [X31+56]
	172 Move D13, [X31+32]
	173 Move D12, [X31+40]
	174 Move D15, [X31+16]
	175 Move D14, [X31+24]
	176 Add X31, X31, 112
	177 Return V0

Method: System.Void CalculateProjectileParameters(in Unity.Mathematics.float3 lineOrigin, in Unity.Mathematics.float3 lineDirection, out Unity.Mathematics.float3 initialVelocity, out Unity.Mathematics.float3 constantAcceleration, out System.Single flightTime)

Disassembly:
	0x03B63080 LDR X2, [X8 + 0x920]
	0x03B63084 MOV X0, X19
	0x03B63088 BLR X9
	0x03B6308C B 0x3B63138
	0x03B63090 LDR X8, [X19 + 0x478]
	0x03B63094 CBZ X8, 0x3B632F8
	0x03B63098 LDR X9, [X8 + 0xE8]
	0x03B6309C LDUR V0, [X8 + 0xD8]
	0x03B630A0 ADD X0, X31, 0x20
	0x03B630A4 MOV X1, X31
	0x03B630A8 STR X9, [X31 + 0x30]
	0x03B630AC STR V0, [X31 + 0x2]
	0x03B630B0 BL 0x3745120
	0x03B630B4 CBZ X0, 0x3B63138
	0x03B630B8 LDR X8, [X19 + 0x478]
	0x03B630BC CBZ X8, 0x3B632F8
	0x03B630C0 LDR X9, [X8 + 0xE8]
	0x03B630C4 LDUR V0, [X8 + 0xD8]
	0x03B630C8 ADD X0, X31, 0x20
	0x03B630CC MOV X1, X31
	0x03B630D0 STR X9, [X31 + 0x30]
	0x03B630D4 STR V0, [X31 + 0x2]
	0x03B630D8 BL 0x3745120
	0x03B630DC CBZ X0, 0x3B632F8
	0x03B630E0 MOV X1, X31
	0x03B630E4 BL 0x3734774
	0x03B630E8 MOV X1, X31
	0x03B630EC BL 0x37C1380
	0x03B630F0 TBZ X0, 0x0, 0x3B63138
	0x03B630F4 LDR X8, [X19 + 0x478]
	0x03B630F8 CBZ X8, 0x3B632F8
	0x03B630FC ADD X8, X8, 0x168
	0x03B63100 LDR X9, [X8 + 0x10]
	0x03B63104 LDR V0, [X8]
	0x03B63108 ADD X0, X31, 0x20
	0x03B6310C MOV X1, X31
	0x03B63110 STR X9, [X31 + 0x30]
	0x03B63114 STR V0, [X31 + 0x2]
	0x03B63118 BL 0x3745120
	0x03B6311C CBZ X0, 0x3B63138
	0x03B63120 ADRP X8, 0x5B8000
	0x03B63124 LDR X8, [X8 + 0x70]
	0x03B63128 LDR X1, [X8]
	0x03B6312C BL 0x21F5BCC
	0x03B63130 CMP W0, 0x2
	0x03B63134 B.GE 0x3B63174
	0x03B63138 LDR W8, [X19 + 0x350]
	0x03B6313C CMP W8, 0x2
	0x03B63140 B.NE 0x3B63154
	0x03B63144 LDR X8, [X19 + 0x478]
	0x03B63148 CBZ X8, 0x3B632F8
	0x03B6314C LDR V0, [X8 + 0x18C]
	0x03B63150 STR S0, [X19 + 0x354]
	0x03B63154 LDP X20, X19, [X31 + 0xB0]
	0x03B63158 LDP X22, X21, [X31 + 0xA0]
	0x03B6315C LDP X30, X23, [X31 + 0x90]
	0x03B63160 LDP D9, D8, [X31 + 0x80]
	0x03B63164 LDP D11, D10, [X31 + 0x70]
	0x03B63168 LDP D13, D12, [X31 + 0x60]
	0x03B6316C ADD X31, X31, 0xC0
	0x03B63170 RET
	0x03B63174 LDR X8, [X19 + 0x478]
	0x03B63178 CBZ X8, 0x3B632F8
	0x03B6317C LDR X9, [X8 + 0xE8]
	0x03B63180 LDUR V0, [X8 + 0xD8]
	0x03B63184 ADD X0, X31, 0x20
	0x03B63188 MOV X1, X31
	0x03B6318C STR X9, [X31 + 0x30]
	0x03B63190 STR V0, [X31 + 0x2]
	0x03B63194 BL 0x3745120
	0x03B63198 CBZ X0, 0x3B632F8
	0x03B6319C ADRP X8, 0x5B8000
	0x03B631A0 LDR X8, [X8 + 0x3C0]
	0x03B631A4 LDR X1, [X8]
	0x03B631A8 BL 0x21F5E68
	0x03B631AC LDR X0, [X19 + 0x50]
	0x03B631B0 CBZ X0, 0x3B632F8
	0x03B631B4 MOV X1, X31
	0x03B631B8 MOV V8.16B, V0.16B
	0x03B631BC MOV V9.16B, V1.16B
	0x03B631C0 BL 0x3C3FA04
	0x03B631C4 ADRP X20, 0x875000
	0x03B631C8 LDRB W8, [X20 + 0x786]
	0x03B631CC MOV V10.16B, V0.16B
	0x03B631D0 MOV V11.16B, V1.16B
	0x03B631D4 MOV V12.16B, V2.16B
	0x03B631D8 CBNZ W8, 0x3B631F0
	0x03B631DC ADRP X0, 0x590000
	0x03B631E0 LDR X0, [X0 + 0x5A0]
	0x03B631E4 BL 0x1C16CF4
	0x03B631E8 MOVZ W8, 0x1
	0x03B631EC STRB W8, [X20 + 0x786]
	0x03B631F0 ADRP X8, 0x590000
	0x03B631F4 LDR X8, [X8 + 0x5A0]
	0x03B631F8 MOV V0.16B, V10.16B
	0x03B631FC MOV V1.16B, V11.16B
	0x03B63200 MOV V2.16B, V12.16B
	0x03B63204 LDR X8, [X8]
	0x03B63208 MOV X0, X31
	0x03B6320C LDR X8, [X8 + 0xB8]
	0x03B63210 LDP S3, S4, [X8 + 0x18]
	0x03B63214 LDR V5, [X8 + 0x20]
	0x03B63218 BL 0x3C2A810
	0x03B6321C MOV X0, X31
	0x03B63220 BL 0x3C2A260
	0x03B63224 LDR X0, [X19 + 0x50]
	0x03B63228 CBZ X0, 0x3B632F8
	0x03B6322C MOV X1, X31
	0x03B63230 MOV V12.16B, V0.16B
	0x03B63234 MOV V11.16B, V1.16B
	0x03B63238 MOV V10.16B, V2.16B
	0x03B6323C MOV V13.16B, V3.16B
	0x03B63240 BL 0x3C3DEB4
	0x03B63244 FMUL S4, S13, S0
	0x03B63248 FMUL S5, S12, S3
	0x03B6324C FMUL S7, S10, S1
	0x03B63250 FMUL S16, S13, S1
	0x03B63254 FMUL S17, S11, S3
	0x03B63258 FMUL S18, S10, S0
	0x03B6325C FMUL S20, S12, S1

ISIL:
	001 Move [X31-112], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move V0, [X2]
	015 Move V1, [X0+688]
	016 Move V2, [X2+8]
	017 Move X19, X5
	018 Move X22, X4
	019 NotImplemented "Instruction INVALID not yet implemented."
	020 Multiply S1, S2, S1
	021 Move X23, X2
	022 Move X21, X1
	023 Move X20, X0
	024 Move [X3], D0
	025 Move [X3+8], S1
	026 Call XRRayInteractor.get_referenceUp, X0
	027 Move X0, X31
	028 Call float3.op_Implicit, X0
	029 Move X0, X20
	030 Move V8, V0
	031 Move V9, V1
	032 Move V10, V2
	033 Call XRRayInteractor.get_referencePosition, X0
	034 Move X0, X31
	035 Call float3.op_Implicit, X0
	036 Move V11, V0
	037 Move V0, [X20+692]
	038 Move V12, V1
	039 Move V14, V2
	040 Move X0, X31
	041 NotImplemented "Instruction FNEG not yet implemented."
	042 Multiply S1, S8, S0
	043 Multiply S3, S9, S0
	044 Multiply S0, S10, S0
	045 Move [X22], S1
	046 Move [X22+8], S3
	047 Move [X22+8], S0
	048 Move V3, [X23+8]
	049 Move S0, [X23]
	050 Move S1, [X23+4]
	051 Move V2, V3
	052 Call float3.op_Implicit, X0
	053 Move X0, X20
	054 Call XRRayInteractor.GetProjectileAngle, X0, X1
	055 Move X22, 0x87F000
	056 Move W8, [X22+1386]
	057 Move V13, V0
	058 Compare W8, 0
	059 JumpIfNotEqual {65}
	060 Move X0, 0x591000
	061 Move X0, [X0+1448]
	062 Call 0x1C17CF4
	063 Move W8, 1
	064 Move [X22+1386], W8
	065 Move X22, 0x591000
	066 Move X22, [X22+1448]
	067 Move X0, [X22]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move S0, [X21]
	073 Move S1, [X21+4]
	074 Multiply S2, S8, S8
	075 Multiply S3, S9, S9
	076 Add S2, S2, S3
	077 Move V3, [X21+8]
	078 Subtract S0, S11, S0
	079 Subtract S1, S12, S1
	080 Move X21, 0x87F000
	081 Move W8, [X21+1413]
	082 Subtract S3, S14, S3
	083 Multiply S0, S8, S0
	084 Multiply S1, S9, S1
	085 Multiply S4, S10, S10
	086 Multiply S3, S10, S3
	087 Add S0, S0, S1
	088 Add S0, S3, S0
	089 Add S1, S4, S2
	090 NotImplemented "Instruction FDIV not yet implemented."
	091 Compare W8, 0
	092 JumpIfNotEqual {98}
	093 Move X0, 0x591000
	094 Move X0, [X0+1448]
	095 Call 0x1C17CF4
	096 Move W8, 1
	097 Move [X21+1413], W8
	098 Move X0, [X22]
	099 Multiply S11, S8, S12
	100 Multiply S8, S9, S12
	101 Multiply S9, S10, S12
	102 Move W8, [X0+224]
	103 Compare W8, 0
	104 JumpIfNotEqual {106}
	105 Call 0x1C17DFC
	106 Move X8, -50823168
	107 Move V0, [X8+260]
	108 Multiply S0, S13, S0
	109 NotImplemented "Instruction FCVT not yet implemented."
	110 Call 0x3EB2C30
	111 Multiply S1, S11, S11
	112 Multiply S3, S8, S8
	113 Move V6, [X20+696]
	114 Move V5, [X20+688]
	115 Multiply S2, S9, S9
	116 Add S3, S1, S3
	117 Move V1, [X20+692]
	118 Move V4, [X20+700]
	119 Move X0, X19
	120 Move X20, [X31+96]
	121 Move X19, [X31+104]
	122 Move X22, [X31+80]
	123 Move X21, [X31+88]
	124 Move X30, [X31+64]
	125 Move X23, [X31+72]
	126 Move D9, [X31+48]
	127 Move D8, [X31+56]
	128 Move D11, [X31+32]
	129 Move D10, [X31+40]
	130 Move D13, [X31+16]
	131 Move D12, [X31+24]
	132 Add S2, S2, S3
	133 NotImplemented "Instruction FSQRT not yet implemented."
	134 Add S3, S2, S6
	135 NotImplemented "Instruction INVALID not yet implemented."
	136 Move V0, V5
	137 Move X1, X31
	138 Move V14, [X31+112]
	139 Call CurveUtility.CalculateProjectileFlightTime, V0, V1, V2, V3, V4, X0
	140 Return 

Method: System.Boolean TryRead2DAxis(UnityEngine.InputSystem.InputAction action, out UnityEngine.Vector2 output)

Disassembly:
	0x03B63260 FMUL S21, S12, S0
	0x03B63264 FMUL S22, S11, S0
	0x03B63268 FMUL S0, S11, S1
	0x03B6326C FMUL S1, S13, S2
	0x03B63270 FMUL S23, S13, S3
	0x03B63274 FMUL S3, S10, S3
	0x03B63278 FMUL S6, S11, S2
	0x03B6327C FMUL S19, S12, S2
	0x03B63280 FMUL S24, S10, S2
	0x03B63284 FADD S2, S4, S5
	0x03B63288 FADD S4, S16, S17
	0x03B6328C FADD S1, S1, S3
	0x03B63290 FSUB S3, S23, S21
	0x03B63294 FADD S2, S6, S2
	0x03B63298 FADD S4, S18, S4
	0x03B6329C FADD S5, S20, S1
	0x03B632A0 FSUB S3, S3, S0
	0x03B632A4 FSUB S0, S2, S7
	0x03B632A8 FSUB S1, S4, S19
	0x03B632AC FSUB S2, S5, S22
	0x03B632B0 FSUB S3, S3, S24
	0x03B632B4 FMOV S6, W31
	0x03B632B8 MOV V4.16B, V8.16B
	0x03B632BC MOV V5.16B, V9.16B
	0x03B632C0 MOV X0, X31
	0x03B632C4 BL 0x3C2A9FC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x880000
	006 Move W8, [X21+2458]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x5B9000
	014 Move X0, [X0+960]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2458], W8
	018 Compare X19, 0
	019 JumpIfEqual {27}
	020 Move X8, 0x5B9000
	021 Move X8, [X8+960]
	022 Move X0, X19
	023 Move X1, [X8]
	024 Call InputAction.ReadValue, X0
	025 Move [X20], S0
	026 Move [X20+8], S1
	027 Move [X20], X31
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0

Method: System.Boolean TryReadButton(UnityEngine.InputSystem.InputAction action)

Disassembly:
	0x03B632C8 MOV X0, X31
	0x03B632CC MOV V8.16B, V0.16B
	0x03B632D0 BL 0x3C0E100
	0x03B632D4 LDR X8, [X19]

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {6}
	003 Move X1, X31
	004 Call InputAction.WasPerformedThisFrame, X0
	005 Return X0
	006 Return X0

Method: System.Void RotateAnchor(UnityEngine.Transform anchor, System.Single directionAmount)

Disassembly:
	0x03B632D8 LDR X1, [X19 + 0x50]
	0x03B632DC FDIV S0, S8, S0
	0x03B632E0 LDR X9, [X8 + 0x918]
	0x03B632E4 LDR X2, [X8 + 0x920]
	0x03B632E8 MOVZ W8, 0xC2480000
	0x03B632EC FMOV S1, W8
	0x03B632F0 FMUL S0, S0, S1
	0x03B632F4 B 0x3B63084
	0x03B632F8 BL 0x1C16F20
	0x03B632FC SUB X31, X31, 0xF0
	0x03B63300 STR D8, [X31 + 0x90]
	0x03B63304 STP X30, X27, [X31 + 0xA0]
	0x03B63308 STP X26, X25, [X31 + 0xB0]
	0x03B6330C STP X24, X23, [X31 + 0xC0]
	0x03B63310 STP X22, X21, [X31 + 0xD0]
	0x03B63314 STP X20, X19, [X31 + 0xE0]
	0x03B63318 ADRP X21, 0x87F000
	0x03B6331C LDRB W8, [X21 + 0x99F]
	0x03B63320 MOV X19, X1
	0x03B63324 MOV X20, X0
	0x03B63328 TBNZ X8, 0x0, 0x3B6337C
	0x03B6332C ADRP X0, 0x5F7000
	0x03B63330 LDR X0, [X0 + 0xCF8]
	0x03B63334 BL 0x1C16CF4
	0x03B63338 ADRP X0, 0x5F7000
	0x03B6333C LDR X0, [X0 + 0xE08]
	0x03B63340 BL 0x1C16CF4
	0x03B63344 ADRP X0, 0x5F7000
	0x03B63348 LDR X0, [X0 + 0xE28]
	0x03B6334C BL 0x1C16CF4
	0x03B63350 ADRP X0, 0x5F7000
	0x03B63354 LDR X0, [X0 + 0xE00]
	0x03B63358 BL 0x1C16CF4
	0x03B6335C ADRP X0, 0x5F7000
	0x03B63360 LDR X0, [X0 + 0xE30]
	0x03B63364 BL 0x1C16CF4
	0x03B63368 ADRP X0, 0x5F7000
	0x03B6336C LDR X0, [X0 + 0x7C0]
	0x03B63370 BL 0x1C16CF4
	0x03B63374 MOVZ W8, 0x1
	0x03B63378 STRB W8, [X21 + 0x99F]
	0x03B6337C MOVI V0.2D, 0x0
	0x03B63380 STR W31, [X31 + 0x9C]
	0x03B63384 STP V0, V0, [X31 + 0x70]
	0x03B63388 STP V0, V0, [X31 + 0x50]
	0x03B6338C STR V0, [X31 + 0x4]
	0x03B63390 STUR V0, [X31 + 0x2C]
	0x03B63394 STP V0, V0, [X31 + 0x10]
	0x03B63398 STR X31, [X31 + 0x8]
	0x03B6339C CBZ X19, 0x3B63698
	0x03B633A0 LDP W2, W8, [X19 + 0x18]
	0x03B633A4 ADD W8, W8, 0x1
	0x03B633A8 CMP W2, 0x1
	0x03B633AC STP W31, W8, [X19 + 0x18]
	0x03B633B0 B.LT 0x3B633C4
	0x03B633B4 LDR X0, [X19 + 0x10]
	0x03B633B8 MOV W1, W31
	0x03B633BC MOV X3, X31
	0x03B633C0 BL 0x339FA34
	0x03B633C4 MOV X0, X20
	0x03B633C8 MOV X1, X31
	0x03B633CC BL 0x3C32454
	0x03B633D0 TBZ X0, 0x0, 0x3B63678
	0x03B633D4 LDR W8, [X20 + 0x390]
	0x03B633D8 CMP W8, 0x1
	0x03B633DC B.LT 0x3B63534
	0x03B633E0 ADD X1, X31, 0x40
	0x03B633E4 ADD X2, X31, 0x9C
	0x03B633E8 MOV X0, X20
	0x03B633EC BL 0x3B61B5C
	0x03B633F0 LDR W8, [X20 + 0x390]
	0x03B633F4 CMP W8, 0x1
	0x03B633F8 B.LT 0x3B63534
	0x03B633FC LDR W23, [X31 + 0x9C]
	0x03B63400 ADRP X25, 0x5F7000
	0x03B63404 ADRP X27, 0x5F7000
	0x03B63408 LDR V8, [X31 + 0x50]
	0x03B6340C LDR X25, [X25 + 0xE30]
	0x03B63410 LDR X27, [X27 + 0xE28]
	0x03B63414 CMP W23, 0x1
	0x03B63418 EOR W8, W0, 0x1
	0x03B6341C CSET W9, LT
	0x03B63420 MOV X22, X31
	0x03B63424 MOVZ W24, 0x20
	0x03B63428 ORR W26, W9, W8, 0x0
	0x03B6342C LDR X8, [X20 + 0x388]
	0x03B63430 CBZ X8, 0x3B63698
	0x03B63434 LDR W9, [X8 + 0x18]
	0x03B63438 CMP X22, X9
	0x03B6343C B.CS 0x3B6369C
	0x03B63440 ADD X8, X8, X24
	0x03B63444 LDR W9, [X8 + 0x28]
	0x03B63448 LDR X10, [X8 + 0x20]
	0x03B6344C LDP V1, V0, [X8]
	0x03B63450 STR W9, [X31 + 0x38]
	0x03B63454 STR X10, [X31 + 0x30]
	0x03B63458 STP V1, V0, [X31 + 0x10]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x880000
	008 Move W8, [X21+2459]
	009 Move V8, V0
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x591000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2459], W8
	021 Move X21, 0x877000
	022 Move W8, [X21+1450]
	023 Compare W8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, 0x598000
	026 Move X0, [X0+1208]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+1450], W8
	030 Move X8, 0x598000
	031 Move X8, [X8+1208]
	032 Move X9, -50823168
	033 Move V0, [X9+576]
	034 NotImplemented "Instruction FABS not yet implemented."
	035 Move X8, [X8]
	036 Move S2, W31
	037 NotImplemented "Instruction FMAXNM not yet implemented."
	038 Multiply S0, S1, S0
	039 Move X8, [X8+184]
	040 Move S1, 8
	041 Move V3, [X8]
	042 Multiply S1, S3, S1
	043 NotImplemented "Instruction FCMP not yet implemented."
	044 NotImplemented "Instruction FCSEL not yet implemented."
	045 NotImplemented "Instruction FABD not yet implemented."
	046 NotImplemented "Instruction FCMP not yet implemented."
	047 Move X21, 0x591000
	048 Move V9, [X20+768]
	049 Move X21, [X21+1432]
	050 Move X0, X31
	051 Call Time.get_deltaTime
	052 Move X0, [X21]
	053 Move X21, [X20+776]
	054 Multiply S9, S9, S0
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, X21
	060 Move X1, X31
	061 Move X2, X31
	062 Multiply S8, S9, S8
	063 Call Object.op_Inequality, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {94}
	068 Move X0, [X20+776]
	069 Compare X0, 0
	070 JumpIfEqual {123}
	071 Move X1, X31
	072 Call Transform.get_up, X0
	073 Compare X19, 0
	074 JumpIfEqual {123}
	075 Move X0, X19
	076 Move X20, [X31+32]
	077 Move X19, [X31+40]
	078 Move X30, [X31+16]
	079 Move X21, [X31+24]
	080 Move V3, V8
	081 Move W1, W31
	082 Move X2, X31
	083 Move D9, [X31+48]
	084 Move D8, [X31+56]
	085 Call Transform.Rotate, X0, X1, V0, X2
	086 Return 
	087 Move X20, [X31+32]
	088 Move X19, [X31+40]
	089 Move X30, [X31+16]
	090 Move X21, [X31+24]
	091 Move D9, [X31+48]
	092 Move D8, [X31+56]
	093 Return 
	094 Move X20, 0x876000
	095 Move W8, [X20+1926]
	096 Compare W8, 0
	097 JumpIfNotEqual {103}
	098 Move X0, 0x591000
	099 Move X0, [X0+1440]
	100 Call 0x1C17CF4
	101 Move W8, 1
	102 Move [X20+1926], W8
	103 Compare X19, 0
	104 JumpIfEqual {123}
	105 Move X8, 0x591000
	106 Move X8, [X8+1440]
	107 Move X0, X19
	108 Move X20, [X31+32]
	109 Move X19, [X31+40]
	110 Move X30, [X31+16]
	111 Move X21, [X31+24]
	112 Move X8, [X8]
	113 Move V3, V8
	114 Move X1, X31
	115 Move X8, [X8+184]
	116 Move S1, [X8+28]
	117 Move S2, [X8+32]
	118 Move V0, [X8+24]
	119 Move D9, [X31+48]
	120 Move D8, [X31+56]
	121 Call Transform.Rotate, X0, X1, V0
	122 Return 
	123 Call 0x1C17F20

Method: System.Void RotateAnchor(UnityEngine.Transform anchor, UnityEngine.Vector2 direction, UnityEngine.Quaternion referenceRotation)

Disassembly:
	0x03B6345C TBNZ X26, 0x0, 0x3B63484
	0x03B63460 LDR W8, [X20 + 0x3AC]
	0x03B63464 CMP W23, W8
	0x03B63468 B.LT 0x3B63534
	0x03B6346C B.NE 0x3B63484
	0x03B63470 ADD X0, X31, 0x10
	0x03B63474 MOV X1, X31
	0x03B63478 BL 0x3C8E684
	0x03B6347C FCMP S8, S0
	0x03B63480 B.LS 0x3B63534
	0x03B63484 LDR X21, [X20 + 0x30]
	0x03B63488 ADD X0, X31, 0x10
	0x03B6348C MOV X1, X31
	0x03B63490 BL 0x3C8E5C0
	0x03B63494 CBZ X21, 0x3B63698
	0x03B63498 MOV X1, X0
	0x03B6349C ADD X2, X31, 0x8
	0x03B634A0 MOV X0, X21
	0x03B634A4 MOV X3, X31
	0x03B634A8 BL 0x3B72C1C
	0x03B634AC TBZ X0, 0x0, 0x3B63534
	0x03B634B0 LDR X1, [X31 + 0x8]
	0x03B634B4 LDR X2, [X25]
	0x03B634B8 MOV X0, X19
	0x03B634BC BL 0x301C318
	0x03B634C0 TBNZ X0, 0x0, 0x3B63520
	0x03B634C4 LDR W10, [X19 + 0x1C]
	0x03B634C8 LDR X1, [X31 + 0x8]
	0x03B634CC LDR X8, [X19 + 0x10]
	0x03B634D0 LDR X9, [X27]
	0x03B634D4 ADD W10, W10, 0x1
	0x03B634D8 STR W10, [X19 + 0x1C]
	0x03B634DC CBZ X8, 0x3B63698
	0x03B634E0 LDRSW X10, [X19 + 0x18]
	0x03B634E4 LDR W11, [X8 + 0x18]
	0x03B634E8 CMP W10, W11
	0x03B634EC B.CS 0x3B63504
	0x03B634F0 ADD W9, W10, 0x1
	0x03B634F4 ADD X8, X8, X10, 0x3, LSL
	0x03B634F8 STR W9, [X19 + 0x18]
	0x03B634FC STR X1, [X8 + 0x20]
	0x03B63500 B 0x3B63518
	0x03B63504 LDR X8, [X9 + 0x20]
	0x03B63508 MOV X0, X19
	0x03B6350C LDR X8, [X8 + 0xC0]
	0x03B63510 LDR X2, [X8 + 0x70]
	0x03B63514 BL 0x301BF90
	0x03B63518 LDRB W8, [X20 + 0x2EC]
	0x03B6351C CBNZ W8, 0x3B63534
	0x03B63520 LDRSW X8, [X20 + 0x390]
	0x03B63524 ADD X22, X22, 0x1
	0x03B63528 ADD X24, X24, 0x2C
	0x03B6352C CMP X22, X8
	0x03B63530 B.LT 0x3B6342C
	0x03B63534 MOV X0, X20
	0x03B63538 BL 0x3B5201C
	0x03B6353C CBZ X0, 0x3B63678
	0x03B63540 ADRP X24, 0x5F7000
	0x03B63544 LDR X8, [X0]
	0x03B63548 LDR X24, [X24 + 0xCF8]
	0x03B6354C MOV X21, X0
	0x03B63550 LDRH W9, [X8 + 0x12E]
	0x03B63554 LDR X1, [X24]
	0x03B63558 CBZ X9, 0x3B6357C
	0x03B6355C LDR X10, [X8 + 0xB0]
	0x03B63560 ADD X10, X10, 0x8
	0x03B63564 LDUR X11, [X10 - 0x8]
	0x03B63568 CMP X11, X1
	0x03B6356C B.EQ 0x3B6358C
	0x03B63570 SUBS X9, X9, 0x1
	0x03B63574 ADD X10, X10, 0x10
	0x03B63578 B.NE 0x3B63564
	0x03B6357C MOV X0, X21
	0x03B63580 MOV W2, W31
	0x03B63584 BL 0x1C5C788
	0x03B63588 B 0x3B63598
	0x03B6358C LDRSW X9, [X10]
	0x03B63590 ADD X8, X8, X9, 0x4, LSL
	0x03B63594 ADD X0, X8, 0x138
	0x03B63598 LDP X8, X1, [X0]
	0x03B6359C MOV X0, X21
	0x03B635A0 BLR X8
	0x03B635A4 TBZ X0, 0x0, 0x3B63678
	0x03B635A8 ADRP X23, 0x5F7000
	0x03B635AC LDR X23, [X23 + 0x7C0]
	0x03B635B0 LDR X0, [X23]
	0x03B635B4 LDR W8, [X0 + 0xE0]
	0x03B635B8 CBNZ W8, 0x3B635C4
	0x03B635BC BL 0x1C16DFC
	0x03B635C0 LDR X0, [X23]
	0x03B635C4 LDR X9, [X0 + 0xB8]
	0x03B635C8 LDR X8, [X21]
	0x03B635CC LDR X1, [X24]
	0x03B635D0 LDR X22, [X9]
	0x03B635D4 LDRH W9, [X8 + 0x12E]
	0x03B635D8 CBZ X9, 0x3B635FC
	0x03B635DC LDR X10, [X8 + 0xB0]
	0x03B635E0 ADD X10, X10, 0x8
	0x03B635E4 LDUR X11, [X10 - 0x8]
	0x03B635E8 CMP X11, X1
	0x03B635EC B.EQ 0x3B6360C
	0x03B635F0 SUBS X9, X9, 0x1
	0x03B635F4 ADD X10, X10, 0x10
	0x03B635F8 B.NE 0x3B635E4
	0x03B635FC MOVZ W2, 0x3
	0x03B63600 MOV X0, X21
	0x03B63604 BL 0x1C5C788
	0x03B63608 B 0x3B6361C
	0x03B6360C LDR W9, [X10]
	0x03B63610 ADD W9, W9, 0x3
	0x03B63614 ADD X8, X8, W9, 0x4, SXTW

ISIL:
	001 Move [X31-80], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x877000
	012 Move W8, [X20+1450]
	013 Move V12, V1
	014 Move V13, V0
	015 Multiply S0, S0, S0
	016 Multiply S1, S1, S1
	017 Move V9, V5
	018 Move V8, V4
	019 Move V11, V3
	020 Move V10, V2
	021 Move X19, X1
	022 Add S14, S0, S1
	023 Compare W8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, 0x598000
	026 Move X0, [X0+1208]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+1450], W8
	030 Move X8, 0x598000
	031 Move X8, [X8+1208]
	032 Move X9, -50823168
	033 Move V0, [X9+576]
	034 NotImplemented "Instruction FABS not yet implemented."
	035 Move X8, [X8]
	036 Move S2, W31
	037 NotImplemented "Instruction FMAXNM not yet implemented."
	038 Multiply S0, S1, S0
	039 Move X8, [X8+184]
	040 Move S1, 8
	041 Move V3, [X8]
	042 Multiply S1, S3, S1
	043 NotImplemented "Instruction FCMP not yet implemented."
	044 NotImplemented "Instruction FCSEL not yet implemented."
	045 NotImplemented "Instruction FABD not yet implemented."
	046 NotImplemented "Instruction FCMP not yet implemented."
	047 Move V0, V13
	048 Move V1, V12
	049 Call 0x3EB2C40
	050 Move X20, 0x876000
	051 Move W8, [X20+1926]
	052 Move V12, V0
	053 Compare W8, 0
	054 JumpIfNotEqual {60}
	055 Move X0, 0x591000
	056 Move X0, [X0+1440]
	057 Call 0x1C17CF4
	058 Move W8, 1
	059 Move [X20+1926], W8
	060 Move X8, 0x591000
	061 Move X8, [X8+1440]
	062 Move X9, -50823168
	063 Move V0, [X9+1096]
	064 Move X0, X31
	065 Move X8, [X8]
	066 Multiply S0, S12, S0
	067 Move X8, [X8+184]
	068 Move S1, [X8+24]
	069 Move S2, [X8+28]
	070 Move V3, [X8+32]
	071 Call Quaternion.AngleAxis, V0, X0
	072 Compare X19, 0
	073 JumpIfEqual {127}
	074 Multiply S4, S9, S3
	075 Multiply S5, S10, S0
	076 Multiply S6, S11, S1
	077 Multiply S7, S8, S2
	078 Multiply S16, S10, S1
	079 Multiply S17, S9, S2
	080 Multiply S18, S8, S3
	081 Multiply S19, S11, S0
	082 Multiply S20, S11, S3
	083 Multiply S21, S11, S2
	084 Multiply S22, S10, S2
	085 Multiply S2, S10, S3
	086 Multiply S3, S8, S0
	087 Multiply S0, S9, S0
	088 Multiply S23, S9, S1
	089 Multiply S24, S8, S1
	090 Move X0, X19
	091 Move X20, [X31+64]
	092 Move X19, [X31+72]
	093 Move X30, [X31+56]
	094 Move D9, [X31+40]
	095 Move D8, [X31+48]
	096 Move D11, [X31+24]
	097 Move D10, [X31+32]
	098 Move D13, [X31+8]
	099 Move D12, [X31+16]
	100 Subtract S1, S4, S5
	101 Add S4, S17, S18
	102 Add S5, S23, S20
	103 Add S0, S0, S2
	104 Subtract S1, S1, S6
	105 Add S2, S16, S4
	106 Add S4, S3, S5
	107 Add S0, S21, S0
	108 Subtract S3, S1, S7
	109 Subtract S2, S2, S19
	110 Subtract S1, S4, S22
	111 Subtract S0, S0, S24
	112 Move X1, X31
	113 Move V14, [X31+80]
	114 Call Transform.set_rotation, X0, X1
	115 Return 
	116 Move X20, [X31+64]
	117 Move X19, [X31+72]
	118 Move X30, [X31+56]
	119 Move D9, [X31+40]
	120 Move D8, [X31+48]
	121 Move D11, [X31+24]
	122 Move D10, [X31+32]
	123 Move D13, [X31+8]
	124 Move D12, [X31+16]
	125 Move V14, [X31+80]
	126 Return 
	127 Call 0x1C17F20

Method: System.Void TranslateAnchor(UnityEngine.Transform rayOrigin, UnityEngine.Transform anchor, System.Single directionAmount)

Disassembly:
	0x03B63618 ADD X0, X8, 0x138
	0x03B6361C LDP X8, X4, [X0]
	0x03B63620 MOV X0, X21
	0x03B63624 MOV X1, X20
	0x03B63628 MOV X2, X19
	0x03B6362C MOV X3, X22
	0x03B63630 BLR X8
	0x03B63634 LDP W2, W8, [X19 + 0x18]
	0x03B63638 ADD W8, W8, 0x1
	0x03B6363C CMP W2, 0x1
	0x03B63640 STP W31, W8, [X19 + 0x18]
	0x03B63644 B.LT 0x3B63658
	0x03B63648 LDR X0, [X19 + 0x10]
	0x03B6364C MOV W1, W31
	0x03B63650 MOV X3, X31
	0x03B63654 BL 0x339FA34
	0x03B63658 LDR X8, [X23]
	0x03B6365C ADRP X9, 0x5F7000
	0x03B63660 MOV X0, X19
	0x03B63664 LDR X8, [X8 + 0xB8]
	0x03B63668 LDR X9, [X9 + 0xE08]
	0x03B6366C LDR X1, [X8]
	0x03B63670 LDR X2, [X9]
	0x03B63674 BL 0x301C194
	0x03B63678 LDP X20, X19, [X31 + 0xE0]
	0x03B6367C LDP X22, X21, [X31 + 0xD0]
	0x03B63680 LDP X24, X23, [X31 + 0xC0]
	0x03B63684 LDP X26, X25, [X31 + 0xB0]
	0x03B63688 LDP X30, X27, [X31 + 0xA0]
	0x03B6368C LDR V8, [X31 + 0x90]
	0x03B63690 ADD X31, X31, 0xF0
	0x03B63694 RET
	0x03B63698 BL 0x1C16F20
	0x03B6369C BL 0x1C16F28
	0x03B636A0 SUB X31, X31, 0xC0
	0x03B636A4 STP D15, D14, [X31 + 0x30]
	0x03B636A8 STP D13, D12, [X31 + 0x40]
	0x03B636AC STP D11, D10, [X31 + 0x50]
	0x03B636B0 STP D9, D8, [X31 + 0x60]
	0x03B636B4 STR X30, [X31 + 0x70]
	0x03B636B8 STP X26, X25, [X31 + 0x80]
	0x03B636BC STP X24, X23, [X31 + 0x90]
	0x03B636C0 STP X22, X21, [X31 + 0xA0]
	0x03B636C4 STP X20, X19, [X31 + 0xB0]
	0x03B636C8 LDR X8, [X31 + 0xC0]
	0x03B636CC ADRP X20, 0x87F000
	0x03B636D0 MOV V10.16B, V0.16B
	0x03B636D4 LDR V0, [X31 + 0xC8]
	0x03B636D8 STR X8, [X31 + 0x10]
	0x03B636DC LDRB W8, [X20 + 0x9A3]
	0x03B636E0 MOV V11.16B, V5.16B
	0x03B636E4 MOV V12.16B, V4.16B
	0x03B636E8 MOV V13.16B, V3.16B
	0x03B636EC MOV V8.16B, V2.16B
	0x03B636F0 MOV V9.16B, V1.16B
	0x03B636F4 MOV X19, X0
	0x03B636F8 STP S10, S1, [X31 + 0x20]
	0x03B636FC STR S2, [X31 + 0x28]
	0x03B63700 STR S0, [X31 + 0x18]
	0x03B63704 TBNZ X8, 0x0, 0x3B63770
	0x03B63708 ADRP X0, 0x5F8000
	0x03B6370C LDR X0, [X0 + 0x328]
	0x03B63710 BL 0x1C16CF4
	0x03B63714 ADRP X0, 0x590000
	0x03B63718 LDR X0, [X0 + 0x5F8]
	0x03B6371C BL 0x1C16CF4
	0x03B63720 ADRP X0, 0x5F8000
	0x03B63724 LDR X0, [X0 + 0x330]
	0x03B63728 BL 0x1C16CF4
	0x03B6372C ADRP X0, 0x5B9000
	0x03B63730 LDR X0, [X0 + 0x4F8]
	0x03B63734 BL 0x1C16CF4
	0x03B63738 ADRP X0, 0x5F8000
	0x03B6373C LDR X0, [X0 + 0x338]
	0x03B63740 BL 0x1C16CF4
	0x03B63744 ADRP X0, 0x5F8000
	0x03B63748 LDR X0, [X0 + 0x340]
	0x03B6374C BL 0x1C16CF4
	0x03B63750 ADRP X0, 0x5F8000
	0x03B63754 LDR X0, [X0 + 0x348]
	0x03B63758 BL 0x1C16CF4
	0x03B6375C ADRP X0, 0x5F7000
	0x03B63760 LDR X0, [X0 + 0x7C0]
	0x03B63764 BL 0x1C16CF4
	0x03B63768 MOVZ W8, 0x1
	0x03B6376C STRB W8, [X20 + 0x9A3]
	0x03B63770 STR W31, [X31 + 0x8]
	0x03B63774 STR X31, [X31]
	0x03B63778 LDR X0, [X19 + 0x388]
	0x03B6377C MOVZ W2, 0xA
	0x03B63780 MOV W1, W31
	0x03B63784 MOV X3, X31
	0x03B63788 BL 0x339FA34
	0x03B6378C STR W31, [X19 + 0x390]
	0x03B63790 ADRP X20, 0x875000
	0x03B63794 LDRB W8, [X20 + 0x785]
	0x03B63798 CBNZ W8, 0x3B637B0
	0x03B6379C ADRP X0, 0x590000
	0x03B637A0 LDR X0, [X0 + 0x5A8]
	0x03B637A4 BL 0x1C16CF4
	0x03B637A8 MOVZ W8, 0x1
	0x03B637AC STRB W8, [X20 + 0x785]
	0x03B637B0 ADRP X20, 0x590000
	0x03B637B4 LDR X20, [X20 + 0x5A8]
	0x03B637B8 FSUB S15, S13, S10
	0x03B637BC FSUB S13, S12, S9
	0x03B637C0 FSUB S14, S11, S8

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+112], X22
	012 Move [X31+120], X21
	013 Move [X31+128], X20
	014 Move [X31+136], X19
	015 Move X22, 0x880000
	016 Move W8, [X22+2460]
	017 Move V8, V0
	018 Move X19, X2
	019 Move X21, X1
	020 Move X20, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x5F8000
	026 Move X0, [X0+1984]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+2460], W8
	030 Move X22, 0x877000
	031 Move W8, [X22+1450]
	032 Move [X31+24], W31
	033 Move [X31+16], X31
	034 Move [X31+8], W31
	035 Move [X31], X31
	036 Compare W8, 0
	037 JumpIfNotEqual {43}
	038 Move X0, 0x598000
	039 Move X0, [X0+1208]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X22+1450], W8
	043 Move X8, 0x598000
	044 Move X8, [X8+1208]
	045 Move X9, -50823168
	046 Move V0, [X9+576]
	047 NotImplemented "Instruction FABS not yet implemented."
	048 Move X8, [X8]
	049 Move S2, W31
	050 NotImplemented "Instruction FMAXNM not yet implemented."
	051 Multiply S0, S1, S0
	052 Move X8, [X8+184]
	053 Move S1, 8
	054 Move V3, [X8]
	055 Multiply S1, S3, S1
	056 NotImplemented "Instruction FCMP not yet implemented."
	057 NotImplemented "Instruction FCSEL not yet implemented."
	058 NotImplemented "Instruction FABD not yet implemented."
	059 NotImplemented "Instruction FCMP not yet implemented."
	060 Move X8, 0x5F8000
	061 Move X8, [X8+1984]
	062 Move X0, [X8]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Add X1, X31, 16
	068 Add X2, X31, 0
	069 Move X0, X21
	070 Call XRRayInteractor.GetLineOriginAndDirection, X0, X1, X2
	071 Compare X19, 0
	072 JumpIfEqual {126}
	073 Move X0, X19
	074 Move X1, X31
	075 Call Transform.get_position, X0
	076 Move S12, [X31]
	077 Move S13, [X31+4]
	078 Move V14, [X31+8]
	079 Move V15, [X20+772]
	080 Move X0, X31
	081 Move V9, V0
	082 Move V10, V1
	083 Move V11, V2
	084 Call Time.get_deltaTime
	085 Multiply S1, S15, S8
	086 Move S2, [X31+16]
	087 Move S3, [X31+20]
	088 Move V4, [X31+24]
	089 Multiply S0, S1, S0
	090 Multiply S1, S12, S0
	091 Multiply S5, S13, S0
	092 Multiply S0, S14, S0
	093 Add S1, S9, S1
	094 Add S5, S10, S5
	095 Add S6, S11, S0
	096 Subtract S0, S1, S2
	097 Subtract S7, S5, S3
	098 Subtract S16, S6, S4
	099 Multiply S0, S12, S0
	100 Multiply S7, S13, S7
	101 Multiply S16, S14, S16
	102 Add S0, S0, S7
	103 Add S0, S16, S0
	104 NotImplemented "Instruction FCMP not yet implemented."
	105 NotImplemented "Instruction FCSEL not yet implemented."
	106 NotImplemented "Instruction FCSEL not yet implemented."
	107 NotImplemented "Instruction FCSEL not yet implemented."
	108 Move X0, X19
	109 Move X1, X31
	110 Call Transform.set_position, X0, X1
	111 Move X20, [X31+128]
	112 Move X19, [X31+136]
	113 Move X22, [X31+112]
	114 Move X21, [X31+120]
	115 Move X30, [X31+96]
	116 Move D9, [X31+80]
	117 Move D8, [X31+88]
	118 Move D11, [X31+64]
	119 Move D10, [X31+72]
	120 Move D13, [X31+48]
	121 Move D12, [X31+56]
	122 Move D15, [X31+32]
	123 Move D14, [X31+40]
	124 Add X31, X31, 144
	125 Return 
	126 Call 0x1C17F20

Method: System.Void PreprocessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)

Disassembly:
	0x03B570D4 MOV X0, X21
	0x03B570D8 MOV X1, X19
	0x03B570DC MOV X2, X31
	0x03B570E0 BL 0x33C0DE4
	0x03B570E4 CBZ X0, 0x3B57104
	0x03B570E8 LDR X23, [X24]
	0x03B570EC MOV X22, X0
	0x03B570F0 MOV X1, X23
	0x03B570F4 BL 0x1C16E00
	0x03B570F8 MOV X1, X0
	0x03B570FC CBNZ X0, 0x3B57108
	0x03B57100 B 0x3B57134
	0x03B57104 MOV X1, X31
	0x03B57108 MOV X0, X20
	0x03B5710C MOV X2, X21
	0x03B57110 BL 0x1C24138
	0x03B57114 CMP X21, X0
	0x03B57118 MOV X21, X0
	0x03B5711C B.NE 0x3B570D4
	0x03B57120 LDP X20, X19, [X31 + 0x30]
	0x03B57124 LDP X22, X21, [X31 + 0x20]
	0x03B57128 LDP X24, X23, [X31 + 0x10]
	0x03B5712C LDR X30, [X31], #0x40
	0x03B57130 RET
	0x03B57134 MOV X0, X22
	0x03B57138 MOV X1, X23
	0x03B5713C BL 0x1C171E0
	0x03B57140 STR X30, [X31 - 0x40]!
	0x03B57144 STP X24, X23, [X31 + 0x10]
	0x03B57148 STP X22, X21, [X31 + 0x20]
	0x03B5714C STP X20, X19, [X31 + 0x30]
	0x03B57150 ADRP X21, 0x88B000
	0x03B57154 LDRB W8, [X21 + 0x945]
	0x03B57158 MOV X19, X1
	0x03B5715C MOV X20, X0
	0x03B57160 TBNZ X8, 0x0, 0x3B57178
	0x03B57164 ADRP X0, 0x603000
	0x03B57168 LDR X0, [X0 + 0xED0]
	0x03B5716C BL 0x1C16CF4
	0x03B57170 MOVZ W8, 0x1
	0x03B57174 STRB W8, [X21 + 0x945]
	0x03B57178 ADRP X24, 0x603000
	0x03B5717C LDR X21, [X20 + 0x20]!
	0x03B57180 LDR X24, [X24 + 0xED0]
	0x03B57184 MOV X0, X21
	0x03B57188 MOV X1, X19
	0x03B5718C MOV X2, X31
	0x03B57190 BL 0x33C0FDC
	0x03B57194 CBZ X0, 0x3B571B4
	0x03B57198 LDR X23, [X24]
	0x03B5719C MOV X22, X0
	0x03B571A0 MOV X1, X23
	0x03B571A4 BL 0x1C16E00
	0x03B571A8 MOV X1, X0
	0x03B571AC CBNZ X0, 0x3B571B8
	0x03B571B0 B 0x3B571E4
	0x03B571B4 MOV X1, X31
	0x03B571B8 MOV X0, X20
	0x03B571BC MOV X2, X21
	0x03B571C0 BL 0x1C24138
	0x03B571C4 CMP X21, X0
	0x03B571C8 MOV X21, X0
	0x03B571CC B.NE 0x3B57184
	0x03B571D0 LDP X20, X19, [X31 + 0x30]
	0x03B571D4 LDP X22, X21, [X31 + 0x20]
	0x03B571D8 LDP X24, X23, [X31 + 0x10]
	0x03B571DC LDR X30, [X31], #0x40
	0x03B571E0 RET
	0x03B571E4 MOV X0, X22
	0x03B571E8 MOV X1, X23
	0x03B571EC BL 0x1C171E0
	0x03B571F0 STR X30, [X31 - 0x40]!
	0x03B571F4 STP X24, X23, [X31 + 0x10]
	0x03B571F8 STP X22, X21, [X31 + 0x20]
	0x03B571FC STP X20, X19, [X31 + 0x30]
	0x03B57200 ADRP X21, 0x88B000
	0x03B57204 LDRB W8, [X21 + 0x946]
	0x03B57208 MOV X19, X1
	0x03B5720C MOV X20, X0
	0x03B57210 TBNZ X8, 0x0, 0x3B57228
	0x03B57214 ADRP X0, 0x603000
	0x03B57218 LDR X0, [X0 + 0xED8]
	0x03B5721C BL 0x1C16CF4
	0x03B57220 MOVZ W8, 0x1
	0x03B57224 STRB W8, [X21 + 0x946]
	0x03B57228 ADRP X24, 0x603000
	0x03B5722C LDR X21, [X20 + 0x28]!
	0x03B57230 LDR X24, [X24 + 0xED8]
	0x03B57234 MOV X0, X21
	0x03B57238 MOV X1, X19
	0x03B5723C MOV X2, X31
	0x03B57240 BL 0x33C0DE4
	0x03B57244 CBZ X0, 0x3B57264
	0x03B57248 LDR X23, [X24]
	0x03B5724C MOV X22, X0
	0x03B57250 MOV X1, X23
	0x03B57254 BL 0x1C16E00
	0x03B57258 MOV X1, X0
	0x03B5725C CBNZ X0, 0x3B57268
	0x03B57260 B 0x3B57294
	0x03B57264 MOV X1, X31
	0x03B57268 MOV X0, X20
	0x03B5726C MOV X2, X21
	0x03B57270 BL 0x1C24138
	0x03B57274 CMP X21, X0
	0x03B57278 MOV X21, X0
	0x03B5727C B.NE 0x3B57234
	0x03B57280 LDP X20, X19, [X31 + 0x30]
	0x03B57284 LDP X22, X21, [X31 + 0x20]
	0x03B57288 LDP X24, X23, [X31 + 0x10]
	0x03B5728C LDR X30, [X31], #0x40
	0x03B57290 RET
	0x03B57294 MOV X0, X22
	0x03B57298 MOV X1, X23
	0x03B5729C BL 0x1C171E0
	0x03B572A0 STR X30, [X31 - 0x40]!
	0x03B572A4 STP X24, X23, [X31 + 0x10]
	0x03B572A8 STP X22, X21, [X31 + 0x20]
	0x03B572AC STP X20, X19, [X31 + 0x30]
	0x03B572B0 ADRP X21, 0x88B000
	0x03B572B4 LDRB W8, [X21 + 0x947]
	0x03B572B8 MOV X19, X1
	0x03B572BC MOV X20, X0
	0x03B572C0 TBNZ X8, 0x0, 0x3B572D8
	0x03B572C4 ADRP X0, 0x603000
	0x03B572C8 LDR X0, [X0 + 0xED8]
	0x03B572CC BL 0x1C16CF4
	0x03B572D0 MOVZ W8, 0x1
	0x03B572D4 STRB W8, [X21 + 0x947]
	0x03B572D8 ADRP X24, 0x603000
	0x03B572DC LDR X21, [X20 + 0x28]!
	0x03B572E0 LDR X24, [X24 + 0xED8]
	0x03B572E4 MOV X0, X21
	0x03B572E8 MOV X1, X19
	0x03B572EC MOV X2, X31
	0x03B572F0 BL 0x33C0FDC
	0x03B572F4 CBZ X0, 0x3B57314
	0x03B572F8 LDR X23, [X24]
	0x03B572FC MOV X22, X0
	0x03B57300 MOV X1, X23
	0x03B57304 BL 0x1C16E00
	0x03B57308 MOV X1, X0
	0x03B5730C CBNZ X0, 0x3B57318
	0x03B57310 B 0x3B57344
	0x03B57314 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], D9
	003 Move [X31+40], D8
	004 Move [X31+48], X30
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X21, 0x88C000
	009 Move W8, [X21+2461]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x604000
	017 Move X0, [X0+3736]
	018 Call 0x1C17CF4
	019 Move X0, 0x604000
	020 Move X0, [X0+2824]
	021 Call 0x1C17CF4
	022 Move X0, 0x604000
	023 Move X0, [X0+3744]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+2461], W8
	027 Move X0, X19
	028 Move W1, W20
	029 Call XRBaseControllerInteractor.PreprocessInteractor, X0, X1
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, X19
	032 Call XRRayInteractor.UpdateSamplePointsIfNecessary, X0
	033 Move X8, [X19+928]
	034 Compare X8, 0
	035 JumpIfEqual {60}
	036 Move W8, [X8+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X0, X19
	039 Call XRRayInteractor.UpdateRaycastHits, X0
	040 Move X0, X19
	041 Call XRRayInteractor.CacheRaycastHit, X0
	042 Move X0, X19
	043 Call XRRayInteractor.UpdateUIHover, X0
	044 Move W8, [X19+940]
	045 Move X1, [X19+928]
	046 Move W2, [X19+944]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CMP not yet implemented."
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSEL not yet implemented."
	051 Move W2, W8
	052 Move X3, [X19+960]
	053 Add X4, X31, 0
	054 Move X0, X19
	055 Move [X31], X31
	056 Move [X31+8], X31
	057 Move [X31+24], W31
	058 Move [X31+16], X31
	059 Call XRRayInteractor.CreateBezierCurve, X0, X1, X2, X3, X4
	060 Move X8, [X19]
	061 Move X1, [X19+864]
	062 Move X0, X19
	063 Move X9, [X8+1224]
	064 Move X2, [X8+1232]
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Move X0, [X19+864]
	067 Compare X0, 0
	068 JumpIfEqual {157}
	069 Move W8, [X0+24]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X8, 0x604000
	072 Move X8, [X8+3744]
	073 Move W1, W31
	074 Move X2, [X8]
	075 Call List`1<Object>.get_Item, X0, X1
	076 Move X20, X0
	077 Move X20, X31
	078 Move X8, [X19+816]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X0, X19
	081 Call XRBaseInteractor.get_hasSelection, X0
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {114}
	086 Compare X20, 0
	087 JumpIfEqual {119}
	088 Move W8, [X19+876]
	089 Compare W8, 0
	090 JumpIfNotEqual {119}
	091 Move X0, X31
	092 Call Time.get_time
	093 Move X8, [X19]
	094 Move X1, [X19+816]
	095 Move V9, [X19+872]
	096 Move X0, X19
	097 Move X9, [X8+2376]
	098 Move X2, [X8+2384]
	099 Move V8, V0
	100 NotImplemented "Instruction BLR not yet implemented."
	101 Subtract S1, S8, S9
	102 NotImplemented "Instruction FDIV not yet implemented."
	103 NotImplemented "Instruction FCMP not yet implemented."
	104 Move S1, 1
	105 NotImplemented "Instruction FCMP not yet implemented."
	106 Move X0, X19
	107 Call XRBaseInteractor.get_hasSelection, X0
	108 Move TEMP, X0
	109 And TEMP, TEMP, 1
	110 Compare TEMP, 1
	111 JumpIfEqual {119}
	112 Move W8, 1
	113 Move [X19+876], W8
	114 Move X0, X31
	115 Move [X19+816], X20
	116 Call Time.get_time
	117 Move [X19+872], S0
	118 Move [X19+876], W31
	119 Move W8, [X19+756]
	120 Compare W8, 0
	121 JumpIfEqual {149}
	122 Move X0, X19
	123 Call XRBaseInteractor.get_hasSelection, X0
	124 Move TEMP, X0
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfNotEqual {149}
	128 Move W8, [X19+884]
	129 Compare W8, 0
	130 JumpIfNotEqual {149}
	131 Move X0, X31
	132 Call Time.get_time
	133 Move X8, [X19]
	134 Move X1, [X19+816]
	135 Move V9, [X19+880]
	136 Move X0, X19
	137 Move X9, [X8+2392]
	138 Move X2, [X8+2400]
	139 Move V8, V0
	140 NotImplemented "Instruction BLR not yet implemented."
	141 Subtract S1, S8, S9
	142 NotImplemented "Instruction FDIV not yet implemented."
	143 NotImplemented "Instruction FCMP not yet implemented."
	144 Move S1, 1
	145 NotImplemented "Instruction FMIN not yet implemented."
	146 NotImplemented "Instruction FCMP not yet implemented."
	147 Move W8, 1
	148 Move [X19+884], W8
	149 Move X20, [X31+64]
	150 Move X19, [X31+72]
	151 Move X30, [X31+48]
	152 Move X21, [X31+56]
	153 Move D9, [X31+32]
	154 Move D8, [X31+40]
	155 Add X31, X31, 80
	156 Return 
	157 Call 0x1C17F20

Method: System.Void ProcessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)

Disassembly:
	0x03B6394C MOV W3, W20
	0x03B63950 MOV X4, X31
	0x03B63954 BL 0x3C8D8DC
	0x03B63958 B 0x3B63998
	0x03B6395C LDR W0, [X19 + 0x2E0]
	0x03B63960 LDR V8, [X19 + 0x2DC]
	0x03B63964 LDR X21, [X19 + 0x388]
	0x03B63968 MOV X1, X31
	0x03B6396C BL 0x3C35CB8
	0x03B63970 MOV W5, W0
	0x03B63974 ADD X1, X31, 0x20
	0x03B63978 ADD X2, X31, 0x0
	0x03B6397C ADD X3, X31, 0x10
	0x03B63980 MOV X0, X19
	0x03B63984 MOV V0.16B, V8.16B
	0x03B63988 MOV X4, X21
	0x03B6398C MOV V1.16B, V11.16B
	0x03B63990 MOV W6, W20
	0x03B63994 BL 0x3B63BAC
	0x03B63998 STR W0, [X19 + 0x390]
	0x03B6399C CMP W0, 0x1
	0x03B639A0 B.LT 0x3B63B80
	0x03B639A4 ADRP X25, 0x5B9000
	0x03B639A8 LDR W8, [X19 + 0x2E4]
	0x03B639AC LDR X25, [X25 + 0x4F8]
	0x03B639B0 CBZ W8, 0x3B639C4
	0x03B639B4 CMP W8, 0x2
	0x03B639B8 B.NE 0x3B63A78
	0x03B639BC MOVZ W0, 0x1
	0x03B639C0 B 0x3B639E4
	0x03B639C4 ADRP X8, 0x590000
	0x03B639C8 LDR X8, [X8 + 0x5F8]
	0x03B639CC LDR X0, [X8]
	0x03B639D0 LDR W8, [X0 + 0xE0]
	0x03B639D4 CBNZ W8, 0x3B639DC
	0x03B639D8 BL 0x1C16DFC
	0x03B639DC MOV X0, X31
	0x03B639E0 BL 0x3C8A750
	0x03B639E4 LDR W8, [X19 + 0x2E8]
	0x03B639E8 TBZ X0, 0x0, 0x3B63A80
	0x03B639EC CBNZ W8, 0x3B63A80
	0x03B639F0 ADRP X26, 0x5F8000
	0x03B639F4 LDR X26, [X26 + 0x348]
	0x03B639F8 LDR X21, [X19 + 0x30]
	0x03B639FC LDR X20, [X19 + 0x388]
	0x03B63A00 LDR W22, [X19 + 0x390]
	0x03B63A04 LDR X0, [X26]
	0x03B63A08 LDR W8, [X0 + 0xE0]
	0x03B63A0C CBNZ W8, 0x3B63A18
	0x03B63A10 BL 0x1C16DFC
	0x03B63A14 LDR X0, [X26]
	0x03B63A18 LDR X8, [X0 + 0xB8]
	0x03B63A1C LDR X23, [X8 + 0x8]
	0x03B63A20 CBNZ X23, 0x3B63B10
	0x03B63A24 LDR W8, [X0 + 0xE0]
	0x03B63A28 CBNZ W8, 0x3B63A34
	0x03B63A2C BL 0x1C16DFC
	0x03B63A30 LDR X0, [X26]
	0x03B63A34 ADRP X9, 0x5F8000
	0x03B63A38 LDR X8, [X0 + 0xB8]
	0x03B63A3C LDR X9, [X9 + 0x328]
	0x03B63A40 LDR X24, [X8]
	0x03B63A44 LDR X0, [X9]
	0x03B63A48 BL 0x1C16F10
	0x03B63A4C ADRP X8, 0x5F8000
	0x03B63A50 LDR X8, [X8 + 0x338]
	0x03B63A54 MOV X1, X24
	0x03B63A58 MOV X3, X31
	0x03B63A5C MOV X23, X0
	0x03B63A60 LDR X2, [X8]
	0x03B63A64 BL 0x2D2F428
	0x03B63A68 LDR X8, [X26]
	0x03B63A6C LDR X8, [X8 + 0xB8]
	0x03B63A70 STR X23, [X8 + 0x8]
	0x03B63A74 B 0x3B63B10
	0x03B63A78 LDR W8, [X19 + 0x2E8]
	0x03B63A7C MOV W0, W31
	0x03B63A80 CMP W8, 0x1
	0x03B63A84 B.NE 0x3B63B48
	0x03B63A88 TBNZ X0, 0x0, 0x3B63B48
	0x03B63A8C ADRP X26, 0x5F8000
	0x03B63A90 LDR X26, [X26 + 0x348]
	0x03B63A94 LDR X21, [X19 + 0x30]
	0x03B63A98 LDR X20, [X19 + 0x388]
	0x03B63A9C LDR W22, [X19 + 0x390]
	0x03B63AA0 LDR X0, [X26]
	0x03B63AA4 LDR W8, [X0 + 0xE0]
	0x03B63AA8 CBNZ W8, 0x3B63AB4
	0x03B63AAC BL 0x1C16DFC
	0x03B63AB0 LDR X0, [X26]
	0x03B63AB4 LDR X8, [X0 + 0xB8]
	0x03B63AB8 LDR X23, [X8 + 0x10]
	0x03B63ABC CBNZ X23, 0x3B63B10
	0x03B63AC0 LDR W8, [X0 + 0xE0]
	0x03B63AC4 CBNZ W8, 0x3B63AD0
	0x03B63AC8 BL 0x1C16DFC
	0x03B63ACC LDR X0, [X26]
	0x03B63AD0 ADRP X9, 0x5F8000
	0x03B63AD4 LDR X8, [X0 + 0xB8]
	0x03B63AD8 LDR X9, [X9 + 0x328]
	0x03B63ADC LDR X24, [X8]
	0x03B63AE0 LDR X0, [X9]
	0x03B63AE4 BL 0x1C16F10
	0x03B63AE8 ADRP X8, 0x5F8000
	0x03B63AEC LDR X8, [X8 + 0x340]
	0x03B63AF0 MOV X1, X24
	0x03B63AF4 MOV X3, X31
	0x03B63AF8 MOV X23, X0
	0x03B63AFC LDR X2, [X8]
	0x03B63B00 BL 0x2D2F428
	0x03B63B04 LDR X8, [X26]
	0x03B63B08 LDR X8, [X8 + 0xB8]
	0x03B63B0C STR X23, [X8 + 0x10]
	0x03B63B10 ADRP X8, 0x5F7000
	0x03B63B14 LDR X8, [X8 + 0x7C0]
	0x03B63B18 LDR X0, [X8]
	0x03B63B1C LDR W8, [X0 + 0xE0]
	0x03B63B20 CBNZ W8, 0x3B63B28
	0x03B63B24 BL 0x1C16DFC
	0x03B63B28 MOV X0, X21
	0x03B63B2C MOV X1, X20
	0x03B63B30 MOV W2, W22
	0x03B63B34 MOV X3, X23
	0x03B63B38 BL 0x3B64370
	0x03B63B3C MOV W20, W0
	0x03B63B40 STR W0, [X19 + 0x390]
	0x03B63B44 B 0x3B63B4C
	0x03B63B48 LDR W20, [X19 + 0x390]
	0x03B63B4C LDR X0, [X25]
	0x03B63B50 ADRP X22, 0x5F8000
	0x03B63B54 LDR X21, [X19 + 0x388]
	0x03B63B58 LDR X19, [X19 + 0x398]
	0x03B63B5C LDR W8, [X0 + 0xE0]
	0x03B63B60 LDR X22, [X22 + 0x330]
	0x03B63B64 CBNZ W8, 0x3B63B6C
	0x03B63B68 BL 0x1C16DFC
	0x03B63B6C LDR X3, [X22]
	0x03B63B70 MOV X0, X21
	0x03B63B74 MOV X1, X19
	0x03B63B78 MOV W2, W20
	0x03B63B7C BL 0x22561D0
	0x03B63B80 LDP X20, X19, [X31 + 0xB0]
	0x03B63B84 LDP X22, X21, [X31 + 0xA0]
	0x03B63B88 LDP X24, X23, [X31 + 0x90]
	0x03B63B8C LDP X26, X25, [X31 + 0x80]
	0x03B63B90 LDR X30, [X31 + 0x70]
	0x03B63B94 LDP D9, D8, [X31 + 0x60]
	0x03B63B98 LDP D11, D10, [X31 + 0x50]
	0x03B63B9C LDP D13, D12, [X31 + 0x40]
	0x03B63BA0 LDP D15, D14, [X31 + 0x30]
	0x03B63BA4 ADD X31, X31, 0xC0
	0x03B63BA8 RET
	0x03B63BAC STP D15, D14, [X31 - 0xA0]!
	0x03B63BB0 STP D13, D12, [X31 + 0x10]
	0x03B63BB4 STP D11, D10, [X31 + 0x20]
	0x03B63BB8 STP D9, D8, [X31 + 0x30]
	0x03B63BBC STP X29, X30, [X31 + 0x40]
	0x03B63BC0 STP X28, X27, [X31 + 0x50]
	0x03B63BC4 STP X26, X25, [X31 + 0x60]
	0x03B63BC8 STP X24, X23, [X31 + 0x70]
	0x03B63BCC STP X22, X21, [X31 + 0x80]
	0x03B63BD0 STP X20, X19, [X31 + 0x90]
	0x03B63BD4 SUB X31, X31, 0x180
	0x03B63BD8 STP W5, W6, [X31 + 0x2C]
	0x03B63BDC ADRP X20, 0x87F000
	0x03B63BE0 ADRP X19, 0x5F7000
	0x03B63BE4 LDRB W8, [X20 + 0x9A4]
	0x03B63BE8 LDR X19, [X19 + 0x7C0]
	0x03B63BEC MOV V8.16B, V1.16B
	0x03B63BF0 MOV X21, X4
	0x03B63BF4 MOV X22, X3
	0x03B63BF8 MOV X23, X2
	0x03B63BFC MOV V9.16B, V0.16B
	0x03B63C00 MOV X25, X1
	0x03B63C04 MOV X24, X0
	0x03B63C08 TBNZ X8, 0x0, 0x3B63C44
	0x03B63C0C ADRP X0, 0x5F7000
	0x03B63C10 LDR X0, [X0 + 0x780]
	0x03B63C14 BL 0x1C16CF4
	0x03B63C18 ADRP X0, 0x5F7000
	0x03B63C1C LDR X0, [X0 + 0x788]
	0x03B63C20 BL 0x1C16CF4
	0x03B63C24 ADRP X0, 0x5F8000
	0x03B63C28 LDR X0, [X0 + 0x350]
	0x03B63C2C BL 0x1C16CF4
	0x03B63C30 ADRP X0, 0x5F7000
	0x03B63C34 LDR X0, [X0 + 0x7C0]
	0x03B63C38 BL 0x1C16CF4
	0x03B63C3C MOVZ W8, 0x1
	0x03B63C40 STRB W8, [X20 + 0x9A4]
	0x03B63C44 LDR X0, [X19]
	0x03B63C48 MOVI V0.2D, 0x0
	0x03B63C4C ADD X8, X31, 0x100
	0x03B63C50 STR X31, [X31 + 0x148]
	0x03B63C54 STR W31, [X31 + 0x140]
	0x03B63C58 STP X31, X31, [X31 + 0x130]
	0x03B63C5C STP X31, X31, [X31 + 0xF0]
	0x03B63C60 STR W31, [X31 + 0xE8]
	0x03B63C64 STUR V0, [X8 + 0x6C]
	0x03B63C68 STP V0, V0, [X31 + 0x150]
	0x03B63C6C STUR V0, [X8 + 0x1C]
	0x03B63C70 STP V0, V0, [X31 + 0x100]
	0x03B63C74 STR X31, [X31 + 0xE0]
	0x03B63C78 STR W31, [X31 + 0xD8]
	0x03B63C7C STR X31, [X31 + 0xD0]
	0x03B63C80 LDR W8, [X0 + 0xE0]
	0x03B63C84 CBNZ W8, 0x3B63C90
	0x03B63C88 BL 0x1C16DFC
	0x03B63C8C LDR X0, [X19]
	0x03B63C90 LDR X8, [X0 + 0xB8]
	0x03B63C94 LDR X0, [X8 + 0x10]
	0x03B63C98 CBZ X0, 0x3B64368
	0x03B63C9C STR X25, [X31 + 0x38]
	0x03B63CA0 ADRP X8, 0x5F7000
	0x03B63CA4 LDR X8, [X8 + 0x788]
	0x03B63CA8 LDR X1, [X8]
	0x03B63CAC BL 0x2DBE450
	0x03B63CB0 LDR X9, [X19]
	0x03B63CB4 MOVZ W8, 0x447A0000
	0x03B63CB8 LDP S0, S1, [X22]
	0x03B63CBC LDR V2, [X22 + 0x8]
	0x03B63CC0 LDR X9, [X9 + 0xB8]
	0x03B63CC4 LDP S3, S4, [X23]
	0x03B63CC8 LDR V5, [X23 + 0x8]
	0x03B63CCC LDP W2, W3, [X31 + 0x2C]
	0x03B63CD0 LDR X1, [X9 + 0x8]
	0x03B63CD4 FMOV S6, W8
	0x03B63CD8 FMINNM S15, S8, S6
	0x03B63CDC ADD X0, X24, 0x3C8
	0x03B63CE0 MOV V6.16B, V15.16B
	0x03B63CE4 MOV X4, X31
	0x03B63CE8 STR X0, [X31 + 0x20]
	0x03B63CEC BL 0x3C8C4DC
	0x03B63CF0 CMP W0, 0x1
	0x03B63CF4 B.LT 0x3B63E80
	0x03B63CF8 MOV X20, X31
	0x03B63CFC MOV W25, W31
	0x03B63D00 MOV W29, W0
	0x03B63D04 MOVZ W27, 0x20
	0x03B63D08 MOVZ W26, 0x2C
	0x03B63D0C FMOV S10, 1.5
	0x03B63D10 LDR X0, [X19]
	0x03B63D14 LDR W8, [X0 + 0xE0]
	0x03B63D18 CBNZ W8, 0x3B63D24
	0x03B63D1C BL 0x1C16DFC
	0x03B63D20 LDR X0, [X19]
	0x03B63D24 LDR X8, [X0 + 0xB8]
	0x03B63D28 LDR X8, [X8 + 0x8]
	0x03B63D2C CBZ X8, 0x3B64368
	0x03B63D30 LDR W9, [X8 + 0x18]
	0x03B63D34 CMP X20, X9
	0x03B63D38 B.CS 0x3B6436C
	0x03B63D3C ADD X8, X8, X27
	0x03B63D40 LDR W9, [X8 + 0x28]
	0x03B63D44 LDR X10, [X8 + 0x20]
	0x03B63D48 LDP V1, V0, [X8]
	0x03B63D4C ADD X0, X31, 0x150
	0x03B63D50 MOV X1, X31
	0x03B63D54 STR W9, [X31 + 0x178]
	0x03B63D58 STR X10, [X31 + 0x170]
	0x03B63D5C STP V1, V0, [X31 + 0x150]
	0x03B63D60 BL 0x3C8E684
	0x03B63D64 FCMP S0, S15
	0x03B63D68 B.GT 0x3B63E6C
	0x03B63D6C LDR X28, [X24 + 0x30]
	0x03B63D70 ADD X0, X31, 0x150
	0x03B63D74 MOV X1, X31
	0x03B63D78 BL 0x3C8E5C0
	0x03B63D7C CBZ X28, 0x3B64368
	0x03B63D80 MOV X1, X0
	0x03B63D84 ADD X2, X31, 0x148
	0x03B63D88 MOV X0, X28
	0x03B63D8C MOV X3, X31
	0x03B63D90 BL 0x3B72C1C
	0x03B63D94 TBNZ X0, 0x0, 0x3B63DD8
	0x03B63D98 ADD X0, X31, 0x150
	0x03B63D9C MOV X1, X31
	0x03B63DA0 BL 0x3C8E684
	0x03B63DA4 FMOV W8, S15
	0x03B63DA8 AND W8, W8, 0x7FFFFFFF
	0x03B63DAC FCMP S0, S15
	0x03B63DB0 MOVZ W9, 0x7F800000
	0x03B63DB4 CCMP W8, W9, 0x2, PL
	0x03B63DB8 ADD X0, X31, 0x150
	0x03B63DBC MOV X1, X31
	0x03B63DC0 FCSEL S15, S0, S15, HI
	0x03B63DC4 BL 0x3C8E684
	0x03B63DC8 FADD S0, S0, S10
	0x03B63DCC ADD X0, X31, 0x150
	0x03B63DD0 MOV X1, X31
	0x03B63DD4 BL 0x3C8E68C
	0x03B63DD8 ADD X8, X31, 0x100
	0x03B63DDC LDP V0, V1, [X31 + 0x150]
	0x03B63DE0 LDUR V2, [X8 + 0x6C]
	0x03B63DE4 STP V0, V1, [X31 + 0xA0]
	0x03B63DE8 STUR V2, [X31 + 0xBC]
	0x03B63DEC CBZ X21, 0x3B64368
	0x03B63DF0 LDP V0, V1, [X31 + 0xA0]
	0x03B63DF4 LDUR V2, [X31 + 0xBC]
	0x03B63DF8 STP V0, V1, [X31 + 0x70]
	0x03B63DFC STUR V2, [X31 + 0x8C]
	0x03B63E00 LDR W8, [X21 + 0x18]
	0x03B63E04 CMP W25, W8
	0x03B63E08 B.CS 0x3B6436C
	0x03B63E0C LDUR V0, [X31 + 0x8C]
	0x03B63E10 LDP V2, V1, [X31 + 0x70]
	0x03B63E14 NOP
	0x03B63E18 SMADDL X8, X25, X26, X21
	0x03B63E1C STUR V0, [X8 + 0x3C]
	0x03B63E20 STP V2, V1, [X8 + 0x20]
	0x03B63E24 LDR X0, [X19]
	0x03B63E28 LDR W8, [X0 + 0xE0]
	0x03B63E2C CBNZ W8, 0x3B63E38
	0x03B63E30 BL 0x1C16DFC
	0x03B63E34 LDR X0, [X19]
	0x03B63E38 LDR X8, [X0 + 0xB8]
	0x03B63E3C ADD X0, X31, 0x150
	0x03B63E40 MOV X1, X31
	0x03B63E44 LDR X28, [X8 + 0x10]
	0x03B63E48 BL 0x3C8E5C0
	0x03B63E4C CBZ X28, 0x3B64368
	0x03B63E50 ADRP X8, 0x5F7000
	0x03B63E54 LDR X8, [X8 + 0x780]
	0x03B63E58 MOV X1, X0
	0x03B63E5C MOV X0, X28
	0x03B63E60 LDR X2, [X8]
	0x03B63E64 BL 0x2DBEF30
	0x03B63E68 ADD W25, W25, 0x1
	0x03B63E6C ADD X20, X20, 0x1
	0x03B63E70 CMP X29, X20
	0x03B63E74 ADD X27, X27, 0x2C
	0x03B63E78 B.NE 0x3B63D10
	0x03B63E7C B 0x3B63E84
	0x03B63E80 MOV W25, W31
	0x03B63E84 ADRP X8, 0xFFFFFFFFFCF87000
	0x03B63E88 ADRP X20, 0x87E000
	0x03B63E8C LDR V0, [X8 + 0x104]
	0x03B63E90 LDRB W8, [X20 + 0x55C]
	0x03B63E94 FMUL S8, S9, S0
	0x03B63E98 FMOV S9, 0.5
	0x03B63E9C CBNZ W8, 0x3B63EB4
	0x03B63EA0 ADRP X0, 0x590000
	0x03B63EA4 LDR X0, [X0 + 0x5A8]
	0x03B63EA8 BL 0x1C16CF4
	0x03B63EAC MOVZ W8, 0x1
	0x03B63EB0 STRB W8, [X20 + 0x55C]
	0x03B63EB4 ADRP X20, 0x590000
	0x03B63EB8 LDR X20, [X20 + 0x5A8]
	0x03B63EBC FMUL S8, S8, S9
	0x03B63EC0 LDR X0, [X20]
	0x03B63EC4 LDR W8, [X0 + 0xE0]
	0x03B63EC8 CBNZ W8, 0x3B63ED0
	0x03B63ECC BL 0x1C16DFC
	0x03B63ED0 FCVT S0, S8
	0x03B63ED4 BL 0x3EB1DD0
	0x03B63ED8 LDR X9, [X31 + 0x38]
	0x03B63EDC ADRP X26, 0x875000
	0x03B63EE0 LDR V8, [X22]
	0x03B63EE4 LDUR V9, [X22 + 0x4]
	0x03B63EE8 LDR V11, [X9]
	0x03B63EEC LDRB W8, [X26 + 0x784]
	0x03B63EF0 LDUR V12, [X9 + 0x4]
	0x03B63EF4 MOV V10.16B, V0.16B
	0x03B63EF8 CBNZ W8, 0x3B63F10
	0x03B63EFC ADRP X0, 0x590000
	0x03B63F00 LDR X0, [X0 + 0x5A8]
	0x03B63F04 BL 0x1C16CF4
	0x03B63F08 MOVZ W8, 0x1
	0x03B63F0C STRB W8, [X26 + 0x784]
	0x03B63F10 LDR X0, [X20]
	0x03B63F14 FSUB S11, S8, S11
	0x03B63F18 FSUB V8.2S, V9.2S, V12.2S
	0x03B63F1C LDR W8, [X0 + 0xE0]
	0x03B63F20 CBNZ W8, 0x3B63F28
	0x03B63F24 BL 0x1C16DFC
	0x03B63F28 FMUL S0, S11, S11
	0x00000000 INVALID
	0x03B63F30 FADD S0, S0, S1
	0x03B63F34 MOV S1, V1.S[1]
	0x03B63F38 FADD S0, S0, S1
	0x03B63F3C FSQRT S8, S0
	0x03B63F40 FCMP S8, S15
	0x03B63F44 B.PL 0x3B642E8
	0x00000000 INVALID
	0x03B63F4C ADRP X8, 0xFFFFFFFFFCF87000
	0x03B63F50 STR S0, [X31 + 0x18]
	0x03B63F54 LDR V0, [X8 + 0x240]
	0x03B63F58 ADRP X28, 0x5F8000
	0x03B63F5C ADRP X9, 0xFFFFFFFFFCF86000
	0x03B63F60 LDR X28, [X28 + 0x350]
	0x03B63F64 STR S0, [X31 + 0x34]
	0x03B63F68 LDR V0, [X9 + 0xF20]
	0x03B63F6C STR S15, [X31 + 0x1C]
	0x03B63F70 STR S0, [X31 + 0x14]
	0x03B63F74 LDR V0, [X31 + 0x18]
	0x03B63F78 ADD X1, X31, 0x138
	0x03B63F7C ADD X2, X31, 0x134
	0x03B63F80 ADD X3, X31, 0x130
	0x03B63F84 MOV V1.16B, V8.16B
	0x03B63F88 MOV V2.16B, V15.16B
	0x03B63F8C MOV X0, X23
	0x03B63F90 MOV X4, X31
	0x03B63F94 STR S8, [X31 + 0x38]
	0x03B63F98 BL 0x3B8C530
	0x03B63F9C LDR X0, [X19]
	0x03B63FA0 LDR V15, [X22]
	0x03B63FA4 LDR V10, [X22 + 0x8]
	0x03B63FA8 LDR V8, [X31 + 0x138]
	0x03B63FAC LDR V9, [X31 + 0x140]
	0x03B63FB0 LDR V14, [X31 + 0x134]
	0x03B63FB4 LDP S12, S11, [X23]
	0x03B63FB8 LDR W8, [X0 + 0xE0]
	0x03B63FBC LDR V13, [X23 + 0x8]
	0x03B63FC0 CBNZ W8, 0x3B63FCC
	0x03B63FC4 BL 0x1C16DFC
	0x03B63FC8 LDR X0, [X19]
	0x03B63FCC LDR X8, [X0 + 0xB8]
	0x03B63FD0 LDR V7, [X31 + 0x130]
	0x03B63FD4 LDR X0, [X31 + 0x20]
	0x03B63FD8 LDP W2, W3, [X31 + 0x2C]
	0x03B63FDC LDR X1, [X8 + 0x8]
	0x03B63FE0 FADD V0.2S, V15.2S, V8.2S
	0x03B63FE4 FADD S2, S10, S9
	0x03B63FE8 MOV S1, V0.S[1]
	0x03B63FEC MOV V3.16B, V14.16B
	0x03B63FF0 MOV V4.16B, V12.16B
	0x03B63FF4 MOV V5.16B, V11.16B
	0x03B63FF8 MOV V6.16B, V13.16B
	0x03B63FFC MOV X4, X31
	0x03B64000 BL 0x3C8D8DC
	0x03B64004 CMP W0, 0x1
	0x03B64008 B.LT 0x3B642D0
	0x03B6400C LDR V15, [X31 + 0x1C]
	0x03B64010 LDR V8, [X31 + 0x38]
	0x03B64014 CBZ X21, 0x3B64368
	0x03B64018 FMOV S0, 1
	0x03B6401C MOV X26, X31
	0x03B64020 FADD S14, S8, S0
	0x03B64024 MOV W20, W0
	0x03B64028 MOVZ W27, 0x20
	0x03B6402C LDR W8, [X21 + 0x18]
	0x03B64030 CMP W25, W8
	0x03B64034 B.GE 0x3B642D8
	0x03B64038 LDR X0, [X19]
	0x03B6403C LDR W8, [X0 + 0xE0]
	0x03B64040 CBNZ W8, 0x3B6404C
	0x03B64044 BL 0x1C16DFC
	0x03B64048 LDR X0, [X19]
	0x03B6404C LDR X8, [X0 + 0xB8]
	0x03B64050 LDR X8, [X8 + 0x8]
	0x03B64054 CBZ X8, 0x3B64368
	0x03B64058 LDR W9, [X8 + 0x18]
	0x03B6405C CMP X26, X9
	0x03B64060 B.CS 0x3B6436C
	0x03B64064 ADD X8, X8, X27
	0x03B64068 LDR W9, [X8 + 0x28]
	0x03B6406C LDR X10, [X8 + 0x20]
	0x03B64070 LDP V1, V0, [X8]
	0x03B64074 ADD X0, X31, 0x100
	0x03B64078 MOV X1, X31
	0x03B6407C STR W9, [X31 + 0x128]
	0x03B64080 STR X10, [X31 + 0x120]
	0x03B64084 STP V1, V0, [X31 + 0x100]
	0x03B64088 BL 0x3C8E684
	0x03B6408C FCMP S0, S15
	0x03B64090 B.GT 0x3B642BC
	0x03B64094 LDR X0, [X19]
	0x03B64098 LDR W8, [X0 + 0xE0]
	0x03B6409C CBNZ W8, 0x3B640A8
	0x03B640A0 BL 0x1C16DFC
	0x03B640A4 LDR X0, [X19]
	0x03B640A8 LDR X8, [X0 + 0xB8]
	0x03B640AC ADD X0, X31, 0x100
	0x03B640B0 MOV X1, X31
	0x03B640B4 LDR X29, [X8 + 0x10]
	0x03B640B8 BL 0x3C8E5C0
	0x03B640BC CBZ X29, 0x3B64368
	0x03B640C0 LDR X2, [X28]
	0x03B640C4 MOV X1, X0
	0x03B640C8 MOV X0, X29
	0x03B640CC BL 0x2DBE4B0
	0x03B640D0 TBNZ X0, 0x0, 0x3B642BC
	0x03B640D4 LDR X29, [X24 + 0x30]
	0x03B640D8 ADD X0, X31, 0x100
	0x03B640DC MOV X1, X31
	0x03B640E0 BL 0x3C8E5C0
	0x03B640E4 CBZ X29, 0x3B64368
	0x03B640E8 MOV X1, X0
	0x03B640EC ADD X2, X31, 0x148
	0x03B640F0 MOV X0, X29
	0x03B640F4 MOV X3, X31
	0x03B640F8 BL 0x3B72C1C
	0x03B640FC TBZ X0, 0x0, 0x3B642BC
	0x03B64100 ADD X0, X31, 0x100
	0x03B64104 MOV X1, X31
	0x03B64108 BL 0x3C8E684
	0x03B6410C ADRP X8, 0x875000
	0x03B64110 LDRB W8, [X8 + 0x5AA]
	0x03B64114 MOV V11.16B, V0.16B
	0x03B64118 CBNZ W8, 0x3B64134
	0x03B6411C ADRP X0, 0x596000
	0x03B64120 LDR X0, [X0 + 0x4B8]
	0x03B64124 BL 0x1C16CF4
	0x03B64128 ADRP X8, 0x875000
	0x03B6412C MOVZ W9, 0x1
	0x03B64130 STRB W9, [X8 + 0x5AA]
	0x03B64134 ADRP X8, 0x596000
	0x03B64138 LDR X8, [X8 + 0x4B8]
	0x03B6413C LDR V3, [X31 + 0x34]
	0x03B64140 FABS S1, S11
	0x03B64144 FMOV S2, W31
	0x03B64148 LDR X8, [X8]
	0x03B6414C FMAXNM S1, S1, S2
	0x03B64150 FMUL S1, S1, S3
	0x03B64154 FMOV S3, 8
	0x03B64158 LDR X8, [X8 + 0xB8]
	0x03B6415C LDR V0, [X8]
	0x03B64160 FMUL S0, S0, S3
	0x03B64164 FCMP S1, S0
	0x03B64168 FCSEL S0, S1, S0, GT
	0x03B6416C FABD S1, S2, S2
	0x03B64170 FCMP S1, S0
	0x03B64174 B.PL 0x3B641F8
	0x03B64178 ADD X0, X31, 0x100
	0x03B6417C MOV X1, X31
	0x03B64180 BL 0x3C8E66C
	0x03B64184 ADRP X8, 0x874000
	0x03B64188 LDRB W8, [X8 + 0x783]
	0x03B6418C MOV V11.16B, V0.16B
	0x03B64190 MOV V12.16B, V1.16B
	0x03B64194 MOV V13.16B, V2.16B
	0x03B64198 CBNZ W8, 0x3B641B4
	0x03B6419C ADRP X0, 0x58F000
	0x03B641A0 LDR X0, [X0 + 0x5A0]
	0x03B641A4 BL 0x1C16CF4
	0x03B641A8 MOVZ W8, 0x1
	0x03B641AC ADRP X9, 0x874000
	0x03B641B0 STRB W8, [X9 + 0x783]
	0x03B641B4 ADRP X8, 0x58F000
	0x03B641B8 LDR X8, [X8 + 0x5A0]
	0x03B641BC LDR X8, [X8]
	0x03B641C0 LDR X8, [X8 + 0xB8]
	0x03B641C4 LDP S0, S1, [X8]
	0x03B641C8 LDR V2, [X8 + 0x8]
	0x03B641CC FSUB S0, S11, S0
	0x03B641D0 FSUB S1, S12, S1
	0x03B641D4 FSUB S2, S13, S2
	0x03B641D8 FMUL S0, S0, S0
	0x03B641DC FMUL S1, S1, S1
	0x03B641E0 FADD S0, S0, S1
	0x03B641E4 FMUL S1, S2, S2
	0x03B641E8 FADD S0, S1, S0
	0x03B641EC LDR V1, [X31 + 0x14]
	0x03B641F0 FCMP S0, S1
	0x03B641F4 B.MI 0x3B642BC
	0x03B641F8 LDP S0, S1, [X22]
	0x03B641FC LDR V2, [X22 + 0x8]
	0x03B64200 MOV X0, X31
	0x03B64204 BL 0x3887BE4
	0x03B64208 ADD X0, X31, 0x100
	0x03B6420C MOV X1, X31
	0x03B64210 STP S0, S1, [X31 + 0xF0]
	0x03B64214 STR S2, [X31 + 0xF8]
	0x03B64218 BL 0x3C8E66C
	0x03B6421C MOV X0, X31
	0x03B64220 BL 0x3887BE4
	0x03B64224 STP S0, S1, [X31 + 0xE0]
	0x03B64228 STR S2, [X31 + 0xE8]
	0x03B6422C LDP S0, S1, [X23]
	0x03B64230 LDR V2, [X23 + 0x8]
	0x03B64234 MOV X0, X31
	0x03B64238 BL 0x3887BE4
	0x03B6423C ADD X0, X31, 0xF0
	0x03B64240 ADD X1, X31, 0xE0
	0x03B64244 ADD X2, X31, 0xD0
	0x03B64248 ADD X3, X31, 0xFC
	0x03B6424C MOV X4, X31
	0x03B64250 STP S0, S1, [X31 + 0xD0]
	0x03B64254 STR S2, [X31 + 0xD8]
	0x03B64258 BL 0x3B8C72C
	0x03B6425C ADD X0, X31, 0x100
	0x03B64260 MOV X1, X31
	0x03B64264 BL 0x3C8E684
	0x03B64268 LDR V1, [X31 + 0xFC]
	0x03B6426C ADD X0, X31, 0x100
	0x03B64270 MOV X1, X31
	0x03B64274 FADD S1, S14, S1
	0x03B64278 FADD S0, S0, S1
	0x03B6427C BL 0x3C8E68C
	0x03B64280 ADD X8, X31, 0x100
	0x03B64284 LDUR V0, [X8 + 0x1C]
	0x03B64288 LDP V2, V1, [X31 + 0x100]
	0x03B6428C STUR V0, [X31 + 0x5C]
	0x03B64290 STP V2, V1, [X31 + 0x40]
	0x03B64294 LDR W8, [X21 + 0x18]
	0x03B64298 CMP W25, W8
	0x03B6429C B.CS 0x3B6436C
	0x03B642A0 LDUR V0, [X31 + 0x5C]
	0x03B642A4 LDP V2, V1, [X31 + 0x40]
	0x03B642A8 MOVZ W8, 0x2C
	0x03B642AC SMADDL X8, X25, X8, X21
	0x03B642B0 ADD W25, W25, 0x1
	0x03B642B4 STUR V0, [X8 + 0x3C]
	0x03B642B8 STP V2, V1, [X8 + 0x20]
	0x03B642BC ADD X26, X26, 0x1
	0x03B642C0 CMP X20, X26
	0x03B642C4 ADD X27, X27, 0x2C
	0x03B642C8 B.NE 0x3B6402C
	0x03B642CC B 0x3B642D8
	0x03B642D0 LDR V15, [X31 + 0x1C]
	0x03B642D4 LDR V8, [X31 + 0x38]
	0x03B642D8 LDR V0, [X31 + 0x130]
	0x03B642DC FADD S8, S8, S0
	0x03B642E0 FCMP S8, S15
	0x03B642E4 B.MI 0x3B63F74
	0x03B642E8 LDR X0, [X19]
	0x03B642EC LDR W8, [X0 + 0xE0]
	0x03B642F0 CBNZ W8, 0x3B642FC
	0x03B642F4 BL 0x1C16DFC
	0x03B642F8 LDR X0, [X19]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], D13
	003 Move [X31+104], D12
	004 Move [X31+112], D11
	005 Move [X31+120], D10
	006 Move [X31+128], D9
	007 Move [X31+136], D8
	008 Move [X31+144], X30
	009 Move [X31+152], X23
	010 Move [X31+160], X22
	011 Move [X31+168], X21
	012 Move [X31+176], X20
	013 Move [X31+184], X19
	014 Move X21, 0x880000
	015 Move W8, [X21+2462]
	016 Move W20, W1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {42}
	022 Move X0, 0x5B9000
	023 Move X0, [X0+112]
	024 Call 0x1C17CF4
	025 Move X0, 0x597000
	026 Move X0, [X0+2240]
	027 Call 0x1C17CF4
	028 Move X0, 0x5B9000
	029 Move X0, [X0+960]
	030 Call 0x1C17CF4
	031 Move X0, 0x597000
	032 Move X0, [X0+2248]
	033 Call 0x1C17CF4
	034 Move X0, 0x591000
	035 Move X0, [X0+1432]
	036 Call 0x1C17CF4
	037 Move X0, 0x5F8000
	038 Move X0, [X0+1984]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X21+2462], W8
	042 Move X0, X19
	043 Move W1, W20
	044 Move [X31+80], X31
	045 Move [X31+88], X31
	046 Move [X31+76], W31
	047 Move [X31+72], W31
	048 Move [X31+68], W31
	049 Move [X31+64], W31
	050 Move [X31+48], X31
	051 Move [X31+56], X31
	052 Move [X31+32], X31
	053 Move [X31+40], X31
	054 Move [X31+16], X31
	055 Move [X31+24], X31
	056 Move [X31], X31
	057 Move [X31+8], X31
	058 Call XRBaseControllerInteractor.ProcessInteractor, X0, X1
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W8, [X19+766]
	061 Move [X19+852], W31
	062 Compare W8, 0
	063 JumpIfEqual {603}
	064 Move X0, X19
	065 Call XRBaseInteractor.get_hasSelection, X0
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {603}
	070 Move W8, [X19+1153]
	071 Compare W8, 0
	072 JumpIfEqual {276}
	073 Move X0, [X19+1136]
	074 Compare X0, 0
	075 JumpIfEqual {719}
	076 Move X1, X31
	077 Call XRController.get_inputDevice, X0
	078 Move [X31+80], X0
	079 Move [X31+88], X1
	080 Add X0, X31, 80
	081 Move X1, X31
	082 Call InputDevice.get_isValid, X0
	083 Move TEMP, X0
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfNotEqual {276}
	087 Move X0, [X19+1136]
	088 Compare X0, 0
	089 JumpIfEqual {719}
	090 Move X1, X31
	091 Call XRController.get_inputDevice, X0
	092 Move X8, [X19+1136]
	093 Compare X8, 0
	094 JumpIfEqual {719}
	095 Move X23, 0x597000
	096 Move X23, [X23+2248]
	097 Move X20, X0
	098 Move W22, [X8+196]
	099 Move V8, [X8+184]
	100 Move X0, [X23]
	101 Move X21, X1
	102 Move W9, [X0+224]
	103 Compare W9, 0
	104 JumpIfNotEqual {106}
	105 Call 0x1C17DFC
	106 Add X3, X31, 76
	107 Move X0, X20
	108 Move X1, X21
	109 Move W2, W22
	110 Move V0, V8
	111 Move X4, X31
	112 Call InputHelpers.IsPressed, X0, X1, X2, V0
	113 Move X0, [X19+1136]
	114 Compare X0, 0
	115 JumpIfEqual {719}
	116 Move X1, X31
	117 Call XRController.get_inputDevice, X0
	118 Move X8, [X19+1136]
	119 Compare X8, 0
	120 JumpIfEqual {719}
	121 Move W2, [X8+200]
	122 Move V0, [X8+184]
	123 Add X3, X31, 72
	124 Move X4, X31
	125 Call InputHelpers.IsPressed, X0, X1, X2, V0
	126 Move W8, [X31+76]
	127 Move W9, [X31+72]
	128 Or W9, W9, W8
	129 And W31, W9, 255
	130 Move W9, [X19+856]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move S0, 1
	133 Move S1, -1
	134 NotImplemented "Instruction FCSEL not yet implemented."
	135 Compare W9, 0
	136 JumpIfEqual {138}
	137 Move X1, [X19+672]
	138 Move X0, X19
	139 Move X1, X31
	140 Call Component.get_transform, X0
	141 Move X1, X0
	142 Move X8, [X19]
	143 Move X2, [X19+80]
	144 Move X0, X19
	145 Move V0, V8
	146 Move X9, [X8+2360]
	147 Move X3, [X8+2368]
	148 NotImplemented "Instruction BLR not yet implemented."
	149 Move W8, [X19+784]
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Compare W8, 0
	152 JumpIfNotEqual {276}
	153 Move X0, [X19+1136]
	154 Compare X0, 0
	155 JumpIfEqual {719}
	156 Move X1, X31
	157 Call XRController.get_inputDevice, X0
	158 Move X8, [X19+1136]
	159 Compare X8, 0
	160 JumpIfEqual {719}
	161 Move X20, X0
	162 Move X0, [X23]
	163 Move W22, [X8+188]
	164 Move V8, [X8+184]
	165 Move X21, X1
	166 Move W9, [X0+224]
	167 Compare W9, 0
	168 JumpIfNotEqual {170}
	169 Call 0x1C17DFC
	170 Add X3, X31, 68
	171 Move X0, X20
	172 Move X1, X21
	173 Move W2, W22
	174 Move V0, V8
	175 Move X4, X31
	176 Call InputHelpers.IsPressed, X0, X1, X2, V0
	177 Move X0, [X19+1136]
	178 Compare X0, 0
	179 JumpIfEqual {719}
	180 Move X1, X31
	181 Call XRController.get_inputDevice, X0
	182 Move X8, [X19+1136]
	183 Compare X8, 0
	184 JumpIfEqual {719}
	185 Move W2, [X8+192]
	186 Move V0, [X8+184]
	187 Add X3, X31, 64
	188 Move X4, X31
	189 Call InputHelpers.IsPressed, X0, X1, X2, V0
	190 Move W8, [X31+68]
	191 Move W9, [X31+64]
	192 Or W9, W9, W8
	193 And W31, W9, 255
	194 Move X9, [X19]
	195 NotImplemented "Instruction CMP not yet implemented."
	196 Move X1, [X19+80]
	197 Move S0, -1
	198 Move X8, [X9+2328]
	199 Move X2, [X9+2336]
	200 Move S1, 1
	201 NotImplemented "Instruction FCSEL not yet implemented."
	202 Move X0, X19
	203 NotImplemented "Instruction BLR not yet implemented."
	204 Move X0, [X19+1136]
	205 Compare X0, 0
	206 JumpIfEqual {719}
	207 Move X1, X31
	208 Call XRController.get_inputDevice, X0
	209 Move X8, [X19+1136]
	210 Compare X8, 0
	211 JumpIfEqual {719}
	212 Move X20, X0
	213 Move X0, [X23]
	214 Move W22, [X8+204]
	215 Move X21, X1
	216 Move W9, [X0+224]
	217 Compare W9, 0
	218 JumpIfNotEqual {220}
	219 Call 0x1C17DFC
	220 Add X3, X31, 56
	221 Move X0, X20
	222 Move X1, X21
	223 Move W2, W22
	224 Move X4, X31
	225 Call InputHelpers.TryReadAxis2DValue, X0, X1, X2
	226 Move TEMP, X0
	227 And TEMP, TEMP, 1
	228 Compare TEMP, 1
	229 JumpIfNotEqual {276}
	230 Move X8, 0x591000
	231 Move X8, [X8+1432]
	232 Move X20, [X19+776]
	233 Move X0, [X8]
	234 Move W8, [X0+224]
	235 Compare W8, 0
	236 JumpIfNotEqual {238}
	237 Call 0x1C17DFC
	238 Move X0, X20
	239 Move X1, X31
	240 Move X2, X31
	241 Call Object.op_Inequality, X0, X1
	242 Move TEMP, X0
	243 And TEMP, TEMP, 1
	244 Compare TEMP, 1
	245 JumpIfNotEqual {249}
	246 Move X0, [X19+776]
	247 Compare X0, 0
	248 JumpIfNotEqual {258}
	249 Move W8, [X19+856]
	250 Compare W8, 0
	251 JumpIfEqual {253}
	252 Move X0, [X19+672]
	253 Move X0, X19
	254 Move X1, X31
	255 Call Component.get_transform, X0
	256 Compare X0, 0
	257 JumpIfEqual {719}
	258 Move X1, X31
	259 Call Transform.get_rotation, X0
	260 Move X8, [X19]
	261 Move V4, V0
	262 Move V5, V1
	263 Move X1, [X19+80]
	264 Move S0, [X31+56]
	265 Move S1, [X31+60]
	266 Move X9, [X8+2344]
	267 Move X2, [X8+2352]
	268 Move V6, V2
	269 Move V7, V3
	270 Move X0, X19
	271 Move V2, V4
	272 Move V3, V5
	273 Move V4, V6
	274 Move V5, V7
	275 NotImplemented "Instruction BLR not yet implemented."
	276 Move W8, [X19+1152]
	277 Compare W8, 0
	278 JumpIfEqual {486}
	279 Move X8, [X19+1128]
	280 Compare X8, 0
	281 JumpIfEqual {719}
	282 Move X9, [X8+544]
	283 Move V0, [X8+33]
	284 Add X0, X31, 32
	285 Move X1, X31
	286 Move [X31+48], X9
	287 Move [X31+2], V0
	288 Call InputActionProperty.get_action, X0
	289 Move X21, 0x5F8000
	290 Move X21, [X21+1984]
	291 Move X20, X0
	292 Move X8, [X21]
	293 Move W9, [X8+224]
	294 Compare W9, 0
	295 JumpIfNotEqual {298}
	296 Move X0, X8
	297 Call 0x1C17DFC
	298 Compare X20, 0
	299 JumpIfEqual {310}
	300 Move X0, X20
	301 Move X1, X31
	302 Call InputAction.WasPerformedThisFrame, X0
	303 Move TEMP, X0
	304 And TEMP, TEMP, 1
	305 Compare TEMP, 1
	306 JumpIfNotEqual {310}
	307 Move W8, [X19+858]
	308 Xor W8, W8, 1
	309 Move [X19+858], W8
	310 Move W8, [X19+858]
	311 Compare W8, 0
	312 JumpIfEqual {342}
	313 Move W8, [X19+848]
	314 NotImplemented "Instruction CMP not yet implemented."
	315 Move X8, [X19+1128]
	316 Compare X8, 0
	317 JumpIfEqual {719}
	318 Add X8, X8, 552
	319 Move X9, [X8+16]
	320 Move V0, [X8]
	321 Add X0, X31, 32
	322 Move X1, X31
	323 Move [X31+48], X9
	324 Move [X31+2], V0
	325 Call InputActionProperty.get_action, X0
	326 Move X8, [X21]
	327 Move X20, X0
	328 Move W9, [X8+224]
	329 Compare W9, 0
	330 JumpIfNotEqual {333}
	331 Move X0, X8
	332 Call 0x1C17DFC
	333 Add X1, X31, 0
	334 Move X0, X20
	335 Call XRRayInteractor.TryRead2DAxis, X0, X1
	336 Move TEMP, X0
	337 And TEMP, TEMP, 1
	338 Compare TEMP, 1
	339 JumpIfNotEqual {486}
	340 Move V0, [X31+4]
	341 Move [X19+852], S0
	342 Move W8, [X19+784]
	343 NotImplemented "Instruction CMP not yet implemented."
	344 Compare W8, 0
	345 JumpIfNotEqual {446}
	346 Move X8, [X19+1128]
	347 Compare X8, 0
	348 JumpIfEqual {719}
	349 Add X8, X8, 456
	350 Move X9, [X8+16]
	351 Move V0, [X8]
	352 Add X0, X31, 32
	353 Move X1, X31
	354 Move [X31+48], X9
	355 Move [X31+2], V0
	356 Call InputActionProperty.get_action, X0
	357 Move X8, [X21]
	358 Move X20, X0
	359 Move W9, [X8+224]
	360 Compare W9, 0
	361 JumpIfNotEqual {364}
	362 Move X0, X8
	363 Call 0x1C17DFC
	364 Add X1, X31, 16
	365 Move X0, X20
	366 Call XRRayInteractor.TryRead2DAxis, X0, X1
	367 Move TEMP, X0
	368 And TEMP, TEMP, 1
	369 Compare TEMP, 1
	370 JumpIfNotEqual {446}
	371 Move X8, [X19]
	372 Move X1, [X19+80]
	373 Move V0, [X31+16]
	374 Move X0, X19
	375 Move X9, [X8+2328]
	376 Move X2, [X8+2336]
	377 NotImplemented "Instruction BLR not yet implemented."
	378 Move X8, [X19+1128]
	379 Compare X8, 0
	380 JumpIfEqual {719}
	381 Move X9, [X8+496]
	382 Move V0, [X8+30]
	383 Add X0, X31, 32
	384 Move X1, X31
	385 Move [X31+48], X9
	386 Move [X31+2], V0
	387 Call InputActionProperty.get_action, X0
	388 Move X8, [X21]
	389 Move X20, X0
	390 Move W9, [X8+224]
	391 Compare W9, 0
	392 JumpIfNotEqual {395}
	393 Move X0, X8
	394 Call 0x1C17DFC
	395 Add X1, X31, 8
	396 Move X0, X20
	397 Call XRRayInteractor.TryRead2DAxis, X0, X1
	398 Move TEMP, X0
	399 And TEMP, TEMP, 1
	400 Compare TEMP, 1
	401 JumpIfNotEqual {446}
	402 Move X8, 0x591000
	403 Move X8, [X8+1432]
	404 Move X20, [X19+776]
	405 Move X0, [X8]
	406 Move W8, [X0+224]
	407 Compare W8, 0
	408 JumpIfNotEqual {410}
	409 Call 0x1C17DFC
	410 Move X0, X20
	411 Move X1, X31
	412 Move X2, X31
	413 Call Object.op_Inequality, X0, X1
	414 Move TEMP, X0
	415 And TEMP, TEMP, 1
	416 Compare TEMP, 1
	417 JumpIfNotEqual {419}
	418 Move X0, [X19+776]
	419 Move W8, [X19+856]
	420 Compare W8, 0
	421 JumpIfEqual {423}
	422 Move X0, [X19+672]
	423 Move X0, X19
	424 Move X1, X31
	425 Call Component.get_transform, X0
	426 Compare X0, 0
	427 JumpIfEqual {719}
	428 Move X1, X31
	429 Call Transform.get_rotation, X0
	430 Move X8, [X19]
	431 Move V4, V0
	432 Move V5, V1
	433 Move X1, [X19+80]
	434 Move S0, [X31+8]
	435 Move S1, [X31+12]
	436 Move X9, [X8+2344]
	437 Move X2, [X8+2352]
	438 Move V6, V2
	439 Move V7, V3
	440 Move X0, X19
	441 Move V2, V4
	442 Move V3, V5
	443 Move V4, V6
	444 Move V5, V7
	445 NotImplemented "Instruction BLR not yet implemented."
	446 Move X8, [X19+1128]
	447 Compare X8, 0
	448 JumpIfEqual {719}
	449 Add X8, X8, 504
	450 Move X9, [X8+16]
	451 Move V0, [X8]
	452 Add X0, X31, 32
	453 Move X1, X31
	454 Move [X31+48], X9
	455 Move [X31+2], V0
	456 Call InputActionProperty.get_action, X0
	457 Move X8, [X21]
	458 Move X20, X0
	459 Move W9, [X8+224]
	460 Compare W9, 0
	461 JumpIfNotEqual {464}
	462 Move X0, X8
	463 Call 0x1C17DFC
	464 Add X1, X31, 24
	465 Move X0, X20
	466 Call XRRayInteractor.TryRead2DAxis, X0, X1
	467 Move TEMP, X0
	468 And TEMP, TEMP, 1
	469 Compare TEMP, 1
	470 JumpIfNotEqual {486}
	471 Move W8, [X19+856]
	472 Compare W8, 0
	473 JumpIfEqual {475}
	474 Move X1, [X19+672]
	475 Move X0, X19
	476 Move X1, X31
	477 Call Component.get_transform, X0
	478 Move X1, X0
	479 Move X8, [X19]
	480 Move X2, [X19+80]
	481 Move V0, [X31+28]
	482 Move X0, X19
	483 Move X9, [X8+2360]
	484 Move X3, [X8+2368]
	485 NotImplemented "Instruction BLR not yet implemented."
	486 Move W8, [X19+1154]
	487 Compare W8, 0
	488 JumpIfEqual {603}
	489 Move W8, [X19+784]
	490 NotImplemented "Instruction CMP not yet implemented."
	491 Move X8, [X19+1144]
	492 Compare X8, 0
	493 JumpIfEqual {719}
	494 Move X9, [X8+352]
	495 Move V0, [X8+21]
	496 Add X0, X31, 32
	497 Move X1, X31
	498 Move [X31+48], X9
	499 Move [X31+2], V0
	500 Call InputActionProperty.get_action, X0
	501 Compare X0, 0
	502 JumpIfEqual {546}
	503 Move X8, [X19+1144]
	504 Compare X8, 0
	505 JumpIfEqual {719}
	506 Move X9, [X8+352]
	507 Move V0, [X8+21]
	508 Add X0, X31, 32
	509 Move X1, X31
	510 Move [X31+48], X9
	511 Move [X31+2], V0
	512 Call InputActionProperty.get_action, X0
	513 Compare X0, 0
	514 JumpIfEqual {719}
	515 Move X1, X31
	516 Call InputAction.get_phase, X0
	517 Move X1, X31
	518 Call InputExtensions.IsInProgress, X0
	519 Move TEMP, X0
	520 And TEMP, TEMP, 1
	521 Compare TEMP, 1
	522 JumpIfNotEqual {546}
	523 Move X8, [X19+1144]
	524 Compare X8, 0
	525 JumpIfEqual {719}
	526 Move X9, [X8+352]
	527 Move V0, [X8+21]
	528 Add X0, X31, 32
	529 Move X1, X31
	530 Move [X31+48], X9
	531 Move [X31+2], V0
	532 Call InputActionProperty.get_action, X0
	533 Compare X0, 0
	534 JumpIfEqual {719}
	535 Move X8, 0x596000
	536 Move X8, [X8+2240]
	537 Move X1, [X8]
	538 Call InputAction.ReadValue, X0
	539 Move X8, [X19]
	540 Move X1, [X19+80]
	541 NotImplemented "Instruction FNEG not yet implemented."
	542 Move X9, [X8+2328]
	543 Move X2, [X8+2336]
	544 Move X0, X19
	545 NotImplemented "Instruction BLR not yet implemented."
	546 Move X8, [X19+1144]
	547 Compare X8, 0
	548 JumpIfEqual {719}
	549 Move X9, [X8+232]
	550 NotImplemented "Instruction LDUR not yet implemented."
	551 Add X0, X31, 32
	552 Move X1, X31
	553 Move [X31+48], X9
	554 Move [X31+2], V0
	555 Call InputActionProperty.get_action, X0
	556 Compare X0, 0
	557 JumpIfEqual {596}
	558 Move X8, [X19+1144]
	559 Compare X8, 0
	560 JumpIfEqual {719}
	561 Move X9, [X8+232]
	562 NotImplemented "Instruction LDUR not yet implemented."
	563 Add X0, X31, 32
	564 Move X1, X31
	565 Move [X31+48], X9
	566 Move [X31+2], V0
	567 Call InputActionProperty.get_action, X0
	568 Compare X0, 0
	569 JumpIfEqual {719}
	570 Move X1, X31
	571 Call InputAction.get_phase, X0
	572 Move X1, X31
	573 Call InputExtensions.IsInProgress, X0
	574 Move TEMP, X0
	575 And TEMP, TEMP, 1
	576 Compare TEMP, 1
	577 JumpIfNotEqual {596}
	578 Move X8, [X19+1144]
	579 Compare X8, 0
	580 JumpIfEqual {719}
	581 Add X8, X8, 360
	582 Move X9, [X8+16]
	583 Move V0, [X8]
	584 Add X0, X31, 32
	585 Move X1, X31
	586 Move [X31+48], X9
	587 Move [X31+2], V0
	588 Call InputActionProperty.get_action, X0
	589 Compare X0, 0
	590 JumpIfEqual {596}
	591 Move X8, 0x5B8000
	592 Move X8, [X8+112]
	593 Move X1, [X8]
	594 Call 0x21F6BCC, X0
	595 NotImplemented "Instruction CMP not yet implemented."
	596 Move W8, [X19+848]
	597 NotImplemented "Instruction CMP not yet implemented."
	598 Move X8, [X19+1144]
	599 Compare X8, 0
	600 JumpIfEqual {719}
	601 Move V0, [X8+396]
	602 Move [X19+852], S0
	603 Move X20, [X31+176]
	604 Move X19, [X31+184]
	605 Move X22, [X31+160]
	606 Move X21, [X31+168]
	607 Move X30, [X31+144]
	608 Move X23, [X31+152]
	609 Move D9, [X31+128]
	610 Move D8, [X31+136]
	611 Move D11, [X31+112]
	612 Move D10, [X31+120]
	613 Move D13, [X31+96]
	614 Move D12, [X31+104]
	615 Add X31, X31, 192
	616 Return 
	617 Move X8, [X19+1144]
	618 Compare X8, 0
	619 JumpIfEqual {719}
	620 Move X9, [X8+232]
	621 NotImplemented "Instruction LDUR not yet implemented."
	622 Add X0, X31, 32
	623 Move X1, X31
	624 Move [X31+48], X9
	625 Move [X31+2], V0
	626 Call InputActionProperty.get_action, X0
	627 Compare X0, 0
	628 JumpIfEqual {719}
	629 Move X8, 0x5B8000
	630 Move X8, [X8+960]
	631 Move X1, [X8]
	632 Call InputAction.ReadValue, X0
	633 Move X0, [X19+80]
	634 Compare X0, 0
	635 JumpIfEqual {719}
	636 Move X1, X31
	637 Move V8, V0
	638 Move V9, V1
	639 Call Transform.get_forward, X0
	640 Move X20, 0x875000
	641 Move W8, [X20+1926]
	642 Move V10, V0
	643 Move V11, V1
	644 Move V12, V2
	645 Compare W8, 0
	646 JumpIfNotEqual {652}
	647 Move X0, 0x590000
	648 Move X0, [X0+1440]
	649 Call 0x1C17CF4
	650 Move W8, 1
	651 Move [X20+1926], W8
	652 Move X8, 0x590000
	653 Move X8, [X8+1440]
	654 Move V0, V10
	655 Move V1, V11
	656 Move V2, V12
	657 Move X8, [X8]
	658 Move X0, X31
	659 Move X8, [X8+184]
	660 Move S3, [X8+24]
	661 Move S4, [X8+28]
	662 Move V5, [X8+32]
	663 Call Quaternion.LookRotation, X0, X1
	664 Move X0, X31
	665 Call Quaternion.Inverse, X0
	666 Move X0, [X19+80]
	667 Compare X0, 0
	668 JumpIfEqual {719}
	669 Move X1, X31
	670 Move V12, V0
	671 Move V11, V1
	672 Move V10, V2
	673 Move V13, V3
	674 Call Transform.get_rotation, X0
	675 Multiply S4, S13, S0
	676 Multiply S5, S12, S3
	677 Multiply S7, S10, S1
	678 Multiply S16, S13, S1
	679 Multiply S17, S11, S3
	680 Multiply S18, S10, S0
	681 Multiply S20, S12, S1
	682 Multiply S21, S12, S0
	683 Multiply S22, S11, S0
	684 Multiply S0, S11, S1
	685 Multiply S1, S13, S2
	686 Multiply S23, S13, S3
	687 Multiply S3, S10, S3
	688 Multiply S6, S11, S2
	689 Multiply S19, S12, S2
	690 Multiply S24, S10, S2
	691 Add S2, S4, S5
	692 Add S4, S16, S17
	693 Add S1, S1, S3
	694 Subtract S3, S23, S21
	695 Add S2, S6, S2
	696 Add S4, S18, S4
	697 Add S5, S20, S1
	698 Subtract S3, S3, S0
	699 Subtract S0, S2, S7
	700 Subtract S1, S4, S19
	701 Subtract S2, S5, S22
	702 Subtract S3, S3, S24
	703 Move S6, W31
	704 Move V4, V8
	705 Move V5, V9
	706 Move X0, X31
	707 Call Quaternion.op_Multiply, X0, X1
	708 Move X0, X31
	709 Move V8, V0
	710 Call Screen.get_dpi
	711 Move X8, [X19]
	712 Move X1, [X19+80]
	713 NotImplemented "Instruction FDIV not yet implemented."
	714 Move X9, [X8+2328]
	715 Move X2, [X8+2336]
	716 Move W8, 0xC2480000
	717 Move S1, W8
	718 Multiply S0, S0, S1
	719 Call 0x1C17F20

Method: System.Void GetValidTargets(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> targets)

Disassembly:
	0x03B642FC LDR X8, [X0 + 0xB8]
	0x03B64300 LDR X0, [X8 + 0x10]
	0x03B64304 CBZ X0, 0x3B64368
	0x03B64308 ADRP X8, 0x5F6000
	0x03B6430C LDR X8, [X8 + 0x788]
	0x03B64310 LDR X1, [X8]
	0x03B64314 BL 0x2DBE450
	0x03B64318 LDR X8, [X19]
	0x03B6431C MOVZ W2, 0xA
	0x03B64320 MOV W1, W31
	0x03B64324 MOV X3, X31
	0x03B64328 LDR X8, [X8 + 0xB8]
	0x03B6432C LDR X0, [X8 + 0x8]
	0x03B64330 BL 0x339FA34
	0x03B64334 MOV W0, W25
	0x03B64338 ADD X31, X31, 0x180
	0x03B6433C LDP X20, X19, [X31 + 0x90]
	0x03B64340 LDP X22, X21, [X31 + 0x80]
	0x03B64344 LDP X24, X23, [X31 + 0x70]
	0x03B64348 LDP X26, X25, [X31 + 0x60]
	0x03B6434C LDP X28, X27, [X31 + 0x50]
	0x03B64350 LDP X29, X30, [X31 + 0x40]
	0x03B64354 LDP D9, D8, [X31 + 0x30]
	0x03B64358 LDP D11, D10, [X31 + 0x20]
	0x03B6435C LDP D13, D12, [X31 + 0x10]
	0x03B64360 LDP D15, D14, [X31], #0xA0
	0x03B64364 RET
	0x03B64368 BL 0x1C16F20
	0x03B6436C BL 0x1C16F28
	0x03B64370 SUB X31, X31, 0x60
	0x03B64374 STP X30, X27, [X31 + 0x10]
	0x03B64378 STP X26, X25, [X31 + 0x20]
	0x03B6437C STP X24, X23, [X31 + 0x30]
	0x03B64380 STP X22, X21, [X31 + 0x40]
	0x03B64384 STP X20, X19, [X31 + 0x50]
	0x03B64388 ADRP X23, 0x87E000
	0x03B6438C LDRB W8, [X23 + 0x9A5]
	0x03B64390 MOV X20, X3
	0x03B64394 MOV W19, W2
	0x03B64398 MOV X21, X1
	0x03B6439C MOV X22, X0
	0x03B643A0 TBNZ X8, 0x0, 0x3B643C4
	0x03B643A4 ADRP X0, 0x5F7000
	0x03B643A8 LDR X0, [X0 + 0x358]
	0x03B643AC BL 0x1C16CF4
	0x03B643B0 ADRP X0, 0x5F6000
	0x03B643B4 LDR X0, [X0 + 0x7C0]
	0x03B643B8 BL 0x1C16CF4
	0x03B643BC MOVZ W8, 0x1
	0x03B643C0 STRB W8, [X23 + 0x9A5]
	0x03B643C4 CMP W19, 0x1
	0x03B643C8 STP X31, X31, [X31]
	0x03B643CC B.LT 0x3B6448C
	0x03B643D0 CBZ X21, 0x3B644AC
	0x03B643D4 ADRP X25, 0x5F6000
	0x03B643D8 ADRP X26, 0x5F7000
	0x03B643DC LDR X25, [X25 + 0x7C0]
	0x03B643E0 LDR X26, [X26 + 0x358]
	0x03B643E4 MOV W23, W31
	0x03B643E8 MOVZ W27, 0x2C
	0x03B643EC LDR W8, [X21 + 0x18]
	0x03B643F0 CMP W23, W8
	0x03B643F4 B.CS 0x3B644B0
	0x03B643F8 SMADDL X8, X23, X27, X21
	0x03B643FC ADD X0, X8, 0x20
	0x03B64400 MOV X1, X31
	0x03B64404 BL 0x3C8E5C0
	0x03B64408 CBZ X0, 0x3B644AC
	0x03B6440C MOV X1, X31
	0x03B64410 MOV X24, X0
	0x03B64414 BL 0x3C8F78C
	0x03B64418 TBZ X0, 0x0, 0x3B64480
	0x03B6441C CBZ X22, 0x3B644AC
	0x03B64420 ADD X2, X31, 0x0
	0x03B64424 ADD X3, X31, 0x8
	0x03B64428 MOV X0, X22
	0x03B6442C MOV X1, X24
	0x03B64430 MOV X4, X31
	0x03B64434 BL 0x3B72DA8
	0x03B64438 CBZ X20, 0x3B644AC
	0x03B6443C LDR X1, [X31 + 0x8]
	0x03B64440 LDR X8, [X20 + 0x18]
	0x03B64444 LDR X0, [X20 + 0x40]
	0x03B64448 LDR X2, [X20 + 0x28]
	0x03B6444C BLR X8
	0x03B64450 TBZ X0, 0x0, 0x3B64480
	0x03B64454 LDR X0, [X25]
	0x03B64458 LDR W8, [X0 + 0xE0]
	0x03B6445C CBNZ W8, 0x3B64464
	0x03B64460 BL 0x1C16DFC
	0x03B64464 LDR X3, [X26]
	0x03B64468 MOV X0, X21
	0x03B6446C MOV W1, W23
	0x03B64470 MOV W2, W19
	0x03B64474 BL 0x22AE708
	0x03B64478 SUB W19, W19, 0x1
	0x03B6447C SUB W23, W23, 0x1
	0x03B64480 ADD W23, W23, 0x1
	0x03B64484 CMP W23, W19
	0x03B64488 B.LT 0x3B643EC
	0x03B6448C MOV W0, W19
	0x03B64490 LDP X20, X19, [X31 + 0x50]
	0x03B64494 LDP X22, X21, [X31 + 0x40]
	0x03B64498 LDP X24, X23, [X31 + 0x30]
	0x03B6449C LDP X26, X25, [X31 + 0x20]
	0x03B644A0 LDP X30, X27, [X31 + 0x10]
	0x03B644A4 ADD X31, X31, 0x60
	0x03B644A8 RET
	0x03B644AC BL 0x1C16F20
	0x03B644B0 BL 0x1C16F28
	0x03B644B4 LDRB W8, [X0 + 0x2ED]
	0x03B644B8 CBZ W8, 0x3B644CC
	0x03B644BC LDRB W8, [X0 + 0x36C]
	0x03B644C0 CBZ W8, 0x3B644CC
	0x03B644C4 LDRB W0, [X0 + 0x99]
	0x03B644C8 RET
	0x03B644CC B 0x3B4FD5C
	0x03B644D0 LDRB W8, [X0 + 0x2ED]
	0x03B644D4 CBZ W8, 0x3B644E8
	0x03B644D8 LDRB W8, [X0 + 0x384]
	0x03B644DC CBZ W8, 0x3B644E8
	0x03B644E0 LDRB W0, [X0 + 0x99]
	0x03B644E4 RET
	0x03B644E8 B 0x3B4FF4C
	0x03B644EC STR X30, [X31 - 0x20]!
	0x03B644F0 STP X20, X19, [X31 + 0x10]
	0x03B644F4 MOV X20, X1
	0x03B644F8 MOV X19, X0
	0x03B644FC BL 0x3B4B6D0
	0x03B64500 TBZ X0, 0x0, 0x3B64514
	0x03B64504 MOV X0, X19
	0x03B64508 MOV X1, X20
	0x03B6450C BL 0x3B5103C
	0x03B64510 TBZ X0, 0x0, 0x3B64548
	0x03B64514 LDRB W8, [X19 + 0x482]
	0x03B64518 CBZ W8, 0x3B64540
	0x03B6451C LDR X0, [X19 + 0x478]
	0x03B64520 CBZ X0, 0x3B64558
	0x03B64524 MOV X1, X31
	0x03B64528 BL 0x3B34284
	0x03B6452C CBZ X0, 0x3B64558
	0x03B64530 LDRB W8, [X0 + 0x1C]
	0x03B64534 CMP W8, 0x0
	0x03B64538 CSET W0, NE
	0x03B6453C B 0x3B6454C
	0x03B64540 MOVZ W0, 0x1
	0x03B64544 B 0x3B6454C
	0x03B64548 MOV W0, W31
	0x03B6454C LDP X20, X19, [X31 + 0x10]
	0x03B64550 LDR X30, [X31], #0x20
	0x03B64554 RET
	0x03B64558 BL 0x1C16F20
	0x03B6455C STR X30, [X31 - 0x20]!
	0x03B64560 STP X20, X19, [X31 + 0x10]
	0x03B64564 LDR X8, [X0 + 0x330]
	0x03B64568 MOV X19, X0
	0x03B6456C MOV X20, X1
	0x03B64570 CMP X8, X1
	0x03B64574 B.EQ 0x3B645BC
	0x03B64578 LDRB W8, [X19 + 0x2ED]
	0x03B6457C CBZ W8, 0x3B6459C
	0x03B64580 LDRB W8, [X19 + 0x36C]
	0x03B64584 CBZ W8, 0x3B6459C
	0x03B64588 LDR X8, [X19 + 0x330]
	0x03B6458C CMP X8, X20
	0x03B64590 B.EQ 0x3B6459C
	0x03B64594 MOV W0, W31
	0x03B64598 B 0x3B645E8
	0x03B6459C MOV X0, X19
	0x03B645A0 BL 0x3B4B6D0
	0x03B645A4 TBZ X0, 0x0, 0x3B645E4
	0x03B645A8 MOV X0, X19
	0x03B645AC MOV X1, X20
	0x03B645B0 LDP X20, X19, [X31 + 0x10]
	0x03B645B4 LDR X30, [X31], #0x20
	0x03B645B8 B 0x3B52CD0
	0x03B645BC LDRB W8, [X19 + 0x2F4]
	0x03B645C0 CBZ W8, 0x3B64578
	0x03B645C4 MOV X0, X19
	0x03B645C8 BL 0x3B4B6D0
	0x03B645CC TBZ X0, 0x0, 0x3B64578
	0x03B645D0 LDRB W8, [X19 + 0x36C]
	0x03B645D4 CBZ W8, 0x3B64578
	0x03B645D8 LDRB W8, [X19 + 0x374]
	0x03B645DC CBNZ W8, 0x3B64594
	0x03B645E0 B 0x3B64578
	0x03B645E4 MOVZ W0, 0x1
	0x03B645E8 LDP X20, X19, [X31 + 0x10]
	0x03B645EC LDR X30, [X31], #0x20
	0x03B645F0 RET
	0x03B645F4 LDR V0, [X0 + 0x2F0]
	0x03B645F8 RET
	0x03B645FC LDR V0, [X0 + 0x2F8]
	0x03B64600 RET
	0x03B64604 SUB X31, X31, 0x50
	0x03B64608 STP X30, X21, [X31 + 0x30]
	0x03B6460C STP X20, X19, [X31 + 0x40]
	0x03B64610 ADRP X21, 0x87E000
	0x03B64614 LDRB W8, [X21 + 0x9A7]
	0x03B64618 MOV X20, X1
	0x03B6461C MOV X19, X0
	0x03B64620 TBNZ X8, 0x0, 0x3B64638
	0x03B64624 ADRP X0, 0x5F6000
	0x03B64628 LDR X0, [X0 + 0x940]
	0x03B6462C BL 0x1C16CF4
	0x03B64630 MOVZ W8, 0x1
	0x03B64634 STRB W8, [X21 + 0x9A7]
	0x03B64638 MOVI V0.2D, 0x0
	0x03B6463C MOV X0, X19
	0x03B64640 MOV X1, X20
	0x03B64644 STUR V0, [X31 + 0x1C]
	0x03B64648 STP V0, V0, [X31]
	0x03B6464C BL 0x3B50630
	0x03B64650 LDRB W8, [X19 + 0x2F4]
	0x03B64654 CBZ W8, 0x3B64670
	0x03B64658 LDRB W8, [X19 + 0x36C]
	0x03B6465C CBZ W8, 0x3B64670
	0x03B64660 MOV X0, X31
	0x03B64664 BL 0x3C3C6C4
	0x03B64668 STR S0, [X19 + 0x370]
	0x03B6466C STRB W31, [X19 + 0x374]
	0x03B64670 LDRB W8, [X19 + 0x2FF]
	0x03B64674 CBNZ W8, 0x3B646C8
	0x03B64678 MOV X0, X19
	0x03B6467C BL 0x3B505A0
	0x03B64680 CBZ X0, 0x3B646D8
	0x03B64684 LDR W8, [X0 + 0x18]
	0x03B64688 CMP W8, 0x1
	0x03B6468C B.NE 0x3B646C8
	0x03B64690 ADD X1, X31, 0x0
	0x03B64694 ADD X2, X31, 0x2C
	0x03B64698 MOV X0, X19
	0x03B6469C STR W31, [X31 + 0x2C]

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+144], D8
	003 Move [X31+160], X30
	004 Move [X31+168], X27
	005 Move [X31+176], X26
	006 Move [X31+184], X25
	007 Move [X31+192], X24
	008 Move [X31+200], X23
	009 Move [X31+208], X22
	010 Move [X31+216], X21
	011 Move [X31+224], X20
	012 Move [X31+232], X19
	013 Move X21, 0x87F000
	014 Move W8, [X21+2463]
	015 Move X19, X1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {41}
	021 Move X0, 0x5F7000
	022 Move X0, [X0+3320]
	023 Call 0x1C17CF4
	024 Move X0, 0x5F7000
	025 Move X0, [X0+3592]
	026 Call 0x1C17CF4
	027 Move X0, 0x5F7000
	028 Move X0, [X0+3624]
	029 Call 0x1C17CF4
	030 Move X0, 0x5F7000
	031 Move X0, [X0+3584]
	032 Call 0x1C17CF4
	033 Move X0, 0x5F7000
	034 Move X0, [X0+3632]
	035 Call 0x1C17CF4
	036 Move X0, 0x5F7000
	037 Move X0, [X0+1984]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X21+2463], W8
	041 NotImplemented "Instruction MOVI not yet implemented."
	042 Move [X31+156], W31
	043 Move [X31+112], V0
	044 Move [X31+120], V0
	045 Move [X31+80], V0
	046 Move [X31+88], V0
	047 Move [X31+4], V0
	048 Move [X31+44], V0
	049 Move [X31+16], V0
	050 Move [X31+24], V0
	051 Move [X31+8], X31
	052 Compare X19, 0
	053 JumpIfEqual {263}
	054 Move W2, [X19+24]
	055 Move W8, [X19+28]
	056 Add W8, W8, 1
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move [X19+24], W31
	059 Move [X19+28], W8
	060 Move X0, [X19+16]
	061 Move W1, W31
	062 Move X3, X31
	063 Call Array.Clear, X0, X1, X2
	064 Move X0, X20
	065 Move X1, X31
	066 Call Behaviour.get_isActiveAndEnabled, X0
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {250}
	071 Move W8, [X20+912]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Add X1, X31, 64
	074 Add X2, X31, 156
	075 Move X0, X20
	076 Call XRRayInteractor.TryGetCurrentUIRaycastResult, X0, X1, X2
	077 Move W8, [X20+912]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move W23, [X31+156]
	080 Move X25, 0x5F7000
	081 Move X27, 0x5F7000
	082 Move V8, [X31+80]
	083 Move X25, [X25+3632]
	084 Move X27, [X27+3624]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Xor W8, W0, 1
	087 NotImplemented "Instruction CSET not yet implemented."
	088 Move X22, X31
	089 Move W24, 32
	090 Or W26, W9, W8
	091 Move X8, [X20+904]
	092 Compare X8, 0
	093 JumpIfEqual {263}
	094 Move W9, [X8+24]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Add X8, X8, X24
	097 Move W9, [X8+40]
	098 Move X10, [X8+32]
	099 Move V1, [X8]
	100 Move V0, [X8+16]
	101 Move [X31+56], W9
	102 Move [X31+48], X10
	103 Move [X31+16], V1
	104 Move [X31+24], V0
	105 Move TEMP, X26
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfEqual {115}
	109 Move W8, [X20+940]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Add X0, X31, 16
	112 Move X1, X31
	113 Call RaycastHit.get_distance, X0
	114 NotImplemented "Instruction FCMP not yet implemented."
	115 Move X21, [X20+48]
	116 Add X0, X31, 16
	117 Move X1, X31
	118 Call RaycastHit.get_collider, X0
	119 Compare X21, 0
	120 JumpIfEqual {263}
	121 Move X1, X0
	122 Add X2, X31, 8
	123 Move X0, X21
	124 Move X3, X31
	125 Call XRInteractionManager.TryGetInteractableForCollider, X0, X1, X2
	126 Move TEMP, X0
	127 And TEMP, TEMP, 1
	128 Compare TEMP, 1
	129 JumpIfNotEqual {165}
	130 Move X1, [X31+8]
	131 Move X2, [X25]
	132 Move X0, X19
	133 Call List`1<Object>.Contains, X0, X1
	134 Move TEMP, X0
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfEqual {161}
	138 Move W10, [X19+28]
	139 Move X1, [X31+8]
	140 Move X8, [X19+16]
	141 Move X9, [X27]
	142 Add W10, W10, 1
	143 Move [X19+28], W10
	144 Compare X8, 0
	145 JumpIfEqual {263}
	146 NotImplemented "Instruction LDRSW not yet implemented."
	147 Move W11, [X8+24]
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Add W9, W10, 1
	150 Add X8, X8, X10
	151 Move [X19+24], W9
	152 Move [X8+32], X1
	153 Move X8, [X9+32]
	154 Move X0, X19
	155 Move X8, [X8+192]
	156 Move X2, [X8+112]
	157 Call List`1<Object>.AddWithResize, X0, X1
	158 Move W8, [X20+748]
	159 Compare W8, 0
	160 JumpIfNotEqual {165}
	161 NotImplemented "Instruction LDRSW not yet implemented."
	162 Add X22, X22, 1
	163 Add X24, X24, 44
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Move X0, X20
	166 Call XRBaseInteractor.get_targetFilter, X0
	167 Compare X0, 0
	168 JumpIfEqual {250}
	169 Move X24, 0x5F7000
	170 Move X8, [X0]
	171 Move X24, [X24+3320]
	172 Move X21, X0
	173 NotImplemented "Instruction LDRH not yet implemented."
	174 Move X1, [X24]
	175 Compare X9, 0
	176 JumpIfEqual {183}
	177 Move X10, [X8+176]
	178 Add X10, X10, 8
	179 NotImplemented "Instruction LDUR not yet implemented."
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Subtract X9, X9, 1
	182 Add X10, X10, 16
	183 Move X0, X21
	184 Move W2, W31
	185 Call 0x1C5D788
	186 NotImplemented "Instruction LDRSW not yet implemented."
	187 Add X8, X8, X9
	188 Add X0, X8, 312
	189 Move X8, [X0]
	190 Move X1, [X0+8]
	191 Move X0, X21
	192 NotImplemented "Instruction BLR not yet implemented."
	193 Move TEMP, X0
	194 And TEMP, TEMP, 1
	195 Compare TEMP, 1
	196 JumpIfNotEqual {250}
	197 Move X23, 0x5F7000
	198 Move X23, [X23+1984]
	199 Move X0, [X23]
	200 Move W8, [X0+224]
	201 Compare W8, 0
	202 JumpIfNotEqual {205}
	203 Call 0x1C17DFC
	204 Move X0, [X23]
	205 Move X9, [X0+184]
	206 Move X8, [X21]
	207 Move X1, [X24]
	208 Move X22, [X9]
	209 NotImplemented "Instruction LDRH not yet implemented."
	210 Compare X9, 0
	211 JumpIfEqual {218}
	212 Move X10, [X8+176]
	213 Add X10, X10, 8
	214 NotImplemented "Instruction LDUR not yet implemented."
	215 NotImplemented "Instruction CMP not yet implemented."
	216 Subtract X9, X9, 1
	217 Add X10, X10, 16
	218 Move W2, 3
	219 Move X0, X21
	220 Call 0x1C5D788
	221 Move W9, [X10]
	222 Add W9, W9, 3
	223 Add X8, X8, W9
	224 Add X0, X8, 312
	225 Move X8, [X0]
	226 Move X4, [X0+8]
	227 Move X0, X21
	228 Move X1, X20
	229 Move X2, X19
	230 Move X3, X22
	231 NotImplemented "Instruction BLR not yet implemented."
	232 Move W2, [X19+24]
	233 Move W8, [X19+28]
	234 Add W8, W8, 1
	235 NotImplemented "Instruction CMP not yet implemented."
	236 Move [X19+24], W31
	237 Move [X19+28], W8
	238 Move X0, [X19+16]
	239 Move W1, W31
	240 Move X3, X31
	241 Call Array.Clear, X0, X1, X2
	242 Move X8, [X23]
	243 Move X9, 0x5F7000
	244 Move X0, X19
	245 Move X8, [X8+184]
	246 Move X9, [X9+3592]
	247 Move X1, [X8]
	248 Move X2, [X9]
	249 Call List`1<Object>.AddRange, X0, X1
	250 Move X20, [X31+224]
	251 Move X19, [X31+232]
	252 Move X22, [X31+208]
	253 Move X21, [X31+216]
	254 Move X24, [X31+192]
	255 Move X23, [X31+200]
	256 Move X26, [X31+176]
	257 Move X25, [X31+184]
	258 Move X30, [X31+160]
	259 Move X27, [X31+168]
	260 Move V8, [X31+144]
	261 Add X31, X31, 240
	262 Return 
	263 Call 0x1C17F20
	264 Call 0x1C17F28

Method: System.Void CreateSamplePointsListsIfNecessary()

Disassembly:
	0x03B608B8 BL 0x1C16DFC
	0x03B608BC LDR V5, [X31 + 0x2C]
	0x03B608C0 MOV V0.16B, V9.16B
	0x03B608C4 MOV V1.16B, V10.16B
	0x03B608C8 MOV V2.16B, V11.16B
	0x03B608CC MOV V3.16B, V12.16B
	0x03B608D0 MOV V4.16B, V13.16B
	0x03B608D4 STP S15, S8, [X31 + 0x4]
	0x03B608D8 STR S14, [X31]
	0x03B608DC BL 0x3B60940
	0x03B608E0 LDP X20, X19, [X31 + 0x110]
	0x03B608E4 LDP X22, X21, [X31 + 0x100]
	0x03B608E8 LDP X29, X30, [X31 + 0xF0]
	0x03B608EC LDP D9, D8, [X31 + 0xE0]
	0x03B608F0 LDP D11, D10, [X31 + 0xD0]
	0x03B608F4 LDP D13, D12, [X31 + 0xC0]
	0x03B608F8 LDP D15, D14, [X31 + 0xB0]
	0x03B608FC ADD X31, X31, 0x120
	0x03B60900 RET
	0x03B60904 BL 0x1C16F28
	0x03B60908 STR X30, [X31 - 0x10]!
	0x03B6090C ADD X2, X31, 0xC
	0x03B60910 STR W31, [X31 + 0xC]
	0x03B60914 BL 0x3B61AF0
	0x03B60918 AND W0, W0, 0x1
	0x03B6091C LDR X30, [X31], #0x10
	0x03B60920 RET
	0x03B60924 STR X30, [X31 - 0x10]!
	0x03B60928 ADD X2, X31, 0xC
	0x03B6092C STR W31, [X31 + 0xC]
	0x03B60930 BL 0x3B61B5C
	0x03B60934 AND W0, W0, 0x1
	0x03B60938 LDR X30, [X31], #0x10
	0x03B6093C RET
	0x03B60940 SUB X31, X31, 0x70
	0x03B60944 STP D15, D14, [X31 + 0x20]
	0x03B60948 STP D13, D12, [X31 + 0x30]
	0x03B6094C STP D11, D10, [X31 + 0x40]
	0x03B60950 STP D9, D8, [X31 + 0x50]
	0x03B60954 STR X30, [X31 + 0x60]
	0x03B60958 MOV V11.16B, V1.16B
	0x03B6095C LDP S15, S14, [X31 + 0x70]
	0x03B60960 LDR V1, [X31 + 0x78]
	0x03B60964 MOV V9.16B, V3.16B
	0x03B60968 MOV V8.16B, V2.16B
	0x03B6096C STR S2, [X31 + 0x6C]
	0x03B60970 STP S14, S1, [X31 + 0x4]
	0x03B60974 MOV V13.16B, V0.16B
	0x03B60978 FMOV S0, 1
	0x03B6097C FMOV S1, W31
	0x03B60980 FMOV S2, W31
	0x03B60984 FMOV S3, 0.75
	0x03B60988 MOV X0, X31
	0x03B6098C MOV V12.16B, V5.16B
	0x03B60990 MOV V10.16B, V4.16B
	0x03B60994 BL 0x3C0D030
	0x03B60998 ADRP X8, 0xFFFFFFFFFCF89000
	0x03B6099C LDR V3, [X8 + 0xF54]
	0x03B609A0 MOV V0.16B, V13.16B
	0x03B609A4 MOV V1.16B, V11.16B
	0x03B609A8 MOV V2.16B, V8.16B
	0x03B609AC MOV X0, X31
	0x03B609B0 MOV V8.16B, V3.16B
	0x03B609B4 BL 0x3C0CC38
	0x03B609B8 MOV V0.16B, V9.16B
	0x03B609BC MOV V1.16B, V10.16B
	0x03B609C0 MOV V2.16B, V12.16B
	0x03B609C4 MOV V3.16B, V8.16B
	0x03B609C8 MOV X0, X31
	0x03B609CC BL 0x3C0CC38
	0x03B609D0 MOV V1.16B, V14.16B
	0x03B609D4 LDR V14, [X31 + 0x8]
	0x03B609D8 MOV V0.16B, V15.16B
	0x03B609DC MOV V3.16B, V8.16B
	0x03B609E0 MOV X0, X31
	0x03B609E4 MOV V2.16B, V14.16B
	0x03B609E8 STR S15, [X31]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x883000
	007 Move W8, [X20+2464]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x5FC000
	014 Move X0, [X0+712]
	015 Call 0x1C17CF4
	016 Move X0, 0x5FC000
	017 Move X0, [X0+720]
	018 Call 0x1C17CF4
	019 Move X0, 0x5FB000
	020 Move X0, [X0+1984]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+2464], W8
	024 Move X22, 0x5FB000
	025 Move X8, [X19+928]
	026 Move X22, [X22+1984]
	027 Compare X8, 0
	028 JumpIfEqual {39}
	029 Move X0, [X22]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {35}
	033 Call 0x1C17DFC
	034 Move X0, [X22]
	035 Move X8, [X0+184]
	036 Move X8, [X8+24]
	037 Compare X8, 0
	038 JumpIfNotEqual {86}
	039 Move W8, [X19+656]
	040 Compare W8, 0
	041 JumpIfEqual {43}
	042 Move W20, [X19+720]
	043 Move W20, 2
	044 Move X8, [X19+928]
	045 Compare X8, 0
	046 JumpIfNotEqual {58}
	047 Move X8, 0x5FC000
	048 Move X8, [X8+720]
	049 Move X0, [X8]
	050 Call 0x1C17F10
	051 Move X8, 0x5FC000
	052 Move X8, [X8+712]
	053 Move W1, W20
	054 Move X21, X0
	055 Move X2, [X8]
	056 Call List`1<SamplePoint>..ctor, X0, X1
	057 Move [X19+928], X21
	058 Move X0, [X22]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {64}
	062 Call 0x1C17DFC
	063 Move X0, [X22]
	064 Move X8, [X0+184]
	065 Move X8, [X8+24]
	066 Compare X8, 0
	067 JumpIfNotEqual {86}
	068 Move X8, 0x5FC000
	069 Move X8, [X8+720]
	070 Move X0, [X8]
	071 Call 0x1C17F10
	072 Move X8, 0x5FC000
	073 Move X8, [X8+712]
	074 Move W1, W20
	075 Move X19, X0
	076 Move X2, [X8]
	077 Call List`1<SamplePoint>..ctor, X0, X1
	078 Move X0, [X22]
	079 Move W8, [X0+224]
	080 Compare W8, 0
	081 JumpIfNotEqual {84}
	082 Call 0x1C17DFC
	083 Move X0, [X22]
	084 Move X8, [X0+184]
	085 Move [X8+24], X19
	086 Move X20, [X31+32]
	087 Move X19, [X31+40]
	088 Move X22, [X31+16]
	089 Move X21, [X31+24]
	090 Move X30, [X31+48]
	091 Return 

Method: System.Void UpdateSamplePointsIfNecessary()

Disassembly:
	0x03B629D4 STP X31, X31, [X31 + 0x50]
	0x03B629D8 STRB W31, [X31 + 0x4C]
	0x03B629DC STRB W31, [X31 + 0x48]
	0x03B629E0 STRB W31, [X31 + 0x44]
	0x03B629E4 STRB W31, [X31 + 0x40]
	0x03B629E8 STP X31, X31, [X31 + 0x30]
	0x03B629EC STP X31, X31, [X31 + 0x20]
	0x03B629F0 STP X31, X31, [X31 + 0x10]
	0x03B629F4 STP X31, X31, [X31]
	0x03B629F8 BL 0x3B4F5A0
	0x03B629FC CMP W20, 0x1
	0x03B62A00 B.NE 0x3B63154
	0x03B62A04 LDRB W8, [X19 + 0x2FE]
	0x03B62A08 STR W31, [X19 + 0x354]
	0x03B62A0C CBZ W8, 0x3B63154
	0x03B62A10 MOV X0, X19
	0x03B62A14 BL 0x3B4B6D0
	0x03B62A18 TBZ X0, 0x0, 0x3B63154
	0x03B62A1C LDRB W8, [X19 + 0x481]
	0x03B62A20 CBZ W8, 0x3B62CF0
	0x03B62A24 LDR X0, [X19 + 0x470]
	0x03B62A28 CBZ X0, 0x3B632F8
	0x03B62A2C MOV X1, X31
	0x03B62A30 BL 0x3B34C50
	0x03B62A34 STP X0, X1, [X31 + 0x50]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X19, X0
	006 Call XRRayInteractor.CreateSamplePointsListsIfNecessary, X0
	007 Move W20, [X19+936]
	008 Move X0, X31
	009 Call Time.get_frameCount
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move W1, [X19+720]
	012 Move X2, [X19+928]
	013 Add X3, X31, 0
	014 Move X0, X19
	015 Move [X31], X31
	016 Move [X31+8], X31
	017 Move [X31+24], W31
	018 Move [X31+16], X31
	019 Call XRRayInteractor.UpdateSamplePoints, X0, X1, X2, X3
	020 Move X0, X31
	021 Call Time.get_frameCount
	022 Move [X19+936], W0
	023 Move X20, [X31+48]
	024 Move X19, [X31+56]
	025 Move X30, [X31+32]
	026 Add X31, X31, 64
	027 Return 

Method: System.Void UpdateSamplePoints(System.Int32 count, System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/SamplePoint> samplePoints, System.Nullable`1<UnityEngine.Ray> rayOriginOverride = null)

Disassembly:
	0x03B61C54 LDP X22, X21, [X31 + 0x1C0]
	0x03B61C58 LDP X29, X30, [X31 + 0x1B0]
	0x03B61C5C ADD X31, X31, 0x1E0
	0x03B61C60 RET
	0x03B61C64 SUB X31, X31, 0xC0
	0x03B61C68 STR D8, [X31 + 0x90]
	0x03B61C6C STR X30, [X31 + 0x98]
	0x03B61C70 STP X22, X21, [X31 + 0xA0]
	0x03B61C74 STP X20, X19, [X31 + 0xB0]
	0x03B61C78 ADRP X20, 0x881000
	0x03B61C7C LDRB W8, [X20 + 0x999]
	0x03B61C80 MOV X19, X0
	0x03B61C84 TBNZ X8, 0x0, 0x3B61CB4
	0x03B61C88 ADRP X0, 0x5F9000
	0x03B61C8C LDR X0, [X0 + 0x8D8]
	0x03B61C90 BL 0x1C16CF4
	0x03B61C94 ADRP X0, 0x5F9000
	0x03B61C98 LDR X0, [X0 + 0xB08]
	0x03B61C9C BL 0x1C16CF4
	0x03B61CA0 ADRP X0, 0x5F9000
	0x03B61CA4 LDR X0, [X0 + 0xB10]
	0x03B61CA8 BL 0x1C16CF4
	0x03B61CAC MOVZ W8, 0x1
	0x03B61CB0 STRB W8, [X20 + 0x999]
	0x03B61CB4 MOVI V0.2D, 0x0
	0x03B61CB8 ADD X20, X19, 0x3DC
	0x03B61CBC ADD X1, X31, 0x60
	0x03B61CC0 ADD X2, X31, 0x5C
	0x03B61CC4 MOV X0, X19
	0x03B61CC8 STR W31, [X31 + 0x5C]
	0x03B61CCC STUR V0, [X31 + 0x7C]
	0x03B61CD0 STP V0, V0, [X31 + 0x60]
	0x03B61CD4 STP V0, V0, [X31 + 0x30]
	0x03B61CD8 STP V0, V0, [X31 + 0x10]
	0x03B61CDC STR V0, [X31]
	0x03B61CE0 STRB W31, [X19 + 0x3D8]
	0x03B61CE4 STR X31, [X19 + 0x348]
	0x03B61CE8 STR X31, [X19 + 0x460]
	0x03B61CEC STP V0, V0, [X20]
	0x03B61CF0 STP V0, V0, [X20 + 0x20]
	0x03B61CF4 STP V0, V0, [X20 + 0x40]
	0x03B61CF8 STR V0, [X20 + 0x6]
	0x03B61CFC STUR V0, [X20 + 0x6D]
	0x03B61D00 BL 0x3B61AF0
	0x03B61D04 TBZ X0, 0x0, 0x3B61D38
	0x03B61D08 LDUR V0, [X31 + 0x7C]
	0x03B61D0C LDP V2, V1, [X31 + 0x60]
	0x03B61D10 ADD X0, X31, 0x60
	0x03B61D14 MOV X1, X31
	0x03B61D18 STUR V0, [X20 + 0x1C]
	0x03B61D1C STP V2, V1, [X20]
	0x03B61D20 LDR W21, [X31 + 0x5C]
	0x03B61D24 BL 0x3C8E684
	0x03B61D28 MOV V8.16B, V0.16B
	0x03B61D2C MOVZ W8, 0x1
	0x03B61D30 STRB W8, [X19 + 0x3D8]
	0x03B61D34 B 0x3B61D44
	0x03B61D38 MOVN W8, 0x80800000
	0x03B61D3C MOVN W21, 0x80000000
	0x03B61D40 FMOV S8, W8
	0x03B61D44 ADD X2, X19, 0x3B0
	0x03B61D48 ADD X1, X31, 0x0
	0x03B61D4C MOV X0, X19
	0x03B61D50 BL 0x3B61B5C
	0x03B61D54 TBZ X0, 0x0, 0x3B61D8C
	0x03B61D58 ADD X0, X19, 0x408
	0x03B61D5C ADD X1, X31, 0x0
	0x03B61D60 MOVZ W2, 0x50
	0x03B61D64 BL 0x3EB1AC0
	0x03B61D68 LDR W9, [X19 + 0x3B0]
	0x03B61D6C CMP W9, 0x1
	0x03B61D70 CSEL X8, X31, X19, LT
	0x03B61D74 B.LT 0x3B61DD4
	0x03B61D78 CMP W9, W21
	0x03B61D7C B.GE 0x3B61DE0
	0x03B61D80 MOVZ W9, 0x1
	0x03B61D84 MOV X8, X19
	0x03B61D88 B 0x3B61DF8
	0x03B61D8C LDRB W8, [X19 + 0x3D8]
	0x03B61D90 CBNZ W8, 0x3B61E08
	0x03B61D94 MOV X0, X19
	0x03B61D98 BL 0x3B619D4
	0x03B61D9C LDR X0, [X19 + 0x3A0]
	0x03B61DA0 CBZ X0, 0x3B61F2C
	0x03B61DA4 ADRP X9, 0x5F9000
	0x03B61DA8 LDR W8, [X0 + 0x18]
	0x03B61DAC LDR X9, [X9 + 0xB10]
	0x03B61DB0 SUB W1, W8, 0x1
	0x03B61DB4 LDR X2, [X9]
	0x03B61DB8 BL 0x317B51C
	0x03B61DBC MOV X0, X31
	0x03B61DC0 BL 0x3887BE0
	0x03B61DC4 STR S0, [X19 + 0x338]
	0x03B61DC8 STR S1, [X19 + 0x33C]
	0x03B61DCC STR S2, [X19 + 0x340]
	0x03B61DD0 B 0x3B61F14
	0x03B61DD4 MOV W9, W31
	0x03B61DD8 MOV X8, X19
	0x03B61DDC B 0x3B61DFC
	0x03B61DE0 B.NE 0x3B61DF4
	0x03B61DE4 LDR V0, [X31 + 0x10]
	0x03B61DE8 FCMP S0, S8
	0x03B61DEC CSET W9, LS
	0x03B61DF0 B 0x3B61DF8
	0x03B61DF4 MOV W9, W31
	0x03B61DF8 CBZ X8, 0x3B61F2C
	0x03B61DFC STRB W9, [X8 + 0x458]
	0x03B61E00 MOVZ W8, 0x1
	0x03B61E04 STRB W8, [X19 + 0x3D8]
	0x03B61E08 LDRB W8, [X19 + 0x458]
	0x03B61E0C CBZ W8, 0x3B61E38
	0x03B61E10 ADD X8, X19, 0x408
	0x03B61E14 LDR X0, [X19 + 0x408]
	0x03B61E18 LDUR V0, [X8 + 0x2C]
	0x03B61E1C LDR V1, [X8 + 0x34]
	0x03B61E20 STR D0, [X19 + 0x338]
	0x03B61E24 STR S1, [X19 + 0x340]
	0x03B61E28 CBZ X0, 0x3B61F2C
	0x03B61E2C MOV X1, X31
	0x03B61E30 BL 0x3C356F8
	0x03B61E34 B 0x3B61F10
	0x03B61E38 MOV X0, X20
	0x03B61E3C MOV X1, X31
	0x03B61E40 BL 0x3C8E66C
	0x03B61E44 LDR X21, [X19 + 0x30]
	0x03B61E48 MOV X0, X20
	0x03B61E4C MOV X1, X31
	0x03B61E50 STR S0, [X19 + 0x338]
	0x03B61E54 STR S1, [X19 + 0x33C]
	0x03B61E58 STR S2, [X19 + 0x340]
	0x03B61E5C BL 0x3C8E5C0
	0x03B61E60 CBZ X21, 0x3B61F2C
	0x03B61E64 ADD X22, X19, 0x460
	0x03B61E68 MOV X1, X0
	0x03B61E6C MOV X0, X21
	0x03B61E70 MOV X2, X22
	0x03B61E74 MOV X3, X31
	0x03B61E78 BL 0x3B72C1C
	0x03B61E7C TBZ X0, 0x0, 0x3B61ED4
	0x03B61E80 LDR X20, [X22]
	0x03B61E84 CBZ X20, 0x3B61F2C
	0x03B61E88 ADRP X10, 0x5F9000
	0x03B61E8C LDR X8, [X20]
	0x03B61E90 LDR X10, [X10 + 0x8D8]
	0x03B61E94 MOV W21, W0
	0x03B61E98 LDRH W9, [X8 + 0x12E]
	0x03B61E9C LDR X1, [X10]
	0x03B61EA0 CBZ X9, 0x3B61EC4
	0x03B61EA4 LDR X10, [X8 + 0xB0]
	0x03B61EA8 ADD X10, X10, 0x8
	0x03B61EAC LDUR X11, [X10 - 0x8]
	0x03B61EB0 CMP X11, X1
	0x03B61EB4 B.EQ 0x3B61EE4
	0x03B61EB8 SUBS X9, X9, 0x1
	0x03B61EBC ADD X10, X10, 0x10
	0x03B61EC0 B.NE 0x3B61EAC
	0x03B61EC4 MOVZ W2, 0x7
	0x03B61EC8 MOV X0, X20
	0x03B61ECC BL 0x1C5C788
	0x03B61ED0 B 0x3B61EF4
	0x03B61ED4 MOV X0, X20
	0x03B61ED8 MOV X1, X31
	0x03B61EDC BL 0x3C8E694
	0x03B61EE0 B 0x3B61F10
	0x03B61EE4 LDR W9, [X10]
	0x03B61EE8 ADD W9, W9, 0x7
	0x03B61EEC ADD X8, X8, W9, 0x4, SXTW
	0x03B61EF0 ADD X0, X8, 0x138
	0x03B61EF4 LDP X8, X2, [X0]
	0x03B61EF8 MOV X0, X20
	0x03B61EFC MOV X1, X19
	0x03B61F00 BLR X8
	0x03B61F04 CBZ X19, 0x3B61F2C
	0x03B61F08 EOR W8, W21, 0x1
	0x03B61F0C TBNZ X8, 0x0, 0x3B61F2C
	0x03B61F10 STR X0, [X19 + 0x348]
	0x03B61F14 LDP X20, X19, [X31 + 0xB0]
	0x03B61F18 LDP X22, X21, [X31 + 0xA0]
	0x03B61F1C LDR X30, [X31 + 0x98]
	0x03B61F20 LDR V8, [X31 + 0x90]
	0x03B61F24 ADD X31, X31, 0xC0
	0x03B61F28 RET
	0x03B61F2C BL 0x1C16F20
	0x03B61F30 STP X30, X19, [X31 - 0x10]!
	0x03B61F34 MOV X19, X0
	0x03B61F38 MOV X0, X31
	0x03B61F3C BL 0x3C3C6C4
	0x03B61F40 LDRB W8, [X19 + 0x458]
	0x03B61F44 CBZ W8, 0x3B61F7C
	0x03B61F48 LDR V2, [X19 + 0x380]
	0x03B61F4C LDR V1, [X19 + 0x2F0]
	0x03B61F50 FSUB S0, S0, S2
	0x03B61F54 FCMP S0, S1
	0x03B61F58 B.LE 0x3B61F7C
	0x03B61F5C LDR V2, [X19 + 0x2F8]
	0x03B61F60 FADD S1, S1, S2
	0x03B61F64 FCMP S0, S1
	0x03B61F68 B.MI 0x3B61F74
	0x03B61F6C LDRB W8, [X19 + 0x385]
	0x03B61F70 CBZ W8, 0x3B61F7C
	0x03B61F74 MOVZ W8, 0x1
	0x03B61F78 B 0x3B61F80
	0x03B61F7C MOV W8, W31
	0x03B61F80 STRB W8, [X19 + 0x384]
	0x03B61F84 LDP X30, X19, [X31], #0x10
	0x03B61F88 RET
	0x03B61F8C STR X30, [X31 - 0x10]!
	0x03B61F90 LDR X8, [X0 + 0x3B8]
	0x03B61F94 CBZ X8, 0x3B6207C
	0x03B61F98 LDR W9, [X8 + 0x18]
	0x03B61F9C CBZ W9, 0x3B62078
	0x03B61FA0 LDR V0, [X1]
	0x03B61FA4 LDR V1, [X1 + 0x8]
	0x03B61FA8 STR D0, [X8 + 0x20]
	0x03B61FAC STR S1, [X8 + 0x28]
	0x03B61FB0 LDR X8, [X0 + 0x3B8]
	0x03B61FB4 CBZ X8, 0x3B6207C
	0x03B61FB8 LDR W9, [X8 + 0x18]
	0x03B61FBC CBZ W9, 0x3B62078
	0x03B61FC0 CMP W9, 0x1
	0x03B61FC4 B.EQ 0x3B62078
	0x03B61FC8 LDR V0, [X0 + 0x2C8]
	0x03B61FCC LDR V3, [X2 + 0x8]
	0x03B61FD0 LDR V4, [X2]
	0x03B61FD4 LDR V1, [X0 + 0x2CC]
	0x03B61FD8 LDR V2, [X8 + 0x28]
	0x03B61FDC LDR V5, [X3 + 0x8]
	0x03B61FE0 LDR V6, [X3]
	0x03B61FE4 FMUL S3, S0, S3
	0x00000000 INVALID
	0x03B61FEC LDR V4, [X8 + 0x20]
	0x03B61FF0 FMUL S5, S1, S5
	0x00000000 INVALID
	0x03B61FF8 FADD S2, S2, S3
	0x03B61FFC FADD V0.2S, V4.2S, V0.2S
	0x03B62000 FADD S2, S2, S5
	0x03B62004 FADD V0.2S, V0.2S, V1.2S
	0x03B62008 STUR D0, [X8 + 0x2C]
	0x03B6200C STR S2, [X8 + 0x34]
	0x03B62010 LDR X8, [X0 + 0x3B8]
	0x03B62014 CBZ X8, 0x3B6207C
	0x03B62018 LDR W9, [X8 + 0x18]
	0x03B6201C CBZ W9, 0x3B62078
	0x03B62020 CMP W9, 0x2
	0x03B62024 B.LS 0x3B62078
	0x03B62028 LDR V0, [X0 + 0x2C0]
	0x03B6202C LDR V3, [X2 + 0x8]
	0x03B62030 LDR V4, [X2]
	0x03B62034 LDR V1, [X0 + 0x2C4]
	0x03B62038 LDR V2, [X8 + 0x28]
	0x03B6203C LDR V5, [X3 + 0x8]
	0x03B62040 LDR V6, [X3]
	0x03B62044 FMUL S3, S0, S3
	0x00000000 INVALID
	0x03B6204C LDR V4, [X8 + 0x20]
	0x03B62050 FMUL S5, S1, S5
	0x00000000 INVALID
	0x03B62058 FADD S2, S2, S3
	0x03B6205C FADD V0.2S, V4.2S, V0.2S
	0x03B62060 FADD S2, S2, S5
	0x03B62064 FADD V0.2S, V0.2S, V1.2S
	0x03B62068 STR D0, [X8 + 0x38]
	0x03B6206C STR S2, [X8 + 0x40]
	0x03B62070 LDR X30, [X31], #0x10
	0x03B62074 RET
	0x03B62078 BL 0x1C16F28
	0x03B6207C BL 0x1C16F20
	0x03B62080 STR D14, [X31 - 0x70]!
	0x03B62084 STP D13, D12, [X31 + 0x10]
	0x03B62088 STP D11, D10, [X31 + 0x20]
	0x03B6208C STP D9, D8, [X31 + 0x30]
	0x03B62090 STP X30, X23, [X31 + 0x40]
	0x03B62094 STP X22, X21, [X31 + 0x50]
	0x03B62098 STP X20, X19, [X31 + 0x60]
	0x03B6209C LDR V0, [X2]
	0x03B620A0 LDR V1, [X0 + 0x2B0]
	0x03B620A4 LDR V2, [X2 + 0x8]
	0x03B620A8 MOV X19, X5
	0x03B620AC MOV X22, X4
	0x00000000 INVALID
	0x03B620B4 FMUL S1, S2, S1
	0x03B620B8 MOV X23, X2
	0x03B620BC MOV X21, X1
	0x03B620C0 MOV X20, X0
	0x03B620C4 STR D0, [X3]
	0x03B620C8 STR S1, [X3 + 0x8]
	0x03B620CC BL 0x3B5F4F8
	0x03B620D0 MOV X0, X31
	0x03B620D4 BL 0x3887BE4
	0x03B620D8 MOV X0, X20
	0x03B620DC MOV V8.16B, V0.16B
	0x03B620E0 MOV V9.16B, V1.16B
	0x03B620E4 MOV V10.16B, V2.16B
	0x03B620E8 BL 0x3B5F55C
	0x03B620EC MOV X0, X31
	0x03B620F0 BL 0x3887BE4
	0x03B620F4 MOV V11.16B, V0.16B
	0x03B620F8 LDR V0, [X20 + 0x2B4]
	0x03B620FC MOV V12.16B, V1.16B
	0x03B62100 MOV V14.16B, V2.16B
	0x03B62104 MOV X0, X31
	0x03B62108 FNEG S0, S0
	0x03B6210C FMUL S1, S8, S0
	0x03B62110 FMUL S3, S9, S0
	0x03B62114 FMUL S0, S10, S0
	0x03B62118 STP S1, S3, [X22]
	0x03B6211C STR S0, [X22 + 0x8]
	0x03B62120 LDR V3, [X23 + 0x8]
	0x03B62124 LDP S0, S1, [X23]
	0x03B62128 MOV V2.16B, V3.16B
	0x03B6212C BL 0x3887BE0
	0x03B62130 MOV X0, X20
	0x03B62134 BL 0x3B5F1FC

ISIL:
	001 Subtract X31, X31, 320
	002 Move [X31+240], D10
	003 Move [X31+248], D9
	004 Move [X31+256], D8
	005 Move [X31+264], X29
	006 Move [X31+272], X30
	007 Move [X31+280], X23
	008 Move [X31+288], X22
	009 Move [X31+296], X21
	010 Move [X31+304], X20
	011 Move [X31+312], X19
	012 Move X23, 0x882000
	013 Move W8, [X23+2465]
	014 Move X22, X3
	015 Move X19, X2
	016 Move W20, W1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0x5FB000
	023 Move X0, [X0+760]
	024 Call 0x1C17CF4
	025 Move X0, 0x5FB000
	026 Move X0, [X0+752]
	027 Call 0x1C17CF4
	028 Move X0, 0x5FA000
	029 Move X0, [X0+2832]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X23+2465], W8
	033 Move [X31+232], W31
	034 Move [X31+224], X31
	035 Move [X31+216], W31
	036 Move [X31+208], X31
	037 Move [X31+200], W31
	038 Move [X31+192], X31
	039 Move [X31+184], W31
	040 Move [X31+176], X31
	041 Move [X31+168], W31
	042 Move [X31+152], X31
	043 Move [X31+160], X31
	044 Move [X31+144], X31
	045 Move [X31+136], W31
	046 Move [X31+128], X31
	047 Move [X31+120], W31
	048 Move [X31+112], X31
	049 Move [X31+104], W31
	050 Move [X31+96], X31
	051 Move [X31+88], W31
	052 Move [X31+80], X31
	053 Move [X31+72], W31
	054 Move [X31+64], X31
	055 Move [X31+52], X31
	056 Move [X31+40], W31
	057 Move [X31+32], X31
	058 NotImplemented "Instruction LDUR not yet implemented."
	059 Move V1, [X22]
	060 Add X1, X31, 0
	061 Add X2, X31, 224
	062 Add X3, X31, 208
	063 Move X0, X21
	064 Move [X31+12], V0
	065 Move [X31], V1
	066 Call XRRayInteractor.GetLineOriginAndDirection, X0, X1, X2, X3
	067 Compare X19, 0
	068 JumpIfEqual {332}
	069 Move W8, [X19+28]
	070 Move X22, 0x5FB000
	071 Move X0, X31
	072 Add W8, W8, 1
	073 Move [X19+24], W31
	074 Move [X19+28], W8
	075 Move S10, [X31+224]
	076 Move S9, [X31+228]
	077 Move V8, [X31+232]
	078 Move X22, [X22+760]
	079 Move V0, V10
	080 Move V1, V9
	081 Move V2, V8
	082 Call float3.op_Implicit, X0
	083 Move W10, [X19+28]
	084 Move X8, [X19+16]
	085 Move X9, [X22]
	086 Add W10, W10, 1
	087 Move [X19+28], W10
	088 Compare X8, 0
	089 JumpIfEqual {332}
	090 NotImplemented "Instruction LDRSW not yet implemented."
	091 Move W11, [X8+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Add W9, W10, 1
	094 Add X8, X8, X10
	095 Move [X19+24], W9
	096 Move [X8+32], S0
	097 Move [X8+40], S1
	098 Move [X8+40], S2
	099 Move [X8+44], W31
	100 Move X8, [X9+32]
	101 Move S3, W31
	102 Move X0, X19
	103 Move X8, [X8+192]
	104 Move X1, [X8+112]
	105 Call List`1<SamplePoint>.AddWithResize, X0, X1
	106 Move W8, [X21+656]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Compare W8, 0
	110 JumpIfNotEqual {320}
	111 Move X8, 0x5FA000
	112 Move X8, [X8+2832]
	113 Move X0, X19
	114 Move W1, W31
	115 Move X2, [X8]
	116 Call List`1<SamplePoint>.get_Item, X0, X1
	117 Move V3, [X31+216]
	118 Move V8, V0
	119 Move V9, V1
	120 Move S0, [X31+208]
	121 Move S1, [X31+212]
	122 Move V10, V2
	123 Move V2, V3
	124 Move X0, X31
	125 Call float3.op_Implicit, X0
	126 Move W10, [X19+28]
	127 Move V3, [X21+664]
	128 Move X8, [X19+16]
	129 Move X9, [X22]
	130 Add W10, W10, 1
	131 Move [X19+28], W10
	132 Compare X8, 0
	133 JumpIfEqual {332}
	134 NotImplemented "Instruction LDRSW not yet implemented."
	135 Move W11, [X8+24]
	136 Multiply S0, S0, S3
	137 Multiply S1, S1, S3
	138 Multiply S2, S2, S3
	139 Add S0, S8, S0
	140 Add S1, S9, S1
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Add S2, S10, S2
	143 Add W9, W10, 1
	144 Add X8, X8, X10
	145 Move W10, 0x3F800000
	146 Move [X19+24], W9
	147 Move [X8+32], S0
	148 Move [X8+40], S1
	149 Move [X8+40], S2
	150 Move [X8+44], W10
	151 Move V0, V10
	152 Move V1, V9
	153 Move V2, V8
	154 Move X0, X31
	155 Call float3.op_Implicit, X0
	156 Move S3, [X31+208]
	157 Move S4, [X31+212]
	158 Move V5, [X31+216]
	159 Move [X31+144], S0
	160 Move [X31+152], S1
	161 Move [X31+152], S2
	162 Move V0, V3
	163 Move V1, V4
	164 Move V2, V5
	165 Move X0, X31
	166 Call float3.op_Implicit, X0
	167 Move X0, X21
	168 Move [X31+64], S0
	169 Move [X31+72], S1
	170 Move [X31+72], S2
	171 Call XRRayInteractor.get_referenceUp, X0
	172 Move X0, X31
	173 Call float3.op_Implicit, X0
	174 Add X1, X31, 144
	175 Add X2, X31, 64
	176 Add X3, X31, 48
	177 Move X0, X21
	178 Move [X31+48], S0
	179 Move [X31+56], S1
	180 Move [X31+56], S2
	181 Call XRRayInteractor.UpdateBezierControlPoints, X0, X1, X2, X3
	182 Move X8, [X21+952]
	183 Compare X8, 0
	184 JumpIfEqual {332}
	185 Move W9, [X8+24]
	186 Compare W9, 0
	187 JumpIfEqual {333}
	188 Move V0, [X8+32]
	189 Move V1, [X8+40]
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Move [X31+112], D0
	192 Move [X31+120], S1
	193 NotImplemented "Instruction LDUR not yet implemented."
	194 Move V1, [X8+52]
	195 NotImplemented "Instruction CMP not yet implemented."
	196 Move [X31+96], D0
	197 Move [X31+104], S1
	198 Move V0, [X8+56]
	199 Move V1, [X8+64]
	200 NotImplemented "Instruction CMP not yet implemented."
	201 Move [X31+80], D0
	202 Move [X31+88], S1
	203 Subtract W8, W20, 1
	204 Move S0, 1
	205 NotImplemented "Instruction SCVTF not yet implemented."
	206 NotImplemented "Instruction FDIV not yet implemented."
	207 Move W21, 1
	208 NotImplemented "Instruction SCVTF not yet implemented."
	209 Multiply S8, S9, S0
	210 Add X0, X31, 112
	211 Add X1, X31, 96
	212 Add X2, X31, 80
	213 Add X3, X31, 32
	214 Move V0, V8
	215 Move X4, X31
	216 Call CurveUtility.SampleQuadraticBezierPoint, X0, X1, X2, V0, X3
	217 Move W9, [X19+28]
	218 Move S0, [X31+32]
	219 Move S1, [X31+36]
	220 Move V2, [X31+40]
	221 Move X8, [X19+16]
	222 Move X10, [X22]
	223 Add W9, W9, 1
	224 Move [X19+28], W9
	225 Compare X8, 0
	226 JumpIfEqual {332}
	227 NotImplemented "Instruction LDRSW not yet implemented."
	228 Move W11, [X8+24]
	229 NotImplemented "Instruction CMP not yet implemented."
	230 Add W10, W9, 1
	231 Add X8, X8, X9
	232 Move [X19+24], W10
	233 Move [X8+32], S0
	234 Move [X8+40], S1
	235 Move [X8+40], S2
	236 Move [X8+48], S8
	237 Move X8, [X10+32]
	238 Move X0, X19
	239 Move V3, V8
	240 Move X8, [X8+192]
	241 Move X1, [X8+112]
	242 Call List`1<SamplePoint>.AddWithResize, X0, X1
	243 Add W21, W21, 1
	244 NotImplemented "Instruction CMP not yet implemented."
	245 Move V0, V10
	246 Move V1, V9
	247 Move V2, V8
	248 Move X0, X31
	249 Call float3.op_Implicit, X0
	250 Move S3, [X31+208]
	251 Move S4, [X31+212]
	252 Move V5, [X31+216]
	253 Move [X31+192], S0
	254 Move [X31+200], S1
	255 Move [X31+200], S2
	256 Move V0, V3
	257 Move V1, V4
	258 Move V2, V5
	259 Move X0, X31
	260 Call float3.op_Implicit, X0
	261 Add X1, X31, 192
	262 Add X2, X31, 144
	263 Add X3, X31, 176
	264 Add X4, X31, 160
	265 Add X5, X31, 156
	266 Move X0, X21
	267 Move [X31+144], S0
	268 Move [X31+152], S1
	269 Move [X31+152], S2
	270 Call XRRayInteractor.CalculateProjectileParameters, X0, X1, X2, X3, X4, X5
	271 NotImplemented "Instruction CMP not yet implemented."
	272 Move V0, [X31+156]
	273 Subtract W8, W20, 1
	274 NotImplemented "Instruction SCVTF not yet implemented."
	275 Move W21, 1
	276 NotImplemented "Instruction FDIV not yet implemented."
	277 NotImplemented "Instruction SCVTF not yet implemented."
	278 Multiply S8, S9, S0
	279 Add X0, X31, 192
	280 Add X1, X31, 176
	281 Add X2, X31, 160
	282 Add X3, X31, 128
	283 Move V0, V8
	284 Move X4, X31
	285 Call CurveUtility.SampleProjectilePoint, X0, X1, X2, V0, X3
	286 Move W9, [X19+28]
	287 Move S0, [X31+128]
	288 Move S1, [X31+132]
	289 Move V2, [X31+136]
	290 Move X8, [X19+16]
	291 Move X10, [X22]
	292 Add W9, W9, 1
	293 Move [X19+28], W9
	294 Compare X8, 0
	295 JumpIfEqual {332}
	296 NotImplemented "Instruction LDRSW not yet implemented."
	297 Move W11, [X8+24]
	298 NotImplemented "Instruction CMP not yet implemented."
	299 Add W10, W9, 1
	300 Add X8, X8, X9
	301 Move [X19+24], W10
	302 Move [X8+32], S0
	303 Move [X8+40], S1
	304 Move [X8+40], S2
	305 Move [X8+48], S8
	306 Move X8, [X10+32]
	307 Move X0, X19
	308 Move V3, V8
	309 Move X8, [X8+192]
	310 Move X1, [X8+112]
	311 Call List`1<SamplePoint>.AddWithResize, X0, X1
	312 Add W21, W21, 1
	313 NotImplemented "Instruction CMP not yet implemented."
	314 Move X8, [X9+32]
	315 Move S3, 1
	316 Move X0, X19
	317 Move X8, [X8+192]
	318 Move X1, [X8+112]
	319 Call List`1<SamplePoint>.AddWithResize, X0, X1
	320 Move X20, [X31+304]
	321 Move X19, [X31+312]
	322 Move X22, [X31+288]
	323 Move X21, [X31+296]
	324 Move X30, [X31+272]
	325 Move X23, [X31+280]
	326 Move X29, [X31+264]
	327 Move D9, [X31+248]
	328 Move D8, [X31+256]
	329 Move V10, [X31+240]
	330 Add X31, X31, 320
	331 Return 
	332 Call 0x1C17F20
	333 Call 0x1C17F28

Method: System.Void UpdateRaycastHits()

Disassembly:
	0x03B637C4 LDR X0, [X20]
	0x03B637C8 LDR W8, [X0 + 0xE0]
	0x03B637CC CBNZ W8, 0x3B637D4
	0x03B637D0 BL 0x1C16DFC
	0x03B637D4 FMUL S0, S15, S15
	0x03B637D8 FMUL S1, S13, S13
	0x03B637DC ADRP X8, 0xFFFFFFFFFCF87000
	0x03B637E0 FADD S0, S0, S1
	0x03B637E4 LDR V1, [X8 + 0x17C]
	0x03B637E8 FMUL S2, S14, S14
	0x03B637EC FADD S0, S2, S0
	0x03B637F0 FSQRT S11, S0
	0x03B637F4 FCMP S11, S1
	0x03B637F8 B.LE 0x3B6380C
	0x03B637FC FDIV S12, S15, S11
	0x03B63800 FDIV S13, S13, S11
	0x03B63804 FDIV S14, S14, S11
	0x03B63808 B 0x3B63844
	0x03B6380C ADRP X21, 0x875000
	0x03B63810 LDRB W8, [X21 + 0x783]
	0x03B63814 CBNZ W8, 0x3B6382C
	0x03B63818 ADRP X0, 0x590000
	0x03B6381C LDR X0, [X0 + 0x5A0]
	0x03B63820 BL 0x1C16CF4
	0x03B63824 MOVZ W8, 0x1
	0x03B63828 STRB W8, [X21 + 0x783]
	0x03B6382C ADRP X8, 0x590000
	0x03B63830 LDR X8, [X8 + 0x5A0]
	0x03B63834 LDR X8, [X8]
	0x03B63838 LDR X8, [X8 + 0xB8]
	0x03B6383C LDP S12, S13, [X8]
	0x03B63840 LDR V14, [X8 + 0x8]
	0x03B63844 ADRP X21, 0x875000
	0x03B63848 LDRB W8, [X21 + 0x85C]
	0x03B6384C STP S12, S13, [X31]
	0x03B63850 STR S14, [X31 + 0x8]
	0x03B63854 CBNZ W8, 0x3B6386C
	0x03B63858 ADRP X0, 0x590000
	0x03B6385C LDR X0, [X0 + 0x5A8]
	0x03B63860 BL 0x1C16CF4
	0x03B63864 MOVZ W8, 0x1
	0x03B63868 STRB W8, [X21 + 0x85C]
	0x03B6386C LDR X0, [X20]
	0x03B63870 LDR W8, [X0 + 0xE0]
	0x03B63874 CBNZ W8, 0x3B6387C
	0x03B63878 BL 0x1C16DFC
	0x03B6387C LDR W8, [X19 + 0x2E8]
	0x03B63880 CMP W8, 0x1
	0x03B63884 B.NE 0x3B63890
	0x03B63888 MOVZ W20, 0x2
	0x03B6388C B 0x3B63894
	0x03B63890 LDR W20, [X19 + 0x2E4]
	0x03B63894 LDR W8, [X19 + 0x2D4]
	0x03B63898 CMP W8, 0x2
	0x03B6389C B.EQ 0x3B638F8
	0x03B638A0 CMP W8, 0x1
	0x03B638A4 B.EQ 0x3B63908
	0x03B638A8 CBNZ W8, 0x3B63900
	0x03B638AC LDR W0, [X19 + 0x2E0]
	0x03B638B0 LDR X21, [X19 + 0x388]
	0x03B638B4 MOV X1, X31
	0x03B638B8 ADD X22, X19, 0x3C8
	0x03B638BC BL 0x3C35CB8
	0x03B638C0 MOV W2, W0
	0x03B638C4 MOV X0, X22
	0x03B638C8 MOV V0.16B, V10.16B
	0x03B638CC MOV V1.16B, V9.16B
	0x03B638D0 MOV V2.16B, V8.16B
	0x03B638D4 MOV V3.16B, V12.16B
	0x03B638D8 MOV V4.16B, V13.16B
	0x03B638DC MOV V5.16B, V14.16B
	0x03B638E0 MOV X1, X21
	0x03B638E4 MOV V6.16B, V11.16B
	0x03B638E8 MOV W3, W20
	0x03B638EC MOV X4, X31
	0x03B638F0 BL 0x3C8C4DC
	0x03B638F4 B 0x3B63998
	0x03B638F8 LDR W8, [X19 + 0x290]
	0x03B638FC CBZ W8, 0x3B6395C
	0x03B63900 LDR W0, [X19 + 0x390]
	0x03B63904 B 0x3B6399C
	0x03B63908 LDR W0, [X19 + 0x2E0]
	0x03B6390C LDR V15, [X19 + 0x2D8]
	0x03B63910 LDR X21, [X19 + 0x388]
	0x03B63914 MOV X1, X31
	0x03B63918 ADD X22, X19, 0x3C8
	0x03B6391C BL 0x3C35CB8
	0x03B63920 MOV W2, W0
	0x03B63924 MOV X0, X22
	0x03B63928 MOV V0.16B, V10.16B
	0x03B6392C MOV V1.16B, V9.16B
	0x03B63930 MOV V2.16B, V8.16B
	0x03B63934 MOV V3.16B, V15.16B
	0x03B63938 MOV V4.16B, V12.16B
	0x03B6393C MOV V5.16B, V13.16B
	0x03B63940 MOV V6.16B, V14.16B
	0x03B63944 MOV X1, X21
	0x03B63948 MOV V7.16B, V11.16B

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x880000
	015 Move W8, [X20+2466]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x5F8000
	022 Move X0, [X0+2824]
	023 Call 0x1C17CF4
	024 Move X0, 0x5F8000
	025 Move X0, [X0+2832]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+2466], W8
	029 Move X0, [X19+928]
	030 Move [X19+912], W31
	031 Move [X19+940], W31
	032 Compare X0, 0
	033 JumpIfEqual {101}
	034 Move X21, 0x5F8000
	035 Move X21, [X21+2832]
	036 Move W20, 1
	037 Move W8, [X0+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X2, [X21]
	040 Move W1, W31
	041 Call List`1<SamplePoint>.get_Item, X0, X1
	042 Move X0, [X19+928]
	043 Compare X0, 0
	044 JumpIfEqual {101}
	045 Move X2, [X21]
	046 Subtract W1, W20, 1
	047 Move [X31+12], S2
	048 Move V10, V1
	049 Move V9, V0
	050 Call List`1<SamplePoint>.get_Item, X0, X1
	051 Move X0, [X19+928]
	052 Compare X0, 0
	053 JumpIfEqual {101}
	054 Move X2, [X21]
	055 Move W1, W20
	056 Move V11, V0
	057 Move V12, V1
	058 Move V13, V2
	059 Call List`1<SamplePoint>.get_Item, X0, X1
	060 Move V14, V0
	061 Move V15, V1
	062 Move V8, V2
	063 Move V0, V11
	064 Move V1, V12
	065 Move V2, V13
	066 Move X0, X31
	067 Call float3.op_Implicit, X0
	068 Move V11, V0
	069 Move V12, V1
	070 Move V13, V2
	071 Move V0, V14
	072 Move V1, V15
	073 Move V2, V8
	074 Move X0, X31
	075 Call float3.op_Implicit, X0
	076 Move V15, V2
	077 Move V2, [X31+12]
	078 Move V8, V0
	079 Move V14, V1
	080 Move V0, V9
	081 Move V1, V10
	082 Move X0, X31
	083 Call float3.op_Implicit, X0
	084 Move [X31+4], S1
	085 Move [X31+12], S2
	086 Move [X31], S0
	087 Move X0, X19
	088 Move V0, V11
	089 Move V1, V12
	090 Move V2, V13
	091 Move V3, V8
	092 Move V4, V14
	093 Move V5, V15
	094 Call XRRayInteractor.CheckCollidersBetweenPoints, X0, X1, X2, X3
	095 Move W8, [X19+912]
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move X0, [X19+928]
	098 Add W20, W20, 1
	099 Compare X0, 0
	100 JumpIfNotEqual {37}
	101 Call 0x1C17F20
	102 Move [X19+940], W20
	103 Move X20, [X31+96]
	104 Move X19, [X31+104]
	105 Move X30, [X31+80]
	106 Move X21, [X31+88]
	107 Move D9, [X31+64]
	108 Move D8, [X31+72]
	109 Move D11, [X31+48]
	110 Move D10, [X31+56]
	111 Move D13, [X31+32]
	112 Move D12, [X31+40]
	113 Move D15, [X31+16]
	114 Move D14, [X31+24]
	115 Add X31, X31, 112
	116 Return 

Method: System.Void CheckCollidersBetweenPoints(UnityEngine.Vector3 from, UnityEngine.Vector3 to, UnityEngine.Vector3 origin)

Disassembly:
	0x03B646A0 BL 0x3B61AF0
	0x03B646A4 TBZ X0, 0x0, 0x3B646C8
	0x03B646A8 LDR X19, [X19 + 0x50]
	0x03B646AC ADD X0, X31, 0x0
	0x03B646B0 MOV X1, X31
	0x03B646B4 BL 0x3C8E66C
	0x03B646B8 CBZ X19, 0x3B646D8
	0x03B646BC MOV X0, X19
	0x03B646C0 MOV X1, X31
	0x03B646C4 BL 0x3C3F62C
	0x03B646C8 LDP X20, X19, [X31 + 0x40]
	0x03B646CC LDP X30, X21, [X31 + 0x30]
	0x03B646D0 ADD X31, X31, 0x50
	0x03B646D4 RET
	0x03B646D8 BL 0x1C16F20
	0x03B646DC STP X30, X19, [X31 - 0x10]!
	0x03B646E0 MOV X19, X0
	0x03B646E4 BL 0x3B50910
	0x03B646E8 MOV X0, X31
	0x03B646EC STRB W31, [X19 + 0x36C]
	0x03B646F0 BL 0x3C3C6C4
	0x03B646F4 MOV X0, X19
	0x03B646F8 STR S0, [X19 + 0x368]
	0x03B646FC STRB W31, [X19 + 0x374]
	0x03B64700 BL 0x3B4B6D0
	0x03B64704 TBZ X0, 0x0, 0x3B64710
	0x03B64708 LDP X30, X19, [X31], #0x10
	0x03B6470C RET
	0x03B64710 MOV X0, X19
	0x03B64714 LDP X30, X19, [X31], #0x10
	0x03B64718 B 0x3B6471C
	0x03B6471C SUB X31, X31, 0x50
	0x03B64720 STP D11, D10, [X31 + 0x20]
	0x03B64724 STP D9, D8, [X31 + 0x30]
	0x03B64728 STP X30, X19, [X31 + 0x40]
	0x03B6472C LDR X1, [X0 + 0xB0]
	0x03B64730 ADD X8, X31, 0x0
	0x03B64734 MOV X19, X0
	0x03B64738 BL 0x3B52B64
	0x03B6473C LDR X0, [X19 + 0x50]
	0x03B64740 CBZ X0, 0x3B6478C
	0x03B64744 LDP S0, S1, [X31]
	0x03B64748 LDP S2, S8, [X31 + 0x8]
	0x03B6474C LDP S9, S10, [X31 + 0x10]
	0x03B64750 LDR V11, [X31 + 0x18]
	0x03B64754 MOV X1, X31
	0x03B64758 BL 0x3C3EC04
	0x03B6475C LDR X0, [X19 + 0x50]
	0x03B64760 CBZ X0, 0x3B6478C
	0x03B64764 MOV V0.16B, V8.16B
	0x03B64768 MOV V1.16B, V9.16B
	0x03B6476C MOV V2.16B, V10.16B
	0x03B64770 MOV V3.16B, V11.16B
	0x03B64774 LDP X30, X19, [X31 + 0x40]
	0x03B64778 LDP D9, D8, [X31 + 0x30]
	0x03B6477C LDP D11, D10, [X31 + 0x20]
	0x03B64780 MOV X1, X31
	0x03B64784 ADD X31, X31, 0x50
	0x03B64788 B 0x3C3F8B8
	0x03B6478C BL 0x1C16F20
	0x03B64790 LDR X8, [X0]
	0x03B64794 LDR X3, [X8 + 0x968]
	0x03B64798 LDR X2, [X8 + 0x970]
	0x03B6479C BR X3
	0x03B647A0 LDR X8, [X0]
	0x03B647A4 LDR X3, [X8 + 0x978]
	0x03B647A8 LDR X2, [X8 + 0x980]
	0x03B647AC BR X3
	0x03B647B0 STP X30, X23, [X31 - 0x30]!
	0x03B647B4 STP X22, X21, [X31 + 0x10]
	0x03B647B8 STP X20, X19, [X31 + 0x20]
	0x03B647BC ADRP X21, 0x87E000
	0x03B647C0 LDRB W8, [X21 + 0x9A8]
	0x03B647C4 MOV X19, X1
	0x03B647C8 MOV X20, X0
	0x03B647CC TBNZ X8, 0x0, 0x3B64808
	0x03B647D0 ADRP X0, 0x5F7000
	0x03B647D4 LDR X0, [X0 + 0x360]
	0x03B647D8 BL 0x1C16CF4
	0x03B647DC ADRP X0, 0x58F000
	0x03B647E0 LDR X0, [X0 + 0x598]
	0x03B647E4 BL 0x1C16CF4
	0x03B647E8 ADRP X0, 0x5F7000
	0x03B647EC LDR X0, [X0 + 0x258]
	0x03B647F0 BL 0x1C16CF4
	0x03B647F4 ADRP X0, 0x5F7000
	0x03B647F8 LDR X0, [X0 + 0x260]
	0x03B647FC BL 0x1C16CF4
	0x03B64800 MOVZ W8, 0x1
	0x03B64804 STRB W8, [X21 + 0x9A8]
	0x03B64808 CBZ X19, 0x3B64918
	0x03B6480C ADRP X8, 0x5F7000
	0x03B64810 LDR X8, [X8 + 0x258]
	0x03B64814 ADRP X23, 0x58F000
	0x03B64818 LDR X21, [X19 + 0x160]
	0x03B6481C LDR X0, [X8]
	0x03B64820 LDR W8, [X0 + 0xE0]
	0x03B64824 LDR X23, [X23 + 0x598]
	0x03B64828 CBNZ W8, 0x3B64830
	0x03B6482C BL 0x1C16DFC
	0x03B64830 LDR X0, [X23]
	0x03B64834 LDR X22, [X20 + 0x378]
	0x03B64838 LDR W8, [X0 + 0xE0]
	0x03B6483C CBNZ W8, 0x3B64844
	0x03B64840 BL 0x1C16DFC
	0x03B64844 MOV X0, X22
	0x03B64848 MOV X1, X21
	0x03B6484C MOV X2, X31
	0x03B64850 BL 0x3C354F8
	0x03B64854 TBZ X0, 0x0, 0x3B648E0
	0x03B64858 STR X21, [X20 + 0x378]
	0x03B6485C LDR X0, [X23]
	0x03B64860 LDR W8, [X0 + 0xE0]
	0x03B64864 CBNZ W8, 0x3B6486C
	0x03B64868 BL 0x1C16DFC
	0x03B6486C MOV X0, X21
	0x03B64870 MOV X1, X31
	0x03B64874 MOV X2, X31
	0x03B64878 BL 0x3C354F8
	0x03B6487C TBZ X0, 0x0, 0x3B648D4
	0x03B64880 MOV X0, X31
	0x03B64884 BL 0x3C3C6C4
	0x03B64888 LDR X0, [X20 + 0x378]
	0x03B6488C STR S0, [X20 + 0x380]
	0x03B64890 CBZ X0, 0x3B64918
	0x03B64894 ADRP X8, 0x5F7000
	0x03B64898 LDR X8, [X8 + 0x360]
	0x03B6489C LDR X1, [X8]
	0x03B648A0 BL 0x21E52E4
	0x03B648A4 LDR X8, [X23]
	0x03B648A8 MOV X21, X0
	0x03B648AC LDR W9, [X8 + 0xE0]
	0x03B648B0 CBNZ W9, 0x3B648BC
	0x03B648B4 MOV X0, X8
	0x03B648B8 BL 0x1C16DFC
	0x03B648BC MOV X0, X21
	0x03B648C0 MOV X1, X31
	0x03B648C4 MOV X2, X31
	0x03B648C8 BL 0x3C354F8
	0x03B648CC AND W8, W0, 0x1
	0x03B648D0 B 0x3B648D8
	0x03B648D4 MOV W8, W31
	0x03B648D8 STRB W8, [X20 + 0x385]
	0x03B648DC STRB W31, [X20 + 0x384]
	0x03B648E0 LDR X0, [X20 + 0x318]
	0x03B648E4 CBZ X0, 0x3B64908
	0x03B648E8 ADRP X8, 0x5F7000
	0x03B648EC LDR X8, [X8 + 0x260]
	0x03B648F0 MOV X1, X19
	0x03B648F4 LDP X20, X19, [X31 + 0x20]
	0x03B648F8 LDP X22, X21, [X31 + 0x10]
	0x03B648FC LDR X2, [X8]
	0x03B64900 LDP X30, X23, [X31], #0x30
	0x03B64904 B 0x2729DBC
	0x03B64908 LDP X20, X19, [X31 + 0x20]
	0x03B6490C LDP X22, X21, [X31 + 0x10]
	0x03B64910 LDP X30, X23, [X31], #0x30
	0x03B64914 RET
	0x03B64918 BL 0x1C16F20
	0x03B6491C STR X30, [X31 - 0x30]!
	0x03B64920 STP X22, X21, [X31 + 0x10]
	0x03B64924 STP X20, X19, [X31 + 0x20]
	0x03B64928 ADRP X21, 0x87E000
	0x03B6492C LDRB W8, [X21 + 0x9A9]
	0x03B64930 MOV X19, X1
	0x03B64934 MOV X20, X0
	0x03B64938 TBNZ X8, 0x0, 0x3B64968
	0x03B6493C ADRP X0, 0x58F000
	0x03B64940 LDR X0, [X0 + 0x598]
	0x03B64944 BL 0x1C16CF4
	0x03B64948 ADRP X0, 0x5F7000
	0x03B6494C LDR X0, [X0 + 0x258]
	0x03B64950 BL 0x1C16CF4
	0x03B64954 ADRP X0, 0x5F7000
	0x03B64958 LDR X0, [X0 + 0x260]
	0x03B6495C BL 0x1C16CF4
	0x03B64960 MOVZ W8, 0x1
	0x03B64964 STRB W8, [X21 + 0x9A9]
	0x03B64968 CBZ X19, 0x3B64A04
	0x03B6496C ADRP X8, 0x5F7000
	0x03B64970 LDR X8, [X8 + 0x258]
	0x03B64974 ADRP X22, 0x58F000
	0x03B64978 LDR X21, [X19 + 0x160]
	0x03B6497C LDR X0, [X8]
	0x03B64980 LDR W8, [X0 + 0xE0]
	0x03B64984 LDR X22, [X22 + 0x598]
	0x03B64988 CBNZ W8, 0x3B64990
	0x03B6498C BL 0x1C16DFC
	0x03B64990 LDR X0, [X22]
	0x03B64994 LDR X22, [X20 + 0x378]
	0x03B64998 LDR W8, [X0 + 0xE0]
	0x03B6499C CBNZ W8, 0x3B649A4
	0x03B649A0 BL 0x1C16DFC
	0x03B649A4 MOV X0, X22
	0x03B649A8 MOV X1, X21
	0x03B649AC MOV X2, X31
	0x03B649B0 BL 0x3C354F8
	0x03B649B4 TBZ X0, 0x0, 0x3B649CC
	0x03B649B8 MOV X0, X31
	0x03B649BC STR X31, [X20 + 0x378]
	0x03B649C0 BL 0x3C3C6C4
	0x03B649C4 STR S0, [X20 + 0x380]
	0x03B649C8 STRH W31, [X20 + 0x384]
	0x03B649CC LDR X0, [X20 + 0x320]
	0x03B649D0 CBZ X0, 0x3B649F4
	0x03B649D4 ADRP X8, 0x5F7000
	0x03B649D8 LDR X8, [X8 + 0x260]
	0x03B649DC MOV X1, X19
	0x03B649E0 LDP X20, X19, [X31 + 0x20]
	0x03B649E4 LDP X22, X21, [X31 + 0x10]
	0x03B649E8 LDR X2, [X8]
	0x03B649EC LDR X30, [X31], #0x30
	0x03B649F0 B 0x2729DBC
	0x03B649F4 LDP X20, X19, [X31 + 0x20]
	0x03B649F8 LDP X22, X21, [X31 + 0x10]
	0x03B649FC LDR X30, [X31], #0x30
	0x03B64A00 RET
	0x03B64A04 BL 0x1C16F20
	0x03B64A08 LDR V0, [X0 + 0x2B0]
	0x03B64A0C RET
	0x03B64A10 STR S0, [X0 + 0x2B0]
	0x03B64A14 RET
	0x03B64A18 LDR V0, [X0 + 0x2B4]
	0x03B64A1C RET
	0x03B64A20 STR S0, [X0 + 0x2B4]
	0x03B64A24 RET
	0x03B64A28 LDR V0, [X0 + 0x2BC]
	0x03B64A2C RET
	0x03B64A30 STR S0, [X0 + 0x2BC]
	0x03B64A34 RET
	0x03B64A38 B 0x3B5F130
	0x03B64A3C LDR X0, [X0 + 0x2A0]
	0x03B64A40 RET
	0x03B64A44 B 0x3B5ED68
	0x03B64A48 B 0x3B61448
	0x03B64A4C B 0x3B56838
	0x03B64A50 STR X30, [X31 - 0x10]!
	0x03B64A54 ADD X2, X31, 0xC
	0x03B64A58 STR W31, [X31 + 0xC]
	0x03B64A5C BL 0x3B61AF0
	0x03B64A60 AND W0, W0, 0x1
	0x03B64A64 LDR X30, [X31], #0x10
	0x03B64A68 RET
	0x03B64A6C LDR X8, [X0]
	0x03B64A70 LDR X3, [X8 + 0x538]
	0x03B64A74 LDR X2, [X8 + 0x540]
	0x03B64A78 BR X3
	0x03B64A7C LDR X8, [X0]
	0x03B64A80 LDR X3, [X8 + 0x548]
	0x03B64A84 LDR X2, [X8 + 0x550]
	0x03B64A88 BR X3
	0x03B64A8C STR X30, [X31 - 0x50]!
	0x03B64A90 STP X26, X25, [X31 + 0x10]
	0x03B64A94 STP X24, X23, [X31 + 0x20]
	0x03B64A98 STP X22, X21, [X31 + 0x30]
	0x03B64A9C STP X20, X19, [X31 + 0x40]
	0x03B64AA0 ADRP X25, 0x87E000
	0x03B64AA4 ADRP X26, 0x5F6000
	0x03B64AA8 ADRP X19, 0x5F6000
	0x03B64AAC ADRP X20, 0x5F6000
	0x03B64AB0 ADRP X24, 0x595000
	0x03B64AB4 ADRP X23, 0x5F6000
	0x03B64AB8 ADRP X22, 0x5F6000
	0x03B64ABC ADRP X21, 0x5F3000
	0x03B64AC0 LDR X26, [X26 + 0xE40]
	0x03B64AC4 LDR X19, [X19 + 0xE48]
	0x03B64AC8 LDRB W8, [X25 + 0x9AB]
	0x03B64ACC LDR X20, [X20 + 0x7C0]
	0x03B64AD0 LDR X24, [X24 + 0x488]
	0x03B64AD4 LDR X23, [X23 + 0x830]
	0x03B64AD8 LDR X22, [X22 + 0x828]
	0x03B64ADC LDR X21, [X21 + 0x30]
	0x03B64AE0 TBNZ X8, 0x0, 0x3B64B40
	0x03B64AE4 ADRP X0, 0x5F6000
	0x03B64AE8 LDR X0, [X0 + 0x828]
	0x03B64AEC BL 0x1C16CF4
	0x03B64AF0 ADRP X0, 0x5F6000
	0x03B64AF4 LDR X0, [X0 + 0x830]
	0x03B64AF8 BL 0x1C16CF4
	0x03B64AFC ADRP X0, 0x5F6000
	0x03B64B00 LDR X0, [X0 + 0xE48]
	0x03B64B04 BL 0x1C16CF4
	0x03B64B08 ADRP X0, 0x5F6000
	0x03B64B0C LDR X0, [X0 + 0xE40]
	0x03B64B10 BL 0x1C16CF4
	0x03B64B14 ADRP X0, 0x595000
	0x03B64B18 LDR X0, [X0 + 0x488]
	0x03B64B1C BL 0x1C16CF4
	0x03B64B20 ADRP X0, 0x5F6000
	0x03B64B24 LDR X0, [X0 + 0x7C0]
	0x03B64B28 BL 0x1C16CF4
	0x03B64B2C ADRP X0, 0x5F3000
	0x03B64B30 LDR X0, [X0 + 0x30]
	0x03B64B34 BL 0x1C16CF4
	0x03B64B38 MOVZ W8, 0x1
	0x03B64B3C STRB W8, [X25 + 0x9AB]
	0x03B64B40 LDR X0, [X26]
	0x03B64B44 BL 0x1C16F10
	0x03B64B48 LDR X1, [X19]
	0x03B64B4C MOV X19, X0
	0x03B64B50 BL 0x301B7C4
	0x03B64B54 LDR X8, [X20]
	0x03B64B58 MOVZ W1, 0xA
	0x03B64B5C LDR X8, [X8 + 0xB8]
	0x03B64B60 STR X19, [X8]
	0x03B64B64 LDR X0, [X24]
	0x03B64B68 BL 0x1C16D6C
	0x03B64B6C LDR X8, [X20]
	0x03B64B70 LDR X8, [X8 + 0xB8]
	0x03B64B74 STR X0, [X8 + 0x8]
	0x03B64B78 LDR X0, [X23]
	0x03B64B7C BL 0x1C16F10
	0x03B64B80 LDR X1, [X22]
	0x03B64B84 MOV X19, X0
	0x03B64B88 BL 0x2DBDE08
	0x03B64B8C LDR X8, [X20]
	0x03B64B90 MOVZ W1, 0x3
	0x03B64B94 LDR X8, [X8 + 0xB8]
	0x03B64B98 STR X19, [X8 + 0x10]
	0x03B64B9C LDR X0, [X21]
	0x03B64BA0 BL 0x1C16D6C
	0x03B64BA4 LDR X8, [X20]
	0x03B64BA8 LDP X20, X19, [X31 + 0x40]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X30
	011 Move [X31+128], X26
	012 Move [X31+136], X25
	013 Move [X31+144], X24
	014 Move [X31+152], X23
	015 Move [X31+160], X22
	016 Move [X31+168], X21
	017 Move [X31+176], X20
	018 Move [X31+184], X19
	019 Move X8, [X31+192]
	020 Move X20, 0x87F000
	021 Move V10, V0
	022 Move V0, [X31+200]
	023 Move [X31+16], X8
	024 Move W8, [X20+2467]
	025 Move V11, V5
	026 Move V12, V4
	027 Move V13, V3
	028 Move V8, V2
	029 Move V9, V1
	030 Move X19, X0
	031 Move [X31+32], S10
	032 Move [X31+40], S1
	033 Move [X31+40], S2
	034 Move [X31+24], S0
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {65}
	039 Move X0, 0x5F8000
	040 Move X0, [X0+808]
	041 Call 0x1C17CF4
	042 Move X0, 0x590000
	043 Move X0, [X0+1528]
	044 Call 0x1C17CF4
	045 Move X0, 0x5F8000
	046 Move X0, [X0+816]
	047 Call 0x1C17CF4
	048 Move X0, 0x5B9000
	049 Move X0, [X0+1272]
	050 Call 0x1C17CF4
	051 Move X0, 0x5F8000
	052 Move X0, [X0+824]
	053 Call 0x1C17CF4
	054 Move X0, 0x5F8000
	055 Move X0, [X0+832]
	056 Call 0x1C17CF4
	057 Move X0, 0x5F8000
	058 Move X0, [X0+840]
	059 Call 0x1C17CF4
	060 Move X0, 0x5F7000
	061 Move X0, [X0+1984]
	062 Call 0x1C17CF4
	063 Move W8, 1
	064 Move [X20+2467], W8
	065 Move [X31+8], W31
	066 Move [X31], X31
	067 Move X0, [X19+904]
	068 Move W2, 10
	069 Move W1, W31
	070 Move X3, X31
	071 Call Array.Clear, X0, X1, X2
	072 Move [X19+912], W31
	073 Move X20, 0x875000
	074 Move W8, [X20+1925]
	075 Compare W8, 0
	076 JumpIfNotEqual {82}
	077 Move X0, 0x590000
	078 Move X0, [X0+1448]
	079 Call 0x1C17CF4
	080 Move W8, 1
	081 Move [X20+1925], W8
	082 Move X20, 0x590000
	083 Move X20, [X20+1448]
	084 Subtract S15, S13, S10
	085 Subtract S13, S12, S9
	086 Subtract S14, S11, S8
	087 Move X0, [X20]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Multiply S0, S15, S15
	093 Multiply S1, S13, S13
	094 Move X8, -50827264
	095 Add S0, S0, S1
	096 Move V1, [X8+380]
	097 Multiply S2, S14, S14
	098 Add S0, S2, S0
	099 NotImplemented "Instruction FSQRT not yet implemented."
	100 NotImplemented "Instruction FCMP not yet implemented."
	101 NotImplemented "Instruction FDIV not yet implemented."
	102 NotImplemented "Instruction FDIV not yet implemented."
	103 NotImplemented "Instruction FDIV not yet implemented."
	104 Move X21, 0x875000
	105 Move W8, [X21+1923]
	106 Compare W8, 0
	107 JumpIfNotEqual {113}
	108 Move X0, 0x590000
	109 Move X0, [X0+1440]
	110 Call 0x1C17CF4
	111 Move W8, 1
	112 Move [X21+1923], W8
	113 Move X8, 0x590000
	114 Move X8, [X8+1440]
	115 Move X8, [X8]
	116 Move X8, [X8+184]
	117 Move S12, [X8]
	118 Move S13, [X8+4]
	119 Move V14, [X8+8]
	120 Move X21, 0x875000
	121 Move W8, [X21+2140]
	122 Move [X31], S12
	123 Move [X31+8], S13
	124 Move [X31+8], S14
	125 Compare W8, 0
	126 JumpIfNotEqual {132}
	127 Move X0, 0x590000
	128 Move X0, [X0+1448]
	129 Call 0x1C17CF4
	130 Move W8, 1
	131 Move [X21+2140], W8
	132 Move X0, [X20]
	133 Move W8, [X0+224]
	134 Compare W8, 0
	135 JumpIfNotEqual {137}
	136 Call 0x1C17DFC
	137 Move W8, [X19+744]
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move W20, 2
	140 Move W20, [X19+740]
	141 Move W8, [X19+724]
	142 NotImplemented "Instruction CMP not yet implemented."
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Compare W8, 0
	145 JumpIfNotEqual {167}
	146 Move W0, [X19+736]
	147 Move X21, [X19+904]
	148 Move X1, X31
	149 Add X22, X19, 968
	150 Call LayerMask.op_Implicit, X0
	151 Move W2, W0
	152 Move X0, X22
	153 Move V0, V10
	154 Move V1, V9
	155 Move V2, V8
	156 Move V3, V12
	157 Move V4, V13
	158 Move V5, V14
	159 Move X1, X21
	160 Move V6, V11
	161 Move W3, W20
	162 Move X4, X31
	163 Call PhysicsScene.Raycast, X0, X1, X2, X3, V0, X4, X5
	164 Move W8, [X19+656]
	165 Compare W8, 0
	166 JumpIfEqual {188}
	167 Move W0, [X19+912]
	168 Move W0, [X19+736]
	169 Move V15, [X19+728]
	170 Move X21, [X19+904]
	171 Move X1, X31
	172 Add X22, X19, 968
	173 Call LayerMask.op_Implicit, X0
	174 Move W2, W0
	175 Move X0, X22
	176 Move V0, V10
	177 Move V1, V9
	178 Move V2, V8
	179 Move V3, V15
	180 Move V4, V12
	181 Move V5, V13
	182 Move V6, V14
	183 Move X1, X21
	184 Move V7, V11
	185 Move W3, W20
	186 Move X4, X31
	187 Call PhysicsScene.SphereCast, X0, X1, V0, X2, X3, V1, X4, X5
	188 Move W0, [X19+736]
	189 Move V8, [X19+732]
	190 Move X21, [X19+904]
	191 Move X1, X31
	192 Call LayerMask.op_Implicit, X0
	193 Move W5, W0
	194 Add X1, X31, 32
	195 Add X2, X31, 0
	196 Add X3, X31, 16
	197 Move X0, X19
	198 Move V0, V8
	199 Move X4, X21
	200 Move V1, V11
	201 Move W6, W20
	202 Call XRRayInteractor.FilteredConecast, X0, X1, V0, X2, X3, X4, V1, X5, X6
	203 Move [X19+912], W0
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move X25, 0x5B9000
	206 Move W8, [X19+740]
	207 Move X25, [X25+1272]
	208 Compare W8, 0
	209 JumpIfEqual {212}
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move W0, 1
	212 Move X8, 0x590000
	213 Move X8, [X8+1528]
	214 Move X0, [X8]
	215 Move W8, [X0+224]
	216 Compare W8, 0
	217 JumpIfNotEqual {219}
	218 Call 0x1C17DFC
	219 Move X0, X31
	220 Call Physics.get_queriesHitTriggers
	221 Move W8, [X19+744]
	222 Move TEMP, X0
	223 And TEMP, TEMP, 1
	224 Compare TEMP, 1
	225 JumpIfNotEqual {266}
	226 Compare W8, 0
	227 JumpIfNotEqual {266}
	228 Move X26, 0x5F8000
	229 Move X26, [X26+840]
	230 Move X21, [X19+48]
	231 Move X20, [X19+904]
	232 Move W22, [X19+912]
	233 Move X0, [X26]
	234 Move W8, [X0+224]
	235 Compare W8, 0
	236 JumpIfNotEqual {239}
	237 Call 0x1C17DFC
	238 Move X0, [X26]
	239 Move X8, [X0+184]
	240 Move X23, [X8+8]
	241 Compare X23, 0
	242 JumpIfNotEqual {307}
	243 Move W8, [X0+224]
	244 Compare W8, 0
	245 JumpIfNotEqual {248}
	246 Call 0x1C17DFC
	247 Move X0, [X26]
	248 Move X9, 0x5F8000
	249 Move X8, [X0+184]
	250 Move X9, [X9+808]
	251 Move X24, [X8]
	252 Move X0, [X9]
	253 Call 0x1C17F10
	254 Move X8, 0x5F8000
	255 Move X8, [X8+824]
	256 Move X1, X24
	257 Move X3, X31
	258 Move X23, X0
	259 Move X2, [X8]
	260 Call Func`2<Object, Boolean>..ctor, X0, X1, X2
	261 Move X8, [X26]
	262 Move X8, [X8+184]
	263 Move [X8+8], X23
	264 Move W8, [X19+744]
	265 Move W0, W31
	266 NotImplemented "Instruction CMP not yet implemented."
	267 Move TEMP, X0
	268 And TEMP, TEMP, 1
	269 Compare TEMP, 1
	270 JumpIfEqual {321}
	271 Move X26, 0x5F8000
	272 Move X26, [X26+840]
	273 Move X21, [X19+48]
	274 Move X20, [X19+904]
	275 Move W22, [X19+912]
	276 Move X0, [X26]
	277 Move W8, [X0+224]
	278 Compare W8, 0
	279 JumpIfNotEqual {282}
	280 Call 0x1C17DFC
	281 Move X0, [X26]
	282 Move X8, [X0+184]
	283 Move X23, [X8+16]
	284 Compare X23, 0
	285 JumpIfNotEqual {307}
	286 Move W8, [X0+224]
	287 Compare W8, 0
	288 JumpIfNotEqual {291}
	289 Call 0x1C17DFC
	290 Move X0, [X26]
	291 Move X9, 0x5F8000
	292 Move X8, [X0+184]
	293 Move X9, [X9+808]
	294 Move X24, [X8]
	295 Move X0, [X9]
	296 Call 0x1C17F10
	297 Move X8, 0x5F8000
	298 Move X8, [X8+832]
	299 Move X1, X24
	300 Move X3, X31
	301 Move X23, X0
	302 Move X2, [X8]
	303 Call Func`2<Object, Boolean>..ctor, X0, X1, X2
	304 Move X8, [X26]
	305 Move X8, [X8+184]
	306 Move [X8+16], X23
	307 Move X8, 0x5F7000
	308 Move X8, [X8+1984]
	309 Move X0, [X8]
	310 Move W8, [X0+224]
	311 Compare W8, 0
	312 JumpIfNotEqual {314}
	313 Call 0x1C17DFC
	314 Move X0, X21
	315 Move X1, X20
	316 Move W2, W22
	317 Move X3, X23
	318 Call XRRayInteractor.FilterTriggerColliders, X0, X1, X2, X3
	319 Move W20, W0
	320 Move [X19+912], W0
	321 Move W20, [X19+912]
	322 Move X0, [X25]
	323 Move X22, 0x5F8000
	324 Move X21, [X19+904]
	325 Move X19, [X19+920]
	326 Move W8, [X0+224]
	327 Move X22, [X22+816]
	328 Compare W8, 0
	329 JumpIfNotEqual {331}
	330 Call 0x1C17DFC
	331 Move X3, [X22]
	332 Move X0, X21
	333 Move X1, X19
	334 Move W2, W20
	335 Call 0x22571D0, X0, X1, X2
	336 Move X20, [X31+176]
	337 Move X19, [X31+184]
	338 Move X22, [X31+160]
	339 Move X21, [X31+168]
	340 Move X24, [X31+144]
	341 Move X23, [X31+152]
	342 Move X26, [X31+128]
	343 Move X25, [X31+136]
	344 Move X30, [X31+112]
	345 Move D9, [X31+96]
	346 Move D8, [X31+104]
	347 Move D11, [X31+80]
	348 Move D10, [X31+88]
	349 Move D13, [X31+64]
	350 Move D12, [X31+72]
	351 Move D15, [X31+48]
	352 Move D14, [X31+56]
	353 Add X31, X31, 192
	354 Return 

Method: System.Int32 FilteredConecast(in UnityEngine.Vector3 from, System.Single coneCastAngleDegrees, in UnityEngine.Vector3 direction, in UnityEngine.Vector3 origin, UnityEngine.RaycastHit[] results, System.Single maxDistance = ∞, System.Int32 layerMask = -5, UnityEngine.QueryTriggerInteraction queryTriggerInteraction = 0)

Disassembly:
	0x03B64BAC LDP X22, X21, [X31 + 0x30]
	0x03B64BB0 LDP X24, X23, [X31 + 0x20]
	0x03B64BB4 LDR X8, [X8 + 0xB8]
	0x03B64BB8 LDP X26, X25, [X31 + 0x10]
	0x03B64BBC STR X0, [X8 + 0x20]
	0x03B64BC0 LDR X30, [X31], #0x50
	0x03B64BC4 RET
	0x03B64BC8 SUB X31, X31, 0x80
	0x03B64BCC STR D8, [X31 + 0x40]
	0x03B64BD0 STR X30, [X31 + 0x48]
	0x03B64BD4 STP X24, X23, [X31 + 0x50]
	0x03B64BD8 STP X22, X21, [X31 + 0x60]
	0x03B64BDC STP X20, X19, [X31 + 0x70]
	0x03B64BE0 ADRP X24, 0x87E000
	0x03B64BE4 LDRB W8, [X24 + 0x9AC]
	0x03B64BE8 MOV X23, X4
	0x03B64BEC MOV X20, X3
	0x03B64BF0 MOV X21, X2
	0x03B64BF4 MOV X22, X1
	0x03B64BF8 MOV V8.16B, V0.16B
	0x03B64BFC MOV W19, W0
	0x03B64C00 CBNZ W8, 0x3B64C18
	0x03B64C04 ADRP X0, 0x5F6000
	0x03B64C08 LDR X0, [X0 + 0x9E8]
	0x03B64C0C BL 0x1C16CF4
	0x03B64C10 MOVZ W8, 0x1
	0x03B64C14 STRB W8, [X24 + 0x9AC]
	0x03B64C18 ADRP X8, 0x5F6000
	0x03B64C1C LDR X8, [X8 + 0x9E8]
	0x03B64C20 MOV X0, X23
	0x03B64C24 LDR X1, [X8]
	0x03B64C28 BL 0x2133578
	0x03B64C2C STP X0, X1, [X31 + 0x30]
	0x03B64C30 LDP S0, S1, [X22]
	0x03B64C34 LDR V2, [X22 + 0x8]
	0x03B64C38 MOV X0, X31
	0x03B64C3C BL 0x3887BE4
	0x03B64C40 STP S0, S1, [X31 + 0x20]
	0x03B64C44 STR S2, [X31 + 0x28]
	0x03B64C48 LDP S0, S1, [X21]
	0x03B64C4C LDR V2, [X21 + 0x8]
	0x03B64C50 MOV X0, X31
	0x03B64C54 BL 0x3887BE4
	0x03B64C58 STP S0, S1, [X31 + 0x10]
	0x03B64C5C STR S2, [X31 + 0x18]
	0x03B64C60 LDP S0, S1, [X20]
	0x03B64C64 LDR V2, [X20 + 0x8]
	0x03B64C68 MOV X0, X31
	0x03B64C6C BL 0x3887BE4
	0x03B64C70 STP S0, S1, [X31]
	0x03B64C74 ADD X1, X31, 0x20
	0x03B64C78 ADD X2, X31, 0x10
	0x03B64C7C ADD X3, X31, 0x0
	0x03B64C80 ADD X4, X31, 0x30
	0x03B64C84 MOV W0, W19
	0x03B64C88 MOV V0.16B, V8.16B
	0x03B64C8C MOV X5, X31
	0x03B64C90 STR S2, [X31 + 0x8]
	0x03B64C94 BL 0x3B93D50
	0x03B64C98 LDP X20, X19, [X31 + 0x70]
	0x03B64C9C LDP X22, X21, [X31 + 0x60]
	0x03B64CA0 LDP X24, X23, [X31 + 0x50]
	0x03B64CA4 LDR X30, [X31 + 0x48]
	0x03B64CA8 LDR V8, [X31 + 0x40]
	0x03B64CAC ADD X31, X31, 0x80
	0x03B64CB0 RET
	0x03B64CB4 SUB X31, X31, 0xC0
	0x03B64CB8 STP D9, D8, [X31 + 0x50]
	0x03B64CBC STP X29, X30, [X31 + 0x60]
	0x03B64CC0 STP X28, X27, [X31 + 0x70]
	0x03B64CC4 STP X26, X25, [X31 + 0x80]
	0x03B64CC8 STP X24, X23, [X31 + 0x90]
	0x03B64CCC STP X22, X21, [X31 + 0xA0]
	0x03B64CD0 STP X20, X19, [X31 + 0xB0]
	0x03B64CD4 CMP W1, 0x1
	0x03B64CD8 STR D1, [X31 + 0x10]
	0x03B64CDC STP X31, X31, [X31 + 0x40]
	0x03B64CE0 STR W31, [X31 + 0x38]
	0x03B64CE4 STR X31, [X31 + 0x30]
	0x03B64CE8 STR W31, [X31 + 0x28]
	0x03B64CEC STR X31, [X31 + 0x20]
	0x03B64CF0 B.LT 0x3B64E7C
	0x03B64CF4 LDR W8, [X6 + 0x8]
	0x03B64CF8 MOV X20, X6
	0x03B64CFC CMP W8, W0
	0x03B64D00 B.LE 0x3B64E7C
	0x03B64D04 MOV V8.16B, V0.16B
	0x03B64D08 LDR V0, [X31 + 0x1]
	0x03B64D0C SXTW X26, W8
	0x03B64D10 SBFM X8, X0, 0x3F, 0x1F
	0x03B64D14 ADD X8, X8, W0, SXTW
	0x03B64D18 MOV X21, X5
	0x03B64D1C MOV X22, X4
	0x03B64D20 MOV W23, W2
	0x03B64D24 MOV X24, X31
	0x03B64D28 EOR W27, W3, 0x1
	0x03B64D2C SXTW X25, W0
	0x03B64D30 MOV W28, W1
	0x03B64D34 UNIMPLEMENTED
	0x03B64D38 UBFM X19, X8, 0x3E, 0x3D
	0x03B64D3C MOVZ W29, 0x1
	0x03B64D40 STR X0, [X31 + 0x8]
	0x03B64D44 LDR X8, [X22]
	0x03B64D48 ADD X8, X8, X24
	0x03B64D4C LDR W9, [X8 + 0x8]
	0x03B64D50 LDR X10, [X8]
	0x03B64D54 ADD X8, X25, X29
	0x03B64D58 SUB X8, X8, 0x1
	0x03B64D5C STR W9, [X31 + 0x48]
	0x03B64D60 STR X10, [X31 + 0x40]
	0x03B64D64 TBZ X23, 0x0, 0x3B64DA0
	0x03B64D68 LDR X9, [X21]
	0x03B64D6C LDR V0, [X31 + 0x40]
	0x03B64D70 LDR V1, [X31 + 0x48]
	0x03B64D74 LDR V4, [X31 + 0x1]
	0x03B64D78 ADD X9, X9, X24
	0x03B64D7C LDR V2, [X9]
	0x03B64D80 LDR V3, [X9 + 0x8]
	0x03B64D84 FSUB V0.2S, V0.2S, V2.2S
	0x03B64D88 FSUB S1, S1, S3
	0x00000000 INVALID
	0x03B64D90 FMUL S4, S1, S4
	0x03B64D94 FADD V1.2S, V2.2S, V0.2S
	0x03B64D98 FADD S0, S3, S4
	0x03B64D9C B 0x3B64DA8
	0x03B64DA0 LDR V1, [X31 + 0x40]
	0x03B64DA4 LDR V0, [X31 + 0x48]
	0x03B64DA8 CMP X8, 0x1
	0x03B64DAC CSET W8, LT
	0x03B64DB0 CMP W26, 0x1
	0x03B64DB4 STR D1, [X31 + 0x30]
	0x03B64DB8 STR S0, [X31 + 0x38]
	0x03B64DBC B.LT 0x3B64E04
	0x03B64DC0 ORR W8, W8, W27, 0x0
	0x03B64DC4 TBNZ X8, 0x0, 0x3B64E04
	0x03B64DC8 LDR X8, [X20]
	0x03B64DCC AND W0, W23, 0x1
	0x03B64DD0 ADD X1, X31, 0x40
	0x03B64DD4 ADD X2, X31, 0x20
	0x03B64DD8 ADD X8, X8, X19
	0x03B64DDC ADD X8, X8, X24
	0x03B64DE0 LDUR W9, [X8 - 0x4]
	0x03B64DE4 LDUR X8, [X8 - 0xC]
	0x03B64DE8 ADD X3, X31, 0x30
	0x03B64DEC ADD X4, X31, 0x4C
	0x03B64DF0 MOV V0.16B, V8.16B
	0x03B64DF4 STR W9, [X31 + 0x28]
	0x03B64DF8 STR X8, [X31 + 0x20]
	0x03B64DFC BL 0x3B4B964
	0x03B64E00 TBNZ X0, 0x0, 0x3B64E50
	0x03B64E04 LDR X8, [X20]
	0x03B64E08 LDR X9, [X31 + 0x30]
	0x03B64E0C LDR W10, [X31 + 0x38]
	0x03B64E10 CMP X29, X28
	0x03B64E14 ADD X8, X8, X19
	0x03B64E18 ADD X8, X8, X24
	0x03B64E1C STR W10, [X8 + 0x8]
	0x03B64E20 STR X9, [X8]
	0x03B64E24 ADD X8, X29, 0x1
	0x03B64E28 B.CS 0x3B64E40
	0x03B64E2C ADD X9, X25, X29
	0x03B64E30 CMP X9, X26
	0x03B64E34 ADD X24, X24, 0xC
	0x03B64E38 MOV X29, X8
	0x03B64E3C B.LT 0x3B64D44
	0x03B64E40 LDR X9, [X31 + 0x8]
	0x03B64E44 ADD W8, W9, W8
	0x03B64E48 SUB W0, W8, 0x1
	0x03B64E4C B 0x3B64E7C
	0x03B64E50 LDR X8, [X20]
	0x03B64E54 LDR W11, [X31 + 0x38]
	0x03B64E58 LDR X12, [X31 + 0x30]
	0x03B64E5C LDR X0, [X31 + 0x8]
	0x03B64E60 ADD W9, W25, W29
	0x03B64E64 MOVZ W10, 0xC
	0x03B64E68 SUB W9, W9, 0x1
	0x03B64E6C UMADDL X8, X9, X10, X8
	0x03B64E70 STR W11, [X8 + 0x8]
	0x03B64E74 STR X12, [X8]
	0x03B64E78 ADD W0, W0, W29
	0x03B64E7C LDP X20, X19, [X31 + 0xB0]
	0x03B64E80 LDP X22, X21, [X31 + 0xA0]
	0x03B64E84 LDP X24, X23, [X31 + 0x90]
	0x03B64E88 LDP X26, X25, [X31 + 0x80]
	0x03B64E8C LDP X28, X27, [X31 + 0x70]
	0x03B64E90 LDP X29, X30, [X31 + 0x60]
	0x03B64E94 LDP D9, D8, [X31 + 0x50]
	0x03B64E98 ADD X31, X31, 0xC0
	0x03B64E9C RET
	0x03B64EA0 SUB X31, X31, 0x90
	0x03B64EA4 STP D15, D14, [X31 + 0x10]
	0x03B64EA8 STP D13, D12, [X31 + 0x20]
	0x03B64EAC STP D11, D10, [X31 + 0x30]
	0x03B64EB0 STP D9, D8, [X31 + 0x40]
	0x03B64EB4 STP X30, X25, [X31 + 0x50]
	0x03B64EB8 STP X24, X23, [X31 + 0x60]
	0x03B64EBC STP X22, X21, [X31 + 0x70]
	0x03B64EC0 STP X20, X19, [X31 + 0x80]
	0x03B64EC4 ADRP X24, 0x87D000
	0x03B64EC8 LDR V9, [X3]
	0x03B64ECC LDR V11, [X3 + 0x8]
	0x03B64ED0 LDR V10, [X2]
	0x03B64ED4 LDRB W8, [X24 + 0x585]
	0x03B64ED8 LDR V12, [X2 + 0x8]
	0x03B64EDC MOV X21, X4
	0x03B64EE0 MOV X19, X3
	0x03B64EE4 MOV X20, X2
	0x03B64EE8 MOV X22, X1
	0x03B64EEC MOV W23, W0
	0x03B64EF0 MOV V8.16B, V0.16B
	0x03B64EF4 CBNZ W8, 0x3B64F0C
	0x03B64EF8 ADRP X0, 0x58F000
	0x03B64EFC LDR X0, [X0 + 0x5A8]
	0x03B64F00 BL 0x1C16CF4
	0x03B64F04 MOVZ W8, 0x1
	0x03B64F08 STRB W8, [X24 + 0x585]
	0x03B64F0C ADRP X25, 0x58F000
	0x03B64F10 LDR X25, [X25 + 0x5A8]
	0x03B64F14 FSUB V10.2S, V9.2S, V10.2S
	0x03B64F18 FSUB S9, S11, S12
	0x03B64F1C LDR X0, [X25]
	0x03B64F20 LDR W8, [X0 + 0xE0]
	0x03B64F24 CBNZ W8, 0x3B64F2C
	0x03B64F28 BL 0x1C16DFC
	0x00000000 INVALID
	0x03B64F30 FMUL S0, S9, S9
	0x03B64F34 FADDP S1, V1.2S
	0x03B64F38 FADD S0, S0, S1
	0x03B64F3C FSQRT S11, S0
	0x03B64F40 TBZ X23, 0x0, 0x3B65018
	0x03B64F44 LDR V12, [X20]
	0x03B64F48 LDUR V13, [X20 + 0x4]
	0x03B64F4C LDR V14, [X22]
	0x03B64F50 LDRB W8, [X24 + 0x585]
	0x03B64F54 LDUR V15, [X22 + 0x4]
	0x03B64F58 CBNZ W8, 0x3B64F70
	0x03B64F5C ADRP X0, 0x58F000
	0x03B64F60 LDR X0, [X0 + 0x5A8]
	0x03B64F64 BL 0x1C16CF4
	0x03B64F68 MOVZ W8, 0x1
	0x03B64F6C STRB W8, [X24 + 0x585]
	0x03B64F70 LDR X0, [X25]
	0x03B64F74 FSUB S14, S14, S12
	0x03B64F78 FSUB V12.2S, V15.2S, V13.2S
	0x03B64F7C LDR W8, [X0 + 0xE0]
	0x03B64F80 CBNZ W8, 0x3B64F88
	0x03B64F84 BL 0x1C16DFC
	0x03B64F88 FMUL S0, S14, S14
	0x00000000 INVALID
	0x03B64F90 FADD S0, S0, S1
	0x03B64F94 MOV S1, V1.S[1]
	0x03B64F98 FADD S0, S1, S0
	0x03B64F9C FSQRT S6, S0
	0x03B64FA0 FCMP S6, S11
	0x03B64FA4 B.PL 0x3B65018
	0x03B64FA8 LDR V12, [X20]
	0x03B64FAC LDRB W8, [X24 + 0x585]
	0x03B64FB0 LDR V13, [X20 + 0x8]
	0x03B64FB4 CBNZ W8, 0x3B64FD4
	0x03B64FB8 ADRP X0, 0x58F000
	0x03B64FBC LDR X0, [X0 + 0x5A8]
	0x03B64FC0 STR V6, [X31]
	0x03B64FC4 BL 0x1C16CF4
	0x03B64FC8 LDR V6, [X31]
	0x03B64FCC MOVZ W8, 0x1
	0x03B64FD0 STRB W8, [X24 + 0x585]
	0x03B64FD4 LDR X0, [X25]
	0x03B64FD8 LDR W8, [X0 + 0xE0]
	0x03B64FDC CBNZ W8, 0x3B64FEC
	0x03B64FE0 STR V6, [X31]
	0x03B64FE4 BL 0x1C16DFC
	0x03B64FE8 LDR V6, [X31]
	0x03B64FEC FMOV S0, 1
	0x03B64FF0 FDIV S0, S0, S11
	0x00000000 INVALID
	0x03B64FF8 FMUL S0, S9, S0
	0x00000000 INVALID
	0x03B65000 FMUL S0, S0, S6
	0x03B65004 FADD V1.2S, V1.2S, V12.2S
	0x03B65008 FADD S0, S0, S13
	0x03B6500C STR D1, [X19]
	0x03B65010 STR S0, [X19 + 0x8]
	0x03B65014 B 0x3B6501C
	0x03B65018 MOV V6.16B, V11.16B
	0x03B6501C LDR V0, [X21]
	0x03B65020 FADD S0, S6, S0
	0x03B65024 FCMP S0, S8
	0x03B65028 STR S0, [X21]
	0x03B6502C B.LS 0x3B65070
	0x03B65030 LDR V2, [X20]
	0x03B65034 LDR V3, [X20 + 0x8]
	0x03B65038 LDR V4, [X19]
	0x03B6503C LDR V5, [X19 + 0x8]
	0x03B65040 FSUB S1, S0, S8
	0x03B65044 FDIV S1, S1, S6
	0x03B65048 FMOV S6, 1
	0x03B6504C FSUB S1, S6, S1
	0x03B65050 FSUB V4.2S, V4.2S, V2.2S
	0x03B65054 FSUB S5, S5, S3
	0x00000000 INVALID
	0x03B6505C FMUL S1, S1, S5
	0x03B65060 FADD V2.2S, V2.2S, V4.2S
	0x03B65064 FADD S1, S3, S1
	0x03B65068 STR D2, [X19]
	0x03B6506C STR S1, [X19 + 0x8]
	0x03B65070 FCMP S0, S8
	0x03B65074 LDP X20, X19, [X31 + 0x80]
	0x03B65078 LDP X22, X21, [X31 + 0x70]
	0x03B6507C LDP X24, X23, [X31 + 0x60]
	0x03B65080 LDP X30, X25, [X31 + 0x50]
	0x03B65084 LDP D9, D8, [X31 + 0x40]
	0x03B65088 LDP D11, D10, [X31 + 0x30]
	0x03B6508C LDP D13, D12, [X31 + 0x20]
	0x03B65090 LDP D15, D14, [X31 + 0x10]
	0x03B65094 CSET W0, HI
	0x03B65098 ADD X31, X31, 0x90
	0x03B6509C RET
	0x03B650A0 STR X30, [X31 - 0x30]!
	0x03B650A4 STP X22, X21, [X31 + 0x10]
	0x03B650A8 STP X20, X19, [X31 + 0x20]
	0x03B650AC ADRP X21, 0x87D000
	0x03B650B0 ADRP X22, 0x58E000
	0x03B650B4 LDRB W8, [X21 + 0x9AE]
	0x03B650B8 LDR X22, [X22 + 0x598]
	0x03B650BC MOV X19, X2
	0x03B650C0 MOV X20, X1
	0x03B650C4 TBNZ X8, 0x0, 0x3B650DC
	0x03B650C8 ADRP X0, 0x58E000
	0x03B650CC LDR X0, [X0 + 0x598]
	0x03B650D0 BL 0x1C16CF4
	0x03B650D4 MOVZ W8, 0x1
	0x03B650D8 STRB W8, [X21 + 0x9AE]
	0x03B650DC MOV X0, X20
	0x03B650E0 MOV X1, X31
	0x03B650E4 BL 0x3C8E5C0
	0x03B650E8 LDR X8, [X22]
	0x03B650EC MOV X21, X0
	0x03B650F0 LDR W9, [X8 + 0xE0]
	0x03B650F4 CBNZ W9, 0x3B65100
	0x03B650F8 MOV X0, X8
	0x03B650FC BL 0x1C16DFC
	0x03B65100 MOV X0, X21
	0x03B65104 MOV X1, X31
	0x03B65108 MOV X2, X31
	0x03B6510C BL 0x3C354F8
	0x03B65110 TBZ X0, 0x0, 0x3B65124
	0x03B65114 MOV X0, X20
	0x03B65118 MOV X1, X31
	0x03B6511C BL 0x3C8E684
	0x03B65120 B 0x3B6512C
	0x03B65124 MOVN W8, 0x80800000
	0x03B65128 FMOV S0, W8
	0x03B6512C MOV X0, X19
	0x03B65130 MOV X1, X31
	0x03B65134 STR S0, [X31 + 0xC]
	0x03B65138 BL 0x3C8E5C0
	0x03B6513C LDR X8, [X22]
	0x03B65140 MOV X20, X0
	0x03B65144 LDR W9, [X8 + 0xE0]
	0x03B65148 CBNZ W9, 0x3B65154
	0x03B6514C MOV X0, X8
	0x03B65150 BL 0x1C16DFC
	0x03B65154 MOV X0, X20
	0x03B65158 MOV X1, X31
	0x03B6515C MOV X2, X31
	0x03B65160 BL 0x3C354F8
	0x03B65164 TBZ X0, 0x0, 0x3B65178
	0x03B65168 MOV X0, X19
	0x03B6516C MOV X1, X31
	0x03B65170 BL 0x3C8E684
	0x03B65174 B 0x3B65180
	0x03B65178 MOVN W8, 0x80800000
	0x03B6517C FMOV S0, W8
	0x03B65180 ADD X0, X31, 0xC
	0x03B65184 MOV X1, X31
	0x03B65188 BL 0x338FCB8
	0x03B6518C LDP X20, X19, [X31 + 0x20]
	0x03B65190 LDP X22, X21, [X31 + 0x10]
	0x03B65194 LDR X30, [X31], #0x30
	0x03B65198 RET
	0x03B6519C MOV X1, X31
	0x03B651A0 B 0x33BDD8C
	0x03B651A4 LDP S0, S1, [X0]
	0x03B651A8 LDR V2, [X0 + 0x8]
	0x03B651AC RET
	0x03B651B0 STP S0, S1, [X0]
	0x03B651B4 STR S2, [X0 + 0x8]
	0x03B651B8 RET
	0x03B651BC LDR V0, [X0 + 0xC]
	0x03B651C0 RET
	0x03B651C4 STR S0, [X0 + 0xC]
	0x03B651C8 RET
	0x03B651CC STR X30, [X31 - 0x20]!
	0x03B651D0 STP X20, X19, [X31 + 0x10]
	0x03B651D4 ADRP X19, 0x87D000
	0x03B651D8 ADRP X20, 0x5F6000
	0x03B651DC LDRB W8, [X19 + 0x9AF]
	0x03B651E0 LDR X20, [X20 + 0x348]
	0x03B651E4 TBNZ X8, 0x0, 0x3B651FC
	0x03B651E8 ADRP X0, 0x5F6000
	0x03B651EC LDR X0, [X0 + 0x348]
	0x03B651F0 BL 0x1C16CF4
	0x03B651F4 MOVZ W8, 0x1
	0x03B651F8 STRB W8, [X19 + 0x9AF]
	0x03B651FC LDR X0, [X20]
	0x03B65200 BL 0x1C16F10
	0x03B65204 MOV X1, X31
	0x03B65208 MOV X19, X0
	0x03B6520C BL 0x33BDD8C
	0x03B65210 LDR X8, [X20]
	0x03B65214 LDR X8, [X8 + 0xB8]
	0x03B65218 STR X19, [X8]
	0x03B6521C LDP X20, X19, [X31 + 0x10]
	0x03B65220 LDR X30, [X31], #0x20
	0x03B65224 RET
	0x03B65228 MOV X1, X31
	0x03B6522C B 0x33BDD8C
	0x03B65230 STP X30, X21, [X31 - 0x20]!
	0x03B65234 STP X20, X19, [X31 + 0x10]
	0x03B65238 ADRP X20, 0x87D000
	0x03B6523C ADRP X21, 0x58E000
	0x03B65240 LDRB W8, [X20 + 0x9B0]
	0x03B65244 LDR X21, [X21 + 0x598]
	0x03B65248 MOV X19, X1
	0x03B6524C TBNZ X8, 0x0, 0x3B65264
	0x03B65250 ADRP X0, 0x58E000
	0x03B65254 LDR X0, [X0 + 0x598]
	0x03B65258 BL 0x1C16CF4
	0x03B6525C MOVZ W8, 0x1
	0x03B65260 STRB W8, [X20 + 0x9B0]
	0x03B65264 LDR X0, [X21]
	0x03B65268 LDR W8, [X0 + 0xE0]
	0x03B6526C CBNZ W8, 0x3B65274
	0x03B65270 BL 0x1C16DFC
	0x03B65274 MOV X0, X19
	0x03B65278 LDP X20, X19, [X31 + 0x10]
	0x03B6527C MOV X1, X31
	0x03B65280 MOV X2, X31
	0x03B65284 LDP X30, X21, [X31], #0x20
	0x03B65288 B 0x3C354F8
	0x03B6528C STP X30, X21, [X31 - 0x20]!
	0x03B65290 STP X20, X19, [X31 + 0x10]
	0x03B65294 ADRP X20, 0x87D000
	0x03B65298 ADRP X21, 0x58E000
	0x03B6529C LDRB W8, [X20 + 0x9B1]
	0x03B652A0 LDR X21, [X21 + 0x598]
	0x03B652A4 MOV X19, X1
	0x03B652A8 TBNZ X8, 0x0, 0x3B652C0
	0x03B652AC ADRP X0, 0x58E000
	0x03B652B0 LDR X0, [X0 + 0x598]
	0x03B652B4 BL 0x1C16CF4
	0x03B652B8 MOVZ W8, 0x1
	0x03B652BC STRB W8, [X20 + 0x9B1]
	0x03B652C0 LDR X0, [X21]
	0x03B652C4 LDR W8, [X0 + 0xE0]
	0x03B652C8 CBNZ W8, 0x3B652D0
	0x03B652CC BL 0x1C16DFC
	0x03B652D0 MOV X0, X19
	0x03B652D4 LDP X20, X19, [X31 + 0x10]
	0x03B652D8 MOV X1, X31
	0x03B652DC MOV X2, X31
	0x03B652E0 LDP X30, X21, [X31], #0x20
	0x03B652E4 B 0x3C3883C
	0x03B652E8 LDRB W0, [X0 + 0x1A8]
	0x03B652EC RET
	0x03B652F0 AND W8, W1, 0x1
	0x03B652F4 STRB W8, [X0 + 0x1A8]
	0x03B652F8 RET
	0x03B652FC LDR X0, [X0 + 0x1B0]
	0x03B65300 RET
	0x03B65304 STR X1, [X0 + 0x1B0]
	0x03B65308 RET
	0x03B6530C LDR X0, [X0 + 0x1B8]
	0x03B65310 RET
	0x03B65314 STR X1, [X0 + 0x1B8]
	0x03B65318 RET
	0x03B6531C LDRB W0, [X0 + 0x1C0]
	0x03B65320 RET
	0x03B65324 STP X30, X19, [X31 - 0x10]!
	0x03B65328 LDR X19, [X0 + 0x220]
	0x03B6532C AND W8, W1, 0x1
	0x03B65330 STRB W8, [X0 + 0x1C0]
	0x03B65334 TBZ X1, 0x0, 0x3B65344
	0x03B65338 MOV X1, X31
	0x03B6533C BL 0x3C32454
	0x03B65340 B 0x3B65348
	0x03B65344 MOV W0, W31
	0x03B65348 CBZ X19, 0x3B6535C
	0x03B6534C AND W8, W0, 0x1
	0x03B65350 STRB W8, [X19 + 0x10]
	0x03B65354 LDP X30, X19, [X31], #0x10
	0x03B65358 RET
	0x03B6535C BL 0x1C16F20
	0x03B65360 LDR V0, [X0 + 0x1C4]
	0x03B65364 RET
	0x03B65368 STR S0, [X0 + 0x1C4]
	0x03B6536C RET

ISIL:
	001 Move [X31-160], D15
	002 Move [X31-152], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X29
	010 Move [X31+72], X30
	011 Move [X31+80], X28
	012 Move [X31+88], X27
	013 Move [X31+96], X26
	014 Move [X31+104], X25
	015 Move [X31+112], X24
	016 Move [X31+120], X23
	017 Move [X31+128], X22
	018 Move [X31+136], X21
	019 Move [X31+144], X20
	020 Move [X31+152], X19
	021 Subtract X31, X31, 384
	022 Move [X31+44], W5
	023 Move [X31+48], W6
	024 Move X20, 0x87F000
	025 Move X19, 0x5F7000
	026 Move W8, [X20+2468]
	027 Move X19, [X19+1984]
	028 Move V8, V1
	029 Move X21, X4
	030 Move X22, X3
	031 Move X23, X2
	032 Move V9, V0
	033 Move X25, X1
	034 Move X24, X0
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {53}
	039 Move X0, 0x5F7000
	040 Move X0, [X0+1920]
	041 Call 0x1C17CF4
	042 Move X0, 0x5F7000
	043 Move X0, [X0+1928]
	044 Call 0x1C17CF4
	045 Move X0, 0x5F8000
	046 Move X0, [X0+848]
	047 Call 0x1C17CF4
	048 Move X0, 0x5F7000
	049 Move X0, [X0+1984]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X20+2468], W8
	053 Move X0, [X19]
	054 NotImplemented "Instruction MOVI not yet implemented."
	055 Add X8, X31, 256
	056 Move [X31+328], X31
	057 Move [X31+320], W31
	058 Move [X31+304], X31
	059 Move [X31+312], X31
	060 Move [X31+240], X31
	061 Move [X31+248], X31
	062 Move [X31+232], W31
	063 Move [X8+108], V0
	064 Move [X31+336], V0
	065 Move [X31+344], V0
	066 Move [X8+28], V0
	067 Move [X31+256], V0
	068 Move [X31+264], V0
	069 Move [X31+224], X31
	070 Move [X31+216], W31
	071 Move [X31+208], X31
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {77}
	075 Call 0x1C17DFC
	076 Move X0, [X19]
	077 Move X8, [X0+184]
	078 Move X0, [X8+16]
	079 Compare X0, 0
	080 JumpIfEqual {564}
	081 Move [X31+56], X25
	082 Move X8, 0x5F7000
	083 Move X8, [X8+1928]
	084 Move X1, [X8]
	085 Call HashSet`1<Object>.Clear, X0
	086 Move X9, [X19]
	087 Move W8, 0x447A0000
	088 Move S0, [X22]
	089 Move S1, [X22+4]
	090 Move V2, [X22+8]
	091 Move X9, [X9+184]
	092 Move S3, [X23]
	093 Move S4, [X23+4]
	094 Move V5, [X23+8]
	095 Move W2, [X31+44]
	096 Move W3, [X31+48]
	097 Move X1, [X9+8]
	098 Move S6, W8
	099 NotImplemented "Instruction FMINNM not yet implemented."
	100 Add X0, X24, 968
	101 Move V6, V15
	102 Move X4, X31
	103 Move [X31+32], X0
	104 Call PhysicsScene.Raycast, X0, X1, X2, X3, V0, X4, X5
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X20, X31
	107 Move W25, W31
	108 Move W29, W0
	109 Move W27, 32
	110 Move W26, 44
	111 Move S10, 1.5
	112 Move X0, [X19]
	113 Move W8, [X0+224]
	114 Compare W8, 0
	115 JumpIfNotEqual {118}
	116 Call 0x1C17DFC
	117 Move X0, [X19]
	118 Move X8, [X0+184]
	119 Move X8, [X8+8]
	120 Compare X8, 0
	121 JumpIfEqual {564}
	122 Move W9, [X8+24]
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Add X8, X8, X27
	125 Move W9, [X8+40]
	126 Move X10, [X8+32]
	127 Move V1, [X8]
	128 Move V0, [X8+16]
	129 Add X0, X31, 336
	130 Move X1, X31
	131 Move [X31+376], W9
	132 Move [X31+368], X10
	133 Move [X31+336], V1
	134 Move [X31+344], V0
	135 Call RaycastHit.get_distance, X0
	136 NotImplemented "Instruction FCMP not yet implemented."
	137 Move X28, [X24+48]
	138 Add X0, X31, 336
	139 Move X1, X31
	140 Call RaycastHit.get_collider, X0
	141 Compare X28, 0
	142 JumpIfEqual {564}
	143 Move X1, X0
	144 Add X2, X31, 328
	145 Move X0, X28
	146 Move X3, X31
	147 Call XRInteractionManager.TryGetInteractableForCollider, X0, X1, X2
	148 Move TEMP, X0
	149 And TEMP, TEMP, 1
	150 Compare TEMP, 1
	151 JumpIfEqual {168}
	152 Add X0, X31, 336
	153 Move X1, X31
	154 Call RaycastHit.get_distance, X0
	155 Move W8, S15
	156 And W8, W8, 0x7FFFFFFF
	157 NotImplemented "Instruction FCMP not yet implemented."
	158 Move W9, 0x7F800000
	159 NotImplemented "Instruction CCMP not yet implemented."
	160 Add X0, X31, 336
	161 Move X1, X31
	162 NotImplemented "Instruction FCSEL not yet implemented."
	163 Call RaycastHit.get_distance, X0
	164 Add S0, S0, S10
	165 Add X0, X31, 336
	166 Move X1, X31
	167 Call RaycastHit.set_distance, X0, V0
	168 Add X8, X31, 256
	169 Move V0, [X31+336]
	170 Move V1, [X31+352]
	171 NotImplemented "Instruction LDUR not yet implemented."
	172 Move [X31+160], V0
	173 Move [X31+168], V1
	174 Move [X31+188], V2
	175 Compare X21, 0
	176 JumpIfEqual {564}
	177 Move V0, [X31+160]
	178 Move V1, [X31+176]
	179 NotImplemented "Instruction LDUR not yet implemented."
	180 Move [X31+112], V0
	181 Move [X31+120], V1
	182 Move [X31+140], V2
	183 Move W8, [X21+24]
	184 NotImplemented "Instruction CMP not yet implemented."
	185 NotImplemented "Instruction LDUR not yet implemented."
	186 Move V2, [X31+112]
	187 Move V1, [X31+128]
	188 NotImplemented "Instruction NOP not yet implemented."
	189 NotImplemented "Instruction SMADDL not yet implemented."
	190 Move [X8+60], V0
	191 Move [X8+32], V2
	192 Move [X8+40], V1
	193 Move X0, [X19]
	194 Move W8, [X0+224]
	195 Compare W8, 0
	196 JumpIfNotEqual {199}
	197 Call 0x1C17DFC
	198 Move X0, [X19]
	199 Move X8, [X0+184]
	200 Add X0, X31, 336
	201 Move X1, X31
	202 Move X28, [X8+16]
	203 Call RaycastHit.get_collider, X0
	204 Compare X28, 0
	205 JumpIfEqual {564}
	206 Move X8, 0x5F7000
	207 Move X8, [X8+1920]
	208 Move X1, X0
	209 Move X0, X28
	210 Move X2, [X8]
	211 Call HashSet`1<Object>.Add, X0, X1
	212 Add W25, W25, 1
	213 Add X20, X20, 1
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Add X27, X27, 44
	216 Move W25, W31
	217 Move X8, -50827264
	218 Move X20, 0x87E000
	219 Move V0, [X8+260]
	220 Move W8, [X20+1372]
	221 Multiply S8, S9, S0
	222 Move S9, 0.5
	223 Compare W8, 0
	224 JumpIfNotEqual {230}
	225 Move X0, 0x590000
	226 Move X0, [X0+1448]
	227 Call 0x1C17CF4
	228 Move W8, 1
	229 Move [X20+1372], W8
	230 Move X20, 0x590000
	231 Move X20, [X20+1448]
	232 Multiply S8, S8, S9
	233 Move X0, [X20]
	234 Move W8, [X0+224]
	235 Compare W8, 0
	236 JumpIfNotEqual {238}
	237 Call 0x1C17DFC
	238 NotImplemented "Instruction FCVT not yet implemented."
	239 Call 0x3EB2DD0
	240 Move X9, [X31+56]
	241 Move X26, 0x875000
	242 Move V8, [X22]
	243 NotImplemented "Instruction LDUR not yet implemented."
	244 Move V11, [X9]
	245 Move W8, [X26+1924]
	246 NotImplemented "Instruction LDUR not yet implemented."
	247 Move V10, V0
	248 Compare W8, 0
	249 JumpIfNotEqual {255}
	250 Move X0, 0x590000
	251 Move X0, [X0+1448]
	252 Call 0x1C17CF4
	253 Move W8, 1
	254 Move [X26+1924], W8
	255 Move X0, [X20]
	256 Subtract S11, S8, S11
	257 Subtract V8, V9, V12
	258 Move W8, [X0+224]
	259 Compare W8, 0
	260 JumpIfNotEqual {262}
	261 Call 0x1C17DFC
	262 Multiply S0, S11, S11
	263 NotImplemented "Instruction INVALID not yet implemented."
	264 Add S0, S0, S1
	265 Move S1, V1.S[1]
	266 Add S0, S0, S1
	267 NotImplemented "Instruction FSQRT not yet implemented."
	268 NotImplemented "Instruction FCMP not yet implemented."
	269 NotImplemented "Instruction INVALID not yet implemented."
	270 Move X8, -50827264
	271 Move [X31+24], S0
	272 Move V0, [X8+576]
	273 Move X28, 0x5F8000
	274 Move X9, -50831360
	275 Move X28, [X28+848]
	276 Move [X31+52], S0
	277 Move V0, [X9+3872]
	278 Move [X31+28], S15
	279 Move [X31+20], S0
	280 Move V0, [X31+24]
	281 Add X1, X31, 312
	282 Add X2, X31, 308
	283 Add X3, X31, 304
	284 Move V1, V8
	285 Move V2, V15
	286 Move X0, X23
	287 Move X4, X31
	288 Move [X31+56], S8
	289 Call BurstPhysicsUtils.GetConecastParameters, V0, V1, V2, X0, X1, X2, X3
	290 Move X0, [X19]
	291 Move V15, [X22]
	292 Move V10, [X22+8]
	293 Move V8, [X31+312]
	294 Move V9, [X31+320]
	295 Move V14, [X31+308]
	296 Move S12, [X23]
	297 Move S11, [X23+4]
	298 Move W8, [X0+224]
	299 Move V13, [X23+8]
	300 Compare W8, 0
	301 JumpIfNotEqual {304}
	302 Call 0x1C17DFC
	303 Move X0, [X19]
	304 Move X8, [X0+184]
	305 Move V7, [X31+304]
	306 Move X0, [X31+32]
	307 Move W2, [X31+44]
	308 Move W3, [X31+48]
	309 Move X1, [X8+8]
	310 Add V0, V15, V8
	311 Add S2, S10, S9
	312 Move S1, V0.S[1]
	313 Move V3, V14
	314 Move V4, V12
	315 Move V5, V11
	316 Move V6, V13
	317 Move X4, X31
	318 Call PhysicsScene.SphereCast, X0, X1, V0, X2, X3, V1, X4, X5
	319 NotImplemented "Instruction CMP not yet implemented."
	320 Move V15, [X31+28]
	321 Move V8, [X31+56]
	322 Compare X21, 0
	323 JumpIfEqual {564}
	324 Move S0, 1
	325 Move X26, X31
	326 Add S14, S8, S0
	327 Move W20, W0
	328 Move W27, 32
	329 Move W8, [X21+24]
	330 NotImplemented "Instruction CMP not yet implemented."
	331 Move X0, [X19]
	332 Move W8, [X0+224]
	333 Compare W8, 0
	334 JumpIfNotEqual {337}
	335 Call 0x1C17DFC
	336 Move X0, [X19]
	337 Move X8, [X0+184]
	338 Move X8, [X8+8]
	339 Compare X8, 0
	340 JumpIfEqual {564}
	341 Move W9, [X8+24]
	342 NotImplemented "Instruction CMP not yet implemented."
	343 Add X8, X8, X27
	344 Move W9, [X8+40]
	345 Move X10, [X8+32]
	346 Move V1, [X8]
	347 Move V0, [X8+16]
	348 Add X0, X31, 256
	349 Move X1, X31
	350 Move [X31+296], W9
	351 Move [X31+288], X10
	352 Move [X31+256], V1
	353 Move [X31+264], V0
	354 Call RaycastHit.get_distance, X0
	355 NotImplemented "Instruction FCMP not yet implemented."
	356 Move X0, [X19]
	357 Move W8, [X0+224]
	358 Compare W8, 0
	359 JumpIfNotEqual {362}
	360 Call 0x1C17DFC
	361 Move X0, [X19]
	362 Move X8, [X0+184]
	363 Add X0, X31, 256
	364 Move X1, X31
	365 Move X29, [X8+16]
	366 Call RaycastHit.get_collider, X0
	367 Compare X29, 0
	368 JumpIfEqual {564}
	369 Move X2, [X28]
	370 Move X1, X0
	371 Move X0, X29
	372 Call HashSet`1<Object>.Contains, X0, X1
	373 Move TEMP, X0
	374 And TEMP, TEMP, 1
	375 Compare TEMP, 1
	376 JumpIfEqual {512}
	377 Move X29, [X24+48]
	378 Add X0, X31, 256
	379 Move X1, X31
	380 Call RaycastHit.get_collider, X0
	381 Compare X29, 0
	382 JumpIfEqual {564}
	383 Move X1, X0
	384 Add X2, X31, 328
	385 Move X0, X29
	386 Move X3, X31
	387 Call XRInteractionManager.TryGetInteractableForCollider, X0, X1, X2
	388 Move TEMP, X0
	389 And TEMP, TEMP, 1
	390 Compare TEMP, 1
	391 JumpIfNotEqual {512}
	392 Add X0, X31, 256
	393 Move X1, X31
	394 Call RaycastHit.get_distance, X0
	395 Move X8, 0x875000
	396 Move W8, [X8+1450]
	397 Move V11, V0
	398 Compare W8, 0
	399 JumpIfNotEqual {406}
	400 Move X0, 0x596000
	401 Move X0, [X0+1208]
	402 Call 0x1C17CF4
	403 Move X8, 0x875000
	404 Move W9, 1
	405 Move [X8+1450], W9
	406 Move X8, 0x596000
	407 Move X8, [X8+1208]
	408 Move V3, [X31+52]
	409 NotImplemented "Instruction FABS not yet implemented."
	410 Move S2, W31
	411 Move X8, [X8]
	412 NotImplemented "Instruction FMAXNM not yet implemented."
	413 Multiply S1, S1, S3
	414 Move S3, 8
	415 Move X8, [X8+184]
	416 Move V0, [X8]
	417 Multiply S0, S0, S3
	418 NotImplemented "Instruction FCMP not yet implemented."
	419 NotImplemented "Instruction FCSEL not yet implemented."
	420 NotImplemented "Instruction FABD not yet implemented."
	421 NotImplemented "Instruction FCMP not yet implemented."
	422 Add X0, X31, 256
	423 Move X1, X31
	424 Call RaycastHit.get_point, X0
	425 Move X8, 0x874000
	426 Move W8, [X8+1923]
	427 Move V11, V0
	428 Move V12, V1
	429 Move V13, V2
	430 Compare W8, 0
	431 JumpIfNotEqual {438}
	432 Move X0, 0x58F000
	433 Move X0, [X0+1440]
	434 Call 0x1C17CF4
	435 Move W8, 1
	436 Move X9, 0x874000
	437 Move [X9+1923], W8
	438 Move X8, 0x58F000
	439 Move X8, [X8+1440]
	440 Move X8, [X8]
	441 Move X8, [X8+184]
	442 Move S0, [X8]
	443 Move S1, [X8+4]
	444 Move V2, [X8+8]
	445 Subtract S0, S11, S0
	446 Subtract S1, S12, S1
	447 Subtract S2, S13, S2
	448 Multiply S0, S0, S0
	449 Multiply S1, S1, S1
	450 Add S0, S0, S1
	451 Multiply S1, S2, S2
	452 Add S0, S1, S0
	453 Move V1, [X31+20]
	454 NotImplemented "Instruction FCMP not yet implemented."
	455 Move S0, [X22]
	456 Move S1, [X22+4]
	457 Move V2, [X22+8]
	458 Move X0, X31
	459 Call float3.op_Implicit, X0
	460 Add X0, X31, 256
	461 Move X1, X31
	462 Move [X31+240], S0
	463 Move [X31+248], S1
	464 Move [X31+248], S2
	465 Call RaycastHit.get_point, X0
	466 Move X0, X31
	467 Call float3.op_Implicit, X0
	468 Move [X31+224], S0
	469 Move [X31+232], S1
	470 Move [X31+232], S2
	471 Move S0, [X23]
	472 Move S1, [X23+4]
	473 Move V2, [X23+8]
	474 Move X0, X31
	475 Call float3.op_Implicit, X0
	476 Add X0, X31, 240
	477 Add X1, X31, 224
	478 Add X2, X31, 208
	479 Add X3, X31, 252
	480 Move X4, X31
	481 Move [X31+208], S0
	482 Move [X31+216], S1
	483 Move [X31+216], S2
	484 Call BurstPhysicsUtils.GetConecastOffset, X0, X1, X2, X3
	485 Add X0, X31, 256
	486 Move X1, X31
	487 Call RaycastHit.get_distance, X0
	488 Move V1, [X31+252]
	489 Add X0, X31, 256
	490 Move X1, X31
	491 Add S1, S14, S1
	492 Add S0, S0, S1
	493 Call RaycastHit.set_distance, X0, V0
	494 Add X8, X31, 256
	495 NotImplemented "Instruction LDUR not yet implemented."
	496 Move V2, [X31+256]
	497 Move V1, [X31+272]
	498 Move [X31+92], V0
	499 Move [X31+64], V2
	500 Move [X31+72], V1
	501 Move W8, [X21+24]
	502 NotImplemented "Instruction CMP not yet implemented."
	503 NotImplemented "Instruction LDUR not yet implemented."
	504 Move V2, [X31+64]
	505 Move V1, [X31+80]
	506 Move W8, 44
	507 NotImplemented "Instruction SMADDL not yet implemented."
	508 Add W25, W25, 1
	509 Move [X8+60], V0
	510 Move [X8+32], V2
	511 Move [X8+40], V1
	512 Add X26, X26, 1
	513 NotImplemented "Instruction CMP not yet implemented."
	514 Add X27, X27, 44
	515 Move V15, [X31+28]
	516 Move V8, [X31+56]
	517 Move V0, [X31+304]
	518 Add S8, S8, S0
	519 NotImplemented "Instruction FCMP not yet implemented."
	520 Move X0, [X19]
	521 Move W8, [X0+224]
	522 Compare W8, 0
	523 JumpIfNotEqual {526}
	524 Call 0x1C17DFC
	525 Move X0, [X19]
	526 Move X8, [X0+184]
	527 Move X0, [X8+16]
	528 Compare X0, 0
	529 JumpIfEqual {564}
	530 Move X8, 0x5F6000
	531 Move X8, [X8+1928]
	532 Move X1, [X8]
	533 Call HashSet`1<Object>.Clear, X0
	534 Move X8, [X19]
	535 Move W2, 10
	536 Move W1, W31
	537 Move X3, X31
	538 Move X8, [X8+184]
	539 Move X0, [X8+8]
	540 Call Array.Clear, X0, X1, X2
	541 Move W0, W25
	542 Add X31, X31, 384
	543 Move X20, [X31+144]
	544 Move X19, [X31+152]
	545 Move X22, [X31+128]
	546 Move X21, [X31+136]
	547 Move X24, [X31+112]
	548 Move X23, [X31+120]
	549 Move X26, [X31+96]
	550 Move X25, [X31+104]
	551 Move X28, [X31+80]
	552 Move X27, [X31+88]
	553 Move X29, [X31+64]
	554 Move X30, [X31+72]
	555 Move D9, [X31+48]
	556 Move D8, [X31+56]
	557 Move D11, [X31+32]
	558 Move D10, [X31+40]
	559 Move D13, [X31+16]
	560 Move D12, [X31+24]
	561 Move D15, [X31+160]
	562 Move D14, [X31+168]
	563 Return X0
	564 Call 0x1C17F20
	565 Call 0x1C17F28

Method: System.Int32 FilterTriggerColliders(UnityEngine.XR.Interaction.Toolkit.XRInteractionManager interactionManager, UnityEngine.RaycastHit[] raycastHits, System.Int32 count, System.Func`2<UnityEngine.XR.Interaction.Toolkit.XRInteractableSnapVolume, System.Boolean> removeRule)

Disassembly:
	0x03B65370 LDR V0, [X0 + 0x1C8]
	0x03B65374 RET
	0x03B65378 STR S0, [X0 + 0x1C8]
	0x03B6537C RET
	0x03B65380 LDRB W0, [X0 + 0x1D0]
	0x03B65384 RET
	0x03B65388 AND W8, W1, 0x1
	0x03B6538C STRB W8, [X0 + 0x1D0]
	0x03B65390 RET
	0x03B65394 LDR V0, [X0 + 0x1D4]
	0x03B65398 RET
	0x03B6539C STR X30, [X31 - 0x10]!
	0x03B653A0 LDR X8, [X0 + 0x220]
	0x03B653A4 STR S0, [X0 + 0x1D4]
	0x03B653A8 CBZ X8, 0x3B653B8
	0x03B653AC STR S0, [X8 + 0x14]
	0x03B653B0 LDR X30, [X31], #0x10
	0x03B653B4 RET
	0x03B653B8 BL 0x1C16F20
	0x03B653BC LDR W0, [X0 + 0x1D8]
	0x03B653C0 RET
	0x03B653C4 STR X30, [X31 - 0x10]!
	0x03B653C8 LDR X8, [X0 + 0x220]
	0x03B653CC STR W1, [X0 + 0x1D8]
	0x03B653D0 CBZ X8, 0x3B653E0
	0x03B653D4 STR W1, [X8 + 0x18]
	0x03B653D8 LDR X30, [X31], #0x10
	0x03B653DC RET
	0x03B653E0 BL 0x1C16F20
	0x03B653E4 LDR V0, [X0 + 0x1DC]
	0x03B653E8 LDR V1, [X0 + 0x1E0]
	0x03B653EC LDR V2, [X0 + 0x1E4]
	0x03B653F0 RET
	0x03B653F4 STP X30, X19, [X31 - 0x10]!
	0x03B653F8 LDR X19, [X0 + 0x220]
	0x03B653FC STR S0, [X0 + 0x1DC]
	0x03B65400 STR S1, [X0 + 0x1E0]
	0x03B65404 STR S2, [X0 + 0x1E4]
	0x03B65408 MOV X0, X31
	0x03B6540C BL 0x3887BE4
	0x03B65410 CBZ X19, 0x3B65424
	0x03B65414 STP S0, S1, [X19 + 0x1C]
	0x03B65418 STR S2, [X19 + 0x24]
	0x03B6541C LDP X30, X19, [X31], #0x10
	0x03B65420 RET
	0x03B65424 BL 0x1C16F20
	0x03B65428 LDR V0, [X0 + 0x1E8]
	0x03B6542C LDR V1, [X0 + 0x1EC]
	0x03B65430 LDR V2, [X0 + 0x1F0]
	0x03B65434 RET
	0x03B65438 STP X30, X19, [X31 - 0x10]!
	0x03B6543C LDR X19, [X0 + 0x220]
	0x03B65440 STR S0, [X0 + 0x1E8]
	0x03B65444 STR S1, [X0 + 0x1EC]
	0x03B65448 STR S2, [X0 + 0x1F0]
	0x03B6544C MOV X0, X31
	0x03B65450 BL 0x3887BE4
	0x03B65454 CBZ X19, 0x3B65468
	0x03B65458 STP S0, S1, [X19 + 0x28]
	0x03B6545C STR S2, [X19 + 0x30]
	0x03B65460 LDP X30, X19, [X31], #0x10
	0x03B65464 RET
	0x03B65468 BL 0x1C16F20
	0x03B6546C LDR X0, [X0 + 0x1F8]
	0x03B65470 RET
	0x03B65474 MOVZ W0, 0x1
	0x03B65478 RET
	0x03B6547C MOVZ W0, 0x1
	0x03B65480 RET
	0x03B65484 B 0x3B65488
	0x03B65488 STR X30, [X31 - 0x20]!
	0x03B6548C STP X20, X19, [X31 + 0x10]
	0x03B65490 LDR X20, [X0 + 0x220]
	0x03B65494 CBZ X20, 0x3B654FC
	0x03B65498 STR X0, [X20 + 0x38]
	0x03B6549C LDR V0, [X0 + 0x1D4]
	0x03B654A0 MOV X19, X0
	0x03B654A4 STR S0, [X20 + 0x14]
	0x03B654A8 LDR W8, [X0 + 0x1D8]
	0x03B654AC STR W8, [X20 + 0x18]
	0x03B654B0 LDR V0, [X0 + 0x1DC]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X23, 0x87E000
	013 Move W8, [X23+2469]
	014 Move X20, X3
	015 Move W19, W2
	016 Move X21, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0x5F7000
	023 Move X0, [X0+856]
	024 Call 0x1C17CF4
	025 Move X0, 0x5F6000
	026 Move X0, [X0+1984]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X23+2469], W8
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move [X31], X31
	032 Move [X31+8], X31
	033 Compare X21, 0
	034 JumpIfEqual {102}
	035 Move X25, 0x5F6000
	036 Move X26, 0x5F7000
	037 Move X25, [X25+1984]
	038 Move X26, [X26+856]
	039 Move W23, W31
	040 Move W27, 44
	041 Move W8, [X21+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction SMADDL not yet implemented."
	044 Add X0, X8, 32
	045 Move X1, X31
	046 Call RaycastHit.get_collider, X0
	047 Compare X0, 0
	048 JumpIfEqual {102}
	049 Move X1, X31
	050 Move X24, X0
	051 Call Collider.get_isTrigger, X0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {87}
	056 Compare X22, 0
	057 JumpIfEqual {102}
	058 Add X2, X31, 0
	059 Add X3, X31, 8
	060 Move X0, X22
	061 Move X1, X24
	062 Move X4, X31
	063 Call XRInteractionManager.TryGetInteractableForCollider, X0, X1, X2, X3
	064 Compare X20, 0
	065 JumpIfEqual {102}
	066 Move X1, [X31+8]
	067 Move X8, [X20+24]
	068 Move X0, [X20+64]
	069 Move X2, [X20+40]
	070 NotImplemented "Instruction BLR not yet implemented."
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {87}
	075 Move X0, [X25]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move X3, [X26]
	081 Move X0, X21
	082 Move W1, W23
	083 Move W2, W19
	084 Call 0x22AF708, X0, X1, X2
	085 Subtract W19, W19, 1
	086 Subtract W23, W23, 1
	087 Add W23, W23, 1
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move W0, W19
	090 Move X20, [X31+80]
	091 Move X19, [X31+88]
	092 Move X22, [X31+64]
	093 Move X21, [X31+72]
	094 Move X24, [X31+48]
	095 Move X23, [X31+56]
	096 Move X26, [X31+32]
	097 Move X25, [X31+40]
	098 Move X30, [X31+16]
	099 Move X27, [X31+24]
	100 Add X31, X31, 96
	101 Return X0
	102 Call 0x1C17F20
	103 Call 0x1C17F28

Method: System.Void RemoveAt(T[] array, System.Int32 index, System.Int32 count)

Disassembly:
	0x022AF708 LDP X20, X19, [X31 + 0x40]
	0x022AF70C LDP X22, X21, [X31 + 0x30]
	0x022AF710 LDP X24, X23, [X31 + 0x20]
	0x022AF714 LDP X26, X25, [X31 + 0x10]
	0x022AF718 LDP X30, X27, [X31], #0x50
	0x022AF71C RET
	0x022AF720 MOV W0, W31
	0x022AF724 B 0x22AF708
	0x022AF728 BL 0x1C16F20
	0x022AF72C BL 0x1C16F28
	0x022AF730 BL 0x1C16F44
	0x022AF734 MOV X1, X31
	0x022AF738 BL 0x1C16DEC
	0x022AF73C BL 0x1C171E0
	0x022AF740 ADRP X0, 0x1E6D000
	0x022AF744 LDR X0, [X0 + 0xA20]
	0x022AF748 BL 0x1C16D08
	0x022AF74C MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W3, W1
	005 NotImplemented "Instruction ORN not yet implemented."
	006 Move W19, W2
	007 Add W1, W1, 1
	008 Add W4, W8, W2
	009 Move X2, X0
	010 Move X5, X31
	011 Move X20, X0
	012 Call Array.Copy, X0, X1, X2, X3, X4
	013 Subtract W1, W19, 1
	014 Move X0, X20
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W2, 1
	018 Move X3, X31
	019 Move X30, [X31+32]
	020 Call Array.Clear, X0, X1, X2
	021 Return 

Method: System.Void CreateBezierCurve(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/SamplePoint> samplePoints, System.Int32 endSamplePointIndex, Unity.Mathematics.float3[] quadraticControlPoints, System.Nullable`1<UnityEngine.Ray> rayOriginOverride = null)

Disassembly:
	0x03B62138 ADRP X22, 0x87F000
	0x03B6213C LDRB W8, [X22 + 0x56A]
	0x03B62140 MOV V13.16B, V0.16B
	0x03B62144 CBNZ W8, 0x3B6215C
	0x03B62148 ADRP X0, 0x591000
	0x03B6214C LDR X0, [X0 + 0x5A8]
	0x03B62150 BL 0x1C16CF4
	0x03B62154 MOVZ W8, 0x1
	0x03B62158 STRB W8, [X22 + 0x56A]
	0x03B6215C ADRP X22, 0x591000
	0x03B62160 LDR X22, [X22 + 0x5A8]
	0x03B62164 LDR X0, [X22]
	0x03B62168 LDR W8, [X0 + 0xE0]
	0x03B6216C CBNZ W8, 0x3B62174
	0x03B62170 BL 0x1C16DFC
	0x03B62174 LDP S0, S1, [X21]
	0x03B62178 FMUL S2, S8, S8
	0x03B6217C FMUL S3, S9, S9
	0x03B62180 FADD S2, S2, S3
	0x03B62184 LDR V3, [X21 + 0x8]
	0x03B62188 FSUB S0, S11, S0
	0x03B6218C FSUB S1, S12, S1
	0x03B62190 ADRP X21, 0x87F000
	0x03B62194 LDRB W8, [X21 + 0x585]
	0x03B62198 FSUB S3, S14, S3
	0x03B6219C FMUL S0, S8, S0
	0x03B621A0 FMUL S1, S9, S1
	0x03B621A4 FMUL S4, S10, S10
	0x03B621A8 FMUL S3, S10, S3
	0x03B621AC FADD S0, S0, S1
	0x03B621B0 FADD S0, S3, S0
	0x03B621B4 FADD S1, S4, S2
	0x03B621B8 FDIV S12, S0, S1
	0x03B621BC CBNZ W8, 0x3B621D4
	0x03B621C0 ADRP X0, 0x591000
	0x03B621C4 LDR X0, [X0 + 0x5A8]
	0x03B621C8 BL 0x1C16CF4
	0x03B621CC MOVZ W8, 0x1
	0x03B621D0 STRB W8, [X21 + 0x585]
	0x03B621D4 LDR X0, [X22]
	0x03B621D8 FMUL S11, S8, S12
	0x03B621DC FMUL S8, S9, S12
	0x03B621E0 FMUL S9, S10, S12
	0x03B621E4 LDR W8, [X0 + 0xE0]
	0x03B621E8 CBNZ W8, 0x3B621F0
	0x03B621EC BL 0x1C16DFC
	0x03B621F0 ADRP X8, 0xFFFFFFFFFCF88000
	0x03B621F4 LDR V0, [X8 + 0x104]
	0x03B621F8 FMUL S0, S13, S0
	0x03B621FC FCVT S0, S0
	0x03B62200 BL 0x3EB1C30
	0x03B62204 FMUL S1, S11, S11
	0x03B62208 FMUL S3, S8, S8
	0x03B6220C LDR V6, [X20 + 0x2B8]
	0x03B62210 LDR V5, [X20 + 0x2B0]
	0x03B62214 FMUL S2, S9, S9
	0x03B62218 FADD S3, S1, S3
	0x03B6221C LDR V1, [X20 + 0x2B4]
	0x03B62220 LDR V4, [X20 + 0x2BC]
	0x03B62224 MOV X0, X19
	0x03B62228 LDP X20, X19, [X31 + 0x60]
	0x03B6222C LDP X22, X21, [X31 + 0x50]
	0x03B62230 LDP X30, X23, [X31 + 0x40]
	0x03B62234 LDP D9, D8, [X31 + 0x30]
	0x03B62238 LDP D11, D10, [X31 + 0x20]
	0x03B6223C LDP D13, D12, [X31 + 0x10]
	0x03B62240 FADD S2, S2, S3
	0x03B62244 FSQRT S2, S2
	0x03B62248 FADD S3, S2, S6
	0x00000000 INVALID
	0x03B62250 MOV V0.16B, V5.16B
	0x03B62254 MOV X1, X31
	0x03B62258 LDR V14, [X31], #0x70
	0x03B6225C B 0x3B940A4
	0x03B62260 STP X30, X21, [X31 - 0x20]!
	0x03B62264 STP X20, X19, [X31 + 0x10]
	0x03B62268 ADRP X21, 0x880000
	0x03B6226C LDRB W8, [X21 + 0x99A]
	0x03B62270 MOV X20, X1
	0x03B62274 MOV X19, X0
	0x03B62278 TBNZ X8, 0x0, 0x3B62290
	0x03B6227C ADRP X0, 0x5B9000
	0x03B62280 LDR X0, [X0 + 0x3C0]
	0x03B62284 BL 0x1C16CF4
	0x03B62288 MOVZ W8, 0x1
	0x03B6228C STRB W8, [X21 + 0x99A]
	0x03B62290 CBZ X19, 0x3B622B0
	0x03B62294 ADRP X8, 0x5B9000
	0x03B62298 LDR X8, [X8 + 0x3C0]
	0x03B6229C MOV X0, X19
	0x03B622A0 LDR X1, [X8]
	0x03B622A4 BL 0x21F5E68
	0x03B622A8 STP S0, S1, [X20]
	0x03B622AC B 0x3B622B4
	0x03B622B0 STR X31, [X20]
	0x03B622B4 CMP X19, 0x0
	0x03B622B8 LDP X20, X19, [X31 + 0x10]
	0x03B622BC CSET W0, NE
	0x03B622C0 LDP X30, X21, [X31], #0x20
	0x03B622C4 RET
	0x03B622C8 CBZ X0, 0x3B622D4
	0x03B622CC MOV X1, X31
	0x03B622D0 B 0x3734AB8
	0x03B622D4 RET
	0x03B622D8 STP D9, D8, [X31 - 0x30]!
	0x03B622DC STP X30, X21, [X31 + 0x10]
	0x03B622E0 STP X20, X19, [X31 + 0x20]
	0x03B622E4 ADRP X21, 0x880000
	0x03B622E8 LDRB W8, [X21 + 0x99B]
	0x03B622EC MOV V8.16B, V0.16B
	0x03B622F0 MOV X19, X1
	0x03B622F4 MOV X20, X0
	0x03B622F8 TBNZ X8, 0x0, 0x3B62310
	0x03B622FC ADRP X0, 0x591000
	0x03B62300 LDR X0, [X0 + 0x598]
	0x03B62304 BL 0x1C16CF4
	0x03B62308 MOVZ W8, 0x1
	0x03B6230C STRB W8, [X21 + 0x99B]
	0x03B62310 ADRP X21, 0x877000
	0x03B62314 LDRB W8, [X21 + 0x5AA]
	0x03B62318 CBNZ W8, 0x3B62330
	0x03B6231C ADRP X0, 0x598000
	0x03B62320 LDR X0, [X0 + 0x4B8]
	0x03B62324 BL 0x1C16CF4
	0x03B62328 MOVZ W8, 0x1
	0x03B6232C STRB W8, [X21 + 0x5AA]
	0x03B62330 ADRP X8, 0x598000
	0x03B62334 LDR X8, [X8 + 0x4B8]
	0x03B62338 ADRP X9, 0xFFFFFFFFFCF88000
	0x03B6233C LDR V0, [X9 + 0x240]
	0x03B62340 FABS S1, S8
	0x03B62344 LDR X8, [X8]
	0x03B62348 FMOV S2, W31
	0x03B6234C FMAXNM S1, S1, S2
	0x03B62350 FMUL S0, S1, S0
	0x03B62354 LDR X8, [X8 + 0xB8]
	0x03B62358 FMOV S1, 8
	0x03B6235C LDR V3, [X8]
	0x03B62360 FMUL S1, S3, S1
	0x03B62364 FCMP S0, S1
	0x03B62368 FCSEL S0, S0, S1, GT
	0x03B6236C FABD S1, S2, S2
	0x03B62370 FCMP S1, S0
	0x03B62374 B.MI 0x3B623F0
	0x03B62378 ADRP X21, 0x591000
	0x03B6237C LDR V9, [X20 + 0x300]
	0x03B62380 LDR X21, [X21 + 0x598]
	0x03B62384 MOV X0, X31
	0x03B62388 BL 0x3C3C714
	0x03B6238C LDR X0, [X21]
	0x03B62390 LDR X21, [X20 + 0x308]
	0x03B62394 FMUL S9, S9, S0
	0x03B62398 LDR W8, [X0 + 0xE0]
	0x03B6239C CBNZ W8, 0x3B623A4
	0x03B623A0 BL 0x1C16DFC
	0x03B623A4 MOV X0, X21
	0x03B623A8 MOV X1, X31
	0x03B623AC MOV X2, X31
	0x03B623B0 FMUL S8, S9, S8
	0x03B623B4 BL 0x3C354F8
	0x03B623B8 TBZ X0, 0x0, 0x3B62400
	0x03B623BC LDR X0, [X20 + 0x308]
	0x03B623C0 CBZ X0, 0x3B62458
	0x03B623C4 MOV X1, X31
	0x03B623C8 BL 0x3C3F988
	0x03B623CC CBZ X19, 0x3B62458
	0x03B623D0 MOV X0, X19
	0x03B623D4 LDP X20, X19, [X31 + 0x20]
	0x03B623D8 LDP X30, X21, [X31 + 0x10]
	0x03B623DC MOV V3.16B, V8.16B
	0x03B623E0 MOV W1, W31
	0x03B623E4 MOV X2, X31
	0x03B623E8 LDP D9, D8, [X31], #0x30
	0x03B623EC B 0x3C40560
	0x03B623F0 LDP X20, X19, [X31 + 0x20]
	0x03B623F4 LDP X30, X21, [X31 + 0x10]
	0x03B623F8 LDP D9, D8, [X31], #0x30
	0x03B623FC RET
	0x03B62400 ADRP X20, 0x876000
	0x03B62404 LDRB W8, [X20 + 0x786]
	0x03B62408 CBNZ W8, 0x3B62420
	0x03B6240C ADRP X0, 0x591000
	0x03B62410 LDR X0, [X0 + 0x5A0]
	0x03B62414 BL 0x1C16CF4
	0x03B62418 MOVZ W8, 0x1
	0x03B6241C STRB W8, [X20 + 0x786]
	0x03B62420 CBZ X19, 0x3B62458
	0x03B62424 ADRP X8, 0x591000
	0x03B62428 LDR X8, [X8 + 0x5A0]
	0x03B6242C MOV X0, X19
	0x03B62430 LDP X20, X19, [X31 + 0x20]
	0x03B62434 LDP X30, X21, [X31 + 0x10]
	0x03B62438 LDR X8, [X8]
	0x03B6243C MOV V3.16B, V8.16B
	0x03B62440 MOV X1, X31
	0x03B62444 LDR X8, [X8 + 0xB8]

ISIL:
	001 Subtract X31, X31, 288
	002 Move [X31+192], D11
	003 Move [X31+200], D10
	004 Move [X31+208], D9
	005 Move [X31+216], D8
	006 Move [X31+224], X29
	007 Move [X31+232], X30
	008 Move [X31+240], X24
	009 Move [X31+248], X23
	010 Move [X31+256], X22
	011 Move [X31+264], X21
	012 Move [X31+272], X20
	013 Move [X31+280], X19
	014 Move X24, 0x881000
	015 Move W8, [X24+2470]
	016 Move X21, X4
	017 Move X19, X3
	018 Move W23, W2
	019 Move X22, X1
	020 Move X20, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {33}
	025 Move X0, 0x5F9000
	026 Move X0, [X0+2824]
	027 Call 0x1C17CF4
	028 Move X0, 0x5F9000
	029 Move X0, [X0+2832]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X24+2470], W8
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move [X31+168], W31
	035 Move [X31+160], X31
	036 Move [X31+152], W31
	037 Move [X31+144], X31
	038 Move [X31+136], W31
	039 Move [X31+128], X31
	040 Move [X31+120], W31
	041 Move [X31+112], X31
	042 Move [X31+104], W31
	043 Move [X31+96], X31
	044 Move [X31+92], W31
	045 Compare X22, 0
	046 JumpIfEqual {219}
	047 Move W8, [X22+24]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Compare X22, 0
	050 JumpIfEqual {219}
	051 Move W8, [X22+24]
	052 Subtract W23, W8, 1
	053 Move X24, 0x5F9000
	054 Move X24, [X24+2832]
	055 Move X0, X22
	056 Move W1, W23
	057 Move X2, [X24]
	058 Call List`1<SamplePoint>.get_Item, X0, X1
	059 Move X2, [X24]
	060 Move X0, X22
	061 Move W1, W31
	062 Move [X31], D0
	063 Move [X31+16], D1
	064 Move V8, V2
	065 Move V9, V3
	066 Call List`1<SamplePoint>.get_Item, X0, X1
	067 Move [X31+176], S0
	068 Move [X31+184], S1
	069 Move [X31+184], S2
	070 Move W8, [X20+656]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move V16, [X31]
	073 Move V17, [X31+16]
	074 Move V4, V0
	075 Move V4.S[1], V1.S[0]
	076 Add S5, S8, S2
	077 Move V3, V16
	078 Move V3.S[1], V17.S[0]
	079 NotImplemented "Instruction MOVI not yet implemented."
	080 Move S7, 0.5
	081 Add V3, V3, V4
	082 NotImplemented "Instruction CMP not yet implemented."
	083 NotImplemented "Instruction INVALID not yet implemented."
	084 Multiply S10, S5, S7
	085 Compare W8, 0
	086 JumpIfNotEqual {204}
	087 Compare X19, 0
	088 JumpIfEqual {219}
	089 Move W8, [X19+24]
	090 Compare W8, 0
	091 JumpIfEqual {218}
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move [X19+32], S0
	094 Move [X19+40], S1
	095 Move [X19+40], S2
	096 Move V3, V17
	097 Move V4, V16
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move [X19+44], D11
	100 Move [X19+52], S10
	101 Move X9, [X20+952]
	102 Compare X9, 0
	103 JumpIfEqual {219}
	104 Move W8, [X9+24]
	105 Compare W8, 0
	106 JumpIfEqual {218}
	107 Compare X19, 0
	108 JumpIfEqual {219}
	109 Move W8, [X19+24]
	110 Compare W8, 0
	111 JumpIfEqual {218}
	112 Move V0, [X9+32]
	113 Move V1, [X9+40]
	114 Move [X19+32], D0
	115 Move [X19+40], S1
	116 Move X9, [X20+952]
	117 Compare X9, 0
	118 JumpIfEqual {219}
	119 Move W10, [X9+24]
	120 NotImplemented "Instruction CMP not yet implemented."
	121 NotImplemented "Instruction CMP not yet implemented."
	122 NotImplemented "Instruction LDUR not yet implemented."
	123 Move V1, [X9+52]
	124 Move [X19+44], D0
	125 Move [X19+52], S1
	126 Move X9, [X20+952]
	127 Compare X9, 0
	128 JumpIfEqual {219}
	129 Move W10, [X9+24]
	130 NotImplemented "Instruction CMP not yet implemented."
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move S3, [X9+60]
	133 Move S8, [X9+64]
	134 Move V4, [X9+56]
	135 NotImplemented "Instruction LDUR not yet implemented."
	136 Move V1, [X21]
	137 Add X1, X31, 32
	138 Add X2, X31, 160
	139 Add X3, X31, 144
	140 Move X0, X20
	141 Move [X31+44], V0
	142 Move [X31+2], V1
	143 Call XRRayInteractor.GetLineOriginAndDirection, X0, X1, X2, X3
	144 Move S0, [X31+160]
	145 Move S1, [X31+164]
	146 Move V2, [X31+168]
	147 Move X0, X31
	148 Call float3.op_Implicit, X0
	149 Move S3, [X31+144]
	150 Move S4, [X31+148]
	151 Move V5, [X31+152]
	152 Move [X31+80], S0
	153 Move [X31+88], S1
	154 Move [X31+88], S2
	155 Move V0, V3
	156 Move V1, V4
	157 Move V2, V5
	158 Move X0, X31
	159 Call float3.op_Implicit, X0
	160 Add X1, X31, 80
	161 Add X2, X31, 64
	162 Add X3, X31, 128
	163 Add X4, X31, 112
	164 Add X5, X31, 92
	165 Move X0, X20
	166 Move [X31+64], S0
	167 Move [X31+72], S1
	168 Move [X31+72], S2
	169 Call XRRayInteractor.CalculateProjectileParameters, X0, X1, X2, X3, X4, X5
	170 Move S0, 0.5
	171 Multiply S0, S9, S0
	172 Add X0, X31, 176
	173 Add X1, X31, 128
	174 Add X2, X31, 112
	175 Add X3, X31, 96
	176 Move X4, X31
	177 Call CurveUtility.SampleProjectilePoint, X0, X1, X2, V0, X3
	178 Compare X19, 0
	179 JumpIfEqual {219}
	180 Move W8, [X19+24]
	181 Compare W8, 0
	182 JumpIfEqual {218}
	183 Move V3, [X31+184]
	184 Move V0, [X31+96]
	185 Move V2, [X31+176]
	186 Move V1, [X31+104]
	187 Move [X19+40], S3
	188 Move V4, [X31]
	189 Move V3, [X31+16]
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Move [X19+32], D2
	192 Subtract V0, V0, V11
	193 Subtract S1, S1, S10
	194 Add V0, V0, V0
	195 Add S1, S1, S1
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Add V0, V11, V0
	198 Add S1, S10, S1
	199 Move [X19+44], D0
	200 Move [X19+52], S1
	201 Move [X19+56], S4
	202 Move [X19+64], S3
	203 Move [X19+64], S8
	204 Move X20, [X31+272]
	205 Move X19, [X31+280]
	206 Move X22, [X31+256]
	207 Move X21, [X31+264]
	208 Move X24, [X31+240]
	209 Move X23, [X31+248]
	210 Move X29, [X31+224]
	211 Move X30, [X31+232]
	212 Move D9, [X31+208]
	213 Move D8, [X31+216]
	214 Move D11, [X31+192]
	215 Move D10, [X31+200]
	216 Add X31, X31, 288
	217 Return 
	218 Call 0x1C17F28
	219 Call 0x1C17F20

Method: System.Boolean get_isSelectActive()

Disassembly:
	0x03B654B4 LDR V1, [X0 + 0x1E0]
	0x03B654B8 LDR V2, [X0 + 0x1E4]
	0x03B654BC MOV X0, X31
	0x03B654C0 BL 0x3887BE4
	0x03B654C4 STP S0, S1, [X20 + 0x1C]
	0x03B654C8 STR S2, [X20 + 0x24]
	0x03B654CC LDR V0, [X19 + 0x1E8]

ISIL:
	001 Move W8, [X0+749]
	002 Compare W8, 0
	003 JumpIfEqual {9}
	004 Move W8, [X0+876]
	005 Compare W8, 0
	006 JumpIfEqual {9}
	007 Move W0, [X0+153]
	008 Return X0
	009 Call XRBaseControllerInteractor.get_isSelectActive, X0
	010 Return X0

Method: System.Boolean get_isUISelectActive()

Disassembly:
	0x03B654D0 LDR V1, [X19 + 0x1EC]
	0x03B654D4 LDR V2, [X19 + 0x1F0]
	0x03B654D8 LDR X20, [X19 + 0x220]
	0x03B654DC MOV X0, X31
	0x03B654E0 BL 0x3887BE4
	0x03B654E4 CBZ X20, 0x3B654FC
	0x03B654E8 STP S0, S1, [X20 + 0x28]

ISIL:
	001 Move W8, [X0+749]
	002 Compare W8, 0
	003 JumpIfEqual {9}
	004 Move W8, [X0+900]
	005 Compare W8, 0
	006 JumpIfEqual {9}
	007 Move W0, [X0+153]
	008 Return X0
	009 Call XRBaseControllerInteractor.get_isUISelectActive, X0
	010 Return X0

Method: System.Boolean CanHover(UnityEngine.XR.Interaction.Toolkit.IXRHoverInteractable interactable)

Disassembly:
	0x03B654EC STR S2, [X20 + 0x30]
	0x03B654F0 LDP X20, X19, [X31 + 0x10]
	0x03B654F4 LDR X30, [X31], #0x20
	0x03B654F8 RET
	0x03B654FC BL 0x1C16F20
	0x03B65500 STP X30, X19, [X31 - 0x10]!
	0x03B65504 MOV X1, X31
	0x03B65508 MOV X19, X0
	0x03B6550C BL 0x3B4F248
	0x03B65510 LDR X8, [X19 + 0x208]
	0x03B65514 CBZ X8, 0x3B6554C
	0x03B65518 LDR X9, [X19 + 0x30]
	0x03B6551C MOV X0, X19
	0x03B65520 STR X9, [X8 + 0x20]
	0x03B65524 BL 0x3B65550
	0x03B65528 STR X0, [X19 + 0x218]
	0x03B6552C MOV X0, X19
	0x03B65530 BL 0x3B65488
	0x03B65534 LDR X8, [X19]
	0x03B65538 MOV X0, X19
	0x03B6553C LDR X2, [X8 + 0x758]
	0x03B65540 LDR X1, [X8 + 0x760]
	0x03B65544 LDP X30, X19, [X31], #0x10
	0x03B65548 BR X2
	0x03B6554C BL 0x1C16F20
	0x03B65550 STP X30, X21, [X31 - 0x20]!
	0x03B65554 STP X20, X19, [X31 + 0x10]
	0x03B65558 ADRP X20, 0x87D000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X19, X0
	006 Call XRBaseInteractor.get_hasSelection, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {18}
	011 Move X0, X19
	012 Move X1, X20
	013 Call XRBaseInteractor.IsSelecting, X0, X1
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {32}
	018 Move W8, [X19+1154]
	019 Compare W8, 0
	020 JumpIfEqual {31}
	021 Move X0, [X19+1144]
	022 Compare X0, 0
	023 JumpIfEqual {37}
	024 Move X1, X31
	025 Call XRBaseController.get_currentControllerState, X0
	026 Compare X0, 0
	027 JumpIfEqual {37}
	028 Move W8, [X0+28]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CSET not yet implemented."
	031 Move W0, 1
	032 Move W0, W31
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0
	037 Call 0x1C17F20

Method: System.Boolean CanSelect(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractable interactable)

Disassembly:
	0x03B6555C ADRP X21, 0x5F6000
	0x03B65560 LDRB W8, [X20 + 0x9B5]
	0x03B65564 LDR X21, [X21 + 0x368]
	0x03B65568 MOV X19, X0
	0x03B6556C TBNZ X8, 0x0, 0x3B65584
	0x03B65570 ADRP X0, 0x5F6000
	0x03B65574 LDR X0, [X0 + 0x368]
	0x03B65578 BL 0x1C16CF4
	0x03B6557C MOVZ W8, 0x1
	0x03B65580 STRB W8, [X20 + 0x9B5]
	0x03B65584 LDR X0, [X21]
	0x03B65588 BL 0x1C16F10
	0x03B6558C MOV X1, X31
	0x03B65590 MOV X20, X0
	0x03B65594 BL 0x33BDD8C
	0x03B65598 STR W31, [X20 + 0x10]
	0x03B6559C STR X19, [X20 + 0x20]
	0x03B655A0 MOV X0, X20
	0x03B655A4 LDP X20, X19, [X31 + 0x10]
	0x03B655A8 LDP X30, X21, [X31], #0x20
	0x03B655AC RET
	0x03B655B0 STP X30, X23, [X31 - 0x30]!
	0x03B655B4 STP X22, X21, [X31 + 0x10]
	0x03B655B8 STP X20, X19, [X31 + 0x20]
	0x03B655BC ADRP X20, 0x87D000
	0x03B655C0 ADRP X22, 0x5F5000
	0x03B655C4 ADRP X21, 0x5F6000
	0x03B655C8 LDRB W8, [X20 + 0x9B2]
	0x03B655CC LDR X22, [X22 + 0xDE8]
	0x03B655D0 LDR X21, [X21 + 0x370]
	0x03B655D4 MOV X19, X0
	0x03B655D8 TBNZ X8, 0x0, 0x3B65608
	0x03B655DC ADRP X0, 0x5F5000
	0x03B655E0 LDR X0, [X0 + 0xDE8]
	0x03B655E4 BL 0x1C16CF4
	0x03B655E8 ADRP X0, 0x5F6000
	0x03B655EC LDR X0, [X0 + 0x370]
	0x03B655F0 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+816]
	005 Move X19, X0
	006 Move X20, X1
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move W8, [X19+749]
	009 Compare W8, 0
	010 JumpIfEqual {17}
	011 Move W8, [X19+876]
	012 Compare W8, 0
	013 JumpIfEqual {17}
	014 Move X8, [X19+816]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move W0, W31
	017 Move X0, X19
	018 Call XRBaseInteractor.get_hasSelection, X0
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {45}
	023 Move X0, X19
	024 Move X1, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Call XRBaseInteractor.IsSelecting, X0, X1
	029 Return X0
	030 Move W8, [X19+756]
	031 Compare W8, 0
	032 JumpIfEqual {8}
	033 Move X0, X19
	034 Call XRBaseInteractor.get_hasSelection, X0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {8}
	039 Move W8, [X19+876]
	040 Compare W8, 0
	041 JumpIfEqual {8}
	042 Move W8, [X19+884]
	043 Compare W8, 0
	044 JumpIfNotEqual {16}
	045 Move W0, 1
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Return X0

Method: System.Single GetHoverTimeToSelect(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)

Disassembly:
	0x03B655F4 ADRP X0, 0x5F6000
	0x03B655F8 LDR X0, [X0 + 0x378]

ISIL:
	001 Move V0, [X0+752]
	002 Return V0

Method: System.Single GetTimeToAutoDeselect(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)

Disassembly:
	0x03B655FC BL 0x1C16CF4
	0x03B65600 MOVZ W8, 0x1

ISIL:
	001 Move V0, [X0+760]
	002 Return V0

Method: System.Void OnSelectEntering(UnityEngine.XR.Interaction.Toolkit.SelectEnterEventArgs args)

Disassembly:
	0x03B65604 STRB W8, [X20 + 0x9B2]
	0x03B65608 MOV X0, X19
	0x03B6560C MOV X1, X31
	0x03B65610 BL 0x3B52710
	0x03B65614 LDR X0, [X22]
	0x03B65618 LDR X20, [X19 + 0x208]
	0x03B6561C BL 0x1C16F10
	0x03B65620 LDR X2, [X21]
	0x03B65624 MOV X1, X19
	0x03B65628 MOV X3, X31
	0x03B6562C MOV X21, X0
	0x03B65630 BL 0x2A6B948
	0x03B65634 CBZ X20, 0x3B656C0
	0x03B65638 ADRP X23, 0x5F6000
	0x03B6563C LDR X23, [X23 + 0x378]
	0x03B65640 MOV X0, X20
	0x03B65644 MOV X1, X21
	0x03B65648 MOV X2, X31
	0x03B6564C BL 0x3B900F0
	0x03B65650 LDR X0, [X22]
	0x03B65654 LDR X20, [X19 + 0x208]
	0x03B65658 BL 0x1C16F10
	0x03B6565C LDR X2, [X23]
	0x03B65660 MOV X1, X19
	0x03B65664 MOV X3, X31
	0x03B65668 MOV X21, X0
	0x03B6566C BL 0x2A6B948
	0x03B65670 CBZ X20, 0x3B656C0
	0x03B65674 MOV X0, X20
	0x03B65678 MOV X1, X21
	0x03B6567C MOV X2, X31
	0x03B65680 BL 0x3B90250
	0x03B65684 LDR X8, [X19 + 0x220]
	0x03B65688 CBZ X8, 0x3B656C0
	0x03B6568C LDRB W9, [X19 + 0x1C0]
	0x03B65690 MOV X0, X19
	0x03B65694 STRB W9, [X8 + 0x10]
	0x03B65698 BL 0x3B65488
	0x03B6569C MOV X0, X19
	0x03B656A0 BL 0x3B656C4
	0x03B656A4 LDR X1, [X19 + 0x218]
	0x03B656A8 MOV X0, X19
	0x03B656AC LDP X20, X19, [X31 + 0x20]
	0x03B656B0 LDP X22, X21, [X31 + 0x10]
	0x03B656B4 MOV X2, X31
	0x03B656B8 LDP X30, X23, [X31], #0x30
	0x03B656BC B 0x3C366FC
	0x03B656C0 BL 0x1C16F20
	0x03B656C4 STR X30, [X31 - 0x20]!
	0x03B656C8 STP X20, X19, [X31 + 0x10]
	0x03B656CC ADRP X20, 0x87D000
	0x03B656D0 LDRB W8, [X20 + 0x9CA]
	0x03B656D4 MOV X19, X0
	0x03B656D8 TBNZ X8, 0x0, 0x3B656FC

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+56], X21
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 Move X21, 0x87E000
	007 Move W8, [X21+2471]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5F6000
	015 Move X0, [X0+2368]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2471], W8
	019 NotImplemented "Instruction MOVI not yet implemented."
	020 Move X0, X19
	021 Move X1, X20
	022 Move [X31+28], V0
	023 Move [X31], V0
	024 Move [X31+8], V0
	025 Call XRBaseControllerInteractor.OnSelectEntering, X0, X1
	026 Move W8, [X19+756]
	027 Compare W8, 0
	028 JumpIfEqual {36}
	029 Move W8, [X19+876]
	030 Compare W8, 0
	031 JumpIfEqual {36}
	032 Move X0, X31
	033 Call Time.get_time
	034 Move [X19+880], S0
	035 Move [X19+884], W31
	036 Move W8, [X19+767]
	037 Compare W8, 0
	038 JumpIfNotEqual {63}
	039 Move X0, X19
	040 Call XRBaseInteractor.get_interactablesSelected, X0
	041 Compare X0, 0
	042 JumpIfEqual {69}
	043 Move W8, [X0+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Add X1, X31, 0
	046 Add X2, X31, 44
	047 Move X0, X19
	048 Move [X31+44], W31
	049 Call XRRayInteractor.TryGetCurrent3DRaycastHit, X0, X1, X2
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {63}
	054 Move X19, [X19+80]
	055 Add X0, X31, 0
	056 Move X1, X31
	057 Call RaycastHit.get_point, X0
	058 Compare X19, 0
	059 JumpIfEqual {69}
	060 Move X0, X19
	061 Move X1, X31
	062 Call Transform.set_position, X0, X1
	063 Move X20, [X31+64]
	064 Move X19, [X31+72]
	065 Move X30, [X31+48]
	066 Move X21, [X31+56]
	067 Add X31, X31, 80
	068 Return 
	069 Call 0x1C17F20

Method: System.Void OnSelectExiting(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)

Disassembly:
	0x03B656DC ADRP X0, 0x5F5000
	0x03B656E0 LDR X0, [X0 + 0x788]
	0x03B656E4 BL 0x1C16CF4
	0x03B656E8 ADRP X0, 0x5F5000
	0x03B656EC LDR X0, [X0 + 0xE00]
	0x03B656F0 BL 0x1C16CF4
	0x03B656F4 MOVZ W8, 0x1
	0x03B656F8 STRB W8, [X20 + 0x9CA]
	0x03B656FC LDR X8, [X19 + 0x1F8]
	0x03B65700 CBZ X8, 0x3B6575C
	0x03B65704 LDP W2, W9, [X8 + 0x18]
	0x03B65708 ADD W9, W9, 0x1
	0x03B6570C CMP W2, 0x1
	0x03B65710 STP W31, W9, [X8 + 0x18]
	0x03B65714 B.LT 0x3B65728
	0x03B65718 LDR X0, [X8 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call XRBaseControllerInteractor.OnSelectExiting, X0, X1
	005 Move X0, X31
	006 Move [X19+876], W31
	007 Call Time.get_time
	008 Move X0, X19
	009 Move [X19+872], S0
	010 Move [X19+884], W31
	011 Call XRBaseInteractor.get_hasSelection, X0
	012 Move TEMP, X0
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfNotEqual {19}
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return 
	019 Move X0, X19
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]

Method: System.Void UnityEngine.XR.Interaction.Toolkit.UI.IUIHoverInteractor.OnUIHoverEntered(UnityEngine.XR.Interaction.Toolkit.UI.UIHoverEventArgs args)

Disassembly:
	0x03B65790 BL 0x1C16CF4
	0x03B65794 ADRP X0, 0x5F6000
	0x03B65798 LDR X0, [X0 + 0x378]
	0x03B6579C BL 0x1C16CF4

ISIL:
	001 Move X8, [X0]
	002 Move X3, [X8+2408]
	003 Move X2, [X8+2416]
	004 CallNoReturn X3

Method: System.Void UnityEngine.XR.Interaction.Toolkit.UI.IUIHoverInteractor.OnUIHoverExited(UnityEngine.XR.Interaction.Toolkit.UI.UIHoverEventArgs args)

Disassembly:
	0x03B657A0 MOVZ W8, 0x1
	0x03B657A4 STRB W8, [X20 + 0x9B3]
	0x03B657A8 MOV X0, X19
	0x03B657AC MOV X1, X31

ISIL:
	001 Move X8, [X0]
	002 Move X3, [X8+2424]
	003 Move X2, [X8+2432]
	004 CallNoReturn X3

Method: System.Void OnUIHoverEntered(UnityEngine.XR.Interaction.Toolkit.UI.UIHoverEventArgs args)

Disassembly:
	0x03B657B0 BL 0x3B52728
	0x03B657B4 LDR X8, [X19 + 0x220]
	0x03B657B8 CBZ X8, 0x3B65864
	0x03B657BC ADRP X22, 0x5F5000
	0x03B657C0 LDR X22, [X22 + 0xDE8]
	0x03B657C4 STRB W31, [X8 + 0x10]
	0x03B657C8 ADRP X21, 0x5F6000
	0x03B657CC LDR X20, [X19 + 0x208]
	0x03B657D0 LDR X0, [X22]
	0x03B657D4 LDR X21, [X21 + 0x370]
	0x03B657D8 BL 0x1C16F10
	0x03B657DC LDR X2, [X21]
	0x03B657E0 MOV X1, X19
	0x03B657E4 MOV X3, X31
	0x03B657E8 MOV X21, X0
	0x03B657EC BL 0x2A6B948
	0x03B657F0 CBZ X20, 0x3B65864
	0x03B657F4 ADRP X23, 0x5F6000
	0x03B657F8 LDR X23, [X23 + 0x378]
	0x03B657FC MOV X0, X20
	0x03B65800 MOV X1, X21
	0x03B65804 MOV X2, X31
	0x03B65808 BL 0x3B901A0
	0x03B6580C LDR X0, [X22]
	0x03B65810 LDR X20, [X19 + 0x208]
	0x03B65814 BL 0x1C16F10
	0x03B65818 LDR X2, [X23]
	0x03B6581C MOV X1, X19
	0x03B65820 MOV X3, X31
	0x03B65824 MOV X21, X0
	0x03B65828 BL 0x2A6B948
	0x03B6582C CBZ X20, 0x3B65864
	0x03B65830 MOV X0, X20
	0x03B65834 MOV X1, X21
	0x03B65838 MOV X2, X31
	0x03B6583C BL 0x3B90300
	0x03B65840 MOV X0, X19
	0x03B65844 BL 0x3B656C4
	0x03B65848 LDR X1, [X19 + 0x218]
	0x03B6584C MOV X0, X19
	0x03B65850 LDP X20, X19, [X31 + 0x20]
	0x03B65854 LDP X22, X21, [X31 + 0x10]
	0x03B65858 MOV X2, X31
	0x03B6585C LDP X30, X23, [X31], #0x30
	0x03B65860 B 0x3C36834
	0x03B65864 BL 0x1C16F20
	0x03B65868 STR X30, [X31 - 0x10]!
	0x03B6586C LDR X0, [X0 + 0x208]
	0x03B65870 CBZ X0, 0x3B65880
	0x03B65874 MOV X2, X31
	0x03B65878 LDR X30, [X31], #0x10
	0x03B6587C B 0x3B903C0
	0x03B65880 BL 0x1C16F20
	0x03B65884 STP X30, X21, [X31 - 0x20]!
	0x03B65888 STP X20, X19, [X31 + 0x10]
	0x03B6588C ADRP X21, 0x87D000
	0x03B65890 LDRB W8, [X21 + 0x9B4]
	0x03B65894 MOV X19, X1
	0x03B65898 MOV X20, X0
	0x03B6589C TBNZ X8, 0x0, 0x3B658B4
	0x03B658A0 ADRP X0, 0x5F5000
	0x03B658A4 LDR X0, [X0 + 0x780]
	0x03B658A8 BL 0x1C16CF4
	0x03B658AC MOVZ W8, 0x1
	0x03B658B0 STRB W8, [X21 + 0x9B4]
	0x03B658B4 LDR X0, [X20 + 0x200]
	0x03B658B8 CBZ X0, 0x3B658D8
	0x03B658BC ADRP X8, 0x5F5000
	0x03B658C0 LDR X8, [X8 + 0x780]
	0x03B658C4 MOV X1, X19
	0x03B658C8 LDP X20, X19, [X31 + 0x10]
	0x03B658CC LDR X2, [X8]
	0x03B658D0 LDP X30, X21, [X31], #0x20
	0x03B658D4 B 0x2DBEF30
	0x03B658D8 BL 0x1C16F20
	0x03B658DC STR X30, [X31 - 0x10]!
	0x03B658E0 LDR X0, [X0 + 0x208]
	0x03B658E4 CBZ X0, 0x3B658F4
	0x03B658E8 MOV X2, X31
	0x03B658EC LDR X30, [X31], #0x10
	0x03B658F0 B 0x3B904F8
	0x03B658F4 BL 0x1C16F20
	0x03B658F8 STR X30, [X31 - 0x20]!
	0x03B658FC STP X20, X19, [X31 + 0x10]
	0x03B65900 MOV W19, W1
	0x03B65904 MOV X1, X31
	0x03B65908 MOV X20, X0
	0x03B6590C BL 0x33BDD8C
	0x03B65910 STR W19, [X20 + 0x10]
	0x03B65914 LDP X20, X19, [X31 + 0x10]
	0x03B65918 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x87E000
	008 Move W8, [X21+2472]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x5F7000
	016 Move X0, [X0+864]
	017 Call 0x1C17CF4
	018 Move X0, 0x58F000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move X0, 0x5F7000
	022 Move X0, [X0+600]
	023 Call 0x1C17CF4
	024 Move X0, 0x5F7000
	025 Move X0, [X0+608]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+2472], W8
	029 Compare X19, 0
	030 JumpIfEqual {116}
	031 Move X8, 0x5F7000
	032 Move X8, [X8+600]
	033 Move X23, 0x58F000
	034 Move X21, [X19+352]
	035 Move X0, [X8]
	036 Move W8, [X0+224]
	037 Move X23, [X23+1432]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, [X23]
	042 Move X22, [X20+888]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X22
	048 Move X1, X21
	049 Move X2, X31
	050 Call Object.op_Inequality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {94}
	055 Move [X20+888], X21
	056 Move X0, [X23]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move X0, X21
	062 Move X1, X31
	063 Move X2, X31
	064 Call Object.op_Inequality, X0, X1
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {91}
	069 Move X0, X31
	070 Call Time.get_time
	071 Move X0, [X20+888]
	072 Move [X20+896], S0
	073 Compare X0, 0
	074 JumpIfEqual {116}
	075 Move X8, 0x5F7000
	076 Move X8, [X8+864]
	077 Move X1, [X8]
	078 Call 0x21E62E4, X0
	079 Move X8, [X23]
	080 Move X21, X0
	081 Move W9, [X8+224]
	082 Compare W9, 0
	083 JumpIfNotEqual {86}
	084 Move X0, X8
	085 Call 0x1C17DFC
	086 Move X0, X21
	087 Move X1, X31
	088 Move X2, X31
	089 Call Object.op_Inequality, X0, X1
	090 And W8, W0, 1
	091 Move W8, W31
	092 Move [X20+901], W8
	093 Move [X20+900], W31
	094 Move X0, [X20+792]
	095 Compare X0, 0
	096 JumpIfEqual {109}
	097 Move X8, 0x5F7000
	098 Move X8, [X8+608]
	099 Move X1, X19
	100 Move X20, [X31+32]
	101 Move X19, [X31+40]
	102 Move X22, [X31+16]
	103 Move X21, [X31+24]
	104 Move X2, [X8]
	105 Move X30, [X31+48]
	106 Move X23, [X31+56]
	107 Call UnityEvent`1<Object>.Invoke, X0, X1
	108 Return 
	109 Move X20, [X31+32]
	110 Move X19, [X31+40]
	111 Move X22, [X31+16]
	112 Move X21, [X31+24]
	113 Move X30, [X31+48]
	114 Move X23, [X31+56]
	115 Return 
	116 Call 0x1C17F20

Method: System.Void OnUIHoverExited(UnityEngine.XR.Interaction.Toolkit.UI.UIHoverEventArgs args)

Disassembly:
	0x03B6591C RET
	0x03B65920 STP X30, X21, [X31 - 0x20]!
	0x03B65924 STP X20, X19, [X31 + 0x10]
	0x03B65928 ADRP X21, 0x87D000
	0x03B6592C LDRB W8, [X21 + 0x9B6]
	0x03B65930 MOV W20, W1
	0x03B65934 MOV X19, X0
	0x03B65938 TBNZ X8, 0x0, 0x3B65950
	0x03B6593C ADRP X0, 0x5F5000
	0x03B65940 LDR X0, [X0 + 0x788]
	0x03B65944 BL 0x1C16CF4
	0x03B65948 MOVZ W8, 0x1
	0x03B6594C STRB W8, [X21 + 0x9B6]
	0x03B65950 MOV X0, X19
	0x03B65954 MOV W1, W20
	0x03B65958 MOV X2, X31
	0x03B6595C BL 0x3B4F6C0
	0x03B65960 CMP W20, 0x1
	0x03B65964 B.EQ 0x3B6598C
	0x03B65968 CBNZ W20, 0x3B659CC
	0x03B6596C LDR X0, [X19 + 0x200]
	0x03B65970 CBZ X0, 0x3B659D8
	0x03B65974 ADRP X8, 0x5F5000
	0x03B65978 LDR X8, [X8 + 0x788]
	0x03B6597C LDP X20, X19, [X31 + 0x10]
	0x03B65980 LDR X1, [X8]
	0x03B65984 LDP X30, X21, [X31], #0x20
	0x03B65988 B 0x2DBE450
	0x03B6598C LDRB W8, [X19 + 0x1A8]
	0x03B65990 CBZ W8, 0x3B659CC
	0x03B65994 MOV X0, X19
	0x03B65998 MOV X1, X31
	0x03B6599C BL 0x3B4B11C
	0x03B659A0 TBZ X0, 0x0, 0x3B659CC
	0x03B659A4 MOV X0, X19
	0x03B659A8 BL 0x3B659DC
	0x03B659AC TBZ X0, 0x0, 0x3B659CC
	0x03B659B0 LDR X8, [X19]
	0x03B659B4 MOV X0, X19
	0x03B659B8 LDP X20, X19, [X31 + 0x10]
	0x03B659BC LDR X2, [X8 + 0x778]
	0x03B659C0 LDR X1, [X8 + 0x780]
	0x03B659C4 LDP X30, X21, [X31], #0x20
	0x03B659C8 BR X2
	0x03B659CC LDP X20, X19, [X31 + 0x10]
	0x03B659D0 LDP X30, X21, [X31], #0x20
	0x03B659D4 RET
	0x03B659D8 BL 0x1C16F20
	0x03B659DC STP X30, X19, [X31 - 0x10]!
	0x03B659E0 LDRB W8, [X0 + 0x1D0]
	0x03B659E4 CBNZ W8, 0x3B65A24
	0x03B659E8 LDR V0, [X0 + 0x1CC]
	0x03B659EC MOV X19, X0
	0x03B659F0 FCMP S0, 0x0
	0x03B659F4 B.MI 0x3B65A24
	0x03B659F8 LDR V0, [X19 + 0x1C8]
	0x03B659FC FCMP S0, 0x0
	0x03B65A00 B.LS 0x3B65A24
	0x03B65A04 MOV X0, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x87E000
	007 Move W8, [X21+2473]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x58F000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move X0, 0x5F7000
	018 Move X0, [X0+600]
	019 Call 0x1C17CF4
	020 Move X0, 0x5F7000
	021 Move X0, [X0+608]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2473], W8
	025 Compare X19, 0
	026 JumpIfEqual {76}
	027 Move X8, 0x5F7000
	028 Move X8, [X8+600]
	029 Move X22, 0x58F000
	030 Move X21, [X19+352]
	031 Move X0, [X8]
	032 Move W8, [X0+224]
	033 Move X22, [X22+1432]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X22, [X20+888]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X22
	044 Move X1, X21
	045 Move X2, X31
	046 Call Object.op_Inequality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {56}
	051 Move X0, X31
	052 Move [X20+888], X31
	053 Call Time.get_time
	054 Move [X20+896], S0
	055 NotImplemented "Instruction STRH not yet implemented."
	056 Move X0, [X20+800]
	057 Compare X0, 0
	058 JumpIfEqual {70}
	059 Move X8, 0x5F7000
	060 Move X8, [X8+608]
	061 Move X1, X19
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X2, [X8]
	067 Move X30, [X31+48]
	068 Call UnityEvent`1<Object>.Invoke, X0, X1
	069 Return 
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Return 
	076 Call 0x1C17F20

Method: System.Void RestoreAttachTransform()

Disassembly:
	0x03B6571C MOV W1, W31
	0x03B65720 MOV X3, X31
	0x03B65724 BL 0x339FA34
	0x03B65728 LDR X0, [X19 + 0x200]
	0x03B6572C CBZ X0, 0x3B6575C
	0x03B65730 ADRP X8, 0x5F5000
	0x03B65734 LDR X8, [X8 + 0x788]
	0x03B65738 LDR X1, [X8]
	0x03B6573C BL 0x2DBE450
	0x03B65740 LDR X0, [X19 + 0x208]
	0x03B65744 CBZ X0, 0x3B6575C
	0x03B65748 LDR X1, [X19 + 0x200]
	0x03B6574C LDP X20, X19, [X31 + 0x10]
	0x03B65750 MOV X2, X31
	0x03B65754 LDR X30, [X31], #0x20
	0x03B65758 B 0x3B90FF0
	0x03B6575C BL 0x1C16F20
	0x03B65760 STP X30, X23, [X31 - 0x30]!
	0x03B65764 STP X22, X21, [X31 + 0x10]
	0x03B65768 STP X20, X19, [X31 + 0x20]
	0x03B6576C ADRP X20, 0x87D000
	0x03B65770 LDRB W8, [X20 + 0x9B3]
	0x03B65774 MOV X19, X0
	0x03B65778 TBNZ X8, 0x0, 0x3B657A8
	0x03B6577C ADRP X0, 0x5F5000
	0x03B65780 LDR X0, [X0 + 0xDE8]
	0x03B65784 BL 0x1C16CF4
	0x03B65788 ADRP X0, 0x5F6000
	0x03B6578C LDR X0, [X0 + 0x370]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], D11
	003 Move [X31+40], D10
	004 Move [X31+48], D9
	005 Move [X31+56], D8
	006 Move [X31+64], X30
	007 Move [X31+72], X19
	008 Move X1, [X0+176]
	009 Add X8, X31, 0
	010 Move X19, X0
	011 Call XRBaseInteractor.GetLocalAttachPoseOnSelect, X0, X1
	012 Move X0, [X19+80]
	013 Compare X0, 0
	014 JumpIfEqual {41}
	015 Move S0, [X31]
	016 Move S1, [X31+4]
	017 Move S2, [X31+8]
	018 Move S8, [X31+12]
	019 Move S9, [X31+16]
	020 Move S10, [X31+20]
	021 Move V11, [X31+24]
	022 Move X1, X31
	023 Call Transform.set_localPosition, X0, X1
	024 Move X0, [X19+80]
	025 Compare X0, 0
	026 JumpIfEqual {41}
	027 Move V0, V8
	028 Move V1, V9
	029 Move V2, V10
	030 Move V3, V11
	031 Move X30, [X31+64]
	032 Move X19, [X31+72]
	033 Move D9, [X31+48]
	034 Move D8, [X31+56]
	035 Move D11, [X31+32]
	036 Move D10, [X31+40]
	037 Move X1, X31
	038 Add X31, X31, 80
	039 Call Transform.set_localRotation, X0, X1
	040 Return 
	041 Call 0x1C17F20

Method: System.Int32 SanitizeSampleFrequency(System.Int32 value)

Disassembly:
	0x03B5FF54 MOV X1, X31
	0x03B5FF58 LDR X30, [X31], #0x20
	0x03B5FF5C B 0x3B99BF8
	0x03B5FF60 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move W8, 2
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 Return X0

Method: System.Single get_Velocity()

Disassembly:
	0x03B65A08 BL 0x3C3C6C4
	0x03B65A0C LDR V1, [X19 + 0x1CC]

ISIL:
	001 Move V0, [X0+688]
	002 Return V0

Method: System.Void set_Velocity(System.Single value)

Disassembly:
	0x03B65A10 LDR V2, [X19 + 0x1C8]
	0x03B65A14 FADD S1, S1, S2

ISIL:
	001 Move [X0+688], S0
	002 Return 

Method: System.Single get_Acceleration()

Disassembly:
	0x03B65A18 FCMP S0, S1
	0x03B65A1C CSET W0, GT

ISIL:
	001 Move V0, [X0+692]
	002 Return V0

Method: System.Void set_Acceleration(System.Single value)

Disassembly:
	0x03B65A20 B 0x3B65A28
	0x03B65A24 MOVZ W0, 0x1

ISIL:
	001 Move [X0+692], S0
	002 Return 

Method: System.Single get_AdditionalFlightTime()

Disassembly:
	0x03B65A28 LDP X30, X19, [X31], #0x10
	0x03B65A2C RET

ISIL:
	001 Move V0, [X0+700]
	002 Return V0

Method: System.Void set_AdditionalFlightTime(System.Single value)

Disassembly:
	0x03B65A30 STP X30, X23, [X31 - 0x30]!
	0x03B65A34 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X0+700], S0
	002 Return 

Method: System.Single get_Angle()

Disassembly:
	0x03B65A38 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Call XRRayInteractor.get_angle, X0
	002 Return V0

Method: UnityEngine.Transform get_originalAttachTransform()

Disassembly:
	0x03B65A3C ADRP X20, 0x87D000
	0x03B65A40 ADRP X22, 0x58E000

ISIL:
	001 Move X0, [X0+672]
	002 Return X0

Method: System.Void set_originalAttachTransform(UnityEngine.Transform value)

Disassembly:
	0x03B65A44 LDRB W8, [X20 + 0x9B7]

ISIL:
	001 Call XRRayInteractor.set_rayOriginTransform, X0, X1
	002 Return 

Method: System.Boolean GetLinePoints(ref UnityEngine.Vector3[] linePoints, ref System.Int32 numPoints, System.Int32 _ = 0)

Disassembly:
	0x03B65A48 LDR X22, [X22 + 0x598]

ISIL:
	001 Call XRRayInteractor.GetLinePoints, X0, X1, X2
	002 Return X0

Method: System.Boolean TryGetHitInfo(ref UnityEngine.Vector3 position, ref UnityEngine.Vector3 normal, ref System.Int32 positionInLine, ref System.Boolean isValidTarget, System.Int32 _ = 0)

Disassembly:
	0x03B65A4C MOV X19, X0

ISIL:
	001 Call XRRayInteractor.TryGetHitInfo, X0, X1, X2, X3, X4
	002 Return X0

Method: System.Boolean GetCurrentRaycastHit(out UnityEngine.RaycastHit raycastHit)

Disassembly:
	0x03B65A50 TBNZ X8, 0x0, 0x3B65ABC
	0x03B65A54 ADRP X0, 0x58E000
	0x03B65A58 LDR X0, [X0 + 0xA28]
	0x03B65A5C BL 0x1C16CF4
	0x03B65A60 ADRP X0, 0x592000
	0x03B65A64 LDR X0, [X0 + 0xCA0]
	0x03B65A68 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Add X2, X31, 12
	003 Move [X31+12], W31
	004 Call XRRayInteractor.TryGetCurrent3DRaycastHit, X0, X1, X2
	005 And W0, W0, 1
	006 Move X30, [X31+16]
	007 Return X0

Method: System.Boolean CanHover(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)

Disassembly:
	0x03B65A6C ADRP X0, 0x58E000
	0x03B65A70 LDR X0, [X0 + 0x598]
	0x03B65A74 BL 0x1C16CF4
	0x03B65A78 ADRP X0, 0x5F5000

ISIL:
	001 Move X8, [X0]
	002 Move X3, [X8+1336]
	003 Move X2, [X8+1344]
	004 CallNoReturn X3

Method: System.Boolean CanSelect(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)

Disassembly:
	0x03B65A7C LDR X0, [X0 + 0x7C8]
	0x03B65A80 BL 0x1C16CF4
	0x03B65A84 ADRP X0, 0x5F6000
	0x03B65A88 LDR X0, [X0 + 0x380]

ISIL:
	001 Move X8, [X0]
	002 Move X3, [X8+1352]
	003 Move X2, [X8+1360]
	004 CallNoReturn X3

Method: System.Void .ctor()

Disassembly:
	0x03B57E80 ADD X10, X10, 0x10
	0x03B57E84 B.NE 0x3B57E70
	0x03B57E88 MOV X0, X20
	0x03B57E8C MOV W2, W31
	0x03B57E90 BL 0x1C5C788
	0x03B57E94 B 0x3B57EA4
	0x03B57E98 LDRSW X9, [X10]
	0x03B57E9C ADD X8, X8, X9, 0x4, LSL
	0x03B57EA0 ADD X0, X8, 0x138
	0x03B57EA4 LDP X8, X1, [X0]
	0x03B57EA8 MOV X0, X20
	0x03B57EAC BLR X8
	0x03B57EB0 CBZ X0, 0x3B57EC4
	0x03B57EB4 LDP X20, X19, [X31 + 0x20]
	0x03B57EB8 LDP X22, X21, [X31 + 0x10]
	0x03B57EBC LDR X30, [X31], #0x30
	0x03B57EC0 RET
	0x03B57EC4 MOV X0, X19
	0x03B57EC8 MOV X1, X20
	0x03B57ECC LDP X20, X19, [X31 + 0x20]
	0x03B57ED0 LDP X22, X21, [X31 + 0x10]
	0x03B57ED4 LDR X30, [X31], #0x30
	0x03B57ED8 B 0x3B58FF8
	0x03B57EDC ADRP X0, 0x5A1000
	0x03B57EE0 LDR X0, [X0 + 0x528]
	0x03B57EE4 BL 0x1C16D08
	0x03B57EE8 BL 0x1C16F10
	0x03B57EEC MOV X19, X0
	0x03B57EF0 ADRP X0, 0x603000
	0x03B57EF4 LDR X0, [X0 + 0xF50]
	0x03B57EF8 BL 0x1C16D08
	0x03B57EFC MOV X1, X0
	0x03B57F00 MOV X0, X19
	0x03B57F04 MOV X2, X31
	0x03B57F08 BL 0x330E100
	0x03B57F0C ADRP X0, 0x603000
	0x03B57F10 LDR X0, [X0 + 0xF58]
	0x03B57F14 BL 0x1C16D08
	0x03B57F18 MOV X1, X0
	0x03B57F1C MOV X0, X19
	0x03B57F20 BL 0x1C16DEC
	0x03B57F24 BL 0x1C16F20
	0x03B57F28 STP X30, X21, [X31 - 0x20]!
	0x03B57F2C STP X20, X19, [X31 + 0x10]
	0x03B57F30 ADRP X21, 0x88B000
	0x03B57F34 LDRB W8, [X21 + 0x953]
	0x03B57F38 MOV X19, X1
	0x03B57F3C MOV X20, X0
	0x03B57F40 TBNZ X8, 0x0, 0x3B57F64
	0x03B57F44 ADRP X0, 0x59C000
	0x03B57F48 LDR X0, [X0 + 0xA28]
	0x03B57F4C BL 0x1C16CF4
	0x03B57F50 ADRP X0, 0x603000
	0x03B57F54 LDR X0, [X0 + 0xF60]
	0x03B57F58 BL 0x1C16CF4
	0x03B57F5C MOVZ W8, 0x1
	0x03B57F60 STRB W8, [X21 + 0x953]
	0x03B57F64 CBZ X19, 0x3B58018
	0x03B57F68 MOV X0, X20
	0x03B57F6C MOV X1, X19
	0x03B57F70 BL 0x3B594E8
	0x03B57F74 TBZ X0, 0x0, 0x3B5800C
	0x03B57F78 LDRB W8, [X20 + 0x90]
	0x03B57F7C CBZ W8, 0x3B57FDC
	0x03B57F80 MOV X0, X20
	0x03B57F84 MOV X1, X31
	0x03B57F88 BL 0x3C389D4
	0x03B57F8C ADRP X8, 0x603000
	0x03B57F90 LDR X8, [X8 + 0xF60]
	0x03B57F94 MOV X2, X0
	0x03B57F98 MOV X1, X19
	0x03B57F9C MOV X3, X31
	0x03B57FA0 LDR X8, [X8]
	0x03B57FA4 MOV X0, X8
	0x03B57FA8 BL 0x3227BD4
	0x03B57FAC ADRP X8, 0x59C000
	0x03B57FB0 LDR X8, [X8 + 0xA28]
	0x03B57FB4 MOV X21, X0
	0x03B57FB8 LDR X8, [X8]
	0x03B57FBC LDR W9, [X8 + 0xE0]
	0x03B57FC0 CBNZ W9, 0x3B57FCC
	0x03B57FC4 MOV X0, X8
	0x03B57FC8 BL 0x1C16DFC
	0x03B57FCC MOV X0, X21
	0x03B57FD0 MOV X1, X20
	0x03B57FD4 MOV X2, X31
	0x03B57FD8 BL 0x3C06B0C
	0x03B57FDC LDR X0, [X20 + 0x80]
	0x03B57FE0 CBZ X0, 0x3B58060
	0x03B57FE4 LDR X8, [X0]
	0x03B57FE8 MOV X1, X19
	0x03B57FEC LDP X9, X2, [X8 + 0x198]
	0x03B57FF0 BLR X9
	0x03B57FF4 TBZ X0, 0x0, 0x3B5800C
	0x03B57FF8 MOV X0, X20
	0x03B57FFC MOV X1, X19
	0x03B58000 LDP X20, X19, [X31 + 0x10]
	0x03B58004 LDP X30, X21, [X31], #0x20
	0x03B58008 B 0x3B58FF8
	0x03B5800C LDP X20, X19, [X31 + 0x10]
	0x03B58010 LDP X30, X21, [X31], #0x20
	0x03B58014 RET
	0x03B58018 ADRP X0, 0x5A0000
	0x03B5801C LDR X0, [X0 + 0x528]
	0x03B58020 BL 0x1C16D08
	0x03B58024 BL 0x1C16F10
	0x03B58028 MOV X19, X0
	0x03B5802C ADRP X0, 0x602000
	0x03B58030 LDR X0, [X0 + 0xF50]
	0x03B58034 BL 0x1C16D08
	0x03B58038 MOV X1, X0
	0x03B5803C MOV X0, X19
	0x03B58040 MOV X2, X31
	0x03B58044 BL 0x330E100
	0x03B58048 ADRP X0, 0x602000
	0x03B5804C LDR X0, [X0 + 0xF68]
	0x03B58050 BL 0x1C16D08
	0x03B58054 MOV X1, X0
	0x03B58058 MOV X0, X19
	0x03B5805C BL 0x1C16DEC
	0x03B58060 BL 0x1C16F20
	0x03B58064 STR X30, [X31 - 0x30]!
	0x03B58068 STP X22, X21, [X31 + 0x10]
	0x03B5806C STP X20, X19, [X31 + 0x20]
	0x03B58070 ADRP X22, 0x88A000
	0x03B58074 LDRB W8, [X22 + 0x95A]
	0x03B58078 MOV X20, X2
	0x03B5807C MOV X21, X1
	0x03B58080 MOV X19, X0
	0x03B58084 TBNZ X8, 0x0, 0x3B5815C
	0x03B58088 ADRP X0, 0x59B000
	0x03B5808C LDR X0, [X0 + 0xA28]

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X28, 0x88C000
	013 Move X20, 0x604000
	014 Move X27, 0x604000
	015 Move X26, 0x604000
	016 Move X25, 0x604000
	017 Move X24, 0x5A3000
	018 Move X23, 0x604000
	019 Move X22, 0x601000
	020 Move X21, 0x604000
	021 Move X20, [X20+3768]
	022 Move X27, [X27+3776]
	023 Move X26, [X26+3648]
	024 Move W8, [X28+2474]
	025 Move X25, [X25+3656]
	026 Move X24, [X24+1160]
	027 Move X23, [X23+3784]
	028 Move X22, [X22+48]
	029 Move X21, [X21+936]
	030 Move X19, X0
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {61}
	035 Move X0, 0x604000
	036 Move X0, [X0+3656]
	037 Call 0x1C17CF4
	038 Move X0, 0x604000
	039 Move X0, [X0+3648]
	040 Call 0x1C17CF4
	041 Move X0, 0x604000
	042 Move X0, [X0+3784]
	043 Call 0x1C17CF4
	044 Move X0, 0x5A3000
	045 Move X0, [X0+1160]
	046 Call 0x1C17CF4
	047 Move X0, 0x604000
	048 Move X0, [X0+3768]
	049 Call 0x1C17CF4
	050 Move X0, 0x604000
	051 Move X0, [X0+3776]
	052 Call 0x1C17CF4
	053 Move X0, 0x604000
	054 Move X0, [X0+936]
	055 Call 0x1C17CF4
	056 Move X0, 0x601000
	057 Move X0, [X0+48]
	058 Call 0x1C17CF4
	059 Move W8, 1
	060 Move [X28+2474], W8
	061 Move X10, -50774016
	062 Move X11, -50774016
	063 Move X13, -50761728
	064 Move V0, [X10+249]
	065 Move V1, [X11+163]
	066 Move V2, [X13+1368]
	067 Move W8, 1
	068 Move W9, 0x41F00000
	069 Move W12, 20
	070 Move TEMP, 0
	071 Not TEMP
	072 Move W0, TEMP
	073 Move X1, X31
	074 Move [X19+660], W8
	075 Move [X19+664], W9
	076 Move [X19+720], W12
	077 Move [X19+688], V0
	078 Move [X19+696], V1
	079 Move [X19+728], D2
	080 Move TEMP, 0
	081 Not TEMP
	082 Move W28, TEMP
	083 Call LayerMask.op_Implicit, X0
	084 Add X8, X19, 740
	085 NotImplemented "Instruction MOVI not yet implemented."
	086 Move X10, -50761728
	087 Move [X19+736], W0
	088 Move [X8], D0
	089 Move V0, [X10+3456]
	090 Move X8, 0x40400000
	091 NotImplemented "Instruction MOVK not yet implemented."
	092 Move W9, 0x3F000000
	093 NotImplemented "Instruction MOVK not yet implemented."
	094 Move [X19+752], W9
	095 Move [X19+760], X8
	096 Move [X19+768], D0
	097 Move X0, [X20]
	098 Call 0x1C17F10
	099 Move X1, X31
	100 Move X20, X0
	101 Call UIHoverEnterEvent..ctor, X0
	102 Move [X19+792], X20
	103 Move X0, [X27]
	104 Call 0x1C17F10
	105 Move X1, X31
	106 Move X20, X0
	107 Call UIHoverExitEvent..ctor, X0
	108 Move [X19+800], X20
	109 Move X0, [X26]
	110 Call 0x1C17F10
	111 Move X1, [X25]
	112 Move X20, X0
	113 Call List`1<Object>..ctor, X0
	114 Move [X19+864], X20
	115 Move X0, [X24]
	116 Move W1, 10
	117 Call 0x1C17D6C
	118 Move [X19+904], X0
	119 Move X0, [X23]
	120 Call 0x1C17F10
	121 Move X1, X31
	122 Move X20, X0
	123 Call RaycastHitComparer..ctor, X0
	124 Move [X19+920], X20
	125 Move [X19+936], W28
	126 Move X0, [X22]
	127 Move W1, 3
	128 Call 0x1C17D6C
	129 Move [X19+952], X0
	130 Move X0, [X22]
	131 Move W1, 3
	132 Call 0x1C17D6C
	133 Move [X19+960], X0
	134 Move X0, [X21]
	135 Move W8, [X0+224]
	136 Compare W8, 0
	137 JumpIfNotEqual {139}
	138 Call 0x1C17DFC
	139 Move X0, X19
	140 Move X20, [X31+80]
	141 Move X19, [X31+88]
	142 Move X22, [X31+64]
	143 Move X21, [X31+72]
	144 Move X24, [X31+48]
	145 Move X23, [X31+56]
	146 Move X26, [X31+32]
	147 Move X25, [X31+40]
	148 Move X28, [X31+16]
	149 Move X27, [X31+24]
	150 Move X30, [X31+96]
	151 Call XRBaseControllerInteractor..ctor, X0
	152 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B65A8C BL 0x1C16CF4
	0x03B65A90 ADRP X0, 0x5F6000
	0x03B65A94 LDR X0, [X0 + 0x388]
	0x03B65A98 BL 0x1C16CF4
	0x03B65A9C ADRP X0, 0x5F6000
	0x03B65AA0 LDR X0, [X0 + 0x390]
	0x03B65AA4 BL 0x1C16CF4
	0x03B65AA8 ADRP X0, 0x5F1000
	0x03B65AAC LDR X0, [X0 + 0xE98]
	0x03B65AB0 BL 0x1C16CF4
	0x03B65AB4 MOVZ W8, 0x1
	0x03B65AB8 STRB W8, [X20 + 0x9B7]
	0x03B65ABC LDR X0, [X22]
	0x03B65AC0 LDR X20, [X19 + 0x1B0]
	0x03B65AC4 LDR W8, [X0 + 0xE0]
	0x03B65AC8 CBNZ W8, 0x3B65AD0
	0x03B65ACC BL 0x1C16DFC
	0x03B65AD0 MOV X0, X20
	0x03B65AD4 MOV X1, X31
	0x03B65AD8 MOV X2, X31
	0x03B65ADC BL 0x3C354F8
	0x03B65AE0 TBZ X0, 0x0, 0x3B65B0C
	0x03B65AE4 LDR X0, [X22]
	0x03B65AE8 LDR X20, [X19 + 0x1B8]
	0x03B65AEC LDR W8, [X0 + 0xE0]
	0x03B65AF0 CBNZ W8, 0x3B65AF8
	0x03B65AF4 BL 0x1C16DFC
	0x03B65AF8 MOV X0, X20
	0x03B65AFC MOV X1, X31
	0x03B65B00 MOV X2, X31
	0x03B65B04 BL 0x3C354F8
	0x03B65B08 TBNZ X0, 0x0, 0x3B65CF4
	0x03B65B0C ADRP X21, 0x5F1000
	0x03B65B10 ADRP X23, 0x5F6000
	0x03B65B14 LDR X21, [X21 + 0xE98]
	0x03B65B18 LDR X23, [X23 + 0x388]
	0x03B65B1C MOV X0, X31
	0x03B65B20 BL 0x3C4BB34
	0x03B65B24 LDR X8, [X22]
	0x03B65B28 MOV X20, X0
	0x03B65B2C LDR W9, [X8 + 0xE0]
	0x03B65B30 CBNZ W9, 0x3B65B3C
	0x03B65B34 MOV X0, X8
	0x03B65B38 BL 0x1C16DFC
	0x03B65B3C MOV X0, X20
	0x03B65B40 MOV X1, X31
	0x03B65B44 BL 0x3C38948
	0x03B65B48 ANDS W31, W0, 0x1
	0x03B65B4C CSEL X8, X21, X23, NE
	0x03B65B50 LDR X21, [X8]
	0x03B65B54 MOV X1, X31
	0x03B65B58 MOV X0, X21
	0x03B65B5C BL 0x3C13E40
	0x03B65B60 LDR X8, [X22]
	0x03B65B64 MOV X20, X0
	0x03B65B68 LDR W9, [X8 + 0xE0]
	0x03B65B6C CBNZ W9, 0x3B65B78
	0x03B65B70 MOV X0, X8
	0x03B65B74 BL 0x1C16DFC
	0x03B65B78 MOV X0, X20
	0x03B65B7C MOV X1, X31
	0x03B65B80 MOV X2, X31
	0x03B65B84 BL 0x3C3883C
	0x03B65B88 TBZ X0, 0x0, 0x3B65BEC
	0x03B65B8C ADRP X8, 0x5F6000
	0x03B65B90 ADRP X9, 0x5F6000
	0x03B65B94 LDR X8, [X8 + 0x380]
	0x03B65B98 LDR X9, [X9 + 0x390]
	0x03B65B9C MOV X1, X21
	0x03B65BA0 MOV X3, X31
	0x03B65BA4 LDR X0, [X8]
	0x03B65BA8 LDR X2, [X9]
	0x03B65BAC BL 0x32274B8
	0x03B65BB0 ADRP X8, 0x58E000
	0x03B65BB4 LDR X8, [X8 + 0xA28]
	0x03B65BB8 MOV X20, X0
	0x03B65BBC LDR X8, [X8]
	0x03B65BC0 LDR W9, [X8 + 0xE0]
	0x03B65BC4 CBNZ W9, 0x3B65BD0
	0x03B65BC8 MOV X0, X8
	0x03B65BCC BL 0x1C16DFC
	0x03B65BD0 MOV X0, X20
	0x03B65BD4 MOV X1, X19
	0x03B65BD8 LDP X20, X19, [X31 + 0x20]
	0x03B65BDC LDP X22, X21, [X31 + 0x10]
	0x03B65BE0 MOV X2, X31
	0x03B65BE4 LDP X30, X23, [X31], #0x30
	0x03B65BE8 B 0x3C06B0C
	0x03B65BEC LDR X0, [X22]
	0x03B65BF0 LDR X21, [X19 + 0x1B0]
	0x03B65BF4 LDR W8, [X0 + 0xE0]
	0x03B65BF8 CBNZ W8, 0x3B65C00
	0x03B65BFC BL 0x1C16DFC
	0x03B65C00 MOV X0, X21
	0x03B65C04 MOV X1, X31
	0x03B65C08 MOV X2, X31
	0x03B65C0C BL 0x3C3883C
	0x03B65C10 ADRP X23, 0xFFFFFFFFFCF85000
	0x03B65C14 TBZ X0, 0x0, 0x3B65C6C
	0x03B65C18 ADRP X8, 0x592000
	0x03B65C1C LDR X8, [X8 + 0xCA0]
	0x03B65C20 LDR X0, [X8]
	0x03B65C24 BL 0x1C16F10
	0x03B65C28 MOV X1, X20
	0x03B65C2C MOV X2, X31
	0x03B65C30 MOV X21, X0
	0x03B65C34 BL 0x3C1454C
	0x03B65C38 STR X21, [X19 + 0x1B0]
	0x03B65C3C ADRP X8, 0x5F5000
	0x03B65C40 LDR X8, [X8 + 0x7C8]
	0x03B65C44 LDR X0, [X8]
	0x03B65C48 LDR W8, [X0 + 0xE0]
	0x03B65C4C CBNZ W8, 0x3B65C54
	0x03B65C50 BL 0x1C16DFC
	0x03B65C54 LDR V3, [X23 + 0x90]
	0x03B65C58 FMOV S0, W31
	0x03B65C5C FMOV S1, W31
	0x03B65C60 FMOV S2, 1
	0x03B65C64 MOV X0, X21
	0x03B65C68 BL 0x3B65D04
	0x03B65C6C LDR X0, [X22]
	0x03B65C70 LDR X21, [X19 + 0x1B8]
	0x03B65C74 LDR W8, [X0 + 0xE0]
	0x03B65C78 CBNZ W8, 0x3B65C80
	0x03B65C7C BL 0x1C16DFC
	0x03B65C80 MOV X0, X21
	0x03B65C84 MOV X1, X31
	0x03B65C88 MOV X2, X31
	0x03B65C8C BL 0x3C3883C
	0x03B65C90 TBZ X0, 0x0, 0x3B65CF4
	0x03B65C94 ADRP X8, 0x592000
	0x03B65C98 LDR X8, [X8 + 0xCA0]
	0x03B65C9C LDR X0, [X8]
	0x03B65CA0 BL 0x1C16F10
	0x03B65CA4 MOV X1, X20
	0x03B65CA8 MOV X2, X31
	0x03B65CAC MOV X21, X0
	0x03B65CB0 BL 0x3C1454C
	0x03B65CB4 STR X21, [X19 + 0x1B8]
	0x03B65CB8 ADRP X8, 0x5F5000
	0x03B65CBC LDR X8, [X8 + 0x7C8]
	0x03B65CC0 LDR X0, [X8]
	0x03B65CC4 LDR W8, [X0 + 0xE0]
	0x03B65CC8 CBNZ W8, 0x3B65CD0
	0x03B65CCC BL 0x1C16DFC
	0x03B65CD0 LDR V3, [X23 + 0x90]
	0x03B65CD4 MOV X0, X21
	0x03B65CD8 LDP X20, X19, [X31 + 0x20]
	0x03B65CDC LDP X22, X21, [X31 + 0x10]
	0x03B65CE0 FMOV S0, 1
	0x03B65CE4 FMOV S1, W31
	0x03B65CE8 FMOV S2, W31
	0x03B65CEC LDP X30, X23, [X31], #0x30
	0x03B65CF0 B 0x3B65D04
	0x03B65CF4 LDP X20, X19, [X31 + 0x20]
	0x03B65CF8 LDP X22, X21, [X31 + 0x10]
	0x03B65CFC LDP X30, X23, [X31], #0x30
	0x03B65D00 RET
	0x03B65D04 STP D11, D10, [X31 - 0x60]!
	0x03B65D08 STP D9, D8, [X31 + 0x10]
	0x03B65D0C STR X30, [X31 + 0x20]
	0x03B65D10 STP X24, X23, [X31 + 0x30]
	0x03B65D14 STP X22, X21, [X31 + 0x40]
	0x03B65D18 STP X20, X19, [X31 + 0x50]
	0x03B65D1C ADRP X20, 0x87D000
	0x03B65D20 LDRB W8, [X20 + 0x9B8]
	0x03B65D24 MOV V8.16B, V3.16B
	0x03B65D28 MOV V9.16B, V2.16B
	0x03B65D2C MOV V10.16B, V1.16B
	0x03B65D30 MOV V11.16B, V0.16B
	0x03B65D34 MOV X19, X0
	0x03B65D38 TBNZ X8, 0x0, 0x3B65D98
	0x03B65D3C ADRP X0, 0x58E000
	0x03B65D40 LDR X0, [X0 + 0x598]
	0x03B65D44 BL 0x1C16CF4
	0x03B65D48 ADRP X0, 0x5F6000
	0x03B65D4C LDR X0, [X0 + 0x398]
	0x03B65D50 BL 0x1C16CF4
	0x03B65D54 ADRP X0, 0x5F6000
	0x03B65D58 LDR X0, [X0 + 0x3A0]
	0x03B65D5C BL 0x1C16CF4
	0x03B65D60 ADRP X0, 0x5F6000
	0x03B65D64 LDR X0, [X0 + 0x3A8]
	0x03B65D68 BL 0x1C16CF4
	0x03B65D6C ADRP X0, 0x5F6000
	0x03B65D70 LDR X0, [X0 + 0x3B0]
	0x03B65D74 BL 0x1C16CF4
	0x03B65D78 ADRP X0, 0x592000
	0x03B65D7C LDR X0, [X0 + 0x2B8]
	0x03B65D80 BL 0x1C16CF4
	0x03B65D84 ADRP X0, 0x5F6000
	0x03B65D88 LDR X0, [X0 + 0x3B8]
	0x03B65D8C BL 0x1C16CF4
	0x03B65D90 MOVZ W8, 0x1
	0x03B65D94 STRB W8, [X20 + 0x9B8]
	0x03B65D98 CBZ X19, 0x3B65F6C
	0x03B65D9C ADRP X8, 0x592000
	0x03B65DA0 ADRP X9, 0x5F6000
	0x03B65DA4 LDR X8, [X8 + 0x2B8]
	0x03B65DA8 LDR X9, [X9 + 0x3B8]
	0x03B65DAC ADRP X20, 0x58E000
	0x03B65DB0 MOV X0, X19
	0x03B65DB4 LDR X1, [X8]
	0x03B65DB8 LDR X2, [X9]
	0x03B65DBC LDR X20, [X20 + 0x598]
	0x03B65DC0 MOV X3, X31
	0x03B65DC4 BL 0x3C15054
	0x03B65DC8 MOV X0, X31
	0x03B65DCC BL 0x3C4BB34
	0x03B65DD0 LDR X8, [X20]
	0x03B65DD4 MOV X20, X0
	0x03B65DD8 LDR W9, [X8 + 0xE0]
	0x03B65DDC CBNZ W9, 0x3B65DE8
	0x03B65DE0 MOV X0, X8
	0x03B65DE4 BL 0x1C16DFC
	0x03B65DE8 ADRP X21, 0x5F6000
	0x03B65DEC LDR X21, [X21 + 0x398]
	0x03B65DF0 MOV X0, X20
	0x03B65DF4 MOV X1, X31
	0x03B65DF8 MOV X2, X31
	0x03B65DFC BL 0x3C354F8
	0x03B65E00 MOV W20, W0
	0x03B65E04 TBZ X0, 0x0, 0x3B65E34
	0x03B65E08 LDR X0, [X21]
	0x03B65E0C LDR W8, [X0 + 0xE0]
	0x03B65E10 CBNZ W8, 0x3B65E1C
	0x03B65E14 BL 0x1C16DFC
	0x03B65E18 LDR X0, [X21]
	0x03B65E1C LDR X8, [X0 + 0xB8]
	0x03B65E20 FMOV S0, 1
	0x03B65E24 MOV X0, X19
	0x03B65E28 MOV X2, X31
	0x03B65E2C LDR W1, [X8]
	0x03B65E30 BL 0x3C15CD8
	0x03B65E34 LDR X0, [X21]
	0x03B65E38 ADRP X24, 0x5F6000
	0x03B65E3C ADRP X23, 0x5F6000
	0x03B65E40 ADRP X22, 0x5F6000
	0x03B65E44 LDR W8, [X0 + 0xE0]
	0x03B65E48 LDR X24, [X24 + 0x3B0]
	0x03B65E4C LDR X23, [X23 + 0x3A0]
	0x03B65E50 LDR X22, [X22 + 0x3A8]
	0x03B65E54 CBNZ W8, 0x3B65E60
	0x03B65E58 BL 0x1C16DFC
	0x03B65E5C LDR X0, [X21]
	0x03B65E60 LDR X8, [X0 + 0xB8]
	0x03B65E64 FMOV S0, 2
	0x03B65E68 MOV X0, X19
	0x03B65E6C MOV X2, X31
	0x03B65E70 LDR W1, [X8 + 0x4]
	0x03B65E74 BL 0x3C15CD8
	0x03B65E78 LDR X8, [X21]
	0x03B65E7C MOVZ W2, 0x5
	0x03B65E80 MOV X0, X19
	0x03B65E84 MOV X3, X31
	0x03B65E88 LDR X8, [X8 + 0xB8]
	0x03B65E8C LDR W1, [X8 + 0x8]
	0x03B65E90 BL 0x3C15C04
	0x03B65E94 LDR X8, [X21]
	0x03B65E98 MOVZ W2, 0xA
	0x03B65E9C MOV X0, X19
	0x03B65EA0 MOV X3, X31
	0x03B65EA4 LDR X8, [X8 + 0xB8]
	0x03B65EA8 LDR W1, [X8 + 0xC]
	0x03B65EAC BL 0x3C15C04
	0x03B65EB0 LDR X8, [X21]
	0x03B65EB4 MOV X0, X19
	0x03B65EB8 MOV W2, W31
	0x03B65EBC MOV X3, X31
	0x03B65EC0 LDR X8, [X8 + 0xB8]
	0x03B65EC4 LDR W1, [X8 + 0x10]
	0x03B65EC8 BL 0x3C15C04
	0x03B65ECC LDR X1, [X24]
	0x03B65ED0 MOV X0, X19
	0x03B65ED4 MOV X2, X31
	0x03B65ED8 BL 0x3C14E80
	0x03B65EDC LDR X1, [X23]
	0x03B65EE0 MOV X0, X19
	0x03B65EE4 MOV X2, X31
	0x03B65EE8 BL 0x3C14E3C
	0x03B65EEC LDR X1, [X22]
	0x03B65EF0 MOV X0, X19
	0x03B65EF4 MOV X2, X31
	0x03B65EF8 BL 0x3C14E80
	0x03B65EFC MOVZ W1, 0xBB8
	0x03B65F00 MOV X0, X19
	0x03B65F04 MOV X2, X31
	0x03B65F08 BL 0x3C14DBC
	0x03B65F0C LDR X0, [X21]
	0x03B65F10 LDR W8, [X0 + 0xE0]
	0x03B65F14 CBNZ W8, 0x3B65F20
	0x03B65F18 BL 0x1C16DFC
	0x03B65F1C LDR X0, [X21]
	0x03B65F20 LDR X8, [X0 + 0xB8]
	0x03B65F24 ANDS W31, W20, 0x1
	0x03B65F28 MOVZ W9, 0x18
	0x03B65F2C MOVZ W10, 0x14
	0x03B65F30 CSEL X9, X10, X9, NE
	0x03B65F34 LDR W1, [X8, X9, LSL]
	0x03B65F38 MOV X0, X19
	0x03B65F3C MOV V2.16B, V9.16B
	0x03B65F40 MOV V3.16B, V8.16B
	0x03B65F44 LDP X20, X19, [X31 + 0x50]
	0x03B65F48 LDP X22, X21, [X31 + 0x40]
	0x03B65F4C LDP X24, X23, [X31 + 0x30]
	0x03B65F50 LDR X30, [X31 + 0x20]
	0x03B65F54 LDP D9, D8, [X31 + 0x10]
	0x03B65F58 MOV V0.16B, V11.16B
	0x03B65F5C MOV V1.16B, V10.16B
	0x03B65F60 MOV X2, X31
	0x03B65F64 LDP D11, D10, [X31], #0x60
	0x03B65F68 B 0x3C14988
	0x03B65F6C BL 0x1C16F20
	0x03B65F70 SUB X31, X31, 0x70
	0x03B65F74 STR X30, [X31 + 0x10]
	0x03B65F78 STP X28, X27, [X31 + 0x20]
	0x03B65F7C STP X26, X25, [X31 + 0x30]
	0x03B65F80 STP X24, X23, [X31 + 0x40]
	0x03B65F84 STP X22, X21, [X31 + 0x50]
	0x03B65F88 STP X20, X19, [X31 + 0x60]
	0x03B65F8C ADRP X21, 0x87D000
	0x03B65F90 LDRB W8, [X21 + 0x9B9]
	0x03B65F94 MOV X20, X1
	0x03B65F98 MOV X19, X0
	0x03B65F9C TBNZ X8, 0x0, 0x3B66020
	0x03B65FA0 ADRP X0, 0x5BA000
	0x03B65FA4 LDR X0, [X0 + 0x5A0]
	0x03B65FA8 BL 0x1C16CF4
	0x03B65FAC ADRP X0, 0x5F6000
	0x03B65FB0 LDR X0, [X0 + 0x3C0]
	0x03B65FB4 BL 0x1C16CF4
	0x03B65FB8 ADRP X0, 0x5F6000
	0x03B65FBC LDR X0, [X0 + 0x3C8]
	0x03B65FC0 BL 0x1C16CF4
	0x03B65FC4 ADRP X0, 0x5F5000
	0x03B65FC8 LDR X0, [X0 + 0x8D8]
	0x03B65FCC BL 0x1C16CF4
	0x03B65FD0 ADRP X0, 0x5F6000
	0x03B65FD4 LDR X0, [X0 + 0x3D0]
	0x03B65FD8 BL 0x1C16CF4
	0x03B65FDC ADRP X0, 0x5F6000
	0x03B65FE0 LDR X0, [X0 + 0x3D8]
	0x03B65FE4 BL 0x1C16CF4
	0x03B65FE8 ADRP X0, 0x5F6000
	0x03B65FEC LDR X0, [X0 + 0x3E0]
	0x03B65FF0 BL 0x1C16CF4
	0x03B65FF4 ADRP X0, 0x5F6000
	0x03B65FF8 LDR X0, [X0 + 0x3E8]
	0x03B65FFC BL 0x1C16CF4
	0x03B66000 ADRP X0, 0x5F5000
	0x03B66004 LDR X0, [X0 + 0x3F0]
	0x03B66008 BL 0x1C16CF4
	0x03B6600C ADRP X0, 0x5F4000
	0x03B66010 LDR X0, [X0 + 0x7C8]
	0x03B66014 BL 0x1C16CF4
	0x03B66018 MOVZ W8, 0x1
	0x03B6601C STRB W8, [X21 + 0x9B9]
	0x03B66020 MOV X0, X19
	0x03B66024 MOV X1, X20
	0x03B66028 MOV X2, X31
	0x03B6602C BL 0x3B50C1C
	0x03B66030 LDRB W8, [X19 + 0x1A8]
	0x03B66034 CBZ W8, 0x3B66250
	0x03B66038 CBZ X20, 0x3B66270
	0x03B6603C ADRP X24, 0x5F4000
	0x03B66040 LDR X24, [X24 + 0x7C8]
	0x03B66044 MOV X0, X20
	0x03B66048 BL 0x3B66278
	0x03B6604C LDR X8, [X24]
	0x03B66050 MOV X20, X0
	0x03B66054 LDR W9, [X8 + 0xE0]
	0x03B66058 CBNZ W9, 0x3B66068
	0x03B6605C MOV X0, X8
	0x03B66060 BL 0x1C16DFC
	0x03B66064 LDR X8, [X24]
	0x03B66068 LDR X8, [X8 + 0xB8]
	0x03B6606C LDR X8, [X8]
	0x03B66070 CBZ X8, 0x3B66270
	0x03B66074 LDP W2, W9, [X8 + 0x18]
	0x03B66078 ADD W9, W9, 0x1
	0x03B6607C CMP W2, 0x1
	0x03B66080 STP W31, W9, [X8 + 0x18]
	0x03B66084 B.LT 0x3B66098
	0x03B66088 LDR X0, [X8 + 0x10]
	0x03B6608C MOV W1, W31
	0x03B66090 MOV X3, X31
	0x03B66094 BL 0x339FA34
	0x03B66098 CBZ X20, 0x3B66270
	0x03B6609C ADRP X10, 0x5F4000

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x87E000
	011 Move X26, 0x5F6000
	012 Move X19, 0x5F6000
	013 Move X20, 0x5F6000
	014 Move X24, 0x595000
	015 Move X23, 0x5F6000
	016 Move X22, 0x5F6000
	017 Move X21, 0x5F3000
	018 Move X26, [X26+3648]
	019 Move X19, [X19+3656]
	020 Move W8, [X25+2475]
	021 Move X20, [X20+1984]
	022 Move X24, [X24+1160]
	023 Move X23, [X23+2096]
	024 Move X22, [X22+2088]
	025 Move X21, [X21+48]
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {53}
	030 Move X0, 0x5F6000
	031 Move X0, [X0+2088]
	032 Call 0x1C17CF4
	033 Move X0, 0x5F6000
	034 Move X0, [X0+2096]
	035 Call 0x1C17CF4
	036 Move X0, 0x5F6000
	037 Move X0, [X0+3656]
	038 Call 0x1C17CF4
	039 Move X0, 0x5F6000
	040 Move X0, [X0+3648]
	041 Call 0x1C17CF4
	042 Move X0, 0x595000
	043 Move X0, [X0+1160]
	044 Call 0x1C17CF4
	045 Move X0, 0x5F6000
	046 Move X0, [X0+1984]
	047 Call 0x1C17CF4
	048 Move X0, 0x5F3000
	049 Move X0, [X0+48]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X25+2475], W8
	053 Move X0, [X26]
	054 Call 0x1C17F10
	055 Move X1, [X19]
	056 Move X19, X0
	057 Call List`1<Object>..ctor, X0
	058 Move X8, [X20]
	059 Move W1, 10
	060 Move X8, [X8+184]
	061 Move [X8], X19
	062 Move X0, [X24]
	063 Call 0x1C17D6C
	064 Move X8, [X20]
	065 Move X8, [X8+184]
	066 Move [X8+8], X0
	067 Move X0, [X23]
	068 Call 0x1C17F10
	069 Move X1, [X22]
	070 Move X19, X0
	071 Call HashSet`1<Object>..ctor, X0
	072 Move X8, [X20]
	073 Move W1, 3
	074 Move X8, [X8+184]
	075 Move [X8+16], X19
	076 Move X0, [X21]
	077 Call 0x1C17D6C
	078 Move X8, [X20]
	079 Move X20, [X31+64]
	080 Move X19, [X31+72]
	081 Move X22, [X31+48]
	082 Move X21, [X31+56]
	083 Move X24, [X31+32]
	084 Move X23, [X31+40]
	085 Move X8, [X8+184]
	086 Move X26, [X31+16]
	087 Move X25, [X31+24]
	088 Move [X8+32], X0
	089 Move X30, [X31+80]
	090 Return 
	091 Subtract X31, X31, 128
	092 Move [X31+64], D8
	093 Move [X31+72], X30
	094 Move [X31+80], X24
	095 Move [X31+88], X23
	096 Move [X31+96], X22
	097 Move [X31+104], X21
	098 Move [X31+112], X20
	099 Move [X31+120], X19
	100 Move X24, 0x87E000
	101 Move W8, [X24+2476]
	102 Move X23, X4
	103 Move X20, X3
	104 Move X21, X2
	105 Move X22, X1
	106 Move V8, V0
	107 Move W19, W0
	108 Compare W8, 0
	109 JumpIfNotEqual {115}
	110 Move X0, 0x5F6000
	111 Move X0, [X0+2536]
	112 Call 0x1C17CF4
	113 Move W8, 1
	114 Move [X24+2476], W8
	115 Move X8, 0x5F6000
	116 Move X8, [X8+2536]
	117 Move X0, X23
	118 Move X1, [X8]
	119 Call NativeArray`1<Vector3>.Reinterpret, X0
	120 Move [X31+48], X0
	121 Move [X31+56], X1
	122 Move S0, [X22]
	123 Move S1, [X22+4]
	124 Move V2, [X22+8]
	125 Move X0, X31
	126 Call float3.op_Implicit, X0
	127 Move [X31+32], S0
	128 Move [X31+40], S1
	129 Move [X31+40], S2
	130 Move S0, [X21]
	131 Move S1, [X21+4]
	132 Move V2, [X21+8]
	133 Move X0, X31
	134 Call float3.op_Implicit, X0
	135 Move [X31+16], S0
	136 Move [X31+24], S1
	137 Move [X31+24], S2
	138 Move S0, [X20]
	139 Move S1, [X20+4]
	140 Move V2, [X20+8]
	141 Move X0, X31
	142 Call float3.op_Implicit, X0
	143 Move [X31], S0
	144 Move [X31+8], S1
	145 Add X1, X31, 32
	146 Add X2, X31, 16
	147 Add X3, X31, 0
	148 Add X4, X31, 48
	149 Move W0, W19
	150 Move V0, V8
	151 Move X5, X31
	152 Move [X31+8], S2
	153 Call CurveUtility.GenerateCubicBezierCurve, X0, V0, X1, X2, X3, X4
	154 Move X20, [X31+112]
	155 Move X19, [X31+120]
	156 Move X22, [X31+96]
	157 Move X21, [X31+104]
	158 Move X24, [X31+80]
	159 Move X23, [X31+88]
	160 Move X30, [X31+72]
	161 Move V8, [X31+64]
	162 Add X31, X31, 128
	163 Return 
	164 Subtract X31, X31, 192
	165 Move [X31+80], D9
	166 Move [X31+88], D8
	167 Move [X31+96], X29
	168 Move [X31+104], X30
	169 Move [X31+112], X28
	170 Move [X31+120], X27
	171 Move [X31+128], X26
	172 Move [X31+136], X25
	173 Move [X31+144], X24
	174 Move [X31+152], X23
	175 Move [X31+160], X22
	176 Move [X31+168], X21
	177 Move [X31+176], X20
	178 Move [X31+184], X19
	179 NotImplemented "Instruction CMP not yet implemented."
	180 Move [X31+16], D1
	181 Move [X31+64], X31
	182 Move [X31+72], X31
	183 Move [X31+56], W31
	184 Move [X31+48], X31
	185 Move [X31+40], W31
	186 Move [X31+32], X31
	187 Move W8, [X6+8]
	188 Move X20, X6
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move V8, V0
	191 Move V0, [X31+1]
	192 Move X26, W8
	193 NotImplemented "Instruction SBFM not yet implemented."
	194 Add X8, X8, W0
	195 Move X21, X5
	196 Move X22, X4
	197 Move W23, W2
	198 Move X24, X31
	199 Xor W27, W3, 1
	200 Move X25, W0
	201 Move W28, W1
	202 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	203 Move X19, X8
	204 ShiftRight X19, 62
	205 And X19, X19, 0x1FFFFFFF
	206 Move W29, 1
	207 Move [X31+8], X0
	208 Move X8, [X22]
	209 Add X8, X8, X24
	210 Move W9, [X8+8]
	211 Move X10, [X8]
	212 Add X8, X25, X29
	213 Subtract X8, X8, 1
	214 Move [X31+72], W9
	215 Move [X31+64], X10
	216 Move TEMP, X23
	217 And TEMP, TEMP, 1
	218 Compare TEMP, 1
	219 JumpIfNotEqual {233}
	220 Move X9, [X21]
	221 Move V0, [X31+64]
	222 Move V1, [X31+72]
	223 Move V4, [X31+1]
	224 Add X9, X9, X24
	225 Move V2, [X9]
	226 Move V3, [X9+8]
	227 Subtract V0, V0, V2
	228 Subtract S1, S1, S3
	229 NotImplemented "Instruction INVALID not yet implemented."
	230 Multiply S4, S1, S4
	231 Add V1, V2, V0
	232 Add S0, S3, S4
	233 Move V1, [X31+64]
	234 Move V0, [X31+72]
	235 NotImplemented "Instruction CMP not yet implemented."
	236 NotImplemented "Instruction CSET not yet implemented."
	237 NotImplemented "Instruction CMP not yet implemented."
	238 Move [X31+48], D1
	239 Move [X31+56], S0
	240 Or W8, W8, W27
	241 Move TEMP, X8
	242 And TEMP, TEMP, 1
	243 Compare TEMP, 1
	244 JumpIfEqual {263}
	245 Move X8, [X20]
	246 And W0, W23, 1
	247 Add X1, X31, 64
	248 Add X2, X31, 32
	249 Add X8, X8, X19
	250 Add X8, X8, X24
	251 NotImplemented "Instruction LDUR not yet implemented."
	252 NotImplemented "Instruction LDUR not yet implemented."
	253 Add X3, X31, 48
	254 Add X4, X31, 76
	255 Move V0, V8
	256 Move [X31+40], W9
	257 Move [X31+32], X8
	258 Call XRInteractorLineVisual.EvaluateLineEndPoint, V0, X0, X1, X2, X3, X4
	259 Move TEMP, X0
	260 And TEMP, TEMP, 1
	261 Compare TEMP, 1
	262 JumpIfEqual {279}
	263 Move X8, [X20]
	264 Move X9, [X31+48]
	265 Move W10, [X31+56]
	266 NotImplemented "Instruction CMP not yet implemented."
	267 Add X8, X8, X19
	268 Add X8, X8, X24
	269 Move [X8+8], W10
	270 Move [X8], X9
	271 Add X8, X29, 1
	272 Add X9, X25, X29
	273 NotImplemented "Instruction CMP not yet implemented."
	274 Add X24, X24, 12
	275 Move X29, X8
	276 Move X9, [X31+8]
	277 Add W8, W9, W8
	278 Subtract W0, W8, 1
	279 Move X8, [X20]
	280 Move W11, [X31+56]
	281 Move X12, [X31+48]
	282 Move X0, [X31+8]
	283 Add W9, W25, W29
	284 Move W10, 12
	285 Subtract W9, W9, 1
	286 NotImplemented "Instruction UMADDL not yet implemented."
	287 Move [X8+8], W11
	288 Move [X8], X12
	289 Add W0, W0, W29
	290 Move X20, [X31+176]
	291 Move X19, [X31+184]
	292 Move X22, [X31+160]
	293 Move X21, [X31+168]
	294 Move X24, [X31+144]
	295 Move X23, [X31+152]
	296 Move X26, [X31+128]
	297 Move X25, [X31+136]
	298 Move X28, [X31+112]
	299 Move X27, [X31+120]
	300 Move X29, [X31+96]
	301 Move X30, [X31+104]
	302 Move D9, [X31+80]
	303 Move D8, [X31+88]
	304 Add X31, X31, 192
	305 Return 
	306 Subtract X31, X31, 144
	307 Move [X31+16], D15
	308 Move [X31+24], D14
	309 Move [X31+32], D13
	310 Move [X31+40], D12
	311 Move [X31+48], D11
	312 Move [X31+56], D10
	313 Move [X31+64], D9
	314 Move [X31+72], D8
	315 Move [X31+80], X30
	316 Move [X31+88], X25
	317 Move [X31+96], X24
	318 Move [X31+104], X23
	319 Move [X31+112], X22
	320 Move [X31+120], X21
	321 Move [X31+128], X20
	322 Move [X31+136], X19
	323 Move X24, 0x87D000
	324 Move V9, [X3]
	325 Move V11, [X3+8]
	326 Move V10, [X2]
	327 Move W8, [X24+1413]
	328 Move V12, [X2+8]
	329 Move X21, X4
	330 Move X19, X3
	331 Move X20, X2
	332 Move X22, X1
	333 Move W23, W0
	334 Move V8, V0
	335 Compare W8, 0
	336 JumpIfNotEqual {342}
	337 Move X0, 0x58F000
	338 Move X0, [X0+1448]
	339 Call 0x1C17CF4
	340 Move W8, 1
	341 Move [X24+1413], W8
	342 Move X25, 0x58F000
	343 Move X25, [X25+1448]
	344 Subtract V10, V9, V10
	345 Subtract S9, S11, S12
	346 Move X0, [X25]
	347 Move W8, [X0+224]
	348 Compare W8, 0
	349 Invalid "Jump target not found in method."
	350 Call 0x1C17DFC
	351 NotImplemented "Instruction INVALID not yet implemented."
	352 Multiply S0, S9, S9
	353 NotImplemented "Instruction FADDP not yet implemented."
	354 Add S0, S0, S1
	355 NotImplemented "Instruction FSQRT not yet implemented."
	356 Move TEMP, X23
	357 And TEMP, TEMP, 1
	358 Compare TEMP, 1
	359 JumpIfNotEqual {415}
	360 Move V12, [X20]
	361 NotImplemented "Instruction LDUR not yet implemented."
	362 Move V14, [X22]
	363 Move W8, [X24+1413]
	364 NotImplemented "Instruction LDUR not yet implemented."
	365 Compare W8, 0
	366 JumpIfNotEqual {372}
	367 Move X0, 0x58F000
	368 Move X0, [X0+1448]
	369 Call 0x1C17CF4
	370 Move W8, 1
	371 Move [X24+1413], W8
	372 Move X0, [X25]
	373 Subtract S14, S14, S12
	374 Subtract V12, V15, V13
	375 Move W8, [X0+224]
	376 Compare W8, 0
	377 JumpIfNotEqual {379}
	378 Call 0x1C17DFC
	379 Multiply S0, S14, S14
	380 NotImplemented "Instruction INVALID not yet implemented."
	381 Add S0, S0, S1
	382 Move S1, V1.S[1]
	383 Add S0, S1, S0
	384 NotImplemented "Instruction FSQRT not yet implemented."
	385 NotImplemented "Instruction FCMP not yet implemented."
	386 Move V12, [X20]
	387 Move W8, [X24+1413]
	388 Move V13, [X20+8]
	389 Compare W8, 0
	390 JumpIfNotEqual {398}
	391 Move X0, 0x58F000
	392 Move X0, [X0+1448]
	393 Move [X31], V6
	394 Call 0x1C17CF4
	395 Move V6, [X31]
	396 Move W8, 1
	397 Move [X24+1413], W8
	398 Move X0, [X25]
	399 Move W8, [X0+224]
	400 Compare W8, 0
	401 JumpIfNotEqual {405}
	402 Move [X31], V6
	403 Call 0x1C17DFC
	404 Move V6, [X31]
	405 Move S0, 1
	406 NotImplemented "Instruction FDIV not yet implemented."
	407 NotImplemented "Instruction INVALID not yet implemented."
	408 Multiply S0, S9, S0
	409 NotImplemented "Instruction INVALID not yet implemented."
	410 Multiply S0, S0, S6
	411 Add V1, V1, V12
	412 Add S0, S0, S13
	413 Move [X19], D1
	414 Move [X19+8], S0
	415 Move V6, V11
	416 Move V0, [X21]
	417 Add S0, S6, S0
	418 NotImplemented "Instruction FCMP not yet implemented."
	419 Move [X21], S0
	420 Move V2, [X20]
	421 Move V3, [X20+8]
	422 Move V4, [X19]
	423 Move V5, [X19+8]
	424 Subtract S1, S0, S8
	425 NotImplemented "Instruction FDIV not yet implemented."
	426 Move S6, 1
	427 Subtract S1, S6, S1
	428 Subtract V4, V4, V2
	429 Subtract S5, S5, S3
	430 NotImplemented "Instruction INVALID not yet implemented."
	431 Multiply S1, S1, S5
	432 Add V2, V2, V4
	433 Add S1, S3, S1
	434 Move [X19], D2
	435 Move [X19+8], S1
	436 NotImplemented "Instruction FCMP not yet implemented."
	437 Move X20, [X31+128]
	438 Move X19, [X31+136]
	439 Move X22, [X31+112]
	440 Move X21, [X31+120]
	441 Move X24, [X31+96]
	442 Move X23, [X31+104]
	443 Move X30, [X31+80]
	444 Move X25, [X31+88]
	445 Move D9, [X31+64]
	446 Move D8, [X31+72]
	447 Move D11, [X31+48]
	448 Move D10, [X31+56]
	449 Move D13, [X31+32]
	450 Move D12, [X31+40]
	451 Move D15, [X31+16]
	452 Move D14, [X31+24]
	453 NotImplemented "Instruction CSET not yet implemented."
	454 Add X31, X31, 144
	455 Return 

