Type: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Receiver.Transformation.UniformTransformScaleAffordanceReceiver

Method: UnityEngine.Transform get_transformToScale()

Disassembly:
	0x03BD544C LDR W8, [X0 + 0xE0]
	0x03BD5450 CBNZ W8, 0x3BD5458

ISIL:
	001 Move X0, [X0+168]
	002 Return X0

Method: System.Void set_transformToScale(UnityEngine.Transform value)

Disassembly:
	0x03BD5454 BL 0x1C16DFC
	0x03BD5458 MOV X0, X20
	0x03BD545C MOV X1, X31
	0x03BD5460 MOV X2, X31
	0x03BD5464 BL 0x3C3883C
	0x03BD5468 TBZ X0, 0x0, 0x3BD5484
	0x03BD546C ADRP X8, 0x588000
	0x03BD5470 LDR X8, [X8 + 0xC20]
	0x03BD5474 MOV X0, X19
	0x03BD5478 LDR X1, [X8]
	0x03BD547C BL 0x21A3894
	0x03BD5480 STR X0, [X19 + 0xA8]
	0x03BD5484 LDR X0, [X19 + 0xB0]
	0x03BD5488 MOV X1, X31
	0x03BD548C BL 0x3C124EC
	0x03BD5490 STR W0, [X19 + 0xB8]
	0x03BD5494 LDP X20, X19, [X31 + 0x20]
	0x03BD5498 LDP X22, X21, [X31 + 0x10]
	0x03BD549C LDR X30, [X31], #0x30
	0x03BD54A0 RET
	0x03BD54A4 STP D9, D8, [X31 - 0x30]!
	0x03BD54A8 STP X30, X21, [X31 + 0x10]
	0x03BD54AC STP X20, X19, [X31 + 0x20]
	0x03BD54B0 LDR X8, [X0 + 0xA8]
	0x03BD54B4 CBZ X8, 0x3BD551C
	0x03BD54B8 LDR X20, [X8 + 0x30]
	0x03BD54BC MOV V8.16B, V1.16B
	0x03BD54C0 MOV X19, X0
	0x03BD54C4 MOV V9.16B, V0.16B
	0x03BD54C8 MOVZ W9, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x80E000
	007 Move X21, 0x51F000
	008 Move W8, [X22+3691]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x51F000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3691], W8
	021 Move [X19+168], X20
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Inequality, X0, X1
	031 And W8, W0, 1
	032 Move [X19+176], W8
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03BD54CC STRB W9, [X8 + 0x38]
	0x03BD54D0 CBZ X20, 0x3BD5500
	0x03BD54D4 LDR W21, [X19 + 0xB8]
	0x03BD54D8 MOV V0.16B, V9.16B
	0x03BD54DC MOV V1.16B, V8.16B
	0x03BD54E0 MOV X0, X31
	0x03BD54E4 BL 0x3883120
	0x03BD54E8 FMOV S2, W31
	0x03BD54EC FMOV S3, W31
	0x03BD54F0 MOV X0, X20
	0x03BD54F4 MOV W1, W21
	0x03BD54F8 MOV X2, X31
	0x03BD54FC BL 0x3C12720
	0x03BD5500 MOV X0, X19
	0x03BD5504 LDP X20, X19, [X31 + 0x20]
	0x03BD5508 LDP X30, X21, [X31 + 0x10]
	0x03BD550C MOV V0.16B, V9.16B
	0x03BD5510 MOV V1.16B, V8.16B
	0x03BD5514 LDP D9, D8, [X31], #0x30
	0x03BD5518 B 0x3BD5520
	0x03BD551C BL 0x1C16F20
	0x03BD5520 STP D9, D8, [X31 - 0x30]!
	0x03BD5524 STR X30, [X31 + 0x10]
	0x03BD5528 STP X20, X19, [X31 + 0x20]
	0x03BD552C ADRP X20, 0x80D000
	0x03BD5530 LDRB W8, [X20 + 0xE8E]
	0x03BD5534 MOV V8.16B, V1.16B
	0x03BD5538 MOV V9.16B, V0.16B
	0x03BD553C MOV X19, X0
	0x03BD5540 TBNZ X8, 0x0, 0x3BD5558
	0x03BD5544 ADRP X0, 0x588000
	0x03BD5548 LDR X0, [X0 + 0xC38]
	0x03BD554C BL 0x1C16CF4
	0x03BD5550 MOVZ W8, 0x1
	0x03BD5554 STRB W8, [X20 + 0xE8E]
	0x03BD5558 LDR X19, [X19 + 0x98]
	0x03BD555C CBZ X19, 0x3BD5590

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x80E000
	007 Move X22, 0x589000
	008 Move X20, 0x51F000
	009 Move W8, [X21+3692]
	010 Move X22, [X22+3016]
	011 Move X20, [X20+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x589000
	018 Move X0, [X0+3016]
	019 Call 0x1C17CF4
	020 Move X0, 0x51F000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3692], W8
	025 Move X1, [X22]
	026 Move X0, X19
	027 Call BaseAffordanceStateReceiver`1<Single>.OnEnable, X0
	028 Move X0, [X20]
	029 Move X20, [X19+168]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Inequality, X0, X1
	038 And W8, W0, 1
	039 Move [X19+176], W8
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 Return 

Method: System.Single GetCurrentValueForCapture()

Disassembly:
	0x03BD5560 ADRP X20, 0x588000
	0x03BD5564 LDR X20, [X20 + 0xC38]
	0x03BD5568 MOV V0.16B, V9.16B
	0x03BD556C MOV V1.16B, V8.16B
	0x03BD5570 MOV X0, X31
	0x03BD5574 BL 0x3883120
	0x03BD5578 LDR X1, [X20]
	0x03BD557C MOV X0, X19
	0x03BD5580 LDP X20, X19, [X31 + 0x20]
	0x03BD5584 LDR X30, [X31 + 0x10]
	0x03BD5588 LDP D9, D8, [X31], #0x30
	0x03BD558C B 0x272ABAC
	0x03BD5590 LDP X20, X19, [X31 + 0x20]
	0x03BD5594 LDR X30, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+176]
	004 Compare W8, 0
	005 JumpIfEqual {15}
	006 Move X19, X0
	007 Move X0, [X0+168]
	008 Compare X0, 0
	009 JumpIfEqual {19}
	010 Move X1, X31
	011 Call Transform.get_localScale, X0
	012 Move [X19+180], S0
	013 Move [X19+188], S1
	014 Move [X19+188], S2
	015 Move S0, 1
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return V0
	019 Call 0x1C17F20

Method: System.Void OnAffordanceValueUpdated(System.Single newValue)

Disassembly:
	0x03BD5598 LDP D9, D8, [X31], #0x30
	0x03BD559C RET
	0x03BD55A0 STP X30, X19, [X31 - 0x10]!
	0x03BD55A4 MOV X19, X0
	0x03BD55A8 LDR X0, [X0 + 0xA8]
	0x03BD55AC CBZ X0, 0x3BD55D0
	0x03BD55B0 BL 0x3BD3DD4
	0x03BD55B4 CBZ X0, 0x3BD55D0
	0x03BD55B8 LDR W1, [X19 + 0xB8]
	0x03BD55BC MOV X2, X31
	0x03BD55C0 BL 0x3C15FDC
	0x03BD55C4 MOV X0, X31
	0x03BD55C8 LDP X30, X19, [X31], #0x10
	0x03BD55CC B 0x3883124
	0x03BD55D0 BL 0x1C16F20
	0x03BD55D4 B 0x3BD55D8
	0x03BD55D8 STP X30, X23, [X31 - 0x30]!
	0x03BD55DC STP X22, X21, [X31 + 0x10]
	0x03BD55E0 STP X20, X19, [X31 + 0x20]
	0x03BD55E4 ADRP X22, 0x80D000
	0x03BD55E8 ADRP X23, 0x588000

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move W8, [X0+176]
	005 Move X19, X0
	006 Move V8, V0
	007 Compare W8, 0
	008 JumpIfEqual {20}
	009 Move X0, [X19+168]
	010 Compare X0, 0
	011 JumpIfEqual {25}
	012 Move S1, [X19+184]
	013 Move S0, [X19+188]
	014 Move V3, [X19+180]
	015 Move X1, X31
	016 Multiply S2, S0, S8
	017 Multiply S1, S1, S8
	018 Multiply S0, S3, S8
	019 Call Transform.set_localScale, X0, X1
	020 Move X0, X19
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Move V0, V8
	024 Move V8, [X31+32]
	025 Call 0x1C17F20

Method: System.Void OnValidate()

Disassembly:
	0x03BD5658 MOV X20, X0
	0x03BD565C BL 0x28E2D60
	0x03BD5660 STR X20, [X19 + 0xA0]
	0x03BD5664 LDR X1, [X21]
	0x03BD5668 MOV X0, X19
	0x03BD566C LDP X20, X19, [X31 + 0x20]
	0x03BD5670 LDP X22, X21, [X31 + 0x10]
	0x03BD5674 LDP X30, X23, [X31], #0x30
	0x03BD5678 B 0x2767D74
	0x03BD567C LDR X0, [X0 + 0xB0]
	0x03BD5680 RET
	0x03BD5684 STR X1, [X0 + 0xB0]
	0x03BD5688 RET
	0x03BD568C LDR X0, [X0 + 0xB8]
	0x03BD5690 RET
	0x03BD5694 STP X30, X19, [X31 - 0x10]!
	0x03BD5698 MOV X19, X0
	0x03BD569C STR X1, [X0 + 0xB8]
	0x03BD56A0 MOV X0, X1
	0x03BD56A4 MOV X1, X31
	0x03BD56A8 BL 0x3C124EC
	0x03BD56AC STR W0, [X19 + 0xC0]
	0x03BD56B0 LDP X30, X19, [X31], #0x10
	0x03BD56B4 RET
	0x03BD56B8 STP X30, X21, [X31 - 0x20]!
	0x03BD56BC STP X20, X19, [X31 + 0x10]
	0x03BD56C0 ADRP X21, 0x80D000
	0x03BD56C4 ADRP X20, 0x51E000
	0x03BD56C8 LDRB W8, [X21 + 0xE7B]
	0x03BD56CC LDR X20, [X20 + 0x598]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x80E000
	006 Move X20, 0x51F000
	007 Move W8, [X21+3693]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x51F000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3693], W8
	019 Move X0, [X20]
	020 Move X20, [X19+168]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {37}
	033 Move X0, X19
	034 Move X1, X31
	035 Call Component.get_transform, X0
	036 Move [X19+168], X0
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return 

Method: System.Void .ctor()

Disassembly:
	0x03BD56D0 MOV X19, X0
	0x03BD56D4 TBNZ X8, 0x0, 0x3BD56F8
	0x03BD56D8 ADRP X0, 0x588000
	0x03BD56DC LDR X0, [X0 + 0xC20]
	0x03BD56E0 BL 0x1C16CF4
	0x03BD56E4 ADRP X0, 0x51E000
	0x03BD56E8 LDR X0, [X0 + 0x598]
	0x03BD56EC BL 0x1C16CF4
	0x03BD56F0 MOVZ W8, 0x1
	0x03BD56F4 STRB W8, [X21 + 0xE7B]
	0x03BD56F8 LDR X0, [X20]
	0x03BD56FC LDR X20, [X19 + 0xB0]
	0x03BD5700 LDR W8, [X0 + 0xE0]
	0x03BD5704 CBNZ W8, 0x3BD570C
	0x03BD5708 BL 0x1C16DFC
	0x03BD570C MOV X0, X20
	0x03BD5710 MOV X1, X31
	0x03BD5714 MOV X2, X31
	0x03BD5718 BL 0x3C3883C
	0x03BD571C TBZ X0, 0x0, 0x3BD5738
	0x03BD5720 ADRP X8, 0x588000
	0x03BD5724 LDR X8, [X8 + 0xC20]
	0x03BD5728 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x804000
	005 Move W8, [X20+2139]
	006 Move X19, X0
	007 Compare W8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, 0x51F000
	010 Move X0, [X0+1440]
	011 Call 0x1C17CF4
	012 Move W8, 1
	013 Move [X20+2139], W8
	014 Move X8, 0x51F000
	015 Move X8, [X8+1440]
	016 Move X0, X19
	017 Move X8, [X8]
	018 Move X8, [X8+184]
	019 NotImplemented "Instruction LDUR not yet implemented."
	020 Move V1, [X8+20]
	021 Move [X19+180], D0
	022 Move [X19+188], S1
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]

