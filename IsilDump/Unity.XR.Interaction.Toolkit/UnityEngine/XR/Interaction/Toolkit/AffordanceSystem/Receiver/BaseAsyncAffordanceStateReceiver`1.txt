Type: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Receiver.BaseAsyncAffordanceStateReceiver`1

Method: System.Void OnDestroy()

Disassembly:
	0x0264BE7C MOV X20, X1
	0x0264BE80 MOV X21, X0
	0x0264BE84 TBNZ X8, 0x0, 0x264BEA8
	0x0264BE88 ADRP X0, 0x1AD2000
	0x0264BE8C LDR X0, [X0 + 0x310]
	0x0264BE90 BL 0x1C16CF4
	0x0264BE94 ADRP X0, 0x1AA8000
	0x0264BE98 LDR X0, [X0 + 0x6C0]
	0x0264BE9C BL 0x1C16CF4
	0x0264BEA0 MOVZ W8, 0x1
	0x0264BEA4 STRB W8, [X24 + 0x13B]
	0x0264BEA8 LDR X8, [X22 + 0x20]
	0x0264BEAC LDR X0, [X23]
	0x0264BEB0 LDR X8, [X8 + 0xC0]
	0x0264BEB4 LDR W9, [X0 + 0xE0]
	0x0264BEB8 LDR X23, [X8 + 0x18]
	0x0264BEBC CBNZ W9, 0x264BEC4
	0x0264BEC0 BL 0x1C16DFC
	0x0264BEC4 ADRP X24, 0x1AD2000
	0x0264BEC8 LDR X24, [X24 + 0x310]
	0x0264BECC MOV X0, X23
	0x0264BED0 MOV X1, X31
	0x0264BED4 BL 0x338C698
	0x0264BED8 STR X0, [X21 + 0x40]
	0x0264BEDC LDR X8, [X22 + 0x20]
	0x0264BEE0 LDR X8, [X8 + 0xC0]
	0x0264BEE4 LDR X0, [X8 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X19, X0
	006 Add X0, X0, 128
	007 Move X1, X31
	008 Call JobHandle.Complete, X0
	009 Move X0, X19
	010 Add X0, X0, 88
	011 Move X8, [X0]
	012 Compare X8, 0
	013 JumpIfEqual {18}
	014 Move X8, [X20+32]
	015 Move X8, [X8+192]
	016 Move X1, [X8+32]
	017 Call NativeArray`1<Color>.Dispose, X0
	018 Add X19, X19, 104
	019 Move X0, X19
	020 Move X1, X31
	021 Call NativeCurve.get_isCreated, X0
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {33}
	026 Move X0, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X1, X31
	030 Move X30, [X31+32]
	031 Call NativeCurve.Dispose, X0
	032 Return 
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return 

Method: Unity.Jobs.JobHandle HandleTween(System.Single tweenTarget)

Disassembly:
	0x0264BEE8 LDRB W8, [X0 + 0x135]
	0x0264BEEC TBNZ X8, 0x0, 0x264BEF4
	0x0264BEF0 BL 0x1C5C684
	0x0264BEF4 BL 0x1C16F10
	0x0264BEF8 LDR X8, [X22 + 0x20]
	0x0264BEFC MOV X22, X0
	0x0264BF00 LDR X8, [X8 + 0xC0]
	0x0264BF04 LDR X1, [X8 + 0x20]
	0x0264BF08 BL 0x2DC7C90
	0x0264BF0C STR X22, [X21 + 0x50]
	0x0264BF10 LDR X0, [X24]
	0x0264BF14 LDR W8, [X0 + 0xE0]
	0x0264BF18 CBNZ W8, 0x264BF20
	0x0264BF1C BL 0x1C16DFC
	0x0264BF20 MOV X0, X21
	0x0264BF24 MOV X1, X20
	0x0264BF28 MOV X2, X19
	0x0264BF2C LDP X20, X19, [X31 + 0x30]
	0x0264BF30 LDP X22, X21, [X31 + 0x20]
	0x0264BF34 LDP X24, X23, [X31 + 0x10]
	0x0264BF38 MOV X3, X31
	0x0264BF3C LDR X30, [X31], #0x40
	0x0264BF40 B 0x35CDABC
	0x0264BF44 STP X30, X25, [X31 - 0x40]!
	0x0264BF48 STP X24, X23, [X31 + 0x10]
	0x0264BF4C STP X22, X21, [X31 + 0x20]
	0x0264BF50 STP X20, X19, [X31 + 0x30]
	0x0264BF54 ADRP X24, 0x1D8F000
	0x0264BF58 ADRP X25, 0x1AA8000
	0x0264BF5C LDRB W8, [X24 + 0x13C]
	0x0264BF60 LDR X25, [X25 + 0x6C0]
	0x0264BF64 MOV X20, X4
	0x0264BF68 MOV W23, W3
	0x0264BF6C MOV X21, X2
	0x0264BF70 MOV X22, X1
	0x0264BF74 MOV X19, X0
	0x0264BF78 TBNZ X8, 0x0, 0x264BFB4
	0x0264BF7C ADRP X0, 0x1AD2000
	0x0264BF80 LDR X0, [X0 + 0x318]
	0x0264BF84 BL 0x1C16CF4
	0x0264BF88 ADRP X0, 0x1AD2000
	0x0264BF8C LDR X0, [X0 + 0x320]
	0x0264BF90 BL 0x1C16CF4
	0x0264BF94 ADRP X0, 0x1AD0000
	0x0264BF98 LDR X0, [X0 + 0xB60]
	0x0264BF9C BL 0x1C16CF4
	0x0264BFA0 ADRP X0, 0x1AA8000
	0x0264BFA4 LDR X0, [X0 + 0x6C0]
	0x0264BFA8 BL 0x1C16CF4
	0x0264BFAC MOVZ W8, 0x1
	0x0264BFB0 STRB W8, [X24 + 0x13C]
	0x0264BFB4 LDR X8, [X20 + 0x20]
	0x0264BFB8 LDR X0, [X25]
	0x0264BFBC LDR X8, [X8 + 0xC0]
	0x0264BFC0 LDR W9, [X0 + 0xE0]
	0x0264BFC4 LDR X24, [X8 + 0x18]
	0x0264BFC8 CBNZ W9, 0x264BFD0
	0x0264BFCC BL 0x1C16DFC
	0x0264BFD0 MOV X0, X24
	0x0264BFD4 MOV X1, X31
	0x0264BFD8 BL 0x338C698
	0x0264BFDC CBZ X0, 0x264C140
	0x0264BFE0 MOV X1, X31
	0x0264BFE4 MOV X24, X0
	0x0264BFE8 BL 0x33970C4
	0x0264BFEC TBNZ X0, 0x0, 0x264C02C
	0x0264BFF0 ADRP X8, 0x1AD0000
	0x0264BFF4 LDR X0, [X25]
	0x0264BFF8 LDR X8, [X8 + 0xB60]
	0x0264BFFC LDR W9, [X0 + 0xE0]
	0x0264C000 LDR X25, [X8]
	0x0264C004 CBNZ W9, 0x264C00C
	0x0264C008 BL 0x1C16DFC
	0x0264C00C MOV X0, X25
	0x0264C010 MOV X1, X31
	0x0264C014 BL 0x338C698
	0x0264C018 MOV X1, X0
	0x0264C01C MOV X0, X24
	0x0264C020 MOV X2, X31
	0x0264C024 BL 0x3395F0C
	0x0264C028 TBNZ X0, 0x0, 0x264C144
	0x0264C02C CBZ X19, 0x264C140
	0x0264C030 AND W3, W23, 0x1
	0x0264C034 MOV X0, X19
	0x0264C038 MOV X1, X22
	0x0264C03C MOV X2, X21
	0x0264C040 MOV X4, X31
	0x0264C044 BL 0x35CDD8C
	0x0264C048 LDR X20, [X19 + 0x30]
	0x0264C04C CBZ X20, 0x264C140
	0x0264C050 ADRP X10, 0x1AD1000
	0x0264C054 LDR X8, [X20]
	0x0264C058 LDR X10, [X10 + 0x318]
	0x0264C05C LDRH W9, [X8 + 0x12E]
	0x0264C060 LDR X1, [X10]
	0x0264C064 CBZ X9, 0x264C088
	0x0264C068 LDR X10, [X8 + 0xB0]
	0x0264C06C ADD X10, X10, 0x8
	0x0264C070 LDUR X11, [X10 - 0x8]
	0x0264C074 CMP X11, X1
	0x0264C078 B.EQ 0x264C098
	0x0264C07C SUBS X9, X9, 0x1
	0x0264C080 ADD X10, X10, 0x10
	0x0264C084 B.NE 0x264C070
	0x0264C088 MOVZ W2, 0x1
	0x0264C08C MOV X0, X20
	0x0264C090 BL 0x1C5C788
	0x0264C094 B 0x264C0A8
	0x0264C098 LDR W9, [X10]
	0x0264C09C ADD W9, W9, 0x1
	0x0264C0A0 ADD X8, X8, W9, 0x4, SXTW
	0x0264C0A4 ADD X0, X8, 0x138
	0x0264C0A8 LDP X8, X1, [X0]
	0x0264C0AC MOV X0, X20
	0x0264C0B0 BLR X8
	0x0264C0B4 CBZ X0, 0x264C140
	0x0264C0B8 ADRP X10, 0x1AD1000
	0x0264C0BC LDR X8, [X0]
	0x0264C0C0 LDR X10, [X10 + 0x320]
	0x0264C0C4 LDR X21, [X19 + 0x40]
	0x0264C0C8 MOV X20, X0
	0x0264C0CC LDRH W9, [X8 + 0x12E]
	0x0264C0D0 LDR X1, [X10]
	0x0264C0D4 CBZ X9, 0x264C0F8
	0x0264C0D8 LDR X10, [X8 + 0xB0]
	0x0264C0DC ADD X10, X10, 0x8
	0x0264C0E0 LDUR X11, [X10 - 0x8]
	0x0264C0E4 CMP X11, X1
	0x0264C0E8 B.EQ 0x264C108
	0x0264C0EC SUBS X9, X9, 0x1
	0x0264C0F0 ADD X10, X10, 0x10
	0x0264C0F4 B.NE 0x264C0E0
	0x0264C0F8 MOVZ W2, 0x4
	0x0264C0FC MOV X0, X20
	0x0264C100 BL 0x1C5C788
	0x0264C104 B 0x264C118
	0x0264C108 LDR W9, [X10]
	0x0264C10C ADD W9, W9, 0x4
	0x0264C110 ADD X8, X8, W9, 0x4, SXTW
	0x0264C114 ADD X0, X8, 0x138
	0x0264C118 LDP X8, X2, [X0]
	0x0264C11C MOV X0, X20
	0x0264C120 MOV X1, X21
	0x0264C124 BLR X8
	0x0264C128 STR W0, [X19 + 0x48]
	0x0264C12C LDP X20, X19, [X31 + 0x30]
	0x0264C130 LDP X22, X21, [X31 + 0x20]
	0x0264C134 LDP X24, X23, [X31 + 0x10]
	0x0264C138 LDP X30, X25, [X31], #0x40
	0x0264C13C RET
	0x0264C140 BL 0x1C16F20
	0x0264C144 LDR X8, [X20 + 0x20]
	0x0264C148 ADRP X0, 0x1AA7000
	0x0264C14C LDR X8, [X8 + 0xC0]
	0x0264C150 LDR X19, [X8 + 0x18]
	0x0264C154 LDR X0, [X0 + 0x6C0]
	0x0264C158 BL 0x1C16D08
	0x0264C15C BL 0x19903D0
	0x0264C160 MOV X0, X19
	0x0264C164 MOV X1, X31
	0x0264C168 BL 0x338C698
	0x0264C16C MOV X19, X0
	0x0264C170 BL 0x19903C0
	0x0264C174 LDR X8, [X19]
	0x0264C178 MOV X0, X19
	0x0264C17C LDR X9, [X8 + 0x2E8]
	0x0264C180 LDR X1, [X8 + 0x2F0]
	0x0264C184 BLR X9
	0x0264C188 MOV X19, X0
	0x0264C18C ADRP X0, 0x1AD1000
	0x0264C190 LDR X0, [X0 + 0x440]
	0x0264C194 BL 0x1C16D08
	0x0264C198 MOV X21, X0
	0x0264C19C ADRP X0, 0x1AA8000
	0x0264C1A0 LDR X0, [X0 + 0x608]
	0x0264C1A4 BL 0x1C16D08
	0x0264C1A8 MOV X2, X0
	0x0264C1AC MOV X0, X21
	0x0264C1B0 MOV X1, X19
	0x0264C1B4 MOV X3, X31
	0x0264C1B8 BL 0x32274B8
	0x0264C1BC MOV X19, X0
	0x0264C1C0 ADRP X0, 0x1AAF000
	0x0264C1C4 LDR X0, [X0 + 0x578]
	0x0264C1C8 BL 0x1C16D08
	0x0264C1CC BL 0x1C16F10
	0x0264C1D0 MOV X1, X19
	0x0264C1D4 MOV X2, X31
	0x0264C1D8 MOV X21, X0
	0x0264C1DC BL 0x3314A68
	0x0264C1E0 MOV X0, X21
	0x0264C1E4 MOV X1, X20
	0x0264C1E8 BL 0x1C16DEC
	0x0264C1EC STR X30, [X31 - 0x30]!
	0x0264C1F0 STP X22, X21, [X31 + 0x10]
	0x0264C1F4 STP X20, X19, [X31 + 0x20]
	0x0264C1F8 ADRP X22, 0x1D8E000
	0x0264C1FC LDRB W8, [X22 + 0x13D]
	0x0264C200 MOV X19, X2
	0x0264C204 MOV X20, X1
	0x0264C208 MOV X21, X0
	0x0264C20C TBNZ X8, 0x0, 0x264C224
	0x0264C210 ADRP X0, 0x1AA7000
	0x0264C214 LDR X0, [X0 + 0x750]
	0x0264C218 BL 0x1C16CF4
	0x0264C21C MOVZ W8, 0x1
	0x0264C220 STRB W8, [X22 + 0x13D]
	0x0264C224 CBZ X20, 0x264C3E8
	0x0264C228 ADRP X10, 0x1AA7000
	0x0264C22C LDR X8, [X20]
	0x0264C230 LDR X10, [X10 + 0x750]
	0x0264C234 LDRH W9, [X8 + 0x12E]
	0x0264C238 LDR X1, [X10]
	0x0264C23C CBZ X9, 0x264C260
	0x0264C240 LDR X10, [X8 + 0xB0]
	0x0264C244 ADD X10, X10, 0x8
	0x0264C248 LDUR X11, [X10 - 0x8]
	0x0264C24C CMP X11, X1
	0x0264C250 B.EQ 0x264C270
	0x0264C254 SUBS X9, X9, 0x1
	0x0264C258 ADD X10, X10, 0x10
	0x0264C25C B.NE 0x264C248
	0x0264C260 MOVZ W2, 0x2
	0x0264C264 MOV X0, X20
	0x0264C268 BL 0x1C5C788
	0x0264C26C B 0x264C280
	0x0264C270 LDR W9, [X10]
	0x0264C274 ADD W9, W9, 0x2
	0x0264C278 ADD X8, X8, W9, 0x4, SXTW
	0x0264C27C ADD X0, X8, 0x138
	0x0264C280 LDP X8, X1, [X0]
	0x0264C284 MOV X0, X20
	0x0264C288 BLR X8
	0x0264C28C AND W8, W0, 0xFF
	0x0264C290 CMP W8, 0x6
	0x0264C294 B.EQ 0x264C340
	0x0264C298 CMP W8, 0x3
	0x0264C29C B.EQ 0x264C350
	0x0264C2A0 CMP W8, 0x2
	0x0264C2A4 B.NE 0x264C3EC
	0x0264C2A8 LDR X8, [X19 + 0x20]
	0x0264C2AC LDR X8, [X8 + 0xC0]
	0x0264C2B0 LDR X0, [X8 + 0x38]
	0x0264C2B4 LDRB W8, [X0 + 0x135]
	0x0264C2B8 TBNZ X8, 0x0, 0x264C2C0
	0x0264C2BC BL 0x1C5C684
	0x0264C2C0 LDR X8, [X20]
	0x0264C2C4 LDRB W9, [X0 + 0x130]
	0x0264C2C8 LDRB W10, [X8 + 0x130]
	0x0264C2CC CMP W10, W9
	0x0264C2D0 B.CC 0x264C3E8
	0x0264C2D4 LDR X8, [X8 + 0xC8]
	0x0264C2D8 ADD X9, X8, X9, 0x3, LSL
	0x0264C2DC LDUR X9, [X9 - 0x8]
	0x0264C2E0 CMP X9, X0
	0x0264C2E4 B.NE 0x264C3E8
	0x0264C2E8 LDR X9, [X19 + 0x20]
	0x0264C2EC LDR X9, [X9 + 0xC0]
	0x0264C2F0 LDR X0, [X9 + 0x38]
	0x0264C2F4 LDRB W10, [X0 + 0x135]
	0x0264C2F8 TBNZ X10, 0x0, 0x264C310
	0x0264C2FC BL 0x1C5C684
	0x0264C300 LDR X8, [X20]
	0x0264C304 LDR X9, [X19 + 0x20]
	0x0264C308 LDR X8, [X8 + 0xC8]
	0x0264C30C LDR X9, [X9 + 0xC0]
	0x0264C310 LDRB W10, [X0 + 0x130]
	0x0264C314 LDR X1, [X9 + 0x50]
	0x0264C318 ADD X8, X8, X10, 0x3, LSL
	0x0264C31C LDUR X8, [X8 - 0x8]
	0x0264C320 CMP X8, X0
	0x0264C324 CSEL X8, X20, X31, EQ
	0x0264C328 LDR V0, [X8 + 0x1C]
	0x0264C32C MOV X0, X21
	0x0264C330 LDP X20, X19, [X31 + 0x20]
	0x0264C334 LDP X22, X21, [X31 + 0x10]
	0x0264C338 LDR X30, [X31], #0x30
	0x0264C33C B 0x264C48C

ISIL:
	001 Subtract X31, X31, 336
	002 Move [X31+208], D15
	003 Move [X31+216], D14
	004 Move [X31+224], D13
	005 Move [X31+232], D12
	006 Move [X31+240], D11
	007 Move [X31+248], D10
	008 Move [X31+256], D9
	009 Move [X31+264], D8
	010 Move [X31+272], X29
	011 Move [X31+280], X30
	012 Move [X31+288], X24
	013 Move [X31+296], X23
	014 Move [X31+304], X22
	015 Move [X31+312], X21
	016 Move [X31+320], X20
	017 Move [X31+328], X19
	018 NotImplemented "Instruction MRS not yet implemented."
	019 Move X8, [X23+40]
	020 Move X21, 0x1D90000
	021 Move X20, X1
	022 Move V9, V0
	023 Move [X31+200], X8
	024 Move W8, [X21+310]
	025 Move X19, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {47}
	030 Move X0, 0x1AD3000
	031 Move X0, [X0+1264]
	032 Call 0x1C17CF4
	033 Move X0, 0x1AAA000
	034 Move X0, [X0+2520]
	035 Call 0x1C17CF4
	036 Move X0, 0x1AD3000
	037 Move X0, [X0+1424]
	038 Call 0x1C17CF4
	039 Move X0, 0x1AD3000
	040 Move X0, [X0+488]
	041 Call 0x1C17CF4
	042 Move X0, 0x1AD3000
	043 Move X0, [X0+1432]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X21+310], W8
	047 NotImplemented "Instruction MOVI not yet implemented."
	048 Move [X31+160], X31
	049 Move [X31+128], V0
	050 Move [X31+136], V0
	051 Move [X31+96], V0
	052 Move [X31+104], V0
	053 Move [X31+64], V0
	054 Move [X31+72], V0
	055 Move [X31+3], V0
	056 Compare X19, 0
	057 JumpIfEqual {331}
	058 Move X8, [X19]
	059 Move X0, X19
	060 Move X9, [X8+616]
	061 Move X1, [X8+624]
	062 NotImplemented "Instruction BLR not yet implemented."
	063 Move X21, [X19+56]
	064 Compare X21, 0
	065 JumpIfEqual {331}
	066 Move X10, 0x1AD3000
	067 Move X8, [X21]
	068 Move X10, [X10+1424]
	069 NotImplemented "Instruction LDRH not yet implemented."
	070 Move X1, [X10]
	071 Compare X9, 0
	072 JumpIfEqual {79}
	073 Move X10, [X8+176]
	074 Add X10, X10, 8
	075 NotImplemented "Instruction LDUR not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Subtract X9, X9, 1
	078 Add X10, X10, 16
	079 Move W2, 3
	080 Move X0, X21
	081 Call 0x1C5D788
	082 Move W9, [X10]
	083 Add W9, W9, 3
	084 Add X8, X8, W9
	085 Add X0, X8, 312
	086 Move X8, [X0]
	087 Move X1, [X0+8]
	088 Move X0, X21
	089 NotImplemented "Instruction BLR not yet implemented."
	090 Move X8, [X19+48]
	091 Compare X8, 0
	092 JumpIfEqual {331}
	093 Move X9, [X20+32]
	094 Move X21, X0
	095 Move X0, X8
	096 Move W1, W21
	097 Move X9, [X9+192]
	098 Move X2, [X9+80]
	099 Call 0x2647CC0, X0, X1
	100 Compare X0, 0
	101 JumpIfEqual {120}
	102 And W8, W21, 255
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Add X24, X31, 168
	105 Move W8, [X19+40]
	106 Compare W8, 0
	107 JumpIfEqual {161}
	108 Move S10, [X19+68]
	109 Move S11, [X19+72]
	110 Move S12, [X19+76]
	111 Move S3, [X19+80]
	112 Move V14, V11
	113 Move V8, V3
	114 Move V13, V12
	115 Move V15, V10
	116 Move V2, V12
	117 Move V1, V11
	118 Move V0, V10
	119 Move [X31+44], S3
	120 Move X8, 0x1AD2000
	121 Move X8, [X8+1264]
	122 Move X0, [X8]
	123 Move W8, [X0+224]
	124 Compare W8, 0
	125 JumpIfNotEqual {127}
	126 Call 0x1C17DFC
	127 Move W0, W21
	128 Move X1, X31
	129 Call AffordanceStateShortcuts.GetNameForIndex, X0
	130 Move X8, 0x1AA9000
	131 Move X8, [X8+2520]
	132 Move X20, X0
	133 Add X1, X31, 168
	134 Move [X31+168], W21
	135 Move X0, [X8]
	136 Call 0x1C17E04
	137 Move X8, 0x1AD2000
	138 Move X8, [X8+1432]
	139 Move X1, X0
	140 Move X2, X20
	141 Move X3, X19
	142 Move X8, [X8]
	143 Move X4, X31
	144 Move X0, X8
	145 Call String.Format, X0, X1, X2, X3
	146 Move X8, 0x1AD2000
	147 Move X8, [X8+488]
	148 Move X20, X0
	149 Move X8, [X8]
	150 Move W9, [X8+224]
	151 Compare W9, 0
	152 JumpIfNotEqual {155}
	153 Move X0, X8
	154 Call 0x1C17DFC
	155 Move X0, X20
	156 Move X1, X19
	157 Move X2, X31
	158 Call XRLoggingUtils.LogError, X0, X1
	159 Move X0, X31
	160 Move X1, X31
	161 Move S12, [X19+76]
	162 Move S4, [X19+80]
	163 Move S13, [X0+48]
	164 Move S8, [X0+52]
	165 Move S15, [X0+40]
	166 Move S14, [X0+44]
	167 Move S2, [X0+32]
	168 Move S3, [X0+36]
	169 Move S0, [X0+24]
	170 Move S1, [X0+28]
	171 Move S10, [X19+68]
	172 Move S11, [X19+72]
	173 Move [X31+44], S4
	174 Move [X31+168], X31
	175 Move [X31+176], X31
	176 Move [X24+23], X31
	177 Move [X31+184], X31
	178 Move X8, [X19]
	179 Move X0, X19
	180 Move X9, [X8+648]
	181 Move X1, [X8+656]
	182 NotImplemented "Instruction BLR not yet implemented."
	183 Move X8, [X19]
	184 Move [X31+36], S1
	185 Move [X31+44], S0
	186 Move [X31+28], S3
	187 Move [X31+36], S2
	188 Move X0, X19
	189 Move X9, [X8+648]
	190 Move X1, [X8+656]
	191 Move V0, V15
	192 Move V1, V14
	193 Move V2, V13
	194 Move V3, V8
	195 NotImplemented "Instruction BLR not yet implemented."
	196 Move V8, V0
	197 NotImplemented "Instruction LDUR not yet implemented."
	198 Move X8, [X19+120]
	199 Move X0, X19
	200 Move V13, V1
	201 Move [X31+175], V0
	202 Move [X24+23], X8
	203 Move X8, [X19]
	204 Move V14, V2
	205 Move V15, V3
	206 Move X9, [X8+456]
	207 Move X1, [X8+464]
	208 NotImplemented "Instruction BLR not yet implemented."
	209 Compare X0, 0
	210 JumpIfEqual {331}
	211 Move X8, [X20+32]
	212 Move X22, X0
	213 Move X8, [X8+192]
	214 Move X1, [X8+144]
	215 Move W8, [X1+309]
	216 Move TEMP, X8
	217 And TEMP, TEMP, 1
	218 Compare TEMP, 1
	219 JumpIfEqual {223}
	220 Move X0, X1
	221 Call 0x1C5D684
	222 Move X1, X0
	223 Move X8, [X22]
	224 Move [X31+20], S13
	225 Move [X31+28], S9
	226 Move [X31+12], S15
	227 Move [X31+20], S14
	228 NotImplemented "Instruction LDRH not yet implemented."
	229 Compare X9, 0
	230 JumpIfEqual {237}
	231 Move X10, [X8+176]
	232 Add X10, X10, 8
	233 NotImplemented "Instruction LDUR not yet implemented."
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Subtract X9, X9, 1
	236 Add X10, X10, 16
	237 Move W2, 3
	238 Move X0, X22
	239 Move V13, V8
	240 Move V8, V12
	241 Move V15, V11
	242 Move V14, V10
	243 Call 0x1C5D788
	244 Move W9, [X10]
	245 Move V13, V8
	246 Move V8, V12
	247 Move V15, V11
	248 Add W9, W9, 3
	249 Add X8, X8, W9
	250 Move V14, V10
	251 Add X0, X8, 312
	252 Move X8, [X0]
	253 Move X1, [X0+8]
	254 Move X0, X22
	255 Move X21, X21
	256 ShiftRight X21, 8
	257 And X21, X21, 0x7FFFFFFF
	258 NotImplemented "Instruction BLR not yet implemented."
	259 Move X8, [X20+32]
	260 Move X0, X19
	261 Move V9, V0
	262 Move V10, V1
	263 Move X8, [X8+192]
	264 Move V11, V2
	265 Move V12, V3
	266 Move X1, [X8+160]
	267 Call 0x264C3E8, X0
	268 Move V0, [X31+44]
	269 Move V4, [X31+40]
	270 NotImplemented "Instruction LDUR not yet implemented."
	271 Move [X31+48], S14
	272 Move [X31+56], S15
	273 Move [X31+56], S8
	274 Move [X31+64], S0
	275 Move V0, [X31+36]
	276 Move [X31+96], W21
	277 Move [X31+128], S9
	278 Move [X31+136], S10
	279 Move [X31+136], S11
	280 Move [X31+144], S12
	281 Move [X31+64], S4
	282 Move [X31+72], S0
	283 Move V4, [X31+32]
	284 Move S2, [X31+24]
	285 Move S0, [X31+28]
	286 Move [X31+148], W31
	287 Move [X31+152], X0
	288 Move [X31+160], X1
	289 Add X1, X31, 48
	290 Move [X31+72], S4
	291 Move [X31+80], S0
	292 Move V0, [X31+20]
	293 Move V4, [X31+16]
	294 Move [X31+144], S2
	295 Move X0, X19
	296 Move [X31+80], S13
	297 Move [X31+88], S0
	298 Move V0, [X31+12]
	299 Move [X31+88], S4
	300 Move [X31+96], S0
	301 NotImplemented "Instruction LDUR not yet implemented."
	302 Move [X31+97], V0
	303 Move [X31+7], V1
	304 Move X8, [X19]
	305 Move X9, [X8+712]
	306 Move X2, [X8+720]
	307 NotImplemented "Instruction BLR not yet implemented."
	308 Move [X19+128], X0
	309 Move [X19+136], X1
	310 Move X8, [X23+40]
	311 Move X9, [X31+200]
	312 NotImplemented "Instruction CMP not yet implemented."
	313 Move X20, [X31+320]
	314 Move X19, [X31+328]
	315 Move X22, [X31+304]
	316 Move X21, [X31+312]
	317 Move X24, [X31+288]
	318 Move X23, [X31+296]
	319 Move X29, [X31+272]
	320 Move X30, [X31+280]
	321 Move D9, [X31+256]
	322 Move D8, [X31+264]
	323 Move D11, [X31+240]
	324 Move D10, [X31+248]
	325 Move D13, [X31+224]
	326 Move D12, [X31+232]
	327 Move D15, [X31+208]
	328 Move D14, [X31+216]
	329 Add X31, X31, 336
	330 Return X0
	331 Call 0x1C17F20
	332 Call 0x3EB2B20

Method: System.Void UpdateStateFromCompletedJob()

Disassembly:
	0x0264C340 LDP X20, X19, [X31 + 0x20]
	0x0264C344 LDP X22, X21, [X31 + 0x10]
	0x0264C348 LDR X30, [X31], #0x30
	0x0264C34C RET
	0x0264C350 LDR X8, [X19 + 0x20]
	0x0264C354 LDR X8, [X8 + 0xC0]
	0x0264C358 LDR X0, [X8 + 0x38]
	0x0264C35C LDRB W8, [X0 + 0x135]
	0x0264C360 TBNZ X8, 0x0, 0x264C368
	0x0264C364 BL 0x1C5C684
	0x0264C368 LDR X8, [X20]
	0x0264C36C LDRB W9, [X0 + 0x130]
	0x0264C370 LDRB W10, [X8 + 0x130]
	0x0264C374 CMP W10, W9
	0x0264C378 B.CC 0x264C3E8
	0x0264C37C LDR X8, [X8 + 0xC8]
	0x0264C380 ADD X9, X8, X9, 0x3, LSL
	0x0264C384 LDUR X9, [X9 - 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+144]
	004 Compare W8, 0
	005 JumpIfEqual {22}
	006 Move X8, [X1+32]
	007 Move X19, X0
	008 Move X8, [X8+192]
	009 Move X1, [X8+160]
	010 Call 0x264C3E8, X0
	011 Move X8, [X19]
	012 Move S2, [X0+8]
	013 Move S3, [X0+12]
	014 Move S0, [X0]
	015 Move S1, [X0+4]
	016 Move X0, X19
	017 Move X2, [X8+584]
	018 Move X1, [X8+592]
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 CallNoReturn X2
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Return 

Method: Unity.Jobs.JobHandle ScheduleTweenJob(ref UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Jobs.TweenJobData`1<T> jobData)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void OnAffordanceThemeChanged(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Theme.BaseAffordanceTheme`1<T> newValue)

Disassembly:
	0x0264C388 CMP X9, X0
	0x0264C38C B.NE 0x264C3E8
	0x0264C390 LDR X9, [X19 + 0x20]
	0x0264C394 LDR X9, [X9 + 0xC0]
	0x0264C398 LDR X0, [X9 + 0x38]
	0x0264C39C LDRB W10, [X0 + 0x135]
	0x0264C3A0 TBNZ X10, 0x0, 0x264C3B8
	0x0264C3A4 BL 0x1C5C684
	0x0264C3A8 LDR X8, [X20]
	0x0264C3AC LDR X9, [X19 + 0x20]
	0x0264C3B0 LDR X8, [X8 + 0xC8]
	0x0264C3B4 LDR X9, [X9 + 0xC0]
	0x0264C3B8 LDRB W10, [X0 + 0x130]
	0x0264C3BC LDR X1, [X9 + 0x58]
	0x0264C3C0 ADD X8, X8, X10, 0x3, LSL
	0x0264C3C4 LDUR X8, [X8 - 0x8]
	0x0264C3C8 CMP X8, X0
	0x0264C3CC CSEL X8, X20, X31, EQ
	0x0264C3D0 LDR V0, [X8 + 0x1C]
	0x0264C3D4 MOV X0, X21
	0x0264C3D8 LDP X20, X19, [X31 + 0x20]
	0x0264C3DC LDP X22, X21, [X31 + 0x10]
	0x0264C3E0 LDR X30, [X31], #0x30
	0x0264C3E4 B 0x264CE70

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {29}
	006 Move X8, [X2+32]
	007 Move X19, X1
	008 Move X20, X0
	009 Move X8, [X8+192]
	010 Move X8, [X8+200]
	011 Move X8, [X8+32]
	012 Move X8, [X8+192]
	013 Move X2, [X8+112]
	014 Call 0x2643574, X0, X1
	015 Compare X19, 0
	016 JumpIfEqual {29}
	017 Move X0, X19
	018 Add X20, X20, 104
	019 Call 0x26473EC, X0
	020 Move X1, X0
	021 Move X0, X20
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move W2, 1024
	025 Move X3, X31
	026 Move X30, [X31+32]
	027 Call NativeCurve.Update, X0, X1, X2
	028 Return 
	029 Call 0x1C17F20

Method: Unity.Collections.NativeArray`1<T> GetJobOutputStore()

Disassembly:
	0x0264C3E8 BL 0x1C16F20
	0x0264C3EC MOV X0, X20
	0x0264C3F0 BL 0x19903C0
	0x0264C3F4 ADRP X0, 0x1AA7000
	0x0264C3F8 LDR X0, [X0 + 0x750]
	0x0264C3FC BL 0x1C16D08
	0x0264C400 MOV X1, X0
	0x0264C404 MOVZ W0, 0x2
	0x0264C408 MOV X2, X20
	0x0264C40C BL 0x19963F0
	0x0264C410 STRB W0, [X31 + 0xC]
	0x0264C414 ADRP X0, 0x1AD1000
	0x0264C418 LDR X0, [X0 + 0x328]
	0x0264C41C BL 0x1C16D08
	0x0264C420 ADD X1, X31, 0xC
	0x0264C424 BL 0x1C16E04
	0x0264C428 MOV X20, X0
	0x0264C42C ADRP X0, 0x1AD1000
	0x0264C430 LDR X0, [X0 + 0x330]
	0x0264C434 BL 0x1C16D08
	0x0264C438 MOV X21, X0
	0x0264C43C ADRP X0, 0x1AD1000
	0x0264C440 LDR X0, [X0 + 0x448]
	0x0264C444 BL 0x1C16D08
	0x0264C448 MOV X2, X0
	0x0264C44C MOV X0, X21
	0x0264C450 MOV X1, X20
	0x0264C454 MOV X3, X31
	0x0264C458 BL 0x3227BD4

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move W8, [X0+144]
	006 Move X19, X0
	007 Compare W8, 0
	008 JumpIfNotEqual {31}
	009 Move X20, X1
	010 Move X0, X19
	011 Move X1, X31
	012 Call Behaviour.get_enabled, X0
	013 Move TEMP, X0
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {31}
	017 Move [X31], X31
	018 Move [X31+8], X31
	019 Move X8, [X20+32]
	020 Add X0, X31, 0
	021 Move W1, 1
	022 Move W2, 4
	023 Move X8, [X8+192]
	024 Move W3, 1
	025 Move W20, 1
	026 Move X4, [X8+216]
	027 Call NativeArray`1<Color>..ctor, X0, X1, X2, X3
	028 Move V0, [X31]
	029 Move [X19+144], W20
	030 Move [X19+88], V0
	031 Move X0, [X19+88]
	032 Move X1, [X19+96]
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X30, [X31+16]
	036 Add X31, X31, 48
	037 Return X0

Method: System.Void .ctor()

Disassembly:
	0x0264C45C MOV X20, X0

ISIL:
	001 Call 0x2643AF4, X0
	002 Return 

