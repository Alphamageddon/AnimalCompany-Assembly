Type: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Receiver.BaseAffordanceStateReceiver`1

Method: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State.BaseAffordanceStateProvider get_affordanceStateProvider()

Disassembly:
	0x02643194 BL 0x32333E0
	0x02643198 CMP X27, 0x0

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_affordanceStateProvider(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State.BaseAffordanceStateProvider value)

Disassembly:
	0x0264319C CSEL X24, X23, X24, EQ
	0x026431A0 CSEL X25, X25, X23, EQ

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.Boolean get_replaceIdleStateValueWithInitialValue()

Disassembly:
	0x026431A4 MOV X28, X29
	0x026431A8 CBZ X27, 0x2643200

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_replaceIdleStateValueWithInitialValue(System.Boolean value)

Disassembly:
	0x026431AC ADRP X8, 0x1AB1000
	0x026431B0 LDR X8, [X8 + 0x9D8]
	0x026431B4 ADD X1, X31, 0x18

ISIL:
	001 And W8, W1, 1
	002 Move [X0+40], W8
	003 Return 

Method: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Theme.BaseAffordanceTheme`1<T> get_affordanceTheme()

Disassembly:
	0x026431B8 STRB W26, [X31 + 0x18]
	0x026431BC LDR X0, [X8]

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_affordanceTheme(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Theme.BaseAffordanceTheme`1<T> value)

Disassembly:
	0x026431C0 BL 0x1C16E04
	0x026431C4 ADRP X8, 0x1ADA000
	0x026431C8 LDR X2, [X27 + 0x10]
	0x026431CC LDR X8, [X8 + 0x500]
	0x026431D0 MOV X1, X0

ISIL:
	001 Move X8, [X0]
	002 Move [X0+48], X1
	003 Move X3, [X8+552]
	004 Move X2, [X8+560]
	005 CallNoReturn X3

Method: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Theme.BaseAffordanceTheme`1<T> get_defaultAffordanceTheme()

Disassembly:
	

ISIL:
No ISIL was generated
Method: Unity.XR.CoreUtils.Bindings.Variables.BindableVariable`1<T> get_affordanceValue()

Disassembly:
	

ISIL:
No ISIL was generated
Method: Unity.XR.CoreUtils.Bindings.Variables.IReadOnlyBindableVariable`1<T> get_currentAffordanceValue()

Disassembly:
	0x026431D4 MOV X3, X31
	0x026431D8 LDR X8, [X8]
	0x026431DC MOV X0, X8

ISIL:
	001 Move X8, [X0]
	002 Move X2, [X8+456]
	003 Move X1, [X8+464]
	004 CallNoReturn X2

Method: Unity.XR.CoreUtils.Bindings.Variables.IReadOnlyBindableVariable`1<UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State.AffordanceStateData> get_currentAffordanceStateData()

Disassembly:
	0x026431E0 BL 0x3227BD4
	0x026431E4 CBZ X25, 0x264334C

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: T get_initialValue()

Disassembly:
	0x026431E8 MOV X1, X0
	0x026431EC MOV X0, X25
	0x026431F0 MOV X2, X31

ISIL:
	001 Move S0, [X0+68]
	002 Move S1, [X0+72]
	003 Move S2, [X0+76]
	004 Move S3, [X0+80]
	005 Return X0

Method: System.Void set_initialValue(T value)

Disassembly:
	0x026431F4 BL 0x32338A8
	0x026431F8 ADD W19, W19, 0x1
	0x026431FC B 0x264321C

ISIL:
	001 Move [X0+68], S0
	002 Move [X0+76], S1
	003 Move [X0+76], S2
	004 Move [X0+84], S3
	005 Return 

Method: System.Boolean get_initialValueCaptured()

Disassembly:
	0x02643200 CBZ X24, 0x264334C
	0x02643204 ADRP X8, 0x1ADA000

ISIL:
	001 Move W0, [X0+84]
	002 Return X0

Method: System.Void set_initialValueCaptured(System.Boolean value)

Disassembly:
	0x02643208 LDR X8, [X8 + 0x4F8]
	0x0264320C MOV X0, X24
	0x02643210 MOV X2, X31

ISIL:
	001 And W8, W1, 1
	002 Move [X0+84], W8
	003 Return 

Method: System.Void Awake()

Disassembly:
	0x02643214 LDR X1, [X8]
	0x02643218 BL 0x32338A8
	0x0264321C ADD W26, W26, 0x1
	0x02643220 B 0x26430BC
	0x02643224 LDR W8, [X0 + 0xE0]
	0x02643228 CBNZ W8, 0x2643230
	0x0264322C BL 0x1C16DFC
	0x02643230 LDRB W8, [X21 + 0x138]
	0x02643234 CBNZ W8, 0x264324C
	0x02643238 ADRP X0, 0x1ADA000
	0x0264323C LDR X0, [X0 + 0x4F0]
	0x02643240 BL 0x1C16CF4
	0x02643244 MOVZ W8, 0x1
	0x02643248 STRB W8, [X21 + 0x138]
	0x0264324C LDR X0, [X20]
	0x02643250 LDR W8, [X0 + 0xE0]
	0x02643254 CBNZ W8, 0x2643260
	0x02643258 BL 0x1C16DFC
	0x0264325C LDR X0, [X20]
	0x02643260 LDR X8, [X0 + 0xB8]
	0x02643264 ADRP X9, 0x1AB1000
	0x02643268 ADD X1, X31, 0x14
	0x0264326C LDRB W8, [X8 + 0x18]
	0x02643270 LDR X9, [X9 + 0x9D8]
	0x02643274 STRB W8, [X31 + 0x14]
	0x02643278 LDR X0, [X9]
	0x0264327C BL 0x1C16E04
	0x02643280 ADRP X8, 0x1AB0000
	0x02643284 LDR X8, [X8 + 0x758]
	0x02643288 MOV X20, X0
	0x0264328C ADD X1, X31, 0x10
	0x02643290 STR W19, [X31 + 0x10]
	0x02643294 LDR X0, [X8]
	0x02643298 BL 0x1C16E04
	0x0264329C ADRP X8, 0x1ADA000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1D98000
	006 Move X20, 0x1AB1000
	007 Move W8, [X21+238]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x1ADB000
	015 Move X0, [X0+1248]
	016 Call 0x1C17CF4
	017 Move X0, 0x1AB1000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+238], W8
	022 Move X0, [X20]
	023 Move X20, [X19+32]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {42}
	036 Move X8, 0x1ADB000
	037 Move X8, [X8+1248]
	038 Move X0, X19
	039 Move X1, [X8]
	040 Call 0x21A4F50, X0
	041 Move [X19+32], X0
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Return 

Method: System.Void OnEnable()

Disassembly:
	0x026432A0 LDR X8, [X8 + 0x508]
	0x026432A4 MOV X2, X0
	0x026432A8 MOV X1, X20
	0x026432AC MOV X3, X31

ISIL:
	001 Move X8, [X1+32]
	002 Move X8, [X8+192]
	003 Move X1, [X8+56]
	004 Call 0x264342C, X0
	005 Return 

Method: System.Void OnDisable()

Disassembly:
	0x026432B0 LDR X8, [X8]
	0x026432B4 MOV X0, X8
	0x026432B8 BL 0x3227BD4
	0x026432BC ADRP X8, 0x1ADA000
	0x026432C0 LDR X8, [X8 + 0x520]
	0x026432C4 MOV X20, X0
	0x026432C8 MOV X1, X23
	0x026432CC MOV X2, X31
	0x026432D0 LDR X8, [X8]
	0x026432D4 MOV X0, X8
	0x026432D8 BL 0x321EFD0
	0x026432DC ADRP X8, 0x1ADA000
	0x026432E0 LDR X8, [X8 + 0x518]
	0x026432E4 MOV X2, X0
	0x026432E8 MOV X1, X20
	0x026432EC MOV X3, X31
	0x026432F0 LDR X8, [X8]
	0x026432F4 MOV X0, X8
	0x026432F8 BL 0x32274B8
	0x026432FC ADRP X8, 0x1AB0000
	0x02643300 LDR X8, [X8 + 0xA28]
	0x02643304 MOV X20, X0
	0x02643308 LDR X8, [X8]
	0x0264330C LDR W9, [X8 + 0xE0]
	0x02643310 CBNZ W9, 0x264331C
	0x02643314 MOV X0, X8
	0x02643318 BL 0x1C16DFC
	0x0264331C LDR X1, [X31 + 0x8]
	0x02643320 MOV X0, X20
	0x02643324 MOV X2, X31
	0x02643328 BL 0x3C06B0C
	0x0264332C LDP X20, X19, [X31 + 0x70]
	0x02643330 LDP X22, X21, [X31 + 0x60]
	0x02643334 LDP X24, X23, [X31 + 0x50]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1D98000
	006 Move X20, 0x1AB1000
	007 Move W8, [X21+239]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x1AB1000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+239], W8
	019 Move X0, [X20]
	020 Move X20, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {44}
	033 Move X0, [X19+32]
	034 Compare X0, 0
	035 JumpIfEqual {49}
	036 Move X1, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X2, X31
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call BaseAffordanceStateProvider.UnregisterAffordanceReceiver, X0, X1
	043 Return 
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return 
	049 Call 0x1C17F20

Method: System.Void Start()

Disassembly:
	0x02643338 LDP X26, X25, [X31 + 0x40]
	0x0264333C LDP X28, X27, [X31 + 0x30]
	0x02643340 LDP X29, X30, [X31 + 0x20]
	0x02643344 ADD X31, X31, 0x80
	0x02643348 RET
	0x0264334C BL 0x1C16F20
	0x02643350 STP X30, X21, [X31 - 0x20]!
	0x02643354 STP X20, X19, [X31 + 0x10]
	0x02643358 ADRP X21, 0x1D97000
	0x0264335C LDRB W8, [X21 + 0xFA]
	0x02643360 MOV X19, X2
	0x02643364 MOV X20, X0
	0x02643368 TBNZ X8, 0x0, 0x2643380
	0x0264336C ADRP X0, 0x1ADA000
	0x02643370 LDR X0, [X0 + 0x528]
	0x02643374 BL 0x1C16CF4
	0x02643378 MOVZ W8, 0x1
	0x0264337C STRB W8, [X21 + 0xFA]
	0x02643380 LDR X0, [X20 + 0x38]
	0x02643384 CBZ X0, 0x26433A4
	0x02643388 ADRP X8, 0x1ADA000
	0x0264338C LDR X8, [X8 + 0x528]
	0x02643390 AND X1, X19, 0xFFFF
	0x02643394 LDP X20, X19, [X31 + 0x10]
	0x02643398 LDR X2, [X8]
	0x0264339C LDP X30, X21, [X31], #0x20
	0x026433A0 B 0x28CB44C
	0x026433A4 BL 0x1C16F20
	0x026433A8 STR D8, [X31 - 0x20]!
	0x026433AC STR X30, [X31 + 0x8]
	0x026433B0 STP X20, X19, [X31 + 0x10]
	0x026433B4 LDR X8, [X0]
	0x026433B8 MOV X20, X1
	0x026433BC MOV X19, X0
	0x026433C0 MOV V8.16B, V0.16B
	0x026433C4 LDP X9, X1, [X8 + 0x1C8]
	0x026433C8 BLR X9
	0x026433CC CBZ X0, 0x2643408
	0x026433D0 LDR X8, [X20 + 0x20]
	0x026433D4 MOV V0.16B, V8.16B
	0x026433D8 LDR X8, [X8 + 0xC0]
	0x026433DC LDR X1, [X8 + 0x90]
	0x026433E0 BL 0x28CEFC0
	0x026433E4 LDR X8, [X19]
	0x026433E8 MOV X0, X19
	0x026433EC LDP X20, X19, [X31 + 0x10]
	0x026433F0 LDR X30, [X31 + 0x8]
	0x026433F4 LDR X2, [X8 + 0x258]
	0x026433F8 LDR X1, [X8 + 0x260]
	0x026433FC MOV V0.16B, V8.16B
	0x02643400 LDR V8, [X31], #0x20
	0x02643404 BR X2
	0x02643408 BL 0x1C16F20
	0x0264340C STR X30, [X31 - 0x20]!
	0x02643410 STP X20, X19, [X31 + 0x10]
	0x02643414 LDRB W8, [X0 + 0x48]
	0x02643418 CBNZ W8, 0x2643468
	0x0264341C LDR X8, [X0]
	0x02643420 MOV X20, X1
	0x02643424 MOV X19, X0
	0x02643428 LDR X9, [X8 + 0x278]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1D98000
	007 Move X21, 0x1AB1000
	008 Move W8, [X22+240]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x1AB1000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move X0, 0x1ADB000
	020 Move X0, [X0+488]
	021 Call 0x1C17CF4
	022 Move X0, 0x1ADB000
	023 Move X0, [X0+1256]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+240], W8
	027 Move X8, [X20+32]
	028 Move X0, X19
	029 Move X8, [X8+192]
	030 Move X1, [X8+56]
	031 Call 0x264342C, X0
	032 Move X0, [X21]
	033 Move X20, [X19+32]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X20
	039 Move X1, X31
	040 Move X2, X31
	041 Call Object.op_Equality, X0, X1
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {71}
	046 Move X8, 0x1ADB000
	047 Move X8, [X8+1256]
	048 Move X20, 0x1ADB000
	049 Move X1, X19
	050 Move X2, X31
	051 Move X0, [X8]
	052 Move X20, [X20+488]
	053 Call String.Format, X0, X1
	054 Move X8, [X20]
	055 Move X20, X0
	056 Move W9, [X8+224]
	057 Compare W9, 0
	058 JumpIfNotEqual {61}
	059 Move X0, X8
	060 Call 0x1C17DFC
	061 Move X0, X20
	062 Move X1, X19
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move X2, X31
	068 Move X30, [X31+48]
	069 Call XRLoggingUtils.LogError, X0, X1
	070 Return 
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X22, [X31+16]
	074 Move X21, [X31+24]
	075 Move X30, [X31+48]
	076 Return 

Method: System.Void Initialize()

Disassembly:
	0x0264342C LDR X1, [X8 + 0x280]
	0x02643430 BLR X9
	0x02643434 LDR X8, [X19]
	0x02643438 STR S0, [X19 + 0x44]
	0x0264343C MOV X0, X19
	0x02643440 LDP X9, X1, [X8 + 0x1C8]
	0x02643444 BLR X9
	0x02643448 CBZ X0, 0x2643474
	0x0264344C LDR X8, [X20 + 0x20]
	0x02643450 LDR V0, [X19 + 0x44]
	0x02643454 LDR X8, [X8 + 0xC0]
	0x02643458 LDR X1, [X8 + 0x90]
	0x0264345C BL 0x28CEFC0
	0x02643460 MOVZ W8, 0x1
	0x02643464 STRB W8, [X19 + 0x48]
	0x02643468 LDP X20, X19, [X31 + 0x10]
	0x0264346C LDR X30, [X31], #0x20
	0x02643470 RET
	0x02643474 BL 0x1C16F20
	0x02643478 STR X30, [X31 - 0x10]!
	0x0264347C LDR X8, [X0]
	0x02643480 LDP X9, X1, [X8 + 0x1C8]
	0x02643484 BLR X9
	0x02643488 CBZ X0, 0x2643498
	0x0264348C LDR V0, [X0 + 0x18]
	0x02643490 LDR X30, [X31], #0x10
	0x02643494 RET
	0x02643498 BL 0x1C16F20
	0x0264349C RET
	0x026434A0 STR X30, [X31 - 0x30]!
	0x026434A4 STP X22, X21, [X31 + 0x10]
	0x026434A8 STP X20, X19, [X31 + 0x20]
	0x026434AC ADRP X21, 0x1D97000
	0x026434B0 ADRP X22, 0x1ADA000
	0x026434B4 ADRP X20, 0x1ADA000
	0x026434B8 LDRB W8, [X21 + 0xFB]
	0x026434BC LDR X22, [X22 + 0x530]
	0x026434C0 LDR X20, [X20 + 0x538]
	0x026434C4 MOV X19, X0
	0x026434C8 TBNZ X8, 0x0, 0x26434EC
	0x026434CC ADRP X0, 0x1ADA000
	0x026434D0 LDR X0, [X0 + 0x538]
	0x026434D4 BL 0x1C16CF4
	0x026434D8 ADRP X0, 0x1ADA000
	0x026434DC LDR X0, [X0 + 0x530]
	0x026434E0 BL 0x1C16CF4
	0x026434E4 MOVZ W8, 0x1
	0x026434E8 STRB W8, [X21 + 0xFB]
	0x026434EC LDR X0, [X22]
	0x026434F0 BL 0x1C16F10
	0x026434F4 LDR X5, [X20]
	0x026434F8 MOVZ W2, 0x1
	0x026434FC MOV X1, X31
	0x02643500 MOV X3, X31
	0x02643504 MOV W4, W31
	0x02643508 MOV X20, X0
	0x0264350C BL 0x28E275C
	0x02643510 STR X20, [X19 + 0x38]
	0x02643514 MOV X0, X19
	0x02643518 LDP X20, X19, [X31 + 0x20]
	0x0264351C LDP X22, X21, [X31 + 0x10]
	0x02643520 MOV X1, X31
	0x02643524 LDR X30, [X31], #0x30
	0x02643528 B 0x3C36C30
	0x0264352C STR X30, [X31 - 0x10]!
	0x02643530 LDR X8, [X1 + 0x20]
	0x02643534 LDR X8, [X8 + 0xC0]
	0x02643538 LDR X8, [X8]
	0x0264353C LDR X1, [X8 + 0x80]
	0x02643540 BL 0x1C16D18
	0x02643544 LDR X0, [X0]
	0x02643548 LDR X30, [X31], #0x10
	0x0264354C RET
	0x02643550 STP X30, X21, [X31 - 0x20]!
	0x02643554 STP X20, X19, [X31 + 0x10]
	0x02643558 LDR X8, [X2 + 0x20]
	0x0264355C MOV X19, X1
	0x02643560 MOV X21, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1D98000
	006 Move W8, [X21+241]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x1AB1000
	014 Move X0, [X0+1432]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+241], W8
	018 Move W8, [X19+64]
	019 Compare W8, 0
	020 JumpIfNotEqual {91}
	021 Move X8, 0x1AB1000
	022 Move X8, [X8+1432]
	023 Move X21, [X19+32]
	024 Move X0, [X8]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X21
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {42}
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return 
	042 Move X8, [X19+48]
	043 Compare X8, 0
	044 JumpIfNotEqual {89}
	045 Move X8, [X19]
	046 Move X0, X19
	047 Move X9, [X8+440]
	048 Move X1, [X8+448]
	049 NotImplemented "Instruction BLR not yet implemented."
	050 Compare X0, 0
	051 JumpIfEqual {37}
	052 Move X8, [X19]
	053 Move X0, X19
	054 Move X9, [X8+440]
	055 Move X1, [X8+448]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Compare X0, 0
	058 JumpIfEqual {102}
	059 Move X8, [X20+32]
	060 Move X8, [X8+192]
	061 Move X1, [X8+80]
	062 Call 0x26479C0, X0
	063 Move X8, [X19]
	064 Move X0, X19
	065 Move X9, [X8+536]
	066 Move X1, [X8+544]
	067 NotImplemented "Instruction BLR not yet implemented."
	068 Move X8, [X19]
	069 Move X20, X0
	070 Move X0, X19
	071 Move X9, [X8+440]
	072 Move X1, [X8+448]
	073 NotImplemented "Instruction BLR not yet implemented."
	074 Compare X20, 0
	075 JumpIfEqual {102}
	076 Move X8, [X20]
	077 Move X1, X0
	078 Move X0, X20
	079 Move X9, [X8+392]
	080 Move X2, [X8+400]
	081 NotImplemented "Instruction BLR not yet implemented."
	082 Move X8, [X19]
	083 Move [X19+48], X20
	084 Move X0, X19
	085 Move X1, X20
	086 Move X9, [X8+552]
	087 Move X2, [X8+560]
	088 NotImplemented "Instruction BLR not yet implemented."
	089 Move W8, 1
	090 Move [X19+64], W8
	091 Move X0, [X19+32]
	092 Compare X0, 0
	093 JumpIfEqual {102}
	094 Move X1, X19
	095 Move X20, [X31+16]
	096 Move X19, [X31+24]
	097 Move X2, X31
	098 Move X30, [X31+32]
	099 Move X21, [X31+40]
	100 Call BaseAffordanceStateProvider.RegisterAffordanceReceiver, X0, X1
	101 Return 
	102 Call 0x1C17F20

Method: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Theme.BaseAffordanceTheme`1<T> GenerateNewAffordanceThemeInstance()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void OnAffordanceThemeChanged(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Theme.BaseAffordanceTheme`1<T> newValue)

Disassembly:
	0x02643564 MOVZ W1, 0x8
	0x02643568 LDR X8, [X8 + 0xC0]
	0x0264356C LDR X8, [X8]
	0x02643570 LDR X20, [X8 + 0x80]

ISIL:
	001 Move X8, [X2+32]
	002 Move X8, [X8+192]
	003 Move X2, [X8+112]

Method: System.Void LogIfMissingAffordanceStates(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Theme.BaseAffordanceTheme`1<T> theme)

Disassembly:
	0x02643574 MOV X0, X20
	0x02643578 BL 0x1C16D14
	0x0264357C MOV X0, X21
	0x02643580 MOV X1, X20
	0x02643584 BL 0x1C16D18
	0x02643588 STR X19, [X0]
	0x0264358C LDP X20, X19, [X31 + 0x10]
	0x02643590 LDP X30, X21, [X31], #0x20
	0x02643594 RET
	0x02643598 STR X30, [X31 - 0x10]!
	0x0264359C LDR X8, [X1 + 0x20]
	0x026435A0 LDR X8, [X8 + 0xC0]
	0x026435A4 LDR X8, [X8]
	0x026435A8 LDR X8, [X8 + 0x80]
	0x026435AC ADD X1, X8, 0x20
	0x026435B0 BL 0x1C16D18
	0x026435B4 LDRB W0, [X0]
	0x026435B8 LDR X30, [X31], #0x10
	0x026435BC RET
	0x026435C0 STP X30, X21, [X31 - 0x20]!
	0x026435C4 STP X20, X19, [X31 + 0x10]
	0x026435C8 LDR X8, [X2 + 0x20]
	0x026435CC MOV X19, X0
	0x026435D0 AND W21, W1, 0x1
	0x026435D4 MOVZ W1, 0x1
	0x026435D8 LDR X8, [X8 + 0xC0]
	0x026435DC LDR X8, [X8]
	0x026435E0 LDR X8, [X8 + 0x80]
	0x026435E4 ADD X20, X8, 0x20
	0x026435E8 MOV X0, X20
	0x026435EC BL 0x1C16D14
	0x026435F0 MOV X0, X19
	0x026435F4 MOV X1, X20
	0x026435F8 BL 0x1C16D18
	0x026435FC LDP X20, X19, [X31 + 0x10]
	0x02643600 STRB W21, [X0]
	0x02643604 LDP X30, X21, [X31], #0x20
	0x02643608 RET
	0x0264360C STR X30, [X31 - 0x10]!
	0x02643610 LDR X8, [X1 + 0x20]
	0x02643614 LDR X8, [X8 + 0xC0]
	0x02643618 LDR X8, [X8]
	0x0264361C LDR X8, [X8 + 0x80]
	0x02643620 ADD X1, X8, 0x40
	0x02643624 BL 0x1C16D18
	0x02643628 LDR X0, [X0]
	0x0264362C LDR X30, [X31], #0x10
	0x02643630 RET
	0x02643634 STP X30, X21, [X31 - 0x20]!
	0x02643638 STP X20, X19, [X31 + 0x10]
	0x0264363C LDR X8, [X2 + 0x20]
	0x02643640 MOV X19, X1
	0x02643644 MOV X20, X0
	0x02643648 MOVZ W1, 0x8
	0x0264364C LDR X8, [X8 + 0xC0]
	0x02643650 LDR X8, [X8]
	0x02643654 LDR X8, [X8 + 0x80]
	0x02643658 ADD X21, X8, 0x40
	0x0264365C MOV X0, X21
	0x02643660 BL 0x1C16D14
	0x02643664 MOV X0, X20
	0x02643668 MOV X1, X21
	0x0264366C BL 0x1C16D18
	0x02643670 STR X19, [X0]
	0x02643674 LDR X8, [X20]
	0x02643678 MOV X0, X20
	0x0264367C MOV X1, X19
	0x02643680 LDP X20, X19, [X31 + 0x10]
	0x02643684 LDR X3, [X8 + 0x228]
	0x02643688 LDR X2, [X8 + 0x230]
	0x0264368C LDP X30, X21, [X31], #0x20
	0x02643690 BR X3
	0x02643694 LDR X8, [X0]
	0x02643698 LDP X2, X1, [X8 + 0x1C8]
	0x0264369C BR X2
	0x026436A0 STR X30, [X31 - 0x10]!
	0x026436A4 LDR X8, [X1 + 0x20]
	0x026436A8 LDR X8, [X8 + 0xC0]
	0x026436AC LDR X8, [X8]
	0x026436B0 LDR X8, [X8 + 0x80]
	0x026436B4 ADD X1, X8, 0x60
	0x026436B8 BL 0x1C16D18
	0x026436BC LDR X0, [X0]
	0x026436C0 LDR X30, [X31], #0x10
	0x026436C4 RET
	0x026436C8 STP X29, X30, [X31 - 0x30]!
	0x026436CC STP X22, X21, [X31 + 0x10]
	0x026436D0 STP X20, X19, [X31 + 0x20]
	0x026436D4 ADD X29, X31, 0x0
	0x026436D8 SUB X31, X31, 0x10
	0x026436DC MRS X22, 0xC000
	0x026436E0 LDR X8, [X22 + 0x28]
	0x026436E4 MOV X19, X1
	0x026436E8 STUR X8, [X29 - 0x8]
	0x026436EC LDR X8, [X2 + 0x20]
	0x026436F0 LDR X8, [X8 + 0xC0]
	0x026436F4 LDR X9, [X8 + 0x30]
	0x026436F8 LDR W20, [X9 + 0xFC]
	0x026436FC ADD X9, X31, 0x0
	0x02643700 ADD X10, X20, 0xF
	0x02643704 AND X10, X10, 0x1FFFFFFFF
	0x02643708 SUB X21, X9, X10
	0x0264370C ADD X31, X21, 0x0
	0x02643710 LDR X8, [X8]
	0x02643714 LDR X8, [X8 + 0x80]
	0x02643718 ADD X1, X8, 0xA0
	0x0264371C BL 0x1C16D18
	0x02643720 MOV X1, X0
	0x02643724 MOV X0, X21
	0x02643728 MOV X2, X20
	0x0264372C BL 0x3EB1AC0
	0x02643730 MOV X0, X19
	0x02643734 MOV X1, X21
	0x02643738 MOV X2, X20
	0x0264373C BL 0x3EB1AC0
	0x02643740 LDR X8, [X22 + 0x28]
	0x02643744 LDUR X9, [X29 - 0x8]
	0x02643748 CMP X8, X9
	0x0264374C B.NE 0x2643764
	0x02643750 ADD X31, X29, 0x0
	0x02643754 LDP X20, X19, [X31 + 0x20]
	0x02643758 LDP X22, X21, [X31 + 0x10]
	0x0264375C LDP X29, X30, [X31], #0x30
	0x02643760 RET
	0x02643764 BL 0x3EB1B20
	0x02643768 STP X29, X30, [X31 - 0x40]!
	0x0264376C STR X23, [X31 + 0x10]
	0x02643770 STP X22, X21, [X31 + 0x20]
	0x02643774 STP X20, X19, [X31 + 0x30]
	0x02643778 ADD X29, X31, 0x0
	0x0264377C SUB X31, X31, 0x10
	0x02643780 MRS X22, 0xC000
	0x02643784 LDR X8, [X22 + 0x28]
	0x02643788 MOV X20, X0
	0x0264378C STUR X8, [X29 - 0x8]
	0x02643790 LDR X23, [X2 + 0x20]
	0x02643794 LDR X8, [X23 + 0xC0]
	0x02643798 LDR X8, [X8 + 0x30]
	0x0264379C LDR W19, [X8 + 0xFC]
	0x026437A0 ADD X8, X31, 0x0
	0x026437A4 ADD X9, X19, 0xF
	0x026437A8 AND X9, X9, 0x1FFFFFFFF
	0x026437AC SUB X21, X8, X9
	0x026437B0 ADD X31, X21, 0x0
	0x026437B4 MOV X0, X21
	0x026437B8 MOV X2, X19
	0x026437BC BL 0x3EB1AC0
	0x026437C0 LDR X8, [X23 + 0xC0]
	0x026437C4 MOV X0, X20
	0x026437C8 MOV X2, X21
	0x026437CC MOV W3, W19
	0x026437D0 LDR X8, [X8]
	0x026437D4 LDR X8, [X8 + 0x80]
	0x026437D8 ADD X1, X8, 0xA0
	0x026437DC BL 0x1C16D1C
	0x026437E0 LDR X8, [X22 + 0x28]
	0x026437E4 LDUR X9, [X29 - 0x8]
	0x026437E8 CMP X8, X9
	0x026437EC B.NE 0x2643808
	0x026437F0 ADD X31, X29, 0x0
	0x026437F4 LDP X20, X19, [X31 + 0x30]
	0x026437F8 LDP X22, X21, [X31 + 0x20]
	0x026437FC LDR X23, [X31 + 0x10]
	0x02643800 LDP X29, X30, [X31], #0x40
	0x02643804 RET
	0x02643808 BL 0x3EB1B20
	0x0264380C STR X30, [X31 - 0x10]!
	0x02643810 LDR X8, [X1 + 0x20]
	0x02643814 LDR X8, [X8 + 0xC0]
	0x02643818 LDR X8, [X8]
	0x0264381C LDR X8, [X8 + 0x80]
	0x02643820 ADD X1, X8, 0xC0
	0x02643824 BL 0x1C16D18
	0x02643828 LDRB W0, [X0]
	0x0264382C LDR X30, [X31], #0x10
	0x02643830 RET
	0x02643834 STP X30, X21, [X31 - 0x20]!
	0x02643838 STP X20, X19, [X31 + 0x10]
	0x0264383C LDR X8, [X2 + 0x20]
	0x02643840 MOV X19, X0
	0x02643844 AND W21, W1, 0x1
	0x02643848 MOVZ W1, 0x1
	0x0264384C LDR X8, [X8 + 0xC0]
	0x02643850 LDR X8, [X8]
	0x02643854 LDR X8, [X8 + 0x80]
	0x02643858 ADD X20, X8, 0xC0
	0x0264385C MOV X0, X20
	0x02643860 BL 0x1C16D14
	0x02643864 MOV X0, X19
	0x02643868 MOV X1, X20
	0x0264386C BL 0x1C16D18
	0x02643870 LDP X20, X19, [X31 + 0x10]
	0x02643874 STRB W21, [X0]
	0x02643878 LDP X30, X21, [X31], #0x20
	0x0264387C RET
	0x02643880 STR X30, [X31 - 0x30]!
	0x02643884 STP X22, X21, [X31 + 0x10]
	0x02643888 STP X20, X19, [X31 + 0x20]
	0x0264388C ADRP X22, 0x1D97000
	0x02643890 ADRP X21, 0x1AB0000
	0x02643894 LDRB W8, [X22 + 0xFC]
	0x02643898 LDR X21, [X21 + 0x598]
	0x0264389C MOV X20, X1
	0x026438A0 MOV X19, X0
	0x026438A4 TBNZ X8, 0x0, 0x26438C8
	0x026438A8 ADRP X0, 0x1ADA000
	0x026438AC LDR X0, [X0 + 0x4E0]
	0x026438B0 BL 0x1C16CF4
	0x026438B4 ADRP X0, 0x1AB0000
	0x026438B8 LDR X0, [X0 + 0x598]
	0x026438BC BL 0x1C16CF4
	0x026438C0 MOVZ W8, 0x1
	0x026438C4 STRB W8, [X22 + 0xFC]
	0x026438C8 LDR X8, [X20 + 0x20]
	0x026438CC MOV X0, X19
	0x026438D0 LDR X8, [X8 + 0xC0]
	0x026438D4 LDR X8, [X8]
	0x026438D8 LDR X1, [X8 + 0x80]
	0x026438DC BL 0x1C16D18
	0x026438E0 MOV X8, X0
	0x026438E4 LDR X0, [X21]
	0x026438E8 LDR X21, [X8]
	0x026438EC LDR W9, [X0 + 0xE0]
	0x026438F0 CBNZ W9, 0x26438F8
	0x026438F4 BL 0x1C16DFC
	0x026438F8 MOV X0, X21
	0x026438FC MOV X1, X31
	0x02643900 MOV X2, X31
	0x02643904 BL 0x3C3883C
	0x02643908 TBZ X0, 0x0, 0x2643954
	0x0264390C CBZ X19, 0x2643964
	0x02643910 ADRP X8, 0x1ADA000
	0x02643914 LDR X8, [X8 + 0x4E0]
	0x02643918 MOV X0, X19
	0x0264391C LDR X1, [X8]
	0x02643920 BL 0x21A3F50
	0x02643924 LDR X8, [X20 + 0x20]
	0x02643928 MOV X21, X0
	0x0264392C MOVZ W1, 0x8
	0x02643930 LDR X8, [X8 + 0xC0]
	0x02643934 LDR X8, [X8]
	0x02643938 LDR X20, [X8 + 0x80]
	0x0264393C MOV X0, X20
	0x02643940 BL 0x1C16D14
	0x02643944 MOV X0, X19
	0x02643948 MOV X1, X20
	0x0264394C BL 0x1C16D18
	0x02643950 STR X21, [X0]
	0x02643954 LDP X20, X19, [X31 + 0x20]
	0x02643958 LDP X22, X21, [X31 + 0x10]
	0x0264395C LDR X30, [X31], #0x30
	0x02643960 RET
	0x02643964 BL 0x1C16F20
	0x02643968 LDR X8, [X1 + 0x20]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X19, 0x1D98000
	015 Move X20, 0x1ADB000
	016 Move W8, [X19+242]
	017 Move X20, [X20+1264]
	018 Move X28, X2
	019 Move X22, X1
	020 Move X23, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {60}
	025 Move X0, 0x1ADB000
	026 Move X0, [X0+1264]
	027 Call 0x1C17CF4
	028 Move X0, 0x1AB2000
	029 Move X0, [X0+2520]
	030 Call 0x1C17CF4
	031 Move X0, 0x1AB1000
	032 Move X0, [X0+2600]
	033 Call 0x1C17CF4
	034 Move X0, 0x1AB1000
	035 Move X0, [X0+1880]
	036 Call 0x1C17CF4
	037 Move X0, 0x1AB1000
	038 Move X0, [X0+2288]
	039 Call 0x1C17CF4
	040 Move X0, 0x1ADB000
	041 Move X0, [X0+1272]
	042 Call 0x1C17CF4
	043 Move X0, 0x1ADB000
	044 Move X0, [X0+1280]
	045 Call 0x1C17CF4
	046 Move X0, 0x1ADB000
	047 Move X0, [X0+1288]
	048 Call 0x1C17CF4
	049 Move X0, 0x1ADB000
	050 Move X0, [X0+1296]
	051 Call 0x1C17CF4
	052 Move X0, 0x1ADB000
	053 Move X0, [X0+1304]
	054 Call 0x1C17CF4
	055 Move X0, 0x1ADB000
	056 Move X0, [X0+1312]
	057 Call 0x1C17CF4
	058 Move W8, 1
	059 Move [X19+242], W8
	060 Move X0, [X20]
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Move X21, 0x1D98000
	066 Move W8, [X21+312]
	067 Compare W8, 0
	068 JumpIfNotEqual {74}
	069 Move X0, 0x1ADB000
	070 Move X0, [X0+1264]
	071 Call 0x1C17CF4
	072 Move W8, 1
	073 Move [X21+312], W8
	074 Move X0, [X20]
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {80}
	078 Call 0x1C17DFC
	079 Move X0, [X20]
	080 Compare X22, 0
	081 JumpIfEqual {283}
	082 Move X8, [X28+32]
	083 Move X9, [X0+184]
	084 Move X0, X22
	085 Move X8, [X8+192]
	086 Move W9, [X9+24]
	087 Move X2, [X8+120]
	088 Subtract W1, W9, 1
	089 Call 0x2647CC0, X0, X1
	090 Compare X0, 0
	091 JumpIfNotEqual {269}
	092 Move [X31+8], X23
	093 Move X8, 0x1AB1000
	094 Move X8, [X8+2288]
	095 Move X0, [X8]
	096 Call 0x1C17F10
	097 Move X1, X31
	098 Move X23, X0
	099 Call StringBuilder..ctor, X0
	100 Move X24, X31
	101 Move X25, X31
	102 Move W26, W31
	103 Move W19, W31
	104 Move X0, [X20]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 Move W8, [X21+312]
	110 Compare W8, 0
	111 JumpIfNotEqual {116}
	112 Move X0, X20
	113 Call 0x1C17CF4
	114 Move W8, 1
	115 Move [X21+312], W8
	116 Move X0, [X20]
	117 Move W8, [X0+224]
	118 Compare W8, 0
	119 JumpIfNotEqual {122}
	120 Call 0x1C17DFC
	121 Move X0, [X20]
	122 Move X8, [X0+184]
	123 Move W8, [X8+24]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move X8, [X28+32]
	126 Move X0, X22
	127 Move W1, W26
	128 Move X29, X28
	129 Move X8, [X8+192]
	130 Move X2, [X8+120]
	131 Call 0x2647CC0, X0, X1
	132 Move X8, 0x1AB2000
	133 Move X8, [X8+2520]
	134 Move X27, X0
	135 Add X1, X31, 28
	136 Move [X31+28], W26
	137 Move X0, [X8]
	138 Call 0x1C17E04
	139 Move X8, [X20]
	140 Move X28, X0
	141 Move W9, [X8+224]
	142 Compare W9, 0
	143 JumpIfNotEqual {146}
	144 Move X0, X8
	145 Call 0x1C17DFC
	146 Move W0, W26
	147 Move X1, X31
	148 Call AffordanceStateShortcuts.GetNameForIndex, X0
	149 Move X8, 0x1ADB000
	150 Move X8, [X8+1296]
	151 Move X2, X0
	152 Move X1, X28
	153 Move X3, X31
	154 Move X8, [X8]
	155 Move X0, X8
	156 Call String.Format, X0, X1, X2
	157 Compare X23, 0
	158 JumpIfEqual {283}
	159 Move X1, X0
	160 Move X0, X23
	161 Move X2, X31
	162 Call StringBuilder.Append, X0, X1
	163 NotImplemented "Instruction CMP not yet implemented."
	164 NotImplemented "Instruction CSEL not yet implemented."
	165 NotImplemented "Instruction CSEL not yet implemented."
	166 Move X28, X29
	167 Compare X27, 0
	168 JumpIfEqual {190}
	169 Move X8, 0x1AB2000
	170 Move X8, [X8+2520]
	171 Add X1, X31, 24
	172 Move [X31+24], W26
	173 Move X0, [X8]
	174 Call 0x1C17E04
	175 Move X8, 0x1ADB000
	176 Move X2, [X27+16]
	177 Move X8, [X8+1280]
	178 Move X1, X0
	179 Move X3, X31
	180 Move X8, [X8]
	181 Move X0, X8
	182 Call String.Format, X0, X1, X2
	183 Compare X25, 0
	184 JumpIfEqual {283}
	185 Move X1, X0
	186 Move X0, X25
	187 Move X2, X31
	188 Call StringBuilder.AppendLine, X0, X1
	189 Add W19, W19, 1
	190 Compare X24, 0
	191 JumpIfEqual {283}
	192 Move X8, 0x1ADB000
	193 Move X8, [X8+1272]
	194 Move X0, X24
	195 Move X2, X31
	196 Move X1, [X8]
	197 Call StringBuilder.AppendLine, X0, X1
	198 Add W26, W26, 1
	199 Move W8, [X0+224]
	200 Compare W8, 0
	201 JumpIfNotEqual {203}
	202 Call 0x1C17DFC
	203 Move W8, [X21+312]
	204 Compare W8, 0
	205 JumpIfNotEqual {211}
	206 Move X0, 0x1ADB000
	207 Move X0, [X0+1264]
	208 Call 0x1C17CF4
	209 Move W8, 1
	210 Move [X21+312], W8
	211 Move X0, [X20]
	212 Move W8, [X0+224]
	213 Compare W8, 0
	214 JumpIfNotEqual {217}
	215 Call 0x1C17DFC
	216 Move X0, [X20]
	217 Move X8, [X0+184]
	218 Move X9, 0x1AB2000
	219 Add X1, X31, 20
	220 Move W8, [X8+24]
	221 Move X9, [X9+2520]
	222 Move [X31+20], W8
	223 Move X0, [X9]
	224 Call 0x1C17E04
	225 Move X8, 0x1AB1000
	226 Move X8, [X8+1880]
	227 Move X20, X0
	228 Add X1, X31, 16
	229 Move [X31+16], W19
	230 Move X0, [X8]
	231 Call 0x1C17E04
	232 Move X8, 0x1ADB000
	233 Move X8, [X8+1288]
	234 Move X2, X0
	235 Move X1, X20
	236 Move X3, X31
	237 Move X8, [X8]
	238 Move X0, X8
	239 Call String.Format, X0, X1, X2
	240 Move X8, 0x1ADB000
	241 Move X8, [X8+1312]
	242 Move X20, X0
	243 Move X1, X23
	244 Move X2, X31
	245 Move X8, [X8]
	246 Move X0, X8
	247 Call String.Format, X0, X1
	248 Move X8, 0x1ADB000
	249 Move X8, [X8+1304]
	250 Move X2, X0
	251 Move X1, X20
	252 Move X3, X31
	253 Move X8, [X8]
	254 Move X0, X8
	255 Call String.Concat, X0, X1, X2
	256 Move X8, 0x1AB1000
	257 Move X8, [X8+2600]
	258 Move X20, X0
	259 Move X8, [X8]
	260 Move W9, [X8+224]
	261 Compare W9, 0
	262 JumpIfNotEqual {265}
	263 Move X0, X8
	264 Call 0x1C17DFC
	265 Move X1, [X31+8]
	266 Move X0, X20
	267 Move X2, X31
	268 Call Debug.LogWarning, X0, X1
	269 Move X20, [X31+112]
	270 Move X19, [X31+120]
	271 Move X22, [X31+96]
	272 Move X21, [X31+104]
	273 Move X24, [X31+80]
	274 Move X23, [X31+88]
	275 Move X26, [X31+64]
	276 Move X25, [X31+72]
	277 Move X28, [X31+48]
	278 Move X27, [X31+56]
	279 Move X29, [X31+32]
	280 Move X30, [X31+40]
	281 Add X31, X31, 128
	282 Return 
	283 Call 0x1C17F20

Method: System.Void OnAffordanceStateUpdated(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State.AffordanceStateData previousState, UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State.AffordanceStateData newState)

Disassembly:
	0x0264396C LDR X8, [X8 + 0xC0]
	0x02643970 LDR X1, [X8 + 0x38]
	0x02643974 LDR X2, [X1]
	0x02643978 BR X2
	0x0264397C STR X30, [X31 - 0x30]!
	0x02643980 STP X22, X21, [X31 + 0x10]
	0x02643984 STP X20, X19, [X31 + 0x20]
	0x02643988 ADRP X22, 0x1D97000
	0x0264398C ADRP X21, 0x1AB0000
	0x02643990 LDRB W8, [X22 + 0xFD]
	0x02643994 LDR X21, [X21 + 0x598]
	0x02643998 MOV X20, X1
	0x0264399C MOV X19, X0
	0x026439A0 TBNZ X8, 0x0, 0x26439B8
	0x026439A4 ADRP X0, 0x1AB0000
	0x026439A8 LDR X0, [X0 + 0x598]
	0x026439AC BL 0x1C16CF4
	0x026439B0 MOVZ W8, 0x1
	0x026439B4 STRB W8, [X22 + 0xFD]
	0x026439B8 LDR X8, [X20 + 0x20]
	0x026439BC MOV X0, X19
	0x026439C0 LDR X8, [X8 + 0xC0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1D98000
	006 Move W8, [X21+243]
	007 Move X19, X2
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x1ADB000
	014 Move X0, [X0+1320]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+243], W8
	018 Move X0, [X20+56]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0x1ADB000
	022 Move X8, [X8+1320]
	023 And X1, X19, 0xFFFF
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call 0x28CC44C, X0, X1
	030 Return 
	031 Call 0x1C17F20

Method: System.Void ConsumeAffordance(T newValue)

Disassembly:
	0x026439C4 LDR X8, [X8]
	0x026439C8 LDR X1, [X8 + 0x80]
	0x026439CC BL 0x1C16D18
	0x026439D0 MOV X8, X0
	0x026439D4 LDR X0, [X21]
	0x026439D8 LDR X21, [X8]
	0x026439DC LDR W9, [X0 + 0xE0]
	0x026439E0 CBNZ W9, 0x26439E8
	0x026439E4 BL 0x1C16DFC
	0x026439E8 MOV X0, X21
	0x026439EC MOV X1, X31
	0x026439F0 MOV X2, X31
	0x026439F4 BL 0x3C354F8
	0x026439F8 TBZ X0, 0x0, 0x2643A34
	0x026439FC LDR X8, [X20 + 0x20]
	0x02643A00 MOV X0, X19
	0x02643A04 LDR X8, [X8 + 0xC0]
	0x02643A08 LDR X8, [X8]
	0x02643A0C LDR X1, [X8 + 0x80]
	0x02643A10 BL 0x1C16D18
	0x02643A14 LDR X0, [X0]
	0x02643A18 CBZ X0, 0x2643A44
	0x02643A1C MOV X1, X19
	0x02643A20 LDP X20, X19, [X31 + 0x20]
	0x02643A24 LDP X22, X21, [X31 + 0x10]
	0x02643A28 MOV X2, X31
	0x02643A2C LDR X30, [X31], #0x30
	0x02643A30 B 0x3BCD438
	0x02643A34 LDP X20, X19, [X31 + 0x20]
	0x02643A38 LDP X22, X21, [X31 + 0x10]
	0x02643A3C LDR X30, [X31], #0x30
	0x02643A40 RET
	0x02643A44 BL 0x1C16F20
	0x02643A48 STR X30, [X31 - 0x30]!
	0x02643A4C STP X22, X21, [X31 + 0x10]
	0x02643A50 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X0]
	009 Move X20, X1
	010 Move V8, V3
	011 Move V9, V2
	012 Move X9, [X8+456]
	013 Move X1, [X8+464]
	014 Move V10, V1
	015 Move X19, X0
	016 Move V11, V0
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Compare X0, 0
	019 JumpIfEqual {44}
	020 Move X8, [X20+32]
	021 Move V0, V11
	022 Move V1, V10
	023 Move V2, V9
	024 Move X8, [X8+192]
	025 Move V3, V8
	026 Move X1, [X8+144]
	027 Call BindableVariableBase`1<Color>.set_Value, X0, X1
	028 Move X8, [X19]
	029 Move X0, X19
	030 Move V2, V9
	031 Move V3, V8
	032 Move X2, [X8+600]
	033 Move X1, [X8+608]
	034 Move X20, [X31+48]
	035 Move X19, [X31+56]
	036 Move X30, [X31+32]
	037 Move D9, [X31+16]
	038 Move D8, [X31+24]
	039 Move V0, V11
	040 Move V1, V10
	041 Move D11, [X31+64]
	042 Move D10, [X31+72]
	043 CallNoReturn X2
	044 Call 0x1C17F20

Method: System.Void OnAffordanceValueUpdated(T newValue)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void CaptureInitialValue()

Disassembly:
	0x02643A54 ADRP X22, 0x1D97000
	0x02643A58 ADRP X21, 0x1AB0000
	0x02643A5C LDRB W8, [X22 + 0xFE]
	0x02643A60 LDR X21, [X21 + 0x598]
	0x02643A64 MOV X20, X1
	0x02643A68 MOV X19, X0
	0x02643A6C TBNZ X8, 0x0, 0x2643A9C
	0x02643A70 ADRP X0, 0x1AB0000
	0x02643A74 LDR X0, [X0 + 0x598]
	0x02643A78 BL 0x1C16CF4
	0x02643A7C ADRP X0, 0x1ADA000
	0x02643A80 LDR X0, [X0 + 0x1E8]
	0x02643A84 BL 0x1C16CF4
	0x02643A88 ADRP X0, 0x1ADA000
	0x02643A8C LDR X0, [X0 + 0x4E8]
	0x02643A90 BL 0x1C16CF4
	0x02643A94 MOVZ W8, 0x1
	0x02643A98 STRB W8, [X22 + 0xFE]
	0x02643A9C LDR X8, [X20 + 0x20]
	0x02643AA0 MOV X0, X19
	0x02643AA4 LDR X8, [X8 + 0xC0]
	0x02643AA8 LDR X1, [X8 + 0x38]
	0x02643AAC LDR X8, [X1]
	0x02643AB0 BLR X8
	0x02643AB4 LDR X8, [X20 + 0x20]
	0x02643AB8 MOV X0, X19
	0x02643ABC LDR X8, [X8 + 0xC0]
	0x02643AC0 LDR X8, [X8]
	0x02643AC4 LDR X1, [X8 + 0x80]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+84]
	005 Compare W8, 0
	006 JumpIfNotEqual {34}
	007 Move X8, [X0]
	008 Move X20, X1
	009 Move X19, X0
	010 Move X9, [X8+632]
	011 Move X1, [X8+640]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move X8, [X19]
	014 Move [X19+68], S0
	015 Move [X19+76], S1
	016 Move [X19+76], S2
	017 Move [X19+84], S3
	018 Move X0, X19
	019 Move X9, [X8+456]
	020 Move X1, [X8+464]
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Compare X0, 0
	023 JumpIfEqual {38}
	024 Move X8, [X20+32]
	025 Move S2, [X19+76]
	026 Move S3, [X19+80]
	027 Move S0, [X19+68]
	028 Move S1, [X19+72]
	029 Move X8, [X8+192]
	030 Move X1, [X8+144]
	031 Call BindableVariableBase`1<Color>.set_Value, X0, X1
	032 Move W8, 1
	033 Move [X19+84], W8
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return 
	038 Call 0x1C17F20

Method: T GetCurrentValueForCapture()

Disassembly:
	0x02643AC8 BL 0x1C16D18
	0x02643ACC MOV X8, X0
	0x02643AD0 LDR X0, [X21]
	0x02643AD4 LDR X20, [X8]
	0x02643AD8 LDR W9, [X0 + 0xE0]
	0x02643ADC CBNZ W9, 0x2643AE4
	0x02643AE0 BL 0x1C16DFC
	0x02643AE4 MOV X0, X20
	0x02643AE8 MOV X1, X31
	0x02643AEC MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Move X9, [X8+456]
	004 Move X1, [X8+464]
	005 NotImplemented "Instruction BLR not yet implemented."
	006 Compare X0, 0
	007 JumpIfEqual {14}
	008 Move S0, [X0+24]
	009 Move S1, [X0+28]
	010 Move S2, [X0+32]
	011 Move S3, [X0+36]
	012 Move X30, [X31+16]
	013 Return X0
	014 Call 0x1C17F20

Method: T ProcessTargetAffordanceValue(T newValue)

Disassembly:
	0x02643AF0 BL 0x3C3883C

ISIL:
	001 Return X0

Method: System.Void .ctor()

Disassembly:
	0x02643AF4 TBZ X0, 0x0, 0x2643B4C
	0x02643AF8 ADRP X8, 0x1ADA000
	0x02643AFC LDR X8, [X8 + 0x4E8]
	0x02643B00 ADRP X20, 0x1ADA000
	0x02643B04 MOV X1, X19
	0x02643B08 MOV X2, X31
	0x02643B0C LDR X0, [X8]
	0x02643B10 LDR X20, [X20 + 0x1E8]
	0x02643B14 BL 0x321EFD0
	0x02643B18 LDR X8, [X20]
	0x02643B1C MOV X20, X0
	0x02643B20 LDR W9, [X8 + 0xE0]
	0x02643B24 CBNZ W9, 0x2643B30
	0x02643B28 MOV X0, X8
	0x02643B2C BL 0x1C16DFC
	0x02643B30 MOV X0, X20
	0x02643B34 MOV X1, X19
	0x02643B38 LDP X20, X19, [X31 + 0x20]
	0x02643B3C LDP X22, X21, [X31 + 0x10]
	0x02643B40 MOV X2, X31
	0x02643B44 LDR X30, [X31], #0x30
	0x02643B48 B 0x3B2EF38
	0x02643B4C LDP X20, X19, [X31 + 0x20]
	0x02643B50 LDP X22, X21, [X31 + 0x10]
	0x02643B54 LDR X30, [X31], #0x30
	0x02643B58 RET
	0x02643B5C STR X30, [X31 - 0x30]!
	0x02643B60 STP X22, X21, [X31 + 0x10]
	0x02643B64 STP X20, X19, [X31 + 0x20]
	0x02643B68 ADRP X21, 0x1D97000
	0x02643B6C LDRB W8, [X21 + 0xFF]
	0x02643B70 MOV X20, X1
	0x02643B74 MOV X19, X0
	0x02643B78 TBNZ X8, 0x0, 0x2643B90
	0x02643B7C ADRP X0, 0x1AB0000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1D98000
	007 Move X22, 0x1ADB000
	008 Move X20, 0x1ADB000
	009 Move W8, [X21+244]
	010 Move X22, [X22+1328]
	011 Move X20, [X20+1336]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x1ADB000
	018 Move X0, [X0+1336]
	019 Call 0x1C17CF4
	020 Move X0, 0x1ADB000
	021 Move X0, [X0+1328]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+244], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X5, [X20]
	028 Move W2, 1
	029 Move X1, X31
	030 Move X3, X31
	031 Move W4, W31
	032 Move X20, X0
	033 Call 0x28E375C, X0, X1, X2, X3, X4
	034 Move [X19+56], X20
	035 Move X0, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X1, X31
	041 Move X30, [X31+48]
	042 Call MonoBehaviour..ctor, X0
	043 Return 

