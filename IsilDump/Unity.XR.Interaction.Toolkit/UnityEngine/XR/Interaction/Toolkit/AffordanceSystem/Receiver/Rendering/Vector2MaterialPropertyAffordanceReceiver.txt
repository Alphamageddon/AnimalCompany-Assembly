Type: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Receiver.Rendering.Vector2MaterialPropertyAffordanceReceiver

Method: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Rendering.MaterialPropertyBlockHelper get_materialPropertyBlockHelper()

Disassembly:
	0x03BD6318 RET
	0x03BD631C STR X30, [X31 - 0x20]!

ISIL:
	001 Move X0, [X0+168]
	002 Return X0

Method: System.Void set_materialPropertyBlockHelper(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Rendering.MaterialPropertyBlockHelper value)

Disassembly:
	0x03BD6320 STP X20, X19, [X31 + 0x10]
	0x03BD6324 ADRP X20, 0x80C000

ISIL:
	001 Move [X0+168], X1
	002 Return 

Method: System.String get_vector2PropertyName()

Disassembly:
	0x03BD6328 LDRB W8, [X20 + 0xE8B]
	0x03BD632C MOV X19, X0

ISIL:
	001 Move X0, [X0+176]
	002 Return X0

Method: System.Void set_vector2PropertyName(System.String value)

Disassembly:
	0x03BD6330 TBNZ X8, 0x0, 0x3BD6348
	0x03BD6334 ADRP X0, 0x587000
	0x03BD6338 LDR X0, [X0 + 0xCD0]
	0x03BD633C BL 0x1C16CF4
	0x03BD6340 MOVZ W8, 0x1
	0x03BD6344 STRB W8, [X20 + 0xE8B]
	0x03BD6348 LDR X0, [X19 + 0x90]
	0x03BD634C CBZ X0, 0x3BD6368
	0x03BD6350 ADRP X8, 0x587000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move [X0+176], X1
	005 Move X0, X1
	006 Move X1, X31
	007 Call Shader.PropertyToID, X0
	008 Move [X19+184], W0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

Method: System.Void OnValidate()

Disassembly:
	0x03BD6354 LDR X8, [X8 + 0xCD0]
	0x03BD6358 LDP X20, X19, [X31 + 0x10]
	0x03BD635C LDR X1, [X8]
	0x03BD6360 LDR X30, [X31], #0x20
	0x03BD6364 B 0x29AD9C0
	0x03BD6368 LDP X20, X19, [X31 + 0x10]
	0x03BD636C LDR X30, [X31], #0x20
	0x03BD6370 RET
	0x03BD6374 LDR X0, [X0 + 0xA0]
	0x03BD6378 RET
	0x03BD637C SUB X31, X31, 0x140
	0x03BD6380 STP X29, X30, [X31 + 0x110]
	0x03BD6384 STP X22, X21, [X31 + 0x120]
	0x03BD6388 STP X20, X19, [X31 + 0x130]
	0x03BD638C ADRP X22, 0x80C000
	0x03BD6390 ADRP X20, 0x586000
	0x03BD6394 LDRB W8, [X22 + 0xE8C]
	0x03BD6398 LDR X20, [X20 + 0x650]
	0x03BD639C MOV X19, X1
	0x03BD63A0 ADD X21, X31, 0x60
	0x03BD63A4 TBNZ X8, 0x0, 0x3BD63BC
	0x03BD63A8 ADRP X0, 0x586000
	0x03BD63AC LDR X0, [X0 + 0x650]
	0x03BD63B0 BL 0x1C16CF4
	0x03BD63B4 MOVZ W8, 0x1
	0x03BD63B8 STRB W8, [X22 + 0xE8C]
	0x03BD63BC MOVI V0.2D, 0x0
	0x03BD63C0 ADD X0, X31, 0x8
	0x03BD63C4 MOVZ W2, 0x58
	0x03BD63C8 MOV X1, X19
	0x03BD63CC STR X31, [X31 + 0xB0]
	0x03BD63D0 STP V0, V0, [X21 + 0x30]
	0x03BD63D4 STP V0, V0, [X31 + 0x70]
	0x03BD63D8 STR V0, [X31 + 0x6]
	0x03BD63DC BL 0x3EB1AC0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x80D000
	006 Move X20, 0x51E000
	007 Move W8, [X21+3705]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x588000
	015 Move X0, [X0+3104]
	016 Call 0x1C17CF4
	017 Move X0, 0x51E000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3705], W8
	022 Move X0, [X20]
	023 Move X20, [X19+168]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {42}
	036 Move X8, 0x588000
	037 Move X8, [X8+3104]
	038 Move X0, X19
	039 Move X1, [X8]
	040 Call 0x21A4894, X0
	041 Move [X19+168], X0
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Return 

Method: System.Void Awake()

Disassembly:
	0x03BD63E0 ADD X0, X31, 0x60
	0x03BD63E4 ADD X1, X31, 0x8
	0x03BD63E8 MOV X2, X31
	0x03BD63EC BL 0x3B99658
	0x03BD63F0 LDR X19, [X20]
	0x03BD63F4 ADD X0, X31, 0xB8
	0x03BD63F8 ADD X1, X31, 0x60
	0x03BD63FC MOVZ W2, 0x58
	0x03BD6400 BL 0x3EB1AC0
	0x03BD6404 ADD X0, X31, 0xB8
	0x03BD6408 MOV X1, X31
	0x03BD640C MOV X2, X31
	0x03BD6410 MOV X3, X19
	0x03BD6414 BL 0x21EE12C
	0x03BD6418 LDP X20, X19, [X31 + 0x130]
	0x03BD641C LDP X22, X21, [X31 + 0x120]
	0x03BD6420 LDP X29, X30, [X31 + 0x110]
	0x03BD6424 ADD X31, X31, 0x140
	0x03BD6428 RET
	0x03BD642C STR X30, [X31 - 0x20]!
	0x03BD6430 STP X20, X19, [X31 + 0x10]
	0x03BD6434 ADRP X19, 0x80C000
	0x03BD6438 ADRP X20, 0x587000
	0x03BD643C LDRB W8, [X19 + 0xE8D]
	0x03BD6440 LDR X20, [X20 + 0xCD8]
	0x03BD6444 TBNZ X8, 0x0, 0x3BD645C
	0x03BD6448 ADRP X0, 0x587000
	0x03BD644C LDR X0, [X0 + 0xCD8]
	0x03BD6450 BL 0x1C16CF4
	0x03BD6454 MOVZ W8, 0x1
	0x03BD6458 STRB W8, [X19 + 0xE8D]
	0x03BD645C LDR X0, [X20]
	0x03BD6460 BL 0x1C16F10
	0x03BD6464 MOV X19, X0
	0x03BD6468 BL 0x3BCB594
	0x03BD646C MOV X0, X19
	0x03BD6470 LDP X20, X19, [X31 + 0x10]
	0x03BD6474 LDR X30, [X31], #0x20
	0x03BD6478 RET
	0x03BD647C LDR X0, [X0 + 0x98]
	0x03BD6480 RET
	0x03BD6484 STR X1, [X0 + 0x98]
	0x03BD6488 RET
	0x03BD648C LDR X0, [X0 + 0xA0]
	0x03BD6490 RET
	0x03BD6494 STR X1, [X0 + 0xA0]
	0x03BD6498 RET
	0x03BD649C STR X30, [X31 - 0x20]!
	0x03BD64A0 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x80D000
	007 Move X22, 0x588000
	008 Move X20, 0x51E000
	009 Move W8, [X21+3706]
	010 Move X22, [X22+3120]
	011 Move X20, [X20+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x588000
	018 Move X0, [X0+3120]
	019 Call 0x1C17CF4
	020 Move X0, 0x588000
	021 Move X0, [X0+3104]
	022 Call 0x1C17CF4
	023 Move X0, 0x51E000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3706], W8
	028 Move X1, [X22]
	029 Move X0, X19
	030 Call BaseAffordanceStateReceiver`1<float2>.Awake, X0
	031 Move X0, [X20]
	032 Move X20, [X19+168]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X20
	038 Move X1, X31
	039 Move X2, X31
	040 Call Object.op_Equality, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {51}
	045 Move X8, 0x588000
	046 Move X8, [X8+3104]
	047 Move X0, X19
	048 Move X1, [X8]
	049 Call 0x21A4894, X0
	050 Move [X19+168], X0
	051 Move X0, [X19+176]
	052 Move X1, X31
	053 Call Shader.PropertyToID, X0
	054 Move [X19+184], W0
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X30, [X31+48]
	060 Return 

Method: System.Void OnAffordanceValueUpdated(Unity.Mathematics.float2 newValue)

Disassembly:
	0x03BD64A4 ADRP X20, 0x80C000
	0x03BD64A8 LDRB W8, [X20 + 0xE90]
	0x03BD64AC MOV X19, X0
	0x03BD64B0 TBNZ X8, 0x0, 0x3BD64C8
	0x03BD64B4 ADRP X0, 0x587000
	0x03BD64B8 LDR X0, [X0 + 0xCE0]
	0x03BD64BC BL 0x1C16CF4
	0x03BD64C0 MOVZ W8, 0x1
	0x03BD64C4 STRB W8, [X20 + 0xE90]
	0x03BD64C8 LDR X0, [X19 + 0x98]
	0x03BD64CC CBZ X0, 0x3BD64E8
	0x03BD64D0 ADRP X8, 0x587000
	0x03BD64D4 LDR X8, [X8 + 0xCE0]
	0x03BD64D8 LDP X20, X19, [X31 + 0x10]
	0x03BD64DC LDR X1, [X8]
	0x03BD64E0 LDR X30, [X31], #0x20
	0x03BD64E4 B 0x29AD9C0
	0x03BD64E8 LDP X20, X19, [X31 + 0x10]
	0x03BD64EC LDR X30, [X31], #0x20
	0x03BD64F0 RET
	0x03BD64F4 LDR X0, [X0 + 0xA8]
	0x03BD64F8 RET
	0x03BD64FC SUB X31, X31, 0x150
	0x03BD6500 STR X29, [X31 + 0x120]
	0x03BD6504 STP X30, X21, [X31 + 0x130]
	0x03BD6508 STP X20, X19, [X31 + 0x140]
	0x03BD650C ADRP X21, 0x80C000
	0x03BD6510 ADRP X20, 0x586000
	0x03BD6514 LDRB W8, [X21 + 0xE91]
	0x03BD6518 LDR X20, [X20 + 0x660]
	0x03BD651C MOV X19, X1

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X0+168]
	008 Compare X8, 0
	009 JumpIfEqual {38}
	010 Move X20, [X8+48]
	011 Move V8, V1
	012 Move X19, X0
	013 Move V9, V0
	014 Move W9, 1
	015 Move [X8+56], W9
	016 Compare X20, 0
	017 JumpIfEqual {29}
	018 Move W21, [X19+184]
	019 Move V0, V9
	020 Move V1, V8
	021 Move X0, X31
	022 Call float2.op_Implicit, X0
	023 Move S2, W31
	024 Move S3, W31
	025 Move X0, X20
	026 Move W1, W21
	027 Move X2, X31
	028 Call MaterialPropertyBlock.SetVector, X0, X1, X2
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Move V0, V9
	035 Move V1, V8
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call 0x1C17F20

Method: Unity.Mathematics.float2 GetCurrentValueForCapture()

Disassembly:
	0x03BD65A0 RET
	0x03BD65A4 STR X30, [X31 - 0x20]!
	0x03BD65A8 STP X20, X19, [X31 + 0x10]
	0x03BD65AC ADRP X19, 0x80C000
	0x03BD65B0 ADRP X20, 0x587000
	0x03BD65B4 LDRB W8, [X19 + 0xE92]
	0x03BD65B8 LDR X20, [X20 + 0xCE8]
	0x03BD65BC TBNZ X8, 0x0, 0x3BD65D4
	0x03BD65C0 ADRP X0, 0x587000
	0x03BD65C4 LDR X0, [X0 + 0xCE8]
	0x03BD65C8 BL 0x1C16CF4
	0x03BD65CC MOVZ W8, 0x1
	0x03BD65D0 STRB W8, [X19 + 0xE92]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+168]
	005 Compare X0, 0
	006 JumpIfEqual {18}
	007 Call MaterialHelperBase.GetSharedMaterialForTarget, X0
	008 Compare X0, 0
	009 JumpIfEqual {18}
	010 Move W1, [X19+184]
	011 Move X2, X31
	012 Call Material.GetVector, X0, X1
	013 Move X0, X31
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Call float2.op_Implicit, X0
	017 Return X0
	018 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03BD65D4 LDR X0, [X20]

ISIL:
No ISIL was generated
