Type: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State.BaseAffordanceStateProvider

Method: System.Single get_transitionDuration()

Disassembly:
	0x03BCD968 LDRB W8, [X21 + 0xE3F]
	0x03BCD96C MOV X20, X1

ISIL:
	001 Move V0, [X0+32]
	002 Return V0

Method: System.Void set_transitionDuration(System.Single value)

Disassembly:
	0x03BCD970 MOV X19, X0
	0x03BCD974 TBNZ X8, 0x0, 0x3BCD9C8
	0x03BCD978 ADRP X0, 0x58D000
	0x03BCD97C LDR X0, [X0 + 0xB60]
	0x03BCD980 BL 0x1C16CF4
	0x03BCD984 ADRP X0, 0x58D000
	0x03BCD988 LDR X0, [X0 + 0x130]
	0x03BCD98C BL 0x1C16CF4
	0x03BCD990 ADRP X0, 0x58D000
	0x03BCD994 LDR X0, [X0 + 0x148]

ISIL:
	001 Move S1, 1
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Move S2, W31
	004 Move S3, 4
	005 NotImplemented "Instruction FDIV not yet implemented."
	006 Move [X0+32], S0
	007 Multiply S0, S0, S3
	008 NotImplemented "Instruction FCSEL not yet implemented."
	009 Move [X0+88], S1
	010 Move [X0+96], S0
	011 Return 

Method: System.Boolean get_isCurrentlyTransitioning()

Disassembly:
	0x03BCD9C0 MOVZ W8, 0x1
	0x03BCD9C4 STRB W8, [X21 + 0xE3F]
	0x03BCD9C8 LDR X8, [X19]
	0x03BCD9CC MOV X0, X19
	0x03BCD9D0 LDP X9, X1, [X8 + 0x1C8]
	0x03BCD9D4 BLR X9
	0x03BCD9D8 CBZ X20, 0x3BCDAC4
	0x03BCD9DC ADRP X9, 0x526000
	0x03BCD9E0 LDR X9, [X9 + 0x598]
	0x03BCD9E4 LDR X8, [X20]
	0x03BCD9E8 LDR X0, [X9]
	0x03BCD9EC LDRB W10, [X8 + 0x130]
	0x03BCD9F0 LDRB W9, [X0 + 0x130]
	0x03BCD9F4 CMP W10, W9
	0x03BCD9F8 B.CC 0x3BCDAC4
	0x03BCD9FC LDR X8, [X8 + 0xC8]
	0x03BCDA00 ADD X8, X8, X9, 0x3, LSL
	0x03BCDA04 LDUR X8, [X8 - 0x8]
	0x03BCDA08 CMP X8, X0
	0x03BCDA0C B.NE 0x3BCDAC4
	0x03BCDA10 LDR W8, [X0 + 0xE0]
	0x03BCDA14 CBNZ W8, 0x3BCDA1C
	0x03BCDA18 BL 0x1C16DFC
	0x03BCDA1C MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x816000
	005 Move W8, [X20+3626]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x591000
	012 Move X0, [X0+2400]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3626], W8
	016 Move W8, [X19+85]
	017 Compare W8, 0
	018 JumpIfEqual {25}
	019 Move X8, [X19+64]
	020 Compare X8, 0
	021 JumpIfEqual {30}
	022 Move W8, [X8+24]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction CSET not yet implemented."
	025 Move W0, 1
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0
	030 Call 0x1C17F20

Method: Unity.XR.CoreUtils.Bindings.Variables.IReadOnlyBindableVariable`1<UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State.AffordanceStateData> get_currentAffordanceStateData()

Disassembly:
	0x03BCDA20 MOV X1, X31
	0x03BCDA24 MOV X2, X31

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void OnValidate()

Disassembly:
	0x03BCDA28 BL 0x3C354F8
	0x03BCDA2C TBZ X0, 0x0, 0x3BCDAC4
	0x03BCDA30 STR X20, [X19 + 0x88]
	0x03BCDA34 ADRP X8, 0x58D000
	0x03BCDA38 LDR X8, [X8 + 0x148]
	0x03BCDA3C MOV X0, X20
	0x03BCDA40 LDR X1, [X8]
	0x03BCDA44 BL 0x1C16E00
	0x03BCDA48 CBZ X0, 0x3BCDA50
	0x03BCDA4C STR X0, [X19 + 0x90]

ISIL:
	001 Move V0, [X0+32]
	002 Move S1, 1
	003 Move S2, W31
	004 Move S3, 4
	005 NotImplemented "Instruction FDIV not yet implemented."
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 Multiply S0, S0, S3
	008 NotImplemented "Instruction FCSEL not yet implemented."
	009 Move [X0+88], S1
	010 Move [X0+96], S0
	011 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03BCDA50 ADRP X8, 0x58D000
	0x03BCDA54 LDR X0, [X19 + 0x88]
	0x03BCDA58 LDR X8, [X8 + 0x160]
	0x03BCDA5C LDR X1, [X8]
	0x03BCDA60 BL 0x1C16E00
	0x03BCDA64 CBZ X0, 0x3BCDA6C
	0x03BCDA68 STR X0, [X19 + 0x98]
	0x03BCDA6C ADRP X8, 0x58D000
	0x03BCDA70 LDR X0, [X19 + 0x88]
	0x03BCDA74 LDR X8, [X8 + 0x130]
	0x03BCDA78 LDR X1, [X8]
	0x03BCDA7C BL 0x1C16E00

ISIL:
	001 Move V0, [X0+32]
	002 Move S1, 1
	003 Move S2, 4
	004 Move X8, [X0]
	005 NotImplemented "Instruction FDIV not yet implemented."
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 Multiply S0, S0, S2
	008 Move S2, W31
	009 NotImplemented "Instruction FCSEL not yet implemented."
	010 Move [X0+88], S1
	011 Move [X0+96], S0
	012 Move X2, [X8+440]
	013 Move X1, [X8+448]
	014 CallNoReturn X2

Method: System.Void OnDisable()

Disassembly:
	0x03BCDA80 CBZ X0, 0x3BCDA88
	0x03BCDA84 STR X0, [X19 + 0xA0]
	0x03BCDA88 ADRP X8, 0x58D000

ISIL:
	001 Move X8, [X0]
	002 Move X2, [X8+456]
	003 Move X1, [X8+464]
	004 CallNoReturn X2

Method: System.Void Update()

Disassembly:
	0x03BCDA8C LDR X0, [X19 + 0x88]
	0x03BCDA90 LDR X8, [X8 + 0xB60]
	0x03BCDA94 LDR X1, [X8]
	0x03BCDA98 BL 0x1C16E00
	0x03BCDA9C CBZ X0, 0x3BCDAA4
	0x03BCDAA0 STR X0, [X19 + 0xA8]
	0x03BCDAA4 ADRP X8, 0x58D000
	0x03BCDAA8 LDR X0, [X19 + 0x88]
	0x03BCDAAC LDR X8, [X8 + 0xBD8]
	0x03BCDAB0 LDR X1, [X8]
	0x03BCDAB4 BL 0x1C16E00
	0x03BCDAB8 CBZ X0, 0x3BCDB24
	0x03BCDABC STR X0, [X19 + 0xB0]
	0x03BCDAC0 B 0x3BCDB28
	0x03BCDAC4 MOV X0, X31
	0x03BCDAC8 MOV W20, W31
	0x03BCDACC MOVI V0.2D, 0x0
	0x03BCDAD0 STR X31, [X19 + 0x88]
	0x03BCDAD4 STP V0, V0, [X19 + 0x90]
	0x03BCDAD8 STR X31, [X19 + 0xB0]
	0x03BCDADC LDP X8, X9, [X19 + 0x90]
	0x03BCDAE0 LDR X10, [X19]
	0x03BCDAE4 CMP X8, 0x0
	0x03BCDAE8 CSET W8, NE
	0x03BCDAEC CMP X9, 0x0
	0x03BCDAF0 STRB W8, [X19 + 0xD4]
	0x03BCDAF4 CSET W8, NE
	0x03BCDAF8 CMP X0, 0x0
	0x03BCDAFC STRB W8, [X19 + 0xD5]
	0x03BCDB00 CSET W8, NE
	0x03BCDB04 STRB W8, [X19 + 0xD6]
	0x03BCDB08 LDP X8, X1, [X10 + 0x1B8]
	0x03BCDB0C MOV X0, X19
	0x03BCDB10 BLR X8
	0x03BCDB14 MOV W0, W20
	0x03BCDB18 LDP X20, X19, [X31 + 0x10]
	0x03BCDB1C LDP X30, X21, [X31], #0x20
	0x03BCDB20 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x816000
	005 Move W8, [X20+3627]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x591000
	012 Move X0, [X0+2408]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3627], W8
	016 Move W8, [X19+84]
	017 Compare W8, 0
	018 JumpIfEqual {33}
	019 Move X8, [X19+40]
	020 Compare X8, 0
	021 JumpIfEqual {46}
	022 NotImplemented "Instruction LDRH not yet implemented."
	023 Move X0, X19
	024 Call BaseAffordanceStateProvider.OnAffordanceStateUpdated, X0, X1
	025 Move S0, 1
	026 Move X0, X19
	027 Call BaseAffordanceStateProvider.DoTween, X0, V0
	028 Move [X19+84], W31
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return 
	033 Move V0, [X19+88]
	034 NotImplemented "Instruction FCMP not yet implemented."
	035 Move S0, 1
	036 Move X0, X31
	037 Call Time.get_deltaTime
	038 Move V1, [X19+88]
	039 Multiply S0, S0, S1
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Call BaseAffordanceStateProvider.DoTween, X0, V0
	045 Return 
	046 Call 0x1C17F20

Method: System.Void BindToProviders()

Disassembly:
	0x03BCE0E8 ADRP X20, 0x525000
	0x03BCE0EC LDRB W8, [X21 + 0xE3E]
	0x03BCE0F0 LDR X20, [X20 + 0x970]
	0x03BCE0F4 MOV X19, X0
	0x03BCE0F8 TBNZ X8, 0x0, 0x3BCE110
	0x03BCE0FC ADRP X0, 0x525000
	0x03BCE100 LDR X0, [X0 + 0x970]
	0x03BCE104 BL 0x1C16CF4
	0x03BCE108 MOVZ W8, 0x1
	0x03BCE10C STRB W8, [X21 + 0xE3E]
	0x03BCE110 LDR V0, [X19 + 0x20]
	0x03BCE114 FMOV S1, 1
	0x03BCE118 FMOV S2, W31
	0x03BCE11C FMOV S3, 4
	0x03BCE120 FDIV S1, S1, S0
	0x03BCE124 FCMP S0, 0x0
	0x03BCE128 FMUL S0, S0, S3
	0x03BCE12C FCSEL S1, S1, S2, GT
	0x03BCE130 STP S1, S0, [X19 + 0x58]
	0x03BCE134 LDR X0, [X20]
	0x03BCE138 LDR W8, [X0 + 0xE0]
	0x03BCE13C CBNZ W8, 0x3BCE144
	0x03BCE140 BL 0x1C16DFC
	0x03BCE144 MOV X0, X31
	0x03BCE148 BL 0x3C018E4
	0x03BCE14C TBZ X0, 0x0, 0x3BCE198
	0x03BCE150 MOV X0, X19
	0x03BCE154 MOV X1, X31
	0x03BCE158 BL 0x3C32454
	0x03BCE15C TBZ X0, 0x0, 0x3BCE198
	0x03BCE160 LDRB W8, [X19 + 0x69]
	0x03BCE164 CBZ W8, 0x3BCE198
	0x03BCE168 LDR X1, [X19 + 0xC8]
	0x03BCE16C STR W31, [X19 + 0xD8]
	0x03BCE170 STRB W31, [X19 + 0xD3]
	0x03BCE174 CBZ X1, 0x3BCE188
	0x03BCE178 MOV X0, X19
	0x03BCE17C MOV X2, X31
	0x03BCE180 BL 0x3C36968
	0x03BCE184 STR X31, [X19 + 0xC8]
	0x03BCE188 MOV X0, X19
	0x03BCE18C LDP X20, X19, [X31 + 0x10]
	0x03BCE190 LDP X30, X21, [X31], #0x20
	0x03BCE194 B 0x3BCDC38
	0x03BCE198 LDP X20, X19, [X31 + 0x10]
	0x03BCE19C LDP X30, X21, [X31], #0x20
	0x03BCE1A0 RET
	0x03BCE1A4 MOVZ W8, 0x1
	0x03BCE1A8 STRB W8, [X0 + 0xD2]
	0x03BCE1AC B 0x3BCDC38
	0x03BCE1B0 STRB W31, [X0 + 0xD2]
	0x03BCE1B4 B 0x3BCDC38
	0x03BCE1B8 B 0x3BCDC38

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x815000
	007 Move X22, 0x590000
	008 Move X21, 0x590000
	009 Move W8, [X20+3628]
	010 Move X22, [X22+2480]
	011 Move X21, [X21+2488]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x590000
	018 Move X0, [X0+2480]
	019 Call 0x1C17CF4
	020 Move X0, 0x590000
	021 Move X0, [X0+2488]
	022 Call 0x1C17CF4
	023 Move X0, 0x590000
	024 Move X0, [X0+2496]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+3628], W8
	028 Move X8, [X19]
	029 Move X0, X19
	030 Move X9, [X8+456]
	031 Move X1, [X8+464]
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move W8, 1
	034 Move [X19+84], W8
	035 Move X0, [X22]
	036 Move X20, [X19+40]
	037 Call 0x1C17F10
	038 Move X2, [X21]
	039 Move X1, X19
	040 Move X3, X31
	041 Move X21, X0
	042 Call Action`1<AffordanceStateData>..ctor, X0, X1, X2
	043 Compare X20, 0
	044 JumpIfEqual {64}
	045 Move X8, 0x590000
	046 Move X8, [X8+2496]
	047 Move X0, X20
	048 Move X1, X21
	049 Move X2, [X8]
	050 Call 0x28CC650, X0, X1
	051 Move X8, [X19+72]
	052 Compare X8, 0
	053 JumpIfEqual {64}
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X1, X0
	059 Move X0, X8
	060 Move X2, X31
	061 Move X30, [X31+48]
	062 Call BindingsGroup.AddBinding, X0, X1
	063 Return 
	064 Call 0x1C17F20

Method: System.Void ClearBindings()

Disassembly:
	0x03BCE1D8 TBNZ X8, 0x0, 0x3BCE1F0
	0x03BCE1DC ADRP X0, 0x58D000
	0x03BCE1E0 LDR X0, [X0 + 0x638]
	0x03BCE1E4 BL 0x1C16CF4
	0x03BCE1E8 MOVZ W8, 0x1
	0x03BCE1EC STRB W8, [X21 + 0xE40]
	0x03BCE1F0 LDRB W8, [X19 + 0x69]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call BindingsGroup.Clear, X0
	008 Return 
	009 Call 0x1C17F20

Method: System.Void AddBinding(Unity.XR.CoreUtils.Bindings.IEventBinding binding)

Disassembly:
	0x03BCE1BC B 0x3BCDC38
	0x03BCE1C0 STP X30, X21, [X31 - 0x20]!
	0x03BCE1C4 STP X20, X19, [X31 + 0x10]
	0x03BCE1C8 ADRP X21, 0x814000
	0x03BCE1CC LDRB W8, [X21 + 0xE40]
	0x03BCE1D0 MOV X20, X1
	0x03BCE1D4 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call BindingsGroup.AddBinding, X0, X1
	008 Return 
	009 Call 0x1C17F20

Method: System.Void UpdateAffordanceState(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State.AffordanceStateData newAffordanceStateData)

Disassembly:
	0x03BCE1F4 CBZ W8, 0x3BCE204
	0x03BCE1F8 LDP X20, X19, [X31 + 0x10]
	0x03BCE1FC LDP X30, X21, [X31], #0x20
	0x03BCE200 RET
	0x03BCE204 CBZ X20, 0x3BCE2BC
	0x03BCE208 MOV X0, X20
	0x03BCE20C MOV X1, X31
	0x03BCE210 BL 0x3B6B738
	0x03BCE214 ADRP X21, 0x58D000
	0x03BCE218 LDR X21, [X21 + 0x638]
	0x03BCE21C LDR X1, [X21]
	0x03BCE220 BL 0x1C16E00
	0x03BCE224 CBZ X0, 0x3BCE1F8
	0x03BCE228 LDR W8, [X19 + 0xD8]
	0x03BCE22C MOV X20, X0
	0x03BCE230 ADD W8, W8, 0x1
	0x03BCE234 STR W8, [X19 + 0xD8]
	0x03BCE238 LDR X8, [X0]
	0x03BCE23C LDR X1, [X21]
	0x03BCE240 LDRH W9, [X8 + 0x12E]
	0x03BCE244 CBZ X9, 0x3BCE268
	0x03BCE248 LDR X10, [X8 + 0xB0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x815000
	006 Move W8, [X21+3629]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x550000
	014 Move X0, [X0+1320]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3629], W8
	018 Move X0, [X20+40]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0x550000
	022 Move X8, [X8+1320]
	023 And X1, X19, 0xFFFF
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call 0x28CC44C, X0, X1
	030 Return 
	031 Call 0x1C17F20

Method: System.Void OnAffordanceStateUpdated(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State.AffordanceStateData newAffordanceStateData)

Disassembly:
	0x03BCDB24 LDR X0, [X19 + 0xB0]
	0x03BCDB28 MOVZ W20, 0x1
	0x03BCDB2C B 0x3BCDADC
	0x03BCDB30 LDRB W0, [X0 + 0x68]
	0x03BCDB34 RET
	0x03BCDB38 AND W8, W1, 0x1
	0x03BCDB3C STRB W8, [X0 + 0x68]
	0x03BCDB40 RET
	0x03BCDB44 LDRB W0, [X0 + 0x69]
	0x03BCDB48 RET
	0x03BCDB4C STR X30, [X31 - 0x30]!
	0x03BCDB50 STP X22, X21, [X31 + 0x10]
	0x03BCDB54 STP X20, X19, [X31 + 0x20]
	0x03BCDB58 ADRP X21, 0x815000
	0x03BCDB5C ADRP X22, 0x526000
	0x03BCDB60 LDRB W8, [X21 + 0xE39]
	0x03BCDB64 LDR X22, [X22 + 0x970]
	0x03BCDB68 MOV W20, W1
	0x03BCDB6C MOV X19, X0
	0x03BCDB70 TBNZ X8, 0x0, 0x3BCDB88
	0x03BCDB74 ADRP X0, 0x526000
	0x03BCDB78 LDR X0, [X0 + 0x970]
	0x03BCDB7C BL 0x1C16CF4
	0x03BCDB80 MOVZ W8, 0x1
	0x03BCDB84 STRB W8, [X21 + 0xE39]
	0x03BCDB88 LDR X0, [X22]
	0x03BCDB8C LDR W8, [X0 + 0xE0]
	0x03BCDB90 CBNZ W8, 0x3BCDB98
	0x03BCDB94 BL 0x1C16DFC
	0x03BCDB98 MOV X0, X31
	0x03BCDB9C BL 0x3C018E4
	0x03BCDBA0 TBZ X0, 0x0, 0x3BCDBC0
	0x03BCDBA4 MOV X0, X19
	0x03BCDBA8 MOV X1, X31
	0x03BCDBAC BL 0x3C32454
	0x03BCDBB0 TBZ X0, 0x0, 0x3BCDBC0
	0x03BCDBB4 LDRB W8, [X19 + 0x69]
	0x03BCDBB8 EOR W8, W8, 0x1
	0x03BCDBBC B 0x3BCDBC4
	0x03BCDBC0 MOV W8, W31
	0x03BCDBC4 AND W8, W20, W8, 0x0
	0x03BCDBC8 TBZ X8, 0x0, 0x3BCDBF4
	0x03BCDBCC LDR X1, [X19 + 0xC8]
	0x03BCDBD0 STR W31, [X19 + 0xD8]
	0x03BCDBD4 STRB W31, [X19 + 0xD3]
	0x03BCDBD8 CBZ X1, 0x3BCDBEC
	0x03BCDBDC MOV X0, X19
	0x03BCDBE0 MOV X2, X31
	0x03BCDBE4 BL 0x3C36968
	0x03BCDBE8 STR X31, [X19 + 0xC8]
	0x03BCDBEC MOV X0, X19
	0x03BCDBF0 BL 0x3BCDC38
	0x03BCDBF4 AND W8, W20, 0x1
	0x03BCDBF8 STRB W8, [X19 + 0x69]
	0x03BCDBFC LDP X20, X19, [X31 + 0x20]
	0x03BCDC00 LDP X22, X21, [X31 + 0x10]
	0x03BCDC04 LDR X30, [X31], #0x30
	0x03BCDC08 RET
	0x03BCDC0C STP X30, X19, [X31 - 0x10]!
	0x03BCDC10 LDR X1, [X0 + 0xC8]
	0x03BCDC14 STR W31, [X0 + 0xD8]
	0x03BCDC18 STRB W31, [X0 + 0xD3]
	0x03BCDC1C CBZ X1, 0x3BCDC30
	0x03BCDC20 MOV X2, X31
	0x03BCDC24 MOV X19, X0
	0x03BCDC28 BL 0x3C36968
	0x03BCDC2C STR X31, [X19 + 0xC8]
	0x03BCDC30 LDP X30, X19, [X31], #0x10
	0x03BCDC34 RET
	0x03BCDC38 STR X30, [X31 - 0x20]!
	0x03BCDC3C STP X20, X19, [X31 + 0x10]
	0x03BCDC40 LDR X8, [X0]
	0x03BCDC44 MOV X19, X0
	0x03BCDC48 LDR X9, [X8 + 0x328]
	0x03BCDC4C LDR X1, [X8 + 0x330]
	0x03BCDC50 BLR X9
	0x03BCDC54 MOV X20, X0
	0x03BCDC58 AND W8, W20, 0xFF
	0x03BCDC5C CMP W8, 0x4
	0x03BCDC60 B.EQ 0x3BCDC88
	0x03BCDC64 LDR X1, [X19 + 0xB8]
	0x03BCDC68 CBZ X1, 0x3BCDC7C
	0x03BCDC6C MOV X0, X19
	0x03BCDC70 MOV X2, X31
	0x03BCDC74 BL 0x3C36968
	0x03BCDC78 STR X31, [X19 + 0xB8]
	0x03BCDC7C AND W8, W20, 0xFF
	0x03BCDC80 CMP W8, 0x5
	0x03BCDC84 B.EQ 0x3BCDCA0
	0x03BCDC88 LDR X1, [X19 + 0xC0]
	0x03BCDC8C CBZ X1, 0x3BCDCA0
	0x03BCDC90 MOV X0, X19
	0x03BCDC94 MOV X2, X31
	0x03BCDC98 BL 0x3C36968
	0x03BCDC9C STR X31, [X19 + 0xC0]
	0x03BCDCA0 AND X1, X20, 0xFFFF
	0x03BCDCA4 MOV X0, X19
	0x03BCDCA8 LDP X20, X19, [X31 + 0x10]
	0x03BCDCAC LDR X30, [X31], #0x20
	0x03BCDCB0 B 0x3BCD1F4
	0x03BCDCB4 LDRB W0, [X0 + 0x6A]
	0x03BCDCB8 RET
	0x03BCDCBC AND W8, W1, 0x1
	0x03BCDCC0 STRB W8, [X0 + 0x6A]
	0x03BCDCC4 RET
	0x03BCDCC8 LDRB W0, [X0 + 0x6B]
	0x03BCDCCC RET
	0x03BCDCD0 AND W8, W1, 0x1
	0x03BCDCD4 STRB W8, [X0 + 0x6B]
	0x03BCDCD8 RET
	0x03BCDCDC LDRB W0, [X0 + 0x6C]
	0x03BCDCE0 RET
	0x03BCDCE4 AND W8, W1, 0x1
	0x03BCDCE8 STRB W8, [X0 + 0x6C]
	0x03BCDCEC RET
	0x03BCDCF0 LDR W0, [X0 + 0x70]
	0x03BCDCF4 RET
	0x03BCDCF8 STR W1, [X0 + 0x70]
	0x03BCDCFC RET
	0x03BCDD00 LDR W0, [X0 + 0x74]
	0x03BCDD04 RET
	0x03BCDD08 STR W1, [X0 + 0x74]
	0x03BCDD0C RET
	0x03BCDD10 LDR V0, [X0 + 0x78]
	0x03BCDD14 RET
	0x03BCDD18 STR S0, [X0 + 0x78]
	0x03BCDD1C RET
	0x03BCDD20 LDR X0, [X0 + 0x80]
	0x03BCDD24 RET
	0x03BCDD28 STR X1, [X0 + 0x80]
	0x03BCDD2C RET
	0x03BCDD30 STR X30, [X31 - 0x20]!
	0x03BCDD34 STP X20, X19, [X31 + 0x10]
	0x03BCDD38 ADRP X20, 0x815000
	0x03BCDD3C LDRB W8, [X20 + 0xE3A]
	0x03BCDD40 MOV X19, X0
	0x03BCDD44 TBNZ X8, 0x0, 0x3BCDD5C
	0x03BCDD48 ADRP X0, 0x58D000
	0x03BCDD4C LDR X0, [X0 + 0x148]
	0x03BCDD50 BL 0x1C16CF4
	0x03BCDD54 MOVZ W8, 0x1
	0x03BCDD58 STRB W8, [X20 + 0xE3A]
	0x03BCDD5C LDRB W8, [X19 + 0xD4]

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0x816000
	013 Move W8, [X21+3630]
	014 Move X20, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {40}
	020 Move X0, 0x591000
	021 Move X0, [X0+2408]
	022 Call 0x1C17CF4
	023 Move X0, 0x591000
	024 Move X0, [X0+2416]
	025 Call 0x1C17CF4
	026 Move X0, 0x591000
	027 Move X0, [X0+2424]
	028 Call 0x1C17CF4
	029 Move X0, 0x591000
	030 Move X0, [X0+2432]
	031 Call 0x1C17CF4
	032 Move X0, 0x591000
	033 Move X0, [X0+2440]
	034 Call 0x1C17CF4
	035 Move X0, 0x591000
	036 Move X0, [X0+2448]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X21+3630], W8
	040 Move X0, [X19+48]
	041 Compare X0, 0
	042 JumpIfEqual {147}
	043 Move X27, 0x591000
	044 Move X28, 0x591000
	045 Move X24, 0x591000
	046 Move X25, 0x591000
	047 Move X26, 0x591000
	048 Move X27, [X27+2416]
	049 Move X28, [X28+2440]
	050 Move X24, [X24+2448]
	051 Move X25, [X25+2424]
	052 Move X26, [X26+2432]
	053 Move W21, W31
	054 And X20, X20, 0xFFFF
	055 Move X1, [X27]
	056 Call 0x2D58B54, X0
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X0, [X19+48]
	059 Compare X0, 0
	060 JumpIfEqual {147}
	061 Move X2, [X28]
	062 Move W1, W21
	063 Call 0x2D58B78, X0, X1
	064 Move X9, [X19+40]
	065 Compare X9, 0
	066 JumpIfEqual {147}
	067 Move X22, X0
	068 Compare X0, 0
	069 JumpIfEqual {147}
	070 Move X8, [X22]
	071 NotImplemented "Instruction LDRH not yet implemented."
	072 Move X1, [X24]
	073 NotImplemented "Instruction LDRH not yet implemented."
	074 Compare X9, 0
	075 JumpIfEqual {82}
	076 Move X10, [X8+176]
	077 Add X10, X10, 8
	078 NotImplemented "Instruction LDUR not yet implemented."
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Subtract X9, X9, 1
	081 Add X10, X10, 16
	082 Move W2, 1
	083 Move X0, X22
	084 Call 0x1C5D788
	085 Move W9, [X10]
	086 Add W9, W9, 1
	087 Add X8, X8, W9
	088 Add X0, X8, 312
	089 Move X8, [X0]
	090 Move X3, [X0+8]
	091 Move X0, X22
	092 Move X1, X23
	093 Move X2, X20
	094 NotImplemented "Instruction BLR not yet implemented."
	095 Move X0, [X19+48]
	096 Add W21, W21, 1
	097 Compare X0, 0
	098 JumpIfNotEqual {55}
	099 Move X0, [X19+56]
	100 Compare X0, 0
	101 JumpIfEqual {147}
	102 Move W21, W31
	103 Move X1, [X25]
	104 Call 0x2D58B54, X0
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X0, [X19+56]
	107 Compare X0, 0
	108 JumpIfEqual {147}
	109 Move X2, [X26]
	110 Move W1, W21
	111 Call 0x2D58B78, X0, X1
	112 Move X9, [X19+40]
	113 Compare X9, 0
	114 JumpIfEqual {147}
	115 Move X22, X0
	116 Compare X0, 0
	117 JumpIfEqual {147}
	118 Move X8, [X22]
	119 NotImplemented "Instruction LDRH not yet implemented."
	120 Move X1, [X24]
	121 NotImplemented "Instruction LDRH not yet implemented."
	122 Compare X9, 0
	123 JumpIfEqual {130}
	124 Move X10, [X8+176]
	125 Add X10, X10, 8
	126 NotImplemented "Instruction LDUR not yet implemented."
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Subtract X9, X9, 1
	129 Add X10, X10, 16
	130 Move W2, 1
	131 Move X0, X22
	132 Call 0x1C5D788
	133 Move W9, [X10]
	134 Add W9, W9, 1
	135 Add X8, X8, W9
	136 Add X0, X8, 312
	137 Move X8, [X0]
	138 Move X3, [X0+8]
	139 Move X0, X22
	140 Move X1, X23
	141 Move X2, X20
	142 NotImplemented "Instruction BLR not yet implemented."
	143 Move X0, [X19+56]
	144 Add W21, W21, 1
	145 Compare X0, 0
	146 JumpIfNotEqual {103}
	147 Call 0x1C17F20
	148 Move [X19+80], W31
	149 Move [X19+85], W31
	150 Move X20, [X31+80]
	151 Move X19, [X31+88]
	152 Move X22, [X31+64]
	153 Move X21, [X31+72]
	154 Move X24, [X31+48]
	155 Move X23, [X31+56]
	156 Move X26, [X31+32]
	157 Move X25, [X31+40]
	158 Move X28, [X31+16]
	159 Move X27, [X31+24]
	160 Move X30, [X31+96]
	161 Return 

Method: System.Boolean RegisterAffordanceReceiver(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Receiver.IAffordanceStateReceiver receiver)

Disassembly:
	0x03BCE24C ADD X10, X10, 0x8
	0x03BCE250 LDUR X11, [X10 - 0x8]
	0x03BCE254 CMP X11, X1
	0x03BCE258 B.EQ 0x3BCE278
	0x03BCE25C SUBS X9, X9, 0x1
	0x03BCE260 ADD X10, X10, 0x10
	0x03BCE264 B.NE 0x3BCE250
	0x03BCE268 MOV X0, X20
	0x03BCE26C MOV W2, W31
	0x03BCE270 BL 0x1C5C788
	0x03BCE274 B 0x3BCE284
	0x03BCE278 LDRSW X9, [X10]
	0x03BCE27C ADD X8, X8, X9, 0x4, LSL
	0x03BCE280 ADD X0, X8, 0x138
	0x03BCE284 LDP X8, X1, [X0]
	0x03BCE288 MOV X0, X20
	0x03BCE28C BLR X8
	0x03BCE290 CBZ W0, 0x3BCE1F8
	0x03BCE294 LDR X0, [X19 + 0xC8]
	0x03BCE298 CBNZ X0, 0x3BCE2B4
	0x03BCE29C MOV X0, X19
	0x03BCE2A0 BL 0x3BCE2C0
	0x03BCE2A4 MOV X1, X0
	0x03BCE2A8 MOV X0, X19
	0x03BCE2AC MOV X2, X31
	0x03BCE2B0 BL 0x3C366FC
	0x03BCE2B4 STR X0, [X19 + 0xC8]
	0x03BCE2B8 B 0x3BCE1F8
	0x03BCE2BC BL 0x1C16F20
	0x03BCE2C0 STP X30, X21, [X31 - 0x20]!
	0x03BCE2C4 STP X20, X19, [X31 + 0x10]
	0x03BCE2C8 ADRP X20, 0x814000
	0x03BCE2CC ADRP X21, 0x58F000
	0x03BCE2D0 LDRB W8, [X20 + 0xE4A]
	0x03BCE2D4 LDR X21, [X21 + 0xA40]
	0x03BCE2D8 MOV X19, X0
	0x03BCE2DC TBNZ X8, 0x0, 0x3BCE2F4
	0x03BCE2E0 ADRP X0, 0x58F000
	0x03BCE2E4 LDR X0, [X0 + 0xA40]
	0x03BCE2E8 BL 0x1C16CF4
	0x03BCE2EC MOVZ W8, 0x1
	0x03BCE2F0 STRB W8, [X20 + 0xE4A]
	0x03BCE2F4 LDR X0, [X21]
	0x03BCE2F8 BL 0x1C16F10
	0x03BCE2FC MOV X1, X31
	0x03BCE300 MOV X20, X0
	0x03BCE304 BL 0x33BDD8C
	0x03BCE308 STR W31, [X20 + 0x10]
	0x03BCE30C STR X19, [X20 + 0x20]
	0x03BCE310 MOV X0, X20
	0x03BCE314 LDP X20, X19, [X31 + 0x10]
	0x03BCE318 LDP X30, X21, [X31], #0x20
	0x03BCE31C RET
	0x03BCE320 STP X30, X21, [X31 - 0x20]!
	0x03BCE324 STP X20, X19, [X31 + 0x10]
	0x03BCE328 ADRP X21, 0x814000
	0x03BCE32C LDRB W8, [X21 + 0xE41]
	0x03BCE330 MOV X20, X1
	0x03BCE334 MOV X19, X0
	0x03BCE338 TBNZ X8, 0x0, 0x3BCE350
	0x03BCE33C ADRP X0, 0x58D000
	0x03BCE340 LDR X0, [X0 + 0x638]
	0x03BCE344 BL 0x1C16CF4
	0x03BCE348 MOVZ W8, 0x1
	0x03BCE34C STRB W8, [X21 + 0xE41]
	0x03BCE350 LDRB W8, [X19 + 0x69]
	0x03BCE354 CBZ W8, 0x3BCE364
	0x03BCE358 LDP X20, X19, [X31 + 0x10]
	0x03BCE35C LDP X30, X21, [X31], #0x20
	0x03BCE360 RET
	0x03BCE364 CBZ X20, 0x3BCE3CC
	0x03BCE368 MOV X0, X20
	0x03BCE36C MOV X1, X31
	0x03BCE370 BL 0x3B6B814
	0x03BCE374 ADRP X8, 0x58D000
	0x03BCE378 LDR X8, [X8 + 0x638]
	0x03BCE37C LDR X1, [X8]
	0x03BCE380 BL 0x1C16E00
	0x03BCE384 CBZ X0, 0x3BCE358

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x815000
	007 Move X22, 0x590000
	008 Move W8, [X21+3631]
	009 Move X22, [X22+2456]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x526000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x590000
	020 Move X0, [X0+2456]
	021 Call 0x1C17CF4
	022 Move X0, 0x590000
	023 Move X0, [X0+2464]
	024 Call 0x1C17CF4
	025 Move X0, 0x590000
	026 Move X0, [X0+2504]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+3631], W8
	030 Move X1, [X22]
	031 Move X0, X20
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {42}
	035 Move X1, X0
	036 Move X0, X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Move X8, 0x590000
	043 Move X8, [X8+2464]
	044 Move X0, X20
	045 Move X1, [X8]
	046 Call 0x1C17E00
	047 Compare X0, 0
	048 JumpIfEqual {58}
	049 Move X1, X0
	050 Move X0, X19
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Call BaseAffordanceStateProvider.RegisterAffordanceReceiver, X0, X1
	057 Return X0
	058 Compare X20, 0
	059 JumpIfEqual {89}
	060 Move X0, X20
	061 Move X1, X31
	062 Call "il2cpp_vm_object_is_inst", X0
	063 Compare X0, 0
	064 JumpIfEqual {96}
	065 Move X8, [X0]
	066 Move X9, [X8+424]
	067 Move X1, [X8+432]
	068 NotImplemented "Instruction BLR not yet implemented."
	069 Move X8, 0x590000
	070 Move X8, [X8+2504]
	071 Move X1, X0
	072 Move X2, X31
	073 Move X8, [X8]
	074 Move X0, X8
	075 Call String.Concat, X0, X1
	076 Move X8, 0x526000
	077 Move X8, [X8+2600]
	078 Move X20, X0
	079 Move X8, [X8]
	080 Move W9, [X8+224]
	081 Compare W9, 0
	082 JumpIfNotEqual {85}
	083 Move X0, X8
	084 Call 0x1C17DFC
	085 Move X0, X20
	086 Move X1, X19
	087 Move X2, X31
	088 Call Debug.LogError, X0, X1
	089 Move X20, [X31+32]
	090 Move X19, [X31+40]
	091 Move X22, [X31+16]
	092 Move X21, [X31+24]
	093 Move W0, W31
	094 Move X30, [X31+48]
	095 Return X0
	096 Call 0x1C17F20

Method: System.Boolean RegisterAffordanceReceiver(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Receiver.IAsyncAffordanceStateReceiver receiver)

Disassembly:
	0x03BCE388 LDR W8, [X19 + 0xD8]
	0x03BCE38C SUB W8, W8, 0x1
	0x03BCE390 CMP W8, 0x0
	0x03BCE394 STR W8, [X19 + 0xD8]
	0x03BCE398 B.GT 0x3BCE358
	0x03BCE39C LDR X1, [X19 + 0xC8]
	0x03BCE3A0 STR W31, [X19 + 0xD8]
	0x03BCE3A4 STRB W31, [X19 + 0xD3]
	0x03BCE3A8 CBZ X1, 0x3BCE3BC
	0x03BCE3AC MOV X0, X19
	0x03BCE3B0 MOV X2, X31
	0x03BCE3B4 BL 0x3C36968
	0x03BCE3B8 STR X31, [X19 + 0xC8]
	0x03BCE3BC MOV X0, X19
	0x03BCE3C0 LDP X20, X19, [X31 + 0x10]
	0x03BCE3C4 LDP X30, X21, [X31], #0x20
	0x03BCE3C8 B 0x3BCDC38
	0x03BCE3CC BL 0x1C16F20
	0x03BCE3D0 STR X30, [X31 - 0x20]!
	0x03BCE3D4 STP X20, X19, [X31 + 0x10]
	0x03BCE3D8 ADRP X20, 0x814000
	0x03BCE3DC LDRB W8, [X20 + 0xE42]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x815000
	006 Move W8, [X21+3632]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x590000
	014 Move X0, [X0+2512]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3632], W8
	018 Move X0, [X20+48]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0x590000
	022 Move X8, [X8+2512]
	023 Move X1, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call 0x2D58DD8, X0, X1
	030 Return X0
	031 Call 0x1C17F20

Method: System.Boolean RegisterAffordanceReceiver(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Receiver.ISynchronousAffordanceStateReceiver receiver)

Disassembly:
	0x03BCE3E0 MOV X19, X0
	0x03BCE3E4 TBNZ X8, 0x0, 0x3BCE3FC
	0x03BCE3E8 ADRP X0, 0x52C000
	0x03BCE3EC LDR X0, [X0 + 0x4B8]
	0x03BCE3F0 BL 0x1C16CF4
	0x03BCE3F4 MOVZ W8, 0x1
	0x03BCE3F8 STRB W8, [X20 + 0xE42]
	0x03BCE3FC LDRB W8, [X19 + 0x6B]
	0x03BCE400 CBNZ W8, 0x3BCE430
	0x03BCE404 LDR W8, [X19 + 0x70]
	0x03BCE408 CMP W8, 0x1
	0x03BCE40C B.NE 0x3BCE430
	0x03BCE410 ADRP X8, 0x52C000
	0x03BCE414 LDR X8, [X8 + 0x4B8]
	0x03BCE418 LDR V0, [X19 + 0x78]
	0x03BCE41C LDR X8, [X8]
	0x03BCE420 LDR X8, [X8 + 0xB8]
	0x03BCE424 LDR V1, [X8]
	0x03BCE428 FCMP S0, S1
	0x03BCE42C B.PL 0x3BCE440
	0x03BCE430 MOV X0, X19
	0x03BCE434 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x815000
	006 Move W8, [X21+3633]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x590000
	014 Move X0, [X0+2520]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3633], W8
	018 Move X0, [X20+56]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0x590000
	022 Move X8, [X8+2520]
	023 Move X1, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call 0x2D58DD8, X0, X1
	030 Return X0
	031 Call 0x1C17F20

Method: System.Boolean UnregisterAffordanceReceiver(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Receiver.IAffordanceStateReceiver receiver)

Disassembly:
	0x03BCE438 LDR X30, [X31], #0x20
	0x03BCE43C B 0x3BCDC38
	0x03BCE440 LDR X8, [X19]
	0x03BCE444 MOV X0, X19
	0x03BCE448 LDP X20, X19, [X31 + 0x10]
	0x03BCE44C LDR X2, [X8 + 0x2F8]
	0x03BCE450 LDR X1, [X8 + 0x300]
	0x03BCE454 LDR X30, [X31], #0x20
	0x03BCE458 BR X2
	0x03BCE45C STR X30, [X31 - 0x20]!
	0x03BCE460 STP X20, X19, [X31 + 0x10]
	0x03BCE464 ADRP X20, 0x814000
	0x03BCE468 LDRB W8, [X20 + 0xE43]
	0x03BCE46C MOV X19, X0
	0x03BCE470 TBNZ X8, 0x0, 0x3BCE488
	0x03BCE474 ADRP X0, 0x52C000
	0x03BCE478 LDR X0, [X0 + 0x4B8]
	0x03BCE47C BL 0x1C16CF4
	0x03BCE480 MOVZ W8, 0x1
	0x03BCE484 STRB W8, [X20 + 0xE43]
	0x03BCE488 LDRB W8, [X19 + 0x6B]
	0x03BCE48C CBNZ W8, 0x3BCE4BC
	0x03BCE490 LDR W8, [X19 + 0x70]
	0x03BCE494 CMP W8, 0x2
	0x03BCE498 B.NE 0x3BCE4BC
	0x03BCE49C ADRP X8, 0x52C000
	0x03BCE4A0 LDR X8, [X8 + 0x4B8]
	0x03BCE4A4 LDR V0, [X19 + 0x78]
	0x03BCE4A8 LDR X8, [X8]
	0x03BCE4AC LDR X8, [X8 + 0xB8]
	0x03BCE4B0 LDR V1, [X8]
	0x03BCE4B4 FCMP S0, S1
	0x03BCE4B8 B.PL 0x3BCE4E0
	0x03BCE4BC LDR X8, [X19 + 0xB8]
	0x03BCE4C0 CBZ X8, 0x3BCE4D0
	0x03BCE4C4 LDP X20, X19, [X31 + 0x10]
	0x03BCE4C8 LDR X30, [X31], #0x20
	0x03BCE4CC RET
	0x03BCE4D0 MOV X0, X19
	0x03BCE4D4 LDP X20, X19, [X31 + 0x10]
	0x03BCE4D8 LDR X30, [X31], #0x20
	0x03BCE4DC B 0x3BCDC38
	0x03BCE4E0 LDR X8, [X19]
	0x03BCE4E4 MOV X0, X19
	0x03BCE4E8 LDP X20, X19, [X31 + 0x10]
	0x03BCE4EC LDR X2, [X8 + 0x2F8]
	0x03BCE4F0 LDR X1, [X8 + 0x300]
	0x03BCE4F4 LDR X30, [X31], #0x20
	0x03BCE4F8 BR X2
	0x03BCE4FC B 0x3BCDC38
	0x03BCE500 B 0x3BCDC38
	0x03BCE504 STR X30, [X31 - 0x20]!
	0x03BCE508 STP X20, X19, [X31 + 0x10]
	0x03BCE50C ADRP X20, 0x814000
	0x03BCE510 LDRB W8, [X20 + 0xE44]
	0x03BCE514 MOV X19, X0
	0x03BCE518 TBNZ X8, 0x0, 0x3BCE530
	0x03BCE51C ADRP X0, 0x52C000
	0x03BCE520 LDR X0, [X0 + 0x4B8]
	0x03BCE524 BL 0x1C16CF4
	0x03BCE528 MOVZ W8, 0x1
	0x03BCE52C STRB W8, [X20 + 0xE44]
	0x03BCE530 LDRB W8, [X19 + 0x6C]
	0x03BCE534 MOVZ W9, 0x1
	0x03BCE538 STRB W9, [X19 + 0xD1]
	0x03BCE53C CBNZ W8, 0x3BCE56C
	0x03BCE540 LDR W8, [X19 + 0x74]
	0x03BCE544 CMP W8, 0x1
	0x03BCE548 B.NE 0x3BCE56C
	0x03BCE54C ADRP X8, 0x52C000
	0x03BCE550 LDR X8, [X8 + 0x4B8]
	0x03BCE554 LDR V0, [X19 + 0x78]
	0x03BCE558 LDR X8, [X8]
	0x03BCE55C LDR X8, [X8 + 0xB8]
	0x03BCE560 LDR V1, [X8]
	0x03BCE564 FCMP S0, S1
	0x03BCE568 B.PL 0x3BCE57C
	0x03BCE56C MOV X0, X19
	0x03BCE570 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x815000
	007 Move X22, 0x590000
	008 Move W8, [X21+3634]
	009 Move X22, [X22+2456]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x526000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x590000
	020 Move X0, [X0+2456]
	021 Call 0x1C17CF4
	022 Move X0, 0x590000
	023 Move X0, [X0+2464]
	024 Call 0x1C17CF4
	025 Move X0, 0x590000
	026 Move X0, [X0+2504]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+3634], W8
	030 Move X1, [X22]
	031 Move X0, X20
	032 Call 0x1C17E00
	033 Compare X0, 0
	034 JumpIfEqual {42}
	035 Move X1, X0
	036 Move X0, X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Move X8, 0x590000
	043 Move X8, [X8+2464]
	044 Move X0, X20
	045 Move X1, [X8]
	046 Call 0x1C17E00
	047 Compare X0, 0
	048 JumpIfEqual {58}
	049 Move X1, X0
	050 Move X0, X19
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Call BaseAffordanceStateProvider.UnregisterAffordanceReceiver, X0, X1
	057 Return X0
	058 Compare X20, 0
	059 JumpIfEqual {89}
	060 Move X0, X20
	061 Move X1, X31
	062 Call "il2cpp_vm_object_is_inst", X0
	063 Compare X0, 0
	064 JumpIfEqual {96}
	065 Move X8, [X0]
	066 Move X9, [X8+424]
	067 Move X1, [X8+432]
	068 NotImplemented "Instruction BLR not yet implemented."
	069 Move X8, 0x590000
	070 Move X8, [X8+2504]
	071 Move X1, X0
	072 Move X2, X31
	073 Move X8, [X8]
	074 Move X0, X8
	075 Call String.Concat, X0, X1
	076 Move X8, 0x526000
	077 Move X8, [X8+2600]
	078 Move X20, X0
	079 Move X8, [X8]
	080 Move W9, [X8+224]
	081 Compare W9, 0
	082 JumpIfNotEqual {85}
	083 Move X0, X8
	084 Call 0x1C17DFC
	085 Move X0, X20
	086 Move X1, X19
	087 Move X2, X31
	088 Call Debug.LogError, X0, X1
	089 Move X20, [X31+32]
	090 Move X19, [X31+40]
	091 Move X22, [X31+16]
	092 Move X21, [X31+24]
	093 Move W0, W31
	094 Move X30, [X31+48]
	095 Return X0
	096 Call 0x1C17F20

Method: System.Boolean UnregisterAffordanceReceiver(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Receiver.IAsyncAffordanceStateReceiver receiver)

Disassembly:
	0x03BCE574 LDR X30, [X31], #0x20
	0x03BCE578 B 0x3BCDC38
	0x03BCE57C LDR X8, [X19]
	0x03BCE580 MOV X0, X19
	0x03BCE584 LDP X20, X19, [X31 + 0x10]
	0x03BCE588 LDR X2, [X8 + 0x308]
	0x03BCE58C LDR X1, [X8 + 0x310]
	0x03BCE590 LDR X30, [X31], #0x20
	0x03BCE594 BR X2
	0x03BCE598 STR X30, [X31 - 0x20]!
	0x03BCE59C STP X20, X19, [X31 + 0x10]
	0x03BCE5A0 ADRP X20, 0x814000
	0x03BCE5A4 LDRB W8, [X20 + 0xE45]
	0x03BCE5A8 MOV X19, X0
	0x03BCE5AC TBNZ X8, 0x0, 0x3BCE5C4
	0x03BCE5B0 ADRP X0, 0x52C000
	0x03BCE5B4 LDR X0, [X0 + 0x4B8]
	0x03BCE5B8 BL 0x1C16CF4
	0x03BCE5BC MOVZ W8, 0x1
	0x03BCE5C0 STRB W8, [X20 + 0xE45]
	0x03BCE5C4 LDRB W8, [X19 + 0x6C]
	0x03BCE5C8 STRB W31, [X19 + 0xD1]
	0x03BCE5CC CBNZ W8, 0x3BCE5FC
	0x03BCE5D0 LDR W8, [X19 + 0x74]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x815000
	006 Move W8, [X21+3635]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x590000
	014 Move X0, [X0+2528]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3635], W8
	018 Move X0, X20
	019 Call BaseAffordanceStateProvider.CompleteJobs, X0
	020 Move X0, [X20+48]
	021 Compare X0, 0
	022 JumpIfEqual {33}
	023 Move X8, 0x590000
	024 Move X8, [X8+2528]
	025 Move X1, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X2, [X8]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call 0x2D58E88, X0, X1
	032 Return X0
	033 Call 0x1C17F20

Method: System.Boolean UnregisterAffordanceReceiver(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Receiver.ISynchronousAffordanceStateReceiver receiver)

Disassembly:
	0x03BCE5D4 CMP W8, 0x2
	0x03BCE5D8 B.NE 0x3BCE5FC
	0x03BCE5DC ADRP X8, 0x52C000
	0x03BCE5E0 LDR X8, [X8 + 0x4B8]
	0x03BCE5E4 LDR V0, [X19 + 0x78]
	0x03BCE5E8 LDR X8, [X8]
	0x03BCE5EC LDR X8, [X8 + 0xB8]
	0x03BCE5F0 LDR V1, [X8]
	0x03BCE5F4 FCMP S0, S1
	0x03BCE5F8 B.PL 0x3BCE620
	0x03BCE5FC LDR X8, [X19 + 0xC0]
	0x03BCE600 CBZ X8, 0x3BCE610
	0x03BCE604 LDP X20, X19, [X31 + 0x10]
	0x03BCE608 LDR X30, [X31], #0x20
	0x03BCE60C RET
	0x03BCE610 MOV X0, X19
	0x03BCE614 LDP X20, X19, [X31 + 0x10]
	0x03BCE618 LDR X30, [X31], #0x20
	0x03BCE61C B 0x3BCDC38
	0x03BCE620 LDR X8, [X19]
	0x03BCE624 MOV X0, X19
	0x03BCE628 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x815000
	006 Move W8, [X21+3636]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x590000
	014 Move X0, [X0+2536]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3636], W8
	018 Move X0, [X20+56]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0x590000
	022 Move X8, [X8+2536]
	023 Move X1, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call 0x2D58E88, X0, X1
	030 Return X0
	031 Call 0x1C17F20

Method: System.Boolean CompleteJobs()

Disassembly:
	0x03BCE62C LDR X2, [X8 + 0x308]
	0x03BCE630 LDR X1, [X8 + 0x310]
	0x03BCE634 LDR X30, [X31], #0x20
	0x03BCE638 BR X2
	0x03BCE63C LDR X8, [X0 + 0xB8]
	0x03BCE640 CBNZ X8, 0x3BCE64C
	0x03BCE644 LDR X8, [X0 + 0xC0]
	0x03BCE648 CBZ X8, 0x3BCE650
	0x03BCE64C RET
	0x03BCE650 B 0x3BCDC38
	0x03BCE654 STR D8, [X31 - 0x30]!
	0x03BCE658 STR X30, [X31 + 0x8]
	0x03BCE65C STP X22, X21, [X31 + 0x10]
	0x03BCE660 STP X20, X19, [X31 + 0x20]
	0x03BCE664 ADRP X22, 0x814000
	0x03BCE668 ADRP X21, 0x526000
	0x03BCE66C ADRP X20, 0x58F000
	0x03BCE670 LDRB W8, [X22 + 0xE46]
	0x03BCE674 LDR X21, [X21 + 0xE70]
	0x03BCE678 LDR X20, [X20 + 0xA48]
	0x03BCE67C MOV X19, X0
	0x03BCE680 TBNZ X8, 0x0, 0x3BCE6A4
	0x03BCE684 ADRP X0, 0x526000
	0x03BCE688 LDR X0, [X0 + 0xE70]
	0x03BCE68C BL 0x1C16CF4
	0x03BCE690 ADRP X0, 0x58F000
	0x03BCE694 LDR X0, [X0 + 0xA48]
	0x03BCE698 BL 0x1C16CF4
	0x03BCE69C MOVZ W8, 0x1
	0x03BCE6A0 STRB W8, [X22 + 0xE46]
	0x03BCE6A4 MOV X0, X19
	0x03BCE6A8 BL 0x3BCE714
	0x03BCE6AC LDR X0, [X21]
	0x03BCE6B0 LDR V8, [X19 + 0x78]
	0x03BCE6B4 BL 0x1C16F10
	0x03BCE6B8 LDR X2, [X20]
	0x03BCE6BC MOV X1, X19
	0x03BCE6C0 MOV X3, X31
	0x03BCE6C4 MOV X20, X0
	0x03BCE6C8 BL 0x3314368
	0x03BCE6CC LDR X8, [X19]
	0x03BCE6D0 MOVZ W1, 0x4
	0x03BCE6D4 MOV X0, X19
	0x03BCE6D8 MOV V0.16B, V8.16B
	0x03BCE6DC LDR X9, [X8 + 0x318]
	0x03BCE6E0 LDR X3, [X8 + 0x320]
	0x03BCE6E4 MOV X2, X20
	0x03BCE6E8 BLR X9

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x815000
	007 Move W8, [X20+3637]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x590000
	014 Move X0, [X0+2544]
	015 Call 0x1C17CF4
	016 Move X0, 0x590000
	017 Move X0, [X0+2400]
	018 Call 0x1C17CF4
	019 Move X0, 0x590000
	020 Move X0, [X0+2552]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3637], W8
	024 Move [X31], X31
	025 Move [X31+8], X31
	026 Move X0, [X19+64]
	027 Compare X0, 0
	028 JumpIfEqual {46}
	029 Move X21, 0x590000
	030 Move X21, [X21+2552]
	031 Move W20, W31
	032 Move W8, [X0+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X2, [X21]
	035 Move W1, W20
	036 Call List`1<JobHandle>.get_Item, X0, X1
	037 Move [X31], X0
	038 Move [X31+8], X1
	039 Add X0, X31, 0
	040 Move X1, X31
	041 Call JobHandle.Complete, X0
	042 Move X0, [X19+64]
	043 Add W20, W20, 1
	044 Compare X0, 0
	045 JumpIfNotEqual {32}
	046 Call 0x1C17F20
	047 Move W9, [X0+28]
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X30, [X31+16]
	051 Move X21, [X31+24]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CSET not yet implemented."
	054 Add W9, W9, 1
	055 Move [X0+24], W31
	056 Move [X0+28], W9
	057 Move W0, W8
	058 Add X31, X31, 48
	059 Return X0

Method: System.Void DoTween(System.Single tweenTarget)

Disassembly:
	0x03BCDD60 CBZ W8, 0x3BCDDB4
	0x03BCDD64 LDR X19, [X19 + 0x90]
	0x03BCDD68 CBZ X19, 0x3BCDDE8
	0x03BCDD6C ADRP X10, 0x58D000
	0x03BCDD70 LDR X8, [X19]
	0x03BCDD74 LDR X10, [X10 + 0x148]
	0x03BCDD78 LDRH W9, [X8 + 0x12E]
	0x03BCDD7C LDR X1, [X10]
	0x03BCDD80 CBZ X9, 0x3BCDDA4
	0x03BCDD84 LDR X10, [X8 + 0xB0]
	0x03BCDD88 ADD X10, X10, 0x8
	0x03BCDD8C LDUR X11, [X10 - 0x8]
	0x03BCDD90 CMP X11, X1
	0x03BCDD94 B.EQ 0x3BCDDC4
	0x03BCDD98 SUBS X9, X9, 0x1
	0x03BCDD9C ADD X10, X10, 0x10
	0x03BCDDA0 B.NE 0x3BCDD8C
	0x03BCDDA4 MOVZ W2, 0x5
	0x03BCDDA8 MOV X0, X19
	0x03BCDDAC BL 0x1C5C788
	0x03BCDDB0 B 0x3BCDDD4
	0x03BCDDB4 LDP X20, X19, [X31 + 0x10]
	0x03BCDDB8 MOV W0, W31
	0x03BCDDBC LDR X30, [X31], #0x20
	0x03BCDDC0 RET
	0x03BCDDC4 LDR W9, [X10]
	0x03BCDDC8 ADD W9, W9, 0x5
	0x03BCDDCC ADD X8, X8, W9, 0x4, SXTW
	0x03BCDDD0 ADD X0, X8, 0x138
	0x03BCDDD4 LDP X2, X1, [X0]
	0x03BCDDD8 MOV X0, X19
	0x03BCDDDC LDP X20, X19, [X31 + 0x10]
	0x03BCDDE0 LDR X30, [X31], #0x20
	0x03BCDDE4 BR X2
	0x03BCDDE8 BL 0x1C16F20
	0x03BCDDEC STR X30, [X31 - 0x20]!
	0x03BCDDF0 STP X20, X19, [X31 + 0x10]
	0x03BCDDF4 ADRP X20, 0x815000
	0x03BCDDF8 LDRB W8, [X20 + 0xE3B]
	0x03BCDDFC MOV X19, X0
	0x03BCDE00 TBNZ X8, 0x0, 0x3BCDE18
	0x03BCDE04 ADRP X0, 0x58D000
	0x03BCDE08 LDR X0, [X0 + 0x160]
	0x03BCDE0C BL 0x1C16CF4
	0x03BCDE10 MOVZ W8, 0x1
	0x03BCDE14 STRB W8, [X20 + 0xE3B]
	0x03BCDE18 LDRB W8, [X19 + 0xD5]
	0x03BCDE1C CBZ W8, 0x3BCDE70
	0x03BCDE20 LDR X19, [X19 + 0x98]
	0x03BCDE24 CBZ X19, 0x3BCDEA4
	0x03BCDE28 ADRP X10, 0x58D000
	0x03BCDE2C LDR X8, [X19]
	0x03BCDE30 LDR X10, [X10 + 0x160]
	0x03BCDE34 LDRH W9, [X8 + 0x12E]
	0x03BCDE38 LDR X1, [X10]
	0x03BCDE3C CBZ X9, 0x3BCDE60
	0x03BCDE40 LDR X10, [X8 + 0xB0]
	0x03BCDE44 ADD X10, X10, 0x8
	0x03BCDE48 LDUR X11, [X10 - 0x8]
	0x03BCDE4C CMP X11, X1
	0x03BCDE50 B.EQ 0x3BCDE80
	0x03BCDE54 SUBS X9, X9, 0x1
	0x03BCDE58 ADD X10, X10, 0x10
	0x03BCDE5C B.NE 0x3BCDE48
	0x03BCDE60 MOVZ W2, 0x6
	0x03BCDE64 MOV X0, X19
	0x03BCDE68 BL 0x1C5C788
	0x03BCDE6C B 0x3BCDE90
	0x03BCDE70 LDP X20, X19, [X31 + 0x10]
	0x03BCDE74 MOV W0, W31
	0x03BCDE78 LDR X30, [X31], #0x20
	0x03BCDE7C RET
	0x03BCDE80 LDR W9, [X10]
	0x03BCDE84 ADD W9, W9, 0x6
	0x03BCDE88 ADD X8, X8, W9, 0x4, SXTW
	0x03BCDE8C ADD X0, X8, 0x138
	0x03BCDE90 LDP X2, X1, [X0]
	0x03BCDE94 MOV X0, X19
	0x03BCDE98 LDP X20, X19, [X31 + 0x10]
	0x03BCDE9C LDR X30, [X31], #0x20
	0x03BCDEA0 BR X2
	0x03BCDEA4 BL 0x1C16F20
	0x03BCDEA8 STR X30, [X31 - 0x20]!
	0x03BCDEAC STP X20, X19, [X31 + 0x10]
	0x03BCDEB0 ADRP X20, 0x815000
	0x03BCDEB4 LDRB W8, [X20 + 0xE3C]
	0x03BCDEB8 MOV X19, X0
	0x03BCDEBC TBNZ X8, 0x0, 0x3BCDED4
	0x03BCDEC0 ADRP X0, 0x58D000
	0x03BCDEC4 LDR X0, [X0 + 0x130]
	0x03BCDEC8 BL 0x1C16CF4
	0x03BCDECC MOVZ W8, 0x1
	0x03BCDED0 STRB W8, [X20 + 0xE3C]
	0x03BCDED4 LDR X19, [X19 + 0xA0]
	0x03BCDED8 CBZ X19, 0x3BCDF24
	0x03BCDEDC ADRP X10, 0x58D000
	0x03BCDEE0 LDR X8, [X19]
	0x03BCDEE4 LDR X10, [X10 + 0x130]
	0x03BCDEE8 LDRH W9, [X8 + 0x12E]
	0x03BCDEEC LDR X1, [X10]
	0x03BCDEF0 CBZ X9, 0x3BCDF14
	0x03BCDEF4 LDR X10, [X8 + 0xB0]
	0x03BCDEF8 ADD X10, X10, 0x8
	0x03BCDEFC LDUR X11, [X10 - 0x8]
	0x03BCDF00 CMP X11, X1
	0x03BCDF04 B.EQ 0x3BCDF34
	0x03BCDF08 SUBS X9, X9, 0x1
	0x03BCDF0C ADD X10, X10, 0x10
	0x03BCDF10 B.NE 0x3BCDEFC
	0x03BCDF14 MOVZ W2, 0x6
	0x03BCDF18 MOV X0, X19
	0x03BCDF1C BL 0x1C5C788
	0x03BCDF20 B 0x3BCDF44
	0x03BCDF24 LDP X20, X19, [X31 + 0x10]
	0x03BCDF28 MOV W0, W31
	0x03BCDF2C LDR X30, [X31], #0x20
	0x03BCDF30 RET
	0x03BCDF34 LDR W9, [X10]
	0x03BCDF38 ADD W9, W9, 0x6
	0x03BCDF3C ADD X8, X8, W9, 0x4, SXTW
	0x03BCDF40 ADD X0, X8, 0x138
	0x03BCDF44 LDP X2, X1, [X0]
	0x03BCDF48 MOV X0, X19
	0x03BCDF4C LDP X20, X19, [X31 + 0x10]
	0x03BCDF50 LDR X30, [X31], #0x20
	0x03BCDF54 BR X2
	0x03BCDF58 LDRB W0, [X0 + 0xD1]
	0x03BCDF5C RET
	0x03BCDF60 LDRB W0, [X0 + 0xD2]
	0x03BCDF64 RET
	0x03BCDF68 STR X30, [X31 - 0x30]!
	0x03BCDF6C STP X22, X21, [X31 + 0x10]
	0x03BCDF70 STP X20, X19, [X31 + 0x20]
	0x03BCDF74 ADRP X21, 0x815000
	0x03BCDF78 ADRP X20, 0x526000
	0x03BCDF7C LDRB W8, [X21 + 0xE3D]
	0x03BCDF80 LDR X20, [X20 + 0x598]
	0x03BCDF84 MOV X19, X0
	0x03BCDF88 TBNZ X8, 0x0, 0x3BCDFDC
	0x03BCDF8C ADRP X0, 0x58D000
	0x03BCDF90 LDR X0, [X0 + 0x910]
	0x03BCDF94 BL 0x1C16CF4
	0x03BCDF98 ADRP X0, 0x58D000
	0x03BCDF9C LDR X0, [X0 + 0x8D8]
	0x03BCDFA0 BL 0x1C16CF4
	0x03BCDFA4 ADRP X0, 0x526000
	0x03BCDFA8 LDR X0, [X0 + 0x598]
	0x03BCDFAC BL 0x1C16CF4
	0x03BCDFB0 ADRP X0, 0x550000
	0x03BCDFB4 LDR X0, [X0 + 0x1E8]
	0x03BCDFB8 BL 0x1C16CF4
	0x03BCDFBC ADRP X0, 0x590000
	0x03BCDFC0 LDR X0, [X0 + 0xA30]
	0x03BCDFC4 BL 0x1C16CF4
	0x03BCDFC8 ADRP X0, 0x590000
	0x03BCDFCC LDR X0, [X0 + 0xA38]
	0x03BCDFD0 BL 0x1C16CF4
	0x03BCDFD4 MOVZ W8, 0x1
	0x03BCDFD8 STRB W8, [X21 + 0xE3D]
	0x03BCDFDC LDR X0, [X20]
	0x03BCDFE0 LDR X20, [X19 + 0x60]
	0x03BCDFE4 LDR W8, [X0 + 0xE0]
	0x03BCDFE8 CBNZ W8, 0x3BCDFF0
	0x03BCDFEC BL 0x1C16DFC
	0x03BCDFF0 MOV X0, X20
	0x03BCDFF4 MOV X1, X31
	0x03BCDFF8 MOV X2, X31
	0x03BCDFFC BL 0x3C354F8
	0x03BCE000 TBZ X0, 0x0, 0x3BCE020
	0x03BCE004 ADRP X8, 0x58C000
	0x03BCE008 LDR X8, [X8 + 0x8D8]
	0x03BCE00C LDR X0, [X19 + 0x60]
	0x03BCE010 LDR X1, [X8]
	0x03BCE014 BL 0x1C16E00
	0x03BCE018 MOV X1, X0
	0x03BCE01C CBNZ X0, 0x3BCE038
	0x03BCE020 ADRP X8, 0x58C000
	0x03BCE024 LDR X8, [X8 + 0x910]
	0x03BCE028 MOV X0, X19
	0x03BCE02C LDR X1, [X8]
	0x03BCE030 BL 0x21A3F50
	0x03BCE034 MOV X1, X0
	0x03BCE038 MOV X0, X19
	0x03BCE03C BL 0x3BCD95C
	0x03BCE040 TBZ X0, 0x0, 0x3BCE054
	0x03BCE044 LDP X20, X19, [X31 + 0x20]
	0x03BCE048 LDP X22, X21, [X31 + 0x10]
	0x03BCE04C LDR X30, [X31], #0x30
	0x03BCE050 RET
	0x03BCE054 ADRP X20, 0x58F000
	0x03BCE058 ADRP X21, 0x58F000
	0x03BCE05C ADRP X22, 0x54F000
	0x03BCE060 LDR X20, [X20 + 0xA30]
	0x03BCE064 LDR X21, [X21 + 0xA38]
	0x03BCE068 LDR X22, [X22 + 0x1E8]
	0x03BCE06C MOV X0, X19
	0x03BCE070 MOV X1, X31
	0x03BCE074 BL 0x3C32ECC
	0x03BCE078 LDR X8, [X20]
	0x03BCE07C MOV X1, X0
	0x03BCE080 MOV X2, X31
	0x03BCE084 MOV X0, X8
	0x03BCE088 BL 0x321EFD0
	0x03BCE08C LDR X1, [X21]
	0x03BCE090 MOV X2, X31
	0x03BCE094 BL 0x321B938
	0x03BCE098 LDR X8, [X22]
	0x03BCE09C MOV X20, X0
	0x03BCE0A0 LDR W9, [X8 + 0xE0]
	0x03BCE0A4 CBNZ W9, 0x3BCE0B0
	0x03BCE0A8 MOV X0, X8
	0x03BCE0AC BL 0x1C16DFC
	0x03BCE0B0 MOV X0, X20
	0x03BCE0B4 MOV X1, X19
	0x03BCE0B8 MOV X2, X31
	0x03BCE0BC BL 0x3B2EE8C
	0x03BCE0C0 MOV X0, X19
	0x03BCE0C4 LDP X20, X19, [X31 + 0x20]
	0x03BCE0C8 LDP X22, X21, [X31 + 0x10]
	0x03BCE0CC MOV W1, W31
	0x03BCE0D0 MOV X2, X31
	0x03BCE0D4 LDR X30, [X31], #0x30
	0x03BCE0D8 B 0x3C32410
	0x03BCE0DC STP X30, X21, [X31 - 0x20]!
	0x03BCE0E0 STP X20, X19, [X31 + 0x10]
	0x03BCE0E4 ADRP X21, 0x814000

ISIL:
	001 Move [X31-112], D8
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x816000
	015 Move W8, [X20+3638]
	016 Move V8, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {45}
	022 Move X0, 0x591000
	023 Move X0, [X0+2416]
	024 Call 0x1C17CF4
	025 Move X0, 0x591000
	026 Move X0, [X0+2424]
	027 Call 0x1C17CF4
	028 Move X0, 0x591000
	029 Move X0, [X0+2432]
	030 Call 0x1C17CF4
	031 Move X0, 0x591000
	032 Move X0, [X0+2440]
	033 Call 0x1C17CF4
	034 Move X0, 0x591000
	035 Move X0, [X0+2456]
	036 Call 0x1C17CF4
	037 Move X0, 0x591000
	038 Move X0, [X0+2464]
	039 Call 0x1C17CF4
	040 Move X0, 0x591000
	041 Move X0, [X0+2472]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X20+3638], W8
	045 Move X23, 0x591000
	046 Move X24, 0x591000
	047 Move X25, 0x591000
	048 Move X23, [X23+2416]
	049 Move X24, [X24+2440]
	050 Move X25, [X25+2456]
	051 Move X0, X19
	052 Call BaseAffordanceStateProvider.CompleteJobs, X0
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {99}
	057 Move X0, [X19+48]
	058 Compare X0, 0
	059 JumpIfEqual {229}
	060 Move W20, W31
	061 Move X1, [X23]
	062 Call 0x2D58B54, X0
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X0, [X19+48]
	065 Compare X0, 0
	066 JumpIfEqual {229}
	067 Move X2, [X24]
	068 Move W1, W20
	069 Call 0x2D58B78, X0, X1
	070 Compare X0, 0
	071 JumpIfEqual {229}
	072 Move X8, [X0]
	073 Move X1, [X25]
	074 Move X21, X0
	075 NotImplemented "Instruction LDRH not yet implemented."
	076 Compare X9, 0
	077 JumpIfEqual {84}
	078 Move X10, [X8+176]
	079 Add X10, X10, 8
	080 NotImplemented "Instruction LDUR not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Subtract X9, X9, 1
	083 Add X10, X10, 16
	084 Move W2, 1
	085 Move X0, X21
	086 Call 0x1C5D788
	087 Move W9, [X10]
	088 Add W9, W9, 1
	089 Add X8, X8, W9
	090 Add X0, X8, 312
	091 Move X8, [X0]
	092 Move X1, [X0+8]
	093 Move X0, X21
	094 NotImplemented "Instruction BLR not yet implemented."
	095 Move X0, [X19+48]
	096 Add W20, W20, 1
	097 Compare X0, 0
	098 JumpIfNotEqual {61}
	099 Move X8, -51257344
	100 Move V0, [X8+104]
	101 NotImplemented "Instruction FCMP not yet implemented."
	102 Move V0, [X19+80]
	103 Move V1, [X19+92]
	104 NotImplemented "Instruction FCMP not yet implemented."
	105 Move W8, [X19+85]
	106 Compare W8, 0
	107 JumpIfNotEqual {235}
	108 Move W8, 1
	109 Move S8, 1
	110 Move [X19+85], W8
	111 Move X0, [X19+48]
	112 Compare X0, 0
	113 JumpIfEqual {229}
	114 Move X29, 0x591000
	115 Move X26, 0x591000
	116 Move X27, 0x591000
	117 Move X28, 0x591000
	118 Move X29, [X29+2472]
	119 Move X26, [X26+2424]
	120 Move X27, [X27+2432]
	121 Move X28, [X28+2464]
	122 Move W20, W31
	123 Move X1, [X23]
	124 Call 0x2D58B54, X0
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move X0, [X19+48]
	127 Compare X0, 0
	128 JumpIfEqual {229}
	129 Move X2, [X24]
	130 Move X21, [X19+64]
	131 Move W1, W20
	132 Call 0x2D58B78, X0, X1
	133 Compare X0, 0
	134 JumpIfEqual {229}
	135 Move X8, [X0]
	136 Move X1, [X25]
	137 Move X22, X0
	138 NotImplemented "Instruction LDRH not yet implemented."
	139 Compare X9, 0
	140 JumpIfEqual {147}
	141 Move X10, [X8+176]
	142 Add X10, X10, 8
	143 NotImplemented "Instruction LDUR not yet implemented."
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Subtract X9, X9, 1
	146 Add X10, X10, 16
	147 Move X0, X22
	148 Move W2, W31
	149 Call 0x1C5D788
	150 NotImplemented "Instruction LDRSW not yet implemented."
	151 Add X8, X8, X9
	152 Add X0, X8, 312
	153 Move X8, [X0]
	154 Move X1, [X0+8]
	155 Move X0, X22
	156 Move V0, V8
	157 NotImplemented "Instruction BLR not yet implemented."
	158 Compare X21, 0
	159 JumpIfEqual {229}
	160 Move W11, [X21+28]
	161 Move X9, [X21+16]
	162 Move X10, [X29]
	163 Add W11, W11, 1
	164 Move [X21+28], W11
	165 Compare X9, 0
	166 JumpIfEqual {229}
	167 NotImplemented "Instruction LDRSW not yet implemented."
	168 Move W12, [X9+24]
	169 Move X8, X0
	170 Move X2, X1
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Add W10, W11, 1
	173 Add X9, X9, X11
	174 Move [X21+24], W10
	175 Move [X9+32], X8
	176 Move [X9+40], X2
	177 Move X9, [X10+32]
	178 Move X0, X21
	179 Move X1, X8
	180 Move X9, [X9+192]
	181 Move X3, [X9+112]
	182 Call List`1<JobHandle>.AddWithResize, X0, X1
	183 Move X0, [X19+48]
	184 Add W20, W20, 1
	185 Compare X0, 0
	186 JumpIfNotEqual {123}
	187 Move X0, [X19+56]
	188 Compare X0, 0
	189 JumpIfEqual {229}
	190 Move W20, W31
	191 Move X1, [X26]
	192 Call 0x2D58B54, X0
	193 NotImplemented "Instruction CMP not yet implemented."
	194 Move X0, [X19+56]
	195 Compare X0, 0
	196 JumpIfEqual {229}
	197 Move X2, [X27]
	198 Move W1, W20
	199 Call 0x2D58B78, X0, X1
	200 Compare X0, 0
	201 JumpIfEqual {229}
	202 Move X8, [X0]
	203 Move X1, [X28]
	204 Move X21, X0
	205 NotImplemented "Instruction LDRH not yet implemented."
	206 Compare X9, 0
	207 JumpIfEqual {214}
	208 Move X10, [X8+176]
	209 Add X10, X10, 8
	210 NotImplemented "Instruction LDUR not yet implemented."
	211 NotImplemented "Instruction CMP not yet implemented."
	212 Subtract X9, X9, 1
	213 Add X10, X10, 16
	214 Move X0, X21
	215 Move W2, W31
	216 Call 0x1C5D788
	217 NotImplemented "Instruction LDRSW not yet implemented."
	218 Add X8, X8, X9
	219 Add X0, X8, 312
	220 Move X8, [X0]
	221 Move X1, [X0+8]
	222 Move X0, X21
	223 Move V0, V8
	224 NotImplemented "Instruction BLR not yet implemented."
	225 Move X0, [X19+56]
	226 Add W20, W20, 1
	227 Compare X0, 0
	228 JumpIfNotEqual {191}
	229 Call 0x1C17F20
	230 Move V8, [X19+80]
	231 Move X0, X31
	232 Call Time.get_deltaTime
	233 Add S0, S8, S0
	234 Move [X19+80], S0
	235 Move X20, [X31+96]
	236 Move X19, [X31+104]
	237 Move X22, [X31+80]
	238 Move X21, [X31+88]
	239 Move X24, [X31+64]
	240 Move X23, [X31+72]
	241 Move X26, [X31+48]
	242 Move X25, [X31+56]
	243 Move X28, [X31+32]
	244 Move X27, [X31+40]
	245 Move X29, [X31+16]
	246 Move X30, [X31+24]
	247 Move V8, [X31+112]
	248 Return 

Method: System.Void RefreshTransitionDuration()

Disassembly:
	0x03BCD998 BL 0x1C16CF4
	0x03BCD99C ADRP X0, 0x58D000
	0x03BCD9A0 LDR X0, [X0 + 0xBD8]
	0x03BCD9A4 BL 0x1C16CF4
	0x03BCD9A8 ADRP X0, 0x58D000
	0x03BCD9AC LDR X0, [X0 + 0x160]
	0x03BCD9B0 BL 0x1C16CF4
	0x03BCD9B4 ADRP X0, 0x526000
	0x03BCD9B8 LDR X0, [X0 + 0x598]
	0x03BCD9BC BL 0x1C16CF4

ISIL:
	001 Move V0, [X0+32]
	002 Move S1, 1
	003 Move S2, W31
	004 Move S3, 4
	005 NotImplemented "Instruction FDIV not yet implemented."
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 Multiply S0, S0, S3
	008 NotImplemented "Instruction FCSEL not yet implemented."
	009 Move [X0+88], S1
	010 Move [X0+96], S0
	011 Return 

Method: System.Void .ctor()

Disassembly:
	0x03BCE6EC MOV X1, X0
	0x03BCE6F0 MOV X0, X19
	0x03BCE6F4 MOV X2, X31
	0x03BCE6F8 BL 0x3C366FC
	0x03BCE6FC STR X0, [X19 + 0xB8]
	0x03BCE700 LDP X20, X19, [X31 + 0x20]
	0x03BCE704 LDP X22, X21, [X31 + 0x10]
	0x03BCE708 LDR X30, [X31 + 0x8]
	0x03BCE70C LDR V8, [X31], #0x30
	0x03BCE710 RET
	0x03BCE714 STP X30, X19, [X31 - 0x10]!
	0x03BCE718 LDR X1, [X0 + 0xC0]
	0x03BCE71C MOV X19, X0
	0x03BCE720 CBZ X1, 0x3BCE734
	0x03BCE724 MOV X0, X19
	0x03BCE728 MOV X2, X31
	0x03BCE72C BL 0x3C36968
	0x03BCE730 STR X31, [X19 + 0xC0]
	0x03BCE734 LDR X1, [X19 + 0xB8]
	0x03BCE738 CBZ X1, 0x3BCE74C
	0x03BCE73C MOV X0, X19
	0x03BCE740 MOV X2, X31
	0x03BCE744 BL 0x3C36968
	0x03BCE748 STR X31, [X19 + 0xB8]
	0x03BCE74C LDP X30, X19, [X31], #0x10
	0x03BCE750 RET
	0x03BCE754 STR D8, [X31 - 0x30]!
	0x03BCE758 STR X30, [X31 + 0x8]
	0x03BCE75C STP X22, X21, [X31 + 0x10]
	0x03BCE760 STP X20, X19, [X31 + 0x20]
	0x03BCE764 ADRP X22, 0x814000
	0x03BCE768 ADRP X21, 0x526000
	0x03BCE76C ADRP X20, 0x58F000
	0x03BCE770 LDRB W8, [X22 + 0xE47]
	0x03BCE774 LDR X21, [X21 + 0xE70]
	0x03BCE778 LDR X20, [X20 + 0xA50]
	0x03BCE77C MOV X19, X0
	0x03BCE780 TBNZ X8, 0x0, 0x3BCE7A4
	0x03BCE784 ADRP X0, 0x526000
	0x03BCE788 LDR X0, [X0 + 0xE70]
	0x03BCE78C BL 0x1C16CF4
	0x03BCE790 ADRP X0, 0x58F000
	0x03BCE794 LDR X0, [X0 + 0xA50]
	0x03BCE798 BL 0x1C16CF4
	0x03BCE79C MOVZ W8, 0x1
	0x03BCE7A0 STRB W8, [X22 + 0xE47]
	0x03BCE7A4 MOV X0, X19
	0x03BCE7A8 BL 0x3BCE714
	0x03BCE7AC LDR X0, [X21]
	0x03BCE7B0 LDR V8, [X19 + 0x78]
	0x03BCE7B4 BL 0x1C16F10
	0x03BCE7B8 LDR X2, [X20]
	0x03BCE7BC MOV X1, X19
	0x03BCE7C0 MOV X3, X31
	0x03BCE7C4 MOV X20, X0
	0x03BCE7C8 BL 0x3314368
	0x03BCE7CC LDR X8, [X19]
	0x03BCE7D0 MOVZ W1, 0x5
	0x03BCE7D4 MOV X0, X19
	0x03BCE7D8 MOV V0.16B, V8.16B
	0x03BCE7DC LDR X9, [X8 + 0x318]
	0x03BCE7E0 LDR X3, [X8 + 0x320]
	0x03BCE7E4 MOV X2, X20
	0x03BCE7E8 BLR X9
	0x03BCE7EC MOV X1, X0
	0x03BCE7F0 MOV X0, X19
	0x03BCE7F4 MOV X2, X31
	0x03BCE7F8 BL 0x3C366FC
	0x03BCE7FC STR X0, [X19 + 0xC0]
	0x03BCE800 LDP X20, X19, [X31 + 0x20]
	0x03BCE804 LDP X22, X21, [X31 + 0x10]
	0x03BCE808 LDR X30, [X31 + 0x8]
	0x03BCE80C LDR V8, [X31], #0x30
	0x03BCE810 RET
	0x03BCE814 STP X30, X19, [X31 - 0x10]!
	0x03BCE818 LDR X1, [X0 + 0xC0]
	0x03BCE81C CBZ X1, 0x3BCE830
	0x03BCE820 MOV X2, X31
	0x03BCE824 MOV X19, X0
	0x03BCE828 BL 0x3C36968
	0x03BCE82C STR X31, [X19 + 0xC0]
	0x03BCE830 LDP X30, X19, [X31], #0x10
	0x03BCE834 RET
	0x03BCE838 STP X30, X19, [X31 - 0x10]!
	0x03BCE83C LDR X1, [X0 + 0xB8]
	0x03BCE840 CBZ X1, 0x3BCE854
	0x03BCE844 MOV X2, X31
	0x03BCE848 MOV X19, X0
	0x03BCE84C BL 0x3C36968
	0x03BCE850 STR X31, [X19 + 0xB8]
	0x03BCE854 LDP X30, X19, [X31], #0x10
	0x03BCE858 RET
	0x03BCE85C STR D8, [X31 - 0x40]!
	0x03BCE860 STP X30, X23, [X31 + 0x10]
	0x03BCE864 STP X22, X21, [X31 + 0x20]
	0x03BCE868 STP X20, X19, [X31 + 0x30]
	0x03BCE86C ADRP X22, 0x814000
	0x03BCE870 ADRP X23, 0x58F000
	0x03BCE874 LDRB W8, [X22 + 0xE48]
	0x03BCE878 LDR X23, [X23 + 0xA58]
	0x03BCE87C MOV X19, X2
	0x03BCE880 MOV V8.16B, V0.16B
	0x03BCE884 MOV W20, W1
	0x03BCE888 MOV X21, X0
	0x03BCE88C TBNZ X8, 0x0, 0x3BCE8A4
	0x03BCE890 ADRP X0, 0x58F000
	0x03BCE894 LDR X0, [X0 + 0xA58]
	0x03BCE898 BL 0x1C16CF4
	0x03BCE89C MOVZ W8, 0x1

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X29, 0x815000
	014 Move X28, 0x550000
	015 Move X20, 0x550000
	016 Move X27, 0x590000
	017 Move X26, 0x590000
	018 Move X25, 0x590000
	019 Move X24, 0x590000
	020 Move X23, 0x590000
	021 Move X22, 0x590000
	022 Move X21, 0x58D000
	023 Move X28, [X28+1328]
	024 Move X20, [X20+1336]
	025 Move X27, [X27+2560]
	026 Move X26, [X26+2568]
	027 Move W8, [X29+3639]
	028 Move X25, [X25+2576]
	029 Move X24, [X24+2584]
	030 Move X23, [X23+2592]
	031 Move X22, [X22+2600]
	032 Move X21, [X21+2696]
	033 Move X19, X0
	034 Move TEMP, X8
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {67}
	038 Move X0, 0x550000
	039 Move X0, [X0+1336]
	040 Call 0x1C17CF4
	041 Move X0, 0x550000
	042 Move X0, [X0+1328]
	043 Call 0x1C17CF4
	044 Move X0, 0x58D000
	045 Move X0, [X0+2696]
	046 Call 0x1C17CF4
	047 Move X0, 0x590000
	048 Move X0, [X0+2584]
	049 Call 0x1C17CF4
	050 Move X0, 0x590000
	051 Move X0, [X0+2568]
	052 Call 0x1C17CF4
	053 Move X0, 0x590000
	054 Move X0, [X0+2576]
	055 Call 0x1C17CF4
	056 Move X0, 0x590000
	057 Move X0, [X0+2560]
	058 Call 0x1C17CF4
	059 Move X0, 0x590000
	060 Move X0, [X0+2600]
	061 Call 0x1C17CF4
	062 Move X0, 0x590000
	063 Move X0, [X0+2592]
	064 Call 0x1C17CF4
	065 Move W8, 1
	066 Move [X29+3639], W8
	067 Move W8, 0x3E000000
	068 Move [X19+32], W8
	069 Move X0, [X28]
	070 Call 0x1C17F10
	071 Move X5, [X20]
	072 Move W2, 1
	073 Move X1, X31
	074 Move X3, X31
	075 Move W4, W31
	076 Move X20, X0
	077 Move W28, 1
	078 Call 0x28E375C, X0, X1, X2, X3, X4
	079 Move [X19+40], X20
	080 Move X0, [X27]
	081 Call 0x1C17F10
	082 Move X2, [X26]
	083 Move W1, W31
	084 Move X20, X0
	085 Call 0x2D58B9C, X0, X1
	086 Move [X19+48], X20
	087 Move X0, [X25]
	088 Call 0x1C17F10
	089 Move X2, [X24]
	090 Move W1, W31
	091 Move X20, X0
	092 Call 0x2D58B9C, X0, X1
	093 Move [X19+56], X20
	094 Move X0, [X23]
	095 Call 0x1C17F10
	096 Move X1, [X22]
	097 Move X20, X0
	098 Call List`1<JobHandle>..ctor, X0
	099 Move [X19+64], X20
	100 Move X0, [X21]
	101 Call 0x1C17F10
	102 Move X1, X31
	103 Move X20, X0
	104 Call BindingsGroup..ctor, X0
	105 Move X8, -51245056
	106 Move V0, [X8+1264]
	107 Move [X19+72], X20
	108 Move [X19+84], W28
	109 Move X0, X19
	110 Move [X19+88], D0
	111 Move X20, [X31+80]
	112 Move X19, [X31+88]
	113 Move X22, [X31+64]
	114 Move X21, [X31+72]
	115 Move X24, [X31+48]
	116 Move X23, [X31+56]
	117 Move X26, [X31+32]
	118 Move X25, [X31+40]
	119 Move X28, [X31+16]
	120 Move X27, [X31+24]
	121 Move X1, X31
	122 Move X29, [X31+96]
	123 Move X30, [X31+104]
	124 Call MonoBehaviour..ctor, X0
	125 Return 

