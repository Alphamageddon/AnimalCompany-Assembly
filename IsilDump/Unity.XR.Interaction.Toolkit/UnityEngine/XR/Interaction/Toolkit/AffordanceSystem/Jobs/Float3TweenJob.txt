Type: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Jobs.Float3TweenJob

Method: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Jobs.TweenJobData`1<Unity.Mathematics.float3> get_jobData()

Disassembly:
	0x03BD8AD0 LDR X0, [X20]
	0x03BD8AD4 ADRP X21, 0x585000
	0x03BD8AD8 ADRP X20, 0x585000
	0x03BD8ADC LDR W8, [X0 + 0xE0]

ISIL:
	001 Move X1, X0
	002 Move W2, 96
	003 Move X0, X8
	004 Call 0x3EB2AC0
	005 Return X0

Method: System.Void set_jobData(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Jobs.TweenJobData`1<Unity.Mathematics.float3> value)

Disassembly:
	0x03BD8AE0 LDR X21, [X21 + 0xD60]
	0x03BD8AE4 LDR X20, [X20 + 0xD50]
	0x03BD8AE8 CBNZ W8, 0x3BD8AF0
	0x03BD8AEC BL 0x1C16DFC
	0x03BD8AF0 LDR X0, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move W2, 96
	003 Call 0x3EB2B30
	004 Move X30, [X31+16]
	005 Return 

Method: System.Void Execute()

Disassembly:
	0x03BD8AF4 ADRP X22, 0x51C000
	0x03BD8AF8 ADRP X23, 0x585000
	0x03BD8AFC ADRP X21, 0x51B000
	0x03BD8B00 LDR X22, [X22 + 0xE70]
	0x03BD8B04 LDR X23, [X23 + 0xD58]
	0x03BD8B08 LDR X21, [X21 + 0x970]
	0x03BD8B0C MOV X1, X31
	0x03BD8B10 BL 0x3C06048
	0x03BD8B14 LDR X0, [X20]
	0x03BD8B18 LDR W8, [X0 + 0xE0]
	0x03BD8B1C CBNZ W8, 0x3BD8B28
	0x03BD8B20 BL 0x1C16DFC
	0x03BD8B24 LDR X0, [X20]
	0x03BD8B28 LDR X8, [X0 + 0xB8]
	0x03BD8B2C STR X19, [X8 + 0x8]
	0x03BD8B30 LDR X0, [X22]
	0x03BD8B34 ADRP X22, 0x51B000
	0x03BD8B38 LDR X22, [X22 + 0x598]
	0x03BD8B3C BL 0x1C16F10
	0x03BD8B40 LDR X2, [X23]
	0x03BD8B44 MOV X1, X31
	0x03BD8B48 MOV X3, X31
	0x03BD8B4C MOV X19, X0
	0x03BD8B50 BL 0x3314368
	0x03BD8B54 LDR X0, [X21]
	0x03BD8B58 LDR W8, [X0 + 0xE0]
	0x03BD8B5C CBNZ W8, 0x3BD8B64
	0x03BD8B60 BL 0x1C16DFC
	0x03BD8B64 MOV X0, X19
	0x03BD8B68 MOV X1, X31
	0x03BD8B6C BL 0x3C028D0
	0x03BD8B70 LDR X8, [X20]
	0x03BD8B74 LDR X0, [X22]
	0x03BD8B78 LDR X8, [X8 + 0xB8]
	0x03BD8B7C LDR W9, [X0 + 0xE0]
	0x03BD8B80 LDR X19, [X8 + 0x8]
	0x03BD8B84 CBNZ W9, 0x3BD8B8C
	0x03BD8B88 BL 0x1C16DFC
	0x03BD8B8C MOV X0, X19
	0x03BD8B90 LDP X20, X19, [X31 + 0x20]
	0x03BD8B94 LDP X22, X21, [X31 + 0x10]
	0x03BD8B98 MOV X1, X31
	0x03BD8B9C LDP X30, X23, [X31], #0x30
	0x03BD8BA0 B 0x3C39674
	0x03BD8BA4 STR X30, [X31 - 0x20]!
	0x03BD8BA8 STP X20, X19, [X31 + 0x10]
	0x03BD8BAC ADRP X20, 0x80A000
	0x03BD8BB0 ADRP X19, 0x585000
	0x03BD8BB4 LDRB W8, [X20 + 0xEB0]
	0x03BD8BB8 LDR X19, [X19 + 0xD50]
	0x03BD8BBC TBNZ X8, 0x0, 0x3BD8BE0
	0x03BD8BC0 ADRP X0, 0x51B000
	0x03BD8BC4 LDR X0, [X0 + 0x598]
	0x03BD8BC8 BL 0x1C16CF4
	0x03BD8BCC ADRP X0, 0x585000
	0x03BD8BD0 LDR X0, [X0 + 0xD50]
	0x03BD8BD4 BL 0x1C16CF4
	0x03BD8BD8 MOVZ W8, 0x1
	0x03BD8BDC STRB W8, [X20 + 0xEB0]
	0x03BD8BE0 LDR X0, [X19]
	0x03BD8BE4 LDR W8, [X0 + 0xE0]
	0x03BD8BE8 CBNZ W8, 0x3BD8BF0
	0x03BD8BEC BL 0x1C16DFC
	0x03BD8BF0 ADRP X20, 0x80A000
	0x03BD8BF4 LDRB W8, [X20 + 0xEC9]
	0x03BD8BF8 CBNZ W8, 0x3BD8C10
	0x03BD8BFC ADRP X0, 0x585000
	0x03BD8C00 LDR X0, [X0 + 0xD50]
	0x03BD8C04 BL 0x1C16CF4
	0x03BD8C08 MOVZ W8, 0x1
	0x03BD8C0C STRB W8, [X20 + 0xEC9]
	0x03BD8C10 LDR X0, [X19]
	0x03BD8C14 ADRP X20, 0x51B000
	0x03BD8C18 LDR W8, [X0 + 0xE0]
	0x03BD8C1C LDR X20, [X20 + 0x598]
	0x03BD8C20 CBNZ W8, 0x3BD8C2C
	0x03BD8C24 BL 0x1C16DFC
	0x03BD8C28 LDR X0, [X19]
	0x03BD8C2C LDR X8, [X20]
	0x03BD8C30 LDR X9, [X0 + 0xB8]
	0x03BD8C34 LDR W10, [X8 + 0xE0]
	0x03BD8C38 LDR X19, [X9 + 0x8]
	0x03BD8C3C CBNZ W10, 0x3BD8C48
	0x03BD8C40 MOV X0, X8
	0x03BD8C44 BL 0x1C16DFC
	0x03BD8C48 MOV X0, X19
	0x03BD8C4C MOV X1, X31
	0x03BD8C50 MOV X2, X31
	0x03BD8C54 BL 0x3C3883C
	0x03BD8C58 TBZ X0, 0x0, 0x3BD8C68
	0x03BD8C5C LDP X20, X19, [X31 + 0x10]
	0x03BD8C60 LDR X30, [X31], #0x20
	0x03BD8C64 RET
	0x03BD8C68 CBZ X19, 0x3BD8C7C
	0x03BD8C6C MOV X0, X19
	0x03BD8C70 LDP X20, X19, [X31 + 0x10]
	0x03BD8C74 LDR X30, [X31], #0x20
	0x03BD8C78 B 0x3BD8C80
	0x03BD8C7C BL 0x1C16F20
	0x03BD8C80 STP X30, X21, [X31 - 0x20]!
	0x03BD8C84 STP X20, X19, [X31 + 0x10]
	0x03BD8C88 ADRP X20, 0x80A000
	0x03BD8C8C ADRP X21, 0x51B000
	0x03BD8C90 LDRB W8, [X20 + 0xEB6]
	0x03BD8C94 LDR X21, [X21 + 0x598]

ISIL:
	001 Subtract X31, X31, 384
	002 Move [X31+288], D13
	003 Move [X31+296], D12
	004 Move [X31+304], D11
	005 Move [X31+312], D10
	006 Move [X31+320], D9
	007 Move [X31+328], D8
	008 Move [X31+336], X29
	009 Move [X31+352], X30
	010 Move [X31+360], X21
	011 Move [X31+368], X20
	012 Move [X31+376], X19
	013 Move X20, 0x80B000
	014 Move X21, 0x586000
	015 Move W8, [X20+3748]
	016 Move X21, [X21+3376]
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x586000
	023 Move X0, [X0+3376]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3748], W8
	027 NotImplemented "Instruction MOVI not yet implemented."
	028 Add X8, X31, 0
	029 Move X0, X19
	030 Move X1, X31
	031 Move [X31+256], V0
	032 Move [X31+264], V0
	033 Move [X31+224], V0
	034 Move [X31+232], V0
	035 Move [X31+192], V0
	036 Move [X31+200], V0
	037 Move [X31+160], V0
	038 Move [X31+168], V0
	039 Move [X31+128], V0
	040 Move [X31+136], V0
	041 Move [X31+96], V0
	042 Move [X31+104], V0
	043 Call 0x3BD9898
	044 Add X0, X31, 192
	045 Add X1, X31, 0
	046 Move W2, 96
	047 Add X20, X31, 192
	048 Call 0x3EB2AC0
	049 Add X8, X31, 0
	050 Move X0, X19
	051 Move X1, X31
	052 Add X20, X20, 40
	053 Call 0x3BD9898
	054 Add X0, X31, 96
	055 Add X1, X31, 0
	056 Move W2, 96
	057 Call 0x3EB2AC0
	058 Move X1, [X21]
	059 Add X0, X31, 96
	060 Call TweenJobData`1<float3>.get_stateTransitionAmountFloat, X0
	061 Move X0, X20
	062 Move X1, X31
	063 Call NativeCurve.Evaluate, X0, V0
	064 Add X8, X31, 0
	065 Move X0, X19
	066 Move X1, X31
	067 Move V8, V0
	068 Call 0x3BD9898
	069 Move S9, [X31+12]
	070 Move S10, [X31+16]
	071 Move V11, [X31+20]
	072 Add X8, X31, 0
	073 Move X0, X19
	074 Move X1, X31
	075 Call 0x3BD9898
	076 Move S3, [X31+24]
	077 Move S4, [X31+28]
	078 Move V5, [X31+32]
	079 Move X0, X19
	080 Move V0, V9
	081 Move V1, V10
	082 Move V2, V11
	083 Move V6, V8
	084 Call Float3TweenJob.Lerp, X0, X1, X2, V0
	085 Add X8, X31, 0
	086 Move X0, X19
	087 Move X1, X31
	088 Move V8, V0
	089 Move V9, V1
	090 Move V10, V2
	091 Call 0x3BD9898
	092 Move X20, [X31+80]
	093 Add X8, X31, 0
	094 Move X0, X19
	095 Move X1, X31
	096 Call 0x3BD9898
	097 Move S11, [X31+64]
	098 Move S12, [X31+68]
	099 Move V13, [X31+72]
	100 Add X8, X31, 0
	101 Move X0, X19
	102 Move X1, X31
	103 Call 0x3BD9898
	104 Move V6, [X31+76]
	105 Move X0, X19
	106 Move V0, V11
	107 Move V1, V12
	108 Move V2, V13
	109 Move V3, V8
	110 Move V4, V9
	111 Move V5, V10
	112 Call Float3TweenJob.Lerp, X0, X1, X2, V0
	113 Move [X20], S0
	114 Move [X20+8], S1
	115 Move [X20+8], S2
	116 Move X20, [X31+368]
	117 Move X19, [X31+376]
	118 Move X30, [X31+352]
	119 Move X21, [X31+360]
	120 Move X29, [X31+336]
	121 Move D9, [X31+320]
	122 Move D8, [X31+328]
	123 Move D11, [X31+304]
	124 Move D10, [X31+312]
	125 Move D13, [X31+288]
	126 Move D12, [X31+296]
	127 Add X31, X31, 384
	128 Return 

Method: Unity.Mathematics.float3 Lerp(Unity.Mathematics.float3 from, Unity.Mathematics.float3 to, System.Single t)

Disassembly:
	0x03BD8C98 MOV X19, X0
	0x03BD8C9C TBNZ X8, 0x0, 0x3BD8CB4
	0x03BD8CA0 ADRP X0, 0x51B000
	0x03BD8CA4 LDR X0, [X0 + 0x598]
	0x03BD8CA8 BL 0x1C16CF4
	0x03BD8CAC MOVZ W8, 0x1
	0x03BD8CB0 STRB W8, [X20 + 0xEB6]
	0x03BD8CB4 LDR X0, [X21]
	0x03BD8CB8 LDR X20, [X19 + 0x28]
	0x03BD8CBC LDR W8, [X0 + 0xE0]
	0x03BD8CC0 CBNZ W8, 0x3BD8CC8
	0x03BD8CC4 BL 0x1C16DFC
	0x03BD8CC8 MOV X0, X20
	0x03BD8CCC MOV X1, X31
	0x03BD8CD0 MOV X2, X31
	0x03BD8CD4 BL 0x3C354F8
	0x03BD8CD8 TBZ X0, 0x0, 0x3BD8D20
	0x03BD8CDC LDR X8, [X19 + 0x28]
	0x03BD8CE0 CBZ X8, 0x3BD8D2C
	0x03BD8CE4 LDR X0, [X21]
	0x03BD8CE8 LDR X20, [X8 + 0x30]
	0x03BD8CEC LDR W9, [X0 + 0xE0]
	0x03BD8CF0 CBNZ W9, 0x3BD8CF8
	0x03BD8CF4 BL 0x1C16DFC
	0x03BD8CF8 MOV X0, X20
	0x03BD8CFC MOV X1, X31
	0x03BD8D00 MOV X2, X31
	0x03BD8D04 BL 0x3C354F8
	0x03BD8D08 TBZ X0, 0x0, 0x3BD8D20
	0x03BD8D0C LDR X0, [X19 + 0x28]
	0x03BD8D10 CBZ X0, 0x3BD8D2C
	0x03BD8D14 BL 0x3BD96E0

ISIL:
	001 Move [X31-64], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move V11, V6
	010 Move V8, V5
	011 Move V9, V4
	012 Move V10, V3
	013 Move V12, V2
	014 Move V13, V1
	015 Move V14, V0
	016 Call Float3TweenJob.IsNearlyEqual, X0, X1, X2
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {30}
	021 Subtract S0, S10, S14
	022 Subtract S1, S9, S13
	023 Subtract S2, S8, S12
	024 Multiply S0, S0, S11
	025 Multiply S1, S1, S11
	026 Multiply S2, S2, S11
	027 Add S10, S14, S0
	028 Add S9, S13, S1
	029 Add S8, S12, S2
	030 Move V0, V10
	031 Move V1, V9
	032 Move V2, V8
	033 Move X30, [X31+56]
	034 Move D9, [X31+40]
	035 Move D8, [X31+48]
	036 Move D11, [X31+24]
	037 Move D10, [X31+32]
	038 Move D13, [X31+8]
	039 Move D12, [X31+16]
	040 Move V14, [X31+64]
	041 Return X0

Method: System.Boolean IsNearlyEqual(Unity.Mathematics.float3 from, Unity.Mathematics.float3 to)

Disassembly:
	0x03BD8D18 STR X31, [X19 + 0x28]
	0x03BD8D1C STRB W31, [X19 + 0x30]
	0x03BD8D20 LDP X20, X19, [X31 + 0x10]
	0x03BD8D24 LDP X30, X21, [X31], #0x20
	0x03BD8D28 RET
	0x03BD8D2C BL 0x1C16F20
	0x03BD8D30 B 0x3BD8D34
	0x03BD8D34 STP X30, X21, [X31 - 0x20]!
	0x03BD8D38 STP X20, X19, [X31 + 0x10]
	0x03BD8D3C ADRP X20, 0x80A000
	0x03BD8D40 ADRP X21, 0x51B000
	0x03BD8D44 LDRB W8, [X20 + 0xEB4]
	0x03BD8D48 LDR X21, [X21 + 0x598]

ISIL:
	001 Move X8, -51302400
	002 Subtract S0, S3, S0
	003 Subtract S1, S4, S1
	004 Move V3, [X8+376]
	005 Subtract S2, S5, S2
	006 Multiply S0, S0, S0
	007 Multiply S1, S1, S1
	008 Add S0, S0, S1
	009 Multiply S1, S2, S2
	010 Add S0, S1, S0
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 NotImplemented "Instruction CSET not yet implemented."
	013 Return X0

