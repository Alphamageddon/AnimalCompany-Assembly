Type: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Jobs.FloatTweenJob

Method: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Jobs.TweenJobData`1<System.Single> get_jobData()

Disassembly:
	0x03BD86C4 CBNZ W8, 0x3BD86CC
	0x03BD86C8 BL 0x1C16DFC
	0x03BD86CC ADRP X19, 0x584000
	0x03BD86D0 LDR X19, [X19 + 0xE08]
	0x03BD86D4 MOV X0, X31

ISIL:
	001 Move V1, [X0+32]
	002 Move V0, [X0+48]
	003 Move V3, [X0]
	004 Move V2, [X0+16]
	005 Move [X8+32], V1
	006 Move [X8+40], V0
	007 Move [X8], V3
	008 Move [X8+8], V2
	009 Return X0

Method: System.Void set_jobData(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Jobs.TweenJobData`1<System.Single> value)

Disassembly:
	0x03BD86D8 BL 0x3BAD7A8
	0x03BD86DC LDR X0, [X20]
	0x03BD86E0 LDR W8, [X0 + 0xE0]
	0x03BD86E4 CBNZ W8, 0x3BD86EC
	0x03BD86E8 BL 0x1C16DFC

ISIL:
	001 Move V1, [X1+32]
	002 Move V0, [X1+48]
	003 Move V3, [X1]
	004 Move V2, [X1+16]
	005 Move [X0+32], V1
	006 Move [X0+40], V0
	007 Move [X0], V3
	008 Move [X0+8], V2
	009 Return 

Method: System.Void Execute()

Disassembly:
	0x03BD86EC ADRP X20, 0x584000
	0x03BD86F0 LDR X20, [X20 + 0xE10]
	0x03BD86F4 MOV X0, X31
	0x03BD86F8 BL 0x3BADC18
	0x03BD86FC LDR X0, [X19]
	0x03BD8700 LDR W8, [X0 + 0xE0]
	0x03BD8704 CBNZ W8, 0x3BD870C
	0x03BD8708 BL 0x1C16DFC
	0x03BD870C ADRP X19, 0x584000
	0x03BD8710 LDR X19, [X19 + 0xEA8]
	0x03BD8714 MOV X0, X31
	0x03BD8718 BL 0x3BAE090
	0x03BD871C LDR X0, [X20]
	0x03BD8720 LDR W8, [X0 + 0xE0]
	0x03BD8724 CBNZ W8, 0x3BD872C
	0x03BD8728 BL 0x1C16DFC
	0x03BD872C ADRP X20, 0x584000
	0x03BD8730 LDR X20, [X20 + 0xEC0]
	0x03BD8734 MOV X0, X31
	0x03BD8738 BL 0x3BAE524
	0x03BD873C LDR X0, [X19]
	0x03BD8740 LDR W8, [X0 + 0xE0]
	0x03BD8744 CBNZ W8, 0x3BD874C
	0x03BD8748 BL 0x1C16DFC
	0x03BD874C ADRP X19, 0x584000
	0x03BD8750 LDR X19, [X19 + 0xEA0]
	0x03BD8754 MOV X0, X31
	0x03BD8758 BL 0x3BB15B4
	0x03BD875C LDR X0, [X20]
	0x03BD8760 LDR W8, [X0 + 0xE0]
	0x03BD8764 CBNZ W8, 0x3BD876C
	0x03BD8768 BL 0x1C16DFC
	0x03BD876C ADRP X20, 0x584000
	0x03BD8770 LDR X20, [X20 + 0xEB8]
	0x03BD8774 MOV X0, X31
	0x03BD8778 BL 0x3BB19D8
	0x03BD877C LDR X0, [X19]
	0x03BD8780 LDR W8, [X0 + 0xE0]
	0x03BD8784 CBNZ W8, 0x3BD878C
	0x03BD8788 BL 0x1C16DFC
	0x03BD878C ADRP X19, 0x585000
	0x03BD8790 LDR X19, [X19 + 0x390]
	0x03BD8794 MOV X0, X31
	0x03BD8798 BL 0x3BB1DB4
	0x03BD879C LDR X0, [X20]
	0x03BD87A0 LDR W8, [X0 + 0xE0]
	0x03BD87A4 CBNZ W8, 0x3BD87AC
	0x03BD87A8 BL 0x1C16DFC
	0x03BD87AC ADRP X20, 0x585000
	0x03BD87B0 LDR X20, [X20 + 0x398]
	0x03BD87B4 MOV X0, X31
	0x03BD87B8 BL 0x3BB21B0
	0x03BD87BC LDR X0, [X19]
	0x03BD87C0 LDR W8, [X0 + 0xE0]
	0x03BD87C4 CBNZ W8, 0x3BD87CC
	0x03BD87C8 BL 0x1C16DFC
	0x03BD87CC ADRP X19, 0x585000
	0x03BD87D0 LDR X19, [X19 + 0x3A8]
	0x03BD87D4 MOV X0, X31
	0x03BD87D8 BL 0x3BBE1BC
	0x03BD87DC LDR X0, [X20]
	0x03BD87E0 LDR W8, [X0 + 0xE0]
	0x03BD87E4 CBNZ W8, 0x3BD87EC
	0x03BD87E8 BL 0x1C16DFC
	0x03BD87EC ADRP X20, 0x585000
	0x03BD87F0 LDR X20, [X20 + 0x3B0]
	0x03BD87F4 MOV X0, X31
	0x03BD87F8 BL 0x3BBE5B0
	0x03BD87FC LDR X0, [X19]
	0x03BD8800 LDR W8, [X0 + 0xE0]
	0x03BD8804 CBNZ W8, 0x3BD880C
	0x03BD8808 BL 0x1C16DFC
	0x03BD880C ADRP X19, 0x585000
	0x03BD8810 LDR X19, [X19 + 0x3A0]
	0x03BD8814 MOV X0, X31
	0x03BD8818 BL 0x3BBE9F4
	0x03BD881C LDR X0, [X20]
	0x03BD8820 LDR W8, [X0 + 0xE0]
	0x03BD8824 CBNZ W8, 0x3BD882C
	0x03BD8828 BL 0x1C16DFC
	0x03BD882C MOV X0, X31
	0x03BD8830 BL 0x3BBED80
	0x03BD8834 LDR X0, [X19]
	0x03BD8838 LDR W8, [X0 + 0xE0]
	0x03BD883C CBNZ W8, 0x3BD8844

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+192], D9
	003 Move [X31+200], D8
	004 Move [X31+208], X30
	005 Move [X31+216], X21
	006 Move [X31+224], X20
	007 Move [X31+232], X19
	008 Move X20, 0x80B000
	009 Move X21, 0x586000
	010 Move W8, [X20+3746]
	011 Move X21, [X21+3360]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x586000
	018 Move X0, [X0+3360]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3746], W8
	022 Add X8, X31, 128
	023 NotImplemented "Instruction MOVI not yet implemented."
	024 Add X20, X8, 16
	025 Add X8, X31, 0
	026 Move X0, X19
	027 Move X1, X31
	028 Move [X31+160], V0
	029 Move [X31+168], V0
	030 Move [X31+128], V0
	031 Move [X31+136], V0
	032 Move [X31+96], V0
	033 Move [X31+104], V0
	034 Move [X31+64], V0
	035 Move [X31+72], V0
	036 Call 0x3BD9874
	037 Move V0, [X31]
	038 Move V1, [X31+16]
	039 Move V2, [X31+32]
	040 Move V3, [X31+48]
	041 Add X8, X31, 0
	042 Move X0, X19
	043 Move X1, X31
	044 Move [X31+128], V0
	045 Move [X31+136], V1
	046 Move [X31+160], V2
	047 Move [X31+168], V3
	048 Call 0x3BD9874
	049 Move V0, [X31]
	050 Move V1, [X31+16]
	051 Move V2, [X31+32]
	052 Move V3, [X31+48]
	053 Move X1, [X21]
	054 Add X0, X31, 64
	055 Move [X31+64], V0
	056 Move [X31+72], V1
	057 Move [X31+96], V2
	058 Move [X31+104], V3
	059 Call TweenJobData`1<Single>.get_stateTransitionAmountFloat, X0
	060 Move X0, X20
	061 Move X1, X31
	062 Call NativeCurve.Evaluate, X0, V0
	063 Add X8, X31, 0
	064 Move X0, X19
	065 Move X1, X31
	066 Move V8, V0
	067 Call 0x3BD9874
	068 Move V9, [X31+4]
	069 Add X8, X31, 0
	070 Move X0, X19
	071 Move X1, X31
	072 Call 0x3BD9874
	073 Move V1, [X31+8]
	074 Move X0, X19
	075 Move V0, V9
	076 Move V2, V8
	077 Call FloatTweenJob.Lerp, X0, V0, V1, V2
	078 Add X8, X31, 0
	079 Move X0, X19
	080 Move X1, X31
	081 Move V8, V0
	082 Call 0x3BD9874
	083 Move X20, [X31+48]
	084 Add X8, X31, 0
	085 Move X0, X19
	086 Move X1, X31
	087 Call 0x3BD9874
	088 Move V9, [X31+40]
	089 Add X8, X31, 0
	090 Move X0, X19
	091 Move X1, X31
	092 Call 0x3BD9874
	093 Move V2, [X31+44]
	094 Move X0, X19
	095 Move V0, V9
	096 Move V1, V8
	097 Call FloatTweenJob.Lerp, X0, V0, V1, V2
	098 Move [X20], S0
	099 Move X20, [X31+224]
	100 Move X19, [X31+232]
	101 Move X30, [X31+208]
	102 Move X21, [X31+216]
	103 Move D9, [X31+192]
	104 Move D8, [X31+200]
	105 Add X31, X31, 240
	106 Return 

Method: System.Single Lerp(System.Single from, System.Single to, System.Single t)

Disassembly:
	0x03BD8840 BL 0x1C16DFC
	0x03BD8844 LDP X20, X19, [X31 + 0x10]
	0x03BD8848 MOV X0, X31
	0x03BD884C LDR X30, [X31], #0x20
	0x03BD8850 B 0x3BBF20C
	0x03BD8854 MOV X1, X0
	0x03BD8858 MOVZ W2, 0x78
	0x03BD885C MOV X0, X8
	0x03BD8860 B 0x3EB1AC0
	0x03BD8864 LDRB W0, [X0 + 0x78]
	0x03BD8868 RET
	0x03BD886C LDR V0, [X0 + 0x7C]
	0x03BD8870 RET
	0x03BD8874 LDP V1, V0, [X0 + 0x20]
	0x03BD8878 LDP V3, V2, [X0]
	0x03BD887C STP V1, V0, [X8 + 0x20]

ISIL:
	001 Move [X31-32], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move V8, V2
	006 Move V9, V1
	007 Move V10, V0
	008 Call FloatTweenJob.IsNearlyEqual, X0, V0, V1
	009 Subtract S0, S9, S10
	010 Multiply S0, S0, S8
	011 Add S0, S0, S10
	012 And W31, W0, 1
	013 NotImplemented "Instruction FCSEL not yet implemented."
	014 Move X30, [X31+24]
	015 Move D9, [X31+8]
	016 Move D8, [X31+16]
	017 Move V10, [X31+32]
	018 Return V0

Method: System.Boolean IsNearlyEqual(System.Single from, System.Single to)

Disassembly:
	0x03BD8880 STP V3, V2, [X8]
	0x03BD8884 RET
	0x03BD8888 MOV X1, X0
	0x03BD888C MOVZ W2, 0x58
	0x03BD8890 MOV X0, X8
	0x03BD8894 B 0x3EB1AC0
	0x03BD8898 MOV X1, X0

ISIL:
	001 Move X8, -51302400
	002 Move V2, [X8+376]
	003 Subtract S0, S1, S0
	004 Multiply S0, S0, S0
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Return X0

