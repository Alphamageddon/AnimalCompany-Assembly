Type: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Jobs.Float4TweenJob

Method: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Jobs.TweenJobData`1<Unity.Mathematics.float4> get_jobData()

Disassembly:
	0x03BD8D4C MOV X19, X0
	0x03BD8D50 TBNZ X8, 0x0, 0x3BD8D68
	0x03BD8D54 ADRP X0, 0x51B000
	0x03BD8D58 LDR X0, [X0 + 0x598]

ISIL:
	001 Move X1, X0
	002 Move W2, 120
	003 Move X0, X8
	004 Call 0x3EB2AC0
	005 Return X0

Method: System.Void set_jobData(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Jobs.TweenJobData`1<Unity.Mathematics.float4> value)

Disassembly:
	0x03BD8D5C BL 0x1C16CF4
	0x03BD8D60 MOVZ W8, 0x1
	0x03BD8D64 STRB W8, [X20 + 0xEB4]
	0x03BD8D68 LDR X0, [X21]
	0x03BD8D6C LDR X20, [X19 + 0x28]

ISIL:
	001 Move [X31-16], X30
	002 Move W2, 120
	003 Call 0x3EB2B30
	004 Move X30, [X31+16]
	005 Return 

Method: System.Void Execute()

Disassembly:
	0x03BD8D70 LDR W8, [X0 + 0xE0]
	0x03BD8D74 CBNZ W8, 0x3BD8D7C
	0x03BD8D78 BL 0x1C16DFC
	0x03BD8D7C MOV X0, X20
	0x03BD8D80 MOV X1, X31
	0x03BD8D84 MOV X2, X31
	0x03BD8D88 BL 0x3C354F8
	0x03BD8D8C TBZ X0, 0x0, 0x3BD8DD4
	0x03BD8D90 LDR X8, [X19 + 0x28]
	0x03BD8D94 CBZ X8, 0x3BD8DE0
	0x03BD8D98 LDR X0, [X21]
	0x03BD8D9C LDR X20, [X8 + 0x30]
	0x03BD8DA0 LDR W9, [X0 + 0xE0]
	0x03BD8DA4 CBNZ W9, 0x3BD8DAC
	0x03BD8DA8 BL 0x1C16DFC
	0x03BD8DAC MOV X0, X20
	0x03BD8DB0 MOV X1, X31
	0x03BD8DB4 MOV X2, X31
	0x03BD8DB8 BL 0x3C354F8
	0x03BD8DBC TBZ X0, 0x0, 0x3BD8DD4
	0x03BD8DC0 LDR X0, [X19 + 0x28]
	0x03BD8DC4 CBZ X0, 0x3BD8DE0
	0x03BD8DC8 BL 0x3BD947C
	0x03BD8DCC MOVZ W8, 0x1
	0x03BD8DD0 STRB W8, [X19 + 0x31]
	0x03BD8DD4 LDP X20, X19, [X31 + 0x10]
	0x03BD8DD8 LDP X30, X21, [X31], #0x20
	0x03BD8DDC RET
	0x03BD8DE0 BL 0x1C16F20
	0x03BD8DE4 B 0x3BD8C80
	0x03BD8DE8 STR X30, [X31 - 0x20]!
	0x03BD8DEC STP X20, X19, [X31 + 0x10]
	0x03BD8DF0 ADRP X20, 0x80A000
	0x03BD8DF4 ADRP X19, 0x585000
	0x03BD8DF8 LDRB W8, [X20 + 0xEB1]
	0x03BD8DFC LDR X19, [X19 + 0xD50]
	0x03BD8E00 TBNZ X8, 0x0, 0x3BD8E24
	0x03BD8E04 ADRP X0, 0x51B000
	0x03BD8E08 LDR X0, [X0 + 0x598]
	0x03BD8E0C BL 0x1C16CF4
	0x03BD8E10 ADRP X0, 0x585000
	0x03BD8E14 LDR X0, [X0 + 0xD50]
	0x03BD8E18 BL 0x1C16CF4
	0x03BD8E1C MOVZ W8, 0x1
	0x03BD8E20 STRB W8, [X20 + 0xEB1]
	0x03BD8E24 LDR X0, [X19]
	0x03BD8E28 LDR W8, [X0 + 0xE0]
	0x03BD8E2C CBNZ W8, 0x3BD8E34
	0x03BD8E30 BL 0x1C16DFC
	0x03BD8E34 ADRP X20, 0x80A000
	0x03BD8E38 LDRB W8, [X20 + 0xEC9]
	0x03BD8E3C CBNZ W8, 0x3BD8E54
	0x03BD8E40 ADRP X0, 0x585000
	0x03BD8E44 LDR X0, [X0 + 0xD50]
	0x03BD8E48 BL 0x1C16CF4
	0x03BD8E4C MOVZ W8, 0x1
	0x03BD8E50 STRB W8, [X20 + 0xEC9]
	0x03BD8E54 LDR X0, [X19]
	0x03BD8E58 ADRP X20, 0x51B000
	0x03BD8E5C LDR W8, [X0 + 0xE0]
	0x03BD8E60 LDR X20, [X20 + 0x598]
	0x03BD8E64 CBNZ W8, 0x3BD8E70
	0x03BD8E68 BL 0x1C16DFC
	0x03BD8E6C LDR X0, [X19]
	0x03BD8E70 LDR X8, [X20]
	0x03BD8E74 LDR X9, [X0 + 0xB8]
	0x03BD8E78 LDR W10, [X8 + 0xE0]
	0x03BD8E7C LDR X19, [X9 + 0x8]
	0x03BD8E80 CBNZ W10, 0x3BD8E8C
	0x03BD8E84 MOV X0, X8
	0x03BD8E88 BL 0x1C16DFC
	0x03BD8E8C MOV X0, X19
	0x03BD8E90 MOV X1, X31
	0x03BD8E94 MOV X2, X31
	0x03BD8E98 BL 0x3C3883C
	0x03BD8E9C TBNZ X0, 0x0, 0x3BD8EBC
	0x03BD8EA0 CBZ X19, 0x3BD8EC8
	0x03BD8EA4 LDRB W8, [X19 + 0x20]
	0x03BD8EA8 CBZ W8, 0x3BD8EBC
	0x03BD8EAC MOV X0, X19
	0x03BD8EB0 LDP X20, X19, [X31 + 0x10]
	0x03BD8EB4 LDR X30, [X31], #0x20
	0x03BD8EB8 B 0x3BD8ECC
	0x03BD8EBC LDP X20, X19, [X31 + 0x10]
	0x03BD8EC0 LDR X30, [X31], #0x20
	0x03BD8EC4 RET
	0x03BD8EC8 BL 0x1C16F20
	0x03BD8ECC STP X30, X23, [X31 - 0x30]!
	0x03BD8ED0 STP X22, X21, [X31 + 0x10]
	0x03BD8ED4 STP X20, X19, [X31 + 0x20]
	0x03BD8ED8 ADRP X20, 0x80A000
	0x03BD8EDC ADRP X21, 0x585000
	0x03BD8EE0 LDRB W8, [X20 + 0xEB3]
	0x03BD8EE4 LDR X21, [X21 + 0xD50]
	0x03BD8EE8 MOV X19, X0
	0x03BD8EEC TBNZ X8, 0x0, 0x3BD8F28
	0x03BD8EF0 ADRP X0, 0x51B000
	0x03BD8EF4 LDR X0, [X0 + 0xA28]
	0x03BD8EF8 BL 0x1C16CF4
	0x03BD8EFC ADRP X0, 0x51B000
	0x03BD8F00 LDR X0, [X0 + 0x598]
	0x03BD8F04 BL 0x1C16CF4
	0x03BD8F08 ADRP X0, 0x585000
	0x03BD8F0C LDR X0, [X0 + 0xD50]
	0x03BD8F10 BL 0x1C16CF4
	0x03BD8F14 ADRP X0, 0x585000
	0x03BD8F18 LDR X0, [X0 + 0xD68]
	0x03BD8F1C BL 0x1C16CF4
	0x03BD8F20 MOVZ W8, 0x1
	0x03BD8F24 STRB W8, [X20 + 0xEB3]
	0x03BD8F28 LDR X0, [X21]
	0x03BD8F2C LDR W8, [X0 + 0xE0]
	0x03BD8F30 CBNZ W8, 0x3BD8F38
	0x03BD8F34 BL 0x1C16DFC
	0x03BD8F38 ADRP X23, 0x80A000
	0x03BD8F3C LDRB W8, [X23 + 0xEC9]
	0x03BD8F40 CBNZ W8, 0x3BD8F58

ISIL:
	001 Subtract X31, X31, 496
	002 Move [X31+384], D15
	003 Move [X31+392], D14
	004 Move [X31+400], D13
	005 Move [X31+408], D12
	006 Move [X31+416], D11
	007 Move [X31+424], D10
	008 Move [X31+432], D9
	009 Move [X31+440], D8
	010 Move [X31+448], X29
	011 Move [X31+456], X30
	012 Move [X31+464], X22
	013 Move [X31+472], X21
	014 Move [X31+480], X20
	015 Move [X31+488], X19
	016 Move X22, 0x80B000
	017 Move X21, 0x586000
	018 Move W8, [X22+3749]
	019 Move X21, [X21+3384]
	020 Move X19, X0
	021 Add X20, X31, 128
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0x586000
	027 Move X0, [X0+3384]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+3749], W8
	031 NotImplemented "Instruction MOVI not yet implemented."
	032 Add X8, X31, 8
	033 Move X0, X19
	034 Move X1, X31
	035 Move [X31+368], X31
	036 Move [X31+240], X31
	037 Move [X20+208], V0
	038 Move [X20+216], V0
	039 Move [X20+176], V0
	040 Move [X20+184], V0
	041 Move [X20+144], V0
	042 Move [X20+152], V0
	043 Move [X20+8], V0
	044 Move [X20+80], V0
	045 Move [X20+88], V0
	046 Move [X20+48], V0
	047 Move [X20+56], V0
	048 Move [X20+16], V0
	049 Move [X20+24], V0
	050 Move [X31+8], V0
	051 Call 0x3BD98A8
	052 Add X0, X31, 256
	053 Add X1, X31, 8
	054 Move W2, 120
	055 Add X20, X31, 256
	056 Call 0x3EB2AC0
	057 Add X8, X31, 8
	058 Move X0, X19
	059 Move X1, X31
	060 Add X20, X20, 56
	061 Call 0x3BD98A8
	062 Add X0, X31, 128
	063 Add X1, X31, 8
	064 Move W2, 120
	065 Call 0x3EB2AC0
	066 Move X1, [X21]
	067 Add X0, X31, 128
	068 Call TweenJobData`1<float4>.get_stateTransitionAmountFloat, X0
	069 Move X0, X20
	070 Move X1, X31
	071 Call NativeCurve.Evaluate, X0, V0
	072 Add X8, X31, 8
	073 Move X0, X19
	074 Move X1, X31
	075 Move V8, V0
	076 Call 0x3BD98A8
	077 Move S9, [X31+24]
	078 Move S10, [X31+28]
	079 Move S11, [X31+32]
	080 Move S12, [X31+36]
	081 Add X8, X31, 8
	082 Move X0, X19
	083 Move X1, X31
	084 Call 0x3BD98A8
	085 Move S4, [X31+40]
	086 Move S5, [X31+44]
	087 Move S6, [X31+48]
	088 Move S7, [X31+52]
	089 Move X0, X19
	090 Move V0, V9
	091 Move V1, V10
	092 Move V2, V11
	093 Move V3, V12
	094 Move [X31], S8
	095 Call Float4TweenJob.Lerp, X0, X1, X2, V0
	096 Add X8, X31, 8
	097 Move X0, X19
	098 Move X1, X31
	099 Move V8, V0
	100 Move V9, V1
	101 Move V10, V2
	102 Move V11, V3
	103 Call 0x3BD98A8
	104 Move X20, [X31+112]
	105 Add X8, X31, 8
	106 Move X0, X19
	107 Move X1, X31
	108 Call 0x3BD98A8
	109 Move S12, [X31+88]
	110 Move S13, [X31+92]
	111 Move S14, [X31+96]
	112 Move S15, [X31+100]
	113 Add X8, X31, 8
	114 Move X0, X19
	115 Move X1, X31
	116 Call 0x3BD98A8
	117 Move V0, [X31+104]
	118 Move X0, X19
	119 Move V1, V13
	120 Move V2, V14
	121 Move [X31], S0
	122 Move V0, V12
	123 Move V3, V15
	124 Move V4, V8
	125 Move V5, V9
	126 Move V6, V10
	127 Move V7, V11
	128 Call Float4TweenJob.Lerp, X0, X1, X2, V0
	129 Move [X20], S0
	130 Move [X20+8], S1
	131 Move [X20+8], S2
	132 Move [X20+16], S3
	133 Move X20, [X31+480]
	134 Move X19, [X31+488]
	135 Move X22, [X31+464]
	136 Move X21, [X31+472]
	137 Move X29, [X31+448]
	138 Move X30, [X31+456]
	139 Move D9, [X31+432]
	140 Move D8, [X31+440]
	141 Move D11, [X31+416]
	142 Move D10, [X31+424]
	143 Move D13, [X31+400]
	144 Move D12, [X31+408]
	145 Move D15, [X31+384]
	146 Move D14, [X31+392]
	147 Add X31, X31, 496
	148 Return 

Method: Unity.Mathematics.float4 Lerp(Unity.Mathematics.float4 from, Unity.Mathematics.float4 to, System.Single t)

Disassembly:
	0x03BD8F44 ADRP X0, 0x585000
	0x03BD8F48 LDR X0, [X0 + 0xD50]
	0x03BD8F4C BL 0x1C16CF4
	0x03BD8F50 MOVZ W8, 0x1
	0x03BD8F54 STRB W8, [X23 + 0xEC9]
	0x03BD8F58 LDR X0, [X21]
	0x03BD8F5C ADRP X22, 0x51B000
	0x03BD8F60 LDR W8, [X0 + 0xE0]
	0x03BD8F64 LDR X22, [X22 + 0x598]
	0x03BD8F68 CBNZ W8, 0x3BD8F74
	0x03BD8F6C BL 0x1C16DFC
	0x03BD8F70 LDR X0, [X21]
	0x03BD8F74 LDR X8, [X22]
	0x03BD8F78 LDR X9, [X0 + 0xB8]
	0x03BD8F7C LDR W10, [X8 + 0xE0]
	0x03BD8F80 LDR X20, [X9 + 0x8]
	0x03BD8F84 CBNZ W10, 0x3BD8F90
	0x03BD8F88 MOV X0, X8
	0x03BD8F8C BL 0x1C16DFC
	0x03BD8F90 MOV X0, X20
	0x03BD8F94 MOV X1, X31
	0x03BD8F98 MOV X2, X31
	0x03BD8F9C BL 0x3C3883C
	0x03BD8FA0 TBNZ X0, 0x0, 0x3BD9130
	0x03BD8FA4 LDR X0, [X21]
	0x03BD8FA8 LDR W8, [X0 + 0xE0]
	0x03BD8FAC CBNZ W8, 0x3BD8FB4
	0x03BD8FB0 BL 0x1C16DFC
	0x03BD8FB4 LDRB W8, [X23 + 0xEC9]
	0x03BD8FB8 CBNZ W8, 0x3BD8FD0
	0x03BD8FBC ADRP X0, 0x585000
	0x03BD8FC0 LDR X0, [X0 + 0xD50]
	0x03BD8FC4 BL 0x1C16CF4
	0x03BD8FC8 MOVZ W8, 0x1
	0x03BD8FCC STRB W8, [X23 + 0xEC9]
	0x03BD8FD0 LDR X0, [X21]
	0x03BD8FD4 LDR W8, [X0 + 0xE0]
	0x03BD8FD8 CBNZ W8, 0x3BD8FE4

ISIL:
	001 Move [X31-80], D15
	002 Move [X31-72], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move V8, V7
	011 Move V9, V6
	012 Move V10, V5
	013 Move V11, V4
	014 Move V12, V3
	015 Move V13, V2
	016 Move V14, V1
	017 Move V15, V0
	018 Call Float4TweenJob.IsNearlyEqual, X0, X1, X2
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {36}
	023 Move V0, [X31+80]
	024 Subtract S1, S11, S15
	025 Subtract S2, S10, S14
	026 Subtract S3, S9, S13
	027 Subtract S4, S8, S12
	028 Multiply S1, S1, S0
	029 Multiply S2, S2, S0
	030 Multiply S3, S3, S0
	031 Multiply S0, S4, S0
	032 Add S11, S15, S1
	033 Add S10, S14, S2
	034 Add S9, S13, S3
	035 Add S8, S12, S0
	036 Move V0, V11
	037 Move V1, V10
	038 Move V2, V9
	039 Move V3, V8
	040 Move X30, [X31+64]
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]
	043 Move D11, [X31+32]
	044 Move D10, [X31+40]
	045 Move D13, [X31+16]
	046 Move D12, [X31+24]
	047 Move D15, [X31+80]
	048 Move D14, [X31+88]
	049 Return X0

Method: System.Boolean IsNearlyEqual(Unity.Mathematics.float4 from, Unity.Mathematics.float4 to)

Disassembly:
	0x03BD8FDC BL 0x1C16DFC
	0x03BD8FE0 LDR X0, [X21]
	0x03BD8FE4 LDR X8, [X0 + 0xB8]
	0x03BD8FE8 LDR X8, [X8 + 0x8]
	0x03BD8FEC CBZ X8, 0x3BD9140
	0x03BD8FF0 LDR X0, [X22]
	0x03BD8FF4 LDR X20, [X8 + 0x18]
	0x03BD8FF8 LDR W9, [X0 + 0xE0]
	0x03BD8FFC CBNZ W9, 0x3BD9004
	0x03BD9000 BL 0x1C16DFC
	0x03BD9004 MOV X0, X20
	0x03BD9008 MOV X1, X31
	0x03BD900C MOV X2, X31
	0x03BD9010 BL 0x3C3883C
	0x03BD9014 TBNZ X0, 0x0, 0x3BD9130
	0x03BD9018 LDR X0, [X21]

ISIL:
	001 Subtract S0, S4, S0
	002 Subtract S1, S5, S1
	003 Move X8, -51302400
	004 Subtract S2, S6, S2
	005 Multiply S0, S0, S0
	006 Multiply S1, S1, S1
	007 Move V4, [X8+376]
	008 Subtract S3, S7, S3
	009 Multiply S2, S2, S2
	010 Add S0, S0, S1
	011 Add S0, S2, S0
	012 Multiply S1, S3, S3
	013 Add S0, S1, S0
	014 NotImplemented "Instruction FCMP not yet implemented."
	015 NotImplemented "Instruction CSET not yet implemented."
	016 Return X0

