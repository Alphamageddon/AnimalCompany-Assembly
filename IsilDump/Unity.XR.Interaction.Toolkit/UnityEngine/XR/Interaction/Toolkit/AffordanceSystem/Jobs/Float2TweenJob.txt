Type: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Jobs.Float2TweenJob

Method: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Jobs.TweenJobData`1<Unity.Mathematics.float2> get_jobData()

Disassembly:
	0x03BD889C MOVZ W2, 0x60
	0x03BD88A0 MOV X0, X8
	0x03BD88A4 B 0x3EB1AC0
	0x03BD88A8 MOV X1, X0

ISIL:
	001 Move X1, X0
	002 Move W2, 88
	003 Move X0, X8
	004 Call 0x3EB2AC0
	005 Return X0

Method: System.Void set_jobData(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Jobs.TweenJobData`1<Unity.Mathematics.float2> value)

Disassembly:
	0x03BD88AC MOVZ W2, 0x78
	0x03BD88B0 MOV X0, X8
	0x03BD88B4 B 0x3EB1AC0
	0x03BD88B8 STP X30, X23, [X31 - 0x30]!
	0x03BD88BC STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move W2, 88
	003 Call 0x3EB2B30
	004 Move X30, [X31+16]
	005 Return 

Method: System.Void Execute()

Disassembly:
	0x03BD88C0 STP X20, X19, [X31 + 0x20]
	0x03BD88C4 ADRP X23, 0x80A000
	0x03BD88C8 ADRP X22, 0x51B000
	0x03BD88CC ADRP X20, 0x585000
	0x03BD88D0 ADRP X21, 0x585000
	0x03BD88D4 MOV X19, X8
	0x03BD88D8 LDRB W8, [X23 + 0xEAC]
	0x03BD88DC LDR X22, [X22 + 0x618]
	0x03BD88E0 LDR X20, [X20 + 0xD40]
	0x03BD88E4 LDR X21, [X21 + 0xD48]
	0x03BD88E8 TBNZ X8, 0x0, 0x3BD8918
	0x03BD88EC ADRP X0, 0x51B000
	0x03BD88F0 LDR X0, [X0 + 0x618]
	0x03BD88F4 BL 0x1C16CF4
	0x03BD88F8 ADRP X0, 0x585000
	0x03BD88FC LDR X0, [X0 + 0xD48]
	0x03BD8900 BL 0x1C16CF4
	0x03BD8904 ADRP X0, 0x585000
	0x03BD8908 LDR X0, [X0 + 0xD40]
	0x03BD890C BL 0x1C16CF4
	0x03BD8910 MOVZ W8, 0x1
	0x03BD8914 STRB W8, [X23 + 0xEAC]
	0x03BD8918 LDR X0, [X22]
	0x03BD891C MOVZ W1, 0x20A
	0x03BD8920 BL 0x1C16D6C
	0x03BD8924 LDR X1, [X20]
	0x03BD8928 MOV X2, X31
	0x03BD892C MOV X20, X0
	0x03BD8930 BL 0x32C5BD8
	0x03BD8934 LDR X0, [X22]
	0x03BD8938 MOVZ W1, 0x162
	0x03BD893C BL 0x1C16D6C
	0x03BD8940 LDR X1, [X21]
	0x03BD8944 MOV X2, X31
	0x03BD8948 MOV X21, X0
	0x03BD894C BL 0x32C5BD8
	0x03BD8950 ADRP X8, 0xFFFFFFFFFCF15000
	0x03BD8954 LDR V0, [X8 + 0xF50]
	0x03BD8958 STP X20, X21, [X19]
	0x03BD895C STRB W31, [X19 + 0x18]
	0x03BD8960 STUR W31, [X19 + 0x19]
	0x03BD8964 STR D0, [X19 + 0x10]
	0x03BD8968 STR W31, [X19 + 0x1C]
	0x03BD896C LDP X20, X19, [X31 + 0x20]
	0x03BD8970 LDP X22, X21, [X31 + 0x10]
	0x03BD8974 LDP X30, X23, [X31], #0x30
	0x03BD8978 RET
	0x03BD897C MOV X1, X31
	0x03BD8980 B 0x33BDD8C
	0x03BD8984 LDR X0, [X0 + 0x10]
	0x03BD8988 RET
	0x03BD898C STR X1, [X0 + 0x10]
	0x03BD8990 RET
	0x03BD8994 LDR X0, [X0 + 0x18]
	0x03BD8998 RET
	0x03BD899C STR X1, [X0 + 0x18]
	0x03BD89A0 RET
	0x03BD89A4 MOV X1, X31
	0x03BD89A8 B 0x33A51F0
	0x03BD89AC STP X30, X21, [X31 - 0x20]!
	0x03BD89B0 STP X20, X19, [X31 + 0x10]
	0x03BD89B4 MOV X20, X1
	0x03BD89B8 MOV X1, X31
	0x03BD89BC MOV X19, X2
	0x03BD89C0 MOV X21, X0
	0x03BD89C4 BL 0x33A51F0
	0x03BD89C8 STP X20, X19, [X21 + 0x10]
	0x03BD89CC LDP X20, X19, [X31 + 0x10]
	0x03BD89D0 LDP X30, X21, [X31], #0x20
	0x03BD89D4 RET
	0x03BD89D8 LDR X0, [X0 + 0x18]
	0x03BD89DC RET
	0x03BD89E0 STR X1, [X0 + 0x18]
	0x03BD89E4 RET
	0x03BD89E8 STR X30, [X31 - 0x20]!
	0x03BD89EC STP X20, X19, [X31 + 0x10]
	0x03BD89F0 ADRP X20, 0x80A000
	0x03BD89F4 ADRP X19, 0x585000
	0x03BD89F8 LDRB W8, [X20 + 0xEAE]
	0x03BD89FC LDR X19, [X19 + 0xD50]
	0x03BD8A00 TBNZ X8, 0x0, 0x3BD8A18
	0x03BD8A04 ADRP X0, 0x585000
	0x03BD8A08 LDR X0, [X0 + 0xD50]
	0x03BD8A0C BL 0x1C16CF4
	0x03BD8A10 MOVZ W8, 0x1
	0x03BD8A14 STRB W8, [X20 + 0xEAE]
	0x03BD8A18 LDR X0, [X19]
	0x03BD8A1C LDR W8, [X0 + 0xE0]
	0x03BD8A20 CBNZ W8, 0x3BD8A2C
	0x03BD8A24 BL 0x1C16DFC
	0x03BD8A28 LDR X0, [X19]
	0x03BD8A2C LDR X8, [X0 + 0xB8]
	0x03BD8A30 LDP X20, X19, [X31 + 0x10]
	0x03BD8A34 LDR X0, [X8 + 0x8]
	0x03BD8A38 LDR X30, [X31], #0x20
	0x03BD8A3C RET
	0x03BD8A40 LDR X0, [X0 + 0x18]
	0x03BD8A44 RET

ISIL:
	001 Subtract X31, X31, 368
	002 Move [X31+288], D11
	003 Move [X31+296], D10
	004 Move [X31+304], D9
	005 Move [X31+312], D8
	006 Move [X31+320], X29
	007 Move [X31+328], X30
	008 Move [X31+336], X22
	009 Move [X31+344], X21
	010 Move [X31+352], X20
	011 Move [X31+360], X19
	012 Move X20, 0x80B000
	013 Move X21, 0x586000
	014 Move W8, [X20+3747]
	015 Move X21, [X21+3368]
	016 Move X19, X0
	017 Add X22, X31, 96
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x586000
	023 Move X0, [X0+3368]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3747], W8
	027 Add X8, X31, 192
	028 NotImplemented "Instruction MOVI not yet implemented."
	029 Add X20, X8, 32
	030 Add X8, X31, 8
	031 Move X0, X19
	032 Move X1, X31
	033 Move [X31+272], X31
	034 Move [X31+176], X31
	035 Move [X22+144], V0
	036 Move [X22+152], V0
	037 Move [X22+112], V0
	038 Move [X22+120], V0
	039 Move [X22+6], V0
	040 Move [X22+48], V0
	041 Move [X22+56], V0
	042 Move [X31+112], V0
	043 Move [X31+120], V0
	044 Move [X31+6], V0
	045 Call 0x3BD9888
	046 Add X0, X31, 192
	047 Add X1, X31, 8
	048 Move W2, 88
	049 Call 0x3EB2AC0
	050 Add X8, X31, 8
	051 Move X0, X19
	052 Move X1, X31
	053 Call 0x3BD9888
	054 Add X0, X31, 96
	055 Add X1, X31, 8
	056 Move W2, 88
	057 Call 0x3EB2AC0
	058 Move X1, [X21]
	059 Add X0, X31, 96
	060 Call TweenJobData`1<float2>.get_stateTransitionAmountFloat, X0
	061 Move X0, X20
	062 Move X1, X31
	063 Call NativeCurve.Evaluate, X0, V0
	064 Add X8, X31, 8
	065 Move X0, X19
	066 Move X1, X31
	067 Move V8, V0
	068 Call 0x3BD9888
	069 Move S9, [X31+16]
	070 Move S10, [X31+20]
	071 Add X8, X31, 8
	072 Move X0, X19
	073 Move X1, X31
	074 Call 0x3BD9888
	075 Move S2, [X31+24]
	076 Move S3, [X31+28]
	077 Move X0, X19
	078 Move V0, V9
	079 Move V1, V10
	080 Move V4, V8
	081 Call Float2TweenJob.Lerp, X0, X1, X2, V0
	082 Add X8, X31, 8
	083 Move X0, X19
	084 Move X1, X31
	085 Move V8, V0
	086 Move V9, V1
	087 Call 0x3BD9888
	088 Move X20, [X31+80]
	089 Add X8, X31, 8
	090 Move X0, X19
	091 Move X1, X31
	092 Call 0x3BD9888
	093 Move S10, [X31+64]
	094 Move S11, [X31+68]
	095 Add X8, X31, 8
	096 Move X0, X19
	097 Move X1, X31
	098 Call 0x3BD9888
	099 Move V4, [X31+72]
	100 Move X0, X19
	101 Move V0, V10
	102 Move V1, V11
	103 Move V2, V8
	104 Move V3, V9
	105 Call Float2TweenJob.Lerp, X0, X1, X2, V0
	106 Move [X20], S0
	107 Move [X20+8], S1
	108 Move X20, [X31+352]
	109 Move X19, [X31+360]
	110 Move X22, [X31+336]
	111 Move X21, [X31+344]
	112 Move X29, [X31+320]
	113 Move X30, [X31+328]
	114 Move D9, [X31+304]
	115 Move D8, [X31+312]
	116 Move D11, [X31+288]
	117 Move D10, [X31+296]
	118 Add X31, X31, 368
	119 Return 

Method: Unity.Mathematics.float2 Lerp(Unity.Mathematics.float2 from, Unity.Mathematics.float2 to, System.Single t)

Disassembly:
	0x03BD8A48 LDRB W0, [X0 + 0x20]
	0x03BD8A4C RET
	0x03BD8A50 STP X30, X23, [X31 - 0x30]!
	0x03BD8A54 STP X22, X21, [X31 + 0x10]
	0x03BD8A58 STP X20, X19, [X31 + 0x20]
	0x03BD8A5C ADRP X21, 0x80A000
	0x03BD8A60 ADRP X20, 0x51B000
	0x03BD8A64 LDRB W8, [X21 + 0xEAF]
	0x03BD8A68 LDR X20, [X20 + 0xA28]
	0x03BD8A6C MOV X19, X0
	0x03BD8A70 TBNZ X8, 0x0, 0x3BD8AD0
	0x03BD8A74 ADRP X0, 0x51C000
	0x03BD8A78 LDR X0, [X0 + 0xE70]
	0x03BD8A7C BL 0x1C16CF4
	0x03BD8A80 ADRP X0, 0x51B000
	0x03BD8A84 LDR X0, [X0 + 0x970]
	0x03BD8A88 BL 0x1C16CF4
	0x03BD8A8C ADRP X0, 0x51B000
	0x03BD8A90 LDR X0, [X0 + 0xA28]
	0x03BD8A94 BL 0x1C16CF4
	0x03BD8A98 ADRP X0, 0x51B000
	0x03BD8A9C LDR X0, [X0 + 0x598]
	0x03BD8AA0 BL 0x1C16CF4
	0x03BD8AA4 ADRP X0, 0x585000

ISIL:
	001 Move [X31-48], D12
	002 Move [X31+8], D11
	003 Move [X31+16], D10
	004 Move [X31+24], D9
	005 Move [X31+32], D8
	006 Move [X31+40], X30
	007 Move V10, V4
	008 Move V8, V3
	009 Move V9, V2
	010 Move V11, V1
	011 Move V12, V0
	012 Call Float2TweenJob.IsNearlyEqual, X0, X1, X2
	013 Move TEMP, X0
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {23}
	017 Subtract S0, S9, S12
	018 Subtract S1, S8, S11
	019 Multiply S0, S0, S10
	020 Multiply S1, S1, S10
	021 Add S9, S12, S0
	022 Add S8, S11, S1
	023 Move V0, V9
	024 Move V1, V8
	025 Move X30, [X31+40]
	026 Move D9, [X31+24]
	027 Move D8, [X31+32]
	028 Move D11, [X31+8]
	029 Move D10, [X31+16]
	030 Move V12, [X31+48]
	031 Return X0

Method: System.Boolean IsNearlyEqual(Unity.Mathematics.float2 from, Unity.Mathematics.float2 to)

Disassembly:
	0x03BD8AA8 LDR X0, [X0 + 0xD58]
	0x03BD8AAC BL 0x1C16CF4
	0x03BD8AB0 ADRP X0, 0x585000
	0x03BD8AB4 LDR X0, [X0 + 0xD50]
	0x03BD8AB8 BL 0x1C16CF4
	0x03BD8ABC ADRP X0, 0x585000
	0x03BD8AC0 LDR X0, [X0 + 0xD60]
	0x03BD8AC4 BL 0x1C16CF4
	0x03BD8AC8 MOVZ W8, 0x1
	0x03BD8ACC STRB W8, [X21 + 0xEAF]

ISIL:
	001 Move X8, -51302400
	002 Subtract S0, S2, S0
	003 Move V2, [X8+376]
	004 Subtract S1, S3, S1
	005 Multiply S0, S0, S0
	006 Multiply S1, S1, S1
	007 Add S0, S0, S1
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 NotImplemented "Instruction CSET not yet implemented."
	010 Return X0

