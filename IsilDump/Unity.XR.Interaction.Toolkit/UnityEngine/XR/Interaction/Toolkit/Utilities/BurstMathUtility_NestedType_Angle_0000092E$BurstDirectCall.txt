Type: UnityEngine.XR.Interaction.Toolkit.Utilities.BurstMathUtility/Angle_0000092E$BurstDirectCall

Method: System.Void GetFunctionPointerDiscard(ref System.IntPtr param_0)

Disassembly:
	0x03B8B74C ADRP X8, 0x590000
	0x03B8B750 LDR X20, [X9 + 0x8]
	0x03B8B754 LDR X8, [X8 + 0x848]
	0x03B8B758 LDR X0, [X8]
	0x03B8B75C ADRP X8, 0x5D1000
	0x03B8B760 LDR X8, [X8 + 0x228]
	0x03B8B764 LDR X21, [X8]
	0x03B8B768 ADRP X8, 0x5D1000
	0x03B8B76C LDR X8, [X8 + 0x230]
	0x03B8B770 LDR W9, [X0 + 0xE0]
	0x03B8B774 LDR X22, [X8]
	0x03B8B778 CBNZ W9, 0x3B8B780
	0x03B8B77C BL 0x1C16DFC
	0x03B8B780 MOV X0, X20
	0x03B8B784 MOV X1, X21
	0x03B8B788 MOV X2, X22
	0x03B8B78C MOV X3, X31
	0x03B8B790 BL 0x36FAD70
	0x03B8B794 LDR X8, [X23]
	0x03B8B798 LDR X9, [X8 + 0xB8]
	0x03B8B79C STR X0, [X9]
	0x03B8B7A0 LDR W9, [X8 + 0xE0]
	0x03B8B7A4 CBNZ W9, 0x3B8B7B4
	0x03B8B7A8 MOV X0, X8
	0x03B8B7AC BL 0x1C16DFC
	0x03B8B7B0 LDR X8, [X23]
	0x03B8B7B4 LDR X8, [X8 + 0xB8]
	0x03B8B7B8 LDP X22, X21, [X31 + 0x10]
	0x03B8B7BC LDR X8, [X8]
	0x03B8B7C0 STR X8, [X19]
	0x03B8B7C4 LDP X20, X19, [X31 + 0x20]
	0x03B8B7C8 LDP X30, X23, [X31], #0x30
	0x03B8B7CC RET
	0x03B8B7D0 STR X30, [X31 - 0x20]!
	0x03B8B7D4 STP X20, X19, [X31 + 0x10]
	0x03B8B7D8 ADRP X20, 0x857000
	0x03B8B7DC ADRP X19, 0x5D1000
	0x03B8B7E0 LDRB W8, [X20 + 0xB4C]
	0x03B8B7E4 LDR X19, [X19 + 0xE8]
	0x03B8B7E8 TBNZ X8, 0x0, 0x3B8B800
	0x03B8B7EC ADRP X0, 0x5D1000
	0x03B8B7F0 LDR X0, [X0 + 0xE8]
	0x03B8B7F4 BL 0x1C16CF4
	0x03B8B7F8 MOVZ W8, 0x1
	0x03B8B7FC STRB W8, [X20 + 0xB4C]
	0x03B8B800 LDR X0, [X19]
	0x03B8B804 STR X31, [X31 + 0x8]
	0x03B8B808 LDR W8, [X0 + 0xE0]
	0x03B8B80C CBNZ W8, 0x3B8B814
	0x03B8B810 BL 0x1C16DFC
	0x03B8B814 ADD X0, X31, 0x8
	0x03B8B818 BL 0x3B8B6B4
	0x03B8B81C LDR X0, [X31 + 0x8]
	0x03B8B820 LDP X20, X19, [X31 + 0x10]
	0x03B8B824 LDR X30, [X31], #0x20
	0x03B8B828 RET
	0x03B8B82C STP X30, X21, [X31 - 0x20]!
	0x03B8B830 STP X20, X19, [X31 + 0x10]
	0x03B8B834 ADRP X21, 0x857000
	0x03B8B838 ADRP X19, 0x5D1000
	0x03B8B83C ADRP X20, 0x590000
	0x03B8B840 LDRB W8, [X21 + 0xB4D]
	0x03B8B844 LDR X19, [X19 + 0x238]
	0x03B8B848 LDR X20, [X20 + 0x848]
	0x03B8B84C TBNZ X8, 0x0, 0x3B8B87C
	0x03B8B850 ADRP X0, 0x590000
	0x03B8B854 LDR X0, [X0 + 0x848]
	0x03B8B858 BL 0x1C16CF4
	0x03B8B85C ADRP X0, 0x5D1000
	0x03B8B860 LDR X0, [X0 + 0x238]
	0x03B8B864 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x858000
	008 Move X23, 0x5D2000
	009 Move W8, [X20+2871]
	010 Move X23, [X23+200]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x5D2000
	017 Move X0, [X0+200]
	018 Call 0x1C17CF4
	019 Move X0, 0x5D2000
	020 Move X0, [X0+456]
	021 Call 0x1C17CF4
	022 Move X0, 0x591000
	023 Move X0, [X0+2120]
	024 Call 0x1C17CF4
	025 Move X0, 0x5D2000
	026 Move X0, [X0+464]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2871], W8
	030 Move X8, [X23]
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X23]
	037 Move X9, [X8+184]
	038 Move X10, [X9]
	039 Compare X10, 0
	040 JumpIfNotEqual {70}
	041 Move W10, [X8+224]
	042 Compare W10, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X23]
	047 Move X9, [X8+184]
	048 Move X8, 0x591000
	049 Move X20, [X9+8]
	050 Move X8, [X8+2120]
	051 Move X0, [X8]
	052 Move X8, 0x5D2000
	053 Move X8, [X8+464]
	054 Move X21, [X8]
	055 Move X8, 0x5D2000
	056 Move X8, [X8+456]
	057 Move W9, [X0+224]
	058 Move X22, [X8]
	059 Compare W9, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X22
	065 Move X3, X31
	066 Call BurstCompiler.GetILPPMethodFunctionPointer2, X0, X1, X2
	067 Move X8, [X23]
	068 Move X9, [X8+184]
	069 Move [X9], X0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {76}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, [X23]
	076 Move X8, [X8+184]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X8, [X8]
	080 Move [X19], X8
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 

Method: System.IntPtr GetFunctionPointer()

Disassembly:
	0x03B8B868 ADRP X0, 0x5D1000
	0x03B8B86C LDR X0, [X0 + 0xE8]
	0x03B8B870 BL 0x1C16CF4
	0x03B8B874 MOVZ W8, 0x1
	0x03B8B878 STRB W8, [X21 + 0xB4D]
	0x03B8B87C LDR X0, [X20]
	0x03B8B880 ADRP X20, 0x5D1000
	0x03B8B884 LDR X19, [X19]
	0x03B8B888 LDR W8, [X0 + 0xE0]
	0x03B8B88C LDR X20, [X20 + 0xE8]
	0x03B8B890 CBNZ W8, 0x3B8B898
	0x03B8B894 BL 0x1C16DFC
	0x03B8B898 MOV X0, X19
	0x03B8B89C MOV X1, X31
	0x03B8B8A0 BL 0x36FA754
	0x03B8B8A4 LDR X8, [X20]
	0x03B8B8A8 MOV X19, X0
	0x03B8B8AC LDR W9, [X8 + 0xE0]
	0x03B8B8B0 CBNZ W9, 0x3B8B8C0
	0x03B8B8B4 MOV X0, X8
	0x03B8B8B8 BL 0x1C16DFC
	0x03B8B8BC LDR X8, [X20]
	0x03B8B8C0 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x858000
	005 Move X19, 0x5D2000
	006 Move W8, [X20+2872]
	007 Move X19, [X19+200]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5D2000
	013 Move X0, [X0+200]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2872], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 8
	024 Call Angle_0000092E$BurstDirectCall.GetFunctionPointerDiscard, X0
	025 Move X0, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void Constructor()

Disassembly:
	0x03B8B8C4 STR X19, [X8 + 0x8]
	0x03B8B8C8 LDP X20, X19, [X31 + 0x10]
	0x03B8B8CC LDP X30, X21, [X31], #0x20
	0x03B8B8D0 RET
	0x03B8B8D4 RET
	0x03B8B8D8 B 0x3B8B82C
	0x03B8B8DC STP X30, X21, [X31 - 0x20]!
	0x03B8B8E0 STP X20, X19, [X31 + 0x10]
	0x03B8B8E4 LDR X8, [X2 + 0x8]
	0x03B8B8E8 STP X1, X2, [X0 + 0x20]
	0x03B8B8EC MOV X19, X0
	0x03B8B8F0 MOV X20, X1
	0x03B8B8F4 STR X8, [X0 + 0x10]
	0x03B8B8F8 LDRB W21, [X2 + 0x52]
	0x03B8B8FC STR X0, [X0 + 0x40]
	0x03B8B900 MOV X0, X2
	0x03B8B904 BL 0x1C16D84
	0x03B8B908 TBZ X0, 0x0, 0x3B8B920
	0x03B8B90C CMP W21, 0x3
	0x03B8B910 B.NE 0x3B8B93C
	0x03B8B914 ADRP X8, 0xFFFFFFFFFE073000
	0x03B8B918 ADD X8, X8, 0x758
	0x03B8B91C B 0x3B8B930
	0x03B8B920 CMP W21, 0x2
	0x03B8B924 B.NE 0x3B8B938
	0x03B8B928 ADRP X8, 0xFFFFFFFFFE073000
	0x03B8B92C ADD X8, X8, 0x740
	0x03B8B930 STR X8, [X19 + 0x18]
	0x03B8B934 B 0x3B8B94C
	0x03B8B938 CBZ X20, 0x3B8B964
	0x03B8B93C LDR X8, [X19 + 0x10]
	0x03B8B940 LDR X9, [X19 + 0x20]
	0x03B8B944 STR X8, [X19 + 0x18]
	0x03B8B948 STR X9, [X19 + 0x40]
	0x03B8B94C ADRP X8, 0xFFFFFFFFFE073000
	0x03B8B950 ADD X8, X8, 0x6E0
	0x03B8B954 STR X8, [X19 + 0x38]
	0x03B8B958 LDP X20, X19, [X31 + 0x10]
	0x03B8B95C LDP X30, X21, [X31], #0x20
	0x03B8B960 RET
	0x03B8B964 ADRP X1, 0xFFFFFFFFFCF90000
	0x03B8B968 ADD X1, X1, 0xEE3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x858000
	006 Move X19, 0x5D2000
	007 Move X20, 0x591000
	008 Move W8, [X21+2873]
	009 Move X19, [X19+472]
	010 Move X20, [X20+2120]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x5D2000
	016 Move X0, [X0+200]
	017 Call 0x1C17CF4
	018 Move X0, 0x591000
	019 Move X0, [X0+2120]
	020 Call 0x1C17CF4
	021 Move X0, 0x5D2000
	022 Move X0, [X0+472]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2873], W8
	026 Move X0, [X20]
	027 Move X20, 0x5D2000
	028 Move X19, [X19]
	029 Move W8, [X0+224]
	030 Move X20, [X20+200]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call BurstCompiler.CompileILPPMethod2, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move [X8+8], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void Initialize()

Disassembly:
	0x03B8B96C MOV X0, X31

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B8B970 BL 0x1C16F3C

ISIL:
	001 Call Angle_0000092E$BurstDirectCall.Constructor
	002 Return 

Method: System.Void Invoke(in Unity.Mathematics.quaternion a, in Unity.Mathematics.quaternion b, out System.Single angle)

Disassembly:
	0x03B88514 FADD V0.2S, V1.2S, V0.2S
	0x03B88518 FADD V0.2S, V3.2S, V0.2S
	0x03B8851C LDR V1, [X8 + 0x1B4]
	0x03B88520 FMOV W8, S0
	0x03B88524 AND W8, W8, 0x7FFFFFFF
	0x03B88528 FMOV S0, 1
	0x03B8852C FMOV S2, W8
	0x03B88530 FMINNM S8, S2, S0
	0x03B88534 FCMP S8, S1
	0x03B88538 FMOV S0, W31
	0x03B8853C B.GT 0x3B88594
	0x03B88540 ADRP X20, 0x859000
	0x03B88544 LDRB W8, [X20 + 0x568]
	0x03B88548 CBNZ W8, 0x3B88560
	0x03B8854C ADRP X0, 0x56B000
	0x03B88550 LDR X0, [X0 + 0x5A8]
	0x03B88554 BL 0x1C16CF4
	0x03B88558 MOVZ W8, 0x1
	0x03B8855C STRB W8, [X20 + 0x568]
	0x03B88560 ADRP X8, 0x56B000
	0x03B88564 LDR X8, [X8 + 0x5A8]
	0x03B88568 LDR X0, [X8]
	0x03B8856C LDR W8, [X0 + 0xE0]
	0x03B88570 CBNZ W8, 0x3B88578
	0x03B88574 BL 0x1C16DFC
	0x03B88578 FCVT S0, S8
	0x03B8857C BL 0x3EB1B80
	0x03B88580 ADRP X8, 0xFFFFFFFFFCF62000
	0x03B88584 LDR V1, [X8 + 0x448]
	0x00000000 INVALID
	0x03B8858C FADD S0, S0, S0
	0x03B88590 FMUL S0, S0, S1
	0x03B88594 STR S0, [X19]
	0x03B88598 LDP X20, X19, [X31 + 0x10]
	0x03B8859C LDR X30, [X31 + 0x8]
	0x03B885A0 LDR V8, [X31], #0x20
	0x03B885A4 RET
	0x03B885A8 LDR V1, [X0]
	0x03B885AC LDR V2, [X1]
	0x03B885B0 FABD S1, S1, S1
	0x03B885B4 FCMP S1, S0
	0x03B885B8 B.PL 0x3B885E8
	0x03B885BC LDR V1, [X0 + 0x4]
	0x03B885C0 LDR V2, [X1 + 0x4]
	0x03B885C4 FABD S1, S1, S1
	0x03B885C8 FCMP S1, S0
	0x03B885CC B.PL 0x3B885E8
	0x03B885D0 LDR V1, [X0 + 0x8]
	0x03B885D4 LDR V2, [X1 + 0x8]
	0x03B885D8 FABD S1, S1, S1
	0x03B885DC FCMP S1, S0
	0x03B885E0 CSET W0, MI
	0x03B885E4 RET
	0x03B885E8 MOV W0, W31
	0x03B885EC RET
	0x03B885F0 LDR V1, [X0]
	0x03B885F4 LDR V2, [X1]
	0x03B885F8 FABD S1, S1, S1
	0x03B885FC FCMP S1, S0
	0x03B88600 B.PL 0x3B88630
	0x03B88604 LDR V1, [X0 + 0x4]
	0x03B88608 LDR V2, [X1 + 0x4]
	0x03B8860C FABD S1, S1, S1
	0x03B88610 FCMP S1, S0
	0x03B88614 B.PL 0x3B88630
	0x03B88618 LDR V1, [X0 + 0x8]
	0x03B8861C LDR V2, [X1 + 0x8]
	0x03B88620 FABD S1, S1, S1
	0x03B88624 FCMP S1, S0
	0x03B88628 CSET W0, MI
	0x03B8862C RET
	0x03B88630 MOV W0, W31
	0x03B88634 RET
	0x03B88638 SUB X31, X31, 0x50
	0x03B8863C STR D8, [X31 + 0x30]
	0x03B88640 STR X30, [X31 + 0x38]
	0x03B88644 STP X20, X19, [X31 + 0x40]
	0x03B88648 STR W31, [X31 + 0x28]
	0x03B8864C STR X31, [X31 + 0x20]
	0x03B88650 MOV V8.16B, V0.16B
	0x03B88654 LDP S0, S1, [X0]
	0x03B88658 LDR V2, [X0 + 0x8]
	0x03B8865C MOV X0, X31
	0x03B88660 MOV X19, X2
	0x03B88664 MOV X20, X1
	0x03B88668 BL 0x3887BE4
	0x03B8866C STP S0, S1, [X31 + 0x10]
	0x03B88670 STR S2, [X31 + 0x18]
	0x03B88674 LDP S0, S1, [X20]
	0x03B88678 LDR V2, [X20 + 0x8]

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x85B000
	009 Move X23, 0x594000
	010 Move W8, [X22+2874]
	011 Move X23, [X23+2120]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x5D5000
	020 Move X0, [X0+200]
	021 Call 0x1C17CF4
	022 Move X0, 0x594000
	023 Move X0, [X0+2120]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+2874], W8
	027 Move X0, [X23]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X31
	033 Call BurstCompiler.get_IsEnabled
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {60}
	038 Move X8, 0x5D5000
	039 Move X8, [X8+200]
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Call Angle_0000092E$BurstDirectCall.GetFunctionPointer
	046 Compare X0, 0
	047 JumpIfEqual {60}
	048 Move X3, X0
	049 Move X0, X21
	050 Move X1, X20
	051 Move X2, X19
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X22, [X31+32]
	055 Move X21, [X31+40]
	056 Move X30, [X31+16]
	057 Move X23, [X31+24]
	058 Move V8, [X31+64]
	059 CallNoReturn X3
	060 Move D0, [X21]
	061 Move D1, [X21+8]
	062 Move D2, [X20]
	063 Move D3, [X20+8]
	064 Move X8, -50974720
	065 NotImplemented "Instruction INVALID not yet implemented."
	066 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	067 NotImplemented "Instruction INVALID not yet implemented."
	068 Add V0, V0, V2
	069 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	070 Add V0, V1, V0
	071 Add V0, V3, V0
	072 Move V1, [X8+436]
	073 Move W8, S0
	074 And W8, W8, 0x7FFFFFFF
	075 Move S0, 1
	076 Move S2, W8
	077 NotImplemented "Instruction FMINNM not yet implemented."
	078 NotImplemented "Instruction FCMP not yet implemented."
	079 Move S0, W31
	080 Move X20, 0x85A000
	081 Move W8, [X20+1384]
	082 Compare W8, 0
	083 JumpIfNotEqual {89}
	084 Move X0, 0x56C000
	085 Move X0, [X0+1448]
	086 Call 0x1C17CF4
	087 Move W8, 1
	088 Move [X20+1384], W8
	089 Move X8, 0x56C000
	090 Move X8, [X8+1448]
	091 Move X0, [X8]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 NotImplemented "Instruction FCVT not yet implemented."
	097 Call 0x3EB2B80
	098 Move X8, -50974720
	099 Move V1, [X8+1096]
	100 NotImplemented "Instruction INVALID not yet implemented."
	101 Add S0, S0, S0
	102 Multiply S0, S0, S1
	103 Move [X19], S0
	104 Move X20, [X31+48]
	105 Move X19, [X31+56]
	106 Move X22, [X31+32]
	107 Move X21, [X31+40]
	108 Move X30, [X31+16]
	109 Move X23, [X31+24]
	110 Move V8, [X31+64]
	111 Return 

