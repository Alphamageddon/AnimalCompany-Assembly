Type: UnityEngine.XR.Interaction.Toolkit.Utilities.BurstMathUtility/Scale_00000934$BurstDirectCall

Method: System.Void GetFunctionPointerDiscard(ref System.IntPtr param_0)

Disassembly:
	0x03B8CE0C LDR X8, [X8 + 0x2A8]
	0x03B8CE10 LDR W9, [X0 + 0xE0]
	0x03B8CE14 LDR X22, [X8]
	0x03B8CE18 CBNZ W9, 0x3B8CE20
	0x03B8CE1C BL 0x1C16DFC
	0x03B8CE20 MOV X0, X20
	0x03B8CE24 MOV X1, X21
	0x03B8CE28 MOV X2, X22
	0x03B8CE2C MOV X3, X31
	0x03B8CE30 BL 0x36FAD70
	0x03B8CE34 LDR X8, [X23]
	0x03B8CE38 LDR X9, [X8 + 0xB8]
	0x03B8CE3C STR X0, [X9]
	0x03B8CE40 LDR W9, [X8 + 0xE0]
	0x03B8CE44 CBNZ W9, 0x3B8CE54
	0x03B8CE48 MOV X0, X8
	0x03B8CE4C BL 0x1C16DFC
	0x03B8CE50 LDR X8, [X23]
	0x03B8CE54 LDR X8, [X8 + 0xB8]
	0x03B8CE58 LDP X22, X21, [X31 + 0x10]
	0x03B8CE5C LDR X8, [X8]
	0x03B8CE60 STR X8, [X19]
	0x03B8CE64 LDP X20, X19, [X31 + 0x20]
	0x03B8CE68 LDP X30, X23, [X31], #0x30
	0x03B8CE6C RET
	0x03B8CE70 STR X30, [X31 - 0x20]!
	0x03B8CE74 STP X20, X19, [X31 + 0x10]
	0x03B8CE78 ADRP X20, 0x856000
	0x03B8CE7C ADRP X19, 0x5D0000
	0x03B8CE80 LDRB W8, [X20 + 0xB63]
	0x03B8CE84 LDR X19, [X19 + 0x288]
	0x03B8CE88 TBNZ X8, 0x0, 0x3B8CEA0
	0x03B8CE8C ADRP X0, 0x5D0000
	0x03B8CE90 LDR X0, [X0 + 0x288]
	0x03B8CE94 BL 0x1C16CF4
	0x03B8CE98 MOVZ W8, 0x1
	0x03B8CE9C STRB W8, [X20 + 0xB63]
	0x03B8CEA0 LDR X0, [X19]
	0x03B8CEA4 STR X31, [X31 + 0x8]
	0x03B8CEA8 LDR W8, [X0 + 0xE0]
	0x03B8CEAC CBNZ W8, 0x3B8CEB4
	0x03B8CEB0 BL 0x1C16DFC
	0x03B8CEB4 ADD X0, X31, 0x8
	0x03B8CEB8 BL 0x3B8CD54
	0x03B8CEBC LDR X0, [X31 + 0x8]
	0x03B8CEC0 LDP X20, X19, [X31 + 0x10]
	0x03B8CEC4 LDR X30, [X31], #0x20
	0x03B8CEC8 RET
	0x03B8CECC STP X30, X21, [X31 - 0x20]!
	0x03B8CED0 STP X20, X19, [X31 + 0x10]
	0x03B8CED4 ADRP X21, 0x856000
	0x03B8CED8 ADRP X19, 0x5D0000
	0x03B8CEDC ADRP X20, 0x58F000
	0x03B8CEE0 LDRB W8, [X21 + 0xB64]
	0x03B8CEE4 LDR X19, [X19 + 0x2B0]
	0x03B8CEE8 LDR X20, [X20 + 0x848]
	0x03B8CEEC TBNZ X8, 0x0, 0x3B8CF1C
	0x03B8CEF0 ADRP X0, 0x58F000
	0x03B8CEF4 LDR X0, [X0 + 0x848]
	0x03B8CEF8 BL 0x1C16CF4
	0x03B8CEFC ADRP X0, 0x5D0000
	0x03B8CF00 LDR X0, [X0 + 0x2B0]
	0x03B8CF04 BL 0x1C16CF4
	0x03B8CF08 ADRP X0, 0x5D0000
	0x03B8CF0C LDR X0, [X0 + 0x288]
	0x03B8CF10 BL 0x1C16CF4
	0x03B8CF14 MOVZ W8, 0x1
	0x03B8CF18 STRB W8, [X21 + 0xB64]
	0x03B8CF1C LDR X0, [X20]
	0x03B8CF20 ADRP X20, 0x5D0000
	0x03B8CF24 LDR X19, [X19]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x857000
	008 Move X23, 0x5D1000
	009 Move W8, [X20+2901]
	010 Move X23, [X23+248]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x590000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0x5D1000
	020 Move X0, [X0+600]
	021 Call 0x1C17CF4
	022 Move X0, 0x5D1000
	023 Move X0, [X0+248]
	024 Call 0x1C17CF4
	025 Move X0, 0x5D1000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2901], W8
	030 Move X8, [X23]
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X23]
	037 Move X9, [X8+184]
	038 Move X10, [X9]
	039 Compare X10, 0
	040 JumpIfNotEqual {70}
	041 Move W10, [X8+224]
	042 Compare W10, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X23]
	047 Move X9, [X8+184]
	048 Move X8, 0x590000
	049 Move X20, [X9+8]
	050 Move X8, [X8+2120]
	051 Move X0, [X8]
	052 Move X8, 0x5D1000
	053 Move X8, [X8+600]
	054 Move X21, [X8]
	055 Move X8, 0x5D1000
	056 Move X8, [X8+608]
	057 Move W9, [X0+224]
	058 Move X22, [X8]
	059 Compare W9, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X22
	065 Move X3, X31
	066 Call BurstCompiler.GetILPPMethodFunctionPointer2, X0, X1, X2
	067 Move X8, [X23]
	068 Move X9, [X8+184]
	069 Move [X9], X0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {76}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, [X23]
	076 Move X8, [X8+184]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X8, [X8]
	080 Move [X19], X8
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 

Method: System.IntPtr GetFunctionPointer()

Disassembly:
	0x03B8CF28 LDR W8, [X0 + 0xE0]
	0x03B8CF2C LDR X20, [X20 + 0x288]
	0x03B8CF30 CBNZ W8, 0x3B8CF38
	0x03B8CF34 BL 0x1C16DFC
	0x03B8CF38 MOV X0, X19
	0x03B8CF3C MOV X1, X31
	0x03B8CF40 BL 0x36FA754
	0x03B8CF44 LDR X8, [X20]
	0x03B8CF48 MOV X19, X0
	0x03B8CF4C LDR W9, [X8 + 0xE0]
	0x03B8CF50 CBNZ W9, 0x3B8CF60
	0x03B8CF54 MOV X0, X8
	0x03B8CF58 BL 0x1C16DFC
	0x03B8CF5C LDR X8, [X20]
	0x03B8CF60 LDR X8, [X8 + 0xB8]
	0x03B8CF64 STR X19, [X8 + 0x8]
	0x03B8CF68 LDP X20, X19, [X31 + 0x10]
	0x03B8CF6C LDP X30, X21, [X31], #0x20
	0x03B8CF70 RET
	0x03B8CF74 RET
	0x03B8CF78 B 0x3B8CECC
	0x03B8CF7C STP X30, X21, [X31 - 0x20]!
	0x03B8CF80 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x857000
	005 Move X19, 0x5D1000
	006 Move W8, [X20+2902]
	007 Move X19, [X19+248]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5D1000
	013 Move X0, [X0+248]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2902], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 8
	024 Call Scale_00000934$BurstDirectCall.GetFunctionPointerDiscard, X0
	025 Move X0, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void Constructor()

Disassembly:
	0x03B8CF84 LDR X8, [X2 + 0x8]
	0x03B8CF88 STP X1, X2, [X0 + 0x20]
	0x03B8CF8C MOV X19, X0
	0x03B8CF90 MOV X20, X1
	0x03B8CF94 STR X8, [X0 + 0x10]
	0x03B8CF98 LDRB W21, [X2 + 0x52]
	0x03B8CF9C STR X0, [X0 + 0x40]
	0x03B8CFA0 MOV X0, X2
	0x03B8CFA4 BL 0x1C16D84
	0x03B8CFA8 TBZ X0, 0x0, 0x3B8CFC4
	0x03B8CFAC CMP W21, 0x7
	0x03B8CFB0 B.NE 0x3B8CFC8
	0x03B8CFB4 ADRP X8, 0xFFFFFFFFFE072000
	0x03B8CFB8 ADD X8, X8, 0xA24
	0x03B8CFBC STR X8, [X19 + 0x18]
	0x03B8CFC0 B 0x3B8CFD8
	0x03B8CFC4 CBZ X20, 0x3B8CFF0
	0x03B8CFC8 LDR X8, [X19 + 0x10]
	0x03B8CFCC LDR X9, [X19 + 0x20]
	0x03B8CFD0 STR X8, [X19 + 0x18]
	0x03B8CFD4 STR X9, [X19 + 0x40]
	0x03B8CFD8 ADRP X8, 0xFFFFFFFFFE072000
	0x03B8CFDC ADD X8, X8, 0x98C
	0x03B8CFE0 STR X8, [X19 + 0x38]
	0x03B8CFE4 LDP X20, X19, [X31 + 0x10]
	0x03B8CFE8 LDP X30, X21, [X31], #0x20
	0x03B8CFEC RET
	0x03B8CFF0 ADRP X1, 0xFFFFFFFFFCF8F000
	0x03B8CFF4 ADD X1, X1, 0xEE3
	0x03B8CFF8 MOV X0, X31
	0x03B8CFFC BL 0x1C16F3C
	0x03B8D000 MOV X1, X31
	0x03B8D004 BL 0x1C16DEC
	0x03B8D008 LDR X8, [X0 + 0x40]
	0x03B8D00C LDR X6, [X0 + 0x18]
	0x03B8D010 LDR X5, [X0 + 0x28]
	0x03B8D014 MOV X0, X8
	0x03B8D018 BR X6
	0x03B8D01C SUB X31, X31, 0xB0
	0x03B8D020 STR X30, [X31 + 0x50]
	0x03B8D024 STP X28, X27, [X31 + 0x60]
	0x03B8D028 STP X26, X25, [X31 + 0x70]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x857000
	006 Move X19, 0x5D1000
	007 Move X20, 0x590000
	008 Move W8, [X21+2903]
	009 Move X19, [X19+616]
	010 Move X20, [X20+2120]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x590000
	016 Move X0, [X0+2120]
	017 Call 0x1C17CF4
	018 Move X0, 0x5D1000
	019 Move X0, [X0+616]
	020 Call 0x1C17CF4
	021 Move X0, 0x5D1000
	022 Move X0, [X0+248]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2903], W8
	026 Move X0, [X20]
	027 Move X20, 0x5D1000
	028 Move X19, [X19]
	029 Move W8, [X0+224]
	030 Move X20, [X20+248]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call BurstCompiler.CompileILPPMethod2, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move [X8+8], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void Initialize()

Disassembly:
	0x03B8D02C STP X24, X23, [X31 + 0x80]

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B8D030 STP X22, X21, [X31 + 0x90]

ISIL:
	001 Call Scale_00000934$BurstDirectCall.Constructor
	002 Return 

Method: System.Void Invoke(in UnityEngine.Vector3 a, in UnityEngine.Vector3 b, out UnityEngine.Vector3 result)

Disassembly:
	0x03B88E80 LDR X0, [X19]
	0x03B88E84 STR X31, [X31 + 0x8]
	0x03B88E88 LDR W8, [X0 + 0xE0]
	0x03B88E8C CBNZ W8, 0x3B88E94
	0x03B88E90 BL 0x1C16DFC
	0x03B88E94 ADD X0, X31, 0x8
	0x03B88E98 BL 0x3B88D34
	0x03B88E9C LDR X0, [X31 + 0x8]
	0x03B88EA0 LDP X20, X19, [X31 + 0x10]
	0x03B88EA4 LDR X30, [X31], #0x20
	0x03B88EA8 RET
	0x03B88EAC STP X30, X21, [X31 - 0x20]!
	0x03B88EB0 STP X20, X19, [X31 + 0x10]
	0x03B88EB4 ADRP X21, 0x85A000
	0x03B88EB8 ADRP X19, 0x5D4000
	0x03B88EBC ADRP X20, 0x593000
	0x03B88EC0 LDRB W8, [X21 + 0xB16]
	0x03B88EC4 LDR X19, [X19 + 0x130]
	0x03B88EC8 LDR X20, [X20 + 0x848]
	0x03B88ECC TBNZ X8, 0x0, 0x3B88EFC
	0x03B88ED0 ADRP X0, 0x593000
	0x03B88ED4 LDR X0, [X0 + 0x848]
	0x03B88ED8 BL 0x1C16CF4
	0x03B88EDC ADRP X0, 0x5D4000
	0x03B88EE0 LDR X0, [X0 + 0x130]
	0x03B88EE4 BL 0x1C16CF4
	0x03B88EE8 ADRP X0, 0x5D4000
	0x03B88EEC LDR X0, [X0 + 0x90]
	0x03B88EF0 BL 0x1C16CF4
	0x03B88EF4 MOVZ W8, 0x1
	0x03B88EF8 STRB W8, [X21 + 0xB16]
	0x03B88EFC LDR X0, [X20]
	0x03B88F00 ADRP X20, 0x5D4000
	0x03B88F04 LDR X19, [X19]
	0x03B88F08 LDR W8, [X0 + 0xE0]
	0x03B88F0C LDR X20, [X20 + 0x90]
	0x03B88F10 CBNZ W8, 0x3B88F18
	0x03B88F14 BL 0x1C16DFC
	0x03B88F18 MOV X0, X19
	0x03B88F1C MOV X1, X31
	0x03B88F20 BL 0x36FA754
	0x03B88F24 LDR X8, [X20]
	0x03B88F28 MOV X19, X0
	0x03B88F2C LDR W9, [X8 + 0xE0]
	0x03B88F30 CBNZ W9, 0x3B88F40
	0x03B88F34 MOV X0, X8
	0x03B88F38 BL 0x1C16DFC
	0x03B88F3C LDR X8, [X20]
	0x03B88F40 LDR X8, [X8 + 0xB8]
	0x03B88F44 STR X19, [X8 + 0x8]
	0x03B88F48 LDP X20, X19, [X31 + 0x10]
	0x03B88F4C LDP X30, X21, [X31], #0x20
	0x03B88F50 RET
	0x03B88F54 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x85B000
	008 Move X23, 0x594000
	009 Move W8, [X22+2904]
	010 Move X23, [X23+2120]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x594000
	019 Move X0, [X0+2120]
	020 Call 0x1C17CF4
	021 Move X0, 0x5D5000
	022 Move X0, [X0+248]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+2904], W8
	026 Move X0, [X23]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X31
	032 Call BurstCompiler.get_IsEnabled
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {58}
	037 Move X8, 0x5D5000
	038 Move X8, [X8+248]
	039 Move X0, [X8]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Call Scale_00000934$BurstDirectCall.GetFunctionPointer
	045 Compare X0, 0
	046 JumpIfEqual {58}
	047 Move X3, X0
	048 Move X0, X21
	049 Move X1, X20
	050 Move X2, X19
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 CallNoReturn X3
	058 Move V0, [X21]
	059 Move V1, [X20]
	060 Move V2, [X21+8]
	061 Move V3, [X20+8]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 NotImplemented "Instruction INVALID not yet implemented."
	065 Move [X19], D0
	066 Multiply S1, S2, S3
	067 Move [X19+8], S1
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X30, [X31+48]
	071 Move X23, [X31+56]
	072 Return 

