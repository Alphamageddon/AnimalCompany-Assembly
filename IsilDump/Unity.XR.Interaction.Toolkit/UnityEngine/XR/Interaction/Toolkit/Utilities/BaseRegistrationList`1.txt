Type: UnityEngine.XR.Interaction.Toolkit.Utilities.BaseRegistrationList`1

Method: System.Collections.Generic.List`1<T> get_registeredSnapshot()

Disassembly:
	0x028BA730 ADD X29, X31, 0x0
	0x028BA734 SUB X31, X31, 0x30

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Int32 get_flushedCount()

Disassembly:
	0x028BA738 MRS X28, 0xC000
	0x028BA73C LDR X8, [X28 + 0x28]
	0x028BA740 MOV X20, X3
	0x028BA744 MOV W21, W2
	0x028BA748 MOV X23, X1
	0x028BA74C STUR X8, [X29 - 0x8]
	0x028BA750 STUR X1, [X29 - 0x28]
	0x028BA754 LDR X8, [X3 + 0x20]
	0x028BA758 MOV X19, X0
	0x028BA75C LDR X8, [X8 + 0xC0]
	0x028BA760 LDR X9, [X8 + 0x48]
	0x028BA764 LDR W24, [X9 + 0xFC]
	0x028BA768 ADD X9, X31, 0x0
	0x028BA76C ADD X10, X24, 0xF
	0x028BA770 AND X10, X10, 0x1FFFFFFFF

ISIL:
	001 Move [X31-16], X30
	002 Move X9, [X0+16]
	003 Compare X9, 0
	004 JumpIfEqual {18}
	005 Move X8, [X0+32]
	006 Compare X8, 0
	007 JumpIfEqual {9}
	008 Move W8, [X8+24]
	009 Move X10, [X0+24]
	010 Move W9, [X9+24]
	011 Compare X10, 0
	012 JumpIfEqual {14}
	013 Move W10, [X10+24]
	014 Subtract W8, W9, W8
	015 Add W0, W8, W10
	016 Move X30, [X31+16]
	017 Return X0
	018 Call 0x1C17F20

Method: System.Int32 get_bufferedAddCount()

Disassembly:
	0x028BA774 SUB X25, X9, X10
	0x028BA778 ADD X31, X25, 0x0
	0x028BA77C ADD X9, X31, 0x0
	0x028BA780 SUB X22, X9, X10
	0x028BA784 ADD X31, X22, 0x0
	0x028BA788 LDR X1, [X8 + 0x20]

ISIL:
	001 Move X8, [X0+24]
	002 Compare X8, 0
	003 JumpIfEqual {6}
	004 Move W0, [X8+24]
	005 Return X0
	006 Move W0, W31
	007 Return X0

Method: System.Int32 get_bufferedRemoveCount()

Disassembly:
	0x028BA78C LDR X8, [X1]
	0x028BA790 BLR X8
	0x028BA794 CBNZ W0, 0x28BA9B0
	0x028BA798 LDR X8, [X20 + 0x20]
	0x028BA79C MOV X0, X19
	0x028BA7A0 LDR X8, [X8 + 0xC0]

ISIL:
	001 Move X8, [X0+32]
	002 Compare X8, 0
	003 JumpIfEqual {6}
	004 Move W0, [X8+24]
	005 Return X0
	006 Move W0, W31
	007 Return X0

Method: System.Void AddToBufferedAdd(T item)

Disassembly:
	0x028BA7A4 LDR X1, [X8 + 0x28]
	0x028BA7A8 LDR X8, [X1]
	0x028BA7AC BLR X8
	0x028BA7B0 CBNZ W0, 0x28BA9B0
	0x028BA7B4 LDR X8, [X20 + 0x20]
	0x028BA7B8 MOV X0, X19
	0x028BA7BC LDR X8, [X8 + 0xC0]
	0x028BA7C0 LDR X1, [X8 + 0x10]
	0x028BA7C4 LDR X8, [X1]
	0x028BA7C8 BLR X8
	0x028BA7CC LDR X27, [X20 + 0x20]
	0x028BA7D0 MOV X26, X0
	0x028BA7D4 MOV X0, X25
	0x028BA7D8 MOV X2, X24
	0x028BA7DC LDR X8, [X27 + 0xC0]
	0x028BA7E0 LDR X8, [X8 + 0x48]
	0x028BA7E4 LDR W8, [X8 + 0x28]
	0x028BA7E8 CMP W8, 0x0
	0x028BA7EC SUB X8, X29, 0x28
	0x028BA7F0 CSEL X1, X23, X8, LT
	0x028BA7F4 BL 0x3EB1AC0
	0x028BA7F8 CBZ X26, 0x28BA9EC
	0x028BA7FC LDR X8, [X27 + 0xC0]
	0x028BA800 LDR X9, [X8 + 0x48]
	0x028BA804 LDR X1, [X8 + 0x68]
	0x028BA808 MOV X8, X25
	0x028BA80C LDR W9, [X9 + 0x28]
	0x028BA810 LDR X0, [X1]
	0x028BA814 TBNZ X9, 0x1F, 0x28BA81C
	0x028BA818 LDR X8, [X25]
	0x028BA81C STUR X8, [X29 - 0x20]
	0x028BA820 LDR X8, [X1 + 0x10]
	0x028BA824 SUB X3, X29, 0x20
	0x028BA828 SUB X4, X29, 0xC
	0x028BA82C MOV X2, X26
	0x028BA830 BLR X8
	0x028BA834 LDUR W26, [X29 - 0xC]
	0x028BA838 CMP W26, W21
	0x028BA83C B.NE 0x28BA848
	0x028BA840 MOV W26, W31
	0x028BA844 B 0x28BA97C
	0x028BA848 TBNZ X26, 0x1F, 0x28BA880
	0x028BA84C LDR X8, [X20 + 0x20]
	0x028BA850 MOV X0, X19
	0x028BA854 LDR X8, [X8 + 0xC0]
	0x028BA858 LDR X1, [X8 + 0x10]
	0x028BA85C LDR X8, [X1]
	0x028BA860 BLR X8
	0x028BA864 CBZ X0, 0x28BA9EC
	0x028BA868 LDR X8, [X20 + 0x20]
	0x028BA86C MOV W1, W26
	0x028BA870 LDR X8, [X8 + 0xC0]
	0x028BA874 LDR X2, [X8 + 0x70]
	0x028BA878 LDR X8, [X2]
	0x028BA87C BLR X8
	0x028BA880 LDR X8, [X20 + 0x20]
	0x028BA884 MOV X0, X19
	0x028BA888 STUR W21, [X29 - 0x2C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, X0
	006 Move X0, [X0+24]
	007 Move X20, X2
	008 Move X19, X1
	009 Compare X0, 0
	010 JumpIfNotEqual {44}
	011 Move X8, [X20+32]
	012 Move X8, [X8+192]
	013 Move X0, [X8+56]
	014 Move W8, [X0+309]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {20}
	019 Call 0x1C5D684
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X8, [X20+32]
	025 Move X8, [X8+192]
	026 Move X0, [X8+56]
	027 Move W8, [X0+309]
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {33}
	032 Call 0x1C5D684
	033 Move X8, [X0+184]
	034 Move X0, [X8]
	035 Compare X0, 0
	036 JumpIfEqual {75}
	037 Move X8, [X20+32]
	038 Move X8, [X8+192]
	039 Move X1, [X8+64]
	040 Call 0x2EF1FD0, X0
	041 Move [X21+24], X0
	042 Compare X0, 0
	043 JumpIfEqual {75}
	044 Move X8, [X20+32]
	045 Move W10, [X0+28]
	046 Move X9, [X8+192]
	047 Move X8, [X0+16]
	048 Add W10, W10, 1
	049 Move X9, [X9+80]
	050 Move [X0+28], W10
	051 Compare X8, 0
	052 JumpIfEqual {75}
	053 NotImplemented "Instruction LDRSW not yet implemented."
	054 Move W11, [X8+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Add W9, W10, 1
	057 Add X8, X8, X10
	058 Move [X0+24], W9
	059 Move [X8+32], X19
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Return 
	065 Move X8, [X9+32]
	066 Move X1, X19
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X8, [X8+192]
	070 Move X2, [X8+112]
	071 Move X30, [X31+32]
	072 Move X21, [X31+40]
	073 Call List`1<Object>.AddWithResize, X0, X1
	074 Return 
	075 Call 0x1C17F20

Method: System.Boolean RemoveFromBufferedAdd(T item)

Disassembly:
	0x028BA88C MOV X21, X28
	0x028BA890 LDR X8, [X8 + 0xC0]
	0x028BA894 LDR X1, [X8 + 0x10]
	0x028BA898 LDR X8, [X1]
	0x028BA89C BLR X8
	0x028BA8A0 LDR X28, [X20 + 0x20]
	0x028BA8A4 MOV X27, X0

ISIL:
	001 Move X0, [X0+24]
	002 Compare X0, 0
	003 JumpIfEqual {9}
	004 Move X8, [X2+32]
	005 Move X8, [X8+192]
	006 Move X2, [X8+88]
	007 Call List`1<Object>.Remove, X0, X1
	008 Return X0
	009 Return X0

Method: System.Void ClearBufferedAdd()

Disassembly:
	0x028BA8A8 MOV X0, X25
	0x028BA8AC MOV X2, X24
	0x028BA8B0 LDR X8, [X28 + 0xC0]
	0x028BA8B4 LDR X8, [X8 + 0x48]
	0x028BA8B8 LDR W8, [X8 + 0x28]
	0x028BA8BC CMP W8, 0x0
	0x028BA8C0 SUB X8, X29, 0x28
	0x028BA8C4 CSEL X1, X23, X8, LT
	0x028BA8C8 BL 0x3EB1AC0
	0x028BA8CC CBZ X27, 0x28BA9EC
	0x028BA8D0 LDR X8, [X28 + 0xC0]
	0x028BA8D4 LDR X9, [X8 + 0x48]
	0x028BA8D8 LDR X1, [X8 + 0x78]
	0x028BA8DC LDR W8, [X9 + 0x28]
	0x028BA8E0 LDR X0, [X1]
	0x028BA8E4 TBNZ X8, 0x1F, 0x28BA8EC
	0x028BA8E8 LDR X25, [X25]
	0x028BA8EC MOV X28, X21
	0x028BA8F0 LDUR W21, [X29 - 0x2C]
	0x028BA8F4 SUB X8, X29, 0xC
	0x028BA8F8 STP X8, X25, [X29 - 0x20]
	0x028BA8FC SUB X3, X29, 0x20
	0x028BA900 STUR W21, [X29 - 0xC]
	0x028BA904 LDR X8, [X1 + 0x10]
	0x028BA908 MOV X2, X27
	0x028BA90C MOV X4, X25
	0x028BA910 UBFM W26, W26, 0x1F, 0x1F
	0x028BA914 BLR X8
	0x028BA918 LDR X20, [X20 + 0x20]
	0x028BA91C MOV X0, X22
	0x028BA920 MOV X2, X24
	0x028BA924 LDR X8, [X20 + 0xC0]
	0x028BA928 LDR X8, [X8 + 0x48]
	0x028BA92C LDR W8, [X8 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+24]
	005 Compare X8, 0
	006 JumpIfEqual {41}
	007 Move X8, [X1+32]
	008 Move X19, X0
	009 Move X20, X1
	010 Move X8, [X8+192]
	011 Move X0, [X8+56]
	012 Move W8, [X0+309]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {18}
	017 Call 0x1C5D684
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X8, [X20+32]
	023 Move X8, [X8+192]
	024 Move X0, [X8+56]
	025 Move W8, [X0+309]
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {31}
	030 Call 0x1C5D684
	031 Move X8, [X0+184]
	032 Move X0, [X8]
	033 Compare X0, 0
	034 JumpIfEqual {45}
	035 Move X8, [X20+32]
	036 Move X1, [X19+24]
	037 Move X8, [X8+192]
	038 Move X2, [X8+96]
	039 Call 0x2EF20B8, X0, X1
	040 Move [X19+24], X31
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Return 
	045 Call 0x1C17F20

Method: System.Void AddToBufferedRemove(T item)

Disassembly:
	0x028BA930 CMP W8, 0x0
	0x028BA934 SUB X8, X29, 0x28
	0x028BA938 CSEL X1, X23, X8, LT
	0x028BA93C BL 0x3EB1AC0
	0x028BA940 LDR X8, [X20 + 0xC0]
	0x028BA944 LDR X8, [X8 + 0x48]
	0x028BA948 LDR W8, [X8 + 0x28]
	0x028BA94C TBNZ X8, 0x1F, 0x28BA954
	0x028BA950 LDR X22, [X22]
	0x028BA954 STUR W21, [X29 - 0xC]
	0x028BA958 LDR X8, [X19]
	0x028BA95C SUB X9, X29, 0xC
	0x028BA960 STP X22, X9, [X29 - 0x20]
	0x028BA964 SUB X3, X29, 0x20
	0x028BA968 LDR X1, [X8 + 0x1F0]
	0x028BA96C SUB X4, X29, 0xC
	0x028BA970 MOV X2, X19
	0x028BA974 LDP X0, X8, [X1 + 0x8]
	0x028BA978 BLR X8
	0x028BA97C LDR X8, [X28 + 0x28]
	0x028BA980 LDUR X9, [X29 - 0x8]
	0x028BA984 CMP X8, X9
	0x028BA988 B.NE 0x28BA9F0
	0x028BA98C MOV W0, W26
	0x028BA990 ADD X31, X29, 0x0
	0x028BA994 LDP X20, X19, [X31 + 0x50]
	0x028BA998 LDP X22, X21, [X31 + 0x40]
	0x028BA99C LDP X24, X23, [X31 + 0x30]
	0x028BA9A0 LDP X26, X25, [X31 + 0x20]
	0x028BA9A4 LDP X28, X27, [X31 + 0x10]
	0x028BA9A8 LDP X29, X30, [X31], #0x60
	0x028BA9AC RET
	0x028BA9B0 ADRP X0, 0x1839000
	0x028BA9B4 LDR X0, [X0 + 0x5B0]
	0x028BA9B8 BL 0x1C16D08
	0x028BA9BC BL 0x1C16F10
	0x028BA9C0 MOV X19, X0
	0x028BA9C4 ADRP X0, 0x1864000
	0x028BA9C8 LDR X0, [X0 + 0xE8]
	0x028BA9CC BL 0x1C16D08
	0x028BA9D0 MOV X1, X0
	0x028BA9D4 MOV X0, X19
	0x028BA9D8 MOV X2, X31
	0x028BA9DC BL 0x337DF1C
	0x028BA9E0 MOV X0, X19
	0x028BA9E4 MOV X1, X20
	0x028BA9E8 BL 0x1C16DEC
	0x028BA9EC BL 0x1C16F20
	0x028BA9F0 BL 0x3EB1B20
	0x028BA9F4 RET
	0x028BA9F8 STP X29, X30, [X31 - 0x40]!
	0x028BA9FC STP X24, X23, [X31 + 0x10]
	0x028BAA00 STP X22, X21, [X31 + 0x20]
	0x028BAA04 STP X20, X19, [X31 + 0x30]
	0x028BAA08 ADD X29, X31, 0x0
	0x028BAA0C SUB X31, X31, 0x40
	0x028BAA10 MRS X22, 0xC000
	0x028BAA14 LDR X8, [X22 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, X0
	006 Move X0, [X0+32]
	007 Move X20, X2
	008 Move X19, X1
	009 Compare X0, 0
	010 JumpIfNotEqual {44}
	011 Move X8, [X20+32]
	012 Move X8, [X8+192]
	013 Move X0, [X8+56]
	014 Move W8, [X0+309]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {20}
	019 Call 0x1C5D684
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X8, [X20+32]
	025 Move X8, [X8+192]
	026 Move X0, [X8+56]
	027 Move W8, [X0+309]
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {33}
	032 Call 0x1C5D684
	033 Move X8, [X0+184]
	034 Move X0, [X8]
	035 Compare X0, 0
	036 JumpIfEqual {75}
	037 Move X8, [X20+32]
	038 Move X8, [X8+192]
	039 Move X1, [X8+64]
	040 Call 0x2EF1FD0, X0
	041 Move [X21+32], X0
	042 Compare X0, 0
	043 JumpIfEqual {75}
	044 Move X8, [X20+32]
	045 Move W10, [X0+28]
	046 Move X9, [X8+192]
	047 Move X8, [X0+16]
	048 Add W10, W10, 1
	049 Move X9, [X9+80]
	050 Move [X0+28], W10
	051 Compare X8, 0
	052 JumpIfEqual {75}
	053 NotImplemented "Instruction LDRSW not yet implemented."
	054 Move W11, [X8+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Add W9, W10, 1
	057 Add X8, X8, X10
	058 Move [X0+24], W9
	059 Move [X8+32], X19
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Return 
	065 Move X8, [X9+32]
	066 Move X1, X19
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X8, [X8+192]
	070 Move X2, [X8+112]
	071 Move X30, [X31+32]
	072 Move X21, [X31+40]
	073 Call List`1<Object>.AddWithResize, X0, X1
	074 Return 
	075 Call 0x1C17F20

Method: System.Boolean RemoveFromBufferedRemove(T item)

Disassembly:
	0x028BAA18 ADD X10, X31, 0x0
	0x028BAA1C MOV X19, X1
	0x028BAA20 MOV X20, X0
	0x028BAA24 STUR X8, [X29 - 0x8]
	0x028BAA28 LDR X8, [X1 + 0x20]
	0x028BAA2C LDR X8, [X8 + 0xC0]
	0x028BAA30 LDR X9, [X8 + 0x48]

ISIL:
	001 Move X0, [X0+32]
	002 Compare X0, 0
	003 JumpIfEqual {9}
	004 Move X8, [X2+32]
	005 Move X8, [X8+192]
	006 Move X2, [X8+88]
	007 Call List`1<Object>.Remove, X0, X1
	008 Return X0
	009 Return X0

Method: System.Void ClearBufferedRemove()

Disassembly:
	0x028BAA34 LDR W9, [X9 + 0xFC]
	0x028BAA38 ADD X9, X9, 0xF
	0x028BAA3C AND X9, X9, 0x1FFFFFFFF
	0x028BAA40 SUB X21, X10, X9
	0x028BAA44 ADD X31, X21, 0x0
	0x028BAA48 STP X31, X31, [X29 - 0x30]
	0x028BAA4C STUR X31, [X29 - 0x38]
	0x028BAA50 LDR X0, [X8 + 0x38]
	0x028BAA54 LDRB W8, [X0 + 0x135]
	0x028BAA58 TBNZ X8, 0x0, 0x28BAA60
	0x028BAA5C BL 0x1C5C684
	0x028BAA60 LDR W8, [X0 + 0xE0]
	0x028BAA64 CBNZ W8, 0x28BAA6C
	0x028BAA68 BL 0x1C16DFC
	0x028BAA6C LDR X8, [X19 + 0x20]
	0x028BAA70 LDR X8, [X8 + 0xC0]
	0x028BAA74 LDR X0, [X8 + 0x38]
	0x028BAA78 LDRB W8, [X0 + 0x135]
	0x028BAA7C TBNZ X8, 0x0, 0x28BAA84
	0x028BAA80 BL 0x1C5C684
	0x028BAA84 LDR X8, [X0 + 0xB8]
	0x028BAA88 LDR X0, [X8]
	0x028BAA8C CBZ X0, 0x28BABA4
	0x028BAA90 LDR X8, [X19 + 0x20]
	0x028BAA94 SUB X1, X29, 0x28
	0x028BAA98 LDR X8, [X8 + 0xC0]
	0x028BAA9C LDR X2, [X8 + 0x88]
	0x028BAAA0 LDR X8, [X2]
	0x028BAAA4 BLR X8
	0x028BAAA8 STP X0, X1, [X29 - 0x38]
	0x028BAAAC LDR X8, [X20]
	0x028BAAB0 LDUR X1, [X29 - 0x28]
	0x028BAAB4 LDP X9, X2, [X8 + 0x1C8]
	0x028BAAB8 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+32]
	005 Compare X8, 0
	006 JumpIfEqual {41}
	007 Move X8, [X1+32]
	008 Move X19, X0
	009 Move X20, X1
	010 Move X8, [X8+192]
	011 Move X0, [X8+56]
	012 Move W8, [X0+309]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {18}
	017 Call 0x1C5D684
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X8, [X20+32]
	023 Move X8, [X8+192]
	024 Move X0, [X8+56]
	025 Move W8, [X0+309]
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {31}
	030 Call 0x1C5D684
	031 Move X8, [X0+184]
	032 Move X0, [X8]
	033 Compare X0, 0
	034 JumpIfEqual {45}
	035 Move X8, [X20+32]
	036 Move X1, [X19+32]
	037 Move X8, [X8+192]
	038 Move X2, [X8+96]
	039 Call 0x2EF20B8, X0, X1
	040 Move [X19+32], X31
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Return 
	045 Call 0x1C17F20

Method: System.Boolean IsRegistered(T item)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Boolean IsStillRegistered(T item)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Boolean Register(T item)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Boolean Unregister(T item)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void Flush()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void GetRegisteredItems(System.Collections.Generic.List`1<T> results)

Disassembly:
	

ISIL:
No ISIL was generated
Method: T GetRegisteredItemAt(System.Int32 index)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Boolean MoveItemImmediately(T item, System.Int32 newIndex)

Disassembly:
	0x028BAABC BLR X9
	0x028BAAC0 LDUR X0, [X29 - 0x28]
	0x028BAAC4 CBZ X0, 0x28BABB0
	0x028BAAC8 LDR X8, [X19 + 0x20]
	0x028BAACC LDR X8, [X8 + 0xC0]
	0x028BAAD0 LDR X1, [X8 + 0x18]
	0x028BAAD4 LDR X8, [X1]
	0x028BAAD8 BLR X8
	0x028BAADC SUBS W23, W0, 0x1
	0x028BAAE0 B.MI 0x28BAB5C
	0x028BAAE4 SUB X24, X29, 0xC
	0x028BAAE8 LDUR X2, [X29 - 0x28]
	0x028BAAEC CBZ X2, 0x28BABA0
	0x028BAAF0 LDR X8, [X19 + 0x20]
	0x028BAAF4 LDR X8, [X8 + 0xC0]
	0x028BAAF8 LDR X1, [X8 + 0xA8]
	0x028BAAFC LDR X0, [X1]
	0x028BAB00 STUR W23, [X29 - 0xC]
	0x028BAB04 STP X24, X21, [X29 - 0x20]
	0x028BAB08 LDR X8, [X1 + 0x10]
	0x028BAB0C SUB X3, X29, 0x20
	0x028BAB10 MOV X4, X21
	0x028BAB14 BLR X8
	0x028BAB18 LDR X8, [X19 + 0x20]
	0x028BAB1C LDR X8, [X8 + 0xC0]
	0x028BAB20 LDR X8, [X8 + 0x48]
	0x028BAB24 LDR W9, [X8 + 0x28]
	0x028BAB28 MOV X8, X21
	0x028BAB2C TBNZ X9, 0x1F, 0x28BAB34
	0x028BAB30 LDR X8, [X21]
	0x028BAB34 LDR X9, [X20]
	0x028BAB38 STUR X8, [X29 - 0x20]
	0x028BAB3C LDR X1, [X9 + 0x1B0]
	0x028BAB40 LDP X0, X8, [X1 + 0x8]
	0x028BAB44 SUB X3, X29, 0x20
	0x028BAB48 SUB X4, X29, 0xC
	0x028BAB4C MOV X2, X20
	0x028BAB50 BLR X8
	0x028BAB54 SUBS W23, W23, 0x1
	0x028BAB58 B.PL 0x28BAAE8
	0x028BAB5C MOV X21, X31
	0x028BAB60 LDR X8, [X19 + 0x20]
	0x028BAB64 SUB X0, X29, 0x38
	0x028BAB68 LDR X8, [X8 + 0xC0]
	0x028BAB6C LDR X1, [X8 + 0xB8]
	0x028BAB70 BL 0x24A6DD0
	0x028BAB74 CBNZ X21, 0x28BABA8
	0x028BAB78 LDR X8, [X22 + 0x28]
	0x028BAB7C LDUR X9, [X29 - 0x8]
	0x028BAB80 CMP X8, X9
	0x028BAB84 B.NE 0x28BABB4
	0x028BAB88 ADD X31, X29, 0x0
	0x028BAB8C LDP X20, X19, [X31 + 0x30]
	0x028BAB90 LDP X22, X21, [X31 + 0x20]
	0x028BAB94 LDP X24, X23, [X31 + 0x10]
	0x028BAB98 LDP X29, X30, [X31], #0x40
	0x028BAB9C RET
	0x028BABA0 BL 0x1C16F20
	0x028BABA4 BL 0x1C16F20
	0x028BABA8 MOV X0, X21
	0x028BABAC BL 0x1C16F18
	0x028BABB0 BL 0x1C16F20
	0x028BABB4 BL 0x3EB1B20
	0x028BABB8 B 0x28BABCC
	0x028BABBC B 0x28BABCC
	0x028BABC0 B 0x28BABCC
	0x028BABC4 B 0x28BABCC
	0x028BABC8 B 0x28BABCC
	0x028BABCC MOV X20, X0
	0x028BABD0 CMP W1, 0x1
	0x028BABD4 B.NE 0x28BABEC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X3+32]
	008 Move X9, [X0+32]
	009 Move X19, X3
	010 Move W20, W2
	011 Move X8, [X8+192]
	012 Move X21, X0
	013 Move X22, X1
	014 Compare X9, 0
	015 JumpIfEqual {19}
	016 Move W9, [X9+24]
	017 Compare W9, 0
	018 JumpIfNotEqual {74}
	019 Move X9, [X21+24]
	020 Compare X9, 0
	021 JumpIfEqual {25}
	022 Move W9, [X9+24]
	023 Compare W9, 0
	024 JumpIfNotEqual {74}
	025 Move X0, [X21+16]
	026 Compare X0, 0
	027 JumpIfEqual {73}
	028 Move X2, [X8+104]
	029 Move X1, X22
	030 Call List`1<Object>.IndexOf, X0, X1
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move W19, W31
	033 Move W23, W0
	034 Move TEMP, X0
	035 And TEMP, TEMP, -2147483648
	036 Compare TEMP, -2147483648
	037 JumpIfEqual {46}
	038 Move X0, [X21+16]
	039 Compare X0, 0
	040 JumpIfEqual {73}
	041 Move X8, [X19+32]
	042 Move W1, W23
	043 Move X8, [X8+192]
	044 Move X2, [X8+112]
	045 Call List`1<Object>.RemoveAt, X0, X1
	046 Move X0, [X21+16]
	047 Compare X0, 0
	048 JumpIfEqual {73}
	049 Move X8, [X19+32]
	050 Move W1, W20
	051 Move X2, X22
	052 Move W19, W23
	053 ShiftRight W19, 31
	054 And W19, W19, 0x7FFFFFFF
	055 Move X8, [X8+192]
	056 Move X3, [X8+120]
	057 Call List`1<Object>.Insert, X0, X1, X2
	058 Move X8, [X21]
	059 Move X0, X21
	060 Move X1, X22
	061 Move W2, W20
	062 Move X9, [X8+488]
	063 Move X3, [X8+496]
	064 NotImplemented "Instruction BLR not yet implemented."
	065 Move W0, W19
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Move X23, [X31+56]
	072 Return X0
	073 Call 0x1C17F20
	074 Move X0, 0x183A000
	075 Move X0, [X0+1456]
	076 Call 0x1C17D08
	077 Call 0x1C17F10
	078 Move X20, X0
	079 Move X0, 0x1865000
	080 Move X0, [X0+232]
	081 Call 0x1C17D08
	082 Move X1, X0
	083 Move X0, X20
	084 Move X2, X31
	085 Call InvalidOperationException..ctor, X0, X1
	086 Move X0, X20
	087 Move X1, X19
	088 Call 0x1C17DEC

Method: System.Void OnItemMovedImmediately(T item, System.Int32 newIndex)

Disassembly:
	0x028BABD8 MOV X0, X20

ISIL:
	001 Return 

Method: System.Void UnregisterAll()

Disassembly:
	0x028BABDC BL 0x3EB1AD0
	0x028BABE0 LDR X21, [X0]
	0x028BABE4 BL 0x3EB1AE0
	0x028BABE8 B 0x28BAB60
	0x028BABEC MOV X21, X31
	0x028BABF0 B 0x28BABF8
	0x028BABF4 MOV X20, X0
	0x028BABF8 LDR X8, [X19 + 0x20]
	0x028BABFC LDR X8, [X8 + 0xC0]
	0x028BAC00 LDR X1, [X8 + 0xB8]
	0x028BAC04 SUB X0, X29, 0x38
	0x028BAC08 BL 0x24A6DD0
	0x028BAC0C CBNZ X21, 0x28BAC18
	0x028BAC10 MOV X0, X20
	0x028BAC14 BL 0x1D2C690
	0x028BAC18 MOV X0, X21
	0x028BAC1C BL 0x1C16F18
	0x028BAC20 BL 0x1990590
	0x028BAC24 STR X30, [X31 - 0x30]!
	0x028BAC28 STP X22, X21, [X31 + 0x10]
	0x028BAC2C STP X20, X19, [X31 + 0x20]
	0x028BAC30 CBZ X0, 0x28BAD20
	0x028BAC34 LDR X8, [X2 + 0x20]
	0x028BAC38 MOV X21, X2
	0x028BAC3C MOV W19, W1
	0x028BAC40 MOV X20, X0
	0x028BAC44 ADD X9, X8, 0x135
	0x028BAC48 LDRH W9, [X9]
	0x028BAC4C TBNZ X9, 0x0, 0x28BAC68
	0x028BAC50 MOV X0, X8
	0x028BAC54 BL 0x1C5C684
	0x028BAC58 LDR X8, [X21 + 0x20]
	0x028BAC5C ADD X9, X8, 0x135
	0x028BAC60 LDRH W9, [X9]
	0x028BAC64 B 0x28BAC6C
	0x028BAC68 MOV X0, X8
	0x028BAC6C LDR X10, [X0 + 0xC0]
	0x028BAC70 LDR X10, [X10 + 0xC0]
	0x028BAC74 LDR X22, [X10]
	0x028BAC78 TBNZ X9, 0x0, 0x28BAC88
	0x028BAC7C MOV X0, X8
	0x028BAC80 BL 0x1C5C684
	0x028BAC84 MOV X8, X0
	0x028BAC88 LDR X8, [X8 + 0xC0]
	0x028BAC8C MOV X0, X20
	0x028BAC90 LDR X1, [X8 + 0xC0]
	0x028BAC94 BLR X22
	0x028BAC98 CMP W0, W19
	0x028BAC9C B.GE 0x28BACC8
	0x028BACA0 LDR X8, [X21 + 0x20]
	0x028BACA4 ADD X9, X8, 0x135
	0x028BACA8 LDRH W9, [X9]
	0x028BACAC TBNZ X9, 0x0, 0x28BACD8
	0x028BACB0 MOV X0, X8
	0x028BACB4 BL 0x1C5C684
	0x028BACB8 LDR X8, [X21 + 0x20]
	0x028BACBC ADD X9, X8, 0x135
	0x028BACC0 LDRH W9, [X9]
	0x028BACC4 B 0x28BACDC
	0x028BACC8 LDP X20, X19, [X31 + 0x20]
	0x028BACCC LDP X22, X21, [X31 + 0x10]
	0x028BACD0 LDR X30, [X31], #0x30
	0x028BACD4 RET
	0x028BACD8 MOV X0, X8
	0x028BACDC LDR X10, [X0 + 0xC0]
	0x028BACE0 LDR X10, [X10 + 0xC8]
	0x028BACE4 LDR X3, [X10]
	0x028BACE8 TBNZ X9, 0x0, 0x28BAD00
	0x028BACEC MOV X0, X8
	0x028BACF0 STR X3, [X31 + 0x8]
	0x028BACF4 BL 0x1C5C684
	0x028BACF8 LDR X3, [X31 + 0x8]
	0x028BACFC MOV X8, X0
	0x028BAD00 LDR X8, [X8 + 0xC0]
	0x028BAD04 MOV X0, X20
	0x028BAD08 MOV W1, W19
	0x028BAD0C LDP X20, X19, [X31 + 0x20]
	0x028BAD10 LDR X2, [X8 + 0xC8]
	0x028BAD14 LDP X22, X21, [X31 + 0x10]
	0x028BAD18 LDR X30, [X31], #0x30
	0x028BAD1C BR X3
	0x028BAD20 BL 0x1C16F20
	0x028BAD24 STR X30, [X31 - 0x20]!
	0x028BAD28 STP X20, X19, [X31 + 0x10]
	0x028BAD2C LDR X8, [X1 + 0x20]
	0x028BAD30 MOV X20, X1
	0x028BAD34 MOV X19, X0
	0x028BAD38 LDR X8, [X8 + 0xC0]
	0x028BAD3C LDR X8, [X8 + 0x8]
	0x028BAD40 LDRB W9, [X8 + 0x135]
	0x028BAD44 TBNZ X9, 0x0, 0x28BAD54
	0x028BAD48 MOV X0, X8
	0x028BAD4C BL 0x1C5C684
	0x028BAD50 MOV X8, X0
	0x028BAD54 MOV X0, X8
	0x028BAD58 BL 0x1C16F10
	0x028BAD5C LDR X8, [X20 + 0x20]
	0x028BAD60 MOV X20, X0
	0x028BAD64 LDR X8, [X8 + 0xC0]
	0x028BAD68 LDR X1, [X8 + 0xD0]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move [X31+16], X31
	007 Move [X31+24], X31
	008 Move [X31+8], X31
	009 Move X8, [X1+32]
	010 Move X19, X1
	011 Move X20, X0
	012 Move X8, [X8+192]
	013 Move X8, [X8+56]
	014 Move W9, [X8+309]
	015 Move TEMP, X9
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {22}
	019 Move X0, X8
	020 Call 0x1C5D684
	021 Move X8, X0
	022 Move W9, [X8+224]
	023 Compare W9, 0
	024 JumpIfNotEqual {27}
	025 Move X0, X8
	026 Call 0x1C17DFC
	027 Move X8, [X19+32]
	028 Move X8, [X8+192]
	029 Move X0, [X8+56]
	030 Move W8, [X0+309]
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {36}
	035 Call 0x1C5D684
	036 Move X8, [X0+184]
	037 Move X0, [X8]
	038 Compare X0, 0
	039 JumpIfEqual {92}
	040 Move X8, [X19+32]
	041 Add X1, X31, 24
	042 Move X8, [X8+192]
	043 Move X2, [X8+136]
	044 Call 0x2EF2058, X0, X1
	045 Move [X31+8], X0
	046 Move [X31+16], X1
	047 Move X8, [X20]
	048 Move X1, [X31+24]
	049 Move X9, [X8+456]
	050 Move X2, [X8+464]
	051 Move X0, X20
	052 NotImplemented "Instruction BLR not yet implemented."
	053 Move X8, [X31+24]
	054 Compare X8, 0
	055 JumpIfEqual {95}
	056 Move W8, [X8+24]
	057 Subtract W21, W8, 1
	058 Move TEMP, X21
	059 And TEMP, TEMP, -2147483648
	060 Compare TEMP, -2147483648
	061 JumpIfEqual {77}
	062 Move X0, [X31+24]
	063 Compare X0, 0
	064 JumpIfEqual {91}
	065 Move X8, [X19+32]
	066 Move X8, [X8+192]
	067 Move X2, [X8+168]
	068 Move W1, W21
	069 Call List`1<Object>.get_Item, X0, X1
	070 Move X1, X0
	071 Move X8, [X20]
	072 Subtract W21, W21, 1
	073 Move X9, [X8+424]
	074 Move X2, [X8+432]
	075 Move X0, X20
	076 NotImplemented "Instruction BLR not yet implemented."
	077 Move X21, X31
	078 Move X8, [X19+32]
	079 Add X0, X31, 8
	080 Move X8, [X8+192]
	081 Move X1, [X8+184]
	082 Call 0x24A7DD0, X0
	083 Compare X21, 0
	084 JumpIfNotEqual {93}
	085 Move X20, [X31+48]
	086 Move X19, [X31+56]
	087 Move X30, [X31+32]
	088 Move X21, [X31+40]
	089 Add X31, X31, 64
	090 Return 
	091 Call 0x1C17F20
	092 Call 0x1C17F20
	093 Move X0, X21
	094 Call 0x1C17F18
	095 Call 0x1C17F20
	096 Move X20, X0
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X0, X20
	099 Call 0x3EB2AD0
	100 Move X21, [X0]
	101 Call 0x3EB2AE0
	102 Move X21, X31
	103 Move X20, X0
	104 Move X8, [X19+32]
	105 Move X8, [X8+192]
	106 Move X1, [X8+184]
	107 Add X0, X31, 8
	108 Call 0x24A7DD0, X0
	109 Compare X21, 0
	110 JumpIfNotEqual {113}
	111 Move X0, X20
	112 Call 0x1D2D690
	113 Move X0, X21
	114 Call 0x1C17F18
	115 Call 0x1991590

Method: System.Void EnsureCapacity(System.Collections.Generic.List`1<T> list, System.Int32 capacity)

Disassembly:
	0x028BAD6C LDR X8, [X1]
	0x028BAD70 BLR X8
	0x028BAD74 STR X20, [X19 + 0x10]
	0x028BAD78 MOV X0, X19
	0x028BAD7C LDP X20, X19, [X31 + 0x10]
	0x028BAD80 MOV X1, X31
	0x028BAD84 LDR X30, [X31], #0x20
	0x028BAD88 B 0x33BDD8C
	0x028BAD8C STR X30, [X31 - 0x40]!
	0x028BAD90 STP X24, X23, [X31 + 0x10]
	0x028BAD94 STP X22, X21, [X31 + 0x20]
	0x028BAD98 STP X20, X19, [X31 + 0x30]
	0x028BAD9C MOV X19, X0
	0x028BADA0 LDR X0, [X0 + 0x20]
	0x028BADA4 LDRB W8, [X0 + 0x135]
	0x028BADA8 TBNZ X8, 0x0, 0x28BADB0
	0x028BADAC BL 0x1C5C684
	0x028BADB0 LDR X8, [X0 + 0xC0]
	0x028BADB4 LDR X0, [X8 + 0xE0]
	0x028BADB8 LDRB W8, [X0 + 0x135]
	0x028BADBC TBNZ X8, 0x0, 0x28BADC4
	0x028BADC0 BL 0x1C5C684
	0x028BADC4 LDR W8, [X0 + 0xE0]
	0x028BADC8 CBNZ W8, 0x28BADD0
	0x028BADCC BL 0x1C16DFC
	0x028BADD0 LDR X0, [X19 + 0x20]
	0x028BADD4 LDRB W8, [X0 + 0x135]
	0x028BADD8 TBNZ X8, 0x0, 0x28BADE0
	0x028BADDC BL 0x1C5C684
	0x028BADE0 LDR X8, [X0 + 0xC0]
	0x028BADE4 LDR X0, [X8 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {44}
	007 Move X20, X0
	008 Move X0, [X2+32]
	009 Move X21, X2
	010 Move W19, W1
	011 Move W8, [X0+309]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {17}
	016 Call 0x1C5D684
	017 Move X8, [X0+192]
	018 Move X0, X20
	019 Move X1, [X8+192]
	020 Call List`1<Object>.get_Capacity, X0
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X0, [X21+32]
	023 Move W8, [X0+309]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {29}
	028 Call 0x1C5D684
	029 Move X8, [X0+192]
	030 Move X0, X20
	031 Move W1, W19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X2, [X8+200]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call List`1<Object>.set_Capacity, X0, X1
	038 Return 
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return 
	044 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x028BADE8 LDRB W8, [X0 + 0x135]
	0x028BADEC TBNZ X8, 0x0, 0x28BADF4
	0x028BADF0 BL 0x1C5C684
	0x028BADF4 LDR X8, [X19 + 0x20]
	0x028BADF8 LDR X9, [X0 + 0xB8]
	0x028BADFC LDRB W10, [X8 + 0x135]
	0x028BAE00 LDR X21, [X9]
	0x028BAE04 TBNZ X10, 0x0, 0x28BAE14
	0x028BAE08 MOV X0, X8
	0x028BAE0C BL 0x1C5C684
	0x028BAE10 MOV X8, X0
	0x028BAE14 LDR X8, [X8 + 0xC0]
	0x028BAE18 LDR X0, [X8 + 0xF0]
	0x028BAE1C LDRB W8, [X0 + 0x135]
	0x028BAE20 TBNZ X8, 0x0, 0x28BAE28
	0x028BAE24 BL 0x1C5C684
	0x028BAE28 BL 0x1C16F10
	0x028BAE2C LDR X8, [X19 + 0x20]
	0x028BAE30 MOV X20, X0
	0x028BAE34 ADD X9, X8, 0x135
	0x028BAE38 LDRH W9, [X9]
	0x028BAE3C TBNZ X9, 0x0, 0x28BAE58
	0x028BAE40 MOV X0, X8
	0x028BAE44 BL 0x1C5C684
	0x028BAE48 LDR X8, [X19 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+32]
	005 Move X20, X1
	006 Move X19, X0
	007 Move X8, [X8+192]
	008 Move X8, [X8+8]
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move X0, X8
	018 Call 0x1C17F10
	019 Move X8, [X20+32]
	020 Move X20, X0
	021 Move X8, [X8+192]
	022 Move X1, [X8+208]
	023 Call List`1<Object>..ctor, X0
	024 Move [X19+16], X20
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Call Object..ctor, X0
	031 Return 

Method: System.Void .cctor()

Disassembly:
	0x028BAE4C ADD X9, X8, 0x135
	0x028BAE50 LDRH W9, [X9]
	0x028BAE54 B 0x28BAE5C
	0x028BAE58 MOV X0, X8
	0x028BAE5C LDR X10, [X0 + 0xC0]
	0x028BAE60 LDR X10, [X10 + 0xF8]
	0x028BAE64 LDR X23, [X10]
	0x028BAE68 TBNZ X9, 0x0, 0x28BAE84
	0x028BAE6C MOV X0, X8
	0x028BAE70 BL 0x1C5C684
	0x028BAE74 LDR X8, [X19 + 0x20]
	0x028BAE78 ADD X9, X8, 0x135
	0x028BAE7C LDRH W9, [X9]
	0x028BAE80 B 0x28BAE88
	0x028BAE84 MOV X0, X8
	0x028BAE88 LDR X10, [X0 + 0xC0]
	0x028BAE8C LDR X22, [X10 + 0xE8]
	0x028BAE90 TBNZ X9, 0x0, 0x28BAEA0
	0x028BAE94 MOV X0, X8
	0x028BAE98 BL 0x1C5C684
	0x028BAE9C MOV X8, X0
	0x028BAEA0 LDR X8, [X8 + 0xC0]
	0x028BAEA4 MOV X0, X20
	0x028BAEA8 MOV X1, X21
	0x028BAEAC MOV X2, X22
	0x028BAEB0 LDR X3, [X8 + 0xF8]
	0x028BAEB4 BLR X23
	0x028BAEB8 LDR X0, [X19 + 0x20]
	0x028BAEBC LDRB W8, [X0 + 0x135]
	0x028BAEC0 TBNZ X8, 0x0, 0x28BAEC8
	0x028BAEC4 BL 0x1C5C684
	0x028BAEC8 LDR X8, [X0 + 0xC0]
	0x028BAECC LDR X0, [X8 + 0xE0]
	0x028BAED0 LDRB W8, [X0 + 0x135]
	0x028BAED4 TBNZ X8, 0x0, 0x28BAEDC
	0x028BAED8 BL 0x1C5C684
	0x028BAEDC LDR X8, [X19 + 0x20]
	0x028BAEE0 LDR X9, [X0 + 0xB8]
	0x028BAEE4 LDRB W10, [X8 + 0x135]
	0x028BAEE8 LDR X22, [X9]
	0x028BAEEC TBNZ X10, 0x0, 0x28BAEFC
	0x028BAEF0 MOV X0, X8
	0x028BAEF4 BL 0x1C5C684
	0x028BAEF8 MOV X8, X0
	0x028BAEFC LDR X8, [X8 + 0xC0]
	0x028BAF00 LDR X0, [X8 + 0x108]
	0x028BAF04 LDRB W8, [X0 + 0x135]
	0x028BAF08 TBNZ X8, 0x0, 0x28BAF10
	0x028BAF0C BL 0x1C5C684
	0x028BAF10 BL 0x1C16F10
	0x028BAF14 LDR X8, [X19 + 0x20]
	0x028BAF18 MOV X21, X0
	0x028BAF1C ADD X9, X8, 0x135
	0x028BAF20 LDRH W9, [X9]
	0x028BAF24 TBNZ X9, 0x0, 0x28BAF40
	0x028BAF28 MOV X0, X8
	0x028BAF2C BL 0x1C5C684
	0x028BAF30 LDR X8, [X19 + 0x20]
	0x028BAF34 ADD X9, X8, 0x135
	0x028BAF38 LDRH W9, [X9]
	0x028BAF3C B 0x28BAF44
	0x028BAF40 MOV X0, X8
	0x028BAF44 LDR X10, [X0 + 0xC0]
	0x028BAF48 LDR X10, [X10 + 0x110]
	0x028BAF4C LDR X24, [X10]
	0x028BAF50 TBNZ X9, 0x0, 0x28BAF6C
	0x028BAF54 MOV X0, X8
	0x028BAF58 BL 0x1C5C684
	0x028BAF5C LDR X8, [X19 + 0x20]
	0x028BAF60 ADD X9, X8, 0x135
	0x028BAF64 LDRH W9, [X9]
	0x028BAF68 B 0x28BAF70
	0x028BAF6C MOV X0, X8
	0x028BAF70 LDR X10, [X0 + 0xC0]
	0x028BAF74 LDR X23, [X10 + 0x100]
	0x028BAF78 TBNZ X9, 0x0, 0x28BAF88
	0x028BAF7C MOV X0, X8
	0x028BAF80 BL 0x1C5C684
	0x028BAF84 MOV X8, X0
	0x028BAF88 LDR X8, [X8 + 0xC0]
	0x028BAF8C MOV X0, X21
	0x028BAF90 MOV X1, X22
	0x028BAF94 MOV X2, X23
	0x028BAF98 LDR X3, [X8 + 0x110]
	0x028BAF9C BLR X24
	0x028BAFA0 LDR X0, [X19 + 0x20]
	0x028BAFA4 LDRB W8, [X0 + 0x135]
	0x028BAFA8 TBNZ X8, 0x0, 0x28BAFB0
	0x028BAFAC BL 0x1C5C684
	0x028BAFB0 LDR X8, [X0 + 0xC0]
	0x028BAFB4 LDR X0, [X8 + 0x30]
	0x028BAFB8 LDRB W8, [X0 + 0x135]
	0x028BAFBC TBNZ X8, 0x0, 0x28BAFC4
	0x028BAFC0 BL 0x1C5C684
	0x028BAFC4 BL 0x1C16F10
	0x028BAFC8 LDR X8, [X19 + 0x20]
	0x028BAFCC MOV X22, X0
	0x028BAFD0 ADD X9, X8, 0x135
	0x028BAFD4 LDRH W9, [X9]
	0x028BAFD8 TBNZ X9, 0x0, 0x28BAFF4
	0x028BAFDC MOV X0, X8
	0x028BAFE0 BL 0x1C5C684
	0x028BAFE4 LDR X8, [X19 + 0x20]
	0x028BAFE8 ADD X9, X8, 0x135
	0x028BAFEC LDRH W9, [X9]
	0x028BAFF0 B 0x28BAFF8
	0x028BAFF4 MOV X0, X8
	0x028BAFF8 LDR X10, [X0 + 0xC0]
	0x028BAFFC LDR X10, [X10 + 0x118]
	0x028BB000 LDR X23, [X10]
	0x028BB004 TBNZ X9, 0x0, 0x28BB014
	0x028BB008 MOV X0, X8
	0x028BB00C BL 0x1C5C684
	0x028BB010 MOV X8, X0
	0x028BB014 LDR X8, [X8 + 0xC0]
	0x028BB018 MOVZ W6, 0x2710
	0x028BB01C MOV X0, X22
	0x028BB020 MOV X1, X20
	0x028BB024 LDR X7, [X8 + 0x118]
	0x028BB028 MOV X2, X31
	0x028BB02C MOV X3, X21
	0x028BB030 MOV X4, X31
	0x028BB034 MOV W5, W31
	0x028BB038 BLR X23
	0x028BB03C LDR X0, [X19 + 0x20]
	0x028BB040 LDRB W8, [X0 + 0x135]
	0x028BB044 TBNZ X8, 0x0, 0x28BB04C
	0x028BB048 BL 0x1C5C684
	0x028BB04C LDR X8, [X0 + 0xC0]
	0x028BB050 LDR X0, [X8 + 0x38]
	0x028BB054 LDRB W8, [X0 + 0x135]
	0x028BB058 TBNZ X8, 0x0, 0x28BB060
	0x028BB05C BL 0x1C5C684
	0x028BB060 LDR X8, [X0 + 0xB8]
	0x028BB064 STR X22, [X8]
	0x028BB068 LDR X0, [X19 + 0x20]
	0x028BB06C LDRB W8, [X0 + 0x135]
	0x028BB070 TBNZ X8, 0x0, 0x28BB078
	0x028BB074 BL 0x1C5C684
	0x028BB078 LDR X8, [X0 + 0xC0]
	0x028BB07C LDR X0, [X8 + 0x38]
	0x028BB080 LDRB W8, [X0 + 0x135]
	0x028BB084 TBNZ X8, 0x0, 0x28BB09C
	0x028BB088 LDP X20, X19, [X31 + 0x30]
	0x028BB08C LDP X22, X21, [X31 + 0x20]
	0x028BB090 LDP X24, X23, [X31 + 0x10]
	0x028BB094 LDR X30, [X31], #0x40
	0x028BB098 B 0x1C5C684
	0x028BB09C LDP X20, X19, [X31 + 0x30]
	0x028BB0A0 LDP X22, X21, [X31 + 0x20]
	0x028BB0A4 LDP X24, X23, [X31 + 0x10]
	0x028BB0A8 LDR X30, [X31], #0x40
	0x028BB0AC RET
	0x028BB0B0 STP X30, X21, [X31 - 0x20]!
	0x028BB0B4 STP X20, X19, [X31 + 0x10]
	0x028BB0B8 MOV X19, X1
	0x028BB0BC MOV X1, X31
	0x028BB0C0 MOV X20, X0
	0x028BB0C4 AND W21, W2, 0x1
	0x028BB0C8 BL 0x1D36B98
	0x028BB0CC STR X19, [X20 + 0x18]
	0x028BB0D0 STRB W21, [X20 + 0x20]
	0x028BB0D4 LDP X20, X19, [X31 + 0x10]
	0x028BB0D8 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Move X0, [X0+32]
	009 Move W8, [X0+309]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {15}
	014 Call 0x1C5D684
	015 Move X8, [X0+192]
	016 Move X0, [X8+224]
	017 Move W8, [X0+309]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {23}
	022 Call 0x1C5D684
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, [X19+32]
	028 Move W8, [X0+309]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {34}
	033 Call 0x1C5D684
	034 Move X8, [X0+192]
	035 Move X0, [X8+224]
	036 Move W8, [X0+309]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {42}
	041 Call 0x1C5D684
	042 Move X8, [X19+32]
	043 Move X9, [X0+184]
	044 Move W10, [X8+309]
	045 Move X21, [X9]
	046 Move TEMP, X10
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {53}
	050 Move X0, X8
	051 Call 0x1C5D684
	052 Move X8, X0
	053 Move X8, [X8+192]
	054 Move X0, [X8+240]
	055 Move W8, [X0+309]
	056 Move TEMP, X8
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfEqual {61}
	060 Call 0x1C5D684
	061 Call 0x1C17F10
	062 Move X8, [X19+32]
	063 Move X20, X0
	064 Add X9, X8, 309
	065 NotImplemented "Instruction LDRH not yet implemented."
	066 Move TEMP, X9
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {75}
	070 Move X0, X8
	071 Call 0x1C5D684
	072 Move X8, [X19+32]
	073 Add X9, X8, 309
	074 NotImplemented "Instruction LDRH not yet implemented."
	075 Move X0, X8
	076 Move X10, [X0+192]
	077 Move X22, [X10+232]
	078 Move TEMP, X9
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfEqual {85}
	082 Move X0, X8
	083 Call 0x1C5D684
	084 Move X8, X0
	085 Move X8, [X8+192]
	086 Move X0, X20
	087 Move X1, X21
	088 Move X2, X22
	089 Move X3, [X8+248]
	090 Call Func`1<Object>..ctor, X0, X1, X2
	091 Move X0, [X19+32]
	092 Move W8, [X0+309]
	093 Move TEMP, X8
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfEqual {98}
	097 Call 0x1C5D684
	098 Move X8, [X0+192]
	099 Move X0, [X8+224]
	100 Move W8, [X0+309]
	101 Move TEMP, X8
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfEqual {106}
	105 Call 0x1C5D684
	106 Move X8, [X19+32]
	107 Move X9, [X0+184]
	108 Move W10, [X8+309]
	109 Move X22, [X9]
	110 Move TEMP, X10
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfEqual {117}
	114 Move X0, X8
	115 Call 0x1C5D684
	116 Move X8, X0
	117 Move X8, [X8+192]
	118 Move X0, [X8+264]
	119 Move W8, [X0+309]
	120 Move TEMP, X8
	121 And TEMP, TEMP, 1
	122 Compare TEMP, 1
	123 JumpIfEqual {125}
	124 Call 0x1C5D684
	125 Call 0x1C17F10
	126 Move X8, [X19+32]
	127 Move X21, X0
	128 Add X9, X8, 309
	129 NotImplemented "Instruction LDRH not yet implemented."
	130 Move TEMP, X9
	131 And TEMP, TEMP, 1
	132 Compare TEMP, 1
	133 JumpIfEqual {139}
	134 Move X0, X8
	135 Call 0x1C5D684
	136 Move X8, [X19+32]
	137 Add X9, X8, 309
	138 NotImplemented "Instruction LDRH not yet implemented."
	139 Move X0, X8
	140 Move X10, [X0+192]
	141 Move X23, [X10+256]
	142 Move TEMP, X9
	143 And TEMP, TEMP, 1
	144 Compare TEMP, 1
	145 JumpIfEqual {149}
	146 Move X0, X8
	147 Call 0x1C5D684
	148 Move X8, X0
	149 Move X8, [X8+192]
	150 Move X0, X21
	151 Move X1, X22
	152 Move X2, X23
	153 Move X3, [X8+272]
	154 Call Action`1<Object>..ctor, X0, X1, X2
	155 Move X0, [X19+32]
	156 Move W8, [X0+309]
	157 Move TEMP, X8
	158 And TEMP, TEMP, 1
	159 Compare TEMP, 1
	160 JumpIfEqual {162}
	161 Call 0x1C5D684
	162 Move X8, [X0+192]
	163 Move X0, [X8+48]
	164 Move W8, [X0+309]
	165 Move TEMP, X8
	166 And TEMP, TEMP, 1
	167 Compare TEMP, 1
	168 JumpIfEqual {170}
	169 Call 0x1C5D684
	170 Call 0x1C17F10
	171 Move X8, [X19+32]
	172 Move X22, X0
	173 Move W9, [X8+309]
	174 Move TEMP, X9
	175 And TEMP, TEMP, 1
	176 Compare TEMP, 1
	177 JumpIfEqual {181}
	178 Move X0, X8
	179 Call 0x1C5D684
	180 Move X8, X0
	181 Move X8, [X8+192]
	182 Move W6, 0x2710
	183 Move X0, X22
	184 Move X1, X20
	185 Move X7, [X8+280]
	186 Move X2, X31
	187 Move X3, X21
	188 Move X4, X31
	189 Move W5, W31
	190 Call 0x2EF1EC8, X0, X1, X2, X3, X4, X5, X6
	191 Move X0, [X19+32]
	192 Move W8, [X0+309]
	193 Move TEMP, X8
	194 And TEMP, TEMP, 1
	195 Compare TEMP, 1
	196 JumpIfEqual {198}
	197 Call 0x1C5D684
	198 Move X8, [X0+192]
	199 Move X0, [X8+56]
	200 Move W8, [X0+309]
	201 Move TEMP, X8
	202 And TEMP, TEMP, 1
	203 Compare TEMP, 1
	204 JumpIfEqual {206}
	205 Call 0x1C5D684
	206 Move X8, [X0+184]
	207 Move [X8], X22
	208 Move X0, [X19+32]
	209 Move W8, [X0+309]
	210 Move TEMP, X8
	211 And TEMP, TEMP, 1
	212 Compare TEMP, 1
	213 JumpIfEqual {215}
	214 Call 0x1C5D684
	215 Move X8, [X0+192]
	216 Move X0, [X8+56]
	217 Move W8, [X0+309]
	218 Move TEMP, X8
	219 And TEMP, TEMP, 1
	220 Compare TEMP, 1
	221 JumpIfEqual {230}
	222 Move X20, [X31+32]
	223 Move X19, [X31+40]
	224 Move X22, [X31+16]
	225 Move X21, [X31+24]
	226 Move X30, [X31+48]
	227 Move X23, [X31+56]
	228 Call 0x1C5D684
	229 Return 
	230 Move X20, [X31+32]
	231 Move X19, [X31+40]
	232 Move X22, [X31+16]
	233 Move X21, [X31+24]
	234 Move X30, [X31+48]
	235 Move X23, [X31+56]
	236 Return 

