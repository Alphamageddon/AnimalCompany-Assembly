Type: UnityEngine.XR.Interaction.Toolkit.Utilities.BurstMathUtility/FastSafeDivide_00000932$BurstDirectCall

Method: System.Void GetFunctionPointerDiscard(ref System.IntPtr param_0)

Disassembly:
	0x03B8C6B4 FMOV W8, S8
	0x03B8C6B8 AND W8, W8, 0x7FFFFFFF
	0x03B8C6BC MOVZ W9, 0x7F800000
	0x03B8C6C0 CMP W8, W9
	0x03B8C6C4 FCCMP S10, S8, 0x8, LS
	0x03B8C6C8 FCSEL S0, S10, S8, MI
	0x03B8C6CC FMOV W8, S0
	0x03B8C6D0 AND W8, W8, 0x7FFFFFFF
	0x03B8C6D4 FMOV S1, 0.125
	0x03B8C6D8 CMP W8, W9
	0x03B8C6DC FCCMP S0, S1, 0x8, LS
	0x03B8C6E0 FCSEL S0, S1, S0, MI
	0x03B8C6E4 STR S0, [X21]
	0x03B8C6E8 FADD S0, S0, S8
	0x03B8C6EC FMUL S0, S0, S9
	0x03B8C6F0 STR S0, [X20]
	0x03B8C6F4 LDR V1, [X22]
	0x03B8C6F8 LDR V2, [X22 + 0x8]
	0x03B8C6FC FSUB S0, S8, S0
	0x03B8C700 LDP X22, X21, [X31 + 0x30]
	0x00000000 INVALID
	0x03B8C708 FMUL S0, S0, S2
	0x03B8C70C STR D1, [X19]
	0x03B8C710 STR S0, [X19 + 0x8]
	0x03B8C714 LDP X20, X19, [X31 + 0x40]
	0x03B8C718 LDP X24, X23, [X31 + 0x20]
	0x03B8C71C LDR X30, [X31 + 0x18]
	0x03B8C720 LDP D9, D8, [X31 + 0x8]
	0x03B8C724 LDR V10, [X31], #0x50
	0x03B8C728 RET
	0x03B8C72C STR X30, [X31 - 0x40]!
	0x03B8C730 STP X24, X23, [X31 + 0x10]
	0x03B8C734 STP X22, X21, [X31 + 0x20]
	0x03B8C738 STP X20, X19, [X31 + 0x30]
	0x03B8C73C ADRP X23, 0x856000
	0x03B8C740 ADRP X24, 0x5D0000
	0x03B8C744 LDRB W8, [X23 + 0xB60]
	0x03B8C748 LDR X24, [X24 + 0x298]
	0x03B8C74C MOV X19, X3
	0x03B8C750 MOV X20, X2
	0x03B8C754 MOV X21, X1
	0x03B8C758 MOV X22, X0
	0x03B8C75C TBNZ X8, 0x0, 0x3B8C774
	0x03B8C760 ADRP X0, 0x5D0000
	0x03B8C764 LDR X0, [X0 + 0x298]
	0x03B8C768 BL 0x1C16CF4
	0x03B8C76C MOVZ W8, 0x1
	0x03B8C770 STRB W8, [X23 + 0xB60]
	0x03B8C774 LDR X0, [X24]
	0x03B8C778 LDR W8, [X0 + 0xE0]
	0x03B8C77C CBNZ W8, 0x3B8C784
	0x03B8C780 BL 0x1C16DFC
	0x03B8C784 MOV X0, X22
	0x03B8C788 MOV X1, X21
	0x03B8C78C MOV X2, X20
	0x03B8C790 MOV X3, X19
	0x03B8C794 LDP X20, X19, [X31 + 0x30]
	0x03B8C798 LDP X22, X21, [X31 + 0x20]
	0x03B8C79C LDP X24, X23, [X31 + 0x10]
	0x03B8C7A0 LDR X30, [X31], #0x40
	0x03B8C7A4 B 0x3B8C7A8
	0x03B8C7A8 STP D13, D12, [X31 - 0x70]!
	0x03B8C7AC STP D11, D10, [X31 + 0x10]
	0x03B8C7B0 STP D9, D8, [X31 + 0x20]
	0x03B8C7B4 STR X30, [X31 + 0x30]
	0x03B8C7B8 STP X24, X23, [X31 + 0x40]
	0x03B8C7BC STP X22, X21, [X31 + 0x50]
	0x03B8C7C0 STP X20, X19, [X31 + 0x60]
	0x03B8C7C4 ADRP X23, 0x856000
	0x03B8C7C8 ADRP X24, 0x58F000
	0x03B8C7CC LDRB W8, [X23 + 0xB6F]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x857000
	008 Move X23, 0x5D1000
	009 Move W8, [X20+2891]
	010 Move X23, [X23+232]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x590000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0x5D1000
	020 Move X0, [X0+552]
	021 Call 0x1C17CF4
	022 Move X0, 0x5D1000
	023 Move X0, [X0+232]
	024 Call 0x1C17CF4
	025 Move X0, 0x5D1000
	026 Move X0, [X0+560]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2891], W8
	030 Move X8, [X23]
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X23]
	037 Move X9, [X8+184]
	038 Move X10, [X9]
	039 Compare X10, 0
	040 JumpIfNotEqual {70}
	041 Move W10, [X8+224]
	042 Compare W10, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X23]
	047 Move X9, [X8+184]
	048 Move X8, 0x590000
	049 Move X20, [X9+8]
	050 Move X8, [X8+2120]
	051 Move X0, [X8]
	052 Move X8, 0x5D1000
	053 Move X8, [X8+552]
	054 Move X21, [X8]
	055 Move X8, 0x5D1000
	056 Move X8, [X8+560]
	057 Move W9, [X0+224]
	058 Move X22, [X8]
	059 Compare W9, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X22
	065 Move X3, X31
	066 Call BurstCompiler.GetILPPMethodFunctionPointer2, X0, X1, X2
	067 Move X8, [X23]
	068 Move X9, [X8+184]
	069 Move [X9], X0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {76}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, [X23]
	076 Move X8, [X8+184]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X8, [X8]
	080 Move [X19], X8
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 

Method: System.IntPtr GetFunctionPointer()

Disassembly:
	0x03B8C7D0 LDR X24, [X24 + 0x848]
	0x03B8C7D4 MOV X19, X3
	0x03B8C7D8 MOV X20, X2
	0x03B8C7DC MOV X22, X1
	0x03B8C7E0 MOV X21, X0
	0x03B8C7E4 TBNZ X8, 0x0, 0x3B8C808
	0x03B8C7E8 ADRP X0, 0x58F000
	0x03B8C7EC LDR X0, [X0 + 0x848]
	0x03B8C7F0 BL 0x1C16CF4
	0x03B8C7F4 ADRP X0, 0x5D0000
	0x03B8C7F8 LDR X0, [X0 + 0x298]
	0x03B8C7FC BL 0x1C16CF4
	0x03B8C800 MOVZ W8, 0x1
	0x03B8C804 STRB W8, [X23 + 0xB6F]
	0x03B8C808 LDR X0, [X24]
	0x03B8C80C LDR W8, [X0 + 0xE0]
	0x03B8C810 CBNZ W8, 0x3B8C818
	0x03B8C814 BL 0x1C16DFC
	0x03B8C818 MOV X0, X31
	0x03B8C81C BL 0x36FA670
	0x03B8C820 TBZ X0, 0x0, 0x3B8C878
	0x03B8C824 ADRP X8, 0x5D0000
	0x03B8C828 LDR X8, [X8 + 0x298]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x857000
	005 Move X19, 0x5D1000
	006 Move W8, [X20+2892]
	007 Move X19, [X19+232]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5D1000
	013 Move X0, [X0+232]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2892], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 8
	024 Call FastSafeDivide_00000932$BurstDirectCall.GetFunctionPointerDiscard, X0
	025 Move X0, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void Constructor()

Disassembly:
	0x03B8C82C LDR X0, [X8]
	0x03B8C830 LDR W8, [X0 + 0xE0]
	0x03B8C834 CBNZ W8, 0x3B8C83C
	0x03B8C838 BL 0x1C16DFC
	0x03B8C83C BL 0x3B8D668
	0x03B8C840 CBZ X0, 0x3B8C878
	0x03B8C844 MOV X4, X0
	0x03B8C848 MOV X0, X21
	0x03B8C84C MOV X1, X22
	0x03B8C850 MOV X2, X20
	0x03B8C854 MOV X3, X19
	0x03B8C858 LDP X20, X19, [X31 + 0x60]
	0x03B8C85C LDP X22, X21, [X31 + 0x50]
	0x03B8C860 LDP X24, X23, [X31 + 0x40]
	0x03B8C864 LDR X30, [X31 + 0x30]
	0x03B8C868 LDP D9, D8, [X31 + 0x20]
	0x03B8C86C LDP D11, D10, [X31 + 0x10]
	0x03B8C870 LDP D13, D12, [X31], #0x70
	0x03B8C874 BR X4
	0x03B8C878 LDP S0, S1, [X22]
	0x03B8C87C LDP S3, S4, [X21]
	0x03B8C880 LDR V2, [X22 + 0x8]
	0x03B8C884 LDR V5, [X21 + 0x8]
	0x03B8C888 LDP S6, S7, [X20]
	0x03B8C88C FSUB S8, S0, S3
	0x03B8C890 LDR V0, [X20 + 0x8]
	0x03B8C894 ADRP X20, 0x855000
	0x03B8C898 FSUB S10, S1, S4
	0x03B8C89C LDRB W8, [X20 + 0x585]
	0x03B8C8A0 FSUB S9, S2, S5
	0x03B8C8A4 FMUL S1, S8, S6
	0x03B8C8A8 FMUL S2, S10, S7
	0x03B8C8AC FADD S1, S1, S2
	0x03B8C8B0 FMUL S2, S9, S0
	0x03B8C8B4 FADD S1, S2, S1
	0x03B8C8B8 FMUL S11, S6, S1
	0x03B8C8BC FMUL S12, S7, S1
	0x03B8C8C0 FMUL S13, S0, S1
	0x03B8C8C4 CBNZ W8, 0x3B8C8DC
	0x03B8C8C8 ADRP X0, 0x567000
	0x03B8C8CC LDR X0, [X0 + 0x5A8]
	0x03B8C8D0 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x857000
	006 Move X19, 0x5D1000
	007 Move X20, 0x590000
	008 Move W8, [X21+2893]
	009 Move X19, [X19+568]
	010 Move X20, [X20+2120]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x590000
	016 Move X0, [X0+2120]
	017 Call 0x1C17CF4
	018 Move X0, 0x5D1000
	019 Move X0, [X0+568]
	020 Call 0x1C17CF4
	021 Move X0, 0x5D1000
	022 Move X0, [X0+232]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2893], W8
	026 Move X0, [X20]
	027 Move X20, 0x5D1000
	028 Move X19, [X19]
	029 Move W8, [X0+224]
	030 Move X20, [X20+232]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call BurstCompiler.CompileILPPMethod2, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move [X8+8], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void Initialize()

Disassembly:
	0x03B8C8D4 MOVZ W8, 0x1

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B8C8D8 STRB W8, [X20 + 0x585]

ISIL:
	001 Call FastSafeDivide_00000932$BurstDirectCall.Constructor
	002 Return 

Method: System.Void Invoke(in Unity.Mathematics.float3 a, in Unity.Mathematics.float3 b, out Unity.Mathematics.float3 result, System.Single tolerance = 1E-06)

Disassembly:
	0x03B88BA8 RET
	0x03B88BAC B 0x3B88B00
	0x03B88BB0 STP X30, X21, [X31 - 0x20]!
	0x03B88BB4 STP X20, X19, [X31 + 0x10]
	0x03B88BB8 LDR X8, [X2 + 0x8]
	0x03B88BBC STP X1, X2, [X0 + 0x20]
	0x03B88BC0 MOV X19, X0
	0x03B88BC4 MOV X20, X1
	0x03B88BC8 STR X8, [X0 + 0x10]
	0x03B88BCC LDRB W21, [X2 + 0x52]
	0x03B88BD0 STR X0, [X0 + 0x40]
	0x03B88BD4 MOV X0, X2
	0x03B88BD8 BL 0x1C16D84
	0x03B88BDC TBZ X0, 0x0, 0x3B88BF4
	0x03B88BE0 CMP W21, 0x3
	0x03B88BE4 B.NE 0x3B88C10
	0x03B88BE8 ADRP X8, 0xFFFFFFFFFE075000
	0x03B88BEC ADD X8, X8, 0xF50
	0x03B88BF0 B 0x3B88C04
	0x03B88BF4 CMP W21, 0x2
	0x03B88BF8 B.NE 0x3B88C0C
	0x03B88BFC ADRP X8, 0xFFFFFFFFFE075000
	0x03B88C00 ADD X8, X8, 0xF38
	0x03B88C04 STR X8, [X19 + 0x18]
	0x03B88C08 B 0x3B88C20
	0x03B88C0C CBZ X20, 0x3B88C38
	0x03B88C10 LDR X8, [X19 + 0x10]
	0x03B88C14 LDR X9, [X19 + 0x20]
	0x03B88C18 STR X8, [X19 + 0x18]
	0x03B88C1C STR X9, [X19 + 0x40]
	0x03B88C20 ADRP X8, 0xFFFFFFFFFE075000
	0x03B88C24 ADD X8, X8, 0xED8
	0x03B88C28 STR X8, [X19 + 0x38]
	0x03B88C2C LDP X20, X19, [X31 + 0x10]
	0x03B88C30 LDP X30, X21, [X31], #0x20
	0x03B88C34 RET
	0x03B88C38 ADRP X1, 0xFFFFFFFFFCF93000
	0x03B88C3C ADD X1, X1, 0xEE3
	0x03B88C40 MOV X0, X31
	0x03B88C44 BL 0x1C16F3C
	0x03B88C48 MOV X1, X31
	0x03B88C4C BL 0x1C16DEC
	0x03B88C50 LDR X8, [X0 + 0x40]
	0x03B88C54 LDR X5, [X0 + 0x18]
	0x03B88C58 LDR X4, [X0 + 0x28]
	0x03B88C5C MOV X0, X8
	0x03B88C60 BR X5
	0x03B88C64 SUB X31, X31, 0x70
	0x03B88C68 STR X30, [X31 + 0x20]
	0x03B88C6C STP X26, X25, [X31 + 0x30]
	0x03B88C70 STP X24, X23, [X31 + 0x40]
	0x03B88C74 STP X22, X21, [X31 + 0x50]
	0x03B88C78 STP X20, X19, [X31 + 0x60]
	0x03B88C7C ADRP X26, 0x85A000
	0x03B88C80 ADRP X25, 0x596000
	0x03B88C84 LDRB W8, [X26 + 0xB13]
	0x03B88C88 LDR X25, [X25 + 0x838]
	0x03B88C8C MOV X19, X5
	0x03B88C90 MOV X20, X4
	0x03B88C94 MOV X22, X3
	0x03B88C98 MOV X23, X2
	0x03B88C9C MOV X24, X1
	0x03B88CA0 MOV X21, X0
	0x03B88CA4 TBNZ X8, 0x0, 0x3B88CBC
	0x03B88CA8 ADRP X0, 0x596000
	0x03B88CAC LDR X0, [X0 + 0x838]
	0x03B88CB0 BL 0x1C16CF4
	0x03B88CB4 MOVZ W8, 0x1
	0x03B88CB8 STRB W8, [X26 + 0xB13]
	0x03B88CBC LDR X0, [X25]
	0x03B88CC0 MOV X1, X24
	0x03B88CC4 STR X31, [X31 + 0x18]
	0x03B88CC8 BL 0x1C16E04
	0x03B88CCC LDR X8, [X25]

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x85B000
	009 Move X23, 0x594000
	010 Move W8, [X22+2894]
	011 Move X23, [X23+2120]
	012 Move V8, V0
	013 Move X19, X2
	014 Move X20, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x594000
	021 Move X0, [X0+2120]
	022 Call 0x1C17CF4
	023 Move X0, 0x5D5000
	024 Move X0, [X0+232]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+2894], W8
	028 Move X0, [X23]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call BurstCompiler.get_IsEnabled
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {62}
	039 Move X8, 0x5D5000
	040 Move X8, [X8+232]
	041 Move X0, [X8]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Call FastSafeDivide_00000932$BurstDirectCall.GetFunctionPointer
	047 Compare X0, 0
	048 JumpIfEqual {62}
	049 Move X3, X0
	050 Move X0, X21
	051 Move X1, X20
	052 Move X2, X19
	053 Move X20, [X31+48]
	054 Move X19, [X31+56]
	055 Move X22, [X31+32]
	056 Move X21, [X31+40]
	057 Move X30, [X31+16]
	058 Move X23, [X31+24]
	059 Move V0, V8
	060 Move V8, [X31+64]
	061 CallNoReturn X3
	062 Move [X19+8], W31
	063 Move [X19], X31
	064 Move V0, [X21]
	065 Move V1, [X20]
	066 NotImplemented "Instruction FABD not yet implemented."
	067 NotImplemented "Instruction FCMP not yet implemented."
	068 NotImplemented "Instruction FDIV not yet implemented."
	069 Move [X19], S0
	070 Move V0, [X21+4]
	071 Move V1, [X20+4]
	072 NotImplemented "Instruction FABD not yet implemented."
	073 NotImplemented "Instruction FCMP not yet implemented."
	074 NotImplemented "Instruction FDIV not yet implemented."
	075 Move [X19+4], S0
	076 Move V0, [X21+8]
	077 Move V1, [X20+8]
	078 NotImplemented "Instruction FABD not yet implemented."
	079 NotImplemented "Instruction FCMP not yet implemented."
	080 NotImplemented "Instruction FDIV not yet implemented."
	081 Move [X19+8], S0
	082 Move X20, [X31+48]
	083 Move X19, [X31+56]
	084 Move X22, [X31+32]
	085 Move X21, [X31+40]
	086 Move X30, [X31+16]
	087 Move X23, [X31+24]
	088 Move V8, [X31+64]
	089 Return 

