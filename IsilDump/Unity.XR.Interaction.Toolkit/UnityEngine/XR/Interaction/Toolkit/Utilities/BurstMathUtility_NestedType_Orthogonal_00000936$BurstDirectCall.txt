Type: UnityEngine.XR.Interaction.Toolkit.Utilities.BurstMathUtility/Orthogonal_00000936$BurstDirectCall

Method: System.Void GetFunctionPointerDiscard(ref System.IntPtr param_0)

Disassembly:
	0x03B8D198 BL 0x1C16CF4
	0x03B8D19C ADRP X0, 0x5CF000
	0x03B8D1A0 LDR X0, [X0 + 0x2B8]
	0x03B8D1A4 BL 0x1C16CF4
	0x03B8D1A8 ADRP X0, 0x5CF000
	0x03B8D1AC LDR X0, [X0 + 0x290]
	0x03B8D1B0 BL 0x1C16CF4
	0x03B8D1B4 ADRP X0, 0x5CF000
	0x03B8D1B8 LDR X0, [X0 + 0x2C0]
	0x03B8D1BC BL 0x1C16CF4
	0x03B8D1C0 MOVZ W8, 0x1
	0x03B8D1C4 STRB W8, [X20 + 0xB67]
	0x03B8D1C8 LDR X8, [X23]
	0x03B8D1CC LDR W9, [X8 + 0xE0]
	0x03B8D1D0 CBNZ W9, 0x3B8D1E0
	0x03B8D1D4 MOV X0, X8
	0x03B8D1D8 BL 0x1C16DFC
	0x03B8D1DC LDR X8, [X23]
	0x03B8D1E0 LDR X9, [X8 + 0xB8]
	0x03B8D1E4 LDR X10, [X9]
	0x03B8D1E8 CBNZ X10, 0x3B8D258
	0x03B8D1EC LDR W10, [X8 + 0xE0]
	0x03B8D1F0 CBNZ W10, 0x3B8D204
	0x03B8D1F4 MOV X0, X8
	0x03B8D1F8 BL 0x1C16DFC
	0x03B8D1FC LDR X8, [X23]
	0x03B8D200 LDR X9, [X8 + 0xB8]
	0x03B8D204 ADRP X8, 0x58E000
	0x03B8D208 LDR X20, [X9 + 0x8]
	0x03B8D20C LDR X8, [X8 + 0x848]
	0x03B8D210 LDR X0, [X8]
	0x03B8D214 ADRP X8, 0x5CF000
	0x03B8D218 LDR X8, [X8 + 0x2B8]
	0x03B8D21C LDR X21, [X8]
	0x03B8D220 ADRP X8, 0x5CF000
	0x03B8D224 LDR X8, [X8 + 0x2C0]
	0x03B8D228 LDR W9, [X0 + 0xE0]
	0x03B8D22C LDR X22, [X8]
	0x03B8D230 CBNZ W9, 0x3B8D238
	0x03B8D234 BL 0x1C16DFC
	0x03B8D238 MOV X0, X20
	0x03B8D23C MOV X1, X21
	0x03B8D240 MOV X2, X22
	0x03B8D244 MOV X3, X31
	0x03B8D248 BL 0x36FAD70
	0x03B8D24C LDR X8, [X23]
	0x03B8D250 LDR X9, [X8 + 0xB8]
	0x03B8D254 STR X0, [X9]
	0x03B8D258 LDR W9, [X8 + 0xE0]
	0x03B8D25C CBNZ W9, 0x3B8D26C
	0x03B8D260 MOV X0, X8
	0x03B8D264 BL 0x1C16DFC
	0x03B8D268 LDR X8, [X23]
	0x03B8D26C LDR X8, [X8 + 0xB8]
	0x03B8D270 LDP X22, X21, [X31 + 0x10]
	0x03B8D274 LDR X8, [X8]
	0x03B8D278 STR X8, [X19]
	0x03B8D27C LDP X20, X19, [X31 + 0x20]
	0x03B8D280 LDP X30, X23, [X31], #0x30
	0x03B8D284 RET
	0x03B8D288 STR X30, [X31 - 0x20]!
	0x03B8D28C STP X20, X19, [X31 + 0x10]
	0x03B8D290 ADRP X20, 0x855000
	0x03B8D294 ADRP X19, 0x5CF000
	0x03B8D298 LDRB W8, [X20 + 0xB68]
	0x03B8D29C LDR X19, [X19 + 0x290]
	0x03B8D2A0 TBNZ X8, 0x0, 0x3B8D2B8
	0x03B8D2A4 ADRP X0, 0x5CF000
	0x03B8D2A8 LDR X0, [X0 + 0x290]
	0x03B8D2AC BL 0x1C16CF4
	0x03B8D2B0 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x856000
	008 Move X23, 0x5D0000
	009 Move W8, [X20+2906]
	010 Move X23, [X23+256]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x58F000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0x5D0000
	020 Move X0, [X0+624]
	021 Call 0x1C17CF4
	022 Move X0, 0x5D0000
	023 Move X0, [X0+256]
	024 Call 0x1C17CF4
	025 Move X0, 0x5D0000
	026 Move X0, [X0+632]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2906], W8
	030 Move X8, [X23]
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X23]
	037 Move X9, [X8+184]
	038 Move X10, [X9]
	039 Compare X10, 0
	040 JumpIfNotEqual {70}
	041 Move W10, [X8+224]
	042 Compare W10, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X23]
	047 Move X9, [X8+184]
	048 Move X8, 0x58F000
	049 Move X20, [X9+8]
	050 Move X8, [X8+2120]
	051 Move X0, [X8]
	052 Move X8, 0x5D0000
	053 Move X8, [X8+624]
	054 Move X21, [X8]
	055 Move X8, 0x5D0000
	056 Move X8, [X8+632]
	057 Move W9, [X0+224]
	058 Move X22, [X8]
	059 Compare W9, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X22
	065 Move X3, X31
	066 Call BurstCompiler.GetILPPMethodFunctionPointer2, X0, X1, X2
	067 Move X8, [X23]
	068 Move X9, [X8+184]
	069 Move [X9], X0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {76}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, [X23]
	076 Move X8, [X8+184]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X8, [X8]
	080 Move [X19], X8
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 

Method: System.IntPtr GetFunctionPointer()

Disassembly:
	0x03B8D2B4 STRB W8, [X20 + 0xB68]
	0x03B8D2B8 LDR X0, [X19]
	0x03B8D2BC STR X31, [X31 + 0x8]
	0x03B8D2C0 LDR W8, [X0 + 0xE0]
	0x03B8D2C4 CBNZ W8, 0x3B8D2CC
	0x03B8D2C8 BL 0x1C16DFC
	0x03B8D2CC ADD X0, X31, 0x8
	0x03B8D2D0 BL 0x3B8D16C
	0x03B8D2D4 LDR X0, [X31 + 0x8]
	0x03B8D2D8 LDP X20, X19, [X31 + 0x10]
	0x03B8D2DC LDR X30, [X31], #0x20
	0x03B8D2E0 RET
	0x03B8D2E4 STP X30, X21, [X31 - 0x20]!
	0x03B8D2E8 STP X20, X19, [X31 + 0x10]
	0x03B8D2EC ADRP X21, 0x855000
	0x03B8D2F0 ADRP X19, 0x5CF000
	0x03B8D2F4 ADRP X20, 0x58E000
	0x03B8D2F8 LDRB W8, [X21 + 0xB69]
	0x03B8D2FC LDR X19, [X19 + 0x2C8]
	0x03B8D300 LDR X20, [X20 + 0x848]
	0x03B8D304 TBNZ X8, 0x0, 0x3B8D334
	0x03B8D308 ADRP X0, 0x58E000
	0x03B8D30C LDR X0, [X0 + 0x848]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x856000
	005 Move X19, 0x5D0000
	006 Move W8, [X20+2907]
	007 Move X19, [X19+256]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5D0000
	013 Move X0, [X0+256]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2907], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 8
	024 Call Orthogonal_00000936$BurstDirectCall.GetFunctionPointerDiscard, X0
	025 Move X0, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void Constructor()

Disassembly:
	0x03B8D310 BL 0x1C16CF4
	0x03B8D314 ADRP X0, 0x5CF000
	0x03B8D318 LDR X0, [X0 + 0x2C8]
	0x03B8D31C BL 0x1C16CF4
	0x03B8D320 ADRP X0, 0x5CF000
	0x03B8D324 LDR X0, [X0 + 0x290]
	0x03B8D328 BL 0x1C16CF4
	0x03B8D32C MOVZ W8, 0x1
	0x03B8D330 STRB W8, [X21 + 0xB69]
	0x03B8D334 LDR X0, [X20]
	0x03B8D338 ADRP X20, 0x5CF000
	0x03B8D33C LDR X19, [X19]
	0x03B8D340 LDR W8, [X0 + 0xE0]
	0x03B8D344 LDR X20, [X20 + 0x290]
	0x03B8D348 CBNZ W8, 0x3B8D350
	0x03B8D34C BL 0x1C16DFC
	0x03B8D350 MOV X0, X19
	0x03B8D354 MOV X1, X31
	0x03B8D358 BL 0x36FA754
	0x03B8D35C LDR X8, [X20]
	0x03B8D360 MOV X19, X0
	0x03B8D364 LDR W9, [X8 + 0xE0]
	0x03B8D368 CBNZ W9, 0x3B8D378
	0x03B8D36C MOV X0, X8
	0x03B8D370 BL 0x1C16DFC
	0x03B8D374 LDR X8, [X20]
	0x03B8D378 LDR X8, [X8 + 0xB8]
	0x03B8D37C STR X19, [X8 + 0x8]
	0x03B8D380 LDP X20, X19, [X31 + 0x10]
	0x03B8D384 LDP X30, X21, [X31], #0x20
	0x03B8D388 RET
	0x03B8D38C RET
	0x03B8D390 B 0x3B8D2E4
	0x03B8D394 STP X30, X21, [X31 - 0x20]!
	0x03B8D398 STP X20, X19, [X31 + 0x10]
	0x03B8D39C LDR X8, [X2 + 0x8]
	0x03B8D3A0 STP X1, X2, [X0 + 0x20]
	0x03B8D3A4 MOV X19, X0
	0x03B8D3A8 MOV X20, X1
	0x03B8D3AC STR X8, [X0 + 0x10]
	0x03B8D3B0 LDRB W21, [X2 + 0x52]
	0x03B8D3B4 STR X0, [X0 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x856000
	006 Move X19, 0x5D0000
	007 Move X20, 0x58F000
	008 Move W8, [X21+2908]
	009 Move X19, [X19+640]
	010 Move X20, [X20+2120]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x58F000
	016 Move X0, [X0+2120]
	017 Call 0x1C17CF4
	018 Move X0, 0x5D0000
	019 Move X0, [X0+640]
	020 Call 0x1C17CF4
	021 Move X0, 0x5D0000
	022 Move X0, [X0+256]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2908], W8
	026 Move X0, [X20]
	027 Move X20, 0x5D0000
	028 Move X19, [X19]
	029 Move W8, [X0+224]
	030 Move X20, [X20+256]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call BurstCompiler.CompileILPPMethod2, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move [X8+8], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void Initialize()

Disassembly:
	0x03B8D3B8 MOV X0, X2

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B8D3BC BL 0x1C16D84

ISIL:
	001 Call Orthogonal_00000936$BurstDirectCall.Constructor
	002 Return 

Method: System.Void Invoke(in Unity.Mathematics.float3 input, out Unity.Mathematics.float3 result)

Disassembly:
	0x03B89004 LDR X4, [X0 + 0x28]
	0x03B89008 MOV X0, X8
	0x03B8900C BR X5
	0x03B89010 SUB X31, X31, 0x70
	0x03B89014 STP X30, X27, [X31 + 0x20]
	0x03B89018 STP X26, X25, [X31 + 0x30]
	0x03B8901C STP X24, X23, [X31 + 0x40]
	0x03B89020 STP X22, X21, [X31 + 0x50]
	0x03B89024 STP X20, X19, [X31 + 0x60]
	0x03B89028 ADRP X27, 0x859000
	0x03B8902C ADRP X26, 0x56A000
	0x03B89030 ADRP X25, 0x56B000
	0x03B89034 LDRB W8, [X27 + 0xB18]
	0x03B89038 LDR X26, [X26 + 0x5A0]
	0x03B8903C LDR X25, [X25 + 0x5A8]
	0x03B89040 MOV X19, X5
	0x03B89044 MOV X20, X4
	0x03B89048 MOV X22, X3
	0x03B8904C MOV X23, X2
	0x03B89050 MOV X24, X1
	0x03B89054 MOV X21, X0
	0x03B89058 TBNZ X8, 0x0, 0x3B8907C
	0x03B8905C ADRP X0, 0x56B000
	0x03B89060 LDR X0, [X0 + 0x5A8]
	0x03B89064 BL 0x1C16CF4
	0x03B89068 ADRP X0, 0x56A000
	0x03B8906C LDR X0, [X0 + 0x5A0]
	0x03B89070 BL 0x1C16CF4
	0x03B89074 MOVZ W8, 0x1
	0x03B89078 STRB W8, [X27 + 0xB18]
	0x03B8907C LDR X0, [X26]
	0x03B89080 MOV X1, X24
	0x03B89084 STR X31, [X31 + 0x18]
	0x03B89088 BL 0x1C16E04
	0x03B8908C LDR X8, [X26]
	0x03B89090 STR X0, [X31]
	0x03B89094 MOV X1, X23
	0x03B89098 MOV X0, X8
	0x03B8909C BL 0x1C16E04
	0x03B890A0 LDR X8, [X25]
	0x03B890A4 STR X0, [X31 + 0x8]
	0x03B890A8 MOV X1, X22
	0x03B890AC MOV X0, X8
	0x03B890B0 BL 0x1C16E04
	0x03B890B4 STR X0, [X31 + 0x10]
	0x03B890B8 ADD X1, X31, 0x0
	0x03B890BC MOV X0, X21
	0x03B890C0 MOV X2, X20
	0x03B890C4 MOV X3, X19
	0x03B890C8 BL 0x1C16CB0
	0x03B890CC LDP X20, X19, [X31 + 0x60]
	0x03B890D0 LDP X22, X21, [X31 + 0x50]
	0x03B890D4 LDP X24, X23, [X31 + 0x40]
	0x03B890D8 LDP X26, X25, [X31 + 0x30]
	0x03B890DC LDP X30, X27, [X31 + 0x20]
	0x03B890E0 ADD X31, X31, 0x70
	0x03B890E4 RET
	0x03B890E8 MOV X0, X1
	0x03B890EC MOV X1, X31
	0x03B890F0 B 0x1C16CB4
	0x03B890F4 STP X30, X23, [X31 - 0x30]!
	0x03B890F8 STP X22, X21, [X31 + 0x10]
	0x03B890FC STP X20, X19, [X31 + 0x20]
	0x03B89100 ADRP X20, 0x859000
	0x03B89104 ADRP X23, 0x5D3000
	0x03B89108 LDRB W8, [X20 + 0xB19]
	0x03B8910C LDR X23, [X23 + 0x98]
	0x03B89110 MOV X19, X0
	0x03B89114 TBNZ X8, 0x0, 0x3B89150
	0x03B89118 ADRP X0, 0x592000
	0x03B8911C LDR X0, [X0 + 0x848]
	0x03B89120 BL 0x1C16CF4
	0x03B89124 ADRP X0, 0x5D3000
	0x03B89128 LDR X0, [X0 + 0x138]
	0x03B8912C BL 0x1C16CF4
	0x03B89130 ADRP X0, 0x5D3000
	0x03B89134 LDR X0, [X0 + 0x98]
	0x03B89138 BL 0x1C16CF4
	0x03B8913C ADRP X0, 0x5D3000
	0x03B89140 LDR X0, [X0 + 0x140]
	0x03B89144 BL 0x1C16CF4
	0x03B89148 MOVZ W8, 0x1
	0x03B8914C STRB W8, [X20 + 0xB19]
	0x03B89150 LDR X8, [X23]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x85A000
	007 Move X22, 0x593000
	008 Move W8, [X21+2909]
	009 Move X22, [X22+2120]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x593000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0x5D4000
	020 Move X0, [X0+256]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+2909], W8
	024 Move X0, [X22]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X31
	030 Call BurstCompiler.get_IsEnabled
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {54}
	035 Move X8, 0x5D4000
	036 Move X8, [X8+256]
	037 Move X0, [X8]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Call Orthogonal_00000936$BurstDirectCall.GetFunctionPointer
	043 Compare X0, 0
	044 JumpIfEqual {54}
	045 Move X2, X0
	046 Move X0, X20
	047 Move X1, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 CallNoReturn X2
	054 Move S0, [X20]
	055 Move S2, [X20+4]
	056 Move V1, [X20+8]
	057 NotImplemented "Instruction FABS not yet implemented."
	058 NotImplemented "Instruction FABS not yet implemented."
	059 NotImplemented "Instruction FCMP not yet implemented."
	060 NotImplemented "Instruction FABS not yet implemented."
	061 NotImplemented "Instruction FCMP not yet implemented."
	062 Move S3, W31
	063 Multiply S0, S0, S3
	064 Multiply S4, S2, S3
	065 Multiply S3, S1, S3
	066 Subtract S2, S0, S2
	067 Subtract S3, S4, S3
	068 Subtract S0, S1, S0
	069 Move [X19], S3
	070 Move [X19+8], S0
	071 Move [X19+8], S2
	072 NotImplemented "Instruction FCMP not yet implemented."
	073 Move S3, W31
	074 Multiply S2, S2, S3
	075 Multiply S4, S1, S3
	076 Multiply S3, S0, S3
	077 Subtract S0, S0, S2
	078 Subtract S1, S2, S1
	079 Subtract S2, S4, S3
	080 Move [X19], S1
	081 Move [X19+8], S2
	082 Move [X19+8], S0
	083 Move S3, W31
	084 Multiply S4, S0, S3
	085 Multiply S1, S1, S3
	086 Multiply S3, S2, S3
	087 Subtract S3, S4, S3
	088 Subtract S2, S2, S1
	089 Subtract S0, S1, S0
	090 Move [X19], S2
	091 Move [X19+8], S0
	092 Move [X19+8], S3
	093 Move X20, [X31+32]
	094 Move X19, [X31+40]
	095 Move X22, [X31+16]
	096 Move X21, [X31+24]
	097 Move X30, [X31+48]
	098 Return 

