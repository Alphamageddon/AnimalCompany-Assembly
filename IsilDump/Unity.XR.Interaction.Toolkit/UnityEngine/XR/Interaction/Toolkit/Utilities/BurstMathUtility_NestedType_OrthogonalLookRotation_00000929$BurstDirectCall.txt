Type: UnityEngine.XR.Interaction.Toolkit.Utilities.BurstMathUtility/OrthogonalLookRotation_00000929$BurstDirectCall

Method: System.Void GetFunctionPointerDiscard(ref System.IntPtr param_0)

Disassembly:
	0x03B8A4B4 ADRP X19, 0x5D2000
	0x03B8A4B8 LDRB W8, [X20 + 0xB33]
	0x03B8A4BC LDR X19, [X19 + 0xC0]
	0x03B8A4C0 TBNZ X8, 0x0, 0x3B8A4D8
	0x03B8A4C4 ADRP X0, 0x5D2000
	0x03B8A4C8 LDR X0, [X0 + 0xC0]
	0x03B8A4CC BL 0x1C16CF4
	0x03B8A4D0 MOVZ W8, 0x1
	0x03B8A4D4 STRB W8, [X20 + 0xB33]
	0x03B8A4D8 LDR X0, [X19]
	0x03B8A4DC STR X31, [X31 + 0x8]
	0x03B8A4E0 LDR W8, [X0 + 0xE0]
	0x03B8A4E4 CBNZ W8, 0x3B8A4EC
	0x03B8A4E8 BL 0x1C16DFC
	0x03B8A4EC ADD X0, X31, 0x8
	0x03B8A4F0 BL 0x3B8A38C
	0x03B8A4F4 LDR X0, [X31 + 0x8]
	0x03B8A4F8 LDP X20, X19, [X31 + 0x10]
	0x03B8A4FC LDR X30, [X31], #0x20
	0x03B8A500 RET
	0x03B8A504 STP X30, X21, [X31 - 0x20]!
	0x03B8A508 STP X20, X19, [X31 + 0x10]
	0x03B8A50C ADRP X21, 0x858000
	0x03B8A510 ADRP X19, 0x5D2000
	0x03B8A514 ADRP X20, 0x591000
	0x03B8A518 LDRB W8, [X21 + 0xB34]
	0x03B8A51C LDR X19, [X19 + 0x1C0]
	0x03B8A520 LDR X20, [X20 + 0x848]
	0x03B8A524 TBNZ X8, 0x0, 0x3B8A554
	0x03B8A528 ADRP X0, 0x591000
	0x03B8A52C LDR X0, [X0 + 0x848]
	0x03B8A530 BL 0x1C16CF4
	0x03B8A534 ADRP X0, 0x5D2000
	0x03B8A538 LDR X0, [X0 + 0x1C0]
	0x03B8A53C BL 0x1C16CF4
	0x03B8A540 ADRP X0, 0x5D2000
	0x03B8A544 LDR X0, [X0 + 0xC0]
	0x03B8A548 BL 0x1C16CF4
	0x03B8A54C MOVZ W8, 0x1
	0x03B8A550 STRB W8, [X21 + 0xB34]
	0x03B8A554 LDR X0, [X20]
	0x03B8A558 ADRP X20, 0x5D2000
	0x03B8A55C LDR X19, [X19]
	0x03B8A560 LDR W8, [X0 + 0xE0]
	0x03B8A564 LDR X20, [X20 + 0xC0]
	0x03B8A568 CBNZ W8, 0x3B8A570
	0x03B8A56C BL 0x1C16DFC
	0x03B8A570 MOV X0, X19
	0x03B8A574 MOV X1, X31
	0x03B8A578 BL 0x36FA754
	0x03B8A57C LDR X8, [X20]
	0x03B8A580 MOV X19, X0
	0x03B8A584 LDR W9, [X8 + 0xE0]
	0x03B8A588 CBNZ W9, 0x3B8A598
	0x03B8A58C MOV X0, X8
	0x03B8A590 BL 0x1C16DFC
	0x03B8A594 LDR X8, [X20]
	0x03B8A598 LDR X8, [X8 + 0xB8]
	0x03B8A59C STR X19, [X8 + 0x8]
	0x03B8A5A0 LDP X20, X19, [X31 + 0x10]
	0x03B8A5A4 LDP X30, X21, [X31], #0x20
	0x03B8A5A8 RET
	0x03B8A5AC RET
	0x03B8A5B0 B 0x3B8A504
	0x03B8A5B4 STP X30, X21, [X31 - 0x20]!
	0x03B8A5B8 STP X20, X19, [X31 + 0x10]
	0x03B8A5BC LDR X8, [X2 + 0x8]
	0x03B8A5C0 STP X1, X2, [X0 + 0x20]
	0x03B8A5C4 MOV X19, X0
	0x03B8A5C8 MOV X20, X1
	0x03B8A5CC STR X8, [X0 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x859000
	008 Move X23, 0x5D3000
	009 Move W8, [X20+2846]
	010 Move X23, [X23+160]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x592000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0x5D3000
	020 Move X0, [X0+336]
	021 Call 0x1C17CF4
	022 Move X0, 0x5D3000
	023 Move X0, [X0+160]
	024 Call 0x1C17CF4
	025 Move X0, 0x5D3000
	026 Move X0, [X0+344]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2846], W8
	030 Move X8, [X23]
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X23]
	037 Move X9, [X8+184]
	038 Move X10, [X9]
	039 Compare X10, 0
	040 JumpIfNotEqual {70}
	041 Move W10, [X8+224]
	042 Compare W10, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X23]
	047 Move X9, [X8+184]
	048 Move X8, 0x592000
	049 Move X20, [X9+8]
	050 Move X8, [X8+2120]
	051 Move X0, [X8]
	052 Move X8, 0x5D3000
	053 Move X8, [X8+336]
	054 Move X21, [X8]
	055 Move X8, 0x5D3000
	056 Move X8, [X8+344]
	057 Move W9, [X0+224]
	058 Move X22, [X8]
	059 Compare W9, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X22
	065 Move X3, X31
	066 Call BurstCompiler.GetILPPMethodFunctionPointer2, X0, X1, X2
	067 Move X8, [X23]
	068 Move X9, [X8+184]
	069 Move [X9], X0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {76}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, [X23]
	076 Move X8, [X8+184]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X8, [X8]
	080 Move [X19], X8
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 

Method: System.IntPtr GetFunctionPointer()

Disassembly:
	0x03B8A5D0 LDRB W21, [X2 + 0x52]
	0x03B8A5D4 STR X0, [X0 + 0x40]
	0x03B8A5D8 MOV X0, X2
	0x03B8A5DC BL 0x1C16D84
	0x03B8A5E0 TBZ X0, 0x0, 0x3B8A5F8
	0x03B8A5E4 CMP W21, 0x3
	0x03B8A5E8 B.NE 0x3B8A614
	0x03B8A5EC ADRP X8, 0xFFFFFFFFFE074000
	0x03B8A5F0 ADD X8, X8, 0x3CC
	0x03B8A5F4 B 0x3B8A608
	0x03B8A5F8 CMP W21, 0x2
	0x03B8A5FC B.NE 0x3B8A610
	0x03B8A600 ADRP X8, 0xFFFFFFFFFE074000
	0x03B8A604 ADD X8, X8, 0x3B4
	0x03B8A608 STR X8, [X19 + 0x18]
	0x03B8A60C B 0x3B8A624
	0x03B8A610 CBZ X20, 0x3B8A63C
	0x03B8A614 LDR X8, [X19 + 0x10]
	0x03B8A618 LDR X9, [X19 + 0x20]
	0x03B8A61C STR X8, [X19 + 0x18]
	0x03B8A620 STR X9, [X19 + 0x40]
	0x03B8A624 ADRP X8, 0xFFFFFFFFFE074000
	0x03B8A628 ADD X8, X8, 0x354

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x859000
	005 Move X19, 0x5D3000
	006 Move W8, [X20+2847]
	007 Move X19, [X19+160]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5D3000
	013 Move X0, [X0+160]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2847], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 8
	024 Call OrthogonalLookRotation_00000929$BurstDirectCall.GetFunctionPointerDiscard, X0
	025 Move X0, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void Constructor()

Disassembly:
	0x03B8A62C STR X8, [X19 + 0x38]
	0x03B8A630 LDP X20, X19, [X31 + 0x10]
	0x03B8A634 LDP X30, X21, [X31], #0x20
	0x03B8A638 RET
	0x03B8A63C ADRP X1, 0xFFFFFFFFFCF91000
	0x03B8A640 ADD X1, X1, 0xEE3
	0x03B8A644 MOV X0, X31
	0x03B8A648 BL 0x1C16F3C
	0x03B8A64C MOV X1, X31
	0x03B8A650 BL 0x1C16DEC
	0x03B8A654 LDR X8, [X0 + 0x40]
	0x03B8A658 LDR X5, [X0 + 0x18]
	0x03B8A65C LDR X4, [X0 + 0x28]
	0x03B8A660 MOV X0, X8
	0x03B8A664 BR X5
	0x03B8A668 SUB X31, X31, 0x70
	0x03B8A66C STP X30, X27, [X31 + 0x20]
	0x03B8A670 STP X26, X25, [X31 + 0x30]
	0x03B8A674 STP X24, X23, [X31 + 0x40]
	0x03B8A678 STP X22, X21, [X31 + 0x50]
	0x03B8A67C STP X20, X19, [X31 + 0x60]
	0x03B8A680 ADRP X27, 0x858000
	0x03B8A684 ADRP X26, 0x56F000
	0x03B8A688 ADRP X25, 0x569000
	0x03B8A68C LDRB W8, [X27 + 0xB36]
	0x03B8A690 LDR X26, [X26 + 0x7B8]
	0x03B8A694 LDR X25, [X25 + 0xA90]
	0x03B8A698 MOV X19, X5
	0x03B8A69C MOV X20, X4
	0x03B8A6A0 MOV X22, X3
	0x03B8A6A4 MOV X23, X2
	0x03B8A6A8 MOV X24, X1
	0x03B8A6AC MOV X21, X0
	0x03B8A6B0 TBNZ X8, 0x0, 0x3B8A6D4
	0x03B8A6B4 ADRP X0, 0x569000
	0x03B8A6B8 LDR X0, [X0 + 0xA90]
	0x03B8A6BC BL 0x1C16CF4
	0x03B8A6C0 ADRP X0, 0x56F000
	0x03B8A6C4 LDR X0, [X0 + 0x7B8]
	0x03B8A6C8 BL 0x1C16CF4
	0x03B8A6CC MOVZ W8, 0x1
	0x03B8A6D0 STRB W8, [X27 + 0xB36]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x859000
	006 Move X19, 0x5D3000
	007 Move X20, 0x592000
	008 Move W8, [X21+2848]
	009 Move X19, [X19+352]
	010 Move X20, [X20+2120]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x592000
	016 Move X0, [X0+2120]
	017 Call 0x1C17CF4
	018 Move X0, 0x5D3000
	019 Move X0, [X0+352]
	020 Call 0x1C17CF4
	021 Move X0, 0x5D3000
	022 Move X0, [X0+160]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2848], W8
	026 Move X0, [X20]
	027 Move X20, 0x5D3000
	028 Move X19, [X19]
	029 Move W8, [X0+224]
	030 Move X20, [X20+160]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call BurstCompiler.CompileILPPMethod2, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move [X8+8], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void Initialize()

Disassembly:
	0x03B8A6D4 LDR X0, [X26]

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B8A6D8 MOV X1, X24

ISIL:
	001 Call OrthogonalLookRotation_00000929$BurstDirectCall.Constructor
	002 Return 

Method: System.Void Invoke(in Unity.Mathematics.float3 forward, in Unity.Mathematics.float3 referenceUp, out Unity.Mathematics.quaternion lookRotation)

Disassembly:
	0x03B87D8C LDR W8, [X0 + 0xE0]
	0x03B87D90 CBNZ W8, 0x3B87D98
	0x03B87D94 BL 0x1C16DFC
	0x03B87D98 MOV X0, X31
	0x03B87D9C BL 0x36FA670
	0x03B87DA0 TBZ X0, 0x0, 0x3B87DE4
	0x03B87DA4 ADRP X8, 0x5D5000
	0x03B87DA8 LDR X8, [X8 + 0xF0]
	0x03B87DAC LDR X0, [X8]
	0x03B87DB0 LDR W8, [X0 + 0xE0]
	0x03B87DB4 CBNZ W8, 0x3B87DBC
	0x03B87DB8 BL 0x1C16DFC
	0x03B87DBC BL 0x3B8BB7C
	0x03B87DC0 CBZ X0, 0x3B87DE4
	0x03B87DC4 MOV X3, X0
	0x03B87DC8 MOV X0, X21
	0x03B87DCC MOV X1, X20
	0x03B87DD0 MOV X2, X19
	0x03B87DD4 LDP X20, X19, [X31 + 0x20]
	0x03B87DD8 LDP X22, X21, [X31 + 0x10]
	0x03B87DDC LDP X30, X23, [X31], #0x30
	0x03B87DE0 BR X3
	0x03B87DE4 LDR V0, [X21]
	0x03B87DE8 LDR V1, [X20]
	0x03B87DEC LDR V2, [X21 + 0x8]
	0x03B87DF0 LDR V3, [X20 + 0x8]
	0x03B87DF4 LDP X22, X21, [X31 + 0x10]
	0x00000000 INVALID
	0x03B87DFC STR D0, [X19]
	0x03B87E00 FMUL S1, S2, S3
	0x03B87E04 STR S1, [X19 + 0x8]
	0x03B87E08 LDP X20, X19, [X31 + 0x20]
	0x03B87E0C LDP X30, X23, [X31], #0x30
	0x03B87E10 RET
	0x03B87E14 STP X30, X23, [X31 - 0x30]!
	0x03B87E18 STP X22, X21, [X31 + 0x10]
	0x03B87E1C STP X20, X19, [X31 + 0x20]
	0x03B87E20 ADRP X22, 0x85B000
	0x03B87E24 ADRP X23, 0x5D5000
	0x03B87E28 LDRB W8, [X22 + 0xB0C]
	0x03B87E2C LDR X23, [X23 + 0xF8]
	0x03B87E30 MOV X19, X2
	0x03B87E34 MOV X20, X1
	0x03B87E38 MOV X21, X0
	0x03B87E3C TBNZ X8, 0x0, 0x3B87E54
	0x03B87E40 ADRP X0, 0x5D5000
	0x03B87E44 LDR X0, [X0 + 0xF8]
	0x03B87E48 BL 0x1C16CF4
	0x03B87E4C MOVZ W8, 0x1
	0x03B87E50 STRB W8, [X22 + 0xB0C]
	0x03B87E54 LDR X0, [X23]
	0x03B87E58 LDR W8, [X0 + 0xE0]
	0x03B87E5C CBNZ W8, 0x3B87E64
	0x03B87E60 BL 0x1C16DFC
	0x03B87E64 MOV X0, X21
	0x03B87E68 MOV X1, X20
	0x03B87E6C MOV X2, X19
	0x03B87E70 LDP X20, X19, [X31 + 0x20]
	0x03B87E74 LDP X22, X21, [X31 + 0x10]
	0x03B87E78 LDP X30, X23, [X31], #0x30
	0x03B87E7C B 0x3B87E80
	0x03B87E80 STP X30, X23, [X31 - 0x30]!
	0x03B87E84 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x85C000
	009 Move X23, 0x595000
	010 Move W8, [X22+2849]
	011 Move X23, [X23+2120]
	012 Move X19, X2
	013 Move X21, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x595000
	020 Move X0, [X0+2120]
	021 Call 0x1C17CF4
	022 Move X0, 0x5D6000
	023 Move X0, [X0+160]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+2849], W8
	027 Move X0, [X23]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X31
	033 Call BurstCompiler.get_IsEnabled
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {60}
	038 Move X8, 0x5D6000
	039 Move X8, [X8+160]
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Call OrthogonalLookRotation_00000929$BurstDirectCall.GetFunctionPointer
	046 Compare X0, 0
	047 JumpIfEqual {60}
	048 Move X3, X0
	049 Move X0, X20
	050 Move X1, X21
	051 Move X2, X19
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X22, [X31+32]
	055 Move X21, [X31+40]
	056 Move X30, [X31+16]
	057 Move X23, [X31+24]
	058 Add X31, X31, 64
	059 CallNoReturn X3
	060 Add X2, X31, 0
	061 Move X0, X20
	062 Move X1, X21
	063 Move [X31+8], W31
	064 Move [X31], X31
	065 Call BurstMathUtility.OrthogonalUpVector, X0, X1, X2
	066 Move S0, [X20]
	067 Move S1, [X20+4]
	068 Move V2, [X20+8]
	069 Move S3, [X31]
	070 Move S4, [X31+4]
	071 Move V5, [X31+8]
	072 Move X0, X31
	073 Call 0x3B9A3E8
	074 Move [X19], S0
	075 Move [X19+8], S1
	076 Move [X19+8], S2
	077 Move [X19+16], S3
	078 Move X20, [X31+48]
	079 Move X19, [X31+56]
	080 Move X22, [X31+32]
	081 Move X21, [X31+40]
	082 Move X30, [X31+16]
	083 Move X23, [X31+24]
	084 Add X31, X31, 64
	085 Return 

