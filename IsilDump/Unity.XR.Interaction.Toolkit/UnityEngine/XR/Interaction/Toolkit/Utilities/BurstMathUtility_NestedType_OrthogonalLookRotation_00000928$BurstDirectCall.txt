Type: UnityEngine.XR.Interaction.Toolkit.Utilities.BurstMathUtility/OrthogonalLookRotation_00000928$BurstDirectCall

Method: System.Void GetFunctionPointerDiscard(ref System.IntPtr param_0)

Disassembly:
	0x03B8A0F4 ADRP X19, 0x5D2000
	0x03B8A0F8 LDRB W8, [X20 + 0xB2E]
	0x03B8A0FC LDR X19, [X19 + 0xB8]
	0x03B8A100 TBNZ X8, 0x0, 0x3B8A118
	0x03B8A104 ADRP X0, 0x5D2000
	0x03B8A108 LDR X0, [X0 + 0xB8]
	0x03B8A10C BL 0x1C16CF4
	0x03B8A110 MOVZ W8, 0x1
	0x03B8A114 STRB W8, [X20 + 0xB2E]
	0x03B8A118 LDR X0, [X19]
	0x03B8A11C STR X31, [X31 + 0x8]
	0x03B8A120 LDR W8, [X0 + 0xE0]
	0x03B8A124 CBNZ W8, 0x3B8A12C
	0x03B8A128 BL 0x1C16DFC
	0x03B8A12C ADD X0, X31, 0x8
	0x03B8A130 BL 0x3B89FCC
	0x03B8A134 LDR X0, [X31 + 0x8]
	0x03B8A138 LDP X20, X19, [X31 + 0x10]
	0x03B8A13C LDR X30, [X31], #0x20
	0x03B8A140 RET
	0x03B8A144 STP X30, X21, [X31 - 0x20]!
	0x03B8A148 STP X20, X19, [X31 + 0x10]
	0x03B8A14C ADRP X21, 0x858000
	0x03B8A150 ADRP X19, 0x5D2000
	0x03B8A154 ADRP X20, 0x591000
	0x03B8A158 LDRB W8, [X21 + 0xB2F]
	0x03B8A15C LDR X19, [X19 + 0x1A8]
	0x03B8A160 LDR X20, [X20 + 0x848]
	0x03B8A164 TBNZ X8, 0x0, 0x3B8A194
	0x03B8A168 ADRP X0, 0x591000
	0x03B8A16C LDR X0, [X0 + 0x848]
	0x03B8A170 BL 0x1C16CF4
	0x03B8A174 ADRP X0, 0x5D2000
	0x03B8A178 LDR X0, [X0 + 0x1A8]
	0x03B8A17C BL 0x1C16CF4
	0x03B8A180 ADRP X0, 0x5D2000
	0x03B8A184 LDR X0, [X0 + 0xB8]
	0x03B8A188 BL 0x1C16CF4
	0x03B8A18C MOVZ W8, 0x1
	0x03B8A190 STRB W8, [X21 + 0xB2F]
	0x03B8A194 LDR X0, [X20]
	0x03B8A198 ADRP X20, 0x5D2000
	0x03B8A19C LDR X19, [X19]
	0x03B8A1A0 LDR W8, [X0 + 0xE0]
	0x03B8A1A4 LDR X20, [X20 + 0xB8]
	0x03B8A1A8 CBNZ W8, 0x3B8A1B0
	0x03B8A1AC BL 0x1C16DFC
	0x03B8A1B0 MOV X0, X19
	0x03B8A1B4 MOV X1, X31
	0x03B8A1B8 BL 0x36FA754
	0x03B8A1BC LDR X8, [X20]
	0x03B8A1C0 MOV X19, X0
	0x03B8A1C4 LDR W9, [X8 + 0xE0]
	0x03B8A1C8 CBNZ W9, 0x3B8A1D8
	0x03B8A1CC MOV X0, X8
	0x03B8A1D0 BL 0x1C16DFC
	0x03B8A1D4 LDR X8, [X20]
	0x03B8A1D8 LDR X8, [X8 + 0xB8]
	0x03B8A1DC STR X19, [X8 + 0x8]
	0x03B8A1E0 LDP X20, X19, [X31 + 0x10]
	0x03B8A1E4 LDP X30, X21, [X31], #0x20
	0x03B8A1E8 RET
	0x03B8A1EC RET
	0x03B8A1F0 B 0x3B8A144
	0x03B8A1F4 STP X30, X21, [X31 - 0x20]!
	0x03B8A1F8 STP X20, X19, [X31 + 0x10]
	0x03B8A1FC LDR X8, [X2 + 0x8]
	0x03B8A200 STP X1, X2, [X0 + 0x20]
	0x03B8A204 MOV X19, X0
	0x03B8A208 MOV X20, X1
	0x03B8A20C STR X8, [X0 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x859000
	008 Move X23, 0x5D3000
	009 Move W8, [X20+2841]
	010 Move X23, [X23+152]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x592000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0x5D3000
	020 Move X0, [X0+312]
	021 Call 0x1C17CF4
	022 Move X0, 0x5D3000
	023 Move X0, [X0+152]
	024 Call 0x1C17CF4
	025 Move X0, 0x5D3000
	026 Move X0, [X0+320]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2841], W8
	030 Move X8, [X23]
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X23]
	037 Move X9, [X8+184]
	038 Move X10, [X9]
	039 Compare X10, 0
	040 JumpIfNotEqual {70}
	041 Move W10, [X8+224]
	042 Compare W10, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X23]
	047 Move X9, [X8+184]
	048 Move X8, 0x592000
	049 Move X20, [X9+8]
	050 Move X8, [X8+2120]
	051 Move X0, [X8]
	052 Move X8, 0x5D3000
	053 Move X8, [X8+312]
	054 Move X21, [X8]
	055 Move X8, 0x5D3000
	056 Move X8, [X8+320]
	057 Move W9, [X0+224]
	058 Move X22, [X8]
	059 Compare W9, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X22
	065 Move X3, X31
	066 Call BurstCompiler.GetILPPMethodFunctionPointer2, X0, X1, X2
	067 Move X8, [X23]
	068 Move X9, [X8+184]
	069 Move [X9], X0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {76}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, [X23]
	076 Move X8, [X8+184]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X8, [X8]
	080 Move [X19], X8
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 

Method: System.IntPtr GetFunctionPointer()

Disassembly:
	0x03B8A210 LDRB W21, [X2 + 0x52]
	0x03B8A214 STR X0, [X0 + 0x40]
	0x03B8A218 MOV X0, X2
	0x03B8A21C BL 0x1C16D84
	0x03B8A220 TBZ X0, 0x0, 0x3B8A238
	0x03B8A224 CMP W21, 0x3
	0x03B8A228 B.NE 0x3B8A254
	0x03B8A22C ADRP X8, 0xFFFFFFFFFE074000
	0x03B8A230 ADD X8, X8, 0x328
	0x03B8A234 B 0x3B8A248
	0x03B8A238 CMP W21, 0x2
	0x03B8A23C B.NE 0x3B8A250
	0x03B8A240 ADRP X8, 0xFFFFFFFFFE074000
	0x03B8A244 ADD X8, X8, 0x310
	0x03B8A248 STR X8, [X19 + 0x18]
	0x03B8A24C B 0x3B8A264
	0x03B8A250 CBZ X20, 0x3B8A27C
	0x03B8A254 LDR X8, [X19 + 0x10]
	0x03B8A258 LDR X9, [X19 + 0x20]
	0x03B8A25C STR X8, [X19 + 0x18]
	0x03B8A260 STR X9, [X19 + 0x40]
	0x03B8A264 ADRP X8, 0xFFFFFFFFFE074000
	0x03B8A268 ADD X8, X8, 0x2B0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x859000
	005 Move X19, 0x5D3000
	006 Move W8, [X20+2842]
	007 Move X19, [X19+152]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5D3000
	013 Move X0, [X0+152]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2842], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 8
	024 Call OrthogonalLookRotation_00000928$BurstDirectCall.GetFunctionPointerDiscard, X0
	025 Move X0, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void Constructor()

Disassembly:
	0x03B8A26C STR X8, [X19 + 0x38]
	0x03B8A270 LDP X20, X19, [X31 + 0x10]
	0x03B8A274 LDP X30, X21, [X31], #0x20
	0x03B8A278 RET
	0x03B8A27C ADRP X1, 0xFFFFFFFFFCF91000
	0x03B8A280 ADD X1, X1, 0xEE3
	0x03B8A284 MOV X0, X31
	0x03B8A288 BL 0x1C16F3C
	0x03B8A28C MOV X1, X31
	0x03B8A290 BL 0x1C16DEC
	0x03B8A294 LDR X8, [X0 + 0x40]
	0x03B8A298 LDR X5, [X0 + 0x18]
	0x03B8A29C LDR X4, [X0 + 0x28]
	0x03B8A2A0 MOV X0, X8
	0x03B8A2A4 BR X5
	0x03B8A2A8 SUB X31, X31, 0x70
	0x03B8A2AC STP X30, X27, [X31 + 0x20]
	0x03B8A2B0 STP X26, X25, [X31 + 0x30]
	0x03B8A2B4 STP X24, X23, [X31 + 0x40]
	0x03B8A2B8 STP X22, X21, [X31 + 0x50]
	0x03B8A2BC STP X20, X19, [X31 + 0x60]
	0x03B8A2C0 ADRP X27, 0x858000
	0x03B8A2C4 ADRP X26, 0x569000
	0x03B8A2C8 ADRP X25, 0x56A000
	0x03B8A2CC LDRB W8, [X27 + 0xB31]
	0x03B8A2D0 LDR X26, [X26 + 0x5A0]
	0x03B8A2D4 LDR X25, [X25 + 0x5A8]
	0x03B8A2D8 MOV X19, X5
	0x03B8A2DC MOV X20, X4
	0x03B8A2E0 MOV X22, X3
	0x03B8A2E4 MOV X23, X2
	0x03B8A2E8 MOV X24, X1
	0x03B8A2EC MOV X21, X0
	0x03B8A2F0 TBNZ X8, 0x0, 0x3B8A314
	0x03B8A2F4 ADRP X0, 0x56A000
	0x03B8A2F8 LDR X0, [X0 + 0x5A8]
	0x03B8A2FC BL 0x1C16CF4
	0x03B8A300 ADRP X0, 0x569000
	0x03B8A304 LDR X0, [X0 + 0x5A0]
	0x03B8A308 BL 0x1C16CF4
	0x03B8A30C MOVZ W8, 0x1
	0x03B8A310 STRB W8, [X27 + 0xB31]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x859000
	006 Move X19, 0x5D3000
	007 Move X20, 0x592000
	008 Move W8, [X21+2843]
	009 Move X19, [X19+328]
	010 Move X20, [X20+2120]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x592000
	016 Move X0, [X0+2120]
	017 Call 0x1C17CF4
	018 Move X0, 0x5D3000
	019 Move X0, [X0+328]
	020 Call 0x1C17CF4
	021 Move X0, 0x5D3000
	022 Move X0, [X0+152]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2843], W8
	026 Move X0, [X20]
	027 Move X20, 0x5D3000
	028 Move X19, [X19]
	029 Move W8, [X0+224]
	030 Move X20, [X20+152]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call BurstCompiler.CompileILPPMethod2, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move [X8+8], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void Initialize()

Disassembly:
	0x03B8A314 LDR X0, [X26]

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B8A318 MOV X1, X24

ISIL:
	001 Call OrthogonalLookRotation_00000928$BurstDirectCall.Constructor
	002 Return 

Method: System.Void Invoke(in UnityEngine.Vector3 forward, in UnityEngine.Vector3 referenceUp, out UnityEngine.Quaternion lookRotation)

Disassembly:
	0x03B87C00 LDR W8, [X0 + 0xE0]
	0x03B87C04 CBNZ W8, 0x3B87C0C
	0x03B87C08 BL 0x1C16DFC
	0x03B87C0C MOV X0, X31
	0x03B87C10 BL 0x36FA670
	0x03B87C14 TBZ X0, 0x0, 0x3B87C60
	0x03B87C18 ADRP X8, 0x5D5000
	0x03B87C1C LDR X8, [X8 + 0xE8]
	0x03B87C20 LDR X0, [X8]
	0x03B87C24 LDR W8, [X0 + 0xE0]
	0x03B87C28 CBNZ W8, 0x3B87C30
	0x03B87C2C BL 0x1C16DFC
	0x03B87C30 BL 0x3B8B7D0
	0x03B87C34 CBZ X0, 0x3B87C60
	0x03B87C38 MOV X3, X0
	0x03B87C3C MOV X0, X21
	0x03B87C40 MOV X1, X20
	0x03B87C44 MOV X2, X19
	0x03B87C48 LDP X20, X19, [X31 + 0x30]
	0x03B87C4C LDP X22, X21, [X31 + 0x20]
	0x03B87C50 LDP X30, X23, [X31 + 0x10]
	0x03B87C54 MOV V0.16B, V8.16B
	0x03B87C58 LDR V8, [X31], #0x40
	0x03B87C5C BR X3
	0x03B87C60 STR W31, [X19 + 0x8]
	0x03B87C64 STR X31, [X19]
	0x03B87C68 LDR V0, [X21]
	0x03B87C6C LDR V1, [X20]
	0x03B87C70 FABD S2, S0, S0
	0x03B87C74 FCMP S2, S8
	0x03B87C78 B.LE 0x3B87C84
	0x03B87C7C FDIV S0, S0, S1
	0x03B87C80 STR S0, [X19]
	0x03B87C84 LDR V0, [X21 + 0x4]
	0x03B87C88 LDR V1, [X20 + 0x4]
	0x03B87C8C FABD S2, S0, S0
	0x03B87C90 FCMP S2, S8
	0x03B87C94 B.LE 0x3B87CA0
	0x03B87C98 FDIV S0, S0, S1
	0x03B87C9C STR S0, [X19 + 0x4]
	0x03B87CA0 LDR V0, [X21 + 0x8]
	0x03B87CA4 LDR V1, [X20 + 0x8]
	0x03B87CA8 FABD S2, S0, S0
	0x03B87CAC FCMP S2, S8
	0x03B87CB0 B.LE 0x3B87CBC
	0x03B87CB4 FDIV S0, S0, S1
	0x03B87CB8 STR S0, [X19 + 0x8]
	0x03B87CBC LDP X20, X19, [X31 + 0x30]
	0x03B87CC0 LDP X22, X21, [X31 + 0x20]
	0x03B87CC4 LDP X30, X23, [X31 + 0x10]
	0x03B87CC8 LDR V8, [X31], #0x40
	0x03B87CCC RET
	0x03B87CD0 STP X30, X23, [X31 - 0x30]!
	0x03B87CD4 STP X22, X21, [X31 + 0x10]
	0x03B87CD8 STP X20, X19, [X31 + 0x20]
	0x03B87CDC ADRP X22, 0x85B000
	0x03B87CE0 ADRP X23, 0x5D5000
	0x03B87CE4 LDRB W8, [X22 + 0xB0B]
	0x03B87CE8 LDR X23, [X23 + 0xF0]
	0x03B87CEC MOV X19, X2
	0x03B87CF0 MOV X20, X1
	0x03B87CF4 MOV X21, X0
	0x03B87CF8 TBNZ X8, 0x0, 0x3B87D10
	0x03B87CFC ADRP X0, 0x5D5000
	0x03B87D00 LDR X0, [X0 + 0xF0]
	0x03B87D04 BL 0x1C16CF4
	0x03B87D08 MOVZ W8, 0x1
	0x03B87D0C STRB W8, [X22 + 0xB0B]
	0x03B87D10 LDR X0, [X23]
	0x03B87D14 LDR W8, [X0 + 0xE0]
	0x03B87D18 CBNZ W8, 0x3B87D20
	0x03B87D1C BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X22, 0x85C000
	009 Move X23, 0x595000
	010 Move W8, [X22+2844]
	011 Move X23, [X23+2120]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x595000
	020 Move X0, [X0+2120]
	021 Call 0x1C17CF4
	022 Move X0, 0x5D6000
	023 Move X0, [X0+152]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+2844], W8
	027 Move X0, [X23]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X31
	033 Call BurstCompiler.get_IsEnabled
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {60}
	038 Move X8, 0x5D6000
	039 Move X8, [X8+152]
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Call OrthogonalLookRotation_00000928$BurstDirectCall.GetFunctionPointer
	046 Compare X0, 0
	047 JumpIfEqual {60}
	048 Move X3, X0
	049 Move X0, X21
	050 Move X1, X20
	051 Move X2, X19
	052 Move X20, [X31+80]
	053 Move X19, [X31+88]
	054 Move X22, [X31+64]
	055 Move X21, [X31+72]
	056 Move X30, [X31+48]
	057 Move X23, [X31+56]
	058 Add X31, X31, 96
	059 CallNoReturn X3
	060 Move [X31+32], X31
	061 Move [X31+40], X31
	062 Move S0, [X21]
	063 Move S1, [X21+4]
	064 Move V2, [X21+8]
	065 Move X0, X31
	066 Call float3.op_Implicit, X0
	067 Move [X31+16], S0
	068 Move [X31+24], S1
	069 Move [X31+24], S2
	070 Move S0, [X20]
	071 Move S1, [X20+4]
	072 Move V2, [X20+8]
	073 Move X0, X31
	074 Call float3.op_Implicit, X0
	075 Add X0, X31, 16
	076 Add X1, X31, 0
	077 Add X2, X31, 32
	078 Move [X31], S0
	079 Move [X31+8], S1
	080 Move [X31+8], S2
	081 Call BurstMathUtility.OrthogonalLookRotation, X0, X1, X2
	082 Move S0, [X31+32]
	083 Move S1, [X31+36]
	084 Move S2, [X31+40]
	085 Move S3, [X31+44]
	086 Move X0, X31
	087 Call quaternion.op_Implicit, X0
	088 Move [X19], S0
	089 Move [X19+8], S1
	090 Move [X19+8], S2
	091 Move [X19+16], S3
	092 Move X20, [X31+80]
	093 Move X19, [X31+88]
	094 Move X22, [X31+64]
	095 Move X21, [X31+72]
	096 Move X30, [X31+48]
	097 Move X23, [X31+56]
	098 Add X31, X31, 96
	099 Return 

