Type: UnityEngine.XR.Interaction.Toolkit.Utilities.Tweenables.SmartTweenableVariables.SmartFollowQuaternionTweenableVariable/ComputeNewTweenTarget_000009C6$BurstDirectCall

Method: System.Void GetFunctionPointerDiscard(ref System.IntPtr param_0)

Disassembly:
	0x03B92ED8 MOVI V0.2D, 0x0
	0x03B92EDC MOV X1, X23
	0x03B92EE0 STR X31, [X31 + 0x30]
	0x03B92EE4 STP V0, V0, [X31 + 0x10]
	0x03B92EE8 BL 0x1C16E04
	0x03B92EEC LDR X8, [X25]
	0x03B92EF0 STR X0, [X31]
	0x03B92EF4 MOV X1, X22
	0x03B92EF8 MOV X0, X8
	0x03B92EFC BL 0x1C16E04
	0x03B92F00 LDR X8, [X24]
	0x03B92F04 STR X0, [X31 + 0x8]
	0x03B92F08 ADD X1, X31, 0x4C
	0x03B92F0C MOV X0, X8
	0x03B92F10 BL 0x1C16E04
	0x03B92F14 LDR X8, [X24]
	0x03B92F18 STR X0, [X31 + 0x10]
	0x03B92F1C ADD X1, X31, 0x48
	0x03B92F20 MOV X0, X8
	0x03B92F24 BL 0x1C16E04
	0x03B92F28 LDR X8, [X24]
	0x03B92F2C STR X0, [X31 + 0x18]
	0x03B92F30 ADD X1, X31, 0x3C
	0x03B92F34 MOV X0, X8
	0x03B92F38 BL 0x1C16E04
	0x03B92F3C LDR X8, [X24]
	0x03B92F40 STR X0, [X31 + 0x20]
	0x03B92F44 ADD X1, X31, 0x38
	0x03B92F48 MOV X0, X8
	0x03B92F4C BL 0x1C16E04
	0x03B92F50 STR X0, [X31 + 0x28]
	0x03B92F54 ADD X1, X31, 0x0
	0x03B92F58 MOV X0, X21
	0x03B92F5C MOV X2, X20
	0x03B92F60 MOV X3, X19
	0x03B92F64 BL 0x1C16CB0
	0x03B92F68 LDP X20, X19, [X31 + 0x80]
	0x03B92F6C LDP X22, X21, [X31 + 0x70]
	0x03B92F70 LDP X24, X23, [X31 + 0x60]
	0x03B92F74 LDP X26, X25, [X31 + 0x50]
	0x03B92F78 LDR X30, [X31 + 0x40]
	0x03B92F7C ADD X31, X31, 0x90
	0x03B92F80 RET
	0x03B92F84 STR X30, [X31 - 0x10]!
	0x03B92F88 MOV X0, X1
	0x03B92F8C MOV X1, X31
	0x03B92F90 BL 0x1C16CB4
	0x03B92F94 CBZ X0, 0x3B92FA8
	0x03B92F98 BL 0x1C16E08
	0x03B92F9C LDRB W0, [X0]
	0x03B92FA0 LDR X30, [X31], #0x10
	0x03B92FA4 RET
	0x03B92FA8 BL 0x1C16F20
	0x03B92FAC STP X30, X23, [X31 - 0x30]!
	0x03B92FB0 STP X22, X21, [X31 + 0x10]
	0x03B92FB4 STP X20, X19, [X31 + 0x20]
	0x03B92FB8 ADRP X20, 0x850000
	0x03B92FBC ADRP X23, 0x5CA000
	0x03B92FC0 LDRB W8, [X20 + 0xBAC]
	0x03B92FC4 LDR X23, [X23 + 0x5D0]
	0x03B92FC8 MOV X19, X0
	0x03B92FCC TBNZ X8, 0x0, 0x3B93008
	0x03B92FD0 ADRP X0, 0x589000
	0x03B92FD4 LDR X0, [X0 + 0x848]
	0x03B92FD8 BL 0x1C16CF4
	0x03B92FDC ADRP X0, 0x5CA000
	0x03B92FE0 LDR X0, [X0 + 0x5D0]
	0x03B92FE4 BL 0x1C16CF4
	0x03B92FE8 ADRP X0, 0x5CA000
	0x03B92FEC LDR X0, [X0 + 0x618]
	0x03B92FF0 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x851000
	008 Move X23, 0x5CB000
	009 Move W8, [X20+2972]
	010 Move X23, [X23+1440]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x58A000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0x5CB000
	020 Move X0, [X0+1440]
	021 Call 0x1C17CF4
	022 Move X0, 0x5CB000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move X0, 0x5CB000
	026 Move X0, [X0+1456]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2972], W8
	030 Move X8, [X23]
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X23]
	037 Move X9, [X8+184]
	038 Move X10, [X9]
	039 Compare X10, 0
	040 JumpIfNotEqual {70}
	041 Move W10, [X8+224]
	042 Compare W10, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X23]
	047 Move X9, [X8+184]
	048 Move X8, 0x58A000
	049 Move X20, [X9+8]
	050 Move X8, [X8+2120]
	051 Move X0, [X8]
	052 Move X8, 0x5CB000
	053 Move X8, [X8+1456]
	054 Move X21, [X8]
	055 Move X8, 0x5CB000
	056 Move X8, [X8+1448]
	057 Move W9, [X0+224]
	058 Move X22, [X8]
	059 Compare W9, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X22
	065 Move X3, X31
	066 Call BurstCompiler.GetILPPMethodFunctionPointer2, X0, X1, X2
	067 Move X8, [X23]
	068 Move X9, [X8+184]
	069 Move [X9], X0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {76}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, [X23]
	076 Move X8, [X8+184]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X8, [X8]
	080 Move [X19], X8
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 

Method: System.IntPtr GetFunctionPointer()

Disassembly:
	0x03B92FF4 ADRP X0, 0x5CA000
	0x03B92FF8 LDR X0, [X0 + 0x620]
	0x03B92FFC BL 0x1C16CF4
	0x03B93000 MOVZ W8, 0x1
	0x03B93004 STRB W8, [X20 + 0xBAC]
	0x03B93008 LDR X8, [X23]
	0x03B9300C LDR W9, [X8 + 0xE0]
	0x03B93010 CBNZ W9, 0x3B93020
	0x03B93014 MOV X0, X8
	0x03B93018 BL 0x1C16DFC
	0x03B9301C LDR X8, [X23]
	0x03B93020 LDR X9, [X8 + 0xB8]
	0x03B93024 LDR X10, [X9]
	0x03B93028 CBNZ X10, 0x3B93098
	0x03B9302C LDR W10, [X8 + 0xE0]
	0x03B93030 CBNZ W10, 0x3B93044
	0x03B93034 MOV X0, X8
	0x03B93038 BL 0x1C16DFC
	0x03B9303C LDR X8, [X23]
	0x03B93040 LDR X9, [X8 + 0xB8]
	0x03B93044 ADRP X8, 0x588000
	0x03B93048 LDR X20, [X9 + 0x8]
	0x03B9304C LDR X8, [X8 + 0x848]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x851000
	005 Move X19, 0x5CA000
	006 Move W8, [X20+2973]
	007 Call 0x3EB2734
	008 Return X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x5CA000
	014 Move X0, [X0+1440]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+2973], W8
	018 Move X0, [X19]
	019 Move [X31+8], X31
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Add X0, X31, 8
	025 Call ComputeNewTweenTarget_000009C6$BurstDirectCall.GetFunctionPointerDiscard, X0
	026 Move X0, [X31+8]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Return X0

Method: System.Void Constructor()

Disassembly:
	0x03B93050 LDR X0, [X8]
	0x03B93054 ADRP X8, 0x5C9000
	0x03B93058 LDR X8, [X8 + 0x620]
	0x03B9305C LDR X21, [X8]
	0x03B93060 ADRP X8, 0x5C9000
	0x03B93064 LDR X8, [X8 + 0x618]
	0x03B93068 LDR W9, [X0 + 0xE0]
	0x03B9306C LDR X22, [X8]
	0x03B93070 CBNZ W9, 0x3B93078
	0x03B93074 BL 0x1C16DFC
	0x03B93078 MOV X0, X20
	0x03B9307C MOV X1, X21
	0x03B93080 MOV X2, X22
	0x03B93084 MOV X3, X31
	0x03B93088 BL 0x36FAD70
	0x03B9308C LDR X8, [X23]
	0x03B93090 LDR X9, [X8 + 0xB8]
	0x03B93094 STR X0, [X9]
	0x03B93098 LDR W9, [X8 + 0xE0]
	0x03B9309C CBNZ W9, 0x3B930AC
	0x03B930A0 MOV X0, X8
	0x03B930A4 BL 0x1C16DFC
	0x03B930A8 LDR X8, [X23]
	0x03B930AC LDR X8, [X8 + 0xB8]
	0x03B930B0 LDP X22, X21, [X31 + 0x10]
	0x03B930B4 LDR X8, [X8]
	0x03B930B8 STR X8, [X19]
	0x03B930BC LDP X20, X19, [X31 + 0x20]
	0x03B930C0 LDP X30, X23, [X31], #0x30
	0x03B930C4 RET
	0x03B930C8 STR X30, [X31 - 0x20]!
	0x03B930CC STP X20, X19, [X31 + 0x10]
	0x03B930D0 ADRP X20, 0x84F000
	0x03B930D4 ADRP X19, 0x5C9000
	0x03B930D8 LDRB W8, [X20 + 0xBAD]
	0x03B930DC LDR X19, [X19 + 0x5D0]
	0x03B930E0 TBNZ X8, 0x0, 0x3B930F8
	0x03B930E4 ADRP X0, 0x5C9000
	0x03B930E8 LDR X0, [X0 + 0x5D0]
	0x03B930EC BL 0x1C16CF4
	0x03B930F0 MOVZ W8, 0x1
	0x03B930F4 STRB W8, [X20 + 0xBAD]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x850000
	006 Move X19, 0x5CA000
	007 Move X20, 0x589000
	008 Move W8, [X21+2974]
	009 Move X19, [X19+1464]
	010 Move X20, [X20+2120]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x589000
	016 Move X0, [X0+2120]
	017 Call 0x1C17CF4
	018 Move X0, 0x5CA000
	019 Move X0, [X0+1440]
	020 Call 0x1C17CF4
	021 Move X0, 0x5CA000
	022 Move X0, [X0+1464]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2974], W8
	026 Move X0, [X20]
	027 Move X20, 0x5CA000
	028 Move X19, [X19]
	029 Move W8, [X0+224]
	030 Move X20, [X20+1440]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call BurstCompiler.CompileILPPMethod2, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move [X8+8], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void Initialize()

Disassembly:
	0x03B930F8 LDR X0, [X19]

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B930FC STR X31, [X31 + 0x8]

ISIL:
	001 Call ComputeNewTweenTarget_000009C6$BurstDirectCall.Constructor
	002 Return 

Method: System.Void Invoke(System.Single deltaTime, System.Single angleOffsetDeg, System.Single maxAngleAllowed, System.Single lowerSpeed, System.Single upperSpeed, out System.Single newTweenTarget)

Disassembly:
	0x03B92B58 MOV X3, X19
	0x03B92B5C BL 0x1C16CB0
	0x03B92B60 LDP X20, X19, [X31 + 0x90]
	0x03B92B64 LDP X22, X21, [X31 + 0x80]
	0x03B92B68 LDP X24, X23, [X31 + 0x70]
	0x03B92B6C LDP X26, X25, [X31 + 0x60]
	0x03B92B70 LDP X30, X27, [X31 + 0x50]
	0x03B92B74 ADD X31, X31, 0xA0
	0x03B92B78 RET
	0x03B92B7C MOV X0, X1
	0x03B92B80 MOV X1, X31
	0x03B92B84 B 0x1C16CB4
	0x03B92B88 STP X30, X23, [X31 - 0x30]!
	0x03B92B8C STP X22, X21, [X31 + 0x10]
	0x03B92B90 STP X20, X19, [X31 + 0x20]
	0x03B92B94 ADRP X20, 0x850000
	0x03B92B98 ADRP X23, 0x5CA000
	0x03B92B9C LDRB W8, [X20 + 0xBA7]
	0x03B92BA0 LDR X23, [X23 + 0x5F8]
	0x03B92BA4 MOV X19, X0
	0x03B92BA8 TBNZ X8, 0x0, 0x3B92BE4
	0x03B92BAC ADRP X0, 0x589000
	0x03B92BB0 LDR X0, [X0 + 0x848]
	0x03B92BB4 BL 0x1C16CF4
	0x03B92BB8 ADRP X0, 0x5CA000
	0x03B92BBC LDR X0, [X0 + 0x5F8]
	0x03B92BC0 BL 0x1C16CF4
	0x03B92BC4 ADRP X0, 0x5CA000
	0x03B92BC8 LDR X0, [X0 + 0x600]
	0x03B92BCC BL 0x1C16CF4
	0x03B92BD0 ADRP X0, 0x5CA000
	0x03B92BD4 LDR X0, [X0 + 0x608]
	0x03B92BD8 BL 0x1C16CF4
	0x03B92BDC MOVZ W8, 0x1
	0x03B92BE0 STRB W8, [X20 + 0xBA7]
	0x03B92BE4 LDR X8, [X23]
	0x03B92BE8 LDR W9, [X8 + 0xE0]
	0x03B92BEC CBNZ W9, 0x3B92BFC
	0x03B92BF0 MOV X0, X8
	0x03B92BF4 BL 0x1C16DFC
	0x03B92BF8 LDR X8, [X23]
	0x03B92BFC LDR X9, [X8 + 0xB8]
	0x03B92C00 LDR X10, [X9]
	0x03B92C04 CBNZ X10, 0x3B92C74
	0x03B92C08 LDR W10, [X8 + 0xE0]
	0x03B92C0C CBNZ W10, 0x3B92C20
	0x03B92C10 MOV X0, X8
	0x03B92C14 BL 0x1C16DFC
	0x03B92C18 LDR X8, [X23]
	0x03B92C1C LDR X9, [X8 + 0xB8]
	0x03B92C20 ADRP X8, 0x589000
	0x03B92C24 LDR X20, [X9 + 0x8]
	0x03B92C28 LDR X8, [X8 + 0x848]
	0x03B92C2C LDR X0, [X8]
	0x03B92C30 ADRP X8, 0x5CA000
	0x03B92C34 LDR X8, [X8 + 0x608]
	0x03B92C38 LDR X21, [X8]
	0x03B92C3C ADRP X8, 0x5CA000
	0x03B92C40 LDR X8, [X8 + 0x600]
	0x03B92C44 LDR W9, [X0 + 0xE0]
	0x03B92C48 LDR X22, [X8]
	0x03B92C4C CBNZ W9, 0x3B92C54
	0x03B92C50 BL 0x1C16DFC
	0x03B92C54 MOV X0, X20
	0x03B92C58 MOV X1, X21
	0x03B92C5C MOV X2, X22
	0x03B92C60 MOV X3, X31
	0x03B92C64 BL 0x36FAD70
	0x03B92C68 LDR X8, [X23]
	0x03B92C6C LDR X9, [X8 + 0xB8]
	0x03B92C70 STR X0, [X9]
	0x03B92C74 LDR W9, [X8 + 0xE0]
	0x03B92C78 CBNZ W9, 0x3B92C88
	0x03B92C7C MOV X0, X8
	0x03B92C80 BL 0x1C16DFC
	0x03B92C84 LDR X8, [X23]
	0x03B92C88 LDR X8, [X8 + 0xB8]
	0x03B92C8C LDP X22, X21, [X31 + 0x10]
	0x03B92C90 LDR X8, [X8]
	0x03B92C94 STR X8, [X19]
	0x03B92C98 LDP X20, X19, [X31 + 0x20]
	0x03B92C9C LDP X30, X23, [X31], #0x30
	0x03B92CA0 RET
	0x03B92CA4 STR X30, [X31 - 0x20]!
	0x03B92CA8 STP X20, X19, [X31 + 0x10]
	0x03B92CAC ADRP X20, 0x850000

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x851000
	011 Move X21, 0x58A000
	012 Move W8, [X20+2975]
	013 Move X21, [X21+2120]
	014 Move X19, X0
	015 Move V9, V4
	016 Move V8, V3
	017 Move V11, V2
	018 Move V12, V1
	019 Move V10, V0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0x58A000
	025 Move X0, [X0+2120]
	026 Call 0x1C17CF4
	027 Move X0, 0x5CB000
	028 Move X0, [X0+1440]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+2975], W8
	032 Move X0, [X21]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X31
	038 Call BurstCompiler.get_IsEnabled
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {70}
	043 Move X8, 0x5CB000
	044 Move X8, [X8+1440]
	045 Move X0, [X8]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Call ComputeNewTweenTarget_000009C6$BurstDirectCall.GetFunctionPointer
	051 Compare X0, 0
	052 JumpIfEqual {70}
	053 Move X1, X0
	054 Move V0, V10
	055 Move V2, V11
	056 Move V3, V8
	057 Move V4, V9
	058 Move X0, X19
	059 Move X20, [X31+64]
	060 Move X19, [X31+72]
	061 Move X30, [X31+48]
	062 Move X21, [X31+56]
	063 Move D9, [X31+32]
	064 Move D8, [X31+40]
	065 Move D11, [X31+16]
	066 Move D10, [X31+24]
	067 Move V1, V12
	068 Move V12, [X31+80]
	069 CallNoReturn X1
	070 NotImplemented "Instruction FDIV not yet implemented."
	071 Move W9, S0
	072 Move W8, 0x7F800000
	073 And W9, W9, 0x7FFFFFFF
	074 Move S1, 1
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction FCCMP not yet implemented."
	077 NotImplemented "Instruction FCSEL not yet implemented."
	078 Move W9, S0
	079 And W9, W9, 0x7FFFFFFF
	080 Move S2, W31
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction FCCMP not yet implemented."
	083 Subtract S0, S1, S0
	084 NotImplemented "Instruction FCSEL not yet implemented."
	085 Multiply S0, S0, S9
	086 Move W9, S0
	087 And W9, W9, 0x7FFFFFFF
	088 NotImplemented "Instruction CMP not yet implemented."
	089 NotImplemented "Instruction FCCMP not yet implemented."
	090 NotImplemented "Instruction FCSEL not yet implemented."
	091 Move W9, S0
	092 And W9, W9, 0x7FFFFFFF
	093 NotImplemented "Instruction CMP not yet implemented."
	094 NotImplemented "Instruction FCCMP not yet implemented."
	095 NotImplemented "Instruction FCSEL not yet implemented."
	096 Multiply S0, S0, S10
	097 Move [X19], S0
	098 Move X20, [X31+64]
	099 Move X19, [X31+72]
	100 Move X30, [X31+48]
	101 Move X21, [X31+56]
	102 Move D9, [X31+32]
	103 Move D8, [X31+40]
	104 Move D11, [X31+16]
	105 Move D10, [X31+24]
	106 Move V12, [X31+80]
	107 Return 

