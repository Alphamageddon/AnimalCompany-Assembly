Type: UnityEngine.XR.Interaction.Toolkit.Utilities.Tweenables.Primitives.QuaternionTweenableVariable

Method: System.Single get_angleEqualityThreshold()

Disassembly:
	0x03B94404 LDR V3, [X1 + 0x8]
	0x03B94408 FSUB V2.2S, V2.2S, V0.2S

ISIL:
	001 Move V0, [X0+104]
	002 Return V0

Method: System.Void set_angleEqualityThreshold(System.Single value)

Disassembly:
	0x03B9440C FSUB S3, S3, S1
	0x00000000 INVALID

ISIL:
	001 Move [X0+104], S0
	002 Return 

Method: UnityEngine.Quaternion Lerp(UnityEngine.Quaternion from, UnityEngine.Quaternion to, System.Single t)

Disassembly:
	0x03B94414 FMUL S3, S3, S5
	0x03B94418 FADD V0.2S, V0.2S, V2.2S
	0x03B9441C FADD S1, S1, S3
	0x03B94420 STR D0, [X5]

ISIL:
	001 Move V16, [X31]
	002 Move X0, X31
	003 Move [X31], S16
	004 Call Quaternion.Slerp, X0, X1, V0
	005 Return X0

Method: System.Boolean IsNearlyEqual(UnityEngine.Quaternion startValue, UnityEngine.Quaternion targetValue)

Disassembly:
	0x03B94424 STR S1, [X5 + 0x8]
	0x03B94428 LDR W8, [X2 + 0x8]
	0x03B9442C LDR X9, [X2]
	0x03B94430 STR W8, [X6 + 0x8]
	0x03B94434 STR X9, [X6]
	0x03B94438 RET
	0x03B9443C SUB X31, X31, 0xF0
	0x03B94440 STP D13, D12, [X31 + 0x80]
	0x03B94444 STP D11, D10, [X31 + 0x90]
	0x03B94448 STP D9, D8, [X31 + 0xA0]
	0x03B9444C STR X30, [X31 + 0xB0]
	0x03B94450 STP X24, X23, [X31 + 0xC0]
	0x03B94454 STP X22, X21, [X31 + 0xD0]
	0x03B94458 STP X20, X19, [X31 + 0xE0]
	0x03B9445C STR W31, [X31 + 0x68]
	0x03B94460 STR X31, [X31 + 0x60]
	0x03B94464 STR W31, [X31 + 0x58]
	0x03B94468 STR X31, [X31 + 0x50]
	0x03B9446C STR W31, [X31 + 0x48]
	0x03B94470 STR X31, [X31 + 0x40]
	0x03B94474 STR W31, [X31 + 0x38]
	0x03B94478 STR X31, [X31 + 0x30]
	0x03B9447C STR W31, [X31 + 0x28]
	0x03B94480 STR X31, [X31 + 0x20]
	0x03B94484 ADRP X24, 0x84D000
	0x03B94488 LDP S8, S9, [X3]
	0x03B9448C LDR V10, [X3 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Multiply S0, S0, S4
	004 Multiply S1, S1, S5
	005 Multiply S2, S2, S6
	006 Move X8, -51023872
	007 Add S0, S0, S1
	008 Multiply S3, S3, S7
	009 Move V1, [X8+436]
	010 Add S0, S2, S0
	011 Add S0, S3, S0
	012 NotImplemented "Instruction FABS not yet implemented."
	013 Move S2, 1
	014 NotImplemented "Instruction FMINNM not yet implemented."
	015 Move X19, X0
	016 NotImplemented "Instruction FCMP not yet implemented."
	017 Move S1, W31
	018 Call 0x3EB2BB0
	019 Move X8, -51023872
	020 Move V1, [X8+1096]
	021 Add S0, S0, S0
	022 Multiply S1, S0, S1
	023 Move V0, [X19+104]
	024 NotImplemented "Instruction FCMP not yet implemented."
	025 NotImplemented "Instruction CSET not yet implemented."
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03B927C4 LDR X30, [X31 + 0x20]
	0x03B927C8 LDP D9, D8, [X31 + 0x10]
	0x03B927CC MOV V2.16B, V11.16B
	0x03B927D0 MOV V3.16B, V10.16B
	0x03B927D4 LDP D11, D10, [X31], #0x50
	0x03B927D8 BR X2
	0x03B927DC FDIV S4, S11, S10
	0x03B927E0 LDUR V1, [X20 + 0x4]
	0x03B927E4 LDUR V3, [X19 + 0x4]
	0x03B927E8 FMOV W9, S4
	0x03B927EC MOVZ W8, 0x7F800000
	0x03B927F0 AND W9, W9, 0x7FFFFFFF
	0x03B927F4 LDR V0, [X20]
	0x03B927F8 LDR V2, [X19]
	0x03B927FC FMOV S5, 1
	0x03B92800 CMP W9, W8
	0x03B92804 FCCMP S4, S5, 0x0, LS
	0x03B92808 FSUB V1.2S, V3.2S, V1.2S
	0x03B9280C FCSEL S3, S5, S4, GT
	0x03B92810 FMOV W9, S3
	0x03B92814 FSUB S0, S2, S0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x851000
	006 Move X20, 0x5CB000
	007 Move W8, [X21+2996]
	008 Move X20, [X20+1400]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5CB000
	015 Move X0, [X0+1400]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2996], W8
	019 Move W8, 0xD70A
	020 NotImplemented "Instruction MOVK not yet implemented."
	021 Move [X19+104], W8
	022 Move X1, [X20]
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Move X21, [X31+40]
	028 Call 0x270EC28, X0
	029 Return 

