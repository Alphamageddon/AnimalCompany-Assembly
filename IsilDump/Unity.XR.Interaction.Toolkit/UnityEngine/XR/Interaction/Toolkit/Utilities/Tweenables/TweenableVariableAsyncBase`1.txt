Type: UnityEngine.XR.Interaction.Toolkit.Utilities.Tweenables.TweenableVariableAsyncBase`1

Method: T get_Value()

Disassembly:
	0x0270A8B0 MOV X2, X24
	0x0270A8B4 BL 0x3EB1B10
	0x0270A8B8 ADRP X8, 0xFFFFFFFFFE3E0000
	0x0270A8BC LDR V0, [X8 + 0xC8]
	0x0270A8C0 FCMP S8, S0
	0x0270A8C4 B.LE 0x270A900
	0x0270A8C8 MOV X0, X22

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {10}
	004 Move S0, [X0+24]
	005 Move S1, [X0+28]
	006 Move S2, [X0+32]
	007 Move S3, [X0+36]
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: System.Void set_Value(T value)

Disassembly:
	0x0270A8CC MOV X1, X28
	0x0270A8D0 MOV X2, X24
	0x0270A8D4 BL 0x3EB1AC0
	0x0270A8D8 LDR X8, [X26 + 0xC0]
	0x0270A8DC SUB X3, X29, 0x30
	0x0270A8E0 MOV X2, X23
	0x0270A8E4 MOV X4, X22
	0x0270A8E8 LDR X1, [X8 + 0x68]
	0x0270A8EC LDR X0, [X1]
	0x0270A8F0 STUR X22, [X29 - 0x30]
	0x0270A8F4 LDR X8, [X1 + 0x10]
	0x0270A8F8 BLR X8
	0x0270A8FC B 0x270AC9C
	0x0270A900 LDUR W8, [X29 - 0x64]
	0x0270A904 MOV X26, X23
	0x0270A908 STUR X28, [X29 - 0x98]
	0x0270A90C TBZ X8, 0x0, 0x270A99C
	0x0270A910 LDUR X1, [X29 - 0x60]
	0x0270A914 MOV X0, X22
	0x0270A918 MOV X2, X24
	0x0270A91C BL 0x3EB1AC0
	0x0270A920 MOV X0, X19
	0x0270A924 MOV X1, X22
	0x0270A928 MOV X2, X24
	0x0270A92C BL 0x3EB1AC0
	0x0270A930 MOV X0, X27
	0x0270A934 MOV X1, X19
	0x0270A938 MOV X2, X24
	0x0270A93C BL 0x3EB1AC0
	0x0270A940 ADRP X19, 0x1CD0000
	0x0270A944 LDRB W8, [X19 + 0x627]
	0x0270A948 MOVZ W9, 0x437F0000
	0x0270A94C FMOV S9, W9
	0x0270A950 CBNZ W8, 0x270A968
	0x0270A954 ADRP X0, 0x19E9000

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move W8, [X0+160]
	009 Move X19, X1
	010 Move V8, V3
	011 Move V9, V2
	012 Move V10, V1
	013 Move X20, X0
	014 Move V11, V0
	015 Compare W8, 0
	016 JumpIfEqual {31}
	017 Move W8, [X20+104]
	018 Compare W8, 0
	019 JumpIfEqual {31}
	020 Add X0, X20, 168
	021 Move X1, X31
	022 Call JobHandle.Complete, X0
	023 Move X8, [X20+112]
	024 Move [X20+168], X31
	025 Move [X20+176], X31
	026 Move [X20+160], W31
	027 Move [X8], S11
	028 Move [X8+8], S10
	029 Move [X8+8], S9
	030 Move [X8+16], S8
	031 Move X8, [X19+32]
	032 Move X0, X20
	033 Move V2, V9
	034 Move V3, V8
	035 Move X8, [X8+192]
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move X30, [X31+32]
	039 Move D9, [X31+16]
	040 Move D8, [X31+24]
	041 Move X1, [X8+56]
	042 Move V0, V11
	043 Move V1, V10
	044 Move D11, [X31+64]
	045 Move D10, [X31+72]
	046 Call BindableVariableBase`1<Color>.set_Value, X0, X1
	047 Return 

Method: System.Void Dispose()

Disassembly:
	0x0270A958 LDR X0, [X0 + 0x5A8]
	0x0270A95C BL 0x1C16CF4
	0x0270A960 MOVZ W8, 0x1
	0x0270A964 STRB W8, [X19 + 0x627]
	0x0270A968 ADRP X8, 0x19E9000
	0x0270A96C LDR X8, [X8 + 0x5A8]
	0x0270A970 FMUL S8, S8, S9
	0x0270A974 LDR X0, [X8]
	0x0270A978 LDR W8, [X0 + 0xE0]
	0x0270A97C CBNZ W8, 0x270A984
	0x0270A980 BL 0x1C16DFC
	0x0270A984 FRINTP S0, S8
	0x0270A988 FCVTPS W8, S8
	0x0270A98C FCMP S0, 0x0
	0x0270A990 CSEL W23, W8, W8, MI
	0x0270A994 FMOV S8, 1
	0x0270A998 B 0x270A9D0
	0x0270A99C LDUR X1, [X29 - 0x98]
	0x0270A9A0 MOV X0, X22
	0x0270A9A4 MOV X2, X24
	0x0270A9A8 BL 0x3EB1AC0
	0x0270A9AC MOV X0, X19
	0x0270A9B0 MOV X1, X22
	0x0270A9B4 MOV X2, X24
	0x0270A9B8 BL 0x3EB1AC0
	0x0270A9BC MOV X0, X27
	0x0270A9C0 MOV X1, X19
	0x0270A9C4 MOV X2, X24
	0x0270A9C8 BL 0x3EB1AC0
	0x0270A9CC MOVZ W23, 0xFF

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+104]
	005 Move X19, X0
	006 Compare W8, 0
	007 JumpIfEqual {20}
	008 Move X8, [X1+32]
	009 Move X20, X1
	010 Move X0, X19
	011 Move X8, [X8+192]
	012 Move X1, [X8+64]
	013 Call 0x270ACB8, X0
	014 Move X8, [X20+32]
	015 Add X0, X19, 112
	016 Move X8, [X8+192]
	017 Move X1, [X8+72]
	018 Call NativeArray`1<Color>.Dispose, X0
	019 Move [X19+104], W31
	020 Add X20, X19, 136
	021 Move X0, X20
	022 Move X1, X31
	023 Call NativeCurve.get_isCreated, X0
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {33}
	028 Move X0, X20
	029 Move X1, X31
	030 Call NativeCurve.Dispose, X0
	031 Move W8, 1
	032 Move [X19+128], W8
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return 

Method: UnityEngine.XR.Interaction.Toolkit.Utilities.Collections.NativeCurve GetNativeCurve()

Disassembly:
	0x0270A9D0 MOV X0, X25
	0x0270A9D4 MOV W1, W31
	0x0270A9D8 MOV X2, X21
	0x0270A9DC BL 0x3EB1B10
	0x0270A9E0 CBZ X26, 0x270ACD4
	0x0270A9E4 LDR X8, [X20 + 0x20]
	0x0270A9E8 SUB X3, X29, 0x30
	0x0270A9EC MOV X2, X26
	0x0270A9F0 MOV X4, X22
	0x0270A9F4 LDR X8, [X8 + 0xC0]
	0x0270A9F8 LDR X1, [X8 + 0x78]
	0x0270A9FC LDR X0, [X1]
	0x0270AA00 STUR X22, [X29 - 0x30]
	0x0270AA04 LDR X8, [X1 + 0x10]
	0x0270AA08 BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X9, [X1+32]
	005 Move X19, X0
	006 Move X20, X8
	007 Move X9, [X9+192]
	008 Move X1, [X9+80]
	009 Call 0x270AA0C, X0
	010 Move X8, [X19+152]
	011 NotImplemented "Instruction LDUR not yet implemented."
	012 Move [X20+16], X8
	013 Move [X20], V0
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X30, [X31+32]
	017 Return X0

Method: System.Void RefreshCurve()

Disassembly:
	0x0270AA0C LDR X8, [X20 + 0x20]
	0x0270AA10 MOV X0, X25
	0x0270AA14 MOV X2, X22
	0x0270AA18 MOV W3, W24
	0x0270AA1C LDR X8, [X8 + 0xC0]
	0x0270AA20 LDR X8, [X8 + 0x70]
	0x0270AA24 LDR X8, [X8 + 0x80]
	0x0270AA28 ADD X1, X8, 0x40
	0x0270AA2C BL 0x1C16D1C
	0x0270AA30 LDUR X19, [X29 - 0x90]
	0x0270AA34 MOV X1, X27
	0x0270AA38 MOV X2, X24
	0x0270AA3C MOV X0, X19
	0x0270AA40 BL 0x3EB1AC0
	0x0270AA44 LDR X8, [X20 + 0x20]
	0x0270AA48 MOV X0, X25

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+128]
	004 Move X19, X0
	005 Compare W8, 0
	006 JumpIfNotEqual {14}
	007 Add X0, X19, 136
	008 Move X1, X31
	009 Call NativeCurve.get_isCreated, X0
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {20}
	014 Move X1, [X19+64]
	015 Add X0, X19, 136
	016 Move W2, 1024
	017 Move X3, X31
	018 Call NativeCurve.Update, X0, X1, X2
	019 Move [X19+128], W31
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return 

Method: System.Void PreprocessTween()

Disassembly:
	0x0270AA4C MOV X2, X19
	0x0270AA50 MOV W3, W24
	0x0270AA54 LDR X8, [X8 + 0xC0]
	0x0270AA58 LDR X8, [X8 + 0x70]
	0x0270AA5C LDR X8, [X8 + 0x80]
	0x0270AA60 ADD X1, X8, 0x60
	0x0270AA64 BL 0x1C16D1C
	0x0270AA68 LDUR X19, [X29 - 0x88]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {10}
	004 Move X8, [X1+32]
	005 Move X8, [X8+192]
	006 Move X1, [X8+64]
	007 Move X30, [X31+16]
	008 Call 0x270ACB8, X0
	009 Return 
	010 Call 0x1C17F20

Method: System.Void ExecuteTween(T startValue, T targetValue, System.Single tweenAmount, System.Boolean useCurve = False)

Disassembly:
	0x0270AA6C LDUR X1, [X29 - 0x98]
	0x0270AA70 MOV X2, X24
	0x0270AA74 MOV X0, X19
	0x0270AA78 BL 0x3EB1AC0
	0x0270AA7C LDR X8, [X20 + 0x20]
	0x0270AA80 MOV X0, X25
	0x0270AA84 MOV X2, X19
	0x0270AA88 MOV W3, W24
	0x0270AA8C LDR X8, [X8 + 0xC0]
	0x0270AA90 LDR X8, [X8 + 0x70]
	0x0270AA94 LDR X8, [X8 + 0x80]
	0x0270AA98 ADD X1, X8, 0x80
	0x0270AA9C BL 0x1C16D1C
	0x0270AAA0 LDR X8, [X20 + 0x20]
	0x0270AAA4 MOVZ W1, 0x1
	0x0270AAA8 MOVZ W27, 0x1
	0x0270AAAC LDR X8, [X8 + 0xC0]
	0x0270AAB0 LDR X8, [X8 + 0x70]
	0x0270AAB4 LDR X8, [X8 + 0x80]
	0x0270AAB8 ADD X19, X8, 0xA0
	0x0270AABC MOV X0, X19
	0x0270AAC0 BL 0x1C16D14
	0x0270AAC4 MOV X0, X25
	0x0270AAC8 MOV X1, X19
	0x0270AACC BL 0x1C16D18
	0x0270AAD0 STRB W23, [X0]
	0x0270AAD4 LDR X8, [X20 + 0x20]
	0x0270AAD8 MOV X0, X26
	0x0270AADC LDR X8, [X8 + 0xC0]
	0x0270AAE0 LDR X1, [X8 + 0x80]
	0x0270AAE4 SUB X8, X29, 0x30
	0x0270AAE8 LDR X9, [X1]
	0x0270AAEC BLR X9
	0x0270AAF0 LDUR V0, [X29 - 0x30]
	0x0270AAF4 LDUR X8, [X29 - 0x20]
	0x0270AAF8 MOVZ W1, 0x18
	0x0270AAFC STUR V0, [X29 - 0x50]
	0x0270AB00 STUR X8, [X29 - 0x40]
	0x0270AB04 LDR X8, [X20 + 0x20]
	0x0270AB08 LDR X8, [X8 + 0xC0]
	0x0270AB0C LDR X8, [X8 + 0x70]
	0x0270AB10 LDR X8, [X8 + 0x80]
	0x0270AB14 ADD X19, X8, 0xC0
	0x0270AB18 MOV X0, X19
	0x0270AB1C BL 0x1C16D14
	0x0270AB20 MOV X0, X25
	0x0270AB24 MOV X1, X19
	0x0270AB28 BL 0x1C16D18
	0x0270AB2C LDUR V0, [X29 - 0x50]
	0x0270AB30 LDUR X8, [X29 - 0x40]
	0x0270AB34 LDUR X19, [X29 - 0x80]
	0x0270AB38 LDUR X1, [X29 - 0x60]
	0x0270AB3C STR V0, [X0]
	0x0270AB40 STR X8, [X0 + 0x10]
	0x0270AB44 MOV X0, X19
	0x0270AB48 MOV X2, X24
	0x0270AB4C BL 0x3EB1AC0
	0x0270AB50 LDR X8, [X20 + 0x20]
	0x0270AB54 MOV X0, X25
	0x0270AB58 MOV X2, X19
	0x0270AB5C MOV W3, W24
	0x0270AB60 LDR X8, [X8 + 0xC0]
	0x0270AB64 LDR X8, [X8 + 0x70]
	0x0270AB68 LDR X8, [X8 + 0x80]
	0x0270AB6C ADD X1, X8, 0xE0
	0x0270AB70 BL 0x1C16D1C
	0x0270AB74 LDR X8, [X20 + 0x20]
	0x0270AB78 MOVZ W1, 0x4
	0x0270AB7C LDR X8, [X8 + 0xC0]
	0x0270AB80 LDR X8, [X8 + 0x70]
	0x0270AB84 LDR X8, [X8 + 0x80]
	0x0270AB88 ADD X19, X8, 0x100
	0x0270AB8C MOV X0, X19
	0x0270AB90 BL 0x1C16D14
	0x0270AB94 MOV X0, X25
	0x0270AB98 MOV X1, X19
	0x0270AB9C BL 0x1C16D18
	0x0270ABA0 STR S8, [X0]
	0x0270ABA4 LDR X8, [X20 + 0x20]
	0x0270ABA8 MOV X0, X26
	0x0270ABAC LDR X8, [X8 + 0xC0]
	0x0270ABB0 LDR X1, [X8 + 0x88]
	0x0270ABB4 LDR X8, [X1]
	0x0270ABB8 BLR X8
	0x0270ABBC LDR X8, [X20 + 0x20]
	0x0270ABC0 MOV X19, X0
	0x0270ABC4 MOV X22, X1
	0x0270ABC8 MOVZ W1, 0x10
	0x0270ABCC LDR X8, [X8 + 0xC0]
	0x0270ABD0 LDR X8, [X8 + 0x70]
	0x0270ABD4 LDR X8, [X8 + 0x80]
	0x0270ABD8 ADD X23, X8, 0x120
	0x0270ABDC MOV X0, X23
	0x0270ABE0 BL 0x1C16D14
	0x0270ABE4 MOV X0, X25
	0x0270ABE8 MOV X1, X23
	0x0270ABEC BL 0x1C16D18
	0x0270ABF0 STP X19, X22, [X0]
	0x0270ABF4 LDUR X19, [X29 - 0x70]
	0x0270ABF8 MOV X1, X25
	0x0270ABFC MOV X2, X21
	0x0270AC00 MOV X0, X19
	0x0270AC04 BL 0x3EB1AC0
	0x0270AC08 LDUR X22, [X29 - 0x78]
	0x0270AC0C MOV X1, X19
	0x0270AC10 MOV X2, X21
	0x0270AC14 MOV X0, X22
	0x0270AC18 BL 0x3EB1AC0
	0x0270AC1C LDR X8, [X26]
	0x0270AC20 MOV X0, X26
	0x0270AC24 MOV X1, X22
	0x0270AC28 LDR X9, [X8 + 0x258]
	0x0270AC2C LDR X2, [X8 + 0x260]
	0x0270AC30 BLR X9
	0x0270AC34 LDR X8, [X20 + 0x20]
	0x0270AC38 MOV X19, X0
	0x0270AC3C MOV X21, X1
	0x0270AC40 MOVZ W1, 0x10
	0x0270AC44 LDR X8, [X8 + 0xC0]
	0x0270AC48 LDR X8, [X8 + 0x10]
	0x0270AC4C LDR X8, [X8 + 0x80]
	0x0270AC50 ADD X22, X8, 0xA0
	0x0270AC54 MOV X0, X22
	0x0270AC58 BL 0x1C16D14
	0x0270AC5C MOV X0, X26
	0x0270AC60 MOV X1, X22
	0x0270AC64 BL 0x1C16D18
	0x0270AC68 STP X19, X21, [X0]
	0x0270AC6C LDR X8, [X20 + 0x20]
	0x0270AC70 MOVZ W1, 0x1
	0x0270AC74 LDR X8, [X8 + 0xC0]
	0x0270AC78 LDR X8, [X8 + 0x10]
	0x0270AC7C LDR X8, [X8 + 0x80]
	0x0270AC80 ADD X19, X8, 0x80
	0x0270AC84 MOV X0, X19
	0x0270AC88 BL 0x1C16D14
	0x0270AC8C MOV X0, X26
	0x0270AC90 MOV X1, X19
	0x0270AC94 BL 0x1C16D18
	0x0270AC98 STRB W27, [X0]
	0x0270AC9C LDUR X8, [X29 - 0x58]
	0x0270ACA0 LDR X8, [X8 + 0x28]
	0x0270ACA4 LDUR X9, [X29 - 0x18]
	0x0270ACA8 CMP X8, X9
	0x0270ACAC B.NE 0x270ACD8
	0x0270ACB0 SUB X31, X29, 0x10
	0x0270ACB4 LDP X20, X19, [X31 + 0x60]

ISIL:
	001 Subtract X31, X31, 320
	002 Move [X31+192], D15
	003 Move [X31+200], D14
	004 Move [X31+208], D13
	005 Move [X31+216], D12
	006 Move [X31+224], D11
	007 Move [X31+232], D10
	008 Move [X31+240], D9
	009 Move [X31+248], D8
	010 Move [X31+256], X29
	011 Move [X31+272], X30
	012 Move [X31+280], X23
	013 Move [X31+288], X22
	014 Move [X31+296], X21
	015 Move [X31+304], X20
	016 Move [X31+312], X19
	017 Move X8, -29487104
	018 Move V15, V1
	019 Move V10, [X31+320]
	020 Move V1, [X8+200]
	021 NotImplemented "Instruction MRS not yet implemented."
	022 Move X8, [X21+40]
	023 Move X20, X2
	024 Move V12, V6
	025 Move V11, V5
	026 Move V13, V4
	027 Move X19, X0
	028 NotImplemented "Instruction FCMP not yet implemented."
	029 NotImplemented "Instruction MOVI not yet implemented."
	030 Move [X31+184], X8
	031 Move [X31+144], X31
	032 Move [X31+112], V1
	033 Move [X31+120], V1
	034 Move [X31+80], V1
	035 Move [X31+88], V1
	036 Move [X31+48], V1
	037 Move [X31+56], V1
	038 Move [X31+2], V1
	039 Move X8, [X20+32]
	040 Move X0, X19
	041 Move V0, V13
	042 Move V1, V11
	043 Move X8, [X8+192]
	044 Move V2, V12
	045 Move V3, V7
	046 Move X1, [X8+104]
	047 Call 0x270A8CC, X0, X1
	048 Move V14, V3
	049 Move V9, V2
	050 Add X22, X31, 152
	051 Move [X31+24], S7
	052 Move [X31+32], S0
	053 Move [X31+16], S2
	054 Move TEMP, X1
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {88}
	058 Move X23, 0x1CD1000
	059 Move W8, [X23+1575]
	060 Move W9, 0x437F0000
	061 Move S8, W9
	062 Compare W8, 0
	063 JumpIfNotEqual {70}
	064 Move X0, 0x19EA000
	065 Move X0, [X0+1448]
	066 Call 0x1C17CF4
	067 Move V0, [X31+28]
	068 Move W8, 1
	069 Move [X23+1575], W8
	070 Move X8, 0x19EA000
	071 Move X8, [X8+1448]
	072 Multiply S8, S10, S8
	073 Move X0, [X8]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {80}
	077 Move V10, V0
	078 Call 0x1C17DFC
	079 Move V0, V10
	080 NotImplemented "Instruction FRINTP not yet implemented."
	081 NotImplemented "Instruction FCVTPS not yet implemented."
	082 NotImplemented "Instruction FCMP not yet implemented."
	083 NotImplemented "Instruction CSEL not yet implemented."
	084 Move S10, 1
	085 Move V8, V14
	086 Move [X31+4], S15
	087 Move [X31+12], S0
	088 Move W23, 255
	089 Move [X31+4], S11
	090 Move [X31+12], S13
	091 Move V9, V12
	092 Move V8, V7
	093 Move [X31+12], S15
	094 Move [X31+20], S14
	095 Move [X31+152], X31
	096 Move [X31+160], X31
	097 Move [X22+23], X31
	098 Move [X31+168], X31
	099 Compare X19, 0
	100 JumpIfEqual {180}
	101 Move X8, [X20+32]
	102 Move D15, [X19+88]
	103 Move D14, [X19+96]
	104 Move X0, X19
	105 Move X8, [X8+192]
	106 Move X8, [X8+128]
	107 Move X8, [X8+32]
	108 Move X8, [X8+192]
	109 Move X1, [X8+80]
	110 Call 0x270AA0C, X0
	111 Move X8, [X19+152]
	112 NotImplemented "Instruction LDUR not yet implemented."
	113 Move X0, X19
	114 Move [X22+23], X8
	115 Move [X31+159], V0
	116 Move X8, [X20+32]
	117 Move X8, [X8+192]
	118 Move X1, [X8+136]
	119 Call 0x270AD30, X0
	120 Move V1, [X31+8]
	121 Move V0, [X31+4]
	122 Move V2, [X31+12]
	123 Move [X31+32], D15
	124 Move [X31+40], D14
	125 Move [X31+56], S9
	126 Move [X31+64], S8
	127 Move [X31+48], S1
	128 Move [X31+56], S0
	129 Move S0, [X31+24]
	130 Move S3, [X31+28]
	131 NotImplemented "Instruction LDUR not yet implemented."
	132 Move [X31+64], S13
	133 Move [X31+72], S11
	134 Move [X31+80], W23
	135 Move [X31+72], S12
	136 Move [X31+80], S0
	137 NotImplemented "Instruction LDUR not yet implemented."
	138 Move [X31+112], S3
	139 Move [X31+120], S2
	140 Move V3, [X31+16]
	141 Move V2, [X31+20]
	142 Move [X31+128], S10
	143 Move [X31+132], W31
	144 Move [X31+136], X0
	145 Move [X31+144], X1
	146 Move [X31+120], S3
	147 Move [X31+128], S2
	148 Move [X31+81], V0
	149 Move [X31+6], V1
	150 Move X8, [X19]
	151 Add X1, X31, 32
	152 Move X0, X19
	153 Move X9, [X8+600]
	154 Move X2, [X8+608]
	155 NotImplemented "Instruction BLR not yet implemented."
	156 Move W8, 1
	157 Move [X19+168], X0
	158 Move [X19+176], X1
	159 Move [X19+160], W8
	160 Move X8, [X21+40]
	161 Move X9, [X31+184]
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move X20, [X31+304]
	164 Move X19, [X31+312]
	165 Move X22, [X31+288]
	166 Move X21, [X31+296]
	167 Move X30, [X31+272]
	168 Move X23, [X31+280]
	169 Move X29, [X31+256]
	170 Move D9, [X31+240]
	171 Move D8, [X31+248]
	172 Move D11, [X31+224]
	173 Move D10, [X31+232]
	174 Move D13, [X31+208]
	175 Move D12, [X31+216]
	176 Move D15, [X31+192]
	177 Move D14, [X31+200]
	178 Add X31, X31, 320
	179 Return 
	180 Call 0x1C17F20
	181 Call 0x3EB2B20

Method: System.Void UpdateStateFromCompletedJob()

Disassembly:
	0x0270ACB8 LDP X22, X21, [X31 + 0x50]
	0x0270ACBC LDP X24, X23, [X31 + 0x40]
	0x0270ACC0 LDP X26, X25, [X31 + 0x30]
	0x0270ACC4 LDP X28, X27, [X31 + 0x20]
	0x0270ACC8 LDP X29, X30, [X31 + 0x10]
	0x0270ACCC LDP D9, D8, [X31], #0x70
	0x0270ACD0 RET
	0x0270ACD4 BL 0x1C16F20
	0x0270ACD8 BL 0x3EB1B20
	0x0270ACDC STP X29, X30, [X31 - 0x30]!
	0x0270ACE0 STP X22, X21, [X31 + 0x10]
	0x0270ACE4 STP X20, X19, [X31 + 0x20]
	0x0270ACE8 ADD X29, X31, 0x0
	0x0270ACEC SUB X31, X31, 0x30
	0x0270ACF0 MRS X22, 0xC000
	0x0270ACF4 LDR X8, [X22 + 0x28]
	0x0270ACF8 ADD X10, X31, 0x0
	0x0270ACFC MOV X20, X1
	0x0270AD00 MOV X19, X0
	0x0270AD04 STUR X8, [X29 - 0x8]
	0x0270AD08 LDR X8, [X1 + 0x20]
	0x0270AD0C LDR X8, [X8 + 0xC0]
	0x0270AD10 LDR X9, [X8 + 0x8]
	0x0270AD14 LDR W9, [X9 + 0xFC]
	0x0270AD18 ADD X9, X9, 0xF
	0x0270AD1C AND X9, X9, 0x1FFFFFFFF
	0x0270AD20 SUB X21, X10, X9
	0x0270AD24 ADD X31, X21, 0x0
	0x0270AD28 STP X31, X31, [X29 - 0x30]
	0x0270AD2C LDR X1, [X8 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+104]
	005 Compare W8, 0
	006 JumpIfEqual {36}
	007 Move W8, [X0+160]
	008 Move X19, X0
	009 Compare W8, 0
	010 JumpIfEqual {36}
	011 Move X20, X1
	012 Add X0, X19, 168
	013 Move X1, X31
	014 Call JobHandle.Complete, X0
	015 Move [X19+168], X31
	016 Move [X19+176], X31
	017 Move [X19+160], W31
	018 Move X8, [X20+32]
	019 Move X0, X19
	020 Move X8, [X8+192]
	021 Move X1, [X8+136]
	022 Call 0x270AD30, X0
	023 Move X8, [X20+32]
	024 Move S0, [X0]
	025 Move S1, [X0+4]
	026 Move S2, [X0+8]
	027 Move S3, [X0+12]
	028 Move X0, X19
	029 Move X8, [X8+192]
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X1, [X8+104]
	033 Move X30, [X31+32]
	034 Call 0x270A8CC, X0, X1
	035 Return 
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Return 

Method: Unity.Jobs.JobHandle ScheduleTweenJob(ref UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Jobs.TweenJobData`1<T> jobData)

Disassembly:
	

ISIL:
No ISIL was generated
Method: Unity.Collections.NativeArray`1<T> GetJobOutputStore()

Disassembly:
	0x0270AD30 LDR X8, [X1]
	0x0270AD34 BLR X8
	0x0270AD38 TBZ X0, 0x0, 0x270ADB0
	0x0270AD3C LDR X8, [X20 + 0x20]
	0x0270AD40 MOV X0, X19
	0x0270AD44 LDR X8, [X8 + 0xC0]
	0x0270AD48 LDR X1, [X8 + 0x88]
	0x0270AD4C LDR X8, [X1]
	0x0270AD50 BLR X8
	0x0270AD54 STP X0, X1, [X29 - 0x30]
	0x0270AD58 LDR X8, [X20 + 0x20]
	0x0270AD5C SUB X2, X29, 0x30
	0x0270AD60 SUB X3, X29, 0x20
	0x0270AD64 MOV X4, X21
	0x0270AD68 LDR X8, [X8 + 0xC0]
	0x0270AD6C LDR X1, [X8 + 0xA0]
	0x0270AD70 SUB X8, X29, 0xC
	0x0270AD74 LDR X0, [X1]
	0x0270AD78 STUR W31, [X29 - 0xC]
	0x0270AD7C STP X8, X21, [X29 - 0x20]
	0x0270AD80 LDR X8, [X1 + 0x10]
	0x0270AD84 BLR X8
	0x0270AD88 LDR X8, [X20 + 0x20]
	0x0270AD8C SUB X3, X29, 0x20
	0x0270AD90 MOV X2, X19
	0x0270AD94 MOV X4, X21
	0x0270AD98 LDR X8, [X8 + 0xC0]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move W8, [X0+104]
	006 Move X19, X0
	007 Compare W8, 0
	008 JumpIfNotEqual {26}
	009 Move [X31], X31
	010 Move [X31+8], X31
	011 Move X8, [X1+32]
	012 Add X0, X31, 0
	013 Move W1, 1
	014 Move W2, 4
	015 Move X8, [X8+192]
	016 Move W3, 1
	017 Move W20, 1
	018 Move X4, [X8+168]
	019 Call NativeArray`1<Color>..ctor, X0, X1, X2, X3
	020 Move V0, [X31]
	021 Move X0, X19
	022 Move X1, X31
	023 Move [X19+104], W20
	024 Move [X19+7], V0
	025 Call DisposableManagerSingleton.RegisterDisposable, X0
	026 Move X0, [X19+112]
	027 Move X1, [X19+120]
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Add X31, X31, 48
	032 Return X0

Method: System.Void OnAnimationCurveChanged(UnityEngine.AnimationCurve value)

Disassembly:
	0x0270AD9C LDR X1, [X8 + 0x68]
	0x0270ADA0 LDR X0, [X1]
	0x0270ADA4 STUR X21, [X29 - 0x20]
	0x0270ADA8 LDR X8, [X1 + 0x10]
	0x0270ADAC BLR X8
	0x0270ADB0 LDR X8, [X22 + 0x28]
	0x0270ADB4 LDUR X9, [X29 - 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {8}
	004 Move W8, 1
	005 Move [X0+128], W8
	006 Move X30, [X31+16]
	007 Return 
	008 Call 0x1C17F20

Method: System.Boolean CompleteJob()

Disassembly:
	0x0270ADB8 CMP X8, X9
	0x0270ADBC B.NE 0x270ADD4
	0x0270ADC0 ADD X31, X29, 0x0
	0x0270ADC4 LDP X20, X19, [X31 + 0x20]
	0x0270ADC8 LDP X22, X21, [X31 + 0x10]
	0x0270ADCC LDP X29, X30, [X31], #0x30
	0x0270ADD0 RET
	0x0270ADD4 BL 0x3EB1B20
	0x0270ADD8 SUB X31, X31, 0x50
	0x0270ADDC STR X30, [X31 + 0x10]
	0x0270ADE0 STP X24, X23, [X31 + 0x20]
	0x0270ADE4 STP X22, X21, [X31 + 0x30]
	0x0270ADE8 STP X20, X19, [X31 + 0x40]
	0x0270ADEC LDR X8, [X1 + 0x20]
	0x0270ADF0 MOV X20, X1
	0x0270ADF4 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+104]
	004 Compare W8, 0
	005 JumpIfEqual {17}
	006 Move W8, [X0+160]
	007 Move X19, X0
	008 Compare W8, 0
	009 JumpIfEqual {17}
	010 Add X0, X19, 168
	011 Move X1, X31
	012 Call JobHandle.Complete, X0
	013 Move W0, 1
	014 Move [X19+168], X31
	015 Move [X19+176], X31
	016 Move [X19+160], W31
	017 Move W0, W31
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Return X0

Method: System.Void .ctor()

Disassembly:
	0x0270ADF8 LDR X8, [X8 + 0xC0]
	0x0270ADFC LDR X8, [X8 + 0x10]
	0x0270AE00 LDR X1, [X8 + 0x80]
	0x0270AE04 BL 0x1C16D18
	0x0270AE08 LDRB W8, [X0]
	0x0270AE0C CBNZ W8, 0x270AEA4

ISIL:
	001 Move W8, 1
	002 Move [X0+128], W8
	003 Move X8, [X1+32]
	004 Move X8, [X8+192]
	005 Move X1, [X8+184]
	006 Call 0x270D2C0, X0
	007 Return 

