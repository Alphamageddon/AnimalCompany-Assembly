Type: UnityEngine.XR.Interaction.Toolkit.Utilities.Tweenables.SmartTweenableVariables.SmartFollowVector3TweenableVariable

Method: System.Single get_minDistanceAllowed()

Disassembly:
	0x03B93100 LDR W8, [X0 + 0xE0]
	0x03B93104 CBNZ W8, 0x3B9310C

ISIL:
	001 Move V0, [X0+168]
	002 Return V0

Method: System.Void set_minDistanceAllowed(System.Single value)

Disassembly:
	0x03B93108 BL 0x1C16DFC
	0x03B9310C ADD X0, X31, 0x8

ISIL:
	001 Move [X0+168], S0
	002 Return 

Method: System.Single get_maxDistanceAllowed()

Disassembly:
	0x03B93110 BL 0x3B92FAC
	0x03B93114 LDR X0, [X31 + 0x8]

ISIL:
	001 Move V0, [X0+172]
	002 Return V0

Method: System.Void set_maxDistanceAllowed(System.Single value)

Disassembly:
	0x03B93118 LDP X20, X19, [X31 + 0x10]
	0x03B9311C LDR X30, [X31], #0x20
	0x03B93120 RET
	0x03B93124 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X0+172], S0
	002 Multiply S0, S0, S0
	003 Move [X0+180], S0
	004 Return 

Method: System.Single get_minToMaxDelaySeconds()

Disassembly:
	0x03B93128 STP X20, X19, [X31 + 0x10]
	0x03B9312C ADRP X21, 0x84F000

ISIL:
	001 Move V0, [X0+176]
	002 Return V0

Method: System.Void set_minToMaxDelaySeconds(System.Single value)

Disassembly:
	0x03B93130 ADRP X19, 0x5C9000
	0x03B93134 ADRP X20, 0x588000

ISIL:
	001 Move [X0+176], S0
	002 Return 

Method: System.Void .ctor(System.Single minDistanceAllowed = 0.01, System.Single maxDistanceAllowed = 0.3, System.Single minToMaxDelaySeconds = 3)

Disassembly:
	0x03B93138 LDRB W8, [X21 + 0xBAE]
	0x03B9313C LDR X19, [X19 + 0x628]
	0x03B93140 LDR X20, [X20 + 0x848]
	0x03B93144 TBNZ X8, 0x0, 0x3B93174
	0x03B93148 ADRP X0, 0x588000
	0x03B9314C LDR X0, [X0 + 0x848]
	0x03B93150 BL 0x1C16CF4
	0x03B93154 ADRP X0, 0x5C9000
	0x03B93158 LDR X0, [X0 + 0x5D0]
	0x03B9315C BL 0x1C16CF4
	0x03B93160 ADRP X0, 0x5C9000
	0x03B93164 LDR X0, [X0 + 0x628]
	0x03B93168 BL 0x1C16CF4
	0x03B9316C MOVZ W8, 0x1
	0x03B93170 STRB W8, [X21 + 0xBAE]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move V8, V2
	007 Move V9, V1
	008 Move V10, V0
	009 Move X19, X0
	010 Call Vector3TweenableVariable..ctor, X0
	011 Multiply S0, S9, S9
	012 Move [X19+168], S10
	013 Move [X19+176], S9
	014 Move [X19+176], S8
	015 Move [X19+184], S0
	016 Move X30, [X31+32]
	017 Move X19, [X31+40]
	018 Move D9, [X31+16]
	019 Move D8, [X31+24]
	020 Move V10, [X31+48]
	021 Return 

Method: System.Boolean IsNewTargetWithinThreshold(Unity.Mathematics.float3 newTarget)

Disassembly:
	0x03B931BC STR X19, [X8 + 0x8]
	0x03B931C0 LDP X20, X19, [X31 + 0x10]
	0x03B931C4 LDP X30, X21, [X31], #0x20
	0x03B931C8 RET
	0x03B931CC RET
	0x03B931D0 B 0x3B93124
	0x03B931D4 LDRB W0, [X0 + 0xB8]
	0x03B931D8 RET
	0x03B931DC STRB W1, [X0 + 0xB8]
	0x03B931E0 RET
	0x03B931E4 LDR V0, [X0 + 0xBC]
	0x03B931E8 RET
	0x03B931EC STR S0, [X0 + 0xBC]
	0x03B931F0 RET
	0x03B931F4 SUB X31, X31, 0x1C0
	0x03B931F8 STR X29, [X31 + 0x180]
	0x03B931FC STP X30, X23, [X31 + 0x190]
	0x03B93200 STP X22, X21, [X31 + 0x1A0]
	0x03B93204 STP X20, X19, [X31 + 0x1B0]
	0x03B93208 ADRP X23, 0x84F000
	0x03B9320C ADRP X21, 0x5C9000
	0x03B93210 LDRB W8, [X23 + 0xBB0]
	0x03B93214 LDR X21, [X21 + 0x630]
	0x03B93218 MOV X20, X1
	0x03B9321C MOV X19, X0
	0x03B93220 ADD X22, X31, 0x80
	0x03B93224 TBNZ X8, 0x0, 0x3B9323C
	0x03B93228 ADRP X0, 0x5C9000
	0x03B9322C LDR X0, [X0 + 0x630]
	0x03B93230 BL 0x1C16CF4
	0x03B93234 MOVZ W8, 0x1
	0x03B93238 STRB W8, [X23 + 0xBB0]
	0x03B9323C MOVI V0.2D, 0x0
	0x03B93240 ADD X0, X31, 0x8
	0x03B93244 MOVZ W2, 0x78
	0x03B93248 MOV X1, X20
	0x03B9324C STP V0, V0, [X22 + 0x60]
	0x03B93250 STP V0, V0, [X22 + 0x40]
	0x03B93254 STP V0, V0, [X22 + 0x20]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], D9
	003 Move [X31+40], D8
	004 Move [X31+48], X30
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X20, 0x850000
	009 Move [X31+16], S0
	010 Move [X31+24], S1
	011 Move [X31+24], S2
	012 Move X21, 0x5CA000
	013 Move W8, [X20+2976]
	014 Move X21, [X21+1480]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x5CA000
	021 Move X0, [X0+1480]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2976], W8
	025 Move X1, [X21]
	026 Move X0, X19
	027 Call TweenableVariableAsyncBase`1<float3>.get_Value, X0
	028 Move [X31], S0
	029 Move [X31+8], S1
	030 Move [X31+8], S2
	031 Move S8, [X19+168]
	032 Move S9, [X19+172]
	033 Move X0, X31
	034 Call Time.get_unscaledTime
	035 Move V1, [X19+184]
	036 Move V3, [X19+176]
	037 Add X0, X31, 0
	038 Add X1, X31, 16
	039 Subtract S2, S0, S1
	040 Move V0, V8
	041 Move V1, V9
	042 Call SmartFollowVector3TweenableVariable.IsNewTargetWithinThreshold, X0, X1, V0, V1, V2, V3
	043 Move X20, [X31+64]
	044 Move X19, [X31+72]
	045 Move X30, [X31+48]
	046 Move X21, [X31+56]
	047 Move D9, [X31+32]
	048 Move D8, [X31+40]
	049 And W0, W0, 1
	050 Add X31, X31, 80
	051 Return X0

Method: System.Boolean SetTargetWithinThreshold(Unity.Mathematics.float3 newTarget)

Disassembly:
	0x03B932EC MOV X19, X0
	0x03B932F0 TBNZ X8, 0x0, 0x3B93308
	0x03B932F4 ADRP X0, 0x5C9000
	0x03B932F8 LDR X0, [X0 + 0x638]
	0x03B932FC BL 0x1C16CF4
	0x03B93300 MOVZ W8, 0x1
	0x03B93304 STRB W8, [X21 + 0xBB1]
	0x03B93308 MOVZ W8, 0x3F800000
	0x03B9330C STR W8, [X19 + 0xBC]
	0x03B93310 LDR X1, [X20]
	0x03B93314 MOV X0, X19
	0x03B93318 LDP X20, X19, [X31 + 0x10]
	0x03B9331C LDP X30, X21, [X31], #0x20
	0x03B93320 B 0x2709DF8
	0x03B93324 SUB X31, X31, 0xE0
	0x03B93328 STP X30, X21, [X31 + 0xC0]
	0x03B9332C STP X20, X19, [X31 + 0xD0]
	0x03B93330 ADRP X21, 0x84F000
	0x03B93334 ADRP X20, 0x5C9000
	0x03B93338 LDRB W8, [X21 + 0xBB2]
	0x03B9333C LDR X20, [X20 + 0x640]
	0x03B93340 MOV X19, X1
	0x03B93344 TBNZ X8, 0x0, 0x3B9335C
	0x03B93348 ADRP X0, 0x5C9000
	0x03B9334C LDR X0, [X0 + 0x640]
	0x03B93350 BL 0x1C16CF4
	0x03B93354 MOVZ W8, 0x1
	0x03B93358 STRB W8, [X21 + 0xBB2]
	0x03B9335C MOVI V0.2D, 0x0
	0x03B93360 STP V0, V0, [X31 + 0x60]
	0x03B93364 STP V0, V0, [X31 + 0x40]
	0x03B93368 LDP V1, V0, [X19 + 0x20]
	0x03B9336C LDP V3, V2, [X19]
	0x03B93370 ADD X0, X31, 0x40
	0x03B93374 ADD X1, X31, 0x0
	0x03B93378 MOV X2, X31
	0x03B9337C STP V1, V0, [X31 + 0x20]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x850000
	008 Move W8, [X20+2977]
	009 Move V8, V2
	010 Move V9, V1
	011 Move V10, V0
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x5CA000
	018 Move X0, [X0+1496]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2977], W8
	022 Move X0, X19
	023 Move V0, V10
	024 Move V1, V9
	025 Move V2, V8
	026 Call SmartFollowVector3TweenableVariable.IsNewTargetWithinThreshold, X0, X1
	027 Move W20, W0
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {40}
	032 Move X8, 0x5CA000
	033 Move X8, [X8+1496]
	034 Move X0, X19
	035 Move V0, V10
	036 Move V1, V9
	037 Move X1, [X8]
	038 Move V2, V8
	039 Call TweenableVariableBase`1<float3>.set_target, X0, X1
	040 And W0, W20, 1
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+24]
	044 Move D9, [X31+8]
	045 Move D8, [X31+16]
	046 Move V10, [X31+48]
	047 Return X0

Method: System.Void OnTargetChanged(Unity.Mathematics.float3 newTarget)

Disassembly:
	0x03B93380 STP V3, V2, [X31]
	0x03B93384 BL 0x3B99644
	0x03B93388 LDR X3, [X20]
	0x03B9338C LDP V0, V1, [X31 + 0x40]
	0x03B93390 LDP V2, V3, [X31 + 0x60]
	0x03B93394 ADD X0, X31, 0x80
	0x03B93398 MOV X1, X31
	0x03B9339C MOV X2, X31
	0x03B933A0 STP V0, V1, [X31 + 0x80]
	0x03B933A4 STP V2, V3, [X31 + 0xA0]
	0x03B933A8 BL 0x21EE2C4
	0x03B933AC LDP X20, X19, [X31 + 0xD0]
	0x03B933B0 LDP X30, X21, [X31 + 0xC0]
	0x03B933B4 ADD X31, X31, 0xE0
	0x03B933B8 RET
	0x03B933BC STP X30, X21, [X31 - 0x20]!
	0x03B933C0 STP X20, X19, [X31 + 0x10]
	0x03B933C4 ADRP X20, 0x84F000
	0x03B933C8 ADRP X21, 0x5C9000
	0x03B933CC LDRB W8, [X20 + 0xBB3]
	0x03B933D0 LDR X21, [X21 + 0x648]
	0x03B933D4 MOV X19, X0
	0x03B933D8 TBNZ X8, 0x0, 0x3B933F0
	0x03B933DC ADRP X0, 0x5C9000
	0x03B933E0 LDR X0, [X0 + 0x648]
	0x03B933E4 BL 0x1C16CF4
	0x03B933E8 MOVZ W8, 0x1
	0x03B933EC STRB W8, [X20 + 0xBB3]
	0x03B933F0 LDR X1, [X21]
	0x03B933F4 MOV X0, X19
	0x03B933F8 LDP X20, X19, [X31 + 0x10]
	0x03B933FC LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x850000
	009 Move X21, 0x5CA000
	010 Move W8, [X20+2978]
	011 Move X21, [X21+1504]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x5CA000
	021 Move X0, [X0+1504]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2978], W8
	025 Move X1, [X21]
	026 Move X0, X19
	027 Move V0, V10
	028 Move V1, V9
	029 Move V2, V8
	030 Call TweenableVariableBase`1<float3>.OnTargetChanged, X0, X1
	031 Move X0, X31
	032 Call Time.get_unscaledTime
	033 Move [X19+184], S0
	034 Move X20, [X31+48]
	035 Move X19, [X31+56]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Move D9, [X31+16]
	039 Move D8, [X31+24]
	040 Move V10, [X31+64]
	041 Return 

Method: System.Void HandleSmartTween(System.Single deltaTime, System.Single lowerSpeed, System.Single upperSpeed)

Disassembly:
	0x03B93400 B 0x270A29C
	0x03B93404 LDR V0, [X0 + 0x68]
	0x03B93408 RET
	0x03B9340C STR S0, [X0 + 0x68]
	0x03B93410 RET
	0x03B93414 LDR V16, [X31]
	0x03B93418 MOV X0, X31
	0x03B9341C STR S16, [X31]
	0x03B93420 B 0x3C2A2F8
	0x03B93424 STP X30, X19, [X31 - 0x10]!
	0x03B93428 FMUL S0, S0, S4
	0x03B9342C FMUL S1, S1, S5
	0x03B93430 FMUL S2, S2, S6
	0x03B93434 ADRP X8, 0xFFFFFFFFFCF57000
	0x03B93438 FADD S0, S0, S1
	0x03B9343C FMUL S3, S3, S7
	0x03B93440 LDR V1, [X8 + 0x1B4]
	0x03B93444 FADD S0, S2, S0
	0x03B93448 FADD S0, S3, S0
	0x03B9344C FABS S0, S0
	0x03B93450 FMOV S2, 1
	0x03B93454 FMINNM S0, S0, S2
	0x03B93458 MOV X19, X0
	0x03B9345C FCMP S0, S1
	0x03B93460 FMOV S1, W31
	0x03B93464 B.GT 0x3B9347C
	0x03B93468 BL 0x3EB1BB0
	0x03B9346C ADRP X8, 0xFFFFFFFFFCF57000
	0x03B93470 LDR V1, [X8 + 0x448]
	0x03B93474 FADD S0, S0, S0
	0x03B93478 FMUL S1, S0, S1
	0x03B9347C LDR V0, [X19 + 0x68]
	0x03B93480 FCMP S1, S0
	0x03B93484 CSET W0, MI
	0x03B93488 LDP X30, X19, [X31], #0x10
	0x03B9348C RET
	0x03B93490 SUB X31, X31, 0x140
	0x03B93494 STP X29, X30, [X31 + 0x110]
	0x03B93498 STP X22, X21, [X31 + 0x120]
	0x03B9349C STP X20, X19, [X31 + 0x130]
	0x03B934A0 ADRP X22, 0x84F000
	0x03B934A4 ADRP X20, 0x5C9000
	0x03B934A8 LDRB W8, [X22 + 0xBB5]
	0x03B934AC LDR X20, [X20 + 0x650]
	0x03B934B0 MOV X19, X1
	0x03B934B4 ADD X21, X31, 0x60
	0x03B934B8 TBNZ X8, 0x0, 0x3B934D0
	0x03B934BC ADRP X0, 0x5C9000
	0x03B934C0 LDR X0, [X0 + 0x650]
	0x03B934C4 BL 0x1C16CF4
	0x03B934C8 MOVZ W8, 0x1
	0x03B934CC STRB W8, [X22 + 0xBB5]
	0x03B934D0 MOVI V0.2D, 0x0
	0x03B934D4 ADD X0, X31, 0x8
	0x03B934D8 MOVZ W2, 0x58
	0x03B934DC MOV X1, X19
	0x03B934E0 STR X31, [X31 + 0xB0]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], D10
	003 Move [X31+56], D9
	004 Move [X31+64], D8
	005 Move [X31+72], X30
	006 Move [X31+80], X22
	007 Move [X31+88], X21
	008 Move [X31+96], X20
	009 Move [X31+104], X19
	010 Move X22, 0x850000
	011 Move X21, 0x5CA000
	012 Move X20, 0x5CA000
	013 Move W8, [X22+2979]
	014 Move X21, [X21+1480]
	015 Move X20, [X20+1512]
	016 Move V8, V2
	017 Move V9, V1
	018 Move V10, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {35}
	024 Move X0, 0x5CA000
	025 Move X0, [X0+1480]
	026 Call 0x1C17CF4
	027 Move X0, 0x5CA000
	028 Move X0, [X0+1512]
	029 Call 0x1C17CF4
	030 Move X0, 0x5CA000
	031 Move X0, [X0+1520]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+2979], W8
	035 Move X1, [X21]
	036 Move X0, X19
	037 Move [X31+12], W31
	038 Call TweenableVariableAsyncBase`1<float3>.get_Value, X0
	039 Move [X31+32], S0
	040 Move [X31+40], S1
	041 Move [X31+40], S2
	042 Move V0, [X19+64]
	043 Move V1, [X19+72]
	044 Add X0, X31, 32
	045 Add X1, X31, 16
	046 Move [X31+16], D0
	047 Move [X31+24], S1
	048 Move V0, [X19+180]
	049 Add X2, X31, 12
	050 Move V1, V10
	051 Move V2, V9
	052 Move V3, V8
	053 Call SmartFollowVector3TweenableVariable.ComputeNewTweenTarget, X0, X1, V0, V1, V2, V3, X2
	054 Move V0, [X31+12]
	055 Move X1, [X20]
	056 Move X0, X19
	057 Call TweenableVariableBase`1<float3>.HandleTween, X0, V0
	058 Move X20, [X31+96]
	059 Move X19, [X31+104]
	060 Move X22, [X31+80]
	061 Move X21, [X31+88]
	062 Move X30, [X31+72]
	063 Move D9, [X31+56]
	064 Move D8, [X31+64]
	065 Move V10, [X31+48]
	066 Add X31, X31, 112
	067 Return 

Method: System.Void ComputeNewTweenTarget(in Unity.Mathematics.float3 currentValue, in Unity.Mathematics.float3 targetValue, System.Single sqrMaxDistanceAllowed, System.Single deltaTime, System.Single lowerSpeed, System.Single upperSpeed, out System.Single newTweenTarget)

Disassembly:
	0x03B934E4 STP V0, V0, [X21 + 0x30]
	0x03B934E8 STP V0, V0, [X31 + 0x70]
	0x03B934EC STR V0, [X31 + 0x6]
	0x03B934F0 BL 0x3EB1AC0
	0x03B934F4 ADD X0, X31, 0x60
	0x03B934F8 ADD X1, X31, 0x8
	0x03B934FC MOV X2, X31
	0x03B93500 BL 0x3B99658
	0x03B93504 LDR X19, [X20]
	0x03B93508 ADD X0, X31, 0xB8
	0x03B9350C ADD X1, X31, 0x60
	0x03B93510 MOVZ W2, 0x58
	0x03B93514 BL 0x3EB1AC0
	0x03B93518 ADD X0, X31, 0xB8
	0x03B9351C MOV X1, X31
	0x03B93520 MOV X2, X31
	0x03B93524 MOV X3, X19
	0x03B93528 BL 0x21EE12C
	0x03B9352C LDP X20, X19, [X31 + 0x130]
	0x03B93530 LDP X22, X21, [X31 + 0x120]
	0x03B93534 LDP X29, X30, [X31 + 0x110]
	0x03B93538 ADD X31, X31, 0x140
	0x03B9353C RET
	0x03B93540 STP X30, X21, [X31 - 0x20]!
	0x03B93544 STP X20, X19, [X31 + 0x10]
	0x03B93548 ADRP X20, 0x84F000
	0x03B9354C ADRP X21, 0x5C9000
	0x03B93550 LDRB W8, [X20 + 0xBB6]
	0x03B93554 LDR X21, [X21 + 0x658]
	0x03B93558 MOV X19, X0
	0x03B9355C TBNZ X8, 0x0, 0x3B93574
	0x03B93560 ADRP X0, 0x5C9000
	0x03B93564 LDR X0, [X0 + 0x658]
	0x03B93568 BL 0x1C16CF4
	0x03B9356C MOVZ W8, 0x1
	0x03B93570 STRB W8, [X20 + 0xBB6]
	0x03B93574 LDR X1, [X21]
	0x03B93578 MOV X0, X19
	0x03B9357C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X22, 0x850000
	012 Move X23, 0x5CA000
	013 Move W8, [X22+2980]
	014 Move X23, [X23+1528]
	015 Move X19, X2
	016 Move V8, V3
	017 Move V9, V2
	018 Move V10, V1
	019 Move V11, V0
	020 Move X20, X1
	021 Move X21, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0x5CA000
	027 Move X0, [X0+1528]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+2980], W8
	031 Move X0, [X23]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X21
	037 Move X1, X20
	038 Move V2, V9
	039 Move V3, V8
	040 Move X2, X19
	041 Move X20, [X31+64]
	042 Move X19, [X31+72]
	043 Move X22, [X31+48]
	044 Move X21, [X31+56]
	045 Move X30, [X31+32]
	046 Move X23, [X31+40]
	047 Move D9, [X31+16]
	048 Move D8, [X31+24]
	049 Move V0, V11
	050 Move V1, V10
	051 Move D11, [X31+80]
	052 Move D10, [X31+88]

Method: System.Boolean IsNewTargetWithinThreshold(in Unity.Mathematics.float3 currentValue, in Unity.Mathematics.float3 targetValue, System.Single minDistanceAllowed, System.Single maxDistanceAllowed, System.Single timeSinceLastUpdate, System.Single minToMaxDelaySeconds)

Disassembly:
	0x03B93258 STR V0, [X22 + 0x1]
	0x03B9325C STR V0, [X31 + 0x8]
	0x03B93260 BL 0x3EB1AC0
	0x03B93264 ADD X0, X31, 0x80
	0x03B93268 ADD X1, X31, 0x8
	0x03B9326C MOV X2, X31
	0x03B93270 BL 0x3B99620
	0x03B93274 LDR V0, [X19 + 0xBC]
	0x03B93278 ADD X0, X31, 0x80
	0x03B9327C MOV X1, X31
	0x03B93280 BL 0x3B99634
	0x03B93284 LDRB W1, [X19 + 0xB8]
	0x03B93288 ADD X0, X31, 0x80
	0x03B9328C MOV X2, X31
	0x03B93290 BL 0x3B9963C
	0x03B93294 LDR X19, [X21]
	0x03B93298 ADD X0, X31, 0x100
	0x03B9329C ADD X1, X31, 0x80
	0x03B932A0 MOVZ W2, 0x80
	0x03B932A4 BL 0x3EB1AC0
	0x03B932A8 ADD X0, X31, 0x100
	0x03B932AC MOV X1, X31
	0x03B932B0 MOV X2, X31
	0x03B932B4 MOV X3, X19
	0x03B932B8 BL 0x21EE0A4
	0x03B932BC LDP X20, X19, [X31 + 0x1B0]
	0x03B932C0 LDP X22, X21, [X31 + 0x1A0]
	0x03B932C4 LDP X30, X23, [X31 + 0x190]
	0x03B932C8 LDR X29, [X31 + 0x180]
	0x03B932CC ADD X31, X31, 0x1C0
	0x03B932D0 RET
	0x03B932D4 STP X30, X21, [X31 - 0x20]!
	0x03B932D8 STP X20, X19, [X31 + 0x10]
	0x03B932DC ADRP X21, 0x84F000
	0x03B932E0 ADRP X20, 0x5C9000
	0x03B932E4 LDRB W8, [X21 + 0xBB1]
	0x03B932E8 LDR X20, [X20 + 0x638]

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x850000
	011 Move X22, 0x5CA000
	012 Move W8, [X21+2981]
	013 Move X22, [X22+1488]
	014 Move V8, V3
	015 Move V9, V2
	016 Move V10, V1
	017 Move V11, V0
	018 Move X19, X1
	019 Move X20, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x5CA000
	025 Move X0, [X0+1488]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+2981], W8
	029 Move X0, [X22]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X19
	036 Move V2, V9
	037 Move V3, V8
	038 Move X20, [X31+64]
	039 Move X19, [X31+72]
	040 Move X22, [X31+48]
	041 Move X21, [X31+56]
	042 Move X30, [X31+32]
	043 Move D9, [X31+16]
	044 Move D8, [X31+24]
	045 Move V0, V11
	046 Move V1, V10
	047 Move D11, [X31+80]
	048 Move D10, [X31+88]
	049 Call IsNewTargetWithinThreshold_000009D3$BurstDirectCall.Invoke, X0, X1, V0, V1, V2, V3
	050 Return X0

Method: System.Void ComputeNewTweenTarget$BurstManaged(in Unity.Mathematics.float3 currentValue, in Unity.Mathematics.float3 targetValue, System.Single sqrMaxDistanceAllowed, System.Single deltaTime, System.Single lowerSpeed, System.Single upperSpeed, out System.Single newTweenTarget)

Disassembly:
	0x03B93870 CBNZ W8, 0x3B93878
	0x03B93874 BL 0x1C16DFC
	0x03B93878 BL 0x3B94A20
	0x03B9387C CBZ X0, 0x3B938B0
	0x03B93880 MOV X4, X0
	0x03B93884 MOV X0, X22
	0x03B93888 MOV X1, X21
	0x03B9388C MOV X2, X20
	0x03B93890 MOV X3, X19
	0x03B93894 LDP X20, X19, [X31 + 0x30]
	0x03B93898 LDP X22, X21, [X31 + 0x20]
	0x03B9389C LDP X24, X23, [X31 + 0x10]
	0x03B938A0 LDR X30, [X31 + 0x8]
	0x03B938A4 MOV V0.16B, V8.16B
	0x03B938A8 LDR V8, [X31], #0x40
	0x03B938AC BR X4
	0x03B938B0 LDR V1, [X22]
	0x03B938B4 LDR V2, [X22 + 0x8]
	0x03B938B8 FMOV S0, 1
	0x03B938BC FSUB S0, S0, S8
	0x03B938C0 LDR V3, [X21]
	0x03B938C4 LDR V4, [X21 + 0x8]
	0x03B938C8 FMUL S6, S0, S0
	0x03B938CC LDR V5, [X20]
	0x00000000 INVALID
	0x03B938D4 FMUL S2, S6, S2
	0x03B938D8 LDR V6, [X20 + 0x8]
	0x03B938DC FADD S0, S0, S0
	0x03B938E0 FMUL S0, S0, S8
	0x00000000 INVALID
	0x03B938E8 FMUL S0, S0, S4
	0x03B938EC FMUL S4, S8, S8
	0x00000000 INVALID
	0x03B938F4 FMUL S4, S4, S6
	0x03B938F8 FADD V1.2S, V1.2S, V3.2S
	0x03B938FC FADD S0, S2, S0
	0x03B93900 FADD V1.2S, V1.2S, V5.2S
	0x03B93904 FADD S0, S0, S4
	0x03B93908 STR D1, [X19]
	0x03B9390C STR S0, [X19 + 0x8]

ISIL:
	001 Move V4, [X0]
	002 NotImplemented "Instruction LDUR not yet implemented."
	003 Move V6, [X1]
	004 NotImplemented "Instruction LDUR not yet implemented."
	005 Move W8, 0x7F800000
	006 Subtract S4, S6, S4
	007 Subtract V5, V7, V5
	008 Multiply S4, S4, S4
	009 NotImplemented "Instruction INVALID not yet implemented."
	010 Add S4, S4, S5
	011 Move S5, V5.S[1]
	012 Add S4, S5, S4
	013 NotImplemented "Instruction FDIV not yet implemented."
	014 Move W9, S0
	015 And W9, W9, 0x7FFFFFFF
	016 Move S4, 1
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction FCCMP not yet implemented."
	019 NotImplemented "Instruction FCSEL not yet implemented."
	020 Move W9, S0
	021 And W9, W9, 0x7FFFFFFF
	022 Move S5, W31
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Subtract S6, S4, S0
	025 NotImplemented "Instruction FCCMP not yet implemented."
	026 NotImplemented "Instruction FCSEL not yet implemented."
	027 Multiply S0, S0, S3
	028 Move W9, S0
	029 And W9, W9, 0x7FFFFFFF
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction FCCMP not yet implemented."
	032 NotImplemented "Instruction FCSEL not yet implemented."
	033 Move W9, S0
	034 And W9, W9, 0x7FFFFFFF
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction FCCMP not yet implemented."
	037 NotImplemented "Instruction FCSEL not yet implemented."
	038 Multiply S0, S0, S1
	039 Move [X2], S0
	040 Return 

Method: System.Boolean IsNewTargetWithinThreshold$BurstManaged(in Unity.Mathematics.float3 currentValue, in Unity.Mathematics.float3 targetValue, System.Single minDistanceAllowed, System.Single maxDistanceAllowed, System.Single timeSinceLastUpdate, System.Single minToMaxDelaySeconds)

Disassembly:
	0x03B93910 LDP X20, X19, [X31 + 0x30]
	0x03B93914 LDP X22, X21, [X31 + 0x20]
	0x03B93918 LDP X24, X23, [X31 + 0x10]
	0x03B9391C LDR X30, [X31 + 0x8]
	0x03B93920 LDR V8, [X31], #0x40
	0x03B93924 RET
	0x03B93928 STR D8, [X31 - 0x50]!
	0x03B9392C STP X30, X25, [X31 + 0x10]
	0x03B93930 STP X24, X23, [X31 + 0x20]
	0x03B93934 STP X22, X21, [X31 + 0x30]
	0x03B93938 STP X20, X19, [X31 + 0x40]
	0x03B9393C ADRP X24, 0x84F000
	0x03B93940 ADRP X25, 0x5C9000
	0x03B93944 LDRB W8, [X24 + 0xBBC]
	0x03B93948 LDR X25, [X25 + 0x680]
	0x03B9394C MOV X19, X4
	0x03B93950 MOV V8.16B, V0.16B
	0x03B93954 MOV X20, X3
	0x03B93958 MOV X21, X2
	0x03B9395C MOV X22, X1
	0x03B93960 MOV X23, X0
	0x03B93964 TBNZ X8, 0x0, 0x3B9397C
	0x03B93968 ADRP X0, 0x5C9000
	0x03B9396C LDR X0, [X0 + 0x680]
	0x03B93970 BL 0x1C16CF4
	0x03B93974 MOVZ W8, 0x1
	0x03B93978 STRB W8, [X24 + 0xBBC]
	0x03B9397C LDR X0, [X25]
	0x03B93980 LDR W8, [X0 + 0xE0]
	0x03B93984 CBNZ W8, 0x3B9398C
	0x03B93988 BL 0x1C16DFC
	0x03B9398C MOV X0, X23

ISIL:
	001 NotImplemented "Instruction FDIV not yet implemented."
	002 Move W9, S2
	003 Move W8, 0x7F800000
	004 And W9, W9, 0x7FFFFFFF
	005 Move S3, 1
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move V4, [X0]
	008 Move V6, [X1]
	009 NotImplemented "Instruction FCCMP not yet implemented."
	010 NotImplemented "Instruction FCSEL not yet implemented."
	011 NotImplemented "Instruction LDUR not yet implemented."
	012 NotImplemented "Instruction LDUR not yet implemented."
	013 Move W9, S2
	014 And W9, W9, 0x7FFFFFFF
	015 Subtract S4, S6, S4
	016 Move S6, W31
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction FCCMP not yet implemented."
	019 Subtract V5, V7, V5
	020 NotImplemented "Instruction FCSEL not yet implemented."
	021 Subtract S1, S1, S0
	022 Multiply S3, S4, S4
	023 NotImplemented "Instruction INVALID not yet implemented."
	024 Multiply S1, S1, S2
	025 Add S3, S3, S4
	026 Move S4, V4.S[1]
	027 Add S0, S1, S0
	028 Add S3, S4, S3
	029 Multiply S0, S0, S0
	030 NotImplemented "Instruction FCMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Return X0

