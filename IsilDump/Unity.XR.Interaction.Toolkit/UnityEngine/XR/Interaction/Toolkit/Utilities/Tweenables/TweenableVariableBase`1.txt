Type: UnityEngine.XR.Interaction.Toolkit.Utilities.Tweenables.TweenableVariableBase`1

Method: UnityEngine.AnimationCurve get_animationCurve()

Disassembly:
	0x0270CFF8 LDR X9, [X8 + 0x10]
	0x0270CFFC LDR W22, [X9 + 0xFC]

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_animationCurve(UnityEngine.AnimationCurve value)

Disassembly:
	0x0270D000 ADD X9, X31, 0x0
	0x0270D004 ADD X10, X22, 0xF
	0x0270D008 AND X10, X10, 0x1FFFFFFFF
	0x0270D00C SUB X26, X9, X10
	0x0270D010 ADD X31, X26, 0x0

ISIL:
	001 Move X8, [X0]
	002 Move [X0+64], X1
	003 Move X3, [X8+536]
	004 Move X2, [X8+544]
	005 CallNoReturn X3

Method: T get_target()

Disassembly:
	0x0270D014 ADD X9, X31, 0x0
	0x0270D018 SUB X24, X9, X10
	0x0270D01C ADD X31, X24, 0x0

ISIL:
	001 Move S0, [X0+72]
	002 Move S1, [X0+76]
	003 Move S2, [X0+80]
	004 Move S3, [X0+84]
	005 Return X0

Method: System.Void set_target(T value)

Disassembly:
	0x0270D020 LDR X0, [X8 + 0x70]
	0x0270D024 LDRB W8, [X0 + 0x135]
	0x0270D028 TBNZ X8, 0x0, 0x270D030
	0x0270D02C BL 0x1C5C684
	0x0270D030 BL 0x1C16F10
	0x0270D034 LDR X8, [X20 + 0x20]
	0x0270D038 MOV W1, W31
	0x0270D03C MOV X21, X0
	0x0270D040 LDR X8, [X8 + 0xC0]
	0x0270D044 LDR X2, [X8 + 0x78]
	0x0270D048 LDR X8, [X2]
	0x0270D04C BLR X8
	0x0270D050 CBZ X21, 0x270D1B0
	0x0270D054 LDR X8, [X20 + 0x20]
	0x0270D058 MOVZ W1, 0x8
	0x0270D05C LDR X8, [X8 + 0xC0]
	0x0270D060 LDR X8, [X8 + 0x70]
	0x0270D064 LDR X8, [X8 + 0x80]
	0x0270D068 ADD X28, X8, 0x40
	0x0270D06C MOV X0, X28
	0x0270D070 BL 0x1C16D14
	0x0270D074 MOV X0, X21
	0x0270D078 MOV X1, X28
	0x0270D07C BL 0x1C16D18
	0x0270D080 STR X27, [X0]
	0x0270D084 LDR X27, [X20 + 0x20]
	0x0270D088 MOV X0, X26
	0x0270D08C MOV X2, X22
	0x0270D090 LDR X8, [X27 + 0xC0]
	0x0270D094 LDR X8, [X8 + 0x10]
	0x0270D098 LDR W8, [X8 + 0x28]
	0x0270D09C CMP W8, 0x0
	0x0270D0A0 SUB X8, X29, 0x20
	0x0270D0A4 CSEL X1, X25, X8, LT
	0x0270D0A8 BL 0x3EB1AC0
	0x0270D0AC LDR X8, [X27 + 0xC0]
	0x0270D0B0 MOV X0, X21
	0x0270D0B4 MOV X2, X26
	0x0270D0B8 MOV W3, W22
	0x0270D0BC LDR X8, [X8 + 0x70]
	0x0270D0C0 LDR X8, [X8 + 0x80]
	0x0270D0C4 ADD X1, X8, 0x80
	0x0270D0C8 BL 0x1C16D1C
	0x0270D0CC LDR X25, [X20 + 0x20]
	0x0270D0D0 MOV X0, X24

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Add X0, X0, 72
	009 Move X1, X31
	010 Move V8, V3
	011 Move V9, V2
	012 Move V10, V1
	013 Move V11, V0
	014 Call Single.Equals, X0, V0
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {50}
	019 Add X0, X19, 76
	020 Move V0, V10
	021 Move X1, X31
	022 Call Single.Equals, X0, V0
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {50}
	027 Add X0, X19, 80
	028 Move V0, V9
	029 Move X1, X31
	030 Call Single.Equals, X0, V0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {50}
	035 Add X0, X19, 84
	036 Move V0, V8
	037 Move X1, X31
	038 Call Single.Equals, X0, V0
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {50}
	043 Move X30, [X31+32]
	044 Move X19, [X31+40]
	045 Move D9, [X31+16]
	046 Move D8, [X31+24]
	047 Move D11, [X31+48]
	048 Move D10, [X31+56]
	049 Return 
	050 Move X8, [X19]
	051 Move [X19+72], S11
	052 Move [X19+80], S10
	053 Move [X19+80], S9
	054 Move [X19+88], S8
	055 Move X0, X19
	056 Move X2, [X8+552]
	057 Move X1, [X8+560]
	058 Move V2, V9
	059 Move V3, V8
	060 Move X30, [X31+32]
	061 Move X19, [X31+40]
	062 Move D9, [X31+16]
	063 Move D8, [X31+24]
	064 Move V0, V11
	065 Move V1, V10
	066 Move D11, [X31+48]
	067 Move D10, [X31+56]
	068 CallNoReturn X2

Method: T get_initialValue()

Disassembly:
	0x0270D0D4 MOV X2, X22
	0x0270D0D8 LDR X8, [X25 + 0xC0]
	0x0270D0DC LDR X8, [X8 + 0x10]

ISIL:
	001 Move S0, [X0+88]
	002 Move S1, [X0+92]
	003 Move S2, [X0+96]
	004 Move S3, [X0+100]
	005 Return X0

Method: System.Void set_initialValue(T value)

Disassembly:
	0x0270D0E0 LDR W8, [X8 + 0x28]
	0x0270D0E4 CMP W8, 0x0
	0x0270D0E8 SUB X8, X29, 0x28

ISIL:
	001 Move [X0+88], S0
	002 Move [X0+96], S1
	003 Move [X0+96], S2
	004 Move [X0+104], S3
	005 Return 

Method: System.Void HandleTween(System.Single tweenTarget)

Disassembly:
	0x0270D0EC CSEL X1, X23, X8, LT
	0x0270D0F0 BL 0x3EB1AC0
	0x0270D0F4 LDR X8, [X25 + 0xC0]
	0x0270D0F8 MOV X0, X21
	0x0270D0FC MOV X2, X24
	0x0270D100 MOV W3, W22
	0x0270D104 LDR X8, [X8 + 0x70]
	0x0270D108 LDR X8, [X8 + 0x80]
	0x0270D10C ADD X1, X8, 0xA0
	0x0270D110 BL 0x1C16D1C
	0x0270D114 LDR X8, [X20 + 0x20]
	0x0270D118 MOVZ W1, 0x4
	0x0270D11C LDR X8, [X8 + 0xC0]
	0x0270D120 LDR X8, [X8 + 0x70]
	0x0270D124 LDR X8, [X8 + 0x80]
	0x0270D128 ADD X22, X8, 0x60
	0x0270D12C MOV X0, X22
	0x0270D130 BL 0x1C16D14
	0x0270D134 MOV X0, X21
	0x0270D138 MOV X1, X22
	0x0270D13C BL 0x1C16D18
	0x0270D140 STR S8, [X0]
	0x0270D144 LDR X8, [X20 + 0x20]
	0x0270D148 MOVZ W1, 0x8
	0x0270D14C LDR X8, [X8 + 0xC0]
	0x0270D150 LDR X8, [X8 + 0x70]
	0x0270D154 LDR X8, [X8 + 0x80]
	0x0270D158 ADD X20, X8, 0xC0
	0x0270D15C MOV X0, X20
	0x0270D160 BL 0x1C16D14
	0x0270D164 MOV X0, X21
	0x0270D168 MOV X1, X20

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], D8
	003 Move [X31+32], X30
	004 Move [X31+40], X19
	005 Move X8, [X0]
	006 Move S4, [X0+72]
	007 Move S1, [X0+76]
	008 Move S2, [X0+80]
	009 Move S3, [X0+84]
	010 Move V8, V0
	011 Move X9, [X8+504]
	012 Move X1, [X8+512]
	013 Move V0, V4
	014 Move X19, X0
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move TEMP, X0
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {40}
	020 Move X8, [X19]
	021 Move X0, X19
	022 Move X9, [X8+568]
	023 Move X1, [X8+576]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X8, [X19]
	026 Move S0, [X19+24]
	027 Move S1, [X19+28]
	028 Move S2, [X19+32]
	029 Move S3, [X19+36]
	030 Move S4, [X19+72]
	031 Move S5, [X19+76]
	032 Move S6, [X19+80]
	033 Move S7, [X19+84]
	034 Move X9, [X8+520]
	035 Move X2, [X8+528]
	036 Move X0, X19
	037 Move W1, W31
	038 Move [X31], S8
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move X30, [X31+32]
	041 Move X19, [X31+40]
	042 Move V8, [X31+16]
	043 Add X31, X31, 48
	044 Return 

Method: System.Void ExecuteTween(T startValue, T targetValue, System.Single tweenAmount, System.Boolean useCurve = False)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Collections.IEnumerator StartAutoTween(System.Single deltaTimeMultiplier)

Disassembly:
	0x0270D16C BL 0x1C16D18
	0x0270D170 LDUR X8, [X29 - 0x30]
	0x0270D174 STR X8, [X0]
	0x0270D178 LDR X8, [X19 + 0x28]
	0x0270D17C LDUR X9, [X29 - 0x18]
	0x0270D180 CMP X8, X9
	0x0270D184 B.NE 0x270D1B4
	0x0270D188 MOV X0, X21
	0x0270D18C SUB X31, X29, 0x10
	0x0270D190 LDP X20, X19, [X31 + 0x60]
	0x0270D194 LDP X22, X21, [X31 + 0x50]
	0x0270D198 LDP X24, X23, [X31 + 0x40]
	0x0270D19C LDP X26, X25, [X31 + 0x30]
	0x0270D1A0 LDP X28, X27, [X31 + 0x20]
	0x0270D1A4 LDP X29, X30, [X31 + 0x10]
	0x0270D1A8 LDR V8, [X31], #0x70
	0x0270D1AC RET
	0x0270D1B0 BL 0x1C16F20
	0x0270D1B4 BL 0x3EB1B20
	0x0270D1B8 RET
	0x0270D1BC RET
	0x0270D1C0 RET
	0x0270D1C4 STP X29, X30, [X31 - 0x50]!
	0x0270D1C8 STP X26, X25, [X31 + 0x10]
	0x0270D1CC STP X24, X23, [X31 + 0x20]
	0x0270D1D0 STP X22, X21, [X31 + 0x30]
	0x0270D1D4 STP X20, X19, [X31 + 0x40]
	0x0270D1D8 ADD X29, X31, 0x0
	0x0270D1DC SUB X31, X31, 0x30
	0x0270D1E0 MRS X26, 0xC000
	0x0270D1E4 LDR X8, [X26 + 0x28]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+32]
	006 Move X20, X1
	007 Move V8, V0
	008 Move X19, X0
	009 Move X8, [X8+192]
	010 Move X8, [X8+96]
	011 Move W9, [X8+309]
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {19}
	016 Move X0, X8
	017 Call 0x1C5D684
	018 Move X8, X0
	019 Move X0, X8
	020 Call 0x1C17F10
	021 Move X8, [X20+32]
	022 Move W1, W31
	023 Move X20, X0
	024 Move X8, [X8+192]
	025 Move X2, [X8+104]
	026 Call 0x2979BAC, X0, X1
	027 Compare X20, 0
	028 JumpIfEqual {37}
	029 Move [X20+32], X19
	030 Move [X20+40], S8
	031 Move X0, X20
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+8]
	035 Move V8, [X31+32]
	036 Return X0
	037 Call 0x1C17F20

Method: System.Collections.IEnumerator PlaySequence(T start, T finish, System.Single duration, System.Action onComplete = null)

Disassembly:
	0x0270D1E8 MOV X19, X0
	0x0270D1EC MOV X21, X1
	0x0270D1F0 STUR X8, [X29 - 0x8]
	0x0270D1F4 LDR X8, [X1 + 0x20]
	0x0270D1F8 LDR X8, [X8 + 0xC0]
	0x0270D1FC LDR X8, [X8 + 0x10]
	0x0270D200 LDR W22, [X8 + 0xFC]
	0x0270D204 ADD X8, X31, 0x0
	0x0270D208 ADD X9, X22, 0xF
	0x0270D20C AND X9, X9, 0x1FFFFFFFF
	0x0270D210 SUB X20, X8, X9
	0x0270D214 ADD X31, X20, 0x0
	0x0270D218 ADD X8, X31, 0x0
	0x0270D21C SUB X23, X8, X9
	0x0270D220 ADD X31, X23, 0x0
	0x0270D224 MOV X0, X23
	0x0270D228 MOV W1, W31
	0x0270D22C MOV X2, X22
	0x0270D230 BL 0x3EB1B10
	0x0270D234 FMOV S0, W31
	0x0270D238 FMOV S1, W31
	0x0270D23C FMOV S2, 1
	0x0270D240 FMOV S3, 1
	0x0270D244 MOV X0, X31
	0x0270D248 BL 0x3C01424
	0x0270D24C LDR X8, [X21 + 0x20]
	0x0270D250 MOV X24, X0
	0x0270D254 MOVZ W1, 0x8
	0x0270D258 LDR X8, [X8 + 0xC0]
	0x0270D25C LDR X8, [X8]
	0x0270D260 LDR X8, [X8 + 0x80]
	0x0270D264 ADD X25, X8, 0x20
	0x0270D268 MOV X0, X25
	0x0270D26C BL 0x1C16D14
	0x0270D270 MOV X0, X19
	0x0270D274 MOV X1, X25
	0x0270D278 BL 0x1C16D18
	0x0270D27C STR X24, [X0]
	0x0270D280 MOV X0, X23
	0x0270D284 MOV W1, W31
	0x0270D288 MOV X2, X22
	0x0270D28C BL 0x3EB1B10
	0x0270D290 MOV X0, X20
	0x0270D294 MOV X1, X23
	0x0270D298 MOV X2, X22
	0x0270D29C BL 0x3EB1AC0
	0x0270D2A0 LDR X8, [X21 + 0x20]
	0x0270D2A4 LDR X8, [X8 + 0xC0]
	0x0270D2A8 LDR X9, [X8 + 0x10]
	0x0270D2AC LDR X1, [X8 + 0x80]
	0x0270D2B0 LDR W8, [X9 + 0x28]

ISIL:
	001 Move [X31-96], D15
	002 Move [X31-88], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X8, [X2+32]
	014 Move X21, X2
	015 Move X19, X1
	016 Move V8, V7
	017 Move X8, [X8+192]
	018 Move V9, V6
	019 Move V10, V5
	020 Move V11, V4
	021 Move X8, [X8+112]
	022 Move V13, V3
	023 Move V14, V2
	024 Move V15, V1
	025 Move W9, [X8+309]
	026 Move V12, V0
	027 Move X20, X0
	028 Move TEMP, X9
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {35}
	032 Move X0, X8
	033 Call 0x1C5D684
	034 Move X8, X0
	035 Move X0, X8
	036 Call 0x1C17F10
	037 Move X8, [X21+32]
	038 Move W1, W31
	039 Move X21, X0
	040 Move X8, [X8+192]
	041 Move X2, [X8+120]
	042 Call 0x296C54C, X0, X1
	043 Compare X21, 0
	044 JumpIfEqual {71}
	045 Move V0, [X31+96]
	046 Move [X21+32], X20
	047 Move [X21+48], S15
	048 Move [X21+56], S14
	049 Move [X21+56], S13
	050 Move [X21+64], S11
	051 Move [X21+64], S10
	052 Move [X21+72], S9
	053 Move [X21+72], S8
	054 Move [X21+40], S0
	055 Move [X21+48], S12
	056 Move [X21+80], X19
	057 Move X0, X21
	058 Move X20, [X31+80]
	059 Move X19, [X31+88]
	060 Move X30, [X31+64]
	061 Move X21, [X31+72]
	062 Move D9, [X31+48]
	063 Move D8, [X31+56]
	064 Move D11, [X31+32]
	065 Move D10, [X31+40]
	066 Move D13, [X31+16]
	067 Move D12, [X31+24]
	068 Move D15, [X31+96]
	069 Move D14, [X31+104]
	070 Return X0
	071 Call 0x1C17F20

Method: System.Void OnAnimationCurveChanged(UnityEngine.AnimationCurve value)

Disassembly:
	0x0270D2B4 LDR X0, [X1]

ISIL:
	001 Return 

Method: System.Void OnTargetChanged(T newTarget)

Disassembly:
	0x0270D2B8 TBNZ X8, 0x1F, 0x270D2C0

ISIL:
	001 Return 

Method: System.Void PreprocessTween()

Disassembly:
	0x0270D2BC LDR X20, [X20]

ISIL:
	001 Return 

Method: System.Void .ctor()

Disassembly:
	0x0270D2C0 MOVZ W8, 0x1
	0x0270D2C4 SUB X9, X29, 0xC
	0x0270D2C8 SUB X10, X29, 0x10
	0x0270D2CC STURB W31, [X29 - 0x10]
	0x0270D2D0 STURB W8, [X29 - 0xC]
	0x0270D2D4 STP X20, X9, [X29 - 0x30]
	0x0270D2D8 STP X31, X10, [X29 - 0x20]
	0x0270D2DC LDR X8, [X1 + 0x10]
	0x0270D2E0 SUB X3, X29, 0x30
	0x0270D2E4 SUB X4, X29, 0x10
	0x0270D2E8 MOV X2, X19
	0x0270D2EC BLR X8
	0x0270D2F0 LDR X8, [X26 + 0x28]
	0x0270D2F4 LDUR X9, [X29 - 0x8]
	0x0270D2F8 CMP X8, X9
	0x0270D2FC B.NE 0x270D31C
	0x0270D300 ADD X31, X29, 0x0
	0x0270D304 LDP X20, X19, [X31 + 0x40]
	0x0270D308 LDP X22, X21, [X31 + 0x30]
	0x0270D30C LDP X24, X23, [X31 + 0x20]
	0x0270D310 LDP X26, X25, [X31 + 0x10]
	0x0270D314 LDP X29, X30, [X31], #0x50
	0x0270D318 RET
	0x0270D31C BL 0x3EB1B20
	0x0270D320 LDR X0, [X0 + 0x38]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X0
	005 Move S0, W31
	006 Move S1, W31
	007 Move S2, 1
	008 Move S3, 1
	009 Move X0, X31
	010 Move X19, X1
	011 Call AnimationCurve.EaseInOut, V0, V1, V2, V3
	012 Move [X20+64], X0
	013 Move X8, [X19+32]
	014 Move X0, X20
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move S0, W31
	018 Move X8, [X8+192]
	019 Move S1, W31
	020 Move S2, W31
	021 Move S3, W31
	022 Move X4, [X8+128]
	023 Move W1, 1
	024 Move X2, X31
	025 Move W3, W31
	026 Move X30, [X31+32]
	027 Call BindableVariable`1<Color>..ctor, X0, X1, X2, X3, X4
	028 Return 

