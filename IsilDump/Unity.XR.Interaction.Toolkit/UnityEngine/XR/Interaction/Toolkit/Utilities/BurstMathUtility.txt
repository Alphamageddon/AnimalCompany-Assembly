Type: UnityEngine.XR.Interaction.Toolkit.Utilities.BurstMathUtility

Method: System.Void OrthogonalUpVector(in UnityEngine.Vector3 forward, in UnityEngine.Vector3 referenceUp, out UnityEngine.Vector3 orthogonalUp)

Disassembly:
	0x03B87880 ADRP X22, 0x594000
	0x03B87884 LDRB W8, [X21 + 0xB44]
	0x03B87888 LDR X22, [X22 + 0x848]
	0x03B8788C MOV V8.16B, V0.16B
	0x03B87890 MOV X19, X1
	0x03B87894 MOV X20, X0
	0x03B87898 TBNZ X8, 0x0, 0x3B878BC
	0x03B8789C ADRP X0, 0x594000
	0x03B878A0 LDR X0, [X0 + 0x848]
	0x03B878A4 BL 0x1C16CF4
	0x03B878A8 ADRP X0, 0x5D5000
	0x03B878AC LDR X0, [X0 + 0xD8]
	0x03B878B0 BL 0x1C16CF4
	0x03B878B4 MOVZ W8, 0x1
	0x03B878B8 STRB W8, [X21 + 0xB44]
	0x03B878BC LDR X0, [X22]
	0x03B878C0 LDR W8, [X0 + 0xE0]
	0x03B878C4 CBNZ W8, 0x3B878CC
	0x03B878C8 BL 0x1C16DFC
	0x03B878CC MOV X0, X31
	0x03B878D0 BL 0x36FA670
	0x03B878D4 TBZ X0, 0x0, 0x3B8791C
	0x03B878D8 ADRP X8, 0x5D5000
	0x03B878DC LDR X8, [X8 + 0xD8]
	0x03B878E0 LDR X0, [X8]
	0x03B878E4 LDR W8, [X0 + 0xE0]
	0x03B878E8 CBNZ W8, 0x3B878F0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x85C000
	008 Move X23, 0x5D6000
	009 Move W8, [X22+2814]
	010 Move X23, [X23+136]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x5D6000
	019 Move X0, [X0+136]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2814], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move X1, X20
	030 Move X2, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Move X23, [X31+56]

Method: System.Void OrthogonalUpVector(in Unity.Mathematics.float3 forward, in Unity.Mathematics.float3 referenceUp, out Unity.Mathematics.float3 orthogonalUp)

Disassembly:
	0x03B87A10 LDR X23, [X23 + 0x848]
	0x03B87A14 MOV V8.16B, V0.16B
	0x03B87A18 MOV X19, X2
	0x03B87A1C MOV X20, X1
	0x03B87A20 MOV X21, X0
	0x03B87A24 TBNZ X8, 0x0, 0x3B87A48
	0x03B87A28 ADRP X0, 0x594000
	0x03B87A2C LDR X0, [X0 + 0x848]
	0x03B87A30 BL 0x1C16CF4
	0x03B87A34 ADRP X0, 0x5D5000
	0x03B87A38 LDR X0, [X0 + 0xE0]
	0x03B87A3C BL 0x1C16CF4
	0x03B87A40 MOVZ W8, 0x1
	0x03B87A44 STRB W8, [X22 + 0xB49]
	0x03B87A48 LDR X0, [X23]
	0x03B87A4C LDR W8, [X0 + 0xE0]
	0x03B87A50 CBNZ W8, 0x3B87A58
	0x03B87A54 BL 0x1C16DFC
	0x03B87A58 MOV X0, X31
	0x03B87A5C BL 0x36FA670
	0x03B87A60 TBZ X0, 0x0, 0x3B87AB0
	0x03B87A64 ADRP X8, 0x5D5000
	0x03B87A68 LDR X8, [X8 + 0xE0]
	0x03B87A6C LDR X0, [X8]
	0x03B87A70 LDR W8, [X0 + 0xE0]
	0x03B87A74 CBNZ W8, 0x3B87A7C
	0x03B87A78 BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x85C000
	008 Move X23, 0x5D6000
	009 Move W8, [X22+2815]
	010 Move X23, [X23+144]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x5D6000
	019 Move X0, [X0+144]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2815], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move X1, X20
	030 Move X2, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Move X23, [X31+56]

Method: System.Void OrthogonalLookRotation(in UnityEngine.Vector3 forward, in UnityEngine.Vector3 referenceUp, out UnityEngine.Quaternion lookRotation)

Disassembly:
	0x03B87B94 LDP X22, X21, [X31 + 0x20]
	0x03B87B98 LDP X30, X23, [X31 + 0x10]
	0x03B87B9C MOV V0.16B, V8.16B
	0x03B87BA0 LDR V8, [X31], #0x40
	0x03B87BA4 B 0x3B87BA8
	0x03B87BA8 STR D8, [X31 - 0x40]!
	0x03B87BAC STP X30, X23, [X31 + 0x10]
	0x03B87BB0 STP X22, X21, [X31 + 0x20]
	0x03B87BB4 STP X20, X19, [X31 + 0x30]
	0x03B87BB8 ADRP X22, 0x85B000
	0x03B87BBC ADRP X23, 0x594000
	0x03B87BC0 LDRB W8, [X22 + 0xB4E]
	0x03B87BC4 LDR X23, [X23 + 0x848]
	0x03B87BC8 MOV V8.16B, V0.16B
	0x03B87BCC MOV X19, X2
	0x03B87BD0 MOV X20, X1
	0x03B87BD4 MOV X21, X0
	0x03B87BD8 TBNZ X8, 0x0, 0x3B87BFC
	0x03B87BDC ADRP X0, 0x594000
	0x03B87BE0 LDR X0, [X0 + 0x848]
	0x03B87BE4 BL 0x1C16CF4
	0x03B87BE8 ADRP X0, 0x5D5000
	0x03B87BEC LDR X0, [X0 + 0xE8]
	0x03B87BF0 BL 0x1C16CF4
	0x03B87BF4 MOVZ W8, 0x1
	0x03B87BF8 STRB W8, [X22 + 0xB4E]
	0x03B87BFC LDR X0, [X23]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x85C000
	008 Move X23, 0x5D6000
	009 Move W8, [X22+2816]
	010 Move X23, [X23+152]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x5D6000
	019 Move X0, [X0+152]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2816], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move X1, X20
	030 Move X2, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Move X23, [X31+56]

Method: System.Void OrthogonalLookRotation(in Unity.Mathematics.float3 forward, in Unity.Mathematics.float3 referenceUp, out Unity.Mathematics.quaternion lookRotation)

Disassembly:
	0x03B87D20 MOV X0, X21
	0x03B87D24 MOV X1, X20
	0x03B87D28 MOV X2, X19
	0x03B87D2C LDP X20, X19, [X31 + 0x20]
	0x03B87D30 LDP X22, X21, [X31 + 0x10]
	0x03B87D34 LDP X30, X23, [X31], #0x30
	0x03B87D38 B 0x3B87D3C
	0x03B87D3C STP X30, X23, [X31 - 0x30]!
	0x03B87D40 STP X22, X21, [X31 + 0x10]
	0x03B87D44 STP X20, X19, [X31 + 0x20]
	0x03B87D48 ADRP X22, 0x85B000
	0x03B87D4C ADRP X23, 0x594000
	0x03B87D50 LDRB W8, [X22 + 0xB53]
	0x03B87D54 LDR X23, [X23 + 0x848]
	0x03B87D58 MOV X19, X2
	0x03B87D5C MOV X20, X1
	0x03B87D60 MOV X21, X0
	0x03B87D64 TBNZ X8, 0x0, 0x3B87D88
	0x03B87D68 ADRP X0, 0x594000
	0x03B87D6C LDR X0, [X0 + 0x848]
	0x03B87D70 BL 0x1C16CF4
	0x03B87D74 ADRP X0, 0x5D5000
	0x03B87D78 LDR X0, [X0 + 0xF0]
	0x03B87D7C BL 0x1C16CF4
	0x03B87D80 MOVZ W8, 0x1
	0x03B87D84 STRB W8, [X22 + 0xB53]
	0x03B87D88 LDR X0, [X23]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x85C000
	008 Move X23, 0x5D6000
	009 Move W8, [X22+2817]
	010 Move X23, [X23+160]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x5D6000
	019 Move X0, [X0+160]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2817], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move X1, X20
	030 Move X2, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Move X23, [X31+56]

Method: System.Void ProjectOnPlane(in Unity.Mathematics.float3 vector, in Unity.Mathematics.float3 planeNormal, out Unity.Mathematics.float3 projectedVector)

Disassembly:
	0x03B87E88 STP X20, X19, [X31 + 0x20]
	0x03B87E8C ADRP X22, 0x85B000
	0x03B87E90 ADRP X23, 0x594000
	0x03B87E94 LDRB W8, [X22 + 0xB58]
	0x03B87E98 LDR X23, [X23 + 0x848]
	0x03B87E9C MOV X19, X2
	0x03B87EA0 MOV X20, X1
	0x03B87EA4 MOV X21, X0
	0x03B87EA8 TBNZ X8, 0x0, 0x3B87ECC
	0x03B87EAC ADRP X0, 0x594000
	0x03B87EB0 LDR X0, [X0 + 0x848]
	0x03B87EB4 BL 0x1C16CF4
	0x03B87EB8 ADRP X0, 0x5D5000
	0x03B87EBC LDR X0, [X0 + 0xF8]
	0x03B87EC0 BL 0x1C16CF4
	0x03B87EC4 MOVZ W8, 0x1
	0x03B87EC8 STRB W8, [X22 + 0xB58]
	0x03B87ECC LDR X0, [X23]
	0x03B87ED0 LDR W8, [X0 + 0xE0]
	0x03B87ED4 CBNZ W8, 0x3B87EDC
	0x03B87ED8 BL 0x1C16DFC
	0x03B87EDC MOV X0, X31
	0x03B87EE0 BL 0x36FA670
	0x03B87EE4 TBZ X0, 0x0, 0x3B87F28
	0x03B87EE8 ADRP X8, 0x5D5000
	0x03B87EEC LDR X8, [X8 + 0xF8]
	0x03B87EF0 LDR X0, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x85C000
	008 Move X23, 0x5D6000
	009 Move W8, [X22+2818]
	010 Move X23, [X23+168]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x5D6000
	019 Move X0, [X0+168]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2818], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move X1, X20
	030 Move X2, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Move X23, [X31+56]

Method: System.Void ProjectOnPlane(in UnityEngine.Vector3 vector, in UnityEngine.Vector3 planeNormal, out UnityEngine.Vector3 projectedVector)

Disassembly:
	0x03B88024 MOV X20, X0
	0x03B88028 TBNZ X8, 0x0, 0x3B8804C
	0x03B8802C ADRP X0, 0x593000
	0x03B88030 LDR X0, [X0 + 0x848]
	0x03B88034 BL 0x1C16CF4
	0x03B88038 ADRP X0, 0x5D4000
	0x03B8803C LDR X0, [X0 + 0x100]
	0x03B88040 BL 0x1C16CF4
	0x03B88044 MOVZ W8, 0x1
	0x03B88048 STRB W8, [X21 + 0xB5D]
	0x03B8804C LDR X0, [X22]
	0x03B88050 LDR W8, [X0 + 0xE0]
	0x03B88054 CBNZ W8, 0x3B8805C
	0x03B88058 BL 0x1C16DFC
	0x03B8805C MOV X0, X31
	0x03B88060 BL 0x36FA670
	0x03B88064 TBZ X0, 0x0, 0x3B880A4
	0x03B88068 ADRP X8, 0x5D4000
	0x03B8806C LDR X8, [X8 + 0x100]
	0x03B88070 LDR X0, [X8]
	0x03B88074 LDR W8, [X0 + 0xE0]
	0x03B88078 CBNZ W8, 0x3B88080
	0x03B8807C BL 0x1C16DFC
	0x03B88080 BL 0x3B8C2B4
	0x03B88084 CBZ X0, 0x3B880A4
	0x03B88088 MOV X2, X0
	0x03B8808C MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x85B000
	008 Move X23, 0x5D5000
	009 Move W8, [X22+2819]
	010 Move X23, [X23+176]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x5D5000
	019 Move X0, [X0+176]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2819], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move X1, X20
	030 Move X2, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Move X23, [X31+56]

Method: System.Void LookRotationWithForwardProjectedOnPlane(in Unity.Mathematics.float3 forward, in Unity.Mathematics.float3 planeNormal, out Unity.Mathematics.quaternion lookRotation)

Disassembly:
	0x03B881B4 LDR V2, [X31 + 0x28]
	0x03B881B8 MOV X0, X31
	0x03B881BC BL 0x3887BE0
	0x03B881C0 STP S0, S1, [X19]
	0x03B881C4 STR S2, [X19 + 0x8]
	0x03B881C8 LDP X20, X19, [X31 + 0x40]
	0x03B881CC LDR X30, [X31 + 0x30]
	0x03B881D0 ADD X31, X31, 0x50
	0x03B881D4 RET
	0x03B881D8 LDP S0, S1, [X0]
	0x03B881DC LDP S2, S3, [X1]
	0x03B881E0 LDR V4, [X1 + 0x8]
	0x03B881E4 LDR V5, [X0 + 0x8]
	0x03B881E8 FMUL S6, S0, S3
	0x03B881EC FMUL S7, S1, S4
	0x03B881F0 FMUL S16, S5, S2
	0x03B881F4 FMUL S2, S1, S2
	0x03B881F8 FMUL S3, S5, S3
	0x03B881FC FMUL S4, S0, S4
	0x03B88200 FSUB S2, S6, S2
	0x03B88204 FSUB S3, S7, S3
	0x03B88208 FSUB S4, S16, S4
	0x03B8820C FMUL S6, S1, S3
	0x03B88210 FMUL S7, S0, S4
	0x03B88214 FMUL S4, S5, S4
	0x03B88218 FMUL S1, S1, S2
	0x03B8821C FMUL S0, S0, S2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x85B000
	008 Move X23, 0x5D5000
	009 Move W8, [X22+2820]
	010 Move X23, [X23+184]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x5D5000
	019 Move X0, [X0+184]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2820], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move X1, X20
	030 Move X2, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Move X23, [X31+56]

Method: System.Void LookRotationWithForwardProjectedOnPlane(in UnityEngine.Vector3 forward, in UnityEngine.Vector3 planeNormal, out UnityEngine.Quaternion lookRotation)

Disassembly:
	0x00000000 INVALID
	0x03B88320 FMUL S3, S0, S0
	0x03B88324 FADDP S2, V2.2S
	0x03B88328 FADD S2, S3, S2
	0x03B8832C FMOV S3, W8
	0x03B88330 FCMP S2, S3
	0x03B88334 B.PL 0x3B8834C
	0x03B88338 LDR W8, [X0 + 0x8]
	0x03B8833C LDR X9, [X0]
	0x03B88340 STR W8, [X2 + 0x8]
	0x03B88344 STR X9, [X2]
	0x03B88348 RET
	0x03B8834C LDR V3, [X0]
	0x03B88350 LDR V4, [X0 + 0x8]
	0x03B88354 UNIMPLEMENTED
	0x00000000 INVALID
	0x03B8835C FMUL S7, S0, S4
	0x03B88360 FADDP S6, V6.2S
	0x03B88364 FADD S6, S7, S6
	0x00000000 INVALID
	0x03B8836C FMUL S0, S0, S6
	0x00000000 INVALID
	0x03B88374 FDIV S0, S0, S2
	0x03B88378 FSUB V1.2S, V3.2S, V1.2S
	0x03B8837C FSUB S0, S4, S0
	0x03B88380 STR D1, [X2]
	0x03B88384 STR S0, [X2 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x85B000
	008 Move X23, 0x5D5000
	009 Move W8, [X22+2821]
	010 Move X23, [X23+192]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x5D5000
	019 Move X0, [X0+192]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2821], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move X1, X20
	030 Move X2, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Move X23, [X31+56]

Method: System.Void Angle(in Unity.Mathematics.quaternion a, in Unity.Mathematics.quaternion b, out System.Single angle)

Disassembly:
	0x03B884A8 ADD X1, X31, 0x0
	0x03B884AC ADD X2, X31, 0x20
	0x03B884B0 STP S0, S1, [X31]
	0x03B884B4 STR S2, [X31 + 0x8]
	0x03B884B8 BL 0x3B871B4
	0x03B884BC LDP S0, S1, [X31 + 0x20]
	0x03B884C0 LDP S2, S3, [X31 + 0x28]
	0x03B884C4 MOV X0, X31
	0x03B884C8 BL 0x38BD214
	0x03B884CC STP S0, S1, [X19]
	0x03B884D0 STP S2, S3, [X19 + 0x8]
	0x03B884D4 LDP X20, X19, [X31 + 0x40]
	0x03B884D8 LDR X30, [X31 + 0x30]
	0x03B884DC ADD X31, X31, 0x50
	0x03B884E0 RET
	0x03B884E4 STR D8, [X31 - 0x20]!
	0x03B884E8 STR X30, [X31 + 0x8]
	0x03B884EC STP X20, X19, [X31 + 0x10]
	0x03B884F0 LDP D0, D1, [X0]
	0x03B884F4 LDP D2, D3, [X1]
	0x03B884F8 ADRP X8, 0xFFFFFFFFFCF62000
	0x03B884FC MOV X19, X2
	0x00000000 INVALID
	0x03B88504 UNIMPLEMENTED
	0x00000000 INVALID
	0x03B8850C FADD V0.2S, V0.2S, V2.2S
	0x03B88510 UNIMPLEMENTED

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x85B000
	008 Move X23, 0x5D5000
	009 Move W8, [X22+2822]
	010 Move X23, [X23+200]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x5D5000
	019 Move X0, [X0+200]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2822], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move X1, X20
	030 Move X2, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Move X23, [X31+56]

Method: System.Boolean FastVectorEquals(in Unity.Mathematics.float3 a, in Unity.Mathematics.float3 b, System.Single tolerance = 0.0001)

Disassembly:
	0x03B8867C MOV X0, X31
	0x03B88680 BL 0x3887BE4
	0x03B88684 STP S0, S1, [X31]
	0x03B88688 ADD X0, X31, 0x10
	0x03B8868C ADD X1, X31, 0x0
	0x03B88690 ADD X2, X31, 0x20
	0x03B88694 MOV V0.16B, V8.16B
	0x03B88698 STR S2, [X31 + 0x8]
	0x03B8869C BL 0x3B87B2C
	0x03B886A0 LDP S0, S1, [X31 + 0x20]
	0x03B886A4 LDR V2, [X31 + 0x28]
	0x03B886A8 MOV X0, X31
	0x03B886AC BL 0x3887BE0
	0x03B886B0 STP S0, S1, [X19]
	0x03B886B4 STR S2, [X19 + 0x8]
	0x03B886B8 LDP X20, X19, [X31 + 0x40]
	0x03B886BC LDR X30, [X31 + 0x38]
	0x03B886C0 LDR V8, [X31 + 0x30]
	0x03B886C4 ADD X31, X31, 0x50
	0x03B886C8 RET
	0x03B886CC STR W31, [X2 + 0x8]
	0x03B886D0 STR X31, [X2]
	0x03B886D4 LDR V1, [X0]
	0x03B886D8 LDR V2, [X1]
	0x03B886DC FABD S3, S1, S1
	0x03B886E0 FCMP S3, S0
	0x03B886E4 B.LE 0x3B886F0
	0x03B886E8 FDIV S1, S1, S2
	0x03B886EC STR S1, [X2]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x85B000
	008 Move X22, 0x5D5000
	009 Move W8, [X21+2823]
	010 Move X22, [X22+208]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x5D5000
	019 Move X0, [X0+208]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+2823], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+8]
	035 Move V0, V8
	036 Move V8, [X31+48]

Method: System.Boolean FastVectorEquals(in UnityEngine.Vector3 a, in UnityEngine.Vector3 b, System.Single tolerance = 0.0001)

Disassembly:
	0x03B887F8 STP S2, S0, [X1]
	0x03B887FC STR S3, [X1 + 0x8]
	0x03B88800 RET
	0x03B88804 STP X30, X21, [X31 - 0x20]!
	0x03B88808 STP X20, X19, [X31 + 0x10]
	0x03B8880C LDR X8, [X2 + 0x8]
	0x03B88810 STP X1, X2, [X0 + 0x20]
	0x03B88814 MOV X19, X0
	0x03B88818 MOV X20, X1
	0x03B8881C STR X8, [X0 + 0x10]
	0x03B88820 LDRB W21, [X2 + 0x52]
	0x03B88824 STR X0, [X0 + 0x40]
	0x03B88828 MOV X0, X2
	0x03B8882C BL 0x1C16D84
	0x03B88830 TBZ X0, 0x0, 0x3B88848
	0x03B88834 CMP W21, 0x3
	0x03B88838 B.NE 0x3B88864
	0x03B8883C ADRP X8, 0xFFFFFFFFFE075000
	0x03B88840 ADD X8, X8, 0xEAC
	0x03B88844 B 0x3B88858
	0x03B88848 CMP W21, 0x2
	0x03B8884C B.NE 0x3B88860
	0x03B88850 ADRP X8, 0xFFFFFFFFFE075000
	0x03B88854 ADD X8, X8, 0xE94
	0x03B88858 STR X8, [X19 + 0x18]
	0x03B8885C B 0x3B88874
	0x03B88860 CBZ X20, 0x3B8888C
	0x03B88864 LDR X8, [X19 + 0x10]
	0x03B88868 LDR X9, [X19 + 0x20]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x85B000
	008 Move X22, 0x5D5000
	009 Move W8, [X21+2824]
	010 Move X22, [X22+216]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x5D5000
	019 Move X0, [X0+216]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+2824], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+8]
	035 Move V0, V8
	036 Move V8, [X31+48]

Method: System.Void FastSafeDivide(in UnityEngine.Vector3 a, in UnityEngine.Vector3 b, out UnityEngine.Vector3 result, System.Single tolerance = 1E-06)

Disassembly:
	0x03B88974 ADD X31, X31, 0x70
	0x03B88978 RET
	0x03B8897C MOV X0, X1
	0x03B88980 MOV X1, X31
	0x03B88984 B 0x1C16CB4
	0x03B88988 STP X30, X23, [X31 - 0x30]!
	0x03B8898C STP X22, X21, [X31 + 0x10]
	0x03B88990 STP X20, X19, [X31 + 0x20]
	0x03B88994 ADRP X20, 0x85A000
	0x03B88998 ADRP X23, 0x5D4000
	0x03B8899C LDRB W8, [X20 + 0xB0F]
	0x03B889A0 LDR X23, [X23 + 0x88]
	0x03B889A4 MOV X19, X0
	0x03B889A8 TBNZ X8, 0x0, 0x3B889E4
	0x03B889AC ADRP X0, 0x593000
	0x03B889B0 LDR X0, [X0 + 0x848]
	0x03B889B4 BL 0x1C16CF4
	0x03B889B8 ADRP X0, 0x5D4000
	0x03B889BC LDR X0, [X0 + 0x108]
	0x03B889C0 BL 0x1C16CF4
	0x03B889C4 ADRP X0, 0x5D4000
	0x03B889C8 LDR X0, [X0 + 0x88]
	0x03B889CC BL 0x1C16CF4
	0x03B889D0 ADRP X0, 0x5D4000
	0x03B889D4 LDR X0, [X0 + 0x110]
	0x03B889D8 BL 0x1C16CF4
	0x03B889DC MOVZ W8, 0x1
	0x03B889E0 STRB W8, [X20 + 0xB0F]
	0x03B889E4 LDR X8, [X23]
	0x03B889E8 LDR W9, [X8 + 0xE0]
	0x03B889EC CBNZ W9, 0x3B889FC

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x85B000
	009 Move X23, 0x5D5000
	010 Move W8, [X22+2825]
	011 Move X23, [X23+224]
	012 Move V8, V0
	013 Move X19, X2
	014 Move X20, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x5D5000
	021 Move X0, [X0+224]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2825], W8
	025 Move X0, [X23]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X21
	031 Move X1, X20
	032 Move X2, X19
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X22, [X31+32]
	036 Move X21, [X31+40]
	037 Move X30, [X31+16]
	038 Move X23, [X31+24]
	039 Move V0, V8
	040 Move V8, [X31+64]

Method: System.Void FastSafeDivide(in Unity.Mathematics.float3 a, in Unity.Mathematics.float3 b, out Unity.Mathematics.float3 result, System.Single tolerance = 1E-06)

Disassembly:
	0x03B88B2C BL 0x1C16CF4
	0x03B88B30 ADRP X0, 0x5D4000
	0x03B88B34 LDR X0, [X0 + 0x118]
	0x03B88B38 BL 0x1C16CF4
	0x03B88B3C ADRP X0, 0x5D4000
	0x03B88B40 LDR X0, [X0 + 0x88]
	0x03B88B44 BL 0x1C16CF4
	0x03B88B48 MOVZ W8, 0x1
	0x03B88B4C STRB W8, [X21 + 0xB11]
	0x03B88B50 LDR X0, [X20]
	0x03B88B54 ADRP X20, 0x5D4000
	0x03B88B58 LDR X19, [X19]
	0x03B88B5C LDR W8, [X0 + 0xE0]
	0x03B88B60 LDR X20, [X20 + 0x88]
	0x03B88B64 CBNZ W8, 0x3B88B6C
	0x03B88B68 BL 0x1C16DFC
	0x03B88B6C MOV X0, X19
	0x03B88B70 MOV X1, X31
	0x03B88B74 BL 0x36FA754
	0x03B88B78 LDR X8, [X20]
	0x03B88B7C MOV X19, X0
	0x03B88B80 LDR W9, [X8 + 0xE0]
	0x03B88B84 CBNZ W9, 0x3B88B94
	0x03B88B88 MOV X0, X8
	0x03B88B8C BL 0x1C16DFC
	0x03B88B90 LDR X8, [X20]
	0x03B88B94 LDR X8, [X8 + 0xB8]
	0x03B88B98 STR X19, [X8 + 0x8]
	0x03B88B9C LDP X20, X19, [X31 + 0x10]
	0x03B88BA0 LDP X30, X21, [X31], #0x20
	0x03B88BA4 RET

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x85B000
	009 Move X23, 0x5D5000
	010 Move W8, [X22+2826]
	011 Move X23, [X23+232]
	012 Move V8, V0
	013 Move X19, X2
	014 Move X20, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x5D5000
	021 Move X0, [X0+232]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2826], W8
	025 Move X0, [X23]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X21
	031 Move X1, X20
	032 Move X2, X19
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X22, [X31+32]
	036 Move X21, [X31+40]
	037 Move X30, [X31+16]
	038 Move X23, [X31+24]
	039 Move V0, V8
	040 Move V8, [X31+64]

Method: System.Void Scale(in Unity.Mathematics.float3 a, in Unity.Mathematics.float3 b, out Unity.Mathematics.float3 result)

Disassembly:
	0x03B88CD0 STR X0, [X31]
	0x03B88CD4 MOV X1, X23
	0x03B88CD8 MOV X0, X8
	0x03B88CDC BL 0x1C16E04
	0x03B88CE0 LDR X8, [X25]
	0x03B88CE4 STR X0, [X31 + 0x8]
	0x03B88CE8 MOV X1, X22
	0x03B88CEC MOV X0, X8
	0x03B88CF0 BL 0x1C16E04
	0x03B88CF4 STR X0, [X31 + 0x10]
	0x03B88CF8 ADD X1, X31, 0x0
	0x03B88CFC MOV X0, X21
	0x03B88D00 MOV X2, X20
	0x03B88D04 MOV X3, X19
	0x03B88D08 BL 0x1C16CB0
	0x03B88D0C LDP X20, X19, [X31 + 0x60]
	0x03B88D10 LDP X22, X21, [X31 + 0x50]
	0x03B88D14 LDP X24, X23, [X31 + 0x40]
	0x03B88D18 LDP X26, X25, [X31 + 0x30]
	0x03B88D1C LDR X30, [X31 + 0x20]
	0x03B88D20 ADD X31, X31, 0x70
	0x03B88D24 RET
	0x03B88D28 MOV X0, X1
	0x03B88D2C MOV X1, X31
	0x03B88D30 B 0x1C16CB4
	0x03B88D34 STP X30, X23, [X31 - 0x30]!
	0x03B88D38 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x85B000
	008 Move X23, 0x5D5000
	009 Move W8, [X22+2827]
	010 Move X23, [X23+240]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x5D5000
	019 Move X0, [X0+240]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2827], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move X1, X20
	030 Move X2, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Move X23, [X31+56]

Method: System.Void Scale(in UnityEngine.Vector3 a, in UnityEngine.Vector3 b, out UnityEngine.Vector3 result)

Disassembly:
	0x03B88E14 LDR X8, [X23]
	0x03B88E18 LDR X9, [X8 + 0xB8]
	0x03B88E1C STR X0, [X9]
	0x03B88E20 LDR W9, [X8 + 0xE0]
	0x03B88E24 CBNZ W9, 0x3B88E34
	0x03B88E28 MOV X0, X8
	0x03B88E2C BL 0x1C16DFC
	0x03B88E30 LDR X8, [X23]
	0x03B88E34 LDR X8, [X8 + 0xB8]
	0x03B88E38 LDP X22, X21, [X31 + 0x10]
	0x03B88E3C LDR X8, [X8]
	0x03B88E40 STR X8, [X19]
	0x03B88E44 LDP X20, X19, [X31 + 0x20]
	0x03B88E48 LDP X30, X23, [X31], #0x30
	0x03B88E4C RET
	0x03B88E50 STR X30, [X31 - 0x20]!
	0x03B88E54 STP X20, X19, [X31 + 0x10]
	0x03B88E58 ADRP X20, 0x85A000
	0x03B88E5C ADRP X19, 0x5D4000
	0x03B88E60 LDRB W8, [X20 + 0xB15]
	0x03B88E64 LDR X19, [X19 + 0x90]
	0x03B88E68 TBNZ X8, 0x0, 0x3B88E80
	0x03B88E6C ADRP X0, 0x5D4000
	0x03B88E70 LDR X0, [X0 + 0x90]
	0x03B88E74 BL 0x1C16CF4
	0x03B88E78 MOVZ W8, 0x1
	0x03B88E7C STRB W8, [X20 + 0xB15]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x85B000
	008 Move X23, 0x5D5000
	009 Move W8, [X22+2828]
	010 Move X23, [X23+248]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x5D5000
	019 Move X0, [X0+248]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2828], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move X1, X20
	030 Move X2, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Move X23, [X31+56]

Method: UnityEngine.Vector3 Orthogonal(UnityEngine.Vector3 input)

Disassembly:
	0x03B88F58 B 0x3B88EAC
	0x03B88F5C STP X30, X21, [X31 - 0x20]!
	0x03B88F60 STP X20, X19, [X31 + 0x10]
	0x03B88F64 LDR X8, [X2 + 0x8]
	0x03B88F68 STP X1, X2, [X0 + 0x20]
	0x03B88F6C MOV X19, X0
	0x03B88F70 MOV X20, X1
	0x03B88F74 STR X8, [X0 + 0x10]
	0x03B88F78 LDRB W21, [X2 + 0x52]
	0x03B88F7C STR X0, [X0 + 0x40]
	0x03B88F80 MOV X0, X2
	0x03B88F84 BL 0x1C16D84
	0x03B88F88 TBZ X0, 0x0, 0x3B88FA0
	0x03B88F8C CMP W21, 0x3
	0x03B88F90 B.NE 0x3B88FBC
	0x03B88F94 ADRP X8, 0xFFFFFFFFFE075000
	0x03B88F98 ADD X8, X8, 0xFF4
	0x03B88F9C B 0x3B88FB0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X0, X31
	004 Move [X31+24], W31
	005 Move [X31+16], X31
	006 Call float3.op_Implicit, X0
	007 Add X0, X31, 0
	008 Add X1, X31, 16
	009 Move [X31], S0
	010 Move [X31+8], S1
	011 Move [X31+8], S2
	012 Call BurstMathUtility.Orthogonal, X0, X1
	013 Move S0, [X31+16]
	014 Move S1, [X31+20]
	015 Move V2, [X31+24]
	016 Move X0, X31
	017 Call float3.op_Implicit, X0
	018 Move X30, [X31+32]
	019 Add X31, X31, 48
	020 Return X0

Method: System.Void Orthogonal(in Unity.Mathematics.float3 input, out Unity.Mathematics.float3 result)

Disassembly:
	0x03B88FA0 CMP W21, 0x2
	0x03B88FA4 B.NE 0x3B88FB8
	0x03B88FA8 ADRP X8, 0xFFFFFFFFFE075000
	0x03B88FAC ADD X8, X8, 0xFDC
	0x03B88FB0 STR X8, [X19 + 0x18]
	0x03B88FB4 B 0x3B88FCC
	0x03B88FB8 CBZ X20, 0x3B88FE4
	0x03B88FBC LDR X8, [X19 + 0x10]
	0x03B88FC0 LDR X9, [X19 + 0x20]
	0x03B88FC4 STR X8, [X19 + 0x18]
	0x03B88FC8 STR X9, [X19 + 0x40]
	0x03B88FCC ADRP X8, 0xFFFFFFFFFE075000
	0x03B88FD0 ADD X8, X8, 0xF7C
	0x03B88FD4 STR X8, [X19 + 0x38]
	0x03B88FD8 LDP X20, X19, [X31 + 0x10]
	0x03B88FDC LDP X30, X21, [X31], #0x20
	0x03B88FE0 RET
	0x03B88FE4 ADRP X1, 0xFFFFFFFFFCF93000
	0x03B88FE8 ADD X1, X1, 0xEE3
	0x03B88FEC MOV X0, X31
	0x03B88FF0 BL 0x1C16F3C
	0x03B88FF4 MOV X1, X31
	0x03B88FF8 BL 0x1C16DEC
	0x03B88FFC LDR X8, [X0 + 0x40]
	0x03B89000 LDR X5, [X0 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x85B000
	007 Move X22, 0x5D5000
	008 Move W8, [X21+2829]
	009 Move X22, [X22+256]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5D5000
	017 Move X0, [X0+256]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2829], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Void OrthogonalUpVector$BurstManaged(in UnityEngine.Vector3 forward, in UnityEngine.Vector3 referenceUp, out UnityEngine.Vector3 orthogonalUp)

Disassembly:
	0x03B89154 LDR W9, [X8 + 0xE0]
	0x03B89158 CBNZ W9, 0x3B89168
	0x03B8915C MOV X0, X8
	0x03B89160 BL 0x1C16DFC
	0x03B89164 LDR X8, [X23]
	0x03B89168 LDR X9, [X8 + 0xB8]
	0x03B8916C LDR X10, [X9]
	0x03B89170 CBNZ X10, 0x3B891E0
	0x03B89174 LDR W10, [X8 + 0xE0]
	0x03B89178 CBNZ W10, 0x3B8918C
	0x03B8917C MOV X0, X8
	0x03B89180 BL 0x1C16DFC
	0x03B89184 LDR X8, [X23]
	0x03B89188 LDR X9, [X8 + 0xB8]
	0x03B8918C ADRP X8, 0x592000
	0x03B89190 LDR X20, [X9 + 0x8]
	0x03B89194 LDR X8, [X8 + 0x848]
	0x03B89198 LDR X0, [X8]
	0x03B8919C ADRP X8, 0x5D3000
	0x03B891A0 LDR X8, [X8 + 0x138]
	0x03B891A4 LDR X21, [X8]
	0x03B891A8 ADRP X8, 0x5D3000
	0x03B891AC LDR X8, [X8 + 0x140]
	0x03B891B0 LDR W9, [X0 + 0xE0]
	0x03B891B4 LDR X22, [X8]
	0x03B891B8 CBNZ W9, 0x3B891C0
	0x03B891BC BL 0x1C16DFC
	0x03B891C0 MOV X0, X20
	0x03B891C4 MOV X1, X21
	0x03B891C8 MOV X2, X22
	0x03B891CC MOV X3, X31
	0x03B891D0 BL 0x36FAD70
	0x03B891D4 LDR X8, [X23]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+64], X20
	004 Move [X31+72], X19
	005 Move [X31+40], W31
	006 Move [X31+32], X31
	007 Move S0, [X0]
	008 Move S1, [X0+4]
	009 Move V2, [X0+8]
	010 Move X0, X31
	011 Move X19, X2
	012 Move X20, X1
	013 Call float3.op_Implicit, X0
	014 Move [X31+16], S0
	015 Move [X31+24], S1
	016 Move [X31+24], S2
	017 Move S0, [X20]
	018 Move S1, [X20+4]
	019 Move V2, [X20+8]
	020 Move X0, X31
	021 Call float3.op_Implicit, X0
	022 Add X0, X31, 16
	023 Add X1, X31, 0
	024 Add X2, X31, 32
	025 Move [X31], S0
	026 Move [X31+8], S1
	027 Move [X31+8], S2
	028 Call BurstMathUtility.OrthogonalUpVector, X0, X1, X2
	029 Move S0, [X31+32]
	030 Move S1, [X31+36]
	031 Move V2, [X31+40]
	032 Move X0, X31
	033 Call float3.op_Implicit, X0
	034 Move [X19], S0
	035 Move [X19+8], S1
	036 Move [X19+8], S2
	037 Move X20, [X31+64]
	038 Move X19, [X31+72]
	039 Move X30, [X31+48]
	040 Add X31, X31, 80
	041 Return 

Method: System.Void OrthogonalUpVector$BurstManaged(in Unity.Mathematics.float3 forward, in Unity.Mathematics.float3 referenceUp, out Unity.Mathematics.float3 orthogonalUp)

Disassembly:
	0x03B891D8 LDR X9, [X8 + 0xB8]
	0x03B891DC STR X0, [X9]
	0x03B891E0 LDR W9, [X8 + 0xE0]
	0x03B891E4 CBNZ W9, 0x3B891F4
	0x03B891E8 MOV X0, X8
	0x03B891EC BL 0x1C16DFC
	0x03B891F0 LDR X8, [X23]
	0x03B891F4 LDR X8, [X8 + 0xB8]
	0x03B891F8 LDP X22, X21, [X31 + 0x10]
	0x03B891FC LDR X8, [X8]
	0x03B89200 STR X8, [X19]
	0x03B89204 LDP X20, X19, [X31 + 0x20]
	0x03B89208 LDP X30, X23, [X31], #0x30
	0x03B8920C RET
	0x03B89210 STR X30, [X31 - 0x20]!
	0x03B89214 STP X20, X19, [X31 + 0x10]
	0x03B89218 ADRP X20, 0x859000
	0x03B8921C ADRP X19, 0x5D3000
	0x03B89220 LDRB W8, [X20 + 0xB1A]
	0x03B89224 LDR X19, [X19 + 0x98]
	0x03B89228 TBNZ X8, 0x0, 0x3B89240
	0x03B8922C ADRP X0, 0x5D3000
	0x03B89230 LDR X0, [X0 + 0x98]
	0x03B89234 BL 0x1C16CF4
	0x03B89238 MOVZ W8, 0x1

ISIL:
	001 Move S0, [X0]
	002 Move S1, [X0+4]
	003 Move S2, [X1]
	004 Move S3, [X1+4]
	005 Move V4, [X1+8]
	006 Move V5, [X0+8]
	007 Multiply S6, S0, S3
	008 Multiply S7, S1, S4
	009 Multiply S16, S5, S2
	010 Multiply S2, S1, S2
	011 Multiply S3, S5, S3
	012 Multiply S4, S0, S4
	013 Subtract S2, S6, S2
	014 Subtract S3, S7, S3
	015 Subtract S4, S16, S4
	016 Multiply S6, S1, S3
	017 Multiply S7, S0, S4
	018 Multiply S4, S5, S4
	019 Multiply S1, S1, S2
	020 Multiply S0, S0, S2
	021 Multiply S2, S5, S3
	022 Subtract S3, S6, S7
	023 Subtract S1, S4, S1
	024 Subtract S0, S0, S2
	025 Move [X2], S1
	026 Move [X2+8], S0
	027 Move [X2+8], S3
	028 Return 

Method: System.Void OrthogonalLookRotation$BurstManaged(in UnityEngine.Vector3 forward, in UnityEngine.Vector3 referenceUp, out UnityEngine.Quaternion lookRotation)

Disassembly:
	0x03B8923C STRB W8, [X20 + 0xB1A]
	0x03B89240 LDR X0, [X19]
	0x03B89244 STR X31, [X31 + 0x8]
	0x03B89248 LDR W8, [X0 + 0xE0]
	0x03B8924C CBNZ W8, 0x3B89254
	0x03B89250 BL 0x1C16DFC
	0x03B89254 ADD X0, X31, 0x8
	0x03B89258 BL 0x3B890F4
	0x03B8925C LDR X0, [X31 + 0x8]
	0x03B89260 LDP X20, X19, [X31 + 0x10]
	0x03B89264 LDR X30, [X31], #0x20
	0x03B89268 RET
	0x03B8926C STP X30, X21, [X31 - 0x20]!
	0x03B89270 STP X20, X19, [X31 + 0x10]
	0x03B89274 ADRP X21, 0x859000
	0x03B89278 ADRP X19, 0x5D3000
	0x03B8927C ADRP X20, 0x592000
	0x03B89280 LDRB W8, [X21 + 0xB1B]
	0x03B89284 LDR X19, [X19 + 0x148]
	0x03B89288 LDR X20, [X20 + 0x848]
	0x03B8928C TBNZ X8, 0x0, 0x3B892BC
	0x03B89290 ADRP X0, 0x592000
	0x03B89294 LDR X0, [X0 + 0x848]
	0x03B89298 BL 0x1C16CF4
	0x03B8929C ADRP X0, 0x5D3000
	0x03B892A0 LDR X0, [X0 + 0x148]
	0x03B892A4 BL 0x1C16CF4
	0x03B892A8 ADRP X0, 0x5D3000
	0x03B892AC LDR X0, [X0 + 0x98]
	0x03B892B0 BL 0x1C16CF4
	0x03B892B4 MOVZ W8, 0x1
	0x03B892B8 STRB W8, [X21 + 0xB1B]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+40], X31
	003 Move [X31+48], X30
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 Move [X31+32], X31
	007 Move S0, [X0]
	008 Move S1, [X0+4]
	009 Move V2, [X0+8]
	010 Move X0, X31
	011 Move X19, X2
	012 Move X20, X1
	013 Call float3.op_Implicit, X0
	014 Move [X31+16], S0
	015 Move [X31+24], S1
	016 Move [X31+24], S2
	017 Move S0, [X20]
	018 Move S1, [X20+4]
	019 Move V2, [X20+8]
	020 Move X0, X31
	021 Call float3.op_Implicit, X0
	022 Add X0, X31, 16
	023 Add X1, X31, 0
	024 Add X2, X31, 32
	025 Move [X31], S0
	026 Move [X31+8], S1
	027 Move [X31+8], S2
	028 Call BurstMathUtility.OrthogonalLookRotation, X0, X1, X2
	029 Move S0, [X31+32]
	030 Move S1, [X31+36]
	031 Move S2, [X31+40]
	032 Move S3, [X31+44]
	033 Move X0, X31
	034 Call quaternion.op_Implicit, X0
	035 Move [X19], S0
	036 Move [X19+8], S1
	037 Move [X19+8], S2
	038 Move [X19+16], S3
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X30, [X31+48]
	042 Add X31, X31, 80
	043 Return 

Method: System.Void OrthogonalLookRotation$BurstManaged(in Unity.Mathematics.float3 forward, in Unity.Mathematics.float3 referenceUp, out Unity.Mathematics.quaternion lookRotation)

Disassembly:
	0x03B892BC LDR X0, [X20]
	0x03B892C0 ADRP X20, 0x5D3000
	0x03B892C4 LDR X19, [X19]
	0x03B892C8 LDR W8, [X0 + 0xE0]
	0x03B892CC LDR X20, [X20 + 0x98]
	0x03B892D0 CBNZ W8, 0x3B892D8
	0x03B892D4 BL 0x1C16DFC
	0x03B892D8 MOV X0, X19
	0x03B892DC MOV X1, X31
	0x03B892E0 BL 0x36FA754
	0x03B892E4 LDR X8, [X20]
	0x03B892E8 MOV X19, X0
	0x03B892EC LDR W9, [X8 + 0xE0]
	0x03B892F0 CBNZ W9, 0x3B89300
	0x03B892F4 MOV X0, X8
	0x03B892F8 BL 0x1C16DFC
	0x03B892FC LDR X8, [X20]
	0x03B89300 LDR X8, [X8 + 0xB8]
	0x03B89304 STR X19, [X8 + 0x8]
	0x03B89308 LDP X20, X19, [X31 + 0x10]
	0x03B8930C LDP X30, X21, [X31], #0x20

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X19, X2
	006 Add X2, X31, 0
	007 Move X20, X0
	008 Move [X31+8], W31
	009 Move [X31], X31
	010 Call BurstMathUtility.OrthogonalUpVector, X0, X1, X2
	011 Move S0, [X20]
	012 Move S1, [X20+4]
	013 Move V2, [X20+8]
	014 Move S3, [X31]
	015 Move S4, [X31+4]
	016 Move V5, [X31+8]
	017 Move X0, X31
	018 Call 0x3B9A3E8
	019 Move [X19], S0
	020 Move [X19+8], S1
	021 Move [X19+8], S2
	022 Move [X19+16], S3
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+16]
	026 Add X31, X31, 48
	027 Return 

Method: System.Void ProjectOnPlane$BurstManaged(in Unity.Mathematics.float3 vector, in Unity.Mathematics.float3 planeNormal, out Unity.Mathematics.float3 projectedVector)

Disassembly:
	0x03B89310 RET
	0x03B89314 RET
	0x03B89318 B 0x3B8926C
	0x03B8931C STP X30, X21, [X31 - 0x20]!
	0x03B89320 STP X20, X19, [X31 + 0x10]
	0x03B89324 LDR X8, [X2 + 0x8]
	0x03B89328 STP X1, X2, [X0 + 0x20]
	0x03B8932C MOV X19, X0
	0x03B89330 MOV X20, X1
	0x03B89334 STR X8, [X0 + 0x10]
	0x03B89338 LDRB W21, [X2 + 0x52]
	0x03B8933C STR X0, [X0 + 0x40]
	0x03B89340 MOV X0, X2
	0x03B89344 BL 0x1C16D84
	0x03B89348 TBZ X0, 0x0, 0x3B89360
	0x03B8934C CMP W21, 0x3
	0x03B89350 B.NE 0x3B8937C
	0x03B89354 ADRP X8, 0xFFFFFFFFFE075000
	0x03B89358 ADD X8, X8, 0x98
	0x03B8935C B 0x3B89370
	0x03B89360 CMP W21, 0x2
	0x03B89364 B.NE 0x3B89378
	0x03B89368 ADRP X8, 0xFFFFFFFFFE075000
	0x03B8936C ADD X8, X8, 0x80
	0x03B89370 STR X8, [X19 + 0x18]
	0x03B89374 B 0x3B8938C
	0x03B89378 CBZ X20, 0x3B893A4
	0x03B8937C LDR X8, [X19 + 0x10]
	0x03B89380 LDR X9, [X19 + 0x20]
	0x03B89384 STR X8, [X19 + 0x18]
	0x03B89388 STR X9, [X19 + 0x40]

ISIL:
	001 Move V1, [X1]
	002 Move V0, [X1+8]
	003 Move W8, 0x34000000
	004 NotImplemented "Instruction INVALID not yet implemented."
	005 Multiply S3, S0, S0
	006 NotImplemented "Instruction FADDP not yet implemented."
	007 Add S2, S3, S2
	008 Move S3, W8
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 Move W8, [X0+8]
	011 Move X9, [X0]
	012 Move [X2+8], W8
	013 Move [X2], X9
	014 Return 
	015 Move V3, [X0]
	016 Move V4, [X0+8]
	017 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	018 NotImplemented "Instruction INVALID not yet implemented."
	019 Multiply S7, S0, S4
	020 NotImplemented "Instruction FADDP not yet implemented."
	021 Add S6, S7, S6
	022 NotImplemented "Instruction INVALID not yet implemented."
	023 Multiply S0, S0, S6
	024 NotImplemented "Instruction INVALID not yet implemented."
	025 NotImplemented "Instruction FDIV not yet implemented."
	026 Subtract V1, V3, V1
	027 Subtract S0, S4, S0
	028 Move [X2], D1
	029 Move [X2+8], S0
	030 Return 

Method: System.Void ProjectOnPlane$BurstManaged(in UnityEngine.Vector3 vector, in UnityEngine.Vector3 planeNormal, out UnityEngine.Vector3 projectedVector)

Disassembly:
	0x03B8938C ADRP X8, 0xFFFFFFFFFE075000
	0x03B89390 ADD X8, X8, 0x20
	0x03B89394 STR X8, [X19 + 0x38]
	0x03B89398 LDP X20, X19, [X31 + 0x10]
	0x03B8939C LDP X30, X21, [X31], #0x20
	0x03B893A0 RET
	0x03B893A4 ADRP X1, 0xFFFFFFFFFCF92000
	0x03B893A8 ADD X1, X1, 0xEE3
	0x03B893AC MOV X0, X31
	0x03B893B0 BL 0x1C16F3C
	0x03B893B4 MOV X1, X31
	0x03B893B8 BL 0x1C16DEC
	0x03B893BC LDR X8, [X0 + 0x40]
	0x03B893C0 LDR X5, [X0 + 0x18]
	0x03B893C4 LDR X4, [X0 + 0x28]
	0x03B893C8 MOV X0, X8
	0x03B893CC BR X5
	0x03B893D0 SUB X31, X31, 0x70
	0x03B893D4 STP X30, X27, [X31 + 0x20]
	0x03B893D8 STP X26, X25, [X31 + 0x30]
	0x03B893DC STP X24, X23, [X31 + 0x40]
	0x03B893E0 STP X22, X21, [X31 + 0x50]
	0x03B893E4 STP X20, X19, [X31 + 0x60]
	0x03B893E8 ADRP X27, 0x859000
	0x03B893EC ADRP X26, 0x595000
	0x03B893F0 ADRP X25, 0x570000
	0x03B893F4 LDRB W8, [X27 + 0xB1D]
	0x03B893F8 LDR X26, [X26 + 0x838]
	0x03B893FC LDR X25, [X25 + 0x7B8]
	0x03B89400 MOV X19, X5
	0x03B89404 MOV X20, X4
	0x03B89408 MOV X22, X3
	0x03B8940C MOV X23, X2

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+64], X20
	004 Move [X31+72], X19
	005 Move [X31+40], W31
	006 Move [X31+32], X31
	007 Move S0, [X0]
	008 Move S1, [X0+4]
	009 Move V2, [X0+8]
	010 Move X0, X31
	011 Move X19, X2
	012 Move X20, X1
	013 Call float3.op_Implicit, X0
	014 Move [X31+16], S0
	015 Move [X31+24], S1
	016 Move [X31+24], S2
	017 Move S0, [X20]
	018 Move S1, [X20+4]
	019 Move V2, [X20+8]
	020 Move X0, X31
	021 Call float3.op_Implicit, X0
	022 Add X0, X31, 16
	023 Add X1, X31, 0
	024 Add X2, X31, 32
	025 Move [X31], S0
	026 Move [X31+8], S1
	027 Move [X31+8], S2
	028 Call BurstMathUtility.ProjectOnPlane, X0, X1, X2
	029 Move S0, [X31+32]
	030 Move S1, [X31+36]
	031 Move V2, [X31+40]
	032 Move X0, X31
	033 Call float3.op_Implicit, X0
	034 Move [X19], S0
	035 Move [X19+8], S1
	036 Move [X19+8], S2
	037 Move X20, [X31+64]
	038 Move X19, [X31+72]
	039 Move X30, [X31+48]
	040 Add X31, X31, 80
	041 Return 

Method: System.Void LookRotationWithForwardProjectedOnPlane$BurstManaged(in Unity.Mathematics.float3 forward, in Unity.Mathematics.float3 planeNormal, out Unity.Mathematics.quaternion lookRotation)

Disassembly:
	0x03B89410 MOV X24, X1
	0x03B89414 MOV X21, X0
	0x03B89418 TBNZ X8, 0x0, 0x3B8943C
	0x03B8941C ADRP X0, 0x595000
	0x03B89420 LDR X0, [X0 + 0x838]
	0x03B89424 BL 0x1C16CF4
	0x03B89428 ADRP X0, 0x570000
	0x03B8942C LDR X0, [X0 + 0x7B8]
	0x03B89430 BL 0x1C16CF4
	0x03B89434 MOVZ W8, 0x1
	0x03B89438 STRB W8, [X27 + 0xB1D]
	0x03B8943C LDR X0, [X26]
	0x03B89440 MOV X1, X24
	0x03B89444 STR X31, [X31 + 0x18]
	0x03B89448 BL 0x1C16E04
	0x03B8944C LDR X8, [X26]
	0x03B89450 STR X0, [X31]
	0x03B89454 MOV X1, X23
	0x03B89458 MOV X0, X8
	0x03B8945C BL 0x1C16E04
	0x03B89460 LDR X8, [X25]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X19, X2
	006 Add X2, X31, 0
	007 Move X20, X1
	008 Move [X31+8], W31
	009 Move [X31], X31
	010 Call BurstMathUtility.ProjectOnPlane, X0, X1, X2
	011 Move S0, [X31]
	012 Move S1, [X31+4]
	013 Move V2, [X31+8]
	014 Move S3, [X20]
	015 Move S4, [X20+4]
	016 Move V5, [X20+8]
	017 Move X0, X31
	018 Call 0x3B9A3E8
	019 Move [X19], S0
	020 Move [X19+8], S1
	021 Move [X19+8], S2
	022 Move [X19+16], S3
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+16]
	026 Add X31, X31, 48
	027 Return 

Method: System.Void LookRotationWithForwardProjectedOnPlane$BurstManaged(in UnityEngine.Vector3 forward, in UnityEngine.Vector3 planeNormal, out UnityEngine.Quaternion lookRotation)

Disassembly:
	0x03B89464 STR X0, [X31 + 0x8]
	0x03B89468 MOV X1, X22
	0x03B8946C MOV X0, X8
	0x03B89470 BL 0x1C16E04
	0x03B89474 STR X0, [X31 + 0x10]
	0x03B89478 ADD X1, X31, 0x0
	0x03B8947C MOV X0, X21
	0x03B89480 MOV X2, X20
	0x03B89484 MOV X3, X19
	0x03B89488 BL 0x1C16CB0
	0x03B8948C LDP X20, X19, [X31 + 0x60]
	0x03B89490 LDP X22, X21, [X31 + 0x50]
	0x03B89494 LDP X24, X23, [X31 + 0x40]
	0x03B89498 LDP X26, X25, [X31 + 0x30]
	0x03B8949C LDP X30, X27, [X31 + 0x20]
	0x03B894A0 ADD X31, X31, 0x70
	0x03B894A4 RET
	0x03B894A8 MOV X0, X1
	0x03B894AC MOV X1, X31
	0x03B894B0 B 0x1C16CB4
	0x03B894B4 STP X30, X23, [X31 - 0x30]!
	0x03B894B8 STP X22, X21, [X31 + 0x10]
	0x03B894BC STP X20, X19, [X31 + 0x20]
	0x03B894C0 ADRP X20, 0x859000
	0x03B894C4 ADRP X23, 0x5D3000
	0x03B894C8 LDRB W8, [X20 + 0xB1E]
	0x03B894CC LDR X23, [X23 + 0xA0]
	0x03B894D0 MOV X19, X0
	0x03B894D4 TBNZ X8, 0x0, 0x3B89510
	0x03B894D8 ADRP X0, 0x592000
	0x03B894DC LDR X0, [X0 + 0x848]
	0x03B894E0 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+40], X31
	003 Move [X31+48], X30
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 Move [X31+32], X31
	007 Move S0, [X0]
	008 Move S1, [X0+4]
	009 Move V2, [X0+8]
	010 Move X0, X31
	011 Move X19, X2
	012 Move X20, X1
	013 Call float3.op_Implicit, X0
	014 Move [X31+16], S0
	015 Move [X31+24], S1
	016 Move [X31+24], S2
	017 Move S0, [X20]
	018 Move S1, [X20+4]
	019 Move V2, [X20+8]
	020 Move X0, X31
	021 Call float3.op_Implicit, X0
	022 Add X0, X31, 16
	023 Add X1, X31, 0
	024 Add X2, X31, 32
	025 Move [X31], S0
	026 Move [X31+8], S1
	027 Move [X31+8], S2
	028 Call BurstMathUtility.LookRotationWithForwardProjectedOnPlane, X0, X1, X2
	029 Move S0, [X31+32]
	030 Move S1, [X31+36]
	031 Move S2, [X31+40]
	032 Move S3, [X31+44]
	033 Move X0, X31
	034 Call quaternion.op_Implicit, X0
	035 Move [X19], S0
	036 Move [X19+8], S1
	037 Move [X19+8], S2
	038 Move [X19+16], S3
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X30, [X31+48]
	042 Add X31, X31, 80
	043 Return 

Method: System.Void Angle$BurstManaged(in Unity.Mathematics.quaternion a, in Unity.Mathematics.quaternion b, out System.Single angle)

Disassembly:
	0x03B894E4 ADRP X0, 0x5D3000
	0x03B894E8 LDR X0, [X0 + 0x150]
	0x03B894EC BL 0x1C16CF4
	0x03B894F0 ADRP X0, 0x5D3000
	0x03B894F4 LDR X0, [X0 + 0xA0]
	0x03B894F8 BL 0x1C16CF4
	0x03B894FC ADRP X0, 0x5D3000
	0x03B89500 LDR X0, [X0 + 0x158]
	0x03B89504 BL 0x1C16CF4
	0x03B89508 MOVZ W8, 0x1
	0x03B8950C STRB W8, [X20 + 0xB1E]
	0x03B89510 LDR X8, [X23]
	0x03B89514 LDR W9, [X8 + 0xE0]
	0x03B89518 CBNZ W9, 0x3B89528
	0x03B8951C MOV X0, X8
	0x03B89520 BL 0x1C16DFC
	0x03B89524 LDR X8, [X23]
	0x03B89528 LDR X9, [X8 + 0xB8]
	0x03B8952C LDR X10, [X9]
	0x03B89530 CBNZ X10, 0x3B895A0
	0x03B89534 LDR W10, [X8 + 0xE0]
	0x03B89538 CBNZ W10, 0x3B8954C
	0x03B8953C MOV X0, X8
	0x03B89540 BL 0x1C16DFC
	0x03B89544 LDR X8, [X23]
	0x03B89548 LDR X9, [X8 + 0xB8]
	0x03B8954C ADRP X8, 0x592000
	0x03B89550 LDR X20, [X9 + 0x8]
	0x03B89554 LDR X8, [X8 + 0x848]
	0x03B89558 LDR X0, [X8]
	0x03B8955C ADRP X8, 0x5D3000
	0x03B89560 LDR X8, [X8 + 0x150]
	0x03B89564 LDR X21, [X8]
	0x03B89568 ADRP X8, 0x5D3000
	0x03B8956C LDR X8, [X8 + 0x158]
	0x03B89570 LDR W9, [X0 + 0xE0]
	0x03B89574 LDR X22, [X8]
	0x03B89578 CBNZ W9, 0x3B89580
	0x03B8957C BL 0x1C16DFC
	0x03B89580 MOV X0, X20
	0x03B89584 MOV X1, X21
	0x03B89588 MOV X2, X22
	0x03B8958C MOV X3, X31
	0x03B89590 BL 0x36FAD70
	0x03B89594 LDR X8, [X23]
	0x03B89598 LDR X9, [X8 + 0xB8]
	0x03B8959C STR X0, [X9]
	0x03B895A0 LDR W9, [X8 + 0xE0]
	0x03B895A4 CBNZ W9, 0x3B895B4

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move D0, [X0]
	006 Move D1, [X0+8]
	007 Move D2, [X1]
	008 Move D3, [X1+8]
	009 Move X8, -50978816
	010 Move X19, X2
	011 NotImplemented "Instruction INVALID not yet implemented."
	012 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	013 NotImplemented "Instruction INVALID not yet implemented."
	014 Add V0, V0, V2
	015 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	016 Add V0, V1, V0
	017 Add V0, V3, V0
	018 Move V1, [X8+436]
	019 Move W8, S0
	020 And W8, W8, 0x7FFFFFFF
	021 Move S0, 1
	022 Move S2, W8
	023 NotImplemented "Instruction FMINNM not yet implemented."
	024 NotImplemented "Instruction FCMP not yet implemented."
	025 Move S0, W31
	026 Move X20, 0x859000
	027 Move W8, [X20+1384]
	028 Compare W8, 0
	029 JumpIfNotEqual {35}
	030 Move X0, 0x56B000
	031 Move X0, [X0+1448]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+1384], W8
	035 Move X8, 0x56B000
	036 Move X8, [X8+1448]
	037 Move X0, [X8]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 NotImplemented "Instruction FCVT not yet implemented."
	043 Call 0x3EB2B80
	044 Move X8, -50978816
	045 Move V1, [X8+1096]
	046 NotImplemented "Instruction INVALID not yet implemented."
	047 Add S0, S0, S0
	048 Multiply S0, S0, S1
	049 Move [X19], S0
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X30, [X31+8]
	053 Move V8, [X31+32]
	054 Return 

Method: System.Boolean FastVectorEquals$BurstManaged(in Unity.Mathematics.float3 a, in Unity.Mathematics.float3 b, System.Single tolerance = 0.0001)

Disassembly:
	0x03B895A8 MOV X0, X8
	0x03B895AC BL 0x1C16DFC
	0x03B895B0 LDR X8, [X23]
	0x03B895B4 LDR X8, [X8 + 0xB8]
	0x03B895B8 LDP X22, X21, [X31 + 0x10]
	0x03B895BC LDR X8, [X8]
	0x03B895C0 STR X8, [X19]
	0x03B895C4 LDP X20, X19, [X31 + 0x20]
	0x03B895C8 LDP X30, X23, [X31], #0x30
	0x03B895CC RET
	0x03B895D0 STR X30, [X31 - 0x20]!
	0x03B895D4 STP X20, X19, [X31 + 0x10]
	0x03B895D8 ADRP X20, 0x859000
	0x03B895DC ADRP X19, 0x5D3000
	0x03B895E0 LDRB W8, [X20 + 0xB1F]
	0x03B895E4 LDR X19, [X19 + 0xA0]
	0x03B895E8 TBNZ X8, 0x0, 0x3B89600
	0x03B895EC ADRP X0, 0x5D3000

ISIL:
	001 Move V1, [X0]
	002 Move V2, [X1]
	003 NotImplemented "Instruction FABD not yet implemented."
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move V1, [X0+4]
	006 Move V2, [X1+4]
	007 NotImplemented "Instruction FABD not yet implemented."
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 Move V1, [X0+8]
	010 Move V2, [X1+8]
	011 NotImplemented "Instruction FABD not yet implemented."
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 NotImplemented "Instruction CSET not yet implemented."
	014 Return X0
	015 Move W0, W31
	016 Return X0

Method: System.Boolean FastVectorEquals$BurstManaged(in UnityEngine.Vector3 a, in UnityEngine.Vector3 b, System.Single tolerance = 0.0001)

Disassembly:
	0x03B895F0 LDR X0, [X0 + 0xA0]
	0x03B895F4 BL 0x1C16CF4
	0x03B895F8 MOVZ W8, 0x1
	0x03B895FC STRB W8, [X20 + 0xB1F]
	0x03B89600 LDR X0, [X19]
	0x03B89604 STR X31, [X31 + 0x8]
	0x03B89608 LDR W8, [X0 + 0xE0]
	0x03B8960C CBNZ W8, 0x3B89614
	0x03B89610 BL 0x1C16DFC
	0x03B89614 ADD X0, X31, 0x8
	0x03B89618 BL 0x3B894B4
	0x03B8961C LDR X0, [X31 + 0x8]
	0x03B89620 LDP X20, X19, [X31 + 0x10]
	0x03B89624 LDR X30, [X31], #0x20
	0x03B89628 RET
	0x03B8962C STP X30, X21, [X31 - 0x20]!
	0x03B89630 STP X20, X19, [X31 + 0x10]
	0x03B89634 ADRP X21, 0x859000

ISIL:
	001 Move V1, [X0]
	002 Move V2, [X1]
	003 NotImplemented "Instruction FABD not yet implemented."
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move V1, [X0+4]
	006 Move V2, [X1+4]
	007 NotImplemented "Instruction FABD not yet implemented."
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 Move V1, [X0+8]
	010 Move V2, [X1+8]
	011 NotImplemented "Instruction FABD not yet implemented."
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 NotImplemented "Instruction CSET not yet implemented."
	014 Return X0
	015 Move W0, W31
	016 Return X0

Method: System.Void FastSafeDivide$BurstManaged(in UnityEngine.Vector3 a, in UnityEngine.Vector3 b, out UnityEngine.Vector3 result, System.Single tolerance = 1E-06)

Disassembly:
	0x03B89638 ADRP X19, 0x5D3000
	0x03B8963C ADRP X20, 0x592000
	0x03B89640 LDRB W8, [X21 + 0xB20]
	0x03B89644 LDR X19, [X19 + 0x160]
	0x03B89648 LDR X20, [X20 + 0x848]
	0x03B8964C TBNZ X8, 0x0, 0x3B8967C
	0x03B89650 ADRP X0, 0x592000
	0x03B89654 LDR X0, [X0 + 0x848]
	0x03B89658 BL 0x1C16CF4
	0x03B8965C ADRP X0, 0x5D3000
	0x03B89660 LDR X0, [X0 + 0x160]
	0x03B89664 BL 0x1C16CF4
	0x03B89668 ADRP X0, 0x5D3000
	0x03B8966C LDR X0, [X0 + 0xA0]
	0x03B89670 BL 0x1C16CF4
	0x03B89674 MOVZ W8, 0x1
	0x03B89678 STRB W8, [X21 + 0xB20]
	0x03B8967C LDR X0, [X20]
	0x03B89680 ADRP X20, 0x5D3000
	0x03B89684 LDR X19, [X19]
	0x03B89688 LDR W8, [X0 + 0xE0]
	0x03B8968C LDR X20, [X20 + 0xA0]
	0x03B89690 CBNZ W8, 0x3B89698
	0x03B89694 BL 0x1C16DFC
	0x03B89698 MOV X0, X19
	0x03B8969C MOV X1, X31
	0x03B896A0 BL 0x36FA754
	0x03B896A4 LDR X8, [X20]
	0x03B896A8 MOV X19, X0
	0x03B896AC LDR W9, [X8 + 0xE0]
	0x03B896B0 CBNZ W9, 0x3B896C0
	0x03B896B4 MOV X0, X8
	0x03B896B8 BL 0x1C16DFC
	0x03B896BC LDR X8, [X20]
	0x03B896C0 LDR X8, [X8 + 0xB8]
	0x03B896C4 STR X19, [X8 + 0x8]
	0x03B896C8 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], D8
	003 Move [X31+56], X30
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 Move [X31+40], W31
	007 Move [X31+32], X31
	008 Move V8, V0
	009 Move S0, [X0]
	010 Move S1, [X0+4]
	011 Move V2, [X0+8]
	012 Move X0, X31
	013 Move X19, X2
	014 Move X20, X1
	015 Call float3.op_Implicit, X0
	016 Move [X31+16], S0
	017 Move [X31+24], S1
	018 Move [X31+24], S2
	019 Move S0, [X20]
	020 Move S1, [X20+4]
	021 Move V2, [X20+8]
	022 Move X0, X31
	023 Call float3.op_Implicit, X0
	024 Move [X31], S0
	025 Move [X31+8], S1
	026 Add X0, X31, 16
	027 Add X1, X31, 0
	028 Add X2, X31, 32
	029 Move V0, V8
	030 Move [X31+8], S2
	031 Call BurstMathUtility.FastSafeDivide, X0, X1, X2, V0
	032 Move S0, [X31+32]
	033 Move S1, [X31+36]
	034 Move V2, [X31+40]
	035 Move X0, X31
	036 Call float3.op_Implicit, X0
	037 Move [X19], S0
	038 Move [X19+8], S1
	039 Move [X19+8], S2
	040 Move X20, [X31+64]
	041 Move X19, [X31+72]
	042 Move X30, [X31+56]
	043 Move V8, [X31+48]
	044 Add X31, X31, 80
	045 Return 

Method: System.Void FastSafeDivide$BurstManaged(in Unity.Mathematics.float3 a, in Unity.Mathematics.float3 b, out Unity.Mathematics.float3 result, System.Single tolerance = 1E-06)

Disassembly:
	0x03B896CC LDP X30, X21, [X31], #0x20
	0x03B896D0 RET
	0x03B896D4 RET
	0x03B896D8 B 0x3B8962C
	0x03B896DC STP X30, X21, [X31 - 0x20]!
	0x03B896E0 STP X20, X19, [X31 + 0x10]
	0x03B896E4 LDR X8, [X2 + 0x8]
	0x03B896E8 STP X1, X2, [X0 + 0x20]
	0x03B896EC MOV X19, X0
	0x03B896F0 MOV X20, X1
	0x03B896F4 STR X8, [X0 + 0x10]
	0x03B896F8 LDRB W21, [X2 + 0x52]
	0x03B896FC STR X0, [X0 + 0x40]
	0x03B89700 MOV X0, X2
	0x03B89704 BL 0x1C16D84
	0x03B89708 TBZ X0, 0x0, 0x3B89720
	0x03B8970C CMP W21, 0x3
	0x03B89710 B.NE 0x3B8973C
	0x03B89714 ADRP X8, 0xFFFFFFFFFE075000
	0x03B89718 ADD X8, X8, 0x13C
	0x03B8971C B 0x3B89730
	0x03B89720 CMP W21, 0x2
	0x03B89724 B.NE 0x3B89738
	0x03B89728 ADRP X8, 0xFFFFFFFFFE075000

ISIL:
	001 Move [X2+8], W31
	002 Move [X2], X31
	003 Move V1, [X0]
	004 Move V2, [X1]
	005 NotImplemented "Instruction FABD not yet implemented."
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 NotImplemented "Instruction FDIV not yet implemented."
	008 Move [X2], S1
	009 Move V1, [X0+4]
	010 Move V2, [X1+4]
	011 NotImplemented "Instruction FABD not yet implemented."
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 NotImplemented "Instruction FDIV not yet implemented."
	014 Move [X2+4], S1
	015 Move V1, [X0+8]
	016 Move V2, [X1+8]
	017 NotImplemented "Instruction FABD not yet implemented."
	018 NotImplemented "Instruction FCMP not yet implemented."
	019 NotImplemented "Instruction FDIV not yet implemented."
	020 Move [X2+8], S0
	021 Return 

Method: System.Void Scale$BurstManaged(in Unity.Mathematics.float3 a, in Unity.Mathematics.float3 b, out Unity.Mathematics.float3 result)

Disassembly:
	0x03B8972C ADD X8, X8, 0x124
	0x03B89730 STR X8, [X19 + 0x18]
	0x03B89734 B 0x3B8974C
	0x03B89738 CBZ X20, 0x3B89764
	0x03B8973C LDR X8, [X19 + 0x10]
	0x03B89740 LDR X9, [X19 + 0x20]
	0x03B89744 STR X8, [X19 + 0x18]
	0x03B89748 STR X9, [X19 + 0x40]
	0x03B8974C ADRP X8, 0xFFFFFFFFFE075000

ISIL:
	001 Move V0, [X0]
	002 Move V1, [X1]
	003 Move V2, [X0+8]
	004 Move V3, [X1+8]
	005 NotImplemented "Instruction INVALID not yet implemented."
	006 Move [X2], D0
	007 Multiply S1, S2, S3
	008 Move [X2+8], S1
	009 Return 

Method: System.Void Scale$BurstManaged(in UnityEngine.Vector3 a, in UnityEngine.Vector3 b, out UnityEngine.Vector3 result)

Disassembly:
	0x03B89750 ADD X8, X8, 0xC4
	0x03B89754 STR X8, [X19 + 0x38]
	0x03B89758 LDP X20, X19, [X31 + 0x10]
	0x03B8975C LDP X30, X21, [X31], #0x20
	0x03B89760 RET
	0x03B89764 ADRP X1, 0xFFFFFFFFFCF92000
	0x03B89768 ADD X1, X1, 0xEE3
	0x03B8976C MOV X0, X31
	0x03B89770 BL 0x1C16F3C

ISIL:
	001 Move V0, [X0]
	002 Move V1, [X1]
	003 Move V2, [X0+8]
	004 Move V3, [X1+8]
	005 NotImplemented "Instruction INVALID not yet implemented."
	006 Move [X2], D0
	007 Multiply S1, S2, S3
	008 Move [X2+8], S1
	009 Return 

Method: System.Void Orthogonal$BurstManaged(in Unity.Mathematics.float3 input, out Unity.Mathematics.float3 result)

Disassembly:
	0x03B89774 MOV X1, X31
	0x03B89778 BL 0x1C16DEC
	0x03B8977C LDR X8, [X0 + 0x40]
	0x03B89780 LDR X5, [X0 + 0x18]
	0x03B89784 LDR X4, [X0 + 0x28]
	0x03B89788 MOV X0, X8
	0x03B8978C BR X5
	0x03B89790 SUB X31, X31, 0x70
	0x03B89794 STR X30, [X31 + 0x20]
	0x03B89798 STP X26, X25, [X31 + 0x30]
	0x03B8979C STP X24, X23, [X31 + 0x40]
	0x03B897A0 STP X22, X21, [X31 + 0x50]
	0x03B897A4 STP X20, X19, [X31 + 0x60]
	0x03B897A8 ADRP X26, 0x859000
	0x03B897AC ADRP X25, 0x595000
	0x03B897B0 LDRB W8, [X26 + 0xB22]
	0x03B897B4 LDR X25, [X25 + 0x838]
	0x03B897B8 MOV X19, X5
	0x03B897BC MOV X20, X4
	0x03B897C0 MOV X22, X3
	0x03B897C4 MOV X23, X2
	0x03B897C8 MOV X24, X1
	0x03B897CC MOV X21, X0
	0x03B897D0 TBNZ X8, 0x0, 0x3B897E8
	0x03B897D4 ADRP X0, 0x595000
	0x03B897D8 LDR X0, [X0 + 0x838]
	0x03B897DC BL 0x1C16CF4
	0x03B897E0 MOVZ W8, 0x1
	0x03B897E4 STRB W8, [X26 + 0xB22]
	0x03B897E8 LDR X0, [X25]
	0x03B897EC MOV X1, X24
	0x03B897F0 STR X31, [X31 + 0x18]
	0x03B897F4 BL 0x1C16E04
	0x03B897F8 LDR X8, [X25]
	0x03B897FC STR X0, [X31]
	0x03B89800 MOV X1, X23

ISIL:
	001 Move S0, [X0]
	002 Move S2, [X0+4]
	003 Move V1, [X0+8]
	004 NotImplemented "Instruction FABS not yet implemented."
	005 NotImplemented "Instruction FABS not yet implemented."
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 NotImplemented "Instruction FABS not yet implemented."
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 Move S3, W31
	010 Multiply S0, S0, S3
	011 Multiply S4, S2, S3
	012 Multiply S5, S1, S3
	013 Subtract S3, S0, S2
	014 Subtract S2, S4, S5
	015 NotImplemented "Instruction FCMP not yet implemented."
	016 Move S3, W31
	017 Multiply S2, S2, S3
	018 Multiply S4, S1, S3
	019 Multiply S5, S0, S3
	020 Subtract S3, S0, S2
	021 Subtract S2, S2, S1
	022 Subtract S0, S4, S5
	023 Move S3, W31
	024 Multiply S4, S0, S3
	025 Multiply S1, S1, S3
	026 Multiply S3, S2, S3
	027 Subtract S3, S4, S3
	028 Subtract S2, S2, S1
	029 Subtract S0, S1, S0
	030 Move [X1], S2
	031 Move [X1+8], S0
	032 Move [X1+8], S3
	033 Return 

