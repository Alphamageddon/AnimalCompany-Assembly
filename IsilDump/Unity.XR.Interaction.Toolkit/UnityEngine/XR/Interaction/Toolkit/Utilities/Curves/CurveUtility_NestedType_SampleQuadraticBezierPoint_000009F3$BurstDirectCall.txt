Type: UnityEngine.XR.Interaction.Toolkit.Utilities.Curves.CurveUtility/SampleQuadraticBezierPoint_000009F3$BurstDirectCall

Method: System.Void GetFunctionPointerDiscard(ref System.IntPtr param_0)

Disassembly:
	0x03B95904 STR X0, [X31 + 0x18]
	0x03B95908 MOV X1, X22
	0x03B9590C MOV X0, X8
	0x03B95910 BL 0x1C16E04
	0x03B95914 STR X0, [X31 + 0x20]
	0x03B95918 ADD X1, X31, 0x0
	0x03B9591C MOV X0, X21
	0x03B95920 MOV X2, X20
	0x03B95924 MOV X3, X19
	0x03B95928 BL 0x1C16CB0
	0x03B9592C LDP X20, X19, [X31 + 0x80]
	0x03B95930 LDP X22, X21, [X31 + 0x70]
	0x03B95934 LDP X24, X23, [X31 + 0x60]
	0x03B95938 LDP X26, X25, [X31 + 0x50]
	0x03B9593C LDP X28, X27, [X31 + 0x40]
	0x03B95940 LDR X30, [X31 + 0x30]
	0x03B95944 ADD X31, X31, 0x90
	0x03B95948 RET
	0x03B9594C MOV X0, X1
	0x03B95950 MOV X1, X31
	0x03B95954 B 0x1C16CB4
	0x03B95958 STP X30, X23, [X31 - 0x30]!
	0x03B9595C STP X22, X21, [X31 + 0x10]
	0x03B95960 STP X20, X19, [X31 + 0x20]
	0x03B95964 ADRP X20, 0x84D000
	0x03B95968 ADRP X23, 0x5C7000
	0x03B9596C LDRB W8, [X20 + 0xBD6]
	0x03B95970 LDR X23, [X23 + 0x698]
	0x03B95974 MOV X19, X0
	0x03B95978 TBNZ X8, 0x0, 0x3B959B4
	0x03B9597C ADRP X0, 0x586000
	0x03B95980 LDR X0, [X0 + 0x848]
	0x03B95984 BL 0x1C16CF4
	0x03B95988 ADRP X0, 0x5C7000
	0x03B9598C LDR X0, [X0 + 0x708]
	0x03B95990 BL 0x1C16CF4
	0x03B95994 ADRP X0, 0x5C7000
	0x03B95998 LDR X0, [X0 + 0x698]
	0x03B9599C BL 0x1C16CF4
	0x03B959A0 ADRP X0, 0x5C7000
	0x03B959A4 LDR X0, [X0 + 0x710]
	0x03B959A8 BL 0x1C16CF4
	0x03B959AC MOVZ W8, 0x1
	0x03B959B0 STRB W8, [X20 + 0xBD6]
	0x03B959B4 LDR X8, [X23]
	0x03B959B8 LDR W9, [X8 + 0xE0]
	0x03B959BC CBNZ W9, 0x3B959CC
	0x03B959C0 MOV X0, X8
	0x03B959C4 BL 0x1C16DFC
	0x03B959C8 LDR X8, [X23]
	0x03B959CC LDR X9, [X8 + 0xB8]
	0x03B959D0 LDR X10, [X9]
	0x03B959D4 CBNZ X10, 0x3B95A44
	0x03B959D8 LDR W10, [X8 + 0xE0]
	0x03B959DC CBNZ W10, 0x3B959F0
	0x03B959E0 MOV X0, X8
	0x03B959E4 BL 0x1C16DFC
	0x03B959E8 LDR X8, [X23]
	0x03B959EC LDR X9, [X8 + 0xB8]
	0x03B959F0 ADRP X8, 0x586000
	0x03B959F4 LDR X20, [X9 + 0x8]
	0x03B959F8 LDR X8, [X8 + 0x848]
	0x03B959FC LDR X0, [X8]
	0x03B95A00 ADRP X8, 0x5C7000
	0x03B95A04 LDR X8, [X8 + 0x708]
	0x03B95A08 LDR X21, [X8]
	0x03B95A0C ADRP X8, 0x5C7000
	0x03B95A10 LDR X8, [X8 + 0x710]
	0x03B95A14 LDR W9, [X0 + 0xE0]
	0x03B95A18 LDR X22, [X8]
	0x03B95A1C CBNZ W9, 0x3B95A24

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x84E000
	008 Move X23, 0x5C8000
	009 Move W8, [X20+3010]
	010 Move X23, [X23+1656]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x587000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0x5C8000
	020 Move X0, [X0+1704]
	021 Call 0x1C17CF4
	022 Move X0, 0x5C8000
	023 Move X0, [X0+1656]
	024 Call 0x1C17CF4
	025 Move X0, 0x5C8000
	026 Move X0, [X0+1712]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+3010], W8
	030 Move X8, [X23]
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X23]
	037 Move X9, [X8+184]
	038 Move X10, [X9]
	039 Compare X10, 0
	040 JumpIfNotEqual {70}
	041 Move W10, [X8+224]
	042 Compare W10, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X23]
	047 Move X9, [X8+184]
	048 Move X8, 0x587000
	049 Move X20, [X9+8]
	050 Move X8, [X8+2120]
	051 Move X0, [X8]
	052 Move X8, 0x5C8000
	053 Move X8, [X8+1704]
	054 Move X21, [X8]
	055 Move X8, 0x5C8000
	056 Move X8, [X8+1712]
	057 Move W9, [X0+224]
	058 Move X22, [X8]
	059 Compare W9, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X22
	065 Move X3, X31
	066 Call BurstCompiler.GetILPPMethodFunctionPointer2, X0, X1, X2
	067 Move X8, [X23]
	068 Move X9, [X8+184]
	069 Move [X9], X0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {76}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, [X23]
	076 Move X8, [X8+184]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X8, [X8]
	080 Move [X19], X8
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 

Method: System.IntPtr GetFunctionPointer()

Disassembly:
	0x03B95A20 BL 0x1C16DFC
	0x03B95A24 MOV X0, X20
	0x03B95A28 MOV X1, X21
	0x03B95A2C MOV X2, X22
	0x03B95A30 MOV X3, X31
	0x03B95A34 BL 0x36FAD70
	0x03B95A38 LDR X8, [X23]
	0x03B95A3C LDR X9, [X8 + 0xB8]
	0x03B95A40 STR X0, [X9]
	0x03B95A44 LDR W9, [X8 + 0xE0]
	0x03B95A48 CBNZ W9, 0x3B95A58
	0x03B95A4C MOV X0, X8
	0x03B95A50 BL 0x1C16DFC
	0x03B95A54 LDR X8, [X23]
	0x03B95A58 LDR X8, [X8 + 0xB8]
	0x03B95A5C LDP X22, X21, [X31 + 0x10]
	0x03B95A60 LDR X8, [X8]
	0x03B95A64 STR X8, [X19]
	0x03B95A68 LDP X20, X19, [X31 + 0x20]
	0x03B95A6C LDP X30, X23, [X31], #0x30
	0x03B95A70 RET
	0x03B95A74 STR X30, [X31 - 0x20]!
	0x03B95A78 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x84E000
	005 Move X19, 0x5C8000
	006 Move W8, [X20+3011]
	007 Move X19, [X19+1656]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5C8000
	013 Move X0, [X0+1656]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3011], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 8
	024 Call SampleQuadraticBezierPoint_000009F3$BurstDirectCall.GetFunctionPointerDiscard, X0
	025 Move X0, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void Constructor()

Disassembly:
	0x03B95A7C ADRP X20, 0x84D000
	0x03B95A80 ADRP X19, 0x5C7000
	0x03B95A84 LDRB W8, [X20 + 0xBD7]
	0x03B95A88 LDR X19, [X19 + 0x698]
	0x03B95A8C TBNZ X8, 0x0, 0x3B95AA4
	0x03B95A90 ADRP X0, 0x5C7000
	0x03B95A94 LDR X0, [X0 + 0x698]
	0x03B95A98 BL 0x1C16CF4
	0x03B95A9C MOVZ W8, 0x1
	0x03B95AA0 STRB W8, [X20 + 0xBD7]
	0x03B95AA4 LDR X0, [X19]
	0x03B95AA8 STR X31, [X31 + 0x8]
	0x03B95AAC LDR W8, [X0 + 0xE0]
	0x03B95AB0 CBNZ W8, 0x3B95AB8
	0x03B95AB4 BL 0x1C16DFC
	0x03B95AB8 ADD X0, X31, 0x8
	0x03B95ABC BL 0x3B95958
	0x03B95AC0 LDR X0, [X31 + 0x8]
	0x03B95AC4 LDP X20, X19, [X31 + 0x10]
	0x03B95AC8 LDR X30, [X31], #0x20
	0x03B95ACC RET
	0x03B95AD0 STP X30, X21, [X31 - 0x20]!
	0x03B95AD4 STP X20, X19, [X31 + 0x10]
	0x03B95AD8 ADRP X21, 0x84D000
	0x03B95ADC ADRP X19, 0x5C7000
	0x03B95AE0 ADRP X20, 0x586000
	0x03B95AE4 LDRB W8, [X21 + 0xBD8]
	0x03B95AE8 LDR X19, [X19 + 0x718]
	0x03B95AEC LDR X20, [X20 + 0x848]
	0x03B95AF0 TBNZ X8, 0x0, 0x3B95B20
	0x03B95AF4 ADRP X0, 0x586000
	0x03B95AF8 LDR X0, [X0 + 0x848]
	0x03B95AFC BL 0x1C16CF4
	0x03B95B00 ADRP X0, 0x5C7000
	0x03B95B04 LDR X0, [X0 + 0x718]
	0x03B95B08 BL 0x1C16CF4
	0x03B95B0C ADRP X0, 0x5C7000
	0x03B95B10 LDR X0, [X0 + 0x698]
	0x03B95B14 BL 0x1C16CF4
	0x03B95B18 MOVZ W8, 0x1
	0x03B95B1C STRB W8, [X21 + 0xBD8]
	0x03B95B20 LDR X0, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x84E000
	006 Move X19, 0x5C8000
	007 Move X20, 0x587000
	008 Move W8, [X21+3012]
	009 Move X19, [X19+1720]
	010 Move X20, [X20+2120]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x587000
	016 Move X0, [X0+2120]
	017 Call 0x1C17CF4
	018 Move X0, 0x5C8000
	019 Move X0, [X0+1720]
	020 Call 0x1C17CF4
	021 Move X0, 0x5C8000
	022 Move X0, [X0+1656]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3012], W8
	026 Move X0, [X20]
	027 Move X20, 0x5C8000
	028 Move X19, [X19]
	029 Move W8, [X0+224]
	030 Move X20, [X20+1656]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call BurstCompiler.CompileILPPMethod2, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move [X8+8], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void Initialize()

Disassembly:
	0x03B95B24 ADRP X20, 0x5C7000

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B95B28 LDR X19, [X19]

ISIL:
	001 Call SampleQuadraticBezierPoint_000009F3$BurstDirectCall.Constructor
	002 Return 

Method: System.Void Invoke(in Unity.Mathematics.float3 p0, in Unity.Mathematics.float3 p1, in Unity.Mathematics.float3 p2, System.Single t, out Unity.Mathematics.float3 point)

Disassembly:
	0x03B947E8 STR X30, [X31 + 0x30]
	0x03B947EC STP X28, X27, [X31 + 0x40]
	0x03B947F0 STP X26, X25, [X31 + 0x50]
	0x03B947F4 STP X24, X23, [X31 + 0x60]
	0x03B947F8 STP X22, X21, [X31 + 0x70]
	0x03B947FC STP X20, X19, [X31 + 0x80]
	0x03B94800 ADRP X28, 0x84E000
	0x03B94804 STR S0, [X31 + 0x3C]
	0x03B94808 ADRP X26, 0x58A000
	0x03B9480C ADRP X27, 0x55F000
	0x03B94810 LDRB W8, [X28 + 0xBC1]
	0x03B94814 LDR X26, [X26 + 0x838]
	0x03B94818 LDR X27, [X27 + 0xA90]
	0x03B9481C MOV X19, X6
	0x03B94820 MOV X20, X5
	0x03B94824 MOV X22, X4
	0x03B94828 MOV X23, X3
	0x03B9482C MOV X24, X2
	0x03B94830 MOV X25, X1
	0x03B94834 MOV X21, X0
	0x03B94838 TBNZ X8, 0x0, 0x3B9485C
	0x03B9483C ADRP X0, 0x55F000
	0x03B94840 LDR X0, [X0 + 0xA90]
	0x03B94844 BL 0x1C16CF4
	0x03B94848 ADRP X0, 0x58A000
	0x03B9484C LDR X0, [X0 + 0x838]
	0x03B94850 BL 0x1C16CF4
	0x03B94854 MOVZ W8, 0x1
	0x03B94858 STRB W8, [X28 + 0xBC1]
	0x03B9485C LDR X0, [X26]
	0x03B94860 MOV X1, X25
	0x03B94864 STP X31, X31, [X31 + 0x18]
	0x03B94868 STR X31, [X31 + 0x28]
	0x03B9486C BL 0x1C16E04
	0x03B94870 LDR X8, [X26]
	0x03B94874 STR X0, [X31]
	0x03B94878 MOV X1, X24
	0x03B9487C MOV X0, X8
	0x03B94880 BL 0x1C16E04
	0x03B94884 LDR X8, [X26]
	0x03B94888 STR X0, [X31 + 0x8]
	0x03B9488C MOV X1, X23
	0x03B94890 MOV X0, X8
	0x03B94894 BL 0x1C16E04
	0x03B94898 LDR X8, [X27]
	0x03B9489C STR X0, [X31 + 0x10]
	0x03B948A0 ADD X1, X31, 0x3C
	0x03B948A4 MOV X0, X8
	0x03B948A8 BL 0x1C16E04
	0x03B948AC LDR X8, [X26]
	0x03B948B0 STR X0, [X31 + 0x18]
	0x03B948B4 MOV X1, X22
	0x03B948B8 MOV X0, X8
	0x03B948BC BL 0x1C16E04
	0x03B948C0 STR X0, [X31 + 0x20]
	0x03B948C4 ADD X1, X31, 0x0
	0x03B948C8 MOV X0, X21
	0x03B948CC MOV X2, X20
	0x03B948D0 MOV X3, X19
	0x03B948D4 BL 0x1C16CB0
	0x03B948D8 LDP X20, X19, [X31 + 0x80]
	0x03B948DC LDP X22, X21, [X31 + 0x70]
	0x03B948E0 LDP X24, X23, [X31 + 0x60]
	0x03B948E4 LDP X26, X25, [X31 + 0x50]
	0x03B948E8 LDP X28, X27, [X31 + 0x40]
	0x03B948EC LDR X30, [X31 + 0x30]
	0x03B948F0 ADD X31, X31, 0x90
	0x03B948F4 RET
	0x03B948F8 MOV X0, X1
	0x03B948FC MOV X1, X31
	0x03B94900 B 0x1C16CB4
	0x03B94904 STP X30, X23, [X31 - 0x30]!
	0x03B94908 STP X22, X21, [X31 + 0x10]
	0x03B9490C STP X20, X19, [X31 + 0x20]
	0x03B94910 ADRP X20, 0x84E000
	0x03B94914 ADRP X23, 0x5C8000
	0x03B94918 LDRB W8, [X20 + 0xBC2]
	0x03B9491C LDR X23, [X23 + 0x678]
	0x03B94920 MOV X19, X0
	0x03B94924 TBNZ X8, 0x0, 0x3B94960

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X23, 0x84F000
	010 Move X24, 0x588000
	011 Move W8, [X23+3013]
	012 Move X24, [X24+2120]
	013 Move X19, X3
	014 Move V8, V0
	015 Move X20, X2
	016 Move X21, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0x588000
	023 Move X0, [X0+2120]
	024 Call 0x1C17CF4
	025 Move X0, 0x5C9000
	026 Move X0, [X0+1656]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X23+3013], W8
	030 Move X0, [X24]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X31
	036 Call BurstCompiler.get_IsEnabled
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {66}
	041 Move X8, 0x5C9000
	042 Move X8, [X8+1656]
	043 Move X0, [X8]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Call SampleQuadraticBezierPoint_000009F3$BurstDirectCall.GetFunctionPointer
	049 Compare X0, 0
	050 JumpIfEqual {66}
	051 Move X4, X0
	052 Move X0, X22
	053 Move X1, X21
	054 Move X2, X20
	055 Move X3, X19
	056 Move X20, [X31+48]
	057 Move X19, [X31+56]
	058 Move X22, [X31+32]
	059 Move X21, [X31+40]
	060 Move X24, [X31+16]
	061 Move X23, [X31+24]
	062 Move X30, [X31+8]
	063 Move V0, V8
	064 Move V8, [X31+64]
	065 CallNoReturn X4
	066 Move V1, [X22]
	067 Move V2, [X22+8]
	068 Move S0, 1
	069 Subtract S0, S0, S8
	070 Move V3, [X21]
	071 Move V4, [X21+8]
	072 Multiply S6, S0, S0
	073 Move V5, [X20]
	074 NotImplemented "Instruction INVALID not yet implemented."
	075 Multiply S2, S6, S2
	076 Move V6, [X20+8]
	077 Add S0, S0, S0
	078 Multiply S0, S0, S8
	079 NotImplemented "Instruction INVALID not yet implemented."
	080 Multiply S0, S0, S4
	081 Multiply S4, S8, S8
	082 NotImplemented "Instruction INVALID not yet implemented."
	083 Multiply S4, S4, S6
	084 Add V1, V1, V3
	085 Add S0, S2, S0
	086 Add V1, V1, V5
	087 Add S0, S0, S4
	088 Move [X19], D1
	089 Move [X19+8], S0
	090 Move X20, [X31+48]
	091 Move X19, [X31+56]
	092 Move X22, [X31+32]
	093 Move X21, [X31+40]
	094 Move X24, [X31+16]
	095 Move X23, [X31+24]
	096 Move X30, [X31+8]
	097 Move V8, [X31+64]
	098 Return 

