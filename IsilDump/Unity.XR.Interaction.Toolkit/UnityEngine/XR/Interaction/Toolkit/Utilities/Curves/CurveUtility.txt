Type: UnityEngine.XR.Interaction.Toolkit.Utilities.Curves.CurveUtility

Method: System.Void SampleQuadraticBezierPoint(in Unity.Mathematics.float3 p0, in Unity.Mathematics.float3 p1, in Unity.Mathematics.float3 p2, System.Single t, out Unity.Mathematics.float3 point)

Disassembly:
	0x03B9475C TBZ X0, 0x0, 0x3B94774
	0x03B94760 CMP W21, 0x5
	0x03B94764 B.NE 0x3B94790
	0x03B94768 ADRP X8, 0xFFFFFFFFFE06A000
	0x03B9476C ADD X8, X8, 0xE5C
	0x03B94770 B 0x3B94784
	0x03B94774 CMP W21, 0x4
	0x03B94778 B.NE 0x3B9478C
	0x03B9477C ADRP X8, 0xFFFFFFFFFE06A000
	0x03B94780 ADD X8, X8, 0xE40
	0x03B94784 STR X8, [X19 + 0x18]
	0x03B94788 B 0x3B947A0
	0x03B9478C CBZ X20, 0x3B947B8
	0x03B94790 LDR X8, [X19 + 0x10]
	0x03B94794 LDR X9, [X19 + 0x20]
	0x03B94798 STR X8, [X19 + 0x18]
	0x03B9479C STR X9, [X19 + 0x40]
	0x03B947A0 ADRP X8, 0xFFFFFFFFFE06A000
	0x03B947A4 ADD X8, X8, 0xDC0
	0x03B947A8 STR X8, [X19 + 0x38]
	0x03B947AC LDP X20, X19, [X31 + 0x10]
	0x03B947B0 LDP X30, X21, [X31], #0x20
	0x03B947B4 RET
	0x03B947B8 ADRP X1, 0xFFFFFFFFFCF87000
	0x03B947BC ADD X1, X1, 0xEE3
	0x03B947C0 MOV X0, X31
	0x03B947C4 BL 0x1C16F3C
	0x03B947C8 MOV X1, X31
	0x03B947CC BL 0x1C16DEC
	0x03B947D0 LDR X8, [X0 + 0x40]
	0x03B947D4 LDR X6, [X0 + 0x18]
	0x03B947D8 LDR X5, [X0 + 0x28]
	0x03B947DC MOV X0, X8
	0x03B947E0 BR X6
	0x03B947E4 SUB X31, X31, 0x90

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X23, 0x84F000
	010 Move X24, 0x5C9000
	011 Move W8, [X23+3003]
	012 Move X24, [X24+1656]
	013 Move X19, X3
	014 Move V8, V0
	015 Move X20, X2
	016 Move X21, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x5C9000
	023 Move X0, [X0+1656]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3003], W8
	027 Move X0, [X24]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X22
	033 Move X1, X21
	034 Move X2, X20
	035 Move X3, X19
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move X22, [X31+32]
	039 Move X21, [X31+40]
	040 Move X24, [X31+16]
	041 Move X23, [X31+24]
	042 Move X30, [X31+8]
	043 Move V0, V8
	044 Move V8, [X31+64]

Method: System.Void SampleCubicBezierPoint(in Unity.Mathematics.float3 p0, in Unity.Mathematics.float3 p1, in Unity.Mathematics.float3 p2, in Unity.Mathematics.float3 p3, System.Single t, out Unity.Mathematics.float3 point)

Disassembly:
	0x03B94928 ADRP X0, 0x587000
	0x03B9492C LDR X0, [X0 + 0x848]
	0x03B94930 BL 0x1C16CF4
	0x03B94934 ADRP X0, 0x5C8000
	0x03B94938 LDR X0, [X0 + 0x6A8]
	0x03B9493C BL 0x1C16CF4
	0x03B94940 ADRP X0, 0x5C8000
	0x03B94944 LDR X0, [X0 + 0x678]
	0x03B94948 BL 0x1C16CF4
	0x03B9494C ADRP X0, 0x5C8000
	0x03B94950 LDR X0, [X0 + 0x6B0]
	0x03B94954 BL 0x1C16CF4
	0x03B94958 MOVZ W8, 0x1
	0x03B9495C STRB W8, [X20 + 0xBC2]
	0x03B94960 LDR X8, [X23]
	0x03B94964 LDR W9, [X8 + 0xE0]
	0x03B94968 CBNZ W9, 0x3B94978
	0x03B9496C MOV X0, X8
	0x03B94970 BL 0x1C16DFC
	0x03B94974 LDR X8, [X23]
	0x03B94978 LDR X9, [X8 + 0xB8]
	0x03B9497C LDR X10, [X9]
	0x03B94980 CBNZ X10, 0x3B949F0
	0x03B94984 LDR W10, [X8 + 0xE0]
	0x03B94988 CBNZ W10, 0x3B9499C
	0x03B9498C MOV X0, X8
	0x03B94990 BL 0x1C16DFC
	0x03B94994 LDR X8, [X23]
	0x03B94998 LDR X9, [X8 + 0xB8]
	0x03B9499C ADRP X8, 0x587000
	0x03B949A0 LDR X20, [X9 + 0x8]
	0x03B949A4 LDR X8, [X8 + 0x848]
	0x03B949A8 LDR X0, [X8]
	0x03B949AC ADRP X8, 0x5C8000
	0x03B949B0 LDR X8, [X8 + 0x6A8]
	0x03B949B4 LDR X21, [X8]
	0x03B949B8 ADRP X8, 0x5C8000

ISIL:
	001 Move [X31-80], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0x84F000
	011 Move X25, 0x5C9000
	012 Move W8, [X24+3004]
	013 Move X25, [X25+1664]
	014 Move X19, X4
	015 Move V8, V0
	016 Move X20, X3
	017 Move X21, X2
	018 Move X22, X1
	019 Move X23, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x5C9000
	025 Move X0, [X0+1664]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+3004], W8
	029 Move X0, [X25]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X23
	035 Move X1, X22
	036 Move X2, X21
	037 Move X3, X20
	038 Move X4, X19
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X22, [X31+48]
	042 Move X21, [X31+56]
	043 Move X24, [X31+32]
	044 Move X23, [X31+40]
	045 Move X30, [X31+16]
	046 Move X25, [X31+24]
	047 Move V0, V8
	048 Move V8, [X31+80]

Method: System.Void ElevateQuadraticToCubicBezier(in Unity.Mathematics.float3 p0, in Unity.Mathematics.float3 p1, in Unity.Mathematics.float3 p2, out Unity.Mathematics.float3 c0, out Unity.Mathematics.float3 c1, out Unity.Mathematics.float3 c2, out Unity.Mathematics.float3 c3)

Disassembly:
	0x03B94B30 STP X20, X19, [X31 + 0x10]
	0x03B94B34 LDR X8, [X2 + 0x8]
	0x03B94B38 STP X1, X2, [X0 + 0x20]
	0x03B94B3C MOV X19, X0
	0x03B94B40 MOV X20, X1
	0x03B94B44 STR X8, [X0 + 0x10]
	0x03B94B48 LDRB W21, [X2 + 0x52]
	0x03B94B4C STR X0, [X0 + 0x40]
	0x03B94B50 MOV X0, X2
	0x03B94B54 BL 0x1C16D84
	0x03B94B58 TBZ X0, 0x0, 0x3B94B70
	0x03B94B5C CMP W21, 0x6
	0x03B94B60 B.NE 0x3B94B8C
	0x03B94B64 ADRP X8, 0xFFFFFFFFFE06A000
	0x03B94B68 ADD X8, X8, 0xF38
	0x03B94B6C B 0x3B94B80
	0x03B94B70 CMP W21, 0x5
	0x03B94B74 B.NE 0x3B94B88
	0x03B94B78 ADRP X8, 0xFFFFFFFFFE06A000
	0x03B94B7C ADD X8, X8, 0xF18
	0x03B94B80 STR X8, [X19 + 0x18]
	0x03B94B84 B 0x3B94B9C
	0x03B94B88 CBZ X20, 0x3B94BB4
	0x03B94B8C LDR X8, [X19 + 0x10]
	0x03B94B90 LDR X9, [X19 + 0x20]
	0x03B94B94 STR X8, [X19 + 0x18]
	0x03B94B98 STR X9, [X19 + 0x40]
	0x03B94B9C ADRP X8, 0xFFFFFFFFFE06A000
	0x03B94BA0 ADD X8, X8, 0xE90
	0x03B94BA4 STR X8, [X19 + 0x38]
	0x03B94BA8 LDP X20, X19, [X31 + 0x10]
	0x03B94BAC LDP X30, X21, [X31], #0x20
	0x03B94BB0 RET
	0x03B94BB4 ADRP X1, 0xFFFFFFFFFCF87000
	0x03B94BB8 ADD X1, X1, 0xEE3
	0x03B94BBC MOV X0, X31
	0x03B94BC0 BL 0x1C16F3C
	0x03B94BC4 MOV X1, X31
	0x03B94BC8 BL 0x1C16DEC

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X26, 0x84F000
	012 Move X27, 0x5C9000
	013 Move W8, [X26+3005]
	014 Move X27, [X27+1672]
	015 Move X19, X6
	016 Move X20, X5
	017 Move X21, X4
	018 Move X22, X3
	019 Move X23, X2
	020 Move X24, X1
	021 Move X25, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0x5C9000
	027 Move X0, [X0+1672]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X26+3005], W8
	031 Move X0, [X27]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X25
	037 Move X1, X24
	038 Move X2, X23
	039 Move X3, X22
	040 Move X4, X21
	041 Move X5, X20
	042 Move X6, X19
	043 Move X20, [X31+64]
	044 Move X19, [X31+72]
	045 Move X22, [X31+48]
	046 Move X21, [X31+56]
	047 Move X24, [X31+32]
	048 Move X23, [X31+40]
	049 Move X26, [X31+16]
	050 Move X25, [X31+24]
	051 Move X30, [X31+80]
	052 Move X27, [X31+88]

Method: System.Void GenerateCubicBezierCurve(System.Int32 numTargetPoints, System.Single curveRatio, in Unity.Mathematics.float3 lineOrigin, in Unity.Mathematics.float3 lineDirection, in Unity.Mathematics.float3 endPoint, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float3> targetPoints)

Disassembly:
	0x03B94D50 BL 0x1C16CF4
	0x03B94D54 ADRP X0, 0x5C8000
	0x03B94D58 LDR X0, [X0 + 0x680]
	0x03B94D5C BL 0x1C16CF4
	0x03B94D60 ADRP X0, 0x5C8000
	0x03B94D64 LDR X0, [X0 + 0x6C8]
	0x03B94D68 BL 0x1C16CF4
	0x03B94D6C MOVZ W8, 0x1
	0x03B94D70 STRB W8, [X20 + 0xBC7]
	0x03B94D74 LDR X8, [X23]
	0x03B94D78 LDR W9, [X8 + 0xE0]
	0x03B94D7C CBNZ W9, 0x3B94D8C
	0x03B94D80 MOV X0, X8
	0x03B94D84 BL 0x1C16DFC
	0x03B94D88 LDR X8, [X23]
	0x03B94D8C LDR X9, [X8 + 0xB8]
	0x03B94D90 LDR X10, [X9]
	0x03B94D94 CBNZ X10, 0x3B94E04
	0x03B94D98 LDR W10, [X8 + 0xE0]
	0x03B94D9C CBNZ W10, 0x3B94DB0
	0x03B94DA0 MOV X0, X8
	0x03B94DA4 BL 0x1C16DFC
	0x03B94DA8 LDR X8, [X23]
	0x03B94DAC LDR X9, [X8 + 0xB8]
	0x03B94DB0 ADRP X8, 0x587000
	0x03B94DB4 LDR X20, [X9 + 0x8]
	0x03B94DB8 LDR X8, [X8 + 0x848]
	0x03B94DBC LDR X0, [X8]
	0x03B94DC0 ADRP X8, 0x5C8000
	0x03B94DC4 LDR X8, [X8 + 0x6C0]
	0x03B94DC8 LDR X21, [X8]
	0x03B94DCC ADRP X8, 0x5C8000
	0x03B94DD0 LDR X8, [X8 + 0x6C8]
	0x03B94DD4 LDR W9, [X0 + 0xE0]
	0x03B94DD8 LDR X22, [X8]
	0x03B94DDC CBNZ W9, 0x3B94DE4
	0x03B94DE0 BL 0x1C16DFC

ISIL:
	001 Move [X31-80], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0x84F000
	011 Move X25, 0x5C9000
	012 Move W8, [X24+3006]
	013 Move X25, [X25+1680]
	014 Move X19, X4
	015 Move X20, X3
	016 Move X21, X2
	017 Move X22, X1
	018 Move V8, V0
	019 Move W23, W0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x5C9000
	025 Move X0, [X0+1680]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+3006], W8
	029 Move X0, [X25]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move W0, W23
	035 Move X1, X22
	036 Move X2, X21
	037 Move X3, X20
	038 Move X4, X19
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X22, [X31+48]
	042 Move X21, [X31+56]
	043 Move X24, [X31+32]
	044 Move X23, [X31+40]
	045 Move X30, [X31+16]
	046 Move X25, [X31+24]
	047 Move V0, V8
	048 Move V8, [X31+80]

Method: System.Void SampleProjectilePoint(in Unity.Mathematics.float3 initialPosition, in Unity.Mathematics.float3 initialVelocity, in Unity.Mathematics.float3 constantAcceleration, System.Single time, out Unity.Mathematics.float3 point)

Disassembly:
	0x03B94EE8 LDR X19, [X19]
	0x03B94EEC LDR W8, [X0 + 0xE0]
	0x03B94EF0 LDR X20, [X20 + 0x680]
	0x03B94EF4 CBNZ W8, 0x3B94EFC
	0x03B94EF8 BL 0x1C16DFC
	0x03B94EFC MOV X0, X19
	0x03B94F00 MOV X1, X31
	0x03B94F04 BL 0x36FA754
	0x03B94F08 LDR X8, [X20]
	0x03B94F0C MOV X19, X0
	0x03B94F10 LDR W9, [X8 + 0xE0]
	0x03B94F14 CBNZ W9, 0x3B94F24
	0x03B94F18 MOV X0, X8
	0x03B94F1C BL 0x1C16DFC
	0x03B94F20 LDR X8, [X20]
	0x03B94F24 LDR X8, [X8 + 0xB8]
	0x03B94F28 STR X19, [X8 + 0x8]
	0x03B94F2C LDP X20, X19, [X31 + 0x10]
	0x03B94F30 LDP X30, X21, [X31], #0x20
	0x03B94F34 RET
	0x03B94F38 RET
	0x03B94F3C B 0x3B94E90
	0x03B94F40 STP X30, X21, [X31 - 0x20]!
	0x03B94F44 STP X20, X19, [X31 + 0x10]
	0x03B94F48 LDR X8, [X2 + 0x8]
	0x03B94F4C STP X1, X2, [X0 + 0x20]
	0x03B94F50 MOV X19, X0
	0x03B94F54 MOV X20, X1
	0x03B94F58 STR X8, [X0 + 0x10]
	0x03B94F5C LDRB W21, [X2 + 0x52]
	0x03B94F60 STR X0, [X0 + 0x40]
	0x03B94F64 MOV X0, X2
	0x03B94F68 BL 0x1C16D84
	0x03B94F6C TBZ X0, 0x0, 0x3B94F84
	0x03B94F70 CMP W21, 0x7

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X23, 0x84F000
	010 Move X24, 0x5C9000
	011 Move W8, [X23+3007]
	012 Move X24, [X24+1688]
	013 Move X19, X3
	014 Move V8, V0
	015 Move X20, X2
	016 Move X21, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x5C9000
	023 Move X0, [X0+1688]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3007], W8
	027 Move X0, [X24]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X22
	033 Move X1, X21
	034 Move X2, X20
	035 Move X3, X19
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move X22, [X31+32]
	039 Move X21, [X31+40]
	040 Move X24, [X31+16]
	041 Move X23, [X31+24]
	042 Move X30, [X31+8]
	043 Move V0, V8
	044 Move V8, [X31+64]

Method: System.Void CalculateProjectileFlightTime(System.Single velocityMagnitude, System.Single gravityAcceleration, System.Single angleRad, System.Single height, System.Single extraFlightTime, out System.Single flightTime)

Disassembly:
	0x03B950A4 MOV X0, X8
	0x03B950A8 BL 0x1C16E04
	0x03B950AC LDR X8, [X29]
	0x03B950B0 STR X0, [X31 + 0x28]
	0x03B950B4 MOV X1, X24
	0x03B950B8 MOV X0, X8
	0x03B950BC BL 0x1C16E04
	0x03B950C0 LDR X8, [X29]
	0x03B950C4 STR X0, [X31 + 0x30]
	0x03B950C8 MOV X1, X23
	0x03B950CC MOV X0, X8
	0x03B950D0 BL 0x1C16E04
	0x03B950D4 LDR X8, [X29]
	0x03B950D8 STR X0, [X31 + 0x38]
	0x03B950DC MOV X1, X20
	0x03B950E0 MOV X0, X8
	0x03B950E4 BL 0x1C16E04
	0x03B950E8 STR X0, [X31 + 0x40]
	0x03B950EC LDR X0, [X31 + 0x8]
	0x03B950F0 ADD X1, X31, 0x10
	0x03B950F4 MOV X2, X22
	0x03B950F8 MOV X3, X21
	0x03B950FC BL 0x1C16CB0
	0x03B95100 LDP X20, X19, [X31 + 0xA0]
	0x03B95104 LDP X22, X21, [X31 + 0x90]
	0x03B95108 LDP X24, X23, [X31 + 0x80]
	0x03B9510C LDP X26, X25, [X31 + 0x70]
	0x03B95110 LDP X28, X27, [X31 + 0x60]
	0x03B95114 LDP X29, X30, [X31 + 0x50]
	0x03B95118 ADD X31, X31, 0xB0
	0x03B9511C RET
	0x03B95120 MOV X0, X1
	0x03B95124 MOV X1, X31
	0x03B95128 B 0x1C16CB4
	0x03B9512C STP X30, X23, [X31 - 0x30]!
	0x03B95130 STP X22, X21, [X31 + 0x10]
	0x03B95134 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x84E000
	011 Move X21, 0x5C8000
	012 Move W8, [X20+3008]
	013 Move X21, [X21+1696]
	014 Move X19, X0
	015 Move V8, V4
	016 Move V9, V3
	017 Move V10, V2
	018 Move V11, V1
	019 Move V12, V0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x5C8000
	025 Move X0, [X0+1696]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+3008], W8
	029 Move X0, [X21]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move V1, V11
	035 Move V2, V10
	036 Move V3, V9
	037 Move V4, V8
	038 Move X0, X19
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X30, [X31+48]
	042 Move X21, [X31+56]
	043 Move D9, [X31+32]
	044 Move D8, [X31+40]
	045 Move D11, [X31+16]
	046 Move D10, [X31+24]
	047 Move V0, V12
	048 Move V12, [X31+80]

Method: System.Void SampleQuadraticBezierPoint$BurstManaged(in Unity.Mathematics.float3 p0, in Unity.Mathematics.float3 p1, in Unity.Mathematics.float3 p2, System.Single t, out Unity.Mathematics.float3 point)

Disassembly:
	0x03B952B0 ADRP X19, 0x5C7000
	0x03B952B4 ADRP X20, 0x586000
	0x03B952B8 LDRB W8, [X21 + 0xBCE]
	0x03B952BC LDR X19, [X19 + 0x6E8]
	0x03B952C0 LDR X20, [X20 + 0x848]
	0x03B952C4 TBNZ X8, 0x0, 0x3B952F4
	0x03B952C8 ADRP X0, 0x586000
	0x03B952CC LDR X0, [X0 + 0x848]
	0x03B952D0 BL 0x1C16CF4
	0x03B952D4 ADRP X0, 0x5C7000
	0x03B952D8 LDR X0, [X0 + 0x6E8]
	0x03B952DC BL 0x1C16CF4
	0x03B952E0 ADRP X0, 0x5C7000
	0x03B952E4 LDR X0, [X0 + 0x688]
	0x03B952E8 BL 0x1C16CF4
	0x03B952EC MOVZ W8, 0x1
	0x03B952F0 STRB W8, [X21 + 0xBCE]
	0x03B952F4 LDR X0, [X20]
	0x03B952F8 ADRP X20, 0x5C7000
	0x03B952FC LDR X19, [X19]
	0x03B95300 LDR W8, [X0 + 0xE0]
	0x03B95304 LDR X20, [X20 + 0x688]
	0x03B95308 CBNZ W8, 0x3B95310
	0x03B9530C BL 0x1C16DFC
	0x03B95310 MOV X0, X19

ISIL:
	001 Move V2, [X0]
	002 Move V3, [X0+8]
	003 Move S1, 1
	004 Subtract S1, S1, S0
	005 Move V4, [X1]
	006 Move V5, [X1+8]
	007 Multiply S7, S1, S1
	008 Move V6, [X2]
	009 NotImplemented "Instruction INVALID not yet implemented."
	010 Multiply S3, S7, S3
	011 Move V7, [X2+8]
	012 Add S1, S1, S1
	013 Multiply S1, S1, S0
	014 NotImplemented "Instruction INVALID not yet implemented."
	015 Multiply S1, S1, S5
	016 Multiply S0, S0, S0
	017 NotImplemented "Instruction INVALID not yet implemented."
	018 Multiply S0, S0, S7
	019 Add V2, V2, V4
	020 Add S1, S3, S1
	021 Add V2, V2, V5
	022 Add S0, S1, S0
	023 Move [X3], D2
	024 Move [X3+8], S0
	025 Return 

Method: System.Void SampleCubicBezierPoint$BurstManaged(in Unity.Mathematics.float3 p0, in Unity.Mathematics.float3 p1, in Unity.Mathematics.float3 p2, in Unity.Mathematics.float3 p3, System.Single t, out Unity.Mathematics.float3 point)

Disassembly:
	0x03B95314 MOV X1, X31
	0x03B95318 BL 0x36FA754
	0x03B9531C LDR X8, [X20]
	0x03B95320 MOV X19, X0
	0x03B95324 LDR W9, [X8 + 0xE0]
	0x03B95328 CBNZ W9, 0x3B95338
	0x03B9532C MOV X0, X8
	0x03B95330 BL 0x1C16DFC
	0x03B95334 LDR X8, [X20]
	0x03B95338 LDR X8, [X8 + 0xB8]
	0x03B9533C STR X19, [X8 + 0x8]
	0x03B95340 LDP X20, X19, [X31 + 0x10]
	0x03B95344 LDP X30, X21, [X31], #0x20
	0x03B95348 RET
	0x03B9534C RET
	0x03B95350 B 0x3B952A4
	0x03B95354 STP X30, X21, [X31 - 0x20]!
	0x03B95358 STP X20, X19, [X31 + 0x10]
	0x03B9535C LDR X8, [X2 + 0x8]
	0x03B95360 STP X1, X2, [X0 + 0x20]
	0x03B95364 MOV X19, X0
	0x03B95368 MOV X20, X1
	0x03B9536C STR X8, [X0 + 0x10]
	0x03B95370 LDRB W21, [X2 + 0x52]
	0x03B95374 STR X0, [X0 + 0x40]
	0x03B95378 MOV X0, X2
	0x03B9537C BL 0x1C16D84
	0x03B95380 TBZ X0, 0x0, 0x3B9539C
	0x03B95384 CMP W21, 0x6
	0x03B95388 B.NE 0x3B953A0
	0x03B9538C ADRP X8, 0xFFFFFFFFFE06A000
	0x03B95390 ADD X8, X8, 0x114
	0x03B95394 STR X8, [X19 + 0x18]
	0x03B95398 B 0x3B953B0
	0x03B9539C CBZ X20, 0x3B953C8
	0x03B953A0 LDR X8, [X19 + 0x10]

ISIL:
	001 Move S1, 1
	002 Subtract S1, S1, S0
	003 Move S6, 3
	004 Multiply S16, S1, S1
	005 Move V7, [X2]
	006 Multiply S17, S1, S6
	007 Multiply S1, S1, S16
	008 Multiply S6, S16, S6
	009 Move V16, [X2+8]
	010 Multiply S2, S0, S0
	011 Move V3, [X0]
	012 Move V4, [X0+8]
	013 Multiply S17, S2, S17
	014 Move V5, [X1]
	015 NotImplemented "Instruction INVALID not yet implemented."
	016 Multiply S16, S17, S16
	017 Move V17, [X1+8]
	018 NotImplemented "Instruction INVALID not yet implemented."
	019 Multiply S1, S1, S4
	020 Move V4, [X3]
	021 Multiply S2, S2, S0
	022 Multiply S0, S6, S0
	023 Move V6, [X3+8]
	024 NotImplemented "Instruction INVALID not yet implemented."
	025 Multiply S0, S0, S17
	026 Add V3, V3, V5
	027 Add S0, S1, S0
	028 NotImplemented "Instruction INVALID not yet implemented."
	029 Multiply S2, S2, S6
	030 Add V1, V3, V7
	031 Add S0, S0, S16
	032 Add V1, V1, V4
	033 Add S0, S0, S2
	034 Move [X4], D1
	035 Move [X4+8], S0
	036 Return 

Method: System.Void ElevateQuadraticToCubicBezier$BurstManaged(in Unity.Mathematics.float3 p0, in Unity.Mathematics.float3 p1, in Unity.Mathematics.float3 p2, out Unity.Mathematics.float3 c0, out Unity.Mathematics.float3 c1, out Unity.Mathematics.float3 c2, out Unity.Mathematics.float3 c3)

Disassembly:
	0x03B953A4 LDR X9, [X19 + 0x20]
	0x03B953A8 STR X8, [X19 + 0x18]
	0x03B953AC STR X9, [X19 + 0x40]
	0x03B953B0 ADRP X8, 0xFFFFFFFFFE06A000
	0x03B953B4 ADD X8, X8, 0x8C
	0x03B953B8 STR X8, [X19 + 0x38]
	0x03B953BC LDP X20, X19, [X31 + 0x10]
	0x03B953C0 LDP X30, X21, [X31], #0x20
	0x03B953C4 RET
	0x03B953C8 ADRP X1, 0xFFFFFFFFFCF86000
	0x03B953CC ADD X1, X1, 0xEE3
	0x03B953D0 MOV X0, X31
	0x03B953D4 BL 0x1C16F3C
	0x03B953D8 MOV X1, X31
	0x03B953DC BL 0x1C16DEC
	0x03B953E0 LDR X8, [X0 + 0x40]
	0x03B953E4 LDR X7, [X0 + 0x18]
	0x03B953E8 LDR X6, [X0 + 0x28]
	0x03B953EC MOV X0, X8
	0x03B953F0 BR X7
	0x03B953F4 SUB X31, X31, 0xA0
	0x03B953F8 STP X29, X30, [X31 + 0x40]
	0x03B953FC STP X28, X27, [X31 + 0x50]
	0x03B95400 STP X26, X25, [X31 + 0x60]
	0x03B95404 STP X24, X23, [X31 + 0x70]
	0x03B95408 STP X22, X21, [X31 + 0x80]
	0x03B9540C STP X20, X19, [X31 + 0x90]
	0x03B95410 STR W1, [X31 + 0x3C]
	0x03B95414 STR S0, [X31 + 0x38]
	0x03B95418 ADRP X26, 0x84D000
	0x03B9541C ADRP X29, 0x55E000
	0x03B95420 ADRP X28, 0x55E000
	0x03B95424 ADRP X27, 0x589000
	0x03B95428 LDRB W8, [X26 + 0xBD0]
	0x03B9542C LDR X29, [X29 + 0x758]
	0x03B95430 LDR X28, [X28 + 0xA90]
	0x03B95434 LDR X27, [X27 + 0x838]
	0x03B95438 MOV X19, X7

ISIL:
	001 Move W8, [X0+8]
	002 Move X9, [X0]
	003 Move [X3+8], W8
	004 Move [X3], X9
	005 Move X9, -51032064
	006 Move V0, [X0]
	007 Move V1, [X0+8]
	008 Move V2, [X1]
	009 Move V3, [X1+8]
	010 Move V5, [X9+4020]
	011 Move W8, 0xAAAB
	012 NotImplemented "Instruction MOVK not yet implemented."
	013 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	014 Subtract V2, V2, V0
	015 Subtract S3, S3, S1
	016 NotImplemented "Instruction INVALID not yet implemented."
	017 Multiply S3, S3, S5
	018 Add V0, V0, V2
	019 Add S1, S1, S3
	020 Move [X4], D0
	021 Move [X4+8], S1
	022 Move V0, [X2]
	023 Move V1, [X2+8]
	024 Move V2, [X1]
	025 Move V3, [X1+8]
	026 Subtract V2, V2, V0
	027 Subtract S3, S3, S1
	028 NotImplemented "Instruction INVALID not yet implemented."
	029 Multiply S3, S3, S5
	030 Add V0, V0, V2
	031 Add S1, S1, S3
	032 Move [X5], D0
	033 Move [X5+8], S1
	034 Move W8, [X2+8]
	035 Move X9, [X2]
	036 Move [X6+8], W8
	037 Move [X6], X9
	038 Return 

Method: System.Void GenerateCubicBezierCurve$BurstManaged(System.Int32 numTargetPoints, System.Single curveRatio, in Unity.Mathematics.float3 lineOrigin, in Unity.Mathematics.float3 lineDirection, in Unity.Mathematics.float3 endPoint, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float3> targetPoints)

Disassembly:
	0x03B9543C MOV X20, X6
	0x03B95440 MOV X22, X5
	0x03B95444 MOV X23, X4
	0x03B95448 MOV X24, X3
	0x03B9544C MOV X25, X2
	0x03B95450 MOV X21, X0
	0x03B95454 TBNZ X8, 0x0, 0x3B95490
	0x03B95458 ADRP X0, 0x55E000
	0x03B9545C LDR X0, [X0 + 0x758]
	0x03B95460 BL 0x1C16CF4
	0x03B95464 ADRP X0, 0x5C5000
	0x03B95468 LDR X0, [X0 + 0xAB8]
	0x03B9546C BL 0x1C16CF4
	0x03B95470 ADRP X0, 0x55E000
	0x03B95474 LDR X0, [X0 + 0xA90]
	0x03B95478 BL 0x1C16CF4
	0x03B9547C ADRP X0, 0x589000
	0x03B95480 LDR X0, [X0 + 0x838]
	0x03B95484 BL 0x1C16CF4
	0x03B95488 MOVZ W8, 0x1
	0x03B9548C STRB W8, [X26 + 0xBD0]
	0x03B95490 LDR X0, [X29]
	0x03B95494 MOVI V0.2D, 0x0
	0x03B95498 ADD X1, X31, 0x3C
	0x03B9549C STR X31, [X31 + 0x30]
	0x03B954A0 STP V0, V0, [X31 + 0x10]
	0x03B954A4 STR V0, [X31]
	0x03B954A8 BL 0x1C16E04
	0x03B954AC LDR X8, [X28]
	0x03B954B0 STR X0, [X31]
	0x03B954B4 ADD X1, X31, 0x38
	0x03B954B8 MOV X0, X8
	0x03B954BC BL 0x1C16E04
	0x03B954C0 LDR X8, [X27]
	0x03B954C4 STR X0, [X31 + 0x8]
	0x03B954C8 MOV X1, X25
	0x03B954CC MOV X0, X8
	0x03B954D0 BL 0x1C16E04
	0x03B954D4 LDR X8, [X27]
	0x03B954D8 STR X0, [X31 + 0x10]
	0x03B954DC MOV X1, X24
	0x03B954E0 MOV X0, X8
	0x03B954E4 BL 0x1C16E04
	0x03B954E8 LDR X8, [X27]
	0x03B954EC STR X0, [X31 + 0x18]
	0x03B954F0 MOV X1, X23
	0x03B954F4 MOV X0, X8
	0x03B954F8 BL 0x1C16E04
	0x03B954FC ADRP X8, 0x5C5000
	0x03B95500 LDR X8, [X8 + 0xAB8]
	0x03B95504 STR X0, [X31 + 0x20]
	0x03B95508 MOV X1, X22
	0x03B9550C LDR X8, [X8]
	0x03B95510 MOV X0, X8
	0x03B95514 BL 0x1C16E04
	0x03B95518 STR X0, [X31 + 0x28]
	0x03B9551C ADD X1, X31, 0x0
	0x03B95520 MOV X0, X21
	0x03B95524 MOV X2, X20
	0x03B95528 MOV X3, X19
	0x03B9552C BL 0x1C16CB0
	0x03B95530 LDP X20, X19, [X31 + 0x90]
	0x03B95534 LDP X22, X21, [X31 + 0x80]
	0x03B95538 LDP X24, X23, [X31 + 0x70]
	0x03B9553C LDP X26, X25, [X31 + 0x60]
	0x03B95540 LDP X28, X27, [X31 + 0x50]
	0x03B95544 LDP X29, X30, [X31 + 0x40]
	0x03B95548 ADD X31, X31, 0xA0
	0x03B9554C RET
	0x03B95550 MOV X0, X1
	0x03B95554 MOV X1, X31
	0x03B95558 B 0x1C16CB4
	0x03B9555C STP X30, X23, [X31 - 0x30]!
	0x03B95560 STP X22, X21, [X31 + 0x10]
	0x03B95564 STP X20, X19, [X31 + 0x20]
	0x03B95568 ADRP X20, 0x84D000
	0x03B9556C ADRP X23, 0x5C7000
	0x03B95570 LDRB W8, [X20 + 0xBD1]
	0x03B95574 LDR X23, [X23 + 0x690]
	0x03B95578 MOV X19, X0
	0x03B9557C TBNZ X8, 0x0, 0x3B955B8
	0x03B95580 ADRP X0, 0x586000
	0x03B95584 LDR X0, [X0 + 0x848]
	0x03B95588 BL 0x1C16CF4
	0x03B9558C ADRP X0, 0x5C7000
	0x03B95590 LDR X0, [X0 + 0x6F0]
	0x03B95594 BL 0x1C16CF4
	0x03B95598 ADRP X0, 0x5C7000
	0x03B9559C LDR X0, [X0 + 0x690]
	0x03B955A0 BL 0x1C16CF4
	0x03B955A4 ADRP X0, 0x5C7000
	0x03B955A8 LDR X0, [X0 + 0x6F8]
	0x03B955AC BL 0x1C16CF4
	0x03B955B0 MOVZ W8, 0x1
	0x03B955B4 STRB W8, [X20 + 0xBD1]
	0x03B955B8 LDR X8, [X23]
	0x03B955BC LDR W9, [X8 + 0xE0]
	0x03B955C0 CBNZ W9, 0x3B955D0
	0x03B955C4 MOV X0, X8
	0x03B955C8 BL 0x1C16DFC
	0x03B955CC LDR X8, [X23]
	0x03B955D0 LDR X9, [X8 + 0xB8]
	0x03B955D4 LDR X10, [X9]
	0x03B955D8 CBNZ X10, 0x3B95648
	0x03B955DC LDR W10, [X8 + 0xE0]
	0x03B955E0 CBNZ W10, 0x3B955F4
	0x03B955E4 MOV X0, X8
	0x03B955E8 BL 0x1C16DFC
	0x03B955EC LDR X8, [X23]
	0x03B955F0 LDR X9, [X8 + 0xB8]
	0x03B955F4 ADRP X8, 0x586000
	0x03B955F8 LDR X20, [X9 + 0x8]
	0x03B955FC LDR X8, [X8 + 0x848]
	0x03B95600 LDR X0, [X8]
	0x03B95604 ADRP X8, 0x5C7000
	0x03B95608 LDR X8, [X8 + 0x6F0]
	0x03B9560C LDR X21, [X8]
	0x03B95610 ADRP X8, 0x5C7000
	0x03B95614 LDR X8, [X8 + 0x6F8]

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+128], D13
	003 Move [X31+136], D12
	004 Move [X31+144], D11
	005 Move [X31+152], D10
	006 Move [X31+160], D9
	007 Move [X31+168], D8
	008 Move [X31+176], X30
	009 Move [X31+192], X24
	010 Move [X31+200], X23
	011 Move [X31+208], X22
	012 Move [X31+216], X21
	013 Move [X31+224], X20
	014 Move [X31+232], X19
	015 Move [X31+104], W31
	016 Move [X31+96], X31
	017 Move [X31+88], W31
	018 Move [X31+80], X31
	019 Move [X31+72], W31
	020 Move [X31+64], X31
	021 Move [X31+56], W31
	022 Move [X31+48], X31
	023 Move [X31+40], W31
	024 Move [X31+32], X31
	025 Move X24, 0x84D000
	026 Move S8, [X3]
	027 Move S9, [X3+4]
	028 Move V10, [X3+8]
	029 Move S11, [X1]
	030 Move S12, [X1+4]
	031 Move W8, [X24+1413]
	032 Move V13, [X1+8]
	033 Move X19, X4
	034 Move X21, X3
	035 Move X23, X2
	036 Move X20, X1
	037 Move W22, W0
	038 Compare W8, 0
	039 JumpIfNotEqual {47}
	040 Move X0, 0x55F000
	041 Move X0, [X0+1448]
	042 Move [X31], V0
	043 Call 0x1C17CF4
	044 Move V0, [X31]
	045 Move W8, 1
	046 Move [X24+1413], W8
	047 Move X8, 0x55F000
	048 Move X8, [X8+1448]
	049 Subtract S11, S8, S11
	050 Subtract S8, S9, S12
	051 Subtract S9, S10, S13
	052 Move X0, [X8]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {59}
	056 Move [X31], V0
	057 Call 0x1C17DFC
	058 Move V0, [X31]
	059 Multiply S1, S11, S11
	060 Multiply S2, S8, S8
	061 Move V4, [X23]
	062 Add S1, S1, S2
	063 Move V2, [X23+8]
	064 Multiply S5, S9, S9
	065 Move V3, [X20]
	066 Add S5, S5, S1
	067 Move V1, [X20+8]
	068 NotImplemented "Instruction FSQRT not yet implemented."
	069 NotImplemented "Instruction INVALID not yet implemented."
	070 Multiply S5, S5, S2
	071 NotImplemented "Instruction INVALID not yet implemented."
	072 Multiply S0, S5, S0
	073 Add V2, V3, V2
	074 Add S0, S1, S0
	075 Add X1, X31, 112
	076 Add X3, X31, 96
	077 Add X4, X31, 80
	078 Add X5, X31, 64
	079 Add X6, X31, 48
	080 Move X0, X20
	081 Move X2, X21
	082 Move [X31+112], D2
	083 Move [X31+120], S0
	084 Call CurveUtility.ElevateQuadraticToCubicBezier, X0, X1, X2, X3, X4, X5, X6
	085 Move W8, [X20+8]
	086 Move X9, [X20]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move [X31+24], W8
	089 Move [X31+16], X9
	090 Move X8, [X19]
	091 Move W9, [X31+24]
	092 Move X10, [X31+16]
	093 Move [X8+8], W9
	094 Move [X8], X10
	095 Subtract W8, W22, 1
	096 Move S0, 1
	097 NotImplemented "Instruction SCVTF not yet implemented."
	098 Move W20, W22
	099 Move W21, 1
	100 NotImplemented "Instruction FDIV not yet implemented."
	101 Move W22, 12
	102 NotImplemented "Instruction SCVTF not yet implemented."
	103 Multiply S0, S8, S0
	104 Add X0, X31, 96
	105 Add X1, X31, 80
	106 Add X2, X31, 64
	107 Add X3, X31, 48
	108 Add X4, X31, 32
	109 Call CurveUtility.SampleCubicBezierPoint, X0, X1, X2, X3, V0, X4
	110 Move X8, [X19]
	111 Move X9, [X31+32]
	112 Move W10, [X31+40]
	113 Add X21, X21, 1
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Add X8, X8, X22
	116 Add X22, X22, 12
	117 Move [X8+8], W10
	118 Move [X8], X9
	119 Move X20, [X31+224]
	120 Move X19, [X31+232]
	121 Move X22, [X31+208]
	122 Move X21, [X31+216]
	123 Move X24, [X31+192]
	124 Move X23, [X31+200]
	125 Move X30, [X31+176]
	126 Move D9, [X31+160]
	127 Move D8, [X31+168]
	128 Move D11, [X31+144]
	129 Move D10, [X31+152]
	130 Move D13, [X31+128]
	131 Move D12, [X31+136]
	132 Add X31, X31, 240
	133 Return 

Method: System.Void SampleProjectilePoint$BurstManaged(in Unity.Mathematics.float3 initialPosition, in Unity.Mathematics.float3 initialVelocity, in Unity.Mathematics.float3 constantAcceleration, System.Single time, out Unity.Mathematics.float3 point)

Disassembly:
	0x03B95618 LDR W9, [X0 + 0xE0]
	0x03B9561C LDR X22, [X8]
	0x03B95620 CBNZ W9, 0x3B95628
	0x03B95624 BL 0x1C16DFC
	0x03B95628 MOV X0, X20
	0x03B9562C MOV X1, X21
	0x03B95630 MOV X2, X22
	0x03B95634 MOV X3, X31
	0x03B95638 BL 0x36FAD70
	0x03B9563C LDR X8, [X23]
	0x03B95640 LDR X9, [X8 + 0xB8]
	0x03B95644 STR X0, [X9]
	0x03B95648 LDR W9, [X8 + 0xE0]
	0x03B9564C CBNZ W9, 0x3B9565C
	0x03B95650 MOV X0, X8
	0x03B95654 BL 0x1C16DFC
	0x03B95658 LDR X8, [X23]
	0x03B9565C LDR X8, [X8 + 0xB8]
	0x03B95660 LDP X22, X21, [X31 + 0x10]
	0x03B95664 LDR X8, [X8]

ISIL:
	001 Move V2, [X1]
	002 Move V3, [X1+8]
	003 Move S6, 0.5
	004 Multiply S6, S0, S6
	005 Move V1, [X0]
	006 Move V4, [X2]
	007 Move V5, [X2+8]
	008 Multiply S6, S6, S0
	009 NotImplemented "Instruction INVALID not yet implemented."
	010 Multiply S0, S3, S0
	011 Move V3, [X0+8]
	012 NotImplemented "Instruction INVALID not yet implemented."
	013 Multiply S5, S6, S5
	014 Add V1, V1, V2
	015 Add S0, S3, S0
	016 Add V1, V1, V4
	017 Add S0, S0, S5
	018 Move [X3], D1
	019 Move [X3+8], S0
	020 Return 

Method: System.Void CalculateProjectileFlightTime$BurstManaged(System.Single velocityMagnitude, System.Single gravityAcceleration, System.Single angleRad, System.Single height, System.Single extraFlightTime, out System.Single flightTime)

Disassembly:
	0x03B95668 STR X8, [X19]
	0x03B9566C LDP X20, X19, [X31 + 0x20]
	0x03B95670 LDP X30, X23, [X31], #0x30
	0x03B95674 RET
	0x03B95678 STR X30, [X31 - 0x20]!
	0x03B9567C STP X20, X19, [X31 + 0x10]
	0x03B95680 ADRP X20, 0x84D000
	0x03B95684 ADRP X19, 0x5C7000
	0x03B95688 LDRB W8, [X20 + 0xBD2]
	0x03B9568C LDR X19, [X19 + 0x690]
	0x03B95690 TBNZ X8, 0x0, 0x3B956A8
	0x03B95694 ADRP X0, 0x5C7000
	0x03B95698 LDR X0, [X0 + 0x690]
	0x03B9569C BL 0x1C16CF4
	0x03B956A0 MOVZ W8, 0x1
	0x03B956A4 STRB W8, [X20 + 0xBD2]
	0x03B956A8 LDR X0, [X19]
	0x03B956AC STR X31, [X31 + 0x8]
	0x03B956B0 LDR W8, [X0 + 0xE0]
	0x03B956B4 CBNZ W8, 0x3B956BC
	0x03B956B8 BL 0x1C16DFC
	0x03B956BC ADD X0, X31, 0x8
	0x03B956C0 BL 0x3B9555C
	0x03B956C4 LDR X0, [X31 + 0x8]
	0x03B956C8 LDP X20, X19, [X31 + 0x10]
	0x03B956CC LDR X30, [X31], #0x20
	0x03B956D0 RET
	0x03B956D4 STP X30, X21, [X31 - 0x20]!
	0x03B956D8 STP X20, X19, [X31 + 0x10]
	0x03B956DC ADRP X21, 0x84D000
	0x03B956E0 ADRP X19, 0x5C7000
	0x03B956E4 ADRP X20, 0x586000
	0x03B956E8 LDRB W8, [X21 + 0xBD3]
	0x03B956EC LDR X19, [X19 + 0x700]
	0x03B956F0 LDR X20, [X20 + 0x848]
	0x03B956F4 TBNZ X8, 0x0, 0x3B95724
	0x03B956F8 ADRP X0, 0x586000
	0x03B956FC LDR X0, [X0 + 0x848]
	0x03B95700 BL 0x1C16CF4
	0x03B95704 ADRP X0, 0x5C7000
	0x03B95708 LDR X0, [X0 + 0x700]
	0x03B9570C BL 0x1C16CF4
	0x03B95710 ADRP X0, 0x5C7000
	0x03B95714 LDR X0, [X0 + 0x690]
	0x03B95718 BL 0x1C16CF4
	0x03B9571C MOVZ W8, 0x1
	0x03B95720 STRB W8, [X21 + 0xBD3]
	0x03B95724 LDR X0, [X20]
	0x03B95728 ADRP X20, 0x5C7000
	0x03B9572C LDR X19, [X19]

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, X0
	011 Move V8, V4
	012 Move V9, V1
	013 Move S10, W31
	014 NotImplemented "Instruction FCMP not yet implemented."
	015 Move S1, W31
	016 Move W8, 0x35800000
	017 NotImplemented "Instruction FABS not yet implemented."
	018 Move S4, W8
	019 NotImplemented "Instruction FCMP not yet implemented."
	020 Multiply S11, S0, S2
	021 Add S0, S11, S11
	022 Move X20, 0x84D000
	023 Move W8, [X20+1413]
	024 Add S0, S9, S9
	025 Multiply S12, S11, S11
	026 Multiply S13, S0, S3
	027 Compare W8, 0
	028 JumpIfNotEqual {34}
	029 Move X0, 0x55F000
	030 Move X0, [X0+1448]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+1413], W8
	034 Move X8, 0x55F000
	035 Move X8, [X8+1448]
	036 Add S12, S12, S13
	037 Move X0, [X8]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 NotImplemented "Instruction FSQRT not yet implemented."
	043 Add S0, S11, S0
	044 NotImplemented "Instruction FDIV not yet implemented."
	045 Add S0, S1, S8
	046 NotImplemented "Instruction FMAXNM not yet implemented."
	047 Move [X19], S0
	048 Move X20, [X31+64]
	049 Move X19, [X31+72]
	050 Move X30, [X31+48]
	051 Move D9, [X31+32]
	052 Move D8, [X31+40]
	053 Move D11, [X31+16]
	054 Move D10, [X31+24]
	055 Move D13, [X31+80]
	056 Move D12, [X31+88]
	057 Return 

