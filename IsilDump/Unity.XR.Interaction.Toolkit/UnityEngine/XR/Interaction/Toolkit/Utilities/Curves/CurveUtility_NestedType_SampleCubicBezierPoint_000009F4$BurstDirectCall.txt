Type: UnityEngine.XR.Interaction.Toolkit.Utilities.Curves.CurveUtility/SampleCubicBezierPoint_000009F4$BurstDirectCall

Method: System.Void GetFunctionPointerDiscard(ref System.IntPtr param_0)

Disassembly:
	0x03B95D18 LDP X24, X23, [X31 + 0x60]
	0x03B95D1C LDR X30, [X31 + 0x50]
	0x03B95D20 ADD X31, X31, 0x90
	0x03B95D24 RET
	0x03B95D28 MOV X0, X1
	0x03B95D2C MOV X1, X31
	0x03B95D30 B 0x1C16CB4
	0x03B95D34 STP X30, X23, [X31 - 0x30]!
	0x03B95D38 STP X22, X21, [X31 + 0x10]
	0x03B95D3C STP X20, X19, [X31 + 0x20]
	0x03B95D40 ADRP X20, 0x84D000
	0x03B95D44 ADRP X23, 0x5C7000
	0x03B95D48 LDRB W8, [X20 + 0xBDB]
	0x03B95D4C LDR X23, [X23 + 0x6A0]
	0x03B95D50 MOV X19, X0
	0x03B95D54 TBNZ X8, 0x0, 0x3B95D90
	0x03B95D58 ADRP X0, 0x586000
	0x03B95D5C LDR X0, [X0 + 0x848]
	0x03B95D60 BL 0x1C16CF4
	0x03B95D64 ADRP X0, 0x5C7000
	0x03B95D68 LDR X0, [X0 + 0x6A0]
	0x03B95D6C BL 0x1C16CF4
	0x03B95D70 ADRP X0, 0x5C7000
	0x03B95D74 LDR X0, [X0 + 0x720]
	0x03B95D78 BL 0x1C16CF4
	0x03B95D7C ADRP X0, 0x5C7000
	0x03B95D80 LDR X0, [X0 + 0x728]
	0x03B95D84 BL 0x1C16CF4
	0x03B95D88 MOVZ W8, 0x1
	0x03B95D8C STRB W8, [X20 + 0xBDB]
	0x03B95D90 LDR X8, [X23]
	0x03B95D94 LDR W9, [X8 + 0xE0]
	0x03B95D98 CBNZ W9, 0x3B95DA8
	0x03B95D9C MOV X0, X8
	0x03B95DA0 BL 0x1C16DFC
	0x03B95DA4 LDR X8, [X23]
	0x03B95DA8 LDR X9, [X8 + 0xB8]
	0x03B95DAC LDR X10, [X9]
	0x03B95DB0 CBNZ X10, 0x3B95E20
	0x03B95DB4 LDR W10, [X8 + 0xE0]
	0x03B95DB8 CBNZ W10, 0x3B95DCC
	0x03B95DBC MOV X0, X8
	0x03B95DC0 BL 0x1C16DFC
	0x03B95DC4 LDR X8, [X23]
	0x03B95DC8 LDR X9, [X8 + 0xB8]
	0x03B95DCC ADRP X8, 0x586000
	0x03B95DD0 LDR X20, [X9 + 0x8]
	0x03B95DD4 LDR X8, [X8 + 0x848]
	0x03B95DD8 LDR X0, [X8]
	0x03B95DDC ADRP X8, 0x5C7000
	0x03B95DE0 LDR X8, [X8 + 0x728]
	0x03B95DE4 LDR X21, [X8]
	0x03B95DE8 ADRP X8, 0x5C7000
	0x03B95DEC LDR X8, [X8 + 0x720]
	0x03B95DF0 LDR W9, [X0 + 0xE0]
	0x03B95DF4 LDR X22, [X8]
	0x03B95DF8 CBNZ W9, 0x3B95E00
	0x03B95DFC BL 0x1C16DFC
	0x03B95E00 MOV X0, X20
	0x03B95E04 MOV X1, X21
	0x03B95E08 MOV X2, X22
	0x03B95E0C MOV X3, X31
	0x03B95E10 BL 0x36FAD70
	0x03B95E14 LDR X8, [X23]
	0x03B95E18 LDR X9, [X8 + 0xB8]
	0x03B95E1C STR X0, [X9]
	0x03B95E20 LDR W9, [X8 + 0xE0]
	0x03B95E24 CBNZ W9, 0x3B95E34
	0x03B95E28 MOV X0, X8
	0x03B95E2C BL 0x1C16DFC
	0x03B95E30 LDR X8, [X23]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x84E000
	008 Move X23, 0x5C8000
	009 Move W8, [X20+3015]
	010 Move X23, [X23+1664]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x587000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0x5C8000
	020 Move X0, [X0+1728]
	021 Call 0x1C17CF4
	022 Move X0, 0x5C8000
	023 Move X0, [X0+1664]
	024 Call 0x1C17CF4
	025 Move X0, 0x5C8000
	026 Move X0, [X0+1736]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+3015], W8
	030 Move X8, [X23]
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X23]
	037 Move X9, [X8+184]
	038 Move X10, [X9]
	039 Compare X10, 0
	040 JumpIfNotEqual {70}
	041 Move W10, [X8+224]
	042 Compare W10, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X23]
	047 Move X9, [X8+184]
	048 Move X8, 0x587000
	049 Move X20, [X9+8]
	050 Move X8, [X8+2120]
	051 Move X0, [X8]
	052 Move X8, 0x5C8000
	053 Move X8, [X8+1728]
	054 Move X21, [X8]
	055 Move X8, 0x5C8000
	056 Move X8, [X8+1736]
	057 Move W9, [X0+224]
	058 Move X22, [X8]
	059 Compare W9, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X22
	065 Move X3, X31
	066 Call BurstCompiler.GetILPPMethodFunctionPointer2, X0, X1, X2
	067 Move X8, [X23]
	068 Move X9, [X8+184]
	069 Move [X9], X0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {76}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, [X23]
	076 Move X8, [X8+184]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X8, [X8]
	080 Move [X19], X8
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 

Method: System.IntPtr GetFunctionPointer()

Disassembly:
	0x03B95E34 LDR X8, [X8 + 0xB8]
	0x03B95E38 LDP X22, X21, [X31 + 0x10]
	0x03B95E3C LDR X8, [X8]
	0x03B95E40 STR X8, [X19]
	0x03B95E44 LDP X20, X19, [X31 + 0x20]
	0x03B95E48 LDP X30, X23, [X31], #0x30
	0x03B95E4C RET
	0x03B95E50 STR X30, [X31 - 0x20]!
	0x03B95E54 STP X20, X19, [X31 + 0x10]
	0x03B95E58 ADRP X20, 0x84D000
	0x03B95E5C ADRP X19, 0x5C7000
	0x03B95E60 LDRB W8, [X20 + 0xBDC]
	0x03B95E64 LDR X19, [X19 + 0x6A0]
	0x03B95E68 TBNZ X8, 0x0, 0x3B95E80
	0x03B95E6C ADRP X0, 0x5C7000
	0x03B95E70 LDR X0, [X0 + 0x6A0]
	0x03B95E74 BL 0x1C16CF4
	0x03B95E78 MOVZ W8, 0x1
	0x03B95E7C STRB W8, [X20 + 0xBDC]
	0x03B95E80 LDR X0, [X19]
	0x03B95E84 STR X31, [X31 + 0x8]
	0x03B95E88 LDR W8, [X0 + 0xE0]
	0x03B95E8C CBNZ W8, 0x3B95E94

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x84E000
	005 Move X19, 0x5C8000
	006 Move W8, [X20+3016]
	007 Move X19, [X19+1664]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5C8000
	013 Move X0, [X0+1664]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3016], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 8
	024 Call SampleCubicBezierPoint_000009F4$BurstDirectCall.GetFunctionPointerDiscard, X0
	025 Move X0, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void Constructor()

Disassembly:
	0x03B95E90 BL 0x1C16DFC
	0x03B95E94 ADD X0, X31, 0x8
	0x03B95E98 BL 0x3B95D34
	0x03B95E9C LDR X0, [X31 + 0x8]
	0x03B95EA0 LDP X20, X19, [X31 + 0x10]
	0x03B95EA4 LDR X30, [X31], #0x20
	0x03B95EA8 RET
	0x03B95EAC STP X30, X21, [X31 - 0x20]!
	0x03B95EB0 STP X20, X19, [X31 + 0x10]
	0x03B95EB4 ADRP X21, 0x84D000
	0x03B95EB8 ADRP X19, 0x5C7000
	0x03B95EBC ADRP X20, 0x586000
	0x03B95EC0 LDRB W8, [X21 + 0xBDD]
	0x03B95EC4 LDR X19, [X19 + 0x730]
	0x03B95EC8 LDR X20, [X20 + 0x848]
	0x03B95ECC TBNZ X8, 0x0, 0x3B95EFC
	0x03B95ED0 ADRP X0, 0x586000
	0x03B95ED4 LDR X0, [X0 + 0x848]
	0x03B95ED8 BL 0x1C16CF4
	0x03B95EDC ADRP X0, 0x5C7000
	0x03B95EE0 LDR X0, [X0 + 0x6A0]
	0x03B95EE4 BL 0x1C16CF4
	0x03B95EE8 ADRP X0, 0x5C7000
	0x03B95EEC LDR X0, [X0 + 0x730]
	0x03B95EF0 BL 0x1C16CF4
	0x03B95EF4 MOVZ W8, 0x1
	0x03B95EF8 STRB W8, [X21 + 0xBDD]
	0x03B95EFC LDR X0, [X20]
	0x03B95F00 ADRP X20, 0x5C7000
	0x03B95F04 LDR X19, [X19]
	0x03B95F08 LDR W8, [X0 + 0xE0]
	0x03B95F0C LDR X20, [X20 + 0x6A0]
	0x03B95F10 CBNZ W8, 0x3B95F18
	0x03B95F14 BL 0x1C16DFC
	0x03B95F18 MOV X0, X19
	0x03B95F1C MOV X1, X31
	0x03B95F20 BL 0x36FA754
	0x03B95F24 LDR X8, [X20]
	0x03B95F28 MOV X19, X0
	0x03B95F2C LDR W9, [X8 + 0xE0]
	0x03B95F30 CBNZ W9, 0x3B95F40
	0x03B95F34 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x84E000
	006 Move X19, 0x5C8000
	007 Move X20, 0x587000
	008 Move W8, [X21+3017]
	009 Move X19, [X19+1744]
	010 Move X20, [X20+2120]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x587000
	016 Move X0, [X0+2120]
	017 Call 0x1C17CF4
	018 Move X0, 0x5C8000
	019 Move X0, [X0+1744]
	020 Call 0x1C17CF4
	021 Move X0, 0x5C8000
	022 Move X0, [X0+1664]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3017], W8
	026 Move X0, [X20]
	027 Move X20, 0x5C8000
	028 Move X19, [X19]
	029 Move W8, [X0+224]
	030 Move X20, [X20+1664]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call BurstCompiler.CompileILPPMethod2, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move [X8+8], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void Initialize()

Disassembly:
	0x03B95F38 BL 0x1C16DFC

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B95F3C LDR X8, [X20]

ISIL:
	001 Call SampleCubicBezierPoint_000009F4$BurstDirectCall.Constructor
	002 Return 

Method: System.Void Invoke(in Unity.Mathematics.float3 p0, in Unity.Mathematics.float3 p1, in Unity.Mathematics.float3 p2, in Unity.Mathematics.float3 p3, System.Single t, out Unity.Mathematics.float3 point)

Disassembly:
	0x03B949BC LDR X8, [X8 + 0x6B0]
	0x03B949C0 LDR W9, [X0 + 0xE0]
	0x03B949C4 LDR X22, [X8]
	0x03B949C8 CBNZ W9, 0x3B949D0
	0x03B949CC BL 0x1C16DFC
	0x03B949D0 MOV X0, X20
	0x03B949D4 MOV X1, X21
	0x03B949D8 MOV X2, X22
	0x03B949DC MOV X3, X31
	0x03B949E0 BL 0x36FAD70
	0x03B949E4 LDR X8, [X23]
	0x03B949E8 LDR X9, [X8 + 0xB8]
	0x03B949EC STR X0, [X9]
	0x03B949F0 LDR W9, [X8 + 0xE0]
	0x03B949F4 CBNZ W9, 0x3B94A04
	0x03B949F8 MOV X0, X8
	0x03B949FC BL 0x1C16DFC
	0x03B94A00 LDR X8, [X23]
	0x03B94A04 LDR X8, [X8 + 0xB8]
	0x03B94A08 LDP X22, X21, [X31 + 0x10]
	0x03B94A0C LDR X8, [X8]
	0x03B94A10 STR X8, [X19]
	0x03B94A14 LDP X20, X19, [X31 + 0x20]
	0x03B94A18 LDP X30, X23, [X31], #0x30
	0x03B94A1C RET
	0x03B94A20 STR X30, [X31 - 0x20]!
	0x03B94A24 STP X20, X19, [X31 + 0x10]
	0x03B94A28 ADRP X20, 0x84E000
	0x03B94A2C ADRP X19, 0x5C8000
	0x03B94A30 LDRB W8, [X20 + 0xBC3]
	0x03B94A34 LDR X19, [X19 + 0x678]
	0x03B94A38 TBNZ X8, 0x0, 0x3B94A50
	0x03B94A3C ADRP X0, 0x5C8000
	0x03B94A40 LDR X0, [X0 + 0x678]
	0x03B94A44 BL 0x1C16CF4
	0x03B94A48 MOVZ W8, 0x1
	0x03B94A4C STRB W8, [X20 + 0xBC3]
	0x03B94A50 LDR X0, [X19]
	0x03B94A54 STR X31, [X31 + 0x8]
	0x03B94A58 LDR W8, [X0 + 0xE0]
	0x03B94A5C CBNZ W8, 0x3B94A64
	0x03B94A60 BL 0x1C16DFC
	0x03B94A64 ADD X0, X31, 0x8
	0x03B94A68 BL 0x3B94904
	0x03B94A6C LDR X0, [X31 + 0x8]
	0x03B94A70 LDP X20, X19, [X31 + 0x10]
	0x03B94A74 LDR X30, [X31], #0x20
	0x03B94A78 RET
	0x03B94A7C STP X30, X21, [X31 - 0x20]!
	0x03B94A80 STP X20, X19, [X31 + 0x10]
	0x03B94A84 ADRP X21, 0x84E000
	0x03B94A88 ADRP X19, 0x5C8000
	0x03B94A8C ADRP X20, 0x587000
	0x03B94A90 LDRB W8, [X21 + 0xBC4]
	0x03B94A94 LDR X19, [X19 + 0x6B8]
	0x03B94A98 LDR X20, [X20 + 0x848]
	0x03B94A9C TBNZ X8, 0x0, 0x3B94ACC
	0x03B94AA0 ADRP X0, 0x587000
	0x03B94AA4 LDR X0, [X0 + 0x848]
	0x03B94AA8 BL 0x1C16CF4
	0x03B94AAC ADRP X0, 0x5C8000
	0x03B94AB0 LDR X0, [X0 + 0x6B8]
	0x03B94AB4 BL 0x1C16CF4
	0x03B94AB8 ADRP X0, 0x5C8000
	0x03B94ABC LDR X0, [X0 + 0x678]
	0x03B94AC0 BL 0x1C16CF4
	0x03B94AC4 MOVZ W8, 0x1
	0x03B94AC8 STRB W8, [X21 + 0xBC4]
	0x03B94ACC LDR X0, [X20]
	0x03B94AD0 ADRP X20, 0x5C8000
	0x03B94AD4 LDR X19, [X19]
	0x03B94AD8 LDR W8, [X0 + 0xE0]
	0x03B94ADC LDR X20, [X20 + 0x678]
	0x03B94AE0 CBNZ W8, 0x3B94AE8
	0x03B94AE4 BL 0x1C16DFC
	0x03B94AE8 MOV X0, X19
	0x03B94AEC MOV X1, X31
	0x03B94AF0 BL 0x36FA754
	0x03B94AF4 LDR X8, [X20]
	0x03B94AF8 MOV X19, X0
	0x03B94AFC LDR W9, [X8 + 0xE0]
	0x03B94B00 CBNZ W9, 0x3B94B10
	0x03B94B04 MOV X0, X8
	0x03B94B08 BL 0x1C16DFC
	0x03B94B0C LDR X8, [X20]
	0x03B94B10 LDR X8, [X8 + 0xB8]
	0x03B94B14 STR X19, [X8 + 0x8]
	0x03B94B18 LDP X20, X19, [X31 + 0x10]
	0x03B94B1C LDP X30, X21, [X31], #0x20
	0x03B94B20 RET
	0x03B94B24 RET
	0x03B94B28 B 0x3B94A7C
	0x03B94B2C STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-80], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0x84F000
	011 Move X25, 0x588000
	012 Move W8, [X24+3018]
	013 Move X25, [X25+2120]
	014 Move X19, X4
	015 Move V8, V0
	016 Move X20, X3
	017 Move X22, X2
	018 Move X21, X1
	019 Move X23, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0x588000
	025 Move X0, [X0+2120]
	026 Call 0x1C17CF4
	027 Move X0, 0x5C9000
	028 Move X0, [X0+1664]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X24+3018], W8
	032 Move X0, [X25]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X31
	038 Call BurstCompiler.get_IsEnabled
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {70}
	043 Move X8, 0x5C9000
	044 Move X8, [X8+1664]
	045 Move X0, [X8]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Call SampleCubicBezierPoint_000009F4$BurstDirectCall.GetFunctionPointer
	051 Compare X0, 0
	052 JumpIfEqual {70}
	053 Move X5, X0
	054 Move X0, X23
	055 Move X1, X21
	056 Move X2, X22
	057 Move X3, X20
	058 Move X4, X19
	059 Move X20, [X31+64]
	060 Move X19, [X31+72]
	061 Move X22, [X31+48]
	062 Move X21, [X31+56]
	063 Move X24, [X31+32]
	064 Move X23, [X31+40]
	065 Move X30, [X31+16]
	066 Move X25, [X31+24]
	067 Move V0, V8
	068 Move V8, [X31+80]
	069 CallNoReturn X5
	070 Move S0, 1
	071 Subtract S0, S0, S8
	072 Move S5, 3
	073 Multiply S7, S0, S0
	074 Move V6, [X22]
	075 Multiply S16, S0, S5
	076 Multiply S0, S0, S7
	077 Multiply S5, S7, S5
	078 Move V7, [X22+8]
	079 Multiply S1, S8, S8
	080 Move V2, [X23]
	081 Move V3, [X23+8]
	082 Multiply S16, S1, S16
	083 Move V4, [X21]
	084 NotImplemented "Instruction INVALID not yet implemented."
	085 Multiply S7, S16, S7
	086 Move V16, [X21+8]
	087 NotImplemented "Instruction INVALID not yet implemented."
	088 Multiply S0, S0, S3
	089 Move V3, [X20]
	090 Move V17, [X20+8]
	091 Multiply S5, S5, S8
	092 NotImplemented "Instruction INVALID not yet implemented."
	093 Multiply S5, S5, S16
	094 Multiply S1, S1, S8
	095 Add V2, V2, V4
	096 Add S0, S0, S5
	097 NotImplemented "Instruction INVALID not yet implemented."
	098 Multiply S1, S1, S17
	099 Add V2, V2, V6
	100 Add S0, S0, S7
	101 Add V2, V2, V3
	102 Add S0, S0, S1
	103 Move [X19], D2
	104 Move [X19+8], S0
	105 Move X20, [X31+64]
	106 Move X19, [X31+72]
	107 Move X22, [X31+48]
	108 Move X21, [X31+56]
	109 Move X24, [X31+32]
	110 Move X23, [X31+40]
	111 Move X30, [X31+16]
	112 Move X25, [X31+24]
	113 Move V8, [X31+80]
	114 Return 

