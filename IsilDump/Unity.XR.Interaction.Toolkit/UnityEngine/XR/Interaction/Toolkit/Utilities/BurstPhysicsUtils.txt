Type: UnityEngine.XR.Interaction.Toolkit.Utilities.BurstPhysicsUtils

Method: System.Void GetSphereOverlapParameters(in UnityEngine.Vector3 overlapStart, in UnityEngine.Vector3 overlapEnd, out UnityEngine.Vector3 normalizedOverlapVector, out System.Single overlapSqrMagnitude, out System.Single overlapDistance)

Disassembly:
	0x03B8D3C0 TBZ X0, 0x0, 0x3B8D3D8
	0x03B8D3C4 CMP W21, 0x4
	0x03B8D3C8 B.NE 0x3B8D3F4
	0x03B8D3CC ADRP X8, 0xFFFFFFFFFE071000
	0x03B8D3D0 ADD X8, X8, 0xAE4
	0x03B8D3D4 B 0x3B8D3E8
	0x03B8D3D8 CMP W21, 0x3
	0x03B8D3DC B.NE 0x3B8D3F0
	0x03B8D3E0 ADRP X8, 0xFFFFFFFFFE071000
	0x03B8D3E4 ADD X8, X8, 0xAC8
	0x03B8D3E8 STR X8, [X19 + 0x18]
	0x03B8D3EC B 0x3B8D404
	0x03B8D3F0 CBZ X20, 0x3B8D41C
	0x03B8D3F4 LDR X8, [X19 + 0x10]
	0x03B8D3F8 LDR X9, [X19 + 0x20]
	0x03B8D3FC STR X8, [X19 + 0x18]
	0x03B8D400 STR X9, [X19 + 0x40]
	0x03B8D404 ADRP X8, 0xFFFFFFFFFE071000
	0x03B8D408 ADD X8, X8, 0xA58
	0x03B8D40C STR X8, [X19 + 0x38]
	0x03B8D410 LDP X20, X19, [X31 + 0x10]
	0x03B8D414 LDP X30, X21, [X31], #0x20
	0x03B8D418 RET
	0x03B8D41C ADRP X1, 0xFFFFFFFFFCF8E000
	0x03B8D420 ADD X1, X1, 0xEE3
	0x03B8D424 MOV X0, X31
	0x03B8D428 BL 0x1C16F3C
	0x03B8D42C MOV X1, X31
	0x03B8D430 BL 0x1C16DEC
	0x03B8D434 LDR X8, [X0 + 0x40]
	0x03B8D438 LDR X6, [X0 + 0x18]
	0x03B8D43C LDR X5, [X0 + 0x28]
	0x03B8D440 MOV X0, X8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x856000
	010 Move X25, 0x5D0000
	011 Move W8, [X24+2910]
	012 Move X25, [X25+648]
	013 Move X19, X4
	014 Move X20, X3
	015 Move X21, X2
	016 Move X22, X1
	017 Move X23, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x5D0000
	023 Move X0, [X0+648]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+2910], W8
	027 Move X0, [X25]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X23
	033 Move X1, X22
	034 Move X2, X21
	035 Move X3, X20
	036 Move X4, X19
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X22, [X31+32]
	040 Move X21, [X31+40]
	041 Move X24, [X31+16]
	042 Move X23, [X31+24]
	043 Move X30, [X31+64]
	044 Move X25, [X31+72]

Method: System.Void GetConecastParameters(System.Single angleRadius, System.Single offset, System.Single maxOffset, in UnityEngine.Vector3 direction, out UnityEngine.Vector3 originOffset, out System.Single radius, out System.Single castMax)

Disassembly:
	0x03B8D530 LDP X28, X27, [X31 + 0x40]
	0x03B8D534 LDR X30, [X31 + 0x30]
	0x03B8D538 ADD X31, X31, 0x90
	0x03B8D53C RET
	0x03B8D540 MOV X0, X1
	0x03B8D544 MOV X1, X31
	0x03B8D548 B 0x1C16CB4
	0x03B8D54C STP X30, X23, [X31 - 0x30]!
	0x03B8D550 STP X22, X21, [X31 + 0x10]
	0x03B8D554 STP X20, X19, [X31 + 0x20]
	0x03B8D558 ADRP X20, 0x855000
	0x03B8D55C ADRP X23, 0x5CF000
	0x03B8D560 LDRB W8, [X20 + 0xB6C]
	0x03B8D564 LDR X23, [X23 + 0x298]
	0x03B8D568 MOV X19, X0
	0x03B8D56C TBNZ X8, 0x0, 0x3B8D5A8
	0x03B8D570 ADRP X0, 0x58E000
	0x03B8D574 LDR X0, [X0 + 0x848]
	0x03B8D578 BL 0x1C16CF4
	0x03B8D57C ADRP X0, 0x5CF000
	0x03B8D580 LDR X0, [X0 + 0x2D0]
	0x03B8D584 BL 0x1C16CF4
	0x03B8D588 ADRP X0, 0x5CF000
	0x03B8D58C LDR X0, [X0 + 0x298]
	0x03B8D590 BL 0x1C16CF4
	0x03B8D594 ADRP X0, 0x5CF000
	0x03B8D598 LDR X0, [X0 + 0x2D8]
	0x03B8D59C BL 0x1C16CF4
	0x03B8D5A0 MOVZ W8, 0x1
	0x03B8D5A4 STRB W8, [X20 + 0xB6C]
	0x03B8D5A8 LDR X8, [X23]
	0x03B8D5AC LDR W9, [X8 + 0xE0]
	0x03B8D5B0 CBNZ W9, 0x3B8D5C0
	0x03B8D5B4 MOV X0, X8
	0x03B8D5B8 BL 0x1C16DFC
	0x03B8D5BC LDR X8, [X23]
	0x03B8D5C0 LDR X9, [X8 + 0xB8]
	0x03B8D5C4 LDR X10, [X9]
	0x03B8D5C8 CBNZ X10, 0x3B8D638
	0x03B8D5CC LDR W10, [X8 + 0xE0]
	0x03B8D5D0 CBNZ W10, 0x3B8D5E4

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X23, 0x856000
	012 Move X24, 0x5D0000
	013 Move W8, [X23+2911]
	014 Move X24, [X24+656]
	015 Move X19, X3
	016 Move X20, X2
	017 Move X21, X1
	018 Move X22, X0
	019 Move V8, V2
	020 Move V9, V1
	021 Move V10, V0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0x5D0000
	027 Move X0, [X0+656]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+2911], W8
	031 Move X0, [X24]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move V1, V9
	037 Move V2, V8
	038 Move X0, X22
	039 Move X1, X21
	040 Move X2, X20
	041 Move X3, X19
	042 Move X20, [X31+64]
	043 Move X19, [X31+72]
	044 Move X22, [X31+48]
	045 Move X21, [X31+56]
	046 Move X24, [X31+32]
	047 Move X23, [X31+40]
	048 Move X30, [X31+24]
	049 Move D9, [X31+8]
	050 Move D8, [X31+16]
	051 Move V0, V10
	052 Move V10, [X31+80]

Method: System.Void GetConecastOffset(in Unity.Mathematics.float3 origin, in Unity.Mathematics.float3 conePoint, in Unity.Mathematics.float3 direction, out System.Single coneOffset)

Disassembly:
	0x03B8D72C BL 0x1C16DFC
	0x03B8D730 MOV X0, X19
	0x03B8D734 MOV X1, X31
	0x03B8D738 BL 0x36FA754
	0x03B8D73C LDR X8, [X20]
	0x03B8D740 MOV X19, X0
	0x03B8D744 LDR W9, [X8 + 0xE0]
	0x03B8D748 CBNZ W9, 0x3B8D758
	0x03B8D74C MOV X0, X8
	0x03B8D750 BL 0x1C16DFC
	0x03B8D754 LDR X8, [X20]
	0x03B8D758 LDR X8, [X8 + 0xB8]
	0x03B8D75C STR X19, [X8 + 0x8]
	0x03B8D760 LDP X20, X19, [X31 + 0x10]
	0x03B8D764 LDP X30, X21, [X31], #0x20
	0x03B8D768 RET
	0x03B8D76C RET
	0x03B8D770 B 0x3B8D6C4
	0x03B8D774 B 0x3B8D778
	0x03B8D778 STP X30, X21, [X31 - 0x20]!
	0x03B8D77C STP X20, X19, [X31 + 0x10]
	0x03B8D780 ADRP X19, 0x855000
	0x03B8D784 ADRP X20, 0x5CF000
	0x03B8D788 ADRP X21, 0x566000
	0x03B8D78C LDRB W8, [X19 + 0xB70]
	0x03B8D790 LDR X20, [X20 + 0x2E8]
	0x03B8D794 LDR X21, [X21 + 0x598]
	0x03B8D798 TBNZ X8, 0x0, 0x3B8D7E0
	0x03B8D79C ADRP X0, 0x5CF000
	0x03B8D7A0 LDR X0, [X0 + 0x2E8]
	0x03B8D7A4 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x856000
	009 Move X24, 0x5D0000
	010 Move W8, [X23+2912]
	011 Move X24, [X24+664]
	012 Move X19, X3
	013 Move X20, X2
	014 Move X21, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x5D0000
	021 Move X0, [X0+664]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+2912], W8
	025 Move X0, [X24]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X22
	031 Move X1, X21
	032 Move X2, X20
	033 Move X3, X19
	034 Move X20, [X31+48]
	035 Move X19, [X31+56]
	036 Move X22, [X31+32]
	037 Move X21, [X31+40]
	038 Move X24, [X31+16]
	039 Move X23, [X31+24]
	040 Move X30, [X31+64]

Method: System.Void GetSphereOverlapParameters$BurstManaged(in UnityEngine.Vector3 overlapStart, in UnityEngine.Vector3 overlapEnd, out UnityEngine.Vector3 normalizedOverlapVector, out System.Single overlapSqrMagnitude, out System.Single overlapDistance)

Disassembly:
	0x03B8D93C TBZ X0, 0x0, 0x3B8D968
	0x03B8D940 LDR X0, [X22]
	0x03B8D944 LDR W8, [X0 + 0xE0]
	0x03B8D948 CBNZ W8, 0x3B8D950
	0x03B8D94C BL 0x1C16DFC
	0x03B8D950 MOV X0, X19
	0x03B8D954 LDP X20, X19, [X31 + 0x20]
	0x03B8D958 LDP X22, X21, [X31 + 0x10]
	0x03B8D95C MOV X1, X31
	0x03B8D960 LDR X30, [X31], #0x30
	0x03B8D964 B 0x3C394A8
	0x03B8D968 LDR X8, [X21]
	0x03B8D96C LDR X0, [X22]
	0x03B8D970 LDR X8, [X8 + 0xB8]
	0x03B8D974 LDR W9, [X0 + 0xE0]
	0x03B8D978 LDR X20, [X8]
	0x03B8D97C CBNZ W9, 0x3B8D984
	0x03B8D980 BL 0x1C16DFC
	0x03B8D984 MOV X0, X20
	0x03B8D988 MOV X1, X31
	0x03B8D98C MOV X2, X31
	0x03B8D990 BL 0x3C3883C
	0x03B8D994 TBZ X0, 0x0, 0x3B8D9A4
	0x03B8D998 LDR X8, [X21]
	0x03B8D99C LDR X8, [X8 + 0xB8]
	0x03B8D9A0 STR X19, [X8]
	0x03B8D9A4 LDP X20, X19, [X31 + 0x20]
	0x03B8D9A8 LDP X22, X21, [X31 + 0x10]
	0x03B8D9AC LDR X30, [X31], #0x30
	0x03B8D9B0 RET
	0x03B8D9B4 B 0x3B8D9B8
	0x03B8D9B8 STR X30, [X31 - 0x50]!
	0x03B8D9BC STP X26, X25, [X31 + 0x10]
	0x03B8D9C0 STP X24, X23, [X31 + 0x20]
	0x03B8D9C4 STP X22, X21, [X31 + 0x30]
	0x03B8D9C8 STP X20, X19, [X31 + 0x40]
	0x03B8D9CC ADRP X20, 0x855000
	0x03B8D9D0 LDRB W8, [X20 + 0xB72]
	0x03B8D9D4 MOV X19, X0
	0x03B8D9D8 TBNZ X8, 0x0, 0x3B8DA20
	0x03B8D9DC ADRP X0, 0x5CF000
	0x03B8D9E0 LDR X0, [X0 + 0x300]
	0x03B8D9E4 BL 0x1C16CF4
	0x03B8D9E8 ADRP X0, 0x5CF000
	0x03B8D9EC LDR X0, [X0 + 0x308]
	0x03B8D9F0 BL 0x1C16CF4
	0x03B8D9F4 ADRP X0, 0x566000
	0x03B8D9F8 LDR X0, [X0 + 0xE00]
	0x03B8D9FC BL 0x1C16CF4
	0x03B8DA00 ADRP X0, 0x5CF000
	0x03B8DA04 LDR X0, [X0 + 0x310]
	0x03B8DA08 BL 0x1C16CF4
	0x03B8DA0C ADRP X0, 0x5CF000
	0x03B8DA10 LDR X0, [X0 + 0x318]
	0x03B8DA14 BL 0x1C16CF4
	0x03B8DA18 MOVZ W8, 0x1
	0x03B8DA1C STRB W8, [X20 + 0xB72]
	0x03B8DA20 LDR X8, [X19 + 0x20]
	0x03B8DA24 CBZ X8, 0x3B8DB9C
	0x03B8DA28 LDR X20, [X8 + 0x10]
	0x03B8DA2C CBZ X20, 0x3B8DB9C
	0x03B8DA30 ADRP X24, 0x5CF000
	0x03B8DA34 ADRP X25, 0x5CF000
	0x03B8DA38 ADRP X26, 0x566000
	0x03B8DA3C ADRP X23, 0x5CF000
	0x03B8DA40 LDR X24, [X24 + 0x310]
	0x03B8DA44 LDR X25, [X25 + 0x318]
	0x03B8DA48 LDR X26, [X26 + 0xE00]
	0x03B8DA4C LDR X23, [X23 + 0x308]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+80], X22
	010 Move [X31+88], X21
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move V0, [X0]
	014 Move V8, [X0+8]
	015 Move V12, [X1]
	016 Move V13, [X1+8]
	017 Move S1, V0.S[1]
	018 Move V2, V8
	019 Move X0, X31
	020 Move X20, X4
	021 Move X21, X3
	022 Move X19, X2
	023 Move X22, X1
	024 Move [X31], V0
	025 Call float3.op_Implicit, X0
	026 Move V3, [X22+8]
	027 Move V9, V0
	028 Move V10, V1
	029 Move S0, [X22]
	030 Move S1, [X22+4]
	031 Move V11, V2
	032 Move V2, V3
	033 Move X0, X31
	034 Call float3.op_Implicit, X0
	035 Subtract S0, S0, S9
	036 Subtract S1, S1, S10
	037 Subtract S2, S2, S11
	038 Multiply S0, S0, S0
	039 Multiply S1, S1, S1
	040 Multiply S2, S2, S2
	041 Add S0, S0, S1
	042 Add S9, S2, S0
	043 Move [X21], S9
	044 Move X21, 0x855000
	045 Move W8, [X21+1413]
	046 Compare W8, 0
	047 JumpIfNotEqual {53}
	048 Move X0, 0x567000
	049 Move X0, [X0+1448]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X21+1413], W8
	053 Move X8, 0x567000
	054 Move X8, [X8+1448]
	055 Move X0, [X8]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move V1, [X31]
	061 NotImplemented "Instruction FSQRT not yet implemented."
	062 Subtract S0, S13, S8
	063 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	064 Subtract V1, V12, V1
	065 NotImplemented "Instruction FDIV not yet implemented."
	066 NotImplemented "Instruction INVALID not yet implemented."
	067 Move [X20], S2
	068 Move [X19], D1
	069 Move [X19+8], S0
	070 Move X20, [X31+96]
	071 Move X19, [X31+104]
	072 Move X22, [X31+80]
	073 Move X21, [X31+88]
	074 Move X30, [X31+64]
	075 Move D9, [X31+48]
	076 Move D8, [X31+56]
	077 Move D11, [X31+32]
	078 Move D10, [X31+40]
	079 Move D13, [X31+16]
	080 Move D12, [X31+24]
	081 Add X31, X31, 112
	082 Return 

Method: System.Void GetConecastParameters$BurstManaged(System.Single angleRadius, System.Single offset, System.Single maxOffset, in UnityEngine.Vector3 direction, out UnityEngine.Vector3 originOffset, out System.Single radius, out System.Single castMax)

Disassembly:
	0x03B8DA50 MOV W21, W31
	0x03B8DA54 LDR X8, [X20]
	0x03B8DA58 LDR X1, [X24]
	0x03B8DA5C LDRH W9, [X8 + 0x12E]
	0x03B8DA60 CBZ X9, 0x3B8DA84
	0x03B8DA64 LDR X10, [X8 + 0xB0]
	0x03B8DA68 ADD X10, X10, 0x8
	0x03B8DA6C LDUR X11, [X10 - 0x8]
	0x03B8DA70 CMP X11, X1
	0x03B8DA74 B.EQ 0x3B8DA94
	0x03B8DA78 SUBS X9, X9, 0x1
	0x03B8DA7C ADD X10, X10, 0x10
	0x03B8DA80 B.NE 0x3B8DA6C
	0x03B8DA84 MOV X0, X20
	0x03B8DA88 MOV W2, W31
	0x03B8DA8C BL 0x1C5C788
	0x03B8DA90 B 0x3B8DAA0
	0x03B8DA94 LDRSW X9, [X10]
	0x03B8DA98 ADD X8, X8, X9, 0x4, LSL
	0x03B8DA9C ADD X0, X8, 0x138
	0x03B8DAA0 LDP X8, X1, [X0]
	0x03B8DAA4 MOV X0, X20
	0x03B8DAA8 BLR X8
	0x03B8DAAC CMP W21, W0

ISIL:
	001 Move W8, S1
	002 And W8, W8, 0x7FFFFFFF
	003 Move W9, 0x7F800000
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction FCCMP not yet implemented."
	006 NotImplemented "Instruction FCSEL not yet implemented."
	007 Move W8, S2
	008 And W8, W8, 0x7FFFFFFF
	009 Move S3, 0.125
	010 NotImplemented "Instruction CMP not yet implemented."
	011 NotImplemented "Instruction FCCMP not yet implemented."
	012 NotImplemented "Instruction FCSEL not yet implemented."
	013 Move [X3], S2
	014 Add S2, S2, S1
	015 Multiply S0, S2, S0
	016 Move [X2], S0
	017 Move V2, [X0]
	018 Move V3, [X0+8]
	019 Subtract S0, S1, S0
	020 NotImplemented "Instruction INVALID not yet implemented."
	021 Multiply S0, S0, S3
	022 Move [X1], D1
	023 Move [X1+8], S0
	024 Return 

Method: System.Void GetConecastOffset$BurstManaged(in Unity.Mathematics.float3 origin, in Unity.Mathematics.float3 conePoint, in Unity.Mathematics.float3 direction, out System.Single coneOffset)

Disassembly:
	0x03B8DAB0 B.GE 0x3B8DB78
	0x03B8DAB4 LDR X8, [X20]
	0x03B8DAB8 LDR X1, [X25]
	0x03B8DABC LDRH W9, [X8 + 0x12E]
	0x03B8DAC0 CBZ X9, 0x3B8DAE4
	0x03B8DAC4 LDR X10, [X8 + 0xB0]
	0x03B8DAC8 ADD X10, X10, 0x8
	0x03B8DACC LDUR X11, [X10 - 0x8]
	0x03B8DAD0 CMP X11, X1
	0x03B8DAD4 B.EQ 0x3B8DAF4
	0x03B8DAD8 SUBS X9, X9, 0x1
	0x03B8DADC ADD X10, X10, 0x10
	0x03B8DAE0 B.NE 0x3B8DACC
	0x03B8DAE4 MOV X0, X20
	0x03B8DAE8 MOV W2, W31
	0x03B8DAEC BL 0x1C5C788
	0x03B8DAF0 B 0x3B8DB00
	0x03B8DAF4 LDRSW X9, [X10]
	0x03B8DAF8 ADD X8, X8, X9, 0x4, LSL
	0x03B8DAFC ADD X0, X8, 0x138
	0x03B8DB00 LDP X8, X2, [X0]
	0x03B8DB04 MOV X0, X20
	0x03B8DB08 MOV W1, W21
	0x03B8DB0C BLR X8
	0x03B8DB10 CBZ X0, 0x3B8DB9C
	0x03B8DB14 LDR X8, [X0]
	0x03B8DB18 LDR X1, [X26]
	0x03B8DB1C MOV X22, X0
	0x03B8DB20 LDRH W9, [X8 + 0x12E]
	0x03B8DB24 CBZ X9, 0x3B8DB48
	0x03B8DB28 LDR X10, [X8 + 0xB0]
	0x03B8DB2C ADD X10, X10, 0x8
	0x03B8DB30 LDUR X11, [X10 - 0x8]
	0x03B8DB34 CMP X11, X1
	0x03B8DB38 B.EQ 0x3B8DB58
	0x03B8DB3C SUBS X9, X9, 0x1
	0x03B8DB40 ADD X10, X10, 0x10
	0x03B8DB44 B.NE 0x3B8DB30
	0x03B8DB48 MOV X0, X22
	0x03B8DB4C MOV W2, W31
	0x03B8DB50 BL 0x1C5C788
	0x03B8DB54 B 0x3B8DB64
	0x03B8DB58 LDRSW X9, [X10]
	0x03B8DB5C ADD X8, X8, X9, 0x4, LSL
	0x03B8DB60 ADD X0, X8, 0x138
	0x03B8DB64 LDP X8, X1, [X0]
	0x03B8DB68 MOV X0, X22
	0x03B8DB6C BLR X8
	0x03B8DB70 ADD W21, W21, 0x1
	0x03B8DB74 B 0x3B8DA54
	0x03B8DB78 LDR X0, [X19 + 0x20]
	0x03B8DB7C CBZ X0, 0x3B8DB9C
	0x03B8DB80 LDR X1, [X23]

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move S0, [X1]
	011 Move S1, [X1+4]
	012 Move S3, [X0]
	013 Move S4, [X0+4]
	014 Move V2, [X1+8]
	015 Move V5, [X0+8]
	016 Move S6, [X2]
	017 Move S7, [X2+4]
	018 Subtract S8, S0, S3
	019 Move V0, [X2+8]
	020 Move X20, 0x855000
	021 Subtract S10, S1, S4
	022 Move W8, [X20+1413]
	023 Subtract S9, S2, S5
	024 Multiply S1, S8, S6
	025 Multiply S2, S10, S7
	026 Add S1, S1, S2
	027 Multiply S2, S9, S0
	028 Add S1, S2, S1
	029 Move X19, X3
	030 Multiply S11, S6, S1
	031 Multiply S12, S7, S1
	032 Multiply S13, S0, S1
	033 Compare W8, 0
	034 JumpIfNotEqual {40}
	035 Move X0, 0x567000
	036 Move X0, [X0+1448]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X20+1413], W8
	040 Move X8, 0x567000
	041 Move X8, [X8+1448]
	042 Subtract S11, S8, S11
	043 Subtract S8, S10, S12
	044 Subtract S9, S9, S13
	045 Move X0, [X8]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Multiply S1, S11, S11
	051 Multiply S2, S8, S8
	052 Multiply S0, S9, S9
	053 Add S1, S1, S2
	054 Add S0, S0, S1
	055 NotImplemented "Instruction FSQRT not yet implemented."
	056 Move [X19], S0
	057 Move X20, [X31+64]
	058 Move X19, [X31+72]
	059 Move X30, [X31+48]
	060 Move D9, [X31+32]
	061 Move D8, [X31+40]
	062 Move D11, [X31+16]
	063 Move D10, [X31+24]
	064 Move D13, [X31+80]
	065 Move D12, [X31+88]
	066 Return 

