Type: UnityEngine.XR.Interaction.Toolkit.Utilities.BurstMathUtility/FastSafeDivide_00000931$BurstDirectCall

Method: System.Void GetFunctionPointerDiscard(ref System.IntPtr param_0)

Disassembly:
	0x03B8C2DC MOVZ W8, 0x1
	0x03B8C2E0 STRB W8, [X20 + 0xB5B]
	0x03B8C2E4 LDR X0, [X19]
	0x03B8C2E8 STR X31, [X31 + 0x8]
	0x03B8C2EC LDR W8, [X0 + 0xE0]
	0x03B8C2F0 CBNZ W8, 0x3B8C2F8
	0x03B8C2F4 BL 0x1C16DFC
	0x03B8C2F8 ADD X0, X31, 0x8
	0x03B8C2FC BL 0x3B8C198
	0x03B8C300 LDR X0, [X31 + 0x8]
	0x03B8C304 LDP X20, X19, [X31 + 0x10]
	0x03B8C308 LDR X30, [X31], #0x20
	0x03B8C30C RET
	0x03B8C310 STP X30, X21, [X31 - 0x20]!
	0x03B8C314 STP X20, X19, [X31 + 0x10]
	0x03B8C318 ADRP X21, 0x856000
	0x03B8C31C ADRP X19, 0x5D0000
	0x03B8C320 ADRP X20, 0x58F000
	0x03B8C324 LDRB W8, [X21 + 0xB5C]
	0x03B8C328 LDR X19, [X19 + 0x280]
	0x03B8C32C LDR X20, [X20 + 0x848]
	0x03B8C330 TBNZ X8, 0x0, 0x3B8C360
	0x03B8C334 ADRP X0, 0x58F000
	0x03B8C338 LDR X0, [X0 + 0x848]
	0x03B8C33C BL 0x1C16CF4
	0x03B8C340 ADRP X0, 0x5D0000
	0x03B8C344 LDR X0, [X0 + 0x280]
	0x03B8C348 BL 0x1C16CF4
	0x03B8C34C ADRP X0, 0x5D0000
	0x03B8C350 LDR X0, [X0 + 0x100]
	0x03B8C354 BL 0x1C16CF4
	0x03B8C358 MOVZ W8, 0x1
	0x03B8C35C STRB W8, [X21 + 0xB5C]
	0x03B8C360 LDR X0, [X20]
	0x03B8C364 ADRP X20, 0x5D0000
	0x03B8C368 LDR X19, [X19]
	0x03B8C36C LDR W8, [X0 + 0xE0]
	0x03B8C370 LDR X20, [X20 + 0x100]
	0x03B8C374 CBNZ W8, 0x3B8C37C
	0x03B8C378 BL 0x1C16DFC
	0x03B8C37C MOV X0, X19
	0x03B8C380 MOV X1, X31
	0x03B8C384 BL 0x36FA754
	0x03B8C388 LDR X8, [X20]
	0x03B8C38C MOV X19, X0
	0x03B8C390 LDR W9, [X8 + 0xE0]
	0x03B8C394 CBNZ W9, 0x3B8C3A4
	0x03B8C398 MOV X0, X8
	0x03B8C39C BL 0x1C16DFC
	0x03B8C3A0 LDR X8, [X20]
	0x03B8C3A4 LDR X8, [X8 + 0xB8]
	0x03B8C3A8 STR X19, [X8 + 0x8]
	0x03B8C3AC LDP X20, X19, [X31 + 0x10]
	0x03B8C3B0 LDP X30, X21, [X31], #0x20
	0x03B8C3B4 RET
	0x03B8C3B8 RET
	0x03B8C3BC B 0x3B8C310
	0x03B8C3C0 STP X30, X25, [X31 - 0x40]!
	0x03B8C3C4 STP X24, X23, [X31 + 0x10]
	0x03B8C3C8 STP X22, X21, [X31 + 0x20]
	0x03B8C3CC STP X20, X19, [X31 + 0x30]
	0x03B8C3D0 ADRP X24, 0x856000
	0x03B8C3D4 ADRP X25, 0x5D0000
	0x03B8C3D8 LDRB W8, [X24 + 0xB5E]
	0x03B8C3DC LDR X25, [X25 + 0x288]
	0x03B8C3E0 MOV X19, X4
	0x03B8C3E4 MOV X20, X3
	0x03B8C3E8 MOV X21, X2
	0x03B8C3EC MOV X22, X1
	0x03B8C3F0 MOV X23, X0
	0x03B8C3F4 TBNZ X8, 0x0, 0x3B8C40C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x857000
	008 Move X23, 0x5D1000
	009 Move W8, [X20+2886]
	010 Move X23, [X23+224]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x590000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0x5D1000
	020 Move X0, [X0+528]
	021 Call 0x1C17CF4
	022 Move X0, 0x5D1000
	023 Move X0, [X0+224]
	024 Call 0x1C17CF4
	025 Move X0, 0x5D1000
	026 Move X0, [X0+536]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2886], W8
	030 Move X8, [X23]
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X23]
	037 Move X9, [X8+184]
	038 Move X10, [X9]
	039 Compare X10, 0
	040 JumpIfNotEqual {70}
	041 Move W10, [X8+224]
	042 Compare W10, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X23]
	047 Move X9, [X8+184]
	048 Move X8, 0x590000
	049 Move X20, [X9+8]
	050 Move X8, [X8+2120]
	051 Move X0, [X8]
	052 Move X8, 0x5D1000
	053 Move X8, [X8+528]
	054 Move X21, [X8]
	055 Move X8, 0x5D1000
	056 Move X8, [X8+536]
	057 Move W9, [X0+224]
	058 Move X22, [X8]
	059 Compare W9, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X22
	065 Move X3, X31
	066 Call BurstCompiler.GetILPPMethodFunctionPointer2, X0, X1, X2
	067 Move X8, [X23]
	068 Move X9, [X8+184]
	069 Move [X9], X0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {76}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, [X23]
	076 Move X8, [X8+184]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X8, [X8]
	080 Move [X19], X8
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 

Method: System.IntPtr GetFunctionPointer()

Disassembly:
	0x03B8C3F8 ADRP X0, 0x5D0000
	0x03B8C3FC LDR X0, [X0 + 0x288]
	0x03B8C400 BL 0x1C16CF4
	0x03B8C404 MOVZ W8, 0x1
	0x03B8C408 STRB W8, [X24 + 0xB5E]
	0x03B8C40C LDR X0, [X25]
	0x03B8C410 LDR W8, [X0 + 0xE0]
	0x03B8C414 CBNZ W8, 0x3B8C41C
	0x03B8C418 BL 0x1C16DFC
	0x03B8C41C MOV X0, X23
	0x03B8C420 MOV X1, X22
	0x03B8C424 MOV X2, X21
	0x03B8C428 MOV X3, X20
	0x03B8C42C MOV X4, X19
	0x03B8C430 LDP X20, X19, [X31 + 0x30]
	0x03B8C434 LDP X22, X21, [X31 + 0x20]
	0x03B8C438 LDP X24, X23, [X31 + 0x10]
	0x03B8C43C LDP X30, X25, [X31], #0x40
	0x03B8C440 B 0x3B8C444
	0x03B8C444 STP X30, X25, [X31 - 0x40]!
	0x03B8C448 STP X24, X23, [X31 + 0x10]
	0x03B8C44C STP X22, X21, [X31 + 0x20]
	0x03B8C450 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x857000
	005 Move X19, 0x5D1000
	006 Move W8, [X20+2887]
	007 Move X19, [X19+224]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5D1000
	013 Move X0, [X0+224]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2887], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 8
	024 Call FastSafeDivide_00000931$BurstDirectCall.GetFunctionPointerDiscard, X0
	025 Move X0, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void Constructor()

Disassembly:
	0x03B8C454 ADRP X24, 0x856000
	0x03B8C458 ADRP X25, 0x58F000
	0x03B8C45C LDRB W8, [X24 + 0xB65]
	0x03B8C460 LDR X25, [X25 + 0x848]
	0x03B8C464 MOV X19, X4
	0x03B8C468 MOV X20, X3
	0x03B8C46C MOV X21, X2
	0x03B8C470 MOV X22, X1
	0x03B8C474 MOV X23, X0
	0x03B8C478 TBNZ X8, 0x0, 0x3B8C49C
	0x03B8C47C ADRP X0, 0x58F000
	0x03B8C480 LDR X0, [X0 + 0x848]
	0x03B8C484 BL 0x1C16CF4
	0x03B8C488 ADRP X0, 0x5D0000
	0x03B8C48C LDR X0, [X0 + 0x288]
	0x03B8C490 BL 0x1C16CF4
	0x03B8C494 MOVZ W8, 0x1
	0x03B8C498 STRB W8, [X24 + 0xB65]
	0x03B8C49C LDR X0, [X25]
	0x03B8C4A0 LDR W8, [X0 + 0xE0]
	0x03B8C4A4 CBNZ W8, 0x3B8C4AC
	0x03B8C4A8 BL 0x1C16DFC
	0x03B8C4AC MOV X0, X31
	0x03B8C4B0 BL 0x36FA670
	0x03B8C4B4 TBZ X0, 0x0, 0x3B8C504
	0x03B8C4B8 ADRP X8, 0x5D0000
	0x03B8C4BC LDR X8, [X8 + 0x288]
	0x03B8C4C0 LDR X0, [X8]
	0x03B8C4C4 LDR W8, [X0 + 0xE0]
	0x03B8C4C8 CBNZ W8, 0x3B8C4D0
	0x03B8C4CC BL 0x1C16DFC
	0x03B8C4D0 BL 0x3B8CE70
	0x03B8C4D4 CBZ X0, 0x3B8C504
	0x03B8C4D8 MOV X5, X0
	0x03B8C4DC MOV X0, X23
	0x03B8C4E0 MOV X1, X22
	0x03B8C4E4 MOV X2, X21
	0x03B8C4E8 MOV X3, X20
	0x03B8C4EC MOV X4, X19
	0x03B8C4F0 LDP X20, X19, [X31 + 0x30]
	0x03B8C4F4 LDP X22, X21, [X31 + 0x20]
	0x03B8C4F8 LDP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x857000
	006 Move X19, 0x5D1000
	007 Move X20, 0x590000
	008 Move W8, [X21+2888]
	009 Move X19, [X19+544]
	010 Move X20, [X20+2120]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x590000
	016 Move X0, [X0+2120]
	017 Call 0x1C17CF4
	018 Move X0, 0x5D1000
	019 Move X0, [X0+544]
	020 Call 0x1C17CF4
	021 Move X0, 0x5D1000
	022 Move X0, [X0+224]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2888], W8
	026 Move X0, [X20]
	027 Move X20, 0x5D1000
	028 Move X19, [X19]
	029 Move W8, [X0+224]
	030 Move X20, [X20+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call BurstCompiler.CompileILPPMethod2, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move [X8+8], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void Initialize()

Disassembly:
	0x03B8C4FC LDP X30, X25, [X31], #0x40

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B8C500 BR X5

ISIL:
	001 Call FastSafeDivide_00000931$BurstDirectCall.Constructor
	002 Return 

Method: System.Void Invoke(in UnityEngine.Vector3 a, in UnityEngine.Vector3 b, out UnityEngine.Vector3 result, System.Single tolerance = 1E-06)

Disassembly:
	0x03B889F0 MOV X0, X8
	0x03B889F4 BL 0x1C16DFC
	0x03B889F8 LDR X8, [X23]
	0x03B889FC LDR X9, [X8 + 0xB8]
	0x03B88A00 LDR X10, [X9]
	0x03B88A04 CBNZ X10, 0x3B88A74
	0x03B88A08 LDR W10, [X8 + 0xE0]
	0x03B88A0C CBNZ W10, 0x3B88A20
	0x03B88A10 MOV X0, X8
	0x03B88A14 BL 0x1C16DFC
	0x03B88A18 LDR X8, [X23]
	0x03B88A1C LDR X9, [X8 + 0xB8]
	0x03B88A20 ADRP X8, 0x593000
	0x03B88A24 LDR X20, [X9 + 0x8]
	0x03B88A28 LDR X8, [X8 + 0x848]
	0x03B88A2C LDR X0, [X8]
	0x03B88A30 ADRP X8, 0x5D4000
	0x03B88A34 LDR X8, [X8 + 0x108]
	0x03B88A38 LDR X21, [X8]
	0x03B88A3C ADRP X8, 0x5D4000
	0x03B88A40 LDR X8, [X8 + 0x110]
	0x03B88A44 LDR W9, [X0 + 0xE0]
	0x03B88A48 LDR X22, [X8]
	0x03B88A4C CBNZ W9, 0x3B88A54
	0x03B88A50 BL 0x1C16DFC
	0x03B88A54 MOV X0, X20
	0x03B88A58 MOV X1, X21
	0x03B88A5C MOV X2, X22
	0x03B88A60 MOV X3, X31
	0x03B88A64 BL 0x36FAD70
	0x03B88A68 LDR X8, [X23]
	0x03B88A6C LDR X9, [X8 + 0xB8]
	0x03B88A70 STR X0, [X9]
	0x03B88A74 LDR W9, [X8 + 0xE0]
	0x03B88A78 CBNZ W9, 0x3B88A88
	0x03B88A7C MOV X0, X8
	0x03B88A80 BL 0x1C16DFC
	0x03B88A84 LDR X8, [X23]
	0x03B88A88 LDR X8, [X8 + 0xB8]
	0x03B88A8C LDP X22, X21, [X31 + 0x10]
	0x03B88A90 LDR X8, [X8]
	0x03B88A94 STR X8, [X19]
	0x03B88A98 LDP X20, X19, [X31 + 0x20]
	0x03B88A9C LDP X30, X23, [X31], #0x30
	0x03B88AA0 RET
	0x03B88AA4 STR X30, [X31 - 0x20]!
	0x03B88AA8 STP X20, X19, [X31 + 0x10]
	0x03B88AAC ADRP X20, 0x85A000
	0x03B88AB0 ADRP X19, 0x5D4000
	0x03B88AB4 LDRB W8, [X20 + 0xB10]
	0x03B88AB8 LDR X19, [X19 + 0x88]
	0x03B88ABC TBNZ X8, 0x0, 0x3B88AD4
	0x03B88AC0 ADRP X0, 0x5D4000
	0x03B88AC4 LDR X0, [X0 + 0x88]
	0x03B88AC8 BL 0x1C16CF4
	0x03B88ACC MOVZ W8, 0x1
	0x03B88AD0 STRB W8, [X20 + 0xB10]
	0x03B88AD4 LDR X0, [X19]
	0x03B88AD8 STR X31, [X31 + 0x8]
	0x03B88ADC LDR W8, [X0 + 0xE0]
	0x03B88AE0 CBNZ W8, 0x3B88AE8
	0x03B88AE4 BL 0x1C16DFC
	0x03B88AE8 ADD X0, X31, 0x8
	0x03B88AEC BL 0x3B88988
	0x03B88AF0 LDR X0, [X31 + 0x8]
	0x03B88AF4 LDP X20, X19, [X31 + 0x10]
	0x03B88AF8 LDR X30, [X31], #0x20
	0x03B88AFC RET
	0x03B88B00 STP X30, X21, [X31 - 0x20]!
	0x03B88B04 STP X20, X19, [X31 + 0x10]
	0x03B88B08 ADRP X21, 0x85A000
	0x03B88B0C ADRP X19, 0x5D4000
	0x03B88B10 ADRP X20, 0x593000
	0x03B88B14 LDRB W8, [X21 + 0xB11]
	0x03B88B18 LDR X19, [X19 + 0x118]
	0x03B88B1C LDR X20, [X20 + 0x848]
	0x03B88B20 TBNZ X8, 0x0, 0x3B88B50
	0x03B88B24 ADRP X0, 0x593000
	0x03B88B28 LDR X0, [X0 + 0x848]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], D8
	003 Move [X31+64], X30
	004 Move [X31+72], X23
	005 Move [X31+80], X22
	006 Move [X31+88], X21
	007 Move [X31+96], X20
	008 Move [X31+104], X19
	009 Move X22, 0x85B000
	010 Move X23, 0x594000
	011 Move W8, [X22+2889]
	012 Move X23, [X23+2120]
	013 Move V8, V0
	014 Move X19, X2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x594000
	022 Move X0, [X0+2120]
	023 Call 0x1C17CF4
	024 Move X0, 0x5D5000
	025 Move X0, [X0+224]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+2889], W8
	029 Move X0, [X23]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X31
	035 Call BurstCompiler.get_IsEnabled
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {64}
	040 Move X8, 0x5D5000
	041 Move X8, [X8+224]
	042 Move X0, [X8]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Call FastSafeDivide_00000931$BurstDirectCall.GetFunctionPointer
	048 Compare X0, 0
	049 JumpIfEqual {64}
	050 Move X3, X0
	051 Move X0, X21
	052 Move X1, X20
	053 Move X2, X19
	054 Move V0, V8
	055 Move X20, [X31+96]
	056 Move X19, [X31+104]
	057 Move X22, [X31+80]
	058 Move X21, [X31+88]
	059 Move X30, [X31+64]
	060 Move X23, [X31+72]
	061 Move V8, [X31+48]
	062 Add X31, X31, 112
	063 CallNoReturn X3
	064 Move [X31+40], W31
	065 Move [X31+32], X31
	066 Move S0, [X21]
	067 Move S1, [X21+4]
	068 Move V2, [X21+8]
	069 Move X0, X31
	070 Call float3.op_Implicit, X0
	071 Move [X31+16], S0
	072 Move [X31+24], S1
	073 Move [X31+24], S2
	074 Move S0, [X20]
	075 Move S1, [X20+4]
	076 Move V2, [X20+8]
	077 Move X0, X31
	078 Call float3.op_Implicit, X0
	079 Move [X31], S0
	080 Move [X31+8], S1
	081 Add X0, X31, 16
	082 Add X1, X31, 0
	083 Add X2, X31, 32
	084 Move V0, V8
	085 Move [X31+8], S2
	086 Call BurstMathUtility.FastSafeDivide, X0, X1, X2, V0
	087 Move S0, [X31+32]
	088 Move S1, [X31+36]
	089 Move V2, [X31+40]
	090 Move X0, X31
	091 Call float3.op_Implicit, X0
	092 Move [X19], S0
	093 Move [X19+8], S1
	094 Move [X19+8], S2
	095 Move X20, [X31+96]
	096 Move X19, [X31+104]
	097 Move X22, [X31+80]
	098 Move X21, [X31+88]
	099 Move X30, [X31+64]
	100 Move X23, [X31+72]
	101 Move V8, [X31+48]
	102 Add X31, X31, 112
	103 Return 

