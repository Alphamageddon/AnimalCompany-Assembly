Type: UnityEngine.XR.Interaction.Toolkit.Utilities.BurstMathUtility/FastVectorEquals_0000092F$BurstDirectCall

Method: System.Void GetFunctionPointerDiscard(ref System.IntPtr param_0)

Disassembly:
	0x03B8BB28 BL 0x1C16DFC
	0x03B8BB2C MOV X0, X20
	0x03B8BB30 MOV X1, X21
	0x03B8BB34 MOV X2, X22
	0x03B8BB38 MOV X3, X31
	0x03B8BB3C BL 0x36FAD70
	0x03B8BB40 LDR X8, [X23]
	0x03B8BB44 LDR X9, [X8 + 0xB8]
	0x03B8BB48 STR X0, [X9]
	0x03B8BB4C LDR W9, [X8 + 0xE0]
	0x03B8BB50 CBNZ W9, 0x3B8BB60
	0x03B8BB54 MOV X0, X8
	0x03B8BB58 BL 0x1C16DFC
	0x03B8BB5C LDR X8, [X23]
	0x03B8BB60 LDR X8, [X8 + 0xB8]
	0x03B8BB64 LDP X22, X21, [X31 + 0x10]
	0x03B8BB68 LDR X8, [X8]
	0x03B8BB6C STR X8, [X19]
	0x03B8BB70 LDP X20, X19, [X31 + 0x20]
	0x03B8BB74 LDP X30, X23, [X31], #0x30
	0x03B8BB78 RET
	0x03B8BB7C STR X30, [X31 - 0x20]!
	0x03B8BB80 STP X20, X19, [X31 + 0x10]
	0x03B8BB84 ADRP X20, 0x857000
	0x03B8BB88 ADRP X19, 0x5D1000
	0x03B8BB8C LDRB W8, [X20 + 0xB51]
	0x03B8BB90 LDR X19, [X19 + 0xF0]
	0x03B8BB94 TBNZ X8, 0x0, 0x3B8BBAC
	0x03B8BB98 ADRP X0, 0x5D1000
	0x03B8BB9C LDR X0, [X0 + 0xF0]
	0x03B8BBA0 BL 0x1C16CF4
	0x03B8BBA4 MOVZ W8, 0x1
	0x03B8BBA8 STRB W8, [X20 + 0xB51]
	0x03B8BBAC LDR X0, [X19]
	0x03B8BBB0 STR X31, [X31 + 0x8]
	0x03B8BBB4 LDR W8, [X0 + 0xE0]
	0x03B8BBB8 CBNZ W8, 0x3B8BBC0
	0x03B8BBBC BL 0x1C16DFC
	0x03B8BBC0 ADD X0, X31, 0x8
	0x03B8BBC4 BL 0x3B8BA60
	0x03B8BBC8 LDR X0, [X31 + 0x8]
	0x03B8BBCC LDP X20, X19, [X31 + 0x10]
	0x03B8BBD0 LDR X30, [X31], #0x20
	0x03B8BBD4 RET
	0x03B8BBD8 STP X30, X21, [X31 - 0x20]!
	0x03B8BBDC STP X20, X19, [X31 + 0x10]
	0x03B8BBE0 ADRP X21, 0x857000
	0x03B8BBE4 ADRP X19, 0x5D1000
	0x03B8BBE8 ADRP X20, 0x590000
	0x03B8BBEC LDRB W8, [X21 + 0xB52]
	0x03B8BBF0 LDR X19, [X19 + 0x250]
	0x03B8BBF4 LDR X20, [X20 + 0x848]
	0x03B8BBF8 TBNZ X8, 0x0, 0x3B8BC28
	0x03B8BBFC ADRP X0, 0x590000
	0x03B8BC00 LDR X0, [X0 + 0x848]
	0x03B8BC04 BL 0x1C16CF4
	0x03B8BC08 ADRP X0, 0x5D1000
	0x03B8BC0C LDR X0, [X0 + 0x250]
	0x03B8BC10 BL 0x1C16CF4
	0x03B8BC14 ADRP X0, 0x5D1000
	0x03B8BC18 LDR X0, [X0 + 0xF0]
	0x03B8BC1C BL 0x1C16CF4
	0x03B8BC20 MOVZ W8, 0x1
	0x03B8BC24 STRB W8, [X21 + 0xB52]
	0x03B8BC28 LDR X0, [X20]
	0x03B8BC2C ADRP X20, 0x5D1000
	0x03B8BC30 LDR X19, [X19]
	0x03B8BC34 LDR W8, [X0 + 0xE0]
	0x03B8BC38 LDR X20, [X20 + 0xF0]
	0x03B8BC3C CBNZ W8, 0x3B8BC44
	0x03B8BC40 BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x858000
	008 Move X23, 0x5D2000
	009 Move W8, [X20+2876]
	010 Move X23, [X23+208]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x591000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0x5D2000
	020 Move X0, [X0+480]
	021 Call 0x1C17CF4
	022 Move X0, 0x5D2000
	023 Move X0, [X0+208]
	024 Call 0x1C17CF4
	025 Move X0, 0x5D2000
	026 Move X0, [X0+488]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2876], W8
	030 Move X8, [X23]
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X23]
	037 Move X9, [X8+184]
	038 Move X10, [X9]
	039 Compare X10, 0
	040 JumpIfNotEqual {70}
	041 Move W10, [X8+224]
	042 Compare W10, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X23]
	047 Move X9, [X8+184]
	048 Move X8, 0x591000
	049 Move X20, [X9+8]
	050 Move X8, [X8+2120]
	051 Move X0, [X8]
	052 Move X8, 0x5D2000
	053 Move X8, [X8+480]
	054 Move X21, [X8]
	055 Move X8, 0x5D2000
	056 Move X8, [X8+488]
	057 Move W9, [X0+224]
	058 Move X22, [X8]
	059 Compare W9, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X22
	065 Move X3, X31
	066 Call BurstCompiler.GetILPPMethodFunctionPointer2, X0, X1, X2
	067 Move X8, [X23]
	068 Move X9, [X8+184]
	069 Move [X9], X0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {76}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, [X23]
	076 Move X8, [X8+184]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X8, [X8]
	080 Move [X19], X8
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 

Method: System.IntPtr GetFunctionPointer()

Disassembly:
	0x03B8BC44 MOV X0, X19
	0x03B8BC48 MOV X1, X31
	0x03B8BC4C BL 0x36FA754
	0x03B8BC50 LDR X8, [X20]
	0x03B8BC54 MOV X19, X0
	0x03B8BC58 LDR W9, [X8 + 0xE0]
	0x03B8BC5C CBNZ W9, 0x3B8BC6C
	0x03B8BC60 MOV X0, X8
	0x03B8BC64 BL 0x1C16DFC
	0x03B8BC68 LDR X8, [X20]
	0x03B8BC6C LDR X8, [X8 + 0xB8]
	0x03B8BC70 STR X19, [X8 + 0x8]
	0x03B8BC74 LDP X20, X19, [X31 + 0x10]
	0x03B8BC78 LDP X30, X21, [X31], #0x20
	0x03B8BC7C RET
	0x03B8BC80 RET
	0x03B8BC84 B 0x3B8BBD8
	0x03B8BC88 STP X30, X21, [X31 - 0x20]!
	0x03B8BC8C STP X20, X19, [X31 + 0x10]
	0x03B8BC90 LDR X8, [X2 + 0x8]
	0x03B8BC94 STP X1, X2, [X0 + 0x20]
	0x03B8BC98 MOV X19, X0
	0x03B8BC9C MOV X20, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x858000
	005 Move X19, 0x5D2000
	006 Move W8, [X20+2877]
	007 Move X19, [X19+208]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5D2000
	013 Move X0, [X0+208]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2877], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 8
	024 Call FastVectorEquals_0000092F$BurstDirectCall.GetFunctionPointerDiscard, X0
	025 Move X0, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void Constructor()

Disassembly:
	0x03B8BCA0 STR X8, [X0 + 0x10]
	0x03B8BCA4 LDRB W21, [X2 + 0x52]
	0x03B8BCA8 STR X0, [X0 + 0x40]
	0x03B8BCAC MOV X0, X2
	0x03B8BCB0 BL 0x1C16D84
	0x03B8BCB4 TBZ X0, 0x0, 0x3B8BCCC
	0x03B8BCB8 CMP W21, 0x3
	0x03B8BCBC B.NE 0x3B8BCE8
	0x03B8BCC0 ADRP X8, 0xFFFFFFFFFE073000
	0x03B8BCC4 ADD X8, X8, 0x7FC
	0x03B8BCC8 B 0x3B8BCDC
	0x03B8BCCC CMP W21, 0x2
	0x03B8BCD0 B.NE 0x3B8BCE4
	0x03B8BCD4 ADRP X8, 0xFFFFFFFFFE073000
	0x03B8BCD8 ADD X8, X8, 0x7E4
	0x03B8BCDC STR X8, [X19 + 0x18]
	0x03B8BCE0 B 0x3B8BCF8
	0x03B8BCE4 CBZ X20, 0x3B8BD10
	0x03B8BCE8 LDR X8, [X19 + 0x10]
	0x03B8BCEC LDR X9, [X19 + 0x20]
	0x03B8BCF0 STR X8, [X19 + 0x18]
	0x03B8BCF4 STR X9, [X19 + 0x40]
	0x03B8BCF8 ADRP X8, 0xFFFFFFFFFE073000
	0x03B8BCFC ADD X8, X8, 0x784
	0x03B8BD00 STR X8, [X19 + 0x38]
	0x03B8BD04 LDP X20, X19, [X31 + 0x10]
	0x03B8BD08 LDP X30, X21, [X31], #0x20
	0x03B8BD0C RET
	0x03B8BD10 ADRP X1, 0xFFFFFFFFFCF90000
	0x03B8BD14 ADD X1, X1, 0xEE3
	0x03B8BD18 MOV X0, X31
	0x03B8BD1C BL 0x1C16F3C
	0x03B8BD20 MOV X1, X31
	0x03B8BD24 BL 0x1C16DEC
	0x03B8BD28 LDR X8, [X0 + 0x40]
	0x03B8BD2C LDR X5, [X0 + 0x18]
	0x03B8BD30 LDR X4, [X0 + 0x28]
	0x03B8BD34 MOV X0, X8
	0x03B8BD38 BR X5
	0x03B8BD3C SUB X31, X31, 0x70
	0x03B8BD40 STR X30, [X31 + 0x20]
	0x03B8BD44 STP X26, X25, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x858000
	006 Move X19, 0x5D2000
	007 Move X20, 0x591000
	008 Move W8, [X21+2878]
	009 Move X19, [X19+496]
	010 Move X20, [X20+2120]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x591000
	016 Move X0, [X0+2120]
	017 Call 0x1C17CF4
	018 Move X0, 0x5D2000
	019 Move X0, [X0+496]
	020 Call 0x1C17CF4
	021 Move X0, 0x5D2000
	022 Move X0, [X0+208]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2878], W8
	026 Move X0, [X20]
	027 Move X20, 0x5D2000
	028 Move X19, [X19]
	029 Move W8, [X0+224]
	030 Move X20, [X20+208]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call BurstCompiler.CompileILPPMethod2, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move [X8+8], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void Initialize()

Disassembly:
	0x03B8BD48 STP X24, X23, [X31 + 0x40]

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B8BD4C STP X22, X21, [X31 + 0x50]

ISIL:
	001 Call FastVectorEquals_0000092F$BurstDirectCall.Constructor
	002 Return 

Method: System.Boolean Invoke(in Unity.Mathematics.float3 a, in Unity.Mathematics.float3 b, System.Single tolerance = 0.0001)

Disassembly:
	0x03B886F0 LDR V1, [X0 + 0x4]
	0x03B886F4 LDR V2, [X1 + 0x4]
	0x03B886F8 FABD S3, S1, S1
	0x03B886FC FCMP S3, S0
	0x03B88700 B.LE 0x3B8870C
	0x03B88704 FDIV S1, S1, S2
	0x03B88708 STR S1, [X2 + 0x4]
	0x03B8870C LDR V1, [X0 + 0x8]
	0x03B88710 LDR V2, [X1 + 0x8]
	0x03B88714 FABD S3, S1, S1
	0x03B88718 FCMP S3, S0
	0x03B8871C B.LE 0x3B88728
	0x03B88720 FDIV S0, S1, S2
	0x03B88724 STR S0, [X2 + 0x8]
	0x03B88728 RET
	0x03B8872C LDR V0, [X0]
	0x03B88730 LDR V1, [X1]
	0x03B88734 LDR V2, [X0 + 0x8]
	0x03B88738 LDR V3, [X1 + 0x8]
	0x00000000 INVALID
	0x03B88740 STR D0, [X2]
	0x03B88744 FMUL S1, S2, S3
	0x03B88748 STR S1, [X2 + 0x8]
	0x03B8874C RET
	0x03B88750 LDR V0, [X0]
	0x03B88754 LDR V1, [X1]
	0x03B88758 LDR V2, [X0 + 0x8]
	0x03B8875C LDR V3, [X1 + 0x8]
	0x00000000 INVALID
	0x03B88764 STR D0, [X2]
	0x03B88768 FMUL S1, S2, S3
	0x03B8876C STR S1, [X2 + 0x8]
	0x03B88770 RET
	0x03B88774 LDP S0, S2, [X0]
	0x03B88778 LDR V1, [X0 + 0x8]
	0x03B8877C FABS S5, S0
	0x03B88780 FABS S3, S2
	0x03B88784 FCMP S5, S3
	0x03B88788 FABS S4, S1
	0x03B8878C B.PL 0x3B887B4
	0x03B88790 FCMP S5, S4
	0x03B88794 B.PL 0x3B887B4
	0x03B88798 FMOV S3, W31
	0x03B8879C FMUL S0, S0, S3
	0x03B887A0 FMUL S4, S2, S3
	0x03B887A4 FMUL S5, S1, S3
	0x03B887A8 FSUB S3, S0, S2
	0x03B887AC FSUB S2, S4, S5
	0x03B887B0 B 0x3B887F4
	0x03B887B4 FCMP S4, S3
	0x03B887B8 B.LE 0x3B887DC
	0x03B887BC FMOV S3, W31
	0x03B887C0 FMUL S2, S2, S3
	0x03B887C4 FMUL S4, S1, S3
	0x03B887C8 FMUL S5, S0, S3
	0x03B887CC FSUB S3, S0, S2
	0x03B887D0 FSUB S2, S2, S1
	0x03B887D4 FSUB S0, S4, S5
	0x03B887D8 B 0x3B887F8
	0x03B887DC FMOV S3, W31
	0x03B887E0 FMUL S4, S0, S3
	0x03B887E4 FMUL S1, S1, S3
	0x03B887E8 FMUL S3, S2, S3
	0x03B887EC FSUB S3, S4, S3
	0x03B887F0 FSUB S2, S2, S1
	0x03B887F4 FSUB S0, S1, S0

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x85B000
	008 Move X22, 0x594000
	009 Move W8, [X21+2879]
	010 Move X22, [X22+2120]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x594000
	019 Move X0, [X0+2120]
	020 Call 0x1C17CF4
	021 Move X0, 0x5D5000
	022 Move X0, [X0+208]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2879], W8
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X31
	032 Call BurstCompiler.get_IsEnabled
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {58}
	037 Move X8, 0x5D5000
	038 Move X8, [X8+208]
	039 Move X0, [X8]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Call FastVectorEquals_0000092F$BurstDirectCall.GetFunctionPointer
	045 Compare X0, 0
	046 JumpIfEqual {58}
	047 Move X2, X0
	048 Move X0, X20
	049 Move X1, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+8]
	055 Move V0, V8
	056 Move V8, [X31+48]
	057 CallNoReturn X2
	058 Move V0, [X20]
	059 Move V1, [X19]
	060 NotImplemented "Instruction FABD not yet implemented."
	061 NotImplemented "Instruction FCMP not yet implemented."
	062 Move V0, [X20+4]
	063 Move V1, [X19+4]
	064 NotImplemented "Instruction FABD not yet implemented."
	065 NotImplemented "Instruction FCMP not yet implemented."
	066 Move V0, [X20+8]
	067 Move V1, [X19+8]
	068 NotImplemented "Instruction FABD not yet implemented."
	069 NotImplemented "Instruction FCMP not yet implemented."
	070 NotImplemented "Instruction CSET not yet implemented."
	071 Move W0, W31
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Move X30, [X31+8]
	077 Move V8, [X31+48]
	078 Return X0

