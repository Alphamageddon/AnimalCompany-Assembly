Type: UnityEngine.XR.Interaction.Toolkit.Utilities.BurstMathUtility/FastVectorEquals_0000092F$PostfixBurstDelegate

Method: System.Void .ctor(System.Object param_0, System.IntPtr param_1)

Disassembly:
	0x03B8B974 MOV X1, X31
	0x03B8B978 BL 0x1C16DEC
	0x03B8B97C LDR X8, [X0 + 0x40]
	0x03B8B980 LDR X5, [X0 + 0x18]
	0x03B8B984 LDR X4, [X0 + 0x28]
	0x03B8B988 MOV X0, X8
	0x03B8B98C BR X5
	0x03B8B990 SUB X31, X31, 0x70
	0x03B8B994 STR X30, [X31 + 0x20]
	0x03B8B998 STP X26, X25, [X31 + 0x30]
	0x03B8B99C STP X24, X23, [X31 + 0x40]
	0x03B8B9A0 STP X22, X21, [X31 + 0x50]
	0x03B8B9A4 STP X20, X19, [X31 + 0x60]
	0x03B8B9A8 ADRP X26, 0x857000
	0x03B8B9AC ADRP X25, 0x593000
	0x03B8B9B0 LDRB W8, [X26 + 0xB4F]
	0x03B8B9B4 LDR X25, [X25 + 0x838]
	0x03B8B9B8 MOV X19, X5
	0x03B8B9BC MOV X20, X4
	0x03B8B9C0 MOV X22, X3
	0x03B8B9C4 MOV X23, X2
	0x03B8B9C8 MOV X24, X1
	0x03B8B9CC MOV X21, X0
	0x03B8B9D0 TBNZ X8, 0x0, 0x3B8B9E8
	0x03B8B9D4 ADRP X0, 0x593000
	0x03B8B9D8 LDR X0, [X0 + 0x838]
	0x03B8B9DC BL 0x1C16CF4
	0x03B8B9E0 MOVZ W8, 0x1
	0x03B8B9E4 STRB W8, [X26 + 0xB4F]
	0x03B8B9E8 LDR X0, [X25]
	0x03B8B9EC MOV X1, X24
	0x03B8B9F0 STR X31, [X31 + 0x18]
	0x03B8B9F4 BL 0x1C16E04
	0x03B8B9F8 LDR X8, [X25]
	0x03B8B9FC STR X0, [X31]
	0x03B8BA00 MOV X1, X23
	0x03B8BA04 MOV X0, X8
	0x03B8BA08 BL 0x1C16E04
	0x03B8BA0C LDR X8, [X25]
	0x03B8BA10 STR X0, [X31 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+8]
	006 Move [X0+32], X1
	007 Move [X0+40], X2
	008 Move X19, X0
	009 Move X20, X1
	010 Move [X0+16], X8
	011 Move W21, [X2+82]
	012 Move [X0+64], X0
	013 Move X0, X2
	014 Call 0x1C17D84
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {22}
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X8, -33079296
	021 Add X8, X8, 1152
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X8, -33079296
	024 Add X8, X8, 1132
	025 Move [X19+24], X8
	026 Compare X20, 0
	027 JumpIfEqual {40}
	028 Move X8, [X19+16]
	029 Move X9, [X19+32]
	030 Move [X19+24], X8
	031 Move [X19+64], X9
	032 Move X8, -33079296
	033 Add X8, X8, 1016
	034 Move [X19+56], X8
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return 
	040 Move X1, -50786304
	041 Add X1, X1, 3811
	042 Move X0, X31
	043 Call 0x1C17F3C
	044 Move X1, X31
	045 Call 0x1C17DEC

Method: System.Boolean Invoke(in Unity.Mathematics.float3 a, in Unity.Mathematics.float3 b, System.Single tolerance = 0.0001)

Disassembly:
	0x03B8BA14 MOV X1, X22
	0x03B8BA18 MOV X0, X8
	0x03B8BA1C BL 0x1C16E04
	0x03B8BA20 STR X0, [X31 + 0x10]
	0x03B8BA24 ADD X1, X31, 0x0

ISIL:
	001 Move X8, [X0+64]
	002 Move X4, [X0+24]
	003 Move X3, [X0+40]
	004 Move X0, X8
	005 CallNoReturn X4

Method: System.IAsyncResult BeginInvoke(in Unity.Mathematics.float3 a, in Unity.Mathematics.float3 b, System.Single tolerance = 0.0001, System.AsyncCallback param_3, System.Object param_4)

Disassembly:
	0x03B8BA28 MOV X0, X21
	0x03B8BA2C MOV X2, X20
	0x03B8BA30 MOV X3, X19
	0x03B8BA34 BL 0x1C16CB0
	0x03B8BA38 LDP X20, X19, [X31 + 0x60]
	0x03B8BA3C LDP X22, X21, [X31 + 0x50]
	0x03B8BA40 LDP X24, X23, [X31 + 0x40]
	0x03B8BA44 LDP X26, X25, [X31 + 0x30]
	0x03B8BA48 LDR X30, [X31 + 0x20]
	0x03B8BA4C ADD X31, X31, 0x70
	0x03B8BA50 RET
	0x03B8BA54 MOV X0, X1
	0x03B8BA58 MOV X1, X31
	0x03B8BA5C B 0x1C16CB4
	0x03B8BA60 STP X30, X23, [X31 - 0x30]!
	0x03B8BA64 STP X22, X21, [X31 + 0x10]
	0x03B8BA68 STP X20, X19, [X31 + 0x20]
	0x03B8BA6C ADRP X20, 0x857000
	0x03B8BA70 ADRP X23, 0x5D1000
	0x03B8BA74 LDRB W8, [X20 + 0xB50]
	0x03B8BA78 LDR X23, [X23 + 0xF0]
	0x03B8BA7C MOV X19, X0
	0x03B8BA80 TBNZ X8, 0x0, 0x3B8BABC
	0x03B8BA84 ADRP X0, 0x590000
	0x03B8BA88 LDR X0, [X0 + 0x848]
	0x03B8BA8C BL 0x1C16CF4
	0x03B8BA90 ADRP X0, 0x5D1000
	0x03B8BA94 LDR X0, [X0 + 0x240]
	0x03B8BA98 BL 0x1C16CF4
	0x03B8BA9C ADRP X0, 0x5D1000
	0x03B8BAA0 LDR X0, [X0 + 0xF0]
	0x03B8BAA4 BL 0x1C16CF4
	0x03B8BAA8 ADRP X0, 0x5D1000
	0x03B8BAAC LDR X0, [X0 + 0x248]
	0x03B8BAB0 BL 0x1C16CF4
	0x03B8BAB4 MOVZ W8, 0x1
	0x03B8BAB8 STRB W8, [X20 + 0xB50]
	0x03B8BABC LDR X8, [X23]
	0x03B8BAC0 LDR W9, [X8 + 0xE0]
	0x03B8BAC4 CBNZ W9, 0x3B8BAD4
	0x03B8BAC8 MOV X0, X8
	0x03B8BACC BL 0x1C16DFC
	0x03B8BAD0 LDR X8, [X23]
	0x03B8BAD4 LDR X9, [X8 + 0xB8]
	0x03B8BAD8 LDR X10, [X9]
	0x03B8BADC CBNZ X10, 0x3B8BB4C
	0x03B8BAE0 LDR W10, [X8 + 0xE0]
	0x03B8BAE4 CBNZ W10, 0x3B8BAF8
	0x03B8BAE8 MOV X0, X8
	0x03B8BAEC BL 0x1C16DFC
	0x03B8BAF0 LDR X8, [X23]
	0x03B8BAF4 LDR X9, [X8 + 0xB8]
	0x03B8BAF8 ADRP X8, 0x590000
	0x03B8BAFC LDR X20, [X9 + 0x8]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], X30
	003 Move [X31+48], X26
	004 Move [X31+56], X25
	005 Move [X31+64], X24
	006 Move [X31+72], X23
	007 Move [X31+80], X22
	008 Move [X31+88], X21
	009 Move [X31+96], X20
	010 Move [X31+104], X19
	011 Move X26, 0x858000
	012 Move [X31+44], S0
	013 Move X25, 0x594000
	014 Move X24, 0x569000
	015 Move W8, [X26+2875]
	016 Move X25, [X25+2104]
	017 Move X24, [X24+2704]
	018 Move X19, X4
	019 Move X20, X3
	020 Move X22, X2
	021 Move X23, X1
	022 Move X21, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {35}
	027 Move X0, 0x569000
	028 Move X0, [X0+2704]
	029 Call 0x1C17CF4
	030 Move X0, 0x594000
	031 Move X0, [X0+2104]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X26+2875], W8
	035 Move X0, [X25]
	036 Move X1, X23
	037 Move [X31+16], X31
	038 Move [X31+24], X31
	039 Call 0x1C17E04
	040 Move X8, [X25]
	041 Move [X31], X0
	042 Move X1, X22
	043 Move X0, X8
	044 Call 0x1C17E04
	045 Move X8, [X24]
	046 Move [X31+8], X0
	047 Add X1, X31, 44
	048 Move X0, X8
	049 Call 0x1C17E04
	050 Move [X31+16], X0
	051 Add X1, X31, 0
	052 Move X0, X21
	053 Move X2, X20
	054 Move X3, X19
	055 Call 0x1C17CB0
	056 Move X20, [X31+96]
	057 Move X19, [X31+104]
	058 Move X22, [X31+80]
	059 Move X21, [X31+88]
	060 Move X24, [X31+64]
	061 Move X23, [X31+72]
	062 Move X26, [X31+48]
	063 Move X25, [X31+56]
	064 Move X30, [X31+32]
	065 Add X31, X31, 112
	066 Return X0

Method: System.Boolean EndInvoke(System.IAsyncResult param_0)

Disassembly:
	0x03B8BB00 LDR X8, [X8 + 0x848]
	0x03B8BB04 LDR X0, [X8]
	0x03B8BB08 ADRP X8, 0x5D1000
	0x03B8BB0C LDR X8, [X8 + 0x240]
	0x03B8BB10 LDR X21, [X8]
	0x03B8BB14 ADRP X8, 0x5D1000
	0x03B8BB18 LDR X8, [X8 + 0x248]
	0x03B8BB1C LDR W9, [X0 + 0xE0]
	0x03B8BB20 LDR X22, [X8]
	0x03B8BB24 CBNZ W9, 0x3B8BB2C

ISIL:
	001 Move [X31-16], X30
	002 Move X0, X1
	003 Move X1, X31
	004 Call 0x1C17CB4
	005 Compare X0, 0
	006 JumpIfEqual {11}
	007 Call 0x1C17E08
	008 Move W0, [X0]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

