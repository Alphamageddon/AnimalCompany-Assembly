Type: UnityEngine.XR.Interaction.Toolkit.Utilities.BurstMathUtility/FastVectorEquals_00000930$BurstDirectCall

Method: System.Void GetFunctionPointerDiscard(ref System.IntPtr param_0)

Disassembly:
	0x03B8BF04 BL 0x1C16DFC
	0x03B8BF08 LDR X8, [X23]
	0x03B8BF0C LDR X8, [X8 + 0xB8]
	0x03B8BF10 LDP X22, X21, [X31 + 0x10]
	0x03B8BF14 LDR X8, [X8]
	0x03B8BF18 STR X8, [X19]
	0x03B8BF1C LDP X20, X19, [X31 + 0x20]
	0x03B8BF20 LDP X30, X23, [X31], #0x30
	0x03B8BF24 RET
	0x03B8BF28 STR X30, [X31 - 0x20]!
	0x03B8BF2C STP X20, X19, [X31 + 0x10]
	0x03B8BF30 ADRP X20, 0x857000
	0x03B8BF34 ADRP X19, 0x5D1000
	0x03B8BF38 LDRB W8, [X20 + 0xB56]
	0x03B8BF3C LDR X19, [X19 + 0xF8]
	0x03B8BF40 TBNZ X8, 0x0, 0x3B8BF58
	0x03B8BF44 ADRP X0, 0x5D1000
	0x03B8BF48 LDR X0, [X0 + 0xF8]
	0x03B8BF4C BL 0x1C16CF4
	0x03B8BF50 MOVZ W8, 0x1
	0x03B8BF54 STRB W8, [X20 + 0xB56]
	0x03B8BF58 LDR X0, [X19]
	0x03B8BF5C STR X31, [X31 + 0x8]
	0x03B8BF60 LDR W8, [X0 + 0xE0]
	0x03B8BF64 CBNZ W8, 0x3B8BF6C
	0x03B8BF68 BL 0x1C16DFC
	0x03B8BF6C ADD X0, X31, 0x8
	0x03B8BF70 BL 0x3B8BE0C
	0x03B8BF74 LDR X0, [X31 + 0x8]
	0x03B8BF78 LDP X20, X19, [X31 + 0x10]
	0x03B8BF7C LDR X30, [X31], #0x20
	0x03B8BF80 RET
	0x03B8BF84 STP X30, X21, [X31 - 0x20]!
	0x03B8BF88 STP X20, X19, [X31 + 0x10]
	0x03B8BF8C ADRP X21, 0x857000
	0x03B8BF90 ADRP X19, 0x5D1000
	0x03B8BF94 ADRP X20, 0x590000
	0x03B8BF98 LDRB W8, [X21 + 0xB57]
	0x03B8BF9C LDR X19, [X19 + 0x268]
	0x03B8BFA0 LDR X20, [X20 + 0x848]
	0x03B8BFA4 TBNZ X8, 0x0, 0x3B8BFD4
	0x03B8BFA8 ADRP X0, 0x590000
	0x03B8BFAC LDR X0, [X0 + 0x848]
	0x03B8BFB0 BL 0x1C16CF4
	0x03B8BFB4 ADRP X0, 0x5D1000
	0x03B8BFB8 LDR X0, [X0 + 0x268]
	0x03B8BFBC BL 0x1C16CF4
	0x03B8BFC0 ADRP X0, 0x5D1000
	0x03B8BFC4 LDR X0, [X0 + 0xF8]
	0x03B8BFC8 BL 0x1C16CF4
	0x03B8BFCC MOVZ W8, 0x1
	0x03B8BFD0 STRB W8, [X21 + 0xB57]
	0x03B8BFD4 LDR X0, [X20]
	0x03B8BFD8 ADRP X20, 0x5D1000
	0x03B8BFDC LDR X19, [X19]
	0x03B8BFE0 LDR W8, [X0 + 0xE0]
	0x03B8BFE4 LDR X20, [X20 + 0xF8]
	0x03B8BFE8 CBNZ W8, 0x3B8BFF0
	0x03B8BFEC BL 0x1C16DFC
	0x03B8BFF0 MOV X0, X19
	0x03B8BFF4 MOV X1, X31
	0x03B8BFF8 BL 0x36FA754
	0x03B8BFFC LDR X8, [X20]
	0x03B8C000 MOV X19, X0
	0x03B8C004 LDR W9, [X8 + 0xE0]
	0x03B8C008 CBNZ W9, 0x3B8C018
	0x03B8C00C MOV X0, X8
	0x03B8C010 BL 0x1C16DFC
	0x03B8C014 LDR X8, [X20]
	0x03B8C018 LDR X8, [X8 + 0xB8]
	0x03B8C01C STR X19, [X8 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x858000
	008 Move X23, 0x5D2000
	009 Move W8, [X20+2881]
	010 Move X23, [X23+216]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x591000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0x5D2000
	020 Move X0, [X0+504]
	021 Call 0x1C17CF4
	022 Move X0, 0x5D2000
	023 Move X0, [X0+216]
	024 Call 0x1C17CF4
	025 Move X0, 0x5D2000
	026 Move X0, [X0+512]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2881], W8
	030 Move X8, [X23]
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X23]
	037 Move X9, [X8+184]
	038 Move X10, [X9]
	039 Compare X10, 0
	040 JumpIfNotEqual {70}
	041 Move W10, [X8+224]
	042 Compare W10, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X23]
	047 Move X9, [X8+184]
	048 Move X8, 0x591000
	049 Move X20, [X9+8]
	050 Move X8, [X8+2120]
	051 Move X0, [X8]
	052 Move X8, 0x5D2000
	053 Move X8, [X8+504]
	054 Move X21, [X8]
	055 Move X8, 0x5D2000
	056 Move X8, [X8+512]
	057 Move W9, [X0+224]
	058 Move X22, [X8]
	059 Compare W9, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X22
	065 Move X3, X31
	066 Call BurstCompiler.GetILPPMethodFunctionPointer2, X0, X1, X2
	067 Move X8, [X23]
	068 Move X9, [X8+184]
	069 Move [X9], X0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {76}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, [X23]
	076 Move X8, [X8+184]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X8, [X8]
	080 Move [X19], X8
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 

Method: System.IntPtr GetFunctionPointer()

Disassembly:
	0x03B8C020 LDP X20, X19, [X31 + 0x10]
	0x03B8C024 LDP X30, X21, [X31], #0x20
	0x03B8C028 RET
	0x03B8C02C RET
	0x03B8C030 B 0x3B8BF84
	0x03B8C034 STP X30, X21, [X31 - 0x20]!
	0x03B8C038 STP X20, X19, [X31 + 0x10]
	0x03B8C03C LDR X8, [X2 + 0x8]
	0x03B8C040 STP X1, X2, [X0 + 0x20]
	0x03B8C044 MOV X19, X0
	0x03B8C048 MOV X20, X1
	0x03B8C04C STR X8, [X0 + 0x10]
	0x03B8C050 LDRB W21, [X2 + 0x52]
	0x03B8C054 STR X0, [X0 + 0x40]
	0x03B8C058 MOV X0, X2
	0x03B8C05C BL 0x1C16D84
	0x03B8C060 TBZ X0, 0x0, 0x3B8C078
	0x03B8C064 CMP W21, 0x2
	0x03B8C068 B.NE 0x3B8C094
	0x03B8C06C ADRP X8, 0xFFFFFFFFFE072000
	0x03B8C070 ADD X8, X8, 0x894
	0x03B8C074 B 0x3B8C088
	0x03B8C078 CMP W21, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x857000
	005 Move X19, 0x5D1000
	006 Move W8, [X20+2882]
	007 Move X19, [X19+216]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5D1000
	013 Move X0, [X0+216]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2882], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 8
	024 Call FastVectorEquals_00000930$BurstDirectCall.GetFunctionPointerDiscard, X0
	025 Move X0, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void Constructor()

Disassembly:
	0x03B8C07C B.NE 0x3B8C090
	0x03B8C080 ADRP X8, 0xFFFFFFFFFE072000
	0x03B8C084 ADD X8, X8, 0x880
	0x03B8C088 STR X8, [X19 + 0x18]
	0x03B8C08C B 0x3B8C0A4
	0x03B8C090 CBZ X20, 0x3B8C0BC
	0x03B8C094 LDR X8, [X19 + 0x10]
	0x03B8C098 LDR X9, [X19 + 0x20]
	0x03B8C09C STR X8, [X19 + 0x18]
	0x03B8C0A0 STR X9, [X19 + 0x40]
	0x03B8C0A4 ADRP X8, 0xFFFFFFFFFE072000
	0x03B8C0A8 ADD X8, X8, 0x828
	0x03B8C0AC STR X8, [X19 + 0x38]
	0x03B8C0B0 LDP X20, X19, [X31 + 0x10]
	0x03B8C0B4 LDP X30, X21, [X31], #0x20
	0x03B8C0B8 RET
	0x03B8C0BC ADRP X1, 0xFFFFFFFFFCF8F000
	0x03B8C0C0 ADD X1, X1, 0xEE3
	0x03B8C0C4 MOV X0, X31
	0x03B8C0C8 BL 0x1C16F3C
	0x03B8C0CC MOV X1, X31
	0x03B8C0D0 BL 0x1C16DEC
	0x03B8C0D4 LDR X8, [X0 + 0x40]
	0x03B8C0D8 LDR X4, [X0 + 0x18]
	0x03B8C0DC LDR X3, [X0 + 0x28]
	0x03B8C0E0 MOV X0, X8
	0x03B8C0E4 BR X4
	0x03B8C0E8 SUB X31, X31, 0x60
	0x03B8C0EC STP X30, X25, [X31 + 0x20]
	0x03B8C0F0 STP X24, X23, [X31 + 0x30]
	0x03B8C0F4 STP X22, X21, [X31 + 0x40]
	0x03B8C0F8 STP X20, X19, [X31 + 0x50]
	0x03B8C0FC ADRP X25, 0x856000
	0x03B8C100 ADRP X24, 0x592000
	0x03B8C104 LDRB W8, [X25 + 0xB59]
	0x03B8C108 LDR X24, [X24 + 0x838]
	0x03B8C10C MOV X19, X4
	0x03B8C110 MOV X20, X3
	0x03B8C114 MOV X22, X2
	0x03B8C118 MOV X23, X1
	0x03B8C11C MOV X21, X0
	0x03B8C120 TBNZ X8, 0x0, 0x3B8C138

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x857000
	006 Move X19, 0x5D1000
	007 Move X20, 0x590000
	008 Move W8, [X21+2883]
	009 Move X19, [X19+520]
	010 Move X20, [X20+2120]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x590000
	016 Move X0, [X0+2120]
	017 Call 0x1C17CF4
	018 Move X0, 0x5D1000
	019 Move X0, [X0+520]
	020 Call 0x1C17CF4
	021 Move X0, 0x5D1000
	022 Move X0, [X0+216]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2883], W8
	026 Move X0, [X20]
	027 Move X20, 0x5D1000
	028 Move X19, [X19]
	029 Move W8, [X0+224]
	030 Move X20, [X20+216]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call BurstCompiler.CompileILPPMethod2, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move [X8+8], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void Initialize()

Disassembly:
	0x03B8C124 ADRP X0, 0x592000

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B8C128 LDR X0, [X0 + 0x838]

ISIL:
	001 Call FastVectorEquals_00000930$BurstDirectCall.Constructor
	002 Return 

Method: System.Boolean Invoke(in UnityEngine.Vector3 a, in UnityEngine.Vector3 b, System.Single tolerance = 0.0001)

Disassembly:
	0x03B8886C STR X8, [X19 + 0x18]
	0x03B88870 STR X9, [X19 + 0x40]
	0x03B88874 ADRP X8, 0xFFFFFFFFFE075000
	0x03B88878 ADD X8, X8, 0xE34
	0x03B8887C STR X8, [X19 + 0x38]
	0x03B88880 LDP X20, X19, [X31 + 0x10]
	0x03B88884 LDP X30, X21, [X31], #0x20
	0x03B88888 RET
	0x03B8888C ADRP X1, 0xFFFFFFFFFCF93000
	0x03B88890 ADD X1, X1, 0xEE3
	0x03B88894 MOV X0, X31
	0x03B88898 BL 0x1C16F3C
	0x03B8889C MOV X1, X31
	0x03B888A0 BL 0x1C16DEC
	0x03B888A4 LDR X8, [X0 + 0x40]
	0x03B888A8 LDR X5, [X0 + 0x18]
	0x03B888AC LDR X4, [X0 + 0x28]
	0x03B888B0 MOV X0, X8
	0x03B888B4 BR X5
	0x03B888B8 SUB X31, X31, 0x70
	0x03B888BC STR X30, [X31 + 0x20]
	0x03B888C0 STP X26, X25, [X31 + 0x30]
	0x03B888C4 STP X24, X23, [X31 + 0x40]
	0x03B888C8 STP X22, X21, [X31 + 0x50]
	0x03B888CC STP X20, X19, [X31 + 0x60]
	0x03B888D0 ADRP X26, 0x85A000
	0x03B888D4 ADRP X25, 0x56B000
	0x03B888D8 LDRB W8, [X26 + 0xB0E]
	0x03B888DC LDR X25, [X25 + 0x5A0]
	0x03B888E0 MOV X19, X5
	0x03B888E4 MOV X20, X4
	0x03B888E8 MOV X22, X3
	0x03B888EC MOV X23, X2
	0x03B888F0 MOV X24, X1
	0x03B888F4 MOV X21, X0
	0x03B888F8 TBNZ X8, 0x0, 0x3B88910
	0x03B888FC ADRP X0, 0x56B000
	0x03B88900 LDR X0, [X0 + 0x5A0]
	0x03B88904 BL 0x1C16CF4
	0x03B88908 MOVZ W8, 0x1
	0x03B8890C STRB W8, [X26 + 0xB0E]
	0x03B88910 LDR X0, [X25]
	0x03B88914 MOV X1, X24
	0x03B88918 STR X31, [X31 + 0x18]
	0x03B8891C BL 0x1C16E04
	0x03B88920 LDR X8, [X25]
	0x03B88924 STR X0, [X31]
	0x03B88928 MOV X1, X23
	0x03B8892C MOV X0, X8
	0x03B88930 BL 0x1C16E04
	0x03B88934 LDR X8, [X25]
	0x03B88938 STR X0, [X31 + 0x8]
	0x03B8893C MOV X1, X22
	0x03B88940 MOV X0, X8
	0x03B88944 BL 0x1C16E04
	0x03B88948 STR X0, [X31 + 0x10]
	0x03B8894C ADD X1, X31, 0x0
	0x03B88950 MOV X0, X21
	0x03B88954 MOV X2, X20
	0x03B88958 MOV X3, X19
	0x03B8895C BL 0x1C16CB0
	0x03B88960 LDP X20, X19, [X31 + 0x60]
	0x03B88964 LDP X22, X21, [X31 + 0x50]
	0x03B88968 LDP X24, X23, [X31 + 0x40]
	0x03B8896C LDP X26, X25, [X31 + 0x30]
	0x03B88970 LDR X30, [X31 + 0x20]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x85B000
	008 Move X22, 0x594000
	009 Move W8, [X21+2884]
	010 Move X22, [X22+2120]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x594000
	019 Move X0, [X0+2120]
	020 Call 0x1C17CF4
	021 Move X0, 0x5D5000
	022 Move X0, [X0+216]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2884], W8
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X31
	032 Call BurstCompiler.get_IsEnabled
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {58}
	037 Move X8, 0x5D5000
	038 Move X8, [X8+216]
	039 Move X0, [X8]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Call FastVectorEquals_00000930$BurstDirectCall.GetFunctionPointer
	045 Compare X0, 0
	046 JumpIfEqual {58}
	047 Move X2, X0
	048 Move X0, X20
	049 Move X1, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+8]
	055 Move V0, V8
	056 Move V8, [X31+48]
	057 CallNoReturn X2
	058 Move V0, [X20]
	059 Move V1, [X19]
	060 NotImplemented "Instruction FABD not yet implemented."
	061 NotImplemented "Instruction FCMP not yet implemented."
	062 Move V0, [X20+4]
	063 Move V1, [X19+4]
	064 NotImplemented "Instruction FABD not yet implemented."
	065 NotImplemented "Instruction FCMP not yet implemented."
	066 Move V0, [X20+8]
	067 Move V1, [X19+8]
	068 NotImplemented "Instruction FABD not yet implemented."
	069 NotImplemented "Instruction FCMP not yet implemented."
	070 NotImplemented "Instruction CSET not yet implemented."
	071 Move W0, W31
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Move X30, [X31+8]
	077 Move V8, [X31+48]
	078 Return X0

