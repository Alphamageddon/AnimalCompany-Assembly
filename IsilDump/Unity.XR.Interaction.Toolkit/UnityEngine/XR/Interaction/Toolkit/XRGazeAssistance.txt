Type: UnityEngine.XR.Interaction.Toolkit.XRGazeAssistance

Method: UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor get_gazeInteractor()

Disassembly:
	0x03B6A178 BL 0x1C5C788
	0x03B6A17C B 0x3B6A190

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_gazeInteractor(UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor value)

Disassembly:
	0x03B6A180 LDR W9, [X10]
	0x03B6A184 ADD W9, W9, 0x4

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.Single get_fallbackDivergence()

Disassembly:
	0x03B6A188 ADD X8, X8, W9, 0x4, SXTW
	0x03B6A18C ADD X0, X8, 0x138

ISIL:
	001 Move V0, [X0+40]
	002 Return V0

Method: System.Void set_fallbackDivergence(System.Single value)

Disassembly:
	0x03B6A190 LDP X8, X1, [X0]
	0x03B6A194 MOV X0, X20
	0x03B6A198 BLR X8
	0x03B6A19C TBZ X0, 0x0, 0x3B6A2EC
	0x03B6A1A0 LDR X0, [X19 + 0x70]
	0x03B6A1A4 CBZ X0, 0x3B6A348
	0x03B6A1A8 MOV X1, X31
	0x03B6A1AC BL 0x3C3F58C

ISIL:
	001 Move W8, 0x42B40000
	002 Move S1, W8
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 NotImplemented "Instruction FMIN not yet implemented."
	005 Move S1, W31
	006 NotImplemented "Instruction FCSEL not yet implemented."
	007 Move [X0+40], S0
	008 Return 

Method: System.Boolean get_hideCursorWithNoActiveRays()

Disassembly:
	0x03B6A1B0 ADRP X20, 0x86E000
	0x03B6A1B4 LDRB W8, [X20 + 0x784]

ISIL:
	001 Move W0, [X0+44]
	002 Return X0

Method: System.Void set_hideCursorWithNoActiveRays(System.Boolean value)

Disassembly:
	0x03B6A1B8 MOV V15.16B, V0.16B
	0x03B6A1BC STP S2, S1, [X31 + 0x18]
	0x03B6A1C0 CBNZ W8, 0x3B6A1D8

ISIL:
	001 And W8, W1, 1
	002 Move [X0+44], W8
	003 Return 

Method: System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRGazeAssistance/InteractorData> get_rayInteractors()

Disassembly:
	0x03B6A1C4 ADRP X0, 0x589000
	0x03B6A1C8 LDR X0, [X0 + 0x5A8]

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_rayInteractors(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRGazeAssistance/InteractorData> value)

Disassembly:
	0x03B6A1CC BL 0x1C16CF4
	0x03B6A1D0 MOVZ W8, 0x1

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.Single get_aimAssistRequiredAngle()

Disassembly:
	0x03B6A1D4 STRB W8, [X20 + 0x784]
	0x03B6A1D8 ADRP X8, 0x589000

ISIL:
	001 Move V0, [X0+56]
	002 Return V0

Method: System.Void set_aimAssistRequiredAngle(System.Single value)

Disassembly:
	0x03B6A1DC LDR X8, [X8 + 0x5A8]
	0x03B6A1E0 LDR X0, [X8]
	0x03B6A1E4 LDR W8, [X0 + 0xE0]
	0x03B6A1E8 CBNZ W8, 0x3B6A1F0
	0x03B6A1EC BL 0x1C16DFC
	0x03B6A1F0 LDR X0, [X19 + 0x48]
	0x03B6A1F4 CBZ X0, 0x3B6A348
	0x03B6A1F8 LDR X20, [X19 + 0x68]

ISIL:
	001 Move W8, 0x42B40000
	002 Move S1, W8
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 NotImplemented "Instruction FMIN not yet implemented."
	005 Move S1, W31
	006 NotImplemented "Instruction FCSEL not yet implemented."
	007 Move [X0+56], S0
	008 Return 

Method: System.Single get_aimAssistRequiredSpeed()

Disassembly:
	0x03B6A1FC MOV X1, X31
	0x03B6A200 BL 0x3C3F58C

ISIL:
	001 Move V0, [X0+60]
	002 Return V0

Method: System.Void set_aimAssistRequiredSpeed(System.Single value)

Disassembly:
	0x03B6A204 LDR X0, [X19 + 0x48]
	0x03B6A208 STP S1, S0, [X31 + 0x10]

ISIL:
	001 Move [X0+60], S0
	002 Return 

Method: System.Single get_aimAssistPercent()

Disassembly:
	0x03B6A20C STR S2, [X31 + 0xC]
	0x03B6A210 CBZ X0, 0x3B6A348

ISIL:
	001 Move V0, [X0+64]
	002 Return V0

Method: System.Void set_aimAssistPercent(System.Single value)

Disassembly:
	0x03B6A214 LDP S2, S1, [X31 + 0x18]
	0x03B6A218 FSUB S0, S15, S10
	0x03B6A21C FMUL S0, S0, S0
	0x03B6A220 MOV X1, X31
	0x03B6A224 FSUB S1, S1, S9
	0x03B6A228 FSUB S2, S2, S8
	0x03B6A22C FMUL S1, S1, S1

ISIL:
	001 Move S1, 1
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 NotImplemented "Instruction FMIN not yet implemented."
	004 Move S1, W31
	005 NotImplemented "Instruction FCSEL not yet implemented."
	006 Move [X0+64], S0
	007 Return 

Method: System.Single get_aimAssistMaxSpeedPercent()

Disassembly:
	0x03B6A230 FMUL S2, S2, S2
	0x03B6A234 FADD S0, S0, S1

ISIL:
	001 Move V0, [X0+68]
	002 Return V0

Method: System.Void set_aimAssistMaxSpeedPercent(System.Single value)

Disassembly:
	0x03B6A238 FADD S0, S2, S0
	0x03B6A23C FSQRT S0, S0

ISIL:
	001 Move [X0+68], S0
	002 Return 

Method: System.Void Initialize()

Disassembly:
	0x03B6A240 FADD S0, S0, S0
	0x03B6A244 FMOV S1, 1
	0x03B6A248 FMIN S15, S0, S1
	0x03B6A24C BL 0x3C3DEB4
	0x03B6A250 MOV V4.16B, V11.16B
	0x03B6A254 MOV V5.16B, V12.16B
	0x03B6A258 MOV V6.16B, V13.16B
	0x03B6A25C MOV V7.16B, V14.16B
	0x03B6A260 MOV X0, X31
	0x03B6A264 STR S15, [X31]
	0x03B6A268 BL 0x3C2A4A0
	0x03B6A26C CBZ X20, 0x3B6A348
	0x03B6A270 MOV V7.16B, V3.16B
	0x03B6A274 LDP S16, S3, [X31 + 0x10]
	0x03B6A278 LDR V17, [X31 + 0xC]
	0x03B6A27C MOV V4.16B, V0.16B
	0x03B6A280 MOV V5.16B, V1.16B
	0x03B6A284 MOV V6.16B, V2.16B
	0x03B6A288 FSUB S0, S10, S3
	0x03B6A28C FSUB S1, S9, S16
	0x03B6A290 FSUB S2, S8, S17
	0x03B6A294 FMUL S0, S15, S0
	0x03B6A298 FMUL S1, S15, S1
	0x03B6A29C FMUL S2, S15, S2
	0x03B6A2A0 FADD S0, S3, S0
	0x03B6A2A4 FADD S1, S16, S1
	0x03B6A2A8 FADD S2, S17, S2
	0x03B6A2AC MOV X0, X20
	0x03B6A2B0 MOV V3.16B, V4.16B
	0x03B6A2B4 MOV V4.16B, V5.16B
	0x03B6A2B8 MOV V5.16B, V6.16B
	0x03B6A2BC MOV V6.16B, V7.16B
	0x03B6A2C0 MOV X1, X31
	0x03B6A2C4 BL 0x3C40000
	0x03B6A2C8 LDRB W8, [X19 + 0x40]
	0x03B6A2CC CBZ W8, 0x3B6A340
	0x03B6A2D0 LDR X0, [X19 + 0x38]
	0x03B6A2D4 CBZ X0, 0x3B6A348
	0x03B6A2D8 MOVZ W1, 0x1
	0x03B6A2DC MOV X2, X31
	0x03B6A2E0 MOVZ W19, 0x1
	0x03B6A2E4 BL 0x3C32410
	0x03B6A2E8 B 0x3B6A314
	0x03B6A2EC LDRB W8, [X19 + 0x40]
	0x03B6A2F0 CBZ W8, 0x3B6A310
	0x03B6A2F4 LDRB W8, [X19 + 0x18]
	0x03B6A2F8 CBNZ W8, 0x3B6A310
	0x03B6A2FC LDR X0, [X19 + 0x38]
	0x03B6A300 CBZ X0, 0x3B6A348
	0x03B6A304 MOV W1, W31
	0x03B6A308 MOV X2, X31
	0x03B6A30C BL 0x3C32410
	0x03B6A310 MOV W19, W31
	0x03B6A314 MOV W0, W19
	0x03B6A318 LDP X20, X19, [X31 + 0x90]
	0x03B6A31C LDP X22, X21, [X31 + 0x80]
	0x03B6A320 LDP X24, X23, [X31 + 0x70]
	0x03B6A324 LDP X30, X25, [X31 + 0x60]
	0x03B6A328 LDP D9, D8, [X31 + 0x50]
	0x03B6A32C LDP D11, D10, [X31 + 0x40]
	0x03B6A330 LDP D13, D12, [X31 + 0x30]
	0x03B6A334 LDP D15, D14, [X31 + 0x20]
	0x03B6A338 ADD X31, X31, 0xA0
	0x03B6A33C RET
	0x03B6A340 MOVZ W19, 0x1
	0x03B6A344 B 0x3B6A314
	0x03B6A348 BL 0x1C16F20
	0x03B6A34C STP X30, X21, [X31 - 0x20]!
	0x03B6A350 STP X20, X19, [X31 + 0x10]
	0x03B6A354 ADRP X20, 0x878000
	0x03B6A358 LDRB W8, [X20 + 0x9DB]
	0x03B6A35C MOV X19, X0
	0x03B6A360 TBNZ X8, 0x0, 0x3B6A384
	0x03B6A364 ADRP X0, 0x5F1000
	0x03B6A368 LDR X0, [X0 + 0x4E8]
	0x03B6A36C BL 0x1C16CF4
	0x03B6A370 ADRP X0, 0x5F1000
	0x03B6A374 LDR X0, [X0 + 0x4F0]
	0x03B6A378 BL 0x1C16CF4
	0x03B6A37C MOVZ W8, 0x1
	0x03B6A380 STRB W8, [X20 + 0x9DB]
	0x03B6A384 LDR X0, [X19 + 0x30]
	0x03B6A388 CBZ X0, 0x3B6A3C4
	0x03B6A38C ADRP X21, 0x5F1000
	0x03B6A390 LDR X21, [X21 + 0x4F0]
	0x03B6A394 MOV W20, W31
	0x03B6A398 LDR W8, [X0 + 0x18]
	0x03B6A39C CMP W20, W8
	0x03B6A3A0 B.GE 0x3B6A3C8
	0x03B6A3A4 LDR X2, [X21]
	0x03B6A3A8 MOV W1, W20
	0x03B6A3AC BL 0x301BCCC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x879000
	006 Move X20, 0x58A000
	007 Move W8, [X21+2518]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {34}
	014 Move X0, 0x5F2000
	015 Move X0, [X0+1248]
	016 Call 0x1C17CF4
	017 Move X0, 0x58A000
	018 Move X0, [X0+2600]
	019 Call 0x1C17CF4
	020 Move X0, 0x5F2000
	021 Move X0, [X0+1256]
	022 Call 0x1C17CF4
	023 Move X0, 0x5F2000
	024 Move X0, [X0+1264]
	025 Call 0x1C17CF4
	026 Move X0, 0x58A000
	027 Move X0, [X0+1432]
	028 Call 0x1C17CF4
	029 Move X0, 0x5F2000
	030 Move X0, [X0+1272]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+2518], W8
	034 Move X0, [X20]
	035 Move X20, [X19+32]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Inequality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {78}
	048 Move X0, [X19+32]
	049 Compare X0, 0
	050 JumpIfEqual {77}
	051 Move X8, 0x5F2000
	052 Move X8, [X8+1248]
	053 Add X1, X19, 80
	054 Move X2, [X8]
	055 Call 0x21A5990, X0, X1
	056 Move X8, [X19+48]
	057 And W9, W0, 1
	058 Move [X19+88], W9
	059 Compare X8, 0
	060 JumpIfEqual {77}
	061 Move X21, 0x5F2000
	062 Move X21, [X21+1264]
	063 Move W20, W31
	064 Move W9, [X8+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X2, [X21]
	067 Move X0, X8
	068 Move W1, W20
	069 Call List`1<Object>.get_Item, X0, X1
	070 Compare X0, 0
	071 JumpIfEqual {77}
	072 Call InteractorData.Initialize, X0
	073 Move X8, [X19+48]
	074 Add W20, W20, 1
	075 Compare X8, 0
	076 JumpIfNotEqual {64}
	077 Call 0x1C17F20
	078 Move X8, 0x5F2000
	079 Move X8, [X8+1272]
	080 Move X1, X19
	081 Move X2, X31
	082 Move X0, [X8]
	083 Call String.Format, X0, X1
	084 Move X8, 0x58A000
	085 Move X8, [X8+2600]
	086 Move X20, X0
	087 Move X8, [X8]
	088 Move W9, [X8+224]
	089 Compare W9, 0
	090 JumpIfNotEqual {93}
	091 Move X0, X8
	092 Call 0x1C17DFC
	093 Move X0, X20
	094 Move X1, X19
	095 Move X2, X31
	096 Call Debug.LogError, X0, X1
	097 Move X0, X19
	098 Move X20, [X31+16]
	099 Move X19, [X31+24]
	100 Move W1, W31
	101 Move X2, X31
	102 Move X30, [X31+32]
	103 Move X21, [X31+40]
	104 Call Behaviour.set_enabled, X0, X1
	105 Return 
	106 Move X20, [X31+16]
	107 Move X19, [X31+24]
	108 Move X30, [X31+32]
	109 Move X21, [X31+40]
	110 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03B6A808 LDR X8, [X8 + 0x530]
	0x03B6A80C LDR X0, [X8]
	0x03B6A810 LDR W8, [X0 + 0xE0]
	0x03B6A814 CBNZ W8, 0x3B6A81C
	0x03B6A818 BL 0x1C16DFC
	0x03B6A81C BL 0x3B6B43C
	0x03B6A820 CBZ X0, 0x3B6A870
	0x03B6A824 MOV X4, X0
	0x03B6A828 MOV X0, X22
	0x03B6A82C MOV X1, X21
	0x03B6A830 MOV X2, X20
	0x03B6A834 MOV V2.16B, V11.16B
	0x03B6A838 MOV V3.16B, V10.16B
	0x03B6A83C MOV V4.16B, V9.16B
	0x03B6A840 MOV V5.16B, V8.16B
	0x03B6A844 MOV X3, X19
	0x03B6A848 LDP X20, X19, [X31 + 0x60]
	0x03B6A84C LDP X22, X21, [X31 + 0x50]
	0x03B6A850 LDP X24, X23, [X31 + 0x40]
	0x03B6A854 LDR X30, [X31 + 0x30]
	0x03B6A858 LDP D9, D8, [X31 + 0x20]
	0x03B6A85C LDP D11, D10, [X31 + 0x10]
	0x03B6A860 MOV V0.16B, V13.16B
	0x03B6A864 MOV V1.16B, V12.16B
	0x03B6A868 LDP D13, D12, [X31], #0x70
	0x03B6A86C BR X4
	0x03B6A870 MOV X0, X22
	0x03B6A874 MOV X1, X21
	0x03B6A878 MOV X2, X20
	0x03B6A87C MOV V2.16B, V11.16B
	0x03B6A880 MOV V3.16B, V10.16B
	0x03B6A884 MOV V4.16B, V9.16B
	0x03B6A888 MOV V5.16B, V8.16B
	0x03B6A88C MOV X3, X19
	0x03B6A890 LDP X20, X19, [X31 + 0x60]
	0x03B6A894 LDP X22, X21, [X31 + 0x50]
	0x03B6A898 LDP X24, X23, [X31 + 0x40]
	0x03B6A89C LDR X30, [X31 + 0x30]
	0x03B6A8A0 LDP D9, D8, [X31 + 0x20]
	0x03B6A8A4 LDP D11, D10, [X31 + 0x10]
	0x03B6A8A8 MOV V0.16B, V13.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x879000
	008 Move X23, 0x5B1000
	009 Move X20, 0x5F2000
	010 Move X21, 0x58A000
	011 Move W8, [X22+2519]
	012 Move X23, [X23+3632]
	013 Move X20, [X20+1320]
	014 Move X21, [X21+2416]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x58A000
	021 Move X0, [X0+2416]
	022 Call 0x1C17CF4
	023 Move X0, 0x5B1000
	024 Move X0, [X0+3632]
	025 Call 0x1C17CF4
	026 Move X0, 0x5F2000
	027 Move X0, [X0+1320]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+2519], W8
	031 Move X0, [X23]
	032 Call 0x1C17F10
	033 Move X2, [X20]
	034 Move X1, X19
	035 Move X3, X31
	036 Move X20, X0
	037 Call UnityAction..ctor, X0, X1, X2
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X1, X31
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Call Application.add_onBeforeRender, X0
	052 Return 

Method: System.Void OnDisable()

Disassembly:
	0x03B6A8AC MOV V1.16B, V12.16B
	0x03B6A8B0 MOV X4, X31
	0x03B6A8B4 LDP D13, D12, [X31], #0x70
	0x03B6A8B8 B 0x3B8066C
	0x03B6A8BC STR X30, [X31 - 0x30]!
	0x03B6A8C0 STP X22, X21, [X31 + 0x10]
	0x03B6A8C4 STP X20, X19, [X31 + 0x20]
	0x03B6A8C8 ADRP X22, 0x878000
	0x03B6A8CC ADRP X21, 0x5F1000
	0x03B6A8D0 ADRP X20, 0x5F1000
	0x03B6A8D4 LDRB W8, [X22 + 0x9DF]
	0x03B6A8D8 LDR X21, [X21 + 0x538]
	0x03B6A8DC LDR X20, [X20 + 0x540]
	0x03B6A8E0 MOV X19, X0
	0x03B6A8E4 TBNZ X8, 0x0, 0x3B6A908
	0x03B6A8E8 ADRP X0, 0x5F1000
	0x03B6A8EC LDR X0, [X0 + 0x540]
	0x03B6A8F0 BL 0x1C16CF4
	0x03B6A8F4 ADRP X0, 0x5F1000
	0x03B6A8F8 LDR X0, [X0 + 0x538]
	0x03B6A8FC BL 0x1C16CF4
	0x03B6A900 MOVZ W8, 0x1
	0x03B6A904 STRB W8, [X22 + 0x9DF]
	0x03B6A908 MOVZ W8, 0x42700000
	0x03B6A90C MOVZ W9, 0x1
	0x03B6A910 STR W8, [X19 + 0x28]
	0x03B6A914 STRB W9, [X19 + 0x2C]
	0x03B6A918 LDR X0, [X21]
	0x03B6A91C BL 0x1C16F10
	0x03B6A920 LDR X1, [X20]
	0x03B6A924 MOV X20, X0
	0x03B6A928 BL 0x301B7C4
	0x03B6A92C ADRP X8, 0xFFFFFFFFFCF82000
	0x03B6A930 LDR V0, [X8 + 0xEF]
	0x03B6A934 STR X20, [X19 + 0x30]
	0x03B6A938 MOV X0, X19
	0x03B6A93C LDP X22, X21, [X31 + 0x10]
	0x03B6A940 STUR V0, [X19 + 0x38]
	0x03B6A944 LDP X20, X19, [X31 + 0x20]
	0x03B6A948 MOV X1, X31
	0x03B6A94C LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x879000
	008 Move X23, 0x5B1000
	009 Move X20, 0x5F2000
	010 Move X21, 0x58A000
	011 Move W8, [X22+2520]
	012 Move X23, [X23+3632]
	013 Move X20, [X20+1320]
	014 Move X21, [X21+2416]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x58A000
	021 Move X0, [X0+2416]
	022 Call 0x1C17CF4
	023 Move X0, 0x5B1000
	024 Move X0, [X0+3632]
	025 Call 0x1C17CF4
	026 Move X0, 0x5F2000
	027 Move X0, [X0+1320]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+2520], W8
	031 Move X0, [X23]
	032 Call 0x1C17F10
	033 Move X2, [X20]
	034 Move X1, X19
	035 Move X3, X31
	036 Move X20, X0
	037 Call UnityAction..ctor, X0, X1, X2
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X1, X31
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Call Application.remove_onBeforeRender, X0
	052 Return 

Method: System.Void Start()

Disassembly:
	0x03B6A950 B 0x3C36C30

ISIL:
	001 Call XRGazeAssistance.Initialize, X0
	002 Return 

Method: System.Void Update()

Disassembly:
	0x03B6A954 B 0x3B6A52C
	0x03B6A958 B 0x3B6A6AC
	0x03B6A95C SUB X31, X31, 0xD0
	0x03B6A960 STP D15, D14, [X31 + 0x60]
	0x03B6A964 STP D13, D12, [X31 + 0x70]
	0x03B6A968 STP D11, D10, [X31 + 0x80]
	0x03B6A96C STP D9, D8, [X31 + 0x90]
	0x03B6A970 STP X30, X23, [X31 + 0xA0]
	0x03B6A974 STP X22, X21, [X31 + 0xB0]
	0x03B6A978 STP X20, X19, [X31 + 0xC0]
	0x03B6A97C STP S5, S1, [X31 + 0x58]
	0x03B6A980 STR S3, [X31 + 0x10]
	0x03B6A984 LDP S3, S1, [X2]
	0x03B6A988 STR S2, [X31 + 0x2C]
	0x03B6A98C LDR V2, [X2 + 0x8]
	0x03B6A990 LDR V8, [X1]
	0x03B6A994 LDR V9, [X1 + 0x8]
	0x03B6A998 LDR V11, [X0]
	0x03B6A99C LDR V12, [X0 + 0x8]
	0x03B6A9A0 STR S0, [X31 + 0x54]
	0x03B6A9A4 MOV V0.16B, V3.16B
	0x03B6A9A8 MOV X0, X31
	0x03B6A9AC MOV X19, X3
	0x03B6A9B0 MOV V10.16B, V4.16B
	0x03B6A9B4 MOV X20, X2
	0x03B6A9B8 BL 0x3887BE4
	0x03B6A9BC ADRP X21, 0x877000
	0x03B6A9C0 LDRB W8, [X21 + 0x585]
	0x03B6A9C4 STP S1, S0, [X31 + 0x4C]
	0x03B6A9C8 STR S2, [X31 + 0x48]
	0x03B6A9CC CBNZ W8, 0x3B6A9E4
	0x03B6A9D0 ADRP X0, 0x589000
	0x03B6A9D4 LDR X0, [X0 + 0x5A8]
	0x03B6A9D8 BL 0x1C16CF4
	0x03B6A9DC MOVZ W8, 0x1
	0x03B6A9E0 STRB W8, [X21 + 0x585]
	0x03B6A9E4 STR S10, [X31 + 0x14]
	0x03B6A9E8 ADRP X22, 0x589000
	0x03B6A9EC LDR X22, [X22 + 0x5A8]
	0x03B6A9F0 LDR X0, [X22]
	0x03B6A9F4 LDR W8, [X0 + 0xE0]
	0x03B6A9F8 CBNZ W8, 0x3B6AA00
	0x03B6A9FC BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x879000
	008 Move W8, [X20+2521]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5F2000
	015 Move X0, [X0+1256]
	016 Call 0x1C17CF4
	017 Move X0, 0x5F2000
	018 Move X0, [X0+1264]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2521], W8
	022 Move X8, [X19+32]
	023 Compare X8, 0
	024 JumpIfEqual {48}
	025 Move X0, [X19+48]
	026 Compare X0, 0
	027 JumpIfEqual {48}
	028 Move X23, 0x5F2000
	029 Move X21, [X8+672]
	030 Move X23, [X23+1264]
	031 Move W20, W31
	032 Move W8, [X0+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X2, [X23]
	035 Move W1, W20
	036 Call List`1<Object>.get_Item, X0, X1
	037 Compare X0, 0
	038 JumpIfEqual {48}
	039 Move X22, X0
	040 Call InteractorData.RestoreVisuals, X0
	041 Move X0, X22
	042 Move X1, X21
	043 Call InteractorData.UpdateFallbackRayOrigin, X0, X1
	044 Move X0, [X19+48]
	045 Add W20, W20, 1
	046 Compare X0, 0
	047 JumpIfNotEqual {32}
	048 Call 0x1C17F20
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Move X23, [X31+56]
	055 Return 

Method: System.Void LateUpdate()

Disassembly:
	0x03B6AAF8 FMUL S15, S11, S0
	0x03B6AAFC MOV V0.16B, V14.16B
	0x03B6AB00 MOV V1.16B, V13.16B
	0x03B6AB04 MOV V2.16B, V10.16B
	0x03B6AB08 MOV X0, X31
	0x03B6AB0C STP S14, S13, [X31 + 0x4]
	0x03B6AB10 STR S10, [X31 + 0xC]
	0x03B6AB14 BL 0x3887BE0
	0x03B6AB18 MOV V11.16B, V0.16B
	0x03B6AB1C MOV V9.16B, V1.16B
	0x03B6AB20 MOV V10.16B, V2.16B
	0x03B6AB24 MOV V0.16B, V12.16B
	0x03B6AB28 MOV V1.16B, V8.16B
	0x03B6AB2C MOV V2.16B, V15.16B
	0x03B6AB30 MOV X0, X31
	0x03B6AB34 STP S12, S15, [X31 + 0x20]
	0x03B6AB38 STR S8, [X31 + 0x28]
	0x03B6AB3C BL 0x3887BE0
	0x03B6AB40 ADRP X23, 0x86E000
	0x03B6AB44 LDRB W8, [X23 + 0xA24]
	0x03B6AB48 MOV V8.16B, V0.16B
	0x03B6AB4C MOV V14.16B, V1.16B
	0x03B6AB50 MOV V13.16B, V2.16B
	0x03B6AB54 CBNZ W8, 0x3B6AB6C
	0x03B6AB58 ADRP X0, 0x589000
	0x03B6AB5C LDR X0, [X0 + 0x5A8]
	0x03B6AB60 BL 0x1C16CF4
	0x03B6AB64 MOVZ W8, 0x1
	0x03B6AB68 STRB W8, [X23 + 0xA24]
	0x03B6AB6C LDR X0, [X22]
	0x03B6AB70 FMUL S0, S11, S11
	0x03B6AB74 FMUL S1, S9, S9
	0x03B6AB78 FADD S0, S0, S1
	0x03B6AB7C FMUL S1, S10, S10
	0x03B6AB80 LDR W8, [X0 + 0xE0]
	0x03B6AB84 FADD S15, S1, S0
	0x03B6AB88 FMUL S0, S8, S8
	0x03B6AB8C FMUL S1, S14, S14
	0x03B6AB90 FADD S0, S0, S1
	0x03B6AB94 FMUL S1, S13, S13
	0x03B6AB98 MOV V12.16B, V10.16B
	0x03B6AB9C FADD S10, S1, S0
	0x03B6ABA0 CBNZ W8, 0x3B6ABA8
	0x03B6ABA4 BL 0x1C16DFC
	0x03B6ABA8 ADRP X8, 0xFFFFFFFFFCF7F000
	0x03B6ABAC LDR V1, [X8 + 0xFE8]
	0x03B6ABB0 FMUL S0, S15, S10
	0x03B6ABB4 FSQRT S0, S0
	0x03B6ABB8 FCMP S0, S1
	0x03B6ABBC FMOV S1, W31
	0x03B6ABC0 B.MI 0x3B6AC18
	0x03B6ABC4 LDR X0, [X22]
	0x03B6ABC8 FMUL S1, S11, S8
	0x03B6ABCC FMUL S2, S9, S14
	0x03B6ABD0 FMUL S3, S12, S13
	0x03B6ABD4 FADD S1, S1, S2
	0x03B6ABD8 FADD S1, S3, S1
	0x03B6ABDC LDR W8, [X0 + 0xE0]
	0x03B6ABE0 FDIV S0, S1, S0
	0x03B6ABE4 FMOV S1, 1
	0x03B6ABE8 FMOV S2, -1
	0x03B6ABEC FMIN S1, S0, S1
	0x03B6ABF0 FCMP S0, S2
	0x03B6ABF4 FCSEL S8, S1, S2, PL
	0x03B6ABF8 CBNZ W8, 0x3B6AC00
	0x03B6ABFC BL 0x1C16DFC
	0x03B6AC00 FCVT S0, S8
	0x03B6AC04 BL 0x3EB1B80
	0x03B6AC08 ADRP X8, 0xFFFFFFFFFCF80000
	0x03B6AC0C LDR V1, [X8 + 0x448]
	0x00000000 INVALID
	0x03B6AC14 FMUL S1, S0, S1
	0x03B6AC18 LDR V0, [X31 + 0x5C]
	0x03B6AC1C FCMP S1, S0
	0x03B6AC20 B.LE 0x3B6AC38
	0x03B6AC24 LDR W8, [X20 + 0x8]
	0x03B6AC28 LDR X9, [X20]
	0x03B6AC2C STR W8, [X19 + 0x8]
	0x03B6AC30 STR X9, [X19]
	0x03B6AC34 B 0x3B6AC88
	0x03B6AC38 LDP S1, S0, [X31 + 0x4C]
	0x03B6AC3C LDR V2, [X31 + 0x48]
	0x03B6AC40 LDP S10, S9, [X31 + 0x54]
	0x03B6AC44 FMUL S0, S0, S0
	0x03B6AC48 FMUL S1, S1, S1
	0x03B6AC4C FMUL S2, S2, S2
	0x03B6AC50 FADD S0, S0, S1

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x879000
	010 Move W8, [X20+2522]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x5F2000
	017 Move X0, [X0+1256]
	018 Call 0x1C17CF4
	019 Move X0, 0x5F2000
	020 Move X0, [X0+1264]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+2522], W8
	024 Move X0, [X19+32]
	025 Compare X0, 0
	026 JumpIfEqual {118}
	027 Move X1, X31
	028 Call Behaviour.get_isActiveAndEnabled, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {109}
	033 Move X8, [X19+32]
	034 Compare X8, 0
	035 JumpIfEqual {118}
	036 Move X0, [X19+72]
	037 Move X20, [X8+672]
	038 Compare X0, 0
	039 JumpIfEqual {49}
	040 Move V0, [X19+40]
	041 Move X1, X20
	042 Move W2, W31
	043 Call InteractorData.UpdateFallbackState, X0, X1, V0, X2
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {49}
	048 Move [X19+72], X31
	049 Move X0, [X19+48]
	050 Compare X0, 0
	051 JumpIfEqual {118}
	052 Move X24, 0x5F2000
	053 Move X24, [X24+1264]
	054 Move W23, W31
	055 Move W21, W31
	056 Move W8, [X0+24]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X2, [X24]
	059 Move W1, W21
	060 Call List`1<Object>.get_Item, X0, X1
	061 Compare X0, 0
	062 JumpIfEqual {118}
	063 Move W9, [X0+25]
	064 Move X8, [X19+72]
	065 Move X22, X0
	066 NotImplemented "Instruction CMP not yet implemented."
	067 NotImplemented "Instruction CSET not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move V0, [X19+40]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 NotImplemented "Instruction CSET not yet implemented."
	072 Move X0, X22
	073 Move X1, X20
	074 Call InteractorData.UpdateFallbackState, X0, X1, V0, X2
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfNotEqual {80}
	079 Move [X19+72], X22
	080 Move X0, [X19+48]
	081 Or W23, W23, W25
	082 Add W21, W21, 1
	083 Compare X0, 0
	084 JumpIfNotEqual {56}
	085 Move W8, [X19+44]
	086 Compare W8, 0
	087 JumpIfEqual {109}
	088 Move W8, [X19+88]
	089 Compare W8, 0
	090 JumpIfEqual {109}
	091 Move X0, [X19+80]
	092 Compare X0, 0
	093 JumpIfEqual {118}
	094 Move X8, [X19+72]
	095 Move X20, [X31+48]
	096 Move X19, [X31+56]
	097 Move X22, [X31+32]
	098 Move X21, [X31+40]
	099 Move X2, X31
	100 NotImplemented "Instruction CMP not yet implemented."
	101 NotImplemented "Instruction CSET not yet implemented."
	102 And W1, W23, W8
	103 Move X24, [X31+16]
	104 Move X23, [X31+24]
	105 Move X30, [X31+64]
	106 Move X25, [X31+72]
	107 Call Behaviour.set_enabled, X0, X1
	108 Return 
	109 Move X20, [X31+48]
	110 Move X19, [X31+56]
	111 Move X22, [X31+32]
	112 Move X21, [X31+40]
	113 Move X24, [X31+16]
	114 Move X23, [X31+24]
	115 Move X30, [X31+64]
	116 Move X25, [X31+72]
	117 Return 
	118 Call 0x1C17F20

Method: System.Void OnBeforeRender()

Disassembly:
	0x03B6B34C BL 0x1C16CF4
	0x03B6B350 ADRP X0, 0x5F0000
	0x03B6B354 LDR X0, [X0 + 0x530]
	0x03B6B358 BL 0x1C16CF4
	0x03B6B35C ADRP X0, 0x5F0000
	0x03B6B360 LDR X0, [X0 + 0x548]
	0x03B6B364 BL 0x1C16CF4
	0x03B6B368 ADRP X0, 0x5F0000
	0x03B6B36C LDR X0, [X0 + 0x550]
	0x03B6B370 BL 0x1C16CF4
	0x03B6B374 MOVZ W8, 0x1
	0x03B6B378 STRB W8, [X20 + 0x9E4]
	0x03B6B37C LDR X8, [X23]
	0x03B6B380 LDR W9, [X8 + 0xE0]
	0x03B6B384 CBNZ W9, 0x3B6B394
	0x03B6B388 MOV X0, X8
	0x03B6B38C BL 0x1C16DFC
	0x03B6B390 LDR X8, [X23]
	0x03B6B394 LDR X9, [X8 + 0xB8]
	0x03B6B398 LDR X10, [X9]
	0x03B6B39C CBNZ X10, 0x3B6B40C
	0x03B6B3A0 LDR W10, [X8 + 0xE0]
	0x03B6B3A4 CBNZ W10, 0x3B6B3B8
	0x03B6B3A8 MOV X0, X8
	0x03B6B3AC BL 0x1C16DFC
	0x03B6B3B0 LDR X8, [X23]
	0x03B6B3B4 LDR X9, [X8 + 0xB8]
	0x03B6B3B8 ADRP X8, 0x5B0000
	0x03B6B3BC LDR X20, [X9 + 0x8]
	0x03B6B3C0 LDR X8, [X8 + 0x848]
	0x03B6B3C4 LDR X0, [X8]
	0x03B6B3C8 ADRP X8, 0x5F0000
	0x03B6B3CC LDR X8, [X8 + 0x550]
	0x03B6B3D0 LDR X21, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x878000
	006 Move W8, [X20+2523]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x5F1000
	013 Move X0, [X0+1256]
	014 Call 0x1C17CF4
	015 Move X0, 0x5F1000
	016 Move X0, [X0+1264]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2523], W8
	020 Move X0, [X19+48]
	021 Compare X0, 0
	022 JumpIfEqual {38}
	023 Move X21, 0x5F1000
	024 Move X21, [X21+1264]
	025 Move W20, W31
	026 Move W8, [X0+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X2, [X21]
	029 Move W1, W20
	030 Call List`1<Object>.get_Item, X0, X1
	031 Compare X0, 0
	032 JumpIfEqual {38}
	033 Call InteractorData.UpdateLineVisualOrigin, X0
	034 Move X0, [X19+48]
	035 Add W20, W20, 1
	036 Compare X0, 0
	037 JumpIfNotEqual {26}
	038 Call 0x1C17F20
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return 

Method: UnityEngine.Vector3 GetAssistedVelocity(in UnityEngine.Vector3 source, in UnityEngine.Vector3 velocity, System.Single gravity)

Disassembly:
	0x03B6B52C LDR X8, [X8 + 0xB8]
	0x03B6B530 STR X19, [X8 + 0x8]
	0x03B6B534 LDP X20, X19, [X31 + 0x10]
	0x03B6B538 LDP X30, X21, [X31], #0x20
	0x03B6B53C RET
	0x03B6B540 RET
	0x03B6B544 B 0x3B6B498
	0x03B6B548 LDR X0, [X0 + 0x10]
	0x03B6B54C RET
	0x03B6B550 STR X1, [X0 + 0x10]
	0x03B6B554 RET
	0x03B6B558 LDR X0, [X0 + 0x18]
	0x03B6B55C RET
	0x03B6B560 STR X1, [X0 + 0x18]
	0x03B6B564 RET
	0x03B6B568 STR X30, [X31 - 0x20]!
	0x03B6B56C STP X20, X19, [X31 + 0x10]
	0x03B6B570 ADRP X20, 0x877000
	0x03B6B574 LDRB W8, [X20 + 0x9E8]
	0x03B6B578 MOV X19, X0
	0x03B6B57C TBNZ X8, 0x0, 0x3B6B594
	0x03B6B580 ADRP X0, 0x5EF000
	0x03B6B584 LDR X0, [X0 + 0x368]
	0x03B6B588 BL 0x1C16CF4
	0x03B6B58C MOVZ W8, 0x1
	0x03B6B590 STRB W8, [X20 + 0x9E8]
	0x03B6B594 LDR X8, [X19 + 0x10]
	0x03B6B598 CBZ X8, 0x3B6B5BC
	0x03B6B59C ADRP X9, 0x5EF000
	0x03B6B5A0 LDR X9, [X9 + 0x368]
	0x03B6B5A4 LDR X10, [X8]
	0x03B6B5A8 LDR X9, [X9]
	0x03B6B5AC LDRB W12, [X10 + 0x130]
	0x03B6B5B0 LDRB W11, [X9 + 0x130]
	0x03B6B5B4 CMP W12, W11
	0x03B6B5B8 B.CS 0x3B6B5C4
	0x03B6B5BC MOV X0, X31
	0x03B6B5C0 B 0x3B6B5D8
	0x03B6B5C4 LDR X10, [X10 + 0xC8]
	0x03B6B5C8 ADD X10, X10, X11, 0x3, LSL
	0x03B6B5CC LDUR X10, [X10 - 0x8]
	0x03B6B5D0 CMP X10, X9
	0x03B6B5D4 CSEL X0, X8, X31, EQ
	0x03B6B5D8 LDP X20, X19, [X31 + 0x10]
	0x03B6B5DC LDR X30, [X31], #0x20
	0x03B6B5E0 RET
	0x03B6B5E4 STR X1, [X0 + 0x10]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], D8
	003 Move [X31+40], X30
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X22, 0x878000
	009 Move W8, [X22+2524]
	010 Move V8, V0
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x590000
	019 Move X0, [X0+1208]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2524], W8
	023 Move [X31+24], W31
	024 Move [X31+16], X31
	025 Move X8, [X21+32]
	026 Compare X8, 0
	027 JumpIfEqual {58}
	028 Move X9, 0x590000
	029 Move X9, [X9+1208]
	030 Move V0, [X8+824]
	031 Move V1, [X8+832]
	032 Add X1, X31, 0
	033 Move X8, [X9]
	034 Move [X31], D0
	035 Move [X31+8], S1
	036 Move S1, [X21+56]
	037 Move S2, [X21+60]
	038 Move X8, [X8+184]
	039 Move S4, [X21+64]
	040 Move S3, [X21+68]
	041 Add X3, X31, 16
	042 Move X0, X20
	043 Move V5, [X8]
	044 Move X2, X19
	045 Move V0, V8
	046 Call XRGazeAssistance.GetAssistedVelocityInternal, X0, X1, X2, V0, V1, V2, V3, V4, V5, X3
	047 Move S0, [X31+16]
	048 Move S1, [X31+20]
	049 Move V2, [X31+24]
	050 Move X20, [X31+64]
	051 Move X19, [X31+72]
	052 Move X22, [X31+48]
	053 Move X21, [X31+56]
	054 Move X30, [X31+40]
	055 Move V8, [X31+32]
	056 Add X31, X31, 80
	057 Return X0
	058 Call 0x1C17F20

Method: UnityEngine.Vector3 GetAssistedVelocity(in UnityEngine.Vector3 source, in UnityEngine.Vector3 velocity, System.Single gravity, System.Single maxAngle)

Disassembly:
	0x03B6B6AC LDR X1, [X21]
	0x03B6B6B0 MOV X0, X19
	0x03B6B6B4 LDP X20, X19, [X31 + 0x10]
	0x03B6B6B8 LDP X30, X21, [X31], #0x20
	0x03B6B6BC B 0x2729B5C
	0x03B6B6C0 LDR W9, [X0 + 0x40]
	0x03B6B6C4 LDP V1, V0, [X0 + 0x20]
	0x03B6B6C8 STR W9, [X8 + 0x20]
	0x03B6B6CC STP V1, V0, [X8]
	0x03B6B6D0 RET
	0x03B6B6D4 LDR W8, [X1 + 0x20]
	0x03B6B6D8 LDP V1, V0, [X1]
	0x03B6B6DC STR W8, [X0 + 0x40]
	0x03B6B6E0 STP V1, V0, [X0 + 0x20]
	0x03B6B6E4 RET
	0x03B6B6E8 MOV X1, X31
	0x03B6B6EC B 0x33BDD8C
	0x03B6B6F0 STP X30, X21, [X31 - 0x20]!
	0x03B6B6F4 STP X20, X19, [X31 + 0x10]
	0x03B6B6F8 ADRP X20, 0x877000
	0x03B6B6FC ADRP X21, 0x5F0000
	0x03B6B700 LDRB W8, [X20 + 0x9EB]
	0x03B6B704 LDR X21, [X21 + 0x568]
	0x03B6B708 MOV X19, X0
	0x03B6B70C TBNZ X8, 0x0, 0x3B6B724
	0x03B6B710 ADRP X0, 0x5F0000
	0x03B6B714 LDR X0, [X0 + 0x568]
	0x03B6B718 BL 0x1C16CF4
	0x03B6B71C MOVZ W8, 0x1
	0x03B6B720 STRB W8, [X20 + 0x9EB]
	0x03B6B724 LDR X1, [X21]
	0x03B6B728 MOV X0, X19
	0x03B6B72C LDP X20, X19, [X31 + 0x10]
	0x03B6B730 LDP X30, X21, [X31], #0x20
	0x03B6B734 B 0x2729B5C
	0x03B6B738 STR X30, [X31 - 0x20]!
	0x03B6B73C STP X20, X19, [X31 + 0x10]
	0x03B6B740 ADRP X20, 0x877000
	0x03B6B744 LDRB W8, [X20 + 0x9EC]
	0x03B6B748 MOV X19, X0
	0x03B6B74C TBNZ X8, 0x0, 0x3B6B764
	0x03B6B750 ADRP X0, 0x5EF000
	0x03B6B754 LDR X0, [X0 + 0x320]
	0x03B6B758 BL 0x1C16CF4
	0x03B6B75C MOVZ W8, 0x1
	0x03B6B760 STRB W8, [X20 + 0x9EC]
	0x03B6B764 LDR X19, [X19 + 0x10]
	0x03B6B768 CBZ X19, 0x3B6B794
	0x03B6B76C ADRP X8, 0x5EF000

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], D9
	003 Move [X31+40], D8
	004 Move [X31+48], X30
	005 Move [X31+64], X22
	006 Move [X31+72], X21
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 Move X22, 0x878000
	010 Move W8, [X22+2525]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X2
	014 Move X20, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x590000
	021 Move X0, [X0+1208]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2525], W8
	025 Move [X31+24], W31
	026 Move [X31+16], X31
	027 Move X8, [X21+32]
	028 Compare X8, 0
	029 JumpIfEqual {61}
	030 Move X9, 0x590000
	031 Move X9, [X9+1208]
	032 Move V0, [X8+824]
	033 Move V1, [X8+832]
	034 Add X1, X31, 0
	035 Move X8, [X9]
	036 Move [X31], D0
	037 Move [X31+8], S1
	038 Move S4, [X21+64]
	039 Move S3, [X21+68]
	040 Move X8, [X8+184]
	041 Move V2, [X21+60]
	042 Add X3, X31, 16
	043 Move X0, X20
	044 Move V5, [X8]
	045 Move X2, X19
	046 Move V0, V9
	047 Move V1, V8
	048 Call XRGazeAssistance.GetAssistedVelocityInternal, X0, X1, X2, V0, V1, V2, V3, V4, V5, X3
	049 Move S0, [X31+16]
	050 Move S1, [X31+20]
	051 Move V2, [X31+24]
	052 Move X20, [X31+80]
	053 Move X19, [X31+88]
	054 Move X22, [X31+64]
	055 Move X21, [X31+72]
	056 Move X30, [X31+48]
	057 Move D9, [X31+32]
	058 Move D8, [X31+40]
	059 Add X31, X31, 96
	060 Return X0
	061 Call 0x1C17F20

Method: System.Void GetAssistedVelocityInternal(in UnityEngine.Vector3 source, in UnityEngine.Vector3 target, in UnityEngine.Vector3 velocity, System.Single gravity, System.Single maxAngle, System.Single requiredSpeed, System.Single maxSpeedPercent, System.Single assistPercent, System.Single epsilon, out UnityEngine.Vector3 adjustedVelocity)

Disassembly:
	0x03B6B5E8 RET
	0x03B6B5EC STR X30, [X31 - 0x20]!
	0x03B6B5F0 STP X20, X19, [X31 + 0x10]
	0x03B6B5F4 ADRP X20, 0x877000
	0x03B6B5F8 LDRB W8, [X20 + 0x9E9]
	0x03B6B5FC MOV X19, X0
	0x03B6B600 TBNZ X8, 0x0, 0x3B6B618
	0x03B6B604 ADRP X0, 0x5EF000
	0x03B6B608 LDR X0, [X0 + 0x438]
	0x03B6B60C BL 0x1C16CF4
	0x03B6B610 MOVZ W8, 0x1
	0x03B6B614 STRB W8, [X20 + 0x9E9]
	0x03B6B618 LDR X8, [X19 + 0x18]
	0x03B6B61C CBZ X8, 0x3B6B640
	0x03B6B620 ADRP X9, 0x5EF000
	0x03B6B624 LDR X9, [X9 + 0x438]
	0x03B6B628 LDR X10, [X8]
	0x03B6B62C LDR X9, [X9]
	0x03B6B630 LDRB W12, [X10 + 0x130]
	0x03B6B634 LDRB W11, [X9 + 0x130]
	0x03B6B638 CMP W12, W11
	0x03B6B63C B.CS 0x3B6B648
	0x03B6B640 MOV X0, X31
	0x03B6B644 B 0x3B6B65C
	0x03B6B648 LDR X10, [X10 + 0xC8]
	0x03B6B64C ADD X10, X10, X11, 0x3, LSL
	0x03B6B650 LDUR X10, [X10 - 0x8]
	0x03B6B654 CMP X10, X9
	0x03B6B658 CSEL X0, X8, X31, EQ
	0x03B6B65C LDP X20, X19, [X31 + 0x10]
	0x03B6B660 LDR X30, [X31], #0x20
	0x03B6B664 RET
	0x03B6B668 STR X1, [X0 + 0x18]
	0x03B6B66C RET
	0x03B6B670 MOV X1, X31
	0x03B6B674 B 0x33BDD8C
	0x03B6B678 STP X30, X21, [X31 - 0x20]!
	0x03B6B67C STP X20, X19, [X31 + 0x10]
	0x03B6B680 ADRP X20, 0x877000
	0x03B6B684 ADRP X21, 0x5F0000
	0x03B6B688 LDRB W8, [X20 + 0x9EA]
	0x03B6B68C LDR X21, [X21 + 0x560]
	0x03B6B690 MOV X19, X0
	0x03B6B694 TBNZ X8, 0x0, 0x3B6B6AC
	0x03B6B698 ADRP X0, 0x5F0000
	0x03B6B69C LDR X0, [X0 + 0x560]
	0x03B6B6A0 BL 0x1C16CF4
	0x03B6B6A4 MOVZ W8, 0x1
	0x03B6B6A8 STRB W8, [X20 + 0x9EA]

ISIL:
	001 Move [X31-112], D13
	002 Move [X31-104], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X23, 0x878000
	015 Move X24, 0x5F1000
	016 Move W8, [X23+2526]
	017 Move X24, [X24+1328]
	018 Move X19, X3
	019 Move V8, V5
	020 Move V9, V4
	021 Move V10, V3
	022 Move V11, V2
	023 Move V12, V1
	024 Move V13, V0
	025 Move X20, X2
	026 Move X21, X1
	027 Move X22, X0
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {37}
	032 Move X0, 0x5F1000
	033 Move X0, [X0+1328]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X23+2526], W8
	037 Move X0, [X24]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X22
	043 Move X1, X21
	044 Move X2, X20
	045 Move V2, V11
	046 Move V3, V10
	047 Move V4, V9
	048 Move V5, V8
	049 Move X3, X19
	050 Move X20, [X31+96]
	051 Move X19, [X31+104]
	052 Move X22, [X31+80]
	053 Move X21, [X31+88]
	054 Move X24, [X31+64]
	055 Move X23, [X31+72]
	056 Move X30, [X31+48]
	057 Move D9, [X31+32]
	058 Move D8, [X31+40]
	059 Move D11, [X31+16]
	060 Move D10, [X31+24]
	061 Move V0, V13
	062 Move V1, V12
	063 Move D13, [X31+112]
	064 Move D12, [X31+120]
	065 Call GetAssistedVelocityInternal_00000691$BurstDirectCall.Invoke, X0, X1, X2, V0, V1, V2, V3, V4, V5, X3
	066 Return 

Method: System.Void .ctor()

Disassembly:
	0x03B6B8BC STP X30, X21, [X31 - 0x20]!
	0x03B6B8C0 STP X20, X19, [X31 + 0x10]
	0x03B6B8C4 ADRP X20, 0x877000
	0x03B6B8C8 ADRP X21, 0x5F0000
	0x03B6B8CC LDRB W8, [X20 + 0x9F1]
	0x03B6B8D0 LDR X21, [X21 + 0x578]
	0x03B6B8D4 MOV X19, X0
	0x03B6B8D8 TBNZ X8, 0x0, 0x3B6B8F0
	0x03B6B8DC ADRP X0, 0x5F0000
	0x03B6B8E0 LDR X0, [X0 + 0x578]
	0x03B6B8E4 BL 0x1C16CF4
	0x03B6B8E8 MOVZ W8, 0x1
	0x03B6B8EC STRB W8, [X20 + 0x9F1]
	0x03B6B8F0 LDR X1, [X21]
	0x03B6B8F4 MOV X0, X19
	0x03B6B8F8 LDP X20, X19, [X31 + 0x10]
	0x03B6B8FC LDP X30, X21, [X31], #0x20
	0x03B6B900 B 0x2729B5C
	0x03B6B904 STR X30, [X31 - 0x20]!
	0x03B6B908 STP X20, X19, [X31 + 0x10]
	0x03B6B90C ADRP X20, 0x877000
	0x03B6B910 LDRB W8, [X20 + 0x9F2]
	0x03B6B914 MOV X19, X0
	0x03B6B918 TBNZ X8, 0x0, 0x3B6B930
	0x03B6B91C ADRP X0, 0x5EF000
	0x03B6B920 LDR X0, [X0 + 0x328]
	0x03B6B924 BL 0x1C16CF4
	0x03B6B928 MOVZ W8, 0x1
	0x03B6B92C STRB W8, [X20 + 0x9F2]
	0x03B6B930 LDR X19, [X19 + 0x10]
	0x03B6B934 CBZ X19, 0x3B6B960
	0x03B6B938 ADRP X8, 0x5EF000
	0x03B6B93C LDR X8, [X8 + 0x328]
	0x03B6B940 MOV X0, X19
	0x03B6B944 LDR X20, [X8]
	0x03B6B948 MOV X1, X20
	0x03B6B94C BL 0x1C16E00
	0x03B6B950 CBNZ X0, 0x3B6B964

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x878000
	007 Move X21, 0x5F1000
	008 Move X20, 0x5F1000
	009 Move W8, [X22+2527]
	010 Move X21, [X21+1336]
	011 Move X20, [X20+1344]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x5F1000
	018 Move X0, [X0+1344]
	019 Call 0x1C17CF4
	020 Move X0, 0x5F1000
	021 Move X0, [X0+1336]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2527], W8
	025 Move W8, 0x42700000
	026 Move W9, 1
	027 Move [X19+40], W8
	028 Move [X19+44], W9
	029 Move X0, [X21]
	030 Call 0x1C17F10
	031 Move X1, [X20]
	032 Move X20, X0
	033 Call List`1<Object>..ctor, X0
	034 Move X8, -50847744
	035 Move V0, [X8+239]
	036 Move [X19+48], X20
	037 Move X0, X19
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move [X19+56], V0
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X1, X31
	044 Move X30, [X31+48]
	045 Call MonoBehaviour..ctor, X0
	046 Return 

Method: UnityEngine.Vector3 UnityEngine.XR.Interaction.Toolkit.IXRAimAssist.GetAssistedVelocity(in UnityEngine.Vector3 source, in UnityEngine.Vector3 velocity, System.Single gravity)

Disassembly:
	0x03B6B954 MOV X0, X19

ISIL:
	001 Call XRGazeAssistance.GetAssistedVelocity, X0, X1, X2, V0
	002 Return X0

Method: UnityEngine.Vector3 UnityEngine.XR.Interaction.Toolkit.IXRAimAssist.GetAssistedVelocity(in UnityEngine.Vector3 source, in UnityEngine.Vector3 velocity, System.Single gravity, System.Single maxAngle)

Disassembly:
	0x03B6B958 MOV X1, X20

ISIL:
	001 Call XRGazeAssistance.GetAssistedVelocity, X0, X1, X2, V0, V1
	002 Return X0

Method: System.Void GetAssistedVelocityInternal$BurstManaged(in UnityEngine.Vector3 source, in UnityEngine.Vector3 target, in UnityEngine.Vector3 velocity, System.Single gravity, System.Single maxAngle, System.Single requiredSpeed, System.Single maxSpeedPercent, System.Single assistPercent, System.Single epsilon, out UnityEngine.Vector3 adjustedVelocity)

Disassembly:
	0x03B6B95C BL 0x1C171E0
	0x03B6B960 MOV X0, X31
	0x03B6B964 LDP X20, X19, [X31 + 0x10]
	0x03B6B968 LDR X30, [X31], #0x20
	0x03B6B96C RET
	0x03B6B970 STR X1, [X0 + 0x10]
	0x03B6B974 RET
	0x03B6B978 STR X1, [X0 + 0x18]
	0x03B6B97C RET
	0x03B6B980 LDR X0, [X0 + 0x20]
	0x03B6B984 RET
	0x03B6B988 STR X1, [X0 + 0x20]
	0x03B6B98C RET
	0x03B6B990 MOV X1, X31
	0x03B6B994 B 0x33BDD8C
	0x03B6B998 STP X30, X21, [X31 - 0x20]!
	0x03B6B99C STP X20, X19, [X31 + 0x10]
	0x03B6B9A0 ADRP X20, 0x877000
	0x03B6B9A4 ADRP X21, 0x5F0000
	0x03B6B9A8 LDRB W8, [X20 + 0x9F4]
	0x03B6B9AC LDR X21, [X21 + 0x580]
	0x03B6B9B0 MOV X19, X0
	0x03B6B9B4 TBNZ X8, 0x0, 0x3B6B9CC
	0x03B6B9B8 ADRP X0, 0x5F0000
	0x03B6B9BC LDR X0, [X0 + 0x580]
	0x03B6B9C0 BL 0x1C16CF4
	0x03B6B9C4 MOVZ W8, 0x1
	0x03B6B9C8 STRB W8, [X20 + 0x9F4]
	0x03B6B9CC LDR X1, [X21]
	0x03B6B9D0 MOV X0, X19
	0x03B6B9D4 LDP X20, X19, [X31 + 0x10]
	0x03B6B9D8 LDP X30, X21, [X31], #0x20
	0x03B6B9DC B 0x2729B5C
	0x03B6B9E0 STR X30, [X31 - 0x20]!
	0x03B6B9E4 STP X20, X19, [X31 + 0x10]
	0x03B6B9E8 ADRP X20, 0x877000
	0x03B6B9EC LDRB W8, [X20 + 0x9F5]
	0x03B6B9F0 MOV X19, X0
	0x03B6B9F4 TBNZ X8, 0x0, 0x3B6BA0C
	0x03B6B9F8 ADRP X0, 0x5EF000
	0x03B6B9FC LDR X0, [X0 + 0x328]
	0x03B6BA00 BL 0x1C16CF4
	0x03B6BA04 MOVZ W8, 0x1
	0x03B6BA08 STRB W8, [X20 + 0x9F5]
	0x03B6BA0C LDR X19, [X19 + 0x10]
	0x03B6BA10 CBZ X19, 0x3B6BA3C
	0x03B6BA14 ADRP X8, 0x5EF000
	0x03B6BA18 LDR X8, [X8 + 0x328]
	0x03B6BA1C MOV X0, X19
	0x03B6BA20 LDR X20, [X8]
	0x03B6BA24 MOV X1, X20
	0x03B6BA28 BL 0x1C16E00
	0x03B6BA2C CBNZ X0, 0x3B6BA40
	0x03B6BA30 MOV X0, X19
	0x03B6BA34 MOV X1, X20
	0x03B6BA38 BL 0x1C171E0
	0x03B6BA3C MOV X0, X31
	0x03B6BA40 LDP X20, X19, [X31 + 0x10]
	0x03B6BA44 LDR X30, [X31], #0x20
	0x03B6BA48 RET
	0x03B6BA4C STR X1, [X0 + 0x10]
	0x03B6BA50 RET
	0x03B6BA54 STR X1, [X0 + 0x18]
	0x03B6BA58 RET
	0x03B6BA5C LDR X0, [X0 + 0x20]
	0x03B6BA60 RET
	0x03B6BA64 STR X1, [X0 + 0x20]
	0x03B6BA68 RET
	0x03B6BA6C LDRB W0, [X0 + 0x28]
	0x03B6BA70 RET
	0x03B6BA74 AND W8, W1, 0x1
	0x03B6BA78 STRB W8, [X0 + 0x28]
	0x03B6BA7C RET
	0x03B6BA80 MOV X1, X31
	0x03B6BA84 B 0x33BDD8C
	0x03B6BA88 STP X30, X21, [X31 - 0x20]!
	0x03B6BA8C STP X20, X19, [X31 + 0x10]
	0x03B6BA90 ADRP X20, 0x877000
	0x03B6BA94 ADRP X21, 0x5F0000
	0x03B6BA98 LDRB W8, [X20 + 0x9F7]
	0x03B6BA9C LDR X21, [X21 + 0x588]
	0x03B6BAA0 MOV X19, X0
	0x03B6BAA4 TBNZ X8, 0x0, 0x3B6BABC
	0x03B6BAA8 ADRP X0, 0x5F0000
	0x03B6BAAC LDR X0, [X0 + 0x588]
	0x03B6BAB0 BL 0x1C16CF4
	0x03B6BAB4 MOVZ W8, 0x1
	0x03B6BAB8 STRB W8, [X20 + 0x9F7]
	0x03B6BABC LDR X1, [X21]
	0x03B6BAC0 MOV X0, X19
	0x03B6BAC4 LDP X20, X19, [X31 + 0x10]
	0x03B6BAC8 LDP X30, X21, [X31], #0x20
	0x03B6BACC B 0x2729B5C
	0x03B6BAD0 LDR X0, [X0 + 0x20]
	0x03B6BAD4 RET
	0x03B6BAD8 STR X1, [X0 + 0x20]
	0x03B6BADC RET
	0x03B6BAE0 STR X30, [X31 - 0x20]!
	0x03B6BAE4 STP X20, X19, [X31 + 0x10]
	0x03B6BAE8 ADRP X20, 0x877000
	0x03B6BAEC LDRB W8, [X20 + 0x9F8]
	0x03B6BAF0 MOV X19, X0
	0x03B6BAF4 TBNZ X8, 0x0, 0x3B6BB0C
	0x03B6BAF8 ADRP X0, 0x5EF000
	0x03B6BAFC LDR X0, [X0 + 0x130]
	0x03B6BB00 BL 0x1C16CF4
	0x03B6BB04 MOVZ W8, 0x1
	0x03B6BB08 STRB W8, [X20 + 0x9F8]
	0x03B6BB0C LDR X19, [X19 + 0x18]
	0x03B6BB10 CBZ X19, 0x3B6BB3C
	0x03B6BB14 ADRP X8, 0x5EF000
	0x03B6BB18 LDR X8, [X8 + 0x130]
	0x03B6BB1C MOV X0, X19
	0x03B6BB20 LDR X20, [X8]
	0x03B6BB24 MOV X1, X20
	0x03B6BB28 BL 0x1C16E00
	0x03B6BB2C CBNZ X0, 0x3B6BB40
	0x03B6BB30 MOV X0, X19
	0x03B6BB34 MOV X1, X20
	0x03B6BB38 BL 0x1C171E0
	0x03B6BB3C MOV X0, X31
	0x03B6BB40 LDP X20, X19, [X31 + 0x10]
	0x03B6BB44 LDR X30, [X31], #0x20
	0x03B6BB48 RET
	0x03B6BB4C STR X1, [X0 + 0x18]
	0x03B6BB50 RET
	0x03B6BB54 LDR X0, [X0 + 0x28]
	0x03B6BB58 RET
	0x03B6BB5C STR X1, [X0 + 0x28]
	0x03B6BB60 RET
	0x03B6BB64 MOV X1, X31
	0x03B6BB68 B 0x33BDD8C
	0x03B6BB6C STP X30, X21, [X31 - 0x20]!
	0x03B6BB70 STP X20, X19, [X31 + 0x10]
	0x03B6BB74 ADRP X20, 0x877000
	0x03B6BB78 ADRP X21, 0x5F0000
	0x03B6BB7C LDRB W8, [X20 + 0x9F9]
	0x03B6BB80 LDR X21, [X21 + 0x590]
	0x03B6BB84 MOV X19, X0
	0x03B6BB88 TBNZ X8, 0x0, 0x3B6BBA0
	0x03B6BB8C ADRP X0, 0x5F0000
	0x03B6BB90 LDR X0, [X0 + 0x590]
	0x03B6BB94 BL 0x1C16CF4
	0x03B6BB98 MOVZ W8, 0x1
	0x03B6BB9C STRB W8, [X20 + 0x9F9]
	0x03B6BBA0 LDR X1, [X21]
	0x03B6BBA4 MOV X0, X19
	0x03B6BBA8 LDP X20, X19, [X31 + 0x10]
	0x03B6BBAC LDP X30, X21, [X31], #0x20
	0x03B6BBB0 B 0x2729B5C
	0x03B6BBB4 LDR X0, [X0 + 0x20]
	0x03B6BBB8 RET
	0x03B6BBBC STR X1, [X0 + 0x20]
	0x03B6BBC0 RET
	0x03B6BBC4 STR X30, [X31 - 0x20]!
	0x03B6BBC8 STP X20, X19, [X31 + 0x10]
	0x03B6BBCC ADRP X20, 0x877000
	0x03B6BBD0 LDRB W8, [X20 + 0x9FA]
	0x03B6BBD4 MOV X19, X0
	0x03B6BBD8 TBNZ X8, 0x0, 0x3B6BBF0
	0x03B6BBDC ADRP X0, 0x5EF000
	0x03B6BBE0 LDR X0, [X0 + 0x130]
	0x03B6BBE4 BL 0x1C16CF4
	0x03B6BBE8 MOVZ W8, 0x1
	0x03B6BBEC STRB W8, [X20 + 0x9FA]
	0x03B6BBF0 LDR X19, [X19 + 0x18]
	0x03B6BBF4 CBZ X19, 0x3B6BC20
	0x03B6BBF8 ADRP X8, 0x5EF000
	0x03B6BBFC LDR X8, [X8 + 0x130]
	0x03B6BC00 MOV X0, X19
	0x03B6BC04 LDR X20, [X8]
	0x03B6BC08 MOV X1, X20
	0x03B6BC0C BL 0x1C16E00
	0x03B6BC10 CBNZ X0, 0x3B6BC24
	0x03B6BC14 MOV X0, X19
	0x03B6BC18 MOV X1, X20
	0x03B6BC1C BL 0x1C171E0
	0x03B6BC20 MOV X0, X31
	0x03B6BC24 LDP X20, X19, [X31 + 0x10]
	0x03B6BC28 LDR X30, [X31], #0x20
	0x03B6BC2C RET
	0x03B6BC30 STR X1, [X0 + 0x18]
	0x03B6BC34 RET
	0x03B6BC38 LDR X0, [X0 + 0x28]
	0x03B6BC3C RET
	0x03B6BC40 STR X1, [X0 + 0x28]
	0x03B6BC44 RET
	0x03B6BC48 LDRB W0, [X0 + 0x30]
	0x03B6BC4C RET
	0x03B6BC50 AND W8, W1, 0x1
	0x03B6BC54 STRB W8, [X0 + 0x30]
	0x03B6BC58 RET
	0x03B6BC5C MOV X1, X31
	0x03B6BC60 B 0x33BDD8C
	0x03B6BC64 STP X30, X21, [X31 - 0x20]!
	0x03B6BC68 STP X20, X19, [X31 + 0x10]
	0x03B6BC6C ADRP X20, 0x877000
	0x03B6BC70 ADRP X21, 0x5F0000
	0x03B6BC74 LDRB W8, [X20 + 0x9FB]
	0x03B6BC78 LDR X21, [X21 + 0x598]
	0x03B6BC7C MOV X19, X0
	0x03B6BC80 TBNZ X8, 0x0, 0x3B6BC98
	0x03B6BC84 ADRP X0, 0x5F0000
	0x03B6BC88 LDR X0, [X0 + 0x598]
	0x03B6BC8C BL 0x1C16CF4
	0x03B6BC90 MOVZ W8, 0x1
	0x03B6BC94 STRB W8, [X20 + 0x9FB]
	0x03B6BC98 LDR X1, [X21]
	0x03B6BC9C MOV X0, X19
	0x03B6BCA0 LDP X20, X19, [X31 + 0x10]
	0x03B6BCA4 LDP X30, X21, [X31], #0x20
	0x03B6BCA8 B 0x2729B5C
	0x03B6BCAC STR X30, [X31 - 0x20]!
	0x03B6BCB0 STP X20, X19, [X31 + 0x10]
	0x03B6BCB4 ADRP X20, 0x877000
	0x03B6BCB8 LDRB W8, [X20 + 0x9FC]
	0x03B6BCBC MOV X19, X0
	0x03B6BCC0 TBNZ X8, 0x0, 0x3B6BCD8
	0x03B6BCC4 ADRP X0, 0x5F0000
	0x03B6BCC8 LDR X0, [X0 + 0x5A0]
	0x03B6BCCC BL 0x1C16CF4
	0x03B6BCD0 MOVZ W8, 0x1
	0x03B6BCD4 STRB W8, [X20 + 0x9FC]
	0x03B6BCD8 LDR X19, [X19 + 0x10]
	0x03B6BCDC CBZ X19, 0x3B6BD08
	0x03B6BCE0 ADRP X8, 0x5F0000
	0x03B6BCE4 LDR X8, [X8 + 0x5A0]
	0x03B6BCE8 MOV X0, X19
	0x03B6BCEC LDR X20, [X8]
	0x03B6BCF0 MOV X1, X20
	0x03B6BCF4 BL 0x1C16E00
	0x03B6BCF8 CBNZ X0, 0x3B6BD0C
	0x03B6BCFC MOV X0, X19
	0x03B6BD00 MOV X1, X20
	0x03B6BD04 BL 0x1C171E0
	0x03B6BD08 MOV X0, X31
	0x03B6BD0C LDP X20, X19, [X31 + 0x10]
	0x03B6BD10 LDR X30, [X31], #0x20
	0x03B6BD14 RET
	0x03B6BD18 STR X1, [X0 + 0x10]
	0x03B6BD1C RET
	0x03B6BD20 STR X30, [X31 - 0x20]!
	0x03B6BD24 STP X20, X19, [X31 + 0x10]
	0x03B6BD28 ADRP X20, 0x877000
	0x03B6BD2C LDRB W8, [X20 + 0x9FD]
	0x03B6BD30 MOV X19, X0
	0x03B6BD34 TBNZ X8, 0x0, 0x3B6BD4C
	0x03B6BD38 ADRP X0, 0x5EF000
	0x03B6BD3C LDR X0, [X0 + 0xB60]
	0x03B6BD40 BL 0x1C16CF4
	0x03B6BD44 MOVZ W8, 0x1
	0x03B6BD48 STRB W8, [X20 + 0x9FD]
	0x03B6BD4C LDR X19, [X19 + 0x18]
	0x03B6BD50 CBZ X19, 0x3B6BD7C
	0x03B6BD54 ADRP X8, 0x5EF000
	0x03B6BD58 LDR X8, [X8 + 0xB60]
	0x03B6BD5C MOV X0, X19
	0x03B6BD60 LDR X20, [X8]
	0x03B6BD64 MOV X1, X20
	0x03B6BD68 BL 0x1C16E00
	0x03B6BD6C CBNZ X0, 0x3B6BD80
	0x03B6BD70 MOV X0, X19
	0x03B6BD74 MOV X1, X20
	0x03B6BD78 BL 0x1C171E0
	0x03B6BD7C MOV X0, X31
	0x03B6BD80 LDP X20, X19, [X31 + 0x10]
	0x03B6BD84 LDR X30, [X31], #0x20
	0x03B6BD88 RET
	0x03B6BD8C STR X1, [X0 + 0x18]
	0x03B6BD90 RET
	0x03B6BD94 MOV X1, X31
	0x03B6BD98 B 0x33BDD8C
	0x03B6BD9C STP X30, X21, [X31 - 0x20]!
	0x03B6BDA0 STP X20, X19, [X31 + 0x10]
	0x03B6BDA4 ADRP X20, 0x877000
	0x03B6BDA8 ADRP X21, 0x5F0000
	0x03B6BDAC LDRB W8, [X20 + 0x9FE]
	0x03B6BDB0 LDR X21, [X21 + 0x5A8]
	0x03B6BDB4 MOV X19, X0
	0x03B6BDB8 TBNZ X8, 0x0, 0x3B6BDD0
	0x03B6BDBC ADRP X0, 0x5F0000
	0x03B6BDC0 LDR X0, [X0 + 0x5A8]
	0x03B6BDC4 BL 0x1C16CF4
	0x03B6BDC8 MOVZ W8, 0x1
	0x03B6BDCC STRB W8, [X20 + 0x9FE]
	0x03B6BDD0 LDR X1, [X21]
	0x03B6BDD4 MOV X0, X19
	0x03B6BDD8 LDP X20, X19, [X31 + 0x10]
	0x03B6BDDC LDP X30, X21, [X31], #0x20
	0x03B6BDE0 B 0x2729B5C
	0x03B6BDE4 STR X30, [X31 - 0x20]!
	0x03B6BDE8 STP X20, X19, [X31 + 0x10]
	0x03B6BDEC ADRP X20, 0x877000
	0x03B6BDF0 LDRB W8, [X20 + 0x9FF]
	0x03B6BDF4 MOV X19, X0
	0x03B6BDF8 TBNZ X8, 0x0, 0x3B6BE10
	0x03B6BDFC ADRP X0, 0x5F0000
	0x03B6BE00 LDR X0, [X0 + 0x5A0]
	0x03B6BE04 BL 0x1C16CF4
	0x03B6BE08 MOVZ W8, 0x1
	0x03B6BE0C STRB W8, [X20 + 0x9FF]
	0x03B6BE10 LDR X19, [X19 + 0x10]
	0x03B6BE14 CBZ X19, 0x3B6BE40
	0x03B6BE18 ADRP X8, 0x5F0000
	0x03B6BE1C LDR X8, [X8 + 0x5A0]
	0x03B6BE20 MOV X0, X19
	0x03B6BE24 LDR X20, [X8]
	0x03B6BE28 MOV X1, X20
	0x03B6BE2C BL 0x1C16E00
	0x03B6BE30 CBNZ X0, 0x3B6BE44
	0x03B6BE34 MOV X0, X19
	0x03B6BE38 MOV X1, X20
	0x03B6BE3C BL 0x1C171E0
	0x03B6BE40 MOV X0, X31
	0x03B6BE44 LDP X20, X19, [X31 + 0x10]
	0x03B6BE48 LDR X30, [X31], #0x20
	0x03B6BE4C RET
	0x03B6BE50 STR X1, [X0 + 0x10]
	0x03B6BE54 RET
	0x03B6BE58 STR X30, [X31 - 0x20]!
	0x03B6BE5C STP X20, X19, [X31 + 0x10]
	0x03B6BE60 ADRP X20, 0x877000
	0x03B6BE64 LDRB W8, [X20 + 0xA00]
	0x03B6BE68 MOV X19, X0
	0x03B6BE6C TBNZ X8, 0x0, 0x3B6BE84
	0x03B6BE70 ADRP X0, 0x5EF000
	0x03B6BE74 LDR X0, [X0 + 0xB60]
	0x03B6BE78 BL 0x1C16CF4
	0x03B6BE7C MOVZ W8, 0x1
	0x03B6BE80 STRB W8, [X20 + 0xA00]
	0x03B6BE84 LDR X19, [X19 + 0x18]
	0x03B6BE88 CBZ X19, 0x3B6BEB4
	0x03B6BE8C ADRP X8, 0x5EF000
	0x03B6BE90 LDR X8, [X8 + 0xB60]
	0x03B6BE94 MOV X0, X19
	0x03B6BE98 LDR X20, [X8]
	0x03B6BE9C MOV X1, X20
	0x03B6BEA0 BL 0x1C16E00
	0x03B6BEA4 CBNZ X0, 0x3B6BEB8
	0x03B6BEA8 MOV X0, X19
	0x03B6BEAC MOV X1, X20
	0x03B6BEB0 BL 0x1C171E0
	0x03B6BEB4 MOV X0, X31
	0x03B6BEB8 LDP X20, X19, [X31 + 0x10]
	0x03B6BEBC LDR X30, [X31], #0x20
	0x03B6BEC0 RET
	0x03B6BEC4 STR X1, [X0 + 0x18]
	0x03B6BEC8 RET
	0x03B6BECC MOV X1, X31
	0x03B6BED0 B 0x33BDD8C
	0x03B6BED4 LDR X0, [X0 + 0x10]
	0x03B6BED8 RET
	0x03B6BEDC STR X1, [X0 + 0x10]
	0x03B6BEE0 RET
	0x03B6BEE4 MOV X1, X31
	0x03B6BEE8 B 0x33BDD8C
	0x03B6BEEC LDR X0, [X0 + 0x18]
	0x03B6BEF0 RET
	0x03B6BEF4 STR X1, [X0 + 0x18]
	0x03B6BEF8 RET
	0x03B6BEFC LDR X0, [X0 + 0x20]
	0x03B6BF00 RET
	0x03B6BF04 STR X1, [X0 + 0x20]
	0x03B6BF08 RET
	0x03B6BF0C MOV X1, X31
	0x03B6BF10 B 0x33BDD8C
	0x03B6BF14 LDR X0, [X0 + 0x18]
	0x03B6BF18 RET
	0x03B6BF1C STR X1, [X0 + 0x18]
	0x03B6BF20 RET
	0x03B6BF24 LDR X0, [X0 + 0x20]
	0x03B6BF28 RET
	0x03B6BF2C STR X1, [X0 + 0x20]
	0x03B6BF30 RET
	0x03B6BF34 STR X30, [X31 - 0x20]!
	0x03B6BF38 STP X20, X19, [X31 + 0x10]
	0x03B6BF3C ADRP X20, 0x877000
	0x03B6BF40 LDRB W8, [X20 + 0xA01]
	0x03B6BF44 MOV X19, X0
	0x03B6BF48 TBNZ X8, 0x0, 0x3B6BF60
	0x03B6BF4C ADRP X0, 0x5EF000
	0x03B6BF50 LDR X0, [X0 + 0x368]
	0x03B6BF54 BL 0x1C16CF4
	0x03B6BF58 MOVZ W8, 0x1
	0x03B6BF5C STRB W8, [X20 + 0xA01]
	0x03B6BF60 LDR X8, [X19 + 0x18]
	0x03B6BF64 CBZ X8, 0x3B6BF88
	0x03B6BF68 ADRP X9, 0x5EF000
	0x03B6BF6C LDR X9, [X9 + 0x368]
	0x03B6BF70 LDR X10, [X8]
	0x03B6BF74 LDR X9, [X9]
	0x03B6BF78 LDRB W12, [X10 + 0x130]
	0x03B6BF7C LDRB W11, [X9 + 0x130]
	0x03B6BF80 CMP W12, W11
	0x03B6BF84 B.CS 0x3B6BF90
	0x03B6BF88 MOV X0, X31
	0x03B6BF8C B 0x3B6BFA4
	0x03B6BF90 LDR X10, [X10 + 0xC8]
	0x03B6BF94 ADD X10, X10, X11, 0x3, LSL
	0x03B6BF98 LDUR X10, [X10 - 0x8]
	0x03B6BF9C CMP X10, X9
	0x03B6BFA0 CSEL X0, X8, X31, EQ
	0x03B6BFA4 LDP X20, X19, [X31 + 0x10]
	0x03B6BFA8 LDR X30, [X31], #0x20
	0x03B6BFAC RET
	0x03B6BFB0 STR X1, [X0 + 0x18]
	0x03B6BFB4 RET
	0x03B6BFB8 MOV X1, X31
	0x03B6BFBC B 0x33BDD8C
	0x03B6BFC0 LDR X0, [X0 + 0x18]
	0x03B6BFC4 RET
	0x03B6BFC8 STR X1, [X0 + 0x18]
	0x03B6BFCC RET
	0x03B6BFD0 STR X30, [X31 - 0x20]!
	0x03B6BFD4 STP X20, X19, [X31 + 0x10]
	0x03B6BFD8 ADRP X20, 0x877000
	0x03B6BFDC LDRB W8, [X20 + 0xA02]
	0x03B6BFE0 MOV X19, X0
	0x03B6BFE4 TBNZ X8, 0x0, 0x3B6BFFC
	0x03B6BFE8 ADRP X0, 0x5EF000
	0x03B6BFEC LDR X0, [X0 + 0x438]
	0x03B6BFF0 BL 0x1C16CF4
	0x03B6BFF4 MOVZ W8, 0x1
	0x03B6BFF8 STRB W8, [X20 + 0xA02]
	0x03B6BFFC LDR X8, [X19 + 0x18]
	0x03B6C000 CBZ X8, 0x3B6C024
	0x03B6C004 ADRP X9, 0x5EE000
	0x03B6C008 LDR X9, [X9 + 0x438]
	0x03B6C00C LDR X10, [X8]
	0x03B6C010 LDR X9, [X9]
	0x03B6C014 LDRB W12, [X10 + 0x130]
	0x03B6C018 LDRB W11, [X9 + 0x130]
	0x03B6C01C CMP W12, W11
	0x03B6C020 B.CS 0x3B6C02C
	0x03B6C024 MOV X0, X31
	0x03B6C028 B 0x3B6C040
	0x03B6C02C LDR X10, [X10 + 0xC8]
	0x03B6C030 ADD X10, X10, X11, 0x3, LSL
	0x03B6C034 LDUR X10, [X10 - 0x8]
	0x03B6C038 CMP X10, X9
	0x03B6C03C CSEL X0, X8, X31, EQ
	0x03B6C040 LDP X20, X19, [X31 + 0x10]
	0x03B6C044 LDR X30, [X31], #0x20
	0x03B6C048 RET
	0x03B6C04C STR X1, [X0 + 0x18]
	0x03B6C050 RET
	0x03B6C054 MOV X1, X31
	0x03B6C058 B 0x33BDD8C
	0x03B6C05C LDR X0, [X0 + 0x18]
	0x03B6C060 RET
	0x03B6C064 STR X1, [X0 + 0x18]
	0x03B6C068 RET
	0x03B6C06C MOV X1, X31
	0x03B6C070 B 0x33BDD8C
	0x03B6C074 LDR X0, [X0 + 0x18]
	0x03B6C078 RET
	0x03B6C07C STR X1, [X0 + 0x18]
	0x03B6C080 RET
	0x03B6C084 STR X30, [X31 - 0x20]!
	0x03B6C088 STP X20, X19, [X31 + 0x10]
	0x03B6C08C ADRP X20, 0x876000
	0x03B6C090 LDRB W8, [X20 + 0xA03]
	0x03B6C094 MOV X19, X0
	0x03B6C098 TBNZ X8, 0x0, 0x3B6C0B0

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+96], D15
	003 Move [X31+104], D14
	004 Move [X31+112], D13
	005 Move [X31+120], D12
	006 Move [X31+128], D11
	007 Move [X31+136], D10
	008 Move [X31+144], D9
	009 Move [X31+152], D8
	010 Move [X31+160], X30
	011 Move [X31+168], X23
	012 Move [X31+176], X22
	013 Move [X31+184], X21
	014 Move [X31+192], X20
	015 Move [X31+200], X19
	016 Move [X31+88], S5
	017 Move [X31+96], S1
	018 Move [X31+16], S3
	019 Move S3, [X2]
	020 Move S1, [X2+4]
	021 Move [X31+44], S2
	022 Move V2, [X2+8]
	023 Move V8, [X1]
	024 Move V9, [X1+8]
	025 Move V11, [X0]
	026 Move V12, [X0+8]
	027 Move [X31+84], S0
	028 Move V0, V3
	029 Move X0, X31
	030 Move X19, X3
	031 Move V10, V4
	032 Move X20, X2
	033 Call float3.op_Implicit, X0
	034 Move X21, 0x877000
	035 Move W8, [X21+1413]
	036 Move [X31+76], S1
	037 Move [X31+84], S0
	038 Move [X31+72], S2
	039 Compare W8, 0
	040 JumpIfNotEqual {46}
	041 Move X0, 0x589000
	042 Move X0, [X0+1448]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X21+1413], W8
	046 Move [X31+20], S10
	047 Move X22, 0x589000
	048 Move X22, [X22+1448]
	049 Move X0, [X22]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move S0, [X20]
	055 Move S1, [X20+4]
	056 Move V2, [X20+8]
	057 Move X0, X31
	058 Call float3.op_Implicit, X0
	059 Move W8, [X21+1413]
	060 Move V10, V0
	061 Move V13, V1
	062 Move V15, V2
	063 Compare W8, 0
	064 JumpIfNotEqual {70}
	065 Move X0, 0x589000
	066 Move X0, [X0+1448]
	067 Call 0x1C17CF4
	068 Move W8, 1
	069 Move [X21+1413], W8
	070 Move X0, [X22]
	071 Subtract V0, V8, V11
	072 Subtract S8, S9, S12
	073 Move [X31+3], V0
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {79}
	077 Call 0x1C17DFC
	078 Move V0, [X31+3]
	079 Multiply S1, S10, S10
	080 Multiply S2, S13, S13
	081 Multiply S4, S15, S15
	082 Add S1, S1, S2
	083 Add S1, S4, S1
	084 Move S3, 1
	085 NotImplemented "Instruction FSQRT not yet implemented."
	086 NotImplemented "Instruction FDIV not yet implemented."
	087 Move S1, V0.S[1]
	088 Move V2, V8
	089 Move X0, X31
	090 Move [X31+24], S8
	091 Move [X31+32], S1
	092 Call float3.op_Implicit, X0
	093 Move W8, [X21+1413]
	094 Move V8, V0
	095 Move V9, V1
	096 Move V11, V2
	097 Compare W8, 0
	098 JumpIfNotEqual {104}
	099 Move X0, 0x589000
	100 Move X0, [X0+1448]
	101 Call 0x1C17CF4
	102 Move W8, 1
	103 Move [X21+1413], W8
	104 Move X0, [X22]
	105 Multiply S14, S10, S12
	106 Multiply S13, S13, S12
	107 Multiply S10, S15, S12
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Multiply S1, S8, S8
	113 Multiply S2, S9, S9
	114 Multiply S0, S11, S11
	115 Add S1, S1, S2
	116 Add S0, S0, S1
	117 Move S3, 1
	118 NotImplemented "Instruction FSQRT not yet implemented."
	119 NotImplemented "Instruction FDIV not yet implemented."
	120 Multiply S12, S8, S0
	121 Multiply S8, S9, S0
	122 Multiply S15, S11, S0
	123 Move V0, V14
	124 Move V1, V13
	125 Move V2, V10
	126 Move X0, X31
	127 Move [X31+4], S14
	128 Move [X31+12], S13
	129 Move [X31+12], S10
	130 Call float3.op_Implicit, X0
	131 Move V11, V0
	132 Move V9, V1
	133 Move V10, V2
	134 Move V0, V12
	135 Move V1, V8
	136 Move V2, V15
	137 Move X0, X31
	138 Move [X31+32], S12
	139 Move [X31+40], S15
	140 Move [X31+40], S8
	141 Call float3.op_Implicit, X0
	142 Move X23, 0x86E000
	143 Move W8, [X23+2596]
	144 Move V8, V0
	145 Move V14, V1
	146 Move V13, V2
	147 Compare W8, 0
	148 JumpIfNotEqual {154}
	149 Move X0, 0x589000
	150 Move X0, [X0+1448]
	151 Call 0x1C17CF4
	152 Move W8, 1
	153 Move [X23+2596], W8
	154 Move X0, [X22]
	155 Multiply S0, S11, S11
	156 Multiply S1, S9, S9
	157 Add S0, S0, S1
	158 Multiply S1, S10, S10
	159 Move W8, [X0+224]
	160 Add S15, S1, S0
	161 Multiply S0, S8, S8
	162 Multiply S1, S14, S14
	163 Add S0, S0, S1
	164 Multiply S1, S13, S13
	165 Move V12, V10
	166 Add S10, S1, S0
	167 Compare W8, 0
	168 JumpIfNotEqual {170}
	169 Call 0x1C17DFC
	170 Move X8, -50860032
	171 Move V1, [X8+4072]
	172 Multiply S0, S15, S10
	173 NotImplemented "Instruction FSQRT not yet implemented."
	174 NotImplemented "Instruction FCMP not yet implemented."
	175 Move S1, W31
	176 Move X0, [X22]
	177 Multiply S1, S11, S8
	178 Multiply S2, S9, S14
	179 Multiply S3, S12, S13
	180 Add S1, S1, S2
	181 Add S1, S3, S1
	182 Move W8, [X0+224]
	183 NotImplemented "Instruction FDIV not yet implemented."
	184 Move S1, 1
	185 Move S2, -1
	186 NotImplemented "Instruction FMIN not yet implemented."
	187 NotImplemented "Instruction FCMP not yet implemented."
	188 NotImplemented "Instruction FCSEL not yet implemented."
	189 Compare W8, 0
	190 JumpIfNotEqual {192}
	191 Call 0x1C17DFC
	192 NotImplemented "Instruction FCVT not yet implemented."
	193 Call 0x3EB2B80
	194 Move X8, -50855936
	195 Move V1, [X8+1096]
	196 NotImplemented "Instruction INVALID not yet implemented."
	197 Multiply S1, S0, S1
	198 Move V0, [X31+92]
	199 NotImplemented "Instruction FCMP not yet implemented."
	200 Move W8, [X20+8]
	201 Move X9, [X20]
	202 Move [X19+8], W8
	203 Move [X19], X9
	204 Move S1, [X31+76]
	205 Move S0, [X31+80]
	206 Move V2, [X31+72]
	207 Move S10, [X31+84]
	208 Move S9, [X31+88]
	209 Multiply S0, S0, S0
	210 Multiply S1, S1, S1
	211 Multiply S2, S2, S2
	212 Add S0, S0, S1
	213 Add S0, S2, S0
	214 NotImplemented "Instruction FCMP not yet implemented."
	215 NotImplemented "Instruction FSQRT not yet implemented."
	216 Move S0, [X31+32]
	217 Move S2, [X31+36]
	218 Move V1, [X31+40]
	219 Move X0, X31
	220 Multiply S0, S11, S0
	221 Multiply S1, S11, S1
	222 Multiply S2, S11, S2
	223 Call float3.op_Implicit, X0
	224 Move [X19], S0
	225 Move [X19+8], S1
	226 Move [X19+8], S2
	227 Move X20, [X31+192]
	228 Move X19, [X31+200]
	229 Move X22, [X31+176]
	230 Move X21, [X31+184]
	231 Move X30, [X31+160]
	232 Move X23, [X31+168]
	233 Move D9, [X31+144]
	234 Move D8, [X31+152]
	235 Move D11, [X31+128]
	236 Move D10, [X31+136]
	237 Move D13, [X31+112]
	238 Move D12, [X31+120]
	239 Move D15, [X31+96]
	240 Move D14, [X31+104]
	241 Add X31, X31, 208
	242 Return 
	243 Move V0, [X31+44]
	244 NotImplemented "Instruction FCMP not yet implemented."
	245 Move S2, [X31+24]
	246 Move S13, [X31+28]
	247 Move V0, [X31+3]
	248 Move X0, X31
	249 Move V1, V13
	250 Call float3.op_Implicit, X0
	251 Move W8, [X21+1413]
	252 Move V14, V0
	253 Move V12, V2
	254 Compare W8, 0
	255 JumpIfNotEqual {261}
	256 Move X0, 0x589000
	257 Move X0, [X0+1448]
	258 Call 0x1C17CF4
	259 Move W8, 1
	260 Move [X21+1413], W8
	261 Move X0, [X22]
	262 Move W8, [X0+224]
	263 Compare W8, 0
	264 JumpIfNotEqual {266}
	265 Call 0x1C17DFC
	266 Multiply S1, S14, S14
	267 Move S2, W31
	268 Multiply S0, S12, S12
	269 Add S1, S1, S2
	270 Add S0, S0, S1
	271 NotImplemented "Instruction FSQRT not yet implemented."
	272 NotImplemented "Instruction FCMP not yet implemented."
	273 Move W8, [X21+1413]
	274 Move S0, 0.5
	275 Move [X31+92], S12
	276 Multiply S12, S10, S0
	277 Multiply S0, S8, S8
	278 Multiply S9, S12, S0
	279 Subtract S10, S8, S13
	280 Compare W8, 0
	281 JumpIfNotEqual {287}
	282 Move X0, 0x589000
	283 Move X0, [X0+1448]
	284 Call 0x1C17CF4
	285 Move W8, 1
	286 Move [X21+1413], W8
	287 Move X0, [X22]
	288 NotImplemented "Instruction FDIV not yet implemented."
	289 Move W8, [X0+224]
	290 Compare W8, 0
	291 JumpIfNotEqual {293}
	292 Call 0x1C17DFC
	293 NotImplemented "Instruction FCMP not yet implemented."
	294 NotImplemented "Instruction FSQRT not yet implemented."
	295 Move W8, [X21+1413]
	296 Multiply S0, S12, S8
	297 Multiply S10, S8, S0
	298 NotImplemented "Instruction FNEG not yet implemented."
	299 Compare W8, 0
	300 JumpIfNotEqual {306}
	301 Move X0, 0x589000
	302 Move X0, [X0+1448]
	303 Call 0x1C17CF4
	304 Move W8, 1
	305 Move [X21+1413], W8
	306 Move X0, [X22]
	307 NotImplemented "Instruction FDIV not yet implemented."
	308 Move W8, [X0+224]
	309 Compare W8, 0
	310 JumpIfNotEqual {312}
	311 Call 0x1C17DFC
	312 NotImplemented "Instruction FSQRT not yet implemented."
	313 Move S12, W31
	314 Add S10, S9, S9
	315 NotImplemented "Instruction FDIV not yet implemented."
	316 Multiply S1, S12, S0
	317 Multiply S0, S0, S1
	318 Add S0, S13, S0
	319 Multiply S0, S10, S0
	320 NotImplemented "Instruction FDIV not yet implemented."
	321 Move W8, [X21+1413]
	322 Compare W8, 0
	323 JumpIfNotEqual {329}
	324 Move X0, 0x589000
	325 Move X0, [X0+1448]
	326 Call 0x1C17CF4
	327 Move W8, 1
	328 Move [X21+1413], W8
	329 Move X0, [X22]
	330 Move W8, [X0+224]
	331 Compare W8, 0
	332 JumpIfEqual {336}
	333 Multiply S0, S9, S9
	334 Add S0, S0, S0
	335 NotImplemented "Instruction FSQRT not yet implemented."
	336 Call 0x1C17DFC
	337 Move W8, [X21+1413]
	338 Multiply S0, S9, S9
	339 Add S0, S0, S0
	340 NotImplemented "Instruction FSQRT not yet implemented."
	341 Compare W8, 0
	342 JumpIfNotEqual {348}
	343 Move X0, 0x589000
	344 Move X0, [X0+1448]
	345 Call 0x1C17CF4
	346 Move W8, 1
	347 Move [X21+1413], W8
	348 Move X0, [X22]
	349 Move W8, [X0+224]
	350 Compare W8, 0
	351 JumpIfEqual {353}
	352 Move W8, W31
	353 Call 0x1C17DFC
	354 Move W8, [X21+1413]
	355 NotImplemented "Instruction CMP not yet implemented."
	356 NotImplemented "Instruction CSET not yet implemented."
	357 Multiply S0, S10, S10
	358 Multiply S1, S12, S12
	359 Move V3, [X20+4]
	360 Add S0, S0, S1
	361 NotImplemented "Instruction FSQRT not yet implemented."
	362 Move S4, 0.25
	363 NotImplemented "Instruction FABD not yet implemented."
	364 Multiply S1, S0, S4
	365 NotImplemented "Instruction FCMP not yet implemented."
	366 NotImplemented "Instruction FABD not yet implemented."
	367 NotImplemented "Instruction FCSEL not yet implemented."
	368 NotImplemented "Instruction FCMP not yet implemented."
	369 NotImplemented "Instruction FCSEL not yet implemented."
	370 NotImplemented "Instruction FCSEL not yet implemented."
	371 Compare W8, 0
	372 JumpIfEqual {378}
	373 Move X0, 0x589000
	374 Move X0, [X0+1448]
	375 Call 0x1C17CF4
	376 Move W8, 1
	377 Move [X21+1413], W8
	378 Move X0, [X22]
	379 Move W8, [X0+224]
	380 Compare W8, 0
	381 JumpIfEqual {383}
	382 Move W8, W31
	383 Call 0x1C17DFC
	384 Move W8, [X21+1413]
	385 NotImplemented "Instruction CMP not yet implemented."
	386 NotImplemented "Instruction CSET not yet implemented."
	387 Multiply S0, S10, S10
	388 Multiply S1, S9, S9
	389 Add S12, S0, S1
	390 Compare W8, 0
	391 JumpIfEqual {397}
	392 Move X0, 0x589000
	393 Move X0, [X0+1448]
	394 Call 0x1C17CF4
	395 Move W8, 1
	396 Move [X21+1413], W8
	397 Move X0, [X22]
	398 NotImplemented "Instruction FSQRT not yet implemented."
	399 Move S13, 1
	400 Move W8, [X0+224]
	401 Compare W8, 0
	402 JumpIfEqual {404}
	403 Move W8, W31
	404 Call 0x1C17DFC
	405 Move W8, [X21+1413]
	406 NotImplemented "Instruction CMP not yet implemented."
	407 NotImplemented "Instruction CSET not yet implemented."
	408 Move V0, [X31+16]
	409 Move W10, 0x7F800000
	410 NotImplemented "Instruction FDIV not yet implemented."
	411 Multiply S0, S11, S0
	412 Move W9, S0
	413 And W9, W9, 0x7FFFFFFF
	414 NotImplemented "Instruction FCMP not yet implemented."
	415 NotImplemented "Instruction CCMP not yet implemented."
	416 NotImplemented "Instruction FCSEL not yet implemented."
	417 Compare W8, 0
	418 JumpIfEqual {424}
	419 Move X0, 0x589000
	420 Move X0, [X0+1448]
	421 Call 0x1C17CF4
	422 Move W8, 1
	423 Move [X21+1413], W8
	424 Move X0, [X22]
	425 Multiply S10, S10, S13
	426 Move W8, [X0+224]
	427 Compare W8, 0
	428 JumpIfNotEqual {430}
	429 Call 0x1C17DFC
	430 Move V1, [X31+92]
	431 Move S0, 1
	432 NotImplemented "Instruction FDIV not yet implemented."
	433 Multiply S14, S14, S0
	434 Multiply S8, S1, S0
	435 Move S0, [X31+4]
	436 Move S1, [X31+8]
	437 Move V2, [X31+12]
	438 Move X0, X31
	439 Multiply S13, S9, S13
	440 Multiply S15, S10, S12
	441 Call float3.op_Implicit, X0
	442 Move W8, [X21+1413]
	443 Move V9, V1
	444 Move V10, V2
	445 Move [X31+92], S0
	446 Compare W8, 0
	447 JumpIfNotEqual {453}
	448 Move X0, 0x589000
	449 Move X0, [X0+1448]
	450 Call 0x1C17CF4
	451 Move W8, 1
	452 Move [X21+1413], W8
	453 Move X0, [X22]
	454 Multiply S13, S13, S12
	455 Multiply S14, S14, S15
	456 Multiply S8, S8, S15
	457 Move W8, [X0+224]
	458 Compare W8, 0
	459 JumpIfNotEqual {461}
	460 Call 0x1C17DFC
	461 Multiply S1, S14, S14
	462 Multiply S2, S13, S13
	463 Multiply S0, S8, S8
	464 Add S1, S2, S1
	465 Add S0, S0, S1
	466 Move S3, 1
	467 NotImplemented "Instruction FSQRT not yet implemented."
	468 NotImplemented "Instruction FDIV not yet implemented."
	469 Multiply S0, S14, S2
	470 Multiply S1, S13, S2
	471 Multiply S2, S8, S2
	472 Move X0, X31
	473 Call float3.op_Implicit, X0
	474 Move V13, [X31+20]
	475 Move V3, V0
	476 Move V0, [X31+92]
	477 Move V4, V1
	478 Move V5, V2
	479 Move V1, V9
	480 Move V2, V10
	481 Move V6, V13
	482 Move X0, X31
	483 Call Vector3.Slerp, X0, X1, V0
	484 Move W8, [X21+1413]
	485 Move V8, V0
	486 Move V9, V1
	487 Move V10, V2
	488 Compare W8, 0
	489 JumpIfNotEqual {495}
	490 Move X0, 0x588000
	491 Move X0, [X0+1448]
	492 Call 0x1C17CF4
	493 Move W8, 1
	494 Move [X21+1413], W8
	495 Move X0, [X22]
	496 Move W8, [X0+224]
	497 Compare W8, 0
	498 JumpIfNotEqual {500}
	499 Call 0x1C17DFC
	500 Subtract S0, S12, S11
	501 Multiply S0, S0, S13
	502 Add S0, S11, S0
	503 Multiply S1, S0, S8
	504 Multiply S2, S0, S9
	505 Multiply S0, S0, S10
	506 Move [X19], S1
	507 Move [X19+8], S2
	508 Move [X19+8], S0

