Type: UnityEngine.XR.Interaction.Toolkit.TwoHandedGrabMoveProvider

Method: UnityEngine.XR.Interaction.Toolkit.GrabMoveProvider get_leftGrabMoveProvider()

Disassembly:
	0x03B7F7A8 STP X20, X19, [X31 + 0x10]
	0x03B7F7AC ADRP X20, 0x863000

ISIL:
	001 Move X0, [X0+104]
	002 Return X0

Method: System.Void set_leftGrabMoveProvider(UnityEngine.XR.Interaction.Toolkit.GrabMoveProvider value)

Disassembly:
	0x03B7F7B0 LDRB W8, [X20 + 0xAC9]
	0x03B7F7B4 MOV X19, X0

ISIL:
	001 Move [X0+104], X1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.GrabMoveProvider get_rightGrabMoveProvider()

Disassembly:
	0x03B7F7B8 TBNZ X8, 0x0, 0x3B7F7D0
	0x03B7F7BC ADRP X0, 0x5DC000

ISIL:
	001 Move X0, [X0+112]
	002 Return X0

Method: System.Void set_rightGrabMoveProvider(UnityEngine.XR.Interaction.Toolkit.GrabMoveProvider value)

Disassembly:
	0x03B7F7C0 LDR X0, [X0 + 0xCC0]
	0x03B7F7C4 BL 0x1C16CF4

ISIL:
	001 Move [X0+112], X1
	002 Return 

Method: System.Boolean get_overrideSharedSettingsOnInit()

Disassembly:
	0x03B7F7C8 MOVZ W8, 0x1
	0x03B7F7CC STRB W8, [X20 + 0xAC9]

ISIL:
	001 Move W0, [X0+120]
	002 Return X0

Method: System.Void set_overrideSharedSettingsOnInit(System.Boolean value)

Disassembly:
	0x03B7F7D0 LDR X8, [X19 + 0x30]
	0x03B7F7D4 CBZ X8, 0x3B7F7F8
	0x03B7F7D8 ADRP X9, 0x5DC000

ISIL:
	001 And W8, W1, 1
	002 Move [X0+120], W8
	003 Return 

Method: System.Single get_moveFactor()

Disassembly:
	0x03B7F7DC LDR X9, [X9 + 0xCC0]
	0x03B7F7E0 LDR X10, [X8]

ISIL:
	001 Move V0, [X0+124]
	002 Return V0

Method: System.Void set_moveFactor(System.Single value)

Disassembly:
	0x03B7F7E4 LDR X9, [X9]
	0x03B7F7E8 LDRB W12, [X10 + 0x130]

ISIL:
	001 Move [X0+124], S0
	002 Return 

Method: System.Boolean get_requireTwoHandsForTranslation()

Disassembly:
	0x03B7F7EC LDRB W11, [X9 + 0x130]
	0x03B7F7F0 CMP W12, W11

ISIL:
	001 Move W0, [X0+128]
	002 Return X0

Method: System.Void set_requireTwoHandsForTranslation(System.Boolean value)

Disassembly:
	0x03B7F7F4 B.CS 0x3B7F800
	0x03B7F7F8 MOV X0, X31
	0x03B7F7FC B 0x3B7F814

ISIL:
	001 And W8, W1, 1
	002 Move [X0+128], W8
	003 Return 

Method: System.Boolean get_enableRotation()

Disassembly:
	0x03B7F800 LDR X10, [X10 + 0xC8]
	0x03B7F804 ADD X10, X10, X11, 0x3, LSL

ISIL:
	001 Move W0, [X0+129]
	002 Return X0

Method: System.Void set_enableRotation(System.Boolean value)

Disassembly:
	0x03B7F808 LDUR X10, [X10 - 0x8]
	0x03B7F80C CMP X10, X9
	0x03B7F810 CSEL X0, X8, X31, EQ

ISIL:
	001 And W8, W1, 1
	002 Move [X0+129], W8
	003 Return 

Method: System.Boolean get_enableScaling()

Disassembly:
	0x03B7F814 LDP X20, X19, [X31 + 0x10]
	0x03B7F818 LDR X30, [X31], #0x20

ISIL:
	001 Move W0, [X0+130]
	002 Return X0

Method: System.Void set_enableScaling(System.Boolean value)

Disassembly:
	0x03B7F81C RET
	0x03B7F820 STR X1, [X0 + 0x30]
	0x03B7F824 RET

ISIL:
	001 And W8, W1, 1
	002 Move [X0+130], W8
	003 Return 

Method: System.Single get_minimumScale()

Disassembly:
	0x03B7F828 B 0x3B7F288
	0x03B7F82C MOVZ W8, 0x41200000

ISIL:
	001 Move V0, [X0+132]
	002 Return V0

Method: System.Void set_minimumScale(System.Single value)

Disassembly:
	0x03B7F830 MOV X1, X31
	0x03B7F834 STR W8, [X0 + 0x2C]

ISIL:
	001 Move [X0+132], S0
	002 Return 

Method: System.Single get_maximumScale()

Disassembly:
	0x03B7F838 B 0x3C36C30
	0x03B7F83C LDR X9, [X0 + 0x78]

ISIL:
	001 Move V0, [X0+136]
	002 Return V0

Method: System.Void set_maximumScale(System.Single value)

Disassembly:
	0x03B7F840 LDUR V0, [X0 + 0x68]
	0x03B7F844 STR X9, [X8 + 0x10]

ISIL:
	001 Move [X0+136], S0
	002 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03B7F848 STR V0, [X8]
	0x03B7F84C RET
	0x03B7F850 SUB X31, X31, 0x30
	0x03B7F854 STR X30, [X31 + 0x20]
	0x03B7F858 LDR X8, [X1 + 0x10]
	0x03B7F85C LDR V0, [X1]
	0x03B7F860 ADD X1, X0, 0x68
	0x03B7F864 ADD X2, X31, 0x0
	0x03B7F868 STR X8, [X31 + 0x10]
	0x03B7F86C STR V0, [X31]
	0x03B7F870 BL 0x3B7F880
	0x03B7F874 LDR X30, [X31 + 0x20]
	0x03B7F878 ADD X31, X31, 0x30
	0x03B7F87C RET
	0x03B7F880 SUB X31, X31, 0x70
	0x03B7F884 STP X30, X23, [X31 + 0x40]
	0x03B7F888 STP X22, X21, [X31 + 0x50]
	0x03B7F88C STP X20, X19, [X31 + 0x60]
	0x03B7F890 ADRP X23, 0x863000
	0x03B7F894 ADRP X22, 0x574000
	0x03B7F898 LDRB W8, [X23 + 0xACB]
	0x03B7F89C LDR X22, [X22 + 0x970]
	0x03B7F8A0 MOV X21, X2
	0x03B7F8A4 MOV X19, X1
	0x03B7F8A8 MOV X20, X0
	0x03B7F8AC TBNZ X8, 0x0, 0x3B7F8C4
	0x03B7F8B0 ADRP X0, 0x574000
	0x03B7F8B4 LDR X0, [X0 + 0x970]
	0x03B7F8B8 BL 0x1C16CF4
	0x03B7F8BC MOVZ W8, 0x1
	0x03B7F8C0 STRB W8, [X23 + 0xACB]
	0x03B7F8C4 LDR X0, [X22]
	0x03B7F8C8 LDR W8, [X0 + 0xE0]
	0x03B7F8CC CBNZ W8, 0x3B7F8D4
	0x03B7F8D0 BL 0x1C16DFC
	0x03B7F8D4 MOV X0, X31
	0x03B7F8D8 BL 0x3C018E4
	0x03B7F8DC TBZ X0, 0x0, 0x3B7F8FC
	0x03B7F8E0 LDR X8, [X19 + 0x10]
	0x03B7F8E4 LDR V0, [X19]
	0x03B7F8E8 ADD X0, X31, 0x20
	0x03B7F8EC MOV X1, X31
	0x03B7F8F0 STR X8, [X31 + 0x30]
	0x03B7F8F4 STR V0, [X31 + 0x2]
	0x03B7F8F8 BL 0x3BB99F0
	0x03B7F8FC LDR X8, [X21 + 0x10]
	0x03B7F900 LDR V0, [X21]
	0x03B7F904 STR X8, [X19 + 0x10]
	0x03B7F908 STR V0, [X19]
	0x03B7F90C LDR X0, [X22]
	0x03B7F910 LDR W8, [X0 + 0xE0]
	0x03B7F914 CBNZ W8, 0x3B7F91C
	0x03B7F918 BL 0x1C16DFC
	0x03B7F91C MOV X0, X31
	0x03B7F920 BL 0x3C018E4
	0x03B7F924 TBZ X0, 0x0, 0x3B7F954
	0x03B7F928 MOV X0, X20
	0x03B7F92C MOV X1, X31
	0x03B7F930 BL 0x3C32454
	0x03B7F934 TBZ X0, 0x0, 0x3B7F954
	0x03B7F938 LDR X8, [X19 + 0x10]
	0x03B7F93C LDR V0, [X19]
	0x03B7F940 ADD X0, X31, 0x0
	0x03B7F944 MOV X1, X31
	0x03B7F948 STR X8, [X31 + 0x10]
	0x03B7F94C STR V0, [X31]
	0x03B7F950 BL 0x3BB9958
	0x03B7F954 LDP X20, X19, [X31 + 0x60]
	0x03B7F958 LDP X22, X21, [X31 + 0x50]
	0x03B7F95C LDP X30, X23, [X31 + 0x40]
	0x03B7F960 ADD X31, X31, 0x70
	0x03B7F964 RET
	0x03B7F968 LDR X9, [X0 + 0x90]
	0x03B7F96C LDR V0, [X0 + 0x8]
	0x03B7F970 STR X9, [X8 + 0x10]
	0x03B7F974 STR V0, [X8]
	0x03B7F978 RET
	0x03B7F97C SUB X31, X31, 0x30
	0x03B7F980 STR X30, [X31 + 0x20]
	0x03B7F984 LDR X8, [X1 + 0x10]
	0x03B7F988 LDR V0, [X1]
	0x03B7F98C ADD X1, X0, 0x80
	0x03B7F990 ADD X2, X31, 0x0
	0x03B7F994 STR X8, [X31 + 0x10]
	0x03B7F998 STR V0, [X31]
	0x03B7F99C BL 0x3B7F880
	0x03B7F9A0 LDR X30, [X31 + 0x20]
	0x03B7F9A4 ADD X31, X31, 0x30
	0x03B7F9A8 RET
	0x03B7F9AC SUB X31, X31, 0x50
	0x03B7F9B0 STP X30, X19, [X31 + 0x40]
	0x03B7F9B4 LDR X8, [X0 + 0x78]
	0x03B7F9B8 LDUR V0, [X0 + 0x68]
	0x03B7F9BC MOV X19, X0
	0x03B7F9C0 ADD X0, X31, 0x20
	0x03B7F9C4 MOV X1, X31
	0x03B7F9C8 STR X8, [X31 + 0x30]
	0x03B7F9CC STR V0, [X31 + 0x2]
	0x03B7F9D0 BL 0x3BB9958
	0x03B7F9D4 LDR X8, [X19 + 0x90]
	0x03B7F9D8 LDR V0, [X19 + 0x8]
	0x03B7F9DC ADD X0, X31, 0x0
	0x03B7F9E0 MOV X1, X31
	0x03B7F9E4 STR X8, [X31 + 0x10]
	0x03B7F9E8 STR V0, [X31]
	0x03B7F9EC BL 0x3BB9958
	0x03B7F9F0 LDP X30, X19, [X31 + 0x40]
	0x03B7F9F4 ADD X31, X31, 0x50
	0x03B7F9F8 RET
	0x03B7F9FC SUB X31, X31, 0x50
	0x03B7FA00 STP X30, X19, [X31 + 0x40]
	0x03B7FA04 LDR X8, [X0 + 0x78]
	0x03B7FA08 LDUR V0, [X0 + 0x68]
	0x03B7FA0C MOV X19, X0
	0x03B7FA10 ADD X0, X31, 0x20
	0x03B7FA14 MOV X1, X31
	0x03B7FA18 STR X8, [X31 + 0x30]
	0x03B7FA1C STR V0, [X31 + 0x2]
	0x03B7FA20 BL 0x3BB99F0
	0x03B7FA24 LDR X8, [X19 + 0x90]
	0x03B7FA28 LDR V0, [X19 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x864000
	006 Move X21, 0x575000
	007 Move W8, [X20+2742]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0x5DD000
	015 Move X0, [X0+3192]
	016 Call 0x1C17CF4
	017 Move X0, 0x575000
	018 Move X0, [X0+2600]
	019 Call 0x1C17CF4
	020 Move X0, 0x575000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move X0, 0x5DD000
	024 Move X0, [X0+3576]
	025 Call 0x1C17CF4
	026 Move X0, 0x5DD000
	027 Move X0, [X0+3584]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+2742], W8
	031 Move X0, [X21]
	032 Move X20, [X19+104]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X20
	038 Move X1, X31
	039 Move X2, X31
	040 Call Object.op_Equality, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {59}
	045 Move X0, [X21]
	046 Move X20, [X19+112]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, X20
	052 Move X1, X31
	053 Move X2, X31
	054 Call Object.op_Equality, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {81}
	059 Move X8, 0x575000
	060 Move X8, [X8+2600]
	061 Move X20, 0x5DD000
	062 Move X0, [X8]
	063 Move W8, [X0+224]
	064 Move X20, [X20+3584]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X0, [X20]
	069 Move X1, X19
	070 Move X2, X31
	071 Call Debug.LogError, X0, X1
	072 Move X0, X19
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 Move W1, W31
	076 Move X2, X31
	077 Move X30, [X31+32]
	078 Move X21, [X31+40]
	079 Call Behaviour.set_enabled, X0, X1
	080 Return 
	081 Move W8, [X19+128]
	082 Compare W8, 0
	083 JumpIfEqual {92}
	084 Move X8, [X19+104]
	085 Compare X8, 0
	086 JumpIfEqual {147}
	087 Move [X8+144], W31
	088 Move X8, [X19+112]
	089 Compare X8, 0
	090 JumpIfEqual {147}
	091 Move [X8+144], W31
	092 Move W8, [X19+120]
	093 Compare W8, 0
	094 JumpIfEqual {128}
	095 Move X8, [X19+104]
	096 Compare X8, 0
	097 JumpIfEqual {147}
	098 Move X9, [X19+48]
	099 Move [X8+48], X9
	100 Move W9, [X19+72]
	101 Move [X8+72], W9
	102 Move W9, [X19+73]
	103 Move [X8+73], W9
	104 Move W9, [X19+74]
	105 Move [X8+74], W9
	106 Move W9, [X19+75]
	107 Move [X8+75], W9
	108 Move W9, [X19+76]
	109 Move [X8+76], W9
	110 Move V0, [X19+124]
	111 Move [X8+116], S0
	112 Move X8, [X19+112]
	113 Compare X8, 0
	114 JumpIfEqual {147}
	115 Move X9, [X19+48]
	116 Move [X8+48], X9
	117 Move W9, [X19+72]
	118 Move [X8+72], W9
	119 Move W9, [X19+73]
	120 Move [X8+73], W9
	121 Move W9, [X19+74]
	122 Move [X8+74], W9
	123 Move W9, [X19+75]
	124 Move [X8+75], W9
	125 Move W9, [X19+76]
	126 Move [X8+116], S0
	127 Move [X8+76], W9
	128 Move X8, 0x5DD000
	129 Move X8, [X8+3192]
	130 Move X0, [X8]
	131 Call 0x1C17F10
	132 Move X8, 0x5DD000
	133 Move X8, [X8+3576]
	134 Move X1, X19
	135 Move X3, X31
	136 Move X20, X0
	137 Move X2, [X8]
	138 Call Action`1<Object>..ctor, X0, X1, X2
	139 Move X0, X19
	140 Move X1, X20
	141 Move X20, [X31+16]
	142 Move X19, [X31+24]
	143 Move X30, [X31+32]
	144 Move X21, [X31+40]
	145 Call LocomotionProvider.add_beginLocomotion, X0, X1
	146 Return 
	147 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x03B7FA2C ADD X0, X31, 0x0
	0x03B7FA30 MOV X1, X31
	0x03B7FA34 STR X8, [X31 + 0x10]
	0x03B7FA38 STR V0, [X31]
	0x03B7FA3C BL 0x3BB99F0
	0x03B7FA40 LDP X30, X19, [X31 + 0x40]
	0x03B7FA44 ADD X31, X31, 0x50
	0x03B7FA48 RET
	0x03B7FA4C STP D9, D8, [X31 - 0x30]!
	0x03B7FA50 STP X30, X21, [X31 + 0x10]
	0x03B7FA54 STP X20, X19, [X31 + 0x20]
	0x03B7FA58 ADRP X20, 0x863000
	0x03B7FA5C LDRB W8, [X20 + 0xACA]
	0x03B7FA60 MOV X19, X0
	0x03B7FA64 TBNZ X8, 0x0, 0x3B7FA7C
	0x03B7FA68 ADRP X0, 0x59C000
	0x03B7FA6C LDR X0, [X0 + 0x3C0]
	0x03B7FA70 BL 0x1C16CF4
	0x03B7FA74 MOVZ W8, 0x1
	0x03B7FA78 STRB W8, [X20 + 0xACA]
	0x03B7FA7C ADRP X20, 0x59C000
	0x03B7FA80 LDR X20, [X20 + 0x3C0]
	0x03B7FA84 ADD X0, X19, 0x68
	0x03B7FA88 MOV X1, X31
	0x03B7FA8C BL 0x3745120
	0x03B7FA90 CBZ X0, 0x3B7FAA8
	0x03B7FA94 LDR X1, [X20]
	0x03B7FA98 BL 0x21F5E68
	0x03B7FA9C MOV V8.16B, V0.16B
	0x03B7FAA0 MOV V9.16B, V1.16B
	0x03B7FAA4 B 0x3B7FADC
	0x03B7FAA8 ADRP X21, 0x85A000
	0x03B7FAAC LDRB W8, [X21 + 0x78F]
	0x03B7FAB0 CBNZ W8, 0x3B7FAC8
	0x03B7FAB4 ADRP X0, 0x57C000
	0x03B7FAB8 LDR X0, [X0 + 0xF08]
	0x03B7FABC BL 0x1C16CF4
	0x03B7FAC0 MOVZ W8, 0x1
	0x03B7FAC4 STRB W8, [X21 + 0x78F]
	0x03B7FAC8 ADRP X8, 0x57C000
	0x03B7FACC LDR X8, [X8 + 0xF08]
	0x03B7FAD0 LDR X8, [X8]
	0x03B7FAD4 LDR X8, [X8 + 0xB8]
	0x03B7FAD8 LDP S8, S9, [X8]
	0x03B7FADC ADD X0, X19, 0x80
	0x03B7FAE0 MOV X1, X31
	0x03B7FAE4 BL 0x3745120
	0x03B7FAE8 CBZ X0, 0x3B7FAF8
	0x03B7FAEC LDR X1, [X20]
	0x03B7FAF0 BL 0x21F5E68
	0x03B7FAF4 B 0x3B7FB2C
	0x03B7FAF8 ADRP X19, 0x85A000
	0x03B7FAFC LDRB W8, [X19 + 0x78F]
	0x03B7FB00 CBNZ W8, 0x3B7FB18
	0x03B7FB04 ADRP X0, 0x57C000
	0x03B7FB08 LDR X0, [X0 + 0xF08]
	0x03B7FB0C BL 0x1C16CF4
	0x03B7FB10 MOVZ W8, 0x1
	0x03B7FB14 STRB W8, [X19 + 0x78F]
	0x03B7FB18 ADRP X8, 0x57C000
	0x03B7FB1C LDR X8, [X8 + 0xF08]
	0x03B7FB20 LDR X8, [X8]
	0x03B7FB24 LDR X8, [X8 + 0xB8]
	0x03B7FB28 LDP S0, S1, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x864000
	006 Move X21, 0x575000
	007 Move W8, [X20+2743]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x5DD000
	015 Move X0, [X0+3192]
	016 Call 0x1C17CF4
	017 Move X0, 0x575000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x5DD000
	021 Move X0, [X0+3576]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2743], W8
	025 Move X0, [X21]
	026 Move X20, [X19+104]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {44}
	039 Move X8, [X19+104]
	040 Compare X8, 0
	041 JumpIfEqual {82}
	042 Move W9, 1
	043 Move [X8+144], W9
	044 Move X0, [X21]
	045 Move X20, [X19+112]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X20
	051 Move X1, X31
	052 Move X2, X31
	053 Call Object.op_Inequality, X0, X1
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {63}
	058 Move X8, [X19+112]
	059 Compare X8, 0
	060 JumpIfEqual {82}
	061 Move W9, 1
	062 Move [X8+144], W9
	063 Move X8, 0x5DD000
	064 Move X8, [X8+3192]
	065 Move X20, 0x5DD000
	066 Move X0, [X8]
	067 Move X20, [X20+3576]
	068 Call 0x1C17F10
	069 Move X2, [X20]
	070 Move X1, X19
	071 Move X3, X31
	072 Move X20, X0
	073 Call Action`1<Object>..ctor, X0, X1, X2
	074 Move X0, X19
	075 Move X1, X20
	076 Move X20, [X31+16]
	077 Move X19, [X31+24]
	078 Move X30, [X31+32]
	079 Move X21, [X31+40]
	080 Call LocomotionProvider.remove_beginLocomotion, X0, X1
	081 Return 
	082 Call 0x1C17F20

Method: UnityEngine.Vector3 ComputeDesiredMove(out System.Boolean attemptingMove)

Disassembly:
	0x03B7FB2C LDP X20, X19, [X31 + 0x20]
	0x03B7FB30 LDP X30, X21, [X31 + 0x10]
	0x03B7FB34 FADD S0, S8, S0
	0x03B7FB38 FADD S1, S9, S1
	0x03B7FB3C LDP D9, D8, [X31], #0x30
	0x03B7FB40 RET
	0x03B7FB44 SUB X31, X31, 0x70
	0x03B7FB48 STR X30, [X31 + 0x30]
	0x03B7FB4C STP X24, X23, [X31 + 0x40]
	0x03B7FB50 STP X22, X21, [X31 + 0x50]
	0x03B7FB54 STP X20, X19, [X31 + 0x60]
	0x03B7FB58 ADRP X24, 0x863000
	0x03B7FB5C ADRP X23, 0x578000
	0x03B7FB60 ADRP X20, 0x5DC000
	0x03B7FB64 ADRP X21, 0x5C8000
	0x03B7FB68 ADRP X22, 0x5DC000
	0x03B7FB6C LDRB W8, [X24 + 0xACC]
	0x03B7FB70 LDR X23, [X23 + 0x3E0]
	0x03B7FB74 LDR X20, [X20 + 0xE08]
	0x03B7FB78 LDR X21, [X21 + 0x800]
	0x03B7FB7C LDR X22, [X22 + 0xE10]
	0x03B7FB80 MOV X19, X0
	0x03B7FB84 TBNZ X8, 0x0, 0x3B7FBC0
	0x03B7FB88 ADRP X0, 0x578000
	0x03B7FB8C LDR X0, [X0 + 0x3E0]
	0x03B7FB90 BL 0x1C16CF4
	0x03B7FB94 ADRP X0, 0x5DC000
	0x03B7FB98 LDR X0, [X0 + 0xE10]
	0x03B7FB9C BL 0x1C16CF4
	0x03B7FBA0 ADRP X0, 0x5C8000
	0x03B7FBA4 LDR X0, [X0 + 0x800]
	0x03B7FBA8 BL 0x1C16CF4
	0x03B7FBAC ADRP X0, 0x5DC000
	0x03B7FBB0 LDR X0, [X0 + 0xE08]
	0x03B7FBB4 BL 0x1C16CF4
	0x03B7FBB8 MOVZ W8, 0x1
	0x03B7FBBC STRB W8, [X24 + 0xACC]
	0x03B7FBC0 LDR X0, [X23]
	0x03B7FBC4 BL 0x1C16F10
	0x03B7FBC8 LDR X1, [X20]
	0x03B7FBCC LDR X6, [X21]
	0x03B7FBD0 MOV W2, W31
	0x03B7FBD4 MOV X3, X31
	0x03B7FBD8 MOV X4, X31
	0x03B7FBDC MOV X5, X31
	0x03B7FBE0 MOV X7, X31
	0x03B7FBE4 MOV X20, X0
	0x03B7FBE8 BL 0x3734C54
	0x03B7FBEC ADD X0, X31, 0x18
	0x03B7FBF0 MOV X1, X20
	0x03B7FBF4 MOV X2, X31
	0x03B7FBF8 STP X31, X31, [X31 + 0x18]
	0x03B7FBFC STR X31, [X31 + 0x28]
	0x03B7FC00 BL 0x3745288
	0x03B7FC04 LDR X8, [X31 + 0x28]
	0x03B7FC08 LDUR V0, [X31 + 0x18]
	0x03B7FC0C STR X8, [X19 + 0x78]
	0x03B7FC10 STUR V0, [X19 + 0x68]
	0x03B7FC14 LDR X0, [X23]
	0x03B7FC18 BL 0x1C16F10
	0x03B7FC1C LDR X1, [X22]
	0x03B7FC20 LDR X6, [X21]
	0x03B7FC24 MOV W2, W31
	0x03B7FC28 MOV X3, X31
	0x03B7FC2C MOV X4, X31
	0x03B7FC30 MOV X5, X31
	0x03B7FC34 MOV X7, X31
	0x03B7FC38 MOV X20, X0
	0x03B7FC3C BL 0x3734C54
	0x03B7FC40 ADD X0, X31, 0x0
	0x03B7FC44 MOV X1, X20
	0x03B7FC48 MOV X2, X31
	0x03B7FC4C STP X31, X31, [X31]
	0x03B7FC50 STR X31, [X31 + 0x10]
	0x03B7FC54 BL 0x3745288
	0x03B7FC58 ADRP X9, 0xFFFFFFFFFCF6E000
	0x03B7FC5C LDR V0, [X31]
	0x03B7FC60 LDR X8, [X31 + 0x10]
	0x03B7FC64 LDR V1, [X9 + 0x6A0]
	0x03B7FC68 MOVZ W9, 0x101
	0x03B7FC6C MOV X0, X19
	0x03B7FC70 MOV X1, X31
	0x03B7FC74 STR X8, [X19 + 0x90]
	0x03B7FC78 STR V0, [X19 + 0x8]
	0x03B7FC7C STR D1, [X19 + 0x48]
	0x03B7FC80 STRH W9, [X19 + 0x50]
	0x03B7FC84 BL 0x3C36C30
	0x03B7FC88 LDP X20, X19, [X31 + 0x60]
	0x03B7FC8C LDP X22, X21, [X31 + 0x50]
	0x03B7FC90 LDP X24, X23, [X31 + 0x40]
	0x03B7FC94 LDR X30, [X31 + 0x30]
	0x03B7FC98 ADD X31, X31, 0x70
	0x03B7FC9C RET
	0x03B7FCA0 ADRP X8, 0xFFFFFFFFFCF6E000
	0x03B7FCA4 LDR V0, [X8 + 0x6A0]
	0x03B7FCA8 MOVZ W8, 0x101
	0x03B7FCAC MOV X1, X31
	0x03B7FCB0 STRH W8, [X0 + 0x50]
	0x03B7FCB4 STR D0, [X0 + 0x48]
	0x03B7FCB8 B 0x3C36C30
	0x03B7FCBC LDR W0, [X0 + 0x64]
	0x03B7FCC0 RET
	0x03B7FCC4 STR W1, [X0 + 0x64]
	0x03B7FCC8 RET
	0x03B7FCCC LDR X0, [X0 + 0x68]
	0x03B7FCD0 RET
	0x03B7FCD4 STR X1, [X0 + 0x68]
	0x03B7FCD8 RET
	0x03B7FCDC LDR V0, [X0 + 0x70]
	0x03B7FCE0 RET
	0x03B7FCE4 STR S0, [X0 + 0x70]
	0x03B7FCE8 RET
	0x03B7FCEC SUB X31, X31, 0x70
	0x03B7FCF0 STR D10, [X31 + 0x10]
	0x03B7FCF4 STP D9, D8, [X31 + 0x20]
	0x03B7FCF8 STP X30, X25, [X31 + 0x30]
	0x03B7FCFC STP X24, X23, [X31 + 0x40]
	0x03B7FD00 STP X22, X21, [X31 + 0x50]
	0x03B7FD04 STP X20, X19, [X31 + 0x60]
	0x03B7FD08 ADRP X20, 0x863000
	0x03B7FD0C LDRB W8, [X20 + 0xACD]
	0x03B7FD10 MOV X19, X0
	0x03B7FD14 TBNZ X8, 0x0, 0x3B7FD5C
	0x03B7FD18 ADRP X0, 0x5DC000
	0x03B7FD1C LDR X0, [X0 + 0xE18]
	0x03B7FD20 BL 0x1C16CF4
	0x03B7FD24 ADRP X0, 0x5DC000
	0x03B7FD28 LDR X0, [X0 + 0xD98]
	0x03B7FD2C BL 0x1C16CF4
	0x03B7FD30 ADRP X0, 0x5DC000
	0x03B7FD34 LDR X0, [X0 + 0xDA0]
	0x03B7FD38 BL 0x1C16CF4
	0x03B7FD3C ADRP X0, 0x574000
	0x03B7FD40 LDR X0, [X0 + 0x598]
	0x03B7FD44 BL 0x1C16CF4
	0x03B7FD48 ADRP X0, 0x5DC000
	0x03B7FD4C LDR X0, [X0 + 0x2B0]
	0x03B7FD50 BL 0x1C16CF4
	0x03B7FD54 MOVZ W8, 0x1
	0x03B7FD58 STRB W8, [X20 + 0xACD]
	0x03B7FD5C STR X31, [X31 + 0x18]
	0x03B7FD60 STP X31, X31, [X31]
	0x03B7FD64 LDR X8, [X19 + 0x68]
	0x03B7FD68 CBZ X8, 0x3B7FEE8
	0x03B7FD6C ADRP X21, 0x85A000
	0x03B7FD70 LDRB W9, [X21 + 0x78F]
	0x03B7FD74 LDR W20, [X8 + 0x18]
	0x03B7FD78 CBNZ W9, 0x3B7FD90
	0x03B7FD7C ADRP X0, 0x57C000
	0x03B7FD80 LDR X0, [X0 + 0xF08]
	0x03B7FD84 BL 0x1C16CF4
	0x03B7FD88 MOVZ W8, 0x1
	0x03B7FD8C STRB W8, [X21 + 0x78F]
	0x03B7FD90 ADRP X8, 0x57C000
	0x03B7FD94 LDR X8, [X8 + 0xF08]
	0x03B7FD98 LDR X8, [X8]
	0x03B7FD9C LDR X8, [X8 + 0xB8]
	0x03B7FDA0 LDP S8, S9, [X8]
	0x03B7FDA4 CBZ W20, 0x3B7FEEC
	0x03B7FDA8 ADRP X20, 0x5DC000
	0x03B7FDAC LDR X20, [X20 + 0xE18]
	0x03B7FDB0 LDR X0, [X20]
	0x03B7FDB4 LDR W8, [X0 + 0xE0]
	0x03B7FDB8 CBNZ W8, 0x3B7FDC4
	0x03B7FDBC BL 0x1C16DFC
	0x03B7FDC0 LDR X0, [X20]
	0x03B7FDC4 LDR X8, [X0 + 0xB8]
	0x03B7FDC8 LDR X8, [X8]
	0x03B7FDCC CBZ X8, 0x3B7FEE8
	0x03B7FDD0 LDRSW X9, [X19 + 0x64]
	0x03B7FDD4 LDR W10, [X8 + 0x18]
	0x03B7FDD8 CMP W9, W10
	0x03B7FDDC B.CS 0x3B7FF14
	0x03B7FDE0 LDR X0, [X19 + 0x68]
	0x03B7FDE4 CBZ X0, 0x3B7FEE8
	0x03B7FDE8 ADRP X23, 0x5DC000
	0x03B7FDEC LDR X23, [X23 + 0xDA0]
	0x03B7FDF0 ADD X8, X8, X9, 0x3, LSL
	0x03B7FDF4 LDR V0, [X19 + 0x70]
	0x03B7FDF8 ADRP X24, 0x5DC000
	0x03B7FDFC ADRP X25, 0x574000
	0x03B7FE00 LDR X21, [X8 + 0x20]
	0x03B7FE04 LDR X24, [X24 + 0x2B0]
	0x03B7FE08 LDR X25, [X25 + 0x598]
	0x03B7FE0C MOV W20, W31
	0x03B7FE10 FMUL S10, S0, S0
	0x03B7FE14 LDR W8, [X0 + 0x18]
	0x03B7FE18 CMP W20, W8
	0x03B7FE1C B.GE 0x3B7FEEC
	0x03B7FE20 LDR X2, [X23]
	0x03B7FE24 MOV W1, W20
	0x03B7FE28 BL 0x301BCCC
	0x03B7FE2C CBZ X0, 0x3B7FE48
	0x03B7FE30 LDR X9, [X0]
	0x03B7FE34 LDR X8, [X24]
	0x03B7FE38 LDRB W11, [X9 + 0x130]
	0x03B7FE3C LDRB W10, [X8 + 0x130]
	0x03B7FE40 CMP W11, W10
	0x03B7FE44 B.CS 0x3B7FE50
	0x03B7FE48 MOV X22, X31
	0x03B7FE4C B 0x3B7FE64
	0x03B7FE50 LDR X9, [X9 + 0xC8]
	0x03B7FE54 ADD X9, X9, X10, 0x3, LSL
	0x03B7FE58 LDUR X9, [X9 - 0x8]
	0x03B7FE5C CMP X9, X8
	0x03B7FE60 CSEL X22, X0, X31, EQ
	0x03B7FE64 LDR X0, [X25]
	0x03B7FE68 LDR W8, [X0 + 0xE0]
	0x03B7FE6C CBNZ W8, 0x3B7FE74
	0x03B7FE70 BL 0x1C16DFC
	0x03B7FE74 MOV X0, X22
	0x03B7FE78 MOV X1, X31
	0x03B7FE7C MOV X2, X31

ISIL:
	001 Move [X31-112], D15
	002 Move [X31-104], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0x864000
	015 Move W8, [X21+2744]
	016 Move X20, X1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x575000
	023 Move X0, [X0+1432]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+2744], W8
	027 Move [X20], W31
	028 Move X8, [X19+48]
	029 Compare X8, 0
	030 JumpIfEqual {265}
	031 Move X8, [X8+48]
	032 Compare X8, 0
	033 JumpIfEqual {35}
	034 Move X21, [X8+56]
	035 Move X21, X31
	036 Move X0, [X19+104]
	037 Compare X0, 0
	038 JumpIfEqual {265}
	039 Move W22, [X19+140]
	040 Call GrabMoveProvider.IsGrabbing, X0
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {64}
	045 Move X0, [X19+112]
	046 Compare X0, 0
	047 JumpIfEqual {265}
	048 Call GrabMoveProvider.IsGrabbing, X0
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {64}
	053 Move X8, 0x575000
	054 Move X8, [X8+1432]
	055 Move X0, [X8]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X21
	061 Move X1, X31
	062 Move X2, X31
	063 Call Object.op_Inequality, X0, X1
	064 Move W0, W31
	065 And W8, W0, 1
	066 Move [X19+140], W8
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {137}
	071 Move X8, [X19+104]
	072 Compare X8, 0
	073 JumpIfEqual {265}
	074 Move [X8+144], W31
	075 Move X8, [X19+112]
	076 Compare X8, 0
	077 JumpIfEqual {265}
	078 Move [X8+144], W31
	079 Compare X21, 0
	080 JumpIfEqual {265}
	081 Move X0, X21
	082 Move X1, X31
	083 Call GameObject.get_transform, X0
	084 Move X8, [X19+104]
	085 Compare X8, 0
	086 JumpIfEqual {265}
	087 Move X21, X0
	088 Move X0, [X8+104]
	089 Compare X0, 0
	090 JumpIfEqual {265}
	091 Move X1, X31
	092 Call Transform.get_localPosition, X0
	093 Move X8, [X19+112]
	094 Compare X8, 0
	095 JumpIfEqual {265}
	096 Move X0, [X8+104]
	097 Compare X0, 0
	098 JumpIfEqual {265}
	099 Move X1, X31
	100 Move V8, V0
	101 Move V9, V1
	102 Move V10, V2
	103 Call Transform.get_localPosition, X0
	104 Move V11, V0
	105 Move V12, V1
	106 Move V13, V2
	107 Add S0, S8, S0
	108 Add S1, S9, S1
	109 Add S2, S10, S2
	110 Move S3, 0.5
	111 Move [X31+76], S9
	112 Multiply S9, S0, S3
	113 Multiply S15, S1, S3
	114 Multiply S14, S2, S3
	115 Compare W22, 0
	116 JumpIfEqual {179}
	117 Move W8, 1
	118 Move [X20], W8
	119 Compare X21, 0
	120 JumpIfEqual {265}
	121 Move S1, [X19+148]
	122 Move S0, [X19+152]
	123 Move V3, [X19+144]
	124 Move X0, X21
	125 Move X1, X31
	126 Subtract S2, S0, S14
	127 Subtract S1, S1, S15
	128 Subtract S0, S3, S9
	129 Call Transform.TransformVector, X0, X1
	130 Move V3, [X19+124]
	131 Move [X19+144], S9
	132 Move [X19+152], S15
	133 Move [X19+152], S14
	134 Multiply S0, S0, S3
	135 Multiply S1, S1, S3
	136 Multiply S2, S2, S3
	137 Move W8, [X19+128]
	138 Compare W8, 0
	139 JumpIfNotEqual {149}
	140 Move X9, [X19+104]
	141 Compare X9, 0
	142 JumpIfEqual {265}
	143 Move W8, 1
	144 Move [X9+144], W8
	145 Move X9, [X19+112]
	146 Compare X9, 0
	147 JumpIfEqual {265}
	148 Move [X9+144], W8
	149 Move X19, 0x85A000
	150 Move W8, [X19+1923]
	151 Compare W8, 0
	152 JumpIfNotEqual {158}
	153 Move X0, 0x575000
	154 Move X0, [X0+1440]
	155 Call 0x1C17CF4
	156 Move W8, 1
	157 Move [X19+1923], W8
	158 Move X8, 0x575000
	159 Move X8, [X8+1440]
	160 Move X8, [X8]
	161 Move X8, [X8+184]
	162 Move S0, [X8]
	163 Move S1, [X8+4]
	164 Move V2, [X8+8]
	165 Move X20, [X31+96]
	166 Move X19, [X31+104]
	167 Move X22, [X31+80]
	168 Move X21, [X31+88]
	169 Move X30, [X31+64]
	170 Move D9, [X31+48]
	171 Move D8, [X31+56]
	172 Move D11, [X31+32]
	173 Move D10, [X31+40]
	174 Move D13, [X31+16]
	175 Move D12, [X31+24]
	176 Move D15, [X31+112]
	177 Move D14, [X31+120]
	178 Return X0
	179 Move W8, [X19+140]
	180 Compare W8, 0
	181 JumpIfEqual {117}
	182 Compare X21, 0
	183 JumpIfEqual {265}
	184 Move X0, X21
	185 Move X1, X31
	186 Call Transform.get_eulerAngles, X0
	187 Subtract S0, S11, S8
	188 Subtract S2, S13, S10
	189 Move [X19+164], W31
	190 Move [X19+156], S1
	191 Move [X19+164], S0
	192 Move [X19+168], S2
	193 Move X20, 0x85A000
	194 Move W8, [X20+2749]
	195 Compare W8, 0
	196 JumpIfNotEqual {202}
	197 Move X0, 0x575000
	198 Move X0, [X0+1440]
	199 Call 0x1C17CF4
	200 Move W8, 1
	201 Move [X20+2749], W8
	202 Move X20, 0x575000
	203 Move X20, [X20+1440]
	204 Move X0, X31
	205 Move X8, [X20]
	206 Move X8, [X8+184]
	207 Move S1, [X8+36]
	208 Move S2, [X8+40]
	209 Move V3, [X8+44]
	210 Move W8, 0x42B40000
	211 Move S0, W8
	212 Call Quaternion.AngleAxis, V0, X0
	213 Move S4, [X19+160]
	214 Move S5, [X19+164]
	215 Move V6, [X19+168]
	216 Move X0, X31
	217 Call Quaternion.op_Multiply, X0, X1
	218 Move X0, X21
	219 Move X1, X31
	220 Move [X19+172], S0
	221 Move [X19+180], S1
	222 Move [X19+180], S2
	223 Call Transform.get_localScale, X0
	224 Move [X19+184], S0
	225 Move X21, 0x85A000
	226 Move W8, [X21+2140]
	227 Compare W8, 0
	228 JumpIfNotEqual {234}
	229 Move X0, 0x575000
	230 Move X0, [X0+1448]
	231 Call 0x1C17CF4
	232 Move W8, 1
	233 Move [X21+2140], W8
	234 Move X8, 0x575000
	235 Move X8, [X8+1448]
	236 Move V0, [X31+76]
	237 Subtract S8, S8, S11
	238 Subtract S10, S10, S13
	239 Move X0, [X8]
	240 Subtract S11, S0, S12
	241 Move W8, [X0+224]
	242 Compare W8, 0
	243 JumpIfNotEqual {245}
	244 Call 0x1C17DFC
	245 Multiply S0, S8, S8
	246 Multiply S1, S11, S11
	247 Multiply S2, S10, S10
	248 Add S0, S0, S1
	249 Add S0, S2, S0
	250 NotImplemented "Instruction FSQRT not yet implemented."
	251 Move [X19+144], S9
	252 Move [X19+152], S15
	253 Move [X19+152], S14
	254 Move [X19+188], S0
	255 Move X19, 0x85A000
	256 Move W8, [X19+1923]
	257 Compare W8, 0
	258 JumpIfNotEqual {264}
	259 Move X0, 0x575000
	260 Move X0, [X0+1440]
	261 Call 0x1C17CF4
	262 Move W8, 1
	263 Move [X19+1923], W8
	264 Move X8, [X20]
	265 Call 0x1C17F20

Method: System.Void OnBeginLocomotion(UnityEngine.XR.Interaction.Toolkit.LocomotionSystem otherSystem)

Disassembly:
	0x03B7FE80 BL 0x3C354F8
	0x03B7FE84 TBZ X0, 0x0, 0x3B7FEDC
	0x03B7FE88 CBZ X22, 0x3B7FEE8
	0x03B7FE8C LDRB W8, [X22 + 0x25]
	0x03B7FE90 CBZ W8, 0x3B7FEDC
	0x03B7FE94 MOV X0, X22
	0x03B7FE98 MOV X1, X31
	0x03B7FE9C BL 0x3B34C50
	0x03B7FEA0 STP X0, X1, [X31]
	0x03B7FEA4 ADD X0, X31, 0x0
	0x03B7FEA8 ADD X2, X31, 0x18
	0x03B7FEAC MOV X1, X21
	0x03B7FEB0 MOV X3, X31
	0x03B7FEB4 BL 0x3E643E0
	0x03B7FEB8 TBZ X0, 0x0, 0x3B7FEDC
	0x03B7FEBC LDP S0, S1, [X31 + 0x18]
	0x03B7FEC0 FMUL S2, S0, S0
	0x03B7FEC4 FMUL S3, S1, S1
	0x03B7FEC8 FADD S2, S2, S3
	0x03B7FECC FCMP S2, S10
	0x03B7FED0 B.LE 0x3B7FEDC
	0x03B7FED4 FADD S8, S8, S0
	0x03B7FED8 FADD S9, S9, S1
	0x03B7FEDC LDR X0, [X19 + 0x68]
	0x03B7FEE0 ADD W20, W20, 0x1
	0x03B7FEE4 CBNZ X0, 0x3B7FE14
	0x03B7FEE8 BL 0x1C16F20
	0x03B7FEEC MOV V0.16B, V8.16B
	0x03B7FEF0 MOV V1.16B, V9.16B
	0x03B7FEF4 LDP X20, X19, [X31 + 0x60]
	0x03B7FEF8 LDP X22, X21, [X31 + 0x50]
	0x03B7FEFC LDP X24, X23, [X31 + 0x40]
	0x03B7FF00 LDP X30, X25, [X31 + 0x30]
	0x03B7FF04 LDP D9, D8, [X31 + 0x20]
	0x03B7FF08 LDR V10, [X31 + 0x10]
	0x03B7FF0C ADD X31, X31, 0x70
	0x03B7FF10 RET
	0x03B7FF14 BL 0x1C16F28
	0x03B7FF18 STR X30, [X31 - 0x30]!
	0x03B7FF1C STP X22, X21, [X31 + 0x10]
	0x03B7FF20 STP X20, X19, [X31 + 0x20]
	0x03B7FF24 ADRP X21, 0x863000
	0x03B7FF28 ADRP X22, 0x5DC000
	0x03B7FF2C ADRP X20, 0x5DC000
	0x03B7FF30 LDRB W8, [X21 + 0xACE]
	0x03B7FF34 LDR X22, [X22 + 0xDA8]
	0x03B7FF38 LDR X20, [X20 + 0xDB0]
	0x03B7FF3C MOV X19, X0
	0x03B7FF40 TBNZ X8, 0x0, 0x3B7FF64
	0x03B7FF44 ADRP X0, 0x5DC000
	0x03B7FF48 LDR X0, [X0 + 0xDB0]
	0x03B7FF4C BL 0x1C16CF4
	0x03B7FF50 ADRP X0, 0x5DC000
	0x03B7FF54 LDR X0, [X0 + 0xDA8]
	0x03B7FF58 BL 0x1C16CF4
	0x03B7FF5C MOVZ W8, 0x1
	0x03B7FF60 STRB W8, [X21 + 0xACE]
	0x03B7FF64 LDR X0, [X22]
	0x03B7FF68 BL 0x1C16F10
	0x03B7FF6C LDR X1, [X20]
	0x03B7FF70 MOV X20, X0
	0x03B7FF74 BL 0x301B7C4
	0x03B7FF78 ADRP X8, 0xFFFFFFFFFCF6E000
	0x03B7FF7C LDR V0, [X8 + 0x6A0]
	0x03B7FF80 MOVZ W8, 0x3F400000
	0x03B7FF84 MOVZ W9, 0x101
	0x03B7FF88 STR X20, [X19 + 0x68]
	0x03B7FF8C STR W8, [X19 + 0x70]
	0x03B7FF90 STR D0, [X19 + 0x48]
	0x03B7FF94 STRH W9, [X19 + 0x50]
	0x03B7FF98 MOV X0, X19
	0x03B7FF9C LDP X20, X19, [X31 + 0x20]
	0x03B7FFA0 LDP X22, X21, [X31 + 0x10]
	0x03B7FFA4 MOV X1, X31
	0x03B7FFA8 LDR X30, [X31], #0x30
	0x03B7FFAC B 0x3C36C30
	0x03B7FFB0 STP X30, X21, [X31 - 0x20]!
	0x03B7FFB4 STP X20, X19, [X31 + 0x10]
	0x03B7FFB8 ADRP X19, 0x863000
	0x03B7FFBC ADRP X21, 0x5DC000
	0x03B7FFC0 ADRP X20, 0x579000
	0x03B7FFC4 LDRB W8, [X19 + 0xACF]
	0x03B7FFC8 LDR X21, [X21 + 0xDB8]
	0x03B7FFCC LDR X20, [X20 + 0x158]
	0x03B7FFD0 TBNZ X8, 0x0, 0x3B80000
	0x03B7FFD4 ADRP X0, 0x579000
	0x03B7FFD8 LDR X0, [X0 + 0x158]
	0x03B7FFDC BL 0x1C16CF4
	0x03B7FFE0 ADRP X0, 0x5DC000
	0x03B7FFE4 LDR X0, [X0 + 0xE18]
	0x03B7FFE8 BL 0x1C16CF4
	0x03B7FFEC ADRP X0, 0x5DC000
	0x03B7FFF0 LDR X0, [X0 + 0xDB8]
	0x03B7FFF4 BL 0x1C16CF4
	0x03B7FFF8 MOVZ W8, 0x1
	0x03B7FFFC STRB W8, [X19 + 0xACF]
	0x03B80000 LDR X0, [X21]
	0x03B80004 MOVZ W1, 0x2
	0x03B80008 BL 0x1C16D6C
	0x03B8000C LDR X8, [X20]
	0x03B80010 MOV X19, X0
	0x03B80014 LDR W9, [X8 + 0xE0]
	0x03B80018 CBNZ W9, 0x3B80028
	0x03B8001C MOV X0, X8
	0x03B80020 BL 0x1C16DFC
	0x03B80024 LDR X8, [X20]
	0x03B80028 CBZ X19, 0x3B8007C
	0x03B8002C LDR W9, [X19 + 0x18]
	0x03B80030 CBZ W9, 0x3B80078
	0x03B80034 LDR X8, [X8 + 0xB8]
	0x03B80038 CMP W9, 0x1
	0x03B8003C LDR X8, [X8 + 0x88]
	0x03B80040 STR X8, [X19 + 0x20]
	0x03B80044 B.EQ 0x3B80078
	0x03B80048 LDR X8, [X20]
	0x03B8004C ADRP X9, 0x5DB000
	0x03B80050 LDR X8, [X8 + 0xB8]
	0x03B80054 LDR X8, [X8 + 0x90]
	0x03B80058 LDR X9, [X9 + 0xE18]
	0x03B8005C STR X8, [X19 + 0x28]
	0x03B80060 LDR X8, [X9]
	0x03B80064 LDR X8, [X8 + 0xB8]
	0x03B80068 STR X19, [X8]
	0x03B8006C LDP X20, X19, [X31 + 0x10]
	0x03B80070 LDP X30, X21, [X31], #0x20
	0x03B80074 RET
	0x03B80078 BL 0x1C16F28
	0x03B8007C BL 0x1C16F20
	0x03B80080 LDR V0, [X0 + 0x48]
	0x03B80084 RET
	0x03B80088 STR S0, [X0 + 0x48]
	0x03B8008C RET
	0x03B80090 LDR V0, [X0 + 0x4C]
	0x03B80094 RET
	0x03B80098 STR S0, [X0 + 0x4C]
	0x03B8009C RET
	0x03B800A0 LDRB W0, [X0 + 0x50]
	0x03B800A4 RET
	0x03B800A8 AND W8, W1, 0x1
	0x03B800AC STRB W8, [X0 + 0x50]
	0x03B800B0 RET
	0x03B800B4 LDRB W0, [X0 + 0x51]
	0x03B800B8 RET
	0x03B800BC AND W8, W1, 0x1
	0x03B800C0 STRB W8, [X0 + 0x51]
	0x03B800C4 RET
	0x03B800C8 LDR V0, [X0 + 0x54]
	0x03B800CC RET
	0x03B800D0 STR S0, [X0 + 0x54]
	0x03B800D4 RET
	0x03B800D8 SUB X31, X31, 0x30
	0x03B800DC STP X30, X21, [X31 + 0x10]
	0x03B800E0 STP X20, X19, [X31 + 0x20]
	0x03B800E4 ADRP X21, 0x862000
	0x03B800E8 ADRP X20, 0x573000
	0x03B800EC LDRB W8, [X21 + 0xAD0]
	0x03B800F0 LDR X20, [X20 + 0x598]
	0x03B800F4 MOV X19, X0
	0x03B800F8 TBNZ X8, 0x0, 0x3B80134
	0x03B800FC ADRP X0, 0x573000
	0x03B80100 LDR X0, [X0 + 0xA28]
	0x03B80104 BL 0x1C16CF4
	0x03B80108 ADRP X0, 0x573000
	0x03B8010C LDR X0, [X0 + 0x598]
	0x03B80110 BL 0x1C16CF4
	0x03B80114 ADRP X0, 0x573000
	0x03B80118 LDR X0, [X0 + 0xA90]
	0x03B8011C BL 0x1C16CF4
	0x03B80120 ADRP X0, 0x5DB000
	0x03B80124 LDR X0, [X0 + 0xE20]
	0x03B80128 BL 0x1C16CF4
	0x03B8012C MOVZ W8, 0x1
	0x03B80130 STRB W8, [X21 + 0xAD0]
	0x03B80134 MOV X0, X19
	0x03B80138 BL 0x3B7ACCC
	0x03B8013C LDR X0, [X20]
	0x03B80140 LDR X20, [X19 + 0x30]
	0x03B80144 LDR W8, [X0 + 0xE0]
	0x03B80148 CBNZ W8, 0x3B80150
	0x03B8014C BL 0x1C16DFC
	0x03B80150 MOV X0, X20
	0x03B80154 MOV X1, X31
	0x03B80158 MOV X2, X31
	0x03B8015C BL 0x3C354F8
	0x03B80160 TBZ X0, 0x0, 0x3B8020C
	0x03B80164 LDR V0, [X19 + 0x54]
	0x03B80168 FCMP S0, 0x0
	0x03B8016C B.LE 0x3B8020C
	0x03B80170 LDR X8, [X19 + 0x30]
	0x03B80174 CBZ X8, 0x3B8021C
	0x03B80178 LDR V1, [X8 + 0x2C]
	0x03B8017C FCMP S0, S1
	0x03B80180 B.LE 0x3B8020C
	0x03B80184 ADRP X21, 0x573000
	0x03B80188 LDR X21, [X21 + 0xA90]
	0x03B8018C ADD X1, X31, 0xC
	0x03B80190 STR S0, [X31 + 0xC]
	0x03B80194 LDR X0, [X21]
	0x03B80198 BL 0x1C16E04
	0x03B8019C LDR X8, [X19 + 0x30]
	0x03B801A0 CBZ X8, 0x3B8021C
	0x03B801A4 MOV X20, X0
	0x03B801A8 LDR V0, [X8 + 0x2C]
	0x03B801AC LDR X0, [X21]
	0x03B801B0 ADD X1, X31, 0x8
	0x03B801B4 STR S0, [X31 + 0x8]
	0x03B801B8 BL 0x1C16E04
	0x03B801BC ADRP X8, 0x5DB000
	0x03B801C0 LDR X8, [X8 + 0xE20]
	0x03B801C4 MOV X2, X0
	0x03B801C8 MOV X1, X20
	0x03B801CC MOV X3, X31
	0x03B801D0 LDR X8, [X8]
	0x03B801D4 MOV X0, X8
	0x03B801D8 BL 0x3227BD4
	0x03B801DC ADRP X8, 0x573000
	0x03B801E0 LDR X8, [X8 + 0xA28]
	0x03B801E4 MOV X20, X0
	0x03B801E8 LDR X8, [X8]
	0x03B801EC LDR W9, [X8 + 0xE0]
	0x03B801F0 CBNZ W9, 0x3B801FC
	0x03B801F4 MOV X0, X8
	0x03B801F8 BL 0x1C16DFC
	0x03B801FC MOV X0, X20
	0x03B80200 MOV X1, X19
	0x03B80204 MOV X2, X31
	0x03B80208 BL 0x3C06B0C
	0x03B8020C LDP X20, X19, [X31 + 0x20]
	0x03B80210 LDP X30, X21, [X31 + 0x10]
	0x03B80214 ADD X31, X31, 0x30
	0x03B80218 RET
	0x03B8021C BL 0x1C16F20
	0x03B80220 STP D9, D8, [X31 - 0x30]!
	0x03B80224 STR X30, [X31 + 0x10]
	0x03B80228 STP X20, X19, [X31 + 0x20]
	0x03B8022C ADRP X20, 0x862000
	0x03B80230 LDRB W8, [X20 + 0xAD1]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X23
	012 Move [X31+112], X22
	013 Move [X31+120], X21
	014 Move [X31+128], X20
	015 Move [X31+136], X19
	016 Move X20, 0x864000
	017 Move W8, [X20+2745]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x575000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+2745], W8
	028 Move X8, [X19+48]
	029 Compare X8, 0
	030 JumpIfEqual {293}
	031 Move X9, [X8+48]
	032 Move X8, 0x575000
	033 Move X8, [X8+1432]
	034 Compare X9, 0
	035 JumpIfEqual {37}
	036 Move X20, [X9+56]
	037 Move X20, X31
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X1, X31
	045 Move X2, X31
	046 Call Object.op_Equality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {229}
	051 Compare X20, 0
	052 JumpIfEqual {293}
	053 Move X0, X20
	054 Move X1, X31
	055 Call GameObject.get_transform, X0
	056 Move X8, [X19+104]
	057 Compare X8, 0
	058 JumpIfEqual {293}
	059 Move X20, X0
	060 Move X0, [X8+104]
	061 Compare X0, 0
	062 JumpIfEqual {293}
	063 Move X1, X31
	064 Call Transform.get_localPosition, X0
	065 Move X8, [X19+112]
	066 Compare X8, 0
	067 JumpIfEqual {293}
	068 Move X0, [X8+104]
	069 Compare X0, 0
	070 JumpIfEqual {293}
	071 Move X1, X31
	072 Move V8, V0
	073 Move V9, V1
	074 Move V11, V2
	075 Call Transform.get_localPosition, X0
	076 Move X22, 0x575000
	077 Move X21, 0x575000
	078 Move W8, [X19+129]
	079 Move X22, [X22+1448]
	080 Move X21, [X21+1440]
	081 Move V10, V0
	082 Move V12, V1
	083 Move V13, V2
	084 Compare W8, 0
	085 JumpIfEqual {197}
	086 Move S0, [X19+172]
	087 Move S1, [X19+176]
	088 Move X23, 0x85A000
	089 Move [X31+8], S12
	090 Move [X31+16], S10
	091 Move [X31+20], S9
	092 Move [X31+28], S8
	093 Subtract S9, S10, S8
	094 Move [X31+16], S11
	095 Subtract S15, S13, S11
	096 Move V11, [X19+180]
	097 Move S2, [X19+156]
	098 Move S8, [X19+160]
	099 Move W8, [X23+2596]
	100 Move S5, [X19+164]
	101 Move S10, [X19+168]
	102 Move [X31+4], S13
	103 Move S13, W31
	104 Multiply S12, S9, S0
	105 Multiply S14, S1, S13
	106 Move [X31+28], S2
	107 Compare W8, 0
	108 JumpIfNotEqual {116}
	109 Move X0, 0x575000
	110 Move X0, [X0+1448]
	111 Move [X31], S5
	112 Call 0x1C17CF4
	113 Move V5, [X31]
	114 Move W8, 1
	115 Move [X23+2596], W8
	116 Move X0, [X22]
	117 Multiply S0, S8, S8
	118 Multiply S1, S5, S5
	119 Add S0, S0, S1
	120 Multiply S1, S10, S10
	121 Move W8, [X0+224]
	122 Add S14, S12, S14
	123 Add S12, S1, S0
	124 Multiply S0, S9, S9
	125 Add S0, S0, S13
	126 Multiply S1, S15, S15
	127 Multiply S11, S15, S11
	128 Add S13, S1, S0
	129 Compare W8, 0
	130 JumpIfNotEqual {134}
	131 Move [X31], S5
	132 Call 0x1C17DFC
	133 Move V5, [X31]
	134 Move X8, -50946048
	135 Move V1, [X8+4072]
	136 Multiply S0, S13, S12
	137 NotImplemented "Instruction FSQRT not yet implemented."
	138 Add S14, S11, S14
	139 NotImplemented "Instruction FCMP not yet implemented."
	140 Move S1, W31
	141 Move X0, [X22]
	142 Move S2, W31
	143 Multiply S1, S9, S8
	144 Multiply S2, S5, S2
	145 Multiply S3, S15, S10
	146 Add S1, S1, S2
	147 Add S1, S3, S1
	148 Move W8, [X0+224]
	149 Move S4, 1
	150 NotImplemented "Instruction FDIV not yet implemented."
	151 Move S2, -1
	152 NotImplemented "Instruction FMIN not yet implemented."
	153 NotImplemented "Instruction FCMP not yet implemented."
	154 NotImplemented "Instruction FCSEL not yet implemented."
	155 Compare W8, 0
	156 JumpIfNotEqual {158}
	157 Call 0x1C17DFC
	158 NotImplemented "Instruction FCVT not yet implemented."
	159 Call 0x3EB2B80
	160 Move X8, -50941952
	161 Move V1, [X8+1096]
	162 NotImplemented "Instruction INVALID not yet implemented."
	163 Multiply S1, S0, S1
	164 NotImplemented "Instruction FNEG not yet implemented."
	165 NotImplemented "Instruction FCMP not yet implemented."
	166 Move X23, 0x859000
	167 NotImplemented "Instruction FCSEL not yet implemented."
	168 Move V1, [X31+28]
	169 Move W8, [X23+1926]
	170 Add S14, S1, S0
	171 Compare W8, 0
	172 JumpIfNotEqual {178}
	173 Move X0, 0x574000
	174 Move X0, [X0+1440]
	175 Call 0x1C17CF4
	176 Move W8, 1
	177 Move [X23+1926], W8
	178 Move X8, [X21]
	179 Move V0, V14
	180 Move X0, X31
	181 Move X8, [X8+184]
	182 Move S1, [X8+24]
	183 Move S2, [X8+28]
	184 Move V3, [X8+32]
	185 Call Quaternion.AngleAxis, V0, X0
	186 Compare X20, 0
	187 JumpIfEqual {293}
	188 Move X0, X20
	189 Move X1, X31
	190 Call Transform.set_rotation, X0, X1
	191 Move S9, [X31+20]
	192 Move S8, [X31+24]
	193 Move S10, [X31+12]
	194 Move S11, [X31+16]
	195 Move S13, [X31+4]
	196 Move S12, [X31+8]
	197 Move W8, [X19+130]
	198 Compare W8, 0
	199 JumpIfEqual {229}
	200 Move X23, 0x859000
	201 Move W8, [X23+2140]
	202 Compare W8, 0
	203 JumpIfNotEqual {209}
	204 Move X0, 0x574000
	205 Move X0, [X0+1448]
	206 Call 0x1C17CF4
	207 Move W8, 1
	208 Move [X23+2140], W8
	209 Move X0, [X22]
	210 Subtract S10, S8, S10
	211 Subtract S9, S9, S12
	212 Subtract S8, S11, S13
	213 Move W8, [X0+224]
	214 Compare W8, 0
	215 JumpIfNotEqual {217}
	216 Call 0x1C17DFC
	217 Multiply S0, S10, S10
	218 Multiply S1, S9, S9
	219 Add S0, S0, S1
	220 Multiply S1, S8, S8
	221 Add S0, S1, S0
	222 NotImplemented "Instruction FSQRT not yet implemented."
	223 NotImplemented "Instruction FCMP not yet implemented."
	224 Compare X20, 0
	225 JumpIfEqual {293}
	226 Move X0, X20
	227 Move X1, X31
	228 Call Transform.get_localScale, X0
	229 Move X20, [X31+128]
	230 Move X19, [X31+136]
	231 Move X22, [X31+112]
	232 Move X21, [X31+120]
	233 Move X30, [X31+96]
	234 Move X23, [X31+104]
	235 Move D9, [X31+80]
	236 Move D8, [X31+88]
	237 Move D11, [X31+64]
	238 Move D10, [X31+72]
	239 Move D13, [X31+48]
	240 Move D12, [X31+56]
	241 Move D15, [X31+32]
	242 Move D14, [X31+40]
	243 Add X31, X31, 144
	244 Return 
	245 Move S2, [X19+184]
	246 Move S1, [X19+188]
	247 NotImplemented "Instruction FDIV not yet implemented."
	248 Multiply S0, S2, S0
	249 Move S2, [X19+132]
	250 Move S1, [X19+136]
	251 Move X19, 0x859000
	252 Move W8, [X19+2139]
	253 NotImplemented "Instruction FCMP not yet implemented."
	254 NotImplemented "Instruction FCSEL not yet implemented."
	255 NotImplemented "Instruction FCMP not yet implemented."
	256 NotImplemented "Instruction FCSEL not yet implemented."
	257 Compare W8, 0
	258 JumpIfNotEqual {264}
	259 Move X0, 0x574000
	260 Move X0, [X0+1440]
	261 Call 0x1C17CF4
	262 Move W8, 1
	263 Move [X19+2139], W8
	264 Compare X20, 0
	265 JumpIfEqual {293}
	266 Move X8, [X21]
	267 Move X0, X20
	268 Move X20, [X31+128]
	269 Move X19, [X31+136]
	270 Move X22, [X31+112]
	271 Move X21, [X31+120]
	272 Move X8, [X8+184]
	273 Move X30, [X31+96]
	274 Move X23, [X31+104]
	275 Move D11, [X31+64]
	276 Move D10, [X31+72]
	277 Move D13, [X31+48]
	278 Move D12, [X31+56]
	279 Move S1, [X8+16]
	280 Move S0, [X8+20]
	281 Move V3, [X8+12]
	282 Move D15, [X31+32]
	283 Move D14, [X31+40]
	284 Move X1, X31
	285 Multiply S2, S8, S0
	286 Multiply S1, S8, S1
	287 Multiply S0, S8, S3
	288 Move D9, [X31+80]
	289 Move D8, [X31+88]
	290 Add X31, X31, 144
	291 Call Transform.set_localScale, X0, X1
	292 Return 
	293 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03B80234 MOV X19, X0
	0x03B80238 TBNZ X8, 0x0, 0x3B8025C
	0x03B8023C ADRP X0, 0x573000
	0x03B80240 LDR X0, [X0 + 0x5A8]
	0x03B80244 BL 0x1C16CF4
	0x03B80248 ADRP X0, 0x573000
	0x03B8024C LDR X0, [X0 + 0x598]
	0x03B80250 BL 0x1C16CF4
	0x03B80254 MOVZ W8, 0x1
	0x03B80258 STRB W8, [X20 + 0xAD1]
	0x03B8025C LDR V8, [X19 + 0x5C]
	0x03B80260 FCMP S8, 0x0
	0x03B80264 B.LE 0x3B80288

ISIL:
	001 Move X10, -50925568
	002 Move V0, [X10+408]
	003 Move W8, 1
	004 Move W9, 0x3F800000
	005 Move W11, 257
	006 Move X1, X31
	007 Move [X0+120], W8
	008 Move [X0+124], W9
	009 Move [X0+129], W8
	010 Move [X0+72], W8
	011 Move [X0+132], D0
	012 NotImplemented "Instruction STRH not yet implemented."
	013 Call MonoBehaviour..ctor, X0
	014 Return 

