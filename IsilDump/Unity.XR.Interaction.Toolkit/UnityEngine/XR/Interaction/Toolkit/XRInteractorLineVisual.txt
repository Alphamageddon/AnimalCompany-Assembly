Type: UnityEngine.XR.Interaction.Toolkit.XRInteractorLineVisual

Method: System.Single get_lineWidth()

Disassembly:
	0x03B4963C CBZ W8, 0x3B49698
	0x03B49640 LDRB W8, [X19 + 0x1BB]

ISIL:
	001 Move V0, [X0+32]
	002 Return V0

Method: System.Void set_lineWidth(System.Single value)

Disassembly:
	0x03B49644 CBZ W8, 0x3B496C8
	0x03B49648 LDR X20, [X19 + 0xF0]
	0x03B4964C CBZ X20, 0x3B49C5C
	0x03B49650 ADRP X10, 0x611000
	0x03B49654 LDR X8, [X20]
	0x03B49658 LDR X10, [X10 + 0x328]
	0x03B4965C LDRH W9, [X8 + 0x12E]
	0x03B49660 LDR X1, [X10]
	0x03B49664 CBZ X9, 0x3B49688
	0x03B49668 LDR X10, [X8 + 0xB0]
	0x03B4966C ADD X10, X10, 0x8
	0x03B49670 LDUR X11, [X10 - 0x8]
	0x03B49674 CMP X11, X1
	0x03B49678 B.EQ 0x3B496D0
	0x03B4967C SUBS X9, X9, 0x1
	0x03B49680 ADD X10, X10, 0x10
	0x03B49684 B.NE 0x3B49670
	0x03B49688 MOVZ W2, 0x4
	0x03B4968C MOV X0, X20
	0x03B49690 BL 0x1C5C788
	0x03B49694 B 0x3B496E0
	0x03B49698 LDR X0, [X19 + 0xD0]
	0x03B4969C CBZ X0, 0x3B49C5C
	0x03B496A0 MOV W1, W31
	0x03B496A4 MOV X2, X31
	0x03B496A8 BL 0x3C13034

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x89A000
	006 Move W8, [X20+2220]
	007 Move V8, V0
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x612000
	014 Move X0, [X0+2384]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+2220], W8
	018 Move X0, [X19+448]
	019 Move W8, 1
	020 Move [X19+32], S8
	021 Move [X19+197], W8
	022 Compare X0, 0
	023 JumpIfEqual {33}
	024 Move X8, 0x612000
	025 Move X8, [X8+2384]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+8]
	029 Move X1, [X8]
	030 Move V8, [X31+32]
	031 Call BindableVariableBase`1<Single>.BroadcastValue, X0
	032 Return 
	033 Call 0x1C17F20

Method: System.Boolean get_overrideInteractorLineLength()

Disassembly:
	0x03B496AC LDP X20, X19, [X31 + 0xE0]
	0x03B496B0 LDP X22, X21, [X31 + 0xD0]

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Void set_overrideInteractorLineLength(System.Boolean value)

Disassembly:
	0x03B496B4 LDP X24, X23, [X31 + 0xC0]
	0x03B496B8 LDP X30, X25, [X31 + 0xB0]
	0x03B496BC LDP D9, D8, [X31 + 0xA0]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+36], W8
	003 Return 

Method: System.Single get_lineLength()

Disassembly:
	0x03B496C0 ADD X31, X31, 0xF0
	0x03B496C4 RET

ISIL:
	001 Move V0, [X0+40]
	002 Return V0

Method: System.Void set_lineLength(System.Single value)

Disassembly:
	0x03B496C8 MOV W20, W31
	0x03B496CC B 0x3B496F0

ISIL:
	001 Move [X0+40], S0
	002 Return 

Method: System.Boolean get_autoAdjustLineLength()

Disassembly:
	0x03B496D0 LDR W9, [X10]
	0x03B496D4 ADD W9, W9, 0x4

ISIL:
	001 Move W0, [X0+44]
	002 Return X0

Method: System.Void set_autoAdjustLineLength(System.Boolean value)

Disassembly:
	0x03B496D8 ADD X8, X8, W9, 0x4, SXTW
	0x03B496DC ADD X0, X8, 0x138
	0x03B496E0 LDP X8, X1, [X0]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+44], W8
	003 Return 

Method: System.Single get_minLineLength()

Disassembly:
	0x03B496E4 MOV X0, X20
	0x03B496E8 BLR X8

ISIL:
	001 Move V0, [X0+48]
	002 Return V0

Method: System.Void set_minLineLength(System.Single value)

Disassembly:
	0x03B496EC AND W20, W0, 0x1
	0x03B496F0 LDRB W8, [X19 + 0x1B8]

ISIL:
	001 Move [X0+48], S0
	002 Return 

Method: System.Boolean get_useDistanceToHitAsMaxLineLength()

Disassembly:
	0x03B496F4 CBZ W8, 0x3B49710
	0x03B496F8 LDR X8, [X19 + 0x108]

ISIL:
	001 Move W0, [X0+52]
	002 Return X0

Method: System.Void set_useDistanceToHitAsMaxLineLength(System.Boolean value)

Disassembly:
	0x03B496FC CBZ X8, 0x3B49C5C
	0x03B49700 LDR W8, [X8 + 0x290]
	0x03B49704 CMP W8, 0x0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+52], W8
	003 Return 

Method: System.Single get_lineRetractionDelay()

Disassembly:
	0x03B49708 CSET W22, EQ
	0x03B4970C B 0x3B49714

ISIL:
	001 Move V0, [X0+56]
	002 Return V0

Method: System.Void set_lineRetractionDelay(System.Single value)

Disassembly:
	0x03B49710 MOV W22, W31
	0x03B49714 LDR W2, [X19 + 0x120]

ISIL:
	001 Move [X0+56], S0
	002 Return 

Method: System.Single get_lineLengthChangeSpeed()

Disassembly:
	0x03B49718 ADD X4, X31, 0x90
	0x03B4971C ADD X5, X31, 0x80

ISIL:
	001 Move V0, [X0+60]
	002 Return V0

Method: System.Void set_lineLengthChangeSpeed(System.Single value)

Disassembly:
	0x03B49720 MOV X0, X19
	0x03B49724 MOV X1, X21

ISIL:
	001 Move [X0+60], S0
	002 Return 

Method: UnityEngine.AnimationCurve get_widthCurve()

Disassembly:
	0x03B49728 MOV W3, W22
	0x03B4972C BL 0x3B4A030

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_widthCurve(UnityEngine.AnimationCurve value)

Disassembly:
	0x03B49730 LDR W2, [X19 + 0x120]
	0x03B49734 ADD X3, X31, 0x70
	0x03B49738 ADD X4, X31, 0x6C
	0x03B4973C MOV X0, X19

ISIL:
	001 Move W8, 1
	002 Move [X0+64], X1
	003 Move [X0+197], W8
	004 Return 

Method: System.Boolean get_setLineColorGradient()

Disassembly:
	0x03B49740 MOV X1, X21
	0x03B49744 BL 0x3B4A2FC

ISIL:
	001 Move W0, [X0+72]
	002 Return X0

Method: System.Void set_setLineColorGradient(System.Boolean value)

Disassembly:
	0x03B49748 LDRB W10, [X19 + 0x90]
	0x03B4974C AND W9, W0, 0x1
	0x03B49750 STRB W9, [X19 + 0x19D]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+72], W8
	003 Return 

Method: UnityEngine.Gradient get_validColorGradient()

Disassembly:
	0x03B49754 LDRB W9, [X31 + 0x6C]
	0x03B49758 CMP W10, 0x0

ISIL:
	001 Move X0, [X0+80]
	002 Return X0

Method: System.Void set_validColorGradient(UnityEngine.Gradient value)

Disassembly:
	0x03B4975C CSET W10, NE
	0x03B49760 AND W8, W22, W20, 0x0

ISIL:
	001 Move [X0+80], X1
	002 Return 

Method: UnityEngine.Gradient get_invalidColorGradient()

Disassembly:
	0x03B49764 AND W10, W0, W10, 0x0
	0x03B49768 AND W10, W22, W10, 0x0

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: System.Void set_invalidColorGradient(UnityEngine.Gradient value)

Disassembly:
	0x03B4976C ORR W9, W8, W9, 0x0
	0x03B49770 ORR W9, W9, W10, 0x0

ISIL:
	001 Move [X0+88], X1
	002 Return 

Method: UnityEngine.Gradient get_blockedColorGradient()

Disassembly:
	0x03B49774 CBZ W9, 0x3B497B4
	0x03B49778 LDR V0, [X19 + 0x8C]

ISIL:
	001 Move X0, [X0+96]
	002 Return X0

Method: System.Void set_blockedColorGradient(UnityEngine.Gradient value)

Disassembly:
	0x03B4977C FMOV S1, 1
	0x03B49780 FCMP S0, S1

ISIL:
	001 Move [X0+96], X1
	002 Return 

Method: System.Boolean get_treatSelectionAsValidState()

Disassembly:
	0x03B49784 B.PL 0x3B497B4
	0x03B49788 MOVZ W9, 0x14

ISIL:
	001 Move W0, [X0+104]
	002 Return X0

Method: System.Void set_treatSelectionAsValidState(System.Boolean value)

Disassembly:
	0x03B4978C MOVZ W10, 0x13
	0x03B49790 STR W9, [X19 + 0x120]
	0x03B49794 STR W10, [X19 + 0xC0]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+104], W8
	003 Return 

Method: System.Boolean get_smoothMovement()

Disassembly:
	0x03B49798 CBZ W8, 0x3B497AC
	0x03B4979C ADD X1, X31, 0x90

ISIL:
	001 Move W0, [X0+105]
	002 Return X0

Method: System.Void set_smoothMovement(System.Boolean value)

Disassembly:
	0x03B497A0 ADD X2, X31, 0x70
	0x03B497A4 MOV X0, X19
	0x03B497A8 BL 0x3B4A658

ISIL:
	001 And W8, W1, 1
	002 Move [X0+105], W8
	003 Return 

Method: System.Single get_followTightness()

Disassembly:
	0x03B497AC MOVZ W24, 0x1
	0x03B497B0 B 0x3B497B8

ISIL:
	001 Move V0, [X0+108]
	002 Return V0

Method: System.Void set_followTightness(System.Single value)

Disassembly:
	0x03B497B4 MOV W24, W31
	0x03B497B8 LDR W1, [X19 + 0x120]

ISIL:
	001 Move [X0+108], S0
	002 Return 

Method: System.Single get_snapThresholdDistance()

Disassembly:
	0x03B497BC MOV X0, X21
	0x03B497C0 BL 0x3B4A8FC

ISIL:
	001 Move V0, [X0+112]
	002 Return V0

Method: System.Void set_snapThresholdDistance(System.Single value)

Disassembly:
	0x03B497C4 LDR W1, [X19 + 0x120]
	0x03B497C8 ADD X22, X19, 0x130
	0x03B497CC MOV X0, X22
	0x03B497D0 BL 0x3B4A8FC

ISIL:
	001 Move [X0+112], S0
	002 Multiply S0, S0, S0
	003 Move [X0+164], S0
	004 Return 

Method: UnityEngine.GameObject get_reticle()

Disassembly:
	0x03B497D4 TBNZ X0, 0x0, 0x3B497DC
	0x03B497D8 STR W31, [X19 + 0x140]

ISIL:
	001 Move X0, [X0+120]
	002 Return X0

Method: System.Void set_reticle(UnityEngine.GameObject value)

Disassembly:
	0x03B497DC LDR W1, [X19 + 0x120]
	0x03B497E0 ADD X23, X19, 0x148
	0x03B497E4 MOV X0, X23
	0x03B497E8 BL 0x3B4A8FC
	0x03B497EC TBNZ X0, 0x0, 0x3B497F4
	0x03B497F0 STR W31, [X19 + 0x158]
	0x03B497F4 CBZ W24, 0x3B498D0
	0x03B497F8 LDRB W8, [X19 + 0x69]
	0x03B497FC CBZ W8, 0x3B498B4
	0x03B49800 LDRB W8, [X19 + 0x180]
	0x03B49804 CBZ W8, 0x3B498A0
	0x03B49808 LDR W8, [X19 + 0x158]
	0x03B4980C CMP W8, 0x1
	0x03B49810 B.LT 0x3B498A0
	0x03B49814 LDR V8, [X19 + 0x6C]
	0x03B49818 MOV X0, X31
	0x03B4981C BL 0x3C3C714
	0x03B49820 ADD X8, X19, 0x184
	0x03B49824 LDR V1, [X31 + 0x80]
	0x03B49828 LDR V2, [X31 + 0x88]
	0x03B4982C LDR V4, [X8]
	0x03B49830 LDR V5, [X8 + 0x8]
	0x03B49834 FMUL S0, S8, S0
	0x03B49838 FMOV S3, 1
	0x03B4983C FMIN S3, S0, S3
	0x03B49840 FCMP S0, 0x0
	0x03B49844 FMOV S0, W31
	0x03B49848 FCSEL S0, S3, S0, PL
	0x03B4984C FSUB V1.2S, V1.2S, V4.2S
	0x03B49850 FSUB S2, S2, S5
	0x00000000 INVALID
	0x03B49858 FMUL S2, S0, S2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x89A000
	007 Move X21, 0x5AB000
	008 Move W8, [X22+2221]
	009 Move X21, [X21+2416]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5AB000
	017 Move X0, [X0+2416]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2221], W8
	021 Move [X19+120], X20
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X31
	028 Call Application.get_isPlaying
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {39}
	033 Move X0, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 

Method: UnityEngine.GameObject get_blockedReticle()

Disassembly:
	0x03B49944 FADD S0, S0, S2
	0x03B49948 MOV S2, V2.S[1]

ISIL:
	001 Move X0, [X0+128]
	002 Return X0

Method: System.Void set_blockedReticle(UnityEngine.GameObject value)

Disassembly:
	0x03B4994C FADD S0, S2, S0
	0x03B49950 FCMP S0, S1
	0x03B49954 CSET W8, GT
	0x03B49958 B 0x3B49960
	0x03B4995C MOVZ W8, 0x1
	0x03B49960 STRB W8, [X19 + 0xC4]
	0x03B49964 ADD X3, X31, 0x90
	0x03B49968 ADD X4, X31, 0x70
	0x03B4996C MOV X0, X19
	0x03B49970 MOV W1, W20
	0x03B49974 MOV W2, W24
	0x03B49978 BL 0x3B4AA4C
	0x03B4997C TBNZ X24, 0x0, 0x3B499A4
	0x03B49980 LDRB W8, [X19 + 0x69]
	0x03B49984 CBZ W8, 0x3B499A4
	0x03B49988 LDR W8, [X19 + 0x158]
	0x03B4998C LDR W9, [X19 + 0x120]
	0x03B49990 CMP W8, W9
	0x03B49994 B.NE 0x3B499A4
	0x03B49998 LDRB W8, [X19 + 0xC4]
	0x03B4999C EOR W24, W8, 0x1
	0x03B499A0 B 0x3B499A8
	0x03B499A4 MOV W24, W31
	0x03B499A8 LDRB W8, [X19 + 0x24]
	0x03B499AC ORR W8, W24, W8, 0x0
	0x03B499B0 CBZ W8, 0x3B49A8C
	0x03B499B4 ADRP X25, 0x611000
	0x03B499B8 LDR X25, [X25 + 0x9E8]
	0x03B499BC MOV X0, X21
	0x03B499C0 LDR X1, [X25]
	0x03B499C4 BL 0x2133578
	0x03B499C8 LDR X8, [X25]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x89A000
	007 Move X21, 0x5AB000
	008 Move W8, [X22+2222]
	009 Move X21, [X21+2416]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5AB000
	017 Move X0, [X0+2416]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2222], W8
	021 Move [X19+128], X20
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X31
	028 Call Application.get_isPlaying
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {39}
	033 Move X0, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 

Method: System.Boolean get_stopLineAtFirstRaycastHit()

Disassembly:
	0x03B49AB4 LDRB W8, [X19 + 0x19D]
	0x03B49AB8 STR W0, [X19 + 0x140]

ISIL:
	001 Move W0, [X0+136]
	002 Return X0

Method: System.Void set_stopLineAtFirstRaycastHit(System.Boolean value)

Disassembly:
	0x03B49ABC CBNZ W8, 0x3B49ACC
	0x03B49AC0 LDRB W8, [X19 + 0x68]
	0x03B49AC4 ANDS W31, W20, W8, 0x0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+136], W8
	003 Return 

Method: System.Boolean get_stopLineAtSelection()

Disassembly:
	0x03B49AC8 B.EQ 0x3B49C20
	0x03B49ACC CBZ W20, 0x3B49B6C

ISIL:
	001 Move W0, [X0+137]
	002 Return X0

Method: System.Void set_stopLineAtSelection(System.Boolean value)

Disassembly:
	0x03B49AD0 MOV W20, W31
	0x03B49AD4 ADD X8, X19, 0x50
	0x03B49AD8 LDR X1, [X8]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+137], W8
	003 Return 

Method: System.Boolean get_snapEndpointIfAvailable()

Disassembly:
	0x03B49ADC MOV X0, X19
	0x03B49AE0 BL 0x3B4B208

ISIL:
	001 Move W0, [X0+138]
	002 Return X0

Method: System.Void set_snapEndpointIfAvailable(System.Boolean value)

Disassembly:
	0x03B49AE4 MOV X0, X19
	0x03B49AE8 MOV W1, W20
	0x03B49AEC BL 0x3B4B234

ISIL:
	001 And W8, W1, 1
	002 Move [X0+138], W8
	003 Return 

Method: System.Single get_lineBendRatio()

Disassembly:
	0x03B49AF0 LDR X0, [X19 + 0xD0]
	0x03B49AF4 CBZ X0, 0x3B49C5C

ISIL:
	001 Move V0, [X0+140]
	002 Return V0

Method: System.Void set_lineBendRatio(System.Single value)

Disassembly:
	0x03B49AF8 LDR W8, [X19 + 0x140]
	0x03B49AFC CMP W8, 0x2
	0x03B49B00 B.LT 0x3B496A0
	0x03B49B04 MOVZ W1, 0x1
	0x03B49B08 MOV X2, X31
	0x03B49B0C BL 0x3C13034
	0x03B49B10 LDR X0, [X19 + 0xD0]
	0x03B49B14 CBZ X0, 0x3B49C5C

ISIL:
	001 Move X8, -50716672
	002 Move V1, [X8+816]
	003 Move S2, 1
	004 NotImplemented "Instruction FMIN not yet implemented."
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 NotImplemented "Instruction FCSEL not yet implemented."
	007 Move [X0+140], S0
	008 Return 

Method: System.Boolean get_overrideInteractorLineOrigin()

Disassembly:
	0x03B49B18 LDR W1, [X19 + 0x140]
	0x03B49B1C MOV X2, X31

ISIL:
	001 Move W0, [X0+144]
	002 Return X0

Method: System.Void set_overrideInteractorLineOrigin(System.Boolean value)

Disassembly:
	0x03B49B20 BL 0x3C117E8
	0x03B49B24 LDR X0, [X19 + 0xD0]
	0x03B49B28 CBZ X0, 0x3B49C5C

ISIL:
	001 And W8, W1, 1
	002 Move [X0+144], W8
	003 Return 

Method: UnityEngine.Transform get_lineOriginTransform()

Disassembly:
	0x03B49B2C LDP X1, X2, [X19 + 0x130]
	0x03B49B30 MOV X3, X31

ISIL:
	001 Move X0, [X0+152]
	002 Return X0

Method: System.Void set_lineOriginTransform(UnityEngine.Transform value)

Disassembly:
	0x03B49B34 BL 0x3C11980
	0x03B49B38 ADRP X8, 0x611000

ISIL:
	001 Move [X0+152], X1
	002 Return 

Method: System.Single get_lineOriginOffset()

Disassembly:
	0x03B49B3C LDP X0, X1, [X19 + 0x130]
	0x03B49B40 LDP X3, X4, [X19 + 0x148]

ISIL:
	001 Move V0, [X0+160]
	002 Return V0

Method: System.Void set_lineOriginOffset(System.Single value)

Disassembly:
	0x03B49B44 LDR W6, [X19 + 0x140]
	0x03B49B48 LDR X8, [X8 + 0x9E0]

ISIL:
	001 Move [X0+160], S0
	002 Return 

Method: System.Void Reset()

Disassembly:
	0x03B49B4C MOV W2, W31

ISIL:
	001 Return 

Method: System.Void OnValidate()

Disassembly:
	0x03B49B50 MOV W5, W31
	0x03B49B54 LDR X7, [X8]
	0x03B49B58 BL 0x23F1A04
	0x03B49B5C LDR W8, [X19 + 0x140]
	0x03B49B60 STRB W31, [X19 + 0xC4]
	0x03B49B64 STR W8, [X19 + 0x158]
	0x03B49B68 B 0x3B496AC
	0x03B49B6C LDRB W8, [X19 + 0x1B9]
	0x03B49B70 CBZ W8, 0x3B49AD0
	0x03B49B74 LDR X0, [X19 + 0x100]
	0x03B49B78 CBZ X0, 0x3B49C5C
	0x03B49B7C BL 0x3B4B11C
	0x03B49B80 TBZ X0, 0x0, 0x3B49AD0
	0x03B49B84 LDR X0, [X19 + 0x100]
	0x03B49B88 CBZ X0, 0x3B49C5C
	0x03B49B8C LDR X20, [X0 + 0x30]
	0x03B49B90 BL 0x3B4B178
	0x03B49B94 CBZ X0, 0x3B49C5C
	0x03B49B98 ADRP X8, 0x611000
	0x03B49B9C LDR X8, [X8 + 0x9D8]
	0x03B49BA0 LDR X1, [X8]
	0x03B49BA4 ADD X8, X31, 0x8
	0x03B49BA8 BL 0x301CB58
	0x03B49BAC LDUR V0, [X31 + 0x8]
	0x03B49BB0 LDR X8, [X31 + 0x18]
	0x03B49BB4 ADRP X21, 0x611000
	0x03B49BB8 LDR X21, [X21 + 0x9C8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x89A000
	006 Move X21, 0x5AB000
	007 Move W8, [X20+2223]
	008 Move X21, [X21+2416]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5AB000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2223], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call Application.get_isPlaying
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {35}
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return 

Method: System.Void Awake()

Disassembly:
	0x03B49C9C BL 0x2BC434C
	0x03B49CA0 CBZ X21, 0x3B49C4C
	0x03B49CA4 MOV X0, X21
	0x03B49CA8 BL 0x1C16F18
	0x03B49CAC MOV X21, X31
	0x03B49CB0 B 0x3B49CB8
	0x03B49CB4 MOV X20, X0
	0x03B49CB8 ADRP X8, 0x611000
	0x03B49CBC LDR X8, [X8 + 0x9C0]
	0x03B49CC0 LDR X1, [X8]
	0x03B49CC4 ADD X0, X31, 0x20
	0x03B49CC8 BL 0x2BC434C
	0x03B49CCC CBNZ X21, 0x3B49CD8
	0x03B49CD0 MOV X0, X20
	0x03B49CD4 BL 0x1D2C690
	0x03B49CD8 MOV X0, X21
	0x03B49CDC BL 0x1C16F18
	0x03B49CE0 BL 0x1990590
	0x03B49CE4 SUB X31, X31, 0xE0
	0x03B49CE8 STP D13, D12, [X31 + 0x80]
	0x03B49CEC STP D11, D10, [X31 + 0x90]
	0x03B49CF0 STP D9, D8, [X31 + 0xA0]
	0x03B49CF4 STR X30, [X31 + 0xB0]
	0x03B49CF8 STP X22, X21, [X31 + 0xC0]
	0x03B49CFC STP X20, X19, [X31 + 0xD0]
	0x03B49D00 ADRP X22, 0x899000
	0x03B49D04 LDRB W8, [X22 + 0x8B6]
	0x03B49D08 MOV X19, X2
	0x03B49D0C MOV X20, X1
	0x03B49D10 MOV X21, X0
	0x03B49D14 TBNZ X8, 0x0, 0x3B49D5C
	0x03B49D18 ADRP X0, 0x611000
	0x03B49D1C LDR X0, [X0 + 0x970]
	0x03B49D20 BL 0x1C16CF4
	0x03B49D24 ADRP X0, 0x611000
	0x03B49D28 LDR X0, [X0 + 0x9F0]
	0x03B49D2C BL 0x1C16CF4
	0x03B49D30 ADRP X0, 0x611000
	0x03B49D34 LDR X0, [X0 + 0x9F8]
	0x03B49D38 BL 0x1C16CF4
	0x03B49D3C ADRP X0, 0x611000
	0x03B49D40 LDR X0, [X0 + 0xA00]
	0x03B49D44 BL 0x1C16CF4
	0x03B49D48 ADRP X0, 0x5AA000
	0x03B49D4C LDR X0, [X0 + 0x598]
	0x03B49D50 BL 0x1C16CF4
	0x03B49D54 MOVZ W8, 0x1
	0x03B49D58 STRB W8, [X22 + 0x8B6]
	0x03B49D5C STP X31, X31, [X31 + 0x40]
	0x03B49D60 STR W31, [X31 + 0x58]
	0x03B49D64 STR X31, [X31 + 0x50]
	0x03B49D68 LDRB W8, [X21 + 0xE8]
	0x03B49D6C CBZ W8, 0x3B49E5C
	0x03B49D70 STP X31, X31, [X31 + 0x40]
	0x03B49D74 STR W31, [X31 + 0x58]
	0x03B49D78 STR X31, [X31 + 0x50]
	0x03B49D7C LDRB W8, [X21 + 0x90]
	0x03B49D80 CBZ W8, 0x3B49F5C
	0x03B49D84 ADRP X8, 0x5AA000
	0x03B49D88 LDR X8, [X8 + 0x598]
	0x03B49D8C LDR X22, [X21 + 0x98]
	0x03B49D90 LDR X0, [X8]
	0x03B49D94 LDR W8, [X0 + 0xE0]
	0x03B49D98 CBNZ W8, 0x3B49DA0
	0x03B49D9C BL 0x1C16DFC
	0x03B49DA0 MOV X0, X22
	0x03B49DA4 MOV X1, X31
	0x03B49DA8 MOV X2, X31
	0x03B49DAC BL 0x3C354F8
	0x03B49DB0 TBZ X0, 0x0, 0x3B49F5C
	0x03B49DB4 LDR X0, [X21 + 0x98]
	0x03B49DB8 CBZ X0, 0x3B4A02C
	0x03B49DBC MOV X1, X31
	0x03B49DC0 BL 0x3C3F58C
	0x03B49DC4 LDR X0, [X21 + 0x98]
	0x03B49DC8 CBZ X0, 0x3B4A02C
	0x03B49DCC MOV X1, X31
	0x03B49DD0 MOV V8.16B, V0.16B
	0x03B49DD4 MOV V9.16B, V1.16B
	0x03B49DD8 MOV V10.16B, V2.16B
	0x03B49DDC BL 0x3C3FA04
	0x03B49DE0 ADRP X22, 0x88F000
	0x03B49DE4 LDRB W8, [X22 + 0x785]
	0x03B49DE8 MOV V11.16B, V0.16B
	0x03B49DEC MOV V12.16B, V1.16B
	0x03B49DF0 MOV V13.16B, V2.16B
	0x03B49DF4 CBNZ W8, 0x3B49E0C
	0x03B49DF8 ADRP X0, 0x5AA000
	0x03B49DFC LDR X0, [X0 + 0x5A8]
	0x03B49E00 BL 0x1C16CF4
	0x03B49E04 MOVZ W8, 0x1
	0x03B49E08 STRB W8, [X22 + 0x785]
	0x03B49E0C ADRP X8, 0x5AA000
	0x03B49E10 LDR X8, [X8 + 0x5A8]
	0x03B49E14 LDR X0, [X8]
	0x03B49E18 LDR W8, [X0 + 0xE0]
	0x03B49E1C CBNZ W8, 0x3B49E24
	0x03B49E20 BL 0x1C16DFC
	0x03B49E24 FMUL S0, S11, S11
	0x03B49E28 FMUL S1, S12, S12
	0x03B49E2C ADRP X8, 0xFFFFFFFFFCFA1000
	0x03B49E30 FADD S0, S0, S1
	0x03B49E34 LDR V1, [X8 + 0x17C]
	0x03B49E38 FMUL S2, S13, S13
	0x03B49E3C FADD S0, S2, S0
	0x03B49E40 FSQRT S2, S0
	0x03B49E44 FCMP S2, S1
	0x03B49E48 B.LE 0x3B49F00
	0x03B49E4C FDIV S0, S11, S2
	0x03B49E50 FDIV S1, S12, S2
	0x03B49E54 FDIV S2, S13, S2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x89A000
	007 Move X22, 0x612000
	008 Move X21, 0x612000
	009 Move W8, [X20+2224]
	010 Move X22, [X22+2408]
	011 Move X21, [X21+2416]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {37}
	017 Move X0, 0x612000
	018 Move X0, [X0+2408]
	019 Call 0x1C17CF4
	020 Move X0, 0x612000
	021 Move X0, [X0+2416]
	022 Call 0x1C17CF4
	023 Move X0, 0x612000
	024 Move X0, [X0+800]
	025 Call 0x1C17CF4
	026 Move X0, 0x612000
	027 Move X0, [X0+808]
	028 Call 0x1C17CF4
	029 Move X0, 0x612000
	030 Move X0, [X0+872]
	031 Call 0x1C17CF4
	032 Move X0, 0x612000
	033 Move X0, [X0+1984]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+2224], W8
	037 Move X1, [X22]
	038 Move X0, X19
	039 Call 0x21A4894, X0
	040 Move [X19+216], X0
	041 Move X1, [X21]
	042 Move X20, X0
	043 Call 0x1C17E00
	044 Move [X19+224], X0
	045 Move X1, [X21]
	046 Move X0, X20
	047 Call 0x1C17E00
	048 Move X0, [X19+216]
	049 Move X8, [X19+224]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CSET not yet implemented."
	052 Move [X19+232], W8
	053 Compare X0, 0
	054 JumpIfEqual {105}
	055 Move X8, 0x612000
	056 Move X8, [X8+872]
	057 Move X10, [X0]
	058 Move X9, [X8]
	059 Move W8, [X10+304]
	060 Move W11, [X9+304]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X8, 0x612000
	063 Move X8, [X8+808]
	064 Move X10, [X10+200]
	065 Add X10, X10, X11
	066 NotImplemented "Instruction LDUR not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W9, 1
	069 Move [X19+256], X0
	070 Move [X19+441], W9
	071 Move X1, [X8]
	072 Move X20, 0x612000
	073 Move X20, [X20+800]
	074 Call 0x1C17E00
	075 Compare X0, 0
	076 JumpIfEqual {80}
	077 Move W8, 1
	078 Move [X19+240], X0
	079 Move [X19+443], W8
	080 Move X0, [X19+216]
	081 Move X1, [X20]
	082 Call 0x1C17E00
	083 Compare X0, 0
	084 JumpIfEqual {88}
	085 Move W8, 1
	086 Move [X19+248], X0
	087 Move [X19+442], W8
	088 Move X8, [X19+216]
	089 Compare X8, 0
	090 JumpIfEqual {105}
	091 Move X9, 0x612000
	092 Move X9, [X9+1984]
	093 Move X10, [X8]
	094 Move X9, [X9]
	095 Move W12, [X10+304]
	096 Move W11, [X9+304]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X10, [X10+200]
	099 Add X10, X10, X11
	100 NotImplemented "Instruction LDUR not yet implemented."
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move [X19+264], X8
	103 Move W8, 1
	104 Move [X19+440], W8
	105 Move X0, X19
	106 Call XRInteractorLineVisual.FindXROrigin, X0
	107 Move X0, X19
	108 Call XRInteractorLineVisual.SetupReticle, X0
	109 Move X0, X19
	110 Call XRInteractorLineVisual.SetupBlockedReticle, X0
	111 Move X0, X19
	112 Call XRInteractorLineVisual.ClearLineRenderer, X0
	113 Move X0, X19
	114 Move X20, [X31+32]
	115 Move X19, [X31+40]
	116 Move X22, [X31+16]
	117 Move X21, [X31+24]
	118 Move X30, [X31+48]
	119 Call XRInteractorLineVisual.UpdateSettings, X0
	120 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03B49F30 LDP S0, S1, [X8]
	0x03B49F34 LDR V2, [X8 + 0x8]
	0x03B49F38 ADRP X8, 0x611000
	0x03B49F3C LDR X8, [X8 + 0xA00]
	0x03B49F40 ADD X0, X31, 0x40
	0x03B49F44 ADD X1, X31, 0x60
	0x03B49F48 STP S8, S9, [X31 + 0x60]
	0x03B49F4C LDR X2, [X8]
	0x03B49F50 STP S10, S0, [X31 + 0x68]
	0x03B49F54 STP S1, S2, [X31 + 0x70]
	0x03B49F58 BL 0x243818C
	0x03B49F5C LDR X21, [X21 + 0xE0]
	0x03B49F60 LDR V0, [X31 + 0x4]
	0x03B49F64 LDUR V1, [X31 + 0x4C]
	0x03B49F68 STR V0, [X31 + 0x2]
	0x03B49F6C STUR V1, [X31 + 0x2C]
	0x03B49F70 CBZ X21, 0x3B4A02C
	0x03B49F74 LDR V0, [X31 + 0x2]
	0x03B49F78 LDUR V1, [X31 + 0x2C]
	0x03B49F7C ADRP X10, 0x611000
	0x03B49F80 STR V0, [X31]
	0x03B49F84 STUR V1, [X31 + 0xC]
	0x03B49F88 LDR X8, [X21]
	0x03B49F8C LDR X10, [X10 + 0x970]
	0x03B49F90 LDRH W9, [X8 + 0x12E]
	0x03B49F94 LDR X1, [X10]
	0x03B49F98 CBZ X9, 0x3B49FBC
	0x03B49F9C LDR X10, [X8 + 0xB0]
	0x03B49FA0 ADD X10, X10, 0x8
	0x03B49FA4 LDUR X11, [X10 - 0x8]
	0x03B49FA8 CMP X11, X1
	0x03B49FAC B.EQ 0x3B49FCC
	0x03B49FB0 SUBS X9, X9, 0x1
	0x03B49FB4 ADD X10, X10, 0x10
	0x03B49FB8 B.NE 0x3B49FA4
	0x03B49FBC MOV X0, X21
	0x03B49FC0 MOV W2, W31
	0x03B49FC4 BL 0x1C5C788
	0x03B49FC8 B 0x3B49FD8
	0x03B49FCC LDRSW X9, [X10]
	0x03B49FD0 ADD X8, X8, X9, 0x4, LSL
	0x03B49FD4 ADD X0, X8, 0x138
	0x03B49FD8 LDR V0, [X31]
	0x03B49FDC LDUR V1, [X31 + 0xC]
	0x03B49FE0 LDR X8, [X0]
	0x03B49FE4 ADD X3, X31, 0x60
	0x03B49FE8 STR V0, [X31 + 0x6]
	0x03B49FEC STUR V1, [X31 + 0x6C]
	0x03B49FF0 LDR X4, [X0 + 0x8]
	0x03B49FF4 MOV X0, X21
	0x03B49FF8 MOV X1, X20
	0x03B49FFC MOV X2, X19
	0x03B4A000 BLR X8
	0x03B4A004 MOV W22, W0
	0x03B4A008 AND W0, W22, 0x1
	0x03B4A00C LDP X20, X19, [X31 + 0xD0]
	0x03B4A010 LDP X22, X21, [X31 + 0xC0]
	0x03B4A014 LDR X30, [X31 + 0xB0]
	0x03B4A018 LDP D9, D8, [X31 + 0xA0]
	0x03B4A01C LDP D11, D10, [X31 + 0x90]
	0x03B4A020 LDP D13, D12, [X31 + 0x80]
	0x03B4A024 ADD X31, X31, 0xE0
	0x03B4A028 RET
	0x03B4A02C BL 0x1C16F20
	0x03B4A030 SUB X31, X31, 0x70
	0x03B4A034 STP D11, D10, [X31 + 0x10]
	0x03B4A038 STP D9, D8, [X31 + 0x20]
	0x03B4A03C STP X30, X25, [X31 + 0x30]
	0x03B4A040 STP X24, X23, [X31 + 0x40]
	0x03B4A044 STP X22, X21, [X31 + 0x50]
	0x03B4A048 STP X20, X19, [X31 + 0x60]
	0x03B4A04C ADRP X25, 0x898000
	0x03B4A050 LDRB W8, [X25 + 0x8B9]
	0x03B4A054 MOV X21, X5
	0x03B4A058 MOV X19, X4
	0x03B4A05C MOV W23, W3
	0x03B4A060 MOV W24, W2
	0x03B4A064 MOV X20, X1
	0x03B4A068 MOV X22, X0
	0x03B4A06C TBNZ X8, 0x0, 0x3B4A090
	0x03B4A070 ADRP X0, 0x610000
	0x03B4A074 LDR X0, [X0 + 0x970]
	0x03B4A078 BL 0x1C16CF4
	0x03B4A07C ADRP X0, 0x5A9000
	0x03B4A080 LDR X0, [X0 + 0x598]
	0x03B4A084 BL 0x1C16CF4
	0x03B4A088 MOVZ W8, 0x1
	0x03B4A08C STRB W8, [X25 + 0x8B9]
	0x03B4A090 LDRB W8, [X22 + 0x90]
	0x03B4A094 CBZ W8, 0x3B4A100
	0x03B4A098 ADRP X8, 0x5A9000
	0x03B4A09C LDR X8, [X8 + 0x598]
	0x03B4A0A0 LDR X25, [X22 + 0x98]
	0x03B4A0A4 LDR X0, [X8]
	0x03B4A0A8 LDR W8, [X0 + 0xE0]
	0x03B4A0AC CBNZ W8, 0x3B4A0B4
	0x03B4A0B0 BL 0x1C16DFC
	0x03B4A0B4 MOV X0, X25
	0x03B4A0B8 MOV X1, X31
	0x03B4A0BC MOV X2, X31
	0x03B4A0C0 BL 0x3C354F8
	0x03B4A0C4 TBZ X0, 0x0, 0x3B4A100
	0x03B4A0C8 LDR X0, [X22 + 0x98]
	0x03B4A0CC CBZ X0, 0x3B4A2F8
	0x03B4A0D0 MOV X1, X31
	0x03B4A0D4 BL 0x3C3F58C
	0x03B4A0D8 STP S0, S1, [X19]
	0x03B4A0DC STR S2, [X19 + 0x8]
	0x03B4A0E0 LDR X0, [X22 + 0x98]
	0x03B4A0E4 CBZ X0, 0x3B4A2F8
	0x03B4A0E8 MOV X1, X31
	0x03B4A0EC BL 0x3C3FA04
	0x03B4A0F0 STP S0, S1, [X21]
	0x03B4A0F4 STR S2, [X21 + 0x8]
	0x03B4A0F8 TBNZ X23, 0x0, 0x3B4A274
	0x03B4A0FC B 0x3B4A2BC
	0x03B4A100 LDRB W8, [X22 + 0xE8]
	0x03B4A104 CBZ W8, 0x3B4A158
	0x03B4A108 LDR X24, [X22 + 0xE0]
	0x03B4A10C CBZ X24, 0x3B4A2F8
	0x03B4A110 ADRP X10, 0x610000
	0x03B4A114 LDR X8, [X24]
	0x03B4A118 LDR X10, [X10 + 0x970]
	0x03B4A11C LDRH W9, [X8 + 0x12E]
	0x03B4A120 LDR X1, [X10]
	0x03B4A124 CBZ X9, 0x3B4A148
	0x03B4A128 LDR X10, [X8 + 0xB0]
	0x03B4A12C ADD X10, X10, 0x8
	0x03B4A130 LDUR X11, [X10 - 0x8]
	0x03B4A134 CMP X11, X1
	0x03B4A138 B.EQ 0x3B4A204
	0x03B4A13C SUBS X9, X9, 0x1
	0x03B4A140 ADD X10, X10, 0x10
	0x03B4A144 B.NE 0x3B4A130
	0x03B4A148 MOVZ W2, 0x1
	0x03B4A14C MOV X0, X24
	0x03B4A150 BL 0x1C5C788
	0x03B4A154 B 0x3B4A214
	0x03B4A158 LDR X8, [X20]
	0x03B4A15C SUB W10, W24, 0x1
	0x03B4A160 MOVZ W11, 0xC
	0x03B4A164 ADRP X24, 0x88E000
	0x03B4A168 LDR W9, [X8 + 0x8]
	0x03B4A16C LDR X8, [X8]
	0x03B4A170 STR W9, [X19 + 0x8]
	0x03B4A174 STR X8, [X19]
	0x03B4A178 LDR X8, [X20]
	0x03B4A17C LDR V8, [X19]
	0x03B4A180 LDRB W9, [X24 + 0x785]
	0x03B4A184 LDR V11, [X19 + 0x8]
	0x03B4A188 NOP
	0x03B4A18C SMADDL X8, X10, X11, X8
	0x03B4A190 LDR V9, [X8]
	0x03B4A194 LDR V10, [X8 + 0x8]
	0x03B4A198 CBNZ W9, 0x3B4A1B0
	0x03B4A19C ADRP X0, 0x5A9000
	0x03B4A1A0 LDR X0, [X0 + 0x5A8]
	0x03B4A1A4 BL 0x1C16CF4
	0x03B4A1A8 MOVZ W8, 0x1
	0x03B4A1AC STRB W8, [X24 + 0x785]
	0x03B4A1B0 ADRP X8, 0x5A9000
	0x03B4A1B4 LDR X8, [X8 + 0x5A8]
	0x03B4A1B8 FSUB V9.2S, V9.2S, V8.2S
	0x03B4A1BC FSUB S8, S10, S11
	0x03B4A1C0 LDR X0, [X8]
	0x03B4A1C4 LDR W8, [X0 + 0xE0]
	0x03B4A1C8 CBNZ W8, 0x3B4A1D0
	0x03B4A1CC BL 0x1C16DFC
	0x03B4A1D0 ADRP X8, 0xFFFFFFFFFCFA0000
	0x00000000 INVALID
	0x03B4A1D8 LDR V2, [X8 + 0x17C]
	0x03B4A1DC FADDP S0, V0.2S
	0x03B4A1E0 FMUL S1, S8, S8
	0x03B4A1E4 FADD S0, S1, S0
	0x03B4A1E8 FSQRT S1, S0
	0x03B4A1EC FCMP S1, S2
	0x03B4A1F0 B.LE 0x3B4A230
	0x03B4A1F4 UNIMPLEMENTED
	0x00000000 INVALID
	0x03B4A1FC FDIV S1, S8, S1
	0x03B4A200 B 0x3B4A268

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x89A000
	007 Move X21, 0x5AB000
	008 Move W8, [X20+2225]
	009 Move X21, [X21+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {50}
	015 Move X0, 0x5AD000
	016 Move X0, [X0+1456]
	017 Call 0x1C17CF4
	018 Move X0, 0x5AB000
	019 Move X0, [X0+2416]
	020 Call 0x1C17CF4
	021 Move X0, 0x612000
	022 Move X0, [X0+2432]
	023 Call 0x1C17CF4
	024 Move X0, 0x5AB000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0x5D2000
	028 Move X0, [X0+3632]
	029 Call 0x1C17CF4
	030 Move X0, 0x612000
	031 Move X0, [X0+2440]
	032 Call 0x1C17CF4
	033 Move X0, 0x612000
	034 Move X0, [X0+2448]
	035 Call 0x1C17CF4
	036 Move X0, 0x5D5000
	037 Move X0, [X0+488]
	038 Call 0x1C17CF4
	039 Move X0, 0x612000
	040 Move X0, [X0+2456]
	041 Call 0x1C17CF4
	042 Move X0, 0x612000
	043 Move X0, [X0+2464]
	044 Call 0x1C17CF4
	045 Move X0, 0x612000
	046 Move X0, [X0+2472]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X20+2225], W8
	050 Move X0, [X21]
	051 Move X20, [X19+208]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move X0, X20
	057 Move X1, X31
	058 Move X2, X31
	059 Call Object.op_Equality, X0, X1
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {93}
	064 Move X8, 0x611000
	065 Move X8, [X8+2472]
	066 Move X1, X19
	067 Move X2, X31
	068 Move X0, [X8]
	069 Call String.Format, X0, X1
	070 Move X8, 0x5D4000
	071 Move X8, [X8+488]
	072 Move X20, X0
	073 Move X8, [X8]
	074 Move W9, [X8+224]
	075 Compare W9, 0
	076 JumpIfNotEqual {79}
	077 Move X0, X8
	078 Call 0x1C17DFC
	079 Move X0, X20
	080 Move X1, X19
	081 Move X2, X31
	082 Call XRLoggingUtils.LogError, X0, X1
	083 Move X0, X19
	084 Move X20, [X31+32]
	085 Move X19, [X31+40]
	086 Move X22, [X31+16]
	087 Move X21, [X31+24]
	088 Move W1, W31
	089 Move X2, X31
	090 Move X30, [X31+48]
	091 Call Behaviour.set_enabled, X0, X1
	092 Return 
	093 Move X8, [X19+216]
	094 Compare X8, 0
	095 JumpIfEqual {173}
	096 Move W8, 1
	097 Move [X19+196], W8
	098 Move X0, [X21]
	099 Move X20, [X19+200]
	100 Move W8, [X0+224]
	101 Compare W8, 0
	102 JumpIfNotEqual {104}
	103 Call 0x1C17DFC
	104 Move X0, X20
	105 Move X1, X31
	106 Move X2, X31
	107 Call Object.op_Inequality, X0, X1
	108 Move TEMP, X0
	109 And TEMP, TEMP, 1
	110 Compare TEMP, 1
	111 JumpIfNotEqual {119}
	112 Move X0, [X19+200]
	113 Compare X0, 0
	114 JumpIfEqual {211}
	115 Move W1, W31
	116 Move X2, X31
	117 Call GameObject.SetActive, X0, X1
	118 Move [X19+200], X31
	119 Move X8, 0x5AC000
	120 Move X20, [X19+464]
	121 Move X21, [X19+448]
	122 Move X8, [X8+1456]
	123 Move X0, [X8]
	124 Call 0x1C17F10
	125 Move X8, 0x611000
	126 Move X8, [X8+2448]
	127 Move X1, X19
	128 Move X3, X31
	129 Move X22, X0
	130 Move X2, [X8]
	131 Call Action`1<Single>..ctor, X0, X1, X2
	132 Compare X21, 0
	133 JumpIfEqual {211}
	134 Move X8, 0x611000
	135 Move X8, [X8+2432]
	136 Move X0, X21
	137 Move X1, X22
	138 Move X2, [X8]
	139 Call BindableVariableBase`1<Single>.Subscribe, X0, X1
	140 Compare X20, 0
	141 JumpIfEqual {211}
	142 Move X1, X0
	143 Move X0, X20
	144 Move X2, X31
	145 Call BindingsGroup.AddBinding, X0, X1
	146 Move X8, 0x5D1000
	147 Move X8, [X8+3632]
	148 Move X0, [X8]
	149 Call 0x1C17F10
	150 Move X8, 0x611000
	151 Move X8, [X8+2440]
	152 Move X1, X19
	153 Move X3, X31
	154 Move X20, X0
	155 Move X2, [X8]
	156 Call UnityAction..ctor, X0, X1, X2
	157 Move X8, 0x5AA000
	158 Move X8, [X8+2416]
	159 Move X0, [X8]
	160 Move W8, [X0+224]
	161 Compare W8, 0
	162 JumpIfNotEqual {164}
	163 Call 0x1C17DFC
	164 Move X0, X20
	165 Move X20, [X31+32]
	166 Move X19, [X31+40]
	167 Move X22, [X31+16]
	168 Move X21, [X31+24]
	169 Move X1, X31
	170 Move X30, [X31+48]
	171 Call Application.add_onBeforeRender, X0
	172 Return 
	173 Move X8, 0x611000
	174 Move X9, 0x611000
	175 Move X8, [X8+2464]
	176 Move X9, [X9+2456]
	177 Move X2, X19
	178 Move X3, X31
	179 Move X0, [X8]
	180 Move X1, [X9]
	181 Call String.Format, X0, X1, X2
	182 Move X8, 0x5D4000
	183 Move X8, [X8+488]
	184 Move X20, X0
	185 Move X8, [X8]
	186 Move W9, [X8+224]
	187 Compare W9, 0
	188 JumpIfNotEqual {191}
	189 Move X0, X8
	190 Call 0x1C17DFC
	191 Move X0, X20
	192 Move X1, X19
	193 Move X2, X31
	194 Call XRLoggingUtils.LogError, X0, X1
	195 Move X0, X19
	196 Move W1, W31
	197 Move X2, X31
	198 Call Behaviour.set_enabled, X0, X1
	199 Move X0, [X19+208]
	200 Compare X0, 0
	201 JumpIfEqual {211}
	202 Move X20, [X31+32]
	203 Move X19, [X31+40]
	204 Move X22, [X31+16]
	205 Move X21, [X31+24]
	206 Move W1, W31
	207 Move X2, X31
	208 Move X30, [X31+48]
	209 Call Renderer.set_enabled, X0, X1
	210 Return 
	211 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x03B4A204 LDR W9, [X10]
	0x03B4A208 ADD W9, W9, 0x1
	0x03B4A20C ADD X8, X8, W9, 0x4, SXTW
	0x03B4A210 ADD X0, X8, 0x138
	0x03B4A214 LDP X8, X3, [X0]
	0x03B4A218 MOV X0, X24
	0x03B4A21C MOV X1, X19
	0x03B4A220 MOV X2, X21
	0x03B4A224 BLR X8
	0x03B4A228 TBNZ X23, 0x0, 0x3B4A274
	0x03B4A22C B 0x3B4A2BC
	0x03B4A230 ADRP X24, 0x88E000
	0x03B4A234 LDRB W8, [X24 + 0x783]
	0x03B4A238 CBNZ W8, 0x3B4A250
	0x03B4A23C ADRP X0, 0x5A9000
	0x03B4A240 LDR X0, [X0 + 0x5A0]
	0x03B4A244 BL 0x1C16CF4
	0x03B4A248 MOVZ W8, 0x1
	0x03B4A24C STRB W8, [X24 + 0x783]
	0x03B4A250 ADRP X8, 0x5A9000
	0x03B4A254 LDR X8, [X8 + 0x5A0]
	0x03B4A258 LDR X8, [X8]
	0x03B4A25C LDR X8, [X8 + 0xB8]
	0x03B4A260 LDR V0, [X8]
	0x03B4A264 LDR V1, [X8 + 0x8]
	0x03B4A268 STR D0, [X21]
	0x03B4A26C STR S1, [X21 + 0x8]
	0x03B4A270 TBZ X23, 0x0, 0x3B4A2BC
	0x03B4A274 LDR V0, [X22 + 0xA0]
	0x03B4A278 FCMP S0, 0x0
	0x03B4A27C B.LE 0x3B4A2BC
	0x03B4A280 LDRB W8, [X22 + 0x24]
	0x03B4A284 CBZ W8, 0x3B4A294
	0x03B4A288 LDR V1, [X22 + 0x28]
	0x03B4A28C FCMP S0, S1
	0x03B4A290 B.PL 0x3B4A2BC
	0x03B4A294 LDR V1, [X21]
	0x03B4A298 LDR V2, [X21 + 0x8]
	0x03B4A29C LDR V3, [X19]
	0x03B4A2A0 LDR V4, [X19 + 0x8]
	0x00000000 INVALID
	0x03B4A2A8 FMUL S0, S0, S2
	0x03B4A2AC FADD V1.2S, V3.2S, V1.2S
	0x03B4A2B0 FADD S0, S4, S0
	0x03B4A2B4 STR D1, [X19]
	0x03B4A2B8 STR S0, [X19 + 0x8]
	0x03B4A2BC LDR W8, [X19 + 0x8]
	0x03B4A2C0 LDR X9, [X19]
	0x03B4A2C4 LDP X22, X21, [X31 + 0x50]
	0x03B4A2C8 LDP X24, X23, [X31 + 0x40]
	0x03B4A2CC STR W8, [X31 + 0x8]
	0x03B4A2D0 STR X9, [X31]
	0x03B4A2D4 LDR X10, [X20]
	0x03B4A2D8 LDP X20, X19, [X31 + 0x60]
	0x03B4A2DC LDP X30, X25, [X31 + 0x30]
	0x03B4A2E0 LDP D9, D8, [X31 + 0x20]
	0x03B4A2E4 LDP D11, D10, [X31 + 0x10]
	0x03B4A2E8 STR W8, [X10 + 0x8]
	0x03B4A2EC STR X9, [X10]
	0x03B4A2F0 ADD X31, X31, 0x70
	0x03B4A2F4 RET
	0x03B4A2F8 BL 0x1C16F20
	0x03B4A2FC SUB X31, X31, 0x160
	0x03B4A300 STP X29, X30, [X31 + 0x110]
	0x03B4A304 STP X26, X25, [X31 + 0x120]
	0x03B4A308 STP X24, X23, [X31 + 0x130]
	0x03B4A30C STP X22, X21, [X31 + 0x140]
	0x03B4A310 STP X20, X19, [X31 + 0x150]
	0x03B4A314 ADRP X25, 0x898000
	0x03B4A318 LDRB W8, [X25 + 0x8BA]
	0x03B4A31C MOV X20, X4
	0x03B4A320 MOV X21, X3
	0x03B4A324 MOV W22, W2
	0x03B4A328 MOV X23, X1
	0x03B4A32C MOV X19, X0
	0x03B4A330 ADD X24, X31, 0x70
	0x03B4A334 TBNZ X8, 0x0, 0x3B4A370
	0x03B4A338 ADRP X0, 0x610000
	0x03B4A33C LDR X0, [X0 + 0x9F0]
	0x03B4A340 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x899000
	006 Move W8, [X20+2226]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {26}
	012 Move X0, 0x5AA000
	013 Move X0, [X0+2416]
	014 Call 0x1C17CF4
	015 Move X0, 0x5AA000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move X0, 0x5D1000
	019 Move X0, [X0+3632]
	020 Call 0x1C17CF4
	021 Move X0, 0x611000
	022 Move X0, [X0+2440]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2226], W8
	026 Move X0, [X19+464]
	027 Compare X0, 0
	028 JumpIfEqual {100}
	029 Move X21, 0x5AA000
	030 Move X21, [X21+1432]
	031 Move X1, X31
	032 Call BindingsGroup.Clear, X0
	033 Move X0, [X21]
	034 Move X20, [X19+208]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Inequality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {53}
	047 Move X0, [X19+208]
	048 Compare X0, 0
	049 JumpIfEqual {100}
	050 Move W1, W31
	051 Move X2, X31
	052 Call Renderer.set_enabled, X0, X1
	053 Move X0, [X21]
	054 Move X20, [X19+200]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, X20
	060 Move X1, X31
	061 Move X2, X31
	062 Call Object.op_Inequality, X0, X1
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {74}
	067 Move X0, [X19+200]
	068 Compare X0, 0
	069 JumpIfEqual {100}
	070 Move W1, W31
	071 Move X2, X31
	072 Call GameObject.SetActive, X0, X1
	073 Move [X19+200], X31
	074 Move X8, 0x5D1000
	075 Move X8, [X8+3632]
	076 Move X20, 0x611000
	077 Move X21, 0x5AA000
	078 Move X0, [X8]
	079 Move X20, [X20+2440]
	080 Move X21, [X21+2416]
	081 Call 0x1C17F10
	082 Move X2, [X20]
	083 Move X1, X19
	084 Move X3, X31
	085 Move X20, X0
	086 Call UnityAction..ctor, X0, X1, X2
	087 Move X0, [X21]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move X0, X20
	093 Move X20, [X31+16]
	094 Move X19, [X31+24]
	095 Move X1, X31
	096 Move X30, [X31+32]
	097 Move X21, [X31+40]
	098 Call Application.remove_onBeforeRender, X0
	099 Return 
	100 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x03B4A344 ADRP X0, 0x610000
	0x03B4A348 LDR X0, [X0 + 0xA08]
	0x03B4A34C BL 0x1C16CF4
	0x03B4A350 ADRP X0, 0x610000
	0x03B4A354 LDR X0, [X0 + 0xA10]
	0x03B4A358 BL 0x1C16CF4
	0x03B4A35C ADRP X0, 0x5A9000
	0x03B4A360 LDR X0, [X0 + 0x598]
	0x03B4A364 BL 0x1C16CF4
	0x03B4A368 MOVZ W8, 0x1
	0x03B4A36C STRB W8, [X25 + 0x8BA]
	0x03B4A370 MOVI V0.2D, 0x0
	0x03B4A374 STRB W31, [X31 + 0x10C]
	0x03B4A378 STRB W31, [X31 + 0xCC]
	0x03B4A37C STR W31, [X31 + 0xC8]
	0x03B4A380 STR X31, [X31 + 0xC0]
	0x03B4A384 STR W31, [X31 + 0x6C]
	0x03B4A388 STR X31, [X31 + 0x38]
	0x03B4A38C STP V0, V0, [X24 + 0x70]
	0x03B4A390 STR V0, [X24 + 0x6]
	0x03B4A394 STP V0, V0, [X24 + 0x30]
	0x03B4A398 STR V0, [X24 + 0x2]
	0x03B4A39C STP V0, V0, [X31 + 0x70]
	0x03B4A3A0 STUR V0, [X31 + 0x5C]
	0x03B4A3A4 STP V0, V0, [X31 + 0x40]
	0x03B4A3A8 STRB W31, [X20]
	0x03B4A3AC LDR X8, [X23]
	0x03B4A3B0 SUB W9, W22, 0x1
	0x03B4A3B4 MOVZ W10, 0xC
	0x03B4A3B8 SMADDL X8, X9, X10, X8
	0x03B4A3BC LDR W9, [X8 + 0x8]
	0x03B4A3C0 LDR X8, [X8]
	0x03B4A3C4 STR W9, [X21 + 0x8]
	0x03B4A3C8 STR X8, [X21]
	0x03B4A3CC LDR X23, [X19 + 0xD8]
	0x03B4A3D0 CBZ X23, 0x3B4A654
	0x03B4A3D4 ADRP X10, 0x610000
	0x03B4A3D8 LDR X8, [X23]
	0x03B4A3DC LDR X10, [X10 + 0x9F0]
	0x03B4A3E0 ADD X24, X19, 0x190
	0x03B4A3E4 ADD X25, X19, 0xB4
	0x03B4A3E8 LDRH W9, [X8 + 0x12E]
	0x03B4A3EC LDR X1, [X10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x899000
	005 Move W8, [X20+2227]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0x5D5000
	012 Move X0, [X0+504]
	013 Call 0x1C17CF4
	014 Move X0, 0x611000
	015 Move X0, [X0+2480]
	016 Call 0x1C17CF4
	017 Move X0, 0x611000
	018 Move X0, [X0+2488]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2227], W8
	022 Move X20, 0x5D5000
	023 Move X8, [X19+272]
	024 Move X20, [X20+504]
	025 Compare X8, 0
	026 JumpIfEqual {30}
	027 Move X1, [X20]
	028 Add X0, X19, 272
	029 Call NativeArray`1<Vector3>.Dispose, X0
	030 Move X8, [X19+304]
	031 Compare X8, 0
	032 JumpIfEqual {36}
	033 Move X1, [X20]
	034 Add X0, X19, 304
	035 Call NativeArray`1<Vector3>.Dispose, X0
	036 Move X8, [X19+328]
	037 Compare X8, 0
	038 JumpIfEqual {42}
	039 Move X1, [X20]
	040 Add X0, X19, 328
	041 Call NativeArray`1<Vector3>.Dispose, X0
	042 Move X0, [X19+456]
	043 Compare X0, 0
	044 JumpIfEqual {53}
	045 Move X8, 0x611000
	046 Move X8, [X8+2488]
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X1, [X8]
	050 Move X30, [X31+32]
	051 Call TweenableVariableAsyncBase`1<Single>.Dispose, X0
	052 Return 
	053 Call 0x1C17F20

Method: System.Void LateUpdate()

Disassembly:
	0x03B4A3F0 ADD X22, X19, 0xC0
	0x03B4A3F4 CBZ X9, 0x3B4A418
	0x03B4A3F8 LDR X10, [X8 + 0xB0]
	0x03B4A3FC ADD X10, X10, 0x8
	0x03B4A400 LDUR X11, [X10 - 0x8]
	0x03B4A404 CMP X11, X1
	0x03B4A408 B.EQ 0x3B4A428
	0x03B4A40C SUBS X9, X9, 0x1
	0x03B4A410 ADD X10, X10, 0x10
	0x03B4A414 B.NE 0x3B4A400
	0x03B4A418 MOVZ W2, 0x1
	0x03B4A41C MOV X0, X23
	0x03B4A420 BL 0x1C5C788
	0x03B4A424 B 0x3B4A438
	0x03B4A428 LDR W9, [X10]
	0x03B4A42C ADD W9, W9, 0x1
	0x03B4A430 ADD X8, X8, W9, 0x4, SXTW
	0x03B4A434 ADD X0, X8, 0x138
	0x03B4A438 LDP X8, X5, [X0]
	0x03B4A43C ADRP X26, 0x5A9000
	0x03B4A440 LDR X26, [X26 + 0x598]
	0x03B4A444 ADD X4, X31, 0x10C
	0x03B4A448 MOV X0, X23
	0x03B4A44C MOV X1, X24
	0x03B4A450 MOV X2, X25
	0x03B4A454 MOV X3, X22
	0x03B4A458 BLR X8
	0x03B4A45C AND W8, W0, 0x1
	0x03B4A460 STRB W8, [X19 + 0x19C]
	0x03B4A464 TBZ X0, 0x0, 0x3B4A508
	0x03B4A468 LDR W8, [X24 + 0x8]
	0x03B4A46C LDR X9, [X24]
	0x03B4A470 STR W8, [X21 + 0x8]
	0x03B4A474 STR X9, [X21]
	0x03B4A478 LDRB W8, [X31 + 0x10C]
	0x03B4A47C CBZ W8, 0x3B4A508
	0x03B4A480 LDRB W8, [X19 + 0x8A]
	0x03B4A484 CBZ W8, 0x3B4A508
	0x03B4A488 LDRB W8, [X19 + 0x1B8]
	0x03B4A48C CBZ W8, 0x3B4A508
	0x03B4A490 LDR X0, [X19 + 0x108]
	0x03B4A494 CBZ X0, 0x3B4A654
	0x03B4A498 ADD X1, X31, 0xD0
	0x03B4A49C ADD X2, X31, 0xC8
	0x03B4A4A0 ADD X3, X31, 0x70
	0x03B4A4A4 ADD X4, X31, 0x6C
	0x03B4A4A8 ADD X5, X31, 0xCC
	0x03B4A4AC BL 0x3B4B59C
	0x03B4A4B0 MOV X23, X31
	0x03B4A4B4 TBZ X0, 0x0, 0x3B4A50C
	0x03B4A4B8 LDRB W8, [X31 + 0xCC]
	0x03B4A4BC CBNZ W8, 0x3B4A50C
	0x03B4A4C0 LDRB W8, [X31 + 0xD0]
	0x03B4A4C4 CBZ W8, 0x3B4A558
	0x03B4A4C8 ADRP X8, 0x610000
	0x03B4A4CC LDR X8, [X8 + 0xA10]
	0x03B4A4D0 ADD X0, X31, 0xD0
	0x03B4A4D4 LDR X1, [X8]
	0x03B4A4D8 ADD X8, X31, 0x8
	0x03B4A4DC BL 0x2438690
	0x03B4A4E0 LDUR V0, [X31 + 0x8]
	0x03B4A4E4 LDUR V1, [X31 + 0x18]
	0x03B4A4E8 LDUR V2, [X31 + 0x24]
	0x03B4A4EC ADD X0, X31, 0x40
	0x03B4A4F0 MOV X1, X31
	0x03B4A4F4 STP V0, V1, [X31 + 0x40]
	0x03B4A4F8 STUR V2, [X31 + 0x5C]
	0x03B4A4FC BL 0x3C8E5C0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x899000
	006 Move W8, [X20+2228]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x611000
	013 Move X0, [X0+1088]
	014 Call 0x1C17CF4
	015 Move X0, 0x5AA000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2228], W8
	020 Move W8, [X19+197]
	021 Compare W8, 0
	022 JumpIfEqual {26}
	023 Move X0, X19
	024 Call XRInteractorLineVisual.UpdateSettings, X0
	025 Move [X19+197], W31
	026 Move X0, [X19+208]
	027 Compare X0, 0
	028 JumpIfEqual {95}
	029 Move X1, X31
	030 Call LineRenderer.get_useWorldSpace, X0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {90}
	035 Move X21, 0x5AA000
	036 Move X21, [X21+1432]
	037 Move X20, [X19+432]
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X1, X31
	045 Move X2, X31
	046 Call Object.op_Inequality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {90}
	051 Move X8, [X19+432]
	052 Compare X8, 0
	053 JumpIfEqual {95}
	054 Move X0, [X21]
	055 Move X20, [X8+56]
	056 Move W9, [X0+224]
	057 Compare W9, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X20
	061 Move X1, X31
	062 Move X2, X31
	063 Call Object.op_Inequality, X0, X1
	064 Move S0, 1
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {78}
	069 Compare X20, 0
	070 JumpIfEqual {95}
	071 Move X0, X20
	072 Move X1, X31
	073 Call GameObject.get_transform, X0
	074 Compare X0, 0
	075 JumpIfEqual {95}
	076 Move X1, X31
	077 Call Transform.get_localScale, X0
	078 Move X0, [X19+448]
	079 Compare X0, 0
	080 JumpIfEqual {95}
	081 Move X8, 0x611000
	082 Move X8, [X8+1088]
	083 Move X20, [X31+16]
	084 Move X19, [X31+24]
	085 Move X1, [X8]
	086 Move X30, [X31+32]
	087 Move X21, [X31+40]
	088 Call BindableVariableBase`1<Single>.set_Value, X0, V0
	089 Return 
	090 Move X20, [X31+16]
	091 Move X19, [X31+24]
	092 Move X30, [X31+32]
	093 Move X21, [X31+40]
	094 Return 
	095 Call 0x1C17F20

Method: System.Void OnBeforeRenderLineVisual()

Disassembly:
	0x03B4A500 MOV X23, X0

ISIL:
No ISIL was generated
Method: System.Void UpdateLineVisual()

Disassembly:
	0x03B4A504 B 0x3B4A55C
	0x03B4A508 MOV X23, X31
	0x03B4A50C LDR X0, [X26]
	0x03B4A510 LDR W8, [X0 + 0xE0]
	0x03B4A514 CBNZ W8, 0x3B4A51C
	0x03B4A518 BL 0x1C16DFC
	0x03B4A51C MOV X0, X23
	0x03B4A520 MOV X1, X31
	0x03B4A524 MOV X2, X31
	0x03B4A528 BL 0x3C3883C
	0x03B4A52C TBZ X0, 0x0, 0x3B4A534
	0x03B4A530 STR X31, [X19 + 0x178]
	0x03B4A534 STR X23, [X19 + 0x1A8]
	0x03B4A538 LDRB W0, [X31 + 0x10C]
	0x03B4A53C LDP X20, X19, [X31 + 0x150]
	0x03B4A540 LDP X22, X21, [X31 + 0x140]
	0x03B4A544 LDP X24, X23, [X31 + 0x130]
	0x03B4A548 LDP X26, X25, [X31 + 0x120]
	0x03B4A54C LDP X29, X30, [X31 + 0x110]
	0x03B4A550 ADD X31, X31, 0x160
	0x03B4A554 RET
	0x03B4A558 MOV X23, X31
	0x03B4A55C LDR X0, [X26]
	0x03B4A560 LDR X24, [X19 + 0x1A8]
	0x03B4A564 LDR W8, [X0 + 0xE0]
	0x03B4A568 CBNZ W8, 0x3B4A570
	0x03B4A56C BL 0x1C16DFC
	0x03B4A570 MOV X0, X23
	0x03B4A574 MOV X1, X24
	0x03B4A578 MOV X2, X31
	0x03B4A57C BL 0x3C354F8
	0x03B4A580 TBZ X0, 0x0, 0x3B4A5CC
	0x03B4A584 LDR X0, [X26]
	0x03B4A588 LDR W8, [X0 + 0xE0]
	0x03B4A58C CBNZ W8, 0x3B4A594
	0x03B4A590 BL 0x1C16DFC
	0x03B4A594 MOV X0, X23
	0x03B4A598 MOV X1, X31
	0x03B4A59C MOV X2, X31
	0x03B4A5A0 BL 0x3C354F8
	0x03B4A5A4 TBZ X0, 0x0, 0x3B4A5CC
	0x03B4A5A8 LDR X8, [X19 + 0x100]
	0x03B4A5AC CBZ X8, 0x3B4A654
	0x03B4A5B0 LDR X0, [X8 + 0x30]
	0x03B4A5B4 CBZ X0, 0x3B4A654
	0x03B4A5B8 ADD X3, X19, 0x178
	0x03B4A5BC ADD X2, X31, 0x38
	0x03B4A5C0 MOV X1, X23
	0x03B4A5C4 MOV X4, X31
	0x03B4A5C8 BL 0x3B72DA8
	0x03B4A5CC LDR X0, [X26]
	0x03B4A5D0 LDR X24, [X19 + 0x178]
	0x03B4A5D4 LDR W8, [X0 + 0xE0]
	0x03B4A5D8 CBNZ W8, 0x3B4A5E0
	0x03B4A5DC BL 0x1C16DFC
	0x03B4A5E0 MOV X0, X24
	0x03B4A5E4 MOV X1, X31
	0x03B4A5E8 MOV X2, X31
	0x03B4A5EC BL 0x3C354F8
	0x03B4A5F0 TBZ X0, 0x0, 0x3B4A50C
	0x03B4A5F4 LDR X0, [X19 + 0x108]
	0x03B4A5F8 CBZ X0, 0x3B4A654
	0x03B4A5FC BL 0x3B4B6D0
	0x03B4A600 LDR X8, [X19 + 0x178]
	0x03B4A604 TBZ X0, 0x0, 0x3B4A620
	0x03B4A608 CBZ X8, 0x3B4A654
	0x03B4A60C LDR X1, [X19 + 0x108]
	0x03B4A610 MOV X0, X8
	0x03B4A614 MOV X2, X31
	0x03B4A618 BL 0x3B47724
	0x03B4A61C B 0x3B4A638
	0x03B4A620 CBZ X8, 0x3B4A654
	0x03B4A624 LDP S1, S2, [X21 + 0x4]
	0x03B4A628 LDR V0, [X21]
	0x03B4A62C MOV X0, X8
	0x03B4A630 MOV X1, X31
	0x03B4A634 BL 0x3B47558
	0x03B4A638 MOVZ W8, 0x13
	0x03B4A63C MOVZ W9, 0x1
	0x03B4A640 STP S0, S1, [X21]
	0x03B4A644 STR S2, [X21 + 0x8]
	0x03B4A648 STR W8, [X22]
	0x03B4A64C STRB W9, [X20]
	0x03B4A650 B 0x3B4A50C
	0x03B4A654 BL 0x1C16F20
	0x03B4A658 STR D8, [X31 - 0x60]!
	0x03B4A65C STP X30, X27, [X31 + 0x10]
	0x03B4A660 STP X26, X25, [X31 + 0x20]
	0x03B4A664 STP X24, X23, [X31 + 0x30]
	0x03B4A668 STP X22, X21, [X31 + 0x40]
	0x03B4A66C STP X20, X19, [X31 + 0x50]
	0x03B4A670 ADRP X22, 0x898000
	0x03B4A674 LDRB W8, [X22 + 0x8B7]
	0x03B4A678 MOV X19, X2
	0x03B4A67C MOV X20, X1
	0x03B4A680 MOV X21, X0
	0x03B4A684 TBNZ X8, 0x0, 0x3B4A6C0
	0x03B4A688 ADRP X0, 0x610000
	0x03B4A68C LDR X0, [X0 + 0x8D8]
	0x03B4A690 BL 0x1C16CF4
	0x03B4A694 ADRP X0, 0x610000
	0x03B4A698 LDR X0, [X0 + 0x328]
	0x03B4A69C BL 0x1C16CF4
	0x03B4A6A0 ADRP X0, 0x610000
	0x03B4A6A4 LDR X0, [X0 + 0x940]
	0x03B4A6A8 BL 0x1C16CF4
	0x03B4A6AC ADRP X0, 0x610000
	0x03B4A6B0 LDR X0, [X0 + 0x948]
	0x03B4A6B4 BL 0x1C16CF4
	0x03B4A6B8 MOVZ W8, 0x1
	0x03B4A6BC STRB W8, [X22 + 0x8B7]
	0x03B4A6C0 LDR X22, [X21 + 0xF0]
	0x03B4A6C4 CBZ X22, 0x3B4A8F8
	0x03B4A6C8 ADRP X10, 0x610000
	0x03B4A6CC LDR X8, [X22]
	0x03B4A6D0 LDR X10, [X10 + 0x328]
	0x03B4A6D4 LDRH W9, [X8 + 0x12E]
	0x03B4A6D8 LDR X1, [X10]
	0x03B4A6DC CBZ X9, 0x3B4A700
	0x03B4A6E0 LDR X10, [X8 + 0xB0]
	0x03B4A6E4 ADD X10, X10, 0x8
	0x03B4A6E8 LDUR X11, [X10 - 0x8]
	0x03B4A6EC CMP X11, X1
	0x03B4A6F0 B.EQ 0x3B4A710
	0x03B4A6F4 SUBS X9, X9, 0x1
	0x03B4A6F8 ADD X10, X10, 0x10
	0x03B4A6FC B.NE 0x3B4A6E8
	0x03B4A700 MOVZ W2, 0x2
	0x03B4A704 MOV X0, X22
	0x03B4A708 BL 0x1C5C788
	0x03B4A70C B 0x3B4A720
	0x03B4A710 LDR W9, [X10]
	0x03B4A714 ADD W9, W9, 0x2
	0x03B4A718 ADD X8, X8, W9, 0x4, SXTW
	0x03B4A71C ADD X0, X8, 0x138
	0x03B4A720 LDP X8, X1, [X0]
	0x03B4A724 MOV X0, X22
	0x03B4A728 BLR X8
	0x03B4A72C CBZ X0, 0x3B4A8F8
	0x03B4A730 ADRP X26, 0x610000
	0x03B4A734 LDR X26, [X26 + 0x948]
	0x03B4A738 MOV W1, W31
	0x03B4A73C MOV X22, X0
	0x03B4A740 LDR X2, [X26]
	0x03B4A744 BL 0x301BCCC
	0x03B4A748 CBZ X0, 0x3B4A8F8
	0x03B4A74C ADRP X27, 0x610000
	0x03B4A750 LDR X8, [X0]
	0x03B4A754 LDR X27, [X27 + 0x8D8]
	0x03B4A758 LDR X24, [X21 + 0xF0]
	0x03B4A75C MOV X23, X0
	0x03B4A760 LDRH W9, [X8 + 0x12E]
	0x03B4A764 LDR X1, [X27]
	0x03B4A768 CBZ X9, 0x3B4A78C
	0x03B4A76C LDR X10, [X8 + 0xB0]
	0x03B4A770 ADD X10, X10, 0x8
	0x03B4A774 LDUR X11, [X10 - 0x8]
	0x03B4A778 CMP X11, X1
	0x03B4A77C B.EQ 0x3B4A79C
	0x03B4A780 SUBS X9, X9, 0x1
	0x03B4A784 ADD X10, X10, 0x10
	0x03B4A788 B.NE 0x3B4A774
	0x03B4A78C MOVZ W2, 0x7
	0x03B4A790 MOV X0, X23
	0x03B4A794 BL 0x1C5C788
	0x03B4A798 B 0x3B4A7AC
	0x03B4A79C LDR W9, [X10]
	0x03B4A7A0 ADD W9, W9, 0x7
	0x03B4A7A4 ADD X8, X8, W9, 0x4, SXTW
	0x03B4A7A8 ADD X0, X8, 0x138
	0x03B4A7AC LDP X8, X2, [X0]
	0x03B4A7B0 MOV X0, X23
	0x03B4A7B4 MOV X1, X24
	0x03B4A7B8 BLR X8
	0x03B4A7BC CBZ X0, 0x3B4A8F8
	0x03B4A7C0 MOV X1, X31
	0x03B4A7C4 BL 0x3C3F58C
	0x03B4A7C8 STP S0, S1, [X19]
	0x03B4A7CC STR S2, [X19 + 0x8]
	0x03B4A7D0 LDR W8, [X22 + 0x18]
	0x03B4A7D4 CMP W8, 0x2
	0x03B4A7D8 B.LT 0x3B4A8DC
	0x03B4A7DC LDP S3, S4, [X20]
	0x03B4A7E0 LDR V5, [X20 + 0x8]
	0x03B4A7E4 MOVZ W23, 0x1
	0x03B4A7E8 FSUB S0, S0, S3
	0x03B4A7EC FSUB S1, S1, S4
	0x03B4A7F0 FSUB S2, S2, S5
	0x03B4A7F4 FMUL S0, S0, S0
	0x03B4A7F8 FMUL S1, S1, S1
	0x03B4A7FC FMUL S2, S2, S2
	0x03B4A800 FADD S0, S0, S1
	0x03B4A804 FADD S8, S2, S0
	0x03B4A808 LDR X2, [X26]
	0x03B4A80C MOV X0, X22
	0x03B4A810 MOV W1, W23
	0x03B4A814 BL 0x301BCCC
	0x03B4A818 CBZ X0, 0x3B4A8F8
	0x03B4A81C LDR X8, [X0]
	0x03B4A820 LDR X25, [X21 + 0xF0]
	0x03B4A824 LDR X1, [X27]
	0x03B4A828 MOV X24, X0
	0x03B4A82C LDRH W9, [X8 + 0x12E]
	0x03B4A830 CBZ X9, 0x3B4A854
	0x03B4A834 LDR X10, [X8 + 0xB0]
	0x03B4A838 ADD X10, X10, 0x8
	0x03B4A83C LDUR X11, [X10 - 0x8]
	0x03B4A840 CMP X11, X1
	0x03B4A844 B.EQ 0x3B4A864
	0x03B4A848 SUBS X9, X9, 0x1
	0x03B4A84C ADD X10, X10, 0x10
	0x03B4A850 B.NE 0x3B4A83C
	0x03B4A854 MOVZ W2, 0x7
	0x03B4A858 MOV X0, X24
	0x03B4A85C BL 0x1C5C788
	0x03B4A860 B 0x3B4A874
	0x03B4A864 LDR W9, [X10]
	0x03B4A868 ADD W9, W9, 0x7
	0x03B4A86C ADD X8, X8, W9, 0x4, SXTW
	0x03B4A870 ADD X0, X8, 0x138
	0x03B4A874 LDP X8, X2, [X0]
	0x03B4A878 MOV X0, X24
	0x03B4A87C MOV X1, X25
	0x03B4A880 BLR X8
	0x03B4A884 CBZ X0, 0x3B4A8F8
	0x03B4A888 MOV X1, X31
	0x03B4A88C BL 0x3C3F58C
	0x03B4A890 LDP S3, S4, [X20]
	0x03B4A894 LDR V5, [X20 + 0x8]
	0x03B4A898 FSUB S3, S0, S3
	0x03B4A89C FSUB S4, S1, S4
	0x03B4A8A0 FSUB S5, S2, S5
	0x03B4A8A4 FMUL S3, S3, S3
	0x03B4A8A8 FMUL S4, S4, S4
	0x03B4A8AC FADD S3, S3, S4
	0x03B4A8B0 FMUL S4, S5, S5
	0x03B4A8B4 FADD S3, S4, S3
	0x03B4A8B8 FCMP S3, S8
	0x03B4A8BC B.PL 0x3B4A8CC
	0x03B4A8C0 MOV V8.16B, V3.16B
	0x03B4A8C4 STP S0, S1, [X19]
	0x03B4A8C8 STR S2, [X19 + 0x8]
	0x03B4A8CC LDR W8, [X22 + 0x18]
	0x03B4A8D0 ADD W23, W23, 0x1
	0x03B4A8D4 CMP W23, W8
	0x03B4A8D8 B.LT 0x3B4A808
	0x03B4A8DC LDP X20, X19, [X31 + 0x50]
	0x03B4A8E0 LDP X22, X21, [X31 + 0x40]
	0x03B4A8E4 LDP X24, X23, [X31 + 0x30]
	0x03B4A8E8 LDP X26, X25, [X31 + 0x20]
	0x03B4A8EC LDP X30, X27, [X31 + 0x10]
	0x03B4A8F0 LDR V8, [X31], #0x60
	0x03B4A8F4 RET
	0x03B4A8F8 BL 0x1C16F20
	0x03B4A8FC SUB X31, X31, 0x30
	0x03B4A900 STP X30, X21, [X31 + 0x10]
	0x03B4A904 STP X20, X19, [X31 + 0x20]
	0x03B4A908 ADRP X21, 0x898000
	0x03B4A90C LDRB W8, [X21 + 0x8B8]
	0x03B4A910 MOV W20, W1
	0x03B4A914 MOV X19, X0
	0x03B4A918 TBNZ X8, 0x0, 0x3B4A948
	0x03B4A91C ADRP X0, 0x5D4000
	0x03B4A920 LDR X0, [X0 + 0x1F8]
	0x03B4A924 BL 0x1C16CF4
	0x03B4A928 ADRP X0, 0x5D4000
	0x03B4A92C LDR X0, [X0 + 0x1F0]
	0x03B4A930 BL 0x1C16CF4
	0x03B4A934 ADRP X0, 0x610000
	0x03B4A938 LDR X0, [X0 + 0x9B0]
	0x03B4A93C BL 0x1C16CF4
	0x03B4A940 MOVZ W8, 0x1
	0x03B4A944 STRB W8, [X21 + 0x8B8]
	0x03B4A948 LDR X8, [X19]
	0x03B4A94C CBZ X8, 0x3B4A970
	0x03B4A950 LDR W8, [X19 + 0x8]
	0x03B4A954 CMP W8, W20
	0x03B4A958 B.GE 0x3B4A9A4
	0x03B4A95C ADRP X8, 0x5D4000
	0x03B4A960 LDR X8, [X8 + 0x1F8]
	0x03B4A964 MOV X0, X19
	0x03B4A968 LDR X1, [X8]
	0x03B4A96C BL 0x23F1210
	0x03B4A970 ADRP X8, 0x5D4000
	0x03B4A974 LDR X8, [X8 + 0x1F0]
	0x03B4A978 ADD X0, X31, 0x0
	0x03B4A97C MOVZ W2, 0x4
	0x03B4A980 MOVZ W3, 0x1
	0x03B4A984 LDR X4, [X8]
	0x03B4A988 MOV W1, W20
	0x03B4A98C STP X31, X31, [X31]
	0x03B4A990 BL 0x23F0FB0
	0x03B4A994 LDR V0, [X31]
	0x03B4A998 MOV W0, W31
	0x03B4A99C STR V0, [X19]
	0x03B4A9A0 B 0x3B4A9A8
	0x03B4A9A4 MOVZ W0, 0x1
	0x03B4A9A8 LDP X20, X19, [X31 + 0x20]
	0x03B4A9AC LDP X30, X21, [X31 + 0x10]
	0x03B4A9B0 ADD X31, X31, 0x30
	0x03B4A9B4 RET
	0x03B4A9B8 STR D8, [X31 - 0x50]!
	0x03B4A9BC STP X30, X25, [X31 + 0x10]
	0x03B4A9C0 STP X24, X23, [X31 + 0x20]
	0x03B4A9C4 STP X22, X21, [X31 + 0x30]
	0x03B4A9C8 STP X20, X19, [X31 + 0x40]
	0x03B4A9CC ADRP X24, 0x898000
	0x03B4A9D0 ADRP X25, 0x610000
	0x03B4A9D4 LDRB W8, [X24 + 0x8BB]
	0x03B4A9D8 LDR X25, [X25 + 0xA18]
	0x03B4A9DC MOV X19, X4
	0x03B4A9E0 MOV X20, X3
	0x03B4A9E4 MOV X21, X2
	0x03B4A9E8 MOV X22, X1
	0x03B4A9EC MOV V8.16B, V0.16B
	0x03B4A9F0 MOV W23, W0
	0x03B4A9F4 TBNZ X8, 0x0, 0x3B4AA0C
	0x03B4A9F8 ADRP X0, 0x610000
	0x03B4A9FC LDR X0, [X0 + 0xA18]
	0x03B4AA00 BL 0x1C16CF4
	0x03B4AA04 MOVZ W8, 0x1
	0x03B4AA08 STRB W8, [X24 + 0x8BB]
	0x03B4AA0C LDR X0, [X25]
	0x03B4AA10 LDR W8, [X0 + 0xE0]
	0x03B4AA14 CBNZ W8, 0x3B4AA1C
	0x03B4AA18 BL 0x1C16DFC
	0x03B4AA1C MOV W0, W23
	0x03B4AA20 MOV X1, X22
	0x03B4AA24 MOV X2, X21
	0x03B4AA28 MOV X3, X20
	0x03B4AA2C MOV X4, X19
	0x03B4AA30 LDP X20, X19, [X31 + 0x40]
	0x03B4AA34 LDP X22, X21, [X31 + 0x30]
	0x03B4AA38 LDP X24, X23, [X31 + 0x20]
	0x03B4AA3C LDP X30, X25, [X31 + 0x10]
	0x03B4AA40 MOV V0.16B, V8.16B
	0x03B4AA44 LDR V8, [X31], #0x50
	0x03B4AA48 B 0x3B4B72C
	0x03B4AA4C STP D13, D12, [X31 - 0x80]!
	0x03B4AA50 STP D11, D10, [X31 + 0x10]
	0x03B4AA54 STP D9, D8, [X31 + 0x20]
	0x03B4AA58 STR X30, [X31 + 0x30]
	0x03B4AA5C STP X26, X25, [X31 + 0x40]
	0x03B4AA60 STP X24, X23, [X31 + 0x50]
	0x03B4AA64 STP X22, X21, [X31 + 0x60]
	0x03B4AA68 STP X20, X19, [X31 + 0x70]
	0x03B4AA6C LDRB W8, [X0 + 0x19C]
	0x03B4AA70 MOV X20, X4
	0x03B4AA74 MOV X21, X3
	0x03B4AA78 MOV W22, W2
	0x03B4AA7C MOV X19, X0
	0x03B4AA80 MOV W23, W1
	0x03B4AA84 CBZ W8, 0x3B4AC2C
	0x03B4AA88 LDR X8, [X20]
	0x03B4AA8C MOV X24, X19
	0x03B4AA90 LDR W9, [X20 + 0x8]
	0x03B4AA94 STR X8, [X24 + 0xA8]!
	0x03B4AA98 LDRB W8, [X24 + 0xF5]
	0x03B4AA9C STR W9, [X24 + 0x8]
	0x03B4AAA0 CBNZ W8, 0x3B4AAAC
	0x03B4AAA4 LDRB W8, [X19 + 0x88]
	0x03B4AAA8 CBZ W8, 0x3B4AC2C
	0x03B4AAAC LDR W8, [X19 + 0xC0]
	0x03B4AAB0 CMP W8, 0x1
	0x03B4AAB4 B.LT 0x3B4AC2C
	0x03B4AAB8 LDR W9, [X19 + 0x120]
	0x03B4AABC CMP W8, W9
	0x03B4AAC0 B.GE 0x3B4AC2C
	0x03B4AAC4 LDR X9, [X19 + 0x110]
	0x03B4AAC8 MOVZ W10, 0xC
	0x03B4AACC ADRP X25, 0x897000
	0x03B4AAD0 LDR V12, [X19 + 0xA8]
	0x03B4AAD4 NOP
	0x03B4AAD8 SMADDL X12, X8, X10, X9
	0x03B4AADC MADD X8, X8, X10, X9
	0x03B4AAE0 LDUR V9, [X12 - 0xC]
	0x03B4AAE4 LDUR V8, [X12 - 0x4]
	0x03B4AAE8 LDR V0, [X8]
	0x03B4AAEC LDR V1, [X8 + 0x8]
	0x03B4AAF0 LDRB W11, [X25 + 0x8C7]
	0x03B4AAF4 LDR V13, [X19 + 0xB0]
	0x03B4AAF8 FSUB V11.2S, V0.2S, V9.2S
	0x03B4AAFC FSUB S10, S1, S8
	0x03B4AB00 CBNZ W11, 0x3B4AB18
	0x03B4AB04 ADRP X0, 0x5B0000
	0x03B4AB08 LDR X0, [X0 + 0x4B8]
	0x03B4AB0C BL 0x1C16CF4
	0x03B4AB10 MOVZ W8, 0x1
	0x03B4AB14 STRB W8, [X25 + 0x8C7]
	0x03B4AB18 ADRP X8, 0x5B0000
	0x03B4AB1C LDR X8, [X8 + 0x4B8]
	0x03B4AB20 ADRP X25, 0x5A9000
	0x00000000 INVALID
	0x03B4AB28 FMUL S1, S10, S10
	0x03B4AB2C LDR X8, [X8]
	0x03B4AB30 FADDP S0, V0.2S
	0x03B4AB34 FADD S1, S1, S0
	0x03B4AB38 ADRP X26, 0x88E000
	0x03B4AB3C LDR X8, [X8 + 0xB8]
	0x03B4AB40 LDR V2, [X8]
	0x03B4AB44 LDR X25, [X25 + 0x5A0]
	0x03B4AB48 FCMP S1, S2
	0x03B4AB4C B.PL 0x3B4AB80
	0x03B4AB50 LDRB W8, [X26 + 0x783]
	0x03B4AB54 CBNZ W8, 0x3B4AB6C
	0x03B4AB58 ADRP X0, 0x5A9000
	0x03B4AB5C LDR X0, [X0 + 0x5A0]
	0x03B4AB60 BL 0x1C16CF4
	0x03B4AB64 MOVZ W8, 0x1
	0x03B4AB68 STRB W8, [X26 + 0x783]
	0x03B4AB6C LDR X8, [X25]
	0x03B4AB70 LDR X8, [X8 + 0xB8]
	0x03B4AB74 LDR V0, [X8]
	0x03B4AB78 LDR V1, [X8 + 0x8]
	0x03B4AB7C B 0x3B4ABAC
	0x03B4AB80 FSUB V0.2S, V12.2S, V9.2S
	0x03B4AB84 FSUB S2, S13, S8
	0x00000000 INVALID
	0x03B4AB8C FMUL S2, S10, S2
	0x03B4AB90 FADDP S0, V0.2S
	0x03B4AB94 FADD S0, S2, S0
	0x03B4AB98 UNIMPLEMENTED
	0x00000000 INVALID
	0x03B4ABA0 FMUL S4, S10, S0
	0x00000000 INVALID
	0x03B4ABA8 FDIV S1, S4, S1
	0x00000000 INVALID
	0x03B4ABB0 FADDP S2, V2.2S
	0x03B4ABB4 FMUL S3, S10, S1
	0x03B4ABB8 FADD S2, S3, S2
	0x03B4ABBC FCMP S2, 0x0
	0x03B4ABC0 B.PL 0x3B4ABF0
	0x03B4ABC4 LDRB W8, [X26 + 0x783]
	0x03B4ABC8 CBNZ W8, 0x3B4ABE0
	0x03B4ABCC ADRP X0, 0x5A9000
	0x03B4ABD0 LDR X0, [X0 + 0x5A0]
	0x03B4ABD4 BL 0x1C16CF4
	0x03B4ABD8 MOVZ W8, 0x1
	0x03B4ABDC STRB W8, [X26 + 0x783]
	0x03B4ABE0 LDR X8, [X25]
	0x03B4ABE4 LDR X8, [X8 + 0xB8]
	0x03B4ABE8 LDR V0, [X8]
	0x03B4ABEC LDR V1, [X8 + 0x8]
	0x03B4ABF0 FADD V0.2S, V9.2S, V0.2S
	0x03B4ABF4 FADD S1, S8, S1
	0x03B4ABF8 LDRSW X8, [X19 + 0xC0]
	0x03B4ABFC LDR X9, [X19 + 0x110]
	0x03B4AC00 STR D0, [X19 + 0xA8]
	0x03B4AC04 STR S1, [X19 + 0xB0]
	0x03B4AC08 LDR W10, [X24 + 0x8]
	0x03B4AC0C LDR X11, [X24]
	0x03B4AC10 MOVZ W12, 0xC
	0x03B4AC14 MADD X8, X8, X12, X9
	0x03B4AC18 STR W10, [X8 + 0x8]
	0x03B4AC1C STR X11, [X8]
	0x03B4AC20 LDR W8, [X19 + 0xC0]
	0x03B4AC24 ADD W8, W8, 0x1
	0x03B4AC28 STR W8, [X19 + 0x120]
	0x03B4AC2C LDRB W8, [X19 + 0x89]
	0x03B4AC30 AND W8, W23, W8, 0x0
	0x03B4AC34 TBZ X8, 0x0, 0x3B4AE5C
	0x03B4AC38 TBNZ X22, 0x0, 0x3B4AE5C
	0x03B4AC3C LDRSW X12, [X19 + 0xC0]
	0x03B4AC40 LDR X8, [X19 + 0x110]
	0x03B4AC44 LDP S0, S1, [X20]
	0x03B4AC48 MOVZ W9, 0xC
	0x03B4AC4C MOV X10, X21
	0x03B4AC50 MADD X11, X12, X9, X8
	0x03B4AC54 MOV V3.16B, V0.16B
	0x03B4AC58 MOV X9, X11
	0x03B4AC5C LDR V2, [X20 + 0x8]
	0x03B4AC60 UNIMPLEMENTED
	0x03B4AC64 UNIMPLEMENTED
	0x03B4AC68 CBZ W12, 0x3B4ACBC
	0x03B4AC6C MOV V5.16B, V1.16B
	0x03B4AC70 ADD X12, X21, 0x8
	0x03B4AC74 ADD X11, X11, 0x8
	0x03B4AC78 UNIMPLEMENTED
	0x03B4AC7C MOV V7.16B, V2.16B
	0x03B4AC80 UNIMPLEMENTED
	0x03B4AC84 UNIMPLEMENTED
	0x03B4AC88 UNIMPLEMENTED
	0x03B4AC8C FSUB V3.2S, V3.2S, V4.2S
	0x03B4AC90 FSUB V4.2S, V5.2S, V6.2S
	0x00000000 INVALID
	0x03B4AC98 FSUB V5.2S, V7.2S, V16.2S
	0x00000000 INVALID
	0x03B4ACA0 FADD V3.2S, V3.2S, V4.2S
	0x00000000 INVALID
	0x03B4ACA8 FADD V3.2S, V4.2S, V3.2S
	0x03B4ACAC UNIMPLEMENTED
	0x00000000 INVALID
	0x03B4ACB4 FMOV W9, S3
	0x03B4ACB8 TBZ X9, 0x0, 0x3B4AE5C
	0x03B4ACBC LDRSW X9, [X19 + 0x120]
	0x03B4ACC0 CMP W9, 0x3
	0x03B4ACC4 B.LT 0x3B4AD44
	0x03B4ACC8 LDP S3, S4, [X8 + 0xC]
	0x03B4ACCC LDR V5, [X8 + 0x14]
	0x03B4ACD0 ADD X11, X8, 0x20
	0x03B4ACD4 MOVZ W10, 0x2
	0x03B4ACD8 FSUB S3, S3, S0
	0x03B4ACDC FSUB S4, S4, S1
	0x03B4ACE0 FSUB S5, S5, S2

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+160], D9
	003 Move [X31+168], D8
	004 Move [X31+176], X30
	005 Move [X31+184], X25
	006 Move [X31+192], X24
	007 Move [X31+200], X23
	008 Move [X31+208], X22
	009 Move [X31+216], X21
	010 Move [X31+224], X20
	011 Move [X31+232], X19
	012 Move X21, 0x899000
	013 Move X20, 0x5AA000
	014 Move W8, [X21+2229]
	015 Move X20, [X20+1432]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {50}
	021 Move X0, 0x611000
	022 Move X0, [X0+2496]
	023 Call 0x1C17CF4
	024 Move X0, 0x611000
	025 Move X0, [X0+2504]
	026 Call 0x1C17CF4
	027 Move X0, 0x611000
	028 Move X0, [X0+2512]
	029 Call 0x1C17CF4
	030 Move X0, 0x611000
	031 Move X0, [X0+352]
	032 Call 0x1C17CF4
	033 Move X0, 0x611000
	034 Move X0, [X0+808]
	035 Call 0x1C17CF4
	036 Move X0, 0x611000
	037 Move X0, [X0+2520]
	038 Call 0x1C17CF4
	039 Move X0, 0x611000
	040 Move X0, [X0+2528]
	041 Call 0x1C17CF4
	042 Move X0, 0x611000
	043 Move X0, [X0+2536]
	044 Call 0x1C17CF4
	045 Move X0, 0x5AA000
	046 Move X0, [X0+1432]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X21+2229], W8
	050 Move X0, [X20]
	051 Move [X31+152], W31
	052 Move [X31+144], X31
	053 Move [X31+136], W31
	054 Move [X31+128], X31
	055 Move [X31+120], W31
	056 Move [X31+112], X31
	057 Move [X31+108], W31
	058 Move [X31+88], X31
	059 Move [X31+96], X31
	060 Move [X31+72], X31
	061 Move [X31+80], X31
	062 Move [X31+56], X31
	063 Move [X31+64], X31
	064 Move [X31+32], X31
	065 Move [X31+40], X31
	066 Move [X31+48], X31
	067 Move W8, [X0+224]
	068 Move X20, [X19+256]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X0, X20
	073 Move X1, X31
	074 Move X2, X31
	075 Call Object.op_Inequality, X0, X1
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {91}
	080 Move X0, [X19+256]
	081 Compare X0, 0
	082 JumpIfEqual {534}
	083 Move W8, [X0+89]
	084 Compare W8, 0
	085 JumpIfEqual {91}
	086 Call XRInteractorExtensions.IsBlockedByInteractionWithinGroup, X0
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfEqual {127}
	091 Add X21, X19, 272
	092 Add X20, X19, 288
	093 Move X0, X19
	094 Move X1, X21
	095 Move X2, X20
	096 Move [X19+320], W31
	097 Call XRInteractorLineVisual.GetLinePoints, X0, X1, X2
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {127}
	102 Move W8, [X20]
	103 Compare W8, 0
	104 JumpIfEqual {127}
	105 Move W8, [X19+443]
	106 Compare W8, 0
	107 JumpIfEqual {145}
	108 Move X20, [X19+240]
	109 Compare X20, 0
	110 JumpIfEqual {534}
	111 Move X10, 0x611000
	112 Move X8, [X20]
	113 Move X10, [X10+808]
	114 NotImplemented "Instruction LDRH not yet implemented."
	115 Move X1, [X10]
	116 Compare X9, 0
	117 JumpIfEqual {124}
	118 Move X10, [X8+176]
	119 Add X10, X10, 8
	120 NotImplemented "Instruction LDUR not yet implemented."
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Subtract X9, X9, 1
	123 Add X10, X10, 16
	124 Move W2, 4
	125 Move X0, X20
	126 Call 0x1C5D788
	127 Move X0, [X19+208]
	128 Compare X0, 0
	129 JumpIfEqual {534}
	130 Move W1, W31
	131 Move X2, X31
	132 Call Renderer.set_enabled, X0, X1
	133 Move X20, [X31+224]
	134 Move X19, [X31+232]
	135 Move X22, [X31+208]
	136 Move X21, [X31+216]
	137 Move X24, [X31+192]
	138 Move X23, [X31+200]
	139 Move X30, [X31+176]
	140 Move X25, [X31+184]
	141 Move D9, [X31+160]
	142 Move D8, [X31+168]
	143 Add X31, X31, 240
	144 Return 
	145 Move W20, W31
	146 Move W9, [X10]
	147 Add W9, W9, 4
	148 Add X8, X8, W9
	149 Add X0, X8, 312
	150 Move X8, [X0]
	151 Move X1, [X0+8]
	152 Move X0, X20
	153 NotImplemented "Instruction BLR not yet implemented."
	154 And W20, W0, 1
	155 Move W8, [X19+440]
	156 Compare W8, 0
	157 JumpIfEqual {164}
	158 Move X8, [X19+264]
	159 Compare X8, 0
	160 JumpIfEqual {534}
	161 Move W8, [X8+656]
	162 NotImplemented "Instruction CMP not yet implemented."
	163 NotImplemented "Instruction CSET not yet implemented."
	164 Move W22, W31
	165 Move W2, [X19+288]
	166 Add X4, X31, 144
	167 Add X5, X31, 128
	168 Move X0, X19
	169 Move X1, X21
	170 Move W3, W22
	171 Call XRInteractorLineVisual.GetLineOriginAndDirection, X0, X1, X2, X3, X4, X5
	172 Move W2, [X19+288]
	173 Add X3, X31, 112
	174 Add X4, X31, 108
	175 Move X0, X19
	176 Move X1, X21
	177 Call XRInteractorLineVisual.ExtractHitInformation, X0, X1, X2, X3, X4
	178 Move W10, [X19+144]
	179 And W9, W0, 1
	180 Move [X19+413], W9
	181 Move W9, [X31+108]
	182 NotImplemented "Instruction CMP not yet implemented."
	183 NotImplemented "Instruction CSET not yet implemented."
	184 And W8, W22, W20
	185 And W10, W0, W10
	186 And W10, W22, W10
	187 Or W9, W8, W9
	188 Or W9, W9, W10
	189 Compare W9, 0
	190 JumpIfEqual {205}
	191 Move V0, [X19+140]
	192 Move S1, 1
	193 NotImplemented "Instruction FCMP not yet implemented."
	194 Move W9, 20
	195 Move W10, 19
	196 Move [X19+288], W9
	197 Move [X19+192], W10
	198 Compare W8, 0
	199 JumpIfEqual {204}
	200 Add X1, X31, 144
	201 Add X2, X31, 112
	202 Move X0, X19
	203 Call XRInteractorLineVisual.FindClosestInteractableAttachPoint, X0, X1, X2
	204 Move W24, 1
	205 Move W24, W31
	206 Move W1, [X19+288]
	207 Move X0, X21
	208 Call XRInteractorLineVisual.EnsureSize, X0, X1
	209 Move W1, [X19+288]
	210 Add X22, X19, 304
	211 Move X0, X22
	212 Call XRInteractorLineVisual.EnsureSize, X0, X1
	213 Move TEMP, X0
	214 And TEMP, TEMP, 1
	215 Compare TEMP, 1
	216 JumpIfEqual {218}
	217 Move [X19+320], W31
	218 Move W1, [X19+288]
	219 Add X23, X19, 328
	220 Move X0, X23
	221 Call XRInteractorLineVisual.EnsureSize, X0, X1
	222 Move TEMP, X0
	223 And TEMP, TEMP, 1
	224 Compare TEMP, 1
	225 JumpIfEqual {227}
	226 Move [X19+344], W31
	227 Compare W24, 0
	228 JumpIfEqual {284}
	229 Move W8, [X19+105]
	230 Compare W8, 0
	231 JumpIfEqual {277}
	232 Move W8, [X19+384]
	233 Compare W8, 0
	234 JumpIfEqual {272}
	235 Move W8, [X19+344]
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Move V8, [X19+108]
	238 Move X0, X31
	239 Call Time.get_deltaTime
	240 Add X8, X19, 388
	241 Move V1, [X31+128]
	242 Move V2, [X31+136]
	243 Move V4, [X8]
	244 Move V5, [X8+8]
	245 Multiply S0, S8, S0
	246 Move S3, 1
	247 NotImplemented "Instruction FMIN not yet implemented."
	248 NotImplemented "Instruction FCMP not yet implemented."
	249 Move S0, W31
	250 NotImplemented "Instruction FCSEL not yet implemented."
	251 Subtract V1, V1, V4
	252 Subtract S2, S2, S5
	253 NotImplemented "Instruction INVALID not yet implemented."
	254 Multiply S2, S0, S2
	255 Add V1, V4, V1
	256 Add S2, S5, S2
	257 Move [X31+128], D1
	258 Move [X31+136], S2
	259 Move X8, [X19+328]
	260 Move V1, [X31+144]
	261 Move V2, [X31+152]
	262 Move V3, [X8]
	263 Move V4, [X8+8]
	264 Subtract V1, V1, V3
	265 Subtract S2, S2, S4
	266 NotImplemented "Instruction INVALID not yet implemented."
	267 Multiply S0, S0, S2
	268 Add V1, V3, V1
	269 Add S0, S4, S0
	270 Move [X31+144], D1
	271 Move [X31+152], S0
	272 Move W8, [X31+136]
	273 Move X9, [X31+128]
	274 Add X10, X19, 388
	275 Move [X10+8], W8
	276 Move [X10], X9
	277 Move W0, [X19+288]
	278 Move V0, [X19+140]
	279 Add X1, X31, 144
	280 Add X2, X31, 128
	281 Add X3, X31, 112
	282 Move X4, X21
	283 Call XRInteractorLineVisual.CalculateLineCurveRenderPoints, X0, V0, X1, X2, X3, X4
	284 Move W9, [X19+344]
	285 Move W8, [X19+288]
	286 Move [X19+384], W24
	287 NotImplemented "Instruction CMP not yet implemented."
	288 Subtract W8, W9, 1
	289 Move W10, [X19+105]
	290 Compare W10, 0
	291 JumpIfEqual {317}
	292 Move W10, [X19+336]
	293 NotImplemented "Instruction CMP not yet implemented."
	294 Move W10, [X19+280]
	295 NotImplemented "Instruction CMP not yet implemented."
	296 Move X9, [X19+328]
	297 Move X10, [X19+272]
	298 Move W11, 12
	299 NotImplemented "Instruction SMADDL not yet implemented."
	300 NotImplemented "Instruction SMADDL not yet implemented."
	301 Move V0, [X9]
	302 Move V1, [X8]
	303 NotImplemented "Instruction LDUR not yet implemented."
	304 NotImplemented "Instruction LDUR not yet implemented."
	305 Subtract S0, S0, S1
	306 Move V1, [X19+164]
	307 Subtract V2, V2, V3
	308 Multiply S0, S0, S0
	309 NotImplemented "Instruction INVALID not yet implemented."
	310 Add S0, S0, S2
	311 Move S2, V2.S[1]
	312 Add S0, S2, S0
	313 NotImplemented "Instruction FCMP not yet implemented."
	314 NotImplemented "Instruction CSET not yet implemented."
	315 Move W8, 1
	316 Move [X19+196], W8
	317 Add X3, X31, 144
	318 Add X4, X31, 112
	319 Move X0, X19
	320 Move W1, W20
	321 Move W2, W24
	322 Call XRInteractorLineVisual.AdjustLineAndReticle, X0, X1, X2, X3, X4
	323 Move TEMP, X24
	324 And TEMP, TEMP, 1
	325 Compare TEMP, 1
	326 JumpIfEqual {335}
	327 Move W8, [X19+105]
	328 Compare W8, 0
	329 JumpIfEqual {335}
	330 Move W8, [X19+344]
	331 Move W9, [X19+288]
	332 NotImplemented "Instruction CMP not yet implemented."
	333 Move W8, [X19+196]
	334 Xor W24, W8, 1
	335 Move W24, W31
	336 Move W8, [X19+36]
	337 Or W8, W24, W8
	338 Compare W8, 0
	339 JumpIfEqual {398}
	340 Move X25, 0x611000
	341 Move X25, [X25+2536]
	342 Move X0, X21
	343 Move X1, [X25]
	344 Call NativeArray`1<Vector3>.Reinterpret, X0
	345 Move X8, [X25]
	346 Move [X31+88], X0
	347 Move [X31+96], X1
	348 Move X0, X23
	349 Move X1, X8
	350 Call NativeArray`1<Vector3>.Reinterpret, X0
	351 Move X8, [X25]
	352 Move [X31+72], X0
	353 Move [X31+80], X1
	354 Move X0, X22
	355 Move X1, X8
	356 Call NativeArray`1<Vector3>.Reinterpret, X0
	357 Move [X31+56], X0
	358 Move [X31+64], X1
	359 Move W8, [X19+36]
	360 Compare W8, 0
	361 JumpIfEqual {378}
	362 Move W9, [X19+44]
	363 Compare W9, 0
	364 JumpIfEqual {378}
	365 Move W8, [X19+413]
	366 Move V0, [X19+48]
	367 Move V1, [X19+40]
	368 Move S2, [X19+56]
	369 Move S3, [X19+60]
	370 Move W4, [X19+52]
	371 Or W3, W20, W8
	372 Add X1, X31, 144
	373 Add X2, X31, 112
	374 Move X0, X19
	375 Call XRInteractorLineVisual.UpdateTargetLineLength, X0, X1, X2, V0, V1, V2, V3, X3, X4
	376 Move W8, [X19+36]
	377 Move V8, V0
	378 Move V8, [X19+40]
	379 Move W21, [X19+320]
	380 Move W22, [X19+288]
	381 Move V9, [X19+108]
	382 NotImplemented "Instruction CMP not yet implemented."
	383 NotImplemented "Instruction CSET not yet implemented."
	384 NotImplemented "Instruction CMP not yet implemented."
	385 Move X0, X31
	386 NotImplemented "Instruction CSET not yet implemented."
	387 Call Time.get_deltaTime
	388 Multiply S1, S9, S0
	389 Add X4, X31, 88
	390 Add X5, X31, 72
	391 Add X6, X31, 56
	392 Move W0, W21
	393 Move W1, W22
	394 Move V0, V8
	395 Move W2, W23
	396 Move W3, W24
	397 Call XRInteractorLineVisual.ComputeNewRenderPoints, X0, X1, V0, X2, X3, V1, X4, X5, X6
	398 Move X8, 0x611000
	399 Move X0, [X19+272]
	400 Move X1, [X19+280]
	401 Move X3, [X19+304]
	402 Move X4, [X19+312]
	403 Move W6, [X19+288]
	404 Move X8, [X8+2528]
	405 Move W2, W31
	406 Move W5, W31
	407 Move X7, [X8]
	408 Call NativeArray`1<Vector3>.Copy, X0, X1, X2, X3, X4
	409 Move W0, [X19+288]
	410 Move W8, [X19+413]
	411 Move [X19+320], W0
	412 Compare W8, 0
	413 JumpIfNotEqual {416}
	414 Move W8, [X19+104]
	415 And W31, W20, W8
	416 Compare W20, 0
	417 JumpIfEqual {461}
	418 Move W20, W31
	419 Add X8, X19, 80
	420 Move X1, [X8]
	421 Move X0, X19
	422 Call XRInteractorLineVisual.SetColorGradient, X0, X1
	423 Move X0, X19
	424 Move W1, W20
	425 Call XRInteractorLineVisual.AssignReticle, X0, X1
	426 Move X0, [X19+208]
	427 Compare X0, 0
	428 JumpIfEqual {534}
	429 Move W8, [X19+320]
	430 NotImplemented "Instruction CMP not yet implemented."
	431 Move W1, 1
	432 Move X2, X31
	433 Call Renderer.set_enabled, X0, X1
	434 Move X0, [X19+208]
	435 Compare X0, 0
	436 JumpIfEqual {534}
	437 Move W1, [X19+320]
	438 Move X2, X31
	439 Call LineRenderer.set_positionCount, X0, X1
	440 Move X0, [X19+208]
	441 Compare X0, 0
	442 JumpIfEqual {534}
	443 Move X1, [X19+304]
	444 Move X2, [X19+312]
	445 Move X3, X31
	446 Call LineRenderer.SetPositions, X0, X1
	447 Move X8, 0x611000
	448 Move X0, [X19+304]
	449 Move X1, [X19+312]
	450 Move X3, [X19+328]
	451 Move X4, [X19+336]
	452 Move W6, [X19+320]
	453 Move X8, [X8+2528]
	454 Move W2, W31
	455 Move W5, W31
	456 Move X7, [X8]
	457 Call NativeArray`1<Vector3>.Copy, X0, X1, X2, X3, X4
	458 Move W8, [X19+320]
	459 Move [X19+196], W31
	460 Move [X19+344], W8
	461 Move W8, [X19+441]
	462 Compare W8, 0
	463 JumpIfEqual {418}
	464 Move X0, [X19+256]
	465 Compare X0, 0
	466 JumpIfEqual {534}
	467 Call XRBaseInteractor.get_hasHover, X0
	468 Move TEMP, X0
	469 And TEMP, TEMP, 1
	470 Compare TEMP, 1
	471 JumpIfNotEqual {418}
	472 Move X0, [X19+256]
	473 Compare X0, 0
	474 JumpIfEqual {534}
	475 Move X20, [X0+48]
	476 Call XRBaseInteractor.get_interactablesHovered, X0
	477 Compare X0, 0
	478 JumpIfEqual {534}
	479 Move X8, 0x611000
	480 Move X8, [X8+2520]
	481 Move X1, [X8]
	482 Add X8, X31, 8
	483 Call List`1<Object>.GetEnumerator, X0
	484 NotImplemented "Instruction LDUR not yet implemented."
	485 Move X8, [X31+24]
	486 Move X21, 0x611000
	487 Move X21, [X21+2504]
	488 Move [X31+2], V0
	489 Move [X31+48], X8
	490 Move X22, 0x611000
	491 Move X22, [X22+352]
	492 Move X1, [X21]
	493 Add X0, X31, 32
	494 Call Enumerator<Object>.MoveNext, X0
	495 Move TEMP, X0
	496 And TEMP, TEMP, 1
	497 Compare TEMP, 1
	498 JumpIfNotEqual {525}
	499 Move X0, [X31+48]
	500 Move X1, [X22]
	501 Call 0x1C17E00
	502 Move X2, X0
	503 Compare X0, 0
	504 JumpIfEqual {492}
	505 Compare X20, 0
	506 JumpIfEqual {535}
	507 Move X1, [X19+256]
	508 Move X0, X20
	509 Move X3, X31
	510 Call XRInteractionManager.IsSelectPossible, X0, X1, X2
	511 Move TEMP, X0
	512 And TEMP, TEMP, 1
	513 Compare TEMP, 1
	514 JumpIfNotEqual {492}
	515 Move X8, 0x611000
	516 Move X8, [X8+2496]
	517 Add X0, X31, 32
	518 Move X1, [X8]
	519 Call Enumerator<Object>.Dispose, X0
	520 Move X0, X19
	521 Call XRInteractorLineVisual.ClearReticle, X0
	522 Move X1, [X19+88]
	523 Move X0, X19
	524 Call XRInteractorLineVisual.SetColorGradient, X0, X1
	525 Move X8, 0x611000
	526 Move X8, [X8+2496]
	527 Add X0, X31, 32
	528 Move X1, [X8]
	529 Call Enumerator<Object>.Dispose, X0
	530 Compare X19, 0
	531 JumpIfEqual {534}
	532 Add X8, X19, 96
	533 Move W20, 1
	534 Call 0x1C17F20
	535 Call 0x1C17F20
	536 Move X20, X0
	537 NotImplemented "Instruction CMP not yet implemented."
	538 Move X0, X20
	539 Call 0x3EB2AD0
	540 Move X21, [X0]
	541 Call 0x3EB2AE0
	542 Move X8, 0x611000
	543 Move X8, [X8+2496]
	544 Add X0, X31, 32
	545 Move X1, [X8]
	546 Call Enumerator<Object>.Dispose, X0
	547 Compare X21, 0
	548 JumpIfEqual {530}
	549 Move X0, X21
	550 Call 0x1C17F18
	551 Move X21, X31
	552 Move X20, X0
	553 Move X8, 0x611000
	554 Move X8, [X8+2496]
	555 Move X1, [X8]
	556 Add X0, X31, 32
	557 Call Enumerator<Object>.Dispose, X0
	558 Compare X21, 0
	559 JumpIfNotEqual {562}
	560 Move X0, X20
	561 Call 0x1D2D690
	562 Move X0, X21
	563 Call 0x1C17F18
	564 Call 0x1991590

Method: System.Boolean GetLinePoints(ref Unity.Collections.NativeArray`1<UnityEngine.Vector3> linePoints, out System.Int32 numPoints)

Disassembly:
	0x03B4ACE4 FMUL S3, S3, S3
	0x03B4ACE8 FMUL S4, S4, S4
	0x03B4ACEC FMUL S5, S5, S5
	0x03B4ACF0 FADD S3, S3, S4
	0x03B4ACF4 FADD S3, S5, S3
	0x03B4ACF8 LDP S4, S5, [X11 - 0x8]
	0x03B4ACFC LDR V6, [X11]
	0x03B4AD00 MOV V7.16B, V3.16B
	0x03B4AD04 FSUB S3, S4, S0
	0x03B4AD08 FSUB S4, S5, S1
	0x03B4AD0C FSUB S5, S6, S2
	0x03B4AD10 FMUL S3, S3, S3
	0x03B4AD14 FMUL S4, S4, S4
	0x03B4AD18 FADD S3, S3, S4
	0x03B4AD1C FMUL S4, S5, S5
	0x03B4AD20 FADD S3, S4, S3
	0x03B4AD24 FCMP S3, S7
	0x03B4AD28 B.PL 0x3B4AD3C
	0x03B4AD2C ADD X10, X10, 0x1
	0x03B4AD30 CMP X10, X9
	0x03B4AD34 ADD X11, X11, 0xC
	0x03B4AD38 B.LT 0x3B4ACF8
	0x03B4AD3C SUB W9, W10, 0x1
	0x03B4AD40 B 0x3B4AD48
	0x03B4AD44 MOVZ W9, 0x1
	0x03B4AD48 ADD W10, W9, 0x1
	0x03B4AD4C STR W9, [X19 + 0xC0]
	0x03B4AD50 STR W10, [X19 + 0x120]
	0x03B4AD54 LDR X10, [X20]
	0x03B4AD58 LDR W11, [X20 + 0x8]
	0x03B4AD5C MOV X20, X19
	0x03B4AD60 STR X10, [X20 + 0xA8]!
	0x03B4AD64 LDRB W10, [X20 + 0xF4]
	0x03B4AD68 STR W11, [X20 + 0x8]
	0x03B4AD6C CBNZ W10, 0x3B4AE44
	0x03B4AD70 MOVZ W10, 0xC
	0x03B4AD74 ADRP X21, 0x88E000
	0x03B4AD78 SMADDL X8, X9, X10, X8
	0x03B4AD7C LDR V8, [X19 + 0xA8]
	0x03B4AD80 LDRB W9, [X21 + 0x785]
	0x03B4AD84 LDUR V9, [X8 - 0xC]
	0x03B4AD88 LDUR V10, [X8 - 0x4]
	0x03B4AD8C LDR V11, [X19 + 0xB0]
	0x03B4AD90 CBNZ W9, 0x3B4ADA8
	0x03B4AD94 ADRP X0, 0x5A9000
	0x03B4AD98 LDR X0, [X0 + 0x5A8]
	0x03B4AD9C BL 0x1C16CF4
	0x03B4ADA0 MOVZ W8, 0x1
	0x03B4ADA4 STRB W8, [X21 + 0x785]
	0x03B4ADA8 ADRP X8, 0x5A9000
	0x03B4ADAC LDR X8, [X8 + 0x5A8]
	0x03B4ADB0 FSUB V9.2S, V9.2S, V8.2S
	0x03B4ADB4 FSUB S8, S10, S11
	0x03B4ADB8 LDR X0, [X8]
	0x03B4ADBC LDR W8, [X0 + 0xE0]
	0x03B4ADC0 CBNZ W8, 0x3B4ADC8
	0x03B4ADC4 BL 0x1C16DFC
	0x03B4ADC8 ADRP X8, 0xFFFFFFFFFCFA0000
	0x00000000 INVALID
	0x03B4ADD0 LDR V2, [X8 + 0x17C]
	0x03B4ADD4 FADDP S0, V0.2S
	0x03B4ADD8 FMUL S1, S8, S8
	0x03B4ADDC FADD S0, S1, S0
	0x03B4ADE0 FSQRT S1, S0
	0x03B4ADE4 FCMP S1, S2
	0x03B4ADE8 B.LE 0x3B4ADFC
	0x03B4ADEC UNIMPLEMENTED
	0x00000000 INVALID
	0x03B4ADF4 FDIV S1, S8, S1
	0x03B4ADF8 B 0x3B4AE34
	0x03B4ADFC ADRP X21, 0x88E000
	0x03B4AE00 LDRB W8, [X21 + 0x783]
	0x03B4AE04 CBNZ W8, 0x3B4AE1C
	0x03B4AE08 ADRP X0, 0x5A9000
	0x03B4AE0C LDR X0, [X0 + 0x5A0]
	0x03B4AE10 BL 0x1C16CF4
	0x03B4AE14 MOVZ W8, 0x1
	0x03B4AE18 STRB W8, [X21 + 0x783]
	0x03B4AE1C ADRP X8, 0x5A9000
	0x03B4AE20 LDR X8, [X8 + 0x5A0]
	0x03B4AE24 LDR X8, [X8]
	0x03B4AE28 LDR X8, [X8 + 0xB8]
	0x03B4AE2C LDR V0, [X8]
	0x03B4AE30 LDR V1, [X8 + 0x8]
	0x03B4AE34 LDR W9, [X19 + 0xC0]
	0x03B4AE38 LDR X8, [X19 + 0x110]
	0x03B4AE3C STUR D0, [X19 + 0xB4]
	0x03B4AE40 STR S1, [X19 + 0xBC]
	0x03B4AE44 LDR W10, [X20 + 0x8]
	0x03B4AE48 LDR X11, [X20]
	0x03B4AE4C MOVZ W12, 0xC
	0x03B4AE50 SMADDL X8, X9, X12, X8
	0x03B4AE54 STR W10, [X8 + 0x8]
	0x03B4AE58 STR X11, [X8]
	0x03B4AE5C LDP X20, X19, [X31 + 0x70]
	0x03B4AE60 LDP X22, X21, [X31 + 0x60]
	0x03B4AE64 LDP X24, X23, [X31 + 0x50]
	0x03B4AE68 LDP X26, X25, [X31 + 0x40]
	0x03B4AE6C LDR X30, [X31 + 0x30]
	0x03B4AE70 LDP D9, D8, [X31 + 0x20]
	0x03B4AE74 LDP D11, D10, [X31 + 0x10]
	0x03B4AE78 LDP D13, D12, [X31], #0x80
	0x03B4AE7C RET
	0x03B4AE80 STP D15, D14, [X31 - 0x80]!
	0x03B4AE84 STP D13, D12, [X31 + 0x10]
	0x03B4AE88 STP D11, D10, [X31 + 0x20]
	0x03B4AE8C STP D9, D8, [X31 + 0x30]
	0x03B4AE90 STR X30, [X31 + 0x40]
	0x03B4AE94 STP X24, X23, [X31 + 0x50]
	0x03B4AE98 STP X22, X21, [X31 + 0x60]
	0x03B4AE9C STP X20, X19, [X31 + 0x70]
	0x03B4AEA0 ADRP X24, 0x898000
	0x03B4AEA4 LDRB W8, [X24 + 0x8BE]
	0x03B4AEA8 MOV W21, W4
	0x03B4AEAC MOV W23, W3
	0x03B4AEB0 MOV V8.16B, V3.16B
	0x03B4AEB4 MOV V9.16B, V2.16B
	0x03B4AEB8 MOV V11.16B, V1.16B
	0x03B4AEBC MOV V10.16B, V0.16B
	0x03B4AEC0 MOV X20, X2
	0x03B4AEC4 MOV X22, X1
	0x03B4AEC8 MOV X19, X0
	0x03B4AECC TBNZ X8, 0x0, 0x3B4AEFC
	0x03B4AED0 ADRP X0, 0x610000
	0x03B4AED4 LDR X0, [X0 + 0xA20]
	0x03B4AED8 BL 0x1C16CF4
	0x03B4AEDC ADRP X0, 0x610000
	0x03B4AEE0 LDR X0, [X0 + 0x958]
	0x03B4AEE4 BL 0x1C16CF4
	0x03B4AEE8 ADRP X0, 0x610000
	0x03B4AEEC LDR X0, [X0 + 0x960]
	0x03B4AEF0 BL 0x1C16CF4
	0x03B4AEF4 MOVZ W8, 0x1
	0x03B4AEF8 STRB W8, [X24 + 0x8BE]
	0x03B4AEFC MOV X0, X31
	0x03B4AF00 BL 0x3C3C764
	0x03B4AF04 MOV V12.16B, V0.16B
	0x03B4AF08 TBZ X23, 0x0, 0x3B4AF98
	0x03B4AF0C MOV X0, X31
	0x03B4AF10 BL 0x3C3C764
	0x03B4AF14 STR S0, [X19 + 0x1A0]
	0x03B4AF18 TBZ X21, 0x0, 0x3B4AF94
	0x03B4AF1C ADRP X21, 0x88E000
	0x03B4AF20 LDR V0, [X22]
	0x03B4AF24 LDUR V14, [X22 + 0x4]
	0x03B4AF28 LDR V15, [X20]
	0x03B4AF2C LDRB W8, [X21 + 0x85C]
	0x03B4AF30 LDUR V13, [X20 + 0x4]
	0x03B4AF34 CBNZ W8, 0x3B4AF54
	0x03B4AF38 ADRP X0, 0x5A9000
	0x03B4AF3C LDR X0, [X0 + 0x5A8]
	0x03B4AF40 STR S0, [X31 + 0x4C]
	0x03B4AF44 BL 0x1C16CF4
	0x03B4AF48 LDR V0, [X31 + 0x4C]
	0x03B4AF4C MOVZ W8, 0x1
	0x03B4AF50 STRB W8, [X21 + 0x85C]
	0x03B4AF54 ADRP X8, 0x5A9000
	0x03B4AF58 LDR X8, [X8 + 0x5A8]
	0x03B4AF5C FSUB S15, S0, S15
	0x03B4AF60 FSUB V13.2S, V14.2S, V13.2S
	0x03B4AF64 LDR X0, [X8]
	0x03B4AF68 LDR W8, [X0 + 0xE0]
	0x03B4AF6C CBNZ W8, 0x3B4AF74
	0x03B4AF70 BL 0x1C16DFC
	0x03B4AF74 FMUL S0, S15, S15
	0x00000000 INVALID
	0x03B4AF7C FADD S0, S0, S1
	0x03B4AF80 MOV S1, V1.S[1]
	0x03B4AF84 FADD S0, S1, S0
	0x03B4AF88 FSQRT S0, S0
	0x03B4AF8C FCMP S0, S11
	0x03B4AF90 FCSEL S11, S0, S11, MI
	0x03B4AF94 STR S11, [X19 + 0x1A4]
	0x03B4AF98 LDR V0, [X19 + 0x1A0]
	0x03B4AF9C LDR X0, [X19 + 0x1C8]
	0x03B4AFA0 FSUB S11, S12, S0
	0x03B4AFA4 FCMP S11, S9
	0x03B4AFA8 B.LE 0x3B4AFE4
	0x03B4AFAC CBZ X0, 0x3B4B064
	0x03B4AFB0 ADRP X8, 0x610000
	0x03B4AFB4 LDR X8, [X8 + 0x960]
	0x03B4AFB8 MOV V0.16B, V10.16B
	0x03B4AFBC LDR X1, [X8]
	0x03B4AFC0 BL 0x270C674
	0x03B4AFC4 LDR X20, [X19 + 0x1C8]
	0x03B4AFC8 MOV X0, X31
	0x03B4AFCC BL 0x3C3C7B4
	0x03B4AFD0 CBZ X20, 0x3B4B064
	0x03B4AFD4 FSUB S1, S11, S9
	0x03B4AFD8 FMUL S1, S1, S8
	0x03B4AFDC FMUL S0, S1, S0
	0x03B4AFE0 B 0x3B4B018
	0x03B4AFE4 CBZ X0, 0x3B4B064
	0x03B4AFE8 ADRP X8, 0x610000
	0x03B4AFEC LDR V0, [X19 + 0x1A4]
	0x03B4AFF0 LDR X8, [X8 + 0x960]
	0x03B4AFF4 FCMP S0, S10
	0x03B4AFF8 LDR X1, [X8]
	0x03B4AFFC FCSEL S0, S0, S10, GT
	0x03B4B000 BL 0x270C674
	0x03B4B004 LDR X20, [X19 + 0x1C8]
	0x03B4B008 MOV X0, X31
	0x03B4B00C BL 0x3C3C7B4
	0x03B4B010 CBZ X20, 0x3B4B064
	0x03B4B014 FMUL S0, S0, S8
	0x03B4B018 ADRP X8, 0x60F000
	0x03B4B01C LDR X8, [X8 + 0x958]
	0x03B4B020 MOV X0, X20
	0x03B4B024 LDR X1, [X8]
	0x03B4B028 BL 0x270C6DC
	0x03B4B02C LDR X0, [X19 + 0x1C8]

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+128], D13
	003 Move [X31+136], D12
	004 Move [X31+144], D11
	005 Move [X31+152], D10
	006 Move [X31+160], D9
	007 Move [X31+168], D8
	008 Move [X31+176], X30
	009 Move [X31+192], X22
	010 Move [X31+200], X21
	011 Move [X31+208], X20
	012 Move [X31+216], X19
	013 Move X22, 0x899000
	014 Move W8, [X22+2230]
	015 Move X19, X2
	016 Move X20, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {39}
	022 Move X0, 0x611000
	023 Move X0, [X0+2416]
	024 Call 0x1C17CF4
	025 Move X0, 0x611000
	026 Move X0, [X0+2544]
	027 Call 0x1C17CF4
	028 Move X0, 0x611000
	029 Move X0, [X0+2552]
	030 Call 0x1C17CF4
	031 Move X0, 0x611000
	032 Move X0, [X0+2560]
	033 Call 0x1C17CF4
	034 Move X0, 0x5AA000
	035 Move X0, [X0+1432]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X22+2230], W8
	039 Move [X31+64], X31
	040 Move [X31+72], X31
	041 Move [X31+88], W31
	042 Move [X31+80], X31
	043 Move W8, [X21+232]
	044 Compare W8, 0
	045 JumpIfEqual {113}
	046 Move [X31+64], X31
	047 Move [X31+72], X31
	048 Move [X31+88], W31
	049 Move [X31+80], X31
	050 Move W8, [X21+144]
	051 Compare W8, 0
	052 JumpIfEqual {182}
	053 Move X8, 0x5AA000
	054 Move X8, [X8+1432]
	055 Move X22, [X21+152]
	056 Move X0, [X8]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move X0, X22
	062 Move X1, X31
	063 Move X2, X31
	064 Call Object.op_Inequality, X0, X1
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {182}
	069 Move X0, [X21+152]
	070 Compare X0, 0
	071 JumpIfEqual {238}
	072 Move X1, X31
	073 Call Transform.get_position, X0
	074 Move X0, [X21+152]
	075 Compare X0, 0
	076 JumpIfEqual {238}
	077 Move X1, X31
	078 Move V8, V0
	079 Move V9, V1
	080 Move V10, V2
	081 Call Transform.get_forward, X0
	082 Move X22, 0x88F000
	083 Move W8, [X22+1925]
	084 Move V11, V0
	085 Move V12, V1
	086 Move V13, V2
	087 Compare W8, 0
	088 JumpIfNotEqual {94}
	089 Move X0, 0x5AA000
	090 Move X0, [X0+1448]
	091 Call 0x1C17CF4
	092 Move W8, 1
	093 Move [X22+1925], W8
	094 Move X8, 0x5AA000
	095 Move X8, [X8+1448]
	096 Move X0, [X8]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {101}
	100 Call 0x1C17DFC
	101 Multiply S0, S11, S11
	102 Multiply S1, S12, S12
	103 Move X8, -50720768
	104 Add S0, S0, S1
	105 Move V1, [X8+380]
	106 Multiply S2, S13, S13
	107 Add S0, S2, S0
	108 NotImplemented "Instruction FSQRT not yet implemented."
	109 NotImplemented "Instruction FCMP not yet implemented."
	110 NotImplemented "Instruction FDIV not yet implemented."
	111 NotImplemented "Instruction FDIV not yet implemented."
	112 NotImplemented "Instruction FDIV not yet implemented."
	113 Move X22, [X21+216]
	114 Compare X22, 0
	115 JumpIfEqual {238}
	116 Move X10, 0x611000
	117 Move X8, [X22]
	118 Move X10, [X10+2544]
	119 Add X21, X21, 296
	120 NotImplemented "Instruction LDRH not yet implemented."
	121 Move X1, [X10]
	122 Compare X9, 0
	123 JumpIfEqual {130}
	124 Move X10, [X8+176]
	125 Add X10, X10, 8
	126 NotImplemented "Instruction LDUR not yet implemented."
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Subtract X9, X9, 1
	129 Add X10, X10, 16
	130 Move X0, X22
	131 Move W2, W31
	132 Call 0x1C5D788
	133 NotImplemented "Instruction LDRSW not yet implemented."
	134 Add X8, X8, X9
	135 Add X0, X8, 312
	136 Move X8, [X0]
	137 Move X3, [X0+8]
	138 Move X0, X22
	139 Move X1, X21
	140 Move X2, X19
	141 NotImplemented "Instruction BLR not yet implemented."
	142 Move W1, [X19]
	143 Move W22, W0
	144 Move X0, X20
	145 Call XRInteractorLineVisual.EnsureSize, X0, X1
	146 Move X8, 0x611000
	147 Move X0, [X21]
	148 Move X1, [X20]
	149 Move X2, [X20+8]
	150 Move W3, [X19]
	151 Move X8, [X8+2552]
	152 Move X4, [X8]
	153 Call NativeArray`1<Vector3>.Copy, X0, X1, X2
	154 Move X22, 0x88F000
	155 Move W8, [X22+1923]
	156 Compare W8, 0
	157 JumpIfNotEqual {163}
	158 Move X0, 0x5AA000
	159 Move X0, [X0+1440]
	160 Call 0x1C17CF4
	161 Move W8, 1
	162 Move [X22+1923], W8
	163 Move X8, 0x5AA000
	164 Move X8, [X8+1440]
	165 Move X8, [X8]
	166 Move X8, [X8+184]
	167 Move S0, [X8]
	168 Move S1, [X8+4]
	169 Move V2, [X8+8]
	170 Move X8, 0x611000
	171 Move X8, [X8+2560]
	172 Add X0, X31, 64
	173 Add X1, X31, 96
	174 Move [X31+96], S8
	175 Move [X31+104], S9
	176 Move X2, [X8]
	177 Move [X31+104], S10
	178 Move [X31+112], S0
	179 Move [X31+112], S1
	180 Move [X31+120], S2
	181 Call Nullable`1<Ray>..ctor, X0, X1
	182 Move X21, [X21+224]
	183 Move V0, [X31+4]
	184 NotImplemented "Instruction LDUR not yet implemented."
	185 Move [X31+2], V0
	186 Move [X31+44], V1
	187 Compare X21, 0
	188 JumpIfEqual {238}
	189 Move V0, [X31+2]
	190 NotImplemented "Instruction LDUR not yet implemented."
	191 Move X10, 0x611000
	192 Move [X31], V0
	193 Move [X31+12], V1
	194 Move X8, [X21]
	195 Move X10, [X10+2416]
	196 NotImplemented "Instruction LDRH not yet implemented."
	197 Move X1, [X10]
	198 Compare X9, 0
	199 JumpIfEqual {206}
	200 Move X10, [X8+176]
	201 Add X10, X10, 8
	202 NotImplemented "Instruction LDUR not yet implemented."
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Subtract X9, X9, 1
	205 Add X10, X10, 16
	206 Move X0, X21
	207 Move W2, W31
	208 Call 0x1C5D788
	209 NotImplemented "Instruction LDRSW not yet implemented."
	210 Add X8, X8, X9
	211 Add X0, X8, 312
	212 Move V0, [X31]
	213 NotImplemented "Instruction LDUR not yet implemented."
	214 Move X8, [X0]
	215 Add X3, X31, 96
	216 Move [X31+6], V0
	217 Move [X31+108], V1
	218 Move X4, [X0+8]
	219 Move X0, X21
	220 Move X1, X20
	221 Move X2, X19
	222 NotImplemented "Instruction BLR not yet implemented."
	223 Move W22, W0
	224 And W0, W22, 1
	225 Move X20, [X31+208]
	226 Move X19, [X31+216]
	227 Move X22, [X31+192]
	228 Move X21, [X31+200]
	229 Move X30, [X31+176]
	230 Move D9, [X31+160]
	231 Move D8, [X31+168]
	232 Move D11, [X31+144]
	233 Move D10, [X31+152]
	234 Move D13, [X31+128]
	235 Move D12, [X31+136]
	236 Add X31, X31, 224
	237 Return X0
	238 Call 0x1C17F20

Method: System.Void AdjustLineAndReticle(System.Boolean hasSelection, System.Boolean bendLine, in UnityEngine.Vector3 lineOrigin, in UnityEngine.Vector3 targetEndPoint)

Disassembly:
	0x03B4BA4C BL 0x1C16CF4
	0x03B4BA50 MOVZ W8, 0x1
	0x03B4BA54 STRB W8, [X24 + 0x8D6]
	0x03B4BA58 LDR X0, [X25]
	0x03B4BA5C LDR W8, [X0 + 0xE0]
	0x03B4BA60 CBNZ W8, 0x3B4BA68
	0x03B4BA64 BL 0x1C16DFC
	0x03B4BA68 MOV X0, X31
	0x03B4BA6C BL 0x36FA670
	0x03B4BA70 TBZ X0, 0x0, 0x3B4BAC8
	0x03B4BA74 ADRP X8, 0x60F000
	0x03B4BA78 LDR X8, [X8 + 0xA68]
	0x03B4BA7C LDR X0, [X8]
	0x03B4BA80 LDR W8, [X0 + 0xE0]
	0x03B4BA84 CBNZ W8, 0x3B4BA8C
	0x03B4BA88 BL 0x1C16DFC
	0x03B4BA8C BL 0x3B4D43C
	0x03B4BA90 CBZ X0, 0x3B4BAC8
	0x03B4BA94 MOV X5, X0
	0x03B4BA98 AND W0, W23, 0x1
	0x03B4BA9C MOV X1, X22
	0x03B4BAA0 MOV X2, X21
	0x03B4BAA4 MOV X3, X20
	0x03B4BAA8 MOV X4, X19
	0x03B4BAAC LDP X20, X19, [X31 + 0x40]
	0x03B4BAB0 LDP X22, X21, [X31 + 0x30]
	0x03B4BAB4 LDP X24, X23, [X31 + 0x20]
	0x03B4BAB8 LDP X30, X25, [X31 + 0x10]
	0x03B4BABC MOV V0.16B, V8.16B
	0x03B4BAC0 LDR V8, [X31], #0x50
	0x03B4BAC4 BR X5
	0x03B4BAC8 AND W0, W23, 0x1
	0x03B4BACC MOV X1, X22
	0x03B4BAD0 MOV X2, X21
	0x03B4BAD4 MOV X3, X20
	0x03B4BAD8 MOV X4, X19
	0x03B4BADC LDP X20, X19, [X31 + 0x40]
	0x03B4BAE0 LDP X22, X21, [X31 + 0x30]
	0x03B4BAE4 LDP X24, X23, [X31 + 0x20]
	0x03B4BAE8 LDP X30, X25, [X31 + 0x10]
	0x03B4BAEC MOV V0.16B, V8.16B
	0x03B4BAF0 MOV X5, X31
	0x03B4BAF4 LDR V8, [X31], #0x50
	0x03B4BAF8 B 0x3B64EA0
	0x03B4BAFC STR X30, [X31 - 0x30]!
	0x03B4BB00 STP X22, X21, [X31 + 0x10]
	0x03B4BB04 STP X20, X19, [X31 + 0x20]
	0x03B4BB08 ADRP X20, 0x897000
	0x03B4BB0C ADRP X22, 0x60F000
	0x03B4BB10 ADRP X21, 0x5A8000
	0x03B4BB14 LDRB W8, [X20 + 0x8C2]
	0x03B4BB18 LDR X22, [X22 + 0xA70]
	0x03B4BB1C LDR X21, [X21 + 0x598]
	0x03B4BB20 MOV X19, X0
	0x03B4BB24 TBNZ X8, 0x0, 0x3B4BB60
	0x03B4BB28 ADRP X0, 0x60F000
	0x03B4BB2C LDR X0, [X0 + 0xA70]
	0x03B4BB30 BL 0x1C16CF4
	0x03B4BB34 ADRP X0, 0x5A8000
	0x03B4BB38 LDR X0, [X0 + 0xA28]
	0x03B4BB3C BL 0x1C16CF4
	0x03B4BB40 ADRP X0, 0x5A8000
	0x03B4BB44 LDR X0, [X0 + 0x598]
	0x03B4BB48 BL 0x1C16CF4
	0x03B4BB4C ADRP X0, 0x60F000
	0x03B4BB50 LDR X0, [X0 + 0xA78]
	0x03B4BB54 BL 0x1C16CF4
	0x03B4BB58 MOVZ W8, 0x1
	0x03B4BB5C STRB W8, [X20 + 0x8C2]
	0x03B4BB60 LDR X1, [X22]
	0x03B4BB64 MOV X0, X19
	0x03B4BB68 BL 0x21A3894
	0x03B4BB6C STR X0, [X19 + 0xD0]
	0x03B4BB70 MOV X20, X0
	0x03B4BB74 LDR X0, [X21]
	0x03B4BB78 LDR W8, [X0 + 0xE0]
	0x03B4BB7C CBNZ W8, 0x3B4BB84
	0x03B4BB80 BL 0x1C16DFC
	0x03B4BB84 MOV X0, X20
	0x03B4BB88 MOV X1, X31
	0x03B4BB8C MOV X2, X31
	0x03B4BB90 BL 0x3C3883C
	0x03B4BB94 MOV W20, W0
	0x03B4BB98 TBZ X0, 0x0, 0x3B4BBDC
	0x03B4BB9C ADRP X8, 0x5A8000
	0x03B4BBA0 LDR X8, [X8 + 0xA28]
	0x03B4BBA4 ADRP X21, 0x60F000
	0x03B4BBA8 LDR X0, [X8]
	0x03B4BBAC LDR W8, [X0 + 0xE0]
	0x03B4BBB0 LDR X21, [X21 + 0xA78]
	0x03B4BBB4 CBNZ W8, 0x3B4BBBC
	0x03B4BBB8 BL 0x1C16DFC
	0x03B4BBBC LDR X0, [X21]
	0x03B4BBC0 MOV X1, X19
	0x03B4BBC4 MOV X2, X31
	0x03B4BBC8 BL 0x3C06B0C
	0x03B4BBCC MOV X0, X19
	0x03B4BBD0 MOV W1, W31
	0x03B4BBD4 MOV X2, X31
	0x03B4BBD8 BL 0x3C32410
	0x03B4BBDC ORN W8, W31, W20, 0x0
	0x03B4BBE0 LDP X20, X19, [X31 + 0x20]
	0x03B4BBE4 LDP X22, X21, [X31 + 0x10]
	0x03B4BBE8 AND W0, W8, 0x1
	0x03B4BBEC LDR X30, [X31], #0x30
	0x03B4BBF0 RET
	0x03B4BBF4 MOV X8, X0
	0x03B4BBF8 STR X1, [X0 + 0x168]
	0x03B4BBFC MOVZ W9, 0x1
	0x03B4BC00 MOVZ W0, 0x1
	0x03B4BC04 STRB W9, [X8 + 0x170]
	0x03B4BC08 RET
	0x03B4BC0C MOV X8, X0
	0x03B4BC10 STR X31, [X0 + 0x168]
	0x03B4BC14 MOVZ W0, 0x1
	0x03B4BC18 STRB W31, [X8 + 0x170]
	0x03B4BC1C RET
	0x03B4BC20 SUB X31, X31, 0x1B0
	0x03B4BC24 STP D9, D8, [X31 + 0x150]
	0x03B4BC28 STR X29, [X31 + 0x160]
	0x03B4BC2C STP X30, X25, [X31 + 0x170]
	0x03B4BC30 STP X24, X23, [X31 + 0x180]
	0x03B4BC34 STP X22, X21, [X31 + 0x190]
	0x03B4BC38 STP X20, X19, [X31 + 0x1A0]
	0x03B4BC3C ADRP X20, 0x897000
	0x03B4BC40 ADRP X23, 0x607000
	0x03B4BC44 ADRP X22, 0x607000
	0x03B4BC48 LDRB W8, [X20 + 0x8C6]
	0x03B4BC4C LDR X23, [X23 + 0xE90]
	0x03B4BC50 LDR X22, [X22 + 0xE88]
	0x03B4BC54 MOV X19, X0
	0x03B4BC58 TBNZ X8, 0x0, 0x3B4BCD0
	0x03B4BC5C ADRP X0, 0x60F000
	0x03B4BC60 LDR X0, [X0 + 0xA80]
	0x03B4BC64 BL 0x1C16CF4
	0x03B4BC68 ADRP X0, 0x60F000
	0x03B4BC6C LDR X0, [X0 + 0x4C8]
	0x03B4BC70 BL 0x1C16CF4
	0x03B4BC74 ADRP X0, 0x60F000
	0x03B4BC78 LDR X0, [X0 + 0x4D0]
	0x03B4BC7C BL 0x1C16CF4
	0x03B4BC80 ADRP X0, 0x60F000
	0x03B4BC84 LDR X0, [X0 + 0xA88]
	0x03B4BC88 BL 0x1C16CF4
	0x03B4BC8C ADRP X0, 0x60F000
	0x03B4BC90 LDR X0, [X0 + 0xA90]
	0x03B4BC94 BL 0x1C16CF4
	0x03B4BC98 ADRP X0, 0x607000
	0x03B4BC9C LDR X0, [X0 + 0xE80]
	0x03B4BCA0 BL 0x1C16CF4
	0x03B4BCA4 ADRP X0, 0x607000
	0x03B4BCA8 LDR X0, [X0 + 0xE88]
	0x03B4BCAC BL 0x1C16CF4
	0x03B4BCB0 ADRP X0, 0x607000
	0x03B4BCB4 LDR X0, [X0 + 0xE90]
	0x03B4BCB8 BL 0x1C16CF4
	0x03B4BCBC ADRP X0, 0x5AA000
	0x03B4BCC0 LDR X0, [X0 + 0x9B0]
	0x03B4BCC4 BL 0x1C16CF4
	0x03B4BCC8 MOVZ W8, 0x1
	0x03B4BCCC STRB W8, [X20 + 0x8C6]
	0x03B4BCD0 ADRP X10, 0xFFFFFFFFFCFA2000
	0x03B4BCD4 LDR V0, [X10 + 0xB20]
	0x03B4BCD8 MOVZ W8, 0xD70A
	0x03B4BCDC MOVK W8, 0x3BA30000
	0x03B4BCE0 MOVZ W20, 0x1
	0x03B4BCE4 MOVZ W9, 0x41200000
	0x03B4BCE8 STR W8, [X19 + 0x20]
	0x03B4BCEC MOVZ W8, 0x3F000000
	0x03B4BCF0 STR D0, [X19 + 0x38]
	0x03B4BCF4 FMOV S0, W31
	0x03B4BCF8 FMOV S1, 1
	0x03B4BCFC FMOV S2, 1
	0x03B4BD00 FMOV S3, 1
	0x03B4BD04 MOV X0, X31
	0x03B4BD08 STRB W20, [X19 + 0x24]
	0x03B4BD0C STR W9, [X19 + 0x28]
	0x03B4BD10 STR W8, [X19 + 0x30]
	0x03B4BD14 STRB W20, [X19 + 0x34]
	0x03B4BD18 BL 0x3C01298
	0x03B4BD1C STR X0, [X19 + 0x40]
	0x03B4BD20 STRB W20, [X19 + 0x48]
	0x03B4BD24 LDR X0, [X23]
	0x03B4BD28 BL 0x1C16F10
	0x03B4BD2C MOV X1, X31
	0x03B4BD30 MOV X20, X0
	0x03B4BD34 BL 0x3C268D0
	0x03B4BD38 LDR X0, [X22]
	0x03B4BD3C MOVZ W1, 0x2
	0x03B4BD40 BL 0x1C16D6C
	0x03B4BD44 MOV X21, X0
	0x03B4BD48 ADD X0, X31, 0x138
	0x03B4BD4C FMOV S0, 1
	0x03B4BD50 FMOV S1, 1
	0x03B4BD54 FMOV S2, 1
	0x03B4BD58 FMOV S3, 1
	0x03B4BD5C FMOV S4, W31
	0x03B4BD60 MOV X1, X31
	0x03B4BD64 STP X31, X31, [X31 + 0x138]
	0x03B4BD68 STR W31, [X31 + 0x148]
	0x03B4BD6C BL 0x3C26810
	0x03B4BD70 CBZ X21, 0x3B4C318
	0x03B4BD74 ADD X25, X31, 0x98
	0x03B4BD78 LDR V0, [X25 + 0xA]
	0x03B4BD7C LDR W8, [X31 + 0x148]
	0x03B4BD80 STR V0, [X31 + 0x12]
	0x03B4BD84 STR W8, [X31 + 0x130]
	0x03B4BD88 LDR W8, [X21 + 0x18]
	0x03B4BD8C CBZ W8, 0x3B4C314
	0x03B4BD90 LDR V0, [X31 + 0x12]
	0x03B4BD94 LDR W8, [X31 + 0x130]
	0x03B4BD98 ADD X0, X31, 0x108
	0x03B4BD9C FMOV S1, 1
	0x03B4BDA0 STR V0, [X21 + 0x2]
	0x03B4BDA4 FMOV S0, 1
	0x03B4BDA8 FMOV S2, 1
	0x03B4BDAC FMOV S3, 1
	0x03B4BDB0 FMOV S4, 1
	0x03B4BDB4 MOV X1, X31
	0x03B4BDB8 STR W8, [X21 + 0x30]
	0x03B4BDBC STP X31, X31, [X31 + 0x108]
	0x03B4BDC0 STR W31, [X31 + 0x118]
	0x03B4BDC4 BL 0x3C26810
	0x03B4BDC8 LDR W8, [X31 + 0x118]
	0x03B4BDCC LDR V0, [X25 + 0x7]
	0x03B4BDD0 STR W8, [X31 + 0x100]
	0x03B4BDD4 STR V0, [X31 + 0xF]
	0x03B4BDD8 LDR W8, [X21 + 0x18]
	0x03B4BDDC CMP W8, 0x1
	0x03B4BDE0 B.LS 0x3B4C314
	0x03B4BDE4 LDR W8, [X31 + 0x100]
	0x03B4BDE8 LDR V0, [X31 + 0xF]
	0x03B4BDEC STR W8, [X21 + 0x44]
	0x03B4BDF0 STUR V0, [X21 + 0x34]
	0x03B4BDF4 CBZ X20, 0x3B4C318
	0x03B4BDF8 ADRP X24, 0x607000
	0x03B4BDFC LDR X24, [X24 + 0xE80]
	0x03B4BE00 MOV X0, X20
	0x03B4BE04 MOV X1, X21
	0x03B4BE08 MOV X2, X31
	0x03B4BE0C BL 0x3C26A8C
	0x03B4BE10 LDR X0, [X24]
	0x03B4BE14 MOVZ W1, 0x2
	0x03B4BE18 BL 0x1C16D6C
	0x03B4BE1C MOV X21, X0
	0x03B4BE20 ADD X0, X31, 0xE8
	0x03B4BE24 FMOV S0, 1
	0x03B4BE28 FMOV S1, W31
	0x03B4BE2C MOV X1, X31
	0x03B4BE30 STR X31, [X31 + 0xE8]
	0x03B4BE34 BL 0x3C26820
	0x03B4BE38 CBZ X21, 0x3B4C318
	0x03B4BE3C LDR W8, [X21 + 0x18]
	0x03B4BE40 CBZ W8, 0x3B4C314
	0x03B4BE44 LDR V0, [X31 + 0xE8]
	0x03B4BE48 ADD X0, X31, 0xE0
	0x03B4BE4C FMOV S1, 1
	0x03B4BE50 MOV X1, X31
	0x03B4BE54 STR D0, [X21 + 0x20]
	0x03B4BE58 FMOV S0, 1
	0x03B4BE5C STR X31, [X31 + 0xE0]
	0x03B4BE60 BL 0x3C26820
	0x03B4BE64 LDR W8, [X21 + 0x18]
	0x03B4BE68 CMP W8, 0x1
	0x03B4BE6C B.LS 0x3B4C314
	0x03B4BE70 LDR V0, [X31 + 0xE0]
	0x03B4BE74 MOV X0, X20
	0x03B4BE78 MOV X1, X21
	0x03B4BE7C MOV X2, X31

ISIL:
	001 Move [X31-128], D13
	002 Move [X31-120], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X26
	009 Move [X31+72], X25
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move W8, [X0+412]
	017 Move X20, X4
	018 Move X21, X3
	019 Move W22, W2
	020 Move X19, X0
	021 Move W23, W1
	022 Compare W8, 0
	023 JumpIfEqual {129}
	024 Move X8, [X20]
	025 Move X24, X19
	026 Move W9, [X20+8]
	027 Move [X24+168], X8
	028 Move W8, [X24+245]
	029 Move [X24+8], W9
	030 Compare W8, 0
	031 JumpIfNotEqual {35}
	032 Move W8, [X19+136]
	033 Compare W8, 0
	034 JumpIfEqual {129}
	035 Move W8, [X19+192]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move W9, [X19+288]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X9, [X19+272]
	040 Move W10, 12
	041 Move X25, 0x897000
	042 Move V12, [X19+168]
	043 NotImplemented "Instruction NOP not yet implemented."
	044 NotImplemented "Instruction SMADDL not yet implemented."
	045 NotImplemented "Instruction MADD not yet implemented."
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 NotImplemented "Instruction LDUR not yet implemented."
	048 Move V0, [X8]
	049 Move V1, [X8+8]
	050 Move W11, [X25+2247]
	051 Move V13, [X19+176]
	052 Subtract V11, V0, V9
	053 Subtract S10, S1, S8
	054 Compare W11, 0
	055 JumpIfNotEqual {61}
	056 Move X0, 0x5B0000
	057 Move X0, [X0+1208]
	058 Call 0x1C17CF4
	059 Move W8, 1
	060 Move [X25+2247], W8
	061 Move X8, 0x5B0000
	062 Move X8, [X8+1208]
	063 Move X25, 0x5A9000
	064 NotImplemented "Instruction INVALID not yet implemented."
	065 Multiply S1, S10, S10
	066 Move X8, [X8]
	067 NotImplemented "Instruction FADDP not yet implemented."
	068 Add S1, S1, S0
	069 Move X26, 0x88E000
	070 Move X8, [X8+184]
	071 Move V2, [X8]
	072 Move X25, [X25+1440]
	073 NotImplemented "Instruction FCMP not yet implemented."
	074 Move W8, [X26+1923]
	075 Compare W8, 0
	076 JumpIfNotEqual {82}
	077 Move X0, 0x5A9000
	078 Move X0, [X0+1440]
	079 Call 0x1C17CF4
	080 Move W8, 1
	081 Move [X26+1923], W8
	082 Move X8, [X25]
	083 Move X8, [X8+184]
	084 Move V0, [X8]
	085 Move V1, [X8+8]
	086 Subtract V0, V12, V9
	087 Subtract S2, S13, S8
	088 NotImplemented "Instruction INVALID not yet implemented."
	089 Multiply S2, S10, S2
	090 NotImplemented "Instruction FADDP not yet implemented."
	091 Add S0, S2, S0
	092 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	093 NotImplemented "Instruction INVALID not yet implemented."
	094 Multiply S4, S10, S0
	095 NotImplemented "Instruction INVALID not yet implemented."
	096 NotImplemented "Instruction FDIV not yet implemented."
	097 NotImplemented "Instruction INVALID not yet implemented."
	098 NotImplemented "Instruction FADDP not yet implemented."
	099 Multiply S3, S10, S1
	100 Add S2, S3, S2
	101 NotImplemented "Instruction FCMP not yet implemented."
	102 Move W8, [X26+1923]
	103 Compare W8, 0
	104 JumpIfNotEqual {110}
	105 Move X0, 0x5A9000
	106 Move X0, [X0+1440]
	107 Call 0x1C17CF4
	108 Move W8, 1
	109 Move [X26+1923], W8
	110 Move X8, [X25]
	111 Move X8, [X8+184]
	112 Move V0, [X8]
	113 Move V1, [X8+8]
	114 Add V0, V9, V0
	115 Add S1, S8, S1
	116 NotImplemented "Instruction LDRSW not yet implemented."
	117 Move X9, [X19+272]
	118 Move [X19+168], D0
	119 Move [X19+176], S1
	120 Move W10, [X24+8]
	121 Move X11, [X24]
	122 Move W12, 12
	123 NotImplemented "Instruction MADD not yet implemented."
	124 Move [X8+8], W10
	125 Move [X8], X11
	126 Move W8, [X19+192]
	127 Add W8, W8, 1
	128 Move [X19+288], W8
	129 Move W8, [X19+137]
	130 And W8, W23, W8
	131 Move TEMP, X8
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfNotEqual {280}
	135 Move TEMP, X22
	136 And TEMP, TEMP, 1
	137 Compare TEMP, 1
	138 JumpIfEqual {280}
	139 NotImplemented "Instruction LDRSW not yet implemented."
	140 Move X8, [X19+272]
	141 Move S0, [X20]
	142 Move S1, [X20+4]
	143 Move W9, 12
	144 Move X10, X21
	145 NotImplemented "Instruction MADD not yet implemented."
	146 Move V3, V0
	147 Move X9, X11
	148 Move V2, [X20+8]
	149 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	150 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	151 Compare W12, 0
	152 JumpIfEqual {176}
	153 Move V5, V1
	154 Add X12, X21, 8
	155 Add X11, X11, 8
	156 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	157 Move V7, V2
	158 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	159 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	160 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	161 Subtract V3, V3, V4
	162 Subtract V4, V5, V6
	163 NotImplemented "Instruction INVALID not yet implemented."
	164 Subtract V5, V7, V16
	165 NotImplemented "Instruction INVALID not yet implemented."
	166 Add V3, V3, V4
	167 NotImplemented "Instruction INVALID not yet implemented."
	168 Add V3, V4, V3
	169 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	170 NotImplemented "Instruction INVALID not yet implemented."
	171 Move W9, S3
	172 Move TEMP, X9
	173 And TEMP, TEMP, 1
	174 Compare TEMP, 1
	175 JumpIfNotEqual {280}
	176 NotImplemented "Instruction LDRSW not yet implemented."
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Move S3, [X8+12]
	179 Move S4, [X8+16]
	180 Move V5, [X8+20]
	181 Add X11, X8, 32
	182 Move W10, 2
	183 Subtract S3, S3, S0
	184 Subtract S4, S4, S1
	185 Subtract S5, S5, S2
	186 Multiply S3, S3, S3
	187 Multiply S4, S4, S4
	188 Multiply S5, S5, S5
	189 Add S3, S3, S4
	190 Add S3, S5, S3
	191 Move S4, [X11-8]
	192 Move S5, [X11-4]
	193 Move V6, [X11]
	194 Move V7, V3
	195 Subtract S3, S4, S0
	196 Subtract S4, S5, S1
	197 Subtract S5, S6, S2
	198 Multiply S3, S3, S3
	199 Multiply S4, S4, S4
	200 Add S3, S3, S4
	201 Multiply S4, S5, S5
	202 Add S3, S4, S3
	203 NotImplemented "Instruction FCMP not yet implemented."
	204 Add X10, X10, 1
	205 NotImplemented "Instruction CMP not yet implemented."
	206 Add X11, X11, 12
	207 Subtract W9, W10, 1
	208 Move W9, 1
	209 Add W10, W9, 1
	210 Move [X19+192], W9
	211 Move [X19+288], W10
	212 Move X10, [X20]
	213 Move W11, [X20+8]
	214 Move X20, X19
	215 Move [X20+168], X10
	216 Move W10, [X20+244]
	217 Move [X20+8], W11
	218 Compare W10, 0
	219 JumpIfNotEqual {274}
	220 Move W10, 12
	221 Move X21, 0x88E000
	222 NotImplemented "Instruction SMADDL not yet implemented."
	223 Move V8, [X19+168]
	224 Move W9, [X21+1925]
	225 NotImplemented "Instruction LDUR not yet implemented."
	226 NotImplemented "Instruction LDUR not yet implemented."
	227 Move V11, [X19+176]
	228 Compare W9, 0
	229 JumpIfNotEqual {235}
	230 Move X0, 0x5A9000
	231 Move X0, [X0+1448]
	232 Call 0x1C17CF4
	233 Move W8, 1
	234 Move [X21+1925], W8
	235 Move X8, 0x5A9000
	236 Move X8, [X8+1448]
	237 Subtract V9, V9, V8
	238 Subtract S8, S10, S11
	239 Move X0, [X8]
	240 Move W8, [X0+224]
	241 Compare W8, 0
	242 JumpIfNotEqual {244}
	243 Call 0x1C17DFC
	244 Move X8, -50724864
	245 NotImplemented "Instruction INVALID not yet implemented."
	246 Move V2, [X8+380]
	247 NotImplemented "Instruction FADDP not yet implemented."
	248 Multiply S1, S8, S8
	249 Add S0, S1, S0
	250 NotImplemented "Instruction FSQRT not yet implemented."
	251 NotImplemented "Instruction FCMP not yet implemented."
	252 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	253 NotImplemented "Instruction INVALID not yet implemented."
	254 NotImplemented "Instruction FDIV not yet implemented."
	255 Move X21, 0x88E000
	256 Move W8, [X21+1923]
	257 Compare W8, 0
	258 JumpIfNotEqual {264}
	259 Move X0, 0x5A9000
	260 Move X0, [X0+1440]
	261 Call 0x1C17CF4
	262 Move W8, 1
	263 Move [X21+1923], W8
	264 Move X8, 0x5A9000
	265 Move X8, [X8+1440]
	266 Move X8, [X8]
	267 Move X8, [X8+184]
	268 Move V0, [X8]
	269 Move V1, [X8+8]
	270 Move W9, [X19+192]
	271 Move X8, [X19+272]
	272 Move [X19+180], D0
	273 Move [X19+188], S1
	274 Move W10, [X20+8]
	275 Move X11, [X20]
	276 Move W12, 12
	277 NotImplemented "Instruction SMADDL not yet implemented."
	278 Move [X8+8], W10
	279 Move [X8], X11
	280 Move X20, [X31+112]
	281 Move X19, [X31+120]
	282 Move X22, [X31+96]
	283 Move X21, [X31+104]
	284 Move X24, [X31+80]
	285 Move X23, [X31+88]
	286 Move X26, [X31+64]
	287 Move X25, [X31+72]
	288 Move X30, [X31+48]
	289 Move D9, [X31+32]
	290 Move D8, [X31+40]
	291 Move D11, [X31+16]
	292 Move D10, [X31+24]
	293 Move D13, [X31+128]
	294 Move D12, [X31+136]
	295 Return 

Method: System.Void FindClosestInteractableAttachPoint(in UnityEngine.Vector3 lineOrigin, out UnityEngine.Vector3 closestPoint)

Disassembly:
	0x03B4B658 MOVI V0.2D, 0x0
	0x03B4B65C MOVZ W2, 0x50
	0x03B4B660 STR W8, [X23]
	0x03B4B664 LDR X23, [X25]
	0x03B4B668 STR X31, [X31 + 0x50]
	0x03B4B66C STP V0, V0, [X31 + 0x30]
	0x03B4B670 STP V0, V0, [X31 + 0x10]
	0x03B4B674 STR V0, [X31]
	0x03B4B678 BL 0x3EB1AC0
	0x03B4B67C ADD X0, X31, 0x0
	0x03B4B680 ADD X1, X31, 0x90
	0x03B4B684 MOV X2, X23
	0x03B4B688 BL 0x2438B78
	0x03B4B68C ADD X1, X31, 0x0
	0x03B4B690 MOVZ W2, 0x58
	0x03B4B694 MOV X0, X22
	0x03B4B698 BL 0x3EB1AC0
	0x03B4B69C LDR W8, [X21 + 0x3B0]
	0x03B4B6A0 LDP X24, X23, [X31 + 0x110]
	0x03B4B6A4 LDP X26, X25, [X31 + 0x100]
	0x03B4B6A8 LDP X30, X27, [X31 + 0xF0]
	0x03B4B6AC STR W8, [X20]
	0x03B4B6B0 LDRB W8, [X21 + 0x458]
	0x03B4B6B4 LDR X29, [X31 + 0xE0]
	0x03B4B6B8 STRB W8, [X19]
	0x03B4B6BC LDRB W0, [X21 + 0x3D8]
	0x03B4B6C0 LDP X20, X19, [X31 + 0x130]
	0x03B4B6C4 LDP X22, X21, [X31 + 0x120]
	0x03B4B6C8 ADD X31, X31, 0x140
	0x03B4B6CC RET
	0x03B4B6D0 STR X30, [X31 - 0x20]!
	0x03B4B6D4 STP X20, X19, [X31 + 0x10]
	0x03B4B6D8 ADRP X20, 0x897000
	0x03B4B6DC LDRB W8, [X20 + 0x902]
	0x03B4B6E0 MOV X19, X0
	0x03B4B6E4 TBNZ X8, 0x0, 0x3B4B6FC
	0x03B4B6E8 ADRP X0, 0x60F000
	0x03B4B6EC LDR X0, [X0 + 0xA60]
	0x03B4B6F0 BL 0x1C16CF4
	0x03B4B6F4 MOVZ W8, 0x1
	0x03B4B6F8 STRB W8, [X20 + 0x902]
	0x03B4B6FC LDR X0, [X19 + 0xA8]
	0x03B4B700 CBZ X0, 0x3B4B728
	0x03B4B704 ADRP X8, 0x60F000
	0x03B4B708 LDR X8, [X8 + 0xA60]
	0x03B4B70C LDR X1, [X8]
	0x03B4B710 BL 0x2D57B54
	0x03B4B714 LDP X20, X19, [X31 + 0x10]
	0x03B4B718 CMP W0, 0x0
	0x03B4B71C CSET W0, GT
	0x03B4B720 LDR X30, [X31], #0x20
	0x03B4B724 RET
	0x03B4B728 BL 0x1C16F20
	0x03B4B72C STR D8, [X31 - 0x50]!
	0x03B4B730 STP X30, X25, [X31 + 0x10]
	0x03B4B734 STP X24, X23, [X31 + 0x20]
	0x03B4B738 STP X22, X21, [X31 + 0x30]
	0x03B4B73C STP X20, X19, [X31 + 0x40]
	0x03B4B740 ADRP X24, 0x897000
	0x03B4B744 ADRP X25, 0x5D0000
	0x03B4B748 LDRB W8, [X24 + 0x8CC]
	0x03B4B74C LDR X25, [X25 + 0x848]
	0x03B4B750 MOV X19, X4
	0x03B4B754 MOV X20, X3
	0x03B4B758 MOV X21, X2
	0x03B4B75C MOV X22, X1
	0x03B4B760 MOV V8.16B, V0.16B
	0x03B4B764 MOV W23, W0
	0x03B4B768 TBNZ X8, 0x0, 0x3B4B78C
	0x03B4B76C ADRP X0, 0x5D0000
	0x03B4B770 LDR X0, [X0 + 0x848]
	0x03B4B774 BL 0x1C16CF4
	0x03B4B778 ADRP X0, 0x60F000
	0x03B4B77C LDR X0, [X0 + 0xA18]
	0x03B4B780 BL 0x1C16CF4
	0x03B4B784 MOVZ W8, 0x1
	0x03B4B788 STRB W8, [X24 + 0x8CC]
	0x03B4B78C LDR X0, [X25]
	0x03B4B790 LDR W8, [X0 + 0xE0]
	0x03B4B794 CBNZ W8, 0x3B4B79C
	0x03B4B798 BL 0x1C16DFC
	0x03B4B79C MOV X0, X31
	0x03B4B7A0 BL 0x36FA670
	0x03B4B7A4 TBZ X0, 0x0, 0x3B4B7FC
	0x03B4B7A8 ADRP X8, 0x60F000
	0x03B4B7AC LDR X8, [X8 + 0xA18]
	0x03B4B7B0 LDR X0, [X8]
	0x03B4B7B4 LDR W8, [X0 + 0xE0]
	0x03B4B7B8 CBNZ W8, 0x3B4B7C0
	0x03B4B7BC BL 0x1C16DFC
	0x03B4B7C0 BL 0x3B4CB5C
	0x03B4B7C4 CBZ X0, 0x3B4B7FC
	0x03B4B7C8 MOV X5, X0
	0x03B4B7CC MOV W0, W23
	0x03B4B7D0 MOV X1, X22
	0x03B4B7D4 MOV X2, X21
	0x03B4B7D8 MOV X3, X20
	0x03B4B7DC MOV X4, X19
	0x03B4B7E0 LDP X20, X19, [X31 + 0x40]
	0x03B4B7E4 LDP X22, X21, [X31 + 0x30]
	0x03B4B7E8 LDP X24, X23, [X31 + 0x20]
	0x03B4B7EC LDP X30, X25, [X31 + 0x10]
	0x03B4B7F0 MOV V0.16B, V8.16B
	0x03B4B7F4 LDR V8, [X31], #0x50
	0x03B4B7F8 BR X5
	0x03B4B7FC MOV W0, W23
	0x03B4B800 MOV X1, X22
	0x03B4B804 MOV X2, X21
	0x03B4B808 MOV X3, X20
	0x03B4B80C MOV X4, X19
	0x03B4B810 LDP X20, X19, [X31 + 0x40]
	0x03B4B814 LDP X22, X21, [X31 + 0x30]
	0x03B4B818 LDP X24, X23, [X31 + 0x20]
	0x03B4B81C LDP X30, X25, [X31 + 0x10]
	0x03B4B820 MOV V0.16B, V8.16B
	0x03B4B824 MOV X5, X31
	0x03B4B828 LDR V8, [X31], #0x50
	0x03B4B82C B 0x3B64BC8
	0x03B4B830 STP D9, D8, [X31 - 0x60]!
	0x03B4B834 STP X30, X27, [X31 + 0x10]
	0x03B4B838 STP X26, X25, [X31 + 0x20]
	0x03B4B83C STP X24, X23, [X31 + 0x30]
	0x03B4B840 STP X22, X21, [X31 + 0x40]
	0x03B4B844 STP X20, X19, [X31 + 0x50]
	0x03B4B848 ADRP X26, 0x897000
	0x03B4B84C ADRP X27, 0x5D0000
	0x03B4B850 LDRB W8, [X26 + 0x8D1]
	0x03B4B854 LDR X27, [X27 + 0x848]
	0x03B4B858 MOV X19, X6
	0x03B4B85C MOV X20, X5
	0x03B4B860 MOV X21, X4
	0x03B4B864 MOV V8.16B, V1.16B
	0x03B4B868 MOV W23, W3
	0x03B4B86C MOV W25, W2
	0x03B4B870 MOV V9.16B, V0.16B
	0x03B4B874 MOV W22, W1
	0x03B4B878 MOV W24, W0
	0x03B4B87C TBNZ X8, 0x0, 0x3B4B8A0
	0x03B4B880 ADRP X0, 0x5D0000
	0x03B4B884 LDR X0, [X0 + 0x848]
	0x03B4B888 BL 0x1C16CF4
	0x03B4B88C ADRP X0, 0x60F000
	0x03B4B890 LDR X0, [X0 + 0xA28]
	0x03B4B894 BL 0x1C16CF4
	0x03B4B898 MOVZ W8, 0x1
	0x03B4B89C STRB W8, [X26 + 0x8D1]
	0x03B4B8A0 LDR X0, [X27]
	0x03B4B8A4 LDR W8, [X0 + 0xE0]
	0x03B4B8A8 CBNZ W8, 0x3B4B8B0
	0x03B4B8AC BL 0x1C16DFC
	0x03B4B8B0 MOV X0, X31
	0x03B4B8B4 BL 0x36FA670
	0x03B4B8B8 TBZ X0, 0x0, 0x3B4B920
	0x03B4B8BC ADRP X8, 0x60F000
	0x03B4B8C0 LDR X8, [X8 + 0xA28]
	0x03B4B8C4 LDR X0, [X8]
	0x03B4B8C8 LDR W8, [X0 + 0xE0]
	0x03B4B8CC CBNZ W8, 0x3B4B8D4
	0x03B4B8D0 BL 0x1C16DFC
	0x03B4B8D4 BL 0x3B4CFFC
	0x03B4B8D8 CBZ X0, 0x3B4B920
	0x03B4B8DC MOV X7, X0
	0x03B4B8E0 AND W2, W25, 0x1
	0x03B4B8E4 AND W3, W23, 0x1
	0x03B4B8E8 MOV W0, W24
	0x03B4B8EC MOV W1, W22
	0x03B4B8F0 MOV X4, X21
	0x03B4B8F4 MOV X5, X20
	0x03B4B8F8 MOV X6, X19

ISIL:
	001 Move [X31-96], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x898000
	013 Move W8, [X22+2231]
	014 Move X19, X2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0x610000
	022 Move X0, [X0+2264]
	023 Call 0x1C17CF4
	024 Move X0, 0x610000
	025 Move X0, [X0+808]
	026 Call 0x1C17CF4
	027 Move X0, 0x610000
	028 Move X0, [X0+2368]
	029 Call 0x1C17CF4
	030 Move X0, 0x610000
	031 Move X0, [X0+2376]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+2231], W8
	035 Move X22, [X21+240]
	036 Compare X22, 0
	037 JumpIfEqual {186}
	038 Move X10, 0x610000
	039 Move X8, [X22]
	040 Move X10, [X10+808]
	041 NotImplemented "Instruction LDRH not yet implemented."
	042 Move X1, [X10]
	043 Compare X9, 0
	044 JumpIfEqual {51}
	045 Move X10, [X8+176]
	046 Add X10, X10, 8
	047 NotImplemented "Instruction LDUR not yet implemented."
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Subtract X9, X9, 1
	050 Add X10, X10, 16
	051 Move W2, 2
	052 Move X0, X22
	053 Call 0x1C5D788
	054 Move W9, [X10]
	055 Add W9, W9, 2
	056 Add X8, X8, W9
	057 Add X0, X8, 312
	058 Move X8, [X0]
	059 Move X1, [X0+8]
	060 Move X0, X22
	061 NotImplemented "Instruction BLR not yet implemented."
	062 Compare X0, 0
	063 JumpIfEqual {186}
	064 Move X26, 0x610000
	065 Move X26, [X26+2376]
	066 Move W1, W31
	067 Move X22, X0
	068 Move X2, [X26]
	069 Call List`1<Object>.get_Item, X0, X1
	070 Compare X0, 0
	071 JumpIfEqual {186}
	072 Move X27, 0x610000
	073 Move X8, [X0]
	074 Move X27, [X27+2264]
	075 Move X24, [X21+240]
	076 Move X23, X0
	077 NotImplemented "Instruction LDRH not yet implemented."
	078 Move X1, [X27]
	079 Compare X9, 0
	080 JumpIfEqual {87}
	081 Move X10, [X8+176]
	082 Add X10, X10, 8
	083 NotImplemented "Instruction LDUR not yet implemented."
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Subtract X9, X9, 1
	086 Add X10, X10, 16
	087 Move W2, 7
	088 Move X0, X23
	089 Call 0x1C5D788
	090 Move W9, [X10]
	091 Add W9, W9, 7
	092 Add X8, X8, W9
	093 Add X0, X8, 312
	094 Move X8, [X0]
	095 Move X2, [X0+8]
	096 Move X0, X23
	097 Move X1, X24
	098 NotImplemented "Instruction BLR not yet implemented."
	099 Compare X0, 0
	100 JumpIfEqual {186}
	101 Move X1, X31
	102 Call Transform.get_position, X0
	103 Move [X19], S0
	104 Move [X19+8], S1
	105 Move [X19+8], S2
	106 Move W8, [X22+24]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move S3, [X20]
	109 Move S4, [X20+4]
	110 Move V5, [X20+8]
	111 Move W23, 1
	112 Subtract S0, S0, S3
	113 Subtract S1, S1, S4
	114 Subtract S2, S2, S5
	115 Multiply S0, S0, S0
	116 Multiply S1, S1, S1
	117 Multiply S2, S2, S2
	118 Add S0, S0, S1
	119 Add S8, S2, S0
	120 Move X2, [X26]
	121 Move X0, X22
	122 Move W1, W23
	123 Call List`1<Object>.get_Item, X0, X1
	124 Compare X0, 0
	125 JumpIfEqual {186}
	126 Move X8, [X0]
	127 Move X25, [X21+240]
	128 Move X1, [X27]
	129 Move X24, X0
	130 NotImplemented "Instruction LDRH not yet implemented."
	131 Compare X9, 0
	132 JumpIfEqual {139}
	133 Move X10, [X8+176]
	134 Add X10, X10, 8
	135 NotImplemented "Instruction LDUR not yet implemented."
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Subtract X9, X9, 1
	138 Add X10, X10, 16
	139 Move W2, 7
	140 Move X0, X24
	141 Call 0x1C5D788
	142 Move W9, [X10]
	143 Add W9, W9, 7
	144 Add X8, X8, W9
	145 Add X0, X8, 312
	146 Move X8, [X0]
	147 Move X2, [X0+8]
	148 Move X0, X24
	149 Move X1, X25
	150 NotImplemented "Instruction BLR not yet implemented."
	151 Compare X0, 0
	152 JumpIfEqual {186}
	153 Move X1, X31
	154 Call Transform.get_position, X0
	155 Move S3, [X20]
	156 Move S4, [X20+4]
	157 Move V5, [X20+8]
	158 Subtract S3, S0, S3
	159 Subtract S4, S1, S4
	160 Subtract S5, S2, S5
	161 Multiply S3, S3, S3
	162 Multiply S4, S4, S4
	163 Add S3, S3, S4
	164 Multiply S4, S5, S5
	165 Add S3, S4, S3
	166 NotImplemented "Instruction FCMP not yet implemented."
	167 Move V8, V3
	168 Move [X19], S0
	169 Move [X19+8], S1
	170 Move [X19+8], S2
	171 Move W8, [X22+24]
	172 Add W23, W23, 1
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Move X20, [X31+80]
	175 Move X19, [X31+88]
	176 Move X22, [X31+64]
	177 Move X21, [X31+72]
	178 Move X24, [X31+48]
	179 Move X23, [X31+56]
	180 Move X26, [X31+32]
	181 Move X25, [X31+40]
	182 Move X30, [X31+16]
	183 Move X27, [X31+24]
	184 Move V8, [X31+96]
	185 Return 
	186 Call 0x1C17F20

Method: System.Boolean EnsureSize(ref Unity.Collections.NativeArray`1<UnityEngine.Vector3> array, System.Int32 targetSize)

Disassembly:
	0x03B4B8FC LDP X20, X19, [X31 + 0x50]
	0x03B4B900 LDP X22, X21, [X31 + 0x40]
	0x03B4B904 LDP X24, X23, [X31 + 0x30]
	0x03B4B908 LDP X26, X25, [X31 + 0x20]
	0x03B4B90C LDP X30, X27, [X31 + 0x10]
	0x03B4B910 MOV V0.16B, V9.16B
	0x03B4B914 MOV V1.16B, V8.16B
	0x03B4B918 LDP D9, D8, [X31], #0x60
	0x03B4B91C BR X7
	0x03B4B920 AND W2, W25, 0x1
	0x03B4B924 AND W3, W23, 0x1
	0x03B4B928 MOV W0, W24
	0x03B4B92C MOV W1, W22
	0x03B4B930 MOV X4, X21
	0x03B4B934 MOV X5, X20
	0x03B4B938 MOV X6, X19
	0x03B4B93C LDP X20, X19, [X31 + 0x50]
	0x03B4B940 LDP X22, X21, [X31 + 0x40]
	0x03B4B944 LDP X24, X23, [X31 + 0x30]
	0x03B4B948 LDP X26, X25, [X31 + 0x20]
	0x03B4B94C LDP X30, X27, [X31 + 0x10]
	0x03B4B950 MOV V0.16B, V9.16B
	0x03B4B954 MOV V1.16B, V8.16B
	0x03B4B958 MOV X7, X31
	0x03B4B95C LDP D9, D8, [X31], #0x60
	0x03B4B960 B 0x3B64CB4
	0x03B4B964 STR D8, [X31 - 0x50]!
	0x03B4B968 STP X30, X25, [X31 + 0x10]
	0x03B4B96C STP X24, X23, [X31 + 0x20]
	0x03B4B970 STP X22, X21, [X31 + 0x30]
	0x03B4B974 STP X20, X19, [X31 + 0x40]
	0x03B4B978 ADRP X24, 0x897000
	0x03B4B97C ADRP X25, 0x60F000
	0x03B4B980 LDRB W8, [X24 + 0x8BD]
	0x03B4B984 LDR X25, [X25 + 0xA68]
	0x03B4B988 MOV X19, X4
	0x03B4B98C MOV X20, X3
	0x03B4B990 MOV X21, X2
	0x03B4B994 MOV X22, X1
	0x03B4B998 MOV W23, W0
	0x03B4B99C MOV V8.16B, V0.16B
	0x03B4B9A0 TBNZ X8, 0x0, 0x3B4B9B8
	0x03B4B9A4 ADRP X0, 0x60F000
	0x03B4B9A8 LDR X0, [X0 + 0xA68]
	0x03B4B9AC BL 0x1C16CF4
	0x03B4B9B0 MOVZ W8, 0x1
	0x03B4B9B4 STRB W8, [X24 + 0x8BD]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x898000
	007 Move W8, [X21+2232]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x5D4000
	015 Move X0, [X0+504]
	016 Call 0x1C17CF4
	017 Move X0, 0x5D4000
	018 Move X0, [X0+496]
	019 Call 0x1C17CF4
	020 Move X0, 0x610000
	021 Move X0, [X0+2480]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2232], W8
	025 Move X8, [X19]
	026 Compare X8, 0
	027 JumpIfEqual {35}
	028 Move W8, [X19+8]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, 0x5D4000
	031 Move X8, [X8+504]
	032 Move X0, X19
	033 Move X1, [X8]
	034 Call NativeArray`1<Vector3>.Dispose, X0
	035 Move X8, 0x5D4000
	036 Move X8, [X8+496]
	037 Add X0, X31, 0
	038 Move W2, 4
	039 Move W3, 1
	040 Move X4, [X8]
	041 Move W1, W20
	042 Move [X31], X31
	043 Move [X31+8], X31
	044 Call NativeArray`1<Vector3>..ctor, X0, X1, X2, X3
	045 Move V0, [X31]
	046 Move W0, W31
	047 Move [X19], V0
	048 Move W0, 1
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X30, [X31+16]
	052 Move X21, [X31+24]
	053 Add X31, X31, 48
	054 Return X0

Method: System.Void GetLineOriginAndDirection(ref Unity.Collections.NativeArray`1<UnityEngine.Vector3> targetPoints, System.Int32 numTargetPoints, System.Boolean isLineStraight, out UnityEngine.Vector3 lineOrigin, out UnityEngine.Vector3 lineDirection)

Disassembly:
	0x03B4B030 CBZ X0, 0x3B4B064
	0x03B4B034 ADRP X8, 0x60F000
	0x03B4B038 LDR X8, [X8 + 0xA20]
	0x03B4B03C LDP X20, X19, [X31 + 0x70]
	0x03B4B040 LDP X22, X21, [X31 + 0x60]
	0x03B4B044 LDP X24, X23, [X31 + 0x50]
	0x03B4B048 LDR X1, [X8]
	0x03B4B04C LDR X30, [X31 + 0x40]
	0x03B4B050 LDP D9, D8, [X31 + 0x30]
	0x03B4B054 LDP D11, D10, [X31 + 0x20]
	0x03B4B058 LDP D13, D12, [X31 + 0x10]
	0x03B4B05C LDP D15, D14, [X31], #0x80
	0x03B4B060 B 0x2709E10
	0x03B4B064 BL 0x1C16F20
	0x03B4B068 STP D9, D8, [X31 - 0x60]!
	0x03B4B06C STP X30, X27, [X31 + 0x10]
	0x03B4B070 STP X26, X25, [X31 + 0x20]
	0x03B4B074 STP X24, X23, [X31 + 0x30]
	0x03B4B078 STP X22, X21, [X31 + 0x40]
	0x03B4B07C STP X20, X19, [X31 + 0x50]
	0x03B4B080 ADRP X26, 0x897000
	0x03B4B084 ADRP X27, 0x60F000
	0x03B4B088 LDRB W8, [X26 + 0x8BC]
	0x03B4B08C LDR X27, [X27 + 0xA28]
	0x03B4B090 MOV X19, X6
	0x03B4B094 MOV X20, X5
	0x03B4B098 MOV X21, X4
	0x03B4B09C MOV V8.16B, V1.16B
	0x03B4B0A0 MOV W22, W3
	0x03B4B0A4 MOV W24, W2
	0x03B4B0A8 MOV V9.16B, V0.16B
	0x03B4B0AC MOV W23, W1
	0x03B4B0B0 MOV W25, W0
	0x03B4B0B4 TBNZ X8, 0x0, 0x3B4B0CC
	0x03B4B0B8 ADRP X0, 0x60F000
	0x03B4B0BC LDR X0, [X0 + 0xA28]
	0x03B4B0C0 BL 0x1C16CF4
	0x03B4B0C4 MOVZ W8, 0x1
	0x03B4B0C8 STRB W8, [X26 + 0x8BC]
	0x03B4B0CC LDR X0, [X27]
	0x03B4B0D0 LDR W8, [X0 + 0xE0]
	0x03B4B0D4 CBNZ W8, 0x3B4B0DC
	0x03B4B0D8 BL 0x1C16DFC
	0x03B4B0DC AND W2, W24, 0x1
	0x03B4B0E0 AND W3, W22, 0x1
	0x03B4B0E4 MOV W0, W25
	0x03B4B0E8 MOV W1, W23
	0x03B4B0EC MOV X4, X21
	0x03B4B0F0 MOV X5, X20
	0x03B4B0F4 MOV X6, X19
	0x03B4B0F8 LDP X20, X19, [X31 + 0x50]
	0x03B4B0FC LDP X22, X21, [X31 + 0x40]
	0x03B4B100 LDP X24, X23, [X31 + 0x30]
	0x03B4B104 LDP X26, X25, [X31 + 0x20]
	0x03B4B108 LDP X30, X27, [X31 + 0x10]
	0x03B4B10C MOV V0.16B, V9.16B
	0x03B4B110 MOV V1.16B, V8.16B
	0x03B4B114 LDP D9, D8, [X31], #0x60
	0x03B4B118 B 0x3B4B830
	0x03B4B11C STR X30, [X31 - 0x20]!
	0x03B4B120 STP X20, X19, [X31 + 0x10]
	0x03B4B124 ADRP X20, 0x897000
	0x03B4B128 LDRB W8, [X20 + 0x900]
	0x03B4B12C MOV X19, X0
	0x03B4B130 TBNZ X8, 0x0, 0x3B4B148
	0x03B4B134 ADRP X0, 0x60F000
	0x03B4B138 LDR X0, [X0 + 0xA30]
	0x03B4B13C BL 0x1C16CF4
	0x03B4B140 MOVZ W8, 0x1
	0x03B4B144 STRB W8, [X20 + 0x900]
	0x03B4B148 LDR X0, [X19 + 0xA0]
	0x03B4B14C CBZ X0, 0x3B4B174
	0x03B4B150 ADRP X8, 0x60F000
	0x03B4B154 LDR X8, [X8 + 0xA30]
	0x03B4B158 LDR X1, [X8]
	0x03B4B15C BL 0x2D57B54
	0x03B4B160 LDP X20, X19, [X31 + 0x10]
	0x03B4B164 CMP W0, 0x0
	0x03B4B168 CSET W0, GT
	0x03B4B16C LDR X30, [X31], #0x20
	0x03B4B170 RET
	0x03B4B174 BL 0x1C16F20
	0x03B4B178 STR X30, [X31 - 0x20]!
	0x03B4B17C STP X20, X19, [X31 + 0x10]
	0x03B4B180 ADRP X20, 0x897000
	0x03B4B184 LDRB W8, [X20 + 0x8FF]
	0x03B4B188 MOV X19, X0
	0x03B4B18C TBNZ X8, 0x0, 0x3B4B1B0
	0x03B4B190 ADRP X0, 0x60F000
	0x03B4B194 LDR X0, [X0 + 0xA38]
	0x03B4B198 BL 0x1C16CF4
	0x03B4B19C ADRP X0, 0x60F000
	0x03B4B1A0 LDR X0, [X0 + 0xA40]
	0x03B4B1A4 BL 0x1C16CF4
	0x03B4B1A8 MOVZ W8, 0x1
	0x03B4B1AC STRB W8, [X20 + 0x8FF]
	0x03B4B1B0 LDR X8, [X19 + 0xA0]
	0x03B4B1B4 CBZ X8, 0x3B4B204
	0x03B4B1B8 LDR X0, [X8 + 0x10]
	0x03B4B1BC CBZ X0, 0x3B4B1F4
	0x03B4B1C0 ADRP X9, 0x60F000
	0x03B4B1C4 LDR X9, [X9 + 0xA40]
	0x03B4B1C8 LDR X8, [X0]
	0x03B4B1CC LDR X1, [X9]
	0x03B4B1D0 LDRB W10, [X8 + 0x130]
	0x03B4B1D4 LDRB W9, [X1 + 0x130]
	0x03B4B1D8 CMP W10, W9
	0x03B4B1DC B.CC 0x3B4B200
	0x03B4B1E0 LDR X8, [X8 + 0xC8]
	0x03B4B1E4 ADD X8, X8, X9, 0x3, LSL
	0x03B4B1E8 LDUR X8, [X8 - 0x8]
	0x03B4B1EC CMP X8, X1
	0x03B4B1F0 B.NE 0x3B4B200
	0x03B4B1F4 LDP X20, X19, [X31 + 0x10]
	0x03B4B1F8 LDR X30, [X31], #0x20
	0x03B4B1FC RET
	0x03B4B200 BL 0x1C171E0
	0x03B4B204 BL 0x1C16F20
	0x03B4B208 STR X30, [X31 - 0x10]!
	0x03B4B20C LDRB W8, [X0 + 0x48]
	0x03B4B210 CBZ W8, 0x3B4B228
	0x03B4B214 LDR X0, [X0 + 0xD0]
	0x03B4B218 CBZ X0, 0x3B4B230
	0x03B4B21C MOV X2, X31
	0x03B4B220 LDR X30, [X31], #0x10
	0x03B4B224 B 0x3C118B4
	0x03B4B228 LDR X30, [X31], #0x10
	0x03B4B22C RET
	0x03B4B230 BL 0x1C16F20
	0x03B4B234 SUB X31, X31, 0x80
	0x03B4B238 STR D10, [X31 + 0x40]
	0x03B4B23C STP D9, D8, [X31 + 0x48]
	0x03B4B240 STR X30, [X31 + 0x58]
	0x03B4B244 STP X22, X21, [X31 + 0x60]
	0x03B4B248 STP X20, X19, [X31 + 0x70]
	0x03B4B24C ADRP X21, 0x897000
	0x03B4B250 ADRP X22, 0x5A8000
	0x03B4B254 LDRB W8, [X21 + 0x8BF]
	0x03B4B258 LDR X22, [X22 + 0x598]
	0x03B4B25C MOV W20, W1
	0x03B4B260 MOV X19, X0
	0x03B4B264 TBNZ X8, 0x0, 0x3B4B2A0
	0x03B4B268 ADRP X0, 0x60F000
	0x03B4B26C LDR X0, [X0 + 0xA48]
	0x03B4B270 BL 0x1C16CF4
	0x03B4B274 ADRP X0, 0x5AB000
	0x03B4B278 LDR X0, [X0 + 0xDD8]
	0x03B4B27C BL 0x1C16CF4
	0x03B4B280 ADRP X0, 0x5B2000
	0x03B4B284 LDR X0, [X0 + 0xB60]
	0x03B4B288 BL 0x1C16CF4
	0x03B4B28C ADRP X0, 0x5A8000
	0x03B4B290 LDR X0, [X0 + 0x598]
	0x03B4B294 BL 0x1C16CF4
	0x03B4B298 MOVZ W8, 0x1
	0x03B4B29C STRB W8, [X21 + 0x8BF]
	0x03B4B2A0 STR W31, [X31 + 0x38]
	0x03B4B2A4 STP X31, X31, [X31 + 0x28]
	0x03B4B2A8 STP X31, X31, [X31 + 0x18]
	0x03B4B2AC STR X31, [X31 + 0x10]
	0x03B4B2B0 STR W31, [X31 + 0x8]
	0x03B4B2B4 STR X31, [X31]
	0x03B4B2B8 LDRB W9, [X19 + 0x170]
	0x03B4B2BC ADD X8, X19, 0x80
	0x03B4B2C0 ADD X10, X19, 0x78
	0x03B4B2C4 ANDS W31, W20, 0x1
	0x03B4B2C8 CSEL X8, X8, X10, NE
	0x03B4B2CC ADD X10, X19, 0x168
	0x03B4B2D0 CMP W9, 0x0
	0x03B4B2D4 CSEL X8, X8, X10, EQ
	0x03B4B2D8 LDR X8, [X8]
	0x03B4B2DC LDR X20, [X19 + 0xC8]
	0x03B4B2E0 STR X8, [X19 + 0xC8]
	0x03B4B2E4 LDR X0, [X22]
	0x03B4B2E8 LDR W8, [X0 + 0xE0]
	0x03B4B2EC CBNZ W8, 0x3B4B2F4
	0x03B4B2F0 BL 0x1C16DFC
	0x03B4B2F4 MOV X0, X20
	0x03B4B2F8 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X25, 0x898000
	015 Move W8, [X25+2233]
	016 Move X21, X5
	017 Move X19, X4
	018 Move W23, W3
	019 Move W24, W2
	020 Move X20, X1
	021 Move X22, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {34}
	026 Move X0, 0x610000
	027 Move X0, [X0+2416]
	028 Call 0x1C17CF4
	029 Move X0, 0x5A9000
	030 Move X0, [X0+1432]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X25+2233], W8
	034 Move W8, [X22+144]
	035 Compare W8, 0
	036 JumpIfEqual {73}
	037 Move X8, 0x5A9000
	038 Move X8, [X8+1432]
	039 Move X25, [X22+152]
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X25
	046 Move X1, X31
	047 Move X2, X31
	048 Call Object.op_Inequality, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {73}
	053 Move X0, [X22+152]
	054 Compare X0, 0
	055 JumpIfEqual {211}
	056 Move X1, X31
	057 Call Transform.get_position, X0
	058 Move [X19], S0
	059 Move [X19+8], S1
	060 Move [X19+8], S2
	061 Move X0, [X22+152]
	062 Compare X0, 0
	063 JumpIfEqual {211}
	064 Move X1, X31
	065 Call Transform.get_forward, X0
	066 Move [X21], S0
	067 Move [X21+8], S1
	068 Move [X21+8], S2
	069 Move TEMP, X23
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfEqual {173}
	073 Move W8, [X22+232]
	074 Compare W8, 0
	075 JumpIfEqual {95}
	076 Move X24, [X22+224]
	077 Compare X24, 0
	078 JumpIfEqual {211}
	079 Move X10, 0x610000
	080 Move X8, [X24]
	081 Move X10, [X10+2416]
	082 NotImplemented "Instruction LDRH not yet implemented."
	083 Move X1, [X10]
	084 Compare X9, 0
	085 JumpIfEqual {92}
	086 Move X10, [X8+176]
	087 Add X10, X10, 8
	088 NotImplemented "Instruction LDUR not yet implemented."
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Subtract X9, X9, 1
	091 Add X10, X10, 16
	092 Move W2, 1
	093 Move X0, X24
	094 Call 0x1C5D788
	095 Move X8, [X20]
	096 Subtract W10, W24, 1
	097 Move W11, 12
	098 Move X24, 0x88E000
	099 Move W9, [X8+8]
	100 Move X8, [X8]
	101 Move [X19+8], W9
	102 Move [X19], X8
	103 Move X8, [X20]
	104 Move V8, [X19]
	105 Move W9, [X24+1925]
	106 Move V11, [X19+8]
	107 NotImplemented "Instruction NOP not yet implemented."
	108 NotImplemented "Instruction SMADDL not yet implemented."
	109 Move V9, [X8]
	110 Move V10, [X8+8]
	111 Compare W9, 0
	112 JumpIfNotEqual {118}
	113 Move X0, 0x5A9000
	114 Move X0, [X0+1448]
	115 Call 0x1C17CF4
	116 Move W8, 1
	117 Move [X24+1925], W8
	118 Move X8, 0x5A9000
	119 Move X8, [X8+1448]
	120 Subtract V9, V9, V8
	121 Subtract S8, S10, S11
	122 Move X0, [X8]
	123 Move W8, [X0+224]
	124 Compare W8, 0
	125 JumpIfNotEqual {127}
	126 Call 0x1C17DFC
	127 Move X8, -50724864
	128 NotImplemented "Instruction INVALID not yet implemented."
	129 Move V2, [X8+380]
	130 NotImplemented "Instruction FADDP not yet implemented."
	131 Multiply S1, S8, S8
	132 Add S0, S1, S0
	133 NotImplemented "Instruction FSQRT not yet implemented."
	134 NotImplemented "Instruction FCMP not yet implemented."
	135 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	136 NotImplemented "Instruction INVALID not yet implemented."
	137 NotImplemented "Instruction FDIV not yet implemented."
	138 Move W9, [X10]
	139 Add W9, W9, 1
	140 Add X8, X8, W9
	141 Add X0, X8, 312
	142 Move X8, [X0]
	143 Move X3, [X0+8]
	144 Move X0, X24
	145 Move X1, X19
	146 Move X2, X21
	147 NotImplemented "Instruction BLR not yet implemented."
	148 Move TEMP, X23
	149 And TEMP, TEMP, 1
	150 Compare TEMP, 1
	151 JumpIfEqual {173}
	152 Move X24, 0x88E000
	153 Move W8, [X24+1923]
	154 Compare W8, 0
	155 JumpIfNotEqual {161}
	156 Move X0, 0x5A9000
	157 Move X0, [X0+1440]
	158 Call 0x1C17CF4
	159 Move W8, 1
	160 Move [X24+1923], W8
	161 Move X8, 0x5A9000
	162 Move X8, [X8+1440]
	163 Move X8, [X8]
	164 Move X8, [X8+184]
	165 Move V0, [X8]
	166 Move V1, [X8+8]
	167 Move [X21], D0
	168 Move [X21+8], S1
	169 Move TEMP, X23
	170 And TEMP, TEMP, 1
	171 Compare TEMP, 1
	172 JumpIfNotEqual {190}
	173 Move V0, [X22+160]
	174 NotImplemented "Instruction FCMP not yet implemented."
	175 Move W8, [X22+36]
	176 Compare W8, 0
	177 JumpIfEqual {180}
	178 Move V1, [X22+40]
	179 NotImplemented "Instruction FCMP not yet implemented."
	180 Move V1, [X21]
	181 Move V2, [X21+8]
	182 Move V3, [X19]
	183 Move V4, [X19+8]
	184 NotImplemented "Instruction INVALID not yet implemented."
	185 Multiply S0, S0, S2
	186 Add V1, V3, V1
	187 Add S0, S4, S0
	188 Move [X19], D1
	189 Move [X19+8], S0
	190 Move W8, [X19+8]
	191 Move X9, [X19]
	192 Move X22, [X31+80]
	193 Move X21, [X31+88]
	194 Move X24, [X31+64]
	195 Move X23, [X31+72]
	196 Move [X31+8], W8
	197 Move [X31], X9
	198 Move X10, [X20]
	199 Move X20, [X31+96]
	200 Move X19, [X31+104]
	201 Move X30, [X31+48]
	202 Move X25, [X31+56]
	203 Move D9, [X31+32]
	204 Move D8, [X31+40]
	205 Move D11, [X31+16]
	206 Move D10, [X31+24]
	207 Move [X10+8], W8
	208 Move [X10], X9
	209 Add X31, X31, 112
	210 Return 
	211 Call 0x1C17F20

Method: System.Boolean ExtractHitInformation(ref Unity.Collections.NativeArray`1<UnityEngine.Vector3> targetPoints, System.Int32 numTargetPoints, out UnityEngine.Vector3 targetEndPoint, out System.Boolean hitSnapVolume)

Disassembly:
	0x03B4B2FC MOV X2, X31
	0x03B4B300 BL 0x3C354F8
	0x03B4B304 TBZ X0, 0x0, 0x3B4B344
	0x03B4B308 LDR X0, [X22]
	0x03B4B30C LDR X21, [X19 + 0xC8]
	0x03B4B310 LDR W8, [X0 + 0xE0]
	0x03B4B314 CBNZ W8, 0x3B4B31C
	0x03B4B318 BL 0x1C16DFC
	0x03B4B31C MOV X0, X20
	0x03B4B320 MOV X1, X21
	0x03B4B324 MOV X2, X31
	0x03B4B328 BL 0x3C354F8
	0x03B4B32C TBZ X0, 0x0, 0x3B4B344
	0x03B4B330 CBZ X20, 0x3B4B514
	0x03B4B334 MOV X0, X20
	0x03B4B338 MOV W1, W31
	0x03B4B33C MOV X2, X31
	0x03B4B340 BL 0x3C357B4
	0x03B4B344 LDR X0, [X22]
	0x03B4B348 LDR X20, [X19 + 0xC8]
	0x03B4B34C LDR W8, [X0 + 0xE0]
	0x03B4B350 CBNZ W8, 0x3B4B358
	0x03B4B354 BL 0x1C16DFC
	0x03B4B358 MOV X0, X20
	0x03B4B35C MOV X1, X31
	0x03B4B360 MOV X2, X31
	0x03B4B364 BL 0x3C354F8
	0x03B4B368 TBZ X0, 0x0, 0x3B4B4F8
	0x03B4B36C LDR X0, [X19 + 0xC8]
	0x03B4B370 CBZ X0, 0x3B4B514
	0x03B4B374 MOV X1, X31
	0x03B4B378 BL 0x3C356F8
	0x03B4B37C CBZ X0, 0x3B4B514
	0x03B4B380 LDP S1, S2, [X19 + 0xAC]
	0x03B4B384 LDR V0, [X19 + 0xA8]
	0x03B4B388 MOV X1, X31
	0x03B4B38C BL 0x3C3F62C
	0x03B4B390 LDRB W8, [X19 + 0x1BA]
	0x03B4B394 CBZ W8, 0x3B4B404
	0x03B4B398 LDR X0, [X19 + 0xF8]
	0x03B4B39C BL 0x3B482BC
	0x03B4B3A0 ADRP X22, 0x60F000
	0x03B4B3A4 LDR X22, [X22 + 0xA48]
	0x03B4B3A8 LDR X1, [X22]
	0x03B4B3AC BL 0x1C16E00
	0x03B4B3B0 CBZ X0, 0x3B4B404
	0x03B4B3B4 LDR X8, [X0]
	0x03B4B3B8 LDR X21, [X19 + 0xF8]
	0x03B4B3BC LDP S8, S9, [X19 + 0xB4]
	0x03B4B3C0 LDR V10, [X19 + 0xBC]
	0x03B4B3C4 LDRH W9, [X8 + 0x12E]
	0x03B4B3C8 LDR X1, [X22]
	0x03B4B3CC MOV X20, X0
	0x03B4B3D0 CBZ X9, 0x3B4B3F4
	0x03B4B3D4 LDR X10, [X8 + 0xB0]
	0x03B4B3D8 ADD X10, X10, 0x8
	0x03B4B3DC LDUR X11, [X10 - 0x8]
	0x03B4B3E0 CMP X11, X1
	0x03B4B3E4 B.EQ 0x3B4B438
	0x03B4B3E8 SUBS X9, X9, 0x1
	0x03B4B3EC ADD X10, X10, 0x10
	0x03B4B3F0 B.NE 0x3B4B3DC
	0x03B4B3F4 MOV X0, X20
	0x03B4B3F8 MOV W2, W31
	0x03B4B3FC BL 0x1C5C788
	0x03B4B400 B 0x3B4B444
	0x03B4B404 LDR X0, [X19 + 0xC8]
	0x03B4B408 CBZ X0, 0x3B4B514
	0x03B4B40C MOV X1, X31
	0x03B4B410 BL 0x3C356F8
	0x03B4B414 CBZ X0, 0x3B4B514
	0x03B4B418 LDP S1, S0, [X19 + 0xB8]
	0x03B4B41C LDR V3, [X19 + 0xB4]
	0x03B4B420 MOV X1, X31
	0x03B4B424 FNEG S2, S0
	0x03B4B428 FNEG S1, S1
	0x03B4B42C FNEG S0, S3
	0x03B4B430 BL 0x3C3FA80
	0x03B4B434 B 0x3B4B4E4
	0x03B4B438 LDRSW X9, [X10]
	0x03B4B43C ADD X8, X8, X9, 0x4, LSL
	0x03B4B440 ADD X0, X8, 0x138
	0x03B4B444 LDP X8, X4, [X0]
	0x03B4B448 ADD X2, X31, 0x30
	0x03B4B44C ADD X3, X31, 0x20
	0x03B4B450 MOV X0, X20
	0x03B4B454 MOV X1, X21
	0x03B4B458 MOV V0.16B, V8.16B
	0x03B4B45C MOV V1.16B, V9.16B
	0x03B4B460 MOV V2.16B, V10.16B
	0x03B4B464 BLR X8
	0x03B4B468 LDRB W8, [X31 + 0x20]
	0x03B4B46C CBZ W8, 0x3B4B488
	0x03B4B470 ADRP X8, 0x5B2000
	0x03B4B474 LDR X8, [X8 + 0xB60]
	0x03B4B478 ADD X0, X31, 0x20
	0x03B4B47C LDR X1, [X8]
	0x03B4B480 BL 0x243C008
	0x03B4B484 B 0x3B4B4A4
	0x03B4B488 LDR X0, [X19 + 0xC8]
	0x03B4B48C CBZ X0, 0x3B4B514
	0x03B4B490 MOV X1, X31
	0x03B4B494 BL 0x3C356F8
	0x03B4B498 CBZ X0, 0x3B4B514
	0x03B4B49C MOV X1, X31
	0x03B4B4A0 BL 0x3C3FA04
	0x03B4B4A4 ADD X0, X31, 0x0
	0x03B4B4A8 ADD X1, X31, 0x30
	0x03B4B4AC ADD X2, X31, 0x10
	0x03B4B4B0 MOV X3, X31
	0x03B4B4B4 STP S0, S1, [X31]
	0x03B4B4B8 STR S2, [X31 + 0x8]
	0x03B4B4BC BL 0x3B8731C
	0x03B4B4C0 LDR X0, [X19 + 0xC8]
	0x03B4B4C4 CBZ X0, 0x3B4B514
	0x03B4B4C8 MOV X1, X31
	0x03B4B4CC BL 0x3C356F8
	0x03B4B4D0 CBZ X0, 0x3B4B514
	0x03B4B4D4 LDP S2, S3, [X31 + 0x18]
	0x03B4B4D8 LDP S0, S1, [X31 + 0x10]
	0x03B4B4DC MOV X1, X31
	0x03B4B4E0 BL 0x3C3F7AC
	0x03B4B4E4 LDR X0, [X19 + 0xC8]
	0x03B4B4E8 CBZ X0, 0x3B4B514
	0x03B4B4EC MOVZ W1, 0x1
	0x03B4B4F0 MOV X2, X31
	0x03B4B4F4 BL 0x3C357B4
	0x03B4B4F8 LDP X20, X19, [X31 + 0x70]
	0x03B4B4FC LDP X22, X21, [X31 + 0x60]
	0x03B4B500 LDR X30, [X31 + 0x58]
	0x03B4B504 LDP D9, D8, [X31 + 0x48]
	0x03B4B508 LDR V10, [X31 + 0x40]
	0x03B4B50C ADD X31, X31, 0x80
	0x03B4B510 RET
	0x03B4B514 BL 0x1C16F20
	0x03B4B518 STP X30, X21, [X31 - 0x20]!
	0x03B4B51C STP X20, X19, [X31 + 0x10]
	0x03B4B520 ADRP X21, 0x897000
	0x03B4B524 ADRP X20, 0x5A8000
	0x03B4B528 LDRB W8, [X21 + 0x8C0]
	0x03B4B52C LDR X20, [X20 + 0x598]
	0x03B4B530 MOV X19, X0
	0x03B4B534 TBNZ X8, 0x0, 0x3B4B54C
	0x03B4B538 ADRP X0, 0x5A8000
	0x03B4B53C LDR X0, [X0 + 0x598]
	0x03B4B540 BL 0x1C16CF4
	0x03B4B544 MOVZ W8, 0x1
	0x03B4B548 STRB W8, [X21 + 0x8C0]
	0x03B4B54C LDR X0, [X20]
	0x03B4B550 LDR X20, [X19 + 0xC8]
	0x03B4B554 LDR W8, [X0 + 0xE0]
	0x03B4B558 CBNZ W8, 0x3B4B560
	0x03B4B55C BL 0x1C16DFC
	0x03B4B560 MOV X0, X20
	0x03B4B564 MOV X1, X31
	0x03B4B568 MOV X2, X31
	0x03B4B56C BL 0x3C354F8
	0x03B4B570 TBZ X0, 0x0, 0x3B4B58C
	0x03B4B574 LDR X0, [X19 + 0xC8]
	0x03B4B578 CBZ X0, 0x3B4B598
	0x03B4B57C MOV W1, W31
	0x03B4B580 MOV X2, X31
	0x03B4B584 BL 0x3C357B4
	0x03B4B588 STR X31, [X19 + 0xC8]
	0x03B4B58C LDP X20, X19, [X31 + 0x10]
	0x03B4B590 LDP X30, X21, [X31], #0x20
	0x03B4B594 RET
	0x03B4B598 BL 0x1C16F20
	0x03B4B59C SUB X31, X31, 0x140
	0x03B4B5A0 STR X29, [X31 + 0xE0]
	0x03B4B5A4 STP X30, X27, [X31 + 0xF0]
	0x03B4B5A8 STP X26, X25, [X31 + 0x100]
	0x03B4B5AC STP X24, X23, [X31 + 0x110]
	0x03B4B5B0 STP X22, X21, [X31 + 0x120]
	0x03B4B5B4 STP X20, X19, [X31 + 0x130]
	0x03B4B5B8 ADRP X27, 0x897000
	0x03B4B5BC ADRP X26, 0x60F000
	0x03B4B5C0 ADRP X25, 0x60F000
	0x03B4B5C4 LDRB W8, [X27 + 0x998]
	0x03B4B5C8 LDR X26, [X26 + 0xA50]
	0x03B4B5CC LDR X25, [X25 + 0xA58]
	0x03B4B5D0 MOV X19, X5
	0x03B4B5D4 MOV X20, X4
	0x03B4B5D8 MOV X22, X3
	0x03B4B5DC MOV X23, X2
	0x03B4B5E0 MOV X24, X1
	0x03B4B5E4 MOV X21, X0
	0x03B4B5E8 TBNZ X8, 0x0, 0x3B4B60C
	0x03B4B5EC ADRP X0, 0x60F000
	0x03B4B5F0 LDR X0, [X0 + 0xA50]
	0x03B4B5F4 BL 0x1C16CF4
	0x03B4B5F8 ADRP X0, 0x60F000
	0x03B4B5FC LDR X0, [X0 + 0xA58]
	0x03B4B600 BL 0x1C16CF4
	0x03B4B604 MOVZ W8, 0x1
	0x03B4B608 STRB W8, [X27 + 0x998]
	0x03B4B60C MOVI V0.2D, 0x0
	0x03B4B610 ADD X8, X21, 0x3DC
	0x03B4B614 STP V0, V0, [X31 + 0x70]
	0x03B4B618 STR V0, [X31 + 0x6]
	0x03B4B61C LDUR V0, [X8 + 0x1C]
	0x03B4B620 LDP V2, V1, [X8]
	0x03B4B624 LDR X2, [X26]
	0x03B4B628 ADD X0, X31, 0x60
	0x03B4B62C ADD X1, X31, 0x0
	0x03B4B630 STUR V0, [X31 + 0x1C]
	0x03B4B634 STP V2, V1, [X31]
	0x03B4B638 BL 0x2438660
	0x03B4B63C LDP V1, V0, [X31 + 0x70]
	0x03B4B640 LDR V2, [X31 + 0x6]
	0x03B4B644 ADD X1, X21, 0x408
	0x03B4B648 ADD X0, X31, 0x90
	0x03B4B64C STP V1, V0, [X24 + 0x10]
	0x03B4B650 STR V2, [X24]
	0x03B4B654 LDR W8, [X21 + 0x3AC]

ISIL:
	001 Subtract X31, X31, 352
	002 Move [X31+272], X29
	003 Move [X31+280], X30
	004 Move [X31+288], X26
	005 Move [X31+296], X25
	006 Move [X31+304], X24
	007 Move [X31+312], X23
	008 Move [X31+320], X22
	009 Move [X31+328], X21
	010 Move [X31+336], X20
	011 Move [X31+344], X19
	012 Move X25, 0x898000
	013 Move W8, [X25+2234]
	014 Move X20, X4
	015 Move X21, X3
	016 Move W22, W2
	017 Move X23, X1
	018 Move X19, X0
	019 Add X24, X31, 112
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {38}
	024 Move X0, 0x610000
	025 Move X0, [X0+2544]
	026 Call 0x1C17CF4
	027 Move X0, 0x610000
	028 Move X0, [X0+2568]
	029 Call 0x1C17CF4
	030 Move X0, 0x610000
	031 Move X0, [X0+2576]
	032 Call 0x1C17CF4
	033 Move X0, 0x5A9000
	034 Move X0, [X0+1432]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X25+2234], W8
	038 NotImplemented "Instruction MOVI not yet implemented."
	039 Move [X31+268], W31
	040 Move [X31+204], W31
	041 Move [X31+200], W31
	042 Move [X31+192], X31
	043 Move [X31+108], W31
	044 Move [X31+56], X31
	045 Move [X24+112], V0
	046 Move [X24+120], V0
	047 Move [X24+6], V0
	048 Move [X24+48], V0
	049 Move [X24+56], V0
	050 Move [X24+2], V0
	051 Move [X31+112], V0
	052 Move [X31+120], V0
	053 Move [X31+92], V0
	054 Move [X31+64], V0
	055 Move [X31+72], V0
	056 Move [X20], W31
	057 Move X8, [X23]
	058 Subtract W9, W22, 1
	059 Move W10, 12
	060 NotImplemented "Instruction SMADDL not yet implemented."
	061 Move W9, [X8+8]
	062 Move X8, [X8]
	063 Move [X21+8], W9
	064 Move [X21], X8
	065 Move X23, [X19+216]
	066 Compare X23, 0
	067 JumpIfEqual {268}
	068 Move X10, 0x610000
	069 Move X8, [X23]
	070 Move X10, [X10+2544]
	071 Add X24, X19, 400
	072 Add X25, X19, 180
	073 NotImplemented "Instruction LDRH not yet implemented."
	074 Move X1, [X10]
	075 Add X22, X19, 192
	076 Compare X9, 0
	077 JumpIfEqual {84}
	078 Move X10, [X8+176]
	079 Add X10, X10, 8
	080 NotImplemented "Instruction LDUR not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Subtract X9, X9, 1
	083 Add X10, X10, 16
	084 Move W2, 1
	085 Move X0, X23
	086 Call 0x1C5D788
	087 Move W9, [X10]
	088 Add W9, W9, 1
	089 Add X8, X8, W9
	090 Add X0, X8, 312
	091 Move X8, [X0]
	092 Move X5, [X0+8]
	093 Move X26, 0x5A9000
	094 Move X26, [X26+1432]
	095 Add X4, X31, 268
	096 Move X0, X23
	097 Move X1, X24
	098 Move X2, X25
	099 Move X3, X22
	100 NotImplemented "Instruction BLR not yet implemented."
	101 And W8, W0, 1
	102 Move [X19+412], W8
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {156}
	107 Move W8, [X24+8]
	108 Move X9, [X24]
	109 Move [X21+8], W8
	110 Move [X21], X9
	111 Move W8, [X31+268]
	112 Compare W8, 0
	113 JumpIfEqual {156}
	114 Move W8, [X19+138]
	115 Compare W8, 0
	116 JumpIfEqual {156}
	117 Move W8, [X19+440]
	118 Compare W8, 0
	119 JumpIfEqual {156}
	120 Move X0, [X19+264]
	121 Compare X0, 0
	122 JumpIfEqual {268}
	123 Add X1, X31, 208
	124 Add X2, X31, 200
	125 Add X3, X31, 112
	126 Add X4, X31, 108
	127 Add X5, X31, 204
	128 Call XRRayInteractor.TryGetCurrentRaycast, X0, X1, X2, X3, X4, X5
	129 Move X23, X31
	130 Move TEMP, X0
	131 And TEMP, TEMP, 1
	132 Compare TEMP, 1
	133 JumpIfNotEqual {157}
	134 Move W8, [X31+204]
	135 Compare W8, 0
	136 JumpIfNotEqual {157}
	137 Move W8, [X31+208]
	138 Compare W8, 0
	139 JumpIfEqual {185}
	140 Move X8, 0x610000
	141 Move X8, [X8+2576]
	142 Add X0, X31, 208
	143 Move X1, [X8]
	144 Add X8, X31, 8
	145 Call Nullable`1<RaycastHit>.get_Value, X0
	146 NotImplemented "Instruction LDUR not yet implemented."
	147 NotImplemented "Instruction LDUR not yet implemented."
	148 NotImplemented "Instruction LDUR not yet implemented."
	149 Add X0, X31, 64
	150 Move X1, X31
	151 Move [X31+64], V0
	152 Move [X31+72], V1
	153 Move [X31+92], V2
	154 Call RaycastHit.get_collider, X0
	155 Move X23, X0
	156 Move X23, X31
	157 Move X0, [X26]
	158 Move W8, [X0+224]
	159 Compare W8, 0
	160 JumpIfNotEqual {162}
	161 Call 0x1C17DFC
	162 Move X0, X23
	163 Move X1, X31
	164 Move X2, X31
	165 Call Object.op_Equality, X0, X1
	166 Move TEMP, X0
	167 And TEMP, TEMP, 1
	168 Compare TEMP, 1
	169 JumpIfNotEqual {171}
	170 Move [X19+376], X31
	171 Move [X19+424], X23
	172 Move W0, [X31+268]
	173 Move X20, [X31+336]
	174 Move X19, [X31+344]
	175 Move X22, [X31+320]
	176 Move X21, [X31+328]
	177 Move X24, [X31+304]
	178 Move X23, [X31+312]
	179 Move X26, [X31+288]
	180 Move X25, [X31+296]
	181 Move X29, [X31+272]
	182 Move X30, [X31+280]
	183 Add X31, X31, 352
	184 Return X0
	185 Move X23, X31
	186 Move X0, [X26]
	187 Move X24, [X19+424]
	188 Move W8, [X0+224]
	189 Compare W8, 0
	190 JumpIfNotEqual {192}
	191 Call 0x1C17DFC
	192 Move X0, X23
	193 Move X1, X24
	194 Move X2, X31
	195 Call Object.op_Inequality, X0, X1
	196 Move TEMP, X0
	197 And TEMP, TEMP, 1
	198 Compare TEMP, 1
	199 JumpIfNotEqual {224}
	200 Move X0, [X26]
	201 Move W8, [X0+224]
	202 Compare W8, 0
	203 JumpIfNotEqual {205}
	204 Call 0x1C17DFC
	205 Move X0, X23
	206 Move X1, X31
	207 Move X2, X31
	208 Call Object.op_Inequality, X0, X1
	209 Move TEMP, X0
	210 And TEMP, TEMP, 1
	211 Compare TEMP, 1
	212 JumpIfNotEqual {224}
	213 Move X8, [X19+256]
	214 Compare X8, 0
	215 JumpIfEqual {268}
	216 Move X0, [X8+48]
	217 Compare X0, 0
	218 JumpIfEqual {268}
	219 Add X3, X19, 376
	220 Add X2, X31, 56
	221 Move X1, X23
	222 Move X4, X31
	223 Call XRInteractionManager.TryGetInteractableForCollider, X0, X1, X2, X3
	224 Move X0, [X26]
	225 Move X24, [X19+376]
	226 Move W8, [X0+224]
	227 Compare W8, 0
	228 JumpIfNotEqual {230}
	229 Call 0x1C17DFC
	230 Move X0, X24
	231 Move X1, X31
	232 Move X2, X31
	233 Call Object.op_Inequality, X0, X1
	234 Move TEMP, X0
	235 And TEMP, TEMP, 1
	236 Compare TEMP, 1
	237 JumpIfNotEqual {157}
	238 Move X0, [X19+264]
	239 Compare X0, 0
	240 JumpIfEqual {268}
	241 Call XRBaseInteractor.get_hasSelection, X0
	242 Move X8, [X19+376]
	243 Move TEMP, X0
	244 And TEMP, TEMP, 1
	245 Compare TEMP, 1
	246 JumpIfNotEqual {253}
	247 Compare X8, 0
	248 JumpIfEqual {268}
	249 Move X1, [X19+264]
	250 Move X0, X8
	251 Move X2, X31
	252 Call XRInteractableSnapVolume.GetClosestPointOfAttachTransform, X0, X1
	253 Compare X8, 0
	254 JumpIfEqual {268}
	255 Move S1, [X21+4]
	256 Move S2, [X21+8]
	257 Move V0, [X21]
	258 Move X0, X8
	259 Move X1, X31
	260 Call XRInteractableSnapVolume.GetClosestPoint, X0, X1
	261 Move W8, 19
	262 Move W9, 1
	263 Move [X21], S0
	264 Move [X21+8], S1
	265 Move [X21+8], S2
	266 Move [X22], W8
	267 Move [X20], W9
	268 Call 0x1C17F20

Method: System.Void CalculateLineCurveRenderPoints(System.Int32 numTargetPoints, System.Single curveRatio, in UnityEngine.Vector3 lineOrigin, in UnityEngine.Vector3 lineDirection, in UnityEngine.Vector3 endPoint, ref Unity.Collections.NativeArray`1<UnityEngine.Vector3> targetPoints)

Disassembly:
	0x03B4B9B8 LDR X0, [X25]
	0x03B4B9BC LDR W8, [X0 + 0xE0]
	0x03B4B9C0 CBNZ W8, 0x3B4B9C8
	0x03B4B9C4 BL 0x1C16DFC
	0x03B4B9C8 AND W0, W23, 0x1
	0x03B4B9CC MOV X1, X22
	0x03B4B9D0 MOV X2, X21
	0x03B4B9D4 MOV X3, X20
	0x03B4B9D8 MOV X4, X19
	0x03B4B9DC LDP X20, X19, [X31 + 0x40]
	0x03B4B9E0 LDP X22, X21, [X31 + 0x30]
	0x03B4B9E4 LDP X24, X23, [X31 + 0x20]
	0x03B4B9E8 LDP X30, X25, [X31 + 0x10]
	0x03B4B9EC MOV V0.16B, V8.16B
	0x03B4B9F0 LDR V8, [X31], #0x50
	0x03B4B9F4 B 0x3B4B9F8
	0x03B4B9F8 STR D8, [X31 - 0x50]!
	0x03B4B9FC STP X30, X25, [X31 + 0x10]
	0x03B4BA00 STP X24, X23, [X31 + 0x20]
	0x03B4BA04 STP X22, X21, [X31 + 0x30]
	0x03B4BA08 STP X20, X19, [X31 + 0x40]
	0x03B4BA0C ADRP X24, 0x897000
	0x03B4BA10 ADRP X25, 0x5D0000
	0x03B4BA14 LDRB W8, [X24 + 0x8D6]
	0x03B4BA18 LDR X25, [X25 + 0x848]
	0x03B4BA1C MOV X19, X4
	0x03B4BA20 MOV X20, X3
	0x03B4BA24 MOV X21, X2
	0x03B4BA28 MOV X22, X1
	0x03B4BA2C MOV W23, W0
	0x03B4BA30 MOV V8.16B, V0.16B
	0x03B4BA34 TBNZ X8, 0x0, 0x3B4BA58
	0x03B4BA38 ADRP X0, 0x5D0000
	0x03B4BA3C LDR X0, [X0 + 0x848]
	0x03B4BA40 BL 0x1C16CF4
	0x03B4BA44 ADRP X0, 0x60F000
	0x03B4BA48 LDR X0, [X0 + 0xA68]

ISIL:
	001 Move [X31-80], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0x898000
	011 Move X25, 0x610000
	012 Move W8, [X24+2235]
	013 Move X25, [X25+2584]
	014 Move X19, X4
	015 Move X20, X3
	016 Move X21, X2
	017 Move X22, X1
	018 Move V8, V0
	019 Move W23, W0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x610000
	025 Move X0, [X0+2584]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+2235], W8
	029 Move X0, [X25]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move W0, W23
	035 Move X1, X22
	036 Move X2, X21
	037 Move X3, X20
	038 Move X4, X19
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X22, [X31+48]
	042 Move X21, [X31+56]
	043 Move X24, [X31+32]
	044 Move X23, [X31+40]
	045 Move X30, [X31+16]
	046 Move X25, [X31+24]
	047 Move V0, V8
	048 Move V8, [X31+80]
	049 Call CalculateLineCurveRenderPoints_0000037D$BurstDirectCall.Invoke, X0, V0, X1, X2, X3, X4
	050 Return 

Method: System.Int32 ComputeNewRenderPoints(System.Int32 numRenderPoints, System.Int32 numTargetPoints, System.Single targetLineLength, System.Boolean shouldSmoothPoints, System.Boolean shouldOverwritePoints, System.Single pointSmoothIncrement, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float3> targetPoints, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float3> previousRenderPoints, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float3> renderPoints)

Disassembly:
	0x03B4C068 ADD X0, X31, 0x28
	0x03B4C06C FMOV S3, 1
	0x03B4C070 STR V0, [X21 + 0x2]
	0x03B4C074 FMOV S0, 1
	0x03B4C078 FMOV S4, 1
	0x03B4C07C MOV V1.16B, V8.16B
	0x03B4C080 MOV V2.16B, V9.16B
	0x03B4C084 MOV X1, X31
	0x03B4C088 STR W8, [X21 + 0x30]
	0x03B4C08C STP X31, X31, [X31 + 0x28]
	0x03B4C090 STR W31, [X31 + 0x38]
	0x03B4C094 BL 0x3C26810
	0x03B4C098 LDR W8, [X31 + 0x38]
	0x03B4C09C LDUR V0, [X31 + 0x28]
	0x03B4C0A0 STR W8, [X31 + 0x20]
	0x03B4C0A4 STR V0, [X31 + 0x1]
	0x03B4C0A8 LDR W8, [X21 + 0x18]
	0x03B4C0AC CMP W8, 0x1
	0x03B4C0B0 B.LS 0x3B4C314
	0x03B4C0B4 LDR W8, [X31 + 0x20]
	0x03B4C0B8 LDR V0, [X31 + 0x1]
	0x03B4C0BC STR W8, [X21 + 0x44]
	0x03B4C0C0 STUR V0, [X21 + 0x34]
	0x03B4C0C4 CBZ X20, 0x3B4C318
	0x03B4C0C8 MOV X0, X20
	0x03B4C0CC MOV X1, X21
	0x03B4C0D0 MOV X2, X31
	0x03B4C0D4 BL 0x3C26A8C
	0x03B4C0D8 LDR X0, [X24]
	0x03B4C0DC MOVZ W1, 0x2
	0x03B4C0E0 BL 0x1C16D6C
	0x03B4C0E4 MOV X21, X0
	0x03B4C0E8 ADD X0, X31, 0x8
	0x03B4C0EC FMOV S0, 1
	0x03B4C0F0 FMOV S1, W31
	0x03B4C0F4 MOV X1, X31
	0x03B4C0F8 STR X31, [X31 + 0x8]
	0x03B4C0FC BL 0x3C26820
	0x03B4C100 CBZ X21, 0x3B4C318
	0x03B4C104 LDR W8, [X21 + 0x18]
	0x03B4C108 CBZ W8, 0x3B4C314
	0x03B4C10C LDR V0, [X31 + 0x8]
	0x03B4C110 ADD X0, X31, 0x0
	0x03B4C114 FMOV S1, 1
	0x03B4C118 MOV X1, X31

ISIL:
	001 Move [X31-96], D9
	002 Move [X31-88], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X26, 0x897000
	014 Move X27, 0x60F000
	015 Move W8, [X26+2236]
	016 Move X27, [X27+2600]
	017 Move X19, X6
	018 Move X20, X5
	019 Move X21, X4
	020 Move V8, V1
	021 Move W22, W3
	022 Move W24, W2
	023 Move V9, V0
	024 Move W23, W1
	025 Move W25, W0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {35}
	030 Move X0, 0x60F000
	031 Move X0, [X0+2600]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X26+2236], W8
	035 Move X0, [X27]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 And W2, W24, 1
	041 And W3, W22, 1
	042 Move W0, W25
	043 Move W1, W23
	044 Move X4, X21
	045 Move X5, X20
	046 Move X6, X19
	047 Move X20, [X31+80]
	048 Move X19, [X31+88]
	049 Move X22, [X31+64]
	050 Move X21, [X31+72]
	051 Move X24, [X31+48]
	052 Move X23, [X31+56]
	053 Move X26, [X31+32]
	054 Move X25, [X31+40]
	055 Move X30, [X31+16]
	056 Move X27, [X31+24]
	057 Move V0, V9
	058 Move V1, V8
	059 Move D9, [X31+96]
	060 Move D8, [X31+104]
	061 Call ComputeNewRenderPoints_0000037E$BurstDirectCall.Invoke, X0, X1, V0, X2, X3, V1, X4, X5, X6
	062 Return X0

Method: System.Boolean EvaluateLineEndPoint(System.Single targetLineLength, System.Boolean shouldSmoothPoint, in Unity.Mathematics.float3 unsmoothedTargetPoint, in Unity.Mathematics.float3 lastRenderPoint, ref Unity.Mathematics.float3 newRenderPoint, ref System.Single lineLength)

Disassembly:
	0x03B4C964 LDR X0, [X0 + 0x5A0]
	0x03B4C968 BL 0x1C16CF4
	0x03B4C96C MOVZ W8, 0x1
	0x03B4C970 STRB W8, [X26 + 0x8C8]
	0x03B4C974 LDR X0, [X29]
	0x03B4C978 MOVI V0.2D, 0x0
	0x03B4C97C ADD X1, X31, 0x3C
	0x03B4C980 STR X31, [X31 + 0x30]
	0x03B4C984 STP V0, V0, [X31 + 0x10]
	0x03B4C988 STR V0, [X31]
	0x03B4C98C BL 0x1C16E04
	0x03B4C990 LDR X8, [X28]
	0x03B4C994 STR X0, [X31]
	0x03B4C998 ADD X1, X31, 0x38
	0x03B4C99C MOV X0, X8
	0x03B4C9A0 BL 0x1C16E04
	0x03B4C9A4 LDR X8, [X27]
	0x03B4C9A8 STR X0, [X31 + 0x8]
	0x03B4C9AC MOV X1, X25
	0x03B4C9B0 MOV X0, X8
	0x03B4C9B4 BL 0x1C16E04
	0x03B4C9B8 LDR X8, [X27]
	0x03B4C9BC STR X0, [X31 + 0x10]
	0x03B4C9C0 MOV X1, X24
	0x03B4C9C4 MOV X0, X8
	0x03B4C9C8 BL 0x1C16E04
	0x03B4C9CC LDR X8, [X27]
	0x03B4C9D0 STR X0, [X31 + 0x18]
	0x03B4C9D4 MOV X1, X23
	0x03B4C9D8 MOV X0, X8
	0x03B4C9DC BL 0x1C16E04
	0x03B4C9E0 ADRP X8, 0x60E000
	0x03B4C9E4 LDR X8, [X8 + 0xA98]
	0x03B4C9E8 STR X0, [X31 + 0x20]
	0x03B4C9EC MOV X1, X22
	0x03B4C9F0 LDR X8, [X8]
	0x03B4C9F4 MOV X0, X8

ISIL:
	001 Move [X31-80], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0x897000
	011 Move X25, 0x60F000
	012 Move W8, [X24+2237]
	013 Move X25, [X25+2664]
	014 Move X19, X4
	015 Move X20, X3
	016 Move X21, X2
	017 Move X22, X1
	018 Move W23, W0
	019 Move V8, V0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x60F000
	025 Move X0, [X0+2664]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+2237], W8
	029 Move X0, [X25]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 And W0, W23, 1
	035 Move X1, X22
	036 Move X2, X21
	037 Move X3, X20
	038 Move X4, X19
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X22, [X31+48]
	042 Move X21, [X31+56]
	043 Move X24, [X31+32]
	044 Move X23, [X31+40]
	045 Move X30, [X31+16]
	046 Move X25, [X31+24]
	047 Move V0, V8
	048 Move V8, [X31+80]

Method: System.Single UpdateTargetLineLength(in UnityEngine.Vector3 lineOrigin, in UnityEngine.Vector3 hitPoint, System.Single minimumLineLength, System.Single maximumLineLength, System.Single lineRetractionDelaySeconds, System.Single lineRetractionScalar, System.Boolean hasHit, System.Boolean deriveMaxLineLength)

Disassembly:
	0x03B4BE80 STR D0, [X21 + 0x28]
	0x03B4BE84 BL 0x3C26AD0
	0x03B4BE88 STR X20, [X19 + 0x50]
	0x03B4BE8C LDR X0, [X23]
	0x03B4BE90 BL 0x1C16F10
	0x03B4BE94 MOV X1, X31
	0x03B4BE98 MOV X20, X0
	0x03B4BE9C BL 0x3C268D0
	0x03B4BEA0 LDR X0, [X22]
	0x03B4BEA4 MOVZ W1, 0x2
	0x03B4BEA8 BL 0x1C16D6C
	0x03B4BEAC MOV X21, X0
	0x03B4BEB0 ADD X0, X31, 0xC8
	0x03B4BEB4 FMOV S0, 1
	0x03B4BEB8 FMOV S1, W31
	0x03B4BEBC FMOV S2, W31
	0x03B4BEC0 FMOV S3, 1
	0x03B4BEC4 FMOV S4, W31
	0x03B4BEC8 MOV X1, X31
	0x03B4BECC STP X31, X31, [X31 + 0xC8]
	0x03B4BED0 STR W31, [X31 + 0xD8]
	0x03B4BED4 BL 0x3C26810
	0x03B4BED8 CBZ X21, 0x3B4C318
	0x03B4BEDC LDR V0, [X25 + 0x3]
	0x03B4BEE0 LDR W8, [X31 + 0xD8]
	0x03B4BEE4 STR V0, [X31 + 0xB]
	0x03B4BEE8 STR W8, [X31 + 0xC0]
	0x03B4BEEC LDR W8, [X21 + 0x18]
	0x03B4BEF0 CBZ W8, 0x3B4C314
	0x03B4BEF4 LDR V0, [X31 + 0xB]
	0x03B4BEF8 LDR W8, [X31 + 0xC0]
	0x03B4BEFC ADD X0, X31, 0x98
	0x03B4BF00 FMOV S1, W31
	0x03B4BF04 STR V0, [X21 + 0x2]
	0x03B4BF08 FMOV S0, 1
	0x03B4BF0C FMOV S2, W31
	0x03B4BF10 FMOV S3, 1
	0x03B4BF14 FMOV S4, 1
	0x03B4BF18 MOV X1, X31
	0x03B4BF1C STR W8, [X21 + 0x30]
	0x03B4BF20 STP X31, X31, [X31 + 0x98]
	0x03B4BF24 STR W31, [X31 + 0xA8]
	0x03B4BF28 BL 0x3C26810
	0x03B4BF2C LDR W8, [X31 + 0xA8]
	0x03B4BF30 LDR V0, [X25]
	0x03B4BF34 STR W8, [X31 + 0x90]
	0x03B4BF38 STR V0, [X31 + 0x8]
	0x03B4BF3C LDR W8, [X21 + 0x18]
	0x03B4BF40 CMP W8, 0x1
	0x03B4BF44 B.LS 0x3B4C314
	0x03B4BF48 LDR W8, [X31 + 0x90]
	0x03B4BF4C LDR V0, [X31 + 0x8]
	0x03B4BF50 STR W8, [X21 + 0x44]
	0x03B4BF54 STUR V0, [X21 + 0x34]
	0x03B4BF58 CBZ X20, 0x3B4C318
	0x03B4BF5C MOV X0, X20
	0x03B4BF60 MOV X1, X21
	0x03B4BF64 MOV X2, X31
	0x03B4BF68 BL 0x3C26A8C
	0x03B4BF6C LDR X0, [X24]
	0x03B4BF70 MOVZ W1, 0x2
	0x03B4BF74 BL 0x1C16D6C
	0x03B4BF78 MOV X21, X0
	0x03B4BF7C ADD X0, X31, 0x78
	0x03B4BF80 FMOV S0, 1
	0x03B4BF84 FMOV S1, W31
	0x03B4BF88 MOV X1, X31
	0x03B4BF8C STR X31, [X31 + 0x78]
	0x03B4BF90 BL 0x3C26820
	0x03B4BF94 CBZ X21, 0x3B4C318
	0x03B4BF98 LDR W8, [X21 + 0x18]
	0x03B4BF9C CBZ W8, 0x3B4C314
	0x03B4BFA0 LDR V0, [X31 + 0x78]
	0x03B4BFA4 ADD X0, X31, 0x70
	0x03B4BFA8 FMOV S1, 1
	0x03B4BFAC MOV X1, X31
	0x03B4BFB0 STR D0, [X21 + 0x20]
	0x03B4BFB4 FMOV S0, 1
	0x03B4BFB8 STR X31, [X31 + 0x70]
	0x03B4BFBC BL 0x3C26820
	0x03B4BFC0 LDR W8, [X21 + 0x18]
	0x03B4BFC4 CMP W8, 0x1
	0x03B4BFC8 B.LS 0x3B4C314
	0x03B4BFCC LDR V0, [X31 + 0x70]
	0x03B4BFD0 MOV X0, X20
	0x03B4BFD4 MOV X1, X21
	0x03B4BFD8 MOV X2, X31
	0x03B4BFDC STR D0, [X21 + 0x28]
	0x03B4BFE0 BL 0x3C26AD0
	0x03B4BFE4 STR X20, [X19 + 0x58]
	0x03B4BFE8 LDR X0, [X23]
	0x03B4BFEC BL 0x1C16F10
	0x03B4BFF0 MOV X1, X31
	0x03B4BFF4 MOV X20, X0
	0x03B4BFF8 BL 0x3C268D0
	0x03B4BFFC LDR X0, [X22]
	0x03B4C000 MOVZ W1, 0x2
	0x03B4C004 BL 0x1C16D6C
	0x03B4C008 ADRP X8, 0xFFFFFFFFFCF9D000
	0x03B4C00C ADRP X9, 0xFFFFFFFFFCF9E000
	0x03B4C010 LDR V8, [X8 + 0xF90]
	0x03B4C014 LDR V9, [X9 + 0x30]
	0x03B4C018 MOV X21, X0
	0x03B4C01C ADD X0, X31, 0x58
	0x03B4C020 FMOV S0, 1
	0x03B4C024 FMOV S3, 1
	0x03B4C028 FMOV S4, W31
	0x03B4C02C MOV V1.16B, V8.16B
	0x03B4C030 MOV V2.16B, V9.16B
	0x03B4C034 MOV X1, X31
	0x03B4C038 STP X31, X31, [X31 + 0x58]
	0x03B4C03C STR W31, [X31 + 0x68]
	0x03B4C040 BL 0x3C26810
	0x03B4C044 CBZ X21, 0x3B4C318
	0x03B4C048 LDUR V0, [X31 + 0x58]
	0x03B4C04C LDR W8, [X31 + 0x68]
	0x03B4C050 STR V0, [X31 + 0x4]
	0x03B4C054 STR W8, [X31 + 0x50]
	0x03B4C058 LDR W8, [X21 + 0x18]
	0x03B4C05C CBZ W8, 0x3B4C314
	0x03B4C060 LDR V0, [X31 + 0x4]
	0x03B4C064 LDR W8, [X31 + 0x50]

ISIL:
	001 Move [X31-128], D15
	002 Move [X31-120], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X24, 0x898000
	017 Move W8, [X24+2238]
	018 Move W21, W4
	019 Move W23, W3
	020 Move V8, V3
	021 Move V9, V2
	022 Move V11, V1
	023 Move V10, V0
	024 Move X20, X2
	025 Move X22, X1
	026 Move X19, X0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {42}
	031 Move X0, 0x610000
	032 Move X0, [X0+2592]
	033 Call 0x1C17CF4
	034 Move X0, 0x610000
	035 Move X0, [X0+2392]
	036 Call 0x1C17CF4
	037 Move X0, 0x610000
	038 Move X0, [X0+2400]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X24+2238], W8
	042 Move X0, X31
	043 Call Time.get_unscaledTime
	044 Move V12, V0
	045 Move TEMP, X23
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {89}
	049 Move X0, X31
	050 Call Time.get_unscaledTime
	051 Move [X19+416], S0
	052 Move TEMP, X21
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {88}
	056 Move X21, 0x88E000
	057 Move V0, [X22]
	058 NotImplemented "Instruction LDUR not yet implemented."
	059 Move V15, [X20]
	060 Move W8, [X21+2140]
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 Compare W8, 0
	063 JumpIfNotEqual {71}
	064 Move X0, 0x5A9000
	065 Move X0, [X0+1448]
	066 Move [X31+76], S0
	067 Call 0x1C17CF4
	068 Move V0, [X31+76]
	069 Move W8, 1
	070 Move [X21+2140], W8
	071 Move X8, 0x5A9000
	072 Move X8, [X8+1448]
	073 Subtract S15, S0, S15
	074 Subtract V13, V14, V13
	075 Move X0, [X8]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Multiply S0, S15, S15
	081 NotImplemented "Instruction INVALID not yet implemented."
	082 Add S0, S0, S1
	083 Move S1, V1.S[1]
	084 Add S0, S1, S0
	085 NotImplemented "Instruction FSQRT not yet implemented."
	086 NotImplemented "Instruction FCMP not yet implemented."
	087 NotImplemented "Instruction FCSEL not yet implemented."
	088 Move [X19+420], S11
	089 Move V0, [X19+416]
	090 Move X0, [X19+456]
	091 Subtract S11, S12, S0
	092 NotImplemented "Instruction FCMP not yet implemented."
	093 Compare X0, 0
	094 JumpIfEqual {151}
	095 Move X8, 0x610000
	096 Move X8, [X8+2400]
	097 Move V0, V10
	098 Move X1, [X8]
	099 Call TweenableVariableBase`1<Single>.set_target, X0, V0
	100 Move X20, [X19+456]
	101 Move X0, X31
	102 Call Time.get_unscaledDeltaTime
	103 Compare X20, 0
	104 JumpIfEqual {151}
	105 Subtract S1, S11, S9
	106 Multiply S1, S1, S8
	107 Multiply S0, S1, S0
	108 Compare X0, 0
	109 JumpIfEqual {151}
	110 Move X8, 0x610000
	111 Move V0, [X19+420]
	112 Move X8, [X8+2400]
	113 NotImplemented "Instruction FCMP not yet implemented."
	114 Move X1, [X8]
	115 NotImplemented "Instruction FCSEL not yet implemented."
	116 Call TweenableVariableBase`1<Single>.set_target, X0, V0
	117 Move X20, [X19+456]
	118 Move X0, X31
	119 Call Time.get_unscaledDeltaTime
	120 Compare X20, 0
	121 JumpIfEqual {151}
	122 Multiply S0, S0, S8
	123 Move X8, 0x60F000
	124 Move X8, [X8+2392]
	125 Move X0, X20
	126 Move X1, [X8]
	127 Call TweenableVariableBase`1<Single>.HandleTween, X0, V0
	128 Move X0, [X19+456]
	129 Compare X0, 0
	130 JumpIfEqual {151}
	131 Move X8, 0x60F000
	132 Move X8, [X8+2592]
	133 Move X20, [X31+112]
	134 Move X19, [X31+120]
	135 Move X22, [X31+96]
	136 Move X21, [X31+104]
	137 Move X24, [X31+80]
	138 Move X23, [X31+88]
	139 Move X1, [X8]
	140 Move X30, [X31+64]
	141 Move D9, [X31+48]
	142 Move D8, [X31+56]
	143 Move D11, [X31+32]
	144 Move D10, [X31+40]
	145 Move D13, [X31+16]
	146 Move D12, [X31+24]
	147 Move D15, [X31+128]
	148 Move D14, [X31+136]
	149 Call TweenableVariableAsyncBase`1<Single>.get_Value, X0
	150 Return V0
	151 Call 0x1C17F20

Method: System.Void AssignReticle(System.Boolean useBlockedVisuals)

Disassembly:
	0x03B4C234 CMP W9, 0x1
	0x03B4C238 LDR X10, [X8]
	0x03B4C23C LDR X10, [X10 + 0xB8]
	0x03B4C240 LDR V0, [X10]
	0x03B4C244 LDR V1, [X10 + 0x8]
	0x03B4C248 STR D0, [X20 + 0x20]
	0x03B4C24C STR S1, [X20 + 0x28]
	0x03B4C250 B.EQ 0x3B4C314
	0x03B4C254 LDR X8, [X8]
	0x03B4C258 ADRP X21, 0x60E000
	0x03B4C25C ADRP X22, 0x60E000
	0x03B4C260 LDR X8, [X8 + 0xB8]
	0x03B4C264 LDR V0, [X8]
	0x03B4C268 LDR V1, [X8 + 0x8]
	0x03B4C26C ADRP X8, 0x60E000
	0x03B4C270 LDR X8, [X8 + 0x4D0]
	0x03B4C274 STUR D0, [X20 + 0x2C]
	0x03B4C278 STR S1, [X20 + 0x34]
	0x03B4C27C STR X20, [X19 + 0x160]
	0x03B4C280 LDR X0, [X8]
	0x03B4C284 ADRP X20, 0x60E000
	0x03B4C288 LDR X20, [X20 + 0x4C8]
	0x03B4C28C LDR X21, [X21 + 0xA90]
	0x03B4C290 LDR X22, [X22 + 0xA88]
	0x03B4C294 BL 0x1C16F10
	0x03B4C298 LDR X4, [X20]
	0x03B4C29C FMOV S0, W31
	0x03B4C2A0 MOVZ W1, 0x1
	0x03B4C2A4 MOV X2, X31
	0x03B4C2A8 MOV W3, W31
	0x03B4C2AC MOV X20, X0
	0x03B4C2B0 BL 0x28E2A78
	0x03B4C2B4 STR X20, [X19 + 0x1C0]
	0x03B4C2B8 LDR X0, [X21]
	0x03B4C2BC BL 0x1C16F10
	0x03B4C2C0 MOV X1, X31
	0x03B4C2C4 MOV X20, X0
	0x03B4C2C8 BL 0x3B933BC
	0x03B4C2CC STR X20, [X19 + 0x1C8]
	0x03B4C2D0 LDR X0, [X22]
	0x03B4C2D4 BL 0x1C16F10
	0x03B4C2D8 MOV X1, X31
	0x03B4C2DC MOV X20, X0
	0x03B4C2E0 BL 0x3B31C38
	0x03B4C2E4 MOV X0, X19
	0x03B4C2E8 MOV X1, X31
	0x03B4C2EC STR X20, [X19 + 0x1D0]
	0x03B4C2F0 BL 0x3C36C30
	0x03B4C2F4 LDP X20, X19, [X31 + 0x1A0]
	0x03B4C2F8 LDP X22, X21, [X31 + 0x190]
	0x03B4C2FC LDP X24, X23, [X31 + 0x180]
	0x03B4C300 LDP X30, X25, [X31 + 0x170]
	0x03B4C304 LDR X29, [X31 + 0x160]
	0x03B4C308 LDP D9, D8, [X31 + 0x150]
	0x03B4C30C ADD X31, X31, 0x1B0
	0x03B4C310 RET
	0x03B4C314 BL 0x1C16F28
	0x03B4C318 BL 0x1C16F20
	0x03B4C31C STR X30, [X31 - 0x10]!
	0x03B4C320 MOV X8, X0
	0x03B4C324 LDR X0, [X0 + 0xD0]
	0x03B4C328 CBZ X0, 0x3B4C35C
	0x03B4C32C LDR V1, [X8 + 0x20]
	0x03B4C330 ADRP X8, 0xFFFFFFFFFCF9E000
	0x03B4C334 ADRP X9, 0xFFFFFFFFFCF9D000
	0x03B4C338 LDR V2, [X8 + 0x200]
	0x03B4C33C LDR V3, [X9 + 0xF28]
	0x03B4C340 MOV X1, X31
	0x03B4C344 FMIN S2, S1, S2
	0x03B4C348 FCMP S1, S3
	0x03B4C34C FCSEL S1, S2, S3, PL
	0x03B4C350 FMUL S0, S1, S0
	0x03B4C354 LDR X30, [X31], #0x10
	0x03B4C358 B 0x3C11470
	0x03B4C35C BL 0x1C16F20
	0x03B4C360 SUB X31, X31, 0x90
	0x03B4C364 STR D8, [X31 + 0x40]
	0x03B4C368 STP X30, X25, [X31 + 0x50]
	0x03B4C36C STP X24, X23, [X31 + 0x60]
	0x03B4C370 STP X22, X21, [X31 + 0x70]
	0x03B4C374 STP X20, X19, [X31 + 0x80]
	0x03B4C378 ADRP X24, 0x896000
	0x03B4C37C ADRP X25, 0x60E000
	0x03B4C380 LDRB W8, [X24 + 0x8C7]
	0x03B4C384 LDR X25, [X25 + 0x9E8]
	0x03B4C388 MOV X23, X4
	0x03B4C38C MOV X20, X3
	0x03B4C390 MOV X21, X2
	0x03B4C394 MOV X22, X1
	0x03B4C398 MOV V8.16B, V0.16B
	0x03B4C39C MOV W19, W0
	0x03B4C3A0 TBNZ X8, 0x0, 0x3B4C3B8
	0x03B4C3A4 ADRP X0, 0x60E000
	0x03B4C3A8 LDR X0, [X0 + 0x9E8]
	0x03B4C3AC BL 0x1C16CF4
	0x03B4C3B0 MOVZ W8, 0x1
	0x03B4C3B4 STRB W8, [X24 + 0x8C7]
	0x03B4C3B8 LDR X1, [X25]
	0x03B4C3BC MOV X0, X23
	0x03B4C3C0 BL 0x2133578
	0x03B4C3C4 STP X0, X1, [X31 + 0x30]
	0x03B4C3C8 LDP S0, S1, [X22]
	0x03B4C3CC LDR V2, [X22 + 0x8]
	0x03B4C3D0 MOV X0, X31
	0x03B4C3D4 BL 0x3887BE4
	0x03B4C3D8 STP S0, S1, [X31 + 0x20]
	0x03B4C3DC STR S2, [X31 + 0x28]
	0x03B4C3E0 LDP S0, S1, [X21]
	0x03B4C3E4 LDR V2, [X21 + 0x8]
	0x03B4C3E8 MOV X0, X31
	0x03B4C3EC BL 0x3887BE4
	0x03B4C3F0 STP S0, S1, [X31 + 0x10]
	0x03B4C3F4 STR S2, [X31 + 0x18]
	0x03B4C3F8 LDP S0, S1, [X20]
	0x03B4C3FC LDR V2, [X20 + 0x8]
	0x03B4C400 MOV X0, X31
	0x03B4C404 BL 0x3887BE4
	0x03B4C408 STP S0, S1, [X31]
	0x03B4C40C ADD X1, X31, 0x20
	0x03B4C410 ADD X2, X31, 0x10
	0x03B4C414 ADD X3, X31, 0x0
	0x03B4C418 ADD X4, X31, 0x30
	0x03B4C41C MOV W0, W19
	0x03B4C420 MOV V0.16B, V8.16B
	0x03B4C424 MOV X5, X31
	0x03B4C428 STR S2, [X31 + 0x8]
	0x03B4C42C BL 0x3B93D50
	0x03B4C430 LDP X20, X19, [X31 + 0x80]
	0x03B4C434 LDP X22, X21, [X31 + 0x70]
	0x03B4C438 LDP X24, X23, [X31 + 0x60]
	0x03B4C43C LDP X30, X25, [X31 + 0x50]
	0x03B4C440 LDR V8, [X31 + 0x40]
	0x03B4C444 ADD X31, X31, 0x90
	0x03B4C448 RET
	0x03B4C44C SUB X31, X31, 0xC0
	0x03B4C450 STP D9, D8, [X31 + 0x50]
	0x03B4C454 STP X29, X30, [X31 + 0x60]
	0x03B4C458 STP X28, X27, [X31 + 0x70]
	0x03B4C45C STP X26, X25, [X31 + 0x80]
	0x03B4C460 STP X24, X23, [X31 + 0x90]
	0x03B4C464 STP X22, X21, [X31 + 0xA0]
	0x03B4C468 STP X20, X19, [X31 + 0xB0]
	0x03B4C46C CMP W1, 0x1
	0x03B4C470 STR D1, [X31 + 0x10]
	0x03B4C474 STP X31, X31, [X31 + 0x40]
	0x03B4C478 STR W31, [X31 + 0x38]
	0x03B4C47C STR X31, [X31 + 0x30]
	0x03B4C480 STR W31, [X31 + 0x28]
	0x03B4C484 STR X31, [X31 + 0x20]
	0x03B4C488 B.LT 0x3B4C614
	0x03B4C48C LDR W8, [X6 + 0x8]
	0x03B4C490 MOV X20, X6
	0x03B4C494 CMP W8, W0
	0x03B4C498 B.LE 0x3B4C614
	0x03B4C49C MOV V8.16B, V0.16B
	0x03B4C4A0 LDR V0, [X31 + 0x1]
	0x03B4C4A4 SXTW X26, W8
	0x03B4C4A8 SBFM X8, X0, 0x3F, 0x1F
	0x03B4C4AC ADD X8, X8, W0, SXTW
	0x03B4C4B0 MOV X21, X5
	0x03B4C4B4 MOV X22, X4
	0x03B4C4B8 MOV W23, W2
	0x03B4C4BC MOV X24, X31
	0x03B4C4C0 EOR W27, W3, 0x1
	0x03B4C4C4 SXTW X25, W0
	0x03B4C4C8 MOV W28, W1
	0x03B4C4CC UNIMPLEMENTED
	0x03B4C4D0 UBFM X19, X8, 0x3E, 0x3D
	0x03B4C4D4 MOVZ W29, 0x1
	0x03B4C4D8 STR X0, [X31 + 0x8]
	0x03B4C4DC LDR X8, [X22]
	0x03B4C4E0 ADD X8, X8, X24
	0x03B4C4E4 LDR W9, [X8 + 0x8]
	0x03B4C4E8 LDR X10, [X8]
	0x03B4C4EC ADD X8, X25, X29
	0x03B4C4F0 SUB X8, X8, 0x1
	0x03B4C4F4 STR W9, [X31 + 0x48]
	0x03B4C4F8 STR X10, [X31 + 0x40]
	0x03B4C4FC TBZ X23, 0x0, 0x3B4C538
	0x03B4C500 LDR X9, [X21]
	0x03B4C504 LDR V0, [X31 + 0x40]
	0x03B4C508 LDR V1, [X31 + 0x48]
	0x03B4C50C LDR V4, [X31 + 0x1]
	0x03B4C510 ADD X9, X9, X24
	0x03B4C514 LDR V2, [X9]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], D10
	003 Move [X31+72], D9
	004 Move [X31+80], D8
	005 Move [X31+88], X30
	006 Move [X31+96], X22
	007 Move [X31+104], X21
	008 Move [X31+112], X20
	009 Move [X31+120], X19
	010 Move X21, 0x897000
	011 Move X22, 0x5A8000
	012 Move W8, [X21+2239]
	013 Move X22, [X22+1432]
	014 Move W20, W1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {34}
	020 Move X0, 0x60F000
	021 Move X0, [X0+2632]
	022 Call 0x1C17CF4
	023 Move X0, 0x5AB000
	024 Move X0, [X0+3544]
	025 Call 0x1C17CF4
	026 Move X0, 0x5B2000
	027 Move X0, [X0+2912]
	028 Call 0x1C17CF4
	029 Move X0, 0x5A8000
	030 Move X0, [X0+1432]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+2239], W8
	034 Move [X31+56], W31
	035 Move [X31+40], X31
	036 Move [X31+48], X31
	037 Move [X31+24], X31
	038 Move [X31+32], X31
	039 Move [X31+16], X31
	040 Move [X31+8], W31
	041 Move [X31], X31
	042 Move W9, [X19+368]
	043 Add X8, X19, 128
	044 Add X10, X19, 120
	045 And W31, W20, 1
	046 NotImplemented "Instruction CSEL not yet implemented."
	047 Add X10, X19, 360
	048 NotImplemented "Instruction CMP not yet implemented."
	049 NotImplemented "Instruction CSEL not yet implemented."
	050 Move X8, [X8]
	051 Move X20, [X19+200]
	052 Move [X19+200], X8
	053 Move X0, [X22]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, X20
	059 Move X1, X31
	060 Move X2, X31
	061 Call Object.op_Inequality, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {86}
	066 Move X0, [X22]
	067 Move X21, [X19+200]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X0, X20
	073 Move X1, X21
	074 Move X2, X31
	075 Call Object.op_Inequality, X0, X1
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {86}
	080 Compare X20, 0
	081 JumpIfEqual {224}
	082 Move X0, X20
	083 Move W1, W31
	084 Move X2, X31
	085 Call GameObject.SetActive, X0, X1
	086 Move X0, [X22]
	087 Move X20, [X19+200]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move X0, X20
	093 Move X1, X31
	094 Move X2, X31
	095 Call Object.op_Inequality, X0, X1
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfNotEqual {214}
	100 Move X0, [X19+200]
	101 Compare X0, 0
	102 JumpIfEqual {224}
	103 Move X1, X31
	104 Call GameObject.get_transform, X0
	105 Compare X0, 0
	106 JumpIfEqual {224}
	107 Move S1, [X19+172]
	108 Move S2, [X19+176]
	109 Move V0, [X19+168]
	110 Move X1, X31
	111 Call Transform.set_position, X0, X1
	112 Move W8, [X19+442]
	113 Compare W8, 0
	114 JumpIfEqual {142}
	115 Move X0, [X19+248]
	116 Call XRHoverInteractorExtensions.GetOldestInteractableHovered, X0
	117 Move X22, 0x60F000
	118 Move X22, [X22+2632]
	119 Move X1, [X22]
	120 Call 0x1C17E00
	121 Compare X0, 0
	122 JumpIfEqual {142}
	123 Move X8, [X0]
	124 Move X21, [X19+248]
	125 Move S8, [X19+180]
	126 Move S9, [X19+184]
	127 Move V10, [X19+188]
	128 NotImplemented "Instruction LDRH not yet implemented."
	129 Move X1, [X22]
	130 Move X20, X0
	131 Compare X9, 0
	132 JumpIfEqual {139}
	133 Move X10, [X8+176]
	134 Add X10, X10, 8
	135 NotImplemented "Instruction LDUR not yet implemented."
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Subtract X9, X9, 1
	138 Add X10, X10, 16
	139 Move X0, X20
	140 Move W2, W31
	141 Call 0x1C5D788
	142 Move X0, [X19+200]
	143 Compare X0, 0
	144 JumpIfEqual {224}
	145 Move X1, X31
	146 Call GameObject.get_transform, X0
	147 Compare X0, 0
	148 JumpIfEqual {224}
	149 Move S1, [X19+184]
	150 Move S0, [X19+188]
	151 Move V3, [X19+180]
	152 Move X1, X31
	153 NotImplemented "Instruction FNEG not yet implemented."
	154 NotImplemented "Instruction FNEG not yet implemented."
	155 NotImplemented "Instruction FNEG not yet implemented."
	156 Call Transform.set_forward, X0, X1
	157 NotImplemented "Instruction LDRSW not yet implemented."
	158 Add X8, X8, X9
	159 Add X0, X8, 312
	160 Move X8, [X0]
	161 Move X4, [X0+8]
	162 Add X2, X31, 48
	163 Add X3, X31, 32
	164 Move X0, X20
	165 Move X1, X21
	166 Move V0, V8
	167 Move V1, V9
	168 Move V2, V10
	169 NotImplemented "Instruction BLR not yet implemented."
	170 Move W8, [X31+32]
	171 Compare W8, 0
	172 JumpIfEqual {178}
	173 Move X8, 0x5B2000
	174 Move X8, [X8+2912]
	175 Add X0, X31, 32
	176 Move X1, [X8]
	177 Call Nullable`1<Vector3>.get_Value, X0
	178 Move X0, [X19+200]
	179 Compare X0, 0
	180 JumpIfEqual {224}
	181 Move X1, X31
	182 Call GameObject.get_transform, X0
	183 Compare X0, 0
	184 JumpIfEqual {224}
	185 Move X1, X31
	186 Call Transform.get_forward, X0
	187 Add X0, X31, 0
	188 Add X1, X31, 48
	189 Add X2, X31, 16
	190 Move X3, X31
	191 Move [X31], S0
	192 Move [X31+8], S1
	193 Move [X31+8], S2
	194 Call BurstMathUtility.LookRotationWithForwardProjectedOnPlane, X0, X1, X2
	195 Move X0, [X19+200]
	196 Compare X0, 0
	197 JumpIfEqual {224}
	198 Move X1, X31
	199 Call GameObject.get_transform, X0
	200 Compare X0, 0
	201 JumpIfEqual {224}
	202 Move S2, [X31+24]
	203 Move S3, [X31+28]
	204 Move S0, [X31+16]
	205 Move S1, [X31+20]
	206 Move X1, X31
	207 Call Transform.set_rotation, X0, X1
	208 Move X0, [X19+200]
	209 Compare X0, 0
	210 JumpIfEqual {224}
	211 Move W1, 1
	212 Move X2, X31
	213 Call GameObject.SetActive, X0, X1
	214 Move X20, [X31+112]
	215 Move X19, [X31+120]
	216 Move X22, [X31+96]
	217 Move X21, [X31+104]
	218 Move X30, [X31+88]
	219 Move D9, [X31+72]
	220 Move D8, [X31+80]
	221 Move V10, [X31+64]
	222 Add X31, X31, 128
	223 Return 
	224 Call 0x1C17F20

Method: System.Void ClearReticle()

Disassembly:
	0x03B4C518 LDR V3, [X9 + 0x8]
	0x03B4C51C FSUB V0.2S, V0.2S, V2.2S
	0x03B4C520 FSUB S1, S1, S3
	0x00000000 INVALID
	0x03B4C528 FMUL S4, S1, S4
	0x03B4C52C FADD V1.2S, V2.2S, V0.2S
	0x03B4C530 FADD S0, S3, S4
	0x03B4C534 B 0x3B4C540
	0x03B4C538 LDR V1, [X31 + 0x40]
	0x03B4C53C LDR V0, [X31 + 0x48]
	0x03B4C540 CMP X8, 0x1
	0x03B4C544 CSET W8, LT
	0x03B4C548 CMP W26, 0x1
	0x03B4C54C STR D1, [X31 + 0x30]
	0x03B4C550 STR S0, [X31 + 0x38]
	0x03B4C554 B.LT 0x3B4C59C
	0x03B4C558 ORR W8, W8, W27, 0x0
	0x03B4C55C TBNZ X8, 0x0, 0x3B4C59C
	0x03B4C560 LDR X8, [X20]
	0x03B4C564 AND W0, W23, 0x1
	0x03B4C568 ADD X1, X31, 0x40
	0x03B4C56C ADD X2, X31, 0x20
	0x03B4C570 ADD X8, X8, X19
	0x03B4C574 ADD X8, X8, X24
	0x03B4C578 LDUR W9, [X8 - 0x4]
	0x03B4C57C LDUR X8, [X8 - 0xC]
	0x03B4C580 ADD X3, X31, 0x30
	0x03B4C584 ADD X4, X31, 0x4C
	0x03B4C588 MOV V0.16B, V8.16B
	0x03B4C58C STR W9, [X31 + 0x28]
	0x03B4C590 STR X8, [X31 + 0x20]
	0x03B4C594 BL 0x3B4B964
	0x03B4C598 TBNZ X0, 0x0, 0x3B4C5E8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x897000
	006 Move X20, 0x5A8000
	007 Move W8, [X21+2240]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5A8000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2240], W8
	019 Move X0, [X20]
	020 Move X20, [X19+200]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {40}
	033 Move X0, [X19+200]
	034 Compare X0, 0
	035 JumpIfEqual {45}
	036 Move W1, W31
	037 Move X2, X31
	038 Call GameObject.SetActive, X0, X1
	039 Move [X19+200], X31
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return 
	045 Call 0x1C17F20

Method: System.Void SetColorGradient(UnityEngine.Gradient colorGradient)

Disassembly:
	0x03B4C208 CBNZ W8, 0x3B4C220
	0x03B4C20C ADRP X0, 0x5A7000
	0x03B4C210 LDR X0, [X0 + 0x5A0]
	0x03B4C214 BL 0x1C16CF4
	0x03B4C218 MOVZ W8, 0x1
	0x03B4C21C STRB W8, [X21 + 0x783]
	0x03B4C220 CBZ X20, 0x3B4C318
	0x03B4C224 LDR W9, [X20 + 0x18]
	0x03B4C228 CBZ W9, 0x3B4C314
	0x03B4C22C ADRP X8, 0x5A7000
	0x03B4C230 LDR X8, [X8 + 0x5A0]

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+72]
	003 Compare W8, 0
	004 JumpIfEqual {12}
	005 Move X0, [X0+208]
	006 Compare X0, 0
	007 JumpIfEqual {14}
	008 Move X2, X31
	009 Move X30, [X31+16]
	010 Call LineRenderer.set_colorGradient, X0, X1
	011 Return 
	012 Move X30, [X31+16]
	013 Return 
	014 Call 0x1C17F20

Method: System.Void UpdateSettings()

Disassembly:
	0x03B49BBC STR V0, [X31 + 0x2]
	0x03B49BC0 STR X8, [X31 + 0x30]
	0x03B49BC4 ADRP X22, 0x611000
	0x03B49BC8 LDR X22, [X22 + 0x160]
	0x03B49BCC LDR X1, [X21]
	0x03B49BD0 ADD X0, X31, 0x20
	0x03B49BD4 BL 0x2BC4350
	0x03B49BD8 TBZ X0, 0x0, 0x3B49C38
	0x03B49BDC LDR X0, [X31 + 0x30]
	0x03B49BE0 LDR X1, [X22]
	0x03B49BE4 BL 0x1C16E00
	0x03B49BE8 MOV X2, X0
	0x03B49BEC CBZ X0, 0x3B49BCC
	0x03B49BF0 CBZ X20, 0x3B49C60
	0x03B49BF4 LDR X1, [X19 + 0x100]
	0x03B49BF8 MOV X0, X20
	0x03B49BFC MOV X3, X31
	0x03B49C00 BL 0x3B70244
	0x03B49C04 TBZ X0, 0x0, 0x3B49BCC
	0x03B49C08 ADRP X8, 0x611000
	0x03B49C0C LDR X8, [X8 + 0x9C0]
	0x03B49C10 ADD X0, X31, 0x20
	0x03B49C14 LDR X1, [X8]
	0x03B49C18 BL 0x2BC434C
	0x03B49C1C B 0x3B49AD0
	0x03B49C20 MOV X0, X19
	0x03B49C24 BL 0x3B4B518
	0x03B49C28 LDR X1, [X19 + 0x58]
	0x03B49C2C MOV X0, X19
	0x03B49C30 BL 0x3B4B208
	0x03B49C34 B 0x3B49AF0
	0x03B49C38 ADRP X8, 0x611000
	0x03B49C3C LDR X8, [X8 + 0x9C0]
	0x03B49C40 ADD X0, X31, 0x20
	0x03B49C44 LDR X1, [X8]
	0x03B49C48 BL 0x2BC434C
	0x03B49C4C CBZ X19, 0x3B49C5C
	0x03B49C50 ADD X8, X19, 0x60
	0x03B49C54 MOVZ W20, 0x1
	0x03B49C58 B 0x3B49AD8
	0x03B49C5C BL 0x1C16F20
	0x03B49C60 BL 0x1C16F20
	0x03B49C64 B 0x3B49C70
	0x03B49C68 B 0x3B49C70
	0x03B49C6C B 0x3B49C70
	0x03B49C70 MOV X20, X0
	0x03B49C74 CMP W1, 0x1
	0x03B49C78 B.NE 0x3B49CAC
	0x03B49C7C MOV X0, X20
	0x03B49C80 BL 0x3EB1AD0
	0x03B49C84 LDR X21, [X0]
	0x03B49C88 BL 0x3EB1AE0
	0x03B49C8C ADRP X8, 0x611000
	0x03B49C90 LDR X8, [X8 + 0x9C0]
	0x03B49C94 ADD X0, X31, 0x20
	0x03B49C98 LDR X1, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x89A000
	005 Move W8, [X20+2241]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x612000
	012 Move X0, [X0+2392]
	013 Call 0x1C17CF4
	014 Move X0, 0x612000
	015 Move X0, [X0+2400]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2241], W8
	019 Move V0, [X19+112]
	020 Move X0, X19
	021 Multiply S0, S0, S0
	022 Move [X19+164], S0
	023 Call XRInteractorLineVisual.TryFindLineRenderer, X0
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {49}
	028 Move X0, [X19+208]
	029 Compare X0, 0
	030 JumpIfEqual {69}
	031 Move X8, -50716672
	032 Move X9, -50720768
	033 Move V0, [X19+32]
	034 Move V1, [X8+512]
	035 Move V2, [X9+3880]
	036 Move X1, X31
	037 NotImplemented "Instruction FMIN not yet implemented."
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 NotImplemented "Instruction FCSEL not yet implemented."
	040 Call LineRenderer.set_widthMultiplier, X0, V0
	041 Move X0, [X19+208]
	042 Compare X0, 0
	043 JumpIfEqual {69}
	044 Move X1, [X19+64]
	045 Move X2, X31
	046 Call LineRenderer.set_widthCurve, X0, X1
	047 Move W8, 1
	048 Move [X19+196], W8
	049 Move X0, [X19+456]
	050 Compare X0, 0
	051 JumpIfEqual {69}
	052 Move X8, 0x612000
	053 Move X8, [X8+2400]
	054 Move V0, [X19+40]
	055 Move X1, [X8]
	056 Call TweenableVariableBase`1<Single>.set_target, X0, V0
	057 Move X0, [X19+456]
	058 Compare X0, 0
	059 JumpIfEqual {69}
	060 Move X8, 0x612000
	061 Move X8, [X8+2392]
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move S0, 1
	065 Move X1, [X8]
	066 Move X30, [X31+32]
	067 Call TweenableVariableBase`1<Single>.HandleTween, X0, V0
	068 Return 
	069 Call 0x1C17F20

Method: System.Boolean TryFindLineRenderer()

Disassembly:
	0x03B4CAFC LDR W9, [X0 + 0xE0]
	0x03B4CB00 LDR X22, [X8]
	0x03B4CB04 CBNZ W9, 0x3B4CB0C
	0x03B4CB08 BL 0x1C16DFC
	0x03B4CB0C MOV X0, X20
	0x03B4CB10 MOV X1, X21
	0x03B4CB14 MOV X2, X22
	0x03B4CB18 MOV X3, X31
	0x03B4CB1C BL 0x36FAD70
	0x03B4CB20 LDR X8, [X23]
	0x03B4CB24 LDR X9, [X8 + 0xB8]
	0x03B4CB28 STR X0, [X9]
	0x03B4CB2C LDR W9, [X8 + 0xE0]
	0x03B4CB30 CBNZ W9, 0x3B4CB40
	0x03B4CB34 MOV X0, X8
	0x03B4CB38 BL 0x1C16DFC
	0x03B4CB3C LDR X8, [X23]
	0x03B4CB40 LDR X8, [X8 + 0xB8]
	0x03B4CB44 LDP X22, X21, [X31 + 0x10]
	0x03B4CB48 LDR X8, [X8]
	0x03B4CB4C STR X8, [X19]
	0x03B4CB50 LDP X20, X19, [X31 + 0x20]
	0x03B4CB54 LDP X30, X23, [X31], #0x30
	0x03B4CB58 RET
	0x03B4CB5C STR X30, [X31 - 0x20]!
	0x03B4CB60 STP X20, X19, [X31 + 0x10]
	0x03B4CB64 ADRP X20, 0x896000
	0x03B4CB68 ADRP X19, 0x60E000
	0x03B4CB6C LDRB W8, [X20 + 0x8CA]
	0x03B4CB70 LDR X19, [X19 + 0xA18]
	0x03B4CB74 TBNZ X8, 0x0, 0x3B4CB8C
	0x03B4CB78 ADRP X0, 0x60E000
	0x03B4CB7C LDR X0, [X0 + 0xA18]
	0x03B4CB80 BL 0x1C16CF4
	0x03B4CB84 MOVZ W8, 0x1
	0x03B4CB88 STRB W8, [X20 + 0x8CA]
	0x03B4CB8C LDR X0, [X19]
	0x03B4CB90 STR X31, [X31 + 0x8]
	0x03B4CB94 LDR W8, [X0 + 0xE0]
	0x03B4CB98 CBNZ W8, 0x3B4CBA0
	0x03B4CB9C BL 0x1C16DFC
	0x03B4CBA0 ADD X0, X31, 0x8
	0x03B4CBA4 BL 0x3B4CA40
	0x03B4CBA8 LDR X0, [X31 + 0x8]
	0x03B4CBAC LDP X20, X19, [X31 + 0x10]
	0x03B4CBB0 LDR X30, [X31], #0x20
	0x03B4CBB4 RET
	0x03B4CBB8 STP X30, X21, [X31 - 0x20]!
	0x03B4CBBC STP X20, X19, [X31 + 0x10]
	0x03B4CBC0 ADRP X21, 0x896000
	0x03B4CBC4 ADRP X19, 0x60E000
	0x03B4CBC8 ADRP X20, 0x5CF000
	0x03B4CBCC LDRB W8, [X21 + 0x8CB]
	0x03B4CBD0 LDR X19, [X19 + 0xAB0]
	0x03B4CBD4 LDR X20, [X20 + 0x848]
	0x03B4CBD8 TBNZ X8, 0x0, 0x3B4CC08
	0x03B4CBDC ADRP X0, 0x5CF000
	0x03B4CBE0 LDR X0, [X0 + 0x848]
	0x03B4CBE4 BL 0x1C16CF4
	0x03B4CBE8 ADRP X0, 0x60E000
	0x03B4CBEC LDR X0, [X0 + 0xA18]
	0x03B4CBF0 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x897000
	007 Move X22, 0x60F000
	008 Move X21, 0x5A8000
	009 Move W8, [X20+2242]
	010 Move X22, [X22+2672]
	011 Move X21, [X21+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0x60F000
	018 Move X0, [X0+2672]
	019 Call 0x1C17CF4
	020 Move X0, 0x5A8000
	021 Move X0, [X0+2600]
	022 Call 0x1C17CF4
	023 Move X0, 0x5A8000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move X0, 0x60F000
	027 Move X0, [X0+2680]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+2242], W8
	031 Move X1, [X22]
	032 Move X0, X19
	033 Call 0x21A4894, X0
	034 Move [X19+208], X0
	035 Move X20, X0
	036 Move X0, [X21]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X20
	042 Move X1, X31
	043 Move X2, X31
	044 Call Object.op_Equality, X0, X1
	045 Move W20, W0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {67}
	050 Move X8, 0x5A8000
	051 Move X8, [X8+2600]
	052 Move X21, 0x60F000
	053 Move X0, [X8]
	054 Move W8, [X0+224]
	055 Move X21, [X21+2680]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, [X21]
	060 Move X1, X19
	061 Move X2, X31
	062 Call Debug.LogWarning, X0, X1
	063 Move X0, X19
	064 Move W1, W31
	065 Move X2, X31
	066 Call Behaviour.set_enabled, X0, X1
	067 NotImplemented "Instruction ORN not yet implemented."
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 And W0, W8, 1
	073 Move X30, [X31+48]
	074 Return X0

Method: System.Void ClearLineRenderer()

Disassembly:
	0x03B49EE8 LDP X1, X2, [X20]
	0x03B49EEC LDR W3, [X19]
	0x03B49EF0 LDR X8, [X8 + 0x9F8]
	0x03B49EF4 LDR X4, [X8]
	0x03B49EF8 BL 0x23F193C
	0x03B49EFC B 0x3B4A008
	0x03B49F00 ADRP X22, 0x88F000
	0x03B49F04 LDRB W8, [X22 + 0x783]
	0x03B49F08 CBNZ W8, 0x3B49F20
	0x03B49F0C ADRP X0, 0x5AA000
	0x03B49F10 LDR X0, [X0 + 0x5A0]
	0x03B49F14 BL 0x1C16CF4
	0x03B49F18 MOVZ W8, 0x1
	0x03B49F1C STRB W8, [X22 + 0x783]
	0x03B49F20 ADRP X8, 0x5AA000
	0x03B49F24 LDR X8, [X8 + 0x5A0]
	0x03B49F28 LDR X8, [X8]
	0x03B49F2C LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call XRInteractorLineVisual.TryFindLineRenderer, X0
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {24}
	009 Move X0, [X19+208]
	010 Compare X0, 0
	011 JumpIfEqual {27}
	012 Move X1, [X19+352]
	013 Move X2, X31
	014 Call LineRenderer.SetPositions, X0, X1
	015 Move X0, [X19+208]
	016 Compare X0, 0
	017 JumpIfEqual {27}
	018 Move W1, W31
	019 Move X2, X31
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Call LineRenderer.set_positionCount, X0, X1
	023 Return 
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Return 
	027 Call 0x1C17F20

Method: System.Void FindXROrigin()

Disassembly:
	0x03B49E58 B 0x3B49F38
	0x03B49E5C LDR X22, [X21 + 0xD8]
	0x03B49E60 CBZ X22, 0x3B4A02C
	0x03B49E64 ADRP X10, 0x611000
	0x03B49E68 LDR X8, [X22]
	0x03B49E6C LDR X10, [X10 + 0x9F0]
	0x03B49E70 ADD X21, X21, 0x128
	0x03B49E74 LDRH W9, [X8 + 0x12E]
	0x03B49E78 LDR X1, [X10]
	0x03B49E7C CBZ X9, 0x3B49EA0
	0x03B49E80 LDR X10, [X8 + 0xB0]
	0x03B49E84 ADD X10, X10, 0x8
	0x03B49E88 LDUR X11, [X10 - 0x8]
	0x03B49E8C CMP X11, X1
	0x03B49E90 B.EQ 0x3B49EB0
	0x03B49E94 SUBS X9, X9, 0x1
	0x03B49E98 ADD X10, X10, 0x10
	0x03B49E9C B.NE 0x3B49E88
	0x03B49EA0 MOV X0, X22
	0x03B49EA4 MOV W2, W31
	0x03B49EA8 BL 0x1C5C788
	0x03B49EAC B 0x3B49EBC
	0x03B49EB0 LDRSW X9, [X10]
	0x03B49EB4 ADD X8, X8, X9, 0x4, LSL
	0x03B49EB8 ADD X0, X8, 0x138
	0x03B49EBC LDP X8, X3, [X0]
	0x03B49EC0 MOV X0, X22
	0x03B49EC4 MOV X1, X21
	0x03B49EC8 MOV X2, X19
	0x03B49ECC BLR X8
	0x03B49ED0 LDR W1, [X19]
	0x03B49ED4 MOV W22, W0
	0x03B49ED8 MOV X0, X20
	0x03B49EDC BL 0x3B4A8FC
	0x03B49EE0 ADRP X8, 0x611000
	0x03B49EE4 LDR X0, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x89A000
	006 Move X20, 0x5AB000
	007 Move W8, [X21+2243]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x612000
	015 Move X0, [X0+2424]
	016 Call 0x1C17CF4
	017 Move X0, 0x5AB000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2243], W8
	022 Move X0, [X20]
	023 Move X20, [X19+432]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {46}
	036 Move X8, 0x612000
	037 Move X8, [X8+2424]
	038 Add X0, X19, 432
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X1, [X8]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Call 0x2960A30, X0
	045 Return 
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Return 

Method: System.Void SetupReticle()

Disassembly:
	0x03B4985C FADD V1.2S, V4.2S, V1.2S
	0x03B49860 FADD S2, S5, S2
	0x03B49864 STR D1, [X31 + 0x80]
	0x03B49868 STR S2, [X31 + 0x88]
	0x03B4986C LDR X8, [X19 + 0x148]
	0x03B49870 LDR V1, [X31 + 0x90]
	0x03B49874 LDR V2, [X31 + 0x98]
	0x03B49878 LDR V3, [X8]
	0x03B4987C LDR V4, [X8 + 0x8]
	0x03B49880 FSUB V1.2S, V1.2S, V3.2S
	0x03B49884 FSUB S2, S2, S4
	0x00000000 INVALID
	0x03B4988C FMUL S0, S0, S2
	0x03B49890 FADD V1.2S, V3.2S, V1.2S
	0x03B49894 FADD S0, S4, S0
	0x03B49898 STR D1, [X31 + 0x90]
	0x03B4989C STR S0, [X31 + 0x98]
	0x03B498A0 LDR W8, [X31 + 0x88]
	0x03B498A4 LDR X9, [X31 + 0x80]
	0x03B498A8 ADD X10, X19, 0x184
	0x03B498AC STR W8, [X10 + 0x8]
	0x03B498B0 STR X9, [X10]
	0x03B498B4 LDR W0, [X19 + 0x120]
	0x03B498B8 LDR V0, [X19 + 0x8C]
	0x03B498BC ADD X1, X31, 0x90
	0x03B498C0 ADD X2, X31, 0x80
	0x03B498C4 ADD X3, X31, 0x70
	0x03B498C8 MOV X4, X21
	0x03B498CC BL 0x3B4A9B8
	0x03B498D0 LDR W9, [X19 + 0x158]
	0x03B498D4 LDR W8, [X19 + 0x120]
	0x03B498D8 STRB W24, [X19 + 0x180]
	0x03B498DC CMP W9, W8
	0x03B498E0 B.NE 0x3B4995C
	0x03B498E4 SUBS W8, W9, 0x1
	0x03B498E8 B.LT 0x3B49964
	0x03B498EC LDRB W10, [X19 + 0x69]
	0x03B498F0 CBZ W10, 0x3B49964
	0x03B498F4 LDR W10, [X19 + 0x150]
	0x03B498F8 CMP W9, W10
	0x03B498FC B.GT 0x3B49964
	0x03B49900 LDR W10, [X19 + 0x118]
	0x03B49904 CMP W9, W10
	0x03B49908 B.GT 0x3B49964
	0x03B4990C LDR X9, [X19 + 0x148]
	0x03B49910 LDR X10, [X19 + 0x110]
	0x03B49914 MOVZ W11, 0xC
	0x03B49918 SMADDL X9, X8, X11, X9
	0x03B4991C SMADDL X8, X8, X11, X10
	0x03B49920 LDR V0, [X9]
	0x03B49924 LDR V1, [X8]
	0x03B49928 LDUR V2, [X9 + 0x4]
	0x03B4992C LDUR V3, [X8 + 0x4]
	0x03B49930 FSUB S0, S0, S1
	0x03B49934 LDR V1, [X19 + 0xA4]
	0x03B49938 FSUB V2.2S, V2.2S, V3.2S
	0x03B4993C FMUL S0, S0, S0
	0x00000000 INVALID

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x89A000
	007 Move X21, 0x5AB000
	008 Move W8, [X20+2244]
	009 Move X21, [X21+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x5AB000
	016 Move X0, [X0+3448]
	017 Call 0x1C17CF4
	018 Move X0, 0x5AB000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2244], W8
	023 Move X0, [X21]
	024 Move X20, [X19+120]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {69}
	037 Move X0, [X19+120]
	038 Compare X0, 0
	039 JumpIfEqual {75}
	040 Move X1, X31
	041 Call GameObject.get_scene, X0
	042 Move [X31+8], W0
	043 Add X0, X31, 8
	044 Move X1, X31
	045 Call Scene.IsValid, X0
	046 Move X20, [X19+120]
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {63}
	051 Move X0, [X21]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move X8, 0x5AB000
	057 Move X8, [X8+3448]
	058 Move X0, X20
	059 Move X1, [X8]
	060 Call 0x222E35C, X0
	061 Move X20, X0
	062 Move [X19+120], X0
	063 Compare X20, 0
	064 JumpIfEqual {75}
	065 Move X0, X20
	066 Move W1, W31
	067 Move X2, X31
	068 Call GameObject.SetActive, X0, X1
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X30, [X31+16]
	072 Move X21, [X31+24]
	073 Add X31, X31, 48
	074 Return 
	075 Call 0x1C17F20

Method: System.Void SetupBlockedReticle()

Disassembly:
	0x03B499CC STP X0, X1, [X31 + 0x58]
	0x03B499D0 MOV X0, X23
	0x03B499D4 MOV X1, X8
	0x03B499D8 BL 0x2133578
	0x03B499DC LDR X8, [X25]
	0x03B499E0 STP X0, X1, [X31 + 0x48]
	0x03B499E4 MOV X0, X22
	0x03B499E8 MOV X1, X8
	0x03B499EC BL 0x2133578
	0x03B499F0 STP X0, X1, [X31 + 0x38]
	0x03B499F4 LDRB W8, [X19 + 0x24]
	0x03B499F8 CBZ W8, 0x3B49A38
	0x03B499FC LDRB W9, [X19 + 0x2C]
	0x03B49A00 CBZ W9, 0x3B49A38
	0x03B49A04 LDRB W8, [X19 + 0x19D]
	0x03B49A08 LDR V0, [X19 + 0x30]
	0x03B49A0C LDR V1, [X19 + 0x28]
	0x03B49A10 LDP S2, S3, [X19 + 0x38]
	0x03B49A14 LDRB W4, [X19 + 0x34]
	0x03B49A18 ORR W3, W20, W8, 0x0
	0x03B49A1C ADD X1, X31, 0x90
	0x03B49A20 ADD X2, X31, 0x70
	0x03B49A24 MOV X0, X19
	0x03B49A28 BL 0x3B4AE80
	0x03B49A2C LDRB W8, [X19 + 0x24]
	0x03B49A30 MOV V8.16B, V0.16B
	0x03B49A34 B 0x3B49A3C
	0x03B49A38 LDR V8, [X19 + 0x28]
	0x03B49A3C LDR W21, [X19 + 0x140]
	0x03B49A40 LDR W22, [X19 + 0x120]
	0x03B49A44 LDR V9, [X19 + 0x6C]
	0x03B49A48 CMP W24, 0x0
	0x03B49A4C CSET W23, NE
	0x03B49A50 CMP W8, 0x0
	0x03B49A54 MOV X0, X31
	0x03B49A58 CSET W24, NE
	0x03B49A5C BL 0x3C3C714
	0x03B49A60 FMUL S1, S9, S0
	0x03B49A64 ADD X4, X31, 0x58
	0x03B49A68 ADD X5, X31, 0x48
	0x03B49A6C ADD X6, X31, 0x38
	0x03B49A70 MOV W0, W21
	0x03B49A74 MOV W1, W22
	0x03B49A78 MOV V0.16B, V8.16B
	0x03B49A7C MOV W2, W23
	0x03B49A80 MOV W3, W24
	0x03B49A84 BL 0x3B4B068
	0x03B49A88 B 0x3B49AB4
	0x03B49A8C ADRP X8, 0x611000
	0x03B49A90 LDP X0, X1, [X19 + 0x110]
	0x03B49A94 LDP X3, X4, [X19 + 0x130]
	0x03B49A98 LDR W6, [X19 + 0x120]
	0x03B49A9C LDR X8, [X8 + 0x9E0]
	0x03B49AA0 MOV W2, W31
	0x03B49AA4 MOV W5, W31
	0x03B49AA8 LDR X7, [X8]
	0x03B49AAC BL 0x23F1A04
	0x03B49AB0 LDR W0, [X19 + 0x120]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x89A000
	007 Move X21, 0x5AB000
	008 Move W8, [X20+2245]
	009 Move X21, [X21+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x5AB000
	016 Move X0, [X0+3448]
	017 Call 0x1C17CF4
	018 Move X0, 0x5AB000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2245], W8
	023 Move X0, [X21]
	024 Move X20, [X19+128]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {69}
	037 Move X0, [X19+128]
	038 Compare X0, 0
	039 JumpIfEqual {75}
	040 Move X1, X31
	041 Call GameObject.get_scene, X0
	042 Move [X31+8], W0
	043 Add X0, X31, 8
	044 Move X1, X31
	045 Call Scene.IsValid, X0
	046 Move X20, [X19+128]
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {63}
	051 Move X0, [X21]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move X8, 0x5AB000
	057 Move X8, [X8+3448]
	058 Move X0, X20
	059 Move X1, [X8]
	060 Call 0x222E35C, X0
	061 Move X20, X0
	062 Move [X19+128], X0
	063 Compare X20, 0
	064 JumpIfEqual {75}
	065 Move X0, X20
	066 Move W1, W31
	067 Move X2, X31
	068 Call GameObject.SetActive, X0, X1
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X30, [X31+16]
	072 Move X21, [X31+24]
	073 Add X31, X31, 48
	074 Return 
	075 Call 0x1C17F20

Method: System.Boolean AttachCustomReticle(UnityEngine.GameObject reticleInstance)

Disassembly:
	0x03B4CBF4 ADRP X0, 0x60E000
	0x03B4CBF8 LDR X0, [X0 + 0xAB0]
	0x03B4CBFC BL 0x1C16CF4
	0x03B4CC00 MOVZ W8, 0x1
	0x03B4CC04 STRB W8, [X21 + 0x8CB]
	0x03B4CC08 LDR X0, [X20]

ISIL:
	001 Move X8, X0
	002 Move [X0+360], X1
	003 Move W9, 1
	004 Move W0, 1
	005 Move [X8+368], W9
	006 Return X0

Method: System.Boolean RemoveCustomReticle()

Disassembly:
	0x03B4CC0C ADRP X20, 0x60E000
	0x03B4CC10 LDR X19, [X19]
	0x03B4CC14 LDR W8, [X0 + 0xE0]
	0x03B4CC18 LDR X20, [X20 + 0xA18]
	0x03B4CC1C CBNZ W8, 0x3B4CC24

ISIL:
	001 Move X8, X0
	002 Move [X0+360], X31
	003 Move W0, 1
	004 Move [X8+368], W31
	005 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03B4CC20 BL 0x1C16DFC
	0x03B4CC24 MOV X0, X19
	0x03B4CC28 MOV X1, X31
	0x03B4CC2C BL 0x36FA754
	0x03B4CC30 LDR X8, [X20]
	0x03B4CC34 MOV X19, X0
	0x03B4CC38 LDR W9, [X8 + 0xE0]
	0x03B4CC3C CBNZ W9, 0x3B4CC4C
	0x03B4CC40 MOV X0, X8
	0x03B4CC44 BL 0x1C16DFC
	0x03B4CC48 LDR X8, [X20]
	0x03B4CC4C LDR X8, [X8 + 0xB8]
	0x03B4CC50 STR X19, [X8 + 0x8]
	0x03B4CC54 LDP X20, X19, [X31 + 0x10]
	0x03B4CC58 LDP X30, X21, [X31], #0x20
	0x03B4CC5C RET
	0x03B4CC60 RET
	0x03B4CC64 B 0x3B4CBB8
	0x03B4CC68 STP X30, X21, [X31 - 0x20]!
	0x03B4CC6C STP X20, X19, [X31 + 0x10]
	0x03B4CC70 LDR X8, [X2 + 0x8]
	0x03B4CC74 STP X1, X2, [X0 + 0x20]
	0x03B4CC78 MOV X19, X0
	0x03B4CC7C MOV X20, X1
	0x03B4CC80 STR X8, [X0 + 0x10]
	0x03B4CC84 LDRB W21, [X2 + 0x52]
	0x03B4CC88 STR X0, [X0 + 0x40]
	0x03B4CC8C MOV X0, X2
	0x03B4CC90 BL 0x1C16D84
	0x03B4CC94 TBZ X0, 0x0, 0x3B4CCB0
	0x03B4CC98 CMP W21, 0x9
	0x03B4CC9C B.NE 0x3B4CCB4
	0x03B4CCA0 ADRP X8, 0xFFFFFFFFFE0B1000
	0x03B4CCA4 ADD X8, X8, 0xADC
	0x03B4CCA8 STR X8, [X19 + 0x18]
	0x03B4CCAC B 0x3B4CCC4
	0x03B4CCB0 CBZ X20, 0x3B4CCDC
	0x03B4CCB4 LDR X8, [X19 + 0x10]
	0x03B4CCB8 LDR X9, [X19 + 0x20]
	0x03B4CCBC STR X8, [X19 + 0x18]
	0x03B4CCC0 STR X9, [X19 + 0x40]
	0x03B4CCC4 ADRP X8, 0xFFFFFFFFFE0B1000
	0x03B4CCC8 ADD X8, X8, 0xA20
	0x03B4CCCC STR X8, [X19 + 0x38]
	0x03B4CCD0 LDP X20, X19, [X31 + 0x10]
	0x03B4CCD4 LDP X30, X21, [X31], #0x20
	0x03B4CCD8 RET
	0x03B4CCDC ADRP X1, 0xFFFFFFFFFCFCF000
	0x03B4CCE0 ADD X1, X1, 0xEE3
	0x03B4CCE4 MOV X0, X31
	0x03B4CCE8 BL 0x1C16F3C
	0x03B4CCEC MOV X1, X31
	0x03B4CCF0 BL 0x1C16DEC
	0x03B4CCF4 LDR X8, [X0 + 0x40]
	0x03B4CCF8 LDR X9, [X0 + 0x18]
	0x03B4CCFC LDR X10, [X0 + 0x28]
	0x03B4CD00 AND W3, W3, 0x1
	0x03B4CD04 AND W4, W4, 0x1
	0x03B4CD08 MOV X0, X8
	0x03B4CD0C STR X10, [X31]
	0x03B4CD10 BR X9
	0x03B4CD14 SUB X31, X31, 0xD0
	0x03B4CD18 STP X29, X30, [X31 + 0x70]
	0x03B4CD1C STP X28, X27, [X31 + 0x80]
	0x03B4CD20 STP X26, X25, [X31 + 0x90]
	0x03B4CD24 STP X24, X23, [X31 + 0xA0]
	0x03B4CD28 STP X22, X21, [X31 + 0xB0]
	0x03B4CD2C STP X20, X19, [X31 + 0xC0]
	0x03B4CD30 AND W8, W3, 0x1
	0x03B4CD34 AND W9, W4, 0x1
	0x03B4CD38 STP W2, W1, [X31 + 0x68]
	0x03B4CD3C STR S0, [X31 + 0x64]
	0x03B4CD40 STR S1, [X31 + 0x58]
	0x03B4CD44 ADRP X29, 0x896000
	0x03B4CD48 STRB W8, [X31 + 0x60]
	0x03B4CD4C STRB W9, [X31 + 0x5C]
	0x03B4CD50 ADRP X28, 0x5A7000
	0x03B4CD54 ADRP X26, 0x5A7000
	0x03B4CD58 ADRP X27, 0x5A7000
	0x03B4CD5C ADRP X25, 0x60E000
	0x03B4CD60 LDP X22, X20, [X31 + 0xD0]
	0x03B4CD64 LDRB W8, [X29 + 0x8CD]
	0x03B4CD68 LDR X28, [X28 + 0x758]
	0x03B4CD6C LDR X26, [X26 + 0xA90]
	0x03B4CD70 LDR X27, [X27 + 0xB58]
	0x03B4CD74 LDR X25, [X25 + 0xAB8]
	0x03B4CD78 MOV X19, X7
	0x03B4CD7C MOV X23, X6
	0x03B4CD80 MOV X24, X5
	0x03B4CD84 MOV X21, X0
	0x03B4CD88 TBNZ X8, 0x0, 0x3B4CDC4
	0x03B4CD8C ADRP X0, 0x5A7000
	0x03B4CD90 LDR X0, [X0 + 0xB58]
	0x03B4CD94 BL 0x1C16CF4
	0x03B4CD98 ADRP X0, 0x5A7000
	0x03B4CD9C LDR X0, [X0 + 0x758]
	0x03B4CDA0 BL 0x1C16CF4
	0x03B4CDA4 ADRP X0, 0x60E000
	0x03B4CDA8 LDR X0, [X0 + 0xAB8]
	0x03B4CDAC BL 0x1C16CF4
	0x03B4CDB0 ADRP X0, 0x5A7000
	0x03B4CDB4 LDR X0, [X0 + 0xA90]
	0x03B4CDB8 BL 0x1C16CF4
	0x03B4CDBC MOVZ W8, 0x1
	0x03B4CDC0 STRB W8, [X29 + 0x8CD]
	0x03B4CDC4 LDR X0, [X28]
	0x03B4CDC8 MOVI V0.2D, 0x0
	0x03B4CDCC ADD X1, X31, 0x6C
	0x03B4CDD0 STP V0, V0, [X31 + 0x30]
	0x03B4CDD4 STP V0, V0, [X31 + 0x10]
	0x03B4CDD8 STR V0, [X31]
	0x03B4CDDC BL 0x1C16E04
	0x03B4CDE0 LDR X8, [X28]
	0x03B4CDE4 STR X0, [X31]
	0x03B4CDE8 ADD X1, X31, 0x68
	0x03B4CDEC MOV X0, X8
	0x03B4CDF0 BL 0x1C16E04
	0x03B4CDF4 LDR X8, [X26]
	0x03B4CDF8 STR X0, [X31 + 0x8]
	0x03B4CDFC ADD X1, X31, 0x64
	0x03B4CE00 MOV X0, X8
	0x03B4CE04 BL 0x1C16E04
	0x03B4CE08 LDR X8, [X27]
	0x03B4CE0C STR X0, [X31 + 0x10]
	0x03B4CE10 ADD X1, X31, 0x60
	0x03B4CE14 MOV X0, X8
	0x03B4CE18 BL 0x1C16E04
	0x03B4CE1C LDR X8, [X27]
	0x03B4CE20 STR X0, [X31 + 0x18]
	0x03B4CE24 ADD X1, X31, 0x5C
	0x03B4CE28 MOV X0, X8
	0x03B4CE2C BL 0x1C16E04
	0x03B4CE30 LDR X8, [X26]
	0x03B4CE34 STR X0, [X31 + 0x20]
	0x03B4CE38 ADD X1, X31, 0x58
	0x03B4CE3C MOV X0, X8
	0x03B4CE40 BL 0x1C16E04
	0x03B4CE44 LDR X8, [X25]
	0x03B4CE48 STR X0, [X31 + 0x28]
	0x03B4CE4C MOV X1, X24
	0x03B4CE50 MOV X0, X8
	0x03B4CE54 BL 0x1C16E04
	0x03B4CE58 LDR X8, [X25]
	0x03B4CE5C STR X0, [X31 + 0x30]
	0x03B4CE60 MOV X1, X23
	0x03B4CE64 MOV X0, X8
	0x03B4CE68 BL 0x1C16E04
	0x03B4CE6C LDR X8, [X25]
	0x03B4CE70 STR X0, [X31 + 0x38]
	0x03B4CE74 MOV X1, X19
	0x03B4CE78 MOV X0, X8
	0x03B4CE7C BL 0x1C16E04
	0x03B4CE80 STR X0, [X31 + 0x40]
	0x03B4CE84 ADD X1, X31, 0x0
	0x03B4CE88 MOV X0, X21
	0x03B4CE8C MOV X2, X22
	0x03B4CE90 MOV X3, X20
	0x03B4CE94 BL 0x1C16CB0
	0x03B4CE98 LDP X20, X19, [X31 + 0xC0]
	0x03B4CE9C LDP X22, X21, [X31 + 0xB0]
	0x03B4CEA0 LDP X24, X23, [X31 + 0xA0]
	0x03B4CEA4 LDP X26, X25, [X31 + 0x90]
	0x03B4CEA8 LDP X28, X27, [X31 + 0x80]
	0x03B4CEAC LDP X29, X30, [X31 + 0x70]
	0x03B4CEB0 ADD X31, X31, 0xD0
	0x03B4CEB4 RET
	0x03B4CEB8 STR X30, [X31 - 0x10]!
	0x03B4CEBC MOV X0, X1
	0x03B4CEC0 MOV X1, X31
	0x03B4CEC4 BL 0x1C16CB4
	0x03B4CEC8 CBZ X0, 0x3B4CEDC
	0x03B4CECC BL 0x1C16E08
	0x03B4CED0 LDR W0, [X0]
	0x03B4CED4 LDR X30, [X31], #0x10
	0x03B4CED8 RET
	0x03B4CEDC BL 0x1C16F20
	0x03B4CEE0 STP X30, X23, [X31 - 0x30]!
	0x03B4CEE4 STP X22, X21, [X31 + 0x10]
	0x03B4CEE8 STP X20, X19, [X31 + 0x20]
	0x03B4CEEC ADRP X20, 0x896000
	0x03B4CEF0 ADRP X23, 0x60E000
	0x03B4CEF4 LDRB W8, [X20 + 0x8CE]
	0x03B4CEF8 LDR X23, [X23 + 0xA28]
	0x03B4CEFC MOV X19, X0
	0x03B4CF00 TBNZ X8, 0x0, 0x3B4CF3C
	0x03B4CF04 ADRP X0, 0x5CF000
	0x03B4CF08 LDR X0, [X0 + 0x848]
	0x03B4CF0C BL 0x1C16CF4
	0x03B4CF10 ADRP X0, 0x60E000
	0x03B4CF14 LDR X0, [X0 + 0xA28]
	0x03B4CF18 BL 0x1C16CF4
	0x03B4CF1C ADRP X0, 0x60E000
	0x03B4CF20 LDR X0, [X0 + 0xAC0]
	0x03B4CF24 BL 0x1C16CF4
	0x03B4CF28 ADRP X0, 0x60E000
	0x03B4CF2C LDR X0, [X0 + 0xAC8]
	0x03B4CF30 BL 0x1C16CF4
	0x03B4CF34 MOVZ W8, 0x1
	0x03B4CF38 STRB W8, [X20 + 0x8CE]
	0x03B4CF3C LDR X8, [X23]
	0x03B4CF40 LDR W9, [X8 + 0xE0]
	0x03B4CF44 CBNZ W9, 0x3B4CF54
	0x03B4CF48 MOV X0, X8
	0x03B4CF4C BL 0x1C16DFC
	0x03B4CF50 LDR X8, [X23]
	0x03B4CF54 LDR X9, [X8 + 0xB8]
	0x03B4CF58 LDR X10, [X9]
	0x03B4CF5C CBNZ X10, 0x3B4CFCC
	0x03B4CF60 LDR W10, [X8 + 0xE0]
	0x03B4CF64 CBNZ W10, 0x3B4CF78
	0x03B4CF68 MOV X0, X8
	0x03B4CF6C BL 0x1C16DFC
	0x03B4CF70 LDR X8, [X23]
	0x03B4CF74 LDR X9, [X8 + 0xB8]
	0x03B4CF78 ADRP X8, 0x5CF000
	0x03B4CF7C LDR X20, [X9 + 0x8]
	0x03B4CF80 LDR X8, [X8 + 0x848]
	0x03B4CF84 LDR X0, [X8]
	0x03B4CF88 ADRP X8, 0x60E000
	0x03B4CF8C LDR X8, [X8 + 0xAC8]
	0x03B4CF90 LDR X21, [X8]
	0x03B4CF94 ADRP X8, 0x60E000
	0x03B4CF98 LDR X8, [X8 + 0xAC0]
	0x03B4CF9C LDR W9, [X0 + 0xE0]
	0x03B4CFA0 LDR X22, [X8]
	0x03B4CFA4 CBNZ W9, 0x3B4CFAC
	0x03B4CFA8 BL 0x1C16DFC
	0x03B4CFAC MOV X0, X20
	0x03B4CFB0 MOV X1, X21
	0x03B4CFB4 MOV X2, X22
	0x03B4CFB8 MOV X3, X31
	0x03B4CFBC BL 0x36FAD70
	0x03B4CFC0 LDR X8, [X23]
	0x03B4CFC4 LDR X9, [X8 + 0xB8]
	0x03B4CFC8 STR X0, [X9]
	0x03B4CFCC LDR W9, [X8 + 0xE0]
	0x03B4CFD0 CBNZ W9, 0x3B4CFE0
	0x03B4CFD4 MOV X0, X8
	0x03B4CFD8 BL 0x1C16DFC
	0x03B4CFDC LDR X8, [X23]
	0x03B4CFE0 LDR X8, [X8 + 0xB8]
	0x03B4CFE4 LDP X22, X21, [X31 + 0x10]
	0x03B4CFE8 LDR X8, [X8]
	0x03B4CFEC STR X8, [X19]
	0x03B4CFF0 LDP X20, X19, [X31 + 0x20]
	0x03B4CFF4 LDP X30, X23, [X31], #0x30
	0x03B4CFF8 RET
	0x03B4CFFC STR X30, [X31 - 0x20]!
	0x03B4D000 STP X20, X19, [X31 + 0x10]
	0x03B4D004 ADRP X20, 0x895000
	0x03B4D008 ADRP X19, 0x60D000
	0x03B4D00C LDRB W8, [X20 + 0x8CF]
	0x03B4D010 LDR X19, [X19 + 0xA28]
	0x03B4D014 TBNZ X8, 0x0, 0x3B4D02C
	0x03B4D018 ADRP X0, 0x60D000
	0x03B4D01C LDR X0, [X0 + 0xA28]
	0x03B4D020 BL 0x1C16CF4
	0x03B4D024 MOVZ W8, 0x1
	0x03B4D028 STRB W8, [X20 + 0x8CF]
	0x03B4D02C LDR X0, [X19]
	0x03B4D030 STR X31, [X31 + 0x8]
	0x03B4D034 LDR W8, [X0 + 0xE0]
	0x03B4D038 CBNZ W8, 0x3B4D040
	0x03B4D03C BL 0x1C16DFC
	0x03B4D040 ADD X0, X31, 0x8
	0x03B4D044 BL 0x3B4CEE0
	0x03B4D048 LDR X0, [X31 + 0x8]
	0x03B4D04C LDP X20, X19, [X31 + 0x10]
	0x03B4D050 LDR X30, [X31], #0x20
	0x03B4D054 RET
	0x03B4D058 STP X30, X21, [X31 - 0x20]!
	0x03B4D05C STP X20, X19, [X31 + 0x10]
	0x03B4D060 ADRP X21, 0x895000
	0x03B4D064 ADRP X19, 0x60D000
	0x03B4D068 ADRP X20, 0x5CE000
	0x03B4D06C LDRB W8, [X21 + 0x8D0]
	0x03B4D070 LDR X19, [X19 + 0xAD0]
	0x03B4D074 LDR X20, [X20 + 0x848]
	0x03B4D078 TBNZ X8, 0x0, 0x3B4D0A8
	0x03B4D07C ADRP X0, 0x5CE000
	0x03B4D080 LDR X0, [X0 + 0x848]
	0x03B4D084 BL 0x1C16CF4
	0x03B4D088 ADRP X0, 0x60D000
	0x03B4D08C LDR X0, [X0 + 0xA28]
	0x03B4D090 BL 0x1C16CF4
	0x03B4D094 ADRP X0, 0x60D000
	0x03B4D098 LDR X0, [X0 + 0xAD0]
	0x03B4D09C BL 0x1C16CF4
	0x03B4D0A0 MOVZ W8, 0x1
	0x03B4D0A4 STRB W8, [X21 + 0x8D0]
	0x03B4D0A8 LDR X0, [X20]
	0x03B4D0AC ADRP X20, 0x60D000
	0x03B4D0B0 LDR X19, [X19]
	0x03B4D0B4 LDR W8, [X0 + 0xE0]
	0x03B4D0B8 LDR X20, [X20 + 0xA28]
	0x03B4D0BC CBNZ W8, 0x3B4D0C4
	0x03B4D0C0 BL 0x1C16DFC
	0x03B4D0C4 MOV X0, X19
	0x03B4D0C8 MOV X1, X31
	0x03B4D0CC BL 0x36FA754
	0x03B4D0D0 LDR X8, [X20]
	0x03B4D0D4 MOV X19, X0
	0x03B4D0D8 LDR W9, [X8 + 0xE0]
	0x03B4D0DC CBNZ W9, 0x3B4D0EC
	0x03B4D0E0 MOV X0, X8
	0x03B4D0E4 BL 0x1C16DFC
	0x03B4D0E8 LDR X8, [X20]
	0x03B4D0EC LDR X8, [X8 + 0xB8]
	0x03B4D0F0 STR X19, [X8 + 0x8]
	0x03B4D0F4 LDP X20, X19, [X31 + 0x10]
	0x03B4D0F8 LDP X30, X21, [X31], #0x20
	0x03B4D0FC RET
	0x03B4D100 RET
	0x03B4D104 B 0x3B4D058
	0x03B4D108 STP X30, X21, [X31 - 0x20]!
	0x03B4D10C STP X20, X19, [X31 + 0x10]
	0x03B4D110 LDR X8, [X2 + 0x8]
	0x03B4D114 STP X1, X2, [X0 + 0x20]
	0x03B4D118 MOV X19, X0
	0x03B4D11C MOV X20, X1
	0x03B4D120 STR X8, [X0 + 0x10]
	0x03B4D124 LDRB W21, [X2 + 0x52]
	0x03B4D128 STR X0, [X0 + 0x40]
	0x03B4D12C MOV X0, X2
	0x03B4D130 BL 0x1C16D84
	0x03B4D134 TBZ X0, 0x0, 0x3B4D150
	0x03B4D138 CMP W21, 0x6
	0x03B4D13C B.NE 0x3B4D154
	0x03B4D140 ADRP X8, 0xFFFFFFFFFE0B0000
	0x03B4D144 ADD X8, X8, 0xBC8
	0x03B4D148 STR X8, [X19 + 0x18]
	0x03B4D14C B 0x3B4D164
	0x03B4D150 CBZ X20, 0x3B4D17C
	0x03B4D154 LDR X8, [X19 + 0x10]
	0x03B4D158 LDR X9, [X19 + 0x20]
	0x03B4D15C STR X8, [X19 + 0x18]
	0x03B4D160 STR X9, [X19 + 0x40]
	0x03B4D164 ADRP X8, 0xFFFFFFFFFE0B0000
	0x03B4D168 ADD X8, X8, 0xB34
	0x03B4D16C STR X8, [X19 + 0x38]
	0x03B4D170 LDP X20, X19, [X31 + 0x10]
	0x03B4D174 LDP X30, X21, [X31], #0x20
	0x03B4D178 RET
	0x03B4D17C ADRP X1, 0xFFFFFFFFFCFCE000
	0x03B4D180 ADD X1, X1, 0xEE3
	0x03B4D184 MOV X0, X31
	0x03B4D188 BL 0x1C16F3C
	0x03B4D18C MOV X1, X31
	0x03B4D190 BL 0x1C16DEC
	0x03B4D194 LDR X8, [X0 + 0x40]
	0x03B4D198 LDR X7, [X0 + 0x18]
	0x03B4D19C LDR X6, [X0 + 0x28]
	0x03B4D1A0 AND W1, W1, 0x1
	0x03B4D1A4 MOV X0, X8
	0x03B4D1A8 BR X7
	0x03B4D1AC SUB X31, X31, 0xA0
	0x03B4D1B0 STP X29, X30, [X31 + 0x40]
	0x03B4D1B4 STP X28, X27, [X31 + 0x50]
	0x03B4D1B8 STP X26, X25, [X31 + 0x60]
	0x03B4D1BC STP X24, X23, [X31 + 0x70]
	0x03B4D1C0 STP X22, X21, [X31 + 0x80]
	0x03B4D1C4 STP X20, X19, [X31 + 0x90]
	0x03B4D1C8 AND W8, W1, 0x1
	0x03B4D1CC STR S0, [X31 + 0x3C]
	0x03B4D1D0 ADRP X29, 0x895000
	0x03B4D1D4 STRB W8, [X31 + 0x38]
	0x03B4D1D8 ADRP X26, 0x5A6000
	0x03B4D1DC ADRP X28, 0x5A6000
	0x03B4D1E0 ADRP X27, 0x5D1000
	0x03B4D1E4 LDRB W9, [X29 + 0x8D2]
	0x03B4D1E8 LDR X26, [X26 + 0xA90]
	0x03B4D1EC LDR X28, [X28 + 0xB58]
	0x03B4D1F0 LDR X27, [X27 + 0x838]
	0x03B4D1F4 MOV X19, X7
	0x03B4D1F8 MOV X20, X6
	0x03B4D1FC MOV X22, X5
	0x03B4D200 MOV X23, X4
	0x03B4D204 MOV X24, X3
	0x03B4D208 MOV X25, X2
	0x03B4D20C MOV X21, X0
	0x03B4D210 TBNZ X9, 0x0, 0x3B4D240
	0x03B4D214 ADRP X0, 0x5A6000
	0x03B4D218 LDR X0, [X0 + 0xB58]
	0x03B4D21C BL 0x1C16CF4
	0x03B4D220 ADRP X0, 0x5A6000
	0x03B4D224 LDR X0, [X0 + 0xA90]
	0x03B4D228 BL 0x1C16CF4
	0x03B4D22C ADRP X0, 0x5D1000
	0x03B4D230 LDR X0, [X0 + 0x838]
	0x03B4D234 BL 0x1C16CF4
	0x03B4D238 MOVZ W8, 0x1
	0x03B4D23C STRB W8, [X29 + 0x8D2]
	0x03B4D240 LDR X0, [X26]
	0x03B4D244 MOVI V0.2D, 0x0
	0x03B4D248 ADD X1, X31, 0x3C
	0x03B4D24C STR X31, [X31 + 0x30]
	0x03B4D250 STP V0, V0, [X31 + 0x10]
	0x03B4D254 STR V0, [X31]
	0x03B4D258 BL 0x1C16E04
	0x03B4D25C LDR X8, [X28]
	0x03B4D260 STR X0, [X31]
	0x03B4D264 ADD X1, X31, 0x38
	0x03B4D268 MOV X0, X8
	0x03B4D26C BL 0x1C16E04
	0x03B4D270 LDR X8, [X27]
	0x03B4D274 STR X0, [X31 + 0x8]
	0x03B4D278 MOV X1, X25
	0x03B4D27C MOV X0, X8
	0x03B4D280 BL 0x1C16E04
	0x03B4D284 LDR X8, [X27]
	0x03B4D288 STR X0, [X31 + 0x10]
	0x03B4D28C MOV X1, X24
	0x03B4D290 MOV X0, X8
	0x03B4D294 BL 0x1C16E04
	0x03B4D298 LDR X8, [X27]
	0x03B4D29C STR X0, [X31 + 0x18]
	0x03B4D2A0 MOV X1, X23
	0x03B4D2A4 MOV X0, X8
	0x03B4D2A8 BL 0x1C16E04
	0x03B4D2AC LDR X8, [X26]
	0x03B4D2B0 STR X0, [X31 + 0x20]
	0x03B4D2B4 MOV X1, X22
	0x03B4D2B8 MOV X0, X8
	0x03B4D2BC BL 0x1C16E04
	0x03B4D2C0 STR X0, [X31 + 0x28]
	0x03B4D2C4 ADD X1, X31, 0x0
	0x03B4D2C8 MOV X0, X21
	0x03B4D2CC MOV X2, X20
	0x03B4D2D0 MOV X3, X19
	0x03B4D2D4 BL 0x1C16CB0
	0x03B4D2D8 LDP X20, X19, [X31 + 0x90]
	0x03B4D2DC LDP X22, X21, [X31 + 0x80]
	0x03B4D2E0 LDP X24, X23, [X31 + 0x70]
	0x03B4D2E4 LDP X26, X25, [X31 + 0x60]
	0x03B4D2E8 LDP X28, X27, [X31 + 0x50]
	0x03B4D2EC LDP X29, X30, [X31 + 0x40]
	0x03B4D2F0 ADD X31, X31, 0xA0
	0x03B4D2F4 RET
	0x03B4D2F8 STR X30, [X31 - 0x10]!
	0x03B4D2FC MOV X0, X1
	0x03B4D300 MOV X1, X31
	0x03B4D304 BL 0x1C16CB4
	0x03B4D308 CBZ X0, 0x3B4D31C
	0x03B4D30C BL 0x1C16E08
	0x03B4D310 LDRB W0, [X0]
	0x03B4D314 LDR X30, [X31], #0x10
	0x03B4D318 RET

ISIL:
	001 Subtract X31, X31, 432
	002 Move [X31+336], D9
	003 Move [X31+344], D8
	004 Move [X31+352], X29
	005 Move [X31+368], X30
	006 Move [X31+376], X25
	007 Move [X31+384], X24
	008 Move [X31+392], X23
	009 Move [X31+400], X22
	010 Move [X31+408], X21
	011 Move [X31+416], X20
	012 Move [X31+424], X19
	013 Move X20, 0x897000
	014 Move X23, 0x607000
	015 Move X22, 0x607000
	016 Move W8, [X20+2246]
	017 Move X23, [X23+3728]
	018 Move X22, [X22+3720]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {53}
	024 Move X0, 0x60F000
	025 Move X0, [X0+2688]
	026 Call 0x1C17CF4
	027 Move X0, 0x60F000
	028 Move X0, [X0+1224]
	029 Call 0x1C17CF4
	030 Move X0, 0x60F000
	031 Move X0, [X0+1232]
	032 Call 0x1C17CF4
	033 Move X0, 0x60F000
	034 Move X0, [X0+2696]
	035 Call 0x1C17CF4
	036 Move X0, 0x60F000
	037 Move X0, [X0+2704]
	038 Call 0x1C17CF4
	039 Move X0, 0x607000
	040 Move X0, [X0+3712]
	041 Call 0x1C17CF4
	042 Move X0, 0x607000
	043 Move X0, [X0+3720]
	044 Call 0x1C17CF4
	045 Move X0, 0x607000
	046 Move X0, [X0+3728]
	047 Call 0x1C17CF4
	048 Move X0, 0x5AA000
	049 Move X0, [X0+2480]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X20+2246], W8
	053 Move X10, -50716672
	054 Move V0, [X10+2848]
	055 Move W8, 0xD70A
	056 NotImplemented "Instruction MOVK not yet implemented."
	057 Move W20, 1
	058 Move W9, 0x41200000
	059 Move [X19+32], W8
	060 Move W8, 0x3F000000
	061 Move [X19+56], D0
	062 Move S0, W31
	063 Move S1, 1
	064 Move S2, 1
	065 Move S3, 1
	066 Move X0, X31
	067 Move [X19+36], W20
	068 Move [X19+40], W9
	069 Move [X19+48], W8
	070 Move [X19+52], W20
	071 Call AnimationCurve.Linear, V0, V1, V2, V3
	072 Move [X19+64], X0
	073 Move [X19+72], W20
	074 Move X0, [X23]
	075 Call 0x1C17F10
	076 Move X1, X31
	077 Move X20, X0
	078 Call Gradient..ctor, X0
	079 Move X0, [X22]
	080 Move W1, 2
	081 Call 0x1C17D6C
	082 Move X21, X0
	083 Add X0, X31, 312
	084 Move S0, 1
	085 Move S1, 1
	086 Move S2, 1
	087 Move S3, 1
	088 Move S4, W31
	089 Move X1, X31
	090 Move [X31+312], X31
	091 Move [X31+320], X31
	092 Move [X31+328], W31
	093 Call GradientColorKey..ctor, X0, X1, V0
	094 Compare X21, 0
	095 JumpIfEqual {489}
	096 Add X25, X31, 152
	097 Move V0, [X25+10]
	098 Move W8, [X31+328]
	099 Move [X31+18], V0
	100 Move [X31+304], W8
	101 Move W8, [X21+24]
	102 Compare W8, 0
	103 JumpIfEqual {488}
	104 Move V0, [X31+18]
	105 Move W8, [X31+304]
	106 Add X0, X31, 264
	107 Move S1, 1
	108 Move [X21+2], V0
	109 Move S0, 1
	110 Move S2, 1
	111 Move S3, 1
	112 Move S4, 1
	113 Move X1, X31
	114 Move [X21+48], W8
	115 Move [X31+264], X31
	116 Move [X31+272], X31
	117 Move [X31+280], W31
	118 Call GradientColorKey..ctor, X0, X1, V0
	119 Move W8, [X31+280]
	120 Move V0, [X25+7]
	121 Move [X31+256], W8
	122 Move [X31+15], V0
	123 Move W8, [X21+24]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move W8, [X31+256]
	126 Move V0, [X31+15]
	127 Move [X21+68], W8
	128 Move [X21+52], V0
	129 Compare X20, 0
	130 JumpIfEqual {489}
	131 Move X24, 0x607000
	132 Move X24, [X24+3712]
	133 Move X0, X20
	134 Move X1, X21
	135 Move X2, X31
	136 Call Gradient.set_colorKeys, X0, X1
	137 Move X0, [X24]
	138 Move W1, 2
	139 Call 0x1C17D6C
	140 Move X21, X0
	141 Add X0, X31, 232
	142 Move S0, 1
	143 Move S1, W31
	144 Move X1, X31
	145 Move [X31+232], X31
	146 Call GradientAlphaKey..ctor, X0, V0, V1
	147 Compare X21, 0
	148 JumpIfEqual {489}
	149 Move W8, [X21+24]
	150 Compare W8, 0
	151 JumpIfEqual {488}
	152 Move V0, [X31+232]
	153 Add X0, X31, 224
	154 Move S1, 1
	155 Move X1, X31
	156 Move [X21+32], D0
	157 Move S0, 1
	158 Move [X31+224], X31
	159 Call GradientAlphaKey..ctor, X0, V0, V1
	160 Move W8, [X21+24]
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move V0, [X31+224]
	163 Move X0, X20
	164 Move X1, X21
	165 Move X2, X31
	166 Move [X21+40], D0
	167 Call Gradient.set_alphaKeys, X0, X1
	168 Move [X19+80], X20
	169 Move X0, [X23]
	170 Call 0x1C17F10
	171 Move X1, X31
	172 Move X20, X0
	173 Call Gradient..ctor, X0
	174 Move X0, [X22]
	175 Move W1, 2
	176 Call 0x1C17D6C
	177 Move X21, X0
	178 Add X0, X31, 200
	179 Move S0, 1
	180 Move S1, W31
	181 Move S2, W31
	182 Move S3, 1
	183 Move S4, W31
	184 Move X1, X31
	185 Move [X31+200], X31
	186 Move [X31+208], X31
	187 Move [X31+216], W31
	188 Call GradientColorKey..ctor, X0, X1, V0
	189 Compare X21, 0
	190 JumpIfEqual {489}
	191 Move V0, [X25+3]
	192 Move W8, [X31+216]
	193 Move [X31+11], V0
	194 Move [X31+192], W8
	195 Move W8, [X21+24]
	196 Compare W8, 0
	197 JumpIfEqual {488}
	198 Move V0, [X31+11]
	199 Move W8, [X31+192]
	200 Add X0, X31, 152
	201 Move S1, W31
	202 Move [X21+2], V0
	203 Move S0, 1
	204 Move S2, W31
	205 Move S3, 1
	206 Move S4, 1
	207 Move X1, X31
	208 Move [X21+48], W8
	209 Move [X31+152], X31
	210 Move [X31+160], X31
	211 Move [X31+168], W31
	212 Call GradientColorKey..ctor, X0, X1, V0
	213 Move W8, [X31+168]
	214 Move V0, [X25]
	215 Move [X31+144], W8
	216 Move [X31+8], V0
	217 Move W8, [X21+24]
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Move W8, [X31+144]
	220 Move V0, [X31+8]
	221 Move [X21+68], W8
	222 Move [X21+52], V0
	223 Compare X20, 0
	224 JumpIfEqual {489}
	225 Move X0, X20
	226 Move X1, X21
	227 Move X2, X31
	228 Call Gradient.set_colorKeys, X0, X1
	229 Move X0, [X24]
	230 Move W1, 2
	231 Call 0x1C17D6C
	232 Move X21, X0
	233 Add X0, X31, 120
	234 Move S0, 1
	235 Move S1, W31
	236 Move X1, X31
	237 Move [X31+120], X31
	238 Call GradientAlphaKey..ctor, X0, V0, V1
	239 Compare X21, 0
	240 JumpIfEqual {489}
	241 Move W8, [X21+24]
	242 Compare W8, 0
	243 JumpIfEqual {488}
	244 Move V0, [X31+120]
	245 Add X0, X31, 112
	246 Move S1, 1
	247 Move X1, X31
	248 Move [X21+32], D0
	249 Move S0, 1
	250 Move [X31+112], X31
	251 Call GradientAlphaKey..ctor, X0, V0, V1
	252 Move W8, [X21+24]
	253 NotImplemented "Instruction CMP not yet implemented."
	254 Move V0, [X31+112]
	255 Move X0, X20
	256 Move X1, X21
	257 Move X2, X31
	258 Move [X21+40], D0
	259 Call Gradient.set_alphaKeys, X0, X1
	260 Move [X19+88], X20
	261 Move X0, [X23]
	262 Call 0x1C17F10
	263 Move X1, X31
	264 Move X20, X0
	265 Call Gradient..ctor, X0
	266 Move X0, [X22]
	267 Move W1, 2
	268 Call 0x1C17D6C
	269 Move X8, -50737152
	270 Move X9, -50733056
	271 Move V8, [X8+3984]
	272 Move V9, [X9+48]
	273 Move X21, X0
	274 Add X0, X31, 88
	275 Move S0, 1
	276 Move S3, 1
	277 Move S4, W31
	278 Move V1, V8
	279 Move V2, V9
	280 Move X1, X31
	281 Move [X31+88], X31
	282 Move [X31+96], X31
	283 Move [X31+104], W31
	284 Call GradientColorKey..ctor, X0, X1, V0
	285 Compare X21, 0
	286 JumpIfEqual {489}
	287 NotImplemented "Instruction LDUR not yet implemented."
	288 Move W8, [X31+104]
	289 Move [X31+4], V0
	290 Move [X31+80], W8
	291 Move W8, [X21+24]
	292 Compare W8, 0
	293 JumpIfEqual {488}
	294 Move V0, [X31+4]
	295 Move W8, [X31+80]
	296 Add X0, X31, 40
	297 Move S3, 1
	298 Move [X21+2], V0
	299 Move S0, 1
	300 Move S4, 1
	301 Move V1, V8
	302 Move V2, V9
	303 Move X1, X31
	304 Move [X21+48], W8
	305 Move [X31+40], X31
	306 Move [X31+48], X31
	307 Move [X31+56], W31
	308 Call GradientColorKey..ctor, X0, X1, V0
	309 Move W8, [X31+56]
	310 NotImplemented "Instruction LDUR not yet implemented."
	311 Move [X31+32], W8
	312 Move [X31+1], V0
	313 Move W8, [X21+24]
	314 NotImplemented "Instruction CMP not yet implemented."
	315 Move W8, [X31+32]
	316 Move V0, [X31+1]
	317 Move [X21+68], W8
	318 Move [X21+52], V0
	319 Compare X20, 0
	320 JumpIfEqual {489}
	321 Move X0, X20
	322 Move X1, X21
	323 Move X2, X31
	324 Call Gradient.set_colorKeys, X0, X1
	325 Move X0, [X24]
	326 Move W1, 2
	327 Call 0x1C17D6C
	328 Move X21, X0
	329 Add X0, X31, 8
	330 Move S0, 1
	331 Move S1, W31
	332 Move X1, X31
	333 Move [X31+8], X31
	334 Call GradientAlphaKey..ctor, X0, V0, V1
	335 Compare X21, 0
	336 JumpIfEqual {489}
	337 Move W8, [X21+24]
	338 Compare W8, 0
	339 JumpIfEqual {488}
	340 Move V0, [X31+8]
	341 Add X0, X31, 0
	342 Move S1, 1
	343 Move X1, X31
	344 Move [X21+32], D0
	345 Move S0, 1
	346 Move [X31], X31
	347 Call GradientAlphaKey..ctor, X0, V0, V1
	348 Move W8, [X21+24]
	349 NotImplemented "Instruction CMP not yet implemented."
	350 Move V0, [X31]
	351 Move X22, 0x60E000
	352 Move X22, [X22+2688]
	353 Move X0, X20
	354 Move X1, X21
	355 Move X2, X31
	356 Move [X21+40], D0
	357 Call Gradient.set_alphaKeys, X0, X1
	358 Move V0, 0
	359 Move W8, 1
	360 Move W9, 0x3F000000
	361 Move TEMP, 0
	362 Not TEMP
	363 Move W10, TEMP
	364 Move [X19+96], X20
	365 Move [X19+108], D0
	366 Move [X19+136], W8
	367 Move [X19+138], W8
	368 Move [X19+140], W9
	369 Move [X19+144], W8
	370 Move [X19+196], W8
	371 Move [X19+288], W10
	372 Move X20, [X22]
	373 Move X8, [X20+56]
	374 Compare X8, 0
	375 JumpIfNotEqual {379}
	376 Move X0, X20
	377 Call 0x1C5D6E0
	378 Move X8, [X20+56]
	379 Move X0, [X8+16]
	380 Move W8, [X0+309]
	381 Move TEMP, X8
	382 And TEMP, TEMP, 1
	383 Compare TEMP, 1
	384 JumpIfEqual {386}
	385 Call 0x1C5D684
	386 Move W8, [X0+224]
	387 Compare W8, 0
	388 JumpIfNotEqual {390}
	389 Call 0x1C17DFC
	390 Move X8, [X20+56]
	391 Move X20, 0x5A9000
	392 Move X0, [X8+16]
	393 Move W8, [X0+309]
	394 Move X20, [X20+2480]
	395 Move TEMP, X8
	396 And TEMP, TEMP, 1
	397 Compare TEMP, 1
	398 JumpIfEqual {400}
	399 Call 0x1C5D684
	400 Move X8, [X0+184]
	401 Move TEMP, 0
	402 Not TEMP
	403 Move W9, TEMP
	404 Move W1, 2
	405 Move X8, [X8]
	406 Move [X19+320], W9
	407 Move [X19+344], W9
	408 Move [X19+296], X8
	409 Move X0, [X20]
	410 Call 0x1C17D6C
	411 Move X21, 0x88C000
	412 Move W8, [X21+1923]
	413 Move X20, X0
	414 Compare W8, 0
	415 JumpIfNotEqual {421}
	416 Move X0, 0x5A7000
	417 Move X0, [X0+1440]
	418 Call 0x1C17CF4
	419 Move W8, 1
	420 Move [X21+1923], W8
	421 Compare X20, 0
	422 JumpIfEqual {489}
	423 Move W9, [X20+24]
	424 Compare W9, 0
	425 JumpIfEqual {488}
	426 Move X8, 0x5A7000
	427 Move X8, [X8+1440]
	428 NotImplemented "Instruction CMP not yet implemented."
	429 Move X10, [X8]
	430 Move X10, [X10+184]
	431 Move V0, [X10]
	432 Move V1, [X10+8]
	433 Move [X20+32], D0
	434 Move [X20+40], S1
	435 Move X8, [X8]
	436 Move X21, 0x60E000
	437 Move X22, 0x60E000
	438 Move X8, [X8+184]
	439 Move V0, [X8]
	440 Move V1, [X8+8]
	441 Move X8, 0x60E000
	442 Move X8, [X8+1232]
	443 Move [X20+44], D0
	444 Move [X20+52], S1
	445 Move [X19+352], X20
	446 Move X0, [X8]
	447 Move X20, 0x60E000
	448 Move X20, [X20+1224]
	449 Move X21, [X21+2704]
	450 Move X22, [X22+2696]
	451 Call 0x1C17F10
	452 Move X4, [X20]
	453 Move S0, W31
	454 Move W1, 1
	455 Move X2, X31
	456 Move W3, W31
	457 Move X20, X0
	458 Call BindableVariable`1<Single>..ctor, X0, V0, X1, X2, X3
	459 Move [X19+448], X20
	460 Move X0, [X21]
	461 Call 0x1C17F10
	462 Move X1, X31
	463 Move X20, X0
	464 Call FloatTweenableVariable..ctor, X0
	465 Move [X19+456], X20
	466 Move X0, [X22]
	467 Call 0x1C17F10
	468 Move X1, X31
	469 Move X20, X0
	470 Call BindingsGroup..ctor, X0
	471 Move X0, X19
	472 Move X1, X31
	473 Move [X19+464], X20
	474 Call MonoBehaviour..ctor, X0
	475 Move X20, [X31+416]
	476 Move X19, [X31+424]
	477 Move X22, [X31+400]
	478 Move X21, [X31+408]
	479 Move X24, [X31+384]
	480 Move X23, [X31+392]
	481 Move X30, [X31+368]
	482 Move X25, [X31+376]
	483 Move X29, [X31+352]
	484 Move D9, [X31+336]
	485 Move D8, [X31+344]
	486 Add X31, X31, 432
	487 Return 
	488 Call 0x1C17F28
	489 Call 0x1C17F20

Method: System.Void <OnEnable>b__154_0(System.Single userScale)

Disassembly:
	0x03B4D31C BL 0x1C16F20
	0x03B4D320 STP X30, X23, [X31 - 0x30]!
	0x03B4D324 STP X22, X21, [X31 + 0x10]
	0x03B4D328 STP X20, X19, [X31 + 0x20]
	0x03B4D32C ADRP X20, 0x895000
	0x03B4D330 ADRP X23, 0x60D000
	0x03B4D334 LDRB W8, [X20 + 0x8D3]
	0x03B4D338 LDR X23, [X23 + 0xA68]
	0x03B4D33C MOV X19, X0
	0x03B4D340 TBNZ X8, 0x0, 0x3B4D37C
	0x03B4D344 ADRP X0, 0x5CE000
	0x03B4D348 LDR X0, [X0 + 0x848]
	0x03B4D34C BL 0x1C16CF4
	0x03B4D350 ADRP X0, 0x60D000
	0x03B4D354 LDR X0, [X0 + 0xA68]
	0x03B4D358 BL 0x1C16CF4
	0x03B4D35C ADRP X0, 0x60D000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move X0, [X0+208]
	004 Compare X0, 0
	005 JumpIfEqual {19}
	006 Move V1, [X8+32]
	007 Move X8, -50733056
	008 Move X9, -50737152
	009 Move V2, [X8+512]
	010 Move V3, [X9+3880]
	011 Move X1, X31
	012 NotImplemented "Instruction FMIN not yet implemented."
	013 NotImplemented "Instruction FCMP not yet implemented."
	014 NotImplemented "Instruction FCSEL not yet implemented."
	015 Multiply S0, S1, S0
	016 Move X30, [X31+16]
	017 Call LineRenderer.set_widthMultiplier, X0, V0
	018 Return 
	019 Call 0x1C17F20

Method: System.Void CalculateLineCurveRenderPoints$BurstManaged(System.Int32 numTargetPoints, System.Single curveRatio, in UnityEngine.Vector3 lineOrigin, in UnityEngine.Vector3 lineDirection, in UnityEngine.Vector3 endPoint, ref Unity.Collections.NativeArray`1<UnityEngine.Vector3> targetPoints)

Disassembly:
	0x03B4D360 LDR X0, [X0 + 0xAD8]
	0x03B4D364 BL 0x1C16CF4
	0x03B4D368 ADRP X0, 0x60D000
	0x03B4D36C LDR X0, [X0 + 0xAE0]
	0x03B4D370 BL 0x1C16CF4
	0x03B4D374 MOVZ W8, 0x1
	0x03B4D378 STRB W8, [X20 + 0x8D3]
	0x03B4D37C LDR X8, [X23]
	0x03B4D380 LDR W9, [X8 + 0xE0]
	0x03B4D384 CBNZ W9, 0x3B4D394
	0x03B4D388 MOV X0, X8
	0x03B4D38C BL 0x1C16DFC
	0x03B4D390 LDR X8, [X23]
	0x03B4D394 LDR X9, [X8 + 0xB8]
	0x03B4D398 LDR X10, [X9]
	0x03B4D39C CBNZ X10, 0x3B4D40C
	0x03B4D3A0 LDR W10, [X8 + 0xE0]
	0x03B4D3A4 CBNZ W10, 0x3B4D3B8
	0x03B4D3A8 MOV X0, X8
	0x03B4D3AC BL 0x1C16DFC
	0x03B4D3B0 LDR X8, [X23]
	0x03B4D3B4 LDR X9, [X8 + 0xB8]
	0x03B4D3B8 ADRP X8, 0x5CE000
	0x03B4D3BC LDR X20, [X9 + 0x8]
	0x03B4D3C0 LDR X8, [X8 + 0x848]
	0x03B4D3C4 LDR X0, [X8]
	0x03B4D3C8 ADRP X8, 0x60D000
	0x03B4D3CC LDR X8, [X8 + 0xAE0]
	0x03B4D3D0 LDR X21, [X8]
	0x03B4D3D4 ADRP X8, 0x60D000
	0x03B4D3D8 LDR X8, [X8 + 0xAD8]
	0x03B4D3DC LDR W9, [X0 + 0xE0]
	0x03B4D3E0 LDR X22, [X8]
	0x03B4D3E4 CBNZ W9, 0x3B4D3EC
	0x03B4D3E8 BL 0x1C16DFC
	0x03B4D3EC MOV X0, X20
	0x03B4D3F0 MOV X1, X21
	0x03B4D3F4 MOV X2, X22
	0x03B4D3F8 MOV X3, X31
	0x03B4D3FC BL 0x36FAD70
	0x03B4D400 LDR X8, [X23]
	0x03B4D404 LDR X9, [X8 + 0xB8]
	0x03B4D408 STR X0, [X9]
	0x03B4D40C LDR W9, [X8 + 0xE0]
	0x03B4D410 CBNZ W9, 0x3B4D420
	0x03B4D414 MOV X0, X8
	0x03B4D418 BL 0x1C16DFC
	0x03B4D41C LDR X8, [X23]
	0x03B4D420 LDR X8, [X8 + 0xB8]
	0x03B4D424 LDP X22, X21, [X31 + 0x10]
	0x03B4D428 LDR X8, [X8]
	0x03B4D42C STR X8, [X19]
	0x03B4D430 LDP X20, X19, [X31 + 0x20]
	0x03B4D434 LDP X30, X23, [X31], #0x30
	0x03B4D438 RET
	0x03B4D43C STR X30, [X31 - 0x20]!
	0x03B4D440 STP X20, X19, [X31 + 0x10]
	0x03B4D444 ADRP X20, 0x895000
	0x03B4D448 ADRP X19, 0x60D000

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+64], D8
	003 Move [X31+80], X30
	004 Move [X31+88], X25
	005 Move [X31+96], X24
	006 Move [X31+104], X23
	007 Move [X31+112], X22
	008 Move [X31+120], X21
	009 Move [X31+128], X20
	010 Move [X31+136], X19
	011 Move X24, 0x896000
	012 Move X25, 0x60E000
	013 Move W8, [X24+2247]
	014 Move X25, [X25+2536]
	015 Move X23, X4
	016 Move X20, X3
	017 Move X21, X2
	018 Move X22, X1
	019 Move V8, V0
	020 Move W19, W0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x60E000
	026 Move X0, [X0+2536]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X24+2247], W8
	030 Move X1, [X25]
	031 Move X0, X23
	032 Call NativeArray`1<Vector3>.Reinterpret, X0
	033 Move [X31+48], X0
	034 Move [X31+56], X1
	035 Move S0, [X22]
	036 Move S1, [X22+4]
	037 Move V2, [X22+8]
	038 Move X0, X31
	039 Call float3.op_Implicit, X0
	040 Move [X31+32], S0
	041 Move [X31+40], S1
	042 Move [X31+40], S2
	043 Move S0, [X21]
	044 Move S1, [X21+4]
	045 Move V2, [X21+8]
	046 Move X0, X31
	047 Call float3.op_Implicit, X0
	048 Move [X31+16], S0
	049 Move [X31+24], S1
	050 Move [X31+24], S2
	051 Move S0, [X20]
	052 Move S1, [X20+4]
	053 Move V2, [X20+8]
	054 Move X0, X31
	055 Call float3.op_Implicit, X0
	056 Move [X31], S0
	057 Move [X31+8], S1
	058 Add X1, X31, 32
	059 Add X2, X31, 16
	060 Add X3, X31, 0
	061 Add X4, X31, 48
	062 Move W0, W19
	063 Move V0, V8
	064 Move X5, X31
	065 Move [X31+8], S2
	066 Call CurveUtility.GenerateCubicBezierCurve, X0, V0, X1, X2, X3, X4
	067 Move X20, [X31+128]
	068 Move X19, [X31+136]
	069 Move X22, [X31+112]
	070 Move X21, [X31+120]
	071 Move X24, [X31+96]
	072 Move X23, [X31+104]
	073 Move X30, [X31+80]
	074 Move X25, [X31+88]
	075 Move V8, [X31+64]
	076 Add X31, X31, 144
	077 Return 

Method: System.Int32 ComputeNewRenderPoints$BurstManaged(System.Int32 numRenderPoints, System.Int32 numTargetPoints, System.Single targetLineLength, System.Boolean shouldSmoothPoints, System.Boolean shouldOverwritePoints, System.Single pointSmoothIncrement, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float3> targetPoints, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float3> previousRenderPoints, ref Unity.Collections.NativeArray`1<Unity.Mathematics.float3> renderPoints)

Disassembly:
	0x03B4D44C LDRB W8, [X20 + 0x8D4]
	0x03B4D450 LDR X19, [X19 + 0xA68]
	0x03B4D454 TBNZ X8, 0x0, 0x3B4D46C
	0x03B4D458 ADRP X0, 0x60D000
	0x03B4D45C LDR X0, [X0 + 0xA68]
	0x03B4D460 BL 0x1C16CF4
	0x03B4D464 MOVZ W8, 0x1
	0x03B4D468 STRB W8, [X20 + 0x8D4]
	0x03B4D46C LDR X0, [X19]
	0x03B4D470 STR X31, [X31 + 0x8]
	0x03B4D474 LDR W8, [X0 + 0xE0]
	0x03B4D478 CBNZ W8, 0x3B4D480
	0x03B4D47C BL 0x1C16DFC
	0x03B4D480 ADD X0, X31, 0x8
	0x03B4D484 BL 0x3B4D320
	0x03B4D488 LDR X0, [X31 + 0x8]
	0x03B4D48C LDP X20, X19, [X31 + 0x10]
	0x03B4D490 LDR X30, [X31], #0x20
	0x03B4D494 RET
	0x03B4D498 STP X30, X21, [X31 - 0x20]!
	0x03B4D49C STP X20, X19, [X31 + 0x10]
	0x03B4D4A0 ADRP X21, 0x895000
	0x03B4D4A4 ADRP X19, 0x60D000
	0x03B4D4A8 ADRP X20, 0x5CE000
	0x03B4D4AC LDRB W8, [X21 + 0x8D5]
	0x03B4D4B0 LDR X19, [X19 + 0xAE8]
	0x03B4D4B4 LDR X20, [X20 + 0x848]
	0x03B4D4B8 TBNZ X8, 0x0, 0x3B4D4E8
	0x03B4D4BC ADRP X0, 0x5CE000
	0x03B4D4C0 LDR X0, [X0 + 0x848]
	0x03B4D4C4 BL 0x1C16CF4
	0x03B4D4C8 ADRP X0, 0x60D000
	0x03B4D4CC LDR X0, [X0 + 0xA68]
	0x03B4D4D0 BL 0x1C16CF4
	0x03B4D4D4 ADRP X0, 0x60D000
	0x03B4D4D8 LDR X0, [X0 + 0xAE8]
	0x03B4D4DC BL 0x1C16CF4
	0x03B4D4E0 MOVZ W8, 0x1
	0x03B4D4E4 STRB W8, [X21 + 0x8D5]
	0x03B4D4E8 LDR X0, [X20]
	0x03B4D4EC ADRP X20, 0x60D000
	0x03B4D4F0 LDR X19, [X19]
	0x03B4D4F4 LDR W8, [X0 + 0xE0]
	0x03B4D4F8 LDR X20, [X20 + 0xA68]
	0x03B4D4FC CBNZ W8, 0x3B4D504
	0x03B4D500 BL 0x1C16DFC
	0x03B4D504 MOV X0, X19
	0x03B4D508 MOV X1, X31
	0x03B4D50C BL 0x36FA754
	0x03B4D510 LDR X8, [X20]
	0x03B4D514 MOV X19, X0
	0x03B4D518 LDR W9, [X8 + 0xE0]
	0x03B4D51C CBNZ W9, 0x3B4D52C
	0x03B4D520 MOV X0, X8
	0x03B4D524 BL 0x1C16DFC
	0x03B4D528 LDR X8, [X20]
	0x03B4D52C LDR X8, [X8 + 0xB8]
	0x03B4D530 STR X19, [X8 + 0x8]
	0x03B4D534 LDP X20, X19, [X31 + 0x10]
	0x03B4D538 LDP X30, X21, [X31], #0x20
	0x03B4D53C RET
	0x03B4D540 RET
	0x03B4D544 B 0x3B4D498
	0x03B4D548 LDR V0, [X0 + 0x20]
	0x03B4D54C RET
	0x03B4D550 STR S0, [X0 + 0x20]
	0x03B4D554 RET
	0x03B4D558 LDR X0, [X0 + 0x28]
	0x03B4D55C RET
	0x03B4D560 STR X1, [X0 + 0x28]
	0x03B4D564 B 0x3B4D568
	0x03B4D568 STP X30, X21, [X31 - 0x20]!
	0x03B4D56C STP X20, X19, [X31 + 0x10]
	0x03B4D570 ADRP X20, 0x895000
	0x03B4D574 ADRP X21, 0x5A6000
	0x03B4D578 LDRB W8, [X20 + 0x8DC]
	0x03B4D57C LDR X21, [X21 + 0x598]
	0x03B4D580 MOV X19, X0
	0x03B4D584 TBNZ X8, 0x0, 0x3B4D5A8
	0x03B4D588 ADRP X0, 0x5A6000
	0x03B4D58C LDR X0, [X0 + 0xD78]
	0x03B4D590 BL 0x1C16CF4
	0x03B4D594 ADRP X0, 0x5A6000
	0x03B4D598 LDR X0, [X0 + 0x598]
	0x03B4D59C BL 0x1C16CF4
	0x03B4D5A0 MOVZ W8, 0x1
	0x03B4D5A4 STRB W8, [X20 + 0x8DC]
	0x03B4D5A8 LDR X0, [X21]
	0x03B4D5AC LDR X20, [X19 + 0x60]
	0x03B4D5B0 LDR W8, [X0 + 0xE0]
	0x03B4D5B4 CBNZ W8, 0x3B4D5BC
	0x03B4D5B8 BL 0x1C16DFC
	0x03B4D5BC MOV X0, X20
	0x03B4D5C0 MOV X1, X31
	0x03B4D5C4 MOV X2, X31
	0x03B4D5C8 BL 0x3C354F8
	0x03B4D5CC TBZ X0, 0x0, 0x3B4D5F0
	0x03B4D5D0 LDR X0, [X21]
	0x03B4D5D4 LDR X20, [X19 + 0x60]
	0x03B4D5D8 LDR W8, [X0 + 0xE0]
	0x03B4D5DC CBNZ W8, 0x3B4D5E4
	0x03B4D5E0 BL 0x1C16DFC
	0x03B4D5E4 MOV X0, X20
	0x03B4D5E8 MOV X1, X31
	0x03B4D5EC BL 0x3C394A8
	0x03B4D5F0 LDR X0, [X21]
	0x03B4D5F4 LDR X20, [X19 + 0x28]
	0x03B4D5F8 LDR W8, [X0 + 0xE0]
	0x03B4D5FC CBNZ W8, 0x3B4D604
	0x03B4D600 BL 0x1C16DFC
	0x03B4D604 MOV X0, X20
	0x03B4D608 MOV X1, X31
	0x03B4D60C MOV X2, X31
	0x03B4D610 BL 0x3C354F8
	0x03B4D614 TBZ X0, 0x0, 0x3B4D644
	0x03B4D618 LDR X0, [X21]
	0x03B4D61C ADRP X21, 0x5A6000
	0x03B4D620 LDR X20, [X19 + 0x28]
	0x03B4D624 LDR W8, [X0 + 0xE0]
	0x03B4D628 LDR X21, [X21 + 0xD78]
	0x03B4D62C CBNZ W8, 0x3B4D634
	0x03B4D630 BL 0x1C16DFC
	0x03B4D634 LDR X1, [X21]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+80], D9
	003 Move [X31+88], D8
	004 Move [X31+96], X29
	005 Move [X31+104], X30
	006 Move [X31+112], X28
	007 Move [X31+120], X27
	008 Move [X31+128], X26
	009 Move [X31+136], X25
	010 Move [X31+144], X24
	011 Move [X31+152], X23
	012 Move [X31+160], X22
	013 Move [X31+168], X21
	014 Move [X31+176], X20
	015 Move [X31+184], X19
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move [X31+16], D1
	018 Move [X31+64], X31
	019 Move [X31+72], X31
	020 Move [X31+56], W31
	021 Move [X31+48], X31
	022 Move [X31+40], W31
	023 Move [X31+32], X31
	024 Move W8, [X6+8]
	025 Move X20, X6
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move V8, V0
	028 Move V0, [X31+1]
	029 Move X26, W8
	030 NotImplemented "Instruction SBFM not yet implemented."
	031 Add X8, X8, W0
	032 Move X21, X5
	033 Move X22, X4
	034 Move W23, W2
	035 Move X24, X31
	036 Xor W27, W3, 1
	037 Move X25, W0
	038 Move W28, W1
	039 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	040 Move X19, X8
	041 ShiftRight X19, 62
	042 And X19, X19, 0x1FFFFFFF
	043 Move W29, 1
	044 Move [X31+8], X0
	045 Move X8, [X22]
	046 Add X8, X8, X24
	047 Move W9, [X8+8]
	048 Move X10, [X8]
	049 Add X8, X25, X29
	050 Subtract X8, X8, 1
	051 Move [X31+72], W9
	052 Move [X31+64], X10
	053 Move TEMP, X23
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {70}
	057 Move X9, [X21]
	058 Move V0, [X31+64]
	059 Move V1, [X31+72]
	060 Move V4, [X31+1]
	061 Add X9, X9, X24
	062 Move V2, [X9]
	063 Move V3, [X9+8]
	064 Subtract V0, V0, V2
	065 Subtract S1, S1, S3
	066 NotImplemented "Instruction INVALID not yet implemented."
	067 Multiply S4, S1, S4
	068 Add V1, V2, V0
	069 Add S0, S3, S4
	070 Move V1, [X31+64]
	071 Move V0, [X31+72]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction CSET not yet implemented."
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move [X31+48], D1
	076 Move [X31+56], S0
	077 Or W8, W8, W27
	078 Move TEMP, X8
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfEqual {100}
	082 Move X8, [X20]
	083 And W0, W23, 1
	084 Add X1, X31, 64
	085 Add X2, X31, 32
	086 Add X8, X8, X19
	087 Add X8, X8, X24
	088 NotImplemented "Instruction LDUR not yet implemented."
	089 NotImplemented "Instruction LDUR not yet implemented."
	090 Add X3, X31, 48
	091 Add X4, X31, 76
	092 Move V0, V8
	093 Move [X31+40], W9
	094 Move [X31+32], X8
	095 Call XRInteractorLineVisual.EvaluateLineEndPoint, V0, X0, X1, X2, X3, X4
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfEqual {116}
	100 Move X8, [X20]
	101 Move X9, [X31+48]
	102 Move W10, [X31+56]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Add X8, X8, X19
	105 Add X8, X8, X24
	106 Move [X8+8], W10
	107 Move [X8], X9
	108 Add X8, X29, 1
	109 Add X9, X25, X29
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Add X24, X24, 12
	112 Move X29, X8
	113 Move X9, [X31+8]
	114 Add W8, W9, W8
	115 Subtract W0, W8, 1
	116 Move X8, [X20]
	117 Move W11, [X31+56]
	118 Move X12, [X31+48]
	119 Move X0, [X31+8]
	120 Add W9, W25, W29
	121 Move W10, 12
	122 Subtract W9, W9, 1
	123 NotImplemented "Instruction UMADDL not yet implemented."
	124 Move [X8+8], W11
	125 Move [X8], X12
	126 Add W0, W0, W29
	127 Move X20, [X31+176]
	128 Move X19, [X31+184]
	129 Move X22, [X31+160]
	130 Move X21, [X31+168]
	131 Move X24, [X31+144]
	132 Move X23, [X31+152]
	133 Move X26, [X31+128]
	134 Move X25, [X31+136]
	135 Move X28, [X31+112]
	136 Move X27, [X31+120]
	137 Move X29, [X31+96]
	138 Move X30, [X31+104]
	139 Move D9, [X31+80]
	140 Move D8, [X31+88]
	141 Add X31, X31, 192
	142 Return X0

Method: System.Boolean EvaluateLineEndPoint$BurstManaged(System.Single targetLineLength, System.Boolean shouldSmoothPoint, in Unity.Mathematics.float3 unsmoothedTargetPoint, in Unity.Mathematics.float3 lastRenderPoint, ref Unity.Mathematics.float3 newRenderPoint, ref System.Single lineLength)

Disassembly:
	0x03B4D638 MOV X0, X20
	0x03B4D63C BL 0x222D35C
	0x03B4D640 STR X0, [X19 + 0x60]
	0x03B4D644 LDP X20, X19, [X31 + 0x10]
	0x03B4D648 LDP X30, X21, [X31], #0x20
	0x03B4D64C RET
	0x03B4D650 LDR V0, [X0 + 0x30]
	0x03B4D654 RET
	0x03B4D658 STR S0, [X0 + 0x30]
	0x03B4D65C RET
	0x03B4D660 LDRB W0, [X0 + 0x34]
	0x03B4D664 RET
	0x03B4D668 AND W8, W1, 0x1
	0x03B4D66C STRB W8, [X0 + 0x34]
	0x03B4D670 RET
	0x03B4D674 LDRB W0, [X0 + 0x35]
	0x03B4D678 RET
	0x03B4D67C AND W8, W1, 0x1
	0x03B4D680 STRB W8, [X0 + 0x35]
	0x03B4D684 RET
	0x03B4D688 LDR V0, [X0 + 0x38]
	0x03B4D68C RET
	0x03B4D690 STR S0, [X0 + 0x38]
	0x03B4D694 RET
	0x03B4D698 LDRB W0, [X0 + 0x3C]
	0x03B4D69C RET
	0x03B4D6A0 AND W8, W1, 0x1
	0x03B4D6A4 STRB W8, [X0 + 0x3C]
	0x03B4D6A8 RET
	0x03B4D6AC LDRB W0, [X0 + 0x3D]
	0x03B4D6B0 RET
	0x03B4D6B4 AND W8, W1, 0x1
	0x03B4D6B8 STRB W8, [X0 + 0x3D]
	0x03B4D6BC RET
	0x03B4D6C0 LDR W0, [X0 + 0x40]
	0x03B4D6C4 RET
	0x03B4D6C8 STR W1, [X0 + 0x40]
	0x03B4D6CC RET
	0x03B4D6D0 LDRB W0, [X0 + 0x44]
	0x03B4D6D4 RET
	0x03B4D6D8 STP X30, X23, [X31 - 0x30]!
	0x03B4D6DC STP X22, X21, [X31 + 0x10]
	0x03B4D6E0 STP X20, X19, [X31 + 0x20]
	0x03B4D6E4 ADRP X23, 0x895000
	0x03B4D6E8 ADRP X21, 0x5A6000
	0x03B4D6EC LDRB W8, [X23 + 0x8D7]
	0x03B4D6F0 LDR X21, [X21 + 0x598]
	0x03B4D6F4 MOV W19, W1
	0x03B4D6F8 MOV X20, X0
	0x03B4D6FC AND W22, W1, 0x1
	0x03B4D700 TBNZ X8, 0x0, 0x3B4D718
	0x03B4D704 ADRP X0, 0x5A6000
	0x03B4D708 LDR X0, [X0 + 0x598]
	0x03B4D70C BL 0x1C16CF4
	0x03B4D710 MOVZ W8, 0x1
	0x03B4D714 STRB W8, [X23 + 0x8D7]
	0x03B4D718 STRB W22, [X20 + 0x44]
	0x03B4D71C LDR X0, [X21]
	0x03B4D720 LDR X21, [X20 + 0x60]
	0x03B4D724 LDR W8, [X0 + 0xE0]
	0x03B4D728 CBNZ W8, 0x3B4D730
	0x03B4D72C BL 0x1C16DFC
	0x03B4D730 MOV X0, X21
	0x03B4D734 MOV X1, X31
	0x03B4D738 MOV X2, X31
	0x03B4D73C BL 0x3C354F8
	0x03B4D740 TBZ X0, 0x0, 0x3B4D764
	0x03B4D744 LDR X0, [X20 + 0x60]
	0x03B4D748 CBZ X0, 0x3B4D774
	0x03B4D74C AND W1, W19, 0x1
	0x03B4D750 LDP X20, X19, [X31 + 0x20]
	0x03B4D754 LDP X22, X21, [X31 + 0x10]
	0x03B4D758 MOV X2, X31
	0x03B4D75C LDP X30, X23, [X31], #0x30
	0x03B4D760 B 0x3C357B4
	0x03B4D764 LDP X20, X19, [X31 + 0x20]
	0x03B4D768 LDP X22, X21, [X31 + 0x10]
	0x03B4D76C LDP X30, X23, [X31], #0x30
	0x03B4D770 RET
	0x03B4D774 BL 0x1C16F20
	0x03B4D778 STP X30, X21, [X31 - 0x20]!
	0x03B4D77C STP X20, X19, [X31 + 0x10]
	0x03B4D780 ADRP X20, 0x895000
	0x03B4D784 LDRB W8, [X20 + 0x8D8]
	0x03B4D788 MOV X19, X0
	0x03B4D78C TBNZ X8, 0x0, 0x3B4D7C8
	0x03B4D790 ADRP X0, 0x60D000
	0x03B4D794 LDR X0, [X0 + 0xAF0]
	0x03B4D798 BL 0x1C16CF4
	0x03B4D79C ADRP X0, 0x60D000
	0x03B4D7A0 LDR X0, [X0 + 0x188]
	0x03B4D7A4 BL 0x1C16CF4
	0x03B4D7A8 ADRP X0, 0x60D000
	0x03B4D7AC LDR X0, [X0 + 0x1B0]
	0x03B4D7B0 BL 0x1C16CF4
	0x03B4D7B4 ADRP X0, 0x60D000
	0x03B4D7B8 LDR X0, [X0 + 0xAF8]
	0x03B4D7BC BL 0x1C16CF4
	0x03B4D7C0 MOVZ W8, 0x1
	0x03B4D7C4 STRB W8, [X20 + 0x8D8]
	0x03B4D7C8 MOV X0, X19
	0x03B4D7CC MOV X1, X31
	0x03B4D7D0 BL 0x3C32ECC
	0x03B4D7D4 CBZ X0, 0x3B4D888
	0x03B4D7D8 ADRP X20, 0x60D000
	0x03B4D7DC LDR X20, [X20 + 0xAF0]
	0x03B4D7E0 MOV X1, X31
	0x03B4D7E4 BL 0x3C35BD8
	0x03B4D7E8 AND X0, X0, 0x0
	0x03B4D7EC MOV X1, X31
	0x03B4D7F0 BL 0x3C90E1C
	0x03B4D7F4 STR W0, [X19 + 0x88]
	0x03B4D7F8 LDR X2, [X20]
	0x03B4D7FC ADD X20, X19, 0x68
	0x03B4D800 MOV X0, X19
	0x03B4D804 MOV X1, X20
	0x03B4D808 BL 0x21A4990
	0x03B4D80C TBZ X0, 0x0, 0x3B4D864
	0x03B4D810 LDR X8, [X20]
	0x03B4D814 CBZ X8, 0x3B4D888
	0x03B4D818 LDR X20, [X8 + 0x80]
	0x03B4D81C ADRP X8, 0x60D000
	0x03B4D820 LDR X8, [X8 + 0x188]
	0x03B4D824 LDR X0, [X8]
	0x03B4D828 BL 0x1C16F10
	0x03B4D82C ADRP X8, 0x60D000
	0x03B4D830 LDR X8, [X8 + 0xAF8]
	0x03B4D834 MOV X1, X19

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X25
	012 Move [X31+96], X24
	013 Move [X31+104], X23
	014 Move [X31+112], X22
	015 Move [X31+120], X21
	016 Move [X31+128], X20
	017 Move [X31+136], X19
	018 Move X24, 0x895000
	019 Move V9, [X3]
	020 Move V11, [X3+8]
	021 Move V10, [X2]
	022 Move W8, [X24+1413]
	023 Move V12, [X2+8]
	024 Move X21, X4
	025 Move X19, X3
	026 Move X20, X2
	027 Move X22, X1
	028 Move W23, W0
	029 Move V8, V0
	030 Compare W8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, 0x5A7000
	033 Move X0, [X0+1448]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X24+1413], W8
	037 Move X25, 0x5A7000
	038 Move X25, [X25+1448]
	039 Subtract V10, V9, V10
	040 Subtract S9, S11, S12
	041 Move X0, [X25]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 Invalid "Jump target not found in method."
	045 Call 0x1C17DFC
	046 NotImplemented "Instruction INVALID not yet implemented."
	047 Multiply S0, S9, S9
	048 NotImplemented "Instruction FADDP not yet implemented."
	049 Add S0, S0, S1
	050 NotImplemented "Instruction FSQRT not yet implemented."
	051 Move TEMP, X23
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {110}
	055 Move V12, [X20]
	056 NotImplemented "Instruction LDUR not yet implemented."
	057 Move V14, [X22]
	058 Move W8, [X24+1413]
	059 NotImplemented "Instruction LDUR not yet implemented."
	060 Compare W8, 0
	061 JumpIfNotEqual {67}
	062 Move X0, 0x5A7000
	063 Move X0, [X0+1448]
	064 Call 0x1C17CF4
	065 Move W8, 1
	066 Move [X24+1413], W8
	067 Move X0, [X25]
	068 Subtract S14, S14, S12
	069 Subtract V12, V15, V13
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 Multiply S0, S14, S14
	075 NotImplemented "Instruction INVALID not yet implemented."
	076 Add S0, S0, S1
	077 Move S1, V1.S[1]
	078 Add S0, S1, S0
	079 NotImplemented "Instruction FSQRT not yet implemented."
	080 NotImplemented "Instruction FCMP not yet implemented."
	081 Move V12, [X20]
	082 Move W8, [X24+1413]
	083 Move V13, [X20+8]
	084 Compare W8, 0
	085 JumpIfNotEqual {93}
	086 Move X0, 0x5A7000
	087 Move X0, [X0+1448]
	088 Move [X31], V6
	089 Call 0x1C17CF4
	090 Move V6, [X31]
	091 Move W8, 1
	092 Move [X24+1413], W8
	093 Move X0, [X25]
	094 Move W8, [X0+224]
	095 Compare W8, 0
	096 JumpIfNotEqual {100}
	097 Move [X31], V6
	098 Call 0x1C17DFC
	099 Move V6, [X31]
	100 Move S0, 1
	101 NotImplemented "Instruction FDIV not yet implemented."
	102 NotImplemented "Instruction INVALID not yet implemented."
	103 Multiply S0, S9, S0
	104 NotImplemented "Instruction INVALID not yet implemented."
	105 Multiply S0, S0, S6
	106 Add V1, V1, V12
	107 Add S0, S0, S13
	108 Move [X19], D1
	109 Move [X19+8], S0
	110 Move V6, V11
	111 Move V0, [X21]
	112 Add S0, S6, S0
	113 NotImplemented "Instruction FCMP not yet implemented."
	114 Move [X21], S0
	115 Move V2, [X20]
	116 Move V3, [X20+8]
	117 Move V4, [X19]
	118 Move V5, [X19+8]
	119 Subtract S1, S0, S8
	120 NotImplemented "Instruction FDIV not yet implemented."
	121 Move S6, 1
	122 Subtract S1, S6, S1
	123 Subtract V4, V4, V2
	124 Subtract S5, S5, S3
	125 NotImplemented "Instruction INVALID not yet implemented."
	126 Multiply S1, S1, S5
	127 Add V2, V2, V4
	128 Add S1, S3, S1
	129 Move [X19], D2
	130 Move [X19+8], S1
	131 NotImplemented "Instruction FCMP not yet implemented."
	132 Move X20, [X31+128]
	133 Move X19, [X31+136]
	134 Move X22, [X31+112]
	135 Move X21, [X31+120]
	136 Move X24, [X31+96]
	137 Move X23, [X31+104]
	138 Move X30, [X31+80]
	139 Move X25, [X31+88]
	140 Move D9, [X31+64]
	141 Move D8, [X31+72]
	142 Move D11, [X31+48]
	143 Move D10, [X31+56]
	144 Move D13, [X31+32]
	145 Move D12, [X31+40]
	146 Move D15, [X31+16]
	147 Move D14, [X31+24]
	148 NotImplemented "Instruction CSET not yet implemented."
	149 Add X31, X31, 144
	150 Return X0

