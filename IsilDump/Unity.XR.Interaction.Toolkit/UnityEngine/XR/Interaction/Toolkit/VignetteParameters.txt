Type: UnityEngine.XR.Interaction.Toolkit.VignetteParameters

Method: System.Single get_apertureSize()

Disassembly:
	0x03B84498 B.LT 0x3B84380
	0x03B8449C STR W29, [X22 + 0x18]

ISIL:
	001 Move V0, [X0+16]
	002 Return V0

Method: System.Void set_apertureSize(System.Single value)

Disassembly:
	0x03B844A0 LDR V0, [X20 + 0x1C]
	0x03B844A4 FCMP S0, 0x0

ISIL:
	001 Move [X0+16], S0
	002 Return 

Method: System.Single get_featheringEffect()

Disassembly:
	0x03B844A8 FCSEL S12, S0, S8, GT
	0x03B844AC FCMP S11, S10

ISIL:
	001 Move V0, [X0+20]
	002 Return V0

Method: System.Void set_featheringEffect(System.Single value)

Disassembly:
	0x03B844B0 B.PL 0x3B844EC
	0x03B844B4 FCMP S0, 0x0

ISIL:
	001 Move [X0+20], S0
	002 Return 

Method: System.Single get_easeInTime()

Disassembly:
	0x03B844B8 B.LE 0x3B844EC
	0x03B844BC LDR V13, [X20 + 0x10]

ISIL:
	001 Move V0, [X0+24]
	002 Return V0

Method: System.Void set_easeInTime(System.Single value)

Disassembly:
	0x03B844C0 MOV X0, X31
	0x03B844C4 BL 0x3C3C7B4

ISIL:
	001 Move [X0+24], S0
	002 Return 

Method: System.Single get_easeOutTime()

Disassembly:
	0x03B844C8 FSUB S1, S10, S13
	0x03B844CC FDIV S1, S1, S12

ISIL:
	001 Move V0, [X0+28]
	002 Return V0

Method: System.Void set_easeOutTime(System.Single value)

Disassembly:
	0x03B844D0 FMUL S0, S1, S0
	0x03B844D4 FADD S0, S11, S0

ISIL:
	001 Move [X0+28], S0
	002 Return 

Method: System.Boolean get_easeInTimeLock()

Disassembly:
	0x03B844D8 FMIN S0, S0, S10
	0x03B844DC FCMP S0, S10

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_easeInTimeLock(System.Boolean value)

Disassembly:
	0x03B844E0 STR S0, [X22 + 0x1C]
	0x03B844E4 B.LT 0x3B84380
	0x03B844E8 B 0x3B844F0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+32], W8
	003 Return 

Method: System.Single get_easeOutDelayTime()

Disassembly:
	0x03B844EC STR W26, [X22 + 0x1C]
	0x03B844F0 STR W31, [X22 + 0x18]

ISIL:
	001 Move V0, [X0+36]
	002 Return V0

Method: System.Void set_easeOutDelayTime(System.Single value)

Disassembly:
	0x03B844F4 B 0x3B84380
	0x03B844F8 CBZ X20, 0x3B84714

ISIL:
	001 Move [X0+36], S0
	002 Return 

Method: UnityEngine.Color get_vignetteColor()

Disassembly:
	0x03B844FC LDR V0, [X20 + 0x18]
	0x03B84500 LDR V12, [X20 + 0x10]
	0x03B84504 STRB W31, [X22 + 0x20]

ISIL:
	001 Move S0, [X0+40]
	002 Move S1, [X0+44]
	003 Move S2, [X0+48]
	004 Move S3, [X0+52]
	005 Return X0

Method: System.Void set_vignetteColor(UnityEngine.Color value)

Disassembly:
	0x03B84508 FCMP S0, 0x0
	0x03B8450C FCSEL S13, S0, S8, GT
	0x03B84510 B.LE 0x3B84544

ISIL:
	001 Move [X0+40], S0
	002 Move [X0+48], S1
	003 Move [X0+48], S2
	004 Move [X0+56], S3
	005 Return 

Method: UnityEngine.Color get_vignetteColorBlend()

Disassembly:
	0x03B84514 FCMP S11, S12
	0x03B84518 B.LE 0x3B84544
	0x03B8451C MOV X0, X31

ISIL:
	001 Move S0, [X0+56]
	002 Move S1, [X0+60]
	003 Move S2, [X0+64]
	004 Move S3, [X0+68]
	005 Return X0

Method: System.Void set_vignetteColorBlend(UnityEngine.Color value)

Disassembly:
	0x03B84520 BL 0x3C3C7B4
	0x03B84524 FADD S1, S12, S9
	0x03B84528 FDIV S1, S1, S13

ISIL:
	001 Move [X0+56], S0
	002 Move [X0+64], S1
	003 Move [X0+64], S2
	004 Move [X0+72], S3
	005 Return 

Method: System.Single get_apertureVerticalPosition()

Disassembly:
	0x03B8452C FMUL S0, S1, S0
	0x03B84530 FADD S0, S11, S0

ISIL:
	001 Move V0, [X0+72]
	002 Return V0

Method: System.Void set_apertureVerticalPosition(System.Single value)

Disassembly:
	0x03B84534 FCMP S0, S12
	0x03B84538 FCSEL S0, S12, S0, MI

ISIL:
	001 Move [X0+72], S0
	002 Return 

Method: System.Void CopyFrom(UnityEngine.XR.Interaction.Toolkit.VignetteParameters parameters)

Disassembly:
	0x03B8453C STR S0, [X22 + 0x1C]
	0x03B84540 B 0x3B84380
	0x03B84544 STR S12, [X22 + 0x1C]
	0x03B84548 B 0x3B84380
	0x03B8454C CBZ X20, 0x3B8471C
	0x03B84550 LDR V0, [X20 + 0x18]
	0x03B84554 FCMP S0, 0x0
	0x03B84558 FCSEL S12, S0, S8, GT
	0x03B8455C B.LE 0x3B84594
	0x03B84560 LDR V13, [X20 + 0x10]
	0x03B84564 FCMP S11, S13
	0x03B84568 B.LE 0x3B84594
	0x03B8456C MOV X0, X31
	0x03B84570 BL 0x3C3C7B4
	0x03B84574 FADD S1, S13, S9
	0x03B84578 FDIV S1, S1, S12
	0x03B8457C FMUL S0, S1, S0
	0x03B84580 FADD S0, S11, S0
	0x03B84584 FCMP S0, S13
	0x03B84588 FCSEL S0, S13, S0, MI
	0x03B8458C STR S0, [X22 + 0x1C]
	0x03B84590 B 0x3B84380
	0x03B84594 STRB W27, [X22 + 0x20]
	0x03B84598 LDR V0, [X20 + 0x24]
	0x03B8459C FCMP S0, 0x0
	0x03B845A0 B.LE 0x3B8449C
	0x03B845A4 LDR V1, [X22 + 0x24]
	0x03B845A8 FCMP S1, S0
	0x03B845AC B.PL 0x3B8449C
	0x03B845B0 STR W28, [X22 + 0x18]
	0x03B845B4 B 0x3B84460
	0x03B845B8 ADRP X20, 0x5D7000
	0x03B845BC LDR X20, [X20 + 0xEC0]
	0x03B845C0 ADD X0, X31, 0x20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {20}
	005 Move V0, [X1+1]
	006 Move [X0+1], V0
	007 Move W8, [X1+32]
	008 Move [X0+32], W8
	009 Move V0, [X1+36]
	010 Move [X0+36], S0
	011 NotImplemented "Instruction LDUR not yet implemented."
	012 Move [X0+40], V0
	013 NotImplemented "Instruction LDUR not yet implemented."
	014 Move [X0+56], V0
	015 Move V0, [X1+72]
	016 Move [X0+72], S0
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return 
	020 Move X0, 0x575000
	021 Move X0, [X0+1320]
	022 Call 0x1C17D08
	023 Call 0x1C17F10
	024 Move X19, X0
	025 Move X0, 0x59E000
	026 Move X0, [X0+3200]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X19
	030 Move X2, X31
	031 Call ArgumentNullException..ctor, X0, X1
	032 Move X0, 0x5D8000
	033 Move X0, [X0+3752]
	034 Call 0x1C17D08
	035 Move X1, X0
	036 Move X0, X19
	037 Call 0x1C17DEC

Method: System.Void .ctor()

Disassembly:
	0x03B845C4 LDR X1, [X20]
	0x03B845C8 BL 0x2BC434C
	0x03B845CC LDR X0, [X19 + 0x38]
	0x03B845D0 CBZ X0, 0x3B84708
	0x03B845D4 LDR X1, [X25]
	0x03B845D8 ADD X8, X31, 0x8
	0x03B845DC BL 0x301CB58
	0x03B845E0 LDUR V0, [X31 + 0x8]
	0x03B845E4 LDR X9, [X31 + 0x18]
	0x03B845E8 MOV X8, X31
	0x03B845EC STR V0, [X31 + 0x2]
	0x03B845F0 STR X9, [X31 + 0x30]
	0x03B845F4 FMOV S0, 1
	0x03B845F8 MOV V8.16B, V0.16B
	0x03B845FC MOV X22, X8
	0x03B84600 LDR X1, [X24]
	0x03B84604 ADD X0, X31, 0x20
	0x03B84608 BL 0x2BC4350
	0x03B8460C TBZ X0, 0x0, 0x3B84628
	0x03B84610 LDR X8, [X31 + 0x30]
	0x03B84614 CBZ X8, 0x3B846F4
	0x03B84618 LDR V0, [X8 + 0x1C]
	0x03B8461C FCMP S0, S8
	0x03B84620 B.PL 0x3B84600
	0x03B84624 B 0x3B845F8
	0x03B84628 LDR X1, [X20]
	0x03B8462C ADD X0, X31, 0x20
	0x03B84630 BL 0x2BC434C
	0x03B84634 CBZ X22, 0x3B846B4
	0x03B84638 LDR X21, [X22 + 0x10]
	0x03B8463C CBZ X21, 0x3B84708
	0x03B84640 LDR X8, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x85F000
	006 Move X20, 0x5D8000
	007 Move W8, [X21+2788]
	008 Move X20, [X20+3760]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5D8000
	015 Move X0, [X0+3760]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2788], W8
	019 Move X8, -50950144
	020 Move V0, [X8+114]
	021 Move [X19+1], V0
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X20]
	028 Move X8, [X0+184]
	029 Move X1, X31
	030 Move V0, [X8]
	031 Move [X19+40], V0
	032 Move X8, [X0+184]
	033 Move X0, X19
	034 Move V0, [X8+1]
	035 Move [X19+56], V0
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call Object..ctor, X0
	041 Return 

