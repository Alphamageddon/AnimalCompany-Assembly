Type: UnityEngine.XR.Interaction.Toolkit.XRSocketInteractor

Method: System.Boolean get_showInteractableHoverMeshes()

Disassembly:
	0x03B662E8 STP X20, X19, [X31 + 0x10]
	0x03B662EC ADRP X21, 0x87C000

ISIL:
	001 Move W0, [X0+424]
	002 Return X0

Method: System.Void set_showInteractableHoverMeshes(System.Boolean value)

Disassembly:
	0x03B662F0 LDRB W8, [X21 + 0x9BA]
	0x03B662F4 MOV X20, X1
	0x03B662F8 MOV X19, X0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+424], W8
	003 Return 

Method: UnityEngine.Material get_interactableHoverMeshMaterial()

Disassembly:
	0x03B662FC TBNZ X8, 0x0, 0x3B66314
	0x03B66300 ADRP X0, 0x5F4000

ISIL:
	001 Move X0, [X0+432]
	002 Return X0

Method: System.Void set_interactableHoverMeshMaterial(UnityEngine.Material value)

Disassembly:
	0x03B66304 LDR X0, [X0 + 0x6C0]
	0x03B66308 BL 0x1C16CF4

ISIL:
	001 Move [X0+432], X1
	002 Return 

Method: UnityEngine.Material get_interactableCantHoverMeshMaterial()

Disassembly:
	0x03B6630C MOVZ W8, 0x1
	0x03B66310 STRB W8, [X21 + 0x9BA]

ISIL:
	001 Move X0, [X0+440]
	002 Return X0

Method: System.Void set_interactableCantHoverMeshMaterial(UnityEngine.Material value)

Disassembly:
	0x03B66314 MOV X0, X19
	0x03B66318 MOV X1, X20

ISIL:
	001 Move [X0+440], X1
	002 Return 

Method: System.Boolean get_socketActive()

Disassembly:
	0x03B6631C MOV X2, X31
	0x03B66320 BL 0x3B5397C

ISIL:
	001 Move W0, [X0+448]
	002 Return X0

Method: System.Void set_socketActive(System.Boolean value)

Disassembly:
	0x03B66324 CBZ X20, 0x3B663B8
	0x03B66328 MOV X0, X20
	0x03B6632C BL 0x3B66278
	0x03B66330 LDR X8, [X19]
	0x03B66334 MOV X1, X0
	0x03B66338 MOV X0, X19
	0x03B6633C LDR X9, [X8 + 0x768]
	0x03B66340 LDR X2, [X8 + 0x770]
	0x03B66344 BLR X9
	0x03B66348 TBZ X0, 0x0, 0x3B66390
	0x03B6634C MOV X0, X20
	0x03B66350 BL 0x3B66278
	0x03B66354 CBZ X0, 0x3B66390
	0x03B66358 ADRP X8, 0x5F4000
	0x03B6635C LDR X8, [X8 + 0x6C0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+544]
	004 And W8, W1, 1
	005 Move [X0+448], W8
	006 Move TEMP, X1
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {12}
	010 Move X1, X31
	011 Call Behaviour.get_isActiveAndEnabled, X0
	012 Move W0, W31
	013 Compare X19, 0
	014 JumpIfEqual {20}
	015 And W8, W0, 1
	016 Move [X19+16], W8
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return 
	020 Call 0x1C17F20

Method: System.Single get_interactableHoverScale()

Disassembly:
	0x03B66360 LDR X9, [X0]
	0x03B66364 MOV X1, X0

ISIL:
	001 Move V0, [X0+452]
	002 Return V0

Method: System.Void set_interactableHoverScale(System.Single value)

Disassembly:
	0x03B66368 LDR X8, [X8]
	0x03B6636C LDRB W11, [X9 + 0x130]

ISIL:
	001 Move [X0+452], S0
	002 Return 

Method: System.Single get_recycleDelayTime()

Disassembly:
	0x03B66370 LDRB W10, [X8 + 0x130]
	0x03B66374 CMP W11, W10

ISIL:
	001 Move V0, [X0+456]
	002 Return V0

Method: System.Void set_recycleDelayTime(System.Single value)

Disassembly:
	0x03B66378 B.CC 0x3B66390
	0x03B6637C LDR X9, [X9 + 0xC8]

ISIL:
	001 Move [X0+456], S0
	002 Return 

Method: System.Boolean get_hoverSocketSnapping()

Disassembly:
	0x03B66380 ADD X9, X9, X10, 0x3, LSL
	0x03B66384 LDUR X9, [X9 - 0x8]

ISIL:
	001 Move W0, [X0+464]
	002 Return X0

Method: System.Void set_hoverSocketSnapping(System.Boolean value)

Disassembly:
	0x03B66388 CMP X9, X8
	0x03B6638C B.EQ 0x3B6639C
	0x03B66390 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+464], W8
	003 Return 

Method: System.Single get_socketSnappingRadius()

Disassembly:
	0x03B66394 LDP X30, X21, [X31], #0x20
	0x03B66398 RET

ISIL:
	001 Move V0, [X0+468]
	002 Return V0

Method: System.Void set_socketSnappingRadius(System.Single value)

Disassembly:
	0x03B6639C LDR X8, [X19]
	0x03B663A0 MOV X0, X19
	0x03B663A4 LDP X20, X19, [X31 + 0x10]
	0x03B663A8 LDR X3, [X8 + 0x7A8]
	0x03B663AC LDR X2, [X8 + 0x7B0]
	0x03B663B0 LDP X30, X21, [X31], #0x20
	0x03B663B4 BR X3
	0x03B663B8 BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+544]
	003 Move [X0+468], S0
	004 Compare X8, 0
	005 JumpIfEqual {9}
	006 Move [X8+20], S0
	007 Move X30, [X31+16]
	008 Return 
	009 Call 0x1C17F20

Method: UnityEngine.XR.Interaction.Toolkit.SocketScaleMode get_socketScaleMode()

Disassembly:
	0x03B663BC STR X30, [X31 - 0x20]!
	0x03B663C0 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W0, [X0+472]
	002 Return X0

Method: System.Void set_socketScaleMode(UnityEngine.XR.Interaction.Toolkit.SocketScaleMode value)

Disassembly:
	0x03B663C4 LDRB W8, [X0 + 0x1D0]
	0x03B663C8 CBZ W8, 0x3B663F8
	0x03B663CC MOV X20, X1
	0x03B663D0 MOV X1, X31
	0x03B663D4 MOV X19, X0
	0x03B663D8 BL 0x3B4B6D0
	0x03B663DC TBZ X0, 0x0, 0x3B66400
	0x03B663E0 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+544]
	003 Move [X0+472], W1
	004 Compare X8, 0
	005 JumpIfEqual {9}
	006 Move [X8+24], W1
	007 Move X30, [X31+16]
	008 Return 
	009 Call 0x1C17F20

Method: UnityEngine.Vector3 get_fixedScale()

Disassembly:
	0x03B663E4 MOV X1, X20
	0x03B663E8 LDP X20, X19, [X31 + 0x10]
	0x03B663EC MOV X2, X31
	0x03B663F0 LDR X30, [X31], #0x20

ISIL:
	001 Move V0, [X0+476]
	002 Move V1, [X0+480]
	003 Move V2, [X0+484]
	004 Return X0

Method: System.Void set_fixedScale(UnityEngine.Vector3 value)

Disassembly:
	0x03B663F4 B 0x3B5103C
	0x03B663F8 MOV W0, W31
	0x03B663FC B 0x3B66404
	0x03B66400 MOVZ W0, 0x1
	0x03B66404 LDP X20, X19, [X31 + 0x10]
	0x03B66408 LDR X30, [X31], #0x20
	0x03B6640C RET
	0x03B66410 STP X30, X21, [X31 - 0x20]!
	0x03B66414 STP X20, X19, [X31 + 0x10]
	0x03B66418 ADRP X21, 0x87C000
	0x03B6641C LDRB W8, [X21 + 0x9BB]
	0x03B66420 MOV X20, X1
	0x03B66424 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+544]
	004 Move [X0+476], S0
	005 Move [X0+480], S1
	006 Move [X0+484], S2
	007 Move X0, X31
	008 Call float3.op_Implicit, X0
	009 Compare X19, 0
	010 JumpIfEqual {17}
	011 Move [X19+28], S0
	012 Move [X19+36], S1
	013 Move [X19+36], S2
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return 
	017 Call 0x1C17F20

Method: UnityEngine.Vector3 get_targetBoundsSize()

Disassembly:
	0x03B66428 TBNZ X8, 0x0, 0x3B6644C
	0x03B6642C ADRP X0, 0x5F5000
	0x03B66430 LDR X0, [X0 + 0x3F8]
	0x03B66434 BL 0x1C16CF4

ISIL:
	001 Move V0, [X0+488]
	002 Move V1, [X0+492]
	003 Move V2, [X0+496]
	004 Return X0

Method: System.Void set_targetBoundsSize(UnityEngine.Vector3 value)

Disassembly:
	0x03B66438 ADRP X0, 0x5F4000
	0x03B6643C LDR X0, [X0 + 0x6C0]
	0x03B66440 BL 0x1C16CF4
	0x03B66444 MOVZ W8, 0x1
	0x03B66448 STRB W8, [X21 + 0x9BB]
	0x03B6644C MOV X0, X19
	0x03B66450 MOV X1, X20
	0x03B66454 MOV X2, X31
	0x03B66458 BL 0x3B50EE0
	0x03B6645C CBZ X20, 0x3B664F0
	0x03B66460 MOV X0, X20
	0x03B66464 BL 0x3B664F4
	0x03B66468 LDR X8, [X19 + 0x210]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+544]
	004 Move [X0+488], S0
	005 Move [X0+492], S1
	006 Move [X0+496], S2
	007 Move X0, X31
	008 Call float3.op_Implicit, X0
	009 Compare X19, 0
	010 JumpIfEqual {17}
	011 Move [X19+40], S0
	012 Move [X19+48], S1
	013 Move [X19+48], S2
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return 
	017 Call 0x1C17F20

Method: System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> get_unsortedValidTargets()

Disassembly:
	0x03B6646C CBZ X8, 0x3B664F0
	0x03B66470 ADRP X9, 0x5F5000

ISIL:
	001 Move X0, [X0+504]
	002 Return X0

Method: System.Int32 get_socketSnappingLimit()

Disassembly:
	0x03B66474 LDR X9, [X9 + 0x3F8]
	0x03B66478 MOV X20, X0

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Boolean get_ejectExistingSocketsWhenSnapping()

Disassembly:
	0x03B6647C MOV X0, X8
	0x03B66480 MOV X1, X20

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Void OnValidate()

Disassembly:
	0x03B66484 LDR X2, [X9]

ISIL:
No ISIL was generated
Method: System.Void Awake()

Disassembly:
	0x03B66500 LDRB W8, [X20 + 0x9F0]
	0x03B66504 MOV X19, X0
	0x03B66508 TBNZ X8, 0x0, 0x3B66520
	0x03B6650C ADRP X0, 0x5F4000
	0x03B66510 LDR X0, [X0 + 0x148]
	0x03B66514 BL 0x1C16CF4
	0x03B66518 MOVZ W8, 0x1
	0x03B6651C STRB W8, [X20 + 0x9F0]
	0x03B66520 LDR X19, [X19 + 0x18]
	0x03B66524 CBZ X19, 0x3B66550
	0x03B66528 ADRP X8, 0x5F4000
	0x03B6652C LDR X8, [X8 + 0x148]
	0x03B66530 MOV X0, X19
	0x03B66534 LDR X20, [X8]
	0x03B66538 MOV X1, X20
	0x03B6653C BL 0x1C16E00
	0x03B66540 CBNZ X0, 0x3B66554
	0x03B66544 MOV X0, X19
	0x03B66548 MOV X1, X20
	0x03B6654C BL 0x1C171E0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call XRBaseInteractor.Awake, X0
	006 Move X8, [X19+520]
	007 Compare X8, 0
	008 JumpIfEqual {23}
	009 Move X9, [X19+48]
	010 Move X0, X19
	011 Move [X8+32], X9
	012 Call XRSocketInteractor.UpdateCollidersAfterOnTriggerStay, X0
	013 Move [X19+536], X0
	014 Move X0, X19
	015 Call XRSocketInteractor.SyncTransformerParams, X0
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X2, [X8+1880]
	019 Move X1, [X8+1888]
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 CallNoReturn X2
	023 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x03B665B0 ADRP X8, 0x5F4000
	0x03B665B4 LDR X8, [X8 + 0x6C0]
	0x03B665B8 LDR X9, [X0]
	0x03B665BC MOV X1, X0
	0x03B665C0 LDR X8, [X8]
	0x03B665C4 LDRB W11, [X9 + 0x130]
	0x03B665C8 LDRB W10, [X8 + 0x130]
	0x03B665CC CMP W11, W10
	0x03B665D0 B.CC 0x3B665E8
	0x03B665D4 LDR X9, [X9 + 0xC8]
	0x03B665D8 ADD X9, X9, X10, 0x3, LSL
	0x03B665DC LDUR X9, [X9 - 0x8]
	0x03B665E0 CMP X9, X8
	0x03B665E4 B.EQ 0x3B665F4
	0x03B665E8 LDP X20, X19, [X31 + 0x10]
	0x03B665EC LDP X30, X21, [X31], #0x20
	0x03B665F0 RET
	0x03B665F4 LDR X8, [X19]
	0x03B665F8 MOV X0, X19
	0x03B665FC LDP X20, X19, [X31 + 0x10]
	0x03B66600 LDR X3, [X8 + 0x7A8]
	0x03B66604 LDR X2, [X8 + 0x7B0]
	0x03B66608 LDP X30, X21, [X31], #0x20
	0x03B6660C BR X3
	0x03B66610 BL 0x1C16F20
	0x03B66614 STR X30, [X31 - 0x20]!
	0x03B66618 STP X20, X19, [X31 + 0x10]
	0x03B6661C ADRP X20, 0x87C000
	0x03B66620 LDRB W8, [X20 + 0x9F3]
	0x03B66624 MOV X19, X0
	0x03B66628 TBNZ X8, 0x0, 0x3B66640
	0x03B6662C ADRP X0, 0x5F4000
	0x03B66630 LDR X0, [X0 + 0x160]
	0x03B66634 BL 0x1C16CF4
	0x03B66638 MOVZ W8, 0x1
	0x03B6663C STRB W8, [X20 + 0x9F3]
	0x03B66640 LDR X19, [X19 + 0x18]
	0x03B66644 CBZ X19, 0x3B66670
	0x03B66648 ADRP X8, 0x5F4000
	0x03B6664C LDR X8, [X8 + 0x160]
	0x03B66650 MOV X0, X19
	0x03B66654 LDR X20, [X8]
	0x03B66658 MOV X1, X20
	0x03B6665C BL 0x1C16E00
	0x03B66660 CBNZ X0, 0x3B66674
	0x03B66664 MOV X0, X19
	0x03B66668 MOV X1, X20
	0x03B6666C BL 0x1C171E0
	0x03B66670 MOV X0, X31
	0x03B66674 LDP X20, X19, [X31 + 0x10]
	0x03B66678 LDR X30, [X31], #0x20
	0x03B6667C RET
	0x03B66680 STP X30, X19, [X31 - 0x10]!
	0x03B66684 MOV X2, X31
	0x03B66688 MOV X19, X0
	0x03B6668C BL 0x3B509B4
	0x03B66690 MOV X0, X31
	0x03B66694 BL 0x3C3C6C4
	0x03B66698 STR S0, [X19 + 0x1CC]
	0x03B6669C LDP X30, X19, [X31], #0x10
	0x03B666A0 RET
	0x03B666A4 STP X30, X21, [X31 - 0x20]!
	0x03B666A8 STP X20, X19, [X31 + 0x10]
	0x03B666AC ADRP X21, 0x87C000
	0x03B666B0 LDRB W8, [X21 + 0x9BD]
	0x03B666B4 MOV X20, X1
	0x03B666B8 MOV X19, X0
	0x03B666BC TBNZ X8, 0x0, 0x3B666D4
	0x03B666C0 ADRP X0, 0x5F4000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x87D000
	008 Move X22, 0x5F5000
	009 Move X21, 0x5F6000
	010 Move W8, [X20+2482]
	011 Move X22, [X22+3560]
	012 Move X21, [X21+880]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x5F5000
	019 Move X0, [X0+3560]
	020 Call 0x1C17CF4
	021 Move X0, 0x5F6000
	022 Move X0, [X0+880]
	023 Call 0x1C17CF4
	024 Move X0, 0x5F6000
	025 Move X0, [X0+888]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+2482], W8
	029 Move X0, X19
	030 Move X1, X31
	031 Call XRBaseInteractor.OnEnable, X0
	032 Move X0, [X22]
	033 Move X20, [X19+520]
	034 Call 0x1C17F10
	035 Move X2, [X21]
	036 Move X1, X19
	037 Move X3, X31
	038 Move X21, X0
	039 Call Action`1<Object>..ctor, X0, X1, X2
	040 Compare X20, 0
	041 JumpIfEqual {82}
	042 Move X23, 0x5F6000
	043 Move X23, [X23+888]
	044 Move X0, X20
	045 Move X1, X21
	046 Move X2, X31
	047 Call TriggerContactMonitor.add_contactAdded, X0, X1
	048 Move X0, [X22]
	049 Move X20, [X19+520]
	050 Call 0x1C17F10
	051 Move X2, [X23]
	052 Move X1, X19
	053 Move X3, X31
	054 Move X21, X0
	055 Call Action`1<Object>..ctor, X0, X1, X2
	056 Compare X20, 0
	057 JumpIfEqual {82}
	058 Move X0, X20
	059 Move X1, X21
	060 Move X2, X31
	061 Call TriggerContactMonitor.add_contactRemoved, X0, X1
	062 Move X8, [X19+544]
	063 Compare X8, 0
	064 JumpIfEqual {82}
	065 Move W9, [X19+448]
	066 Move X0, X19
	067 Move [X8+16], W9
	068 Call XRSocketInteractor.SyncTransformerParams, X0
	069 Move X0, X19
	070 Call XRSocketInteractor.ResetCollidersAndValidTargets, X0
	071 Move X1, [X19+536]
	072 Move X0, X19
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X2, X31
	078 Move X30, [X31+48]
	079 Move X23, [X31+56]
	080 Call MonoBehaviour.StartCoroutine, X0, X1
	081 Return 
	082 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x03B66760 ADRP X20, 0x87C000
	0x03B66764 LDRB W8, [X20 + 0x9F6]
	0x03B66768 MOV X19, X0
	0x03B6676C TBNZ X8, 0x0, 0x3B66784
	0x03B66770 ADRP X0, 0x5F4000
	0x03B66774 LDR X0, [X0 + 0x160]
	0x03B66778 BL 0x1C16CF4
	0x03B6677C MOVZ W8, 0x1
	0x03B66780 STRB W8, [X20 + 0x9F6]
	0x03B66784 LDR X19, [X19 + 0x18]
	0x03B66788 CBZ X19, 0x3B667B4
	0x03B6678C ADRP X8, 0x5F4000
	0x03B66790 LDR X8, [X8 + 0x160]
	0x03B66794 MOV X0, X19
	0x03B66798 LDR X20, [X8]
	0x03B6679C MOV X1, X20
	0x03B667A0 BL 0x1C16E00
	0x03B667A4 CBNZ X0, 0x3B667B8
	0x03B667A8 MOV X0, X19
	0x03B667AC MOV X1, X20
	0x03B667B0 BL 0x1C171E0
	0x03B667B4 MOV X0, X31
	0x03B667B8 LDP X20, X19, [X31 + 0x10]
	0x03B667BC LDR X30, [X31], #0x20
	0x03B667C0 RET
	0x03B667C4 SUB X31, X31, 0x170
	0x03B667C8 STP D15, D14, [X31 + 0xD0]
	0x03B667CC STP D13, D12, [X31 + 0xE0]
	0x03B667D0 STP D11, D10, [X31 + 0xF0]
	0x03B667D4 STP D9, D8, [X31 + 0x100]
	0x03B667D8 STP X29, X30, [X31 + 0x110]
	0x03B667DC STP X28, X27, [X31 + 0x120]
	0x03B667E0 STP X26, X25, [X31 + 0x130]
	0x03B667E4 STP X24, X23, [X31 + 0x140]
	0x03B667E8 STP X22, X21, [X31 + 0x150]
	0x03B667EC STP X20, X19, [X31 + 0x160]
	0x03B667F0 ADRP X21, 0x87C000
	0x03B667F4 LDRB W9, [X21 + 0x9BE]
	0x03B667F8 MOV X20, X2
	0x03B667FC MOV X22, X1
	0x03B66800 MOV X23, X0
	0x03B66804 MOV X19, X8
	0x03B66808 STR S0, [X31 + 0x2C]
	0x03B6680C TBNZ X9, 0x0, 0x3B66854
	0x03B66810 ADRP X0, 0x5F4000
	0x03B66814 LDR X0, [X0 + 0x8D8]
	0x03B66818 BL 0x1C16CF4
	0x03B6681C ADRP X0, 0x58D000
	0x03B66820 LDR X0, [X0 + 0x598]
	0x03B66824 BL 0x1C16CF4
	0x03B66828 ADRP X0, 0x5B5000
	0x03B6682C LDR X0, [X0 + 0x610]
	0x03B66830 BL 0x1C16CF4
	0x03B66834 ADRP X0, 0x5F4000
	0x03B66838 LDR X0, [X0 + 0x6C0]
	0x03B6683C BL 0x1C16CF4
	0x03B66840 ADRP X0, 0x5F4000
	0x03B66844 LDR X0, [X0 + 0x7C8]
	0x03B66848 BL 0x1C16CF4
	0x03B6684C MOVZ W8, 0x1
	0x03B66850 STRB W8, [X21 + 0x9BE]
	0x03B66854 STP X31, X31, [X31 + 0xB0]
	0x03B66858 STR W31, [X31 + 0xC8]
	0x03B6685C STR X31, [X31 + 0xC0]
	0x03B66860 STP X31, X31, [X31 + 0x90]
	0x03B66864 STR W31, [X31 + 0xA8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x87D000
	008 Move W8, [X20+2483]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x5F5000
	015 Move X0, [X0+3560]
	016 Call 0x1C17CF4
	017 Move X0, 0x5F6000
	018 Move X0, [X0+880]
	019 Call 0x1C17CF4
	020 Move X0, 0x5F6000
	021 Move X0, [X0+888]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2483], W8
	025 Move X0, X19
	026 Move X1, X31
	027 Call XRBaseInteractor.OnDisable, X0
	028 Move X8, [X19+544]
	029 Compare X8, 0
	030 JumpIfEqual {79}
	031 Move X22, 0x5F5000
	032 Move X22, [X22+3560]
	033 Move [X8+16], W31
	034 Move X21, 0x5F6000
	035 Move X20, [X19+520]
	036 Move X0, [X22]
	037 Move X21, [X21+880]
	038 Call 0x1C17F10
	039 Move X2, [X21]
	040 Move X1, X19
	041 Move X3, X31
	042 Move X21, X0
	043 Call Action`1<Object>..ctor, X0, X1, X2
	044 Compare X20, 0
	045 JumpIfEqual {79}
	046 Move X23, 0x5F6000
	047 Move X23, [X23+888]
	048 Move X0, X20
	049 Move X1, X21
	050 Move X2, X31
	051 Call TriggerContactMonitor.remove_contactAdded, X0, X1
	052 Move X0, [X22]
	053 Move X20, [X19+520]
	054 Call 0x1C17F10
	055 Move X2, [X23]
	056 Move X1, X19
	057 Move X3, X31
	058 Move X21, X0
	059 Call Action`1<Object>..ctor, X0, X1, X2
	060 Compare X20, 0
	061 JumpIfEqual {79}
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X31
	065 Call TriggerContactMonitor.remove_contactRemoved, X0, X1
	066 Move X0, X19
	067 Call XRSocketInteractor.ResetCollidersAndValidTargets, X0
	068 Move X1, [X19+536]
	069 Move X0, X19
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X2, X31
	075 Move X30, [X31+48]
	076 Move X23, [X31+56]
	077 Call MonoBehaviour.StopCoroutine, X0, X1
	078 Return 
	079 Call 0x1C17F20

Method: System.Void OnTriggerEnter(UnityEngine.Collider other)

Disassembly:
	0x03B66868 STR X31, [X31 + 0xA0]
	0x03B6686C CBZ X22, 0x3B66FC8
	0x03B66870 ADRP X28, 0x5F4000
	0x03B66874 LDR X8, [X22]
	0x03B66878 LDR X28, [X28 + 0x8D8]
	0x03B6687C ADRP X21, 0x5F4000
	0x03B66880 LDRH W9, [X8 + 0x12E]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+520]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call TriggerContactMonitor.AddCollider, X0, X1
	008 Return 
	009 Call 0x1C17F20

Method: System.Void OnTriggerStay(UnityEngine.Collider other)

Disassembly:
	0x03B66884 LDR X1, [X28]
	0x03B66888 LDR X21, [X21 + 0x6C0]
	0x03B6688C CBZ X9, 0x3B668B0
	0x03B66890 LDR X10, [X8 + 0xB0]
	0x03B66894 ADD X10, X10, 0x8
	0x03B66898 LDUR X11, [X10 - 0x8]
	0x03B6689C CMP X11, X1
	0x03B668A0 B.EQ 0x3B668C0
	0x03B668A4 SUBS X9, X9, 0x1
	0x03B668A8 ADD X10, X10, 0x10
	0x03B668AC B.NE 0x3B66898
	0x03B668B0 MOVZ W2, 0x7
	0x03B668B4 MOV X0, X22
	0x03B668B8 BL 0x1C5C788
	0x03B668BC B 0x3B668D0
	0x03B668C0 LDR W9, [X10]
	0x03B668C4 ADD W9, W9, 0x7
	0x03B668C8 ADD X8, X8, W9, 0x4, SXTW
	0x03B668CC ADD X0, X8, 0x138
	0x03B668D0 LDP X8, X2, [X0]
	0x03B668D4 ADRP X26, 0x58D000
	0x03B668D8 LDR X26, [X26 + 0x598]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x87D000
	006 Move W8, [X21+2484]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x5F5000
	014 Move X0, [X0+1920]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2484], W8
	018 Move X0, [X20+512]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0x5F5000
	022 Move X8, [X8+1920]
	023 Move X1, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call HashSet`1<Object>.Add, X0, X1
	030 Return 
	031 Call 0x1C17F20

Method: System.Void OnTriggerExit(UnityEngine.Collider other)

Disassembly:
	0x03B668DC MOV X0, X22
	0x03B668E0 MOV X1, X23
	0x03B668E4 BLR X8
	0x03B668E8 LDR X9, [X22]
	0x03B668EC LDR X8, [X21]
	0x03B668F0 MOV X24, X0
	0x03B668F4 LDRB W11, [X9 + 0x130]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+520]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call TriggerContactMonitor.RemoveCollider, X0, X1
	008 Return 
	009 Call 0x1C17F20

Method: System.Collections.IEnumerator UpdateCollidersAfterOnTriggerStay()

Disassembly:
	0x03B66550 MOV X0, X31
	0x03B66554 LDP X20, X19, [X31 + 0x10]
	0x03B66558 LDR X30, [X31], #0x20
	0x03B6655C RET
	0x03B66560 STP X30, X21, [X31 - 0x20]!
	0x03B66564 STP X20, X19, [X31 + 0x10]
	0x03B66568 ADRP X21, 0x87C000
	0x03B6656C LDRB W8, [X21 + 0x9BC]
	0x03B66570 MOV X20, X1
	0x03B66574 MOV X19, X0
	0x03B66578 TBNZ X8, 0x0, 0x3B66590
	0x03B6657C ADRP X0, 0x5F4000
	0x03B66580 LDR X0, [X0 + 0x6C0]
	0x03B66584 BL 0x1C16CF4
	0x03B66588 MOVZ W8, 0x1
	0x03B6658C STRB W8, [X21 + 0x9BC]
	0x03B66590 MOV X0, X19
	0x03B66594 MOV X1, X20
	0x03B66598 MOV X2, X31
	0x03B6659C BL 0x3B53A7C
	0x03B665A0 CBZ X20, 0x3B66610
	0x03B665A4 MOV X0, X20
	0x03B665A8 BL 0x3B66614
	0x03B665AC CBZ X0, 0x3B665E8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x87D000
	006 Move X21, 0x5F6000
	007 Move W8, [X20+2485]
	008 Move X21, [X21+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5F6000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2485], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move [X20+16], W31
	025 Move [X20+32], X19
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Void ProcessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)

Disassembly:
	0x03B66920 LDR X0, [X26]
	0x03B66924 LDR W8, [X0 + 0xE0]
	0x03B66928 CBNZ W8, 0x3B66930
	0x03B6692C BL 0x1C16DFC
	0x03B66930 ADRP X27, 0x5B5000
	0x03B66934 LDR X27, [X27 + 0x610]
	0x03B66938 MOV X0, X21
	0x03B6693C MOV X1, X31
	0x03B66940 MOV X2, X31
	0x03B66944 BL 0x3C354F8
	0x03B66948 TBZ X0, 0x0, 0x3B66A30
	0x03B6694C CBZ X21, 0x3B66FC8
	0x03B66950 LDRB W8, [X21 + 0x1E0]
	0x03B66954 CBNZ W8, 0x3B66A30
	0x03B66958 MOV X0, X21
	0x03B6695C MOV X1, X31
	0x03B66960 BL 0x3B3A824
	0x03B66964 TBZ X0, 0x0, 0x3B66A30
	0x03B66968 LDR X8, [X22]
	0x03B6696C LDR X1, [X28]
	0x03B66970 LDRH W9, [X8 + 0x12E]
	0x03B66974 CBZ X9, 0x3B66998
	0x03B66978 LDR X10, [X8 + 0xB0]
	0x03B6697C ADD X10, X10, 0x8
	0x03B66980 LDUR X11, [X10 - 0x8]
	0x03B66984 CMP X11, X1
	0x03B66988 B.EQ 0x3B669A8
	0x03B6698C SUBS X9, X9, 0x1
	0x03B66990 ADD X10, X10, 0x10
	0x03B66994 B.NE 0x3B66980
	0x03B66998 MOVZ W2, 0x6
	0x03B6699C MOV X0, X22
	0x03B669A0 BL 0x1C5C788
	0x03B669A4 B 0x3B669B8
	0x03B669A8 LDR W9, [X10]
	0x03B669AC ADD W9, W9, 0x6
	0x03B669B0 ADD X8, X8, W9, 0x4, SXTW
	0x03B669B4 ADD X0, X8, 0x138
	0x03B669B8 LDP X8, X1, [X0]
	0x03B669BC MOV X0, X22
	0x03B669C0 BLR X8
	0x03B669C4 LDR X8, [X26]
	0x03B669C8 MOV X25, X0
	0x03B669CC LDR W9, [X8 + 0xE0]
	0x03B669D0 CBNZ W9, 0x3B669DC
	0x03B669D4 MOV X0, X8
	0x03B669D8 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x87D000
	006 Move W8, [X21+2486]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x5F5000
	014 Move X0, [X0+1928]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2486], W8
	018 Move X0, X19
	019 Move W1, W20
	020 Move X2, X31
	021 Call XRBaseInteractor.ProcessInteractor, X0, X1
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Compare W20, 0
	024 JumpIfNotEqual {62}
	025 Move X0, [X19+512]
	026 Compare X0, 0
	027 JumpIfEqual {67}
	028 Move X8, 0x5F5000
	029 Move X8, [X8+1928]
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X1, [X8]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call HashSet`1<Object>.Clear, X0
	036 Return 
	037 Move W8, [X19+424]
	038 Compare W8, 0
	039 JumpIfEqual {62}
	040 Move X0, X19
	041 Move X1, X31
	042 Call XRBaseInteractor.get_hasHover, X0
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {62}
	047 Move X0, X19
	048 Call XRSocketInteractor.get_isHoverRecycleAllowed, X0
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {62}
	053 Move X8, [X19]
	054 Move X0, X19
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X2, [X8+1912]
	058 Move X1, [X8+1920]
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 CallNoReturn X2
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Return 
	067 Call 0x1C17F20

Method: System.Void CreateDefaultHoverMaterials()

Disassembly:
	0x03B66A30 CBZ X24, 0x3B66FC8
	0x03B66A34 MOV X0, X24
	0x03B66A38 MOV X1, X31
	0x03B66A3C BL 0x3C3F58C
	0x03B66A40 MOV X0, X24
	0x03B66A44 MOV X1, X31
	0x03B66A48 MOV V9.16B, V0.16B
	0x03B66A4C MOV V10.16B, V1.16B
	0x03B66A50 MOV V11.16B, V2.16B
	0x03B66A54 BL 0x3C3DEB4
	0x03B66A58 LDR X0, [X27]
	0x03B66A5C MOV V12.16B, V0.16B
	0x03B66A60 MOV V13.16B, V1.16B
	0x03B66A64 MOV V14.16B, V2.16B
	0x03B66A68 LDR W8, [X0 + 0xE0]
	0x03B66A6C MOV V15.16B, V3.16B
	0x03B66A70 CBNZ W8, 0x3B66A78
	0x03B66A74 BL 0x1C16DFC
	0x03B66A78 ADD X0, X31, 0xB0
	0x03B66A7C MOV V0.16B, V9.16B
	0x03B66A80 MOV V1.16B, V10.16B
	0x03B66A84 MOV V2.16B, V11.16B
	0x03B66A88 MOV V3.16B, V12.16B
	0x03B66A8C MOV V4.16B, V13.16B
	0x03B66A90 MOV V5.16B, V14.16B
	0x03B66A94 MOV V6.16B, V15.16B
	0x03B66A98 MOV X1, X31
	0x03B66A9C BL 0x3C3DB6C
	0x03B66AA0 CBZ X20, 0x3B66FC8
	0x03B66AA4 MOV X0, X20
	0x03B66AA8 MOV X1, X31
	0x03B66AAC BL 0x3C32E90
	0x03B66AB0 CBZ X0, 0x3B66FC8
	0x03B66AB4 ADRP X24, 0x5F4000
	0x03B66AB8 LDR X24, [X24 + 0x7C8]
	0x03B66ABC MOV X1, X31
	0x03B66AC0 BL 0x3C3F58C
	0x03B66AC4 LDR V4, [X31 + 0xB]
	0x03B66AC8 LDUR V5, [X31 + 0xBC]
	0x03B66ACC LDR X0, [X24]
	0x03B66AD0 LDP S3, S6, [X31 + 0xB0]
	0x03B66AD4 LDR V7, [X31 + 0xB8]
	0x03B66AD8 STR V4, [X31 + 0x3]
	0x03B66ADC STUR V5, [X31 + 0x3C]
	0x03B66AE0 LDR W8, [X0 + 0xE0]
	0x03B66AE4 FSUB S10, S0, S3
	0x03B66AE8 FSUB S9, S1, S6
	0x03B66AEC FSUB S8, S2, S7
	0x03B66AF0 CBNZ W8, 0x3B66AF8
	0x03B66AF4 BL 0x1C16DFC
	0x03B66AF8 LDR V0, [X31 + 0x3]
	0x03B66AFC LDUR V1, [X31 + 0x3C]
	0x03B66B00 ADD X0, X31, 0x70
	0x03B66B04 MOV V2.16B, V8.16B
	0x03B66B08 STR V0, [X31 + 0x7]
	0x03B66B0C STUR V1, [X31 + 0x7C]
	0x03B66B10 MOV V0.16B, V10.16B
	0x03B66B14 MOV V1.16B, V9.16B
	0x03B66B18 BL 0x3B66FCC
	0x03B66B1C MOV X0, X20
	0x03B66B20 MOV X1, X31
	0x03B66B24 MOV V8.16B, V0.16B
	0x03B66B28 MOV V9.16B, V1.16B
	0x03B66B2C MOV V10.16B, V2.16B
	0x03B66B30 BL 0x3C32E90
	0x03B66B34 CBZ X0, 0x3B66FC8
	0x03B66B38 MOV X1, X31
	0x03B66B3C STP S10, S9, [X31 + 0x20]
	0x03B66B40 STR S8, [X31 + 0x28]
	0x03B66B44 BL 0x3C3DEB4
	0x03B66B48 MOV X0, X31
	0x03B66B4C BL 0x3C2A260
	0x03B66B50 LDP S4, S7, [X31 + 0xBC]
	0x03B66B54 LDP S6, S5, [X31 + 0xC4]
	0x03B66B58 MOV X0, X31
	0x03B66B5C FMUL S16, S3, S4
	0x03B66B60 FMUL S17, S0, S5
	0x03B66B64 FMUL S18, S1, S6
	0x03B66B68 FMUL S19, S2, S7
	0x03B66B6C FMUL S20, S3, S7
	0x03B66B70 FMUL S21, S1, S5
	0x03B66B74 FMUL S22, S2, S4
	0x03B66B78 FMUL S23, S0, S6
	0x03B66B7C FMUL S24, S0, S7
	0x03B66B80 FMUL S0, S0, S4
	0x03B66B84 FMUL S4, S1, S4
	0x03B66B88 FMUL S1, S1, S7
	0x03B66B8C FMUL S7, S3, S6
	0x03B66B90 FMUL S3, S3, S5
	0x03B66B94 FMUL S5, S2, S5
	0x03B66B98 FMUL S6, S2, S6
	0x03B66B9C FADD S2, S16, S17
	0x03B66BA0 FADD S16, S20, S21
	0x03B66BA4 FADD S5, S7, S5
	0x03B66BA8 FSUB S0, S3, S0
	0x03B66BAC FADD S2, S18, S2
	0x03B66BB0 FADD S3, S22, S16
	0x03B66BB4 FADD S5, S24, S5
	0x03B66BB8 FSUB S7, S0, S1
	0x03B66BBC FSUB S0, S2, S19
	0x03B66BC0 FSUB S1, S3, S23
	0x03B66BC4 FSUB S2, S5, S4
	0x03B66BC8 FSUB S3, S7, S6
	0x03B66BCC BL 0x3C2A260
	0x03B66BD0 LDR X8, [X23]
	0x03B66BD4 MOV X0, X23
	0x03B66BD8 MOV X1, X22
	0x03B66BDC STP S0, S1, [X31 + 0x14]
	0x03B66BE0 LDR X9, [X8 + 0x4B8]
	0x03B66BE4 LDR X2, [X8 + 0x4C0]
	0x03B66BE8 STR S2, [X31 + 0x1C]
	0x03B66BEC MOV V15.16B, V3.16B
	0x03B66BF0 BLR X9
	0x03B66BF4 CBZ X0, 0x3B66FC8
	0x03B66BF8 MOV X1, X31
	0x03B66BFC MOV X22, X0
	0x03B66C00 BL 0x3C3F58C
	0x03B66C04 MOV X0, X22
	0x03B66C08 MOV X1, X31
	0x03B66C0C MOV V8.16B, V0.16B
	0x03B66C10 MOV V9.16B, V1.16B
	0x03B66C14 MOV V10.16B, V2.16B
	0x03B66C18 BL 0x3C3DEB4
	0x03B66C1C LDR X0, [X27]
	0x03B66C20 MOV V11.16B, V0.16B
	0x03B66C24 MOV V12.16B, V1.16B
	0x03B66C28 MOV V13.16B, V2.16B
	0x03B66C2C LDR W8, [X0 + 0xE0]
	0x03B66C30 MOV V14.16B, V3.16B
	0x03B66C34 CBNZ W8, 0x3B66C3C
	0x03B66C38 BL 0x1C16DFC
	0x03B66C3C ADD X0, X31, 0x90
	0x03B66C40 MOV V0.16B, V8.16B
	0x03B66C44 MOV V1.16B, V9.16B
	0x03B66C48 MOV V2.16B, V10.16B
	0x03B66C4C MOV V3.16B, V11.16B
	0x03B66C50 MOV V4.16B, V12.16B
	0x03B66C54 MOV V5.16B, V13.16B
	0x03B66C58 MOV V6.16B, V14.16B
	0x03B66C5C MOV X1, X31
	0x03B66C60 BL 0x3C3DB6C
	0x03B66C64 LDR X0, [X26]
	0x03B66C68 LDR W8, [X0 + 0xE0]
	0x03B66C6C CBNZ W8, 0x3B66C74
	0x03B66C70 BL 0x1C16DFC
	0x03B66C74 LDP S1, S0, [X31 + 0x28]
	0x03B66C78 MOV X0, X21
	0x03B66C7C MOV X1, X31
	0x03B66C80 MOV X2, X31
	0x03B66C84 FMUL S8, S1, S0
	0x03B66C88 LDR V1, [X31 + 0x24]
	0x03B66C8C FMUL S10, S1, S0
	0x03B66C90 LDR V1, [X31 + 0x20]
	0x03B66C94 FMUL S9, S1, S0
	0x03B66C98 BL 0x3C3883C
	0x03B66C9C TBNZ X0, 0x0, 0x3B66CAC
	0x03B66CA0 CBZ X21, 0x3B66FC8
	0x03B66CA4 LDRB W8, [X21 + 0x20C]
	0x03B66CA8 CBZ W8, 0x3B66E48
	0x03B66CAC LDP S0, S1, [X31 + 0x9C]
	0x03B66CB0 LDP S2, S3, [X31 + 0xA4]
	0x03B66CB4 MOV V4.16B, V8.16B
	0x03B66CB8 MOV V5.16B, V10.16B
	0x03B66CBC MOV V6.16B, V9.16B
	0x03B66CC0 MOV X0, X31
	0x03B66CC4 BL 0x3C2A9FC
	0x03B66CC8 LDP S3, S4, [X31 + 0x90]
	0x03B66CCC LDP S5, S6, [X31 + 0x98]
	0x03B66CD0 LDP S7, S16, [X31 + 0xA0]
	0x03B66CD4 LDR V17, [X31 + 0xA8]
	0x03B66CD8 LDP S21, S22, [X31 + 0x14]
	0x03B66CDC LDR V24, [X31 + 0x1C]
	0x03B66CE0 FADD S9, S0, S3
	0x03B66CE4 FADD S10, S1, S4
	0x03B66CE8 FADD S11, S2, S5
	0x03B66CEC FMUL S0, S21, S17
	0x03B66CF0 FMUL S1, S15, S6
	0x03B66CF4 FMUL S2, S24, S7
	0x03B66CF8 FMUL S3, S22, S16
	0x03B66CFC FMUL S4, S22, S17
	0x03B66D00 FMUL S5, S15, S7

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x87D000
	008 Move X22, 0x58E000
	009 Move W8, [X20+2487]
	010 Move X22, [X22+1432]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {42}
	016 Move X0, 0x58E000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x592000
	020 Move X0, [X0+3232]
	021 Call 0x1C17CF4
	022 Move X0, 0x58E000
	023 Move X0, [X0+1432]
	024 Call 0x1C17CF4
	025 Move X0, 0x5F5000
	026 Move X0, [X0+1992]
	027 Call 0x1C17CF4
	028 Move X0, 0x5F6000
	029 Move X0, [X0+896]
	030 Call 0x1C17CF4
	031 Move X0, 0x5F6000
	032 Move X0, [X0+904]
	033 Call 0x1C17CF4
	034 Move X0, 0x5F6000
	035 Move X0, [X0+912]
	036 Call 0x1C17CF4
	037 Move X0, 0x5F1000
	038 Move X0, [X0+3736]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+2487], W8
	042 Move X0, [X22]
	043 Move X20, [X19+432]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X20
	049 Move X1, X31
	050 Move X2, X31
	051 Call Object.op_Inequality, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {70}
	056 Move X0, [X22]
	057 Move X20, [X19+440]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X31
	064 Move X2, X31
	065 Call Object.op_Inequality, X0, X1
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {214}
	070 Move X21, 0x5F1000
	071 Move X23, 0x5F6000
	072 Move X21, [X21+3736]
	073 Move X23, [X23+904]
	074 Move X0, X31
	075 Call GraphicsSettings.get_currentRenderPipeline
	076 Move X8, [X22]
	077 Move X20, X0
	078 Move W9, [X8+224]
	079 Compare W9, 0
	080 JumpIfNotEqual {83}
	081 Move X0, X8
	082 Call 0x1C17DFC
	083 Move X0, X20
	084 Move X1, X31
	085 Call Object.op_Implicit, X0
	086 And W31, W0, 1
	087 NotImplemented "Instruction CSEL not yet implemented."
	088 Move X21, [X8]
	089 Move X1, X31
	090 Move X0, X21
	091 Call Shader.Find, X0
	092 Move X8, [X22]
	093 Move X20, X0
	094 Move W9, [X8+224]
	095 Compare W9, 0
	096 JumpIfNotEqual {99}
	097 Move X0, X8
	098 Call 0x1C17DFC
	099 Move X0, X20
	100 Move X1, X31
	101 Move X2, X31
	102 Call Object.op_Equality, X0, X1
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {136}
	107 Move X8, 0x5F6000
	108 Move X9, 0x5F6000
	109 Move X8, [X8+896]
	110 Move X9, [X9+912]
	111 Move X1, X21
	112 Move X3, X31
	113 Move X0, [X8]
	114 Move X2, [X9]
	115 Call String.Concat, X0, X1, X2
	116 Move X8, 0x58E000
	117 Move X8, [X8+2600]
	118 Move X20, X0
	119 Move X8, [X8]
	120 Move W9, [X8+224]
	121 Compare W9, 0
	122 JumpIfNotEqual {125}
	123 Move X0, X8
	124 Call 0x1C17DFC
	125 Move X0, X20
	126 Move X1, X19
	127 Move X20, [X31+32]
	128 Move X19, [X31+40]
	129 Move X22, [X31+16]
	130 Move X21, [X31+24]
	131 Move X2, X31
	132 Move X30, [X31+48]
	133 Move X23, [X31+56]
	134 Call Debug.LogWarning, X0, X1
	135 Return 
	136 Move X0, [X22]
	137 Move X21, [X19+432]
	138 Move W8, [X0+224]
	139 Compare W8, 0
	140 JumpIfNotEqual {142}
	141 Call 0x1C17DFC
	142 Move X0, X21
	143 Move X1, X31
	144 Move X2, X31
	145 Call Object.op_Equality, X0, X1
	146 Move X23, -50835456
	147 Move TEMP, X0
	148 And TEMP, TEMP, 1
	149 Compare TEMP, 1
	150 JumpIfNotEqual {173}
	151 Move X8, 0x592000
	152 Move X8, [X8+3232]
	153 Move X0, [X8]
	154 Call 0x1C17F10
	155 Move X1, X20
	156 Move X2, X31
	157 Move X21, X0
	158 Call Material..ctor, X0, X1
	159 Move [X19+432], X21
	160 Move X8, 0x5F5000
	161 Move X8, [X8+1992]
	162 Move X0, [X8]
	163 Move W8, [X0+224]
	164 Compare W8, 0
	165 JumpIfNotEqual {167}
	166 Call 0x1C17DFC
	167 Move V3, [X23+144]
	168 Move S0, W31
	169 Move S1, W31
	170 Move S2, 1
	171 Move X0, X21
	172 Call XRSocketInteractor.SetMaterialFade, X0, X1
	173 Move X0, [X22]
	174 Move X21, [X19+440]
	175 Move W8, [X0+224]
	176 Compare W8, 0
	177 JumpIfNotEqual {179}
	178 Call 0x1C17DFC
	179 Move X0, X21
	180 Move X1, X31
	181 Move X2, X31
	182 Call Object.op_Equality, X0, X1
	183 Move TEMP, X0
	184 And TEMP, TEMP, 1
	185 Compare TEMP, 1
	186 JumpIfNotEqual {214}
	187 Move X8, 0x592000
	188 Move X8, [X8+3232]
	189 Move X0, [X8]
	190 Call 0x1C17F10
	191 Move X1, X20
	192 Move X2, X31
	193 Move X21, X0
	194 Call Material..ctor, X0, X1
	195 Move [X19+440], X21
	196 Move X8, 0x5F5000
	197 Move X8, [X8+1992]
	198 Move X0, [X8]
	199 Move W8, [X0+224]
	200 Compare W8, 0
	201 JumpIfNotEqual {203}
	202 Call 0x1C17DFC
	203 Move V3, [X23+144]
	204 Move X0, X21
	205 Move X20, [X31+32]
	206 Move X19, [X31+40]
	207 Move X22, [X31+16]
	208 Move X21, [X31+24]
	209 Move S0, 1
	210 Move S1, W31
	211 Move S2, W31
	212 Move X30, [X31+48]
	213 Move X23, [X31+56]
	214 Move X20, [X31+32]
	215 Move X19, [X31+40]
	216 Move X22, [X31+16]
	217 Move X21, [X31+24]
	218 Move X30, [X31+48]
	219 Move X23, [X31+56]
	220 Return 

Method: System.Void SetMaterialFade(UnityEngine.Material material, UnityEngine.Color color)

Disassembly:
	0x03B66D04 FMUL S18, S21, S16
	0x03B66D08 FMUL S19, S24, S6
	0x03B66D0C FMUL S20, S22, S6
	0x03B66D10 FMUL S6, S21, S6
	0x03B66D14 FMUL S21, S21, S7
	0x03B66D18 FMUL S7, S22, S7
	0x03B66D1C FMUL S22, S24, S17
	0x03B66D20 FMUL S17, S15, S17
	0x03B66D24 FMUL S23, S15, S16
	0x03B66D28 FADD S0, S1, S0
	0x03B66D2C FADD S1, S5, S4
	0x03B66D30 FADD S4, S23, S22
	0x03B66D34 FSUB S5, S17, S6
	0x03B66D38 FMUL S16, S24, S16
	0x03B66D3C FADD S0, S2, S0
	0x03B66D40 FADD S1, S18, S1
	0x03B66D44 FADD S2, S20, S4
	0x03B66D48 FSUB S4, S5, S7
	0x03B66D4C FSUB S12, S0, S3
	0x03B66D50 FSUB S13, S1, S19
	0x03B66D54 FSUB S14, S2, S21
	0x03B66D58 FSUB S15, S4, S16
	0x03B66D5C LDR X0, [X26]
	0x03B66D60 LDR W8, [X0 + 0xE0]
	0x03B66D64 CBNZ W8, 0x3B66D6C
	0x03B66D68 BL 0x1C16DFC
	0x03B66D6C MOV X0, X21
	0x03B66D70 MOV X1, X31
	0x03B66D74 MOV X2, X31
	0x03B66D78 BL 0x3C354F8
	0x03B66D7C TBZ X0, 0x0, 0x3B66DB0
	0x03B66D80 CBZ X21, 0x3B66FC8
	0x03B66D84 LDRB W8, [X21 + 0x200]
	0x03B66D88 CBNZ W8, 0x3B66DB0
	0x03B66D8C MOV X0, X20
	0x03B66D90 MOV X1, X31
	0x03B66D94 BL 0x3C32E90
	0x03B66D98 CBZ X0, 0x3B66FC8
	0x03B66D9C MOV X1, X31
	0x03B66DA0 BL 0x3C3F58C
	0x03B66DA4 MOV V9.16B, V0.16B
	0x03B66DA8 MOV V10.16B, V1.16B
	0x03B66DAC MOV V11.16B, V2.16B
	0x03B66DB0 MOV X0, X20
	0x03B66DB4 MOV X1, X31
	0x03B66DB8 BL 0x3C32E90
	0x03B66DBC CBZ X0, 0x3B66FC8
	0x03B66DC0 MOV X1, X31
	0x03B66DC4 BL 0x3C40EA8
	0x03B66DC8 LDR V3, [X31 + 0x2C]
	0x03B66DCC ADD X8, X31, 0x30
	0x03B66DD0 MOV V4.16B, V13.16B
	0x03B66DD4 MOV V5.16B, V14.16B
	0x03B66DD8 FMUL S0, S0, S3
	0x03B66DDC FMUL S1, S1, S3
	0x03B66DE0 FMUL S2, S2, S3
	0x03B66DE4 STP S1, S2, [X31 + 0x4]
	0x03B66DE8 STR S0, [X31]
	0x03B66DEC MOV V0.16B, V9.16B
	0x03B66DF0 MOV V1.16B, V10.16B
	0x03B66DF4 MOV V2.16B, V11.16B
	0x03B66DF8 MOV V3.16B, V12.16B
	0x03B66DFC MOV V6.16B, V15.16B
	0x03B66E00 MOV X0, X31
	0x03B66E04 BL 0x3C26FA8
	0x03B66E08 LDP V1, V0, [X31 + 0x50]
	0x03B66E0C LDP V3, V2, [X31 + 0x30]
	0x03B66E10 LDP X22, X21, [X31 + 0x150]
	0x03B66E14 LDP X24, X23, [X31 + 0x140]
	0x03B66E18 STP V1, V0, [X19 + 0x20]
	0x03B66E1C STP V3, V2, [X19]
	0x03B66E20 LDP X20, X19, [X31 + 0x160]
	0x03B66E24 LDP X26, X25, [X31 + 0x130]
	0x03B66E28 LDP X28, X27, [X31 + 0x120]
	0x03B66E2C LDP X29, X30, [X31 + 0x110]
	0x03B66E30 LDP D9, D8, [X31 + 0x100]
	0x03B66E34 LDP D11, D10, [X31 + 0xF0]
	0x03B66E38 LDP D13, D12, [X31 + 0xE0]
	0x03B66E3C LDP D15, D14, [X31 + 0xD0]
	0x03B66E40 ADD X31, X31, 0x170
	0x03B66E44 RET
	0x03B66E48 LDP S0, S1, [X31 + 0xBC]
	0x03B66E4C LDP S2, S3, [X31 + 0xC4]
	0x03B66E50 MOV V4.16B, V8.16B
	0x03B66E54 MOV V5.16B, V10.16B
	0x03B66E58 MOV V6.16B, V9.16B
	0x03B66E5C MOV X0, X31
	0x03B66E60 BL 0x3C2A9FC
	0x03B66E64 LDP S9, S12, [X31 + 0x90]
	0x03B66E68 LDR V13, [X31 + 0x98]
	0x03B66E6C MOV X0, X20
	0x03B66E70 MOV X1, X31
	0x03B66E74 MOV V8.16B, V0.16B
	0x03B66E78 MOV V10.16B, V1.16B
	0x03B66E7C MOV V11.16B, V2.16B
	0x03B66E80 BL 0x3C32E90
	0x03B66E84 CBZ X0, 0x3B66FC8
	0x03B66E88 MOV X1, X31
	0x03B66E8C FADD S9, S8, S9
	0x03B66E90 FADD S10, S10, S12
	0x03B66E94 FADD S11, S11, S13
	0x03B66E98 BL 0x3C3DEB4
	0x03B66E9C MOV V12.16B, V0.16B
	0x03B66EA0 MOV V13.16B, V1.16B
	0x03B66EA4 MOV V14.16B, V2.16B
	0x03B66EA8 MOV V15.16B, V3.16B
	0x03B66EAC B 0x3B66D5C
	0x03B66EB0 LDR W9, [X10]
	0x03B66EB4 ADD W9, W9, 0x6
	0x03B66EB8 ADD X8, X8, W9, 0x4, SXTW
	0x03B66EBC ADD X0, X8, 0x138
	0x03B66EC0 LDP X8, X1, [X0]
	0x03B66EC4 MOV X0, X22
	0x03B66EC8 BLR X8
	0x03B66ECC CBZ X24, 0x3B66FC8
	0x03B66ED0 MOV X1, X0
	0x03B66ED4 MOV X0, X24
	0x03B66ED8 MOV X2, X31
	0x03B66EDC BL 0x3C40F48
	0x03B66EE0 TBZ X0, 0x0, 0x3B66A34
	0x03B66EE4 LDR X1, [X21 + 0x100]
	0x03B66EE8 ADD X8, X31, 0x30
	0x03B66EEC MOV X0, X21
	0x03B66EF0 MOV X2, X31
	0x03B66EF4 BL 0x3B3AEE0
	0x03B66EF8 LDP S11, S9, [X31 + 0x30]
	0x03B66EFC LDP S10, S12, [X31 + 0x38]
	0x03B66F00 LDP S15, S8, [X31 + 0x40]
	0x03B66F04 LDR V13, [X31 + 0x48]
	0x03B66F08 MOV X0, X24
	0x03B66F0C MOV X1, X31
	0x03B66F10 BL 0x3C3F49C
	0x03B66F14 CBZ X0, 0x3B66FC8
	0x03B66F18 MOV V0.16B, V11.16B
	0x03B66F1C MOV V1.16B, V9.16B
	0x03B66F20 MOV V2.16B, V10.16B
	0x03B66F24 MOV X1, X31
	0x03B66F28 MOV X24, X0
	0x03B66F2C BL 0x3C3DE4C
	0x03B66F30 MOV X0, X24
	0x03B66F34 MOV X1, X31
	0x03B66F38 MOV V9.16B, V0.16B
	0x03B66F3C MOV V10.16B, V1.16B
	0x03B66F40 MOV V11.16B, V2.16B
	0x03B66F44 BL 0x3C3DEB4
	0x03B66F48 FMUL S4, S12, S3
	0x03B66F4C FMUL S5, S13, S0
	0x03B66F50 LDR X0, [X27]
	0x03B66F54 FMUL S6, S8, S1
	0x03B66F58 FMUL S7, S15, S3
	0x03B66F5C FADD S4, S4, S5
	0x03B66F60 FMUL S5, S13, S1
	0x03B66F64 FADD S5, S7, S5
	0x03B66F68 FMUL S7, S8, S3
	0x03B66F6C FMUL S16, S13, S2

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x87D000
	013 Move W8, [X20+2488]
	014 Move V8, V3
	015 Move V9, V2
	016 Move V10, V1
	017 Move V11, V0
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {46}
	023 Move X0, 0x58E000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move X0, 0x5F6000
	027 Move X0, [X0+920]
	028 Call 0x1C17CF4
	029 Move X0, 0x5F6000
	030 Move X0, [X0+928]
	031 Call 0x1C17CF4
	032 Move X0, 0x5F6000
	033 Move X0, [X0+936]
	034 Call 0x1C17CF4
	035 Move X0, 0x5F6000
	036 Move X0, [X0+944]
	037 Call 0x1C17CF4
	038 Move X0, 0x592000
	039 Move X0, [X0+696]
	040 Call 0x1C17CF4
	041 Move X0, 0x5F6000
	042 Move X0, [X0+952]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X20+2488], W8
	046 Compare X19, 0
	047 JumpIfEqual {177}
	048 Move X8, 0x592000
	049 Move X9, 0x5F6000
	050 Move X8, [X8+696]
	051 Move X9, [X9+952]
	052 Move X20, 0x58E000
	053 Move X0, X19
	054 Move X1, [X8]
	055 Move X2, [X9]
	056 Move X20, [X20+1432]
	057 Move X3, X31
	058 Call Material.SetOverrideTag, X0, X1, X2
	059 Move X0, X31
	060 Call GraphicsSettings.get_currentRenderPipeline
	061 Move X8, [X20]
	062 Move X20, X0
	063 Move W9, [X8+224]
	064 Compare W9, 0
	065 JumpIfNotEqual {68}
	066 Move X0, X8
	067 Call 0x1C17DFC
	068 Move X21, 0x5F6000
	069 Move X21, [X21+920]
	070 Move X0, X20
	071 Move X1, X31
	072 Move X2, X31
	073 Call Object.op_Inequality, X0, X1
	074 Move W20, W0
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfNotEqual {91}
	079 Move X0, [X21]
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {85}
	083 Call 0x1C17DFC
	084 Move X0, [X21]
	085 Move X8, [X0+184]
	086 Move S0, 1
	087 Move X0, X19
	088 Move X2, X31
	089 Move W1, [X8]
	090 Call Material.SetFloat, X0, X1, V0
	091 Move X0, [X21]
	092 Move X24, 0x5F6000
	093 Move X23, 0x5F6000
	094 Move X22, 0x5F6000
	095 Move W8, [X0+224]
	096 Move X24, [X24+944]
	097 Move X23, [X23+928]
	098 Move X22, [X22+936]
	099 Compare W8, 0
	100 JumpIfNotEqual {103}
	101 Call 0x1C17DFC
	102 Move X0, [X21]
	103 Move X8, [X0+184]
	104 Move S0, 2
	105 Move X0, X19
	106 Move X2, X31
	107 Move W1, [X8+4]
	108 Call Material.SetFloat, X0, X1, V0
	109 Move X8, [X21]
	110 Move W2, 5
	111 Move X0, X19
	112 Move X3, X31
	113 Move X8, [X8+184]
	114 Move W1, [X8+8]
	115 Call Material.SetInt, X0, X1, X2
	116 Move X8, [X21]
	117 Move W2, 10
	118 Move X0, X19
	119 Move X3, X31
	120 Move X8, [X8+184]
	121 Move W1, [X8+12]
	122 Call Material.SetInt, X0, X1, X2
	123 Move X8, [X21]
	124 Move X0, X19
	125 Move W2, W31
	126 Move X3, X31
	127 Move X8, [X8+184]
	128 Move W1, [X8+16]
	129 Call Material.SetInt, X0, X1, X2
	130 Move X1, [X24]
	131 Move X0, X19
	132 Move X2, X31
	133 Call Material.DisableKeyword, X0, X1
	134 Move X1, [X23]
	135 Move X0, X19
	136 Move X2, X31
	137 Call Material.EnableKeyword, X0, X1
	138 Move X1, [X22]
	139 Move X0, X19
	140 Move X2, X31
	141 Call Material.DisableKeyword, X0, X1
	142 Move W1, 3000
	143 Move X0, X19
	144 Move X2, X31
	145 Call Material.set_renderQueue, X0, X1
	146 Move X0, [X21]
	147 Move W8, [X0+224]
	148 Compare W8, 0
	149 JumpIfNotEqual {152}
	150 Call 0x1C17DFC
	151 Move X0, [X21]
	152 Move X8, [X0+184]
	153 And W31, W20, 1
	154 Move W9, 24
	155 Move W10, 20
	156 NotImplemented "Instruction CSEL not yet implemented."
	157 Move W1, [X8]
	158 Move X0, X19
	159 Move V2, V9
	160 Move V3, V8
	161 Move X20, [X31+80]
	162 Move X19, [X31+88]
	163 Move X22, [X31+64]
	164 Move X21, [X31+72]
	165 Move X24, [X31+48]
	166 Move X23, [X31+56]
	167 Move X30, [X31+32]
	168 Move D9, [X31+16]
	169 Move D8, [X31+24]
	170 Move V0, V11
	171 Move V1, V10
	172 Move X2, X31
	173 Move D11, [X31+96]
	174 Move D10, [X31+104]
	175 Call Material.SetColor, X0, X1, X2
	176 Return 
	177 Call 0x1C17F20

Method: System.Void OnHoverEntering(UnityEngine.XR.Interaction.Toolkit.HoverEnterEventArgs args)

Disassembly:
	0x03B66F70 FADD S4, S6, S4
	0x03B66F74 FMUL S6, S12, S2
	0x03B66F78 FADD S7, S7, S16
	0x03B66F7C FADD S5, S6, S5
	0x03B66F80 FMUL S6, S15, S0
	0x03B66F84 FMUL S3, S13, S3
	0x03B66F88 FADD S6, S6, S7
	0x03B66F8C FMUL S7, S8, S0
	0x03B66F90 FMUL S0, S12, S0
	0x03B66F94 LDR W8, [X0 + 0xE0]
	0x03B66F98 FMUL S17, S12, S1
	0x03B66F9C FSUB S0, S3, S0
	0x03B66FA0 FMUL S1, S15, S1
	0x03B66FA4 FMUL S16, S15, S2
	0x03B66FA8 FSUB S0, S0, S1
	0x03B66FAC FMUL S1, S8, S2
	0x03B66FB0 FSUB S12, S4, S16
	0x03B66FB4 FSUB S13, S5, S7
	0x03B66FB8 FSUB S14, S6, S17
	0x03B66FBC FSUB S15, S0, S1
	0x03B66FC0 CBNZ W8, 0x3B66A78
	0x03B66FC4 B 0x3B66A74
	0x03B66FC8 BL 0x1C16F20
	0x03B66FCC STR D10, [X31 - 0x20]!
	0x03B66FD0 STP D9, D8, [X31 + 0x8]
	0x03B66FD4 STR X30, [X31 + 0x18]
	0x03B66FD8 MOV V9.16B, V1.16B
	0x03B66FDC LDP S4, S1, [X0 + 0xC]
	0x03B66FE0 MOV V8.16B, V2.16B
	0x03B66FE4 LDP S2, S3, [X0 + 0x14]
	0x03B66FE8 MOV V10.16B, V0.16B
	0x03B66FEC MOV V0.16B, V4.16B
	0x03B66FF0 MOV X0, X31
	0x03B66FF4 BL 0x3C2A260
	0x03B66FF8 MOV V5.16B, V9.16B
	0x03B66FFC MOV V6.16B, V8.16B
	0x03B67000 LDR X30, [X31 + 0x18]
	0x03B67004 LDP D9, D8, [X31 + 0x8]
	0x03B67008 MOV V4.16B, V10.16B
	0x03B6700C MOV X0, X31
	0x03B67010 LDR V10, [X31], #0x20
	0x03B67014 B 0x3C2A9FC
	0x03B67018 SUB X31, X31, 0x160
	0x03B6701C STP X29, X30, [X31 + 0x100]
	0x03B67020 STP X28, X27, [X31 + 0x110]
	0x03B67024 STP X26, X25, [X31 + 0x120]
	0x03B67028 STP X24, X23, [X31 + 0x130]
	0x03B6702C STP X22, X21, [X31 + 0x140]
	0x03B67030 STP X20, X19, [X31 + 0x150]
	0x03B67034 ADRP X20, 0x87B000
	0x03B67038 LDRB W8, [X20 + 0x9BF]
	0x03B6703C MOV X19, X0
	0x03B67040 TBNZ X8, 0x0, 0x3B670A0
	0x03B67044 ADRP X0, 0x5F4000
	0x03B67048 LDR X0, [X0 + 0x400]
	0x03B6704C BL 0x1C16CF4
	0x03B67050 ADRP X0, 0x5F3000
	0x03B67054 LDR X0, [X0 + 0x9C0]
	0x03B67058 BL 0x1C16CF4
	0x03B6705C ADRP X0, 0x5F3000
	0x03B67060 LDR X0, [X0 + 0x9C8]
	0x03B67064 BL 0x1C16CF4
	0x03B67068 ADRP X0, 0x5F3000
	0x03B6706C LDR X0, [X0 + 0x9D0]
	0x03B67070 BL 0x1C16CF4
	0x03B67074 ADRP X0, 0x590000
	0x03B67078 LDR X0, [X0 + 0x2C8]
	0x03B6707C BL 0x1C16CF4
	0x03B67080 ADRP X0, 0x5F3000
	0x03B67084 LDR X0, [X0 + 0x9D8]
	0x03B67088 BL 0x1C16CF4
	0x03B6708C ADRP X0, 0x58C000
	0x03B67090 LDR X0, [X0 + 0x598]
	0x03B67094 BL 0x1C16CF4
	0x03B67098 MOVZ W8, 0x1
	0x03B6709C STRB W8, [X20 + 0x9BF]
	0x03B670A0 STP X31, X31, [X31 + 0xE0]
	0x03B670A4 STR X31, [X31 + 0xF0]
	0x03B670A8 STR X31, [X31 + 0xD8]
	0x03B670AC LDRB W8, [X19 + 0x1A8]
	0x03B670B0 CBZ W8, 0x3B6732C
	0x03B670B4 LDR V0, [X19 + 0x1C4]
	0x03B670B8 FCMP S0, 0x0
	0x03B670BC B.LS 0x3B6732C
	0x03B670C0 MOV X0, X31
	0x03B670C4 BL 0x3C047F8
	0x03B670C8 ADRP X8, 0x58C000
	0x03B670CC LDR X8, [X8 + 0x598]
	0x03B670D0 MOV X20, X0
	0x03B670D4 LDR X8, [X8]
	0x03B670D8 LDR W9, [X8 + 0xE0]
	0x03B670DC CBNZ W9, 0x3B670E8
	0x03B670E0 MOV X0, X8
	0x03B670E4 BL 0x1C16DFC
	0x03B670E8 MOV X0, X20
	0x03B670EC MOV X1, X31
	0x03B670F0 MOV X2, X31
	0x03B670F4 BL 0x3C3883C
	0x03B670F8 TBNZ X0, 0x0, 0x3B6732C
	0x03B670FC MOV X0, X19
	0x03B67100 MOV X1, X31
	0x03B67104 BL 0x3B4B178
	0x03B67108 CBZ X0, 0x3B67364
	0x03B6710C ADRP X8, 0x5F3000
	0x03B67110 LDR X8, [X8 + 0x9D8]
	0x03B67114 LDR X1, [X8]
	0x03B67118 ADD X8, X31, 0x50
	0x03B6711C BL 0x301CB58
	0x03B67120 LDR V0, [X31 + 0x5]
	0x03B67124 LDR X8, [X31 + 0x60]
	0x03B67128 ADRP X27, 0x5F3000
	0x03B6712C LDR X27, [X27 + 0x9C8]
	0x03B67130 STR V0, [X31 + 0xE]
	0x03B67134 STR X8, [X31 + 0xF0]
	0x03B67138 ADRP X29, 0x590000
	0x03B6713C LDR X29, [X29 + 0x2C8]
	0x03B67140 LDR X1, [X27]
	0x03B67144 ADD X0, X31, 0xE0
	0x03B67148 BL 0x2BC4350
	0x03B6714C TBZ X0, 0x0, 0x3B67318
	0x03B67150 LDR X21, [X31 + 0xF0]
	0x03B67154 CBZ X21, 0x3B67140
	0x03B67158 MOV X0, X19
	0x03B6715C MOV X1, X21
	0x03B67160 MOV X2, X31
	0x03B67164 BL 0x3B5103C
	0x03B67168 TBNZ X0, 0x0, 0x3B67140
	0x03B6716C LDR X0, [X19 + 0x210]
	0x03B67170 CBZ X0, 0x3B6735C
	0x03B67174 ADRP X8, 0x5F4000
	0x03B67178 LDR X8, [X8 + 0x400]
	0x03B6717C LDR X3, [X8]
	0x03B67180 ADD X2, X31, 0xD8
	0x03B67184 MOV X1, X21
	0x03B67188 BL 0x2AA6B2C
	0x03B6718C LDR X8, [X31 + 0xD8]
	0x03B67190 CBZ X8, 0x3B67140
	0x03B67194 EOR W9, W0, 0x1
	0x03B67198 TBNZ X9, 0x0, 0x3B67140
	0x03B6719C LDR X8, [X8 + 0x18]
	0x03B671A0 CBZ X8, 0x3B67140
	0x03B671A4 LDR X8, [X19]
	0x03B671A8 LDR X9, [X8 + 0x788]
	0x03B671AC LDR X2, [X8 + 0x790]
	0x03B671B0 MOV X0, X19
	0x03B671B4 MOV X1, X21
	0x03B671B8 BLR X9
	0x03B671BC ADRP X8, 0x58C000
	0x03B671C0 LDR X8, [X8 + 0x598]
	0x03B671C4 MOV X22, X0
	0x03B671C8 LDR X0, [X8]
	0x03B671CC LDR W8, [X0 + 0xE0]
	0x03B671D0 CBNZ W8, 0x3B671D8
	0x03B671D4 BL 0x1C16DFC
	0x03B671D8 MOV X0, X22
	0x03B671DC MOV X1, X31
	0x03B671E0 MOV X2, X31
	0x03B671E4 BL 0x3C3883C
	0x03B671E8 TBNZ X0, 0x0, 0x3B67140
	0x03B671EC LDR X26, [X31 + 0xD8]
	0x03B671F0 CBZ X26, 0x3B67360
	0x03B671F4 LDR X8, [X26 + 0x18]
	0x03B671F8 CMP W8, 0x1
	0x03B671FC B.LT 0x3B67140
	0x03B67200 MOV X28, X31
	0x03B67204 AND X8, X8, 0x0
	0x03B67208 CMP X28, W8, UXTW
	0x03B6720C B.CS 0x3B67350
	0x03B67210 LDR X8, [X19]
	0x03B67214 ADD X9, X26, X28, 0x4, LSL
	0x03B67218 LDP X23, X2, [X9 + 0x20]
	0x03B6721C LDR X9, [X8 + 0x798]
	0x03B67220 LDR X4, [X8 + 0x7A0]
	0x03B67224 MOV X0, X19
	0x03B67228 MOV X1, X23
	0x03B6722C MOV X3, X20
	0x03B67230 BLR X9
	0x03B67234 TBZ X0, 0x0, 0x3B67304
	0x03B67238 LDR V0, [X19 + 0x1C4]
	0x03B6723C ADD X8, X31, 0x50
	0x03B67240 MOV X0, X19
	0x03B67244 MOV X1, X21
	0x03B67248 MOV X2, X23
	0x03B6724C BL 0x3B667C4
	0x03B67250 LDP V0, V1, [X31 + 0x50]
	0x03B67254 LDP V2, V3, [X31 + 0x70]
	0x03B67258 STP V0, V1, [X31 + 0x90]
	0x03B6725C STP V2, V3, [X31 + 0xB0]
	0x03B67260 CBZ X23, 0x3B67358
	0x03B67264 MOV X0, X23
	0x03B67268 MOV X1, X31
	0x03B6726C BL 0x3C16D04
	0x03B67270 MOV X23, X0
	0x03B67274 CBZ X0, 0x3B67354

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X30
	003 Move [X31+32], X28
	004 Move [X31+40], X27
	005 Move [X31+48], X26
	006 Move [X31+56], X25
	007 Move [X31+64], X24
	008 Move [X31+72], X23
	009 Move [X31+80], X22
	010 Move [X31+88], X21
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move X21, 0x87D000
	014 Move W8, [X21+2489]
	015 Move X20, X1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {53}
	021 Move X0, 0x5BA000
	022 Move X0, [X0+1440]
	023 Call 0x1C17CF4
	024 Move X0, 0x5F6000
	025 Move X0, [X0+960]
	026 Call 0x1C17CF4
	027 Move X0, 0x5F6000
	028 Move X0, [X0+968]
	029 Call 0x1C17CF4
	030 Move X0, 0x5F5000
	031 Move X0, [X0+2264]
	032 Call 0x1C17CF4
	033 Move X0, 0x5F6000
	034 Move X0, [X0+976]
	035 Call 0x1C17CF4
	036 Move X0, 0x5F6000
	037 Move X0, [X0+984]
	038 Call 0x1C17CF4
	039 Move X0, 0x5F6000
	040 Move X0, [X0+992]
	041 Call 0x1C17CF4
	042 Move X0, 0x5F6000
	043 Move X0, [X0+1000]
	044 Call 0x1C17CF4
	045 Move X0, 0x5F5000
	046 Move X0, [X0+1008]
	047 Call 0x1C17CF4
	048 Move X0, 0x5F4000
	049 Move X0, [X0+1992]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X21+2489], W8
	053 Move X0, X19
	054 Move X1, X20
	055 Move X2, X31
	056 Call XRBaseInteractor.OnHoverEntering, X0, X1
	057 Move W8, [X19+424]
	058 Compare W8, 0
	059 JumpIfEqual {208}
	060 Compare X20, 0
	061 JumpIfEqual {221}
	062 Move X24, 0x5F4000
	063 Move X24, [X24+1992]
	064 Move X0, X20
	065 Call HoverEnterEventArgs.get_interactableObject, X0
	066 Move X8, [X24]
	067 Move X20, X0
	068 Move W9, [X8+224]
	069 Compare W9, 0
	070 JumpIfNotEqual {74}
	071 Move X0, X8
	072 Call 0x1C17DFC
	073 Move X8, [X24]
	074 Move X8, [X8+184]
	075 Move X8, [X8]
	076 Compare X8, 0
	077 JumpIfEqual {221}
	078 Move W2, [X8+24]
	079 Move W9, [X8+28]
	080 Add W9, W9, 1
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move [X8+24], W31
	083 Move [X8+28], W9
	084 Move X0, [X8+16]
	085 Move W1, W31
	086 Move X3, X31
	087 Call Array.Clear, X0, X1, X2
	088 Compare X20, 0
	089 JumpIfEqual {221}
	090 Move X10, 0x5F4000
	091 Move X8, [X20]
	092 Move X10, [X10+2264]
	093 NotImplemented "Instruction LDRH not yet implemented."
	094 Move X1, [X10]
	095 Compare X9, 0
	096 JumpIfEqual {103}
	097 Move X10, [X8+176]
	098 Add X10, X10, 8
	099 NotImplemented "Instruction LDUR not yet implemented."
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Subtract X9, X9, 1
	102 Add X10, X10, 16
	103 Move W2, 6
	104 Move X0, X20
	105 Call 0x1C5D788
	106 Move W9, [X10]
	107 Add W9, W9, 6
	108 Add X8, X8, W9
	109 Add X0, X8, 312
	110 Move X8, [X0]
	111 Move X1, [X0+8]
	112 Move X0, X20
	113 NotImplemented "Instruction BLR not yet implemented."
	114 Compare X0, 0
	115 JumpIfEqual {221}
	116 Move X8, [X24]
	117 Move X9, 0x5F5000
	118 Move W1, 1
	119 Move X8, [X8+184]
	120 Move X9, [X9+960]
	121 Move X2, [X8]
	122 Move X3, [X9]
	123 Call 0x21A56E8, X0, X1, X2
	124 Move X0, [X24]
	125 Move X8, [X0+184]
	126 Move X8, [X8]
	127 Compare X8, 0
	128 JumpIfEqual {221}
	129 Move W9, [X8+24]
	130 Compare W9, 0
	131 JumpIfEqual {208}
	132 Move W9, [X0+224]
	133 Compare W9, 0
	134 JumpIfNotEqual {141}
	135 Call 0x1C17DFC
	136 Move X8, [X24]
	137 Move X8, [X8+184]
	138 Move X8, [X8]
	139 Compare X8, 0
	140 JumpIfEqual {221}
	141 Move W1, [X8+24]
	142 Move X8, 0x5F5000
	143 Move X8, [X8+1000]
	144 Move X0, [X8]
	145 Call 0x1C17D6C
	146 Move X26, 0x5F5000
	147 Move X27, 0x5B9000
	148 Move X28, 0x5F5000
	149 Move X26, [X26+992]
	150 Move X27, [X27+1440]
	151 Move X28, [X28+1008]
	152 Move X21, X0
	153 Move X22, X31
	154 Add X25, X0, 32
	155 Move X0, [X24]
	156 Move W8, [X0+224]
	157 Compare W8, 0
	158 JumpIfNotEqual {161}
	159 Call 0x1C17DFC
	160 Move X0, [X24]
	161 Move X8, [X0+184]
	162 Move X8, [X8]
	163 Compare X8, 0
	164 JumpIfEqual {221}
	165 NotImplemented "Instruction LDRSW not yet implemented."
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Move W9, [X0+224]
	168 Compare W9, 0
	169 JumpIfNotEqual {176}
	170 Call 0x1C17DFC
	171 Move X8, [X24]
	172 Move X8, [X8+184]
	173 Move X8, [X8]
	174 Compare X8, 0
	175 JumpIfEqual {221}
	176 Move X2, [X26]
	177 Move X0, X8
	178 Move W1, W22
	179 Call List`1<Object>.get_Item, X0, X1
	180 Compare X0, 0
	181 JumpIfEqual {221}
	182 Move X1, [X27]
	183 Move X23, X0
	184 Call 0x21A4894, X0
	185 Move X3, [X28]
	186 Move X2, X0
	187 Add X0, X31, 0
	188 Move X1, X23
	189 Move [X31], X31
	190 Move [X31+8], X31
	191 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	192 Compare X21, 0
	193 JumpIfEqual {221}
	194 Move W8, [X21+24]
	195 NotImplemented "Instruction CMP not yet implemented."
	196 Move V0, [X31]
	197 Move [X25], V0
	198 Add X22, X22, 1
	199 Move X0, [X19+528]
	200 Compare X0, 0
	201 JumpIfEqual {221}
	202 Move X8, 0x5F5000
	203 Move X8, [X8+968]
	204 Move X1, X20
	205 Move X2, X21
	206 Move X3, [X8]
	207 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	208 Move X20, [X31+96]
	209 Move X19, [X31+104]
	210 Move X22, [X31+80]
	211 Move X21, [X31+88]
	212 Move X24, [X31+64]
	213 Move X23, [X31+72]
	214 Move X26, [X31+48]
	215 Move X25, [X31+56]
	216 Move X28, [X31+32]
	217 Move X27, [X31+40]
	218 Move X30, [X31+16]
	219 Add X31, X31, 112
	220 Return 
	221 Call 0x1C17F20
	222 Call 0x1C17F28

Method: System.Void OnHoverEntered(UnityEngine.XR.Interaction.Toolkit.HoverEnterEventArgs args)

Disassembly:
	0x03B672E4 MOV X2, X22
	0x03B672E8 MOV W3, W25
	0x03B672EC MOV X4, X31
	0x03B672F0 MOV W5, W24
	0x03B672F4 MOV X6, X31
	0x03B672F8 BL 0x3C0F86C
	0x03B672FC ADD W24, W24, 0x1
	0x03B67300 B 0x3B6727C
	0x03B67304 LDR W8, [X26 + 0x18]
	0x03B67308 ADD X28, X28, 0x1
	0x03B6730C CMP X28, W8, SXTW
	0x03B67310 B.LT 0x3B67208
	0x03B67314 B 0x3B67140
	0x03B67318 ADRP X8, 0x5F3000
	0x03B6731C LDR X8, [X8 + 0x9C0]
	0x03B67320 ADD X0, X31, 0xE0
	0x03B67324 LDR X1, [X8]
	0x03B67328 BL 0x2BC434C
	0x03B6732C LDP X20, X19, [X31 + 0x150]
	0x03B67330 LDP X22, X21, [X31 + 0x140]
	0x03B67334 LDP X24, X23, [X31 + 0x130]
	0x03B67338 LDP X26, X25, [X31 + 0x120]
	0x03B6733C LDP X28, X27, [X31 + 0x110]
	0x03B67340 LDP X29, X30, [X31 + 0x100]
	0x03B67344 ADD X31, X31, 0x160
	0x03B67348 RET
	0x03B6734C BL 0x1C16F20
	0x03B67350 BL 0x1C16F28
	0x03B67354 BL 0x1C16F20
	0x03B67358 BL 0x1C16F20
	0x03B6735C BL 0x1C16F20
	0x03B67360 BL 0x1C16F20
	0x03B67364 BL 0x1C16F20
	0x03B67368 B 0x3B673B0
	0x03B6736C B 0x3B673B0
	0x03B67370 B 0x3B673B0
	0x03B67374 B 0x3B673B0
	0x03B67378 B 0x3B673B0
	0x03B6737C B 0x3B673B0
	0x03B67380 B 0x3B673B0
	0x03B67384 B 0x3B673B0
	0x03B67388 B 0x3B673B0
	0x03B6738C B 0x3B673B0
	0x03B67390 B 0x3B673B0
	0x03B67394 B 0x3B673B0
	0x03B67398 B 0x3B673B0
	0x03B6739C B 0x3B673B0
	0x03B673A0 B 0x3B673B0
	0x03B673A4 B 0x3B673B0
	0x03B673A8 B 0x3B673B0
	0x03B673AC B 0x3B673B0
	0x03B673B0 MOV X19, X0
	0x03B673B4 CMP W1, 0x1
	0x03B673B8 B.NE 0x3B673EC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x87C000
	006 Move W8, [X21+2490]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x5F4000
	014 Move X0, [X0+1728]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2490], W8
	018 Move X0, X19
	019 Move X1, X20
	020 Move X2, X31
	021 Call XRBaseInteractor.OnHoverEntered, X0, X1
	022 Compare X20, 0
	023 JumpIfEqual {66}
	024 Move X0, X20
	025 Call HoverEnterEventArgs.get_interactableObject, X0
	026 Move X8, [X19]
	027 Move X1, X0
	028 Move X0, X19
	029 Move X9, [X8+1896]
	030 Move X2, [X8+1904]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {52}
	036 Move X0, X20
	037 Call HoverEnterEventArgs.get_interactableObject, X0
	038 Compare X0, 0
	039 JumpIfEqual {52}
	040 Move X8, 0x5F4000
	041 Move X8, [X8+1728]
	042 Move X9, [X0]
	043 Move X1, X0
	044 Move X8, [X8]
	045 Move W11, [X9+304]
	046 Move W10, [X8+304]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X9, [X9+200]
	049 Add X9, X9, X10
	050 NotImplemented "Instruction LDUR not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return 
	057 Move X8, [X19]
	058 Move X0, X19
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X3, [X8+1960]
	062 Move X2, [X8+1968]
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 CallNoReturn X3
	066 Call 0x1C17F20

Method: System.Boolean CanHoverSnap(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)

Disassembly:
	0x03B673BC MOV X0, X19
	0x03B673C0 BL 0x3EB1AD0
	0x03B673C4 LDR X20, [X0]
	0x03B673C8 BL 0x3EB1AE0
	0x03B673CC ADRP X8, 0x5F3000
	0x03B673D0 LDR X8, [X8 + 0x9C0]
	0x03B673D4 ADD X0, X31, 0xE0
	0x03B673D8 LDR X1, [X8]
	0x03B673DC BL 0x2BC434C
	0x03B673E0 CBZ X20, 0x3B6732C
	0x03B673E4 MOV X0, X20
	0x03B673E8 BL 0x1C16F18
	0x03B673EC MOV X20, X31
	0x03B673F0 B 0x3B673F8
	0x03B673F4 MOV X19, X0
	0x03B673F8 ADRP X8, 0x5F3000
	0x03B673FC LDR X8, [X8 + 0x9C0]
	0x03B67400 LDR X1, [X8]
	0x03B67404 ADD X0, X31, 0xE0
	0x03B67408 BL 0x2BC434C
	0x03B6740C CBNZ X20, 0x3B67418

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+464]
	005 Compare W8, 0
	006 JumpIfEqual {23}
	007 Move X20, X1
	008 Move X1, X31
	009 Move X19, X0
	010 Call XRBaseInteractor.get_hasSelection, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {24}
	015 Move X0, X19
	016 Move X1, X20
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X2, X31
	020 Move X30, [X31+32]
	021 Call XRBaseInteractor.IsSelecting, X0, X1
	022 Return X0
	023 Move W0, W31
	024 Move W0, 1
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void OnHoverExiting(UnityEngine.XR.Interaction.Toolkit.HoverExitEventArgs args)

Disassembly:
	0x03B67410 MOV X0, X19
	0x03B67414 BL 0x1D2C690
	0x03B67418 MOV X0, X20
	0x03B6741C BL 0x1C16F18
	0x03B67420 BL 0x1990590
	0x03B67424 STP X30, X19, [X31 - 0x10]!
	0x03B67428 MOV X1, X31
	0x03B6742C MOV X19, X0
	0x03B67430 BL 0x3B4B6D0
	0x03B67434 ANDS W31, W0, 0x1
	0x03B67438 MOVZ W8, 0x1B0
	0x03B6743C MOVZ W9, 0x1B8
	0x03B67440 CSEL X8, X9, X8, NE
	0x03B67444 LDR X0, [X19, X8, LSL]
	0x03B67448 LDP X30, X19, [X31], #0x10
	0x03B6744C RET
	0x03B67450 STP X30, X23, [X31 - 0x30]!
	0x03B67454 STP X22, X21, [X31 + 0x10]
	0x03B67458 STP X20, X19, [X31 + 0x20]
	0x03B6745C ADRP X21, 0x87B000
	0x03B67460 LDRB W8, [X21 + 0x9C0]
	0x03B67464 MOV X19, X1
	0x03B67468 MOV X20, X0
	0x03B6746C TBNZ X8, 0x0, 0x3B6749C
	0x03B67470 ADRP X0, 0x5F3000
	0x03B67474 LDR X0, [X0 + 0xCF8]
	0x03B67478 BL 0x1C16CF4
	0x03B6747C ADRP X0, 0x5F3000
	0x03B67480 LDR X0, [X0 + 0xE00]
	0x03B67484 BL 0x1C16CF4
	0x03B67488 ADRP X0, 0x5B5000
	0x03B6748C LDR X0, [X0 + 0x4F8]
	0x03B67490 BL 0x1C16CF4
	0x03B67494 MOVZ W8, 0x1
	0x03B67498 STRB W8, [X21 + 0x9C0]
	0x03B6749C CBZ X19, 0x3B67610
	0x03B674A0 LDP W2, W8, [X19 + 0x18]
	0x03B674A4 ADD W8, W8, 0x1
	0x03B674A8 CMP W2, 0x1
	0x03B674AC STP W31, W8, [X19 + 0x18]
	0x03B674B0 B.LT 0x3B674C4
	0x03B674B4 LDR X0, [X19 + 0x10]
	0x03B674B8 MOV W1, W31
	0x03B674BC MOV X3, X31
	0x03B674C0 BL 0x339FA34
	0x03B674C4 MOV X0, X20
	0x03B674C8 MOV X1, X31
	0x03B674CC BL 0x3C32454
	0x03B674D0 TBZ X0, 0x0, 0x3B67530
	0x03B674D4 MOV X0, X20
	0x03B674D8 MOV X1, X31
	0x03B674DC BL 0x3B5201C
	0x03B674E0 CBZ X0, 0x3B675A0
	0x03B674E4 ADRP X23, 0x5F3000
	0x03B674E8 LDR X8, [X0]
	0x03B674EC LDR X23, [X23 + 0xCF8]
	0x03B674F0 MOV X21, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x87C000
	006 Move W8, [X21+2491]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x5F5000
	014 Move X0, [X0+1016]
	015 Call 0x1C17CF4
	016 Move X0, 0x5F4000
	017 Move X0, [X0+1728]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2491], W8
	021 Move X0, X19
	022 Move X1, X20
	023 Move X2, X31
	024 Call XRBaseInteractor.OnHoverExiting, X0, X1
	025 Compare X20, 0
	026 JumpIfEqual {67}
	027 Move X0, X20
	028 Call HoverExitEventArgs.get_interactableObject, X0
	029 Move X8, [X19+528]
	030 Compare X8, 0
	031 JumpIfEqual {67}
	032 Move X9, 0x5F5000
	033 Move X9, [X9+1016]
	034 Move X20, X0
	035 Move X0, X8
	036 Move X1, X20
	037 Move X2, [X9]
	038 Call Dictionary`2<Object, Object>.Remove, X0, X1
	039 Compare X20, 0
	040 JumpIfEqual {52}
	041 Move X8, 0x5F4000
	042 Move X8, [X8+1728]
	043 Move X9, [X20]
	044 Move X8, [X8]
	045 Move W11, [X9+304]
	046 Move W10, [X8+304]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X9, [X9+200]
	049 Add X9, X9, X10
	050 NotImplemented "Instruction LDUR not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return 
	057 Move X8, [X19]
	058 Move X0, X19
	059 Move X1, X20
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X3, [X8+1976]
	063 Move X2, [X8+1984]
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 CallNoReturn X3
	067 Call 0x1C17F20

Method: System.Void OnSelectEntered(UnityEngine.XR.Interaction.Toolkit.SelectEnterEventArgs args)

Disassembly:
	0x03B67560 LDR X22, [X20 + 0x1F8]
	0x03B67564 LDR X1, [X23]
	0x03B67568 LDRH W9, [X8 + 0x12E]
	0x03B6756C CBZ X9, 0x3B67590
	0x03B67570 LDR X10, [X8 + 0xB0]
	0x03B67574 ADD X10, X10, 0x8
	0x03B67578 LDUR X11, [X10 - 0x8]
	0x03B6757C CMP X11, X1
	0x03B67580 B.EQ 0x3B675DC
	0x03B67584 SUBS X9, X9, 0x1
	0x03B67588 ADD X10, X10, 0x10
	0x03B6758C B.NE 0x3B67578
	0x03B67590 MOVZ W2, 0x3
	0x03B67594 MOV X0, X21
	0x03B67598 BL 0x1C5C788
	0x03B6759C B 0x3B675EC
	0x03B675A0 ADRP X8, 0x5B5000
	0x03B675A4 LDR X8, [X8 + 0x4F8]
	0x03B675A8 LDR X21, [X20 + 0x1F8]
	0x03B675AC LDR X0, [X8]
	0x03B675B0 LDR W8, [X0 + 0xE0]
	0x03B675B4 CBNZ W8, 0x3B675BC
	0x03B675B8 BL 0x1C16DFC
	0x03B675BC MOV X0, X20
	0x03B675C0 MOV X1, X21
	0x03B675C4 MOV X2, X19
	0x03B675C8 LDP X20, X19, [X31 + 0x20]
	0x03B675CC LDP X22, X21, [X31 + 0x10]
	0x03B675D0 MOV X3, X31
	0x03B675D4 LDP X30, X23, [X31], #0x30
	0x03B675D8 B 0x3B85D24
	0x03B675DC LDR W9, [X10]
	0x03B675E0 ADD W9, W9, 0x3
	0x03B675E4 ADD X8, X8, W9, 0x4, SXTW
	0x03B675E8 ADD X0, X8, 0x138
	0x03B675EC LDP X5, X4, [X0]
	0x03B675F0 MOV X0, X21
	0x03B675F4 MOV X1, X20
	0x03B675F8 MOV X2, X22
	0x03B675FC MOV X3, X19
	0x03B67600 LDP X20, X19, [X31 + 0x20]
	0x03B67604 LDP X22, X21, [X31 + 0x10]
	0x03B67608 LDP X30, X23, [X31], #0x30
	0x03B6760C BR X5
	0x03B67610 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x87C000
	006 Move W8, [X21+2492]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x5F4000
	014 Move X0, [X0+1728]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2492], W8
	018 Move X0, X19
	019 Move X1, X20
	020 Move X2, X31
	021 Call XRBaseInteractor.OnSelectEntered, X0, X1
	022 Compare X20, 0
	023 JumpIfEqual {54}
	024 Move X0, X20
	025 Call SelectEnterEventArgs.get_interactableObject, X0
	026 Compare X0, 0
	027 JumpIfEqual {40}
	028 Move X8, 0x5F4000
	029 Move X8, [X8+1728]
	030 Move X9, [X0]
	031 Move X1, X0
	032 Move X8, [X8]
	033 Move W11, [X9+304]
	034 Move W10, [X8+304]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X9, [X9+200]
	037 Add X9, X9, X10
	038 NotImplemented "Instruction LDUR not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return 
	045 Move X8, [X19]
	046 Move X0, X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X3, [X8+1960]
	050 Move X2, [X8+1968]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 CallNoReturn X3
	054 Call 0x1C17F20

Method: System.Void OnSelectExiting(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)

Disassembly:
	0x03B67680 STRB W8, [X20 + 0x9C1]
	0x03B67684 LDR X2, [X19]
	0x03B67688 ADD X0, X31, 0x8
	0x03B6768C MOVZ W1, 0x2
	0x03B67690 STR X31, [X31 + 0x8]
	0x03B67694 BL 0x24345B8
	0x03B67698 LDR X0, [X31 + 0x8]
	0x03B6769C LDP X20, X19, [X31 + 0x10]
	0x03B676A0 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X2, X31
	004 Move X19, X0
	005 Call XRBaseInteractor.OnSelectExiting, X0, X1
	006 Move X0, X31
	007 Call Time.get_time
	008 Move [X19+460], S0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

Method: System.Void OnSelectExited(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)

Disassembly:
	0x03B676A4 RET
	0x03B676A8 STP X30, X19, [X31 - 0x10]!
	0x03B676AC MOV X2, X31
	0x03B676B0 MOV X19, X0
	0x03B676B4 BL 0x3B52C68
	0x03B676B8 TBZ X0, 0x0, 0x3B676C8
	0x03B676BC MOV X0, X19
	0x03B676C0 LDP X30, X19, [X31], #0x10
	0x03B676C4 B 0x3B659DC
	0x03B676C8 MOV W0, W31
	0x03B676CC LDP X30, X19, [X31], #0x10
	0x03B676D0 RET
	0x03B676D4 STP X30, X21, [X31 - 0x20]!
	0x03B676D8 STP X20, X19, [X31 + 0x10]
	0x03B676DC ADRP X21, 0x87B000
	0x03B676E0 LDRB W8, [X21 + 0x9C2]
	0x03B676E4 MOV X19, X1
	0x03B676E8 MOV X20, X0
	0x03B676EC TBNZ X8, 0x0, 0x3B67710
	0x03B676F0 ADRP X0, 0x5F3000
	0x03B676F4 LDR X0, [X0 + 0x160]
	0x03B676F8 BL 0x1C16CF4
	0x03B676FC ADRP X0, 0x5F3000
	0x03B67700 LDR X0, [X0 + 0x168]
	0x03B67704 BL 0x1C16CF4
	0x03B67708 MOVZ W8, 0x1
	0x03B6770C STRB W8, [X21 + 0x9C2]
	0x03B67710 MOV X0, X20
	0x03B67714 MOV X1, X19
	0x03B67718 MOV X2, X31
	0x03B6771C BL 0x3B52C70
	0x03B67720 TBZ X0, 0x0, 0x3B67800
	0x03B67724 MOV X0, X20
	0x03B67728 MOV X1, X31
	0x03B6772C BL 0x3B4B6D0
	0x03B67730 TBNZ X0, 0x0, 0x3B677A0
	0x03B67734 CBZ X19, 0x3B67848
	0x03B67738 ADRP X10, 0x5F3000
	0x03B6773C LDR X8, [X19]
	0x03B67740 LDR X10, [X10 + 0x160]
	0x03B67744 LDRH W9, [X8 + 0x12E]
	0x03B67748 LDR X1, [X10]
	0x03B6774C CBZ X9, 0x3B67770
	0x03B67750 LDR X10, [X8 + 0xB0]
	0x03B67754 ADD X10, X10, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x87C000
	006 Move W8, [X21+2493]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x5F4000
	014 Move X0, [X0+1728]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2493], W8
	018 Move X0, X19
	019 Move X1, X20
	020 Move X2, X31
	021 Call XRBaseInteractor.OnSelectExited, X0, X1
	022 Compare X20, 0
	023 JumpIfEqual {54}
	024 Move X0, X20
	025 Call SelectExitEventArgs.get_interactableObject, X0
	026 Compare X0, 0
	027 JumpIfEqual {40}
	028 Move X8, 0x5F4000
	029 Move X8, [X8+1728]
	030 Move X9, [X0]
	031 Move X1, X0
	032 Move X8, [X8]
	033 Move W11, [X9+304]
	034 Move W10, [X8+304]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X9, [X9+200]
	037 Add X9, X9, X10
	038 NotImplemented "Instruction LDUR not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return 
	045 Move X8, [X19]
	046 Move X0, X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X3, [X8+1976]
	050 Move X2, [X8+1984]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 CallNoReturn X3
	054 Call 0x1C17F20

Method: UnityEngine.Matrix4x4 GetHoverMeshMatrix(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable, UnityEngine.MeshFilter meshFilter, System.Single hoverScale)

Disassembly:
	0x03B677C4 LDRH W9, [X8 + 0x12E]
	0x03B677C8 LDR X1, [X10]
	0x03B677CC CBZ X9, 0x3B677F0
	0x03B677D0 LDR X10, [X8 + 0xB0]
	0x03B677D4 ADD X10, X10, 0x8
	0x03B677D8 LDUR X11, [X10 - 0x8]
	0x03B677DC CMP X11, X1
	0x03B677E0 B.EQ 0x3B67810
	0x03B677E4 SUBS X9, X9, 0x1
	0x03B677E8 ADD X10, X10, 0x10
	0x03B677EC B.NE 0x3B677D8
	0x03B677F0 MOVZ W2, 0x4
	0x03B677F4 MOV X0, X19
	0x03B677F8 BL 0x1C5C788
	0x03B677FC B 0x3B67820
	0x03B67800 MOV W0, W31
	0x03B67804 B 0x3B6783C
	0x03B67808 MOVZ W0, 0x1
	0x03B6780C B 0x3B6783C
	0x03B67810 LDR W9, [X10]
	0x03B67814 ADD W9, W9, 0x4
	0x03B67818 ADD X8, X8, W9, 0x4, SXTW
	0x03B6781C ADD X0, X8, 0x138
	0x03B67820 LDP X8, X1, [X0]
	0x03B67824 MOV X0, X19
	0x03B67828 BLR X8
	0x03B6782C CBZ X0, 0x3B67848
	0x03B67830 LDR W8, [X0 + 0x18]
	0x03B67834 CMP W8, 0x1
	0x03B67838 CSET W0, EQ
	0x03B6783C LDP X20, X19, [X31 + 0x10]
	0x03B67840 LDP X30, X21, [X31], #0x20
	0x03B67844 RET
	0x03B67848 BL 0x1C16F20
	0x03B6784C STR X30, [X31 - 0x30]!
	0x03B67850 STP X22, X21, [X31 + 0x10]
	0x03B67854 STP X20, X19, [X31 + 0x20]
	0x03B67858 ADRP X22, 0x87B000
	0x03B6785C LDRB W8, [X22 + 0x9C3]
	0x03B67860 MOV X21, X3
	0x03B67864 MOV X19, X2
	0x03B67868 MOV X20, X1
	0x03B6786C TBNZ X8, 0x0, 0x3B67884
	0x03B67870 ADRP X0, 0x58C000
	0x03B67874 LDR X0, [X0 + 0x598]
	0x03B67878 BL 0x1C16CF4
	0x03B6787C MOVZ W8, 0x1
	0x03B67880 STRB W8, [X22 + 0x9C3]
	0x03B67884 CBZ X21, 0x3B67940
	0x03B67888 ADRP X22, 0x58C000
	0x03B6788C LDR X22, [X22 + 0x598]
	0x03B67890 MOV X0, X21
	0x03B67894 MOV X1, X31
	0x03B67898 BL 0x3C03A18
	0x03B6789C LDR X8, [X22]
	0x03B678A0 MOV W21, W0
	0x03B678A4 LDR W9, [X8 + 0xE0]
	0x03B678A8 CBNZ W9, 0x3B678B4
	0x03B678AC MOV X0, X8
	0x03B678B0 BL 0x1C16DFC
	0x03B678B4 MOV X0, X20
	0x03B678B8 MOV X1, X31
	0x03B678BC MOV X2, X31
	0x03B678C0 BL 0x3C354F8
	0x03B678C4 TBZ X0, 0x0, 0x3B6792C
	0x03B678C8 CBZ X20, 0x3B67940
	0x03B678CC MOV X0, X20
	0x03B678D0 MOV X1, X31
	0x03B678D4 BL 0x3C32ECC
	0x03B678D8 CBZ X0, 0x3B67940
	0x03B678DC MOV X1, X31
	0x03B678E0 BL 0x3C35734
	0x03B678E4 LSRV W8, W21, W0
	0x03B678E8 TBZ X8, 0x0, 0x3B6792C
	0x03B678EC LDR X0, [X22]
	0x03B678F0 LDR W8, [X0 + 0xE0]
	0x03B678F4 CBNZ W8, 0x3B678FC
	0x03B678F8 BL 0x1C16DFC
	0x03B678FC MOV X0, X19
	0x03B67900 MOV X1, X31
	0x03B67904 MOV X2, X31
	0x03B67908 BL 0x3C354F8
	0x03B6790C TBZ X0, 0x0, 0x3B6792C
	0x03B67910 CBZ X19, 0x3B67940
	0x03B67914 MOV X0, X19
	0x03B67918 LDP X20, X19, [X31 + 0x20]
	0x03B6791C LDP X22, X21, [X31 + 0x10]
	0x03B67920 MOV X1, X31
	0x03B67924 LDR X30, [X31], #0x30
	0x03B67928 B 0x3C12FF8
	0x03B6792C LDP X20, X19, [X31 + 0x20]
	0x03B67930 LDP X22, X21, [X31 + 0x10]
	0x03B67934 MOV W0, W31
	0x03B67938 LDR X30, [X31], #0x30
	0x03B6793C RET
	0x03B67940 BL 0x1C16F20
	0x03B67944 STR X30, [X31 - 0x40]!
	0x03B67948 STP X24, X23, [X31 + 0x10]
	0x03B6794C STP X22, X21, [X31 + 0x20]
	0x03B67950 STP X20, X19, [X31 + 0x30]
	0x03B67954 ADRP X21, 0x87B000
	0x03B67958 LDRB W8, [X21 + 0x9C4]
	0x03B6795C MOV X19, X1
	0x03B67960 MOV X20, X0
	0x03B67964 TBNZ X8, 0x0, 0x3B679AC
	0x03B67968 ADRP X0, 0x5F3000
	0x03B6796C LDR X0, [X0 + 0x248]
	0x03B67970 BL 0x1C16CF4
	0x03B67974 ADRP X0, 0x5F3000
	0x03B67978 LDR X0, [X0 + 0x250]
	0x03B6797C BL 0x1C16CF4
	0x03B67980 ADRP X0, 0x5F3000
	0x03B67984 LDR X0, [X0 + 0xE20]
	0x03B67988 BL 0x1C16CF4
	0x03B6798C ADRP X0, 0x5F4000
	0x03B67990 LDR X0, [X0 + 0x408]
	0x03B67994 BL 0x1C16CF4
	0x03B67998 ADRP X0, 0x5F4000
	0x03B6799C LDR X0, [X0 + 0x410]
	0x03B679A0 BL 0x1C16CF4
	0x03B679A4 MOVZ W8, 0x1
	0x03B679A8 STRB W8, [X21 + 0x9C4]
	0x03B679AC MOV X0, X20
	0x03B679B0 MOV X1, X19
	0x03B679B4 MOV X2, X31
	0x03B679B8 BL 0x3B5370C
	0x03B679BC CBZ X19, 0x3B67A94
	0x03B679C0 ADRP X8, 0x5F3000
	0x03B679C4 LDR X8, [X8 + 0x248]
	0x03B679C8 ADRP X22, 0x5F4000
	0x03B679CC LDR X21, [X19 + 0x10]
	0x03B679D0 LDR X0, [X8]
	0x03B679D4 LDR X22, [X22 + 0x408]
	0x03B679D8 BL 0x1C16F10
	0x03B679DC LDR X2, [X22]
	0x03B679E0 MOV X1, X20
	0x03B679E4 MOV X3, X31
	0x03B679E8 MOV X22, X0
	0x03B679EC BL 0x2A6B948
	0x03B679F0 CBZ X21, 0x3B67A94
	0x03B679F4 ADRP X23, 0x5F3000
	0x03B679F8 ADRP X24, 0x5F4000
	0x03B679FC LDR X23, [X23 + 0x250]
	0x03B67A00 LDR X24, [X24 + 0x410]
	0x03B67A04 MOV X0, X21
	0x03B67A08 MOV X1, X22
	0x03B67A0C BL 0x3B67A98
	0x03B67A10 LDR X0, [X23]
	0x03B67A14 LDR X21, [X19 + 0x10]
	0x03B67A18 BL 0x1C16F10
	0x03B67A1C LDR X2, [X24]
	0x03B67A20 MOV X1, X20
	0x03B67A24 MOV X3, X31
	0x03B67A28 MOV X22, X0
	0x03B67A2C BL 0x2A6B948
	0x03B67A30 CBZ X21, 0x3B67A94
	0x03B67A34 MOV X0, X21
	0x03B67A38 MOV X1, X22
	0x03B67A3C BL 0x3B67B48
	0x03B67A40 LDR X0, [X20 + 0x208]
	0x03B67A44 CBZ X0, 0x3B67A94
	0x03B67A48 LDR X8, [X19 + 0x10]
	0x03B67A4C ADRP X21, 0x5F3000
	0x03B67A50 LDR X21, [X21 + 0xE20]
	0x03B67A54 MOV X1, X31
	0x03B67A58 STR X8, [X0 + 0x20]
	0x03B67A5C BL 0x3B90790
	0x03B67A60 LDR X0, [X21]
	0x03B67A64 LDR X19, [X19 + 0x10]
	0x03B67A68 LDR X20, [X20 + 0x1F8]
	0x03B67A6C LDR W8, [X0 + 0xE0]
	0x03B67A70 CBNZ W8, 0x3B67A78
	0x03B67A74 BL 0x1C16DFC
	0x03B67A78 MOV X0, X19
	0x03B67A7C MOV X1, X20
	0x03B67A80 LDP X20, X19, [X31 + 0x30]
	0x03B67A84 LDP X22, X21, [X31 + 0x20]
	0x03B67A88 LDP X24, X23, [X31 + 0x10]
	0x03B67A8C LDR X30, [X31], #0x40
	0x03B67A90 B 0x3B67BF8
	0x03B67A94 BL 0x1C16F20
	0x03B67A98 STR X30, [X31 - 0x40]!
	0x03B67A9C STP X24, X23, [X31 + 0x10]
	0x03B67AA0 STP X22, X21, [X31 + 0x20]
	0x03B67AA4 STP X20, X19, [X31 + 0x30]
	0x03B67AA8 ADRP X21, 0x87B000
	0x03B67AAC LDRB W8, [X21 + 0xA0F]
	0x03B67AB0 MOV X19, X1
	0x03B67AB4 MOV X20, X0
	0x03B67AB8 TBNZ X8, 0x0, 0x3B67AD0
	0x03B67ABC ADRP X0, 0x5F3000
	0x03B67AC0 LDR X0, [X0 + 0x248]
	0x03B67AC4 BL 0x1C16CF4
	0x03B67AC8 MOVZ W8, 0x1
	0x03B67ACC STRB W8, [X21 + 0xA0F]
	0x03B67AD0 ADRP X24, 0x5F3000
	0x03B67AD4 LDR X21, [X20 + 0x40]!
	0x03B67AD8 LDR X24, [X24 + 0x248]
	0x03B67ADC MOV X0, X21
	0x03B67AE0 MOV X1, X19
	0x03B67AE4 MOV X2, X31
	0x03B67AE8 BL 0x33C0DE4
	0x03B67AEC CBZ X0, 0x3B67B0C
	0x03B67AF0 LDR X23, [X24]
	0x03B67AF4 MOV X22, X0
	0x03B67AF8 MOV X1, X23
	0x03B67AFC BL 0x1C16E00
	0x03B67B00 MOV X1, X0
	0x03B67B04 CBNZ X0, 0x3B67B10
	0x03B67B08 B 0x3B67B3C
	0x03B67B0C MOV X1, X31
	0x03B67B10 MOV X0, X20
	0x03B67B14 MOV X2, X21
	0x03B67B18 BL 0x1C24138
	0x03B67B1C CMP X21, X0
	0x03B67B20 MOV X21, X0
	0x03B67B24 B.NE 0x3B67ADC
	0x03B67B28 LDP X20, X19, [X31 + 0x30]
	0x03B67B2C LDP X22, X21, [X31 + 0x20]
	0x03B67B30 LDP X24, X23, [X31 + 0x10]
	0x03B67B34 LDR X30, [X31], #0x40
	0x03B67B38 RET
	0x03B67B3C MOV X0, X22
	0x03B67B40 MOV X1, X23
	0x03B67B44 BL 0x1C171E0
	0x03B67B48 STR X30, [X31 - 0x40]!
	0x03B67B4C STP X24, X23, [X31 + 0x10]
	0x03B67B50 STP X22, X21, [X31 + 0x20]
	0x03B67B54 STP X20, X19, [X31 + 0x30]
	0x03B67B58 ADRP X21, 0x87B000
	0x03B67B5C LDRB W8, [X21 + 0xA11]
	0x03B67B60 MOV X19, X1
	0x03B67B64 MOV X20, X0
	0x03B67B68 TBNZ X8, 0x0, 0x3B67B80
	0x03B67B6C ADRP X0, 0x5F3000
	0x03B67B70 LDR X0, [X0 + 0x250]
	0x03B67B74 BL 0x1C16CF4
	0x03B67B78 MOVZ W8, 0x1
	0x03B67B7C STRB W8, [X21 + 0xA11]
	0x03B67B80 ADRP X24, 0x5F3000
	0x03B67B84 LDR X21, [X20 + 0x48]!
	0x03B67B88 LDR X24, [X24 + 0x250]
	0x03B67B8C MOV X0, X21
	0x03B67B90 MOV X1, X19
	0x03B67B94 MOV X2, X31
	0x03B67B98 BL 0x33C0DE4
	0x03B67B9C CBZ X0, 0x3B67BBC
	0x03B67BA0 LDR X23, [X24]
	0x03B67BA4 MOV X22, X0
	0x03B67BA8 MOV X1, X23
	0x03B67BAC BL 0x1C16E00
	0x03B67BB0 MOV X1, X0
	0x03B67BB4 CBNZ X0, 0x3B67BC0
	0x03B67BB8 B 0x3B67BEC
	0x03B67BBC MOV X1, X31
	0x03B67BC0 MOV X0, X20
	0x03B67BC4 MOV X2, X21
	0x03B67BC8 BL 0x1C24138
	0x03B67BCC CMP X21, X0
	0x03B67BD0 MOV X21, X0
	0x03B67BD4 B.NE 0x3B67B8C
	0x03B67BD8 LDP X20, X19, [X31 + 0x30]
	0x03B67BDC LDP X22, X21, [X31 + 0x20]
	0x03B67BE0 LDP X24, X23, [X31 + 0x10]
	0x03B67BE4 LDR X30, [X31], #0x40
	0x03B67BE8 RET
	0x03B67BEC MOV X0, X22
	0x03B67BF0 MOV X1, X23
	0x03B67BF4 BL 0x1C171E0
	0x03B67BF8 STP X30, X25, [X31 - 0x40]!
	0x03B67BFC STP X24, X23, [X31 + 0x10]
	0x03B67C00 STP X22, X21, [X31 + 0x20]
	0x03B67C04 STP X20, X19, [X31 + 0x30]
	0x03B67C08 ADRP X21, 0x87B000
	0x03B67C0C LDRB W8, [X21 + 0xA3B]
	0x03B67C10 MOV X19, X1
	0x03B67C14 MOV X20, X0
	0x03B67C18 TBNZ X8, 0x0, 0x3B67C48
	0x03B67C1C ADRP X0, 0x5F4000
	0x03B67C20 LDR X0, [X0 + 0x418]
	0x03B67C24 BL 0x1C16CF4
	0x03B67C28 ADRP X0, 0x5F3000
	0x03B67C2C LDR X0, [X0 + 0xE98]
	0x03B67C30 BL 0x1C16CF4
	0x03B67C34 ADRP X0, 0x5F3000
	0x03B67C38 LDR X0, [X0 + 0xEA0]
	0x03B67C3C BL 0x1C16CF4
	0x03B67C40 MOVZ W8, 0x1
	0x03B67C44 STRB W8, [X21 + 0xA3B]
	0x03B67C48 CBZ X19, 0x3B67CDC
	0x03B67C4C LDR W8, [X19 + 0x18]
	0x03B67C50 SUBS W21, W8, 0x1
	0x03B67C54 B.MI 0x3B67CC0
	0x03B67C58 CBZ X20, 0x3B67CDC
	0x03B67C5C ADRP X24, 0x5F3000
	0x03B67C60 ADRP X25, 0x5F4000
	0x03B67C64 LDR X24, [X24 + 0xEA0]
	0x03B67C68 LDR X25, [X25 + 0x418]
	0x03B67C6C MOV W22, W31
	0x03B67C70 LDR X2, [X24]
	0x03B67C74 LDR X23, [X20 + 0xA8]
	0x03B67C78 MOV X0, X19
	0x03B67C7C MOV W1, W21
	0x03B67C80 BL 0x301BCCC
	0x03B67C84 CBZ X23, 0x3B67CDC
	0x03B67C88 LDR X8, [X23]
	0x03B67C8C MOV X1, X0
	0x03B67C90 MOV X0, X23
	0x03B67C94 LDP X9, X2, [X8 + 0x178]
	0x03B67C98 BLR X9
	0x03B67C9C TBNZ X0, 0x0, 0x3B67CB4
	0x03B67CA0 LDR X2, [X25]
	0x03B67CA4 MOV X0, X19
	0x03B67CA8 MOV W1, W21
	0x03B67CAC BL 0x301DA48
	0x03B67CB0 ADD W22, W22, 0x1
	0x03B67CB4 SUBS W21, W21, 0x1
	0x03B67CB8 B.PL 0x3B67C70
	0x03B67CBC B 0x3B67CC4
	0x03B67CC0 MOV W22, W31
	0x03B67CC4 MOV W0, W22
	0x03B67CC8 LDP X20, X19, [X31 + 0x30]
	0x03B67CCC LDP X22, X21, [X31 + 0x20]
	0x03B67CD0 LDP X24, X23, [X31 + 0x10]
	0x03B67CD4 LDP X30, X25, [X31], #0x40
	0x03B67CD8 RET
	0x03B67CDC BL 0x1C16F20
	0x03B67CE0 STR X30, [X31 - 0x40]!
	0x03B67CE4 STP X24, X23, [X31 + 0x10]
	0x03B67CE8 STP X22, X21, [X31 + 0x20]
	0x03B67CEC STP X20, X19, [X31 + 0x30]
	0x03B67CF0 ADRP X21, 0x87B000
	0x03B67CF4 LDRB W8, [X21 + 0x9C5]
	0x03B67CF8 MOV X20, X1
	0x03B67CFC MOV X19, X0
	0x03B67D00 TBNZ X8, 0x0, 0x3B67D3C
	0x03B67D04 ADRP X0, 0x5F3000
	0x03B67D08 LDR X0, [X0 + 0x248]
	0x03B67D0C BL 0x1C16CF4
	0x03B67D10 ADRP X0, 0x5F3000
	0x03B67D14 LDR X0, [X0 + 0x250]
	0x03B67D18 BL 0x1C16CF4
	0x03B67D1C ADRP X0, 0x5F4000
	0x03B67D20 LDR X0, [X0 + 0x408]
	0x03B67D24 BL 0x1C16CF4
	0x03B67D28 ADRP X0, 0x5F4000
	0x03B67D2C LDR X0, [X0 + 0x410]
	0x03B67D30 BL 0x1C16CF4
	0x03B67D34 MOVZ W8, 0x1
	0x03B67D38 STRB W8, [X21 + 0x9C5]
	0x03B67D3C MOV X0, X19
	0x03B67D40 MOV X1, X20
	0x03B67D44 MOV X2, X31
	0x03B67D48 BL 0x3B53844
	0x03B67D4C CBZ X20, 0x3B67DE0
	0x03B67D50 ADRP X8, 0x5F3000
	0x03B67D54 LDR X8, [X8 + 0x248]
	0x03B67D58 ADRP X22, 0x5F4000
	0x03B67D5C LDR X21, [X20 + 0x10]
	0x03B67D60 LDR X0, [X8]
	0x03B67D64 LDR X22, [X22 + 0x408]
	0x03B67D68 BL 0x1C16F10
	0x03B67D6C LDR X2, [X22]
	0x03B67D70 MOV X1, X19
	0x03B67D74 MOV X3, X31
	0x03B67D78 MOV X22, X0
	0x03B67D7C BL 0x2A6B948
	0x03B67D80 CBZ X21, 0x3B67DE0
	0x03B67D84 ADRP X23, 0x5F3000
	0x03B67D88 ADRP X24, 0x5F4000
	0x03B67D8C LDR X23, [X23 + 0x250]
	0x03B67D90 LDR X24, [X24 + 0x410]
	0x03B67D94 MOV X0, X21
	0x03B67D98 MOV X1, X22
	0x03B67D9C BL 0x3B67DE4
	0x03B67DA0 LDR X0, [X23]
	0x03B67DA4 LDR X20, [X20 + 0x10]
	0x03B67DA8 BL 0x1C16F10
	0x03B67DAC LDR X2, [X24]
	0x03B67DB0 MOV X1, X19
	0x03B67DB4 MOV X3, X31
	0x03B67DB8 MOV X21, X0
	0x03B67DBC BL 0x2A6B948
	0x03B67DC0 CBZ X20, 0x3B67DE0
	0x03B67DC4 MOV X0, X20
	0x03B67DC8 MOV X1, X21
	0x03B67DCC LDP X20, X19, [X31 + 0x30]
	0x03B67DD0 LDP X22, X21, [X31 + 0x20]
	0x03B67DD4 LDP X24, X23, [X31 + 0x10]
	0x03B67DD8 LDR X30, [X31], #0x40
	0x03B67DDC B 0x3B67E94
	0x03B67DE0 BL 0x1C16F20
	0x03B67DE4 STR X30, [X31 - 0x40]!
	0x03B67DE8 STP X24, X23, [X31 + 0x10]
	0x03B67DEC STP X22, X21, [X31 + 0x20]
	0x03B67DF0 STP X20, X19, [X31 + 0x30]
	0x03B67DF4 ADRP X21, 0x87B000
	0x03B67DF8 LDRB W8, [X21 + 0xA10]
	0x03B67DFC MOV X19, X1
	0x03B67E00 MOV X20, X0
	0x03B67E04 TBNZ X8, 0x0, 0x3B67E1C
	0x03B67E08 ADRP X0, 0x5F3000
	0x03B67E0C LDR X0, [X0 + 0x248]
	0x03B67E10 BL 0x1C16CF4
	0x03B67E14 MOVZ W8, 0x1
	0x03B67E18 STRB W8, [X21 + 0xA10]
	0x03B67E1C ADRP X24, 0x5F3000
	0x03B67E20 LDR X21, [X20 + 0x40]!
	0x03B67E24 LDR X24, [X24 + 0x248]
	0x03B67E28 MOV X0, X21
	0x03B67E2C MOV X1, X19
	0x03B67E30 MOV X2, X31
	0x03B67E34 BL 0x33C0FDC
	0x03B67E38 CBZ X0, 0x3B67E58
	0x03B67E3C LDR X23, [X24]
	0x03B67E40 MOV X22, X0
	0x03B67E44 MOV X1, X23
	0x03B67E48 BL 0x1C16E00
	0x03B67E4C MOV X1, X0
	0x03B67E50 CBNZ X0, 0x3B67E5C
	0x03B67E54 B 0x3B67E88
	0x03B67E58 MOV X1, X31
	0x03B67E5C MOV X0, X20
	0x03B67E60 MOV X2, X21
	0x03B67E64 BL 0x1C24138
	0x03B67E68 CMP X21, X0
	0x03B67E6C MOV X21, X0
	0x03B67E70 B.NE 0x3B67E28
	0x03B67E74 LDP X20, X19, [X31 + 0x30]
	0x03B67E78 LDP X22, X21, [X31 + 0x20]
	0x03B67E7C LDP X24, X23, [X31 + 0x10]
	0x03B67E80 LDR X30, [X31], #0x40
	0x03B67E84 RET
	0x03B67E88 MOV X0, X22
	0x03B67E8C MOV X1, X23
	0x03B67E90 BL 0x1C171E0
	0x03B67E94 STR X30, [X31 - 0x40]!
	0x03B67E98 STP X24, X23, [X31 + 0x10]
	0x03B67E9C STP X22, X21, [X31 + 0x20]
	0x03B67EA0 STP X20, X19, [X31 + 0x30]
	0x03B67EA4 ADRP X21, 0x87B000
	0x03B67EA8 LDRB W8, [X21 + 0xA12]
	0x03B67EAC MOV X19, X1
	0x03B67EB0 MOV X20, X0
	0x03B67EB4 TBNZ X8, 0x0, 0x3B67ECC
	0x03B67EB8 ADRP X0, 0x5F3000
	0x03B67EBC LDR X0, [X0 + 0x250]
	0x03B67EC0 BL 0x1C16CF4
	0x03B67EC4 MOVZ W8, 0x1
	0x03B67EC8 STRB W8, [X21 + 0xA12]
	0x03B67ECC ADRP X24, 0x5F3000
	0x03B67ED0 LDR X21, [X20 + 0x48]!
	0x03B67ED4 LDR X24, [X24 + 0x250]
	0x03B67ED8 MOV X0, X21
	0x03B67EDC MOV X1, X19
	0x03B67EE0 MOV X2, X31
	0x03B67EE4 BL 0x33C0FDC
	0x03B67EE8 CBZ X0, 0x3B67F08
	0x03B67EEC LDR X23, [X24]
	0x03B67EF0 MOV X22, X0
	0x03B67EF4 MOV X1, X23
	0x03B67EF8 BL 0x1C16E00
	0x03B67EFC MOV X1, X0
	0x03B67F00 CBNZ X0, 0x3B67F0C
	0x03B67F04 B 0x3B67F38
	0x03B67F08 MOV X1, X31
	0x03B67F0C MOV X0, X20
	0x03B67F10 MOV X2, X21
	0x03B67F14 BL 0x1C24138
	0x03B67F18 CMP X21, X0
	0x03B67F1C MOV X21, X0
	0x03B67F20 B.NE 0x3B67ED8
	0x03B67F24 LDP X20, X19, [X31 + 0x30]
	0x03B67F28 LDP X22, X21, [X31 + 0x20]
	0x03B67F2C LDP X24, X23, [X31 + 0x10]
	0x03B67F30 LDR X30, [X31], #0x40
	0x03B67F34 RET
	0x03B67F38 MOV X0, X22
	0x03B67F3C MOV X1, X23
	0x03B67F40 BL 0x1C171E0
	0x03B67F44 STP X30, X21, [X31 - 0x20]!
	0x03B67F48 STP X20, X19, [X31 + 0x10]
	0x03B67F4C ADRP X21, 0x87B000
	0x03B67F50 LDRB W8, [X21 + 0x9C6]
	0x03B67F54 MOV X19, X1
	0x03B67F58 MOV X20, X0
	0x03B67F5C TBNZ X8, 0x0, 0x3B67F80
	0x03B67F60 ADRP X0, 0x5F3000
	0x03B67F64 LDR X0, [X0 + 0xE28]
	0x03B67F68 BL 0x1C16CF4
	0x03B67F6C ADRP X0, 0x5F3000
	0x03B67F70 LDR X0, [X0 + 0xE30]
	0x03B67F74 BL 0x1C16CF4
	0x03B67F78 MOVZ W8, 0x1
	0x03B67F7C STRB W8, [X21 + 0x9C6]
	0x03B67F80 CBZ X19, 0x3B68040
	0x03B67F84 LDR X0, [X20 + 0x208]
	0x03B67F88 CBZ X0, 0x3B68040
	0x03B67F8C LDR X1, [X19 + 0x18]
	0x03B67F90 MOV X2, X31
	0x03B67F94 BL 0x3B90C78
	0x03B67F98 LDR X0, [X20 + 0x208]
	0x03B67F9C CBZ X0, 0x3B68040
	0x03B67FA0 LDR X1, [X19 + 0x18]
	0x03B67FA4 MOV X2, X31
	0x03B67FA8 BL 0x3B914F0
	0x03B67FAC TBZ X0, 0x0, 0x3B6801C
	0x03B67FB0 LDR X0, [X20 + 0x1F8]
	0x03B67FB4 CBZ X0, 0x3B68040
	0x03B67FB8 ADRP X8, 0x5F3000
	0x03B67FBC LDR X1, [X19 + 0x18]
	0x03B67FC0 LDR X8, [X8 + 0xE30]
	0x03B67FC4 LDR X2, [X8]
	0x03B67FC8 BL 0x301C318

ISIL:
	001 Subtract X31, X31, 368
	002 Move [X31+208], D15
	003 Move [X31+216], D14
	004 Move [X31+224], D13
	005 Move [X31+232], D12
	006 Move [X31+240], D11
	007 Move [X31+248], D10
	008 Move [X31+256], D9
	009 Move [X31+264], D8
	010 Move [X31+272], X29
	011 Move [X31+280], X30
	012 Move [X31+288], X28
	013 Move [X31+296], X27
	014 Move [X31+304], X26
	015 Move [X31+312], X25
	016 Move [X31+320], X24
	017 Move [X31+328], X23
	018 Move [X31+336], X22
	019 Move [X31+344], X21
	020 Move [X31+352], X20
	021 Move [X31+360], X19
	022 Move X21, 0x87C000
	023 Move W9, [X21+2494]
	024 Move X20, X2
	025 Move X22, X1
	026 Move X23, X0
	027 Move X19, X8
	028 Move [X31+44], S0
	029 Move TEMP, X9
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {50}
	033 Move X0, 0x5F4000
	034 Move X0, [X0+2264]
	035 Call 0x1C17CF4
	036 Move X0, 0x58D000
	037 Move X0, [X0+1432]
	038 Call 0x1C17CF4
	039 Move X0, 0x5B5000
	040 Move X0, [X0+1552]
	041 Call 0x1C17CF4
	042 Move X0, 0x5F4000
	043 Move X0, [X0+1728]
	044 Call 0x1C17CF4
	045 Move X0, 0x5F4000
	046 Move X0, [X0+1992]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X21+2494], W8
	050 Move [X31+176], X31
	051 Move [X31+184], X31
	052 Move [X31+200], W31
	053 Move [X31+192], X31
	054 Move [X31+144], X31
	055 Move [X31+152], X31
	056 Move [X31+168], W31
	057 Move [X31+160], X31
	058 Compare X22, 0
	059 JumpIfEqual {598}
	060 Move X28, 0x5F4000
	061 Move X8, [X22]
	062 Move X28, [X28+2264]
	063 Move X21, 0x5F4000
	064 NotImplemented "Instruction LDRH not yet implemented."
	065 Move X1, [X28]
	066 Move X21, [X21+1728]
	067 Compare X9, 0
	068 JumpIfEqual {75}
	069 Move X10, [X8+176]
	070 Add X10, X10, 8
	071 NotImplemented "Instruction LDUR not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Subtract X9, X9, 1
	074 Add X10, X10, 16
	075 Move W2, 7
	076 Move X0, X22
	077 Call 0x1C5D788
	078 Move W9, [X10]
	079 Add W9, W9, 7
	080 Add X8, X8, W9
	081 Add X0, X8, 312
	082 Move X8, [X0]
	083 Move X2, [X0+8]
	084 Move X26, 0x58D000
	085 Move X26, [X26+1432]
	086 Move X0, X22
	087 Move X1, X23
	088 NotImplemented "Instruction BLR not yet implemented."
	089 Move X9, [X22]
	090 Move X8, [X21]
	091 Move X24, X0
	092 Move W11, [X9+304]
	093 Move W10, [X8+304]
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X21, X31
	096 Move X9, [X9+200]
	097 Add X9, X9, X10
	098 NotImplemented "Instruction LDUR not yet implemented."
	099 NotImplemented "Instruction CMP not yet implemented."
	100 NotImplemented "Instruction CSEL not yet implemented."
	101 Move X0, [X26]
	102 Move W8, [X0+224]
	103 Compare W8, 0
	104 JumpIfNotEqual {106}
	105 Call 0x1C17DFC
	106 Move X27, 0x5B5000
	107 Move X27, [X27+1552]
	108 Move X0, X21
	109 Move X1, X31
	110 Move X2, X31
	111 Call Object.op_Inequality, X0, X1
	112 Move TEMP, X0
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfNotEqual {179}
	116 Compare X21, 0
	117 JumpIfEqual {598}
	118 Move W8, [X21+480]
	119 Compare W8, 0
	120 JumpIfNotEqual {179}
	121 Move X0, X21
	122 Move X1, X31
	123 Call XRBaseInteractable.get_isSelected, X0
	124 Move TEMP, X0
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfNotEqual {179}
	128 Move X8, [X22]
	129 Move X1, [X28]
	130 NotImplemented "Instruction LDRH not yet implemented."
	131 Compare X9, 0
	132 JumpIfEqual {139}
	133 Move X10, [X8+176]
	134 Add X10, X10, 8
	135 NotImplemented "Instruction LDUR not yet implemented."
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Subtract X9, X9, 1
	138 Add X10, X10, 16
	139 Move W2, 6
	140 Move X0, X22
	141 Call 0x1C5D788
	142 Move W9, [X10]
	143 Add W9, W9, 6
	144 Add X8, X8, W9
	145 Add X0, X8, 312
	146 Move X8, [X0]
	147 Move X1, [X0+8]
	148 Move X0, X22
	149 NotImplemented "Instruction BLR not yet implemented."
	150 Move X8, [X26]
	151 Move X25, X0
	152 Move W9, [X8+224]
	153 Compare W9, 0
	154 JumpIfNotEqual {157}
	155 Move X0, X8
	156 Call 0x1C17DFC
	157 Move X0, X24
	158 Move X1, X25
	159 Move X2, X31
	160 Call Object.op_Inequality, X0, X1
	161 Move TEMP, X0
	162 And TEMP, TEMP, 1
	163 Compare TEMP, 1
	164 JumpIfNotEqual {179}
	165 Move X8, [X22]
	166 Move X1, [X28]
	167 NotImplemented "Instruction LDRH not yet implemented."
	168 Compare X9, 0
	169 JumpIfEqual {176}
	170 Move X10, [X8+176]
	171 Add X10, X10, 8
	172 NotImplemented "Instruction LDUR not yet implemented."
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Subtract X9, X9, 1
	175 Add X10, X10, 16
	176 Move W2, 6
	177 Move X0, X22
	178 Call 0x1C5D788
	179 Compare X24, 0
	180 JumpIfEqual {598}
	181 Move X0, X24
	182 Move X1, X31
	183 Call Transform.get_position, X0
	184 Move X0, X24
	185 Move X1, X31
	186 Move V9, V0
	187 Move V10, V1
	188 Move V11, V2
	189 Call Transform.get_rotation, X0
	190 Move X0, [X27]
	191 Move V12, V0
	192 Move V13, V1
	193 Move V14, V2
	194 Move W8, [X0+224]
	195 Move V15, V3
	196 Compare W8, 0
	197 JumpIfNotEqual {199}
	198 Call 0x1C17DFC
	199 Add X0, X31, 176
	200 Move V0, V9
	201 Move V1, V10
	202 Move V2, V11
	203 Move V3, V12
	204 Move V4, V13
	205 Move V5, V14
	206 Move V6, V15
	207 Move X1, X31
	208 Call Pose..ctor, X0, X1, X2
	209 Compare X20, 0
	210 JumpIfEqual {598}
	211 Move X0, X20
	212 Move X1, X31
	213 Call Component.get_transform, X0
	214 Compare X0, 0
	215 JumpIfEqual {598}
	216 Move X24, 0x5F4000
	217 Move X24, [X24+1992]
	218 Move X1, X31
	219 Call Transform.get_position, X0
	220 Move V4, [X31+11]
	221 NotImplemented "Instruction LDUR not yet implemented."
	222 Move X0, [X24]
	223 Move S3, [X31+176]
	224 Move S6, [X31+180]
	225 Move V7, [X31+184]
	226 Move [X31+3], V4
	227 Move [X31+60], V5
	228 Move W8, [X0+224]
	229 Subtract S10, S0, S3
	230 Subtract S9, S1, S6
	231 Subtract S8, S2, S7
	232 Compare W8, 0
	233 JumpIfNotEqual {235}
	234 Call 0x1C17DFC
	235 Move V0, [X31+3]
	236 NotImplemented "Instruction LDUR not yet implemented."
	237 Add X0, X31, 112
	238 Move V2, V8
	239 Move [X31+7], V0
	240 Move [X31+124], V1
	241 Move V0, V10
	242 Move V1, V9
	243 Call XRSocketInteractor.InverseTransformDirection, X0, X1
	244 Move X0, X20
	245 Move X1, X31
	246 Move V8, V0
	247 Move V9, V1
	248 Move V10, V2
	249 Call Component.get_transform, X0
	250 Compare X0, 0
	251 JumpIfEqual {598}
	252 Move X1, X31
	253 Move [X31+32], S10
	254 Move [X31+40], S9
	255 Move [X31+40], S8
	256 Call Transform.get_rotation, X0
	257 Move X0, X31
	258 Call Quaternion.Inverse, X0
	259 Move S4, [X31+188]
	260 Move S7, [X31+192]
	261 Move S6, [X31+196]
	262 Move S5, [X31+200]
	263 Move X0, X31
	264 Multiply S16, S3, S4
	265 Multiply S17, S0, S5
	266 Multiply S18, S1, S6
	267 Multiply S19, S2, S7
	268 Multiply S20, S3, S7
	269 Multiply S21, S1, S5
	270 Multiply S22, S2, S4
	271 Multiply S23, S0, S6
	272 Multiply S24, S0, S7
	273 Multiply S0, S0, S4
	274 Multiply S4, S1, S4
	275 Multiply S1, S1, S7
	276 Multiply S7, S3, S6
	277 Multiply S3, S3, S5
	278 Multiply S5, S2, S5
	279 Multiply S6, S2, S6
	280 Add S2, S16, S17
	281 Add S16, S20, S21
	282 Add S5, S7, S5
	283 Subtract S0, S3, S0
	284 Add S2, S18, S2
	285 Add S3, S22, S16
	286 Add S5, S24, S5
	287 Subtract S7, S0, S1
	288 Subtract S0, S2, S19
	289 Subtract S1, S3, S23
	290 Subtract S2, S5, S4
	291 Subtract S3, S7, S6
	292 Call Quaternion.Inverse, X0
	293 Move X8, [X23]
	294 Move X0, X23
	295 Move X1, X22
	296 Move [X31+20], S0
	297 Move [X31+28], S1
	298 Move X9, [X8+1208]
	299 Move X2, [X8+1216]
	300 Move [X31+28], S2
	301 Move V15, V3
	302 NotImplemented "Instruction BLR not yet implemented."
	303 Compare X0, 0
	304 JumpIfEqual {598}
	305 Move X1, X31
	306 Move X22, X0
	307 Call Transform.get_position, X0
	308 Move X0, X22
	309 Move X1, X31
	310 Move V8, V0
	311 Move V9, V1
	312 Move V10, V2
	313 Call Transform.get_rotation, X0
	314 Move X0, [X27]
	315 Move V11, V0
	316 Move V12, V1
	317 Move V13, V2
	318 Move W8, [X0+224]
	319 Move V14, V3
	320 Compare W8, 0
	321 JumpIfNotEqual {323}
	322 Call 0x1C17DFC
	323 Add X0, X31, 144
	324 Move V0, V8
	325 Move V1, V9
	326 Move V2, V10
	327 Move V3, V11
	328 Move V4, V12
	329 Move V5, V13
	330 Move V6, V14
	331 Move X1, X31
	332 Call Pose..ctor, X0, X1, X2
	333 Move X0, [X26]
	334 Move W8, [X0+224]
	335 Compare W8, 0
	336 JumpIfNotEqual {338}
	337 Call 0x1C17DFC
	338 Move S1, [X31+40]
	339 Move S0, [X31+44]
	340 Move X0, X21
	341 Move X1, X31
	342 Move X2, X31
	343 Multiply S8, S1, S0
	344 Move V1, [X31+36]
	345 Multiply S10, S1, S0
	346 Move V1, [X31+32]
	347 Multiply S9, S1, S0
	348 Call Object.op_Equality, X0, X1
	349 Move TEMP, X0
	350 And TEMP, TEMP, 1
	351 Compare TEMP, 1
	352 JumpIfEqual {358}
	353 Compare X21, 0
	354 JumpIfEqual {598}
	355 Move W8, [X21+524]
	356 Compare W8, 0
	357 JumpIfEqual {490}
	358 Move S0, [X31+156]
	359 Move S1, [X31+160]
	360 Move S2, [X31+164]
	361 Move S3, [X31+168]
	362 Move V4, V8
	363 Move V5, V10
	364 Move V6, V9
	365 Move X0, X31
	366 Call Quaternion.op_Multiply, X0, X1
	367 Move S3, [X31+144]
	368 Move S4, [X31+148]
	369 Move S5, [X31+152]
	370 Move S6, [X31+156]
	371 Move S7, [X31+160]
	372 Move S16, [X31+164]
	373 Move V17, [X31+168]
	374 Move S21, [X31+20]
	375 Move S22, [X31+24]
	376 Move V24, [X31+28]
	377 Add S9, S0, S3
	378 Add S10, S1, S4
	379 Add S11, S2, S5
	380 Multiply S0, S21, S17
	381 Multiply S1, S15, S6
	382 Multiply S2, S24, S7
	383 Multiply S3, S22, S16
	384 Multiply S4, S22, S17
	385 Multiply S5, S15, S7
	386 Multiply S18, S21, S16
	387 Multiply S19, S24, S6
	388 Multiply S20, S22, S6
	389 Multiply S6, S21, S6
	390 Multiply S21, S21, S7
	391 Multiply S7, S22, S7
	392 Multiply S22, S24, S17
	393 Multiply S17, S15, S17
	394 Multiply S23, S15, S16
	395 Add S0, S1, S0
	396 Add S1, S5, S4
	397 Add S4, S23, S22
	398 Subtract S5, S17, S6
	399 Multiply S16, S24, S16
	400 Add S0, S2, S0
	401 Add S1, S18, S1
	402 Add S2, S20, S4
	403 Subtract S4, S5, S7
	404 Subtract S12, S0, S3
	405 Subtract S13, S1, S19
	406 Subtract S14, S2, S21
	407 Subtract S15, S4, S16
	408 Move X0, [X26]
	409 Move W8, [X0+224]
	410 Compare W8, 0
	411 JumpIfNotEqual {413}
	412 Call 0x1C17DFC
	413 Move X0, X21
	414 Move X1, X31
	415 Move X2, X31
	416 Call Object.op_Inequality, X0, X1
	417 Move TEMP, X0
	418 And TEMP, TEMP, 1
	419 Compare TEMP, 1
	420 JumpIfNotEqual {436}
	421 Compare X21, 0
	422 JumpIfEqual {598}
	423 Move W8, [X21+512]
	424 Compare W8, 0
	425 JumpIfNotEqual {436}
	426 Move X0, X20
	427 Move X1, X31
	428 Call Component.get_transform, X0
	429 Compare X0, 0
	430 JumpIfEqual {598}
	431 Move X1, X31
	432 Call Transform.get_position, X0
	433 Move V9, V0
	434 Move V10, V1
	435 Move V11, V2
	436 Move X0, X20
	437 Move X1, X31
	438 Call Component.get_transform, X0
	439 Compare X0, 0
	440 JumpIfEqual {598}
	441 Move X1, X31
	442 Call Transform.get_lossyScale, X0
	443 Move V3, [X31+44]
	444 Add X8, X31, 48
	445 Move V4, V13
	446 Move V5, V14
	447 Multiply S0, S0, S3
	448 Multiply S1, S1, S3
	449 Multiply S2, S2, S3
	450 Move [X31+4], S1
	451 Move [X31+12], S2
	452 Move [X31], S0
	453 Move V0, V9
	454 Move V1, V10
	455 Move V2, V11
	456 Move V3, V12
	457 Move V6, V15
	458 Move X0, X31
	459 Call Matrix4x4.TRS, X0, X1, X2
	460 Move V1, [X31+80]
	461 Move V0, [X31+96]
	462 Move V3, [X31+48]
	463 Move V2, [X31+64]
	464 Move X22, [X31+336]
	465 Move X21, [X31+344]
	466 Move X24, [X31+320]
	467 Move X23, [X31+328]
	468 Move [X19+32], V1
	469 Move [X19+40], V0
	470 Move [X19], V3
	471 Move [X19+8], V2
	472 Move X20, [X31+352]
	473 Move X19, [X31+360]
	474 Move X26, [X31+304]
	475 Move X25, [X31+312]
	476 Move X28, [X31+288]
	477 Move X27, [X31+296]
	478 Move X29, [X31+272]
	479 Move X30, [X31+280]
	480 Move D9, [X31+256]
	481 Move D8, [X31+264]
	482 Move D11, [X31+240]
	483 Move D10, [X31+248]
	484 Move D13, [X31+224]
	485 Move D12, [X31+232]
	486 Move D15, [X31+208]
	487 Move D14, [X31+216]
	488 Add X31, X31, 368
	489 Return X0
	490 Move S0, [X31+188]
	491 Move S1, [X31+192]
	492 Move S2, [X31+196]
	493 Move S3, [X31+200]
	494 Move V4, V8
	495 Move V5, V10
	496 Move V6, V9
	497 Move X0, X31
	498 Call Quaternion.op_Multiply, X0, X1
	499 Move S9, [X31+144]
	500 Move S12, [X31+148]
	501 Move V13, [X31+152]
	502 Move X0, X20
	503 Move X1, X31
	504 Move V8, V0
	505 Move V10, V1
	506 Move V11, V2
	507 Call Component.get_transform, X0
	508 Compare X0, 0
	509 JumpIfEqual {598}
	510 Move X1, X31
	511 Add S9, S8, S9
	512 Add S10, S10, S12
	513 Add S11, S11, S13
	514 Call Transform.get_rotation, X0
	515 Move V12, V0
	516 Move V13, V1
	517 Move V14, V2
	518 Move V15, V3
	519 Move W9, [X10]
	520 Add W9, W9, 6
	521 Add X8, X8, W9
	522 Add X0, X8, 312
	523 Move X8, [X0]
	524 Move X1, [X0+8]
	525 Move X0, X22
	526 NotImplemented "Instruction BLR not yet implemented."
	527 Compare X24, 0
	528 JumpIfEqual {598}
	529 Move X1, X0
	530 Move X0, X24
	531 Move X2, X31
	532 Call Transform.IsChildOf, X0, X1
	533 Move TEMP, X0
	534 And TEMP, TEMP, 1
	535 Compare TEMP, 1
	536 JumpIfNotEqual {181}
	537 Move X1, [X21+256]
	538 Add X8, X31, 48
	539 Move X0, X21
	540 Move X2, X31
	541 Call XRBaseInteractable.GetLocalAttachPoseOnSelect, X0, X1
	542 Move S11, [X31+48]
	543 Move S9, [X31+52]
	544 Move S10, [X31+56]
	545 Move S12, [X31+60]
	546 Move S15, [X31+64]
	547 Move S8, [X31+68]
	548 Move V13, [X31+72]
	549 Move X0, X24
	550 Move X1, X31
	551 Call Transform.get_parent, X0
	552 Compare X0, 0
	553 JumpIfEqual {598}
	554 Move V0, V11
	555 Move V1, V9
	556 Move V2, V10
	557 Move X1, X31
	558 Move X24, X0
	559 Call Transform.TransformPoint, X0, X1
	560 Move X0, X24
	561 Move X1, X31
	562 Move V9, V0
	563 Move V10, V1
	564 Move V11, V2
	565 Call Transform.get_rotation, X0
	566 Multiply S4, S12, S3
	567 Multiply S5, S13, S0
	568 Move X0, [X27]
	569 Multiply S6, S8, S1
	570 Multiply S7, S15, S3
	571 Add S4, S4, S5
	572 Multiply S5, S13, S1
	573 Add S5, S7, S5
	574 Multiply S7, S8, S3
	575 Multiply S16, S13, S2
	576 Add S4, S6, S4
	577 Multiply S6, S12, S2
	578 Add S7, S7, S16
	579 Add S5, S6, S5
	580 Multiply S6, S15, S0
	581 Multiply S3, S13, S3
	582 Add S6, S6, S7
	583 Multiply S7, S8, S0
	584 Multiply S0, S12, S0
	585 Move W8, [X0+224]
	586 Multiply S17, S12, S1
	587 Subtract S0, S3, S0
	588 Multiply S1, S15, S1
	589 Multiply S16, S15, S2
	590 Subtract S0, S0, S1
	591 Multiply S1, S8, S2
	592 Subtract S12, S4, S16
	593 Subtract S13, S5, S7
	594 Subtract S14, S6, S17
	595 Subtract S15, S0, S1
	596 Compare W8, 0
	597 JumpIfNotEqual {199}
	598 Call 0x1C17F20

Method: UnityEngine.Vector3 InverseTransformDirection(UnityEngine.Pose pose, UnityEngine.Vector3 direction)

Disassembly:
	0x03B67FCC TBNZ X0, 0x0, 0x3B6801C
	0x03B67FD0 LDR X0, [X20 + 0x1F8]
	0x03B67FD4 CBZ X0, 0x3B68040
	0x03B67FD8 ADRP X9, 0x5F3000
	0x03B67FDC LDR X1, [X19 + 0x18]
	0x03B67FE0 LDR X9, [X9 + 0xE28]
	0x03B67FE4 LDR W10, [X0 + 0x1C]
	0x03B67FE8 LDR X8, [X0 + 0x10]
	0x03B67FEC LDR X9, [X9]
	0x03B67FF0 ADD W10, W10, 0x1
	0x03B67FF4 STR W10, [X0 + 0x1C]
	0x03B67FF8 CBZ X8, 0x3B68040
	0x03B67FFC LDRSW X10, [X0 + 0x18]
	0x03B68000 LDR W11, [X8 + 0x18]
	0x03B68004 CMP W10, W11
	0x03B68008 B.CS 0x3B68028
	0x03B6800C ADD W9, W10, 0x1
	0x03B68010 ADD X8, X8, X10, 0x3, LSL
	0x03B68014 STR W9, [X0 + 0x18]

ISIL:
	001 Move [X31-32], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move V9, V1
	006 Move S4, [X0+12]
	007 Move S1, [X0+16]
	008 Move V8, V2
	009 Move S2, [X0+20]
	010 Move S3, [X0+24]
	011 Move V10, V0
	012 Move V0, V4
	013 Move X0, X31
	014 Call Quaternion.Inverse, X0
	015 Move V5, V9
	016 Move V6, V8
	017 Move X30, [X31+24]
	018 Move D9, [X31+8]
	019 Move D8, [X31+16]
	020 Move V4, V10
	021 Move X0, X31
	022 Move V10, [X31+32]
	023 Call Quaternion.op_Multiply, X0, X1
	024 Return X0

Method: System.Void DrawHoveredInteractables()

Disassembly:
	0x03B68018 STR X1, [X8 + 0x20]
	0x03B6801C LDP X20, X19, [X31 + 0x10]
	0x03B68020 LDP X30, X21, [X31], #0x20
	0x03B68024 RET
	0x03B68028 LDR X8, [X9 + 0x20]
	0x03B6802C LDP X20, X19, [X31 + 0x10]
	0x03B68030 LDR X8, [X8 + 0xC0]
	0x03B68034 LDR X2, [X8 + 0x70]
	0x03B68038 LDP X30, X21, [X31], #0x20
	0x03B6803C B 0x301BF90
	0x03B68040 BL 0x1C16F20
	0x03B68044 STP X30, X21, [X31 - 0x20]!
	0x03B68048 STP X20, X19, [X31 + 0x10]
	0x03B6804C ADRP X21, 0x87A000
	0x03B68050 LDRB W8, [X21 + 0x9C7]
	0x03B68054 MOV X19, X1
	0x03B68058 MOV X20, X0
	0x03B6805C TBNZ X8, 0x0, 0x3B68074
	0x03B68060 ADRP X0, 0x5F2000
	0x03B68064 LDR X0, [X0 + 0xE38]
	0x03B68068 BL 0x1C16CF4
	0x03B6806C MOVZ W8, 0x1
	0x03B68070 STRB W8, [X21 + 0x9C7]
	0x03B68074 CBZ X19, 0x3B6809C
	0x03B68078 LDR X0, [X20 + 0x1F8]
	0x03B6807C CBZ X0, 0x3B6809C
	0x03B68080 ADRP X8, 0x5F2000
	0x03B68084 LDR X8, [X8 + 0xE38]
	0x03B68088 LDR X1, [X19 + 0x18]
	0x03B6808C LDP X20, X19, [X31 + 0x10]
	0x03B68090 LDR X2, [X8]
	0x03B68094 LDP X30, X21, [X31], #0x20
	0x03B68098 B 0x301D7A8
	0x03B6809C BL 0x1C16F20
	0x03B680A0 STP X30, X21, [X31 - 0x20]!
	0x03B680A4 STP X20, X19, [X31 + 0x10]
	0x03B680A8 ADRP X21, 0x87A000
	0x03B680AC LDRB W8, [X21 + 0x9C8]
	0x03B680B0 MOV X19, X1
	0x03B680B4 MOV X20, X0
	0x03B680B8 TBNZ X8, 0x0, 0x3B680DC
	0x03B680BC ADRP X0, 0x5F2000
	0x03B680C0 LDR X0, [X0 + 0xE28]
	0x03B680C4 BL 0x1C16CF4
	0x03B680C8 ADRP X0, 0x5F2000
	0x03B680CC LDR X0, [X0 + 0xE30]
	0x03B680D0 BL 0x1C16CF4
	0x03B680D4 MOVZ W8, 0x1
	0x03B680D8 STRB W8, [X21 + 0x9C8]
	0x03B680DC LDR X0, [X20 + 0x1F8]
	0x03B680E0 CBZ X0, 0x3B6816C
	0x03B680E4 ADRP X8, 0x5F2000
	0x03B680E8 LDR X8, [X8 + 0xE30]
	0x03B680EC MOV X1, X19
	0x03B680F0 LDR X2, [X8]
	0x03B680F4 BL 0x301C318
	0x03B680F8 TBNZ X0, 0x0, 0x3B68144
	0x03B680FC LDR X0, [X20 + 0x1F8]
	0x03B68100 CBZ X0, 0x3B6816C
	0x03B68104 ADRP X9, 0x5F2000
	0x03B68108 LDR X9, [X9 + 0xE28]
	0x03B6810C LDR W10, [X0 + 0x1C]
	0x03B68110 LDR X8, [X0 + 0x10]
	0x03B68114 LDR X9, [X9]
	0x03B68118 ADD W10, W10, 0x1
	0x03B6811C STR W10, [X0 + 0x1C]
	0x03B68120 CBZ X8, 0x3B6816C
	0x03B68124 LDRSW X10, [X0 + 0x18]
	0x03B68128 LDR W11, [X8 + 0x18]
	0x03B6812C CMP W10, W11
	0x03B68130 B.CS 0x3B68150
	0x03B68134 ADD W9, W10, 0x1
	0x03B68138 ADD X8, X8, X10, 0x3, LSL
	0x03B6813C STR W9, [X0 + 0x18]
	0x03B68140 STR X19, [X8 + 0x20]
	0x03B68144 LDP X20, X19, [X31 + 0x10]
	0x03B68148 LDP X30, X21, [X31], #0x20
	0x03B6814C RET
	0x03B68150 LDR X8, [X9 + 0x20]
	0x03B68154 MOV X1, X19
	0x03B68158 LDP X20, X19, [X31 + 0x10]
	0x03B6815C LDR X8, [X8 + 0xC0]
	0x03B68160 LDR X2, [X8 + 0x70]
	0x03B68164 LDP X30, X21, [X31], #0x20
	0x03B68168 B 0x301BF90
	0x03B6816C BL 0x1C16F20
	0x03B68170 STP X30, X21, [X31 - 0x20]!
	0x03B68174 STP X20, X19, [X31 + 0x10]
	0x03B68178 ADRP X21, 0x87A000
	0x03B6817C LDRB W8, [X21 + 0x9C9]
	0x03B68180 MOV X19, X1
	0x03B68184 MOV X20, X0
	0x03B68188 TBNZ X8, 0x0, 0x3B681A0
	0x03B6818C ADRP X0, 0x5F2000
	0x03B68190 LDR X0, [X0 + 0xE38]
	0x03B68194 BL 0x1C16CF4
	0x03B68198 MOVZ W8, 0x1
	0x03B6819C STRB W8, [X21 + 0x9C9]
	0x03B681A0 LDR X0, [X20 + 0x1F8]
	0x03B681A4 CBZ X0, 0x3B681C4
	0x03B681A8 ADRP X8, 0x5F2000
	0x03B681AC LDR X8, [X8 + 0xE38]
	0x03B681B0 MOV X1, X19
	0x03B681B4 LDP X20, X19, [X31 + 0x10]
	0x03B681B8 LDR X2, [X8]
	0x03B681BC LDP X30, X21, [X31], #0x20
	0x03B681C0 B 0x301D7A8
	0x03B681C4 BL 0x1C16F20
	0x03B681C8 STP X30, X23, [X31 - 0x30]!
	0x03B681CC STP X22, X21, [X31 + 0x10]
	0x03B681D0 STP X20, X19, [X31 + 0x20]
	0x03B681D4 ADRP X21, 0x87A000
	0x03B681D8 LDRB W8, [X21 + 0x9CB]
	0x03B681DC MOV X19, X1
	0x03B681E0 MOV X20, X0
	0x03B681E4 TBNZ X8, 0x0, 0x3B6825C
	0x03B681E8 ADRP X0, 0x5F3000
	0x03B681EC LDR X0, [X0 + 0x420]
	0x03B681F0 BL 0x1C16CF4
	0x03B681F4 ADRP X0, 0x5F3000
	0x03B681F8 LDR X0, [X0 + 0x428]
	0x03B681FC BL 0x1C16CF4
	0x03B68200 ADRP X0, 0x5F3000
	0x03B68204 LDR X0, [X0 + 0x430]
	0x03B68208 BL 0x1C16CF4
	0x03B6820C ADRP X0, 0x5F3000
	0x03B68210 LDR X0, [X0 + 0x438]
	0x03B68214 BL 0x1C16CF4
	0x03B68218 ADRP X0, 0x5F3000
	0x03B6821C LDR X0, [X0 + 0x440]
	0x03B68220 BL 0x1C16CF4
	0x03B68224 ADRP X0, 0x58B000
	0x03B68228 LDR X0, [X0 + 0xE00]
	0x03B6822C BL 0x1C16CF4
	0x03B68230 ADRP X0, 0x5F3000
	0x03B68234 LDR X0, [X0 + 0x448]
	0x03B68238 BL 0x1C16CF4
	0x03B6823C ADRP X0, 0x5F3000
	0x03B68240 LDR X0, [X0 + 0x450]
	0x03B68244 BL 0x1C16CF4
	0x03B68248 ADRP X0, 0x58B000
	0x03B6824C LDR X0, [X0 + 0xE18]
	0x03B68250 BL 0x1C16CF4
	0x03B68254 MOVZ W8, 0x1
	0x03B68258 STRB W8, [X21 + 0x9CB]
	0x03B6825C LDR X0, [X20 + 0x228]
	0x03B68260 CBZ X0, 0x3B6850C
	0x03B68264 ADRP X8, 0x5F3000
	0x03B68268 LDR X8, [X8 + 0x440]
	0x03B6826C LDR X1, [X8]
	0x03B68270 BL 0x2D57B54
	0x03B68274 LDR X8, [X20]
	0x03B68278 MOV W21, W0
	0x03B6827C MOV X0, X20
	0x03B68280 LDR X9, [X8 + 0x728]
	0x03B68284 LDR X1, [X8 + 0x730]
	0x03B68288 BLR X9
	0x03B6828C CMP W21, W0
	0x03B68290 B.GE 0x3B682B4
	0x03B68294 LDR X0, [X20 + 0x228]
	0x03B68298 CBZ X0, 0x3B6850C
	0x03B6829C ADRP X8, 0x5F3000
	0x03B682A0 LDR X8, [X8 + 0x438]
	0x03B682A4 MOV X1, X19
	0x03B682A8 LDR X2, [X8]
	0x03B682AC BL 0x2D58148
	0x03B682B0 TBZ X0, 0x0, 0x3B682BC
	0x03B682B4 MOV W8, W31
	0x03B682B8 B 0x3B684F4
	0x03B682BC CMP W21, 0x1
	0x03B682C0 B.LT 0x3B684C0
	0x03B682C4 LDR X8, [X20]
	0x03B682C8 MOV X0, X20
	0x03B682CC LDR X9, [X8 + 0x738]
	0x03B682D0 LDR X1, [X8 + 0x740]
	0x03B682D4 BLR X9
	0x03B682D8 TBZ X0, 0x0, 0x3B684C0
	0x03B682DC LDR X8, [X20 + 0x228]
	0x03B682E0 CBZ X8, 0x3B6850C
	0x03B682E4 LDR X21, [X8 + 0x10]
	0x03B682E8 CBZ X21, 0x3B6850C
	0x03B682EC ADRP X10, 0x5F3000
	0x03B682F0 LDR X8, [X21]
	0x03B682F4 LDR X10, [X10 + 0x448]
	0x03B682F8 LDRH W9, [X8 + 0x12E]
	0x03B682FC LDR X1, [X10]
	0x03B68300 CBZ X9, 0x3B68324
	0x03B68304 LDR X10, [X8 + 0xB0]
	0x03B68308 ADD X10, X10, 0x8
	0x03B6830C LDUR X11, [X10 - 0x8]
	0x03B68310 CMP X11, X1
	0x03B68314 B.EQ 0x3B68334
	0x03B68318 SUBS X9, X9, 0x1
	0x03B6831C ADD X10, X10, 0x10
	0x03B68320 B.NE 0x3B6830C
	0x03B68324 MOV X0, X21
	0x03B68328 MOV W2, W31
	0x03B6832C BL 0x1C5C788
	0x03B68330 B 0x3B68340
	0x03B68334 LDRSW X9, [X10]
	0x03B68338 ADD X8, X8, X9, 0x4, LSL
	0x03B6833C ADD X0, X8, 0x138
	0x03B68340 LDP X8, X1, [X0]
	0x03B68344 MOV X0, X21
	0x03B68348 BLR X8
	0x03B6834C MOV X21, X0
	0x03B68350 CBZ X0, 0x3B68510
	0x03B68354 ADRP X22, 0x58B000
	0x03B68358 ADRP X23, 0x5F3000
	0x03B6835C LDR X22, [X22 + 0xE18]
	0x03B68360 LDR X23, [X23 + 0x450]
	0x03B68364 LDR X8, [X21]
	0x03B68368 LDR X1, [X22]
	0x03B6836C LDRH W9, [X8 + 0x12E]
	0x03B68370 CBZ X9, 0x3B68394
	0x03B68374 LDR X10, [X8 + 0xB0]
	0x03B68378 ADD X10, X10, 0x8
	0x03B6837C LDUR X11, [X10 - 0x8]
	0x03B68380 CMP X11, X1
	0x03B68384 B.EQ 0x3B683A4
	0x03B68388 SUBS X9, X9, 0x1
	0x03B6838C ADD X10, X10, 0x10
	0x03B68390 B.NE 0x3B6837C
	0x03B68394 MOV X0, X21
	0x03B68398 MOV W2, W31
	0x03B6839C BL 0x1C5C788
	0x03B683A0 B 0x3B683B0
	0x03B683A4 LDRSW X9, [X10]
	0x03B683A8 ADD X8, X8, X9, 0x4, LSL
	0x03B683AC ADD X0, X8, 0x138
	0x03B683B0 LDP X8, X1, [X0]
	0x03B683B4 MOV X0, X21
	0x03B683B8 BLR X8
	0x03B683BC TBZ X0, 0x0, 0x3B6842C
	0x03B683C0 LDR X8, [X21]
	0x03B683C4 LDR X1, [X23]
	0x03B683C8 LDRH W9, [X8 + 0x12E]
	0x03B683CC CBZ X9, 0x3B683F0
	0x03B683D0 LDR X10, [X8 + 0xB0]
	0x03B683D4 ADD X10, X10, 0x8
	0x03B683D8 LDUR X11, [X10 - 0x8]
	0x03B683DC CMP X11, X1
	0x03B683E0 B.EQ 0x3B68400
	0x03B683E4 SUBS X9, X9, 0x1
	0x03B683E8 ADD X10, X10, 0x10
	0x03B683EC B.NE 0x3B683D8
	0x03B683F0 MOV X0, X21
	0x03B683F4 MOV W2, W31
	0x03B683F8 BL 0x1C5C788
	0x03B683FC B 0x3B6840C
	0x03B68400 LDRSW X9, [X10]
	0x03B68404 ADD X8, X8, X9, 0x4, LSL
	0x03B68408 ADD X0, X8, 0x138
	0x03B6840C LDP X8, X1, [X0]
	0x03B68410 MOV X0, X21
	0x03B68414 BLR X8
	0x03B68418 CBZ X0, 0x3B68508
	0x03B6841C LDR X1, [X20 + 0x220]
	0x03B68420 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 352
	002 Move [X31+256], X29
	003 Move [X31+264], X30
	004 Move [X31+272], X28
	005 Move [X31+280], X27
	006 Move [X31+288], X26
	007 Move [X31+296], X25
	008 Move [X31+304], X24
	009 Move [X31+312], X23
	010 Move [X31+320], X22
	011 Move [X31+328], X21
	012 Move [X31+336], X20
	013 Move [X31+344], X19
	014 Move X20, 0x87B000
	015 Move W8, [X20+2495]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {44}
	021 Move X0, 0x5F4000
	022 Move X0, [X0+1024]
	023 Call 0x1C17CF4
	024 Move X0, 0x5F3000
	025 Move X0, [X0+2496]
	026 Call 0x1C17CF4
	027 Move X0, 0x5F3000
	028 Move X0, [X0+2504]
	029 Call 0x1C17CF4
	030 Move X0, 0x5F3000
	031 Move X0, [X0+2512]
	032 Call 0x1C17CF4
	033 Move X0, 0x590000
	034 Move X0, [X0+712]
	035 Call 0x1C17CF4
	036 Move X0, 0x5F3000
	037 Move X0, [X0+2520]
	038 Call 0x1C17CF4
	039 Move X0, 0x58C000
	040 Move X0, [X0+1432]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X20+2495], W8
	044 Move [X31+224], X31
	045 Move [X31+232], X31
	046 Move [X31+240], X31
	047 Move [X31+216], X31
	048 Move W8, [X19+424]
	049 Compare W8, 0
	050 JumpIfEqual {245}
	051 Move V0, [X19+452]
	052 NotImplemented "Instruction FCMP not yet implemented."
	053 Move X0, X31
	054 Call Camera.get_main
	055 Move X8, 0x58C000
	056 Move X8, [X8+1432]
	057 Move X20, X0
	058 Move X8, [X8]
	059 Move W9, [X8+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X8
	063 Call 0x1C17DFC
	064 Move X0, X20
	065 Move X1, X31
	066 Move X2, X31
	067 Call Object.op_Equality, X0, X1
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfEqual {245}
	072 Move X0, X19
	073 Move X1, X31
	074 Call XRBaseInteractor.get_interactablesHovered, X0
	075 Compare X0, 0
	076 JumpIfEqual {265}
	077 Move X8, 0x5F3000
	078 Move X8, [X8+2520]
	079 Move X1, [X8]
	080 Add X8, X31, 80
	081 Call List`1<Object>.GetEnumerator, X0
	082 Move V0, [X31+5]
	083 Move X8, [X31+96]
	084 Move X27, 0x5F3000
	085 Move X27, [X27+2504]
	086 Move [X31+14], V0
	087 Move [X31+240], X8
	088 Move X29, 0x590000
	089 Move X29, [X29+712]
	090 Move X1, [X27]
	091 Add X0, X31, 224
	092 Call Enumerator<Object>.MoveNext, X0
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {240}
	097 Move X21, [X31+240]
	098 Compare X21, 0
	099 JumpIfEqual {90}
	100 Move X0, X19
	101 Move X1, X21
	102 Move X2, X31
	103 Call XRBaseInteractor.IsSelecting, X0, X1
	104 Move TEMP, X0
	105 And TEMP, TEMP, 1
	106 Compare TEMP, 1
	107 JumpIfEqual {90}
	108 Move X0, [X19+528]
	109 Compare X0, 0
	110 JumpIfEqual {263}
	111 Move X8, 0x5F4000
	112 Move X8, [X8+1024]
	113 Move X3, [X8]
	114 Add X2, X31, 216
	115 Move X1, X21
	116 Call Dictionary`2<Object, Object>.TryGetValue, X0, X1, X2
	117 Move X8, [X31+216]
	118 Compare X8, 0
	119 JumpIfEqual {90}
	120 Xor W9, W0, 1
	121 Move TEMP, X9
	122 And TEMP, TEMP, 1
	123 Compare TEMP, 1
	124 JumpIfEqual {90}
	125 Move X8, [X8+24]
	126 Compare X8, 0
	127 JumpIfEqual {90}
	128 Move X8, [X19]
	129 Move X9, [X8+1928]
	130 Move X2, [X8+1936]
	131 Move X0, X19
	132 Move X1, X21
	133 NotImplemented "Instruction BLR not yet implemented."
	134 Move X8, 0x58C000
	135 Move X8, [X8+1432]
	136 Move X22, X0
	137 Move X0, [X8]
	138 Move W8, [X0+224]
	139 Compare W8, 0
	140 JumpIfNotEqual {142}
	141 Call 0x1C17DFC
	142 Move X0, X22
	143 Move X1, X31
	144 Move X2, X31
	145 Call Object.op_Equality, X0, X1
	146 Move TEMP, X0
	147 And TEMP, TEMP, 1
	148 Compare TEMP, 1
	149 JumpIfEqual {90}
	150 Move X26, [X31+216]
	151 Compare X26, 0
	152 JumpIfEqual {264}
	153 Move X8, [X26+24]
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Move X28, X31
	156 And X8, X8, 0
	157 NotImplemented "Instruction CMP not yet implemented."
	158 Move X8, [X19]
	159 Add X9, X26, X28
	160 Move X23, [X9+32]
	161 Move X2, [X9+40]
	162 Move X9, [X8+1944]
	163 Move X4, [X8+1952]
	164 Move X0, X19
	165 Move X1, X23
	166 Move X3, X20
	167 NotImplemented "Instruction BLR not yet implemented."
	168 Move TEMP, X0
	169 And TEMP, TEMP, 1
	170 Compare TEMP, 1
	171 JumpIfNotEqual {237}
	172 Move V0, [X19+452]
	173 Add X8, X31, 80
	174 Move X0, X19
	175 Move X1, X21
	176 Move X2, X23
	177 Call XRSocketInteractor.GetHoverMeshMatrix, X0, X1, X2, V0
	178 Move V0, [X31+80]
	179 Move V1, [X31+96]
	180 Move V2, [X31+112]
	181 Move V3, [X31+128]
	182 Move [X31+144], V0
	183 Move [X31+152], V1
	184 Move [X31+176], V2
	185 Move [X31+184], V3
	186 Compare X23, 0
	187 JumpIfEqual {262}
	188 Move X0, X23
	189 Move X1, X31
	190 Call MeshFilter.get_sharedMesh, X0
	191 Move X23, X0
	192 Compare X0, 0
	193 JumpIfEqual {261}
	194 Move W24, W31
	195 Move X0, X23
	196 Move X1, X31
	197 Call Mesh.get_subMeshCount, X0
	198 NotImplemented "Instruction CMP not yet implemented."
	199 Move V0, [X31+144]
	200 Move V1, [X31+160]
	201 Move V2, [X31+176]
	202 Move V3, [X31+192]
	203 Move [X31+80], V0
	204 Move [X31+88], V1
	205 Move [X31+112], V2
	206 Move [X31+120], V3
	207 Move X0, X19
	208 Move X1, X31
	209 Call Component.get_gameObject, X0
	210 Compare X0, 0
	211 JumpIfEqual {259}
	212 Move X1, X31
	213 Call GameObject.get_layer, X0
	214 Move W25, W0
	215 Move X0, [X29]
	216 Move W8, [X0+224]
	217 Compare W8, 0
	218 JumpIfNotEqual {220}
	219 Call 0x1C17DFC
	220 Move V0, [X31+80]
	221 Move V1, [X31+96]
	222 Move V2, [X31+112]
	223 Move V3, [X31+128]
	224 Move [X31+16], V0
	225 Move [X31+24], V1
	226 Move [X31+48], V2
	227 Move [X31+56], V3
	228 Add X1, X31, 16
	229 Move X0, X23
	230 Move X2, X22
	231 Move W3, W25
	232 Move X4, X31
	233 Move W5, W24
	234 Move X6, X31
	235 Call Graphics.DrawMesh, X0, X1, X2, X3, X4, X5
	236 Add W24, W24, 1
	237 Move W8, [X26+24]
	238 Add X28, X28, 1
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Move X8, 0x5F3000
	241 Move X8, [X8+2496]
	242 Add X0, X31, 224
	243 Move X1, [X8]
	244 Call Enumerator<Object>.Dispose, X0
	245 Move X20, [X31+336]
	246 Move X19, [X31+344]
	247 Move X22, [X31+320]
	248 Move X21, [X31+328]
	249 Move X24, [X31+304]
	250 Move X23, [X31+312]
	251 Move X26, [X31+288]
	252 Move X25, [X31+296]
	253 Move X28, [X31+272]
	254 Move X27, [X31+280]
	255 Move X29, [X31+256]
	256 Move X30, [X31+264]
	257 Add X31, X31, 352
	258 Return 
	259 Call 0x1C17F20
	260 Call 0x1C17F28
	261 Call 0x1C17F20
	262 Call 0x1C17F20
	263 Call 0x1C17F20
	264 Call 0x1C17F20
	265 Call 0x1C17F20
	266 Move X19, X0
	267 NotImplemented "Instruction CMP not yet implemented."
	268 Move X0, X19
	269 Call 0x3EB2AD0
	270 Move X20, [X0]
	271 Call 0x3EB2AE0
	272 Move X8, 0x5F3000
	273 Move X8, [X8+2496]
	274 Add X0, X31, 224
	275 Move X1, [X8]
	276 Call Enumerator<Object>.Dispose, X0
	277 Compare X20, 0
	278 JumpIfEqual {245}
	279 Move X0, X20
	280 Call 0x1C17F18
	281 Move X20, X31
	282 Move X19, X0
	283 Move X8, 0x5F3000
	284 Move X8, [X8+2496]
	285 Move X1, [X8]
	286 Add X0, X31, 224
	287 Call Enumerator<Object>.Dispose, X0
	288 Compare X20, 0
	289 JumpIfNotEqual {292}
	290 Move X0, X19
	291 Call 0x1D2D690
	292 Move X0, X20
	293 Call 0x1C17F18
	294 Call 0x1991590

Method: UnityEngine.Material GetHoveredInteractableMaterial(UnityEngine.XR.Interaction.Toolkit.IXRHoverInteractable interactable)

Disassembly:
	0x03B68424 BL 0x3B40504
	0x03B68428 B 0x3B68364
	0x03B6842C MOV X22, X31
	0x03B68430 MOVZ W23, 0x7
	0x03B68434 CBZ X21, 0x3B68498
	0x03B68438 ADRP X10, 0x58B000
	0x03B6843C LDR X8, [X21]
	0x03B68440 LDR X10, [X10 + 0xE00]
	0x03B68444 LDRH W9, [X8 + 0x12E]
	0x03B68448 LDR X1, [X10]
	0x03B6844C CBZ X9, 0x3B68470

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call XRBaseInteractor.get_hasSelection, X0
	006 And W31, W0, 1
	007 Move W8, 432
	008 Move W9, 440
	009 NotImplemented "Instruction CSEL not yet implemented."
	010 Move X0, [X19]
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Return X0

Method: System.Void GetValidTargets(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> targets)

Disassembly:
	0x03B68450 LDR X10, [X8 + 0xB0]
	0x03B68454 ADD X10, X10, 0x8
	0x03B68458 LDUR X11, [X10 - 0x8]
	0x03B6845C CMP X11, X1
	0x03B68460 B.EQ 0x3B68480
	0x03B68464 SUBS X9, X9, 0x1
	0x03B68468 ADD X10, X10, 0x10
	0x03B6846C B.NE 0x3B68458
	0x03B68470 MOV X0, X21
	0x03B68474 MOV W2, W31
	0x03B68478 BL 0x1C5C788
	0x03B6847C B 0x3B6848C
	0x03B68480 LDRSW X9, [X10]
	0x03B68484 ADD X8, X8, X9, 0x4, LSL
	0x03B68488 ADD X0, X8, 0x138
	0x03B6848C LDP X8, X1, [X0]
	0x03B68490 MOV X0, X21
	0x03B68494 BLR X8
	0x03B68498 CBNZ X22, 0x3B68514
	0x03B6849C CMP W23, 0x7
	0x03B684A0 B.EQ 0x3B684A8
	0x03B684A4 CBNZ W23, 0x3B684F4
	0x03B684A8 LDR X0, [X20 + 0x228]
	0x03B684AC CBZ X0, 0x3B6850C
	0x03B684B0 ADRP X8, 0x5F3000
	0x03B684B4 LDR X8, [X8 + 0x430]
	0x03B684B8 LDR X1, [X8]
	0x03B684BC BL 0x2D580EC
	0x03B684C0 CBZ X19, 0x3B6850C
	0x03B684C4 LDR X1, [X20 + 0x220]
	0x03B684C8 MOV X0, X19
	0x03B684CC MOV X2, X31
	0x03B684D0 BL 0x3B3F260
	0x03B684D4 LDR X0, [X20 + 0x228]
	0x03B684D8 CBZ X0, 0x3B6850C
	0x03B684DC ADRP X8, 0x5F3000
	0x03B684E0 LDR X8, [X8 + 0x420]
	0x03B684E4 MOV X1, X19
	0x03B684E8 LDR X2, [X8]
	0x03B684EC BL 0x2D57DD8
	0x03B684F0 MOVZ W8, 0x1
	0x03B684F4 LDP X20, X19, [X31 + 0x20]
	0x03B684F8 LDP X22, X21, [X31 + 0x10]
	0x03B684FC AND W0, W8, 0x1
	0x03B68500 LDP X30, X23, [X31], #0x30
	0x03B68504 RET
	0x03B68508 BL 0x1C16F20
	0x03B6850C BL 0x1C16F20
	0x03B68510 BL 0x1C16F20
	0x03B68514 MOV X0, X22
	0x03B68518 BL 0x1C16F18
	0x03B6851C B 0x3B6852C
	0x03B68520 B 0x3B6852C
	0x03B68524 B 0x3B6852C
	0x03B68528 B 0x3B6852C
	0x03B6852C MOV X23, X0
	0x03B68530 CMP W1, 0x1
	0x03B68534 B.NE 0x3B68554
	0x03B68538 MOV X0, X23
	0x03B6853C BL 0x3EB1AD0
	0x03B68540 LDR X22, [X0]
	0x03B68544 BL 0x3EB1AE0
	0x03B68548 MOV W23, W31
	0x03B6854C CBNZ X21, 0x3B68438
	0x03B68550 B 0x3B68498
	0x03B68554 MOV X22, X31
	0x03B68558 B 0x3B68560
	0x03B6855C MOV X23, X0
	0x03B68560 CBZ X21, 0x3B685C4
	0x03B68564 ADRP X10, 0x58B000
	0x03B68568 LDR X8, [X21]
	0x03B6856C LDR X10, [X10 + 0xE00]
	0x03B68570 LDRH W9, [X8 + 0x12E]
	0x03B68574 LDR X1, [X10]
	0x03B68578 CBZ X9, 0x3B6859C
	0x03B6857C LDR X10, [X8 + 0xB0]
	0x03B68580 ADD X10, X10, 0x8
	0x03B68584 LDUR X11, [X10 - 0x8]
	0x03B68588 CMP X11, X1
	0x03B6858C B.EQ 0x3B685AC
	0x03B68590 SUBS X9, X9, 0x1
	0x03B68594 ADD X10, X10, 0x10
	0x03B68598 B.NE 0x3B68584
	0x03B6859C MOV X0, X21
	0x03B685A0 MOV W2, W31
	0x03B685A4 BL 0x1C5C788
	0x03B685A8 B 0x3B685B8
	0x03B685AC LDRSW X9, [X10]
	0x03B685B0 ADD X8, X8, X9, 0x4, LSL
	0x03B685B4 ADD X0, X8, 0x138
	0x03B685B8 LDP X8, X1, [X0]
	0x03B685BC MOV X0, X21
	0x03B685C0 BLR X8
	0x03B685C4 CBNZ X22, 0x3B685D0
	0x03B685C8 MOV X0, X23
	0x03B685CC BL 0x1D2C690
	0x03B685D0 MOV X0, X22
	0x03B685D4 BL 0x1C16F18
	0x03B685D8 BL 0x1990590
	0x03B685DC STP X30, X21, [X31 - 0x20]!
	0x03B685E0 STP X20, X19, [X31 + 0x10]
	0x03B685E4 ADRP X21, 0x87A000
	0x03B685E8 LDRB W8, [X21 + 0x9CC]
	0x03B685EC MOV X19, X1
	0x03B685F0 MOV X20, X0
	0x03B685F4 TBNZ X8, 0x0, 0x3B6860C
	0x03B685F8 ADRP X0, 0x5F3000
	0x03B685FC LDR X0, [X0 + 0x458]
	0x03B68600 BL 0x1C16CF4
	0x03B68604 MOVZ W8, 0x1
	0x03B68608 STRB W8, [X21 + 0x9CC]
	0x03B6860C CBZ X19, 0x3B68644
	0x03B68610 LDR X1, [X20 + 0x220]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x87B000
	008 Move W8, [X21+2496]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x5F3000
	016 Move X0, [X0+3320]
	017 Call 0x1C17CF4
	018 Move X0, 0x5F3000
	019 Move X0, [X0+3584]
	020 Call 0x1C17CF4
	021 Move X0, 0x5B5000
	022 Move X0, [X0+1272]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2496], W8
	026 Compare X19, 0
	027 JumpIfEqual {137}
	028 Move W2, [X19+24]
	029 Move W8, [X19+28]
	030 Add W8, W8, 1
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move [X19+24], W31
	033 Move [X19+28], W8
	034 Move X0, [X19+16]
	035 Move W1, W31
	036 Move X3, X31
	037 Call Array.Clear, X0, X1, X2
	038 Move X0, X20
	039 Move X1, X31
	040 Call Behaviour.get_isActiveAndEnabled, X0
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {67}
	045 Move X0, X20
	046 Move X1, X31
	047 Call XRBaseInteractor.get_targetFilter, X0
	048 Compare X0, 0
	049 JumpIfEqual {100}
	050 Move X23, 0x5F3000
	051 Move X8, [X0]
	052 Move X23, [X23+3320]
	053 Move X21, X0
	054 NotImplemented "Instruction LDRH not yet implemented."
	055 Move X1, [X23]
	056 Compare X9, 0
	057 JumpIfEqual {64}
	058 Move X10, [X8+176]
	059 Add X10, X10, 8
	060 NotImplemented "Instruction LDUR not yet implemented."
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Subtract X9, X9, 1
	063 Add X10, X10, 16
	064 Move X0, X21
	065 Move W2, W31
	066 Call 0x1C5D788
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Move X30, [X31+48]
	072 Move X23, [X31+56]
	073 Return 
	074 NotImplemented "Instruction LDRSW not yet implemented."
	075 Add X8, X8, X9
	076 Add X0, X8, 312
	077 Move X8, [X0]
	078 Move X1, [X0+8]
	079 Move X0, X21
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {100}
	085 Move X8, [X21]
	086 Move X22, [X20+504]
	087 Move X1, [X23]
	088 NotImplemented "Instruction LDRH not yet implemented."
	089 Compare X9, 0
	090 JumpIfEqual {97}
	091 Move X10, [X8+176]
	092 Add X10, X10, 8
	093 NotImplemented "Instruction LDUR not yet implemented."
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Subtract X9, X9, 1
	096 Add X10, X10, 16
	097 Move W2, 3
	098 Move X0, X21
	099 Call 0x1C5D788
	100 Move X8, 0x5B5000
	101 Move X8, [X8+1272]
	102 Move X21, [X20+504]
	103 Move X0, [X8]
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {108}
	107 Call 0x1C17DFC
	108 Move X0, X20
	109 Move X1, X21
	110 Move X2, X19
	111 Move X20, [X31+32]
	112 Move X19, [X31+40]
	113 Move X22, [X31+16]
	114 Move X21, [X31+24]
	115 Move X3, X31
	116 Move X30, [X31+48]
	117 Move X23, [X31+56]
	118 Call SortingHelpers.SortByDistanceToInteractor, X0, X1, X2
	119 Return 
	120 Move W9, [X10]
	121 Add W9, W9, 3
	122 Add X8, X8, W9
	123 Add X0, X8, 312
	124 Move X5, [X0]
	125 Move X4, [X0+8]
	126 Move X0, X21
	127 Move X1, X20
	128 Move X2, X22
	129 Move X3, X19
	130 Move X20, [X31+32]
	131 Move X19, [X31+40]
	132 Move X22, [X31+16]
	133 Move X21, [X31+24]
	134 Move X30, [X31+48]
	135 Move X23, [X31+56]
	136 CallNoReturn X5
	137 Call 0x1C17F20

Method: System.Boolean get_isHoverActive()

Disassembly:
	0x03B68614 MOV X0, X19
	0x03B68618 MOV X2, X31
	0x03B6861C BL 0x3B40504
	0x03B68620 LDR X0, [X20 + 0x228]
	0x03B68624 CBZ X0, 0x3B68644
	0x03B68628 ADRP X8, 0x5F3000
	0x03B6862C LDR X8, [X8 + 0x458]
	0x03B68630 MOV X1, X19

ISIL:
	001 Move W8, [X0+152]
	002 Compare W8, 0
	003 JumpIfEqual {8}
	004 Move W8, [X0+448]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Return X0
	008 Move W0, W31
	009 Return X0

Method: System.Boolean get_isSelectActive()

Disassembly:
	0x03B68634 LDP X20, X19, [X31 + 0x10]
	0x03B68638 LDR X2, [X8]
	0x03B6863C LDP X30, X21, [X31], #0x20
	0x03B68640 B 0x2D57E88
	0x03B68644 BL 0x1C16F20
	0x03B68648 LDR X8, [X0]
	0x03B6864C LDR X3, [X8 + 0x538]
	0x03B68650 LDR X2, [X8 + 0x540]

ISIL:
	001 Move W8, [X0+153]
	002 Compare W8, 0
	003 JumpIfEqual {8}
	004 Move W8, [X0+448]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Return X0
	008 Move W0, W31
	009 Return X0

Method: System.Nullable`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/MovementType> get_selectedInteractableMovementTypeOverride()

Disassembly:
	0x03B68654 BR X3
	0x03B68658 LDR X8, [X0]
	0x03B6865C LDR X3, [X8 + 0x548]
	0x03B68660 LDR X2, [X8 + 0x550]
	0x03B68664 BR X3
	0x03B68668 STP X29, X30, [X31 - 0x60]!
	0x03B6866C STP X28, X27, [X31 + 0x10]
	0x03B68670 STP X26, X25, [X31 + 0x20]
	0x03B68674 STP X24, X23, [X31 + 0x30]
	0x03B68678 STP X22, X21, [X31 + 0x40]
	0x03B6867C STP X20, X19, [X31 + 0x50]
	0x03B68680 ADRP X21, 0x87A000
	0x03B68684 LDRB W8, [X21 + 0x9CD]
	0x03B68688 MOV X19, X0
	0x03B6868C ADD X20, X0, 0x1C4
	0x03B68690 TBNZ X8, 0x0, 0x3B68720
	0x03B68694 ADRP X0, 0x5F3000
	0x03B68698 LDR X0, [X0 + 0x460]
	0x03B6869C BL 0x1C16CF4
	0x03B686A0 ADRP X0, 0x5F3000
	0x03B686A4 LDR X0, [X0 + 0x468]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x87B000
	005 Move X19, 0x5F3000
	006 Move W8, [X20+2497]
	007 Move X19, [X19+1480]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5F3000
	013 Move X0, [X0+1480]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2497], W8
	017 Move X2, [X19]
	018 Add X0, X31, 8
	019 Move W1, 2
	020 Move [X31+8], X31
	021 Call Nullable`1<Int32Enum>..ctor, X0, X1
	022 Move X0, [X31+8]
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return X0

Method: System.Boolean CanHover(UnityEngine.XR.Interaction.Toolkit.IXRHoverInteractable interactable)

Disassembly:
	0x03B686A8 BL 0x1C16CF4
	0x03B686AC ADRP X0, 0x5F3000
	0x03B686B0 LDR X0, [X0 + 0x470]
	0x03B686B4 BL 0x1C16CF4
	0x03B686B8 ADRP X0, 0x5F3000
	0x03B686BC LDR X0, [X0 + 0x478]
	0x03B686C0 BL 0x1C16CF4
	0x03B686C4 ADRP X0, 0x5F2000
	0x03B686C8 LDR X0, [X0 + 0x828]
	0x03B686CC BL 0x1C16CF4
	0x03B686D0 ADRP X0, 0x5F2000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X2, X31
	004 Move X19, X0
	005 Call XRBaseInteractor.CanHover, X0, X1
	006 Move TEMP, X0
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {15}
	010 Move X0, X19
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call XRSocketInteractor.get_isHoverRecycleAllowed, X0
	014 Return X0
	015 Move W0, W31
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return X0

Method: System.Boolean get_isHoverRecycleAllowed()

Disassembly:
	0x03B669DC MOV X0, X24
	0x03B669E0 MOV X1, X25
	0x03B669E4 MOV X2, X31
	0x03B669E8 BL 0x3C354F8
	0x03B669EC TBZ X0, 0x0, 0x3B66A30
	0x03B669F0 LDR X8, [X22]
	0x03B669F4 LDR X1, [X28]
	0x03B669F8 LDRH W9, [X8 + 0x12E]
	0x03B669FC CBZ X9, 0x3B66A20
	0x03B66A00 LDR X10, [X8 + 0xB0]
	0x03B66A04 ADD X10, X10, 0x8
	0x03B66A08 LDUR X11, [X10 - 0x8]
	0x03B66A0C CMP X11, X1
	0x03B66A10 B.EQ 0x3B66EB0
	0x03B66A14 SUBS X9, X9, 0x1
	0x03B66A18 ADD X10, X10, 0x10
	0x03B66A1C B.NE 0x3B66A08
	0x03B66A20 MOVZ W2, 0x6
	0x03B66A24 MOV X0, X22
	0x03B66A28 BL 0x1C5C788
	0x03B66A2C B 0x3B66EC0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+464]
	004 Compare W8, 0
	005 JumpIfNotEqual {18}
	006 Move V0, [X0+460]
	007 Move X19, X0
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 Move V0, [X19+456]
	010 NotImplemented "Instruction FCMP not yet implemented."
	011 Move X0, X31
	012 Call Time.get_time
	013 Move V1, [X19+460]
	014 Move V2, [X19+456]
	015 Add S1, S1, S2
	016 NotImplemented "Instruction FCMP not yet implemented."
	017 NotImplemented "Instruction CSET not yet implemented."
	018 Move W0, 1
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Return X0

Method: System.Boolean CanSelect(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractable interactable)

Disassembly:
	0x03B686D4 LDR X0, [X0 + 0x830]
	0x03B686D8 BL 0x1C16CF4
	0x03B686DC ADRP X0, 0x5F2000
	0x03B686E0 LDR X0, [X0 + 0xE48]
	0x03B686E4 BL 0x1C16CF4
	0x03B686E8 ADRP X0, 0x5F2000
	0x03B686EC LDR X0, [X0 + 0xE40]
	0x03B686F0 BL 0x1C16CF4
	0x03B686F4 ADRP X0, 0x5F2000
	0x03B686F8 LDR X0, [X0 + 0xE50]
	0x03B686FC BL 0x1C16CF4
	0x03B68700 ADRP X0, 0x5F2000
	0x03B68704 LDR X0, [X0 + 0x368]
	0x03B68708 BL 0x1C16CF4
	0x03B6870C ADRP X0, 0x5F3000
	0x03B68710 LDR X0, [X0 + 0x480]
	0x03B68714 BL 0x1C16CF4
	0x03B68718 MOVZ W8, 0x1
	0x03B6871C STRB W8, [X21 + 0x9CD]
	0x03B68720 MOVZ W9, 0xCCCD
	0x03B68724 ADRP X22, 0x5F2000
	0x03B68728 ADRP X21, 0x5F2000
	0x03B6872C ADRP X29, 0x5F2000
	0x03B68730 ADRP X28, 0x5F2000
	0x03B68734 ADRP X27, 0x5F2000
	0x03B68738 ADRP X25, 0x5F3000
	0x03B6873C MOVZ W23, 0x1
	0x03B68740 FMOV V0.2S, 0x0
	0x03B68744 MOVZ W8, 0xBF800000
	0x03B68748 MOVK W9, 0x3DCC0000
	0x03B6874C LDR X22, [X22 + 0xE40]
	0x03B68750 LDR X21, [X21 + 0xE48]
	0x03B68754 LDR X29, [X29 + 0x830]
	0x03B68758 LDR X28, [X28 + 0x828]
	0x03B6875C LDR X27, [X27 + 0xE50]
	0x03B68760 LDR X25, [X25 + 0x468]
	0x03B68764 STRB W23, [X19 + 0x1A8]
	0x03B68768 STRB W23, [X19 + 0x1C0]
	0x03B6876C STR D0, [X20]
	0x03B68770 STR W8, [X19 + 0x1CC]
	0x03B68774 STR W9, [X19 + 0x1D4]
	0x03B68778 ADRP X24, 0x870000
	0x03B6877C ADRP X26, 0x5F3000
	0x03B68780 LDRB W8, [X24 + 0x85B]
	0x03B68784 LDR X26, [X26 + 0x480]
	0x03B68788 CBNZ W8, 0x3B6879C
	0x03B6878C ADRP X0, 0x58B000
	0x03B68790 LDR X0, [X0 + 0x5A0]
	0x03B68794 BL 0x1C16CF4
	0x03B68798 STRB W23, [X24 + 0x85B]
	0x03B6879C ADRP X8, 0x58B000
	0x03B687A0 LDR X8, [X8 + 0x5A0]
	0x03B687A4 LDR X8, [X8]
	0x03B687A8 LDR X9, [X8 + 0xB8]
	0x03B687AC LDUR V0, [X9 + 0xC]
	0x03B687B0 LDR V1, [X9 + 0x14]
	0x03B687B4 STR D0, [X20 + 0x18]
	0x03B687B8 STR S1, [X19 + 0x1E4]
	0x03B687BC LDR X8, [X8 + 0xB8]
	0x03B687C0 LDUR V0, [X8 + 0xC]
	0x03B687C4 LDR V1, [X8 + 0x14]
	0x03B687C8 STR D0, [X19 + 0x1E8]
	0x03B687CC STR S1, [X19 + 0x1F0]
	0x03B687D0 LDR X0, [X22]
	0x03B687D4 BL 0x1C16F10
	0x03B687D8 LDR X1, [X21]
	0x03B687DC MOV X20, X0
	0x03B687E0 BL 0x301B7C4
	0x03B687E4 STR X20, [X19 + 0x1F8]
	0x03B687E8 LDR X0, [X29]
	0x03B687EC BL 0x1C16F10
	0x03B687F0 LDR X1, [X28]
	0x03B687F4 MOV X20, X0
	0x03B687F8 BL 0x2DBDE08
	0x03B687FC STR X20, [X19 + 0x200]
	0x03B68800 LDR X0, [X27]
	0x03B68804 BL 0x1C16F10
	0x03B68808 MOV X1, X31
	0x03B6880C MOV X20, X0
	0x03B68810 BL 0x3B915A4
	0x03B68814 STR X20, [X19 + 0x208]
	0x03B68818 LDR X0, [X25]
	0x03B6881C BL 0x1C16F10
	0x03B68820 ADRP X8, 0x5F3000
	0x03B68824 LDR X8, [X8 + 0x460]
	0x03B68828 MOV X20, X0
	0x03B6882C LDR X1, [X8]
	0x03B68830 BL 0x2AA4804
	0x03B68834 STR X20, [X19 + 0x210]
	0x03B68838 LDR X0, [X26]
	0x03B6883C BL 0x1C16F10
	0x03B68840 MOV X1, X31
	0x03B68844 MOV X20, X0
	0x03B68848 BL 0x3BB0D5C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x87B000
	006 Move W8, [X21+2498]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x5F3000
	014 Move X0, [X0+352]
	015 Call 0x1C17CF4
	016 Move X0, 0x5F3000
	017 Move X0, [X0+360]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2498], W8
	021 Move X0, X20
	022 Move X1, X19
	023 Move X2, X31
	024 Call XRBaseInteractor.CanSelect, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {92}
	029 Move X0, X20
	030 Move X1, X31
	031 Call XRBaseInteractor.get_hasSelection, X0
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {66}
	036 Compare X19, 0
	037 JumpIfEqual {112}
	038 Move X10, 0x5F3000
	039 Move X8, [X19]
	040 Move X10, [X10+352]
	041 NotImplemented "Instruction LDRH not yet implemented."
	042 Move X1, [X10]
	043 Compare X9, 0
	044 JumpIfEqual {51}
	045 Move X10, [X8+176]
	046 Add X10, X10, 8
	047 NotImplemented "Instruction LDUR not yet implemented."
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Subtract X9, X9, 1
	050 Add X10, X10, 16
	051 Move W2, 6
	052 Move X0, X19
	053 Call 0x1C5D788
	054 Move W9, [X10]
	055 Add W9, W9, 6
	056 Add X8, X8, W9
	057 Add X0, X8, 312
	058 Move X8, [X0]
	059 Move X1, [X0+8]
	060 Move X0, X19
	061 NotImplemented "Instruction BLR not yet implemented."
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {93}
	066 Move X0, X20
	067 Move X1, X19
	068 Move X2, X31
	069 Call XRBaseInteractor.IsSelecting, X0, X1
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {92}
	074 Compare X19, 0
	075 JumpIfEqual {112}
	076 Move X10, 0x5F3000
	077 Move X8, [X19]
	078 Move X10, [X10+352]
	079 NotImplemented "Instruction LDRH not yet implemented."
	080 Move X1, [X10]
	081 Compare X9, 0
	082 JumpIfEqual {89}
	083 Move X10, [X8+176]
	084 Add X10, X10, 8
	085 NotImplemented "Instruction LDUR not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Subtract X9, X9, 1
	088 Add X10, X10, 16
	089 Move W2, 4
	090 Move X0, X19
	091 Call 0x1C5D788
	092 Move W0, W31
	093 Move W0, 1
	094 Move W9, [X10]
	095 Add W9, W9, 4
	096 Add X8, X8, W9
	097 Add X0, X8, 312
	098 Move X8, [X0]
	099 Move X1, [X0+8]
	100 Move X0, X19
	101 NotImplemented "Instruction BLR not yet implemented."
	102 Compare X0, 0
	103 JumpIfEqual {112}
	104 Move W8, [X0+24]
	105 NotImplemented "Instruction CMP not yet implemented."
	106 NotImplemented "Instruction CSET not yet implemented."
	107 Move X20, [X31+16]
	108 Move X19, [X31+24]
	109 Move X30, [X31+32]
	110 Move X21, [X31+40]
	111 Return X0
	112 Call 0x1C17F20

Method: System.Boolean ShouldDrawHoverMesh(UnityEngine.MeshFilter meshFilter, UnityEngine.Renderer meshRenderer, UnityEngine.Camera mainCamera)

Disassembly:
	0x03B6884C STR X20, [X19 + 0x220]
	0x03B68850 ADRP X8, 0x5F3000
	0x03B68854 LDR X8, [X8 + 0x478]
	0x03B68858 LDR X0, [X8]
	0x03B6885C BL 0x1C16F10
	0x03B68860 ADRP X8, 0x5F3000
	0x03B68864 LDR X8, [X8 + 0x470]
	0x03B68868 MOV W1, W31
	0x03B6886C MOV X20, X0
	0x03B68870 LDR X2, [X8]
	0x03B68874 BL 0x2D57B9C
	0x03B68878 STR X20, [X19 + 0x228]
	0x03B6887C ADRP X8, 0x5F2000
	0x03B68880 LDR X8, [X8 + 0x368]
	0x03B68884 LDR X0, [X8]
	0x03B68888 LDR W8, [X0 + 0xE0]
	0x03B6888C CBNZ W8, 0x3B68894
	0x03B68890 BL 0x1C16DFC
	0x03B68894 MOV X0, X19
	0x03B68898 LDP X20, X19, [X31 + 0x50]
	0x03B6889C LDP X22, X21, [X31 + 0x40]
	0x03B688A0 LDP X24, X23, [X31 + 0x30]
	0x03B688A4 LDP X26, X25, [X31 + 0x20]
	0x03B688A8 LDP X28, X27, [X31 + 0x10]
	0x03B688AC MOV X1, X31
	0x03B688B0 LDP X29, X30, [X31], #0x60
	0x03B688B4 B 0x3B514A8
	0x03B688B8 STP X30, X23, [X31 - 0x30]!
	0x03B688BC STP X22, X21, [X31 + 0x10]
	0x03B688C0 STP X20, X19, [X31 + 0x20]
	0x03B688C4 ADRP X22, 0x87A000
	0x03B688C8 ADRP X23, 0x5F3000
	0x03B688CC ADRP X19, 0x5F3000
	0x03B688D0 ADRP X20, 0x5F2000
	0x03B688D4 ADRP X21, 0x5F2000
	0x03B688D8 LDRB W8, [X22 + 0x9CE]
	0x03B688DC LDR X23, [X23 + 0x488]
	0x03B688E0 LDR X19, [X19 + 0x490]
	0x03B688E4 LDR X20, [X20 + 0x7C8]
	0x03B688E8 LDR X21, [X21 + 0xE58]
	0x03B688EC TBNZ X8, 0x0, 0x3B68928
	0x03B688F0 ADRP X0, 0x5F3000
	0x03B688F4 LDR X0, [X0 + 0x490]
	0x03B688F8 BL 0x1C16CF4
	0x03B688FC ADRP X0, 0x5F3000
	0x03B68900 LDR X0, [X0 + 0x488]
	0x03B68904 BL 0x1C16CF4
	0x03B68908 ADRP X0, 0x5F2000
	0x03B6890C LDR X0, [X0 + 0xE58]
	0x03B68910 BL 0x1C16CF4
	0x03B68914 ADRP X0, 0x5F2000
	0x03B68918 LDR X0, [X0 + 0x7C8]
	0x03B6891C BL 0x1C16CF4
	0x03B68920 MOVZ W8, 0x1
	0x03B68924 STRB W8, [X22 + 0x9CE]
	0x03B68928 LDR X0, [X23]
	0x03B6892C BL 0x1C16F10
	0x03B68930 LDR X1, [X19]
	0x03B68934 MOV X19, X0
	0x03B68938 BL 0x301B7C4
	0x03B6893C LDR X8, [X20]
	0x03B68940 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x87B000
	007 Move W8, [X22+2499]
	008 Move X21, X3
	009 Move X19, X2
	010 Move X20, X1
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x58C000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+2499], W8
	020 Compare X21, 0
	021 JumpIfEqual {87}
	022 Move X22, 0x58C000
	023 Move X22, [X22+1432]
	024 Move X0, X21
	025 Move X1, X31
	026 Call Camera.get_cullingMask, X0
	027 Move X8, [X22]
	028 Move W21, W0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Inequality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {80}
	042 Compare X20, 0
	043 JumpIfEqual {87}
	044 Move X0, X20
	045 Move X1, X31
	046 Call Component.get_gameObject, X0
	047 Compare X0, 0
	048 JumpIfEqual {87}
	049 Move X1, X31
	050 Call GameObject.get_layer, X0
	051 NotImplemented "Instruction LSRV not yet implemented."
	052 Move TEMP, X8
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {80}
	056 Move X0, [X22]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move X0, X19
	062 Move X1, X31
	063 Move X2, X31
	064 Call Object.op_Inequality, X0, X1
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {80}
	069 Compare X19, 0
	070 JumpIfEqual {87}
	071 Move X0, X19
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Move X1, X31
	077 Move X30, [X31+48]
	078 Call Renderer.get_enabled, X0
	079 Return X0
	080 Move X20, [X31+32]
	081 Move X19, [X31+40]
	082 Move X22, [X31+16]
	083 Move X21, [X31+24]
	084 Move W0, W31
	085 Move X30, [X31+48]
	086 Return X0
	087 Call 0x1C17F20

Method: System.Void OnRegistered(UnityEngine.XR.Interaction.Toolkit.InteractorRegisteredEventArgs args)

Disassembly:
	0x03B68944 STR X19, [X8]
	0x03B68948 LDR X0, [X21]
	0x03B6894C BL 0x1C16F10
	0x03B68950 MOV X1, X31
	0x03B68954 MOV X19, X0
	0x03B68958 BL 0x3C3A62C
	0x03B6895C LDR X8, [X20]
	0x03B68960 LDP X22, X21, [X31 + 0x10]
	0x03B68964 LDR X8, [X8 + 0xB8]
	0x03B68968 STR X19, [X8 + 0x8]
	0x03B6896C LDP X20, X19, [X31 + 0x20]
	0x03B68970 LDP X30, X23, [X31], #0x30
	0x03B68974 RET
	0x03B68978 STP X30, X27, [X31 - 0x50]!
	0x03B6897C STP X26, X25, [X31 + 0x10]
	0x03B68980 STP X24, X23, [X31 + 0x20]
	0x03B68984 STP X22, X21, [X31 + 0x30]
	0x03B68988 STP X20, X19, [X31 + 0x40]
	0x03B6898C ADRP X26, 0x87A000
	0x03B68990 ADRP X27, 0x5F3000
	0x03B68994 ADRP X19, 0x5F3000
	0x03B68998 ADRP X25, 0x5F3000
	0x03B6899C ADRP X24, 0x5EC000
	0x03B689A0 ADRP X23, 0x5EC000
	0x03B689A4 ADRP X22, 0x5F3000
	0x03B689A8 ADRP X21, 0x58F000
	0x03B689AC ADRP X20, 0x5B3000
	0x03B689B0 LDR X27, [X27 + 0x498]
	0x03B689B4 LDR X19, [X19 + 0x398]
	0x03B689B8 LDR X25, [X25 + 0x4A0]
	0x03B689BC LDRB W8, [X26 + 0x9CF]
	0x03B689C0 LDR X24, [X24 + 0x800]
	0x03B689C4 LDR X23, [X23 + 0x840]
	0x03B689C8 LDR X22, [X22 + 0x4A8]
	0x03B689CC LDR X21, [X21 + 0x220]
	0x03B689D0 LDR X20, [X20 + 0x2E0]
	0x03B689D4 TBNZ X8, 0x0, 0x3B68A40
	0x03B689D8 ADRP X0, 0x5F3000
	0x03B689DC LDR X0, [X0 + 0x398]
	0x03B689E0 BL 0x1C16CF4
	0x03B689E4 ADRP X0, 0x5EC000
	0x03B689E8 LDR X0, [X0 + 0x800]
	0x03B689EC BL 0x1C16CF4
	0x03B689F0 ADRP X0, 0x5B3000
	0x03B689F4 LDR X0, [X0 + 0x2E0]
	0x03B689F8 BL 0x1C16CF4
	0x03B689FC ADRP X0, 0x58F000
	0x03B68A00 LDR X0, [X0 + 0x220]
	0x03B68A04 BL 0x1C16CF4
	0x03B68A08 ADRP X0, 0x5F3000
	0x03B68A0C LDR X0, [X0 + 0x498]
	0x03B68A10 BL 0x1C16CF4
	0x03B68A14 ADRP X0, 0x5EC000
	0x03B68A18 LDR X0, [X0 + 0x840]
	0x03B68A1C BL 0x1C16CF4
	0x03B68A20 ADRP X0, 0x5F3000
	0x03B68A24 LDR X0, [X0 + 0x4A0]
	0x03B68A28 BL 0x1C16CF4
	0x03B68A2C ADRP X0, 0x5F3000
	0x03B68A30 LDR X0, [X0 + 0x4A8]
	0x03B68A34 BL 0x1C16CF4
	0x03B68A38 MOVZ W8, 0x1
	0x03B68A3C STRB W8, [X26 + 0x9CF]
	0x03B68A40 LDR X0, [X27]
	0x03B68A44 MOV X1, X31
	0x03B68A48 BL 0x3C124EC
	0x03B68A4C LDR X8, [X19]
	0x03B68A50 MOV X1, X31
	0x03B68A54 LDR X8, [X8 + 0xB8]
	0x03B68A58 STR W0, [X8]
	0x03B68A5C LDR X0, [X25]
	0x03B68A60 BL 0x3C124EC
	0x03B68A64 LDR X8, [X19]
	0x03B68A68 MOV X1, X31
	0x03B68A6C LDR X8, [X8 + 0xB8]
	0x03B68A70 STR W0, [X8 + 0x4]
	0x03B68A74 LDR X0, [X24]
	0x03B68A78 BL 0x3C124EC
	0x03B68A7C LDR X8, [X19]
	0x03B68A80 MOV X1, X31
	0x03B68A84 LDR X8, [X8 + 0xB8]
	0x03B68A88 STR W0, [X8 + 0x8]
	0x03B68A8C LDR X0, [X23]
	0x03B68A90 BL 0x3C124EC
	0x03B68A94 LDR X8, [X19]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x87B000
	009 Move W8, [X21+2500]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x5F3000
	017 Move X0, [X0+584]
	018 Call 0x1C17CF4
	019 Move X0, 0x5F3000
	020 Move X0, [X0+592]
	021 Call 0x1C17CF4
	022 Move X0, 0x5F3000
	023 Move X0, [X0+3616]
	024 Call 0x1C17CF4
	025 Move X0, 0x5F4000
	026 Move X0, [X0+1032]
	027 Call 0x1C17CF4
	028 Move X0, 0x5F4000
	029 Move X0, [X0+1040]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+2500], W8
	033 Move X0, X20
	034 Move X1, X19
	035 Move X2, X31
	036 Call XRBaseInteractor.OnRegistered, X0, X1
	037 Compare X19, 0
	038 JumpIfEqual {100}
	039 Move X8, 0x5F3000
	040 Move X8, [X8+584]
	041 Move X22, 0x5F4000
	042 Move X21, [X19+16]
	043 Move X0, [X8]
	044 Move X22, [X22+1032]
	045 Call 0x1C17F10
	046 Move X2, [X22]
	047 Move X1, X20
	048 Move X3, X31
	049 Move X22, X0
	050 Call Action`1<Object>..ctor, X0, X1, X2
	051 Compare X21, 0
	052 JumpIfEqual {100}
	053 Move X23, 0x5F3000
	054 Move X24, 0x5F4000
	055 Move X23, [X23+592]
	056 Move X24, [X24+1040]
	057 Move X0, X21
	058 Move X1, X22
	059 Call XRInteractionManager.add_interactableRegistered, X0, X1
	060 Move X0, [X23]
	061 Move X21, [X19+16]
	062 Call 0x1C17F10
	063 Move X2, [X24]
	064 Move X1, X20
	065 Move X3, X31
	066 Move X22, X0
	067 Call Action`1<Object>..ctor, X0, X1, X2
	068 Compare X21, 0
	069 JumpIfEqual {100}
	070 Move X0, X21
	071 Move X1, X22
	072 Call XRInteractionManager.add_interactableUnregistered, X0, X1
	073 Move X0, [X20+520]
	074 Compare X0, 0
	075 JumpIfEqual {100}
	076 Move X8, [X19+16]
	077 Move X21, 0x5F3000
	078 Move X21, [X21+3616]
	079 Move X1, X31
	080 Move [X0+32], X8
	081 Call TriggerContactMonitor.ResolveUnassociatedColliders, X0
	082 Move X0, [X21]
	083 Move X19, [X19+16]
	084 Move X20, [X20+504]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Move X0, X19
	090 Move X1, X20
	091 Move X20, [X31+48]
	092 Move X19, [X31+56]
	093 Move X22, [X31+32]
	094 Move X21, [X31+40]
	095 Move X24, [X31+16]
	096 Move X23, [X31+24]
	097 Move X30, [X31+64]
	098 Call XRInteractionManager.RemoveAllUnregistered, X0, X1
	099 Return 
	100 Call 0x1C17F20

Method: System.Void OnUnregistered(UnityEngine.XR.Interaction.Toolkit.InteractorUnregisteredEventArgs args)

Disassembly:
	0x03B68CE0 STP X20, X19, [X31 + 0x10]
	0x03B68CE4 ADRP X20, 0x87A000
	0x03B68CE8 ADRP X21, 0x5F3000
	0x03B68CEC LDRB W8, [X20 + 0x9D2]
	0x03B68CF0 LDR X21, [X21 + 0x4B8]
	0x03B68CF4 MOV X19, X0
	0x03B68CF8 TBNZ X8, 0x0, 0x3B68D10
	0x03B68CFC ADRP X0, 0x5F3000
	0x03B68D00 LDR X0, [X0 + 0x4B8]
	0x03B68D04 BL 0x1C16CF4
	0x03B68D08 MOVZ W8, 0x1
	0x03B68D0C STRB W8, [X20 + 0x9D2]
	0x03B68D10 LDR X0, [X21]
	0x03B68D14 BL 0x25D6BC4
	0x03B68D18 CBZ X0, 0x3B68D2C
	0x03B68D1C MOV X1, X19
	0x03B68D20 LDP X20, X19, [X31 + 0x10]
	0x03B68D24 LDP X30, X21, [X31], #0x20
	0x03B68D28 B 0x3B68D30
	0x03B68D2C BL 0x1C16F20
	0x03B68D30 STP X30, X21, [X31 - 0x20]!
	0x03B68D34 STP X20, X19, [X31 + 0x10]
	0x03B68D38 LDR X8, [X0 + 0x18]
	0x03B68D3C CBZ X8, 0x3B68D84
	0x03B68D40 MOV X20, X0
	0x03B68D44 MOV X21, X1
	0x03B68D48 MOV X19, X31
	0x03B68D4C LDR W9, [X8 + 0x18]
	0x03B68D50 CMP X19, W9, SXTW
	0x03B68D54 B.GE 0x3B68D88
	0x03B68D58 CMP X19, X9
	0x03B68D5C B.CS 0x3B68D9C
	0x03B68D60 ADD X8, X8, X19, 0x3, LSL
	0x03B68D64 LDR X1, [X8 + 0x20]
	0x03B68D68 MOV X0, X21
	0x03B68D6C MOV X2, X31
	0x03B68D70 BL 0x3226C14
	0x03B68D74 TBNZ X0, 0x0, 0x3B68D8C
	0x03B68D78 LDR X8, [X20 + 0x18]
	0x03B68D7C ADD X19, X19, 0x1
	0x03B68D80 CBNZ X8, 0x3B68D4C
	0x03B68D84 BL 0x1C16F20
	0x03B68D88 MOVN W19, 0x0
	0x03B68D8C MOV W0, W19
	0x03B68D90 LDP X20, X19, [X31 + 0x10]
	0x03B68D94 LDP X30, X21, [X31], #0x20
	0x03B68D98 RET
	0x03B68D9C BL 0x1C16F28
	0x03B68DA0 STP X30, X23, [X31 - 0x30]!
	0x03B68DA4 STP X22, X21, [X31 + 0x10]
	0x03B68DA8 STP X20, X19, [X31 + 0x20]
	0x03B68DAC CBZ X0, 0x3B68E24
	0x03B68DB0 LDR X8, [X0 + 0x18]
	0x03B68DB4 MOV X19, X0
	0x03B68DB8 CMP W8, 0x1
	0x03B68DBC B.LT 0x3B68E08
	0x03B68DC0 MOV X21, X31
	0x03B68DC4 MOV W20, W31
	0x03B68DC8 AND X8, X8, 0x0
	0x03B68DCC ADD X22, X19, 0x20
	0x03B68DD0 MOVZ W23, 0x1
	0x03B68DD4 CMP X21, W8, UXTW
	0x03B68DD8 B.CS 0x3B68E20
	0x03B68DDC LDR X0, [X22, X21, LSL #3]
	0x03B68DE0 BL 0x3B68CDC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x87B000
	009 Move W8, [X21+2501]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x5F3000
	017 Move X0, [X0+584]
	018 Call 0x1C17CF4
	019 Move X0, 0x5F3000
	020 Move X0, [X0+592]
	021 Call 0x1C17CF4
	022 Move X0, 0x5F4000
	023 Move X0, [X0+1032]
	024 Call 0x1C17CF4
	025 Move X0, 0x5F4000
	026 Move X0, [X0+1040]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+2501], W8
	030 Move X0, X19
	031 Move X1, X20
	032 Move X2, X31
	033 Call XRBaseInteractor.OnUnregistered, X0, X1
	034 Compare X20, 0
	035 JumpIfEqual {78}
	036 Move X8, 0x5F3000
	037 Move X8, [X8+584]
	038 Move X22, 0x5F4000
	039 Move X21, [X20+16]
	040 Move X0, [X8]
	041 Move X22, [X22+1032]
	042 Call 0x1C17F10
	043 Move X2, [X22]
	044 Move X1, X19
	045 Move X3, X31
	046 Move X22, X0
	047 Call Action`1<Object>..ctor, X0, X1, X2
	048 Compare X21, 0
	049 JumpIfEqual {78}
	050 Move X23, 0x5F3000
	051 Move X24, 0x5F4000
	052 Move X23, [X23+592]
	053 Move X24, [X24+1040]
	054 Move X0, X21
	055 Move X1, X22
	056 Call XRInteractionManager.remove_interactableRegistered, X0, X1
	057 Move X0, [X23]
	058 Move X20, [X20+16]
	059 Call 0x1C17F10
	060 Move X2, [X24]
	061 Move X1, X19
	062 Move X3, X31
	063 Move X21, X0
	064 Call Action`1<Object>..ctor, X0, X1, X2
	065 Compare X20, 0
	066 JumpIfEqual {78}
	067 Move X0, X20
	068 Move X1, X21
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X24, [X31+16]
	074 Move X23, [X31+24]
	075 Move X30, [X31+64]
	076 Call XRInteractionManager.remove_interactableUnregistered, X0, X1
	077 Return 
	078 Call 0x1C17F20

Method: System.Void OnInteractableRegistered(UnityEngine.XR.Interaction.Toolkit.InteractableRegisteredEventArgs args)

Disassembly:
	0x03B68F44 LDR W9, [X8 + 0x18]
	0x03B68F48 CMP X22, W9, SXTW
	0x03B68F4C B.GE 0x3B69030
	0x03B68F50 CMP X22, X9
	0x03B68F54 B.CS 0x3B69044
	0x03B68F58 ADD X8, X8, X22, 0x3, LSL
	0x03B68F5C LDR X23, [X8 + 0x20]
	0x03B68F60 MOV X1, X31
	0x03B68F64 MOV X0, X23
	0x03B68F68 BL 0x32277A8
	0x03B68F6C TBNZ X0, 0x0, 0x3B69020
	0x03B68F70 CBZ X20, 0x3B6902C
	0x03B68F74 LDR W10, [X20 + 0x1C]
	0x03B68F78 LDR X8, [X20 + 0x10]
	0x03B68F7C LDR X9, [X24]
	0x03B68F80 ADD W10, W10, 0x1
	0x03B68F84 STR W10, [X20 + 0x1C]
	0x03B68F88 CBZ X8, 0x3B6902C
	0x03B68F8C LDRSW X10, [X20 + 0x18]
	0x03B68F90 LDR W11, [X8 + 0x18]
	0x03B68F94 CMP W10, W11
	0x03B68F98 B.CS 0x3B68FB0
	0x03B68F9C ADD W9, W10, 0x1
	0x03B68FA0 ADD X8, X8, X10, 0x3, LSL
	0x03B68FA4 STR W9, [X20 + 0x18]
	0x03B68FA8 STR X23, [X8 + 0x20]
	0x03B68FAC B 0x3B68FC8
	0x03B68FB0 LDR X8, [X9 + 0x20]
	0x03B68FB4 MOV X0, X20
	0x03B68FB8 MOV X1, X23
	0x03B68FBC LDR X8, [X8 + 0xC0]
	0x03B68FC0 LDR X2, [X8 + 0x70]
	0x03B68FC4 BL 0x301BF90
	0x03B68FC8 CBZ X19, 0x3B6902C
	0x03B68FCC LDR W10, [X19 + 0x1C]
	0x03B68FD0 LDR X8, [X19 + 0x10]
	0x03B68FD4 LDR X9, [X25]
	0x03B68FD8 ADD W10, W10, 0x1
	0x03B68FDC STR W10, [X19 + 0x1C]
	0x03B68FE0 CBZ X8, 0x3B6902C
	0x03B68FE4 LDRSW X10, [X19 + 0x18]
	0x03B68FE8 LDR W11, [X8 + 0x18]
	0x03B68FEC CMP W10, W11
	0x03B68FF0 B.CS 0x3B69008
	0x03B68FF4 ADD W9, W10, 0x1
	0x03B68FF8 ADD X8, X8, X10, 0x2, LSL
	0x03B68FFC STR W9, [X19 + 0x18]
	0x03B69000 STR W22, [X8 + 0x20]
	0x03B69004 B 0x3B69020
	0x03B69008 LDR X8, [X9 + 0x20]
	0x03B6900C MOV X0, X19
	0x03B69010 MOV W1, W22
	0x03B69014 LDR X8, [X8 + 0xC0]
	0x03B69018 LDR X2, [X8 + 0x70]
	0x03B6901C BL 0x2FDC70C
	0x03B69020 LDR X8, [X21 + 0x18]
	0x03B69024 ADD X22, X22, 0x1
	0x03B69028 CBNZ X8, 0x3B68F44
	0x03B6902C BL 0x1C16F20
	0x03B69030 LDP X20, X19, [X31 + 0x30]
	0x03B69034 LDP X22, X21, [X31 + 0x20]
	0x03B69038 LDP X24, X23, [X31 + 0x10]
	0x03B6903C LDP X30, X25, [X31], #0x40
	0x03B69040 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x87B000
	006 Move W8, [X21+2502]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x5F3000
	014 Move X0, [X0+3624]
	015 Call 0x1C17CF4
	016 Move X0, 0x5F3000
	017 Move X0, [X0+3632]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2502], W8
	021 Compare X19, 0
	022 JumpIfEqual {85}
	023 Move X0, [X20+520]
	024 Compare X0, 0
	025 JumpIfEqual {85}
	026 Move X1, [X19+24]
	027 Move X2, X31
	028 Call TriggerContactMonitor.ResolveUnassociatedColliders, X0, X1
	029 Move X0, [X20+520]
	030 Compare X0, 0
	031 JumpIfEqual {85}
	032 Move X1, [X19+24]
	033 Move X2, X31
	034 Call TriggerContactMonitor.IsContacting, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {71}
	039 Move X0, [X20+504]
	040 Compare X0, 0
	041 JumpIfEqual {85}
	042 Move X8, 0x5F3000
	043 Move X1, [X19+24]
	044 Move X8, [X8+3632]
	045 Move X2, [X8]
	046 Call List`1<Object>.Contains, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {71}
	051 Move X0, [X20+504]
	052 Compare X0, 0
	053 JumpIfEqual {85}
	054 Move X9, 0x5F3000
	055 Move X1, [X19+24]
	056 Move X9, [X9+3624]
	057 Move W10, [X0+28]
	058 Move X8, [X0+16]
	059 Move X9, [X9]
	060 Add W10, W10, 1
	061 Move [X0+28], W10
	062 Compare X8, 0
	063 JumpIfEqual {85}
	064 NotImplemented "Instruction LDRSW not yet implemented."
	065 Move W11, [X8+24]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Add W9, W10, 1
	068 Add X8, X8, X10
	069 Move [X0+24], W9
	070 Move [X8+32], X1
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 Move X30, [X31+32]
	074 Move X21, [X31+40]
	075 Return 
	076 Move X8, [X9+32]
	077 Move X20, [X31+16]
	078 Move X19, [X31+24]
	079 Move X8, [X8+192]
	080 Move X2, [X8+112]
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 Call List`1<Object>.AddWithResize, X0, X1
	084 Return 
	085 Call 0x1C17F20

Method: System.Void OnInteractableUnregistered(UnityEngine.XR.Interaction.Toolkit.InteractableUnregisteredEventArgs args)

Disassembly:
	0x03B69044 BL 0x1C16F28
	0x03B69048 STR X30, [X31 - 0x20]!
	0x03B6904C STP X20, X19, [X31 + 0x10]
	0x03B69050 ADRP X20, 0x879000
	0x03B69054 LDRB W8, [X20 + 0x9D4]
	0x03B69058 MOV X19, X0
	0x03B6905C TBNZ X8, 0x0, 0x3B6908C
	0x03B69060 ADRP X0, 0x5F2000
	0x03B69064 LDR X0, [X0 + 0x4D0]
	0x03B69068 BL 0x1C16CF4
	0x03B6906C ADRP X0, 0x58A000
	0x03B69070 LDR X0, [X0 + 0xAC8]
	0x03B69074 BL 0x1C16CF4
	0x03B69078 ADRP X0, 0x5B2000
	0x03B6907C LDR X0, [X0 + 0x68]
	0x03B69080 BL 0x1C16CF4
	0x03B69084 MOVZ W8, 0x1
	0x03B69088 STRB W8, [X20 + 0x9D4]
	0x03B6908C LDR X0, [X19 + 0x18]!
	0x03B69090 CBNZ X0, 0x3B690B0
	0x03B69094 ADRP X8, 0x58A000
	0x03B69098 LDR X8, [X8 + 0xAC8]
	0x03B6909C MOVZ W1, 0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x87A000
	006 Move W8, [X21+2503]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x5F2000
	014 Move X0, [X0+3640]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2503], W8
	018 Compare X19, 0
	019 JumpIfEqual {33}
	020 Move X0, [X20+504]
	021 Compare X0, 0
	022 JumpIfEqual {33}
	023 Move X8, 0x5F2000
	024 Move X8, [X8+3640]
	025 Move X1, [X19+24]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X2, [X8]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call List`1<Object>.Remove, X0, X1
	032 Return 
	033 Call 0x1C17F20

Method: System.Void OnContactAdded(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)

Disassembly:
	0x03B690A0 LDR X0, [X8]
	0x03B690A4 BL 0x1C16D6C
	0x03B690A8 STR X0, [X19]
	0x03B690AC CBZ X0, 0x3B69124
	0x03B690B0 LDR W8, [X0 + 0x18]
	0x03B690B4 CMP W8, 0x20
	0x03B690B8 B.EQ 0x3B690DC
	0x03B690BC ADRP X8, 0x5F2000
	0x03B690C0 LDR X8, [X8 + 0x4D0]
	0x03B690C4 MOVZ W1, 0x20
	0x03B690C8 MOV X0, X19
	0x03B690CC LDR X2, [X8]
	0x03B690D0 BL 0x2142E6C
	0x03B690D4 LDR X0, [X19]
	0x03B690D8 CBZ X0, 0x3B69124
	0x03B690DC LDR W8, [X0 + 0x18]
	0x03B690E0 CBZ W8, 0x3B69128
	0x03B690E4 ADRP X20, 0x5B2000
	0x03B690E8 LDR X20, [X20 + 0x68]
	0x03B690EC LDR X0, [X0 + 0x20]
	0x03B690F0 MOV X2, X31
	0x03B690F4 LDR X1, [X20]
	0x03B690F8 BL 0x3226C14
	0x03B690FC TBNZ X0, 0x0, 0x3B69118
	0x03B69100 LDR X8, [X19]
	0x03B69104 CBZ X8, 0x3B69124
	0x03B69108 LDR W9, [X8 + 0x18]
	0x03B6910C CBZ W9, 0x3B69128
	0x03B69110 LDR X9, [X20]
	0x03B69114 STR X9, [X8 + 0x20]
	0x03B69118 LDP X20, X19, [X31 + 0x10]
	0x03B6911C LDR X30, [X31], #0x20
	0x03B69120 RET
	0x03B69124 BL 0x1C16F20
	0x03B69128 BL 0x1C16F28
	0x03B6912C RET
	0x03B69130 STP X30, X21, [X31 - 0x20]!
	0x03B69134 STP X20, X19, [X31 + 0x10]
	0x03B69138 ADRP X20, 0x879000
	0x03B6913C ADRP X21, 0x5F2000
	0x03B69140 LDRB W8, [X20 + 0x9D5]
	0x03B69144 LDR X21, [X21 + 0x4D8]
	0x03B69148 MOV X19, X0
	0x03B6914C TBNZ X8, 0x0, 0x3B69164
	0x03B69150 ADRP X0, 0x5F2000
	0x03B69154 LDR X0, [X0 + 0x4D8]
	0x03B69158 BL 0x1C16CF4
	0x03B6915C MOVZ W8, 0x1
	0x03B69160 STRB W8, [X20 + 0x9D5]
	0x03B69164 LDR X1, [X21]
	0x03B69168 MOV X0, X19
	0x03B6916C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x87A000
	006 Move W8, [X21+2504]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x5F2000
	014 Move X0, [X0+3624]
	015 Call 0x1C17CF4
	016 Move X0, 0x5F2000
	017 Move X0, [X0+3632]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2504], W8
	021 Move X0, [X20+504]
	022 Compare X0, 0
	023 JumpIfEqual {67}
	024 Move X8, 0x5F2000
	025 Move X8, [X8+3632]
	026 Move X1, X19
	027 Move X2, [X8]
	028 Call List`1<Object>.Contains, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {52}
	033 Move X0, [X20+504]
	034 Compare X0, 0
	035 JumpIfEqual {67}
	036 Move X9, 0x5F2000
	037 Move X9, [X9+3624]
	038 Move W10, [X0+28]
	039 Move X8, [X0+16]
	040 Move X9, [X9]
	041 Add W10, W10, 1
	042 Move [X0+28], W10
	043 Compare X8, 0
	044 JumpIfEqual {67}
	045 NotImplemented "Instruction LDRSW not yet implemented."
	046 Move W11, [X8+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Add W9, W10, 1
	049 Add X8, X8, X10
	050 Move [X0+24], W9
	051 Move [X8+32], X19
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return 
	057 Move X8, [X9+32]
	058 Move X1, X19
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X8, [X8+192]
	062 Move X2, [X8+112]
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 Call List`1<Object>.AddWithResize, X0, X1
	066 Return 
	067 Call 0x1C17F20

Method: System.Void OnContactRemoved(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)

Disassembly:
	0x03B69170 LDP X30, X21, [X31], #0x20
	0x03B69174 B 0x25D71B0
	0x03B69178 LDR X0, [X0 + 0x20]
	0x03B6917C RET
	0x03B69180 STR X1, [X0 + 0x20]
	0x03B69184 RET
	0x03B69188 LDR V0, [X0 + 0x28]
	0x03B6918C RET
	0x03B69190 MOVZ W8, 0x42B40000
	0x03B69194 FMOV S1, W8
	0x03B69198 FCMP S0, 0x0
	0x03B6919C FMIN S0, S0, S1
	0x03B691A0 FMOV S1, W31
	0x03B691A4 FCSEL S0, S0, S1, PL
	0x03B691A8 STR S0, [X0 + 0x28]
	0x03B691AC RET
	0x03B691B0 LDRB W0, [X0 + 0x2C]
	0x03B691B4 RET
	0x03B691B8 AND W8, W1, 0x1
	0x03B691BC STRB W8, [X0 + 0x2C]
	0x03B691C0 RET
	0x03B691C4 LDR X0, [X0 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x87A000
	006 Move W8, [X21+2505]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x5F2000
	014 Move X0, [X0+3640]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2505], W8
	018 Move X0, [X20+504]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0x5F2000
	022 Move X8, [X8+3640]
	023 Move X1, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call List`1<Object>.Remove, X0, X1
	030 Return 
	031 Call 0x1C17F20

Method: System.Void ResetCollidersAndValidTargets()

Disassembly:
	0x03B666C4 LDR X0, [X0 + 0x6C0]
	0x03B666C8 BL 0x1C16CF4
	0x03B666CC MOVZ W8, 0x1
	0x03B666D0 STRB W8, [X21 + 0x9BD]
	0x03B666D4 MOV X0, X19
	0x03B666D8 MOV X1, X20
	0x03B666DC MOV X2, X31
	0x03B666E0 BL 0x3B53AFC
	0x03B666E4 CBZ X20, 0x3B66754
	0x03B666E8 MOV X0, X20
	0x03B666EC BL 0x3B66758
	0x03B666F0 CBZ X0, 0x3B6672C
	0x03B666F4 ADRP X8, 0x5F4000
	0x03B666F8 LDR X8, [X8 + 0x6C0]
	0x03B666FC LDR X9, [X0]
	0x03B66700 MOV X1, X0
	0x03B66704 LDR X8, [X8]
	0x03B66708 LDRB W11, [X9 + 0x130]
	0x03B6670C LDRB W10, [X8 + 0x130]
	0x03B66710 CMP W11, W10
	0x03B66714 B.CC 0x3B6672C
	0x03B66718 LDR X9, [X9 + 0xC8]
	0x03B6671C ADD X9, X9, X10, 0x3, LSL
	0x03B66720 LDUR X9, [X9 - 0x8]
	0x03B66724 CMP X9, X8
	0x03B66728 B.EQ 0x3B66738
	0x03B6672C LDP X20, X19, [X31 + 0x10]
	0x03B66730 LDP X30, X21, [X31], #0x20
	0x03B66734 RET
	0x03B66738 LDR X8, [X19]
	0x03B6673C MOV X0, X19
	0x03B66740 LDP X20, X19, [X31 + 0x10]
	0x03B66744 LDR X3, [X8 + 0x7B8]
	0x03B66748 LDR X2, [X8 + 0x7C0]
	0x03B6674C LDP X30, X21, [X31], #0x20
	0x03B66750 BR X3
	0x03B66754 BL 0x1C16F20
	0x03B66758 STR X30, [X31 - 0x20]!
	0x03B6675C STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x87D000
	005 Move W8, [X20+2506]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x5F5000
	012 Move X0, [X0+1928]
	013 Call 0x1C17CF4
	014 Move X0, 0x5F5000
	015 Move X0, [X0+3584]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2506], W8
	019 Move X8, [X19+504]
	020 Compare X8, 0
	021 JumpIfEqual {49}
	022 Move W2, [X8+24]
	023 Move W9, [X8+28]
	024 Add W9, W9, 1
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move [X8+24], W31
	027 Move [X8+28], W9
	028 Move X0, [X8+16]
	029 Move W1, W31
	030 Move X3, X31
	031 Call Array.Clear, X0, X1, X2
	032 Move X0, [X19+512]
	033 Compare X0, 0
	034 JumpIfEqual {49}
	035 Move X8, 0x5F5000
	036 Move X8, [X8+1928]
	037 Move X1, [X8]
	038 Call HashSet`1<Object>.Clear, X0
	039 Move X0, [X19+520]
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X1, [X19+512]
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X2, X31
	046 Move X30, [X31+32]
	047 Call TriggerContactMonitor.UpdateStayedColliders, X0, X1
	048 Return 
	049 Call 0x1C17F20

Method: System.Boolean StartSocketSnapping(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable)

Disassembly:
	0x03B691C8 RET
	0x03B691CC STR X1, [X0 + 0x30]
	0x03B691D0 RET
	0x03B691D4 LDR V0, [X0 + 0x38]
	0x03B691D8 RET
	0x03B691DC MOVZ W8, 0x42B40000
	0x03B691E0 FMOV S1, W8
	0x03B691E4 FCMP S0, 0x0
	0x03B691E8 FMIN S0, S0, S1
	0x03B691EC FMOV S1, W31
	0x03B691F0 FCSEL S0, S0, S1, PL
	0x03B691F4 STR S0, [X0 + 0x38]
	0x03B691F8 RET
	0x03B691FC LDR V0, [X0 + 0x3C]
	0x03B69200 RET
	0x03B69204 STR S0, [X0 + 0x3C]
	0x03B69208 RET
	0x03B6920C LDR V0, [X0 + 0x40]
	0x03B69210 RET
	0x03B69214 FMOV S1, 1
	0x03B69218 FCMP S0, 0x0
	0x03B6921C FMIN S0, S0, S1
	0x03B69220 FMOV S1, W31
	0x03B69224 FCSEL S0, S0, S1, PL
	0x03B69228 STR S0, [X0 + 0x40]
	0x03B6922C RET
	0x03B69230 LDR V0, [X0 + 0x44]
	0x03B69234 RET
	0x03B69238 STR S0, [X0 + 0x44]
	0x03B6923C RET
	0x03B69240 STP X30, X21, [X31 - 0x20]!
	0x03B69244 STP X20, X19, [X31 + 0x10]
	0x03B69248 ADRP X21, 0x879000
	0x03B6924C ADRP X20, 0x58A000
	0x03B69250 LDRB W8, [X21 + 0x9D6]
	0x03B69254 LDR X20, [X20 + 0x598]
	0x03B69258 MOV X19, X0
	0x03B6925C TBNZ X8, 0x0, 0x3B692B0
	0x03B69260 ADRP X0, 0x5F2000
	0x03B69264 LDR X0, [X0 + 0x4E0]
	0x03B69268 BL 0x1C16CF4
	0x03B6926C ADRP X0, 0x58A000
	0x03B69270 LDR X0, [X0 + 0xA28]
	0x03B69274 BL 0x1C16CF4
	0x03B69278 ADRP X0, 0x5F2000
	0x03B6927C LDR X0, [X0 + 0x4E8]
	0x03B69280 BL 0x1C16CF4
	0x03B69284 ADRP X0, 0x5F2000
	0x03B69288 LDR X0, [X0 + 0x4F0]
	0x03B6928C BL 0x1C16CF4
	0x03B69290 ADRP X0, 0x58A000
	0x03B69294 LDR X0, [X0 + 0x598]
	0x03B69298 BL 0x1C16CF4
	0x03B6929C ADRP X0, 0x5F2000
	0x03B692A0 LDR X0, [X0 + 0x4F8]
	0x03B692A4 BL 0x1C16CF4
	0x03B692A8 MOVZ W8, 0x1
	0x03B692AC STRB W8, [X21 + 0x9D6]
	0x03B692B0 LDR X0, [X20]
	0x03B692B4 LDR X20, [X19 + 0x20]
	0x03B692B8 LDR W8, [X0 + 0xE0]
	0x03B692BC CBNZ W8, 0x3B692C4
	0x03B692C0 BL 0x1C16DFC
	0x03B692C4 MOV X0, X20
	0x03B692C8 MOV X1, X31
	0x03B692CC MOV X2, X31
	0x03B692D0 BL 0x3C354F8
	0x03B692D4 TBZ X0, 0x0, 0x3B69344
	0x03B692D8 LDR X0, [X19 + 0x20]
	0x03B692DC CBZ X0, 0x3B69340
	0x03B692E0 ADRP X8, 0x5F2000
	0x03B692E4 LDR X8, [X8 + 0x4E0]
	0x03B692E8 ADD X1, X19, 0x50
	0x03B692EC LDR X2, [X8]
	0x03B692F0 BL 0x21A4990
	0x03B692F4 LDR X8, [X19 + 0x30]
	0x03B692F8 AND W9, W0, 0x1
	0x03B692FC STRB W9, [X19 + 0x58]
	0x03B69300 CBZ X8, 0x3B69340
	0x03B69304 ADRP X21, 0x5F2000
	0x03B69308 LDR X21, [X21 + 0x4F0]
	0x03B6930C MOV W20, W31
	0x03B69310 LDR W9, [X8 + 0x18]
	0x03B69314 CMP W20, W9
	0x03B69318 B.GE 0x3B693A4
	0x03B6931C LDR X2, [X21]
	0x03B69320 MOV X0, X8
	0x03B69324 MOV W1, W20
	0x03B69328 BL 0x301BCCC
	0x03B6932C CBZ X0, 0x3B69340
	0x03B69330 BL 0x3B693B0
	0x03B69334 LDR X8, [X19 + 0x30]
	0x03B69338 ADD W20, W20, 0x1
	0x03B6933C CBNZ X8, 0x3B69310
	0x03B69340 BL 0x1C16F20
	0x03B69344 ADRP X8, 0x5F2000
	0x03B69348 LDR X8, [X8 + 0x4F8]
	0x03B6934C MOV X1, X19
	0x03B69350 MOV X2, X31
	0x03B69354 LDR X0, [X8]
	0x03B69358 BL 0x321EFD0
	0x03B6935C ADRP X8, 0x58A000
	0x03B69360 LDR X8, [X8 + 0xA28]
	0x03B69364 MOV X20, X0
	0x03B69368 LDR X8, [X8]
	0x03B6936C LDR W9, [X8 + 0xE0]
	0x03B69370 CBNZ W9, 0x3B6937C
	0x03B69374 MOV X0, X8
	0x03B69378 BL 0x1C16DFC
	0x03B6937C MOV X0, X20
	0x03B69380 MOV X1, X19
	0x03B69384 MOV X2, X31
	0x03B69388 BL 0x3C065A4
	0x03B6938C MOV X0, X19
	0x03B69390 LDP X20, X19, [X31 + 0x10]
	0x03B69394 MOV W1, W31
	0x03B69398 MOV X2, X31
	0x03B6939C LDP X30, X21, [X31], #0x20
	0x03B693A0 B 0x3C32410
	0x03B693A4 LDP X20, X19, [X31 + 0x10]
	0x03B693A8 LDP X30, X21, [X31], #0x20
	0x03B693AC RET
	0x03B693B0 STP X30, X25, [X31 - 0x40]!
	0x03B693B4 STP X24, X23, [X31 + 0x10]
	0x03B693B8 STP X22, X21, [X31 + 0x20]
	0x03B693BC STP X20, X19, [X31 + 0x30]
	0x03B693C0 ADRP X20, 0x879000
	0x03B693C4 LDRB W8, [X20 + 0x9E0]
	0x03B693C8 MOV X19, X0
	0x03B693CC TBNZ X8, 0x0, 0x3B6945C
	0x03B693D0 ADRP X0, 0x5F2000
	0x03B693D4 LDR X0, [X0 + 0x500]
	0x03B693D8 BL 0x1C16CF4
	0x03B693DC ADRP X0, 0x58A000
	0x03B693E0 LDR X0, [X0 + 0xA28]
	0x03B693E4 BL 0x1C16CF4
	0x03B693E8 ADRP X0, 0x58A000
	0x03B693EC LDR X0, [X0 + 0xA58]
	0x03B693F0 BL 0x1C16CF4
	0x03B693F4 ADRP X0, 0x5F1000
	0x03B693F8 LDR X0, [X0 + 0x2F8]
	0x03B693FC BL 0x1C16CF4
	0x03B69400 ADRP X0, 0x5F2000
	0x03B69404 LDR X0, [X0 + 0x508]
	0x03B69408 BL 0x1C16CF4
	0x03B6940C ADRP X0, 0x5F1000
	0x03B69410 LDR X0, [X0 + 0x328]
	0x03B69414 BL 0x1C16CF4
	0x03B69418 ADRP X0, 0x5F2000
	0x03B6941C LDR X0, [X0 + 0x510]
	0x03B69420 BL 0x1C16CF4
	0x03B69424 ADRP X0, 0x5F2000
	0x03B69428 LDR X0, [X0 + 0x518]
	0x03B6942C BL 0x1C16CF4
	0x03B69430 ADRP X0, 0x5F2000
	0x03B69434 LDR X0, [X0 + 0x520]
	0x03B69438 BL 0x1C16CF4
	0x03B6943C ADRP X0, 0x5F1000
	0x03B69440 LDR X0, [X0 + 0xD08]
	0x03B69444 BL 0x1C16CF4
	0x03B69448 ADRP X0, 0x5F2000
	0x03B6944C LDR X0, [X0 + 0x2E8]
	0x03B69450 BL 0x1C16CF4
	0x03B69454 MOVZ W8, 0x1
	0x03B69458 STRB W8, [X20 + 0x9E0]
	0x03B6945C LDRB W8, [X19 + 0x1A]
	0x03B69460 CBZ W8, 0x3B69478
	0x03B69464 LDP X20, X19, [X31 + 0x30]
	0x03B69468 LDP X22, X21, [X31 + 0x20]
	0x03B6946C LDP X24, X23, [X31 + 0x10]
	0x03B69470 LDP X30, X25, [X31], #0x40
	0x03B69474 RET
	0x03B69478 ADRP X21, 0x5F2000
	0x03B6947C LDR X20, [X19 + 0x10]
	0x03B69480 LDR X21, [X21 + 0x508]
	0x03B69484 MOV X0, X20
	0x03B69488 LDR X1, [X21]
	0x03B6948C BL 0x1C16E00
	0x03B69490 STR X0, [X19 + 0x20]
	0x03B69494 LDR X1, [X21]
	0x03B69498 MOV X0, X20
	0x03B6949C BL 0x1C16E00
	0x03B694A0 ADRP X22, 0x5F1000
	0x03B694A4 LDR X20, [X19 + 0x10]
	0x03B694A8 LDR X22, [X22 + 0x328]
	0x03B694AC MOV X0, X20
	0x03B694B0 LDR X1, [X22]
	0x03B694B4 BL 0x1C16E00
	0x03B694B8 STR X0, [X19 + 0x28]
	0x03B694BC LDR X1, [X22]
	0x03B694C0 MOV X0, X20
	0x03B694C4 BL 0x1C16E00
	0x03B694C8 LDR X20, [X19 + 0x20]
	0x03B694CC CBZ X20, 0x3B69518
	0x03B694D0 LDR X8, [X19 + 0x28]
	0x03B694D4 CBZ X8, 0x3B69518
	0x03B694D8 LDR X8, [X20]
	0x03B694DC LDR X1, [X21]
	0x03B694E0 LDRH W9, [X8 + 0x12E]
	0x03B694E4 CBZ X9, 0x3B69508
	0x03B694E8 LDR X10, [X8 + 0xB0]
	0x03B694EC ADD X10, X10, 0x8
	0x03B694F0 LDUR X11, [X10 - 0x8]
	0x03B694F4 CMP X11, X1
	0x03B694F8 B.EQ 0x3B69554
	0x03B694FC SUBS X9, X9, 0x1
	0x03B69500 ADD X10, X10, 0x10
	0x03B69504 B.NE 0x3B694F0
	0x03B69508 MOV X0, X20
	0x03B6950C MOV W2, W31
	0x03B69510 BL 0x1C5C788
	0x03B69514 B 0x3B69560
	0x03B69518 ADRP X8, 0x58A000
	0x03B6951C LDR X8, [X8 + 0xA28]
	0x03B69520 LDR X0, [X8]
	0x03B69524 LDR W8, [X0 + 0xE0]
	0x03B69528 CBNZ W8, 0x3B69530
	0x03B6952C BL 0x1C16DFC
	0x03B69530 ADRP X8, 0x5F2000
	0x03B69534 LDR X8, [X8 + 0x510]
	0x03B69538 LDP X20, X19, [X31 + 0x30]
	0x03B6953C LDP X22, X21, [X31 + 0x20]
	0x03B69540 LDP X24, X23, [X31 + 0x10]
	0x03B69544 LDR X0, [X8]
	0x03B69548 MOV X1, X31
	0x03B6954C LDP X30, X25, [X31], #0x40
	0x03B69550 B 0x3C06A04
	0x03B69554 LDRSW X9, [X10]
	0x03B69558 ADD X8, X8, X9, 0x4, LSL
	0x03B6955C ADD X0, X8, 0x138
	0x03B69560 LDP X8, X1, [X0]
	0x03B69564 MOV X0, X20
	0x03B69568 BLR X8
	0x03B6956C LDR X20, [X19 + 0x20]
	0x03B69570 STR X0, [X19 + 0x48]
	0x03B69574 CBZ X20, 0x3B69804
	0x03B69578 LDR X8, [X20]
	0x03B6957C LDR X1, [X21]
	0x03B69580 LDRH W9, [X8 + 0x12E]
	0x03B69584 CBZ X9, 0x3B695A8
	0x03B69588 LDR X10, [X8 + 0xB0]
	0x03B6958C ADD X10, X10, 0x8
	0x03B69590 LDUR X11, [X10 - 0x8]
	0x03B69594 CMP X11, X1
	0x03B69598 B.EQ 0x3B695B8
	0x03B6959C SUBS X9, X9, 0x1
	0x03B695A0 ADD X10, X10, 0x10
	0x03B695A4 B.NE 0x3B69590
	0x03B695A8 MOVZ W2, 0x1
	0x03B695AC MOV X0, X20
	0x03B695B0 BL 0x1C5C788
	0x03B695B4 B 0x3B695C8
	0x03B695B8 LDR W9, [X10]
	0x03B695BC ADD W9, W9, 0x1
	0x03B695C0 ADD X8, X8, W9, 0x4, SXTW
	0x03B695C4 ADD X0, X8, 0x138
	0x03B695C8 LDP X8, X1, [X0]
	0x03B695CC MOV X0, X20
	0x03B695D0 BLR X8
	0x03B695D4 LDR X20, [X19 + 0x28]
	0x03B695D8 STR X0, [X19 + 0x50]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x87A000
	008 Move W8, [X21+2507]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {44}
	015 Move X0, 0x5F3000
	016 Move X0, [X0+1056]
	017 Call 0x1C17CF4
	018 Move X0, 0x5F3000
	019 Move X0, [X0+1064]
	020 Call 0x1C17CF4
	021 Move X0, 0x5F3000
	022 Move X0, [X0+1072]
	023 Call 0x1C17CF4
	024 Move X0, 0x5F3000
	025 Move X0, [X0+1080]
	026 Call 0x1C17CF4
	027 Move X0, 0x5F3000
	028 Move X0, [X0+1088]
	029 Call 0x1C17CF4
	030 Move X0, 0x58B000
	031 Move X0, [X0+3584]
	032 Call 0x1C17CF4
	033 Move X0, 0x5F3000
	034 Move X0, [X0+1096]
	035 Call 0x1C17CF4
	036 Move X0, 0x5F3000
	037 Move X0, [X0+1104]
	038 Call 0x1C17CF4
	039 Move X0, 0x58B000
	040 Move X0, [X0+3608]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X21+2507], W8
	044 Move X0, [X20+552]
	045 Compare X0, 0
	046 JumpIfEqual {231}
	047 Move X8, 0x5F3000
	048 Move X8, [X8+1088]
	049 Move X1, [X8]
	050 Call 0x2D58B54, X0
	051 Move X8, [X20]
	052 Move W21, W0
	053 Move X0, X20
	054 Move X9, [X8+1832]
	055 Move X1, [X8+1840]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X0, [X20+552]
	059 Compare X0, 0
	060 JumpIfEqual {231}
	061 Move X8, 0x5F3000
	062 Move X8, [X8+1080]
	063 Move X1, X19
	064 Move X2, [X8]
	065 Call 0x2D59148, X0, X1
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {71}
	070 Move W8, W31
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X8, [X20]
	073 Move X0, X20
	074 Move X9, [X8+1848]
	075 Move X1, [X8+1856]
	076 NotImplemented "Instruction BLR not yet implemented."
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {207}
	081 Move X8, [X20+552]
	082 Compare X8, 0
	083 JumpIfEqual {231}
	084 Move X21, [X8+16]
	085 Compare X21, 0
	086 JumpIfEqual {231}
	087 Move X10, 0x5F3000
	088 Move X8, [X21]
	089 Move X10, [X10+1096]
	090 NotImplemented "Instruction LDRH not yet implemented."
	091 Move X1, [X10]
	092 Compare X9, 0
	093 JumpIfEqual {100}
	094 Move X10, [X8+176]
	095 Add X10, X10, 8
	096 NotImplemented "Instruction LDUR not yet implemented."
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Subtract X9, X9, 1
	099 Add X10, X10, 16
	100 Move X0, X21
	101 Move W2, W31
	102 Call 0x1C5D788
	103 NotImplemented "Instruction LDRSW not yet implemented."
	104 Add X8, X8, X9
	105 Add X0, X8, 312
	106 Move X8, [X0]
	107 Move X1, [X0+8]
	108 Move X0, X21
	109 NotImplemented "Instruction BLR not yet implemented."
	110 Move X21, X0
	111 Compare X0, 0
	112 JumpIfEqual {232}
	113 Move X22, 0x58B000
	114 Move X23, 0x5F3000
	115 Move X22, [X22+3608]
	116 Move X23, [X23+1104]
	117 Move X8, [X21]
	118 Move X1, [X22]
	119 NotImplemented "Instruction LDRH not yet implemented."
	120 Compare X9, 0
	121 JumpIfEqual {128}
	122 Move X10, [X8+176]
	123 Add X10, X10, 8
	124 NotImplemented "Instruction LDUR not yet implemented."
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Subtract X9, X9, 1
	127 Add X10, X10, 16
	128 Move X0, X21
	129 Move W2, W31
	130 Call 0x1C5D788
	131 NotImplemented "Instruction LDRSW not yet implemented."
	132 Add X8, X8, X9
	133 Add X0, X8, 312
	134 Move X8, [X0]
	135 Move X1, [X0+8]
	136 Move X0, X21
	137 NotImplemented "Instruction BLR not yet implemented."
	138 Move TEMP, X0
	139 And TEMP, TEMP, 1
	140 Compare TEMP, 1
	141 JumpIfNotEqual {168}
	142 Move X8, [X21]
	143 Move X1, [X23]
	144 NotImplemented "Instruction LDRH not yet implemented."
	145 Compare X9, 0
	146 JumpIfEqual {153}
	147 Move X10, [X8+176]
	148 Add X10, X10, 8
	149 NotImplemented "Instruction LDUR not yet implemented."
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Subtract X9, X9, 1
	152 Add X10, X10, 16
	153 Move X0, X21
	154 Move W2, W31
	155 Call 0x1C5D788
	156 NotImplemented "Instruction LDRSW not yet implemented."
	157 Add X8, X8, X9
	158 Add X0, X8, 312
	159 Move X8, [X0]
	160 Move X1, [X0+8]
	161 Move X0, X21
	162 NotImplemented "Instruction BLR not yet implemented."
	163 Compare X0, 0
	164 JumpIfEqual {230}
	165 Move X1, [X20+544]
	166 Move X2, X31
	167 Call XRGrabInteractable.RemoveSingleGrabTransformer, X0, X1
	168 Move X22, X31
	169 Move W23, 7
	170 Compare X21, 0
	171 JumpIfEqual {195}
	172 Move X10, 0x58B000
	173 Move X8, [X21]
	174 Move X10, [X10+3584]
	175 NotImplemented "Instruction LDRH not yet implemented."
	176 Move X1, [X10]
	177 Compare X9, 0
	178 JumpIfEqual {185}
	179 Move X10, [X8+176]
	180 Add X10, X10, 8
	181 NotImplemented "Instruction LDUR not yet implemented."
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Subtract X9, X9, 1
	184 Add X10, X10, 16
	185 Move X0, X21
	186 Move W2, W31
	187 Call 0x1C5D788
	188 NotImplemented "Instruction LDRSW not yet implemented."
	189 Add X8, X8, X9
	190 Add X0, X8, 312
	191 Move X8, [X0]
	192 Move X1, [X0+8]
	193 Move X0, X21
	194 NotImplemented "Instruction BLR not yet implemented."
	195 Compare X22, 0
	196 JumpIfNotEqual {233}
	197 NotImplemented "Instruction CMP not yet implemented."
	198 Compare W23, 0
	199 JumpIfNotEqual {222}
	200 Move X0, [X20+552]
	201 Compare X0, 0
	202 JumpIfEqual {231}
	203 Move X8, 0x5F3000
	204 Move X8, [X8+1072]
	205 Move X1, [X8]
	206 Call 0x2D590EC, X0
	207 Compare X19, 0
	208 JumpIfEqual {231}
	209 Move X1, [X20+544]
	210 Move X0, X19
	211 Move X2, X31
	212 Call XRGrabInteractable.AddSingleGrabTransformer, X0, X1
	213 Move X0, [X20+552]
	214 Compare X0, 0
	215 JumpIfEqual {231}
	216 Move X8, 0x5F3000
	217 Move X8, [X8+1056]
	218 Move X1, X19
	219 Move X2, [X8]
	220 Call 0x2D58DD8, X0, X1
	221 Move W8, 1
	222 Move X20, [X31+32]
	223 Move X19, [X31+40]
	224 Move X22, [X31+16]
	225 Move X21, [X31+24]
	226 And W0, W8, 1
	227 Move X30, [X31+48]
	228 Move X23, [X31+56]
	229 Return X0
	230 Call 0x1C17F20
	231 Call 0x1C17F20
	232 Call 0x1C17F20
	233 Move X0, X22
	234 Call 0x1C17F18
	235 Move X23, X0
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Move X0, X23
	238 Call 0x3EB2AD0
	239 Move X22, [X0]
	240 Call 0x3EB2AE0
	241 Move W23, W31
	242 Compare X21, 0
	243 JumpIfNotEqual {172}
	244 Move X22, X31
	245 Move X23, X0
	246 Compare X21, 0
	247 JumpIfEqual {271}
	248 Move X10, 0x58B000
	249 Move X8, [X21]
	250 Move X10, [X10+3584]
	251 NotImplemented "Instruction LDRH not yet implemented."
	252 Move X1, [X10]
	253 Compare X9, 0
	254 JumpIfEqual {261}
	255 Move X10, [X8+176]
	256 Add X10, X10, 8
	257 NotImplemented "Instruction LDUR not yet implemented."
	258 NotImplemented "Instruction CMP not yet implemented."
	259 Subtract X9, X9, 1
	260 Add X10, X10, 16
	261 Move X0, X21
	262 Move W2, W31
	263 Call 0x1C5D788
	264 NotImplemented "Instruction LDRSW not yet implemented."
	265 Add X8, X8, X9
	266 Add X0, X8, 312
	267 Move X8, [X0]
	268 Move X1, [X0+8]
	269 Move X0, X21
	270 NotImplemented "Instruction BLR not yet implemented."
	271 Compare X22, 0
	272 JumpIfNotEqual {275}
	273 Move X0, X23
	274 Call 0x1D2D690
	275 Move X0, X22
	276 Call 0x1C17F18
	277 Call 0x1991590

Method: System.Boolean EndSocketSnapping(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable)

Disassembly:
	0x03B695DC CBZ X20, 0x3B69804
	0x03B695E0 ADRP X10, 0x5F1000
	0x03B695E4 LDR X8, [X20]
	0x03B695E8 LDR X10, [X10 + 0x2F8]
	0x03B695EC LDRH W9, [X8 + 0x12E]
	0x03B695F0 LDR X1, [X10]
	0x03B695F4 CBZ X9, 0x3B69618
	0x03B695F8 LDR X10, [X8 + 0xB0]
	0x03B695FC ADD X10, X10, 0x8
	0x03B69600 LDUR X11, [X10 - 0x8]
	0x03B69604 CMP X11, X1
	0x03B69608 B.EQ 0x3B69628
	0x03B6960C SUBS X9, X9, 0x1
	0x03B69610 ADD X10, X10, 0x10
	0x03B69614 B.NE 0x3B69600
	0x03B69618 MOVZ W2, 0x5
	0x03B6961C MOV X0, X20
	0x03B69620 BL 0x1C5C788
	0x03B69624 B 0x3B69638
	0x03B69628 LDR W9, [X10]
	0x03B6962C ADD W9, W9, 0x5
	0x03B69630 ADD X8, X8, W9, 0x4, SXTW
	0x03B69634 ADD X0, X8, 0x138
	0x03B69638 LDP X8, X1, [X0]
	0x03B6963C MOV X0, X20
	0x03B69640 BLR X8
	0x03B69644 CBZ X0, 0x3B69804

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x87A000
	006 Move W8, [X21+2508]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x5F3000
	014 Move X0, [X0+1112]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2508], W8
	018 Compare X19, 0
	019 JumpIfEqual {37}
	020 Move X1, [X20+544]
	021 Move X0, X19
	022 Move X2, X31
	023 Call XRGrabInteractable.RemoveSingleGrabTransformer, X0, X1
	024 Move X0, [X20+552]
	025 Compare X0, 0
	026 JumpIfEqual {37}
	027 Move X8, 0x5F3000
	028 Move X8, [X8+1112]
	029 Move X1, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X2, [X8]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call 0x2D58E88, X0, X1
	036 Return X0
	037 Call 0x1C17F20

Method: System.Void SyncTransformerParams()

Disassembly:
	0x03B66488 BL 0x2AA64F8
	0x03B6648C CBZ X20, 0x3B664C4
	0x03B66490 ADRP X8, 0x5F4000
	0x03B66494 LDR X8, [X8 + 0x6C0]
	0x03B66498 LDR X9, [X20]
	0x03B6649C LDR X8, [X8]
	0x03B664A0 LDRB W11, [X9 + 0x130]
	0x03B664A4 LDRB W10, [X8 + 0x130]
	0x03B664A8 CMP W11, W10
	0x03B664AC B.CC 0x3B664C4
	0x03B664B0 LDR X9, [X9 + 0xC8]
	0x03B664B4 ADD X9, X9, X10, 0x3, LSL
	0x03B664B8 LDUR X9, [X9 - 0x8]
	0x03B664BC CMP X9, X8
	0x03B664C0 B.EQ 0x3B664D0
	0x03B664C4 LDP X20, X19, [X31 + 0x10]
	0x03B664C8 LDP X30, X21, [X31], #0x20
	0x03B664CC RET
	0x03B664D0 LDR X8, [X19]
	0x03B664D4 MOV X0, X19
	0x03B664D8 MOV X1, X20
	0x03B664DC LDP X20, X19, [X31 + 0x10]
	0x03B664E0 LDR X3, [X8 + 0x7B8]
	0x03B664E4 LDR X2, [X8 + 0x7C0]
	0x03B664E8 LDP X30, X21, [X31], #0x20
	0x03B664EC BR X3
	0x03B664F0 BL 0x1C16F20
	0x03B664F4 STR X30, [X31 - 0x20]!
	0x03B664F8 STP X20, X19, [X31 + 0x10]
	0x03B664FC ADRP X20, 0x87C000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, [X0+544]
	005 Compare X20, 0
	006 JumpIfEqual {36}
	007 Move [X20+56], X0
	008 Move V0, [X0+468]
	009 Move X19, X0
	010 Move [X20+20], S0
	011 Move W8, [X0+472]
	012 Move [X20+24], W8
	013 Move V0, [X0+476]
	014 Move V1, [X0+480]
	015 Move V2, [X0+484]
	016 Move X0, X31
	017 Call float3.op_Implicit, X0
	018 Move [X20+28], S0
	019 Move [X20+36], S1
	020 Move [X20+36], S2
	021 Move V0, [X19+488]
	022 Move V1, [X19+492]
	023 Move V2, [X19+496]
	024 Move X20, [X19+544]
	025 Move X0, X31
	026 Call float3.op_Implicit, X0
	027 Compare X20, 0
	028 JumpIfEqual {36}
	029 Move [X20+40], S0
	030 Move [X20+48], S1
	031 Move [X20+48], S2
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return 
	036 Call 0x1C17F20

Method: System.Boolean CanHover(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)

Disassembly:
	0x03B69648 MOV X1, X31
	0x03B6964C MOV X20, X0
	0x03B69650 BL 0x3C32ECC
	0x03B69654 CBZ X0, 0x3B69804

ISIL:
	001 Move X8, [X0]
	002 Move X3, [X8+1336]
	003 Move X2, [X8+1344]
	004 CallNoReturn X3

Method: System.Boolean CanSelect(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)

Disassembly:
	0x03B69658 MOV X1, X31
	0x03B6965C BL 0x3C389D4
	0x03B69660 ADRP X24, 0x5F2000
	0x03B69664 LDR X24, [X24 + 0x520]

ISIL:
	001 Move X8, [X0]
	002 Move X3, [X8+1352]
	003 Move X2, [X8+1360]
	004 CallNoReturn X3

Method: System.Void .ctor()

Disassembly:
	0x03B69668 ADRP X9, 0x5F2000
	0x03B6966C LDR X9, [X9 + 0x2E8]
	0x03B69670 MOV X21, X0
	0x03B69674 LDR X8, [X24]
	0x03B69678 MOV X1, X21
	0x03B6967C LDR X2, [X9]
	0x03B69680 MOV X3, X31
	0x03B69684 MOV X0, X8
	0x03B69688 BL 0x32274B8
	0x03B6968C ADRP X25, 0x58A000
	0x03B69690 LDR X25, [X25 + 0xA58]
	0x03B69694 MOV X23, X0
	0x03B69698 LDR X8, [X25]
	0x03B6969C MOV X0, X8
	0x03B696A0 BL 0x1C16F10
	0x03B696A4 MOV X1, X23
	0x03B696A8 MOV X2, X31
	0x03B696AC MOV X22, X0
	0x03B696B0 BL 0x3C35934
	0x03B696B4 CBZ X22, 0x3B69804
	0x03B696B8 MOV X0, X22
	0x03B696BC MOV X1, X31
	0x03B696C0 BL 0x3C356F8
	0x03B696C4 STR X0, [X19 + 0x68]
	0x03B696C8 ADRP X8, 0x5F1000
	0x03B696CC LDR X8, [X8 + 0xD08]
	0x03B696D0 LDR X0, [X24]
	0x03B696D4 MOV X1, X21
	0x03B696D8 MOV X3, X31
	0x03B696DC LDR X2, [X8]
	0x03B696E0 BL 0x32274B8
	0x03B696E4 LDR X8, [X25]
	0x03B696E8 MOV X23, X0
	0x03B696EC MOV X0, X8
	0x03B696F0 BL 0x1C16F10
	0x03B696F4 MOV X1, X23
	0x03B696F8 MOV X2, X31
	0x03B696FC MOV X22, X0
	0x03B69700 BL 0x3C35934
	0x03B69704 CBZ X22, 0x3B69804
	0x03B69708 MOV X0, X22
	0x03B6970C MOV X1, X31
	0x03B69710 BL 0x3C356F8
	0x03B69714 LDR X8, [X19 + 0x48]
	0x03B69718 STR X0, [X19 + 0x70]
	0x03B6971C CBZ X8, 0x3B69804
	0x03B69720 LDR X22, [X19 + 0x68]
	0x03B69724 MOV X0, X8
	0x03B69728 MOV X1, X31
	0x03B6972C BL 0x3C3F49C
	0x03B69730 CBZ X22, 0x3B69804
	0x03B69734 MOV X1, X0
	0x03B69738 MOV X0, X22
	0x03B6973C MOV X2, X31
	0x03B69740 BL 0x3C3FD20
	0x03B69744 LDR X0, [X19 + 0x70]
	0x03B69748 CBZ X0, 0x3B69804
	0x03B6974C LDR X1, [X19 + 0x68]
	0x03B69750 MOV X2, X31
	0x03B69754 BL 0x3C3FD20
	0x03B69758 ADRP X8, 0x5F2000
	0x03B6975C LDR X8, [X8 + 0x500]
	0x03B69760 ADD X1, X19, 0x38
	0x03B69764 MOV X0, X20
	0x03B69768 LDR X2, [X8]
	0x03B6976C BL 0x21A4990
	0x03B69770 AND W8, W0, 0x1
	0x03B69774 STRB W8, [X19 + 0x40]
	0x03B69778 TBZ X0, 0x0, 0x3B697F8
	0x03B6977C ADRP X8, 0x5F2000
	0x03B69780 LDR X0, [X24]
	0x03B69784 LDR X8, [X8 + 0x518]
	0x03B69788 MOV X1, X21
	0x03B6978C MOV X3, X31
	0x03B69790 LDR X2, [X8]
	0x03B69794 BL 0x32274B8
	0x03B69798 LDR X8, [X25]
	0x03B6979C MOV X21, X0
	0x03B697A0 MOV X0, X8
	0x03B697A4 BL 0x1C16F10
	0x03B697A8 MOV X1, X21
	0x03B697AC MOV X2, X31
	0x03B697B0 MOV X20, X0
	0x03B697B4 BL 0x3C35934
	0x03B697B8 CBZ X20, 0x3B69804
	0x03B697BC MOV X0, X20
	0x03B697C0 MOV X1, X31
	0x03B697C4 BL 0x3C356F8
	0x03B697C8 LDR X8, [X19 + 0x68]
	0x03B697CC STR X0, [X19 + 0x78]
	0x03B697D0 CBZ X8, 0x3B69804
	0x03B697D4 MOV X20, X0
	0x03B697D8 MOV X0, X8
	0x03B697DC MOV X1, X31
	0x03B697E0 BL 0x3C3F49C
	0x03B697E4 CBZ X20, 0x3B69804
	0x03B697E8 MOV X1, X0
	0x03B697EC MOV X0, X20
	0x03B697F0 MOV X2, X31
	0x03B697F4 BL 0x3C3FD20
	0x03B697F8 MOVZ W8, 0x1
	0x03B697FC STRB W8, [X19 + 0x1A]
	0x03B69800 B 0x3B69464
	0x03B69804 BL 0x1C16F20
	0x03B69808 STP X30, X23, [X31 - 0x30]!
	0x03B6980C STP X22, X21, [X31 + 0x10]
	0x03B69810 STP X20, X19, [X31 + 0x20]
	0x03B69814 ADRP X22, 0x879000
	0x03B69818 ADRP X23, 0x5B1000
	0x03B6981C ADRP X20, 0x5F2000
	0x03B69820 ADRP X21, 0x58A000
	0x03B69824 LDRB W8, [X22 + 0x9D7]
	0x03B69828 LDR X23, [X23 + 0xE30]
	0x03B6982C LDR X20, [X20 + 0x528]
	0x03B69830 LDR X21, [X21 + 0x970]
	0x03B69834 MOV X19, X0
	0x03B69838 TBNZ X8, 0x0, 0x3B69868
	0x03B6983C ADRP X0, 0x58A000
	0x03B69840 LDR X0, [X0 + 0x970]
	0x03B69844 BL 0x1C16CF4
	0x03B69848 ADRP X0, 0x5B1000
	0x03B6984C LDR X0, [X0 + 0xE30]
	0x03B69850 BL 0x1C16CF4
	0x03B69854 ADRP X0, 0x5F2000
	0x03B69858 LDR X0, [X0 + 0x528]
	0x03B6985C BL 0x1C16CF4
	0x03B69860 MOVZ W8, 0x1
	0x03B69864 STRB W8, [X22 + 0x9D7]
	0x03B69868 LDR X0, [X23]
	0x03B6986C BL 0x1C16F10
	0x03B69870 LDR X2, [X20]
	0x03B69874 MOV X1, X19
	0x03B69878 MOV X3, X31
	0x03B6987C MOV X20, X0
	0x03B69880 BL 0x3C45BE8
	0x03B69884 LDR X0, [X21]
	0x03B69888 LDR W8, [X0 + 0xE0]
	0x03B6988C CBNZ W8, 0x3B69894
	0x03B69890 BL 0x1C16DFC
	0x03B69894 MOV X0, X20
	0x03B69898 LDP X20, X19, [X31 + 0x20]
	0x03B6989C LDP X22, X21, [X31 + 0x10]
	0x03B698A0 MOV X1, X31
	0x03B698A4 LDP X30, X23, [X31], #0x30
	0x03B698A8 B 0x3C01FF0
	0x03B698AC STP X30, X23, [X31 - 0x30]!
	0x03B698B0 STP X22, X21, [X31 + 0x10]
	0x03B698B4 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X21, 0x87A000
	014 Move W8, [X21+2509]
	015 Move X19, X0
	016 Add X20, X0, 452
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {56}
	021 Move X0, 0x5F3000
	022 Move X0, [X0+1120]
	023 Call 0x1C17CF4
	024 Move X0, 0x5F3000
	025 Move X0, [X0+1128]
	026 Call 0x1C17CF4
	027 Move X0, 0x5F3000
	028 Move X0, [X0+1136]
	029 Call 0x1C17CF4
	030 Move X0, 0x5F3000
	031 Move X0, [X0+1144]
	032 Call 0x1C17CF4
	033 Move X0, 0x5F2000
	034 Move X0, [X0+2088]
	035 Call 0x1C17CF4
	036 Move X0, 0x5F2000
	037 Move X0, [X0+2096]
	038 Call 0x1C17CF4
	039 Move X0, 0x5F2000
	040 Move X0, [X0+3656]
	041 Call 0x1C17CF4
	042 Move X0, 0x5F2000
	043 Move X0, [X0+3648]
	044 Call 0x1C17CF4
	045 Move X0, 0x5F2000
	046 Move X0, [X0+3664]
	047 Call 0x1C17CF4
	048 Move X0, 0x5F2000
	049 Move X0, [X0+872]
	050 Call 0x1C17CF4
	051 Move X0, 0x5F3000
	052 Move X0, [X0+1152]
	053 Call 0x1C17CF4
	054 Move W8, 1
	055 Move [X21+2509], W8
	056 Move W9, 0xCCCD
	057 Move X22, 0x5F2000
	058 Move X21, 0x5F2000
	059 Move X29, 0x5F2000
	060 Move X28, 0x5F2000
	061 Move X27, 0x5F2000
	062 Move X25, 0x5F3000
	063 Move W23, 1
	064 Move V0, 0
	065 Move W8, 0xBF800000
	066 NotImplemented "Instruction MOVK not yet implemented."
	067 Move X22, [X22+3648]
	068 Move X21, [X21+3656]
	069 Move X29, [X29+2096]
	070 Move X28, [X28+2088]
	071 Move X27, [X27+3664]
	072 Move X25, [X25+1128]
	073 Move [X19+424], W23
	074 Move [X19+448], W23
	075 Move [X20], D0
	076 Move [X19+460], W8
	077 Move [X19+468], W9
	078 Move X24, 0x870000
	079 Move X26, 0x5F3000
	080 Move W8, [X24+2139]
	081 Move X26, [X26+1152]
	082 Compare W8, 0
	083 JumpIfNotEqual {88}
	084 Move X0, 0x58B000
	085 Move X0, [X0+1440]
	086 Call 0x1C17CF4
	087 Move [X24+2139], W23
	088 Move X8, 0x58B000
	089 Move X8, [X8+1440]
	090 Move X8, [X8]
	091 Move X9, [X8+184]
	092 NotImplemented "Instruction LDUR not yet implemented."
	093 Move V1, [X9+20]
	094 Move [X20+24], D0
	095 Move [X19+484], S1
	096 Move X8, [X8+184]
	097 NotImplemented "Instruction LDUR not yet implemented."
	098 Move V1, [X8+20]
	099 Move [X19+488], D0
	100 Move [X19+496], S1
	101 Move X0, [X22]
	102 Call 0x1C17F10
	103 Move X1, [X21]
	104 Move X20, X0
	105 Call List`1<Object>..ctor, X0
	106 Move [X19+504], X20
	107 Move X0, [X29]
	108 Call 0x1C17F10
	109 Move X1, [X28]
	110 Move X20, X0
	111 Call HashSet`1<Object>..ctor, X0
	112 Move [X19+512], X20
	113 Move X0, [X27]
	114 Call 0x1C17F10
	115 Move X1, X31
	116 Move X20, X0
	117 Call TriggerContactMonitor..ctor, X0
	118 Move [X19+520], X20
	119 Move X0, [X25]
	120 Call 0x1C17F10
	121 Move X8, 0x5F3000
	122 Move X8, [X8+1120]
	123 Move X20, X0
	124 Move X1, [X8]
	125 Call Dictionary`2<Object, Object>..ctor, X0
	126 Move [X19+528], X20
	127 Move X0, [X26]
	128 Call 0x1C17F10
	129 Move X1, X31
	130 Move X20, X0
	131 Call XRSocketGrabTransformer..ctor, X0
	132 Move [X19+544], X20
	133 Move X8, 0x5F3000
	134 Move X8, [X8+1144]
	135 Move X0, [X8]
	136 Call 0x1C17F10
	137 Move X8, 0x5F3000
	138 Move X8, [X8+1136]
	139 Move W1, W31
	140 Move X20, X0
	141 Move X2, [X8]
	142 Call 0x2D58B9C, X0, X1
	143 Move [X19+552], X20
	144 Move X8, 0x5F2000
	145 Move X8, [X8+872]
	146 Move X0, [X8]
	147 Move W8, [X0+224]
	148 Compare W8, 0
	149 JumpIfNotEqual {151}
	150 Call 0x1C17DFC
	151 Move X0, X19
	152 Move X20, [X31+80]
	153 Move X19, [X31+88]
	154 Move X22, [X31+64]
	155 Move X21, [X31+72]
	156 Move X24, [X31+48]
	157 Move X23, [X31+56]
	158 Move X26, [X31+32]
	159 Move X25, [X31+40]
	160 Move X28, [X31+16]
	161 Move X27, [X31+24]
	162 Move X1, X31
	163 Move X29, [X31+96]
	164 Move X30, [X31+104]
	165 Call XRBaseInteractor..ctor, X0
	166 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B698B8 ADRP X22, 0x879000
	0x03B698BC ADRP X23, 0x5B1000
	0x03B698C0 ADRP X20, 0x5F2000
	0x03B698C4 ADRP X21, 0x58A000
	0x03B698C8 LDRB W8, [X22 + 0x9D8]
	0x03B698CC LDR X23, [X23 + 0xE30]
	0x03B698D0 LDR X20, [X20 + 0x528]
	0x03B698D4 LDR X21, [X21 + 0x970]
	0x03B698D8 MOV X19, X0
	0x03B698DC TBNZ X8, 0x0, 0x3B6990C
	0x03B698E0 ADRP X0, 0x58A000
	0x03B698E4 LDR X0, [X0 + 0x970]
	0x03B698E8 BL 0x1C16CF4
	0x03B698EC ADRP X0, 0x5B1000
	0x03B698F0 LDR X0, [X0 + 0xE30]
	0x03B698F4 BL 0x1C16CF4
	0x03B698F8 ADRP X0, 0x5F2000
	0x03B698FC LDR X0, [X0 + 0x528]
	0x03B69900 BL 0x1C16CF4
	0x03B69904 MOVZ W8, 0x1
	0x03B69908 STRB W8, [X22 + 0x9D8]
	0x03B6990C LDR X0, [X23]
	0x03B69910 BL 0x1C16F10
	0x03B69914 LDR X2, [X20]
	0x03B69918 MOV X1, X19
	0x03B6991C MOV X3, X31
	0x03B69920 MOV X20, X0
	0x03B69924 BL 0x3C45BE8
	0x03B69928 LDR X0, [X21]
	0x03B6992C LDR W8, [X0 + 0xE0]
	0x03B69930 CBNZ W8, 0x3B69938
	0x03B69934 BL 0x1C16DFC
	0x03B69938 MOV X0, X20
	0x03B6993C LDP X20, X19, [X31 + 0x20]
	0x03B69940 LDP X22, X21, [X31 + 0x10]
	0x03B69944 MOV X1, X31
	0x03B69948 LDP X30, X23, [X31], #0x30
	0x03B6994C B 0x3C02390
	0x03B69950 B 0x3B69240
	0x03B69954 STP X30, X23, [X31 - 0x30]!
	0x03B69958 STP X22, X21, [X31 + 0x10]
	0x03B6995C STP X20, X19, [X31 + 0x20]
	0x03B69960 ADRP X20, 0x879000
	0x03B69964 LDRB W8, [X20 + 0x9D9]
	0x03B69968 MOV X19, X0
	0x03B6996C TBNZ X8, 0x0, 0x3B69990
	0x03B69970 ADRP X0, 0x5F2000
	0x03B69974 LDR X0, [X0 + 0x4E8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x87A000
	008 Move X23, 0x5F3000
	009 Move X19, 0x5F3000
	010 Move X20, 0x5F2000
	011 Move X21, 0x5F2000
	012 Move W8, [X22+2510]
	013 Move X23, [X23+1160]
	014 Move X19, [X19+1168]
	015 Move X20, [X20+1992]
	016 Move X21, [X21+3672]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0x5F3000
	022 Move X0, [X0+1168]
	023 Call 0x1C17CF4
	024 Move X0, 0x5F3000
	025 Move X0, [X0+1160]
	026 Call 0x1C17CF4
	027 Move X0, 0x5F2000
	028 Move X0, [X0+3672]
	029 Call 0x1C17CF4
	030 Move X0, 0x5F2000
	031 Move X0, [X0+1992]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+2510], W8
	035 Move X0, [X23]
	036 Call 0x1C17F10
	037 Move X1, [X19]
	038 Move X19, X0
	039 Call List`1<Object>..ctor, X0
	040 Move X8, [X20]
	041 Move X8, [X8+184]
	042 Move [X8], X19
	043 Move X0, [X21]
	044 Call 0x1C17F10
	045 Move X1, X31
	046 Move X19, X0
	047 Call WaitForFixedUpdate..ctor, X0
	048 Move X8, [X20]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X8, [X8+184]
	052 Move [X8+8], X19
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 Return 

