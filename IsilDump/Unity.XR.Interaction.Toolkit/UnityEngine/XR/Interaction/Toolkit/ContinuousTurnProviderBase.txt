Type: UnityEngine.XR.Interaction.Toolkit.ContinuousTurnProviderBase

Method: System.Single get_turnSpeed()

Disassembly:
	0x03B7E204 MOV X19, X0
	0x03B7E208 TBNZ X8, 0x0, 0x3B7E220

ISIL:
	001 Move V0, [X0+72]
	002 Return V0

Method: System.Void set_turnSpeed(System.Single value)

Disassembly:
	0x03B7E20C ADRP X0, 0x575000
	0x03B7E210 LDR X0, [X0 + 0x598]

ISIL:
	001 Move [X0+72], S0
	002 Return 

Method: System.Void Update()

Disassembly:
	0x03B7E214 BL 0x1C16CF4
	0x03B7E218 MOVZ W8, 0x1
	0x03B7E21C STRB W8, [X21 + 0xAB0]
	0x03B7E220 MOV X0, X19
	0x03B7E224 BL 0x3B7ACCC
	0x03B7E228 LDR X0, [X20]
	0x03B7E22C LDR X20, [X19 + 0x68]
	0x03B7E230 LDR W8, [X0 + 0xE0]
	0x03B7E234 CBNZ W8, 0x3B7E23C
	0x03B7E238 BL 0x1C16DFC
	0x03B7E23C MOV X0, X20
	0x03B7E240 MOV X1, X31
	0x03B7E244 MOV X2, X31
	0x03B7E248 BL 0x3C3883C
	0x03B7E24C TBZ X0, 0x0, 0x3B7E260
	0x03B7E250 MOV X0, X19
	0x03B7E254 MOV X1, X31
	0x03B7E258 BL 0x3C32E90
	0x03B7E25C STR X0, [X19 + 0x68]
	0x03B7E260 MOV X0, X19
	0x03B7E264 LDP X20, X19, [X31 + 0x10]
	0x03B7E268 LDP X30, X21, [X31], #0x20
	0x03B7E26C B 0x3B7DFA8
	0x03B7E270 SUB X31, X31, 0x30
	0x03B7E274 STR X30, [X31 + 0x20]
	0x03B7E278 LDR X8, [X0 + 0x88]
	0x03B7E27C LDUR V0, [X0 + 0x78]
	0x03B7E280 ADD X0, X31, 0x0
	0x03B7E284 MOV X1, X31
	0x03B7E288 STR X8, [X31 + 0x10]
	0x03B7E28C STR V0, [X31]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move [X0+76], W31
	005 Move X19, X0
	006 Move X9, [X8+392]
	007 Move X1, [X8+400]
	008 NotImplemented "Instruction BLR not yet implemented."
	009 Move X8, [X19]
	010 Move X0, X19
	011 Move X9, [X8+408]
	012 Move X1, [X8+416]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move X0, X19
	015 Call ContinuousTurnProviderBase.TurnRig, X0, V0
	016 Move W8, [X19+56]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move W8, [X19+76]
	020 Move W8, W8
	021 ShiftRight W8, 31
	022 And W8, W8, 0x3FFFFFFF
	023 Move W8, [X19+76]
	024 Compare W8, 0
	025 JumpIfEqual {32}
	026 Move W8, 2
	027 Move W8, [X19+76]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Move W8, 3
	031 Move [X19+56], W8
	032 Move X30, [X31+16]
	033 Move X19, [X31+24]
	034 Return 

Method: UnityEngine.Vector2 ReadInput()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Single GetTurnAmount(UnityEngine.Vector2 input)

Disassembly:
	0x03B7E3C0 LDR V3, [X19 + 0x94]
	0x03B7E3C4 MOV X1, X31
	0x03B7E3C8 FSUB S2, S0, S8
	0x03B7E3CC FSUB S1, S1, S9
	0x03B7E3D0 FSUB S0, S3, S10
	0x03B7E3D4 BL 0x3C40988
	0x03B7E3D8 LDR V3, [X19 + 0x74]
	0x03B7E3DC STP S10, S9, [X19 + 0x94]
	0x03B7E3E0 STR S8, [X19 + 0x9C]
	0x03B7E3E4 FMUL S0, S0, S3
	0x03B7E3E8 FMUL S1, S1, S3
	0x03B7E3EC FMUL S2, S2, S3
	0x03B7E3F0 B 0x3B7E43C
	0x03B7E3F4 LDRB W8, [X19 + 0x91]
	0x03B7E3F8 CBZ W8, 0x3B7E3A0
	0x03B7E3FC STP S10, S9, [X19 + 0x94]
	0x03B7E400 STR S8, [X19 + 0x9C]
	0x03B7E404 ADRP X19, 0x85A000
	0x03B7E408 LDRB W8, [X19 + 0x783]
	0x03B7E40C CBNZ W8, 0x3B7E424
	0x03B7E410 ADRP X0, 0x575000
	0x03B7E414 LDR X0, [X0 + 0x5A0]
	0x03B7E418 BL 0x1C16CF4
	0x03B7E41C MOVZ W8, 0x1
	0x03B7E420 STRB W8, [X19 + 0x783]
	0x03B7E424 ADRP X8, 0x575000
	0x03B7E428 LDR X8, [X8 + 0x5A0]
	0x03B7E42C LDR X8, [X8]
	0x03B7E430 LDR X8, [X8 + 0xB8]
	0x03B7E434 LDP S0, S1, [X8]
	0x03B7E438 LDR V2, [X8 + 0x8]
	0x03B7E43C LDP X20, X19, [X31 + 0x30]
	0x03B7E440 LDP X22, X21, [X31 + 0x20]
	0x03B7E444 LDR X30, [X31 + 0x18]
	0x03B7E448 LDP D9, D8, [X31 + 0x8]
	0x03B7E44C LDR V10, [X31], #0x40
	0x03B7E450 RET
	0x03B7E454 BL 0x1C16F20
	0x03B7E458 STP X30, X19, [X31 - 0x10]!
	0x03B7E45C MOV X19, X0
	0x03B7E460 ADD X0, X0, 0x78
	0x03B7E464 MOV X1, X31
	0x03B7E468 BL 0x3745120
	0x03B7E46C CBZ X0, 0x3B7E4AC
	0x03B7E470 MOV X1, X31
	0x03B7E474 BL 0x37353DC
	0x03B7E478 TBZ X0, 0x0, 0x3B7E48C
	0x03B7E47C LDRB W8, [X19 + 0x70]
	0x03B7E480 CBZ W8, 0x3B7E494
	0x03B7E484 MOVZ W8, 0x1
	0x03B7E488 B 0x3B7E4A0
	0x03B7E48C MOV W8, W31
	0x03B7E490 B 0x3B7E4A0
	0x03B7E494 MOV X0, X19
	0x03B7E498 BL 0x3B7E4B0
	0x03B7E49C EOR W8, W0, 0x1
	0x03B7E4A0 AND W0, W8, 0x1
	0x03B7E4A4 LDP X30, X19, [X31], #0x10
	0x03B7E4A8 RET
	0x03B7E4AC BL 0x1C16F20
	0x03B7E4B0 SUB X31, X31, 0x50
	0x03B7E4B4 STP X30, X23, [X31 + 0x20]
	0x03B7E4B8 STP X22, X21, [X31 + 0x30]
	0x03B7E4BC STP X20, X19, [X31 + 0x40]
	0x03B7E4C0 ADRP X20, 0x864000
	0x03B7E4C4 LDRB W8, [X20 + 0xAB3]
	0x03B7E4C8 MOV X19, X0
	0x03B7E4CC TBNZ X8, 0x0, 0x3B7E514
	0x03B7E4D0 ADRP X0, 0x5DD000

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x85C000
	008 Move W8, [X20+1935]
	009 Move V9, V1
	010 Move V8, V0
	011 Move X19, X0
	012 Compare W8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, 0x57E000
	015 Move X0, [X0+3848]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1935], W8
	019 Move X8, 0x57E000
	020 Move X8, [X8+3848]
	021 Move S10, W31
	022 Move X8, [X8]
	023 Move X8, [X8+184]
	024 Move S0, [X8]
	025 Move S1, [X8+4]
	026 Move X8, -50937856
	027 Move V2, [X8+3872]
	028 Subtract S0, S8, S0
	029 Subtract S1, S9, S1
	030 Multiply S0, S0, S0
	031 Multiply S1, S1, S1
	032 Add S0, S0, S1
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 Move V0, V8
	035 Move V1, V9
	036 Move X0, X31
	037 Call CardinalUtility.GetNearestCardinal, X0
	038 And W8, W0, 0xFFFFFFFE
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X20, 0x85C000
	041 Move W8, [X20+2072]
	042 Compare W8, 0
	043 JumpIfNotEqual {49}
	044 Move X0, 0x576000
	045 Move X0, [X0+1448]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X20+2072], W8
	049 Move X8, 0x576000
	050 Move X8, [X8+1448]
	051 Move X0, [X8]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move V10, [X19+72]
	057 Multiply S0, S8, S8
	058 Multiply S1, S9, S9
	059 Add S0, S0, S1
	060 Move X0, X31
	061 NotImplemented "Instruction FSQRT not yet implemented."
	062 Call Time.get_deltaTime
	063 NotImplemented "Instruction FNEG not yet implemented."
	064 NotImplemented "Instruction FCMP not yet implemented."
	065 NotImplemented "Instruction FCSEL not yet implemented."
	066 Multiply S0, S1, S0
	067 Multiply S10, S9, S0
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X30, [X31+24]
	071 Move D9, [X31+8]
	072 Move D8, [X31+16]
	073 Move V0, V10
	074 Move V10, [X31+48]
	075 Return V0

Method: System.Void TurnRig(System.Single turnAmount)

Disassembly:
	0x03B7E290 BL 0x3BB9958
	0x03B7E294 LDR X30, [X31 + 0x20]
	0x03B7E298 ADD X31, X31, 0x30
	0x03B7E29C RET
	0x03B7E2A0 SUB X31, X31, 0x30
	0x03B7E2A4 STR X30, [X31 + 0x20]
	0x03B7E2A8 LDR X8, [X0 + 0x88]
	0x03B7E2AC LDUR V0, [X0 + 0x78]
	0x03B7E2B0 ADD X0, X31, 0x0
	0x03B7E2B4 MOV X1, X31
	0x03B7E2B8 STR X8, [X31 + 0x10]
	0x03B7E2BC STR V0, [X31]
	0x03B7E2C0 BL 0x3BB99F0
	0x03B7E2C4 LDR X30, [X31 + 0x20]
	0x03B7E2C8 ADD X31, X31, 0x30
	0x03B7E2CC RET
	0x03B7E2D0 STR D10, [X31 - 0x40]!
	0x03B7E2D4 STP D9, D8, [X31 + 0x8]
	0x03B7E2D8 STR X30, [X31 + 0x18]
	0x03B7E2DC STP X22, X21, [X31 + 0x20]
	0x03B7E2E0 STP X20, X19, [X31 + 0x30]
	0x03B7E2E4 ADRP X21, 0x864000
	0x03B7E2E8 LDRB W8, [X21 + 0xAB1]
	0x03B7E2EC MOV X20, X1
	0x03B7E2F0 MOV X19, X0
	0x03B7E2F4 TBNZ X8, 0x0, 0x3B7E30C
	0x03B7E2F8 ADRP X0, 0x575000
	0x03B7E2FC LDR X0, [X0 + 0x598]
	0x03B7E300 BL 0x1C16CF4
	0x03B7E304 MOVZ W8, 0x1
	0x03B7E308 STRB W8, [X21 + 0xAB1]
	0x03B7E30C STRB W31, [X20]
	0x03B7E310 LDR X8, [X19 + 0x30]
	0x03B7E314 CBZ X8, 0x3B7E454
	0x03B7E318 LDR X8, [X8 + 0x30]
	0x03B7E31C CBZ X8, 0x3B7E328
	0x03B7E320 LDR X21, [X8 + 0x38]
	0x03B7E324 B 0x3B7E32C
	0x03B7E328 MOV X21, X31
	0x03B7E32C LDRB W8, [X19 + 0x90]
	0x03B7E330 LDRB W22, [X19 + 0x91]
	0x03B7E334 CBZ W8, 0x3B7E370
	0x03B7E338 MOV X0, X19
	0x03B7E33C BL 0x3B7E458
	0x03B7E340 TBZ X0, 0x0, 0x3B7E370
	0x03B7E344 ADRP X8, 0x575000
	0x03B7E348 LDR X8, [X8 + 0x598]
	0x03B7E34C LDR X0, [X8]
	0x03B7E350 LDR W8, [X0 + 0xE0]
	0x03B7E354 CBNZ W8, 0x3B7E35C
	0x03B7E358 BL 0x1C16DFC
	0x03B7E35C MOV X0, X21
	0x03B7E360 MOV X1, X31
	0x03B7E364 MOV X2, X31
	0x03B7E368 BL 0x3C354F8
	0x03B7E36C B 0x3B7E374
	0x03B7E370 MOV W0, W31
	0x03B7E374 AND W8, W0, 0x1
	0x03B7E378 STRB W8, [X19 + 0x91]
	0x03B7E37C TBZ X0, 0x0, 0x3B7E404
	0x03B7E380 LDR X0, [X19 + 0x68]
	0x03B7E384 CBZ X0, 0x3B7E454
	0x03B7E388 MOV X1, X31
	0x03B7E38C BL 0x3C3EB78
	0x03B7E390 MOV V10.16B, V0.16B
	0x03B7E394 MOV V9.16B, V1.16B
	0x03B7E398 MOV V8.16B, V2.16B
	0x03B7E39C CBZ W22, 0x3B7E3F4
	0x03B7E3A0 MOVZ W8, 0x1
	0x03B7E3A4 STRB W8, [X20]
	0x03B7E3A8 CBZ X21, 0x3B7E454
	0x03B7E3AC MOV X0, X21
	0x03B7E3B0 MOV X1, X31
	0x03B7E3B4 BL 0x3C356F8
	0x03B7E3B8 CBZ X0, 0x3B7E454
	0x03B7E3BC LDP S1, S0, [X19 + 0x98]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x865000
	006 Move W8, [X20+2729]
	007 Move V8, V0
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x576000
	014 Move X0, [X0+1432]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+2729], W8
	018 Move X20, 0x85C000
	019 Move W8, [X20+1450]
	020 Compare W8, 0
	021 JumpIfNotEqual {27}
	022 Move X0, 0x57D000
	023 Move X0, [X0+1208]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+1450], W8
	027 Move X8, 0x57D000
	028 Move X8, [X8+1208]
	029 Move X9, -50933760
	030 Move V0, [X9+576]
	031 NotImplemented "Instruction FABS not yet implemented."
	032 Move X8, [X8]
	033 Move S2, W31
	034 NotImplemented "Instruction FMAXNM not yet implemented."
	035 Multiply S0, S1, S0
	036 Move X8, [X8+184]
	037 Move S1, 8
	038 Move V3, [X8]
	039 Multiply S1, S3, S1
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 NotImplemented "Instruction FCSEL not yet implemented."
	042 NotImplemented "Instruction FABD not yet implemented."
	043 NotImplemented "Instruction FCMP not yet implemented."
	044 Move X0, X19
	045 Call LocomotionProvider.CanBeginLocomotion, X0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {90}
	050 Move X0, X19
	051 Call LocomotionProvider.BeginLocomotion, X0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {90}
	056 Move X8, [X19+48]
	057 Compare X8, 0
	058 JumpIfEqual {95}
	059 Move X9, 0x576000
	060 Move X9, [X9+1432]
	061 Move X20, [X8+48]
	062 Move X0, [X9]
	063 Move W9, [X0+224]
	064 Compare W9, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X0, X20
	068 Move X1, X31
	069 Move X2, X31
	070 Call Object.op_Inequality, X0, X1
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {83}
	075 Move W8, 1
	076 Move [X19+76], W8
	077 Compare X20, 0
	078 JumpIfEqual {95}
	079 Move X0, X20
	080 Move V0, V8
	081 Move X1, X31
	082 Call XROrigin.RotateAroundCameraUsingOriginUp, X0, V0
	083 Move X0, X19
	084 Move X20, [X31+16]
	085 Move X19, [X31+24]
	086 Move X30, [X31+8]
	087 Move V8, [X31+32]
	088 Call LocomotionProvider.EndLocomotion, X0
	089 Return 
	090 Move X20, [X31+16]
	091 Move X19, [X31+24]
	092 Move X30, [X31+8]
	093 Move V8, [X31+32]
	094 Return 
	095 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03B7D72C STR X30, [X31 + 0x20]
	0x03B7D730 STP X20, X19, [X31 + 0x30]
	0x03B7D734 ADRP X20, 0x85C000
	0x03B7D738 LDRB W8, [X20 + 0x818]

ISIL:
	001 Move W8, 0x42700000
	002 Move X1, X31
	003 Move [X0+72], W8
	004 Call MonoBehaviour..ctor, X0
	005 Return 

