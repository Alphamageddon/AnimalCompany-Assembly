Type: UnityEngine.XR.Interaction.Toolkit.XRInteractableSnapVolume

Method: UnityEngine.XR.Interaction.Toolkit.XRInteractionManager get_interactionManager()

Disassembly:
	0x03B475A4 MOVZ W8, 0x1
	0x03B475A8 STRB W8, [X20 + 0x8A3]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_interactionManager(UnityEngine.XR.Interaction.Toolkit.XRInteractionManager value)

Disassembly:
	0x03B475AC LDR X0, [X21]
	0x03B475B0 LDR X20, [X19 + 0x40]
	0x03B475B4 LDR W8, [X0 + 0xE0]
	0x03B475B8 CBNZ W8, 0x3B475C0
	0x03B475BC BL 0x1C16DFC
	0x03B475C0 MOV X0, X20
	0x03B475C4 MOV X1, X31
	0x03B475C8 MOV X2, X31
	0x03B475CC BL 0x3C3883C
	0x03B475D0 TBNZ X0, 0x0, 0x3B47634
	0x03B475D4 LDR X0, [X19 + 0x40]
	0x03B475D8 CBZ X0, 0x3B476E8
	0x03B475DC MOV X1, X31
	0x03B475E0 BL 0x3C32ECC
	0x03B475E4 CBZ X0, 0x3B476E8
	0x03B475E8 MOV X1, X31
	0x03B475EC BL 0x3C35834
	0x03B475F0 TBZ X0, 0x0, 0x3B47634
	0x03B475F4 LDR X0, [X19 + 0x40]
	0x03B475F8 CBZ X0, 0x3B476E8
	0x03B475FC MOV X1, X31
	0x03B47600 BL 0x3C8F70C
	0x03B47604 TBZ X0, 0x0, 0x3B47634
	0x03B47608 LDR X0, [X19 + 0x40]
	0x03B4760C CBZ X0, 0x3B476E8
	0x03B47610 MOV V1.16B, V9.16B
	0x03B47614 MOV V2.16B, V8.16B
	0x03B47618 LDP X20, X19, [X31 + 0x30]
	0x03B4761C LDP X30, X21, [X31 + 0x20]
	0x03B47620 LDP D9, D8, [X31 + 0x10]
	0x03B47624 MOV V0.16B, V10.16B
	0x03B47628 MOV X1, X31
	0x03B4762C LDR V10, [X31], #0x40
	0x03B47630 B 0x3C8F80C
	0x03B47634 LDR X20, [X19 + 0x48]
	0x03B47638 CBZ X20, 0x3B476D8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x89C000
	007 Move X21, 0x5AD000
	008 Move W8, [X22+2197]
	009 Move X21, [X21+2416]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5AD000
	017 Move X0, [X0+2416]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2197], W8
	021 Move [X19+32], X20
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X31
	028 Call Application.get_isPlaying
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {46}
	033 Move X0, X19
	034 Move X1, X31
	035 Call Behaviour.get_isActiveAndEnabled, X0
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {46}
	040 Move X0, X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Return 

Method: UnityEngine.Object get_interactableObject()

Disassembly:
	0x03B47700 MOV X0, X20
	0x03B47704 BLR X8

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_interactableObject(UnityEngine.Object value)

Disassembly:
	0x03B47708 CBZ X0, 0x3B476E8
	0x03B4770C LDP X20, X19, [X31 + 0x30]
	0x03B47710 LDP X30, X21, [X31 + 0x20]
	0x03B47714 LDP D9, D8, [X31 + 0x10]
	0x03B47718 MOV X1, X31
	0x03B4771C LDR V10, [X31], #0x40
	0x03B47720 B 0x3C3F58C
	0x03B47724 STR D10, [X31 - 0x40]!
	0x03B47728 STP D9, D8, [X31 + 0x8]
	0x03B4772C STR X30, [X31 + 0x18]
	0x03B47730 STP X22, X21, [X31 + 0x20]
	0x03B47734 STP X20, X19, [X31 + 0x30]
	0x03B47738 ADRP X21, 0x89B000
	0x03B4773C LDRB W8, [X21 + 0x8A4]
	0x03B47740 MOV X20, X1
	0x03B47744 MOV X19, X0
	0x03B47748 TBNZ X8, 0x0, 0x3B4776C
	0x03B4774C ADRP X0, 0x613000
	0x03B47750 LDR X0, [X0 + 0x8D8]
	0x03B47754 BL 0x1C16CF4
	0x03B47758 ADRP X0, 0x5AC000
	0x03B4775C LDR X0, [X0 + 0x598]
	0x03B47760 BL 0x1C16CF4
	0x03B47764 MOVZ W8, 0x1
	0x03B47768 STRB W8, [X21 + 0x8A4]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x89C000
	007 Move X21, 0x614000
	008 Move W8, [X22+2198]
	009 Move X21, [X21+2264]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x614000
	017 Move X0, [X0+2264]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2198], W8
	021 Move [X19+40], X20
	022 Move X1, [X21]
	023 Move X0, X20
	024 Call 0x1C17E00
	025 Move X1, X0
	026 Move X0, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X22, [X31+16]
	030 Move X21, [X31+24]
	031 Move X30, [X31+48]

Method: UnityEngine.Collider get_snapCollider()

Disassembly:
	0x03B47844 MOV X1, X20
	0x03B47848 BLR X8

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_snapCollider(UnityEngine.Collider value)

Disassembly:
	0x03B4784C CBZ X0, 0x3B4790C
	0x03B47850 MOV X1, X31
	0x03B47854 BL 0x3C3F58C
	0x03B47858 LDR X0, [X22]
	0x03B4785C LDR X20, [X19 + 0x40]
	0x03B47860 MOV V8.16B, V0.16B
	0x03B47864 MOV V9.16B, V1.16B
	0x03B47868 LDR W8, [X0 + 0xE0]
	0x03B4786C MOV V10.16B, V2.16B
	0x03B47870 CBNZ W8, 0x3B47878
	0x03B47874 BL 0x1C16DFC
	0x03B47878 MOV X0, X20
	0x03B4787C MOV X1, X31
	0x03B47880 MOV X2, X31
	0x03B47884 BL 0x3C3883C
	0x03B47888 TBNZ X0, 0x0, 0x3B478E8
	0x03B4788C LDR X0, [X19 + 0x40]
	0x03B47890 CBZ X0, 0x3B4790C
	0x03B47894 MOV X1, X31
	0x03B47898 BL 0x3C32ECC
	0x03B4789C CBZ X0, 0x3B4790C
	0x03B478A0 MOV X1, X31
	0x03B478A4 BL 0x3C35834
	0x03B478A8 TBZ X0, 0x0, 0x3B478E8
	0x03B478AC LDR X0, [X19 + 0x40]
	0x03B478B0 CBZ X0, 0x3B4790C
	0x03B478B4 MOV X1, X31
	0x03B478B8 BL 0x3C8F70C
	0x03B478BC TBZ X0, 0x0, 0x3B478E8
	0x03B478C0 LDR X0, [X19 + 0x40]
	0x03B478C4 CBZ X0, 0x3B4790C
	0x03B478C8 MOV V0.16B, V8.16B
	0x03B478CC MOV V1.16B, V9.16B
	0x03B478D0 MOV V2.16B, V10.16B
	0x03B478D4 MOV X1, X31
	0x03B478D8 BL 0x3C8F80C
	0x03B478DC MOV V8.16B, V0.16B
	0x03B478E0 MOV V9.16B, V1.16B
	0x03B478E4 MOV V10.16B, V2.16B
	0x03B478E8 MOV V0.16B, V8.16B
	0x03B478EC MOV V1.16B, V9.16B
	0x03B478F0 LDP X20, X19, [X31 + 0x30]
	0x03B478F4 LDP X22, X21, [X31 + 0x20]
	0x03B478F8 LDR X30, [X31 + 0x18]
	0x03B478FC LDP D9, D8, [X31 + 0x8]
	0x03B47900 MOV V2.16B, V10.16B
	0x03B47904 LDR V10, [X31], #0x40
	0x03B47908 RET
	0x03B4790C BL 0x1C16F20
	0x03B47910 LDRB W8, [X0 + 0x38]
	0x03B47914 CBZ W8, 0x3B47920
	0x03B47918 MOV W1, W31
	0x03B4791C B 0x3B47388
	0x03B47920 RET
	0x03B47924 LDRB W8, [X0 + 0x38]
	0x03B47928 CBZ W8, 0x3B47934
	0x03B4792C MOVZ W1, 0x1
	0x03B47930 B 0x3B47388

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x89C000
	007 Move X21, 0x5AD000
	008 Move W8, [X22+2199]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x5AD000
	017 Move X0, [X0+2416]
	018 Call 0x1C17CF4
	019 Move X0, 0x5AD000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2199], W8
	024 Move X0, [X21]
	025 Move X21, [X19+48]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X21
	031 Move X1, X20
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {74}
	038 Move X8, 0x5AD000
	039 Move X8, [X8+2416]
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X31
	046 Call Application.get_isPlaying
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {73}
	051 Move X0, X19
	052 Move X1, X31
	053 Call Behaviour.get_isActiveAndEnabled, X0
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {73}
	058 Move X0, X19
	059 Call XRInteractableSnapVolume.UnregisterWithInteractionManager, X0
	060 Move X0, X19
	061 Move [X19+48], X20
	062 Call XRInteractableSnapVolume.ValidateSnapCollider, X0
	063 Move X0, X19
	064 Call XRInteractableSnapVolume.RefreshSnapColliderEnabled, X0
	065 Move X0, X19
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Call XRInteractableSnapVolume.RegisterWithInteractionManager, X0
	072 Return 
	073 Move [X19+48], X20
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X22, [X31+16]
	077 Move X21, [X31+24]
	078 Move X30, [X31+48]
	079 Return 

Method: System.Boolean get_disableSnapColliderWhenSelected()

Disassembly:
	0x03B47C00 FMUL S3, S3, S11
	0x03B47C04 FMUL S4, S4, S11

ISIL:
	001 Move W0, [X0+56]
	002 Return X0

Method: System.Void set_disableSnapColliderWhenSelected(System.Boolean value)

Disassembly:
	0x03B47C08 FMUL S5, S15, S0
	0x03B47C0C FMUL S6, S14, S0
	0x03B47C10 FMUL S7, S13, S0
	0x03B47C14 FMUL S16, S12, S0
	0x03B47C18 FADD S0, S1, S5
	0x03B47C1C FADD S1, S2, S6
	0x03B47C20 FADD S2, S3, S7
	0x03B47C24 FADD S3, S4, S16
	0x03B47C28 LDP X20, X19, [X31 + 0x60]
	0x03B47C2C LDP X30, X21, [X31 + 0x50]
	0x03B47C30 LDP D9, D8, [X31 + 0x40]
	0x03B47C34 LDP D11, D10, [X31 + 0x30]
	0x03B47C38 LDP D13, D12, [X31 + 0x20]
	0x03B47C3C LDP D15, D14, [X31 + 0x10]
	0x03B47C40 ADD X31, X31, 0x70
	0x03B47C44 RET
	0x03B47C48 SUB X31, X31, 0x70
	0x03B47C4C STP D13, D12, [X31 + 0x10]
	0x03B47C50 STP D11, D10, [X31 + 0x20]
	0x03B47C54 STP D9, D8, [X31 + 0x30]
	0x03B47C58 STP X30, X23, [X31 + 0x40]
	0x03B47C5C STP X22, X21, [X31 + 0x50]
	0x03B47C60 STP X20, X19, [X31 + 0x60]
	0x03B47C64 MOV V8.16B, V0.16B
	0x03B47C68 LDR V4, [X4]
	0x03B47C6C LDP S0, S3, [X0]
	0x03B47C70 LDR V2, [X0 + 0x8]
	0x03B47C74 MOV X22, X0
	0x03B47C78 FDIV S13, S4, S1
	0x03B47C7C MOV V1.16B, V3.16B
	0x03B47C80 MOV X0, X31
	0x03B47C84 MOV X19, X4
	0x03B47C88 MOV X21, X3
	0x03B47C8C MOV X23, X2
	0x03B47C90 MOV X20, X1
	0x03B47C94 BL 0x3887BE4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x89C000
	007 Move X20, 0x5AD000
	008 Move W8, [X22+2200]
	009 Move X20, [X20+2416]
	010 Move X19, X0
	011 And W21, W1, 1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5AD000
	017 Move X0, [X0+2416]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2200], W8
	021 Move [X19+56], W21
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X31
	028 Call Application.get_isPlaying
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {48}
	033 Move X0, X19
	034 Move X1, X31
	035 Call Behaviour.get_isActiveAndEnabled, X0
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {48}
	040 Move X0, X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Call XRInteractableSnapVolume.RefreshSnapColliderEnabled, X0
	047 Return 
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Return 

Method: UnityEngine.Collider get_snapToCollider()

Disassembly:
	0x03B47C98 LDR V3, [X23 + 0x8]
	0x03B47C9C MOV V9.16B, V0.16B

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_snapToCollider(UnityEngine.Collider value)

Disassembly:
	0x03B47CA0 MOV V10.16B, V1.16B
	0x03B47CA4 LDP S0, S1, [X23]

ISIL:
	001 Move [X0+64], X1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.IXRInteractable get_interactable()

Disassembly:
	0x03B47CA8 MOV V11.16B, V2.16B
	0x03B47CAC MOV V2.16B, V3.16B

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Void set_interactable(UnityEngine.XR.Interaction.Toolkit.IXRInteractable value)

Disassembly:
	0x03B4776C ADRP X22, 0x5AC000
	0x03B47770 LDR X21, [X19 + 0x48]
	0x03B47774 LDR X22, [X22 + 0x598]
	0x03B47778 CBZ X21, 0x3B47818
	0x03B4777C LDR X8, [X21]
	0x03B47780 LDR X0, [X22]
	0x03B47784 LDRB W10, [X8 + 0x130]
	0x03B47788 LDRB W9, [X0 + 0x130]
	0x03B4778C CMP W10, W9
	0x03B47790 B.CC 0x3B477D0
	0x03B47794 LDR X8, [X8 + 0xC8]
	0x03B47798 ADD X8, X8, X9, 0x3, LSL
	0x03B4779C LDUR X8, [X8 - 0x8]
	0x03B477A0 CMP X8, X0
	0x03B477A4 B.NE 0x3B477D0
	0x03B477A8 LDR W8, [X0 + 0xE0]
	0x03B477AC CBNZ W8, 0x3B477B4
	0x03B477B0 BL 0x1C16DFC
	0x03B477B4 MOV X0, X21
	0x03B477B8 MOV X1, X31
	0x03B477BC MOV X2, X31
	0x03B477C0 BL 0x3C354F8
	0x03B477C4 TBZ X0, 0x0, 0x3B47818
	0x03B477C8 LDR X21, [X19 + 0x48]
	0x03B477CC CBZ X21, 0x3B4790C
	0x03B477D0 ADRP X10, 0x613000
	0x03B477D4 LDR X8, [X21]
	0x03B477D8 LDR X10, [X10 + 0x8D8]
	0x03B477DC LDRH W9, [X8 + 0x12E]
	0x03B477E0 LDR X1, [X10]
	0x03B477E4 CBZ X9, 0x3B47808
	0x03B477E8 LDR X10, [X8 + 0xB0]
	0x03B477EC ADD X10, X10, 0x8
	0x03B477F0 LDUR X11, [X10 - 0x8]
	0x03B477F4 CMP X11, X1
	0x03B477F8 B.EQ 0x3B4782C
	0x03B477FC SUBS X9, X9, 0x1
	0x03B47800 ADD X10, X10, 0x10
	0x03B47804 B.NE 0x3B477F0
	0x03B47808 MOVZ W2, 0x7
	0x03B4780C MOV X0, X21
	0x03B47810 BL 0x1C5C788
	0x03B47814 B 0x3B4783C
	0x03B47818 MOV X0, X19
	0x03B4781C MOV X1, X31
	0x03B47820 BL 0x3C32E90
	0x03B47824 CBNZ X0, 0x3B47850
	0x03B47828 B 0x3B4790C
	0x03B4782C LDR W9, [X10]
	0x03B47830 ADD W9, W9, 0x7
	0x03B47834 ADD X8, X8, W9, 0x4, SXTW
	0x03B47838 ADD X0, X8, 0x138
	0x03B4783C LDP X8, X2, [X0]
	0x03B47840 MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x89C000
	006 Move W8, [X21+2201]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x5AD000
	014 Move X0, [X0+2416]
	015 Call 0x1C17CF4
	016 Move X0, 0x5AD000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2201], W8
	021 Move X8, 0x5AD000
	022 Move X8, [X8+2416]
	023 Move [X20+72], X19
	024 Compare X19, 0
	025 JumpIfEqual {33}
	026 Move X9, 0x5AD000
	027 Move X9, [X9+1432]
	028 Move X10, [X19]
	029 Move X9, [X9]
	030 Move W12, [X10+304]
	031 Move W11, [X9+304]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X9, X31
	034 Move X10, [X10+200]
	035 Add X10, X10, X11
	036 NotImplemented "Instruction LDUR not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 Move [X20+40], X9
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X31
	046 Call Application.get_isPlaying
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {66}
	051 Move X0, X20
	052 Move X1, X31
	053 Call Behaviour.get_isActiveAndEnabled, X0
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {66}
	058 Move X0, X20
	059 Move X1, X19
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Call XRInteractableSnapVolume.SetBoundInteractable, X0, X1
	065 Return 
	066 Move X20, [X31+16]
	067 Move X19, [X31+24]
	068 Move X30, [X31+32]
	069 Move X21, [X31+40]
	070 Return 

Method: System.Void Reset()

Disassembly:
	0x03B48068 MOV V9.16B, V0.16B

ISIL:
	001 Return 

Method: System.Void Awake()

Disassembly:
	0x03B4806C MOV V11.16B, V1.16B
	0x03B48070 LDP S0, S1, [X20]
	0x03B48074 MOV V12.16B, V2.16B
	0x03B48078 MOV V2.16B, V3.16B
	0x03B4807C MOV X0, X31
	0x03B48080 BL 0x3887BE4
	0x03B48084 FMUL S3, S10, S15
	0x03B48088 FSUB S0, S0, S9
	0x03B4808C FSUB S1, S1, S11
	0x03B48090 FSUB S2, S2, S12
	0x03B48094 FMUL S0, S3, S0
	0x03B48098 FMUL S1, S3, S1
	0x03B4809C FMUL S2, S3, S2
	0x03B480A0 FADD S0, S9, S0
	0x03B480A4 FADD S1, S11, S1
	0x03B480A8 FADD S2, S12, S2
	0x03B480AC MOV X0, X31
	0x03B480B0 BL 0x3887BE0
	0x03B480B4 MOV X0, X31
	0x03B480B8 STP S0, S1, [X19]
	0x03B480BC STR S2, [X19 + 0x8]
	0x03B480C0 BL 0x3887BE4
	0x03B480C4 LDR V3, [X20 + 0x8]
	0x03B480C8 MOV V9.16B, V0.16B
	0x03B480CC MOV V10.16B, V1.16B
	0x03B480D0 LDP S0, S1, [X20]
	0x03B480D4 MOV V11.16B, V2.16B
	0x03B480D8 MOV V2.16B, V3.16B
	0x03B480DC MOV X0, X31
	0x03B480E0 BL 0x3887BE4
	0x03B480E4 LDR V3, [X31 + 0x58]
	0x03B480E8 FSUB S0, S0, S9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x89B000
	006 Move X20, 0x5AC000
	007 Move W8, [X21+2202]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5AC000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2202], W8
	019 Move X0, [X20]
	020 Move X20, [X19+48]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {38}
	033 Move X0, X19
	034 Move X1, X31
	035 Call Component.get_gameObject, X0
	036 Call XRInteractableSnapVolume.FindSnapCollider, X0
	037 Move [X19+48], X0
	038 Move X0, X19
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Call XRInteractableSnapVolume.ValidateSnapCollider, X0
	044 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03B48200 B.NE 0x3B481EC
	0x03B48204 MOV X0, X19
	0x03B48208 MOV W2, W31
	0x03B4820C BL 0x1C5C788
	0x03B48210 B 0x3B48220
	0x03B48214 LDRSW X9, [X10]
	0x03B48218 ADD X8, X8, X9, 0x4, LSL
	0x03B4821C ADD X0, X8, 0x138
	0x03B48220 LDP X8, X1, [X0]
	0x03B48224 MOV X0, X19
	0x03B48228 BLR X8
	0x03B4822C CBZ X0, 0x3B482A4
	0x03B48230 LDR X1, [X21]
	0x03B48234 MOV X19, X0
	0x03B48238 BL 0x1C16E00
	0x03B4823C CBZ X0, 0x3B482A8
	0x03B48240 LDR X8, [X0]
	0x03B48244 LDR X1, [X21]
	0x03B48248 MOV X20, X0
	0x03B4824C LDRH W9, [X8 + 0x12E]
	0x03B48250 CBZ X9, 0x3B48274
	0x03B48254 LDR X10, [X8 + 0xB0]
	0x03B48258 ADD X10, X10, 0x8
	0x03B4825C LDUR X11, [X10 - 0x8]
	0x03B48260 CMP X11, X1
	0x03B48264 B.EQ 0x3B48284
	0x03B48268 SUBS X9, X9, 0x1
	0x03B4826C ADD X10, X10, 0x10
	0x03B48270 B.NE 0x3B4825C
	0x03B48274 MOV X0, X20
	0x03B48278 MOV W2, W31
	0x03B4827C BL 0x1C5C788
	0x03B48280 B 0x3B48290
	0x03B48284 LDRSW X9, [X10]
	0x03B48288 ADD X8, X8, X9, 0x4, LSL
	0x03B4828C ADD X0, X8, 0x138
	0x03B48290 LDP X8, X1, [X0]
	0x03B48294 MOV X0, X20
	0x03B48298 BLR X8
	0x03B4829C CBNZ X0, 0x3B48230
	0x03B482A0 B 0x3B482A8
	0x03B482A4 MOV X19, X31
	0x03B482A8 MOV X0, X19
	0x03B482AC LDP X20, X19, [X31 + 0x10]
	0x03B482B0 LDP X30, X21, [X31], #0x20
	0x03B482B4 RET
	0x03B482B8 BL 0x1C16F20
	0x03B482BC STR X30, [X31 - 0x20]!
	0x03B482C0 STP X20, X19, [X31 + 0x10]
	0x03B482C4 ADRP X20, 0x89A000
	0x03B482C8 LDRB W8, [X20 + 0x8A9]
	0x03B482CC MOV X19, X0
	0x03B482D0 TBNZ X8, 0x0, 0x3B48300
	0x03B482D4 ADRP X0, 0x612000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x89B000
	006 Move X20, 0x5AC000
	007 Move W8, [X21+2203]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x613000
	015 Move X0, [X0+2320]
	016 Call 0x1C17CF4
	017 Move X0, 0x613000
	018 Move X0, [X0+2264]
	019 Call 0x1C17CF4
	020 Move X0, 0x5AC000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2203], W8
	025 Move X0, X19
	026 Call XRInteractableSnapVolume.FindCreateInteractionManager, X0
	027 Move X0, X19
	028 Call XRInteractableSnapVolume.RegisterWithInteractionManager, X0
	029 Move X0, [X20]
	030 Move X20, [X19+40]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X20
	036 Move X1, X31
	037 Move X2, X31
	038 Call Object.op_Inequality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {51}
	043 Move X8, 0x613000
	044 Move X0, [X19+40]
	045 Move X8, [X8+2264]
	046 Move X1, [X8]
	047 Call 0x1C17E00
	048 Compare X0, 0
	049 JumpIfEqual {51}
	050 Move X1, X0
	051 Move X1, [X19+72]
	052 Compare X1, 0
	053 JumpIfNotEqual {61}
	054 Move X8, 0x613000
	055 Move X8, [X8+2320]
	056 Move X0, X19
	057 Move X1, [X8]
	058 Call 0x21A4F50, X0
	059 Move X1, X0
	060 Move [X19+72], X0
	061 Move X0, X19
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Call XRInteractableSnapVolume.set_interactable, X0, X1
	067 Return 

Method: System.Void OnDisable()

Disassembly:
	0x03B48360 MOV X0, X19
	0x03B48364 BLR X8
	0x03B48368 CBZ X0, 0x3B48404
	0x03B4836C LDR W8, [X0 + 0x18]
	0x03B48370 CMP W8, 0x1
	0x03B48374 B.LT 0x3B483B8
	0x03B48378 LDR X8, [X19]
	0x03B4837C LDR X1, [X20]
	0x03B48380 LDRH W9, [X8 + 0x12E]
	0x03B48384 CBZ X9, 0x3B483A8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call XRInteractableSnapVolume.UnregisterWithInteractionManager, X0
	005 Move X0, X19
	006 Move X1, X31
	007 Call XRInteractableSnapVolume.SetBoundInteractable, X0, X1
	008 Move X0, X19
	009 Move W1, W31
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]

Method: System.Void FindCreateInteractionManager()

Disassembly:
	0x03B482D8 LDR X0, [X0 + 0x320]
	0x03B482DC BL 0x1C16CF4
	0x03B482E0 ADRP X0, 0x612000
	0x03B482E4 LDR X0, [X0 + 0x928]
	0x03B482E8 BL 0x1C16CF4
	0x03B482EC ADRP X0, 0x612000
	0x03B482F0 LDR X0, [X0 + 0x930]
	0x03B482F4 BL 0x1C16CF4
	0x03B482F8 MOVZ W8, 0x1
	0x03B482FC STRB W8, [X20 + 0x8A9]
	0x03B48300 CBZ X19, 0x3B483B8
	0x03B48304 ADRP X20, 0x612000
	0x03B48308 LDR X8, [X19]
	0x03B4830C LDR X20, [X20 + 0x320]
	0x03B48310 LDRH W9, [X8 + 0x12E]
	0x03B48314 LDR X1, [X20]
	0x03B48318 CBZ X9, 0x3B4833C
	0x03B4831C LDR X10, [X8 + 0xB0]
	0x03B48320 ADD X10, X10, 0x8
	0x03B48324 LDUR X11, [X10 - 0x8]
	0x03B48328 CMP X11, X1
	0x03B4832C B.EQ 0x3B4834C
	0x03B48330 SUBS X9, X9, 0x1
	0x03B48334 ADD X10, X10, 0x10
	0x03B48338 B.NE 0x3B48324
	0x03B4833C MOVZ W2, 0x2
	0x03B48340 MOV X0, X19
	0x03B48344 BL 0x1C5C788
	0x03B48348 B 0x3B4835C
	0x03B4834C LDR W9, [X10]
	0x03B48350 ADD W9, W9, 0x2
	0x03B48354 ADD X8, X8, W9, 0x4, SXTW
	0x03B48358 ADD X0, X8, 0x138
	0x03B4835C LDP X8, X1, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x89B000
	006 Move X20, 0x5AC000
	007 Move W8, [X21+2204]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x613000
	015 Move X0, [X0+744]
	016 Call 0x1C17CF4
	017 Move X0, 0x5AC000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2204], W8
	022 Move X0, [X20]
	023 Move X20, [X19+32]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {41}
	036 Move X8, 0x613000
	037 Move X8, [X8+744]
	038 Move X0, [X8]
	039 Call 0x29606C8
	040 Move [X19+32], X0
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return 

Method: System.Void RegisterWithInteractionManager()

Disassembly:
	0x03B4763C LDR X8, [X20]
	0x03B47640 LDR X0, [X21]
	0x03B47644 LDRB W10, [X8 + 0x130]
	0x03B47648 LDRB W9, [X0 + 0x130]
	0x03B4764C CMP W10, W9
	0x03B47650 B.CC 0x3B47690
	0x03B47654 LDR X8, [X8 + 0xC8]
	0x03B47658 ADD X8, X8, X9, 0x3, LSL
	0x03B4765C LDUR X8, [X8 - 0x8]
	0x03B47660 CMP X8, X0
	0x03B47664 B.NE 0x3B47690
	0x03B47668 LDR W8, [X0 + 0xE0]
	0x03B4766C CBNZ W8, 0x3B47674
	0x03B47670 BL 0x1C16DFC
	0x03B47674 MOV X0, X20
	0x03B47678 MOV X1, X31
	0x03B4767C MOV X2, X31
	0x03B47680 BL 0x3C354F8
	0x03B47684 TBZ X0, 0x0, 0x3B476D8
	0x03B47688 LDR X20, [X19 + 0x48]
	0x03B4768C CBZ X20, 0x3B476E8
	0x03B47690 ADRP X10, 0x613000
	0x03B47694 LDR X8, [X20]
	0x03B47698 LDR X10, [X10 + 0x8D8]
	0x03B4769C LDRH W9, [X8 + 0x12E]
	0x03B476A0 LDR X1, [X10]
	0x03B476A4 CBZ X9, 0x3B476C8
	0x03B476A8 LDR X10, [X8 + 0xB0]
	0x03B476AC ADD X10, X10, 0x8
	0x03B476B0 LDUR X11, [X10 - 0x8]
	0x03B476B4 CMP X11, X1
	0x03B476B8 B.EQ 0x3B476EC
	0x03B476BC SUBS X9, X9, 0x1
	0x03B476C0 ADD X10, X10, 0x10
	0x03B476C4 B.NE 0x3B476B0
	0x03B476C8 MOVZ W2, 0x6
	0x03B476CC MOV X0, X20
	0x03B476D0 BL 0x1C5C788
	0x03B476D4 B 0x3B476FC
	0x03B476D8 MOV X0, X19
	0x03B476DC MOV X1, X31
	0x03B476E0 BL 0x3C32E90
	0x03B476E4 CBNZ X0, 0x3B4770C
	0x03B476E8 BL 0x1C16F20
	0x03B476EC LDR W9, [X10]
	0x03B476F0 ADD W9, W9, 0x6
	0x03B476F4 ADD X8, X8, W9, 0x4, SXTW
	0x03B476F8 ADD X0, X8, 0x138
	0x03B476FC LDP X8, X1, [X0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x89C000
	007 Move X22, 0x5AD000
	008 Move W8, [X20+2205]
	009 Move X22, [X22+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x5AD000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2205], W8
	020 Move X0, [X22]
	021 Move X20, [X19+96]
	022 Move X21, [X19+32]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X21
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {59}
	035 Move X0, X19
	036 Call XRInteractableSnapVolume.UnregisterWithInteractionManager, X0
	037 Move X0, [X22]
	038 Move X20, [X19+32]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X1, X31
	045 Move X2, X31
	046 Call Object.op_Inequality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {59}
	051 Move X0, [X19+32]
	052 Compare X0, 0
	053 JumpIfEqual {65}
	054 Move X1, X19
	055 Move X2, X31
	056 Call XRInteractionManager.RegisterSnapVolume, X0, X1
	057 Move X8, [X19+32]
	058 Move [X19+96], X8
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X30, [X31+48]
	064 Return 
	065 Call 0x1C17F20

Method: System.Void UnregisterWithInteractionManager()

Disassembly:
	0x03B47934 RET
	0x03B47938 MOVZ W8, 0x1
	0x03B4793C MOV X1, X31
	0x03B47940 STRB W8, [X0 + 0x38]
	0x03B47944 B 0x3C36C30
	0x03B47948 SUB X31, X31, 0x70
	0x03B4794C STP D15, D14, [X31 + 0x10]
	0x03B47950 STP D13, D12, [X31 + 0x20]
	0x03B47954 STP D11, D10, [X31 + 0x30]
	0x03B47958 STP D9, D8, [X31 + 0x40]
	0x03B4795C STP X30, X21, [X31 + 0x50]
	0x03B47960 STP X20, X19, [X31 + 0x60]
	0x03B47964 MOV V14.16B, V5.16B
	0x03B47968 MOV V15.16B, V4.16B
	0x03B4796C FMUL S5, S0, S4
	0x03B47970 FMUL S4, S1, S14
	0x03B47974 FADD S5, S5, S4
	0x03B47978 FMUL S4, S2, S6
	0x03B4797C FADD S5, S4, S5
	0x03B47980 FMUL S4, S3, S7
	0x03B47984 FADD S10, S4, S5
	0x03B47988 MOV V12.16B, V7.16B
	0x03B4798C MOV V13.16B, V6.16B
	0x03B47990 FCMP S10, 0x0
	0x03B47994 B.PL 0x3B479AC
	0x03B47998 FNEG S10, S10
	0x03B4799C FNEG S15, S15
	0x03B479A0 FNEG S14, S14
	0x03B479A4 FNEG S13, S13
	0x03B479A8 FNEG S12, S12
	0x03B479AC ADRP X8, 0xFFFFFFFFFCFA3000
	0x03B479B0 LDR V4, [X8 + 0x418]
	0x03B479B4 LDR V9, [X31 + 0x70]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x89C000
	006 Move X20, 0x5AD000
	007 Move W8, [X21+2206]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5AD000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2206], W8
	019 Move X0, [X20]
	020 Move X20, [X19+96]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {40}
	033 Move X0, [X19+96]
	034 Compare X0, 0
	035 JumpIfEqual {45}
	036 Move X1, X19
	037 Move X2, X31
	038 Call XRInteractionManager.UnregisterSnapVolume, X0, X1
	039 Move [X19+96], X31
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return 
	045 Call 0x1C17F20

Method: UnityEngine.Collider FindSnapCollider(UnityEngine.GameObject gameObject)

Disassembly:
	0x03B480EC FSUB S1, S1, S10
	0x03B480F0 FSUB S2, S2, S11
	0x03B480F4 FMUL S0, S0, S3
	0x03B480F8 FMUL S1, S1, S3
	0x03B480FC FMUL S2, S2, S3
	0x03B48100 FADD S0, S9, S0
	0x03B48104 FADD S1, S10, S1
	0x03B48108 FADD S2, S11, S2
	0x03B4810C MOV X0, X31
	0x03B48110 BL 0x3887BE0
	0x03B48114 STP S0, S1, [X19]
	0x03B48118 STR S2, [X19 + 0x8]
	0x03B4811C LDP X20, X19, [X31 + 0x80]
	0x03B48120 LDP X22, X21, [X31 + 0x70]
	0x03B48124 LDP X24, X23, [X31 + 0x60]
	0x03B48128 LDR X30, [X31 + 0x50]
	0x03B4812C LDP D9, D8, [X31 + 0x40]
	0x03B48130 LDP D11, D10, [X31 + 0x30]
	0x03B48134 LDP D13, D12, [X31 + 0x20]
	0x03B48138 LDP D15, D14, [X31 + 0x10]
	0x03B4813C ADD X31, X31, 0x90
	0x03B48140 RET
	0x03B48144 STP X30, X21, [X31 - 0x20]!
	0x03B48148 STP X20, X19, [X31 + 0x10]
	0x03B4814C ADRP X20, 0x89A000
	0x03B48150 ADRP X21, 0x612000
	0x03B48154 LDRB W8, [X20 + 0x8A7]
	0x03B48158 LDR X21, [X21 + 0x438]
	0x03B4815C MOV X19, X0
	0x03B48160 TBNZ X8, 0x0, 0x3B48178
	0x03B48164 ADRP X0, 0x612000
	0x03B48168 LDR X0, [X0 + 0x438]
	0x03B4816C BL 0x1C16CF4
	0x03B48170 MOVZ W8, 0x1
	0x03B48174 STRB W8, [X20 + 0x8A7]
	0x03B48178 LDR X0, [X21]
	0x03B4817C LDR W8, [X0 + 0xE0]
	0x03B48180 CBNZ W8, 0x3B48188
	0x03B48184 BL 0x1C16DFC
	0x03B48188 MOV X0, X19
	0x03B4818C LDP X20, X19, [X31 + 0x10]
	0x03B48190 MOV X1, X31
	0x03B48194 LDP X30, X21, [X31], #0x20
	0x03B48198 B 0x3B3DB20
	0x03B4819C STP X30, X21, [X31 - 0x20]!
	0x03B481A0 STP X20, X19, [X31 + 0x10]
	0x03B481A4 ADRP X20, 0x89A000
	0x03B481A8 LDRB W8, [X20 + 0x8A8]
	0x03B481AC MOV X19, X0
	0x03B481B0 TBNZ X8, 0x0, 0x3B481C8
	0x03B481B4 ADRP X0, 0x612000
	0x03B481B8 LDR X0, [X0 + 0x920]
	0x03B481BC BL 0x1C16CF4
	0x03B481C0 MOVZ W8, 0x1
	0x03B481C4 STRB W8, [X20 + 0x8A8]
	0x03B481C8 CBZ X19, 0x3B482B8
	0x03B481CC ADRP X21, 0x612000
	0x03B481D0 LDR X8, [X19]
	0x03B481D4 LDR X21, [X21 + 0x920]
	0x03B481D8 LDRH W9, [X8 + 0x12E]
	0x03B481DC LDR X1, [X21]
	0x03B481E0 CBZ X9, 0x3B48204
	0x03B481E4 LDR X10, [X8 + 0xB0]
	0x03B481E8 ADD X10, X10, 0x8
	0x03B481EC LDUR X11, [X10 - 0x8]
	0x03B481F0 CMP X11, X1
	0x03B481F4 B.EQ 0x3B48214
	0x03B481F8 SUBS X9, X9, 0x1
	0x03B481FC ADD X10, X10, 0x10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x89B000
	009 Move W8, [X20+2207]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x613000
	016 Move X0, [X0+2312]
	017 Call 0x1C17CF4
	018 Move X0, 0x5AC000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2207], W8
	023 Compare X19, 0
	024 JumpIfEqual {84}
	025 Move X8, 0x613000
	026 Move X8, [X8+2312]
	027 Move X0, X19
	028 Move X1, [X8]
	029 Call 0x21E6C40, X0
	030 Compare X0, 0
	031 JumpIfEqual {84}
	032 Move X8, [X0+24]
	033 Move X19, X0
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X23, 0x5AC000
	036 Move X23, [X23+1432]
	037 Move X20, X31
	038 Move X22, X31
	039 And X8, X8, 0
	040 Add X24, X19, 32
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X21, [X24]
	043 Move X0, X21
	044 Call XRInteractableSnapVolume.SupportsTriggerCollider, X0
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {69}
	049 Compare X21, 0
	050 JumpIfEqual {84}
	051 Move X0, X21
	052 Move X1, X31
	053 Call Collider.get_isTrigger, X0
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfEqual {74}
	058 Move X0, [X23]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X0, X20
	064 Move X1, X31
	065 Move X2, X31
	066 Call Object.op_Equality, X0, X1
	067 And W31, W0, 1
	068 NotImplemented "Instruction CSEL not yet implemented."
	069 Move W8, [X19+24]
	070 Add X22, X22, 1
	071 Move X21, X20
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X21, X31
	074 Move X0, X21
	075 Move X20, [X31+48]
	076 Move X19, [X31+56]
	077 Move X22, [X31+32]
	078 Move X21, [X31+40]
	079 Move X24, [X31+16]
	080 Move X23, [X31+24]
	081 Move X30, [X31+64]
	082 Return X0
	083 Call 0x1C17F28
	084 Call 0x1C17F20

Method: System.Boolean SupportsTriggerCollider(UnityEngine.Collider col)

Disassembly:
	0x03B48420 MOV X19, X0
	0x03B48424 TBNZ X8, 0x0, 0x3B48448
	0x03B48428 ADRP X0, 0x612000
	0x03B4842C LDR X0, [X0 + 0x920]
	0x03B48430 BL 0x1C16CF4
	0x03B48434 ADRP X0, 0x612000
	0x03B48438 LDR X0, [X0 + 0x938]
	0x03B4843C BL 0x1C16CF4
	0x03B48440 MOVZ W8, 0x1
	0x03B48444 STRB W8, [X20 + 0x8AA]
	0x03B48448 LDR X1, [X21]
	0x03B4844C MOV X0, X19
	0x03B48450 BL 0x1C16E00
	0x03B48454 CBZ X0, 0x3B484AC
	0x03B48458 BL 0x3B4819C
	0x03B4845C CBZ X0, 0x3B484AC
	0x03B48460 ADRP X10, 0x612000
	0x03B48464 LDR X8, [X0]
	0x03B48468 LDR X10, [X10 + 0x938]
	0x03B4846C MOV X20, X0
	0x03B48470 LDRH W9, [X8 + 0x12E]
	0x03B48474 LDR X1, [X10]
	0x03B48478 CBZ X9, 0x3B4849C
	0x03B4847C LDR X10, [X8 + 0xB0]
	0x03B48480 ADD X10, X10, 0x8
	0x03B48484 LDUR X11, [X10 - 0x8]
	0x03B48488 CMP X11, X1
	0x03B4848C B.EQ 0x3B484B4
	0x03B48490 SUBS X9, X9, 0x1
	0x03B48494 ADD X10, X10, 0x10
	0x03B48498 B.NE 0x3B48484
	0x03B4849C MOVZ W2, 0x5
	0x03B484A0 MOV X0, X20
	0x03B484A4 BL 0x1C5C788
	0x03B484A8 B 0x3B484C4
	0x03B484AC MOV W0, W31
	0x03B484B0 B 0x3B484E4
	0x03B484B4 LDR W9, [X10]
	0x03B484B8 ADD W9, W9, 0x5
	0x03B484BC ADD X8, X8, W9, 0x4, SXTW
	0x03B484C0 ADD X0, X8, 0x138
	0x03B484C4 LDP X8, X1, [X0]
	0x03B484C8 MOV X0, X20
	0x03B484CC BLR X8
	0x03B484D0 CMP X0, 0x0
	0x03B484D4 CSET W8, NE
	0x03B484D8 CMP X0, X19
	0x03B484DC CSET W9, NE
	0x03B484E0 AND W0, W8, W9, 0x0
	0x03B484E4 LDP X20, X19, [X31 + 0x10]
	0x03B484E8 LDP X30, X21, [X31], #0x20
	0x03B484EC RET
	0x03B484F0 STR X30, [X31 - 0x20]!
	0x03B484F4 STP X20, X19, [X31 + 0x10]
	0x03B484F8 ADRP X20, 0x89A000
	0x03B484FC LDRB W8, [X20 + 0x8AB]
	0x03B48500 MOV X19, X0
	0x03B48504 TBNZ X8, 0x0, 0x3B48534
	0x03B48508 ADRP X0, 0x612000
	0x03B4850C LDR X0, [X0 + 0x328]
	0x03B48510 BL 0x1C16CF4
	0x03B48514 ADRP X0, 0x612000
	0x03B48518 LDR X0, [X0 + 0x940]
	0x03B4851C BL 0x1C16CF4
	0x03B48520 ADRP X0, 0x612000
	0x03B48524 LDR X0, [X0 + 0x948]
	0x03B48528 BL 0x1C16CF4
	0x03B4852C MOVZ W8, 0x1
	0x03B48530 STRB W8, [X20 + 0x8AB]
	0x03B48534 CBZ X19, 0x3B485EC
	0x03B48538 ADRP X20, 0x612000
	0x03B4853C LDR X8, [X19]
	0x03B48540 LDR X20, [X20 + 0x328]
	0x03B48544 LDRH W9, [X8 + 0x12E]
	0x03B48548 LDR X1, [X20]
	0x03B4854C CBZ X9, 0x3B48570
	0x03B48550 LDR X10, [X8 + 0xB0]
	0x03B48554 ADD X10, X10, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x89B000
	005 Move W8, [X20+2208]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {25}
	011 Move X0, 0x613000
	012 Move X0, [X0+2328]
	013 Call 0x1C17CF4
	014 Move X0, 0x5B2000
	015 Move X0, [X0+192]
	016 Call 0x1C17CF4
	017 Move X0, 0x607000
	018 Move X0, [X0+3744]
	019 Call 0x1C17CF4
	020 Move X0, 0x5B2000
	021 Move X0, [X0+200]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2208], W8
	025 Compare X19, 0
	026 JumpIfEqual {65}
	027 Move X9, 0x613000
	028 Move X9, [X9+2328]
	029 Move X8, [X19]
	030 Move X10, [X9]
	031 Move W9, [X8+304]
	032 Move W11, [X10+304]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X12, [X8+200]
	035 Add X11, X12, X11
	036 NotImplemented "Instruction LDUR not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X10, 0x5B2000
	039 Move X10, [X10+200]
	040 Move X10, [X10]
	041 Move W11, [X10+304]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X12, [X8+200]
	044 Add X11, X12, X11
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X10, 0x5B2000
	048 Move X10, [X10+192]
	049 Move X10, [X10]
	050 Move W11, [X10+304]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X12, [X8+200]
	053 Add X11, X12, X11
	054 NotImplemented "Instruction LDUR not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X10, 0x607000
	057 Move X10, [X10+3744]
	058 Move X10, [X10]
	059 Move W11, [X10+304]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X8, [X8+200]
	062 Add X8, X8, X11
	063 NotImplemented "Instruction LDUR not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move W0, W31
	066 Move W0, 1
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X30, [X31+32]
	070 Return X0
	071 Move X0, X19
	072 Move X20, [X31+16]
	073 Move X19, [X31+24]
	074 Move X1, X31
	075 Move X30, [X31+32]
	076 Call MeshCollider.get_convex, X0
	077 Return X0

Method: System.Void ValidateSnapCollider()

Disassembly:
	0x03B479B8 FCMP S10, S4
	0x03B479BC B.PL 0x3B47A94
	0x03B479C0 ADRP X19, 0x89A000
	0x03B479C4 LDRB W8, [X19 + 0x568]
	0x03B479C8 STP S0, S1, [X31]
	0x03B479CC STP S2, S3, [X31 + 0x8]
	0x03B479D0 CBNZ W8, 0x3B479E8
	0x03B479D4 ADRP X0, 0x5AC000
	0x03B479D8 LDR X0, [X0 + 0x5A8]
	0x03B479DC BL 0x1C16CF4
	0x03B479E0 MOVZ W8, 0x1
	0x03B479E4 STRB W8, [X19 + 0x568]
	0x03B479E8 ADRP X19, 0x5AC000
	0x03B479EC LDR X19, [X19 + 0x5A8]
	0x03B479F0 LDR X0, [X19]
	0x03B479F4 LDR W8, [X0 + 0xE0]
	0x03B479F8 CBNZ W8, 0x3B47A00
	0x03B479FC BL 0x1C16DFC
	0x03B47A00 FCVT S0, S10
	0x03B47A04 BL 0x3EB1B80
	0x03B47A08 ADRP X20, 0x89A000
	0x03B47A0C LDRB W8, [X20 + 0x585]
	0x03B47A10 MOV V8.16B, V0.16B
	0x03B47A14 CBNZ W8, 0x3B47A2C
	0x03B47A18 ADRP X0, 0x5AC000
	0x03B47A1C LDR X0, [X0 + 0x5A8]
	0x03B47A20 BL 0x1C16CF4
	0x03B47A24 MOVZ W8, 0x1
	0x03B47A28 STRB W8, [X20 + 0x585]
	0x03B47A2C LDR X0, [X19]
	0x03B47A30 FMUL S10, S10, S10
	0x03B47A34 FMOV S11, 1
	0x03B47A38 LDR W8, [X0 + 0xE0]
	0x03B47A3C CBNZ W8, 0x3B47A44
	0x03B47A40 BL 0x1C16DFC
	0x03B47A44 ADRP X20, 0x89A000
	0x03B47A48 LDRB W8, [X20 + 0x56A]
	0x03B47A4C FMOV S0, 1
	0x03B47A50 FSUB S10, S11, S10
	0x00000000 INVALID
	0x03B47A58 FSUB S11, S0, S9
	0x03B47A5C CBNZ W8, 0x3B47A78
	0x03B47A60 ADRP X0, 0x5AC000
	0x03B47A64 LDR X0, [X0 + 0x5A8]
	0x03B47A68 BL 0x1C16CF4
	0x03B47A6C FMOV S0, 1
	0x03B47A70 MOVZ W8, 0x1
	0x03B47A74 STRB W8, [X20 + 0x56A]
	0x03B47A78 LDR X0, [X19]
	0x03B47A7C FSQRT S10, S10
	0x03B47A80 FMUL S11, S11, S8
	0x03B47A84 LDR W8, [X0 + 0xE0]
	0x03B47A88 CBZ W8, 0x3B47B8C
	0x03B47A8C MOV W21, W31
	0x03B47A90 B 0x3B47BA0
	0x03B47A94 FMUL S6, S0, S15
	0x03B47A98 FMUL S5, S1, S14
	0x03B47A9C FMUL S4, S2, S13
	0x03B47AA0 FADD S5, S6, S5
	0x03B47AA4 FADD S5, S4, S5
	0x03B47AA8 FMUL S4, S3, S12
	0x03B47AAC FADD S4, S4, S5
	0x03B47AB0 FCMP S4, 0x0
	0x03B47AB4 B.PL 0x3B47AC8
	0x03B47AB8 FNEG S15, S15
	0x03B47ABC FNEG S14, S14
	0x03B47AC0 FNEG S13, S13
	0x03B47AC4 FNEG S12, S12
	0x03B47AC8 ADRP X19, 0x89A000
	0x03B47ACC LDRB W8, [X19 + 0x585]
	0x03B47AD0 FSUB S7, S15, S0
	0x03B47AD4 FSUB S6, S14, S1
	0x03B47AD8 FSUB S5, S13, S2
	0x03B47ADC FSUB S4, S12, S3
	0x03B47AE0 FMUL S8, S7, S9
	0x03B47AE4 FMUL S10, S6, S9
	0x03B47AE8 FMUL S12, S5, S9
	0x03B47AEC FMUL S13, S4, S9
	0x03B47AF0 CBNZ W8, 0x3B47B28
	0x03B47AF4 ADRP X0, 0x5AC000
	0x03B47AF8 LDR X0, [X0 + 0x5A8]
	0x03B47AFC MOV V9.16B, V3.16B
	0x03B47B00 MOV V11.16B, V2.16B
	0x03B47B04 MOV V14.16B, V1.16B
	0x03B47B08 MOV V15.16B, V0.16B
	0x03B47B0C BL 0x1C16CF4
	0x03B47B10 MOV V0.16B, V15.16B
	0x03B47B14 MOV V1.16B, V14.16B
	0x03B47B18 MOV V2.16B, V11.16B
	0x03B47B1C MOV V3.16B, V9.16B
	0x03B47B20 MOVZ W8, 0x1
	0x03B47B24 STRB W8, [X19 + 0x585]
	0x03B47B28 ADRP X8, 0x5AC000
	0x03B47B2C LDR X8, [X8 + 0x5A8]
	0x03B47B30 FADD S11, S0, S8
	0x03B47B34 FADD S10, S1, S10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x89C000
	006 Move X20, 0x5AD000
	007 Move W8, [X21+2209]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0x5AD000
	015 Move X0, [X0+2600]
	016 Call 0x1C17CF4
	017 Move X0, 0x5AD000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x614000
	021 Move X0, [X0+2272]
	022 Call 0x1C17CF4
	023 Move X0, 0x614000
	024 Move X0, [X0+2280]
	025 Call 0x1C17CF4
	026 Move X0, 0x614000
	027 Move X0, [X0+2288]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+2209], W8
	031 Move X0, [X20]
	032 Move X20, [X19+48]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X21, 0x5AD000
	038 Move X21, [X21+2600]
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Equality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {63}
	047 Move X0, [X21]
	048 Move X20, 0x614000
	049 Move W8, [X0+224]
	050 Move X20, [X20+2288]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, [X20]
	055 Move X1, X19
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X2, X31
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Call Debug.LogWarning, X0, X1
	062 Return 
	063 Move X0, [X19+48]
	064 Call XRInteractableSnapVolume.SupportsTriggerCollider, X0
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {83}
	069 Move X0, [X19+48]
	070 Compare X0, 0
	071 JumpIfEqual {127}
	072 Move X1, X31
	073 Call Collider.get_isTrigger, X0
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {99}
	078 Move X20, [X31+16]
	079 Move X19, [X31+24]
	080 Move X30, [X31+32]
	081 Move X21, [X31+40]
	082 Return 
	083 Move X0, [X21]
	084 Move W8, [X0+224]
	085 Compare W8, 0
	086 JumpIfNotEqual {88}
	087 Call 0x1C17DFC
	088 Move X8, 0x614000
	089 Move X8, [X8+2272]
	090 Move X1, X19
	091 Move X20, [X31+16]
	092 Move X19, [X31+24]
	093 Move X2, X31
	094 Move X0, [X8]
	095 Move X30, [X31+32]
	096 Move X21, [X31+40]
	097 Call Debug.LogError, X0, X1
	098 Return 
	099 Move X8, 0x614000
	100 Move X1, [X19+48]
	101 Move X8, [X8+2280]
	102 Move X2, X31
	103 Move X0, [X8]
	104 Call String.Format, X0, X1
	105 Move X8, [X21]
	106 Move X20, X0
	107 Move W9, [X8+224]
	108 Compare W9, 0
	109 JumpIfNotEqual {112}
	110 Move X0, X8
	111 Call 0x1C17DFC
	112 Move X0, X20
	113 Move X1, X19
	114 Move X2, X31
	115 Call Debug.LogWarning, X0, X1
	116 Move X0, [X19+48]
	117 Compare X0, 0
	118 JumpIfEqual {127}
	119 Move X20, [X31+16]
	120 Move X19, [X31+24]
	121 Move W1, 1
	122 Move X2, X31
	123 Move X30, [X31+32]
	124 Move X21, [X31+40]
	125 Call Collider.set_isTrigger, X0, X1
	126 Return 
	127 Call 0x1C17F20

Method: System.Void SetSnapColliderEnabled(System.Boolean enable)

Disassembly:
	0x03B48388 LDR X10, [X8 + 0xB0]
	0x03B4838C ADD X10, X10, 0x8
	0x03B48390 LDUR X11, [X10 - 0x8]
	0x03B48394 CMP X11, X1
	0x03B48398 B.EQ 0x3B483C8
	0x03B4839C SUBS X9, X9, 0x1
	0x03B483A0 ADD X10, X10, 0x10
	0x03B483A4 B.NE 0x3B48390
	0x03B483A8 MOVZ W2, 0x2
	0x03B483AC MOV X0, X19
	0x03B483B0 BL 0x1C5C788
	0x03B483B4 B 0x3B483D8
	0x03B483B8 LDP X20, X19, [X31 + 0x10]
	0x03B483BC MOV X0, X31
	0x03B483C0 LDR X30, [X31], #0x20
	0x03B483C4 RET
	0x03B483C8 LDR W9, [X10]
	0x03B483CC ADD W9, W9, 0x2
	0x03B483D0 ADD X8, X8, W9, 0x4, SXTW
	0x03B483D4 ADD X0, X8, 0x138
	0x03B483D8 LDP X8, X1, [X0]
	0x03B483DC MOV X0, X19
	0x03B483E0 BLR X8
	0x03B483E4 CBZ X0, 0x3B48404
	0x03B483E8 ADRP X8, 0x612000
	0x03B483EC LDR X8, [X8 + 0x930]
	0x03B483F0 LDP X20, X19, [X31 + 0x10]
	0x03B483F4 MOV W1, W31
	0x03B483F8 LDR X2, [X8]
	0x03B483FC LDR X30, [X31], #0x20
	0x03B48400 B 0x301BCCC
	0x03B48404 BL 0x1C16F20
	0x03B48408 STP X30, X21, [X31 - 0x20]!
	0x03B4840C STP X20, X19, [X31 + 0x10]
	0x03B48410 ADRP X20, 0x89A000
	0x03B48414 ADRP X21, 0x612000
	0x03B48418 LDRB W8, [X20 + 0x8AA]
	0x03B4841C LDR X21, [X21 + 0x920]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x89B000
	007 Move X21, 0x5AC000
	008 Move W8, [X22+2210]
	009 Move X21, [X21+1432]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5AC000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2210], W8
	021 Move X0, [X21]
	022 Move X21, [X20+48]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X21
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Inequality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {47}
	035 Move X0, [X20+48]
	036 Compare X0, 0
	037 JumpIfEqual {53}
	038 And W1, W19, 1
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X2, X31
	044 Move X30, [X31+48]
	045 Call Collider.set_enabled, X0, X1
	046 Return 
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Return 
	053 Call 0x1C17F20

Method: UnityEngine.Vector3 GetClosestPoint(UnityEngine.Vector3 point)

Disassembly:
	0x03B48558 LDUR X11, [X10 - 0x8]
	0x03B4855C CMP X11, X1
	0x03B48560 B.EQ 0x3B48580
	0x03B48564 SUBS X9, X9, 0x1
	0x03B48568 ADD X10, X10, 0x10
	0x03B4856C B.NE 0x3B48558
	0x03B48570 MOVZ W2, 0x2
	0x03B48574 MOV X0, X19
	0x03B48578 BL 0x1C5C788
	0x03B4857C B 0x3B48590
	0x03B48580 LDR W9, [X10]
	0x03B48584 ADD W9, W9, 0x2
	0x03B48588 ADD X8, X8, W9, 0x4, SXTW
	0x03B4858C ADD X0, X8, 0x138
	0x03B48590 LDP X8, X1, [X0]
	0x03B48594 MOV X0, X19
	0x03B48598 BLR X8
	0x03B4859C CBZ X0, 0x3B48638
	0x03B485A0 LDR W8, [X0 + 0x18]
	0x03B485A4 CMP W8, 0x1
	0x03B485A8 B.LT 0x3B485EC
	0x03B485AC LDR X8, [X19]
	0x03B485B0 LDR X1, [X20]
	0x03B485B4 LDRH W9, [X8 + 0x12E]
	0x03B485B8 CBZ X9, 0x3B485DC
	0x03B485BC LDR X10, [X8 + 0xB0]
	0x03B485C0 ADD X10, X10, 0x8
	0x03B485C4 LDUR X11, [X10 - 0x8]
	0x03B485C8 CMP X11, X1
	0x03B485CC B.EQ 0x3B485FC
	0x03B485D0 SUBS X9, X9, 0x1
	0x03B485D4 ADD X10, X10, 0x10
	0x03B485D8 B.NE 0x3B485C4
	0x03B485DC MOVZ W2, 0x2
	0x03B485E0 MOV X0, X19
	0x03B485E4 BL 0x1C5C788
	0x03B485E8 B 0x3B4860C
	0x03B485EC LDP X20, X19, [X31 + 0x10]
	0x03B485F0 MOV X0, X31
	0x03B485F4 LDR X30, [X31], #0x20
	0x03B485F8 RET
	0x03B485FC LDR W9, [X10]
	0x03B48600 ADD W9, W9, 0x2
	0x03B48604 ADD X8, X8, W9, 0x4, SXTW
	0x03B48608 ADD X0, X8, 0x138
	0x03B4860C LDP X8, X1, [X0]
	0x03B48610 MOV X0, X19
	0x03B48614 BLR X8
	0x03B48618 CBZ X0, 0x3B48638
	0x03B4861C ADRP X8, 0x612000
	0x03B48620 LDR X8, [X8 + 0x948]
	0x03B48624 LDP X20, X19, [X31 + 0x10]
	0x03B48628 MOV W1, W31
	0x03B4862C LDR X2, [X8]
	0x03B48630 LDR X30, [X31], #0x20
	0x03B48634 B 0x301BCCC
	0x03B48638 BL 0x1C16F20
	0x03B4863C LDR V0, [X0 + 0x20]
	0x03B48640 RET
	0x03B48644 STR D8, [X31 - 0x20]!
	0x03B48648 STR X30, [X31 + 0x8]
	0x03B4864C STP X20, X19, [X31 + 0x10]
	0x03B48650 ADRP X20, 0x89A000
	0x03B48654 LDRB W8, [X20 + 0x8AC]
	0x03B48658 MOV V8.16B, V0.16B
	0x03B4865C MOV X19, X0
	0x03B48660 TBNZ X8, 0x0, 0x3B48678
	0x03B48664 ADRP X0, 0x612000
	0x03B48668 LDR X0, [X0 + 0x950]
	0x03B4866C BL 0x1C16CF4
	0x03B48670 MOVZ W8, 0x1
	0x03B48674 STRB W8, [X20 + 0x8AC]
	0x03B48678 LDR X0, [X19 + 0x1C0]
	0x03B4867C MOVZ W8, 0x1
	0x03B48680 STR S8, [X19 + 0x20]
	0x03B48684 STRB W8, [X19 + 0xC5]
	0x03B48688 CBZ X0, 0x3B486A8
	0x03B4868C ADRP X8, 0x612000
	0x03B48690 LDR X8, [X8 + 0x950]
	0x03B48694 LDP X20, X19, [X31 + 0x10]
	0x03B48698 LDR X30, [X31 + 0x8]
	0x03B4869C LDR X1, [X8]
	0x03B486A0 LDR V8, [X31], #0x20
	0x03B486A4 B 0x28CF2B8
	0x03B486A8 BL 0x1C16F20
	0x03B486AC LDRB W0, [X0 + 0x24]
	0x03B486B0 RET
	0x03B486B4 AND W8, W1, 0x1
	0x03B486B8 STRB W8, [X0 + 0x24]
	0x03B486BC RET
	0x03B486C0 LDR V0, [X0 + 0x28]
	0x03B486C4 RET
	0x03B486C8 STR S0, [X0 + 0x28]
	0x03B486CC RET
	0x03B486D0 LDRB W0, [X0 + 0x2C]
	0x03B486D4 RET
	0x03B486D8 AND W8, W1, 0x1
	0x03B486DC STRB W8, [X0 + 0x2C]
	0x03B486E0 RET
	0x03B486E4 LDR V0, [X0 + 0x30]
	0x03B486E8 RET
	0x03B486EC STR S0, [X0 + 0x30]
	0x03B486F0 RET
	0x03B486F4 LDRB W0, [X0 + 0x34]
	0x03B486F8 RET
	0x03B486FC AND W8, W1, 0x1
	0x03B48700 STRB W8, [X0 + 0x34]
	0x03B48704 RET
	0x03B48708 LDR V0, [X0 + 0x38]
	0x03B4870C RET
	0x03B48710 STR S0, [X0 + 0x38]
	0x03B48714 RET
	0x03B48718 LDR V0, [X0 + 0x3C]
	0x03B4871C RET
	0x03B48720 STR S0, [X0 + 0x3C]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x89B000
	009 Move X21, 0x5AC000
	010 Move W8, [X20+2211]
	011 Move X21, [X21+1432]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x613000
	021 Move X0, [X0+2264]
	022 Call 0x1C17CF4
	023 Move X0, 0x5AC000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+2211], W8
	028 Move X0, [X21]
	029 Move X20, [X19+64]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Equality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {80}
	042 Move X0, [X19+64]
	043 Compare X0, 0
	044 JumpIfEqual {128}
	045 Move X1, X31
	046 Call Component.get_gameObject, X0
	047 Compare X0, 0
	048 JumpIfEqual {128}
	049 Move X1, X31
	050 Call GameObject.get_activeInHierarchy, X0
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {80}
	055 Move X0, [X19+64]
	056 Compare X0, 0
	057 JumpIfEqual {128}
	058 Move X1, X31
	059 Call Collider.get_enabled, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {80}
	064 Move X0, [X19+64]
	065 Compare X0, 0
	066 JumpIfEqual {128}
	067 Move V1, V9
	068 Move V2, V8
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X30, [X31+32]
	072 Move X21, [X31+40]
	073 Move D9, [X31+16]
	074 Move D8, [X31+24]
	075 Move V0, V10
	076 Move X1, X31
	077 Move V10, [X31+64]
	078 Call Collider.ClosestPoint, X0, X1
	079 Return X0
	080 Move X20, [X19+72]
	081 Compare X20, 0
	082 JumpIfEqual {123}
	083 Move X8, [X20]
	084 Move X0, [X21]
	085 Move W10, [X8+304]
	086 Move W9, [X0+304]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X8, [X8+200]
	089 Add X8, X8, X9
	090 NotImplemented "Instruction LDUR not yet implemented."
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X0, X20
	097 Move X1, X31
	098 Move X2, X31
	099 Call Object.op_Inequality, X0, X1
	100 Move TEMP, X0
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfNotEqual {123}
	104 Move X20, [X19+72]
	105 Compare X20, 0
	106 JumpIfEqual {128}
	107 Move X10, 0x613000
	108 Move X8, [X20]
	109 Move X10, [X10+2264]
	110 NotImplemented "Instruction LDRH not yet implemented."
	111 Move X1, [X10]
	112 Compare X9, 0
	113 JumpIfEqual {120}
	114 Move X10, [X8+176]
	115 Add X10, X10, 8
	116 NotImplemented "Instruction LDUR not yet implemented."
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Subtract X9, X9, 1
	119 Add X10, X10, 16
	120 Move W2, 6
	121 Move X0, X20
	122 Call 0x1C5D788
	123 Move X0, X19
	124 Move X1, X31
	125 Call Component.get_transform, X0
	126 Compare X0, 0
	127 JumpIfNotEqual {139}
	128 Call 0x1C17F20
	129 Move W9, [X10]
	130 Add W9, W9, 6
	131 Add X8, X8, W9
	132 Add X0, X8, 312
	133 Move X8, [X0]
	134 Move X1, [X0+8]
	135 Move X0, X20
	136 NotImplemented "Instruction BLR not yet implemented."
	137 Compare X0, 0
	138 JumpIfEqual {128}
	139 Move X20, [X31+48]
	140 Move X19, [X31+56]
	141 Move X30, [X31+32]
	142 Move X21, [X31+40]
	143 Move D9, [X31+16]
	144 Move D8, [X31+24]
	145 Move X1, X31
	146 Move V10, [X31+64]
	147 Call Transform.get_position, X0
	148 Return X0

Method: UnityEngine.Vector3 GetClosestPointOfAttachTransform(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor)

Disassembly:
	0x03B48724 RET
	0x03B48728 LDR X0, [X0 + 0x40]
	0x03B4872C RET
	0x03B48730 MOVZ W8, 0x1
	0x03B48734 STR X1, [X0 + 0x40]
	0x03B48738 STRB W8, [X0 + 0xC5]
	0x03B4873C RET
	0x03B48740 LDRB W0, [X0 + 0x48]
	0x03B48744 RET
	0x03B48748 AND W8, W1, 0x1
	0x03B4874C STRB W8, [X0 + 0x48]
	0x03B48750 RET
	0x03B48754 LDR X0, [X0 + 0x50]
	0x03B48758 RET
	0x03B4875C STR X1, [X0 + 0x50]
	0x03B48760 RET
	0x03B48764 LDR X0, [X0 + 0x58]
	0x03B48768 RET
	0x03B4876C STR X1, [X0 + 0x58]
	0x03B48770 RET
	0x03B48774 LDR X0, [X0 + 0x60]
	0x03B48778 RET
	0x03B4877C STR X1, [X0 + 0x60]
	0x03B48780 RET
	0x03B48784 LDRB W0, [X0 + 0x68]
	0x03B48788 RET
	0x03B4878C AND W8, W1, 0x1
	0x03B48790 STRB W8, [X0 + 0x68]
	0x03B48794 RET
	0x03B48798 LDRB W0, [X0 + 0x69]
	0x03B4879C RET
	0x03B487A0 AND W8, W1, 0x1
	0x03B487A4 STRB W8, [X0 + 0x69]
	0x03B487A8 RET
	0x03B487AC LDR V0, [X0 + 0x6C]
	0x03B487B0 RET
	0x03B487B4 STR S0, [X0 + 0x6C]
	0x03B487B8 RET
	0x03B487BC LDR V0, [X0 + 0x70]
	0x03B487C0 RET
	0x03B487C4 STR S0, [X0 + 0x70]
	0x03B487C8 FMUL S0, S0, S0
	0x03B487CC STR S0, [X0 + 0xA4]
	0x03B487D0 RET
	0x03B487D4 LDR X0, [X0 + 0x78]
	0x03B487D8 RET
	0x03B487DC STR X30, [X31 - 0x30]!
	0x03B487E0 STP X22, X21, [X31 + 0x10]
	0x03B487E4 STP X20, X19, [X31 + 0x20]
	0x03B487E8 ADRP X22, 0x89A000
	0x03B487EC ADRP X21, 0x5AB000
	0x03B487F0 LDRB W8, [X22 + 0x8AD]
	0x03B487F4 LDR X21, [X21 + 0x970]
	0x03B487F8 MOV X20, X1
	0x03B487FC MOV X19, X0
	0x03B48800 TBNZ X8, 0x0, 0x3B48818
	0x03B48804 ADRP X0, 0x5AB000
	0x03B48808 LDR X0, [X0 + 0x970]
	0x03B4880C BL 0x1C16CF4
	0x03B48810 MOVZ W8, 0x1
	0x03B48814 STRB W8, [X22 + 0x8AD]
	0x03B48818 STR X20, [X19 + 0x78]
	0x03B4881C LDR X0, [X21]
	0x03B48820 LDR W8, [X0 + 0xE0]
	0x03B48824 CBNZ W8, 0x3B4882C
	0x03B48828 BL 0x1C16DFC
	0x03B4882C MOV X0, X31
	0x03B48830 BL 0x3C018E4
	0x03B48834 TBZ X0, 0x0, 0x3B4884C
	0x03B48838 MOV X0, X19
	0x03B4883C LDP X20, X19, [X31 + 0x20]
	0x03B48840 LDP X22, X21, [X31 + 0x10]
	0x03B48844 LDR X30, [X31], #0x30
	0x03B48848 B 0x3B4885C
	0x03B4884C LDP X20, X19, [X31 + 0x20]
	0x03B48850 LDP X22, X21, [X31 + 0x10]
	0x03B48854 LDR X30, [X31], #0x30
	0x03B48858 RET
	0x03B4885C SUB X31, X31, 0x30
	0x03B48860 STP X30, X21, [X31 + 0x10]
	0x03B48864 STP X20, X19, [X31 + 0x20]
	0x03B48868 ADRP X20, 0x89A000
	0x03B4886C ADRP X21, 0x5AB000
	0x03B48870 LDRB W8, [X20 + 0x8C4]
	0x03B48874 LDR X21, [X21 + 0x598]
	0x03B48878 MOV X19, X0
	0x03B4887C TBNZ X8, 0x0, 0x3B488A0
	0x03B48880 ADRP X0, 0x5AB000
	0x03B48884 LDR X0, [X0 + 0xD78]
	0x03B48888 BL 0x1C16CF4
	0x03B4888C ADRP X0, 0x5AB000
	0x03B48890 LDR X0, [X0 + 0x598]
	0x03B48894 BL 0x1C16CF4
	0x03B48898 MOVZ W8, 0x1
	0x03B4889C STRB W8, [X20 + 0x8C4]
	0x03B488A0 LDR X0, [X21]
	0x03B488A4 LDR X20, [X19 + 0x78]
	0x03B488A8 LDR W8, [X0 + 0xE0]
	0x03B488AC CBNZ W8, 0x3B488B4
	0x03B488B0 BL 0x1C16DFC
	0x03B488B4 MOV X0, X20
	0x03B488B8 MOV X1, X31
	0x03B488BC MOV X2, X31
	0x03B488C0 BL 0x3C3883C
	0x03B488C4 TBNZ X0, 0x0, 0x3B48930
	0x03B488C8 LDR X0, [X19 + 0x78]
	0x03B488CC CBZ X0, 0x3B48940
	0x03B488D0 MOV X1, X31
	0x03B488D4 BL 0x3C35BD8
	0x03B488D8 STR W0, [X31 + 0x8]
	0x03B488DC ADD X0, X31, 0x8
	0x03B488E0 MOV X1, X31
	0x03B488E4 BL 0x3C46324
	0x03B488E8 LDR X20, [X19 + 0x78]
	0x03B488EC TBNZ X0, 0x0, 0x3B4891C
	0x03B488F0 LDR X0, [X21]
	0x03B488F4 LDR W8, [X0 + 0xE0]
	0x03B488F8 CBNZ W8, 0x3B48900
	0x03B488FC BL 0x1C16DFC
	0x03B48900 ADRP X8, 0x5AB000
	0x03B48904 LDR X8, [X8 + 0xD78]
	0x03B48908 MOV X0, X20
	0x03B4890C LDR X1, [X8]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x89B000
	010 Move W8, [X21+2212]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x613000
	018 Move X0, [X0+2264]
	019 Call 0x1C17CF4
	020 Move X0, 0x5AC000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2212], W8
	025 Move X22, 0x5AC000
	026 Move X21, [X19+72]
	027 Move X22, [X22+1432]
	028 Compare X21, 0
	029 JumpIfEqual {70}
	030 Move X8, [X21]
	031 Move X0, [X22]
	032 Move W10, [X8+304]
	033 Move W9, [X0+304]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X8, [X8+200]
	036 Add X8, X8, X9
	037 NotImplemented "Instruction LDUR not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X21
	044 Move X1, X31
	045 Move X2, X31
	046 Call Object.op_Inequality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {70}
	051 Move X21, [X19+72]
	052 Compare X21, 0
	053 JumpIfEqual {150}
	054 Move X10, 0x613000
	055 Move X8, [X21]
	056 Move X10, [X10+2264]
	057 NotImplemented "Instruction LDRH not yet implemented."
	058 Move X1, [X10]
	059 Compare X9, 0
	060 JumpIfEqual {67}
	061 Move X10, [X8+176]
	062 Add X10, X10, 8
	063 NotImplemented "Instruction LDUR not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Subtract X9, X9, 1
	066 Add X10, X10, 16
	067 Move W2, 7
	068 Move X0, X21
	069 Call 0x1C5D788
	070 Move X0, X19
	071 Move X1, X31
	072 Call Component.get_transform, X0
	073 Compare X0, 0
	074 JumpIfNotEqual {86}
	075 Move W9, [X10]
	076 Add W9, W9, 7
	077 Add X8, X8, W9
	078 Add X0, X8, 312
	079 Move X8, [X0]
	080 Move X2, [X0+8]
	081 Move X0, X21
	082 Move X1, X20
	083 NotImplemented "Instruction BLR not yet implemented."
	084 Compare X0, 0
	085 JumpIfEqual {150}
	086 Move X1, X31
	087 Call Transform.get_position, X0
	088 Move X0, [X22]
	089 Move X20, [X19+64]
	090 Move V8, V0
	091 Move V9, V1
	092 Move W8, [X0+224]
	093 Move V10, V2
	094 Compare W8, 0
	095 JumpIfNotEqual {97}
	096 Call 0x1C17DFC
	097 Move X0, X20
	098 Move X1, X31
	099 Move X2, X31
	100 Call Object.op_Equality, X0, X1
	101 Move TEMP, X0
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfEqual {138}
	105 Move X0, [X19+64]
	106 Compare X0, 0
	107 JumpIfEqual {150}
	108 Move X1, X31
	109 Call Component.get_gameObject, X0
	110 Compare X0, 0
	111 JumpIfEqual {150}
	112 Move X1, X31
	113 Call GameObject.get_activeInHierarchy, X0
	114 Move TEMP, X0
	115 And TEMP, TEMP, 1
	116 Compare TEMP, 1
	117 JumpIfNotEqual {138}
	118 Move X0, [X19+64]
	119 Compare X0, 0
	120 JumpIfEqual {150}
	121 Move X1, X31
	122 Call Collider.get_enabled, X0
	123 Move TEMP, X0
	124 And TEMP, TEMP, 1
	125 Compare TEMP, 1
	126 JumpIfNotEqual {138}
	127 Move X0, [X19+64]
	128 Compare X0, 0
	129 JumpIfEqual {150}
	130 Move V0, V8
	131 Move V1, V9
	132 Move V2, V10
	133 Move X1, X31
	134 Call Collider.ClosestPoint, X0, X1
	135 Move V8, V0
	136 Move V9, V1
	137 Move V10, V2
	138 Move V0, V8
	139 Move V1, V9
	140 Move X20, [X31+48]
	141 Move X19, [X31+56]
	142 Move X22, [X31+32]
	143 Move X21, [X31+40]
	144 Move X30, [X31+24]
	145 Move D9, [X31+8]
	146 Move D8, [X31+16]
	147 Move V2, V10
	148 Move V10, [X31+64]
	149 Return X0
	150 Call 0x1C17F20

Method: System.Void SetBoundInteractable(UnityEngine.XR.Interaction.Toolkit.IXRInteractable source)

Disassembly:
	0x03B47CB0 MOV X0, X31
	0x03B47CB4 BL 0x3887BE4
	0x03B47CB8 FSUB S0, S0, S9
	0x03B47CBC FSUB S1, S1, S10
	0x03B47CC0 FSUB S2, S2, S11
	0x03B47CC4 FMUL S0, S13, S0
	0x03B47CC8 FMUL S1, S13, S1
	0x03B47CCC FMUL S2, S13, S2
	0x03B47CD0 FADD S0, S9, S0
	0x03B47CD4 FADD S1, S10, S1
	0x03B47CD8 FADD S2, S11, S2
	0x03B47CDC MOV X0, X31
	0x03B47CE0 BL 0x3887BE0
	0x03B47CE4 LDP S6, S4, [X22 + 0xC]
	0x03B47CE8 LDP S5, S3, [X22 + 0x14]
	0x03B47CEC STP S0, S1, [X22]
	0x03B47CF0 STR S2, [X22 + 0x8]
	0x03B47CF4 MOV V0.16B, V6.16B
	0x03B47CF8 MOV V1.16B, V4.16B
	0x03B47CFC MOV V2.16B, V5.16B
	0x03B47D00 MOV X0, X31
	0x03B47D04 BL 0x38BD218
	0x03B47D08 MOV V11.16B, V2.16B
	0x03B47D0C LDP S2, S4, [X23 + 0x14]
	0x03B47D10 MOV V9.16B, V0.16B
	0x03B47D14 MOV V10.16B, V1.16B
	0x03B47D18 LDP S0, S1, [X23 + 0xC]
	0x03B47D1C MOV V12.16B, V3.16B
	0x03B47D20 MOV V3.16B, V4.16B
	0x03B47D24 MOV X0, X31
	0x03B47D28 BL 0x38BD218
	0x03B47D2C MOV V4.16B, V0.16B
	0x03B47D30 MOV V5.16B, V1.16B
	0x03B47D34 MOV V6.16B, V2.16B
	0x03B47D38 MOV V7.16B, V3.16B
	0x03B47D3C MOV V0.16B, V9.16B
	0x03B47D40 MOV V1.16B, V10.16B
	0x03B47D44 MOV V2.16B, V11.16B
	0x03B47D48 MOV V3.16B, V12.16B
	0x03B47D4C MOV X0, X31
	0x03B47D50 STR S13, [X31]
	0x03B47D54 BL 0x3B47948
	0x03B47D58 MOV X0, X31
	0x03B47D5C BL 0x38BD214
	0x03B47D60 STP S0, S1, [X22 + 0xC]
	0x03B47D64 STP S2, S3, [X22 + 0x14]
	0x03B47D68 LDP S0, S1, [X20]
	0x03B47D6C LDR V2, [X20 + 0x8]
	0x03B47D70 MOV X0, X31
	0x03B47D74 BL 0x3887BE4
	0x03B47D78 LDR V3, [X21 + 0x8]
	0x03B47D7C MOV V9.16B, V0.16B
	0x03B47D80 MOV V10.16B, V1.16B
	0x03B47D84 LDP S0, S1, [X21]
	0x03B47D88 MOV V11.16B, V2.16B
	0x03B47D8C MOV V2.16B, V3.16B
	0x03B47D90 MOV X0, X31
	0x03B47D94 BL 0x3887BE4
	0x03B47D98 FSUB S0, S0, S9
	0x03B47D9C FSUB S1, S1, S10
	0x03B47DA0 FSUB S2, S2, S11
	0x03B47DA4 FMUL S0, S13, S0
	0x03B47DA8 FMUL S1, S13, S1
	0x03B47DAC FMUL S2, S13, S2
	0x03B47DB0 FADD S0, S9, S0
	0x03B47DB4 FADD S1, S10, S1
	0x03B47DB8 FADD S2, S11, S2
	0x03B47DBC MOV X0, X31
	0x03B47DC0 BL 0x3887BE0
	0x03B47DC4 STP S0, S1, [X20]
	0x03B47DC8 STR S2, [X20 + 0x8]
	0x03B47DCC LDR V0, [X19]
	0x03B47DD0 LDP X22, X21, [X31 + 0x50]
	0x03B47DD4 LDP X30, X23, [X31 + 0x40]
	0x03B47DD8 LDP D11, D10, [X31 + 0x20]
	0x03B47DDC FADD S0, S0, S8
	0x03B47DE0 STR S0, [X19]
	0x03B47DE4 LDP X20, X19, [X31 + 0x60]
	0x03B47DE8 LDP D9, D8, [X31 + 0x30]
	0x03B47DEC LDP D13, D12, [X31 + 0x10]
	0x03B47DF0 ADD X31, X31, 0x70
	0x03B47DF4 RET
	0x03B47DF8 SUB X31, X31, 0x90
	0x03B47DFC STP D15, D14, [X31 + 0x10]
	0x03B47E00 STP D13, D12, [X31 + 0x20]
	0x03B47E04 STP D11, D10, [X31 + 0x30]
	0x03B47E08 STP D9, D8, [X31 + 0x40]
	0x03B47E0C STR X30, [X31 + 0x50]
	0x03B47E10 STP X24, X23, [X31 + 0x60]
	0x03B47E14 STP X22, X21, [X31 + 0x70]
	0x03B47E18 STP X20, X19, [X31 + 0x80]
	0x03B47E1C MOV V15.16B, V5.16B
	0x03B47E20 MOV W21, W6
	0x03B47E24 MOV V8.16B, V4.16B
	0x03B47E28 MOV V12.16B, V3.16B
	0x03B47E2C MOV W24, W5
	0x03B47E30 MOV X20, X3
	0x03B47E34 MOV X23, X2
	0x03B47E38 MOV X19, X1
	0x03B47E3C MOV X22, X0
	0x03B47E40 STP S6, S0, [X31 + 0x58]
	0x03B47E44 TBZ X4, 0x0, 0x3B47F5C
	0x03B47E48 MOV V13.16B, V2.16B
	0x03B47E4C MOV V14.16B, V1.16B
	0x03B47E50 MOV V9.16B, V0.16B
	0x03B47E54 LDP S0, S1, [X22]
	0x03B47E58 LDR V2, [X22 + 0x8]
	0x03B47E5C MOV X0, X31
	0x03B47E60 BL 0x3887BE4
	0x03B47E64 LDR V3, [X23 + 0x8]
	0x03B47E68 MOV V10.16B, V12.16B
	0x03B47E6C MOV V12.16B, V9.16B
	0x03B47E70 STR S8, [X31 + 0xC]
	0x03B47E74 MOV V8.16B, V15.16B
	0x03B47E78 MOV V15.16B, V0.16B
	0x03B47E7C MOV V9.16B, V1.16B
	0x03B47E80 LDP S0, S1, [X23]
	0x03B47E84 MOV V11.16B, V2.16B
	0x03B47E88 MOV V2.16B, V3.16B
	0x03B47E8C MOV X0, X31
	0x03B47E90 BL 0x3887BE4
	0x03B47E94 FMUL S3, S12, S14
	0x03B47E98 FSUB S0, S0, S15
	0x03B47E9C FMUL S0, S3, S0
	0x03B47EA0 FSUB S1, S1, S9
	0x03B47EA4 FSUB S2, S2, S11
	0x03B47EA8 FADD S0, S15, S0
	0x03B47EAC MOV V15.16B, V8.16B
	0x03B47EB0 LDR V8, [X31 + 0xC]
	0x03B47EB4 FMUL S1, S3, S1
	0x03B47EB8 FMUL S2, S3, S2
	0x03B47EBC FADD S1, S9, S1
	0x03B47EC0 FADD S2, S11, S2
	0x03B47EC4 MOV X0, X31
	0x03B47EC8 MOV V12.16B, V10.16B
	0x03B47ECC BL 0x3887BE0
	0x03B47ED0 MOV X0, X31
	0x03B47ED4 STP S0, S1, [X22]
	0x03B47ED8 STR S2, [X22 + 0x8]
	0x03B47EDC BL 0x3887BE4
	0x03B47EE0 LDR V3, [X23 + 0x8]
	0x03B47EE4 MOV V9.16B, V0.16B
	0x03B47EE8 MOV V11.16B, V1.16B
	0x03B47EEC LDP S0, S1, [X23]
	0x03B47EF0 MOV V14.16B, V2.16B
	0x03B47EF4 MOV V2.16B, V3.16B
	0x03B47EF8 MOV X0, X31
	0x03B47EFC BL 0x3887BE4
	0x03B47F00 FSUB S0, S0, S9
	0x03B47F04 FSUB S1, S1, S11
	0x03B47F08 FSUB S2, S2, S14
	0x03B47F0C FMUL S0, S0, S13
	0x03B47F10 FMUL S1, S1, S13
	0x03B47F14 FMUL S2, S2, S13
	0x03B47F18 FADD S0, S9, S0
	0x03B47F1C FADD S1, S11, S1
	0x03B47F20 FADD S2, S14, S2
	0x03B47F24 MOV X0, X31
	0x03B47F28 BL 0x3887BE0
	0x03B47F2C STP S0, S1, [X22]
	0x03B47F30 STR S2, [X22 + 0x8]
	0x03B47F34 TBNZ X24, 0x0, 0x3B47F70
	0x03B47F38 LDUR V0, [X23 + 0xC]
	0x03B47F3C LDR V10, [X31 + 0x5C]
	0x03B47F40 STUR V0, [X22 + 0xC]
	0x03B47F44 TBNZ X21, 0x0, 0x3B48054
	0x03B47F48 LDR W8, [X20 + 0x8]
	0x03B47F4C LDR X9, [X20]
	0x03B47F50 STR W8, [X19 + 0x8]
	0x03B47F54 STR X9, [X19]
	0x03B47F58 B 0x3B4811C
	0x03B47F5C LDR W8, [X23 + 0x8]
	0x03B47F60 LDR X9, [X23]
	0x03B47F64 STR W8, [X22 + 0x8]
	0x03B47F68 STR X9, [X22]
	0x03B47F6C TBZ X24, 0x0, 0x3B47F38
	0x03B47F70 LDP S0, S1, [X22 + 0xC]
	0x03B47F74 LDP S2, S3, [X22 + 0x14]
	0x03B47F78 MOV X0, X31
	0x03B47F7C BL 0x38BD218
	0x03B47F80 MOV V13.16B, V2.16B
	0x03B47F84 LDP S2, S4, [X23 + 0x14]
	0x03B47F88 MOV V9.16B, V0.16B
	0x03B47F8C MOV V11.16B, V1.16B
	0x03B47F90 LDP S0, S1, [X23 + 0xC]
	0x03B47F94 MOV V14.16B, V3.16B
	0x03B47F98 MOV V3.16B, V4.16B
	0x03B47F9C MOV X0, X31
	0x03B47FA0 BL 0x38BD218
	0x03B47FA4 LDR V10, [X31 + 0x5C]
	0x03B47FA8 MOV V4.16B, V0.16B
	0x03B47FAC MOV V5.16B, V1.16B
	0x03B47FB0 MOV V6.16B, V2.16B
	0x03B47FB4 FMUL S0, S10, S12
	0x03B47FB8 MOV V7.16B, V3.16B
	0x03B47FBC STR S0, [X31]
	0x03B47FC0 MOV V0.16B, V9.16B
	0x03B47FC4 MOV V1.16B, V11.16B
	0x03B47FC8 MOV V2.16B, V13.16B
	0x03B47FCC MOV V3.16B, V14.16B
	0x03B47FD0 MOV X0, X31
	0x03B47FD4 BL 0x3B47948
	0x03B47FD8 MOV X0, X31
	0x03B47FDC BL 0x38BD214
	0x03B47FE0 MOV X0, X31
	0x03B47FE4 STP S0, S1, [X22 + 0xC]
	0x03B47FE8 STP S2, S3, [X22 + 0x14]
	0x03B47FEC BL 0x38BD218
	0x03B47FF0 MOV V12.16B, V2.16B
	0x03B47FF4 LDP S2, S4, [X23 + 0x14]
	0x03B47FF8 MOV V9.16B, V0.16B
	0x03B47FFC MOV V11.16B, V1.16B
	0x03B48000 LDP S0, S1, [X23 + 0xC]
	0x03B48004 MOV V13.16B, V3.16B
	0x03B48008 MOV V3.16B, V4.16B
	0x03B4800C MOV X0, X31
	0x03B48010 BL 0x38BD218
	0x03B48014 MOV V4.16B, V0.16B
	0x03B48018 MOV V5.16B, V1.16B
	0x03B4801C MOV V6.16B, V2.16B
	0x03B48020 MOV V7.16B, V3.16B
	0x03B48024 MOV V0.16B, V9.16B
	0x03B48028 MOV V1.16B, V11.16B
	0x03B4802C MOV V2.16B, V12.16B
	0x03B48030 MOV V3.16B, V13.16B
	0x03B48034 MOV X0, X31
	0x03B48038 STR S8, [X31]
	0x03B4803C BL 0x3B47948
	0x03B48040 MOV X0, X31
	0x03B48044 BL 0x38BD214
	0x03B48048 STP S0, S1, [X22 + 0xC]
	0x03B4804C STP S2, S3, [X22 + 0x14]
	0x03B48050 TBZ X21, 0x0, 0x3B47F48
	0x03B48054 LDP S0, S1, [X19]
	0x03B48058 LDR V2, [X19 + 0x8]
	0x03B4805C MOV X0, X31
	0x03B48060 BL 0x3887BE4
	0x03B48064 LDR V3, [X20 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x89C000
	008 Move W8, [X21+2213]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {44}
	015 Move X0, 0x614000
	016 Move X0, [X0+352]
	017 Call 0x1C17CF4
	018 Move X0, 0x614000
	019 Move X0, [X0+392]
	020 Call 0x1C17CF4
	021 Move X0, 0x5B0000
	022 Move X0, [X0+1032]
	023 Call 0x1C17CF4
	024 Move X0, 0x614000
	025 Move X0, [X0+432]
	026 Call 0x1C17CF4
	027 Move X0, 0x5B0000
	028 Move X0, [X0+1040]
	029 Call 0x1C17CF4
	030 Move X0, 0x614000
	031 Move X0, [X0+496]
	032 Call 0x1C17CF4
	033 Move X0, 0x614000
	034 Move X0, [X0+512]
	035 Call 0x1C17CF4
	036 Move X0, 0x614000
	037 Move X0, [X0+2296]
	038 Call 0x1C17CF4
	039 Move X0, 0x614000
	040 Move X0, [X0+2304]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X21+2213], W8
	044 Move X8, [X19+80]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X23, 0x614000
	047 Move X21, [X19+88]
	048 Move X23, [X23+352]
	049 Compare X21, 0
	050 JumpIfEqual {146}
	051 Move X8, [X21]
	052 Move X1, [X23]
	053 NotImplemented "Instruction LDRH not yet implemented."
	054 Compare X9, 0
	055 JumpIfEqual {62}
	056 Move X10, [X8+176]
	057 Add X10, X10, 8
	058 NotImplemented "Instruction LDUR not yet implemented."
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Subtract X9, X9, 1
	061 Add X10, X10, 16
	062 Move X0, X21
	063 Move W2, W31
	064 Call 0x1C5D788
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+48]
	070 Move X23, [X31+56]
	071 Return 
	072 NotImplemented "Instruction LDRSW not yet implemented."
	073 Add X8, X8, X9
	074 Add X0, X8, 312
	075 Move X8, [X0]
	076 Move X1, [X0+8]
	077 Move X0, X21
	078 NotImplemented "Instruction BLR not yet implemented."
	079 Move X8, 0x614000
	080 Move X8, [X8+392]
	081 Move X21, X0
	082 Move X8, [X8]
	083 Move X0, X8
	084 Call 0x1C17F10
	085 Move X8, 0x614000
	086 Move X8, [X8+2296]
	087 Move X1, X19
	088 Move X3, X31
	089 Move X22, X0
	090 Move X2, [X8]
	091 Call UnityAction`1<Object>..ctor, X0, X1, X2
	092 Compare X21, 0
	093 JumpIfEqual {254}
	094 Move X8, 0x614000
	095 Move X8, [X8+496]
	096 Move X0, X21
	097 Move X1, X22
	098 Move X2, [X8]
	099 Call UnityEvent`1<Object>.RemoveListener, X0, X1
	100 Move X21, [X19+88]
	101 Compare X21, 0
	102 JumpIfEqual {254}
	103 Move X8, [X21]
	104 Move X1, [X23]
	105 NotImplemented "Instruction LDRH not yet implemented."
	106 Compare X9, 0
	107 JumpIfEqual {114}
	108 Move X10, [X8+176]
	109 Add X10, X10, 8
	110 NotImplemented "Instruction LDUR not yet implemented."
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Subtract X9, X9, 1
	113 Add X10, X10, 16
	114 Move W2, 1
	115 Move X0, X21
	116 Call 0x1C5D788
	117 Move W9, [X10]
	118 Add W9, W9, 1
	119 Add X8, X8, W9
	120 Add X0, X8, 312
	121 Move X8, [X0]
	122 Move X1, [X0+8]
	123 Move X0, X21
	124 NotImplemented "Instruction BLR not yet implemented."
	125 Move X8, 0x5B0000
	126 Move X8, [X8+1032]
	127 Move X21, X0
	128 Move X8, [X8]
	129 Move X0, X8
	130 Call 0x1C17F10
	131 Move X8, 0x614000
	132 Move X8, [X8+2304]
	133 Move X1, X19
	134 Move X3, X31
	135 Move X22, X0
	136 Move X2, [X8]
	137 Call UnityAction`1<Object>..ctor, X0, X1, X2
	138 Compare X21, 0
	139 JumpIfEqual {254}
	140 Move X8, 0x614000
	141 Move X8, [X8+512]
	142 Move X0, X21
	143 Move X1, X22
	144 Move X2, [X8]
	145 Call UnityEvent`1<Object>.RemoveListener, X0, X1
	146 Move [X19+80], X20
	147 Move X1, [X23]
	148 Move X0, X20
	149 Call 0x1C17E00
	150 Move [X19+88], X0
	151 Move X1, [X23]
	152 Move X0, X20
	153 Call 0x1C17E00
	154 Move X20, [X19+88]
	155 Compare X20, 0
	156 JumpIfEqual {245}
	157 Move X8, [X20]
	158 Move X1, [X23]
	159 NotImplemented "Instruction LDRH not yet implemented."
	160 Compare X9, 0
	161 JumpIfEqual {168}
	162 Move X10, [X8+176]
	163 Add X10, X10, 8
	164 NotImplemented "Instruction LDUR not yet implemented."
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Subtract X9, X9, 1
	167 Add X10, X10, 16
	168 Move X0, X20
	169 Move W2, W31
	170 Call 0x1C5D788
	171 NotImplemented "Instruction LDRSW not yet implemented."
	172 Add X8, X8, X9
	173 Add X0, X8, 312
	174 Move X8, [X0]
	175 Move X1, [X0+8]
	176 Move X0, X20
	177 NotImplemented "Instruction BLR not yet implemented."
	178 Move X8, 0x614000
	179 Move X8, [X8+392]
	180 Move X20, X0
	181 Move X8, [X8]
	182 Move X0, X8
	183 Call 0x1C17F10
	184 Move X8, 0x614000
	185 Move X8, [X8+2296]
	186 Move X1, X19
	187 Move X3, X31
	188 Move X21, X0
	189 Move X2, [X8]
	190 Call UnityAction`1<Object>..ctor, X0, X1, X2
	191 Compare X20, 0
	192 JumpIfEqual {254}
	193 Move X8, 0x614000
	194 Move X8, [X8+432]
	195 Move X0, X20
	196 Move X1, X21
	197 Move X2, [X8]
	198 Call UnityEvent`1<Object>.AddListener, X0, X1
	199 Move X20, [X19+88]
	200 Compare X20, 0
	201 JumpIfEqual {254}
	202 Move X8, [X20]
	203 Move X1, [X23]
	204 NotImplemented "Instruction LDRH not yet implemented."
	205 Compare X9, 0
	206 JumpIfEqual {213}
	207 Move X10, [X8+176]
	208 Add X10, X10, 8
	209 NotImplemented "Instruction LDUR not yet implemented."
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Subtract X9, X9, 1
	212 Add X10, X10, 16
	213 Move W2, 1
	214 Move X0, X20
	215 Call 0x1C5D788
	216 Move W9, [X10]
	217 Add W9, W9, 1
	218 Add X8, X8, W9
	219 Add X0, X8, 312
	220 Move X8, [X0]
	221 Move X1, [X0+8]
	222 Move X0, X20
	223 NotImplemented "Instruction BLR not yet implemented."
	224 Move X8, 0x5AF000
	225 Move X8, [X8+1032]
	226 Move X20, X0
	227 Move X8, [X8]
	228 Move X0, X8
	229 Call 0x1C17F10
	230 Move X8, 0x613000
	231 Move X8, [X8+2304]
	232 Move X1, X19
	233 Move X3, X31
	234 Move X21, X0
	235 Move X2, [X8]
	236 Call UnityAction`1<Object>..ctor, X0, X1, X2
	237 Compare X20, 0
	238 JumpIfEqual {254}
	239 Move X8, 0x5AF000
	240 Move X8, [X8+1040]
	241 Move X0, X20
	242 Move X1, X21
	243 Move X2, [X8]
	244 Call UnityEvent`1<Object>.AddListener, X0, X1
	245 Move X0, X19
	246 Move X20, [X31+32]
	247 Move X19, [X31+40]
	248 Move X22, [X31+16]
	249 Move X21, [X31+24]
	250 Move X30, [X31+48]
	251 Move X23, [X31+56]
	252 Call XRInteractableSnapVolume.RefreshSnapColliderEnabled, X0
	253 Return 
	254 Call 0x1C17F20

Method: System.Void RefreshSnapColliderEnabled()

Disassembly:
	0x03B47B38 FADD S9, S2, S12
	0x03B47B3C LDR X0, [X8]
	0x03B47B40 FADD S8, S3, S13
	0x03B47B44 LDR W8, [X0 + 0xE0]
	0x03B47B48 CBNZ W8, 0x3B47B50
	0x03B47B4C BL 0x1C16DFC
	0x03B47B50 FMUL S2, S11, S11
	0x03B47B54 FMUL S3, S10, S10
	0x03B47B58 FMUL S1, S9, S9
	0x03B47B5C FADD S2, S2, S3
	0x03B47B60 FMUL S0, S8, S8
	0x03B47B64 FADD S1, S1, S2
	0x03B47B68 FADD S0, S0, S1
	0x03B47B6C FMOV S4, 1
	0x03B47B70 FSQRT S0, S0
	0x03B47B74 FDIV S3, S4, S0
	0x03B47B78 FMUL S0, S11, S3
	0x03B47B7C FMUL S1, S10, S3
	0x03B47B80 FMUL S2, S9, S3
	0x03B47B84 FMUL S3, S8, S3
	0x03B47B88 B 0x3B47C28
	0x03B47B8C BL 0x1C16DFC
	0x03B47B90 LDRB W8, [X20 + 0x56A]
	0x03B47B94 FMOV S0, 1
	0x03B47B98 CMP W8, 0x0
	0x03B47B9C CSET W21, EQ
	0x03B47BA0 FDIV S10, S0, S10
	0x03B47BA4 FCVT S0, S11
	0x03B47BA8 BL 0x3EB1C30
	0x00000000 INVALID
	0x03B47BB0 CBZ W21, 0x3B47BC8
	0x03B47BB4 ADRP X0, 0x5AC000
	0x03B47BB8 LDR X0, [X0 + 0x5A8]
	0x03B47BBC BL 0x1C16CF4
	0x03B47BC0 MOVZ W8, 0x1
	0x03B47BC4 STRB W8, [X20 + 0x56A]
	0x03B47BC8 LDR X0, [X19]
	0x03B47BCC FMUL S11, S10, S11
	0x03B47BD0 FMUL S8, S8, S9
	0x03B47BD4 LDR W8, [X0 + 0xE0]
	0x03B47BD8 CBNZ W8, 0x3B47BE0
	0x03B47BDC BL 0x1C16DFC
	0x03B47BE0 FCVT S0, S8
	0x03B47BE4 BL 0x3EB1C30
	0x03B47BE8 LDP S1, S2, [X31]
	0x03B47BEC LDP S3, S4, [X31 + 0x8]
	0x00000000 INVALID
	0x03B47BF4 FMUL S0, S10, S0
	0x03B47BF8 FMUL S1, S1, S11
	0x03B47BFC FMUL S2, S2, S11

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x89C000
	005 Move W8, [X20+2214]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x614000
	012 Move X0, [X0+352]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2214], W8
	016 Move X20, [X19+88]
	017 Compare X20, 0
	018 JumpIfEqual {35}
	019 Move X10, 0x614000
	020 Move X8, [X20]
	021 Move X10, [X10+352]
	022 NotImplemented "Instruction LDRH not yet implemented."
	023 Move X1, [X10]
	024 Compare X9, 0
	025 JumpIfEqual {32}
	026 Move X10, [X8+176]
	027 Add X10, X10, 8
	028 NotImplemented "Instruction LDUR not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Subtract X9, X9, 1
	031 Add X10, X10, 16
	032 Move W2, 6
	033 Move X0, X20
	034 Call 0x1C5D788
	035 Move W8, 1
	036 Move W9, [X10]
	037 Add W9, W9, 6
	038 Add X8, X8, W9
	039 Add X0, X8, 312
	040 Move X8, [X0]
	041 Move X1, [X0+8]
	042 Move X0, X20
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Xor W8, W0, 1
	045 Move W9, [X19+56]
	046 Move X0, X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSET not yet implemented."
	051 Or W8, W9, W8
	052 And W1, W8, 1
	053 Move X30, [X31+32]
	054 Call XRInteractableSnapVolume.SetSnapColliderEnabled, X0, X1
	055 Return 

Method: System.Void OnFirstSelectEntered(UnityEngine.XR.Interaction.Toolkit.SelectEnterEventArgs args)

Disassembly:
	0x03B48910 BL 0x222D35C
	0x03B48914 MOV X20, X0
	0x03B48918 STR X0, [X19 + 0x78]
	0x03B4891C CBZ X20, 0x3B48940
	0x03B48920 MOV X0, X20

ISIL:
	001 Move W8, [X0+56]
	002 Compare W8, 0
	003 JumpIfEqual {7}
	004 Move W1, W31
	005 Call XRInteractableSnapVolume.SetSnapColliderEnabled, X0, X1
	006 Return 
	007 Return 

Method: System.Void OnLastSelectExited(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)

Disassembly:
	0x03B48924 MOV W1, W31
	0x03B48928 MOV X2, X31
	0x03B4892C BL 0x3C357B4
	0x03B48930 LDP X20, X19, [X31 + 0x20]
	0x03B48934 LDP X30, X21, [X31 + 0x10]

ISIL:
	001 Move W8, [X0+56]
	002 Compare W8, 0
	003 JumpIfEqual {7}
	004 Move W1, 1
	005 Call XRInteractableSnapVolume.SetSnapColliderEnabled, X0, X1
	006 Return 
	007 Return 

Method: System.Void .ctor()

Disassembly:
	0x03B48938 ADD X31, X31, 0x30
	0x03B4893C RET
	0x03B48940 BL 0x1C16F20
	0x03B48944 LDR X0, [X0 + 0x80]
	0x03B48948 RET
	0x03B4894C STR X30, [X31 - 0x30]!
	0x03B48950 STP X22, X21, [X31 + 0x10]
	0x03B48954 STP X20, X19, [X31 + 0x20]
	0x03B48958 ADRP X22, 0x89A000
	0x03B4895C ADRP X21, 0x5AB000
	0x03B48960 LDRB W8, [X22 + 0x8AE]
	0x03B48964 LDR X21, [X21 + 0x970]
	0x03B48968 MOV X20, X1
	0x03B4896C MOV X19, X0
	0x03B48970 TBNZ X8, 0x0, 0x3B48988
	0x03B48974 ADRP X0, 0x5AB000
	0x03B48978 LDR X0, [X0 + 0x970]
	0x03B4897C BL 0x1C16CF4
	0x03B48980 MOVZ W8, 0x1
	0x03B48984 STRB W8, [X22 + 0x8AE]
	0x03B48988 STR X20, [X19 + 0x80]
	0x03B4898C LDR X0, [X21]
	0x03B48990 LDR W8, [X0 + 0xE0]
	0x03B48994 CBNZ W8, 0x3B4899C
	0x03B48998 BL 0x1C16DFC
	0x03B4899C MOV X0, X31
	0x03B489A0 BL 0x3C018E4
	0x03B489A4 TBZ X0, 0x0, 0x3B489BC
	0x03B489A8 MOV X0, X19
	0x03B489AC LDP X20, X19, [X31 + 0x20]
	0x03B489B0 LDP X22, X21, [X31 + 0x10]
	0x03B489B4 LDR X30, [X31], #0x30
	0x03B489B8 B 0x3B489CC
	0x03B489BC LDP X20, X19, [X31 + 0x20]
	0x03B489C0 LDP X22, X21, [X31 + 0x10]
	0x03B489C4 LDR X30, [X31], #0x30
	0x03B489C8 RET
	0x03B489CC SUB X31, X31, 0x30
	0x03B489D0 STP X30, X21, [X31 + 0x10]
	0x03B489D4 STP X20, X19, [X31 + 0x20]
	0x03B489D8 ADRP X20, 0x89A000
	0x03B489DC ADRP X21, 0x5AB000
	0x03B489E0 LDRB W8, [X20 + 0x8C5]
	0x03B489E4 LDR X21, [X21 + 0x598]
	0x03B489E8 MOV X19, X0
	0x03B489EC TBNZ X8, 0x0, 0x3B48A10
	0x03B489F0 ADRP X0, 0x5AB000
	0x03B489F4 LDR X0, [X0 + 0xD78]
	0x03B489F8 BL 0x1C16CF4
	0x03B489FC ADRP X0, 0x5AB000
	0x03B48A00 LDR X0, [X0 + 0x598]
	0x03B48A04 BL 0x1C16CF4
	0x03B48A08 MOVZ W8, 0x1
	0x03B48A0C STRB W8, [X20 + 0x8C5]
	0x03B48A10 LDR X0, [X21]
	0x03B48A14 LDR X20, [X19 + 0x80]
	0x03B48A18 LDR W8, [X0 + 0xE0]
	0x03B48A1C CBNZ W8, 0x3B48A24
	0x03B48A20 BL 0x1C16DFC
	0x03B48A24 MOV X0, X20
	0x03B48A28 MOV X1, X31
	0x03B48A2C MOV X2, X31
	0x03B48A30 BL 0x3C3883C
	0x03B48A34 TBNZ X0, 0x0, 0x3B48AA0
	0x03B48A38 LDR X0, [X19 + 0x80]
	0x03B48A3C CBZ X0, 0x3B48AB0
	0x03B48A40 MOV X1, X31
	0x03B48A44 BL 0x3C35BD8
	0x03B48A48 STR W0, [X31 + 0x8]
	0x03B48A4C ADD X0, X31, 0x8
	0x03B48A50 MOV X1, X31
	0x03B48A54 BL 0x3C46324
	0x03B48A58 LDR X20, [X19 + 0x80]
	0x03B48A5C TBNZ X0, 0x0, 0x3B48A8C
	0x03B48A60 LDR X0, [X21]
	0x03B48A64 LDR W8, [X0 + 0xE0]
	0x03B48A68 CBNZ W8, 0x3B48A70
	0x03B48A6C BL 0x1C16DFC
	0x03B48A70 ADRP X8, 0x5AB000
	0x03B48A74 LDR X8, [X8 + 0xD78]
	0x03B48A78 MOV X0, X20
	0x03B48A7C LDR X1, [X8]
	0x03B48A80 BL 0x222D35C
	0x03B48A84 MOV X20, X0
	0x03B48A88 STR X0, [X19 + 0x80]
	0x03B48A8C CBZ X20, 0x3B48AB0
	0x03B48A90 MOV X0, X20
	0x03B48A94 MOV W1, W31
	0x03B48A98 MOV X2, X31
	0x03B48A9C BL 0x3C357B4
	0x03B48AA0 LDP X20, X19, [X31 + 0x20]
	0x03B48AA4 LDP X30, X21, [X31 + 0x10]
	0x03B48AA8 ADD X31, X31, 0x30
	0x03B48AAC RET
	0x03B48AB0 BL 0x1C16F20
	0x03B48AB4 LDRB W0, [X0 + 0x88]
	0x03B48AB8 RET
	0x03B48ABC AND W8, W1, 0x1
	0x03B48AC0 STRB W8, [X0 + 0x88]
	0x03B48AC4 RET
	0x03B48AC8 LDRB W0, [X0 + 0x89]
	0x03B48ACC RET
	0x03B48AD0 AND W8, W1, 0x1
	0x03B48AD4 STRB W8, [X0 + 0x89]
	0x03B48AD8 RET
	0x03B48ADC LDRB W0, [X0 + 0x8A]
	0x03B48AE0 RET
	0x03B48AE4 AND W8, W1, 0x1
	0x03B48AE8 STRB W8, [X0 + 0x8A]
	0x03B48AEC RET
	0x03B48AF0 LDR V0, [X0 + 0x8C]
	0x03B48AF4 RET
	0x03B48AF8 ADRP X8, 0xFFFFFFFFFCFA2000
	0x03B48AFC LDR V1, [X8 + 0x330]
	0x03B48B00 FMOV S2, 1
	0x03B48B04 FMIN S2, S0, S2
	0x03B48B08 FCMP S0, S1
	0x03B48B0C FCSEL S0, S2, S1, PL
	0x03B48B10 STR S0, [X0 + 0x8C]
	0x03B48B14 RET
	0x03B48B18 LDRB W0, [X0 + 0x90]
	0x03B48B1C RET
	0x03B48B20 AND W8, W1, 0x1
	0x03B48B24 STRB W8, [X0 + 0x90]
	0x03B48B28 RET
	0x03B48B2C LDR X0, [X0 + 0x98]
	0x03B48B30 RET
	0x03B48B34 STR X1, [X0 + 0x98]
	0x03B48B38 RET
	0x03B48B3C LDR V0, [X0 + 0xA0]
	0x03B48B40 RET
	0x03B48B44 STR S0, [X0 + 0xA0]
	0x03B48B48 RET
	0x03B48B4C RET
	0x03B48B50 STP X30, X21, [X31 - 0x20]!
	0x03B48B54 STP X20, X19, [X31 + 0x10]
	0x03B48B58 ADRP X20, 0x89A000
	0x03B48B5C ADRP X21, 0x5AB000
	0x03B48B60 LDRB W8, [X20 + 0x8AF]
	0x03B48B64 LDR X21, [X21 + 0x970]
	0x03B48B68 MOV X19, X0
	0x03B48B6C TBNZ X8, 0x0, 0x3B48B84
	0x03B48B70 ADRP X0, 0x5AB000
	0x03B48B74 LDR X0, [X0 + 0x970]
	0x03B48B78 BL 0x1C16CF4
	0x03B48B7C MOVZ W8, 0x1
	0x03B48B80 STRB W8, [X20 + 0x8AF]
	0x03B48B84 LDR X0, [X21]
	0x03B48B88 LDR W8, [X0 + 0xE0]
	0x03B48B8C CBNZ W8, 0x3B48B94
	0x03B48B90 BL 0x1C16DFC
	0x03B48B94 MOV X0, X31
	0x03B48B98 BL 0x3C018E4
	0x03B48B9C TBZ X0, 0x0, 0x3B48BB0
	0x03B48BA0 MOV X0, X19
	0x03B48BA4 LDP X20, X19, [X31 + 0x10]
	0x03B48BA8 LDP X30, X21, [X31], #0x20
	0x03B48BAC B 0x3B48BBC
	0x03B48BB0 LDP X20, X19, [X31 + 0x10]
	0x03B48BB4 LDP X30, X21, [X31], #0x20
	0x03B48BB8 RET
	0x03B48BBC STR X30, [X31 - 0x20]!
	0x03B48BC0 STP X20, X19, [X31 + 0x10]
	0x03B48BC4 ADRP X20, 0x89A000
	0x03B48BC8 LDRB W8, [X20 + 0x8C1]
	0x03B48BCC MOV X19, X0
	0x03B48BD0 TBNZ X8, 0x0, 0x3B48BF4
	0x03B48BD4 ADRP X0, 0x612000
	0x03B48BD8 LDR X0, [X0 + 0x958]
	0x03B48BDC BL 0x1C16CF4
	0x03B48BE0 ADRP X0, 0x612000
	0x03B48BE4 LDR X0, [X0 + 0x960]
	0x03B48BE8 BL 0x1C16CF4
	0x03B48BEC MOVZ W8, 0x1
	0x03B48BF0 STRB W8, [X20 + 0x8C1]
	0x03B48BF4 LDR V0, [X19 + 0x70]
	0x03B48BF8 MOV X0, X19
	0x03B48BFC FMUL S0, S0, S0
	0x03B48C00 STR S0, [X19 + 0xA4]
	0x03B48C04 BL 0x3B4BAFC
	0x03B48C08 TBZ X0, 0x0, 0x3B48C58
	0x03B48C0C LDR X0, [X19 + 0xD0]
	0x03B48C10 CBZ X0, 0x3B48C98
	0x03B48C14 ADRP X8, 0xFFFFFFFFFCFA2000
	0x03B48C18 ADRP X9, 0xFFFFFFFFFCFA1000
	0x03B48C1C LDR V0, [X19 + 0x20]
	0x03B48C20 LDR V1, [X8 + 0x200]
	0x03B48C24 LDR V2, [X9 + 0xF28]
	0x03B48C28 MOV X1, X31
	0x03B48C2C FMIN S1, S0, S1
	0x03B48C30 FCMP S0, S2
	0x03B48C34 FCSEL S0, S1, S2, PL
	0x03B48C38 BL 0x3C11470
	0x03B48C3C LDR X0, [X19 + 0xD0]
	0x03B48C40 CBZ X0, 0x3B48C98
	0x03B48C44 LDR X1, [X19 + 0x40]
	0x03B48C48 MOV X2, X31
	0x03B48C4C BL 0x3C1182C
	0x03B48C50 MOVZ W8, 0x1
	0x03B48C54 STRB W8, [X19 + 0xC4]
	0x03B48C58 LDR X0, [X19 + 0x1C8]
	0x03B48C5C CBZ X0, 0x3B48C98
	0x03B48C60 ADRP X8, 0x612000
	0x03B48C64 LDR X8, [X8 + 0x960]
	0x03B48C68 LDR V0, [X19 + 0x28]
	0x03B48C6C LDR X1, [X8]
	0x03B48C70 BL 0x270C674
	0x03B48C74 LDR X0, [X19 + 0x1C8]
	0x03B48C78 CBZ X0, 0x3B48C98
	0x03B48C7C ADRP X8, 0x612000
	0x03B48C80 LDR X8, [X8 + 0x958]
	0x03B48C84 LDP X20, X19, [X31 + 0x10]
	0x03B48C88 FMOV S0, 1
	0x03B48C8C LDR X1, [X8]
	0x03B48C90 LDR X30, [X31], #0x20
	0x03B48C94 B 0x270C6DC
	0x03B48C98 BL 0x1C16F20
	0x03B48C9C STR X30, [X31 - 0x30]!
	0x03B48CA0 STP X22, X21, [X31 + 0x10]
	0x03B48CA4 STP X20, X19, [X31 + 0x20]
	0x03B48CA8 ADRP X20, 0x89A000
	0x03B48CAC ADRP X22, 0x612000
	0x03B48CB0 ADRP X21, 0x612000
	0x03B48CB4 LDRB W8, [X20 + 0x8B0]
	0x03B48CB8 LDR X22, [X22 + 0x968]
	0x03B48CBC LDR X21, [X21 + 0x970]
	0x03B48CC0 MOV X19, X0
	0x03B48CC4 TBNZ X8, 0x0, 0x3B48D18
	0x03B48CC8 ADRP X0, 0x612000
	0x03B48CCC LDR X0, [X0 + 0x968]
	0x03B48CD0 BL 0x1C16CF4
	0x03B48CD4 ADRP X0, 0x612000
	0x03B48CD8 LDR X0, [X0 + 0x970]
	0x03B48CDC BL 0x1C16CF4
	0x03B48CE0 ADRP X0, 0x612000
	0x03B48CE4 LDR X0, [X0 + 0x320]
	0x03B48CE8 BL 0x1C16CF4
	0x03B48CEC ADRP X0, 0x612000
	0x03B48CF0 LDR X0, [X0 + 0x328]
	0x03B48CF4 BL 0x1C16CF4
	0x03B48CF8 ADRP X0, 0x612000
	0x03B48CFC LDR X0, [X0 + 0x368]
	0x03B48D00 BL 0x1C16CF4
	0x03B48D04 ADRP X0, 0x612000
	0x03B48D08 LDR X0, [X0 + 0x7C0]
	0x03B48D0C BL 0x1C16CF4
	0x03B48D10 MOVZ W8, 0x1
	0x03B48D14 STRB W8, [X20 + 0x8B0]
	0x03B48D18 LDR X1, [X22]
	0x03B48D1C MOV X0, X19
	0x03B48D20 BL 0x21A3894
	0x03B48D24 STR X0, [X19 + 0xD8]
	0x03B48D28 LDR X1, [X21]
	0x03B48D2C MOV X20, X0
	0x03B48D30 BL 0x1C16E00
	0x03B48D34 STR X0, [X19 + 0xE0]
	0x03B48D38 LDR X1, [X21]
	0x03B48D3C MOV X0, X20
	0x03B48D40 BL 0x1C16E00
	0x03B48D44 LDP X0, X8, [X19 + 0xD8]
	0x03B48D48 CMP X8, 0x0
	0x03B48D4C CSET W8, NE
	0x03B48D50 STRB W8, [X19 + 0xE8]
	0x03B48D54 CBZ X0, 0x3B48E24
	0x03B48D58 ADRP X8, 0x612000
	0x03B48D5C LDR X8, [X8 + 0x368]
	0x03B48D60 LDR X10, [X0]
	0x03B48D64 LDR X9, [X8]
	0x03B48D68 LDRB W8, [X10 + 0x130]
	0x03B48D6C LDRB W11, [X9 + 0x130]
	0x03B48D70 CMP W8, W11
	0x03B48D74 ADRP X8, 0x612000
	0x03B48D78 LDR X8, [X8 + 0x328]
	0x03B48D7C B.CC 0x3B48DA0
	0x03B48D80 LDR X10, [X10 + 0xC8]
	0x03B48D84 ADD X10, X10, X11, 0x3, LSL
	0x03B48D88 LDUR X10, [X10 - 0x8]
	0x03B48D8C CMP X10, X9
	0x03B48D90 B.NE 0x3B48DA0
	0x03B48D94 MOVZ W9, 0x1
	0x03B48D98 STR X0, [X19 + 0x100]
	0x03B48D9C STRB W9, [X19 + 0x1B9]
	0x03B48DA0 LDR X1, [X8]
	0x03B48DA4 ADRP X20, 0x612000
	0x03B48DA8 LDR X20, [X20 + 0x320]
	0x03B48DAC BL 0x1C16E00
	0x03B48DB0 CBZ X0, 0x3B48DC0
	0x03B48DB4 MOVZ W8, 0x1
	0x03B48DB8 STR X0, [X19 + 0xF0]
	0x03B48DBC STRB W8, [X19 + 0x1BB]
	0x03B48DC0 LDR X0, [X19 + 0xD8]
	0x03B48DC4 LDR X1, [X20]
	0x03B48DC8 BL 0x1C16E00
	0x03B48DCC CBZ X0, 0x3B48DDC
	0x03B48DD0 MOVZ W8, 0x1
	0x03B48DD4 STR X0, [X19 + 0xF8]
	0x03B48DD8 STRB W8, [X19 + 0x1BA]
	0x03B48DDC LDR X8, [X19 + 0xD8]
	0x03B48DE0 CBZ X8, 0x3B48E24
	0x03B48DE4 ADRP X9, 0x612000
	0x03B48DE8 LDR X9, [X9 + 0x7C0]
	0x03B48DEC LDR X10, [X8]
	0x03B48DF0 LDR X9, [X9]
	0x03B48DF4 LDRB W12, [X10 + 0x130]
	0x03B48DF8 LDRB W11, [X9 + 0x130]
	0x03B48DFC CMP W12, W11
	0x03B48E00 B.CC 0x3B48E24
	0x03B48E04 LDR X10, [X10 + 0xC8]
	0x03B48E08 ADD X10, X10, X11, 0x3, LSL
	0x03B48E0C LDUR X10, [X10 - 0x8]
	0x03B48E10 CMP X10, X9
	0x03B48E14 B.NE 0x3B48E24
	0x03B48E18 STR X8, [X19 + 0x108]
	0x03B48E1C MOVZ W8, 0x1
	0x03B48E20 STRB W8, [X19 + 0x1B8]
	0x03B48E24 MOV X0, X19
	0x03B48E28 BL 0x3B48E58
	0x03B48E2C MOV X0, X19
	0x03B48E30 BL 0x3B4885C
	0x03B48E34 MOV X0, X19
	0x03B48E38 BL 0x3B489CC
	0x03B48E3C MOV X0, X19
	0x03B48E40 BL 0x3B48EE8
	0x03B48E44 MOV X0, X19
	0x03B48E48 LDP X20, X19, [X31 + 0x20]
	0x03B48E4C LDP X22, X21, [X31 + 0x10]
	0x03B48E50 LDR X30, [X31], #0x30
	0x03B48E54 B 0x3B48BBC
	0x03B48E58 STP X30, X21, [X31 - 0x20]!
	0x03B48E5C STP X20, X19, [X31 + 0x10]
	0x03B48E60 ADRP X21, 0x89A000
	0x03B48E64 ADRP X20, 0x5AB000
	0x03B48E68 LDRB W8, [X21 + 0x8C3]
	0x03B48E6C LDR X20, [X20 + 0x598]
	0x03B48E70 MOV X19, X0
	0x03B48E74 TBNZ X8, 0x0, 0x3B48E98
	0x03B48E78 ADRP X0, 0x612000
	0x03B48E7C LDR X0, [X0 + 0x978]
	0x03B48E80 BL 0x1C16CF4
	0x03B48E84 ADRP X0, 0x5AB000
	0x03B48E88 LDR X0, [X0 + 0x598]
	0x03B48E8C BL 0x1C16CF4
	0x03B48E90 MOVZ W8, 0x1
	0x03B48E94 STRB W8, [X21 + 0x8C3]
	0x03B48E98 LDR X0, [X20]
	0x03B48E9C LDR X20, [X19 + 0x1B0]
	0x03B48EA0 LDR W8, [X0 + 0xE0]
	0x03B48EA4 CBNZ W8, 0x3B48EAC
	0x03B48EA8 BL 0x1C16DFC
	0x03B48EAC MOV X0, X20
	0x03B48EB0 MOV X1, X31
	0x03B48EB4 MOV X2, X31
	0x03B48EB8 BL 0x3C3883C
	0x03B48EBC TBZ X0, 0x0, 0x3B48EDC
	0x03B48EC0 ADRP X8, 0x612000
	0x03B48EC4 LDR X8, [X8 + 0x978]
	0x03B48EC8 ADD X0, X19, 0x1B0
	0x03B48ECC LDP X20, X19, [X31 + 0x10]
	0x03B48ED0 LDR X1, [X8]
	0x03B48ED4 LDP X30, X21, [X31], #0x20
	0x03B48ED8 B 0x295FA30
	0x03B48EDC LDP X20, X19, [X31 + 0x10]
	0x03B48EE0 LDP X30, X21, [X31], #0x20
	0x03B48EE4 RET
	0x03B48EE8 STP X30, X19, [X31 - 0x10]!
	0x03B48EEC MOV X19, X0
	0x03B48EF0 BL 0x3B4BAFC
	0x03B48EF4 TBZ X0, 0x0, 0x3B48F24
	0x03B48EF8 LDR X0, [X19 + 0xD0]
	0x03B48EFC CBZ X0, 0x3B48F2C
	0x03B48F00 LDR X1, [X19 + 0x160]
	0x03B48F04 MOV X2, X31
	0x03B48F08 BL 0x3C1193C
	0x03B48F0C LDR X0, [X19 + 0xD0]
	0x03B48F10 CBZ X0, 0x3B48F2C
	0x03B48F14 MOV W1, W31
	0x03B48F18 MOV X2, X31
	0x03B48F1C LDP X30, X19, [X31], #0x10
	0x03B48F20 B 0x3C117E8
	0x03B48F24 LDP X30, X19, [X31], #0x10
	0x03B48F28 RET
	0x03B48F2C BL 0x1C16F20
	0x03B48F30 STR X30, [X31 - 0x30]!
	0x03B48F34 STP X22, X21, [X31 + 0x10]
	0x03B48F38 STP X20, X19, [X31 + 0x20]
	0x03B48F3C ADRP X20, 0x89A000
	0x03B48F40 ADRP X21, 0x5AB000
	0x03B48F44 LDRB W8, [X20 + 0x8B1]
	0x03B48F48 LDR X21, [X21 + 0x598]
	0x03B48F4C MOV X19, X0
	0x03B48F50 TBNZ X8, 0x0, 0x3B48FE0
	0x03B48F54 ADRP X0, 0x5AD000
	0x03B48F58 LDR X0, [X0 + 0x5B0]
	0x03B48F5C BL 0x1C16CF4
	0x03B48F60 ADRP X0, 0x5AB000
	0x03B48F64 LDR X0, [X0 + 0x970]
	0x03B48F68 BL 0x1C16CF4
	0x03B48F6C ADRP X0, 0x612000
	0x03B48F70 LDR X0, [X0 + 0x980]
	0x03B48F74 BL 0x1C16CF4
	0x03B48F78 ADRP X0, 0x5AB000
	0x03B48F7C LDR X0, [X0 + 0x598]
	0x03B48F80 BL 0x1C16CF4
	0x03B48F84 ADRP X0, 0x5D2000
	0x03B48F88 LDR X0, [X0 + 0xE30]
	0x03B48F8C BL 0x1C16CF4
	0x03B48F90 ADRP X0, 0x612000
	0x03B48F94 LDR X0, [X0 + 0x988]
	0x03B48F98 BL 0x1C16CF4
	0x03B48F9C ADRP X0, 0x612000
	0x03B48FA0 LDR X0, [X0 + 0x990]
	0x03B48FA4 BL 0x1C16CF4
	0x03B48FA8 ADRP X0, 0x5D5000
	0x03B48FAC LDR X0, [X0 + 0x1E8]
	0x03B48FB0 BL 0x1C16CF4
	0x03B48FB4 ADRP X0, 0x612000
	0x03B48FB8 LDR X0, [X0 + 0x998]
	0x03B48FBC BL 0x1C16CF4
	0x03B48FC0 ADRP X0, 0x612000
	0x03B48FC4 LDR X0, [X0 + 0x9A0]
	0x03B48FC8 BL 0x1C16CF4
	0x03B48FCC ADRP X0, 0x612000
	0x03B48FD0 LDR X0, [X0 + 0x9A8]
	0x03B48FD4 BL 0x1C16CF4
	0x03B48FD8 MOVZ W8, 0x1
	0x03B48FDC STRB W8, [X20 + 0x8B1]
	0x03B48FE0 LDR X0, [X21]
	0x03B48FE4 LDR X20, [X19 + 0xD0]
	0x03B48FE8 LDR W8, [X0 + 0xE0]
	0x03B48FEC CBNZ W8, 0x3B48FF4
	0x03B48FF0 BL 0x1C16DFC
	0x03B48FF4 MOV X0, X20
	0x03B48FF8 MOV X1, X31
	0x03B48FFC MOV X2, X31
	0x03B49000 BL 0x3C3883C
	0x03B49004 TBZ X0, 0x0, 0x3B4906C
	0x03B49008 ADRP X8, 0x611000
	0x03B4900C LDR X8, [X8 + 0x9A8]
	0x03B49010 MOV X1, X19
	0x03B49014 MOV X2, X31
	0x03B49018 LDR X0, [X8]
	0x03B4901C BL 0x321EFD0
	0x03B49020 ADRP X8, 0x5D4000
	0x03B49024 LDR X8, [X8 + 0x1E8]
	0x03B49028 MOV X20, X0
	0x03B4902C LDR X8, [X8]
	0x03B49030 LDR W9, [X8 + 0xE0]
	0x03B49034 CBNZ W9, 0x3B49040
	0x03B49038 MOV X0, X8
	0x03B4903C BL 0x1C16DFC
	0x03B49040 MOV X0, X20
	0x03B49044 MOV X1, X19
	0x03B49048 MOV X2, X31
	0x03B4904C BL 0x3B2EF38
	0x03B49050 MOV X0, X19
	0x03B49054 LDP X20, X19, [X31 + 0x20]
	0x03B49058 LDP X22, X21, [X31 + 0x10]
	0x03B4905C MOV W1, W31
	0x03B49060 MOV X2, X31
	0x03B49064 LDR X30, [X31], #0x30
	0x03B49068 B 0x3C32410
	0x03B4906C LDR X8, [X19 + 0xD8]
	0x03B49070 CBZ X8, 0x3B4917C
	0x03B49074 MOVZ W8, 0x1
	0x03B49078 STRB W8, [X19 + 0xC4]
	0x03B4907C LDR X0, [X21]
	0x03B49080 LDR X20, [X19 + 0xC8]
	0x03B49084 LDR W8, [X0 + 0xE0]
	0x03B49088 CBNZ W8, 0x3B49090
	0x03B4908C BL 0x1C16DFC
	0x03B49090 MOV X0, X20
	0x03B49094 MOV X1, X31
	0x03B49098 MOV X2, X31
	0x03B4909C BL 0x3C354F8
	0x03B490A0 TBZ X0, 0x0, 0x3B490BC
	0x03B490A4 LDR X0, [X19 + 0xC8]
	0x03B490A8 CBZ X0, 0x3B49200
	0x03B490AC MOV W1, W31
	0x03B490B0 MOV X2, X31
	0x03B490B4 BL 0x3C357B4
	0x03B490B8 STR X31, [X19 + 0xC8]
	0x03B490BC ADRP X8, 0x5AC000
	0x03B490C0 LDR X20, [X19 + 0x1D0]
	0x03B490C4 LDR X21, [X19 + 0x1C0]
	0x03B490C8 LDR X8, [X8 + 0x5B0]
	0x03B490CC LDR X0, [X8]
	0x03B490D0 BL 0x1C16F10
	0x03B490D4 ADRP X8, 0x611000
	0x03B490D8 LDR X8, [X8 + 0x990]
	0x03B490DC MOV X1, X19
	0x03B490E0 MOV X3, X31
	0x03B490E4 MOV X22, X0
	0x03B490E8 LDR X2, [X8]
	0x03B490EC BL 0x2A6DA40
	0x03B490F0 CBZ X21, 0x3B49200
	0x03B490F4 ADRP X8, 0x611000
	0x03B490F8 LDR X8, [X8 + 0x980]
	0x03B490FC MOV X0, X21
	0x03B49100 MOV X1, X22
	0x03B49104 LDR X2, [X8]
	0x03B49108 BL 0x28CF088
	0x03B4910C CBZ X20, 0x3B49200
	0x03B49110 MOV X1, X0
	0x03B49114 MOV X0, X20
	0x03B49118 MOV X2, X31
	0x03B4911C BL 0x3B3175C
	0x03B49120 ADRP X8, 0x5D1000
	0x03B49124 LDR X8, [X8 + 0xE30]
	0x03B49128 LDR X0, [X8]
	0x03B4912C BL 0x1C16F10
	0x03B49130 ADRP X8, 0x611000
	0x03B49134 LDR X8, [X8 + 0x988]
	0x03B49138 MOV X1, X19
	0x03B4913C MOV X3, X31
	0x03B49140 MOV X20, X0

ISIL:
	001 Move W8, 1
	002 Move X1, X31
	003 Move [X0+56], W8
	004 Call MonoBehaviour..ctor, X0
	005 Return 
	006 Subtract X31, X31, 112
	007 Move [X31+16], D15
	008 Move [X31+24], D14
	009 Move [X31+32], D13
	010 Move [X31+40], D12
	011 Move [X31+48], D11
	012 Move [X31+56], D10
	013 Move [X31+64], D9
	014 Move [X31+72], D8
	015 Move [X31+80], X30
	016 Move [X31+88], X21
	017 Move [X31+96], X20
	018 Move [X31+104], X19
	019 Move V14, V5
	020 Move V15, V4
	021 Multiply S5, S0, S4
	022 Multiply S4, S1, S14
	023 Add S5, S5, S4
	024 Multiply S4, S2, S6
	025 Add S5, S4, S5
	026 Multiply S4, S3, S7
	027 Add S10, S4, S5
	028 Move V12, V7
	029 Move V13, V6
	030 NotImplemented "Instruction FCMP not yet implemented."
	031 NotImplemented "Instruction FNEG not yet implemented."
	032 NotImplemented "Instruction FNEG not yet implemented."
	033 NotImplemented "Instruction FNEG not yet implemented."
	034 NotImplemented "Instruction FNEG not yet implemented."
	035 NotImplemented "Instruction FNEG not yet implemented."
	036 Move X8, -50712576
	037 Move V4, [X8+1048]
	038 Move V9, [X31+112]
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 Move X19, 0x89A000
	041 Move W8, [X19+1384]
	042 Move [X31], S0
	043 Move [X31+8], S1
	044 Move [X31+8], S2
	045 Move [X31+16], S3
	046 Compare W8, 0
	047 JumpIfNotEqual {53}
	048 Move X0, 0x5AC000
	049 Move X0, [X0+1448]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X19+1384], W8
	053 Move X19, 0x5AC000
	054 Move X19, [X19+1448]
	055 Move X0, [X19]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 NotImplemented "Instruction FCVT not yet implemented."
	061 Call 0x3EB2B80
	062 Move X20, 0x89A000
	063 Move W8, [X20+1413]
	064 Move V8, V0
	065 Compare W8, 0
	066 JumpIfNotEqual {72}
	067 Move X0, 0x5AC000
	068 Move X0, [X0+1448]
	069 Call 0x1C17CF4
	070 Move W8, 1
	071 Move [X20+1413], W8
	072 Move X0, [X19]
	073 Multiply S10, S10, S10
	074 Move S11, 1
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {79}
	078 Call 0x1C17DFC
	079 Move X20, 0x89A000
	080 Move W8, [X20+1386]
	081 Move S0, 1
	082 Subtract S10, S11, S10
	083 NotImplemented "Instruction INVALID not yet implemented."
	084 Subtract S11, S0, S9
	085 Compare W8, 0
	086 JumpIfNotEqual {93}
	087 Move X0, 0x5AC000
	088 Move X0, [X0+1448]
	089 Call 0x1C17CF4
	090 Move S0, 1
	091 Move W8, 1
	092 Move [X20+1386], W8
	093 Move X0, [X19]
	094 NotImplemented "Instruction FSQRT not yet implemented."
	095 Multiply S11, S11, S8
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfEqual {162}
	099 Move W21, W31
	100 Multiply S6, S0, S15
	101 Multiply S5, S1, S14
	102 Multiply S4, S2, S13
	103 Add S5, S6, S5
	104 Add S5, S4, S5
	105 Multiply S4, S3, S12
	106 Add S4, S4, S5
	107 NotImplemented "Instruction FCMP not yet implemented."
	108 NotImplemented "Instruction FNEG not yet implemented."
	109 NotImplemented "Instruction FNEG not yet implemented."
	110 NotImplemented "Instruction FNEG not yet implemented."
	111 NotImplemented "Instruction FNEG not yet implemented."
	112 Move X19, 0x89A000
	113 Move W8, [X19+1413]
	114 Subtract S7, S15, S0
	115 Subtract S6, S14, S1
	116 Subtract S5, S13, S2
	117 Subtract S4, S12, S3
	118 Multiply S8, S7, S9
	119 Multiply S10, S6, S9
	120 Multiply S12, S5, S9
	121 Multiply S13, S4, S9
	122 Compare W8, 0
	123 JumpIfNotEqual {137}
	124 Move X0, 0x5AC000
	125 Move X0, [X0+1448]
	126 Move V9, V3
	127 Move V11, V2
	128 Move V14, V1
	129 Move V15, V0
	130 Call 0x1C17CF4
	131 Move V0, V15
	132 Move V1, V14
	133 Move V2, V11
	134 Move V3, V9
	135 Move W8, 1
	136 Move [X19+1413], W8
	137 Move X8, 0x5AC000
	138 Move X8, [X8+1448]
	139 Add S11, S0, S8
	140 Add S10, S1, S10
	141 Add S9, S2, S12
	142 Move X0, [X8]
	143 Add S8, S3, S13
	144 Move W8, [X0+224]
	145 Compare W8, 0
	146 JumpIfNotEqual {148}
	147 Call 0x1C17DFC
	148 Multiply S2, S11, S11
	149 Multiply S3, S10, S10
	150 Multiply S1, S9, S9
	151 Add S2, S2, S3
	152 Multiply S0, S8, S8
	153 Add S1, S1, S2
	154 Add S0, S0, S1
	155 Move S4, 1
	156 NotImplemented "Instruction FSQRT not yet implemented."
	157 NotImplemented "Instruction FDIV not yet implemented."
	158 Multiply S0, S11, S3
	159 Multiply S1, S10, S3
	160 Multiply S2, S9, S3
	161 Multiply S3, S8, S3
	162 Call 0x1C17DFC
	163 Move W8, [X20+1386]
	164 Move S0, 1
	165 NotImplemented "Instruction CMP not yet implemented."
	166 NotImplemented "Instruction CSET not yet implemented."
	167 NotImplemented "Instruction FDIV not yet implemented."
	168 NotImplemented "Instruction FCVT not yet implemented."
	169 Call 0x3EB2C30
	170 NotImplemented "Instruction INVALID not yet implemented."
	171 Compare W21, 0
	172 JumpIfEqual {178}
	173 Move X0, 0x5AC000
	174 Move X0, [X0+1448]
	175 Call 0x1C17CF4
	176 Move W8, 1
	177 Move [X20+1386], W8
	178 Move X0, [X19]
	179 Multiply S11, S10, S11
	180 Multiply S8, S8, S9
	181 Move W8, [X0+224]
	182 Compare W8, 0
	183 JumpIfNotEqual {185}
	184 Call 0x1C17DFC
	185 NotImplemented "Instruction FCVT not yet implemented."
	186 Call 0x3EB2C30
	187 Move S1, [X31]
	188 Move S2, [X31+4]
	189 Move S3, [X31+8]
	190 Move S4, [X31+12]
	191 NotImplemented "Instruction INVALID not yet implemented."
	192 Multiply S0, S10, S0
	193 Multiply S1, S1, S11
	194 Multiply S2, S2, S11
	195 Multiply S3, S3, S11
	196 Multiply S4, S4, S11
	197 Multiply S5, S15, S0
	198 Multiply S6, S14, S0
	199 Multiply S7, S13, S0
	200 Multiply S16, S12, S0
	201 Add S0, S1, S5
	202 Add S1, S2, S6
	203 Add S2, S3, S7
	204 Add S3, S4, S16
	205 Move X20, [X31+96]
	206 Move X19, [X31+104]
	207 Move X30, [X31+80]
	208 Move X21, [X31+88]
	209 Move D9, [X31+64]
	210 Move D8, [X31+72]
	211 Move D11, [X31+48]
	212 Move D10, [X31+56]
	213 Move D13, [X31+32]
	214 Move D12, [X31+40]
	215 Move D15, [X31+16]
	216 Move D14, [X31+24]
	217 Add X31, X31, 112
	218 Return 
	219 Subtract X31, X31, 112
	220 Move [X31+16], D13
	221 Move [X31+24], D12
	222 Move [X31+32], D11
	223 Move [X31+40], D10
	224 Move [X31+48], D9
	225 Move [X31+56], D8
	226 Move [X31+64], X30
	227 Move [X31+72], X23
	228 Move [X31+80], X22
	229 Move [X31+88], X21
	230 Move [X31+96], X20
	231 Move [X31+104], X19
	232 Move V8, V0
	233 Move V4, [X4]
	234 Move S0, [X0]
	235 Move S3, [X0+4]
	236 Move V2, [X0+8]
	237 Move X22, X0
	238 NotImplemented "Instruction FDIV not yet implemented."
	239 Move V1, V3
	240 Move X0, X31
	241 Move X19, X4
	242 Move X21, X3
	243 Move X23, X2
	244 Move X20, X1
	245 Call float3.op_Implicit, X0
	246 Move V3, [X23+8]
	247 Move V9, V0
	248 Move V10, V1
	249 Move S0, [X23]
	250 Move S1, [X23+4]
	251 Move V11, V2
	252 Move V2, V3
	253 Move X0, X31
	254 Call float3.op_Implicit, X0
	255 Subtract S0, S0, S9
	256 Subtract S1, S1, S10
	257 Subtract S2, S2, S11
	258 Multiply S0, S13, S0
	259 Multiply S1, S13, S1
	260 Multiply S2, S13, S2
	261 Add S0, S9, S0
	262 Add S1, S10, S1
	263 Add S2, S11, S2
	264 Move X0, X31
	265 Call float3.op_Implicit, X0
	266 Move S6, [X22+12]
	267 Move S4, [X22+16]
	268 Move S5, [X22+20]
	269 Move S3, [X22+24]
	270 Move [X22], S0
	271 Move [X22+8], S1
	272 Move [X22+8], S2
	273 Move V0, V6
	274 Move V1, V4
	275 Move V2, V5
	276 Move X0, X31
	277 Call quaternion.op_Implicit, X0
	278 Move V11, V2
	279 Move S2, [X23+20]
	280 Move S4, [X23+24]
	281 Move V9, V0
	282 Move V10, V1
	283 Move S0, [X23+12]
	284 Move S1, [X23+16]
	285 Move V12, V3
	286 Move V3, V4
	287 Move X0, X31
	288 Call quaternion.op_Implicit, X0
	289 Move V4, V0
	290 Move V5, V1
	291 Move V6, V2
	292 Move V7, V3
	293 Move V0, V9
	294 Move V1, V10
	295 Move V2, V11
	296 Move V3, V12
	297 Move X0, X31
	298 Move [X31], S13
	299 Call 0x3B48948
	300 Move X0, X31
	301 Call quaternion.op_Implicit, X0
	302 Move [X22+12], S0
	303 Move [X22+20], S1
	304 Move [X22+20], S2
	305 Move [X22+28], S3
	306 Move S0, [X20]
	307 Move S1, [X20+4]
	308 Move V2, [X20+8]
	309 Move X0, X31
	310 Call float3.op_Implicit, X0
	311 Move V3, [X21+8]
	312 Move V9, V0
	313 Move V10, V1
	314 Move S0, [X21]
	315 Move S1, [X21+4]
	316 Move V11, V2
	317 Move V2, V3
	318 Move X0, X31
	319 Call float3.op_Implicit, X0
	320 Subtract S0, S0, S9
	321 Subtract S1, S1, S10
	322 Subtract S2, S2, S11
	323 Multiply S0, S13, S0
	324 Multiply S1, S13, S1
	325 Multiply S2, S13, S2
	326 Add S0, S9, S0
	327 Add S1, S10, S1
	328 Add S2, S11, S2
	329 Move X0, X31
	330 Call float3.op_Implicit, X0
	331 Move [X20], S0
	332 Move [X20+8], S1
	333 Move [X20+8], S2
	334 Move V0, [X19]
	335 Move X22, [X31+80]
	336 Move X21, [X31+88]
	337 Move X30, [X31+64]
	338 Move X23, [X31+72]
	339 Move D11, [X31+32]
	340 Move D10, [X31+40]
	341 Add S0, S0, S8
	342 Move [X19], S0
	343 Move X20, [X31+96]
	344 Move X19, [X31+104]
	345 Move D9, [X31+48]
	346 Move D8, [X31+56]
	347 Move D13, [X31+16]
	348 Move D12, [X31+24]
	349 Add X31, X31, 112
	350 Return 
	351 Subtract X31, X31, 144
	352 Move [X31+16], D15
	353 Move [X31+24], D14
	354 Move [X31+32], D13
	355 Move [X31+40], D12
	356 Move [X31+48], D11
	357 Move [X31+56], D10
	358 Move [X31+64], D9
	359 Move [X31+72], D8
	360 Move [X31+80], X30
	361 Move [X31+96], X24
	362 Move [X31+104], X23
	363 Move [X31+112], X22
	364 Move [X31+120], X21
	365 Move [X31+128], X20
	366 Move [X31+136], X19
	367 Move V15, V5
	368 Move W21, W6
	369 Move V8, V4
	370 Move V12, V3
	371 Move W24, W5
	372 Move X20, X3
	373 Move X23, X2
	374 Move X19, X1
	375 Move X22, X0
	376 Move [X31+88], S6
	377 Move [X31+96], S0
	378 Move TEMP, X4
	379 And TEMP, TEMP, 1
	380 Compare TEMP, 1
	381 JumpIfNotEqual {461}
	382 Move V13, V2
	383 Move V14, V1
	384 Move V9, V0
	385 Move S0, [X22]
	386 Move S1, [X22+4]
	387 Move V2, [X22+8]
	388 Move X0, X31
	389 Call float3.op_Implicit, X0
	390 Move V3, [X23+8]
	391 Move V10, V12
	392 Move V12, V9
	393 Move [X31+12], S8
	394 Move V8, V15
	395 Move V15, V0
	396 Move V9, V1
	397 Move S0, [X23]
	398 Move S1, [X23+4]
	399 Move V11, V2
	400 Move V2, V3
	401 Move X0, X31
	402 Call float3.op_Implicit, X0
	403 Multiply S3, S12, S14
	404 Subtract S0, S0, S15
	405 Multiply S0, S3, S0
	406 Subtract S1, S1, S9
	407 Subtract S2, S2, S11
	408 Add S0, S15, S0
	409 Move V15, V8
	410 Move V8, [X31+12]
	411 Multiply S1, S3, S1
	412 Multiply S2, S3, S2
	413 Add S1, S9, S1
	414 Add S2, S11, S2
	415 Move X0, X31
	416 Move V12, V10
	417 Call float3.op_Implicit, X0
	418 Move X0, X31
	419 Move [X22], S0
	420 Move [X22+8], S1
	421 Move [X22+8], S2
	422 Call float3.op_Implicit, X0
	423 Move V3, [X23+8]
	424 Move V9, V0
	425 Move V11, V1
	426 Move S0, [X23]
	427 Move S1, [X23+4]
	428 Move V14, V2
	429 Move V2, V3
	430 Move X0, X31
	431 Call float3.op_Implicit, X0
	432 Subtract S0, S0, S9
	433 Subtract S1, S1, S11
	434 Subtract S2, S2, S14
	435 Multiply S0, S0, S13
	436 Multiply S1, S1, S13
	437 Multiply S2, S2, S13
	438 Add S0, S9, S0
	439 Add S1, S11, S1
	440 Add S2, S14, S2
	441 Move X0, X31
	442 Call float3.op_Implicit, X0
	443 Move [X22], S0
	444 Move [X22+8], S1
	445 Move [X22+8], S2
	446 Move TEMP, X24
	447 And TEMP, TEMP, 1
	448 Compare TEMP, 1
	449 JumpIfEqual {469}
	450 NotImplemented "Instruction LDUR not yet implemented."
	451 Move V10, [X31+92]
	452 Move [X22+12], V0
	453 Move TEMP, X21
	454 And TEMP, TEMP, 1
	455 Compare TEMP, 1
	456 JumpIfEqual {539}
	457 Move W8, [X20+8]
	458 Move X9, [X20]
	459 Move [X19+8], W8
	460 Move [X19], X9
	461 Move W8, [X23+8]
	462 Move X9, [X23]
	463 Move [X22+8], W8
	464 Move [X22], X9
	465 Move TEMP, X24
	466 And TEMP, TEMP, 1
	467 Compare TEMP, 1
	468 JumpIfNotEqual {450}
	469 Move S0, [X22+12]
	470 Move S1, [X22+16]
	471 Move S2, [X22+20]
	472 Move S3, [X22+24]
	473 Move X0, X31
	474 Call quaternion.op_Implicit, X0
	475 Move V13, V2
	476 Move S2, [X23+20]
	477 Move S4, [X23+24]
	478 Move V9, V0
	479 Move V11, V1
	480 Move S0, [X23+12]
	481 Move S1, [X23+16]
	482 Move V14, V3
	483 Move V3, V4
	484 Move X0, X31
	485 Call quaternion.op_Implicit, X0
	486 Move V10, [X31+92]
	487 Move V4, V0
	488 Move V5, V1
	489 Move V6, V2
	490 Multiply S0, S10, S12
	491 Move V7, V3
	492 Move [X31], S0
	493 Move V0, V9
	494 Move V1, V11
	495 Move V2, V13
	496 Move V3, V14
	497 Move X0, X31
	498 Call 0x3B48948
	499 Move X0, X31
	500 Call quaternion.op_Implicit, X0
	501 Move X0, X31
	502 Move [X22+12], S0
	503 Move [X22+20], S1
	504 Move [X22+20], S2
	505 Move [X22+28], S3
	506 Call quaternion.op_Implicit, X0
	507 Move V12, V2
	508 Move S2, [X23+20]
	509 Move S4, [X23+24]
	510 Move V9, V0
	511 Move V11, V1
	512 Move S0, [X23+12]
	513 Move S1, [X23+16]
	514 Move V13, V3
	515 Move V3, V4
	516 Move X0, X31
	517 Call quaternion.op_Implicit, X0
	518 Move V4, V0
	519 Move V5, V1
	520 Move V6, V2
	521 Move V7, V3
	522 Move V0, V9
	523 Move V1, V11
	524 Move V2, V12
	525 Move V3, V13
	526 Move X0, X31
	527 Move [X31], S8
	528 Call 0x3B48948
	529 Move X0, X31
	530 Call quaternion.op_Implicit, X0
	531 Move [X22+12], S0
	532 Move [X22+20], S1
	533 Move [X22+20], S2
	534 Move [X22+28], S3
	535 Move TEMP, X21
	536 And TEMP, TEMP, 1
	537 Compare TEMP, 1
	538 JumpIfNotEqual {457}
	539 Move S0, [X19]
	540 Move S1, [X19+4]
	541 Move V2, [X19+8]
	542 Move X0, X31
	543 Call float3.op_Implicit, X0
	544 Move V3, [X20+8]
	545 Move V9, V0
	546 Move V11, V1
	547 Move S0, [X20]
	548 Move S1, [X20+4]
	549 Move V12, V2
	550 Move V2, V3
	551 Move X0, X31
	552 Call float3.op_Implicit, X0
	553 Multiply S3, S10, S15
	554 Subtract S0, S0, S9
	555 Subtract S1, S1, S11
	556 Subtract S2, S2, S12
	557 Multiply S0, S3, S0
	558 Multiply S1, S3, S1
	559 Multiply S2, S3, S2
	560 Add S0, S9, S0
	561 Add S1, S11, S1
	562 Add S2, S12, S2
	563 Move X0, X31
	564 Call float3.op_Implicit, X0
	565 Move X0, X31
	566 Move [X19], S0
	567 Move [X19+8], S1
	568 Move [X19+8], S2
	569 Call float3.op_Implicit, X0
	570 Move V3, [X20+8]
	571 Move V9, V0
	572 Move V10, V1
	573 Move S0, [X20]
	574 Move S1, [X20+4]
	575 Move V11, V2
	576 Move V2, V3
	577 Move X0, X31
	578 Call float3.op_Implicit, X0
	579 Move V3, [X31+88]
	580 Subtract S0, S0, S9
	581 Subtract S1, S1, S10
	582 Subtract S2, S2, S11
	583 Multiply S0, S0, S3
	584 Multiply S1, S1, S3
	585 Multiply S2, S2, S3
	586 Add S0, S9, S0
	587 Add S1, S10, S1
	588 Add S2, S11, S2
	589 Move X0, X31
	590 Call float3.op_Implicit, X0
	591 Move [X19], S0
	592 Move [X19+8], S1
	593 Move [X19+8], S2
	594 Move X20, [X31+128]
	595 Move X19, [X31+136]
	596 Move X22, [X31+112]
	597 Move X21, [X31+120]
	598 Move X24, [X31+96]
	599 Move X23, [X31+104]
	600 Move X30, [X31+80]
	601 Move D9, [X31+64]
	602 Move D8, [X31+72]
	603 Move D11, [X31+48]
	604 Move D10, [X31+56]
	605 Move D13, [X31+32]
	606 Move D12, [X31+40]
	607 Move D15, [X31+16]
	608 Move D14, [X31+24]
	609 Add X31, X31, 144
	610 Return 

