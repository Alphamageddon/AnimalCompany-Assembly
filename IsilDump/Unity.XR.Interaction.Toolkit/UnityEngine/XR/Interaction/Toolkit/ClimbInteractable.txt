Type: UnityEngine.XR.Interaction.Toolkit.ClimbInteractable

Method: UnityEngine.XR.Interaction.Toolkit.ClimbProvider get_climbProvider()

Disassembly:
	0x03B7B428 LDR X0, [X0 + 0xD38]
	0x03B7B42C BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+464]
	002 Return X0

Method: System.Void set_climbProvider(UnityEngine.XR.Interaction.Toolkit.ClimbProvider value)

Disassembly:
	0x03B7B430 MOVZ W8, 0x1
	0x03B7B434 STRB W8, [X21 + 0xA97]

ISIL:
	001 Move [X0+464], X1
	002 Return 

Method: UnityEngine.Transform get_climbTransform()

Disassembly:
	0x03B7B438 CBZ X20, 0x3B7B480
	0x03B7B43C LDR X0, [X20 + 0x1E8]
	0x03B7B440 CBZ X0, 0x3B7B480
	0x03B7B444 ADRP X8, 0x5E0000
	0x03B7B448 LDR X8, [X8 + 0xD08]
	0x03B7B44C ADRP X21, 0x5E0000
	0x03B7B450 ADD X20, X20, 0x1E8
	0x03B7B454 LDR X1, [X8]
	0x03B7B458 LDR X21, [X21 + 0xD38]
	0x03B7B45C BL 0x29AD9C0
	0x03B7B460 ADD X8, X19, 0x70
	0x03B7B464 CMP X0, 0x0
	0x03B7B468 CSEL X8, X8, X20, EQ
	0x03B7B46C LDR X0, [X8]
	0x03B7B470 LDR X1, [X21]
	0x03B7B474 LDP X20, X19, [X31 + 0x10]
	0x03B7B478 LDP X30, X21, [X31], #0x20
	0x03B7B47C B 0x29ADA9C
	0x03B7B480 BL 0x1C16F20
	0x03B7B484 STP X30, X21, [X31 - 0x20]!
	0x03B7B488 STP X20, X19, [X31 + 0x10]
	0x03B7B48C ADRP X21, 0x867000
	0x03B7B490 ADRP X20, 0x578000
	0x03B7B494 LDRB W8, [X21 + 0xAC1]
	0x03B7B498 LDR X20, [X20 + 0x598]
	0x03B7B49C MOV X19, X0
	0x03B7B4A0 TBNZ X8, 0x0, 0x3B7B4B8
	0x03B7B4A4 ADRP X0, 0x578000
	0x03B7B4A8 LDR X0, [X0 + 0x598]
	0x03B7B4AC BL 0x1C16CF4
	0x03B7B4B0 MOVZ W8, 0x1
	0x03B7B4B4 STRB W8, [X21 + 0xAC1]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x868000
	006 Move X20, 0x579000
	007 Move W8, [X21+2698]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x579000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2698], W8
	019 Move X0, [X20]
	020 Move X20, [X19+472]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {37}
	033 Move X0, X19
	034 Move X1, X31
	035 Call Component.get_transform, X0
	036 Move [X19+472], X0
	037 Move X0, [X19+472]
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return X0

Method: System.Void set_climbTransform(UnityEngine.Transform value)

Disassembly:
	0x03B7B4B8 LDR X0, [X20]
	0x03B7B4BC LDR X20, [X19 + 0x30]

ISIL:
	001 Move [X0+472], X1
	002 Return 

Method: System.Boolean get_filterInteractionByDistance()

Disassembly:
	0x03B7B4C0 LDR W8, [X0 + 0xE0]
	0x03B7B4C4 CBNZ W8, 0x3B7B4CC

ISIL:
	001 Move W0, [X0+480]
	002 Return X0

Method: System.Void set_filterInteractionByDistance(System.Boolean value)

Disassembly:
	0x03B7B4C8 BL 0x1C16DFC
	0x03B7B4CC MOV X0, X20
	0x03B7B4D0 MOV X1, X31

ISIL:
	001 And W8, W1, 1
	002 Move [X0+480], W8
	003 Return 

Method: System.Single get_maxInteractionDistance()

Disassembly:
	0x03B7B4D4 MOV X2, X31
	0x03B7B4D8 BL 0x3C3883C

ISIL:
	001 Move V0, [X0+484]
	002 Return V0

Method: System.Void set_maxInteractionDistance(System.Single value)

Disassembly:
	0x03B7B4DC TBNZ X0, 0x0, 0x3B7B4F4
	0x03B7B4E0 LDR X0, [X19 + 0x30]

ISIL:
	001 Move [X0+484], S0
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.ClimbSettingsDatumProperty get_climbSettingsOverride()

Disassembly:
	0x03B7B4E4 CBZ X0, 0x3B7B528
	0x03B7B4E8 MOV X1, X19

ISIL:
	001 Move X0, [X0+488]
	002 Return X0

Method: System.Void set_climbSettingsOverride(UnityEngine.XR.Interaction.Toolkit.ClimbSettingsDatumProperty value)

Disassembly:
	0x03B7B4EC BL 0x3B7F3D0
	0x03B7B4F0 CBZ W0, 0x3B7B504

ISIL:
	001 Move [X0+488], X1
	002 Return 

Method: System.Void OnValidate()

Disassembly:
	0x03B7B4F4 MOV W0, W31
	0x03B7B4F8 LDP X20, X19, [X31 + 0x10]
	0x03B7B4FC LDP X30, X21, [X31], #0x20
	0x03B7B500 RET
	0x03B7B504 LDR X8, [X19 + 0x28]
	0x03B7B508 CBZ X8, 0x3B7B520
	0x03B7B50C LDR X1, [X19 + 0x30]
	0x03B7B510 LDR X9, [X8 + 0x18]
	0x03B7B514 LDR X0, [X8 + 0x40]
	0x03B7B518 LDR X2, [X8 + 0x28]
	0x03B7B51C BLR X9
	0x03B7B520 MOVZ W0, 0x1
	0x03B7B524 B 0x3B7B4F8
	0x03B7B528 BL 0x1C16F20
	0x03B7B52C STR X30, [X31 - 0x50]!
	0x03B7B530 STP X26, X25, [X31 + 0x10]
	0x03B7B534 STP X24, X23, [X31 + 0x20]
	0x03B7B538 STP X22, X21, [X31 + 0x30]
	0x03B7B53C STP X20, X19, [X31 + 0x40]
	0x03B7B540 ADRP X25, 0x867000
	0x03B7B544 ADRP X26, 0x5DF000
	0x03B7B548 ADRP X20, 0x5E0000
	0x03B7B54C ADRP X24, 0x5E0000
	0x03B7B550 ADRP X23, 0x5E0000
	0x03B7B554 ADRP X22, 0x5E0000
	0x03B7B558 ADRP X21, 0x5E0000
	0x03B7B55C LDR X26, [X26 + 0x278]
	0x03B7B560 LDRB W8, [X25 + 0xA98]
	0x03B7B564 LDR X20, [X20 + 0xD40]
	0x03B7B568 LDR X24, [X24 + 0xD48]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x868000
	006 Move X20, 0x579000
	007 Move W8, [X21+2699]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x579000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2699], W8
	019 Move X0, [X20]
	020 Move X20, [X19+472]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {37}
	033 Move X0, X19
	034 Move X1, X31
	035 Call Component.get_transform, X0
	036 Move [X19+472], X0
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return 

Method: System.Void Reset()

Disassembly:
	0x03B7B56C LDR X23, [X23 + 0xD50]
	0x03B7B570 LDR X22, [X22 + 0xD00]
	0x03B7B574 LDR X21, [X21 + 0xCF8]
	0x03B7B578 MOV X19, X0
	0x03B7B57C TBNZ X8, 0x0, 0x3B7B5D0
	0x03B7B580 ADRP X0, 0x5E0000
	0x03B7B584 LDR X0, [X0 + 0xCF8]
	0x03B7B588 BL 0x1C16CF4
	0x03B7B58C ADRP X0, 0x5E0000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, 1
	004 Move X1, X31
	005 Move X19, X0
	006 Move [X0+88], W8
	007 Call Component.get_transform, X0
	008 Move [X19+472], X0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

Method: System.Void Awake()

Disassembly:
	0x03B7B590 LDR X0, [X0 + 0xD00]
	0x03B7B594 BL 0x1C16CF4
	0x03B7B598 ADRP X0, 0x5E0000
	0x03B7B59C LDR X0, [X0 + 0xD40]
	0x03B7B5A0 BL 0x1C16CF4
	0x03B7B5A4 ADRP X0, 0x5E0000
	0x03B7B5A8 LDR X0, [X0 + 0xD50]
	0x03B7B5AC BL 0x1C16CF4
	0x03B7B5B0 ADRP X0, 0x5DF000
	0x03B7B5B4 LDR X0, [X0 + 0x278]
	0x03B7B5B8 BL 0x1C16CF4
	0x03B7B5BC ADRP X0, 0x5E0000
	0x03B7B5C0 LDR X0, [X0 + 0xD48]
	0x03B7B5C4 BL 0x1C16CF4
	0x03B7B5C8 MOVZ W8, 0x1
	0x03B7B5CC STRB W8, [X25 + 0xA98]
	0x03B7B5D0 LDR X0, [X26]
	0x03B7B5D4 BL 0x1C16F10
	0x03B7B5D8 LDR X1, [X20]
	0x03B7B5DC MOV X20, X0
	0x03B7B5E0 BL 0x301B7C4
	0x03B7B5E4 STR X20, [X19 + 0x48]
	0x03B7B5E8 LDR X0, [X24]
	0x03B7B5EC BL 0x1C16F10
	0x03B7B5F0 LDR X1, [X23]
	0x03B7B5F4 MOV X20, X0
	0x03B7B5F8 BL 0x301B7C4
	0x03B7B5FC STR X20, [X19 + 0x50]
	0x03B7B600 LDR X0, [X22]
	0x03B7B604 BL 0x1C16F10
	0x03B7B608 MOVZ W8, 0x101
	0x03B7B60C MOVZ W9, 0x1
	0x03B7B610 MOV X1, X31
	0x03B7B614 MOV X20, X0
	0x03B7B618 STRH W8, [X0 + 0x10]
	0x03B7B61C STRB W9, [X0 + 0x12]
	0x03B7B620 BL 0x33BDD8C
	0x03B7B624 LDR X0, [X21]
	0x03B7B628 BL 0x1C16F10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x868000
	006 Move X20, 0x579000
	007 Move W8, [X21+2700]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5E1000
	015 Move X0, [X0+3272]
	016 Call 0x1C17CF4
	017 Move X0, 0x579000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2700], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call XRBaseInteractable.Awake, X0
	025 Move X0, [X20]
	026 Move X20, [X19+464]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {49}
	039 Move X8, 0x5E1000
	040 Move X8, [X8+3272]
	041 Add X0, X19, 464
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X1, [X8]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Call 0x2960A30, X0
	048 Return 
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return 

Method: System.Boolean IsHoverableBy(UnityEngine.XR.Interaction.Toolkit.IXRHoverInteractor interactor)

Disassembly:
	0x03B7B62C MOV X1, X20
	0x03B7B630 MOV X21, X0
	0x03B7B634 BL 0x3B7ADD0
	0x03B7B638 STR X21, [X19 + 0x70]
	0x03B7B63C MOV X0, X19
	0x03B7B640 LDP X20, X19, [X31 + 0x40]
	0x03B7B644 LDP X22, X21, [X31 + 0x30]
	0x03B7B648 LDP X24, X23, [X31 + 0x20]
	0x03B7B64C LDP X26, X25, [X31 + 0x10]
	0x03B7B650 MOV X1, X31
	0x03B7B654 LDR X30, [X31], #0x50
	0x03B7B658 B 0x3C36C30
	0x03B7B65C MOV X1, X31
	0x03B7B660 B 0x3C36C30
	0x03B7B664 LDRB W0, [X0 + 0x10]
	0x03B7B668 RET
	0x03B7B66C AND W8, W1, 0x1
	0x03B7B670 STRB W8, [X0 + 0x10]
	0x03B7B674 RET
	0x03B7B678 LDRB W0, [X0 + 0x11]
	0x03B7B67C RET
	0x03B7B680 AND W8, W1, 0x1
	0x03B7B684 STRB W8, [X0 + 0x11]
	0x03B7B688 RET
	0x03B7B68C LDRB W0, [X0 + 0x12]
	0x03B7B690 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X2, X31
	005 Move X20, X1
	006 Move X19, X0
	007 Call XRBaseInteractable.IsHoverableBy, X0, X1
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {25}
	012 Move W8, [X19+480]
	013 Compare W8, 0
	014 JumpIfEqual {26}
	015 Move X8, [X19]
	016 Move X0, X19
	017 Move X1, X20
	018 Move X9, [X8+1464]
	019 Move X2, [X8+1472]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move V1, [X19+484]
	022 Multiply S1, S1, S1
	023 NotImplemented "Instruction FCMP not yet implemented."
	024 NotImplemented "Instruction CSET not yet implemented."
	025 Move W0, W31
	026 Move W0, 1
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Return X0

Method: System.Boolean IsSelectableBy(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor)

Disassembly:
	0x03B7B694 AND W8, W1, 0x1
	0x03B7B698 STRB W8, [X0 + 0x12]
	0x03B7B69C RET
	0x03B7B6A0 STP X30, X21, [X31 - 0x20]!
	0x03B7B6A4 STP X20, X19, [X31 + 0x10]
	0x03B7B6A8 ADRP X20, 0x867000
	0x03B7B6AC ADRP X21, 0x5E0000
	0x03B7B6B0 LDRB W8, [X20 + 0xA99]
	0x03B7B6B4 LDR X21, [X21 + 0xD58]
	0x03B7B6B8 MOV X19, X0
	0x03B7B6BC TBNZ X8, 0x0, 0x3B7B6D4
	0x03B7B6C0 ADRP X0, 0x5E0000
	0x03B7B6C4 LDR X0, [X0 + 0xD58]
	0x03B7B6C8 BL 0x1C16CF4
	0x03B7B6CC MOVZ W8, 0x1
	0x03B7B6D0 STRB W8, [X20 + 0xA99]
	0x03B7B6D4 LDR X1, [X21]
	0x03B7B6D8 MOV X0, X19
	0x03B7B6DC LDP X20, X19, [X31 + 0x10]
	0x03B7B6E0 LDP X30, X21, [X31], #0x20
	0x03B7B6E4 B 0x29AE60C
	0x03B7B6E8 STR X30, [X31 - 0x30]!
	0x03B7B6EC STP X22, X21, [X31 + 0x10]
	0x03B7B6F0 STP X20, X19, [X31 + 0x20]
	0x03B7B6F4 ADRP X21, 0x867000
	0x03B7B6F8 ADRP X22, 0x5E0000
	0x03B7B6FC LDRB W8, [X21 + 0xA9B]
	0x03B7B700 LDR X22, [X22 + 0xD60]
	0x03B7B704 MOV X19, X1
	0x03B7B708 MOV X20, X0
	0x03B7B70C TBNZ X8, 0x0, 0x3B7B724

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X2, X31
	005 Move X20, X1
	006 Move X19, X0
	007 Call XRBaseInteractable.IsSelectableBy, X0, X1
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {33}
	012 Move X0, X19
	013 Move X1, X20
	014 Move X2, X31
	015 Call XRBaseInteractable.IsSelected, X0, X1
	016 Move TEMP, X0
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {34}
	020 Move W8, [X19+480]
	021 Compare W8, 0
	022 JumpIfEqual {34}
	023 Move X8, [X19]
	024 Move X0, X19
	025 Move X1, X20
	026 Move X9, [X8+1464]
	027 Move X2, [X8+1472]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move V1, [X19+484]
	030 Multiply S1, S1, S1
	031 NotImplemented "Instruction FCMP not yet implemented."
	032 NotImplemented "Instruction CSET not yet implemented."
	033 Move W0, W31
	034 Move W0, 1
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return X0

Method: System.Void OnSelectEntered(UnityEngine.XR.Interaction.Toolkit.SelectEnterEventArgs args)

Disassembly:
	0x03B7B710 ADRP X0, 0x5E0000
	0x03B7B714 LDR X0, [X0 + 0xD60]
	0x03B7B718 BL 0x1C16CF4
	0x03B7B71C MOVZ W8, 0x1
	0x03B7B720 STRB W8, [X21 + 0xA9B]
	0x03B7B724 LDR X2, [X22]
	0x03B7B728 MOV X0, X20
	0x03B7B72C MOV X1, X19
	0x03B7B730 LDP X20, X19, [X31 + 0x20]
	0x03B7B734 LDP X22, X21, [X31 + 0x10]
	0x03B7B738 LDR X30, [X31], #0x30
	0x03B7B73C B 0x29AD994
	0x03B7B740 LDRB W0, [X0 + 0x48]
	0x03B7B744 RET
	0x03B7B748 AND W8, W1, 0x1
	0x03B7B74C STRB W8, [X0 + 0x48]
	0x03B7B750 RET
	0x03B7B754 LDRB W0, [X0 + 0x49]
	0x03B7B758 RET
	0x03B7B75C AND W8, W1, 0x1
	0x03B7B760 STRB W8, [X0 + 0x49]
	0x03B7B764 RET
	0x03B7B768 LDRB W0, [X0 + 0x4A]
	0x03B7B76C RET
	0x03B7B770 AND W8, W1, 0x1
	0x03B7B774 STRB W8, [X0 + 0x4A]
	0x03B7B778 RET
	0x03B7B77C LDRB W0, [X0 + 0x4B]
	0x03B7B780 RET
	0x03B7B784 AND W8, W1, 0x1
	0x03B7B788 STRB W8, [X0 + 0x4B]
	0x03B7B78C RET
	0x03B7B790 LDR W0, [X0 + 0x4C]
	0x03B7B794 RET
	0x03B7B798 STR W1, [X0 + 0x4C]
	0x03B7B79C RET
	0x03B7B7A0 SUB X31, X31, 0x50
	0x03B7B7A4 STR D12, [X31 + 0x10]
	0x03B7B7A8 STP D11, D10, [X31 + 0x18]
	0x03B7B7AC STP D9, D8, [X31 + 0x28]
	0x03B7B7B0 STR X30, [X31 + 0x38]
	0x03B7B7B4 STP X20, X19, [X31 + 0x40]
	0x03B7B7B8 ADRP X20, 0x867000
	0x03B7B7BC LDRB W8, [X20 + 0xA9C]
	0x03B7B7C0 MOV X19, X0
	0x03B7B7C4 TBNZ X8, 0x0, 0x3B7B7DC
	0x03B7B7C8 ADRP X0, 0x578000
	0x03B7B7CC LDR X0, [X0 + 0x598]
	0x03B7B7D0 BL 0x1C16CF4
	0x03B7B7D4 MOVZ W8, 0x1
	0x03B7B7D8 STRB W8, [X20 + 0xA9C]
	0x03B7B7DC STRB W31, [X31 + 0xC]
	0x03B7B7E0 LDR X8, [X19 + 0x30]
	0x03B7B7E4 STRB W31, [X19 + 0x59]
	0x03B7B7E8 CBZ X8, 0x3B7B950
	0x03B7B7EC LDR X9, [X8 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x868000
	007 Move X21, 0x579000
	008 Move W8, [X22+2701]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x5E1000
	017 Move X0, [X0+3272]
	018 Call 0x1C17CF4
	019 Move X0, 0x579000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2701], W8
	024 Move X0, X19
	025 Move X1, X20
	026 Move X2, X31
	027 Call XRBaseInteractable.OnSelectEntered, X0, X1
	028 Move X0, [X21]
	029 Move X22, [X19+464]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X22
	035 Move X1, X31
	036 Move X2, X31
	037 Add X21, X19, 464
	038 Call Object.op_Inequality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {52}
	043 Move X8, 0x5E1000
	044 Move X8, [X8+3272]
	045 Move X0, X21
	046 Move X1, [X8]
	047 Call 0x2960A30, X0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {67}
	052 Compare X20, 0
	053 JumpIfEqual {73}
	054 Move X21, [X21]
	055 Move X0, X20
	056 Call SelectEnterEventArgs.get_interactorObject, X0
	057 Compare X21, 0
	058 JumpIfEqual {73}
	059 Move X2, X0
	060 Move X0, X21
	061 Move X1, X19
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X30, [X31+48]
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Move X30, [X31+48]
	072 Return 
	073 Call 0x1C17F20

Method: System.Void OnSelectExited(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)

Disassembly:
	0x03B7B980 MOV V10.16B, V0.16B
	0x03B7B984 MOV X19, X0
	0x03B7B988 TBNZ X8, 0x0, 0x3B7B9AC
	0x03B7B98C ADRP X0, 0x578000
	0x03B7B990 LDR X0, [X0 + 0x598]
	0x03B7B994 BL 0x1C16CF4
	0x03B7B998 ADRP X0, 0x578000
	0x03B7B99C LDR X0, [X0 + 0x5F8]
	0x03B7B9A0 BL 0x1C16CF4
	0x03B7B9A4 MOVZ W8, 0x1
	0x03B7B9A8 STRB W8, [X20 + 0xA9D]
	0x03B7B9AC LDR X8, [X19 + 0x30]
	0x03B7B9B0 CBZ X8, 0x3B7BC48
	0x03B7B9B4 ADRP X21, 0x578000
	0x03B7B9B8 LDR X8, [X8 + 0x30]
	0x03B7B9BC LDR X21, [X21 + 0x598]
	0x03B7B9C0 CBZ X8, 0x3B7B9CC
	0x03B7B9C4 LDR X20, [X8 + 0x38]
	0x03B7B9C8 B 0x3B7B9D0
	0x03B7B9CC MOV X20, X31
	0x03B7B9D0 LDR X0, [X21]
	0x03B7B9D4 LDR W8, [X0 + 0xE0]
	0x03B7B9D8 CBNZ W8, 0x3B7B9E0
	0x03B7B9DC BL 0x1C16DFC
	0x03B7B9E0 MOV X0, X20
	0x03B7B9E4 MOV X1, X31
	0x03B7B9E8 MOV X2, X31
	0x03B7B9EC BL 0x3C3883C
	0x03B7B9F0 TBNZ X0, 0x0, 0x3B7BC28
	0x03B7B9F4 MOV X0, X19
	0x03B7B9F8 BL 0x3B7BC4C
	0x03B7B9FC LDRB W8, [X19 + 0x48]
	0x03B7BA00 LDR X0, [X21]
	0x03B7BA04 LDRB W9, [X19 + 0x49]
	0x03B7BA08 LDRB W10, [X19 + 0x4A]
	0x03B7BA0C FMOV S0, W31
	0x03B7BA10 CMP W8, 0x0
	0x03B7BA14 LDR W8, [X0 + 0xE0]
	0x03B7BA18 LDR X21, [X19 + 0x50]
	0x03B7BA1C FCSEL S13, S0, S10, EQ
	0x03B7BA20 CMP W9, 0x0
	0x03B7BA24 FCSEL S12, S0, S9, EQ
	0x03B7BA28 CMP W10, 0x0
	0x03B7BA2C FCSEL S11, S0, S8, EQ
	0x03B7BA30 CBNZ W8, 0x3B7BA38

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x868000
	007 Move X21, 0x579000
	008 Move W8, [X22+2702]
	009 Move X21, [X21+1432]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x579000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2702], W8
	021 Move X0, X20
	022 Move X1, X19
	023 Move X2, X31
	024 Call XRBaseInteractable.OnSelectExited, X0, X1
	025 Move X0, [X21]
	026 Move X21, [X20+464]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X21
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {53}
	039 Compare X19, 0
	040 JumpIfEqual {59}
	041 Move X20, [X20+464]
	042 Move X0, X19
	043 Call SelectExitEventArgs.get_interactorObject, X0
	044 Compare X20, 0
	045 JumpIfEqual {59}
	046 Move X1, X0
	047 Move X0, X20
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]
	058 Return 
	059 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03B7BB90 ADRP X8, 0x578000
	0x03B7BB94 LDR X8, [X8 + 0x5A0]
	0x03B7BB98 LDR X8, [X8]
	0x03B7BB9C LDR X8, [X8 + 0xB8]
	0x03B7BBA0 LDP S9, S10, [X8]
	0x03B7BBA4 LDR V14, [X8 + 0x8]
	0x03B7BBA8 STP S9, S10, [X19 + 0x5C]
	0x03B7BBAC STR S14, [X19 + 0x64]
	0x03B7BBB0 MOV X0, X31
	0x03B7BBB4 BL 0x3C3C714
	0x03B7BBB8 MOV X0, X19
	0x03B7BBBC MOV V8.16B, V0.16B
	0x03B7BBC0 BL 0x3B7BDB4
	0x03B7BBC4 TBZ X0, 0x0, 0x3B7BC28
	0x03B7BBC8 MOV X0, X19
	0x03B7BBCC BL 0x3B7B060
	0x03B7BBD0 TBZ X0, 0x0, 0x3B7BC28
	0x03B7BBD4 LDR X0, [X19 + 0x50]
	0x03B7BBD8 MOVZ W8, 0x1
	0x03B7BBDC STRB W8, [X19 + 0x59]
	0x03B7BBE0 CBZ X0, 0x3B7BC48
	0x03B7BBE4 FMUL S0, S9, S8
	0x03B7BBE8 FMUL S1, S10, S8
	0x03B7BBEC FMUL S2, S14, S8
	0x03B7BBF0 FADD S0, S13, S0
	0x03B7BBF4 FADD S1, S12, S1
	0x03B7BBF8 FADD S2, S11, S2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x868000
	006 Move X20, 0x5E0000
	007 Move W8, [X21+2703]
	008 Move X20, [X20+1080]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5E0000
	015 Move X0, [X0+1080]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2703], W8
	019 Move W9, 0xCCCD
	020 Move W8, 1
	021 NotImplemented "Instruction MOVK not yet implemented."
	022 Move [X19+480], W8
	023 Move [X19+484], W9
	024 Move X0, [X20]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X1, X31
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call XRBaseInteractable..ctor, X0
	036 Return 

