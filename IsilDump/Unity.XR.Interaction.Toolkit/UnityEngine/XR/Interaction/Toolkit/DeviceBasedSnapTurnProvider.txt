Type: UnityEngine.XR.Interaction.Toolkit.DeviceBasedSnapTurnProvider

Method: UnityEngine.XR.Interaction.Toolkit.DeviceBasedSnapTurnProvider/InputAxes get_turnUsage()

Disassembly:
	0x03B80CBC STR S0, [X31 + 0x5C]
	0x03B80CC0 CBNZ W8, 0x3B80CD8

ISIL:
	001 Move W0, [X0+100]
	002 Return X0

Method: System.Void set_turnUsage(UnityEngine.XR.Interaction.Toolkit.DeviceBasedSnapTurnProvider/InputAxes value)

Disassembly:
	0x03B80CC4 ADRP X0, 0x573000
	0x03B80CC8 LDR X0, [X0 + 0x5A8]

ISIL:
	001 Move [X0+100], W1
	002 Return 

Method: System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseController> get_controllers()

Disassembly:
	0x03B80CCC BL 0x1C16CF4
	0x03B80CD0 MOVZ W8, 0x1

ISIL:
	001 Move X0, [X0+104]
	002 Return X0

Method: System.Void set_controllers(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseController> value)

Disassembly:
	0x03B80CD4 STRB W8, [X21 + 0x585]
	0x03B80CD8 LDR X0, [X22]

ISIL:
	001 Move [X0+104], X1
	002 Return 

Method: System.Single get_deadZone()

Disassembly:
	0x03B80CDC FMUL S13, S13, S12
	0x03B80CE0 FMUL S14, S14, S15

ISIL:
	001 Move V0, [X0+112]
	002 Return V0

Method: System.Void set_deadZone(System.Single value)

Disassembly:
	0x03B80CE4 FMUL S8, S8, S15
	0x03B80CE8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X0+112], S0
	002 Return 

Method: UnityEngine.Vector2 ReadInput()

Disassembly:
	0x03B80CEC CBNZ W8, 0x3B80CF4
	0x03B80CF0 BL 0x1C16DFC
	0x03B80CF4 FMUL S1, S14, S14
	0x03B80CF8 FMUL S2, S13, S13
	0x03B80CFC FMUL S0, S8, S8
	0x03B80D00 FADD S1, S2, S1
	0x03B80D04 FADD S0, S0, S1
	0x03B80D08 FMOV S3, 1
	0x03B80D0C FSQRT S12, S0
	0x03B80D10 FDIV S2, S3, S12
	0x03B80D14 FMUL S0, S14, S2
	0x03B80D18 FMUL S1, S13, S2
	0x03B80D1C FMUL S2, S8, S2
	0x03B80D20 MOV X0, X31
	0x03B80D24 BL 0x3887BE0
	0x03B80D28 LDR V13, [X31 + 0x14]
	0x03B80D2C MOV V3.16B, V0.16B
	0x03B80D30 LDR V0, [X31 + 0x5C]
	0x03B80D34 MOV V4.16B, V1.16B
	0x03B80D38 MOV V5.16B, V2.16B
	0x03B80D3C MOV V1.16B, V9.16B
	0x03B80D40 MOV V2.16B, V10.16B
	0x03B80D44 MOV V6.16B, V13.16B
	0x03B80D48 MOV X0, X31
	0x03B80D4C BL 0x3C28A58
	0x03B80D50 LDRB W8, [X21 + 0x585]
	0x03B80D54 MOV V8.16B, V0.16B
	0x03B80D58 MOV V9.16B, V1.16B
	0x03B80D5C MOV V10.16B, V2.16B
	0x03B80D60 CBNZ W8, 0x3B80D78
	0x03B80D64 ADRP X0, 0x573000
	0x03B80D68 LDR X0, [X0 + 0x5A8]
	0x03B80D6C BL 0x1C16CF4
	0x03B80D70 MOVZ W8, 0x1
	0x03B80D74 STRB W8, [X21 + 0x585]
	0x03B80D78 LDR X0, [X22]
	0x03B80D7C LDR W8, [X0 + 0xE0]
	0x03B80D80 CBNZ W8, 0x3B80D88
	0x03B80D84 BL 0x1C16DFC
	0x03B80D88 FSUB S0, S12, S11
	0x03B80D8C FMUL S0, S0, S13
	0x03B80D90 FADD S0, S11, S0
	0x03B80D94 FMUL S1, S0, S8
	0x03B80D98 FMUL S2, S0, S9
	0x03B80D9C FMUL S0, S0, S10
	0x03B80DA0 STP S1, S2, [X19]
	0x03B80DA4 STR S0, [X19 + 0x8]
	0x03B80DA8 B 0x3B80998
	0x03B80DAC LDR X0, [X0 + 0x1D0]
	0x03B80DB0 RET
	0x03B80DB4 STR X1, [X0 + 0x1D0]
	0x03B80DB8 RET
	0x03B80DBC LDR W0, [X0 + 0x1D8]
	0x03B80DC0 RET
	0x03B80DC4 STR W1, [X0 + 0x1D8]
	0x03B80DC8 RET
	0x03B80DCC LDRB W0, [X0 + 0x1DC]
	0x03B80DD0 RET
	0x03B80DD4 AND W8, W1, 0x1
	0x03B80DD8 STRB W8, [X0 + 0x1DC]
	0x03B80DDC RET
	0x03B80DE0 LDR W0, [X0 + 0x1E0]
	0x03B80DE4 RET
	0x03B80DE8 STR W1, [X0 + 0x1E0]
	0x03B80DEC RET
	0x03B80DF0 LDRB W0, [X0 + 0x1E4]
	0x03B80DF4 RET
	0x03B80DF8 AND W8, W1, 0x1
	0x03B80DFC STRB W8, [X0 + 0x1E4]
	0x03B80E00 RET
	0x03B80E04 LDR V0, [X0 + 0x1E8]
	0x03B80E08 RET
	0x03B80E0C STR S0, [X0 + 0x1E8]
	0x03B80E10 RET
	0x03B80E14 LDR X0, [X0 + 0x1F0]
	0x03B80E18 RET
	0x03B80E1C STR X1, [X0 + 0x1F0]
	0x03B80E20 RET
	0x03B80E24 STP X30, X21, [X31 - 0x20]!
	0x03B80E28 STP X20, X19, [X31 + 0x10]
	0x03B80E2C ADRP X21, 0x862000
	0x03B80E30 ADRP X20, 0x573000
	0x03B80E34 LDRB W8, [X21 + 0xAD4]
	0x03B80E38 LDR X20, [X20 + 0x598]
	0x03B80E3C MOV X19, X0
	0x03B80E40 TBNZ X8, 0x0, 0x3B80E64
	0x03B80E44 ADRP X0, 0x5DB000
	0x03B80E48 LDR X0, [X0 + 0xE28]
	0x03B80E4C BL 0x1C16CF4
	0x03B80E50 ADRP X0, 0x573000
	0x03B80E54 LDR X0, [X0 + 0x598]
	0x03B80E58 BL 0x1C16CF4
	0x03B80E5C MOVZ W8, 0x1
	0x03B80E60 STRB W8, [X21 + 0xAD4]
	0x03B80E64 MOV X0, X19
	0x03B80E68 MOV X1, X31
	0x03B80E6C BL 0x3B3A9E0
	0x03B80E70 LDR X0, [X20]
	0x03B80E74 LDR X20, [X19 + 0x1D0]
	0x03B80E78 LDR W8, [X0 + 0xE0]
	0x03B80E7C CBNZ W8, 0x3B80E84
	0x03B80E80 BL 0x1C16DFC
	0x03B80E84 MOV X0, X20
	0x03B80E88 MOV X1, X31
	0x03B80E8C MOV X2, X31
	0x03B80E90 BL 0x3C3883C
	0x03B80E94 TBZ X0, 0x0, 0x3B80EB4
	0x03B80E98 ADRP X8, 0x5DB000
	0x03B80E9C LDR X8, [X8 + 0xE28]
	0x03B80EA0 ADD X0, X19, 0x1D0
	0x03B80EA4 LDP X20, X19, [X31 + 0x10]
	0x03B80EA8 LDR X1, [X8]
	0x03B80EAC LDP X30, X21, [X31], #0x20
	0x03B80EB0 B 0x295FA30
	0x03B80EB4 LDP X20, X19, [X31 + 0x10]
	0x03B80EB8 LDP X30, X21, [X31], #0x20
	0x03B80EBC RET
	0x03B80EC0 MOVZ W8, 0x1
	0x03B80EC4 STR W8, [X0 + 0x58]
	0x03B80EC8 RET
	0x03B80ECC MOV W0, W31
	0x03B80ED0 RET
	0x03B80ED4 SUB X31, X31, 0x1C0
	0x03B80ED8 STP D15, D14, [X31 + 0x140]
	0x03B80EDC STP D13, D12, [X31 + 0x150]
	0x03B80EE0 STP D11, D10, [X31 + 0x160]
	0x03B80EE4 STP D9, D8, [X31 + 0x170]
	0x03B80EE8 STR X29, [X31 + 0x180]
	0x03B80EEC STP X30, X23, [X31 + 0x190]
	0x03B80EF0 STP X22, X21, [X31 + 0x1A0]
	0x03B80EF4 STP X20, X19, [X31 + 0x1B0]
	0x03B80EF8 ADRP X21, 0x862000
	0x03B80EFC LDRB W8, [X21 + 0xAD5]
	0x03B80F00 MOV X20, X1
	0x03B80F04 MOV X19, X0
	0x03B80F08 TBNZ X8, 0x0, 0x3B80F68
	0x03B80F0C ADRP X0, 0x5DB000
	0x03B80F10 LDR X0, [X0 + 0xE28]
	0x03B80F14 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D10
	003 Move [X31+32], D9
	004 Move [X31+40], D8
	005 Move [X31+48], X30
	006 Move [X31+56], X25
	007 Move [X31+64], X24
	008 Move [X31+72], X23
	009 Move [X31+80], X22
	010 Move [X31+88], X21
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move X20, 0x863000
	014 Move W8, [X20+2765]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {37}
	020 Move X0, 0x5DC000
	021 Move X0, [X0+3608]
	022 Call 0x1C17CF4
	023 Move X0, 0x5DC000
	024 Move X0, [X0+3480]
	025 Call 0x1C17CF4
	026 Move X0, 0x5DC000
	027 Move X0, [X0+3488]
	028 Call 0x1C17CF4
	029 Move X0, 0x574000
	030 Move X0, [X0+1432]
	031 Call 0x1C17CF4
	032 Move X0, 0x5DC000
	033 Move X0, [X0+688]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+2765], W8
	037 Move [X31+24], X31
	038 Move [X31], X31
	039 Move [X31+8], X31
	040 Move X8, [X19+104]
	041 Compare X8, 0
	042 JumpIfEqual {152}
	043 Move X21, 0x85A000
	044 Move W9, [X21+1935]
	045 Move W20, [X8+24]
	046 Compare W9, 0
	047 JumpIfNotEqual {53}
	048 Move X0, 0x57C000
	049 Move X0, [X0+3848]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X21+1935], W8
	053 Move X8, 0x57C000
	054 Move X8, [X8+3848]
	055 Move X8, [X8]
	056 Move X8, [X8+184]
	057 Move S8, [X8]
	058 Move S9, [X8+4]
	059 Compare W20, 0
	060 JumpIfEqual {153}
	061 Move X20, 0x5DC000
	062 Move X20, [X20+3608]
	063 Move X0, [X20]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {69}
	067 Call 0x1C17DFC
	068 Move X0, [X20]
	069 Move X8, [X0+184]
	070 Move X8, [X8]
	071 Compare X8, 0
	072 JumpIfEqual {152}
	073 NotImplemented "Instruction LDRSW not yet implemented."
	074 Move W10, [X8+24]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X0, [X19+104]
	077 Compare X0, 0
	078 JumpIfEqual {152}
	079 Move X23, 0x5DC000
	080 Move X23, [X23+3488]
	081 Add X8, X8, X9
	082 Move V0, [X19+112]
	083 Move X24, 0x5DC000
	084 Move X25, 0x574000
	085 Move X21, [X8+32]
	086 Move X24, [X24+688]
	087 Move X25, [X25+1432]
	088 Move W20, W31
	089 Multiply S10, S0, S0
	090 Move W8, [X0+24]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X2, [X23]
	093 Move W1, W20
	094 Call List`1<Object>.get_Item, X0, X1
	095 Compare X0, 0
	096 JumpIfEqual {102}
	097 Move X9, [X0]
	098 Move X8, [X24]
	099 Move W11, [X9+304]
	100 Move W10, [X8+304]
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X22, X31
	103 Move X9, [X9+200]
	104 Add X9, X9, X10
	105 NotImplemented "Instruction LDUR not yet implemented."
	106 NotImplemented "Instruction CMP not yet implemented."
	107 NotImplemented "Instruction CSEL not yet implemented."
	108 Move X0, [X25]
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {113}
	112 Call 0x1C17DFC
	113 Move X0, X22
	114 Move X1, X31
	115 Move X2, X31
	116 Call Object.op_Inequality, X0, X1
	117 Move TEMP, X0
	118 And TEMP, TEMP, 1
	119 Compare TEMP, 1
	120 JumpIfNotEqual {148}
	121 Compare X22, 0
	122 JumpIfEqual {152}
	123 Move W8, [X22+37]
	124 Compare W8, 0
	125 JumpIfEqual {148}
	126 Move X0, X22
	127 Move X1, X31
	128 Call XRController.get_inputDevice, X0
	129 Move [X31], X0
	130 Move [X31+8], X1
	131 Add X0, X31, 0
	132 Add X2, X31, 24
	133 Move X1, X21
	134 Move X3, X31
	135 Call InputDevice.TryGetFeatureValue, X0, X1, X2
	136 Move TEMP, X0
	137 And TEMP, TEMP, 1
	138 Compare TEMP, 1
	139 JumpIfNotEqual {148}
	140 Move S0, [X31+24]
	141 Move S1, [X31+28]
	142 Multiply S2, S0, S0
	143 Multiply S3, S1, S1
	144 Add S2, S2, S3
	145 NotImplemented "Instruction FCMP not yet implemented."
	146 Add S8, S8, S0
	147 Add S9, S9, S1
	148 Move X0, [X19+104]
	149 Add W20, W20, 1
	150 Compare X0, 0
	151 JumpIfNotEqual {90}
	152 Call 0x1C17F20
	153 Move V0, V8
	154 Move V1, V9
	155 Move X20, [X31+96]
	156 Move X19, [X31+104]
	157 Move X22, [X31+80]
	158 Move X21, [X31+88]
	159 Move X24, [X31+64]
	160 Move X23, [X31+72]
	161 Move X30, [X31+48]
	162 Move X25, [X31+56]
	163 Move D9, [X31+32]
	164 Move D8, [X31+40]
	165 Move V10, [X31+16]
	166 Add X31, X31, 112
	167 Return X0
	168 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x03B80F18 ADRP X0, 0x5DB000
	0x03B80F1C LDR X0, [X0 + 0xE30]
	0x03B80F20 BL 0x1C16CF4
	0x03B80F24 ADRP X0, 0x573000
	0x03B80F28 LDR X0, [X0 + 0x598]
	0x03B80F2C BL 0x1C16CF4
	0x03B80F30 ADRP X0, 0x5DB000
	0x03B80F34 LDR X0, [X0 + 0xE38]
	0x03B80F38 BL 0x1C16CF4
	0x03B80F3C ADRP X0, 0x5DB000
	0x03B80F40 LDR X0, [X0 + 0xE40]
	0x03B80F44 BL 0x1C16CF4
	0x03B80F48 ADRP X0, 0x5DA000
	0x03B80F4C LDR X0, [X0 + 0x368]
	0x03B80F50 BL 0x1C16CF4
	0x03B80F54 ADRP X0, 0x5DA000
	0x03B80F58 LDR X0, [X0 + 0x7C0]
	0x03B80F5C BL 0x1C16CF4
	0x03B80F60 MOVZ W8, 0x1
	0x03B80F64 STRB W8, [X21 + 0xAD5]
	0x03B80F68 MOVI V0.2D, 0x0
	0x03B80F6C STR W31, [X31 + 0xD0]
	0x03B80F70 STP X31, X31, [X31 + 0xA0]
	0x03B80F74 STP V0, V0, [X31 + 0xB0]
	0x03B80F78 STP X31, X31, [X31 + 0x90]
	0x03B80F7C CBZ X20, 0x3B812F8
	0x03B80F80 ADRP X23, 0x573000
	0x03B80F84 LDR X23, [X23 + 0x598]
	0x03B80F88 LDR X21, [X19 + 0x1D0]
	0x03B80F8C LDR X0, [X23]
	0x03B80F90 LDR W8, [X0 + 0xE0]
	0x03B80F94 CBNZ W8, 0x3B80F9C
	0x03B80F98 BL 0x1C16DFC
	0x03B80F9C MOV X0, X21
	0x03B80FA0 MOV X1, X31
	0x03B80FA4 MOV X2, X31
	0x03B80FA8 BL 0x3C3883C
	0x03B80FAC TBZ X0, 0x0, 0x3B80FC8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x863000
	007 Move X22, 0x5DC000
	008 Move X20, 0x5DC000
	009 Move W8, [X21+2766]
	010 Move X22, [X22+3496]
	011 Move X20, [X20+3504]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x5DC000
	018 Move X0, [X0+3504]
	019 Call 0x1C17CF4
	020 Move X0, 0x5DC000
	021 Move X0, [X0+3496]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2766], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X1, [X20]
	028 Move X20, X0
	029 Call List`1<Object>..ctor, X0
	030 Move X8, -50929664
	031 Move V0, [X8+1696]
	032 Move W8, 0x3F400000
	033 Move W9, 257
	034 Move [X19+104], X20
	035 Move [X19+112], W8
	036 Move [X19+72], D0
	037 NotImplemented "Instruction STRH not yet implemented."
	038 Move X0, X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X1, X31
	044 Move X30, [X31+48]
	045 Call MonoBehaviour..ctor, X0
	046 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B80FB0 ADRP X8, 0x5DB000
	0x03B80FB4 LDR X8, [X8 + 0xE28]
	0x03B80FB8 ADD X0, X19, 0x1D0
	0x03B80FBC LDR X1, [X8]
	0x03B80FC0 BL 0x295FA30
	0x03B80FC4 TBZ X0, 0x0, 0x3B812F8
	0x03B80FC8 ADRP X8, 0x5DA000
	0x03B80FCC LDR X8, [X8 + 0x7C0]
	0x03B80FD0 ADD X22, X31, 0xE0
	0x03B80FD4 MOVI V0.2D, 0x0
	0x03B80FD8 STUR V0, [X22 + 0x1C]
	0x03B80FDC STP V0, V0, [X31 + 0xE0]
	0x03B80FE0 LDR X9, [X20]
	0x03B80FE4 LDR X8, [X8]
	0x03B80FE8 LDRB W11, [X9 + 0x130]
	0x03B80FEC LDRB W10, [X8 + 0x130]
	0x03B80FF0 CMP W11, W10
	0x03B80FF4 B.CC 0x3B8119C
	0x03B80FF8 LDR X9, [X9 + 0xC8]
	0x03B80FFC ADD X9, X9, X10, 0x3, LSL
	0x03B81000 LDUR X9, [X9 - 0x8]
	0x03B81004 CMP X9, X8
	0x03B81008 B.NE 0x3B8119C
	0x03B8100C LDR X0, [X23]
	0x03B81010 LDR W8, [X0 + 0xE0]
	0x03B81014 CBNZ W8, 0x3B8101C
	0x03B81018 BL 0x1C16DFC
	0x03B8101C MOV X0, X20
	0x03B81020 MOV X1, X31
	0x03B81024 MOV X2, X31
	0x03B81028 BL 0x3C354F8
	0x03B8102C TBZ X0, 0x0, 0x3B8119C
	0x03B81030 ADD X1, X31, 0xE0
	0x03B81034 MOV X0, X20
	0x03B81038 MOV X2, X31
	0x03B8103C BL 0x3B60908
	0x03B81040 TBZ X0, 0x0, 0x3B812F8
	0x03B81044 LDR X21, [X19 + 0x38]
	0x03B81048 ADD X0, X31, 0xE0
	0x03B8104C MOV X1, X31
	0x03B81050 BL 0x3C8E5C0
	0x03B81054 CBZ X21, 0x3B81350
	0x03B81058 MOV X1, X0
	0x03B8105C ADD X2, X31, 0xA8
	0x03B81060 MOV X0, X21
	0x03B81064 MOV X3, X31
	0x03B81068 BL 0x3B72C1C
	0x03B8106C TBZ X0, 0x0, 0x3B812F8
	0x03B81070 LDR X8, [X31 + 0xA8]
	0x03B81074 CMP X8, X19
	0x03B81078 B.NE 0x3B812F8
	0x03B8107C LDRB W8, [X19 + 0x1E4]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x863000
	006 Move X21, 0x5DC000
	007 Move X20, 0x579000
	008 Move W8, [X19+2767]
	009 Move X21, [X21+3512]
	010 Move X20, [X20+344]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x579000
	016 Move X0, [X0+344]
	017 Call 0x1C17CF4
	018 Move X0, 0x5DC000
	019 Move X0, [X0+3608]
	020 Call 0x1C17CF4
	021 Move X0, 0x5DC000
	022 Move X0, [X0+3512]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X19+2767], W8
	026 Move X0, [X21]
	027 Move W1, 2
	028 Call 0x1C17D6C
	029 Move X8, [X20]
	030 Move X19, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X20]
	037 Compare X19, 0
	038 JumpIfEqual {61}
	039 Move W9, [X19+24]
	040 Compare W9, 0
	041 JumpIfEqual {60}
	042 Move X8, [X8+184]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X8, [X8+136]
	045 Move [X19+32], X8
	046 Move X8, [X20]
	047 Move X9, 0x5DB000
	048 Move X8, [X8+184]
	049 Move X8, [X8+144]
	050 Move X9, [X9+3608]
	051 Move [X19+40], X8
	052 Move X8, [X9]
	053 Move X8, [X8+184]
	054 Move [X8], X19
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X30, [X31+32]
	058 Move X21, [X31+40]
	059 Return 
	060 Call 0x1C17F28
	061 Call 0x1C17F20

