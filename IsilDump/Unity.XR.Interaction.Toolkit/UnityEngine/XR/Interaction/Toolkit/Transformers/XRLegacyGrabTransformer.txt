Type: UnityEngine.XR.Interaction.Toolkit.Transformers.XRLegacyGrabTransformer

Method: System.Void OnLink(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable)

Disassembly:
	0x03BAF52C LDP D13, D12, [X31 + 0xA0]
	0x03BAF530 LDP D15, D14, [X31 + 0x90]
	0x03BAF534 ADD X31, X31, 0x120
	0x03BAF538 RET
	0x03BAF53C SUB X31, X31, 0x90
	0x03BAF540 STR D10, [X31 + 0x30]
	0x03BAF544 STP D9, D8, [X31 + 0x40]
	0x03BAF548 STP X30, X25, [X31 + 0x50]
	0x03BAF54C STP X24, X23, [X31 + 0x60]
	0x03BAF550 STP X22, X21, [X31 + 0x70]
	0x03BAF554 STP X20, X19, [X31 + 0x80]
	0x03BAF558 ADRP X25, 0x833000
	0x03BAF55C LDRB W8, [X25 + 0xCB9]
	0x03BAF560 MOV X19, X5
	0x03BAF564 MOV V8.16B, V2.16B
	0x03BAF568 MOV V9.16B, V1.16B
	0x03BAF56C MOV V10.16B, V0.16B
	0x03BAF570 MOV X21, X4
	0x03BAF574 MOV X20, X3
	0x03BAF578 MOV W22, W2
	0x03BAF57C MOV X24, X1
	0x03BAF580 MOV X23, X0
	0x03BAF584 CBNZ W8, 0x3BAF59C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x834000
	006 Move W8, [X21+3250]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x548000
	014 Move X0, [X0+2968]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3250], W8
	018 Compare X20, 0
	019 JumpIfEqual {31}
	020 Move X8, 0x548000
	021 Move X8, [X8+2968]
	022 Move X0, X20
	023 Move X1, [X8]
	024 Call 0x21A4894, X0
	025 Move [X19+32], X0
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return 
	031 Call 0x1C17F20

Method: System.Void OnGrabCountChanged(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, UnityEngine.Pose targetPose, UnityEngine.Vector3 localScale)

Disassembly:
	0x03BAF588 ADRP X0, 0x56F000
	0x03BAF58C LDR X0, [X0 + 0x838]
	0x03BAF590 BL 0x1C16CF4
	0x03BAF594 MOVZ W8, 0x1
	0x03BAF598 STRB W8, [X25 + 0xCB9]
	0x03BAF59C STR W31, [X31 + 0x18]
	0x03BAF5A0 STR X31, [X31 + 0x10]
	0x03BAF5A4 LDR W8, [X23 + 0x8]
	0x03BAF5A8 LDR X9, [X23]
	0x03BAF5AC FMUL S0, S10, S9
	0x03BAF5B0 FMUL S8, S0, S8
	0x03BAF5B4 STR W8, [X19 + 0x8]
	0x03BAF5B8 STR X9, [X19]
	0x03BAF5BC STP S8, S8, [X31 + 0x20]
	0x03BAF5C0 STR S8, [X31 + 0x28]
	0x03BAF5C4 LDP S0, S1, [X24]
	0x03BAF5C8 LDR V2, [X24 + 0x8]
	0x03BAF5CC MOV X0, X31
	0x03BAF5D0 BL 0x3887BE4
	0x03BAF5D4 ADD X0, X31, 0x20
	0x03BAF5D8 ADD X1, X31, 0x0
	0x03BAF5DC ADD X2, X31, 0x10
	0x03BAF5E0 MOV X3, X31
	0x03BAF5E4 STP S0, S1, [X31]
	0x03BAF5E8 STR S2, [X31 + 0x8]
	0x03BAF5EC BL 0x3B87CD0
	0x03BAF5F0 LDP S0, S1, [X23]
	0x03BAF5F4 LDR V2, [X23 + 0x8]
	0x03BAF5F8 MOV X0, X31
	0x03BAF5FC BL 0x3887BE4
	0x03BAF600 LDP S3, S4, [X31 + 0x10]
	0x03BAF604 LDR V5, [X31 + 0x18]
	0x03BAF608 FADD S3, S0, S3
	0x03BAF60C FADD S1, S1, S4
	0x03BAF610 FADD S2, S2, S5
	0x03BAF614 TBZ X22, 0x0, 0x3BAF63C
	0x03BAF618 FCMP S8, 0x0
	0x03BAF61C B.LE 0x3BAF6A4
	0x03BAF620 LDR V0, [X21]
	0x03BAF624 FABS S4, S3
	0x03BAF628 FABS S5, S0
	0x03BAF62C FCMP S4, S5
	0x03BAF630 B.LE 0x3BAF6C4
	0x03BAF634 LDR V4, [X21 + 0x4]
	0x03BAF638 B 0x3BAF6F8
	0x03BAF63C ADRP X8, 0x56F000
	0x03BAF640 LDR X8, [X8 + 0x838]
	0x03BAF644 MOVZ W9, 0x7F800000
	0x03BAF648 LDR X8, [X8]
	0x03BAF64C LDR X8, [X8 + 0xB8]
	0x03BAF650 LDP S0, S4, [X8]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, 0x834000
	007 Move W8, [X21+3251]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5AC000
	015 Move X0, [X0+360]
	016 Call 0x1C17CF4
	017 Move X0, 0x5AC000
	018 Move X0, [X0+368]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3251], W8
	022 Compare X20, 0
	023 JumpIfEqual {60}
	024 Move X0, X20
	025 Move X1, X31
	026 Call XRBaseInteractable.get_interactorsSelecting, X0
	027 Compare X0, 0
	028 JumpIfEqual {60}
	029 Move W8, [X0+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, X20
	032 Move X1, X31
	033 Call XRBaseInteractable.get_interactorsSelecting, X0
	034 Compare X0, 0
	035 JumpIfEqual {60}
	036 Move X8, 0x5AC000
	037 Move X8, [X8+368]
	038 Move W1, W31
	039 Move X2, [X8]
	040 Call List`1<Object>.get_Item, X0, X1
	041 Move X1, X0
	042 Add X8, X31, 0
	043 Move X0, X19
	044 Move X2, X20
	045 Call XRLegacyGrabTransformer.CalculateOffsetPoseLegacy, X0, X1, X2
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 Move V1, [X31]
	048 Move [X31+44], V0
	049 Move [X31+2], V1
	050 Move V0, [X31+2]
	051 NotImplemented "Instruction LDUR not yet implemented."
	052 Move [X19+40], V0
	053 Move [X19+52], V1
	054 Move X20, [X31+80]
	055 Move X19, [X31+88]
	056 Move X30, [X31+64]
	057 Move X21, [X31+72]
	058 Add X31, X31, 96
	059 Return 
	060 Call 0x1C17F20

Method: System.Void Process(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase, ref UnityEngine.Pose targetPose, ref UnityEngine.Vector3 localScale)

Disassembly:
	0x03BAF8CC FCMP S4, S5
	0x00000000 INVALID
	0x03BAF8D4 B.GT 0x3BAF8F8
	0x03BAF8D8 LDR W8, [X22 + 0x4]
	0x03BAF8DC FMOV W9, S0
	0x03BAF8E0 AND W9, W9, 0x7FFFFFFF

ISIL:
	001 Or W8, W2, 2
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move X2, X3
	004 Return 

Method: UnityEngine.Pose CalculateOffsetPoseLegacy(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor, UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable)

Disassembly:
	0x03BAF654 LDR V5, [X8 + 0x8]
	0x03BAF658 FMOV W8, S0
	0x03BAF65C AND W8, W8, 0x7FFFFFFF
	0x03BAF660 CMP W8, W9
	0x03BAF664 FMOV W8, S4
	0x03BAF668 AND W8, W8, 0x7FFFFFFF
	0x03BAF66C FCCMP S3, S0, 0x0, LS
	0x03BAF670 FCSEL S0, S3, S0, GT
	0x03BAF674 CMP W8, W9
	0x03BAF678 FMOV W8, S5
	0x03BAF67C AND W8, W8, 0x7FFFFFFF
	0x03BAF680 FCCMP S1, S4, 0x0, LS
	0x03BAF684 FCSEL S1, S1, S4, GT
	0x03BAF688 CMP W8, W9
	0x03BAF68C FCCMP S2, S5, 0x0, LS
	0x03BAF690 FCSEL S2, S2, S5, GT
	0x03BAF694 MOV X0, X31
	0x03BAF698 BL 0x3887BE0
	0x03BAF69C MOV V4.16B, V1.16B
	0x03BAF6A0 B 0x3BAF740
	0x03BAF6A4 B.PL 0x3BAF748
	0x03BAF6A8 LDR V0, [X20]
	0x03BAF6AC FABS S4, S3
	0x03BAF6B0 FABS S5, S0
	0x03BAF6B4 FCMP S4, S5
	0x03BAF6B8 B.PL 0x3BAF700
	0x03BAF6BC LDR V4, [X20 + 0x4]
	0x03BAF6C0 B 0x3BAF73C
	0x03BAF6C4 LDR W8, [X21 + 0x4]
	0x03BAF6C8 FABS S4, S1
	0x03BAF6CC AND W9, W8, 0x7FFFFFFF
	0x03BAF6D0 FMOV S5, W9
	0x03BAF6D4 FCMP S4, S5
	0x03BAF6D8 FMOV S4, W8
	0x03BAF6DC B.GT 0x3BAF6F8
	0x03BAF6E0 LDR W8, [X21 + 0x8]
	0x03BAF6E4 FABS S5, S2
	0x03BAF6E8 AND W8, W8, 0x7FFFFFFF
	0x03BAF6EC FMOV S6, W8
	0x03BAF6F0 FCMP S5, S6
	0x03BAF6F4 B.LE 0x3BAF734
	0x03BAF6F8 LDR V2, [X21 + 0x8]
	0x03BAF6FC B 0x3BAF740
	0x03BAF700 LDR W8, [X20 + 0x4]
	0x03BAF704 FABS S4, S1
	0x03BAF708 AND W9, W8, 0x7FFFFFFF
	0x03BAF70C FMOV S5, W9
	0x03BAF710 FCMP S4, S5
	0x03BAF714 FMOV S4, W8
	0x03BAF718 B.MI 0x3BAF73C
	0x03BAF71C LDR W8, [X20 + 0x8]
	0x03BAF720 FABS S5, S2
	0x03BAF724 AND W8, W8, 0x7FFFFFFF
	0x03BAF728 FMOV S6, W8
	0x03BAF72C FCMP S5, S6
	0x03BAF730 B.MI 0x3BAF73C
	0x03BAF734 MOV V0.16B, V3.16B
	0x03BAF738 B 0x3BAF694
	0x03BAF73C LDR V2, [X20 + 0x8]
	0x03BAF740 STP S0, S4, [X19]
	0x03BAF744 STR S2, [X19 + 0x8]
	0x03BAF748 LDP X20, X19, [X31 + 0x80]
	0x03BAF74C LDP X22, X21, [X31 + 0x70]
	0x03BAF750 LDP X24, X23, [X31 + 0x60]
	0x03BAF754 LDP X30, X25, [X31 + 0x50]
	0x03BAF758 LDP D9, D8, [X31 + 0x40]
	0x03BAF75C LDR V10, [X31 + 0x30]
	0x03BAF760 ADD X31, X31, 0x90
	0x03BAF764 RET
	0x03BAF768 STP D13, D12, [X31 - 0x80]!
	0x03BAF76C STP D11, D10, [X31 + 0x10]
	0x03BAF770 STP D9, D8, [X31 + 0x20]
	0x03BAF774 STR X30, [X31 + 0x30]
	0x03BAF778 STP X26, X25, [X31 + 0x40]
	0x03BAF77C STP X24, X23, [X31 + 0x50]
	0x03BAF780 STP X22, X21, [X31 + 0x60]
	0x03BAF784 STP X20, X19, [X31 + 0x70]
	0x03BAF788 LDR W8, [X1 + 0x8]
	0x03BAF78C LDR X9, [X1]
	0x03BAF790 MOV V8.16B, V1.16B
	0x03BAF794 MOV V9.16B, V0.16B
	0x03BAF798 STR W8, [X7 + 0x8]
	0x03BAF79C STR X9, [X7]
	0x03BAF7A0 LDP S0, S1, [X3]
	0x03BAF7A4 LDR V2, [X3 + 0x8]
	0x03BAF7A8 MOV X23, X0
	0x03BAF7AC MOV X0, X31
	0x03BAF7B0 MOV X19, X7
	0x03BAF7B4 MOV X22, X6
	0x03BAF7B8 MOV X21, X5
	0x03BAF7BC MOV W20, W4
	0x03BAF7C0 MOV X24, X2
	0x03BAF7C4 BL 0x3887BE4
	0x03BAF7C8 ADRP X25, 0x832000
	0x03BAF7CC LDRB W8, [X25 + 0x585]
	0x03BAF7D0 MOV V11.16B, V0.16B
	0x03BAF7D4 MOV V10.16B, V1.16B
	0x03BAF7D8 MOV V12.16B, V2.16B
	0x03BAF7DC CBNZ W8, 0x3BAF7F4
	0x03BAF7E0 ADRP X0, 0x544000
	0x03BAF7E4 LDR X0, [X0 + 0x5A8]
	0x03BAF7E8 BL 0x1C16CF4
	0x03BAF7EC MOVZ W8, 0x1
	0x03BAF7F0 STRB W8, [X25 + 0x585]
	0x03BAF7F4 ADRP X26, 0x544000
	0x03BAF7F8 LDR X26, [X26 + 0x5A8]
	0x03BAF7FC LDR X0, [X26]
	0x03BAF800 LDR W8, [X0 + 0xE0]
	0x03BAF804 CBNZ W8, 0x3BAF80C
	0x03BAF808 BL 0x1C16DFC
	0x03BAF80C LDP S0, S1, [X24]
	0x03BAF810 LDR V2, [X24 + 0x8]
	0x03BAF814 FMUL S4, S11, S11
	0x03BAF818 FMUL S5, S10, S10
	0x03BAF81C FMUL S3, S12, S12
	0x03BAF820 FADD S4, S4, S5
	0x03BAF824 MOV X0, X31
	0x03BAF828 FADD S13, S3, S4
	0x03BAF82C BL 0x3887BE4
	0x03BAF830 LDRB W8, [X25 + 0x585]
	0x03BAF834 MOV V10.16B, V0.16B
	0x03BAF838 MOV V11.16B, V1.16B
	0x03BAF83C MOV V12.16B, V2.16B
	0x03BAF840 CBNZ W8, 0x3BAF858
	0x03BAF844 ADRP X0, 0x544000
	0x03BAF848 LDR X0, [X0 + 0x5A8]
	0x03BAF84C BL 0x1C16CF4
	0x03BAF850 MOVZ W8, 0x1
	0x03BAF854 STRB W8, [X25 + 0x585]
	0x03BAF858 LDR X0, [X26]
	0x03BAF85C FSQRT S13, S13
	0x03BAF860 LDR W8, [X0 + 0xE0]
	0x03BAF864 CBNZ W8, 0x3BAF86C
	0x03BAF868 BL 0x1C16DFC
	0x03BAF86C FMUL S1, S10, S10
	0x03BAF870 FMUL S2, S11, S11
	0x03BAF874 FMUL S0, S12, S12
	0x03BAF878 FADD S1, S1, S2
	0x03BAF87C FADD S0, S0, S1
	0x03BAF880 FSQRT S0, S0
	0x03BAF884 FDIV S1, S13, S0
	0x03BAF888 FMOV S0, 1
	0x03BAF88C FCMP S1, S0
	0x03BAF890 B.LE 0x3BAF900
	0x03BAF894 FMOV S0, -1
	0x03BAF898 FADD S0, S1, S0
	0x03BAF89C FMUL S0, S0, S9
	0x03BAF8A0 FSUB S0, S0, S8
	0x03BAF8A4 FCMP S0, 0x0
	0x03BAF8A8 B.MI 0x3BAF9E0
	0x03BAF8AC LDR V1, [X23]
	0x03BAF8B0 LDR V2, [X22]
	0x03BAF8B4 LDUR V3, [X23 + 0x4]
	0x03BAF8B8 FMOV S4, 1
	0x03BAF8BC FADD S0, S0, S4
	0x03BAF8C0 FMUL S1, S0, S1
	0x03BAF8C4 FABS S4, S1
	0x03BAF8C8 FABS S5, S2

ISIL:
	001 Move [X31-112], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X23, 0x834000
	015 Move W9, [X23+3252]
	016 Move X21, X2
	017 Move X22, X1
	018 Move X20, X0
	019 Move X19, X8
	020 Move TEMP, X9
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x5AC000
	025 Move X0, [X0+760]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X23+3252], W8
	029 Compare X21, 0
	030 JumpIfEqual {180}
	031 Move X8, [X21]
	032 Move X0, X21
	033 Move X1, X22
	034 Move X9, [X8+1448]
	035 Move X2, [X8+1456]
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Move X8, [X20+32]
	038 Compare X8, 0
	039 JumpIfEqual {180}
	040 Move X20, X0
	041 Move X0, X8
	042 Move X1, X31
	043 Call Rigidbody.get_worldCenterOfMass, X0
	044 Compare X20, 0
	045 JumpIfEqual {180}
	046 Move X0, X20
	047 Move X1, X31
	048 Move V8, V0
	049 Move V9, V1
	050 Move V10, V2
	051 Call Transform.get_position, X0
	052 Subtract S0, S8, S0
	053 Subtract S1, S9, S1
	054 Subtract S2, S10, S2
	055 Move X0, X20
	056 Move X1, X31
	057 Call Transform.InverseTransformDirection, X0, X1
	058 Compare X22, 0
	059 JumpIfEqual {180}
	060 Move X10, 0x5AC000
	061 Move X8, [X22]
	062 Move X10, [X10+760]
	063 Move V8, V0
	064 Move V9, V1
	065 NotImplemented "Instruction LDRH not yet implemented."
	066 Move X1, [X10]
	067 Move V10, V2
	068 Compare X9, 0
	069 JumpIfEqual {76}
	070 Move X10, [X8+176]
	071 Add X10, X10, 8
	072 NotImplemented "Instruction LDUR not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Subtract X9, X9, 1
	075 Add X10, X10, 16
	076 Move W2, 6
	077 Move X0, X22
	078 Call 0x1C5D788
	079 Move W9, [X10]
	080 Add W9, W9, 6
	081 Add X8, X8, W9
	082 Add X0, X8, 312
	083 Move X8, [X0]
	084 Move X2, [X0+8]
	085 Move X0, X22
	086 Move X1, X21
	087 NotImplemented "Instruction BLR not yet implemented."
	088 Compare X0, 0
	089 JumpIfEqual {180}
	090 Move X1, X31
	091 Call Transform.get_lossyScale, X0
	092 Move X0, X21
	093 Move X1, X31
	094 Move V11, V0
	095 Move V12, V1
	096 Move V13, V2
	097 Call Component.get_transform, X0
	098 Compare X0, 0
	099 JumpIfEqual {180}
	100 Move S0, 1
	101 NotImplemented "Instruction FDIV not yet implemented."
	102 NotImplemented "Instruction FDIV not yet implemented."
	103 NotImplemented "Instruction FDIV not yet implemented."
	104 Move X1, X31
	105 Multiply S10, S10, S1
	106 Multiply S9, S9, S2
	107 Multiply S8, S8, S0
	108 Call Transform.get_rotation, X0
	109 Move X0, X31
	110 Call Quaternion.Inverse, X0
	111 Move X0, X20
	112 Move X1, X31
	113 Move V11, V0
	114 Move V12, V1
	115 Move V13, V2
	116 Move V14, V3
	117 Call Transform.get_rotation, X0
	118 Multiply S4, S14, S0
	119 Multiply S5, S11, S3
	120 Multiply S7, S13, S1
	121 Multiply S16, S14, S1
	122 Multiply S17, S12, S3
	123 Multiply S18, S13, S0
	124 Multiply S20, S11, S1
	125 Multiply S21, S11, S0
	126 Multiply S22, S12, S0
	127 Multiply S0, S12, S1
	128 Multiply S1, S14, S2
	129 Multiply S23, S14, S3
	130 Multiply S3, S13, S3
	131 Multiply S6, S12, S2
	132 Multiply S19, S11, S2
	133 Multiply S24, S13, S2
	134 Add S2, S4, S5
	135 Add S4, S16, S17
	136 Add S1, S1, S3
	137 Subtract S3, S23, S21
	138 Add S2, S6, S2
	139 Add S4, S18, S4
	140 Add S5, S20, S1
	141 Subtract S3, S3, S0
	142 Subtract S0, S2, S7
	143 Subtract S1, S4, S19
	144 Subtract S2, S5, S22
	145 Subtract S3, S3, S24
	146 Move X0, X31
	147 Call Quaternion.Inverse, X0
	148 Move V4, V0
	149 Move V5, V1
	150 Move V6, V2
	151 Move [X19+8], X31
	152 Move [X19+16], X31
	153 Move [X19], X31
	154 Move [X19+24], W31
	155 Move V0, V8
	156 Move V1, V9
	157 Move V2, V10
	158 Move X0, X19
	159 Move X20, [X31+96]
	160 Move X19, [X31+104]
	161 Move X22, [X31+80]
	162 Move X21, [X31+88]
	163 Move X30, [X31+64]
	164 Move X23, [X31+72]
	165 Move D9, [X31+48]
	166 Move D8, [X31+56]
	167 Move D11, [X31+32]
	168 Move D10, [X31+40]
	169 Move D13, [X31+16]
	170 Move D12, [X31+24]
	171 Move V7, V3
	172 Move V3, V4
	173 Move V4, V5
	174 Move V5, V6
	175 Move V6, V7
	176 Move X1, X31
	177 Move V14, [X31+112]
	178 Call Pose..ctor, X0, X1, X2
	179 Return X0
	180 Call 0x1C17F20

Method: System.Void UpdateTarget(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, ref UnityEngine.Pose targetPose)

Disassembly:
	0x03BAF8E4 FMOV S3, W9
	0x03BAF8E8 AND W8, W8, 0x7FFFFFFF
	0x03BAF8EC FMOV S4, W8
	0x03BAF8F0 FCMP S3, S4
	0x03BAF8F4 B.LE 0x3BAF978
	0x03BAF8F8 MOVZ W8, 0x1
	0x03BAF8FC B 0x3BAF998
	0x03BAF900 B.PL 0x3BAF9E0
	0x03BAF904 FMOV S0, 1
	0x03BAF908 FDIV S1, S0, S1
	0x03BAF90C FMOV S2, -1
	0x03BAF910 FADD S1, S1, S2
	0x03BAF914 FMUL S1, S1, S9
	0x03BAF918 FSUB S1, S1, S8
	0x03BAF91C FCMP S1, 0x0
	0x03BAF920 B.MI 0x3BAF9E0
	0x03BAF924 LDR V3, [X23]
	0x03BAF928 LDR V2, [X21]
	0x03BAF92C FADD S1, S1, S0
	0x03BAF930 LDUR V4, [X23 + 0x4]
	0x03BAF934 FDIV S0, S0, S1
	0x03BAF938 FMUL S1, S0, S3
	0x03BAF93C FABS S3, S1
	0x03BAF940 FABS S5, S2
	0x03BAF944 FCMP S3, S5
	0x00000000 INVALID
	0x03BAF94C B.MI 0x3BAF970
	0x03BAF950 LDR W8, [X21 + 0x4]
	0x03BAF954 FMOV W9, S0
	0x03BAF958 AND W9, W9, 0x7FFFFFFF
	0x03BAF95C FMOV S3, W9
	0x03BAF960 AND W8, W8, 0x7FFFFFFF
	0x03BAF964 FMOV S4, W8
	0x03BAF968 FCMP S3, S4
	0x03BAF96C B.PL 0x3BAF9A8
	0x03BAF970 MOVZ W8, 0x1
	0x03BAF974 B 0x3BAF9C8
	0x03BAF978 LDR W8, [X22 + 0x8]
	0x03BAF97C UNIMPLEMENTED
	0x03BAF980 AND W9, W9, 0x7FFFFFFF
	0x03BAF984 FMOV S3, W9
	0x03BAF988 AND W8, W8, 0x7FFFFFFF
	0x03BAF98C FMOV S4, W8
	0x03BAF990 FCMP S3, S4
	0x03BAF994 CSET W8, GT
	0x03BAF998 ANDS W31, W20, W8, 0x0
	0x03BAF99C B.EQ 0x3BAF9D8
	0x03BAF9A0 LDUR V0, [X22 + 0x4]
	0x03BAF9A4 B 0x3BAF9D4
	0x03BAF9A8 LDR W8, [X21 + 0x8]
	0x03BAF9AC UNIMPLEMENTED
	0x03BAF9B0 AND W9, W9, 0x7FFFFFFF
	0x03BAF9B4 FMOV S3, W9
	0x03BAF9B8 AND W8, W8, 0x7FFFFFFF
	0x03BAF9BC FMOV S4, W8
	0x03BAF9C0 FCMP S3, S4
	0x03BAF9C4 CSET W8, MI
	0x03BAF9C8 ANDS W31, W20, W8, 0x0
	0x03BAF9CC B.EQ 0x3BAF9D8
	0x03BAF9D0 LDUR V0, [X21 + 0x4]
	0x03BAF9D4 MOV V1.16B, V2.16B
	0x03BAF9D8 STR S1, [X19]
	0x03BAF9DC STUR D0, [X19 + 0x4]
	0x03BAF9E0 LDP X20, X19, [X31 + 0x70]
	0x03BAF9E4 LDP X22, X21, [X31 + 0x60]
	0x03BAF9E8 LDP X24, X23, [X31 + 0x50]
	0x03BAF9EC LDP X26, X25, [X31 + 0x40]
	0x03BAF9F0 LDR X30, [X31 + 0x30]
	0x03BAF9F4 LDP D9, D8, [X31 + 0x20]
	0x03BAF9F8 LDP D11, D10, [X31 + 0x10]
	0x03BAF9FC LDP D13, D12, [X31], #0x80
	0x03BAFA00 RET
	0x03BAFA04 LDRB W0, [X0 + 0x10]
	0x03BAFA08 RET
	0x03BAFA0C AND W8, W1, 0x1
	0x03BAFA10 STRB W8, [X0 + 0x10]
	0x03BAFA14 RET
	0x03BAFA18 LDR V0, [X0 + 0x14]
	0x03BAFA1C RET
	0x03BAFA20 STR S0, [X0 + 0x14]
	0x03BAFA24 RET
	0x03BAFA28 LDR W0, [X0 + 0x18]
	0x03BAFA2C RET
	0x03BAFA30 STR W1, [X0 + 0x18]
	0x03BAFA34 RET
	0x03BAFA38 LDP S0, S1, [X0 + 0x1C]
	0x03BAFA3C LDR V2, [X0 + 0x24]
	0x03BAFA40 RET
	0x03BAFA44 STP S0, S1, [X0 + 0x1C]
	0x03BAFA48 STR S2, [X0 + 0x24]
	0x03BAFA4C RET
	0x03BAFA50 LDP S0, S1, [X0 + 0x28]
	0x03BAFA54 LDR V2, [X0 + 0x30]
	0x03BAFA58 RET
	0x03BAFA5C STP S0, S1, [X0 + 0x28]
	0x03BAFA60 STR S2, [X0 + 0x30]
	0x03BAFA64 RET
	0x03BAFA68 LDR X0, [X0 + 0x38]
	0x03BAFA6C RET
	0x03BAFA70 STR X1, [X0 + 0x38]
	0x03BAFA74 RET
	0x03BAFA78 RET
	0x03BAFA7C RET
	0x03BAFA80 LDR W8, [X0 + 0x18]
	0x03BAFA84 CBZ W8, 0x3BAFA8C
	0x03BAFA88 B 0x3BAFA90
	0x03BAFA8C RET
	0x03BAFA90 SUB X31, X31, 0xA0
	0x03BAFA94 STP D15, D14, [X31 + 0x20]
	0x03BAFA98 STP D13, D12, [X31 + 0x30]
	0x03BAFA9C STP D11, D10, [X31 + 0x40]
	0x03BAFAA0 STP D9, D8, [X31 + 0x50]
	0x03BAFAA4 STP X30, X25, [X31 + 0x60]
	0x03BAFAA8 STP X24, X23, [X31 + 0x70]
	0x03BAFAAC STP X22, X21, [X31 + 0x80]
	0x03BAFAB0 STP X20, X19, [X31 + 0x90]
	0x03BAFAB4 ADRP X20, 0x833000
	0x03BAFAB8 LDRB W8, [X20 + 0xCBC]
	0x03BAFABC MOV V8.16B, V2.16B
	0x03BAFAC0 MOV V9.16B, V1.16B
	0x03BAFAC4 MOV V10.16B, V0.16B
	0x03BAFAC8 MOV X19, X1
	0x03BAFACC MOV X21, X0
	0x03BAFAD0 TBNZ X8, 0x0, 0x3BAFB0C
	0x03BAFAD4 ADRP X0, 0x5AA000
	0x03BAFAD8 LDR X0, [X0 + 0xB98]
	0x03BAFADC BL 0x1C16CF4
	0x03BAFAE0 ADRP X0, 0x5AD000
	0x03BAFAE4 LDR X0, [X0 + 0xE80]
	0x03BAFAE8 BL 0x1C16CF4
	0x03BAFAEC ADRP X0, 0x5AD000
	0x03BAFAF0 LDR X0, [X0 + 0xE88]
	0x03BAFAF4 BL 0x1C16CF4
	0x03BAFAF8 ADRP X0, 0x5AB000
	0x03BAFAFC LDR X0, [X0 + 0x8D8]
	0x03BAFB00 BL 0x1C16CF4
	0x03BAFB04 MOVZ W8, 0x1
	0x03BAFB08 STRB W8, [X20 + 0xCBC]
	0x03BAFB0C LDR X0, [X21 + 0x40]
	0x03BAFB10 CBZ X0, 0x3BAFD9C
	0x03BAFB14 ADRP X8, 0x5AD000

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D14
	003 Move [X31+40], D13
	004 Move [X31+48], D12
	005 Move [X31+56], D11
	006 Move [X31+64], D10
	007 Move [X31+72], D9
	008 Move [X31+80], D8
	009 Move [X31+88], X30
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X22, 0x834000
	015 Move W8, [X22+3253]
	016 Move X19, X2
	017 Move X21, X1
	018 Move X20, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0x5AC000
	024 Move X0, [X0+760]
	025 Call 0x1C17CF4
	026 Move X0, 0x5AC000
	027 Move X0, [X0+368]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+3253], W8
	031 Compare X21, 0
	032 JumpIfEqual {168}
	033 Move X0, X21
	034 Move X1, X31
	035 Call XRBaseInteractable.get_interactorsSelecting, X0
	036 Compare X0, 0
	037 JumpIfEqual {168}
	038 Move X8, 0x5AC000
	039 Move X8, [X8+368]
	040 Move W1, W31
	041 Move X2, [X8]
	042 Call List`1<Object>.get_Item, X0, X1
	043 Compare X0, 0
	044 JumpIfEqual {168}
	045 Move X10, 0x5AC000
	046 Move X8, [X0]
	047 Move X10, [X10+760]
	048 Move X22, X0
	049 NotImplemented "Instruction LDRH not yet implemented."
	050 Move X1, [X10]
	051 Compare X9, 0
	052 JumpIfEqual {59}
	053 Move X10, [X8+176]
	054 Add X10, X10, 8
	055 NotImplemented "Instruction LDUR not yet implemented."
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Subtract X9, X9, 1
	058 Add X10, X10, 16
	059 Move W2, 6
	060 Move X0, X22
	061 Call 0x1C5D788
	062 Move W9, [X10]
	063 Add W9, W9, 6
	064 Add X8, X8, W9
	065 Add X0, X8, 312
	066 Move X8, [X0]
	067 Move X2, [X0+8]
	068 Move X0, X22
	069 Move X1, X21
	070 NotImplemented "Instruction BLR not yet implemented."
	071 Add X8, X31, 0
	072 Move X1, X31
	073 Call TransformExtensions.GetWorldPose, X0
	074 Move S14, [X31]
	075 Move S12, [X31+4]
	076 Move W8, [X21+524]
	077 Move V13, [X31+8]
	078 Compare W8, 0
	079 JumpIfEqual {135}
	080 Move S8, [X31+12]
	081 Move S9, [X31+16]
	082 Move S10, [X31+20]
	083 Move S11, [X31+24]
	084 Move S4, [X20+40]
	085 Move S5, [X20+44]
	086 Move V6, [X20+48]
	087 Move V0, V8
	088 Move V1, V9
	089 Move V2, V10
	090 Move V3, V11
	091 Move X0, X31
	092 Call Quaternion.op_Multiply, X0, X1
	093 Add S0, S14, S0
	094 Add S1, S12, S1
	095 Add S2, S13, S2
	096 Move [X19], S0
	097 Move [X19+8], S1
	098 Move [X19+8], S2
	099 Move S0, [X20+52]
	100 Move S3, [X20+56]
	101 Move S2, [X20+60]
	102 Move S1, [X20+64]
	103 Multiply S4, S11, S0
	104 Multiply S5, S8, S1
	105 Multiply S16, S11, S3
	106 Multiply S17, S9, S1
	107 Multiply S21, S8, S0
	108 Multiply S22, S11, S2
	109 Multiply S23, S11, S1
	110 Multiply S1, S10, S1
	111 Multiply S6, S9, S2
	112 Multiply S7, S10, S3
	113 Multiply S18, S10, S0
	114 Multiply S20, S8, S3
	115 Multiply S3, S9, S3
	116 Add S4, S4, S5
	117 Add S5, S16, S17
	118 Add S1, S22, S1
	119 Subtract S16, S23, S21
	120 Multiply S19, S8, S2
	121 Multiply S0, S9, S0
	122 Multiply S2, S10, S2
	123 Add S4, S6, S4
	124 Add S5, S18, S5
	125 Add S1, S20, S1
	126 Subtract S3, S16, S3
	127 Subtract S4, S4, S7
	128 Subtract S5, S5, S19
	129 Subtract S0, S1, S0
	130 Subtract S1, S3, S2
	131 Move [X19+12], S4
	132 Move [X19+20], S5
	133 Move [X19+20], S0
	134 Move [X19+28], S1
	135 Move X8, [X21]
	136 Move X0, X21
	137 Move X1, X22
	138 Move X9, [X8+1448]
	139 Move X2, [X8+1456]
	140 NotImplemented "Instruction BLR not yet implemented."
	141 Compare X0, 0
	142 JumpIfEqual {168}
	143 Move S1, [X20+44]
	144 Move S2, [X20+48]
	145 Move V0, [X20+40]
	146 Move X1, X31
	147 Call Transform.TransformDirection, X0, X1
	148 Add S0, S14, S0
	149 Add S1, S12, S1
	150 Add S2, S13, S2
	151 Move [X19], S0
	152 Move [X19+8], S1
	153 Move [X19+8], S2
	154 Move X20, [X31+112]
	155 Move X19, [X31+120]
	156 Move X22, [X31+96]
	157 Move X21, [X31+104]
	158 Move X30, [X31+88]
	159 Move D9, [X31+72]
	160 Move D8, [X31+80]
	161 Move D11, [X31+56]
	162 Move D10, [X31+64]
	163 Move D13, [X31+40]
	164 Move D12, [X31+48]
	165 Move V14, [X31+32]
	166 Add X31, X31, 128
	167 Return 
	168 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03BAFB18 LDR X8, [X8 + 0xE80]
	0x03BAFB1C MOV X1, X19

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

