Type: UnityEngine.XR.Interaction.Toolkit.Transformers.XRSocketGrabTransformer/CalculateScaleToFit_00000C23$BurstDirectCall

Method: System.Void GetFunctionPointerDiscard(ref System.IntPtr param_0)

Disassembly:
	0x03BB2F90 LDR W9, [X10]
	0x03BB2F94 ADD W9, W9, 0x1
	0x03BB2F98 ADD X8, X8, W9, 0x4, SXTW
	0x03BB2F9C ADD X0, X8, 0x138
	0x03BB2FA0 LDP X8, X2, [X0]
	0x03BB2FA4 MOV X0, X20
	0x03BB2FA8 MOV X1, X19
	0x03BB2FAC BLR X8
	0x03BB2FB0 MOV X0, X19
	0x03BB2FB4 LDP X20, X19, [X31 + 0x10]
	0x03BB2FB8 LDP X30, X21, [X31], #0x20
	0x03BB2FBC B 0x3BB2FC4
	0x03BB2FC0 BL 0x1C16F20
	0x03BB2FC4 STP X30, X21, [X31 - 0x20]!
	0x03BB2FC8 STP X20, X19, [X31 + 0x10]
	0x03BB2FCC ADRP X21, 0x830000
	0x03BB2FD0 ADRP X20, 0x541000
	0x03BB2FD4 LDRB W8, [X21 + 0xCE1]
	0x03BB2FD8 LDR X20, [X20 + 0x598]
	0x03BB2FDC MOV X19, X0
	0x03BB2FE0 TBNZ X8, 0x0, 0x3BB3040
	0x03BB2FE4 ADRP X0, 0x541000
	0x03BB2FE8 LDR X0, [X0 + 0x598]
	0x03BB2FEC BL 0x1C16CF4
	0x03BB2FF0 ADRP X0, 0x5A8000
	0x03BB2FF4 LDR X0, [X0 + 0x190]
	0x03BB2FF8 BL 0x1C16CF4
	0x03BB2FFC ADRP X0, 0x5A8000
	0x03BB3000 LDR X0, [X0 + 0x198]
	0x03BB3004 BL 0x1C16CF4
	0x03BB3008 ADRP X0, 0x5A7000
	0x03BB300C LDR X0, [X0 + 0x1A0]
	0x03BB3010 BL 0x1C16CF4
	0x03BB3014 ADRP X0, 0x5A7000
	0x03BB3018 LDR X0, [X0 + 0x1A8]
	0x03BB301C BL 0x1C16CF4
	0x03BB3020 ADRP X0, 0x5A9000
	0x03BB3024 LDR X0, [X0 + 0xFA0]
	0x03BB3028 BL 0x1C16CF4
	0x03BB302C ADRP X0, 0x5A9000
	0x03BB3030 LDR X0, [X0 + 0xFA8]
	0x03BB3034 BL 0x1C16CF4
	0x03BB3038 MOVZ W8, 0x1
	0x03BB303C STRB W8, [X21 + 0xCE1]
	0x03BB3040 LDR X0, [X20]
	0x03BB3044 LDR X20, [X19 + 0x20]
	0x03BB3048 LDR W8, [X0 + 0xE0]
	0x03BB304C CBNZ W8, 0x3BB3054
	0x03BB3050 BL 0x1C16DFC
	0x03BB3054 MOV X0, X20
	0x03BB3058 MOV X1, X31
	0x03BB305C MOV X2, X31
	0x03BB3060 BL 0x3C354F8
	0x03BB3064 TBZ X0, 0x0, 0x3BB3118
	0x03BB3068 LDR X8, [X19 + 0x20]
	0x03BB306C CBZ X8, 0x3BB3124
	0x03BB3070 LDR X20, [X8 + 0x90]
	0x03BB3074 ADRP X8, 0x5A7000
	0x03BB3078 LDR X8, [X8 + 0x190]
	0x03BB307C LDR X0, [X8]
	0x03BB3080 BL 0x1C16F10
	0x03BB3084 ADRP X8, 0x5A9000
	0x03BB3088 LDR X8, [X8 + 0xFA0]
	0x03BB308C MOV X1, X19
	0x03BB3090 MOV X3, X31
	0x03BB3094 MOV X21, X0
	0x03BB3098 LDR X2, [X8]
	0x03BB309C BL 0x2725C6C
	0x03BB30A0 CBZ X20, 0x3BB3124
	0x03BB30A4 ADRP X8, 0x5A7000
	0x03BB30A8 LDR X8, [X8 + 0x1A8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x831000
	008 Move X23, 0x5AB000
	009 Move W8, [X20+3284]
	010 Move X23, [X23+3768]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x56A000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0x5AB000
	020 Move X0, [X0+3768]
	021 Call 0x1C17CF4
	022 Move X0, 0x5AB000
	023 Move X0, [X0+3872]
	024 Call 0x1C17CF4
	025 Move X0, 0x5AB000
	026 Move X0, [X0+3880]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+3284], W8
	030 Move X8, [X23]
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X23]
	037 Move X9, [X8+184]
	038 Move X10, [X9]
	039 Compare X10, 0
	040 JumpIfNotEqual {70}
	041 Move W10, [X8+224]
	042 Compare W10, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X23]
	047 Move X9, [X8+184]
	048 Move X8, 0x569000
	049 Move X20, [X9+8]
	050 Move X8, [X8+2120]
	051 Move X0, [X8]
	052 Move X8, 0x5AA000
	053 Move X8, [X8+3880]
	054 Move X21, [X8]
	055 Move X8, 0x5AA000
	056 Move X8, [X8+3872]
	057 Move W9, [X0+224]
	058 Move X22, [X8]
	059 Compare W9, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X22
	065 Move X3, X31
	066 Call BurstCompiler.GetILPPMethodFunctionPointer2, X0, X1, X2
	067 Move X8, [X23]
	068 Move X9, [X8+184]
	069 Move [X9], X0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {76}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, [X23]
	076 Move X8, [X8+184]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X8, [X8]
	080 Move [X19], X8
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 

Method: System.IntPtr GetFunctionPointer()

Disassembly:
	0x03BB30AC MOV X0, X20
	0x03BB30B0 MOV X1, X21
	0x03BB30B4 LDR X2, [X8]
	0x03BB30B8 BL 0x2729B68
	0x03BB30BC LDR X8, [X19 + 0x20]
	0x03BB30C0 CBZ X8, 0x3BB3124
	0x03BB30C4 LDR X20, [X8 + 0x98]
	0x03BB30C8 ADRP X8, 0x5A7000
	0x03BB30CC LDR X8, [X8 + 0x198]
	0x03BB30D0 LDR X0, [X8]
	0x03BB30D4 BL 0x1C16F10
	0x03BB30D8 ADRP X8, 0x5A9000
	0x03BB30DC LDR X8, [X8 + 0xFA8]
	0x03BB30E0 MOV X1, X19
	0x03BB30E4 MOV X3, X31
	0x03BB30E8 MOV X21, X0
	0x03BB30EC LDR X2, [X8]
	0x03BB30F0 BL 0x2725C6C
	0x03BB30F4 CBZ X20, 0x3BB3124
	0x03BB30F8 ADRP X8, 0x5A7000
	0x03BB30FC LDR X8, [X8 + 0x1A0]
	0x03BB3100 MOV X0, X20
	0x03BB3104 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x830000
	005 Move X19, 0x5AA000
	006 Move W8, [X20+3285]
	007 Move X19, [X19+3768]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5AA000
	013 Move X0, [X0+3768]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3285], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 8
	024 Call CalculateScaleToFit_00000C23$BurstDirectCall.GetFunctionPointerDiscard, X0
	025 Move X0, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void Constructor()

Disassembly:
	0x03BB3108 MOV X1, X21
	0x03BB310C LDR X2, [X8]
	0x03BB3110 LDP X30, X21, [X31], #0x20
	0x03BB3114 B 0x2729B68
	0x03BB3118 LDP X20, X19, [X31 + 0x10]
	0x03BB311C LDP X30, X21, [X31], #0x20
	0x03BB3120 RET
	0x03BB3124 BL 0x1C16F20
	0x03BB3128 STP X30, X21, [X31 - 0x20]!
	0x03BB312C STP X20, X19, [X31 + 0x10]
	0x03BB3130 ADRP X21, 0x82F000
	0x03BB3134 ADRP X20, 0x540000
	0x03BB3138 LDRB W8, [X21 + 0xCE0]
	0x03BB313C LDR X20, [X20 + 0x598]
	0x03BB3140 MOV X19, X0
	0x03BB3144 TBNZ X8, 0x0, 0x3BB3174
	0x03BB3148 ADRP X0, 0x5A8000
	0x03BB314C LDR X0, [X0 + 0x238]
	0x03BB3150 BL 0x1C16CF4
	0x03BB3154 ADRP X0, 0x5A9000
	0x03BB3158 LDR X0, [X0 + 0xF98]
	0x03BB315C BL 0x1C16CF4
	0x03BB3160 ADRP X0, 0x540000
	0x03BB3164 LDR X0, [X0 + 0x598]
	0x03BB3168 BL 0x1C16CF4
	0x03BB316C MOVZ W8, 0x1
	0x03BB3170 STRB W8, [X21 + 0xCE0]
	0x03BB3174 LDR X0, [X20]
	0x03BB3178 LDR X20, [X19 + 0x20]
	0x03BB317C LDR W8, [X0 + 0xE0]
	0x03BB3180 CBNZ W8, 0x3BB3188
	0x03BB3184 BL 0x1C16DFC
	0x03BB3188 MOV X0, X20
	0x03BB318C MOV X1, X31
	0x03BB3190 MOV X2, X31
	0x03BB3194 BL 0x3C354F8
	0x03BB3198 TBZ X0, 0x0, 0x3BB328C
	0x03BB319C LDR X8, [X19 + 0x20]
	0x03BB31A0 CBZ X8, 0x3BB32B4
	0x03BB31A4 LDR X20, [X8 + 0x130]
	0x03BB31A8 CBZ X20, 0x3BB32B4
	0x03BB31AC ADRP X10, 0x5A8000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x830000
	006 Move X19, 0x5AA000
	007 Move X20, 0x569000
	008 Move W8, [X21+3286]
	009 Move X19, [X19+3888]
	010 Move X20, [X20+2120]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x569000
	016 Move X0, [X0+2120]
	017 Call 0x1C17CF4
	018 Move X0, 0x5AA000
	019 Move X0, [X0+3768]
	020 Call 0x1C17CF4
	021 Move X0, 0x5AA000
	022 Move X0, [X0+3888]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3286], W8
	026 Move X0, [X20]
	027 Move X20, 0x5AA000
	028 Move X19, [X19]
	029 Move W8, [X0+224]
	030 Move X20, [X20+3768]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call BurstCompiler.CompileILPPMethod2, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move [X8+8], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void Initialize()

Disassembly:
	0x03BB31B0 LDR X8, [X20]

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03BB31B4 LDR X10, [X10 + 0x238]

ISIL:
	001 Call CalculateScaleToFit_00000C23$BurstDirectCall.Constructor
	002 Return 

Method: System.Void Invoke(in Unity.Mathematics.float3 boundsSize, in Unity.Mathematics.float3 fixedSize, in Unity.Mathematics.float3 initialScale, System.Single epsilon, out Unity.Mathematics.float3 newScale)

Disassembly:
	0x03BB1C08 LDR X9, [X8 + 0xB8]
	0x03BB1C0C LDR X10, [X9]
	0x03BB1C10 CBNZ X10, 0x3BB1C80
	0x03BB1C14 LDR W10, [X8 + 0xE0]
	0x03BB1C18 CBNZ W10, 0x3BB1C2C
	0x03BB1C1C MOV X0, X8
	0x03BB1C20 BL 0x1C16DFC
	0x03BB1C24 LDR X8, [X23]
	0x03BB1C28 LDR X9, [X8 + 0xB8]
	0x03BB1C2C ADRP X8, 0x56A000
	0x03BB1C30 LDR X20, [X9 + 0x8]
	0x03BB1C34 LDR X8, [X8 + 0x848]
	0x03BB1C38 LDR X0, [X8]
	0x03BB1C3C ADRP X8, 0x5AB000
	0x03BB1C40 LDR X8, [X8 + 0xF10]
	0x03BB1C44 LDR X21, [X8]
	0x03BB1C48 ADRP X8, 0x5AB000
	0x03BB1C4C LDR X8, [X8 + 0xF08]
	0x03BB1C50 LDR W9, [X0 + 0xE0]
	0x03BB1C54 LDR X22, [X8]
	0x03BB1C58 CBNZ W9, 0x3BB1C60
	0x03BB1C5C BL 0x1C16DFC
	0x03BB1C60 MOV X0, X20
	0x03BB1C64 MOV X1, X21
	0x03BB1C68 MOV X2, X22
	0x03BB1C6C MOV X3, X31
	0x03BB1C70 BL 0x36FAD70
	0x03BB1C74 LDR X8, [X23]
	0x03BB1C78 LDR X9, [X8 + 0xB8]
	0x03BB1C7C STR X0, [X9]
	0x03BB1C80 LDR W9, [X8 + 0xE0]
	0x03BB1C84 CBNZ W9, 0x3BB1C94
	0x03BB1C88 MOV X0, X8
	0x03BB1C8C BL 0x1C16DFC
	0x03BB1C90 LDR X8, [X23]
	0x03BB1C94 LDR X8, [X8 + 0xB8]
	0x03BB1C98 LDP X22, X21, [X31 + 0x10]
	0x03BB1C9C LDR X8, [X8]
	0x03BB1CA0 STR X8, [X19]
	0x03BB1CA4 LDP X20, X19, [X31 + 0x20]
	0x03BB1CA8 LDP X30, X23, [X31], #0x30
	0x03BB1CAC RET
	0x03BB1CB0 STR X30, [X31 - 0x20]!
	0x03BB1CB4 STP X20, X19, [X31 + 0x10]
	0x03BB1CB8 ADRP X20, 0x831000
	0x03BB1CBC ADRP X19, 0x5AB000
	0x03BB1CC0 LDRB W8, [X20 + 0xCD0]
	0x03BB1CC4 LDR X19, [X19 + 0xEA0]
	0x03BB1CC8 TBNZ X8, 0x0, 0x3BB1CE0
	0x03BB1CCC ADRP X0, 0x5AB000
	0x03BB1CD0 LDR X0, [X0 + 0xEA0]
	0x03BB1CD4 BL 0x1C16CF4
	0x03BB1CD8 MOVZ W8, 0x1
	0x03BB1CDC STRB W8, [X20 + 0xCD0]
	0x03BB1CE0 LDR X0, [X19]
	0x03BB1CE4 STR X31, [X31 + 0x8]
	0x03BB1CE8 LDR W8, [X0 + 0xE0]
	0x03BB1CEC CBNZ W8, 0x3BB1CF4
	0x03BB1CF0 BL 0x1C16DFC
	0x03BB1CF4 ADD X0, X31, 0x8
	0x03BB1CF8 BL 0x3BB1B94
	0x03BB1CFC LDR X0, [X31 + 0x8]
	0x03BB1D00 LDP X20, X19, [X31 + 0x10]
	0x03BB1D04 LDR X30, [X31], #0x20
	0x03BB1D08 RET
	0x03BB1D0C STP X30, X21, [X31 - 0x20]!
	0x03BB1D10 STP X20, X19, [X31 + 0x10]
	0x03BB1D14 ADRP X21, 0x831000
	0x03BB1D18 ADRP X19, 0x5AB000
	0x03BB1D1C ADRP X20, 0x56A000
	0x03BB1D20 LDRB W8, [X21 + 0xCD1]
	0x03BB1D24 LDR X19, [X19 + 0xF18]
	0x03BB1D28 LDR X20, [X20 + 0x848]
	0x03BB1D2C TBNZ X8, 0x0, 0x3BB1D5C
	0x03BB1D30 ADRP X0, 0x56A000
	0x03BB1D34 LDR X0, [X0 + 0x848]
	0x03BB1D38 BL 0x1C16CF4
	0x03BB1D3C ADRP X0, 0x5AB000
	0x03BB1D40 LDR X0, [X0 + 0xEA0]
	0x03BB1D44 BL 0x1C16CF4
	0x03BB1D48 ADRP X0, 0x5AB000
	0x03BB1D4C LDR X0, [X0 + 0xF18]
	0x03BB1D50 BL 0x1C16CF4
	0x03BB1D54 MOVZ W8, 0x1
	0x03BB1D58 STRB W8, [X21 + 0xCD1]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move [X31], D0
	010 Move X23, 0x832000
	011 Move X24, 0x56B000
	012 Move W8, [X23+3287]
	013 Move X24, [X24+2120]
	014 Move X19, X3
	015 Move X20, X2
	016 Move X21, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0x56B000
	023 Move X0, [X0+2120]
	024 Call 0x1C17CF4
	025 Move X0, 0x5AC000
	026 Move X0, [X0+3768]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X23+3287], W8
	030 Move X0, [X24]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X31
	036 Call BurstCompiler.get_IsEnabled
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {66}
	041 Move X8, 0x5AC000
	042 Move X8, [X8+3768]
	043 Move X0, [X8]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Call CalculateScaleToFit_00000C23$BurstDirectCall.GetFunctionPointer
	049 Compare X0, 0
	050 JumpIfEqual {66}
	051 Move X4, X0
	052 Move X0, X22
	053 Move X1, X21
	054 Move X2, X20
	055 Move X3, X19
	056 Move X20, [X31+64]
	057 Move X19, [X31+72]
	058 Move X22, [X31+48]
	059 Move X21, [X31+56]
	060 Move X24, [X31+32]
	061 Move X23, [X31+40]
	062 Move X30, [X31+16]
	063 Move V0, [X31]
	064 Add X31, X31, 80
	065 CallNoReturn X4
	066 Move V0, [X21+8]
	067 Move V4, [X31]
	068 Move V2, [X21]
	069 Move V1, [X22]
	070 Move V3, [X22+8]
	071 Add S0, S0, S4
	072 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	073 Add V2, V2, V4
	074 NotImplemented "Instruction INVALID not yet implemented."
	075 Move S2, V1.S[1]
	076 Move W10, S2
	077 Move W8, 0x7F800000
	078 And W10, W10, 0x7FFFFFFF
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction FDIV not yet implemented."
	081 NotImplemented "Instruction FCCMP not yet implemented."
	082 Move W9, S0
	083 NotImplemented "Instruction FCSEL not yet implemented."
	084 Move V4, [X20]
	085 Move V3, [X20+8]
	086 And W9, W9, 0x7FFFFFFF
	087 NotImplemented "Instruction FCMP not yet implemented."
	088 NotImplemented "Instruction CCMP not yet implemented."
	089 NotImplemented "Instruction FCSEL not yet implemented."
	090 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	091 NotImplemented "Instruction FDIV not yet implemented."
	092 NotImplemented "Instruction INVALID not yet implemented."
	093 Move [X19], D1
	094 Move [X19+8], S0
	095 Move X20, [X31+64]
	096 Move X19, [X31+72]
	097 Move X22, [X31+48]
	098 Move X21, [X31+56]
	099 Move X24, [X31+32]
	100 Move X23, [X31+40]
	101 Move X30, [X31+16]
	102 Add X31, X31, 80
	103 Return 

