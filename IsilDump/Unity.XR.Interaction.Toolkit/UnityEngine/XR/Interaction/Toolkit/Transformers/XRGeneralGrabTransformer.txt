Type: UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer

Method: UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes get_permittedDisplacementAxes()

Disassembly:
	0x03BAAFD4 LDR X8, [X8]
	0x03BAAFD8 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_permittedDisplacementAxes(UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes value)

Disassembly:
	0x03BAAFDC LDP S8, S9, [X8]
	0x03BAAFE0 LDP S10, S11, [X8 + 0x8]

ISIL:
	001 Move [X0+32], W1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode get_constrainedAxisDisplacementMode()

Disassembly:
	0x03BAAFE4 B 0x3BAB0B0
	0x03BAAFE8 LDR W8, [X21 + 0xCC]

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Void set_constrainedAxisDisplacementMode(UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode value)

Disassembly:
	0x03BAAFEC LDUR X9, [X21 + 0xC4]
	0x03BAAFF0 MOV X0, X23

ISIL:
	001 Move [X0+36], W1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/TwoHandedRotationMode get_allowTwoHandedRotation()

Disassembly:
	0x03BAAFF4 MOV X1, X31
	0x03BAAFF8 STR W8, [X24 + 0x8]

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_allowTwoHandedRotation(UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/TwoHandedRotationMode value)

Disassembly:
	0x03BAAFFC STR X9, [X24]
	0x03BAB000 BL 0x3B3A784

ISIL:
	001 Move [X0+40], W1
	002 Return 

Method: System.Boolean get_allowOneHandedScaling()

Disassembly:
	0x03BAB004 CBZ X0, 0x3BAB91C
	0x03BAB008 LDR X2, [X25]

ISIL:
	001 Move W0, [X0+44]
	002 Return X0

Method: System.Void set_allowOneHandedScaling(System.Boolean value)

Disassembly:
	0x03BAB00C MOV W1, W31
	0x03BAB010 BL 0x301BCCC
	0x03BAB014 CBZ X0, 0x3BAB91C

ISIL:
	001 And W8, W1, 1
	002 Move [X0+44], W8
	003 Return 

Method: System.Boolean get_allowTwoHandedScaling()

Disassembly:
	0x03BAB018 LDR X8, [X0]
	0x03BAB01C LDR X1, [X26]

ISIL:
	001 Move W0, [X0+45]
	002 Return X0

Method: System.Void set_allowTwoHandedScaling(System.Boolean value)

Disassembly:
	0x03BAB020 MOV X21, X0
	0x03BAB024 LDRH W9, [X8 + 0x12E]
	0x03BAB028 CBZ X9, 0x3BAB04C

ISIL:
	001 And W8, W1, 1
	002 Move [X0+45], W8
	003 Return 

Method: System.Single get_oneHandedScaleSpeed()

Disassembly:
	0x03BAB02C LDR X10, [X8 + 0xB0]
	0x03BAB030 ADD X10, X10, 0x8

ISIL:
	001 Move V0, [X0+48]
	002 Return V0

Method: System.Void set_oneHandedScaleSpeed(System.Single value)

Disassembly:
	0x03BAB034 LDUR X11, [X10 - 0x8]
	0x03BAB038 CMP X11, X1
	0x03BAB03C B.EQ 0x3BAB05C
	0x03BAB040 SUBS X9, X9, 0x1

ISIL:
	001 Move S1, W31
	002 NotImplemented "Instruction FMAXNM not yet implemented."
	003 Move [X0+48], S0
	004 Return 

Method: System.Single get_thresholdMoveRatioForScale()

Disassembly:
	0x03BAB044 ADD X10, X10, 0x10
	0x03BAB048 B.NE 0x3BAB034

ISIL:
	001 Move V0, [X0+52]
	002 Return V0

Method: System.Void set_thresholdMoveRatioForScale(System.Single value)

Disassembly:
	0x03BAB04C MOVZ W2, 0x6
	0x03BAB050 MOV X0, X21

ISIL:
	001 Move [X0+52], S0
	002 Return 

Method: System.Boolean get_clampScaling()

Disassembly:
	0x03BAB054 BL 0x1C5C788
	0x03BAB058 B 0x3BAB06C

ISIL:
	001 Move W0, [X0+56]
	002 Return X0

Method: System.Void set_clampScaling(System.Boolean value)

Disassembly:
	0x03BAB05C LDR W9, [X10]
	0x03BAB060 ADD W9, W9, 0x6
	0x03BAB064 ADD X8, X8, W9, 0x4, SXTW

ISIL:
	001 And W8, W1, 1
	002 Move [X0+56], W8
	003 Return 

Method: System.Single get_minimumScaleRatio()

Disassembly:
	0x03BAB068 ADD X0, X8, 0x138
	0x03BAB06C LDP X8, X2, [X0]

ISIL:
	001 Move V0, [X0+60]
	002 Return V0

Method: System.Void set_minimumScaleRatio(System.Single value)

Disassembly:
	0x03BAB070 MOV X0, X21
	0x03BAB074 MOV X1, X23
	0x03BAB078 BLR X8
	0x03BAB07C CBZ X0, 0x3BAB91C
	0x03BAB080 MOV X1, X31
	0x03BAB084 MOV X21, X0
	0x03BAB088 BL 0x3C3F58C
	0x03BAB08C MOV X0, X21
	0x03BAB090 MOV X1, X31
	0x03BAB094 STP S0, S1, [X20]

ISIL:
	001 Move V2, [X0+296]
	002 Move V3, [X0+304]
	003 Move S1, 1
	004 NotImplemented "Instruction FMIN not yet implemented."
	005 Move [X0+60], S0
	006 NotImplemented "Instruction INVALID not yet implemented."
	007 Multiply S0, S0, S3
	008 Move [X0+320], D1
	009 Move [X0+328], S0
	010 Return 

Method: System.Single get_maximumScaleRatio()

Disassembly:
	0x03BAB098 STR S2, [X20 + 0x8]
	0x03BAB09C BL 0x3C3DEB4

ISIL:
	001 Move V0, [X0+64]
	002 Return V0

Method: System.Void set_maximumScaleRatio(System.Single value)

Disassembly:
	0x03BAB0A0 MOV V8.16B, V0.16B
	0x03BAB0A4 MOV V9.16B, V1.16B
	0x03BAB0A8 MOV V10.16B, V2.16B
	0x03BAB0AC MOV V11.16B, V3.16B
	0x03BAB0B0 STP S8, S9, [X19]
	0x03BAB0B4 STP S10, S11, [X19 + 0x8]
	0x03BAB0B8 LDP X20, X19, [X31 + 0x90]
	0x03BAB0BC LDP X22, X21, [X31 + 0x80]
	0x03BAB0C0 LDP X24, X23, [X31 + 0x70]
	0x03BAB0C4 LDP X26, X25, [X31 + 0x60]
	0x03BAB0C8 LDR X30, [X31 + 0x50]

ISIL:
	001 Move V2, [X0+296]
	002 Move V3, [X0+304]
	003 Move S1, 1
	004 NotImplemented "Instruction FMAX not yet implemented."
	005 Add X8, X0, 332
	006 Move [X0+64], S0
	007 NotImplemented "Instruction INVALID not yet implemented."
	008 Multiply S0, S0, S3
	009 Move [X8], D1
	010 Move [X8+8], S0
	011 Return 

Method: System.Single get_scaleMultiplier()

Disassembly:
	0x03BAB0CC LDP D9, D8, [X31 + 0x40]
	0x03BAB0D0 LDP D11, D10, [X31 + 0x30]

ISIL:
	001 Move V0, [X0+68]
	002 Return V0

Method: System.Void set_scaleMultiplier(System.Single value)

Disassembly:
	0x03BAB0D4 LDP D13, D12, [X31 + 0x20]
	0x03BAB0D8 LDP D15, D14, [X31 + 0x10]

ISIL:
	001 Move [X0+68], S0
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer/RegistrationMode get_registrationMode()

Disassembly:
	0x03BAB0DC ADD X31, X31, 0xA0
	0x03BAB0E0 RET

ISIL:
	001 Move W0, 3
	002 Return X0

Method: System.Void Awake()

Disassembly:
	0x03BAB0E4 MOV X0, X23
	0x03BAB0E8 MOV X1, X31
	0x03BAB0EC BL 0x3B3A784
	0x03BAB0F0 CBZ X0, 0x3BAB91C
	0x03BAB0F4 LDR X2, [X25]
	0x03BAB0F8 MOV W1, W31
	0x03BAB0FC BL 0x301BCCC
	0x03BAB100 MOV X22, X0
	0x03BAB104 MOV X0, X23
	0x03BAB108 MOV X1, X31
	0x03BAB10C BL 0x3B3A784
	0x03BAB110 CBZ X0, 0x3BAB91C
	0x03BAB114 LDR X2, [X25]
	0x03BAB118 MOVZ W1, 0x1
	0x03BAB11C BL 0x301BCCC
	0x03BAB120 CBZ X22, 0x3BAB91C
	0x03BAB124 LDR X8, [X22]
	0x03BAB128 LDR X1, [X26]
	0x03BAB12C MOV X25, X0
	0x03BAB130 LDRH W9, [X8 + 0x12E]
	0x03BAB134 CBZ X9, 0x3BAB158
	0x03BAB138 LDR X10, [X8 + 0xB0]
	0x03BAB13C ADD X10, X10, 0x8
	0x03BAB140 LDUR X11, [X10 - 0x8]
	0x03BAB144 CMP X11, X1
	0x03BAB148 B.EQ 0x3BAB168
	0x03BAB14C SUBS X9, X9, 0x1
	0x03BAB150 ADD X10, X10, 0x10
	0x03BAB154 B.NE 0x3BAB140
	0x03BAB158 MOVZ W2, 0x6
	0x03BAB15C MOV X0, X22
	0x03BAB160 BL 0x1C5C788
	0x03BAB164 B 0x3BAB178
	0x03BAB168 LDR W9, [X10]
	0x03BAB16C ADD W9, W9, 0x6
	0x03BAB170 ADD X8, X8, W9, 0x4, SXTW
	0x03BAB174 ADD X0, X8, 0x138
	0x03BAB178 LDP X8, X2, [X0]
	0x03BAB17C MOV X0, X22
	0x03BAB180 MOV X1, X23
	0x03BAB184 BLR X8
	0x03BAB188 CBZ X25, 0x3BAB91C
	0x03BAB18C LDR X8, [X25]
	0x03BAB190 LDR X1, [X26]
	0x03BAB194 MOV X22, X0
	0x03BAB198 LDRH W9, [X8 + 0x12E]
	0x03BAB19C CBZ X9, 0x3BAB1C0
	0x03BAB1A0 LDR X10, [X8 + 0xB0]
	0x03BAB1A4 ADD X10, X10, 0x8
	0x03BAB1A8 LDUR X11, [X10 - 0x8]
	0x03BAB1AC CMP X11, X1
	0x03BAB1B0 B.EQ 0x3BAB1D0
	0x03BAB1B4 SUBS X9, X9, 0x1
	0x03BAB1B8 ADD X10, X10, 0x10
	0x03BAB1BC B.NE 0x3BAB1A8
	0x03BAB1C0 MOVZ W2, 0x6
	0x03BAB1C4 MOV X0, X25
	0x03BAB1C8 BL 0x1C5C788
	0x03BAB1CC B 0x3BAB1E0
	0x03BAB1D0 LDR W9, [X10]
	0x03BAB1D4 ADD W9, W9, 0x6
	0x03BAB1D8 ADD X8, X8, W9, 0x4, SXTW
	0x03BAB1DC ADD X0, X8, 0x138
	0x03BAB1E0 LDP X8, X2, [X0]
	0x03BAB1E4 MOV X0, X25
	0x03BAB1E8 MOV X1, X23
	0x03BAB1EC BLR X8
	0x03BAB1F0 CBZ X0, 0x3BAB91C
	0x03BAB1F4 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x838000
	005 Move W8, [X20+3219]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x549000
	012 Move X0, [X0+1592]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3219], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call Component.get_transform, X0
	019 Compare X0, 0
	020 JumpIfEqual {72}
	021 Move X20, 0x549000
	022 Move X20, [X20+1592]
	023 Move X1, X31
	024 Call Transform.get_localScale, X0
	025 Move [X19+296], S0
	026 Move [X19+300], S1
	027 Move [X19+304], S2
	028 Move X0, [X20]
	029 Move W1, 3
	030 Call 0x1C17D6C
	031 Compare X0, 0
	032 JumpIfEqual {72}
	033 Move X8, [X0+24]
	034 Compare W8, 0
	035 JumpIfEqual {71}
	036 Move V0, [X19+296]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction FABS not yet implemented."
	039 Move [X0+32], S3
	040 Move V0, [X19+300]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction FABS not yet implemented."
	043 Move [X0+36], S0
	044 Move V1, [X19+304]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction FABS not yet implemented."
	047 Move [X0+40], S1
	048 And X8, X8, 0
	049 NotImplemented "Instruction FCMP not yet implemented."
	050 NotImplemented "Instruction FCSEL not yet implemented."
	051 Subtract X8, X8, 2
	052 Add X9, X0, 40
	053 Move V0, [X9+4]
	054 NotImplemented "Instruction FCMP not yet implemented."
	055 NotImplemented "Instruction FCSEL not yet implemented."
	056 Subtract X8, X8, 1
	057 Move V0, [X19+296]
	058 Move V1, [X19+300]
	059 Move V2, [X19+304]
	060 Move V4, V3
	061 Move V5, V3
	062 Move X0, X31
	063 Call Vector3Extensions.SafeDivide, X0, X1
	064 Move [X19+308], S0
	065 Move [X19+312], S1
	066 Move [X19+316], S2
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X30, [X31+32]
	070 Return 
	071 Call 0x1C17F28
	072 Call 0x1C17F20

Method: System.Void Process(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase, ref UnityEngine.Pose targetPose, ref UnityEngine.Vector3 localScale)

Disassembly:
	0x03BAB1F8 MOV X23, X0
	0x03BAB1FC BL 0x3C3F58C
	0x03BAB200 CBZ X22, 0x3BAB91C
	0x03BAB204 MOV X0, X22
	0x03BAB208 MOV X1, X31
	0x03BAB20C BL 0x3C40B58
	0x03BAB210 STP S0, S1, [X24]

ISIL:
	001 Or W8, W2, 2
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move X2, X3
	004 Move X3, X4
	005 Return 

Method: System.Void OnGrab(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable)

Disassembly:
	0x03BAB3EC MOV V3.16B, V14.16B
	0x03BAB3F0 MOV X0, X31
	0x03BAB3F4 LDP S4, S5, [X8 + 0x18]
	0x03BAB3F8 LDR V6, [X8 + 0x20]
	0x03BAB3FC BL 0x3C2A9FC
	0x03BAB400 MOV V3.16B, V0.16B
	0x03BAB404 MOV V4.16B, V1.16B
	0x03BAB408 MOV V5.16B, V2.16B
	0x03BAB40C MOV V0.16B, V8.16B
	0x03BAB410 MOV V1.16B, V9.16B
	0x03BAB414 MOV V2.16B, V10.16B
	0x03BAB418 MOV X0, X31
	0x03BAB41C BL 0x3C2A810
	0x03BAB420 LDP S4, S7, [X21 + 0xEC]
	0x03BAB424 LDP S5, S6, [X21 + 0xF4]
	0x03BAB428 STP S0, S1, [X21 + 0xFC]
	0x03BAB42C STR S3, [X21 + 0x108]
	0x03BAB430 FMUL S16, S3, S4
	0x03BAB434 FMUL S17, S0, S6
	0x03BAB438 FMUL S18, S1, S5
	0x03BAB43C FMUL S19, S2, S7
	0x03BAB440 FMUL S20, S3, S7
	0x03BAB444 FMUL S21, S1, S6
	0x03BAB448 FMUL S22, S2, S4
	0x03BAB44C FMUL S23, S0, S5
	0x03BAB450 FMUL S24, S0, S7
	0x03BAB454 FMUL S0, S0, S4
	0x03BAB458 FMUL S4, S1, S4
	0x03BAB45C FMUL S1, S1, S7
	0x03BAB460 FMUL S7, S3, S5
	0x03BAB464 FMUL S3, S3, S6
	0x03BAB468 FMUL S6, S2, S6
	0x03BAB46C STR S2, [X21 + 0x104]
	0x03BAB470 FMUL S2, S2, S5
	0x03BAB474 FADD S5, S16, S17
	0x03BAB478 FADD S16, S20, S21
	0x03BAB47C FADD S6, S7, S6
	0x03BAB480 FSUB S0, S3, S0
	0x03BAB484 FADD S3, S18, S5
	0x03BAB488 FADD S5, S22, S16
	0x03BAB48C FADD S6, S24, S6
	0x03BAB490 FSUB S0, S0, S1
	0x03BAB494 MOV X0, X22
	0x03BAB498 MOV X1, X31
	0x03BAB49C FSUB S8, S3, S19
	0x03BAB4A0 FSUB S9, S5, S23
	0x03BAB4A4 FSUB S10, S6, S4
	0x03BAB4A8 FSUB S11, S0, S2
	0x03BAB4AC BL 0x3C3DEB4
	0x03BAB4B0 FMUL S4, S3, S8
	0x03BAB4B4 FMUL S5, S0, S11
	0x03BAB4B8 FMUL S16, S3, S9
	0x03BAB4BC FMUL S17, S1, S11
	0x03BAB4C0 FMUL S19, S0, S10
	0x03BAB4C4 FMUL S20, S0, S9
	0x03BAB4C8 FMUL S0, S0, S8
	0x03BAB4CC FMUL S22, S3, S10
	0x03BAB4D0 FMUL S3, S3, S11
	0x03BAB4D4 FMUL S23, S2, S11
	0x03BAB4D8 FMUL S6, S1, S10
	0x03BAB4DC FMUL S18, S2, S8
	0x03BAB4E0 FMUL S21, S1, S8
	0x03BAB4E4 FMUL S1, S1, S9
	0x03BAB4E8 FADD S4, S4, S5
	0x03BAB4EC FADD S5, S16, S17
	0x03BAB4F0 FADD S16, S22, S23
	0x03BAB4F4 FSUB S0, S3, S0
	0x03BAB4F8 FMUL S7, S2, S9
	0x03BAB4FC FMUL S2, S2, S10
	0x03BAB500 FADD S3, S6, S4
	0x03BAB504 FADD S4, S18, S5
	0x03BAB508 FADD S5, S20, S16
	0x03BAB50C FSUB S0, S0, S1
	0x03BAB510 FSUB S8, S3, S7
	0x03BAB514 FSUB S9, S4, S19
	0x03BAB518 FSUB S10, S5, S21
	0x03BAB51C FSUB S11, S0, S2
	0x03BAB520 B 0x3BAB904
	0x03BAB524 ADRP X25, 0x82D000
	0x03BAB528 LDRB W8, [X25 + 0x783]
	0x03BAB52C CBNZ W8, 0x3BAB544
	0x03BAB530 ADRP X0, 0x548000
	0x03BAB534 LDR X0, [X0 + 0x5A0]
	0x03BAB538 BL 0x1C16CF4
	0x03BAB53C MOVZ W8, 0x1
	0x03BAB540 STRB W8, [X25 + 0x783]
	0x03BAB544 ADRP X8, 0x548000
	0x03BAB548 LDR X8, [X8 + 0x5A0]
	0x03BAB54C LDR X8, [X8]
	0x03BAB550 LDR X8, [X8 + 0xB8]
	0x03BAB554 LDP S10, S9, [X8]
	0x03BAB558 LDR V0, [X8 + 0x8]
	0x03BAB55C MOV X0, X22
	0x03BAB560 MOV X1, X31
	0x03BAB564 STR S0, [X31 + 0x5C]
	0x03BAB568 BL 0x3C3F90C
	0x03BAB56C MOV X0, X23
	0x03BAB570 MOV X1, X31
	0x03BAB574 MOV V11.16B, V0.16B
	0x03BAB578 MOV V12.16B, V1.16B
	0x03BAB57C MOV V13.16B, V2.16B
	0x03BAB580 BL 0x3C3F90C
	0x03BAB584 MOV V3.16B, V0.16B
	0x03BAB588 MOV V4.16B, V1.16B
	0x03BAB58C MOV V5.16B, V2.16B
	0x03BAB590 FMOV S6, 0.5
	0x03BAB594 MOV V0.16B, V11.16B
	0x03BAB598 MOV V1.16B, V12.16B
	0x03BAB59C MOV V2.16B, V13.16B
	0x03BAB5A0 MOV X0, X31
	0x03BAB5A4 BL 0x3C28A58
	0x03BAB5A8 MOV X0, X22
	0x03BAB5AC MOV X1, X31
	0x03BAB5B0 MOV V14.16B, V0.16B
	0x03BAB5B4 MOV V15.16B, V1.16B
	0x03BAB5B8 MOV V11.16B, V2.16B
	0x03BAB5BC BL 0x3C3F988
	0x03BAB5C0 MOV X0, X23
	0x03BAB5C4 MOV X1, X31
	0x03BAB5C8 MOV V12.16B, V0.16B
	0x03BAB5CC MOV V13.16B, V1.16B
	0x03BAB5D0 MOV V8.16B, V2.16B
	0x03BAB5D4 BL 0x3C3F988
	0x03BAB5D8 MOV V3.16B, V0.16B
	0x03BAB5DC MOV V4.16B, V1.16B
	0x03BAB5E0 MOV V5.16B, V2.16B
	0x03BAB5E4 FMOV S6, 0.5
	0x03BAB5E8 MOV V0.16B, V12.16B
	0x03BAB5EC MOV V1.16B, V13.16B
	0x03BAB5F0 MOV V2.16B, V8.16B
	0x03BAB5F4 MOV X0, X31
	0x03BAB5F8 BL 0x3C28A58
	0x03BAB5FC ADRP X23, 0x82D000
	0x03BAB600 LDRB W8, [X23 + 0xA24]
	0x03BAB604 MOV V7.16B, V0.16B
	0x03BAB608 MOV V5.16B, V1.16B
	0x03BAB60C MOV V16.16B, V2.16B
	0x03BAB610 CBNZ W8, 0x3BAB640
	0x03BAB614 ADRP X0, 0x548000
	0x03BAB618 LDR X0, [X0 + 0x5A8]
	0x03BAB61C MOV V8.16B, V5.16B
	0x03BAB620 MOV V12.16B, V7.16B
	0x03BAB624 MOV V13.16B, V16.16B
	0x03BAB628 BL 0x1C16CF4
	0x03BAB62C MOV V16.16B, V13.16B
	0x03BAB630 MOV V7.16B, V12.16B
	0x03BAB634 MOV V5.16B, V8.16B
	0x03BAB638 MOVZ W8, 0x1
	0x03BAB63C STRB W8, [X23 + 0xA24]
	0x03BAB640 LDR X0, [X24]
	0x03BAB644 LDR V4, [X31 + 0x5C]
	0x03BAB648 FMUL S0, S7, S7
	0x03BAB64C FMUL S1, S5, S5
	0x03BAB650 MOV V3.16B, V9.16B
	0x03BAB654 MOV V2.16B, V10.16B
	0x03BAB658 FADD S0, S0, S1
	0x03BAB65C FMUL S1, S16, S16
	0x03BAB660 LDR W8, [X0 + 0xE0]
	0x03BAB664 FMUL S13, S4, S15
	0x03BAB668 FMUL S8, S2, S15
	0x03BAB66C FADD S15, S1, S0
	0x03BAB670 FMUL S0, S2, S2
	0x03BAB674 FMUL S1, S3, S3
	0x03BAB678 FADD S0, S0, S1
	0x03BAB67C FMUL S1, S4, S4
	0x03BAB680 FMUL S12, S9, S11
	0x03BAB684 FMUL S9, S4, S14
	0x03BAB688 FMUL S10, S10, S11
	0x03BAB68C FMUL S11, S3, S14
	0x03BAB690 FADD S14, S1, S0
	0x03BAB694 STR S2, [X31 + 0x58]
	0x03BAB698 STR S3, [X31 + 0xC]
	0x03BAB69C CBNZ W8, 0x3BAB6B4
	0x03BAB6A0 STP S7, S5, [X31 + 0x4]
	0x03BAB6A4 STR S16, [X31]
	0x03BAB6A8 BL 0x1C16DFC
	0x03BAB6AC LDP S16, S7, [X31]
	0x03BAB6B0 LDR V5, [X31 + 0x8]
	0x03BAB6B4 ADRP X8, 0xFFFFFFFFFCF3E000
	0x03BAB6B8 LDR V2, [X8 + 0xFE8]
	0x03BAB6BC FSUB S8, S8, S11
	0x03BAB6C0 LDR V11, [X31 + 0x5C]
	0x03BAB6C4 FMUL S1, S14, S15
	0x03BAB6C8 FSQRT S1, S1
	0x03BAB6CC FSUB S0, S12, S13
	0x03BAB6D0 FSUB S9, S9, S10
	0x03BAB6D4 FCMP S1, S2
	0x03BAB6D8 FMOV S3, W31
	0x03BAB6DC B.MI 0x3BAB75C
	0x03BAB6E0 MOV V15.16B, V0.16B
	0x03BAB6E4 LDR V0, [X31 + 0x58]
	0x03BAB6E8 LDR V2, [X31 + 0xC]
	0x03BAB6EC LDR X0, [X24]
	0x03BAB6F0 FMUL S3, S11, S16
	0x03BAB6F4 FMUL S0, S0, S7
	0x03BAB6F8 FMUL S2, S2, S5
	0x03BAB6FC FADD S0, S0, S2
	0x03BAB700 FADD S0, S3, S0
	0x03BAB704 LDR W8, [X0 + 0xE0]
	0x03BAB708 FDIV S0, S0, S1
	0x03BAB70C FMOV S1, 1
	0x03BAB710 FMOV S2, -1
	0x03BAB714 FMIN S1, S0, S1
	0x03BAB718 FCMP S0, S2
	0x03BAB71C MOV V13.16B, V7.16B
	0x03BAB720 MOV V12.16B, V5.16B
	0x03BAB724 MOV V14.16B, V16.16B
	0x03BAB728 FCSEL S10, S1, S2, PL
	0x03BAB72C CBNZ W8, 0x3BAB734
	0x03BAB730 BL 0x1C16DFC
	0x03BAB734 FCVT S0, S10
	0x03BAB738 BL 0x3EB1B80
	0x03BAB73C ADRP X8, 0xFFFFFFFFFCF3F000
	0x03BAB740 LDR V1, [X8 + 0x448]
	0x00000000 INVALID
	0x03BAB748 MOV V5.16B, V12.16B
	0x03BAB74C MOV V7.16B, V13.16B
	0x03BAB750 FMUL S3, S0, S1
	0x03BAB754 MOV V16.16B, V14.16B
	0x03BAB758 MOV V0.16B, V15.16B
	0x03BAB75C MOVZ W8, 0x43340000
	0x03BAB760 FMOV S1, W8
	0x03BAB764 FDIV S2, S3, S1
	0x03BAB768 FRINTM S2, S2
	0x03BAB76C FMUL S2, S2, S1
	0x03BAB770 MOVZ W8, 0xC2B40000
	0x03BAB774 FSUB S3, S3, S2
	0x03BAB778 FMOV S2, W8
	0x03BAB77C FMIN S1, S3, S1
	0x03BAB780 FCMP S3, 0x0
	0x03BAB784 FADD S1, S1, S2
	0x03BAB788 FCSEL S1, S1, S2, PL
	0x03BAB78C MOVZ W8, 0x42B40000
	0x03BAB790 FABS S2, S1
	0x03BAB794 FMOV S1, W8
	0x03BAB798 FSUB S2, S1, S2
	0x03BAB79C FDIV S6, S2, S1
	0x03BAB7A0 MOV V1.16B, V9.16B
	0x03BAB7A4 MOV V2.16B, V8.16B
	0x03BAB7A8 MOV V3.16B, V7.16B
	0x03BAB7AC MOV V4.16B, V5.16B
	0x03BAB7B0 MOV V5.16B, V16.16B
	0x03BAB7B4 MOV X0, X31
	0x03BAB7B8 BL 0x3C28A58
	0x03BAB7BC LDR V7, [X31 + 0xC]
	0x03BAB7C0 LDR V6, [X31 + 0x58]
	0x03BAB7C4 FMUL S3, S11, S1
	0x03BAB7C8 LDRB W8, [X21 + 0x118]
	0x03BAB7CC FMUL S4, S7, S2
	0x03BAB7D0 FMUL S2, S6, S2
	0x03BAB7D4 FSUB S5, S3, S4
	0x03BAB7D8 FMUL S3, S11, S0
	0x03BAB7DC FMUL S0, S7, S0
	0x03BAB7E0 FMUL S1, S6, S1
	0x03BAB7E4 FSUB S2, S2, S3
	0x03BAB7E8 FSUB S0, S0, S1
	0x03BAB7EC FMUL S1, S7, S0
	0x03BAB7F0 FMUL S3, S11, S2
	0x03BAB7F4 FSUB S3, S1, S3
	0x03BAB7F8 FMUL S1, S11, S5
	0x03BAB7FC FMUL S0, S6, S0
	0x03BAB800 FMUL S2, S6, S2
	0x03BAB804 FSUB S4, S1, S0
	0x03BAB808 FMUL S0, S7, S5
	0x03BAB80C FSUB S5, S2, S0
	0x03BAB810 CBZ W8, 0x3BAB81C
	0x03BAB814 STRB W31, [X21 + 0x118]
	0x03BAB818 B 0x3BAB850
	0x03BAB81C LDR V0, [X21 + 0x11C]
	0x03BAB820 LDR V1, [X21 + 0x120]
	0x03BAB824 LDR V2, [X21 + 0x124]
	0x03BAB828 FMUL S0, S3, S0
	0x03BAB82C FMUL S1, S4, S1
	0x03BAB830 FADD S0, S0, S1
	0x03BAB834 FMUL S1, S5, S2
	0x03BAB838 FADD S0, S1, S0
	0x03BAB83C FCMP S0, 0x0
	0x03BAB840 B.HI 0x3BAB850
	0x03BAB844 FNEG S3, S3
	0x03BAB848 FNEG S4, S4
	0x03BAB84C FNEG S5, S5
	0x03BAB850 MOV V0.16B, V6.16B
	0x03BAB854 MOV V1.16B, V7.16B
	0x03BAB858 MOV V2.16B, V11.16B
	0x03BAB85C MOV X0, X31
	0x03BAB860 STR S3, [X21 + 0x11C]
	0x03BAB864 STR S4, [X21 + 0x120]
	0x03BAB868 STR S5, [X21 + 0x124]
	0x03BAB86C BL 0x3C2A810
	0x03BAB870 MOV V10.16B, V2.16B
	0x03BAB874 LDP S2, S4, [X21 + 0x78]
	0x03BAB878 MOV V8.16B, V0.16B
	0x03BAB87C MOV V9.16B, V1.16B
	0x03BAB880 LDP S0, S1, [X21 + 0x70]
	0x03BAB884 MOV V11.16B, V3.16B
	0x03BAB888 MOV V3.16B, V4.16B
	0x03BAB88C MOV X0, X31
	0x03BAB890 BL 0x3C2A260
	0x03BAB894 FMUL S4, S11, S0
	0x03BAB898 FMUL S5, S8, S3
	0x03BAB89C FMUL S16, S11, S1
	0x03BAB8A0 FMUL S17, S9, S3
	0x03BAB8A4 FMUL S21, S8, S0
	0x03BAB8A8 FMUL S22, S11, S2
	0x03BAB8AC FMUL S23, S11, S3
	0x03BAB8B0 FMUL S3, S10, S3
	0x03BAB8B4 FMUL S6, S9, S2
	0x03BAB8B8 FMUL S7, S10, S1
	0x03BAB8BC FMUL S18, S10, S0
	0x03BAB8C0 FMUL S20, S8, S1
	0x03BAB8C4 FMUL S1, S9, S1
	0x03BAB8C8 FADD S4, S4, S5
	0x03BAB8CC FADD S5, S16, S17
	0x03BAB8D0 FADD S3, S22, S3
	0x03BAB8D4 FSUB S16, S23, S21
	0x03BAB8D8 FMUL S19, S8, S2
	0x03BAB8DC FMUL S0, S9, S0
	0x03BAB8E0 FMUL S2, S10, S2
	0x03BAB8E4 FADD S4, S6, S4
	0x03BAB8E8 FADD S5, S18, S5
	0x03BAB8EC FADD S3, S20, S3
	0x03BAB8F0 FSUB S1, S16, S1
	0x03BAB8F4 FSUB S8, S4, S7
	0x03BAB8F8 FSUB S9, S5, S19
	0x03BAB8FC FSUB S10, S3, S0
	0x03BAB900 FSUB S11, S1, S2
	0x03BAB904 MOV X0, X22
	0x03BAB908 MOV X1, X31
	0x03BAB90C BL 0x3C3F58C
	0x03BAB910 STP S0, S1, [X20]
	0x03BAB914 STR S2, [X20 + 0x8]
	0x03BAB918 B 0x3BAB0B0
	0x03BAB91C BL 0x1C16F20
	0x03BAB920 STP X29, X30, [X31 - 0x60]!
	0x03BAB924 STP X28, X27, [X31 + 0x10]
	0x03BAB928 STP X26, X25, [X31 + 0x20]
	0x03BAB92C STP X24, X23, [X31 + 0x30]
	0x03BAB930 STP X22, X21, [X31 + 0x40]
	0x03BAB934 STP X20, X19, [X31 + 0x50]
	0x03BAB938 ADRP X28, 0x837000
	0x03BAB93C ADRP X29, 0x5B1000
	0x03BAB940 LDRB W8, [X28 + 0xC97]
	0x03BAB944 LDR X27, [X31 + 0x60]
	0x03BAB948 LDR X29, [X29 + 0xDF8]
	0x03BAB94C MOV X19, X7
	0x03BAB950 MOV X20, X6
	0x03BAB954 MOV X21, X5
	0x03BAB958 MOV W24, W4
	0x03BAB95C MOV X22, X3
	0x03BAB960 MOV X23, X2
	0x03BAB964 MOV X25, X1
	0x03BAB968 MOV X26, X0
	0x03BAB96C TBNZ X8, 0x0, 0x3BAB984
	0x03BAB970 ADRP X0, 0x5B1000
	0x03BAB974 LDR X0, [X0 + 0xDF8]
	0x03BAB978 BL 0x1C16CF4
	0x03BAB97C MOVZ W8, 0x1
	0x03BAB980 STRB W8, [X28 + 0xC97]
	0x03BAB984 LDR X0, [X29]
	0x03BAB988 LDR W8, [X0 + 0xE0]
	0x03BAB98C CBNZ W8, 0x3BAB994
	0x03BAB990 BL 0x1C16DFC
	0x03BAB994 AND W4, W24, 0x1
	0x03BAB998 STR X27, [X31 + 0x60]
	0x03BAB99C MOV X0, X26
	0x03BAB9A0 MOV X1, X25
	0x03BAB9A4 MOV X2, X23
	0x03BAB9A8 MOV X3, X22
	0x03BAB9AC MOV X5, X21
	0x03BAB9B0 MOV X6, X20
	0x03BAB9B4 MOV X7, X19
	0x03BAB9B8 LDP X20, X19, [X31 + 0x50]
	0x03BAB9BC LDP X22, X21, [X31 + 0x40]
	0x03BAB9C0 LDP X24, X23, [X31 + 0x30]
	0x03BAB9C4 LDP X26, X25, [X31 + 0x20]
	0x03BAB9C8 LDP X28, X27, [X31 + 0x10]
	0x03BAB9CC LDP X29, X30, [X31], #0x60
	0x03BAB9D0 B 0x3BAB9D4
	0x03BAB9D4 STP X29, X30, [X31 - 0x60]!
	0x03BAB9D8 STP X28, X27, [X31 + 0x10]
	0x03BAB9DC STP X26, X25, [X31 + 0x20]
	0x03BAB9E0 STP X24, X23, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 336
	002 Move [X31+192], D15
	003 Move [X31+200], D14
	004 Move [X31+208], D13
	005 Move [X31+216], D12
	006 Move [X31+224], D11
	007 Move [X31+232], D10
	008 Move [X31+240], D9
	009 Move [X31+248], D8
	010 Move [X31+256], X29
	011 Move [X31+272], X30
	012 Move [X31+280], X25
	013 Move [X31+288], X24
	014 Move [X31+296], X23
	015 Move [X31+304], X22
	016 Move [X31+312], X21
	017 Move [X31+320], X20
	018 Move [X31+328], X19
	019 Move X20, 0x838000
	020 Move W8, [X20+3220]
	021 Move X21, X1
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {38}
	027 Move X0, 0x5B0000
	028 Move X0, [X0+760]
	029 Call 0x1C17CF4
	030 Move X0, 0x5B2000
	031 Move X0, [X0+3568]
	032 Call 0x1C17CF4
	033 Move X0, 0x5B0000
	034 Move X0, [X0+368]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X20+3220], W8
	038 Move [X31+184], W31
	039 Move [X31+176], X31
	040 Compare X21, 0
	041 JumpIfEqual {429}
	042 Move X0, X21
	043 Move X1, X31
	044 Call XRBaseInteractable.get_interactorsSelecting, X0
	045 Compare X0, 0
	046 JumpIfEqual {429}
	047 Move X8, 0x5B0000
	048 Move X8, [X8+368]
	049 Move X25, 0x5B2000
	050 Move W1, W31
	051 Add X24, X31, 144
	052 Move X2, [X8]
	053 Move X25, [X25+3568]
	054 Call List`1<Object>.get_Item, X0, X1
	055 Move X23, X0
	056 Move X0, X21
	057 Move X1, X31
	058 Call Component.get_transform, X0
	059 Move X8, [X21]
	060 Move X20, X0
	061 Move X0, X21
	062 Move X1, X23
	063 Move X9, [X8+1448]
	064 Move X2, [X8+1456]
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Move X1, [X25]
	067 Move X22, X0
	068 Move X0, X23
	069 Call 0x1C17E00
	070 Move [X19+352], X0
	071 Move X1, [X25]
	072 Move X0, X23
	073 Call 0x1C17E00
	074 Move X8, [X19+352]
	075 Move X0, X20
	076 Move X1, X31
	077 NotImplemented "Instruction CMP not yet implemented."
	078 NotImplemented "Instruction CSET not yet implemented."
	079 Move [X19+360], W8
	080 Add X8, X31, 112
	081 Call TransformExtensions.GetWorldPose, X0
	082 NotImplemented "Instruction LDUR not yet implemented."
	083 Move V1, [X31+7]
	084 Move [X24+12], V0
	085 Move [X31+9], V1
	086 Move V0, [X31+9]
	087 NotImplemented "Instruction LDUR not yet implemented."
	088 Move [X19+72], V0
	089 Move [X19+84], V1
	090 Compare X23, 0
	091 JumpIfEqual {429}
	092 Move X10, 0x5B0000
	093 Move X8, [X23]
	094 Move X10, [X10+760]
	095 NotImplemented "Instruction LDRH not yet implemented."
	096 Move X1, [X10]
	097 Compare X9, 0
	098 JumpIfEqual {105}
	099 Move X10, [X8+176]
	100 Add X10, X10, 8
	101 NotImplemented "Instruction LDUR not yet implemented."
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Subtract X9, X9, 1
	104 Add X10, X10, 16
	105 Move W2, 6
	106 Move X0, X23
	107 Call 0x1C5D788
	108 Move W9, [X10]
	109 Add W9, W9, 6
	110 Add X8, X8, W9
	111 Add X0, X8, 312
	112 Move X8, [X0]
	113 Move X2, [X0+8]
	114 Move X0, X23
	115 Move X1, X21
	116 NotImplemented "Instruction BLR not yet implemented."
	117 Add X8, X31, 80
	118 Move X1, X31
	119 Call TransformExtensions.GetWorldPose, X0
	120 NotImplemented "Instruction LDUR not yet implemented."
	121 Move V1, [X31+5]
	122 Move W25, 1
	123 Move [X31+124], V0
	124 Move [X31+7], V1
	125 NotImplemented "Instruction LDUR not yet implemented."
	126 Move V1, [X31+7]
	127 Move [X19+184], X23
	128 Move [X19+192], W25
	129 Move [X19+140], V0
	130 Move [X19+8], V1
	131 Move X23, 0x82E000
	132 Move W8, [X23+1923]
	133 Compare W8, 0
	134 JumpIfNotEqual {139}
	135 Move X0, 0x549000
	136 Move X0, [X0+1440]
	137 Call 0x1C17CF4
	138 Move [X23+1923], W25
	139 Move X8, 0x549000
	140 Move X8, [X8+1440]
	141 Move X23, 0x82E000
	142 Move W9, [X23+1939]
	143 Move X8, [X8]
	144 Move X8, [X8+184]
	145 Move S0, [X8]
	146 Move S8, [X8+4]
	147 Move V9, [X8+8]
	148 Move [X31+264], S0
	149 Compare W9, 0
	150 JumpIfNotEqual {156}
	151 Move X0, 0x54A000
	152 Move X0, [X0+1448]
	153 Call 0x1C17CF4
	154 Move W8, 1
	155 Move [X23+1939], W8
	156 Move S10, [X19+84]
	157 Move S1, [X19+88]
	158 Move W8, [X21+524]
	159 Move S2, [X19+92]
	160 Move S3, [X19+96]
	161 Compare W8, 0
	162 JumpIfEqual {222}
	163 Move V4, [X19+140]
	164 Move V0, [X19+148]
	165 Move V5, [X19+144]
	166 Move X0, X31
	167 Move [X31+268], S9
	168 Move [X31], S4
	169 Move [X31+8], S0
	170 Move V0, [X19+152]
	171 Move V15, V8
	172 Move [X31+8], S5
	173 Move [X31+16], S0
	174 Move V0, V10
	175 Call Quaternion.Inverse, X0
	176 Compare X22, 0
	177 JumpIfEqual {429}
	178 Move X0, X22
	179 Move X1, X31
	180 Move V10, V0
	181 Move V9, V1
	182 Move V8, V2
	183 Move V11, V3
	184 Call Transform.get_rotation, X0
	185 Multiply S4, S11, S0
	186 Multiply S5, S10, S3
	187 Multiply S7, S8, S1
	188 Multiply S16, S11, S1
	189 Multiply S17, S9, S3
	190 Multiply S18, S8, S0
	191 Multiply S20, S10, S1
	192 Multiply S21, S10, S0
	193 Multiply S22, S9, S0
	194 Multiply S0, S9, S1
	195 Multiply S1, S11, S2
	196 Multiply S23, S11, S3
	197 Multiply S3, S8, S3
	198 Multiply S6, S9, S2
	199 Multiply S19, S10, S2
	200 Multiply S24, S8, S2
	201 Add S2, S4, S5
	202 Add S4, S16, S17
	203 Add S1, S1, S3
	204 Subtract S3, S23, S21
	205 Add S2, S6, S2
	206 Add S4, S18, S4
	207 Add S5, S20, S1
	208 Subtract S3, S3, S0
	209 Subtract S0, S2, S7
	210 Subtract S1, S4, S19
	211 Subtract S2, S5, S22
	212 Subtract S3, S3, S24
	213 Move X0, X31
	214 Call Quaternion.Inverse, X0
	215 Move V10, [X31]
	216 Move V9, [X31+268]
	217 Move V13, V0
	218 Move V12, V1
	219 Move V11, V2
	220 Move V14, V3
	221 Move V8, V15
	222 Move [X31+4], S2
	223 Move [X31+12], S1
	224 Move [X31+12], S3
	225 Move X8, 0x54A000
	226 Move X8, [X8+1448]
	227 Move X8, [X8]
	228 Move X8, [X8+184]
	229 Move S13, [X8]
	230 Move S12, [X8+4]
	231 Move S11, [X8+8]
	232 Move S14, [X8+12]
	233 Add X23, X19, 72
	234 Move W8, [X23+8]
	235 Move X9, [X23]
	236 Add X25, X19, 128
	237 Move [X31+184], W8
	238 Move [X31+176], X9
	239 Move W8, [X21+512]
	240 Compare W8, 0
	241 JumpIfEqual {268}
	242 Move W8, [X25+8]
	243 Move X9, [X25]
	244 Move [X31+184], W8
	245 Move [X31+176], X9
	246 Compare X22, 0
	247 JumpIfEqual {429}
	248 Move S8, [X19+76]
	249 Move S15, [X19+80]
	250 Move V9, [X19+72]
	251 Move X0, X22
	252 Move X1, X31
	253 Call Transform.get_position, X0
	254 Move W8, [X21+524]
	255 Subtract S0, S9, S0
	256 Subtract S8, S8, S1
	257 Subtract S9, S15, S2
	258 Compare W8, 0
	259 JumpIfEqual {267}
	260 Move X0, X22
	261 Move V1, V8
	262 Move V2, V9
	263 Move X1, X31
	264 Call Transform.InverseTransformDirection, X0, X1
	265 Move V8, V1
	266 Move V9, V2
	267 Move [X31+264], S0
	268 Move W2, [X19+32]
	269 Move W3, [X19+36]
	270 Add X0, X31, 176
	271 Move X1, X23
	272 Move [X31+268], S9
	273 Move V15, V8
	274 Move [X19+344], W3
	275 Move [X19+348], W2
	276 Call XRGeneralGrabTransformer.AdjustPositionForPermittedAxes, X0, X1, X2, X3
	277 Move S5, [X31+4]
	278 Move S4, [X31+8]
	279 Move V6, [X31+12]
	280 Add X0, X31, 144
	281 Move V3, V10
	282 Move X1, X31
	283 Move [X31+176], S0
	284 Move [X31+184], S1
	285 Move [X31+184], S2
	286 Move [X31+144], X31
	287 Move [X31+152], X31
	288 Move [X31+168], W31
	289 Move [X31+160], X31
	290 Call Pose..ctor, X0, X1, X2
	291 NotImplemented "Instruction LDUR not yet implemented."
	292 Move V1, [X31+9]
	293 Move [X23+12], V0
	294 Move [X23], V1
	295 Compare X20, 0
	296 JumpIfEqual {429}
	297 Move X0, X20
	298 Move X1, X31
	299 Call Transform.get_localScale, X0
	300 Move V8, V0
	301 Move V9, V1
	302 Move V0, [X25]
	303 NotImplemented "Instruction LDUR not yet implemented."
	304 Move V10, V2
	305 Add X1, X31, 48
	306 Move [X31+3], V0
	307 Move [X31+60], V1
	308 Move V3, [X23]
	309 NotImplemented "Instruction LDUR not yet implemented."
	310 Move S0, [X19+128]
	311 Move S1, [X19+132]
	312 Move V2, [X19+136]
	313 Move [X31+1], V3
	314 Move [X31+28], V4
	315 Add X2, X31, 16
	316 Move X0, X19
	317 Move V3, V8
	318 Move V4, V9
	319 Move V5, V10
	320 Call XRGeneralGrabTransformer.TranslateSetup, X0, X1, X2, X3, X4
	321 Move S0, [X19+140]
	322 Move S1, [X19+144]
	323 Move S2, [X19+148]
	324 Move S3, [X19+152]
	325 Move X0, X31
	326 Call Quaternion.Inverse, X0
	327 Multiply S4, S14, S0
	328 Multiply S5, S13, S3
	329 Multiply S16, S14, S1
	330 Multiply S17, S12, S3
	331 Multiply S22, S14, S2
	332 Multiply S23, S14, S3
	333 Multiply S3, S11, S3
	334 Multiply S21, S13, S0
	335 Add S4, S4, S5
	336 Move S5, [X19+84]
	337 Move S24, [X19+88]
	338 Add S16, S16, S17
	339 Add S3, S22, S3
	340 Move S17, [X19+92]
	341 Move S22, [X19+96]
	342 Multiply S6, S12, S2
	343 Multiply S7, S11, S1
	344 Multiply S18, S11, S0
	345 Multiply S20, S13, S1
	346 Multiply S1, S12, S1
	347 Subtract S21, S23, S21
	348 Multiply S19, S13, S2
	349 Multiply S0, S12, S0
	350 Multiply S2, S11, S2
	351 Add S4, S6, S4
	352 Add S6, S18, S16
	353 Add S3, S20, S3
	354 Subtract S1, S21, S1
	355 Subtract S4, S4, S7
	356 Subtract S6, S6, S19
	357 Subtract S0, S3, S0
	358 Subtract S1, S1, S2
	359 Multiply S2, S5, S1
	360 Multiply S3, S22, S4
	361 Multiply S7, S17, S6
	362 Multiply S16, S24, S0
	363 Multiply S18, S24, S1
	364 Multiply S19, S22, S6
	365 Multiply S20, S5, S0
	366 Multiply S21, S17, S4
	367 Multiply S23, S24, S4
	368 Multiply S4, S5, S4
	369 Multiply S5, S5, S6
	370 Multiply S6, S24, S6
	371 Multiply S24, S17, S1
	372 Multiply S1, S22, S1
	373 Add S2, S2, S3
	374 Subtract S1, S1, S4
	375 Multiply S22, S22, S0
	376 Multiply S0, S17, S0
	377 Add S2, S7, S2
	378 Subtract S1, S1, S6
	379 Subtract S11, S2, S16
	380 Subtract S14, S1, S0
	381 Move V0, [X31+264]
	382 Move V2, [X31+268]
	383 Add S3, S18, S19
	384 Add S17, S24, S22
	385 Add S3, S20, S3
	386 Add S4, S23, S17
	387 Subtract S12, S3, S21
	388 Subtract S13, S4, S5
	389 Move V1, V15
	390 Move V3, V8
	391 Move V4, V9
	392 Move V5, V10
	393 Move X0, X31
	394 Call Vector3Extensions.Divide, X0, X1
	395 Add X0, X31, 112
	396 Move V3, V11
	397 Move V4, V12
	398 Move V5, V13
	399 Move V6, V14
	400 Move X1, X31
	401 Move [X31+112], X31
	402 Move [X31+120], X31
	403 Move [X31+136], W31
	404 Move [X31+128], X31
	405 Call Pose..ctor, X0, X1, X2
	406 NotImplemented "Instruction LDUR not yet implemented."
	407 Move V1, [X31+7]
	408 Move X22, [X31+304]
	409 Move X21, [X31+312]
	410 Move X24, [X31+288]
	411 Move X23, [X31+296]
	412 Move [X19+7], V0
	413 Move [X19+100], V1
	414 Move X20, [X31+320]
	415 Move X19, [X31+328]
	416 Move X30, [X31+272]
	417 Move X25, [X31+280]
	418 Move X29, [X31+256]
	419 Move D9, [X31+240]
	420 Move D8, [X31+248]
	421 Move D11, [X31+224]
	422 Move D10, [X31+232]
	423 Move D13, [X31+208]
	424 Move D12, [X31+216]
	425 Move D15, [X31+192]
	426 Move D14, [X31+200]
	427 Add X31, X31, 336
	428 Return 
	429 Call 0x1C17F20

Method: System.Void OnGrabCountChanged(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, UnityEngine.Pose targetPose, UnityEngine.Vector3 localScale)

Disassembly:
	0x03BABB3C FMUL S21, S6, S4
	0x03BABB40 FMUL S22, S0, S2
	0x03BABB44 FMUL S23, S5, S3
	0x03BABB48 FMUL S24, S5, S7
	0x03BABB4C FMUL S5, S5, S2
	0x03BABB50 FMUL S2, S6, S2
	0x03BABB54 FMUL S6, S6, S7
	0x03BABB58 FMUL S7, S1, S3
	0x03BABB5C FMUL S1, S1, S4
	0x03BABB60 FMUL S4, S0, S4
	0x03BABB64 FMUL S3, S0, S3
	0x03BABB68 FADD S0, S16, S17
	0x03BABB6C FADD S16, S20, S21
	0x03BABB70 FADD S4, S7, S4
	0x03BABB74 FSUB S1, S1, S5
	0x03BABB78 FADD S0, S18, S0
	0x03BABB7C FADD S5, S22, S16
	0x03BABB80 FADD S4, S24, S4
	0x03BABB84 FSUB S6, S1, S6
	0x03BABB88 FSUB S0, S0, S19
	0x03BABB8C FSUB S1, S5, S23
	0x03BABB90 FSUB S2, S4, S2
	0x03BABB94 FSUB S3, S6, S3
	0x03BABB98 RET
	0x03BABB9C LDP S0, S1, [X0 + 0x54]
	0x03BABBA0 LDP S2, S3, [X0 + 0x5C]
	0x03BABBA4 RET
	0x03BABBA8 STP X30, X27, [X31 - 0x50]!
	0x03BABBAC STP X26, X25, [X31 + 0x10]
	0x03BABBB0 STP X24, X23, [X31 + 0x20]
	0x03BABBB4 STP X22, X21, [X31 + 0x30]
	0x03BABBB8 STP X20, X19, [X31 + 0x40]
	0x03BABBBC ADRP X26, 0x837000
	0x03BABBC0 ADRP X27, 0x5B1000
	0x03BABBC4 LDRB W8, [X26 + 0xC98]
	0x03BABBC8 LDR X27, [X27 + 0xE00]
	0x03BABBCC MOV X19, X6
	0x03BABBD0 MOV W21, W5
	0x03BABBD4 MOV W23, W4
	0x03BABBD8 MOV W25, W3
	0x03BABBDC MOV W20, W2
	0x03BABBE0 MOV X22, X1
	0x03BABBE4 MOV X24, X0
	0x03BABBE8 TBNZ X8, 0x0, 0x3BABC00
	0x03BABBEC ADRP X0, 0x5B1000
	0x03BABBF0 LDR X0, [X0 + 0xE00]
	0x03BABBF4 BL 0x1C16CF4
	0x03BABBF8 MOVZ W8, 0x1
	0x03BABBFC STRB W8, [X26 + 0xC98]
	0x03BABC00 LDR X0, [X27]
	0x03BABC04 LDR W8, [X0 + 0xE0]
	0x03BABC08 CBNZ W8, 0x3BABC10
	0x03BABC0C BL 0x1C16DFC
	0x03BABC10 AND W3, W25, 0x1
	0x03BABC14 AND W4, W23, 0x1
	0x03BABC18 AND W5, W21, 0x1
	0x03BABC1C MOV X0, X24
	0x03BABC20 MOV X1, X22
	0x03BABC24 MOV W2, W20
	0x03BABC28 MOV X6, X19
	0x03BABC2C LDP X20, X19, [X31 + 0x40]
	0x03BABC30 LDP X22, X21, [X31 + 0x30]
	0x03BABC34 LDP X24, X23, [X31 + 0x20]
	0x03BABC38 LDP X26, X25, [X31 + 0x10]
	0x03BABC3C LDP X30, X27, [X31], #0x50
	0x03BABC40 B 0x3BABC44
	0x03BABC44 STP X30, X27, [X31 - 0x50]!
	0x03BABC48 STP X26, X25, [X31 + 0x10]
	0x03BABC4C STP X24, X23, [X31 + 0x20]
	0x03BABC50 STP X22, X21, [X31 + 0x30]
	0x03BABC54 STP X20, X19, [X31 + 0x40]
	0x03BABC58 ADRP X26, 0x837000
	0x03BABC5C ADRP X27, 0x570000
	0x03BABC60 LDRB W8, [X26 + 0xCA7]
	0x03BABC64 LDR X27, [X27 + 0x848]
	0x03BABC68 MOV X19, X6
	0x03BABC6C MOV W22, W5
	0x03BABC70 MOV W24, W4
	0x03BABC74 MOV W25, W3
	0x03BABC78 MOV W20, W2
	0x03BABC7C MOV X21, X1
	0x03BABC80 MOV X23, X0
	0x03BABC84 TBNZ X8, 0x0, 0x3BABCA8
	0x03BABC88 ADRP X0, 0x5B1000
	0x03BABC8C LDR X0, [X0 + 0xE00]
	0x03BABC90 BL 0x1C16CF4
	0x03BABC94 ADRP X0, 0x570000
	0x03BABC98 LDR X0, [X0 + 0x848]
	0x03BABC9C BL 0x1C16CF4
	0x03BABCA0 MOVZ W8, 0x1
	0x03BABCA4 STRB W8, [X26 + 0xCA7]
	0x03BABCA8 LDR X0, [X27]
	0x03BABCAC LDR W8, [X0 + 0xE0]
	0x03BABCB0 CBNZ W8, 0x3BABCB8
	0x03BABCB4 BL 0x1C16DFC
	0x03BABCB8 MOV X0, X31
	0x03BABCBC BL 0x36FA670
	0x03BABCC0 TBZ X0, 0x0, 0x3BABD1C
	0x03BABCC4 ADRP X8, 0x5B1000
	0x03BABCC8 LDR X8, [X8 + 0xE00]
	0x03BABCCC LDR X0, [X8]
	0x03BABCD0 LDR W8, [X0 + 0xE0]
	0x03BABCD4 CBNZ W8, 0x3BABCDC
	0x03BABCD8 BL 0x1C16DFC
	0x03BABCDC BL 0x3BADB14
	0x03BABCE0 CBZ X0, 0x3BABD1C
	0x03BABCE4 MOV X7, X0
	0x03BABCE8 AND W3, W25, 0x1
	0x03BABCEC AND W4, W24, 0x1
	0x03BABCF0 AND W5, W22, 0x1
	0x03BABCF4 MOV X0, X23
	0x03BABCF8 MOV X1, X21
	0x03BABCFC MOV W2, W20
	0x03BABD00 MOV X6, X19
	0x03BABD04 LDP X20, X19, [X31 + 0x40]
	0x03BABD08 LDP X22, X21, [X31 + 0x30]
	0x03BABD0C LDP X24, X23, [X31 + 0x20]
	0x03BABD10 LDP X26, X25, [X31 + 0x10]
	0x03BABD14 LDP X30, X27, [X31], #0x50
	0x03BABD18 BR X7
	0x03BABD1C AND W3, W25, 0x1
	0x03BABD20 AND W4, W24, 0x1
	0x03BABD24 AND W5, W22, 0x1
	0x03BABD28 MOV X0, X23
	0x03BABD2C MOV X1, X21
	0x03BABD30 MOV W2, W20
	0x03BABD34 MOV X6, X19
	0x03BABD38 LDP X20, X19, [X31 + 0x40]
	0x03BABD3C LDP X22, X21, [X31 + 0x30]
	0x03BABD40 LDP X24, X23, [X31 + 0x20]
	0x03BABD44 LDP X26, X25, [X31 + 0x10]
	0x03BABD48 MOV X7, X31
	0x03BABD4C LDP X30, X27, [X31], #0x50
	0x03BABD50 B 0x3BAED90
	0x03BABD54 SUB X31, X31, 0x90
	0x03BABD58 STR D8, [X31 + 0x30]
	0x03BABD5C STP X30, X27, [X31 + 0x40]
	0x03BABD60 STP X26, X25, [X31 + 0x50]
	0x03BABD64 STP X24, X23, [X31 + 0x60]
	0x03BABD68 STP X22, X21, [X31 + 0x70]
	0x03BABD6C STP X20, X19, [X31 + 0x80]
	0x03BABD70 ADRP X26, 0x837000
	0x03BABD74 LDRB W8, [X26 + 0xC99]
	0x03BABD78 MOV W24, W6
	0x03BABD7C MOV X21, X5
	0x03BABD80 MOV X22, X4
	0x03BABD84 MOV X19, X3
	0x03BABD88 MOV X23, X2
	0x03BABD8C MOV X25, X1
	0x03BABD90 MOV X20, X0
	0x03BABD94 TBNZ X8, 0x0, 0x3BABDB8
	0x03BABD98 ADRP X0, 0x5B1000
	0x03BABD9C LDR X0, [X0 + 0xDF0]
	0x03BABDA0 BL 0x1C16CF4
	0x03BABDA4 ADRP X0, 0x5AF000
	0x03BABDA8 LDR X0, [X0 + 0x168]
	0x03BABDAC BL 0x1C16CF4
	0x03BABDB0 MOVZ W8, 0x1
	0x03BABDB4 STRB W8, [X26 + 0xC99]
	0x03BABDB8 STR W31, [X31 + 0x28]
	0x03BABDBC STR X31, [X31 + 0x20]
	0x03BABDC0 STR W31, [X31 + 0x18]
	0x03BABDC4 STR X31, [X31 + 0x10]
	0x03BABDC8 LDR X0, [X25]
	0x03BABDCC CBZ X0, 0x3BABFFC
	0x03BABDD0 MOV X1, X31
	0x03BABDD4 BL 0x3B3A784
	0x03BABDD8 CBZ X0, 0x3BABFFC
	0x03BABDDC LDR W26, [X0 + 0x18]
	0x03BABDE0 CMP W26, 0x1
	0x03BABDE4 B.NE 0x3BABEB4
	0x03BABDE8 TBZ X24, 0x0, 0x3BABEB4
	0x03BABDEC LDRB W8, [X20 + 0x2C]
	0x03BABDF0 CBZ W8, 0x3BABF88
	0x03BABDF4 LDRB W8, [X20 + 0x168]
	0x03BABDF8 CBZ W8, 0x3BABF88
	0x03BABDFC LDR X25, [X20 + 0x160]
	0x03BABE00 CBZ X25, 0x3BABFFC
	0x03BABE04 ADRP X27, 0x5B1000
	0x03BABE08 LDR X8, [X25]
	0x03BABE0C LDR X27, [X27 + 0xDF0]
	0x03BABE10 LDRH W9, [X8 + 0x12E]
	0x03BABE14 LDR X1, [X27]
	0x03BABE18 CBZ X9, 0x3BABE3C
	0x03BABE1C LDR X10, [X8 + 0xB0]
	0x03BABE20 ADD X10, X10, 0x8
	0x03BABE24 LDUR X11, [X10 - 0x8]
	0x03BABE28 CMP X11, X1
	0x03BABE2C B.EQ 0x3BABE4C
	0x03BABE30 SUBS X9, X9, 0x1
	0x03BABE34 ADD X10, X10, 0x10
	0x03BABE38 B.NE 0x3BABE24
	0x03BABE3C MOV X0, X25
	0x03BABE40 MOV W2, W31
	0x03BABE44 BL 0x1C5C788
	0x03BABE48 B 0x3BABE58
	0x03BABE4C LDRSW X9, [X10]
	0x03BABE50 ADD X8, X8, X9, 0x4, LSL
	0x03BABE54 ADD X0, X8, 0x138
	0x03BABE58 LDP X8, X1, [X0]
	0x03BABE5C MOV X0, X25
	0x03BABE60 BLR X8
	0x03BABE64 CMP W0, 0x1
	0x03BABE68 B.NE 0x3BABEB4
	0x03BABE6C LDR X21, [X20 + 0x160]
	0x03BABE70 CBZ X21, 0x3BABFFC
	0x03BABE74 LDR X8, [X21]
	0x03BABE78 LDR X1, [X27]
	0x03BABE7C LDRH W9, [X8 + 0x12E]
	0x03BABE80 CBZ X9, 0x3BABEA4
	0x03BABE84 LDR X10, [X8 + 0xB0]
	0x03BABE88 ADD X10, X10, 0x8
	0x03BABE8C LDUR X11, [X10 - 0x8]
	0x03BABE90 CMP X11, X1

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x838000
	011 Move W8, [X21+3221]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X20, X1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {32}
	021 Move X0, 0x5B0000
	022 Move X0, [X0+760]
	023 Call 0x1C17CF4
	024 Move X0, 0x5B0000
	025 Move X0, [X0+360]
	026 Call 0x1C17CF4
	027 Move X0, 0x5B0000
	028 Move X0, [X0+368]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+3221], W8
	032 Compare X20, 0
	033 JumpIfEqual {236}
	034 Move X0, X20
	035 Move X1, X31
	036 Call XRBaseInteractable.get_interactorsSelecting, X0
	037 Compare X0, 0
	038 JumpIfEqual {236}
	039 Move W23, [X0+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X0, X20
	042 Move X1, X31
	043 Call XRBaseInteractable.get_interactorsSelecting, X0
	044 Compare X0, 0
	045 JumpIfEqual {236}
	046 Move X8, 0x5B0000
	047 Move X8, [X8+368]
	048 Move W1, W31
	049 Move X2, [X8]
	050 Call List`1<Object>.get_Item, X0, X1
	051 Move X8, [X19+184]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W8, [X19+192]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X8, [X19]
	056 Move X0, X19
	057 Move X1, X20
	058 Move X9, [X8+520]
	059 Move X2, [X8+528]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X0, X20
	063 Move X1, X31
	064 Call XRBaseInteractable.get_interactorsSelecting, X0
	065 Compare X0, 0
	066 JumpIfEqual {236}
	067 Move X22, 0x5B0000
	068 Move X22, [X22+368]
	069 Move W1, W31
	070 Move X2, [X22]
	071 Call List`1<Object>.get_Item, X0, X1
	072 Move X21, X0
	073 Move X0, X20
	074 Move X1, X31
	075 Call XRBaseInteractable.get_interactorsSelecting, X0
	076 Compare X0, 0
	077 JumpIfEqual {236}
	078 Move X2, [X22]
	079 Move W1, 1
	080 Call List`1<Object>.get_Item, X0, X1
	081 Compare X21, 0
	082 JumpIfEqual {236}
	083 Move X10, 0x5B0000
	084 Move X8, [X21]
	085 Move X10, [X10+760]
	086 Move X22, X0
	087 NotImplemented "Instruction LDRH not yet implemented."
	088 Move X1, [X10]
	089 Compare X9, 0
	090 JumpIfEqual {97}
	091 Move X10, [X8+176]
	092 Add X10, X10, 8
	093 NotImplemented "Instruction LDUR not yet implemented."
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Subtract X9, X9, 1
	096 Add X10, X10, 16
	097 Move W2, 6
	098 Move X0, X21
	099 Call 0x1C5D788
	100 Move W9, [X10]
	101 Add W9, W9, 6
	102 Add X8, X8, W9
	103 Add X0, X8, 312
	104 Move X8, [X0]
	105 Move X2, [X0+8]
	106 Move X0, X21
	107 Move X1, X20
	108 NotImplemented "Instruction BLR not yet implemented."
	109 Move X8, [X20]
	110 Move X21, X0
	111 Move X0, X20
	112 Move X1, X22
	113 Move X9, [X8+1448]
	114 Move X2, [X8+1456]
	115 NotImplemented "Instruction BLR not yet implemented."
	116 Move [X19+268], S10
	117 Move [X19+272], S9
	118 Move [X19+276], S8
	119 Compare X0, 0
	120 JumpIfEqual {236}
	121 Move X1, X31
	122 Call Transform.get_position, X0
	123 Compare X21, 0
	124 JumpIfEqual {236}
	125 Move X0, X21
	126 Move X1, X31
	127 Call Transform.InverseTransformPoint, X0, X1
	128 Move [X19+196], S0
	129 Move [X19+204], S1
	130 Move [X19+204], S2
	131 Move X20, 0x82E000
	132 Move W8, [X20+1925]
	133 Move V8, V0
	134 Move V9, V1
	135 Move V10, V2
	136 Compare W8, 0
	137 JumpIfNotEqual {143}
	138 Move X0, 0x549000
	139 Move X0, [X0+1448]
	140 Call 0x1C17CF4
	141 Move W8, 1
	142 Move [X20+1925], W8
	143 Move X8, 0x549000
	144 Move X8, [X8+1448]
	145 Move X0, [X8]
	146 Move W8, [X0+224]
	147 Compare W8, 0
	148 JumpIfNotEqual {150}
	149 Call 0x1C17DFC
	150 Multiply S0, S8, S8
	151 Multiply S1, S9, S9
	152 Move X8, -51118080
	153 Add S0, S0, S1
	154 Move V1, [X8+380]
	155 Multiply S2, S10, S10
	156 Add S0, S2, S0
	157 NotImplemented "Instruction FSQRT not yet implemented."
	158 NotImplemented "Instruction FCMP not yet implemented."
	159 NotImplemented "Instruction FDIV not yet implemented."
	160 NotImplemented "Instruction FDIV not yet implemented."
	161 NotImplemented "Instruction FDIV not yet implemented."
	162 Move X20, 0x82E000
	163 Move W8, [X20+1923]
	164 Compare W8, 0
	165 JumpIfNotEqual {171}
	166 Move X0, 0x549000
	167 Move X0, [X0+1440]
	168 Call 0x1C17CF4
	169 Move W8, 1
	170 Move [X20+1923], W8
	171 Move X8, 0x549000
	172 Move X8, [X8+1440]
	173 Move X8, [X8]
	174 Move X8, [X8+184]
	175 Move S8, [X8]
	176 Move S9, [X8+4]
	177 Move V10, [X8+8]
	178 Move V0, V8
	179 Move V1, V9
	180 Move V2, V10
	181 Move X0, X31
	182 Move [X19+208], S8
	183 Move [X19+216], S9
	184 Move [X19+216], S10
	185 Call BurstMathUtility.Orthogonal, X0
	186 Move V3, V0
	187 Move V4, V1
	188 Move V5, V2
	189 Move V0, V8
	190 Move V1, V9
	191 Move V2, V10
	192 Move X0, X31
	193 Call Quaternion.LookRotation, X0, X1
	194 Move X0, X31
	195 Move [X19+220], S0
	196 Move [X19+228], S1
	197 Move [X19+228], S2
	198 Move [X19+236], S3
	199 Call Quaternion.Inverse, X0
	200 Move [X19+236], S0
	201 Move [X19+244], S1
	202 NotImplemented "Instruction LDUR not yet implemented."
	203 Move W8, 1
	204 Move [X19+244], S2
	205 Move [X19+252], S3
	206 Move [X19+280], W8
	207 Move [X19+252], V0
	208 Move V0, [X19+296]
	209 Move S1, [X19+60]
	210 Move S4, [X19+64]
	211 Move V2, [X19+300]
	212 Move V3, [X19+304]
	213 Move [X19+192], W23
	214 Multiply S5, S0, S1
	215 Multiply S6, S2, S1
	216 Multiply S1, S3, S1
	217 Multiply S0, S0, S4
	218 Multiply S2, S2, S4
	219 Multiply S3, S3, S4
	220 Move [X19+320], S5
	221 Move [X19+324], S6
	222 Move [X19+328], S1
	223 Move [X19+332], S0
	224 Move [X19+336], S2
	225 Move [X19+340], S3
	226 Move X20, [X31+64]
	227 Move X19, [X31+72]
	228 Move X22, [X31+48]
	229 Move X21, [X31+56]
	230 Move X30, [X31+32]
	231 Move X23, [X31+40]
	232 Move D9, [X31+16]
	233 Move D8, [X31+24]
	234 Move V10, [X31+80]
	235 Return 
	236 Call 0x1C17F20

Method: System.Void ComputeAdjustedInteractorPose(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, out UnityEngine.Vector3 newHandleBar, out UnityEngine.Vector3 adjustedInteractorPosition, out UnityEngine.Quaternion adjustedInteractorRotation)

Disassembly:
	0x03BABE94 B.EQ 0x3BABF00
	0x03BABE98 SUBS X9, X9, 0x1
	0x03BABE9C ADD X10, X10, 0x10
	0x03BABEA0 B.NE 0x3BABE8C
	0x03BABEA4 MOVZ W2, 0x2
	0x03BABEA8 MOV X0, X21
	0x03BABEAC BL 0x1C5C788
	0x03BABEB0 B 0x3BABF10
	0x03BABEB4 CMP W26, 0x2
	0x03BABEB8 B.LT 0x3BABF88
	0x03BABEBC TBZ X24, 0x0, 0x3BABF88
	0x03BABEC0 LDRB W8, [X20 + 0x2D]
	0x03BABEC4 CBZ W8, 0x3BABF88
	0x03BABEC8 LDRB W4, [X20 + 0x38]
	0x03BABECC LDR V0, [X20 + 0x44]
	0x03BABED0 LDR V1, [X20 + 0x34]
	0x03BABED4 ADD X5, X20, 0x140
	0x03BABED8 ADD X6, X20, 0x14C
	0x03BABEDC ADD X7, X31, 0x10
	0x03BABEE0 MOV X0, X23
	0x03BABEE4 MOV X1, X19
	0x03BABEE8 MOV X2, X22
	0x03BABEEC MOV X3, X21
	0x03BABEF0 BL 0x3BAC0BC
	0x03BABEF4 LDR V0, [X31 + 0x10]
	0x03BABEF8 ADD X19, X31, 0x10
	0x03BABEFC B 0x3BABF8C
	0x03BABF00 LDR W9, [X10]
	0x03BABF04 ADD W9, W9, 0x2
	0x03BABF08 ADD X8, X8, W9, 0x4, SXTW
	0x03BABF0C ADD X0, X8, 0x138
	0x03BABF10 LDP X8, X1, [X0]
	0x03BABF14 MOV X0, X21
	0x03BABF18 BLR X8
	0x03BABF1C ADRP X21, 0x82E000
	0x03BABF20 LDRB W8, [X21 + 0x5AA]
	0x03BABF24 MOV V8.16B, V0.16B
	0x03BABF28 CBNZ W8, 0x3BABF40
	0x03BABF2C ADRP X0, 0x54F000
	0x03BABF30 LDR X0, [X0 + 0x4B8]
	0x03BABF34 BL 0x1C16CF4
	0x03BABF38 MOVZ W8, 0x1
	0x03BABF3C STRB W8, [X21 + 0x5AA]
	0x03BABF40 ADRP X8, 0x54F000
	0x03BABF44 LDR X8, [X8 + 0x4B8]
	0x03BABF48 ADRP X9, 0xFFFFFFFFFCF3F000
	0x03BABF4C LDR V0, [X9 + 0x240]
	0x03BABF50 FABS S1, S8
	0x03BABF54 LDR X8, [X8]
	0x03BABF58 FMOV S2, W31
	0x03BABF5C FMAXNM S1, S1, S2
	0x03BABF60 FMUL S0, S1, S0
	0x03BABF64 LDR X8, [X8 + 0xB8]
	0x03BABF68 FMOV S1, 8
	0x03BABF6C LDR V3, [X8]
	0x03BABF70 FMUL S1, S3, S1
	0x03BABF74 FCMP S0, S1
	0x03BABF78 FCSEL S0, S0, S1, GT
	0x03BABF7C FABD S1, S2, S2
	0x03BABF80 FCMP S1, S0
	0x03BABF84 B.PL 0x3BABFB0
	0x03BABF88 LDR V0, [X19]
	0x03BABF8C LDP S1, S2, [X19 + 0x4]
	0x03BABF90 LDP X20, X19, [X31 + 0x80]
	0x03BABF94 LDP X22, X21, [X31 + 0x70]
	0x03BABF98 LDP X24, X23, [X31 + 0x60]
	0x03BABF9C LDP X26, X25, [X31 + 0x50]
	0x03BABFA0 LDP X30, X27, [X31 + 0x40]
	0x03BABFA4 LDR V8, [X31 + 0x30]
	0x03BABFA8 ADD X31, X31, 0x90
	0x03BABFAC RET
	0x03BABFB0 LDRB W21, [X20 + 0x38]
	0x03BABFB4 MOV X0, X31
	0x03BABFB8 ADD X22, X20, 0x134
	0x03BABFBC ADD X23, X20, 0x140
	0x03BABFC0 ADD X24, X20, 0x14C
	0x03BABFC4 BL 0x3C3C714
	0x03BABFC8 LDR V2, [X20 + 0x30]
	0x03BABFCC MOV V1.16B, V0.16B
	0x03BABFD0 ADD X5, X31, 0x20
	0x03BABFD4 MOV X0, X19
	0x03BABFD8 MOV X1, X22
	0x03BABFDC MOV W2, W21
	0x03BABFE0 MOV X3, X23
	0x03BABFE4 MOV X4, X24
	0x03BABFE8 MOV V0.16B, V8.16B
	0x03BABFEC BL 0x3BAC000
	0x03BABFF0 LDR V0, [X31 + 0x20]
	0x03BABFF4 ADD X19, X31, 0x20
	0x03BABFF8 B 0x3BABF8C
	0x03BABFFC BL 0x1C16F20
	0x03BAC000 STR D10, [X31 - 0x60]!
	0x03BAC004 STP D9, D8, [X31 + 0x8]
	0x03BAC008 STR X30, [X31 + 0x18]
	0x03BAC00C STP X26, X25, [X31 + 0x20]
	0x03BAC010 STP X24, X23, [X31 + 0x30]
	0x03BAC014 STP X22, X21, [X31 + 0x40]
	0x03BAC018 STP X20, X19, [X31 + 0x50]
	0x03BAC01C ADRP X25, 0x836000
	0x03BAC020 ADRP X26, 0x5B0000
	0x03BAC024 LDRB W8, [X25 + 0xC9A]
	0x03BAC028 LDR X26, [X26 + 0xE08]
	0x03BAC02C MOV X19, X5
	0x03BAC030 MOV V8.16B, V2.16B
	0x03BAC034 MOV V9.16B, V1.16B
	0x03BAC038 MOV V10.16B, V0.16B
	0x03BAC03C MOV X20, X4
	0x03BAC040 MOV X21, X3
	0x03BAC044 MOV W23, W2
	0x03BAC048 MOV X22, X1
	0x03BAC04C MOV X24, X0
	0x03BAC050 TBNZ X8, 0x0, 0x3BAC068
	0x03BAC054 ADRP X0, 0x5B0000
	0x03BAC058 LDR X0, [X0 + 0xE08]
	0x03BAC05C BL 0x1C16CF4
	0x03BAC060 MOVZ W8, 0x1
	0x03BAC064 STRB W8, [X25 + 0xC9A]
	0x03BAC068 LDR X0, [X26]
	0x03BAC06C LDR W8, [X0 + 0xE0]
	0x03BAC070 CBNZ W8, 0x3BAC078
	0x03BAC074 BL 0x1C16DFC
	0x03BAC078 AND W2, W23, 0x1
	0x03BAC07C MOV X0, X24
	0x03BAC080 MOV X1, X22
	0x03BAC084 MOV X3, X21
	0x03BAC088 MOV X4, X20
	0x03BAC08C MOV V1.16B, V9.16B
	0x03BAC090 MOV V2.16B, V8.16B
	0x03BAC094 MOV X5, X19
	0x03BAC098 LDP X20, X19, [X31 + 0x50]
	0x03BAC09C LDP X22, X21, [X31 + 0x40]
	0x03BAC0A0 LDP X24, X23, [X31 + 0x30]
	0x03BAC0A4 LDP X26, X25, [X31 + 0x20]
	0x03BAC0A8 LDR X30, [X31 + 0x18]
	0x03BAC0AC LDP D9, D8, [X31 + 0x8]
	0x03BAC0B0 MOV V0.16B, V10.16B
	0x03BAC0B4 LDR V10, [X31], #0x60
	0x03BAC0B8 B 0x3BAC180
	0x03BAC0BC STP D9, D8, [X31 - 0x70]!
	0x03BAC0C0 STR X30, [X31 + 0x10]
	0x03BAC0C4 STP X28, X27, [X31 + 0x20]
	0x03BAC0C8 STP X26, X25, [X31 + 0x30]
	0x03BAC0CC STP X24, X23, [X31 + 0x40]
	0x03BAC0D0 STP X22, X21, [X31 + 0x50]
	0x03BAC0D4 STP X20, X19, [X31 + 0x60]
	0x03BAC0D8 ADRP X27, 0x836000
	0x03BAC0DC ADRP X28, 0x5B0000
	0x03BAC0E0 LDRB W8, [X27 + 0xC9B]
	0x03BAC0E4 LDR X28, [X28 + 0xE10]
	0x03BAC0E8 MOV X19, X7
	0x03BAC0EC MOV X20, X6
	0x03BAC0F0 MOV X21, X5
	0x03BAC0F4 MOV V8.16B, V1.16B
	0x03BAC0F8 MOV V9.16B, V0.16B
	0x03BAC0FC MOV W24, W4
	0x03BAC100 MOV X22, X3
	0x03BAC104 MOV X23, X2
	0x03BAC108 MOV X25, X1
	0x03BAC10C MOV X26, X0
	0x03BAC110 TBNZ X8, 0x0, 0x3BAC128
	0x03BAC114 ADRP X0, 0x5B0000
	0x03BAC118 LDR X0, [X0 + 0xE10]
	0x03BAC11C BL 0x1C16CF4
	0x03BAC120 MOVZ W8, 0x1
	0x03BAC124 STRB W8, [X27 + 0xC9B]
	0x03BAC128 LDR X0, [X28]
	0x03BAC12C LDR W8, [X0 + 0xE0]
	0x03BAC130 CBNZ W8, 0x3BAC138
	0x03BAC134 BL 0x1C16DFC
	0x03BAC138 AND W4, W24, 0x1
	0x03BAC13C MOV X0, X26
	0x03BAC140 MOV X1, X25
	0x03BAC144 MOV X2, X23
	0x03BAC148 MOV X3, X22
	0x03BAC14C MOV X5, X21
	0x03BAC150 MOV X6, X20
	0x03BAC154 MOV X7, X19
	0x03BAC158 LDP X20, X19, [X31 + 0x60]
	0x03BAC15C LDP X22, X21, [X31 + 0x50]
	0x03BAC160 LDP X24, X23, [X31 + 0x40]
	0x03BAC164 LDP X26, X25, [X31 + 0x30]
	0x03BAC168 LDP X28, X27, [X31 + 0x20]
	0x03BAC16C LDR X30, [X31 + 0x10]
	0x03BAC170 MOV V0.16B, V9.16B
	0x03BAC174 MOV V1.16B, V8.16B
	0x03BAC178 LDP D9, D8, [X31], #0x70
	0x03BAC17C B 0x3BAC2C0
	0x03BAC180 STR D10, [X31 - 0x60]!
	0x03BAC184 STP D9, D8, [X31 + 0x8]
	0x03BAC188 STR X30, [X31 + 0x18]
	0x03BAC18C STP X26, X25, [X31 + 0x20]
	0x03BAC190 STP X24, X23, [X31 + 0x30]
	0x03BAC194 STP X22, X21, [X31 + 0x40]
	0x03BAC198 STP X20, X19, [X31 + 0x50]
	0x03BAC19C ADRP X25, 0x836000
	0x03BAC1A0 ADRP X26, 0x56F000
	0x03BAC1A4 LDRB W8, [X25 + 0xCAC]
	0x03BAC1A8 LDR X26, [X26 + 0x848]
	0x03BAC1AC MOV X19, X5
	0x03BAC1B0 MOV V8.16B, V2.16B
	0x03BAC1B4 MOV V9.16B, V1.16B
	0x03BAC1B8 MOV V10.16B, V0.16B
	0x03BAC1BC MOV X20, X4
	0x03BAC1C0 MOV X21, X3
	0x03BAC1C4 MOV W24, W2
	0x03BAC1C8 MOV X22, X1
	0x03BAC1CC MOV X23, X0
	0x03BAC1D0 TBNZ X8, 0x0, 0x3BAC1F4
	0x03BAC1D4 ADRP X0, 0x56F000
	0x03BAC1D8 LDR X0, [X0 + 0x848]
	0x03BAC1DC BL 0x1C16CF4
	0x03BAC1E0 ADRP X0, 0x5B0000
	0x03BAC1E4 LDR X0, [X0 + 0xE08]
	0x03BAC1E8 BL 0x1C16CF4
	0x03BAC1EC MOVZ W8, 0x1
	0x03BAC1F0 STRB W8, [X25 + 0xCAC]
	0x03BAC1F4 LDR X0, [X26]
	0x03BAC1F8 LDR W8, [X0 + 0xE0]
	0x03BAC1FC CBNZ W8, 0x3BAC204
	0x03BAC200 BL 0x1C16DFC
	0x03BAC204 MOV X0, X31
	0x03BAC208 BL 0x36FA670
	0x03BAC20C TBZ X0, 0x0, 0x3BAC278
	0x03BAC210 ADRP X8, 0x5B0000
	0x03BAC214 LDR X8, [X8 + 0xE08]
	0x03BAC218 LDR X0, [X8]
	0x03BAC21C LDR W8, [X0 + 0xE0]
	0x03BAC220 CBNZ W8, 0x3BAC228
	0x03BAC224 BL 0x1C16DFC
	0x03BAC228 BL 0x3BADF8C
	0x03BAC22C CBZ X0, 0x3BAC278
	0x03BAC230 MOV X6, X0
	0x03BAC234 AND W2, W24, 0x1
	0x03BAC238 MOV X0, X23
	0x03BAC23C MOV X1, X22
	0x03BAC240 MOV X3, X21
	0x03BAC244 MOV X4, X20
	0x03BAC248 MOV V1.16B, V9.16B
	0x03BAC24C MOV V2.16B, V8.16B
	0x03BAC250 MOV X5, X19
	0x03BAC254 LDP X20, X19, [X31 + 0x50]
	0x03BAC258 LDP X22, X21, [X31 + 0x40]
	0x03BAC25C LDP X24, X23, [X31 + 0x30]
	0x03BAC260 LDP X26, X25, [X31 + 0x20]
	0x03BAC264 LDR X30, [X31 + 0x18]
	0x03BAC268 LDP D9, D8, [X31 + 0x8]
	0x03BAC26C MOV V0.16B, V10.16B
	0x03BAC270 LDR V10, [X31], #0x60
	0x03BAC274 BR X6
	0x03BAC278 AND W2, W24, 0x1
	0x03BAC27C MOV X0, X23
	0x03BAC280 MOV X1, X22
	0x03BAC284 MOV X3, X21
	0x03BAC288 MOV X4, X20
	0x03BAC28C MOV V1.16B, V9.16B
	0x03BAC290 MOV V2.16B, V8.16B
	0x03BAC294 MOV X5, X19
	0x03BAC298 LDP X20, X19, [X31 + 0x50]
	0x03BAC29C LDP X22, X21, [X31 + 0x40]
	0x03BAC2A0 LDP X24, X23, [X31 + 0x30]
	0x03BAC2A4 LDP X26, X25, [X31 + 0x20]
	0x03BAC2A8 LDR X30, [X31 + 0x18]
	0x03BAC2AC LDP D9, D8, [X31 + 0x8]
	0x03BAC2B0 MOV V0.16B, V10.16B
	0x03BAC2B4 MOV X6, X31
	0x03BAC2B8 LDR V10, [X31], #0x60
	0x03BAC2BC B 0x3BAF53C
	0x03BAC2C0 STP D9, D8, [X31 - 0x70]!
	0x03BAC2C4 STR X30, [X31 + 0x10]
	0x03BAC2C8 STP X28, X27, [X31 + 0x20]
	0x03BAC2CC STP X26, X25, [X31 + 0x30]
	0x03BAC2D0 STP X24, X23, [X31 + 0x40]
	0x03BAC2D4 STP X22, X21, [X31 + 0x50]
	0x03BAC2D8 STP X20, X19, [X31 + 0x60]
	0x03BAC2DC ADRP X27, 0x836000
	0x03BAC2E0 ADRP X28, 0x56F000
	0x03BAC2E4 LDRB W8, [X27 + 0xCB1]
	0x03BAC2E8 LDR X28, [X28 + 0x848]
	0x03BAC2EC MOV X19, X7
	0x03BAC2F0 MOV X20, X6
	0x03BAC2F4 MOV X21, X5
	0x03BAC2F8 MOV V8.16B, V1.16B
	0x03BAC2FC MOV V9.16B, V0.16B
	0x03BAC300 MOV W25, W4
	0x03BAC304 MOV X22, X3
	0x03BAC308 MOV X23, X2
	0x03BAC30C MOV X24, X1
	0x03BAC310 MOV X26, X0
	0x03BAC314 TBNZ X8, 0x0, 0x3BAC338
	0x03BAC318 ADRP X0, 0x56F000
	0x03BAC31C LDR X0, [X0 + 0x848]
	0x03BAC320 BL 0x1C16CF4
	0x03BAC324 ADRP X0, 0x5B0000
	0x03BAC328 LDR X0, [X0 + 0xE10]
	0x03BAC32C BL 0x1C16CF4
	0x03BAC330 MOVZ W8, 0x1
	0x03BAC334 STRB W8, [X27 + 0xCB1]
	0x03BAC338 LDR X0, [X28]
	0x03BAC33C LDR W8, [X0 + 0xE0]
	0x03BAC340 CBNZ W8, 0x3BAC348
	0x03BAC344 BL 0x1C16DFC
	0x03BAC348 MOV X0, X31
	0x03BAC34C BL 0x36FA670
	0x03BAC350 TBZ X0, 0x0, 0x3BAC3C0
	0x03BAC354 ADRP X8, 0x5B0000
	0x03BAC358 LDR X8, [X8 + 0xE10]
	0x03BAC35C LDR X0, [X8]
	0x03BAC360 LDR W8, [X0 + 0xE0]
	0x03BAC364 CBNZ W8, 0x3BAC36C
	0x03BAC368 BL 0x1C16DFC
	0x03BAC36C BL 0x3BAE420
	0x03BAC370 CBZ X0, 0x3BAC3C0
	0x03BAC374 MOV X8, X0
	0x03BAC378 AND W4, W25, 0x1
	0x03BAC37C MOV X0, X26
	0x03BAC380 MOV X1, X24
	0x03BAC384 MOV X2, X23
	0x03BAC388 MOV X3, X22
	0x03BAC38C MOV X5, X21
	0x03BAC390 MOV X6, X20
	0x03BAC394 MOV X7, X19
	0x03BAC398 LDP X20, X19, [X31 + 0x60]
	0x03BAC39C LDP X22, X21, [X31 + 0x50]
	0x03BAC3A0 LDP X24, X23, [X31 + 0x40]
	0x03BAC3A4 LDP X26, X25, [X31 + 0x30]
	0x03BAC3A8 LDP X28, X27, [X31 + 0x20]
	0x03BAC3AC LDR X30, [X31 + 0x10]
	0x03BAC3B0 MOV V0.16B, V9.16B
	0x03BAC3B4 MOV V1.16B, V8.16B
	0x03BAC3B8 LDP D9, D8, [X31], #0x70
	0x03BAC3BC BR X8
	0x03BAC3C0 AND W4, W25, 0x1
	0x03BAC3C4 MOV X0, X26
	0x03BAC3C8 MOV X1, X24
	0x03BAC3CC MOV X2, X23
	0x03BAC3D0 MOV X3, X22
	0x03BAC3D4 MOV X5, X21
	0x03BAC3D8 MOV X6, X20
	0x03BAC3DC MOV X7, X19
	0x03BAC3E0 LDP X20, X19, [X31 + 0x60]
	0x03BAC3E4 LDP X22, X21, [X31 + 0x50]
	0x03BAC3E8 LDP X24, X23, [X31 + 0x40]
	0x03BAC3EC LDP X26, X25, [X31 + 0x30]
	0x03BAC3F0 LDP X28, X27, [X31 + 0x20]
	0x03BAC3F4 LDR X30, [X31 + 0x10]
	0x03BAC3F8 STR X31, [X31 + 0x70]
	0x03BAC3FC MOV V0.16B, V9.16B
	0x03BAC400 MOV V1.16B, V8.16B
	0x03BAC404 LDP D9, D8, [X31], #0x70
	0x03BAC408 B 0x3BAF768
	0x03BAC40C ADRP X8, 0xFFFFFFFFFCF42000
	0x03BAC410 LDR V0, [X8 + 0x598]
	0x03BAC414 ADRP X8, 0xFFFFFFFFFCF41000
	0x03BAC418 ADRP X9, 0xFFFFFFFFFCF42000
	0x03BAC41C LDR V1, [X8 + 0xFD8]
	0x03BAC420 STR D0, [X0 + 0x20]
	0x03BAC424 LDR V0, [X9 + 0x4E8]
	0x03BAC428 MOVZ W8, 0x1
	0x03BAC42C MOVZ W9, 0x3E800000
	0x03BAC430 MOV X1, X31
	0x03BAC434 STR D1, [X0 + 0x30]
	0x03BAC438 STR W8, [X0 + 0x28]
	0x03BAC43C STRB W8, [X0 + 0x2C]
	0x03BAC440 STRB W8, [X0 + 0x38]
	0x03BAC444 STUR D0, [X0 + 0x3C]
	0x03BAC448 STR W9, [X0 + 0x44]
	0x03BAC44C B 0x3C36C30
	0x03BAC450 SUB X31, X31, 0x60
	0x03BAC454 STP D15, D14, [X31 + 0x10]
	0x03BAC458 STP D13, D12, [X31 + 0x20]
	0x03BAC45C STP D11, D10, [X31 + 0x30]
	0x03BAC460 STP D9, D8, [X31 + 0x40]
	0x03BAC464 STP X30, X19, [X31 + 0x50]
	0x03BAC468 LDP S4, S5, [X5]
	0x03BAC46C LDR V6, [X5 + 0x8]
	0x03BAC470 LDP S7, S16, [X3]
	0x03BAC474 LDR V17, [X3 + 0x8]
	0x03BAC478 LDP S0, S1, [X1]
	0x03BAC47C LDP S2, S3, [X1 + 0x8]
	0x03BAC480 LDP S19, S20, [X6]
	0x03BAC484 LDR V21, [X6 + 0x8]
	0x03BAC488 LDP S18, S22, [X7]
	0x03BAC48C LDR V23, [X7 + 0x8]
	0x03BAC490 FMUL S5, S5, S16
	0x03BAC494 FMUL S6, S6, S17
	0x03BAC498 FMUL S4, S4, S7
	0x03BAC49C FMUL S8, S6, S1
	0x03BAC4A0 FMUL S11, S5, S2
	0x03BAC4A4 FMUL S7, S7, S19
	0x03BAC4A8 FMUL S16, S16, S20
	0x03BAC4AC FMUL S17, S17, S21
	0x03BAC4B0 FMUL S19, S0, S22
	0x03BAC4B4 FMUL S20, S1, S23
	0x03BAC4B8 FMUL S21, S2, S18
	0x03BAC4BC FMUL S28, S1, S18
	0x03BAC4C0 FMUL S29, S2, S22
	0x03BAC4C4 FMUL S30, S0, S23
	0x03BAC4C8 FMUL S31, S5, S0
	0x03BAC4CC FMUL S9, S4, S2
	0x03BAC4D0 FMUL S10, S4, S1
	0x03BAC4D4 FMUL S12, S0, S6
	0x03BAC4D8 FSUB S8, S8, S11
	0x03BAC4DC LDP S24, S25, [X2]
	0x03BAC4E0 LDP S26, S27, [X2 + 0x8]
	0x03BAC4E4 FSUB S19, S19, S28
	0x03BAC4E8 FSUB S20, S20, S29
	0x03BAC4EC FSUB S21, S21, S30
	0x03BAC4F0 FSUB S31, S31, S10
	0x03BAC4F4 FSUB S9, S9, S12
	0x03BAC4F8 FADD S8, S8, S8
	0x03BAC4FC STR S18, [X31 + 0x4]
	0x03BAC500 FADD S20, S20, S20
	0x03BAC504 FADD S21, S21, S21
	0x03BAC508 FADD S19, S19, S19
	0x03BAC50C FADD S9, S9, S9
	0x03BAC510 FADD S31, S31, S31
	0x03BAC514 FMUL S18, S3, S8
	0x03BAC518 FMUL S10, S3, S20
	0x03BAC51C FMUL S11, S3, S21
	0x03BAC520 FMUL S12, S3, S19
	0x03BAC524 STR S18, [X31]
	0x03BAC528 FMUL S18, S3, S9
	0x03BAC52C FMUL S3, S3, S31
	0x03BAC530 STP S18, S3, [X31 + 0x8]
	0x03BAC534 LDR V18, [X31 + 0x4]
	0x03BAC538 FMUL S28, S16, S24
	0x03BAC53C FMUL S29, S17, S25
	0x03BAC540 FMUL S30, S7, S26
	0x03BAC544 FMUL S13, S7, S25
	0x03BAC548 FMUL S14, S16, S26
	0x03BAC54C FMUL S15, S17, S24
	0x03BAC550 FSUB S28, S28, S13
	0x03BAC554 FSUB S29, S29, S14
	0x03BAC558 FSUB S30, S30, S15
	0x03BAC55C FMUL S13, S0, S21
	0x03BAC560 FMUL S14, S1, S19
	0x03BAC564 FMUL S15, S2, S20
	0x03BAC568 FMUL S20, S1, S20
	0x03BAC56C FMUL S21, S2, S21
	0x03BAC570 FMUL S19, S0, S19
	0x03BAC574 FADD S29, S29, S29
	0x03BAC578 FADD S30, S30, S30
	0x03BAC57C FADD S28, S28, S28
	0x03BAC580 FMUL S3, S0, S9
	0x03BAC584 FMUL S9, S2, S9
	0x03BAC588 FMUL S2, S2, S8
	0x03BAC58C FMUL S8, S1, S8
	0x03BAC590 FMUL S1, S1, S31
	0x03BAC594 FMUL S0, S0, S31
	0x03BAC598 FADD S18, S18, S10
	0x03BAC59C FADD S22, S22, S11
	0x03BAC5A0 FADD S23, S23, S12
	0x03BAC5A4 FSUB S20, S13, S20
	0x03BAC5A8 FSUB S21, S14, S21
	0x03BAC5AC FSUB S19, S15, S19
	0x03BAC5B0 FMUL S31, S27, S29
	0x03BAC5B4 FMUL S10, S27, S30
	0x03BAC5B8 FMUL S11, S24, S30
	0x03BAC5BC FMUL S30, S26, S30
	0x03BAC5C0 FMUL S26, S26, S29
	0x03BAC5C4 FMUL S29, S25, S29
	0x03BAC5C8 FMUL S25, S25, S28
	0x03BAC5CC FMUL S24, S24, S28
	0x03BAC5D0 FSUB S0, S2, S0
	0x03BAC5D4 FADD S2, S18, S21
	0x03BAC5D8 FADD S18, S22, S19
	0x03BAC5DC FADD S19, S23, S20
	0x03BAC5E0 FSUB S21, S25, S30
	0x03BAC5E4 LDR V22, [X31]
	0x03BAC5E8 FSUB S23, S26, S24
	0x03BAC5EC LDP S25, S26, [X31 + 0x8]
	0x03BAC5F0 FSUB S1, S1, S9
	0x03BAC5F4 FADD S22, S4, S22
	0x03BAC5F8 FADD S1, S22, S1
	0x03BAC5FC FADD S25, S5, S25
	0x03BAC600 LDP S22, S24, [X0]
	0x03BAC604 FADD S0, S25, S0
	0x03BAC608 LDR V25, [X0 + 0x8]
	0x03BAC60C FMUL S27, S27, S28
	0x03BAC610 FSUB S3, S3, S8
	0x03BAC614 FADD S26, S6, S26
	0x03BAC618 FADD S7, S7, S31
	0x03BAC61C FADD S16, S16, S10
	0x03BAC620 FADD S17, S17, S27
	0x03BAC624 FSUB S20, S11, S29
	0x03BAC628 ANDS W31, W4, 0x1
	0x03BAC62C FADD S3, S26, S3
	0x03BAC630 LDR X19, [X31 + 0x60]
	0x03BAC634 FADD S7, S7, S21
	0x03BAC638 FADD S16, S16, S23
	0x03BAC63C FADD S17, S17, S20
	0x03BAC640 FCSEL S3, S3, S6, NE
	0x03BAC644 FCSEL S0, S0, S5, NE
	0x03BAC648 FCSEL S1, S1, S4, NE
	0x03BAC64C FSUB S2, S2, S7
	0x03BAC650 FSUB S4, S18, S16
	0x03BAC654 FSUB S5, S19, S17
	0x03BAC658 FADD S1, S22, S1
	0x03BAC65C FADD S6, S24, S0
	0x03BAC660 FADD S3, S25, S3
	0x03BAC664 FADD S0, S1, S2
	0x03BAC668 FADD S1, S6, S4
	0x03BAC66C FADD S2, S3, S5
	0x03BAC670 MOV X0, X31
	0x03BAC674 BL 0x3887BE0
	0x03BAC678 STP S0, S1, [X19]
	0x03BAC67C STR S2, [X19 + 0x8]
	0x03BAC680 LDP X30, X19, [X31 + 0x50]
	0x03BAC684 LDP D9, D8, [X31 + 0x40]
	0x03BAC688 LDP D11, D10, [X31 + 0x30]
	0x03BAC68C LDP D13, D12, [X31 + 0x20]
	0x03BAC690 LDP D15, D14, [X31 + 0x10]
	0x03BAC694 ADD X31, X31, 0x60
	0x03BAC698 RET
	0x03BAC69C SUB X31, X31, 0x120
	0x03BAC6A0 STP D15, D14, [X31 + 0x80]
	0x03BAC6A4 STP D13, D12, [X31 + 0x90]
	0x03BAC6A8 STP D11, D10, [X31 + 0xA0]
	0x03BAC6AC STP D9, D8, [X31 + 0xB0]
	0x03BAC6B0 STR X29, [X31 + 0xC0]
	0x03BAC6B4 STP X30, X27, [X31 + 0xD0]
	0x03BAC6B8 STP X26, X25, [X31 + 0xE0]
	0x03BAC6BC STP X24, X23, [X31 + 0xF0]
	0x03BAC6C0 STP X22, X21, [X31 + 0x100]
	0x03BAC6C4 STP X20, X19, [X31 + 0x110]
	0x03BAC6C8 ADRP X27, 0x836000
	0x03BAC6CC ADRP X26, 0x572000
	0x03BAC6D0 LDRB W8, [X27 + 0xC9C]
	0x03BAC6D4 LDR X26, [X26 + 0x838]
	0x03BAC6D8 MOV X19, X6
	0x03BAC6DC MOV W20, W5
	0x03BAC6E0 MOV W21, W4
	0x03BAC6E4 MOV W22, W3
	0x03BAC6E8 MOV W23, W2
	0x03BAC6EC MOV X24, X1
	0x03BAC6F0 MOV X25, X0
	0x03BAC6F4 TBNZ X8, 0x0, 0x3BAC70C
	0x03BAC6F8 ADRP X0, 0x572000
	0x03BAC6FC LDR X0, [X0 + 0x838]
	0x03BAC700 BL 0x1C16CF4
	0x03BAC704 MOVZ W8, 0x1
	0x03BAC708 STRB W8, [X27 + 0xC9C]
	0x03BAC70C LDR X8, [X26]
	0x03BAC710 STR W31, [X31 + 0x78]
	0x03BAC714 STR X31, [X31 + 0x70]
	0x03BAC718 STR W31, [X31 + 0x68]
	0x03BAC71C STR X31, [X31 + 0x60]
	0x03BAC720 STR W31, [X31 + 0x58]
	0x03BAC724 STR X31, [X31 + 0x50]
	0x03BAC728 STR W31, [X31 + 0x48]
	0x03BAC72C STR X31, [X31 + 0x40]
	0x03BAC730 STR W31, [X31 + 0x38]
	0x03BAC734 STR X31, [X31 + 0x30]
	0x03BAC738 ADRP X9, 0xFFFFFFFFFCF42000
	0x03BAC73C LDR X8, [X8 + 0xB8]
	0x03BAC740 LDR V0, [X9]
	0x03BAC744 MOV X0, X31
	0x03BAC748 LDP S14, S9, [X8]
	0x03BAC74C LDR V11, [X8 + 0x8]
	0x03BAC750 STR D0, [X31 + 0x70]
	0x03BAC754 STR W31, [X31 + 0x78]
	0x03BAC758 LDR V0, [X25]
	0x03BAC75C LDR V2, [X24]
	0x03BAC760 LDR V1, [X25 + 0x8]
	0x03BAC764 LDR V3, [X24 + 0x8]
	0x03BAC768 FSUB V0.2S, V0.2S, V2.2S
	0x03BAC76C FSUB S2, S1, S3
	0x03BAC770 MOV S1, V0.S[1]
	0x03BAC774 BL 0x3887BE4
	0x03BAC778 LDR X8, [X26]
	0x03BAC77C STP S0, S1, [X31 + 0x60]
	0x03BAC780 STR S2, [X31 + 0x68]
	0x03BAC784 MOV V10.16B, V0.16B
	0x03BAC788 LDR X8, [X8 + 0xB8]
	0x03BAC78C MOV V12.16B, V1.16B
	0x03BAC790 MOV V13.16B, V2.16B
	0x03BAC794 MOV X0, X31
	0x03BAC798 LDR X9, [X8]
	0x03BAC79C LDR W8, [X8 + 0x8]
	0x03BAC7A0 STR X9, [X31 + 0x50]
	0x03BAC7A4 STR W8, [X31 + 0x58]
	0x03BAC7A8 LDP S0, S1, [X24]
	0x03BAC7AC LDR V2, [X24 + 0x8]
	0x03BAC7B0 BL 0x3887BE4
	0x03BAC7B4 LDP S4, S3, [X24 + 0x14]
	0x03BAC7B8 STP S1, S0, [X31 + 0xC8]
	0x03BAC7BC LDP S0, S1, [X24 + 0xC]
	0x03BAC7C0 STR S2, [X31 + 0x2C]
	0x03BAC7C4 MOV V2.16B, V4.16B
	0x03BAC7C8 MOV X0, X31
	0x03BAC7CC BL 0x38BD218
	0x03BAC7D0 MOV V15.16B, V1.16B
	0x03BAC7D4 MOV V8.16B, V2.16B
	0x03BAC7D8 MOV V23.16B, V3.16B
	0x03BAC7DC CBZ W23, 0x3BAC894
	0x03BAC7E0 CMP W23, 0x1
	0x03BAC7E4 B.EQ 0x3BACAE0
	0x03BAC7E8 LDP S18, S17, [X31 + 0xC8]
	0x03BAC7EC LDR V19, [X31 + 0x2C]
	0x03BAC7F0 CMP W23, 0x2
	0x03BAC7F4 B.NE 0x3BACDFC
	0x03BAC7F8 MOV V0.16B, V11.16B
	0x03BAC7FC MOV V2.16B, V9.16B
	0x03BAC800 MOV V1.16B, V14.16B
	0x03BAC804 TBZ X22, 0x0, 0x3BAC824
	0x03BAC808 FMOV S0, W31
	0x03BAC80C FMUL S1, S12, S0
	0x03BAC810 FADD S1, S10, S1
	0x03BAC814 FMUL S2, S13, S0
	0x03BAC818 FADD S1, S2, S1
	0x03BAC81C FMUL S0, S1, S0
	0x03BAC820 MOV V2.16B, V0.16B
	0x03BAC824 MOV V3.16B, V11.16B
	0x03BAC828 MOV V4.16B, V9.16B
	0x03BAC82C MOV V5.16B, V14.16B
	0x03BAC830 TBZ X21, 0x0, 0x3BAC850
	0x03BAC834 FMOV S3, W31
	0x03BAC838 FMUL S4, S10, S3
	0x03BAC83C FADD S4, S4, S12
	0x03BAC840 FMUL S5, S13, S3
	0x03BAC844 FADD S4, S5, S4
	0x03BAC848 FMUL S3, S4, S3
	0x03BAC84C MOV V5.16B, V3.16B
	0x03BAC850 TBZ X20, 0x0, 0x3BAC870
	0x03BAC854 FMOV S6, W31
	0x03BAC858 FMUL S7, S10, S6
	0x03BAC85C FMUL S16, S12, S6
	0x03BAC860 FADD S7, S7, S16
	0x03BAC864 FADD S11, S13, S7
	0x03BAC868 FMUL S9, S11, S6
	0x03BAC86C MOV V14.16B, V9.16B
	0x03BAC870 FADD S1, S1, S5
	0x03BAC874 FADD S2, S2, S4
	0x03BAC878 FADD S0, S0, S3
	0x03BAC87C FADD S1, S1, S14
	0x03BAC880 FADD S2, S2, S9
	0x03BAC884 FADD S0, S0, S11
	0x03BAC888 STP S1, S2, [X31 + 0x50]
	0x03BAC88C STR S0, [X31 + 0x58]
	0x03BAC890 B 0x3BACDFC
	0x03BAC894 MOV V28.16B, V11.16B
	0x03BAC898 MOV V1.16B, V9.16B
	0x03BAC89C MOV V2.16B, V14.16B
	0x03BAC8A0 TBZ X22, 0x0, 0x3BAC950
	0x03BAC8A4 FMOV S17, W31
	0x03BAC8A8 FMUL S2, S0, S17
	0x03BAC8AC FMUL S3, S15, S17
	0x03BAC8B0 FMUL S4, S8, S17
	0x03BAC8B4 FSUB S5, S2, S15
	0x03BAC8B8 FSUB S3, S3, S4
	0x03BAC8BC FSUB S2, S8, S2
	0x03BAC8C0 FADD S3, S3, S3
	0x03BAC8C4 FADD S2, S2, S2
	0x03BAC8C8 FADD S4, S5, S5
	0x03BAC8CC FMOV S1, 1
	0x03BAC8D0 FMUL S5, S23, S3
	0x03BAC8D4 FMUL S6, S23, S2
	0x03BAC8D8 FMUL S7, S23, S4
	0x03BAC8DC FMUL S16, S0, S2
	0x03BAC8E0 FADD S1, S5, S1
	0x03BAC8E4 FMUL S5, S15, S4
	0x03BAC8E8 FADD S6, S6, S17
	0x03BAC8EC FADD S17, S7, S17
	0x03BAC8F0 FMUL S7, S8, S3
	0x03BAC8F4 FMUL S2, S8, S2
	0x03BAC8F8 FMUL S4, S0, S4
	0x03BAC8FC FMUL S3, S15, S3
	0x03BAC900 FSUB S2, S5, S2
	0x03BAC904 FSUB S4, S7, S4
	0x03BAC908 FSUB S3, S16, S3
	0x03BAC90C FADD S1, S1, S2
	0x03BAC910 FADD S4, S6, S4
	0x03BAC914 FADD S17, S17, S3
	0x03BAC918 FMUL S2, S1, S10
	0x03BAC91C FMUL S3, S4, S12

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X26
	012 Move [X31+104], X25
	013 Move [X31+112], X24
	014 Move [X31+120], X23
	015 Move [X31+128], X22
	016 Move [X31+136], X21
	017 Move [X31+144], X20
	018 Move [X31+152], X19
	019 Move X22, 0x838000
	020 Move W8, [X22+3222]
	021 Move X19, X4
	022 Move X20, X3
	023 Move X24, X2
	024 Move X23, X1
	025 Move X21, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {41}
	030 Move X0, 0x5B0000
	031 Move X0, [X0+760]
	032 Call 0x1C17CF4
	033 Move X0, 0x5B0000
	034 Move X0, [X0+360]
	035 Call 0x1C17CF4
	036 Move X0, 0x5B0000
	037 Move X0, [X0+368]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X22+3222], W8
	041 Compare X23, 0
	042 JumpIfEqual {720}
	043 Move X0, X23
	044 Move X1, X31
	045 Call XRBaseInteractable.get_interactorsSelecting, X0
	046 Compare X0, 0
	047 JumpIfEqual {720}
	048 Move W8, [X0+24]
	049 Move X25, 0x5B0000
	050 Move X26, 0x5B0000
	051 Move X25, [X25+368]
	052 Move X26, [X26+760]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move W8, [X21+40]
	055 Compare W8, 0
	056 JumpIfEqual {102}
	057 Move X0, X23
	058 Move X1, X31
	059 Call XRBaseInteractable.get_interactorsSelecting, X0
	060 Compare X0, 0
	061 JumpIfEqual {720}
	062 Move W8, [X0+24]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move W8, [X21+204]
	065 NotImplemented "Instruction LDUR not yet implemented."
	066 Move X21, 0x82E000
	067 Move [X24+8], W8
	068 Move [X24], X9
	069 Move W8, [X21+1923]
	070 Compare W8, 0
	071 JumpIfNotEqual {77}
	072 Move X0, 0x549000
	073 Move X0, [X0+1440]
	074 Call 0x1C17CF4
	075 Move W8, 1
	076 Move [X21+1923], W8
	077 Move X8, 0x549000
	078 Move X8, [X8+1440]
	079 Move X8, [X8]
	080 Move X8, [X8+184]
	081 Move V0, [X8]
	082 Move V1, [X8+8]
	083 Move [X20], D0
	084 Move [X20+8], S1
	085 Move X20, 0x82E000
	086 Move W8, [X20+1939]
	087 Compare W8, 0
	088 JumpIfNotEqual {94}
	089 Move X0, 0x54A000
	090 Move X0, [X0+1448]
	091 Call 0x1C17CF4
	092 Move W8, 1
	093 Move [X20+1939], W8
	094 Move X8, 0x54A000
	095 Move X8, [X8+1448]
	096 Move X8, [X8]
	097 Move X8, [X8+184]
	098 Move S8, [X8]
	099 Move S9, [X8+4]
	100 Move S10, [X8+8]
	101 Move S11, [X8+12]
	102 Move W8, [X21+204]
	103 NotImplemented "Instruction LDUR not yet implemented."
	104 Move X0, X23
	105 Move X1, X31
	106 Move [X24+8], W8
	107 Move [X24], X9
	108 Call XRBaseInteractable.get_interactorsSelecting, X0
	109 Compare X0, 0
	110 JumpIfEqual {720}
	111 Move X2, [X25]
	112 Move W1, W31
	113 Call List`1<Object>.get_Item, X0, X1
	114 Compare X0, 0
	115 JumpIfEqual {720}
	116 Move X8, [X0]
	117 Move X1, [X26]
	118 Move X21, X0
	119 NotImplemented "Instruction LDRH not yet implemented."
	120 Compare X9, 0
	121 JumpIfEqual {128}
	122 Move X10, [X8+176]
	123 Add X10, X10, 8
	124 NotImplemented "Instruction LDUR not yet implemented."
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Subtract X9, X9, 1
	127 Add X10, X10, 16
	128 Move W2, 6
	129 Move X0, X21
	130 Call 0x1C5D788
	131 Move W9, [X10]
	132 Add W9, W9, 6
	133 Add X8, X8, W9
	134 Add X0, X8, 312
	135 Move X8, [X0]
	136 Move X2, [X0+8]
	137 Move X0, X21
	138 Move X1, X23
	139 NotImplemented "Instruction BLR not yet implemented."
	140 Compare X0, 0
	141 JumpIfEqual {720}
	142 Move X1, X31
	143 Move X21, X0
	144 Call Transform.get_position, X0
	145 Move X0, X21
	146 Move X1, X31
	147 Move [X20], S0
	148 Move [X20+8], S1
	149 Move [X20+8], S2
	150 Call Transform.get_rotation, X0
	151 Move V8, V0
	152 Move V9, V1
	153 Move V10, V2
	154 Move V11, V3
	155 Move [X19], S8
	156 Move [X19+8], S9
	157 Move [X19+8], S10
	158 Move [X19+16], S11
	159 Move X20, [X31+144]
	160 Move X19, [X31+152]
	161 Move X22, [X31+128]
	162 Move X21, [X31+136]
	163 Move X24, [X31+112]
	164 Move X23, [X31+120]
	165 Move X26, [X31+96]
	166 Move X25, [X31+104]
	167 Move X30, [X31+80]
	168 Move D9, [X31+64]
	169 Move D8, [X31+72]
	170 Move D11, [X31+48]
	171 Move D10, [X31+56]
	172 Move D13, [X31+32]
	173 Move D12, [X31+40]
	174 Move D15, [X31+16]
	175 Move D14, [X31+24]
	176 Add X31, X31, 160
	177 Return 
	178 Move X0, X23
	179 Move X1, X31
	180 Call XRBaseInteractable.get_interactorsSelecting, X0
	181 Compare X0, 0
	182 JumpIfEqual {720}
	183 Move X2, [X25]
	184 Move W1, W31
	185 Call List`1<Object>.get_Item, X0, X1
	186 Move X22, X0
	187 Move X0, X23
	188 Move X1, X31
	189 Call XRBaseInteractable.get_interactorsSelecting, X0
	190 Compare X0, 0
	191 JumpIfEqual {720}
	192 Move X2, [X25]
	193 Move W1, 1
	194 Call List`1<Object>.get_Item, X0, X1
	195 Compare X22, 0
	196 JumpIfEqual {720}
	197 Move X8, [X22]
	198 Move X1, [X26]
	199 Move X25, X0
	200 NotImplemented "Instruction LDRH not yet implemented."
	201 Compare X9, 0
	202 JumpIfEqual {209}
	203 Move X10, [X8+176]
	204 Add X10, X10, 8
	205 NotImplemented "Instruction LDUR not yet implemented."
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Subtract X9, X9, 1
	208 Add X10, X10, 16
	209 Move W2, 6
	210 Move X0, X22
	211 Call 0x1C5D788
	212 Move W9, [X10]
	213 Add W9, W9, 6
	214 Add X8, X8, W9
	215 Add X0, X8, 312
	216 Move X8, [X0]
	217 Move X2, [X0+8]
	218 Move X0, X22
	219 Move X1, X23
	220 NotImplemented "Instruction BLR not yet implemented."
	221 Compare X25, 0
	222 JumpIfEqual {720}
	223 Move X8, [X25]
	224 Move X1, [X26]
	225 Move X22, X0
	226 NotImplemented "Instruction LDRH not yet implemented."
	227 Compare X9, 0
	228 JumpIfEqual {235}
	229 Move X10, [X8+176]
	230 Add X10, X10, 8
	231 NotImplemented "Instruction LDUR not yet implemented."
	232 NotImplemented "Instruction CMP not yet implemented."
	233 Subtract X9, X9, 1
	234 Add X10, X10, 16
	235 Move W2, 6
	236 Move X0, X25
	237 Call 0x1C5D788
	238 Move W9, [X10]
	239 Add W9, W9, 6
	240 Add X8, X8, W9
	241 Add X0, X8, 312
	242 Move X8, [X0]
	243 Move X2, [X0+8]
	244 Move X0, X25
	245 Move X1, X23
	246 NotImplemented "Instruction BLR not yet implemented."
	247 Compare X0, 0
	248 JumpIfEqual {720}
	249 Move X1, X31
	250 Move X23, X0
	251 Call Transform.get_position, X0
	252 Compare X22, 0
	253 JumpIfEqual {720}
	254 Move X0, X22
	255 Move X1, X31
	256 Call Transform.InverseTransformPoint, X0, X1
	257 Move [X24], S0
	258 Move [X24+8], S1
	259 Move [X24+8], S2
	260 Move W8, [X21+40]
	261 NotImplemented "Instruction CMP not yet implemented."
	262 NotImplemented "Instruction CMP not yet implemented."
	263 Move X23, 0x82D000
	264 Move W8, [X23+1925]
	265 Move V8, V0
	266 Move V9, V1
	267 Move V10, V2
	268 Compare W8, 0
	269 JumpIfNotEqual {275}
	270 Move X0, 0x548000
	271 Move X0, [X0+1448]
	272 Call 0x1C17CF4
	273 Move W8, 1
	274 Move [X23+1925], W8
	275 Move X8, 0x548000
	276 Move X8, [X8+1448]
	277 Move X0, [X8]
	278 Move W8, [X0+224]
	279 Compare W8, 0
	280 JumpIfNotEqual {282}
	281 Call 0x1C17DFC
	282 Multiply S0, S8, S8
	283 Multiply S1, S9, S9
	284 Move X8, -51122176
	285 Add S0, S0, S1
	286 Move V1, [X8+380]
	287 Move X23, 0x548000
	288 Multiply S2, S10, S10
	289 Move X23, [X23+1440]
	290 Add S0, S2, S0
	291 NotImplemented "Instruction FSQRT not yet implemented."
	292 NotImplemented "Instruction FCMP not yet implemented."
	293 NotImplemented "Instruction FDIV not yet implemented."
	294 NotImplemented "Instruction FDIV not yet implemented."
	295 NotImplemented "Instruction FDIV not yet implemented."
	296 Move X0, X23
	297 Move X1, X31
	298 Call Transform.get_position, X0
	299 Move X0, X22
	300 Move X1, X31
	301 Move V8, V0
	302 Move V9, V1
	303 Move V10, V2
	304 Call Transform.get_position, X0
	305 Move X24, 0x82D000
	306 Move W8, [X24+1925]
	307 Move V11, V0
	308 Move V12, V1
	309 Move V13, V2
	310 Compare W8, 0
	311 JumpIfNotEqual {317}
	312 Move X0, 0x548000
	313 Move X0, [X0+1448]
	314 Call 0x1C17CF4
	315 Move W8, 1
	316 Move [X24+1925], W8
	317 Move X24, 0x548000
	318 Move X24, [X24+1448]
	319 Subtract S11, S8, S11
	320 Subtract S9, S9, S12
	321 Subtract S8, S10, S13
	322 Move X0, [X24]
	323 Move W8, [X0+224]
	324 Compare W8, 0
	325 JumpIfNotEqual {327}
	326 Call 0x1C17DFC
	327 Multiply S0, S11, S11
	328 Multiply S1, S9, S9
	329 Move X8, -51122176
	330 Add S0, S0, S1
	331 Move V1, [X8+380]
	332 Multiply S2, S8, S8
	333 Add S0, S2, S0
	334 NotImplemented "Instruction FSQRT not yet implemented."
	335 NotImplemented "Instruction FCMP not yet implemented."
	336 NotImplemented "Instruction FDIV not yet implemented."
	337 NotImplemented "Instruction FDIV not yet implemented."
	338 NotImplemented "Instruction FDIV not yet implemented."
	339 Move X0, X22
	340 Move X1, X31
	341 Call Transform.get_rotation, X0
	342 Move V8, V0
	343 Move V9, V1
	344 Move V10, V2
	345 Move V11, V3
	346 Move X24, 0x82D000
	347 Move W8, [X24+1923]
	348 Compare W8, 0
	349 JumpIfNotEqual {355}
	350 Move X0, 0x548000
	351 Move X0, [X0+1440]
	352 Call 0x1C17CF4
	353 Move W8, 1
	354 Move [X24+1923], W8
	355 Move X8, [X23]
	356 Move X8, [X8+184]
	357 Move S8, [X8]
	358 Move S9, [X8+4]
	359 Move V10, [X8+8]
	360 Move X24, 0x82D000
	361 Move S11, [X21+252]
	362 Move S12, [X21+256]
	363 Move V13, [X21+260]
	364 Move W8, [X24+1926]
	365 Move V14, [X21+264]
	366 Compare W8, 0
	367 JumpIfNotEqual {373}
	368 Move X0, 0x548000
	369 Move X0, [X0+1440]
	370 Call 0x1C17CF4
	371 Move W8, 1
	372 Move [X24+1926], W8
	373 Move X8, [X23]
	374 Move V0, V11
	375 Move V1, V12
	376 Move V2, V13
	377 Move X8, [X8+184]
	378 Move V3, V14
	379 Move X0, X31
	380 Move S4, [X8+24]
	381 Move S5, [X8+28]
	382 Move V6, [X8+32]
	383 Call Quaternion.op_Multiply, X0, X1
	384 Move V3, V0
	385 Move V4, V1
	386 Move V5, V2
	387 Move V0, V8
	388 Move V1, V9
	389 Move V2, V10
	390 Move X0, X31
	391 Call Quaternion.LookRotation, X0, X1
	392 Move S4, [X21+236]
	393 Move S7, [X21+240]
	394 Move S5, [X21+244]
	395 Move S6, [X21+248]
	396 Move [X21+252], S0
	397 Move [X21+260], S1
	398 Move [X21+264], S3
	399 Multiply S16, S3, S4
	400 Multiply S17, S0, S6
	401 Multiply S18, S1, S5
	402 Multiply S19, S2, S7
	403 Multiply S20, S3, S7
	404 Multiply S21, S1, S6
	405 Multiply S22, S2, S4
	406 Multiply S23, S0, S5
	407 Multiply S24, S0, S7
	408 Multiply S0, S0, S4
	409 Multiply S4, S1, S4
	410 Multiply S1, S1, S7
	411 Multiply S7, S3, S5
	412 Multiply S3, S3, S6
	413 Multiply S6, S2, S6
	414 Move [X21+260], S2
	415 Multiply S2, S2, S5
	416 Add S5, S16, S17
	417 Add S16, S20, S21
	418 Add S6, S7, S6
	419 Subtract S0, S3, S0
	420 Add S3, S18, S5
	421 Add S5, S22, S16
	422 Add S6, S24, S6
	423 Subtract S0, S0, S1
	424 Move X0, X22
	425 Move X1, X31
	426 Subtract S8, S3, S19
	427 Subtract S9, S5, S23
	428 Subtract S10, S6, S4
	429 Subtract S11, S0, S2
	430 Call Transform.get_rotation, X0
	431 Multiply S4, S3, S8
	432 Multiply S5, S0, S11
	433 Multiply S16, S3, S9
	434 Multiply S17, S1, S11
	435 Multiply S19, S0, S10
	436 Multiply S20, S0, S9
	437 Multiply S0, S0, S8
	438 Multiply S22, S3, S10
	439 Multiply S3, S3, S11
	440 Multiply S23, S2, S11
	441 Multiply S6, S1, S10
	442 Multiply S18, S2, S8
	443 Multiply S21, S1, S8
	444 Multiply S1, S1, S9
	445 Add S4, S4, S5
	446 Add S5, S16, S17
	447 Add S16, S22, S23
	448 Subtract S0, S3, S0
	449 Multiply S7, S2, S9
	450 Multiply S2, S2, S10
	451 Add S3, S6, S4
	452 Add S4, S18, S5
	453 Add S5, S20, S16
	454 Subtract S0, S0, S1
	455 Subtract S8, S3, S7
	456 Subtract S9, S4, S19
	457 Subtract S10, S5, S21
	458 Subtract S11, S0, S2
	459 Move X25, 0x82D000
	460 Move W8, [X25+1923]
	461 Compare W8, 0
	462 JumpIfNotEqual {468}
	463 Move X0, 0x548000
	464 Move X0, [X0+1440]
	465 Call 0x1C17CF4
	466 Move W8, 1
	467 Move [X25+1923], W8
	468 Move X8, 0x548000
	469 Move X8, [X8+1440]
	470 Move X8, [X8]
	471 Move X8, [X8+184]
	472 Move S10, [X8]
	473 Move S9, [X8+4]
	474 Move V0, [X8+8]
	475 Move X0, X22
	476 Move X1, X31
	477 Move [X31+92], S0
	478 Call Transform.get_right, X0
	479 Move X0, X23
	480 Move X1, X31
	481 Move V11, V0
	482 Move V12, V1
	483 Move V13, V2
	484 Call Transform.get_right, X0
	485 Move V3, V0
	486 Move V4, V1
	487 Move V5, V2
	488 Move S6, 0.5
	489 Move V0, V11
	490 Move V1, V12
	491 Move V2, V13
	492 Move X0, X31
	493 Call Vector3.Slerp, X0, X1, V0
	494 Move X0, X22
	495 Move X1, X31
	496 Move V14, V0
	497 Move V15, V1
	498 Move V11, V2
	499 Call Transform.get_up, X0
	500 Move X0, X23
	501 Move X1, X31
	502 Move V12, V0
	503 Move V13, V1
	504 Move V8, V2
	505 Call Transform.get_up, X0
	506 Move V3, V0
	507 Move V4, V1
	508 Move V5, V2
	509 Move S6, 0.5
	510 Move V0, V12
	511 Move V1, V13
	512 Move V2, V8
	513 Move X0, X31
	514 Call Vector3.Slerp, X0, X1, V0
	515 Move X23, 0x82D000
	516 Move W8, [X23+2596]
	517 Move V7, V0
	518 Move V5, V1
	519 Move V16, V2
	520 Compare W8, 0
	521 JumpIfNotEqual {533}
	522 Move X0, 0x548000
	523 Move X0, [X0+1448]
	524 Move V8, V5
	525 Move V12, V7
	526 Move V13, V16
	527 Call 0x1C17CF4
	528 Move V16, V13
	529 Move V7, V12
	530 Move V5, V8
	531 Move W8, 1
	532 Move [X23+2596], W8
	533 Move X0, [X24]
	534 Move V4, [X31+92]
	535 Multiply S0, S7, S7
	536 Multiply S1, S5, S5
	537 Move V3, V9
	538 Move V2, V10
	539 Add S0, S0, S1
	540 Multiply S1, S16, S16
	541 Move W8, [X0+224]
	542 Multiply S13, S4, S15
	543 Multiply S8, S2, S15
	544 Add S15, S1, S0
	545 Multiply S0, S2, S2
	546 Multiply S1, S3, S3
	547 Add S0, S0, S1
	548 Multiply S1, S4, S4
	549 Multiply S12, S9, S11
	550 Multiply S9, S4, S14
	551 Multiply S10, S10, S11
	552 Multiply S11, S3, S14
	553 Add S14, S1, S0
	554 Move [X31+88], S2
	555 Move [X31+12], S3
	556 Compare W8, 0
	557 JumpIfNotEqual {565}
	558 Move [X31+4], S7
	559 Move [X31+12], S5
	560 Move [X31], S16
	561 Call 0x1C17DFC
	562 Move S16, [X31]
	563 Move S7, [X31+4]
	564 Move V5, [X31+8]
	565 Move X8, -51126272
	566 Move V2, [X8+4072]
	567 Subtract S8, S8, S11
	568 Move V11, [X31+92]
	569 Multiply S1, S14, S15
	570 NotImplemented "Instruction FSQRT not yet implemented."
	571 Subtract S0, S12, S13
	572 Subtract S9, S9, S10
	573 NotImplemented "Instruction FCMP not yet implemented."
	574 Move S3, W31
	575 Move V15, V0
	576 Move V0, [X31+88]
	577 Move V2, [X31+12]
	578 Move X0, [X24]
	579 Multiply S3, S11, S16
	580 Multiply S0, S0, S7
	581 Multiply S2, S2, S5
	582 Add S0, S0, S2
	583 Add S0, S3, S0
	584 Move W8, [X0+224]
	585 NotImplemented "Instruction FDIV not yet implemented."
	586 Move S1, 1
	587 Move S2, -1
	588 NotImplemented "Instruction FMIN not yet implemented."
	589 NotImplemented "Instruction FCMP not yet implemented."
	590 Move V13, V7
	591 Move V12, V5
	592 Move V14, V16
	593 NotImplemented "Instruction FCSEL not yet implemented."
	594 Compare W8, 0
	595 JumpIfNotEqual {597}
	596 Call 0x1C17DFC
	597 NotImplemented "Instruction FCVT not yet implemented."
	598 Call 0x3EB2B80
	599 Move X8, -51122176
	600 Move V1, [X8+1096]
	601 NotImplemented "Instruction INVALID not yet implemented."
	602 Move V5, V12
	603 Move V7, V13
	604 Multiply S3, S0, S1
	605 Move V16, V14
	606 Move V0, V15
	607 Move W8, 0x43340000
	608 Move S1, W8
	609 NotImplemented "Instruction FDIV not yet implemented."
	610 NotImplemented "Instruction FRINTM not yet implemented."
	611 Multiply S2, S2, S1
	612 Move W8, 0xC2B40000
	613 Subtract S3, S3, S2
	614 Move S2, W8
	615 NotImplemented "Instruction FMIN not yet implemented."
	616 NotImplemented "Instruction FCMP not yet implemented."
	617 Add S1, S1, S2
	618 NotImplemented "Instruction FCSEL not yet implemented."
	619 Move W8, 0x42B40000
	620 NotImplemented "Instruction FABS not yet implemented."
	621 Move S1, W8
	622 Subtract S2, S1, S2
	623 NotImplemented "Instruction FDIV not yet implemented."
	624 Move V1, V9
	625 Move V2, V8
	626 Move V3, V7
	627 Move V4, V5
	628 Move V5, V16
	629 Move X0, X31
	630 Call Vector3.Slerp, X0, X1, V0
	631 Move V7, [X31+12]
	632 Move V6, [X31+88]
	633 Multiply S3, S11, S1
	634 Move W8, [X21+280]
	635 Multiply S4, S7, S2
	636 Multiply S2, S6, S2
	637 Subtract S5, S3, S4
	638 Multiply S3, S11, S0
	639 Multiply S0, S7, S0
	640 Multiply S1, S6, S1
	641 Subtract S2, S2, S3
	642 Subtract S0, S0, S1
	643 Multiply S1, S7, S0
	644 Multiply S3, S11, S2
	645 Subtract S3, S1, S3
	646 Multiply S1, S11, S5
	647 Multiply S0, S6, S0
	648 Multiply S2, S6, S2
	649 Subtract S4, S1, S0
	650 Multiply S0, S7, S5
	651 Subtract S5, S2, S0
	652 Compare W8, 0
	653 JumpIfEqual {655}
	654 Move [X21+280], W31
	655 Move V0, [X21+284]
	656 Move V1, [X21+288]
	657 Move V2, [X21+292]
	658 Multiply S0, S3, S0
	659 Multiply S1, S4, S1
	660 Add S0, S0, S1
	661 Multiply S1, S5, S2
	662 Add S0, S1, S0
	663 NotImplemented "Instruction FCMP not yet implemented."
	664 NotImplemented "Instruction FNEG not yet implemented."
	665 NotImplemented "Instruction FNEG not yet implemented."
	666 NotImplemented "Instruction FNEG not yet implemented."
	667 Move V0, V6
	668 Move V1, V7
	669 Move V2, V11
	670 Move X0, X31
	671 Move [X21+284], S3
	672 Move [X21+288], S4
	673 Move [X21+292], S5
	674 Call Quaternion.LookRotation, X0, X1
	675 Move V10, V2
	676 Move S2, [X21+120]
	677 Move S4, [X21+124]
	678 Move V8, V0
	679 Move V9, V1
	680 Move S0, [X21+112]
	681 Move S1, [X21+116]
	682 Move V11, V3
	683 Move V3, V4
	684 Move X0, X31
	685 Call Quaternion.Inverse, X0
	686 Multiply S4, S11, S0
	687 Multiply S5, S8, S3
	688 Multiply S16, S11, S1
	689 Multiply S17, S9, S3
	690 Multiply S21, S8, S0
	691 Multiply S22, S11, S2
	692 Multiply S23, S11, S3
	693 Multiply S3, S10, S3
	694 Multiply S6, S9, S2
	695 Multiply S7, S10, S1
	696 Multiply S18, S10, S0
	697 Multiply S20, S8, S1
	698 Multiply S1, S9, S1
	699 Add S4, S4, S5
	700 Add S5, S16, S17
	701 Add S3, S22, S3
	702 Subtract S16, S23, S21
	703 Multiply S19, S8, S2
	704 Multiply S0, S9, S0
	705 Multiply S2, S10, S2
	706 Add S4, S6, S4
	707 Add S5, S18, S5
	708 Add S3, S20, S3
	709 Subtract S1, S16, S1
	710 Subtract S8, S4, S7
	711 Subtract S9, S5, S19
	712 Subtract S10, S3, S0
	713 Subtract S11, S1, S2
	714 Move X0, X22
	715 Move X1, X31
	716 Call Transform.get_position, X0
	717 Move [X20], S0
	718 Move [X20+8], S1
	719 Move [X20+8], S2
	720 Call 0x1C17F20

Method: System.Void TranslateSetup(UnityEngine.Pose interactorCentroidPose, UnityEngine.Vector3 grabCentroid, UnityEngine.Pose objectPose, UnityEngine.Vector3 objectScale)

Disassembly:
	0x03BABA68 LDR X0, [X8]
	0x03BABA6C LDR W8, [X0 + 0xE0]
	0x03BABA70 CBNZ W8, 0x3BABA78
	0x03BABA74 BL 0x1C16DFC
	0x03BABA78 BL 0x3BAD6A4
	0x03BABA7C CBZ X0, 0x3BABAC4
	0x03BABA80 MOV X8, X0
	0x03BABA84 AND W4, W25, 0x1
	0x03BABA88 STR X27, [X31 + 0x60]
	0x03BABA8C MOV X0, X26
	0x03BABA90 MOV X1, X24
	0x03BABA94 MOV X2, X23
	0x03BABA98 MOV X3, X22
	0x03BABA9C MOV X5, X21
	0x03BABAA0 MOV X6, X20
	0x03BABAA4 MOV X7, X19
	0x03BABAA8 LDP X20, X19, [X31 + 0x50]
	0x03BABAAC LDP X22, X21, [X31 + 0x40]
	0x03BABAB0 LDP X24, X23, [X31 + 0x30]
	0x03BABAB4 LDP X26, X25, [X31 + 0x20]
	0x03BABAB8 LDP X28, X27, [X31 + 0x10]
	0x03BABABC LDP X29, X30, [X31], #0x60
	0x03BABAC0 BR X8
	0x03BABAC4 STP X27, X31, [X31 + 0x60]
	0x03BABAC8 AND W4, W25, 0x1
	0x03BABACC MOV X0, X26
	0x03BABAD0 MOV X1, X24
	0x03BABAD4 MOV X2, X23
	0x03BABAD8 MOV X3, X22
	0x03BABADC MOV X5, X21
	0x03BABAE0 MOV X6, X20
	0x03BABAE4 MOV X7, X19
	0x03BABAE8 LDP X20, X19, [X31 + 0x50]
	0x03BABAEC LDP X22, X21, [X31 + 0x40]
	0x03BABAF0 LDP X24, X23, [X31 + 0x30]
	0x03BABAF4 LDP X26, X25, [X31 + 0x20]
	0x03BABAF8 LDP X28, X27, [X31 + 0x10]
	0x03BABAFC LDP X29, X30, [X31], #0x60
	0x03BABB00 B 0x3BAEB44
	0x03BABB04 FMUL S0, S0, S3
	0x03BABB08 FMUL S1, S1, S4
	0x03BABB0C FMUL S2, S2, S5
	0x03BABB10 RET
	0x03BABB14 TBZ X2, 0x0, 0x3BABB9C
	0x03BABB18 LDP S0, S1, [X1 + 0x8]
	0x03BABB1C LDP S2, S7, [X0 + 0x70]
	0x03BABB20 LDP S3, S4, [X0 + 0x78]
	0x03BABB24 LDP S5, S6, [X1]
	0x03BABB28 FMUL S16, S1, S2
	0x03BABB2C FMUL S19, S0, S7
	0x03BABB30 FMUL S17, S5, S4
	0x03BABB34 FMUL S18, S6, S3
	0x03BABB38 FMUL S20, S1, S7

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move V10, V3
	012 Move V11, V2
	013 Move V12, V1
	014 Move V13, V0
	015 Move S0, [X1+12]
	016 Move S1, [X1+16]
	017 Move S2, [X1+20]
	018 Move S3, [X1+24]
	019 Move X19, X0
	020 Move X0, X31
	021 Move V8, V5
	022 Move V9, V4
	023 Move X20, X2
	024 Move X21, X1
	025 Call Quaternion.Inverse, X0
	026 Move S4, [X21]
	027 Move S5, [X21+4]
	028 Move V6, [X21+8]
	029 Move X0, X31
	030 Subtract S4, S13, S4
	031 Subtract S5, S12, S5
	032 Subtract S6, S11, S6
	033 Call Quaternion.op_Multiply, X0, X1
	034 Move [X19+156], S0
	035 Move [X19+164], S1
	036 Move [X19+164], S2
	037 Move S0, [X20+12]
	038 Move S1, [X20+16]
	039 Move S2, [X20+20]
	040 Move S3, [X20+24]
	041 Move X0, X31
	042 Call Quaternion.Inverse, X0
	043 Move S4, [X20]
	044 Move S5, [X20+4]
	045 Move V6, [X20+8]
	046 Move X0, X31
	047 Subtract S4, S13, S4
	048 Subtract S5, S12, S5
	049 Subtract S6, S11, S6
	050 Call Quaternion.op_Multiply, X0, X1
	051 Move V3, V10
	052 Move V4, V9
	053 Move V5, V8
	054 Move X0, X31
	055 Move [X19+168], S0
	056 Move [X19+176], S1
	057 Move [X19+176], S2
	058 Call Vector3Extensions.Divide, X0, X1
	059 Move [X19+168], S0
	060 Move [X19+176], S1
	061 Move [X19+176], S2
	062 Move X20, [X31+64]
	063 Move X19, [X31+72]
	064 Move X30, [X31+48]
	065 Move X21, [X31+56]
	066 Move D9, [X31+32]
	067 Move D8, [X31+40]
	068 Move D11, [X31+16]
	069 Move D10, [X31+24]
	070 Move D13, [X31+80]
	071 Move D12, [X31+88]
	072 Return 

Method: System.Void ComputeNewObjectPosition(in Unity.Mathematics.float3 interactorPosition, in Unity.Mathematics.quaternion interactorRotation, in Unity.Mathematics.quaternion objectRotation, in Unity.Mathematics.float3 objectScale, System.Boolean trackRotation, in Unity.Mathematics.float3 offsetPosition, in Unity.Mathematics.float3 objectLocalGrabPoint, in Unity.Mathematics.float3 interactorLocalGrabPoint, out UnityEngine.Vector3 newPosition)

Disassembly:
	0x03BAC920 FMUL S6, S1, S1
	0x03BAC924 FMUL S7, S4, S4
	0x03BAC928 FMUL S5, S17, S13
	0x03BAC92C FMUL S16, S17, S17
	0x03BAC930 FADD S2, S2, S3
	0x03BAC934 FADD S3, S6, S7
	0x03BAC938 FADD S2, S5, S2
	0x03BAC93C FADD S3, S16, S3
	0x03BAC940 FDIV S3, S2, S3
	0x03BAC944 FMUL S2, S1, S3
	0x03BAC948 FMUL S1, S4, S3
	0x03BAC94C FMUL S28, S17, S3
	0x03BAC950 MOV V3.16B, V11.16B
	0x03BAC954 MOV V4.16B, V9.16B
	0x03BAC958 MOV V5.16B, V14.16B
	0x03BAC95C TBZ X21, 0x0, 0x3BACA0C
	0x03BAC960 FMOV S3, W31
	0x03BAC964 FMUL S5, S15, S3
	0x03BAC968 FMUL S6, S8, S3
	0x03BAC96C FMUL S7, S0, S3
	0x03BAC970 FSUB S16, S0, S5
	0x03BAC974 FSUB S5, S5, S8
	0x03BAC978 FSUB S6, S6, S7
	0x03BAC97C FADD S5, S5, S5
	0x03BAC980 FADD S6, S6, S6
	0x03BAC984 FADD S7, S16, S16
	0x03BAC988 FMOV S4, 1
	0x03BAC98C FMUL S16, S23, S5
	0x03BAC990 FMUL S17, S23, S6
	0x03BAC994 FMUL S18, S23, S7
	0x03BAC998 FMUL S19, S0, S6
	0x03BAC99C FADD S4, S17, S4
	0x03BAC9A0 FMUL S17, S15, S7
	0x03BAC9A4 FADD S16, S16, S3
	0x03BAC9A8 FADD S3, S18, S3
	0x03BAC9AC FMUL S18, S8, S5
	0x03BAC9B0 FMUL S6, S8, S6
	0x03BAC9B4 FMUL S7, S0, S7
	0x03BAC9B8 FMUL S5, S15, S5
	0x03BAC9BC FSUB S6, S17, S6
	0x03BAC9C0 FSUB S7, S18, S7
	0x03BAC9C4 FSUB S5, S19, S5
	0x03BAC9C8 FADD S6, S16, S6
	0x03BAC9CC FADD S4, S4, S7
	0x03BAC9D0 FADD S3, S3, S5

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X28, 0x837000
	014 Move X29, 0x5B1000
	015 Move W8, [X28+3223]
	016 Move X27, [X31+96]
	017 Move X29, [X29+3576]
	018 Move X19, X7
	019 Move X20, X6
	020 Move X21, X5
	021 Move W24, W4
	022 Move X22, X3
	023 Move X23, X2
	024 Move X25, X1
	025 Move X26, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {35}
	030 Move X0, 0x5B1000
	031 Move X0, [X0+3576]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X28+3223], W8
	035 Move X0, [X29]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 And W4, W24, 1
	041 Move [X31+96], X27
	042 Move X0, X26
	043 Move X1, X25
	044 Move X2, X23
	045 Move X3, X22
	046 Move X5, X21
	047 Move X6, X20
	048 Move X7, X19
	049 Move X20, [X31+80]
	050 Move X19, [X31+88]
	051 Move X22, [X31+64]
	052 Move X21, [X31+72]
	053 Move X24, [X31+48]
	054 Move X23, [X31+56]
	055 Move X26, [X31+32]
	056 Move X25, [X31+40]
	057 Move X28, [X31+16]
	058 Move X27, [X31+24]
	059 Move X29, [X31+96]
	060 Move X30, [X31+104]

Method: Unity.Mathematics.float3 Scale(Unity.Mathematics.float3 a, Unity.Mathematics.float3 b)

Disassembly:
	0x03BACB04 LDRB W8, [X23 + 0x783]
	0x03BACB08 STP S23, S0, [X31 + 0x24]
	0x03BACB0C CBNZ W8, 0x3BACB24
	0x03BACB10 ADRP X0, 0x547000

ISIL:
	001 Multiply S0, S0, S3
	002 Multiply S1, S1, S4
	003 Multiply S2, S2, S5
	004 Return X0

Method: UnityEngine.Quaternion ComputeNewObjectRotation(in UnityEngine.Quaternion interactorRotation, System.Boolean trackRotation)

Disassembly:
	0x03BACB14 LDR X0, [X0 + 0x5A0]
	0x03BACB18 BL 0x1C16CF4
	0x03BACB1C MOVZ W8, 0x1
	0x03BACB20 STRB W8, [X23 + 0x783]
	0x03BACB24 ADRP X8, 0x547000
	0x03BACB28 LDR X8, [X8 + 0x5A0]
	0x03BACB2C MOV X0, X31
	0x03BACB30 LDR X8, [X8]
	0x03BACB34 LDR X8, [X8 + 0xB8]
	0x03BACB38 LDP S0, S1, [X8]
	0x03BACB3C LDR V2, [X8 + 0x8]
	0x03BACB40 BL 0x3887BE4
	0x03BACB44 LDP S23, S28, [X31 + 0x24]
	0x03BACB48 MOV V30.16B, V11.16B
	0x03BACB4C MOV V21.16B, V9.16B
	0x03BACB50 MOV V29.16B, V9.16B
	0x03BACB54 MOV V31.16B, V14.16B
	0x03BACB58 TBZ X22, 0x0, 0x3BACC08
	0x03BACB5C FMOV S18, W31
	0x03BACB60 FMUL S6, S28, S18
	0x03BACB64 FMUL S3, S15, S18
	0x03BACB68 FMUL S4, S8, S18
	0x03BACB6C FSUB S5, S6, S15
	0x03BACB70 FSUB S3, S3, S4
	0x03BACB74 FSUB S4, S8, S6
	0x03BACB78 FADD S3, S3, S3
	0x03BACB7C FADD S19, S4, S4
	0x03BACB80 FADD S4, S5, S5
	0x03BACB84 FMOV S17, 1
	0x03BACB88 FMUL S5, S23, S3
	0x03BACB8C FMUL S6, S23, S19
	0x03BACB90 FMUL S7, S23, S4
	0x03BACB94 FMUL S16, S28, S19
	0x03BACB98 FADD S17, S5, S17
	0x03BACB9C FMUL S5, S15, S4
	0x03BACBA0 FADD S6, S6, S18
	0x03BACBA4 FADD S18, S7, S18

ISIL:
	001 Move TEMP, X2
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfNotEqual {42}
	005 Move S0, [X1+8]
	006 Move S1, [X1+12]
	007 Move S2, [X0+112]
	008 Move S7, [X0+116]
	009 Move S3, [X0+120]
	010 Move S4, [X0+124]
	011 Move S5, [X1]
	012 Move S6, [X1+4]
	013 Multiply S16, S1, S2
	014 Multiply S19, S0, S7
	015 Multiply S17, S5, S4
	016 Multiply S18, S6, S3
	017 Multiply S20, S1, S7
	018 Multiply S21, S6, S4
	019 Multiply S22, S0, S2
	020 Multiply S23, S5, S3
	021 Multiply S24, S5, S7
	022 Multiply S5, S5, S2
	023 Multiply S2, S6, S2
	024 Multiply S6, S6, S7
	025 Multiply S7, S1, S3
	026 Multiply S1, S1, S4
	027 Multiply S4, S0, S4
	028 Multiply S3, S0, S3
	029 Add S0, S16, S17
	030 Add S16, S20, S21
	031 Add S4, S7, S4
	032 Subtract S1, S1, S5
	033 Add S0, S18, S0
	034 Add S5, S22, S16
	035 Add S4, S24, S4
	036 Subtract S6, S1, S6
	037 Subtract S0, S0, S19
	038 Subtract S1, S5, S23
	039 Subtract S2, S4, S2
	040 Subtract S3, S6, S3
	041 Return X0
	042 Move S0, [X0+84]
	043 Move S1, [X0+88]
	044 Move S2, [X0+92]
	045 Move S3, [X0+96]
	046 Return X0

Method: UnityEngine.Vector3 AdjustPositionForPermittedAxes(in UnityEngine.Vector3 targetPosition, in UnityEngine.Pose originalObjectPose, UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ManipulationAxes permittedAxes, UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode axisDisplacementMode)

Disassembly:
	0x03BAB9E4 STP X22, X21, [X31 + 0x40]
	0x03BAB9E8 STP X20, X19, [X31 + 0x50]
	0x03BAB9EC ADRP X28, 0x837000
	0x03BAB9F0 ADRP X29, 0x570000
	0x03BAB9F4 LDRB W8, [X28 + 0xCA2]
	0x03BAB9F8 LDR X27, [X31 + 0x60]
	0x03BAB9FC LDR X29, [X29 + 0x848]
	0x03BABA00 MOV X19, X7
	0x03BABA04 MOV X20, X6
	0x03BABA08 MOV X21, X5
	0x03BABA0C MOV W25, W4
	0x03BABA10 MOV X22, X3
	0x03BABA14 MOV X23, X2
	0x03BABA18 MOV X24, X1
	0x03BABA1C MOV X26, X0
	0x03BABA20 TBNZ X8, 0x0, 0x3BABA44
	0x03BABA24 ADRP X0, 0x570000
	0x03BABA28 LDR X0, [X0 + 0x848]
	0x03BABA2C BL 0x1C16CF4
	0x03BABA30 ADRP X0, 0x5B1000
	0x03BABA34 LDR X0, [X0 + 0xDF8]
	0x03BABA38 BL 0x1C16CF4
	0x03BABA3C MOVZ W8, 0x1
	0x03BABA40 STRB W8, [X28 + 0xCA2]
	0x03BABA44 LDR X0, [X29]
	0x03BABA48 LDR W8, [X0 + 0xE0]
	0x03BABA4C CBNZ W8, 0x3BABA54
	0x03BABA50 BL 0x1C16DFC
	0x03BABA54 MOV X0, X31
	0x03BABA58 BL 0x36FA670
	0x03BABA5C TBZ X0, 0x0, 0x3BABAC4
	0x03BABA60 ADRP X8, 0x5B1000
	0x03BABA64 LDR X8, [X8 + 0xDF8]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 And W8, W2, 2
	005 And W9, W2, 4
	006 And W10, W2, W8
	007 And W31, W10, W9
	008 Move [X31+8], W31
	009 Move [X31], X31
	010 Move S0, [X0]
	011 Move S1, [X0+4]
	012 Add X8, X0, 8
	013 And W31, W2, 7
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CSET not yet implemented."
	016 NotImplemented "Instruction CMP not yet implemented."
	017 And W8, W2, 1
	018 NotImplemented "Instruction CSET not yet implemented."
	019 Add X6, X31, 0
	020 Move W2, W3
	021 Move W3, W8
	022 Add X19, X31, 0
	023 Call XRGeneralGrabTransformer.AdjustPositionForPermittedAxesBurst, X0, X1, X2, X3, X4, X5, X6
	024 Move S0, [X31]
	025 Move S1, [X31+4]
	026 Add X8, X19, 8
	027 Move S0, [X1]
	028 Move S1, [X1+4]
	029 Add X8, X1, 8
	030 Move V2, [X8]
	031 Move X30, [X31+16]
	032 Move X19, [X31+24]
	033 Add X31, X31, 32
	034 Return X0

Method: System.Void AdjustPositionForPermittedAxesBurst(in UnityEngine.Vector3 targetPosition, in UnityEngine.Pose originalObjectPose, UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode axisDisplacementMode, System.Boolean hasX, System.Boolean hasY, System.Boolean hasZ, out UnityEngine.Vector3 adjustedTargetPosition)

Disassembly:
	0x03BACBA8 FMUL S7, S8, S3
	0x03BACBAC FMUL S19, S8, S19
	0x03BACBB0 FMUL S4, S28, S4
	0x03BACBB4 FMUL S3, S15, S3
	0x03BACBB8 FSUB S5, S5, S19
	0x03BACBBC FSUB S4, S7, S4
	0x03BACBC0 FSUB S3, S16, S3
	0x03BACBC4 FADD S17, S17, S5
	0x03BACBC8 FADD S4, S6, S4
	0x03BACBCC FADD S18, S18, S3
	0x03BACBD0 FMUL S19, S17, S10
	0x03BACBD4 FMUL S3, S4, S12
	0x03BACBD8 FMUL S6, S17, S17
	0x03BACBDC FMUL S7, S4, S4
	0x03BACBE0 FMUL S5, S18, S13
	0x03BACBE4 FMUL S16, S18, S18
	0x03BACBE8 FADD S19, S19, S3
	0x03BACBEC FADD S3, S6, S7
	0x03BACBF0 FADD S5, S5, S19
	0x03BACBF4 FADD S3, S16, S3
	0x03BACBF8 FDIV S3, S5, S3
	0x03BACBFC FMUL S31, S17, S3
	0x03BACC00 FMUL S29, S4, S3
	0x03BACC04 FMUL S30, S18, S3
	0x03BACC08 TBZ X21, 0x0, 0x3BACCD8
	0x03BACC0C FMOV S3, W31
	0x03BACC10 FMUL S6, S8, S3
	0x03BACC14 FMUL S7, S28, S3
	0x03BACC18 FMUL S5, S15, S3
	0x03BACC1C FMUL S16, S10, S3
	0x03BACC20 FSUB S6, S6, S7
	0x03BACC24 FMUL S17, S13, S3
	0x03BACC28 FSUB S18, S28, S5
	0x03BACC2C FSUB S5, S5, S8
	0x03BACC30 FADD S7, S16, S12
	0x03BACC34 FADD S6, S6, S6
	0x03BACC38 FMOV S4, 1
	0x03BACC3C FADD S5, S5, S5
	0x03BACC40 FADD S1, S17, S7

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X26, 0x837000
	012 Move X27, 0x5B1000
	013 Move W8, [X26+3224]
	014 Move X27, [X27+3584]
	015 Move X19, X6
	016 Move W21, W5
	017 Move W23, W4
	018 Move W25, W3
	019 Move W20, W2
	020 Move X22, X1
	021 Move X24, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0x5B1000
	027 Move X0, [X0+3584]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X26+3224], W8
	031 Move X0, [X27]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 And W3, W25, 1
	037 And W4, W23, 1
	038 And W5, W21, 1
	039 Move X0, X24
	040 Move X1, X22
	041 Move W2, W20
	042 Move X6, X19
	043 Move X20, [X31+64]
	044 Move X19, [X31+72]
	045 Move X22, [X31+48]
	046 Move X21, [X31+56]
	047 Move X24, [X31+32]
	048 Move X23, [X31+40]
	049 Move X26, [X31+16]
	050 Move X25, [X31+24]
	051 Move X30, [X31+80]
	052 Move X27, [X31+88]

Method: UnityEngine.Vector3 ComputeNewScale(in UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, in UnityEngine.Vector3 startScale, in UnityEngine.Vector3 currentScale, in UnityEngine.Vector3 startHandleBar, in UnityEngine.Vector3 newHandleBar, System.Boolean trackScale)

Disassembly:
	0x03BACD54 FADD S7, S21, S7
	0x03BACD58 FSUB S18, S22, S18
	0x03BACD5C FADD S17, S19, S17
	0x03BACD60 FADD S6, S6, S16
	0x03BACD64 FADD S7, S7, S18
	0x03BACD68 FMUL S16, S17, S10
	0x03BACD6C FMUL S18, S6, S12
	0x03BACD70 FMUL S20, S17, S17
	0x03BACD74 FMUL S21, S6, S6
	0x03BACD78 FMUL S19, S7, S13
	0x03BACD7C FMUL S22, S7, S7
	0x03BACD80 FADD S16, S16, S18
	0x03BACD84 FADD S18, S20, S21
	0x03BACD88 FADD S16, S19, S16
	0x03BACD8C FADD S18, S22, S18
	0x03BACD90 FDIV S16, S16, S18
	0x03BACD94 FMUL S14, S17, S16
	0x03BACD98 FMUL S21, S6, S16
	0x03BACD9C FMUL S11, S7, S16
	0x03BACDA0 FADD S2, S31, S5
	0x03BACDA4 FADD S1, S29, S4
	0x03BACDA8 FADD S0, S30, S3
	0x03BACDAC FADD S2, S2, S14
	0x03BACDB0 FADD S1, S1, S21
	0x03BACDB4 FADD S0, S0, S11
	0x03BACDB8 ADD X0, X31, 0x30
	0x03BACDBC ADD X1, X31, 0x70
	0x03BACDC0 ADD X2, X31, 0x40
	0x03BACDC4 MOV X3, X31
	0x03BACDC8 STP S2, S1, [X31 + 0x30]
	0x03BACDCC STR S0, [X31 + 0x38]
	0x03BACDD0 BL 0x3B86E88
	0x03BACDD4 LDP V2, V3, [X31]
	0x03BACDD8 LDR V0, [X31 + 0x40]
	0x03BACDDC LDR V1, [X31 + 0x48]
	0x03BACDE0 MOV V3.S[1], V2.S[0]
	0x03BACDE4 FADD V0.2S, V3.2S, V0.2S
	0x03BACDE8 FADD S1, S9, S1
	0x03BACDEC STR D0, [X31 + 0x50]
	0x03BACDF0 STR S1, [X31 + 0x58]
	0x03BACDF4 LDP S18, S17, [X31 + 0xC8]
	0x03BACDF8 LDR V19, [X31 + 0x2C]
	0x03BACDFC LDP S0, S1, [X31 + 0x50]
	0x03BACE00 LDR V2, [X31 + 0x58]
	0x03BACE04 MOV X0, X31
	0x03BACE08 FADD S0, S17, S0
	0x03BACE0C FADD S1, S18, S1
	0x03BACE10 FADD S2, S19, S2
	0x03BACE14 BL 0x3887BE0
	0x03BACE18 STP S0, S1, [X19]
	0x03BACE1C STR S2, [X19 + 0x8]
	0x03BACE20 LDP X20, X19, [X31 + 0x110]
	0x03BACE24 LDP X22, X21, [X31 + 0x100]
	0x03BACE28 LDP X24, X23, [X31 + 0xF0]
	0x03BACE2C LDP X26, X25, [X31 + 0xE0]
	0x03BACE30 LDP X30, X27, [X31 + 0xD0]
	0x03BACE34 LDR X29, [X31 + 0xC0]
	0x03BACE38 LDP D9, D8, [X31 + 0xB0]
	0x03BACE3C LDP D11, D10, [X31 + 0xA0]
	0x03BACE40 LDP D13, D12, [X31 + 0x90]
	0x03BACE44 LDP D15, D14, [X31 + 0x80]
	0x03BACE48 ADD X31, X31, 0x120
	0x03BACE4C RET
	0x03BACE50 SUB X31, X31, 0x90
	0x03BACE54 STR D10, [X31 + 0x30]
	0x03BACE58 STP D9, D8, [X31 + 0x40]
	0x03BACE5C STP X30, X25, [X31 + 0x50]
	0x03BACE60 STP X24, X23, [X31 + 0x60]
	0x03BACE64 STP X22, X21, [X31 + 0x70]
	0x03BACE68 STP X20, X19, [X31 + 0x80]
	0x03BACE6C ADRP X25, 0x836000
	0x03BACE70 LDRB W8, [X25 + 0xC9D]
	0x03BACE74 MOV X19, X5
	0x03BACE78 MOV V8.16B, V2.16B
	0x03BACE7C MOV V9.16B, V1.16B
	0x03BACE80 MOV V10.16B, V0.16B
	0x03BACE84 MOV X21, X4
	0x03BACE88 MOV X20, X3
	0x03BACE8C MOV W22, W2
	0x03BACE90 MOV X24, X1
	0x03BACE94 MOV X23, X0
	0x03BACE98 TBNZ X8, 0x0, 0x3BACEB0
	0x03BACE9C ADRP X0, 0x572000
	0x03BACEA0 LDR X0, [X0 + 0x838]
	0x03BACEA4 BL 0x1C16CF4
	0x03BACEA8 MOVZ W8, 0x1
	0x03BACEAC STRB W8, [X25 + 0xC9D]
	0x03BACEB0 STR W31, [X31 + 0x18]
	0x03BACEB4 STR X31, [X31 + 0x10]
	0x03BACEB8 LDR W8, [X23 + 0x8]
	0x03BACEBC LDR X9, [X23]
	0x03BACEC0 FMUL S0, S10, S9
	0x03BACEC4 FMUL S8, S0, S8
	0x03BACEC8 STR W8, [X19 + 0x8]
	0x03BACECC STR X9, [X19]
	0x03BACED0 STP S8, S8, [X31 + 0x20]
	0x03BACED4 STR S8, [X31 + 0x28]
	0x03BACED8 LDP S0, S1, [X24]
	0x03BACEDC LDR V2, [X24 + 0x8]
	0x03BACEE0 MOV X0, X31
	0x03BACEE4 BL 0x3887BE4
	0x03BACEE8 ADD X0, X31, 0x20
	0x03BACEEC ADD X1, X31, 0x0
	0x03BACEF0 ADD X2, X31, 0x10
	0x03BACEF4 MOV X3, X31
	0x03BACEF8 STP S0, S1, [X31]
	0x03BACEFC STR S2, [X31 + 0x8]
	0x03BACF00 BL 0x3B87CD0
	0x03BACF04 LDP S0, S1, [X23]
	0x03BACF08 LDR V2, [X23 + 0x8]
	0x03BACF0C MOV X0, X31
	0x03BACF10 BL 0x3887BE4
	0x03BACF14 LDP S3, S4, [X31 + 0x10]
	0x03BACF18 LDR V5, [X31 + 0x18]
	0x03BACF1C FADD S3, S0, S3
	0x03BACF20 FADD S1, S1, S4
	0x03BACF24 FADD S2, S2, S5
	0x03BACF28 TBZ X22, 0x0, 0x3BACF50
	0x03BACF2C FCMP S8, 0x0
	0x03BACF30 B.LE 0x3BACFB8
	0x03BACF34 LDR V0, [X21]
	0x03BACF38 FABS S4, S3
	0x03BACF3C FABS S5, S0
	0x03BACF40 FCMP S4, S5
	0x03BACF44 B.LE 0x3BACFD8
	0x03BACF48 LDR V4, [X21 + 0x4]
	0x03BACF4C B 0x3BAD00C
	0x03BACF50 ADRP X8, 0x572000
	0x03BACF54 LDR X8, [X8 + 0x838]
	0x03BACF58 MOVZ W9, 0x7F800000
	0x03BACF5C LDR X8, [X8]
	0x03BACF60 LDR X8, [X8 + 0xB8]
	0x03BACF64 LDP S0, S4, [X8]
	0x03BACF68 LDR V5, [X8 + 0x8]
	0x03BACF6C FMOV W8, S0
	0x03BACF70 AND W8, W8, 0x7FFFFFFF
	0x03BACF74 CMP W8, W9
	0x03BACF78 FMOV W8, S4
	0x03BACF7C AND W8, W8, 0x7FFFFFFF
	0x03BACF80 FCCMP S3, S0, 0x0, LS
	0x03BACF84 FCSEL S0, S3, S0, GT
	0x03BACF88 CMP W8, W9
	0x03BACF8C FMOV W8, S5
	0x03BACF90 AND W8, W8, 0x7FFFFFFF
	0x03BACF94 FCCMP S1, S4, 0x0, LS
	0x03BACF98 FCSEL S1, S1, S4, GT
	0x03BACF9C CMP W8, W9
	0x03BACFA0 FCCMP S2, S5, 0x0, LS
	0x03BACFA4 FCSEL S2, S2, S5, GT
	0x03BACFA8 MOV X0, X31
	0x03BACFAC BL 0x3887BE0
	0x03BACFB0 MOV V4.16B, V1.16B
	0x03BACFB4 B 0x3BAD054
	0x03BACFB8 B.PL 0x3BAD05C
	0x03BACFBC LDR V0, [X20]
	0x03BACFC0 FABS S4, S3
	0x03BACFC4 FABS S5, S0
	0x03BACFC8 FCMP S4, S5
	0x03BACFCC B.PL 0x3BAD014
	0x03BACFD0 LDR V4, [X20 + 0x4]
	0x03BACFD4 B 0x3BAD050
	0x03BACFD8 LDR W8, [X21 + 0x4]
	0x03BACFDC FABS S4, S1
	0x03BACFE0 AND W9, W8, 0x7FFFFFFF
	0x03BACFE4 FMOV S5, W9
	0x03BACFE8 FCMP S4, S5
	0x03BACFEC FMOV S4, W8
	0x03BACFF0 B.GT 0x3BAD00C
	0x03BACFF4 LDR W8, [X21 + 0x8]
	0x03BACFF8 FABS S5, S2
	0x03BACFFC AND W8, W8, 0x7FFFFFFF

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], D8
	003 Move [X31+64], X30
	004 Move [X31+72], X27
	005 Move [X31+80], X26
	006 Move [X31+88], X25
	007 Move [X31+96], X24
	008 Move [X31+104], X23
	009 Move [X31+112], X22
	010 Move [X31+120], X21
	011 Move [X31+128], X20
	012 Move [X31+136], X19
	013 Move X26, 0x837000
	014 Move W8, [X26+3225]
	015 Move W24, W6
	016 Move X21, X5
	017 Move X22, X4
	018 Move X19, X3
	019 Move X23, X2
	020 Move X25, X1
	021 Move X20, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {34}
	026 Move X0, 0x5B1000
	027 Move X0, [X0+3568]
	028 Call 0x1C17CF4
	029 Move X0, 0x5AF000
	030 Move X0, [X0+360]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X26+3225], W8
	034 Move [X31+40], W31
	035 Move [X31+32], X31
	036 Move [X31+24], W31
	037 Move [X31+16], X31
	038 Move X0, [X25]
	039 Compare X0, 0
	040 JumpIfEqual {191}
	041 Move X1, X31
	042 Call XRBaseInteractable.get_interactorsSelecting, X0
	043 Compare X0, 0
	044 JumpIfEqual {191}
	045 Move W26, [X0+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move TEMP, X24
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {101}
	051 Move W8, [X20+44]
	052 Compare W8, 0
	053 JumpIfEqual {157}
	054 Move W8, [X20+360]
	055 Compare W8, 0
	056 JumpIfEqual {157}
	057 Move X25, [X20+352]
	058 Compare X25, 0
	059 JumpIfEqual {191}
	060 Move X27, 0x5B1000
	061 Move X8, [X25]
	062 Move X27, [X27+3568]
	063 NotImplemented "Instruction LDRH not yet implemented."
	064 Move X1, [X27]
	065 Compare X9, 0
	066 JumpIfEqual {73}
	067 Move X10, [X8+176]
	068 Add X10, X10, 8
	069 NotImplemented "Instruction LDUR not yet implemented."
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Subtract X9, X9, 1
	072 Add X10, X10, 16
	073 Move X0, X25
	074 Move W2, W31
	075 Call 0x1C5D788
	076 NotImplemented "Instruction LDRSW not yet implemented."
	077 Add X8, X8, X9
	078 Add X0, X8, 312
	079 Move X8, [X0]
	080 Move X1, [X0+8]
	081 Move X0, X25
	082 NotImplemented "Instruction BLR not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X21, [X20+352]
	085 Compare X21, 0
	086 JumpIfEqual {191}
	087 Move X8, [X21]
	088 Move X1, [X27]
	089 NotImplemented "Instruction LDRH not yet implemented."
	090 Compare X9, 0
	091 JumpIfEqual {98}
	092 Move X10, [X8+176]
	093 Add X10, X10, 8
	094 NotImplemented "Instruction LDUR not yet implemented."
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Subtract X9, X9, 1
	097 Add X10, X10, 16
	098 Move W2, 2
	099 Move X0, X21
	100 Call 0x1C5D788
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move TEMP, X24
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfNotEqual {157}
	106 Move W8, [X20+45]
	107 Compare W8, 0
	108 JumpIfEqual {157}
	109 Move W4, [X20+56]
	110 Move V0, [X20+68]
	111 Move V1, [X20+52]
	112 Add X5, X20, 320
	113 Add X6, X20, 332
	114 Add X7, X31, 16
	115 Move X0, X23
	116 Move X1, X19
	117 Move X2, X22
	118 Move X3, X21
	119 Call XRGeneralGrabTransformer.ComputeNewTwoHandedScale, X0, X1, X2, X3, X4, V0, V1, X5, X6, X7
	120 Move V0, [X31+16]
	121 Add X19, X31, 16
	122 Move W9, [X10]
	123 Add W9, W9, 2
	124 Add X8, X8, W9
	125 Add X0, X8, 312
	126 Move X8, [X0]
	127 Move X1, [X0+8]
	128 Move X0, X21
	129 NotImplemented "Instruction BLR not yet implemented."
	130 Move X21, 0x82E000
	131 Move W8, [X21+1450]
	132 Move V8, V0
	133 Compare W8, 0
	134 JumpIfNotEqual {140}
	135 Move X0, 0x54F000
	136 Move X0, [X0+1208]
	137 Call 0x1C17CF4
	138 Move W8, 1
	139 Move [X21+1450], W8
	140 Move X8, 0x54F000
	141 Move X8, [X8+1208]
	142 Move X9, -51122176
	143 Move V0, [X9+576]
	144 NotImplemented "Instruction FABS not yet implemented."
	145 Move X8, [X8]
	146 Move S2, W31
	147 NotImplemented "Instruction FMAXNM not yet implemented."
	148 Multiply S0, S1, S0
	149 Move X8, [X8+184]
	150 Move S1, 8
	151 Move V3, [X8]
	152 Multiply S1, S3, S1
	153 NotImplemented "Instruction FCMP not yet implemented."
	154 NotImplemented "Instruction FCSEL not yet implemented."
	155 NotImplemented "Instruction FABD not yet implemented."
	156 NotImplemented "Instruction FCMP not yet implemented."
	157 Move V0, [X19]
	158 Move S1, [X19+4]
	159 Move S2, [X19+8]
	160 Move X20, [X31+128]
	161 Move X19, [X31+136]
	162 Move X22, [X31+112]
	163 Move X21, [X31+120]
	164 Move X24, [X31+96]
	165 Move X23, [X31+104]
	166 Move X26, [X31+80]
	167 Move X25, [X31+88]
	168 Move X30, [X31+64]
	169 Move X27, [X31+72]
	170 Move V8, [X31+48]
	171 Add X31, X31, 144
	172 Return X0
	173 Move W21, [X20+56]
	174 Move X0, X31
	175 Add X22, X20, 308
	176 Add X23, X20, 320
	177 Add X24, X20, 332
	178 Call Time.get_deltaTime
	179 Move V2, [X20+48]
	180 Move V1, V0
	181 Add X5, X31, 32
	182 Move X0, X19
	183 Move X1, X22
	184 Move W2, W21
	185 Move X3, X23
	186 Move X4, X24
	187 Move V0, V8
	188 Call XRGeneralGrabTransformer.ComputeNewOneHandedScale, X0, X1, X2, X3, X4, V0, V1, V2, X5
	189 Move V0, [X31+32]
	190 Add X19, X31, 32
	191 Call 0x1C17F20

Method: System.Void ComputeNewOneHandedScale(in UnityEngine.Vector3 currentScale, in UnityEngine.Vector3 initialScaleProportions, System.Boolean clampScale, in UnityEngine.Vector3 minScale, in UnityEngine.Vector3 maxScale, System.Single scaleDelta, System.Single deltaTime, System.Single scaleSpeed, out UnityEngine.Vector3 newScale)

Disassembly:
	0x03BAD000 FMOV S6, W8
	0x03BAD004 FCMP S5, S6
	0x03BAD008 B.LE 0x3BAD048
	0x03BAD00C LDR V2, [X21 + 0x8]
	0x03BAD010 B 0x3BAD054
	0x03BAD014 LDR W8, [X20 + 0x4]
	0x03BAD018 FABS S4, S1
	0x03BAD01C AND W9, W8, 0x7FFFFFFF
	0x03BAD020 FMOV S5, W9
	0x03BAD024 FCMP S4, S5
	0x03BAD028 FMOV S4, W8
	0x03BAD02C B.MI 0x3BAD050
	0x03BAD030 LDR W8, [X20 + 0x8]
	0x03BAD034 FABS S5, S2
	0x03BAD038 AND W8, W8, 0x7FFFFFFF
	0x03BAD03C FMOV S6, W8
	0x03BAD040 FCMP S5, S6
	0x03BAD044 B.MI 0x3BAD050
	0x03BAD048 MOV V0.16B, V3.16B
	0x03BAD04C B 0x3BACFA8
	0x03BAD050 LDR V2, [X20 + 0x8]
	0x03BAD054 STP S0, S4, [X19]
	0x03BAD058 STR S2, [X19 + 0x8]
	0x03BAD05C LDP X20, X19, [X31 + 0x80]
	0x03BAD060 LDP X22, X21, [X31 + 0x70]
	0x03BAD064 LDP X24, X23, [X31 + 0x60]
	0x03BAD068 LDP X30, X25, [X31 + 0x50]
	0x03BAD06C LDP D9, D8, [X31 + 0x40]
	0x03BAD070 LDR V10, [X31 + 0x30]
	0x03BAD074 ADD X31, X31, 0x90
	0x03BAD078 RET
	0x03BAD07C STP D13, D12, [X31 - 0x80]!
	0x03BAD080 STP D11, D10, [X31 + 0x10]
	0x03BAD084 STP D9, D8, [X31 + 0x20]
	0x03BAD088 STR X30, [X31 + 0x30]
	0x03BAD08C STP X26, X25, [X31 + 0x40]
	0x03BAD090 STP X24, X23, [X31 + 0x50]
	0x03BAD094 STP X22, X21, [X31 + 0x60]
	0x03BAD098 STP X20, X19, [X31 + 0x70]
	0x03BAD09C LDR W8, [X1 + 0x8]
	0x03BAD0A0 LDR X9, [X1]
	0x03BAD0A4 MOV V8.16B, V1.16B
	0x03BAD0A8 MOV V9.16B, V0.16B
	0x03BAD0AC STR W8, [X7 + 0x8]
	0x03BAD0B0 STR X9, [X7]
	0x03BAD0B4 LDP S0, S1, [X3]
	0x03BAD0B8 LDR V2, [X3 + 0x8]

ISIL:
	001 Move [X31-96], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X25, 0x836000
	014 Move X26, 0x5B0000
	015 Move W8, [X25+3226]
	016 Move X26, [X26+3592]
	017 Move X19, X5
	018 Move V8, V2
	019 Move V9, V1
	020 Move V10, V0
	021 Move X20, X4
	022 Move X21, X3
	023 Move W23, W2
	024 Move X22, X1
	025 Move X24, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {35}
	030 Move X0, 0x5B0000
	031 Move X0, [X0+3592]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X25+3226], W8
	035 Move X0, [X26]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 And W2, W23, 1
	041 Move X0, X24
	042 Move X1, X22
	043 Move X3, X21
	044 Move X4, X20
	045 Move V1, V9
	046 Move V2, V8
	047 Move X5, X19
	048 Move X20, [X31+80]
	049 Move X19, [X31+88]
	050 Move X22, [X31+64]
	051 Move X21, [X31+72]
	052 Move X24, [X31+48]
	053 Move X23, [X31+56]
	054 Move X26, [X31+32]
	055 Move X25, [X31+40]
	056 Move X30, [X31+24]
	057 Move D9, [X31+8]
	058 Move D8, [X31+16]
	059 Move V0, V10
	060 Move V10, [X31+96]
	061 Call ComputeNewOneHandedScale_00000BFD$BurstDirectCall.Invoke, X0, X1, X2, X3, X4, V0, V1, V2, X5
	062 Return 

Method: System.Void ComputeNewTwoHandedScale(in UnityEngine.Vector3 startScale, in UnityEngine.Vector3 currentScale, in UnityEngine.Vector3 startHandleBar, in UnityEngine.Vector3 newHandleBar, System.Boolean clampScale, System.Single scaleMultiplier, System.Single thresholdMoveRatioForScale, in UnityEngine.Vector3 minScale, in UnityEngine.Vector3 maxScale, out UnityEngine.Vector3 newScale)

Disassembly:
	0x03BAD0BC MOV X23, X0
	0x03BAD0C0 MOV X0, X31
	0x03BAD0C4 MOV X19, X7
	0x03BAD0C8 MOV X22, X6
	0x03BAD0CC MOV X21, X5
	0x03BAD0D0 MOV W20, W4
	0x03BAD0D4 MOV X24, X2
	0x03BAD0D8 BL 0x3887BE4
	0x03BAD0DC ADRP X25, 0x834000
	0x03BAD0E0 LDRB W8, [X25 + 0x585]
	0x03BAD0E4 MOV V11.16B, V0.16B
	0x03BAD0E8 MOV V10.16B, V1.16B
	0x03BAD0EC MOV V12.16B, V2.16B
	0x03BAD0F0 CBNZ W8, 0x3BAD108
	0x03BAD0F4 ADRP X0, 0x546000
	0x03BAD0F8 LDR X0, [X0 + 0x5A8]
	0x03BAD0FC BL 0x1C16CF4
	0x03BAD100 MOVZ W8, 0x1
	0x03BAD104 STRB W8, [X25 + 0x585]
	0x03BAD108 ADRP X26, 0x546000
	0x03BAD10C LDR X26, [X26 + 0x5A8]
	0x03BAD110 LDR X0, [X26]
	0x03BAD114 LDR W8, [X0 + 0xE0]
	0x03BAD118 CBNZ W8, 0x3BAD120
	0x03BAD11C BL 0x1C16DFC
	0x03BAD120 LDP S0, S1, [X24]
	0x03BAD124 LDR V2, [X24 + 0x8]
	0x03BAD128 FMUL S4, S11, S11
	0x03BAD12C FMUL S5, S10, S10
	0x03BAD130 FMUL S3, S12, S12
	0x03BAD134 FADD S4, S4, S5
	0x03BAD138 MOV X0, X31
	0x03BAD13C FADD S13, S3, S4
	0x03BAD140 BL 0x3887BE4
	0x03BAD144 LDRB W8, [X25 + 0x585]
	0x03BAD148 MOV V10.16B, V0.16B
	0x03BAD14C MOV V11.16B, V1.16B
	0x03BAD150 MOV V12.16B, V2.16B
	0x03BAD154 CBNZ W8, 0x3BAD16C
	0x03BAD158 ADRP X0, 0x546000
	0x03BAD15C LDR X0, [X0 + 0x5A8]
	0x03BAD160 BL 0x1C16CF4
	0x03BAD164 MOVZ W8, 0x1
	0x03BAD168 STRB W8, [X25 + 0x585]
	0x03BAD16C LDR X0, [X26]
	0x03BAD170 FSQRT S13, S13
	0x03BAD174 LDR W8, [X0 + 0xE0]
	0x03BAD178 CBNZ W8, 0x3BAD180
	0x03BAD17C BL 0x1C16DFC

ISIL:
	001 Move [X31-112], D9
	002 Move [X31-104], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X27, 0x836000
	015 Move X28, 0x5B0000
	016 Move W8, [X27+3227]
	017 Move X28, [X28+3600]
	018 Move X19, X7
	019 Move X20, X6
	020 Move X21, X5
	021 Move V8, V1
	022 Move V9, V0
	023 Move W24, W4
	024 Move X22, X3
	025 Move X23, X2
	026 Move X25, X1
	027 Move X26, X0
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {37}
	032 Move X0, 0x5B0000
	033 Move X0, [X0+3600]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X27+3227], W8
	037 Move X0, [X28]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 And W4, W24, 1
	043 Move X0, X26
	044 Move X1, X25
	045 Move X2, X23
	046 Move X3, X22
	047 Move X5, X21
	048 Move X6, X20
	049 Move X7, X19
	050 Move X20, [X31+96]
	051 Move X19, [X31+104]
	052 Move X22, [X31+80]
	053 Move X21, [X31+88]
	054 Move X24, [X31+64]
	055 Move X23, [X31+72]
	056 Move X26, [X31+48]
	057 Move X25, [X31+56]
	058 Move X28, [X31+32]
	059 Move X27, [X31+40]
	060 Move X30, [X31+16]
	061 Move V0, V9
	062 Move V1, V8
	063 Move D9, [X31+112]
	064 Move D8, [X31+120]
	065 Call ComputeNewTwoHandedScale_00000BFE$BurstDirectCall.Invoke, X0, X1, X2, X3, X4, V0, V1, X5, X6, X7
	066 Return 

Method: System.Void UpdateTarget(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, ref UnityEngine.Pose targetPose, ref UnityEngine.Vector3 localScale)

Disassembly:
	0x03BAB214 STR S2, [X24 + 0x8]
	0x03BAB218 LDR W8, [X21 + 0x28]
	0x03BAB21C CMP W8, 0x2
	0x03BAB220 B.EQ 0x3BAB2B0
	0x03BAB224 CMP W8, 0x1
	0x03BAB228 B.NE 0x3BAB35C
	0x03BAB22C ADRP X23, 0x82D000
	0x03BAB230 LDRB W8, [X23 + 0x785]
	0x03BAB234 MOV V8.16B, V0.16B
	0x03BAB238 MOV V9.16B, V1.16B
	0x03BAB23C MOV V10.16B, V2.16B
	0x03BAB240 CBNZ W8, 0x3BAB258
	0x03BAB244 ADRP X0, 0x548000
	0x03BAB248 LDR X0, [X0 + 0x5A8]
	0x03BAB24C BL 0x1C16CF4
	0x03BAB250 MOVZ W8, 0x1
	0x03BAB254 STRB W8, [X23 + 0x785]
	0x03BAB258 ADRP X8, 0x548000
	0x03BAB25C LDR X8, [X8 + 0x5A8]
	0x03BAB260 LDR X0, [X8]
	0x03BAB264 LDR W8, [X0 + 0xE0]
	0x03BAB268 CBNZ W8, 0x3BAB270
	0x03BAB26C BL 0x1C16DFC
	0x03BAB270 FMUL S0, S8, S8
	0x03BAB274 FMUL S1, S9, S9
	0x03BAB278 ADRP X8, 0xFFFFFFFFFCF3F000
	0x03BAB27C FADD S0, S0, S1
	0x03BAB280 LDR V1, [X8 + 0x17C]
	0x03BAB284 ADRP X23, 0x548000
	0x03BAB288 FMUL S2, S10, S10
	0x03BAB28C LDR X23, [X23 + 0x5A0]
	0x03BAB290 FADD S0, S2, S0
	0x03BAB294 FSQRT S0, S0
	0x03BAB298 FCMP S0, S1
	0x03BAB29C B.LE 0x3BAB37C
	0x03BAB2A0 FDIV S8, S8, S0
	0x03BAB2A4 FDIV S9, S9, S0
	0x03BAB2A8 FDIV S10, S10, S0
	0x03BAB2AC B 0x3BAB3AC
	0x03BAB2B0 MOV X0, X23
	0x03BAB2B4 MOV X1, X31
	0x03BAB2B8 BL 0x3C3F58C
	0x03BAB2BC MOV X0, X22
	0x03BAB2C0 MOV X1, X31
	0x03BAB2C4 MOV V8.16B, V0.16B
	0x03BAB2C8 MOV V9.16B, V1.16B
	0x03BAB2CC MOV V10.16B, V2.16B
	0x03BAB2D0 BL 0x3C3F58C
	0x03BAB2D4 ADRP X24, 0x82D000
	0x03BAB2D8 LDRB W8, [X24 + 0x785]
	0x03BAB2DC MOV V11.16B, V0.16B
	0x03BAB2E0 MOV V12.16B, V1.16B
	0x03BAB2E4 MOV V13.16B, V2.16B
	0x03BAB2E8 CBNZ W8, 0x3BAB300
	0x03BAB2EC ADRP X0, 0x548000
	0x03BAB2F0 LDR X0, [X0 + 0x5A8]
	0x03BAB2F4 BL 0x1C16CF4
	0x03BAB2F8 MOVZ W8, 0x1
	0x03BAB2FC STRB W8, [X24 + 0x785]
	0x03BAB300 ADRP X24, 0x548000
	0x03BAB304 LDR X24, [X24 + 0x5A8]
	0x03BAB308 FSUB S11, S8, S11
	0x03BAB30C FSUB S9, S9, S12
	0x03BAB310 FSUB S8, S10, S13
	0x03BAB314 LDR X0, [X24]
	0x03BAB318 LDR W8, [X0 + 0xE0]
	0x03BAB31C CBNZ W8, 0x3BAB324
	0x03BAB320 BL 0x1C16DFC
	0x03BAB324 FMUL S0, S11, S11
	0x03BAB328 FMUL S1, S9, S9
	0x03BAB32C ADRP X8, 0xFFFFFFFFFCF3F000
	0x03BAB330 FADD S0, S0, S1
	0x03BAB334 LDR V1, [X8 + 0x17C]
	0x03BAB338 FMUL S2, S8, S8
	0x03BAB33C FADD S0, S2, S0
	0x03BAB340 FSQRT S0, S0
	0x03BAB344 FCMP S0, S1
	0x03BAB348 B.LE 0x3BAB524
	0x03BAB34C FDIV S10, S11, S0
	0x03BAB350 FDIV S9, S9, S0
	0x03BAB354 FDIV S0, S8, S0
	0x03BAB358 B 0x3BAB55C
	0x03BAB35C MOV X0, X22
	0x03BAB360 MOV X1, X31
	0x03BAB364 BL 0x3C3DEB4
	0x03BAB368 MOV V8.16B, V0.16B
	0x03BAB36C MOV V9.16B, V1.16B
	0x03BAB370 MOV V10.16B, V2.16B
	0x03BAB374 MOV V11.16B, V3.16B
	0x03BAB378 B 0x3BAB904
	0x03BAB37C ADRP X24, 0x82D000
	0x03BAB380 LDRB W8, [X24 + 0x783]
	0x03BAB384 CBNZ W8, 0x3BAB39C
	0x03BAB388 ADRP X0, 0x548000
	0x03BAB38C LDR X0, [X0 + 0x5A0]
	0x03BAB390 BL 0x1C16CF4
	0x03BAB394 MOVZ W8, 0x1
	0x03BAB398 STRB W8, [X24 + 0x783]
	0x03BAB39C LDR X8, [X23]
	0x03BAB3A0 LDR X8, [X8 + 0xB8]
	0x03BAB3A4 LDP S8, S9, [X8]
	0x03BAB3A8 LDR V10, [X8 + 0x8]
	0x03BAB3AC ADRP X24, 0x82D000
	0x03BAB3B0 LDP S11, S12, [X21 + 0xFC]
	0x03BAB3B4 LDR V13, [X21 + 0x104]
	0x03BAB3B8 LDRB W8, [X24 + 0x786]
	0x03BAB3BC LDR V14, [X21 + 0x108]
	0x03BAB3C0 CBNZ W8, 0x3BAB3D8
	0x03BAB3C4 ADRP X0, 0x548000
	0x03BAB3C8 LDR X0, [X0 + 0x5A0]
	0x03BAB3CC BL 0x1C16CF4
	0x03BAB3D0 MOVZ W8, 0x1
	0x03BAB3D4 STRB W8, [X24 + 0x786]
	0x03BAB3D8 LDR X8, [X23]
	0x03BAB3DC MOV V0.16B, V11.16B
	0x03BAB3E0 MOV V1.16B, V12.16B
	0x03BAB3E4 MOV V2.16B, V13.16B
	0x03BAB3E8 LDR X8, [X8 + 0xB8]

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+192], X30
	003 Move [X31+200], X1
	004 Move [X31+208], X22
	005 Move [X31+216], X21
	006 Move [X31+224], X20
	007 Move [X31+232], X19
	008 Move X22, X3
	009 Move X19, X2
	010 Add X2, X31, 176
	011 Add X3, X31, 160
	012 Add X4, X31, 144
	013 Move X21, X1
	014 Move X20, X0
	015 Move [X31+184], W31
	016 Move [X31+176], X31
	017 Move [X31+168], W31
	018 Move [X31+152], X31
	019 Move [X31+160], X31
	020 Move [X31+144], X31
	021 Move [X31+136], W31
	022 Move [X31+128], X31
	023 Move [X31+120], W31
	024 Move [X31+104], X31
	025 Move [X31+112], X31
	026 Move [X31+88], X31
	027 Move [X31+96], X31
	028 Move [X31+80], X31
	029 Move [X31+72], W31
	030 Move [X31+64], X31
	031 Move [X31+56], W31
	032 Move [X31+48], X31
	033 Move [X31+40], W31
	034 Move [X31+32], X31
	035 Move [X31+24], W31
	036 Move [X31+16], X31
	037 Call XRGeneralGrabTransformer.ComputeAdjustedInteractorPose, X0, X1, X2, X3, X4
	038 Compare X21, 0
	039 JumpIfEqual {149}
	040 Move W6, [X21+536]
	041 Add X4, X20, 196
	042 Add X2, X20, 268
	043 Add X1, X31, 200
	044 Add X5, X31, 176
	045 Move X0, X20
	046 Move X3, X22
	047 Call XRGeneralGrabTransformer.ComputeNewScale, X0, X1, X2, X3, X4, X5, X6
	048 Move [X22], S0
	049 Move [X22+8], S1
	050 Move [X22+8], S2
	051 Move W2, [X21+524]
	052 Add X1, X31, 144
	053 Move X0, X20
	054 Call XRGeneralGrabTransformer.ComputeNewObjectRotation, X0, X1, X2
	055 Move [X19+12], S0
	056 Move [X19+20], S1
	057 Move [X19+20], S2
	058 Move [X19+28], S3
	059 Move S0, [X31+160]
	060 Move S1, [X31+164]
	061 Move V2, [X31+168]
	062 Move X0, X31
	063 Call float3.op_Implicit, X0
	064 Move S6, [X31+144]
	065 Move S4, [X31+148]
	066 Move S5, [X31+152]
	067 Move S3, [X31+156]
	068 Move [X31+112], S0
	069 Move [X31+120], S1
	070 Move [X31+120], S2
	071 Move V0, V6
	072 Move V1, V4
	073 Move V2, V5
	074 Move X0, X31
	075 Call quaternion.op_Implicit, X0
	076 Move [X31+96], S0
	077 Move [X31+104], S1
	078 Move [X31+104], S2
	079 Move [X31+112], S3
	080 Move S0, [X19+12]
	081 Move S1, [X19+16]
	082 Move S2, [X19+20]
	083 Move S3, [X19+24]
	084 Move X0, X31
	085 Call quaternion.op_Implicit, X0
	086 Move [X31+80], S0
	087 Move [X31+88], S1
	088 Move [X31+88], S2
	089 Move [X31+96], S3
	090 Move S0, [X22]
	091 Move S1, [X22+4]
	092 Move V2, [X22+8]
	093 Move X0, X31
	094 Call float3.op_Implicit, X0
	095 Move [X31+64], S0
	096 Move [X31+72], S1
	097 Move [X31+72], S2
	098 Move S0, [X20+100]
	099 Move S1, [X20+104]
	100 Move V2, [X20+108]
	101 Move W21, [X21+524]
	102 Move X0, X31
	103 Call float3.op_Implicit, X0
	104 Move [X31+48], S0
	105 Move [X31+56], S1
	106 Move [X31+56], S2
	107 Move S0, [X20+168]
	108 Move S1, [X20+172]
	109 Move V2, [X20+176]
	110 Move X0, X31
	111 Call float3.op_Implicit, X0
	112 Move [X31+32], S0
	113 Move [X31+40], S1
	114 Move [X31+40], S2
	115 Move S0, [X20+156]
	116 Move S1, [X20+160]
	117 Move V2, [X20+164]
	118 Move X0, X31
	119 Call float3.op_Implicit, X0
	120 Add X8, X31, 128
	121 Add X0, X31, 112
	122 Add X1, X31, 96
	123 Add X2, X31, 80
	124 Add X3, X31, 64
	125 Add X5, X31, 48
	126 Add X6, X31, 32
	127 Add X7, X31, 16
	128 Move W4, W21
	129 Move [X31+16], S0
	130 Move [X31+24], S1
	131 Move [X31+24], S2
	132 Move [X31], X8
	133 Call XRGeneralGrabTransformer.ComputeNewObjectPosition, X0, X1, X2, X3, X4, X5, X6, X7, X8
	134 Move W2, [X20+348]
	135 Move W3, [X20+344]
	136 Add X1, X20, 72
	137 Add X0, X31, 128
	138 Call XRGeneralGrabTransformer.AdjustPositionForPermittedAxes, X0, X1, X2, X3
	139 Move [X19], S0
	140 Move [X19+8], S1
	141 Move [X19+8], S2
	142 Move X20, [X31+224]
	143 Move X19, [X31+232]
	144 Move X22, [X31+208]
	145 Move X21, [X31+216]
	146 Move X30, [X31+192]
	147 Add X31, X31, 240
	148 Return 
	149 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03BAD40C LDR X24, [X31 + 0xD0]
	0x03BAD410 MOV X23, X7
	0x03BAD414 MOV X25, X6
	0x03BAD418 STR X8, [X31]
	0x03BAD41C AND W8, W5, 0x1
	0x03BAD420 STRB W8, [X31 + 0x6C]
	0x03BAD424 LDRB W8, [X21 + 0xC9E]
	0x03BAD428 LDR X19, [X19 + 0x838]
	0x03BAD42C LDR X20, [X20 + 0x7B8]
	0x03BAD430 MOV X26, X4
	0x03BAD434 MOV X27, X3
	0x03BAD438 MOV X28, X2
	0x03BAD43C MOV X29, X1
	0x03BAD440 TBNZ X8, 0x0, 0x3BAD47C
	0x03BAD444 ADRP X0, 0x546000
	0x03BAD448 LDR X0, [X0 + 0xB58]
	0x03BAD44C BL 0x1C16CF4

ISIL:
	001 Move X8, -51109888
	002 Move V0, [X8+1432]
	003 Move X8, -51113984
	004 Move X9, -51109888
	005 Move V1, [X8+4056]
	006 Move [X0+32], D0
	007 Move V0, [X9+1256]
	008 Move W8, 1
	009 Move W9, 0x3E800000
	010 Move X1, X31
	011 Move [X0+48], D1
	012 Move [X0+40], W8
	013 Move [X0+44], W8
	014 Move [X0+56], W8
	015 Move [X0+60], D0
	016 Move [X0+68], W9
	017 Call MonoBehaviour..ctor, X0
	018 Return 

Method: System.Void ComputeNewObjectPosition$BurstManaged(in Unity.Mathematics.float3 interactorPosition, in Unity.Mathematics.quaternion interactorRotation, in Unity.Mathematics.quaternion objectRotation, in Unity.Mathematics.float3 objectScale, System.Boolean trackRotation, in Unity.Mathematics.float3 offsetPosition, in Unity.Mathematics.float3 objectLocalGrabPoint, in Unity.Mathematics.float3 interactorLocalGrabPoint, out UnityEngine.Vector3 newPosition)

Disassembly:
	0x03BAD450 ADRP X0, 0x546000
	0x03BAD454 LDR X0, [X0 + 0x5A0]
	0x03BAD458 BL 0x1C16CF4
	0x03BAD45C ADRP X0, 0x571000
	0x03BAD460 LDR X0, [X0 + 0x838]
	0x03BAD464 BL 0x1C16CF4
	0x03BAD468 ADRP X0, 0x54C000
	0x03BAD46C LDR X0, [X0 + 0x7B8]
	0x03BAD470 BL 0x1C16CF4
	0x03BAD474 MOVZ W8, 0x1
	0x03BAD478 STRB W8, [X21 + 0xC9E]
	0x03BAD47C LDR X0, [X19]
	0x03BAD480 MOVI V0.2D, 0x0
	0x03BAD484 MOV X1, X29
	0x03BAD488 STUR V0, [X31 + 0x58]
	0x03BAD48C STUR V0, [X31 + 0x48]
	0x03BAD490 STUR V0, [X31 + 0x38]
	0x03BAD494 BL 0x1C16E04
	0x03BAD498 LDR X8, [X20]
	0x03BAD49C STR X0, [X31 + 0x18]
	0x03BAD4A0 MOV X1, X28
	0x03BAD4A4 MOV X0, X8
	0x03BAD4A8 BL 0x1C16E04
	0x03BAD4AC LDR X8, [X20]
	0x03BAD4B0 STR X0, [X31 + 0x20]
	0x03BAD4B4 MOV X1, X27
	0x03BAD4B8 MOV X0, X8
	0x03BAD4BC BL 0x1C16E04
	0x03BAD4C0 LDR X8, [X19]
	0x03BAD4C4 STR X0, [X31 + 0x28]
	0x03BAD4C8 MOV X1, X26
	0x03BAD4CC MOV X0, X8
	0x03BAD4D0 BL 0x1C16E04
	0x03BAD4D4 ADRP X8, 0x546000
	0x03BAD4D8 LDR X8, [X8 + 0xB58]
	0x03BAD4DC STR X0, [X31 + 0x30]
	0x03BAD4E0 ADD X1, X31, 0x6C
	0x03BAD4E4 LDR X8, [X8]
	0x03BAD4E8 MOV X0, X8
	0x03BAD4EC BL 0x1C16E04
	0x03BAD4F0 LDR X8, [X19]
	0x03BAD4F4 STR X0, [X31 + 0x38]
	0x03BAD4F8 MOV X1, X25
	0x03BAD4FC MOV X0, X8
	0x03BAD500 BL 0x1C16E04
	0x03BAD504 LDR X8, [X19]
	0x03BAD508 STR X0, [X31 + 0x40]
	0x03BAD50C MOV X1, X23
	0x03BAD510 MOV X0, X8
	0x03BAD514 BL 0x1C16E04
	0x03BAD518 LDR X8, [X19]
	0x03BAD51C STR X0, [X31 + 0x48]
	0x03BAD520 MOV X1, X24
	0x03BAD524 MOV X0, X8
	0x03BAD528 BL 0x1C16E04
	0x03BAD52C ADRP X8, 0x546000
	0x03BAD530 LDR X8, [X8 + 0x5A0]
	0x03BAD534 STR X0, [X31 + 0x50]
	0x03BAD538 MOV X1, X22
	0x03BAD53C LDR X8, [X8]
	0x03BAD540 MOV X0, X8
	0x03BAD544 BL 0x1C16E04
	0x03BAD548 STR X0, [X31 + 0x58]
	0x03BAD54C LDP X2, X0, [X31]
	0x03BAD550 LDR X3, [X31 + 0x10]
	0x03BAD554 ADD X1, X31, 0x18
	0x03BAD558 BL 0x1C16CB0
	0x03BAD55C LDP X20, X19, [X31 + 0xC0]
	0x03BAD560 LDP X22, X21, [X31 + 0xB0]
	0x03BAD564 LDP X24, X23, [X31 + 0xA0]
	0x03BAD568 LDP X26, X25, [X31 + 0x90]
	0x03BAD56C LDP X28, X27, [X31 + 0x80]
	0x03BAD570 LDP X29, X30, [X31 + 0x70]
	0x03BAD574 ADD X31, X31, 0xD0
	0x03BAD578 RET
	0x03BAD57C MOV X0, X1
	0x03BAD580 MOV X1, X31
	0x03BAD584 B 0x1C16CB4
	0x03BAD588 STP X30, X23, [X31 - 0x30]!
	0x03BAD58C STP X22, X21, [X31 + 0x10]
	0x03BAD590 STP X20, X19, [X31 + 0x20]
	0x03BAD594 ADRP X20, 0x835000
	0x03BAD598 ADRP X23, 0x5AF000
	0x03BAD59C LDRB W8, [X20 + 0xC9F]
	0x03BAD5A0 LDR X23, [X23 + 0xDF8]
	0x03BAD5A4 MOV X19, X0
	0x03BAD5A8 TBNZ X8, 0x0, 0x3BAD5E4
	0x03BAD5AC ADRP X0, 0x56E000
	0x03BAD5B0 LDR X0, [X0 + 0x848]
	0x03BAD5B4 BL 0x1C16CF4
	0x03BAD5B8 ADRP X0, 0x5AF000
	0x03BAD5BC LDR X0, [X0 + 0xDF8]
	0x03BAD5C0 BL 0x1C16CF4
	0x03BAD5C4 ADRP X0, 0x5AF000
	0x03BAD5C8 LDR X0, [X0 + 0xE18]
	0x03BAD5CC BL 0x1C16CF4
	0x03BAD5D0 ADRP X0, 0x5AF000
	0x03BAD5D4 LDR X0, [X0 + 0xE20]
	0x03BAD5D8 BL 0x1C16CF4
	0x03BAD5DC MOVZ W8, 0x1
	0x03BAD5E0 STRB W8, [X20 + 0xC9F]
	0x03BAD5E4 LDR X8, [X23]
	0x03BAD5E8 LDR W9, [X8 + 0xE0]
	0x03BAD5EC CBNZ W9, 0x3BAD5FC
	0x03BAD5F0 MOV X0, X8
	0x03BAD5F4 BL 0x1C16DFC
	0x03BAD5F8 LDR X8, [X23]
	0x03BAD5FC LDR X9, [X8 + 0xB8]
	0x03BAD600 LDR X10, [X9]
	0x03BAD604 CBNZ X10, 0x3BAD674
	0x03BAD608 LDR W10, [X8 + 0xE0]
	0x03BAD60C CBNZ W10, 0x3BAD620
	0x03BAD610 MOV X0, X8
	0x03BAD614 BL 0x1C16DFC
	0x03BAD618 LDR X8, [X23]
	0x03BAD61C LDR X9, [X8 + 0xB8]
	0x03BAD620 ADRP X8, 0x56E000
	0x03BAD624 LDR X20, [X9 + 0x8]
	0x03BAD628 LDR X8, [X8 + 0x848]
	0x03BAD62C LDR X0, [X8]
	0x03BAD630 ADRP X8, 0x5AF000
	0x03BAD634 LDR X8, [X8 + 0xE20]
	0x03BAD638 LDR X21, [X8]
	0x03BAD63C ADRP X8, 0x5AF000
	0x03BAD640 LDR X8, [X8 + 0xE18]
	0x03BAD644 LDR W9, [X0 + 0xE0]
	0x03BAD648 LDR X22, [X8]
	0x03BAD64C CBNZ W9, 0x3BAD654
	0x03BAD650 BL 0x1C16DFC
	0x03BAD654 MOV X0, X20
	0x03BAD658 MOV X1, X21
	0x03BAD65C MOV X2, X22
	0x03BAD660 MOV X3, X31
	0x03BAD664 BL 0x36FAD70
	0x03BAD668 LDR X8, [X23]
	0x03BAD66C LDR X9, [X8 + 0xB8]
	0x03BAD670 STR X0, [X9]
	0x03BAD674 LDR W9, [X8 + 0xE0]
	0x03BAD678 CBNZ W9, 0x3BAD688
	0x03BAD67C MOV X0, X8
	0x03BAD680 BL 0x1C16DFC
	0x03BAD684 LDR X8, [X23]
	0x03BAD688 LDR X8, [X8 + 0xB8]
	0x03BAD68C LDP X22, X21, [X31 + 0x10]
	0x03BAD690 LDR X8, [X8]
	0x03BAD694 STR X8, [X19]
	0x03BAD698 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X19
	012 Move S4, [X5]
	013 Move S5, [X5+4]
	014 Move V6, [X5+8]
	015 Move S7, [X3]
	016 Move S16, [X3+4]
	017 Move V17, [X3+8]
	018 Move S0, [X1]
	019 Move S1, [X1+4]
	020 Move S2, [X1+8]
	021 Move S3, [X1+12]
	022 Move S19, [X6]
	023 Move S20, [X6+4]
	024 Move V21, [X6+8]
	025 Move S18, [X7]
	026 Move S22, [X7+4]
	027 Move V23, [X7+8]
	028 Multiply S5, S5, S16
	029 Multiply S6, S6, S17
	030 Multiply S4, S4, S7
	031 Multiply S8, S6, S1
	032 Multiply S11, S5, S2
	033 Multiply S7, S7, S19
	034 Multiply S16, S16, S20
	035 Multiply S17, S17, S21
	036 Multiply S19, S0, S22
	037 Multiply S20, S1, S23
	038 Multiply S21, S2, S18
	039 Multiply S28, S1, S18
	040 Multiply S29, S2, S22
	041 Multiply S30, S0, S23
	042 Multiply S31, S5, S0
	043 Multiply S9, S4, S2
	044 Multiply S10, S4, S1
	045 Multiply S12, S0, S6
	046 Subtract S8, S8, S11
	047 Move S24, [X2]
	048 Move S25, [X2+4]
	049 Move S26, [X2+8]
	050 Move S27, [X2+12]
	051 Subtract S19, S19, S28
	052 Subtract S20, S20, S29
	053 Subtract S21, S21, S30
	054 Subtract S31, S31, S10
	055 Subtract S9, S9, S12
	056 Add S8, S8, S8
	057 Move [X31+4], S18
	058 Add S20, S20, S20
	059 Add S21, S21, S21
	060 Add S19, S19, S19
	061 Add S9, S9, S9
	062 Add S31, S31, S31
	063 Multiply S18, S3, S8
	064 Multiply S10, S3, S20
	065 Multiply S11, S3, S21
	066 Multiply S12, S3, S19
	067 Move [X31], S18
	068 Multiply S18, S3, S9
	069 Multiply S3, S3, S31
	070 Move [X31+8], S18
	071 Move [X31+16], S3
	072 Move V18, [X31+4]
	073 Multiply S28, S16, S24
	074 Multiply S29, S17, S25
	075 Multiply S30, S7, S26
	076 Multiply S13, S7, S25
	077 Multiply S14, S16, S26
	078 Multiply S15, S17, S24
	079 Subtract S28, S28, S13
	080 Subtract S29, S29, S14
	081 Subtract S30, S30, S15
	082 Multiply S13, S0, S21
	083 Multiply S14, S1, S19
	084 Multiply S15, S2, S20
	085 Multiply S20, S1, S20
	086 Multiply S21, S2, S21
	087 Multiply S19, S0, S19
	088 Add S29, S29, S29
	089 Add S30, S30, S30
	090 Add S28, S28, S28
	091 Multiply S3, S0, S9
	092 Multiply S9, S2, S9
	093 Multiply S2, S2, S8
	094 Multiply S8, S1, S8
	095 Multiply S1, S1, S31
	096 Multiply S0, S0, S31
	097 Add S18, S18, S10
	098 Add S22, S22, S11
	099 Add S23, S23, S12
	100 Subtract S20, S13, S20
	101 Subtract S21, S14, S21
	102 Subtract S19, S15, S19
	103 Multiply S31, S27, S29
	104 Multiply S10, S27, S30
	105 Multiply S11, S24, S30
	106 Multiply S30, S26, S30
	107 Multiply S26, S26, S29
	108 Multiply S29, S25, S29
	109 Multiply S25, S25, S28
	110 Multiply S24, S24, S28
	111 Subtract S0, S2, S0
	112 Add S2, S18, S21
	113 Add S18, S22, S19
	114 Add S19, S23, S20
	115 Subtract S21, S25, S30
	116 Move V22, [X31]
	117 Subtract S23, S26, S24
	118 Move S25, [X31+8]
	119 Move S26, [X31+12]
	120 Subtract S1, S1, S9
	121 Add S22, S4, S22
	122 Add S1, S22, S1
	123 Add S25, S5, S25
	124 Move S22, [X0]
	125 Move S24, [X0+4]
	126 Add S0, S25, S0
	127 Move V25, [X0+8]
	128 Multiply S27, S27, S28
	129 Subtract S3, S3, S8
	130 Add S26, S6, S26
	131 Add S7, S7, S31
	132 Add S16, S16, S10
	133 Add S17, S17, S27
	134 Subtract S20, S11, S29
	135 And W31, W4, 1
	136 Add S3, S26, S3
	137 Move X19, [X31+96]
	138 Add S7, S7, S21
	139 Add S16, S16, S23
	140 Add S17, S17, S20
	141 NotImplemented "Instruction FCSEL not yet implemented."
	142 NotImplemented "Instruction FCSEL not yet implemented."
	143 NotImplemented "Instruction FCSEL not yet implemented."
	144 Subtract S2, S2, S7
	145 Subtract S4, S18, S16
	146 Subtract S5, S19, S17
	147 Add S1, S22, S1
	148 Add S6, S24, S0
	149 Add S3, S25, S3
	150 Add S0, S1, S2
	151 Add S1, S6, S4
	152 Add S2, S3, S5
	153 Move X0, X31
	154 Call float3.op_Implicit, X0
	155 Move [X19], S0
	156 Move [X19+8], S1
	157 Move [X19+8], S2
	158 Move X30, [X31+80]
	159 Move X19, [X31+88]
	160 Move D9, [X31+64]
	161 Move D8, [X31+72]
	162 Move D11, [X31+48]
	163 Move D10, [X31+56]
	164 Move D13, [X31+32]
	165 Move D12, [X31+40]
	166 Move D15, [X31+16]
	167 Move D14, [X31+24]
	168 Add X31, X31, 96
	169 Return 

Method: System.Void AdjustPositionForPermittedAxesBurst$BurstManaged(in UnityEngine.Vector3 targetPosition, in UnityEngine.Pose originalObjectPose, UnityEngine.XR.Interaction.Toolkit.Transformers.XRGeneralGrabTransformer/ConstrainedAxisDisplacementMode axisDisplacementMode, System.Boolean hasX, System.Boolean hasY, System.Boolean hasZ, out UnityEngine.Vector3 adjustedTargetPosition)

Disassembly:
	0x03BAD69C LDP X30, X23, [X31], #0x30
	0x03BAD6A0 RET
	0x03BAD6A4 STR X30, [X31 - 0x20]!
	0x03BAD6A8 STP X20, X19, [X31 + 0x10]
	0x03BAD6AC ADRP X20, 0x835000
	0x03BAD6B0 ADRP X19, 0x5AF000
	0x03BAD6B4 LDRB W8, [X20 + 0xCA0]
	0x03BAD6B8 LDR X19, [X19 + 0xDF8]
	0x03BAD6BC TBNZ X8, 0x0, 0x3BAD6D4
	0x03BAD6C0 ADRP X0, 0x5AF000
	0x03BAD6C4 LDR X0, [X0 + 0xDF8]
	0x03BAD6C8 BL 0x1C16CF4
	0x03BAD6CC MOVZ W8, 0x1
	0x03BAD6D0 STRB W8, [X20 + 0xCA0]
	0x03BAD6D4 LDR X0, [X19]
	0x03BAD6D8 STR X31, [X31 + 0x8]
	0x03BAD6DC LDR W8, [X0 + 0xE0]
	0x03BAD6E0 CBNZ W8, 0x3BAD6E8
	0x03BAD6E4 BL 0x1C16DFC
	0x03BAD6E8 ADD X0, X31, 0x8
	0x03BAD6EC BL 0x3BAD588
	0x03BAD6F0 LDR X0, [X31 + 0x8]
	0x03BAD6F4 LDP X20, X19, [X31 + 0x10]
	0x03BAD6F8 LDR X30, [X31], #0x20
	0x03BAD6FC RET
	0x03BAD700 STP X30, X21, [X31 - 0x20]!
	0x03BAD704 STP X20, X19, [X31 + 0x10]
	0x03BAD708 ADRP X21, 0x835000
	0x03BAD70C ADRP X19, 0x5AF000
	0x03BAD710 ADRP X20, 0x56E000
	0x03BAD714 LDRB W8, [X21 + 0xCA1]
	0x03BAD718 LDR X19, [X19 + 0xE28]
	0x03BAD71C LDR X20, [X20 + 0x848]
	0x03BAD720 TBNZ X8, 0x0, 0x3BAD750
	0x03BAD724 ADRP X0, 0x56E000
	0x03BAD728 LDR X0, [X0 + 0x848]
	0x03BAD72C BL 0x1C16CF4
	0x03BAD730 ADRP X0, 0x5AF000
	0x03BAD734 LDR X0, [X0 + 0xDF8]
	0x03BAD738 BL 0x1C16CF4
	0x03BAD73C ADRP X0, 0x5AF000
	0x03BAD740 LDR X0, [X0 + 0xE28]
	0x03BAD744 BL 0x1C16CF4
	0x03BAD748 MOVZ W8, 0x1
	0x03BAD74C STRB W8, [X21 + 0xCA1]
	0x03BAD750 LDR X0, [X20]
	0x03BAD754 ADRP X20, 0x5AF000
	0x03BAD758 LDR X19, [X19]
	0x03BAD75C LDR W8, [X0 + 0xE0]
	0x03BAD760 LDR X20, [X20 + 0xDF8]
	0x03BAD764 CBNZ W8, 0x3BAD76C
	0x03BAD768 BL 0x1C16DFC
	0x03BAD76C MOV X0, X19
	0x03BAD770 MOV X1, X31
	0x03BAD774 BL 0x36FA754
	0x03BAD778 LDR X8, [X20]
	0x03BAD77C MOV X19, X0
	0x03BAD780 LDR W9, [X8 + 0xE0]
	0x03BAD784 CBNZ W9, 0x3BAD794
	0x03BAD788 MOV X0, X8
	0x03BAD78C BL 0x1C16DFC
	0x03BAD790 LDR X8, [X20]
	0x03BAD794 LDR X8, [X8 + 0xB8]
	0x03BAD798 STR X19, [X8 + 0x8]
	0x03BAD79C LDP X20, X19, [X31 + 0x10]
	0x03BAD7A0 LDP X30, X21, [X31], #0x20
	0x03BAD7A4 RET
	0x03BAD7A8 RET
	0x03BAD7AC B 0x3BAD700
	0x03BAD7B0 STP X30, X21, [X31 - 0x20]!
	0x03BAD7B4 STP X20, X19, [X31 + 0x10]
	0x03BAD7B8 LDR X8, [X2 + 0x8]
	0x03BAD7BC STP X1, X2, [X0 + 0x20]
	0x03BAD7C0 MOV X19, X0
	0x03BAD7C4 MOV X20, X1
	0x03BAD7C8 STR X8, [X0 + 0x10]
	0x03BAD7CC LDRB W21, [X2 + 0x52]
	0x03BAD7D0 STR X0, [X0 + 0x40]
	0x03BAD7D4 MOV X0, X2
	0x03BAD7D8 BL 0x1C16D84
	0x03BAD7DC TBZ X0, 0x0, 0x3BAD7F4
	0x03BAD7E0 CMP W21, 0x7
	0x03BAD7E4 B.NE 0x3BAD810
	0x03BAD7E8 ADRP X8, 0xFFFFFFFFFE053000
	0x03BAD7EC ADD X8, X8, 0x464
	0x03BAD7F0 B 0x3BAD804
	0x03BAD7F4 CMP W21, 0x6
	0x03BAD7F8 B.NE 0x3BAD80C
	0x03BAD7FC ADRP X8, 0xFFFFFFFFFE053000
	0x03BAD800 ADD X8, X8, 0x434
	0x03BAD804 STR X8, [X19 + 0x18]
	0x03BAD808 B 0x3BAD820
	0x03BAD80C CBZ X20, 0x3BAD838
	0x03BAD810 LDR X8, [X19 + 0x10]
	0x03BAD814 LDR X9, [X19 + 0x20]
	0x03BAD818 STR X8, [X19 + 0x18]
	0x03BAD81C STR X9, [X19 + 0x40]
	0x03BAD820 ADRP X8, 0xFFFFFFFFFE053000
	0x03BAD824 ADD X8, X8, 0x398
	0x03BAD828 STR X8, [X19 + 0x38]
	0x03BAD82C LDP X20, X19, [X31 + 0x10]
	0x03BAD830 LDP X30, X21, [X31], #0x20
	0x03BAD834 RET
	0x03BAD838 ADRP X1, 0xFFFFFFFFFCF6E000
	0x03BAD83C ADD X1, X1, 0xEE3
	0x03BAD840 MOV X0, X31
	0x03BAD844 BL 0x1C16F3C
	0x03BAD848 MOV X1, X31
	0x03BAD84C BL 0x1C16DEC
	0x03BAD850 LDR X8, [X0 + 0x40]
	0x03BAD854 LDR X9, [X0 + 0x18]
	0x03BAD858 LDR X10, [X0 + 0x28]
	0x03BAD85C AND W4, W4, 0x1
	0x03BAD860 AND W5, W5, 0x1
	0x03BAD864 AND W6, W6, 0x1
	0x03BAD868 MOV X0, X8
	0x03BAD86C STR X10, [X31]
	0x03BAD870 BR X9
	0x03BAD874 SUB X31, X31, 0xB0
	0x03BAD878 STP X29, X30, [X31 + 0x50]
	0x03BAD87C STP X28, X27, [X31 + 0x60]
	0x03BAD880 STP X26, X25, [X31 + 0x70]
	0x03BAD884 STP X24, X23, [X31 + 0x80]
	0x03BAD888 STP X22, X21, [X31 + 0x90]
	0x03BAD88C STP X20, X19, [X31 + 0xA0]
	0x03BAD890 AND W8, W4, 0x1
	0x03BAD894 AND W9, W5, 0x1
	0x03BAD898 AND W10, W6, 0x1
	0x03BAD89C STR W3, [X31 + 0x4C]
	0x03BAD8A0 ADRP X29, 0x835000
	0x03BAD8A4 STRB W8, [X31 + 0x48]
	0x03BAD8A8 STRB W9, [X31 + 0x44]
	0x03BAD8AC STRB W10, [X31 + 0x40]
	0x03BAD8B0 ADRP X25, 0x546000
	0x03BAD8B4 ADRP X28, 0x56E000
	0x03BAD8B8 ADRP X27, 0x5AF000
	0x03BAD8BC ADRP X26, 0x546000
	0x03BAD8C0 LDP X22, X19, [X31 + 0xB0]
	0x03BAD8C4 LDRB W8, [X29 + 0xCA3]
	0x03BAD8C8 LDR X25, [X25 + 0x5A0]
	0x03BAD8CC LDR X28, [X28 + 0x610]
	0x03BAD8D0 LDR X27, [X27 + 0xE30]
	0x03BAD8D4 LDR X26, [X26 + 0xB58]
	0x03BAD8D8 MOV X21, X7
	0x03BAD8DC MOV X23, X2
	0x03BAD8E0 MOV X24, X1
	0x03BAD8E4 MOV X20, X0
	0x03BAD8E8 TBNZ X8, 0x0, 0x3BAD924
	0x03BAD8EC ADRP X0, 0x546000
	0x03BAD8F0 LDR X0, [X0 + 0xB58]
	0x03BAD8F4 BL 0x1C16CF4
	0x03BAD8F8 ADRP X0, 0x5AF000
	0x03BAD8FC LDR X0, [X0 + 0xE30]
	0x03BAD900 BL 0x1C16CF4
	0x03BAD904 ADRP X0, 0x56E000
	0x03BAD908 LDR X0, [X0 + 0x610]
	0x03BAD90C BL 0x1C16CF4
	0x03BAD910 ADRP X0, 0x546000
	0x03BAD914 LDR X0, [X0 + 0x5A0]
	0x03BAD918 BL 0x1C16CF4
	0x03BAD91C MOVZ W8, 0x1
	0x03BAD920 STRB W8, [X29 + 0xCA3]
	0x03BAD924 LDR X0, [X25]
	0x03BAD928 MOVI V0.2D, 0x0
	0x03BAD92C MOV X1, X24
	0x03BAD930 STP V0, V0, [X31 + 0x20]
	0x03BAD934 STR V0, [X31 + 0x1]
	0x03BAD938 BL 0x1C16E04
	0x03BAD93C LDR X8, [X28]
	0x03BAD940 STR X0, [X31]
	0x03BAD944 MOV X1, X23
	0x03BAD948 MOV X0, X8
	0x03BAD94C BL 0x1C16E04
	0x03BAD950 LDR X8, [X27]
	0x03BAD954 STR X0, [X31 + 0x8]
	0x03BAD958 ADD X1, X31, 0x4C
	0x03BAD95C MOV X0, X8
	0x03BAD960 BL 0x1C16E04
	0x03BAD964 LDR X8, [X26]
	0x03BAD968 STR X0, [X31 + 0x10]
	0x03BAD96C ADD X1, X31, 0x48
	0x03BAD970 MOV X0, X8
	0x03BAD974 BL 0x1C16E04
	0x03BAD978 LDR X8, [X26]
	0x03BAD97C STR X0, [X31 + 0x18]
	0x03BAD980 ADD X1, X31, 0x44
	0x03BAD984 MOV X0, X8
	0x03BAD988 BL 0x1C16E04
	0x03BAD98C LDR X8, [X26]
	0x03BAD990 STR X0, [X31 + 0x20]
	0x03BAD994 ADD X1, X31, 0x40
	0x03BAD998 MOV X0, X8
	0x03BAD99C BL 0x1C16E04
	0x03BAD9A0 LDR X8, [X25]
	0x03BAD9A4 STR X0, [X31 + 0x28]
	0x03BAD9A8 MOV X1, X21
	0x03BAD9AC MOV X0, X8
	0x03BAD9B0 BL 0x1C16E04
	0x03BAD9B4 STR X0, [X31 + 0x30]
	0x03BAD9B8 ADD X1, X31, 0x0
	0x03BAD9BC MOV X0, X20
	0x03BAD9C0 MOV X2, X22
	0x03BAD9C4 MOV X3, X19
	0x03BAD9C8 BL 0x1C16CB0
	0x03BAD9CC LDP X20, X19, [X31 + 0xA0]
	0x03BAD9D0 LDP X22, X21, [X31 + 0x90]
	0x03BAD9D4 LDP X24, X23, [X31 + 0x80]
	0x03BAD9D8 LDP X26, X25, [X31 + 0x70]
	0x03BAD9DC LDP X28, X27, [X31 + 0x60]
	0x03BAD9E0 LDP X29, X30, [X31 + 0x50]
	0x03BAD9E4 ADD X31, X31, 0xB0
	0x03BAD9E8 RET
	0x03BAD9EC MOV X0, X1
	0x03BAD9F0 MOV X1, X31
	0x03BAD9F4 B 0x1C16CB4
	0x03BAD9F8 STP X30, X23, [X31 - 0x30]!
	0x03BAD9FC STP X22, X21, [X31 + 0x10]
	0x03BADA00 STP X20, X19, [X31 + 0x20]
	0x03BADA04 ADRP X20, 0x835000
	0x03BADA08 ADRP X23, 0x5AF000
	0x03BADA0C LDRB W8, [X20 + 0xCA4]
	0x03BADA10 LDR X23, [X23 + 0xE00]
	0x03BADA14 MOV X19, X0
	0x03BADA18 TBNZ X8, 0x0, 0x3BADA54
	0x03BADA1C ADRP X0, 0x5AF000
	0x03BADA20 LDR X0, [X0 + 0xE00]
	0x03BADA24 BL 0x1C16CF4
	0x03BADA28 ADRP X0, 0x5AF000
	0x03BADA2C LDR X0, [X0 + 0xE38]
	0x03BADA30 BL 0x1C16CF4
	0x03BADA34 ADRP X0, 0x56E000
	0x03BADA38 LDR X0, [X0 + 0x848]
	0x03BADA3C BL 0x1C16CF4
	0x03BADA40 ADRP X0, 0x5AF000
	0x03BADA44 LDR X0, [X0 + 0xE40]
	0x03BADA48 BL 0x1C16CF4
	0x03BADA4C MOVZ W8, 0x1
	0x03BADA50 STRB W8, [X20 + 0xCA4]
	0x03BADA54 LDR X8, [X23]
	0x03BADA58 LDR W9, [X8 + 0xE0]
	0x03BADA5C CBNZ W9, 0x3BADA6C
	0x03BADA60 MOV X0, X8
	0x03BADA64 BL 0x1C16DFC
	0x03BADA68 LDR X8, [X23]
	0x03BADA6C LDR X9, [X8 + 0xB8]
	0x03BADA70 LDR X10, [X9]
	0x03BADA74 CBNZ X10, 0x3BADAE4
	0x03BADA78 LDR W10, [X8 + 0xE0]
	0x03BADA7C CBNZ W10, 0x3BADA90
	0x03BADA80 MOV X0, X8
	0x03BADA84 BL 0x1C16DFC
	0x03BADA88 LDR X8, [X23]
	0x03BADA8C LDR X9, [X8 + 0xB8]
	0x03BADA90 ADRP X8, 0x56E000
	0x03BADA94 LDR X20, [X9 + 0x8]
	0x03BADA98 LDR X8, [X8 + 0x848]
	0x03BADA9C LDR X0, [X8]
	0x03BADAA0 ADRP X8, 0x5AF000
	0x03BADAA4 LDR X8, [X8 + 0xE40]
	0x03BADAA8 LDR X21, [X8]
	0x03BADAAC ADRP X8, 0x5AF000
	0x03BADAB0 LDR X8, [X8 + 0xE38]
	0x03BADAB4 LDR W9, [X0 + 0xE0]
	0x03BADAB8 LDR X22, [X8]
	0x03BADABC CBNZ W9, 0x3BADAC4
	0x03BADAC0 BL 0x1C16DFC
	0x03BADAC4 MOV X0, X20
	0x03BADAC8 MOV X1, X21
	0x03BADACC MOV X2, X22
	0x03BADAD0 MOV X3, X31
	0x03BADAD4 BL 0x36FAD70
	0x03BADAD8 LDR X8, [X23]
	0x03BADADC LDR X9, [X8 + 0xB8]
	0x03BADAE0 STR X0, [X9]
	0x03BADAE4 LDR W9, [X8 + 0xE0]
	0x03BADAE8 CBNZ W9, 0x3BADAF8
	0x03BADAEC MOV X0, X8
	0x03BADAF0 BL 0x1C16DFC
	0x03BADAF4 LDR X8, [X23]
	0x03BADAF8 LDR X8, [X8 + 0xB8]
	0x03BADAFC LDP X22, X21, [X31 + 0x10]
	0x03BADB00 LDR X8, [X8]
	0x03BADB04 STR X8, [X19]
	0x03BADB08 LDP X20, X19, [X31 + 0x20]
	0x03BADB0C LDP X30, X23, [X31], #0x30
	0x03BADB10 RET
	0x03BADB14 STR X30, [X31 - 0x20]!
	0x03BADB18 STP X20, X19, [X31 + 0x10]
	0x03BADB1C ADRP X20, 0x835000
	0x03BADB20 ADRP X19, 0x5AF000
	0x03BADB24 LDRB W8, [X20 + 0xCA5]
	0x03BADB28 LDR X19, [X19 + 0xE00]
	0x03BADB2C TBNZ X8, 0x0, 0x3BADB44
	0x03BADB30 ADRP X0, 0x5AF000
	0x03BADB34 LDR X0, [X0 + 0xE00]
	0x03BADB38 BL 0x1C16CF4
	0x03BADB3C MOVZ W8, 0x1
	0x03BADB40 STRB W8, [X20 + 0xCA5]
	0x03BADB44 LDR X0, [X19]
	0x03BADB48 STR X31, [X31 + 0x8]
	0x03BADB4C LDR W8, [X0 + 0xE0]
	0x03BADB50 CBNZ W8, 0x3BADB58
	0x03BADB54 BL 0x1C16DFC
	0x03BADB58 ADD X0, X31, 0x8
	0x03BADB5C BL 0x3BAD9F8
	0x03BADB60 LDR X0, [X31 + 0x8]
	0x03BADB64 LDP X20, X19, [X31 + 0x10]
	0x03BADB68 LDR X30, [X31], #0x20
	0x03BADB6C RET
	0x03BADB70 STP X30, X21, [X31 - 0x20]!
	0x03BADB74 STP X20, X19, [X31 + 0x10]
	0x03BADB78 ADRP X21, 0x835000
	0x03BADB7C ADRP X19, 0x5AF000
	0x03BADB80 ADRP X20, 0x56E000
	0x03BADB84 LDRB W8, [X21 + 0xCA6]
	0x03BADB88 LDR X19, [X19 + 0xE48]
	0x03BADB8C LDR X20, [X20 + 0x848]
	0x03BADB90 TBNZ X8, 0x0, 0x3BADBC0
	0x03BADB94 ADRP X0, 0x5AF000
	0x03BADB98 LDR X0, [X0 + 0xE00]
	0x03BADB9C BL 0x1C16CF4
	0x03BADBA0 ADRP X0, 0x56E000
	0x03BADBA4 LDR X0, [X0 + 0x848]
	0x03BADBA8 BL 0x1C16CF4
	0x03BADBAC ADRP X0, 0x5AF000
	0x03BADBB0 LDR X0, [X0 + 0xE48]
	0x03BADBB4 BL 0x1C16CF4
	0x03BADBB8 MOVZ W8, 0x1
	0x03BADBBC STRB W8, [X21 + 0xCA6]
	0x03BADBC0 LDR X0, [X20]
	0x03BADBC4 ADRP X20, 0x5AF000
	0x03BADBC8 LDR X19, [X19]
	0x03BADBCC LDR W8, [X0 + 0xE0]
	0x03BADBD0 LDR X20, [X20 + 0xE00]
	0x03BADBD4 CBNZ W8, 0x3BADBDC
	0x03BADBD8 BL 0x1C16DFC
	0x03BADBDC MOV X0, X19
	0x03BADBE0 MOV X1, X31
	0x03BADBE4 BL 0x36FA754
	0x03BADBE8 LDR X8, [X20]
	0x03BADBEC MOV X19, X0
	0x03BADBF0 LDR W9, [X8 + 0xE0]
	0x03BADBF4 CBNZ W9, 0x3BADC04
	0x03BADBF8 MOV X0, X8
	0x03BADBFC BL 0x1C16DFC
	0x03BADC00 LDR X8, [X20]
	0x03BADC04 LDR X8, [X8 + 0xB8]
	0x03BADC08 STR X19, [X8 + 0x8]
	0x03BADC0C LDP X20, X19, [X31 + 0x10]
	0x03BADC10 LDP X30, X21, [X31], #0x20
	0x03BADC14 RET
	0x03BADC18 RET
	0x03BADC1C B 0x3BADB70
	0x03BADC20 STP X30, X21, [X31 - 0x20]!
	0x03BADC24 STP X20, X19, [X31 + 0x10]
	0x03BADC28 LDR X8, [X2 + 0x8]
	0x03BADC2C STP X1, X2, [X0 + 0x20]
	0x03BADC30 MOV X19, X0
	0x03BADC34 MOV X20, X1
	0x03BADC38 STR X8, [X0 + 0x10]
	0x03BADC3C LDRB W21, [X2 + 0x52]
	0x03BADC40 STR X0, [X0 + 0x40]
	0x03BADC44 MOV X0, X2
	0x03BADC48 BL 0x1C16D84
	0x03BADC4C TBZ X0, 0x0, 0x3BADC64
	0x03BADC50 CMP W21, 0x9
	0x03BADC54 B.NE 0x3BADC80
	0x03BADC58 ADRP X8, 0xFFFFFFFFFE053000
	0x03BADC5C ADD X8, X8, 0x594
	0x03BADC60 B 0x3BADC74
	0x03BADC64 CMP W21, 0x8
	0x03BADC68 B.NE 0x3BADC7C
	0x03BADC6C ADRP X8, 0xFFFFFFFFFE053000
	0x03BADC70 ADD X8, X8, 0x56C
	0x03BADC74 STR X8, [X19 + 0x18]
	0x03BADC78 B 0x3BADC90
	0x03BADC7C CBZ X20, 0x3BADCA8
	0x03BADC80 LDR X8, [X19 + 0x10]
	0x03BADC84 LDR X9, [X19 + 0x20]
	0x03BADC88 STR X8, [X19 + 0x18]
	0x03BADC8C STR X9, [X19 + 0x40]
	0x03BADC90 ADRP X8, 0xFFFFFFFFFE053000
	0x03BADC94 ADD X8, X8, 0x4BC
	0x03BADC98 STR X8, [X19 + 0x38]
	0x03BADC9C LDP X20, X19, [X31 + 0x10]
	0x03BADCA0 LDP X30, X21, [X31], #0x20
	0x03BADCA4 RET
	0x03BADCA8 ADRP X1, 0xFFFFFFFFFCF6E000
	0x03BADCAC ADD X1, X1, 0xEE3
	0x03BADCB0 MOV X0, X31
	0x03BADCB4 BL 0x1C16F3C
	0x03BADCB8 MOV X1, X31
	0x03BADCBC BL 0x1C16DEC
	0x03BADCC0 LDR X8, [X0 + 0x40]
	0x03BADCC4 LDR X9, [X0 + 0x18]
	0x03BADCC8 LDR X7, [X0 + 0x28]
	0x03BADCCC AND W3, W3, 0x1
	0x03BADCD0 MOV X0, X8
	0x03BADCD4 BR X9
	0x03BADCD8 SUB X31, X31, 0xD0
	0x03BADCDC STP X29, X30, [X31 + 0x70]
	0x03BADCE0 STP X28, X27, [X31 + 0x80]
	0x03BADCE4 STP X26, X25, [X31 + 0x90]
	0x03BADCE8 STP X24, X23, [X31 + 0xA0]
	0x03BADCEC STP X22, X21, [X31 + 0xB0]
	0x03BADCF0 STP X20, X19, [X31 + 0xC0]
	0x03BADCF4 AND W8, W3, 0x1
	0x03BADCF8 STR X7, [X31 + 0x8]
	0x03BADCFC STP S1, S0, [X31 + 0x64]
	0x03BADD00 ADRP X19, 0x835000
	0x03BADD04 STRB W8, [X31 + 0x6C]
	0x03BADD08 STR S2, [X31 + 0x60]
	0x03BADD0C ADRP X27, 0x546000
	0x03BADD10 ADRP X29, 0x546000
	0x03BADD14 ADRP X28, 0x546000
	0x03BADD18 LDR X21, [X31 + 0xD0]
	0x03BADD1C LDRB W8, [X19 + 0xCA8]
	0x03BADD20 LDR X27, [X27 + 0x5A0]
	0x03BADD24 LDR X29, [X29 + 0xB58]
	0x03BADD28 LDR X28, [X28 + 0xA90]
	0x03BADD2C MOV X20, X6
	0x03BADD30 MOV X23, X5
	0x03BADD34 MOV X24, X4
	0x03BADD38 MOV X25, X2
	0x03BADD3C MOV X26, X1
	0x03BADD40 MOV X22, X0
	0x03BADD44 TBNZ X8, 0x0, 0x3BADD74
	0x03BADD48 ADRP X0, 0x546000
	0x03BADD4C LDR X0, [X0 + 0xB58]
	0x03BADD50 BL 0x1C16CF4
	0x03BADD54 ADRP X0, 0x546000
	0x03BADD58 LDR X0, [X0 + 0xA90]
	0x03BADD5C BL 0x1C16CF4
	0x03BADD60 ADRP X0, 0x546000
	0x03BADD64 LDR X0, [X0 + 0x5A0]
	0x03BADD68 BL 0x1C16CF4
	0x03BADD6C MOVZ W8, 0x1
	0x03BADD70 STRB W8, [X19 + 0xCA8]
	0x03BADD74 LDR X0, [X27]
	0x03BADD78 MOVI V0.2D, 0x0
	0x03BADD7C MOV X1, X26
	0x03BADD80 STP V0, V0, [X31 + 0x40]
	0x03BADD84 STP V0, V0, [X31 + 0x20]
	0x03BADD88 BL 0x1C16E04
	0x03BADD8C LDR X8, [X27]
	0x03BADD90 STR X0, [X31 + 0x10]
	0x03BADD94 MOV X1, X25
	0x03BADD98 MOV X0, X8
	0x03BADD9C BL 0x1C16E04
	0x03BADDA0 LDR X8, [X29]
	0x03BADDA4 STR X0, [X31 + 0x18]
	0x03BADDA8 ADD X1, X31, 0x6C
	0x03BADDAC MOV X0, X8
	0x03BADDB0 BL 0x1C16E04
	0x03BADDB4 LDR X8, [X27]
	0x03BADDB8 STR X0, [X31 + 0x20]
	0x03BADDBC MOV X1, X24
	0x03BADDC0 MOV X0, X8
	0x03BADDC4 BL 0x1C16E04
	0x03BADDC8 LDR X8, [X27]
	0x03BADDCC STR X0, [X31 + 0x28]
	0x03BADDD0 MOV X1, X23
	0x03BADDD4 MOV X0, X8
	0x03BADDD8 BL 0x1C16E04
	0x03BADDDC LDR X8, [X28]
	0x03BADDE0 STR X0, [X31 + 0x30]
	0x03BADDE4 ADD X1, X31, 0x68
	0x03BADDE8 MOV X0, X8
	0x03BADDEC BL 0x1C16E04
	0x03BADDF0 LDR X8, [X28]
	0x03BADDF4 STR X0, [X31 + 0x38]
	0x03BADDF8 ADD X1, X31, 0x64
	0x03BADDFC MOV X0, X8
	0x03BADE00 BL 0x1C16E04
	0x03BADE04 LDR X8, [X28]
	0x03BADE08 STR X0, [X31 + 0x40]
	0x03BADE0C ADD X1, X31, 0x60
	0x03BADE10 MOV X0, X8
	0x03BADE14 BL 0x1C16E04
	0x03BADE18 LDR X8, [X27]
	0x03BADE1C STR X0, [X31 + 0x48]
	0x03BADE20 MOV X1, X20
	0x03BADE24 MOV X0, X8
	0x03BADE28 BL 0x1C16E04
	0x03BADE2C LDR X2, [X31 + 0x8]
	0x03BADE30 STR X0, [X31 + 0x50]
	0x03BADE34 ADD X1, X31, 0x10
	0x03BADE38 MOV X0, X22
	0x03BADE3C MOV X3, X21
	0x03BADE40 BL 0x1C16CB0
	0x03BADE44 LDP X20, X19, [X31 + 0xC0]
	0x03BADE48 LDP X22, X21, [X31 + 0xB0]
	0x03BADE4C LDP X24, X23, [X31 + 0xA0]

ISIL:
	001 Subtract X31, X31, 288
	002 Move [X31+128], D15
	003 Move [X31+136], D14
	004 Move [X31+144], D13
	005 Move [X31+152], D12
	006 Move [X31+160], D11
	007 Move [X31+168], D10
	008 Move [X31+176], D9
	009 Move [X31+184], D8
	010 Move [X31+192], X29
	011 Move [X31+208], X30
	012 Move [X31+216], X27
	013 Move [X31+224], X26
	014 Move [X31+232], X25
	015 Move [X31+240], X24
	016 Move [X31+248], X23
	017 Move [X31+256], X22
	018 Move [X31+264], X21
	019 Move [X31+272], X20
	020 Move [X31+280], X19
	021 Move X27, 0x836000
	022 Move X26, 0x572000
	023 Move W8, [X27+3228]
	024 Move X26, [X26+2104]
	025 Move X19, X6
	026 Move W20, W5
	027 Move W21, W4
	028 Move W22, W3
	029 Move W23, W2
	030 Move X24, X1
	031 Move X25, X0
	032 Move TEMP, X8
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {41}
	036 Move X0, 0x572000
	037 Move X0, [X0+2104]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X27+3228], W8
	041 Move X8, [X26]
	042 Move [X31+120], W31
	043 Move [X31+112], X31
	044 Move [X31+104], W31
	045 Move [X31+96], X31
	046 Move [X31+88], W31
	047 Move [X31+80], X31
	048 Move [X31+72], W31
	049 Move [X31+64], X31
	050 Move [X31+56], W31
	051 Move [X31+48], X31
	052 Move X9, -51109888
	053 Move X8, [X8+184]
	054 Move V0, [X9]
	055 Move X0, X31
	056 Move S14, [X8]
	057 Move S9, [X8+4]
	058 Move V11, [X8+8]
	059 Move [X31+112], D0
	060 Move [X31+120], W31
	061 Move V0, [X25]
	062 Move V2, [X24]
	063 Move V1, [X25+8]
	064 Move V3, [X24+8]
	065 Subtract V0, V0, V2
	066 Subtract S2, S1, S3
	067 Move S1, V0.S[1]
	068 Call float3.op_Implicit, X0
	069 Move X8, [X26]
	070 Move [X31+96], S0
	071 Move [X31+104], S1
	072 Move [X31+104], S2
	073 Move V10, V0
	074 Move X8, [X8+184]
	075 Move V12, V1
	076 Move V13, V2
	077 Move X0, X31
	078 Move X9, [X8]
	079 Move W8, [X8+8]
	080 Move [X31+80], X9
	081 Move [X31+88], W8
	082 Move S0, [X24]
	083 Move S1, [X24+4]
	084 Move V2, [X24+8]
	085 Call float3.op_Implicit, X0
	086 Move S4, [X24+20]
	087 Move S3, [X24+24]
	088 Move [X31+200], S1
	089 Move [X31+208], S0
	090 Move S0, [X24+12]
	091 Move S1, [X24+16]
	092 Move [X31+44], S2
	093 Move V2, V4
	094 Move X0, X31
	095 Call quaternion.op_Implicit, X0
	096 Move V15, V1
	097 Move V8, V2
	098 Move V23, V3
	099 Compare W23, 0
	100 JumpIfEqual {154}
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move S18, [X31+200]
	103 Move S17, [X31+204]
	104 Move V19, [X31+44]
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move V0, V11
	107 Move V2, V9
	108 Move V1, V14
	109 Move TEMP, X22
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {120}
	113 Move S0, W31
	114 Multiply S1, S12, S0
	115 Add S1, S10, S1
	116 Multiply S2, S13, S0
	117 Add S1, S2, S1
	118 Multiply S0, S1, S0
	119 Move V2, V0
	120 Move V3, V11
	121 Move V4, V9
	122 Move V5, V14
	123 Move TEMP, X21
	124 And TEMP, TEMP, 1
	125 Compare TEMP, 1
	126 JumpIfNotEqual {134}
	127 Move S3, W31
	128 Multiply S4, S10, S3
	129 Add S4, S4, S12
	130 Multiply S5, S13, S3
	131 Add S4, S5, S4
	132 Multiply S3, S4, S3
	133 Move V5, V3
	134 Move TEMP, X20
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfNotEqual {145}
	138 Move S6, W31
	139 Multiply S7, S10, S6
	140 Multiply S16, S12, S6
	141 Add S7, S7, S16
	142 Add S11, S13, S7
	143 Multiply S9, S11, S6
	144 Move V14, V9
	145 Add S1, S1, S5
	146 Add S2, S2, S4
	147 Add S0, S0, S3
	148 Add S1, S1, S14
	149 Add S2, S2, S9
	150 Add S0, S0, S11
	151 Move [X31+80], S1
	152 Move [X31+88], S2
	153 Move [X31+88], S0
	154 Move V28, V11
	155 Move V1, V9
	156 Move V2, V14
	157 Move TEMP, X22
	158 And TEMP, TEMP, 1
	159 Compare TEMP, 1
	160 JumpIfNotEqual {204}
	161 Move S17, W31
	162 Multiply S2, S0, S17
	163 Multiply S3, S15, S17
	164 Multiply S4, S8, S17
	165 Subtract S5, S2, S15
	166 Subtract S3, S3, S4
	167 Subtract S2, S8, S2
	168 Add S3, S3, S3
	169 Add S2, S2, S2
	170 Add S4, S5, S5
	171 Move S1, 1
	172 Multiply S5, S23, S3
	173 Multiply S6, S23, S2
	174 Multiply S7, S23, S4
	175 Multiply S16, S0, S2
	176 Add S1, S5, S1
	177 Multiply S5, S15, S4
	178 Add S6, S6, S17
	179 Add S17, S7, S17
	180 Multiply S7, S8, S3
	181 Multiply S2, S8, S2
	182 Multiply S4, S0, S4
	183 Multiply S3, S15, S3
	184 Subtract S2, S5, S2
	185 Subtract S4, S7, S4
	186 Subtract S3, S16, S3
	187 Add S1, S1, S2
	188 Add S4, S6, S4
	189 Add S17, S17, S3
	190 Multiply S2, S1, S10
	191 Multiply S3, S4, S12
	192 Multiply S6, S1, S1
	193 Multiply S7, S4, S4
	194 Multiply S5, S17, S13
	195 Multiply S16, S17, S17
	196 Add S2, S2, S3
	197 Add S3, S6, S7
	198 Add S2, S5, S2
	199 Add S3, S16, S3
	200 NotImplemented "Instruction FDIV not yet implemented."
	201 Multiply S2, S1, S3
	202 Multiply S1, S4, S3
	203 Multiply S28, S17, S3
	204 Move V3, V11
	205 Move V4, V9
	206 Move V5, V14
	207 Move TEMP, X21
	208 And TEMP, TEMP, 1
	209 Compare TEMP, 1
	210 JumpIfNotEqual {254}
	211 Move S3, W31
	212 Multiply S5, S15, S3
	213 Multiply S6, S8, S3
	214 Multiply S7, S0, S3
	215 Subtract S16, S0, S5
	216 Subtract S5, S5, S8
	217 Subtract S6, S6, S7
	218 Add S5, S5, S5
	219 Add S6, S6, S6
	220 Add S7, S16, S16
	221 Move S4, 1
	222 Multiply S16, S23, S5
	223 Multiply S17, S23, S6
	224 Multiply S18, S23, S7
	225 Multiply S19, S0, S6
	226 Add S4, S17, S4
	227 Multiply S17, S15, S7
	228 Add S16, S16, S3
	229 Add S3, S18, S3
	230 Multiply S18, S8, S5
	231 Multiply S6, S8, S6
	232 Multiply S7, S0, S7
	233 Multiply S5, S15, S5
	234 Subtract S6, S17, S6
	235 Subtract S7, S18, S7
	236 Subtract S5, S19, S5
	237 Add S6, S16, S6
	238 Add S4, S4, S7
	239 Add S3, S3, S5
	240 Multiply S5, S10, S6
	241 Multiply S7, S12, S4
	242 Multiply S17, S6, S6
	243 Multiply S18, S4, S4
	244 Multiply S16, S13, S3
	245 Multiply S19, S3, S3
	246 Add S5, S5, S7
	247 Add S7, S17, S18
	248 Add S5, S16, S5
	249 Add S7, S19, S7
	250 NotImplemented "Instruction FDIV not yet implemented."
	251 Multiply S5, S6, S7
	252 Multiply S4, S4, S7
	253 Multiply S3, S3, S7
	254 Move TEMP, X20
	255 And TEMP, TEMP, 1
	256 Compare TEMP, 1
	257 JumpIfNotEqual {301}
	258 Move S6, W31
	259 Multiply S16, S0, S6
	260 Multiply S17, S8, S6
	261 Multiply S18, S15, S6
	262 Subtract S16, S16, S18
	263 Subtract S18, S15, S17
	264 Subtract S17, S17, S0
	265 Add S18, S18, S18
	266 Add S17, S17, S17
	267 Add S16, S16, S16
	268 Multiply S19, S23, S18
	269 Multiply S20, S23, S17
	270 Multiply S21, S23, S16
	271 Multiply S22, S0, S17
	272 Multiply S17, S8, S17
	273 Multiply S23, S8, S18
	274 Multiply S24, S15, S16
	275 Multiply S16, S0, S16
	276 Move S7, 1
	277 Multiply S18, S15, S18
	278 Add S19, S19, S6
	279 Add S6, S20, S6
	280 Subtract S17, S24, S17
	281 Subtract S16, S23, S16
	282 Add S7, S21, S7
	283 Subtract S18, S22, S18
	284 Add S17, S19, S17
	285 Add S6, S6, S16
	286 Add S7, S7, S18
	287 Multiply S16, S17, S10
	288 Multiply S18, S6, S12
	289 Multiply S20, S17, S17
	290 Multiply S21, S6, S6
	291 Multiply S19, S7, S13
	292 Multiply S22, S7, S7
	293 Add S16, S16, S18
	294 Add S18, S20, S21
	295 Add S16, S19, S16
	296 Add S18, S22, S18
	297 NotImplemented "Instruction FDIV not yet implemented."
	298 Multiply S14, S17, S16
	299 Multiply S9, S6, S16
	300 Multiply S11, S7, S16
	301 Add S2, S2, S5
	302 Add S1, S1, S4
	303 Add S0, S28, S3
	304 Add S2, S2, S14
	305 Add S1, S1, S9
	306 Add S0, S0, S11
	307 Move [X31+80], S2
	308 Move [X31+88], S1
	309 Move [X31+88], S0
	310 Move TEMP, X22
	311 And TEMP, TEMP, 1
	312 Compare TEMP, 1
	313 JumpIfNotEqual {323}
	314 Move TEMP, X20
	315 And TEMP, TEMP, 1
	316 Compare TEMP, 1
	317 JumpIfNotEqual {323}
	318 Add X0, X31, 96
	319 Add X1, X31, 112
	320 Add X2, X31, 80
	321 Move X3, X31
	322 Call BurstMathUtility.ProjectOnPlane, X0, X1, X2
	323 Move X23, 0x82C000
	324 Move W8, [X23+1923]
	325 Move [X31+36], S23
	326 Move [X31+44], S0
	327 Compare W8, 0
	328 JumpIfNotEqual {334}
	329 Move X0, 0x547000
	330 Move X0, [X0+1440]
	331 Call 0x1C17CF4
	332 Move W8, 1
	333 Move [X23+1923], W8
	334 Move X8, 0x547000
	335 Move X8, [X8+1440]
	336 Move X0, X31
	337 Move X8, [X8]
	338 Move X8, [X8+184]
	339 Move S0, [X8]
	340 Move S1, [X8+4]
	341 Move V2, [X8+8]
	342 Call float3.op_Implicit, X0
	343 Move S23, [X31+36]
	344 Move S28, [X31+40]
	345 Move V30, V11
	346 Move V21, V9
	347 Move V29, V9
	348 Move V31, V14
	349 Move TEMP, X22
	350 And TEMP, TEMP, 1
	351 Compare TEMP, 1
	352 JumpIfNotEqual {396}
	353 Move S18, W31
	354 Multiply S6, S28, S18
	355 Multiply S3, S15, S18
	356 Multiply S4, S8, S18
	357 Subtract S5, S6, S15
	358 Subtract S3, S3, S4
	359 Subtract S4, S8, S6
	360 Add S3, S3, S3
	361 Add S19, S4, S4
	362 Add S4, S5, S5
	363 Move S17, 1
	364 Multiply S5, S23, S3
	365 Multiply S6, S23, S19
	366 Multiply S7, S23, S4
	367 Multiply S16, S28, S19
	368 Add S17, S5, S17
	369 Multiply S5, S15, S4
	370 Add S6, S6, S18
	371 Add S18, S7, S18
	372 Multiply S7, S8, S3
	373 Multiply S19, S8, S19
	374 Multiply S4, S28, S4
	375 Multiply S3, S15, S3
	376 Subtract S5, S5, S19
	377 Subtract S4, S7, S4
	378 Subtract S3, S16, S3
	379 Add S17, S17, S5
	380 Add S4, S6, S4
	381 Add S18, S18, S3
	382 Multiply S19, S17, S10
	383 Multiply S3, S4, S12
	384 Multiply S6, S17, S17
	385 Multiply S7, S4, S4
	386 Multiply S5, S18, S13
	387 Multiply S16, S18, S18
	388 Add S19, S19, S3
	389 Add S3, S6, S7
	390 Add S5, S5, S19
	391 Add S3, S16, S3
	392 NotImplemented "Instruction FDIV not yet implemented."
	393 Multiply S31, S17, S3
	394 Multiply S29, S4, S3
	395 Multiply S30, S18, S3
	396 Move TEMP, X21
	397 And TEMP, TEMP, 1
	398 Compare TEMP, 1
	399 JumpIfNotEqual {450}
	400 Move S3, W31
	401 Multiply S6, S8, S3
	402 Multiply S7, S28, S3
	403 Multiply S5, S15, S3
	404 Multiply S16, S10, S3
	405 Subtract S6, S6, S7
	406 Multiply S17, S13, S3
	407 Subtract S18, S28, S5
	408 Subtract S5, S5, S8
	409 Add S7, S16, S12
	410 Add S6, S6, S6
	411 Move S4, 1
	412 Add S5, S5, S5
	413 Add S1, S17, S7
	414 Multiply S17, S23, S6
	415 Add S16, S18, S18
	416 Multiply S19, S28, S6
	417 Add S4, S17, S4
	418 Multiply S17, S15, S5
	419 Multiply S7, S23, S5
	420 Multiply S18, S23, S16
	421 Subtract S17, S19, S17
	422 Multiply S19, S15, S16
	423 Multiply S5, S8, S5
	424 Multiply S6, S8, S6
	425 Multiply S16, S28, S16
	426 Add S7, S7, S3
	427 Add S18, S18, S3
	428 Multiply S0, S1, S3
	429 Subtract S3, S19, S6
	430 Subtract S5, S5, S16
	431 Add S3, S7, S3
	432 Add S4, S4, S5
	433 Add S6, S18, S17
	434 Multiply S5, S10, S3
	435 Multiply S7, S12, S4
	436 Multiply S17, S3, S3
	437 Multiply S18, S4, S4
	438 Multiply S16, S13, S6
	439 Add S5, S5, S7
	440 Multiply S7, S6, S6
	441 Add S17, S17, S18
	442 Add S5, S16, S5
	443 Add S7, S7, S17
	444 NotImplemented "Instruction FDIV not yet implemented."
	445 Multiply S5, S3, S7
	446 Multiply S4, S4, S7
	447 Multiply S3, S6, S7
	448 Move V9, V0
	449 Move [X31], V1
	450 Move [X31], V1
	451 Move V3, V11
	452 Move V4, V21
	453 Move V5, V14
	454 Move V9, V2
	455 Move [X31+1], V0
	456 Move TEMP, X20
	457 And TEMP, TEMP, 1
	458 Compare TEMP, 1
	459 JumpIfNotEqual {503}
	460 Move S6, W31
	461 Multiply S16, S28, S6
	462 Multiply S17, S8, S6
	463 Multiply S18, S15, S6
	464 Subtract S16, S16, S18
	465 Subtract S18, S15, S17
	466 Subtract S17, S17, S28
	467 Add S18, S18, S18
	468 Add S17, S17, S17
	469 Add S16, S16, S16
	470 Multiply S19, S23, S18
	471 Multiply S20, S23, S17
	472 Multiply S21, S23, S16
	473 Multiply S22, S28, S17
	474 Multiply S17, S8, S17
	475 Multiply S23, S8, S18
	476 Multiply S24, S15, S16
	477 Multiply S16, S28, S16
	478 Move S7, 1
	479 Multiply S18, S15, S18
	480 Add S19, S19, S6
	481 Add S6, S20, S6
	482 Subtract S17, S24, S17
	483 Subtract S16, S23, S16
	484 Add S7, S21, S7
	485 Subtract S18, S22, S18
	486 Add S17, S19, S17
	487 Add S6, S6, S16
	488 Add S7, S7, S18
	489 Multiply S16, S17, S10
	490 Multiply S18, S6, S12
	491 Multiply S20, S17, S17
	492 Multiply S21, S6, S6
	493 Multiply S19, S7, S13
	494 Multiply S22, S7, S7
	495 Add S16, S16, S18
	496 Add S18, S20, S21
	497 Add S16, S19, S16
	498 Add S18, S22, S18
	499 NotImplemented "Instruction FDIV not yet implemented."
	500 Multiply S14, S17, S16
	501 Multiply S21, S6, S16
	502 Multiply S11, S7, S16
	503 Add S2, S31, S5
	504 Add S1, S29, S4
	505 Add S0, S30, S3
	506 Add S2, S2, S14
	507 Add S1, S1, S21
	508 Add S0, S0, S11
	509 Add X0, X31, 48
	510 Add X1, X31, 112
	511 Add X2, X31, 64
	512 Move X3, X31
	513 Move [X31+48], S2
	514 Move [X31+56], S1
	515 Move [X31+56], S0
	516 Call BurstMathUtility.ProjectOnPlane, X0, X1, X2
	517 Move V2, [X31]
	518 Move V3, [X31+16]
	519 Move V0, [X31+64]
	520 Move V1, [X31+72]
	521 Move V3.S[1], V2.S[0]
	522 Add V0, V3, V0
	523 Add S1, S9, S1
	524 Move [X31+80], D0
	525 Move [X31+88], S1
	526 Move S18, [X31+200]
	527 Move S17, [X31+204]
	528 Move V19, [X31+44]
	529 Move S0, [X31+80]
	530 Move S1, [X31+84]
	531 Move V2, [X31+88]
	532 Move X0, X31
	533 Add S0, S17, S0
	534 Add S1, S18, S1
	535 Add S2, S19, S2
	536 Call float3.op_Implicit, X0
	537 Move [X19], S0
	538 Move [X19+8], S1
	539 Move [X19+8], S2
	540 Move X20, [X31+272]
	541 Move X19, [X31+280]
	542 Move X22, [X31+256]
	543 Move X21, [X31+264]
	544 Move X24, [X31+240]
	545 Move X23, [X31+248]
	546 Move X26, [X31+224]
	547 Move X25, [X31+232]
	548 Move X30, [X31+208]
	549 Move X27, [X31+216]
	550 Move X29, [X31+192]
	551 Move D9, [X31+176]
	552 Move D8, [X31+184]
	553 Move D11, [X31+160]
	554 Move D10, [X31+168]
	555 Move D13, [X31+144]
	556 Move D12, [X31+152]
	557 Move D15, [X31+128]
	558 Move D14, [X31+136]
	559 Add X31, X31, 288
	560 Return 

Method: System.Void ComputeNewOneHandedScale$BurstManaged(in UnityEngine.Vector3 currentScale, in UnityEngine.Vector3 initialScaleProportions, System.Boolean clampScale, in UnityEngine.Vector3 minScale, in UnityEngine.Vector3 maxScale, System.Single scaleDelta, System.Single deltaTime, System.Single scaleSpeed, out UnityEngine.Vector3 newScale)

Disassembly:
	0x03BADE50 LDP X26, X25, [X31 + 0x90]
	0x03BADE54 LDP X28, X27, [X31 + 0x80]
	0x03BADE58 LDP X29, X30, [X31 + 0x70]
	0x03BADE5C ADD X31, X31, 0xD0
	0x03BADE60 RET
	0x03BADE64 MOV X0, X1
	0x03BADE68 MOV X1, X31
	0x03BADE6C B 0x1C16CB4
	0x03BADE70 STP X30, X23, [X31 - 0x30]!
	0x03BADE74 STP X22, X21, [X31 + 0x10]
	0x03BADE78 STP X20, X19, [X31 + 0x20]
	0x03BADE7C ADRP X20, 0x835000
	0x03BADE80 ADRP X23, 0x5AF000
	0x03BADE84 LDRB W8, [X20 + 0xCA9]
	0x03BADE88 LDR X23, [X23 + 0xE08]
	0x03BADE8C MOV X19, X0
	0x03BADE90 TBNZ X8, 0x0, 0x3BADECC
	0x03BADE94 ADRP X0, 0x56E000
	0x03BADE98 LDR X0, [X0 + 0x848]
	0x03BADE9C BL 0x1C16CF4
	0x03BADEA0 ADRP X0, 0x5AF000
	0x03BADEA4 LDR X0, [X0 + 0xE08]
	0x03BADEA8 BL 0x1C16CF4
	0x03BADEAC ADRP X0, 0x5AF000
	0x03BADEB0 LDR X0, [X0 + 0xE50]
	0x03BADEB4 BL 0x1C16CF4
	0x03BADEB8 ADRP X0, 0x5AF000
	0x03BADEBC LDR X0, [X0 + 0xE58]
	0x03BADEC0 BL 0x1C16CF4
	0x03BADEC4 MOVZ W8, 0x1
	0x03BADEC8 STRB W8, [X20 + 0xCA9]
	0x03BADECC LDR X8, [X23]
	0x03BADED0 LDR W9, [X8 + 0xE0]
	0x03BADED4 CBNZ W9, 0x3BADEE4
	0x03BADED8 MOV X0, X8
	0x03BADEDC BL 0x1C16DFC
	0x03BADEE0 LDR X8, [X23]
	0x03BADEE4 LDR X9, [X8 + 0xB8]
	0x03BADEE8 LDR X10, [X9]
	0x03BADEEC CBNZ X10, 0x3BADF5C
	0x03BADEF0 LDR W10, [X8 + 0xE0]
	0x03BADEF4 CBNZ W10, 0x3BADF08
	0x03BADEF8 MOV X0, X8
	0x03BADEFC BL 0x1C16DFC
	0x03BADF00 LDR X8, [X23]
	0x03BADF04 LDR X9, [X8 + 0xB8]
	0x03BADF08 ADRP X8, 0x56E000
	0x03BADF0C LDR X20, [X9 + 0x8]
	0x03BADF10 LDR X8, [X8 + 0x848]
	0x03BADF14 LDR X0, [X8]
	0x03BADF18 ADRP X8, 0x5AF000
	0x03BADF1C LDR X8, [X8 + 0xE58]
	0x03BADF20 LDR X21, [X8]
	0x03BADF24 ADRP X8, 0x5AF000
	0x03BADF28 LDR X8, [X8 + 0xE50]
	0x03BADF2C LDR W9, [X0 + 0xE0]
	0x03BADF30 LDR X22, [X8]
	0x03BADF34 CBNZ W9, 0x3BADF3C
	0x03BADF38 BL 0x1C16DFC
	0x03BADF3C MOV X0, X20
	0x03BADF40 MOV X1, X21
	0x03BADF44 MOV X2, X22
	0x03BADF48 MOV X3, X31
	0x03BADF4C BL 0x36FAD70
	0x03BADF50 LDR X8, [X23]
	0x03BADF54 LDR X9, [X8 + 0xB8]
	0x03BADF58 STR X0, [X9]
	0x03BADF5C LDR W9, [X8 + 0xE0]
	0x03BADF60 CBNZ W9, 0x3BADF70
	0x03BADF64 MOV X0, X8
	0x03BADF68 BL 0x1C16DFC
	0x03BADF6C LDR X8, [X23]
	0x03BADF70 LDR X8, [X8 + 0xB8]
	0x03BADF74 LDP X22, X21, [X31 + 0x10]
	0x03BADF78 LDR X8, [X8]
	0x03BADF7C STR X8, [X19]
	0x03BADF80 LDP X20, X19, [X31 + 0x20]
	0x03BADF84 LDP X30, X23, [X31], #0x30
	0x03BADF88 RET
	0x03BADF8C STR X30, [X31 - 0x20]!
	0x03BADF90 STP X20, X19, [X31 + 0x10]
	0x03BADF94 ADRP X20, 0x835000
	0x03BADF98 ADRP X19, 0x5AF000
	0x03BADF9C LDRB W8, [X20 + 0xCAA]
	0x03BADFA0 LDR X19, [X19 + 0xE08]
	0x03BADFA4 TBNZ X8, 0x0, 0x3BADFBC
	0x03BADFA8 ADRP X0, 0x5AF000
	0x03BADFAC LDR X0, [X0 + 0xE08]
	0x03BADFB0 BL 0x1C16CF4
	0x03BADFB4 MOVZ W8, 0x1
	0x03BADFB8 STRB W8, [X20 + 0xCAA]
	0x03BADFBC LDR X0, [X19]
	0x03BADFC0 STR X31, [X31 + 0x8]
	0x03BADFC4 LDR W8, [X0 + 0xE0]
	0x03BADFC8 CBNZ W8, 0x3BADFD0
	0x03BADFCC BL 0x1C16DFC
	0x03BADFD0 ADD X0, X31, 0x8
	0x03BADFD4 BL 0x3BADE70
	0x03BADFD8 LDR X0, [X31 + 0x8]
	0x03BADFDC LDP X20, X19, [X31 + 0x10]
	0x03BADFE0 LDR X30, [X31], #0x20
	0x03BADFE4 RET
	0x03BADFE8 STP X30, X21, [X31 - 0x20]!
	0x03BADFEC STP X20, X19, [X31 + 0x10]
	0x03BADFF0 ADRP X21, 0x835000
	0x03BADFF4 ADRP X19, 0x5AF000
	0x03BADFF8 ADRP X20, 0x56E000
	0x03BADFFC LDRB W8, [X21 + 0xCAB]
	0x03BAE000 LDR X19, [X19 + 0xE60]
	0x03BAE004 B 0x3EB19AC
	0x03BAE008 TBNZ X8, 0x0, 0x3BAE038
	0x03BAE00C ADRP X0, 0x56D000
	0x03BAE010 LDR X0, [X0 + 0x848]
	0x03BAE014 BL 0x1C16CF4
	0x03BAE018 ADRP X0, 0x5AE000
	0x03BAE01C LDR X0, [X0 + 0xE08]
	0x03BAE020 BL 0x1C16CF4
	0x03BAE024 ADRP X0, 0x5AE000
	0x03BAE028 LDR X0, [X0 + 0xE60]
	0x03BAE02C BL 0x1C16CF4
	0x03BAE030 MOVZ W8, 0x1
	0x03BAE034 STRB W8, [X21 + 0xCAB]
	0x03BAE038 LDR X0, [X20]
	0x03BAE03C ADRP X20, 0x5AE000
	0x03BAE040 LDR X19, [X19]
	0x03BAE044 LDR W8, [X0 + 0xE0]
	0x03BAE048 LDR X20, [X20 + 0xE08]
	0x03BAE04C CBNZ W8, 0x3BAE054
	0x03BAE050 BL 0x1C16DFC
	0x03BAE054 MOV X0, X19
	0x03BAE058 MOV X1, X31
	0x03BAE05C BL 0x36FA754
	0x03BAE060 LDR X8, [X20]
	0x03BAE064 MOV X19, X0
	0x03BAE068 LDR W9, [X8 + 0xE0]
	0x03BAE06C CBNZ W9, 0x3BAE07C
	0x03BAE070 MOV X0, X8
	0x03BAE074 BL 0x1C16DFC
	0x03BAE078 LDR X8, [X20]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], D10
	003 Move [X31+64], D9
	004 Move [X31+72], D8
	005 Move [X31+80], X30
	006 Move [X31+88], X25
	007 Move [X31+96], X24
	008 Move [X31+104], X23
	009 Move [X31+112], X22
	010 Move [X31+120], X21
	011 Move [X31+128], X20
	012 Move [X31+136], X19
	013 Move X25, 0x836000
	014 Move W8, [X25+3229]
	015 Move X19, X5
	016 Move V8, V2
	017 Move V9, V1
	018 Move V10, V0
	019 Move X21, X4
	020 Move X20, X3
	021 Move W22, W2
	022 Move X24, X1
	023 Move X23, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {33}
	028 Move X0, 0x572000
	029 Move X0, [X0+2104]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X25+3229], W8
	033 Move [X31+24], W31
	034 Move [X31+16], X31
	035 Move W8, [X23+8]
	036 Move X9, [X23]
	037 Multiply S0, S10, S9
	038 Multiply S8, S0, S8
	039 Move [X19+8], W8
	040 Move [X19], X9
	041 Move [X31+32], S8
	042 Move [X31+40], S8
	043 Move [X31+40], S8
	044 Move S0, [X24]
	045 Move S1, [X24+4]
	046 Move V2, [X24+8]
	047 Move X0, X31
	048 Call float3.op_Implicit, X0
	049 Add X0, X31, 32
	050 Add X1, X31, 0
	051 Add X2, X31, 16
	052 Move X3, X31
	053 Move [X31], S0
	054 Move [X31+8], S1
	055 Move [X31+8], S2
	056 Call BurstMathUtility.Scale, X0, X1, X2
	057 Move S0, [X23]
	058 Move S1, [X23+4]
	059 Move V2, [X23+8]
	060 Move X0, X31
	061 Call float3.op_Implicit, X0
	062 Move S3, [X31+16]
	063 Move S4, [X31+20]
	064 Move V5, [X31+24]
	065 Add S3, S0, S3
	066 Add S1, S1, S4
	067 Add S2, S2, S5
	068 Move TEMP, X22
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfNotEqual {78}
	072 NotImplemented "Instruction FCMP not yet implemented."
	073 Move V0, [X21]
	074 NotImplemented "Instruction FABS not yet implemented."
	075 NotImplemented "Instruction FABS not yet implemented."
	076 NotImplemented "Instruction FCMP not yet implemented."
	077 Move V4, [X21+4]
	078 Move X8, 0x572000
	079 Move X8, [X8+2104]
	080 Move W9, 0x7F800000
	081 Move X8, [X8]
	082 Move X8, [X8+184]
	083 Move S0, [X8]
	084 Move S4, [X8+4]
	085 Move V5, [X8+8]
	086 Move W8, S0
	087 And W8, W8, 0x7FFFFFFF
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move W8, S4
	090 And W8, W8, 0x7FFFFFFF
	091 NotImplemented "Instruction FCCMP not yet implemented."
	092 NotImplemented "Instruction FCSEL not yet implemented."
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move W8, S5
	095 And W8, W8, 0x7FFFFFFF
	096 NotImplemented "Instruction FCCMP not yet implemented."
	097 NotImplemented "Instruction FCSEL not yet implemented."
	098 NotImplemented "Instruction CMP not yet implemented."
	099 NotImplemented "Instruction FCCMP not yet implemented."
	100 NotImplemented "Instruction FCSEL not yet implemented."
	101 Move X0, X31
	102 Call float3.op_Implicit, X0
	103 Move V4, V1
	104 Move V0, [X20]
	105 NotImplemented "Instruction FABS not yet implemented."
	106 NotImplemented "Instruction FABS not yet implemented."
	107 NotImplemented "Instruction FCMP not yet implemented."
	108 Move V4, [X20+4]
	109 Move W8, [X21+4]
	110 NotImplemented "Instruction FABS not yet implemented."
	111 And W9, W8, 0x7FFFFFFF
	112 Move S5, W9
	113 NotImplemented "Instruction FCMP not yet implemented."
	114 Move S4, W8
	115 Move W8, [X21+8]
	116 NotImplemented "Instruction FABS not yet implemented."
	117 And W8, W8, 0x7FFFFFFF
	118 Move S6, W8
	119 NotImplemented "Instruction FCMP not yet implemented."
	120 Move V2, [X21+8]
	121 Move W8, [X20+4]
	122 NotImplemented "Instruction FABS not yet implemented."
	123 And W9, W8, 0x7FFFFFFF
	124 Move S5, W9
	125 NotImplemented "Instruction FCMP not yet implemented."
	126 Move S4, W8
	127 Move W8, [X20+8]
	128 NotImplemented "Instruction FABS not yet implemented."
	129 And W8, W8, 0x7FFFFFFF
	130 Move S6, W8
	131 NotImplemented "Instruction FCMP not yet implemented."
	132 Move V0, V3
	133 Move V2, [X20+8]
	134 Move [X19], S0
	135 Move [X19+8], S4
	136 Move [X19+8], S2
	137 Move X20, [X31+128]
	138 Move X19, [X31+136]
	139 Move X22, [X31+112]
	140 Move X21, [X31+120]
	141 Move X24, [X31+96]
	142 Move X23, [X31+104]
	143 Move X30, [X31+80]
	144 Move X25, [X31+88]
	145 Move D9, [X31+64]
	146 Move D8, [X31+72]
	147 Move V10, [X31+48]
	148 Add X31, X31, 144
	149 Return 

Method: System.Void ComputeNewTwoHandedScale$BurstManaged(in UnityEngine.Vector3 startScale, in UnityEngine.Vector3 currentScale, in UnityEngine.Vector3 startHandleBar, in UnityEngine.Vector3 newHandleBar, System.Boolean clampScale, System.Single scaleMultiplier, System.Single thresholdMoveRatioForScale, in UnityEngine.Vector3 minScale, in UnityEngine.Vector3 maxScale, out UnityEngine.Vector3 newScale)

Disassembly:
	0x03BAE07C LDR X8, [X8 + 0xB8]
	0x03BAE080 STR X19, [X8 + 0x8]
	0x03BAE084 LDP X20, X19, [X31 + 0x10]
	0x03BAE088 LDP X30, X21, [X31], #0x20
	0x03BAE08C RET
	0x03BAE090 RET
	0x03BAE094 B 0x3BADFE8
	0x03BAE098 STP X30, X21, [X31 - 0x20]!
	0x03BAE09C STP X20, X19, [X31 + 0x10]
	0x03BAE0A0 LDR X8, [X2 + 0x8]
	0x03BAE0A4 STP X1, X2, [X0 + 0x20]
	0x03BAE0A8 MOV X19, X0
	0x03BAE0AC MOV X20, X1
	0x03BAE0B0 STR X8, [X0 + 0x10]
	0x03BAE0B4 LDRB W21, [X2 + 0x52]
	0x03BAE0B8 STR X0, [X0 + 0x40]
	0x03BAE0BC MOV X0, X2
	0x03BAE0C0 BL 0x1C16D84
	0x03BAE0C4 TBZ X0, 0x0, 0x3BAE0DC
	0x03BAE0C8 CMP W21, 0xA
	0x03BAE0CC B.NE 0x3BAE0F8
	0x03BAE0D0 ADRP X8, 0xFFFFFFFFFE052000
	0x03BAE0D4 ADD X8, X8, 0x6D4
	0x03BAE0D8 B 0x3BAE0EC
	0x03BAE0DC CMP W21, 0x9
	0x03BAE0E0 B.NE 0x3BAE0F4
	0x03BAE0E4 ADRP X8, 0xFFFFFFFFFE052000
	0x03BAE0E8 ADD X8, X8, 0x6A0
	0x03BAE0EC STR X8, [X19 + 0x18]
	0x03BAE0F0 B 0x3BAE108
	0x03BAE0F4 CBZ X20, 0x3BAE120
	0x03BAE0F8 LDR X8, [X19 + 0x10]
	0x03BAE0FC LDR X9, [X19 + 0x20]
	0x03BAE100 STR X8, [X19 + 0x18]
	0x03BAE104 STR X9, [X19 + 0x40]
	0x03BAE108 ADRP X8, 0xFFFFFFFFFE052000
	0x03BAE10C ADD X8, X8, 0x5E0
	0x03BAE110 STR X8, [X19 + 0x38]
	0x03BAE114 LDP X20, X19, [X31 + 0x10]
	0x03BAE118 LDP X30, X21, [X31], #0x20
	0x03BAE11C RET
	0x03BAE120 ADRP X1, 0xFFFFFFFFFCF6D000
	0x03BAE124 ADD X1, X1, 0xEE3
	0x03BAE128 MOV X0, X31
	0x03BAE12C BL 0x1C16F3C
	0x03BAE130 MOV X1, X31
	0x03BAE134 BL 0x1C16DEC
	0x03BAE138 LDR X8, [X31]
	0x03BAE13C LDR X9, [X0 + 0x18]
	0x03BAE140 LDR X10, [X0 + 0x28]
	0x03BAE144 LDR X0, [X0 + 0x40]
	0x03BAE148 AND W5, W5, 0x1
	0x03BAE14C STP X8, X10, [X31]
	0x03BAE150 BR X9
	0x03BAE154 SUB X31, X31, 0xE0
	0x03BAE158 STP X29, X30, [X31 + 0x80]
	0x03BAE15C STP X28, X27, [X31 + 0x90]
	0x03BAE160 STP X26, X25, [X31 + 0xA0]
	0x03BAE164 STP X24, X23, [X31 + 0xB0]
	0x03BAE168 STP X22, X21, [X31 + 0xC0]
	0x03BAE16C STP X20, X19, [X31 + 0xD0]
	0x03BAE170 LDP X21, X8, [X31 + 0xE8]
	0x03BAE174 STP S1, S0, [X31 + 0x74]
	0x03BAE178 ADRP X20, 0x834000
	0x03BAE17C ADRP X29, 0x545000
	0x03BAE180 STP X0, X8, [X31 + 0x8]
	0x03BAE184 AND W8, W5, 0x1
	0x03BAE188 STRB W8, [X31 + 0x7C]
	0x03BAE18C ADRP X19, 0x545000
	0x03BAE190 LDR X23, [X31 + 0xE0]
	0x03BAE194 LDRB W8, [X20 + 0xCAD]
	0x03BAE198 LDR X29, [X29 + 0x5A0]
	0x03BAE19C LDR X19, [X19 + 0xA90]
	0x03BAE1A0 MOV X22, X7
	0x03BAE1A4 MOV X24, X6
	0x03BAE1A8 MOV X25, X4
	0x03BAE1AC MOV X26, X3
	0x03BAE1B0 MOV X27, X2
	0x03BAE1B4 MOV X28, X1
	0x03BAE1B8 TBNZ X8, 0x0, 0x3BAE1E8
	0x03BAE1BC ADRP X0, 0x545000
	0x03BAE1C0 LDR X0, [X0 + 0xB58]
	0x03BAE1C4 BL 0x1C16CF4
	0x03BAE1C8 ADRP X0, 0x545000
	0x03BAE1CC LDR X0, [X0 + 0xA90]
	0x03BAE1D0 BL 0x1C16CF4
	0x03BAE1D4 ADRP X0, 0x545000
	0x03BAE1D8 LDR X0, [X0 + 0x5A0]
	0x03BAE1DC BL 0x1C16CF4
	0x03BAE1E0 MOVZ W8, 0x1
	0x03BAE1E4 STRB W8, [X20 + 0xCAD]
	0x03BAE1E8 LDR X0, [X29]
	0x03BAE1EC MOVI V0.2D, 0x0
	0x03BAE1F0 MOV X1, X28
	0x03BAE1F4 STR X31, [X31 + 0x68]
	0x03BAE1F8 STUR V0, [X31 + 0x58]
	0x03BAE1FC STUR V0, [X31 + 0x48]
	0x03BAE200 STUR V0, [X31 + 0x38]
	0x03BAE204 BL 0x1C16E04
	0x03BAE208 LDR X8, [X29]
	0x03BAE20C STR X0, [X31 + 0x18]
	0x03BAE210 MOV X1, X27
	0x03BAE214 MOV X0, X8
	0x03BAE218 BL 0x1C16E04
	0x03BAE21C LDR X8, [X29]
	0x03BAE220 STR X0, [X31 + 0x20]
	0x03BAE224 MOV X1, X26
	0x03BAE228 MOV X0, X8
	0x03BAE22C BL 0x1C16E04
	0x03BAE230 LDR X8, [X29]
	0x03BAE234 STR X0, [X31 + 0x28]
	0x03BAE238 MOV X1, X25
	0x03BAE23C MOV X0, X8
	0x03BAE240 BL 0x1C16E04
	0x03BAE244 ADRP X8, 0x545000
	0x03BAE248 LDR X8, [X8 + 0xB58]
	0x03BAE24C STR X0, [X31 + 0x30]
	0x03BAE250 ADD X1, X31, 0x7C
	0x03BAE254 LDR X8, [X8]
	0x03BAE258 MOV X0, X8
	0x03BAE25C BL 0x1C16E04
	0x03BAE260 LDR X8, [X19]
	0x03BAE264 STR X0, [X31 + 0x38]
	0x03BAE268 ADD X1, X31, 0x78
	0x03BAE26C MOV X0, X8
	0x03BAE270 BL 0x1C16E04
	0x03BAE274 LDR X8, [X19]
	0x03BAE278 STR X0, [X31 + 0x40]
	0x03BAE27C ADD X1, X31, 0x74
	0x03BAE280 MOV X0, X8
	0x03BAE284 BL 0x1C16E04
	0x03BAE288 LDR X8, [X29]
	0x03BAE28C STR X0, [X31 + 0x48]
	0x03BAE290 MOV X1, X24
	0x03BAE294 MOV X0, X8
	0x03BAE298 BL 0x1C16E04
	0x03BAE29C LDR X8, [X29]
	0x03BAE2A0 STR X0, [X31 + 0x50]
	0x03BAE2A4 MOV X1, X22
	0x03BAE2A8 MOV X0, X8
	0x03BAE2AC BL 0x1C16E04
	0x03BAE2B0 LDR X8, [X29]
	0x03BAE2B4 STR X0, [X31 + 0x58]
	0x03BAE2B8 MOV X1, X23
	0x03BAE2BC MOV X0, X8
	0x03BAE2C0 BL 0x1C16E04
	0x03BAE2C4 STR X0, [X31 + 0x60]
	0x03BAE2C8 LDP X0, X3, [X31 + 0x8]
	0x03BAE2CC ADD X1, X31, 0x18
	0x03BAE2D0 MOV X2, X21
	0x03BAE2D4 BL 0x1C16CB0
	0x03BAE2D8 LDP X20, X19, [X31 + 0xD0]
	0x03BAE2DC LDP X22, X21, [X31 + 0xC0]
	0x03BAE2E0 LDP X24, X23, [X31 + 0xB0]
	0x03BAE2E4 LDP X26, X25, [X31 + 0xA0]
	0x03BAE2E8 LDP X28, X27, [X31 + 0x90]
	0x03BAE2EC LDP X29, X30, [X31 + 0x80]
	0x03BAE2F0 ADD X31, X31, 0xE0
	0x03BAE2F4 RET
	0x03BAE2F8 MOV X0, X1
	0x03BAE2FC MOV X1, X31
	0x03BAE300 B 0x1C16CB4
	0x03BAE304 STP X30, X23, [X31 - 0x30]!
	0x03BAE308 STP X22, X21, [X31 + 0x10]
	0x03BAE30C STP X20, X19, [X31 + 0x20]
	0x03BAE310 ADRP X20, 0x834000
	0x03BAE314 ADRP X23, 0x5AE000

ISIL:
	001 Move [X31-128], D13
	002 Move [X31-120], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X26
	009 Move [X31+72], X25
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move W8, [X1+8]
	017 Move X9, [X1]
	018 Move V8, V1
	019 Move V9, V0
	020 Move [X7+8], W8
	021 Move [X7], X9
	022 Move S0, [X3]
	023 Move S1, [X3+4]
	024 Move V2, [X3+8]
	025 Move X23, X0
	026 Move X0, X31
	027 Move X19, X7
	028 Move X22, X6
	029 Move X21, X5
	030 Move W20, W4
	031 Move X24, X2
	032 Call float3.op_Implicit, X0
	033 Move X25, 0x834000
	034 Move W8, [X25+1413]
	035 Move V11, V0
	036 Move V10, V1
	037 Move V12, V2
	038 Compare W8, 0
	039 JumpIfNotEqual {45}
	040 Move X0, 0x546000
	041 Move X0, [X0+1448]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X25+1413], W8
	045 Move X26, 0x546000
	046 Move X26, [X26+1448]
	047 Move X0, [X26]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move S0, [X24]
	053 Move S1, [X24+4]
	054 Move V2, [X24+8]
	055 Multiply S4, S11, S11
	056 Multiply S5, S10, S10
	057 Multiply S3, S12, S12
	058 Add S4, S4, S5
	059 Move X0, X31
	060 Add S13, S3, S4
	061 Call float3.op_Implicit, X0
	062 Move W8, [X25+1413]
	063 Move V10, V0
	064 Move V11, V1
	065 Move V12, V2
	066 Compare W8, 0
	067 JumpIfNotEqual {73}
	068 Move X0, 0x546000
	069 Move X0, [X0+1448]
	070 Call 0x1C17CF4
	071 Move W8, 1
	072 Move [X25+1413], W8
	073 Move X0, [X26]
	074 NotImplemented "Instruction FSQRT not yet implemented."
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {79}
	078 Call 0x1C17DFC
	079 Multiply S1, S10, S10
	080 Multiply S2, S11, S11
	081 Multiply S0, S12, S12
	082 Add S1, S1, S2
	083 Add S0, S0, S1
	084 NotImplemented "Instruction FSQRT not yet implemented."
	085 NotImplemented "Instruction FDIV not yet implemented."
	086 Move S0, 1
	087 NotImplemented "Instruction FCMP not yet implemented."
	088 Move S0, -1
	089 Add S0, S1, S0
	090 Multiply S0, S0, S9
	091 Subtract S0, S0, S8
	092 NotImplemented "Instruction FCMP not yet implemented."
	093 Move V1, [X23]
	094 Move V2, [X22]
	095 NotImplemented "Instruction LDUR not yet implemented."
	096 Move S4, 1
	097 Add S0, S0, S4
	098 Multiply S1, S0, S1
	099 NotImplemented "Instruction FABS not yet implemented."
	100 NotImplemented "Instruction FABS not yet implemented."
	101 NotImplemented "Instruction FCMP not yet implemented."
	102 NotImplemented "Instruction INVALID not yet implemented."
	103 Move W8, [X22+4]
	104 Move W9, S0
	105 And W9, W9, 0x7FFFFFFF
	106 Move S3, W9
	107 And W8, W8, 0x7FFFFFFF
	108 Move S4, W8
	109 NotImplemented "Instruction FCMP not yet implemented."
	110 Move W8, 1
	111 Move S0, 1
	112 NotImplemented "Instruction FDIV not yet implemented."
	113 Move S2, -1
	114 Add S1, S1, S2
	115 Multiply S1, S1, S9
	116 Subtract S1, S1, S8
	117 NotImplemented "Instruction FCMP not yet implemented."
	118 Move V3, [X23]
	119 Move V2, [X21]
	120 Add S1, S1, S0
	121 NotImplemented "Instruction LDUR not yet implemented."
	122 NotImplemented "Instruction FDIV not yet implemented."
	123 Multiply S1, S0, S3
	124 NotImplemented "Instruction FABS not yet implemented."
	125 NotImplemented "Instruction FABS not yet implemented."
	126 NotImplemented "Instruction FCMP not yet implemented."
	127 NotImplemented "Instruction INVALID not yet implemented."
	128 Move W8, [X21+4]
	129 Move W9, S0
	130 And W9, W9, 0x7FFFFFFF
	131 Move S3, W9
	132 And W8, W8, 0x7FFFFFFF
	133 Move S4, W8
	134 NotImplemented "Instruction FCMP not yet implemented."
	135 Move W8, 1
	136 Move W8, [X22+8]
	137 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	138 And W9, W9, 0x7FFFFFFF
	139 Move S3, W9
	140 And W8, W8, 0x7FFFFFFF
	141 Move S4, W8
	142 NotImplemented "Instruction FCMP not yet implemented."
	143 NotImplemented "Instruction CSET not yet implemented."
	144 And W31, W20, W8
	145 NotImplemented "Instruction LDUR not yet implemented."
	146 Move W8, [X21+8]
	147 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	148 And W9, W9, 0x7FFFFFFF
	149 Move S3, W9
	150 And W8, W8, 0x7FFFFFFF
	151 Move S4, W8
	152 NotImplemented "Instruction FCMP not yet implemented."
	153 NotImplemented "Instruction CSET not yet implemented."
	154 And W31, W20, W8
	155 NotImplemented "Instruction LDUR not yet implemented."
	156 Move V1, V2
	157 Move [X19], S1
	158 Move [X19+4], D0
	159 Move X20, [X31+112]
	160 Move X19, [X31+120]
	161 Move X22, [X31+96]
	162 Move X21, [X31+104]
	163 Move X24, [X31+80]
	164 Move X23, [X31+88]
	165 Move X26, [X31+64]
	166 Move X25, [X31+72]
	167 Move X30, [X31+48]
	168 Move D9, [X31+32]
	169 Move D8, [X31+40]
	170 Move D11, [X31+16]
	171 Move D10, [X31+24]
	172 Move D13, [X31+128]
	173 Move D12, [X31+136]
	174 Return 

