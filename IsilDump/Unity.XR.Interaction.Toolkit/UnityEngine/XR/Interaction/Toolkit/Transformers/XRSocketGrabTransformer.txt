Type: UnityEngine.XR.Interaction.Toolkit.Transformers.XRSocketGrabTransformer

Method: System.Boolean get_canProcess()

Disassembly:
	0x03BB0A04 STP X24, X23, [X31 + 0x20]
	0x03BB0A08 STP X22, X21, [X31 + 0x30]

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_canProcess(System.Boolean value)

Disassembly:
	0x03BB0A0C STP X20, X19, [X31 + 0x40]
	0x03BB0A10 ADRP X26, 0x832000
	0x03BB0A14 ADRP X27, 0x56B000

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.Single get_socketSnappingRadius()

Disassembly:
	0x03BB0A18 LDRB W8, [X26 + 0xCCD]
	0x03BB0A1C LDR X27, [X27 + 0x848]

ISIL:
	001 Move V0, [X0+20]
	002 Return V0

Method: System.Void set_socketSnappingRadius(System.Single value)

Disassembly:
	0x03BB0A20 MOV X19, X6
	0x03BB0A24 MOV X20, X5

ISIL:
	001 Move [X0+20], S0
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.SocketScaleMode get_scaleMode()

Disassembly:
	0x03BB0A28 MOV X21, X4
	0x03BB0A2C MOV X22, X3

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_scaleMode(UnityEngine.XR.Interaction.Toolkit.SocketScaleMode value)

Disassembly:
	0x03BB0A30 MOV X23, X2
	0x03BB0A34 MOV X24, X1

ISIL:
	001 Move [X0+24], W1
	002 Return 

Method: Unity.Mathematics.float3 get_fixedScale()

Disassembly:
	0x03BB0A38 MOV X25, X0
	0x03BB0A3C TBNZ X8, 0x0, 0x3BB0A60
	0x03BB0A40 ADRP X0, 0x56B000

ISIL:
	001 Move S0, [X0+28]
	002 Move S1, [X0+32]
	003 Move V2, [X0+36]
	004 Return X0

Method: System.Void set_fixedScale(Unity.Mathematics.float3 value)

Disassembly:
	0x03BB0A44 LDR X0, [X0 + 0x848]
	0x03BB0A48 BL 0x1C16CF4
	0x03BB0A4C ADRP X0, 0x5AC000

ISIL:
	001 Move [X0+28], S0
	002 Move [X0+36], S1
	003 Move [X0+36], S2
	004 Return 

Method: Unity.Mathematics.float3 get_targetBoundsSize()

Disassembly:
	0x03BB0A50 LDR X0, [X0 + 0xEC0]
	0x03BB0A54 BL 0x1C16CF4
	0x03BB0A58 MOVZ W8, 0x1

ISIL:
	001 Move S0, [X0+40]
	002 Move S1, [X0+44]
	003 Move V2, [X0+48]
	004 Return X0

Method: System.Void set_targetBoundsSize(Unity.Mathematics.float3 value)

Disassembly:
	0x03BB0A5C STRB W8, [X26 + 0xCCD]
	0x03BB0A60 LDR X0, [X27]
	0x03BB0A64 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X0+40], S0
	002 Move [X0+48], S1
	003 Move [X0+48], S2
	004 Return 

Method: UnityEngine.XR.Interaction.Toolkit.IXRInteractor get_socketInteractor()

Disassembly:
	0x03BB0A68 CBNZ W8, 0x3BB0A70
	0x03BB0A6C BL 0x1C16DFC

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_socketInteractor(UnityEngine.XR.Interaction.Toolkit.IXRInteractor value)

Disassembly:
	0x03BB0A70 MOV X0, X31
	0x03BB0A74 BL 0x36FA670

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.Void OnLink(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable)

Disassembly:
	0x03BB0A78 TBZ X0, 0x0, 0x3BB0AD4

ISIL:
	001 Return 

Method: System.Void OnGrab(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable)

Disassembly:
	0x03BB0A7C ADRP X8, 0x5AC000

ISIL:
	001 Return 

Method: System.Void OnGrabCountChanged(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, UnityEngine.Pose targetPose, UnityEngine.Vector3 localScale)

Disassembly:
	0x03BB0A80 LDR X8, [X8 + 0xEC0]
	0x03BB0A84 LDR X0, [X8]
	0x03BB0A88 LDR W8, [X0 + 0xE0]
	0x03BB0A8C CBNZ W8, 0x3BB0A94

ISIL:
	001 Move W8, [X0+24]
	002 Compare W8, 0
	003 JumpIfEqual {4}
	004 Return 

Method: System.Void Process(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase, ref UnityEngine.Pose targetPose, ref UnityEngine.Vector3 localScale)

Disassembly:
	0x03BB0DA0 MOVZ W8, 0x1
	0x03BB0DA4 STRB W8, [X20 + 0xCC3]
	0x03BB0DA8 MOVZ W8, 0x1
	0x03BB0DAC FMOV V0.4S, 0x0
	0x03BB0DB0 FMOV V1.2S, 0x0
	0x03BB0DB4 STRB W8, [X19 + 0x10]
	0x03BB0DB8 STUR V0, [X19 + 0x1C]
	0x03BB0DBC STUR D1, [X19 + 0x2C]
	0x03BB0DC0 LDR X0, [X22]
	0x03BB0DC4 BL 0x1C16F10
	0x03BB0DC8 LDR X1, [X21]
	0x03BB0DCC MOV X20, X0
	0x03BB0DD0 BL 0x2AC3704
	0x03BB0DD4 STR X20, [X19 + 0x40]
	0x03BB0DD8 LDR X0, [X22]
	0x03BB0DDC BL 0x1C16F10
	0x03BB0DE0 LDR X1, [X21]
	0x03BB0DE4 MOV X20, X0
	0x03BB0DE8 BL 0x2AC3704
	0x03BB0DEC STR X20, [X19 + 0x48]
	0x03BB0DF0 MOV X0, X19
	0x03BB0DF4 LDP X20, X19, [X31 + 0x20]
	0x03BB0DF8 LDP X22, X21, [X31 + 0x10]
	0x03BB0DFC MOV X1, X31
	0x03BB0E00 LDR X30, [X31], #0x30
	0x03BB0E04 B 0x33BDD8C
	0x03BB0E08 SUB X31, X31, 0x40
	0x03BB0E0C STP D9, D8, [X31 + 0x10]
	0x03BB0E10 STR X30, [X31 + 0x20]
	0x03BB0E14 STP X20, X19, [X31 + 0x30]
	0x03BB0E18 STR W31, [X31 + 0x8]
	0x03BB0E1C STR X31, [X31]
	0x03BB0E20 MOV V8.16B, V0.16B
	0x03BB0E24 LDP S1, S0, [X2]
	0x03BB0E28 LDR V2, [X2 + 0x8]
	0x03BB0E2C MOVZ W20, 0x7F800000
	0x03BB0E30 MOV X8, X0
	0x03BB0E34 FMOV W9, S0
	0x03BB0E38 AND W9, W9, 0x7FFFFFFF
	0x03BB0E3C CMP W9, W20
	0x03BB0E40 FCCMP S1, S0, 0x0, LS
	0x03BB0E44 FCSEL S0, S1, S0, GT
	0x03BB0E48 FMOV W9, S2
	0x03BB0E4C AND W9, W9, 0x7FFFFFFF
	0x03BB0E50 FCMP S0, S2
	0x03BB0E54 CCMP W9, W20, 0x2, LE
	0x03BB0E58 ADRP X9, 0xFFFFFFFFFCF3A000
	0x03BB0E5C FCSEL S9, S0, S2, HI
	0x03BB0E60 LDR V0, [X9 + 0x240]
	0x03BB0E64 MOV X19, X2
	0x03BB0E68 ADD X2, X31, 0x0
	0x03BB0E6C MOV X0, X1
	0x03BB0E70 MOV X1, X8
	0x03BB0E74 MOV X3, X31
	0x03BB0E78 BL 0x3B87B2C
	0x03BB0E7C LDR V0, [X31]
	0x03BB0E80 LDR V1, [X19]
	0x03BB0E84 LDR V2, [X31 + 0x8]
	0x03BB0E88 LDR V3, [X19 + 0x8]
	0x03BB0E8C LDR X30, [X31 + 0x20]
	0x00000000 INVALID
	0x03BB0E94 MOV S1, V0.S[1]
	0x03BB0E98 FMOV W8, S1
	0x03BB0E9C AND W8, W8, 0x7FFFFFFF
	0x03BB0EA0 CMP W8, W20
	0x03BB0EA4 FMUL S2, S2, S3
	0x03BB0EA8 FCCMP S0, S1, 0x0, LS
	0x03BB0EAC FMOV W8, S2
	0x03BB0EB0 FCSEL S0, S0, S1, GT

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+64], X24
	004 Move [X31+72], X23
	005 Move [X31+80], X22
	006 Move [X31+88], X21
	007 Move [X31+96], X20
	008 Move [X31+104], X19
	009 Move X24, 0x833000
	010 Move W8, [X24+3258]
	011 Move X20, X4
	012 Move X19, X3
	013 Move W23, W2
	014 Move X21, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x5AD000
	021 Move X0, [X0+3728]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+3258], W8
	025 Or W8, W23, 2
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move [X31+8], W31
	028 Move [X31], X31
	029 Move W8, [X22+24]
	030 Compare W8, 0
	031 JumpIfEqual {68}
	032 Move X0, [X22+64]
	033 Compare X0, 0
	034 JumpIfEqual {82}
	035 Move X23, 0x5AD000
	036 Move X23, [X23+3728]
	037 Move X1, X21
	038 Move X2, [X23]
	039 Call Dictionary`2<Object, float3>.get_Item, X0, X1
	040 Move [X31+32], S0
	041 Move [X31+40], S1
	042 Move [X31+40], S2
	043 Move X0, [X22+72]
	044 Compare X0, 0
	045 JumpIfEqual {82}
	046 Move X2, [X23]
	047 Move X1, X21
	048 Call Dictionary`2<Object, float3>.get_Item, X0, X1
	049 Add X2, X31, 32
	050 Move X0, X22
	051 Move X1, X21
	052 Move [X31+16], S0
	053 Move [X31+24], S1
	054 Move [X31+24], S2
	055 Call XRSocketGrabTransformer.ComputeSocketTargetScale, X0, X1, X2
	056 Move [X31], S0
	057 Move [X31+8], S1
	058 Move [X31+8], S2
	059 Move X1, [X22+56]
	060 Move V0, [X22+20]
	061 Add X2, X31, 32
	062 Add X3, X31, 16
	063 Add X4, X31, 0
	064 Move X0, X21
	065 Move X5, X19
	066 Move X6, X20
	067 Call XRSocketGrabTransformer.UpdateTargetWithScale, X0, X1, V0, X2, X3, X4, X5, X6
	068 Move X1, [X22+56]
	069 Move V0, [X22+20]
	070 Move X0, X21
	071 Move X2, X19
	072 Call XRSocketGrabTransformer.UpdateTargetWithoutScale, X0, X1, V0, X2
	073 Move X20, [X31+96]
	074 Move X19, [X31+104]
	075 Move X22, [X31+80]
	076 Move X21, [X31+88]
	077 Move X24, [X31+64]
	078 Move X23, [X31+72]
	079 Move X30, [X31+48]
	080 Add X31, X31, 112
	081 Return 
	082 Call 0x1C17F20

Method: System.Void UpdateTargetWithoutScale(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor, System.Single snappingRadius, ref UnityEngine.Pose targetPose)

Disassembly:
	0x03BB0EB4 AND W8, W8, 0x7FFFFFFF
	0x03BB0EB8 FCMP S0, S2
	0x03BB0EBC CCMP W8, W20, 0x2, LE
	0x03BB0EC0 FCSEL S0, S0, S2, HI
	0x03BB0EC4 FMOV W8, S0
	0x03BB0EC8 AND W8, W8, 0x7FFFFFFF
	0x03BB0ECC CMP W8, W20
	0x03BB0ED0 FCCMP S9, S0, 0x0, LS
	0x03BB0ED4 FCSEL S0, S9, S0, GT
	0x03BB0ED8 FMOV S1, 0.5
	0x03BB0EDC FMUL S0, S0, S1
	0x03BB0EE0 FADD S0, S0, S8
	0x03BB0EE4 LDP X20, X19, [X31 + 0x30]
	0x03BB0EE8 LDP D9, D8, [X31 + 0x10]
	0x03BB0EEC ADD X31, X31, 0x40
	0x03BB0EF0 RET
	0x03BB0EF4 STP D9, D8, [X31 - 0x10]!
	0x03BB0EF8 LDP S6, S7, [X3]
	0x03BB0EFC LDP S16, S1, [X3 + 0x8]
	0x03BB0F00 LDR V17, [X1]
	0x03BB0F04 LDUR V18, [X1 + 0x4]
	0x03BB0F08 LDR V20, [X2]
	0x03BB0F0C LDR V21, [X2 + 0x8]
	0x03BB0F10 FMUL S22, S6, S6
	0x03BB0F14 FMUL S23, S7, S7
	0x03BB0F18 LDR V19, [X1 + 0xC]
	0x03BB0F1C FMUL S24, S16, S16
	0x03BB0F20 FADD S22, S22, S23
	0x03BB0F24 LDP S2, S3, [X4]
	0x03BB0F28 LDP S4, S5, [X4 + 0x8]
	0x03BB0F2C FMUL S25, S1, S1
	0x03BB0F30 FMUL S26, S17, D4.S[1]
	0x00000000 INVALID
	0x03BB0F38 UNIMPLEMENTED
	0x03BB0F3C UNIMPLEMENTED
	0x03BB0F40 FADD S22, S24, S22
	0x03BB0F44 FMOV S0, 1
	0x03BB0F48 UNIMPLEMENTED
	0x03BB0F4C MOV V29.S[1], V17.S[0]
	0x03BB0F50 MOV V30.S[1], V21.S[0]
	0x03BB0F54 FSUB S26, S26, S28
	0x03BB0F58 FADD S22, S25, S22
	0x03BB0F5C FNEG S6, S6

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], D8
	003 Move [X31+80], X30
	004 Move [X31+88], X19
	005 Move X19, X2
	006 Add X2, X31, 32
	007 Move V8, V0
	008 Move [X31+32], X31
	009 Move [X31+40], X31
	010 Move [X31+56], W31
	011 Move [X31+48], X31
	012 Move [X31+24], W31
	013 Move [X31+16], X31
	014 Move [X31+8], W31
	015 Move [X31], X31
	016 Call XRSocketGrabTransformer.GetTargetPoseForInteractable, X0, X1, X2
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {52}
	021 Move S0, [X19]
	022 Move S1, [X19+4]
	023 Move V2, [X19+8]
	024 Move X0, X31
	025 Call float3.op_Implicit, X0
	026 Move S3, [X31+32]
	027 Move S4, [X31+36]
	028 Move V5, [X31+40]
	029 Move [X31+16], S0
	030 Move [X31+24], S1
	031 Move [X31+24], S2
	032 Move V0, V3
	033 Move V1, V4
	034 Move V2, V5
	035 Move X0, X31
	036 Call float3.op_Implicit, X0
	037 Move [X31], S0
	038 Move [X31+8], S1
	039 Add X0, X31, 16
	040 Add X1, X31, 0
	041 Move V0, V8
	042 Move [X31+8], S2
	043 Call XRSocketGrabTransformer.IsWithinRadius, X0, X1, V0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {52}
	048 NotImplemented "Instruction LDUR not yet implemented."
	049 Move V1, [X31+2]
	050 Move [X19+12], V0
	051 Move [X19], V1
	052 Move X30, [X31+80]
	053 Move X19, [X31+88]
	054 Move V8, [X31+64]
	055 Add X31, X31, 96
	056 Return 

Method: System.Void UpdateTargetWithScale(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor, System.Single innerRadius, in Unity.Mathematics.float3 initialScale, in Unity.Mathematics.float3 initialBounds, in Unity.Mathematics.float3 targetScale, ref UnityEngine.Pose targetPose, ref UnityEngine.Vector3 localScale)

Disassembly:
	0x03BB1094 FMUL S0, S0, S2
	0x03BB1098 FMUL S2, S3, S18
	0x03BB109C FMUL S6, S4, S18
	0x03BB10A0 FMUL S17, S0, S18
	0x03BB10A4 FMUL S18, S1, S18
	0x03BB10A8 FMUL S19, S1, S5
	0x03BB10AC FMUL S20, S1, S7
	0x03BB10B0 FMUL S1, S1, S16
	0x03BB10B4 FMUL S21, S3, S5
	0x03BB10B8 FMUL S22, S0, S7
	0x03BB10BC FMUL S23, S3, S16
	0x03BB10C0 FMUL S24, S4, S5
	0x03BB10C4 FMUL S25, S4, S7
	0x03BB10C8 FMUL S4, S4, S16
	0x03BB10CC FMUL S5, S0, S5
	0x03BB10D0 FMUL S3, S3, S7
	0x03BB10D4 FMUL S0, S0, S16
	0x03BB10D8 FADD S7, S19, S22
	0x03BB10DC FADD S16, S20, S23
	0x03BB10E0 FADD S1, S24, S1
	0x03BB10E4 FADD S19, S21, S25
	0x03BB10E8 FADD S2, S7, S2
	0x03BB10EC FADD S6, S6, S16
	0x03BB10F0 FADD S1, S17, S1
	0x03BB10F4 FSUB S7, S18, S19
	0x03BB10F8 FSUB S2, S2, S4
	0x03BB10FC FSUB S4, S6, S5
	0x03BB1100 FSUB S1, S1, S3
	0x03BB1104 FSUB S0, S7, S0
	0x03BB1108 STP S2, S4, [X6]
	0x03BB110C STP S1, S0, [X6 + 0x8]
	0x03BB1110 LDP D9, D8, [X31], #0x10
	0x03BB1114 RET
	0x03BB1118 LDR V1, [X0]
	0x03BB111C LDUR V2, [X0 + 0x4]
	0x03BB1120 LDR V3, [X1]
	0x03BB1124 LDUR V4, [X1 + 0x4]
	0x03BB1128 FMUL S0, S0, S0
	0x03BB112C FSUB S1, S1, S3
	0x03BB1130 FSUB V2.2S, V2.2S, V4.2S
	0x03BB1134 FMUL S1, S1, S1
	0x00000000 INVALID
	0x03BB113C FADD S1, S1, S2
	0x03BB1140 MOV S2, V2.S[1]
	0x03BB1144 FADD S1, S2, S1
	0x03BB1148 FCMP S1, S0
	0x03BB114C CSET W0, MI
	0x03BB1150 RET
	0x03BB1154 LDR V1, [X1 + 0x8]
	0x03BB1158 LDR V3, [X1]
	0x03BB115C LDR V2, [X0]
	0x03BB1160 LDR V4, [X0 + 0x8]
	0x03BB1164 FADD S1, S1, S0
	0x03BB1168 UNIMPLEMENTED
	0x03BB116C FADD V0.2S, V3.2S, V0.2S
	0x00000000 INVALID
	0x03BB1174 MOV S2, V0.S[1]
	0x03BB1178 FMOV W10, S2
	0x03BB117C MOVZ W8, 0x7F800000
	0x03BB1180 AND W10, W10, 0x7FFFFFFF
	0x03BB1184 CMP W10, W8
	0x03BB1188 FDIV S1, S4, S1
	0x03BB118C FCCMP S0, S2, 0x0, LS
	0x03BB1190 FMOV W9, S1
	0x03BB1194 FCSEL S0, S0, S2, GT
	0x03BB1198 LDR V3, [X2]
	0x03BB119C LDR V4, [X2 + 0x8]
	0x03BB11A0 AND W9, W9, 0x7FFFFFFF
	0x03BB11A4 FCMP S0, S1
	0x03BB11A8 CCMP W9, W8, 0x2, LE
	0x03BB11AC FCSEL S0, S0, S1, HI
	0x03BB11B0 UNIMPLEMENTED
	0x03BB11B4 FDIV S0, S4, S0
	0x00000000 INVALID
	0x03BB11BC STR D1, [X3]
	0x03BB11C0 STR S0, [X3 + 0x8]
	0x03BB11C4 RET
	0x03BB11C8 STP X30, X21, [X31 - 0x20]!
	0x03BB11CC STP X20, X19, [X31 + 0x10]
	0x03BB11D0 LDR X8, [X2 + 0x8]
	0x03BB11D4 STP X1, X2, [X0 + 0x20]
	0x03BB11D8 MOV X19, X0
	0x03BB11DC MOV X20, X1
	0x03BB11E0 STR X8, [X0 + 0x10]
	0x03BB11E4 LDRB W21, [X2 + 0x52]
	0x03BB11E8 STR X0, [X0 + 0x40]
	0x03BB11EC MOV X0, X2
	0x03BB11F0 BL 0x1C16D84
	0x03BB11F4 TBZ X0, 0x0, 0x3BB120C
	0x03BB11F8 CMP W21, 0x4
	0x03BB11FC B.NE 0x3BB1228

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+80], D8
	003 Move [X31+88], X30
	004 Move [X31+96], X24
	005 Move [X31+104], X23
	006 Move [X31+112], X22
	007 Move [X31+120], X21
	008 Move [X31+128], X20
	009 Move [X31+136], X19
	010 Move X22, X2
	011 Add X2, X31, 48
	012 Move X19, X6
	013 Move X21, X5
	014 Move X20, X4
	015 Move X23, X3
	016 Move V8, V0
	017 Move X24, X0
	018 Move [X31+48], X31
	019 Move [X31+56], X31
	020 Move [X31+72], W31
	021 Move [X31+64], X31
	022 Move [X31+40], W31
	023 Move [X31+32], X31
	024 Move [X31+24], W31
	025 Move [X31+16], X31
	026 Move [X31+8], W31
	027 Move [X31], X31
	028 Call XRSocketGrabTransformer.GetTargetPoseForInteractable, X0, X1, X2
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {106}
	033 Compare X24, 0
	034 JumpIfEqual {116}
	035 Move X0, X24
	036 Move X1, X31
	037 Call Component.get_transform, X0
	038 Compare X0, 0
	039 JumpIfEqual {116}
	040 Move X1, X31
	041 Call Transform.get_position, X0
	042 Move X8, -51142656
	043 Move [X31+32], S0
	044 Move [X31+40], S1
	045 Move V0, [X8+816]
	046 Add X0, X31, 32
	047 Add X1, X31, 48
	048 Move X2, X31
	049 Move [X31+40], S2
	050 Call BurstMathUtility.FastVectorEquals, X0, X1, V0
	051 Move W24, W0
	052 Move X0, X22
	053 Move X1, X20
	054 Move X2, X23
	055 Move V0, V8
	056 Call XRSocketGrabTransformer.FastCalculateRadiusOffset, X0, X1, X2, V0
	057 Move S3, [X21]
	058 Move S1, [X21+4]
	059 Move V2, [X21+8]
	060 And W31, W24, 1
	061 NotImplemented "Instruction FCSEL not yet implemented."
	062 Move V0, V3
	063 Move X0, X31
	064 Call float3.op_Implicit, X0
	065 Move S3, [X31+48]
	066 Move S4, [X31+52]
	067 Move V5, [X31+56]
	068 Move [X31+16], S0
	069 Move [X31+24], S1
	070 Move [X31+24], S2
	071 Move V0, V3
	072 Move V1, V4
	073 Move V2, V5
	074 Move X0, X31
	075 Call float3.op_Implicit, X0
	076 Move [X31], S0
	077 Move [X31+8], S1
	078 Add X0, X31, 16
	079 Add X1, X31, 0
	080 Move V0, V8
	081 Move [X31+8], S2
	082 Call XRSocketGrabTransformer.IsWithinRadius, X0, X1, V0
	083 Move TEMP, X0
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfNotEqual {98}
	087 NotImplemented "Instruction LDUR not yet implemented."
	088 Move V1, [X31+3]
	089 Move [X21+12], V0
	090 Move [X21], V1
	091 Move TEMP, X24
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfNotEqual {106}
	095 Move S0, [X20]
	096 Move S1, [X20+4]
	097 Move V2, [X20+8]
	098 Move S0, [X22]
	099 Move S1, [X22+4]
	100 Move V2, [X22+8]
	101 Move X0, X31
	102 Call float3.op_Implicit, X0
	103 Move [X19], S0
	104 Move [X19+8], S1
	105 Move [X19+8], S2
	106 Move X20, [X31+128]
	107 Move X19, [X31+136]
	108 Move X22, [X31+112]
	109 Move X21, [X31+120]
	110 Move X24, [X31+96]
	111 Move X23, [X31+104]
	112 Move X30, [X31+88]
	113 Move V8, [X31+80]
	114 Add X31, X31, 144
	115 Return 
	116 Call 0x1C17F20

Method: System.Void OnUnlink(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable)

Disassembly:
	0x03BB1670 BR X9
	0x03BB1674 SUB X31, X31, 0xB0
	0x03BB1678 STP X29, X30, [X31 + 0x50]
	0x03BB167C STP X28, X27, [X31 + 0x60]
	0x03BB1680 STP X26, X25, [X31 + 0x70]
	0x03BB1684 STP X24, X23, [X31 + 0x80]
	0x03BB1688 STP X22, X21, [X31 + 0x90]
	0x03BB168C STP X20, X19, [X31 + 0xA0]
	0x03BB1690 STP X7, X0, [X31]
	0x03BB1694 ADRP X20, 0x831000
	0x03BB1698 ADRP X19, 0x56D000
	0x03BB169C ADRP X29, 0x548000
	0x03BB16A0 LDRB W8, [X20 + 0xCC9]
	0x03BB16A4 LDP X22, X21, [X31 + 0xB0]
	0x03BB16A8 LDR X19, [X19 + 0x838]
	0x03BB16AC LDR X29, [X29 + 0x7B8]
	0x03BB16B0 MOV X23, X6
	0x03BB16B4 MOV X24, X5
	0x03BB16B8 MOV X25, X4
	0x03BB16BC MOV X26, X3
	0x03BB16C0 MOV X27, X2
	0x03BB16C4 MOV X28, X1
	0x03BB16C8 TBNZ X8, 0x0, 0x3BB16EC
	0x03BB16CC ADRP X0, 0x56D000
	0x03BB16D0 LDR X0, [X0 + 0x838]
	0x03BB16D4 BL 0x1C16CF4
	0x03BB16D8 ADRP X0, 0x548000
	0x03BB16DC LDR X0, [X0 + 0x7B8]
	0x03BB16E0 BL 0x1C16CF4
	0x03BB16E4 MOVZ W8, 0x1
	0x03BB16E8 STRB W8, [X20 + 0xCC9]
	0x03BB16EC LDR X0, [X19]
	0x03BB16F0 MOV X1, X28
	0x03BB16F4 STR X31, [X31 + 0x48]
	0x03BB16F8 BL 0x1C16E04
	0x03BB16FC LDR X8, [X29]
	0x03BB1700 STR X0, [X31 + 0x10]
	0x03BB1704 MOV X1, X27
	0x03BB1708 MOV X0, X8
	0x03BB170C BL 0x1C16E04
	0x03BB1710 LDR X8, [X19]
	0x03BB1714 STR X0, [X31 + 0x18]
	0x03BB1718 MOV X1, X26
	0x03BB171C MOV X0, X8
	0x03BB1720 BL 0x1C16E04
	0x03BB1724 LDR X8, [X29]
	0x03BB1728 STR X0, [X31 + 0x20]
	0x03BB172C MOV X1, X25
	0x03BB1730 MOV X0, X8
	0x03BB1734 BL 0x1C16E04
	0x03BB1738 LDR X8, [X29]
	0x03BB173C STR X0, [X31 + 0x28]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x832000
	007 Move W8, [X21+3259]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5AC000
	015 Move X0, [X0+3760]
	016 Call 0x1C17CF4
	017 Move X0, 0x5AC000
	018 Move X0, [X0+3736]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3259], W8
	022 Move [X31+8], W31
	023 Move [X31], X31
	024 Move X0, [X20+64]
	025 Compare X0, 0
	026 JumpIfEqual {67}
	027 Move X8, 0x5AC000
	028 Move X8, [X8+3736]
	029 Add X2, X31, 0
	030 Move X1, X19
	031 Move X3, [X8]
	032 Call Dictionary`2<Object, float3>.TryGetValue, X0, X1, X2
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {61}
	037 Move S0, [X31]
	038 Move S1, [X31+4]
	039 Move V2, [X31+8]
	040 Move X0, X31
	041 Call float3.op_Implicit, X0
	042 Compare X19, 0
	043 JumpIfEqual {67}
	044 Move X0, X19
	045 Move X1, X31
	046 Call XRGrabInteractable.SetTargetLocalScale, X0, X1
	047 Move X0, [X20+64]
	048 Compare X0, 0
	049 JumpIfEqual {67}
	050 Move X21, 0x5AC000
	051 Move X21, [X21+3760]
	052 Move X1, X19
	053 Move X2, [X21]
	054 Call Dictionary`2<Object, float3>.Remove, X0, X1
	055 Move X0, [X20+72]
	056 Compare X0, 0
	057 JumpIfEqual {67}
	058 Move X2, [X21]
	059 Move X1, X19
	060 Call Dictionary`2<Object, float3>.Remove, X0, X1
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X30, [X31+16]
	064 Move X21, [X31+24]
	065 Add X31, X31, 48
	066 Return 
	067 Call 0x1C17F20

Method: System.Boolean RegisterInteractableScale(UnityEngine.XR.Interaction.Toolkit.IXRInteractable targetInteractable, UnityEngine.Vector3 scale)

Disassembly:
	0x03BB0A90 BL 0x1C16DFC
	0x03BB0A94 BL 0x3BB18D4
	0x03BB0A98 CBZ X0, 0x3BB0AD4
	0x03BB0A9C MOV X7, X0
	0x03BB0AA0 MOV X0, X25
	0x03BB0AA4 MOV X1, X24
	0x03BB0AA8 MOV X2, X23
	0x03BB0AAC MOV X3, X22
	0x03BB0AB0 MOV X4, X21
	0x03BB0AB4 MOV X5, X20
	0x03BB0AB8 MOV X6, X19
	0x03BB0ABC LDP X20, X19, [X31 + 0x40]
	0x03BB0AC0 LDP X22, X21, [X31 + 0x30]
	0x03BB0AC4 LDP X24, X23, [X31 + 0x20]
	0x03BB0AC8 LDP X26, X25, [X31 + 0x10]
	0x03BB0ACC LDP X30, X27, [X31], #0x50
	0x03BB0AD0 BR X7
	0x03BB0AD4 MOV X0, X25
	0x03BB0AD8 MOV X1, X24
	0x03BB0ADC MOV X2, X23
	0x03BB0AE0 MOV X3, X22
	0x03BB0AE4 MOV X4, X21
	0x03BB0AE8 MOV X5, X20
	0x03BB0AEC MOV X6, X19
	0x03BB0AF0 LDP X20, X19, [X31 + 0x40]
	0x03BB0AF4 LDP X22, X21, [X31 + 0x30]
	0x03BB0AF8 LDP X24, X23, [X31 + 0x20]
	0x03BB0AFC LDP X26, X25, [X31 + 0x10]
	0x03BB0B00 MOV X7, X31
	0x03BB0B04 LDP X30, X27, [X31], #0x50
	0x03BB0B08 B 0x3BC9044
	0x03BB0B0C STR D8, [X31 - 0x30]!
	0x03BB0B10 STR X30, [X31 + 0x8]
	0x03BB0B14 STP X22, X21, [X31 + 0x10]
	0x03BB0B18 STP X20, X19, [X31 + 0x20]
	0x03BB0B1C ADRP X21, 0x832000
	0x03BB0B20 ADRP X22, 0x56B000
	0x03BB0B24 LDRB W8, [X21 + 0xCD2]
	0x03BB0B28 LDR X22, [X22 + 0x848]
	0x03BB0B2C MOV V8.16B, V0.16B
	0x03BB0B30 MOV X19, X1
	0x03BB0B34 MOV X20, X0
	0x03BB0B38 TBNZ X8, 0x0, 0x3BB0B5C
	0x03BB0B3C ADRP X0, 0x56B000
	0x03BB0B40 LDR X0, [X0 + 0x848]
	0x03BB0B44 BL 0x1C16CF4
	0x03BB0B48 ADRP X0, 0x5AC000
	0x03BB0B4C LDR X0, [X0 + 0xEA0]
	0x03BB0B50 BL 0x1C16CF4
	0x03BB0B54 MOVZ W8, 0x1
	0x03BB0B58 STRB W8, [X21 + 0xCD2]
	0x03BB0B5C LDR X0, [X22]
	0x03BB0B60 LDR W8, [X0 + 0xE0]
	0x03BB0B64 CBNZ W8, 0x3BB0B6C
	0x03BB0B68 BL 0x1C16DFC
	0x03BB0B6C MOV X0, X31
	0x03BB0B70 BL 0x36FA670
	0x03BB0B74 TBZ X0, 0x0, 0x3BB0BBC
	0x03BB0B78 ADRP X8, 0x5AC000
	0x03BB0B7C LDR X8, [X8 + 0xEA0]
	0x03BB0B80 LDR X0, [X8]
	0x03BB0B84 LDR W8, [X0 + 0xE0]
	0x03BB0B88 CBNZ W8, 0x3BB0B90
	0x03BB0B8C BL 0x1C16DFC
	0x03BB0B90 BL 0x3BB1CB0
	0x03BB0B94 CBZ X0, 0x3BB0BBC
	0x03BB0B98 MOV X2, X0
	0x03BB0B9C MOV X0, X20
	0x03BB0BA0 MOV X1, X19
	0x03BB0BA4 LDP X20, X19, [X31 + 0x20]
	0x03BB0BA8 LDP X22, X21, [X31 + 0x10]
	0x03BB0BAC LDR X30, [X31 + 0x8]
	0x03BB0BB0 MOV V0.16B, V8.16B
	0x03BB0BB4 LDR V8, [X31], #0x30
	0x03BB0BB8 BR X2
	0x03BB0BBC LDR V0, [X20]
	0x03BB0BC0 LDUR V1, [X20 + 0x4]
	0x03BB0BC4 LDR V2, [X19]
	0x03BB0BC8 LDUR V3, [X19 + 0x4]
	0x03BB0BCC LDP X20, X19, [X31 + 0x20]
	0x03BB0BD0 LDP X22, X21, [X31 + 0x10]
	0x03BB0BD4 FSUB S0, S0, S2
	0x03BB0BD8 FSUB V1.2S, V1.2S, V3.2S
	0x03BB0BDC FMUL S0, S0, S0
	0x00000000 INVALID
	0x03BB0BE4 FADD S0, S0, S1
	0x03BB0BE8 MOV S1, V1.S[1]
	0x03BB0BEC LDR X30, [X31 + 0x8]
	0x03BB0BF0 FADD S0, S1, S0
	0x03BB0BF4 FMUL S1, S8, S8
	0x03BB0BF8 FCMP S0, S1
	0x03BB0BFC CSET W0, MI
	0x03BB0C00 LDR V8, [X31], #0x30
	0x03BB0C04 RET
	0x03BB0C08 SUB X31, X31, 0x50
	0x03BB0C0C STR X30, [X31 + 0x10]
	0x03BB0C10 STP X24, X23, [X31 + 0x20]
	0x03BB0C14 STP X22, X21, [X31 + 0x30]
	0x03BB0C18 STP X20, X19, [X31 + 0x40]
	0x03BB0C1C STR D0, [X31]
	0x03BB0C20 ADRP X23, 0x832000
	0x03BB0C24 ADRP X24, 0x56B000
	0x03BB0C28 LDRB W8, [X23 + 0xCD7]
	0x03BB0C2C LDR X24, [X24 + 0x848]
	0x03BB0C30 MOV X19, X3
	0x03BB0C34 MOV X20, X2
	0x03BB0C38 MOV X21, X1
	0x03BB0C3C MOV X22, X0
	0x03BB0C40 TBNZ X8, 0x0, 0x3BB0C64
	0x03BB0C44 ADRP X0, 0x56B000
	0x03BB0C48 LDR X0, [X0 + 0x848]
	0x03BB0C4C BL 0x1C16CF4
	0x03BB0C50 ADRP X0, 0x5AC000
	0x03BB0C54 LDR X0, [X0 + 0xEB8]
	0x03BB0C58 BL 0x1C16CF4
	0x03BB0C5C MOVZ W8, 0x1
	0x03BB0C60 STRB W8, [X23 + 0xCD7]
	0x03BB0C64 LDR X0, [X24]
	0x03BB0C68 LDR W8, [X0 + 0xE0]
	0x03BB0C6C CBNZ W8, 0x3BB0C74
	0x03BB0C70 BL 0x1C16DFC
	0x03BB0C74 MOV X0, X31
	0x03BB0C78 BL 0x36FA670
	0x03BB0C7C TBZ X0, 0x0, 0x3BB0CD0
	0x03BB0C80 ADRP X8, 0x5AC000
	0x03BB0C84 LDR X8, [X8 + 0xEB8]
	0x03BB0C88 LDR X0, [X8]
	0x03BB0C8C LDR W8, [X0 + 0xE0]
	0x03BB0C90 CBNZ W8, 0x3BB0C98
	0x03BB0C94 BL 0x1C16DFC
	0x03BB0C98 BL 0x3BB20AC
	0x03BB0C9C CBZ X0, 0x3BB0CD0
	0x03BB0CA0 MOV X4, X0
	0x03BB0CA4 MOV X0, X22
	0x03BB0CA8 MOV X1, X21
	0x03BB0CAC MOV X2, X20
	0x03BB0CB0 MOV X3, X19
	0x03BB0CB4 LDP X20, X19, [X31 + 0x40]
	0x03BB0CB8 LDP X22, X21, [X31 + 0x30]
	0x03BB0CBC LDP X24, X23, [X31 + 0x20]
	0x03BB0CC0 LDR X30, [X31 + 0x10]
	0x03BB0CC4 LDR V0, [X31]
	0x03BB0CC8 ADD X31, X31, 0x50
	0x03BB0CCC BR X4
	0x03BB0CD0 LDR V0, [X21 + 0x8]
	0x03BB0CD4 LDR V4, [X31]
	0x03BB0CD8 LDR V2, [X21]
	0x03BB0CDC LDR V1, [X22]
	0x03BB0CE0 LDR V3, [X22 + 0x8]
	0x03BB0CE4 FADD S0, S0, S4
	0x03BB0CE8 UNIMPLEMENTED
	0x03BB0CEC FADD V2.2S, V2.2S, V4.2S
	0x00000000 INVALID
	0x03BB0CF4 MOV S2, V1.S[1]
	0x03BB0CF8 FMOV W10, S2
	0x03BB0CFC MOVZ W8, 0x7F800000
	0x03BB0D00 AND W10, W10, 0x7FFFFFFF
	0x03BB0D04 CMP W10, W8
	0x03BB0D08 FDIV S0, S3, S0
	0x03BB0D0C FCCMP S1, S2, 0x0, LS
	0x03BB0D10 FMOV W9, S0
	0x03BB0D14 FCSEL S1, S1, S2, GT
	0x03BB0D18 LDR V4, [X20]
	0x03BB0D1C LDR V3, [X20 + 0x8]
	0x03BB0D20 AND W9, W9, 0x7FFFFFFF
	0x03BB0D24 FCMP S1, S0
	0x03BB0D28 CCMP W9, W8, 0x2, LE
	0x03BB0D2C FCSEL S0, S1, S0, HI
	0x03BB0D30 UNIMPLEMENTED
	0x03BB0D34 FDIV S0, S3, S0
	0x00000000 INVALID
	0x03BB0D3C STR D1, [X19]
	0x03BB0D40 STR S0, [X19 + 0x8]
	0x03BB0D44 LDP X20, X19, [X31 + 0x40]
	0x03BB0D48 LDP X22, X21, [X31 + 0x30]
	0x03BB0D4C LDP X24, X23, [X31 + 0x20]
	0x03BB0D50 LDR X30, [X31 + 0x10]
	0x03BB0D54 ADD X31, X31, 0x50
	0x03BB0D58 RET
	0x03BB0D5C STR X30, [X31 - 0x30]!
	0x03BB0D60 STP X22, X21, [X31 + 0x10]
	0x03BB0D64 STP X20, X19, [X31 + 0x20]
	0x03BB0D68 ADRP X20, 0x832000
	0x03BB0D6C ADRP X22, 0x5AC000
	0x03BB0D70 ADRP X21, 0x5AC000
	0x03BB0D74 LDRB W8, [X20 + 0xCC3]
	0x03BB0D78 LDR X22, [X22 + 0xEC8]
	0x03BB0D7C LDR X21, [X21 + 0xED0]
	0x03BB0D80 MOV X19, X0
	0x03BB0D84 TBNZ X8, 0x0, 0x3BB0DA8
	0x03BB0D88 ADRP X0, 0x5AC000
	0x03BB0D8C LDR X0, [X0 + 0xED0]
	0x03BB0D90 BL 0x1C16CF4
	0x03BB0D94 ADRP X0, 0x5AC000
	0x03BB0D98 LDR X0, [X0 + 0xEC8]
	0x03BB0D9C BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X25
	012 Move [X31+112], X24
	013 Move [X31+120], X23
	014 Move [X31+128], X22
	015 Move [X31+136], X21
	016 Move [X31+144], X20
	017 Move [X31+152], X19
	018 Move X20, 0x833000
	019 Move W8, [X20+3260]
	020 Move V8, V2
	021 Move V9, V1
	022 Move V10, V0
	023 Move X19, X1
	024 Move X21, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {43}
	029 Move X0, 0x5AA000
	030 Move X0, [X0+2968]
	031 Call 0x1C17CF4
	032 Move X0, 0x5AD000
	033 Move X0, [X0+3712]
	034 Call 0x1C17CF4
	035 Move X0, 0x5AD000
	036 Move X0, [X0+3720]
	037 Call 0x1C17CF4
	038 Move X0, 0x5AB000
	039 Move X0, [X0+2264]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X20+3260], W8
	043 Move X0, [X21+64]
	044 Compare X0, 0
	045 JumpIfEqual {230}
	046 Move X8, 0x5AD000
	047 Move X8, [X8+3712]
	048 Move X1, X19
	049 Move X2, [X8]
	050 Call Dictionary`2<Object, float3>.ContainsKey, X0, X1
	051 Move W20, W0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {210}
	056 Move X22, [X21+64]
	057 Move V0, V10
	058 Move V1, V9
	059 Move V2, V8
	060 Move X0, X31
	061 Call float3.op_Implicit, X0
	062 Compare X22, 0
	063 JumpIfEqual {230}
	064 Move X24, 0x5AD000
	065 Move X24, [X24+3720]
	066 Move X0, X22
	067 Move X1, X19
	068 Move X2, [X24]
	069 Call Dictionary`2<Object, float3>.set_Item, X0, X1, X2
	070 Compare X19, 0
	071 JumpIfEqual {230}
	072 Move X23, 0x5AB000
	073 Move X8, [X19]
	074 Move X23, [X23+2264]
	075 NotImplemented "Instruction LDRH not yet implemented."
	076 Move X1, [X23]
	077 Compare X9, 0
	078 JumpIfEqual {85}
	079 Move X10, [X8+176]
	080 Add X10, X10, 8
	081 NotImplemented "Instruction LDUR not yet implemented."
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Subtract X9, X9, 1
	084 Add X10, X10, 16
	085 Move W2, 6
	086 Move X0, X19
	087 Call 0x1C5D788
	088 Move W9, [X10]
	089 Add W9, W9, 6
	090 Add X8, X8, W9
	091 Add X0, X8, 312
	092 Move X8, [X0]
	093 Move X1, [X0+8]
	094 Move X0, X19
	095 NotImplemented "Instruction BLR not yet implemented."
	096 Compare X0, 0
	097 JumpIfEqual {230}
	098 Move X1, X31
	099 Move X22, X0
	100 Call Transform.get_position, X0
	101 Move X0, X22
	102 Move X1, X31
	103 Move [X31], S1
	104 Move [X31+8], S0
	105 Move V10, V2
	106 Call Transform.get_rotation, X0
	107 Move X25, 0x829000
	108 Move W8, [X25+1923]
	109 Move V11, V0
	110 Move V12, V1
	111 Move V13, V2
	112 Move V14, V3
	113 Compare W8, 0
	114 JumpIfNotEqual {120}
	115 Move X0, 0x544000
	116 Move X0, [X0+1440]
	117 Call 0x1C17CF4
	118 Move W8, 1
	119 Move [X25+1923], W8
	120 Move X8, 0x544000
	121 Move X8, [X8+1440]
	122 Move X25, 0x829000
	123 Move W9, [X25+1939]
	124 Move X8, [X8]
	125 Move X8, [X8+184]
	126 Move S9, [X8]
	127 Move S8, [X8+4]
	128 Move V15, [X8+8]
	129 Compare W9, 0
	130 JumpIfNotEqual {136}
	131 Move X0, 0x545000
	132 Move X0, [X0+1448]
	133 Call 0x1C17CF4
	134 Move W8, 1
	135 Move [X25+1939], W8
	136 Move X8, 0x545000
	137 Move X8, [X8+1448]
	138 Move X0, X22
	139 Move V0, V9
	140 Move V1, V8
	141 Move X8, [X8]
	142 Move V2, V15
	143 Move X1, X31
	144 Move X8, [X8+184]
	145 Move S3, [X8]
	146 Move S4, [X8+4]
	147 Move S5, [X8+8]
	148 Move S6, [X8+12]
	149 Call Transform.SetPositionAndRotation, X0, X1, X2
	150 Move X8, [X19]
	151 Move X21, [X21+72]
	152 Move X1, [X23]
	153 NotImplemented "Instruction LDRH not yet implemented."
	154 Compare X9, 0
	155 JumpIfEqual {162}
	156 Move X10, [X8+176]
	157 Add X10, X10, 8
	158 NotImplemented "Instruction LDUR not yet implemented."
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Subtract X9, X9, 1
	161 Add X10, X10, 16
	162 Move W2, 6
	163 Move X0, X19
	164 Call 0x1C5D788
	165 Move W9, [X10]
	166 Add W9, W9, 6
	167 Add X8, X8, W9
	168 Add X0, X8, 312
	169 Move X8, [X0]
	170 Move X1, [X0+8]
	171 Move X0, X19
	172 NotImplemented "Instruction BLR not yet implemented."
	173 Move X8, 0x5AA000
	174 Move X8, [X8+2968]
	175 Move X23, X0
	176 Move X8, [X8]
	177 Move W9, [X8+224]
	178 Compare W9, 0
	179 JumpIfNotEqual {182}
	180 Move X0, X8
	181 Call 0x1C17DFC
	182 Add X8, X31, 8
	183 Move X0, X23
	184 Move X1, X31
	185 Call BoundsUtils.GetBounds, X0
	186 Move S0, [X31+20]
	187 Move S1, [X31+24]
	188 Move V2, [X31+28]
	189 Move X0, X31
	190 Add S0, S0, S0
	191 Add S1, S1, S1
	192 Add S2, S2, S2
	193 Call float3.op_Implicit, X0
	194 Compare X21, 0
	195 JumpIfEqual {230}
	196 Move X2, [X24]
	197 Move X0, X21
	198 Move X1, X19
	199 Call Dictionary`2<Object, float3>.set_Item, X0, X1, X2
	200 Move S1, [X31]
	201 Move S0, [X31+4]
	202 Move X0, X22
	203 Move V2, V10
	204 Move V3, V11
	205 Move V4, V12
	206 Move V5, V13
	207 Move V6, V14
	208 Move X1, X31
	209 Call Transform.SetPositionAndRotation, X0, X1, X2
	210 NotImplemented "Instruction ORN not yet implemented."
	211 Move X20, [X31+144]
	212 Move X19, [X31+152]
	213 Move X22, [X31+128]
	214 Move X21, [X31+136]
	215 Move X24, [X31+112]
	216 Move X23, [X31+120]
	217 Move X30, [X31+96]
	218 Move X25, [X31+104]
	219 Move D9, [X31+80]
	220 Move D8, [X31+88]
	221 Move D11, [X31+64]
	222 Move D10, [X31+72]
	223 Move D13, [X31+48]
	224 Move D12, [X31+56]
	225 Move D15, [X31+32]
	226 Move D14, [X31+40]
	227 And W0, W8, 1
	228 Add X31, X31, 160
	229 Return X0
	230 Call 0x1C17F20

Method: Unity.Mathematics.float3 ComputeSocketTargetScale(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable, in Unity.Mathematics.float3 initialInteractableScale)

Disassembly:
	0x03BB0F60 FNEG S7, S7
	0x03BB0F64 FNEG S16, S16
	0x00000000 INVALID
	0x00000000 INVALID
	0x03BB0F70 FADD S26, S26, S26
	0x03BB0F74 FDIV S22, S0, S22
	0x03BB0F78 FSUB V23.2S, V23.2S, V24.2S
	0x03BB0F7C FMUL S24, S19, S26
	0x03BB0F80 FMUL S1, S1, S22
	0x03BB0F84 FMUL S6, S22, S6
	0x03BB0F88 FMUL S7, S22, S7
	0x03BB0F8C FMUL S16, S22, S16
	0x03BB0F90 FADD S21, S21, S24
	0x03BB0F94 FMUL S22, S2, S1
	0x03BB0F98 FMUL S24, S3, S1
	0x03BB0F9C FMUL S25, S4, S1
	0x03BB0FA0 FMUL S1, S1, S5
	0x03BB0FA4 FMUL S27, S6, S5
	0x03BB0FA8 FMUL S28, S7, S5
	0x03BB0FAC FMUL S5, S16, S5
	0x03BB0FB0 FMUL S30, S2, S6
	0x03BB0FB4 FMUL S31, S4, S7
	0x03BB0FB8 FMUL S8, S2, S16
	0x03BB0FBC FMUL S9, S3, S6
	0x03BB0FC0 FMUL S2, S2, S7
	0x03BB0FC4 FMUL S7, S3, S7
	0x03BB0FC8 FMUL S3, S3, S16
	0x03BB0FCC FMUL S6, S4, S6
	0x03BB0FD0 FMUL S4, S4, S16
	0x03BB0FD4 FADD V16.2S, V23.2S, V23.2S
	0x00000000 INVALID
	0x03BB0FDC FADD V19.2S, V20.2S, V19.2S
	0x03BB0FE0 UNIMPLEMENTED
	0x03BB0FE4 FMUL S17, S17, D0.S[1]
	0x00000000 INVALID
	0x00000000 INVALID
	0x03BB0FF0 UNIMPLEMENTED
	0x03BB0FF4 FSUB S17, S17, S18
	0x03BB0FF8 MOV V16.S[1], V26.S[0]
	0x03BB0FFC LDR V26, [X0]
	0x03BB1000 FADD S17, S21, S17
	0x03BB1004 LDR V21, [X0 + 0x8]
	0x03BB1008 FADD S18, S27, S31
	0x03BB100C FADD S23, S28, S8
	0x03BB1010 FADD S7, S30, S7
	0x00000000 INVALID
	0x03BB1018 FADD S5, S5, S9
	0x03BB101C FADD S18, S22, S18
	0x03BB1020 FADD S22, S24, S23
	0x03BB1024 FSUB S1, S1, S7
	0x03BB1028 FSUB V7.2S, V20.2S, V16.2S
	0x03BB102C FADD S5, S25, S5
	0x03BB1030 FSUB S3, S18, S3
	0x03BB1034 FSUB S6, S22, S6
	0x03BB1038 FSUB S1, S1, S4
	0x03BB103C FADD V4.2S, V19.2S, V7.2S
	0x03BB1040 FADD S16, S21, S17
	0x03BB1044 FSUB S2, S5, S2
	0x03BB1048 FMUL S5, S3, S3
	0x03BB104C FMUL S7, S6, S6
	0x03BB1050 FADD V4.2S, V26.2S, V4.2S
	0x03BB1054 STR S16, [X5 + 0x8]
	0x03BB1058 FMUL S16, S2, S2
	0x03BB105C FADD S5, S5, S7
	0x03BB1060 STR D4, [X5]
	0x03BB1064 FMUL S17, S1, S1
	0x03BB1068 FADD S4, S16, S5
	0x03BB106C LDP S5, S7, [X1]
	0x03BB1070 LDP S16, S18, [X1 + 0x8]
	0x03BB1074 FADD S4, S17, S4
	0x03BB1078 FNEG S3, S3
	0x03BB107C FNEG S6, S6
	0x03BB1080 FNEG S2, S2
	0x03BB1084 FDIV S0, S0, S4
	0x03BB1088 FMUL S1, S1, S0
	0x03BB108C FMUL S3, S0, S3
	0x03BB1090 FMUL S4, S0, S6

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X22, 0x833000
	008 Move W8, [X22+3261]
	009 Move X19, X2
	010 Move X21, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x5AD000
	017 Move X0, [X0+3736]
	018 Call 0x1C17CF4
	019 Move X0, 0x54B000
	020 Move X0, [X0+1208]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+3261], W8
	024 Move [X31+56], W31
	025 Move [X31+48], X31
	026 Move [X31+40], W31
	027 Move [X31+32], X31
	028 Move [X31+24], W31
	029 Move [X31+16], X31
	030 Move [X31+8], W31
	031 Move [X31], X31
	032 Move W8, [X20+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 Move V1, [X20+36]
	037 Add X1, X31, 32
	038 Add X2, X31, 48
	039 Move X0, X19
	040 Move X3, X31
	041 Move [X31+32], D0
	042 Move [X31+40], S1
	043 Call BurstMathUtility.Scale, X0, X1, X2
	044 Move V0, [X31+48]
	045 Add X19, X31, 48
	046 Move X0, [X20+72]
	047 Compare X0, 0
	048 JumpIfEqual {85}
	049 Move X8, 0x5AC000
	050 Move X8, [X8+3736]
	051 Add X2, X31, 16
	052 Move X1, X21
	053 Move X3, [X8]
	054 Call Dictionary`2<Object, float3>.TryGetValue, X0, X1, X2
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {75}
	059 Move X8, 0x54A000
	060 Move V0, [X20+40]
	061 Move V1, [X20+48]
	062 Move X8, [X8+1208]
	063 Add X0, X31, 16
	064 Move [X31+32], D0
	065 Move [X31+40], S1
	066 Move X8, [X8]
	067 Add X1, X31, 32
	068 Add X3, X31, 0
	069 Move X2, X19
	070 Move X8, [X8+184]
	071 Move V0, [X8]
	072 Call XRSocketGrabTransformer.CalculateScaleToFit, X0, X1, X2, V0, X3
	073 Move V0, [X31]
	074 Add X19, X31, 0
	075 Move V0, [X19]
	076 Move S1, [X19+4]
	077 Move S2, [X19+8]
	078 Move X20, [X31+96]
	079 Move X19, [X31+104]
	080 Move X22, [X31+80]
	081 Move X21, [X31+88]
	082 Move X30, [X31+64]
	083 Add X31, X31, 112
	084 Return X0
	085 Call 0x1C17F20

Method: System.Boolean GetTargetPoseForInteractable(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable, UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor, out UnityEngine.Pose targetPose)

Disassembly:
	0x03BB1200 ADRP X8, 0xFFFFFFFFFE04F000
	0x03BB1204 ADD X8, X8, 0x7C8
	0x03BB1208 B 0x3BB121C
	0x03BB120C CMP W21, 0x3
	0x03BB1210 B.NE 0x3BB1224
	0x03BB1214 ADRP X8, 0xFFFFFFFFFE04F000
	0x03BB1218 ADD X8, X8, 0x7B0
	0x03BB121C STR X8, [X19 + 0x18]
	0x03BB1220 B 0x3BB1238
	0x03BB1224 CBZ X20, 0x3BB1250
	0x03BB1228 LDR X8, [X19 + 0x10]
	0x03BB122C LDR X9, [X19 + 0x20]
	0x03BB1230 STR X8, [X19 + 0x18]
	0x03BB1234 STR X9, [X19 + 0x40]
	0x03BB1238 ADRP X8, 0xFFFFFFFFFE04F000
	0x03BB123C ADD X8, X8, 0x738
	0x03BB1240 STR X8, [X19 + 0x38]
	0x03BB1244 LDP X20, X19, [X31 + 0x10]
	0x03BB1248 LDP X30, X21, [X31], #0x20
	0x03BB124C RET
	0x03BB1250 ADRP X1, 0xFFFFFFFFFCF6A000
	0x03BB1254 ADD X1, X1, 0xEE3
	0x03BB1258 MOV X0, X31
	0x03BB125C BL 0x1C16F3C
	0x03BB1260 MOV X1, X31
	0x03BB1264 BL 0x1C16DEC
	0x03BB1268 LDR X8, [X0 + 0x40]
	0x03BB126C LDR X5, [X0 + 0x18]
	0x03BB1270 LDR X4, [X0 + 0x28]
	0x03BB1274 MOV X0, X8
	0x03BB1278 BR X5
	0x03BB127C SUB X31, X31, 0x80
	0x03BB1280 STP X30, X27, [X31 + 0x30]
	0x03BB1284 STP X26, X25, [X31 + 0x40]
	0x03BB1288 STP X24, X23, [X31 + 0x50]
	0x03BB128C STP X22, X21, [X31 + 0x60]
	0x03BB1290 STP X20, X19, [X31 + 0x70]
	0x03BB1294 ADRP X27, 0x831000
	0x03BB1298 STR S0, [X31 + 0x2C]
	0x03BB129C ADRP X26, 0x56D000
	0x03BB12A0 ADRP X25, 0x542000
	0x03BB12A4 LDRB W8, [X27 + 0xCC4]
	0x03BB12A8 LDR X26, [X26 + 0x838]
	0x03BB12AC LDR X25, [X25 + 0xA90]
	0x03BB12B0 MOV X19, X5
	0x03BB12B4 MOV X20, X4
	0x03BB12B8 MOV X22, X3
	0x03BB12BC MOV X23, X2
	0x03BB12C0 MOV X24, X1
	0x03BB12C4 MOV X21, X0
	0x03BB12C8 TBNZ X8, 0x0, 0x3BB12EC
	0x03BB12CC ADRP X0, 0x542000
	0x03BB12D0 LDR X0, [X0 + 0xA90]
	0x03BB12D4 BL 0x1C16CF4
	0x03BB12D8 ADRP X0, 0x56D000
	0x03BB12DC LDR X0, [X0 + 0x838]
	0x03BB12E0 BL 0x1C16CF4
	0x03BB12E4 MOVZ W8, 0x1
	0x03BB12E8 STRB W8, [X27 + 0xCC4]
	0x03BB12EC LDR X0, [X26]
	0x03BB12F0 MOV X1, X24
	0x03BB12F4 STP X31, X31, [X31 + 0x18]
	0x03BB12F8 BL 0x1C16E04
	0x03BB12FC LDR X8, [X26]
	0x03BB1300 STR X0, [X31]
	0x03BB1304 MOV X1, X23
	0x03BB1308 MOV X0, X8
	0x03BB130C BL 0x1C16E04
	0x03BB1310 LDR X8, [X26]
	0x03BB1314 STR X0, [X31 + 0x8]
	0x03BB1318 MOV X1, X22
	0x03BB131C MOV X0, X8
	0x03BB1320 BL 0x1C16E04
	0x03BB1324 LDR X8, [X25]
	0x03BB1328 STR X0, [X31 + 0x10]
	0x03BB132C ADD X1, X31, 0x2C
	0x03BB1330 MOV X0, X8
	0x03BB1334 BL 0x1C16E04
	0x03BB1338 STR X0, [X31 + 0x18]
	0x03BB133C ADD X1, X31, 0x0
	0x03BB1340 MOV X0, X21
	0x03BB1344 MOV X2, X20
	0x03BB1348 MOV X3, X19
	0x03BB134C BL 0x1C16CB0
	0x03BB1350 LDP X20, X19, [X31 + 0x70]
	0x03BB1354 LDP X22, X21, [X31 + 0x60]
	0x03BB1358 LDP X24, X23, [X31 + 0x50]
	0x03BB135C LDP X26, X25, [X31 + 0x40]
	0x03BB1360 LDP X30, X27, [X31 + 0x30]
	0x03BB1364 ADD X31, X31, 0x80
	0x03BB1368 RET
	0x03BB136C STR X30, [X31 - 0x10]!
	0x03BB1370 MOV X0, X1
	0x03BB1374 MOV X1, X31
	0x03BB1378 BL 0x1C16CB4
	0x03BB137C CBZ X0, 0x3BB1390
	0x03BB1380 BL 0x1C16E08
	0x03BB1384 LDR V0, [X0]
	0x03BB1388 LDR X30, [X31], #0x10
	0x03BB138C RET
	0x03BB1390 BL 0x1C16F20
	0x03BB1394 STP X30, X23, [X31 - 0x30]!
	0x03BB1398 STP X22, X21, [X31 + 0x10]
	0x03BB139C STP X20, X19, [X31 + 0x20]
	0x03BB13A0 ADRP X20, 0x831000
	0x03BB13A4 ADRP X23, 0x5AB000
	0x03BB13A8 LDRB W8, [X20 + 0xCC5]
	0x03BB13AC LDR X23, [X23 + 0xEA8]
	0x03BB13B0 MOV X19, X0
	0x03BB13B4 TBNZ X8, 0x0, 0x3BB13F0
	0x03BB13B8 ADRP X0, 0x56A000
	0x03BB13BC LDR X0, [X0 + 0x848]
	0x03BB13C0 BL 0x1C16CF4
	0x03BB13C4 ADRP X0, 0x5AB000
	0x03BB13C8 LDR X0, [X0 + 0xEA8]
	0x03BB13CC BL 0x1C16CF4
	0x03BB13D0 ADRP X0, 0x5AB000
	0x03BB13D4 LDR X0, [X0 + 0xED8]
	0x03BB13D8 BL 0x1C16CF4
	0x03BB13DC ADRP X0, 0x5AB000
	0x03BB13E0 LDR X0, [X0 + 0xEE0]
	0x03BB13E4 BL 0x1C16CF4
	0x03BB13E8 MOVZ W8, 0x1
	0x03BB13EC STRB W8, [X20 + 0xCC5]
	0x03BB13F0 LDR X8, [X23]
	0x03BB13F4 LDR W9, [X8 + 0xE0]
	0x03BB13F8 CBNZ W9, 0x3BB1408
	0x03BB13FC MOV X0, X8
	0x03BB1400 BL 0x1C16DFC
	0x03BB1404 LDR X8, [X23]
	0x03BB1408 LDR X9, [X8 + 0xB8]
	0x03BB140C LDR X10, [X9]
	0x03BB1410 CBNZ X10, 0x3BB1480
	0x03BB1414 LDR W10, [X8 + 0xE0]
	0x03BB1418 CBNZ W10, 0x3BB142C
	0x03BB141C MOV X0, X8
	0x03BB1420 BL 0x1C16DFC
	0x03BB1424 LDR X8, [X23]
	0x03BB1428 LDR X9, [X8 + 0xB8]
	0x03BB142C ADRP X8, 0x56A000
	0x03BB1430 LDR X20, [X9 + 0x8]
	0x03BB1434 LDR X8, [X8 + 0x848]
	0x03BB1438 LDR X0, [X8]
	0x03BB143C ADRP X8, 0x5AB000
	0x03BB1440 LDR X8, [X8 + 0xEE0]
	0x03BB1444 LDR X21, [X8]
	0x03BB1448 ADRP X8, 0x5AB000
	0x03BB144C LDR X8, [X8 + 0xED8]
	0x03BB1450 LDR W9, [X0 + 0xE0]
	0x03BB1454 LDR X22, [X8]
	0x03BB1458 CBNZ W9, 0x3BB1460
	0x03BB145C BL 0x1C16DFC
	0x03BB1460 MOV X0, X20
	0x03BB1464 MOV X1, X21
	0x03BB1468 MOV X2, X22
	0x03BB146C MOV X3, X31
	0x03BB1470 BL 0x36FAD70
	0x03BB1474 LDR X8, [X23]
	0x03BB1478 LDR X9, [X8 + 0xB8]
	0x03BB147C STR X0, [X9]
	0x03BB1480 LDR W9, [X8 + 0xE0]
	0x03BB1484 CBNZ W9, 0x3BB1494
	0x03BB1488 MOV X0, X8
	0x03BB148C BL 0x1C16DFC
	0x03BB1490 LDR X8, [X23]
	0x03BB1494 LDR X8, [X8 + 0xB8]
	0x03BB1498 LDP X22, X21, [X31 + 0x10]
	0x03BB149C LDR X8, [X8]
	0x03BB14A0 STR X8, [X19]
	0x03BB14A4 LDP X20, X19, [X31 + 0x20]
	0x03BB14A8 LDP X30, X23, [X31], #0x30
	0x03BB14AC RET
	0x03BB14B0 STR X30, [X31 - 0x20]!
	0x03BB14B4 STP X20, X19, [X31 + 0x10]
	0x03BB14B8 ADRP X20, 0x831000
	0x03BB14BC ADRP X19, 0x5AB000
	0x03BB14C0 LDRB W8, [X20 + 0xCC6]
	0x03BB14C4 LDR X19, [X19 + 0xEA8]
	0x03BB14C8 TBNZ X8, 0x0, 0x3BB14E0
	0x03BB14CC ADRP X0, 0x5AB000
	0x03BB14D0 LDR X0, [X0 + 0xEA8]
	0x03BB14D4 BL 0x1C16CF4
	0x03BB14D8 MOVZ W8, 0x1
	0x03BB14DC STRB W8, [X20 + 0xCC6]
	0x03BB14E0 LDR X0, [X19]
	0x03BB14E4 STR X31, [X31 + 0x8]
	0x03BB14E8 LDR W8, [X0 + 0xE0]
	0x03BB14EC CBNZ W8, 0x3BB14F4
	0x03BB14F0 BL 0x1C16DFC
	0x03BB14F4 ADD X0, X31, 0x8
	0x03BB14F8 BL 0x3BB1394
	0x03BB14FC LDR X0, [X31 + 0x8]
	0x03BB1500 LDP X20, X19, [X31 + 0x10]
	0x03BB1504 LDR X30, [X31], #0x20
	0x03BB1508 RET
	0x03BB150C STP X30, X21, [X31 - 0x20]!
	0x03BB1510 STP X20, X19, [X31 + 0x10]
	0x03BB1514 ADRP X21, 0x831000
	0x03BB1518 ADRP X19, 0x5AB000
	0x03BB151C ADRP X20, 0x56A000
	0x03BB1520 LDRB W8, [X21 + 0xCC7]
	0x03BB1524 LDR X19, [X19 + 0xEE8]
	0x03BB1528 LDR X20, [X20 + 0x848]
	0x03BB152C TBNZ X8, 0x0, 0x3BB155C
	0x03BB1530 ADRP X0, 0x56A000
	0x03BB1534 LDR X0, [X0 + 0x848]
	0x03BB1538 BL 0x1C16CF4
	0x03BB153C ADRP X0, 0x5AB000
	0x03BB1540 LDR X0, [X0 + 0xEA8]
	0x03BB1544 BL 0x1C16CF4
	0x03BB1548 ADRP X0, 0x5AB000
	0x03BB154C LDR X0, [X0 + 0xEE8]
	0x03BB1550 BL 0x1C16CF4
	0x03BB1554 MOVZ W8, 0x1
	0x03BB1558 STRB W8, [X21 + 0xCC7]
	0x03BB155C LDR X0, [X20]
	0x03BB1560 ADRP X20, 0x5AB000
	0x03BB1564 LDR X19, [X19]
	0x03BB1568 LDR W8, [X0 + 0xE0]
	0x03BB156C LDR X20, [X20 + 0xEA8]
	0x03BB1570 CBNZ W8, 0x3BB1578
	0x03BB1574 BL 0x1C16DFC
	0x03BB1578 MOV X0, X19
	0x03BB157C MOV X1, X31

ISIL:
	001 Subtract X31, X31, 272
	002 Move [X31+176], D11
	003 Move [X31+184], D10
	004 Move [X31+192], D9
	005 Move [X31+200], D8
	006 Move [X31+208], X29
	007 Move [X31+224], X30
	008 Move [X31+232], X23
	009 Move [X31+240], X22
	010 Move [X31+248], X21
	011 Move [X31+256], X20
	012 Move [X31+264], X19
	013 Move X23, 0x832000
	014 Move X22, 0x56B000
	015 Move W8, [X23+3262]
	016 Move X22, [X22+1552]
	017 Move X19, X2
	018 Move X20, X1
	019 Move X21, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {38}
	024 Move X0, 0x5AA000
	025 Move X0, [X0+760]
	026 Call 0x1C17CF4
	027 Move X0, 0x543000
	028 Move X0, [X0+1432]
	029 Call 0x1C17CF4
	030 Move X0, 0x56B000
	031 Move X0, [X0+1552]
	032 Call 0x1C17CF4
	033 Move X0, 0x5AA000
	034 Move X0, [X0+1728]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X23+3262], W8
	038 Move X0, [X22]
	039 Move [X31+168], W31
	040 Move [X31+152], X31
	041 Move [X31+160], X31
	042 Move [X31+144], X31
	043 Move [X31+136], W31
	044 Move [X31+120], X31
	045 Move [X31+128], X31
	046 Move [X31+112], X31
	047 Move [X31+104], W31
	048 Move [X31+88], X31
	049 Move [X31+96], X31
	050 Move [X31+72], X31
	051 Move [X31+80], X31
	052 Move [X31+64], X31
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X22, 0x543000
	058 Move X22, [X22+1432]
	059 Add X8, X31, 0
	060 Move X0, X31
	061 Call Pose.get_identity
	062 NotImplemented "Instruction LDUR not yet implemented."
	063 Move V1, [X31]
	064 Move [X31+44], V0
	065 Move [X31+2], V1
	066 NotImplemented "Instruction LDUR not yet implemented."
	067 Move V1, [X31+2]
	068 Move [X19+12], V0
	069 Move [X19], V1
	070 Compare X21, 0
	071 JumpIfEqual {85}
	072 Move X8, 0x5AA000
	073 Move X8, [X8+1728]
	074 Move X9, [X21]
	075 Move X8, [X8]
	076 Move W11, [X9+304]
	077 Move W10, [X8+304]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X21, X31
	080 Move X9, [X9+200]
	081 Add X9, X9, X10
	082 NotImplemented "Instruction LDUR not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 NotImplemented "Instruction CSEL not yet implemented."
	085 Move X0, [X22]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X0, X21
	091 Move X1, X31
	092 Move X2, X31
	093 Call Object.op_Equality, X0, X1
	094 Move TEMP, X0
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfNotEqual {99}
	098 Move W0, W31
	099 Compare X20, 0
	100 JumpIfEqual {264}
	101 Move X10, 0x5AA000
	102 Move X8, [X20]
	103 Move X10, [X10+760]
	104 NotImplemented "Instruction LDRH not yet implemented."
	105 Move X1, [X10]
	106 Compare X9, 0
	107 JumpIfEqual {114}
	108 Move X10, [X8+176]
	109 Add X10, X10, 8
	110 NotImplemented "Instruction LDUR not yet implemented."
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Subtract X9, X9, 1
	113 Add X10, X10, 16
	114 Move W2, 6
	115 Move X0, X20
	116 Call 0x1C5D788
	117 Move W9, [X10]
	118 Add W9, W9, 6
	119 Add X8, X8, W9
	120 Add X0, X8, 312
	121 Move X8, [X0]
	122 Move X2, [X0+8]
	123 Move X0, X20
	124 Move X1, X21
	125 NotImplemented "Instruction BLR not yet implemented."
	126 Compare X21, 0
	127 JumpIfEqual {264}
	128 Move X23, X0
	129 Move X0, X21
	130 Move X1, X31
	131 Call Component.get_transform, X0
	132 Move X8, [X21]
	133 Move X22, X0
	134 Move X0, X21
	135 Move X1, X20
	136 Move X9, [X8+1448]
	137 Move X2, [X8+1456]
	138 NotImplemented "Instruction BLR not yet implemented."
	139 Compare X22, 0
	140 JumpIfEqual {264}
	141 Move X20, X0
	142 Move X0, X22
	143 Move X1, X31
	144 Call Transform.get_position, X0
	145 Compare X20, 0
	146 JumpIfEqual {264}
	147 Move X0, X20
	148 Move X1, X31
	149 Move V8, V0
	150 Move V9, V1
	151 Move V11, V2
	152 Call Transform.get_position, X0
	153 Move W8, [X21+524]
	154 Subtract S10, S8, S0
	155 Subtract S9, S9, S1
	156 Subtract S8, S11, S2
	157 Compare W8, 0
	158 JumpIfEqual {239}
	159 Move X0, X20
	160 Move V0, V10
	161 Move V1, V9
	162 Move V2, V8
	163 Move X1, X31
	164 Call Transform.InverseTransformDirection, X0, X1
	165 Compare X23, 0
	166 JumpIfEqual {264}
	167 Move X0, X23
	168 Move X1, X31
	169 Move V8, V0
	170 Move V9, V1
	171 Move V10, V2
	172 Call Transform.get_position, X0
	173 Move X0, X31
	174 Call float3.op_Implicit, X0
	175 Move X0, X23
	176 Move X1, X31
	177 Move [X31+128], S0
	178 Move [X31+136], S1
	179 Move [X31+136], S2
	180 Call Transform.get_rotation, X0
	181 Move X0, X31
	182 Call quaternion.op_Implicit, X0
	183 Move [X31+112], S0
	184 Move [X31+120], S1
	185 Move [X31+120], S2
	186 Move [X31+128], S3
	187 Move V0, V8
	188 Move V1, V9
	189 Move V2, V10
	190 Move X0, X31
	191 Call float3.op_Implicit, X0
	192 Move X0, X22
	193 Move X1, X31
	194 Move [X31+96], S0
	195 Move [X31+104], S1
	196 Move [X31+104], S2
	197 Call Transform.get_rotation, X0
	198 Move X0, X31
	199 Call quaternion.op_Implicit, X0
	200 Move X0, X20
	201 Move X1, X31
	202 Move [X31+80], S0
	203 Move [X31+88], S1
	204 Move [X31+88], S2
	205 Move [X31+96], S3
	206 Call Transform.get_rotation, X0
	207 Move X0, X31
	208 Call quaternion.op_Implicit, X0
	209 Add X0, X31, 128
	210 Add X1, X31, 112
	211 Add X2, X31, 96
	212 Add X3, X31, 80
	213 Add X4, X31, 64
	214 Add X5, X31, 160
	215 Add X6, X31, 144
	216 Move [X31+64], S0
	217 Move [X31+72], S1
	218 Move [X31+72], S2
	219 Move [X31+80], S3
	220 Call XRSocketGrabTransformer.FastComputeNewTrackedPose, X0, X1, X2, X3, X4, X5, X6
	221 Move S0, [X31+160]
	222 Move S1, [X31+164]
	223 Move V2, [X31+168]
	224 Move X0, X31
	225 Call float3.op_Implicit, X0
	226 Move [X19], S0
	227 Move [X19+8], S1
	228 Move [X19+8], S2
	229 Move S0, [X31+144]
	230 Move S1, [X31+148]
	231 Move S2, [X31+152]
	232 Move S3, [X31+156]
	233 Move X0, X31
	234 Call quaternion.op_Implicit, X0
	235 Move [X19+12], S0
	236 Move [X19+20], S1
	237 Move [X19+20], S2
	238 Move [X19+28], S3
	239 Compare X23, 0
	240 JumpIfEqual {264}
	241 Move X0, X23
	242 Move X1, X31
	243 Call Transform.get_position, X0
	244 Add S0, S10, S0
	245 Add S1, S9, S1
	246 Add S2, S8, S2
	247 Move [X19], S0
	248 Move [X19+8], S1
	249 Move [X19+8], S2
	250 Move W0, 1
	251 Move X20, [X31+256]
	252 Move X19, [X31+264]
	253 Move X22, [X31+240]
	254 Move X21, [X31+248]
	255 Move X30, [X31+224]
	256 Move X23, [X31+232]
	257 Move X29, [X31+208]
	258 Move D9, [X31+192]
	259 Move D8, [X31+200]
	260 Move D11, [X31+176]
	261 Move D10, [X31+184]
	262 Add X31, X31, 272
	263 Return X0
	264 Call 0x1C17F20

Method: System.Single FastCalculateRadiusOffset(in Unity.Mathematics.float3 initialScale, in Unity.Mathematics.float3 targetScale, in Unity.Mathematics.float3 initialBoundsSize, System.Single innerRadius)

Disassembly:
	0x03BB15F4 ADRP X8, 0xFFFFFFFFFE04F000
	0x03BB15F8 ADD X8, X8, 0x8BC
	0x03BB15FC B 0x3BB1610
	0x03BB1600 CMP W21, 0x6
	0x03BB1604 B.NE 0x3BB1618
	0x03BB1608 ADRP X8, 0xFFFFFFFFFE04F000
	0x03BB160C ADD X8, X8, 0x890
	0x03BB1610 STR X8, [X19 + 0x18]
	0x03BB1614 B 0x3BB162C
	0x03BB1618 CBZ X20, 0x3BB1644
	0x03BB161C LDR X8, [X19 + 0x10]
	0x03BB1620 LDR X9, [X19 + 0x20]
	0x03BB1624 STR X8, [X19 + 0x18]
	0x03BB1628 STR X9, [X19 + 0x40]
	0x03BB162C ADRP X8, 0xFFFFFFFFFE04F000
	0x03BB1630 ADD X8, X8, 0x7F4
	0x03BB1634 STR X8, [X19 + 0x38]
	0x03BB1638 LDP X20, X19, [X31 + 0x10]
	0x03BB163C LDP X30, X21, [X31], #0x20
	0x03BB1640 RET
	0x03BB1644 ADRP X1, 0xFFFFFFFFFCF6A000
	0x03BB1648 ADD X1, X1, 0xEE3
	0x03BB164C MOV X0, X31
	0x03BB1650 BL 0x1C16F3C
	0x03BB1654 MOV X1, X31
	0x03BB1658 BL 0x1C16DEC
	0x03BB165C LDR X8, [X0 + 0x40]
	0x03BB1660 LDR X9, [X0 + 0x18]
	0x03BB1664 LDR X10, [X0 + 0x28]
	0x03BB1668 MOV X0, X8
	0x03BB166C STR X10, [X31]

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x832000
	009 Move X23, 0x5AC000
	010 Move W8, [X22+3263]
	011 Move X23, [X23+3752]
	012 Move V8, V0
	013 Move X19, X2
	014 Move X20, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x5AC000
	021 Move X0, [X0+3752]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3263], W8
	025 Move X0, [X23]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X21
	031 Move X1, X20
	032 Move X2, X19
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X22, [X31+32]
	036 Move X21, [X31+40]
	037 Move X30, [X31+16]
	038 Move X23, [X31+24]
	039 Move V0, V8
	040 Move V8, [X31+64]
	041 Call FastCalculateRadiusOffset_00000C20$BurstDirectCall.Invoke, X0, X1, X2, V0
	042 Return V0

Method: System.Void FastComputeNewTrackedPose(in Unity.Mathematics.float3 interactorAttachPos, in Unity.Mathematics.quaternion interactorAttachRot, in Unity.Mathematics.float3 positionOffset, in Unity.Mathematics.quaternion interactableRot, in Unity.Mathematics.quaternion interactableAttachRot, out Unity.Mathematics.float3 targetPos, out Unity.Mathematics.quaternion targetRot)

Disassembly:
	0x03BB17CC LDRB W8, [X20 + 0xCCA]
	0x03BB17D0 LDR X23, [X23 + 0xEC0]
	0x03BB17D4 MOV X19, X0
	0x03BB17D8 TBNZ X8, 0x0, 0x3BB1814
	0x03BB17DC ADRP X0, 0x56A000
	0x03BB17E0 LDR X0, [X0 + 0x848]
	0x03BB17E4 BL 0x1C16CF4
	0x03BB17E8 ADRP X0, 0x5AB000
	0x03BB17EC LDR X0, [X0 + 0xEC0]
	0x03BB17F0 BL 0x1C16CF4
	0x03BB17F4 ADRP X0, 0x5AB000
	0x03BB17F8 LDR X0, [X0 + 0xEF0]
	0x03BB17FC BL 0x1C16CF4
	0x03BB1800 ADRP X0, 0x5AB000
	0x03BB1804 LDR X0, [X0 + 0xEF8]
	0x03BB1808 BL 0x1C16CF4
	0x03BB180C MOVZ W8, 0x1
	0x03BB1810 STRB W8, [X20 + 0xCCA]
	0x03BB1814 LDR X8, [X23]
	0x03BB1818 LDR W9, [X8 + 0xE0]
	0x03BB181C CBNZ W9, 0x3BB182C
	0x03BB1820 MOV X0, X8
	0x03BB1824 BL 0x1C16DFC
	0x03BB1828 LDR X8, [X23]
	0x03BB182C LDR X9, [X8 + 0xB8]
	0x03BB1830 LDR X10, [X9]
	0x03BB1834 CBNZ X10, 0x3BB18A4
	0x03BB1838 LDR W10, [X8 + 0xE0]
	0x03BB183C CBNZ W10, 0x3BB1850
	0x03BB1840 MOV X0, X8
	0x03BB1844 BL 0x1C16DFC
	0x03BB1848 LDR X8, [X23]
	0x03BB184C LDR X9, [X8 + 0xB8]
	0x03BB1850 ADRP X8, 0x56A000
	0x03BB1854 LDR X20, [X9 + 0x8]
	0x03BB1858 LDR X8, [X8 + 0x848]
	0x03BB185C LDR X0, [X8]
	0x03BB1860 ADRP X8, 0x5AB000
	0x03BB1864 LDR X8, [X8 + 0xEF8]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X26, 0x832000
	012 Move X27, 0x5AC000
	013 Move W8, [X26+3264]
	014 Move X27, [X27+3776]
	015 Move X19, X6
	016 Move X20, X5
	017 Move X21, X4
	018 Move X22, X3
	019 Move X23, X2
	020 Move X24, X1
	021 Move X25, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0x5AC000
	027 Move X0, [X0+3776]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X26+3264], W8
	031 Move X0, [X27]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X25
	037 Move X1, X24
	038 Move X2, X23
	039 Move X3, X22
	040 Move X4, X21
	041 Move X5, X20
	042 Move X6, X19
	043 Move X20, [X31+64]
	044 Move X19, [X31+72]
	045 Move X22, [X31+48]
	046 Move X21, [X31+56]
	047 Move X24, [X31+32]
	048 Move X23, [X31+40]
	049 Move X26, [X31+16]
	050 Move X25, [X31+24]
	051 Move X30, [X31+80]
	052 Move X27, [X31+88]
	053 Call FastComputeNewTrackedPose_00000C21$BurstDirectCall.Invoke, X0, X1, X2, X3, X4, X5, X6
	054 Return 

Method: System.Boolean IsWithinRadius(in Unity.Mathematics.float3 a, in Unity.Mathematics.float3 b, System.Single radius)

Disassembly:
	0x03BB1580 BL 0x36FA754
	0x03BB1584 LDR X8, [X20]
	0x03BB1588 MOV X19, X0
	0x03BB158C LDR W9, [X8 + 0xE0]
	0x03BB1590 CBNZ W9, 0x3BB15A0
	0x03BB1594 MOV X0, X8
	0x03BB1598 BL 0x1C16DFC
	0x03BB159C LDR X8, [X20]
	0x03BB15A0 LDR X8, [X8 + 0xB8]
	0x03BB15A4 STR X19, [X8 + 0x8]
	0x03BB15A8 LDP X20, X19, [X31 + 0x10]
	0x03BB15AC LDP X30, X21, [X31], #0x20
	0x03BB15B0 RET
	0x03BB15B4 RET
	0x03BB15B8 B 0x3BB150C
	0x03BB15BC STP X30, X21, [X31 - 0x20]!
	0x03BB15C0 STP X20, X19, [X31 + 0x10]
	0x03BB15C4 LDR X8, [X2 + 0x8]
	0x03BB15C8 STP X1, X2, [X0 + 0x20]
	0x03BB15CC MOV X19, X0
	0x03BB15D0 MOV X20, X1
	0x03BB15D4 STR X8, [X0 + 0x10]
	0x03BB15D8 LDRB W21, [X2 + 0x52]
	0x03BB15DC STR X0, [X0 + 0x40]
	0x03BB15E0 MOV X0, X2
	0x03BB15E4 BL 0x1C16D84
	0x03BB15E8 TBZ X0, 0x0, 0x3BB1600
	0x03BB15EC CMP W21, 0x7
	0x03BB15F0 B.NE 0x3BB161C

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x832000
	008 Move X22, 0x5AC000
	009 Move W8, [X21+3265]
	010 Move X22, [X22+3744]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x5AC000
	019 Move X0, [X0+3744]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3265], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+8]
	035 Move V0, V8
	036 Move V8, [X31+48]
	037 Call IsWithinRadius_00000C22$BurstDirectCall.Invoke, X0, X1, V0
	038 Return X0

Method: System.Void CalculateScaleToFit(in Unity.Mathematics.float3 boundsSize, in Unity.Mathematics.float3 fixedSize, in Unity.Mathematics.float3 initialScale, System.Single epsilon, out Unity.Mathematics.float3 newScale)

Disassembly:
	0x03BB1740 MOV X1, X24
	0x03BB1744 MOV X0, X8
	0x03BB1748 BL 0x1C16E04
	0x03BB174C LDR X8, [X19]
	0x03BB1750 STR X0, [X31 + 0x30]
	0x03BB1754 MOV X1, X23
	0x03BB1758 MOV X0, X8
	0x03BB175C BL 0x1C16E04
	0x03BB1760 LDR X8, [X29]
	0x03BB1764 LDR X1, [X31]
	0x03BB1768 STR X0, [X31 + 0x38]
	0x03BB176C MOV X0, X8
	0x03BB1770 BL 0x1C16E04
	0x03BB1774 STR X0, [X31 + 0x40]
	0x03BB1778 LDR X0, [X31 + 0x8]
	0x03BB177C ADD X1, X31, 0x10
	0x03BB1780 MOV X2, X22
	0x03BB1784 MOV X3, X21
	0x03BB1788 BL 0x1C16CB0
	0x03BB178C LDP X20, X19, [X31 + 0xA0]
	0x03BB1790 LDP X22, X21, [X31 + 0x90]
	0x03BB1794 LDP X24, X23, [X31 + 0x80]
	0x03BB1798 LDP X26, X25, [X31 + 0x70]
	0x03BB179C LDP X28, X27, [X31 + 0x60]
	0x03BB17A0 LDP X29, X30, [X31 + 0x50]
	0x03BB17A4 ADD X31, X31, 0xB0
	0x03BB17A8 RET
	0x03BB17AC MOV X0, X1
	0x03BB17B0 MOV X1, X31
	0x03BB17B4 B 0x1C16CB4
	0x03BB17B8 STP X30, X23, [X31 - 0x30]!
	0x03BB17BC STP X22, X21, [X31 + 0x10]
	0x03BB17C0 STP X20, X19, [X31 + 0x20]
	0x03BB17C4 ADRP X20, 0x831000
	0x03BB17C8 ADRP X23, 0x5AB000

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X23, 0x832000
	010 Move X24, 0x5AC000
	011 Move W8, [X23+3266]
	012 Move X24, [X24+3768]
	013 Move X19, X3
	014 Move V8, V0
	015 Move X20, X2
	016 Move X21, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x5AC000
	023 Move X0, [X0+3768]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3266], W8
	027 Move X0, [X24]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X22
	033 Move X1, X21
	034 Move X2, X20
	035 Move X3, X19
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move X22, [X31+32]
	039 Move X21, [X31+40]
	040 Move X24, [X31+16]
	041 Move X23, [X31+24]
	042 Move X30, [X31+8]
	043 Move V0, V8
	044 Move V8, [X31+64]
	045 Call CalculateScaleToFit_00000C23$BurstDirectCall.Invoke, X0, X1, X2, V0, X3
	046 Return 

Method: System.Void .ctor()

Disassembly:
	0x03BB1D5C LDR X0, [X20]
	0x03BB1D60 ADRP X20, 0x5AB000
	0x03BB1D64 LDR X19, [X19]
	0x03BB1D68 LDR W8, [X0 + 0xE0]
	0x03BB1D6C LDR X20, [X20 + 0xEA0]
	0x03BB1D70 CBNZ W8, 0x3BB1D78
	0x03BB1D74 BL 0x1C16DFC
	0x03BB1D78 MOV X0, X19
	0x03BB1D7C MOV X1, X31
	0x03BB1D80 BL 0x36FA754
	0x03BB1D84 LDR X8, [X20]
	0x03BB1D88 MOV X19, X0
	0x03BB1D8C LDR W9, [X8 + 0xE0]
	0x03BB1D90 CBNZ W9, 0x3BB1DA0
	0x03BB1D94 MOV X0, X8
	0x03BB1D98 BL 0x1C16DFC
	0x03BB1D9C LDR X8, [X20]
	0x03BB1DA0 LDR X8, [X8 + 0xB8]
	0x03BB1DA4 STR X19, [X8 + 0x8]
	0x03BB1DA8 LDP X20, X19, [X31 + 0x10]
	0x03BB1DAC LDP X30, X21, [X31], #0x20
	0x03BB1DB0 RET
	0x03BB1DB4 RET
	0x03BB1DB8 B 0x3BB1D0C
	0x03BB1DBC STP X30, X21, [X31 - 0x20]!
	0x03BB1DC0 STP X20, X19, [X31 + 0x10]
	0x03BB1DC4 LDR X8, [X2 + 0x8]
	0x03BB1DC8 STP X1, X2, [X0 + 0x20]
	0x03BB1DCC MOV X19, X0
	0x03BB1DD0 MOV X20, X1
	0x03BB1DD4 STR X8, [X0 + 0x10]
	0x03BB1DD8 LDRB W21, [X2 + 0x52]
	0x03BB1DDC STR X0, [X0 + 0x40]
	0x03BB1DE0 MOV X0, X2
	0x03BB1DE4 BL 0x1C16D84
	0x03BB1DE8 TBZ X0, 0x0, 0x3BB1E00
	0x03BB1DEC CMP W21, 0x5
	0x03BB1DF0 B.NE 0x3BB1E1C
	0x03BB1DF4 ADRP X8, 0xFFFFFFFFFE04F000
	0x03BB1DF8 ADD X8, X8, 0xA68
	0x03BB1DFC B 0x3BB1E10
	0x03BB1E00 CMP W21, 0x4
	0x03BB1E04 B.NE 0x3BB1E18

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x832000
	007 Move X22, 0x5AC000
	008 Move X21, 0x5AC000
	009 Move W8, [X20+3267]
	010 Move X22, [X22+3784]
	011 Move X21, [X21+3792]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x5AC000
	018 Move X0, [X0+3792]
	019 Call 0x1C17CF4
	020 Move X0, 0x5AC000
	021 Move X0, [X0+3784]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3267], W8
	025 Move W8, 1
	026 Move V0, 0
	027 Move V1, 0
	028 Move [X19+16], W8
	029 Move [X19+28], V0
	030 Move [X19+44], D1
	031 Move X0, [X22]
	032 Call 0x1C17F10
	033 Move X1, [X21]
	034 Move X20, X0
	035 Call Dictionary`2<Object, float3>..ctor, X0
	036 Move [X19+64], X20
	037 Move X0, [X22]
	038 Call 0x1C17F10
	039 Move X1, [X21]
	040 Move X20, X0
	041 Call Dictionary`2<Object, float3>..ctor, X0
	042 Move [X19+72], X20
	043 Move X0, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X1, X31
	049 Move X30, [X31+48]
	050 Call Object..ctor, X0
	051 Return 

Method: System.Single FastCalculateRadiusOffset$BurstManaged(in Unity.Mathematics.float3 initialScale, in Unity.Mathematics.float3 targetScale, in Unity.Mathematics.float3 initialBoundsSize, System.Single innerRadius)

Disassembly:
	0x03BB1E08 ADRP X8, 0xFFFFFFFFFE04F000
	0x03BB1E0C ADD X8, X8, 0xA4C
	0x03BB1E10 STR X8, [X19 + 0x18]
	0x03BB1E14 B 0x3BB1E2C
	0x03BB1E18 CBZ X20, 0x3BB1E44
	0x03BB1E1C LDR X8, [X19 + 0x10]
	0x03BB1E20 LDR X9, [X19 + 0x20]
	0x03BB1E24 STR X8, [X19 + 0x18]
	0x03BB1E28 STR X9, [X19 + 0x40]
	0x03BB1E2C ADRP X8, 0xFFFFFFFFFE04F000
	0x03BB1E30 ADD X8, X8, 0x9CC
	0x03BB1E34 STR X8, [X19 + 0x38]
	0x03BB1E38 LDP X20, X19, [X31 + 0x10]
	0x03BB1E3C LDP X30, X21, [X31], #0x20
	0x03BB1E40 RET
	0x03BB1E44 ADRP X1, 0xFFFFFFFFFCF6A000
	0x03BB1E48 ADD X1, X1, 0xEE3
	0x03BB1E4C MOV X0, X31
	0x03BB1E50 BL 0x1C16F3C
	0x03BB1E54 MOV X1, X31
	0x03BB1E58 BL 0x1C16DEC
	0x03BB1E5C LDR X8, [X0 + 0x40]
	0x03BB1E60 LDR X6, [X0 + 0x18]
	0x03BB1E64 LDR X5, [X0 + 0x28]
	0x03BB1E68 MOV X0, X8
	0x03BB1E6C BR X6
	0x03BB1E70 SUB X31, X31, 0x90
	0x03BB1E74 STR X30, [X31 + 0x30]
	0x03BB1E78 STP X28, X27, [X31 + 0x40]
	0x03BB1E7C STP X26, X25, [X31 + 0x50]
	0x03BB1E80 STP X24, X23, [X31 + 0x60]
	0x03BB1E84 STP X22, X21, [X31 + 0x70]
	0x03BB1E88 STP X20, X19, [X31 + 0x80]
	0x03BB1E8C ADRP X28, 0x831000
	0x03BB1E90 STR S0, [X31 + 0x3C]
	0x03BB1E94 ADRP X26, 0x56D000
	0x03BB1E98 ADRP X27, 0x542000
	0x03BB1E9C LDRB W8, [X28 + 0xCD3]
	0x03BB1EA0 LDR X26, [X26 + 0x838]
	0x03BB1EA4 LDR X27, [X27 + 0xA90]
	0x03BB1EA8 MOV X19, X6
	0x03BB1EAC MOV X20, X5
	0x03BB1EB0 MOV X22, X4
	0x03BB1EB4 MOV X23, X3
	0x03BB1EB8 MOV X24, X2
	0x03BB1EBC MOV X25, X1
	0x03BB1EC0 MOV X21, X0
	0x03BB1EC4 TBNZ X8, 0x0, 0x3BB1EE8
	0x03BB1EC8 ADRP X0, 0x542000
	0x03BB1ECC LDR X0, [X0 + 0xA90]
	0x03BB1ED0 BL 0x1C16CF4
	0x03BB1ED4 ADRP X0, 0x56D000
	0x03BB1ED8 LDR X0, [X0 + 0x838]
	0x03BB1EDC BL 0x1C16CF4
	0x03BB1EE0 MOVZ W8, 0x1
	0x03BB1EE4 STRB W8, [X28 + 0xCD3]
	0x03BB1EE8 LDR X0, [X26]
	0x03BB1EEC MOV X1, X25
	0x03BB1EF0 STP X31, X31, [X31 + 0x18]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move [X31+8], W31
	008 Move [X31], X31
	009 Move V8, V0
	010 Move S1, [X2]
	011 Move S0, [X2+4]
	012 Move V2, [X2+8]
	013 Move W20, 0x7F800000
	014 Move X8, X0
	015 Move W9, S0
	016 And W9, W9, 0x7FFFFFFF
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction FCCMP not yet implemented."
	019 NotImplemented "Instruction FCSEL not yet implemented."
	020 Move W9, S2
	021 And W9, W9, 0x7FFFFFFF
	022 NotImplemented "Instruction FCMP not yet implemented."
	023 NotImplemented "Instruction CCMP not yet implemented."
	024 Move X9, -51142656
	025 NotImplemented "Instruction FCSEL not yet implemented."
	026 Move V0, [X9+576]
	027 Move X19, X2
	028 Add X2, X31, 0
	029 Move X0, X1
	030 Move X1, X8
	031 Move X3, X31
	032 Call BurstMathUtility.FastSafeDivide, X0, X1, X2, V0
	033 Move V0, [X31]
	034 Move V1, [X19]
	035 Move V2, [X31+8]
	036 Move V3, [X19+8]
	037 Move X30, [X31+32]
	038 NotImplemented "Instruction INVALID not yet implemented."
	039 Move S1, V0.S[1]
	040 Move W8, S1
	041 And W8, W8, 0x7FFFFFFF
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Multiply S2, S2, S3
	044 NotImplemented "Instruction FCCMP not yet implemented."
	045 Move W8, S2
	046 NotImplemented "Instruction FCSEL not yet implemented."
	047 And W8, W8, 0x7FFFFFFF
	048 NotImplemented "Instruction FCMP not yet implemented."
	049 NotImplemented "Instruction CCMP not yet implemented."
	050 NotImplemented "Instruction FCSEL not yet implemented."
	051 Move W8, S0
	052 And W8, W8, 0x7FFFFFFF
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction FCCMP not yet implemented."
	055 NotImplemented "Instruction FCSEL not yet implemented."
	056 Move S1, 0.5
	057 Multiply S0, S0, S1
	058 Add S0, S0, S8
	059 Move X20, [X31+48]
	060 Move X19, [X31+56]
	061 Move D9, [X31+16]
	062 Move D8, [X31+24]
	063 Add X31, X31, 64
	064 Return V0

Method: System.Void FastComputeNewTrackedPose$BurstManaged(in Unity.Mathematics.float3 interactorAttachPos, in Unity.Mathematics.quaternion interactorAttachRot, in Unity.Mathematics.float3 positionOffset, in Unity.Mathematics.quaternion interactableRot, in Unity.Mathematics.quaternion interactableAttachRot, out Unity.Mathematics.float3 targetPos, out Unity.Mathematics.quaternion targetRot)

Disassembly:
	0x03BB1EF4 STR X31, [X31 + 0x28]
	0x03BB1EF8 BL 0x1C16E04
	0x03BB1EFC LDR X8, [X26]
	0x03BB1F00 STR X0, [X31]
	0x03BB1F04 MOV X1, X24
	0x03BB1F08 MOV X0, X8
	0x03BB1F0C BL 0x1C16E04
	0x03BB1F10 LDR X8, [X26]
	0x03BB1F14 STR X0, [X31 + 0x8]
	0x03BB1F18 MOV X1, X23
	0x03BB1F1C MOV X0, X8
	0x03BB1F20 BL 0x1C16E04
	0x03BB1F24 LDR X8, [X27]
	0x03BB1F28 STR X0, [X31 + 0x10]
	0x03BB1F2C ADD X1, X31, 0x3C
	0x03BB1F30 MOV X0, X8
	0x03BB1F34 BL 0x1C16E04
	0x03BB1F38 LDR X8, [X26]
	0x03BB1F3C STR X0, [X31 + 0x18]
	0x03BB1F40 MOV X1, X22
	0x03BB1F44 MOV X0, X8
	0x03BB1F48 BL 0x1C16E04
	0x03BB1F4C STR X0, [X31 + 0x20]
	0x03BB1F50 ADD X1, X31, 0x0
	0x03BB1F54 MOV X0, X21
	0x03BB1F58 MOV X2, X20
	0x03BB1F5C MOV X3, X19
	0x03BB1F60 BL 0x1C16CB0
	0x03BB1F64 LDP X20, X19, [X31 + 0x80]
	0x03BB1F68 LDP X22, X21, [X31 + 0x70]
	0x03BB1F6C LDP X24, X23, [X31 + 0x60]
	0x03BB1F70 LDP X26, X25, [X31 + 0x50]
	0x03BB1F74 LDP X28, X27, [X31 + 0x40]
	0x03BB1F78 LDR X30, [X31 + 0x30]
	0x03BB1F7C ADD X31, X31, 0x90
	0x03BB1F80 RET
	0x03BB1F84 MOV X0, X1
	0x03BB1F88 MOV X1, X31
	0x03BB1F8C B 0x1C16CB4
	0x03BB1F90 STP X30, X23, [X31 - 0x30]!
	0x03BB1F94 STP X22, X21, [X31 + 0x10]
	0x03BB1F98 STP X20, X19, [X31 + 0x20]
	0x03BB1F9C ADRP X20, 0x831000
	0x03BB1FA0 ADRP X23, 0x5AB000
	0x03BB1FA4 LDRB W8, [X20 + 0xCD4]
	0x03BB1FA8 LDR X23, [X23 + 0xEB8]
	0x03BB1FAC MOV X19, X0
	0x03BB1FB0 TBNZ X8, 0x0, 0x3BB1FEC
	0x03BB1FB4 ADRP X0, 0x56A000
	0x03BB1FB8 LDR X0, [X0 + 0x848]
	0x03BB1FBC BL 0x1C16CF4
	0x03BB1FC0 ADRP X0, 0x5AB000
	0x03BB1FC4 LDR X0, [X0 + 0xEB8]
	0x03BB1FC8 BL 0x1C16CF4
	0x03BB1FCC ADRP X0, 0x5AB000
	0x03BB1FD0 LDR X0, [X0 + 0xF20]
	0x03BB1FD4 BL 0x1C16CF4
	0x03BB1FD8 ADRP X0, 0x5AB000
	0x03BB1FDC LDR X0, [X0 + 0xF28]
	0x03BB1FE0 BL 0x1C16CF4
	0x03BB1FE4 MOVZ W8, 0x1
	0x03BB1FE8 STRB W8, [X20 + 0xCD4]
	0x03BB1FEC LDR X8, [X23]
	0x03BB1FF0 LDR W9, [X8 + 0xE0]
	0x03BB1FF4 CBNZ W9, 0x3BB2004
	0x03BB1FF8 MOV X0, X8
	0x03BB1FFC BL 0x1C16DFC
	0x03BB2000 LDR X8, [X23]
	0x03BB2004 LDR X9, [X8 + 0xB8]
	0x03BB2008 LDR X10, [X9]
	0x03BB200C CBNZ X10, 0x3BB207C
	0x03BB2010 LDR W10, [X8 + 0xE0]
	0x03BB2014 CBNZ W10, 0x3BB2028
	0x03BB2018 MOV X0, X8
	0x03BB201C BL 0x1C16DFC
	0x03BB2020 LDR X8, [X23]
	0x03BB2024 LDR X9, [X8 + 0xB8]
	0x03BB2028 ADRP X8, 0x569000
	0x03BB202C LDR X20, [X9 + 0x8]
	0x03BB2030 LDR X8, [X8 + 0x848]
	0x03BB2034 LDR X0, [X8]
	0x03BB2038 ADRP X8, 0x5AA000
	0x03BB203C LDR X8, [X8 + 0xF28]
	0x03BB2040 LDR X21, [X8]
	0x03BB2044 ADRP X8, 0x5AA000
	0x03BB2048 LDR X8, [X8 + 0xF20]
	0x03BB204C LDR W9, [X0 + 0xE0]
	0x03BB2050 LDR X22, [X8]
	0x03BB2054 CBNZ W9, 0x3BB205C
	0x03BB2058 BL 0x1C16DFC
	0x03BB205C MOV X0, X20
	0x03BB2060 MOV X1, X21
	0x03BB2064 MOV X2, X22
	0x03BB2068 MOV X3, X31
	0x03BB206C BL 0x36FAD70
	0x03BB2070 LDR X8, [X23]
	0x03BB2074 LDR X9, [X8 + 0xB8]
	0x03BB2078 STR X0, [X9]
	0x03BB207C LDR W9, [X8 + 0xE0]
	0x03BB2080 CBNZ W9, 0x3BB2090
	0x03BB2084 MOV X0, X8
	0x03BB2088 BL 0x1C16DFC
	0x03BB208C LDR X8, [X23]
	0x03BB2090 LDR X8, [X8 + 0xB8]
	0x03BB2094 LDP X22, X21, [X31 + 0x10]
	0x03BB2098 LDR X8, [X8]
	0x03BB209C STR X8, [X19]
	0x03BB20A0 LDP X20, X19, [X31 + 0x20]
	0x03BB20A4 LDP X30, X23, [X31], #0x30
	0x03BB20A8 RET
	0x03BB20AC STR X30, [X31 - 0x20]!
	0x03BB20B0 STP X20, X19, [X31 + 0x10]
	0x03BB20B4 ADRP X20, 0x830000
	0x03BB20B8 ADRP X19, 0x5AA000
	0x03BB20BC LDRB W8, [X20 + 0xCD5]
	0x03BB20C0 LDR X19, [X19 + 0xEB8]
	0x03BB20C4 TBNZ X8, 0x0, 0x3BB20DC
	0x03BB20C8 ADRP X0, 0x5AA000
	0x03BB20CC LDR X0, [X0 + 0xEB8]
	0x03BB20D0 BL 0x1C16CF4
	0x03BB20D4 MOVZ W8, 0x1
	0x03BB20D8 STRB W8, [X20 + 0xCD5]
	0x03BB20DC LDR X0, [X19]
	0x03BB20E0 STR X31, [X31 + 0x8]
	0x03BB20E4 LDR W8, [X0 + 0xE0]
	0x03BB20E8 CBNZ W8, 0x3BB20F0
	0x03BB20EC BL 0x1C16DFC
	0x03BB20F0 ADD X0, X31, 0x8
	0x03BB20F4 BL 0x3BB1F90
	0x03BB20F8 LDR X0, [X31 + 0x8]
	0x03BB20FC LDP X20, X19, [X31 + 0x10]
	0x03BB2100 LDR X30, [X31], #0x20
	0x03BB2104 RET
	0x03BB2108 STP X30, X21, [X31 - 0x20]!
	0x03BB210C STP X20, X19, [X31 + 0x10]
	0x03BB2110 ADRP X21, 0x830000
	0x03BB2114 ADRP X19, 0x5AA000

ISIL:
	001 Move [X31-16], D9
	002 Move [X31-8], D8
	003 Move S6, [X3]
	004 Move S7, [X3+4]
	005 Move S16, [X3+8]
	006 Move S1, [X3+12]
	007 Move V17, [X1]
	008 NotImplemented "Instruction LDUR not yet implemented."
	009 Move V20, [X2]
	010 Move V21, [X2+8]
	011 Multiply S22, S6, S6
	012 Multiply S23, S7, S7
	013 Move V19, [X1+12]
	014 Multiply S24, S16, S16
	015 Add S22, S22, S23
	016 Move S2, [X4]
	017 Move S3, [X4+4]
	018 Move S4, [X4+8]
	019 Move S5, [X4+12]
	020 Multiply S25, S1, S1
	021 Multiply S26, S17, D4.S[1]
	022 NotImplemented "Instruction INVALID not yet implemented."
	023 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	024 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	025 Add S22, S24, S22
	026 Move S0, 1
	027 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	028 Move V29.S[1], V17.S[0]
	029 Move V30.S[1], V21.S[0]
	030 Subtract S26, S26, S28
	031 Add S22, S25, S22
	032 NotImplemented "Instruction FNEG not yet implemented."
	033 NotImplemented "Instruction FNEG not yet implemented."
	034 NotImplemented "Instruction FNEG not yet implemented."
	035 NotImplemented "Instruction INVALID not yet implemented."
	036 NotImplemented "Instruction INVALID not yet implemented."
	037 Add S26, S26, S26
	038 NotImplemented "Instruction FDIV not yet implemented."
	039 Subtract V23, V23, V24
	040 Multiply S24, S19, S26
	041 Multiply S1, S1, S22
	042 Multiply S6, S22, S6
	043 Multiply S7, S22, S7
	044 Multiply S16, S22, S16
	045 Add S21, S21, S24
	046 Multiply S22, S2, S1
	047 Multiply S24, S3, S1
	048 Multiply S25, S4, S1
	049 Multiply S1, S1, S5
	050 Multiply S27, S6, S5
	051 Multiply S28, S7, S5
	052 Multiply S5, S16, S5
	053 Multiply S30, S2, S6
	054 Multiply S31, S4, S7
	055 Multiply S8, S2, S16
	056 Multiply S9, S3, S6
	057 Multiply S2, S2, S7
	058 Multiply S7, S3, S7
	059 Multiply S3, S3, S16
	060 Multiply S6, S4, S6
	061 Multiply S4, S4, S16
	062 Add V16, V23, V23
	063 NotImplemented "Instruction INVALID not yet implemented."
	064 Add V19, V20, V19
	065 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	066 Multiply S17, S17, D0.S[1]
	067 NotImplemented "Instruction INVALID not yet implemented."
	068 NotImplemented "Instruction INVALID not yet implemented."
	069 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	070 Subtract S17, S17, S18
	071 Move V16.S[1], V26.S[0]
	072 Move V26, [X0]
	073 Add S17, S21, S17
	074 Move V21, [X0+8]
	075 Add S18, S27, S31
	076 Add S23, S28, S8
	077 Add S7, S30, S7
	078 NotImplemented "Instruction INVALID not yet implemented."
	079 Add S5, S5, S9
	080 Add S18, S22, S18
	081 Add S22, S24, S23
	082 Subtract S1, S1, S7
	083 Subtract V7, V20, V16
	084 Add S5, S25, S5
	085 Subtract S3, S18, S3
	086 Subtract S6, S22, S6
	087 Subtract S1, S1, S4
	088 Add V4, V19, V7
	089 Add S16, S21, S17
	090 Subtract S2, S5, S2
	091 Multiply S5, S3, S3
	092 Multiply S7, S6, S6
	093 Add V4, V26, V4
	094 Move [X5+8], S16
	095 Multiply S16, S2, S2
	096 Add S5, S5, S7
	097 Move [X5], D4
	098 Multiply S17, S1, S1
	099 Add S4, S16, S5
	100 Move S5, [X1]
	101 Move S7, [X1+4]
	102 Move S16, [X1+8]
	103 Move S18, [X1+12]
	104 Add S4, S17, S4
	105 NotImplemented "Instruction FNEG not yet implemented."
	106 NotImplemented "Instruction FNEG not yet implemented."
	107 NotImplemented "Instruction FNEG not yet implemented."
	108 NotImplemented "Instruction FDIV not yet implemented."
	109 Multiply S1, S1, S0
	110 Multiply S3, S0, S3
	111 Multiply S4, S0, S6
	112 Multiply S0, S0, S2
	113 Multiply S2, S3, S18
	114 Multiply S6, S4, S18
	115 Multiply S17, S0, S18
	116 Multiply S18, S1, S18
	117 Multiply S19, S1, S5
	118 Multiply S20, S1, S7
	119 Multiply S1, S1, S16
	120 Multiply S21, S3, S5
	121 Multiply S22, S0, S7
	122 Multiply S23, S3, S16
	123 Multiply S24, S4, S5
	124 Multiply S25, S4, S7
	125 Multiply S4, S4, S16
	126 Multiply S5, S0, S5
	127 Multiply S3, S3, S7
	128 Multiply S0, S0, S16
	129 Add S7, S19, S22
	130 Add S16, S20, S23
	131 Add S1, S24, S1
	132 Add S19, S21, S25
	133 Add S2, S7, S2
	134 Add S6, S6, S16
	135 Add S1, S17, S1
	136 Subtract S7, S18, S19
	137 Subtract S2, S2, S4
	138 Subtract S4, S6, S5
	139 Subtract S1, S1, S3
	140 Subtract S0, S7, S0
	141 Move [X6], S2
	142 Move [X6+8], S4
	143 Move [X6+8], S1
	144 Move [X6+16], S0
	145 Move D9, [X31+16]
	146 Move D8, [X31+24]
	147 Return 

Method: System.Boolean IsWithinRadius$BurstManaged(in Unity.Mathematics.float3 a, in Unity.Mathematics.float3 b, System.Single radius)

Disassembly:
	0x03BB2118 ADRP X20, 0x569000
	0x03BB211C LDRB W8, [X21 + 0xCD6]
	0x03BB2120 LDR X19, [X19 + 0xF30]
	0x03BB2124 LDR X20, [X20 + 0x848]
	0x03BB2128 TBNZ X8, 0x0, 0x3BB2158
	0x03BB212C ADRP X0, 0x569000
	0x03BB2130 LDR X0, [X0 + 0x848]
	0x03BB2134 BL 0x1C16CF4
	0x03BB2138 ADRP X0, 0x5AA000
	0x03BB213C LDR X0, [X0 + 0xEB8]
	0x03BB2140 BL 0x1C16CF4
	0x03BB2144 ADRP X0, 0x5AA000
	0x03BB2148 LDR X0, [X0 + 0xF30]
	0x03BB214C BL 0x1C16CF4
	0x03BB2150 MOVZ W8, 0x1

ISIL:
	001 Move V1, [X0]
	002 NotImplemented "Instruction LDUR not yet implemented."
	003 Move V3, [X1]
	004 NotImplemented "Instruction LDUR not yet implemented."
	005 Multiply S0, S0, S0
	006 Subtract S1, S1, S3
	007 Subtract V2, V2, V4
	008 Multiply S1, S1, S1
	009 NotImplemented "Instruction INVALID not yet implemented."
	010 Add S1, S1, S2
	011 Move S2, V2.S[1]
	012 Add S1, S2, S1
	013 NotImplemented "Instruction FCMP not yet implemented."
	014 NotImplemented "Instruction CSET not yet implemented."
	015 Return X0

Method: System.Void CalculateScaleToFit$BurstManaged(in Unity.Mathematics.float3 boundsSize, in Unity.Mathematics.float3 fixedSize, in Unity.Mathematics.float3 initialScale, System.Single epsilon, out Unity.Mathematics.float3 newScale)

Disassembly:
	0x03BB2154 STRB W8, [X21 + 0xCD6]
	0x03BB2158 LDR X0, [X20]
	0x03BB215C ADRP X20, 0x5AA000
	0x03BB2160 LDR X19, [X19]
	0x03BB2164 LDR W8, [X0 + 0xE0]
	0x03BB2168 LDR X20, [X20 + 0xEB8]
	0x03BB216C CBNZ W8, 0x3BB2174
	0x03BB2170 BL 0x1C16DFC
	0x03BB2174 MOV X0, X19
	0x03BB2178 MOV X1, X31
	0x03BB217C BL 0x36FA754
	0x03BB2180 LDR X8, [X20]
	0x03BB2184 MOV X19, X0
	0x03BB2188 LDR W9, [X8 + 0xE0]
	0x03BB218C CBNZ W9, 0x3BB219C
	0x03BB2190 MOV X0, X8
	0x03BB2194 BL 0x1C16DFC
	0x03BB2198 LDR X8, [X20]
	0x03BB219C LDR X8, [X8 + 0xB8]
	0x03BB21A0 STR X19, [X8 + 0x8]
	0x03BB21A4 LDP X20, X19, [X31 + 0x10]
	0x03BB21A8 LDP X30, X21, [X31], #0x20
	0x03BB21AC RET
	0x03BB21B0 RET
	0x03BB21B4 B 0x3BB2108
	0x03BB21B8 MOV X1, X31
	0x03BB21BC B 0x3C303D4
	0x03BB21C0 LDR X0, [X0 + 0x10]
	0x03BB21C4 RET

ISIL:
	001 Move V1, [X1+8]
	002 Move V3, [X1]
	003 Move V2, [X0]
	004 Move V4, [X0+8]
	005 Add S1, S1, S0
	006 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	007 Add V0, V3, V0
	008 NotImplemented "Instruction INVALID not yet implemented."
	009 Move S2, V0.S[1]
	010 Move W10, S2
	011 Move W8, 0x7F800000
	012 And W10, W10, 0x7FFFFFFF
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction FDIV not yet implemented."
	015 NotImplemented "Instruction FCCMP not yet implemented."
	016 Move W9, S1
	017 NotImplemented "Instruction FCSEL not yet implemented."
	018 Move V3, [X2]
	019 Move V4, [X2+8]
	020 And W9, W9, 0x7FFFFFFF
	021 NotImplemented "Instruction FCMP not yet implemented."
	022 NotImplemented "Instruction CCMP not yet implemented."
	023 NotImplemented "Instruction FCSEL not yet implemented."
	024 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	025 NotImplemented "Instruction FDIV not yet implemented."
	026 NotImplemented "Instruction INVALID not yet implemented."
	027 Move [X3], D1
	028 Move [X3+8], S0
	029 Return 

