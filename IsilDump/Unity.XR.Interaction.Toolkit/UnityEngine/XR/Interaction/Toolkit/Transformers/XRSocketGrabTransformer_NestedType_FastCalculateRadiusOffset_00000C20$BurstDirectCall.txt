Type: UnityEngine.XR.Interaction.Toolkit.Transformers.XRSocketGrabTransformer/FastCalculateRadiusOffset_00000C20$BurstDirectCall

Method: System.Void GetFunctionPointerDiscard(ref System.IntPtr param_0)

Disassembly:
	0x03BB2394 STR S0, [X0 + 0x1C]
	0x03BB2398 RET
	0x03BB239C LDP S0, S1, [X0 + 0x20]
	0x03BB23A0 LDR V2, [X0 + 0x28]
	0x03BB23A4 RET
	0x03BB23A8 STP S0, S1, [X0 + 0x20]
	0x03BB23AC STR S2, [X0 + 0x28]
	0x03BB23B0 RET
	0x03BB23B4 LDR X0, [X0 + 0x30]
	0x03BB23B8 RET
	0x03BB23BC STR X1, [X0 + 0x30]
	0x03BB23C0 RET
	0x03BB23C4 SUB X31, X31, 0x30
	0x03BB23C8 STP X30, X21, [X31 + 0x10]
	0x03BB23CC STP X20, X19, [X31 + 0x20]
	0x03BB23D0 ADRP X21, 0x830000
	0x03BB23D4 LDRB W8, [X21 + 0xCD8]
	0x03BB23D8 MOV X19, X1
	0x03BB23DC MOV X20, X0
	0x03BB23E0 TBNZ X8, 0x0, 0x3BB23F8
	0x03BB23E4 ADRP X0, 0x541000
	0x03BB23E8 LDR X0, [X0 + 0x598]
	0x03BB23EC BL 0x1C16CF4
	0x03BB23F0 MOVZ W8, 0x1
	0x03BB23F4 STRB W8, [X21 + 0xCD8]
	0x03BB23F8 LDRB W8, [X20]
	0x03BB23FC LDRB W9, [X19]
	0x03BB2400 CMP W8, 0x0
	0x03BB2404 CSET W8, EQ
	0x03BB2408 CMP W9, 0x0
	0x03BB240C CSET W9, NE
	0x03BB2410 CMP W8, W9
	0x03BB2414 B.EQ 0x3BB2504
	0x03BB2418 LDR V0, [X20 + 0x4]
	0x03BB241C LDR V1, [X19 + 0x4]
	0x03BB2420 MOV W0, W31
	0x03BB2424 FCMP S0, S1
	0x03BB2428 B.NE 0x3BB2508
	0x03BB242C LDR V0, [X20 + 0x8]
	0x03BB2430 LDR V1, [X19 + 0x8]
	0x03BB2434 FCMP S0, S1
	0x03BB2438 B.NE 0x3BB2508
	0x03BB243C LDR V0, [X20 + 0xC]
	0x03BB2440 LDR V1, [X19 + 0xC]
	0x03BB2444 FCMP S0, S1
	0x03BB2448 B.NE 0x3BB2508
	0x03BB244C LDR V0, [X20 + 0x10]
	0x03BB2450 LDR V1, [X19 + 0x10]
	0x03BB2454 MOV W0, W31
	0x03BB2458 FCMP S0, S1
	0x03BB245C B.NE 0x3BB2508
	0x03BB2460 LDR V0, [X20 + 0x14]
	0x03BB2464 LDR V1, [X19 + 0x14]
	0x03BB2468 FCMP S0, S1
	0x03BB246C B.NE 0x3BB2508
	0x03BB2470 LDR V0, [X20 + 0x18]
	0x03BB2474 LDR V1, [X19 + 0x18]
	0x03BB2478 FCMP S0, S1
	0x03BB247C B.NE 0x3BB2508
	0x03BB2480 LDR V0, [X20 + 0x1C]
	0x03BB2484 ADD X0, X31, 0xC
	0x03BB2488 MOV X1, X31
	0x03BB248C STR S0, [X31 + 0xC]
	0x03BB2490 LDR V0, [X19 + 0x1C]
	0x03BB2494 BL 0x338FDC0
	0x03BB2498 TBZ X0, 0x0, 0x3BB2504
	0x03BB249C LDR V0, [X20 + 0x20]
	0x03BB24A0 LDR V1, [X19 + 0x20]
	0x03BB24A4 MOV W0, W31
	0x03BB24A8 FCMP S0, S1
	0x03BB24AC B.NE 0x3BB2508

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x831000
	008 Move X23, 0x5AB000
	009 Move W8, [X20+3269]
	010 Move X23, [X23+3752]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x56A000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0x5AB000
	020 Move X0, [X0+3752]
	021 Call 0x1C17CF4
	022 Move X0, 0x5AB000
	023 Move X0, [X0+3800]
	024 Call 0x1C17CF4
	025 Move X0, 0x5AB000
	026 Move X0, [X0+3808]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+3269], W8
	030 Move X8, [X23]
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X23]
	037 Move X9, [X8+184]
	038 Move X10, [X9]
	039 Compare X10, 0
	040 JumpIfNotEqual {70}
	041 Move W10, [X8+224]
	042 Compare W10, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X23]
	047 Move X9, [X8+184]
	048 Move X8, 0x56A000
	049 Move X20, [X9+8]
	050 Move X8, [X8+2120]
	051 Move X0, [X8]
	052 Move X8, 0x5AB000
	053 Move X8, [X8+3808]
	054 Move X21, [X8]
	055 Move X8, 0x5AB000
	056 Move X8, [X8+3800]
	057 Move W9, [X0+224]
	058 Move X22, [X8]
	059 Compare W9, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X22
	065 Move X3, X31
	066 Call BurstCompiler.GetILPPMethodFunctionPointer2, X0, X1, X2
	067 Move X8, [X23]
	068 Move X9, [X8+184]
	069 Move [X9], X0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {76}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, [X23]
	076 Move X8, [X8+184]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X8, [X8]
	080 Move [X19], X8
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 

Method: System.IntPtr GetFunctionPointer()

Disassembly:
	0x03BB24B0 LDR V0, [X20 + 0x24]
	0x03BB24B4 LDR V1, [X19 + 0x24]
	0x03BB24B8 FCMP S0, S1
	0x03BB24BC B.NE 0x3BB2508
	0x03BB24C0 LDR V0, [X20 + 0x28]
	0x03BB24C4 LDR V1, [X19 + 0x28]
	0x03BB24C8 FCMP S0, S1
	0x03BB24CC B.NE 0x3BB2508
	0x03BB24D0 ADRP X8, 0x541000
	0x03BB24D4 LDR X8, [X8 + 0x598]
	0x03BB24D8 LDR X20, [X20 + 0x30]
	0x03BB24DC LDR X19, [X19 + 0x30]
	0x03BB24E0 LDR X0, [X8]
	0x03BB24E4 LDR W8, [X0 + 0xE0]
	0x03BB24E8 CBNZ W8, 0x3BB24F0
	0x03BB24EC BL 0x1C16DFC
	0x03BB24F0 MOV X0, X20
	0x03BB24F4 MOV X1, X19
	0x03BB24F8 MOV X2, X31
	0x03BB24FC BL 0x3C3883C
	0x03BB2500 B 0x3BB2508
	0x03BB2504 MOV W0, W31
	0x03BB2508 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x831000
	005 Move X19, 0x5AB000
	006 Move W8, [X20+3270]
	007 Move X19, [X19+3752]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5AB000
	013 Move X0, [X0+3752]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3270], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 8
	024 Call FastCalculateRadiusOffset_00000C20$BurstDirectCall.GetFunctionPointerDiscard, X0
	025 Move X0, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void Constructor()

Disassembly:
	0x03BB250C LDP X30, X21, [X31 + 0x10]
	0x03BB2510 AND W0, W0, 0x1
	0x03BB2514 ADD X31, X31, 0x30
	0x03BB2518 RET
	0x03BB251C SUB X31, X31, 0x60
	0x03BB2520 STP X30, X21, [X31 + 0x40]
	0x03BB2524 STP X20, X19, [X31 + 0x50]
	0x03BB2528 ADRP X21, 0x830000
	0x03BB252C LDRB W8, [X21 + 0xCD9]
	0x03BB2530 MOV X20, X1
	0x03BB2534 MOV X19, X0
	0x03BB2538 TBNZ X8, 0x0, 0x3BB2550
	0x03BB253C ADRP X0, 0x56C000
	0x03BB2540 LDR X0, [X0 + 0x6D8]
	0x03BB2544 BL 0x1C16CF4
	0x03BB2548 MOVZ W8, 0x1
	0x03BB254C STRB W8, [X21 + 0xCD9]
	0x03BB2550 CBZ X20, 0x3BB256C
	0x03BB2554 ADRP X8, 0x56C000
	0x03BB2558 LDR X8, [X8 + 0x6D8]
	0x03BB255C LDR X9, [X20]
	0x03BB2560 LDR X8, [X8]
	0x03BB2564 CMP X9, X8
	0x03BB2568 B.EQ 0x3BB2574
	0x03BB256C MOV W0, W31
	0x03BB2570 B 0x3BB25A0
	0x03BB2574 MOV X0, X20
	0x03BB2578 BL 0x1C16E08
	0x03BB257C LDR X8, [X0 + 0x30]
	0x03BB2580 LDP V2, V0, [X0 + 0x10]
	0x03BB2584 LDR V1, [X0]
	0x03BB2588 ADD X1, X31, 0x0
	0x03BB258C MOV X0, X19
	0x03BB2590 STR X8, [X31 + 0x30]
	0x03BB2594 STP V2, V0, [X31 + 0x10]
	0x03BB2598 STR V1, [X31]
	0x03BB259C BL 0x3BB23C4
	0x03BB25A0 LDP X20, X19, [X31 + 0x50]
	0x03BB25A4 LDP X30, X21, [X31 + 0x40]
	0x03BB25A8 AND W0, W0, 0x1
	0x03BB25AC ADD X31, X31, 0x60
	0x03BB25B0 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x831000
	006 Move X19, 0x5AB000
	007 Move X20, 0x56A000
	008 Move W8, [X21+3271]
	009 Move X19, [X19+3816]
	010 Move X20, [X20+2120]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x56A000
	016 Move X0, [X0+2120]
	017 Call 0x1C17CF4
	018 Move X0, 0x5AB000
	019 Move X0, [X0+3752]
	020 Call 0x1C17CF4
	021 Move X0, 0x5AB000
	022 Move X0, [X0+3816]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3271], W8
	026 Move X0, [X20]
	027 Move X20, 0x5AB000
	028 Move X19, [X19]
	029 Move W8, [X0+224]
	030 Move X20, [X20+3752]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call BurstCompiler.CompileILPPMethod2, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move [X8+8], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void Initialize()

Disassembly:
	0x03BB25B4 SUB X31, X31, 0x80

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03BB25B8 STP X29, X30, [X31 + 0x20]

ISIL:
	001 Call FastCalculateRadiusOffset_00000C20$BurstDirectCall.Constructor
	002 Return 

Method: System.Single Invoke(in Unity.Mathematics.float3 initialScale, in Unity.Mathematics.float3 targetScale, in Unity.Mathematics.float3 initialBoundsSize, System.Single innerRadius)

Disassembly:
	0x03BB1868 LDR X21, [X8]
	0x03BB186C ADRP X8, 0x5AB000
	0x03BB1870 LDR X8, [X8 + 0xEF0]
	0x03BB1874 LDR W9, [X0 + 0xE0]
	0x03BB1878 LDR X22, [X8]
	0x03BB187C CBNZ W9, 0x3BB1884
	0x03BB1880 BL 0x1C16DFC
	0x03BB1884 MOV X0, X20
	0x03BB1888 MOV X1, X21
	0x03BB188C MOV X2, X22
	0x03BB1890 MOV X3, X31
	0x03BB1894 BL 0x36FAD70
	0x03BB1898 LDR X8, [X23]
	0x03BB189C LDR X9, [X8 + 0xB8]
	0x03BB18A0 STR X0, [X9]
	0x03BB18A4 LDR W9, [X8 + 0xE0]
	0x03BB18A8 CBNZ W9, 0x3BB18B8
	0x03BB18AC MOV X0, X8
	0x03BB18B0 BL 0x1C16DFC
	0x03BB18B4 LDR X8, [X23]
	0x03BB18B8 LDR X8, [X8 + 0xB8]
	0x03BB18BC LDP X22, X21, [X31 + 0x10]
	0x03BB18C0 LDR X8, [X8]
	0x03BB18C4 STR X8, [X19]
	0x03BB18C8 LDP X20, X19, [X31 + 0x20]
	0x03BB18CC LDP X30, X23, [X31], #0x30
	0x03BB18D0 RET
	0x03BB18D4 STR X30, [X31 - 0x20]!
	0x03BB18D8 STP X20, X19, [X31 + 0x10]
	0x03BB18DC ADRP X20, 0x831000
	0x03BB18E0 ADRP X19, 0x5AB000
	0x03BB18E4 LDRB W8, [X20 + 0xCCB]
	0x03BB18E8 LDR X19, [X19 + 0xEC0]
	0x03BB18EC TBNZ X8, 0x0, 0x3BB1904
	0x03BB18F0 ADRP X0, 0x5AB000
	0x03BB18F4 LDR X0, [X0 + 0xEC0]
	0x03BB18F8 BL 0x1C16CF4
	0x03BB18FC MOVZ W8, 0x1
	0x03BB1900 STRB W8, [X20 + 0xCCB]
	0x03BB1904 LDR X0, [X19]
	0x03BB1908 STR X31, [X31 + 0x8]
	0x03BB190C LDR W8, [X0 + 0xE0]
	0x03BB1910 CBNZ W8, 0x3BB1918
	0x03BB1914 BL 0x1C16DFC
	0x03BB1918 ADD X0, X31, 0x8
	0x03BB191C BL 0x3BB17B8
	0x03BB1920 LDR X0, [X31 + 0x8]
	0x03BB1924 LDP X20, X19, [X31 + 0x10]
	0x03BB1928 LDR X30, [X31], #0x20
	0x03BB192C RET
	0x03BB1930 STP X30, X21, [X31 - 0x20]!
	0x03BB1934 STP X20, X19, [X31 + 0x10]
	0x03BB1938 ADRP X21, 0x831000
	0x03BB193C ADRP X19, 0x5AB000
	0x03BB1940 ADRP X20, 0x56A000
	0x03BB1944 LDRB W8, [X21 + 0xCCC]
	0x03BB1948 LDR X19, [X19 + 0xF00]
	0x03BB194C LDR X20, [X20 + 0x848]
	0x03BB1950 TBNZ X8, 0x0, 0x3BB1980
	0x03BB1954 ADRP X0, 0x56A000
	0x03BB1958 LDR X0, [X0 + 0x848]
	0x03BB195C BL 0x1C16CF4
	0x03BB1960 ADRP X0, 0x5AB000
	0x03BB1964 LDR X0, [X0 + 0xEC0]
	0x03BB1968 BL 0x1C16CF4
	0x03BB196C ADRP X0, 0x5AB000
	0x03BB1970 LDR X0, [X0 + 0xF00]
	0x03BB1974 BL 0x1C16CF4
	0x03BB1978 MOVZ W8, 0x1
	0x03BB197C STRB W8, [X21 + 0xCCC]
	0x03BB1980 LDR X0, [X20]
	0x03BB1984 ADRP X20, 0x5AB000
	0x03BB1988 LDR X19, [X19]
	0x03BB198C LDR W8, [X0 + 0xE0]
	0x03BB1990 LDR X20, [X20 + 0xEC0]
	0x03BB1994 CBNZ W8, 0x3BB199C
	0x03BB1998 BL 0x1C16DFC
	0x03BB199C MOV X0, X19
	0x03BB19A0 MOV X1, X31
	0x03BB19A4 BL 0x36FA754
	0x03BB19A8 LDR X8, [X20]
	0x03BB19AC MOV X19, X0
	0x03BB19B0 LDR W9, [X8 + 0xE0]
	0x03BB19B4 CBNZ W9, 0x3BB19C4
	0x03BB19B8 MOV X0, X8
	0x03BB19BC BL 0x1C16DFC
	0x03BB19C0 LDR X8, [X20]
	0x03BB19C4 LDR X8, [X8 + 0xB8]
	0x03BB19C8 STR X19, [X8 + 0x8]
	0x03BB19CC LDP X20, X19, [X31 + 0x10]
	0x03BB19D0 LDP X30, X21, [X31], #0x20
	0x03BB19D4 RET
	0x03BB19D8 RET
	0x03BB19DC B 0x3BB1930
	0x03BB19E0 STP X30, X21, [X31 - 0x20]!
	0x03BB19E4 STP X20, X19, [X31 + 0x10]
	0x03BB19E8 LDR X8, [X2 + 0x8]
	0x03BB19EC STP X1, X2, [X0 + 0x20]
	0x03BB19F0 MOV X19, X0
	0x03BB19F4 MOV X20, X1
	0x03BB19F8 STR X8, [X0 + 0x10]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x832000
	011 Move X23, 0x56B000
	012 Move W8, [X22+3272]
	013 Move X23, [X23+2120]
	014 Move V8, V0
	015 Move X19, X2
	016 Move X20, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0x56B000
	023 Move X0, [X0+2120]
	024 Call 0x1C17CF4
	025 Move X0, 0x5AC000
	026 Move X0, [X0+3752]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+3272], W8
	030 Move X0, [X23]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X31
	036 Call BurstCompiler.get_IsEnabled
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {66}
	041 Move X8, 0x5AC000
	042 Move X8, [X8+3752]
	043 Move X0, [X8]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Call FastCalculateRadiusOffset_00000C20$BurstDirectCall.GetFunctionPointer
	049 Compare X0, 0
	050 JumpIfEqual {66}
	051 Move X3, X0
	052 Move X0, X21
	053 Move X1, X20
	054 Move X2, X19
	055 Move V0, V8
	056 Move X20, [X31+64]
	057 Move X19, [X31+72]
	058 Move X22, [X31+48]
	059 Move X21, [X31+56]
	060 Move X30, [X31+32]
	061 Move X23, [X31+40]
	062 Move D9, [X31+16]
	063 Move D8, [X31+24]
	064 Add X31, X31, 80
	065 CallNoReturn X3
	066 Move [X31+8], W31
	067 Move [X31], X31
	068 Move S1, [X19]
	069 Move S0, [X19+4]
	070 Move V2, [X19+8]
	071 Move W22, 0x7F800000
	072 Add X2, X31, 0
	073 Move W8, S0
	074 And W8, W8, 0x7FFFFFFF
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction FCCMP not yet implemented."
	077 NotImplemented "Instruction FCSEL not yet implemented."
	078 Move W8, S2
	079 And W8, W8, 0x7FFFFFFF
	080 NotImplemented "Instruction FCMP not yet implemented."
	081 NotImplemented "Instruction CCMP not yet implemented."
	082 Move X8, -51142656
	083 NotImplemented "Instruction FCSEL not yet implemented."
	084 Move V0, [X8+576]
	085 Move X0, X20
	086 Move X1, X21
	087 Move X3, X31
	088 Call BurstMathUtility.FastSafeDivide, X0, X1, X2, V0
	089 Move V0, [X31]
	090 Move V1, [X19]
	091 Move V2, [X31+8]
	092 Move V3, [X19+8]
	093 Move X20, [X31+64]
	094 Move X19, [X31+72]
	095 NotImplemented "Instruction INVALID not yet implemented."
	096 Move S1, V0.S[1]
	097 Move W8, S1
	098 And W8, W8, 0x7FFFFFFF
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Multiply S2, S2, S3
	101 NotImplemented "Instruction FCCMP not yet implemented."
	102 Move W8, S2
	103 NotImplemented "Instruction FCSEL not yet implemented."
	104 And W8, W8, 0x7FFFFFFF
	105 NotImplemented "Instruction FCMP not yet implemented."
	106 NotImplemented "Instruction CCMP not yet implemented."
	107 NotImplemented "Instruction FCSEL not yet implemented."
	108 Move W8, S0
	109 And W8, W8, 0x7FFFFFFF
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction FCCMP not yet implemented."
	112 NotImplemented "Instruction FCSEL not yet implemented."
	113 Move S1, 0.5
	114 Multiply S0, S0, S1
	115 Add S0, S0, S8
	116 Move X22, [X31+48]
	117 Move X21, [X31+56]
	118 Move X30, [X31+32]
	119 Move X23, [X31+40]
	120 Move D9, [X31+16]
	121 Move D8, [X31+24]
	122 Add X31, X31, 80
	123 Return V0

