Type: UnityEngine.XR.Interaction.Toolkit.Transformers.XRDualGrabFreeTransformer

Method: UnityEngine.XR.Interaction.Toolkit.Transformers.XRDualGrabFreeTransformer/PoseContributor get_multiSelectPosition()

Disassembly:
	0x03BAA1C0 LDR V1, [X19 + 0x12C]
	0x03BAA1C4 LDR V2, [X19 + 0x130]

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_multiSelectPosition(UnityEngine.XR.Interaction.Toolkit.Transformers.XRDualGrabFreeTransformer/PoseContributor value)

Disassembly:
	0x03BAA1C8 MOV V4.16B, V3.16B
	0x03BAA1CC MOV V5.16B, V3.16B

ISIL:
	001 Move [X0+32], W1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.Transformers.XRDualGrabFreeTransformer/PoseContributor get_multiSelectRotation()

Disassembly:
	0x03BAA1D0 MOV X0, X31
	0x03BAA1D4 BL 0x3B26D88

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Void set_multiSelectRotation(UnityEngine.XR.Interaction.Toolkit.Transformers.XRDualGrabFreeTransformer/PoseContributor value)

Disassembly:
	0x03BAA1D8 STR S0, [X19 + 0x134]
	0x03BAA1DC STR S1, [X19 + 0x138]

ISIL:
	001 Move [X0+36], W1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer/RegistrationMode get_registrationMode()

Disassembly:
	0x03BAA1E0 STR S2, [X19 + 0x13C]
	0x03BAA1E4 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W0, 2
	002 Return X0

Method: UnityEngine.Pose get_lastInteractorAttachPose()

Disassembly:
	0x03BAA1E8 LDR X30, [X31], #0x20
	0x03BAA1EC RET
	0x03BAA1F0 BL 0x1C16F28
	0x03BAA1F4 BL 0x1C16F20
	0x03BAA1F8 ORR W8, W2, 0x2

ISIL:
	001 NotImplemented "Instruction LDUR not yet implemented."
	002 NotImplemented "Instruction LDUR not yet implemented."
	003 Move [X8+12], V0
	004 Move [X8], V1
	005 Return X0

Method: System.Void set_lastInteractorAttachPose(UnityEngine.Pose value)

Disassembly:
	0x03BAA1FC CMP W8, 0x3
	0x03BAA200 B.NE 0x3BAA210
	0x03BAA204 MOV X2, X3
	0x03BAA208 MOV X3, X4
	0x03BAA20C B 0x3BAA214
	0x03BAA210 RET
	0x03BAA214 SUB X31, X31, 0xF0

ISIL:
	001 Move W8, [X1+24]
	002 Move X9, [X1+16]
	003 Move V0, [X1]
	004 Move [X0+64], W8
	005 Move [X0+56], X9
	006 Move [X0+40], V0
	007 Return 

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x03BAA218 STP X30, X1, [X31 + 0xC0]

ISIL:
	001 Return 

Method: System.Void OnGrabCountChanged(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, UnityEngine.Pose targetPose, UnityEngine.Vector3 localScale)

Disassembly:
	0x03BAA21C STP X22, X21, [X31 + 0xD0]
	0x03BAA220 STP X20, X19, [X31 + 0xE0]
	0x03BAA224 MOV X22, X3
	0x03BAA228 MOV X19, X2
	0x03BAA22C ADD X2, X31, 0xB0
	0x03BAA230 ADD X3, X31, 0xA0
	0x03BAA234 ADD X4, X31, 0x90
	0x03BAA238 MOV X21, X1
	0x03BAA23C MOV X20, X0
	0x03BAA240 STR W31, [X31 + 0xB8]
	0x03BAA244 STR X31, [X31 + 0xB0]
	0x03BAA248 STR W31, [X31 + 0xA8]
	0x03BAA24C STP X31, X31, [X31 + 0x98]
	0x03BAA250 STR X31, [X31 + 0x90]
	0x03BAA254 STR W31, [X31 + 0x88]
	0x03BAA258 STR X31, [X31 + 0x80]
	0x03BAA25C STR W31, [X31 + 0x78]
	0x03BAA260 STP X31, X31, [X31 + 0x68]
	0x03BAA264 STP X31, X31, [X31 + 0x58]
	0x03BAA268 STR X31, [X31 + 0x50]
	0x03BAA26C STR W31, [X31 + 0x48]
	0x03BAA270 STR X31, [X31 + 0x40]
	0x03BAA274 STR W31, [X31 + 0x38]
	0x03BAA278 STR X31, [X31 + 0x30]
	0x03BAA27C STR W31, [X31 + 0x28]
	0x03BAA280 STR X31, [X31 + 0x20]
	0x03BAA284 STR W31, [X31 + 0x18]
	0x03BAA288 STR X31, [X31 + 0x10]
	0x03BAA28C BL 0x3BAAE94
	0x03BAA290 CBZ X21, 0x3BAA3E8
	0x03BAA294 LDRB W6, [X21 + 0x218]
	0x03BAA298 ADD X4, X20, 0xC4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x839000
	006 Move W8, [X21+3216]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x5B1000
	014 Move X0, [X0+360]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3216], W8
	018 Compare X20, 0
	019 JumpIfEqual {42}
	020 Move X0, X20
	021 Move X1, X31
	022 Call XRBaseInteractable.get_interactorsSelecting, X0
	023 Compare X0, 0
	024 JumpIfEqual {42}
	025 Move W8, [X0+24]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, X20
	028 Move X1, X31
	029 Call Component.get_transform, X0
	030 Compare X0, 0
	031 JumpIfEqual {42}
	032 Move X1, X31
	033 Call Transform.get_up, X0
	034 Move [X19+68], S0
	035 Move [X19+76], S1
	036 Move [X19+76], S2
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return 
	042 Call 0x1C17F20

Method: System.Void Process(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase, ref UnityEngine.Pose targetPose, ref UnityEngine.Vector3 localScale)

Disassembly:
	0x03BAA29C ADD X2, X20, 0x10C
	0x03BAA2A0 ADD X1, X31, 0xC8
	0x03BAA2A4 ADD X5, X31, 0xB0
	0x03BAA2A8 MOV X0, X20
	0x03BAA2AC MOV X3, X22
	0x03BAA2B0 BL 0x3BABD54

ISIL:
	001 Or W8, W2, 2
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move X2, X3
	004 Return 

Method: System.Void UpdateTarget(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, ref UnityEngine.Pose targetPose)

Disassembly:
	0x03BAA2B4 STP S0, S1, [X22]
	0x03BAA2B8 STR S2, [X22 + 0x8]
	0x03BAA2BC LDRB W2, [X21 + 0x20C]
	0x03BAA2C0 ADD X1, X31, 0x90
	0x03BAA2C4 MOV X0, X20
	0x03BAA2C8 BL 0x3BABB14
	0x03BAA2CC STP S0, S1, [X19 + 0xC]
	0x03BAA2D0 STP S2, S3, [X19 + 0x14]
	0x03BAA2D4 LDP S0, S1, [X31 + 0xA0]
	0x03BAA2D8 LDR V2, [X31 + 0xA8]
	0x03BAA2DC MOV X0, X31
	0x03BAA2E0 BL 0x3887BE4
	0x03BAA2E4 LDP S6, S4, [X31 + 0x90]
	0x03BAA2E8 LDP S5, S3, [X31 + 0x98]
	0x03BAA2EC STP S0, S1, [X31 + 0x70]
	0x03BAA2F0 STR S2, [X31 + 0x78]
	0x03BAA2F4 MOV V0.16B, V6.16B
	0x03BAA2F8 MOV V1.16B, V4.16B
	0x03BAA2FC MOV V2.16B, V5.16B
	0x03BAA300 MOV X0, X31
	0x03BAA304 BL 0x38BD218
	0x03BAA308 STP S0, S1, [X31 + 0x60]
	0x03BAA30C STP S2, S3, [X31 + 0x68]
	0x03BAA310 LDP S0, S1, [X19 + 0xC]
	0x03BAA314 LDP S2, S3, [X19 + 0x14]
	0x03BAA318 MOV X0, X31
	0x03BAA31C BL 0x38BD218
	0x03BAA320 STP S0, S1, [X31 + 0x50]
	0x03BAA324 STP S2, S3, [X31 + 0x58]
	0x03BAA328 LDP S0, S1, [X22]
	0x03BAA32C LDR V2, [X22 + 0x8]
	0x03BAA330 MOV X0, X31
	0x03BAA334 BL 0x3887BE4
	0x03BAA338 STP S0, S1, [X31 + 0x40]
	0x03BAA33C STR S2, [X31 + 0x48]
	0x03BAA340 LDP S0, S1, [X20 + 0x64]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x839000
	007 Move W8, [X22+3217]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x5B1000
	016 Move X0, [X0+360]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+3217], W8
	020 Compare X20, 0
	021 JumpIfEqual {46}
	022 Move X0, X20
	023 Move X1, X31
	024 Call XRBaseInteractable.get_interactorsSelecting, X0
	025 Compare X0, 0
	026 JumpIfEqual {46}
	027 Move W8, [X0+24]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X0, X20
	030 Move X1, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Move X0, X21
	037 Move X1, X20
	038 Move X2, X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Call XRDualGrabFreeTransformer.UpdateTargetMulti, X0, X1, X2
	045 Return 
	046 Call 0x1C17F20

Method: System.Void UpdateTargetMulti(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable grabInteractable, ref UnityEngine.Pose targetPose)

Disassembly:
	0x03BAA684 FMUL S17, S9, S3
	0x03BAA688 FMUL S18, S8, S0
	0x03BAA68C FMUL S20, S10, S1
	0x03BAA690 FMUL S21, S10, S0
	0x03BAA694 FMUL S22, S9, S0
	0x03BAA698 FMUL S0, S9, S1
	0x03BAA69C FMUL S1, S11, S2
	0x03BAA6A0 FMUL S23, S11, S3
	0x03BAA6A4 FMUL S3, S8, S3
	0x03BAA6A8 FMUL S6, S9, S2
	0x03BAA6AC FMUL S19, S10, S2
	0x03BAA6B0 FMUL S24, S8, S2
	0x03BAA6B4 FADD S2, S4, S5
	0x03BAA6B8 FADD S4, S16, S17
	0x03BAA6BC FADD S1, S1, S3
	0x03BAA6C0 FSUB S3, S23, S21
	0x03BAA6C4 FADD S2, S6, S2
	0x03BAA6C8 FADD S4, S18, S4
	0x03BAA6CC FADD S5, S20, S1
	0x03BAA6D0 FSUB S3, S3, S0
	0x03BAA6D4 FSUB S0, S2, S7
	0x03BAA6D8 FSUB S1, S4, S19
	0x03BAA6DC FSUB S2, S5, S22
	0x03BAA6E0 FSUB S3, S3, S24
	0x03BAA6E4 MOV X0, X31
	0x03BAA6E8 BL 0x3C2A260
	0x03BAA6EC LDR V10, [X31]
	0x03BAA6F0 LDR V9, [X31 + 0x10C]
	0x03BAA6F4 MOV V13.16B, V0.16B
	0x03BAA6F8 MOV V12.16B, V1.16B
	0x03BAA6FC MOV V11.16B, V2.16B
	0x03BAA700 MOV V14.16B, V3.16B
	0x03BAA704 MOV V8.16B, V15.16B
	0x03BAA708 B 0x3BAA72C
	0x03BAA70C STP S2, S1, [X31 + 0x4]
	0x03BAA710 STR S3, [X31 + 0xC]
	0x03BAA714 ADRP X8, 0x54A000
	0x03BAA718 LDR X8, [X8 + 0x5A8]
	0x03BAA71C LDR X8, [X8]
	0x03BAA720 LDR X8, [X8 + 0xB8]
	0x03BAA724 LDP S13, S12, [X8]
	0x03BAA728 LDP S11, S14, [X8 + 0x8]
	0x03BAA72C ADD X23, X19, 0x48
	0x03BAA730 LDR W8, [X23 + 0x8]
	0x03BAA734 LDR X9, [X23]
	0x03BAA738 ADD X25, X19, 0x80
	0x03BAA73C STR W8, [X31 + 0xB8]
	0x03BAA740 STR X9, [X31 + 0xB0]
	0x03BAA744 LDRB W8, [X21 + 0x200]
	0x03BAA748 CBZ W8, 0x3BAA7A8
	0x03BAA74C LDR W8, [X25 + 0x8]
	0x03BAA750 LDR X9, [X25]
	0x03BAA754 STR W8, [X31 + 0xB8]
	0x03BAA758 STR X9, [X31 + 0xB0]
	0x03BAA75C CBZ X22, 0x3BAA9E0
	0x03BAA760 LDP S8, S15, [X19 + 0x4C]
	0x03BAA764 LDR V9, [X19 + 0x48]
	0x03BAA768 MOV X0, X22
	0x03BAA76C MOV X1, X31
	0x03BAA770 BL 0x3C3F58C
	0x03BAA774 LDRB W8, [X21 + 0x20C]
	0x03BAA778 FSUB S0, S9, S0
	0x03BAA77C FSUB S8, S8, S1
	0x03BAA780 FSUB S9, S15, S2
	0x03BAA784 CBZ W8, 0x3BAA7A4
	0x03BAA788 MOV X0, X22
	0x03BAA78C MOV V1.16B, V8.16B
	0x03BAA790 MOV V2.16B, V9.16B
	0x03BAA794 MOV X1, X31
	0x03BAA798 BL 0x3C408CC
	0x03BAA79C MOV V8.16B, V1.16B
	0x03BAA7A0 MOV V9.16B, V2.16B
	0x03BAA7A4 STR S0, [X31 + 0x108]
	0x03BAA7A8 LDP W2, W3, [X19 + 0x20]
	0x03BAA7AC ADD X0, X31, 0xB0
	0x03BAA7B0 MOV X1, X23
	0x03BAA7B4 STR S9, [X31 + 0x10C]
	0x03BAA7B8 MOV V15.16B, V8.16B
	0x03BAA7BC STR W3, [X19 + 0x158]
	0x03BAA7C0 STR W2, [X19 + 0x15C]
	0x03BAA7C4 BL 0x3BAA9E4
	0x03BAA7C8 LDP S5, S4, [X31 + 0x4]
	0x03BAA7CC LDR V6, [X31 + 0xC]
	0x03BAA7D0 ADD X0, X31, 0x90
	0x03BAA7D4 MOV V3.16B, V10.16B
	0x03BAA7D8 MOV X1, X31
	0x03BAA7DC STP S0, S1, [X31 + 0xB0]
	0x03BAA7E0 STR S2, [X31 + 0xB8]
	0x03BAA7E4 STP X31, X31, [X31 + 0x90]
	0x03BAA7E8 STR W31, [X31 + 0xA8]
	0x03BAA7EC STR X31, [X31 + 0xA0]
	0x03BAA7F0 BL 0x3C3DB6C
	0x03BAA7F4 LDUR V0, [X24 + 0xC]
	0x03BAA7F8 LDR V1, [X31 + 0x9]
	0x03BAA7FC STUR V0, [X23 + 0xC]
	0x03BAA800 STR V1, [X23]
	0x03BAA804 CBZ X20, 0x3BAA9E0
	0x03BAA808 MOV X0, X20
	0x03BAA80C MOV X1, X31
	0x03BAA810 BL 0x3C3FBAC
	0x03BAA814 MOV V8.16B, V0.16B
	0x03BAA818 MOV V9.16B, V1.16B
	0x03BAA81C LDR V0, [X25]
	0x03BAA820 LDUR V1, [X25 + 0xC]
	0x03BAA824 MOV V10.16B, V2.16B
	0x03BAA828 ADD X1, X31, 0x30
	0x03BAA82C STR V0, [X31 + 0x3]
	0x03BAA830 STUR V1, [X31 + 0x3C]
	0x03BAA834 LDR V3, [X23]
	0x03BAA838 LDUR V4, [X23 + 0xC]
	0x03BAA83C LDP S0, S1, [X19 + 0x80]
	0x03BAA840 LDR V2, [X19 + 0x88]
	0x03BAA844 STR V3, [X31 + 0x1]
	0x03BAA848 STUR V4, [X31 + 0x1C]
	0x03BAA84C ADD X2, X31, 0x10
	0x03BAA850 MOV X0, X19
	0x03BAA854 MOV V3.16B, V8.16B
	0x03BAA858 MOV V4.16B, V9.16B
	0x03BAA85C MOV V5.16B, V10.16B
	0x03BAA860 BL 0x3BAAA68
	0x03BAA864 LDP S0, S1, [X19 + 0x8C]
	0x03BAA868 LDP S2, S3, [X19 + 0x94]
	0x03BAA86C MOV X0, X31
	0x03BAA870 BL 0x3C2A260
	0x03BAA874 FMUL S4, S14, S0
	0x03BAA878 FMUL S5, S13, S3
	0x03BAA87C FMUL S16, S14, S1
	0x03BAA880 FMUL S17, S12, S3
	0x03BAA884 FMUL S22, S14, S2
	0x03BAA888 FMUL S23, S14, S3
	0x03BAA88C FMUL S3, S11, S3
	0x03BAA890 FMUL S21, S13, S0
	0x03BAA894 FADD S4, S4, S5
	0x03BAA898 LDP S5, S24, [X19 + 0x54]
	0x03BAA89C FADD S16, S16, S17
	0x03BAA8A0 FADD S3, S22, S3
	0x03BAA8A4 LDP S17, S22, [X19 + 0x5C]
	0x03BAA8A8 FMUL S6, S12, S2
	0x03BAA8AC FMUL S7, S11, S1
	0x03BAA8B0 FMUL S18, S11, S0
	0x03BAA8B4 FMUL S20, S13, S1
	0x03BAA8B8 FMUL S1, S12, S1
	0x03BAA8BC FSUB S21, S23, S21
	0x03BAA8C0 FMUL S19, S13, S2
	0x03BAA8C4 FMUL S0, S12, S0
	0x03BAA8C8 FMUL S2, S11, S2
	0x03BAA8CC FADD S4, S6, S4
	0x03BAA8D0 FADD S6, S18, S16
	0x03BAA8D4 FADD S3, S20, S3
	0x03BAA8D8 FSUB S1, S21, S1
	0x03BAA8DC FSUB S4, S4, S7
	0x03BAA8E0 FSUB S6, S6, S19
	0x03BAA8E4 FSUB S0, S3, S0
	0x03BAA8E8 FSUB S1, S1, S2
	0x03BAA8EC FMUL S2, S5, S1
	0x03BAA8F0 FMUL S3, S22, S4
	0x03BAA8F4 FMUL S7, S17, S6
	0x03BAA8F8 FMUL S16, S24, S0
	0x03BAA8FC FMUL S18, S24, S1
	0x03BAA900 FMUL S19, S22, S6
	0x03BAA904 FMUL S20, S5, S0
	0x03BAA908 FMUL S21, S17, S4
	0x03BAA90C FMUL S23, S24, S4
	0x03BAA910 FMUL S4, S5, S4
	0x03BAA914 FMUL S5, S5, S6
	0x03BAA918 FMUL S6, S24, S6
	0x03BAA91C FMUL S24, S17, S1
	0x03BAA920 FMUL S1, S22, S1
	0x03BAA924 FADD S2, S2, S3
	0x03BAA928 FSUB S1, S1, S4
	0x03BAA92C FMUL S22, S22, S0
	0x03BAA930 FMUL S0, S17, S0
	0x03BAA934 FADD S2, S7, S2
	0x03BAA938 FSUB S1, S1, S6
	0x03BAA93C FSUB S11, S2, S16
	0x03BAA940 FSUB S14, S1, S0
	0x03BAA944 LDR V0, [X31 + 0x108]
	0x03BAA948 LDR V2, [X31 + 0x10C]
	0x03BAA94C FADD S3, S18, S19
	0x03BAA950 FADD S17, S24, S22
	0x03BAA954 FADD S3, S20, S3
	0x03BAA958 FADD S4, S23, S17
	0x03BAA95C FSUB S12, S3, S21
	0x03BAA960 FSUB S13, S4, S5
	0x03BAA964 MOV V1.16B, V15.16B
	0x03BAA968 MOV V3.16B, V8.16B
	0x03BAA96C MOV V4.16B, V9.16B
	0x03BAA970 MOV V5.16B, V10.16B
	0x03BAA974 MOV X0, X31
	0x03BAA978 BL 0x3B26D78
	0x03BAA97C ADD X0, X31, 0x70
	0x03BAA980 MOV V3.16B, V11.16B
	0x03BAA984 MOV V4.16B, V12.16B
	0x03BAA988 MOV V5.16B, V13.16B
	0x03BAA98C MOV V6.16B, V14.16B
	0x03BAA990 MOV X1, X31
	0x03BAA994 STP X31, X31, [X31 + 0x70]
	0x03BAA998 STR W31, [X31 + 0x88]
	0x03BAA99C STR X31, [X31 + 0x80]
	0x03BAA9A0 BL 0x3C3DB6C
	0x03BAA9A4 LDUR V0, [X31 + 0x7C]
	0x03BAA9A8 LDR V1, [X31 + 0x7]
	0x03BAA9AC LDP X22, X21, [X31 + 0x130]
	0x03BAA9B0 LDP X24, X23, [X31 + 0x120]
	0x03BAA9B4 STR V0, [X19 + 0x7]
	0x03BAA9B8 STUR V1, [X19 + 0x64]
	0x03BAA9BC LDP X20, X19, [X31 + 0x140]
	0x03BAA9C0 LDP X30, X25, [X31 + 0x110]
	0x03BAA9C4 LDR X29, [X31 + 0x100]
	0x03BAA9C8 LDP D9, D8, [X31 + 0xF0]
	0x03BAA9CC LDP D11, D10, [X31 + 0xE0]
	0x03BAA9D0 LDP D13, D12, [X31 + 0xD0]
	0x03BAA9D4 LDP D15, D14, [X31 + 0xC0]
	0x03BAA9D8 ADD X31, X31, 0x150
	0x03BAA9DC RET
	0x03BAA9E0 BL 0x1C16F20
	0x03BAA9E4 SUB X31, X31, 0x20
	0x03BAA9E8 STP X30, X19, [X31 + 0x10]
	0x03BAA9EC AND W8, W2, 0x2
	0x03BAA9F0 AND W9, W2, 0x4
	0x03BAA9F4 AND W10, W2, W8, 0x1
	0x03BAA9F8 ANDS W31, W10, W9, 0x2
	0x03BAA9FC STR W31, [X31 + 0x8]
	0x03BAAA00 STR X31, [X31]
	0x03BAAA04 B.EQ 0x3BAAA14
	0x03BAAA08 LDP S0, S1, [X0]
	0x03BAAA0C ADD X8, X0, 0x8
	0x03BAAA10 B 0x3BAAA58
	0x03BAAA14 ANDS W31, W2, 0x7
	0x03BAAA18 B.EQ 0x3BAAA50
	0x03BAAA1C CMP W9, 0x0
	0x03BAAA20 CSET W5, NE
	0x03BAAA24 CMP W8, 0x0
	0x03BAAA28 AND W8, W2, 0x1
	0x03BAAA2C CSET W4, NE
	0x03BAAA30 ADD X6, X31, 0x0
	0x03BAAA34 MOV W2, W3
	0x03BAAA38 MOV W3, W8
	0x03BAAA3C ADD X19, X31, 0x0
	0x03BAAA40 BL 0x3BABBA8
	0x03BAAA44 LDP S0, S1, [X31]
	0x03BAAA48 ADD X8, X19, 0x8
	0x03BAAA4C B 0x3BAAA58
	0x03BAAA50 LDP S0, S1, [X1]
	0x03BAAA54 ADD X8, X1, 0x8
	0x03BAAA58 LDR V2, [X8]
	0x03BAAA5C LDP X30, X19, [X31 + 0x10]
	0x03BAAA60 ADD X31, X31, 0x20
	0x03BAAA64 RET
	0x03BAAA68 STP D13, D12, [X31 - 0x50]!
	0x03BAAA6C STP D11, D10, [X31 + 0x10]
	0x03BAAA70 STP D9, D8, [X31 + 0x20]
	0x03BAAA74 STP X30, X21, [X31 + 0x30]
	0x03BAAA78 STP X20, X19, [X31 + 0x40]
	0x03BAAA7C MOV V10.16B, V3.16B
	0x03BAAA80 MOV V11.16B, V2.16B
	0x03BAAA84 MOV V12.16B, V1.16B
	0x03BAAA88 MOV V13.16B, V0.16B
	0x03BAAA8C LDP S0, S1, [X1 + 0xC]
	0x03BAAA90 LDP S2, S3, [X1 + 0x14]
	0x03BAAA94 MOV X19, X0
	0x03BAAA98 MOV X0, X31
	0x03BAAA9C MOV V8.16B, V5.16B
	0x03BAAAA0 MOV V9.16B, V4.16B
	0x03BAAAA4 MOV X20, X2
	0x03BAAAA8 MOV X21, X1
	0x03BAAAAC BL 0x3C2A260
	0x03BAAAB0 LDP S4, S5, [X21]
	0x03BAAAB4 LDR V6, [X21 + 0x8]
	0x03BAAAB8 MOV X0, X31
	0x03BAAABC FSUB S4, S13, S4
	0x03BAAAC0 FSUB S5, S12, S5
	0x03BAAAC4 FSUB S6, S11, S6
	0x03BAAAC8 BL 0x3C2A9FC
	0x03BAAACC STP S0, S1, [X19 + 0x9C]
	0x03BAAAD0 STR S2, [X19 + 0xA4]
	0x03BAAAD4 LDP S0, S1, [X20 + 0xC]
	0x03BAAAD8 LDP S2, S3, [X20 + 0x14]
	0x03BAAADC MOV X0, X31
	0x03BAAAE0 BL 0x3C2A260
	0x03BAAAE4 LDP S4, S5, [X20]
	0x03BAAAE8 LDR V6, [X20 + 0x8]
	0x03BAAAEC MOV X0, X31
	0x03BAAAF0 FSUB S4, S13, S4
	0x03BAAAF4 FSUB S5, S12, S5
	0x03BAAAF8 FSUB S6, S11, S6
	0x03BAAAFC BL 0x3C2A9FC
	0x03BAAB00 MOV V3.16B, V10.16B
	0x03BAAB04 MOV V4.16B, V9.16B
	0x03BAAB08 MOV V5.16B, V8.16B
	0x03BAAB0C MOV X0, X31
	0x03BAAB10 STP S0, S1, [X19 + 0xA8]
	0x03BAAB14 STR S2, [X19 + 0xB0]
	0x03BAAB18 BL 0x3B26D78
	0x03BAAB1C STP S0, S1, [X19 + 0xA8]
	0x03BAAB20 STR S2, [X19 + 0xB0]
	0x03BAAB24 LDP X20, X19, [X31 + 0x40]
	0x03BAAB28 LDP X30, X21, [X31 + 0x30]
	0x03BAAB2C LDP D9, D8, [X31 + 0x20]
	0x03BAAB30 LDP D11, D10, [X31 + 0x10]
	0x03BAAB34 LDP D13, D12, [X31], #0x50
	0x03BAAB38 RET
	0x03BAAB3C STR D10, [X31 - 0x50]!
	0x03BAAB40 STP D9, D8, [X31 + 0x10]
	0x03BAAB44 STP X30, X23, [X31 + 0x20]
	0x03BAAB48 STP X22, X21, [X31 + 0x30]
	0x03BAAB4C STP X20, X19, [X31 + 0x40]
	0x03BAAB50 ADRP X21, 0x838000
	0x03BAAB54 LDRB W8, [X21 + 0xC95]
	0x03BAAB58 MOV V8.16B, V2.16B
	0x03BAAB5C MOV V9.16B, V1.16B
	0x03BAAB60 MOV V10.16B, V0.16B
	0x03BAAB64 MOV X20, X1
	0x03BAAB68 MOV X19, X0
	0x03BAAB6C TBNZ X8, 0x0, 0x3BAAB9C
	0x03BAAB70 ADRP X0, 0x5B0000
	0x03BAAB74 LDR X0, [X0 + 0x2F8]
	0x03BAAB78 BL 0x1C16CF4
	0x03BAAB7C ADRP X0, 0x5B0000
	0x03BAAB80 LDR X0, [X0 + 0x168]
	0x03BAAB84 BL 0x1C16CF4
	0x03BAAB88 ADRP X0, 0x5B0000
	0x03BAAB8C LDR X0, [X0 + 0x170]
	0x03BAAB90 BL 0x1C16CF4
	0x03BAAB94 MOVZ W8, 0x1
	0x03BAAB98 STRB W8, [X21 + 0xC95]
	0x03BAAB9C CBZ X20, 0x3BAAE90
	0x03BAABA0 MOV X0, X20
	0x03BAABA4 MOV X1, X31
	0x03BAABA8 BL 0x3B3A784
	0x03BAABAC CBZ X0, 0x3BAAE90
	0x03BAABB0 LDR W23, [X0 + 0x18]
	0x03BAABB4 CMP W23, 0x1
	0x03BAABB8 B.NE 0x3BAAC14
	0x03BAABBC MOV X0, X20
	0x03BAABC0 MOV X1, X31
	0x03BAABC4 BL 0x3B3A784
	0x03BAABC8 CBZ X0, 0x3BAAE90
	0x03BAABCC ADRP X8, 0x5B0000
	0x03BAABD0 LDR X8, [X8 + 0x170]
	0x03BAABD4 MOV W1, W31
	0x03BAABD8 LDR X2, [X8]
	0x03BAABDC BL 0x301BCCC
	0x03BAABE0 LDR X8, [X19 + 0xB8]
	0x03BAABE4 CMP X0, X8
	0x03BAABE8 B.NE 0x3BAABF8
	0x03BAABEC LDR W8, [X19 + 0xC0]
	0x03BAABF0 CMP W8, 0x2
	0x03BAABF4 B.LT 0x3BAAE34
	0x03BAABF8 LDR X8, [X19]
	0x03BAABFC MOV X0, X19
	0x03BAAC00 MOV X1, X20
	0x03BAAC04 LDR X9, [X8 + 0x208]
	0x03BAAC08 LDR X2, [X8 + 0x210]
	0x03BAAC0C BLR X9
	0x03BAAC10 B 0x3BAAE34
	0x03BAAC14 CMP W23, 0x2
	0x03BAAC18 B.LT 0x3BAAE34
	0x03BAAC1C MOV X0, X20
	0x03BAAC20 MOV X1, X31
	0x03BAAC24 BL 0x3B3A784
	0x03BAAC28 CBZ X0, 0x3BAAE90
	0x03BAAC2C ADRP X22, 0x5B0000
	0x03BAAC30 LDR X22, [X22 + 0x170]
	0x03BAAC34 MOV W1, W31
	0x03BAAC38 LDR X2, [X22]
	0x03BAAC3C BL 0x301BCCC
	0x03BAAC40 MOV X21, X0
	0x03BAAC44 MOV X0, X20
	0x03BAAC48 MOV X1, X31
	0x03BAAC4C BL 0x3B3A784
	0x03BAAC50 CBZ X0, 0x3BAAE90
	0x03BAAC54 LDR X2, [X22]
	0x03BAAC58 MOVZ W1, 0x1
	0x03BAAC5C BL 0x301BCCC
	0x03BAAC60 CBZ X21, 0x3BAAE90
	0x03BAAC64 ADRP X10, 0x5B0000
	0x03BAAC68 LDR X8, [X21]
	0x03BAAC6C LDR X10, [X10 + 0x2F8]
	0x03BAAC70 MOV X22, X0
	0x03BAAC74 LDRH W9, [X8 + 0x12E]
	0x03BAAC78 LDR X1, [X10]
	0x03BAAC7C CBZ X9, 0x3BAACA0
	0x03BAAC80 LDR X10, [X8 + 0xB0]
	0x03BAAC84 ADD X10, X10, 0x8
	0x03BAAC88 LDUR X11, [X10 - 0x8]
	0x03BAAC8C CMP X11, X1
	0x03BAAC90 B.EQ 0x3BAACB0
	0x03BAAC94 SUBS X9, X9, 0x1
	0x03BAAC98 ADD X10, X10, 0x10
	0x03BAAC9C B.NE 0x3BAAC88
	0x03BAACA0 MOVZ W2, 0x6
	0x03BAACA4 MOV X0, X21
	0x03BAACA8 BL 0x1C5C788
	0x03BAACAC B 0x3BAACC0
	0x03BAACB0 LDR W9, [X10]
	0x03BAACB4 ADD W9, W9, 0x6
	0x03BAACB8 ADD X8, X8, W9, 0x4, SXTW
	0x03BAACBC ADD X0, X8, 0x138
	0x03BAACC0 LDP X8, X2, [X0]
	0x03BAACC4 MOV X0, X21
	0x03BAACC8 MOV X1, X20
	0x03BAACCC BLR X8
	0x03BAACD0 LDR X8, [X20]
	0x03BAACD4 MOV X21, X0
	0x03BAACD8 MOV X0, X20
	0x03BAACDC MOV X1, X22
	0x03BAACE0 LDR X9, [X8 + 0x5A8]
	0x03BAACE4 LDR X2, [X8 + 0x5B0]
	0x03BAACE8 BLR X9
	0x03BAACEC STR S10, [X19 + 0x10C]
	0x03BAACF0 STR S9, [X19 + 0x110]
	0x03BAACF4 STR S8, [X19 + 0x114]
	0x03BAACF8 CBZ X0, 0x3BAAE90
	0x03BAACFC MOV X1, X31
	0x03BAAD00 BL 0x3C3F58C
	0x03BAAD04 CBZ X21, 0x3BAAE90
	0x03BAAD08 MOV X0, X21
	0x03BAAD0C MOV X1, X31
	0x03BAAD10 BL 0x3C40B58
	0x03BAAD14 STP S0, S1, [X19 + 0xC4]
	0x03BAAD18 STR S2, [X19 + 0xCC]
	0x03BAAD1C ADRP X20, 0x82E000
	0x03BAAD20 LDRB W8, [X20 + 0x785]
	0x03BAAD24 MOV V8.16B, V0.16B
	0x03BAAD28 MOV V9.16B, V1.16B
	0x03BAAD2C MOV V10.16B, V2.16B
	0x03BAAD30 CBNZ W8, 0x3BAAD48
	0x03BAAD34 ADRP X0, 0x549000
	0x03BAAD38 LDR X0, [X0 + 0x5A8]
	0x03BAAD3C BL 0x1C16CF4
	0x03BAAD40 MOVZ W8, 0x1
	0x03BAAD44 STRB W8, [X20 + 0x785]
	0x03BAAD48 ADRP X8, 0x549000
	0x03BAAD4C LDR X8, [X8 + 0x5A8]
	0x03BAAD50 LDR X0, [X8]
	0x03BAAD54 LDR W8, [X0 + 0xE0]
	0x03BAAD58 CBNZ W8, 0x3BAAD60
	0x03BAAD5C BL 0x1C16DFC
	0x03BAAD60 FMUL S0, S8, S8
	0x03BAAD64 FMUL S1, S9, S9
	0x03BAAD68 ADRP X8, 0xFFFFFFFFFCF40000
	0x03BAAD6C FADD S0, S0, S1
	0x03BAAD70 LDR V1, [X8 + 0x17C]
	0x03BAAD74 FMUL S2, S10, S10
	0x03BAAD78 FADD S0, S2, S0
	0x03BAAD7C FSQRT S0, S0
	0x03BAAD80 FCMP S0, S1
	0x03BAAD84 B.LE 0x3BAAD98
	0x03BAAD88 FDIV S8, S8, S0
	0x03BAAD8C FDIV S9, S9, S0
	0x03BAAD90 FDIV S10, S10, S0
	0x03BAAD94 B 0x3BAADD0
	0x03BAAD98 ADRP X20, 0x82E000
	0x03BAAD9C LDRB W8, [X20 + 0x783]
	0x03BAADA0 CBNZ W8, 0x3BAADB8
	0x03BAADA4 ADRP X0, 0x549000
	0x03BAADA8 LDR X0, [X0 + 0x5A0]
	0x03BAADAC BL 0x1C16CF4
	0x03BAADB0 MOVZ W8, 0x1
	0x03BAADB4 STRB W8, [X20 + 0x783]
	0x03BAADB8 ADRP X8, 0x549000
	0x03BAADBC LDR X8, [X8 + 0x5A0]
	0x03BAADC0 LDR X8, [X8]
	0x03BAADC4 LDR X8, [X8 + 0xB8]
	0x03BAADC8 LDP S8, S9, [X8]
	0x03BAADCC LDR V10, [X8 + 0x8]
	0x03BAADD0 MOV V0.16B, V8.16B
	0x03BAADD4 MOV V1.16B, V9.16B
	0x03BAADD8 MOV V2.16B, V10.16B
	0x03BAADDC MOV X0, X31
	0x03BAADE0 STP S8, S9, [X19 + 0xD0]
	0x03BAADE4 STR S10, [X19 + 0xD8]
	0x03BAADE8 BL 0x3B87F58
	0x03BAADEC MOV V3.16B, V0.16B
	0x03BAADF0 MOV V4.16B, V1.16B
	0x03BAADF4 MOV V5.16B, V2.16B
	0x03BAADF8 MOV V0.16B, V8.16B
	0x03BAADFC MOV V1.16B, V9.16B
	0x03BAAE00 MOV V2.16B, V10.16B
	0x03BAAE04 MOV X0, X31
	0x03BAAE08 BL 0x3C2A810
	0x03BAAE0C MOV X0, X31
	0x03BAAE10 STP S0, S1, [X19 + 0xDC]
	0x03BAAE14 STP S2, S3, [X19 + 0xE4]
	0x03BAAE18 BL 0x3C2A260
	0x03BAAE1C STP S0, S1, [X19 + 0xEC]
	0x03BAAE20 LDUR V0, [X19 + 0xDC]
	0x03BAAE24 MOVZ W8, 0x1
	0x03BAAE28 STP S2, S3, [X19 + 0xF4]
	0x03BAAE2C STRB W8, [X19 + 0x118]
	0x03BAAE30 STUR V0, [X19 + 0xFC]
	0x03BAAE34 LDR V0, [X19 + 0x128]
	0x03BAAE38 LDP S1, S4, [X19 + 0x3C]
	0x03BAAE3C LDR V2, [X19 + 0x12C]
	0x03BAAE40 LDR V3, [X19 + 0x130]
	0x03BAAE44 STR W23, [X19 + 0xC0]
	0x03BAAE48 FMUL S5, S0, S1
	0x03BAAE4C FMUL S6, S2, S1
	0x03BAAE50 FMUL S1, S3, S1
	0x03BAAE54 FMUL S0, S0, S4
	0x03BAAE58 FMUL S2, S2, S4
	0x03BAAE5C FMUL S3, S3, S4
	0x03BAAE60 STR S5, [X19 + 0x140]
	0x03BAAE64 STR S6, [X19 + 0x144]
	0x03BAAE68 STR S1, [X19 + 0x148]
	0x03BAAE6C STR S0, [X19 + 0x14C]
	0x03BAAE70 STR S2, [X19 + 0x150]
	0x03BAAE74 STR S3, [X19 + 0x154]
	0x03BAAE78 LDP X20, X19, [X31 + 0x40]
	0x03BAAE7C LDP X22, X21, [X31 + 0x30]
	0x03BAAE80 LDP X30, X23, [X31 + 0x20]
	0x03BAAE84 LDP D9, D8, [X31 + 0x10]
	0x03BAAE88 LDR V10, [X31], #0x50
	0x03BAAE8C RET
	0x03BAAE90 BL 0x1C16F20
	0x03BAAE94 SUB X31, X31, 0xA0
	0x03BAAE98 STP D15, D14, [X31 + 0x10]
	0x03BAAE9C STP D13, D12, [X31 + 0x20]
	0x03BAAEA0 STP D11, D10, [X31 + 0x30]
	0x03BAAEA4 STP D9, D8, [X31 + 0x40]
	0x03BAAEA8 STR X30, [X31 + 0x50]
	0x03BAAEAC STP X26, X25, [X31 + 0x60]
	0x03BAAEB0 STP X24, X23, [X31 + 0x70]
	0x03BAAEB4 STP X22, X21, [X31 + 0x80]
	0x03BAAEB8 STP X20, X19, [X31 + 0x90]
	0x03BAAEBC ADRP X22, 0x838000
	0x03BAAEC0 LDRB W8, [X22 + 0xC96]
	0x03BAAEC4 MOV X19, X4
	0x03BAAEC8 MOV X20, X3
	0x03BAAECC MOV X24, X2
	0x03BAAED0 MOV X23, X1
	0x03BAAED4 MOV X21, X0
	0x03BAAED8 TBNZ X8, 0x0, 0x3BAAF08
	0x03BAAEDC ADRP X0, 0x5B0000
	0x03BAAEE0 LDR X0, [X0 + 0x2F8]
	0x03BAAEE4 BL 0x1C16CF4
	0x03BAAEE8 ADRP X0, 0x5B0000
	0x03BAAEEC LDR X0, [X0 + 0x168]
	0x03BAAEF0 BL 0x1C16CF4
	0x03BAAEF4 ADRP X0, 0x5B0000
	0x03BAAEF8 LDR X0, [X0 + 0x170]
	0x03BAAEFC BL 0x1C16CF4
	0x03BAAF00 MOVZ W8, 0x1
	0x03BAAF04 STRB W8, [X22 + 0xC96]
	0x03BAAF08 CBZ X23, 0x3BAB91C
	0x03BAAF0C MOV X0, X23
	0x03BAAF10 MOV X1, X31
	0x03BAAF14 BL 0x3B3A784
	0x03BAAF18 CBZ X0, 0x3BAB91C
	0x03BAAF1C LDR W8, [X0 + 0x18]
	0x03BAAF20 ADRP X25, 0x5B0000
	0x03BAAF24 ADRP X26, 0x5B0000
	0x03BAAF28 LDR X25, [X25 + 0x170]
	0x03BAAF2C LDR X26, [X26 + 0x2F8]
	0x03BAAF30 CMP W8, 0x1
	0x03BAAF34 B.EQ 0x3BAAFE8
	0x03BAAF38 LDR W8, [X21 + 0x28]
	0x03BAAF3C CBZ W8, 0x3BAAFE8
	0x03BAAF40 MOV X0, X23
	0x03BAAF44 MOV X1, X31
	0x03BAAF48 BL 0x3B3A784
	0x03BAAF4C CBZ X0, 0x3BAB91C
	0x03BAAF50 LDR W8, [X0 + 0x18]
	0x03BAAF54 CMP W8, 0x2
	0x03BAAF58 B.GE 0x3BAB0E4
	0x03BAAF5C LDR W8, [X21 + 0xCC]
	0x03BAAF60 LDUR X9, [X21 + 0xC4]
	0x03BAAF64 ADRP X21, 0x82E000
	0x03BAAF68 STR W8, [X24 + 0x8]
	0x03BAAF6C STR X9, [X24]
	0x03BAAF70 LDRB W8, [X21 + 0x783]
	0x03BAAF74 CBNZ W8, 0x3BAAF8C
	0x03BAAF78 ADRP X0, 0x549000
	0x03BAAF7C LDR X0, [X0 + 0x5A0]
	0x03BAAF80 BL 0x1C16CF4
	0x03BAAF84 MOVZ W8, 0x1
	0x03BAAF88 STRB W8, [X21 + 0x783]
	0x03BAAF8C ADRP X8, 0x549000
	0x03BAAF90 LDR X8, [X8 + 0x5A0]
	0x03BAAF94 LDR X8, [X8]
	0x03BAAF98 LDR X8, [X8 + 0xB8]
	0x03BAAF9C LDR V0, [X8]
	0x03BAAFA0 LDR V1, [X8 + 0x8]
	0x03BAAFA4 STR D0, [X20]
	0x03BAAFA8 STR S1, [X20 + 0x8]
	0x03BAAFAC ADRP X20, 0x82E000
	0x03BAAFB0 LDRB W8, [X20 + 0x793]
	0x03BAAFB4 CBNZ W8, 0x3BAAFCC
	0x03BAAFB8 ADRP X0, 0x54A000
	0x03BAAFBC LDR X0, [X0 + 0x5A8]
	0x03BAAFC0 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 272
	002 Move [X31+128], D15
	003 Move [X31+136], D14
	004 Move [X31+144], D13
	005 Move [X31+152], D12
	006 Move [X31+160], D11
	007 Move [X31+168], D10
	008 Move [X31+176], D9
	009 Move [X31+184], D8
	010 Move [X31+192], X29
	011 Move [X31+208], X30
	012 Move [X31+216], X25
	013 Move [X31+224], X24
	014 Move [X31+232], X23
	015 Move [X31+240], X22
	016 Move [X31+248], X21
	017 Move [X31+256], X20
	018 Move [X31+264], X19
	019 Move X22, 0x839000
	020 Move W8, [X22+3218]
	021 Move X19, X2
	022 Move X20, X1
	023 Move X21, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {39}
	028 Move X0, 0x5B1000
	029 Move X0, [X0+760]
	030 Call 0x1C17CF4
	031 Move X0, 0x5B1000
	032 Move X0, [X0+368]
	033 Call 0x1C17CF4
	034 Move X0, 0x572000
	035 Move X0, [X0+1552]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X22+3218], W8
	039 Move [X31+96], X31
	040 Move [X31+104], X31
	041 Move [X31+120], W31
	042 Move [X31+112], X31
	043 Move [X31+64], X31
	044 Move [X31+72], X31
	045 Move [X31+88], W31
	046 Move [X31+80], X31
	047 Compare X20, 0
	048 JumpIfEqual {650}
	049 Move X0, X20
	050 Move X1, X31
	051 Call XRBaseInteractable.get_interactorsSelecting, X0
	052 Compare X0, 0
	053 JumpIfEqual {650}
	054 Move X23, 0x5B1000
	055 Move X23, [X23+368]
	056 Move W1, W31
	057 Move X2, [X23]
	058 Call List`1<Object>.get_Item, X0, X1
	059 Compare X0, 0
	060 JumpIfEqual {650}
	061 Move X24, 0x5B1000
	062 Move X8, [X0]
	063 Move X24, [X24+760]
	064 Move X22, X0
	065 NotImplemented "Instruction LDRH not yet implemented."
	066 Move X1, [X24]
	067 Compare X9, 0
	068 JumpIfEqual {75}
	069 Move X10, [X8+176]
	070 Add X10, X10, 8
	071 NotImplemented "Instruction LDUR not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Subtract X9, X9, 1
	074 Add X10, X10, 16
	075 Move W2, 6
	076 Move X0, X22
	077 Call 0x1C5D788
	078 Move W9, [X10]
	079 Add W9, W9, 6
	080 Add X8, X8, W9
	081 Add X0, X8, 312
	082 Move X8, [X0]
	083 Move X2, [X0+8]
	084 Move X0, X22
	085 Move X1, X20
	086 NotImplemented "Instruction BLR not yet implemented."
	087 Add X8, X31, 32
	088 Move X1, X31
	089 Call TransformExtensions.GetWorldPose, X0
	090 Move V0, [X31+2]
	091 NotImplemented "Instruction LDUR not yet implemented."
	092 Move X0, X20
	093 Move X1, X31
	094 Move [X31+6], V0
	095 Move [X31+108], V1
	096 Call XRBaseInteractable.get_interactorsSelecting, X0
	097 Compare X0, 0
	098 JumpIfEqual {650}
	099 Move X2, [X23]
	100 Move W1, 1
	101 Call List`1<Object>.get_Item, X0, X1
	102 Compare X0, 0
	103 JumpIfEqual {650}
	104 Move X8, [X0]
	105 Move X1, [X24]
	106 Move X22, X0
	107 NotImplemented "Instruction LDRH not yet implemented."
	108 Compare X9, 0
	109 JumpIfEqual {116}
	110 Move X10, [X8+176]
	111 Add X10, X10, 8
	112 NotImplemented "Instruction LDUR not yet implemented."
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Subtract X9, X9, 1
	115 Add X10, X10, 16
	116 Move W2, 6
	117 Move X0, X22
	118 Call 0x1C5D788
	119 Move W9, [X10]
	120 Add W9, W9, 6
	121 Add X8, X8, W9
	122 Add X0, X8, 312
	123 Move X8, [X0]
	124 Move X2, [X0+8]
	125 Move X0, X22
	126 Move X1, X20
	127 NotImplemented "Instruction BLR not yet implemented."
	128 Add X8, X31, 32
	129 Move X1, X31
	130 Call TransformExtensions.GetWorldPose, X0
	131 Move V0, [X31+2]
	132 NotImplemented "Instruction LDUR not yet implemented."
	133 Move [X31+4], V0
	134 Move [X31+76], V1
	135 Move W8, [X21+32]
	136 NotImplemented "Instruction CMP not yet implemented."
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move S8, [X31+96]
	139 Move S9, [X31+100]
	140 Move V11, [X31+104]
	141 Move S10, [X31+64]
	142 Move S12, [X31+68]
	143 Move V13, [X31+72]
	144 Move S0, 0.5
	145 Add S1, S8, S10
	146 Add S2, S9, S12
	147 Add S3, S11, S13
	148 Multiply S4, S1, S0
	149 Multiply S1, S2, S0
	150 Multiply S14, S3, S0
	151 Move [X31+12], S4
	152 Move [X31+20], S1
	153 Move S10, [X31+64]
	154 Move S12, [X31+68]
	155 Move V13, [X31+72]
	156 Move S8, [X31+96]
	157 Move S9, [X31+100]
	158 Move V11, [X31+104]
	159 Move [X31+12], S10
	160 Move [X31+20], S12
	161 Move V14, V13
	162 Move S8, [X31+96]
	163 Move S9, [X31+100]
	164 Move V11, [X31+104]
	165 Move S10, [X31+64]
	166 Move S12, [X31+68]
	167 Move V13, [X31+72]
	168 Move [X31+12], S8
	169 Move [X31+20], S9
	170 Move V14, V11
	171 Move X22, 0x82F000
	172 Move W8, [X22+1925]
	173 Compare W8, 0
	174 JumpIfNotEqual {180}
	175 Move X0, 0x54A000
	176 Move X0, [X0+1448]
	177 Call 0x1C17CF4
	178 Move W8, 1
	179 Move [X22+1925], W8
	180 Move X22, 0x54A000
	181 Move X22, [X22+1448]
	182 Subtract S10, S10, S8
	183 Subtract S9, S12, S9
	184 Subtract S8, S13, S11
	185 Move X0, [X22]
	186 Move W8, [X0+224]
	187 Compare W8, 0
	188 JumpIfNotEqual {190}
	189 Call 0x1C17DFC
	190 Multiply S0, S10, S10
	191 Multiply S1, S9, S9
	192 Move X8, -51113984
	193 Add S0, S0, S1
	194 Move V1, [X8+380]
	195 Multiply S2, S8, S8
	196 Add S0, S2, S0
	197 NotImplemented "Instruction FSQRT not yet implemented."
	198 NotImplemented "Instruction FCMP not yet implemented."
	199 NotImplemented "Instruction FDIV not yet implemented."
	200 NotImplemented "Instruction FDIV not yet implemented."
	201 NotImplemented "Instruction FDIV not yet implemented."
	202 Move X24, 0x82F000
	203 Move W8, [X24+1923]
	204 Compare W8, 0
	205 JumpIfNotEqual {211}
	206 Move X0, 0x54A000
	207 Move X0, [X0+1440]
	208 Call 0x1C17CF4
	209 Move W8, 1
	210 Move [X24+1923], W8
	211 Move X8, 0x54A000
	212 Move X8, [X8+1440]
	213 Move X8, [X8]
	214 Move X8, [X8+184]
	215 Move S10, [X8]
	216 Move S13, [X8+4]
	217 Move V8, [X8+8]
	218 Move W8, [X21+36]
	219 Move [X31+8], S14
	220 NotImplemented "Instruction CMP not yet implemented."
	221 NotImplemented "Instruction CMP not yet implemented."
	222 Move [X31+24], S8
	223 Move X24, 0x572000
	224 Move X24, [X24+1552]
	225 Move V8, V13
	226 Move X0, [X24]
	227 Move W8, [X0+224]
	228 Compare W8, 0
	229 JumpIfNotEqual {231}
	230 Call 0x1C17DFC
	231 Add X0, X31, 96
	232 Move X1, X31
	233 Call Pose.get_up, X0
	234 Add X0, X31, 64
	235 Move X1, X31
	236 Move V11, V0
	237 Move V12, V1
	238 Move V13, V2
	239 Call Pose.get_up, X0
	240 Move V3, V0
	241 Move V4, V1
	242 Move V5, V2
	243 Move S6, 0.5
	244 Move V0, V11
	245 Move V1, V12
	246 Move V2, V13
	247 Move X0, X31
	248 Call Vector3.Slerp, X0, X1, V0
	249 Add X0, X31, 96
	250 Move X1, X31
	251 Move [X31+200], S1
	252 Move [X31+208], S0
	253 Move [X31+28], S2
	254 Call Pose.get_right, X0
	255 Add X0, X31, 64
	256 Move X1, X31
	257 Move V11, V0
	258 Move V14, V1
	259 Move V15, V2
	260 Call Pose.get_right, X0
	261 Move V3, V0
	262 Move V4, V1
	263 Move V5, V2
	264 Move S6, 0.5
	265 Move V0, V11
	266 Move V1, V14
	267 Move V2, V15
	268 Move X0, X31
	269 Call Vector3.Slerp, X0, X1, V0
	270 Move X25, 0x82F000
	271 Move W8, [X25+1923]
	272 Move V12, V0
	273 Move V9, V1
	274 Move V11, V2
	275 Compare W8, 0
	276 JumpIfNotEqual {282}
	277 Move X0, 0x54A000
	278 Move X0, [X0+1440]
	279 Call 0x1C17CF4
	280 Move W8, 1
	281 Move [X25+1923], W8
	282 Move X8, 0x54A000
	283 Move X8, [X8+1440]
	284 Move V13, V8
	285 Move X8, [X8]
	286 Move X8, [X8+184]
	287 Move S0, [X8]
	288 Move S1, [X8+4]
	289 Move V2, [X8+8]
	290 Move X8, -51118080
	291 Subtract S0, S10, S0
	292 Subtract S1, S8, S1
	293 Multiply S0, S0, S0
	294 Multiply S1, S1, S1
	295 Add S0, S0, S1
	296 Move V1, [X8+3872]
	297 Move V8, [X31+24]
	298 Move X24, 0x572000
	299 Move X24, [X24+1552]
	300 Move X0, [X24]
	301 Move W8, [X0+224]
	302 Compare W8, 0
	303 JumpIfNotEqual {305}
	304 Call 0x1C17DFC
	305 Add X0, X31, 64
	306 Move X1, X31
	307 Call Pose.get_up, X0
	308 Add X0, X31, 64
	309 Move X1, X31
	310 Move [X31+200], S1
	311 Move [X31+208], S0
	312 Move [X31+28], S2
	313 Call Pose.get_right, X0
	314 Move X25, 0x82F000
	315 Move W8, [X25+1923]
	316 Move V12, V0
	317 Move V9, V1
	318 Move V11, V2
	319 Compare W8, 0
	320 JumpIfNotEqual {326}
	321 Move X0, 0x54A000
	322 Move X0, [X0+1440]
	323 Call 0x1C17CF4
	324 Move W8, 1
	325 Move [X25+1923], W8
	326 Move X8, 0x54A000
	327 Move X8, [X8+1440]
	328 Move X8, [X8]
	329 Move X8, [X8+184]
	330 Move S0, [X8]
	331 Move S1, [X8+4]
	332 Move V2, [X8+8]
	333 Move X8, -51118080
	334 Subtract S0, S10, S0
	335 Subtract S1, S13, S1
	336 Multiply S0, S0, S0
	337 Multiply S1, S1, S1
	338 Add S0, S0, S1
	339 Move V1, [X8+3872]
	340 Subtract S2, S8, S2
	341 Multiply S2, S2, S2
	342 Add S0, S2, S0
	343 NotImplemented "Instruction FCMP not yet implemented."
	344 Move X0, [X24]
	345 Move W8, [X0+224]
	346 Compare W8, 0
	347 JumpIfNotEqual {349}
	348 Call 0x1C17DFC
	349 Add X0, X31, 64
	350 Move X24, 0x572000
	351 Move X24, [X24+1552]
	352 Move X0, [X24]
	353 Move W8, [X0+224]
	354 Compare W8, 0
	355 JumpIfNotEqual {357}
	356 Call 0x1C17DFC
	357 Add X0, X31, 96
	358 Move X1, X31
	359 Call Pose.get_up, X0
	360 Add X0, X31, 96
	361 Move X1, X31
	362 Move [X31+200], S1
	363 Move [X31+208], S0
	364 Move [X31+28], S2
	365 Call Pose.get_right, X0
	366 Move X25, 0x82F000
	367 Move W8, [X25+1923]
	368 Move V12, V0
	369 Move V9, V1
	370 Move V11, V2
	371 Compare W8, 0
	372 JumpIfNotEqual {378}
	373 Move X0, 0x54A000
	374 Move X0, [X0+1440]
	375 Call 0x1C17CF4
	376 Move W8, 1
	377 Move [X25+1923], W8
	378 Move X8, 0x54A000
	379 Move X8, [X8+1440]
	380 Move X8, [X8]
	381 Move X8, [X8+184]
	382 Move S0, [X8]
	383 Move S1, [X8+4]
	384 Move V2, [X8+8]
	385 Move X8, -51118080
	386 Subtract S0, S10, S0
	387 Subtract S1, S13, S1
	388 Multiply S0, S0, S0
	389 Multiply S1, S1, S1
	390 Add S0, S0, S1
	391 Move V1, [X8+3872]
	392 Subtract S2, S8, S2
	393 Multiply S2, S2, S2
	394 Add S0, S2, S0
	395 NotImplemented "Instruction FCMP not yet implemented."
	396 Move X0, [X24]
	397 Move W8, [X0+224]
	398 Compare W8, 0
	399 JumpIfNotEqual {401}
	400 Call 0x1C17DFC
	401 Add X0, X31, 96
	402 Move X1, X31
	403 Call Pose.get_forward, X0
	404 Move V10, V0
	405 Move V13, V1
	406 Move V8, V2
	407 Move X24, 0x82F000
	408 Move W8, [X24+2596]
	409 Compare W8, 0
	410 JumpIfNotEqual {416}
	411 Move X0, 0x54A000
	412 Move X0, [X0+1448]
	413 Call 0x1C17CF4
	414 Move W8, 1
	415 Move [X24+2596], W8
	416 Move S1, [X31+200]
	417 Move S0, [X31+204]
	418 Move X0, [X22]
	419 Move V3, V13
	420 Move V2, V10
	421 Multiply S0, S0, S0
	422 Multiply S1, S1, S1
	423 Add S0, S0, S1
	424 Move V1, [X31+28]
	425 Move W8, [X0+224]
	426 Move V4, V8
	427 Multiply S15, S11, S10
	428 Multiply S1, S1, S1
	429 Multiply S5, S9, S10
	430 Add S10, S1, S0
	431 Multiply S0, S2, S2
	432 Multiply S1, S3, S3
	433 Add S0, S1, S0
	434 Multiply S1, S4, S4
	435 Multiply S13, S11, S13
	436 Multiply S14, S9, S8
	437 Multiply S8, S12, S8
	438 Multiply S12, S12, S3
	439 Move V9, V2
	440 Add S11, S1, S0
	441 Move [X31+20], S3
	442 Move [X31+28], S4
	443 Compare W8, 0
	444 JumpIfNotEqual {448}
	445 Move [X31+4], S5
	446 Call 0x1C17DFC
	447 Move V5, [X31+4]
	448 Move X8, -51118080
	449 Move V1, [X8+4072]
	450 Subtract S13, S13, S14
	451 Subtract S14, S8, S15
	452 Subtract S15, S5, S12
	453 Move V12, [X31+16]
	454 Multiply S0, S10, S11
	455 NotImplemented "Instruction FSQRT not yet implemented."
	456 NotImplemented "Instruction FCMP not yet implemented."
	457 Move S1, W31
	458 Move S3, [X31+200]
	459 Move S1, [X31+204]
	460 Move V2, [X31+20]
	461 Move X0, [X22]
	462 Multiply S1, S1, S9
	463 Multiply S2, S3, S2
	464 Move S3, [X31+24]
	465 Move S4, [X31+28]
	466 Add S1, S2, S1
	467 Move W8, [X0+224]
	468 Move S2, -1
	469 Multiply S3, S4, S3
	470 Add S1, S3, S1
	471 NotImplemented "Instruction FDIV not yet implemented."
	472 Move S1, 1
	473 NotImplemented "Instruction FMIN not yet implemented."
	474 NotImplemented "Instruction FCMP not yet implemented."
	475 NotImplemented "Instruction FCSEL not yet implemented."
	476 Compare W8, 0
	477 JumpIfNotEqual {479}
	478 Call 0x1C17DFC
	479 NotImplemented "Instruction FCVT not yet implemented."
	480 Call 0x3EB2B80
	481 Move X8, -51113984
	482 Move V1, [X8+1096]
	483 NotImplemented "Instruction INVALID not yet implemented."
	484 Multiply S1, S0, S1
	485 Move W8, 0x43340000
	486 Move S0, W8
	487 NotImplemented "Instruction FDIV not yet implemented."
	488 NotImplemented "Instruction FRINTM not yet implemented."
	489 Multiply S2, S2, S0
	490 Move W8, 0xC2B40000
	491 Subtract S1, S1, S2
	492 Move S2, W8
	493 NotImplemented "Instruction FMIN not yet implemented."
	494 NotImplemented "Instruction FCMP not yet implemented."
	495 Add S0, S0, S2
	496 NotImplemented "Instruction FCSEL not yet implemented."
	497 Move W8, 0x42B40000
	498 Move S4, [X31+200]
	499 Move S3, [X31+204]
	500 Move V5, [X31+28]
	501 NotImplemented "Instruction FABS not yet implemented."
	502 Move S1, W8
	503 Subtract S0, S1, S0
	504 NotImplemented "Instruction FDIV not yet implemented."
	505 Move V0, V13
	506 Move V1, V14
	507 Move V2, V15
	508 Move X0, X31
	509 Call Vector3.Slerp, X0, X1, V0
	510 Move S7, [X31+20]
	511 Move S16, [X31+24]
	512 Move X0, X31
	513 Multiply S3, S16, S1
	514 Multiply S4, S7, S2
	515 Multiply S2, S9, S2
	516 Multiply S5, S16, S0
	517 Multiply S0, S7, S0
	518 Multiply S1, S9, S1
	519 Subtract S2, S2, S5
	520 Subtract S0, S0, S1
	521 Subtract S3, S3, S4
	522 Multiply S1, S7, S0
	523 Multiply S5, S16, S2
	524 Move S4, [X21+68]
	525 Move S6, [X21+72]
	526 Subtract S1, S1, S5
	527 Multiply S5, S16, S3
	528 Multiply S0, S9, S0
	529 Subtract S0, S5, S0
	530 Move V5, [X21+76]
	531 Multiply S2, S9, S2
	532 Multiply S3, S7, S3
	533 Subtract S2, S2, S3
	534 Multiply S3, S4, S1
	535 Multiply S4, S6, S0
	536 Multiply S5, S5, S2
	537 Add S3, S3, S4
	538 Add S3, S5, S3
	539 NotImplemented "Instruction FNEG not yet implemented."
	540 NotImplemented "Instruction FNEG not yet implemented."
	541 NotImplemented "Instruction FNEG not yet implemented."
	542 NotImplemented "Instruction FCMP not yet implemented."
	543 NotImplemented "Instruction FCSEL not yet implemented."
	544 NotImplemented "Instruction FCSEL not yet implemented."
	545 NotImplemented "Instruction FCSEL not yet implemented."
	546 Move V0, V9
	547 Move V1, V7
	548 Move V2, V16
	549 Move [X21+68], S3
	550 Move [X21+76], S4
	551 Move [X21+76], S5
	552 Call Quaternion.LookRotation, X0, X1
	553 Move V11, V3
	554 Move S15, [X31+8]
	555 Move S3, [X31+12]
	556 Move [X21+56], S1
	557 Move [X21+64], S2
	558 Move [X21+64], S11
	559 Move [X21+40], S3
	560 Move [X21+48], S12
	561 Move [X21+48], S15
	562 Move [X21+56], S0
	563 Move W8, [X20+524]
	564 Compare W8, 0
	565 JumpIfEqual {621}
	566 Move W21, [X21+36]
	567 Move V8, V0
	568 Move V9, V1
	569 Move V10, V2
	570 NotImplemented "Instruction CMP not yet implemented."
	571 Move X0, X20
	572 Move X1, X31
	573 Call XRBaseInteractable.get_interactorsSelecting, X0
	574 Compare X0, 0
	575 JumpIfEqual {650}
	576 Move X2, [X23]
	577 NotImplemented "Instruction CMP not yet implemented."
	578 NotImplemented "Instruction CSET not yet implemented."
	579 Call List`1<Object>.get_Item, X0, X1
	580 Move X8, [X20]
	581 Move X1, X0
	582 Move X0, X20
	583 Move X9, [X8+1448]
	584 Move X2, [X8+1456]
	585 NotImplemented "Instruction BLR not yet implemented."
	586 Move X21, X0
	587 Move X0, X20
	588 Move X1, X31
	589 Call Component.get_transform, X0
	590 Add X8, X31, 32
	591 Move X1, X31
	592 Call TransformExtensions.GetWorldPose, X0
	593 Compare X21, 0
	594 JumpIfEqual {650}
	595 Move S12, [X31+32]
	596 Move S13, [X31+36]
	597 Move V14, [X31+40]
	598 Move X0, X21
	599 Move X1, X31
	600 Call Transform.get_position, X0
	601 Subtract S0, S12, S0
	602 Subtract S1, S13, S1
	603 Subtract S2, S14, S2
	604 Move X0, X21
	605 Move X1, X31
	606 Call Transform.InverseTransformDirection, X0, X1
	607 Move V4, V0
	608 Move V5, V1
	609 Move V6, V2
	610 Move V0, V8
	611 Move V1, V9
	612 Move V2, V10
	613 Move V3, V11
	614 Move X0, X31
	615 Call Quaternion.op_Multiply, X0, X1
	616 Move S3, [X31+12]
	617 Move S12, [X31+16]
	618 Add S15, S15, S2
	619 Add S3, S3, S0
	620 Add S12, S12, S1
	621 Move [X19], S3
	622 Move [X19+8], S12
	623 Move [X19+8], S15
	624 Move [X19], S3
	625 Move [X19+8], S12
	626 Move [X19+8], S15
	627 Move [X19+12], S8
	628 Move [X19+20], S9
	629 Move [X19+20], S10
	630 Move [X19+28], S11
	631 Move X20, [X31+256]
	632 Move X19, [X31+264]
	633 Move X22, [X31+240]
	634 Move X21, [X31+248]
	635 Move X24, [X31+224]
	636 Move X23, [X31+232]
	637 Move X30, [X31+208]
	638 Move X25, [X31+216]
	639 Move X29, [X31+192]
	640 Move D9, [X31+176]
	641 Move D8, [X31+184]
	642 Move D11, [X31+160]
	643 Move D10, [X31+168]
	644 Move D13, [X31+144]
	645 Move D12, [X31+152]
	646 Move D15, [X31+128]
	647 Move D14, [X31+136]
	648 Add X31, X31, 272
	649 Return 
	650 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03BAAFC4 MOVZ W8, 0x1
	0x03BAAFC8 STRB W8, [X20 + 0x793]
	0x03BAAFCC ADRP X8, 0x54A000
	0x03BAAFD0 LDR X8, [X8 + 0x5A8]

ISIL:
	001 Move W8, 2
	002 Move X1, X31
	003 Move [X0+36], W8
	004 Call MonoBehaviour..ctor, X0
	005 Return 

