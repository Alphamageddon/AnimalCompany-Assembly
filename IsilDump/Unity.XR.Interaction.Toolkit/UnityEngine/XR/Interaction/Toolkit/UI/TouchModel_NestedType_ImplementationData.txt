Type: UnityEngine.XR.Interaction.Toolkit.UI.TouchModel/ImplementationData

Method: System.Collections.Generic.List`1<UnityEngine.GameObject> get_hoverTargets()

Disassembly:
	0x03B9BA10 MOVI V0.2D, 0x0
	0x03B9BA14 STR X31, [X31 + 0xA0]

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Void set_hoverTargets(System.Collections.Generic.List`1<UnityEngine.GameObject> value)

Disassembly:
	0x03B9BA18 STR V0, [X22 + 0x1]
	0x03B9BA1C STR V0, [X31 + 0x8]

ISIL:
	001 Move [X0], X1
	002 Return 

Method: UnityEngine.GameObject get_pointerTarget()

Disassembly:
	0x03B9BA20 LDR W8, [X0 + 0xE0]
	0x03B9BA24 CBNZ W8, 0x3B9BA30

ISIL:
	001 Move X0, [X0+8]
	002 Return X0

Method: System.Void set_pointerTarget(UnityEngine.GameObject value)

Disassembly:
	0x03B9BA28 BL 0x1C16DFC
	0x03B9BA2C LDR X0, [X21]

ISIL:
	001 Move [X0+8], X1
	002 Return 

Method: System.Boolean get_isDragging()

Disassembly:
	0x03B9BA30 LDR X8, [X0 + 0xB8]
	0x03B9BA34 LDR X0, [X8 + 0x20]

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_isDragging(System.Boolean value)

Disassembly:
	0x03B9BA38 CBZ X0, 0x3B9BB9C
	0x03B9BA3C ADRP X8, 0x5C1000
	0x03B9BA40 LDR X8, [X8 + 0x980]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.Single get_pressedTime()

Disassembly:
	0x03B9BA44 ADRP X23, 0x5C1000
	0x03B9BA48 ADRP X24, 0x5C1000

ISIL:
	001 Move V0, [X0+20]
	002 Return V0

Method: System.Void set_pressedTime(System.Single value)

Disassembly:
	0x03B9BA4C ADRP X21, 0x5C1000
	0x03B9BA50 LDR X1, [X8]

ISIL:
	001 Move [X0+20], S0
	002 Return 

Method: UnityEngine.Vector2 get_pressedPosition()

Disassembly:
	0x03B9BA54 LDR X23, [X23 + 0x990]
	0x03B9BA58 LDR X24, [X24 + 0x938]

ISIL:
	001 Move S0, [X0+24]
	002 Move S1, [X0+28]
	003 Return X0

Method: System.Void set_pressedPosition(UnityEngine.Vector2 value)

Disassembly:
	0x03B9BA5C LDR X21, [X21 + 0x988]
	0x03B9BA60 ADD X8, X31, 0x40

ISIL:
	001 Move [X0+24], S0
	002 Move [X0+32], S1
	003 Return 

Method: UnityEngine.EventSystems.RaycastResult get_pressedRaycast()

Disassembly:
	0x03B9BA64 BL 0x2AA54BC
	0x03B9BA68 LDP V0, V1, [X31 + 0x40]
	0x03B9BA6C LDR X8, [X31 + 0x60]
	0x03B9BA70 STR V0, [X31 + 0x8]

ISIL:
	001 Add X1, X0, 32
	002 Move W2, 80
	003 Move X0, X8
	004 Call 0x3EB2AC0
	005 Return X0

Method: System.Void set_pressedRaycast(UnityEngine.EventSystems.RaycastResult value)

Disassembly:
	0x03B9BA74 STR V1, [X22 + 0x1]
	0x03B9BA78 STR X8, [X31 + 0xA0]
	0x03B9BA7C LDR X1, [X23]
	0x03B9BA80 ADD X0, X31, 0x80
	0x03B9BA84 BL 0x2C0A728
	0x03B9BA88 TBZ X0, 0x0, 0x3B9BB04

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X0, 32
	003 Move W2, 80
	004 Call 0x3EB2B30
	005 Move X30, [X31+16]
	006 Return 

Method: UnityEngine.GameObject get_pressedGameObject()

Disassembly:
	0x03B9BA8C LDR X0, [X31 + 0x98]
	0x03B9BA90 CBZ X0, 0x3B9BB98

ISIL:
	001 Move X0, [X0+112]
	002 Return X0

Method: System.Void set_pressedGameObject(UnityEngine.GameObject value)

Disassembly:
	0x03B9BA94 LDR X22, [X31 + 0x90]
	0x03B9BA98 LDR X2, [X24]

ISIL:
	001 Move [X0+112], X1
	002 Return 

Method: UnityEngine.GameObject get_pressedGameObjectRaw()

Disassembly:
	0x03B9BA9C MOV X1, X20
	0x03B9BAA0 BL 0x2DBE4B0

ISIL:
	001 Move X0, [X0+120]
	002 Return X0

Method: System.Void set_pressedGameObjectRaw(UnityEngine.GameObject value)

Disassembly:
	0x03B9BAA4 TBZ X0, 0x0, 0x3B9BA7C
	0x03B9BAA8 CBZ X22, 0x3B9BBA4

ISIL:
	001 Move [X0+120], X1
	002 Return 

Method: UnityEngine.GameObject get_draggedGameObject()

Disassembly:
	0x03B9BAAC LDR X8, [X22 + 0x60]
	0x03B9BAB0 CBZ X8, 0x3B9BBA0

ISIL:
	001 Move X0, [X0+128]
	002 Return X0

Method: System.Void set_draggedGameObject(UnityEngine.GameObject value)

Disassembly:
	0x03B9BAB4 LDR X20, [X8 + 0x18]
	0x03B9BAB8 CBZ X20, 0x3B9BBA0

ISIL:
	001 Move [X0+128], X1
	002 Return 

Method: System.Void Reset()

Disassembly:
	0x03B9B630 LDR W8, [X20 + 0x18]
	0x03B9B634 ADD W25, W25, 0x1
	0x03B9B638 CMP W25, W8
	0x03B9B63C B.LT 0x3B9B5D4
	0x03B9B640 B 0x3B9B658
	0x03B9B644 STR W25, [X22 + 0x188]
	0x03B9B648 B 0x3B9B658
	0x03B9B64C MOV X0, X19
	0x03B9B650 MOV X1, X20
	0x03B9B654 BL 0x3B9B868
	0x03B9B658 ADD X31, X31, 0x1E0
	0x03B9B65C LDP X20, X19, [X31 + 0x70]
	0x03B9B660 LDP X22, X21, [X31 + 0x60]
	0x03B9B664 LDP X24, X23, [X31 + 0x50]
	0x03B9B668 LDP X26, X25, [X31 + 0x40]
	0x03B9B66C LDP X28, X27, [X31 + 0x30]
	0x03B9B670 LDP X29, X30, [X31 + 0x20]
	0x03B9B674 LDP D9, D8, [X31 + 0x10]
	0x03B9B678 LDR V10, [X31], #0x80
	0x03B9B67C RET
	0x03B9B680 ADRP X8, 0x5C1000
	0x03B9B684 LDR X8, [X8 + 0x910]
	0x03B9B688 MOV X1, X20
	0x03B9B68C LDR X2, [X8]
	0x03B9B690 BL 0x2AA64F8
	0x03B9B694 B 0x3B9B658
	0x03B9B698 BL 0x1C16F20
	0x03B9B69C SUB X31, X31, 0x50
	0x03B9B6A0 STP X30, X23, [X31 + 0x20]
	0x03B9B6A4 STP X22, X21, [X31 + 0x30]
	0x03B9B6A8 STP X20, X19, [X31 + 0x40]
	0x03B9B6AC ADRP X21, 0x847000
	0x03B9B6B0 ADRP X20, 0x5C0000
	0x03B9B6B4 LDRB W8, [X21 + 0xC0A]
	0x03B9B6B8 LDR X20, [X20 + 0x1C8]
	0x03B9B6BC MOV X19, X0
	0x03B9B6C0 TBNZ X8, 0x0, 0x3B9B720
	0x03B9B6C4 ADRP X0, 0x5C1000
	0x03B9B6C8 LDR X0, [X0 + 0x950]
	0x03B9B6CC BL 0x1C16CF4
	0x03B9B6D0 ADRP X0, 0x5C1000
	0x03B9B6D4 LDR X0, [X0 + 0x958]
	0x03B9B6D8 BL 0x1C16CF4
	0x03B9B6DC ADRP X0, 0x5C1000
	0x03B9B6E0 LDR X0, [X0 + 0x960]
	0x03B9B6E4 BL 0x1C16CF4
	0x03B9B6E8 ADRP X0, 0x5C1000
	0x03B9B6EC LDR X0, [X0 + 0x968]
	0x03B9B6F0 BL 0x1C16CF4
	0x03B9B6F4 ADRP X0, 0x5C1000
	0x03B9B6F8 LDR X0, [X0 + 0x938]
	0x03B9B6FC BL 0x1C16CF4
	0x03B9B700 ADRP X0, 0x5C0000
	0x03B9B704 LDR X0, [X0 + 0x1C8]
	0x03B9B708 BL 0x1C16CF4
	0x03B9B70C ADRP X0, 0x5C1000
	0x03B9B710 LDR X0, [X0 + 0x970]
	0x03B9B714 BL 0x1C16CF4
	0x03B9B718 MOVZ W8, 0x1
	0x03B9B71C STRB W8, [X21 + 0xC0A]
	0x03B9B720 LDR X0, [X20]
	0x03B9B724 STP X31, X31, [X31 + 0x8]
	0x03B9B728 STR X31, [X31 + 0x18]
	0x03B9B72C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x848000
	005 Move W8, [X20+3077]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0x5AF000
	012 Move X0, [X0+1032]
	013 Call 0x1C17CF4
	014 Move X0, 0x55F000
	015 Move X0, [X0+1360]
	016 Call 0x1C17CF4
	017 Move X0, 0x55F000
	018 Move X0, [X0+1352]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3077], W8
	022 Move [X19+16], W31
	023 Move [X19+20], W31
	024 Move X20, 0x83F000
	025 Move W8, [X20+1935]
	026 Compare W8, 0
	027 JumpIfNotEqual {33}
	028 Move X0, 0x561000
	029 Move X0, [X0+3848]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+1935], W8
	033 Move X8, 0x561000
	034 Move X8, [X8+3848]
	035 NotImplemented "Instruction MOVI not yet implemented."
	036 Move X8, [X8]
	037 Move X9, [X8+184]
	038 Move X8, [X19]
	039 Move V1, [X9]
	040 Move [X19+32], V0
	041 Move [X19+40], V0
	042 Move [X19+64], V0
	043 Move [X19+72], V0
	044 Move [X19+96], V0
	045 Move [X19+104], V0
	046 Move [X19+24], D1
	047 Move [X19+128], X31
	048 Compare X8, 0
	049 JumpIfEqual {64}
	050 Move W2, [X8+24]
	051 Move W9, [X8+28]
	052 Add W9, W9, 1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move [X8+24], W31
	055 Move [X8+28], W9
	056 Move X0, [X8+16]
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move W1, W31
	060 Move X3, X31
	061 Move X30, [X31+32]
	062 Call Array.Clear, X0, X1, X2
	063 Return 
	064 Move X8, 0x55F000
	065 Move X8, [X8+1352]
	066 Move X0, [X8]
	067 Call 0x1C17F10
	068 Move X8, 0x55F000
	069 Move X8, [X8+1360]
	070 Move X20, X0
	071 Move X1, [X8]
	072 Call List`1<Object>..ctor, X0
	073 Move [X19], X20
	074 Move X20, [X31+16]
	075 Move X19, [X31+24]
	076 Move X30, [X31+32]
	077 Return 

