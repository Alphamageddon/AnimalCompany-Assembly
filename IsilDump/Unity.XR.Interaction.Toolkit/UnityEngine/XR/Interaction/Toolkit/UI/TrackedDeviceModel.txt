Type: UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel

Method: UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel/ImplementationData get_implementationData()

Disassembly:
	0x03B9FD0C MOV X2, X19
	0x03B9FD10 LDP X20, X19, [X31 + 0x20]
	0x03B9FD14 LDP X22, X21, [X31 + 0x10]
	0x03B9FD18 LDR X30, [X31], #0x30

ISIL:
	001 Move X1, X0
	002 Move W2, 160
	003 Move X0, X8
	004 Call 0x3EB2AC0
	005 Return X0

Method: System.Int32 get_pointerId()

Disassembly:
	0x03B9FD1C B 0x3B9FD20
	0x03B9FD20 STP D13, D12, [X31 - 0x80]!

ISIL:
	001 Move W0, [X0+160]
	002 Return X0

Method: System.Boolean get_select()

Disassembly:
	0x03B9FD24 STP D11, D10, [X31 + 0x10]
	0x03B9FD28 STP D9, D8, [X31 + 0x20]

ISIL:
	001 Move W0, [X0+164]
	002 Return X0

Method: System.Void set_select(System.Boolean value)

Disassembly:
	0x03B9FD2C STR X30, [X31 + 0x30]
	0x03B9FD30 STP X26, X25, [X31 + 0x40]
	0x03B9FD34 STP X24, X23, [X31 + 0x50]
	0x03B9FD38 STP X22, X21, [X31 + 0x60]
	0x03B9FD3C STP X20, X19, [X31 + 0x70]
	0x03B9FD40 ADRP X23, 0x843000
	0x03B9FD44 ADRP X22, 0x554000
	0x03B9FD48 LDRB W8, [X23 + 0xC36]
	0x03B9FD4C LDR X22, [X22 + 0x598]
	0x03B9FD50 MOV X21, X2
	0x03B9FD54 MOV X20, X1
	0x03B9FD58 MOV X19, X0
	0x03B9FD5C TBNZ X8, 0x0, 0x3B9FDA4
	0x03B9FD60 ADRP X0, 0x554000
	0x03B9FD64 LDR X0, [X0 + 0xA28]
	0x03B9FD68 BL 0x1C16CF4
	0x03B9FD6C ADRP X0, 0x558000
	0x03B9FD70 LDR X0, [X0 + 0x978]
	0x03B9FD74 BL 0x1C16CF4
	0x03B9FD78 ADRP X0, 0x558000
	0x03B9FD7C LDR X0, [X0 + 0x980]
	0x03B9FD80 BL 0x1C16CF4
	0x03B9FD84 ADRP X0, 0x554000
	0x03B9FD88 LDR X0, [X0 + 0x598]
	0x03B9FD8C BL 0x1C16CF4
	0x03B9FD90 ADRP X0, 0x5BD000
	0x03B9FD94 LDR X0, [X0 + 0xB40]
	0x03B9FD98 BL 0x1C16CF4
	0x03B9FD9C MOVZ W8, 0x1
	0x03B9FDA0 STRB W8, [X23 + 0xC36]
	0x03B9FDA4 LDR X8, [X19]
	0x03B9FDA8 MOV X0, X19
	0x03B9FDAC LDR X9, [X8 + 0x258]
	0x03B9FDB0 LDR X1, [X8 + 0x260]
	0x03B9FDB4 BLR X9
	0x03B9FDB8 LDR X8, [X22]
	0x03B9FDBC MOV X22, X0
	0x03B9FDC0 LDR W9, [X8 + 0xE0]
	0x03B9FDC4 CBNZ W9, 0x3B9FDD0
	0x03B9FDC8 MOV X0, X8
	0x03B9FDCC BL 0x1C16DFC
	0x03B9FDD0 MOV X0, X22
	0x03B9FDD4 MOV X1, X31
	0x03B9FDD8 MOV X2, X31
	0x03B9FDDC BL 0x3C3883C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x844000
	007 Move W8, [X22+3105]
	008 Move W20, W1
	009 Move X19, X0
	010 And W21, W1, 1
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x5BD000
	016 Move X0, [X0+600]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+3105], W8
	020 Move W8, [X19+164]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move [X19+164], W21
	023 Move X21, 0x5BD000
	024 Move X21, [X21+600]
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfEqual {33}
	029 Move W21, [X19+168]
	030 And W31, W20, 1
	031 Move W8, 1
	032 NotImplemented "Instruction CINC not yet implemented."
	033 Call 0x1C17DFC
	034 Move X0, [X21]
	035 Move W21, [X19+168]
	036 And W31, W20, 1
	037 Move W9, 1
	038 Move W8, [X0+224]
	039 NotImplemented "Instruction CINC not yet implemented."
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Or W8, W21, W20
	044 Move W9, 1
	045 Move [X19+168], W8
	046 Move [X19+172], W9
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Return 

Method: UnityEngine.XR.Interaction.Toolkit.UI.ButtonDeltaState get_selectDelta()

Disassembly:
	0x03B9FDE0 TBZ X0, 0x0, 0x3B9FE28
	0x03B9FDE4 LDRB W8, [X19 + 0x40]

ISIL:
	001 Move W0, [X0+168]
	002 Return X0

Method: System.Void set_selectDelta(UnityEngine.XR.Interaction.Toolkit.UI.ButtonDeltaState value)

Disassembly:
	0x03B9FDE8 CBNZ W8, 0x3B9FEFC
	0x03B9FDEC ADRP X8, 0x554000

ISIL:
	001 Move [X0+168], W1
	002 Return 

Method: System.Boolean get_changedThisFrame()

Disassembly:
	0x03B9FDF0 LDR X8, [X8 + 0xA28]
	0x03B9FDF4 LDR X0, [X8]

ISIL:
	001 Move W0, [X0+172]
	002 Return X0

Method: System.Void set_changedThisFrame(System.Boolean value)

Disassembly:
	0x03B9FDF8 LDR W8, [X0 + 0xE0]
	0x03B9FDFC CBNZ W8, 0x3B9FE04
	0x03B9FE00 BL 0x1C16DFC

ISIL:
	001 And W8, W1, 1
	002 Move [X0+172], W8
	003 Return 

Method: UnityEngine.Vector3 get_position()

Disassembly:
	0x03B9D860 B.NE 0x3B9D894
	0x03B9D864 MOV X0, X20
	0x03B9D868 BL 0x3EB1AD0
	0x03B9D86C LDR X19, [X0]
	0x03B9D870 BL 0x3EB1AE0
	0x03B9D874 ADRP X8, 0x5BF000
	0x03B9D878 LDR X8, [X8 + 0xAA8]
	0x03B9D87C ADD X0, X31, 0x30
	0x03B9D880 LDR X1, [X8]
	0x03B9D884 BL 0x2BE3198
	0x03B9D888 CBZ X19, 0x3B9D79C
	0x03B9D88C MOV X0, X19
	0x03B9D890 BL 0x1C16F18
	0x03B9D894 MOV X19, X31
	0x03B9D898 B 0x3B9D8A0
	0x03B9D89C MOV X20, X0
	0x03B9D8A0 ADRP X8, 0x5BF000
	0x03B9D8A4 LDR X8, [X8 + 0xAA8]
	0x03B9D8A8 LDR X1, [X8]
	0x03B9D8AC ADD X0, X31, 0x30
	0x03B9D8B0 BL 0x2BE3198
	0x03B9D8B4 CBNZ X19, 0x3B9D8C0
	0x03B9D8B8 MOV X0, X20
	0x03B9D8BC BL 0x1D2C690
	0x03B9D8C0 MOV X0, X19
	0x03B9D8C4 BL 0x1C16F18
	0x03B9D8C8 BL 0x1990590
	0x03B9D8CC SUB X31, X31, 0x110
	0x03B9D8D0 STR D14, [X31 + 0x70]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x846000
	006 Move X21, 0x5BF000
	007 Move W8, [X20+3106]
	008 Move X21, [X21+600]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5BF000
	015 Move X0, [X0+600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3106], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X8, [X19+192]
	025 Compare X8, 0
	026 JumpIfEqual {31}
	027 Move X9, [X8+24]
	028 Move X0, [X8+64]
	029 Move X1, [X8+40]
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Move S0, [X19+176]
	032 Move S1, [X19+180]
	033 Move V2, [X19+184]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return X0

Method: System.Void set_position(UnityEngine.Vector3 value)

Disassembly:
	0x03B9FE04 ADRP X8, 0x5BD000
	0x03B9FE08 LDR X8, [X8 + 0xB40]
	0x03B9FE0C MOV X1, X19
	0x03B9FE10 MOV X2, X31
	0x03B9FE14 LDR X0, [X8]
	0x03B9FE18 BL 0x3C06B0C
	0x03B9FE1C MOVZ W8, 0x1
	0x03B9FE20 STRB W8, [X19 + 0x40]
	0x03B9FE24 B 0x3B9FEFC
	0x03B9FE28 CBZ X20, 0x3B9FF20
	0x03B9FE2C LDR W0, [X20 + 0x18C]
	0x03B9FE30 LDR X23, [X20 + 0x180]
	0x03B9FE34 MOV X1, X31
	0x03B9FE38 BL 0x3C35CB8
	0x03B9FE3C LDR W8, [X19 + 0x2C]
	0x03B9FE40 MOV W24, W0
	0x03B9FE44 MOV X1, X31
	0x03B9FE48 MOV X0, X8
	0x03B9FE4C BL 0x3C35CB8
	0x03B9FE50 CBZ X23, 0x3B9FF20
	0x03B9FE54 LDR W8, [X23 + 0x18]
	0x03B9FE58 CMP W8, 0x2
	0x03B9FE5C B.LT 0x3B9FEFC
	0x03B9FE60 ADRP X26, 0x558000
	0x03B9FE64 LDR X26, [X26 + 0x980]
	0x03B9FE68 AND W24, W0, W24, 0x0
	0x03B9FE6C MOVZ W25, 0x1
	0x03B9FE70 LDR X2, [X26]
	0x03B9FE74 SUB W1, W25, 0x1
	0x03B9FE78 MOV X0, X23
	0x03B9FE7C BL 0x30CBE84
	0x03B9FE80 LDR X2, [X26]
	0x03B9FE84 MOV X0, X23
	0x03B9FE88 MOV W1, W25
	0x03B9FE8C MOV V8.16B, V0.16B
	0x03B9FE90 MOV V9.16B, V1.16B
	0x03B9FE94 MOV V10.16B, V2.16B
	0x03B9FE98 BL 0x30CBE84
	0x03B9FE9C MOV W0, W24
	0x03B9FEA0 MOV X1, X31
	0x03B9FEA4 MOV V11.16B, V0.16B
	0x03B9FEA8 MOV V12.16B, V1.16B
	0x03B9FEAC MOV V13.16B, V2.16B
	0x03B9FEB0 BL 0x3C35CBC
	0x03B9FEB4 AND X1, X0, 0x0

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x844000
	008 Move W8, [X20+3107]
	009 Move V8, V2
	010 Move V9, V1
	011 Move V10, V0
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x5BD000
	018 Move X0, [X0+600]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3107], W8
	022 Move S0, [X19+176]
	023 Move S1, [X19+180]
	024 Move V2, [X19+184]
	025 Move X8, -51073024
	026 Move V3, [X8+3872]
	027 Subtract S0, S0, S10
	028 Subtract S1, S1, S9
	029 Subtract S2, S2, S8
	030 Multiply S0, S0, S0
	031 Multiply S1, S1, S1
	032 Add S0, S0, S1
	033 Multiply S1, S2, S2
	034 Add S0, S1, S0
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 Move X8, 0x5BD000
	037 Move X8, [X8+600]
	038 Move [X19+176], S10
	039 Move [X19+184], S9
	040 Move [X19+184], S8
	041 Move X0, [X8]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move W8, 1
	047 Move [X19+172], W8
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X30, [X31+24]
	051 Move D9, [X31+8]
	052 Move D8, [X31+16]
	053 Move V10, [X31+48]
	054 Return 

Method: System.Func`1<UnityEngine.Vector3> get_positionGetter()

Disassembly:
	0x03B9FEB8 MOV X0, X19
	0x03B9FEBC MOV V0.16B, V8.16B

ISIL:
	001 Move X0, [X0+192]
	002 Return X0

Method: System.Void set_positionGetter(System.Func`1<UnityEngine.Vector3> value)

Disassembly:
	0x03B9FEC0 MOV V1.16B, V9.16B
	0x03B9FEC4 MOV V2.16B, V10.16B

ISIL:
	001 Move [X0+192], X1
	002 Return 

Method: UnityEngine.Quaternion get_orientation()

Disassembly:
	0x03B9FEC8 MOV V3.16B, V11.16B
	0x03B9FECC MOV V4.16B, V12.16B
	0x03B9FED0 MOV V5.16B, V13.16B

ISIL:
	001 Move S0, [X0+200]
	002 Move S1, [X0+204]
	003 Move S2, [X0+208]
	004 Move S3, [X0+212]
	005 Return X0

Method: System.Void set_orientation(UnityEngine.Quaternion value)

Disassembly:
	0x03B9FED4 MOV X2, X22
	0x03B9FED8 MOV X3, X21
	0x03B9FEDC BL 0x3BA0014
	0x03B9FEE0 TBNZ X0, 0x0, 0x3B9FEF8
	0x03B9FEE4 LDR W8, [X23 + 0x18]
	0x03B9FEE8 ADD W25, W25, 0x1
	0x03B9FEEC CMP W25, W8
	0x03B9FEF0 B.LT 0x3B9FE70
	0x03B9FEF4 B 0x3B9FEFC
	0x03B9FEF8 STR W25, [X20 + 0x188]
	0x03B9FEFC LDP X20, X19, [X31 + 0x70]
	0x03B9FF00 LDP X22, X21, [X31 + 0x60]
	0x03B9FF04 LDP X24, X23, [X31 + 0x50]
	0x03B9FF08 LDP X26, X25, [X31 + 0x40]
	0x03B9FF0C LDR X30, [X31 + 0x30]
	0x03B9FF10 LDP D9, D8, [X31 + 0x20]
	0x03B9FF14 LDP D11, D10, [X31 + 0x10]
	0x03B9FF18 LDP D13, D12, [X31], #0x80
	0x03B9FF1C RET
	0x03B9FF20 BL 0x1C16F20
	0x03B9FF24 STP X30, X21, [X31 - 0x20]!
	0x03B9FF28 STP X20, X19, [X31 + 0x10]
	0x03B9FF2C ADRP X20, 0x843000
	0x03B9FF30 LDRB W8, [X20 + 0xC35]
	0x03B9FF34 MOV X19, X0
	0x03B9FF38 TBNZ X8, 0x0, 0x3B9FF5C
	0x03B9FF3C ADRP X0, 0x5BD000
	0x03B9FF40 LDR X0, [X0 + 0xB48]
	0x03B9FF44 BL 0x1C16CF4
	0x03B9FF48 ADRP X0, 0x55A000
	0x03B9FF4C LDR X0, [X0 + 0x488]
	0x03B9FF50 BL 0x1C16CF4
	0x03B9FF54 MOVZ W8, 0x1
	0x03B9FF58 STRB W8, [X20 + 0xC35]
	0x03B9FF5C MOV X0, X19
	0x03B9FF60 MOV X1, X31
	0x03B9FF64 BL 0x3E5AD80
	0x03B9FF68 MOV X0, X19
	0x03B9FF6C MOV X1, X31
	0x03B9FF70 BL 0x3C32ECC
	0x03B9FF74 CBZ X0, 0x3B9FFE0
	0x03B9FF78 ADRP X20, 0x55A000
	0x03B9FF7C ADRP X21, 0x5BD000
	0x03B9FF80 LDR X20, [X20 + 0x488]
	0x03B9FF84 LDR X21, [X21 + 0xB48]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x844000
	009 Move W8, [X20+3108]
	010 Move V8, V3
	011 Move V9, V2
	012 Move V10, V1
	013 Move V11, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x5BD000
	020 Move X0, [X0+600]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3108], W8
	024 Move S0, [X19+200]
	025 Move S1, [X19+204]
	026 Move S2, [X19+208]
	027 Move S3, [X19+212]
	028 Move X8, -51068928
	029 Move V4, [X8+436]
	030 Multiply S0, S11, S0
	031 Multiply S1, S10, S1
	032 Multiply S2, S9, S2
	033 Add S0, S0, S1
	034 Add S0, S2, S0
	035 Multiply S1, S8, S3
	036 Add S0, S1, S0
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 Move X8, 0x5BD000
	039 Move X8, [X8+600]
	040 Move [X19+200], S11
	041 Move [X19+208], S10
	042 Move [X19+208], S9
	043 Move [X19+216], S8
	044 Move X0, [X8]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move W8, 1
	050 Move [X19+172], W8
	051 Move X20, [X31+48]
	052 Move X19, [X31+56]
	053 Move X30, [X31+32]
	054 Move D9, [X31+16]
	055 Move D8, [X31+24]
	056 Move D11, [X31+64]
	057 Move D10, [X31+72]
	058 Return 

Method: System.Collections.Generic.List`1<UnityEngine.Vector3> get_raycastPoints()

Disassembly:
	0x03B9FF88 MOV X1, X31
	0x03B9FF8C BL 0x3C35BD8

ISIL:
	001 Move X0, [X0+216]
	002 Return X0

Method: System.Void set_raycastPoints(System.Collections.Generic.List`1<UnityEngine.Vector3> value)

Disassembly:
	0x03B9FF90 AND X0, X0, 0x0
	0x03B9FF94 MOV X1, X31
	0x03B9FF98 BL 0x3C90E1C
	0x03B9FF9C STR W0, [X19 + 0x68]
	0x03B9FFA0 LDR W1, [X19 + 0x30]
	0x03B9FFA4 LDR X0, [X20]
	0x03B9FFA8 BL 0x1C16D6C
	0x03B9FFAC STR X0, [X19 + 0x48]
	0x03B9FFB0 MOV X20, X0
	0x03B9FFB4 LDR X0, [X21]
	0x03B9FFB8 BL 0x1C16F10
	0x03B9FFBC MOV X1, X31
	0x03B9FFC0 MOV X21, X0
	0x03B9FFC4 BL 0x33BDD8C
	0x03B9FFC8 STR X20, [X21 + 0x18]
	0x03B9FFCC STR W31, [X21 + 0x10]
	0x03B9FFD0 STR X21, [X19 + 0x58]
	0x03B9FFD4 LDP X20, X19, [X31 + 0x10]
	0x03B9FFD8 LDP X30, X21, [X31], #0x20
	0x03B9FFDC RET
	0x03B9FFE0 BL 0x1C16F20
	0x03B9FFE4 STP X30, X21, [X31 - 0x20]!
	0x03B9FFE8 STP X20, X19, [X31 + 0x10]
	0x03B9FFEC MOV X20, X1
	0x03B9FFF0 MOV X1, X31
	0x03B9FFF4 MOV W19, W2
	0x03B9FFF8 MOV X21, X0
	0x03B9FFFC BL 0x33BDD8C
	0x03BA0000 STR X20, [X21 + 0x18]
	0x03BA0004 STR W19, [X21 + 0x10]
	0x03BA0008 LDP X20, X19, [X31 + 0x10]
	0x03BA000C LDP X30, X21, [X31], #0x20
	0x03BA0010 RET
	0x03BA0014 SUB X31, X31, 0x170
	0x03BA0018 STP D15, D14, [X31 + 0xD0]
	0x03BA001C STP D13, D12, [X31 + 0xE0]
	0x03BA0020 STP D11, D10, [X31 + 0xF0]
	0x03BA0024 STP D9, D8, [X31 + 0x100]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x844000
	007 Move X22, 0x5BD000
	008 Move W8, [X21+3109]
	009 Move X22, [X22+600]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x559000
	017 Move X0, [X0+2424]
	018 Call 0x1C17CF4
	019 Move X0, 0x5BD000
	020 Move X0, [X0+600]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3109], W8
	024 Move X0, [X22]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X8, [X20+216]
	030 Compare X8, 0
	031 JumpIfEqual {48}
	032 Compare X19, 0
	033 JumpIfEqual {48}
	034 Move W8, [X8+24]
	035 Move W9, [X19+24]
	036 Move W10, [X20+172]
	037 Move [X20+216], X19
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction CSET not yet implemented."
	042 Or W8, W10, W8
	043 Move [X20+172], W8
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X30, [X31+48]
	047 Return 
	048 Call 0x1C17F20

Method: UnityEngine.EventSystems.RaycastResult get_currentRaycast()

Disassembly:
	0x03BA0028 STP X29, X30, [X31 + 0x110]
	0x03BA002C STP X28, X27, [X31 + 0x120]
	0x03BA0030 STP X26, X25, [X31 + 0x130]
	0x03BA0034 STP X24, X23, [X31 + 0x140]

ISIL:
	001 Add X1, X0, 224
	002 Move W2, 80
	003 Move X0, X8
	004 Call 0x3EB2AC0
	005 Return X0

Method: System.Void set_currentRaycast(UnityEngine.EventSystems.RaycastResult value)

Disassembly:
	0x03BA0038 STP X22, X21, [X31 + 0x150]
	0x03BA003C STP X20, X19, [X31 + 0x160]
	0x03BA0040 ADRP X23, 0x842000
	0x03BA0044 LDRB W8, [X23 + 0xC37]
	0x03BA0048 MOV X19, X3
	0x03BA004C MOV X20, X2

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X0, 224
	003 Move W2, 80
	004 Call 0x3EB2B30
	005 Move X30, [X31+16]
	006 Return 

Method: System.Int32 get_currentRaycastEndpointIndex()

Disassembly:
	0x03BA0050 MOV X22, X1
	0x03BA0054 MOV V8.16B, V5.16B

ISIL:
	001 Move W0, [X0+304]
	002 Return X0

Method: System.Void set_currentRaycastEndpointIndex(System.Int32 value)

Disassembly:
	0x03BA0058 MOV V12.16B, V4.16B
	0x03BA005C MOV V13.16B, V3.16B

ISIL:
	001 Move [X0+304], W1
	002 Return 

Method: UnityEngine.LayerMask get_raycastLayerMask()

Disassembly:
	0x03BA0060 MOV V9.16B, V2.16B
	0x03BA0064 MOV V10.16B, V1.16B

ISIL:
	001 Move W0, [X0+308]
	002 Return X0

Method: System.Void set_raycastLayerMask(UnityEngine.LayerMask value)

Disassembly:
	0x03BA0068 MOV V11.16B, V0.16B
	0x03BA006C MOV X21, X0
	0x03BA0070 TBNZ X8, 0x0, 0x3BA0118
	0x03BA0074 ADRP X0, 0x5BC000
	0x03BA0078 LDR X0, [X0 + 0xB50]
	0x03BA007C BL 0x1C16CF4
	0x03BA0080 ADRP X0, 0x5B7000
	0x03BA0084 LDR X0, [X0 + 0x448]
	0x03BA0088 BL 0x1C16CF4
	0x03BA008C ADRP X0, 0x559000
	0x03BA0090 LDR X0, [X0 + 0x210]
	0x03BA0094 BL 0x1C16CF4
	0x03BA0098 ADRP X0, 0x559000
	0x03BA009C LDR X0, [X0 + 0x218]
	0x03BA00A0 BL 0x1C16CF4
	0x03BA00A4 ADRP X0, 0x559000
	0x03BA00A8 LDR X0, [X0 + 0x220]
	0x03BA00AC BL 0x1C16CF4
	0x03BA00B0 ADRP X0, 0x5BC000
	0x03BA00B4 LDR X0, [X0 + 0xB58]
	0x03BA00B8 BL 0x1C16CF4
	0x03BA00BC ADRP X0, 0x5A9000
	0x03BA00C0 LDR X0, [X0 + 0x358]
	0x03BA00C4 BL 0x1C16CF4
	0x03BA00C8 ADRP X0, 0x559000
	0x03BA00CC LDR X0, [X0 + 0x60]
	0x03BA00D0 BL 0x1C16CF4
	0x03BA00D4 ADRP X0, 0x559000
	0x03BA00D8 LDR X0, [X0 + 0x228]
	0x03BA00DC BL 0x1C16CF4
	0x03BA00E0 ADRP X0, 0x5A9000
	0x03BA00E4 LDR X0, [X0 + 0x330]
	0x03BA00E8 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x843000
	006 Move W8, [X21+3110]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x5BC000
	014 Move X0, [X0+600]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3110], W8
	018 Move W0, [X20+308]
	019 Move X1, X31
	020 Call LayerMask.op_Implicit, X0
	021 Move W21, W0
	022 And X0, X19, 0
	023 Move X1, X31
	024 Call LayerMask.op_Implicit, X0
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X8, 0x5BC000
	027 Move X8, [X8+600]
	028 Move X0, [X8]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move W8, 1
	034 Move [X20+172], W8
	035 Move [X20+308], W19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return 

Method: UnityEngine.Vector2 get_scrollDelta()

Disassembly:
	0x03BA00EC ADRP X0, 0x553000
	0x03BA00F0 LDR X0, [X0 + 0x5A8]
	0x03BA00F4 BL 0x1C16CF4

ISIL:
	001 Move V0, [X0+312]
	002 Move V1, [X0+316]
	003 Return X0

Method: System.Void set_scrollDelta(UnityEngine.Vector2 value)

Disassembly:
	0x03BA00F8 ADRP X0, 0x5BC000
	0x03BA00FC LDR X0, [X0 + 0xB60]
	0x03BA0100 BL 0x1C16CF4
	0x03BA0104 ADRP X0, 0x57C000
	0x03BA0108 LDR X0, [X0 + 0x4F8]
	0x03BA010C BL 0x1C16CF4
	0x03BA0110 MOVZ W8, 0x1
	0x03BA0114 STRB W8, [X23 + 0xC37]
	0x03BA0118 ADRP X23, 0x553000
	0x03BA011C ADRP X24, 0x838000
	0x03BA0120 LDR X23, [X23 + 0x5A8]
	0x03BA0124 LDRB W8, [X24 + 0x85C]
	0x03BA0128 MOVI V0.2D, 0x0
	0x03BA012C STP V0, V0, [X31 + 0x60]
	0x03BA0130 STP V0, V0, [X31 + 0x40]
	0x03BA0134 STUR V0, [X31 + 0x2C]
	0x03BA0138 STP V0, V0, [X31 + 0x10]
	0x03BA013C CBNZ W8, 0x3BA0154
	0x03BA0140 ADRP X0, 0x553000
	0x03BA0144 LDR X0, [X0 + 0x5A8]
	0x03BA0148 BL 0x1C16CF4
	0x03BA014C MOVZ W8, 0x1
	0x03BA0150 STRB W8, [X24 + 0x85C]
	0x03BA0154 LDR X0, [X23]
	0x03BA0158 FSUB S15, S13, S11
	0x03BA015C FSUB S14, S12, S10
	0x03BA0160 FSUB S13, S8, S9
	0x03BA0164 LDR W8, [X0 + 0xE0]
	0x03BA0168 STR S10, [X31 + 0xC]
	0x03BA016C CBNZ W8, 0x3BA0174
	0x03BA0170 BL 0x1C16DFC
	0x03BA0174 ADRP X24, 0x838000
	0x03BA0178 LDRB W8, [X24 + 0x785]
	0x03BA017C FMUL S0, S15, S15
	0x03BA0180 FMUL S1, S14, S14
	0x03BA0184 FADD S0, S0, S1
	0x03BA0188 FMUL S1, S13, S13
	0x03BA018C FADD S8, S1, S0
	0x03BA0190 CBNZ W8, 0x3BA01A8

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x843000
	007 Move W8, [X20+3111]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x5BC000
	016 Move X0, [X0+600]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3111], W8
	020 Move V0, [X19+312]
	021 Move V1, [X19+316]
	022 Move X8, -51077120
	023 Move V2, [X8+3872]
	024 Subtract S0, S0, S9
	025 Subtract S1, S1, S8
	026 Multiply S0, S0, S0
	027 Multiply S1, S1, S1
	028 Add S0, S0, S1
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 Move X8, 0x5BC000
	031 Move X8, [X8+600]
	032 Move [X19+312], S9
	033 Move [X19+316], S8
	034 Move X0, [X8]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move W8, 1
	040 Move [X19+172], W8
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+16]
	044 Move D9, [X31+48]
	045 Move D8, [X31+56]
	046 Return 

Method: System.Single get_pokeDepth()

Disassembly:
	0x03BA0194 ADRP X0, 0x553000
	0x03BA0198 LDR X0, [X0 + 0x5A8]

ISIL:
	001 Move V0, [X0+320]
	002 Return V0

Method: System.Void set_pokeDepth(System.Single value)

Disassembly:
	0x03BA019C BL 0x1C16CF4
	0x03BA01A0 MOVZ W8, 0x1
	0x03BA01A4 STRB W8, [X24 + 0x785]
	0x03BA01A8 LDR X0, [X23]
	0x03BA01AC FSQRT S8, S8
	0x03BA01B0 LDR W8, [X0 + 0xE0]
	0x03BA01B4 CBNZ W8, 0x3BA01BC
	0x03BA01B8 BL 0x1C16DFC
	0x03BA01BC ADRP X8, 0xFFFFFFFFFCF4A000
	0x03BA01C0 LDR V12, [X8 + 0x17C]
	0x03BA01C4 FCMP S8, S12
	0x03BA01C8 B.LE 0x3BA01DC
	0x03BA01CC FDIV S15, S15, S8
	0x03BA01D0 FDIV S14, S14, S8
	0x03BA01D4 FDIV S13, S13, S8
	0x03BA01D8 B 0x3BA0214
	0x03BA01DC ADRP X25, 0x838000
	0x03BA01E0 LDRB W8, [X25 + 0x783]
	0x03BA01E4 CBNZ W8, 0x3BA01FC
	0x03BA01E8 ADRP X0, 0x553000
	0x03BA01EC LDR X0, [X0 + 0x5A0]
	0x03BA01F0 BL 0x1C16CF4
	0x03BA01F4 MOVZ W8, 0x1
	0x03BA01F8 STRB W8, [X25 + 0x783]
	0x03BA01FC ADRP X8, 0x553000
	0x03BA0200 LDR X8, [X8 + 0x5A0]
	0x03BA0204 LDR X8, [X8]
	0x03BA0208 LDR X8, [X8 + 0xB8]
	0x03BA020C LDP S15, S14, [X8]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x843000
	006 Move W8, [X20+3112]
	007 Move V8, V0
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x5BC000
	014 Move X0, [X0+600]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+3112], W8
	018 Move V0, [X19+320]
	019 NotImplemented "Instruction FCMP not yet implemented."
	020 Move [X19+320], S8
	021 Move X8, 0x5BC000
	022 Move X8, [X8+600]
	023 Move X0, [X8]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move W8, 1
	029 Move [X19+172], W8
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+8]
	033 Move V8, [X31+32]
	034 Return 

Method: UnityEngine.XR.Interaction.Toolkit.UI.UIInteractionType get_interactionType()

Disassembly:
	0x03BA0210 LDR V13, [X8 + 0x8]
	0x03BA0214 LDRB W8, [X24 + 0x785]

ISIL:
	001 Move W0, [X0+324]
	002 Return X0

Method: System.Void set_interactionType(UnityEngine.XR.Interaction.Toolkit.UI.UIInteractionType value)

Disassembly:
	0x03BA0218 MOV V10.16B, V9.16B
	0x03BA021C CBNZ W8, 0x3BA0234
	0x03BA0220 ADRP X0, 0x553000
	0x03BA0224 LDR X0, [X0 + 0x5A8]
	0x03BA0228 BL 0x1C16CF4
	0x03BA022C MOVZ W8, 0x1
	0x03BA0230 STRB W8, [X24 + 0x785]
	0x03BA0234 LDR X0, [X23]
	0x03BA0238 FMUL S9, S8, S15
	0x03BA023C FMUL S15, S8, S14
	0x03BA0240 FMUL S14, S8, S13
	0x03BA0244 LDR W8, [X0 + 0xE0]
	0x03BA0248 CBNZ W8, 0x3BA0250
	0x03BA024C BL 0x1C16DFC
	0x03BA0250 FMUL S0, S9, S9
	0x03BA0254 FMUL S1, S15, S15
	0x03BA0258 FADD S0, S0, S1
	0x03BA025C FMUL S1, S14, S14
	0x03BA0260 FADD S0, S1, S0
	0x03BA0264 FSQRT S0, S0
	0x03BA0268 FCMP S0, S12
	0x03BA026C B.LE 0x3BA0280
	0x03BA0270 FDIV S12, S9, S0
	0x03BA0274 FDIV S13, S15, S0
	0x03BA0278 FDIV S14, S14, S0
	0x03BA027C B 0x3BA02B8
	0x03BA0280 ADRP X24, 0x838000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x843000
	006 Move W8, [X21+3113]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x5BC000
	014 Move X0, [X0+600]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3113], W8
	018 Move W8, [X19+324]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X8, 0x5BC000
	021 Move X8, [X8+600]
	022 Move [X19+324], W20
	023 Move X0, [X8]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move W8, 1
	029 Move [X19+172], W8
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 

Method: UnityEngine.GameObject get_selectableObject()

Disassembly:
	0x03BA0284 LDRB W8, [X24 + 0x783]
	0x03BA0288 CBNZ W8, 0x3BA02A0

ISIL:
	001 Move X0, [X0+328]
	002 Return X0

Method: System.Void set_selectableObject(UnityEngine.GameObject value)

Disassembly:
	0x03BA028C ADRP X0, 0x553000
	0x03BA0290 LDR X0, [X0 + 0x5A0]

ISIL:
	001 Move [X0+328], X1
	002 Return 

Method: System.Boolean get_isScrollable()

Disassembly:
	0x03BA0294 BL 0x1C16CF4
	0x03BA0298 MOVZ W8, 0x1

ISIL:
	001 Move W0, [X0+336]
	002 Return X0

Method: System.Void set_isScrollable(System.Boolean value)

Disassembly:
	0x03BA029C STRB W8, [X24 + 0x783]
	0x03BA02A0 ADRP X8, 0x553000
	0x03BA02A4 LDR X8, [X8 + 0x5A0]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+336], W8
	003 Return 

Method: System.Void .ctor(System.Int32 pointerId)

Disassembly:
	0x03BA02A8 LDR X8, [X8]
	0x03BA02AC LDR X8, [X8 + 0xB8]
	0x03BA02B0 LDP S12, S13, [X8]
	0x03BA02B4 LDR V14, [X8 + 0x8]
	0x03BA02B8 LDR X0, [X23]
	0x03BA02BC LDR W23, [X21 + 0x30]
	0x03BA02C0 LDR W8, [X0 + 0xE0]
	0x03BA02C4 CBNZ W8, 0x3BA02CC
	0x03BA02C8 BL 0x1C16DFC
	0x03BA02CC MOVZ W1, 0x1
	0x03BA02D0 MOV W0, W23
	0x03BA02D4 MOV X2, X31
	0x03BA02D8 BL 0x337EDF0
	0x03BA02DC MOV X24, X21
	0x03BA02E0 LDR X23, [X24 + 0x48]!
	0x03BA02E4 STUR W0, [X24 - 0x18]
	0x03BA02E8 CBZ X23, 0x3BA0600
	0x03BA02EC LDR W8, [X23 + 0x18]
	0x03BA02F0 MOV W1, W0
	0x03BA02F4 CMP W0, W8
	0x03BA02F8 B.EQ 0x3BA0314
	0x03BA02FC ADRP X8, 0x5BC000
	0x03BA0300 LDR X8, [X8 + 0xB50]
	0x03BA0304 MOV X0, X24
	0x03BA0308 LDR X2, [X8]
	0x03BA030C BL 0x214329C
	0x03BA0310 LDR X23, [X24]
	0x03BA0314 AND X0, X22, 0x0
	0x03BA0318 MOV X1, X31
	0x03BA031C ADD X24, X21, 0x68
	0x03BA0320 BL 0x3C35CB8
	0x03BA0324 LDR W3, [X21 + 0x28]
	0x03BA0328 LDR V1, [X31 + 0xC]
	0x03BA032C MOV W2, W0
	0x03BA0330 MOV X0, X24
	0x03BA0334 MOV V0.16B, V11.16B
	0x03BA0338 MOV V2.16B, V10.16B
	0x03BA033C MOV V3.16B, V12.16B
	0x03BA0340 MOV V4.16B, V13.16B
	0x03BA0344 MOV V5.16B, V14.16B
	0x03BA0348 MOV X1, X23
	0x03BA034C MOV V6.16B, V8.16B
	0x03BA0350 MOV X4, X31
	0x03BA0354 BL 0x3C8C4DC
	0x03BA0358 LDR X1, [X21 + 0x58]
	0x03BA035C CBZ X1, 0x3BA0600
	0x03BA0360 STR W0, [X1 + 0x10]
	0x03BA0364 LDR X0, [X21 + 0x60]
	0x03BA0368 CBZ X0, 0x3BA0600
	0x03BA036C LDR W8, [X0 + 0x1C]
	0x03BA0370 ADRP X9, 0x5BC000
	0x03BA0374 LDR X9, [X9 + 0xB58]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x843000
	008 Move X21, 0x5BC000
	009 Move W8, [X22+3114]
	010 Move X21, [X21+600]
	011 Move W20, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x580000
	018 Move X0, [X0+1464]
	019 Call 0x1C17CF4
	020 Move X0, 0x558000
	021 Move X0, [X0+960]
	022 Call 0x1C17CF4
	023 Move X0, 0x5BC000
	024 Move X0, [X0+600]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+3114], W8
	028 Move X23, 0x558000
	029 Move X22, 0x580000
	030 Move X23, [X23+960]
	031 Move X22, [X22+1464]
	032 Move W2, 344
	033 Move X0, X19
	034 Move W1, W31
	035 Call 0x3EB2B10
	036 Move [X19+160], W20
	037 Move X0, [X21]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move W8, 0x447A0000
	043 Move [X19+340], W8
	044 Move X0, [X23]
	045 Call 0x1C17F10
	046 Move X1, [X22]
	047 Move X20, X0
	048 Call List`1<Vector3>..ctor, X0
	049 Move W2, 160
	050 Move X0, X19
	051 Move W1, W31
	052 Move [X19+216], X20
	053 Call 0x3EB2B10
	054 Move X0, X19
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move W1, 1
	060 Move X30, [X31+48]
	061 Move X23, [X31+56]

Method: System.Void Reset(System.Boolean resetImplementation = True)

Disassembly:
	0x03BA0378 ADRP X22, 0x57C000
	0x03BA037C ADD W8, W8, 0x1
	0x03BA0380 STP W31, W8, [X0 + 0x18]
	0x03BA0384 LDR X2, [X9]
	0x03BA0388 ADRP X24, 0x5BC000
	0x03BA038C LDR X22, [X22 + 0x4F8]
	0x03BA0390 LDR X24, [X24 + 0xB60]
	0x03BA0394 BL 0x302FE8C
	0x03BA0398 LDR X0, [X22]
	0x03BA039C LDR X22, [X21 + 0x60]
	0x03BA03A0 LDR X23, [X21 + 0x50]
	0x03BA03A4 LDR W8, [X0 + 0xE0]
	0x03BA03A8 CBNZ W8, 0x3BA03B0
	0x03BA03AC BL 0x1C16DFC
	0x03BA03B0 LDR X2, [X24]
	0x03BA03B4 MOV X0, X22
	0x03BA03B8 MOV X1, X23
	0x03BA03BC BL 0x2255EE4
	0x03BA03C0 LDR X0, [X21 + 0x60]
	0x03BA03C4 CBZ X0, 0x3BA0600
	0x03BA03C8 ADRP X8, 0x559000
	0x03BA03CC LDR X8, [X8 + 0x228]
	0x03BA03D0 ADRP X25, 0x559000
	0x03BA03D4 LDR X25, [X25 + 0x218]
	0x03BA03D8 ADRP X26, 0x5B7000
	0x03BA03DC LDR X1, [X8]
	0x03BA03E0 ADRP X29, 0x559000
	0x03BA03E4 LDR X26, [X26 + 0x448]
	0x03BA03E8 LDR X29, [X29 + 0x210]
	0x03BA03EC ADD X8, X31, 0x80
	0x03BA03F0 ADD X22, X31, 0x80
	0x03BA03F4 BL 0x3030AB8
	0x03BA03F8 LDP V0, V1, [X31 + 0x80]
	0x03BA03FC LDP V2, V3, [X31 + 0xA0]
	0x03BA0400 ADD X8, X31, 0x40
	0x03BA0404 MOV W24, W31
	0x03BA0408 ADD X28, X22, 0x18
	0x03BA040C ADD X27, X8, 0x10
	0x03BA0410 STP V0, V1, [X31 + 0x40]
	0x03BA0414 STP V2, V3, [X31 + 0x60]
	0x03BA0418 LDR X1, [X25]
	0x03BA041C ADD X0, X31, 0x40
	0x03BA0420 BL 0x2BC706C
	0x03BA0424 TBZ X0, 0x0, 0x3BA05B8
	0x03BA0428 LDUR V0, [X27 + 0x1C]
	0x03BA042C LDP V2, V1, [X27]
	0x03BA0430 STUR V0, [X31 + 0x2C]
	0x03BA0434 STP V2, V1, [X31 + 0x10]
	0x03BA0438 ADD X0, X31, 0x10
	0x03BA043C MOV X1, X31
	0x03BA0440 BL 0x3C8E5C0
	0x03BA0444 CBZ X0, 0x3BA05F8
	0x03BA0448 MOV X1, X31
	0x03BA044C BL 0x3C32ECC
	0x03BA0450 MOV X22, X0
	0x03BA0454 ADD X0, X31, 0x10
	0x03BA0458 MOV X1, X31
	0x03BA045C BL 0x3C8E66C
	0x03BA0460 CBZ X20, 0x3BA05FC
	0x03BA0464 MOV X0, X20
	0x03BA0468 MOV X1, X31
	0x03BA046C BL 0x3C045DC
	0x03BA0470 LDR X0, [X26]
	0x03BA0474 MOV V10.16B, V0.16B
	0x03BA0478 MOV V9.16B, V1.16B
	0x03BA047C LDR W8, [X0 + 0xE0]
	0x03BA0480 CBNZ W8, 0x3BA0488
	0x03BA0484 BL 0x1C16DFC
	0x03BA0488 FMOV S2, W31
	0x03BA048C MOV V0.16B, V10.16B
	0x03BA0490 MOV V1.16B, V9.16B
	0x03BA0494 MOV X0, X31
	0x03BA0498 BL 0x3C0DA7C
	0x03BA049C MOV V11.16B, V2.16B
	0x03BA04A0 ADD X0, X31, 0x10
	0x03BA04A4 MOV X1, X31
	0x03BA04A8 BL 0x3C8E684
	0x03BA04AC FCMP S0, S8
	0x03BA04B0 B.PL 0x3BA0418
	0x03BA04B4 MOVZ W9, 0x7F800000
	0x03BA04B8 FMOV S0, W9
	0x03BA04BC FCVTZS W8, S11
	0x03BA04C0 FCMP S11, S0
	0x03BA04C4 MOVZ W9, 0x80000000
	0x03BA04C8 CSEL W23, W9, W8, EQ
	0x03BA04CC ADD X0, X31, 0x10
	0x03BA04D0 MOV X1, X31
	0x03BA04D4 BL 0x3C8E684
	0x03BA04D8 CBZ X19, 0x3BA0604
	0x03BA04DC LDR V15, [X19 + 0x18]
	0x03BA04E0 MOV V13.16B, V0.16B
	0x03BA04E4 ADD X0, X31, 0x10
	0x03BA04E8 MOV X1, X31
	0x03BA04EC BL 0x3C8E66C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x843000
	007 Move W8, [X21+3115]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x558000
	015 Move X0, [X0+896]
	016 Call 0x1C17CF4
	017 Move X0, 0x5BC000
	018 Move X0, [X0+600]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3115], W8
	022 Move X21, 0x839000
	023 Move W8, [X21+1939]
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0x555000
	027 Move X0, [X0+1448]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+1939], W8
	031 Move X8, 0x555000
	032 Move X8, [X8+1448]
	033 Move X22, 0x839000
	034 Move X21, 0x5BC000
	035 Move X8, [X8]
	036 Move X8, [X8+184]
	037 Move V0, [X8]
	038 Move [X20+200], V0
	039 Move W8, [X22+1923]
	040 Move X21, [X21+600]
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x554000
	044 Move X0, [X0+1440]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X22+1923], W8
	048 Move X8, 0x554000
	049 Move X8, [X8+1440]
	050 Move X8, [X8]
	051 Move X8, [X8+184]
	052 Move V0, [X8]
	053 Move V1, [X8+8]
	054 Move [X20+176], D0
	055 Move [X20+184], S1
	056 Move X0, [X21]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move X8, [X20+216]
	062 Move [X20+192], X31
	063 Move [X20+172], W31
	064 Move [X20+164], W31
	065 Move [X20+168], W31
	066 Compare X8, 0
	067 JumpIfEqual {72}
	068 Move W9, [X8+28]
	069 Add W9, W9, 1
	070 Move [X8+24], W31
	071 Move [X8+28], W9
	072 Move X0, [X21]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move TEMP, 4
	078 Not TEMP
	079 Move W0, TEMP
	080 Move X1, X31
	081 Move [X20+304], W31
	082 Call LayerMask.op_Implicit, X0
	083 Move [X20+308], W0
	084 Move X21, 0x83A000
	085 Move W8, [X21+1935]
	086 Compare W8, 0
	087 JumpIfNotEqual {93}
	088 Move X0, 0x55C000
	089 Move X0, [X0+3848]
	090 Call 0x1C17CF4
	091 Move W8, 1
	092 Move [X21+1935], W8
	093 Move X8, 0x55C000
	094 Move X8, [X8+3848]
	095 Move X8, [X8]
	096 Move X8, [X8+184]
	097 Move V0, [X8]
	098 Move [X20+312], D0
	099 Move TEMP, X19
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfNotEqual {109}
	103 Move X0, X20
	104 Move X20, [X31+32]
	105 Move X19, [X31+40]
	106 Move X22, [X31+16]
	107 Move X21, [X31+24]
	108 Move X30, [X31+48]
	109 Move X20, [X31+32]
	110 Move X19, [X31+40]
	111 Move X22, [X31+16]
	112 Move X21, [X31+24]
	113 Move X30, [X31+48]
	114 Return 

Method: System.Void OnFrameFinished()

Disassembly:
	0x03BA0648 B 0x3BA0650
	0x03BA064C B 0x3BA0650
	0x03BA0650 MOV X19, X0
	0x03BA0654 CMP W1, 0x1
	0x03BA0658 B.NE 0x3BA0684
	0x03BA065C MOV X0, X19
	0x03BA0660 BL 0x3EB1AD0
	0x03BA0664 LDR X20, [X0]
	0x03BA0668 BL 0x3EB1AE0
	0x03BA066C LDR X1, [X29]
	0x03BA0670 ADD X0, X31, 0x40
	0x03BA0674 BL 0x2BC7068
	0x03BA0678 CBZ X20, 0x3BA05C4
	0x03BA067C MOV X0, X20
	0x03BA0680 BL 0x1C16F18
	0x03BA0684 MOV X20, X31
	0x03BA0688 B 0x3BA0690
	0x03BA068C MOV X19, X0
	0x03BA0690 LDR X1, [X29]
	0x03BA0694 ADD X0, X31, 0x40
	0x03BA0698 BL 0x2BC7068
	0x03BA069C CBNZ X20, 0x3BA06A8
	0x03BA06A0 MOV X0, X19
	0x03BA06A4 BL 0x1D2C690
	0x03BA06A8 MOV X0, X20
	0x03BA06AC BL 0x1C16F18
	0x03BA06B0 BL 0x1990590
	0x03BA06B4 STP X30, X23, [X31 - 0x30]!
	0x03BA06B8 STP X22, X21, [X31 + 0x10]
	0x03BA06BC STP X20, X19, [X31 + 0x20]
	0x03BA06C0 ADRP X23, 0x842000
	0x03BA06C4 ADRP X20, 0x5BC000
	0x03BA06C8 ADRP X22, 0x559000
	0x03BA06CC ADRP X21, 0x5BC000
	0x03BA06D0 LDRB W8, [X23 + 0xC38]
	0x03BA06D4 LDR X20, [X20 + 0xB68]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x843000
	006 Move X21, 0x5BC000
	007 Move W8, [X20+3116]
	008 Move X21, [X21+600]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5BC000
	015 Move X0, [X0+600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3116], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move [X19+168], W31
	025 Move X20, 0x83A000
	026 Move W8, [X20+1935]
	027 Compare W8, 0
	028 JumpIfNotEqual {34}
	029 Move X0, 0x55C000
	030 Move X0, [X0+3848]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+1935], W8
	034 Move X8, 0x55C000
	035 Move X8, [X8+3848]
	036 Move X8, [X8]
	037 Move X8, [X8+184]
	038 Move V0, [X8]
	039 Move [X19+172], W31
	040 Move [X19+312], D0
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return 

Method: System.Void CopyTo(UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceEventData eventData)

Disassembly:
	0x03BA06D8 LDR X22, [X22 + 0x68]
	0x03BA06DC LDR X21, [X21 + 0xB70]
	0x03BA06E0 MOV X19, X0
	0x03BA06E4 TBNZ X8, 0x0, 0x3BA0714
	0x03BA06E8 ADRP X0, 0x5BC000
	0x03BA06EC LDR X0, [X0 + 0xB70]
	0x03BA06F0 BL 0x1C16CF4
	0x03BA06F4 ADRP X0, 0x559000
	0x03BA06F8 LDR X0, [X0 + 0x68]
	0x03BA06FC BL 0x1C16CF4
	0x03BA0700 ADRP X0, 0x5BC000
	0x03BA0704 LDR X0, [X0 + 0xB68]
	0x03BA0708 BL 0x1C16CF4
	0x03BA070C MOVZ W8, 0x1
	0x03BA0710 STRB W8, [X23 + 0xC38]
	0x03BA0714 MOVZ W8, 0x1
	0x03BA0718 MOVN W0, 0x0
	0x03BA071C MOV X1, X31
	0x03BA0720 STR W8, [X19 + 0x28]
	0x03BA0724 BL 0x3C35CBC
	0x03BA0728 MOVZ W8, 0xA
	0x03BA072C STP W0, W8, [X19 + 0x2C]
	0x03BA0730 LDR X0, [X20]
	0x03BA0734 BL 0x1C16F10
	0x03BA0738 MOV X1, X31
	0x03BA073C MOV X20, X0
	0x03BA0740 BL 0x33BDD8C
	0x03BA0744 STR X20, [X19 + 0x50]
	0x03BA0748 LDR X0, [X22]
	0x03BA074C BL 0x1C16F10
	0x03BA0750 LDR X1, [X21]
	0x03BA0754 MOV X20, X0
	0x03BA0758 BL 0x302F34C
	0x03BA075C STR X20, [X19 + 0x60]
	0x03BA0760 MOV X0, X19
	0x03BA0764 LDP X20, X19, [X31 + 0x20]
	0x03BA0768 LDP X22, X21, [X31 + 0x10]
	0x03BA076C MOV X1, X31
	0x03BA0770 LDP X30, X23, [X31], #0x30
	0x03BA0774 B 0x3E4EB28
	0x03BA0778 MOV X1, X31
	0x03BA077C B 0x33BDD8C
	0x03BA0780 LDR W0, [X0 + 0x10]
	0x03BA0784 RET
	0x03BA0788 STR W1, [X0 + 0x10]
	0x03BA078C RET
	0x03BA0790 STR X30, [X31 - 0x10]!
	0x03BA0794 LDR X9, [X0 + 0x18]
	0x03BA0798 CBZ X9, 0x3BA07CC
	0x03BA079C LDRSW X10, [X0 + 0x20]
	0x03BA07A0 LDR W11, [X9 + 0x18]
	0x03BA07A4 CMP W10, W11
	0x03BA07A8 B.CS 0x3BA07D0
	0x03BA07AC MOVZ W11, 0x2C
	0x03BA07B0 MADD X9, X10, X11, X9
	0x03BA07B4 LDUR V0, [X9 + 0x3C]
	0x03BA07B8 LDP V2, V1, [X9 + 0x20]
	0x03BA07BC STUR V0, [X8 + 0x1C]
	0x03BA07C0 STP V2, V1, [X8]
	0x03BA07C4 LDR X30, [X31], #0x10
	0x03BA07C8 RET
	0x03BA07CC BL 0x1C16F20
	0x03BA07D0 BL 0x1C16F28
	0x03BA07D4 SUB X31, X31, 0x80
	0x03BA07D8 STP X30, X21, [X31 + 0x60]
	0x03BA07DC STP X20, X19, [X31 + 0x70]
	0x03BA07E0 ADRP X21, 0x842000
	0x03BA07E4 ADRP X20, 0x57E000
	0x03BA07E8 LDRB W8, [X21 + 0xC39]
	0x03BA07EC LDR X20, [X20 + 0x6F0]
	0x03BA07F0 MOV X19, X0
	0x03BA07F4 TBNZ X8, 0x0, 0x3BA080C
	0x03BA07F8 ADRP X0, 0x57E000
	0x03BA07FC LDR X0, [X0 + 0x6F0]
	0x03BA0800 BL 0x1C16CF4
	0x03BA0804 MOVZ W8, 0x1
	0x03BA0808 STRB W8, [X21 + 0xC39]
	0x03BA080C ADD X8, X31, 0x30
	0x03BA0810 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x843000
	006 Move W8, [X21+3117]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x5BD000
	014 Move X0, [X0+2224]
	015 Call 0x1C17CF4
	016 Move X0, 0x5AA000
	017 Move X0, [X0+1032]
	018 Call 0x1C17CF4
	019 Move X0, 0x5BC000
	020 Move X0, [X0+600]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3117], W8
	024 Compare X20, 0
	025 JumpIfEqual {92}
	026 Move X8, [X19+216]
	027 Move X9, 0x5BC000
	028 Add X21, X20, 260
	029 Move [X20+384], X8
	030 Move W8, [X19+308]
	031 Move X9, [X9+600]
	032 Move [X20+396], W8
	033 Move X0, [X9]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move W8, [X19+160]
	039 Add X1, X19, 56
	040 Add X0, X20, 160
	041 Move W2, 80
	042 Move [X20+256], W8
	043 Move V0, [X19+312]
	044 Move [X21+56], D0
	045 Move X8, [X19+8]
	046 Move [X20+32], X8
	047 Move W8, [X19+16]
	048 Move [X20+325], W8
	049 Move V0, [X19+20]
	050 Move [X20+308], S0
	051 Move V0, [X19+24]
	052 Move [X21], D0
	053 Move V0, [X19+32]
	054 Move [X21+16], D0
	055 Move V0, [X19+40]
	056 Move V1, [X19+48]
	057 Move [X20+400], D0
	058 Move [X20+408], S1
	059 Call 0x3EB2B30
	060 Move X1, [X19+136]
	061 Move X0, X20
	062 Move X2, X31
	063 Call PointerEventData.set_pointerPress, X0, X1
	064 Move V0, [X19+9]
	065 Move X0, [X20+240]
	066 Move [X20+56], V0
	067 Compare X0, 0
	068 JumpIfEqual {92}
	069 Move W2, [X0+24]
	070 Move W8, [X0+28]
	071 Add W8, W8, 1
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move [X0+24], W31
	074 Move [X0+28], W8
	075 Move X0, [X0+16]
	076 Move W1, W31
	077 Move X3, X31
	078 Call Array.Clear, X0, X1, X2
	079 Move X0, [X20+240]
	080 Compare X0, 0
	081 JumpIfEqual {92}
	082 Move X8, 0x5BD000
	083 Move X8, [X8+2224]
	084 Move X1, [X19]
	085 Move X20, [X31+16]
	086 Move X19, [X31+24]
	087 Move X2, [X8]
	088 Move X30, [X31+32]
	089 Move X21, [X31+40]
	090 Call List`1<Object>.AddRange, X0, X1
	091 Return 
	092 Call 0x1C17F20

Method: System.Void CopyFrom(UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceEventData eventData)

Disassembly:
	0x03BA0814 BL 0x3BA0790
	0x03BA0818 LDP V0, V1, [X31 + 0x30]
	0x03BA081C LDUR V2, [X31 + 0x4C]
	0x03BA0820 LDR X0, [X20]
	0x03BA0824 ADD X1, X31, 0x0
	0x03BA0828 STP V0, V1, [X31]
	0x03BA082C STUR V2, [X31 + 0x1C]
	0x03BA0830 BL 0x1C16E04
	0x03BA0834 LDP X20, X19, [X31 + 0x70]
	0x03BA0838 LDP X30, X21, [X31 + 0x60]
	0x03BA083C ADD X31, X31, 0x80
	0x03BA0840 RET
	0x03BA0844 LDR W8, [X0 + 0x20]
	0x03BA0848 LDR W9, [X0 + 0x10]
	0x03BA084C ADD W10, W8, 0x1
	0x03BA0850 CMP W10, W9
	0x03BA0854 CSET W8, LT
	0x03BA0858 STR W10, [X0 + 0x20]
	0x03BA085C MOV W0, W8
	0x03BA0860 RET
	0x03BA0864 MOVN W8, 0x0
	0x03BA0868 STR W8, [X0 + 0x20]
	0x03BA086C RET
	0x03BA0870 RET
	0x03BA0874 MOVN W8, 0x0
	0x03BA0878 STR W8, [X0 + 0x20]
	0x03BA087C RET
	0x03BA0880 MOVN W8, 0x0
	0x03BA0884 STR W8, [X0 + 0x20]
	0x03BA0888 RET
	0x03BA088C SUB X31, X31, 0x20
	0x03BA0890 STP X30, X19, [X31 + 0x10]
	0x03BA0894 MOV X0, X1
	0x03BA0898 MOV X1, X31
	0x03BA089C MOV X19, X2
	0x03BA08A0 BL 0x3C8E684
	0x03BA08A4 MOV X0, X19
	0x03BA08A8 MOV X1, X31
	0x03BA08AC STR S0, [X31 + 0xC]
	0x03BA08B0 BL 0x3C8E684
	0x03BA08B4 ADD X0, X31, 0xC
	0x03BA08B8 MOV X1, X31
	0x03BA08BC BL 0x338FCB8
	0x03BA08C0 LDP X30, X19, [X31 + 0x10]
	0x03BA08C4 ADD X31, X31, 0x20
	0x03BA08C8 RET
	0x03BA08CC LDR V0, [X0 + 0x58]
	0x03BA08D0 RET
	0x03BA08D4 STR S0, [X0 + 0x58]
	0x03BA08D8 RET
	0x03BA08DC LDR V0, [X0 + 0x5C]
	0x03BA08E0 RET
	0x03BA08E4 STR S0, [X0 + 0x5C]
	0x03BA08E8 RET
	0x03BA08EC LDR V0, [X0 + 0x60]
	0x03BA08F0 RET
	0x03BA08F4 STR S0, [X0 + 0x60]
	0x03BA08F8 RET
	0x03BA08FC LDR V0, [X0 + 0x64]
	0x03BA0900 RET
	0x03BA0904 STR S0, [X0 + 0x64]
	0x03BA0908 RET
	0x03BA090C LDR V0, [X0 + 0x68]
	0x03BA0910 RET
	0x03BA0914 STR S0, [X0 + 0x68]
	0x03BA0918 RET
	0x03BA091C LDR V0, [X0 + 0x6C]
	0x03BA0920 RET
	0x03BA0924 STR S0, [X0 + 0x6C]
	0x03BA0928 RET
	0x03BA092C STR X30, [X31 - 0x30]!
	0x03BA0930 STP X22, X21, [X31 + 0x10]
	0x03BA0934 STP X20, X19, [X31 + 0x20]
	0x03BA0938 ADRP X20, 0x842000
	0x03BA093C ADRP X21, 0x553000
	0x03BA0940 LDRB W8, [X20 + 0xC3A]
	0x03BA0944 LDR X21, [X21 + 0x598]
	0x03BA0948 MOV X19, X0
	0x03BA094C TBNZ X8, 0x0, 0x3BA0964
	0x03BA0950 ADRP X0, 0x553000
	0x03BA0954 LDR X0, [X0 + 0x598]
	0x03BA0958 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+80], X30
	003 Move [X31+88], X21
	004 Move [X31+96], X20
	005 Move [X31+104], X19
	006 Move X21, 0x843000
	007 Move W8, [X21+3118]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x5BD000
	015 Move X0, [X0+2224]
	016 Call 0x1C17CF4
	017 Move X0, 0x5AA000
	018 Move X0, [X0+1032]
	019 Call 0x1C17CF4
	020 Move X0, 0x5BC000
	021 Move X0, [X0+600]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3118], W8
	025 Compare X19, 0
	026 JumpIfEqual {94}
	027 Move X8, [X19+32]
	028 Add X1, X19, 160
	029 Add X0, X20, 56
	030 Move W2, 80
	031 Move [X20+8], X8
	032 Move W8, [X19+325]
	033 Move [X20+16], W8
	034 Move V0, [X19+308]
	035 Add X8, X19, 260
	036 Move [X20+20], S0
	037 Move V0, [X8]
	038 Move [X20+24], D0
	039 Move V0, [X8+16]
	040 Move [X20+32], D0
	041 Move V0, [X19+400]
	042 Move V1, [X19+408]
	043 Move [X20+40], D0
	044 Move [X20+48], S1
	045 Call 0x3EB2B30
	046 Move X8, [X19+40]
	047 Move X0, [X20]
	048 Move [X20+136], X8
	049 NotImplemented "Instruction LDUR not yet implemented."
	050 Move [X20+9], V0
	051 Compare X0, 0
	052 JumpIfEqual {94}
	053 Move W2, [X0+24]
	054 Move W8, [X0+28]
	055 Add W8, W8, 1
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move [X0+24], W31
	058 Move [X0+28], W8
	059 Move X0, [X0+16]
	060 Move W1, W31
	061 Move X3, X31
	062 Call Array.Clear, X0, X1, X2
	063 Move X0, [X20]
	064 Compare X0, 0
	065 JumpIfEqual {94}
	066 Move X8, 0x5BD000
	067 Move X8, [X8+2224]
	068 Move X1, [X19+240]
	069 Move X21, 0x5BC000
	070 Move X2, [X8]
	071 Move X21, [X21+600]
	072 Call List`1<Object>.AddRange, X0, X1
	073 Add X1, X19, 80
	074 Add X0, X31, 0
	075 Move W2, 80
	076 Call 0x3EB2AC0
	077 Move X0, [X21]
	078 Move W8, [X0+224]
	079 Compare W8, 0
	080 JumpIfNotEqual {82}
	081 Call 0x1C17DFC
	082 Add X0, X20, 224
	083 Add X1, X31, 0
	084 Move W2, 80
	085 Call 0x3EB2AC0
	086 Move W8, [X19+392]
	087 Move X30, [X31+80]
	088 Move X21, [X31+88]
	089 Move [X20+304], W8
	090 Move X20, [X31+96]
	091 Move X19, [X31+104]
	092 Add X31, X31, 112
	093 Return 
	094 Call 0x1C17F20

Method: UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel get_invalid()

Disassembly:
	0x03BA095C MOVZ W8, 0x1
	0x03BA0960 STRB W8, [X20 + 0xC3A]
	0x03BA0964 MOV X22, X19
	0x03BA0968 LDR X20, [X22 + 0x70]!
	0x03BA096C LDR X0, [X21]
	0x03BA0970 LDR W8, [X0 + 0xE0]
	0x03BA0974 CBNZ W8, 0x3BA097C
	0x03BA0978 BL 0x1C16DFC
	0x03BA097C MOV X0, X20
	0x03BA0980 MOV X1, X31
	0x03BA0984 MOV X2, X31
	0x03BA0988 BL 0x3C354F8
	0x03BA098C TBNZ X0, 0x0, 0x3BA09DC
	0x03BA0990 LDR X20, [X19 + 0x78]!
	0x03BA0994 LDR X0, [X21]
	0x03BA0998 LDR W8, [X0 + 0xE0]
	0x03BA099C CBNZ W8, 0x3BA09A4
	0x03BA09A0 BL 0x1C16DFC
	0x03BA09A4 MOV X0, X20
	0x03BA09A8 MOV X1, X31
	0x03BA09AC MOV X2, X31
	0x03BA09B0 BL 0x3C3883C
	0x03BA09B4 TBNZ X0, 0x0, 0x3BA09CC
	0x03BA09B8 LDR X0, [X19]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x843000
	006 Move X20, 0x5BC000
	007 Move X19, X8
	008 Move W8, [X21+3119]
	009 Move X20, [X20+600]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5BC000
	015 Move X0, [X0+600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3119], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X1, [X0+184]
	026 Move X0, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move W2, 344
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call 0x3EB2AC0
	033 Return X0

Method: System.Single get_maxRaycastDistance()

Disassembly:
	0x03BA09BC CBZ X0, 0x3BA09F0
	0x03BA09C0 MOV X1, X31

ISIL:
	001 Move V0, [X0+340]
	002 Return V0

Method: System.Void set_maxRaycastDistance(System.Single value)

Disassembly:
	0x03BA09C4 BL 0x3C32454
	0x03BA09C8 TBNZ X0, 0x0, 0x3BA09D8

ISIL:
	001 Move [X0+340], S0
	002 Return 

Method: System.Void .cctor()

Disassembly:
	0x03BA09CC MOV X0, X31
	0x03BA09D0 BL 0x3C047F8
	0x03BA09D4 STR X0, [X19]
	0x03BA09D8 MOV X22, X19
	0x03BA09DC LDR X0, [X22]
	0x03BA09E0 LDP X20, X19, [X31 + 0x20]
	0x03BA09E4 LDP X22, X21, [X31 + 0x10]
	0x03BA09E8 LDR X30, [X31], #0x30
	0x03BA09EC RET
	0x03BA09F0 BL 0x1C16F20
	0x03BA09F4 STR X1, [X0 + 0x70]
	0x03BA09F8 RET
	0x03BA09FC STP X30, X21, [X31 - 0x20]!
	0x03BA0A00 STP X20, X19, [X31 + 0x10]
	0x03BA0A04 ADRP X20, 0x842000
	0x03BA0A08 LDRB W8, [X20 + 0xC3B]
	0x03BA0A0C MOV X19, X0
	0x03BA0A10 TBNZ X8, 0x0, 0x3BA0A34
	0x03BA0A14 ADRP X0, 0x57A000
	0x03BA0A18 LDR X0, [X0 + 0xDF8]
	0x03BA0A1C BL 0x1C16CF4
	0x03BA0A20 ADRP X0, 0x553000
	0x03BA0A24 LDR X0, [X0 + 0x598]
	0x03BA0A28 BL 0x1C16CF4
	0x03BA0A2C MOVZ W8, 0x1
	0x03BA0A30 STRB W8, [X20 + 0xC3B]
	0x03BA0A34 LDR X0, [X19 + 0x38]
	0x03BA0A38 CBZ X0, 0x3BA0AFC
	0x03BA0A3C LDR X8, [X0]

ISIL:
	001 Subtract X31, X31, 384
	002 Move [X31+352], X29
	003 Move [X31+360], X30
	004 Move [X31+368], X20
	005 Move [X31+376], X19
	006 Move X20, 0x843000
	007 Move X19, 0x5BC000
	008 Move W8, [X20+3120]
	009 Move X19, [X19+600]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5BC000
	015 Move X0, [X0+600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3120], W8
	019 Add X0, X31, 8
	020 Move W2, 344
	021 Move W1, W31
	022 Call 0x3EB2B10
	023 Add X0, X31, 8
	024 Move TEMP, 0
	025 Not TEMP
	026 Move W1, TEMP
	027 Call TrackedDeviceModel..ctor, X0, X1
	028 Move X8, [X19]
	029 Add X1, X31, 8
	030 Move W2, 344
	031 Move X0, [X8+184]
	032 Call 0x3EB2AC0
	033 Move X20, [X31+368]
	034 Move X19, [X31+376]
	035 Move X29, [X31+352]
	036 Move X30, [X31+360]
	037 Add X31, X31, 384
	038 Return 

