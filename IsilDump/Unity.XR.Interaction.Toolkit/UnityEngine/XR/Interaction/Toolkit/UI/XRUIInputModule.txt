Type: UnityEngine.XR.Interaction.Toolkit.UI.XRUIInputModule

Method: UnityEngine.XR.Interaction.Toolkit.UI.XRUIInputModule/ActiveInputMode get_activeInputMode()

Disassembly:
	0x03BA5FD0 STR X8, [X31 + 0x458]
	0x03BA5FD4 STRH W11, [X31 + 0x2AC]

ISIL:
	001 Move W0, [X0+288]
	002 Return X0

Method: System.Void set_activeInputMode(UnityEngine.XR.Interaction.Toolkit.UI.XRUIInputModule/ActiveInputMode value)

Disassembly:
	0x03BA5FD8 STRB W10, [X31 + 0x2AE]
	0x03BA5FDC BL 0x3EB1AC0

ISIL:
	001 Move [X0+288], W1
	002 Return 

Method: System.Boolean get_enableXRInput()

Disassembly:
	0x03BA5FE0 ADD X0, X31, 0x2B0
	0x03BA5FE4 MOV X1, X31

ISIL:
	001 Move W0, [X0+296]
	002 Return X0

Method: System.Void set_enableXRInput(System.Boolean value)

Disassembly:
	0x03BA5FE8 BL 0x3C845F0
	0x03BA5FEC CMP W27, W0
	0x03BA5FF0 B.NE 0x3BA5FFC

ISIL:
	001 And W8, W1, 1
	002 Move [X0+296], W8
	003 Return 

Method: System.Boolean get_enableMouseInput()

Disassembly:
	0x03BA5FF4 MOV W26, W27
	0x03BA5FF8 B 0x3BA6020

ISIL:
	001 Move W0, [X0+297]
	002 Return X0

Method: System.Void set_enableMouseInput(System.Boolean value)

Disassembly:
	0x03BA5FFC SUB W8, W0, 0x3
	0x03BA6000 MOV W26, W0
	0x03BA6004 CMP W8, 0x2

ISIL:
	001 And W8, W1, 1
	002 Move [X0+297], W8
	003 Return 

Method: System.Boolean get_enableTouchInput()

Disassembly:
	0x03BA6008 B.CS 0x3BA6014
	0x03BA600C ORR W21, W21, 0x2

ISIL:
	001 Move W0, [X0+298]
	002 Return X0

Method: System.Void set_enableTouchInput(System.Boolean value)

Disassembly:
	0x03BA6010 B 0x3BA601C
	0x03BA6014 CBNZ W26, 0x3BA601C
	0x03BA6018 ORR W21, W21, 0x1

ISIL:
	001 And W8, W1, 1
	002 Move [X0+298], W8
	003 Return 

Method: UnityEngine.InputSystem.InputActionReference get_pointAction()

Disassembly:
	0x03BA601C MOVZ W20, 0x1
	0x03BA6020 ADD X0, X31, 0x2B0

ISIL:
	001 Move X0, [X0+304]
	002 Return X0

Method: System.Void set_pointAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BA6024 MOV X1, X31
	0x03BA6028 BL 0x3C845B0
	0x03BA602C FSUB S2, S10, S0
	0x03BA6030 FSUB S3, S11, S1

ISIL:
	001 Add X8, X0, 304
	002 Move X2, X1
	003 Move X1, X8

Method: UnityEngine.InputSystem.InputActionReference get_leftClickAction()

Disassembly:
	0x03BA6184 ADD X0, X31, 0x30
	0x03BA6188 ADD X1, X31, 0x170

ISIL:
	001 Move X0, [X0+312]
	002 Return X0

Method: System.Void set_leftClickAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BA618C MOVZ W2, 0xB0
	0x03BA6190 BL 0x3EB1AC0
	0x03BA6194 CBZ X23, 0x3BA61CC
	0x03BA6198 LDR X24, [X26]

ISIL:
	001 Add X8, X0, 312
	002 Move X2, X1
	003 Move X1, X8
	004 Call XRUIInputModule.SetInputAction, X0, X1, X2
	005 Return 

Method: UnityEngine.InputSystem.InputActionReference get_middleClickAction()

Disassembly:
	0x03BA619C ADD X0, X31, 0x300
	0x03BA61A0 ADD X1, X31, 0x30

ISIL:
	001 Move X0, [X0+320]
	002 Return X0

Method: System.Void set_middleClickAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BA61A4 MOVZ W2, 0xB0
	0x03BA61A8 BL 0x3EB1AC0
	0x03BA61AC ADD X2, X31, 0x300
	0x03BA61B0 MOV X0, X23

ISIL:
	001 Add X8, X0, 320
	002 Move X2, X1
	003 Move X1, X8
	004 Call XRUIInputModule.SetInputAction, X0, X1, X2
	005 Return 

Method: UnityEngine.InputSystem.InputActionReference get_rightClickAction()

Disassembly:
	0x03BA61B4 MOV W1, W21
	0x03BA61B8 MOV X3, X24

ISIL:
	001 Move X0, [X0+328]
	002 Return X0

Method: System.Void set_rightClickAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BA61BC BL 0x31815B0
	0x03BA61C0 LDR X0, [X19 + 0x378]
	0x03BA61C4 ADD W21, W21, 0x1
	0x03BA61C8 CBNZ X0, 0x3BA6134

ISIL:
	001 Add X8, X0, 328
	002 Move X2, X1
	003 Move X1, X8
	004 Call XRUIInputModule.SetInputAction, X0, X1, X2
	005 Return 

Method: UnityEngine.InputSystem.InputActionReference get_scrollWheelAction()

Disassembly:
	0x03BA61CC BL 0x1C16F20
	0x03BA61D0 LDR X8, [X25 + 0x28]

ISIL:
	001 Move X0, [X0+336]
	002 Return X0

Method: System.Void set_scrollWheelAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BA61D4 LDR X9, [X31 + 0x468]
	0x03BA61D8 CMP W20, 0x0
	0x03BA61DC CSET W0, GT
	0x03BA61E0 CMP X8, X9

ISIL:
	001 Add X8, X0, 336
	002 Move X2, X1
	003 Move X1, X8
	004 Call XRUIInputModule.SetInputAction, X0, X1, X2
	005 Return 

Method: UnityEngine.InputSystem.InputActionReference get_navigateAction()

Disassembly:
	0x03BA61E4 B.NE 0x3BA6214
	0x03BA61E8 ADD X31, X31, 0x470

ISIL:
	001 Move X0, [X0+344]
	002 Return X0

Method: System.Void set_navigateAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BA61EC LDP X20, X19, [X31 + 0x80]
	0x03BA61F0 LDP X22, X21, [X31 + 0x70]
	0x03BA61F4 LDP X24, X23, [X31 + 0x60]
	0x03BA61F8 LDP X26, X25, [X31 + 0x50]

ISIL:
	001 Add X8, X0, 344
	002 Move X2, X1
	003 Move X1, X8
	004 Call XRUIInputModule.SetInputAction, X0, X1, X2
	005 Return 

Method: UnityEngine.InputSystem.InputActionReference get_submitAction()

Disassembly:
	0x03BA61FC LDP X28, X27, [X31 + 0x40]
	0x03BA6200 LDP X29, X30, [X31 + 0x30]

ISIL:
	001 Move X0, [X0+352]
	002 Return X0

Method: System.Void set_submitAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BA6204 LDP D9, D8, [X31 + 0x20]
	0x03BA6208 LDP D11, D10, [X31 + 0x10]
	0x03BA620C LDR V12, [X31], #0x90
	0x03BA6210 RET

ISIL:
	001 Add X8, X0, 352
	002 Move X2, X1
	003 Move X1, X8
	004 Call XRUIInputModule.SetInputAction, X0, X1, X2
	005 Return 

Method: UnityEngine.InputSystem.InputActionReference get_cancelAction()

Disassembly:
	0x03BA6214 BL 0x3EB1B20
	0x03BA6218 STP X30, X23, [X31 - 0x30]!

ISIL:
	001 Move X0, [X0+360]
	002 Return X0

Method: System.Void set_cancelAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BA621C STP X22, X21, [X31 + 0x10]
	0x03BA6220 STP X20, X19, [X31 + 0x20]
	0x03BA6224 ADRP X20, 0x83C000
	0x03BA6228 LDRB W8, [X20 + 0xC76]

ISIL:
	001 Add X8, X0, 360
	002 Move X2, X1
	003 Move X1, X8
	004 Call XRUIInputModule.SetInputAction, X0, X1, X2
	005 Return 

Method: System.Boolean get_enableBuiltinActionsAsFallback()

Disassembly:
	0x03BA622C MOV X19, X0
	0x03BA6230 TBNZ X8, 0x0, 0x3BA6260

ISIL:
	001 Move W0, [X0+368]
	002 Return X0

Method: System.Void set_enableBuiltinActionsAsFallback(System.Boolean value)

Disassembly:
	0x03BA6234 ADRP X0, 0x575000
	0x03BA6238 LDR X0, [X0 + 0x3C0]
	0x03BA623C BL 0x1C16CF4
	0x03BA6240 ADRP X0, 0x575000
	0x03BA6244 LDR X0, [X0 + 0x558]
	0x03BA6248 BL 0x1C16CF4
	0x03BA624C ADRP X0, 0x5A3000
	0x03BA6250 LDR X0, [X0 + 0x2F0]
	0x03BA6254 BL 0x1C16CF4
	0x03BA6258 MOVZ W8, 0x1
	0x03BA625C STRB W8, [X20 + 0xC76]
	0x03BA6260 LDR W8, [X19 + 0x120]
	0x03BA6264 CBZ W8, 0x3BA65D8
	0x03BA6268 LDRB W8, [X19 + 0x19C]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 And W8, W1, 1
	005 Move [X0+368], W8
	006 Move TEMP, X1
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {13}
	010 Move X0, X19
	011 Call XRUIInputModule.InputActionReferencesAreSet, X0
	012 Xor W8, W0, 1
	013 Move W8, W31
	014 And W8, W8, 1
	015 Move [X19+412], W8
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return 

Method: System.Boolean get_enableGamepadInput()

Disassembly:
	0x03BA63F4 LDR X0, [X8 + 0x1B8]
	0x03BA63F8 CBZ X0, 0x3BA667C

ISIL:
	001 Move W0, [X0+369]
	002 Return X0

Method: System.Void set_enableGamepadInput(System.Boolean value)

Disassembly:
	0x03BA63FC MOV X1, X31
	0x03BA6400 BL 0x3758A6C
	0x03BA6404 AND W1, W0, 0x1

ISIL:
	001 And W8, W1, 1
	002 Move [X0+369], W8
	003 Return 

Method: System.Boolean get_enableJoystickInput()

Disassembly:
	0x03BA6408 MOV X0, X20
	0x03BA640C MOV X2, X31

ISIL:
	001 Move W0, [X0+370]
	002 Return X0

Method: System.Void set_enableJoystickInput(System.Boolean value)

Disassembly:
	0x03BA6410 BL 0x3B98F94
	0x03BA6414 LDRB W8, [X21 + 0x817]
	0x03BA6418 CBNZ W8, 0x3BA6430

ISIL:
	001 And W8, W1, 1
	002 Move [X0+370], W8
	003 Return 

Method: System.String get_horizontalAxis()

Disassembly:
	0x03BA641C ADRP X0, 0x575000
	0x03BA6420 LDR X0, [X0 + 0x528]

ISIL:
	001 Move X0, [X0+376]
	002 Return X0

Method: System.Void set_horizontalAxis(System.String value)

Disassembly:
	0x03BA6424 BL 0x1C16CF4
	0x03BA6428 MOVZ W8, 0x1

ISIL:
	001 Move [X0+376], X1
	002 Return 

Method: System.String get_verticalAxis()

Disassembly:
	0x03BA642C STRB W8, [X21 + 0x817]
	0x03BA6430 LDR X8, [X22]

ISIL:
	001 Move X0, [X0+384]
	002 Return X0

Method: System.Void set_verticalAxis(System.String value)

Disassembly:
	0x03BA6434 LDR X8, [X8 + 0xB8]
	0x03BA6438 LDR X8, [X8]

ISIL:
	001 Move [X0+384], X1
	002 Return 

Method: System.String get_submitButton()

Disassembly:
	0x03BA643C CBZ X8, 0x3BA667C
	0x03BA6440 LDR X0, [X8 + 0x1B0]

ISIL:
	001 Move X0, [X0+392]
	002 Return X0

Method: System.Void set_submitButton(System.String value)

Disassembly:
	0x03BA6444 CBZ X0, 0x3BA667C
	0x03BA6448 MOV X1, X31

ISIL:
	001 Move [X0+392], X1
	002 Return 

Method: System.String get_cancelButton()

Disassembly:
	0x03BA644C BL 0x3758A6C
	0x03BA6450 B 0x3BA65BC

ISIL:
	001 Move X0, [X0+400]
	002 Return X0

Method: System.Void set_cancelButton(System.String value)

Disassembly:
	0x03BA6454 LDR X0, [X19 + 0x130]
	0x03BA6458 BL 0x3BA6B34

ISIL:
	001 Move [X0+400], X1
	002 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03BA645C TBZ X0, 0x0, 0x3BA64C8
	0x03BA6460 LDR X0, [X19 + 0x130]
	0x03BA6464 CBZ X0, 0x3BA667C
	0x03BA6468 MOV X1, X31
	0x03BA646C BL 0x37451B4
	0x03BA6470 CBZ X0, 0x3BA667C
	0x03BA6474 ADRP X8, 0x575000
	0x03BA6478 LDR X8, [X8 + 0x3C0]
	0x03BA647C ADD X20, X19, 0x1A0
	0x03BA6480 LDR X1, [X8]
	0x03BA6484 BL 0x21F5E68
	0x03BA6488 MOV X0, X20
	0x03BA648C MOV X1, X31
	0x03BA6490 BL 0x3B98E2C
	0x03BA6494 LDR X0, [X19 + 0x130]
	0x03BA6498 CBZ X0, 0x3BA667C
	0x03BA649C MOV X1, X31
	0x03BA64A0 BL 0x37451B4
	0x03BA64A4 CBZ X0, 0x3BA667C
	0x03BA64A8 MOV X1, X31
	0x03BA64AC BL 0x3734B58
	0x03BA64B0 MOV X1, X0
	0x03BA64B4 BL 0x3BA6BD4
	0x03BA64B8 MOV W1, W0
	0x03BA64BC MOV X0, X20
	0x03BA64C0 MOV X2, X31
	0x03BA64C4 BL 0x3B98E08
	0x03BA64C8 LDR X0, [X19 + 0x150]
	0x03BA64CC BL 0x3BA6B34
	0x03BA64D0 TBZ X0, 0x0, 0x3BA6518
	0x03BA64D4 LDR X0, [X19 + 0x150]
	0x03BA64D8 CBZ X0, 0x3BA667C
	0x03BA64DC MOV X1, X31
	0x03BA64E0 BL 0x37451B4
	0x03BA64E4 CBZ X0, 0x3BA667C
	0x03BA64E8 ADRP X8, 0x575000
	0x03BA64EC LDR X8, [X8 + 0x3C0]
	0x03BA64F0 ADD X20, X19, 0x1A0
	0x03BA64F4 LDR X1, [X8]
	0x03BA64F8 BL 0x21F5E68
	0x03BA64FC ADRP X8, 0xFFFFFFFFFCF44000

ISIL:
	001 Subtract X31, X31, 480
	002 Move [X31+448], X29
	003 Move [X31+456], X30
	004 Move [X31+464], X20
	005 Move [X31+472], X19
	006 Move X1, X31
	007 Move X19, X0
	008 Call BaseInputModule.OnEnable, X0
	009 Move W20, [X19+408]
	010 Move W8, 1
	011 Move [X19+288], W8
	012 Add X0, X31, 8
	013 Add W8, W20, 1
	014 Move W2, 440
	015 Move W1, W31
	016 Move [X19+408], W8
	017 Call 0x3EB2B10
	018 Add X0, X31, 8
	019 Move W1, W20
	020 Move X2, X31
	021 Call MouseModel..ctor, X0, X1
	022 Add X0, X19, 416
	023 Add X1, X31, 8
	024 Move W2, 440
	025 Call 0x3EB2AC0
	026 Add X8, X19, 856
	027 NotImplemented "Instruction MOVI not yet implemented."
	028 Move [X8], V0
	029 Move [X8+8], V0
	030 Move W8, [X19+368]
	031 Compare W8, 0
	032 JumpIfEqual {36}
	033 Move X0, X19
	034 Call XRUIInputModule.InputActionReferencesAreSet, X0
	035 Xor W8, W0, 1
	036 Move W9, [X19+288]
	037 And W8, W8, 1
	038 Move [X19+412], W8
	039 Compare W9, 0
	040 JumpIfEqual {43}
	041 Move X0, X19
	042 Call XRUIInputModule.EnableAllActions, X0
	043 Move X20, [X31+464]
	044 Move X19, [X31+472]
	045 Move X29, [X31+448]
	046 Move X30, [X31+456]
	047 Add X31, X31, 480
	048 Return 

Method: System.Void OnDisable()

Disassembly:
	0x03BA654C MOV X2, X31
	0x03BA6550 BL 0x3B98F00
	0x03BA6554 LDR X0, [X19 + 0x148]
	0x03BA6558 BL 0x3BA6B34
	0x03BA655C TBZ X0, 0x0, 0x3BA6590
	0x03BA6560 LDR X0, [X19 + 0x148]
	0x03BA6564 CBZ X0, 0x3BA667C
	0x03BA6568 MOV X1, X31
	0x03BA656C BL 0x37451B4
	0x03BA6570 CBZ X0, 0x3BA667C
	0x03BA6574 MOV X1, X31
	0x03BA6578 ADD X20, X19, 0x1A0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, [X0+416]
	004 Move X19, X0
	005 Call UIInputModule.RemovePointerEventData, X0, X1
	006 Move W8, [X19+288]
	007 Compare W8, 0
	008 JumpIfEqual {11}
	009 Move X0, X19
	010 Call XRUIInputModule.DisableAllActions, X0
	011 Move X0, X19
	012 Move X1, X31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call BaseInputModule.OnDisable, X0
	016 Return 

Method: System.Void RegisterInteractor(UnityEngine.XR.Interaction.Toolkit.UI.IUIInteractor interactor)

Disassembly:
	0x03B9AF18 LDUR X9, [X9 - 0x8]
	0x03B9AF1C CMP X9, X8
	0x03B9AF20 B.EQ 0x3B9AF34
	0x03B9AF24 LDP X20, X19, [X31 + 0x20]
	0x03B9AF28 LDP X22, X21, [X31 + 0x10]
	0x03B9AF2C LDR X30, [X31], #0x30
	0x03B9AF30 RET
	0x03B9AF34 MOV X0, X21
	0x03B9AF38 MOV X1, X20
	0x03B9AF3C MOV X2, X19
	0x03B9AF40 LDP X20, X19, [X31 + 0x20]
	0x03B9AF44 LDP X22, X21, [X31 + 0x10]
	0x03B9AF48 LDR X30, [X31], #0x30
	0x03B9AF4C B 0x3B9AF50
	0x03B9AF50 STR D10, [X31 - 0x80]!
	0x03B9AF54 STP D9, D8, [X31 + 0x10]
	0x03B9AF58 STP X29, X30, [X31 + 0x20]
	0x03B9AF5C STP X28, X27, [X31 + 0x30]
	0x03B9AF60 STP X26, X25, [X31 + 0x40]
	0x03B9AF64 STP X24, X23, [X31 + 0x50]
	0x03B9AF68 STP X22, X21, [X31 + 0x60]
	0x03B9AF6C STP X20, X19, [X31 + 0x70]
	0x03B9AF70 SUB X31, X31, 0x1E0
	0x03B9AF74 ADRP X20, 0x848000
	0x03B9AF78 ADRP X29, 0x559000
	0x03B9AF7C LDRB W8, [X20 + 0xC13]
	0x03B9AF80 LDR X29, [X29 + 0x598]
	0x03B9AF84 MOV X21, X2
	0x03B9AF88 MOV X22, X1
	0x03B9AF8C MOV X19, X0
	0x03B9AF90 TBNZ X8, 0x0, 0x3B9B05C
	0x03B9AF94 ADRP X0, 0x559000
	0x03B9AF98 LDR X0, [X0 + 0xA28]
	0x03B9AF9C BL 0x1C16CF4
	0x03B9AFA0 ADRP X0, 0x5C2000
	0x03B9AFA4 LDR X0, [X0 + 0x910]
	0x03B9AFA8 BL 0x1C16CF4
	0x03B9AFAC ADRP X0, 0x5C2000
	0x03B9AFB0 LDR X0, [X0 + 0x918]
	0x03B9AFB4 BL 0x1C16CF4
	0x03B9AFB8 ADRP X0, 0x5C2000
	0x03B9AFBC LDR X0, [X0 + 0x920]
	0x03B9AFC0 BL 0x1C16CF4
	0x03B9AFC4 ADRP X0, 0x5C2000
	0x03B9AFC8 LDR X0, [X0 + 0x928]
	0x03B9AFCC BL 0x1C16CF4
	0x03B9AFD0 ADRP X0, 0x5C2000
	0x03B9AFD4 LDR X0, [X0 + 0x930]
	0x03B9AFD8 BL 0x1C16CF4
	0x03B9AFDC ADRP X0, 0x5C2000
	0x03B9AFE0 LDR X0, [X0 + 0x938]
	0x03B9AFE4 BL 0x1C16CF4
	0x03B9AFE8 ADRP X0, 0x5C2000
	0x03B9AFEC LDR X0, [X0 + 0x940]
	0x03B9AFF0 BL 0x1C16CF4
	0x03B9AFF4 ADRP X0, 0x55D000
	0x03B9AFF8 LDR X0, [X0 + 0x978]
	0x03B9AFFC BL 0x1C16CF4
	0x03B9B000 ADRP X0, 0x5AE000
	0x03B9B004 LDR X0, [X0 + 0x330]
	0x03B9B008 BL 0x1C16CF4
	0x03B9B00C ADRP X0, 0x55C000
	0x03B9B010 LDR X0, [X0 + 0x980]
	0x03B9B014 BL 0x1C16CF4
	0x03B9B018 ADRP X0, 0x5AE000
	0x03B9B01C LDR X0, [X0 + 0x338]
	0x03B9B020 BL 0x1C16CF4
	0x03B9B024 ADRP X0, 0x558000
	0x03B9B028 LDR X0, [X0 + 0x598]
	0x03B9B02C BL 0x1C16CF4
	0x03B9B030 ADRP X0, 0x5C0000
	0x03B9B034 LDR X0, [X0 + 0x1C8]
	0x03B9B038 BL 0x1C16CF4
	0x03B9B03C ADRP X0, 0x5C0000
	0x03B9B040 LDR X0, [X0 + 0x258]
	0x03B9B044 BL 0x1C16CF4
	0x03B9B048 ADRP X0, 0x5C1000
	0x03B9B04C LDR X0, [X0 + 0x948]
	0x03B9B050 BL 0x1C16CF4
	0x03B9B054 MOVZ W8, 0x1
	0x03B9B058 STRB W8, [X20 + 0xC13]
	0x03B9B05C ADD X0, X31, 0x88
	0x03B9B060 MOVZ W2, 0x158
	0x03B9B064 MOV W1, W31
	0x03B9B068 BL 0x3EB1B10
	0x03B9B06C MOV X0, X19
	0x03B9B070 STR X31, [X31 + 0x1E8]
	0x03B9B074 BL 0x3B9AE18
	0x03B9B078 LDR X8, [X29]
	0x03B9B07C MOV X20, X0
	0x03B9B080 LDR W9, [X8 + 0xE0]
	0x03B9B084 CBNZ W9, 0x3B9B090
	0x03B9B088 MOV X0, X8
	0x03B9B08C BL 0x1C16DFC
	0x03B9B090 MOV X0, X20
	0x03B9B094 MOV X1, X31
	0x03B9B098 MOV X2, X31
	0x03B9B09C BL 0x3C3883C
	0x03B9B0A0 TBNZ X0, 0x0, 0x3B9B658
	0x03B9B0A4 LDR X8, [X19]

ISIL:
	001 Move [X31-64], X29
	002 Move [X31-56], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Subtract X31, X31, 1040
	010 Move X20, 0x849000
	011 Move W8, [X20+3185]
	012 Move X19, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x5C3000
	019 Move X0, [X0+2272]
	020 Call 0x1C17CF4
	021 Move X0, 0x5C3000
	022 Move X0, [X0+2280]
	023 Call 0x1C17CF4
	024 Move X0, 0x5C3000
	025 Move X0, [X0+2288]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+3185], W8
	029 Move X20, [X21+896]
	030 Compare X20, 0
	031 JumpIfEqual {50}
	032 Move X24, 0x5C3000
	033 Move X23, 0x5C3000
	034 Move X24, [X24+2288]
	035 Move X23, [X23+2272]
	036 Move W22, W31
	037 Move W8, [X20+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X2, [X24]
	040 Add X8, X31, 688
	041 Move X0, X20
	042 Move W1, W22
	043 Call List`1<RegisteredInteractor>.get_Item, X0, X1
	044 Move X8, [X31+688]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X20, [X21+896]
	047 Add W22, W22, 1
	048 Compare X20, 0
	049 JumpIfNotEqual {37}
	050 Call 0x1C17F20
	051 Move W22, [X21+408]
	052 Add X0, X31, 688
	053 Move W2, 344
	054 Move W1, W31
	055 Add W8, W22, 1
	056 Move [X21+408], W8
	057 Call 0x3EB2B10
	058 Add X0, X31, 688
	059 Move W1, W22
	060 Call TrackedDeviceModel..ctor, X0, X1
	061 Add X0, X31, 0
	062 Add X1, X31, 688
	063 Move W2, 344
	064 Call 0x3EB2AC0
	065 Move X21, [X23]
	066 Add X0, X31, 344
	067 Add X1, X31, 0
	068 Move W2, 344
	069 Call 0x3EB2AC0
	070 Move W9, [X20+28]
	071 Move X8, [X20+16]
	072 Add W9, W9, 1
	073 Move [X20+28], W9
	074 Compare X8, 0
	075 JumpIfEqual {50}
	076 NotImplemented "Instruction LDRSW not yet implemented."
	077 Move W10, [X8+24]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move W11, 352
	080 NotImplemented "Instruction MADD not yet implemented."
	081 Add W10, W9, 1
	082 Add X0, X8, 40
	083 Add X1, X31, 344
	084 Move W2, 344
	085 Move [X20+24], W10
	086 Move [X8+32], X19
	087 Call 0x3EB2AC0
	088 Move X8, [X21+32]
	089 Add X1, X31, 344
	090 Move W2, 344
	091 Move X8, [X8+192]
	092 Move X21, [X8+112]
	093 Add X8, X31, 688
	094 Add X0, X8, 8
	095 Move [X31+688], X19
	096 Call 0x3EB2AC0
	097 Add X1, X31, 688
	098 Move X0, X20
	099 Move X2, X21
	100 Call List`1<RegisteredInteractor>.AddWithResize, X0, X1
	101 Add X31, X31, 1040
	102 Move X20, [X31+48]
	103 Move X19, [X31+56]
	104 Move X22, [X31+32]
	105 Move X21, [X31+40]
	106 Move X24, [X31+16]
	107 Move X23, [X31+24]
	108 Move X29, [X31+64]
	109 Move X30, [X31+72]
	110 Return 

Method: System.Void UnregisterInteractor(UnityEngine.XR.Interaction.Toolkit.UI.IUIInteractor interactor)

Disassembly:
	0x03B9B0A8 MOV X0, X19
	0x03B9B0AC LDR X9, [X8 + 0x258]
	0x03B9B0B0 LDR X1, [X8 + 0x260]
	0x03B9B0B4 BLR X9
	0x03B9B0B8 LDR X8, [X29]
	0x03B9B0BC MOV X23, X0
	0x03B9B0C0 LDR W9, [X8 + 0xE0]
	0x03B9B0C4 CBNZ W9, 0x3B9B0D0
	0x03B9B0C8 MOV X0, X8
	0x03B9B0CC BL 0x1C16DFC
	0x03B9B0D0 MOV X0, X23
	0x03B9B0D4 MOV X1, X31
	0x03B9B0D8 MOV X2, X31
	0x03B9B0DC BL 0x3C3883C
	0x03B9B0E0 TBZ X0, 0x0, 0x3B9B128
	0x03B9B0E4 LDRB W8, [X19 + 0x40]
	0x03B9B0E8 CBNZ W8, 0x3B9B658
	0x03B9B0EC ADRP X8, 0x558000
	0x03B9B0F0 LDR X8, [X8 + 0xA28]
	0x03B9B0F4 LDR X0, [X8]
	0x03B9B0F8 LDR W8, [X0 + 0xE0]
	0x03B9B0FC CBNZ W8, 0x3B9B104
	0x03B9B100 BL 0x1C16DFC
	0x03B9B104 ADRP X8, 0x5C1000
	0x03B9B108 LDR X8, [X8 + 0x948]
	0x03B9B10C MOV X1, X19
	0x03B9B110 MOV X2, X31
	0x03B9B114 LDR X0, [X8]
	0x03B9B118 BL 0x3C06B0C
	0x03B9B11C MOVZ W8, 0x1
	0x03B9B120 STRB W8, [X19 + 0x40]
	0x03B9B124 B 0x3B9B658
	0x03B9B128 CBZ X22, 0x3B9B698
	0x03B9B12C LDR W24, [X22 + 0x18C]
	0x03B9B130 MOV X0, X22
	0x03B9B134 BL 0x3B9AAF4
	0x03B9B138 CBZ X0, 0x3B9B5B4
	0x03B9B13C ADRP X10, 0x5C1000
	0x03B9B140 LDR X8, [X0]
	0x03B9B144 LDR X10, [X10 + 0x940]
	0x03B9B148 MOV X20, X0
	0x03B9B14C LDRH W9, [X8 + 0x12E]
	0x03B9B150 LDR X1, [X10]
	0x03B9B154 CBZ X9, 0x3B9B178
	0x03B9B158 LDR X10, [X8 + 0xB0]
	0x03B9B15C ADD X10, X10, 0x8
	0x03B9B160 LDUR X11, [X10 - 0x8]
	0x03B9B164 CMP X11, X1
	0x03B9B168 B.EQ 0x3B9B188
	0x03B9B16C SUBS X9, X9, 0x1
	0x03B9B170 ADD X10, X10, 0x10
	0x03B9B174 B.NE 0x3B9B160
	0x03B9B178 MOVZ W2, 0x1
	0x03B9B17C MOV X0, X20
	0x03B9B180 BL 0x1C5C788
	0x03B9B184 B 0x3B9B198
	0x03B9B188 LDR W9, [X10]
	0x03B9B18C ADD W9, W9, 0x1
	0x03B9B190 ADD X8, X8, W9, 0x4, SXTW
	0x03B9B194 ADD X0, X8, 0x138
	0x03B9B198 LDP X8, X2, [X0]
	0x03B9B19C ADD X1, X31, 0x88
	0x03B9B1A0 MOV X0, X20
	0x03B9B1A4 BLR X8
	0x03B9B1A8 TBZ X0, 0x0, 0x3B9B5B4
	0x03B9B1AC ADRP X28, 0x5C0000
	0x03B9B1B0 LDR X28, [X28 + 0x258]
	0x03B9B1B4 LDR X0, [X28]
	0x03B9B1B8 LDR W8, [X0 + 0xE0]
	0x03B9B1BC CBNZ W8, 0x3B9B1C4
	0x03B9B1C0 BL 0x1C16DFC
	0x03B9B1C4 LDR W8, [X31 + 0x1CC]
	0x03B9B1C8 CMP W8, 0x1
	0x03B9B1CC B.NE 0x3B9B5B4
	0x03B9B1D0 ADRP X27, 0x5C0000

ISIL:
	001 Move [X31-48], X29
	002 Move [X31-40], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Subtract X31, X31, 1040
	008 Move X19, 0x848000
	009 Move W8, [X19+3186]
	010 Move X21, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x5C2000
	017 Move X0, [X0+2280]
	018 Call 0x1C17CF4
	019 Move X0, 0x5C2000
	020 Move X0, [X0+2288]
	021 Call 0x1C17CF4
	022 Move X0, 0x5C2000
	023 Move X0, [X0+2296]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X19+3186], W8
	027 Move X0, [X20+896]
	028 Compare X0, 0
	029 JumpIfEqual {45}
	030 Move X22, 0x5C2000
	031 Move X22, [X22+2288]
	032 Move W19, W31
	033 Move W8, [X0+24]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X2, [X22]
	036 Add X8, X31, 688
	037 Move W1, W19
	038 Call List`1<RegisteredInteractor>.get_Item, X0, X1
	039 Move X8, [X31+688]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X0, [X20+896]
	042 Add W19, W19, 1
	043 Compare X0, 0
	044 JumpIfNotEqual {33}
	045 Call 0x1C17F20
	046 Move X0, [X20+896]
	047 Compare X0, 0
	048 JumpIfEqual {45}
	049 Move X2, [X22]
	050 Add X8, X31, 688
	051 Move W1, W19
	052 Add X21, X31, 688
	053 Call List`1<RegisteredInteractor>.get_Item, X0, X1
	054 Add X21, X21, 8
	055 Add X0, X31, 344
	056 Move W2, 344
	057 Move X1, X21
	058 Call 0x3EB2AC0
	059 Move X20, [X20+896]
	060 Add X0, X31, 0
	061 Add X1, X31, 344
	062 Move W2, 344
	063 Call 0x3EB2AC0
	064 Compare X20, 0
	065 JumpIfEqual {45}
	066 Move X8, 0x5C2000
	067 Move X8, [X8+2296]
	068 Add X1, X31, 0
	069 Move W2, 344
	070 Move X0, X21
	071 Move X22, [X8]
	072 Move [X31+688], X31
	073 Call 0x3EB2AC0
	074 Add X2, X31, 688
	075 Move X0, X20
	076 Move W1, W19
	077 Move X3, X22
	078 Call List`1<RegisteredInteractor>.set_Item, X0, X1, X2
	079 Add X31, X31, 1040
	080 Move X20, [X31+32]
	081 Move X19, [X31+40]
	082 Move X22, [X31+16]
	083 Move X21, [X31+24]
	084 Move X29, [X31+48]
	085 Move X30, [X31+56]
	086 Return 

Method: UnityEngine.XR.Interaction.Toolkit.UI.IUIInteractor GetInteractor(System.Int32 pointerId)

Disassembly:
	0x03B9BBD0 LDR X21, [X0]
	0x03B9BBD4 BL 0x3EB1AE0
	0x03B9BBD8 ADRP X8, 0x5C1000
	0x03B9BBDC LDR X8, [X8 + 0x988]
	0x03B9BBE0 ADD X0, X31, 0x80
	0x03B9BBE4 LDR X1, [X8]
	0x03B9BBE8 BL 0x2C0A83C
	0x03B9BBEC CBZ X21, 0x3B9BB10
	0x03B9BBF0 MOV X0, X21
	0x03B9BBF4 BL 0x1C16F18
	0x03B9BBF8 MOV X21, X31
	0x03B9BBFC B 0x3B9BC04
	0x03B9BC00 MOV X20, X0
	0x03B9BC04 ADRP X8, 0x5C1000
	0x03B9BC08 LDR X8, [X8 + 0x988]
	0x03B9BC0C LDR X1, [X8]
	0x03B9BC10 ADD X0, X31, 0x80
	0x03B9BC14 BL 0x2C0A83C
	0x03B9BC18 CBNZ X21, 0x3B9BC24
	0x03B9BC1C MOV X0, X20
	0x03B9BC20 BL 0x1D2C690
	0x03B9BC24 MOV X0, X21
	0x03B9BC28 BL 0x1C16F18
	0x03B9BC2C BL 0x1990590
	0x03B9BC30 LDR X8, [X0 + 0x60]
	0x03B9BC34 CBZ X8, 0x3B9BC40
	0x03B9BC38 LDR X0, [X8 + 0x18]
	0x03B9BC3C RET
	0x03B9BC40 MOV X0, X31
	0x03B9BC44 RET
	0x03B9BC48 LDR X0, [X0 + 0x68]
	0x03B9BC4C RET
	0x03B9BC50 SUB X31, X31, 0x70
	0x03B9BC54 STR X30, [X31 + 0x40]
	0x03B9BC58 STP X22, X21, [X31 + 0x50]
	0x03B9BC5C STP X20, X19, [X31 + 0x60]
	0x03B9BC60 ADRP X21, 0x847000
	0x03B9BC64 LDRB W8, [X21 + 0xC0D]
	0x03B9BC68 MOV X19, X1
	0x03B9BC6C MOV X20, X0
	0x03B9BC70 TBNZ X8, 0x0, 0x3B9BCB8
	0x03B9BC74 ADRP X0, 0x5C0000
	0x03B9BC78 LDR X0, [X0 + 0x270]
	0x03B9BC7C BL 0x1C16CF4
	0x03B9BC80 ADRP X0, 0x5C0000
	0x03B9BC84 LDR X0, [X0 + 0x268]
	0x03B9BC88 BL 0x1C16CF4
	0x03B9BC8C ADRP X0, 0x5C1000
	0x03B9BC90 LDR X0, [X0 + 0x9B0]
	0x03B9BC94 BL 0x1C16CF4
	0x03B9BC98 ADRP X0, 0x5C1000
	0x03B9BC9C LDR X0, [X0 + 0x9B8]
	0x03B9BCA0 BL 0x1C16CF4
	0x03B9BCA4 ADRP X0, 0x5C1000
	0x03B9BCA8 LDR X0, [X0 + 0x9C0]
	0x03B9BCAC BL 0x1C16CF4
	0x03B9BCB0 MOVZ W8, 0x1
	0x03B9BCB4 STRB W8, [X21 + 0xC0D]
	0x03B9BCB8 LDR X0, [X20 + 0x68]
	0x03B9BCBC CBZ X0, 0x3B9BD70
	0x03B9BCC0 ADRP X8, 0x5C1000

ISIL:
	001 Subtract X31, X31, 416
	002 Move [X31+352], X29
	003 Move [X31+360], X30
	004 Move [X31+368], X24
	005 Move [X31+376], X23
	006 Move [X31+384], X22
	007 Move [X31+392], X21
	008 Move [X31+400], X20
	009 Move [X31+408], X19
	010 Move X21, 0x848000
	011 Move W8, [X21+3187]
	012 Move W19, W1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x5C2000
	019 Move X0, [X0+2280]
	020 Call 0x1C17CF4
	021 Move X0, 0x5C2000
	022 Move X0, [X0+2288]
	023 Call 0x1C17CF4
	024 Move X0, 0x5C1000
	025 Move X0, [X0+600]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3187], W8
	029 Move X0, [X20+896]
	030 Compare X0, 0
	031 JumpIfEqual {54}
	032 Move X22, 0x5C2000
	033 Move X23, 0x5C1000
	034 Move X22, [X22+2288]
	035 Move X23, [X23+600]
	036 Move W21, W31
	037 Move W8, [X0+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X2, [X22]
	040 Add X8, X31, 0
	041 Move W1, W21
	042 Call List`1<RegisteredInteractor>.get_Item, X0, X1
	043 Move X0, [X23]
	044 Move W24, [X31+168]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X0, [X20+896]
	051 Add W21, W21, 1
	052 Compare X0, 0
	053 JumpIfNotEqual {37}
	054 Call 0x1C17F20
	055 Move X0, X31
	056 Move X0, [X20+896]
	057 Compare X0, 0
	058 JumpIfEqual {54}
	059 Move X2, [X22]
	060 Add X8, X31, 0
	061 Move W1, W21
	062 Call List`1<RegisteredInteractor>.get_Item, X0, X1
	063 Move X0, [X31]
	064 Move X20, [X31+400]
	065 Move X19, [X31+408]
	066 Move X22, [X31+384]
	067 Move X21, [X31+392]
	068 Move X24, [X31+368]
	069 Move X23, [X31+376]
	070 Move X29, [X31+352]
	071 Move X30, [X31+360]
	072 Add X31, X31, 416
	073 Return X0

Method: System.Boolean GetTrackedDeviceModel(UnityEngine.XR.Interaction.Toolkit.UI.IUIInteractor interactor, out UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel model)

Disassembly:
	0x03B9B2D8 MOV X25, X0
	0x03B9B2DC MOV X0, X19
	0x03B9B2E0 BL 0x3B9AE18
	0x03B9B2E4 CBZ X0, 0x3B9B698
	0x03B9B2E8 MOV X1, X31
	0x03B9B2EC BL 0x3E24BA4
	0x03B9B2F0 LDR X8, [X29]
	0x03B9B2F4 MOV X26, X0
	0x03B9B2F8 LDR W9, [X8 + 0xE0]
	0x03B9B2FC CBNZ W9, 0x3B9B308
	0x03B9B300 MOV X0, X8
	0x03B9B304 BL 0x1C16DFC
	0x03B9B308 MOV X0, X25
	0x03B9B30C MOV X1, X26
	0x03B9B310 MOV X2, X31
	0x03B9B314 BL 0x3C3883C
	0x03B9B318 TBZ X0, 0x0, 0x3B9B354
	0x03B9B31C LDR X0, [X31 + 0x1E8]
	0x03B9B320 CBZ X0, 0x3B9B698
	0x03B9B324 BL 0x3B9AE18
	0x03B9B328 CBZ X0, 0x3B9B698
	0x03B9B32C MOV X1, X31
	0x03B9B330 BL 0x3E24924
	0x03B9B334 MOV W25, W0
	0x03B9B338 MOV X0, X19
	0x03B9B33C BL 0x3B9AE18
	0x03B9B340 CBZ X0, 0x3B9B698
	0x03B9B344 MOV X1, X31
	0x03B9B348 BL 0x3E24924
	0x03B9B34C CMP W25, W0
	0x03B9B350 B.GE 0x3B9B658
	0x03B9B354 LDR X0, [X28]
	0x03B9B358 LDR W8, [X0 + 0xE0]
	0x03B9B35C CBNZ W8, 0x3B9B364
	0x03B9B360 BL 0x1C16DFC
	0x03B9B364 ADD X0, X31, 0x88
	0x03B9B368 BL 0x3B9C860
	0x03B9B36C LDR V3, [X31 + 0x1C8]
	0x03B9B370 MOV X0, X19
	0x03B9B374 MOV X1, X24
	0x03B9B378 MOV X2, X23
	0x03B9B37C MOV X3, X21
	0x03B9B380 BL 0x3B9C8D4
	0x03B9B384 TBZ X0, 0x0, 0x3B9B64C
	0x03B9B388 CBZ X21, 0x3B9B698
	0x03B9B38C LDR W8, [X21 + 0x18]
	0x03B9B390 CMP W8, 0x1
	0x03B9B394 B.LT 0x3B9B64C
	0x03B9B398 MOVZ W8, 0x1
	0x03B9B39C STR W8, [X22 + 0x188]
	0x03B9B3A0 ADRP X8, 0x5AE000
	0x03B9B3A4 LDR X8, [X8 + 0x338]
	0x03B9B3A8 MOV X0, X21
	0x03B9B3AC MOV W1, W31
	0x03B9B3B0 LDR X2, [X8]
	0x03B9B3B4 ADD X8, X31, 0x38
	0x03B9B3B8 BL 0x3035A44
	0x03B9B3BC LDR X0, [X31 + 0x38]
	0x03B9B3C0 CBZ X0, 0x3B9B698
	0x03B9B3C4 MOV X1, X31
	0x03B9B3C8 BL 0x3C356F8
	0x03B9B3CC LDR X8, [X28]
	0x03B9B3D0 LDR X22, [X19 + 0x60]
	0x03B9B3D4 MOV X21, X0
	0x03B9B3D8 LDR W9, [X8 + 0xE0]
	0x03B9B3DC CBNZ W9, 0x3B9B3E8
	0x03B9B3E0 MOV X0, X8
	0x03B9B3E4 BL 0x1C16DFC
	0x03B9B3E8 CBZ X22, 0x3B9B698
	0x03B9B3EC LDR V0, [X31 + 0x1C8]

ISIL:
	001 Move [X31-64], X29
	002 Move [X31-56], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Subtract X31, X31, 704
	010 Move X20, 0x848000
	011 Move W8, [X20+3188]
	012 Move X19, X2
	013 Move X21, X1
	014 Move X22, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x5C2000
	020 Move X0, [X0+2280]
	021 Call 0x1C17CF4
	022 Move X0, 0x5C2000
	023 Move X0, [X0+2288]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3188], W8
	027 Move X0, [X22+896]
	028 Compare X0, 0
	029 JumpIfEqual {45}
	030 Move X24, 0x5C2000
	031 Move X24, [X24+2288]
	032 Move W20, W31
	033 Move W23, [X0+24]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X2, [X24]
	036 Add X8, X31, 352
	037 Move W1, W20
	038 Call List`1<RegisteredInteractor>.get_Item, X0, X1
	039 Move X8, [X31+352]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X0, [X22+896]
	042 Add W20, W20, 1
	043 Compare X0, 0
	044 JumpIfNotEqual {33}
	045 Call 0x1C17F20
	046 Add X0, X31, 352
	047 Move W2, 344
	048 Move W1, W31
	049 Call 0x3EB2B10
	050 Add X0, X31, 352
	051 Move TEMP, 0
	052 Not TEMP
	053 Move W1, TEMP
	054 Call TrackedDeviceModel..ctor, X0, X1
	055 Add X1, X31, 352
	056 Move X0, [X22+896]
	057 Compare X0, 0
	058 JumpIfEqual {45}
	059 Move X2, [X24]
	060 Add X8, X31, 0
	061 Move W1, W20
	062 Call List`1<RegisteredInteractor>.get_Item, X0, X1
	063 Add X0, X31, 352
	064 Add X1, X31, 0
	065 Move W2, 352
	066 Add X21, X31, 352
	067 Call 0x3EB2AC0
	068 Add X1, X21, 8
	069 Move W2, 344
	070 Move X0, X19
	071 Call 0x3EB2AC0
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction CSET not yet implemented."
	074 Add X31, X31, 704
	075 Move X20, [X31+48]
	076 Move X19, [X31+56]
	077 Move X22, [X31+32]
	078 Move X21, [X31+40]
	079 Move X24, [X31+16]
	080 Move X23, [X31+24]
	081 Move X29, [X31+64]
	082 Move X30, [X31+72]
	083 Return X0

Method: System.Void DoProcess()

Disassembly:
	0x03BA661C AND W1, W0, 0x1
	0x03BA6620 MOV X0, X20
	0x03BA6624 MOV X2, X31
	0x03BA6628 BL 0x3B98F00
	0x03BA662C MOVZ W0, 0x1
	0x03BA6630 MOV X1, X31
	0x03BA6634 BL 0x3C84A54
	0x03BA6638 AND W1, W0, 0x1
	0x03BA663C MOV X0, X20
	0x03BA6640 MOV X2, X31
	0x03BA6644 BL 0x3B98F94
	0x03BA6648 MOVZ W0, 0x2
	0x03BA664C MOV X1, X31
	0x03BA6650 BL 0x3C84A54
	0x03BA6654 AND W1, W0, 0x1
	0x03BA6658 MOV X0, X20
	0x03BA665C MOV X2, X31
	0x03BA6660 BL 0x3B99028
	0x03BA6664 ADD X1, X19, 0x1A0
	0x03BA6668 MOV X0, X19
	0x03BA666C LDP X20, X19, [X31 + 0x20]
	0x03BA6670 LDP X22, X21, [X31 + 0x10]
	0x03BA6674 LDP X30, X23, [X31], #0x30
	0x03BA6678 B 0x3BA1280
	0x03BA667C BL 0x1C16F20
	0x03BA6680 STP D9, D8, [X31 - 0x40]!
	0x03BA6684 STR X30, [X31 + 0x10]
	0x03BA6688 STP X22, X21, [X31 + 0x20]
	0x03BA668C STP X20, X19, [X31 + 0x30]
	0x03BA6690 ADRP X20, 0x83C000
	0x03BA6694 LDRB W8, [X20 + 0xC78]
	0x03BA6698 MOV X19, X0
	0x03BA669C TBNZ X8, 0x0, 0x3BA66C0
	0x03BA66A0 ADRP X0, 0x575000
	0x03BA66A4 LDR X0, [X0 + 0x3C0]
	0x03BA66A8 BL 0x1C16CF4
	0x03BA66AC ADRP X0, 0x575000
	0x03BA66B0 LDR X0, [X0 + 0x558]
	0x03BA66B4 BL 0x1C16CF4
	0x03BA66B8 MOVZ W8, 0x1
	0x03BA66BC STRB W8, [X20 + 0xC78]
	0x03BA66C0 LDR W8, [X19 + 0x120]
	0x03BA66C4 CBZ W8, 0x3BA6A6C
	0x03BA66C8 LDRB W8, [X19 + 0x19C]
	0x03BA66CC CBZ W8, 0x3BA68D4
	0x03BA66D0 ADRP X20, 0x83A000
	0x03BA66D4 LDRB W8, [X20 + 0xF98]
	0x03BA66D8 CBNZ W8, 0x3BA66F0
	0x03BA66DC ADRP X0, 0x5A0000
	0x03BA66E0 LDR X0, [X0 + 0xEE0]
	0x03BA66E4 BL 0x1C16CF4
	0x03BA66E8 MOVZ W8, 0x1
	0x03BA66EC STRB W8, [X20 + 0xF98]
	0x03BA66F0 ADRP X21, 0x5A0000
	0x03BA66F4 LDR X21, [X21 + 0xEE0]
	0x03BA66F8 LDR X8, [X21]
	0x03BA66FC LDR X8, [X8 + 0xB8]
	0x03BA6700 LDR X8, [X8]
	0x03BA6704 CBZ X8, 0x3BA6834
	0x03BA6708 LDR X0, [X8 + 0x1C8]
	0x03BA670C CBZ X0, 0x3BA6B30
	0x03BA6710 ADRP X22, 0x575000
	0x03BA6714 LDR X22, [X22 + 0x558]
	0x03BA6718 LDR X1, [X22]
	0x03BA671C BL 0x2E095F8
	0x03BA6720 LDRB W8, [X20 + 0xF98]
	0x03BA6724 MOV V8.16B, V0.16B
	0x03BA6728 MOV V9.16B, V1.16B
	0x03BA672C CBNZ W8, 0x3BA6744
	0x03BA6730 ADRP X0, 0x5A0000
	0x03BA6734 LDR X0, [X0 + 0xEE0]
	0x03BA6738 BL 0x1C16CF4
	0x03BA673C MOVZ W8, 0x1
	0x03BA6740 STRB W8, [X20 + 0xF98]
	0x03BA6744 LDR X8, [X21]
	0x03BA6748 LDR X8, [X8 + 0xB8]
	0x03BA674C LDR X8, [X8]
	0x03BA6750 CBZ X8, 0x3BA6B30
	0x03BA6754 LDR X0, [X8 + 0x1B0]
	0x03BA6758 CBZ X0, 0x3BA6B30
	0x03BA675C LDR X1, [X22]
	0x03BA6760 BL 0x2E095F8
	0x03BA6764 FADD S0, S8, S0
	0x03BA6768 FADD S1, S9, S1
	0x03BA676C STR S0, [X19 + 0x358]
	0x03BA6770 STR S1, [X19 + 0x35C]
	0x03BA6774 LDRB W8, [X20 + 0xF98]
	0x03BA6778 CBNZ W8, 0x3BA6790
	0x03BA677C ADRP X0, 0x5A0000
	0x03BA6780 LDR X0, [X0 + 0xEE0]
	0x03BA6784 BL 0x1C16CF4
	0x03BA6788 MOVZ W8, 0x1
	0x03BA678C STRB W8, [X20 + 0xF98]
	0x03BA6790 LDR X8, [X21]
	0x03BA6794 LDR X8, [X8 + 0xB8]
	0x03BA6798 LDR X8, [X8]
	0x03BA679C CBZ X8, 0x3BA6B30
	0x03BA67A0 LDR X0, [X8 + 0x180]
	0x03BA67A4 CBZ X0, 0x3BA6B30
	0x03BA67A8 MOV X1, X31
	0x03BA67AC BL 0x3758A6C
	0x03BA67B0 LDRB W9, [X19 + 0x374]
	0x03BA67B4 AND W8, W0, 0x1
	0x03BA67B8 CMP W9, W8
	0x03BA67BC B.EQ 0x3BA67D4
	0x03BA67C0 CMP W8, 0x0
	0x03BA67C4 MOVZ W9, 0x1
	0x03BA67C8 CINC W9, W9, EQ
	0x03BA67CC STR W9, [X19 + 0x360]
	0x03BA67D0 STRB W8, [X19 + 0x374]
	0x03BA67D4 LDRB W8, [X20 + 0xF98]
	0x03BA67D8 CBNZ W8, 0x3BA67F0
	0x03BA67DC ADRP X0, 0x5A0000
	0x03BA67E0 LDR X0, [X0 + 0xEE0]
	0x03BA67E4 BL 0x1C16CF4
	0x03BA67E8 MOVZ W8, 0x1
	0x03BA67EC STRB W8, [X20 + 0xF98]
	0x03BA67F0 LDR X8, [X21]
	0x03BA67F4 LDR X8, [X8 + 0xB8]
	0x03BA67F8 LDR X8, [X8]
	0x03BA67FC CBZ X8, 0x3BA6B30
	0x03BA6800 LDR X0, [X8 + 0x188]
	0x03BA6804 CBZ X0, 0x3BA6B30
	0x03BA6808 MOV X1, X31
	0x03BA680C BL 0x3758A6C
	0x03BA6810 LDRB W9, [X19 + 0x375]
	0x03BA6814 AND W8, W0, 0x1
	0x03BA6818 CMP W9, W8
	0x03BA681C B.EQ 0x3BA6834
	0x03BA6820 CMP W8, 0x0
	0x03BA6824 MOVZ W9, 0x1
	0x03BA6828 CINC W9, W9, EQ
	0x03BA682C STR W9, [X19 + 0x364]
	0x03BA6830 STRB W8, [X19 + 0x375]
	0x03BA6834 ADRP X20, 0x83A000
	0x03BA6838 LDRB W8, [X20 + 0xF9A]
	0x03BA683C CBNZ W8, 0x3BA6854
	0x03BA6840 ADRP X0, 0x5A1000
	0x03BA6844 LDR X0, [X0 + 0x8]
	0x03BA6848 BL 0x1C16CF4
	0x03BA684C MOVZ W8, 0x1
	0x03BA6850 STRB W8, [X20 + 0xF9A]
	0x03BA6854 ADRP X21, 0x5A1000
	0x03BA6858 LDR X21, [X21 + 0x8]
	0x03BA685C LDR X8, [X21]
	0x03BA6860 LDR X8, [X8 + 0xB8]
	0x03BA6864 LDR X8, [X8]
	0x03BA6868 CBZ X8, 0x3BA6A60
	0x03BA686C LDR X0, [X8 + 0x178]
	0x03BA6870 CBZ X0, 0x3BA6B30
	0x03BA6874 ADRP X22, 0x575000
	0x03BA6878 LDR X22, [X22 + 0x558]
	0x03BA687C LDR X1, [X22]
	0x03BA6880 BL 0x2E095F8
	0x03BA6884 LDRB W8, [X20 + 0xF9A]
	0x03BA6888 MOV V8.16B, V0.16B
	0x03BA688C MOV V9.16B, V1.16B
	0x03BA6890 CBNZ W8, 0x3BA68A8
	0x03BA6894 ADRP X0, 0x5A1000
	0x03BA6898 LDR X0, [X0 + 0x8]
	0x03BA689C BL 0x1C16CF4
	0x03BA68A0 MOVZ W8, 0x1
	0x03BA68A4 STRB W8, [X20 + 0xF9A]
	0x03BA68A8 LDR X8, [X21]
	0x03BA68AC LDR X8, [X8 + 0xB8]
	0x03BA68B0 LDR X8, [X8]
	0x03BA68B4 CBZ X8, 0x3BA6B30
	0x03BA68B8 LDR X9, [X8 + 0x188]
	0x03BA68BC CBZ X9, 0x3BA69A8
	0x03BA68C0 LDR X0, [X8 + 0x188]
	0x03BA68C4 CBZ X0, 0x3BA6B30
	0x03BA68C8 LDR X1, [X22]
	0x03BA68CC BL 0x2E095F8
	0x03BA68D0 B 0x3BA69DC
	0x03BA68D4 LDR X0, [X19 + 0x158]
	0x03BA68D8 BL 0x3BA6B34
	0x03BA68DC TBZ X0, 0x0, 0x3BA690C
	0x03BA68E0 LDR X0, [X19 + 0x158]
	0x03BA68E4 CBZ X0, 0x3BA6B30
	0x03BA68E8 MOV X1, X31
	0x03BA68EC BL 0x37451B4
	0x03BA68F0 CBZ X0, 0x3BA6B30
	0x03BA68F4 ADRP X8, 0x575000
	0x03BA68F8 LDR X8, [X8 + 0x3C0]
	0x03BA68FC LDR X1, [X8]
	0x03BA6900 BL 0x21F5E68
	0x03BA6904 STR S0, [X19 + 0x358]
	0x03BA6908 STR S1, [X19 + 0x35C]
	0x03BA690C LDR X0, [X19 + 0x160]
	0x03BA6910 BL 0x3BA6B34
	0x03BA6914 TBZ X0, 0x0, 0x3BA6958
	0x03BA6918 LDR X0, [X19 + 0x160]
	0x03BA691C CBZ X0, 0x3BA6B30
	0x03BA6920 MOV X1, X31
	0x03BA6924 BL 0x37451B4
	0x03BA6928 CBZ X0, 0x3BA6B30
	0x03BA692C MOV X1, X31
	0x03BA6930 BL 0x3735488
	0x03BA6934 LDRB W9, [X19 + 0x374]
	0x03BA6938 AND W8, W0, 0x1
	0x03BA693C CMP W9, W8
	0x03BA6940 B.EQ 0x3BA6958
	0x03BA6944 CMP W8, 0x0
	0x03BA6948 MOVZ W9, 0x1
	0x03BA694C CINC W9, W9, EQ
	0x03BA6950 STR W9, [X19 + 0x360]
	0x03BA6954 STRB W8, [X19 + 0x374]
	0x03BA6958 LDR X0, [X19 + 0x168]
	0x03BA695C BL 0x3BA6B34
	0x03BA6960 TBZ X0, 0x0, 0x3BA6A60
	0x03BA6964 LDR X0, [X19 + 0x168]
	0x03BA6968 CBZ X0, 0x3BA6B30
	0x03BA696C MOV X1, X31
	0x03BA6970 BL 0x37451B4
	0x03BA6974 CBZ X0, 0x3BA6B30
	0x03BA6978 MOV X1, X31
	0x03BA697C BL 0x3735488
	0x03BA6980 LDRB W9, [X19 + 0x375]
	0x03BA6984 AND W8, W0, 0x1
	0x03BA6988 CMP W9, W8
	0x03BA698C B.EQ 0x3BA6A60
	0x03BA6990 CMP W8, 0x0
	0x03BA6994 MOVZ W9, 0x1
	0x03BA6998 CINC W9, W9, EQ
	0x03BA699C STR W9, [X19 + 0x364]
	0x03BA69A0 STRB W8, [X19 + 0x375]
	0x03BA69A4 B 0x3BA6A60
	0x03BA69A8 ADRP X22, 0x833000
	0x03BA69AC LDRB W8, [X22 + 0x78F]
	0x03BA69B0 CBNZ W8, 0x3BA69C8
	0x03BA69B4 ADRP X0, 0x555000
	0x03BA69B8 LDR X0, [X0 + 0xF08]
	0x03BA69BC BL 0x1C16CF4
	0x03BA69C0 MOVZ W8, 0x1
	0x03BA69C4 STRB W8, [X22 + 0x78F]
	0x03BA69C8 ADRP X8, 0x555000
	0x03BA69CC LDR X8, [X8 + 0xF08]
	0x03BA69D0 LDR X8, [X8]
	0x03BA69D4 LDR X8, [X8 + 0xB8]
	0x03BA69D8 LDP S0, S1, [X8]
	0x03BA69DC FADD S0, S8, S0
	0x03BA69E0 FADD S1, S9, S1
	0x03BA69E4 STR S0, [X19 + 0x358]
	0x03BA69E8 STR S1, [X19 + 0x35C]
	0x03BA69EC LDRB W8, [X20 + 0xF9A]
	0x03BA69F0 CBNZ W8, 0x3BA6A08
	0x03BA69F4 ADRP X0, 0x5A1000
	0x03BA69F8 LDR X0, [X0 + 0x8]
	0x03BA69FC BL 0x1C16CF4
	0x03BA6A00 MOVZ W8, 0x1
	0x03BA6A04 STRB W8, [X20 + 0xF9A]
	0x03BA6A08 LDR X8, [X21]
	0x03BA6A0C LDR X8, [X8 + 0xB8]
	0x03BA6A10 LDR X8, [X8]
	0x03BA6A14 CBZ X8, 0x3BA6B30
	0x03BA6A18 LDR X0, [X8 + 0x170]
	0x03BA6A1C CBZ X0, 0x3BA6B30
	0x03BA6A20 MOV X1, X31
	0x03BA6A24 BL 0x3758A6C
	0x03BA6A28 LDRB W9, [X19 + 0x374]
	0x03BA6A2C AND W8, W0, 0x1
	0x03BA6A30 CMP W9, W8
	0x03BA6A34 B.EQ 0x3BA6A4C
	0x03BA6A38 CMP W8, 0x0
	0x03BA6A3C MOVZ W9, 0x1
	0x03BA6A40 CINC W9, W9, EQ
	0x03BA6A44 STR W9, [X19 + 0x360]
	0x03BA6A48 STRB W8, [X19 + 0x374]
	0x03BA6A4C LDRB W8, [X19 + 0x375]
	0x03BA6A50 CBZ W8, 0x3BA6A60
	0x03BA6A54 MOVZ W8, 0x2
	0x03BA6A58 STR W8, [X19 + 0x364]
	0x03BA6A5C STRB W31, [X19 + 0x375]
	0x03BA6A60 LDR W8, [X19 + 0x120]
	0x03BA6A64 CMP W8, 0x1
	0x03BA6A68 B.EQ 0x3BA6B14
	0x03BA6A6C LDRB W8, [X19 + 0x171]
	0x03BA6A70 CBNZ W8, 0x3BA6A7C
	0x03BA6A74 LDRB W8, [X19 + 0x172]
	0x03BA6A78 CBZ W8, 0x3BA6B14
	0x03BA6A7C MOV X0, X31
	0x03BA6A80 BL 0x3C84B08
	0x03BA6A84 CBZ X0, 0x3BA6B30
	0x03BA6A88 LDR X8, [X0 + 0x18]
	0x03BA6A8C CBZ X8, 0x3BA6B14
	0x03BA6A90 LDR X0, [X19 + 0x178]
	0x03BA6A94 MOV X1, X31
	0x03BA6A98 BL 0x3C847C0
	0x03BA6A9C LDR X0, [X19 + 0x180]
	0x03BA6AA0 MOV X1, X31
	0x03BA6AA4 MOV V8.16B, V0.16B
	0x03BA6AA8 BL 0x3C847C0
	0x03BA6AAC LDR X0, [X19 + 0x188]
	0x03BA6AB0 MOV X1, X31
	0x03BA6AB4 STR S8, [X19 + 0x358]
	0x03BA6AB8 STR S0, [X19 + 0x35C]
	0x03BA6ABC BL 0x3C848B0
	0x03BA6AC0 LDRB W9, [X19 + 0x374]
	0x03BA6AC4 AND W8, W0, 0x1
	0x03BA6AC8 CMP W9, W8
	0x03BA6ACC B.EQ 0x3BA6AE4
	0x03BA6AD0 CMP W8, 0x0
	0x03BA6AD4 MOVZ W9, 0x1
	0x03BA6AD8 CINC W9, W9, EQ
	0x03BA6ADC STR W9, [X19 + 0x360]
	0x03BA6AE0 STRB W8, [X19 + 0x374]
	0x03BA6AE4 LDR X0, [X19 + 0x190]
	0x03BA6AE8 MOV X1, X31
	0x03BA6AEC BL 0x3C848B0
	0x03BA6AF0 LDRB W9, [X19 + 0x375]
	0x03BA6AF4 AND W8, W0, 0x1
	0x03BA6AF8 CMP W9, W8
	0x03BA6AFC B.EQ 0x3BA6B14
	0x03BA6B00 CMP W8, 0x0
	0x03BA6B04 MOVZ W9, 0x1
	0x03BA6B08 CINC W9, W9, EQ
	0x03BA6B0C STR W9, [X19 + 0x364]
	0x03BA6B10 STRB W8, [X19 + 0x375]
	0x03BA6B14 ADD X1, X19, 0x358
	0x03BA6B18 MOV X0, X19
	0x03BA6B1C LDP X20, X19, [X31 + 0x30]
	0x03BA6B20 LDP X22, X21, [X31 + 0x20]
	0x03BA6B24 LDR X30, [X31 + 0x10]
	0x03BA6B28 LDP D9, D8, [X31], #0x40
	0x03BA6B2C B 0x3BA3134
	0x03BA6B30 BL 0x1C16F20
	0x03BA6B34 STP X30, X21, [X31 - 0x20]!
	0x03BA6B38 STP X20, X19, [X31 + 0x10]
	0x03BA6B3C ADRP X20, 0x83C000
	0x03BA6B40 ADRP X21, 0x54D000
	0x03BA6B44 LDRB W8, [X20 + 0xC7A]
	0x03BA6B48 LDR X21, [X21 + 0x598]
	0x03BA6B4C MOV X19, X0
	0x03BA6B50 TBNZ X8, 0x0, 0x3BA6B68
	0x03BA6B54 ADRP X0, 0x54D000
	0x03BA6B58 LDR X0, [X0 + 0x598]
	0x03BA6B5C BL 0x1C16CF4
	0x03BA6B60 MOVZ W8, 0x1
	0x03BA6B64 STRB W8, [X20 + 0xC7A]
	0x03BA6B68 LDR X0, [X21]
	0x03BA6B6C LDR W8, [X0 + 0xE0]
	0x03BA6B70 CBNZ W8, 0x3BA6B78
	0x03BA6B74 BL 0x1C16DFC
	0x03BA6B78 MOV X0, X19
	0x03BA6B7C MOV X1, X31
	0x03BA6B80 MOV X2, X31
	0x03BA6B84 BL 0x3C354F8
	0x03BA6B88 TBZ X0, 0x0, 0x3BA6BC0

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Subtract X31, X31, 1088
	014 Move X20, 0x83D000
	015 Move W8, [X20+3189]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {53}
	021 Move X0, 0x5B7000
	022 Move X0, [X0+3168]
	023 Call 0x1C17CF4
	024 Move X0, 0x5B7000
	025 Move X0, [X0+2368]
	026 Call 0x1C17CF4
	027 Move X0, 0x5B7000
	028 Move X0, [X0+3176]
	029 Call 0x1C17CF4
	030 Move X0, 0x5B7000
	031 Move X0, [X0+3184]
	032 Call 0x1C17CF4
	033 Move X0, 0x5B7000
	034 Move X0, [X0+2280]
	035 Call 0x1C17CF4
	036 Move X0, 0x5B7000
	037 Move X0, [X0+2288]
	038 Call 0x1C17CF4
	039 Move X0, 0x5B7000
	040 Move X0, [X0+2296]
	041 Call 0x1C17CF4
	042 Move X0, 0x54E000
	043 Move X0, [X0+1432]
	044 Call 0x1C17CF4
	045 Move X0, 0x5B7000
	046 Move X0, [X0+3192]
	047 Call 0x1C17CF4
	048 Move X0, 0x5B6000
	049 Move X0, [X0+600]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X20+3189], W8
	053 Add X0, X31, 384
	054 Move W2, 352
	055 Move W1, W31
	056 Call 0x3EB2B10
	057 Move [X31+368], X31
	058 Move [X31+376], X31
	059 Move [X31+360], X31
	060 Move W8, [X19+296]
	061 Compare W8, 0
	062 JumpIfEqual {332}
	063 Move X9, [X19+896]
	064 Compare X9, 0
	065 JumpIfEqual {367}
	066 Move X28, 0x5B7000
	067 Move X29, 0x5B6000
	068 Move X27, 0x54E000
	069 Move X28, [X28+2288]
	070 Move X29, [X29+600]
	071 Move X27, [X27+1432]
	072 Add X8, X31, 384
	073 Add X10, X31, 736
	074 Move W20, W31
	075 Add X21, X8, 8
	076 Add X22, X10, 8
	077 Move W8, [X9+24]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X2, [X28]
	080 Add X8, X31, 736
	081 Move X0, X9
	082 Move W1, W20
	083 Call List`1<RegisteredInteractor>.get_Item, X0, X1
	084 Add X0, X31, 384
	085 Add X1, X31, 736
	086 Move W2, 352
	087 Call 0x3EB2AC0
	088 Move X0, [X29]
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {93}
	092 Call 0x1C17DFC
	093 Move X24, [X31+384]
	094 Move X23, [X31+400]
	095 Compare X24, 0
	096 JumpIfEqual {113}
	097 Move X8, [X24]
	098 Move X10, 0x5B7000
	099 NotImplemented "Instruction LDRH not yet implemented."
	100 Move X10, [X10+2368]
	101 Move X1, [X10]
	102 Compare X9, 0
	103 JumpIfEqual {110}
	104 Move X10, [X8+176]
	105 Add X10, X10, 8
	106 NotImplemented "Instruction LDUR not yet implemented."
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Subtract X9, X9, 1
	109 Add X10, X10, 16
	110 Move X0, X24
	111 Move W2, W31
	112 Call 0x1C5D788
	113 Move X0, [X29]
	114 Move W8, [X0+224]
	115 Compare W8, 0
	116 JumpIfNotEqual {118}
	117 Call 0x1C17DFC
	118 Move X0, X21
	119 Move W1, W31
	120 Call TrackedDeviceModel.Reset, X0, X1
	121 Move W2, 1
	122 Move X0, X19
	123 Move X1, X21
	124 Call UIInputModule.ProcessTrackedDevice, X0, X1, X2
	125 Move W1, [X31+552]
	126 Move X0, X19
	127 Call UIInputModule.RemovePointerEventData, X0, X1
	128 Move X0, [X19+896]
	129 Compare X0, 0
	130 JumpIfEqual {367}
	131 Move X8, 0x5B7000
	132 Move X8, [X8+3184]
	133 Move W1, W20
	134 Subtract W24, W20, 1
	135 Move X2, [X8]
	136 Call List`1<RegisteredInteractor>.RemoveAt, X0, X1
	137 Move W20, W24
	138 NotImplemented "Instruction LDRSW not yet implemented."
	139 Add X8, X8, X9
	140 Add X0, X8, 312
	141 Move X8, [X0]
	142 Move X2, [X0+8]
	143 Move X0, X24
	144 Move X1, X21
	145 NotImplemented "Instruction BLR not yet implemented."
	146 Move X0, X19
	147 Move X1, X21
	148 Move W2, W31
	149 Call UIInputModule.ProcessTrackedDevice, X0, X1, X2
	150 Move X24, [X19+896]
	151 Add X0, X31, 8
	152 Add X1, X31, 384
	153 Move W2, 352
	154 Call 0x3EB2AC0
	155 Compare X24, 0
	156 JumpIfEqual {367}
	157 Move X8, 0x5B7000
	158 Move X8, [X8+2296]
	159 Add X0, X31, 736
	160 Add X1, X31, 8
	161 Move W2, 352
	162 Move X25, [X8]
	163 Call 0x3EB2AC0
	164 Add X2, X31, 736
	165 Move X0, X24
	166 Move W1, W20
	167 Move X3, X25
	168 Call List`1<RegisteredInteractor>.set_Item, X0, X1, X2
	169 Move X0, [X29]
	170 Move W8, [X0+224]
	171 Compare W8, 0
	172 JumpIfNotEqual {174}
	173 Call 0x1C17DFC
	174 Move X0, [X27]
	175 Move X24, [X31+400]
	176 Move W8, [X0+224]
	177 Compare W8, 0
	178 JumpIfNotEqual {180}
	179 Call 0x1C17DFC
	180 Move X0, X23
	181 Move X1, X24
	182 Move X2, X31
	183 Call Object.op_Inequality, X0, X1
	184 Move TEMP, X0
	185 And TEMP, TEMP, 1
	186 Compare TEMP, 1
	187 JumpIfNotEqual {310}
	188 Move X0, [X19+904]
	189 Compare X0, 0
	190 JumpIfEqual {367}
	191 Move X8, 0x5B7000
	192 Move X8, [X8+3176]
	193 Add X1, X31, 376
	194 Move X2, [X8]
	195 Call 0x2EF2058, X0, X1
	196 Move X26, [X31+376]
	197 Move [X31+360], X0
	198 Move [X31+368], X1
	199 Compare X26, 0
	200 JumpIfEqual {314}
	201 Move X25, [X31+384]
	202 Add X0, X31, 736
	203 Add X1, X31, 384
	204 Move W2, 352
	205 Move [X26+16], X25
	206 Call 0x3EB2AC0
	207 Add X0, X26, 24
	208 Move W2, 344
	209 Move X1, X22
	210 Call 0x3EB2AC0
	211 Compare X25, 0
	212 JumpIfEqual {305}
	213 Move X8, 0x5B7000
	214 Move X8, [X8+3168]
	215 Move X1, [X8]
	216 Move X0, X25
	217 Call 0x1C17E00
	218 Move X25, X0
	219 Compare X0, 0
	220 JumpIfEqual {305}
	221 Move X0, [X27]
	222 Move W8, [X0+224]
	223 Compare W8, 0
	224 JumpIfNotEqual {226}
	225 Call 0x1C17DFC
	226 Move X0, X23
	227 Move X1, X31
	228 Move X2, X31
	229 Call Object.op_Inequality, X0, X1
	230 Move TEMP, X0
	231 And TEMP, TEMP, 1
	232 Compare TEMP, 1
	233 JumpIfNotEqual {263}
	234 Move X26, [X31+376]
	235 Compare X26, 0
	236 JumpIfEqual {315}
	237 Move [X26+368], X23
	238 Move X8, [X25]
	239 Move X10, 0x5B7000
	240 NotImplemented "Instruction LDRH not yet implemented."
	241 Move X10, [X10+3168]
	242 Move X1, [X10]
	243 Compare X9, 0
	244 JumpIfEqual {251}
	245 Move X10, [X8+176]
	246 Add X10, X10, 8
	247 NotImplemented "Instruction LDUR not yet implemented."
	248 NotImplemented "Instruction CMP not yet implemented."
	249 Subtract X9, X9, 1
	250 Add X10, X10, 16
	251 Move W2, 3
	252 Move X0, X25
	253 Call 0x1C5D788
	254 Move W9, [X10]
	255 Add W9, W9, 3
	256 Add X8, X8, W9
	257 Add X0, X8, 312
	258 Move X8, [X0]
	259 Move X2, [X0+8]
	260 Move X0, X25
	261 Move X1, X26
	262 NotImplemented "Instruction BLR not yet implemented."
	263 Move X0, [X27]
	264 Move W8, [X0+224]
	265 Compare W8, 0
	266 JumpIfNotEqual {268}
	267 Call 0x1C17DFC
	268 Move X0, X24
	269 Move X1, X31
	270 Move X2, X31
	271 Call Object.op_Inequality, X0, X1
	272 Move TEMP, X0
	273 And TEMP, TEMP, 1
	274 Compare TEMP, 1
	275 JumpIfNotEqual {305}
	276 Move X23, [X31+376]
	277 Compare X23, 0
	278 JumpIfEqual {316}
	279 Move [X23+368], X24
	280 Move X8, [X25]
	281 Move X10, 0x5B7000
	282 NotImplemented "Instruction LDRH not yet implemented."
	283 Move X10, [X10+3168]
	284 Move X1, [X10]
	285 Compare X9, 0
	286 JumpIfEqual {293}
	287 Move X10, [X8+176]
	288 Add X10, X10, 8
	289 NotImplemented "Instruction LDUR not yet implemented."
	290 NotImplemented "Instruction CMP not yet implemented."
	291 Subtract X9, X9, 1
	292 Add X10, X10, 16
	293 Move W2, 2
	294 Move X0, X25
	295 Call 0x1C5D788
	296 Move W9, [X10]
	297 Add W9, W9, 2
	298 Add X8, X8, W9
	299 Add X0, X8, 312
	300 Move X8, [X0]
	301 Move X2, [X0+8]
	302 Move X0, X25
	303 Move X1, X23
	304 NotImplemented "Instruction BLR not yet implemented."
	305 Move X8, 0x5B7000
	306 Move X8, [X8+3192]
	307 Add X0, X31, 360
	308 Move X1, [X8]
	309 Call 0x24A7DD0, X0
	310 Move X9, [X19+896]
	311 Add W20, W20, 1
	312 Compare X9, 0
	313 JumpIfNotEqual {77}
	314 Call 0x1C17F20
	315 Call 0x1C17F20
	316 Call 0x1C17F20
	317 Move X23, X0
	318 NotImplemented "Instruction CMP not yet implemented."
	319 Move X0, X23
	320 Call 0x3EB2AD0
	321 Move X24, [X0]
	322 Call 0x3EB2AE0
	323 Move X8, 0x5B7000
	324 Move X8, [X8+3192]
	325 Add X0, X31, 360
	326 Move X1, [X8]
	327 Call 0x24A7DD0, X0
	328 Compare X24, 0
	329 JumpIfEqual {310}
	330 Move X0, X24
	331 Call 0x1C17F18
	332 Move W8, [X19+298]
	333 Compare W8, 0
	334 JumpIfEqual {341}
	335 Move X0, X19
	336 Call XRUIInputModule.ProcessTouches, X0
	337 Move TEMP, X0
	338 And TEMP, TEMP, 1
	339 Compare TEMP, 1
	340 JumpIfNotEqual {346}
	341 Move W0, W31
	342 Move TEMP, X0
	343 And TEMP, TEMP, 1
	344 Compare TEMP, 1
	345 JumpIfEqual {351}
	346 Move W8, [X19+297]
	347 Compare W8, 0
	348 JumpIfEqual {351}
	349 Move X0, X19
	350 Call XRUIInputModule.ProcessMouse, X0
	351 Move X0, X19
	352 Call XRUIInputModule.ProcessNavigation, X0
	353 Add X31, X31, 1088
	354 Move X20, [X31+80]
	355 Move X19, [X31+88]
	356 Move X22, [X31+64]
	357 Move X21, [X31+72]
	358 Move X24, [X31+48]
	359 Move X23, [X31+56]
	360 Move X26, [X31+32]
	361 Move X25, [X31+40]
	362 Move X28, [X31+16]
	363 Move X27, [X31+24]
	364 Move X29, [X31+96]
	365 Move X30, [X31+104]
	366 Return 
	367 Call 0x1C17F20
	368 Move X24, X31
	369 Move X23, X0
	370 Move X8, 0x5B7000
	371 Move X8, [X8+3192]
	372 Move X1, [X8]
	373 Add X0, X31, 360
	374 Call 0x24A7DD0, X0
	375 Compare X24, 0
	376 JumpIfNotEqual {379}
	377 Move X0, X23
	378 Call 0x1D2D690
	379 Move X0, X24
	380 Call 0x1C17F18
	381 Call 0x1991590

Method: System.Void ProcessMouse()

Disassembly:
	0x03BA7218 BL 0x3C2A574
	0x03BA721C CBZ X20, 0x3BA726C
	0x03BA7220 MOV X0, X20
	0x03BA7224 MOV X1, X31
	0x03BA7228 BL 0x3C3F8B8
	0x03BA722C LDR V0, [X19 + 0x48]
	0x03BA7230 FMUL S0, S0, S8
	0x03BA7234 BL 0x3EB1BD0
	0x03BA7238 LDR V1, [X19 + 0x54]
	0x03BA723C STR S0, [X19 + 0x4C]
	0x03BA7240 FMUL S0, S1, S8
	0x03BA7244 BL 0x3EB1BD0
	0x03BA7248 LDR V1, [X19 + 0x60]
	0x03BA724C STR S0, [X19 + 0x58]
	0x03BA7250 FMUL S0, S1, S8
	0x03BA7254 BL 0x3EB1BD0
	0x03BA7258 STR S0, [X19 + 0x64]
	0x03BA725C LDP X20, X19, [X31 + 0x20]
	0x03BA7260 LDP X30, X21, [X31 + 0x10]
	0x03BA7264 LDR V8, [X31], #0x30
	0x03BA7268 RET
	0x03BA726C BL 0x1C16F20
	0x03BA7270 STR D8, [X31 - 0x20]!
	0x03BA7274 STP X30, X19, [X31 + 0x10]
	0x03BA7278 ADRP X8, 0xFFFFFFFFFCF43000
	0x03BA727C LDR V0, [X0 + 0x48]
	0x03BA7280 LDR V8, [X8 + 0x104]
	0x03BA7284 MOV X19, X0
	0x03BA7288 FMUL S0, S0, S8
	0x03BA728C BL 0x3EB1BD0
	0x03BA7290 LDR V1, [X19 + 0x54]
	0x03BA7294 STR S0, [X19 + 0x4C]
	0x03BA7298 FMUL S0, S1, S8
	0x03BA729C BL 0x3EB1BD0
	0x03BA72A0 LDR V1, [X19 + 0x60]
	0x03BA72A4 STR S0, [X19 + 0x58]
	0x03BA72A8 FMUL S0, S1, S8
	0x03BA72AC BL 0x3EB1BD0
	0x03BA72B0 STR S0, [X19 + 0x64]
	0x03BA72B4 LDP X30, X19, [X31 + 0x10]
	0x03BA72B8 LDR V8, [X31], #0x20
	0x03BA72BC RET
	0x03BA72C0 ADRP X8, 0xFFFFFFFFFCF43000
	0x03BA72C4 LDR V1, [X8 + 0x104]
	0x03BA72C8 FMUL S0, S0, S1
	0x03BA72CC B 0x3EB1BD0
	0x03BA72D0 STP X30, X19, [X31 - 0x10]!
	0x03BA72D4 MOV X19, X1
	0x03BA72D8 AND W1, W2, 0x1
	0x03BA72DC BL 0x3BA72F8
	0x03BA72E0 CBZ X19, 0x3BA72F4
	0x03BA72E4 MOV X0, X19
	0x03BA72E8 MOV X1, X31
	0x03BA72EC LDP X30, X19, [X31], #0x10
	0x03BA72F0 B 0x3C40610
	0x03BA72F4 BL 0x1C16F20
	0x03BA72F8 STP X30, X21, [X31 - 0x20]!
	0x03BA72FC STP X20, X19, [X31 + 0x10]
	0x03BA7300 ADRP X19, 0x831000
	0x03BA7304 LDRB W8, [X19 + 0x783]
	0x03BA7308 MOV W21, W1
	0x03BA730C MOV X20, X0
	0x03BA7310 CBNZ W8, 0x3BA7328
	0x03BA7314 ADRP X0, 0x54C000
	0x03BA7318 LDR X0, [X0 + 0x5A0]
	0x03BA731C BL 0x1C16CF4
	0x03BA7320 MOVZ W8, 0x1
	0x03BA7324 STRB W8, [X19 + 0x783]
	0x03BA7328 ADRP X19, 0x54C000
	0x03BA732C LDR X19, [X19 + 0x5A0]
	0x03BA7330 LDR X8, [X19]
	0x03BA7334 TBZ X21, 0x0, 0x3BA7340
	0x03BA7338 LDRB W9, [X20 + 0x44]
	0x03BA733C B 0x3BA7344
	0x03BA7340 MOV W9, W31
	0x03BA7344 LDR W10, [X20 + 0x40]
	0x03BA7348 LDR X8, [X8 + 0xB8]
	0x03BA734C CMP W10, 0x5
	0x03BA7350 B.HI 0x3BA73A0
	0x03BA7354 ADRP X11, 0xFFFFFFFFFCFF0000
	0x03BA7358 ADD X11, X11, 0xDA9
	0x03BA735C ADR X12, 0x10
	0x03BA7360 LDRB W13, [X11, X10, LSL]
	0x03BA7364 ADD X12, X12, X13, 0x2, LSL
	0x03BA7368 BR X12
	0x03BA736C CBZ W9, 0x3BA7418
	0x03BA7370 ADRP X20, 0x831000
	0x03BA7374 LDRB W9, [X20 + 0xB6F]
	0x03BA7378 CBNZ W9, 0x3BA7394
	0x03BA737C MOV X0, X19
	0x03BA7380 BL 0x1C16CF4
	0x03BA7384 LDR X8, [X19]
	0x03BA7388 MOVZ W9, 0x1
	0x03BA738C STRB W9, [X20 + 0xB6F]
	0x03BA7390 LDR X8, [X8 + 0xB8]
	0x03BA7394 ADD X9, X8, 0x30
	0x03BA7398 ADD X8, X8, 0x38
	0x03BA739C B 0x3BA74AC
	0x03BA73A0 LDR V0, [X8]
	0x03BA73A4 LDR V2, [X8 + 0x8]
	0x03BA73A8 B 0x3BA74B4
	0x03BA73AC CBZ W9, 0x3BA744C
	0x03BA73B0 ADRP X20, 0x831000
	0x03BA73B4 LDRB W9, [X20 + 0xABD]
	0x03BA73B8 CBNZ W9, 0x3BA73D4
	0x03BA73BC MOV X0, X19
	0x03BA73C0 BL 0x1C16CF4
	0x03BA73C4 LDR X8, [X19]
	0x03BA73C8 MOVZ W9, 0x1
	0x03BA73CC STRB W9, [X20 + 0xABD]
	0x03BA73D0 LDR X8, [X8 + 0xB8]
	0x03BA73D4 ADD X9, X8, 0x24
	0x03BA73D8 ADD X8, X8, 0x2C
	0x03BA73DC B 0x3BA74AC
	0x03BA73E0 CBZ W9, 0x3BA7480
	0x03BA73E4 ADRP X20, 0x831000
	0x03BA73E8 LDRB W9, [X20 + 0xDDE]
	0x03BA73EC CBNZ W9, 0x3BA7408
	0x03BA73F0 MOV X0, X19
	0x03BA73F4 BL 0x1C16CF4
	0x03BA73F8 LDR X8, [X19]
	0x03BA73FC MOVZ W9, 0x1
	0x03BA7400 STRB W9, [X20 + 0xDDE]
	0x03BA7404 LDR X8, [X8 + 0xB8]
	0x03BA7408 ADD X9, X8, 0x54
	0x03BA740C ADD X8, X8, 0x5C
	0x03BA7410 B 0x3BA74AC
	0x03BA7414 CBZ W9, 0x3BA7370
	0x03BA7418 ADRP X20, 0x831000
	0x03BA741C LDRB W9, [X20 + 0xB70]
	0x03BA7420 CBNZ W9, 0x3BA743C
	0x03BA7424 MOV X0, X19
	0x03BA7428 BL 0x1C16CF4
	0x03BA742C LDR X8, [X19]
	0x03BA7430 MOVZ W9, 0x1
	0x03BA7434 STRB W9, [X20 + 0xB70]
	0x03BA7438 LDR X8, [X8 + 0xB8]
	0x03BA743C ADD X9, X8, 0x3C
	0x03BA7440 ADD X8, X8, 0x44
	0x03BA7444 B 0x3BA74AC
	0x03BA7448 CBZ W9, 0x3BA73B0
	0x03BA744C ADRP X20, 0x831000
	0x03BA7450 LDRB W9, [X20 + 0x786]
	0x03BA7454 CBNZ W9, 0x3BA7470
	0x03BA7458 MOV X0, X19
	0x03BA745C BL 0x1C16CF4
	0x03BA7460 LDR X8, [X19]
	0x03BA7464 MOVZ W9, 0x1
	0x03BA7468 STRB W9, [X20 + 0x786]
	0x03BA746C LDR X8, [X8 + 0xB8]
	0x03BA7470 ADD X9, X8, 0x18
	0x03BA7474 ADD X8, X8, 0x20
	0x03BA7478 B 0x3BA74AC
	0x03BA747C CBZ W9, 0x3BA73E4
	0x03BA7480 ADRP X20, 0x831000
	0x03BA7484 LDRB W9, [X20 + 0xA1F]
	0x03BA7488 CBNZ W9, 0x3BA74A4
	0x03BA748C MOV X0, X19
	0x03BA7490 BL 0x1C16CF4
	0x03BA7494 LDR X8, [X19]
	0x03BA7498 MOVZ W9, 0x1
	0x03BA749C STRB W9, [X20 + 0xA1F]
	0x03BA74A0 LDR X8, [X8 + 0xB8]
	0x03BA74A4 ADD X9, X8, 0x48
	0x03BA74A8 ADD X8, X8, 0x50
	0x03BA74AC LDR V0, [X9]
	0x03BA74B0 LDR V2, [X8]
	0x03BA74B4 LDP X20, X19, [X31 + 0x10]
	0x03BA74B8 MOV S1, V0.S[1]
	0x03BA74BC LDP X30, X21, [X31], #0x20
	0x03BA74C0 RET
	0x03BA74C4 ADRP X10, 0xFFFFFFFFFCF46000
	0x03BA74C8 LDR V0, [X10 + 0xD88]
	0x03BA74CC MOVZ W8, 0x4
	0x03BA74D0 MOVZ W9, 0x3E800000
	0x03BA74D4 STR W8, [X0 + 0x40]
	0x03BA74D8 MOVZ W8, 0x1
	0x03BA74DC MOV X1, X31
	0x03BA74E0 STR W9, [X0 + 0x68]
	0x03BA74E4 STRB W8, [X0 + 0x6C]
	0x03BA74E8 STR D0, [X0 + 0x70]
	0x03BA74EC B 0x33BDD8C
	0x03BA74F0 STR X30, [X31 - 0x30]!
	0x03BA74F4 STP X22, X21, [X31 + 0x10]
	0x03BA74F8 STP X20, X19, [X31 + 0x20]
	0x03BA74FC ADRP X21, 0x83B000
	0x03BA7500 ADRP X22, 0x5B5000
	0x03BA7504 LDRB W8, [X21 + 0xC82]
	0x03BA7508 LDR X22, [X22 + 0xCF0]
	0x03BA750C MOV X19, X1
	0x03BA7510 MOV X20, X0
	0x03BA7514 TBNZ X8, 0x0, 0x3BA752C
	0x03BA7518 ADRP X0, 0x5B5000
	0x03BA751C LDR X0, [X0 + 0xCF0]
	0x03BA7520 BL 0x1C16CF4
	0x03BA7524 MOVZ W8, 0x1
	0x03BA7528 STRB W8, [X21 + 0xC82]
	0x03BA752C LDR X2, [X22]
	0x03BA7530 MOV X0, X20
	0x03BA7534 MOV X1, X19
	0x03BA7538 LDP X20, X19, [X31 + 0x20]
	0x03BA753C LDP X22, X21, [X31 + 0x10]
	0x03BA7540 LDR X30, [X31], #0x30
	0x03BA7544 B 0x29AD964
	0x03BA7548 STR X30, [X31 - 0x30]!
	0x03BA754C STP X22, X21, [X31 + 0x10]
	0x03BA7550 STP X20, X19, [X31 + 0x20]
	0x03BA7554 ADRP X21, 0x83B000
	0x03BA7558 ADRP X22, 0x5B5000
	0x03BA755C LDRB W8, [X21 + 0xC83]
	0x03BA7560 LDR X22, [X22 + 0xCF8]
	0x03BA7564 MOV X19, X1
	0x03BA7568 MOV X20, X0
	0x03BA756C TBNZ X8, 0x0, 0x3BA7584
	0x03BA7570 ADRP X0, 0x5B5000
	0x03BA7574 LDR X0, [X0 + 0xCF8]
	0x03BA7578 BL 0x1C16CF4
	0x03BA757C MOVZ W8, 0x1
	0x03BA7580 STRB W8, [X21 + 0xC83]
	0x03BA7584 LDR X2, [X22]
	0x03BA7588 MOV X0, X20
	0x03BA758C MOV X1, X19
	0x03BA7590 LDP X20, X19, [X31 + 0x20]
	0x03BA7594 LDP X22, X21, [X31 + 0x10]
	0x03BA7598 LDR X30, [X31], #0x30
	0x03BA759C B 0x29AD994
	0x03BA75A0 STP X30, X21, [X31 - 0x20]!
	0x03BA75A4 STP X20, X19, [X31 + 0x10]
	0x03BA75A8 ADRP X20, 0x83B000
	0x03BA75AC ADRP X21, 0x5B5000
	0x03BA75B0 LDRB W8, [X20 + 0xC84]
	0x03BA75B4 LDR X21, [X21 + 0xD00]
	0x03BA75B8 MOV X19, X0
	0x03BA75BC TBNZ X8, 0x0, 0x3BA75D4
	0x03BA75C0 ADRP X0, 0x5B5000
	0x03BA75C4 LDR X0, [X0 + 0xD00]
	0x03BA75C8 BL 0x1C16CF4
	0x03BA75CC MOVZ W8, 0x1
	0x03BA75D0 STRB W8, [X20 + 0xC84]
	0x03BA75D4 LDR X1, [X21]
	0x03BA75D8 MOV X0, X19
	0x03BA75DC LDP X20, X19, [X31 + 0x10]
	0x03BA75E0 LDP X30, X21, [X31], #0x20
	0x03BA75E4 B 0x29AE60C
	0x03BA75E8 LDR X0, [X0 + 0x20]
	0x03BA75EC RET
	0x03BA75F0 STR X1, [X0 + 0x20]
	0x03BA75F4 RET
	0x03BA75F8 LDR W0, [X0 + 0x28]
	0x03BA75FC RET
	0x03BA7600 STR W1, [X0 + 0x28]
	0x03BA7604 RET
	0x03BA7608 LDR W0, [X0 + 0x2C]
	0x03BA760C RET
	0x03BA7610 STR W1, [X0 + 0x2C]
	0x03BA7614 RET
	0x03BA7618 LDR X0, [X0 + 0x30]
	0x03BA761C RET
	0x03BA7620 STR X1, [X0 + 0x30]
	0x03BA7624 RET
	0x03BA7628 LDR X0, [X0 + 0x38]
	0x03BA762C RET
	0x03BA7630 STR X1, [X0 + 0x38]
	0x03BA7634 RET
	0x03BA7638 LDR V0, [X0 + 0x40]
	0x03BA763C RET
	0x03BA7640 STR X30, [X31 - 0x10]!
	0x03BA7644 LDR X8, [X0 + 0x58]
	0x03BA7648 STR S0, [X0 + 0x40]
	0x03BA764C CBZ X8, 0x3BA765C
	0x03BA7650 STR S0, [X8 + 0xA8]
	0x03BA7654 LDR X30, [X31], #0x10
	0x03BA7658 RET
	0x03BA765C BL 0x1C16F20
	0x03BA7660 LDR V0, [X0 + 0x44]
	0x03BA7664 RET
	0x03BA7668 STR X30, [X31 - 0x10]!
	0x03BA766C MOV X8, X0
	0x03BA7670 LDR X0, [X0 + 0x58]
	0x03BA7674 STR S0, [X8 + 0x44]
	0x03BA7678 CBZ X0, 0x3BA7688
	0x03BA767C MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x83C000
	008 Move W8, [X20+3190]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x575000
	015 Move X0, [X0+960]
	016 Call 0x1C17CF4
	017 Move X0, 0x575000
	018 Move X0, [X0+1368]
	019 Call 0x1C17CF4
	020 Move X0, 0x5A3000
	021 Move X0, [X0+752]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3190], W8
	025 Move W8, [X19+288]
	026 Compare W8, 0
	027 JumpIfEqual {292}
	028 Move W8, [X19+412]
	029 Compare W8, 0
	030 JumpIfEqual {169}
	031 Move X21, 0x833000
	032 Move W8, [X21+2071]
	033 Compare W8, 0
	034 JumpIfNotEqual {40}
	035 Move X0, 0x575000
	036 Move X0, [X0+1320]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X21+2071], W8
	040 Move X22, 0x575000
	041 Move X22, [X22+1320]
	042 Move X8, [X22]
	043 Move X8, [X8+184]
	044 Move X8, [X8]
	045 Compare X8, 0
	046 JumpIfEqual {290}
	047 Move X0, [X8+368]
	048 Compare X0, 0
	049 JumpIfEqual {340}
	050 Move X23, 0x575000
	051 Move X23, [X23+1368]
	052 Add X20, X19, 416
	053 Move X1, [X23]
	054 Call InputControl`1<Vector2>.ReadValue, X0
	055 Move X0, X20
	056 Move X1, X31
	057 Call MouseModel.set_position, X0, X1
	058 Move W8, [X21+2071]
	059 Compare W8, 0
	060 JumpIfNotEqual {66}
	061 Move X0, 0x575000
	062 Move X0, [X0+1320]
	063 Call 0x1C17CF4
	064 Move W8, 1
	065 Move [X21+2071], W8
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move X8, [X8]
	069 Compare X8, 0
	070 JumpIfEqual {340}
	071 Move X0, [X8+408]
	072 Compare X0, 0
	073 JumpIfEqual {340}
	074 Move X8, 0x5A3000
	075 Move X8, [X8+752]
	076 Move X1, [X8]
	077 Call InputControl`1<Int32>.ReadValue, X0
	078 Move W1, W0
	079 Move X0, X20
	080 Move X2, X31
	081 Call MouseModel.set_displayIndex, X0, X1
	082 Move W8, [X21+2071]
	083 Compare W8, 0
	084 JumpIfNotEqual {90}
	085 Move X0, 0x575000
	086 Move X0, [X0+1320]
	087 Call 0x1C17CF4
	088 Move W8, 1
	089 Move [X21+2071], W8
	090 Move X8, [X22]
	091 Move X8, [X8+184]
	092 Move X8, [X8]
	093 Compare X8, 0
	094 JumpIfEqual {340}
	095 Move X0, [X8+416]
	096 Compare X0, 0
	097 JumpIfEqual {340}
	098 Move X1, [X23]
	099 Call InputControl`1<Vector2>.ReadValue, X0
	100 Move X8, -51101696
	101 Move V2, [X8+512]
	102 Move X0, X20
	103 Move X1, X31
	104 Multiply S0, S0, S2
	105 Multiply S1, S1, S2
	106 Call MouseModel.set_scrollDelta, X0, X1
	107 Move W8, [X21+2071]
	108 Compare W8, 0
	109 JumpIfNotEqual {115}
	110 Move X0, 0x575000
	111 Move X0, [X0+1320]
	112 Call 0x1C17CF4
	113 Move W8, 1
	114 Move [X21+2071], W8
	115 Move X8, [X22]
	116 Move X8, [X8+184]
	117 Move X8, [X8]
	118 Compare X8, 0
	119 JumpIfEqual {340}
	120 Move X0, [X8+424]
	121 Compare X0, 0
	122 JumpIfEqual {340}
	123 Move X1, X31
	124 Call ButtonControl.get_isPressed, X0
	125 And W1, W0, 1
	126 Move X0, X20
	127 Move X2, X31
	128 Call MouseModel.set_leftButtonPressed, X0, X1
	129 Move W8, [X21+2071]
	130 Compare W8, 0
	131 JumpIfNotEqual {137}
	132 Move X0, 0x575000
	133 Move X0, [X0+1320]
	134 Call 0x1C17CF4
	135 Move W8, 1
	136 Move [X21+2071], W8
	137 Move X8, [X22]
	138 Move X8, [X8+184]
	139 Move X8, [X8]
	140 Compare X8, 0
	141 JumpIfEqual {340}
	142 Move X0, [X8+440]
	143 Compare X0, 0
	144 JumpIfEqual {340}
	145 Move X1, X31
	146 Call ButtonControl.get_isPressed, X0
	147 And W1, W0, 1
	148 Move X0, X20
	149 Move X2, X31
	150 Call MouseModel.set_rightButtonPressed, X0, X1
	151 Move W8, [X21+2071]
	152 Compare W8, 0
	153 JumpIfNotEqual {159}
	154 Move X0, 0x575000
	155 Move X0, [X0+1320]
	156 Call 0x1C17CF4
	157 Move W8, 1
	158 Move [X21+2071], W8
	159 Move X8, [X22]
	160 Move X8, [X8+184]
	161 Move X8, [X8]
	162 Compare X8, 0
	163 JumpIfEqual {340}
	164 Move X0, [X8+432]
	165 Compare X0, 0
	166 JumpIfEqual {340}
	167 Move X1, X31
	168 Call ButtonControl.get_isPressed, X0
	169 Move X0, [X19+304]
	170 Call XRUIInputModule.IsActionEnabled, X0
	171 Move TEMP, X0
	172 And TEMP, TEMP, 1
	173 Compare TEMP, 1
	174 JumpIfNotEqual {205}
	175 Move X0, [X19+304]
	176 Compare X0, 0
	177 JumpIfEqual {340}
	178 Move X1, X31
	179 Call InputActionReference.get_action, X0
	180 Compare X0, 0
	181 JumpIfEqual {340}
	182 Move X8, 0x575000
	183 Move X8, [X8+960]
	184 Add X20, X19, 416
	185 Move X1, [X8]
	186 Call InputAction.ReadValue, X0
	187 Move X0, X20
	188 Move X1, X31
	189 Call MouseModel.set_position, X0, X1
	190 Move X0, [X19+304]
	191 Compare X0, 0
	192 JumpIfEqual {340}
	193 Move X1, X31
	194 Call InputActionReference.get_action, X0
	195 Compare X0, 0
	196 JumpIfEqual {340}
	197 Move X1, X31
	198 Call InputAction.get_activeControl, X0
	199 Move X1, X0
	200 Call XRUIInputModule.GetDisplayIndexFor, X0, X1
	201 Move W1, W0
	202 Move X0, X20
	203 Move X2, X31
	204 Call MouseModel.set_displayIndex, X0, X1
	205 Move X0, [X19+336]
	206 Call XRUIInputModule.IsActionEnabled, X0
	207 Move TEMP, X0
	208 And TEMP, TEMP, 1
	209 Compare TEMP, 1
	210 JumpIfNotEqual {230}
	211 Move X0, [X19+336]
	212 Compare X0, 0
	213 JumpIfEqual {340}
	214 Move X1, X31
	215 Call InputActionReference.get_action, X0
	216 Compare X0, 0
	217 JumpIfEqual {340}
	218 Move X8, 0x575000
	219 Move X8, [X8+960]
	220 Add X20, X19, 416
	221 Move X1, [X8]
	222 Call InputAction.ReadValue, X0
	223 Move X8, -51101696
	224 Move V2, [X8+512]
	225 Move X0, X20
	226 Move X1, X31
	227 Multiply S0, S0, S2
	228 Multiply S1, S1, S2
	229 Call MouseModel.set_scrollDelta, X0, X1
	230 Move X0, [X19+312]
	231 Call XRUIInputModule.IsActionEnabled, X0
	232 Move TEMP, X0
	233 And TEMP, TEMP, 1
	234 Compare TEMP, 1
	235 JumpIfNotEqual {250}
	236 Move X0, [X19+312]
	237 Compare X0, 0
	238 JumpIfEqual {340}
	239 Move X1, X31
	240 Call InputActionReference.get_action, X0
	241 Compare X0, 0
	242 JumpIfEqual {340}
	243 Move X1, X31
	244 Add X20, X19, 416
	245 Call InputAction.IsPressed, X0
	246 And W1, W0, 1
	247 Move X0, X20
	248 Move X2, X31
	249 Call MouseModel.set_leftButtonPressed, X0, X1
	250 Move X0, [X19+328]
	251 Call XRUIInputModule.IsActionEnabled, X0
	252 Move TEMP, X0
	253 And TEMP, TEMP, 1
	254 Compare TEMP, 1
	255 JumpIfNotEqual {270}
	256 Move X0, [X19+328]
	257 Compare X0, 0
	258 JumpIfEqual {340}
	259 Move X1, X31
	260 Call InputActionReference.get_action, X0
	261 Compare X0, 0
	262 JumpIfEqual {340}
	263 Move X1, X31
	264 Add X20, X19, 416
	265 Call InputAction.IsPressed, X0
	266 And W1, W0, 1
	267 Move X0, X20
	268 Move X2, X31
	269 Call MouseModel.set_rightButtonPressed, X0, X1
	270 Move X0, [X19+320]
	271 Call XRUIInputModule.IsActionEnabled, X0
	272 Move TEMP, X0
	273 And TEMP, TEMP, 1
	274 Compare TEMP, 1
	275 JumpIfNotEqual {290}
	276 Move X0, [X19+320]
	277 Compare X0, 0
	278 JumpIfEqual {340}
	279 Move X1, X31
	280 Call InputActionReference.get_action, X0
	281 Compare X0, 0
	282 JumpIfEqual {340}
	283 Move X1, X31
	284 Add X20, X19, 416
	285 Call InputAction.IsPressed, X0
	286 And W1, W0, 1
	287 Move X0, X20
	288 Move X2, X31
	289 Call MouseModel.set_middleButtonPressed, X0, X1
	290 Move W8, [X19+288]
	291 NotImplemented "Instruction CMP not yet implemented."
	292 Move X0, X31
	293 Call Input.get_mousePresent
	294 Move TEMP, X0
	295 And TEMP, TEMP, 1
	296 Compare TEMP, 1
	297 JumpIfNotEqual {330}
	298 Move X0, X31
	299 Add X20, X19, 416
	300 Call Input.get_mousePosition
	301 Move X0, X20
	302 Move X1, X31
	303 Call MouseModel.set_position, X0, X1
	304 Move X0, X31
	305 Call Input.get_mouseScrollDelta
	306 Move X0, X20
	307 Move X1, X31
	308 Call MouseModel.set_scrollDelta, X0, X1
	309 Move W0, W31
	310 Move X1, X31
	311 Call Input.GetMouseButton, X0
	312 And W1, W0, 1
	313 Move X0, X20
	314 Move X2, X31
	315 Call MouseModel.set_leftButtonPressed, X0, X1
	316 Move W0, 1
	317 Move X1, X31
	318 Call Input.GetMouseButton, X0
	319 And W1, W0, 1
	320 Move X0, X20
	321 Move X2, X31
	322 Call MouseModel.set_rightButtonPressed, X0, X1
	323 Move W0, 2
	324 Move X1, X31
	325 Call Input.GetMouseButton, X0
	326 And W1, W0, 1
	327 Move X0, X20
	328 Move X2, X31
	329 Call MouseModel.set_middleButtonPressed, X0, X1
	330 Add X1, X19, 416
	331 Move X0, X19
	332 Move X20, [X31+32]
	333 Move X19, [X31+40]
	334 Move X22, [X31+16]
	335 Move X21, [X31+24]
	336 Move X30, [X31+48]
	337 Move X23, [X31+56]
	338 Call UIInputModule.ProcessMouseState, X0, X1
	339 Return 
	340 Call 0x1C17F20

Method: System.Boolean ProcessTouches()

Disassembly:
	0x03BA6B8C CBZ X19, 0x3BA6BD0
	0x03BA6B90 MOV X0, X19
	0x03BA6B94 MOV X1, X31
	0x03BA6B98 BL 0x37451B4
	0x03BA6B9C CBZ X0, 0x3BA6BC0
	0x03BA6BA0 MOV X0, X19
	0x03BA6BA4 MOV X1, X31
	0x03BA6BA8 BL 0x37451B4
	0x03BA6BAC CBZ X0, 0x3BA6BD0
	0x03BA6BB0 LDP X20, X19, [X31 + 0x10]
	0x03BA6BB4 MOV X1, X31
	0x03BA6BB8 LDP X30, X21, [X31], #0x20
	0x03BA6BBC B 0x373485C
	0x03BA6BC0 LDP X20, X19, [X31 + 0x10]
	0x03BA6BC4 MOV W0, W31
	0x03BA6BC8 LDP X30, X21, [X31], #0x20
	0x03BA6BCC RET
	0x03BA6BD0 BL 0x1C16F20
	0x03BA6BD4 STR X30, [X31 - 0x20]!
	0x03BA6BD8 STP X20, X19, [X31 + 0x10]
	0x03BA6BDC ADRP X20, 0x83C000
	0x03BA6BE0 LDRB W8, [X20 + 0xC7E]
	0x03BA6BE4 MOV X19, X1
	0x03BA6BE8 TBNZ X8, 0x0, 0x3BA6C0C
	0x03BA6BEC ADRP X0, 0x5A3000
	0x03BA6BF0 LDR X0, [X0 + 0x2F0]
	0x03BA6BF4 BL 0x1C16CF4
	0x03BA6BF8 ADRP X0, 0x5A1000
	0x03BA6BFC LDR X0, [X0 + 0x3C0]
	0x03BA6C00 BL 0x1C16CF4
	0x03BA6C04 MOVZ W8, 0x1
	0x03BA6C08 STRB W8, [X20 + 0xC7E]
	0x03BA6C0C CBZ X19, 0x3BA6C4C
	0x03BA6C10 LDR X8, [X19 + 0x78]
	0x03BA6C14 CBZ X8, 0x3BA6C4C
	0x03BA6C18 ADRP X9, 0x5A1000
	0x03BA6C1C LDR X9, [X9 + 0x3C0]
	0x03BA6C20 LDR X10, [X8]
	0x03BA6C24 LDR X9, [X9]
	0x03BA6C28 LDRB W12, [X10 + 0x130]
	0x03BA6C2C LDRB W11, [X9 + 0x130]
	0x03BA6C30 CMP W12, W11
	0x03BA6C34 B.CC 0x3BA6C4C
	0x03BA6C38 LDR X10, [X10 + 0xC8]
	0x03BA6C3C ADD X10, X10, X11, 0x3, LSL
	0x03BA6C40 LDUR X10, [X10 - 0x8]
	0x03BA6C44 CMP X10, X9
	0x03BA6C48 B.EQ 0x3BA6C5C
	0x03BA6C4C LDP X20, X19, [X31 + 0x10]
	0x03BA6C50 MOV W0, W31
	0x03BA6C54 LDR X30, [X31], #0x20
	0x03BA6C58 RET
	0x03BA6C5C LDR X0, [X8 + 0x198]
	0x03BA6C60 CBZ X0, 0x3BA6C7C
	0x03BA6C64 ADRP X8, 0x5A3000
	0x03BA6C68 LDR X8, [X8 + 0x2F0]
	0x03BA6C6C LDP X20, X19, [X31 + 0x10]
	0x03BA6C70 LDR X1, [X8]
	0x03BA6C74 LDR X30, [X31], #0x20
	0x03BA6C78 B 0x2E00A18
	0x03BA6C7C BL 0x1C16F20
	0x03BA6C80 SUB X31, X31, 0xD0
	0x03BA6C84 STR X30, [X31 + 0xB0]
	0x03BA6C88 STP X20, X19, [X31 + 0xC0]
	0x03BA6C8C MOV X20, X0
	0x03BA6C90 MOV X0, X1
	0x03BA6C94 MOV X1, X31
	0x03BA6C98 MOV W19, W2
	0x03BA6C9C BL 0x3C845A8
	0x03BA6CA0 STR W0, [X20 + 0x4]
	0x03BA6CA4 ADD X0, X31, 0x8
	0x03BA6CA8 MOVZ W2, 0xA8
	0x03BA6CAC MOV W1, W31
	0x03BA6CB0 BL 0x3EB1B10
	0x03BA6CB4 ADD X0, X31, 0x8
	0x03BA6CB8 MOV W1, W19
	0x03BA6CBC BL 0x3B9A5B0
	0x03BA6CC0 ADD X0, X20, 0x8
	0x03BA6CC4 ADD X1, X31, 0x8
	0x03BA6CC8 MOVZ W2, 0xA8
	0x03BA6CCC BL 0x3EB1AC0
	0x03BA6CD0 MOVZ W8, 0x1
	0x03BA6CD4 STRB W8, [X20]
	0x03BA6CD8 LDP X20, X19, [X31 + 0xC0]
	0x03BA6CDC LDR X30, [X31 + 0xB0]
	0x03BA6CE0 ADD X31, X31, 0xD0
	0x03BA6CE4 RET
	0x03BA6CE8 STP X30, X21, [X31 - 0x20]!
	0x03BA6CEC STP X20, X19, [X31 + 0x10]
	0x03BA6CF0 ADRP X20, 0x83C000
	0x03BA6CF4 ADRP X21, 0x54D000
	0x03BA6CF8 LDRB W8, [X20 + 0xC7B]
	0x03BA6CFC LDR X21, [X21 + 0x598]
	0x03BA6D00 MOV X19, X0
	0x03BA6D04 TBNZ X8, 0x0, 0x3BA6D1C
	0x03BA6D08 ADRP X0, 0x54D000
	0x03BA6D0C LDR X0, [X0 + 0x598]
	0x03BA6D10 BL 0x1C16CF4
	0x03BA6D14 MOVZ W8, 0x1
	0x03BA6D18 STRB W8, [X20 + 0xC7B]
	0x03BA6D1C LDR X0, [X21]
	0x03BA6D20 LDR W8, [X0 + 0xE0]
	0x03BA6D24 CBNZ W8, 0x3BA6D2C
	0x03BA6D28 BL 0x1C16DFC
	0x03BA6D2C MOV X0, X19
	0x03BA6D30 MOV X1, X31
	0x03BA6D34 MOV X2, X31
	0x03BA6D38 BL 0x3C3883C
	0x03BA6D3C TBNZ X0, 0x0, 0x3BA6D74
	0x03BA6D40 CBZ X19, 0x3BA6D80
	0x03BA6D44 MOV X0, X19
	0x03BA6D48 MOV X1, X31
	0x03BA6D4C BL 0x37451B4
	0x03BA6D50 CBZ X0, 0x3BA6D74
	0x03BA6D54 MOV X0, X19
	0x03BA6D58 MOV X1, X31
	0x03BA6D5C BL 0x37451B4
	0x03BA6D60 CBZ X0, 0x3BA6D80
	0x03BA6D64 LDP X20, X19, [X31 + 0x10]
	0x03BA6D68 MOV X1, X31
	0x03BA6D6C LDP X30, X21, [X31], #0x20
	0x03BA6D70 B 0x37350C8
	0x03BA6D74 LDP X20, X19, [X31 + 0x10]
	0x03BA6D78 LDP X30, X21, [X31], #0x20
	0x03BA6D7C RET
	0x03BA6D80 BL 0x1C16F20
	0x03BA6D84 STP X30, X21, [X31 - 0x20]!
	0x03BA6D88 STP X20, X19, [X31 + 0x10]
	0x03BA6D8C ADRP X20, 0x83C000
	0x03BA6D90 ADRP X21, 0x54D000
	0x03BA6D94 LDRB W8, [X20 + 0xC7C]
	0x03BA6D98 LDR X21, [X21 + 0x598]
	0x03BA6D9C MOV X19, X0
	0x03BA6DA0 TBNZ X8, 0x0, 0x3BA6DB8
	0x03BA6DA4 ADRP X0, 0x54D000
	0x03BA6DA8 LDR X0, [X0 + 0x598]
	0x03BA6DAC BL 0x1C16CF4
	0x03BA6DB0 MOVZ W8, 0x1
	0x03BA6DB4 STRB W8, [X20 + 0xC7C]
	0x03BA6DB8 LDR X0, [X21]
	0x03BA6DBC LDR W8, [X0 + 0xE0]
	0x03BA6DC0 CBNZ W8, 0x3BA6DC8
	0x03BA6DC4 BL 0x1C16DFC
	0x03BA6DC8 MOV X0, X19
	0x03BA6DCC MOV X1, X31
	0x03BA6DD0 MOV X2, X31
	0x03BA6DD4 BL 0x3C3883C
	0x03BA6DD8 TBNZ X0, 0x0, 0x3BA6E10
	0x03BA6DDC CBZ X19, 0x3BA6E1C
	0x03BA6DE0 MOV X0, X19
	0x03BA6DE4 MOV X1, X31
	0x03BA6DE8 BL 0x37451B4
	0x03BA6DEC CBZ X0, 0x3BA6E10
	0x03BA6DF0 MOV X0, X19
	0x03BA6DF4 MOV X1, X31
	0x03BA6DF8 BL 0x37451B4
	0x03BA6DFC CBZ X0, 0x3BA6E1C
	0x03BA6E00 LDP X20, X19, [X31 + 0x10]
	0x03BA6E04 MOV X1, X31
	0x03BA6E08 LDP X30, X21, [X31], #0x20
	0x03BA6E0C B 0x3735150
	0x03BA6E10 LDP X20, X19, [X31 + 0x10]
	0x03BA6E14 LDP X30, X21, [X31], #0x20
	0x03BA6E18 RET
	0x03BA6E1C BL 0x1C16F20
	0x03BA6E20 LDR V0, [X0 + 0x124]
	0x03BA6E24 RET
	0x03BA6E28 STR S0, [X0 + 0x124]
	0x03BA6E2C RET
	0x03BA6E30 STP X29, X30, [X31 - 0x60]!
	0x03BA6E34 STP X28, X27, [X31 + 0x10]
	0x03BA6E38 STP X26, X25, [X31 + 0x20]
	0x03BA6E3C STP X24, X23, [X31 + 0x30]
	0x03BA6E40 STP X22, X21, [X31 + 0x40]
	0x03BA6E44 STP X20, X19, [X31 + 0x50]
	0x03BA6E48 ADRP X29, 0x83C000
	0x03BA6E4C ADRP X28, 0x5A0000
	0x03BA6E50 ADRP X27, 0x5A0000
	0x03BA6E54 ADRP X26, 0x5A0000
	0x03BA6E58 ADRP X25, 0x591000
	0x03BA6E5C ADRP X24, 0x5B6000
	0x03BA6E60 ADRP X20, 0x5B6000
	0x03BA6E64 ADRP X23, 0x5B6000
	0x03BA6E68 ADRP X21, 0x5B6000
	0x03BA6E6C ADRP X22, 0x5B6000
	0x03BA6E70 LDR X28, [X28 + 0xAF0]
	0x03BA6E74 LDR X27, [X27 + 0xAC0]
	0x03BA6E78 LDR X26, [X26 + 0xAB8]
	0x03BA6E7C LDR X25, [X25 + 0xB08]
	0x03BA6E80 LDRB W8, [X29 + 0xC7F]
	0x03BA6E84 LDR X24, [X24 + 0xCA0]
	0x03BA6E88 LDR X20, [X20 + 0xCA8]
	0x03BA6E8C LDR X23, [X23 + 0xCB0]
	0x03BA6E90 LDR X21, [X21 + 0xCB8]
	0x03BA6E94 LDR X22, [X22 + 0xCC0]
	0x03BA6E98 MOV X19, X0
	0x03BA6E9C TBNZ X8, 0x0, 0x3BA6F44
	0x03BA6EA0 ADRP X0, 0x5B6000
	0x03BA6EA4 LDR X0, [X0 + 0xCC8]
	0x03BA6EA8 BL 0x1C16CF4
	0x03BA6EAC ADRP X0, 0x5B6000
	0x03BA6EB0 LDR X0, [X0 + 0xCD0]
	0x03BA6EB4 BL 0x1C16CF4
	0x03BA6EB8 ADRP X0, 0x5B6000
	0x03BA6EBC LDR X0, [X0 + 0xCD8]
	0x03BA6EC0 BL 0x1C16CF4
	0x03BA6EC4 ADRP X0, 0x5B6000
	0x03BA6EC8 LDR X0, [X0 + 0xCB8]
	0x03BA6ECC BL 0x1C16CF4
	0x03BA6ED0 ADRP X0, 0x5B6000
	0x03BA6ED4 LDR X0, [X0 + 0xCA8]
	0x03BA6ED8 BL 0x1C16CF4
	0x03BA6EDC ADRP X0, 0x5B6000
	0x03BA6EE0 LDR X0, [X0 + 0xCA0]
	0x03BA6EE4 BL 0x1C16CF4
	0x03BA6EE8 ADRP X0, 0x5B6000
	0x03BA6EEC LDR X0, [X0 + 0xCB0]
	0x03BA6EF0 BL 0x1C16CF4
	0x03BA6EF4 ADRP X0, 0x5B6000
	0x03BA6EF8 LDR X0, [X0 + 0xCE0]
	0x03BA6EFC BL 0x1C16CF4
	0x03BA6F00 ADRP X0, 0x5B6000
	0x03BA6F04 LDR X0, [X0 + 0xCC0]
	0x03BA6F08 BL 0x1C16CF4
	0x03BA6F0C ADRP X0, 0x5A0000
	0x03BA6F10 LDR X0, [X0 + 0xAB8]
	0x03BA6F14 BL 0x1C16CF4
	0x03BA6F18 ADRP X0, 0x5A0000
	0x03BA6F1C LDR X0, [X0 + 0xAC0]
	0x03BA6F20 BL 0x1C16CF4
	0x03BA6F24 ADRP X0, 0x5A0000
	0x03BA6F28 LDR X0, [X0 + 0xAF0]
	0x03BA6F2C BL 0x1C16CF4
	0x03BA6F30 ADRP X0, 0x591000
	0x03BA6F34 LDR X0, [X0 + 0xB08]
	0x03BA6F38 BL 0x1C16CF4
	0x03BA6F3C MOVZ W8, 0x1
	0x03BA6F40 STRB W8, [X29 + 0xC7F]
	0x03BA6F44 MOVZ W8, 0x447A0000
	0x03BA6F48 MOVZ W9, 0x101
	0x03BA6F4C STR W8, [X19 + 0x124]
	0x03BA6F50 MOVZ W8, 0x1
	0x03BA6F54 STRH W9, [X19 + 0x128]
	0x03BA6F58 STRB W8, [X19 + 0x12A]
	0x03BA6F5C STRH W9, [X19 + 0x170]
	0x03BA6F60 STRB W8, [X19 + 0x172]
	0x03BA6F64 LDR X9, [X28]
	0x03BA6F68 LDR X8, [X27]
	0x03BA6F6C STP X9, X8, [X19 + 0x178]
	0x03BA6F70 LDR X9, [X26]
	0x03BA6F74 LDR X8, [X25]
	0x03BA6F78 STP X9, X8, [X19 + 0x188]
	0x03BA6F7C LDR X0, [X24]
	0x03BA6F80 BL 0x1C16F10
	0x03BA6F84 LDR X1, [X20]
	0x03BA6F88 MOV X20, X0
	0x03BA6F8C BL 0x3181044
	0x03BA6F90 STR X20, [X19 + 0x378]
	0x03BA6F94 LDR X0, [X23]
	0x03BA6F98 BL 0x1C16F10
	0x03BA6F9C LDR X1, [X21]
	0x03BA6FA0 MOV X20, X0
	0x03BA6FA4 BL 0x317DC5C
	0x03BA6FA8 STR X20, [X19 + 0x380]
	0x03BA6FAC LDR X0, [X22]
	0x03BA6FB0 LDR W8, [X0 + 0xE0]
	0x03BA6FB4 CBNZ W8, 0x3BA6FC0
	0x03BA6FB8 BL 0x1C16DFC
	0x03BA6FBC LDR X0, [X22]
	0x03BA6FC0 LDR X8, [X0 + 0xB8]
	0x03BA6FC4 ADRP X24, 0x5B6000
	0x03BA6FC8 ADRP X23, 0x5B6000
	0x03BA6FCC LDR X20, [X8 + 0x8]
	0x03BA6FD0 LDR X24, [X24 + 0xCD8]
	0x03BA6FD4 LDR X23, [X23 + 0xCD0]
	0x03BA6FD8 CBNZ X20, 0x3BA702C
	0x03BA6FDC LDR W8, [X0 + 0xE0]
	0x03BA6FE0 CBNZ W8, 0x3BA6FEC
	0x03BA6FE4 BL 0x1C16DFC
	0x03BA6FE8 LDR X0, [X22]
	0x03BA6FEC ADRP X9, 0x5B6000
	0x03BA6FF0 LDR X8, [X0 + 0xB8]
	0x03BA6FF4 LDR X9, [X9 + 0xCC8]
	0x03BA6FF8 LDR X21, [X8]
	0x03BA6FFC LDR X0, [X9]
	0x03BA7000 BL 0x1C16F10
	0x03BA7004 ADRP X8, 0x5B5000
	0x03BA7008 LDR X8, [X8 + 0xCE0]
	0x03BA700C MOV X1, X21
	0x03BA7010 MOV X3, X31
	0x03BA7014 MOV X20, X0
	0x03BA7018 LDR X2, [X8]
	0x03BA701C BL 0x2D27AA8
	0x03BA7020 LDR X8, [X22]
	0x03BA7024 LDR X8, [X8 + 0xB8]
	0x03BA7028 STR X20, [X8 + 0x8]
	0x03BA702C LDR X0, [X24]
	0x03BA7030 BL 0x1C16F10
	0x03BA7034 LDR X7, [X23]
	0x03BA7038 MOVZ W6, 0x2710
	0x03BA703C MOV X1, X20
	0x03BA7040 MOV X2, X31
	0x03BA7044 MOV X3, X31
	0x03BA7048 MOV X4, X31
	0x03BA704C MOV W5, W31
	0x03BA7050 MOV X21, X0
	0x03BA7054 BL 0x2EF0EC8
	0x03BA7058 STR X21, [X19 + 0x388]
	0x03BA705C MOV X0, X19
	0x03BA7060 LDP X20, X19, [X31 + 0x50]
	0x03BA7064 LDP X22, X21, [X31 + 0x40]
	0x03BA7068 LDP X24, X23, [X31 + 0x30]
	0x03BA706C LDP X26, X25, [X31 + 0x20]
	0x03BA7070 LDP X28, X27, [X31 + 0x10]
	0x03BA7074 LDP X29, X30, [X31], #0x60
	0x03BA7078 B 0x3BA4E14
	0x03BA707C STR X30, [X31 - 0x20]!
	0x03BA7080 STP X20, X19, [X31 + 0x10]
	0x03BA7084 ADRP X19, 0x83B000
	0x03BA7088 ADRP X20, 0x5B5000
	0x03BA708C LDRB W8, [X19 + 0xC80]
	0x03BA7090 LDR X20, [X20 + 0xCC0]
	0x03BA7094 TBNZ X8, 0x0, 0x3BA70AC
	0x03BA7098 ADRP X0, 0x5B5000
	0x03BA709C LDR X0, [X0 + 0xCC0]
	0x03BA70A0 BL 0x1C16CF4
	0x03BA70A4 MOVZ W8, 0x1
	0x03BA70A8 STRB W8, [X19 + 0xC80]
	0x03BA70AC LDR X0, [X20]
	0x03BA70B0 BL 0x1C16F10
	0x03BA70B4 MOV X1, X31
	0x03BA70B8 MOV X19, X0
	0x03BA70BC BL 0x33BDD8C
	0x03BA70C0 LDR X8, [X20]
	0x03BA70C4 LDR X8, [X8 + 0xB8]
	0x03BA70C8 STR X19, [X8]
	0x03BA70CC LDP X20, X19, [X31 + 0x10]
	0x03BA70D0 LDR X30, [X31], #0x20
	0x03BA70D4 RET
	0x03BA70D8 MOV X1, X31
	0x03BA70DC B 0x33BDD8C
	0x03BA70E0 STR X30, [X31 - 0x20]!
	0x03BA70E4 STP X20, X19, [X31 + 0x10]
	0x03BA70E8 ADRP X19, 0x83B000
	0x03BA70EC ADRP X20, 0x5B5000
	0x03BA70F0 LDRB W8, [X19 + 0xC81]
	0x03BA70F4 LDR X20, [X20 + 0xCE8]
	0x03BA70F8 TBNZ X8, 0x0, 0x3BA7110
	0x03BA70FC ADRP X0, 0x5B5000
	0x03BA7100 LDR X0, [X0 + 0xCE8]
	0x03BA7104 BL 0x1C16CF4
	0x03BA7108 MOVZ W8, 0x1
	0x03BA710C STRB W8, [X19 + 0xC81]
	0x03BA7110 LDR X0, [X20]
	0x03BA7114 BL 0x1C16F10
	0x03BA7118 MOV X1, X31
	0x03BA711C MOV X19, X0
	0x03BA7120 BL 0x33BDD8C
	0x03BA7124 MOV X0, X19
	0x03BA7128 LDP X20, X19, [X31 + 0x10]
	0x03BA712C LDR X30, [X31], #0x20
	0x03BA7130 RET
	0x03BA7134 LDR V0, [X0 + 0x4C]
	0x03BA7138 RET
	0x03BA713C LDR V0, [X0 + 0x58]
	0x03BA7140 RET
	0x03BA7144 LDR V0, [X0 + 0x64]
	0x03BA7148 RET
	0x03BA714C STR D8, [X31 - 0x30]!
	0x03BA7150 STP X30, X21, [X31 + 0x10]
	0x03BA7154 STP X20, X19, [X31 + 0x20]
	0x03BA7158 CBZ X1, 0x3BA726C
	0x03BA715C MOV X21, X1
	0x03BA7160 MOV X19, X0
	0x03BA7164 MOV X0, X1
	0x03BA7168 MOV X1, X31
	0x03BA716C MOV X20, X2
	0x03BA7170 BL 0x3C32E90
	0x03BA7174 CBZ X0, 0x3BA726C
	0x03BA7178 LDP S1, S2, [X19 + 0x20]
	0x03BA717C LDR V0, [X19 + 0x1C]
	0x03BA7180 MOV X1, X31
	0x03BA7184 BL 0x3C3EC04
	0x03BA7188 MOV X0, X21
	0x03BA718C MOV X1, X31
	0x03BA7190 BL 0x3C32E90
	0x03BA7194 ADRP X8, 0xFFFFFFFFFCF43000
	0x03BA7198 LDR V8, [X8 + 0x104]
	0x03BA719C LDP S0, S1, [X19 + 0x34]
	0x03BA71A0 LDR V2, [X19 + 0x3C]
	0x03BA71A4 MOV X21, X0
	0x03BA71A8 MOV X0, X31
	0x03BA71AC FMUL S0, S0, S8
	0x03BA71B0 FMUL S1, S1, S8
	0x03BA71B4 FMUL S2, S2, S8
	0x03BA71B8 BL 0x3C2A574
	0x03BA71BC CBZ X21, 0x3BA726C
	0x03BA71C0 MOV X0, X21
	0x03BA71C4 MOV X1, X31
	0x03BA71C8 BL 0x3C3F8B8
	0x03BA71CC CBZ X20, 0x3BA726C
	0x03BA71D0 MOV X0, X20
	0x03BA71D4 MOV X1, X31
	0x03BA71D8 BL 0x3C32E90
	0x03BA71DC CBZ X0, 0x3BA726C
	0x03BA71E0 LDP S1, S2, [X19 + 0x14]
	0x03BA71E4 LDR V0, [X19 + 0x10]
	0x03BA71E8 MOV X1, X31
	0x03BA71EC BL 0x3C3EC04
	0x03BA71F0 MOV X0, X20
	0x03BA71F4 MOV X1, X31
	0x03BA71F8 BL 0x3C32E90
	0x03BA71FC LDP S0, S1, [X19 + 0x28]
	0x03BA7200 LDR V2, [X19 + 0x30]
	0x03BA7204 MOV X20, X0
	0x03BA7208 MOV X0, X31
	0x03BA720C FMUL S0, S0, S8
	0x03BA7210 FMUL S1, S1, S8
	0x03BA7214 FMUL S2, S2, S8

ISIL:
	001 Move [X31-144], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X29
	007 Move [X31+56], X30
	008 Move [X31+64], X28
	009 Move [X31+72], X27
	010 Move [X31+80], X26
	011 Move [X31+88], X25
	012 Move [X31+96], X24
	013 Move [X31+104], X23
	014 Move [X31+112], X22
	015 Move [X31+120], X21
	016 Move [X31+128], X20
	017 Move [X31+136], X19
	018 Subtract X31, X31, 1136
	019 NotImplemented "Instruction MRS not yet implemented."
	020 Move X8, [X25+40]
	021 Move X20, 0x83D000
	022 Move X19, X0
	023 Move [X31+1128], X8
	024 Move W8, [X20+3191]
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {43}
	029 Move X0, 0x5B7000
	030 Move X0, [X0+3200]
	031 Call 0x1C17CF4
	032 Move X0, 0x5B7000
	033 Move X0, [X0+3208]
	034 Call 0x1C17CF4
	035 Move X0, 0x5B7000
	036 Move X0, [X0+3216]
	037 Call 0x1C17CF4
	038 Move X0, 0x5B7000
	039 Move X0, [X0+3224]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X20+3191], W8
	043 NotImplemented "Instruction MOVI not yet implemented."
	044 Add X0, X31, 544
	045 Move W2, 136
	046 Move W1, W31
	047 Move [X31+752], W31
	048 Move [X31+1112], X31
	049 Move [X31+1120], W31
	050 NotImplemented "Instruction STRH not yet implemented."
	051 Move [X31+720], V0
	052 Move [X31+728], V0
	053 Move [X31+688], V0
	054 Move [X31+696], V0
	055 Move [X31+686], W31
	056 Call 0x3EB2B10
	057 Add X0, X31, 368
	058 Move W2, 176
	059 Move W1, W31
	060 Call 0x3EB2B10
	061 Move X0, X31
	062 Call Input.get_touchCount
	063 Move W20, W0
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move [X31+12], W20
	066 Move [X31+16], X25
	067 Move X29, 0x5B7000
	068 Move X29, [X29+3216]
	069 Move X0, X31
	070 Call Input.get_touchCount
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move [X31+44], W0
	073 Move X9, -51101696
	074 Move V8, [X9+3872]
	075 Add X8, X31, 768
	076 Move W22, W31
	077 Or X11, X8, 1
	078 Add X10, X8, 8
	079 Add X23, X8, 17
	080 Add X24, X8, 40
	081 Move [X31+24], X10
	082 Move [X31+32], X11
	083 Add X8, X31, 768
	084 Move W0, W22
	085 Move X1, X31
	086 Call Input.GetTouch, X0
	087 Add X0, X31, 688
	088 Add X1, X31, 768
	089 Move W2, 68
	090 Call 0x3EB2AC0
	091 Move X8, [X19+888]
	092 Compare X8, 0
	093 JumpIfEqual {427}
	094 Move W25, W31
	095 Move W8, [X8+24]
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Add X0, X31, 688
	098 Move X1, X31
	099 Call Touch.get_fingerId, X0
	100 Move X9, [X19+888]
	101 Compare X9, 0
	102 JumpIfEqual {427}
	103 Move X2, [X29]
	104 Move W26, W0
	105 Add X8, X31, 768
	106 Move X0, X9
	107 Move W1, W25
	108 Call List`1<RegisteredTouch>.get_Item, X0, X1
	109 Move W8, [X31+772]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move X8, [X19+888]
	112 Add W25, W25, 1
	113 Compare X8, 0
	114 JumpIfNotEqual {95}
	115 Move TEMP, 0
	116 Not TEMP
	117 Move W25, TEMP
	118 Move TEMP, X25
	119 And TEMP, TEMP, -2147483648
	120 Compare TEMP, -2147483648
	121 JumpIfNotEqual {281}
	122 Move X0, [X19+888]
	123 Compare X0, 0
	124 JumpIfEqual {427}
	125 Move W26, W31
	126 Move W8, [X0+24]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X2, [X29]
	129 Add X8, X31, 768
	130 Move W1, W26
	131 Call List`1<RegisteredTouch>.get_Item, X0, X1
	132 Move W8, [X31+768]
	133 Move TEMP, X8
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfNotEqual {146}
	137 Move X0, [X19+888]
	138 Add W26, W26, 1
	139 Compare X0, 0
	140 JumpIfNotEqual {126}
	141 Move W26, W25
	142 Move TEMP, X26
	143 And TEMP, TEMP, -2147483648
	144 Compare TEMP, -2147483648
	145 JumpIfNotEqual {281}
	146 Move X0, [X19+888]
	147 Compare X0, 0
	148 JumpIfEqual {427}
	149 Move X2, [X29]
	150 Add X8, X31, 768
	151 Move W1, W26
	152 Call List`1<RegisteredTouch>.get_Item, X0, X1
	153 Move W28, [X31+776]
	154 Move X25, [X19+888]
	155 Add X0, X31, 296
	156 Add X1, X31, 688
	157 Move W2, 68
	158 Call 0x3EB2AC0
	159 Add X0, X31, 296
	160 Move X1, X31
	161 NotImplemented "Instruction STRH not yet implemented."
	162 Move [X31+946], W31
	163 Call Touch.get_fingerId, X0
	164 Move W27, W0
	165 Add X0, X31, 768
	166 Move W2, 168
	167 Move W1, W31
	168 Call 0x3EB2B10
	169 Add X0, X31, 768
	170 Move W1, W28
	171 Call TouchModel..ctor, X0, X1
	172 Add X0, X31, 48
	173 Add X1, X31, 768
	174 Move W2, 168
	175 Call 0x3EB2AC0
	176 Compare X25, 0
	177 JumpIfEqual {427}
	178 Move X10, 0x5B7000
	179 Move W8, [X31+946]
	180 NotImplemented "Instruction LDRH not yet implemented."
	181 Move X10, [X10+3224]
	182 Add X1, X31, 48
	183 Move W2, 168
	184 Move X28, [X10]
	185 Move W10, 1
	186 Move [X31+768], W10
	187 Move X0, [X31+24]
	188 Move X10, [X31+32]
	189 Move [X10+2], W8
	190 NotImplemented "Instruction STRH not yet implemented."
	191 Move [X31+772], W27
	192 Call 0x3EB2AC0
	193 Add X2, X31, 768
	194 Move X0, X25
	195 Move W1, W26
	196 Move X3, X28
	197 Call List`1<RegisteredTouch>.set_Item, X0, X1, X2
	198 Move W25, W26
	199 Move TEMP, X26
	200 And TEMP, TEMP, -2147483648
	201 Compare TEMP, -2147483648
	202 JumpIfNotEqual {281}
	203 Move X26, [X19+888]
	204 Compare X26, 0
	205 JumpIfEqual {427}
	206 Move W25, [X26+24]
	207 Add X0, X31, 224
	208 Add X1, X31, 688
	209 Move W2, 68
	210 Call 0x3EB2AC0
	211 Move W28, [X19+408]
	212 Add X0, X31, 224
	213 Move X1, X31
	214 Add W8, W28, 1
	215 Move [X19+408], W8
	216 Call Touch.get_fingerId, X0
	217 Move W27, W0
	218 Add X0, X31, 768
	219 Move W2, 168
	220 Move W1, W31
	221 Call 0x3EB2B10
	222 Add X0, X31, 768
	223 Move W1, W28
	224 Call TouchModel..ctor, X0, X1
	225 Add X0, X31, 944
	226 Add X1, X31, 768
	227 Move W2, 168
	228 Call 0x3EB2AC0
	229 Move X8, 0x5B7000
	230 Move X8, [X8+3200]
	231 Add X0, X31, 48
	232 Add X1, X31, 944
	233 Move W2, 168
	234 Move X20, [X8]
	235 NotImplemented "Instruction STRH not yet implemented."
	236 Move [X31+766], W31
	237 Call 0x3EB2AC0
	238 Move W9, [X26+28]
	239 Move X8, [X26+16]
	240 Add W9, W9, 1
	241 Move [X26+28], W9
	242 Compare X8, 0
	243 JumpIfEqual {427}
	244 NotImplemented "Instruction LDRSW not yet implemented."
	245 Move W10, [X8+24]
	246 NotImplemented "Instruction CMP not yet implemented."
	247 Move W11, 176
	248 Add W10, W9, 1
	249 NotImplemented "Instruction MADD not yet implemented."
	250 Move W9, 1
	251 Move [X26+24], W10
	252 Move [X8+32], W9
	253 Move W9, [X31+766]
	254 NotImplemented "Instruction LDRH not yet implemented."
	255 Add X0, X8, 40
	256 Add X1, X31, 48
	257 Move W2, 168
	258 Move [X8+36], W27
	259 Move [X8+35], W9
	260 NotImplemented "Instruction STURH not yet implemented."
	261 Call 0x3EB2AC0
	262 Move X8, [X20+32]
	263 Move W9, [X31+766]
	264 NotImplemented "Instruction LDRH not yet implemented."
	265 Add X1, X31, 48
	266 Move X8, [X8+192]
	267 Move W2, 168
	268 Move X28, [X8+112]
	269 Move W8, 1
	270 Move [X31+768], W8
	271 Move X0, [X31+24]
	272 Move X8, [X31+32]
	273 Move [X8+2], W9
	274 NotImplemented "Instruction STRH not yet implemented."
	275 Move [X31+772], W27
	276 Call 0x3EB2AC0
	277 Add X1, X31, 768
	278 Move X0, X26
	279 Move X2, X28
	280 Call List`1<RegisteredTouch>.AddWithResize, X0, X1
	281 Move X0, [X19+888]
	282 Compare X0, 0
	283 JumpIfEqual {427}
	284 Move X2, [X29]
	285 Add X8, X31, 768
	286 Move W1, W25
	287 Call List`1<RegisteredTouch>.get_Item, X0, X1
	288 Move X8, [X31+768]
	289 Move W9, [X31+776]
	290 Move W10, [X23+2]
	291 NotImplemented "Instruction LDRH not yet implemented."
	292 Move W21, [X31+780]
	293 Move W20, [X31+784]
	294 Move V9, [X31+788]
	295 Move V12, [X31+792]
	296 Move W27, [X31+796]
	297 Move V10, [X31+800]
	298 Move V11, [X31+804]
	299 Add X0, X31, 544
	300 Move W2, 136
	301 Move X1, X24
	302 Move [X31+1120], W9
	303 Move [X31+1112], X8
	304 NotImplemented "Instruction STRH not yet implemented."
	305 Move [X31+686], W10
	306 Call 0x3EB2AC0
	307 Add X0, X31, 688
	308 Move X1, X31
	309 Call Touch.get_phase, X0
	310 NotImplemented "Instruction CMP not yet implemented."
	311 Move W26, W27
	312 Subtract W8, W0, 3
	313 Move W26, W0
	314 NotImplemented "Instruction CMP not yet implemented."
	315 Or W21, W21, 2
	316 Compare W26, 0
	317 JumpIfNotEqual {319}
	318 Or W21, W21, 1
	319 Move W20, 1
	320 Add X0, X31, 688
	321 Move X1, X31
	322 Call Touch.get_position, X0
	323 Subtract S2, S10, S0
	324 Subtract S3, S11, S1
	325 Multiply S2, S2, S2
	326 Multiply S3, S3, S3
	327 Add S2, S2, S3
	328 NotImplemented "Instruction FCMP not yet implemented."
	329 Subtract S9, S0, S10
	330 Subtract S12, S1, S11
	331 Move W20, 1
	332 Move V10, V0
	333 Move V11, V1
	334 Move X8, [X31+1112]
	335 Move W9, [X31+1120]
	336 NotImplemented "Instruction LDRH not yet implemented."
	337 Move W11, [X31+686]
	338 Move X27, [X19+888]
	339 Add X0, X31, 48
	340 Add X1, X31, 544
	341 Move W2, 136
	342 Move [X31+944], X8
	343 Move [X31+952], W9
	344 NotImplemented "Instruction STRH not yet implemented."
	345 Move [X31+766], W11
	346 Call 0x3EB2AC0
	347 Compare X27, 0
	348 JumpIfEqual {427}
	349 Move X8, 0x5B6000
	350 Move X8, [X8+3224]
	351 Move W9, [X31+952]
	352 Move W10, [X31+766]
	353 Add X1, X31, 48
	354 Move X28, [X8]
	355 Move X8, [X31+944]
	356 Move W2, 136
	357 Move X0, X24
	358 Move [X31+784], W20
	359 Move [X31+768], X8
	360 NotImplemented "Instruction LDRH not yet implemented."
	361 Move [X31+776], W9
	362 Move [X31+780], W21
	363 Move [X23+2], W10
	364 NotImplemented "Instruction STRH not yet implemented."
	365 Move [X31+788], S9
	366 Move [X31+792], S12
	367 Move [X31+796], W26
	368 Move [X31+800], S10
	369 Move [X31+804], S11
	370 Call 0x3EB2AC0
	371 Add X2, X31, 768
	372 Move X0, X27
	373 Move W1, W25
	374 Move X3, X28
	375 Call List`1<RegisteredTouch>.set_Item, X0, X1, X2
	376 Move W8, [X31+44]
	377 Add W22, W22, 1
	378 NotImplemented "Instruction CMP not yet implemented."
	379 Move X26, 0x5B6000
	380 Move X0, [X19+888]
	381 Move X25, [X31+16]
	382 Move W20, [X31+12]
	383 Move X26, [X26+3224]
	384 Compare X0, 0
	385 JumpIfEqual {427}
	386 Add X8, X31, 368
	387 Move W21, W31
	388 Add X22, X8, 8
	389 Move W8, [X0+24]
	390 NotImplemented "Instruction CMP not yet implemented."
	391 Move X2, [X29]
	392 Add X8, X31, 768
	393 Move W1, W21
	394 Call List`1<RegisteredTouch>.get_Item, X0, X1
	395 Add X0, X31, 368
	396 Add X1, X31, 768
	397 Move W2, 176
	398 Call 0x3EB2AC0
	399 Move X0, X19
	400 Move X1, X22
	401 Call UIInputModule.ProcessTouch, X0, X1
	402 Move W8, [X31+396]
	403 Subtract W8, W8, 3
	404 NotImplemented "Instruction CMP not yet implemented."
	405 Move [X31+368], W31
	406 Move X23, [X19+888]
	407 Add X0, X31, 48
	408 Add X1, X31, 368
	409 Move W2, 176
	410 Call 0x3EB2AC0
	411 Compare X23, 0
	412 JumpIfEqual {427}
	413 Move X24, [X26]
	414 Add X0, X31, 768
	415 Add X1, X31, 48
	416 Move W2, 176
	417 Call 0x3EB2AC0
	418 Add X2, X31, 768
	419 Move X0, X23
	420 Move W1, W21
	421 Move X3, X24
	422 Call List`1<RegisteredTouch>.set_Item, X0, X1, X2
	423 Move X0, [X19+888]
	424 Add W21, W21, 1
	425 Compare X0, 0
	426 JumpIfNotEqual {389}
	427 Call 0x1C17F20
	428 Move X8, [X25+40]
	429 Move X9, [X31+1128]
	430 NotImplemented "Instruction CMP not yet implemented."
	431 NotImplemented "Instruction CSET not yet implemented."
	432 NotImplemented "Instruction CMP not yet implemented."
	433 Add X31, X31, 1136
	434 Move X20, [X31+128]
	435 Move X19, [X31+136]
	436 Move X22, [X31+112]
	437 Move X21, [X31+120]
	438 Move X24, [X31+96]
	439 Move X23, [X31+104]
	440 Move X26, [X31+80]
	441 Move X25, [X31+88]
	442 Move X28, [X31+64]
	443 Move X27, [X31+72]
	444 Move X29, [X31+48]
	445 Move X30, [X31+56]
	446 Move D9, [X31+32]
	447 Move D8, [X31+40]
	448 Move D11, [X31+16]
	449 Move D10, [X31+24]
	450 Move V12, [X31+144]
	451 Return X0
	452 Call 0x3EB2B20

Method: System.Void ProcessNavigation()

Disassembly:
	0x03BA7680 LDR X30, [X31], #0x10
	0x03BA7684 B 0x3B92118
	0x03BA7688 BL 0x1C16F20
	0x03BA768C LDR V0, [X0 + 0x48]
	0x03BA7690 RET
	0x03BA7694 STR X30, [X31 - 0x10]!
	0x03BA7698 LDR X8, [X0 + 0x58]
	0x03BA769C STR S0, [X0 + 0x48]
	0x03BA76A0 CBZ X8, 0x3BA76B0
	0x03BA76A4 STR S0, [X8 + 0xB0]
	0x03BA76A8 LDR X30, [X31], #0x10
	0x03BA76AC RET
	0x03BA76B0 BL 0x1C16F20
	0x03BA76B4 LDRB W0, [X0 + 0x4C]
	0x03BA76B8 RET
	0x03BA76BC AND W8, W1, 0x1
	0x03BA76C0 STRB W8, [X0 + 0x4C]
	0x03BA76C4 RET
	0x03BA76C8 LDR V0, [X0 + 0x50]
	0x03BA76CC RET
	0x03BA76D0 STP X30, X19, [X31 - 0x10]!
	0x03BA76D4 ADRP X8, 0xFFFFFFFFFCF43000
	0x03BA76D8 LDR V1, [X8 + 0x104]
	0x03BA76DC STR S0, [X0 + 0x50]
	0x03BA76E0 MOV X19, X0
	0x03BA76E4 FMUL S0, S0, S1
	0x03BA76E8 BL 0x3EB1BD0
	0x03BA76EC STR S0, [X19 + 0x54]
	0x03BA76F0 LDP X30, X19, [X31], #0x10
	0x03BA76F4 RET
	0x03BA76F8 ADRP X8, 0xFFFFFFFFFCF43000
	0x03BA76FC LDR V1, [X8 + 0x104]
	0x03BA7700 FMUL S0, S0, S1
	0x03BA7704 B 0x3EB1BD0
	0x03BA7708 LDRB W0, [X0 + 0x88]
	0x03BA770C RET
	0x03BA7710 AND W8, W1, 0x1
	0x03BA7714 STRB W8, [X0 + 0x88]
	0x03BA7718 RET
	0x03BA771C LDR V0, [X0 + 0x8C]
	0x03BA7720 RET
	0x03BA7724 STR S0, [X0 + 0x8C]
	0x03BA7728 RET
	0x03BA772C STP X30, X21, [X31 - 0x20]!
	0x03BA7730 STP X20, X19, [X31 + 0x10]
	0x03BA7734 ADRP X20, 0x83B000
	0x03BA7738 LDRB W8, [X20 + 0xC85]
	0x03BA773C MOV X19, X0
	0x03BA7740 TBNZ X8, 0x0, 0x3BA7770
	0x03BA7744 ADRP X0, 0x54C000
	0x03BA7748 LDR X0, [X0 + 0xA58]
	0x03BA774C BL 0x1C16CF4
	0x03BA7750 ADRP X0, 0x5B5000
	0x03BA7754 LDR X0, [X0 + 0xD08]
	0x03BA7758 BL 0x1C16CF4
	0x03BA775C ADRP X0, 0x5B5000
	0x03BA7760 LDR X0, [X0 + 0xD10]
	0x03BA7764 BL 0x1C16CF4
	0x03BA7768 MOVZ W8, 0x1
	0x03BA776C STRB W8, [X20 + 0xC85]
	0x03BA7770 LDR X0, [X19 + 0x58]
	0x03BA7774 CBZ X0, 0x3BA784C
	0x03BA7778 LDR V0, [X19 + 0x40]
	0x03BA777C MOV X1, X31
	0x03BA7780 STR S0, [X0 + 0xA8]
	0x03BA7784 LDR V0, [X19 + 0x44]
	0x03BA7788 BL 0x3B92118
	0x03BA778C LDR X8, [X19 + 0x58]
	0x03BA7790 CBZ X8, 0x3BA784C
	0x03BA7794 LDR V0, [X19 + 0x48]
	0x03BA7798 ADRP X21, 0x54C000
	0x03BA779C LDR X21, [X21 + 0xA58]
	0x03BA77A0 ADRP X20, 0x5B5000
	0x03BA77A4 STR S0, [X8 + 0xB0]
	0x03BA77A8 LDR X0, [X21]
	0x03BA77AC LDR X20, [X20 + 0xD08]
	0x03BA77B0 BL 0x1C16F10
	0x03BA77B4 LDR X1, [X20]
	0x03BA77B8 MOV X2, X31
	0x03BA77BC MOV X20, X0
	0x03BA77C0 BL 0x3C35934
	0x03BA77C4 CBZ X20, 0x3BA784C
	0x03BA77C8 MOV X0, X20
	0x03BA77CC MOV X1, X31
	0x03BA77D0 BL 0x3C356F8
	0x03BA77D4 STR X0, [X19 + 0xB0]
	0x03BA77D8 CBZ X0, 0x3BA784C
	0x03BA77DC MOV X1, X31
	0x03BA77E0 BL 0x3C32E90
	0x03BA77E4 CBZ X0, 0x3BA784C
	0x03BA77E8 LDR X1, [X19 + 0x38]
	0x03BA77EC ADRP X20, 0x5B5000
	0x03BA77F0 LDR X20, [X20 + 0xD10]
	0x03BA77F4 MOV X2, X31
	0x03BA77F8 BL 0x3C3FE70
	0x03BA77FC LDR X0, [X21]
	0x03BA7800 BL 0x1C16F10
	0x03BA7804 LDR X1, [X20]
	0x03BA7808 MOV X2, X31
	0x03BA780C MOV X20, X0
	0x03BA7810 BL 0x3C35934
	0x03BA7814 CBZ X20, 0x3BA784C
	0x03BA7818 MOV X0, X20
	0x03BA781C MOV X1, X31
	0x03BA7820 BL 0x3C356F8
	0x03BA7824 STR X0, [X19 + 0xA8]
	0x03BA7828 CBZ X0, 0x3BA784C
	0x03BA782C MOV X1, X31
	0x03BA7830 BL 0x3C32E90
	0x03BA7834 CBZ X0, 0x3BA784C
	0x03BA7838 LDR X1, [X19 + 0x30]
	0x03BA783C LDP X20, X19, [X31 + 0x10]
	0x03BA7840 MOV X2, X31
	0x03BA7844 LDP X30, X21, [X31], #0x20
	0x03BA7848 B 0x3C3FE70
	0x03BA784C BL 0x1C16F20
	0x03BA7850 STP X30, X25, [X31 - 0x40]!
	0x03BA7854 STP X24, X23, [X31 + 0x10]
	0x03BA7858 STP X22, X21, [X31 + 0x20]
	0x03BA785C STP X20, X19, [X31 + 0x30]
	0x03BA7860 ADRP X20, 0x83B000
	0x03BA7864 ADRP X21, 0x54C000
	0x03BA7868 LDRB W8, [X20 + 0xC86]
	0x03BA786C LDR X21, [X21 + 0x598]
	0x03BA7870 MOV X19, X0
	0x03BA7874 TBNZ X8, 0x0, 0x3BA7988
	0x03BA7878 ADRP X0, 0x54C000
	0x03BA787C LDR X0, [X0 + 0xD28]
	0x03BA7880 BL 0x1C16CF4
	0x03BA7884 ADRP X0, 0x5B5000
	0x03BA7888 LDR X0, [X0 + 0x850]
	0x03BA788C BL 0x1C16CF4
	0x03BA7890 ADRP X0, 0x5B5000
	0x03BA7894 LDR X0, [X0 + 0xD18]
	0x03BA7898 BL 0x1C16CF4
	0x03BA789C ADRP X0, 0x5B5000
	0x03BA78A0 LDR X0, [X0 + 0x858]
	0x03BA78A4 BL 0x1C16CF4
	0x03BA78A8 ADRP X0, 0x5B5000
	0x03BA78AC LDR X0, [X0 + 0xD20]
	0x03BA78B0 BL 0x1C16CF4
	0x03BA78B4 ADRP X0, 0x5B5000
	0x03BA78B8 LDR X0, [X0 + 0xD28]
	0x03BA78BC BL 0x1C16CF4
	0x03BA78C0 ADRP X0, 0x5B5000
	0x03BA78C4 LDR X0, [X0 + 0xD30]
	0x03BA78C8 BL 0x1C16CF4
	0x03BA78CC ADRP X0, 0x5B5000
	0x03BA78D0 LDR X0, [X0 + 0xD38]
	0x03BA78D4 BL 0x1C16CF4
	0x03BA78D8 ADRP X0, 0x5B5000
	0x03BA78DC LDR X0, [X0 + 0xD40]
	0x03BA78E0 BL 0x1C16CF4
	0x03BA78E4 ADRP X0, 0x54C000
	0x03BA78E8 LDR X0, [X0 + 0xA28]
	0x03BA78EC BL 0x1C16CF4
	0x03BA78F0 ADRP X0, 0x5B5000
	0x03BA78F4 LDR X0, [X0 + 0xD48]
	0x03BA78F8 BL 0x1C16CF4
	0x03BA78FC ADRP X0, 0x5B5000
	0x03BA7900 LDR X0, [X0 + 0xD50]
	0x03BA7904 BL 0x1C16CF4
	0x03BA7908 ADRP X0, 0x5B5000
	0x03BA790C LDR X0, [X0 + 0xD58]
	0x03BA7910 BL 0x1C16CF4
	0x03BA7914 ADRP X0, 0x5B5000
	0x03BA7918 LDR X0, [X0 + 0xD60]
	0x03BA791C BL 0x1C16CF4
	0x03BA7920 ADRP X0, 0x5B5000
	0x03BA7924 LDR X0, [X0 + 0xD68]
	0x03BA7928 BL 0x1C16CF4
	0x03BA792C ADRP X0, 0x5B5000
	0x03BA7930 LDR X0, [X0 + 0xD70]
	0x03BA7934 BL 0x1C16CF4
	0x03BA7938 ADRP X0, 0x54C000
	0x03BA793C LDR X0, [X0 + 0x598]
	0x03BA7940 BL 0x1C16CF4
	0x03BA7944 ADRP X0, 0x5B5000
	0x03BA7948 LDR X0, [X0 + 0xD78]
	0x03BA794C BL 0x1C16CF4
	0x03BA7950 ADRP X0, 0x5B5000
	0x03BA7954 LDR X0, [X0 + 0xD80]
	0x03BA7958 BL 0x1C16CF4
	0x03BA795C ADRP X0, 0x5B5000
	0x03BA7960 LDR X0, [X0 + 0xD88]
	0x03BA7964 BL 0x1C16CF4
	0x03BA7968 ADRP X0, 0x5B5000
	0x03BA796C LDR X0, [X0 + 0xD90]
	0x03BA7970 BL 0x1C16CF4
	0x03BA7974 ADRP X0, 0x5B5000
	0x03BA7978 LDR X0, [X0 + 0xD98]
	0x03BA797C BL 0x1C16CF4
	0x03BA7980 MOVZ W8, 0x1
	0x03BA7984 STRB W8, [X20 + 0xC86]
	0x03BA7988 LDR X0, [X21]
	0x03BA798C LDR X20, [X19 + 0x30]
	0x03BA7990 LDR W8, [X0 + 0xE0]
	0x03BA7994 CBNZ W8, 0x3BA799C
	0x03BA7998 BL 0x1C16DFC
	0x03BA799C ADRP X22, 0x54C000
	0x03BA79A0 LDR X22, [X22 + 0xA28]
	0x03BA79A4 MOV X0, X20
	0x03BA79A8 MOV X1, X31
	0x03BA79AC MOV X2, X31
	0x03BA79B0 BL 0x3C3883C
	0x03BA79B4 TBNZ X0, 0x0, 0x3BA79E0
	0x03BA79B8 LDR X0, [X21]
	0x03BA79BC LDR X20, [X19 + 0x38]
	0x03BA79C0 LDR W8, [X0 + 0xE0]
	0x03BA79C4 CBNZ W8, 0x3BA79CC
	0x03BA79C8 BL 0x1C16DFC
	0x03BA79CC MOV X0, X20
	0x03BA79D0 MOV X1, X31
	0x03BA79D4 MOV X2, X31
	0x03BA79D8 BL 0x3C3883C
	0x03BA79DC TBZ X0, 0x0, 0x3BA7A40
	0x03BA79E0 ADRP X8, 0x5B5000
	0x03BA79E4 LDR X8, [X8 + 0xD98]
	0x03BA79E8 LDR X0, [X8]
	0x03BA79EC MOV X1, X19
	0x03BA79F0 MOV X2, X31
	0x03BA79F4 BL 0x321EFD0
	0x03BA79F8 LDR X8, [X22]
	0x03BA79FC MOV X20, X0
	0x03BA7A00 LDR W9, [X8 + 0xE0]
	0x03BA7A04 CBNZ W9, 0x3BA7A10
	0x03BA7A08 MOV X0, X8
	0x03BA7A0C BL 0x1C16DFC
	0x03BA7A10 MOV X0, X20
	0x03BA7A14 MOV X1, X19
	0x03BA7A18 MOV X2, X31
	0x03BA7A1C BL 0x3C065A4
	0x03BA7A20 MOV X0, X19
	0x03BA7A24 LDP X20, X19, [X31 + 0x30]
	0x03BA7A28 LDP X22, X21, [X31 + 0x20]
	0x03BA7A2C LDP X24, X23, [X31 + 0x10]
	0x03BA7A30 MOV W1, W31
	0x03BA7A34 MOV X2, X31
	0x03BA7A38 LDP X30, X25, [X31], #0x40
	0x03BA7A3C B 0x3C32410
	0x03BA7A40 LDR X0, [X21]
	0x03BA7A44 LDR X20, [X19 + 0x20]
	0x03BA7A48 LDR W8, [X0 + 0xE0]
	0x03BA7A4C CBNZ W8, 0x3BA7A54
	0x03BA7A50 BL 0x1C16DFC
	0x03BA7A54 MOV X0, X20
	0x03BA7A58 MOV X1, X31
	0x03BA7A5C MOV X2, X31
	0x03BA7A60 BL 0x3C3883C
	0x03BA7A64 TBZ X0, 0x0, 0x3BA7A74
	0x03BA7A68 ADRP X8, 0x5B5000
	0x03BA7A6C LDR X8, [X8 + 0xD88]
	0x03BA7A70 B 0x3BA79E8
	0x03BA7A74 LDR X8, [X19 + 0x98]
	0x03BA7A78 CBZ X8, 0x3BA7D24
	0x03BA7A7C LDR X8, [X19 + 0x90]
	0x03BA7A80 CBZ X8, 0x3BA7D24
	0x03BA7A84 LDR X0, [X19 + 0x20]
	0x03BA7A88 CBZ X0, 0x3BA7DF4
	0x03BA7A8C LDR X20, [X19 + 0x58]
	0x03BA7A90 MOV X1, X31
	0x03BA7A94 BL 0x3C356F8
	0x03BA7A98 CBZ X0, 0x3BA7DF4
	0x03BA7A9C MOV X1, X31
	0x03BA7AA0 BL 0x3C3F58C
	0x03BA7AA4 MOV X0, X31
	0x03BA7AA8 BL 0x3887BE4
	0x03BA7AAC CBZ X20, 0x3BA7DF4
	0x03BA7AB0 ADRP X23, 0x5B5000
	0x03BA7AB4 LDR X23, [X23 + 0xD78]
	0x03BA7AB8 MOV X0, X20
	0x03BA7ABC LDR X1, [X23]
	0x03BA7AC0 BL 0x270B594
	0x03BA7AC4 ADRP X24, 0x5B5000
	0x03BA7AC8 LDR X20, [X19 + 0x70]
	0x03BA7ACC LDR X21, [X19 + 0x58]
	0x03BA7AD0 LDR X24, [X24 + 0x850]
	0x03BA7AD4 LDR X0, [X24]
	0x03BA7AD8 BL 0x1C16F10
	0x03BA7ADC ADRP X8, 0x5B5000
	0x03BA7AE0 LDR X8, [X8 + 0xD50]
	0x03BA7AE4 MOV X1, X19
	0x03BA7AE8 MOV X3, X31
	0x03BA7AEC MOV X22, X0
	0x03BA7AF0 LDR X2, [X8]
	0x03BA7AF4 BL 0x2A70A68
	0x03BA7AF8 CBZ X21, 0x3BA7DF4
	0x03BA7AFC ADRP X25, 0x5B5000
	0x03BA7B00 LDR X25, [X25 + 0xD30]
	0x03BA7B04 MOV X0, X21
	0x03BA7B08 MOV X1, X22
	0x03BA7B0C LDR X2, [X25]
	0x03BA7B10 BL 0x28D1034
	0x03BA7B14 CBZ X20, 0x3BA7DF4
	0x03BA7B18 MOV X1, X0
	0x03BA7B1C MOV X0, X20
	0x03BA7B20 MOV X2, X31
	0x03BA7B24 BL 0x3B3175C
	0x03BA7B28 LDR X0, [X19 + 0x20]
	0x03BA7B2C CBZ X0, 0x3BA7DF4
	0x03BA7B30 LDR X20, [X19 + 0x60]

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x83C000
	009 Move W8, [X20+3192]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x575000
	016 Move X0, [X0+960]
	017 Call 0x1C17CF4
	018 Move X0, 0x575000
	019 Move X0, [X0+1368]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3192], W8
	023 Move W8, [X19+288]
	024 Compare W8, 0
	025 JumpIfEqual {292}
	026 Move W8, [X19+412]
	027 Compare W8, 0
	028 JumpIfEqual {174}
	029 Move X20, 0x83A000
	030 Move W8, [X20+3992]
	031 Compare W8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, 0x5A0000
	034 Move X0, [X0+3808]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X20+3992], W8
	038 Move X21, 0x5A0000
	039 Move X21, [X21+3808]
	040 Move X8, [X21]
	041 Move X8, [X8+184]
	042 Move X8, [X8]
	043 Compare X8, 0
	044 JumpIfEqual {128}
	045 Move X0, [X8+456]
	046 Compare X0, 0
	047 JumpIfEqual {347}
	048 Move X22, 0x575000
	049 Move X22, [X22+1368]
	050 Move X1, [X22]
	051 Call InputControl`1<Vector2>.ReadValue, X0
	052 Move W8, [X20+3992]
	053 Move V8, V0
	054 Move V9, V1
	055 Compare W8, 0
	056 JumpIfNotEqual {62}
	057 Move X0, 0x5A0000
	058 Move X0, [X0+3808]
	059 Call 0x1C17CF4
	060 Move W8, 1
	061 Move [X20+3992], W8
	062 Move X8, [X21]
	063 Move X8, [X8+184]
	064 Move X8, [X8]
	065 Compare X8, 0
	066 JumpIfEqual {347}
	067 Move X0, [X8+432]
	068 Compare X0, 0
	069 JumpIfEqual {347}
	070 Move X1, [X22]
	071 Call InputControl`1<Vector2>.ReadValue, X0
	072 Add S0, S8, S0
	073 Add S1, S9, S1
	074 Move [X19+856], S0
	075 Move [X19+860], S1
	076 Move W8, [X20+3992]
	077 Compare W8, 0
	078 JumpIfNotEqual {84}
	079 Move X0, 0x5A0000
	080 Move X0, [X0+3808]
	081 Call 0x1C17CF4
	082 Move W8, 1
	083 Move [X20+3992], W8
	084 Move X8, [X21]
	085 Move X8, [X8+184]
	086 Move X8, [X8]
	087 Compare X8, 0
	088 JumpIfEqual {347}
	089 Move X0, [X8+384]
	090 Compare X0, 0
	091 JumpIfEqual {347}
	092 Move X1, X31
	093 Call ButtonControl.get_isPressed, X0
	094 Move W9, [X19+884]
	095 And W8, W0, 1
	096 NotImplemented "Instruction CMP not yet implemented."
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move W9, 1
	099 NotImplemented "Instruction CINC not yet implemented."
	100 Move [X19+864], W9
	101 Move [X19+884], W8
	102 Move W8, [X20+3992]
	103 Compare W8, 0
	104 JumpIfNotEqual {110}
	105 Move X0, 0x5A0000
	106 Move X0, [X0+3808]
	107 Call 0x1C17CF4
	108 Move W8, 1
	109 Move [X20+3992], W8
	110 Move X8, [X21]
	111 Move X8, [X8+184]
	112 Move X8, [X8]
	113 Compare X8, 0
	114 JumpIfEqual {347}
	115 Move X0, [X8+392]
	116 Compare X0, 0
	117 JumpIfEqual {347}
	118 Move X1, X31
	119 Call ButtonControl.get_isPressed, X0
	120 Move W9, [X19+885]
	121 And W8, W0, 1
	122 NotImplemented "Instruction CMP not yet implemented."
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move W9, 1
	125 NotImplemented "Instruction CINC not yet implemented."
	126 Move [X19+868], W9
	127 Move [X19+885], W8
	128 Move X20, 0x83A000
	129 Move W8, [X20+3994]
	130 Compare W8, 0
	131 JumpIfNotEqual {137}
	132 Move X0, 0x5A1000
	133 Move X0, [X0+8]
	134 Call 0x1C17CF4
	135 Move W8, 1
	136 Move [X20+3994], W8
	137 Move X21, 0x5A1000
	138 Move X21, [X21+8]
	139 Move X8, [X21]
	140 Move X8, [X8+184]
	141 Move X8, [X8]
	142 Compare X8, 0
	143 JumpIfEqual {290}
	144 Move X0, [X8+376]
	145 Compare X0, 0
	146 JumpIfEqual {347}
	147 Move X22, 0x575000
	148 Move X22, [X22+1368]
	149 Move X1, [X22]
	150 Call InputControl`1<Vector2>.ReadValue, X0
	151 Move W8, [X20+3994]
	152 Move V8, V0
	153 Move V9, V1
	154 Compare W8, 0
	155 JumpIfNotEqual {161}
	156 Move X0, 0x5A1000
	157 Move X0, [X0+8]
	158 Call 0x1C17CF4
	159 Move W8, 1
	160 Move [X20+3994], W8
	161 Move X8, [X21]
	162 Move X8, [X8+184]
	163 Move X8, [X8]
	164 Compare X8, 0
	165 JumpIfEqual {347}
	166 Move X9, [X8+392]
	167 Compare X9, 0
	168 JumpIfEqual {239}
	169 Move X0, [X8+392]
	170 Compare X0, 0
	171 JumpIfEqual {347}
	172 Move X1, [X22]
	173 Call InputControl`1<Vector2>.ReadValue, X0
	174 Move X0, [X19+344]
	175 Call XRUIInputModule.IsActionEnabled, X0
	176 Move TEMP, X0
	177 And TEMP, TEMP, 1
	178 Compare TEMP, 1
	179 JumpIfNotEqual {193}
	180 Move X0, [X19+344]
	181 Compare X0, 0
	182 JumpIfEqual {347}
	183 Move X1, X31
	184 Call InputActionReference.get_action, X0
	185 Compare X0, 0
	186 JumpIfEqual {347}
	187 Move X8, 0x575000
	188 Move X8, [X8+960]
	189 Move X1, [X8]
	190 Call InputAction.ReadValue, X0
	191 Move [X19+856], S0
	192 Move [X19+860], S1
	193 Move X0, [X19+352]
	194 Call XRUIInputModule.IsActionEnabled, X0
	195 Move TEMP, X0
	196 And TEMP, TEMP, 1
	197 Compare TEMP, 1
	198 JumpIfNotEqual {216}
	199 Move X0, [X19+352]
	200 Compare X0, 0
	201 JumpIfEqual {347}
	202 Move X1, X31
	203 Call InputActionReference.get_action, X0
	204 Compare X0, 0
	205 JumpIfEqual {347}
	206 Move X1, X31
	207 Call InputAction.WasPressedThisFrame, X0
	208 Move W9, [X19+884]
	209 And W8, W0, 1
	210 NotImplemented "Instruction CMP not yet implemented."
	211 NotImplemented "Instruction CMP not yet implemented."
	212 Move W9, 1
	213 NotImplemented "Instruction CINC not yet implemented."
	214 Move [X19+864], W9
	215 Move [X19+884], W8
	216 Move X0, [X19+360]
	217 Call XRUIInputModule.IsActionEnabled, X0
	218 Move TEMP, X0
	219 And TEMP, TEMP, 1
	220 Compare TEMP, 1
	221 JumpIfNotEqual {290}
	222 Move X0, [X19+360]
	223 Compare X0, 0
	224 JumpIfEqual {347}
	225 Move X1, X31
	226 Call InputActionReference.get_action, X0
	227 Compare X0, 0
	228 JumpIfEqual {347}
	229 Move X1, X31
	230 Call InputAction.WasPressedThisFrame, X0
	231 Move W9, [X19+885]
	232 And W8, W0, 1
	233 NotImplemented "Instruction CMP not yet implemented."
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Move W9, 1
	236 NotImplemented "Instruction CINC not yet implemented."
	237 Move [X19+868], W9
	238 Move [X19+885], W8
	239 Move X22, 0x833000
	240 Move W8, [X22+1935]
	241 Compare W8, 0
	242 JumpIfNotEqual {248}
	243 Move X0, 0x555000
	244 Move X0, [X0+3848]
	245 Call 0x1C17CF4
	246 Move W8, 1
	247 Move [X22+1935], W8
	248 Move X8, 0x555000
	249 Move X8, [X8+3848]
	250 Move X8, [X8]
	251 Move X8, [X8+184]
	252 Move S0, [X8]
	253 Move S1, [X8+4]
	254 Add S0, S8, S0
	255 Add S1, S9, S1
	256 Move [X19+856], S0
	257 Move [X19+860], S1
	258 Move W8, [X20+3994]
	259 Compare W8, 0
	260 JumpIfNotEqual {266}
	261 Move X0, 0x5A1000
	262 Move X0, [X0+8]
	263 Call 0x1C17CF4
	264 Move W8, 1
	265 Move [X20+3994], W8
	266 Move X8, [X21]
	267 Move X8, [X8+184]
	268 Move X8, [X8]
	269 Compare X8, 0
	270 JumpIfEqual {347}
	271 Move X0, [X8+368]
	272 Compare X0, 0
	273 JumpIfEqual {347}
	274 Move X1, X31
	275 Call ButtonControl.get_isPressed, X0
	276 Move W9, [X19+884]
	277 And W8, W0, 1
	278 NotImplemented "Instruction CMP not yet implemented."
	279 NotImplemented "Instruction CMP not yet implemented."
	280 Move W9, 1
	281 NotImplemented "Instruction CINC not yet implemented."
	282 Move [X19+864], W9
	283 Move [X19+884], W8
	284 Move W8, [X19+885]
	285 Compare W8, 0
	286 JumpIfEqual {290}
	287 Move W8, 2
	288 Move [X19+868], W8
	289 Move [X19+885], W31
	290 Move W8, [X19+288]
	291 NotImplemented "Instruction CMP not yet implemented."
	292 Move W8, [X19+369]
	293 Compare W8, 0
	294 JumpIfNotEqual {298}
	295 Move W8, [X19+370]
	296 Compare W8, 0
	297 JumpIfEqual {336}
	298 Move X0, X31
	299 Call Input.GetJoystickNames
	300 Compare X0, 0
	301 JumpIfEqual {347}
	302 Move X8, [X0+24]
	303 Compare X8, 0
	304 JumpIfEqual {336}
	305 Move X0, [X19+376]
	306 Move X1, X31
	307 Call Input.GetAxis, X0
	308 Move X0, [X19+384]
	309 Move X1, X31
	310 Move V8, V0
	311 Call Input.GetAxis, X0
	312 Move X0, [X19+392]
	313 Move X1, X31
	314 Move [X19+856], S8
	315 Move [X19+860], S0
	316 Call Input.GetButton, X0
	317 Move W9, [X19+884]
	318 And W8, W0, 1
	319 NotImplemented "Instruction CMP not yet implemented."
	320 NotImplemented "Instruction CMP not yet implemented."
	321 Move W9, 1
	322 NotImplemented "Instruction CINC not yet implemented."
	323 Move [X19+864], W9
	324 Move [X19+884], W8
	325 Move X0, [X19+400]
	326 Move X1, X31
	327 Call Input.GetButton, X0
	328 Move W9, [X19+885]
	329 And W8, W0, 1
	330 NotImplemented "Instruction CMP not yet implemented."
	331 NotImplemented "Instruction CMP not yet implemented."
	332 Move W9, 1
	333 NotImplemented "Instruction CINC not yet implemented."
	334 Move [X19+868], W9
	335 Move [X19+885], W8
	336 Add X1, X19, 856
	337 Move X0, X19
	338 Move X20, [X31+48]
	339 Move X19, [X31+56]
	340 Move X22, [X31+32]
	341 Move X21, [X31+40]
	342 Move X30, [X31+16]
	343 Move D9, [X31+64]
	344 Move D8, [X31+72]
	345 Call UIInputModule.ProcessNavigationState, X0, X1
	346 Return 
	347 Call 0x1C17F20

Method: System.Boolean InputActionReferencesAreSet()

Disassembly:
	0x03BA626C CBZ W8, 0x3BA6454
	0x03BA6270 ADRP X21, 0x833000
	0x03BA6274 LDRB W8, [X21 + 0x817]
	0x03BA6278 CBNZ W8, 0x3BA6290
	0x03BA627C ADRP X0, 0x575000
	0x03BA6280 LDR X0, [X0 + 0x528]
	0x03BA6284 BL 0x1C16CF4
	0x03BA6288 MOVZ W8, 0x1
	0x03BA628C STRB W8, [X21 + 0x817]
	0x03BA6290 ADRP X22, 0x575000
	0x03BA6294 LDR X22, [X22 + 0x528]
	0x03BA6298 LDR X8, [X22]
	0x03BA629C LDR X8, [X8 + 0xB8]
	0x03BA62A0 LDR X8, [X8]
	0x03BA62A4 CBZ X8, 0x3BA65CC
	0x03BA62A8 LDR X0, [X8 + 0x170]
	0x03BA62AC CBZ X0, 0x3BA667C
	0x03BA62B0 ADRP X23, 0x575000
	0x03BA62B4 LDR X23, [X23 + 0x558]
	0x03BA62B8 ADD X20, X19, 0x1A0
	0x03BA62BC LDR X1, [X23]
	0x03BA62C0 BL 0x2E095F8
	0x03BA62C4 MOV X0, X20
	0x03BA62C8 MOV X1, X31
	0x03BA62CC BL 0x3B98E2C
	0x03BA62D0 LDRB W8, [X21 + 0x817]
	0x03BA62D4 CBNZ W8, 0x3BA62EC
	0x03BA62D8 ADRP X0, 0x575000
	0x03BA62DC LDR X0, [X0 + 0x528]
	0x03BA62E0 BL 0x1C16CF4
	0x03BA62E4 MOVZ W8, 0x1
	0x03BA62E8 STRB W8, [X21 + 0x817]
	0x03BA62EC LDR X8, [X22]
	0x03BA62F0 LDR X8, [X8 + 0xB8]
	0x03BA62F4 LDR X8, [X8]
	0x03BA62F8 CBZ X8, 0x3BA667C
	0x03BA62FC LDR X0, [X8 + 0x198]
	0x03BA6300 CBZ X0, 0x3BA667C
	0x03BA6304 ADRP X8, 0x5A3000
	0x03BA6308 LDR X8, [X8 + 0x2F0]
	0x03BA630C LDR X1, [X8]
	0x03BA6310 BL 0x2E00A18
	0x03BA6314 MOV W1, W0
	0x03BA6318 MOV X0, X20
	0x03BA631C MOV X2, X31
	0x03BA6320 BL 0x3B98E08
	0x03BA6324 LDRB W8, [X21 + 0x817]
	0x03BA6328 CBNZ W8, 0x3BA6340
	0x03BA632C ADRP X0, 0x575000
	0x03BA6330 LDR X0, [X0 + 0x528]
	0x03BA6334 BL 0x1C16CF4
	0x03BA6338 MOVZ W8, 0x1
	0x03BA633C STRB W8, [X21 + 0x817]
	0x03BA6340 LDR X8, [X22]
	0x03BA6344 LDR X8, [X8 + 0xB8]
	0x03BA6348 LDR X8, [X8]
	0x03BA634C CBZ X8, 0x3BA667C
	0x03BA6350 LDR X0, [X8 + 0x1A0]
	0x03BA6354 CBZ X0, 0x3BA667C
	0x03BA6358 LDR X1, [X23]
	0x03BA635C BL 0x2E095F8
	0x03BA6360 ADRP X8, 0xFFFFFFFFFCF44000
	0x03BA6364 LDR V2, [X8 + 0x200]
	0x03BA6368 MOV X0, X20
	0x03BA636C MOV X1, X31
	0x03BA6370 FMUL S0, S0, S2
	0x03BA6374 FMUL S1, S1, S2
	0x03BA6378 BL 0x3B98E88
	0x03BA637C LDRB W8, [X21 + 0x817]
	0x03BA6380 CBNZ W8, 0x3BA6398
	0x03BA6384 ADRP X0, 0x575000
	0x03BA6388 LDR X0, [X0 + 0x528]
	0x03BA638C BL 0x1C16CF4
	0x03BA6390 MOVZ W8, 0x1
	0x03BA6394 STRB W8, [X21 + 0x817]
	0x03BA6398 LDR X8, [X22]
	0x03BA639C LDR X8, [X8 + 0xB8]
	0x03BA63A0 LDR X8, [X8]
	0x03BA63A4 CBZ X8, 0x3BA667C
	0x03BA63A8 LDR X0, [X8 + 0x1A8]
	0x03BA63AC CBZ X0, 0x3BA667C
	0x03BA63B0 MOV X1, X31
	0x03BA63B4 BL 0x3758A6C
	0x03BA63B8 AND W1, W0, 0x1
	0x03BA63BC MOV X0, X20
	0x03BA63C0 MOV X2, X31
	0x03BA63C4 BL 0x3B98F00
	0x03BA63C8 LDRB W8, [X21 + 0x817]
	0x03BA63CC CBNZ W8, 0x3BA63E4
	0x03BA63D0 ADRP X0, 0x575000
	0x03BA63D4 LDR X0, [X0 + 0x528]
	0x03BA63D8 BL 0x1C16CF4
	0x03BA63DC MOVZ W8, 0x1
	0x03BA63E0 STRB W8, [X21 + 0x817]
	0x03BA63E4 LDR X8, [X22]
	0x03BA63E8 LDR X8, [X8 + 0xB8]
	0x03BA63EC LDR X8, [X8]
	0x03BA63F0 CBZ X8, 0x3BA667C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x83D000
	006 Move X21, 0x54E000
	007 Move W8, [X20+3193]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x54E000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3193], W8
	019 Move X0, [X21]
	020 Move X20, [X19+304]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {117}
	033 Move X0, [X21]
	034 Move X20, [X19+312]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Inequality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {117}
	047 Move X0, [X21]
	048 Move X20, [X19+328]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, X20
	054 Move X1, X31
	055 Move X2, X31
	056 Call Object.op_Inequality, X0, X1
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfEqual {117}
	061 Move X0, [X21]
	062 Move X20, [X19+320]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X0, X20
	068 Move X1, X31
	069 Move X2, X31
	070 Call Object.op_Inequality, X0, X1
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {117}
	075 Move X0, [X21]
	076 Move X20, [X19+344]
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {81}
	080 Call 0x1C17DFC
	081 Move X0, X20
	082 Move X1, X31
	083 Move X2, X31
	084 Call Object.op_Inequality, X0, X1
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfEqual {117}
	089 Move X0, [X21]
	090 Move X20, [X19+352]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X0, X20
	096 Move X1, X31
	097 Move X2, X31
	098 Call Object.op_Inequality, X0, X1
	099 Move TEMP, X0
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfEqual {117}
	103 Move X0, [X21]
	104 Move X20, [X19+360]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 Move X0, X20
	110 Move X1, X31
	111 Move X2, X31
	112 Call Object.op_Inequality, X0, X1
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfNotEqual {123}
	117 Move X20, [X31+16]
	118 Move X19, [X31+24]
	119 Move W0, 1
	120 Move X30, [X31+32]
	121 Move X21, [X31+40]
	122 Return X0
	123 Move X0, [X21]
	124 Move X19, [X19+336]
	125 Move W8, [X0+224]
	126 Compare W8, 0
	127 JumpIfNotEqual {129}
	128 Call 0x1C17DFC
	129 Move X0, X19
	130 Move X20, [X31+16]
	131 Move X19, [X31+24]
	132 Move X1, X31
	133 Move X2, X31
	134 Move X30, [X31+32]
	135 Move X21, [X31+40]
	136 Call Object.op_Inequality, X0, X1
	137 Return X0

Method: System.Void EnableAllActions()

Disassembly:
	0x03BA6500 LDR V2, [X8 + 0x200]
	0x03BA6504 MOV X0, X20
	0x03BA6508 MOV X1, X31
	0x03BA650C FMUL S0, S0, S2
	0x03BA6510 FMUL S1, S1, S2
	0x03BA6514 BL 0x3B98E88
	0x03BA6518 LDR X0, [X19 + 0x138]
	0x03BA651C BL 0x3BA6B34
	0x03BA6520 TBZ X0, 0x0, 0x3BA6554
	0x03BA6524 LDR X0, [X19 + 0x138]
	0x03BA6528 CBZ X0, 0x3BA667C
	0x03BA652C MOV X1, X31
	0x03BA6530 BL 0x37451B4
	0x03BA6534 CBZ X0, 0x3BA667C
	0x03BA6538 MOV X1, X31
	0x03BA653C ADD X20, X19, 0x1A0
	0x03BA6540 BL 0x37353DC
	0x03BA6544 AND W1, W0, 0x1
	0x03BA6548 MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+304]
	005 Call XRUIInputModule.EnableInputAction, X0
	006 Move X0, [X19+312]
	007 Call XRUIInputModule.EnableInputAction, X0
	008 Move X0, [X19+328]
	009 Call XRUIInputModule.EnableInputAction, X0
	010 Move X0, [X19+320]
	011 Call XRUIInputModule.EnableInputAction, X0
	012 Move X0, [X19+344]
	013 Call XRUIInputModule.EnableInputAction, X0
	014 Move X0, [X19+352]
	015 Call XRUIInputModule.EnableInputAction, X0
	016 Move X0, [X19+360]
	017 Call XRUIInputModule.EnableInputAction, X0
	018 Move X0, [X19+336]
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Call XRUIInputModule.EnableInputAction, X0
	022 Return 

Method: System.Void DisableAllActions()

Disassembly:
	0x03BA657C BL 0x37353DC
	0x03BA6580 AND W1, W0, 0x1
	0x03BA6584 MOV X0, X20
	0x03BA6588 MOV X2, X31
	0x03BA658C BL 0x3B98F94
	0x03BA6590 LDR X0, [X19 + 0x140]
	0x03BA6594 BL 0x3BA6B34
	0x03BA6598 TBZ X0, 0x0, 0x3BA65CC
	0x03BA659C LDR X0, [X19 + 0x140]
	0x03BA65A0 CBZ X0, 0x3BA667C
	0x03BA65A4 MOV X1, X31
	0x03BA65A8 BL 0x37451B4
	0x03BA65AC CBZ X0, 0x3BA667C
	0x03BA65B0 MOV X1, X31
	0x03BA65B4 ADD X20, X19, 0x1A0
	0x03BA65B8 BL 0x37353DC
	0x03BA65BC AND W1, W0, 0x1
	0x03BA65C0 MOV X0, X20
	0x03BA65C4 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+304]
	005 Call XRUIInputModule.DisableInputAction, X0
	006 Move X0, [X19+312]
	007 Call XRUIInputModule.DisableInputAction, X0
	008 Move X0, [X19+328]
	009 Call XRUIInputModule.DisableInputAction, X0
	010 Move X0, [X19+320]
	011 Call XRUIInputModule.DisableInputAction, X0
	012 Move X0, [X19+344]
	013 Call XRUIInputModule.DisableInputAction, X0
	014 Move X0, [X19+352]
	015 Call XRUIInputModule.DisableInputAction, X0
	016 Move X0, [X19+360]
	017 Call XRUIInputModule.DisableInputAction, X0
	018 Move X0, [X19+336]
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Call XRUIInputModule.DisableInputAction, X0
	022 Return 

Method: System.Boolean IsActionEnabled(UnityEngine.InputSystem.InputActionReference inputAction)

Disassembly:
	0x03BA7B34 MOV X1, X31
	0x03BA7B38 BL 0x3C356F8
	0x03BA7B3C CBZ X0, 0x3BA7DF4
	0x03BA7B40 MOV X1, X31
	0x03BA7B44 BL 0x3C3DEB4
	0x03BA7B48 CBZ X20, 0x3BA7DF4
	0x03BA7B4C ADRP X8, 0x5B5000
	0x03BA7B50 LDR X8, [X8 + 0xD38]
	0x03BA7B54 MOV X0, X20
	0x03BA7B58 LDR X1, [X8]
	0x03BA7B5C BL 0x28CE7A4
	0x03BA7B60 ADRP X8, 0x5B5000
	0x03BA7B64 LDR X20, [X19 + 0x70]
	0x03BA7B68 LDR X21, [X19 + 0x60]
	0x03BA7B6C LDR X8, [X8 + 0x858]
	0x03BA7B70 LDR X0, [X8]
	0x03BA7B74 BL 0x1C16F10
	0x03BA7B78 ADRP X8, 0x5B5000
	0x03BA7B7C LDR X8, [X8 + 0xD58]
	0x03BA7B80 MOV X1, X19
	0x03BA7B84 MOV X3, X31
	0x03BA7B88 MOV X22, X0
	0x03BA7B8C LDR X2, [X8]
	0x03BA7B90 BL 0x2A6C3A4
	0x03BA7B94 CBZ X21, 0x3BA7DF4
	0x03BA7B98 ADRP X8, 0x5B5000
	0x03BA7B9C LDR X8, [X8 + 0xD28]
	0x03BA7BA0 MOV X0, X21
	0x03BA7BA4 MOV X1, X22
	0x03BA7BA8 LDR X2, [X8]
	0x03BA7BAC BL 0x28CE8A8
	0x03BA7BB0 CBZ X20, 0x3BA7DF4
	0x03BA7BB4 MOV X1, X0
	0x03BA7BB8 MOV X0, X20
	0x03BA7BBC MOV X2, X31
	0x03BA7BC0 BL 0x3B3175C
	0x03BA7BC4 LDR X0, [X19 + 0x20]
	0x03BA7BC8 CBZ X0, 0x3BA7DF4
	0x03BA7BCC MOV X1, X31
	0x03BA7BD0 BL 0x3C356F8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x83C000
	006 Move X21, 0x54D000
	007 Move W8, [X20+3194]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x54D000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3194], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X1, X31
	026 Move X2, X31
	027 Call Object.op_Inequality, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {51}
	032 Compare X19, 0
	033 JumpIfEqual {57}
	034 Move X0, X19
	035 Move X1, X31
	036 Call InputActionReference.get_action, X0
	037 Compare X0, 0
	038 JumpIfEqual {51}
	039 Move X0, X19
	040 Move X1, X31
	041 Call InputActionReference.get_action, X0
	042 Compare X0, 0
	043 JumpIfEqual {57}
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X1, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call InputAction.get_enabled, X0
	050 Return X0
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move W0, W31
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return X0
	057 Call 0x1C17F20

Method: System.Void EnableInputAction(UnityEngine.InputSystem.InputActionReference inputAction)

Disassembly:
	0x03BA7CE8 LDRH W9, [X8 + 0x12E]
	0x03BA7CEC LDR X1, [X10]
	0x03BA7CF0 CBZ X9, 0x3BA7D14
	0x03BA7CF4 LDR X10, [X8 + 0xB0]
	0x03BA7CF8 ADD X10, X10, 0x8
	0x03BA7CFC LDUR X11, [X10 - 0x8]
	0x03BA7D00 CMP X11, X1
	0x03BA7D04 B.EQ 0x3BA7D30
	0x03BA7D08 SUBS X9, X9, 0x1
	0x03BA7D0C ADD X10, X10, 0x10
	0x03BA7D10 B.NE 0x3BA7CFC
	0x03BA7D14 MOVZ W2, 0x1
	0x03BA7D18 MOV X0, X21
	0x03BA7D1C BL 0x1C5C788
	0x03BA7D20 B 0x3BA7D40
	0x03BA7D24 ADRP X8, 0x5B5000
	0x03BA7D28 LDR X8, [X8 + 0xD90]
	0x03BA7D2C B 0x3BA79E8
	0x03BA7D30 LDR W9, [X10]
	0x03BA7D34 ADD W9, W9, 0x1
	0x03BA7D38 ADD X8, X8, W9, 0x4, SXTW
	0x03BA7D3C ADD X0, X8, 0x138
	0x03BA7D40 LDP X8, X2, [X0]
	0x03BA7D44 MOV X0, X21
	0x03BA7D48 MOV X1, X22
	0x03BA7D4C BLR X8
	0x03BA7D50 CBZ X20, 0x3BA7DF4
	0x03BA7D54 MOV X1, X0
	0x03BA7D58 MOV X0, X20
	0x03BA7D5C MOV X2, X31
	0x03BA7D60 BL 0x3B3175C
	0x03BA7D64 LDR X0, [X19 + 0xF0]
	0x03BA7D68 CBZ X0, 0x3BA7DF4
	0x03BA7D6C ADRP X8, 0x5B5000
	0x03BA7D70 LDR X8, [X8 + 0xD40]
	0x03BA7D74 MOV W1, W31
	0x03BA7D78 LDR X2, [X8]
	0x03BA7D7C BL 0x28CBAFC
	0x03BA7D80 ADRP X8, 0x54C000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x83C000
	006 Move X21, 0x54D000
	007 Move W8, [X20+3195]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x54D000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3195], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X1, X31
	026 Move X2, X31
	027 Call Object.op_Equality, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {51}
	032 Compare X19, 0
	033 JumpIfEqual {56}
	034 Move X0, X19
	035 Move X1, X31
	036 Call InputActionReference.get_action, X0
	037 Compare X0, 0
	038 JumpIfEqual {51}
	039 Move X0, X19
	040 Move X1, X31
	041 Call InputActionReference.get_action, X0
	042 Compare X0, 0
	043 JumpIfEqual {56}
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X1, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call InputAction.Enable, X0
	050 Return 
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Return 
	056 Call 0x1C17F20

Method: System.Void DisableInputAction(UnityEngine.InputSystem.InputActionReference inputAction)

Disassembly:
	0x03BA7D84 LDR X20, [X19 + 0x70]
	0x03BA7D88 LDR X21, [X19 + 0xF0]
	0x03BA7D8C LDR X8, [X8 + 0xD28]
	0x03BA7D90 LDR X0, [X8]
	0x03BA7D94 BL 0x1C16F10
	0x03BA7D98 ADRP X8, 0x5B5000
	0x03BA7D9C LDR X8, [X8 + 0xD68]
	0x03BA7DA0 MOV X1, X19
	0x03BA7DA4 MOV X3, X31
	0x03BA7DA8 MOV X22, X0
	0x03BA7DAC LDR X2, [X8]
	0x03BA7DB0 BL 0x29818C8
	0x03BA7DB4 CBZ X21, 0x3BA7DF4
	0x03BA7DB8 ADRP X8, 0x5B5000
	0x03BA7DBC LDR X8, [X8 + 0xD20]
	0x03BA7DC0 MOV X0, X21
	0x03BA7DC4 MOV X1, X22
	0x03BA7DC8 LDR X2, [X8]
	0x03BA7DCC BL 0x28CBD04
	0x03BA7DD0 CBZ X20, 0x3BA7DF4
	0x03BA7DD4 MOV X1, X0
	0x03BA7DD8 MOV X0, X20
	0x03BA7DDC LDP X20, X19, [X31 + 0x30]
	0x03BA7DE0 LDP X22, X21, [X31 + 0x20]
	0x03BA7DE4 LDP X24, X23, [X31 + 0x10]
	0x03BA7DE8 MOV X2, X31
	0x03BA7DEC LDP X30, X25, [X31], #0x40
	0x03BA7DF0 B 0x3B3175C
	0x03BA7DF4 BL 0x1C16F20
	0x03BA7DF8 STP X30, X19, [X31 - 0x10]!
	0x03BA7DFC LDR X1, [X0 + 0xC0]
	0x03BA7E00 MOV X19, X0
	0x03BA7E04 CBZ X1, 0x3BA7E18
	0x03BA7E08 MOV X0, X19
	0x03BA7E0C MOV X2, X31
	0x03BA7E10 BL 0x3C36968
	0x03BA7E14 STR X31, [X19 + 0xC0]
	0x03BA7E18 LDR X1, [X19 + 0xB8]
	0x03BA7E1C CBZ X1, 0x3BA7E30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x83C000
	006 Move X21, 0x54D000
	007 Move W8, [X20+3196]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x54D000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3196], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X1, X31
	026 Move X2, X31
	027 Call Object.op_Equality, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {51}
	032 Compare X19, 0
	033 JumpIfEqual {56}
	034 Move X0, X19
	035 Move X1, X31
	036 Call InputActionReference.get_action, X0
	037 Compare X0, 0
	038 JumpIfEqual {51}
	039 Move X0, X19
	040 Move X1, X31
	041 Call InputActionReference.get_action, X0
	042 Compare X0, 0
	043 JumpIfEqual {56}
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X1, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call InputAction.Disable, X0
	050 Return 
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Return 
	056 Call 0x1C17F20

Method: System.Void SetInputAction(ref UnityEngine.InputSystem.InputActionReference inputAction, UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BA6034 FMUL S2, S2, S2
	0x03BA6038 FMUL S3, S3, S3
	0x03BA603C FADD S2, S2, S3
	0x03BA6040 FCMP S2, S8
	0x03BA6044 B.MI 0x3BA605C
	0x03BA6048 FSUB S9, S0, S10
	0x03BA604C FSUB S12, S1, S11
	0x03BA6050 MOVZ W20, 0x1
	0x03BA6054 MOV V10.16B, V0.16B
	0x03BA6058 MOV V11.16B, V1.16B
	0x03BA605C LDR X8, [X31 + 0x458]
	0x03BA6060 LDR W9, [X31 + 0x460]
	0x03BA6064 LDRH W10, [X31 + 0x2AC]
	0x03BA6068 LDRB W11, [X31 + 0x2AE]
	0x03BA606C LDR X27, [X19 + 0x378]
	0x03BA6070 ADD X0, X31, 0x30
	0x03BA6074 ADD X1, X31, 0x220
	0x03BA6078 MOVZ W2, 0x88
	0x03BA607C STR X8, [X31 + 0x3B0]
	0x03BA6080 STR W9, [X31 + 0x3B8]
	0x03BA6084 STRH W10, [X31 + 0x2FC]
	0x03BA6088 STRB W11, [X31 + 0x2FE]
	0x03BA608C BL 0x3EB1AC0
	0x03BA6090 CBZ X27, 0x3BA61CC
	0x03BA6094 ADRP X8, 0x5B6000
	0x03BA6098 LDR X8, [X8 + 0xC98]
	0x03BA609C LDR W9, [X31 + 0x3B8]
	0x03BA60A0 LDRB W10, [X31 + 0x2FE]
	0x03BA60A4 ADD X1, X31, 0x30
	0x03BA60A8 LDR X28, [X8]
	0x03BA60AC LDR X8, [X31 + 0x3B0]
	0x03BA60B0 MOVZ W2, 0x88
	0x03BA60B4 MOV X0, X24
	0x03BA60B8 STRB W20, [X31 + 0x310]
	0x03BA60BC STR X8, [X31 + 0x300]
	0x03BA60C0 LDRH W8, [X31 + 0x2FC]
	0x03BA60C4 STR W9, [X31 + 0x308]
	0x03BA60C8 STR W21, [X31 + 0x30C]
	0x03BA60CC STRB W10, [X23 + 0x2]
	0x03BA60D0 STRH W8, [X23]
	0x03BA60D4 STR S9, [X31 + 0x314]
	0x03BA60D8 STR S12, [X31 + 0x318]
	0x03BA60DC STR W26, [X31 + 0x31C]
	0x03BA60E0 STR S10, [X31 + 0x320]
	0x03BA60E4 STR S11, [X31 + 0x324]
	0x03BA60E8 BL 0x3EB1AC0
	0x03BA60EC ADD X2, X31, 0x300
	0x03BA60F0 MOV X0, X27
	0x03BA60F4 MOV W1, W25
	0x03BA60F8 MOV X3, X28
	0x03BA60FC BL 0x31815B0
	0x03BA6100 LDR W8, [X31 + 0x2C]
	0x03BA6104 ADD W22, W22, 0x1
	0x03BA6108 CMP W22, W8
	0x03BA610C B.NE 0x3BA5CA4
	0x03BA6110 ADRP X26, 0x5B6000
	0x03BA6114 LDR X0, [X19 + 0x378]
	0x03BA6118 LDR X25, [X31 + 0x10]
	0x03BA611C LDR W20, [X31 + 0xC]
	0x03BA6120 LDR X26, [X26 + 0xC98]
	0x03BA6124 CBZ X0, 0x3BA61CC
	0x03BA6128 ADD X8, X31, 0x170
	0x03BA612C MOV W21, W31
	0x03BA6130 ADD X22, X8, 0x8
	0x03BA6134 LDR W8, [X0 + 0x18]
	0x03BA6138 CMP W21, W8
	0x03BA613C B.GE 0x3BA61D0
	0x03BA6140 LDR X2, [X29]
	0x03BA6144 ADD X8, X31, 0x300
	0x03BA6148 MOV W1, W21
	0x03BA614C BL 0x318154C
	0x03BA6150 ADD X0, X31, 0x170
	0x03BA6154 ADD X1, X31, 0x300
	0x03BA6158 MOVZ W2, 0xB0
	0x03BA615C BL 0x3EB1AC0
	0x03BA6160 MOV X0, X19
	0x03BA6164 MOV X1, X22
	0x03BA6168 BL 0x3BA29B8
	0x03BA616C LDR W8, [X31 + 0x18C]
	0x03BA6170 SUB W8, W8, 0x3
	0x03BA6174 CMP W8, 0x1
	0x03BA6178 B.HI 0x3BA6180
	0x03BA617C STRB W31, [X31 + 0x170]
	0x03BA6180 LDR X23, [X19 + 0x378]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x83D000
	008 Move X23, 0x54E000
	009 Move W8, [X22+3197]
	010 Move X23, [X23+2416]
	011 Move X21, X2
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x54E000
	019 Move X0, [X0+2416]
	020 Call 0x1C17CF4
	021 Move X0, 0x54E000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+3197], W8
	026 Move X0, [X23]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X31
	032 Call Application.get_isPlaying
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {62}
	037 Move X8, 0x54E000
	038 Move X8, [X8+1432]
	039 Move X22, [X19]
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X22
	046 Move X1, X31
	047 Move X2, X31
	048 Call Object.op_Inequality, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {62}
	053 Move X0, [X19]
	054 Compare X0, 0
	055 JumpIfEqual {120}
	056 Move X1, X31
	057 Call InputActionReference.get_action, X0
	058 Compare X0, 0
	059 JumpIfEqual {62}
	060 Move X1, X31
	061 Call InputAction.Disable, X0
	062 Move [X19], X21
	063 Move X0, [X23]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X0, X31
	069 Call Application.get_isPlaying
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {113}
	074 Move X0, X20
	075 Move X1, X31
	076 Call Behaviour.get_isActiveAndEnabled, X0
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {113}
	081 Move X8, 0x54E000
	082 Move X8, [X8+1432]
	083 Move X20, [X19]
	084 Move X0, [X8]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Move X0, X20
	090 Move X1, X31
	091 Move X2, X31
	092 Call Object.op_Inequality, X0, X1
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {113}
	097 Move X0, [X19]
	098 Compare X0, 0
	099 JumpIfEqual {120}
	100 Move X1, X31
	101 Call InputActionReference.get_action, X0
	102 Compare X0, 0
	103 JumpIfEqual {113}
	104 Move X20, [X31+32]
	105 Move X19, [X31+40]
	106 Move X22, [X31+16]
	107 Move X21, [X31+24]
	108 Move X1, X31
	109 Move X30, [X31+48]
	110 Move X23, [X31+56]
	111 Call InputAction.Enable, X0
	112 Return 
	113 Move X20, [X31+32]
	114 Move X19, [X31+40]
	115 Move X22, [X31+16]
	116 Move X21, [X31+24]
	117 Move X30, [X31+48]
	118 Move X23, [X31+56]
	119 Return 
	120 Call 0x1C17F20

Method: System.Int32 GetDisplayIndexFor(UnityEngine.InputSystem.InputControl control)

Disassembly:
	0x03BA7BD4 CBZ X0, 0x3BA7DF4
	0x03BA7BD8 MOV X1, X31
	0x03BA7BDC BL 0x3C3FBAC
	0x03BA7BE0 LDR X20, [X19 + 0x68]
	0x03BA7BE4 MOV X0, X31
	0x03BA7BE8 STP S0, S1, [X19 + 0xE0]
	0x03BA7BEC STR S2, [X19 + 0xE8]
	0x03BA7BF0 BL 0x3887BE4
	0x03BA7BF4 CBZ X20, 0x3BA7DF4
	0x03BA7BF8 LDR X1, [X23]
	0x03BA7BFC MOV X0, X20
	0x03BA7C00 BL 0x270B594
	0x03BA7C04 LDR X0, [X24]
	0x03BA7C08 LDP X21, X20, [X19 + 0x68]
	0x03BA7C0C BL 0x1C16F10
	0x03BA7C10 ADRP X8, 0x5B5000
	0x03BA7C14 LDR X8, [X8 + 0xD60]
	0x03BA7C18 MOV X1, X19
	0x03BA7C1C MOV X3, X31
	0x03BA7C20 MOV X22, X0
	0x03BA7C24 LDR X2, [X8]
	0x03BA7C28 BL 0x2A70A68
	0x03BA7C2C CBZ X21, 0x3BA7DF4
	0x03BA7C30 LDR X2, [X25]
	0x03BA7C34 MOV X0, X21
	0x03BA7C38 MOV X1, X22
	0x03BA7C3C BL 0x28D1034
	0x03BA7C40 CBZ X20, 0x3BA7DF4
	0x03BA7C44 MOV X1, X0
	0x03BA7C48 MOV X0, X20
	0x03BA7C4C MOV X2, X31
	0x03BA7C50 BL 0x3B3175C
	0x03BA7C54 ADRP X21, 0x5B5000
	0x03BA7C58 LDR X21, [X21 + 0xD80]
	0x03BA7C5C LDR X20, [X19 + 0x70]
	0x03BA7C60 LDR X0, [X21]
	0x03BA7C64 LDR W8, [X0 + 0xE0]
	0x03BA7C68 CBNZ W8, 0x3BA7C70
	0x03BA7C6C BL 0x1C16DFC
	0x03BA7C70 ADRP X22, 0x83B000
	0x03BA7C74 LDRB W8, [X22 + 0xCB7]
	0x03BA7C78 CBNZ W8, 0x3BA7C90
	0x03BA7C7C ADRP X0, 0x5B5000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x83C000
	005 Move W8, [X20+3198]
	006 Move X19, X1
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x5A3000
	012 Move X0, [X0+752]
	013 Call 0x1C17CF4
	014 Move X0, 0x5A1000
	015 Move X0, [X0+960]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3198], W8
	019 Compare X19, 0
	020 JumpIfEqual {35}
	021 Move X8, [X19+120]
	022 Compare X8, 0
	023 JumpIfEqual {35}
	024 Move X9, 0x5A1000
	025 Move X9, [X9+960]
	026 Move X10, [X8]
	027 Move X9, [X9]
	028 Move W12, [X10+304]
	029 Move W11, [X9+304]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X10, [X10+200]
	032 Add X10, X10, X11
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move W0, W31
	038 Move X30, [X31+32]
	039 Return X0
	040 Move X0, [X8+408]
	041 Compare X0, 0
	042 JumpIfEqual {51}
	043 Move X8, 0x5A3000
	044 Move X8, [X8+752]
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X1, [X8]
	048 Move X30, [X31+32]
	049 Call InputControl`1<Int32>.ReadValue, X0
	050 Return X0
	051 Call 0x1C17F20

Method: System.Single get_maxRaycastDistance()

Disassembly:
	0x03BA7E20 MOV X0, X19
	0x03BA7E24 MOV X2, X31

ISIL:
	001 Move V0, [X0+292]
	002 Return V0

Method: System.Void set_maxRaycastDistance(System.Single value)

Disassembly:
	0x03BA7E28 BL 0x3C36968
	0x03BA7E2C STR X31, [X19 + 0xB8]

ISIL:
	001 Move [X0+292], S0
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x03BA7E30 LDR X0, [X19 + 0x70]
	0x03BA7E34 CBZ X0, 0x3BA7E88
	0x03BA7E38 MOV X1, X31
	0x03BA7E3C BL 0x3B31AF0
	0x03BA7E40 LDR X0, [X19 + 0x20]
	0x03BA7E44 CBZ X0, 0x3BA7E88
	0x03BA7E48 MOV X1, X31
	0x03BA7E4C BL 0x3C356F8
	0x03BA7E50 CBZ X0, 0x3BA7E88
	0x03BA7E54 LDP S1, S2, [X19 + 0xE4]
	0x03BA7E58 LDR V0, [X19 + 0xE0]
	0x03BA7E5C MOV X1, X31
	0x03BA7E60 BL 0x3C3FC4C
	0x03BA7E64 LDR X0, [X19 + 0x20]
	0x03BA7E68 CBZ X0, 0x3BA7E88
	0x03BA7E6C MOVZ W1, 0x1
	0x03BA7E70 MOV X2, X31
	0x03BA7E74 BL 0x3C357B4
	0x03BA7E78 STR X31, [X19 + 0xC0]
	0x03BA7E7C STRB W31, [X19 + 0x80]
	0x03BA7E80 LDP X30, X19, [X31], #0x10
	0x03BA7E84 RET
	0x03BA7E88 BL 0x1C16F20
	0x03BA7E8C STR X31, [X0 + 0xC0]
	0x03BA7E90 STRB W31, [X0 + 0x80]
	0x03BA7E94 RET
	0x03BA7E98 STR X30, [X31 - 0x20]!
	0x03BA7E9C STP X20, X19, [X31 + 0x10]
	0x03BA7EA0 ADRP X20, 0x83B000
	0x03BA7EA4 LDRB W8, [X20 + 0xC87]
	0x03BA7EA8 MOV X19, X0
	0x03BA7EAC TBNZ X8, 0x0, 0x3BA7EC4
	0x03BA7EB0 ADRP X0, 0x5B5000
	0x03BA7EB4 LDR X0, [X0 + 0x880]
	0x03BA7EB8 BL 0x1C16CF4
	0x03BA7EBC MOVZ W8, 0x1
	0x03BA7EC0 STRB W8, [X20 + 0xC87]
	0x03BA7EC4 LDR X0, [X19 + 0x58]
	0x03BA7EC8 CBZ X0, 0x3BA7EE4
	0x03BA7ECC ADRP X8, 0x5B5000
	0x03BA7ED0 LDR X8, [X8 + 0x880]
	0x03BA7ED4 LDP X20, X19, [X31 + 0x10]
	0x03BA7ED8 LDR X1, [X8]
	0x03BA7EDC LDR X30, [X31], #0x20
	0x03BA7EE0 B 0x270B618
	0x03BA7EE4 BL 0x1C16F20
	0x03BA7EE8 STP X30, X19, [X31 - 0x10]!
	0x03BA7EEC MOV X19, X0
	0x03BA7EF0 LDR X0, [X0 + 0x58]
	0x03BA7EF4 CBZ X0, 0x3BA7F3C
	0x03BA7EF8 LDR V0, [X19 + 0x40]
	0x03BA7EFC MOV X1, X31
	0x03BA7F00 STR S0, [X0 + 0xA8]
	0x03BA7F04 LDR V0, [X19 + 0x44]
	0x03BA7F08 BL 0x3B92118
	0x03BA7F0C LDR X8, [X19 + 0x58]
	0x03BA7F10 CBZ X8, 0x3BA7F3C
	0x03BA7F14 LDR V0, [X19 + 0x48]
	0x03BA7F18 ADRP X9, 0xFFFFFFFFFCF43000
	0x03BA7F1C LDR V1, [X9 + 0x104]
	0x03BA7F20 STR S0, [X8 + 0xB0]
	0x03BA7F24 LDR V0, [X19 + 0x50]
	0x03BA7F28 FMUL S0, S0, S1
	0x03BA7F2C BL 0x3EB1BD0
	0x03BA7F30 STR S0, [X19 + 0x54]
	0x03BA7F34 LDP X30, X19, [X31], #0x10
	0x03BA7F38 RET
	0x03BA7F3C BL 0x1C16F20
	0x03BA7F40 STP X30, X19, [X31 - 0x10]!
	0x03BA7F44 MOV X19, X0
	0x03BA7F48 STR W1, [X0 + 0xA0]
	0x03BA7F4C BL 0x3BA7F68
	0x03BA7F50 CBZ X0, 0x3BA7F60
	0x03BA7F54 LDP X1, X2, [X19 + 0xA8]
	0x03BA7F58 LDP X30, X19, [X31], #0x10
	0x03BA7F5C B 0x3BA714C
	0x03BA7F60 LDP X30, X19, [X31], #0x10
	0x03BA7F64 RET
	0x03BA7F68 STR X30, [X31 - 0x20]!
	0x03BA7F6C STP X20, X19, [X31 + 0x10]
	0x03BA7F70 ADRP X20, 0x83B000
	0x03BA7F74 LDRB W8, [X20 + 0xC88]
	0x03BA7F78 MOV X19, X0
	0x03BA7F7C TBNZ X8, 0x0, 0x3BA7F94
	0x03BA7F80 ADRP X0, 0x5B5000
	0x03BA7F84 LDR X0, [X0 + 0xDA0]
	0x03BA7F88 BL 0x1C16CF4
	0x03BA7F8C MOVZ W8, 0x1
	0x03BA7F90 STRB W8, [X20 + 0xC88]
	0x03BA7F94 LDR W8, [X19 + 0xA0]
	0x03BA7F98 CMP W8, 0x2
	0x03BA7F9C B.NE 0x3BA7FAC
	0x03BA7FA0 LDR X0, [X19 + 0x98]
	0x03BA7FA4 CBNZ X0, 0x3BA7FB4
	0x03BA7FA8 BL 0x1C16F20
	0x03BA7FAC LDR X0, [X19 + 0x90]
	0x03BA7FB0 CBZ X0, 0x3BA7FA8
	0x03BA7FB4 ADRP X8, 0x5B5000
	0x03BA7FB8 LDR X8, [X8 + 0xDA0]
	0x03BA7FBC LDP X20, X19, [X31 + 0x10]
	0x03BA7FC0 LDR X1, [X8]
	0x03BA7FC4 LDR X30, [X31], #0x20
	0x03BA7FC8 B 0x29AD9C0
	0x03BA7FCC STR D14, [X31 - 0x60]!
	0x03BA7FD0 STP D13, D12, [X31 + 0x10]
	0x03BA7FD4 STP D11, D10, [X31 + 0x20]
	0x03BA7FD8 STP D9, D8, [X31 + 0x30]
	0x03BA7FDC STP X30, X21, [X31 + 0x40]
	0x03BA7FE0 STP X20, X19, [X31 + 0x50]
	0x03BA7FE4 ADRP X20, 0x83B000
	0x03BA7FE8 LDRB W8, [X20 + 0xC89]
	0x03BA7FEC MOV X19, X0
	0x03BA7FF0 TBNZ X8, 0x0, 0x3BA802C
	0x03BA7FF4 ADRP X0, 0x54D000
	0x03BA7FF8 LDR X0, [X0 + 0xE70]
	0x03BA7FFC BL 0x1C16CF4
	0x03BA8000 ADRP X0, 0x5B4000
	0x03BA8004 LDR X0, [X0 + 0xDA8]
	0x03BA8008 BL 0x1C16CF4
	0x03BA800C ADRP X0, 0x5B4000
	0x03BA8010 LDR X0, [X0 + 0x5C8]
	0x03BA8014 BL 0x1C16CF4
	0x03BA8018 ADRP X0, 0x5B4000
	0x03BA801C LDR X0, [X0 + 0xDB0]
	0x03BA8020 BL 0x1C16CF4
	0x03BA8024 MOVZ W8, 0x1
	0x03BA8028 STRB W8, [X20 + 0xC89]
	0x03BA802C LDR X1, [X19 + 0xB8]
	0x03BA8030 CBZ X1, 0x3BA8044
	0x03BA8034 MOV X0, X19
	0x03BA8038 MOV X2, X31
	0x03BA803C BL 0x3C36968
	0x03BA8040 STR X31, [X19 + 0xB8]
	0x03BA8044 LDR X0, [X19 + 0x20]
	0x03BA8048 CBZ X0, 0x3BA8150
	0x03BA804C MOVZ W1, 0x1
	0x03BA8050 MOV X2, X31
	0x03BA8054 BL 0x3C357B4
	0x03BA8058 LDRB W8, [X19 + 0x88]
	0x03BA805C CBZ W8, 0x3BA8068
	0x03BA8060 LDR X8, [X19 + 0xC0]
	0x03BA8064 CBZ X8, 0x3BA8074
	0x03BA8068 STR X31, [X19 + 0xC0]
	0x03BA806C STRB W31, [X19 + 0x80]
	0x03BA8070 B 0x3BA8134
	0x03BA8074 LDR X20, [X19 + 0x68]
	0x03BA8078 CBZ X20, 0x3BA8150

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X29, 0x83C000
	014 Move X28, 0x5A0000
	015 Move X27, 0x5A0000
	016 Move X26, 0x5A0000
	017 Move X25, 0x591000
	018 Move X24, 0x5B6000
	019 Move X20, 0x5B6000
	020 Move X23, 0x5B6000
	021 Move X21, 0x5B6000
	022 Move X22, 0x5B6000
	023 Move X28, [X28+2800]
	024 Move X27, [X27+2752]
	025 Move X26, [X26+2744]
	026 Move X25, [X25+2824]
	027 Move W8, [X29+3199]
	028 Move X24, [X24+3232]
	029 Move X20, [X20+3240]
	030 Move X23, [X23+3248]
	031 Move X21, [X21+3256]
	032 Move X22, [X22+3264]
	033 Move X19, X0
	034 Move TEMP, X8
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {79}
	038 Move X0, 0x5B6000
	039 Move X0, [X0+3272]
	040 Call 0x1C17CF4
	041 Move X0, 0x5B6000
	042 Move X0, [X0+3280]
	043 Call 0x1C17CF4
	044 Move X0, 0x5B6000
	045 Move X0, [X0+3288]
	046 Call 0x1C17CF4
	047 Move X0, 0x5B6000
	048 Move X0, [X0+3256]
	049 Call 0x1C17CF4
	050 Move X0, 0x5B6000
	051 Move X0, [X0+3240]
	052 Call 0x1C17CF4
	053 Move X0, 0x5B6000
	054 Move X0, [X0+3232]
	055 Call 0x1C17CF4
	056 Move X0, 0x5B6000
	057 Move X0, [X0+3248]
	058 Call 0x1C17CF4
	059 Move X0, 0x5B6000
	060 Move X0, [X0+3296]
	061 Call 0x1C17CF4
	062 Move X0, 0x5B6000
	063 Move X0, [X0+3264]
	064 Call 0x1C17CF4
	065 Move X0, 0x5A0000
	066 Move X0, [X0+2744]
	067 Call 0x1C17CF4
	068 Move X0, 0x5A0000
	069 Move X0, [X0+2752]
	070 Call 0x1C17CF4
	071 Move X0, 0x5A0000
	072 Move X0, [X0+2800]
	073 Call 0x1C17CF4
	074 Move X0, 0x591000
	075 Move X0, [X0+2824]
	076 Call 0x1C17CF4
	077 Move W8, 1
	078 Move [X29+3199], W8
	079 Move W8, 0x447A0000
	080 Move W9, 257
	081 Move [X19+292], W8
	082 Move W8, 1
	083 NotImplemented "Instruction STRH not yet implemented."
	084 Move [X19+298], W8
	085 NotImplemented "Instruction STRH not yet implemented."
	086 Move [X19+370], W8
	087 Move X9, [X28]
	088 Move X8, [X27]
	089 Move [X19+376], X9
	090 Move [X19+384], X8
	091 Move X9, [X26]
	092 Move X8, [X25]
	093 Move [X19+392], X9
	094 Move [X19+400], X8
	095 Move X0, [X24]
	096 Call 0x1C17F10
	097 Move X1, [X20]
	098 Move X20, X0
	099 Call List`1<RegisteredTouch>..ctor, X0
	100 Move [X19+888], X20
	101 Move X0, [X23]
	102 Call 0x1C17F10
	103 Move X1, [X21]
	104 Move X20, X0
	105 Call List`1<RegisteredInteractor>..ctor, X0
	106 Move [X19+896], X20
	107 Move X0, [X22]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {113}
	111 Call 0x1C17DFC
	112 Move X0, [X22]
	113 Move X8, [X0+184]
	114 Move X24, 0x5B6000
	115 Move X23, 0x5B6000
	116 Move X20, [X8+8]
	117 Move X24, [X24+3288]
	118 Move X23, [X23+3280]
	119 Compare X20, 0
	120 JumpIfNotEqual {142}
	121 Move W8, [X0+224]
	122 Compare W8, 0
	123 JumpIfNotEqual {126}
	124 Call 0x1C17DFC
	125 Move X0, [X22]
	126 Move X9, 0x5B6000
	127 Move X8, [X0+184]
	128 Move X9, [X9+3272]
	129 Move X21, [X8]
	130 Move X0, [X9]
	131 Call 0x1C17F10
	132 Move X8, 0x5B5000
	133 Move X8, [X8+3296]
	134 Move X1, X21
	135 Move X3, X31
	136 Move X20, X0
	137 Move X2, [X8]
	138 Call Func`1<Object>..ctor, X0, X1, X2
	139 Move X8, [X22]
	140 Move X8, [X8+184]
	141 Move [X8+8], X20
	142 Move X0, [X24]
	143 Call 0x1C17F10
	144 Move X7, [X23]
	145 Move W6, 0x2710
	146 Move X1, X20
	147 Move X2, X31
	148 Move X3, X31
	149 Move X4, X31
	150 Move W5, W31
	151 Move X21, X0
	152 Call 0x2EF1EC8, X0, X1, X2, X3, X4, X5, X6
	153 Move [X19+904], X21
	154 Move X0, X19
	155 Move X20, [X31+80]
	156 Move X19, [X31+88]
	157 Move X22, [X31+64]
	158 Move X21, [X31+72]
	159 Move X24, [X31+48]
	160 Move X23, [X31+56]
	161 Move X26, [X31+32]
	162 Move X25, [X31+40]
	163 Move X28, [X31+16]
	164 Move X27, [X31+24]
	165 Move X29, [X31+96]
	166 Move X30, [X31+104]
	167 Call UIInputModule..ctor, X0
	168 Return 

