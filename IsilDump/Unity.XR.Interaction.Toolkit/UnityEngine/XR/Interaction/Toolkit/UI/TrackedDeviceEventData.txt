Type: UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceEventData

Method: System.Void .ctor(UnityEngine.EventSystems.EventSystem eventSystem)

Disassembly:
	0x03B9BABC ADRP X10, 0x5C0000
	0x03B9BAC0 LDR X8, [X20]

ISIL:
	001 Move X2, X31
	002 Call PointerEventData..ctor, X0, X1
	003 Return 

Method: System.Collections.Generic.List`1<UnityEngine.Vector3> get_rayPoints()

Disassembly:
	0x03B9BAC4 LDR X10, [X10 + 0x208]
	0x03B9BAC8 LDRH W9, [X8 + 0x12E]

ISIL:
	001 Move X0, [X0+384]
	002 Return X0

Method: System.Void set_rayPoints(System.Collections.Generic.List`1<UnityEngine.Vector3> value)

Disassembly:
	0x03B9BACC LDR X1, [X10]
	0x03B9BAD0 CBZ X9, 0x3B9BAF4

ISIL:
	001 Move [X0+384], X1
	002 Return 

Method: System.Int32 get_rayHitIndex()

Disassembly:
	0x03B9BAD4 LDR X10, [X8 + 0xB0]
	0x03B9BAD8 ADD X10, X10, 0x8

ISIL:
	001 Move W0, [X0+392]
	002 Return X0

Method: System.Void set_rayHitIndex(System.Int32 value)

Disassembly:
	0x03B9BADC LDUR X11, [X10 - 0x8]
	0x03B9BAE0 CMP X11, X1

ISIL:
	001 Move [X0+392], W1
	002 Return 

Method: UnityEngine.LayerMask get_layerMask()

Disassembly:
	0x03B9BAE4 B.EQ 0x3B9BB28
	0x03B9BAE8 SUBS X9, X9, 0x1

ISIL:
	001 Move W0, [X0+396]
	002 Return X0

Method: System.Void set_layerMask(UnityEngine.LayerMask value)

Disassembly:
	0x03B9BAEC ADD X10, X10, 0x10
	0x03B9BAF0 B.NE 0x3B9BADC

ISIL:
	001 Move [X0+396], W1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.UI.IUIInteractor get_interactor()

Disassembly:
	0x03B9BAF4 MOVZ W2, 0x3
	0x03B9BAF8 MOV X0, X20
	0x03B9BAFC BL 0x1C5C788
	0x03B9BB00 B 0x3B9BB38
	0x03B9BB04 LDR X1, [X21]
	0x03B9BB08 ADD X0, X31, 0x80
	0x03B9BB0C BL 0x2C0A83C
	0x03B9BB10 MOVI V0.2D, 0x0
	0x03B9BB14 MOV W0, W31
	0x03B9BB18 STR X31, [X19 + 0x30]
	0x03B9BB1C STP V0, V0, [X19 + 0x10]
	0x03B9BB20 STR V0, [X19]
	0x03B9BB24 B 0x3B9BB80
	0x03B9BB28 LDR W9, [X10]
	0x03B9BB2C ADD W9, W9, 0x3
	0x03B9BB30 ADD X8, X8, W9, 0x4, SXTW
	0x03B9BB34 ADD X0, X8, 0x138
	0x03B9BB38 LDP X9, X1, [X0]
	0x03B9BB3C ADD X8, X31, 0x8
	0x03B9BB40 MOV X0, X20
	0x03B9BB44 BLR X9
	0x03B9BB48 LDUR V0, [X31 + 0x8]
	0x03B9BB4C LDUR V1, [X31 + 0x18]
	0x03B9BB50 LDUR V2, [X31 + 0x28]
	0x03B9BB54 LDR X8, [X31 + 0x38]
	0x03B9BB58 ADD X0, X31, 0x80
	0x03B9BB5C STP V0, V1, [X31 + 0x40]
	0x03B9BB60 STR V2, [X31 + 0x6]
	0x03B9BB64 STR X8, [X31 + 0x70]
	0x03B9BB68 STR X8, [X19 + 0x30]
	0x03B9BB6C STP V1, V2, [X19 + 0x10]
	0x03B9BB70 STR V0, [X19]
	0x03B9BB74 LDR X1, [X21]
	0x03B9BB78 BL 0x2C0A83C
	0x03B9BB7C MOVZ W0, 0x1
	0x03B9BB80 LDP X20, X19, [X31 + 0xE0]
	0x03B9BB84 LDP X22, X21, [X31 + 0xD0]
	0x03B9BB88 LDP X24, X23, [X31 + 0xC0]
	0x03B9BB8C LDR X30, [X31 + 0xB0]
	0x03B9BB90 ADD X31, X31, 0xF0
	0x03B9BB94 RET
	0x03B9BB98 BL 0x1C16F20
	0x03B9BB9C BL 0x1C16F20
	0x03B9BBA0 BL 0x1C16F20
	0x03B9BBA4 BL 0x1C16F20
	0x03B9BBA8 B 0x3B9BBBC
	0x03B9BBAC B 0x3B9BBBC
	0x03B9BBB0 B 0x3B9BBBC
	0x03B9BBB4 B 0x3B9BBBC
	0x03B9BBB8 B 0x3B9BBBC
	0x03B9BBBC MOV X20, X0
	0x03B9BBC0 CMP W1, 0x1
	0x03B9BBC4 B.NE 0x3B9BBF8
	0x03B9BBC8 MOV X0, X20
	0x03B9BBCC BL 0x3EB1AD0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x848000
	006 Move W8, [X20+3078]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x559000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move X0, 0x5C2000
	016 Move X0, [X0+2304]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3078], W8
	020 Move X21, 0x559000
	021 Move X21, [X21+1432]
	022 Move X0, X19
	023 Move X1, X31
	024 Call BaseEventData.get_currentInputModule, X0
	025 Compare X0, 0
	026 JumpIfEqual {34}
	027 Move X8, 0x5C2000
	028 Move X8, [X8+2304]
	029 Move X9, [X0]
	030 Move X8, [X8]
	031 Move W11, [X9+304]
	032 Move W10, [X8+304]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X20, X31
	035 Move X9, [X9+200]
	036 Add X9, X9, X10
	037 NotImplemented "Instruction LDUR not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CSEL not yet implemented."
	040 Move X0, [X21]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X20
	046 Move X1, X31
	047 Move X2, X31
	048 Call Object.op_Inequality, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {61}
	053 Compare X20, 0
	054 JumpIfEqual {67}
	055 Move W1, [X19+256]
	056 Move X0, X20
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X0, X31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Return X0
	067 Call 0x1C17F20

Method: UnityEngine.Vector3 get_pressWorldPosition()

Disassembly:
	0x03B9BCC4 LDR X8, [X8 + 0x9B0]
	0x03B9BCC8 MOV X1, X19
	0x03B9BCCC LDR X2, [X8]
	0x03B9BCD0 BL 0x2AA528C

ISIL:
	001 Move V0, [X0+400]
	002 Move V1, [X0+404]
	003 Move V2, [X0+408]
	004 Return X0

Method: System.Void set_pressWorldPosition(UnityEngine.Vector3 value)

Disassembly:
	0x03B9BCD4 TBNZ X0, 0x0, 0x3B9BD40
	0x03B9BCD8 ADRP X8, 0x5C0000
	0x03B9BCDC LDR X21, [X20 + 0x68]
	0x03B9BCE0 LDR X8, [X8 + 0x268]

ISIL:
	001 Move [X0+400], S0
	002 Move [X0+404], S1
	003 Move [X0+408], S2
	004 Return 

