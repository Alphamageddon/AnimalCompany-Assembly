Type: UnityEngine.XR.Interaction.Toolkit.UI.BodyUI.HandMenu

Method: UnityEngine.GameObject get_handMenuUIGameObject()

Disassembly:
	0x03BA85E8 STRB W8, [X22 + 0x783]
	0x03BA85EC ADRP X8, 0x54B000

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_handMenuUIGameObject(UnityEngine.GameObject value)

Disassembly:
	0x03BA85F0 LDR X8, [X8 + 0x5A0]
	0x03BA85F4 LDR X8, [X8]

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.UI.BodyUI.HandMenu/MenuHandedness get_menuHandedness()

Disassembly:
	0x03BA85F8 LDR X8, [X8 + 0xB8]
	0x03BA85FC LDP S12, S13, [X8]

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_menuHandedness(UnityEngine.XR.Interaction.Toolkit.UI.BodyUI.HandMenu/MenuHandedness value)

Disassembly:
	0x03BA8600 LDR V11, [X8 + 0x8]
	0x03BA8604 STP S12, S13, [X31 + 0x28]

ISIL:
	001 Move [X0+40], W1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.UI.BodyUI.HandMenu/UpDirection get_handMenuUpDirection()

Disassembly:
	0x03BA8608 STR S11, [X31 + 0x30]
	0x03BA860C TBZ X21, 0x0, 0x3BA8668

ISIL:
	001 Move W0, [X0+44]
	002 Return X0

Method: System.Void set_handMenuUpDirection(UnityEngine.XR.Interaction.Toolkit.UI.BodyUI.HandMenu/UpDirection value)

Disassembly:
	0x03BA8610 LDRB W8, [X19 + 0x4C]
	0x03BA8614 CBZ W8, 0x3BA864C

ISIL:
	001 Move [X0+44], W1
	002 Return 

Method: UnityEngine.Transform get_leftPalmAnchor()

Disassembly:
	0x03BA8618 LDR X0, [X19 + 0xC8]
	0x03BA861C CBZ X0, 0x3BA883C

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_leftPalmAnchor(UnityEngine.Transform value)

Disassembly:
	0x03BA8620 MOV X1, X31
	0x03BA8624 BL 0x3C3FA04

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: UnityEngine.Transform get_rightPalmAnchor()

Disassembly:
	0x03BA8628 LDR V3, [X19 + 0x54]
	0x03BA862C FMUL S0, S12, S0

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_rightPalmAnchor(UnityEngine.Transform value)

Disassembly:
	0x03BA8630 FMUL S1, S1, S13
	0x03BA8634 FADD S0, S0, S1

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.Single get_minFollowDistance()

Disassembly:
	0x03BA8638 FMUL S1, S2, S11
	0x03BA863C FADD S0, S1, S0

ISIL:
	001 Move V0, [X0+64]
	002 Return V0

Method: System.Void set_minFollowDistance(System.Single value)

Disassembly:
	0x03BA8640 FCMP S0, S3
	0x03BA8644 CSET W1, GT
	0x03BA8648 B 0x3BA8650
	0x03BA864C MOVZ W1, 0x1
	0x03BA8650 LDR X0, [X19 + 0xF0]
	0x03BA8654 CBZ X0, 0x3BA883C
	0x03BA8658 ADRP X8, 0x5B4000
	0x03BA865C LDR X8, [X8 + 0xD40]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+88]
	003 Move [X0+64], S0
	004 Compare X8, 0
	005 JumpIfEqual {9}
	006 Move [X8+168], S0
	007 Move X30, [X31+16]
	008 Return 
	009 Call 0x1C17F20

Method: System.Single get_maxFollowDistance()

Disassembly:
	0x03BA8660 LDR X2, [X8]
	0x03BA8664 BL 0x28CBAFC

ISIL:
	001 Move V0, [X0+68]
	002 Return V0

Method: System.Void set_maxFollowDistance(System.Single value)

Disassembly:
	0x03BA8668 LDR X0, [X19 + 0x20]
	0x03BA866C CBZ X0, 0x3BA883C
	0x03BA8670 MOV X1, X31
	0x03BA8674 BL 0x3C357F8
	0x03BA8678 TBZ X0, 0x0, 0x3BA881C
	0x03BA867C LDR X0, [X19 + 0xD8]
	0x03BA8680 CBZ X0, 0x3BA883C
	0x03BA8684 MOV X1, X31
	0x03BA8688 BL 0x3C3F58C

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move X0, [X0+88]
	004 Move [X8+68], S0
	005 Compare X0, 0
	006 JumpIfEqual {11}
	007 Move X1, X31
	008 Move X30, [X31+16]
	009 Call SmartFollowVector3TweenableVariable.set_maxDistanceAllowed, X0, V0
	010 Return 
	011 Call 0x1C17F20

Method: System.Single get_minToMaxDelaySeconds()

Disassembly:
	0x03BA868C LDR X0, [X19 + 0xD8]
	0x03BA8690 CBZ X0, 0x3BA883C

ISIL:
	001 Move V0, [X0+72]
	002 Return V0

Method: System.Void set_minToMaxDelaySeconds(System.Single value)

Disassembly:
	0x03BA8694 MOV X1, X31
	0x03BA8698 MOV V8.16B, V0.16B
	0x03BA869C MOV V9.16B, V1.16B
	0x03BA86A0 MOV V10.16B, V2.16B
	0x03BA86A4 BL 0x3C3DEB4
	0x03BA86A8 LDR W8, [X31 + 0x54]
	0x03BA86AC STP S0, S1, [X31 + 0x18]
	0x03BA86B0 STP S2, S3, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+88]
	003 Move [X0+72], S0
	004 Compare X8, 0
	005 JumpIfEqual {9}
	006 Move [X8+176], S0
	007 Move X30, [X31+16]
	008 Return 
	009 Call 0x1C17F20

Method: System.Boolean get_hideMenuWhenGazeDiverges()

Disassembly:
	0x03BA86B4 SUB W9, W8, 0x1
	0x03BA86B8 CMP W9, 0x1

ISIL:
	001 Move W0, [X0+76]
	002 Return X0

Method: System.Void set_hideMenuWhenGazeDiverges(System.Boolean value)

Disassembly:
	0x03BA86BC B.HI 0x3BA872C
	0x03BA86C0 CBZ X20, 0x3BA883C
	0x03BA86C4 LDR X1, [X19 + 0xD0]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+76], W8
	003 Return 

Method: System.Single get_menuVisibleGazeDivergenceThreshold()

Disassembly:
	0x03BA86C8 CMP W8, 0x2
	0x03BA86CC CSET W2, EQ

ISIL:
	001 Move V0, [X0+80]
	002 Return V0

Method: System.Void set_menuVisibleGazeDivergenceThreshold(System.Single value)

Disassembly:
	0x03BA86D0 MOV X0, X20
	0x03BA86D4 BL 0x3BA72D0
	0x03BA86D8 LDRB W8, [X20 + 0x5C]
	0x03BA86DC CBZ W8, 0x3BA872C
	0x03BA86E0 FNEG S3, S13
	0x03BA86E4 LDR V4, [X20 + 0x64]
	0x03BA86E8 FMUL S0, S0, S12
	0x03BA86EC FMUL S1, S1, S3
	0x03BA86F0 FSUB S0, S1, S0
	0x03BA86F4 FMUL S1, S2, S11

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, -51105792
	004 Move V1, [X8+260]
	005 Move [X0+80], S0
	006 Move X19, X0
	007 Multiply S0, S0, S1
	008 Call 0x3EB2BD0
	009 Move [X19+84], S0
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 

Method: System.Boolean get_animateMenuHideAndRevel()

Disassembly:
	0x03BA8708 MOV X0, X19
	0x03BA870C BL 0x3BA89B0

ISIL:
	001 Move W0, [X0+136]
	002 Return X0

Method: System.Void set_animateMenuHideAndRevel(System.Boolean value)

Disassembly:
	0x03BA8710 ADD X0, X31, 0x28
	0x03BA8714 ADD X1, X31, 0x8
	0x03BA8718 ADD X2, X31, 0x18

ISIL:
	001 And W8, W1, 1
	002 Move [X0+136], W8
	003 Return 

Method: System.Single get_revealHideAnimationDuration()

Disassembly:
	0x03BA871C MOV X3, X31
	0x03BA8720 STP S0, S1, [X31 + 0x8]

ISIL:
	001 Move V0, [X0+140]
	002 Return V0

Method: System.Void set_revealHideAnimationDuration(System.Single value)

Disassembly:
	0x03BA8724 STR S2, [X31 + 0x10]
	0x03BA8728 BL 0x3B86B94

ISIL:
	001 Move [X0+140], S0
	002 Return 

Method: System.Void Awake()

Disassembly:
	0x03BA872C LDR X21, [X19 + 0x58]
	0x03BA8730 MOV V0.16B, V8.16B
	0x03BA8734 MOV V1.16B, V9.16B
	0x03BA8738 MOV V2.16B, V10.16B
	0x03BA873C MOV X0, X31
	0x03BA8740 BL 0x3887BE4
	0x03BA8744 CBZ X21, 0x3BA883C
	0x03BA8748 ADRP X8, 0x5B4000
	0x03BA874C LDR X8, [X8 + 0x5D8]
	0x03BA8750 MOV X0, X21
	0x03BA8754 LDR X1, [X8]
	0x03BA8758 BL 0x270D5B0
	0x03BA875C LDR X0, [X19 + 0x60]
	0x03BA8760 CBZ X0, 0x3BA883C
	0x03BA8764 ADRP X8, 0x5B4000
	0x03BA8768 LDP S2, S3, [X31 + 0x20]
	0x03BA876C LDP S0, S1, [X31 + 0x18]
	0x03BA8770 LDR X8, [X8 + 0x588]
	0x03BA8774 LDR X1, [X8]
	0x03BA8778 BL 0x270C34C
	0x03BA877C LDRB W8, [X19 + 0x80]
	0x03BA8780 CBZ W8, 0x3BA87C4
	0x03BA8784 LDR X0, [X19 + 0x58]
	0x03BA8788 CBZ X0, 0x3BA883C
	0x03BA878C ADRP X8, 0x5B4000
	0x03BA8790 LDR X8, [X8 + 0x5E8]
	0x03BA8794 FMOV S0, 1
	0x03BA8798 LDR X1, [X8]
	0x03BA879C BL 0x270D608
	0x03BA87A0 CBZ X20, 0x3BA883C
	0x03BA87A4 LDRB W8, [X20 + 0x6C]
	0x03BA87A8 LDR X19, [X19 + 0x60]
	0x03BA87AC CBNZ W8, 0x3BA87F4
	0x03BA87B0 CBZ X19, 0x3BA883C
	0x03BA87B4 ADRP X8, 0x5B4000
	0x03BA87B8 LDR X8, [X8 + 0x598]
	0x03BA87BC FMOV S0, 1
	0x03BA87C0 B 0x3BA8810
	0x03BA87C4 CBZ X20, 0x3BA883C
	0x03BA87C8 LDRB W8, [X20 + 0x6C]
	0x03BA87CC CBZ W8, 0x3BA8784
	0x03BA87D0 LDR X21, [X19 + 0x58]
	0x03BA87D4 MOV X0, X31
	0x03BA87D8 BL 0x3C3C714
	0x03BA87DC CBZ X21, 0x3BA883C
	0x03BA87E0 LDP S1, S2, [X20 + 0x70]
	0x03BA87E4 MOV X0, X21
	0x03BA87E8 MOV X1, X31
	0x03BA87EC BL 0x3B92400
	0x03BA87F0 LDR X19, [X19 + 0x60]
	0x03BA87F4 MOV X0, X31
	0x03BA87F8 BL 0x3C3C714
	0x03BA87FC CBZ X19, 0x3BA883C
	0x03BA8800 ADRP X8, 0x5B4000
	0x03BA8804 LDR V1, [X20 + 0x70]
	0x03BA8808 LDR X8, [X8 + 0x598]
	0x03BA880C FMUL S0, S0, S1
	0x03BA8810 LDR X1, [X8]
	0x03BA8814 MOV X0, X19
	0x03BA8818 BL 0x270C418
	0x03BA881C LDP X20, X19, [X31 + 0xB0]
	0x03BA8820 LDP X22, X21, [X31 + 0xA0]
	0x03BA8824 LDP X30, X23, [X31 + 0x90]
	0x03BA8828 LDP D9, D8, [X31 + 0x80]
	0x03BA882C LDP D11, D10, [X31 + 0x70]
	0x03BA8830 LDP D13, D12, [X31 + 0x60]
	0x03BA8834 ADD X31, X31, 0xC0
	0x03BA8838 RET
	0x03BA883C BL 0x1C16F20
	0x03BA8840 STP X30, X25, [X31 - 0x40]!
	0x03BA8844 STP X24, X23, [X31 + 0x10]
	0x03BA8848 STP X22, X21, [X31 + 0x20]
	0x03BA884C STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x83B000
	006 Move W8, [X20+3205]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x54C000
	013 Move X0, [X0+2648]
	014 Call 0x1C17CF4
	015 Move X0, 0x5B5000
	016 Move X0, [X0+3336]
	017 Call 0x1C17CF4
	018 Move X0, 0x5B5000
	019 Move X0, [X0+3344]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3205], W8
	023 Move X0, [X19+88]
	024 Compare X0, 0
	025 JumpIfEqual {89}
	026 Move V0, [X19+64]
	027 Move X1, X31
	028 Move [X0+168], S0
	029 Move V0, [X19+68]
	030 Call SmartFollowVector3TweenableVariable.set_maxDistanceAllowed, X0, V0
	031 Move X8, [X19+88]
	032 Compare X8, 0
	033 JumpIfEqual {89}
	034 Move V0, [X19+72]
	035 Move X21, 0x54C000
	036 Move X21, [X21+2648]
	037 Move X20, 0x5B5000
	038 Move [X8+176], S0
	039 Move X0, [X21]
	040 Move X20, [X20+3336]
	041 Call 0x1C17F10
	042 Move X1, [X20]
	043 Move X2, X31
	044 Move X20, X0
	045 Call GameObject..ctor, X0, X1
	046 Compare X20, 0
	047 JumpIfEqual {89}
	048 Move X0, X20
	049 Move X1, X31
	050 Call GameObject.get_transform, X0
	051 Move [X19+176], X0
	052 Compare X0, 0
	053 JumpIfEqual {89}
	054 Move X1, X31
	055 Call Component.get_transform, X0
	056 Compare X0, 0
	057 JumpIfEqual {89}
	058 Move X1, [X19+56]
	059 Move X20, 0x5B5000
	060 Move X20, [X20+3344]
	061 Move X2, X31
	062 Call Transform.SetParent, X0, X1
	063 Move X0, [X21]
	064 Call 0x1C17F10
	065 Move X1, [X20]
	066 Move X2, X31
	067 Move X20, X0
	068 Call GameObject..ctor, X0, X1
	069 Compare X20, 0
	070 JumpIfEqual {89}
	071 Move X0, X20
	072 Move X1, X31
	073 Call GameObject.get_transform, X0
	074 Move [X19+168], X0
	075 Compare X0, 0
	076 JumpIfEqual {89}
	077 Move X1, X31
	078 Call Component.get_transform, X0
	079 Compare X0, 0
	080 JumpIfEqual {89}
	081 Move X1, [X19+48]
	082 Move X20, [X31+16]
	083 Move X19, [X31+24]
	084 Move X2, X31
	085 Move X30, [X31+32]
	086 Move X21, [X31+40]
	087 Call Transform.SetParent, X0, X1
	088 Return 
	089 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x03BA8850 MOV W23, W1
	0x03BA8854 MOV X1, X4
	0x03BA8858 MOV X19, X6
	0x03BA885C MOV X22, X5
	0x03BA8860 MOV X25, X4
	0x03BA8864 MOV X20, X3
	0x03BA8868 MOV X24, X2
	0x03BA886C MOV X21, X0
	0x03BA8870 STR X31, [X5]
	0x03BA8874 STR X31, [X6]
	0x03BA8878 STR W31, [X3]
	0x03BA887C BL 0x3BA8A2C
	0x03BA8880 MOV W8, W0
	0x03BA8884 MOV W0, W31
	0x03BA8888 CBZ W23, 0x3BA899C
	0x03BA888C TBZ X8, 0x0, 0x3BA899C
	0x03BA8890 LDR X1, [X25]
	0x03BA8894 LDR X2, [X21 + 0x30]
	0x03BA8898 MOV X0, X21
	0x03BA889C MOV W3, W31
	0x03BA88A0 MOV X4, X24
	0x03BA88A4 BL 0x3BA8B0C
	0x03BA88A8 LDR X1, [X25]
	0x03BA88AC LDR X2, [X21 + 0x38]
	0x03BA88B0 MOV W25, W0
	0x03BA88B4 MOVZ W3, 0x1
	0x03BA88B8 MOV X0, X21
	0x03BA88BC MOV X4, X24
	0x03BA88C0 BL 0x3BA8B0C
	0x03BA88C4 MOV W8, W0
	0x03BA88C8 TBNZ X25, 0x0, 0x3BA88D4
	0x03BA88CC MOV W0, W31
	0x03BA88D0 TBZ X8, 0x0, 0x3BA899C
	0x03BA88D4 CMP W23, 0x1
	0x03BA88D8 B.EQ 0x3BA8918
	0x03BA88DC CMP W23, 0x2
	0x03BA88E0 B.EQ 0x3BA8920
	0x03BA88E4 CMP W23, 0x3
	0x03BA88E8 B.NE 0x3BA8934
	0x03BA88EC AND W8, W25, W8, 0x0
	0x03BA88F0 TBZ X8, 0x0, 0x3BA893C
	0x03BA88F4 LDR W8, [X21 + 0x84]
	0x03BA88F8 CMP W8, 0x2
	0x03BA88FC MOVZ W8, 0x1
	0x03BA8900 CINC W8, W8, EQ
	0x03BA8904 B.NE 0x3BA8980
	0x03BA8908 LDR X9, [X21 + 0x38]
	0x03BA890C STR X9, [X22]
	0x03BA8910 ADD X9, X21, 0xB0
	0x03BA8914 B 0x3BA898C
	0x03BA8918 TBZ X25, 0x0, 0x3BA8924
	0x03BA891C B 0x3BA8940
	0x03BA8920 TBNZ X8, 0x0, 0x3BA8960
	0x03BA8924 MOV W0, W31
	0x03BA8928 STR X31, [X22]
	0x03BA892C STR X31, [X19]
	0x03BA8930 B 0x3BA899C
	0x03BA8934 MOV W0, W31
	0x03BA8938 B 0x3BA899C
	0x03BA893C TBZ X25, 0x0, 0x3BA8960
	0x03BA8940 LDR X8, [X21 + 0x30]
	0x03BA8944 MOVZ W0, 0x1
	0x03BA8948 STR X8, [X22]
	0x03BA894C LDR X8, [X21 + 0xA8]
	0x03BA8950 STR X8, [X19]
	0x03BA8954 STR W0, [X21 + 0x84]
	0x03BA8958 STR W0, [X20]
	0x03BA895C B 0x3BA899C
	0x03BA8960 LDR X8, [X21 + 0x38]
	0x03BA8964 MOVZ W9, 0x2
	0x03BA8968 STR X8, [X22]
	0x03BA896C LDR X8, [X21 + 0xB0]
	0x03BA8970 STR X8, [X19]
	0x03BA8974 STR W9, [X21 + 0x84]
	0x03BA8978 STR W9, [X20]
	0x03BA897C B 0x3BA8998
	0x03BA8980 LDR X9, [X21 + 0x30]
	0x03BA8984 STR X9, [X22]
	0x03BA8988 ADD X9, X21, 0xA8
	0x03BA898C LDR X9, [X9]
	0x03BA8990 STR X9, [X19]
	0x03BA8994 STR W8, [X20]
	0x03BA8998 MOVZ W0, 0x1
	0x03BA899C LDP X20, X19, [X31 + 0x30]
	0x03BA89A0 LDP X22, X21, [X31 + 0x20]
	0x03BA89A4 LDP X24, X23, [X31 + 0x10]
	0x03BA89A8 LDP X30, X25, [X31], #0x40
	0x03BA89AC RET
	0x03BA89B0 STP X30, X19, [X31 - 0x10]!
	0x03BA89B4 LDR W8, [X0 + 0x2C]
	0x03BA89B8 CMP W8, 0x2
	0x03BA89BC B.EQ 0x3BA8A00
	0x03BA89C0 CBNZ W8, 0x3BA8A0C
	0x03BA89C4 ADRP X19, 0x830000
	0x03BA89C8 LDRB W8, [X19 + 0x786]
	0x03BA89CC CBNZ W8, 0x3BA89E4
	0x03BA89D0 ADRP X0, 0x54B000
	0x03BA89D4 LDR X0, [X0 + 0x5A0]
	0x03BA89D8 BL 0x1C16CF4
	0x03BA89DC MOVZ W8, 0x1
	0x03BA89E0 STRB W8, [X19 + 0x786]
	0x03BA89E4 ADRP X8, 0x54B000
	0x03BA89E8 LDR X8, [X8 + 0x5A0]
	0x03BA89EC LDR X8, [X8]
	0x03BA89F0 LDR X8, [X8 + 0xB8]
	0x03BA89F4 LDP S0, S1, [X8 + 0x18]
	0x03BA89F8 LDR V2, [X8 + 0x20]
	0x03BA89FC B 0x3BA8A20
	0x03BA8A00 CBZ X1, 0x3BA8A28
	0x03BA8A04 MOV X0, X1
	0x03BA8A08 B 0x3BA8A18
	0x03BA8A0C MOV X1, X31
	0x03BA8A10 BL 0x3C32E90
	0x03BA8A14 CBZ X0, 0x3BA8A28
	0x03BA8A18 MOV X1, X31
	0x03BA8A1C BL 0x3C3F988
	0x03BA8A20 LDP X30, X19, [X31], #0x10
	0x03BA8A24 RET
	0x03BA8A28 BL 0x1C16F20
	0x03BA8A2C STR X30, [X31 - 0x30]!
	0x03BA8A30 STP X22, X21, [X31 + 0x10]
	0x03BA8A34 STP X20, X19, [X31 + 0x20]
	0x03BA8A38 ADRP X21, 0x83A000
	0x03BA8A3C ADRP X22, 0x54B000
	0x03BA8A40 LDRB W8, [X21 + 0xC8C]
	0x03BA8A44 LDR X22, [X22 + 0x598]
	0x03BA8A48 MOV X19, X1
	0x03BA8A4C MOV X20, X0
	0x03BA8A50 TBNZ X8, 0x0, 0x3BA8A68
	0x03BA8A54 ADRP X0, 0x54B000
	0x03BA8A58 LDR X0, [X0 + 0x598]
	0x03BA8A5C BL 0x1C16CF4
	0x03BA8A60 MOVZ W8, 0x1
	0x03BA8A64 STRB W8, [X21 + 0xC8C]
	0x03BA8A68 LDR X0, [X22]
	0x03BA8A6C LDR X21, [X20 + 0x78]
	0x03BA8A70 LDR W8, [X0 + 0xE0]
	0x03BA8A74 CBNZ W8, 0x3BA8A7C
	0x03BA8A78 BL 0x1C16DFC
	0x03BA8A7C MOV X0, X21
	0x03BA8A80 MOV X1, X31
	0x03BA8A84 MOV X2, X31
	0x03BA8A88 BL 0x3C3883C
	0x03BA8A8C TBZ X0, 0x0, 0x3BA8AD0
	0x03BA8A90 MOV X0, X31
	0x03BA8A94 BL 0x3C047F8
	0x03BA8A98 LDR X8, [X22]
	0x03BA8A9C MOV X21, X0
	0x03BA8AA0 LDR W9, [X8 + 0xE0]
	0x03BA8AA4 CBNZ W9, 0x3BA8AB0
	0x03BA8AA8 MOV X0, X8
	0x03BA8AAC BL 0x1C16DFC
	0x03BA8AB0 MOV X0, X21
	0x03BA8AB4 MOV X1, X31
	0x03BA8AB8 MOV X2, X31
	0x03BA8ABC BL 0x3C3883C
	0x03BA8AC0 TBZ X0, 0x0, 0x3BA8AD8
	0x03BA8AC4 MOV X0, X31
	0x03BA8AC8 MOV W8, W31
	0x03BA8ACC B 0x3BA8AF0
	0x03BA8AD0 LDR X0, [X20 + 0x78]
	0x03BA8AD4 B 0x3BA8AEC
	0x03BA8AD8 CBZ X21, 0x3BA8B08
	0x03BA8ADC MOV X0, X21
	0x03BA8AE0 MOV X1, X31
	0x03BA8AE4 BL 0x3C32E90
	0x03BA8AE8 STR X0, [X20 + 0x78]
	0x03BA8AEC MOVZ W8, 0x1
	0x03BA8AF0 STR X0, [X19]
	0x03BA8AF4 LDP X20, X19, [X31 + 0x20]
	0x03BA8AF8 LDP X22, X21, [X31 + 0x10]
	0x03BA8AFC MOV W0, W8
	0x03BA8B00 LDR X30, [X31], #0x30
	0x03BA8B04 RET
	0x03BA8B08 BL 0x1C16F20
	0x03BA8B0C STP D13, D12, [X31 - 0x50]!
	0x03BA8B10 STP D11, D10, [X31 + 0x10]
	0x03BA8B14 STP D9, D8, [X31 + 0x20]
	0x03BA8B18 STP X30, X21, [X31 + 0x30]
	0x03BA8B1C STP X20, X19, [X31 + 0x40]
	0x03BA8B20 LDR X8, [X4]
	0x03BA8B24 CBZ X8, 0x3BA8BBC
	0x03BA8B28 AND W9, W3, 0x1
	0x03BA8B2C MOV X20, X1
	0x03BA8B30 MOV X21, X0
	0x03BA8B34 MOV X0, X8
	0x03BA8B38 MOV X1, X2
	0x03BA8B3C MOV W2, W9
	0x03BA8B40 MOV X19, X4
	0x03BA8B44 BL 0x3BA72D0
	0x03BA8B48 MOV X0, X21
	0x03BA8B4C MOV X1, X20
	0x03BA8B50 MOV V9.16B, V0.16B
	0x03BA8B54 MOV V10.16B, V1.16B
	0x03BA8B58 MOV V8.16B, V2.16B
	0x03BA8B5C BL 0x3BA89B0
	0x03BA8B60 LDR X8, [X19]
	0x03BA8B64 CBZ X8, 0x3BA8C18
	0x03BA8B68 LDRB W9, [X8 + 0x45]
	0x03BA8B6C MOV V12.16B, V0.16B
	0x03BA8B70 MOV V13.16B, V1.16B
	0x03BA8B74 MOV V11.16B, V2.16B
	0x03BA8B78 CBZ W9, 0x3BA8BC4
	0x03BA8B7C CBZ X20, 0x3BA8C18
	0x03BA8B80 MOV X0, X20
	0x03BA8B84 MOV X1, X31
	0x03BA8B88 BL 0x3C3FA04
	0x03BA8B8C LDR X8, [X19]
	0x03BA8B90 CBZ X8, 0x3BA8C18
	0x03BA8B94 FNEG S1, S1
	0x03BA8B98 LDR V3, [X8 + 0x4C]
	0x03BA8B9C FMUL S0, S9, S0
	0x03BA8BA0 FMUL S1, S10, S1
	0x03BA8BA4 FSUB S0, S1, S0
	0x03BA8BA8 FMUL S1, S8, S2
	0x03BA8BAC FSUB S0, S0, S1
	0x03BA8BB0 FCMP S0, S3
	0x03BA8BB4 CSET W9, GT
	0x03BA8BB8 B 0x3BA8BC8
	0x03BA8BBC MOV W0, W31
	0x03BA8BC0 B 0x3BA8C00
	0x03BA8BC4 MOVZ W9, 0x1
	0x03BA8BC8 LDRB W10, [X8 + 0x50]
	0x03BA8BCC CBZ W10, 0x3BA8BF4
	0x03BA8BD0 LDR V2, [X8 + 0x58]
	0x03BA8BD4 FMUL S0, S9, S12
	0x03BA8BD8 FMUL S1, S10, S13
	0x03BA8BDC FADD S0, S0, S1
	0x03BA8BE0 FMUL S1, S8, S11
	0x03BA8BE4 FADD S0, S1, S0
	0x03BA8BE8 FCMP S0, S2
	0x03BA8BEC CSET W8, GT
	0x03BA8BF0 B 0x3BA8BF8
	0x03BA8BF4 MOVZ W8, 0x1
	0x03BA8BF8 ANDS W31, W8, W9, 0x0
	0x03BA8BFC CSET W0, NE
	0x03BA8C00 LDP X20, X19, [X31 + 0x40]
	0x03BA8C04 LDP X30, X21, [X31 + 0x30]
	0x03BA8C08 LDP D9, D8, [X31 + 0x20]
	0x03BA8C0C LDP D11, D10, [X31 + 0x10]
	0x03BA8C10 LDP D13, D12, [X31], #0x50
	0x03BA8C14 RET
	0x03BA8C18 BL 0x1C16F20
	0x03BA8C1C CMP W1, 0x2
	0x03BA8C20 B.EQ 0x3BA8C3C
	0x03BA8C24 CMP W1, 0x1
	0x03BA8C28 B.NE 0x3BA8C4C
	0x03BA8C2C LDR X8, [X0 + 0x30]
	0x03BA8C30 STR X8, [X2]
	0x03BA8C34 LDR X8, [X0 + 0xA8]
	0x03BA8C38 B 0x3BA8C54
	0x03BA8C3C LDR X8, [X0 + 0x38]
	0x03BA8C40 STR X8, [X2]
	0x03BA8C44 LDR X8, [X0 + 0xB0]
	0x03BA8C48 B 0x3BA8C54
	0x03BA8C4C MOV X8, X31
	0x03BA8C50 STR X31, [X2]
	0x03BA8C54 STR X8, [X3]
	0x03BA8C58 RET
	0x03BA8C5C STR X30, [X31 - 0x50]!
	0x03BA8C60 STP X26, X25, [X31 + 0x10]
	0x03BA8C64 STP X24, X23, [X31 + 0x20]
	0x03BA8C68 STP X22, X21, [X31 + 0x30]
	0x03BA8C6C STP X20, X19, [X31 + 0x40]
	0x03BA8C70 ADRP X23, 0x83A000
	0x03BA8C74 ADRP X20, 0x5B4000
	0x03BA8C78 ADRP X26, 0x5B4000
	0x03BA8C7C ADRP X22, 0x5B4000
	0x03BA8C80 ADRP X21, 0x5B2000
	0x03BA8C84 LDRB W8, [X23 + 0xC8D]
	0x03BA8C88 LDR X20, [X20 + 0x840]
	0x03BA8C8C LDR X26, [X26 + 0xDC0]
	0x03BA8C90 LDR X22, [X22 + 0xDC8]
	0x03BA8C94 LDR X21, [X21 + 0xA88]
	0x03BA8C98 MOV X19, X0
	0x03BA8C9C TBNZ X8, 0x0, 0x3BA8CF0
	0x03BA8CA0 ADRP X0, 0x5B4000
	0x03BA8CA4 LDR X0, [X0 + 0xDD0]
	0x03BA8CA8 BL 0x1C16CF4
	0x03BA8CAC ADRP X0, 0x5B4000
	0x03BA8CB0 LDR X0, [X0 + 0xDD8]
	0x03BA8CB4 BL 0x1C16CF4
	0x03BA8CB8 ADRP X0, 0x5B2000
	0x03BA8CBC LDR X0, [X0 + 0xA88]
	0x03BA8CC0 BL 0x1C16CF4
	0x03BA8CC4 ADRP X0, 0x5B4000
	0x03BA8CC8 LDR X0, [X0 + 0xDC0]
	0x03BA8CCC BL 0x1C16CF4
	0x03BA8CD0 ADRP X0, 0x5B4000
	0x03BA8CD4 LDR X0, [X0 + 0x840]
	0x03BA8CD8 BL 0x1C16CF4
	0x03BA8CDC ADRP X0, 0x5B4000
	0x03BA8CE0 LDR X0, [X0 + 0xDC8]
	0x03BA8CE4 BL 0x1C16CF4
	0x03BA8CE8 MOVZ W8, 0x1
	0x03BA8CEC STRB W8, [X23 + 0xC8D]
	0x03BA8CF0 ADRP X8, 0xFFFFFFFFFCF45000
	0x03BA8CF4 ADRP X9, 0xFFFFFFFFFCF46000
	0x03BA8CF8 LDR V0, [X8 + 0x798]
	0x03BA8CFC LDR V1, [X9 + 0x4E0]
	0x03BA8D00 MOVZ W10, 0x3F800000
	0x03BA8D04 MOVZ W25, 0x1
	0x03BA8D08 MOVZ W11, 0x420C0000
	0x03BA8D0C STR W10, [X19 + 0x48]
	0x03BA8D10 STRB W25, [X19 + 0x4C]
	0x03BA8D14 STR D0, [X19 + 0x28]
	0x03BA8D18 STR D1, [X19 + 0x40]
	0x03BA8D1C STR W11, [X19 + 0x50]
	0x03BA8D20 LDR X0, [X20]
	0x03BA8D24 ADRP X24, 0x5B4000
	0x03BA8D28 ADRP X23, 0x5B4000
	0x03BA8D2C LDR X24, [X24 + 0xDD8]
	0x03BA8D30 LDR X23, [X23 + 0xDD0]
	0x03BA8D34 BL 0x1C16F10
	0x03BA8D38 ADRP X8, 0xFFFFFFFFFCF42000
	0x03BA8D3C ADRP X9, 0xFFFFFFFFFCF42000
	0x03BA8D40 LDR V0, [X8 + 0x330]
	0x03BA8D44 LDR V1, [X9 + 0x44C]
	0x03BA8D48 FMOV S2, 3
	0x03BA8D4C MOV X1, X31
	0x03BA8D50 MOV X20, X0
	0x03BA8D54 BL 0x3B92138
	0x03BA8D58 STR X20, [X19 + 0x58]
	0x03BA8D5C LDR X0, [X26]
	0x03BA8D60 BL 0x1C16F10
	0x03BA8D64 MOV X1, X31
	0x03BA8D68 MOV X20, X0
	0x03BA8D6C BL 0x3B917C4
	0x03BA8D70 STR X20, [X19 + 0x60]
	0x03BA8D74 LDR X0, [X22]
	0x03BA8D78 BL 0x1C16F10
	0x03BA8D7C MOV X1, X31
	0x03BA8D80 MOV X20, X0
	0x03BA8D84 BL 0x3B92174
	0x03BA8D88 STR X20, [X19 + 0x68]
	0x03BA8D8C LDR X0, [X21]
	0x03BA8D90 BL 0x1C16F10
	0x03BA8D94 MOV X1, X31
	0x03BA8D98 MOV X20, X0
	0x03BA8D9C BL 0x3B31C38
	0x03BA8DA0 MOVZ W8, 0x999A
	0x03BA8DA4 MOVK W8, 0x3E190000
	0x03BA8DA8 STR X20, [X19 + 0x70]
	0x03BA8DAC STRB W25, [X19 + 0x80]
	0x03BA8DB0 STR W25, [X19 + 0x84]
	0x03BA8DB4 STRB W25, [X19 + 0x88]
	0x03BA8DB8 STR W8, [X19 + 0x8C]
	0x03BA8DBC ADRP X20, 0x830000
	0x03BA8DC0 LDRB W8, [X20 + 0x85B]
	0x03BA8DC4 CBNZ W8, 0x3BA8DD8
	0x03BA8DC8 ADRP X0, 0x54B000
	0x03BA8DCC LDR X0, [X0 + 0x5A0]
	0x03BA8DD0 BL 0x1C16CF4
	0x03BA8DD4 STRB W25, [X20 + 0x85B]
	0x03BA8DD8 ADRP X8, 0x54B000
	0x03BA8DDC LDR X8, [X8 + 0x5A0]
	0x03BA8DE0 LDR X8, [X8]
	0x03BA8DE4 LDR X8, [X8 + 0xB8]
	0x03BA8DE8 LDUR V0, [X8 + 0xC]
	0x03BA8DEC LDR V1, [X8 + 0x14]
	0x03BA8DF0 STR D0, [X19 + 0xE0]
	0x03BA8DF4 STR S1, [X19 + 0xE8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x83B000
	010 Move X21, 0x54C000
	011 Move W8, [X20+3206]
	012 Move X21, [X21+1432]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {86}
	018 Move X0, 0x54C000
	019 Move X0, [X0+3368]
	020 Call 0x1C17CF4
	021 Move X0, 0x5B5000
	022 Move X0, [X0+2128]
	023 Call 0x1C17CF4
	024 Move X0, 0x5B5000
	025 Move X0, [X0+3352]
	026 Call 0x1C17CF4
	027 Move X0, 0x5B5000
	028 Move X0, [X0+2136]
	029 Call 0x1C17CF4
	030 Move X0, 0x5B5000
	031 Move X0, [X0+3360]
	032 Call 0x1C17CF4
	033 Move X0, 0x5B5000
	034 Move X0, [X0+3368]
	035 Call 0x1C17CF4
	036 Move X0, 0x5B5000
	037 Move X0, [X0+3376]
	038 Call 0x1C17CF4
	039 Move X0, 0x5B5000
	040 Move X0, [X0+3384]
	041 Call 0x1C17CF4
	042 Move X0, 0x5B5000
	043 Move X0, [X0+3392]
	044 Call 0x1C17CF4
	045 Move X0, 0x54C000
	046 Move X0, [X0+2600]
	047 Call 0x1C17CF4
	048 Move X0, 0x5B5000
	049 Move X0, [X0+3400]
	050 Call 0x1C17CF4
	051 Move X0, 0x5B5000
	052 Move X0, [X0+3408]
	053 Call 0x1C17CF4
	054 Move X0, 0x5B5000
	055 Move X0, [X0+3416]
	056 Call 0x1C17CF4
	057 Move X0, 0x5B5000
	058 Move X0, [X0+3424]
	059 Call 0x1C17CF4
	060 Move X0, 0x5B5000
	061 Move X0, [X0+3432]
	062 Call 0x1C17CF4
	063 Move X0, 0x5B5000
	064 Move X0, [X0+3440]
	065 Call 0x1C17CF4
	066 Move X0, 0x54C000
	067 Move X0, [X0+1432]
	068 Call 0x1C17CF4
	069 Move X0, 0x5B5000
	070 Move X0, [X0+3448]
	071 Call 0x1C17CF4
	072 Move X0, 0x5B5000
	073 Move X0, [X0+3456]
	074 Call 0x1C17CF4
	075 Move X0, 0x5B5000
	076 Move X0, [X0+3464]
	077 Call 0x1C17CF4
	078 Move X0, 0x5B5000
	079 Move X0, [X0+3472]
	080 Call 0x1C17CF4
	081 Move X0, 0x5B5000
	082 Move X0, [X0+3480]
	083 Call 0x1C17CF4
	084 Move W8, 1
	085 Move [X20+3206], W8
	086 Move X0, [X21]
	087 Move X20, [X19+48]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move X22, 0x54C000
	093 Move X22, [X22+2600]
	094 Move X0, X20
	095 Move X1, X31
	096 Move X2, X31
	097 Call Object.op_Equality, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfEqual {116}
	102 Move X0, [X21]
	103 Move X20, [X19+56]
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {108}
	107 Call 0x1C17DFC
	108 Move X0, X20
	109 Move X1, X31
	110 Move X2, X31
	111 Call Object.op_Equality, X0, X1
	112 Move TEMP, X0
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfNotEqual {146}
	116 Move X8, 0x5B5000
	117 Move X8, [X8+3480]
	118 Move X0, [X8]
	119 Move X1, X19
	120 Move X2, X31
	121 Call String.Format, X0, X1
	122 Move X8, [X22]
	123 Move X20, X0
	124 Move W9, [X8+224]
	125 Compare W9, 0
	126 JumpIfNotEqual {129}
	127 Move X0, X8
	128 Call 0x1C17DFC
	129 Move X0, X20
	130 Move X1, X19
	131 Move X2, X31
	132 Call Debug.LogError, X0, X1
	133 Move X0, X19
	134 Move X20, [X31+48]
	135 Move X19, [X31+56]
	136 Move X22, [X31+32]
	137 Move X21, [X31+40]
	138 Move X24, [X31+16]
	139 Move X23, [X31+24]
	140 Move W1, W31
	141 Move X2, X31
	142 Move X30, [X31+64]
	143 Move X25, [X31+72]
	144 Call Behaviour.set_enabled, X0, X1
	145 Return 
	146 Move X0, [X21]
	147 Move X20, [X19+32]
	148 Move W8, [X0+224]
	149 Compare W8, 0
	150 JumpIfNotEqual {152}
	151 Call 0x1C17DFC
	152 Move X0, X20
	153 Move X1, X31
	154 Move X2, X31
	155 Call Object.op_Equality, X0, X1
	156 Move TEMP, X0
	157 And TEMP, TEMP, 1
	158 Compare TEMP, 1
	159 JumpIfNotEqual {162}
	160 Move X8, 0x5B5000
	161 Move X8, [X8+3464]
	162 Move X8, [X19+152]
	163 Compare X8, 0
	164 JumpIfEqual {355}
	165 Move X8, [X19+144]
	166 Compare X8, 0
	167 JumpIfEqual {355}
	168 Move X0, [X19+32]
	169 Compare X0, 0
	170 JumpIfEqual {416}
	171 Move X20, [X19+88]
	172 Move X1, X31
	173 Call GameObject.get_transform, X0
	174 Compare X0, 0
	175 JumpIfEqual {416}
	176 Move X1, X31
	177 Call Transform.get_position, X0
	178 Move X0, X31
	179 Call float3.op_Implicit, X0
	180 Compare X20, 0
	181 JumpIfEqual {416}
	182 Move X23, 0x5B5000
	183 Move X23, [X23+3448]
	184 Move X0, X20
	185 Move X1, [X23]
	186 Call TweenableVariableAsyncBase`1<float3>.set_Value, X0, X1
	187 Move X24, 0x5B5000
	188 Move X20, [X19+112]
	189 Move X21, [X19+88]
	190 Move X24, [X24+2128]
	191 Move X0, [X24]
	192 Call 0x1C17F10
	193 Move X8, 0x5B5000
	194 Move X8, [X8+3408]
	195 Move X1, X19
	196 Move X3, X31
	197 Move X22, X0
	198 Move X2, [X8]
	199 Call Action`1<float3>..ctor, X0, X1, X2
	200 Compare X21, 0
	201 JumpIfEqual {416}
	202 Move X25, 0x5B5000
	203 Move X25, [X25+3376]
	204 Move X0, X21
	205 Move X1, X22
	206 Move X2, [X25]
	207 Call BindableVariableBase`1<float3>.Subscribe, X0, X1
	208 Compare X20, 0
	209 JumpIfEqual {416}
	210 Move X1, X0
	211 Move X0, X20
	212 Move X2, X31
	213 Call BindingsGroup.AddBinding, X0, X1
	214 Move X0, [X19+32]
	215 Compare X0, 0
	216 JumpIfEqual {416}
	217 Move X20, [X19+96]
	218 Move X1, X31
	219 Call GameObject.get_transform, X0
	220 Compare X0, 0
	221 JumpIfEqual {416}
	222 Move X1, X31
	223 Call Transform.get_rotation, X0
	224 Compare X20, 0
	225 JumpIfEqual {416}
	226 Move X8, 0x5B5000
	227 Move X8, [X8+3384]
	228 Move X0, X20
	229 Move X1, [X8]
	230 Call BindableVariableBase`1<Quaternion>.set_Value, X0, X1
	231 Move X8, 0x5B5000
	232 Move X20, [X19+112]
	233 Move X21, [X19+96]
	234 Move X8, [X8+2136]
	235 Move X0, [X8]
	236 Call 0x1C17F10
	237 Move X8, 0x5B5000
	238 Move X8, [X8+3416]
	239 Move X1, X19
	240 Move X3, X31
	241 Move X22, X0
	242 Move X2, [X8]
	243 Call Action`1<Quaternion>..ctor, X0, X1, X2
	244 Compare X21, 0
	245 JumpIfEqual {416}
	246 Move X8, 0x5B5000
	247 Move X8, [X8+3368]
	248 Move X0, X21
	249 Move X1, X22
	250 Move X2, [X8]
	251 Call BindableVariableBase`1<Quaternion>.Subscribe, X0, X1
	252 Compare X20, 0
	253 JumpIfEqual {416}
	254 Move X1, X0
	255 Move X0, X20
	256 Move X2, X31
	257 Call BindingsGroup.AddBinding, X0, X1
	258 Move X0, [X19+32]
	259 Compare X0, 0
	260 JumpIfEqual {416}
	261 Move X1, X31
	262 Call GameObject.get_transform, X0
	263 Compare X0, 0
	264 JumpIfEqual {416}
	265 Move X1, X31
	266 Call Transform.get_localScale, X0
	267 Move X20, [X19+104]
	268 Move X0, X31
	269 Move [X19+224], S0
	270 Move [X19+232], S1
	271 Move [X19+232], S2
	272 Call float3.op_Implicit, X0
	273 Compare X20, 0
	274 JumpIfEqual {416}
	275 Move X1, [X23]
	276 Move X0, X20
	277 Call TweenableVariableAsyncBase`1<float3>.set_Value, X0, X1
	278 Move X0, [X24]
	279 Move X21, [X19+104]
	280 Move X20, [X19+112]
	281 Call 0x1C17F10
	282 Move X8, 0x5B5000
	283 Move X8, [X8+3424]
	284 Move X1, X19
	285 Move X3, X31
	286 Move X22, X0
	287 Move X2, [X8]
	288 Call Action`1<float3>..ctor, X0, X1, X2
	289 Compare X21, 0
	290 JumpIfEqual {416}
	291 Move X2, [X25]
	292 Move X0, X21
	293 Move X1, X22
	294 Call BindableVariableBase`1<float3>.Subscribe, X0, X1
	295 Compare X20, 0
	296 JumpIfEqual {416}
	297 Move X1, X0
	298 Move X0, X20
	299 Move X2, X31
	300 Call BindingsGroup.AddBinding, X0, X1
	301 Move X21, 0x5B5000
	302 Move X21, [X21+3456]
	303 Move X20, [X19+112]
	304 Move X0, [X21]
	305 Move W8, [X0+224]
	306 Compare W8, 0
	307 JumpIfNotEqual {309}
	308 Call 0x1C17DFC
	309 Move X22, 0x83B000
	310 Move W8, [X22+3255]
	311 Compare W8, 0
	312 JumpIfNotEqual {318}
	313 Move X0, 0x5B5000
	314 Move X0, [X0+3456]
	315 Call 0x1C17CF4
	316 Move W8, 1
	317 Move [X22+3255], W8
	318 Move X0, [X21]
	319 Move W8, [X0+224]
	320 Compare W8, 0
	321 JumpIfNotEqual {324}
	322 Call 0x1C17DFC
	323 Move X0, [X21]
	324 Move X9, 0x5B5000
	325 Move X8, [X0+184]
	326 Move X9, [X9+3352]
	327 Move X21, [X8]
	328 Move X0, [X9]
	329 Call 0x1C17F10
	330 Move X8, 0x5B5000
	331 Move X8, [X8+3400]
	332 Move X1, X19
	333 Move X3, X31
	334 Move X22, X0
	335 Move X2, [X8]
	336 Call Action`1<Int32Enum>..ctor, X0, X1, X2
	337 Compare X21, 0
	338 JumpIfEqual {416}
	339 Move X10, 0x5B5000
	340 Move X8, [X21]
	341 Move X10, [X10+3440]
	342 NotImplemented "Instruction LDRH not yet implemented."
	343 Move X1, [X10]
	344 Compare X9, 0
	345 JumpIfEqual {352}
	346 Move X10, [X8+176]
	347 Add X10, X10, 8
	348 NotImplemented "Instruction LDUR not yet implemented."
	349 NotImplemented "Instruction CMP not yet implemented."
	350 Subtract X9, X9, 1
	351 Add X10, X10, 16
	352 Move W2, 1
	353 Move X0, X21
	354 Call 0x1C5D788
	355 Move X8, 0x5B5000
	356 Move X8, [X8+3472]
	357 Move W9, [X10]
	358 Add W9, W9, 1
	359 Add X8, X8, W9
	360 Add X0, X8, 312
	361 Move X8, [X0]
	362 Move X2, [X0+8]
	363 Move X0, X21
	364 Move X1, X22
	365 NotImplemented "Instruction BLR not yet implemented."
	366 Compare X20, 0
	367 JumpIfEqual {416}
	368 Move X1, X0
	369 Move X0, X20
	370 Move X2, X31
	371 Call BindingsGroup.AddBinding, X0, X1
	372 Move X0, [X19+240]
	373 Compare X0, 0
	374 JumpIfEqual {416}
	375 Move X8, 0x5B5000
	376 Move X8, [X8+3392]
	377 Move W1, W31
	378 Move X2, [X8]
	379 Call BindableVariableBase`1<Boolean>.set_Value, X0, X1
	380 Move X8, 0x54C000
	381 Move X20, [X19+112]
	382 Move X21, [X19+240]
	383 Move X8, [X8+3368]
	384 Move X0, [X8]
	385 Call 0x1C17F10
	386 Move X8, 0x5B5000
	387 Move X8, [X8+3432]
	388 Move X1, X19
	389 Move X3, X31
	390 Move X22, X0
	391 Move X2, [X8]
	392 Call Action`1<Boolean>..ctor, X0, X1, X2
	393 Compare X21, 0
	394 JumpIfEqual {416}
	395 Move X8, 0x5B5000
	396 Move X8, [X8+3360]
	397 Move X0, X21
	398 Move X1, X22
	399 Move X2, [X8]
	400 Call BindableVariableBase`1<Boolean>.SubscribeAndUpdate, X0, X1
	401 Compare X20, 0
	402 JumpIfEqual {416}
	403 Move X1, X0
	404 Move X0, X20
	405 Move X20, [X31+48]
	406 Move X19, [X31+56]
	407 Move X22, [X31+32]
	408 Move X21, [X31+40]
	409 Move X24, [X31+16]
	410 Move X23, [X31+24]
	411 Move X2, X31
	412 Move X30, [X31+64]
	413 Move X25, [X31+72]
	414 Call BindingsGroup.AddBinding, X0, X1
	415 Return 
	416 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x03BA8DF8 LDR X0, [X24]
	0x03BA8DFC BL 0x1C16F10
	0x03BA8E00 LDR X5, [X23]
	0x03BA8E04 MOVZ W2, 0x1
	0x03BA8E08 MOV W1, W31
	0x03BA8E0C MOV X3, X31
	0x03BA8E10 MOV W4, W31
	0x03BA8E14 MOV X20, X0
	0x03BA8E18 BL 0x28E27B0
	0x03BA8E1C STR X20, [X19 + 0xF0]
	0x03BA8E20 MOV X0, X19
	0x03BA8E24 LDP X20, X19, [X31 + 0x40]
	0x03BA8E28 LDP X22, X21, [X31 + 0x30]
	0x03BA8E2C LDP X24, X23, [X31 + 0x20]
	0x03BA8E30 LDP X26, X25, [X31 + 0x10]
	0x03BA8E34 MOV X1, X31
	0x03BA8E38 LDR X30, [X31], #0x50
	0x03BA8E3C B 0x3C36C30
	0x03BA8E40 STR D10, [X31 - 0x30]!
	0x03BA8E44 STP D9, D8, [X31 + 0x10]
	0x03BA8E48 STP X30, X19, [X31 + 0x20]
	0x03BA8E4C LDR X0, [X0 + 0x20]
	0x03BA8E50 CBZ X0, 0x3BA8E9C
	0x03BA8E54 MOV X1, X31
	0x03BA8E58 MOV V8.16B, V2.16B
	0x03BA8E5C MOV V9.16B, V1.16B
	0x03BA8E60 MOV V10.16B, V0.16B
	0x03BA8E64 BL 0x3C356F8
	0x03BA8E68 MOV X19, X0
	0x03BA8E6C MOV V0.16B, V10.16B
	0x03BA8E70 MOV V1.16B, V9.16B
	0x03BA8E74 MOV V2.16B, V8.16B
	0x03BA8E78 MOV X0, X31
	0x03BA8E7C BL 0x3887BE0
	0x03BA8E80 CBZ X19, 0x3BA8E9C
	0x03BA8E84 MOV X0, X19
	0x03BA8E88 LDP X30, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, [X0+192]
	004 Move X19, X0
	005 Compare X1, 0
	006 JumpIfEqual {11}
	007 Move X0, X19
	008 Move X2, X31
	009 Call MonoBehaviour.StopCoroutine, X0, X1
	010 Move [X19+192], X31
	011 Move X1, [X19+184]
	012 Compare X1, 0
	013 JumpIfEqual {18}
	014 Move X0, X19
	015 Move X2, X31
	016 Call MonoBehaviour.StopCoroutine, X0, X1
	017 Move [X19+184], X31
	018 Move X0, [X19+112]
	019 Compare X0, 0
	020 JumpIfEqual {46}
	021 Move X1, X31
	022 Call BindingsGroup.Clear, X0
	023 Move X0, [X19+32]
	024 Compare X0, 0
	025 JumpIfEqual {46}
	026 Move X1, X31
	027 Call GameObject.get_transform, X0
	028 Compare X0, 0
	029 JumpIfEqual {46}
	030 Move S1, [X19+228]
	031 Move S2, [X19+232]
	032 Move V0, [X19+224]
	033 Move X1, X31
	034 Call Transform.set_localScale, X0, X1
	035 Move X0, [X19+32]
	036 Compare X0, 0
	037 JumpIfEqual {46}
	038 Move W1, 1
	039 Move X2, X31
	040 Call GameObject.SetActive, X0, X1
	041 Move [X19+192], X31
	042 Move [X19+128], W31
	043 Move X30, [X31+16]
	044 Move X19, [X31+24]
	045 Return 
	046 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x03BA8E98 B 0x3C3F62C
	0x03BA8E9C BL 0x1C16F20
	0x03BA8EA0 STP D11, D10, [X31 - 0x30]!
	0x03BA8EA4 STP D9, D8, [X31 + 0x10]
	0x03BA8EA8 STR X30, [X31 + 0x20]
	0x03BA8EAC LDR X0, [X0 + 0x20]
	0x03BA8EB0 CBZ X0, 0x3BA8EF4
	0x03BA8EB4 MOV X1, X31
	0x03BA8EB8 MOV V8.16B, V3.16B
	0x03BA8EBC MOV V9.16B, V2.16B
	0x03BA8EC0 MOV V10.16B, V1.16B
	0x03BA8EC4 MOV V11.16B, V0.16B
	0x03BA8EC8 BL 0x3C356F8
	0x03BA8ECC CBZ X0, 0x3BA8EF4
	0x03BA8ED0 MOV V2.16B, V9.16B
	0x03BA8ED4 MOV V3.16B, V8.16B
	0x03BA8ED8 LDR X30, [X31 + 0x20]
	0x03BA8EDC LDP D9, D8, [X31 + 0x10]
	0x03BA8EE0 MOV V0.16B, V11.16B
	0x03BA8EE4 MOV V1.16B, V10.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x83B000
	005 Move W8, [X20+3207]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x5B5000
	012 Move X0, [X0+2176]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3207], W8
	016 Move X0, [X19+88]
	017 Compare X0, 0
	018 JumpIfEqual {27}
	019 Move X8, 0x5B5000
	020 Move X8, [X8+2176]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X1, [X8]
	024 Move X30, [X31+32]
	025 Call TweenableVariableAsyncBase`1<float3>.Dispose, X0
	026 Return 
	027 Call 0x1C17F20

Method: System.Void OnValidate()

Disassembly:
	0x03BA8EE8 MOV X1, X31
	0x03BA8EEC LDP D11, D10, [X31], #0x30
	0x03BA8EF0 B 0x3C3F7AC
	0x03BA8EF4 BL 0x1C16F20
	0x03BA8EF8 STR D10, [X31 - 0x30]!
	0x03BA8EFC STP D9, D8, [X31 + 0x10]
	0x03BA8F00 STP X30, X19, [X31 + 0x20]
	0x03BA8F04 LDR X0, [X0 + 0x20]
	0x03BA8F08 CBZ X0, 0x3BA8F54
	0x03BA8F0C MOV X1, X31
	0x03BA8F10 MOV V8.16B, V2.16B
	0x03BA8F14 MOV V9.16B, V1.16B
	0x03BA8F18 MOV V10.16B, V0.16B
	0x03BA8F1C BL 0x3C356F8
	0x03BA8F20 MOV X19, X0
	0x03BA8F24 MOV V0.16B, V10.16B
	0x03BA8F28 MOV V1.16B, V9.16B
	0x03BA8F2C MOV V2.16B, V8.16B
	0x03BA8F30 MOV X0, X31
	0x03BA8F34 BL 0x3887BE0
	0x03BA8F38 CBZ X19, 0x3BA8F54
	0x03BA8F3C MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+88]
	005 Compare X0, 0
	006 JumpIfEqual {26}
	007 Move V0, [X19+64]
	008 Move X1, X31
	009 Move [X0+168], S0
	010 Move V0, [X19+68]
	011 Call SmartFollowVector3TweenableVariable.set_maxDistanceAllowed, X0, V0
	012 Move X8, [X19+88]
	013 Compare X8, 0
	014 JumpIfEqual {26}
	015 Move V0, [X19+72]
	016 Move X9, -51105792
	017 Move V1, [X9+260]
	018 Move [X8+176], S0
	019 Move V0, [X19+80]
	020 Multiply S0, S0, S1
	021 Call 0x3EB2BD0
	022 Move [X19+84], S0
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Return 
	026 Call 0x1C17F20

Method: System.Void OnInputModeChanged(UnityEngine.XR.Interaction.Toolkit.Inputs.XRInputModalityManager/InputMode newInputMode)

Disassembly:
	0x03BA8F40 LDP X30, X19, [X31 + 0x20]
	0x03BA8F44 LDP D9, D8, [X31 + 0x10]
	0x03BA8F48 MOV X1, X31
	0x03BA8F4C LDR V10, [X31], #0x30
	0x03BA8F50 B 0x3C3FC4C
	0x03BA8F54 BL 0x1C16F20
	0x03BA8F58 TBZ X1, 0x0, 0x3BA8F60
	0x03BA8F5C B 0x3BA7FCC
	0x03BA8F60 B 0x3BA8154
	0x03BA8F64 LDR X0, [X0 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move [X0+160], W1
	005 Call HandMenu.GetCurrentPreset, X0
	006 Compare X0, 0
	007 JumpIfEqual {14}
	008 Move X1, [X19+168]
	009 Move X2, [X19+176]
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Call FollowPreset.ApplyPreset, X0, X1, X2
	013 Return 
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return 

Method: UnityEngine.XR.Interaction.Toolkit.UI.BodyUI.FollowPreset GetCurrentPreset()

Disassembly:
	0x03BA8F68 RET
	0x03BA8F6C STR X1, [X0 + 0x10]
	0x03BA8F70 RET
	0x03BA8F74 MOV X1, X31
	0x03BA8F78 B 0x33BDD8C
	0x03BA8F7C MOV X1, X31
	0x03BA8F80 B 0x3C32454
	0x03BA8F84 MOVZ W0, 0x1
	0x03BA8F88 RET
	0x03BA8F8C SUB X31, X31, 0x30
	0x03BA8F90 STP X30, X21, [X31 + 0x10]
	0x03BA8F94 STP X20, X19, [X31 + 0x20]
	0x03BA8F98 ADRP X21, 0x83A000
	0x03BA8F9C ADRP X20, 0x5B4000
	0x03BA8FA0 LDRB W8, [X21 + 0xC8E]
	0x03BA8FA4 LDR X20, [X20 + 0xDE0]
	0x03BA8FA8 MOV X19, X0
	0x03BA8FAC TBNZ X8, 0x0, 0x3BA8FD0
	0x03BA8FB0 ADRP X0, 0x5B4000
	0x03BA8FB4 LDR X0, [X0 + 0xDE0]
	0x03BA8FB8 BL 0x1C16CF4
	0x03BA8FBC ADRP X0, 0x5B4000
	0x03BA8FC0 LDR X0, [X0 + 0xDE8]
	0x03BA8FC4 BL 0x1C16CF4
	0x03BA8FC8 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x83B000
	005 Move W8, [X20+3208]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x5B5000
	012 Move X0, [X0+3488]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3208], W8
	016 Move W8, [X19+160]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X0, [X19+152]
	019 Compare X0, 0
	020 JumpIfNotEqual {25}
	021 Call 0x1C17F20
	022 Move X0, [X19+144]
	023 Compare X0, 0
	024 JumpIfEqual {21}
	025 Move X8, 0x5B5000
	026 Move X8, [X8+3488]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X1, [X8]
	030 Move X30, [X31+32]
	031 Call DatumProperty`2<Object, Object>.get_Value, X0
	032 Return X0

Method: System.Void ShowMenu()

Disassembly:
	0x03BA8FCC STRB W8, [X21 + 0xC8E]
	0x03BA8FD0 LDR X2, [X20]
	0x03BA8FD4 ADD X1, X31, 0x8
	0x03BA8FD8 MOV X0, X19
	0x03BA8FDC STR X31, [X31 + 0x8]
	0x03BA8FE0 BL 0x21A4990
	0x03BA8FE4 TBZ X0, 0x0, 0x3BA9108
	0x03BA8FE8 LDR X8, [X31 + 0x8]
	0x03BA8FEC CBZ X8, 0x3BA9118
	0x03BA8FF0 LDR X0, [X8 + 0x248]
	0x03BA8FF4 CBZ X0, 0x3BA9118
	0x03BA8FF8 ADRP X20, 0x5B4000
	0x03BA8FFC LDR X20, [X20 + 0xDE8]
	0x03BA9000 MOV X1, X19
	0x03BA9004 LDR X2, [X20]
	0x03BA9008 BL 0x301C318
	0x03BA900C TBNZ X0, 0x0, 0x3BA9108
	0x03BA9010 LDR X8, [X31 + 0x8]
	0x03BA9014 CBZ X8, 0x3BA9118
	0x03BA9018 LDR X0, [X8 + 0x250]
	0x03BA901C CBZ X0, 0x3BA9118
	0x03BA9020 LDR X2, [X20]
	0x03BA9024 MOV X1, X19
	0x03BA9028 BL 0x301C318
	0x03BA902C TBNZ X0, 0x0, 0x3BA9108
	0x03BA9030 LDR X0, [X31 + 0x8]
	0x03BA9034 CBZ X0, 0x3BA9118
	0x03BA9038 MOV X1, X31
	0x03BA903C BL 0x3B3E9A0
	0x03BA9040 SUB W20, W0, 0x1
	0x03BA9044 LDR X0, [X31 + 0x8]
	0x03BA9048 CBZ X0, 0x3BA9118
	0x03BA904C TBNZ X20, 0x1F, 0x3BA906C
	0x03BA9050 MOV W1, W20
	0x03BA9054 MOV X2, X31
	0x03BA9058 BL 0x3B40730
	0x03BA905C CMP X0, X19
	0x03BA9060 SUB W20, W20, 0x1
	0x03BA9064 B.NE 0x3BA9044
	0x03BA9068 B 0x3BA9108
	0x03BA906C MOV X1, X31
	0x03BA9070 BL 0x3B3E9F0
	0x03BA9074 SUB W20, W0, 0x1
	0x03BA9078 TBNZ X20, 0x1F, 0x3BA90A0
	0x03BA907C LDR X0, [X31 + 0x8]
	0x03BA9080 CBZ X0, 0x3BA9118
	0x03BA9084 MOV W1, W20
	0x03BA9088 MOV X2, X31
	0x03BA908C BL 0x3B40750
	0x03BA9090 CMP X0, X19
	0x03BA9094 SUB W20, W20, 0x1
	0x03BA9098 B.NE 0x3BA9078
	0x03BA909C B 0x3BA9108
	0x03BA90A0 LDR X8, [X19]
	0x03BA90A4 MOV X0, X19
	0x03BA90A8 LDP X9, X1, [X8 + 0x1E8]
	0x03BA90AC BLR X9
	0x03BA90B0 CMP W0, 0x3
	0x03BA90B4 B.EQ 0x3BA90E0
	0x03BA90B8 CMP W0, 0x2
	0x03BA90BC B.EQ 0x3BA90F4
	0x03BA90C0 CMP W0, 0x1
	0x03BA90C4 B.NE 0x3BA9108
	0x03BA90C8 LDR X0, [X31 + 0x8]
	0x03BA90CC CBZ X0, 0x3BA9118
	0x03BA90D0 MOV X1, X19
	0x03BA90D4 MOV X2, X31
	0x03BA90D8 BL 0x3B3F260
	0x03BA90DC B 0x3BA9108
	0x03BA90E0 LDR X0, [X31 + 0x8]
	0x03BA90E4 CBZ X0, 0x3BA9118
	0x03BA90E8 MOV X1, X19
	0x03BA90EC MOV X2, X31
	0x03BA90F0 BL 0x3B3F260
	0x03BA90F4 LDR X0, [X31 + 0x8]
	0x03BA90F8 CBZ X0, 0x3BA9118
	0x03BA90FC MOV X1, X19
	0x03BA9100 MOV X2, X31
	0x03BA9104 BL 0x3B3F270
	0x03BA9108 LDP X20, X19, [X31 + 0x20]
	0x03BA910C LDP X30, X21, [X31 + 0x10]
	0x03BA9110 ADD X31, X31, 0x30
	0x03BA9114 RET
	0x03BA9118 BL 0x1C16F20
	0x03BA911C SUB X31, X31, 0x30
	0x03BA9120 STP X30, X21, [X31 + 0x10]
	0x03BA9124 STP X20, X19, [X31 + 0x20]
	0x03BA9128 ADRP X21, 0x839000
	0x03BA912C ADRP X20, 0x5B3000
	0x03BA9130 LDRB W8, [X21 + 0xC8F]
	0x03BA9134 LDR X20, [X20 + 0xDE0]
	0x03BA9138 MOV X19, X0
	0x03BA913C TBNZ X8, 0x0, 0x3BA9154
	0x03BA9140 ADRP X0, 0x5B3000
	0x03BA9144 LDR X0, [X0 + 0xDE0]
	0x03BA9148 BL 0x1C16CF4
	0x03BA914C MOVZ W8, 0x1
	0x03BA9150 STRB W8, [X21 + 0xC8F]

ISIL:
	001 Move [X31-96], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x83B000
	013 Move W8, [X20+3209]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {33}
	019 Move X0, 0x54D000
	020 Move X0, [X0+3696]
	021 Call 0x1C17CF4
	022 Move X0, 0x5B4000
	023 Move X0, [X0+3496]
	024 Call 0x1C17CF4
	025 Move X0, 0x5B4000
	026 Move X0, [X0+1480]
	027 Call 0x1C17CF4
	028 Move X0, 0x5B4000
	029 Move X0, [X0+3504]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+3209], W8
	033 Move X1, [X19+184]
	034 Compare X1, 0
	035 JumpIfEqual {40}
	036 Move X0, X19
	037 Move X2, X31
	038 Call MonoBehaviour.StopCoroutine, X0, X1
	039 Move [X19+184], X31
	040 Move X0, [X19+32]
	041 Compare X0, 0
	042 JumpIfEqual {116}
	043 Move W1, 1
	044 Move X2, X31
	045 Call GameObject.SetActive, X0, X1
	046 Move W8, [X19+136]
	047 Compare W8, 0
	048 JumpIfEqual {52}
	049 Move X8, [X19+192]
	050 Compare X8, 0
	051 JumpIfEqual {54}
	052 Move [X19+192], X31
	053 Move [X19+128], W31
	054 Move X20, [X19+104]
	055 Compare X20, 0
	056 JumpIfEqual {116}
	057 Move X8, 0x5B4000
	058 Move X8, [X8+1480]
	059 Move X0, X20
	060 Move X1, [X8]
	061 Call TweenableVariableAsyncBase`1<float3>.get_Value, X0
	062 Move V3, [X19+232]
	063 Move V8, V0
	064 Move V9, V1
	065 Move S0, [X19+224]
	066 Move S1, [X19+228]
	067 Move V10, V2
	068 Move V2, V3
	069 Move X0, X31
	070 Call float3.op_Implicit, X0
	071 Move X8, 0x54C000
	072 Move V13, [X19+140]
	073 Move X8, [X8+3696]
	074 Move V11, V0
	075 Move V12, V1
	076 Move V14, V2
	077 Move X0, [X8]
	078 Call 0x1C17F10
	079 Move X8, 0x5B4000
	080 Move X8, [X8+3496]
	081 Move X1, X19
	082 Move X3, X31
	083 Move X21, X0
	084 Move X2, [X8]
	085 Call Action..ctor, X0, X1, X2
	086 Move X8, 0x5B4000
	087 Move X8, [X8+3504]
	088 Move X0, X20
	089 Move V0, V8
	090 Move V1, V9
	091 Move X2, [X8]
	092 Move V2, V10
	093 Move V3, V11
	094 Move V4, V12
	095 Move V5, V14
	096 Move V6, V13
	097 Move X1, X21
	098 Call TweenableVariableBase`1<float3>.PlaySequence, X0, X1, X2, V0, X3
	099 Move X1, X0
	100 Move X0, X19
	101 Move X2, X31
	102 Call MonoBehaviour.StartCoroutine, X0, X1
	103 Move [X19+192], X0
	104 Move X20, [X31+80]
	105 Move X19, [X31+88]
	106 Move X30, [X31+64]
	107 Move X21, [X31+72]
	108 Move D9, [X31+48]
	109 Move D8, [X31+56]
	110 Move D11, [X31+32]
	111 Move D10, [X31+40]
	112 Move D13, [X31+16]
	113 Move D12, [X31+24]
	114 Move V14, [X31+96]
	115 Return 
	116 Call 0x1C17F20

Method: System.Void OnMenuVisible()

Disassembly:
	0x03BA8E8C LDP D9, D8, [X31 + 0x10]
	0x03BA8E90 MOV X1, X31
	0x03BA8E94 LDR V10, [X31], #0x30

ISIL:
	001 Move [X0+192], X31
	002 Move [X0+128], W31
	003 Return 

Method: System.Void HideMenu()

Disassembly:
	0x03BA9154 LDR X2, [X20]
	0x03BA9158 ADD X1, X31, 0x8
	0x03BA915C MOV X0, X19
	0x03BA9160 STR X31, [X31 + 0x8]
	0x03BA9164 BL 0x21A4990
	0x03BA9168 TBZ X0, 0x0, 0x3BA9194
	0x03BA916C LDR X0, [X31 + 0x8]
	0x03BA9170 CBZ X0, 0x3BA91A4
	0x03BA9174 MOV X1, X19
	0x03BA9178 MOV X2, X31
	0x03BA917C BL 0x3B40504
	0x03BA9180 LDR X0, [X31 + 0x8]
	0x03BA9184 CBZ X0, 0x3BA91A4
	0x03BA9188 MOV X1, X19
	0x03BA918C MOV X2, X31
	0x03BA9190 BL 0x3B4055C
	0x03BA9194 LDP X20, X19, [X31 + 0x20]
	0x03BA9198 LDP X30, X21, [X31 + 0x10]
	0x03BA919C ADD X31, X31, 0x30
	0x03BA91A0 RET
	0x03BA91A4 BL 0x1C16F20
	0x03BA91A8 RET
	0x03BA91AC RET
	0x03BA91B0 RET
	0x03BA91B4 RET
	0x03BA91B8 MOV X1, X31
	0x03BA91BC B 0x3C36C30
	0x03BA91C0 LDR W0, [X0 + 0x20]
	0x03BA91C4 RET
	0x03BA91C8 STR W1, [X0 + 0x20]
	0x03BA91CC RET
	0x03BA91D0 LDR W0, [X0 + 0x24]
	0x03BA91D4 RET
	0x03BA91D8 STR W1, [X0 + 0x24]
	0x03BA91DC RET
	0x03BA91E0 MOVZ W0, 0x2
	0x03BA91E4 RET
	0x03BA91E8 LDUR V0, [X0 + 0x34]
	0x03BA91EC LDUR V1, [X0 + 0x28]
	0x03BA91F0 STUR V0, [X8 + 0xC]
	0x03BA91F4 STR V1, [X8]
	0x03BA91F8 RET
	0x03BA91FC LDR W8, [X1 + 0x18]
	0x03BA9200 LDR X9, [X1 + 0x10]
	0x03BA9204 LDR V0, [X1]
	0x03BA9208 STR W8, [X0 + 0x40]
	0x03BA920C STR X9, [X0 + 0x38]
	0x03BA9210 STUR V0, [X0 + 0x28]
	0x03BA9214 RET
	0x03BA9218 RET
	0x03BA921C STP X30, X21, [X31 - 0x20]!
	0x03BA9220 STP X20, X19, [X31 + 0x10]
	0x03BA9224 ADRP X21, 0x839000
	0x03BA9228 LDRB W8, [X21 + 0xC90]
	0x03BA922C MOV X20, X1
	0x03BA9230 MOV X19, X0
	0x03BA9234 TBNZ X8, 0x0, 0x3BA924C
	0x03BA9238 ADRP X0, 0x5B1000
	0x03BA923C LDR X0, [X0 + 0x168]
	0x03BA9240 BL 0x1C16CF4
	0x03BA9244 MOVZ W8, 0x1
	0x03BA9248 STRB W8, [X21 + 0xC90]
	0x03BA924C CBZ X20, 0x3BA9298
	0x03BA9250 MOV X0, X20
	0x03BA9254 MOV X1, X31
	0x03BA9258 BL 0x3B3A784
	0x03BA925C CBZ X0, 0x3BA9298
	0x03BA9260 LDR W8, [X0 + 0x18]
	0x03BA9264 CMP W8, 0x2
	0x03BA9268 B.NE 0x3BA928C
	0x03BA926C MOV X0, X20
	0x03BA9270 MOV X1, X31
	0x03BA9274 BL 0x3C32E90
	0x03BA9278 CBZ X0, 0x3BA9298
	0x03BA927C MOV X1, X31
	0x03BA9280 BL 0x3C3F988
	0x03BA9284 STP S0, S1, [X19 + 0x44]
	0x03BA9288 STR S2, [X19 + 0x4C]
	0x03BA928C LDP X20, X19, [X31 + 0x10]
	0x03BA9290 LDP X30, X21, [X31], #0x20
	0x03BA9294 RET
	0x03BA9298 BL 0x1C16F20
	0x03BA929C ORR W8, W2, 0x2
	0x03BA92A0 CMP W8, 0x3
	0x03BA92A4 B.NE 0x3BA92B0
	0x03BA92A8 MOV X2, X3
	0x03BA92AC B 0x3BA92B4
	0x03BA92B0 RET
	0x03BA92B4 STR X30, [X31 - 0x30]!
	0x03BA92B8 STP X22, X21, [X31 + 0x10]
	0x03BA92BC STP X20, X19, [X31 + 0x20]
	0x03BA92C0 ADRP X22, 0x839000
	0x03BA92C4 LDRB W8, [X22 + 0xC91]
	0x03BA92C8 MOV X19, X2
	0x03BA92CC MOV X20, X1
	0x03BA92D0 MOV X21, X0
	0x03BA92D4 TBNZ X8, 0x0, 0x3BA92EC
	0x03BA92D8 ADRP X0, 0x5B1000
	0x03BA92DC LDR X0, [X0 + 0x168]
	0x03BA92E0 BL 0x1C16CF4
	0x03BA92E4 MOVZ W8, 0x1
	0x03BA92E8 STRB W8, [X22 + 0xC91]
	0x03BA92EC CBZ X20, 0x3BA9340
	0x03BA92F0 MOV X0, X20
	0x03BA92F4 MOV X1, X31
	0x03BA92F8 BL 0x3B3A784
	0x03BA92FC CBZ X0, 0x3BA9340
	0x03BA9300 LDR W8, [X0 + 0x18]
	0x03BA9304 CMP W8, 0x1

ISIL:
	001 Move [X31-96], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x83A000
	013 Move W8, [X20+3210]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {33}
	019 Move X0, 0x54C000
	020 Move X0, [X0+3696]
	021 Call 0x1C17CF4
	022 Move X0, 0x5B4000
	023 Move X0, [X0+3512]
	024 Call 0x1C17CF4
	025 Move X0, 0x5B4000
	026 Move X0, [X0+1480]
	027 Call 0x1C17CF4
	028 Move X0, 0x5B4000
	029 Move X0, [X0+3504]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+3210], W8
	033 Move X1, [X19+192]
	034 Compare X1, 0
	035 JumpIfEqual {40}
	036 Move X0, X19
	037 Move X2, X31
	038 Call MonoBehaviour.StopCoroutine, X0, X1
	039 Move [X19+192], X31
	040 Move W8, [X19+136]
	041 Compare W8, 0
	042 JumpIfEqual {46}
	043 Move X8, [X19+184]
	044 Compare X8, 0
	045 JumpIfEqual {58}
	046 Move X0, X19
	047 Move X20, [X31+80]
	048 Move X19, [X31+88]
	049 Move X30, [X31+64]
	050 Move X21, [X31+72]
	051 Move D9, [X31+48]
	052 Move D8, [X31+56]
	053 Move D11, [X31+32]
	054 Move D10, [X31+40]
	055 Move D13, [X31+16]
	056 Move D12, [X31+24]
	057 Move V14, [X31+96]
	058 Move X20, [X19+104]
	059 Compare X20, 0
	060 JumpIfEqual {132}
	061 Move X8, 0x5B4000
	062 Move X8, [X8+1480]
	063 Move X0, X20
	064 Move X1, [X8]
	065 Call TweenableVariableAsyncBase`1<float3>.get_Value, X0
	066 Move X21, 0x830000
	067 Move W8, [X21+1923]
	068 Move V8, V0
	069 Move V9, V1
	070 Move V10, V2
	071 Compare W8, 0
	072 JumpIfNotEqual {78}
	073 Move X0, 0x54B000
	074 Move X0, [X0+1440]
	075 Call 0x1C17CF4
	076 Move W8, 1
	077 Move [X21+1923], W8
	078 Move X8, 0x54B000
	079 Move X8, [X8+1440]
	080 Move X0, X31
	081 Move X8, [X8]
	082 Move X8, [X8+184]
	083 Move S0, [X8]
	084 Move S1, [X8+4]
	085 Move V2, [X8+8]
	086 Call float3.op_Implicit, X0
	087 Move X8, 0x54C000
	088 Move V13, [X19+140]
	089 Move X8, [X8+3696]
	090 Move V11, V0
	091 Move V12, V1
	092 Move V14, V2
	093 Move X0, [X8]
	094 Call 0x1C17F10
	095 Move X8, 0x5B4000
	096 Move X8, [X8+3512]
	097 Move X1, X19
	098 Move X3, X31
	099 Move X21, X0
	100 Move X2, [X8]
	101 Call Action..ctor, X0, X1, X2
	102 Move X8, 0x5B4000
	103 Move X8, [X8+3504]
	104 Move X0, X20
	105 Move V0, V8
	106 Move V1, V9
	107 Move X2, [X8]
	108 Move V2, V10
	109 Move V3, V11
	110 Move V4, V12
	111 Move V5, V14
	112 Move V6, V13
	113 Move X1, X21
	114 Call TweenableVariableBase`1<float3>.PlaySequence, X0, X1, X2, V0, X3
	115 Move X1, X0
	116 Move X0, X19
	117 Move X2, X31
	118 Call MonoBehaviour.StartCoroutine, X0, X1
	119 Move [X19+184], X0
	120 Move X20, [X31+80]
	121 Move X19, [X31+88]
	122 Move X30, [X31+64]
	123 Move X21, [X31+72]
	124 Move D9, [X31+48]
	125 Move D8, [X31+56]
	126 Move D11, [X31+32]
	127 Move D10, [X31+40]
	128 Move D13, [X31+16]
	129 Move D12, [X31+24]
	130 Move V14, [X31+96]
	131 Return 
	132 Call 0x1C17F20

Method: System.Void OnMenuHidden()

Disassembly:
	0x03BA9308 B.NE 0x3BA9324
	0x03BA930C MOV X0, X20
	0x03BA9310 MOV X1, X19
	0x03BA9314 LDP X20, X19, [X31 + 0x20]
	0x03BA9318 LDP X22, X21, [X31 + 0x10]
	0x03BA931C LDR X30, [X31], #0x30
	0x03BA9320 B 0x3BA9344
	0x03BA9324 MOV X0, X21
	0x03BA9328 MOV X1, X20
	0x03BA932C MOV X2, X19
	0x03BA9330 LDP X20, X19, [X31 + 0x20]
	0x03BA9334 LDP X22, X21, [X31 + 0x10]
	0x03BA9338 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+32]
	005 Compare X0, 0
	006 JumpIfEqual {16}
	007 Move W1, W31
	008 Move X2, X31
	009 Call GameObject.SetActive, X0, X1
	010 Move W8, 1
	011 Move [X19+128], W8
	012 Move [X19+184], X31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return 
	016 Call 0x1C17F20

Method: System.Void LateUpdate()

Disassembly:
	0x03BA933C B 0x3BA9684
	0x03BA9340 BL 0x1C16F20
	0x03BA9344 SUB X31, X31, 0xB0
	0x03BA9348 STP D15, D14, [X31 + 0x50]
	0x03BA934C STP D13, D12, [X31 + 0x60]
	0x03BA9350 STP D11, D10, [X31 + 0x70]
	0x03BA9354 STP D9, D8, [X31 + 0x80]
	0x03BA9358 STP X30, X21, [X31 + 0x90]
	0x03BA935C STP X20, X19, [X31 + 0xA0]
	0x03BA9360 ADRP X21, 0x839000
	0x03BA9364 LDRB W8, [X21 + 0xCB6]
	0x03BA9368 MOV X19, X1
	0x03BA936C MOV X20, X0
	0x03BA9370 TBNZ X8, 0x0, 0x3BA9394
	0x03BA9374 ADRP X0, 0x5B1000
	0x03BA9378 LDR X0, [X0 + 0x2F8]
	0x03BA937C BL 0x1C16CF4
	0x03BA9380 ADRP X0, 0x5B1000
	0x03BA9384 LDR X0, [X0 + 0x170]
	0x03BA9388 BL 0x1C16CF4
	0x03BA938C MOVZ W8, 0x1
	0x03BA9390 STRB W8, [X21 + 0xCB6]
	0x03BA9394 CBZ X20, 0x3BA9680
	0x03BA9398 MOV X0, X20
	0x03BA939C MOV X1, X31
	0x03BA93A0 BL 0x3B3A784
	0x03BA93A4 CBZ X0, 0x3BA9680
	0x03BA93A8 ADRP X8, 0x5B1000
	0x03BA93AC LDR X8, [X8 + 0x170]
	0x03BA93B0 MOV W1, W31
	0x03BA93B4 LDR X2, [X8]
	0x03BA93B8 BL 0x301BCCC
	0x03BA93BC CBZ X0, 0x3BA9680
	0x03BA93C0 ADRP X10, 0x5B1000
	0x03BA93C4 LDR X8, [X0]
	0x03BA93C8 LDR X10, [X10 + 0x2F8]
	0x03BA93CC MOV X21, X0
	0x03BA93D0 LDRH W9, [X8 + 0x12E]
	0x03BA93D4 LDR X1, [X10]
	0x03BA93D8 CBZ X9, 0x3BA93FC
	0x03BA93DC LDR X10, [X8 + 0xB0]
	0x03BA93E0 ADD X10, X10, 0x8
	0x03BA93E4 LDUR X11, [X10 - 0x8]
	0x03BA93E8 CMP X11, X1
	0x03BA93EC B.EQ 0x3BA940C
	0x03BA93F0 SUBS X9, X9, 0x1
	0x03BA93F4 ADD X10, X10, 0x10
	0x03BA93F8 B.NE 0x3BA93E4
	0x03BA93FC MOVZ W2, 0x6
	0x03BA9400 MOV X0, X21
	0x03BA9404 BL 0x1C5C788
	0x03BA9408 B 0x3BA941C
	0x03BA940C LDR W9, [X10]
	0x03BA9410 ADD W9, W9, 0x6
	0x03BA9414 ADD X8, X8, W9, 0x4, SXTW
	0x03BA9418 ADD X0, X8, 0x138
	0x03BA941C LDP X8, X2, [X0]
	0x03BA9420 MOV X0, X21
	0x03BA9424 MOV X1, X20
	0x03BA9428 BLR X8
	0x03BA942C ADD X8, X31, 0x30
	0x03BA9430 MOV X1, X31
	0x03BA9434 BL 0x3B24724
	0x03BA9438 LDR V0, [X31 + 0x34]
	0x03BA943C LDR V1, [X31 + 0x30]
	0x03BA9440 MOV X0, X20
	0x03BA9444 MOV X1, X31
	0x03BA9448 STR S0, [X31 + 0x2C]
	0x03BA944C LDR V0, [X31 + 0x38]
	0x03BA9450 STP S1, S0, [X31 + 0x24]
	0x03BA9454 LDR V1, [X31 + 0x3C]
	0x03BA9458 LDR V0, [X31 + 0x40]
	0x03BA945C STP S1, S0, [X31 + 0x18]
	0x03BA9460 LDP S0, S11, [X31 + 0x44]
	0x03BA9464 STR S0, [X31 + 0x20]
	0x03BA9468 BL 0x3C32E90
	0x03BA946C ADD X8, X31, 0x30
	0x03BA9470 MOV X1, X31
	0x03BA9474 BL 0x3B24724
	0x03BA9478 LDR X8, [X20]
	0x03BA947C LDP S8, S9, [X31 + 0x30]
	0x03BA9480 LDP S10, S15, [X31 + 0x38]
	0x03BA9484 LDP S14, S13, [X31 + 0x40]
	0x03BA9488 LDR X9, [X8 + 0x5A8]
	0x03BA948C LDR X2, [X8 + 0x5B0]
	0x03BA9490 LDR V12, [X31 + 0x48]
	0x03BA9494 MOV X0, X20
	0x03BA9498 MOV X1, X21
	0x03BA949C BLR X9
	0x03BA94A0 CBZ X0, 0x3BA9680
	0x03BA94A4 MOV X1, X31
	0x03BA94A8 MOV X21, X0
	0x03BA94AC BL 0x3C3F58C
	0x03BA94B0 LDRB W8, [X20 + 0x20C]
	0x03BA94B4 FSUB S0, S8, S0
	0x03BA94B8 FSUB S1, S9, S1
	0x03BA94BC FSUB S2, S10, S2
	0x03BA94C0 CBZ W8, 0x3BA9644
	0x03BA94C4 MOV X0, X21
	0x03BA94C8 MOV X1, X31
	0x03BA94CC BL 0x3C408CC
	0x03BA94D0 STP S1, S0, [X31 + 0x10]
	0x03BA94D4 STR S2, [X31 + 0xC]
	0x03BA94D8 MOV V0.16B, V15.16B
	0x03BA94DC MOV V1.16B, V14.16B
	0x03BA94E0 MOV V2.16B, V13.16B
	0x03BA94E4 MOV V3.16B, V12.16B
	0x03BA94E8 MOV X0, X31
	0x03BA94EC BL 0x3C2A260
	0x03BA94F0 MOV X0, X21
	0x03BA94F4 MOV X1, X31
	0x03BA94F8 MOV V12.16B, V0.16B
	0x03BA94FC MOV V13.16B, V1.16B
	0x03BA9500 MOV V14.16B, V2.16B
	0x03BA9504 MOV V15.16B, V3.16B
	0x03BA9508 BL 0x3C3DEB4
	0x03BA950C FMUL S4, S15, S0
	0x03BA9510 FMUL S5, S12, S3
	0x03BA9514 FMUL S7, S14, S1
	0x03BA9518 FMUL S16, S15, S1
	0x03BA951C FMUL S17, S13, S3
	0x03BA9520 FMUL S18, S14, S0
	0x03BA9524 FMUL S20, S12, S1
	0x03BA9528 FMUL S21, S12, S0
	0x03BA952C FMUL S22, S13, S0
	0x03BA9530 FMUL S0, S13, S1
	0x03BA9534 FMUL S1, S15, S2
	0x03BA9538 FMUL S23, S15, S3
	0x03BA953C FMUL S3, S14, S3
	0x03BA9540 FMUL S6, S13, S2
	0x03BA9544 FMUL S19, S12, S2
	0x03BA9548 FMUL S24, S14, S2
	0x03BA954C FADD S2, S4, S5
	0x03BA9550 FADD S4, S16, S17
	0x03BA9554 FADD S1, S1, S3
	0x03BA9558 FSUB S3, S23, S21
	0x03BA955C FADD S2, S6, S2
	0x03BA9560 FADD S4, S18, S4
	0x03BA9564 FADD S5, S20, S1
	0x03BA9568 FSUB S3, S3, S0
	0x03BA956C FSUB S0, S2, S7
	0x03BA9570 FSUB S1, S4, S19
	0x03BA9574 FSUB S2, S5, S22
	0x03BA9578 FSUB S3, S3, S24
	0x03BA957C MOV X0, X31
	0x03BA9580 BL 0x3C2A260
	0x03BA9584 LDP S10, S9, [X31 + 0x18]
	0x03BA9588 LDR V8, [X31 + 0x20]
	0x03BA958C LDP S5, S4, [X31 + 0x10]
	0x03BA9590 LDR V6, [X31 + 0xC]
	0x03BA9594 MOV V12.16B, V0.16B
	0x03BA9598 MOV V13.16B, V1.16B
	0x03BA959C MOV V14.16B, V2.16B
	0x03BA95A0 MOV V15.16B, V3.16B
	0x03BA95A4 MOV V0.16B, V10.16B
	0x03BA95A8 MOV V1.16B, V9.16B
	0x03BA95AC MOV V2.16B, V8.16B
	0x03BA95B0 MOV V3.16B, V11.16B
	0x03BA95B4 MOV X0, X31
	0x03BA95B8 BL 0x3C2A9FC
	0x03BA95BC LDR V3, [X31 + 0x24]
	0x03BA95C0 FMUL S4, S10, S15
	0x03BA95C4 FMUL S7, S11, S13
	0x03BA95C8 FMUL S16, S9, S15
	0x03BA95CC FADD S0, S3, S0
	0x03BA95D0 FMUL S3, S11, S12
	0x03BA95D4 FMUL S20, S10, S12
	0x03BA95D8 FMUL S23, S11, S14
	0x03BA95DC FMUL S24, S11, S15
	0x03BA95E0 FMUL S25, S8, S15
	0x03BA95E4 FMUL S5, S9, S14
	0x03BA95E8 FMUL S17, S8, S12
	0x03BA95EC FMUL S19, S10, S13
	0x03BA95F0 FMUL S22, S9, S13
	0x03BA95F4 STR S0, [X19]
	0x03BA95F8 FADD S0, S3, S4
	0x03BA95FC FADD S3, S7, S16
	0x03BA9600 FADD S4, S23, S25
	0x03BA9604 FSUB S7, S24, S20
	0x03BA9608 FMUL S6, S8, S13
	0x03BA960C FMUL S18, S10, S14
	0x03BA9610 FMUL S21, S9, S12
	0x03BA9614 FMUL S26, S8, S14
	0x03BA9618 FADD S0, S5, S0
	0x03BA961C FADD S3, S17, S3
	0x03BA9620 FADD S4, S19, S4
	0x03BA9624 FSUB S5, S7, S22
	0x03BA9628 FSUB S0, S0, S6
	0x03BA962C FSUB S3, S3, S18
	0x03BA9630 FSUB S4, S4, S21
	0x03BA9634 FSUB S5, S5, S26
	0x03BA9638 STP S0, S3, [X19 + 0xC]
	0x03BA963C STP S4, S5, [X19 + 0x14]
	0x03BA9640 B 0x3BA9650
	0x03BA9644 LDR V3, [X31 + 0x24]
	0x03BA9648 FADD S0, S3, S0
	0x03BA964C STR S0, [X19]
	0x03BA9650 LDP S0, S3, [X31 + 0x28]
	0x03BA9654 LDP X30, X21, [X31 + 0x90]
	0x03BA9658 LDP D9, D8, [X31 + 0x80]
	0x03BA965C LDP D11, D10, [X31 + 0x70]
	0x03BA9660 FADD S0, S0, S2
	0x03BA9664 FADD S1, S3, S1
	0x03BA9668 STP S1, S0, [X19 + 0x4]
	0x03BA966C LDP X20, X19, [X31 + 0xA0]
	0x03BA9670 LDP D13, D12, [X31 + 0x60]
	0x03BA9674 LDP D15, D14, [X31 + 0x50]
	0x03BA9678 ADD X31, X31, 0xB0
	0x03BA967C RET
	0x03BA9680 BL 0x1C16F20
	0x03BA9684 SUB X31, X31, 0x110
	0x03BA9688 STP D15, D14, [X31 + 0x80]
	0x03BA968C STP D13, D12, [X31 + 0x90]
	0x03BA9690 STP D11, D10, [X31 + 0xA0]
	0x03BA9694 STP D9, D8, [X31 + 0xB0]
	0x03BA9698 STR X29, [X31 + 0xC0]
	0x03BA969C STP X30, X25, [X31 + 0xD0]
	0x03BA96A0 STP X24, X23, [X31 + 0xE0]
	0x03BA96A4 STP X22, X21, [X31 + 0xF0]
	0x03BA96A8 STP X20, X19, [X31 + 0x100]
	0x03BA96AC ADRP X22, 0x839000
	0x03BA96B0 LDRB W8, [X22 + 0xC92]
	0x03BA96B4 MOV X19, X2
	0x03BA96B8 MOV X20, X1
	0x03BA96BC MOV X21, X0
	0x03BA96C0 TBNZ X8, 0x0, 0x3BA96F0
	0x03BA96C4 ADRP X0, 0x5B1000
	0x03BA96C8 LDR X0, [X0 + 0x2F8]
	0x03BA96CC BL 0x1C16CF4
	0x03BA96D0 ADRP X0, 0x5B1000
	0x03BA96D4 LDR X0, [X0 + 0x170]
	0x03BA96D8 BL 0x1C16CF4
	0x03BA96DC ADRP X0, 0x572000
	0x03BA96E0 LDR X0, [X0 + 0x610]
	0x03BA96E4 BL 0x1C16CF4
	0x03BA96E8 MOVZ W8, 0x1
	0x03BA96EC STRB W8, [X22 + 0xC92]
	0x03BA96F0 STP X31, X31, [X31 + 0x60]
	0x03BA96F4 STR W31, [X31 + 0x78]
	0x03BA96F8 STR X31, [X31 + 0x70]
	0x03BA96FC STP X31, X31, [X31 + 0x40]
	0x03BA9700 STR W31, [X31 + 0x58]
	0x03BA9704 STR X31, [X31 + 0x50]
	0x03BA9708 CBZ X20, 0x3BA9FC0
	0x03BA970C MOV X0, X20
	0x03BA9710 MOV X1, X31
	0x03BA9714 BL 0x3B3A784
	0x03BA9718 CBZ X0, 0x3BA9FC0
	0x03BA971C ADRP X23, 0x5B1000
	0x03BA9720 LDR X23, [X23 + 0x170]
	0x03BA9724 MOV W1, W31
	0x03BA9728 LDR X2, [X23]
	0x03BA972C BL 0x301BCCC
	0x03BA9730 CBZ X0, 0x3BA9FC0
	0x03BA9734 ADRP X24, 0x5B1000
	0x03BA9738 LDR X8, [X0]
	0x03BA973C LDR X24, [X24 + 0x2F8]
	0x03BA9740 MOV X22, X0
	0x03BA9744 LDRH W9, [X8 + 0x12E]
	0x03BA9748 LDR X1, [X24]
	0x03BA974C CBZ X9, 0x3BA9770
	0x03BA9750 LDR X10, [X8 + 0xB0]
	0x03BA9754 ADD X10, X10, 0x8
	0x03BA9758 LDUR X11, [X10 - 0x8]
	0x03BA975C CMP X11, X1
	0x03BA9760 B.EQ 0x3BA9780
	0x03BA9764 SUBS X9, X9, 0x1
	0x03BA9768 ADD X10, X10, 0x10
	0x03BA976C B.NE 0x3BA9758
	0x03BA9770 MOVZ W2, 0x6
	0x03BA9774 MOV X0, X22
	0x03BA9778 BL 0x1C5C788
	0x03BA977C B 0x3BA9790
	0x03BA9780 LDR W9, [X10]
	0x03BA9784 ADD W9, W9, 0x6
	0x03BA9788 ADD X8, X8, W9, 0x4, SXTW
	0x03BA978C ADD X0, X8, 0x138
	0x03BA9790 LDP X8, X2, [X0]
	0x03BA9794 MOV X0, X22
	0x03BA9798 MOV X1, X20
	0x03BA979C BLR X8
	0x03BA97A0 ADD X8, X31, 0x20
	0x03BA97A4 MOV X1, X31
	0x03BA97A8 BL 0x3B24724
	0x03BA97AC LDR V0, [X31 + 0x2]
	0x03BA97B0 LDUR V1, [X31 + 0x2C]
	0x03BA97B4 MOV X0, X20
	0x03BA97B8 MOV X1, X31
	0x03BA97BC STR V0, [X31 + 0x6]
	0x03BA97C0 STUR V1, [X31 + 0x6C]
	0x03BA97C4 BL 0x3B3A784
	0x03BA97C8 CBZ X0, 0x3BA9FC0
	0x03BA97CC LDR X2, [X23]
	0x03BA97D0 MOVZ W1, 0x1
	0x03BA97D4 BL 0x301BCCC
	0x03BA97D8 CBZ X0, 0x3BA9FC0
	0x03BA97DC LDR X8, [X0]
	0x03BA97E0 LDR X1, [X24]
	0x03BA97E4 MOV X22, X0
	0x03BA97E8 LDRH W9, [X8 + 0x12E]
	0x03BA97EC CBZ X9, 0x3BA9810
	0x03BA97F0 LDR X10, [X8 + 0xB0]
	0x03BA97F4 ADD X10, X10, 0x8
	0x03BA97F8 LDUR X11, [X10 - 0x8]
	0x03BA97FC CMP X11, X1
	0x03BA9800 B.EQ 0x3BA9820
	0x03BA9804 SUBS X9, X9, 0x1
	0x03BA9808 ADD X10, X10, 0x10
	0x03BA980C B.NE 0x3BA97F8
	0x03BA9810 MOVZ W2, 0x6
	0x03BA9814 MOV X0, X22
	0x03BA9818 BL 0x1C5C788
	0x03BA981C B 0x3BA9830
	0x03BA9820 LDR W9, [X10]
	0x03BA9824 ADD W9, W9, 0x6
	0x03BA9828 ADD X8, X8, W9, 0x4, SXTW
	0x03BA982C ADD X0, X8, 0x138
	0x03BA9830 LDP X8, X2, [X0]
	0x03BA9834 MOV X0, X22
	0x03BA9838 MOV X1, X20
	0x03BA983C BLR X8

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], D13
	003 Move [X31+104], D12
	004 Move [X31+112], D11
	005 Move [X31+120], D10
	006 Move [X31+128], D9
	007 Move [X31+136], D8
	008 Move [X31+144], X30
	009 Move [X31+152], X23
	010 Move [X31+160], X22
	011 Move [X31+168], X21
	012 Move [X31+176], X20
	013 Move [X31+184], X19
	014 Move X20, 0x83A000
	015 Move W8, [X20+3211]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {41}
	021 Move X0, 0x5B4000
	022 Move X0, [X0+3392]
	023 Call 0x1C17CF4
	024 Move X0, 0x54B000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0x5B4000
	028 Move X0, [X0+1432]
	029 Call 0x1C17CF4
	030 Move X0, 0x5B4000
	031 Move X0, [X0+1512]
	032 Call 0x1C17CF4
	033 Move X0, 0x5B4000
	034 Move X0, [X0+1496]
	035 Call 0x1C17CF4
	036 Move X0, 0x5B4000
	037 Move X0, [X0+1416]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X20+3211], W8
	041 Move [X31+84], W31
	042 Move [X31+64], X31
	043 Move [X31+72], X31
	044 Move [X31+56], X31
	045 Move [X31+48], W31
	046 Move [X31+32], X31
	047 Move [X31+40], X31
	048 Move [X31+24], X31
	049 Move [X31+16], W31
	050 Move [X31+8], X31
	051 Move W8, [X19+160]
	052 Compare W8, 0
	053 JumpIfEqual {127}
	054 Move X0, X19
	055 Call HandMenu.GetCurrentPreset, X0
	056 Move [X31+88], X0
	057 Move W1, [X19+40]
	058 Move X20, X0
	059 Add X2, X31, 88
	060 Add X3, X31, 84
	061 Add X4, X31, 72
	062 Add X5, X31, 64
	063 Add X6, X31, 56
	064 Move X0, X19
	065 Call HandMenu.TryGetTrackedAnchors, X0, X1, X2, X3, X4, X5, X6
	066 Move W21, W0
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {135}
	071 Move X9, [X31+72]
	072 Move X8, [X31+64]
	073 Move X0, X31
	074 Move [X19+200], X9
	075 Move [X19+208], X8
	076 Move X8, [X31+56]
	077 Move [X19+216], X8
	078 Call Time.get_unscaledTime
	079 Move [X19+248], S0
	080 Move X0, [X19+216]
	081 Compare X0, 0
	082 JumpIfEqual {387}
	083 Move X1, X31
	084 Call Transform.get_position, X0
	085 Move X0, [X19+200]
	086 Compare X0, 0
	087 JumpIfEqual {387}
	088 Move X1, X31
	089 Move V8, V0
	090 Move V9, V1
	091 Move V10, V2
	092 Call Transform.get_position, X0
	093 Move X22, 0x830000
	094 Move W8, [X22+1925]
	095 Move V11, V0
	096 Move V12, V1
	097 Move V13, V2
	098 Compare W8, 0
	099 JumpIfNotEqual {105}
	100 Move X0, 0x54B000
	101 Move X0, [X0+1448]
	102 Call 0x1C17CF4
	103 Move W8, 1
	104 Move [X22+1925], W8
	105 Move X8, 0x54B000
	106 Move X8, [X8+1448]
	107 Subtract S11, S8, S11
	108 Subtract S9, S9, S12
	109 Subtract S8, S10, S13
	110 Move X0, [X8]
	111 Move W8, [X0+224]
	112 Compare W8, 0
	113 JumpIfNotEqual {115}
	114 Call 0x1C17DFC
	115 Multiply S0, S11, S11
	116 Multiply S1, S9, S9
	117 Move X8, -51109888
	118 Add S0, S0, S1
	119 Move V1, [X8+380]
	120 Multiply S2, S8, S8
	121 Add S0, S2, S0
	122 NotImplemented "Instruction FSQRT not yet implemented."
	123 NotImplemented "Instruction FCMP not yet implemented."
	124 NotImplemented "Instruction FDIV not yet implemented."
	125 NotImplemented "Instruction FDIV not yet implemented."
	126 NotImplemented "Instruction FDIV not yet implemented."
	127 Move X0, [X19+240]
	128 Compare X0, 0
	129 JumpIfEqual {387}
	130 Move X8, 0x5B4000
	131 Move X8, [X8+3392]
	132 Move W1, W31
	133 Move X2, [X8]
	134 Call BindableVariableBase`1<Boolean>.set_Value, X0, X1
	135 Move X0, X31
	136 Call Time.get_unscaledTime
	137 Compare X20, 0
	138 JumpIfEqual {387}
	139 Move V1, [X19+248]
	140 Move V2, [X20+104]
	141 Subtract S0, S0, S1
	142 NotImplemented "Instruction FCMP not yet implemented."
	143 Move X0, [X19+240]
	144 Compare X0, 0
	145 JumpIfEqual {387}
	146 Move X8, 0x5B4000
	147 Move X8, [X8+3392]
	148 Move W1, W31
	149 Move X2, [X8]
	150 Call BindableVariableBase`1<Boolean>.set_Value, X0, X1
	151 Move X23, 0x54B000
	152 Move X23, [X23+1432]
	153 Move X22, [X19+200]
	154 Move X0, [X23]
	155 Move W8, [X0+224]
	156 Compare W8, 0
	157 JumpIfNotEqual {159}
	158 Call 0x1C17DFC
	159 Move X0, X22
	160 Move X1, X31
	161 Move X2, X31
	162 Call Object.op_Equality, X0, X1
	163 Move TEMP, X0
	164 And TEMP, TEMP, 1
	165 Compare TEMP, 1
	166 JumpIfEqual {373}
	167 Move X0, [X23]
	168 Move X22, [X19+208]
	169 Move W8, [X0+224]
	170 Compare W8, 0
	171 JumpIfNotEqual {173}
	172 Call 0x1C17DFC
	173 Move X0, X22
	174 Move X1, X31
	175 Move X2, X31
	176 Call Object.op_Equality, X0, X1
	177 Move TEMP, X0
	178 And TEMP, TEMP, 1
	179 Compare TEMP, 1
	180 JumpIfEqual {373}
	181 Move X0, [X23]
	182 Move X22, [X19+216]
	183 Move W8, [X0+224]
	184 Compare W8, 0
	185 JumpIfNotEqual {187}
	186 Call 0x1C17DFC
	187 Move X0, X22
	188 Move X1, X31
	189 Move X2, X31
	190 Call Object.op_Equality, X0, X1
	191 Move TEMP, X0
	192 And TEMP, TEMP, 1
	193 Compare TEMP, 1
	194 JumpIfNotEqual {80}
	195 Move X22, 0x830000
	196 Move W8, [X22+1923]
	197 Compare W8, 0
	198 JumpIfNotEqual {204}
	199 Move X0, 0x54B000
	200 Move X0, [X0+1440]
	201 Call 0x1C17CF4
	202 Move W8, 1
	203 Move [X22+1923], W8
	204 Move X8, 0x54B000
	205 Move X8, [X8+1440]
	206 Move X8, [X8]
	207 Move X8, [X8+184]
	208 Move S12, [X8]
	209 Move S13, [X8+4]
	210 Move V11, [X8+8]
	211 Move [X31+40], S12
	212 Move [X31+48], S13
	213 Move [X31+48], S11
	214 Move TEMP, X21
	215 And TEMP, TEMP, 1
	216 Compare TEMP, 1
	217 JumpIfNotEqual {242}
	218 Move W8, [X19+76]
	219 Compare W8, 0
	220 JumpIfEqual {234}
	221 Move X0, [X19+200]
	222 Compare X0, 0
	223 JumpIfEqual {387}
	224 Move X1, X31
	225 Call Transform.get_forward, X0
	226 Move V3, [X19+84]
	227 Multiply S0, S12, S0
	228 Multiply S1, S1, S13
	229 Add S0, S0, S1
	230 Multiply S1, S2, S11
	231 Add S0, S1, S0
	232 NotImplemented "Instruction FCMP not yet implemented."
	233 NotImplemented "Instruction CSET not yet implemented."
	234 Move W1, 1
	235 Move X0, [X19+240]
	236 Compare X0, 0
	237 JumpIfEqual {387}
	238 Move X8, 0x5B4000
	239 Move X8, [X8+3392]
	240 Move X2, [X8]
	241 Call BindableVariableBase`1<Boolean>.set_Value, X0, X1
	242 Move X0, [X19+32]
	243 Compare X0, 0
	244 JumpIfEqual {387}
	245 Move X1, X31
	246 Call GameObject.get_activeSelf, X0
	247 Move TEMP, X0
	248 And TEMP, TEMP, 1
	249 Compare TEMP, 1
	250 JumpIfNotEqual {373}
	251 Move X0, [X19+216]
	252 Compare X0, 0
	253 JumpIfEqual {387}
	254 Move X1, X31
	255 Call Transform.get_position, X0
	256 Move X0, [X19+216]
	257 Compare X0, 0
	258 JumpIfEqual {387}
	259 Move X1, X31
	260 Move V8, V0
	261 Move V9, V1
	262 Move V10, V2
	263 Call Transform.get_rotation, X0
	264 Move W8, [X31+84]
	265 Move [X31+24], S0
	266 Move [X31+32], S1
	267 Move [X31+32], S2
	268 Move [X31+40], S3
	269 Subtract W9, W8, 1
	270 NotImplemented "Instruction CMP not yet implemented."
	271 Compare X20, 0
	272 JumpIfEqual {387}
	273 Move X1, [X19+208]
	274 NotImplemented "Instruction CMP not yet implemented."
	275 NotImplemented "Instruction CSET not yet implemented."
	276 Move X0, X20
	277 Call FollowPreset.GetReferenceAxisForTrackingAnchor, X0, X1, X2
	278 Move W8, [X20+92]
	279 Compare W8, 0
	280 JumpIfEqual {300}
	281 NotImplemented "Instruction FNEG not yet implemented."
	282 Move V4, [X20+100]
	283 Multiply S0, S0, S12
	284 Multiply S1, S1, S3
	285 Subtract S0, S1, S0
	286 Multiply S1, S2, S11
	287 Subtract S0, S0, S1
	288 NotImplemented "Instruction FCMP not yet implemented."
	289 Move X1, [X19+200]
	290 Move X0, X19
	291 Call HandMenu.GetReferenceUpDirection, X0, X1
	292 Add X0, X31, 40
	293 Add X1, X31, 8
	294 Add X2, X31, 24
	295 Move X3, X31
	296 Move [X31+8], S0
	297 Move [X31+16], S1
	298 Move [X31+16], S2
	299 Call BurstMathUtility.OrthogonalLookRotation, X0, X1, X2
	300 Move X21, [X19+88]
	301 Move V0, V8
	302 Move V1, V9
	303 Move V2, V10
	304 Move X0, X31
	305 Call float3.op_Implicit, X0
	306 Compare X21, 0
	307 JumpIfEqual {387}
	308 Move X8, 0x5B4000
	309 Move X8, [X8+1496]
	310 Move X0, X21
	311 Move X1, [X8]
	312 Call TweenableVariableBase`1<float3>.set_target, X0, X1
	313 Move X0, [X19+96]
	314 Compare X0, 0
	315 JumpIfEqual {387}
	316 Move X8, 0x5B4000
	317 Move S2, [X31+32]
	318 Move S3, [X31+36]
	319 Move S0, [X31+24]
	320 Move S1, [X31+28]
	321 Move X8, [X8+1416]
	322 Move X1, [X8]
	323 Call TweenableVariableBase`1<Quaternion>.set_target, X0, X1
	324 Move W8, [X19+128]
	325 Compare W8, 0
	326 JumpIfEqual {346}
	327 Move X0, [X19+88]
	328 Compare X0, 0
	329 JumpIfEqual {387}
	330 Move X8, 0x5B4000
	331 Move X8, [X8+1512]
	332 Move S0, 1
	333 Move X1, [X8]
	334 Call TweenableVariableBase`1<float3>.HandleTween, X0, V0
	335 Compare X20, 0
	336 JumpIfEqual {387}
	337 Move W8, [X20+108]
	338 Move X19, [X19+96]
	339 Compare W8, 0
	340 JumpIfNotEqual {362}
	341 Compare X19, 0
	342 JumpIfEqual {387}
	343 Move X8, 0x5B4000
	344 Move X8, [X8+1432]
	345 Move S0, 1
	346 Compare X20, 0
	347 JumpIfEqual {387}
	348 Move W8, [X20+108]
	349 Compare W8, 0
	350 JumpIfEqual {327}
	351 Move X21, [X19+88]
	352 Move X0, X31
	353 Call Time.get_deltaTime
	354 Compare X21, 0
	355 JumpIfEqual {387}
	356 Move S1, [X20+112]
	357 Move S2, [X20+116]
	358 Move X0, X21
	359 Move X1, X31
	360 Call SmartFollowVector3TweenableVariable.HandleSmartTween, X0, V0, V1, V2
	361 Move X19, [X19+96]
	362 Move X0, X31
	363 Call Time.get_deltaTime
	364 Compare X19, 0
	365 JumpIfEqual {387}
	366 Move X8, 0x5B4000
	367 Move V1, [X20+112]
	368 Move X8, [X8+1432]
	369 Multiply S0, S0, S1
	370 Move X1, [X8]
	371 Move X0, X19
	372 Call TweenableVariableBase`1<Quaternion>.HandleTween, X0, V0
	373 Move X20, [X31+176]
	374 Move X19, [X31+184]
	375 Move X22, [X31+160]
	376 Move X21, [X31+168]
	377 Move X30, [X31+144]
	378 Move X23, [X31+152]
	379 Move D9, [X31+128]
	380 Move D8, [X31+136]
	381 Move D11, [X31+112]
	382 Move D10, [X31+120]
	383 Move D13, [X31+96]
	384 Move D12, [X31+104]
	385 Add X31, X31, 192
	386 Return 
	387 Call 0x1C17F20

Method: System.Boolean TryGetTrackedAnchors(UnityEngine.XR.Interaction.Toolkit.UI.BodyUI.HandMenu/MenuHandedness desiredHandedness, in UnityEngine.XR.Interaction.Toolkit.UI.BodyUI.FollowPreset currentPreset, out UnityEngine.XR.Interaction.Toolkit.UI.BodyUI.HandMenu/MenuHandedness targetHandedness, out UnityEngine.Transform cameraTransform, out UnityEngine.Transform palmAnchor, out UnityEngine.Transform palmAnchorOffset)

Disassembly:
	0x03BA9840 ADD X8, X31, 0x20
	0x03BA9844 MOV X1, X31
	0x03BA9848 BL 0x3B24724
	0x03BA984C LDR V0, [X31 + 0x2]
	0x03BA9850 LDUR V1, [X31 + 0x2C]
	0x03BA9854 STR V0, [X31 + 0x4]
	0x03BA9858 STUR V1, [X31 + 0x4C]
	0x03BA985C LDR W8, [X21 + 0x20]
	0x03BA9860 CMP W8, 0x1
	0x03BA9864 B.EQ 0x3BA98A4
	0x03BA9868 CMP W8, 0x2
	0x03BA986C B.NE 0x3BA98C0
	0x03BA9870 LDP S8, S9, [X31 + 0x60]
	0x03BA9874 LDR V11, [X31 + 0x68]
	0x03BA9878 LDP S10, S12, [X31 + 0x40]
	0x03BA987C LDR V13, [X31 + 0x48]
	0x03BA9880 FMOV S0, 0.5
	0x03BA9884 FADD S1, S8, S10
	0x03BA9888 FADD S2, S9, S12
	0x03BA988C FADD S3, S11, S13
	0x03BA9890 FMUL S4, S1, S0
	0x03BA9894 FMUL S1, S2, S0
	0x03BA9898 FMUL S14, S3, S0
	0x03BA989C STP S4, S1, [X31 + 0xC]
	0x03BA98A0 B 0x3BA98D8
	0x03BA98A4 LDP S10, S12, [X31 + 0x40]
	0x03BA98A8 LDR V13, [X31 + 0x48]
	0x03BA98AC LDP S8, S9, [X31 + 0x60]
	0x03BA98B0 LDR V11, [X31 + 0x68]
	0x03BA98B4 STP S10, S12, [X31 + 0xC]
	0x03BA98B8 MOV V14.16B, V13.16B
	0x03BA98BC B 0x3BA98D8
	0x03BA98C0 LDP S8, S9, [X31 + 0x60]
	0x03BA98C4 LDR V11, [X31 + 0x68]
	0x03BA98C8 LDP S10, S12, [X31 + 0x40]
	0x03BA98CC LDR V13, [X31 + 0x48]
	0x03BA98D0 STP S8, S9, [X31 + 0xC]
	0x03BA98D4 MOV V14.16B, V11.16B
	0x03BA98D8 ADRP X22, 0x82F000
	0x03BA98DC LDRB W8, [X22 + 0x785]
	0x03BA98E0 CBNZ W8, 0x3BA98F8
	0x03BA98E4 ADRP X0, 0x54A000
	0x03BA98E8 LDR X0, [X0 + 0x5A8]
	0x03BA98EC BL 0x1C16CF4
	0x03BA98F0 MOVZ W8, 0x1
	0x03BA98F4 STRB W8, [X22 + 0x785]
	0x03BA98F8 ADRP X22, 0x54A000
	0x03BA98FC LDR X22, [X22 + 0x5A8]
	0x03BA9900 FSUB S10, S10, S8
	0x03BA9904 FSUB S9, S12, S9
	0x03BA9908 FSUB S8, S13, S11
	0x03BA990C LDR X0, [X22]
	0x03BA9910 LDR W8, [X0 + 0xE0]
	0x03BA9914 CBNZ W8, 0x3BA991C
	0x03BA9918 BL 0x1C16DFC
	0x03BA991C FMUL S0, S10, S10
	0x03BA9920 FMUL S1, S9, S9
	0x03BA9924 ADRP X8, 0xFFFFFFFFFCF41000
	0x03BA9928 FADD S0, S0, S1
	0x03BA992C LDR V1, [X8 + 0x17C]
	0x03BA9930 FMUL S2, S8, S8
	0x03BA9934 FADD S0, S2, S0
	0x03BA9938 FSQRT S0, S0
	0x03BA993C FCMP S0, S1
	0x03BA9940 B.LE 0x3BA9954
	0x03BA9944 FDIV S10, S10, S0
	0x03BA9948 FDIV S13, S9, S0
	0x03BA994C FDIV S8, S8, S0
	0x03BA9950 B 0x3BA998C
	0x03BA9954 ADRP X24, 0x82F000
	0x03BA9958 LDRB W8, [X24 + 0x783]
	0x03BA995C CBNZ W8, 0x3BA9974
	0x03BA9960 ADRP X0, 0x54A000
	0x03BA9964 LDR X0, [X0 + 0x5A0]
	0x03BA9968 BL 0x1C16CF4
	0x03BA996C MOVZ W8, 0x1
	0x03BA9970 STRB W8, [X24 + 0x783]
	0x03BA9974 ADRP X8, 0x54A000
	0x03BA9978 LDR X8, [X8 + 0x5A0]
	0x03BA997C LDR X8, [X8]
	0x03BA9980 LDR X8, [X8 + 0xB8]
	0x03BA9984 LDP S10, S13, [X8]
	0x03BA9988 LDR V8, [X8 + 0x8]
	0x03BA998C LDR W8, [X21 + 0x24]
	0x03BA9990 STR S14, [X31 + 0x8]
	0x03BA9994 CMP W8, 0x1
	0x03BA9998 B.EQ 0x3BA9AC8
	0x03BA999C CMP W8, 0x2
	0x03BA99A0 B.NE 0x3BA9B8C
	0x03BA99A4 STR S8, [X31 + 0x18]
	0x03BA99A8 ADRP X24, 0x572000
	0x03BA99AC LDR X24, [X24 + 0x610]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move W23, W1
	010 Move X1, X4
	011 Move X19, X6
	012 Move X22, X5
	013 Move X25, X4
	014 Move X20, X3
	015 Move X24, X2
	016 Move X21, X0
	017 Move [X5], X31
	018 Move [X6], X31
	019 Move [X3], W31
	020 Call HandMenu.TryGetCamera, X0, X1
	021 Move W8, W0
	022 Move W0, W31
	023 Compare W23, 0
	024 JumpIfEqual {104}
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {104}
	029 Move X1, [X25]
	030 Move X2, [X21+48]
	031 Move X0, X21
	032 Move W3, W31
	033 Move X4, X24
	034 Call HandMenu.PalmMeetsRequirements, X0, X1, X2, X3, X4
	035 Move X1, [X25]
	036 Move X2, [X21+56]
	037 Move W25, W0
	038 Move W3, 1
	039 Move X0, X21
	040 Move X4, X24
	041 Call HandMenu.PalmMeetsRequirements, X0, X1, X2, X3, X4
	042 Move W8, W0
	043 Move TEMP, X25
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {52}
	047 Move W0, W31
	048 Move TEMP, X8
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {104}
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 And W8, W25, W8
	056 Move TEMP, X8
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {79}
	060 Move W8, [X21+132]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move W8, 1
	063 NotImplemented "Instruction CINC not yet implemented."
	064 Move X9, [X21+56]
	065 Move [X22], X9
	066 Add X9, X21, 176
	067 Move TEMP, X25
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {75}
	071 Move TEMP, X8
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {90}
	075 Move W0, W31
	076 Move [X22], X31
	077 Move [X19], X31
	078 Move W0, W31
	079 Move TEMP, X25
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {90}
	083 Move X8, [X21+48]
	084 Move W0, 1
	085 Move [X22], X8
	086 Move X8, [X21+168]
	087 Move [X19], X8
	088 Move [X21+132], W0
	089 Move [X20], W0
	090 Move X8, [X21+56]
	091 Move W9, 2
	092 Move [X22], X8
	093 Move X8, [X21+176]
	094 Move [X19], X8
	095 Move [X21+132], W9
	096 Move [X20], W9
	097 Move X9, [X21+48]
	098 Move [X22], X9
	099 Add X9, X21, 168
	100 Move X9, [X9]
	101 Move [X19], X9
	102 Move [X20], W8
	103 Move W0, 1
	104 Move X20, [X31+48]
	105 Move X19, [X31+56]
	106 Move X22, [X31+32]
	107 Move X21, [X31+40]
	108 Move X24, [X31+16]
	109 Move X23, [X31+24]
	110 Move X30, [X31+64]
	111 Move X25, [X31+72]
	112 Return X0

Method: System.Void GetTransformAnchorsForHandedness(UnityEngine.XR.Interaction.Toolkit.UI.BodyUI.HandMenu/MenuHandedness handedness, out UnityEngine.Transform palmAnchor, out UnityEngine.Transform palmAnchorOffset)

Disassembly:
	0x03BA9C1C FADD S0, S0, S1
	0x03BA9C20 LDR V1, [X8 + 0xF20]
	0x03BA9C24 FSUB S2, S8, S2
	0x03BA9C28 FMUL S2, S2, S2
	0x03BA9C2C FADD S0, S2, S0
	0x03BA9C30 FCMP S0, S1
	0x03BA9C34 B.PL 0x3BA9C60
	0x03BA9C38 LDR X0, [X24]
	0x03BA9C3C LDR W8, [X0 + 0xE0]
	0x03BA9C40 CBNZ W8, 0x3BA9C48
	0x03BA9C44 BL 0x1C16DFC
	0x03BA9C48 ADD X0, X31, 0x60
	0x03BA9C4C MOV X1, X31
	0x03BA9C50 BL 0x3C3DF0C
	0x03BA9C54 MOV V10.16B, V0.16B
	0x03BA9C58 MOV V13.16B, V1.16B

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move X8, [X0+48]
	004 Move [X2], X8
	005 Move X8, [X0+168]
	006 Move X8, [X0+56]
	007 Move [X2], X8
	008 Move X8, [X0+176]
	009 Move X8, X31
	010 Move [X2], X31
	011 Move [X3], X8
	012 Return 

Method: UnityEngine.Vector3 GetReferenceUpDirection(UnityEngine.Transform cameraTransform)

Disassembly:
	0x03BA99B0 MOV V8.16B, V13.16B
	0x03BA99B4 LDR X0, [X24]
	0x03BA99B8 LDR W8, [X0 + 0xE0]
	0x03BA99BC CBNZ W8, 0x3BA99C4
	0x03BA99C0 BL 0x1C16DFC
	0x03BA99C4 ADD X0, X31, 0x60
	0x03BA99C8 MOV X1, X31
	0x03BA99CC BL 0x3C3DFEC
	0x03BA99D0 ADD X0, X31, 0x40
	0x03BA99D4 MOV X1, X31
	0x03BA99D8 MOV V11.16B, V0.16B
	0x03BA99DC MOV V12.16B, V1.16B
	0x03BA99E0 MOV V13.16B, V2.16B
	0x03BA99E4 BL 0x3C3DFEC
	0x03BA99E8 MOV V3.16B, V0.16B
	0x03BA99EC MOV V4.16B, V1.16B
	0x03BA99F0 MOV V5.16B, V2.16B
	0x03BA99F4 FMOV S6, 0.5
	0x03BA99F8 MOV V0.16B, V11.16B
	0x03BA99FC MOV V1.16B, V12.16B
	0x03BA9A00 MOV V2.16B, V13.16B
	0x03BA9A04 MOV X0, X31
	0x03BA9A08 BL 0x3C28A58
	0x03BA9A0C ADD X0, X31, 0x60
	0x03BA9A10 MOV X1, X31
	0x03BA9A14 STP S1, S0, [X31 + 0xC8]
	0x03BA9A18 STR S2, [X31 + 0x1C]
	0x03BA9A1C BL 0x3C3DF7C
	0x03BA9A20 ADD X0, X31, 0x40
	0x03BA9A24 MOV X1, X31
	0x03BA9A28 MOV V11.16B, V0.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+44]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Compare W8, 0
	006 JumpIfNotEqual {26}
	007 Move X19, 0x830000
	008 Move W8, [X19+1926]
	009 Compare W8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, 0x54B000
	012 Move X0, [X0+1440]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X19+1926], W8
	016 Move X8, 0x54B000
	017 Move X8, [X8+1440]
	018 Move X8, [X8]
	019 Move X8, [X8+184]
	020 Move S0, [X8+24]
	021 Move S1, [X8+28]
	022 Move V2, [X8+32]
	023 Compare X1, 0
	024 JumpIfEqual {35}
	025 Move X0, X1
	026 Move X1, X31
	027 Call Component.get_transform, X0
	028 Compare X0, 0
	029 JumpIfEqual {35}
	030 Move X1, X31
	031 Call Transform.get_up, X0
	032 Move X30, [X31+16]
	033 Move X19, [X31+24]
	034 Return X0
	035 Call 0x1C17F20

Method: System.Boolean PalmMeetsRequirements(UnityEngine.Transform cameraTransform, UnityEngine.Transform palmAnchor, System.Boolean isRightHand, in UnityEngine.XR.Interaction.Toolkit.UI.BodyUI.FollowPreset currentPresent)

Disassembly:
	0x03BA9B0C MOV V9.16B, V1.16B
	0x03BA9B10 MOV V11.16B, V2.16B
	0x03BA9B14 CBNZ W8, 0x3BA9B2C
	0x03BA9B18 ADRP X0, 0x54A000
	0x03BA9B1C LDR X0, [X0 + 0x5A0]
	0x03BA9B20 BL 0x1C16CF4
	0x03BA9B24 MOVZ W8, 0x1
	0x03BA9B28 STRB W8, [X25 + 0x783]
	0x03BA9B2C ADRP X8, 0x54A000
	0x03BA9B30 LDR X8, [X8 + 0x5A0]
	0x03BA9B34 LDR X8, [X8]
	0x03BA9B38 LDR X8, [X8 + 0xB8]
	0x03BA9B3C LDP S0, S1, [X8]
	0x03BA9B40 LDR V2, [X8 + 0x8]
	0x03BA9B44 ADRP X8, 0xFFFFFFFFFCF40000
	0x03BA9B48 FSUB S0, S10, S0
	0x03BA9B4C FSUB S1, S13, S1
	0x03BA9B50 FMUL S0, S0, S0
	0x03BA9B54 FMUL S1, S1, S1
	0x03BA9B58 FADD S0, S0, S1
	0x03BA9B5C LDR V1, [X8 + 0xF20]
	0x03BA9B60 FSUB S2, S8, S2
	0x03BA9B64 FMUL S2, S2, S2
	0x03BA9B68 FADD S0, S2, S0
	0x03BA9B6C FCMP S0, S1
	0x03BA9B70 B.PL 0x3BA9C60
	0x03BA9B74 LDR X0, [X24]
	0x03BA9B78 LDR W8, [X0 + 0xE0]
	0x03BA9B7C CBNZ W8, 0x3BA9B84
	0x03BA9B80 BL 0x1C16DFC
	0x03BA9B84 ADD X0, X31, 0x40
	0x03BA9B88 B 0x3BA9C4C
	0x03BA9B8C ADRP X24, 0x572000
	0x03BA9B90 LDR X24, [X24 + 0x610]
	0x03BA9B94 LDR X0, [X24]
	0x03BA9B98 LDR W8, [X0 + 0xE0]
	0x03BA9B9C CBNZ W8, 0x3BA9BA4
	0x03BA9BA0 BL 0x1C16DFC
	0x03BA9BA4 ADD X0, X31, 0x60
	0x03BA9BA8 MOV X1, X31
	0x03BA9BAC BL 0x3C3DFEC
	0x03BA9BB0 ADD X0, X31, 0x60
	0x03BA9BB4 MOV X1, X31
	0x03BA9BB8 STP S1, S0, [X31 + 0xC8]
	0x03BA9BBC STR S2, [X31 + 0x1C]
	0x03BA9BC0 BL 0x3C3DF7C
	0x03BA9BC4 ADRP X25, 0x82F000
	0x03BA9BC8 LDRB W8, [X25 + 0x783]
	0x03BA9BCC MOV V12.16B, V0.16B
	0x03BA9BD0 MOV V9.16B, V1.16B
	0x03BA9BD4 MOV V11.16B, V2.16B
	0x03BA9BD8 CBNZ W8, 0x3BA9BF0
	0x03BA9BDC ADRP X0, 0x54A000
	0x03BA9BE0 LDR X0, [X0 + 0x5A0]
	0x03BA9BE4 BL 0x1C16CF4
	0x03BA9BE8 MOVZ W8, 0x1
	0x03BA9BEC STRB W8, [X25 + 0x783]
	0x03BA9BF0 ADRP X8, 0x54A000
	0x03BA9BF4 LDR X8, [X8 + 0x5A0]
	0x03BA9BF8 LDR X8, [X8]
	0x03BA9BFC LDR X8, [X8 + 0xB8]
	0x03BA9C00 LDP S0, S1, [X8]
	0x03BA9C04 LDR V2, [X8 + 0x8]
	0x03BA9C08 ADRP X8, 0xFFFFFFFFFCF40000
	0x03BA9C0C FSUB S0, S10, S0
	0x03BA9C10 FSUB S1, S13, S1
	0x03BA9C14 FMUL S0, S0, S0
	0x03BA9C18 FMUL S1, S1, S1

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X8, [X4]
	012 Compare X8, 0
	013 JumpIfEqual {54}
	014 And W9, W3, 1
	015 Move X20, X1
	016 Move X21, X0
	017 Move X0, X8
	018 Move X1, X2
	019 Move W2, W9
	020 Move X19, X4
	021 Call FollowPreset.GetReferenceAxisForTrackingAnchor, X0, X1, X2
	022 Move X0, X21
	023 Move X1, X20
	024 Move V9, V0
	025 Move V10, V1
	026 Move V8, V2
	027 Call HandMenu.GetReferenceUpDirection, X0, X1
	028 Move X8, [X19]
	029 Compare X8, 0
	030 JumpIfEqual {81}
	031 Move W9, [X8+69]
	032 Move V12, V0
	033 Move V13, V1
	034 Move V11, V2
	035 Compare W9, 0
	036 JumpIfEqual {55}
	037 Compare X20, 0
	038 JumpIfEqual {81}
	039 Move X0, X20
	040 Move X1, X31
	041 Call Transform.get_forward, X0
	042 Move X8, [X19]
	043 Compare X8, 0
	044 JumpIfEqual {81}
	045 NotImplemented "Instruction FNEG not yet implemented."
	046 Move V3, [X8+76]
	047 Multiply S0, S9, S0
	048 Multiply S1, S10, S1
	049 Subtract S0, S1, S0
	050 Multiply S1, S8, S2
	051 Subtract S0, S0, S1
	052 NotImplemented "Instruction FCMP not yet implemented."
	053 NotImplemented "Instruction CSET not yet implemented."
	054 Move W0, W31
	055 Move W9, 1
	056 Move W10, [X8+80]
	057 Compare W10, 0
	058 JumpIfEqual {67}
	059 Move V2, [X8+88]
	060 Multiply S0, S9, S12
	061 Multiply S1, S10, S13
	062 Add S0, S0, S1
	063 Multiply S1, S8, S11
	064 Add S0, S1, S0
	065 NotImplemented "Instruction FCMP not yet implemented."
	066 NotImplemented "Instruction CSET not yet implemented."
	067 Move W8, 1
	068 And W31, W8, W9
	069 NotImplemented "Instruction CSET not yet implemented."
	070 Move X20, [X31+64]
	071 Move X19, [X31+72]
	072 Move X30, [X31+48]
	073 Move X21, [X31+56]
	074 Move D9, [X31+32]
	075 Move D8, [X31+40]
	076 Move D11, [X31+16]
	077 Move D10, [X31+24]
	078 Move D13, [X31+80]
	079 Move D12, [X31+88]
	080 Return X0
	081 Call 0x1C17F20

Method: System.Boolean TryGetCamera(out UnityEngine.Transform cameraTransform)

Disassembly:
	0x03BA9A2C MOV V14.16B, V1.16B
	0x03BA9A30 MOV V15.16B, V2.16B
	0x03BA9A34 BL 0x3C3DF7C
	0x03BA9A38 MOV V3.16B, V0.16B
	0x03BA9A3C MOV V4.16B, V1.16B
	0x03BA9A40 MOV V5.16B, V2.16B
	0x03BA9A44 FMOV S6, 0.5
	0x03BA9A48 MOV V0.16B, V11.16B
	0x03BA9A4C MOV V1.16B, V14.16B
	0x03BA9A50 MOV V2.16B, V15.16B
	0x03BA9A54 MOV X0, X31
	0x03BA9A58 BL 0x3C28A58
	0x03BA9A5C ADRP X25, 0x82F000
	0x03BA9A60 LDRB W8, [X25 + 0x783]
	0x03BA9A64 MOV V12.16B, V0.16B
	0x03BA9A68 MOV V9.16B, V1.16B
	0x03BA9A6C MOV V11.16B, V2.16B
	0x03BA9A70 CBNZ W8, 0x3BA9A88
	0x03BA9A74 ADRP X0, 0x54A000
	0x03BA9A78 LDR X0, [X0 + 0x5A0]
	0x03BA9A7C BL 0x1C16CF4
	0x03BA9A80 MOVZ W8, 0x1
	0x03BA9A84 STRB W8, [X25 + 0x783]
	0x03BA9A88 ADRP X8, 0x54A000
	0x03BA9A8C LDR X8, [X8 + 0x5A0]
	0x03BA9A90 MOV V13.16B, V8.16B
	0x03BA9A94 LDR X8, [X8]
	0x03BA9A98 LDR X8, [X8 + 0xB8]
	0x03BA9A9C LDP S0, S1, [X8]
	0x03BA9AA0 LDR V2, [X8 + 0x8]
	0x03BA9AA4 ADRP X8, 0xFFFFFFFFFCF40000
	0x03BA9AA8 FSUB S0, S10, S0
	0x03BA9AAC FSUB S1, S8, S1
	0x03BA9AB0 FMUL S0, S0, S0
	0x03BA9AB4 FMUL S1, S1, S1
	0x03BA9AB8 FADD S0, S0, S1
	0x03BA9ABC LDR V1, [X8 + 0xF20]
	0x03BA9AC0 LDR V8, [X31 + 0x18]
	0x03BA9AC4 B 0x3BA9C24
	0x03BA9AC8 ADRP X24, 0x572000
	0x03BA9ACC LDR X24, [X24 + 0x610]
	0x03BA9AD0 LDR X0, [X24]
	0x03BA9AD4 LDR W8, [X0 + 0xE0]
	0x03BA9AD8 CBNZ W8, 0x3BA9AE0
	0x03BA9ADC BL 0x1C16DFC
	0x03BA9AE0 ADD X0, X31, 0x40
	0x03BA9AE4 MOV X1, X31
	0x03BA9AE8 BL 0x3C3DFEC
	0x03BA9AEC ADD X0, X31, 0x40
	0x03BA9AF0 MOV X1, X31
	0x03BA9AF4 STP S1, S0, [X31 + 0xC8]
	0x03BA9AF8 STR S2, [X31 + 0x1C]
	0x03BA9AFC BL 0x3C3DF7C
	0x03BA9B00 ADRP X25, 0x82F000
	0x03BA9B04 LDRB W8, [X25 + 0x783]
	0x03BA9B08 MOV V12.16B, V0.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x83A000
	007 Move X22, 0x54B000
	008 Move W8, [X21+3212]
	009 Move X22, [X22+1432]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x54B000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3212], W8
	021 Move X0, [X22]
	022 Move X21, [X20+120]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X21
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {54}
	035 Move X0, X31
	036 Call Camera.get_main
	037 Move X8, [X22]
	038 Move X21, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X0, X21
	045 Move X1, X31
	046 Move X2, X31
	047 Call Object.op_Equality, X0, X1
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {55}
	052 Move X0, X31
	053 Move W8, W31
	054 Move X0, [X20+120]
	055 Compare X21, 0
	056 JumpIfEqual {70}
	057 Move X0, X21
	058 Move X1, X31
	059 Call Component.get_transform, X0
	060 Move [X20+120], X0
	061 Move W8, 1
	062 Move [X19], X0
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move W0, W8
	068 Move X30, [X31+48]
	069 Return X0
	070 Call 0x1C17F20

Method: System.Single AngleToDot(System.Single angleDeg)

Disassembly:
	0x03BA86F8 FSUB S0, S0, S1
	0x03BA86FC FCMP S0, S4
	0x03BA8700 B.LE 0x3BA872C
	0x03BA8704 LDR X1, [X19 + 0xC8]

ISIL:
	001 Move X8, -51105792
	002 Move V1, [X8+260]
	003 Multiply S0, S0, S1
	004 Call 0x3EB2BD0
	005 Return V0

Method: System.Void .ctor()

Disassembly:
	0x03BA9C5C MOV V8.16B, V2.16B
	0x03BA9C60 ADRP X24, 0x82F000
	0x03BA9C64 LDRB W8, [X24 + 0xA24]
	0x03BA9C68 CBNZ W8, 0x3BA9C80
	0x03BA9C6C ADRP X0, 0x54A000
	0x03BA9C70 LDR X0, [X0 + 0x5A8]
	0x03BA9C74 BL 0x1C16CF4
	0x03BA9C78 MOVZ W8, 0x1
	0x03BA9C7C STRB W8, [X24 + 0xA24]
	0x03BA9C80 LDP S1, S0, [X31 + 0xC8]
	0x03BA9C84 LDR X0, [X22]
	0x03BA9C88 MOV V3.16B, V13.16B
	0x03BA9C8C MOV V2.16B, V10.16B
	0x03BA9C90 FMUL S0, S0, S0
	0x03BA9C94 FMUL S1, S1, S1
	0x03BA9C98 FADD S0, S0, S1
	0x03BA9C9C LDR V1, [X31 + 0x1C]
	0x03BA9CA0 LDR W8, [X0 + 0xE0]
	0x03BA9CA4 MOV V4.16B, V8.16B
	0x03BA9CA8 FMUL S15, S11, S10
	0x03BA9CAC FMUL S1, S1, S1
	0x03BA9CB0 FMUL S5, S9, S10
	0x03BA9CB4 FADD S10, S1, S0
	0x03BA9CB8 FMUL S0, S2, S2
	0x03BA9CBC FMUL S1, S3, S3
	0x03BA9CC0 FADD S0, S1, S0
	0x03BA9CC4 FMUL S1, S4, S4
	0x03BA9CC8 FMUL S13, S11, S13
	0x03BA9CCC FMUL S14, S9, S8
	0x03BA9CD0 FMUL S8, S12, S8
	0x03BA9CD4 FMUL S12, S12, S3
	0x03BA9CD8 MOV V9.16B, V2.16B
	0x03BA9CDC FADD S11, S1, S0
	0x03BA9CE0 STP S3, S4, [X31 + 0x14]
	0x03BA9CE4 CBNZ W8, 0x3BA9CF4
	0x03BA9CE8 STR S5, [X31 + 0x4]
	0x03BA9CEC BL 0x1C16DFC
	0x03BA9CF0 LDR V5, [X31 + 0x4]
	0x03BA9CF4 ADRP X8, 0xFFFFFFFFFCF40000
	0x03BA9CF8 LDR V1, [X8 + 0xFE8]
	0x03BA9CFC FSUB S13, S13, S14
	0x03BA9D00 FSUB S14, S8, S15
	0x03BA9D04 FSUB S15, S5, S12
	0x03BA9D08 LDR V12, [X31 + 0x10]
	0x03BA9D0C FMUL S0, S10, S11
	0x03BA9D10 FSQRT S0, S0
	0x03BA9D14 FCMP S0, S1
	0x03BA9D18 FMOV S1, W31
	0x03BA9D1C B.MI 0x3BA9D80
	0x03BA9D20 LDP S3, S1, [X31 + 0xC8]
	0x03BA9D24 LDR V2, [X31 + 0x14]
	0x03BA9D28 LDR X0, [X22]
	0x03BA9D2C FMUL S1, S1, S9
	0x03BA9D30 FMUL S2, S3, S2
	0x03BA9D34 LDP S3, S4, [X31 + 0x18]
	0x03BA9D38 FADD S1, S2, S1
	0x03BA9D3C LDR W8, [X0 + 0xE0]
	0x03BA9D40 FMOV S2, -1
	0x03BA9D44 FMUL S3, S4, S3
	0x03BA9D48 FADD S1, S3, S1
	0x03BA9D4C FDIV S0, S1, S0
	0x03BA9D50 FMOV S1, 1
	0x03BA9D54 FMIN S1, S0, S1
	0x03BA9D58 FCMP S0, S2
	0x03BA9D5C FCSEL S8, S1, S2, PL
	0x03BA9D60 CBNZ W8, 0x3BA9D68
	0x03BA9D64 BL 0x1C16DFC
	0x03BA9D68 FCVT S0, S8
	0x03BA9D6C BL 0x3EB1B80
	0x03BA9D70 ADRP X8, 0xFFFFFFFFFCF41000
	0x03BA9D74 LDR V1, [X8 + 0x448]
	0x00000000 INVALID
	0x03BA9D7C FMUL S1, S0, S1
	0x03BA9D80 MOVZ W8, 0x43340000
	0x03BA9D84 FMOV S0, W8
	0x03BA9D88 FDIV S2, S1, S0
	0x03BA9D8C FRINTM S2, S2
	0x03BA9D90 FMUL S2, S2, S0
	0x03BA9D94 MOVZ W8, 0xC2B40000
	0x03BA9D98 FSUB S1, S1, S2
	0x03BA9D9C FMOV S2, W8
	0x03BA9DA0 FMIN S0, S1, S0
	0x03BA9DA4 FCMP S1, 0x0
	0x03BA9DA8 FADD S0, S0, S2
	0x03BA9DAC FCSEL S0, S0, S2, PL
	0x03BA9DB0 MOVZ W8, 0x42B40000
	0x03BA9DB4 LDP S4, S3, [X31 + 0xC8]
	0x03BA9DB8 LDR V5, [X31 + 0x1C]
	0x03BA9DBC FABS S0, S0
	0x03BA9DC0 FMOV S1, W8
	0x03BA9DC4 FSUB S0, S1, S0
	0x03BA9DC8 FDIV S6, S0, S1
	0x03BA9DCC MOV V0.16B, V13.16B
	0x03BA9DD0 MOV V1.16B, V14.16B
	0x03BA9DD4 MOV V2.16B, V15.16B
	0x03BA9DD8 MOV X0, X31
	0x03BA9DDC BL 0x3C28A58
	0x03BA9DE0 LDP S7, S16, [X31 + 0x14]
	0x03BA9DE4 MOV X0, X31
	0x03BA9DE8 FMUL S3, S16, S1
	0x03BA9DEC FMUL S4, S7, S2
	0x03BA9DF0 FMUL S2, S9, S2
	0x03BA9DF4 FMUL S5, S16, S0
	0x03BA9DF8 FMUL S0, S7, S0
	0x03BA9DFC FMUL S1, S9, S1
	0x03BA9E00 FSUB S2, S2, S5
	0x03BA9E04 FSUB S0, S0, S1
	0x03BA9E08 FSUB S3, S3, S4
	0x03BA9E0C FMUL S1, S7, S0
	0x03BA9E10 FMUL S5, S16, S2
	0x03BA9E14 LDP S4, S6, [X21 + 0x44]
	0x03BA9E18 FSUB S1, S1, S5
	0x03BA9E1C FMUL S5, S16, S3
	0x03BA9E20 FMUL S0, S9, S0
	0x03BA9E24 FSUB S0, S5, S0
	0x03BA9E28 LDR V5, [X21 + 0x4C]
	0x03BA9E2C FMUL S2, S9, S2
	0x03BA9E30 FMUL S3, S7, S3
	0x03BA9E34 FSUB S2, S2, S3
	0x03BA9E38 FMUL S3, S4, S1
	0x03BA9E3C FMUL S4, S6, S0

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X23, 0x83A000
	011 Move X20, 0x5B4000
	012 Move X26, 0x5B4000
	013 Move X22, 0x5B4000
	014 Move X21, 0x5B2000
	015 Move W8, [X23+3213]
	016 Move X20, [X20+2112]
	017 Move X26, [X26+3520]
	018 Move X22, [X22+3528]
	019 Move X21, [X21+2696]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {45}
	025 Move X0, 0x5B4000
	026 Move X0, [X0+3536]
	027 Call 0x1C17CF4
	028 Move X0, 0x5B4000
	029 Move X0, [X0+3544]
	030 Call 0x1C17CF4
	031 Move X0, 0x5B2000
	032 Move X0, [X0+2696]
	033 Call 0x1C17CF4
	034 Move X0, 0x5B4000
	035 Move X0, [X0+3520]
	036 Call 0x1C17CF4
	037 Move X0, 0x5B4000
	038 Move X0, [X0+2112]
	039 Call 0x1C17CF4
	040 Move X0, 0x5B4000
	041 Move X0, [X0+3528]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X23+3213], W8
	045 Move X8, -51097600
	046 Move X9, -51093504
	047 Move V0, [X8+1944]
	048 Move V1, [X9+1248]
	049 Move W10, 0x3F800000
	050 Move W25, 1
	051 Move W11, 0x420C0000
	052 Move [X19+72], W10
	053 Move [X19+76], W25
	054 Move [X19+40], D0
	055 Move [X19+64], D1
	056 Move [X19+80], W11
	057 Move X0, [X20]
	058 Move X24, 0x5B4000
	059 Move X23, 0x5B4000
	060 Move X24, [X24+3544]
	061 Move X23, [X23+3536]
	062 Call 0x1C17F10
	063 Move X8, -51109888
	064 Move X9, -51109888
	065 Move V0, [X8+816]
	066 Move V1, [X9+1100]
	067 Move S2, 3
	068 Move X1, X31
	069 Move X20, X0
	070 Call SmartFollowVector3TweenableVariable..ctor, X0, V0, V1, V2
	071 Move [X19+88], X20
	072 Move X0, [X26]
	073 Call 0x1C17F10
	074 Move X1, X31
	075 Move X20, X0
	076 Call QuaternionTweenableVariable..ctor, X0
	077 Move [X19+96], X20
	078 Move X0, [X22]
	079 Call 0x1C17F10
	080 Move X1, X31
	081 Move X20, X0
	082 Call Vector3TweenableVariable..ctor, X0
	083 Move [X19+104], X20
	084 Move X0, [X21]
	085 Call 0x1C17F10
	086 Move X1, X31
	087 Move X20, X0
	088 Call BindingsGroup..ctor, X0
	089 Move W8, 0x999A
	090 NotImplemented "Instruction MOVK not yet implemented."
	091 Move [X19+112], X20
	092 Move [X19+128], W25
	093 Move [X19+132], W25
	094 Move [X19+136], W25
	095 Move [X19+140], W8
	096 Move X20, 0x830000
	097 Move W8, [X20+2139]
	098 Compare W8, 0
	099 JumpIfNotEqual {104}
	100 Move X0, 0x54B000
	101 Move X0, [X0+1440]
	102 Call 0x1C17CF4
	103 Move [X20+2139], W25
	104 Move X8, 0x54B000
	105 Move X8, [X8+1440]
	106 Move X8, [X8]
	107 Move X8, [X8+184]
	108 NotImplemented "Instruction LDUR not yet implemented."
	109 Move V1, [X8+20]
	110 Move [X19+224], D0
	111 Move [X19+232], S1
	112 Move X0, [X24]
	113 Call 0x1C17F10
	114 Move X5, [X23]
	115 Move W2, 1
	116 Move W1, W31
	117 Move X3, X31
	118 Move W4, W31
	119 Move X20, X0
	120 Call BindableVariable`1<Boolean>..ctor, X0, X1, X2, X3, X4
	121 Move [X19+240], X20
	122 Move X0, X19
	123 Move X20, [X31+64]
	124 Move X19, [X31+72]
	125 Move X22, [X31+48]
	126 Move X21, [X31+56]
	127 Move X24, [X31+32]
	128 Move X23, [X31+40]
	129 Move X26, [X31+16]
	130 Move X25, [X31+24]
	131 Move X1, X31
	132 Move X30, [X31+80]
	133 Call MonoBehaviour..ctor, X0
	134 Return 

Method: System.Void <OnEnable>b__72_0(Unity.Mathematics.float3 newPosition)

Disassembly:
	0x03BA9E40 FMUL S5, S5, S2
	0x03BA9E44 FADD S3, S3, S4
	0x03BA9E48 FADD S3, S5, S3
	0x03BA9E4C FNEG S6, S1
	0x03BA9E50 FNEG S4, S0
	0x03BA9E54 FNEG S5, S2
	0x03BA9E58 FCMP S3, 0x0
	0x03BA9E5C FCSEL S5, S2, S5, HI
	0x03BA9E60 FCSEL S4, S0, S4, HI
	0x03BA9E64 FCSEL S3, S1, S6, HI
	0x03BA9E68 MOV V0.16B, V9.16B
	0x03BA9E6C MOV V1.16B, V7.16B
	0x03BA9E70 MOV V2.16B, V16.16B
	0x03BA9E74 STP S3, S4, [X21 + 0x44]
	0x03BA9E78 STR S5, [X21 + 0x4C]
	0x03BA9E7C BL 0x3C2A810
	0x03BA9E80 MOV V11.16B, V3.16B
	0x03BA9E84 LDP S15, S3, [X31 + 0x8]
	0x03BA9E88 STP S1, S2, [X21 + 0x38]
	0x03BA9E8C STR S11, [X21 + 0x40]
	0x03BA9E90 STP S3, S12, [X21 + 0x28]
	0x03BA9E94 STP S15, S0, [X21 + 0x30]
	0x03BA9E98 LDRB W8, [X20 + 0x20C]
	0x03BA9E9C CBZ W8, 0x3BA9F74

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X0, [X0+32]
	007 Compare X0, 0
	008 JumpIfEqual {31}
	009 Move X1, X31
	010 Move V8, V2
	011 Move V9, V1
	012 Move V10, V0
	013 Call GameObject.get_transform, X0
	014 Move X19, X0
	015 Move V0, V10
	016 Move V1, V9
	017 Move V2, V8
	018 Move X0, X31
	019 Call float3.op_Implicit, X0
	020 Compare X19, 0
	021 JumpIfEqual {31}
	022 Move X0, X19
	023 Move X30, [X31+32]
	024 Move X19, [X31+40]
	025 Move D9, [X31+16]
	026 Move D8, [X31+24]
	027 Move X1, X31
	028 Move V10, [X31+48]
	029 Call Transform.set_position, X0, X1
	030 Return 
	031 Call 0x1C17F20

Method: System.Void <OnEnable>b__72_1(UnityEngine.Quaternion newRot)

Disassembly:
	0x03BA9EA0 LDR W21, [X21 + 0x24]
	0x03BA9EA4 MOV V8.16B, V0.16B
	0x03BA9EA8 MOV V9.16B, V1.16B
	0x03BA9EAC MOV V10.16B, V2.16B
	0x03BA9EB0 CMP W21, 0x2
	0x03BA9EB4 B.CS 0x3BA9F80
	0x03BA9EB8 MOV X0, X20
	0x03BA9EBC MOV X1, X31
	0x03BA9EC0 BL 0x3B3A784
	0x03BA9EC4 CBZ X0, 0x3BA9FC0
	0x03BA9EC8 LDR X2, [X23]
	0x03BA9ECC CMP W21, 0x0
	0x03BA9ED0 CSET W1, NE
	0x03BA9ED4 BL 0x301BCCC
	0x03BA9ED8 LDR X8, [X20]
	0x03BA9EDC MOV X1, X0
	0x03BA9EE0 MOV X0, X20
	0x03BA9EE4 LDR X9, [X8 + 0x5A8]
	0x03BA9EE8 LDR X2, [X8 + 0x5B0]
	0x03BA9EEC BLR X9
	0x03BA9EF0 MOV X21, X0
	0x03BA9EF4 MOV X0, X20

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move X0, [X0+32]
	007 Compare X0, 0
	008 JumpIfEqual {29}
	009 Move X1, X31
	010 Move V8, V3
	011 Move V9, V2
	012 Move V10, V1
	013 Move V11, V0
	014 Call GameObject.get_transform, X0
	015 Compare X0, 0
	016 JumpIfEqual {29}
	017 Move V2, V9
	018 Move V3, V8
	019 Move X30, [X31+32]
	020 Move D9, [X31+16]
	021 Move D8, [X31+24]
	022 Move V0, V11
	023 Move V1, V10
	024 Move X1, X31
	025 Move D11, [X31+48]
	026 Move D10, [X31+56]
	027 Call Transform.set_rotation, X0, X1
	028 Return 
	029 Call 0x1C17F20

Method: System.Void <OnEnable>b__72_2(Unity.Mathematics.float3 value)

Disassembly:
	0x03BA9EF8 MOV X1, X31
	0x03BA9EFC BL 0x3C32E90
	0x03BA9F00 ADD X8, X31, 0x20
	0x03BA9F04 MOV X1, X31
	0x03BA9F08 BL 0x3B24724
	0x03BA9F0C CBZ X21, 0x3BA9FC0
	0x03BA9F10 LDP S12, S13, [X31 + 0x20]
	0x03BA9F14 LDR V14, [X31 + 0x28]
	0x03BA9F18 MOV X0, X21
	0x03BA9F1C MOV X1, X31
	0x03BA9F20 BL 0x3C3F58C
	0x03BA9F24 FSUB S0, S12, S0
	0x03BA9F28 FSUB S1, S13, S1
	0x03BA9F2C FSUB S2, S14, S2
	0x03BA9F30 MOV X0, X21
	0x03BA9F34 MOV X1, X31
	0x03BA9F38 BL 0x3C408CC
	0x03BA9F3C MOV V4.16B, V0.16B
	0x03BA9F40 MOV V5.16B, V1.16B
	0x03BA9F44 MOV V6.16B, V2.16B
	0x03BA9F48 MOV V0.16B, V8.16B
	0x03BA9F4C MOV V1.16B, V9.16B
	0x03BA9F50 MOV V2.16B, V10.16B
	0x03BA9F54 MOV V3.16B, V11.16B

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X0, [X0+32]
	007 Compare X0, 0
	008 JumpIfEqual {31}
	009 Move X1, X31
	010 Move V8, V2
	011 Move V9, V1
	012 Move V10, V0
	013 Call GameObject.get_transform, X0
	014 Move X19, X0
	015 Move V0, V10
	016 Move V1, V9
	017 Move V2, V8
	018 Move X0, X31
	019 Call float3.op_Implicit, X0
	020 Compare X19, 0
	021 JumpIfEqual {31}
	022 Move X0, X19
	023 Move X30, [X31+32]
	024 Move X19, [X31+40]
	025 Move D9, [X31+16]
	026 Move D8, [X31+24]
	027 Move X1, X31
	028 Move V10, [X31+48]
	029 Call Transform.set_localScale, X0, X1
	030 Return 
	031 Call 0x1C17F20

Method: System.Void <OnEnable>b__72_3(System.Boolean value)

Disassembly:
	0x03BA9F58 MOV X0, X31
	0x03BA9F5C BL 0x3C2A9FC
	0x03BA9F60 LDP S3, S12, [X31 + 0xC]

ISIL:
	001 Move TEMP, X1
	002 And TEMP, TEMP, 1
	003 Compare TEMP, 1
	004 JumpIfNotEqual {7}
	005 Call HandMenu.ShowMenu, X0
	006 Return 
	007 Call HandMenu.HideMenu, X0
	008 Return 

