Type: UnityEngine.XR.Interaction.Toolkit.UI.BodyUI.FollowPreset

Method: System.Single get_palmFacingUserDotThreshold()

Disassembly:
	0x03BA8134 LDP X20, X19, [X31 + 0x50]
	0x03BA8138 LDP X30, X21, [X31 + 0x40]

ISIL:
	001 Move V0, [X0+76]
	002 Return V0

Method: System.Single get_palmFacingUpDotThreshold()

Disassembly:
	0x03BA813C LDP D9, D8, [X31 + 0x30]
	0x03BA8140 LDP D11, D10, [X31 + 0x20]

ISIL:
	001 Move V0, [X0+88]
	002 Return V0

Method: System.Single get_snapToGazeDotThreshold()

Disassembly:
	0x03BA8144 LDP D13, D12, [X31 + 0x10]
	0x03BA8148 LDR V14, [X31], #0x60

ISIL:
	001 Move V0, [X0+100]
	002 Return V0

Method: System.Void ApplyPreset(UnityEngine.Transform leftTrackingOffset, UnityEngine.Transform rightTrackingOffset)

Disassembly:
	0x03BA814C RET
	0x03BA8150 BL 0x1C16F20
	0x03BA8154 STR D14, [X31 - 0x60]!
	0x03BA8158 STP D13, D12, [X31 + 0x10]
	0x03BA815C STP D11, D10, [X31 + 0x20]
	0x03BA8160 STP D9, D8, [X31 + 0x30]
	0x03BA8164 STP X30, X21, [X31 + 0x40]
	0x03BA8168 STP X20, X19, [X31 + 0x50]
	0x03BA816C ADRP X20, 0x83A000
	0x03BA8170 LDRB W8, [X20 + 0xC8A]
	0x03BA8174 MOV X19, X0
	0x03BA8178 TBNZ X8, 0x0, 0x3BA81B4
	0x03BA817C ADRP X0, 0x54C000
	0x03BA8180 LDR X0, [X0 + 0xE70]
	0x03BA8184 BL 0x1C16CF4
	0x03BA8188 ADRP X0, 0x5B4000
	0x03BA818C LDR X0, [X0 + 0xDB8]
	0x03BA8190 BL 0x1C16CF4
	0x03BA8194 ADRP X0, 0x5B4000
	0x03BA8198 LDR X0, [X0 + 0x5C8]
	0x03BA819C BL 0x1C16CF4
	0x03BA81A0 ADRP X0, 0x5B4000
	0x03BA81A4 LDR X0, [X0 + 0xDB0]
	0x03BA81A8 BL 0x1C16CF4
	0x03BA81AC MOVZ W8, 0x1
	0x03BA81B0 STRB W8, [X20 + 0xC8A]
	0x03BA81B4 LDR X1, [X19 + 0xC0]
	0x03BA81B8 CBZ X1, 0x3BA81CC
	0x03BA81BC MOV X0, X19
	0x03BA81C0 MOV X2, X31
	0x03BA81C4 BL 0x3C36968
	0x03BA81C8 STR X31, [X19 + 0xC0]
	0x03BA81CC LDRB W8, [X19 + 0x88]
	0x03BA81D0 CBZ W8, 0x3BA81DC
	0x03BA81D4 LDR X8, [X19 + 0xB8]
	0x03BA81D8 CBZ X8, 0x3BA81FC
	0x03BA81DC MOV X0, X19
	0x03BA81E0 LDP X20, X19, [X31 + 0x50]
	0x03BA81E4 LDP X30, X21, [X31 + 0x40]
	0x03BA81E8 LDP D9, D8, [X31 + 0x30]
	0x03BA81EC LDP D11, D10, [X31 + 0x20]
	0x03BA81F0 LDP D13, D12, [X31 + 0x10]
	0x03BA81F4 LDR V14, [X31], #0x60
	0x03BA81F8 B 0x3BA8308
	0x03BA81FC LDR X20, [X19 + 0x68]
	0x03BA8200 CBZ X20, 0x3BA8304
	0x03BA8204 ADRP X8, 0x5B4000
	0x03BA8208 LDR X8, [X8 + 0x5C8]
	0x03BA820C MOV X0, X20
	0x03BA8210 LDR X1, [X8]
	0x03BA8214 BL 0x270B578
	0x03BA8218 ADRP X21, 0x830000
	0x03BA821C LDRB W8, [X21 + 0x783]
	0x03BA8220 MOV V8.16B, V0.16B
	0x03BA8224 MOV V9.16B, V1.16B
	0x03BA8228 MOV V10.16B, V2.16B
	0x03BA822C CBNZ W8, 0x3BA8244
	0x03BA8230 ADRP X0, 0x54B000
	0x03BA8234 LDR X0, [X0 + 0x5A0]
	0x03BA8238 BL 0x1C16CF4
	0x03BA823C MOVZ W8, 0x1
	0x03BA8240 STRB W8, [X21 + 0x783]
	0x03BA8244 ADRP X8, 0x54B000
	0x03BA8248 LDR X8, [X8 + 0x5A0]
	0x03BA824C MOV X0, X31
	0x03BA8250 LDR X8, [X8]
	0x03BA8254 LDR X8, [X8 + 0xB8]
	0x03BA8258 LDP S0, S1, [X8]
	0x03BA825C LDR V2, [X8 + 0x8]
	0x03BA8260 BL 0x3887BE4
	0x03BA8264 ADRP X8, 0x54C000
	0x03BA8268 LDR V13, [X19 + 0x8C]
	0x03BA826C LDR X8, [X8 + 0xE70]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X1, 0
	007 JumpIfEqual {87}
	008 Move X21, X1
	009 Move X19, X0
	010 Move X0, X1
	011 Move X1, X31
	012 Move X20, X2
	013 Call Component.get_transform, X0
	014 Compare X0, 0
	015 JumpIfEqual {87}
	016 Move S1, [X19+32]
	017 Move S2, [X19+36]
	018 Move V0, [X19+28]
	019 Move X1, X31
	020 Call Transform.set_localPosition, X0, X1
	021 Move X0, X21
	022 Move X1, X31
	023 Call Component.get_transform, X0
	024 Move X8, -51105792
	025 Move V8, [X8+260]
	026 Move S0, [X19+52]
	027 Move S1, [X19+56]
	028 Move V2, [X19+60]
	029 Move X21, X0
	030 Move X0, X31
	031 Multiply S0, S0, S8
	032 Multiply S1, S1, S8
	033 Multiply S2, S2, S8
	034 Call Quaternion.Internal_FromEulerRad, X0
	035 Compare X21, 0
	036 JumpIfEqual {87}
	037 Move X0, X21
	038 Move X1, X31
	039 Call Transform.set_localRotation, X0, X1
	040 Compare X20, 0
	041 JumpIfEqual {87}
	042 Move X0, X20
	043 Move X1, X31
	044 Call Component.get_transform, X0
	045 Compare X0, 0
	046 JumpIfEqual {87}
	047 Move S1, [X19+20]
	048 Move S2, [X19+24]
	049 Move V0, [X19+16]
	050 Move X1, X31
	051 Call Transform.set_localPosition, X0, X1
	052 Move X0, X20
	053 Move X1, X31
	054 Call Component.get_transform, X0
	055 Move S0, [X19+40]
	056 Move S1, [X19+44]
	057 Move V2, [X19+48]
	058 Move X20, X0
	059 Move X0, X31
	060 Multiply S0, S0, S8
	061 Multiply S1, S1, S8
	062 Multiply S2, S2, S8
	063 Call Quaternion.Internal_FromEulerRad, X0
	064 Compare X20, 0
	065 JumpIfEqual {87}
	066 Move X0, X20
	067 Move X1, X31
	068 Call Transform.set_localRotation, X0, X1
	069 Move V0, [X19+72]
	070 Multiply S0, S0, S8
	071 Call 0x3EB2BD0
	072 Move V1, [X19+84]
	073 Move [X19+76], S0
	074 Multiply S0, S1, S8
	075 Call 0x3EB2BD0
	076 Move V1, [X19+96]
	077 Move [X19+88], S0
	078 Multiply S0, S1, S8
	079 Call 0x3EB2BD0
	080 Move [X19+100], S0
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X30, [X31+16]
	084 Move X21, [X31+24]
	085 Move V8, [X31+48]
	086 Return 
	087 Call 0x1C17F20

Method: System.Void ComputeDotProductThresholds()

Disassembly:
	0x03BA8270 MOV V11.16B, V0.16B
	0x03BA8274 MOV V12.16B, V1.16B
	0x03BA8278 MOV V14.16B, V2.16B
	0x03BA827C LDR X0, [X8]
	0x03BA8280 BL 0x1C16F10
	0x03BA8284 ADRP X8, 0x5B4000
	0x03BA8288 LDR X8, [X8 + 0xDB8]
	0x03BA828C MOV X1, X19
	0x03BA8290 MOV X3, X31
	0x03BA8294 MOV X21, X0
	0x03BA8298 LDR X2, [X8]
	0x03BA829C BL 0x3314368
	0x03BA82A0 ADRP X8, 0x5B4000
	0x03BA82A4 LDR X8, [X8 + 0xDB0]
	0x03BA82A8 MOV X0, X20
	0x03BA82AC MOV V0.16B, V8.16B
	0x03BA82B0 MOV V1.16B, V9.16B
	0x03BA82B4 LDR X2, [X8]
	0x03BA82B8 MOV V2.16B, V10.16B
	0x03BA82BC MOV V3.16B, V11.16B

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X8, -51105792
	005 Move V0, [X0+72]
	006 Move V8, [X8+260]
	007 Move X19, X0
	008 Multiply S0, S0, S8
	009 Call 0x3EB2BD0
	010 Move V1, [X19+84]
	011 Move [X19+76], S0
	012 Multiply S0, S1, S8
	013 Call 0x3EB2BD0
	014 Move V1, [X19+96]
	015 Move [X19+88], S0
	016 Multiply S0, S1, S8
	017 Call 0x3EB2BD0
	018 Move [X19+100], S0
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Move V8, [X31+32]
	022 Return 

Method: System.Single AngleToDot(System.Single angleDeg)

Disassembly:
	0x03BA82C0 MOV V4.16B, V12.16B
	0x03BA82C4 MOV V5.16B, V14.16B
	0x03BA82C8 MOV V6.16B, V13.16B
	0x03BA82CC MOV X1, X21

ISIL:
	001 Move X8, -51105792
	002 Move V1, [X8+260]
	003 Multiply S0, S0, S1
	004 Call 0x3EB2BD0
	005 Return V0

Method: UnityEngine.Vector3 GetReferenceAxisForTrackingAnchor(UnityEngine.Transform trackingRoot, System.Boolean isRightHand)

Disassembly:
	0x03BA82D0 BL 0x270D704
	0x03BA82D4 MOV X1, X0
	0x03BA82D8 MOV X0, X19
	0x03BA82DC MOV X2, X31
	0x03BA82E0 BL 0x3C366FC
	0x03BA82E4 STR X0, [X19 + 0xB8]
	0x03BA82E8 LDP X20, X19, [X31 + 0x50]
	0x03BA82EC LDP X30, X21, [X31 + 0x40]
	0x03BA82F0 LDP D9, D8, [X31 + 0x30]
	0x03BA82F4 LDP D11, D10, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X1
	004 And W1, W2, 1
	005 Call FollowPreset.GetLocalAxis, X0, X1
	006 Compare X19, 0
	007 JumpIfEqual {14}
	008 Move X0, X19
	009 Move X1, X31
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Call Transform.TransformDirection, X0, X1
	013 Return X0
	014 Call 0x1C17F20

Method: UnityEngine.Vector3 GetLocalAxis(System.Boolean isRightHand)

Disassembly:
	0x03BA82F8 LDP D13, D12, [X31 + 0x10]
	0x03BA82FC LDR V14, [X31], #0x60
	0x03BA8300 RET
	0x03BA8304 BL 0x1C16F20
	0x03BA8308 STP X30, X19, [X31 - 0x10]!
	0x03BA830C MOV X19, X0
	0x03BA8310 LDR X0, [X0 + 0x20]
	0x03BA8314 CBZ X0, 0x3BA8338
	0x03BA8318 MOV W1, W31
	0x03BA831C MOV X2, X31
	0x03BA8320 BL 0x3C357B4
	0x03BA8324 MOVZ W8, 0x1
	0x03BA8328 STRB W8, [X19 + 0x80]
	0x03BA832C STR X31, [X19 + 0xB8]
	0x03BA8330 LDP X30, X19, [X31], #0x10
	0x03BA8334 RET
	0x03BA8338 BL 0x1C16F20
	0x03BA833C SUB X31, X31, 0xC0
	0x03BA8340 STP D13, D12, [X31 + 0x60]
	0x03BA8344 STP D11, D10, [X31 + 0x70]
	0x03BA8348 STP D9, D8, [X31 + 0x80]
	0x03BA834C STP X30, X23, [X31 + 0x90]
	0x03BA8350 STP X22, X21, [X31 + 0xA0]
	0x03BA8354 STP X20, X19, [X31 + 0xB0]
	0x03BA8358 ADRP X20, 0x83A000
	0x03BA835C LDRB W8, [X20 + 0xC8B]
	0x03BA8360 MOV X19, X0
	0x03BA8364 TBNZ X8, 0x0, 0x3BA83B8
	0x03BA8368 ADRP X0, 0x5B4000
	0x03BA836C LDR X0, [X0 + 0xD40]
	0x03BA8370 BL 0x1C16CF4
	0x03BA8374 ADRP X0, 0x54B000
	0x03BA8378 LDR X0, [X0 + 0x598]
	0x03BA837C BL 0x1C16CF4
	0x03BA8380 ADRP X0, 0x5B4000
	0x03BA8384 LDR X0, [X0 + 0x598]
	0x03BA8388 BL 0x1C16CF4
	0x03BA838C ADRP X0, 0x5B4000
	0x03BA8390 LDR X0, [X0 + 0x5E8]
	0x03BA8394 BL 0x1C16CF4
	0x03BA8398 ADRP X0, 0x5B4000
	0x03BA839C LDR X0, [X0 + 0x5D8]
	0x03BA83A0 BL 0x1C16CF4
	0x03BA83A4 ADRP X0, 0x5B4000
	0x03BA83A8 LDR X0, [X0 + 0x588]
	0x03BA83AC BL 0x1C16CF4
	0x03BA83B0 MOVZ W8, 0x1
	0x03BA83B4 STRB W8, [X20 + 0xC8B]
	0x03BA83B8 STR W31, [X31 + 0x54]
	0x03BA83BC STP X31, X31, [X31 + 0x40]
	0x03BA83C0 STR X31, [X31 + 0x38]
	0x03BA83C4 STR W31, [X31 + 0x30]
	0x03BA83C8 STP X31, X31, [X31 + 0x20]
	0x03BA83CC STR X31, [X31 + 0x18]
	0x03BA83D0 STR W31, [X31 + 0x10]
	0x03BA83D4 STR X31, [X31 + 0x8]
	0x03BA83D8 LDR W8, [X19 + 0xA0]
	0x03BA83DC CBZ W8, 0x3BA84EC
	0x03BA83E0 MOV X0, X19
	0x03BA83E4 BL 0x3BA7F68
	0x03BA83E8 STR X0, [X31 + 0x58]
	0x03BA83EC LDR W1, [X19 + 0x28]
	0x03BA83F0 MOV X20, X0
	0x03BA83F4 ADD X2, X31, 0x58
	0x03BA83F8 ADD X3, X31, 0x54
	0x03BA83FC ADD X4, X31, 0x48
	0x03BA8400 ADD X5, X31, 0x40
	0x03BA8404 ADD X6, X31, 0x38
	0x03BA8408 MOV X0, X19
	0x03BA840C BL 0x3BA8840
	0x03BA8410 MOV W21, W0
	0x03BA8414 TBZ X0, 0x0, 0x3BA850C
	0x03BA8418 LDR X9, [X31 + 0x48]
	0x03BA841C LDR X8, [X31 + 0x40]
	0x03BA8420 MOV X0, X31
	0x03BA8424 STP X9, X8, [X19 + 0xC8]
	0x03BA8428 LDR X8, [X31 + 0x38]
	0x03BA842C STR X8, [X19 + 0xD8]
	0x03BA8430 BL 0x3C3C764
	0x03BA8434 STR S0, [X19 + 0xF8]
	0x03BA8438 LDR X0, [X19 + 0xD8]
	0x03BA843C CBZ X0, 0x3BA883C
	0x03BA8440 MOV X1, X31
	0x03BA8444 BL 0x3C3F58C
	0x03BA8448 LDR X0, [X19 + 0xC8]
	0x03BA844C CBZ X0, 0x3BA883C
	0x03BA8450 MOV X1, X31
	0x03BA8454 MOV V8.16B, V0.16B
	0x03BA8458 MOV V9.16B, V1.16B
	0x03BA845C MOV V10.16B, V2.16B
	0x03BA8460 BL 0x3C3F58C
	0x03BA8464 ADRP X22, 0x830000
	0x03BA8468 LDRB W8, [X22 + 0x785]
	0x03BA846C MOV V11.16B, V0.16B
	0x03BA8470 MOV V12.16B, V1.16B
	0x03BA8474 MOV V13.16B, V2.16B
	0x03BA8478 CBNZ W8, 0x3BA8490
	0x03BA847C ADRP X0, 0x54B000
	0x03BA8480 LDR X0, [X0 + 0x5A8]
	0x03BA8484 BL 0x1C16CF4
	0x03BA8488 MOVZ W8, 0x1
	0x03BA848C STRB W8, [X22 + 0x785]
	0x03BA8490 ADRP X8, 0x54B000
	0x03BA8494 LDR X8, [X8 + 0x5A8]
	0x03BA8498 FSUB S11, S8, S11
	0x03BA849C FSUB S9, S9, S12
	0x03BA84A0 FSUB S8, S10, S13
	0x03BA84A4 LDR X0, [X8]
	0x03BA84A8 LDR W8, [X0 + 0xE0]
	0x03BA84AC CBNZ W8, 0x3BA84B4
	0x03BA84B0 BL 0x1C16DFC
	0x03BA84B4 FMUL S0, S11, S11
	0x03BA84B8 FMUL S1, S9, S9
	0x03BA84BC ADRP X8, 0xFFFFFFFFFCF42000
	0x03BA84C0 FADD S0, S0, S1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x831000
	006 Move W8, [X19+1923]
	007 Move W21, W1
	008 Move X20, X0
	009 Compare W8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, 0x54C000
	012 Move X0, [X0+1440]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X19+1923], W8
	016 Move X19, 0x54C000
	017 Move X19, [X19+1440]
	018 Move X8, [X19]
	019 Move TEMP, X21
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {24}
	023 Move W9, [X20+68]
	024 Move W9, W31
	025 Move W10, [X20+64]
	026 Move X8, [X8+184]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X11, -50397184
	029 Add X11, X11, 3497
	030 NotImplemented "Instruction ADR not yet implemented."
	031 Move W13, [X11]
	032 Add X12, X12, X13
	033 CallNoReturn X12
	034 Compare W9, 0
	035 JumpIfEqual {80}
	036 Move X20, 0x831000
	037 Move W9, [X20+2927]
	038 Compare W9, 0
	039 JumpIfNotEqual {46}
	040 Move X0, X19
	041 Call 0x1C17CF4
	042 Move X8, [X19]
	043 Move W9, 1
	044 Move [X20+2927], W9
	045 Move X8, [X8+184]
	046 Add X9, X8, 48
	047 Add X8, X8, 56
	048 Move V0, [X8]
	049 Move V2, [X8+8]
	050 Compare W9, 0
	051 JumpIfEqual {94}
	052 Move X20, 0x831000
	053 Move W9, [X20+2749]
	054 Compare W9, 0
	055 JumpIfNotEqual {62}
	056 Move X0, X19
	057 Call 0x1C17CF4
	058 Move X8, [X19]
	059 Move W9, 1
	060 Move [X20+2749], W9
	061 Move X8, [X8+184]
	062 Add X9, X8, 36
	063 Add X8, X8, 44
	064 Compare W9, 0
	065 JumpIfEqual {108}
	066 Move X20, 0x831000
	067 Move W9, [X20+3550]
	068 Compare W9, 0
	069 JumpIfNotEqual {76}
	070 Move X0, X19
	071 Call 0x1C17CF4
	072 Move X8, [X19]
	073 Move W9, 1
	074 Move [X20+3550], W9
	075 Move X8, [X8+184]
	076 Add X9, X8, 84
	077 Add X8, X8, 92
	078 Compare W9, 0
	079 JumpIfEqual {36}
	080 Move X20, 0x831000
	081 Move W9, [X20+2928]
	082 Compare W9, 0
	083 JumpIfNotEqual {90}
	084 Move X0, X19
	085 Call 0x1C17CF4
	086 Move X8, [X19]
	087 Move W9, 1
	088 Move [X20+2928], W9
	089 Move X8, [X8+184]
	090 Add X9, X8, 60
	091 Add X8, X8, 68
	092 Compare W9, 0
	093 JumpIfEqual {52}
	094 Move X20, 0x831000
	095 Move W9, [X20+1926]
	096 Compare W9, 0
	097 JumpIfNotEqual {104}
	098 Move X0, X19
	099 Call 0x1C17CF4
	100 Move X8, [X19]
	101 Move W9, 1
	102 Move [X20+1926], W9
	103 Move X8, [X8+184]
	104 Add X9, X8, 24
	105 Add X8, X8, 32
	106 Compare W9, 0
	107 JumpIfEqual {66}
	108 Move X20, 0x831000
	109 Move W9, [X20+2591]
	110 Compare W9, 0
	111 JumpIfNotEqual {118}
	112 Move X0, X19
	113 Call 0x1C17CF4
	114 Move X8, [X19]
	115 Move W9, 1
	116 Move [X20+2591], W9
	117 Move X8, [X8+184]
	118 Add X9, X8, 72
	119 Add X8, X8, 80
	120 Move V0, [X9]
	121 Move V2, [X8]
	122 Move X20, [X31+16]
	123 Move X19, [X31+24]
	124 Move S1, V0.S[1]
	125 Move X30, [X31+32]
	126 Move X21, [X31+40]
	127 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03BA84C4 LDR V1, [X8 + 0x17C]
	0x03BA84C8 FMUL S2, S8, S8
	0x03BA84CC FADD S0, S2, S0
	0x03BA84D0 FSQRT S0, S0
	0x03BA84D4 FCMP S0, S1
	0x03BA84D8 B.LE 0x3BA85CC
	0x03BA84DC FDIV S12, S11, S0
	0x03BA84E0 FDIV S13, S9, S0
	0x03BA84E4 FDIV S11, S8, S0
	0x03BA84E8 B 0x3BA8604
	0x03BA84EC LDR X0, [X19 + 0xF0]

ISIL:
	001 Move X10, -51093504
	002 Move V0, [X10+3464]
	003 Move W8, 4
	004 Move W9, 0x3E800000
	005 Move [X0+64], W8
	006 Move W8, 1
	007 Move X1, X31
	008 Move [X0+104], W9
	009 Move [X0+108], W8
	010 Move [X0+112], D0
	011 Call Object..ctor, X0
	012 Return 

