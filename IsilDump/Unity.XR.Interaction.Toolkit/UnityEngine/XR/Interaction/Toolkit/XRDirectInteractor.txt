Type: UnityEngine.XR.Interaction.Toolkit.XRDirectInteractor

Method: System.Boolean get_improveAccuracyWithSphereCollider()

Disassembly:
	0x03B558BC ADRP X8, 0x605000
	0x03B558C0 LDR X8, [X8 + 0xE30]

ISIL:
	001 Move W0, [X0+656]
	002 Return X0

Method: System.Void set_improveAccuracyWithSphereCollider(System.Boolean value)

Disassembly:
	0x03B558C4 MOV X1, X20
	0x03B558C8 LDR X2, [X8]
	0x03B558CC BL 0x301C318

ISIL:
	001 And W8, W1, 1
	002 Move [X0+656], W8
	003 Return 

Method: System.Boolean get_usingSphereColliderAccuracyImprovement()

Disassembly:
	0x03B558D0 TBNZ X0, 0x0, 0x3B55938
	0x03B558D4 LDR X0, [X19 + 0x2A0]

ISIL:
	001 Move W0, [X0+704]
	002 Return X0

Method: UnityEngine.LayerMask get_physicsLayerMask()

Disassembly:
	0x03B558D8 CBZ X0, 0x3B55944
	0x03B558DC ADRP X9, 0x605000

ISIL:
	001 Move W0, [X0+660]
	002 Return X0

Method: System.Void set_physicsLayerMask(UnityEngine.LayerMask value)

Disassembly:
	0x03B558E0 LDR X9, [X9 + 0xE28]
	0x03B558E4 LDR W10, [X0 + 0x1C]

ISIL:
	001 Move [X0+660], W1
	002 Return 

Method: UnityEngine.QueryTriggerInteraction get_physicsTriggerInteraction()

Disassembly:
	0x03B558E8 LDR X8, [X0 + 0x10]
	0x03B558EC LDR X9, [X9]

ISIL:
	001 Move W0, [X0+664]
	002 Return X0

Method: System.Void set_physicsTriggerInteraction(UnityEngine.QueryTriggerInteraction value)

Disassembly:
	0x03B558F0 ADD W10, W10, 0x1
	0x03B558F4 STR W10, [X0 + 0x1C]

ISIL:
	001 Move [X0+664], W1
	002 Return 

Method: System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> get_unsortedValidTargets()

Disassembly:
	0x03B558F8 CBZ X8, 0x3B55944
	0x03B558FC LDRSW X10, [X0 + 0x18]

ISIL:
	001 Move X0, [X0+672]
	002 Return X0

Method: System.Void Awake()

Disassembly:
	0x03B55900 LDR W11, [X8 + 0x18]
	0x03B55904 CMP W10, W11
	0x03B55908 B.CS 0x3B55920
	0x03B5590C ADD W9, W10, 0x1
	0x03B55910 ADD X8, X8, X10, 0x3, LSL
	0x03B55914 STR W9, [X0 + 0x18]
	0x03B55918 STR X20, [X8 + 0x20]
	0x03B5591C B 0x3B55934
	0x03B55920 LDR X8, [X9 + 0x20]
	0x03B55924 MOV X1, X20
	0x03B55928 LDR X8, [X8 + 0xC0]
	0x03B5592C LDR X2, [X8 + 0x70]
	0x03B55930 BL 0x301BF90
	0x03B55934 STRB W31, [X19 + 0x2F1]
	0x03B55938 LDP X20, X19, [X31 + 0x10]
	0x03B5593C LDP X30, X21, [X31], #0x20
	0x03B55940 RET
	0x03B55944 BL 0x1C16F20
	0x03B55948 STR X30, [X31 - 0x10]!
	0x03B5594C CBZ X1, 0x3B5595C
	0x03B55950 LDR X1, [X1 + 0x18]
	0x03B55954 LDR X30, [X31], #0x10
	0x03B55958 B 0x3B55960
	0x03B5595C BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call XRBaseControllerInteractor.Awake, X0
	005 Move X0, X19
	006 Move X1, X31
	007 Call Component.get_gameObject, X0
	008 Compare X0, 0
	009 JumpIfEqual {29}
	010 Move X1, X31
	011 Call GameObject.get_scene, X0
	012 And X0, X0, 0
	013 Move X1, X31
	014 Call PhysicsSceneExtensions.GetPhysicsScene, X0
	015 Move X8, [X19+688]
	016 Move [X19+720], W0
	017 Compare X8, 0
	018 JumpIfEqual {29}
	019 Move X9, [X19+48]
	020 Move X0, X19
	021 Move [X8+32], X9
	022 Call XRDirectInteractor.UpdateCollidersAfterOnTriggerStay, X0
	023 Move [X19+696], X0
	024 Move X0, X19
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Call XRDirectInteractor.ValidateColliderConfiguration, X0
	028 Return 
	029 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x03B55B54 STR S1, [X8 + 0x8]
	0x03B55B58 LDR X0, [X29]
	0x03B55B5C BL 0x1C16D6C
	0x03B55B60 STR X0, [X19 + 0x2E0]
	0x03B55B64 LDR X0, [X27]
	0x03B55B68 MOVZ W1, 0x19
	0x03B55B6C BL 0x1C16D6C
	0x03B55B70 STR X0, [X19 + 0x2E8]
	0x03B55B74 STRB W25, [X19 + 0x2F0]
	0x03B55B78 LDR X0, [X22]
	0x03B55B7C BL 0x1C16F10
	0x03B55B80 LDR X1, [X21]
	0x03B55B84 MOV X20, X0
	0x03B55B88 BL 0x301B7C4
	0x03B55B8C STR X20, [X19 + 0x2F8]
	0x03B55B90 LDR X0, [X23]
	0x03B55B94 LDR W8, [X0 + 0xE0]
	0x03B55B98 CBNZ W8, 0x3B55BA0
	0x03B55B9C BL 0x1C16DFC
	0x03B55BA0 MOV X0, X19
	0x03B55BA4 LDP X20, X19, [X31 + 0x50]
	0x03B55BA8 LDP X22, X21, [X31 + 0x40]
	0x03B55BAC LDP X24, X23, [X31 + 0x30]
	0x03B55BB0 LDP X26, X25, [X31 + 0x20]
	0x03B55BB4 LDP X28, X27, [X31 + 0x10]
	0x03B55BB8 LDP X29, X30, [X31], #0x60
	0x03B55BBC B 0x3B51214
	0x03B55BC0 STP X30, X21, [X31 - 0x20]!
	0x03B55BC4 STP X20, X19, [X31 + 0x10]
	0x03B55BC8 ADRP X19, 0x88D000
	0x03B55BCC ADRP X21, 0x605000
	0x03B55BD0 ADRP X20, 0x605000
	0x03B55BD4 LDRB W8, [X19 + 0x93B]
	0x03B55BD8 LDR X21, [X21 + 0xE58]
	0x03B55BDC LDR X20, [X20 + 0xE60]
	0x03B55BE0 TBNZ X8, 0x0, 0x3B55C04
	0x03B55BE4 ADRP X0, 0x605000
	0x03B55BE8 LDR X0, [X0 + 0xE58]
	0x03B55BEC BL 0x1C16CF4
	0x03B55BF0 ADRP X0, 0x605000
	0x03B55BF4 LDR X0, [X0 + 0xE60]
	0x03B55BF8 BL 0x1C16CF4
	0x03B55BFC MOVZ W8, 0x1
	0x03B55C00 STRB W8, [X19 + 0x93B]
	0x03B55C04 LDR X0, [X21]
	0x03B55C08 BL 0x1C16F10
	0x03B55C0C MOV X1, X31
	0x03B55C10 MOV X19, X0
	0x03B55C14 BL 0x3C3A62C
	0x03B55C18 LDR X8, [X20]
	0x03B55C1C LDR X8, [X8 + 0xB8]
	0x03B55C20 STR X19, [X8]
	0x03B55C24 LDP X20, X19, [X31 + 0x10]
	0x03B55C28 LDP X30, X21, [X31], #0x20
	0x03B55C2C RET
	0x03B55C30 RET
	0x03B55C34 STR X30, [X31 - 0x20]!
	0x03B55C38 STP X20, X19, [X31 + 0x10]
	0x03B55C3C ADRP X20, 0x88D000
	0x03B55C40 LDRB W8, [X20 + 0x93C]
	0x03B55C44 MOV X19, X0
	0x03B55C48 TBNZ X8, 0x0, 0x3B55C60
	0x03B55C4C ADRP X0, 0x605000
	0x03B55C50 LDR X0, [X0 + 0xE60]
	0x03B55C54 BL 0x1C16CF4
	0x03B55C58 MOVZ W8, 0x1
	0x03B55C5C STRB W8, [X20 + 0x93C]
	0x03B55C60 LDR W8, [X19 + 0x10]
	0x03B55C64 CMP W8, 0x1
	0x03B55C68 B.EQ 0x3B55C7C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x88E000
	008 Move X22, 0x606000
	009 Move X21, 0x606000
	010 Move W8, [X20+2349]
	011 Move X22, [X22+3560]
	012 Move X21, [X21+3568]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x606000
	019 Move X0, [X0+3560]
	020 Call 0x1C17CF4
	021 Move X0, 0x606000
	022 Move X0, [X0+3568]
	023 Call 0x1C17CF4
	024 Move X0, 0x606000
	025 Move X0, [X0+3576]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+2349], W8
	029 Move X0, X19
	030 Call XRBaseInteractor.FindCreateInteractionManager, X0
	031 Move X0, X19
	032 Call XRBaseInteractor.RegisterWithInteractionManager, X0
	033 Move X0, [X22]
	034 Move X20, [X19+688]
	035 Call 0x1C17F10
	036 Move X2, [X21]
	037 Move X1, X19
	038 Move X3, X31
	039 Move X21, X0
	040 Call Action`1<Object>..ctor, X0, X1, X2
	041 Compare X20, 0
	042 JumpIfEqual {86}
	043 Move X23, 0x606000
	044 Move X23, [X23+3576]
	045 Move X0, X20
	046 Move X1, X21
	047 Move X2, X31
	048 Call TriggerContactMonitor.add_contactAdded, X0, X1
	049 Move X0, [X22]
	050 Move X20, [X19+688]
	051 Call 0x1C17F10
	052 Move X2, [X23]
	053 Move X1, X19
	054 Move X3, X31
	055 Move X21, X0
	056 Call Action`1<Object>..ctor, X0, X1, X2
	057 Compare X20, 0
	058 JumpIfEqual {86}
	059 Move X0, X20
	060 Move X1, X21
	061 Move X2, X31
	062 Call TriggerContactMonitor.add_contactRemoved, X0, X1
	063 Move X0, X19
	064 Call XRDirectInteractor.ResetCollidersAndValidTargets, X0
	065 Move W8, [X19+704]
	066 Compare W8, 0
	067 JumpIfEqual {75}
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move X30, [X31+48]
	073 Move X23, [X31+56]
	074 Return 
	075 Move X1, [X19+696]
	076 Move X0, X19
	077 Move X20, [X31+32]
	078 Move X19, [X31+40]
	079 Move X22, [X31+16]
	080 Move X21, [X31+24]
	081 Move X2, X31
	082 Move X30, [X31+48]
	083 Move X23, [X31+56]
	084 Call MonoBehaviour.StartCoroutine, X0, X1
	085 Return 
	086 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x03B55D3C RET
	0x03B55D40 LDR V0, [X0 + 0x488]
	0x03B55D44 RET
	0x03B55D48 STR S0, [X0 + 0x488]
	0x03B55D4C RET
	0x03B55D50 LDR V0, [X0 + 0x48C]
	0x03B55D54 RET
	0x03B55D58 STR S0, [X0 + 0x48C]
	0x03B55D5C RET
	0x03B55D60 LDR X0, [X0 + 0x490]
	0x03B55D64 RET
	0x03B55D68 STR X1, [X0 + 0x490]
	0x03B55D6C RET
	0x03B55D70 LDRB W0, [X0 + 0x498]
	0x03B55D74 RET
	0x03B55D78 AND W8, W1, 0x1
	0x03B55D7C STRB W8, [X0 + 0x498]
	0x03B55D80 RET
	0x03B55D84 LDRB W0, [X0 + 0x499]
	0x03B55D88 RET
	0x03B55D8C AND W8, W1, 0x1
	0x03B55D90 STRB W8, [X0 + 0x499]
	0x03B55D94 RET
	0x03B55D98 LDR V0, [X0 + 0x49C]
	0x03B55D9C RET
	0x03B55DA0 STR S0, [X0 + 0x49C]
	0x03B55DA4 RET
	0x03B55DA8 STP X30, X19, [X31 - 0x10]!
	0x03B55DAC MOV X19, X0
	0x03B55DB0 BL 0x3B55DC0
	0x03B55DB4 MOV X0, X19
	0x03B55DB8 LDP X30, X19, [X31], #0x10
	0x03B55DBC B 0x3B55E64
	0x03B55DC0 STR X30, [X31 - 0x20]!
	0x03B55DC4 STP X20, X19, [X31 + 0x10]
	0x03B55DC8 ADRP X20, 0x88D000
	0x03B55DCC LDRB W8, [X20 + 0x98A]
	0x03B55DD0 MOV X19, X0
	0x03B55DD4 TBNZ X8, 0x0, 0x3B55DEC
	0x03B55DD8 ADRP X0, 0x605000
	0x03B55DDC LDR X0, [X0 + 0xE70]
	0x03B55DE0 BL 0x1C16CF4
	0x03B55DE4 MOVZ W8, 0x1
	0x03B55DE8 STRB W8, [X20 + 0x98A]
	0x03B55DEC MOV X0, X19
	0x03B55DF0 BL 0x3B4F060
	0x03B55DF4 MOV X0, X19
	0x03B55DF8 MOV X1, X31
	0x03B55DFC BL 0x3C32ECC
	0x03B55E00 CBZ X0, 0x3B55E60
	0x03B55E04 ADRP X20, 0x605000
	0x03B55E08 LDR X20, [X20 + 0xE70]
	0x03B55E0C MOV X1, X31
	0x03B55E10 BL 0x3C35BD8
	0x03B55E14 AND X0, X0, 0x0
	0x03B55E18 MOV X1, X31
	0x03B55E1C BL 0x3C90E1C
	0x03B55E20 STR W0, [X19 + 0x3C8]
	0x03B55E24 LDR X0, [X20]
	0x03B55E28 BL 0x1C16F10
	0x03B55E2C MOV X1, X19
	0x03B55E30 MOV X2, X31
	0x03B55E34 MOV X20, X0
	0x03B55E38 BL 0x3B999C0
	0x03B55E3C MOV X0, X19
	0x03B55E40 STR X20, [X19 + 0x3D0]
	0x03B55E44 BL 0x3B5F8B8
	0x03B55E48 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x88E000
	008 Move X22, 0x606000
	009 Move X21, 0x606000
	010 Move W8, [X20+2350]
	011 Move X22, [X22+3560]
	012 Move X21, [X21+3568]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x606000
	019 Move X0, [X0+3560]
	020 Call 0x1C17CF4
	021 Move X0, 0x606000
	022 Move X0, [X0+3568]
	023 Call 0x1C17CF4
	024 Move X0, 0x606000
	025 Move X0, [X0+3576]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+2350], W8
	029 Move X0, X19
	030 Call XRBaseInteractor.UnregisterWithInteractionManager, X0
	031 Move X0, [X22]
	032 Move X20, [X19+688]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<Object>..ctor, X0, X1, X2
	039 Compare X20, 0
	040 JumpIfEqual {84}
	041 Move X23, 0x606000
	042 Move X23, [X23+3576]
	043 Move X0, X20
	044 Move X1, X21
	045 Move X2, X31
	046 Call TriggerContactMonitor.remove_contactAdded, X0, X1
	047 Move X0, [X22]
	048 Move X20, [X19+688]
	049 Call 0x1C17F10
	050 Move X2, [X23]
	051 Move X1, X19
	052 Move X3, X31
	053 Move X21, X0
	054 Call Action`1<Object>..ctor, X0, X1, X2
	055 Compare X20, 0
	056 JumpIfEqual {84}
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X31
	060 Call TriggerContactMonitor.remove_contactRemoved, X0, X1
	061 Move X0, X19
	062 Call XRDirectInteractor.ResetCollidersAndValidTargets, X0
	063 Move W8, [X19+704]
	064 Compare W8, 0
	065 JumpIfEqual {73}
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Move X23, [X31+56]
	072 Return 
	073 Move X1, [X19+696]
	074 Move X0, X19
	075 Move X20, [X31+32]
	076 Move X19, [X31+40]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X2, X31
	080 Move X30, [X31+48]
	081 Move X23, [X31+56]
	082 Call MonoBehaviour.StopCoroutine, X0, X1
	083 Return 
	084 Call 0x1C17F20

Method: System.Void OnTriggerEnter(UnityEngine.Collider other)

Disassembly:
	0x03B55E4C BL 0x3B5F9EC
	0x03B55E50 MOV X0, X19
	0x03B55E54 LDP X20, X19, [X31 + 0x10]
	0x03B55E58 LDR X30, [X31], #0x20
	0x03B55E5C B 0x3B5FB58
	0x03B55E60 BL 0x1C16F20
	0x03B55E64 STP X30, X21, [X31 - 0x20]!
	0x03B55E68 STP X20, X19, [X31 + 0x10]
	0x03B55E6C ADRP X20, 0x88D000
	0x03B55E70 ADRP X21, 0x59E000
	0x03B55E74 LDRB W8, [X20 + 0x93D]

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+704]
	003 Compare W8, 0
	004 JumpIfEqual {7}
	005 Move X30, [X31+16]
	006 Return 
	007 Move X0, [X0+688]
	008 Compare X0, 0
	009 JumpIfEqual {14}
	010 Move X2, X31
	011 Move X30, [X31+16]
	012 Call TriggerContactMonitor.AddCollider, X0, X1
	013 Return 
	014 Call 0x1C17F20

Method: System.Void OnTriggerStay(UnityEngine.Collider other)

Disassembly:
	0x03B55E78 LDR X21, [X21 + 0x598]
	0x03B55E7C MOV X19, X0
	0x03B55E80 TBNZ X8, 0x0, 0x3B55EF8
	0x03B55E84 ADRP X0, 0x605000
	0x03B55E88 LDR X0, [X0 + 0x918]
	0x03B55E8C BL 0x1C16CF4
	0x03B55E90 ADRP X0, 0x59E000
	0x03B55E94 LDR X0, [X0 + 0xA28]
	0x03B55E98 BL 0x1C16CF4
	0x03B55E9C ADRP X0, 0x605000
	0x03B55EA0 LDR X0, [X0 + 0xE78]
	0x03B55EA4 BL 0x1C16CF4
	0x03B55EA8 ADRP X0, 0x605000
	0x03B55EAC LDR X0, [X0 + 0xE80]
	0x03B55EB0 BL 0x1C16CF4
	0x03B55EB4 ADRP X0, 0x59E000
	0x03B55EB8 LDR X0, [X0 + 0xA58]
	0x03B55EBC BL 0x1C16CF4
	0x03B55EC0 ADRP X0, 0x59E000
	0x03B55EC4 LDR X0, [X0 + 0x598]
	0x03B55EC8 BL 0x1C16CF4
	0x03B55ECC ADRP X0, 0x5A4000
	0x03B55ED0 LDR X0, [X0 + 0xC8]
	0x03B55ED4 BL 0x1C16CF4
	0x03B55ED8 ADRP X0, 0x605000
	0x03B55EDC LDR X0, [X0 + 0xE88]
	0x03B55EE0 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x88E000
	006 Move W8, [X21+2351]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x606000
	014 Move X0, [X0+1920]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2351], W8
	018 Move W8, [X20+704]
	019 Compare W8, 0
	020 JumpIfEqual {26}
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Return 
	026 Move X0, [X20+680]
	027 Compare X0, 0
	028 JumpIfEqual {39}
	029 Move X8, 0x606000
	030 Move X8, [X8+1920]
	031 Move X1, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X2, [X8]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call HashSet`1<Object>.Add, X0, X1
	038 Return 
	039 Call 0x1C17F20

Method: System.Void OnTriggerExit(UnityEngine.Collider other)

Disassembly:
	0x03B55EE4 ADRP X0, 0x605000
	0x03B55EE8 LDR X0, [X0 + 0xE90]
	0x03B55EEC BL 0x1C16CF4
	0x03B55EF0 MOVZ W8, 0x1
	0x03B55EF4 STRB W8, [X20 + 0x93D]
	0x03B55EF8 LDR X0, [X21]
	0x03B55EFC LDR X20, [X19 + 0x490]
	0x03B55F00 LDR W8, [X0 + 0xE0]
	0x03B55F04 CBNZ W8, 0x3B55F0C
	0x03B55F08 BL 0x1C16DFC
	0x03B55F0C MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+704]
	003 Compare W8, 0
	004 JumpIfEqual {7}
	005 Move X30, [X31+16]
	006 Return 
	007 Move X0, [X0+688]
	008 Compare X0, 0
	009 JumpIfEqual {14}
	010 Move X2, X31
	011 Move X30, [X31+16]
	012 Call TriggerContactMonitor.RemoveCollider, X0, X1
	013 Return 
	014 Call 0x1C17F20

Method: System.Collections.IEnumerator UpdateCollidersAfterOnTriggerStay()

Disassembly:
	0x03B55960 STP X30, X21, [X31 - 0x20]!
	0x03B55964 STP X20, X19, [X31 + 0x10]
	0x03B55968 ADRP X21, 0x88D000
	0x03B5596C LDRB W8, [X21 + 0x938]
	0x03B55970 MOV X20, X1
	0x03B55974 MOV X19, X0
	0x03B55978 TBNZ X8, 0x0, 0x3B55990
	0x03B5597C ADRP X0, 0x605000
	0x03B55980 LDR X0, [X0 + 0xE38]
	0x03B55984 BL 0x1C16CF4
	0x03B55988 MOVZ W8, 0x1
	0x03B5598C STRB W8, [X21 + 0x938]
	0x03B55990 LDR X0, [X19 + 0x2A0]
	0x03B55994 CBZ X0, 0x3B559C0
	0x03B55998 ADRP X8, 0x605000
	0x03B5599C LDR X8, [X8 + 0xE38]
	0x03B559A0 MOV X1, X20
	0x03B559A4 LDR X2, [X8]
	0x03B559A8 BL 0x301D7A8
	0x03B559AC TBZ X0, 0x0, 0x3B559B4
	0x03B559B0 STRB W31, [X19 + 0x2F1]
	0x03B559B4 LDP X20, X19, [X31 + 0x10]
	0x03B559B8 LDP X30, X21, [X31], #0x20
	0x03B559BC RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x88E000
	006 Move X21, 0x606000
	007 Move W8, [X20+2352]
	008 Move X21, [X21+3544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x606000
	015 Move X0, [X0+3544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2352], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move [X20+16], W31
	025 Move [X20+32], X19
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Void PreprocessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)

Disassembly:
	0x03B55F38 LDR X1, [X20]
	0x03B55F3C MOV X2, X31
	0x03B55F40 MOV X20, X0
	0x03B55F44 BL 0x3C35934
	0x03B55F48 CBZ X20, 0x3B56070
	0x03B55F4C ADRP X8, 0x605000
	0x03B55F50 LDR X8, [X8 + 0xE78]
	0x03B55F54 MOV X0, X20
	0x03B55F58 LDR X1, [X8]
	0x03B55F5C BL 0x21E51FC
	0x03B55F60 CBZ X0, 0x3B56070
	0x03B55F64 MOVZ W1, 0x1
	0x03B55F68 MOV X2, X31
	0x03B55F6C BL 0x3C8F7C8
	0x03B55F70 ADRP X8, 0x605000
	0x03B55F74 LDR X8, [X8 + 0xE80]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 Move X19, X0
	006 Call XRBaseControllerInteractor.PreprocessInteractor, X0, X1
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move W8, [X19+704]
	009 Compare W8, 0
	010 JumpIfEqual {15}
	011 Move X0, X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Return 

Method: System.Void ProcessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)

Disassembly:
	0x03B56294 LDRB W8, [X19 + 0x2F4]
	0x03B56298 CBZ W8, 0x3B56300
	0x03B5629C MOV X0, X19
	0x03B562A0 BL 0x3B4B6D0
	0x03B562A4 TBZ X0, 0x0, 0x3B56300
	0x03B562A8 LDRB W8, [X19 + 0x374]
	0x03B562AC CBNZ W8, 0x3B56300
	0x03B562B0 MOV X0, X31
	0x03B562B4 BL 0x3C3C6C4
	0x03B562B8 LDR X8, [X19]
	0x03B562BC LDR X1, [X19 + 0x330]
	0x03B562C0 LDR V9, [X19 + 0x370]
	0x03B562C4 MOV X0, X19
	0x03B562C8 LDR X9, [X8 + 0x958]
	0x03B562CC LDR X2, [X8 + 0x960]
	0x03B562D0 MOV V8.16B, V0.16B
	0x03B562D4 BLR X9
	0x03B562D8 FSUB S1, S8, S9
	0x03B562DC FDIV S0, S1, S0
	0x03B562E0 FCMP S0, 0x0
	0x03B562E4 B.MI 0x3B56300
	0x03B562E8 FMOV S1, 1
	0x03B562EC FMIN S0, S0, S1
	0x03B562F0 FCMP S0, S1
	0x03B562F4 B.LT 0x3B56300
	0x03B562F8 MOVZ W8, 0x1
	0x03B562FC STRB W8, [X19 + 0x374]
	0x03B56300 LDP X20, X19, [X31 + 0x40]
	0x03B56304 LDP X30, X21, [X31 + 0x30]
	0x03B56308 LDP D9, D8, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x88D000
	006 Move W8, [X21+2353]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x605000
	014 Move X0, [X0+1928]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2353], W8
	018 Move X0, X19
	019 Move W1, W20
	020 Call XRBaseControllerInteractor.ProcessInteractor, X0, X1
	021 Compare W20, 0
	022 JumpIfNotEqual {38}
	023 Move W8, [X19+704]
	024 Compare W8, 0
	025 JumpIfNotEqual {38}
	026 Move X0, [X19+680]
	027 Compare X0, 0
	028 JumpIfEqual {43}
	029 Move X8, 0x605000
	030 Move X8, [X8+1928]
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X1, [X8]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call HashSet`1<Object>.Clear, X0
	037 Return 
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return 
	043 Call 0x1C17F20

Method: System.Void EvaluateSphereOverlap()

Disassembly:
	0x03B55F78 MOV X0, X20
	0x03B55F7C LDR X1, [X8]
	0x03B55F80 BL 0x21E51FC
	0x03B55F84 STR X0, [X19 + 0x490]
	0x03B55F88 B 0x3B56064
	0x03B55F8C LDR X8, [X19 + 0x490]
	0x03B55F90 CBZ X8, 0x3B56070
	0x03B55F94 LDR X0, [X21]
	0x03B55F98 LDR X20, [X8 + 0x30]
	0x03B55F9C LDR W9, [X0 + 0xE0]
	0x03B55FA0 CBNZ W9, 0x3B55FA8
	0x03B55FA4 BL 0x1C16DFC
	0x03B55FA8 MOV X0, X20
	0x03B55FAC MOV X1, X31
	0x03B55FB0 MOV X2, X31
	0x03B55FB4 BL 0x3C354F8
	0x03B55FB8 TBZ X0, 0x0, 0x3B56064
	0x03B55FBC LDR X8, [X19 + 0x490]
	0x03B55FC0 CBZ X8, 0x3B56070
	0x03B55FC4 LDR X8, [X8 + 0x30]
	0x03B55FC8 CBZ X8, 0x3B5602C
	0x03B55FCC ADRP X9, 0x5A4000
	0x03B55FD0 LDR X9, [X9 + 0xC8]
	0x03B55FD4 LDR X8, [X8]
	0x03B55FD8 LDR X10, [X9]
	0x03B55FDC LDRB W9, [X8 + 0x130]
	0x03B55FE0 LDRB W11, [X10 + 0x130]
	0x03B55FE4 CMP W9, W11
	0x03B55FE8 B.CC 0x3B56000
	0x03B55FEC LDR X12, [X8 + 0xC8]
	0x03B55FF0 ADD X11, X12, X11, 0x3, LSL
	0x03B55FF4 LDUR X11, [X11 - 0x8]
	0x03B55FF8 CMP X11, X10
	0x03B55FFC B.EQ 0x3B56064
	0x03B56000 ADRP X10, 0x604000
	0x03B56004 LDR X10, [X10 + 0x918]
	0x03B56008 LDR X10, [X10]
	0x03B5600C LDRB W11, [X10 + 0x130]
	0x03B56010 CMP W9, W11
	0x03B56014 B.CC 0x3B5602C
	0x03B56018 LDR X8, [X8 + 0xC8]
	0x03B5601C ADD X8, X8, X11, 0x3, LSL
	0x03B56020 LDUR X8, [X8 - 0x8]
	0x03B56024 CMP X8, X10
	0x03B56028 B.EQ 0x3B56064
	0x03B5602C ADRP X8, 0x59D000
	0x03B56030 LDR X8, [X8 + 0xA28]
	0x03B56034 LDR X0, [X8]
	0x03B56038 LDR W8, [X0 + 0xE0]
	0x03B5603C CBNZ W8, 0x3B56044
	0x03B56040 BL 0x1C16DFC
	0x03B56044 ADRP X8, 0x604000
	0x03B56048 LDR X8, [X8 + 0xE90]
	0x03B5604C MOV X1, X19
	0x03B56050 LDP X20, X19, [X31 + 0x10]
	0x03B56054 MOV X2, X31
	0x03B56058 LDR X0, [X8]
	0x03B5605C LDP X30, X21, [X31], #0x20
	0x03B56060 B 0x3C06B0C
	0x03B56064 LDP X20, X19, [X31 + 0x10]
	0x03B56068 LDP X30, X21, [X31], #0x20
	0x03B5606C RET
	0x03B56070 BL 0x1C16F20
	0x03B56074 STR X30, [X31 - 0x20]!
	0x03B56078 STP X20, X19, [X31 + 0x10]
	0x03B5607C MOV W20, W1
	0x03B56080 MOV X19, X0
	0x03B56084 BL 0x3B560D4
	0x03B56088 CMP W20, 0x1
	0x03B5608C B.NE 0x3B560A8
	0x03B56090 LDR X1, [X19 + 0x330]
	0x03B56094 MOV X0, X19
	0x03B56098 BL 0x3B56318
	0x03B5609C TBZ X0, 0x0, 0x3B560B4
	0x03B560A0 LDR X1, [X19 + 0x330]
	0x03B560A4 B 0x3B560B8
	0x03B560A8 LDP X20, X19, [X31 + 0x10]
	0x03B560AC LDR X30, [X31], #0x20
	0x03B560B0 RET
	0x03B560B4 MOV X1, X31
	0x03B560B8 LDR X8, [X19]
	0x03B560BC MOV X0, X19
	0x03B560C0 LDP X20, X19, [X31 + 0x10]
	0x03B560C4 LDR X3, [X8 + 0x988]
	0x03B560C8 LDR X2, [X8 + 0x990]
	0x03B560CC LDR X30, [X31], #0x20
	0x03B560D0 BR X3
	0x03B560D4 SUB X31, X31, 0x50
	0x03B560D8 STP D9, D8, [X31 + 0x20]
	0x03B560DC STP X30, X21, [X31 + 0x30]
	0x03B560E0 STP X20, X19, [X31 + 0x40]
	0x03B560E4 ADRP X21, 0x88C000
	0x03B560E8 LDRB W8, [X21 + 0x99D]
	0x03B560EC MOV W20, W1
	0x03B560F0 MOV X19, X0
	0x03B560F4 TBNZ X8, 0x0, 0x3B56124
	0x03B560F8 ADRP X0, 0x604000
	0x03B560FC LDR X0, [X0 + 0xE98]
	0x03B56100 BL 0x1C16CF4
	0x03B56104 ADRP X0, 0x604000
	0x03B56108 LDR X0, [X0 + 0xB08]
	0x03B5610C BL 0x1C16CF4
	0x03B56110 ADRP X0, 0x604000
	0x03B56114 LDR X0, [X0 + 0xEA0]
	0x03B56118 BL 0x1C16CF4
	0x03B5611C MOVZ W8, 0x1
	0x03B56120 STRB W8, [X21 + 0x99D]
	0x03B56124 MOV X0, X19
	0x03B56128 MOV W1, W20
	0x03B5612C BL 0x3B4F4B8
	0x03B56130 CMP W20, 0x1
	0x03B56134 B.NE 0x3B56300
	0x03B56138 MOV X0, X19
	0x03B5613C BL 0x3B619D4
	0x03B56140 LDR X8, [X19 + 0x3A0]
	0x03B56144 CBZ X8, 0x3B561B4
	0x03B56148 LDR W8, [X8 + 0x18]
	0x03B5614C CMP W8, 0x2
	0x03B56150 B.LT 0x3B561B4
	0x03B56154 MOV X0, X19
	0x03B56158 BL 0x3B627C4
	0x03B5615C MOV X0, X19
	0x03B56160 BL 0x3B61C64
	0x03B56164 MOV X0, X19
	0x03B56168 BL 0x3B61F30
	0x03B5616C LDR W8, [X19 + 0x3AC]
	0x03B56170 LDR X1, [X19 + 0x3A0]
	0x03B56174 LDR W2, [X19 + 0x3B0]
	0x03B56178 CMP W8, 0x1
	0x03B5617C B.LT 0x3B56198
	0x03B56180 CMP W2, 0x1
	0x03B56184 B.LT 0x3B56194
	0x03B56188 CMP W8, W2
	0x03B5618C CSEL W2, W8, W2, LT
	0x03B56190 B 0x3B56198
	0x03B56194 MOV W2, W8
	0x03B56198 LDR X3, [X19 + 0x3C0]
	0x03B5619C ADD X4, X31, 0x0
	0x03B561A0 MOV X0, X19
	0x03B561A4 STP X31, X31, [X31]
	0x03B561A8 STR W31, [X31 + 0x18]
	0x03B561AC STR X31, [X31 + 0x10]
	0x03B561B0 BL 0x3B61138
	0x03B561B4 LDR X8, [X19]
	0x03B561B8 LDR X1, [X19 + 0x360]
	0x03B561BC MOV X0, X19
	0x03B561C0 LDR X9, [X8 + 0x4C8]
	0x03B561C4 LDR X2, [X8 + 0x4D0]
	0x03B561C8 BLR X9
	0x03B561CC LDR X0, [X19 + 0x360]
	0x03B561D0 CBZ X0, 0x3B56314
	0x03B561D4 LDR W8, [X0 + 0x18]
	0x03B561D8 CMP W8, 0x1
	0x03B561DC B.LT 0x3B561FC
	0x03B561E0 ADRP X8, 0x604000
	0x03B561E4 LDR X8, [X8 + 0xEA0]
	0x03B561E8 MOV W1, W31
	0x03B561EC LDR X2, [X8]
	0x03B561F0 BL 0x301BCCC
	0x03B561F4 MOV X20, X0
	0x03B561F8 B 0x3B56200
	0x03B561FC MOV X20, X31
	0x03B56200 LDR X8, [X19 + 0x330]
	0x03B56204 CMP X20, X8
	0x03B56208 B.EQ 0x3B56218
	0x03B5620C MOV X0, X19
	0x03B56210 BL 0x3B4B6D0
	0x03B56214 TBZ X0, 0x0, 0x3B56280
	0x03B56218 CBZ X20, 0x3B56294
	0x03B5621C LDRB W8, [X19 + 0x36C]
	0x03B56220 CBNZ W8, 0x3B56294
	0x03B56224 MOV X0, X31
	0x03B56228 BL 0x3C3C6C4
	0x03B5622C LDR X8, [X19]
	0x03B56230 LDR X1, [X19 + 0x330]
	0x03B56234 LDR V9, [X19 + 0x368]
	0x03B56238 MOV X0, X19
	0x03B5623C LDR X9, [X8 + 0x948]
	0x03B56240 LDR X2, [X8 + 0x950]
	0x03B56244 MOV V8.16B, V0.16B
	0x03B56248 BLR X9
	0x03B5624C FSUB S1, S8, S9
	0x03B56250 FDIV S0, S1, S0
	0x03B56254 FCMP S0, 0x0
	0x03B56258 B.MI 0x3B56294
	0x03B5625C FMOV S1, 1
	0x03B56260 FCMP S0, S1
	0x03B56264 B.LT 0x3B56294
	0x03B56268 MOV X0, X19
	0x03B5626C BL 0x3B4B6D0
	0x03B56270 TBNZ X0, 0x0, 0x3B56294
	0x03B56274 MOVZ W8, 0x1
	0x03B56278 STRB W8, [X19 + 0x36C]
	0x03B5627C B 0x3B56294
	0x03B56280 MOV X0, X31
	0x03B56284 STR X20, [X19 + 0x330]
	0x03B56288 BL 0x3C3C6C4
	0x03B5628C STR S0, [X19 + 0x368]
	0x03B56290 STRB W31, [X19 + 0x36C]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+64], D15
	003 Move [X31+72], D14
	004 Move [X31+80], D13
	005 Move [X31+88], D12
	006 Move [X31+96], D11
	007 Move [X31+104], D10
	008 Move [X31+112], D9
	009 Move [X31+120], D8
	010 Move [X31+128], X30
	011 Move [X31+144], X24
	012 Move [X31+152], X23
	013 Move [X31+160], X22
	014 Move [X31+168], X21
	015 Move [X31+176], X20
	016 Move [X31+184], X19
	017 Move X20, 0x88E000
	018 Move W8, [X20+2354]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0x606000
	025 Move X0, [X0+1920]
	026 Call 0x1C17CF4
	027 Move X0, 0x606000
	028 Move X0, [X0+1928]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+2354], W8
	032 Move [X31+56], W31
	033 Move [X31+48], X31
	034 Move [X31+40], W31
	035 Move [X31+32], X31
	036 Move [X31+24], W31
	037 Move [X31+16], X31
	038 Move [X31+136], X31
	039 Move X0, [X19+680]
	040 Move [X19+753], W31
	041 Compare X0, 0
	042 JumpIfEqual {225}
	043 Move X8, 0x606000
	044 Move X8, [X8+1928]
	045 Move X1, [X8]
	046 Call HashSet`1<Object>.Clear, X0
	047 Move X8, [X19]
	048 Move X0, X19
	049 Move X1, X31
	050 Move X9, [X8+1208]
	051 Move X2, [X8+1216]
	052 NotImplemented "Instruction BLR not yet implemented."
	053 Move X8, [X19+712]
	054 Compare X8, 0
	055 JumpIfEqual {225}
	056 Move X20, X0
	057 Move X0, X8
	058 Move X1, X31
	059 Call SphereCollider.get_center, X0
	060 Compare X20, 0
	061 JumpIfEqual {225}
	062 Move X0, X20
	063 Move X1, X31
	064 Call Transform.TransformPoint, X0, X1
	065 Add X8, X19, 724
	066 Move W9, [X8+8]
	067 Move X8, [X8]
	068 Move [X31+32], S0
	069 Move [X31+40], S1
	070 Move [X31+40], S2
	071 Move [X31+56], W9
	072 Move [X31+48], X8
	073 Move X0, [X19+712]
	074 Compare X0, 0
	075 JumpIfEqual {225}
	076 Move X1, X31
	077 Move V8, V0
	078 Move V10, V1
	079 Move V9, V2
	080 Call SphereCollider.get_radius, X0
	081 Move X0, [X19+712]
	082 Compare X0, 0
	083 JumpIfEqual {225}
	084 Move X1, X31
	085 Move V11, V0
	086 Call Component.get_transform, X0
	087 Compare X0, 0
	088 JumpIfEqual {225}
	089 Move X1, X31
	090 Call Transform.get_lossyScale, X0
	091 Add X0, X31, 48
	092 Add X1, X31, 32
	093 Add X2, X31, 16
	094 Add X3, X31, 140
	095 Add X4, X31, 136
	096 Move X5, X31
	097 Multiply S11, S11, S0
	098 Call BurstPhysicsUtils.GetSphereOverlapParameters, X0, X1, X2, X3, X4
	099 Move W8, [X19+752]
	100 Add X20, X19, 720
	101 Compare W8, 0
	102 JumpIfNotEqual {162}
	103 Move X8, -50769920
	104 Move V0, [X31+140]
	105 Move V1, [X8+1040]
	106 NotImplemented "Instruction FCMP not yet implemented."
	107 Move W0, [X19+660]
	108 Move S12, [X31+48]
	109 Move S13, [X31+52]
	110 Move V14, [X31+56]
	111 Move [X31+4], S8
	112 Move [X31+12], S9
	113 Move S15, [X31+16]
	114 Move S8, [X31+20]
	115 Move V9, [X31+24]
	116 Move X21, [X19+744]
	117 Move [X31+12], S10
	118 Move V10, [X31+136]
	119 Move X1, X31
	120 Call LayerMask.op_Implicit, X0
	121 Move W3, [X19+664]
	122 Move V5, V8
	123 Move V6, V9
	124 Move S8, [X31+4]
	125 Move S9, [X31+8]
	126 Move V7, V10
	127 Move V10, [X31+12]
	128 Move W2, W0
	129 Move X0, X20
	130 Move V0, V12
	131 Move V1, V13
	132 Move V2, V14
	133 Move V3, V11
	134 Move V4, V15
	135 Move X1, X21
	136 Move X4, X31
	137 Call PhysicsScene.SphereCast, X0, X1, V0, X2, X3, V1, X4, X5
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move X24, 0x605000
	140 Move X24, [X24+1920]
	141 Move X21, X31
	142 Move W22, W0
	143 Move W23, 32
	144 Move X8, [X19+744]
	145 Compare X8, 0
	146 JumpIfEqual {225}
	147 Move W9, [X8+24]
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Move X20, [X19+680]
	150 Add X0, X8, X23
	151 Move X1, X31
	152 Call RaycastHit.get_collider, X0
	153 Compare X20, 0
	154 JumpIfEqual {225}
	155 Move X2, [X24]
	156 Move X1, X0
	157 Move X0, X20
	158 Call HashSet`1<Object>.Add, X0, X1
	159 Add X21, X21, 1
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Add X23, X23, 44
	162 Move W0, [X19+660]
	163 Move S12, [X31+32]
	164 Move S13, [X31+36]
	165 Move V14, [X31+40]
	166 Move X21, [X19+736]
	167 Move X1, X31
	168 Call LayerMask.op_Implicit, X0
	169 Move W3, [X19+664]
	170 Move W2, W0
	171 Move X0, X20
	172 Move V0, V12
	173 Move V1, V13
	174 Move V2, V14
	175 Move V3, V11
	176 Move X1, X21
	177 Move X4, X31
	178 Call PhysicsScene.OverlapSphere, X0, X1, V0, X2, X3, X4
	179 NotImplemented "Instruction CMP not yet implemented."
	180 Move X22, 0x605000
	181 Move X22, [X22+1920]
	182 Move X20, X31
	183 Move W21, W0
	184 Move X8, [X19+736]
	185 Compare X8, 0
	186 JumpIfEqual {225}
	187 Move W9, [X8+24]
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Move X0, [X19+680]
	190 Compare X0, 0
	191 JumpIfEqual {225}
	192 Add X8, X8, X20
	193 Move X1, [X8+32]
	194 Move X2, [X22]
	195 Call HashSet`1<Object>.Add, X0, X1
	196 Add X20, X20, 1
	197 NotImplemented "Instruction CMP not yet implemented."
	198 Move X0, [X19+688]
	199 Compare X0, 0
	200 JumpIfEqual {225}
	201 Move X1, [X19+680]
	202 Move X2, X31
	203 Call TriggerContactMonitor.UpdateStayedColliders, X0, X1
	204 Move [X19+724], S8
	205 Move [X19+728], S10
	206 Move [X19+732], S9
	207 Move [X19+752], W31
	208 Move X20, [X31+176]
	209 Move X19, [X31+184]
	210 Move X22, [X31+160]
	211 Move X21, [X31+168]
	212 Move X24, [X31+144]
	213 Move X23, [X31+152]
	214 Move X30, [X31+128]
	215 Move D9, [X31+112]
	216 Move D8, [X31+120]
	217 Move D11, [X31+96]
	218 Move D10, [X31+104]
	219 Move D13, [X31+80]
	220 Move D12, [X31+88]
	221 Move D15, [X31+64]
	222 Move D14, [X31+72]
	223 Add X31, X31, 192
	224 Return 
	225 Call 0x1C17F20
	226 Call 0x1C17F28

Method: System.Void ValidateColliderConfiguration()

Disassembly:
	0x03B559C0 BL 0x1C16F20
	0x03B559C4 LDR X8, [X0]
	0x03B559C8 LDR X3, [X8 + 0x538]
	0x03B559CC LDR X2, [X8 + 0x540]
	0x03B559D0 BR X3
	0x03B559D4 LDR X8, [X0]
	0x03B559D8 LDR X3, [X8 + 0x548]
	0x03B559DC LDR X2, [X8 + 0x550]
	0x03B559E0 BR X3
	0x03B559E4 STP X29, X30, [X31 - 0x60]!
	0x03B559E8 STP X28, X27, [X31 + 0x10]
	0x03B559EC STP X26, X25, [X31 + 0x20]
	0x03B559F0 STP X24, X23, [X31 + 0x30]
	0x03B559F4 STP X22, X21, [X31 + 0x40]
	0x03B559F8 STP X20, X19, [X31 + 0x50]
	0x03B559FC ADRP X20, 0x88D000
	0x03B55A00 ADRP X22, 0x605000
	0x03B55A04 ADRP X21, 0x605000
	0x03B55A08 ADRP X28, 0x605000
	0x03B55A0C ADRP X26, 0x605000
	0x03B55A10 ADRP X24, 0x605000
	0x03B55A14 LDRB W8, [X20 + 0x93A]
	0x03B55A18 LDR X22, [X22 + 0xE40]
	0x03B55A1C LDR X21, [X21 + 0xE48]
	0x03B55A20 LDR X28, [X28 + 0x830]
	0x03B55A24 LDR X26, [X26 + 0x828]
	0x03B55A28 LDR X24, [X24 + 0xE50]
	0x03B55A2C MOV X19, X0
	0x03B55A30 TBNZ X8, 0x0, 0x3B55A9C
	0x03B55A34 ADRP X0, 0x5A3000
	0x03B55A38 LDR X0, [X0 + 0x138]
	0x03B55A3C BL 0x1C16CF4
	0x03B55A40 ADRP X0, 0x605000
	0x03B55A44 LDR X0, [X0 + 0x828]
	0x03B55A48 BL 0x1C16CF4
	0x03B55A4C ADRP X0, 0x605000
	0x03B55A50 LDR X0, [X0 + 0x830]
	0x03B55A54 BL 0x1C16CF4
	0x03B55A58 ADRP X0, 0x605000
	0x03B55A5C LDR X0, [X0 + 0xE48]
	0x03B55A60 BL 0x1C16CF4
	0x03B55A64 ADRP X0, 0x605000
	0x03B55A68 LDR X0, [X0 + 0xE40]
	0x03B55A6C BL 0x1C16CF4
	0x03B55A70 ADRP X0, 0x5A4000
	0x03B55A74 LDR X0, [X0 + 0x488]
	0x03B55A78 BL 0x1C16CF4
	0x03B55A7C ADRP X0, 0x605000
	0x03B55A80 LDR X0, [X0 + 0xE50]
	0x03B55A84 BL 0x1C16CF4
	0x03B55A88 ADRP X0, 0x605000
	0x03B55A8C LDR X0, [X0 + 0x3A8]
	0x03B55A90 BL 0x1C16CF4
	0x03B55A94 MOVZ W8, 0x1
	0x03B55A98 STRB W8, [X20 + 0x93A]
	0x03B55A9C ADRP X29, 0x5A3000
	0x03B55AA0 ADRP X27, 0x5A4000
	0x03B55AA4 ADRP X23, 0x605000
	0x03B55AA8 LDR X29, [X29 + 0x138]
	0x03B55AAC LDR X27, [X27 + 0x488]
	0x03B55AB0 LDR X23, [X23 + 0x3A8]
	0x03B55AB4 MOVZ W0, 0x1
	0x03B55AB8 MOV X1, X31
	0x03B55ABC MOVZ W25, 0x1
	0x03B55AC0 BL 0x3C35CBC
	0x03B55AC4 STR W0, [X19 + 0x294]
	0x03B55AC8 STR W25, [X19 + 0x298]
	0x03B55ACC LDR X0, [X22]
	0x03B55AD0 BL 0x1C16F10
	0x03B55AD4 LDR X1, [X21]
	0x03B55AD8 MOV X20, X0
	0x03B55ADC BL 0x301B7C4
	0x03B55AE0 STR X20, [X19 + 0x2A0]
	0x03B55AE4 LDR X0, [X28]
	0x03B55AE8 BL 0x1C16F10
	0x03B55AEC LDR X1, [X26]
	0x03B55AF0 MOV X20, X0
	0x03B55AF4 BL 0x2DBDE08
	0x03B55AF8 STR X20, [X19 + 0x2A8]
	0x03B55AFC LDR X0, [X24]
	0x03B55B00 BL 0x1C16F10
	0x03B55B04 MOV X1, X31
	0x03B55B08 MOV X20, X0
	0x03B55B0C BL 0x3B915A4
	0x03B55B10 STR X20, [X19 + 0x2B0]
	0x03B55B14 ADRP X20, 0x883000
	0x03B55B18 LDRB W8, [X20 + 0x783]
	0x03B55B1C CBNZ W8, 0x3B55B30
	0x03B55B20 ADRP X0, 0x59E000
	0x03B55B24 LDR X0, [X0 + 0x5A0]
	0x03B55B28 BL 0x1C16CF4
	0x03B55B2C STRB W25, [X20 + 0x783]
	0x03B55B30 ADRP X8, 0x59E000
	0x03B55B34 LDR X8, [X8 + 0x5A0]
	0x03B55B38 MOVZ W1, 0x19
	0x03B55B3C LDR X8, [X8]
	0x03B55B40 LDR X8, [X8 + 0xB8]
	0x03B55B44 LDR V0, [X8]
	0x03B55B48 LDR V1, [X8 + 0x8]
	0x03B55B4C ADD X8, X19, 0x2D4
	0x03B55B50 STR D0, [X8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x88E000
	007 Move X20, 0x5A3000
	008 Move W8, [X21+2355]
	009 Move X20, [X20+304]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0x5C9000
	016 Move X0, [X0+4048]
	017 Call 0x1C17CF4
	018 Move X0, 0x5A3000
	019 Move X0, [X0+304]
	020 Call 0x1C17CF4
	021 Move X0, 0x59F000
	022 Move X0, [X0+2600]
	023 Call 0x1C17CF4
	024 Move X0, 0x5A5000
	025 Move X0, [X0+200]
	026 Call 0x1C17CF4
	027 Move X0, 0x606000
	028 Move X0, [X0+3552]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+2355], W8
	032 Move X2, [X20]
	033 Add X1, X31, 8
	034 Move X0, X19
	035 Move [X31+8], X31
	036 Call 0x21A5990, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {106}
	041 Move X8, 0x5C9000
	042 Move X8, [X8+4048]
	043 Move X0, X19
	044 Move X1, [X8]
	045 Call 0x21A53A8, X0
	046 Move W8, [X19+656]
	047 Move X20, X0
	048 Compare W8, 0
	049 JumpIfEqual {74}
	050 Compare X20, 0
	051 JumpIfEqual {113}
	052 Move W8, [X20+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X0, [X20+32]
	055 Compare X0, 0
	056 JumpIfEqual {76}
	057 Move X8, 0x5A5000
	058 Move X8, [X8+200]
	059 Move X9, [X0]
	060 Move X8, [X8]
	061 Move W11, [X9+304]
	062 Move W10, [X8+304]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X9, [X9+200]
	065 Add X9, X9, X10
	066 NotImplemented "Instruction LDUR not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W1, W31
	069 Move X2, X31
	070 Move [X19+712], X0
	071 Call Collider.set_enabled, X0, X1
	072 Move W8, 1
	073 Move [X19+704], W8
	074 Compare X20, 0
	075 JumpIfEqual {113}
	076 Move W8, [X20+24]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move W21, W31
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Add X8, X20, W21
	081 Move X0, [X8+32]
	082 Compare X0, 0
	083 JumpIfEqual {113}
	084 Move X1, X31
	085 Call Collider.get_isTrigger, X0
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfEqual {106}
	090 Move W8, [X20+24]
	091 Add W21, W21, 1
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X8, 0x59F000
	094 Move X8, [X8+2600]
	095 Move X0, [X8]
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1C17DFC
	100 Move X8, 0x606000
	101 Move X8, [X8+3552]
	102 Move X1, X19
	103 Move X2, X31
	104 Move X0, [X8]
	105 Call Debug.LogWarning, X0, X1
	106 Move X20, [X31+32]
	107 Move X19, [X31+40]
	108 Move X30, [X31+16]
	109 Move X21, [X31+24]
	110 Add X31, X31, 48
	111 Return 
	112 Call 0x1C17F28
	113 Call 0x1C17F20

Method: System.Void GetValidTargets(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.IXRInteractable> targets)

Disassembly:
	0x03B5630C ADD X31, X31, 0x50
	0x03B56310 RET
	0x03B56314 BL 0x1C16F20
	0x03B56318 STR X30, [X31 - 0x30]!
	0x03B5631C STP X22, X21, [X31 + 0x10]
	0x03B56320 STP X20, X19, [X31 + 0x20]
	0x03B56324 ADRP X21, 0x88C000
	0x03B56328 ADRP X22, 0x604000
	0x03B5632C LDRB W8, [X21 + 0x940]
	0x03B56330 LDR X22, [X22 + 0x148]
	0x03B56334 MOV X20, X1
	0x03B56338 MOV X19, X0
	0x03B5633C TBNZ X8, 0x0, 0x3B56360
	0x03B56340 ADRP X0, 0x604000
	0x03B56344 LDR X0, [X0 + 0x148]
	0x03B56348 BL 0x1C16CF4
	0x03B5634C ADRP X0, 0x604000
	0x03B56350 LDR X0, [X0 + 0x160]
	0x03B56354 BL 0x1C16CF4
	0x03B56358 MOVZ W8, 0x1
	0x03B5635C STRB W8, [X21 + 0x940]
	0x03B56360 LDR X1, [X22]
	0x03B56364 MOV X0, X20
	0x03B56368 BL 0x1C16E00
	0x03B5636C CBZ X0, 0x3B5639C
	0x03B56370 MOV X2, X0
	0x03B56374 LDR X0, [X19 + 0x30]
	0x03B56378 CBZ X0, 0x3B563F0
	0x03B5637C LDR X8, [X0]
	0x03B56380 MOV X1, X19
	0x03B56384 LDR X9, [X8 + 0x228]
	0x03B56388 LDR X3, [X8 + 0x230]
	0x03B5638C BLR X9
	0x03B56390 TBZ X0, 0x0, 0x3B5639C
	0x03B56394 MOVZ W0, 0x1
	0x03B56398 B 0x3B563E0
	0x03B5639C ADRP X8, 0x604000
	0x03B563A0 LDR X8, [X8 + 0x160]
	0x03B563A4 MOV X0, X20
	0x03B563A8 LDR X1, [X8]
	0x03B563AC BL 0x1C16E00
	0x03B563B0 CBZ X0, 0x3B563E0
	0x03B563B4 MOV X2, X0
	0x03B563B8 LDR X0, [X19 + 0x30]
	0x03B563BC CBZ X0, 0x3B563F0
	0x03B563C0 LDR X8, [X0]
	0x03B563C4 MOV X1, X19
	0x03B563C8 LDP X20, X19, [X31 + 0x20]
	0x03B563CC LDP X22, X21, [X31 + 0x10]
	0x03B563D0 LDR X4, [X8 + 0x238]
	0x03B563D4 LDR X3, [X8 + 0x240]
	0x03B563D8 LDR X30, [X31], #0x30
	0x03B563DC BR X4
	0x03B563E0 LDP X20, X19, [X31 + 0x20]
	0x03B563E4 LDP X22, X21, [X31 + 0x10]
	0x03B563E8 LDR X30, [X31], #0x30
	0x03B563EC RET
	0x03B563F0 BL 0x1C16F20
	0x03B563F4 SUB X31, X31, 0xD0
	0x03B563F8 STP D15, D14, [X31 + 0x60]
	0x03B563FC STP D13, D12, [X31 + 0x70]
	0x03B56400 STP D11, D10, [X31 + 0x80]
	0x03B56404 STP D9, D8, [X31 + 0x90]
	0x03B56408 STR X30, [X31 + 0xA0]
	0x03B5640C STP X22, X21, [X31 + 0xB0]
	0x03B56410 STP X20, X19, [X31 + 0xC0]
	0x03B56414 ADRP X21, 0x88C000
	0x03B56418 ADRP X22, 0x59D000
	0x03B5641C LDRB W8, [X21 + 0x93E]
	0x03B56420 LDR X22, [X22 + 0x598]
	0x03B56424 MOV X20, X1
	0x03B56428 MOV X19, X0
	0x03B5642C TBNZ X8, 0x0, 0x3B56474
	0x03B56430 ADRP X0, 0x604000
	0x03B56434 LDR X0, [X0 + 0x918]
	0x03B56438 BL 0x1C16CF4
	0x03B5643C ADRP X0, 0x604000
	0x03B56440 LDR X0, [X0 + 0x8D8]
	0x03B56444 BL 0x1C16CF4
	0x03B56448 ADRP X0, 0x59D000
	0x03B5644C LDR X0, [X0 + 0x598]
	0x03B56450 BL 0x1C16CF4
	0x03B56454 ADRP X0, 0x5A3000
	0x03B56458 LDR X0, [X0 + 0xC8]
	0x03B5645C BL 0x1C16CF4
	0x03B56460 ADRP X0, 0x604000
	0x03B56464 LDR X0, [X0 + 0x438]
	0x03B56468 BL 0x1C16CF4
	0x03B5646C MOVZ W8, 0x1
	0x03B56470 STRB W8, [X21 + 0x93E]
	0x03B56474 LDR X0, [X22]
	0x03B56478 STR W31, [X31 + 0x58]
	0x03B5647C STP X31, X31, [X31 + 0x48]
	0x03B56480 STP X31, X31, [X31 + 0x38]
	0x03B56484 STR W31, [X31 + 0x30]
	0x03B56488 STR X31, [X31 + 0x28]
	0x03B5648C STR W31, [X31 + 0xAC]
	0x03B56490 STRB W31, [X31 + 0xA8]
	0x03B56494 LDR W8, [X0 + 0xE0]
	0x03B56498 LDR X21, [X19 + 0x490]
	0x03B5649C CBNZ W8, 0x3B564A4
	0x03B564A0 BL 0x1C16DFC
	0x03B564A4 MOV X0, X21
	0x03B564A8 MOV X1, X31
	0x03B564AC MOV X2, X31
	0x03B564B0 BL 0x3C3883C
	0x03B564B4 TBNZ X0, 0x0, 0x3B56764
	0x03B564B8 ADRP X21, 0x882000
	0x03B564BC LDRB W8, [X21 + 0x783]
	0x03B564C0 CBNZ W8, 0x3B564D8
	0x03B564C4 ADRP X0, 0x59D000
	0x03B564C8 LDR X0, [X0 + 0x5A0]
	0x03B564CC BL 0x1C16CF4
	0x03B564D0 MOVZ W8, 0x1
	0x03B564D4 STRB W8, [X21 + 0x783]
	0x03B564D8 ADRP X8, 0x59D000
	0x03B564DC LDR X8, [X8 + 0x5A0]
	0x03B564E0 LDR V8, [X19 + 0x48C]
	0x03B564E4 FMOV S0, W31
	0x03B564E8 STR S0, [X31 + 0xC]
	0x03B564EC LDR X8, [X8]
	0x03B564F0 LDR X8, [X8 + 0xB8]
	0x03B564F4 LDP S9, S10, [X8]
	0x03B564F8 LDR V12, [X8 + 0x8]
	0x03B564FC CBZ X20, 0x3B565B4
	0x03B56500 ADRP X8, 0x604000
	0x03B56504 LDR X8, [X8 + 0x438]
	0x03B56508 LDR X9, [X20]
	0x03B5650C LDR X8, [X8]
	0x03B56510 LDRB W11, [X9 + 0x130]
	0x03B56514 LDRB W10, [X8 + 0x130]
	0x03B56518 CMP W11, W10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x88D000
	008 Move W8, [X21+2356]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x605000
	016 Move X0, [X0+3320]
	017 Call 0x1C17CF4
	018 Move X0, 0x605000
	019 Move X0, [X0+3592]
	020 Call 0x1C17CF4
	021 Move X0, 0x605000
	022 Move X0, [X0+3584]
	023 Call 0x1C17CF4
	024 Move X0, 0x5C7000
	025 Move X0, [X0+1272]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+2356], W8
	029 Compare X19, 0
	030 JumpIfEqual {157}
	031 Move W2, [X19+24]
	032 Move W8, [X19+28]
	033 Add W8, W8, 1
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move [X19+24], W31
	036 Move [X19+28], W8
	037 Move X0, [X19+16]
	038 Move W1, W31
	039 Move X3, X31
	040 Call Array.Clear, X0, X1, X2
	041 Move X0, X20
	042 Move X1, X31
	043 Call Behaviour.get_isActiveAndEnabled, X0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {133}
	048 Move X0, X20
	049 Call XRBaseInteractor.get_targetFilter, X0
	050 Compare X0, 0
	051 JumpIfEqual {95}
	052 Move X23, 0x605000
	053 Move X8, [X0]
	054 Move X23, [X23+3320]
	055 Move X21, X0
	056 NotImplemented "Instruction LDRH not yet implemented."
	057 Move X1, [X23]
	058 Compare X9, 0
	059 JumpIfEqual {66}
	060 Move X10, [X8+176]
	061 Add X10, X10, 8
	062 NotImplemented "Instruction LDUR not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Subtract X9, X9, 1
	065 Add X10, X10, 16
	066 Move X0, X21
	067 Move W2, W31
	068 Call 0x1C5D788
	069 NotImplemented "Instruction LDRSW not yet implemented."
	070 Add X8, X8, X9
	071 Add X0, X8, 312
	072 Move X8, [X0]
	073 Move X1, [X0+8]
	074 Move X0, X21
	075 NotImplemented "Instruction BLR not yet implemented."
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {95}
	080 Move X8, [X21]
	081 Move X22, [X20+672]
	082 Move X1, [X23]
	083 NotImplemented "Instruction LDRH not yet implemented."
	084 Compare X9, 0
	085 JumpIfEqual {92}
	086 Move X10, [X8+176]
	087 Add X10, X10, 8
	088 NotImplemented "Instruction LDUR not yet implemented."
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Subtract X9, X9, 1
	091 Add X10, X10, 16
	092 Move W2, 3
	093 Move X0, X21
	094 Call 0x1C5D788
	095 Move W8, [X20+753]
	096 Compare W8, 0
	097 JumpIfEqual {111}
	098 Move X8, 0x605000
	099 Move X1, [X20+760]
	100 Move X8, [X8+3592]
	101 Move X0, X19
	102 Move X20, [X31+32]
	103 Move X19, [X31+40]
	104 Move X22, [X31+16]
	105 Move X21, [X31+24]
	106 Move X2, [X8]
	107 Move X30, [X31+48]
	108 Move X23, [X31+56]
	109 Call List`1<Object>.AddRange, X0, X1
	110 Return 
	111 Move X8, 0x5C7000
	112 Move X8, [X8+1272]
	113 Move X21, [X20+672]
	114 Move X22, [X20+760]
	115 Move X0, [X8]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1C17DFC
	120 Move X0, X20
	121 Move X1, X21
	122 Move X2, X22
	123 Move X3, X31
	124 Call SortingHelpers.SortByDistanceToInteractor, X0, X1, X2
	125 Move X8, 0x605000
	126 Move X1, [X20+760]
	127 Move X8, [X8+3592]
	128 Move X0, X19
	129 Move X2, [X8]
	130 Call List`1<Object>.AddRange, X0, X1
	131 Move W8, 1
	132 Move [X20+753], W8
	133 Move X20, [X31+32]
	134 Move X19, [X31+40]
	135 Move X22, [X31+16]
	136 Move X21, [X31+24]
	137 Move X30, [X31+48]
	138 Move X23, [X31+56]
	139 Return 
	140 Move W9, [X10]
	141 Add W9, W9, 3
	142 Add X8, X8, W9
	143 Add X0, X8, 312
	144 Move X5, [X0]
	145 Move X4, [X0+8]
	146 Move X0, X21
	147 Move X1, X20
	148 Move X2, X22
	149 Move X3, X19
	150 Move X20, [X31+32]
	151 Move X19, [X31+40]
	152 Move X22, [X31+16]
	153 Move X21, [X31+24]
	154 Move X30, [X31+48]
	155 Move X23, [X31+56]
	156 CallNoReturn X5
	157 Call 0x1C17F20

Method: System.Boolean CanHover(UnityEngine.XR.Interaction.Toolkit.IXRHoverInteractable interactable)

Disassembly:
	0x03B5651C B.CC 0x3B565A8
	0x03B56520 LDR X9, [X9 + 0xC8]
	0x03B56524 ADD X9, X9, X10, 0x3, LSL
	0x03B56528 LDUR X9, [X9 - 0x8]
	0x03B5652C CMP X9, X8
	0x03B56530 B.NE 0x3B565A8
	0x03B56534 LDR X0, [X22]
	0x03B56538 LDR W8, [X0 + 0xE0]
	0x03B5653C CBNZ W8, 0x3B56544
	0x03B56540 BL 0x1C16DFC
	0x03B56544 MOV X0, X20
	0x03B56548 MOV X1, X31
	0x03B5654C MOV X2, X31
	0x03B56550 BL 0x3C354F8
	0x03B56554 TBZ X0, 0x0, 0x3B565A8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRBaseInteractor.get_hasSelection, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {18}
	011 Move X0, X20
	012 Move X1, X19
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+32]
	016 Call XRBaseInteractor.IsSelecting, X0, X1
	017 Return X0
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move W0, 1
	021 Move X30, [X31+32]
	022 Return X0

Method: System.Boolean CanSelect(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractable interactable)

Disassembly:
	0x03B56558 LDRB W8, [X20 + 0x78]
	0x03B5655C CBZ W8, 0x3B565A8
	0x03B56560 ADRP X10, 0x604000
	0x03B56564 LDR X8, [X20]
	0x03B56568 LDR X10, [X10 + 0x8D8]
	0x03B5656C LDRH W9, [X8 + 0x12E]
	0x03B56570 LDR X1, [X10]
	0x03B56574 CBZ X9, 0x3B56598
	0x03B56578 LDR X10, [X8 + 0xB0]
	0x03B5657C ADD X10, X10, 0x8
	0x03B56580 LDUR X11, [X10 - 0x8]
	0x03B56584 CMP X11, X1
	0x03B56588 B.EQ 0x3B56788
	0x03B5658C SUBS X9, X9, 0x1
	0x03B56590 ADD X10, X10, 0x10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRBaseInteractor.get_hasSelection, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {18}
	011 Move X0, X20
	012 Move X1, X19
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+32]
	016 Call XRBaseInteractor.IsSelecting, X0, X1
	017 Return X0
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move W0, 1
	021 Move X30, [X31+32]
	022 Return X0

Method: System.Void OnRegistered(UnityEngine.XR.Interaction.Toolkit.InteractorRegisteredEventArgs args)

Disassembly:
	0x03B56594 B.NE 0x3B56580
	0x03B56598 MOVZ W2, 0x6
	0x03B5659C MOV X0, X20
	0x03B565A0 BL 0x1C5C788
	0x03B565A4 B 0x3B56798
	0x03B565A8 MOV X21, X31
	0x03B565AC MOV X20, X31
	0x03B565B0 B 0x3B565B8
	0x03B565B4 MOV X21, X31
	0x03B565B8 LDRB W8, [X19 + 0x498]
	0x03B565BC CBZ W8, 0x3B5666C
	0x03B565C0 MOV X0, X19
	0x03B565C4 MOV X1, X31
	0x03B565C8 BL 0x3C32E90
	0x03B565CC CBZ X0, 0x3B56834
	0x03B565D0 MOV X1, X31
	0x03B565D4 BL 0x3C3F58C
	0x03B565D8 ADRP X22, 0x882000
	0x03B565DC LDRB W8, [X22 + 0x85C]
	0x03B565E0 MOV V13.16B, V0.16B
	0x03B565E4 MOV V14.16B, V1.16B
	0x03B565E8 MOV V15.16B, V2.16B
	0x03B565EC CBNZ W8, 0x3B56604
	0x03B565F0 ADRP X0, 0x59D000
	0x03B565F4 LDR X0, [X0 + 0x5A8]
	0x03B565F8 BL 0x1C16CF4
	0x03B565FC MOVZ W8, 0x1
	0x03B56600 STRB W8, [X22 + 0x85C]
	0x03B56604 ADRP X8, 0x59D000
	0x03B56608 LDR X8, [X8 + 0x5A8]
	0x03B5660C FSUB S11, S13, S9
	0x03B56610 FSUB S14, S14, S10
	0x03B56614 FSUB S13, S15, S12
	0x03B56618 LDR X0, [X8]
	0x03B5661C LDR W8, [X0 + 0xE0]
	0x03B56620 CBNZ W8, 0x3B56628
	0x03B56624 BL 0x1C16DFC
	0x03B56628 FMUL S0, S11, S11
	0x03B5662C FMUL S1, S14, S14
	0x03B56630 LDRB W8, [X19 + 0x499]
	0x03B56634 FADD S0, S0, S1
	0x03B56638 FMUL S1, S13, S13
	0x03B5663C FADD S0, S1, S0
	0x03B56640 FSQRT S0, S0
	0x03B56644 FMUL S0, S8, S0
	0x03B56648 CBZ W8, 0x3B56668
	0x03B5664C FCMP S0, 0x0
	0x03B56650 FMOV S8, W31
	0x03B56654 B.MI 0x3B5666C
	0x03B56658 LDR V1, [X19 + 0x49C]
	0x03B5665C FCMP S0, S1
	0x03B56660 FCSEL S8, S1, S0, GT
	0x03B56664 B 0x3B5666C
	0x03B56668 MOV V8.16B, V0.16B
	0x03B5666C LDR X0, [X19 + 0x490]
	0x03B56670 CBZ X0, 0x3B56834
	0x03B56674 MOV X1, X31
	0x03B56678 BL 0x3C32E90
	0x03B5667C CBZ X0, 0x3B56834
	0x03B56680 MOV V0.16B, V9.16B
	0x03B56684 MOV V1.16B, V10.16B
	0x03B56688 MOV V2.16B, V12.16B
	0x03B5668C MOV X1, X31
	0x03B56690 MOV X22, X0
	0x03B56694 BL 0x3C3F62C
	0x03B56698 MOV X0, X22
	0x03B5669C MOV V0.16B, V8.16B
	0x03B566A0 MOV V1.16B, V8.16B
	0x03B566A4 MOV V2.16B, V8.16B
	0x03B566A8 MOV X1, X31
	0x03B566AC BL 0x3C3FC4C
	0x03B566B0 LDR X8, [X19 + 0x490]
	0x03B566B4 CBZ X8, 0x3B56834
	0x03B566B8 LDR X0, [X8 + 0x30]
	0x03B566BC CBZ X0, 0x3B56744
	0x03B566C0 ADRP X9, 0x5A3000
	0x03B566C4 LDR X9, [X9 + 0xC8]
	0x03B566C8 LDR X8, [X0]
	0x03B566CC LDR X10, [X9]
	0x03B566D0 LDRB W9, [X8 + 0x130]
	0x03B566D4 LDRB W11, [X10 + 0x130]
	0x03B566D8 CMP W9, W11
	0x03B566DC B.CC 0x3B566F4
	0x03B566E0 LDR X12, [X8 + 0xC8]
	0x03B566E4 ADD X11, X12, X11, 0x3, LSL
	0x03B566E8 LDUR X11, [X11 - 0x8]
	0x03B566EC CMP X11, X10
	0x03B566F0 B.EQ 0x3B56738
	0x03B566F4 ADRP X10, 0x604000
	0x03B566F8 LDR X10, [X10 + 0x918]
	0x03B566FC LDR X10, [X10]
	0x03B56700 LDRB W11, [X10 + 0x130]
	0x03B56704 CMP W9, W11
	0x03B56708 B.CC 0x3B56744

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x88D000
	009 Move W8, [X21+2357]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x605000
	017 Move X0, [X0+584]
	018 Call 0x1C17CF4
	019 Move X0, 0x605000
	020 Move X0, [X0+592]
	021 Call 0x1C17CF4
	022 Move X0, 0x605000
	023 Move X0, [X0+3600]
	024 Call 0x1C17CF4
	025 Move X0, 0x605000
	026 Move X0, [X0+3608]
	027 Call 0x1C17CF4
	028 Move X0, 0x605000
	029 Move X0, [X0+3616]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+2357], W8
	033 Move X0, X20
	034 Move X1, X19
	035 Call XRBaseInteractor.OnRegistered, X0, X1
	036 Compare X19, 0
	037 JumpIfEqual {113}
	038 Move X8, 0x605000
	039 Move X8, [X8+584]
	040 Move X22, 0x605000
	041 Move X21, [X19+16]
	042 Move X0, [X8]
	043 Move X22, [X22+3600]
	044 Call 0x1C17F10
	045 Move X2, [X22]
	046 Move X1, X20
	047 Move X3, X31
	048 Move X22, X0
	049 Call Action`1<Object>..ctor, X0, X1, X2
	050 Compare X21, 0
	051 JumpIfEqual {113}
	052 Move X23, 0x605000
	053 Move X24, 0x605000
	054 Move X23, [X23+592]
	055 Move X24, [X24+3608]
	056 Move X0, X21
	057 Move X1, X22
	058 Move X2, X31
	059 Call XRInteractionManager.add_interactableRegistered, X0, X1
	060 Move X0, [X23]
	061 Move X21, [X19+16]
	062 Call 0x1C17F10
	063 Move X2, [X24]
	064 Move X1, X20
	065 Move X3, X31
	066 Move X22, X0
	067 Call Action`1<Object>..ctor, X0, X1, X2
	068 Compare X21, 0
	069 JumpIfEqual {113}
	070 Move X0, X21
	071 Move X1, X22
	072 Move X2, X31
	073 Call XRInteractionManager.add_interactableUnregistered, X0, X1
	074 Move X0, [X20+688]
	075 Compare X0, 0
	076 JumpIfEqual {113}
	077 Move X8, [X19+16]
	078 Move [X0+32], X8
	079 Move W8, [X20+704]
	080 Compare W8, 0
	081 JumpIfEqual {90}
	082 Move X20, [X31+48]
	083 Move X19, [X31+56]
	084 Move X22, [X31+32]
	085 Move X21, [X31+40]
	086 Move X24, [X31+16]
	087 Move X23, [X31+24]
	088 Move X30, [X31+64]
	089 Return 
	090 Move X1, X31
	091 Call TriggerContactMonitor.ResolveUnassociatedColliders, X0
	092 Move X8, 0x605000
	093 Move X8, [X8+3616]
	094 Move X19, [X19+16]
	095 Move X20, [X20+672]
	096 Move X0, [X8]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {101}
	100 Call 0x1C17DFC
	101 Move X0, X19
	102 Move X1, X20
	103 Move X20, [X31+48]
	104 Move X19, [X31+56]
	105 Move X22, [X31+32]
	106 Move X21, [X31+40]
	107 Move X24, [X31+16]
	108 Move X23, [X31+24]
	109 Move X2, X31
	110 Move X30, [X31+64]
	111 Call XRInteractionManager.RemoveAllUnregistered, X0, X1
	112 Return 
	113 Call 0x1C17F20

Method: System.Void OnUnregistered(UnityEngine.XR.Interaction.Toolkit.InteractorUnregisteredEventArgs args)

Disassembly:
	0x03B5670C LDR X8, [X8 + 0xC8]
	0x03B56710 ADD X8, X8, X11, 0x3, LSL
	0x03B56714 LDUR X8, [X8 - 0x8]
	0x03B56718 CMP X8, X10
	0x03B5671C B.NE 0x3B56744
	0x03B56720 LDR V0, [X31 + 0xC]
	0x03B56724 MOV X1, X31
	0x03B56728 MOV V1.16B, V0.16B
	0x03B5672C MOV V2.16B, V0.16B
	0x03B56730 BL 0x3C8FFEC
	0x03B56734 B 0x3B56744
	0x03B56738 LDR V0, [X31 + 0xC]
	0x03B5673C MOV X1, X31
	0x03B56740 BL 0x3C90160
	0x03B56744 LDR X0, [X19 + 0x490]
	0x03B56748 CBZ X0, 0x3B56834
	0x03B5674C MOV X1, X20
	0x03B56750 MOV X2, X31
	0x03B56754 BL 0x3B4676C
	0x03B56758 LDR X8, [X19 + 0x490]
	0x03B5675C CBZ X8, 0x3B56834
	0x03B56760 STR X21, [X8 + 0x40]
	0x03B56764 LDP X20, X19, [X31 + 0xC0]
	0x03B56768 LDP X22, X21, [X31 + 0xB0]
	0x03B5676C LDR X30, [X31 + 0xA0]
	0x03B56770 LDP D9, D8, [X31 + 0x90]
	0x03B56774 LDP D11, D10, [X31 + 0x80]
	0x03B56778 LDP D13, D12, [X31 + 0x70]
	0x03B5677C LDP D15, D14, [X31 + 0x60]
	0x03B56780 ADD X31, X31, 0xD0
	0x03B56784 RET
	0x03B56788 LDR W9, [X10]
	0x03B5678C ADD W9, W9, 0x6
	0x03B56790 ADD X8, X8, W9, 0x4, SXTW
	0x03B56794 ADD X0, X8, 0x138
	0x03B56798 LDP X8, X1, [X0]
	0x03B5679C MOV X0, X20
	0x03B567A0 BLR X8
	0x03B567A4 CBZ X0, 0x3B56834
	0x03B567A8 MOV X1, X31
	0x03B567AC BL 0x3C3F58C
	0x03B567B0 ADD X1, X31, 0x50
	0x03B567B4 ADD X2, X31, 0x28
	0x03B567B8 ADD X3, X31, 0xAC
	0x03B567BC ADD X4, X31, 0xA8
	0x03B567C0 MOV X0, X19
	0x03B567C4 MOV V9.16B, V0.16B
	0x03B567C8 MOV V10.16B, V1.16B
	0x03B567CC MOV V12.16B, V2.16B
	0x03B567D0 BL 0x3B56838
	0x03B567D4 TBZ X0, 0x0, 0x3B5681C
	0x03B567D8 LDP S0, S1, [X31 + 0x50]
	0x03B567DC LDR V2, [X31 + 0x58]
	0x03B567E0 ADD X1, X31, 0x38
	0x03B567E4 MOV X0, X20
	0x03B567E8 MOV X2, X31
	0x03B567EC BL 0x3B8E728
	0x03B567F0 MOV X21, X31
	0x03B567F4 TBZ X0, 0x0, 0x3B56820
	0x03B567F8 LDR X21, [X31 + 0x48]
	0x03B567FC CBZ X21, 0x3B56834
	0x03B56800 ADD X8, X31, 0x10
	0x03B56804 MOV X0, X21
	0x03B56808 MOV X1, X31
	0x03B5680C BL 0x3C8F8C8
	0x03B56810 LDP S9, S10, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x88D000
	009 Move W8, [X21+2358]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x605000
	017 Move X0, [X0+584]
	018 Call 0x1C17CF4
	019 Move X0, 0x605000
	020 Move X0, [X0+592]
	021 Call 0x1C17CF4
	022 Move X0, 0x605000
	023 Move X0, [X0+3600]
	024 Call 0x1C17CF4
	025 Move X0, 0x605000
	026 Move X0, [X0+3608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+2358], W8
	030 Move X0, X19
	031 Move X1, X20
	032 Call XRBaseInteractor.OnUnregistered, X0, X1
	033 Compare X20, 0
	034 JumpIfEqual {79}
	035 Move X8, 0x605000
	036 Move X8, [X8+584]
	037 Move X22, 0x605000
	038 Move X21, [X20+16]
	039 Move X0, [X8]
	040 Move X22, [X22+3600]
	041 Call 0x1C17F10
	042 Move X2, [X22]
	043 Move X1, X19
	044 Move X3, X31
	045 Move X22, X0
	046 Call Action`1<Object>..ctor, X0, X1, X2
	047 Compare X21, 0
	048 JumpIfEqual {79}
	049 Move X23, 0x605000
	050 Move X24, 0x605000
	051 Move X23, [X23+592]
	052 Move X24, [X24+3608]
	053 Move X0, X21
	054 Move X1, X22
	055 Move X2, X31
	056 Call XRInteractionManager.remove_interactableRegistered, X0, X1
	057 Move X0, [X23]
	058 Move X20, [X20+16]
	059 Call 0x1C17F10
	060 Move X2, [X24]
	061 Move X1, X19
	062 Move X3, X31
	063 Move X21, X0
	064 Call Action`1<Object>..ctor, X0, X1, X2
	065 Compare X20, 0
	066 JumpIfEqual {79}
	067 Move X0, X20
	068 Move X1, X21
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X24, [X31+16]
	074 Move X23, [X31+24]
	075 Move X2, X31
	076 Move X30, [X31+64]
	077 Call XRInteractionManager.remove_interactableUnregistered, X0, X1
	078 Return 
	079 Call 0x1C17F20

Method: System.Void OnInteractableRegistered(UnityEngine.XR.Interaction.Toolkit.InteractableRegisteredEventArgs args)

Disassembly:
	0x03B56814 LDR V12, [X31 + 0x18]
	0x03B56818 B 0x3B56820
	0x03B5681C MOV X21, X31
	0x03B56820 MOV X0, X19
	0x03B56824 MOV X1, X21
	0x03B56828 BL 0x3B56AF8
	0x03B5682C STR S0, [X31 + 0xC]
	0x03B56830 B 0x3B565B8
	0x03B56834 BL 0x1C16F20
	0x03B56838 STR X29, [X31 - 0x50]!
	0x03B5683C STP X30, X25, [X31 + 0x10]
	0x03B56840 STP X24, X23, [X31 + 0x20]
	0x03B56844 STP X22, X21, [X31 + 0x30]
	0x03B56848 STP X20, X19, [X31 + 0x40]
	0x03B5684C SUB X31, X31, 0x1C0
	0x03B56850 ADRP X25, 0x88C000
	0x03B56854 LDRB W8, [X25 + 0x994]
	0x03B56858 MOV X19, X4
	0x03B5685C MOV X20, X3
	0x03B56860 MOV X22, X2
	0x03B56864 MOV X23, X1
	0x03B56868 MOV X21, X0
	0x03B5686C ADD X24, X31, 0xA0
	0x03B56870 TBNZ X8, 0x0, 0x3B568B8
	0x03B56874 ADRP X0, 0x604000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {33}
	006 Move X19, X0
	007 Move X0, [X0+688]
	008 Compare X0, 0
	009 JumpIfEqual {33}
	010 Move X20, [X1+24]
	011 Move X2, X31
	012 Move X1, X20
	013 Call TriggerContactMonitor.ResolveUnassociatedColliders, X0, X1
	014 Move X0, [X19+688]
	015 Compare X0, 0
	016 JumpIfEqual {33}
	017 Move X1, X20
	018 Move X2, X31
	019 Call TriggerContactMonitor.IsContacting, X0, X1
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {29}
	024 Move X0, X19
	025 Move X1, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return 
	033 Call 0x1C17F20

Method: System.Void OnInteractableUnregistered(UnityEngine.XR.Interaction.Toolkit.InteractableUnregisteredEventArgs args)

Disassembly:
	0x03B56948 ADD X0, X31, 0x130
	0x03B5694C LDR X1, [X21]
	0x03B56950 BL 0x2438BA4
	0x03B56954 ADD X0, X31, 0xA0
	0x03B56958 ADD X1, X31, 0x50
	0x03B5695C MOVZ W2, 0x50

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {6}
	004 Move X1, [X1+24]
	005 Move X30, [X31+16]
	006 Call 0x1C17F20

Method: System.Void OnContactAdded(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)

Disassembly:
	0x03B56878 LDR X0, [X0 + 0xEA8]
	0x03B5687C BL 0x1C16CF4
	0x03B56880 ADRP X0, 0x604000
	0x03B56884 LDR X0, [X0 + 0xA08]
	0x03B56888 BL 0x1C16CF4
	0x03B5688C ADRP X0, 0x604000
	0x03B56890 LDR X0, [X0 + 0xB00]
	0x03B56894 BL 0x1C16CF4
	0x03B56898 ADRP X0, 0x604000
	0x03B5689C LDR X0, [X0 + 0xA10]
	0x03B568A0 BL 0x1C16CF4
	0x03B568A4 ADRP X0, 0x59D000
	0x03B568A8 LDR X0, [X0 + 0x598]
	0x03B568AC BL 0x1C16CF4
	0x03B568B0 MOVZ W8, 0x1
	0x03B568B4 STRB W8, [X25 + 0x994]
	0x03B568B8 MOVI V0.2D, 0x0
	0x03B568BC ADD X1, X31, 0x190
	0x03B568C0 ADD X2, X31, 0x18C
	0x03B568C4 ADD X3, X31, 0x130
	0x03B568C8 ADD X4, X31, 0x12C
	0x03B568CC ADD X5, X31, 0x128
	0x03B568D0 MOV X0, X21
	0x03B568D4 STR W31, [X31 + 0x18C]
	0x03B568D8 STR X31, [X31 + 0x180]
	0x03B568DC STR W31, [X31 + 0x12C]
	0x03B568E0 STRB W31, [X31 + 0x128]
	0x03B568E4 STR X31, [X31 + 0x120]
	0x03B568E8 STP V0, V0, [X31 + 0x1A0]
	0x03B568EC STR V0, [X31 + 0x19]
	0x03B568F0 STP V0, V0, [X31 + 0x160]
	0x03B568F4 STP V0, V0, [X31 + 0x140]
	0x03B568F8 STR V0, [X31 + 0x13]
	0x03B568FC STUR V0, [X24 + 0x6C]
	0x03B56900 STP V0, V0, [X31 + 0xF0]
	0x03B56904 STR W31, [X23 + 0x8]
	0x03B56908 STR X31, [X23]
	0x03B5690C STR W31, [X22 + 0x8]
	0x03B56910 STR X31, [X22]
	0x03B56914 STR W31, [X20]
	0x03B56918 STRB W31, [X19]
	0x03B5691C BL 0x3B4B59C
	0x03B56920 MOV W8, W0
	0x03B56924 MOV W0, W31
	0x03B56928 TBZ X8, 0x0, 0x3B569F4
	0x03B5692C LDRB W8, [X31 + 0x130]
	0x03B56930 LDRB W9, [X31 + 0x128]
	0x03B56934 ANDS W31, W9, W8, 0x0
	0x03B56938 B.EQ 0x3B56A10
	0x03B5693C ADRP X21, 0x604000
	0x03B56940 LDR X21, [X21 + 0xB00]
	0x03B56944 ADD X8, X31, 0x50

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x88D000
	006 Move W8, [X21+2359]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x605000
	014 Move X0, [X0+3624]
	015 Call 0x1C17CF4
	016 Move X0, 0x605000
	017 Move X0, [X0+3632]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2359], W8
	021 Move X0, [X19+672]
	022 Compare X0, 0
	023 JumpIfEqual {63}
	024 Move X8, 0x605000
	025 Move X8, [X8+3632]
	026 Move X1, X20
	027 Move X2, [X8]
	028 Call List`1<Object>.Contains, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {58}
	033 Move X0, [X19+672]
	034 Compare X0, 0
	035 JumpIfEqual {63}
	036 Move X9, 0x605000
	037 Move X9, [X9+3624]
	038 Move W10, [X0+28]
	039 Move X8, [X0+16]
	040 Move X9, [X9]
	041 Add W10, W10, 1
	042 Move [X0+28], W10
	043 Compare X8, 0
	044 JumpIfEqual {63}
	045 NotImplemented "Instruction LDRSW not yet implemented."
	046 Move W11, [X8+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Add W9, W10, 1
	049 Add X8, X8, X10
	050 Move [X0+24], W9
	051 Move [X8+32], X20
	052 Move X8, [X9+32]
	053 Move X1, X20
	054 Move X8, [X8+192]
	055 Move X2, [X8+112]
	056 Call List`1<Object>.AddWithResize, X0, X1
	057 Move [X19+753], W31
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Return 
	063 Call 0x1C17F20

Method: System.Void OnContactRemoved(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)

Disassembly:
	0x03B56960 BL 0x3EB1AC0
	0x03B56964 LDR W8, [X31 + 0xD4]
	0x03B56968 LDUR X9, [X24 + 0x2C]
	0x03B5696C ADD X0, X31, 0x130
	0x03B56970 STR W8, [X23 + 0x8]
	0x03B56974 STR X9, [X23]
	0x03B56978 LDR X1, [X21]
	0x03B5697C ADD X8, X31, 0x0
	0x03B56980 BL 0x2438BA4
	0x03B56984 ADD X0, X31, 0x50
	0x03B56988 ADD X1, X31, 0x0
	0x03B5698C MOVZ W2, 0x50
	0x03B56990 BL 0x3EB1AC0
	0x03B56994 LDR X8, [X31 + 0x88]
	0x03B56998 LDR W9, [X31 + 0x90]
	0x03B5699C ADD X0, X31, 0x130
	0x03B569A0 STR X8, [X22]
	0x03B569A4 STR W9, [X22 + 0x8]
	0x03B569A8 LDR W8, [X31 + 0x12C]
	0x03B569AC STR W8, [X20]
	0x03B569B0 LDR X1, [X21]
	0x03B569B4 ADD X8, X31, 0x0
	0x03B569B8 BL 0x2438BA4
	0x03B569BC ADRP X8, 0x59D000
	0x03B569C0 LDR X8, [X8 + 0x598]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x88D000
	006 Move W8, [X21+2360]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x605000
	014 Move X0, [X0+3640]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2360], W8
	018 Move X0, [X19+672]
	019 Compare X0, 0
	020 JumpIfEqual {36}
	021 Move X8, 0x605000
	022 Move X8, [X8+3640]
	023 Move X1, X20
	024 Move X2, [X8]
	025 Call List`1<Object>.Remove, X0, X1
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {31}
	030 Move [X19+753], W31
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return 
	036 Call 0x1C17F20

Method: System.Void ResetCollidersAndValidTargets()

Disassembly:
	0x03B55C6C CBNZ W8, 0x3B55CD4
	0x03B55C70 MOVN W8, 0x0
	0x03B55C74 STR W8, [X19 + 0x10]
	0x03B55C78 B 0x3B55CA0
	0x03B55C7C LDR X8, [X19 + 0x20]
	0x03B55C80 MOVN W9, 0x0
	0x03B55C84 STR W9, [X19 + 0x10]
	0x03B55C88 CBZ X8, 0x3B55CE4
	0x03B55C8C LDR X0, [X8 + 0x2B0]
	0x03B55C90 CBZ X0, 0x3B55CE4
	0x03B55C94 LDR X1, [X8 + 0x2A8]
	0x03B55C98 MOV X2, X31
	0x03B55C9C BL 0x3B90FF0
	0x03B55CA0 ADRP X20, 0x605000
	0x03B55CA4 LDR X20, [X20 + 0xE60]
	0x03B55CA8 LDR X0, [X20]
	0x03B55CAC LDR W8, [X0 + 0xE0]
	0x03B55CB0 CBNZ W8, 0x3B55CBC
	0x03B55CB4 BL 0x1C16DFC
	0x03B55CB8 LDR X0, [X20]
	0x03B55CBC LDR X8, [X0 + 0xB8]
	0x03B55CC0 MOVZ W0, 0x1
	0x03B55CC4 LDR X8, [X8]
	0x03B55CC8 STR W0, [X19 + 0x10]
	0x03B55CCC STR X8, [X19 + 0x18]
	0x03B55CD0 B 0x3B55CD8
	0x03B55CD4 MOV W0, W31
	0x03B55CD8 LDP X20, X19, [X31 + 0x10]
	0x03B55CDC LDR X30, [X31], #0x20
	0x03B55CE0 RET
	0x03B55CE4 BL 0x1C16F20
	0x03B55CE8 LDR X0, [X0 + 0x18]
	0x03B55CEC RET
	0x03B55CF0 STP X30, X19, [X31 - 0x10]!
	0x03B55CF4 ADRP X0, 0x59E000
	0x03B55CF8 LDR X0, [X0 + 0xB40]
	0x03B55CFC BL 0x1C16D08
	0x03B55D00 BL 0x1C16F10
	0x03B55D04 MOV X1, X31
	0x03B55D08 MOV X19, X0
	0x03B55D0C BL 0x3380310
	0x03B55D10 ADRP X0, 0x605000
	0x03B55D14 LDR X0, [X0 + 0xE68]
	0x03B55D18 BL 0x1C16D08
	0x03B55D1C MOV X1, X0
	0x03B55D20 MOV X0, X19
	0x03B55D24 BL 0x1C16DEC
	0x03B55D28 LDR X0, [X0 + 0x18]
	0x03B55D2C RET
	0x03B55D30 LDR W0, [X0 + 0x484]
	0x03B55D34 RET
	0x03B55D38 STR W1, [X0 + 0x484]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x88E000
	005 Move W8, [X20+2361]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x606000
	012 Move X0, [X0+1928]
	013 Call 0x1C17CF4
	014 Move X0, 0x606000
	015 Move X0, [X0+3584]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2361], W8
	019 Move X8, [X19+672]
	020 Compare X8, 0
	021 JumpIfEqual {64}
	022 Move W2, [X8+24]
	023 Move W9, [X8+28]
	024 Add W9, W9, 1
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move [X8+24], W31
	027 Move [X8+28], W9
	028 Move X0, [X8+16]
	029 Move W1, W31
	030 Move X3, X31
	031 Call Array.Clear, X0, X1, X2
	032 Move X8, [X19+760]
	033 Compare X8, 0
	034 JumpIfEqual {64}
	035 Move W2, [X8+24]
	036 Move W9, [X8+28]
	037 Add W9, W9, 1
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move [X8+24], W31
	040 Move [X8+28], W9
	041 Move X0, [X8+16]
	042 Move W1, W31
	043 Move X3, X31
	044 Call Array.Clear, X0, X1, X2
	045 Move X0, [X19+680]
	046 Move W8, 1
	047 NotImplemented "Instruction STRH not yet implemented."
	048 Compare X0, 0
	049 JumpIfEqual {64}
	050 Move X8, 0x606000
	051 Move X8, [X8+1928]
	052 Move X1, [X8]
	053 Call HashSet`1<Object>.Clear, X0
	054 Move X0, [X19+688]
	055 Compare X0, 0
	056 JumpIfEqual {64}
	057 Move X1, [X19+680]
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X2, X31
	061 Move X30, [X31+32]
	062 Call TriggerContactMonitor.UpdateStayedColliders, X0, X1
	063 Return 
	064 Call 0x1C17F20

Method: System.Boolean CanHover(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)

Disassembly:
	0x03B569C4 LDR X20, [X31]
	0x03B569C8 LDR X0, [X8]
	0x03B569CC LDR W8, [X0 + 0xE0]
	0x03B569D0 CBNZ W8, 0x3B569D8

ISIL:
	001 Move X8, [X0]
	002 Move X3, [X8+1336]
	003 Move X2, [X8+1344]
	004 CallNoReturn X3

Method: System.Boolean CanSelect(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)

Disassembly:
	0x03B569D4 BL 0x1C16DFC
	0x03B569D8 MOV X0, X20
	0x03B569DC MOV X1, X31
	0x03B569E0 MOV X2, X31

ISIL:
	001 Move X8, [X0]
	002 Move X3, [X8+1352]
	003 Move X2, [X8+1360]
	004 CallNoReturn X3

Method: System.Void .ctor()

Disassembly:
	0x03B569E4 BL 0x3C354F8
	0x03B569E8 AND W8, W0, 0x1
	0x03B569EC STRB W8, [X19]
	0x03B569F0 MOVZ W0, 0x1
	0x03B569F4 ADD X31, X31, 0x1C0
	0x03B569F8 LDP X20, X19, [X31 + 0x40]
	0x03B569FC LDP X22, X21, [X31 + 0x30]
	0x03B56A00 LDP X24, X23, [X31 + 0x20]
	0x03B56A04 LDP X30, X25, [X31 + 0x10]
	0x03B56A08 LDR X29, [X31], #0x50
	0x03B56A0C RET
	0x03B56A10 LDRB W8, [X31 + 0x190]
	0x03B56A14 CBZ W8, 0x3B569F0
	0x03B56A18 ADRP X25, 0x604000
	0x03B56A1C LDR X25, [X25 + 0xA10]
	0x03B56A20 ADD X8, X31, 0xA0
	0x03B56A24 ADD X0, X31, 0x190
	0x03B56A28 LDR X1, [X25]
	0x03B56A2C BL 0x2438690
	0x03B56A30 LDP V0, V1, [X31 + 0xA0]
	0x03B56A34 LDUR V2, [X24 + 0x1C]
	0x03B56A38 ADD X0, X31, 0xF0
	0x03B56A3C MOV X1, X31
	0x03B56A40 STP V0, V1, [X31 + 0xF0]
	0x03B56A44 STUR V2, [X24 + 0x6C]
	0x03B56A48 BL 0x3C8E66C
	0x03B56A4C STP S0, S1, [X23]
	0x03B56A50 STR S2, [X23 + 0x8]
	0x03B56A54 LDR X1, [X25]
	0x03B56A58 ADD X8, X31, 0xA0
	0x03B56A5C ADD X0, X31, 0x190
	0x03B56A60 BL 0x2438690
	0x03B56A64 LDP V0, V1, [X31 + 0xA0]
	0x03B56A68 LDUR V2, [X24 + 0x1C]
	0x03B56A6C ADD X0, X31, 0xF0
	0x03B56A70 MOV X1, X31
	0x03B56A74 STP V0, V1, [X31 + 0xF0]
	0x03B56A78 STUR V2, [X24 + 0x6C]
	0x03B56A7C BL 0x3C8E678
	0x03B56A80 STP S0, S1, [X22]
	0x03B56A84 STR S2, [X22 + 0x8]
	0x03B56A88 LDR W8, [X31 + 0x18C]
	0x03B56A8C ADD X0, X31, 0x190
	0x03B56A90 STR W8, [X20]
	0x03B56A94 LDR X1, [X25]
	0x03B56A98 LDR X20, [X21 + 0x30]
	0x03B56A9C ADD X8, X31, 0xA0
	0x03B56AA0 BL 0x2438690
	0x03B56AA4 LDP V0, V1, [X31 + 0xA0]
	0x03B56AA8 LDUR V2, [X24 + 0x1C]
	0x03B56AAC ADD X0, X31, 0xF0
	0x03B56AB0 MOV X1, X31
	0x03B56AB4 STP V0, V1, [X31 + 0xF0]
	0x03B56AB8 STUR V2, [X24 + 0x6C]
	0x03B56ABC BL 0x3C8E5C0
	0x03B56AC0 CBZ X20, 0x3B56AF4
	0x03B56AC4 MOV X1, X0
	0x03B56AC8 ADD X2, X31, 0x120
	0x03B56ACC MOV X0, X20
	0x03B56AD0 MOV X3, X31
	0x03B56AD4 BL 0x3B72C1C
	0x03B56AD8 TBZ X0, 0x0, 0x3B56AEC
	0x03B56ADC LDR X1, [X31 + 0x120]
	0x03B56AE0 MOV X0, X21
	0x03B56AE4 BL 0x3B52D28
	0x03B56AE8 B 0x3B569E8
	0x03B56AEC MOV W8, W31
	0x03B56AF0 B 0x3B569EC
	0x03B56AF4 BL 0x1C16F20
	0x03B56AF8 SUB X31, X31, 0x50
	0x03B56AFC STR D8, [X31 + 0x20]
	0x03B56B00 STP X30, X21, [X31 + 0x30]
	0x03B56B04 STP X20, X19, [X31 + 0x40]
	0x03B56B08 ADRP X21, 0x88C000
	0x03B56B0C LDRB W8, [X21 + 0x93F]
	0x03B56B10 MOV X19, X1
	0x03B56B14 MOV X20, X0
	0x03B56B18 TBNZ X8, 0x0, 0x3B56B30
	0x03B56B1C ADRP X0, 0x59D000
	0x03B56B20 LDR X0, [X0 + 0x598]
	0x03B56B24 BL 0x1C16CF4
	0x03B56B28 MOVZ W8, 0x1
	0x03B56B2C STRB W8, [X21 + 0x93F]
	0x03B56B30 LDR W8, [X20 + 0x484]
	0x03B56B34 FMOV S8, W31
	0x03B56B38 CMP W8, 0x1
	0x03B56B3C B.EQ 0x3B56B4C
	0x03B56B40 CBNZ W8, 0x3B56BAC
	0x03B56B44 LDR V8, [X20 + 0x488]
	0x03B56B48 B 0x3B56BAC
	0x03B56B4C ADRP X8, 0x59D000
	0x03B56B50 LDR X8, [X8 + 0x598]
	0x03B56B54 LDR X0, [X8]
	0x03B56B58 LDR W8, [X0 + 0xE0]
	0x03B56B5C CBNZ W8, 0x3B56B64
	0x03B56B60 BL 0x1C16DFC
	0x03B56B64 MOV X0, X19
	0x03B56B68 MOV X1, X31
	0x03B56B6C MOV X2, X31
	0x03B56B70 BL 0x3C354F8
	0x03B56B74 TBZ X0, 0x0, 0x3B56BAC
	0x03B56B78 CBZ X19, 0x3B56BC4
	0x03B56B7C ADD X8, X31, 0x8
	0x03B56B80 MOV X0, X19
	0x03B56B84 MOV X1, X31
	0x03B56B88 BL 0x3C8F8C8
	0x03B56B8C LDP S0, S1, [X31 + 0x14]
	0x03B56B90 LDR V2, [X31 + 0x1C]
	0x03B56B94 MOV X0, X31
	0x03B56B98 FADD S0, S0, S0
	0x03B56B9C FADD S1, S1, S1
	0x03B56BA0 FADD S2, S2, S2
	0x03B56BA4 BL 0x3B26D44
	0x03B56BA8 MOV V8.16B, V0.16B
	0x03B56BAC MOV V0.16B, V8.16B
	0x03B56BB0 LDP X20, X19, [X31 + 0x40]
	0x03B56BB4 LDP X30, X21, [X31 + 0x30]
	0x03B56BB8 LDR V8, [X31 + 0x20]
	0x03B56BBC ADD X31, X31, 0x50

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0x88D000
	014 Move X22, 0x605000
	015 Move X21, 0x605000
	016 Move X28, 0x605000
	017 Move X26, 0x605000
	018 Move X24, 0x605000
	019 Move W8, [X20+2362]
	020 Move X22, [X22+3648]
	021 Move X21, [X21+3656]
	022 Move X28, [X28+2096]
	023 Move X26, [X26+2088]
	024 Move X24, [X24+3664]
	025 Move X19, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {56}
	030 Move X0, 0x5A3000
	031 Move X0, [X0+312]
	032 Call 0x1C17CF4
	033 Move X0, 0x605000
	034 Move X0, [X0+2088]
	035 Call 0x1C17CF4
	036 Move X0, 0x605000
	037 Move X0, [X0+2096]
	038 Call 0x1C17CF4
	039 Move X0, 0x605000
	040 Move X0, [X0+3656]
	041 Call 0x1C17CF4
	042 Move X0, 0x605000
	043 Move X0, [X0+3648]
	044 Call 0x1C17CF4
	045 Move X0, 0x5A4000
	046 Move X0, [X0+1160]
	047 Call 0x1C17CF4
	048 Move X0, 0x605000
	049 Move X0, [X0+3664]
	050 Call 0x1C17CF4
	051 Move X0, 0x605000
	052 Move X0, [X0+936]
	053 Call 0x1C17CF4
	054 Move W8, 1
	055 Move [X20+2362], W8
	056 Move X29, 0x5A3000
	057 Move X27, 0x5A4000
	058 Move X23, 0x605000
	059 Move X29, [X29+312]
	060 Move X27, [X27+1160]
	061 Move X23, [X23+936]
	062 Move W0, 1
	063 Move X1, X31
	064 Move W25, 1
	065 Call LayerMask.op_Implicit, X0
	066 Move [X19+660], W0
	067 Move [X19+664], W25
	068 Move X0, [X22]
	069 Call 0x1C17F10
	070 Move X1, [X21]
	071 Move X20, X0
	072 Call List`1<Object>..ctor, X0
	073 Move [X19+672], X20
	074 Move X0, [X28]
	075 Call 0x1C17F10
	076 Move X1, [X26]
	077 Move X20, X0
	078 Call HashSet`1<Object>..ctor, X0
	079 Move [X19+680], X20
	080 Move X0, [X24]
	081 Call 0x1C17F10
	082 Move X1, X31
	083 Move X20, X0
	084 Call TriggerContactMonitor..ctor, X0
	085 Move [X19+688], X20
	086 Move X20, 0x883000
	087 Move W8, [X20+1923]
	088 Compare W8, 0
	089 JumpIfNotEqual {94}
	090 Move X0, 0x59E000
	091 Move X0, [X0+1440]
	092 Call 0x1C17CF4
	093 Move [X20+1923], W25
	094 Move X8, 0x59E000
	095 Move X8, [X8+1440]
	096 Move W1, 25
	097 Move X8, [X8]
	098 Move X8, [X8+184]
	099 Move V0, [X8]
	100 Move V1, [X8+8]
	101 Add X8, X19, 724
	102 Move [X8], D0
	103 Move [X8+8], S1
	104 Move X0, [X29]
	105 Call 0x1C17D6C
	106 Move [X19+736], X0
	107 Move X0, [X27]
	108 Move W1, 25
	109 Call 0x1C17D6C
	110 Move [X19+744], X0
	111 Move [X19+752], W25
	112 Move X0, [X22]
	113 Call 0x1C17F10
	114 Move X1, [X21]
	115 Move X20, X0
	116 Call List`1<Object>..ctor, X0
	117 Move [X19+760], X20
	118 Move X0, [X23]
	119 Move W8, [X0+224]
	120 Compare W8, 0
	121 JumpIfNotEqual {123}
	122 Call 0x1C17DFC
	123 Move X0, X19
	124 Move X20, [X31+80]
	125 Move X19, [X31+88]
	126 Move X22, [X31+64]
	127 Move X21, [X31+72]
	128 Move X24, [X31+48]
	129 Move X23, [X31+56]
	130 Move X26, [X31+32]
	131 Move X25, [X31+40]
	132 Move X28, [X31+16]
	133 Move X27, [X31+24]
	134 Move X29, [X31+96]
	135 Move X30, [X31+104]
	136 Call XRBaseControllerInteractor..ctor, X0
	137 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B56BC0 RET
	0x03B56BC4 BL 0x1C16F20
	0x03B56BC8 STR X30, [X31 - 0x30]!
	0x03B56BCC STP X22, X21, [X31 + 0x10]
	0x03B56BD0 STP X20, X19, [X31 + 0x20]
	0x03B56BD4 ADRP X22, 0x88C000
	0x03B56BD8 ADRP X21, 0x604000
	0x03B56BDC LDRB W8, [X22 + 0x941]
	0x03B56BE0 LDR X21, [X21 + 0xEB0]
	0x03B56BE4 MOV X19, X1
	0x03B56BE8 MOV X20, X0
	0x03B56BEC TBNZ X8, 0x0, 0x3B56C04
	0x03B56BF0 ADRP X0, 0x604000
	0x03B56BF4 LDR X0, [X0 + 0xEB0]
	0x03B56BF8 BL 0x1C16CF4
	0x03B56BFC MOVZ W8, 0x1
	0x03B56C00 STRB W8, [X22 + 0x941]
	0x03B56C04 LDR X1, [X21]
	0x03B56C08 MOV X0, X19
	0x03B56C0C BL 0x1C16E00
	0x03B56C10 CBZ X0, 0x3B56CB4
	0x03B56C14 LDR X8, [X0]
	0x03B56C18 LDR X1, [X21]
	0x03B56C1C MOV X19, X0
	0x03B56C20 LDRH W9, [X8 + 0x12E]
	0x03B56C24 CBZ X9, 0x3B56C48
	0x03B56C28 LDR X10, [X8 + 0xB0]
	0x03B56C2C ADD X10, X10, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x88D000
	006 Move X21, 0x605000
	007 Move X20, 0x605000
	008 Move W8, [X19+2363]
	009 Move X21, [X21+3672]
	010 Move X20, [X20+3680]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x605000
	016 Move X0, [X0+3672]
	017 Call 0x1C17CF4
	018 Move X0, 0x605000
	019 Move X0, [X0+3680]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+2363], W8
	023 Move X0, [X21]
	024 Call 0x1C17F10
	025 Move X1, X31
	026 Move X19, X0
	027 Call WaitForFixedUpdate..ctor, X0
	028 Move X8, [X20]
	029 Move X8, [X8+184]
	030 Move [X8], X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return 

