Type: UnityEngine.XR.Interaction.Toolkit.ConstrainedMoveProvider

Method: System.Boolean get_enableFreeXMovement()

Disassembly:
	0x03B7C740 RET
	0x03B7C744 STR S0, [X0 + 0x48]

ISIL:
	001 Move W0, [X0+72]
	002 Return X0

Method: System.Void set_enableFreeXMovement(System.Boolean value)

Disassembly:
	0x03B7C748 RET
	0x03B7C74C LDRB W0, [X0 + 0x4C]
	0x03B7C750 RET

ISIL:
	001 And W8, W1, 1
	002 Move [X0+72], W8
	003 Return 

Method: System.Boolean get_enableFreeYMovement()

Disassembly:
	0x03B7C754 AND W8, W1, 0x1
	0x03B7C758 STRB W8, [X0 + 0x4C]

ISIL:
	001 Move W0, [X0+73]
	002 Return X0

Method: System.Void set_enableFreeYMovement(System.Boolean value)

Disassembly:
	0x03B7C75C RET
	0x03B7C760 LDRB W0, [X0 + 0x4D]
	0x03B7C764 RET

ISIL:
	001 And W8, W1, 1
	002 Move [X0+73], W8
	003 Return 

Method: System.Boolean get_enableFreeZMovement()

Disassembly:
	0x03B7C768 AND W8, W1, 0x1
	0x03B7C76C STRB W8, [X0 + 0x4D]

ISIL:
	001 Move W0, [X0+74]
	002 Return X0

Method: System.Void set_enableFreeZMovement(System.Boolean value)

Disassembly:
	0x03B7C770 RET
	0x03B7C774 LDRB W0, [X0 + 0x4E]
	0x03B7C778 RET

ISIL:
	001 And W8, W1, 1
	002 Move [X0+74], W8
	003 Return 

Method: System.Boolean get_useGravity()

Disassembly:
	0x03B7C77C AND W8, W1, 0x1
	0x03B7C780 STRB W8, [X0 + 0x4E]

ISIL:
	001 Move W0, [X0+75]
	002 Return X0

Method: System.Void set_useGravity(System.Boolean value)

Disassembly:
	0x03B7C784 RET
	0x03B7C788 LDR W0, [X0 + 0x50]
	0x03B7C78C RET

ISIL:
	001 And W8, W1, 1
	002 Move [X0+75], W8
	003 Return 

Method: UnityEngine.XR.Interaction.Toolkit.ConstrainedMoveProvider/GravityApplicationMode get_gravityMode()

Disassembly:
	0x03B7C790 STR W1, [X0 + 0x50]
	0x03B7C794 RET

ISIL:
	001 Move W0, [X0+76]
	002 Return X0

Method: System.Void set_gravityMode(UnityEngine.XR.Interaction.Toolkit.ConstrainedMoveProvider/GravityApplicationMode value)

Disassembly:
	0x03B7C798 LDR X0, [X0 + 0x58]
	0x03B7C79C RET

ISIL:
	001 Move [X0+76], W1
	002 Return 

Method: System.Void Update()

Disassembly:
	0x03B7C7A0 STR X1, [X0 + 0x58]
	0x03B7C7A4 RET
	0x03B7C7A8 STP D13, D12, [X31 - 0x50]!
	0x03B7C7AC STP D11, D10, [X31 + 0x10]
	0x03B7C7B0 STP D9, D8, [X31 + 0x20]
	0x03B7C7B4 STR X30, [X31 + 0x30]
	0x03B7C7B8 STP X20, X19, [X31 + 0x40]
	0x03B7C7BC ADRP X20, 0x866000
	0x03B7C7C0 LDRB W8, [X20 + 0xAA5]
	0x03B7C7C4 MOV X19, X0
	0x03B7C7C8 TBNZ X8, 0x0, 0x3B7C7E0
	0x03B7C7CC ADRP X0, 0x577000
	0x03B7C7D0 LDR X0, [X0 + 0x598]
	0x03B7C7D4 BL 0x1C16CF4
	0x03B7C7D8 MOVZ W8, 0x1
	0x03B7C7DC STRB W8, [X20 + 0xAA5]
	0x03B7C7E0 LDR X8, [X19 + 0x30]
	0x03B7C7E4 STRB W31, [X19 + 0x69]
	0x03B7C7E8 CBZ X8, 0x3B7C9A8
	0x03B7C7EC LDR X9, [X8 + 0x30]
	0x03B7C7F0 ADRP X8, 0x577000
	0x03B7C7F4 LDR X8, [X8 + 0x598]
	0x03B7C7F8 CBZ X9, 0x3B7C804
	0x03B7C7FC LDR X20, [X9 + 0x38]
	0x03B7C800 B 0x3B7C808
	0x03B7C804 MOV X20, X31
	0x03B7C808 LDR X0, [X8]
	0x03B7C80C LDR W8, [X0 + 0xE0]
	0x03B7C810 CBNZ W8, 0x3B7C818
	0x03B7C814 BL 0x1C16DFC
	0x03B7C818 MOV X0, X20
	0x03B7C81C MOV X1, X31
	0x03B7C820 MOV X2, X31
	0x03B7C824 BL 0x3C3883C
	0x03B7C828 TBNZ X0, 0x0, 0x3B7C990
	0x03B7C82C LDR X8, [X19]
	0x03B7C830 MOV X0, X19
	0x03B7C834 LDP X9, X1, [X8 + 0x188]
	0x03B7C838 BLR X9
	0x03B7C83C LDR X8, [X19]
	0x03B7C840 MOV X0, X19
	0x03B7C844 MOV V11.16B, V0.16B
	0x03B7C848 MOV V12.16B, V1.16B
	0x03B7C84C LDP X9, X1, [X8 + 0x198]
	0x03B7C850 BLR X9
	0x03B7C854 LDR W8, [X19 + 0x50]
	0x03B7C858 MOV V9.16B, V0.16B
	0x03B7C85C MOV V8.16B, V1.16B
	0x03B7C860 MOV V10.16B, V2.16B
	0x03B7C864 CBZ W8, 0x3B7C874
	0x03B7C868 CMP W8, 0x1
	0x03B7C86C B.EQ 0x3B7C930
	0x03B7C870 B 0x3B7C94C
	0x03B7C874 ADRP X20, 0x85D000
	0x03B7C878 LDRB W8, [X20 + 0x78F]
	0x03B7C87C CBNZ W8, 0x3B7C894
	0x03B7C880 ADRP X0, 0x57F000
	0x03B7C884 LDR X0, [X0 + 0xF08]
	0x03B7C888 BL 0x1C16CF4
	0x03B7C88C MOVZ W8, 0x1
	0x03B7C890 STRB W8, [X20 + 0x78F]
	0x03B7C894 ADRP X8, 0x57F000
	0x03B7C898 LDR X8, [X8 + 0xF08]
	0x03B7C89C LDR X8, [X8]
	0x03B7C8A0 LDR X8, [X8 + 0xB8]
	0x03B7C8A4 LDP S0, S1, [X8]
	0x03B7C8A8 ADRP X8, 0xFFFFFFFFFCF6D000
	0x03B7C8AC LDR V13, [X8 + 0xF20]
	0x03B7C8B0 FSUB S0, S11, S0
	0x03B7C8B4 FSUB S1, S12, S1
	0x03B7C8B8 FMUL S0, S0, S0
	0x03B7C8BC FMUL S1, S1, S1
	0x03B7C8C0 FADD S0, S0, S1
	0x03B7C8C4 FCMP S0, S13
	0x03B7C8C8 B.PL 0x3B7C930
	0x03B7C8CC ADRP X20, 0x85C000
	0x03B7C8D0 LDR V11, [X19 + 0x6C]
	0x03B7C8D4 LDRB W8, [X20 + 0x783]
	0x03B7C8D8 LDR V12, [X19 + 0x70]
	0x03B7C8DC CBNZ W8, 0x3B7C8F4
	0x03B7C8E0 ADRP X0, 0x577000
	0x03B7C8E4 LDR X0, [X0 + 0x5A0]
	0x03B7C8E8 BL 0x1C16CF4
	0x03B7C8EC MOVZ W8, 0x1
	0x03B7C8F0 STRB W8, [X20 + 0x783]
	0x03B7C8F4 ADRP X8, 0x577000
	0x03B7C8F8 LDR X8, [X8 + 0x5A0]
	0x03B7C8FC LDR X8, [X8]
	0x03B7C900 LDR X8, [X8 + 0xB8]
	0x03B7C904 LDR V0, [X8]
	0x03B7C908 LDUR V1, [X8 + 0x4]
	0x03B7C90C FSUB S0, S11, S0
	0x03B7C910 FSUB V1.2S, V12.2S, V1.2S
	0x03B7C914 FMUL S0, S0, S0
	0x00000000 INVALID
	0x03B7C91C FADD S0, S0, S1
	0x03B7C920 MOV S1, V1.S[1]
	0x03B7C924 FADD S0, S1, S0
	0x03B7C928 FCMP S0, S13
	0x03B7C92C B.MI 0x3B7C94C
	0x03B7C930 LDR X8, [X19]
	0x03B7C934 MOV X0, X19
	0x03B7C938 MOV V0.16B, V9.16B
	0x03B7C93C MOV V1.16B, V8.16B
	0x03B7C940 LDP X9, X1, [X8 + 0x1A8]
	0x03B7C944 MOV V2.16B, V10.16B
	0x03B7C948 BLR X9
	0x03B7C94C LDR W8, [X19 + 0x38]
	0x03B7C950 CMP W8, 0x2

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D12
	003 Move [X31+24], D11
	004 Move [X31+32], D10
	005 Move [X31+40], D9
	006 Move [X31+48], D8
	007 Move [X31+56], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x867000
	011 Move W8, [X20+2716]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x578000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2716], W8
	022 Move [X31+12], W31
	023 Move X8, [X19+48]
	024 Move [X19+89], W31
	025 Compare X8, 0
	026 JumpIfEqual {124}
	027 Move X9, [X8+48]
	028 Move X8, 0x578000
	029 Move X8, [X8+1432]
	030 Compare X9, 0
	031 JumpIfEqual {33}
	032 Move X20, [X9+56]
	033 Move X20, X31
	034 Move X0, [X8]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Equality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {114}
	047 Move X8, [X19]
	048 Add X1, X31, 12
	049 Move X0, X19
	050 Move X9, [X8+392]
	051 Move X2, [X8+400]
	052 NotImplemented "Instruction BLR not yet implemented."
	053 Move W8, [X19+76]
	054 Move V9, V0
	055 Move V8, V1
	056 Move V10, V2
	057 Compare W8, 0
	058 JumpIfEqual {60}
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W8, [X31+12]
	061 Compare W8, 0
	062 JumpIfNotEqual {90}
	063 Move X20, 0x85D000
	064 Move V11, [X19+92]
	065 Move W8, [X20+1923]
	066 Move V12, [X19+96]
	067 Compare W8, 0
	068 JumpIfNotEqual {74}
	069 Move X0, 0x578000
	070 Move X0, [X0+1440]
	071 Call 0x1C17CF4
	072 Move W8, 1
	073 Move [X20+1923], W8
	074 Move X8, 0x578000
	075 Move X8, [X8+1440]
	076 Move X8, [X8]
	077 Move X8, [X8+184]
	078 Move V0, [X8]
	079 NotImplemented "Instruction LDUR not yet implemented."
	080 Move X8, -50929664
	081 Move V2, [X8+3872]
	082 Subtract S0, S11, S0
	083 Subtract V1, V12, V1
	084 Multiply S0, S0, S0
	085 NotImplemented "Instruction INVALID not yet implemented."
	086 Add S0, S0, S1
	087 Move S1, V1.S[1]
	088 Add S0, S1, S0
	089 NotImplemented "Instruction FCMP not yet implemented."
	090 Move X8, [X19]
	091 Move X0, X19
	092 Move V0, V9
	093 Move V1, V8
	094 Move X9, [X8+408]
	095 Move X1, [X8+416]
	096 Move V2, V10
	097 NotImplemented "Instruction BLR not yet implemented."
	098 Move W8, [X19+56]
	099 NotImplemented "Instruction CMP not yet implemented."
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move W8, [X19+89]
	102 Move W8, W8
	103 ShiftRight W8, 31
	104 And W8, W8, 0x3FFFFFFF
	105 Move W8, [X19+89]
	106 Compare W8, 0
	107 JumpIfEqual {114}
	108 Move W8, 2
	109 Move W8, [X19+89]
	110 Compare W8, 0
	111 JumpIfNotEqual {114}
	112 Move W8, 3
	113 Move [X19+56], W8
	114 Move X20, [X31+64]
	115 Move X19, [X31+72]
	116 Move X30, [X31+56]
	117 Move D9, [X31+40]
	118 Move D8, [X31+48]
	119 Move D11, [X31+24]
	120 Move D10, [X31+32]
	121 Move V12, [X31+16]
	122 Add X31, X31, 80
	123 Return 
	124 Call 0x1C17F20

Method: UnityEngine.Vector3 ComputeDesiredMove(out System.Boolean attemptingMove)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void MoveRig(UnityEngine.Vector3 translationInWorldSpace)

Disassembly:
	0x03B7C954 B.CC 0x3B7C970
	0x03B7C958 B.EQ 0x3B7C980
	0x03B7C95C CMP W8, 0x3
	0x03B7C960 B.NE 0x3B7C990
	0x03B7C964 LDRB W8, [X19 + 0x69]
	0x03B7C968 UBFM W8, W8, 0x1F, 0x1E
	0x03B7C96C B 0x3B7C98C
	0x03B7C970 LDRB W8, [X19 + 0x69]
	0x03B7C974 CBZ W8, 0x3B7C990
	0x03B7C978 MOVZ W8, 0x2
	0x03B7C97C B 0x3B7C98C
	0x03B7C980 LDRB W8, [X19 + 0x69]
	0x03B7C984 CBNZ W8, 0x3B7C990
	0x03B7C988 MOVZ W8, 0x3
	0x03B7C98C STR W8, [X19 + 0x38]
	0x03B7C990 LDP X20, X19, [X31 + 0x40]
	0x03B7C994 LDR X30, [X31 + 0x30]
	0x03B7C998 LDP D9, D8, [X31 + 0x20]
	0x03B7C99C LDP D11, D10, [X31 + 0x10]
	0x03B7C9A0 LDP D13, D12, [X31], #0x50
	0x03B7C9A4 RET
	0x03B7C9A8 BL 0x1C16F20
	0x03B7C9AC SUB X31, X31, 0x80
	0x03B7C9B0 STP D15, D14, [X31 + 0x10]
	0x03B7C9B4 STP D13, D12, [X31 + 0x20]
	0x03B7C9B8 STP D11, D10, [X31 + 0x30]
	0x03B7C9BC STP D9, D8, [X31 + 0x40]
	0x03B7C9C0 STR X30, [X31 + 0x50]
	0x03B7C9C4 STP X22, X21, [X31 + 0x60]
	0x03B7C9C8 STP X20, X19, [X31 + 0x70]
	0x03B7C9CC ADRP X20, 0x866000
	0x03B7C9D0 LDRB W8, [X20 + 0xAA6]
	0x03B7C9D4 MOV V8.16B, V1.16B
	0x03B7C9D8 MOV V9.16B, V0.16B
	0x03B7C9DC MOV X19, X0
	0x03B7C9E0 TBNZ X8, 0x0, 0x3B7C9F8
	0x03B7C9E4 ADRP X0, 0x577000
	0x03B7C9E8 LDR X0, [X0 + 0x598]
	0x03B7C9EC BL 0x1C16CF4
	0x03B7C9F0 MOVZ W8, 0x1
	0x03B7C9F4 STRB W8, [X20 + 0xAA6]
	0x03B7C9F8 ADRP X20, 0x85D000
	0x03B7C9FC LDRB W8, [X20 + 0x78F]
	0x03B7CA00 CBNZ W8, 0x3B7CA18
	0x03B7CA04 ADRP X0, 0x57F000
	0x03B7CA08 LDR X0, [X0 + 0xF08]
	0x03B7CA0C BL 0x1C16CF4
	0x03B7CA10 MOVZ W8, 0x1
	0x03B7CA14 STRB W8, [X20 + 0x78F]
	0x03B7CA18 ADRP X8, 0x57F000
	0x03B7CA1C LDR X8, [X8 + 0xF08]
	0x03B7CA20 LDR X8, [X8]
	0x03B7CA24 LDR X8, [X8 + 0xB8]
	0x03B7CA28 LDP S0, S1, [X8]
	0x03B7CA2C ADRP X8, 0xFFFFFFFFFCF6D000
	0x03B7CA30 LDR V2, [X8 + 0xF20]
	0x03B7CA34 FSUB S0, S9, S0
	0x03B7CA38 FSUB S1, S8, S1
	0x03B7CA3C FMUL S0, S0, S0
	0x03B7CA40 FMUL S1, S1, S1
	0x03B7CA44 FADD S0, S0, S1
	0x03B7CA48 FCMP S0, S2
	0x03B7CA4C B.MI 0x3B7CA88
	0x03B7CA50 LDR X8, [X19 + 0x30]
	0x03B7CA54 CBZ X8, 0x3B7CDF8
	0x03B7CA58 ADRP X21, 0x577000
	0x03B7CA5C LDR X21, [X21 + 0x598]
	0x03B7CA60 LDR X20, [X8 + 0x30]
	0x03B7CA64 LDR X0, [X21]
	0x03B7CA68 LDR W9, [X0 + 0xE0]
	0x03B7CA6C CBNZ W9, 0x3B7CA74
	0x03B7CA70 BL 0x1C16DFC
	0x03B7CA74 MOV X0, X20
	0x03B7CA78 MOV X1, X31
	0x03B7CA7C MOV X2, X31
	0x03B7CA80 BL 0x3C3883C
	0x03B7CA84 TBZ X0, 0x0, 0x3B7CAE4
	0x03B7CA88 ADRP X19, 0x85C000
	0x03B7CA8C LDRB W8, [X19 + 0x783]
	0x03B7CA90 CBNZ W8, 0x3B7CAA8
	0x03B7CA94 ADRP X0, 0x577000
	0x03B7CA98 LDR X0, [X0 + 0x5A0]
	0x03B7CA9C BL 0x1C16CF4
	0x03B7CAA0 MOVZ W8, 0x1
	0x03B7CAA4 STRB W8, [X19 + 0x783]
	0x03B7CAA8 ADRP X8, 0x577000
	0x03B7CAAC LDR X8, [X8 + 0x5A0]
	0x03B7CAB0 LDR X8, [X8]
	0x03B7CAB4 LDR X8, [X8 + 0xB8]
	0x03B7CAB8 LDP S0, S1, [X8]
	0x03B7CABC LDR V2, [X8 + 0x8]
	0x03B7CAC0 LDP X20, X19, [X31 + 0x70]
	0x03B7CAC4 LDP X22, X21, [X31 + 0x60]
	0x03B7CAC8 LDR X30, [X31 + 0x50]
	0x03B7CACC LDP D9, D8, [X31 + 0x40]
	0x03B7CAD0 LDP D11, D10, [X31 + 0x30]
	0x03B7CAD4 LDP D13, D12, [X31 + 0x20]
	0x03B7CAD8 LDP D15, D14, [X31 + 0x10]
	0x03B7CADC ADD X31, X31, 0x80
	0x03B7CAE0 RET
	0x03B7CAE4 LDRB W8, [X19 + 0x4C]
	0x03B7CAE8 ADRP X22, 0x85D000
	0x03B7CAEC LDRB W9, [X22 + 0x763]
	0x03B7CAF0 FMOV S10, W31
	0x03B7CAF4 CMP W8, 0x0
	0x03B7CAF8 FCSEL S9, S10, S9, EQ
	0x03B7CAFC CBNZ W9, 0x3B7CB14
	0x03B7CB00 ADRP X0, 0x577000
	0x03B7CB04 LDR X0, [X0 + 0x5A8]
	0x03B7CB08 BL 0x1C16CF4
	0x03B7CB0C MOVZ W8, 0x1
	0x03B7CB10 STRB W8, [X22 + 0x763]
	0x03B7CB14 FMUL S0, S9, S9
	0x03B7CB18 FMUL S1, S8, S8
	0x03B7CB1C FADD S0, S0, S10
	0x03B7CB20 FADD S11, S1, S0
	0x03B7CB24 FMOV S0, 1
	0x03B7CB28 FCMP S11, S0
	0x03B7CB2C B.LE 0x3B7CB5C
	0x03B7CB30 ADRP X8, 0x577000
	0x03B7CB34 LDR X8, [X8 + 0x5A8]
	0x03B7CB38 LDR X0, [X8]
	0x03B7CB3C LDR W8, [X0 + 0xE0]
	0x03B7CB40 CBNZ W8, 0x3B7CB48
	0x03B7CB44 BL 0x1C16DFC
	0x03B7CB48 FSQRT S0, S11
	0x03B7CB4C FMOV S1, W31
	0x03B7CB50 FDIV S9, S9, S0
	0x03B7CB54 FDIV S10, S1, S0
	0x03B7CB58 FDIV S8, S8, S0
	0x03B7CB5C LDR X0, [X21]
	0x03B7CB60 LDR X21, [X19 + 0x58]
	0x03B7CB64 LDR W8, [X0 + 0xE0]
	0x03B7CB68 CBNZ W8, 0x3B7CB70
	0x03B7CB6C BL 0x1C16DFC
	0x03B7CB70 MOV X0, X21
	0x03B7CB74 MOV X1, X31
	0x03B7CB78 MOV X2, X31
	0x03B7CB7C BL 0x3C3883C
	0x03B7CB80 TBZ X0, 0x0, 0x3B7CBA0
	0x03B7CB84 CBZ X20, 0x3B7CDF8
	0x03B7CB88 LDR X0, [X20 + 0x20]
	0x03B7CB8C CBZ X0, 0x3B7CDF8
	0x03B7CB90 MOV X1, X31
	0x03B7CB94 BL 0x3C32E90
	0x03B7CB98 MOV X21, X0
	0x03B7CB9C B 0x3B7CBA4
	0x03B7CBA0 LDR X21, [X19 + 0x58]
	0x03B7CBA4 CBZ X21, 0x3B7CDF8
	0x03B7CBA8 MOV X0, X21
	0x03B7CBAC MOV X1, X31
	0x03B7CBB0 BL 0x3C3FA04
	0x03B7CBB4 CBZ X20, 0x3B7CDF8
	0x03B7CBB8 LDR X0, [X20 + 0x38]
	0x03B7CBBC CBZ X0, 0x3B7CDF8
	0x03B7CBC0 MOV X1, X31
	0x03B7CBC4 MOV V13.16B, V0.16B
	0x03B7CBC8 MOV V12.16B, V1.16B
	0x03B7CBCC MOV V11.16B, V2.16B
	0x03B7CBD0 BL 0x3C356F8
	0x03B7CBD4 LDR V15, [X19 + 0x48]
	0x03B7CBD8 MOV X20, X0
	0x03B7CBDC MOV X0, X31
	0x03B7CBE0 BL 0x3C3C714
	0x03B7CBE4 CBZ X20, 0x3B7CDF8
	0x03B7CBE8 MOV X0, X20
	0x03B7CBEC MOV X1, X31
	0x03B7CBF0 MOV V14.16B, V0.16B
	0x03B7CBF4 BL 0x3C3FBAC
	0x03B7CBF8 LDRB W8, [X19 + 0x4D]
	0x03B7CBFC FMUL S1, S15, S14
	0x03B7CC00 FMUL S15, S1, S0
	0x03B7CC04 CBZ W8, 0x3B7CC48
	0x03B7CC08 MOV X0, X21
	0x03B7CC0C MOV X1, X31
	0x03B7CC10 BL 0x3C3F90C
	0x03B7CC14 FMUL S0, S9, S0
	0x03B7CC18 FMUL S1, S9, S1
	0x03B7CC1C FMUL S2, S9, S2
	0x03B7CC20 FMUL S3, S8, S13
	0x03B7CC24 FMUL S4, S8, S12
	0x03B7CC28 FMUL S5, S8, S11
	0x03B7CC2C FADD S0, S3, S0
	0x03B7CC30 FADD S1, S4, S1
	0x03B7CC34 FADD S2, S5, S2
	0x03B7CC38 FMUL S0, S15, S0
	0x03B7CC3C FMUL S1, S15, S1
	0x03B7CC40 FMUL S2, S15, S2
	0x03B7CC44 B 0x3B7CAC0
	0x03B7CC48 MOV X0, X20

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x867000
	015 Move W8, [X20+2717]
	016 Move V8, V2
	017 Move V9, V1
	018 Move V10, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0x578000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0x578000
	028 Move X0, [X0+1528]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+2717], W8
	032 Move X8, [X19+48]
	033 Compare X8, 0
	034 JumpIfEqual {252}
	035 Move X21, 0x578000
	036 Move X8, [X8+48]
	037 Move X21, [X21+1432]
	038 Compare X8, 0
	039 JumpIfEqual {41}
	040 Move X20, [X8+56]
	041 Move X20, X31
	042 Move X0, [X21]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X20
	048 Move X1, X31
	049 Move X2, X31
	050 Call Object.op_Equality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {238}
	055 Move X0, X19
	056 Call ConstrainedMoveProvider.FindCharacterController, X0
	057 Move W8, [X19+72]
	058 Move X0, [X21]
	059 Move W9, [X19+73]
	060 Move W10, [X19+74]
	061 Move S0, W31
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move W8, [X0+224]
	064 Move X21, [X19+80]
	065 NotImplemented "Instruction FCSEL not yet implemented."
	066 NotImplemented "Instruction CMP not yet implemented."
	067 NotImplemented "Instruction FCSEL not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 NotImplemented "Instruction FCSEL not yet implemented."
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Move X0, X21
	074 Move X1, X31
	075 Move X2, X31
	076 Call Object.op_Inequality, X0, X1
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {145}
	081 Move X0, [X19+80]
	082 Compare X0, 0
	083 JumpIfEqual {252}
	084 Move X1, X31
	085 Call Collider.get_enabled, X0
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {145}
	090 Move X0, [X19+80]
	091 Compare X0, 0
	092 JumpIfEqual {252}
	093 Move X1, X31
	094 Call CharacterController.get_isGrounded, X0
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfEqual {175}
	099 Move W8, [X19+75]
	100 Compare W8, 0
	101 JumpIfEqual {175}
	102 Move X8, 0x578000
	103 Move X8, [X8+1528]
	104 Move S0, [X19+92]
	105 Move S15, [X19+96]
	106 Move V14, [X19+100]
	107 Move X0, [X8]
	108 Move [X31+12], S0
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {113}
	112 Call 0x1C17DFC
	113 Move X0, X31
	114 Call Physics.get_gravity
	115 Move X0, X31
	116 Move V8, V0
	117 Move V9, V1
	118 Move V10, V2
	119 Call Time.get_deltaTime
	120 Move V3, [X31+12]
	121 Move W8, [X19+72]
	122 Multiply S1, S8, S0
	123 Multiply S2, S9, S0
	124 Multiply S0, S10, S0
	125 Add S9, S3, S1
	126 Add S10, S15, S2
	127 Add S14, S14, S0
	128 Move [X19+92], S9
	129 Move [X19+100], S10
	130 Move [X19+100], S14
	131 Compare W8, 0
	132 JumpIfEqual {135}
	133 Move S9, W31
	134 Move [X19+92], W31
	135 Move W8, [X19+73]
	136 Compare W8, 0
	137 JumpIfEqual {140}
	138 Move S10, W31
	139 Move [X19+96], W31
	140 Move W8, [X19+74]
	141 Compare W8, 0
	142 JumpIfEqual {194}
	143 Move S14, W31
	144 Move [X19+100], W31
	145 Move X0, X19
	146 Call LocomotionProvider.CanBeginLocomotion, X0
	147 Move TEMP, X0
	148 And TEMP, TEMP, 1
	149 Compare TEMP, 1
	150 JumpIfNotEqual {238}
	151 Move X0, X19
	152 Call LocomotionProvider.BeginLocomotion, X0
	153 Move TEMP, X0
	154 And TEMP, TEMP, 1
	155 Compare TEMP, 1
	156 JumpIfNotEqual {238}
	157 Move W8, 1
	158 Move [X19+89], W8
	159 Compare X20, 0
	160 JumpIfEqual {252}
	161 Move X0, X20
	162 Move X1, X31
	163 Call GameObject.get_transform, X0
	164 Compare X0, 0
	165 JumpIfEqual {252}
	166 Move X1, X31
	167 Move X20, X0
	168 Call Transform.get_position, X0
	169 Add S0, S13, S0
	170 Add S1, S12, S1
	171 Add S2, S11, S2
	172 Move X0, X20
	173 Move X1, X31
	174 Call Transform.set_position, X0, X1
	175 Move X20, 0x85D000
	176 Move W8, [X20+1923]
	177 Compare W8, 0
	178 JumpIfNotEqual {184}
	179 Move X0, 0x578000
	180 Move X0, [X0+1440]
	181 Call 0x1C17CF4
	182 Move W8, 1
	183 Move [X20+1923], W8
	184 Move X8, 0x578000
	185 Move X8, [X8+1440]
	186 Move X8, [X8]
	187 Move X8, [X8+184]
	188 Move S9, [X8]
	189 Move S10, [X8+4]
	190 Move V14, [X8+8]
	191 Move [X19+92], S9
	192 Move [X19+100], S10
	193 Move [X19+100], S14
	194 Move X0, X31
	195 Call Time.get_deltaTime
	196 Move X0, X19
	197 Move V8, V0
	198 Call LocomotionProvider.CanBeginLocomotion, X0
	199 Move TEMP, X0
	200 And TEMP, TEMP, 1
	201 Compare TEMP, 1
	202 JumpIfNotEqual {238}
	203 Move X0, X19
	204 Call LocomotionProvider.BeginLocomotion, X0
	205 Move TEMP, X0
	206 And TEMP, TEMP, 1
	207 Compare TEMP, 1
	208 JumpIfNotEqual {238}
	209 Move X0, [X19+80]
	210 Move W8, 1
	211 Move [X19+89], W8
	212 Compare X0, 0
	213 JumpIfEqual {252}
	214 Multiply S0, S9, S8
	215 Multiply S1, S10, S8
	216 Multiply S2, S14, S8
	217 Add S0, S13, S0
	218 Add S1, S12, S1
	219 Add S2, S11, S2
	220 Move X1, X31
	221 Call CharacterController.Move, X0, X1
	222 Move X0, X19
	223 Move X20, [X31+96]
	224 Move X19, [X31+104]
	225 Move X30, [X31+80]
	226 Move X21, [X31+88]
	227 Move D9, [X31+64]
	228 Move D8, [X31+72]
	229 Move D11, [X31+48]
	230 Move D10, [X31+56]
	231 Move D13, [X31+32]
	232 Move D12, [X31+40]
	233 Move D15, [X31+16]
	234 Move D14, [X31+24]
	235 Add X31, X31, 112
	236 Call LocomotionProvider.EndLocomotion, X0
	237 Return 
	238 Move X20, [X31+96]
	239 Move X19, [X31+104]
	240 Move X30, [X31+80]
	241 Move X21, [X31+88]
	242 Move D9, [X31+64]
	243 Move D8, [X31+72]
	244 Move D11, [X31+48]
	245 Move D10, [X31+56]
	246 Move D13, [X31+32]
	247 Move D12, [X31+40]
	248 Move D15, [X31+16]
	249 Move D14, [X31+24]
	250 Add X31, X31, 112
	251 Return 
	252 Call 0x1C17F20

Method: System.Void FindCharacterController()

Disassembly:
	0x03B7CC4C MOV X1, X31
	0x03B7CC50 BL 0x3C3F988
	0x03B7CC54 ADRP X19, 0x85D000
	0x03B7CC58 MOV V6.16B, V0.16B
	0x03B7CC5C MOV V5.16B, V1.16B
	0x03B7CC60 FMUL S0, S13, S0
	0x03B7CC64 FMUL S1, S12, S1
	0x03B7CC68 LDRB W8, [X19 + 0x5AA]
	0x03B7CC6C FADD S0, S0, S1
	0x03B7CC70 FMUL S1, S11, S2
	0x03B7CC74 FADD S0, S1, S0
	0x03B7CC78 FABS S14, S0
	0x03B7CC7C STR S2, [X31 + 0x5C]
	0x03B7CC80 CBNZ W8, 0x3B7CCA8
	0x03B7CC84 ADRP X0, 0x57E000
	0x03B7CC88 LDR X0, [X0 + 0x4B8]
	0x03B7CC8C STR S5, [X31 + 0x58]
	0x03B7CC90 STR S6, [X31 + 0xC]
	0x03B7CC94 BL 0x1C16CF4
	0x03B7CC98 LDR V6, [X31 + 0xC]
	0x03B7CC9C LDR V5, [X31 + 0x58]
	0x03B7CCA0 MOVZ W8, 0x1
	0x03B7CCA4 STRB W8, [X19 + 0x5AA]
	0x03B7CCA8 ADRP X19, 0x57E000
	0x03B7CCAC LDR X19, [X19 + 0x4B8]
	0x03B7CCB0 ADRP X9, 0xFFFFFFFFFCF6E000
	0x03B7CCB4 LDR V1, [X9 + 0x240]
	0x03B7CCB8 FMOV S0, 1
	0x03B7CCBC LDR X8, [X19]
	0x03B7CCC0 FMOV S3, 8
	0x03B7CCC4 FMAXNM S4, S14, S0
	0x03B7CCC8 FMUL S1, S4, S1
	0x03B7CCCC LDR X8, [X8 + 0xB8]
	0x03B7CCD0 FABD S0, S0, S0
	0x03B7CCD4 LDR V2, [X8]
	0x03B7CCD8 FMUL S2, S2, S3
	0x03B7CCDC FCMP S1, S2
	0x03B7CCE0 FCSEL S1, S1, S2, GT
	0x03B7CCE4 FCMP S0, S1
	0x03B7CCE8 B.PL 0x3B7CD14
	0x03B7CCEC MOV X0, X21
	0x03B7CCF0 MOV X1, X31
	0x03B7CCF4 MOV V11.16B, V5.16B
	0x03B7CCF8 MOV V12.16B, V6.16B
	0x03B7CCFC BL 0x3C3F988
	0x03B7CD00 MOV V6.16B, V12.16B
	0x03B7CD04 MOV V5.16B, V11.16B
	0x03B7CD08 FNEG S13, S0
	0x03B7CD0C FNEG S12, S1
	0x03B7CD10 FNEG S11, S2
	0x03B7CD14 ADRP X21, 0x85C000
	0x03B7CD18 LDR V14, [X31 + 0x5C]
	0x03B7CD1C LDRB W8, [X21 + 0xE39]
	0x03B7CD20 CBNZ W8, 0x3B7CD48
	0x03B7CD24 ADRP X0, 0x57E000
	0x03B7CD28 LDR X0, [X0 + 0x4B8]
	0x03B7CD2C STR S5, [X31 + 0x58]
	0x03B7CD30 STR S6, [X31 + 0xC]
	0x03B7CD34 BL 0x1C16CF4
	0x03B7CD38 LDR V6, [X31 + 0xC]
	0x03B7CD3C LDR V5, [X31 + 0x58]
	0x03B7CD40 MOVZ W8, 0x1
	0x03B7CD44 STRB W8, [X21 + 0xE39]
	0x03B7CD48 LDR X8, [X19]
	0x03B7CD4C FMUL S0, S6, S6
	0x03B7CD50 FMUL S1, S5, S5
	0x03B7CD54 FADD S0, S0, S1
	0x03B7CD58 LDR X8, [X8 + 0xB8]
	0x03B7CD5C FMUL S1, S14, S14
	0x03B7CD60 FADD S0, S1, S0
	0x03B7CD64 LDR V2, [X8]
	0x03B7CD68 FCMP S0, S2
	0x03B7CD6C B.MI 0x3B7CDA8
	0x03B7CD70 FMUL S1, S6, S13
	0x03B7CD74 FMUL S2, S5, S12
	0x03B7CD78 FMUL S3, S14, S11
	0x03B7CD7C FADD S1, S2, S1
	0x03B7CD80 FADD S1, S3, S1
	0x03B7CD84 FMUL S2, S6, S1
	0x03B7CD88 FMUL S3, S5, S1
	0x03B7CD8C FMUL S1, S14, S1
	0x03B7CD90 FDIV S2, S2, S0
	0x03B7CD94 FDIV S3, S3, S0
	0x03B7CD98 FDIV S0, S1, S0
	0x03B7CD9C FSUB S13, S13, S2
	0x03B7CDA0 FSUB S12, S12, S3
	0x03B7CDA4 FSUB S11, S11, S0
	0x03B7CDA8 MOV X0, X20
	0x03B7CDAC MOV X1, X31
	0x03B7CDB0 BL 0x3C3FA04

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x867000
	008 Move W8, [X20+2718]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x59F000
	015 Move X0, [X0+2352]
	016 Call 0x1C17CF4
	017 Move X0, 0x5E0000
	018 Move X0, [X0+3432]
	019 Call 0x1C17CF4
	020 Move X0, 0x578000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2718], W8
	025 Move X8, [X19+48]
	026 Compare X8, 0
	027 JumpIfEqual {122}
	028 Move X23, 0x578000
	029 Move X8, [X8+48]
	030 Move X23, [X23+1432]
	031 Compare X8, 0
	032 JumpIfEqual {34}
	033 Move X20, [X8+56]
	034 Move X20, X31
	035 Move X0, [X23]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Equality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {115}
	048 Move X21, X19
	049 Add X21, X21, 80
	050 Move X22, [X21]
	051 Move X0, [X23]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move X0, X22
	057 Move X1, X31
	058 Move X2, X31
	059 Call Object.op_Equality, X0, X1
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {115}
	064 Move W8, [X19+88]
	065 Compare W8, 0
	066 JumpIfNotEqual {115}
	067 Compare X20, 0
	068 JumpIfEqual {122}
	069 Move X8, 0x5E0000
	070 Move X8, [X8+3432]
	071 Move X0, X20
	072 Move X1, X21
	073 Move X2, [X8]
	074 Call 0x21E7600, X0, X1
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfEqual {113}
	079 Move X8, [X19+48]
	080 Compare X8, 0
	081 JumpIfEqual {122}
	082 Move X0, [X8+48]
	083 Compare X0, 0
	084 JumpIfEqual {122}
	085 Move X1, X31
	086 Call Component.get_gameObject, X0
	087 Move X8, [X23]
	088 Move X22, X0
	089 Move W9, [X8+224]
	090 Compare W9, 0
	091 JumpIfNotEqual {94}
	092 Move X0, X8
	093 Call 0x1C17DFC
	094 Move X0, X20
	095 Move X1, X22
	096 Move X2, X31
	097 Call Object.op_Inequality, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {113}
	102 Move X8, [X19+48]
	103 Compare X8, 0
	104 JumpIfEqual {122}
	105 Move X0, [X8+48]
	106 Compare X0, 0
	107 JumpIfEqual {122}
	108 Move X8, 0x59F000
	109 Move X8, [X8+2352]
	110 Move X1, X21
	111 Move X2, [X8]
	112 Call 0x21A5990, X0, X1
	113 Move W8, 1
	114 Move [X19+88], W8
	115 Move X20, [X31+32]
	116 Move X19, [X31+40]
	117 Move X22, [X31+16]
	118 Move X21, [X31+24]
	119 Move X30, [X31+48]
	120 Move X23, [X31+56]
	121 Return 
	122 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03B7CE3C BL 0x1C16CF4
	0x03B7CE40 ADRP X0, 0x577000
	0x03B7CE44 LDR X0, [X0 + 0x5F8]
	0x03B7CE48 BL 0x1C16CF4
	0x03B7CE4C MOVZ W8, 0x1
	0x03B7CE50 STRB W8, [X20 + 0xAA7]

ISIL:
	001 Move W8, 1
	002 Move W9, 257
	003 Move X1, X31
	004 Move [X0+72], W8
	005 NotImplemented "Instruction STRH not yet implemented."
	006 Call MonoBehaviour..ctor, X0
	007 Return 

