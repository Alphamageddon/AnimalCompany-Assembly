Type: UnityEngine.XR.Interaction.Toolkit.Inputs.XRHandSkeletonPokeDisplacer

Method: UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State.IPokeStateDataProvider get_pokeInteractor()

Disassembly:
	0x03BBAA88 LDP X22, X21, [X31 + 0x10]
	0x03BBAA8C LDR X30, [X31], #0x30

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_pokeInteractor(UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.State.IPokeStateDataProvider value)

Disassembly:
	0x03BBAA90 RET
	0x03BBAA94 BL 0x1C16F20
	0x03BBAA98 STP X30, X23, [X31 - 0x30]!
	0x03BBAA9C STP X22, X21, [X31 + 0x10]
	0x03BBAAA0 STP X20, X19, [X31 + 0x20]
	0x03BBAAA4 ADRP X23, 0x828000
	0x03BBAAA8 LDRB W8, [X23 + 0xD31]
	0x03BBAAAC MOV W20, W3
	0x03BBAAB0 MOV W19, W2
	0x03BBAAB4 MOV W22, W1
	0x03BBAAB8 MOV X21, X0
	0x03BBAABC TBNZ X8, 0x0, 0x3BBAAE0
	0x03BBAAC0 ADRP X0, 0x5A3000
	0x03BBAAC4 LDR X0, [X0 + 0x318]
	0x03BBAAC8 BL 0x1C16CF4
	0x03BBAACC ADRP X0, 0x5A2000
	0x03BBAAD0 LDR X0, [X0 + 0xD80]
	0x03BBAAD4 BL 0x1C16CF4
	0x03BBAAD8 MOVZ W8, 0x1
	0x03BBAADC STRB W8, [X23 + 0xD31]
	0x03BBAAE0 CMP W22, W19
	0x03BBAAE4 B.NE 0x3BBAAF8
	0x03BBAAE8 LDP X20, X19, [X31 + 0x20]
	0x03BBAAEC LDP X22, X21, [X31 + 0x10]
	0x03BBAAF0 LDP X30, X23, [X31], #0x30
	0x03BBAAF4 RET
	0x03BBAAF8 CMP W22, 0x1
	0x03BBAAFC B.NE 0x3BBAB14
	0x03BBAB00 CMP W20, 0x1
	0x03BBAB04 B.EQ 0x3BBAB14
	0x03BBAB08 LDR X0, [X21 + 0x48]
	0x03BBAB0C CBNZ X0, 0x3BBAB2C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x829000
	006 Move W8, [X21+3369]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x53A000
	014 Move X0, [X0+1432]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3369], W8
	018 Compare X19, 0
	019 JumpIfEqual {27}
	020 Move X8, 0x53A000
	021 Move X8, [X8+1432]
	022 Move X9, [X19]
	023 Move X8, [X8]
	024 Move W11, [X9+304]
	025 Move W10, [X8+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, X31
	028 Move X9, [X9+200]
	029 Add X9, X9, X10
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CSEL not yet implemented."
	033 Move [X20+32], X8
	034 Move [X20+40], X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return 

Method: System.Single get_pokeStrengthSnapThreshold()

Disassembly:
	0x03BBAB10 B 0x3BBAB34
	0x03BBAB14 CMP W22, 0x2

ISIL:
	001 Move V0, [X0+48]
	002 Return V0

Method: System.Void set_pokeStrengthSnapThreshold(System.Single value)

Disassembly:
	0x03BBAB18 B.NE 0x3BBAB34
	0x03BBAB1C CMP W20, 0x2
	0x03BBAB20 B.EQ 0x3BBAB34
	0x03BBAB24 LDR X0, [X21 + 0x58]
	0x03BBAB28 CBZ X0, 0x3BBAB34
	0x03BBAB2C MOV X1, X31
	0x03BBAB30 BL 0x3C45DE8

ISIL:
	001 Move S1, 1
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 NotImplemented "Instruction FMIN not yet implemented."
	004 Move S1, W31
	005 NotImplemented "Instruction FCSEL not yet implemented."
	006 Move [X0+48], S0
	007 Return 

Method: System.Single get_smoothingAmount()

Disassembly:
	0x03BBAB34 CMP W19, 0x1
	0x03BBAB38 B.NE 0x3BBAB50

ISIL:
	001 Move V0, [X0+52]
	002 Return V0

Method: System.Void set_smoothingAmount(System.Single value)

Disassembly:
	0x03BBAB3C CMP W20, 0x1
	0x03BBAB40 B.EQ 0x3BBAB50
	0x03BBAB44 LDR X0, [X21 + 0x40]
	0x03BBAB48 CBNZ X0, 0x3BBAB68
	0x03BBAB4C B 0x3BBAB70
	0x03BBAB50 CMP W19, 0x2
	0x03BBAB54 B.NE 0x3BBAB70

ISIL:
	001 Move S1, 30
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 NotImplemented "Instruction FMIN not yet implemented."
	004 Move S1, W31
	005 NotImplemented "Instruction FCSEL not yet implemented."
	006 Move [X0+52], S0
	007 Return 

Method: System.Single get_fixedOffset()

Disassembly:
	0x03BBAB58 CMP W20, 0x2
	0x03BBAB5C B.EQ 0x3BBAB70

ISIL:
	001 Move V0, [X0+56]
	002 Return V0

Method: System.Void set_fixedOffset(System.Single value)

Disassembly:
	0x03BBAB60 LDR X0, [X21 + 0x50]
	0x03BBAB64 CBZ X0, 0x3BBAB70

ISIL:
	001 Move [X0+56], S0
	002 Return 

Method: System.Void Awake()

Disassembly:
	0x03BBAB68 MOV X1, X31
	0x03BBAB6C BL 0x3C45DE8
	0x03BBAB70 ADRP X20, 0x5A2000
	0x03BBAB74 LDR X20, [X20 + 0xD80]
	0x03BBAB78 LDR X0, [X20]
	0x03BBAB7C LDR W8, [X0 + 0xE0]
	0x03BBAB80 CBNZ W8, 0x3BBAB8C
	0x03BBAB84 BL 0x1C16DFC
	0x03BBAB88 LDR X0, [X20]
	0x03BBAB8C LDR X8, [X0 + 0xB8]
	0x03BBAB90 LDR X0, [X8]
	0x03BBAB94 CBZ X0, 0x3BBABB8
	0x03BBAB98 ADRP X8, 0x5A3000
	0x03BBAB9C LDR X8, [X8 + 0x318]
	0x03BBABA0 MOV W1, W19
	0x03BBABA4 LDP X20, X19, [X31 + 0x20]
	0x03BBABA8 LDP X22, X21, [X31 + 0x10]
	0x03BBABAC LDR X2, [X8]
	0x03BBABB0 LDP X30, X23, [X31], #0x30
	0x03BBABB4 B 0x28CD0D4
	0x03BBABB8 BL 0x1C16F20
	0x03BBABBC STR X30, [X31 - 0x30]!
	0x03BBABC0 STP X22, X21, [X31 + 0x10]
	0x03BBABC4 STP X20, X19, [X31 + 0x20]
	0x03BBABC8 ADRP X22, 0x828000
	0x03BBABCC ADRP X21, 0x5A2000
	0x03BBABD0 LDRB W8, [X22 + 0xD30]
	0x03BBABD4 LDR X21, [X21 + 0xD80]
	0x03BBABD8 MOV W19, W1
	0x03BBABDC MOV X20, X0
	0x03BBABE0 TBNZ X8, 0x0, 0x3BBABF8
	0x03BBABE4 ADRP X0, 0x5A2000
	0x03BBABE8 LDR X0, [X0 + 0xD80]
	0x03BBABEC BL 0x1C16CF4
	0x03BBABF0 MOVZ W8, 0x1
	0x03BBABF4 STRB W8, [X22 + 0xD30]
	0x03BBABF8 LDR X0, [X21]
	0x03BBABFC LDR X21, [X20 + 0x28]
	0x03BBAC00 LDR W8, [X0 + 0xE0]
	0x03BBAC04 CBNZ W8, 0x3BBAC0C
	0x03BBAC08 BL 0x1C16DFC
	0x03BBAC0C CMP W19, 0x1
	0x03BBAC10 CSET W1, EQ
	0x03BBAC14 MOV X0, X21
	0x03BBAC18 BL 0x3BBA9EC
	0x03BBAC1C LDR X0, [X20 + 0x38]
	0x03BBAC20 CMP W19, 0x2
	0x03BBAC24 CSET W1, EQ
	0x03BBAC28 BL 0x3BBA9EC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x829000
	007 Move W8, [X20+3370]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x53A000
	014 Move X0, [X0+2600]
	015 Call 0x1C17CF4
	016 Move X0, 0x5A2000
	017 Move X0, [X0+512]
	018 Call 0x1C17CF4
	019 Move X0, 0x5A4000
	020 Move X0, [X0+688]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3370], W8
	024 Move X21, 0x53A000
	025 Move X8, [X19+40]
	026 Move X21, [X21+2600]
	027 Compare X8, 0
	028 JumpIfNotEqual {39}
	029 Move X22, 0x5A2000
	030 Move X20, [X19+32]
	031 Move X22, [X22+512]
	032 Move X0, X20
	033 Move X1, [X22]
	034 Call 0x1C17E00
	035 Move [X19+40], X0
	036 Move X1, [X22]
	037 Move X0, X20
	038 Call 0x1C17E00
	039 Move X0, [X21]
	040 Move X20, 0x5A4000
	041 Move W8, [X0+224]
	042 Move X20, [X20+688]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, [X20]
	047 Move X1, X19
	048 Move X2, X31
	049 Call Debug.LogWarning, X0, X1
	050 Move X0, X19
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move W1, W31
	056 Move X2, X31
	057 Move X30, [X31+48]
	058 Call Behaviour.set_enabled, X0, X1
	059 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03BBAC2C LDP W3, W1, [X20 + 0x70]
	0x03BBAC30 STR W19, [X20 + 0x74]
	0x03BBAC34 MOV X0, X20
	0x03BBAC38 MOV W2, W19
	0x03BBAC3C LDP X20, X19, [X31 + 0x20]
	0x03BBAC40 LDP X22, X21, [X31 + 0x10]
	0x03BBAC44 LDR X30, [X31], #0x30
	0x03BBAC48 B 0x3BBAA98
	0x03BBAC4C MOV W0, W31
	0x03BBAC50 RET
	0x03BBAC54 MOV W0, W31
	0x03BBAC58 RET
	0x03BBAC5C STP X30, X21, [X31 - 0x20]!
	0x03BBAC60 STP X20, X19, [X31 + 0x10]
	0x03BBAC64 MOV X21, X2
	0x03BBAC68 CBZ X1, 0x3BBACA4
	0x03BBAC6C MOV X20, X0
	0x03BBAC70 LDR X0, [X1 + 0x178]
	0x03BBAC74 MOV X19, X1
	0x03BBAC78 CBZ X0, 0x3BBACE4
	0x03BBAC7C MOV X1, X31
	0x03BBAC80 BL 0x3758A6C
	0x03BBAC84 CBZ X21, 0x3BBACE4
	0x03BBAC88 MOV W8, W0
	0x03BBAC8C LDR X3, [X21 + 0x18]
	0x03BBAC90 LDR X0, [X21 + 0x40]
	0x03BBAC94 LDR X2, [X21 + 0x28]
	0x03BBAC98 TBZ X8, 0x0, 0x3BBACC4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x829000
	006 Move W8, [X20+3371]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5A2000
	013 Move X0, [X0+512]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3371], W8
	017 Move X8, [X19+40]
	018 Compare X8, 0
	019 JumpIfEqual {25}
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Move X21, [X31+40]
	024 Return 
	025 Move X21, 0x5A2000
	026 Move X20, [X19+32]
	027 Move X21, [X21+512]
	028 Move X0, X20
	029 Move X1, [X21]
	030 Call 0x1C17E00
	031 Move [X19+40], X0
	032 Move X1, [X21]
	033 Move X0, X20
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Call 0x1C17E00
	039 Return 

Method: System.Void OnDisable()

Disassembly:
	0x03BBAC9C MOVZ W1, 0x2

ISIL:
	001 Return 

Method: System.Void Update()

Disassembly:
	0x03BBACA0 B 0x3BBACB8

ISIL:
	001 Return 

Method: System.Void .ctor()

Disassembly:
	0x03BBACA4 CBZ X21, 0x3BBACE4
	0x03BBACA8 LDR X3, [X21 + 0x18]
	0x03BBACAC LDR X0, [X21 + 0x40]
	0x03BBACB0 LDR X2, [X21 + 0x28]
	0x03BBACB4 MOV W1, W31
	0x03BBACB8 LDP X20, X19, [X31 + 0x10]
	0x03BBACBC LDP X30, X21, [X31], #0x20
	0x03BBACC0 BR X3

ISIL:
	001 Move X8, -51163136
	002 Move V0, [X8+680]
	003 Move W8, 0xD70A
	004 NotImplemented "Instruction MOVK not yet implemented."
	005 Move X1, X31
	006 Move [X0+48], D0
	007 Move [X0+56], W8
	008 Call MonoBehaviour..ctor, X0
	009 Return 

