Type: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/SimulatedHandExpression

Method: System.String get_name()

Disassembly:
	0x03BCA660 STR X30, [X31 + 0x10]
	0x03BCA664 LDR V0, [X0]
	0x03BCA668 ADD X0, X31, 0x0
	0x03BCA66C MOV X1, X31
	0x03BCA670 STR V0, [X31]
	0x03BCA674 BL 0x375F8F0
	0x03BCA678 LDR X30, [X31 + 0x10]
	0x03BCA67C ADD X31, X31, 0x20
	0x03BCA680 RET
	0x03BCA684 MOV X4, X31
	0x03BCA688 B 0x37564A4
	0x03BCA68C MOV X4, X31
	0x03BCA690 B 0x3757138
	0x03BCA694 SUB X31, X31, 0x20
	0x03BCA698 STP X1, X30, [X31 + 0x8]
	0x03BCA69C STR X0, [X31]
	0x03BCA6A0 ADD X0, X31, 0x0
	0x03BCA6A4 MOV X1, X31
	0x03BCA6A8 BL 0x37565F4
	0x03BCA6AC LDR X30, [X31 + 0x10]
	0x03BCA6B0 ADD X31, X31, 0x20
	0x03BCA6B4 RET
	0x03BCA6B8 SUB X31, X31, 0x20
	0x03BCA6BC STP X31, X30, [X31 + 0x8]
	0x03BCA6C0 MOV X1, X0
	0x03BCA6C4 ADD X0, X31, 0x0
	0x03BCA6C8 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x819000
	007 Move X21, 0x594000
	008 Move W8, [X20+3559]
	009 Move X21, [X21+1840]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x594000
	016 Move X0, [X0+1840]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3559], W8
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 NotImplemented "Instruction LDUR not yet implemented."
	026 Add X0, X31, 0
	027 Move X1, X31
	028 Move [X31], V0
	029 Call InternedString.ToString, X0
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Add X31, X31, 48
	035 Return X0

Method: UnityEngine.InputSystem.InputActionReference get_toggleAction()

Disassembly:
	0x03BCA6F4 ADRP X21, 0x551000
	0x03BCA6F8 ADRP X19, 0x593000

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.Hands.HandExpressionCapture get_capture()

Disassembly:
	0x03BCA6FC LDRB W8, [X20 + 0xDF1]
	0x03BCA700 LDR X21, [X21 + 0x68]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_capture(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.Hands.HandExpressionCapture value)

Disassembly:
	0x03BCA704 LDR X19, [X19 + 0x730]
	0x03BCA708 TBNZ X8, 0x0, 0x3BCA72C

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.Hands.HandExpressionName get_expressionName()

Disassembly:
	0x03BCA70C ADRP X0, 0x593000
	0x03BCA710 LDR X0, [X0 + 0x730]
	0x03BCA714 BL 0x1C16CF4

ISIL:
	001 Move X8, [X0+40]
	002 Move X1, [X0+48]
	003 Move X0, X8
	004 Return X0

Method: System.Void set_expressionName(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.Hands.HandExpressionName value)

Disassembly:
	0x03BCA718 ADRP X0, 0x551000
	0x03BCA71C LDR X0, [X0 + 0x68]

ISIL:
	001 Move [X0+40], X1
	002 Move [X0+48], X2
	003 Return 

Method: UnityEngine.Sprite get_icon()

Disassembly:
	0x03BCA720 BL 0x1C16CF4
	0x03BCA724 MOVZ W8, 0x1
	0x03BCA728 STRB W8, [X20 + 0xDF1]
	0x03BCA72C LDR X1, [X21]
	0x03BCA730 ADD X0, X31, 0x10
	0x03BCA734 MOV X2, X31
	0x03BCA738 STP X31, X31, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+32]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move X0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void add_performed(System.Action`2<UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/SimulatedHandExpression, UnityEngine.InputSystem.InputAction/CallbackContext> value)

Disassembly:
	0x03BCA73C BL 0x3757420
	0x03BCA740 LDR V0, [X31 + 0x1]
	0x03BCA744 LDR X8, [X19]
	0x03BCA748 LDP X20, X19, [X31 + 0x30]
	0x03BCA74C LDP X30, X21, [X31 + 0x20]
	0x03BCA750 STR V0, [X31]
	0x03BCA754 LDR X8, [X8 + 0xB8]
	0x03BCA758 STR V0, [X8]
	0x03BCA75C ADD X31, X31, 0x40
	0x03BCA760 RET
	0x03BCA764 LDP S0, S1, [X0]
	0x03BCA768 LDR V2, [X0 + 0x8]
	0x03BCA76C RET
	0x03BCA770 STP S0, S1, [X0]
	0x03BCA774 STR S2, [X0 + 0x8]
	0x03BCA778 RET
	0x03BCA77C LDP S0, S1, [X0 + 0xC]
	0x03BCA780 LDP S2, S3, [X0 + 0x14]
	0x03BCA784 RET
	0x03BCA788 STP S0, S1, [X0 + 0xC]
	0x03BCA78C STP S2, S3, [X0 + 0x14]
	0x03BCA790 RET
	0x03BCA794 LDP S0, S1, [X0 + 0x1C]
	0x03BCA798 LDR V2, [X0 + 0x24]
	0x03BCA79C RET
	0x03BCA7A0 STP S0, S1, [X0 + 0x1C]
	0x03BCA7A4 STR S2, [X0 + 0x24]
	0x03BCA7A8 RET
	0x03BCA7AC LDP X8, X1, [X0 + 0x28]
	0x03BCA7B0 MOV X0, X8
	0x03BCA7B4 RET
	0x03BCA7B8 STP X1, X2, [X0 + 0x28]
	0x03BCA7BC RET
	0x03BCA7C0 STP X30, X21, [X31 - 0x20]!
	0x03BCA7C4 STP X20, X19, [X31 + 0x10]
	0x03BCA7C8 ADRP X20, 0x818000
	0x03BCA7CC LDRB W8, [X20 + 0xDF2]
	0x03BCA7D0 MOV X19, X0
	0x03BCA7D4 TBNZ X8, 0x0, 0x3BCA7EC
	0x03BCA7D8 ADRP X0, 0x593000
	0x03BCA7DC LDR X0, [X0 + 0x730]
	0x03BCA7E0 BL 0x1C16CF4
	0x03BCA7E4 MOVZ W8, 0x1
	0x03BCA7E8 STRB W8, [X20 + 0xDF2]
	0x03BCA7EC STR X31, [X19]
	0x03BCA7F0 STR W31, [X19 + 0x8]
	0x03BCA7F4 ADRP X21, 0x80E000
	0x03BCA7F8 ADRP X20, 0x593000
	0x03BCA7FC LDRB W8, [X21 + 0x793]
	0x03BCA800 LDR X20, [X20 + 0x730]
	0x03BCA804 CBNZ W8, 0x3BCA81C
	0x03BCA808 ADRP X0, 0x52A000
	0x03BCA80C LDR X0, [X0 + 0x5A8]
	0x03BCA810 BL 0x1C16CF4
	0x03BCA814 MOVZ W8, 0x1
	0x03BCA818 STRB W8, [X21 + 0x793]
	0x03BCA81C ADRP X8, 0x52A000
	0x03BCA820 LDR X8, [X8 + 0x5A8]
	0x03BCA824 LDR X8, [X8]
	0x03BCA828 LDR X8, [X8 + 0xB8]
	0x03BCA82C LDR V0, [X8]
	0x03BCA830 STR X31, [X19 + 0x20]
	0x03BCA834 STR W31, [X19 + 0x1C]
	0x03BCA838 STUR V0, [X19 + 0xC]
	0x03BCA83C LDR X0, [X20]
	0x03BCA840 LDR W8, [X0 + 0xE0]
	0x03BCA844 CBNZ W8, 0x3BCA850
	0x03BCA848 BL 0x1C16DFC
	0x03BCA84C LDR X0, [X20]
	0x03BCA850 LDR X8, [X0 + 0xB8]
	0x03BCA854 LDR V0, [X8]
	0x03BCA858 STUR V0, [X19 + 0x28]
	0x03BCA85C LDP X20, X19, [X31 + 0x10]
	0x03BCA860 LDP X30, X21, [X31], #0x20
	0x03BCA864 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x819000
	007 Move W8, [X21+3560]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x52E000
	015 Move X0, [X0+984]
	016 Call 0x1C17CF4
	017 Move X0, 0x594000
	018 Move X0, [X0+1848]
	019 Call 0x1C17CF4
	020 Move X0, 0x594000
	021 Move X0, [X0+1856]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3560], W8
	025 Move X0, [X19+56]
	026 Move X1, X20
	027 Move X2, X31
	028 Call Delegate.Combine, X0, X1
	029 Compare X0, 0
	030 JumpIfEqual {49}
	031 Move X22, 0x594000
	032 Move X22, [X22+1848]
	033 Move X20, X0
	034 Move X21, [X22]
	035 Move X1, X21
	036 Call 0x1C17E00
	037 Compare X0, 0
	038 JumpIfEqual {46}
	039 Move [X19+56], X0
	040 Move X21, [X22]
	041 Move X0, X20
	042 Move X1, X21
	043 Call 0x1C17E00
	044 Compare X0, 0
	045 JumpIfNotEqual {50}
	046 Move X0, X20
	047 Move X1, X21
	048 Call 0x1C181E0
	049 Move [X19+56], X31
	050 Move W8, [X19+64]
	051 Compare W8, 0
	052 JumpIfEqual {59}
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]
	058 Return 
	059 Move X0, [X19+24]
	060 Move W8, 1
	061 Move [X19+64], W8
	062 Compare X0, 0
	063 JumpIfEqual {91}
	064 Move X1, X31
	065 Call InputActionReference.get_action, X0
	066 Move X8, 0x52E000
	067 Move X8, [X8+984]
	068 Move X20, X0
	069 Move X8, [X8]
	070 Move X0, X8
	071 Call 0x1C17F10
	072 Move X8, 0x594000
	073 Move X8, [X8+1856]
	074 Move X1, X19
	075 Move X3, X31
	076 Move X21, X0
	077 Move X2, [X8]
	078 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	079 Compare X20, 0
	080 JumpIfEqual {91}
	081 Move X0, X20
	082 Move X1, X21
	083 Move X20, [X31+32]
	084 Move X19, [X31+40]
	085 Move X22, [X31+16]
	086 Move X21, [X31+24]
	087 Move X2, X31
	088 Move X30, [X31+48]
	089 Call InputAction.add_performed, X0, X1
	090 Return 
	091 Call 0x1C17F20

Method: System.Void remove_performed(System.Action`2<UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/SimulatedHandExpression, UnityEngine.InputSystem.InputAction/CallbackContext> value)

Disassembly:
	0x03BCA868 STR X30, [X31 - 0x20]!
	0x03BCA86C STP X20, X19, [X31 + 0x10]
	0x03BCA870 ADRP X20, 0x818000
	0x03BCA874 LDRB W8, [X20 + 0xDF3]
	0x03BCA878 MOV X19, X0
	0x03BCA87C TBNZ X8, 0x0, 0x3BCA894
	0x03BCA880 ADRP X0, 0x593000
	0x03BCA884 LDR X0, [X0 + 0x7B0]
	0x03BCA888 BL 0x1C16CF4
	0x03BCA88C MOVZ W8, 0x1
	0x03BCA890 STRB W8, [X20 + 0xDF3]
	0x03BCA894 LDR V0, [X19 + 0x18]
	0x03BCA898 FCMP S0, 0x0
	0x03BCA89C B.GE 0x3BCA8F4
	0x03BCA8A0 ADRP X19, 0x593000
	0x03BCA8A4 LDR X19, [X19 + 0x7B0]
	0x03BCA8A8 LDR X0, [X19]
	0x03BCA8AC LDR W8, [X0 + 0xE0]
	0x03BCA8B0 CBNZ W8, 0x3BCA8B8
	0x03BCA8B4 BL 0x1C16DFC
	0x03BCA8B8 ADRP X20, 0x818000
	0x03BCA8BC LDRB W8, [X20 + 0xEA7]
	0x03BCA8C0 CBNZ W8, 0x3BCA8D8
	0x03BCA8C4 ADRP X0, 0x593000
	0x03BCA8C8 LDR X0, [X0 + 0x7B0]
	0x03BCA8CC BL 0x1C16CF4
	0x03BCA8D0 MOVZ W8, 0x1
	0x03BCA8D4 STRB W8, [X20 + 0xEA7]
	0x03BCA8D8 LDR X0, [X19]
	0x03BCA8DC LDR W8, [X0 + 0xE0]
	0x03BCA8E0 CBNZ W8, 0x3BCA8EC
	0x03BCA8E4 BL 0x1C16DFC
	0x03BCA8E8 LDR X0, [X19]
	0x03BCA8EC LDR X8, [X0 + 0xB8]
	0x03BCA8F0 LDR V0, [X8]
	0x03BCA8F4 LDP X20, X19, [X31 + 0x10]
	0x03BCA8F8 LDR X30, [X31], #0x20
	0x03BCA8FC RET
	0x03BCA900 STR X30, [X31 - 0x20]!
	0x03BCA904 STP X20, X19, [X31 + 0x10]
	0x03BCA908 ADRP X20, 0x818000
	0x03BCA90C ADRP X19, 0x593000
	0x03BCA910 LDRB W8, [X20 + 0xDF4]
	0x03BCA914 LDR X19, [X19 + 0x7B0]
	0x03BCA918 TBNZ X8, 0x0, 0x3BCA930
	0x03BCA91C ADRP X0, 0x593000
	0x03BCA920 LDR X0, [X0 + 0x7B0]
	0x03BCA924 BL 0x1C16CF4
	0x03BCA928 MOVZ W8, 0x1
	0x03BCA92C STRB W8, [X20 + 0xDF4]
	0x03BCA930 LDR X0, [X19]
	0x03BCA934 LDR W8, [X0 + 0xE0]
	0x03BCA938 CBNZ W8, 0x3BCA944
	0x03BCA93C BL 0x1C16DFC
	0x03BCA940 LDR X0, [X19]
	0x03BCA944 LDR X8, [X0 + 0xB8]
	0x03BCA948 LDP X20, X19, [X31 + 0x10]
	0x03BCA94C LDR V0, [X8]
	0x03BCA950 LDR X30, [X31], #0x20
	0x03BCA954 RET
	0x03BCA958 STR D8, [X31 - 0x20]!
	0x03BCA95C STR X30, [X31 + 0x8]
	0x03BCA960 STP X20, X19, [X31 + 0x10]
	0x03BCA964 ADRP X20, 0x818000
	0x03BCA968 ADRP X19, 0x593000
	0x03BCA96C LDRB W8, [X20 + 0xDF5]
	0x03BCA970 LDR X19, [X19 + 0x7B0]
	0x03BCA974 MOV V8.16B, V0.16B
	0x03BCA978 TBNZ X8, 0x0, 0x3BCA990
	0x03BCA97C ADRP X0, 0x593000
	0x03BCA980 LDR X0, [X0 + 0x7B0]
	0x03BCA984 BL 0x1C16CF4
	0x03BCA988 MOVZ W8, 0x1
	0x03BCA98C STRB W8, [X20 + 0xDF5]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x819000
	007 Move W8, [X21+3561]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x52E000
	015 Move X0, [X0+984]
	016 Call 0x1C17CF4
	017 Move X0, 0x594000
	018 Move X0, [X0+1848]
	019 Call 0x1C17CF4
	020 Move X0, 0x594000
	021 Move X0, [X0+1856]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3561], W8
	025 Move X0, [X19+56]
	026 Move X1, X20
	027 Move X2, X31
	028 Call Delegate.Remove, X0, X1
	029 Compare X0, 0
	030 JumpIfEqual {55}
	031 Move X22, 0x594000
	032 Move X22, [X22+1848]
	033 Move X20, X0
	034 Move X21, [X22]
	035 Move X1, X21
	036 Call 0x1C17E00
	037 Compare X0, 0
	038 JumpIfEqual {87}
	039 Move [X19+56], X0
	040 Move X21, [X22]
	041 Move X0, X20
	042 Move X1, X21
	043 Call 0x1C17E00
	044 Compare X0, 0
	045 JumpIfEqual {87}
	046 Move X8, [X19+56]
	047 Compare X8, 0
	048 JumpIfEqual {56}
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Return 
	055 Move [X19+56], X31
	056 Move X0, [X19+24]
	057 Move [X19+64], W31
	058 Compare X0, 0
	059 JumpIfEqual {90}
	060 Move X20, 0x52E000
	061 Move X21, 0x594000
	062 Move X20, [X20+984]
	063 Move X21, [X21+1856]
	064 Move X1, X31
	065 Call InputActionReference.get_action, X0
	066 Move X8, [X20]
	067 Move X20, X0
	068 Move X0, X8
	069 Call 0x1C17F10
	070 Move X2, [X21]
	071 Move X1, X19
	072 Move X3, X31
	073 Move X21, X0
	074 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	075 Compare X20, 0
	076 JumpIfEqual {90}
	077 Move X0, X20
	078 Move X1, X21
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X2, X31
	084 Move X30, [X31+48]
	085 Call InputAction.remove_performed, X0, X1
	086 Return 
	087 Move X0, X20
	088 Move X1, X21
	089 Call 0x1C181E0
	090 Call 0x1C17F20

Method: System.Void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()

Disassembly:
	0x03BCA990 LDR X0, [X19]
	0x03BCA994 LDR W8, [X0 + 0xE0]
	0x03BCA998 CBNZ W8, 0x3BCA9A4
	0x03BCA99C BL 0x1C16DFC
	0x03BCA9A0 LDR X0, [X19]
	0x03BCA9A4 LDR X8, [X0 + 0xB8]
	0x03BCA9A8 LDP X20, X19, [X31 + 0x10]
	0x03BCA9AC LDR X30, [X31 + 0x8]
	0x03BCA9B0 STR S8, [X8]
	0x03BCA9B4 LDR V8, [X31], #0x20
	0x03BCA9B8 RET
	0x03BCA9BC STP X30, X21, [X31 - 0x20]!
	0x03BCA9C0 STP X20, X19, [X31 + 0x10]
	0x03BCA9C4 MOV X20, X1
	0x03BCA9C8 MOV X19, X0
	0x03BCA9CC BL 0x3BCA868
	0x03BCA9D0 MOV X0, X20
	0x03BCA9D4 MOV X1, X31
	0x03BCA9D8 BL 0x376C690
	0x03BCA9DC TBZ X0, 0x0, 0x3BCAA3C
	0x03BCA9E0 MOV X0, X19
	0x03BCA9E4 MOV X1, X20
	0x03BCA9E8 BL 0x3BCAAD4
	0x03BCA9EC LDR W8, [X19 + 0x1C]
	0x03BCA9F0 AND W21, W0, 0x1
	0x03BCA9F4 CBZ W8, 0x3BCAA68
	0x03BCA9F8 LDR W9, [X19 + 0x14]
	0x03BCA9FC CMP W9, 0x3

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x819000
	007 Move X21, 0x594000
	008 Move W8, [X20+3562]
	009 Move X21, [X21+1840]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x594000
	016 Move X0, [X0+1840]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3562], W8
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 NotImplemented "Instruction LDUR not yet implemented."
	026 Add X0, X31, 0
	027 Move X1, X31
	028 Move [X31], V0
	029 Call InternedString.ToString, X0
	030 Move [X19+16], X0
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X30, [X31+16]
	034 Move X21, [X31+24]
	035 Add X31, X31, 48
	036 Return 

Method: System.Void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()

Disassembly:
	0x03BCAA00 B.EQ 0x3BCAA8C
	0x03BCAA04 CMP W9, 0x2
	0x03BCAA08 B.EQ 0x3BCAAA4
	0x03BCAA0C CMP W9, 0x1
	0x03BCAA10 B.NE 0x3BCAAC4
	0x03BCAA14 LDRB W9, [X19 + 0x20]
	0x03BCAA18 CMP W8, 0x1
	0x03BCAA1C B.NE 0x3BCAA28
	0x03BCAA20 CBNZ W21, 0x3BCAA28
	0x03BCAA24 CBNZ W9, 0x3BCAAB8
	0x03BCAA28 CMP W8, 0x1
	0x03BCAA2C B.NE 0x3BCAAC4
	0x03BCAA30 BIC W8, W21, W9, 0x0
	0x03BCAA34 CBNZ W8, 0x3BCAA7C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move X1, [X0+16]
	005 Move X19, X0
	006 Add X0, X31, 16
	007 Move X2, X31
	008 Move [X31+16], X31
	009 Move [X31+24], X31
	010 Call InternedString..ctor, X0, X1
	011 Move V0, [X31+1]
	012 Move [X31], V0
	013 Move [X19+40], V0
	014 Move X30, [X31+32]
	015 Move X19, [X31+40]
	016 Add X31, X31, 48
	017 Return 

Method: System.Void OnActionPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BCAA68 CMP W21, 0x0
	0x03BCAA6C MOVZ W8, 0x1
	0x03BCAA70 CINC W8, W8, EQ
	0x03BCAA74 STR W8, [X19 + 0x1C]
	0x03BCAA78 CBZ W21, 0x3BCAAC4
	0x03BCAA7C MOV X0, X20
	0x03BCAA80 MOV X1, X31
	0x03BCAA84 BL 0x376C754
	0x03BCAA88 B 0x3BCAAC4
	0x03BCAA8C LDRB W8, [X19 + 0x20]
	0x03BCAA90 TBNZ X21, 0x0, 0x3BCAA98

ISIL:
	001 Move X9, [X0+56]
	002 Compare X9, 0
	003 JumpIfEqual {12}
	004 Move X8, X0
	005 Move X5, [X9+24]
	006 Move X0, [X9+64]
	007 Move X4, [X9+40]
	008 Move X3, X2
	009 Move X2, X1
	010 Move X1, X8
	011 CallNoReturn X5
	012 Return 

Method: System.Void .ctor()

Disassembly:
	0x03BCAA94 CBNZ W8, 0x3BCAAB8
	0x03BCAA98 BICS W31, W21, W8, 0x0

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

