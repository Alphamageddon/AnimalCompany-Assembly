Type: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.Hands.HandExpressionName

Method: System.Void .ctor(System.String value)

Disassembly:
	0x03BCAA38 B 0x3BCAAC4
	0x03BCAA3C LDR W8, [X19 + 0x1C]
	0x03BCAA40 SUBS W8, W8, 0x1
	0x03BCAA44 B.CC 0x3BCAAC8
	0x03BCAA48 CMP W8, 0x1
	0x03BCAA4C B.HI 0x3BCAAC8
	0x03BCAA50 STR W31, [X19 + 0x1C]
	0x03BCAA54 MOV X0, X20
	0x03BCAA58 LDP X20, X19, [X31 + 0x10]
	0x03BCAA5C MOV X1, X31
	0x03BCAA60 LDP X30, X21, [X31], #0x20
	0x03BCAA64 B 0x376C794

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Add X0, X31, 0
	006 Move X2, X31
	007 Move [X31], X31
	008 Move [X31+8], X31
	009 Call InternedString..ctor, X0, X1
	010 Move V0, [X31]
	011 Move [X19], V0
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Add X31, X31, 32
	015 Return 

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03BCB588 LDP X20, X19, [X31 + 0x10]
	0x03BCB58C LDP X30, X21, [X31], #0x20
	0x03BCB590 B 0x29AE60C
	0x03BCB594 STP X30, X21, [X31 - 0x20]!
	0x03BCB598 STP X20, X19, [X31 + 0x10]
	0x03BCB59C ADRP X20, 0x817000
	0x03BCB5A0 ADRP X21, 0x592000
	0x03BCB5A4 LDRB W8, [X20 + 0xE0D]
	0x03BCB5A8 LDR X21, [X21 + 0x890]
	0x03BCB5AC MOV X19, X0
	0x03BCB5B0 TBNZ X8, 0x0, 0x3BCB5C8
	0x03BCB5B4 ADRP X0, 0x592000
	0x03BCB5B8 LDR X0, [X0 + 0x890]
	0x03BCB5BC BL 0x1C16CF4
	0x03BCB5C0 MOVZ W8, 0x1
	0x03BCB5C4 STRB W8, [X20 + 0xE0D]
	0x03BCB5C8 LDR X1, [X21]
	0x03BCB5CC MOV X0, X19
	0x03BCB5D0 LDP X20, X19, [X31 + 0x10]
	0x03BCB5D4 LDP X30, X21, [X31], #0x20
	0x03BCB5D8 B 0x2648A74
	0x03BCB5DC STR X30, [X31 - 0x30]!
	0x03BCB5E0 STP X22, X21, [X31 + 0x10]
	0x03BCB5E4 STP X20, X19, [X31 + 0x20]
	0x03BCB5E8 ADRP X21, 0x817000
	0x03BCB5EC ADRP X22, 0x592000
	0x03BCB5F0 LDRB W8, [X21 + 0xE0E]
	0x03BCB5F4 LDR X22, [X22 + 0x898]
	0x03BCB5F8 MOV X19, X1
	0x03BCB5FC MOV X20, X0
	0x03BCB600 TBNZ X8, 0x0, 0x3BCB618
	0x03BCB604 ADRP X0, 0x592000
	0x03BCB608 LDR X0, [X0 + 0x898]
	0x03BCB60C BL 0x1C16CF4
	0x03BCB610 MOVZ W8, 0x1
	0x03BCB614 STRB W8, [X21 + 0xE0E]
	0x03BCB618 LDR X2, [X22]
	0x03BCB61C MOV X0, X20
	0x03BCB620 MOV X1, X19
	0x03BCB624 LDP X20, X19, [X31 + 0x20]
	0x03BCB628 LDP X22, X21, [X31 + 0x10]
	0x03BCB62C LDR X30, [X31], #0x30

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x818000
	007 Move W8, [X21+3568]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x593000
	015 Move X0, [X0+1840]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3568], W8
	019 Compare X20, 0
	020 JumpIfEqual {26}
	021 Move X21, 0x593000
	022 Move X21, [X21+1840]
	023 Move X9, [X20]
	024 Move X8, [X21]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, W31
	027 Move X0, X20
	028 Call 0x1C17E08
	029 Move X8, X0
	030 Move X0, [X21]
	031 Move X21, [X8]
	032 Move X20, [X8+8]
	033 Move W9, [X0+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move V0, [X19]
	038 Add X0, X31, 0
	039 Move X1, X21
	040 Move X2, X20
	041 Move X3, X31
	042 Move [X31], V0
	043 Call InternedString.Equals, X0, X1
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X30, [X31+16]
	047 Move X21, [X31+24]
	048 And W0, W0, 1
	049 Add X31, X31, 48
	050 Return X0

Method: System.Boolean Equals(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.Hands.HandExpressionName other)

Disassembly:
	0x03BCB630 B 0x29AD964
	0x03BCB634 STR X30, [X31 - 0x30]!
	0x03BCB638 STP X22, X21, [X31 + 0x10]
	0x03BCB63C STP X20, X19, [X31 + 0x20]
	0x03BCB640 ADRP X21, 0x817000
	0x03BCB644 ADRP X22, 0x592000
	0x03BCB648 LDRB W8, [X21 + 0xE0F]
	0x03BCB64C LDR X22, [X22 + 0x8A0]
	0x03BCB650 MOV X19, X1
	0x03BCB654 MOV X20, X0
	0x03BCB658 TBNZ X8, 0x0, 0x3BCB670

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move V0, [X0]
	004 Add X0, X31, 0
	005 Move X3, X31
	006 Move [X31], V0
	007 Call InternedString.Equals, X0, X1
	008 Move X30, [X31+16]
	009 And W0, W0, 1
	010 Add X31, X31, 32
	011 Return X0

Method: System.String ToString()

Disassembly:
	0x03BCA6CC STR X31, [X31]
	0x03BCA6D0 BL 0x3757420
	0x03BCA6D4 LDP X0, X1, [X31]
	0x03BCA6D8 LDR X30, [X31 + 0x10]
	0x03BCA6DC ADD X31, X31, 0x20
	0x03BCA6E0 RET
	0x03BCA6E4 SUB X31, X31, 0x40
	0x03BCA6E8 STP X30, X21, [X31 + 0x20]
	0x03BCA6EC STP X20, X19, [X31 + 0x30]
	0x03BCA6F0 ADRP X20, 0x818000

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move V0, [X0]
	004 Add X0, X31, 0
	005 Move X1, X31
	006 Move [X31], V0
	007 Call InternedString.ToString, X0
	008 Move X30, [X31+16]
	009 Add X31, X31, 32
	010 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03BCB65C ADRP X0, 0x592000
	0x03BCB660 LDR X0, [X0 + 0x8A0]
	0x03BCB664 BL 0x1C16CF4
	0x03BCB668 MOVZ W8, 0x1
	0x03BCB66C STRB W8, [X21 + 0xE0F]
	0x03BCB670 LDR X2, [X22]
	0x03BCB674 MOV X0, X20
	0x03BCB678 MOV X1, X19
	0x03BCB67C LDP X20, X19, [X31 + 0x20]
	0x03BCB680 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move V0, [X0]
	004 Add X0, X31, 0
	005 Move X1, X31
	006 Move [X31], V0
	007 Call InternedString.GetHashCode, X0
	008 Move X30, [X31+16]
	009 Add X31, X31, 32
	010 Return X0

Method: System.Boolean op_Equality(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.Hands.HandExpressionName lhs, UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.Hands.HandExpressionName rhs)

Disassembly:
	0x03BCB684 LDR X30, [X31], #0x30
	0x03BCB688 B 0x29AD994

ISIL:
	001 Move X4, X31
	002 Call InternedString.op_Equality, X0, X1
	003 Return X0

Method: System.Boolean op_Inequality(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.Hands.HandExpressionName lhs, UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.Hands.HandExpressionName rhs)

Disassembly:
	0x03BCB68C STP X30, X21, [X31 - 0x20]!
	0x03BCB690 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X4, X31
	002 Call InternedString.op_Inequality, X0, X1
	003 Return X0

Method: System.String op_Implicit(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.Hands.HandExpressionName value)

Disassembly:
	0x03BCB694 ADRP X20, 0x817000
	0x03BCB698 ADRP X21, 0x592000
	0x03BCB69C LDRB W8, [X20 + 0xE10]
	0x03BCB6A0 LDR X21, [X21 + 0x8A8]
	0x03BCB6A4 MOV X19, X0
	0x03BCB6A8 TBNZ X8, 0x0, 0x3BCB6C0
	0x03BCB6AC ADRP X0, 0x592000
	0x03BCB6B0 LDR X0, [X0 + 0x8A8]
	0x03BCB6B4 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+8], X1
	003 Move [X31+16], X30
	004 Move [X31], X0
	005 Add X0, X31, 0
	006 Move X1, X31
	007 Call InternedString.ToString, X0
	008 Move X30, [X31+16]
	009 Add X31, X31, 32
	010 Return X0

Method: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.Hands.HandExpressionName op_Implicit(System.String value)

Disassembly:
	0x03BCB6B8 MOVZ W8, 0x1
	0x03BCB6BC STRB W8, [X20 + 0xE10]
	0x03BCB6C0 LDR X1, [X21]
	0x03BCB6C4 MOV X0, X19
	0x03BCB6C8 LDP X20, X19, [X31 + 0x10]
	0x03BCB6CC LDP X30, X21, [X31], #0x20
	0x03BCB6D0 B 0x29AE60C
	0x03BCB6D4 STP X30, X21, [X31 - 0x20]!
	0x03BCB6D8 STP X20, X19, [X31 + 0x10]
	0x03BCB6DC ADRP X20, 0x817000
	0x03BCB6E0 ADRP X21, 0x592000

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+8], X31
	003 Move [X31+16], X30
	004 Move X1, X0
	005 Add X0, X31, 0
	006 Move X2, X31
	007 Move [X31], X31
	008 Call InternedString..ctor, X0, X1
	009 Move X0, [X31]
	010 Move X1, [X31+8]
	011 Move X30, [X31+16]
	012 Add X31, X31, 32
	013 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03BCB6E4 LDRB W8, [X20 + 0xE11]
	0x03BCB6E8 LDR X21, [X21 + 0x8B0]
	0x03BCB6EC MOV X19, X0
	0x03BCB6F0 TBNZ X8, 0x0, 0x3BCB708
	0x03BCB6F4 ADRP X0, 0x592000
	0x03BCB6F8 LDR X0, [X0 + 0x8B0]
	0x03BCB6FC BL 0x1C16CF4
	0x03BCB700 MOVZ W8, 0x1
	0x03BCB704 STRB W8, [X20 + 0xE11]
	0x03BCB708 LDR X1, [X21]
	0x03BCB70C MOV X0, X19
	0x03BCB710 LDP X20, X19, [X31 + 0x10]
	0x03BCB714 LDP X30, X21, [X31], #0x20
	0x03BCB718 B 0x264967C
	0x03BCB71C STR X30, [X31 - 0x30]!
	0x03BCB720 STP X22, X21, [X31 + 0x10]
	0x03BCB724 STP X20, X19, [X31 + 0x20]
	0x03BCB728 ADRP X21, 0x817000
	0x03BCB72C ADRP X22, 0x592000
	0x03BCB730 LDRB W8, [X21 + 0xE12]
	0x03BCB734 LDR X22, [X22 + 0x8B8]
	0x03BCB738 MOV X19, X1
	0x03BCB73C MOV X20, X0
	0x03BCB740 TBNZ X8, 0x0, 0x3BCB758
	0x03BCB744 ADRP X0, 0x592000
	0x03BCB748 LDR X0, [X0 + 0x8B8]
	0x03BCB74C BL 0x1C16CF4
	0x03BCB750 MOVZ W8, 0x1
	0x03BCB754 STRB W8, [X21 + 0xE12]
	0x03BCB758 LDR X2, [X22]
	0x03BCB75C MOV X0, X20
	0x03BCB760 MOV X1, X19

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X20, 0x818000
	007 Move X21, 0x551000
	008 Move X19, 0x593000
	009 Move W8, [X20+3569]
	010 Move X21, [X21+104]
	011 Move X19, [X19+1840]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x593000
	017 Move X0, [X0+1840]
	018 Call 0x1C17CF4
	019 Move X0, 0x551000
	020 Move X0, [X0+104]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3569], W8
	024 Move X1, [X21]
	025 Add X0, X31, 16
	026 Move X2, X31
	027 Move [X31+16], X31
	028 Move [X31+24], X31
	029 Call InternedString..ctor, X0, X1
	030 Move V0, [X31+1]
	031 Move X8, [X19]
	032 Move X20, [X31+48]
	033 Move X19, [X31+56]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Move [X31], V0
	037 Move X8, [X8+184]
	038 Move [X8], V0
	039 Add X31, X31, 64
	040 Return 

