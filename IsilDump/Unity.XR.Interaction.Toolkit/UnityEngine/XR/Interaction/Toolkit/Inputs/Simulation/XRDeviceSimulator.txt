Type: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator

Method: UnityEngine.InputSystem.InputActionAsset get_deviceSimulatorActionAsset()

Disassembly:
	0x03BC0378 LDR X0, [X0 + 0x4C0]
	0x03BC037C BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_deviceSimulatorActionAsset(UnityEngine.InputSystem.InputActionAsset value)

Disassembly:
	0x03BC0380 ADRP X0, 0x59D000
	0x03BC0384 LDR X0, [X0 + 0x460]

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: UnityEngine.InputSystem.InputActionAsset get_controllerActionAsset()

Disassembly:
	0x03BC0388 BL 0x1C16CF4
	0x03BC038C MOVZ W8, 0x1

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_controllerActionAsset(UnityEngine.InputSystem.InputActionAsset value)

Disassembly:
	0x03BC0390 STRB W8, [X20 + 0xD9E]
	0x03BC0394 LDR X0, [X24]

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: UnityEngine.InputSystem.InputActionReference get_keyboardXTranslateAction()

Disassembly:
	0x03BC0398 LDR X20, [X19 + 0x70]
	0x03BC039C BL 0x1C16F10

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_keyboardXTranslateAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC03A0 LDR X2, [X21]
	0x03BC03A4 MOV X1, X19
	0x03BC03A8 MOV X3, X31
	0x03BC03AC MOV X21, X0
	0x03BC03B0 BL 0x2A719B8
	0x03BC03B4 LDR X0, [X24]
	0x03BC03B8 BL 0x1C16F10
	0x03BC03BC LDR X2, [X22]
	0x03BC03C0 MOV X1, X19
	0x03BC03C4 MOV X3, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeKeyboardXTranslateAction, X0
	007 Move [X20+48], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeKeyboardXTranslateAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_keyboardYTranslateAction()

Disassembly:
	0x03BC0590 STR X30, [X31 - 0x20]!
	0x03BC0594 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_keyboardYTranslateAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC0598 MOV X19, X1
	0x03BC059C MOV X20, X0
	0x03BC05A0 BL 0x3BC05B8
	0x03BC05A4 STR X19, [X20 + 0x80]
	0x03BC05A8 MOV X0, X20
	0x03BC05AC LDP X20, X19, [X31 + 0x10]
	0x03BC05B0 LDR X30, [X31], #0x20
	0x03BC05B4 B 0x3BC0664
	0x03BC05B8 STP X30, X23, [X31 - 0x30]!
	0x03BC05BC STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeKeyboardYTranslateAction, X0
	007 Move [X20+56], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeKeyboardYTranslateAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_keyboardZTranslateAction()

Disassembly:
	0x03BC0788 BL 0x1C16CF4
	0x03BC078C ADRP X0, 0x59D000

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_keyboardZTranslateAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC0790 LDR X0, [X0 + 0x460]
	0x03BC0794 BL 0x1C16CF4
	0x03BC0798 MOVZ W8, 0x1
	0x03BC079C STRB W8, [X20 + 0xDA5]
	0x03BC07A0 LDR X0, [X23]
	0x03BC07A4 LDR X20, [X19 + 0x88]
	0x03BC07A8 BL 0x1C16F10
	0x03BC07AC LDR X2, [X21]
	0x03BC07B0 MOV X1, X19
	0x03BC07B4 MOV X3, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeKeyboardZTranslateAction, X0
	007 Move [X20+64], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeKeyboardZTranslateAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_manipulateLeftAction()

Disassembly:
	0x03BC0980 LDR W8, [X0 + 0xE0]
	0x03BC0984 CBNZ W8, 0x3BC098C

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Void set_manipulateLeftAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC0988 BL 0x1C16DFC
	0x03BC098C MOV X0, X20
	0x03BC0990 MOV X1, X21
	0x03BC0994 MOV X2, X22
	0x03BC0998 LDP X20, X19, [X31 + 0x30]
	0x03BC099C LDP X22, X21, [X31 + 0x20]
	0x03BC09A0 LDP X24, X23, [X31 + 0x10]
	0x03BC09A4 LDR X30, [X31], #0x40
	0x03BC09A8 B 0x3BC8490
	0x03BC09AC STR X30, [X31 - 0x40]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeManipulateLeftAction, X0
	007 Move [X20+72], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeManipulateLeftAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_manipulateRightAction()

Disassembly:
	0x03BC0B78 LDR W8, [X0 + 0xE0]
	0x03BC0B7C CBNZ W8, 0x3BC0B84

ISIL:
	001 Move X0, [X0+80]
	002 Return X0

Method: System.Void set_manipulateRightAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC0B80 BL 0x1C16DFC
	0x03BC0B84 MOV X0, X20
	0x03BC0B88 MOV X1, X21
	0x03BC0B8C MOV X2, X22
	0x03BC0B90 LDP X20, X19, [X31 + 0x30]
	0x03BC0B94 LDP X22, X21, [X31 + 0x20]
	0x03BC0B98 LDP X24, X23, [X31 + 0x10]
	0x03BC0B9C LDR X30, [X31], #0x40
	0x03BC0BA0 B 0x3BC8490
	0x03BC0BA4 STR X30, [X31 - 0x40]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeManipulateRightAction, X0
	007 Move [X20+80], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeManipulateRightAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_toggleManipulateLeftAction()

Disassembly:
	0x03BC0D70 LDR W8, [X0 + 0xE0]
	0x03BC0D74 CBNZ W8, 0x3BC0D7C

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: System.Void set_toggleManipulateLeftAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC0D78 BL 0x1C16DFC
	0x03BC0D7C MOV X0, X20
	0x03BC0D80 MOV X1, X21
	0x03BC0D84 MOV X2, X22
	0x03BC0D88 LDP X20, X19, [X31 + 0x30]
	0x03BC0D8C LDP X22, X21, [X31 + 0x20]
	0x03BC0D90 LDP X24, X23, [X31 + 0x10]
	0x03BC0D94 LDR X30, [X31], #0x40
	0x03BC0D98 B 0x3BC8490
	0x03BC0D9C STR X30, [X31 - 0x40]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeToggleManipulateLeftAction, X0
	007 Move [X20+88], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeToggleManipulateLeftAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_toggleManipulateRightAction()

Disassembly:
	0x03BC0EF8 BL 0x1C16CF4
	0x03BC0EFC ADRP X0, 0x59D000

ISIL:
	001 Move X0, [X0+96]
	002 Return X0

Method: System.Void set_toggleManipulateRightAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC0F00 LDR X0, [X0 + 0x460]
	0x03BC0F04 BL 0x1C16CF4
	0x03BC0F08 MOVZ W8, 0x1
	0x03BC0F0C STRB W8, [X20 + 0xDAD]
	0x03BC0F10 LDR X0, [X23]
	0x03BC0F14 LDR X20, [X19 + 0xA8]
	0x03BC0F18 BL 0x1C16F10
	0x03BC0F1C LDR X2, [X21]
	0x03BC0F20 MOV X1, X19
	0x03BC0F24 MOV X3, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeToggleManipulateRightAction, X0
	007 Move [X20+96], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeToggleManipulateRightAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_toggleManipulateBodyAction()

Disassembly:
	0x03BC1080 BL 0x1C16CF4
	0x03BC1084 ADRP X0, 0x59C000

ISIL:
	001 Move X0, [X0+104]
	002 Return X0

Method: System.Void set_toggleManipulateBodyAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC1088 LDR X0, [X0 + 0x528]
	0x03BC108C BL 0x1C16CF4
	0x03BC1090 ADRP X0, 0x59C000
	0x03BC1094 LDR X0, [X0 + 0x520]
	0x03BC1098 BL 0x1C16CF4
	0x03BC109C ADRP X0, 0x59C000
	0x03BC10A0 LDR X0, [X0 + 0x460]
	0x03BC10A4 BL 0x1C16CF4
	0x03BC10A8 MOVZ W8, 0x1
	0x03BC10AC STRB W8, [X20 + 0xDAF]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeToggleManipulateBodyAction, X0
	007 Move [X20+104], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeToggleManipulateBodyAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_manipulateHeadAction()

Disassembly:
	0x03BC1208 STR X30, [X31 - 0x20]!
	0x03BC120C STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+112]
	002 Return X0

Method: System.Void set_manipulateHeadAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC1210 MOV X19, X1
	0x03BC1214 MOV X20, X0
	0x03BC1218 BL 0x3BC1230
	0x03BC121C STR X19, [X20 + 0xB8]
	0x03BC1220 MOV X0, X20
	0x03BC1224 LDP X20, X19, [X31 + 0x10]
	0x03BC1228 LDR X30, [X31], #0x20
	0x03BC122C B 0x3BC1314
	0x03BC1230 STR X30, [X31 - 0x40]!
	0x03BC1234 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeManipulateHeadAction, X0
	007 Move [X20+112], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeManipulateHeadAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_handControllerModeAction()

Disassembly:
	0x03BC1400 STR X30, [X31 - 0x20]!
	0x03BC1404 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+120]
	002 Return X0

Method: System.Void set_handControllerModeAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC1408 MOV X19, X1
	0x03BC140C MOV X20, X0
	0x03BC1410 BL 0x3BC1428
	0x03BC1414 STR X19, [X20 + 0xC0]
	0x03BC1418 MOV X0, X20
	0x03BC141C LDP X20, X19, [X31 + 0x10]
	0x03BC1420 LDR X30, [X31], #0x20
	0x03BC1424 B 0x3BC150C
	0x03BC1428 STR X30, [X31 - 0x40]!
	0x03BC142C STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeHandControllerModeAction, X0
	007 Move [X20+120], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeHandControllerModeAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_cycleDevicesAction()

Disassembly:
	0x03BC1588 LDR X20, [X19 + 0xC0]
	0x03BC158C BL 0x1C16F10

ISIL:
	001 Move X0, [X0+128]
	002 Return X0

Method: System.Void set_cycleDevicesAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC1590 LDR X2, [X21]
	0x03BC1594 MOV X1, X19
	0x03BC1598 MOV X3, X31
	0x03BC159C MOV X21, X0
	0x03BC15A0 BL 0x2A719B8
	0x03BC15A4 LDR X0, [X24]
	0x03BC15A8 BL 0x1C16F10
	0x03BC15AC LDR X2, [X22]
	0x03BC15B0 MOV X1, X19
	0x03BC15B4 MOV X3, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeCycleDevicesAction, X0
	007 Move [X20+128], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeCycleDevicesAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_stopManipulationAction()

Disassembly:
	0x03BC1710 STP X20, X19, [X31 + 0x30]
	0x03BC1714 ADRP X20, 0x821000

ISIL:
	001 Move X0, [X0+136]
	002 Return X0

Method: System.Void set_stopManipulationAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC1718 ADRP X24, 0x536000
	0x03BC171C ADRP X21, 0x59C000
	0x03BC1720 ADRP X22, 0x59C000
	0x03BC1724 ADRP X23, 0x59C000
	0x03BC1728 LDRB W8, [X20 + 0xDB4]
	0x03BC172C LDR X24, [X24 + 0x3D8]
	0x03BC1730 LDR X21, [X21 + 0x550]
	0x03BC1734 LDR X22, [X22 + 0x558]
	0x03BC1738 LDR X23, [X23 + 0x460]
	0x03BC173C MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeStopManipulationAction, X0
	007 Move [X20+136], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeStopManipulationAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_mouseDeltaAction()

Disassembly:
	0x03BC1898 BL 0x1C16F10
	0x03BC189C LDR X2, [X21]

ISIL:
	001 Move X0, [X0+144]
	002 Return X0

Method: System.Void set_mouseDeltaAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC18A0 MOV X1, X19
	0x03BC18A4 MOV X3, X31
	0x03BC18A8 MOV X21, X0
	0x03BC18AC BL 0x2A719B8
	0x03BC18B0 LDR X0, [X24]
	0x03BC18B4 BL 0x1C16F10
	0x03BC18B8 LDR X2, [X22]
	0x03BC18BC MOV X1, X19
	0x03BC18C0 MOV X3, X31
	0x03BC18C4 MOV X22, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeMouseDeltaAction, X0
	007 Move [X20+144], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeMouseDeltaAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_mouseScrollAction()

Disassembly:
	0x03BC1A90 LDR X0, [X22]
	0x03BC1A94 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move X0, [X0+152]
	002 Return X0

Method: System.Void set_mouseScrollAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC1A98 CBNZ W8, 0x3BC1AA0
	0x03BC1A9C BL 0x1C16DFC
	0x03BC1AA0 MOV X0, X20
	0x03BC1AA4 MOV X1, X21
	0x03BC1AA8 LDP X20, X19, [X31 + 0x20]
	0x03BC1AAC LDP X22, X21, [X31 + 0x10]
	0x03BC1AB0 MOV X2, X31
	0x03BC1AB4 LDP X30, X23, [X31], #0x30
	0x03BC1AB8 B 0x3BC8490
	0x03BC1ABC STP X30, X23, [X31 - 0x30]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeMouseScrollAction, X0
	007 Move [X20+152], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeMouseScrollAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_rotateModeOverrideAction()

Disassembly:
	0x03BC1C88 LDR X0, [X0 + 0x578]
	0x03BC1C8C BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+160]
	002 Return X0

Method: System.Void set_rotateModeOverrideAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC1C90 ADRP X0, 0x59C000
	0x03BC1C94 LDR X0, [X0 + 0x460]
	0x03BC1C98 BL 0x1C16CF4
	0x03BC1C9C MOVZ W8, 0x1
	0x03BC1CA0 STRB W8, [X20 + 0xDBA]
	0x03BC1CA4 LDR X0, [X23]
	0x03BC1CA8 LDR X20, [X19 + 0xE0]
	0x03BC1CAC BL 0x1C16F10
	0x03BC1CB0 LDR X2, [X21]
	0x03BC1CB4 MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeRotateModeOverrideAction, X0
	007 Move [X20+160], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeRotateModeOverrideAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_toggleMouseTransformationModeAction()

Disassembly:
	0x03BC1E80 STR X30, [X31 - 0x20]!
	0x03BC1E84 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+168]
	002 Return X0

Method: System.Void set_toggleMouseTransformationModeAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC1E88 MOV X19, X1
	0x03BC1E8C MOV X20, X0
	0x03BC1E90 BL 0x3BC1EA8
	0x03BC1E94 STR X19, [X20 + 0xF0]
	0x03BC1E98 MOV X0, X20
	0x03BC1E9C LDP X20, X19, [X31 + 0x10]
	0x03BC1EA0 LDR X30, [X31], #0x20
	0x03BC1EA4 B 0x3BC1F54
	0x03BC1EA8 STP X30, X23, [X31 - 0x30]!
	0x03BC1EAC STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeToggleMouseTransformationModeAction, X0
	007 Move [X20+168], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeToggleMouseTransformationModeAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_negateModeAction()

Disassembly:
	0x03BC2008 STR X30, [X31 - 0x20]!
	0x03BC200C STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+176]
	002 Return X0

Method: System.Void set_negateModeAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC2010 MOV X19, X1
	0x03BC2014 MOV X20, X0
	0x03BC2018 BL 0x3BC2030
	0x03BC201C STR X19, [X20 + 0xF8]
	0x03BC2020 MOV X0, X20
	0x03BC2024 LDP X20, X19, [X31 + 0x10]
	0x03BC2028 LDR X30, [X31], #0x20
	0x03BC202C B 0x3BC2114
	0x03BC2030 STR X30, [X31 - 0x40]!
	0x03BC2034 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeNegateModeAction, X0
	007 Move [X20+176], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeNegateModeAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_xConstraintAction()

Disassembly:
	0x03BC2200 STR X30, [X31 - 0x20]!
	0x03BC2204 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+184]
	002 Return X0

Method: System.Void set_xConstraintAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC2208 MOV X19, X1
	0x03BC220C MOV X20, X0
	0x03BC2210 BL 0x3BC2228
	0x03BC2214 STR X19, [X20 + 0x100]
	0x03BC2218 MOV X0, X20
	0x03BC221C LDP X20, X19, [X31 + 0x10]
	0x03BC2220 LDR X30, [X31], #0x20
	0x03BC2224 B 0x3BC230C
	0x03BC2228 STR X30, [X31 - 0x40]!
	0x03BC222C STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeXConstraintAction, X0
	007 Move [X20+184], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeXConstraintAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_yConstraintAction()

Disassembly:
	0x03BC23F8 STR X30, [X31 - 0x20]!
	0x03BC23FC STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+192]
	002 Return X0

Method: System.Void set_yConstraintAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC2400 MOV X19, X1
	0x03BC2404 MOV X20, X0
	0x03BC2408 BL 0x3BC2420
	0x03BC240C STR X19, [X20 + 0x108]
	0x03BC2410 MOV X0, X20
	0x03BC2414 LDP X20, X19, [X31 + 0x10]
	0x03BC2418 LDR X30, [X31], #0x20
	0x03BC241C B 0x3BC2504
	0x03BC2420 STR X30, [X31 - 0x40]!
	0x03BC2424 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeYConstraintAction, X0
	007 Move [X20+192], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeYConstraintAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_zConstraintAction()

Disassembly:
	0x03BC25F0 STR X30, [X31 - 0x20]!
	0x03BC25F4 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+200]
	002 Return X0

Method: System.Void set_zConstraintAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC25F8 MOV X19, X1
	0x03BC25FC MOV X20, X0
	0x03BC2600 BL 0x3BC2618
	0x03BC2604 STR X19, [X20 + 0x110]
	0x03BC2608 MOV X0, X20
	0x03BC260C LDP X20, X19, [X31 + 0x10]
	0x03BC2610 LDR X30, [X31], #0x20
	0x03BC2614 B 0x3BC26FC
	0x03BC2618 STR X30, [X31 - 0x40]!
	0x03BC261C STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeZConstraintAction, X0
	007 Move [X20+200], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeZConstraintAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_resetAction()

Disassembly:
	0x03BC27E8 STR X30, [X31 - 0x20]!
	0x03BC27EC STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+208]
	002 Return X0

Method: System.Void set_resetAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC27F0 MOV X19, X1
	0x03BC27F4 MOV X20, X0
	0x03BC27F8 BL 0x3BC2810
	0x03BC27FC STR X19, [X20 + 0x118]
	0x03BC2800 MOV X0, X20
	0x03BC2804 LDP X20, X19, [X31 + 0x10]
	0x03BC2808 LDR X30, [X31], #0x20
	0x03BC280C B 0x3BC28F4
	0x03BC2810 STR X30, [X31 - 0x40]!
	0x03BC2814 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeResetAction, X0
	007 Move [X20+208], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeResetAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_toggleCursorLockAction()

Disassembly:
	0x03BC29E0 STR X30, [X31 - 0x20]!
	0x03BC29E4 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+216]
	002 Return X0

Method: System.Void set_toggleCursorLockAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC29E8 MOV X19, X1
	0x03BC29EC MOV X20, X0
	0x03BC29F0 BL 0x3BC2A08
	0x03BC29F4 STR X19, [X20 + 0x120]
	0x03BC29F8 MOV X0, X20
	0x03BC29FC LDP X20, X19, [X31 + 0x10]
	0x03BC2A00 LDR X30, [X31], #0x20
	0x03BC2A04 B 0x3BC2AEC
	0x03BC2A08 STR X30, [X31 - 0x40]!
	0x03BC2A0C STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeToggleCursorLockAction, X0
	007 Move [X20+216], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeToggleCursorLockAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_toggleDevicePositionTargetAction()

Disassembly:
	0x03BC2B68 LDR X20, [X19 + 0x120]
	0x03BC2B6C BL 0x1C16F10

ISIL:
	001 Move X0, [X0+224]
	002 Return X0

Method: System.Void set_toggleDevicePositionTargetAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC2B70 LDR X2, [X21]
	0x03BC2B74 MOV X1, X19
	0x03BC2B78 MOV X3, X31
	0x03BC2B7C MOV X21, X0
	0x03BC2B80 BL 0x2A719B8
	0x03BC2B84 LDR X0, [X24]
	0x03BC2B88 BL 0x1C16F10
	0x03BC2B8C LDR X2, [X22]
	0x03BC2B90 MOV X1, X19
	0x03BC2B94 MOV X3, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeToggleDevicePositionTargetAction, X0
	007 Move [X20+224], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeToggleDevicePositionTargetAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_togglePrimary2DAxisTargetAction()

Disassembly:
	0x03BC2CF0 STP X20, X19, [X31 + 0x30]
	0x03BC2CF4 ADRP X20, 0x820000

ISIL:
	001 Move X0, [X0+232]
	002 Return X0

Method: System.Void set_togglePrimary2DAxisTargetAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC2CF8 ADRP X24, 0x535000
	0x03BC2CFC ADRP X21, 0x59B000
	0x03BC2D00 ADRP X22, 0x59B000
	0x03BC2D04 ADRP X23, 0x59B000
	0x03BC2D08 LDRB W8, [X20 + 0xDCC]
	0x03BC2D0C LDR X24, [X24 + 0x3D8]
	0x03BC2D10 LDR X21, [X21 + 0x5F0]
	0x03BC2D14 LDR X22, [X22 + 0x5F8]
	0x03BC2D18 LDR X23, [X23 + 0x460]
	0x03BC2D1C MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeTogglePrimary2DAxisTargetAction, X0
	007 Move [X20+232], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeTogglePrimary2DAxisTargetAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_toggleSecondary2DAxisTargetAction()

Disassembly:
	0x03BC2E78 BL 0x1C16F10
	0x03BC2E7C LDR X2, [X21]

ISIL:
	001 Move X0, [X0+240]
	002 Return X0

Method: System.Void set_toggleSecondary2DAxisTargetAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC2E80 MOV X1, X19
	0x03BC2E84 MOV X3, X31
	0x03BC2E88 MOV X21, X0
	0x03BC2E8C BL 0x2A719B8
	0x03BC2E90 LDR X0, [X24]
	0x03BC2E94 BL 0x1C16F10
	0x03BC2E98 LDR X2, [X22]
	0x03BC2E9C MOV X1, X19
	0x03BC2EA0 MOV X3, X31
	0x03BC2EA4 MOV X22, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeToggleSecondary2DAxisTargetAction, X0
	007 Move [X20+240], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeToggleSecondary2DAxisTargetAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_axis2DAction()

Disassembly:
	0x03BC3000 ADRP X20, 0x81F000
	0x03BC3004 ADRP X24, 0x534000

ISIL:
	001 Move X0, [X0+248]
	002 Return X0

Method: System.Void set_axis2DAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC3008 ADRP X21, 0x59A000
	0x03BC300C ADRP X22, 0x59A000
	0x03BC3010 ADRP X23, 0x59A000
	0x03BC3014 LDRB W8, [X20 + 0xDD1]
	0x03BC3018 LDR X24, [X24 + 0x3D8]
	0x03BC301C LDR X21, [X21 + 0x610]
	0x03BC3020 LDR X22, [X22 + 0x618]
	0x03BC3024 LDR X23, [X23 + 0x460]
	0x03BC3028 MOV X19, X0
	0x03BC302C TBNZ X8, 0x0, 0x3BC3068

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeAxis2DAction, X0
	007 Move [X20+248], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeAxis2DAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_restingHandAxis2DAction()

Disassembly:
	0x03BC31F8 ADRP X20, 0x81F000
	0x03BC31FC ADRP X24, 0x534000

ISIL:
	001 Move X0, [X0+256]
	002 Return X0

Method: System.Void set_restingHandAxis2DAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC3200 ADRP X21, 0x59A000
	0x03BC3204 ADRP X22, 0x59A000
	0x03BC3208 ADRP X23, 0x59A000
	0x03BC320C LDRB W8, [X20 + 0xDD3]
	0x03BC3210 LDR X24, [X24 + 0x3D8]
	0x03BC3214 LDR X21, [X21 + 0x620]
	0x03BC3218 LDR X22, [X22 + 0x628]
	0x03BC321C LDR X23, [X23 + 0x460]
	0x03BC3220 MOV X19, X0
	0x03BC3224 TBNZ X8, 0x0, 0x3BC3260

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeRestingHandAxis2DAction, X0
	007 Move [X20+256], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeRestingHandAxis2DAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_gripAction()

Disassembly:
	0x03BC33F0 ADRP X20, 0x81F000
	0x03BC33F4 ADRP X24, 0x534000

ISIL:
	001 Move X0, [X0+264]
	002 Return X0

Method: System.Void set_gripAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC33F8 ADRP X21, 0x59A000
	0x03BC33FC ADRP X22, 0x59A000
	0x03BC3400 ADRP X23, 0x59A000
	0x03BC3404 LDRB W8, [X20 + 0xDD5]
	0x03BC3408 LDR X24, [X24 + 0x3D8]
	0x03BC340C LDR X21, [X21 + 0x630]
	0x03BC3410 LDR X22, [X22 + 0x638]
	0x03BC3414 LDR X23, [X23 + 0x460]
	0x03BC3418 MOV X19, X0
	0x03BC341C TBNZ X8, 0x0, 0x3BC3458

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeGripAction, X0
	007 Move [X20+264], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeGripAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_triggerAction()

Disassembly:
	0x03BC35E8 ADRP X20, 0x81F000
	0x03BC35EC ADRP X24, 0x534000

ISIL:
	001 Move X0, [X0+272]
	002 Return X0

Method: System.Void set_triggerAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC35F0 ADRP X21, 0x59A000
	0x03BC35F4 ADRP X22, 0x59A000
	0x03BC35F8 ADRP X23, 0x59A000
	0x03BC35FC LDRB W8, [X20 + 0xDD7]
	0x03BC3600 LDR X24, [X24 + 0x3D8]
	0x03BC3604 LDR X21, [X21 + 0x640]
	0x03BC3608 LDR X22, [X22 + 0x648]
	0x03BC360C LDR X23, [X23 + 0x460]
	0x03BC3610 MOV X19, X0
	0x03BC3614 TBNZ X8, 0x0, 0x3BC3650

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeTriggerAction, X0
	007 Move [X20+272], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeTriggerAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_primaryButtonAction()

Disassembly:
	0x03BC37E0 ADRP X20, 0x81F000
	0x03BC37E4 ADRP X24, 0x534000

ISIL:
	001 Move X0, [X0+280]
	002 Return X0

Method: System.Void set_primaryButtonAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC37E8 ADRP X21, 0x59A000
	0x03BC37EC ADRP X22, 0x59A000
	0x03BC37F0 ADRP X23, 0x59A000
	0x03BC37F4 LDRB W8, [X20 + 0xDD9]
	0x03BC37F8 LDR X24, [X24 + 0x3D8]
	0x03BC37FC LDR X21, [X21 + 0x650]
	0x03BC3800 LDR X22, [X22 + 0x658]
	0x03BC3804 LDR X23, [X23 + 0x460]
	0x03BC3808 MOV X19, X0
	0x03BC380C TBNZ X8, 0x0, 0x3BC3848

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribePrimaryButtonAction, X0
	007 Move [X20+280], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribePrimaryButtonAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_secondaryButtonAction()

Disassembly:
	0x03BC39D8 STR W1, [X0 + 0x184]
	0x03BC39DC RET

ISIL:
	001 Move X0, [X0+288]
	002 Return X0

Method: System.Void set_secondaryButtonAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC39E0 LDR V0, [X0 + 0x188]
	0x03BC39E4 RET
	0x03BC39E8 STR S0, [X0 + 0x188]
	0x03BC39EC RET
	0x03BC39F0 LDR V0, [X0 + 0x18C]
	0x03BC39F4 RET
	0x03BC39F8 STR S0, [X0 + 0x18C]
	0x03BC39FC RET
	0x03BC3A00 LDR V0, [X0 + 0x190]
	0x03BC3A04 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeSecondaryButtonAction, X0
	007 Move [X20+288], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeSecondaryButtonAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_menuAction()

Disassembly:
	0x03BC3BD0 B 0x3BC9AAC
	0x03BC3BD4 LDR W0, [X0 + 0x1F8]

ISIL:
	001 Move X0, [X0+296]
	002 Return X0

Method: System.Void set_menuAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC3BD8 MOVZ W1, 0x4
	0x03BC3BDC MOV X2, X31
	0x03BC3BE0 B 0x3BC9AAC
	0x03BC3BE4 LDR W8, [X0 + 0x1FC]
	0x03BC3BE8 CBZ W8, 0x3BC3BF4
	0x03BC3BEC MOV W0, W31
	0x03BC3BF0 RET
	0x03BC3BF4 LDR W0, [X0 + 0x1F8]
	0x03BC3BF8 MOVZ W1, 0x2
	0x03BC3BFC MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeMenuAction, X0
	007 Move [X20+296], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeMenuAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_primary2DAxisClickAction()

Disassembly:
	0x03BC3DC8 BL 0x1C16CF4
	0x03BC3DCC ADRP X0, 0x59A000

ISIL:
	001 Move X0, [X0+304]
	002 Return X0

Method: System.Void set_primary2DAxisClickAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC3DD0 LDR X0, [X0 + 0x680]
	0x03BC3DD4 BL 0x1C16CF4
	0x03BC3DD8 ADRP X0, 0x59A000
	0x03BC3DDC LDR X0, [X0 + 0x688]
	0x03BC3DE0 BL 0x1C16CF4
	0x03BC3DE4 ADRP X0, 0x59A000
	0x03BC3DE8 LDR X0, [X0 + 0x690]
	0x03BC3DEC BL 0x1C16CF4
	0x03BC3DF0 ADRP X0, 0x59A000
	0x03BC3DF4 LDR X0, [X0 + 0x698]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribePrimary2DAxisClickAction, X0
	007 Move [X20+304], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribePrimary2DAxisClickAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_secondary2DAxisClickAction()

Disassembly:
	0x03BC3FC0 LDR X8, [X8 + 0xA28]
	0x03BC3FC4 MOV X20, X0

ISIL:
	001 Move X0, [X0+312]
	002 Return X0

Method: System.Void set_secondary2DAxisClickAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC3FC8 LDR X8, [X8]
	0x03BC3FCC LDR W9, [X8 + 0xE0]
	0x03BC3FD0 CBNZ W9, 0x3BC3FDC
	0x03BC3FD4 MOV X0, X8
	0x03BC3FD8 BL 0x1C16DFC
	0x03BC3FDC MOV X0, X20
	0x03BC3FE0 MOV X1, X19
	0x03BC3FE4 MOV X2, X31
	0x03BC3FE8 BL 0x3C06B0C
	0x03BC3FEC MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeSecondary2DAxisClickAction, X0
	007 Move [X20+312], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeSecondary2DAxisClickAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_primary2DAxisTouchAction()

Disassembly:
	0x03BC41B8 BL 0x1C16DFC
	0x03BC41BC MOV X0, X20

ISIL:
	001 Move X0, [X0+320]
	002 Return X0

Method: System.Void set_primary2DAxisTouchAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC41C0 MOV X1, X31
	0x03BC41C4 MOV X2, X31
	0x03BC41C8 BL 0x3C3883C
	0x03BC41CC TBZ X0, 0x0, 0x3BC42C8
	0x03BC41D0 LDR X0, [X22]
	0x03BC41D4 LDR X20, [X19 + 0x108]
	0x03BC41D8 LDR W8, [X0 + 0xE0]
	0x03BC41DC CBNZ W8, 0x3BC41E4
	0x03BC41E0 BL 0x1C16DFC
	0x03BC41E4 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribePrimary2DAxisTouchAction, X0
	007 Move [X20+320], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribePrimary2DAxisTouchAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_secondary2DAxisTouchAction()

Disassembly:
	0x03BC43B0 BL 0x1C16DFC
	0x03BC43B4 ADRP X8, 0x599000

ISIL:
	001 Move X0, [X0+328]
	002 Return X0

Method: System.Void set_secondary2DAxisTouchAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC43B8 LDR X8, [X8 + 0x6A0]
	0x03BC43BC MOV X1, X19
	0x03BC43C0 MOV X2, X31
	0x03BC43C4 LDR X0, [X8]
	0x03BC43C8 BL 0x3C065A4
	0x03BC43CC B 0x3BC4430
	0x03BC43D0 LDR X0, [X19 + 0x160]
	0x03BC43D4 CBZ X0, 0x3BC4560
	0x03BC43D8 MOV X1, X31
	0x03BC43DC BL 0x3C389D4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeSecondary2DAxisTouchAction, X0
	007 Move [X20+328], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeSecondary2DAxisTouchAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_primaryTouchAction()

Disassembly:
	0x03BC45A8 ADRP X0, 0x52F000
	0x03BC45AC LDR X0, [X0 + 0x598]

ISIL:
	001 Move X0, [X0+336]
	002 Return X0

Method: System.Void set_primaryTouchAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC45B0 BL 0x1C16CF4
	0x03BC45B4 ADRP X0, 0x599000
	0x03BC45B8 LDR X0, [X0 + 0x6A8]
	0x03BC45BC BL 0x1C16CF4
	0x03BC45C0 ADRP X0, 0x599000
	0x03BC45C4 LDR X0, [X0 + 0x6B0]
	0x03BC45C8 BL 0x1C16CF4
	0x03BC45CC ADRP X0, 0x599000
	0x03BC45D0 LDR X0, [X0 + 0x6B8]
	0x03BC45D4 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribePrimaryTouchAction, X0
	007 Move [X20+336], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribePrimaryTouchAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionReference get_secondaryTouchAction()

Disassembly:
	0x03BC47A0 MOV X0, X19
	0x03BC47A4 BL 0x3BC031C

ISIL:
	001 Move X0, [X0+344]
	002 Return X0

Method: System.Void set_secondaryTouchAction(UnityEngine.InputSystem.InputActionReference value)

Disassembly:
	0x03BC47A8 MOV X0, X19
	0x03BC47AC BL 0x3BC07EC
	0x03BC47B0 MOV X0, X19
	0x03BC47B4 BL 0x3BC04DC
	0x03BC47B8 MOV X0, X19
	0x03BC47BC BL 0x3BC0664
	0x03BC47C0 MOV X0, X19
	0x03BC47C4 BL 0x3BC09AC
	0x03BC47C8 MOV X0, X19
	0x03BC47CC BL 0x3BC0BA4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRDeviceSimulator.UnsubscribeSecondaryTouchAction, X0
	007 Move [X20+344], X19
	008 Move X0, X20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call XRDeviceSimulator.SubscribeSecondaryTouchAction, X0
	013 Return 

Method: UnityEngine.InputSystem.InputActionAsset get_handActionAsset()

Disassembly:
	0x03BC4998 MOV X2, X31
	0x03BC499C ADD X22, X19, 0x208

ISIL:
	001 Move X0, [X0+352]
	002 Return X0

Method: System.Void set_handActionAsset(UnityEngine.InputSystem.InputActionAsset value)

Disassembly:
	0x03BC49A0 BL 0x3C354F8
	0x03BC49A4 TBZ X0, 0x0, 0x3BC4A14

ISIL:
	001 Move [X0+352], X1
	002 Return 

Method: System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/SimulatedHandExpression> get_simulatedHandExpressions()

Disassembly:
	0x03BC49A8 LDR X0, [X23]
	0x03BC49AC LDR X20, [X19 + 0x178]

ISIL:
	001 Move X0, [X0+368]
	002 Return X0

Method: UnityEngine.Transform get_cameraTransform()

Disassembly:
	0x03BC49B0 LDR W8, [X0 + 0xE0]
	0x03BC49B4 CBNZ W8, 0x3BC49BC

ISIL:
	001 Move X0, [X0+376]
	002 Return X0

Method: System.Void set_cameraTransform(UnityEngine.Transform value)

Disassembly:
	0x03BC49B8 BL 0x1C16DFC
	0x03BC49BC MOV X0, X20

ISIL:
	001 Move [X0+376], X1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/Space get_keyboardTranslateSpace()

Disassembly:
	0x03BC49C0 MOV X1, X31
	0x03BC49C4 MOV X2, X31

ISIL:
	001 Move W0, [X0+384]
	002 Return X0

Method: System.Void set_keyboardTranslateSpace(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/Space value)

Disassembly:
	0x03BC49C8 BL 0x3C354F8
	0x03BC49CC MOV X2, X31

ISIL:
	001 Move [X0+384], W1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/Space get_mouseTranslateSpace()

Disassembly:
	0x03BC49D0 TBZ X0, 0x0, 0x3BC49F0
	0x03BC49D4 LDR X0, [X19 + 0x178]

ISIL:
	001 Move W0, [X0+388]
	002 Return X0

Method: System.Void set_mouseTranslateSpace(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/Space value)

Disassembly:
	0x03BC49D8 CBZ X0, 0x3BC4B24
	0x03BC49DC ADRP X8, 0x557000

ISIL:
	001 Move [X0+388], W1
	002 Return 

Method: System.Single get_keyboardXTranslateSpeed()

Disassembly:
	0x03BC49E0 LDR X8, [X8 + 0x2C8]
	0x03BC49E4 LDR X1, [X8]

ISIL:
	001 Move V0, [X0+392]
	002 Return V0

Method: System.Void set_keyboardXTranslateSpeed(System.Single value)

Disassembly:
	0x03BC49E8 BL 0x21A3894
	0x03BC49EC MOV X2, X0

ISIL:
	001 Move [X0+392], S0
	002 Return 

Method: System.Single get_keyboardYTranslateSpeed()

Disassembly:
	0x03BC49F0 ADRP X8, 0x599000
	0x03BC49F4 LDR X8, [X8 + 0x6C8]

ISIL:
	001 Move V0, [X0+396]
	002 Return V0

Method: System.Void set_keyboardYTranslateSpeed(System.Single value)

Disassembly:
	0x03BC49F8 ADD X0, X31, 0x0
	0x03BC49FC MOV X1, X20

ISIL:
	001 Move [X0+396], S0
	002 Return 

Method: System.Single get_keyboardZTranslateSpeed()

Disassembly:
	0x03BC4A00 STP X31, X31, [X31]
	0x03BC4A04 LDR X3, [X8]

ISIL:
	001 Move V0, [X0+400]
	002 Return V0

Method: System.Void set_keyboardZTranslateSpeed(System.Single value)

Disassembly:
	0x03BC4A08 BL 0x27ABC80
	0x03BC4A0C LDR V0, [X31]

ISIL:
	001 Move [X0+400], S0
	002 Return 

Method: System.Single get_keyboardBodyTranslateMultiplier()

Disassembly:
	0x03BC4A10 STR V0, [X22]
	0x03BC4A14 LDR X0, [X23]

ISIL:
	001 Move V0, [X0+404]
	002 Return V0

Method: System.Void set_keyboardBodyTranslateMultiplier(System.Single value)

Disassembly:
	0x03BC4A18 LDR X20, [X22]
	0x03BC4A1C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X0+404], S0
	002 Return 

Method: System.Single get_mouseXTranslateSensitivity()

Disassembly:
	0x03BC4A20 CBNZ W8, 0x3BC4A28
	0x03BC4A24 BL 0x1C16DFC

ISIL:
	001 Move V0, [X0+408]
	002 Return V0

Method: System.Void set_mouseXTranslateSensitivity(System.Single value)

Disassembly:
	0x03BC4A28 MOV X0, X20
	0x03BC4A2C MOV X1, X31

ISIL:
	001 Move [X0+408], S0
	002 Return 

Method: System.Single get_mouseYTranslateSensitivity()

Disassembly:
	0x03BC4A30 MOV X2, X31
	0x03BC4A34 BL 0x3C3883C

ISIL:
	001 Move V0, [X0+412]
	002 Return V0

Method: System.Void set_mouseYTranslateSensitivity(System.Single value)

Disassembly:
	0x03BC4A38 TBZ X0, 0x0, 0x3BC4A78
	0x03BC4A3C MOV X0, X31

ISIL:
	001 Move [X0+412], S0
	002 Return 

Method: System.Single get_mouseScrollTranslateSensitivity()

Disassembly:
	0x03BC4A40 BL 0x3C047F8
	0x03BC4A44 LDR X8, [X23]

ISIL:
	001 Move V0, [X0+416]
	002 Return V0

Method: System.Void set_mouseScrollTranslateSensitivity(System.Single value)

Disassembly:
	0x03BC4A48 MOV X20, X0
	0x03BC4A4C LDR W9, [X8 + 0xE0]

ISIL:
	001 Move [X0+416], S0
	002 Return 

Method: System.Single get_mouseXRotateSensitivity()

Disassembly:
	0x03BC4A50 CBNZ W9, 0x3BC4A5C
	0x03BC4A54 MOV X0, X8

ISIL:
	001 Move V0, [X0+420]
	002 Return V0

Method: System.Void set_mouseXRotateSensitivity(System.Single value)

Disassembly:
	0x03BC4A58 BL 0x1C16DFC
	0x03BC4A5C MOV X0, X20

ISIL:
	001 Move [X0+420], S0
	002 Return 

Method: System.Single get_mouseYRotateSensitivity()

Disassembly:
	0x03BC4A60 MOV X1, X31
	0x03BC4A64 MOV X2, X31

ISIL:
	001 Move V0, [X0+424]
	002 Return V0

Method: System.Void set_mouseYRotateSensitivity(System.Single value)

Disassembly:
	0x03BC4A68 BL 0x3C3883C
	0x03BC4A6C TBZ X0, 0x0, 0x3BC4AB8

ISIL:
	001 Move [X0+424], S0
	002 Return 

Method: System.Single get_mouseScrollRotateSensitivity()

Disassembly:
	0x03BC4A70 MOV W0, W31
	0x03BC4A74 B 0x3BC4B10

ISIL:
	001 Move V0, [X0+428]
	002 Return V0

Method: System.Void set_mouseScrollRotateSensitivity(System.Single value)

Disassembly:
	0x03BC4A78 LDR X0, [X23]
	0x03BC4A7C LDR X20, [X19 + 0x210]

ISIL:
	001 Move [X0+428], S0
	002 Return 

Method: System.Boolean get_mouseYRotateInvert()

Disassembly:
	0x03BC4A80 LDR W8, [X0 + 0xE0]
	0x03BC4A84 CBNZ W8, 0x3BC4A8C

ISIL:
	001 Move W0, [X0+432]
	002 Return X0

Method: System.Void set_mouseYRotateInvert(System.Boolean value)

Disassembly:
	0x03BC4A88 BL 0x1C16DFC
	0x03BC4A8C MOV X0, X20
	0x03BC4A90 MOV X1, X31

ISIL:
	001 And W8, W1, 1
	002 Move [X0+432], W8
	003 Return 

Method: UnityEngine.CursorLockMode get_desiredCursorLockMode()

Disassembly:
	0x03BC4A94 MOV X2, X31
	0x03BC4A98 BL 0x3C354F8

ISIL:
	001 Move W0, [X0+436]
	002 Return X0

Method: System.Void set_desiredCursorLockMode(UnityEngine.CursorLockMode value)

Disassembly:
	0x03BC4A9C TBZ X0, 0x0, 0x3BC4B0C
	0x03BC4AA0 LDR X0, [X19 + 0x210]

ISIL:
	001 Move [X0+436], W1
	002 Return 

Method: System.Boolean get_removeOtherHMDDevices()

Disassembly:
	0x03BC4AA4 CBZ X0, 0x3BC4B24
	0x03BC4AA8 MOV X1, X31

ISIL:
	001 Move W0, [X0+440]
	002 Return X0

Method: System.Void set_removeOtherHMDDevices(System.Boolean value)

Disassembly:
	0x03BC4AAC BL 0x3C32454
	0x03BC4AB0 TBZ X0, 0x0, 0x3BC4A3C
	0x03BC4AB4 B 0x3BC4B0C

ISIL:
	001 And W8, W1, 1
	002 Move [X0+440], W8
	003 Return 

Method: System.Boolean get_handTrackingCapability()

Disassembly:
	0x03BC4AB8 CBZ X20, 0x3BC4B24
	0x03BC4ABC MOV X0, X20

ISIL:
	001 Move W0, [X0+441]
	002 Return X0

Method: System.Void set_handTrackingCapability(System.Boolean value)

Disassembly:
	0x03BC4AC0 MOV X1, X31
	0x03BC4AC4 BL 0x3C32E90
	0x03BC4AC8 STR X0, [X19 + 0x178]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+441], W8
	003 Return 

Method: UnityEngine.GameObject get_deviceSimulatorUI()

Disassembly:
	0x03BC4ACC CBZ X0, 0x3BC4B24
	0x03BC4AD0 ADRP X8, 0x557000

ISIL:
	001 Move X0, [X0+448]
	002 Return X0

Method: System.Void set_deviceSimulatorUI(UnityEngine.GameObject value)

Disassembly:
	0x03BC4AD4 LDR X8, [X8 + 0x2C8]
	0x03BC4AD8 MOV X20, X0

ISIL:
	001 Move [X0+448], X1
	002 Return 

Method: System.Single get_gripAmount()

Disassembly:
	0x03BC4ADC LDR X1, [X8]
	0x03BC4AE0 BL 0x21A3894

ISIL:
	001 Move V0, [X0+456]
	002 Return V0

Method: System.Void set_gripAmount(System.Single value)

Disassembly:
	0x03BC4AE4 ADRP X8, 0x599000
	0x03BC4AE8 LDR X8, [X8 + 0x6C8]

ISIL:
	001 Move [X0+456], S0
	002 Return 

Method: System.Single get_triggerAmount()

Disassembly:
	0x03BC4AEC MOV X2, X0
	0x03BC4AF0 ADD X0, X31, 0x0

ISIL:
	001 Move V0, [X0+460]
	002 Return V0

Method: System.Void set_triggerAmount(System.Single value)

Disassembly:
	0x03BC4AF4 MOV X1, X20
	0x03BC4AF8 LDR X3, [X8]

ISIL:
	001 Move [X0+460], S0
	002 Return 

Method: System.Boolean get_hmdIsTracked()

Disassembly:
	0x03BC4AFC STP X31, X31, [X31]
	0x03BC4B00 BL 0x27ABC80

ISIL:
	001 Move W0, [X0+464]
	002 Return X0

Method: System.Void set_hmdIsTracked(System.Boolean value)

Disassembly:
	0x03BC4B04 LDR V0, [X31]
	0x03BC4B08 STR V0, [X22]
	0x03BC4B0C MOVZ W0, 0x1

ISIL:
	001 And W8, W1, 1
	002 Move [X0+464], W8
	003 Return 

Method: UnityEngine.XR.InputTrackingState get_hmdTrackingState()

Disassembly:
	0x03BC4B10 LDP X20, X19, [X31 + 0x30]
	0x03BC4B14 LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move W0, [X0+468]
	002 Return X0

Method: System.Void set_hmdTrackingState(UnityEngine.XR.InputTrackingState value)

Disassembly:
	0x03BC4B18 LDP X30, X23, [X31 + 0x10]
	0x03BC4B1C ADD X31, X31, 0x40

ISIL:
	001 Move [X0+468], W1
	002 Return 

Method: System.Boolean get_leftControllerIsTracked()

Disassembly:
	0x03BC4B20 RET
	0x03BC4B24 BL 0x1C16F20

ISIL:
	001 Move W0, [X0+472]
	002 Return X0

Method: System.Void set_leftControllerIsTracked(System.Boolean value)

Disassembly:
	0x03BC4B28 STR X30, [X31 - 0x30]!
	0x03BC4B2C STP X22, X21, [X31 + 0x10]
	0x03BC4B30 STP X20, X19, [X31 + 0x20]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+472], W8
	003 Return 

Method: UnityEngine.XR.InputTrackingState get_leftControllerTrackingState()

Disassembly:
	0x03BC4B34 ADRP X20, 0x81E000
	0x03BC4B38 LDRB W8, [X20 + 0xD7F]

ISIL:
	001 Move W0, [X0+476]
	002 Return X0

Method: System.Void set_leftControllerTrackingState(UnityEngine.XR.InputTrackingState value)

Disassembly:
	0x03BC4B3C MOV X19, X0
	0x03BC4B40 TBNZ X8, 0x0, 0x3BC4B7C

ISIL:
	001 Move [X0+476], W1
	002 Return 

Method: System.Boolean get_rightControllerIsTracked()

Disassembly:
	0x03BC4B44 ADRP X0, 0x583000
	0x03BC4B48 LDR X0, [X0 + 0xB88]

ISIL:
	001 Move W0, [X0+480]
	002 Return X0

Method: System.Void set_rightControllerIsTracked(System.Boolean value)

Disassembly:
	0x03BC4B4C BL 0x1C16CF4
	0x03BC4B50 ADRP X0, 0x557000
	0x03BC4B54 LDR X0, [X0 + 0x270]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+480], W8
	003 Return 

Method: UnityEngine.XR.InputTrackingState get_rightControllerTrackingState()

Disassembly:
	0x03BC4B58 BL 0x1C16CF4
	0x03BC4B5C ADRP X0, 0x52F000

ISIL:
	001 Move W0, [X0+484]
	002 Return X0

Method: System.Void set_rightControllerTrackingState(UnityEngine.XR.InputTrackingState value)

Disassembly:
	0x03BC4B60 LDR X0, [X0 + 0x598]
	0x03BC4B64 BL 0x1C16CF4

ISIL:
	001 Move [X0+484], W1
	002 Return 

Method: System.Boolean get_leftHandIsTracked()

Disassembly:
	0x03BC4B68 ADRP X0, 0x599000
	0x03BC4B6C LDR X0, [X0 + 0x6B0]

ISIL:
	001 Move W0, [X0+488]
	002 Return X0

Method: System.Void set_leftHandIsTracked(System.Boolean value)

Disassembly:
	0x03BC4B70 BL 0x1C16CF4
	0x03BC4B74 MOVZ W8, 0x1
	0x03BC4B78 STRB W8, [X20 + 0xD7F]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+488], W8
	003 Return 

Method: System.Boolean get_rightHandIsTracked()

Disassembly:
	0x03BC4B7C ADRP X21, 0x52F000
	0x03BC4B80 LDRB W8, [X19 + 0x388]

ISIL:
	001 Move W0, [X0+489]
	002 Return X0

Method: System.Void set_rightHandIsTracked(System.Boolean value)

Disassembly:
	0x03BC4B84 LDR X21, [X21 + 0x598]
	0x03BC4B88 CBZ W8, 0x3BC4BE0
	0x03BC4B8C ADRP X8, 0x583000

ISIL:
	001 And W8, W1, 1
	002 Move [X0+489], W8
	003 Return 

Method: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/TransformationMode get_mouseTransformationMode()

Disassembly:
	0x03BC4B90 LDR X8, [X8 + 0xB88]
	0x03BC4B94 ADRP X20, 0x599000

ISIL:
	001 Move W0, [X0+492]
	002 Return X0

Method: System.Void set_mouseTransformationMode(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/TransformationMode value)

Disassembly:
	0x03BC4B98 ADRP X22, 0x557000
	0x03BC4B9C LDR X0, [X8]

ISIL:
	001 Move [X0+492], W1
	002 Return 

Method: System.Boolean get_negateMode()

Disassembly:
	0x03BC4BA0 LDR X20, [X20 + 0x6B0]
	0x03BC4BA4 LDR X22, [X22 + 0x270]

ISIL:
	001 Move W0, [X0+496]
	002 Return X0

Method: System.Void set_negateMode(System.Boolean value)

Disassembly:
	0x03BC4BA8 BL 0x1C16F10
	0x03BC4BAC LDR X2, [X20]
	0x03BC4BB0 MOV X1, X19

ISIL:
	001 And W8, W1, 1
	002 Move [X0+496], W8
	003 Return 

Method: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/Axis2DTargets get_axis2DTargets()

Disassembly:
	0x03BC4BB4 MOV X3, X31
	0x03BC4BB8 MOV X20, X0

ISIL:
	001 Move W0, [X0+500]
	002 Return X0

Method: System.Void set_axis2DTargets(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/Axis2DTargets value)

Disassembly:
	0x03BC4BBC BL 0x2A769B4
	0x03BC4BC0 LDR X0, [X22]

ISIL:
	001 Move [X0+500], W1
	002 Return 

Method: System.Boolean get_manipulatingLeftDevice()

Disassembly:
	0x03BC4BC4 LDR W8, [X0 + 0xE0]
	0x03BC4BC8 CBNZ W8, 0x3BC4BD0
	0x03BC4BCC BL 0x1C16DFC
	0x03BC4BD0 MOV X0, X20

ISIL:
	001 Move W0, [X0+504]
	002 Move W1, 2
	003 Move X2, X31
	004 Call TargetedDevicesExtensions.HasDevice, X0, X1
	005 Return X0

Method: System.Boolean get_manipulatingRightDevice()

Disassembly:
	0x03BC4BD4 MOV X1, X31
	0x03BC4BD8 BL 0x376DD48
	0x03BC4BDC STRB W31, [X19 + 0x388]
	0x03BC4BE0 LDR X8, [X19]

ISIL:
	001 Move W0, [X0+504]
	002 Move W1, 4
	003 Move X2, X31
	004 Call TargetedDevicesExtensions.HasDevice, X0, X1
	005 Return X0

Method: System.Boolean get_manipulatingLeftController()

Disassembly:
	0x03BC4BE4 MOV X0, X19
	0x03BC4BE8 LDR X9, [X8 + 0x218]
	0x03BC4BEC LDR X1, [X8 + 0x220]
	0x03BC4BF0 BLR X9
	0x03BC4BF4 MOV X0, X19
	0x03BC4BF8 BL 0x3BBF3C8
	0x03BC4BFC MOV X0, X19
	0x03BC4C00 BL 0x3BBF5C0

ISIL:
	001 Move W8, [X0+508]
	002 Compare W8, 0
	003 JumpIfEqual {6}
	004 Move W0, W31
	005 Return X0
	006 Move W0, [X0+504]
	007 Move W1, 2
	008 Move X2, X31
	009 Call TargetedDevicesExtensions.HasDevice, X0, X1
	010 Return X0

Method: System.Boolean get_manipulatingRightController()

Disassembly:
	0x03BC4C04 MOV X0, X19
	0x03BC4C08 BL 0x3BBF7B8
	0x03BC4C0C MOV X0, X19
	0x03BC4C10 BL 0x3BBF9B0
	0x03BC4C14 MOV X0, X19
	0x03BC4C18 BL 0x3BBFDA0
	0x03BC4C1C MOV X0, X19
	0x03BC4C20 BL 0x3BBFBA8

ISIL:
	001 Move W8, [X0+508]
	002 Compare W8, 0
	003 JumpIfEqual {6}
	004 Move W0, W31
	005 Return X0
	006 Move W0, [X0+504]
	007 Move W1, 4
	008 Move X2, X31
	009 Call TargetedDevicesExtensions.HasDevice, X0, X1
	010 Return X0

Method: System.Boolean get_manipulatingLeftHand()

Disassembly:
	0x03BC4C24 MOV X0, X19
	0x03BC4C28 BL 0x3BBFF28
	0x03BC4C2C MOV X0, X19
	0x03BC4C30 BL 0x3BC00B0
	0x03BC4C34 MOV X0, X19
	0x03BC4C38 BL 0x3BC0238
	0x03BC4C3C MOV X0, X19
	0x03BC4C40 BL 0x3BC0740
	0x03BC4C44 MOV X0, X19

ISIL:
	001 Move W8, [X0+508]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W0, [X0+504]
	004 Move W1, 2
	005 Move X2, X31
	006 Call TargetedDevicesExtensions.HasDevice, X0, X1
	007 Return X0
	008 Move W0, W31
	009 Return X0

Method: System.Boolean get_manipulatingRightHand()

Disassembly:
	0x03BC4C48 BL 0x3BC0430
	0x03BC4C4C MOV X0, X19
	0x03BC4C50 BL 0x3BC05B8
	0x03BC4C54 MOV X0, X19
	0x03BC4C58 BL 0x3BC08C8
	0x03BC4C5C MOV X0, X19
	0x03BC4C60 BL 0x3BC0AC0
	0x03BC4C64 MOV X0, X19
	0x03BC4C68 BL 0x3BC0CB8

ISIL:
	001 Move W8, [X0+508]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W0, [X0+504]
	004 Move W1, 4
	005 Move X2, X31
	006 Call TargetedDevicesExtensions.HasDevice, X0, X1
	007 Return X0
	008 Move W0, W31
	009 Return X0

Method: System.Boolean get_manipulatingFPS()

Disassembly:
	0x03BC4C6C MOV X0, X19
	0x03BC4C70 BL 0x3BC0EB0
	0x03BC4C74 MOV X0, X19
	0x03BC4C78 BL 0x3BC1038

ISIL:
	001 Move W8, [X0+504]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator get_instance()

Disassembly:
	0x03BC4C7C MOV X0, X19
	0x03BC4C80 BL 0x3BC1230
	0x03BC4C84 MOV X0, X19
	0x03BC4C88 BL 0x3BC1428
	0x03BC4C8C MOV X0, X19
	0x03BC4C90 BL 0x3BC1620
	0x03BC4C94 MOV X0, X19
	0x03BC4C98 BL 0x3BC1818
	0x03BC4C9C MOV X0, X19
	0x03BC4CA0 BL 0x3BC1A10
	0x03BC4CA4 MOV X0, X19
	0x03BC4CA8 BL 0x3BC1B98
	0x03BC4CAC MOV X0, X19
	0x03BC4CB0 BL 0x3BC1D20
	0x03BC4CB4 MOV X0, X19
	0x03BC4CB8 BL 0x3BC1EA8
	0x03BC4CBC MOV X0, X19
	0x03BC4CC0 BL 0x3BC2030
	0x03BC4CC4 MOV X0, X19
	0x03BC4CC8 BL 0x3BC2228
	0x03BC4CCC MOV X0, X19
	0x03BC4CD0 BL 0x3BC2420

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x81F000
	005 Move X19, 0x59A000
	006 Move W8, [X20+3451]
	007 Move X19, [X19+1120]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x59A000
	013 Move X0, [X0+1120]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3451], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void set_instance(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator value)

Disassembly:
	0x03BC4CD4 MOV X0, X19
	0x03BC4CD8 BL 0x3BC2618
	0x03BC4CDC MOV X0, X19
	0x03BC4CE0 BL 0x3BC2810
	0x03BC4CE4 MOV X0, X19
	0x03BC4CE8 BL 0x3BC2A08
	0x03BC4CEC MOV X0, X19
	0x03BC4CF0 BL 0x3BC2C00
	0x03BC4CF4 MOV X0, X19
	0x03BC4CF8 BL 0x3BC2DF8
	0x03BC4CFC MOV X0, X19
	0x03BC4D00 BL 0x3BC2FF0
	0x03BC4D04 MOV X0, X19
	0x03BC4D08 BL 0x3BC31E8
	0x03BC4D0C MOV X0, X19
	0x03BC4D10 BL 0x3BC33E0
	0x03BC4D14 MOV X0, X19
	0x03BC4D18 BL 0x3BC35D8
	0x03BC4D1C MOV X0, X19
	0x03BC4D20 BL 0x3BC37D0
	0x03BC4D24 LDR X0, [X21]
	0x03BC4D28 LDR X20, [X19 + 0x28]
	0x03BC4D2C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x81F000
	006 Move X20, 0x59A000
	007 Move W8, [X21+3452]
	008 Move X20, [X20+1120]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x59A000
	015 Move X0, [X0+1120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3452], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move [X8+24], X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return 

Method: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/TargetedDevices get_targetedDeviceInput()

Disassembly:
	0x03BC4D30 CBNZ W8, 0x3BC4D38
	0x03BC4D34 BL 0x1C16DFC

ISIL:
	001 Move W0, [X0+504]
	002 Return X0

Method: System.Void set_targetedDeviceInput(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/TargetedDevices value)

Disassembly:
	0x03BC4D38 MOV X0, X20
	0x03BC4D3C MOV X1, X31

ISIL:
	001 Move [X0+504], W1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/DeviceMode get_deviceMode()

Disassembly:
	0x03BC4D40 MOV X2, X31
	0x03BC4D44 BL 0x3C354F8

ISIL:
	001 Move W0, [X0+508]
	002 Return X0

Method: System.Void Awake()

Disassembly:
	0x03BC4D48 TBZ X0, 0x0, 0x3BC4D5C
	0x03BC4D4C LDR X0, [X19 + 0x28]
	0x03BC4D50 CBZ X0, 0x3BC4DB0
	0x03BC4D54 MOV X1, X31
	0x03BC4D58 BL 0x3738318
	0x03BC4D5C LDR X0, [X21]
	0x03BC4D60 LDR X20, [X19 + 0x20]
	0x03BC4D64 LDR W8, [X0 + 0xE0]
	0x03BC4D68 CBNZ W8, 0x3BC4D70
	0x03BC4D6C BL 0x1C16DFC
	0x03BC4D70 MOV X0, X20
	0x03BC4D74 MOV X1, X31
	0x03BC4D78 MOV X2, X31
	0x03BC4D7C BL 0x3C354F8
	0x03BC4D80 TBZ X0, 0x0, 0x3BC4DA0
	0x03BC4D84 LDR X0, [X19 + 0x20]
	0x03BC4D88 CBZ X0, 0x3BC4DB0
	0x03BC4D8C LDP X20, X19, [X31 + 0x20]
	0x03BC4D90 LDP X22, X21, [X31 + 0x10]
	0x03BC4D94 MOV X1, X31
	0x03BC4D98 LDR X30, [X31], #0x30
	0x03BC4D9C B 0x3738318
	0x03BC4DA0 LDP X20, X19, [X31 + 0x20]
	0x03BC4DA4 LDP X22, X21, [X31 + 0x10]
	0x03BC4DA8 LDR X30, [X31], #0x30
	0x03BC4DAC RET
	0x03BC4DB0 BL 0x1C16F20
	0x03BC4DB4 RET
	0x03BC4DB8 SUB X31, X31, 0xB0
	0x03BC4DBC STR X30, [X31 + 0x80]
	0x03BC4DC0 STP X22, X21, [X31 + 0x90]
	0x03BC4DC4 STP X20, X19, [X31 + 0xA0]
	0x03BC4DC8 MRS X22, 0xC000
	0x03BC4DCC LDR X8, [X22 + 0x28]
	0x03BC4DD0 ADRP X20, 0x81E000
	0x03BC4DD4 MOV X19, X0
	0x03BC4DD8 STR X8, [X31 + 0x78]
	0x03BC4DDC LDRB W8, [X20 + 0xD80]
	0x03BC4DE0 TBNZ X8, 0x0, 0x3BC4E04
	0x03BC4DE4 ADRP X0, 0x599000
	0x03BC4DE8 LDR X0, [X0 + 0x6D0]
	0x03BC4DEC BL 0x1C16CF4
	0x03BC4DF0 ADRP X0, 0x599000
	0x03BC4DF4 LDR X0, [X0 + 0x6D8]
	0x03BC4DF8 BL 0x1C16CF4
	0x03BC4DFC MOVZ W8, 0x1
	0x03BC4E00 STRB W8, [X20 + 0xD80]
	0x03BC4E04 LDR X8, [X19]
	0x03BC4E08 MOV X0, X19
	0x03BC4E0C LDP X9, X1, [X8 + 0x1B8]
	0x03BC4E10 BLR X9
	0x03BC4E14 LDR X8, [X19]
	0x03BC4E18 MOV X0, X19
	0x03BC4E1C LDP X9, X1, [X8 + 0x1C8]
	0x03BC4E20 BLR X9
	0x03BC4E24 LDR X0, [X19 + 0x370]
	0x03BC4E28 CBZ X0, 0x3BC4E70
	0x03BC4E2C MOV X1, X31
	0x03BC4E30 BL 0x376EE00
	0x03BC4E34 TBZ X0, 0x0, 0x3BC4E70
	0x03BC4E38 ADRP X8, 0x599000
	0x03BC4E3C LDR X20, [X19 + 0x370]
	0x03BC4E40 LDR X8, [X8 + 0x6D8]
	0x03BC4E44 ADD X1, X19, 0x27C
	0x03BC4E48 ADD X0, X31, 0x0
	0x03BC4E4C MOVZ W2, 0x75
	0x03BC4E50 LDR X21, [X8]
	0x03BC4E54 BL 0x3EB1AC0
	0x03BC4E58 ADD X1, X31, 0x0
	0x03BC4E5C MOV X0, X20
	0x03BC4E60 MOV W2, W31
	0x03BC4E64 MOV X3, X31
	0x03BC4E68 MOV X4, X21
	0x03BC4E6C BL 0x220A6D8
	0x03BC4E70 LDR X0, [X19 + 0x378]
	0x03BC4E74 CBZ X0, 0x3BC4EC0
	0x03BC4E78 MOV X1, X31
	0x03BC4E7C BL 0x376EE00
	0x03BC4E80 TBZ X0, 0x0, 0x3BC4EC0
	0x03BC4E84 ADRP X9, 0x599000
	0x03BC4E88 LDR X0, [X19 + 0x378]
	0x03BC4E8C LDR X9, [X9 + 0x6D0]
	0x03BC4E90 ADD X8, X19, 0x2F1
	0x03BC4E94 LDR V0, [X19 + 0x32]
	0x03BC4E98 LDP V3, V1, [X8 + 0x10]
	0x03BC4E9C LDR V2, [X8]
	0x03BC4EA0 LDR X4, [X9]
	0x03BC4EA4 ADD X1, X31, 0x0
	0x03BC4EA8 MOV W2, W31
	0x03BC4EAC MOV X3, X31
	0x03BC4EB0 STUR V0, [X31 + 0x2F]
	0x03BC4EB4 STP V3, V1, [X31 + 0x10]
	0x03BC4EB8 STR V2, [X31]
	0x03BC4EBC BL 0x220A348
	0x03BC4EC0 LDR X0, [X19 + 0x380]
	0x03BC4EC4 CBZ X0, 0x3BC4F10
	0x03BC4EC8 MOV X1, X31
	0x03BC4ECC BL 0x376EE00
	0x03BC4ED0 TBZ X0, 0x0, 0x3BC4F10
	0x03BC4ED4 ADRP X9, 0x599000
	0x03BC4ED8 LDR X0, [X19 + 0x380]
	0x03BC4EDC LDR X9, [X9 + 0x6D0]
	0x03BC4EE0 ADD X8, X19, 0x330
	0x03BC4EE4 LDP V3, V0, [X19 + 0x340]
	0x03BC4EE8 LDUR V1, [X8 + 0x2F]
	0x03BC4EEC LDR V2, [X19 + 0x33]
	0x03BC4EF0 LDR X4, [X9]
	0x03BC4EF4 ADD X1, X31, 0x0
	0x03BC4EF8 MOV W2, W31
	0x03BC4EFC MOV X3, X31
	0x03BC4F00 STUR V1, [X31 + 0x2F]
	0x03BC4F04 STP V3, V0, [X31 + 0x10]
	0x03BC4F08 STR V2, [X31]
	0x03BC4F0C BL 0x220A348
	0x03BC4F10 LDR X8, [X22 + 0x28]
	0x03BC4F14 LDR X9, [X31 + 0x78]
	0x03BC4F18 CMP X8, X9
	0x03BC4F1C B.NE 0x3BC4F34
	0x03BC4F20 LDP X20, X19, [X31 + 0xA0]
	0x03BC4F24 LDP X22, X21, [X31 + 0x90]
	0x03BC4F28 LDR X30, [X31 + 0x80]
	0x03BC4F2C ADD X31, X31, 0xB0
	0x03BC4F30 RET
	0x03BC4F34 BL 0x3EB1B20
	0x03BC4F38 RET
	0x03BC4F3C SUB X31, X31, 0x180
	0x03BC4F40 STP D15, D14, [X31 + 0xE0]
	0x03BC4F44 STP D13, D12, [X31 + 0xF0]
	0x03BC4F48 STP D11, D10, [X31 + 0x100]
	0x03BC4F4C STP D9, D8, [X31 + 0x110]
	0x03BC4F50 STP X29, X30, [X31 + 0x120]
	0x03BC4F54 STP X28, X27, [X31 + 0x130]
	0x03BC4F58 STP X26, X25, [X31 + 0x140]
	0x03BC4F5C STP X24, X23, [X31 + 0x150]
	0x03BC4F60 STP X22, X21, [X31 + 0x160]
	0x03BC4F64 STP X20, X19, [X31 + 0x170]
	0x03BC4F68 ADRP X20, 0x81E000
	0x03BC4F6C LDRB W8, [X20 + 0xD82]
	0x03BC4F70 MOV X19, X0
	0x03BC4F74 ADD X26, X0, 0x2B4
	0x03BC4F78 TBNZ X8, 0x0, 0x3BC4FA8
	0x03BC4F7C ADRP X0, 0x536000
	0x03BC4F80 LDR X0, [X0 + 0x4B8]
	0x03BC4F84 BL 0x1C16CF4
	0x03BC4F88 ADRP X0, 0x52F000
	0x03BC4F8C LDR X0, [X0 + 0x598]
	0x03BC4F90 BL 0x1C16CF4
	0x03BC4F94 ADRP X0, 0x599000
	0x03BC4F98 LDR X0, [X0 + 0x460]
	0x03BC4F9C BL 0x1C16CF4
	0x03BC4FA0 MOVZ W8, 0x1
	0x03BC4FA4 STRB W8, [X20 + 0xD82]
	0x03BC4FA8 STP X31, X31, [X31 + 0xD0]
	0x03BC4FAC STR W31, [X31 + 0xC8]
	0x03BC4FB0 STR X31, [X31 + 0xC0]
	0x03BC4FB4 STR W31, [X31 + 0xB8]
	0x03BC4FB8 STR X31, [X31 + 0xB0]
	0x03BC4FBC STR W31, [X31 + 0xA8]
	0x03BC4FC0 STR X31, [X31 + 0xA0]
	0x03BC4FC4 STR W31, [X31 + 0x98]
	0x03BC4FC8 STR X31, [X31 + 0x90]
	0x03BC4FCC STR W31, [X31 + 0x88]
	0x03BC4FD0 STR X31, [X31 + 0x80]
	0x03BC4FD4 STR W31, [X31 + 0x78]
	0x03BC4FD8 STR X31, [X31 + 0x70]
	0x03BC4FDC STR W31, [X31 + 0x68]
	0x03BC4FE0 STP X31, X31, [X31 + 0x58]
	0x03BC4FE4 STR W31, [X31 + 0x54]
	0x03BC4FE8 LDRB W8, [X19 + 0x1D8]
	0x03BC4FEC LDRB W9, [X19 + 0x1E0]
	0x03BC4FF0 LDRB W10, [X19 + 0x1D0]
	0x03BC4FF4 LDR W11, [X19 + 0x1DC]
	0x03BC4FF8 STRB W8, [X19 + 0x313]
	0x03BC4FFC STRB W9, [X19 + 0x352]
	0x03BC5000 STRB W10, [X19 + 0x2D4]
	0x03BC5004 STUR W11, [X26 + 0x5B]
	0x03BC5008 LDR W8, [X19 + 0x1E4]
	0x03BC500C STUR W8, [X26 + 0x9A]
	0x03BC5010 LDR W8, [X19 + 0x1D4]
	0x03BC5014 LDR W9, [X19 + 0x1F8]
	0x03BC5018 STR W8, [X19 + 0x2D0]
	0x03BC501C CBZ W9, 0x3BC6CBC
	0x03BC5020 MOV X0, X19
	0x03BC5024 BL 0x3BC4924
	0x03BC5028 TBZ X0, 0x0, 0x3BC6CBC
	0x03BC502C LDR X0, [X19 + 0x178]
	0x03BC5030 CBZ X0, 0x3BC6D60
	0x03BC5034 MOV X1, X31
	0x03BC5038 BL 0x3C3F49C
	0x03BC503C ADRP X8, 0x52E000
	0x03BC5040 LDR X8, [X8 + 0x598]
	0x03BC5044 MOV X20, X0
	0x03BC5048 LDR X8, [X8]
	0x03BC504C LDR W9, [X8 + 0xE0]
	0x03BC5050 CBNZ W9, 0x3BC505C
	0x03BC5054 MOV X0, X8
	0x03BC5058 BL 0x1C16DFC
	0x03BC505C MOV X0, X20
	0x03BC5060 MOV X1, X31
	0x03BC5064 MOV X2, X31
	0x03BC5068 BL 0x3C354F8
	0x03BC506C TBZ X0, 0x0, 0x3BC5094
	0x03BC5070 CBZ X20, 0x3BC6D60
	0x03BC5074 MOV X0, X20
	0x03BC5078 MOV X1, X31
	0x03BC507C BL 0x3C3DEB4
	0x03BC5080 MOV V12.16B, V0.16B
	0x03BC5084 MOV V14.16B, V1.16B
	0x03BC5088 MOV V15.16B, V2.16B
	0x03BC508C MOV V13.16B, V3.16B
	0x03BC5090 B 0x3BC50CC
	0x03BC5094 ADRP X20, 0x813000
	0x03BC5098 LDRB W8, [X20 + 0x793]
	0x03BC509C CBNZ W8, 0x3BC50B4
	0x03BC50A0 ADRP X0, 0x52F000
	0x03BC50A4 LDR X0, [X0 + 0x5A8]
	0x03BC50A8 BL 0x1C16CF4
	0x03BC50AC MOVZ W8, 0x1
	0x03BC50B0 STRB W8, [X20 + 0x793]
	0x03BC50B4 ADRP X8, 0x52F000
	0x03BC50B8 LDR X8, [X8 + 0x5A8]
	0x03BC50BC LDR X8, [X8]
	0x03BC50C0 LDR X8, [X8 + 0xB8]
	0x03BC50C4 LDP S12, S14, [X8]
	0x03BC50C8 LDP S15, S13, [X8 + 0x8]
	0x03BC50CC MOV V0.16B, V12.16B
	0x03BC50D0 MOV V1.16B, V14.16B
	0x03BC50D4 MOV V2.16B, V15.16B
	0x03BC50D8 MOV V3.16B, V13.16B
	0x03BC50DC MOV X0, X31
	0x03BC50E0 ADD X25, X19, 0x1F8
	0x03BC50E4 BL 0x3C2A260
	0x03BC50E8 STP S0, S1, [X31 + 0xD0]
	0x03BC50EC STP S2, S3, [X31 + 0xD8]
	0x03BC50F0 LDR W8, [X25]
	0x03BC50F4 CMP W8, 0x1
	0x03BC50F8 B.NE 0x3BC5D1C
	0x03BC50FC MOV X0, X31
	0x03BC5100 MOV V8.16B, V0.16B
	0x03BC5104 MOV V9.16B, V1.16B
	0x03BC5108 MOV V10.16B, V2.16B
	0x03BC510C MOV V11.16B, V3.16B
	0x03BC5110 BL 0x3C3C6C4
	0x03BC5114 FMOV S1, 1
	0x03BC5118 FCMP S0, S1
	0x03BC511C B.LE 0x3BC5D1C
	0x03BC5120 LDR V1, [X19 + 0x218]
	0x03BC5124 LDR V0, [X19 + 0x188]
	0x03BC5128 MOV X0, X31
	0x03BC512C STP S10, S9, [X31 + 0x38]
	0x03BC5130 STR S8, [X31 + 0x40]
	0x03BC5134 STP S0, S1, [X31 + 0x20]
	0x03BC5138 LDR V0, [X19 + 0x194]
	0x03BC513C STR S0, [X31 + 0x28]
	0x03BC5140 BL 0x3C3C714
	0x03BC5144 LDR V2, [X19 + 0x21C]
	0x03BC5148 LDR V1, [X19 + 0x18C]
	0x03BC514C MOV X0, X31
	0x03BC5150 STR S0, [X31 + 0x34]
	0x03BC5154 STP S1, S2, [X31 + 0x14]
	0x03BC5158 LDR V1, [X19 + 0x194]
	0x03BC515C STR S1, [X31 + 0x1C]
	0x03BC5160 BL 0x3C3C714
	0x03BC5164 LDR V1, [X19 + 0x190]
	0x03BC5168 LDR V2, [X19 + 0x220]
	0x03BC516C MOV X0, X31
	0x03BC5170 STR S0, [X31 + 0x30]
	0x03BC5174 STR S1, [X31 + 0x8]
	0x03BC5178 LDR V1, [X19 + 0x194]
	0x03BC517C STP S1, S2, [X31 + 0xC]
	0x03BC5180 BL 0x3C3C714
	0x03BC5184 LDR X0, [X19 + 0x178]
	0x03BC5188 STR S0, [X31 + 0x2C]
	0x03BC518C CBZ X0, 0x3BC6D60
	0x03BC5190 MOV X1, X31
	0x03BC5194 BL 0x3C3FA04
	0x03BC5198 ADRP X28, 0x813000
	0x03BC519C LDRB W8, [X28 + 0x786]
	0x03BC51A0 MOV V8.16B, V0.16B
	0x03BC51A4 MOV V9.16B, V1.16B
	0x03BC51A8 MOV V10.16B, V2.16B
	0x03BC51AC CBNZ W8, 0x3BC51C4
	0x03BC51B0 ADRP X0, 0x52E000
	0x03BC51B4 LDR X0, [X0 + 0x5A0]
	0x03BC51B8 BL 0x1C16CF4
	0x03BC51BC MOVZ W8, 0x1
	0x03BC51C0 STRB W8, [X28 + 0x786]
	0x03BC51C4 ADRP X20, 0x52E000
	0x03BC51C8 LDR X20, [X20 + 0x5A0]
	0x03BC51CC MOV V0.16B, V12.16B
	0x03BC51D0 MOV V1.16B, V14.16B
	0x03BC51D4 MOV V2.16B, V15.16B
	0x03BC51D8 LDR X8, [X20]
	0x03BC51DC MOV V3.16B, V13.16B
	0x03BC51E0 MOV X0, X31
	0x03BC51E4 LDR X8, [X8 + 0xB8]
	0x03BC51E8 LDP S4, S5, [X8 + 0x18]
	0x03BC51EC LDR V6, [X8 + 0x20]
	0x03BC51F0 BL 0x3C2A9FC
	0x03BC51F4 ADRP X21, 0x814000
	0x03BC51F8 MOV V13.16B, V0.16B
	0x03BC51FC MOV V15.16B, V1.16B
	0x03BC5200 FMUL S0, S8, S0
	0x03BC5204 FMUL S1, S9, S1
	0x03BC5208 LDRB W8, [X21 + 0x5AA]
	0x03BC520C FADD S0, S0, S1
	0x03BC5210 FMUL S1, S10, S2
	0x03BC5214 FADD S0, S1, S0
	0x03BC5218 MOV V14.16B, V2.16B
	0x03BC521C FABS S12, S0
	0x03BC5220 MOV V16.16B, V8.16B
	0x03BC5224 MOV V6.16B, V9.16B
	0x03BC5228 MOV V2.16B, V10.16B
	0x03BC522C CBNZ W8, 0x3BC525C
	0x03BC5230 ADRP X0, 0x535000
	0x03BC5234 LDR X0, [X0 + 0x4B8]
	0x03BC5238 MOV V8.16B, V16.16B
	0x03BC523C MOV V9.16B, V6.16B
	0x03BC5240 MOV V10.16B, V2.16B
	0x03BC5244 BL 0x1C16CF4
	0x03BC5248 MOV V2.16B, V10.16B
	0x03BC524C MOV V6.16B, V9.16B
	0x03BC5250 MOV V16.16B, V8.16B
	0x03BC5254 MOVZ W8, 0x1
	0x03BC5258 STRB W8, [X21 + 0x5AA]
	0x03BC525C ADRP X21, 0x535000
	0x03BC5260 LDR X21, [X21 + 0x4B8]
	0x03BC5264 ADRP X9, 0xFFFFFFFFFCF25000
	0x03BC5268 LDR V1, [X9 + 0x240]
	0x03BC526C FMOV S0, 1
	0x03BC5270 LDR X8, [X21]
	0x03BC5274 FMOV S3, 8
	0x03BC5278 FMAXNM S4, S12, S0
	0x03BC527C FMUL S1, S4, S1
	0x03BC5280 LDR X8, [X8 + 0xB8]
	0x03BC5284 FABD S0, S0, S0
	0x03BC5288 STP S14, S13, [X31]
	0x03BC528C LDR V7, [X8]
	0x03BC5290 FMUL S3, S7, S3
	0x03BC5294 FCMP S1, S3
	0x03BC5298 FCSEL S1, S1, S3, GT
	0x03BC529C FCMP S0, S1
	0x03BC52A0 B.PL 0x3BC52CC
	0x03BC52A4 LDR X0, [X19 + 0x178]
	0x03BC52A8 LDP S9, S8, [X31 + 0x3C]
	0x03BC52AC LDR V10, [X31 + 0x38]
	0x03BC52B0 CBZ X0, 0x3BC6D60
	0x03BC52B4 MOV X1, X31
	0x03BC52B8 BL 0x3C3F988
	0x03BC52BC FNEG S16, S0
	0x03BC52C0 FNEG S6, S1
	0x03BC52C4 FNEG S2, S2
	0x03BC52C8 B 0x3BC52D4
	0x03BC52CC LDP S9, S8, [X31 + 0x3C]
	0x03BC52D0 LDR V10, [X31 + 0x38]
	0x03BC52D4 LDP S1, S0, [X31 + 0x20]
	0x03BC52D8 LDR V4, [X31 + 0x8]
	0x03BC52DC ADRP X22, 0x813000
	0x03BC52E0 LDRB W8, [X22 + 0xE39]
	0x03BC52E4 FMUL S0, S0, S1
	0x03BC52E8 LDP S3, S1, [X31 + 0x14]
	0x03BC52EC FMUL S1, S1, S3
	0x03BC52F0 LDR V3, [X31 + 0x10]
	0x03BC52F4 FMUL S3, S3, S4
	0x03BC52F8 LDR V4, [X31 + 0x28]
	0x03BC52FC FMUL S14, S0, S4
	0x03BC5300 LDR V0, [X31 + 0x1C]
	0x03BC5304 FMUL S12, S1, S0
	0x03BC5308 LDR V0, [X31 + 0xC]
	0x03BC530C FMUL S13, S3, S0
	0x03BC5310 CBNZ W8, 0x3BC5348
	0x03BC5314 ADRP X0, 0x535000
	0x03BC5318 LDR X0, [X0 + 0x4B8]
	0x03BC531C MOV V8.16B, V16.16B
	0x03BC5320 MOV V9.16B, V6.16B
	0x03BC5324 MOV V10.16B, V2.16B
	0x03BC5328 BL 0x1C16CF4
	0x03BC532C MOV V2.16B, V10.16B
	0x03BC5330 MOV V6.16B, V9.16B
	0x03BC5334 LDP S10, S9, [X31 + 0x38]
	0x03BC5338 MOV V16.16B, V8.16B
	0x03BC533C LDR V8, [X31 + 0x40]
	0x03BC5340 MOVZ W8, 0x1
	0x03BC5344 STRB W8, [X22 + 0xE39]
	0x03BC5348 LDR V0, [X31 + 0x34]
	0x03BC534C LDR X8, [X21]
	0x03BC5350 LDP S5, S3, [X31]
	0x03BC5354 FMUL S1, S15, S15
	0x03BC5358 FMUL S14, S14, S0
	0x03BC535C LDR V0, [X31 + 0x30]
	0x03BC5360 LDR X8, [X8 + 0xB8]
	0x03BC5364 FMUL S12, S12, S0
	0x03BC5368 FMUL S0, S3, S3
	0x03BC536C FADD S0, S0, S1
	0x03BC5370 FMUL S1, S5, S5
	0x03BC5374 LDR V4, [X8]
	0x03BC5378 FADD S0, S1, S0
	0x03BC537C LDR V1, [X31 + 0x2C]
	0x03BC5380 FCMP S0, S4
	0x03BC5384 FMUL S13, S13, S1
	0x03BC5388 B.MI 0x3BC53C4
	0x03BC538C FMUL S1, S3, S16
	0x03BC5390 FMUL S4, S15, S6
	0x03BC5394 FMUL S7, S5, S2
	0x03BC5398 FADD S1, S4, S1
	0x03BC539C FADD S1, S7, S1
	0x03BC53A0 FMUL S4, S3, S1
	0x03BC53A4 FMUL S7, S15, S1
	0x03BC53A8 FMUL S1, S5, S1
	0x03BC53AC FDIV S4, S4, S0
	0x03BC53B0 FDIV S7, S7, S0
	0x03BC53B4 FDIV S0, S1, S0
	0x03BC53B8 FSUB S16, S16, S4
	0x03BC53BC FSUB S6, S6, S7
	0x03BC53C0 FSUB S2, S2, S0
	0x03BC53C4 MOV V0.16B, V16.16B
	0x03BC53C8 MOV V1.16B, V6.16B
	0x03BC53CC MOV V4.16B, V15.16B
	0x03BC53D0 MOV X0, X31
	0x03BC53D4 BL 0x3C2A810
	0x03BC53D8 MOV V4.16B, V14.16B
	0x03BC53DC MOV V5.16B, V12.16B
	0x03BC53E0 MOV V6.16B, V13.16B
	0x03BC53E4 MOV X0, X31
	0x03BC53E8 BL 0x3C2A9FC
	0x03BC53EC MOV V4.16B, V0.16B
	0x03BC53F0 MOV V5.16B, V1.16B
	0x03BC53F4 MOV V6.16B, V2.16B
	0x03BC53F8 MOV V0.16B, V8.16B
	0x03BC53FC MOV V1.16B, V9.16B
	0x03BC5400 MOV V2.16B, V10.16B
	0x03BC5404 MOV V3.16B, V11.16B
	0x03BC5408 MOV X0, X31
	0x03BC540C BL 0x3C2A9FC
	0x03BC5410 MOV X24, X26
	0x03BC5414 LDR V3, [X24 + 0x60]!
	0x03BC5418 LDR V4, [X19 + 0x31C]
	0x03BC541C MOV X27, X26
	0x03BC5420 MOV V0.S[1], V1.S[0]
	0x03BC5424 FADD V1.2S, V3.2S, V0.2S
	0x03BC5428 FADD S3, S2, S4
	0x03BC542C STR D1, [X24]
	0x03BC5430 STR S3, [X19 + 0x31C]
	0x03BC5434 LDR V1, [X27 + 0x9F]!
	0x03BC5438 LDUR V3, [X26 + 0xA7]
	0x03BC543C ADD X22, X19, 0x2D5
	0x03BC5440 ADD X10, X19, 0x2DD
	0x03BC5444 FADD V1.2S, V0.2S, V1.2S
	0x03BC5448 FADD S3, S2, S3
	0x03BC544C STR D1, [X27]
	0x03BC5450 STUR S3, [X26 + 0xA7]
	0x03BC5454 LDR V1, [X19 + 0x390]
	0x03BC5458 LDR V3, [X19 + 0x398]
	0x03BC545C LDR V4, [X19 + 0x3C8]
	0x03BC5460 LDR V5, [X19 + 0x3D0]
	0x03BC5464 FADD V1.2S, V0.2S, V1.2S
	0x03BC5468 FADD S3, S2, S3
	0x03BC546C FADD V4.2S, V0.2S, V4.2S
	0x03BC5470 FADD S5, S2, S5
	0x03BC5474 STR D1, [X19 + 0x390]
	0x03BC5478 STR S3, [X19 + 0x398]
	0x03BC547C STR D4, [X19 + 0x3C8]
	0x03BC5480 STR S5, [X19 + 0x3D0]
	0x03BC5484 LDR V1, [X19 + 0x2BC]
	0x03BC5488 LDR V3, [X26]
	0x03BC548C FADD S1, S2, S1
	0x03BC5490 FADD V0.2S, V0.2S, V3.2S
	0x03BC5494 STR D0, [X26]
	0x03BC5498 STR S1, [X19 + 0x2BC]
	0x03BC549C LDR W8, [X26 + 0x8]
	0x03BC54A0 LDR X9, [X26]
	0x03BC54A4 STR W8, [X10]
	0x03BC54A8 STR X9, [X22]
	0x03BC54AC LDR V0, [X19 + 0x224]
	0x03BC54B0 LDR V1, [X19 + 0x1A4]
	0x03BC54B4 LDR V2, [X19 + 0x228]
	0x03BC54B8 LDR V3, [X19 + 0x1A8]
	0x03BC54BC LDRB W8, [X19 + 0x1B0]
	0x03BC54C0 LDR V4, [X19 + 0x230]
	0x03BC54C4 LDR V5, [X19 + 0x1AC]
	0x03BC54C8 FMUL S0, S0, S1
	0x03BC54CC FMUL S1, S2, S3
	0x03BC54D0 FNMUL S2, S2, S3
	0x03BC54D4 CMP W8, 0x0
	0x03BC54D8 FMUL S3, S4, S5
	0x03BC54DC FCSEL S1, S2, S1, EQ
	0x03BC54E0 STP S0, S1, [X31 + 0xC0]
	0x03BC54E4 STR S3, [X31 + 0xC8]
	0x03BC54E8 LDRB W9, [X19 + 0x235]
	0x03BC54EC LDRB W8, [X19 + 0x236]
	0x03BC54F0 CBZ W9, 0x3BC5510
	0x03BC54F4 CBNZ W8, 0x3BC551C
	0x03BC54F8 LDRB W8, [X19 + 0x237]
	0x03BC54FC CBNZ W8, 0x3BC551C
	0x03BC5500 LDP S0, S1, [X31 + 0xC0]
	0x03BC5504 FMOV S8, W31
	0x03BC5508 FSUB S0, S1, S0
	0x03BC550C B 0x3BC5520
	0x03BC5510 CBZ W8, 0x3BC551C
	0x03BC5514 LDRB W8, [X19 + 0x237]
	0x03BC5518 CBZ W8, 0x3BC6D50
	0x03BC551C LDP S8, S0, [X31 + 0xC0]
	0x03BC5520 LDR V1, [X19 + 0x270]
	0x03BC5524 LDR V3, [X19 + 0x278]
	0x03BC5528 MOVZ W8, 0x42A00000
	0x03BC552C FMOV S4, W31
	0x03BC5530 FADD S0, S0, S1
	0x03BC5534 FMOV S1, W8
	0x03BC5538 MOVZ W8, 0xC2A00000
	0x03BC553C LDR V2, [X19 + 0x274]
	0x03BC5540 FADD S3, S3, S4
	0x03BC5544 FMOV S4, W8
	0x03BC5548 ADRP X8, 0xFFFFFFFFFCF25000
	0x03BC554C LDR V9, [X8 + 0x104]
	0x03BC5550 FMIN S5, S0, S1
	0x03BC5554 FCMP S0, S4
	0x03BC5558 FADD S0, S8, S2
	0x03BC555C STR S0, [X19 + 0x274]
	0x03BC5560 FMUL S1, S0, S9

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x81F000
	008 Move X23, 0x59A000
	009 Move W8, [X20+3453]
	010 Move X23, [X23+1120]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {57}
	016 Move X0, 0x530000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x59A000
	020 Move X0, [X0+1632]
	021 Call 0x1C17CF4
	022 Move X0, 0x59A000
	023 Move X0, [X0+1640]
	024 Call 0x1C17CF4
	025 Move X0, 0x534000
	026 Move X0, [X0+464]
	027 Call 0x1C17CF4
	028 Move X0, 0x530000
	029 Move X0, [X0+1432]
	030 Call 0x1C17CF4
	031 Move X0, 0x59A000
	032 Move X0, [X0+1120]
	033 Call 0x1C17CF4
	034 Move X0, 0x59A000
	035 Move X0, [X0+1648]
	036 Call 0x1C17CF4
	037 Move X0, 0x59A000
	038 Move X0, [X0+1656]
	039 Call 0x1C17CF4
	040 Move X0, 0x59A000
	041 Move X0, [X0+1664]
	042 Call 0x1C17CF4
	043 Move X0, 0x59A000
	044 Move X0, [X0+1672]
	045 Call 0x1C17CF4
	046 Move X0, 0x59A000
	047 Move X0, [X0+1680]
	048 Call 0x1C17CF4
	049 Move X0, 0x59A000
	050 Move X0, [X0+1688]
	051 Call 0x1C17CF4
	052 Move X0, 0x59A000
	053 Move X0, [X0+1696]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X20+3453], W8
	057 Move X0, [X23]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X21, 0x81F000
	063 Move W8, [X21+3557]
	064 Compare W8, 0
	065 JumpIfNotEqual {71}
	066 Move X0, 0x59A000
	067 Move X0, [X0+1120]
	068 Call 0x1C17CF4
	069 Move W8, 1
	070 Move [X21+3557], W8
	071 Move X0, [X23]
	072 Move X22, 0x530000
	073 Move W8, [X0+224]
	074 Move X22, [X22+1432]
	075 Compare W8, 0
	076 JumpIfNotEqual {79}
	077 Call 0x1C17DFC
	078 Move X0, [X23]
	079 Move X8, [X22]
	080 Move X9, [X0+184]
	081 Move W10, [X8+224]
	082 Move X20, [X9+24]
	083 Compare W10, 0
	084 JumpIfNotEqual {87}
	085 Move X0, X8
	086 Call 0x1C17DFC
	087 Move X0, X20
	088 Move X1, X31
	089 Move X2, X31
	090 Call Object.op_Equality, X0, X1
	091 Move X8, [X23]
	092 Move W20, W0
	093 Move W9, [X8+224]
	094 Compare W9, 0
	095 JumpIfEqual {117}
	096 Move TEMP, X20
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfNotEqual {123}
	100 Move X20, 0x81F000
	101 Move W8, [X20+3558]
	102 Compare W8, 0
	103 JumpIfNotEqual {109}
	104 Move X0, 0x59A000
	105 Move X0, [X0+1120]
	106 Call 0x1C17CF4
	107 Move W8, 1
	108 Move [X20+3558], W8
	109 Move X0, [X23]
	110 Move W8, [X0+224]
	111 Compare W8, 0
	112 JumpIfNotEqual {115}
	113 Call 0x1C17DFC
	114 Move X0, [X23]
	115 Move X8, [X0+184]
	116 Move [X8+24], X19
	117 Move X0, X8
	118 Call 0x1C17DFC
	119 Move TEMP, X20
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfEqual {100}
	123 Move W8, [X21+3557]
	124 Compare W8, 0
	125 JumpIfNotEqual {131}
	126 Move X0, 0x59A000
	127 Move X0, [X0+1120]
	128 Call 0x1C17CF4
	129 Move W8, 1
	130 Move [X21+3557], W8
	131 Move X0, [X23]
	132 Move W8, [X0+224]
	133 Compare W8, 0
	134 JumpIfNotEqual {137}
	135 Call 0x1C17DFC
	136 Move X0, [X23]
	137 Move X8, [X22]
	138 Move X9, [X0+184]
	139 Move W10, [X8+224]
	140 Move X20, [X9+24]
	141 Compare W10, 0
	142 JumpIfNotEqual {145}
	143 Move X0, X8
	144 Call 0x1C17DFC
	145 Move X0, X20
	146 Move X1, X19
	147 Move X2, X31
	148 Call Object.op_Inequality, X0, X1
	149 Move TEMP, X0
	150 And TEMP, TEMP, 1
	151 Compare TEMP, 1
	152 JumpIfNotEqual {218}
	153 Move X0, [X23]
	154 Move W8, [X0+224]
	155 Compare W8, 0
	156 JumpIfNotEqual {158}
	157 Call 0x1C17DFC
	158 Move W8, [X21+3557]
	159 Compare W8, 0
	160 JumpIfNotEqual {166}
	161 Move X0, 0x59A000
	162 Move X0, [X0+1120]
	163 Call 0x1C17CF4
	164 Move W8, 1
	165 Move [X21+3557], W8
	166 Move X0, [X23]
	167 Move W8, [X0+224]
	168 Compare W8, 0
	169 JumpIfNotEqual {172}
	170 Call 0x1C17DFC
	171 Move X0, [X23]
	172 Move X8, [X0+184]
	173 Move X0, X19
	174 Move X1, X31
	175 Move X20, [X8+24]
	176 Call Component.get_gameObject, X0
	177 Move X8, 0x59A000
	178 Move X8, [X8+1664]
	179 Move X2, X0
	180 Move X1, X20
	181 Move X3, X31
	182 Move X8, [X8]
	183 Move X0, X8
	184 Call String.Format, X0, X1, X2
	185 Move X8, 0x530000
	186 Move X8, [X8+2600]
	187 Move X20, X0
	188 Move X8, [X8]
	189 Move W9, [X8+224]
	190 Compare W9, 0
	191 JumpIfNotEqual {194}
	192 Move X0, X8
	193 Call 0x1C17DFC
	194 Move X0, X20
	195 Move X1, X19
	196 Move X2, X31
	197 Call Debug.LogWarning, X0, X1
	198 Move X0, X19
	199 Move X1, X31
	200 Call Component.get_gameObject, X0
	201 Move X8, [X22]
	202 Move X19, X0
	203 Move W9, [X8+224]
	204 Compare W9, 0
	205 JumpIfNotEqual {208}
	206 Move X0, X8
	207 Call 0x1C17DFC
	208 Move X0, X19
	209 Move X20, [X31+32]
	210 Move X19, [X31+40]
	211 Move X22, [X31+16]
	212 Move X21, [X31+24]
	213 Move X1, X31
	214 Move X30, [X31+48]
	215 Move X23, [X31+56]
	216 Call Object.Destroy, X0
	217 Return 
	218 Move X0, [X22]
	219 Move X20, [X19+32]
	220 Move W8, [X0+224]
	221 Compare W8, 0
	222 JumpIfNotEqual {224}
	223 Call 0x1C17DFC
	224 Move X0, X20
	225 Move X1, X31
	226 Move X2, X31
	227 Call Object.op_Equality, X0, X1
	228 Move TEMP, X0
	229 And TEMP, TEMP, 1
	230 Compare TEMP, 1
	231 JumpIfNotEqual {337}
	232 Move X0, [X22]
	233 Move X20, [X19+72]
	234 Move W8, [X0+224]
	235 Compare W8, 0
	236 JumpIfNotEqual {238}
	237 Call 0x1C17DFC
	238 Move X0, X20
	239 Move X1, X31
	240 Move X2, X31
	241 Call Object.op_Inequality, X0, X1
	242 Move TEMP, X0
	243 And TEMP, TEMP, 1
	244 Compare TEMP, 1
	245 JumpIfNotEqual {251}
	246 Move X8, [X19+72]
	247 Compare X8, 0
	248 JumpIfEqual {619}
	249 Move X20, [X8+24]
	250 Move [X19+32], X20
	251 Move X20, [X19+32]
	252 Move X0, [X22]
	253 Move W8, [X0+224]
	254 Compare W8, 0
	255 JumpIfNotEqual {257}
	256 Call 0x1C17DFC
	257 Move X0, X20
	258 Move X1, X31
	259 Move X2, X31
	260 Call Object.op_Equality, X0, X1
	261 Move TEMP, X0
	262 And TEMP, TEMP, 1
	263 Compare TEMP, 1
	264 JumpIfNotEqual {284}
	265 Move X0, [X22]
	266 Move X20, [X19+80]
	267 Move W8, [X0+224]
	268 Compare W8, 0
	269 JumpIfNotEqual {271}
	270 Call 0x1C17DFC
	271 Move X0, X20
	272 Move X1, X31
	273 Move X2, X31
	274 Call Object.op_Inequality, X0, X1
	275 Move TEMP, X0
	276 And TEMP, TEMP, 1
	277 Compare TEMP, 1
	278 JumpIfNotEqual {284}
	279 Move X8, [X19+80]
	280 Compare X8, 0
	281 JumpIfEqual {619}
	282 Move X8, [X8+24]
	283 Move [X19+32], X8
	284 Move X0, [X22]
	285 Move X20, [X19+32]
	286 Move W8, [X0+224]
	287 Compare W8, 0
	288 JumpIfNotEqual {290}
	289 Call 0x1C17DFC
	290 Move X0, X20
	291 Move X1, X31
	292 Move X2, X31
	293 Call Object.op_Equality, X0, X1
	294 Move TEMP, X0
	295 And TEMP, TEMP, 1
	296 Compare TEMP, 1
	297 JumpIfNotEqual {311}
	298 Move X8, 0x52F000
	299 Move X8, [X8+2600]
	300 Move X0, [X8]
	301 Move W8, [X0+224]
	302 Compare W8, 0
	303 JumpIfNotEqual {305}
	304 Call 0x1C17DFC
	305 Move X8, 0x599000
	306 Move X8, [X8+1680]
	307 Move X1, X19
	308 Move X2, X31
	309 Move X0, [X8]
	310 Call Debug.LogError, X0, X1
	311 Move X0, [X19+32]
	312 Compare X0, 0
	313 JumpIfEqual {619}
	314 Move X1, X31
	315 Call Object.get_name, X0
	316 Move X8, 0x599000
	317 Move X8, [X8+1688]
	318 Move X1, X0
	319 Move X2, X31
	320 Move X8, [X8]
	321 Move X0, X8
	322 Call String.Concat, X0, X1
	323 Move X8, 0x52F000
	324 Move X8, [X8+2600]
	325 Move X20, [X19+32]
	326 Move X21, X0
	327 Move X8, [X8]
	328 Move W9, [X8+224]
	329 Compare W9, 0
	330 JumpIfNotEqual {333}
	331 Move X0, X8
	332 Call 0x1C17DFC
	333 Move X0, X21
	334 Move X1, X20
	335 Move X2, X31
	336 Call Debug.LogWarning, X0, X1
	337 Move X0, [X22]
	338 Move X20, [X19+40]
	339 Move W8, [X0+224]
	340 Compare W8, 0
	341 JumpIfNotEqual {343}
	342 Call 0x1C17DFC
	343 Move X0, X20
	344 Move X1, X31
	345 Move X2, X31
	346 Call Object.op_Equality, X0, X1
	347 Move TEMP, X0
	348 And TEMP, TEMP, 1
	349 Compare TEMP, 1
	350 JumpIfNotEqual {423}
	351 Move X0, [X22]
	352 Move X20, [X19+264]
	353 Move W8, [X0+224]
	354 Compare W8, 0
	355 JumpIfNotEqual {357}
	356 Call 0x1C17DFC
	357 Move X0, X20
	358 Move X1, X31
	359 Move X2, X31
	360 Call Object.op_Inequality, X0, X1
	361 Move TEMP, X0
	362 And TEMP, TEMP, 1
	363 Compare TEMP, 1
	364 JumpIfNotEqual {370}
	365 Move X8, [X19+264]
	366 Compare X8, 0
	367 JumpIfEqual {619}
	368 Move X20, [X8+24]
	369 Move [X19+40], X20
	370 Move X20, [X19+40]
	371 Move X0, [X22]
	372 Move W8, [X0+224]
	373 Compare W8, 0
	374 JumpIfNotEqual {376}
	375 Call 0x1C17DFC
	376 Move X0, X20
	377 Move X1, X31
	378 Move X2, X31
	379 Call Object.op_Equality, X0, X1
	380 Move TEMP, X0
	381 And TEMP, TEMP, 1
	382 Compare TEMP, 1
	383 JumpIfNotEqual {397}
	384 Move X8, 0x52F000
	385 Move X8, [X8+2600]
	386 Move X0, [X8]
	387 Move W8, [X0+224]
	388 Compare W8, 0
	389 JumpIfNotEqual {391}
	390 Call 0x1C17DFC
	391 Move X8, 0x599000
	392 Move X8, [X8+1672]
	393 Move X1, X19
	394 Move X2, X31
	395 Move X0, [X8]
	396 Call Debug.LogError, X0, X1
	397 Move X0, [X19+40]
	398 Compare X0, 0
	399 JumpIfEqual {619}
	400 Move X1, X31
	401 Call Object.get_name, X0
	402 Move X8, 0x599000
	403 Move X8, [X8+1648]
	404 Move X1, X0
	405 Move X2, X31
	406 Move X8, [X8]
	407 Move X0, X8
	408 Call String.Concat, X0, X1
	409 Move X8, 0x52F000
	410 Move X8, [X8+2600]
	411 Move X20, [X19+40]
	412 Move X21, X0
	413 Move X8, [X8]
	414 Move W9, [X8+224]
	415 Compare W9, 0
	416 JumpIfNotEqual {419}
	417 Move X0, X8
	418 Call 0x1C17DFC
	419 Move X0, X21
	420 Move X1, X20
	421 Move X2, X31
	422 Call Debug.LogWarning, X0, X1
	423 Move X0, [X22]
	424 Move X20, [X19+352]
	425 Move W8, [X0+224]
	426 Compare W8, 0
	427 JumpIfNotEqual {429}
	428 Call 0x1C17DFC
	429 Move X0, X20
	430 Move X1, X31
	431 Move X2, X31
	432 Call Object.op_Equality, X0, X1
	433 Move TEMP, X0
	434 And TEMP, TEMP, 1
	435 Compare TEMP, 1
	436 JumpIfNotEqual {530}
	437 Move X0, [X19+368]
	438 Compare X0, 0
	439 JumpIfEqual {619}
	440 Move W8, [X0+24]
	441 NotImplemented "Instruction CMP not yet implemented."
	442 Move X21, 0x599000
	443 Move X21, [X21+1640]
	444 Move W1, W31
	445 Move X2, [X21]
	446 Call List`1<Object>.get_Item, X0, X1
	447 Compare X0, 0
	448 JumpIfEqual {619}
	449 Move X8, [X22]
	450 Move X20, [X0+24]
	451 Move W9, [X8+224]
	452 Compare W9, 0
	453 JumpIfNotEqual {456}
	454 Move X0, X8
	455 Call 0x1C17DFC
	456 Move X0, X20
	457 Move X1, X31
	458 Move X2, X31
	459 Call Object.op_Inequality, X0, X1
	460 Move TEMP, X0
	461 And TEMP, TEMP, 1
	462 Compare TEMP, 1
	463 JumpIfNotEqual {477}
	464 Move X0, [X19+368]
	465 Compare X0, 0
	466 JumpIfEqual {619}
	467 Move X2, [X21]
	468 Move W1, W31
	469 Call List`1<Object>.get_Item, X0, X1
	470 Compare X0, 0
	471 JumpIfEqual {619}
	472 Move X8, [X0+24]
	473 Compare X8, 0
	474 JumpIfEqual {619}
	475 Move X20, [X8+24]
	476 Move [X19+352], X20
	477 Move X20, [X19+352]
	478 Move X0, [X22]
	479 Move W8, [X0+224]
	480 Compare W8, 0
	481 JumpIfNotEqual {483}
	482 Call 0x1C17DFC
	483 Move X0, X20
	484 Move X1, X31
	485 Move X2, X31
	486 Call Object.op_Equality, X0, X1
	487 Move TEMP, X0
	488 And TEMP, TEMP, 1
	489 Compare TEMP, 1
	490 JumpIfNotEqual {504}
	491 Move X8, 0x52F000
	492 Move X8, [X8+2600]
	493 Move X0, [X8]
	494 Move W8, [X0+224]
	495 Compare W8, 0
	496 JumpIfNotEqual {498}
	497 Call 0x1C17DFC
	498 Move X8, 0x599000
	499 Move X8, [X8+1696]
	500 Move X1, X19
	501 Move X2, X31
	502 Move X0, [X8]
	503 Call Debug.LogError, X0, X1
	504 Move X0, [X19+352]
	505 Compare X0, 0
	506 JumpIfEqual {619}
	507 Move X1, X31
	508 Call Object.get_name, X0
	509 Move X8, 0x599000
	510 Move X8, [X8+1656]
	511 Move X1, X0
	512 Move X2, X31
	513 Move X8, [X8]
	514 Move X0, X8
	515 Call String.Concat, X0, X1
	516 Move X8, 0x52F000
	517 Move X8, [X8+2600]
	518 Move X20, [X19+352]
	519 Move X21, X0
	520 Move X8, [X8]
	521 Move W9, [X8+224]
	522 Compare W9, 0
	523 JumpIfNotEqual {526}
	524 Move X0, X8
	525 Call 0x1C17DFC
	526 Move X0, X21
	527 Move X1, X20
	528 Move X2, X31
	529 Call Debug.LogWarning, X0, X1
	530 Add X0, X19, 636
	531 Move X1, X31
	532 Call XRSimulatedHMDState.Reset, X0
	533 Add X0, X19, 753
	534 Move X1, X31
	535 Call XRSimulatedControllerState.Reset, X0
	536 Add X0, X19, 816
	537 Move X1, X31
	538 Call XRSimulatedControllerState.Reset, X0
	539 Add X0, X19, 912
	540 Move X1, X31
	541 Call XRSimulatedHandState.Reset, X0
	542 Add X0, X19, 968
	543 Move X1, X31
	544 Call XRSimulatedHandState.Reset, X0
	545 Move X0, [X23]
	546 Move W8, [X0+224]
	547 Compare W8, 0
	548 JumpIfNotEqual {551}
	549 Call 0x1C17DFC
	550 Move X0, [X23]
	551 Move X8, [X0+184]
	552 Add X10, X19, 788
	553 Add X11, X19, 859
	554 Move W9, [X8+8]
	555 Move X8, [X8]
	556 Move [X19+796], W9
	557 Move [X10], X8
	558 Move X8, [X0+184]
	559 Add X10, X19, 851
	560 Move W9, [X8+20]
	561 NotImplemented "Instruction LDUR not yet implemented."
	562 Move [X11], W9
	563 Move [X10], X8
	564 Move X8, [X0+184]
	565 Move X20, [X19+448]
	566 Move V0, [X8]
	567 Move V1, [X8+8]
	568 Move [X19+912], D0
	569 Move [X19+920], S1
	570 Move X8, [X0+184]
	571 NotImplemented "Instruction LDUR not yet implemented."
	572 Move V1, [X8+20]
	573 Move [X19+968], D0
	574 Move [X19+976], S1
	575 Move X0, [X22]
	576 Move W8, [X0+224]
	577 Compare W8, 0
	578 JumpIfNotEqual {580}
	579 Call 0x1C17DFC
	580 Move X0, X20
	581 Move X1, X31
	582 Move X2, X31
	583 Call Object.op_Inequality, X0, X1
	584 Move TEMP, X0
	585 And TEMP, TEMP, 1
	586 Compare TEMP, 1
	587 JumpIfNotEqual {612}
	588 Move X20, [X19+448]
	589 Move X0, X19
	590 Move X1, X31
	591 Call Component.get_transform, X0
	592 Move X8, [X22]
	593 Move X19, X0
	594 Move W9, [X8+224]
	595 Compare W9, 0
	596 JumpIfNotEqual {599}
	597 Move X0, X8
	598 Call 0x1C17DFC
	599 Move X8, 0x533000
	600 Move X8, [X8+464]
	601 Move X0, X20
	602 Move X1, X19
	603 Move X20, [X31+32]
	604 Move X19, [X31+40]
	605 Move X2, [X8]
	606 Move X22, [X31+16]
	607 Move X21, [X31+24]
	608 Move X30, [X31+48]
	609 Move X23, [X31+56]
	610 Call 0x222E488, X0, X1
	611 Return 
	612 Move X20, [X31+32]
	613 Move X19, [X31+40]
	614 Move X22, [X31+16]
	615 Move X21, [X31+24]
	616 Move X30, [X31+48]
	617 Move X23, [X31+56]
	618 Return 
	619 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x03BC5568 STR S0, [X19 + 0x270]
	0x03BC556C FMUL S0, S0, S9
	0x03BC5570 FMUL S2, S3, S9
	0x03BC5574 MOV X0, X31
	0x03BC5578 STR S3, [X19 + 0x278]
	0x03BC557C BL 0x3C2A574
	0x03BC5580 STR S0, [X19 + 0x2C0]
	0x03BC5584 STR S1, [X19 + 0x2C4]
	0x03BC5588 STR S2, [X19 + 0x2C8]
	0x03BC558C STR S3, [X19 + 0x2CC]
	0x03BC5590 LDR V0, [X19 + 0x2C]
	0x03BC5594 ADD X23, X19, 0x2E1
	0x03BC5598 FMOV S2, W31
	0x03BC559C MOV X0, X31
	0x03BC55A0 STR V0, [X23]
	0x03BC55A4 LDR V0, [X19 + 0x274]
	0x03BC55A8 STR S9, [X31 + 0x40]
	0x03BC55AC FMUL S1, S0, S9
	0x03BC55B0 FMOV S0, W31
	0x03BC55B4 BL 0x3C2A574
	0x03BC55B8 LDRB W8, [X28 + 0x786]
	0x03BC55BC MOV V9.16B, V0.16B
	0x03BC55C0 MOV V10.16B, V1.16B
	0x03BC55C4 MOV V11.16B, V2.16B
	0x03BC55C8 MOV V12.16B, V3.16B
	0x03BC55CC CBNZ W8, 0x3BC55E4
	0x03BC55D0 ADRP X0, 0x52E000
	0x03BC55D4 LDR X0, [X0 + 0x5A0]
	0x03BC55D8 BL 0x1C16CF4
	0x03BC55DC MOVZ W8, 0x1
	0x03BC55E0 STRB W8, [X28 + 0x786]
	0x03BC55E4 LDR X8, [X20]
	0x03BC55E8 MOV V0.16B, V9.16B
	0x03BC55EC MOV V1.16B, V10.16B
	0x03BC55F0 MOV V2.16B, V11.16B
	0x03BC55F4 LDR X8, [X8 + 0xB8]
	0x03BC55F8 MOV V3.16B, V12.16B
	0x03BC55FC MOV X0, X31
	0x03BC5600 LDP S4, S5, [X8 + 0x18]
	0x03BC5604 LDR V6, [X8 + 0x20]
	0x03BC5608 BL 0x3C2A9FC
	0x03BC560C MOV V3.16B, V0.16B
	0x03BC5610 MOV V4.16B, V1.16B
	0x03BC5614 MOV V5.16B, V2.16B
	0x03BC5618 MOV V0.16B, V8.16B
	0x03BC561C MOV V1.16B, V3.16B
	0x03BC5620 MOV V2.16B, V4.16B
	0x03BC5624 MOV V3.16B, V5.16B
	0x03BC5628 MOV X0, X31
	0x03BC562C BL 0x3C2A758
	0x03BC5630 MOV V10.16B, V0.16B
	0x03BC5634 MOV V9.16B, V1.16B
	0x03BC5638 MOV V8.16B, V2.16B
	0x03BC563C LDR V12, [X19 + 0x2B4]
	0x03BC5640 LDR V14, [X19 + 0x2B8]
	0x03BC5644 LDR V15, [X19 + 0x2BC]
	0x03BC5648 LDR V0, [X19 + 0x314]
	0x03BC564C LDR V1, [X19 + 0x318]
	0x03BC5650 LDR V2, [X19 + 0x31C]
	0x03BC5654 MOV X0, X31
	0x03BC5658 FSUB S4, S0, S12
	0x03BC565C FSUB S5, S1, S14
	0x03BC5660 FSUB S6, S2, S15
	0x03BC5664 MOV V0.16B, V10.16B
	0x03BC5668 MOV V1.16B, V9.16B
	0x03BC566C MOV V2.16B, V8.16B
	0x03BC5670 MOV V11.16B, V3.16B
	0x03BC5674 BL 0x3C2A9FC
	0x03BC5678 LDR V3, [X19 + 0x320]
	0x03BC567C LDR V4, [X19 + 0x324]
	0x03BC5680 LDR V6, [X19 + 0x32C]
	0x03BC5684 LDR V5, [X19 + 0x328]
	0x03BC5688 FADD S0, S12, S0
	0x03BC568C FADD S1, S14, S1
	0x03BC5690 FADD S2, S15, S2
	0x03BC5694 STR S0, [X19 + 0x314]
	0x03BC5698 STR S1, [X19 + 0x318]
	0x03BC569C STR S2, [X19 + 0x31C]
	0x03BC56A0 FMUL S0, S11, S3
	0x03BC56A4 FMUL S1, S10, S6
	0x03BC56A8 FMUL S2, S11, S4
	0x03BC56AC FMUL S7, S9, S6
	0x03BC56B0 FADD S0, S0, S1
	0x03BC56B4 FMUL S1, S11, S5
	0x03BC56B8 FADD S2, S2, S7
	0x03BC56BC FMUL S7, S8, S6
	0x03BC56C0 FMUL S6, S11, S6
	0x03BC56C4 FADD S1, S1, S7
	0x03BC56C8 FMUL S7, S10, S3
	0x03BC56CC FSUB S6, S6, S7
	0x03BC56D0 FMUL S7, S9, S5
	0x03BC56D4 FADD S0, S7, S0
	0x03BC56D8 FMUL S7, S8, S3
	0x03BC56DC FADD S2, S7, S2
	0x03BC56E0 FMUL S7, S10, S4
	0x03BC56E4 FADD S1, S7, S1
	0x03BC56E8 FMUL S7, S8, S4
	0x03BC56EC FMUL S4, S9, S4
	0x03BC56F0 FSUB S4, S6, S4
	0x03BC56F4 FMUL S6, S10, S5
	0x03BC56F8 FMUL S3, S9, S3
	0x03BC56FC FMUL S5, S8, S5
	0x03BC5700 FSUB S0, S0, S7
	0x03BC5704 FSUB S2, S2, S6
	0x03BC5708 FSUB S1, S1, S3
	0x03BC570C FSUB S3, S4, S5
	0x03BC5710 STR S0, [X19 + 0x320]
	0x03BC5714 STR S2, [X19 + 0x324]
	0x03BC5718 STR S1, [X19 + 0x328]
	0x03BC571C STR S3, [X19 + 0x32C]
	0x03BC5720 LDUR V0, [X26 + 0x9F]
	0x03BC5724 LDUR V1, [X26 + 0xA3]
	0x03BC5728 LDUR V2, [X26 + 0xA7]
	0x03BC572C MOV V3.16B, V11.16B
	0x03BC5730 FSUB S4, S0, S12
	0x03BC5734 FSUB S5, S1, S14
	0x03BC5738 FSUB S6, S2, S15
	0x03BC573C MOV V0.16B, V10.16B
	0x03BC5740 MOV V1.16B, V9.16B
	0x03BC5744 MOV V2.16B, V8.16B
	0x03BC5748 MOV X0, X31
	0x03BC574C BL 0x3C2A9FC
	0x03BC5750 LDUR V3, [X26 + 0xAB]
	0x03BC5754 LDUR V4, [X26 + 0xAF]
	0x03BC5758 LDUR V6, [X26 + 0xB7]
	0x03BC575C LDUR V5, [X26 + 0xB3]
	0x03BC5760 FADD S0, S12, S0
	0x03BC5764 FADD S1, S14, S1
	0x03BC5768 FADD S2, S15, S2
	0x03BC576C STUR S0, [X26 + 0x9F]
	0x03BC5770 STUR S1, [X26 + 0xA3]
	0x03BC5774 STUR S2, [X26 + 0xA7]
	0x03BC5778 FMUL S0, S11, S3
	0x03BC577C FMUL S1, S10, S6
	0x03BC5780 FMUL S2, S11, S4
	0x03BC5784 FMUL S7, S9, S6
	0x03BC5788 FADD S0, S0, S1
	0x03BC578C FMUL S1, S11, S5
	0x03BC5790 FADD S2, S2, S7
	0x03BC5794 FMUL S7, S8, S6
	0x03BC5798 FMUL S6, S11, S6
	0x03BC579C FADD S1, S1, S7
	0x03BC57A0 FMUL S7, S10, S3
	0x03BC57A4 FSUB S6, S6, S7
	0x03BC57A8 FMUL S7, S9, S5
	0x03BC57AC FADD S0, S7, S0
	0x03BC57B0 FMUL S7, S8, S3
	0x03BC57B4 FADD S2, S7, S2
	0x03BC57B8 FMUL S7, S10, S4
	0x03BC57BC FADD S1, S7, S1
	0x03BC57C0 FMUL S7, S8, S4
	0x03BC57C4 FMUL S4, S9, S4
	0x03BC57C8 FSUB S4, S6, S4
	0x03BC57CC FMUL S6, S10, S5
	0x03BC57D0 FMUL S3, S9, S3
	0x03BC57D4 FMUL S5, S8, S5
	0x03BC57D8 FSUB S0, S0, S7
	0x03BC57DC FSUB S2, S2, S6
	0x03BC57E0 FSUB S1, S1, S3
	0x03BC57E4 FSUB S3, S4, S5
	0x03BC57E8 STUR S0, [X26 + 0xAB]
	0x03BC57EC STUR S2, [X26 + 0xAF]
	0x03BC57F0 STUR S1, [X26 + 0xB3]
	0x03BC57F4 STUR S3, [X26 + 0xB7]
	0x03BC57F8 LDR V0, [X19 + 0x320]
	0x03BC57FC LDR V1, [X19 + 0x324]
	0x03BC5800 LDR V2, [X19 + 0x328]
	0x03BC5804 LDR V3, [X19 + 0x32C]
	0x03BC5808 MOV X0, X31
	0x03BC580C BL 0x3C2A60C
	0x03BC5810 ADRP X8, 0xFFFFFFFFFCF25000
	0x03BC5814 LDR V13, [X8 + 0x448]
	0x03BC5818 MOV X0, X31
	0x03BC581C FMUL S0, S0, S13
	0x03BC5820 FMUL S1, S1, S13
	0x03BC5824 FMUL S2, S2, S13
	0x03BC5828 BL 0x3C2AB94
	0x03BC582C STR S0, [X19 + 0x258]
	0x03BC5830 STR S1, [X19 + 0x25C]
	0x03BC5834 STR S2, [X19 + 0x260]
	0x03BC5838 LDUR V0, [X26 + 0xAB]
	0x03BC583C LDUR V1, [X26 + 0xAF]
	0x03BC5840 LDUR V2, [X26 + 0xB3]
	0x03BC5844 LDUR V3, [X26 + 0xB7]
	0x03BC5848 MOV X0, X31
	0x03BC584C BL 0x3C2A60C
	0x03BC5850 FMUL S0, S0, S13
	0x03BC5854 FMUL S1, S1, S13
	0x03BC5858 FMUL S2, S2, S13
	0x03BC585C MOV X0, X31
	0x03BC5860 BL 0x3C2AB94
	0x03BC5864 STR S0, [X19 + 0x264]
	0x03BC5868 STR S1, [X19 + 0x268]
	0x03BC586C LDR V0, [X19 + 0x390]
	0x03BC5870 LDR V1, [X19 + 0x394]
	0x03BC5874 LDR V3, [X19 + 0x398]
	0x03BC5878 STR S2, [X19 + 0x26C]
	0x03BC587C FSUB S4, S0, S12
	0x03BC5880 FSUB S5, S1, S14
	0x03BC5884 FSUB S6, S3, S15
	0x03BC5888 MOV V0.16B, V10.16B
	0x03BC588C MOV V1.16B, V9.16B
	0x03BC5890 MOV V2.16B, V8.16B
	0x03BC5894 MOV V3.16B, V11.16B
	0x03BC5898 MOV X0, X31
	0x03BC589C BL 0x3C2A9FC
	0x03BC58A0 LDR V3, [X19 + 0x39C]
	0x03BC58A4 LDR V4, [X19 + 0x3A0]
	0x03BC58A8 LDR V6, [X19 + 0x3A8]
	0x03BC58AC LDR V5, [X19 + 0x3A4]
	0x03BC58B0 FADD S0, S12, S0
	0x03BC58B4 FADD S1, S14, S1
	0x03BC58B8 FADD S2, S15, S2
	0x03BC58BC STR S0, [X19 + 0x390]
	0x03BC58C0 STR S1, [X19 + 0x394]
	0x03BC58C4 STR S2, [X19 + 0x398]
	0x03BC58C8 FMUL S0, S11, S3
	0x03BC58CC FMUL S1, S10, S6
	0x03BC58D0 FMUL S2, S11, S4
	0x03BC58D4 FMUL S7, S9, S6
	0x03BC58D8 FADD S0, S0, S1
	0x03BC58DC FMUL S1, S11, S5
	0x03BC58E0 FADD S2, S2, S7
	0x03BC58E4 FMUL S7, S8, S6
	0x03BC58E8 FMUL S6, S11, S6
	0x03BC58EC FADD S1, S1, S7
	0x03BC58F0 FMUL S7, S10, S3
	0x03BC58F4 FSUB S6, S6, S7
	0x03BC58F8 FMUL S7, S9, S5
	0x03BC58FC FADD S0, S7, S0
	0x03BC5900 FMUL S7, S8, S3
	0x03BC5904 FADD S2, S7, S2
	0x03BC5908 FMUL S7, S10, S4
	0x03BC590C FADD S1, S7, S1
	0x03BC5910 FMUL S7, S9, S4
	0x03BC5914 FMUL S3, S9, S3
	0x03BC5918 FSUB S6, S6, S7
	0x03BC591C LDR V7, [X19 + 0x3C8]
	0x03BC5920 LDR V16, [X19 + 0x3CC]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X20, 0x81E000
	012 Move W8, [X20+3454]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {41}
	018 Move X0, 0x583000
	019 Move X0, [X0+2952]
	020 Call 0x1C17CF4
	021 Move X0, 0x557000
	022 Move X0, [X0+624]
	023 Call 0x1C17CF4
	024 Move X0, 0x52F000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0x599000
	028 Move X0, [X0+1704]
	029 Call 0x1C17CF4
	030 Move X0, 0x599000
	031 Move X0, [X0+1712]
	032 Call 0x1C17CF4
	033 Move X0, 0x599000
	034 Move X0, [X0+1720]
	035 Call 0x1C17CF4
	036 Move X0, 0x599000
	037 Move X0, [X0+1728]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X20+3454], W8
	041 Move [X31], X31
	042 Move [X31+8], X31
	043 Move W8, [X19+440]
	044 Compare W8, 0
	045 JumpIfEqual {126}
	046 Move X22, 0x557000
	047 Move X22, [X22+624]
	048 Move X20, 0x599000
	049 Move X0, [X22]
	050 Move W8, [X0+224]
	051 Move X20, [X20+1704]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, X31
	056 Call InputSystem.get_devices
	057 Move X8, [X20]
	058 Move [X31], X0
	059 Move [X31+8], X1
	060 Add X0, X31, 0
	061 Move X1, X8
	062 Call ReadOnlyArray`1<Object>.ToArray, X0
	063 Compare X0, 0
	064 JumpIfEqual {261}
	065 Move X8, [X0+24]
	066 Move X20, X0
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X25, 0x599000
	069 Move X26, 0x599000
	070 Move X25, [X25+1720]
	071 Move X26, [X26+1728]
	072 Move X23, X31
	073 And X8, X8, 0
	074 Add X24, X20, 32
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X21, [X24]
	077 Compare X21, 0
	078 JumpIfEqual {102}
	079 Move X9, [X21]
	080 Move X10, [X25]
	081 Move W8, [X9+304]
	082 Move W11, [X10+304]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X9, [X9+200]
	085 Add X11, X9, X11
	086 NotImplemented "Instruction LDUR not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X10, [X26]
	089 Move W11, [X10+304]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Add X8, X9, X11
	092 NotImplemented "Instruction LDUR not yet implemented."
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X0, [X22]
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 Move X0, X21
	100 Move X1, X31
	101 Call InputSystem.RemoveDevice, X0
	102 Move W8, [X20+24]
	103 Add X23, X23, 1
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X8, 0x583000
	106 Move X8, [X8+2952]
	107 Move X20, 0x599000
	108 Move X0, [X8]
	109 Move X20, [X20+1712]
	110 Call 0x1C17F10
	111 Move X2, [X20]
	112 Move X1, X19
	113 Move X3, X31
	114 Move X20, X0
	115 Call Action`2<Object, Int32Enum>..ctor, X0, X1, X2
	116 Move X0, [X22]
	117 Move W8, [X0+224]
	118 Compare W8, 0
	119 JumpIfNotEqual {121}
	120 Call 0x1C17DFC
	121 Move X0, X20
	122 Move X1, X31
	123 Call InputSystem.add_onDeviceChange, X0
	124 Move W8, 1
	125 Move [X19+904], W8
	126 Move X21, 0x52F000
	127 Move X21, [X21+1432]
	128 Move X0, X19
	129 Call XRDeviceSimulator.FindCameraTransform, X0
	130 Move X8, [X19]
	131 Move X0, X19
	132 Move X9, [X8+520]
	133 Move X1, [X8+528]
	134 NotImplemented "Instruction BLR not yet implemented."
	135 Move X0, X19
	136 Call XRDeviceSimulator.SubscribeKeyboardXTranslateAction, X0
	137 Move X0, X19
	138 Call XRDeviceSimulator.SubscribeKeyboardYTranslateAction, X0
	139 Move X0, X19
	140 Call XRDeviceSimulator.SubscribeKeyboardZTranslateAction, X0
	141 Move X0, X19
	142 Call XRDeviceSimulator.SubscribeManipulateLeftAction, X0
	143 Move X0, X19
	144 Call XRDeviceSimulator.SubscribeToggleManipulateLeftAction, X0
	145 Move X0, X19
	146 Call XRDeviceSimulator.SubscribeManipulateRightAction, X0
	147 Move X0, X19
	148 Call XRDeviceSimulator.SubscribeToggleManipulateRightAction, X0
	149 Move X0, X19
	150 Call XRDeviceSimulator.SubscribeToggleManipulateBodyAction, X0
	151 Move X0, X19
	152 Call XRDeviceSimulator.SubscribeManipulateHeadAction, X0
	153 Move X0, X19
	154 Call XRDeviceSimulator.SubscribeStopManipulationAction, X0
	155 Move X0, X19
	156 Call XRDeviceSimulator.SubscribeHandControllerModeAction, X0
	157 Move X0, X19
	158 Call XRDeviceSimulator.SubscribeCycleDevicesAction, X0
	159 Move X0, X19
	160 Call XRDeviceSimulator.SubscribeMouseDeltaAction, X0
	161 Move X0, X19
	162 Call XRDeviceSimulator.SubscribeMouseScrollAction, X0
	163 Move X0, X19
	164 Call XRDeviceSimulator.SubscribeRotateModeOverrideAction, X0
	165 Move X0, X19
	166 Call XRDeviceSimulator.SubscribeToggleMouseTransformationModeAction, X0
	167 Move X0, X19
	168 Call XRDeviceSimulator.SubscribeNegateModeAction, X0
	169 Move X0, X19
	170 Call XRDeviceSimulator.SubscribeXConstraintAction, X0
	171 Move X0, X19
	172 Call XRDeviceSimulator.SubscribeYConstraintAction, X0
	173 Move X0, X19
	174 Call XRDeviceSimulator.SubscribeZConstraintAction, X0
	175 Move X0, X19
	176 Call XRDeviceSimulator.SubscribeResetAction, X0
	177 Move X0, X19
	178 Call XRDeviceSimulator.SubscribeToggleCursorLockAction, X0
	179 Move X0, X19
	180 Call XRDeviceSimulator.SubscribeToggleDevicePositionTargetAction, X0
	181 Move X0, X19
	182 Call XRDeviceSimulator.SubscribeTogglePrimary2DAxisTargetAction, X0
	183 Move X0, X19
	184 Call XRDeviceSimulator.SubscribeToggleSecondary2DAxisTargetAction, X0
	185 Move X0, X19
	186 Call XRDeviceSimulator.SubscribeAxis2DAction, X0
	187 Move X0, X19
	188 Call XRDeviceSimulator.SubscribeRestingHandAxis2DAction, X0
	189 Move X0, X19
	190 Call XRDeviceSimulator.SubscribeGripAction, X0
	191 Move X0, X19
	192 Call XRDeviceSimulator.SubscribeTriggerAction, X0
	193 Move X0, X19
	194 Call XRDeviceSimulator.SubscribePrimaryButtonAction, X0
	195 Move X0, X19
	196 Call XRDeviceSimulator.SubscribeSecondaryButtonAction, X0
	197 Move X0, X19
	198 Call XRDeviceSimulator.SubscribeMenuAction, X0
	199 Move X0, X19
	200 Call XRDeviceSimulator.SubscribePrimary2DAxisClickAction, X0
	201 Move X0, X19
	202 Call XRDeviceSimulator.SubscribeSecondary2DAxisClickAction, X0
	203 Move X0, X19
	204 Call XRDeviceSimulator.SubscribePrimary2DAxisTouchAction, X0
	205 Move X0, X19
	206 Call XRDeviceSimulator.SubscribeSecondary2DAxisTouchAction, X0
	207 Move X0, X19
	208 Call XRDeviceSimulator.SubscribePrimaryTouchAction, X0
	209 Move X0, X19
	210 Call XRDeviceSimulator.SubscribeSecondaryTouchAction, X0
	211 Move X0, [X21]
	212 Move X20, [X19+40]
	213 Move W8, [X0+224]
	214 Compare W8, 0
	215 JumpIfNotEqual {217}
	216 Call 0x1C17DFC
	217 Move X0, X20
	218 Move X1, X31
	219 Move X2, X31
	220 Call Object.op_Inequality, X0, X1
	221 Move TEMP, X0
	222 And TEMP, TEMP, 1
	223 Compare TEMP, 1
	224 JumpIfNotEqual {230}
	225 Move X0, [X19+40]
	226 Compare X0, 0
	227 JumpIfEqual {261}
	228 Move X1, X31
	229 Call InputActionAsset.Enable, X0
	230 Move X0, [X21]
	231 Move X20, [X19+32]
	232 Move W8, [X0+224]
	233 Compare W8, 0
	234 JumpIfNotEqual {236}
	235 Call 0x1C17DFC
	236 Move X0, X20
	237 Move X1, X31
	238 Move X2, X31
	239 Call Object.op_Inequality, X0, X1
	240 Move TEMP, X0
	241 And TEMP, TEMP, 1
	242 Compare TEMP, 1
	243 JumpIfNotEqual {249}
	244 Move X0, [X19+32]
	245 Compare X0, 0
	246 JumpIfEqual {261}
	247 Move X1, X31
	248 Call InputActionAsset.Enable, X0
	249 Move X20, [X31+80]
	250 Move X19, [X31+88]
	251 Move X22, [X31+64]
	252 Move X21, [X31+72]
	253 Move X24, [X31+48]
	254 Move X23, [X31+56]
	255 Move X26, [X31+32]
	256 Move X25, [X31+40]
	257 Move X30, [X31+16]
	258 Add X31, X31, 96
	259 Return 
	260 Call 0x1C17F28
	261 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x03BC5B28 STR S2, [X19 + 0x260]
	0x03BC5B2C FMUL S0, S0, S8
	0x03BC5B30 FMUL S1, S1, S8
	0x03BC5B34 FMUL S2, S2, S8
	0x03BC5B38 BL 0x3C2A574
	0x03BC5B3C STR S0, [X19 + 0x320]
	0x03BC5B40 STR S1, [X19 + 0x324]
	0x03BC5B44 STR S2, [X19 + 0x328]
	0x03BC5B48 STR S3, [X19 + 0x32C]
	0x03BC5B4C LDRB W8, [X24 + 0x783]
	0x03BC5B50 CBNZ W8, 0x3BC5B68
	0x03BC5B54 ADRP X0, 0x52E000
	0x03BC5B58 LDR X0, [X0 + 0x5A0]
	0x03BC5B5C BL 0x1C16CF4
	0x03BC5B60 MOVZ W8, 0x1
	0x03BC5B64 STRB W8, [X24 + 0x783]
	0x03BC5B68 LDR X8, [X20]
	0x03BC5B6C MOV X0, X31
	0x03BC5B70 LDR X8, [X8 + 0xB8]
	0x03BC5B74 LDP S0, S1, [X8]
	0x03BC5B78 LDR V2, [X8 + 0x8]
	0x03BC5B7C STR S0, [X19 + 0x264]
	0x03BC5B80 STR S1, [X19 + 0x268]
	0x03BC5B84 STR S2, [X19 + 0x26C]
	0x03BC5B88 FMUL S0, S0, S8
	0x03BC5B8C FMUL S1, S1, S8
	0x03BC5B90 FMUL S2, S2, S8
	0x03BC5B94 BL 0x3C2A574
	0x03BC5B98 STUR S0, [X26 + 0xAB]
	0x03BC5B9C STUR S1, [X26 + 0xAF]
	0x03BC5BA0 STUR S2, [X26 + 0xB3]
	0x03BC5BA4 STUR S3, [X26 + 0xB7]
	0x03BC5BA8 LDR X8, [X28]
	0x03BC5BAC LDR X9, [X8 + 0xB8]
	0x03BC5BB0 LDR V0, [X9]
	0x03BC5BB4 LDR V1, [X9 + 0x8]
	0x03BC5BB8 STR D0, [X19 + 0x390]
	0x03BC5BBC STR S1, [X19 + 0x398]
	0x03BC5BC0 LDR X8, [X8 + 0xB8]
	0x03BC5BC4 LDUR V0, [X8 + 0xC]
	0x03BC5BC8 LDR V1, [X8 + 0x14]
	0x03BC5BCC STR D0, [X19 + 0x3C8]
	0x03BC5BD0 STR S1, [X19 + 0x3D0]
	0x03BC5BD4 LDRB W8, [X24 + 0x783]
	0x03BC5BD8 CBNZ W8, 0x3BC5BF0
	0x03BC5BDC ADRP X0, 0x52E000
	0x03BC5BE0 LDR X0, [X0 + 0x5A0]
	0x03BC5BE4 BL 0x1C16CF4
	0x03BC5BE8 MOVZ W8, 0x1
	0x03BC5BEC STRB W8, [X24 + 0x783]
	0x03BC5BF0 LDR X8, [X20]
	0x03BC5BF4 MOV X0, X31
	0x03BC5BF8 LDR X8, [X8 + 0xB8]
	0x03BC5BFC LDP S0, S1, [X8]
	0x03BC5C00 LDR V2, [X8 + 0x8]
	0x03BC5C04 STR S0, [X19 + 0x3AC]
	0x03BC5C08 STR S1, [X19 + 0x3B0]
	0x03BC5C0C STR S2, [X19 + 0x3B4]
	0x03BC5C10 FMUL S0, S0, S8
	0x03BC5C14 FMUL S1, S1, S8
	0x03BC5C18 FMUL S2, S2, S8
	0x03BC5C1C BL 0x3C2A574
	0x03BC5C20 STR S0, [X19 + 0x39C]
	0x03BC5C24 STR S1, [X19 + 0x3A0]
	0x03BC5C28 STR S2, [X19 + 0x3A4]
	0x03BC5C2C STR S3, [X19 + 0x3A8]
	0x03BC5C30 LDRB W8, [X24 + 0x783]
	0x03BC5C34 CBNZ W8, 0x3BC5C4C
	0x03BC5C38 ADRP X0, 0x52E000
	0x03BC5C3C LDR X0, [X0 + 0x5A0]
	0x03BC5C40 BL 0x1C16CF4
	0x03BC5C44 MOVZ W8, 0x1
	0x03BC5C48 STRB W8, [X24 + 0x783]
	0x03BC5C4C LDR X8, [X20]
	0x03BC5C50 MOV X0, X31
	0x03BC5C54 ADD X27, X19, 0x2C0
	0x03BC5C58 LDR X8, [X8 + 0xB8]
	0x03BC5C5C LDP S0, S1, [X8]
	0x03BC5C60 LDR V2, [X8 + 0x8]
	0x03BC5C64 STR S0, [X19 + 0x3E4]
	0x03BC5C68 STR S1, [X19 + 0x3E8]
	0x03BC5C6C STR S2, [X19 + 0x3EC]
	0x03BC5C70 FMUL S0, S0, S8
	0x03BC5C74 FMUL S1, S1, S8
	0x03BC5C78 FMUL S2, S2, S8
	0x03BC5C7C BL 0x3C2A574
	0x03BC5C80 STR S0, [X19 + 0x3D4]
	0x03BC5C84 STR S1, [X19 + 0x3D8]
	0x03BC5C88 STR S2, [X19 + 0x3DC]
	0x03BC5C8C STR S3, [X19 + 0x3E0]
	0x03BC5C90 LDR X8, [X21]
	0x03BC5C94 LDR X8, [X8 + 0xB8]
	0x03BC5C98 LDR V0, [X8]
	0x03BC5C9C STR S0, [X19 + 0x2B4]
	0x03BC5CA0 STR S0, [X19 + 0x2B8]
	0x03BC5CA4 STR S0, [X19 + 0x2BC]
	0x03BC5CA8 LDR W8, [X26 + 0x8]
	0x03BC5CAC LDR X9, [X26]
	0x03BC5CB0 STR W8, [X22 + 0x8]
	0x03BC5CB4 STR X9, [X22]
	0x03BC5CB8 LDRB W8, [X24 + 0x783]
	0x03BC5CBC CBNZ W8, 0x3BC5CD4
	0x03BC5CC0 ADRP X0, 0x52E000
	0x03BC5CC4 LDR X0, [X0 + 0x5A0]
	0x03BC5CC8 BL 0x1C16CF4
	0x03BC5CCC MOVZ W8, 0x1
	0x03BC5CD0 STRB W8, [X24 + 0x783]
	0x03BC5CD4 LDR X8, [X20]
	0x03BC5CD8 MOV X0, X31
	0x03BC5CDC LDR X8, [X8 + 0xB8]
	0x03BC5CE0 LDP S0, S1, [X8]
	0x03BC5CE4 LDR V2, [X8 + 0x8]
	0x03BC5CE8 STR S0, [X19 + 0x270]
	0x03BC5CEC STR S1, [X19 + 0x274]
	0x03BC5CF0 STR S2, [X19 + 0x278]
	0x03BC5CF4 FMUL S0, S0, S8
	0x03BC5CF8 FMUL S1, S1, S8
	0x03BC5CFC FMUL S2, S2, S8
	0x03BC5D00 BL 0x3C2A574
	0x03BC5D04 STR S0, [X19 + 0x2C0]
	0x03BC5D08 STR S1, [X19 + 0x2C4]
	0x03BC5D0C STR S2, [X19 + 0x2C8]
	0x03BC5D10 STR S3, [X19 + 0x2CC]
	0x03BC5D14 LDR V0, [X27]
	0x03BC5D18 STR V0, [X23]
	0x03BC5D1C LDRB W8, [X19 + 0x1F4]
	0x03BC5D20 ADD X22, X19, 0x2F1
	0x03BC5D24 ADD X21, X19, 0x330
	0x03BC5D28 ADD X20, X19, 0x27C
	0x03BC5D2C TBZ X8, 0x0, 0x3BC6044
	0x03BC5D30 ADRP X27, 0x598000
	0x03BC5D34 LDR X27, [X27 + 0x460]
	0x03BC5D38 LDR W23, [X19 + 0x180]
	0x03BC5D3C LDR X24, [X19 + 0x178]
	0x03BC5D40 LDR X0, [X27]
	0x03BC5D44 LDR W8, [X0 + 0xE0]
	0x03BC5D48 CBNZ W8, 0x3BC5D50
	0x03BC5D4C BL 0x1C16DFC
	0x03BC5D50 ADD X2, X31, 0xB0
	0x03BC5D54 ADD X3, X31, 0xA0
	0x03BC5D58 ADD X4, X31, 0x90
	0x03BC5D5C MOV W0, W23
	0x03BC5D60 MOV X1, X24
	0x03BC5D64 BL 0x3BC6D64
	0x03BC5D68 LDR V8, [X31 + 0xB0]
	0x03BC5D6C LDR V9, [X31 + 0xB8]
	0x03BC5D70 LDR V10, [X19 + 0x218]
	0x03BC5D74 LDR V11, [X19 + 0x188]
	0x03BC5D78 MOV X0, X31
	0x03BC5D7C BL 0x3C3C714
	0x03BC5D80 FMUL S1, S10, S11
	0x03BC5D84 LDR V10, [X31 + 0xA0]
	0x03BC5D88 LDR V11, [X31 + 0xA8]
	0x03BC5D8C LDR V12, [X19 + 0x21C]
	0x03BC5D90 LDR V13, [X19 + 0x18C]
	0x03BC5D94 FMUL S0, S1, S0
	0x03BC5D98 MOV X0, X31
	0x00000000 INVALID
	0x03BC5DA0 FMUL S9, S9, S0
	0x03BC5DA4 BL 0x3C3C714
	0x03BC5DA8 FMUL S1, S12, S13
	0x03BC5DAC LDR V12, [X31 + 0x90]
	0x03BC5DB0 LDR V13, [X31 + 0x98]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x81E000
	007 Move W8, [X20+3455]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x583000
	014 Move X0, [X0+2952]
	015 Call 0x1C17CF4
	016 Move X0, 0x557000
	017 Move X0, [X0+624]
	018 Call 0x1C17CF4
	019 Move X0, 0x52F000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move X0, 0x599000
	023 Move X0, [X0+1712]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3455], W8
	027 Move X21, 0x52F000
	028 Move W8, [X19+904]
	029 Move X21, [X21+1432]
	030 Compare W8, 0
	031 JumpIfEqual {54}
	032 Move X8, 0x583000
	033 Move X8, [X8+2952]
	034 Move X20, 0x599000
	035 Move X22, 0x557000
	036 Move X0, [X8]
	037 Move X20, [X20+1712]
	038 Move X22, [X22+624]
	039 Call 0x1C17F10
	040 Move X2, [X20]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X20, X0
	044 Call Action`2<Object, Int32Enum>..ctor, X0, X1, X2
	045 Move X0, [X22]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X20
	051 Move X1, X31
	052 Call InputSystem.remove_onDeviceChange, X0
	053 Move [X19+904], W31
	054 Move X8, [X19]
	055 Move X0, X19
	056 Move X9, [X8+536]
	057 Move X1, [X8+544]
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Move X0, X19
	060 Call XRDeviceSimulator.UnsubscribeKeyboardXTranslateAction, X0
	061 Move X0, X19
	062 Call XRDeviceSimulator.UnsubscribeKeyboardYTranslateAction, X0
	063 Move X0, X19
	064 Call XRDeviceSimulator.UnsubscribeKeyboardZTranslateAction, X0
	065 Move X0, X19
	066 Call XRDeviceSimulator.UnsubscribeManipulateLeftAction, X0
	067 Move X0, X19
	068 Call XRDeviceSimulator.UnsubscribeToggleManipulateLeftAction, X0
	069 Move X0, X19
	070 Call XRDeviceSimulator.UnsubscribeManipulateRightAction, X0
	071 Move X0, X19
	072 Call XRDeviceSimulator.UnsubscribeToggleManipulateRightAction, X0
	073 Move X0, X19
	074 Call XRDeviceSimulator.UnsubscribeToggleManipulateBodyAction, X0
	075 Move X0, X19
	076 Call XRDeviceSimulator.UnsubscribeManipulateHeadAction, X0
	077 Move X0, X19
	078 Call XRDeviceSimulator.UnsubscribeStopManipulationAction, X0
	079 Move X0, X19
	080 Call XRDeviceSimulator.UnsubscribeHandControllerModeAction, X0
	081 Move X0, X19
	082 Call XRDeviceSimulator.UnsubscribeCycleDevicesAction, X0
	083 Move X0, X19
	084 Call XRDeviceSimulator.UnsubscribeMouseDeltaAction, X0
	085 Move X0, X19
	086 Call XRDeviceSimulator.UnsubscribeMouseScrollAction, X0
	087 Move X0, X19
	088 Call XRDeviceSimulator.UnsubscribeRotateModeOverrideAction, X0
	089 Move X0, X19
	090 Call XRDeviceSimulator.UnsubscribeToggleMouseTransformationModeAction, X0
	091 Move X0, X19
	092 Call XRDeviceSimulator.UnsubscribeNegateModeAction, X0
	093 Move X0, X19
	094 Call XRDeviceSimulator.UnsubscribeXConstraintAction, X0
	095 Move X0, X19
	096 Call XRDeviceSimulator.UnsubscribeYConstraintAction, X0
	097 Move X0, X19
	098 Call XRDeviceSimulator.UnsubscribeZConstraintAction, X0
	099 Move X0, X19
	100 Call XRDeviceSimulator.UnsubscribeResetAction, X0
	101 Move X0, X19
	102 Call XRDeviceSimulator.UnsubscribeToggleCursorLockAction, X0
	103 Move X0, X19
	104 Call XRDeviceSimulator.UnsubscribeToggleDevicePositionTargetAction, X0
	105 Move X0, X19
	106 Call XRDeviceSimulator.UnsubscribeTogglePrimary2DAxisTargetAction, X0
	107 Move X0, X19
	108 Call XRDeviceSimulator.UnsubscribeToggleSecondary2DAxisTargetAction, X0
	109 Move X0, X19
	110 Call XRDeviceSimulator.UnsubscribeAxis2DAction, X0
	111 Move X0, X19
	112 Call XRDeviceSimulator.UnsubscribeRestingHandAxis2DAction, X0
	113 Move X0, X19
	114 Call XRDeviceSimulator.UnsubscribeGripAction, X0
	115 Move X0, X19
	116 Call XRDeviceSimulator.UnsubscribeTriggerAction, X0
	117 Move X0, X19
	118 Call XRDeviceSimulator.UnsubscribePrimaryButtonAction, X0
	119 Move X0, X19
	120 Call XRDeviceSimulator.UnsubscribeSecondaryButtonAction, X0
	121 Move X0, X19
	122 Call XRDeviceSimulator.UnsubscribeMenuAction, X0
	123 Move X0, X19
	124 Call XRDeviceSimulator.UnsubscribePrimary2DAxisClickAction, X0
	125 Move X0, X19
	126 Call XRDeviceSimulator.UnsubscribeSecondary2DAxisClickAction, X0
	127 Move X0, X19
	128 Call XRDeviceSimulator.UnsubscribePrimary2DAxisTouchAction, X0
	129 Move X0, X19
	130 Call XRDeviceSimulator.UnsubscribeSecondary2DAxisTouchAction, X0
	131 Move X0, X19
	132 Call XRDeviceSimulator.UnsubscribePrimaryTouchAction, X0
	133 Move X0, X19
	134 Call XRDeviceSimulator.UnsubscribeSecondaryTouchAction, X0
	135 Move X0, [X21]
	136 Move X20, [X19+40]
	137 Move W8, [X0+224]
	138 Compare W8, 0
	139 JumpIfNotEqual {141}
	140 Call 0x1C17DFC
	141 Move X0, X20
	142 Move X1, X31
	143 Move X2, X31
	144 Call Object.op_Inequality, X0, X1
	145 Move TEMP, X0
	146 And TEMP, TEMP, 1
	147 Compare TEMP, 1
	148 JumpIfNotEqual {154}
	149 Move X0, [X19+40]
	150 Compare X0, 0
	151 JumpIfEqual {185}
	152 Move X1, X31
	153 Call InputActionAsset.Disable, X0
	154 Move X0, [X21]
	155 Move X20, [X19+32]
	156 Move W8, [X0+224]
	157 Compare W8, 0
	158 JumpIfNotEqual {160}
	159 Call 0x1C17DFC
	160 Move X0, X20
	161 Move X1, X31
	162 Move X2, X31
	163 Call Object.op_Inequality, X0, X1
	164 Move TEMP, X0
	165 And TEMP, TEMP, 1
	166 Compare TEMP, 1
	167 JumpIfNotEqual {179}
	168 Move X0, [X19+32]
	169 Compare X0, 0
	170 JumpIfEqual {185}
	171 Move X20, [X31+32]
	172 Move X19, [X31+40]
	173 Move X22, [X31+16]
	174 Move X21, [X31+24]
	175 Move X1, X31
	176 Move X30, [X31+48]
	177 Call InputActionAsset.Disable, X0
	178 Return 
	179 Move X20, [X31+32]
	180 Move X19, [X31+40]
	181 Move X22, [X31+16]
	182 Move X21, [X31+24]
	183 Move X30, [X31+48]
	184 Return 
	185 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x03BC5DB4 LDR V14, [X19 + 0x220]

ISIL:
	001 Return 

Method: System.Void Update()

Disassembly:
	0x03BC5DB8 LDR V15, [X19 + 0x190]
	0x03BC5DBC FMUL S0, S1, S0
	0x00000000 INVALID
	0x03BC5DC4 FMUL S0, S11, S0
	0x03BC5DC8 MOV X0, X31
	0x03BC5DCC FADD V8.2S, V8.2S, V1.2S
	0x03BC5DD0 FADD S9, S9, S0
	0x03BC5DD4 BL 0x3C3C714
	0x03BC5DD8 FMUL S1, S14, S15
	0x03BC5DDC LDR W8, [X19 + 0x1FC]
	0x03BC5DE0 FMUL S0, S1, S0
	0x00000000 INVALID
	0x03BC5DE8 FMUL S0, S13, S0
	0x03BC5DEC FADD V1.2S, V8.2S, V1.2S
	0x03BC5DF0 FADD S8, S9, S0
	0x03BC5DF4 STR V1, [X31 + 0x4]
	0x03BC5DF8 CBNZ W8, 0x3BC5ED8
	0x03BC5DFC LDR W0, [X25]
	0x03BC5E00 MOVZ W1, 0x2
	0x03BC5E04 MOV X2, X31
	0x03BC5E08 BL 0x3BC9AAC
	0x03BC5E0C TBZ X0, 0x0, 0x3BC5E64
	0x03BC5E10 LDR X0, [X27]
	0x03BC5E14 LDR W23, [X19 + 0x180]
	0x03BC5E18 LDR W8, [X0 + 0xE0]
	0x03BC5E1C CBNZ W8, 0x3BC5E24
	0x03BC5E20 BL 0x1C16DFC
	0x03BC5E24 ADD X2, X31, 0xD0
	0x03BC5E28 MOV W0, W23
	0x03BC5E2C MOV X1, X22
	0x03BC5E30 BL 0x3BC7130
	0x03BC5E34 LDR V4, [X31 + 0x4]
	0x03BC5E38 LDR V9, [X26 + 0x60]
	0x03BC5E3C LDR V10, [X19 + 0x31C]
	0x03BC5E40 MOV V6.16B, V8.16B
	0x03BC5E44 MOV S5, V4.S[1]
	0x03BC5E48 MOV X0, X31
	0x03BC5E4C BL 0x3C2A9FC
	0x03BC5E50 FADD S2, S10, S2
	0x03BC5E54 MOV V0.S[1], V1.S[0]
	0x03BC5E58 FADD V0.2S, V9.2S, V0.2S
	0x03BC5E5C STR D0, [X26 + 0x60]
	0x03BC5E60 STR S2, [X19 + 0x31C]
	0x03BC5E64 LDR W8, [X19 + 0x1FC]
	0x03BC5E68 CBNZ W8, 0x3BC5ED8
	0x03BC5E6C LDR W0, [X25]
	0x03BC5E70 MOVZ W1, 0x4
	0x03BC5E74 MOV X2, X31
	0x03BC5E78 BL 0x3BC9AAC
	0x03BC5E7C TBZ X0, 0x0, 0x3BC5ED4
	0x03BC5E80 LDR X0, [X27]
	0x03BC5E84 LDR W23, [X19 + 0x180]
	0x03BC5E88 LDR W8, [X0 + 0xE0]
	0x03BC5E8C CBNZ W8, 0x3BC5E94
	0x03BC5E90 BL 0x1C16DFC
	0x03BC5E94 ADD X2, X31, 0xD0
	0x03BC5E98 MOV W0, W23
	0x03BC5E9C MOV X1, X21
	0x03BC5EA0 BL 0x3BC7130
	0x03BC5EA4 LDR V4, [X31 + 0x4]
	0x03BC5EA8 LDUR V9, [X26 + 0x9F]
	0x03BC5EAC LDUR V10, [X26 + 0xA7]
	0x03BC5EB0 MOV V6.16B, V8.16B
	0x03BC5EB4 MOV S5, V4.S[1]
	0x03BC5EB8 MOV X0, X31
	0x03BC5EBC BL 0x3C2A9FC
	0x03BC5EC0 FADD S2, S10, S2
	0x03BC5EC4 MOV V0.S[1], V1.S[0]
	0x03BC5EC8 FADD V0.2S, V9.2S, V0.2S
	0x03BC5ECC STUR D0, [X26 + 0x9F]
	0x03BC5ED0 STUR S2, [X26 + 0xA7]
	0x03BC5ED4 LDR W8, [X19 + 0x1FC]
	0x03BC5ED8 CMP W8, 0x1
	0x03BC5EDC B.NE 0x3BC5FC4
	0x03BC5EE0 LDR W0, [X25]
	0x03BC5EE4 MOVZ W1, 0x2
	0x03BC5EE8 MOV X2, X31
	0x03BC5EEC BL 0x3BC9AAC
	0x03BC5EF0 TBZ X0, 0x0, 0x3BC5F4C
	0x03BC5EF4 LDR X0, [X27]
	0x03BC5EF8 LDR W23, [X19 + 0x180]
	0x03BC5EFC ADD X24, X19, 0x390
	0x03BC5F00 LDR W8, [X0 + 0xE0]
	0x03BC5F04 CBNZ W8, 0x3BC5F0C
	0x03BC5F08 BL 0x1C16DFC
	0x03BC5F0C ADD X2, X31, 0xD0
	0x03BC5F10 MOV W0, W23
	0x03BC5F14 MOV X1, X24
	0x03BC5F18 BL 0x3BC71C8
	0x03BC5F1C LDR V4, [X31 + 0x4]
	0x03BC5F20 LDR V9, [X19 + 0x390]
	0x03BC5F24 LDR V10, [X19 + 0x398]
	0x03BC5F28 MOV V6.16B, V8.16B
	0x03BC5F2C MOV S5, V4.S[1]
	0x03BC5F30 MOV X0, X31
	0x03BC5F34 BL 0x3C2A9FC

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+128], X30
	003 Move [X31+144], X22
	004 Move [X31+152], X21
	005 Move [X31+160], X20
	006 Move [X31+168], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X22+40]
	009 Move X20, 0x81E000
	010 Move X19, X0
	011 Move [X31+120], X8
	012 Move W8, [X20+3456]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x599000
	018 Move X0, [X0+1744]
	019 Call 0x1C17CF4
	020 Move X0, 0x599000
	021 Move X0, [X0+1752]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3456], W8
	025 Move X8, [X19]
	026 Move X0, X19
	027 Move X9, [X8+440]
	028 Move X1, [X8+448]
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move X8, [X19]
	031 Move X0, X19
	032 Move X9, [X8+456]
	033 Move X1, [X8+464]
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move X0, [X19+880]
	036 Compare X0, 0
	037 JumpIfEqual {58}
	038 Move X1, X31
	039 Call InputDevice.get_added, X0
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {58}
	044 Move X8, 0x599000
	045 Move X20, [X19+880]
	046 Move X8, [X8+1752]
	047 Add X1, X19, 636
	048 Add X0, X31, 0
	049 Move W2, 117
	050 Move X21, [X8]
	051 Call 0x3EB2AC0
	052 Add X1, X31, 0
	053 Move X0, X20
	054 Move W2, W31
	055 Move X3, X31
	056 Move X4, X21
	057 Call InputState.Change, X0, X1, X2, X3
	058 Move X0, [X19+888]
	059 Compare X0, 0
	060 JumpIfEqual {84}
	061 Move X1, X31
	062 Call InputDevice.get_added, X0
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {84}
	067 Move X9, 0x599000
	068 Move X0, [X19+888]
	069 Move X9, [X9+1744]
	070 Add X8, X19, 753
	071 Move V0, [X19+50]
	072 Move V3, [X8+16]
	073 Move V1, [X8+32]
	074 Move V2, [X8]
	075 Move X4, [X9]
	076 Add X1, X31, 0
	077 Move W2, W31
	078 Move X3, X31
	079 Move [X31+47], V0
	080 Move [X31+16], V3
	081 Move [X31+24], V1
	082 Move [X31], V2
	083 Call InputState.Change, X0, X1, X2, X3
	084 Move X0, [X19+896]
	085 Compare X0, 0
	086 JumpIfEqual {110}
	087 Move X1, X31
	088 Call InputDevice.get_added, X0
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfNotEqual {110}
	093 Move X9, 0x599000
	094 Move X0, [X19+896]
	095 Move X9, [X9+1744]
	096 Add X8, X19, 816
	097 Move V3, [X19+832]
	098 Move V0, [X19+848]
	099 NotImplemented "Instruction LDUR not yet implemented."
	100 Move V2, [X19+51]
	101 Move X4, [X9]
	102 Add X1, X31, 0
	103 Move W2, W31
	104 Move X3, X31
	105 Move [X31+47], V1
	106 Move [X31+16], V3
	107 Move [X31+24], V0
	108 Move [X31], V2
	109 Call InputState.Change, X0, X1, X2, X3
	110 Move X8, [X22+40]
	111 Move X9, [X31+120]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X20, [X31+160]
	114 Move X19, [X31+168]
	115 Move X22, [X31+144]
	116 Move X21, [X31+152]
	117 Move X30, [X31+128]
	118 Add X31, X31, 176
	119 Return 
	120 Call 0x3EB2B20

Method: System.Void InitializeHandSubsystem()

Disassembly:
	0x03BC5564 FCSEL S0, S5, S4, PL

ISIL:
	001 Return 

Method: System.Boolean FindCameraTransform()

Disassembly:
	0x03BC5924 FSUB S1, S1, S3
	0x03BC5928 LDR V3, [X19 + 0x3D0]
	0x03BC592C FMUL S4, S8, S4
	0x03BC5930 FSUB S0, S0, S4
	0x03BC5934 FMUL S4, S10, S5
	0x03BC5938 FMUL S17, S8, S5
	0x03BC593C FSUB S2, S2, S4
	0x03BC5940 FSUB S6, S6, S17
	0x03BC5944 FSUB S4, S7, S12
	0x03BC5948 FSUB S5, S16, S14
	0x03BC594C STR S0, [X19 + 0x39C]
	0x03BC5950 STR S2, [X19 + 0x3A0]
	0x03BC5954 STR S1, [X19 + 0x3A4]
	0x03BC5958 STR S6, [X19 + 0x3A8]
	0x03BC595C FSUB S6, S3, S15
	0x03BC5960 MOV V0.16B, V10.16B
	0x03BC5964 MOV V1.16B, V9.16B
	0x03BC5968 MOV V2.16B, V8.16B
	0x03BC596C MOV V3.16B, V11.16B
	0x03BC5970 MOV X0, X31
	0x03BC5974 BL 0x3C2A9FC
	0x03BC5978 LDR V3, [X19 + 0x3D4]
	0x03BC597C LDR V4, [X19 + 0x3D8]
	0x03BC5980 LDR V5, [X19 + 0x3DC]
	0x03BC5984 LDR V6, [X19 + 0x3E0]
	0x03BC5988 FADD S0, S12, S0
	0x03BC598C FADD S1, S14, S1
	0x03BC5990 FADD S2, S15, S2
	0x03BC5994 STR S0, [X19 + 0x3C8]
	0x03BC5998 STR S1, [X19 + 0x3CC]
	0x03BC599C FMUL S0, S11, S3
	0x03BC59A0 FMUL S1, S10, S6
	0x03BC59A4 FMUL S7, S8, S4
	0x03BC59A8 FMUL S16, S11, S4
	0x03BC59AC FMUL S17, S9, S6
	0x03BC59B0 FMUL S18, S8, S3
	0x03BC59B4 FMUL S20, S10, S4
	0x03BC59B8 FMUL S21, S10, S3
	0x03BC59BC FMUL S22, S9, S3
	0x03BC59C0 FMUL S3, S9, S4
	0x03BC59C4 FMUL S4, S11, S5
	0x03BC59C8 FMUL S23, S11, S6
	0x03BC59CC FMUL S6, S8, S6
	0x03BC59D0 STR S2, [X19 + 0x3D0]
	0x03BC59D4 FMUL S2, S9, S5
	0x03BC59D8 FADD S0, S0, S1
	0x03BC59DC FADD S1, S16, S17
	0x03BC59E0 FADD S4, S4, S6
	0x03BC59E4 FSUB S6, S23, S21
	0x03BC59E8 FADD S16, S2, S0
	0x03BC59EC LDR V0, [X19 + 0x39C]
	0x03BC59F0 FADD S17, S18, S1
	0x03BC59F4 LDR V1, [X19 + 0x3A0]
	0x03BC59F8 LDR V2, [X19 + 0x3A4]
	0x03BC59FC FSUB S6, S6, S3
	0x03BC5A00 LDR V3, [X19 + 0x3A8]
	0x03BC5A04 FMUL S19, S10, S5
	0x03BC5A08 FMUL S5, S8, S5
	0x03BC5A0C FADD S4, S20, S4
	0x03BC5A10 FSUB S7, S16, S7
	0x03BC5A14 FSUB S16, S17, S19
	0x03BC5A18 FSUB S4, S4, S22
	0x03BC5A1C FSUB S5, S6, S5
	0x03BC5A20 MOV X0, X31
	0x03BC5A24 STR S7, [X19 + 0x3D4]
	0x03BC5A28 STR S16, [X19 + 0x3D8]
	0x03BC5A2C STR S4, [X19 + 0x3DC]
	0x03BC5A30 STR S5, [X19 + 0x3E0]
	0x03BC5A34 BL 0x3C2A60C
	0x03BC5A38 FMUL S0, S0, S13
	0x03BC5A3C FMUL S1, S1, S13
	0x03BC5A40 FMUL S2, S2, S13
	0x03BC5A44 MOV X0, X31
	0x03BC5A48 BL 0x3C2AB94
	0x03BC5A4C LDR V6, [X19 + 0x3D4]
	0x03BC5A50 LDR V4, [X19 + 0x3D8]
	0x03BC5A54 LDR V5, [X19 + 0x3DC]
	0x03BC5A58 LDR V3, [X19 + 0x3E0]
	0x03BC5A5C STR S0, [X19 + 0x3AC]
	0x03BC5A60 STR S1, [X19 + 0x3B0]
	0x03BC5A64 STR S2, [X19 + 0x3B4]
	0x03BC5A68 MOV V0.16B, V6.16B
	0x03BC5A6C MOV V1.16B, V4.16B
	0x03BC5A70 MOV V2.16B, V5.16B
	0x03BC5A74 MOV X0, X31
	0x03BC5A78 BL 0x3C2A60C
	0x03BC5A7C FMUL S0, S0, S13
	0x03BC5A80 FMUL S1, S1, S13
	0x03BC5A84 FMUL S2, S2, S13
	0x03BC5A88 MOV X0, X31
	0x03BC5A8C BL 0x3C2AB94
	0x03BC5A90 LDRB W8, [X19 + 0x238]
	0x03BC5A94 STR S0, [X19 + 0x3E4]
	0x03BC5A98 STR S1, [X19 + 0x3E8]
	0x03BC5A9C STR S2, [X19 + 0x3EC]
	0x03BC5AA0 CBZ W8, 0x3BC5D1C
	0x03BC5AA4 ADRP X28, 0x598000
	0x03BC5AA8 LDR X28, [X28 + 0x460]
	0x03BC5AAC LDR X0, [X28]
	0x03BC5AB0 LDR W8, [X0 + 0xE0]
	0x03BC5AB4 CBNZ W8, 0x3BC5AC0
	0x03BC5AB8 BL 0x1C16DFC
	0x03BC5ABC LDR X0, [X28]
	0x03BC5AC0 LDR X8, [X0 + 0xB8]
	0x03BC5AC4 LDR V8, [X31 + 0x40]
	0x03BC5AC8 LDR W9, [X8 + 0x8]
	0x03BC5ACC LDR X8, [X8]
	0x03BC5AD0 STR W9, [X24 + 0x8]
	0x03BC5AD4 STR X8, [X24]
	0x03BC5AD8 LDR X8, [X0 + 0xB8]
	0x03BC5ADC ADRP X24, 0x813000
	0x03BC5AE0 LDR W9, [X8 + 0x14]
	0x03BC5AE4 LDUR X8, [X8 + 0xC]
	0x03BC5AE8 STR W9, [X27 + 0x8]
	0x03BC5AEC STR X8, [X27]
	0x03BC5AF0 LDRB W8, [X24 + 0x783]
	0x03BC5AF4 CBNZ W8, 0x3BC5B0C
	0x03BC5AF8 ADRP X0, 0x52E000
	0x03BC5AFC LDR X0, [X0 + 0x5A0]
	0x03BC5B00 BL 0x1C16CF4
	0x03BC5B04 MOVZ W8, 0x1
	0x03BC5B08 STRB W8, [X24 + 0x783]
	0x03BC5B0C LDR X8, [X20]
	0x03BC5B10 MOV X0, X31
	0x03BC5B14 LDR X8, [X8 + 0xB8]
	0x03BC5B18 LDP S0, S1, [X8]
	0x03BC5B1C LDR V2, [X8 + 0x8]
	0x03BC5B20 STR S0, [X19 + 0x258]
	0x03BC5B24 STR S1, [X19 + 0x25C]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x81E000
	009 Move X23, 0x52F000
	010 Move W8, [X20+3457]
	011 Move X23, [X23+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x557000
	018 Move X0, [X0+712]
	019 Call 0x1C17CF4
	020 Move X0, 0x52F000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move X0, 0x599000
	024 Move X0, [X0+1736]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+3457], W8
	028 Move X0, [X23]
	029 Move X20, [X19+520]
	030 Move X21, [X19+376]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X20
	036 Move X1, X21
	037 Move X2, X31
	038 Add X22, X19, 520
	039 Call Object.op_Inequality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {77}
	044 Move X0, [X23]
	045 Move X20, [X19+376]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X20
	051 Move X1, X31
	052 Move X2, X31
	053 Call Object.op_Inequality, X0, X1
	054 Move X2, X31
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {67}
	059 Move X0, [X19+376]
	060 Compare X0, 0
	061 JumpIfEqual {165}
	062 Move X8, 0x557000
	063 Move X8, [X8+712]
	064 Move X1, [X8]
	065 Call 0x21A4894, X0
	066 Move X2, X0
	067 Move X8, 0x599000
	068 Move X8, [X8+1736]
	069 Add X0, X31, 0
	070 Move X1, X20
	071 Move [X31], X31
	072 Move [X31+8], X31
	073 Move X3, [X8]
	074 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	075 Move V0, [X31]
	076 Move [X22], V0
	077 Move X0, [X23]
	078 Move X20, [X22]
	079 Move W8, [X0+224]
	080 Compare W8, 0
	081 JumpIfNotEqual {83}
	082 Call 0x1C17DFC
	083 Move X0, X20
	084 Move X1, X31
	085 Move X2, X31
	086 Call Object.op_Equality, X0, X1
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfNotEqual {109}
	091 Move X0, X31
	092 Call Camera.get_main
	093 Move X8, [X23]
	094 Move X20, X0
	095 Move W9, [X8+224]
	096 Compare W9, 0
	097 JumpIfNotEqual {100}
	098 Move X0, X8
	099 Call 0x1C17DFC
	100 Move X0, X20
	101 Move X1, X31
	102 Move X2, X31
	103 Call Object.op_Equality, X0, X1
	104 Move TEMP, X0
	105 And TEMP, TEMP, 1
	106 Compare TEMP, 1
	107 JumpIfNotEqual {132}
	108 Move W0, W31
	109 Move X0, [X23]
	110 Move X20, [X19+528]
	111 Move W8, [X0+224]
	112 Compare W8, 0
	113 JumpIfNotEqual {115}
	114 Call 0x1C17DFC
	115 Move X0, X20
	116 Move X1, X31
	117 Move X2, X31
	118 Call Object.op_Inequality, X0, X1
	119 Move TEMP, X0
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfNotEqual {156}
	123 Move X0, [X19+528]
	124 Compare X0, 0
	125 JumpIfEqual {165}
	126 Move X1, X31
	127 Call Behaviour.get_isActiveAndEnabled, X0
	128 Move TEMP, X0
	129 And TEMP, TEMP, 1
	130 Compare TEMP, 1
	131 JumpIfNotEqual {91}
	132 Compare X20, 0
	133 JumpIfEqual {165}
	134 Move X0, X20
	135 Move X1, X31
	136 Call Component.get_transform, X0
	137 Move [X19+376], X0
	138 Compare X0, 0
	139 JumpIfEqual {165}
	140 Move X8, 0x557000
	141 Move X8, [X8+712]
	142 Move X20, X0
	143 Move X1, [X8]
	144 Call 0x21A4894, X0
	145 Move X8, 0x599000
	146 Move X8, [X8+1736]
	147 Move X2, X0
	148 Add X0, X31, 0
	149 Move X1, X20
	150 Move X3, [X8]
	151 Move [X31], X31
	152 Move [X31+8], X31
	153 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	154 Move V0, [X31]
	155 Move [X22], V0
	156 Move W0, 1
	157 Move X20, [X31+48]
	158 Move X19, [X31+56]
	159 Move X22, [X31+32]
	160 Move X21, [X31+40]
	161 Move X30, [X31+16]
	162 Move X23, [X31+24]
	163 Add X31, X31, 64
	164 Return X0
	165 Call 0x1C17F20

Method: System.Void ProcessPoseInput()

Disassembly:
	0x03BC5F3C MOV V0.S[1], V1.S[0]
	0x03BC5F40 FADD V0.2S, V9.2S, V0.2S
	0x03BC5F44 STR D0, [X19 + 0x390]
	0x03BC5F48 STR S2, [X19 + 0x398]
	0x03BC5F4C LDR W8, [X19 + 0x1FC]
	0x03BC5F50 CMP W8, 0x1
	0x03BC5F54 B.NE 0x3BC5FC4
	0x03BC5F58 LDR W0, [X25]
	0x03BC5F5C MOVZ W1, 0x4
	0x03BC5F60 MOV X2, X31
	0x03BC5F64 BL 0x3BC9AAC
	0x03BC5F68 TBZ X0, 0x0, 0x3BC5FC4
	0x03BC5F6C LDR X0, [X27]
	0x03BC5F70 LDR W23, [X19 + 0x180]
	0x03BC5F74 ADD X24, X19, 0x3C8
	0x03BC5F78 LDR W8, [X0 + 0xE0]
	0x03BC5F7C CBNZ W8, 0x3BC5F84
	0x03BC5F80 BL 0x1C16DFC
	0x03BC5F84 ADD X2, X31, 0xD0
	0x03BC5F88 MOV W0, W23
	0x03BC5F8C MOV X1, X24
	0x03BC5F90 BL 0x3BC71C8
	0x03BC5F94 LDR V4, [X31 + 0x4]
	0x03BC5F98 LDR V9, [X19 + 0x3C8]
	0x03BC5F9C LDR V10, [X19 + 0x3D0]
	0x03BC5FA0 MOV V6.16B, V8.16B
	0x03BC5FA4 MOV S5, V4.S[1]
	0x03BC5FA8 MOV X0, X31
	0x03BC5FAC BL 0x3C2A9FC
	0x03BC5FB0 FADD S2, S10, S2
	0x03BC5FB4 MOV V0.S[1], V1.S[0]
	0x03BC5FB8 FADD V0.2S, V9.2S, V0.2S
	0x03BC5FBC STR D0, [X19 + 0x3C8]
	0x03BC5FC0 STR S2, [X19 + 0x3D0]
	0x03BC5FC4 LDR W0, [X25]
	0x03BC5FC8 MOVZ W1, 0x8
	0x03BC5FCC MOV X2, X31
	0x03BC5FD0 BL 0x3BC9AAC
	0x03BC5FD4 TBZ X0, 0x0, 0x3BC6044
	0x03BC5FD8 LDR X0, [X27]
	0x03BC5FDC LDR W23, [X19 + 0x180]
	0x03BC5FE0 LDR W8, [X0 + 0xE0]
	0x03BC5FE4 CBNZ W8, 0x3BC5FEC
	0x03BC5FE8 BL 0x1C16DFC
	0x03BC5FEC ADD X2, X31, 0xD0
	0x03BC5FF0 MOV W0, W23
	0x03BC5FF4 MOV X1, X20
	0x03BC5FF8 BL 0x3BC7258
	0x03BC5FFC LDR V4, [X31 + 0x4]
	0x03BC6000 LDR V9, [X26]
	0x03BC6004 LDR V10, [X19 + 0x2BC]
	0x03BC6008 MOV V6.16B, V8.16B
	0x03BC600C MOV S5, V4.S[1]
	0x03BC6010 MOV X0, X31
	0x03BC6014 BL 0x3C2A9FC
	0x03BC6018 FADD S2, S10, S2
	0x03BC601C MOV V0.S[1], V1.S[0]
	0x03BC6020 FADD V0.2S, V9.2S, V0.2S
	0x03BC6024 STR D0, [X26]
	0x03BC6028 STR S2, [X19 + 0x2BC]
	0x03BC602C LDR W8, [X26 + 0x8]
	0x03BC6030 LDR X9, [X26]
	0x03BC6034 ADD X10, X19, 0x2D5
	0x03BC6038 ADD X11, X19, 0x2DD
	0x03BC603C STR W8, [X11]
	0x03BC6040 STR X9, [X10]
	0x03BC6044 LDR W8, [X19 + 0x1EC]
	0x03BC6048 CMP W8, 0x1
	0x03BC604C B.EQ 0x3BC6070
	0x03BC6050 CBNZ W8, 0x3BC6068
	0x03BC6054 LDRB W8, [X19 + 0x234]
	0x03BC6058 CBNZ W8, 0x3BC6070
	0x03BC605C LDRB W8, [X19 + 0x1F0]
	0x03BC6060 CBNZ W8, 0x3BC60F8
	0x03BC6064 B 0x3BC6078
	0x03BC6068 LDRB W8, [X19 + 0x234]
	0x03BC606C CBZ W8, 0x3BC60F8
	0x03BC6070 LDRB W8, [X19 + 0x1F0]
	0x03BC6074 CBZ W8, 0x3BC60F8
	0x03BC6078 ADRP X27, 0x597000
	0x03BC607C LDR X27, [X27 + 0x460]
	0x03BC6080 LDR W23, [X19 + 0x184]
	0x03BC6084 LDR X24, [X19 + 0x178]
	0x03BC6088 LDR X0, [X27]
	0x03BC608C LDR W8, [X0 + 0xE0]
	0x03BC6090 CBNZ W8, 0x3BC6098
	0x03BC6094 BL 0x1C16DFC
	0x03BC6098 ADD X2, X31, 0x80
	0x03BC609C ADD X3, X31, 0x70
	0x03BC60A0 ADD X4, X31, 0x60
	0x03BC60A4 MOV W0, W23
	0x03BC60A8 MOV X1, X24
	0x03BC60AC BL 0x3BC6D64
	0x03BC60B0 LDR V0, [X19 + 0x224]
	0x03BC60B4 LDR V1, [X19 + 0x198]
	0x03BC60B8 LDR V3, [X19 + 0x228]
	0x03BC60BC LDR V4, [X19 + 0x19C]
	0x03BC60C0 LDR V5, [X19 + 0x230]
	0x03BC60C4 LDR V6, [X19 + 0x1A0]
	0x03BC60C8 LDRB W9, [X19 + 0x235]
	0x03BC60CC LDRB W8, [X19 + 0x236]
	0x03BC60D0 FMUL S2, S0, S1
	0x03BC60D4 FMUL S1, S3, S4
	0x03BC60D8 FMUL S0, S5, S6
	0x03BC60DC CBZ W9, 0x3BC6150
	0x03BC60E0 CBZ W8, 0x3BC61A4
	0x03BC60E4 LDR V3, [X31 + 0x80]
	0x03BC60E8 LDR V4, [X31 + 0x88]
	0x03BC60EC LDR V5, [X31 + 0x70]
	0x03BC60F0 LDR V6, [X31 + 0x78]
	0x03BC60F4 B 0x3BC61BC
	0x03BC60F8 LDR V0, [X19 + 0x224]
	0x03BC60FC LDR V1, [X19 + 0x1A4]
	0x03BC6100 LDR V2, [X19 + 0x228]
	0x03BC6104 LDR V3, [X19 + 0x1A8]
	0x03BC6108 LDRB W8, [X19 + 0x1B0]
	0x03BC610C LDR V4, [X19 + 0x230]
	0x03BC6110 LDR V5, [X19 + 0x1AC]
	0x03BC6114 FMUL S0, S0, S1
	0x03BC6118 FMUL S1, S2, S3
	0x03BC611C FNMUL S2, S2, S3
	0x03BC6120 CMP W8, 0x0
	0x03BC6124 FMUL S3, S4, S5
	0x03BC6128 FCSEL S1, S2, S1, EQ
	0x03BC612C STP S1, S0, [X31 + 0x58]
	0x03BC6130 STR S3, [X31 + 0x54]
	0x03BC6134 LDRB W9, [X19 + 0x235]
	0x03BC6138 LDRB W8, [X19 + 0x236]
	0x03BC613C CBZ W9, 0x3BC6188
	0x03BC6140 CBZ W8, 0x3BC6800
	0x03BC6144 LDP S0, S1, [X31 + 0x58]
	0x03BC6148 FMOV S2, W31
	0x03BC614C B 0x3BC683C
	0x03BC6150 LDRB W9, [X19 + 0x237]
	0x03BC6154 CBZ W8, 0x3BC6814
	0x03BC6158 CBZ W9, 0x3BC6CEC
	0x03BC615C LDR V3, [X31 + 0x70]
	0x03BC6160 LDR V4, [X31 + 0x78]
	0x03BC6164 LDR V5, [X31 + 0x60]
	0x03BC6168 LDR V6, [X31 + 0x68]
	0x00000000 INVALID
	0x03BC6170 FMUL S4, S1, S4
	0x00000000 INVALID
	0x03BC6178 FMUL S2, S2, S6
	0x03BC617C FADD V1.2S, V3.2S, V1.2S
	0x03BC6180 FADD S2, S4, S2
	0x03BC6184 B 0x3BC61D4
	0x03BC6188 LDRB W9, [X19 + 0x237]
	0x03BC618C CBZ W8, 0x3BC6824
	0x03BC6190 CBZ W9, 0x3BC6D20
	0x03BC6194 LDP S0, S1, [X31 + 0x58]
	0x03BC6198 FNEG S2, S0
	0x03BC619C FMOV S0, W31
	0x03BC61A0 B 0x3BC683C
	0x03BC61A4 LDRB W8, [X19 + 0x237]
	0x03BC61A8 CBZ W8, 0x3BC6D00
	0x03BC61AC LDR V3, [X31 + 0x80]
	0x03BC61B0 LDR V4, [X31 + 0x88]
	0x03BC61B4 LDR V5, [X31 + 0x60]
	0x03BC61B8 LDR V6, [X31 + 0x68]
	0x00000000 INVALID
	0x03BC61C0 FMUL S2, S2, S4
	0x00000000 INVALID
	0x03BC61C8 FMUL S5, S1, S6
	0x03BC61CC FADD V1.2S, V3.2S, V4.2S
	0x03BC61D0 FADD S2, S2, S5
	0x03BC61D4 LDR V3, [X31 + 0x60]
	0x03BC61D8 LDR V4, [X31 + 0x68]
	0x03BC61DC LDR W8, [X19 + 0x1FC]
	0x00000000 INVALID
	0x03BC61E4 FMUL S0, S0, S4
	0x03BC61E8 FADD V1.2S, V1.2S, V3.2S
	0x03BC61EC FADD S8, S2, S0
	0x03BC61F0 STR V1, [X31 + 0x4]
	0x03BC61F4 CBNZ W8, 0x3BC62D4
	0x03BC61F8 LDR W0, [X25]
	0x03BC61FC MOVZ W1, 0x2
	0x03BC6200 MOV X2, X31
	0x03BC6204 BL 0x3BC9AAC
	0x03BC6208 TBZ X0, 0x0, 0x3BC6260
	0x03BC620C LDR X0, [X27]
	0x03BC6210 LDR W23, [X19 + 0x184]
	0x03BC6214 LDR W8, [X0 + 0xE0]
	0x03BC6218 CBNZ W8, 0x3BC6220
	0x03BC621C BL 0x1C16DFC
	0x03BC6220 ADD X2, X31, 0xD0
	0x03BC6224 MOV W0, W23
	0x03BC6228 MOV X1, X22
	0x03BC622C BL 0x3BC7130
	0x03BC6230 LDR V4, [X31 + 0x4]
	0x03BC6234 LDR V9, [X26 + 0x60]
	0x03BC6238 LDR V10, [X19 + 0x31C]
	0x03BC623C MOV V6.16B, V8.16B
	0x03BC6240 MOV S5, V4.S[1]
	0x03BC6244 MOV X0, X31
	0x03BC6248 BL 0x3C2A9FC
	0x03BC624C FADD S2, S10, S2
	0x03BC6250 MOV V0.S[1], V1.S[0]
	0x03BC6254 FADD V0.2S, V9.2S, V0.2S
	0x03BC6258 STR D0, [X26 + 0x60]
	0x03BC625C STR S2, [X19 + 0x31C]
	0x03BC6260 LDR W8, [X19 + 0x1FC]
	0x03BC6264 CBNZ W8, 0x3BC62D4
	0x03BC6268 LDR W0, [X25]
	0x03BC626C MOVZ W1, 0x4
	0x03BC6270 MOV X2, X31
	0x03BC6274 BL 0x3BC9AAC
	0x03BC6278 TBZ X0, 0x0, 0x3BC62D0
	0x03BC627C LDR X0, [X27]
	0x03BC6280 LDR W22, [X19 + 0x184]
	0x03BC6284 LDR W8, [X0 + 0xE0]
	0x03BC6288 CBNZ W8, 0x3BC6290
	0x03BC628C BL 0x1C16DFC
	0x03BC6290 ADD X2, X31, 0xD0
	0x03BC6294 MOV W0, W22
	0x03BC6298 MOV X1, X21
	0x03BC629C BL 0x3BC7130
	0x03BC62A0 LDR V4, [X31 + 0x4]
	0x03BC62A4 LDUR V9, [X26 + 0x9F]
	0x03BC62A8 LDUR V10, [X26 + 0xA7]
	0x03BC62AC MOV V6.16B, V8.16B
	0x03BC62B0 MOV S5, V4.S[1]
	0x03BC62B4 MOV X0, X31
	0x03BC62B8 BL 0x3C2A9FC
	0x03BC62BC FADD S2, S10, S2
	0x03BC62C0 MOV V0.S[1], V1.S[0]
	0x03BC62C4 FADD V0.2S, V9.2S, V0.2S
	0x03BC62C8 STUR D0, [X26 + 0x9F]
	0x03BC62CC STUR S2, [X26 + 0xA7]
	0x03BC62D0 LDR W8, [X19 + 0x1FC]
	0x03BC62D4 CMP W8, 0x1
	0x03BC62D8 B.NE 0x3BC63C0
	0x03BC62DC LDR W0, [X25]
	0x03BC62E0 MOVZ W1, 0x2
	0x03BC62E4 MOV X2, X31
	0x03BC62E8 BL 0x3BC9AAC
	0x03BC62EC TBZ X0, 0x0, 0x3BC6348
	0x03BC62F0 LDR X0, [X27]
	0x03BC62F4 LDR W21, [X19 + 0x184]
	0x03BC62F8 ADD X22, X19, 0x390
	0x03BC62FC LDR W8, [X0 + 0xE0]
	0x03BC6300 CBNZ W8, 0x3BC6308
	0x03BC6304 BL 0x1C16DFC
	0x03BC6308 ADD X2, X31, 0xD0
	0x03BC630C MOV W0, W21
	0x03BC6310 MOV X1, X22
	0x03BC6314 BL 0x3BC71C8
	0x03BC6318 LDR V4, [X31 + 0x4]
	0x03BC631C LDR V9, [X19 + 0x390]
	0x03BC6320 LDR V10, [X19 + 0x398]
	0x03BC6324 MOV V6.16B, V8.16B
	0x03BC6328 MOV S5, V4.S[1]
	0x03BC632C MOV X0, X31
	0x03BC6330 BL 0x3C2A9FC
	0x03BC6334 FADD S2, S10, S2
	0x03BC6338 MOV V0.S[1], V1.S[0]
	0x03BC633C FADD V0.2S, V9.2S, V0.2S
	0x03BC6340 STR D0, [X19 + 0x390]
	0x03BC6344 STR S2, [X19 + 0x398]
	0x03BC6348 LDR W8, [X19 + 0x1FC]
	0x03BC634C CMP W8, 0x1
	0x03BC6350 B.NE 0x3BC63C0
	0x03BC6354 LDR W0, [X25]
	0x03BC6358 MOVZ W1, 0x4
	0x03BC635C MOV X2, X31
	0x03BC6360 BL 0x3BC9AAC
	0x03BC6364 TBZ X0, 0x0, 0x3BC63C0
	0x03BC6368 LDR X0, [X27]
	0x03BC636C LDR W21, [X19 + 0x184]
	0x03BC6370 ADD X22, X19, 0x3C8
	0x03BC6374 LDR W8, [X0 + 0xE0]
	0x03BC6378 CBNZ W8, 0x3BC6380
	0x03BC637C BL 0x1C16DFC
	0x03BC6380 ADD X2, X31, 0xD0
	0x03BC6384 MOV W0, W21
	0x03BC6388 MOV X1, X22
	0x03BC638C BL 0x3BC71C8
	0x03BC6390 LDR V4, [X31 + 0x4]
	0x03BC6394 LDR V9, [X19 + 0x3C8]
	0x03BC6398 LDR V10, [X19 + 0x3D0]
	0x03BC639C MOV V6.16B, V8.16B
	0x03BC63A0 MOV S5, V4.S[1]
	0x03BC63A4 MOV X0, X31
	0x03BC63A8 BL 0x3C2A9FC
	0x03BC63AC FADD S2, S10, S2
	0x03BC63B0 MOV V0.S[1], V1.S[0]
	0x03BC63B4 FADD V0.2S, V9.2S, V0.2S
	0x03BC63B8 STR D0, [X19 + 0x3C8]
	0x03BC63BC STR S2, [X19 + 0x3D0]
	0x03BC63C0 LDR W0, [X25]
	0x03BC63C4 MOVZ W1, 0x8
	0x03BC63C8 MOV X2, X31
	0x03BC63CC BL 0x3BC9AAC
	0x03BC63D0 TBZ X0, 0x0, 0x3BC6440
	0x03BC63D4 LDR X0, [X27]
	0x03BC63D8 LDR W21, [X19 + 0x184]
	0x03BC63DC LDR W8, [X0 + 0xE0]
	0x03BC63E0 CBNZ W8, 0x3BC63E8
	0x03BC63E4 BL 0x1C16DFC
	0x03BC63E8 ADD X2, X31, 0xD0
	0x03BC63EC MOV W0, W21
	0x03BC63F0 MOV X1, X20
	0x03BC63F4 BL 0x3BC7258
	0x03BC63F8 LDR V4, [X31 + 0x4]
	0x03BC63FC LDR V9, [X26]
	0x03BC6400 LDR V10, [X19 + 0x2BC]
	0x03BC6404 MOV V6.16B, V8.16B
	0x03BC6408 MOV S5, V4.S[1]
	0x03BC640C MOV X0, X31
	0x03BC6410 BL 0x3C2A9FC
	0x03BC6414 FADD S2, S10, S2
	0x03BC6418 MOV V0.S[1], V1.S[0]
	0x03BC641C FADD V0.2S, V9.2S, V0.2S
	0x03BC6420 STR D0, [X26]
	0x03BC6424 STR S2, [X19 + 0x2BC]
	0x03BC6428 LDR W8, [X26 + 0x8]
	0x03BC642C LDR X9, [X26]
	0x03BC6430 ADD X10, X19, 0x2D5
	0x03BC6434 ADD X11, X19, 0x2DD
	0x03BC6438 STR W8, [X11]
	0x03BC643C STR X9, [X10]
	0x03BC6440 LDRB W8, [X19 + 0x238]
	0x03BC6444 CBZ W8, 0x3BC6CBC
	0x03BC6448 MOV X0, X19
	0x03BC644C BL 0x3BC72E8
	0x03BC6450 LDR W8, [X19 + 0x1FC]
	0x03BC6454 MOV V8.16B, V0.16B
	0x03BC6458 MOV V9.16B, V1.16B
	0x03BC645C MOV V10.16B, V2.16B
	0x03BC6460 CBNZ W8, 0x3BC65C8
	0x03BC6464 LDR W0, [X25]
	0x03BC6468 MOVZ W1, 0x2
	0x03BC646C MOV X2, X31
	0x03BC6470 BL 0x3BC9AAC
	0x03BC6474 TBZ X0, 0x0, 0x3BC6510
	0x03BC6478 ADRP X20, 0x812000
	0x03BC647C LDR V11, [X19 + 0x314]
	0x03BC6480 LDR V12, [X19 + 0x318]
	0x03BC6484 LDRB W8, [X20 + 0x784]
	0x03BC6488 LDR V13, [X19 + 0x31C]
	0x03BC648C CBNZ W8, 0x3BC64A4
	0x03BC6490 ADRP X0, 0x52D000
	0x03BC6494 LDR X0, [X0 + 0x5A8]
	0x03BC6498 BL 0x1C16CF4
	0x03BC649C MOVZ W8, 0x1
	0x03BC64A0 STRB W8, [X20 + 0x784]
	0x03BC64A4 ADRP X8, 0x52D000
	0x03BC64A8 LDR X8, [X8 + 0x5A8]
	0x03BC64AC FMUL S11, S8, S11
	0x03BC64B0 FMUL S12, S9, S12
	0x03BC64B4 FMUL S13, S10, S13
	0x03BC64B8 LDR X0, [X8]
	0x03BC64BC LDR W8, [X0 + 0xE0]
	0x03BC64C0 CBNZ W8, 0x3BC64C8
	0x03BC64C4 BL 0x1C16DFC
	0x03BC64C8 FMUL S0, S11, S11
	0x03BC64CC FMUL S1, S12, S12
	0x03BC64D0 FADD S0, S0, S1
	0x03BC64D4 FMUL S1, S13, S13
	0x03BC64D8 FADD S0, S0, S1
	0x03BC64DC FSQRT S0, S0
	0x03BC64E0 FCMP S0, 0x0
	0x03BC64E4 B.HI 0x3BC6504
	0x03BC64E8 ADRP X8, 0x534000
	0x03BC64EC LDR X8, [X8 + 0x4B8]
	0x03BC64F0 LDR X8, [X8]
	0x03BC64F4 LDR X8, [X8 + 0xB8]
	0x03BC64F8 LDR V11, [X8]
	0x03BC64FC MOV V12.16B, V11.16B
	0x03BC6500 MOV V13.16B, V11.16B
	0x03BC6504 STR S11, [X19 + 0x314]
	0x03BC6508 STR S12, [X19 + 0x318]
	0x03BC650C STR S13, [X19 + 0x31C]
	0x03BC6510 LDR W8, [X19 + 0x1FC]
	0x03BC6514 CBNZ W8, 0x3BC65C8
	0x03BC6518 LDR W0, [X25]
	0x03BC651C MOVZ W1, 0x4
	0x03BC6520 MOV X2, X31
	0x03BC6524 BL 0x3BC9AAC
	0x03BC6528 TBZ X0, 0x0, 0x3BC65C4
	0x03BC652C ADRP X20, 0x812000
	0x03BC6530 LDUR V11, [X26 + 0x9F]
	0x03BC6534 LDUR V12, [X26 + 0xA3]
	0x03BC6538 LDRB W8, [X20 + 0x784]
	0x03BC653C LDUR V13, [X26 + 0xA7]
	0x03BC6540 CBNZ W8, 0x3BC6558
	0x03BC6544 ADRP X0, 0x52D000
	0x03BC6548 LDR X0, [X0 + 0x5A8]
	0x03BC654C BL 0x1C16CF4
	0x03BC6550 MOVZ W8, 0x1
	0x03BC6554 STRB W8, [X20 + 0x784]
	0x03BC6558 ADRP X8, 0x52D000
	0x03BC655C LDR X8, [X8 + 0x5A8]
	0x03BC6560 FMUL S11, S8, S11
	0x03BC6564 FMUL S12, S9, S12
	0x03BC6568 FMUL S13, S10, S13
	0x03BC656C LDR X0, [X8]
	0x03BC6570 LDR W8, [X0 + 0xE0]
	0x03BC6574 CBNZ W8, 0x3BC657C
	0x03BC6578 BL 0x1C16DFC
	0x03BC657C FMUL S0, S11, S11
	0x03BC6580 FMUL S1, S12, S12
	0x03BC6584 FADD S0, S0, S1
	0x03BC6588 FMUL S1, S13, S13
	0x03BC658C FADD S0, S0, S1
	0x03BC6590 FSQRT S0, S0
	0x03BC6594 FCMP S0, 0x0
	0x03BC6598 B.HI 0x3BC65B8
	0x03BC659C ADRP X8, 0x534000
	0x03BC65A0 LDR X8, [X8 + 0x4B8]
	0x03BC65A4 LDR X8, [X8]
	0x03BC65A8 LDR X8, [X8 + 0xB8]
	0x03BC65AC LDR V11, [X8]
	0x03BC65B0 MOV V12.16B, V11.16B
	0x03BC65B4 MOV V13.16B, V11.16B
	0x03BC65B8 STUR S11, [X26 + 0x9F]
	0x03BC65BC STUR S12, [X26 + 0xA3]
	0x03BC65C0 STUR S13, [X26 + 0xA7]
	0x03BC65C4 LDR W8, [X19 + 0x1FC]
	0x03BC65C8 CMP W8, 0x1
	0x03BC65CC B.NE 0x3BC6734
	0x03BC65D0 LDR W0, [X25]
	0x03BC65D4 MOVZ W1, 0x2
	0x03BC65D8 MOV X2, X31
	0x03BC65DC BL 0x3BC9AAC
	0x03BC65E0 TBZ X0, 0x0, 0x3BC667C
	0x03BC65E4 ADRP X20, 0x812000
	0x03BC65E8 LDR V11, [X19 + 0x390]
	0x03BC65EC LDR V12, [X19 + 0x394]
	0x03BC65F0 LDRB W8, [X20 + 0x784]
	0x03BC65F4 LDR V13, [X19 + 0x398]
	0x03BC65F8 CBNZ W8, 0x3BC6610
	0x03BC65FC ADRP X0, 0x52D000
	0x03BC6600 LDR X0, [X0 + 0x5A8]
	0x03BC6604 BL 0x1C16CF4
	0x03BC6608 MOVZ W8, 0x1
	0x03BC660C STRB W8, [X20 + 0x784]
	0x03BC6610 ADRP X8, 0x52D000
	0x03BC6614 LDR X8, [X8 + 0x5A8]
	0x03BC6618 FMUL S11, S8, S11
	0x03BC661C FMUL S12, S9, S12
	0x03BC6620 FMUL S13, S10, S13
	0x03BC6624 LDR X0, [X8]
	0x03BC6628 LDR W8, [X0 + 0xE0]
	0x03BC662C CBNZ W8, 0x3BC6634
	0x03BC6630 BL 0x1C16DFC
	0x03BC6634 FMUL S0, S11, S11
	0x03BC6638 FMUL S1, S12, S12
	0x03BC663C FADD S0, S0, S1
	0x03BC6640 FMUL S1, S13, S13
	0x03BC6644 FADD S0, S0, S1
	0x03BC6648 FSQRT S0, S0
	0x03BC664C FCMP S0, 0x0
	0x03BC6650 B.HI 0x3BC6670
	0x03BC6654 ADRP X8, 0x534000
	0x03BC6658 LDR X8, [X8 + 0x4B8]
	0x03BC665C LDR X8, [X8]
	0x03BC6660 LDR X8, [X8 + 0xB8]
	0x03BC6664 LDR V11, [X8]
	0x03BC6668 MOV V12.16B, V11.16B
	0x03BC666C MOV V13.16B, V11.16B
	0x03BC6670 STR S11, [X19 + 0x390]
	0x03BC6674 STR S12, [X19 + 0x394]
	0x03BC6678 STR S13, [X19 + 0x398]
	0x03BC667C LDR W8, [X19 + 0x1FC]
	0x03BC6680 CMP W8, 0x1
	0x03BC6684 B.NE 0x3BC6734
	0x03BC6688 LDR W0, [X25]
	0x03BC668C MOVZ W1, 0x4
	0x03BC6690 MOV X2, X31
	0x03BC6694 BL 0x3BC9AAC
	0x03BC6698 TBZ X0, 0x0, 0x3BC6734
	0x03BC669C ADRP X20, 0x812000
	0x03BC66A0 LDR V11, [X19 + 0x3C8]
	0x03BC66A4 LDR V12, [X19 + 0x3CC]
	0x03BC66A8 LDRB W8, [X20 + 0x784]
	0x03BC66AC LDR V13, [X19 + 0x3D0]
	0x03BC66B0 CBNZ W8, 0x3BC66C8
	0x03BC66B4 ADRP X0, 0x52D000
	0x03BC66B8 LDR X0, [X0 + 0x5A8]
	0x03BC66BC BL 0x1C16CF4
	0x03BC66C0 MOVZ W8, 0x1
	0x03BC66C4 STRB W8, [X20 + 0x784]
	0x03BC66C8 ADRP X8, 0x52D000
	0x03BC66CC LDR X8, [X8 + 0x5A8]
	0x03BC66D0 FMUL S11, S8, S11
	0x03BC66D4 FMUL S12, S9, S12
	0x03BC66D8 FMUL S13, S10, S13
	0x03BC66DC LDR X0, [X8]
	0x03BC66E0 LDR W8, [X0 + 0xE0]
	0x03BC66E4 CBNZ W8, 0x3BC66EC
	0x03BC66E8 BL 0x1C16DFC
	0x03BC66EC FMUL S0, S11, S11
	0x03BC66F0 FMUL S1, S12, S12
	0x03BC66F4 FADD S0, S0, S1
	0x03BC66F8 FMUL S1, S13, S13
	0x03BC66FC FADD S0, S0, S1
	0x03BC6700 FSQRT S0, S0
	0x03BC6704 FCMP S0, 0x0
	0x03BC6708 B.HI 0x3BC6728
	0x03BC670C ADRP X8, 0x534000
	0x03BC6710 LDR X8, [X8 + 0x4B8]
	0x03BC6714 LDR X8, [X8]
	0x03BC6718 LDR X8, [X8 + 0xB8]
	0x03BC671C LDR V11, [X8]
	0x03BC6720 MOV V12.16B, V11.16B
	0x03BC6724 MOV V13.16B, V11.16B
	0x03BC6728 STR S11, [X19 + 0x3C8]
	0x03BC672C STR S12, [X19 + 0x3CC]
	0x03BC6730 STR S13, [X19 + 0x3D0]
	0x03BC6734 LDR W0, [X25]
	0x03BC6738 MOVZ W1, 0x8
	0x03BC673C MOV X2, X31
	0x03BC6740 BL 0x3BC9AAC
	0x03BC6744 TBZ X0, 0x0, 0x3BC6CBC
	0x03BC6748 ADRP X20, 0x812000
	0x03BC674C LDR V11, [X19 + 0x2B4]
	0x03BC6750 LDR V12, [X19 + 0x2B8]
	0x03BC6754 LDRB W8, [X20 + 0x784]
	0x03BC6758 LDR V13, [X19 + 0x2BC]
	0x03BC675C CBNZ W8, 0x3BC6774
	0x03BC6760 ADRP X0, 0x52D000
	0x03BC6764 LDR X0, [X0 + 0x5A8]
	0x03BC6768 BL 0x1C16CF4
	0x03BC676C MOVZ W8, 0x1
	0x03BC6770 STRB W8, [X20 + 0x784]
	0x03BC6774 ADRP X8, 0x52D000
	0x03BC6778 LDR X8, [X8 + 0x5A8]
	0x03BC677C FMUL S8, S8, S11
	0x03BC6780 FMUL S9, S9, S12
	0x03BC6784 FMUL S10, S10, S13
	0x03BC6788 LDR X0, [X8]
	0x03BC678C LDR W8, [X0 + 0xE0]
	0x03BC6790 CBNZ W8, 0x3BC6798
	0x03BC6794 BL 0x1C16DFC
	0x03BC6798 FMUL S0, S8, S8
	0x03BC679C FMUL S1, S9, S9
	0x03BC67A0 FADD S0, S0, S1
	0x03BC67A4 FMUL S1, S10, S10
	0x03BC67A8 FADD S0, S0, S1
	0x03BC67AC FSQRT S0, S0
	0x03BC67B0 FCMP S0, 0x0
	0x03BC67B4 ADD X8, X19, 0x2B4
	0x03BC67B8 B.HI 0x3BC67D8
	0x03BC67BC ADRP X9, 0x534000
	0x03BC67C0 LDR X9, [X9 + 0x4B8]
	0x03BC67C4 LDR X9, [X9]
	0x03BC67C8 LDR X9, [X9 + 0xB8]
	0x03BC67CC LDR V8, [X9]
	0x03BC67D0 MOV V9.16B, V8.16B
	0x03BC67D4 MOV V10.16B, V8.16B
	0x03BC67D8 STR S8, [X19 + 0x2B4]
	0x03BC67DC STR S9, [X19 + 0x2B8]
	0x03BC67E0 STR S10, [X19 + 0x2BC]
	0x03BC67E4 LDR W9, [X8 + 0x8]
	0x03BC67E8 LDR X8, [X8]
	0x03BC67EC ADD X10, X19, 0x2D5
	0x03BC67F0 ADD X11, X19, 0x2DD
	0x03BC67F4 STR W9, [X11]
	0x03BC67F8 STR X8, [X10]
	0x03BC67FC B 0x3BC6CBC
	0x03BC6800 LDRB W8, [X19 + 0x237]
	0x03BC6804 CBZ W8, 0x3BC6D38
	0x03BC6808 LDP S0, S1, [X31 + 0x58]
	0x03BC680C FNEG S2, S1
	0x03BC6810 B 0x3BC6838
	0x03BC6814 CBZ W9, 0x3BC60E4
	0x03BC6818 LDR V3, [X31 + 0x60]
	0x03BC681C LDR V4, [X31 + 0x68]
	0x03BC6820 B 0x3BC6D10
	0x03BC6824 CBZ W9, 0x3BC6144
	0x03BC6828 LDP S1, S2, [X31 + 0x58]
	0x03BC682C FMOV S0, W31
	0x03BC6830 FNEG S1, S1
	0x03BC6834 FSUB S2, S1, S2
	0x03BC6838 FMOV S1, W31
	0x03BC683C LDR V3, [X31 + 0x54]
	0x03BC6840 LDR W8, [X19 + 0x1FC]
	0x03BC6844 FMOV S4, W31
	0x03BC6848 FADD S8, S0, S4
	0x03BC684C FADD S9, S1, S4
	0x03BC6850 FADD S10, S2, S3
	0x03BC6854 CBNZ W8, 0x3BC692C
	0x03BC6858 LDR W0, [X25]
	0x03BC685C MOVZ W1, 0x2
	0x03BC6860 MOV X2, X31
	0x03BC6864 BL 0x3BC9AAC
	0x03BC6868 TBZ X0, 0x0, 0x3BC68BC
	0x03BC686C LDR V0, [X19 + 0x258]
	0x03BC6870 LDR V1, [X19 + 0x25C]
	0x03BC6874 LDR V2, [X19 + 0x260]
	0x03BC6878 ADRP X8, 0xFFFFFFFFFCF24000
	0x03BC687C LDR V3, [X8 + 0x104]
	0x03BC6880 FADD S0, S8, S0
	0x03BC6884 FADD S1, S9, S1
	0x03BC6888 FADD S2, S10, S2
	0x03BC688C STR S0, [X19 + 0x258]
	0x03BC6890 STR S1, [X19 + 0x25C]
	0x03BC6894 STR S2, [X19 + 0x260]
	0x03BC6898 FMUL S0, S0, S3
	0x03BC689C FMUL S1, S1, S3
	0x03BC68A0 FMUL S2, S2, S3
	0x03BC68A4 MOV X0, X31
	0x03BC68A8 BL 0x3C2A574
	0x03BC68AC STR S0, [X19 + 0x320]
	0x03BC68B0 STR S1, [X19 + 0x324]
	0x03BC68B4 STR S2, [X19 + 0x328]
	0x03BC68B8 STR S3, [X19 + 0x32C]
	0x03BC68BC LDR W8, [X19 + 0x1FC]
	0x03BC68C0 CBNZ W8, 0x3BC692C
	0x03BC68C4 LDR W0, [X25]
	0x03BC68C8 MOVZ W1, 0x4
	0x03BC68CC MOV X2, X31
	0x03BC68D0 BL 0x3BC9AAC
	0x03BC68D4 TBZ X0, 0x0, 0x3BC6928
	0x03BC68D8 LDR V0, [X19 + 0x264]
	0x03BC68DC LDR V1, [X19 + 0x268]
	0x03BC68E0 LDR V2, [X19 + 0x26C]
	0x03BC68E4 ADRP X8, 0xFFFFFFFFFCF24000
	0x03BC68E8 LDR V3, [X8 + 0x104]
	0x03BC68EC FADD S0, S8, S0
	0x03BC68F0 FADD S1, S9, S1
	0x03BC68F4 FADD S2, S10, S2
	0x03BC68F8 STR S0, [X19 + 0x264]
	0x03BC68FC STR S1, [X19 + 0x268]
	0x03BC6900 STR S2, [X19 + 0x26C]
	0x03BC6904 FMUL S0, S0, S3
	0x03BC6908 FMUL S1, S1, S3
	0x03BC690C FMUL S2, S2, S3
	0x03BC6910 MOV X0, X31
	0x03BC6914 BL 0x3C2A574
	0x03BC6918 STUR S0, [X26 + 0xAB]
	0x03BC691C STUR S1, [X26 + 0xAF]
	0x03BC6920 STUR S2, [X26 + 0xB3]
	0x03BC6924 STUR S3, [X26 + 0xB7]
	0x03BC6928 LDR W8, [X19 + 0x1FC]
	0x03BC692C CMP W8, 0x1
	0x03BC6930 B.NE 0x3BC6A08
	0x03BC6934 LDR W0, [X25]
	0x03BC6938 MOVZ W1, 0x2
	0x03BC693C MOV X2, X31
	0x03BC6940 BL 0x3BC9AAC
	0x03BC6944 TBZ X0, 0x0, 0x3BC6998
	0x03BC6948 LDR V0, [X19 + 0x3AC]
	0x03BC694C LDR V1, [X19 + 0x3B0]
	0x03BC6950 LDR V2, [X19 + 0x3B4]
	0x03BC6954 ADRP X8, 0xFFFFFFFFFCF24000
	0x03BC6958 LDR V3, [X8 + 0x104]
	0x03BC695C FADD S0, S8, S0
	0x03BC6960 FADD S1, S9, S1
	0x03BC6964 FADD S2, S10, S2
	0x03BC6968 STR S0, [X19 + 0x3AC]
	0x03BC696C STR S1, [X19 + 0x3B0]
	0x03BC6970 STR S2, [X19 + 0x3B4]
	0x03BC6974 FMUL S0, S0, S3
	0x03BC6978 FMUL S1, S1, S3
	0x03BC697C FMUL S2, S2, S3
	0x03BC6980 MOV X0, X31
	0x03BC6984 BL 0x3C2A574
	0x03BC6988 STR S0, [X19 + 0x39C]
	0x03BC698C STR S1, [X19 + 0x3A0]
	0x03BC6990 STR S2, [X19 + 0x3A4]
	0x03BC6994 STR S3, [X19 + 0x3A8]
	0x03BC6998 LDR W8, [X19 + 0x1FC]
	0x03BC699C CMP W8, 0x1
	0x03BC69A0 B.NE 0x3BC6A08
	0x03BC69A4 LDR W0, [X25]
	0x03BC69A8 MOVZ W1, 0x4
	0x03BC69AC MOV X2, X31
	0x03BC69B0 BL 0x3BC9AAC
	0x03BC69B4 TBZ X0, 0x0, 0x3BC6A08
	0x03BC69B8 LDR V0, [X19 + 0x3E4]
	0x03BC69BC LDR V1, [X19 + 0x3E8]
	0x03BC69C0 LDR V2, [X19 + 0x3EC]
	0x03BC69C4 ADRP X8, 0xFFFFFFFFFCF24000
	0x03BC69C8 LDR V3, [X8 + 0x104]
	0x03BC69CC FADD S0, S8, S0
	0x03BC69D0 FADD S1, S9, S1
	0x03BC69D4 FADD S2, S10, S2
	0x03BC69D8 STR S0, [X19 + 0x3E4]
	0x03BC69DC STR S1, [X19 + 0x3E8]
	0x03BC69E0 STR S2, [X19 + 0x3EC]
	0x03BC69E4 FMUL S0, S0, S3
	0x03BC69E8 FMUL S1, S1, S3
	0x03BC69EC FMUL S2, S2, S3
	0x03BC69F0 MOV X0, X31
	0x03BC69F4 BL 0x3C2A574
	0x03BC69F8 STR S0, [X19 + 0x3D4]
	0x03BC69FC STR S1, [X19 + 0x3D8]
	0x03BC6A00 STR S2, [X19 + 0x3DC]
	0x03BC6A04 STR S3, [X19 + 0x3E0]
	0x03BC6A08 LDR W0, [X25]
	0x03BC6A0C MOVZ W1, 0x8
	0x03BC6A10 MOV X2, X31
	0x03BC6A14 BL 0x3BC9AAC
	0x03BC6A18 TBZ X0, 0x0, 0x3BC6A78
	0x03BC6A1C LDR V0, [X19 + 0x270]
	0x03BC6A20 LDR V1, [X19 + 0x274]
	0x03BC6A24 LDR V2, [X19 + 0x278]
	0x03BC6A28 ADRP X8, 0xFFFFFFFFFCF24000
	0x03BC6A2C LDR V3, [X8 + 0x104]
	0x03BC6A30 FADD S0, S8, S0
	0x03BC6A34 FADD S1, S9, S1
	0x03BC6A38 FADD S2, S10, S2
	0x03BC6A3C STR S0, [X19 + 0x270]
	0x03BC6A40 STR S1, [X19 + 0x274]
	0x03BC6A44 STR S2, [X19 + 0x278]
	0x03BC6A48 FMUL S0, S0, S3
	0x03BC6A4C FMUL S1, S1, S3
	0x03BC6A50 FMUL S2, S2, S3
	0x03BC6A54 MOV X0, X31
	0x03BC6A58 BL 0x3C2A574
	0x03BC6A5C STR S0, [X19 + 0x2C0]
	0x03BC6A60 STR S1, [X19 + 0x2C4]
	0x03BC6A64 STR S2, [X19 + 0x2C8]
	0x03BC6A68 STR S3, [X19 + 0x2CC]
	0x03BC6A6C LDR V0, [X19 + 0x2C]
	0x03BC6A70 ADD X8, X19, 0x2E1
	0x03BC6A74 STR V0, [X8]
	0x03BC6A78 LDRB W8, [X19 + 0x238]
	0x03BC6A7C CBZ W8, 0x3BC6CBC
	0x03BC6A80 MOV X0, X19
	0x03BC6A84 BL 0x3BC72E8
	0x03BC6A88 LDR W8, [X19 + 0x1FC]
	0x03BC6A8C MOV V8.16B, V0.16B
	0x03BC6A90 MOV V9.16B, V1.16B
	0x03BC6A94 MOV V10.16B, V2.16B
	0x03BC6A98 CBNZ W8, 0x3BC6B70
	0x03BC6A9C LDR W0, [X25]
	0x03BC6AA0 MOVZ W1, 0x2
	0x03BC6AA4 MOV X2, X31
	0x03BC6AA8 BL 0x3BC9AAC
	0x03BC6AAC TBZ X0, 0x0, 0x3BC6B00
	0x03BC6AB0 LDR V0, [X19 + 0x258]
	0x03BC6AB4 LDR V1, [X19 + 0x25C]
	0x03BC6AB8 LDR V2, [X19 + 0x260]
	0x03BC6ABC ADRP X8, 0xFFFFFFFFFCF24000
	0x03BC6AC0 LDR V3, [X8 + 0x104]
	0x03BC6AC4 FMUL S0, S8, S0
	0x03BC6AC8 FMUL S1, S9, S1
	0x03BC6ACC FMUL S2, S10, S2
	0x03BC6AD0 STR S0, [X19 + 0x258]
	0x03BC6AD4 STR S1, [X19 + 0x25C]
	0x03BC6AD8 STR S2, [X19 + 0x260]
	0x03BC6ADC FMUL S0, S0, S3
	0x03BC6AE0 FMUL S1, S1, S3
	0x03BC6AE4 FMUL S2, S2, S3
	0x03BC6AE8 MOV X0, X31
	0x03BC6AEC BL 0x3C2A574
	0x03BC6AF0 STR S0, [X19 + 0x320]
	0x03BC6AF4 STR S1, [X19 + 0x324]
	0x03BC6AF8 STR S2, [X19 + 0x328]
	0x03BC6AFC STR S3, [X19 + 0x32C]
	0x03BC6B00 LDR W8, [X19 + 0x1FC]
	0x03BC6B04 CBNZ W8, 0x3BC6B70
	0x03BC6B08 LDR W0, [X25]
	0x03BC6B0C MOVZ W1, 0x4
	0x03BC6B10 MOV X2, X31
	0x03BC6B14 BL 0x3BC9AAC
	0x03BC6B18 TBZ X0, 0x0, 0x3BC6B6C
	0x03BC6B1C LDR V0, [X19 + 0x264]
	0x03BC6B20 LDR V1, [X19 + 0x268]
	0x03BC6B24 LDR V2, [X19 + 0x26C]
	0x03BC6B28 ADRP X8, 0xFFFFFFFFFCF24000
	0x03BC6B2C LDR V3, [X8 + 0x104]
	0x03BC6B30 FMUL S0, S8, S0
	0x03BC6B34 FMUL S1, S9, S1
	0x03BC6B38 FMUL S2, S10, S2
	0x03BC6B3C STR S0, [X19 + 0x264]
	0x03BC6B40 STR S1, [X19 + 0x268]
	0x03BC6B44 STR S2, [X19 + 0x26C]
	0x03BC6B48 FMUL S0, S0, S3
	0x03BC6B4C FMUL S1, S1, S3
	0x03BC6B50 FMUL S2, S2, S3
	0x03BC6B54 MOV X0, X31
	0x03BC6B58 BL 0x3C2A574
	0x03BC6B5C STUR S0, [X26 + 0xAB]
	0x03BC6B60 STUR S1, [X26 + 0xAF]
	0x03BC6B64 STUR S2, [X26 + 0xB3]
	0x03BC6B68 STUR S3, [X26 + 0xB7]
	0x03BC6B6C LDR W8, [X19 + 0x1FC]
	0x03BC6B70 CMP W8, 0x1
	0x03BC6B74 B.NE 0x3BC6C4C
	0x03BC6B78 LDR W0, [X25]
	0x03BC6B7C MOVZ W1, 0x2
	0x03BC6B80 MOV X2, X31
	0x03BC6B84 BL 0x3BC9AAC
	0x03BC6B88 TBZ X0, 0x0, 0x3BC6BDC
	0x03BC6B8C LDR V0, [X19 + 0x3AC]
	0x03BC6B90 LDR V1, [X19 + 0x3B0]
	0x03BC6B94 LDR V2, [X19 + 0x3B4]
	0x03BC6B98 ADRP X8, 0xFFFFFFFFFCF24000
	0x03BC6B9C LDR V3, [X8 + 0x104]
	0x03BC6BA0 FMUL S0, S8, S0
	0x03BC6BA4 FMUL S1, S9, S1
	0x03BC6BA8 FMUL S2, S10, S2
	0x03BC6BAC STR S0, [X19 + 0x3AC]
	0x03BC6BB0 STR S1, [X19 + 0x3B0]
	0x03BC6BB4 STR S2, [X19 + 0x3B4]
	0x03BC6BB8 FMUL S0, S0, S3
	0x03BC6BBC FMUL S1, S1, S3
	0x03BC6BC0 FMUL S2, S2, S3
	0x03BC6BC4 MOV X0, X31
	0x03BC6BC8 BL 0x3C2A574
	0x03BC6BCC STR S0, [X19 + 0x39C]
	0x03BC6BD0 STR S1, [X19 + 0x3A0]
	0x03BC6BD4 STR S2, [X19 + 0x3A4]
	0x03BC6BD8 STR S3, [X19 + 0x3A8]
	0x03BC6BDC LDR W8, [X19 + 0x1FC]
	0x03BC6BE0 CMP W8, 0x1
	0x03BC6BE4 B.NE 0x3BC6C4C
	0x03BC6BE8 LDR W0, [X25]
	0x03BC6BEC MOVZ W1, 0x4
	0x03BC6BF0 MOV X2, X31
	0x03BC6BF4 BL 0x3BC9AAC
	0x03BC6BF8 TBZ X0, 0x0, 0x3BC6C4C
	0x03BC6BFC LDR V0, [X19 + 0x3E4]
	0x03BC6C00 LDR V1, [X19 + 0x3E8]
	0x03BC6C04 LDR V2, [X19 + 0x3EC]
	0x03BC6C08 ADRP X8, 0xFFFFFFFFFCF24000
	0x03BC6C0C LDR V3, [X8 + 0x104]
	0x03BC6C10 FMUL S0, S8, S0
	0x03BC6C14 FMUL S1, S9, S1
	0x03BC6C18 FMUL S2, S10, S2
	0x03BC6C1C STR S0, [X19 + 0x3E4]
	0x03BC6C20 STR S1, [X19 + 0x3E8]
	0x03BC6C24 STR S2, [X19 + 0x3EC]
	0x03BC6C28 FMUL S0, S0, S3
	0x03BC6C2C FMUL S1, S1, S3
	0x03BC6C30 FMUL S2, S2, S3
	0x03BC6C34 MOV X0, X31
	0x03BC6C38 BL 0x3C2A574
	0x03BC6C3C STR S0, [X19 + 0x3D4]
	0x03BC6C40 STR S1, [X19 + 0x3D8]
	0x03BC6C44 STR S2, [X19 + 0x3DC]
	0x03BC6C48 STR S3, [X19 + 0x3E0]
	0x03BC6C4C LDR W0, [X25]
	0x03BC6C50 MOVZ W1, 0x8
	0x03BC6C54 MOV X2, X31
	0x03BC6C58 BL 0x3BC9AAC
	0x03BC6C5C TBZ X0, 0x0, 0x3BC6CBC
	0x03BC6C60 LDR V0, [X19 + 0x270]
	0x03BC6C64 LDR V1, [X19 + 0x274]
	0x03BC6C68 LDR V2, [X19 + 0x278]
	0x03BC6C6C ADRP X8, 0xFFFFFFFFFCF24000
	0x03BC6C70 LDR V3, [X8 + 0x104]
	0x03BC6C74 FMUL S0, S8, S0
	0x03BC6C78 FMUL S1, S9, S1
	0x03BC6C7C FMUL S2, S10, S2
	0x03BC6C80 STR S0, [X19 + 0x270]
	0x03BC6C84 STR S1, [X19 + 0x274]
	0x03BC6C88 STR S2, [X19 + 0x278]
	0x03BC6C8C FMUL S0, S0, S3
	0x03BC6C90 FMUL S1, S1, S3
	0x03BC6C94 FMUL S2, S2, S3
	0x03BC6C98 MOV X0, X31
	0x03BC6C9C BL 0x3C2A574
	0x03BC6CA0 STR S0, [X19 + 0x2C0]
	0x03BC6CA4 STR S1, [X19 + 0x2C4]
	0x03BC6CA8 STR S2, [X19 + 0x2C8]
	0x03BC6CAC STR S3, [X19 + 0x2CC]
	0x03BC6CB0 LDR V0, [X19 + 0x2C]
	0x03BC6CB4 ADD X8, X19, 0x2E1
	0x03BC6CB8 STR V0, [X8]
	0x03BC6CBC LDP X20, X19, [X31 + 0x170]
	0x03BC6CC0 LDP X22, X21, [X31 + 0x160]
	0x03BC6CC4 LDP X24, X23, [X31 + 0x150]
	0x03BC6CC8 LDP X26, X25, [X31 + 0x140]
	0x03BC6CCC LDP X28, X27, [X31 + 0x130]
	0x03BC6CD0 LDP X29, X30, [X31 + 0x120]
	0x03BC6CD4 LDP D9, D8, [X31 + 0x110]
	0x03BC6CD8 LDP D11, D10, [X31 + 0x100]
	0x03BC6CDC LDP D13, D12, [X31 + 0xF0]
	0x03BC6CE0 LDP D15, D14, [X31 + 0xE0]
	0x03BC6CE4 ADD X31, X31, 0x180
	0x03BC6CE8 RET
	0x03BC6CEC LDRB W8, [X19 + 0x237]
	0x03BC6CF0 CBNZ W8, 0x3BC60E4
	0x03BC6CF4 LDR V3, [X31 + 0x70]
	0x03BC6CF8 LDR V4, [X31 + 0x78]
	0x03BC6CFC B 0x3BC6D10
	0x03BC6D00 LDRB W8, [X19 + 0x237]
	0x03BC6D04 CBNZ W8, 0x3BC60E4
	0x03BC6D08 LDR V3, [X31 + 0x80]
	0x03BC6D0C LDR V4, [X31 + 0x88]
	0x03BC6D10 FADD S2, S2, S1
	0x00000000 INVALID
	0x03BC6D18 FMUL S2, S2, S4
	0x03BC6D1C B 0x3BC61D4
	0x03BC6D20 LDRB W8, [X19 + 0x237]
	0x03BC6D24 CBNZ W8, 0x3BC6144
	0x03BC6D28 LDP S2, S1, [X31 + 0x58]
	0x03BC6D2C FMOV S0, W31
	0x03BC6D30 FSUB S1, S1, S2
	0x03BC6D34 B 0x3BC6148
	0x03BC6D38 LDRB W8, [X19 + 0x237]
	0x03BC6D3C CBNZ W8, 0x3BC6144
	0x03BC6D40 LDP S2, S0, [X31 + 0x58]
	0x03BC6D44 FMOV S1, W31
	0x03BC6D48 FSUB S0, S2, S0
	0x03BC6D4C B 0x3BC6148
	0x03BC6D50 LDP S0, S1, [X31 + 0xC0]
	0x03BC6D54 FSUB S8, S0, S1
	0x03BC6D58 FMOV S0, W31
	0x03BC6D5C B 0x3BC5520
	0x03BC6D60 BL 0x1C16F20
	0x03BC6D64 STP X30, X25, [X31 - 0x40]!
	0x03BC6D68 STP X24, X23, [X31 + 0x10]
	0x03BC6D6C STP X22, X21, [X31 + 0x20]
	0x03BC6D70 STP X20, X19, [X31 + 0x30]
	0x03BC6D74 ADRP X25, 0x81C000
	0x03BC6D78 ADRP X24, 0x52D000
	0x03BC6D7C LDRB W8, [X25 + 0xD88]
	0x03BC6D80 LDR X24, [X24 + 0x598]
	0x03BC6D84 MOV X19, X4
	0x03BC6D88 MOV X20, X3
	0x03BC6D8C MOV X21, X2
	0x03BC6D90 MOV X22, X1
	0x03BC6D94 MOV W23, W0
	0x03BC6D98 TBNZ X8, 0x0, 0x3BC6DB0
	0x03BC6D9C ADRP X0, 0x52D000
	0x03BC6DA0 LDR X0, [X0 + 0x598]
	0x03BC6DA4 BL 0x1C16CF4
	0x03BC6DA8 MOVZ W8, 0x1
	0x03BC6DAC STRB W8, [X25 + 0xD88]
	0x03BC6DB0 LDR X0, [X24]
	0x03BC6DB4 LDR W8, [X0 + 0xE0]
	0x03BC6DB8 CBNZ W8, 0x3BC6DC0
	0x03BC6DBC BL 0x1C16DFC
	0x03BC6DC0 MOV X0, X22
	0x03BC6DC4 MOV X1, X31
	0x03BC6DC8 MOV X2, X31
	0x03BC6DCC BL 0x3C3883C
	0x03BC6DD0 TBNZ X0, 0x0, 0x3BC70E4
	0x03BC6DD4 CMP W23, 0x2
	0x03BC6DD8 B.EQ 0x3BC6F90
	0x03BC6DDC CMP W23, 0x1
	0x03BC6DE0 B.EQ 0x3BC6EE4
	0x03BC6DE4 CBNZ W23, 0x3BC6EE4
	0x03BC6DE8 CBZ X22, 0x3BC712C
	0x03BC6DEC MOV X0, X22
	0x03BC6DF0 MOV X1, X31
	0x03BC6DF4 BL 0x3C3F49C
	0x03BC6DF8 LDR X8, [X24]
	0x03BC6DFC MOV X22, X0
	0x03BC6E00 LDR W9, [X8 + 0xE0]
	0x03BC6E04 CBNZ W9, 0x3BC6E10
	0x03BC6E08 MOV X0, X8
	0x03BC6E0C BL 0x1C16DFC
	0x03BC6E10 MOV X0, X22
	0x03BC6E14 MOV X1, X31
	0x03BC6E18 MOV X2, X31
	0x03BC6E1C BL 0x3C354F8
	0x03BC6E20 ADRP X24, 0x812000
	0x03BC6E24 LDRB W8, [X24 + 0xB70]
	0x03BC6E28 MOV W23, W0
	0x03BC6E2C CBNZ W8, 0x3BC6E44
	0x03BC6E30 ADRP X0, 0x52D000
	0x03BC6E34 LDR X0, [X0 + 0x5A0]
	0x03BC6E38 BL 0x1C16CF4
	0x03BC6E3C MOVZ W8, 0x1
	0x03BC6E40 STRB W8, [X24 + 0xB70]
	0x03BC6E44 ADRP X24, 0x52D000
	0x03BC6E48 LDR X24, [X24 + 0x5A0]
	0x03BC6E4C LDR X8, [X24]
	0x03BC6E50 LDR X8, [X8 + 0xB8]
	0x03BC6E54 LDP S0, S1, [X8 + 0x3C]
	0x03BC6E58 LDR V2, [X8 + 0x44]
	0x03BC6E5C TBZ X23, 0x0, 0x3BC707C
	0x03BC6E60 CBZ X22, 0x3BC712C
	0x03BC6E64 MOV X0, X22
	0x03BC6E68 MOV X1, X31
	0x03BC6E6C BL 0x3C40610
	0x03BC6E70 STP S0, S1, [X21]
	0x03BC6E74 STR S2, [X21 + 0x8]
	0x03BC6E78 ADRP X21, 0x812000
	0x03BC6E7C LDRB W8, [X21 + 0x786]
	0x03BC6E80 CBNZ W8, 0x3BC6E98
	0x03BC6E84 ADRP X0, 0x52D000
	0x03BC6E88 LDR X0, [X0 + 0x5A0]
	0x03BC6E8C BL 0x1C16CF4
	0x03BC6E90 MOVZ W8, 0x1
	0x03BC6E94 STRB W8, [X21 + 0x786]
	0x03BC6E98 LDR X8, [X24]
	0x03BC6E9C MOV X0, X22
	0x03BC6EA0 MOV X1, X31
	0x03BC6EA4 LDR X8, [X8 + 0xB8]
	0x03BC6EA8 LDP S0, S1, [X8 + 0x18]
	0x03BC6EAC LDR V2, [X8 + 0x20]
	0x03BC6EB0 BL 0x3C40610
	0x03BC6EB4 STP S0, S1, [X20]
	0x03BC6EB8 STR S2, [X20 + 0x8]
	0x03BC6EBC ADRP X20, 0x812000
	0x03BC6EC0 LDRB W8, [X20 + 0xA1F]
	0x03BC6EC4 CBNZ W8, 0x3BC6EDC
	0x03BC6EC8 ADRP X0, 0x52D000
	0x03BC6ECC LDR X0, [X0 + 0x5A0]
	0x03BC6ED0 BL 0x1C16CF4
	0x03BC6ED4 MOVZ W8, 0x1
	0x03BC6ED8 STRB W8, [X20 + 0xA1F]
	0x03BC6EDC LDR X8, [X24]
	0x03BC6EE0 B 0x3BC7048
	0x03BC6EE4 ADRP X22, 0x812000
	0x03BC6EE8 LDRB W8, [X22 + 0xB70]
	0x03BC6EEC CBNZ W8, 0x3BC6F04
	0x03BC6EF0 ADRP X0, 0x52D000
	0x03BC6EF4 LDR X0, [X0 + 0x5A0]
	0x03BC6EF8 BL 0x1C16CF4
	0x03BC6EFC MOVZ W8, 0x1
	0x03BC6F00 STRB W8, [X22 + 0xB70]
	0x03BC6F04 ADRP X22, 0x52D000
	0x03BC6F08 LDR X22, [X22 + 0x5A0]
	0x03BC6F0C LDR X8, [X22]
	0x03BC6F10 LDR X8, [X8 + 0xB8]
	0x03BC6F14 LDUR V0, [X8 + 0x3C]
	0x03BC6F18 LDR V1, [X8 + 0x44]
	0x03BC6F1C STR D0, [X21]
	0x03BC6F20 STR S1, [X21 + 0x8]
	0x03BC6F24 ADRP X21, 0x812000
	0x03BC6F28 LDRB W8, [X21 + 0x786]
	0x03BC6F2C CBNZ W8, 0x3BC6F44
	0x03BC6F30 ADRP X0, 0x52D000
	0x03BC6F34 LDR X0, [X0 + 0x5A0]
	0x03BC6F38 BL 0x1C16CF4
	0x03BC6F3C MOVZ W8, 0x1
	0x03BC6F40 STRB W8, [X21 + 0x786]
	0x03BC6F44 LDR X8, [X22]
	0x03BC6F48 LDR X8, [X8 + 0xB8]
	0x03BC6F4C LDR V0, [X8 + 0x18]
	0x03BC6F50 LDR V1, [X8 + 0x20]
	0x03BC6F54 STR D0, [X20]
	0x03BC6F58 STR S1, [X20 + 0x8]
	0x03BC6F5C ADRP X20, 0x812000
	0x03BC6F60 LDRB W8, [X20 + 0xA1F]
	0x03BC6F64 CBNZ W8, 0x3BC6F7C
	0x03BC6F68 ADRP X0, 0x52D000
	0x03BC6F6C LDR X0, [X0 + 0x5A0]
	0x03BC6F70 BL 0x1C16CF4
	0x03BC6F74 MOVZ W8, 0x1
	0x03BC6F78 STRB W8, [X20 + 0xA1F]
	0x03BC6F7C LDR X8, [X22]
	0x03BC6F80 LDR X8, [X8 + 0xB8]
	0x03BC6F84 LDP S0, S1, [X8 + 0x48]
	0x03BC6F88 LDR V2, [X8 + 0x50]
	0x03BC6F8C B 0x3BC7060
	0x03BC6F90 ADRP X23, 0x812000
	0x03BC6F94 LDRB W8, [X23 + 0xB70]
	0x03BC6F98 CBNZ W8, 0x3BC6FB0
	0x03BC6F9C ADRP X0, 0x52D000
	0x03BC6FA0 LDR X0, [X0 + 0x5A0]
	0x03BC6FA4 BL 0x1C16CF4
	0x03BC6FA8 MOVZ W8, 0x1
	0x03BC6FAC STRB W8, [X23 + 0xB70]
	0x03BC6FB0 CBZ X22, 0x3BC712C
	0x03BC6FB4 ADRP X23, 0x52D000
	0x03BC6FB8 LDR X23, [X23 + 0x5A0]
	0x03BC6FBC MOV X0, X22
	0x03BC6FC0 MOV X1, X31
	0x03BC6FC4 LDR X8, [X23]
	0x03BC6FC8 LDR X8, [X8 + 0xB8]
	0x03BC6FCC LDP S1, S2, [X8 + 0x40]
	0x03BC6FD0 LDR V0, [X8 + 0x3C]
	0x03BC6FD4 BL 0x3C40610
	0x03BC6FD8 STP S0, S1, [X21]
	0x03BC6FDC STR S2, [X21 + 0x8]
	0x03BC6FE0 ADRP X21, 0x812000
	0x03BC6FE4 LDRB W8, [X21 + 0x786]
	0x03BC6FE8 CBNZ W8, 0x3BC7000
	0x03BC6FEC ADRP X0, 0x52D000
	0x03BC6FF0 LDR X0, [X0 + 0x5A0]
	0x03BC6FF4 BL 0x1C16CF4
	0x03BC6FF8 MOVZ W8, 0x1
	0x03BC6FFC STRB W8, [X21 + 0x786]
	0x03BC7000 LDR X8, [X23]
	0x03BC7004 MOV X0, X22
	0x03BC7008 MOV X1, X31
	0x03BC700C LDR X8, [X8 + 0xB8]
	0x03BC7010 LDP S0, S1, [X8 + 0x18]
	0x03BC7014 LDR V2, [X8 + 0x20]
	0x03BC7018 BL 0x3C40610
	0x03BC701C STP S0, S1, [X20]
	0x03BC7020 STR S2, [X20 + 0x8]
	0x03BC7024 ADRP X20, 0x811000
	0x03BC7028 LDRB W8, [X20 + 0xA1F]
	0x03BC702C CBNZ W8, 0x3BC7044
	0x03BC7030 ADRP X0, 0x52C000
	0x03BC7034 LDR X0, [X0 + 0x5A0]
	0x03BC7038 BL 0x1C16CF4
	0x03BC703C MOVZ W8, 0x1
	0x03BC7040 STRB W8, [X20 + 0xA1F]
	0x03BC7044 LDR X8, [X23]
	0x03BC7048 LDR X8, [X8 + 0xB8]
	0x03BC704C MOV X0, X22
	0x03BC7050 MOV X1, X31
	0x03BC7054 LDP S0, S1, [X8 + 0x48]
	0x03BC7058 LDR V2, [X8 + 0x50]
	0x03BC705C BL 0x3C40610
	0x03BC7060 STP S0, S1, [X19]
	0x03BC7064 STR S2, [X19 + 0x8]
	0x03BC7068 LDP X20, X19, [X31 + 0x30]
	0x03BC706C LDP X22, X21, [X31 + 0x20]
	0x03BC7070 LDP X24, X23, [X31 + 0x10]
	0x03BC7074 LDP X30, X25, [X31], #0x40
	0x03BC7078 RET
	0x03BC707C STP S0, S1, [X21]
	0x03BC7080 STR S2, [X21 + 0x8]
	0x03BC7084 ADRP X21, 0x811000
	0x03BC7088 LDRB W8, [X21 + 0x786]
	0x03BC708C CBNZ W8, 0x3BC70A4
	0x03BC7090 ADRP X0, 0x52C000
	0x03BC7094 LDR X0, [X0 + 0x5A0]
	0x03BC7098 BL 0x1C16CF4
	0x03BC709C MOVZ W8, 0x1
	0x03BC70A0 STRB W8, [X21 + 0x786]
	0x03BC70A4 LDR X8, [X24]
	0x03BC70A8 LDR X8, [X8 + 0xB8]
	0x03BC70AC LDR V0, [X8 + 0x18]
	0x03BC70B0 LDR V1, [X8 + 0x20]
	0x03BC70B4 STR D0, [X20]
	0x03BC70B8 STR S1, [X20 + 0x8]
	0x03BC70BC ADRP X20, 0x811000
	0x03BC70C0 LDRB W8, [X20 + 0xA1F]
	0x03BC70C4 CBNZ W8, 0x3BC70DC
	0x03BC70C8 ADRP X0, 0x52C000
	0x03BC70CC LDR X0, [X0 + 0x5A0]
	0x03BC70D0 BL 0x1C16CF4
	0x03BC70D4 MOVZ W8, 0x1
	0x03BC70D8 STRB W8, [X20 + 0xA1F]
	0x03BC70DC LDR X8, [X24]
	0x03BC70E0 B 0x3BC6F80
	0x03BC70E4 ADRP X0, 0x531000
	0x03BC70E8 LDR X0, [X0 + 0x528]
	0x03BC70EC BL 0x1C16D08
	0x03BC70F0 BL 0x1C16F10
	0x03BC70F4 MOV X19, X0
	0x03BC70F8 ADRP X0, 0x596000
	0x03BC70FC LDR X0, [X0 + 0x6E0]
	0x03BC7100 BL 0x1C16D08
	0x03BC7104 MOV X1, X0
	0x03BC7108 MOV X0, X19
	0x03BC710C MOV X2, X31
	0x03BC7110 BL 0x330E100
	0x03BC7114 ADRP X0, 0x596000
	0x03BC7118 LDR X0, [X0 + 0x6E8]
	0x03BC711C BL 0x1C16D08
	0x03BC7120 MOV X1, X0
	0x03BC7124 MOV X0, X19
	0x03BC7128 BL 0x1C16DEC
	0x03BC712C BL 0x1C16F20
	0x03BC7130 STP D11, D10, [X31 - 0x50]!
	0x03BC7134 STP D9, D8, [X31 + 0x10]
	0x03BC7138 STP X30, X23, [X31 + 0x20]
	0x03BC713C STP X22, X21, [X31 + 0x30]
	0x03BC7140 STP X20, X19, [X31 + 0x40]
	0x03BC7144 ADRP X23, 0x81B000
	0x03BC7148 ADRP X22, 0x596000
	0x03BC714C LDRB W8, [X23 + 0xD89]
	0x03BC7150 LDR X22, [X22 + 0x460]
	0x03BC7154 MOV X19, X2
	0x03BC7158 MOV X21, X1
	0x03BC715C MOV W20, W0
	0x03BC7160 TBNZ X8, 0x0, 0x3BC7178
	0x03BC7164 ADRP X0, 0x596000
	0x03BC7168 LDR X0, [X0 + 0x460]
	0x03BC716C BL 0x1C16CF4
	0x03BC7170 MOVZ W8, 0x1
	0x03BC7174 STRB W8, [X23 + 0xD89]
	0x03BC7178 LDR X0, [X22]
	0x03BC717C LDUR V11, [X21 + 0x2F]
	0x03BC7180 LDUR V10, [X21 + 0x33]
	0x03BC7184 LDUR V8, [X21 + 0x37]
	0x03BC7188 LDR W8, [X0 + 0xE0]
	0x03BC718C LDUR V9, [X21 + 0x3B]
	0x03BC7190 CBNZ W8, 0x3BC7198
	0x03BC7194 BL 0x1C16DFC
	0x03BC7198 MOV W0, W20
	0x03BC719C MOV V2.16B, V8.16B
	0x03BC71A0 MOV V3.16B, V9.16B
	0x03BC71A4 MOV X1, X19
	0x03BC71A8 LDP X20, X19, [X31 + 0x40]
	0x03BC71AC LDP X22, X21, [X31 + 0x30]
	0x03BC71B0 LDP X30, X23, [X31 + 0x20]
	0x03BC71B4 LDP D9, D8, [X31 + 0x10]
	0x03BC71B8 MOV V0.16B, V11.16B
	0x03BC71BC MOV V1.16B, V10.16B
	0x03BC71C0 LDP D11, D10, [X31], #0x50
	0x03BC71C4 B 0x3BC8288
	0x03BC71C8 STP D11, D10, [X31 - 0x50]!
	0x03BC71CC STP D9, D8, [X31 + 0x10]
	0x03BC71D0 STP X30, X23, [X31 + 0x20]
	0x03BC71D4 STP X22, X21, [X31 + 0x30]
	0x03BC71D8 STP X20, X19, [X31 + 0x40]
	0x03BC71DC ADRP X23, 0x81B000
	0x03BC71E0 ADRP X22, 0x596000
	0x03BC71E4 LDRB W8, [X23 + 0xD8A]
	0x03BC71E8 LDR X22, [X22 + 0x460]
	0x03BC71EC MOV X19, X2
	0x03BC71F0 MOV X21, X1
	0x03BC71F4 MOV W20, W0
	0x03BC71F8 TBNZ X8, 0x0, 0x3BC7210
	0x03BC71FC ADRP X0, 0x596000
	0x03BC7200 LDR X0, [X0 + 0x460]
	0x03BC7204 BL 0x1C16CF4
	0x03BC7208 MOVZ W8, 0x1
	0x03BC720C STRB W8, [X23 + 0xD8A]
	0x03BC7210 LDR X0, [X22]
	0x03BC7214 LDP S11, S10, [X21 + 0xC]
	0x03BC7218 LDP S9, S8, [X21 + 0x14]
	0x03BC721C LDR W8, [X0 + 0xE0]
	0x03BC7220 CBNZ W8, 0x3BC7228
	0x03BC7224 BL 0x1C16DFC
	0x03BC7228 MOV W0, W20
	0x03BC722C MOV V2.16B, V9.16B
	0x03BC7230 MOV V3.16B, V8.16B
	0x03BC7234 MOV X1, X19
	0x03BC7238 LDP X20, X19, [X31 + 0x40]
	0x03BC723C LDP X22, X21, [X31 + 0x30]
	0x03BC7240 LDP X30, X23, [X31 + 0x20]
	0x03BC7244 LDP D9, D8, [X31 + 0x10]
	0x03BC7248 MOV V0.16B, V11.16B
	0x03BC724C MOV V1.16B, V10.16B
	0x03BC7250 LDP D11, D10, [X31], #0x50
	0x03BC7254 B 0x3BC8288
	0x03BC7258 STP D11, D10, [X31 - 0x50]!
	0x03BC725C STP D9, D8, [X31 + 0x10]
	0x03BC7260 STP X30, X23, [X31 + 0x20]
	0x03BC7264 STP X22, X21, [X31 + 0x30]
	0x03BC7268 STP X20, X19, [X31 + 0x40]
	0x03BC726C ADRP X23, 0x81B000
	0x03BC7270 ADRP X22, 0x596000
	0x03BC7274 LDRB W8, [X23 + 0xD8B]
	0x03BC7278 LDR X22, [X22 + 0x460]
	0x03BC727C MOV X19, X2
	0x03BC7280 MOV X21, X1
	0x03BC7284 MOV W20, W0
	0x03BC7288 TBNZ X8, 0x0, 0x3BC72A0
	0x03BC728C ADRP X0, 0x596000
	0x03BC7290 LDR X0, [X0 + 0x460]
	0x03BC7294 BL 0x1C16CF4
	0x03BC7298 MOVZ W8, 0x1
	0x03BC729C STRB W8, [X23 + 0xD8B]
	0x03BC72A0 LDR X0, [X22]
	0x03BC72A4 LDP S11, S10, [X21 + 0x44]
	0x03BC72A8 LDP S9, S8, [X21 + 0x4C]
	0x03BC72AC LDR W8, [X0 + 0xE0]
	0x03BC72B0 CBNZ W8, 0x3BC72B8
	0x03BC72B4 BL 0x1C16DFC
	0x03BC72B8 MOV W0, W20
	0x03BC72BC MOV V2.16B, V9.16B
	0x03BC72C0 MOV V3.16B, V8.16B
	0x03BC72C4 MOV X1, X19
	0x03BC72C8 LDP X20, X19, [X31 + 0x40]
	0x03BC72CC LDP X22, X21, [X31 + 0x30]
	0x03BC72D0 LDP X30, X23, [X31 + 0x20]
	0x03BC72D4 LDP D9, D8, [X31 + 0x10]
	0x03BC72D8 MOV V0.16B, V11.16B
	0x03BC72DC MOV V1.16B, V10.16B
	0x03BC72E0 LDP D11, D10, [X31], #0x50
	0x03BC72E4 B 0x3BC8288
	0x03BC72E8 STP X30, X19, [X31 - 0x10]!
	0x03BC72EC LDRB W9, [X0 + 0x235]
	0x03BC72F0 LDRB W8, [X0 + 0x236]
	0x03BC72F4 CBZ W9, 0x3BC7308
	0x03BC72F8 FMOV S0, W31
	0x03BC72FC FMOV S1, W31
	0x03BC7300 CBNZ W8, 0x3BC7328
	0x03BC7304 B 0x3BC7324
	0x03BC7308 CBZ W8, 0x3BC7318
	0x03BC730C FMOV S1, W31
	0x03BC7310 FMOV S0, 1
	0x03BC7314 B 0x3BC7328
	0x03BC7318 LDRB W8, [X0 + 0x237]
	0x03BC731C FMOV S0, 1
	0x03BC7320 CBZ W8, 0x3BC7344
	0x03BC7324 FMOV S1, 1
	0x03BC7328 LDRB W8, [X0 + 0x237]
	0x03BC732C FMOV S2, W31
	0x03BC7330 FMOV S3, 1
	0x03BC7334 CMP W8, 0x0
	0x03BC7338 FCSEL S2, S3, S2, EQ
	0x03BC733C LDP X30, X19, [X31], #0x10
	0x03BC7340 RET
	0x03BC7344 ADRP X19, 0x811000
	0x03BC7348 LDRB W8, [X19 + 0x783]
	0x03BC734C CBNZ W8, 0x3BC7364
	0x03BC7350 ADRP X0, 0x52C000
	0x03BC7354 LDR X0, [X0 + 0x5A0]
	0x03BC7358 BL 0x1C16CF4
	0x03BC735C MOVZ W8, 0x1
	0x03BC7360 STRB W8, [X19 + 0x783]
	0x03BC7364 ADRP X8, 0x52C000
	0x03BC7368 LDR X8, [X8 + 0x5A0]
	0x03BC736C LDR X8, [X8]
	0x03BC7370 LDR X8, [X8 + 0xB8]
	0x03BC7374 LDP S0, S1, [X8]
	0x03BC7378 LDR V2, [X8 + 0x8]
	0x03BC737C B 0x3BC733C
	0x03BC7380 STP X30, X19, [X31 - 0x10]!
	0x03BC7384 LDR W8, [X0 + 0x1FC]
	0x03BC7388 CBZ W8, 0x3BC7394
	0x03BC738C LDP X30, X19, [X31], #0x10
	0x03BC7390 RET
	0x03BC7394 LDR X8, [X0]
	0x03BC7398 MOV X19, X0
	0x03BC739C LDP X9, X1, [X8 + 0x1D8]
	0x03BC73A0 BLR X9
	0x03BC73A4 LDR W8, [X19 + 0x1FC]
	0x03BC73A8 CBZ W8, 0x3BC73B4
	0x03BC73AC ADD X1, X19, 0x2F1
	0x03BC73B0 B 0x3BC73D8
	0x03BC73B4 LDR W0, [X19 + 0x1F8]
	0x03BC73B8 MOVZ W1, 0x2
	0x03BC73BC MOV X2, X31
	0x03BC73C0 BL 0x3BC9AAC
	0x03BC73C4 ADD X1, X19, 0x2F1
	0x03BC73C8 TBZ X0, 0x0, 0x3BC73D8
	0x03BC73CC LDR X8, [X19]
	0x03BC73D0 LDP X9, X2, [X8 + 0x1E8]
	0x03BC73D4 B 0x3BC73E0
	0x03BC73D8 LDR X8, [X19]
	0x03BC73DC LDP X9, X2, [X8 + 0x1F8]
	0x03BC73E0 MOV X0, X19
	0x03BC73E4 BLR X9
	0x03BC73E8 LDR W8, [X19 + 0x1FC]
	0x03BC73EC CBZ W8, 0x3BC73F8
	0x03BC73F0 ADD X1, X19, 0x330
	0x03BC73F4 B 0x3BC741C
	0x03BC73F8 LDR W0, [X19 + 0x1F8]
	0x03BC73FC MOVZ W1, 0x4
	0x03BC7400 MOV X2, X31
	0x03BC7404 BL 0x3BC9AAC
	0x03BC7408 ADD X1, X19, 0x330
	0x03BC740C TBZ X0, 0x0, 0x3BC741C
	0x03BC7410 LDR X8, [X19]
	0x03BC7414 LDP X3, X2, [X8 + 0x1E8]
	0x03BC7418 B 0x3BC7424
	0x03BC741C LDR X8, [X19]
	0x03BC7420 LDP X3, X2, [X8 + 0x1F8]
	0x03BC7424 MOV X0, X19
	0x03BC7428 LDP X30, X19, [X31], #0x10
	0x03BC742C BR X3
	0x03BC7430 RET
	0x03BC7434 STP D9, D8, [X31 - 0x40]!
	0x03BC7438 STR X30, [X31 + 0x10]
	0x03BC743C STP X22, X21, [X31 + 0x20]
	0x03BC7440 STP X20, X19, [X31 + 0x30]
	0x03BC7444 MOV X19, X0
	0x03BC7448 LDR W0, [X0 + 0x1F8]
	0x03BC744C ANDS W31, W0, 0x6
	0x03BC7450 B.EQ 0x3BC7504
	0x03BC7454 LDRB W8, [X19 + 0x1F4]
	0x03BC7458 ADD X21, X19, 0x23C
	0x03BC745C TBZ X8, 0x1, 0x3BC74AC
	0x03BC7460 LDR W8, [X19 + 0x1FC]
	0x03BC7464 CBNZ W8, 0x3BC74AC
	0x03BC7468 MOVZ W1, 0x2
	0x03BC746C MOV X2, X31
	0x03BC7470 BL 0x3BC9AAC
	0x03BC7474 TBZ X0, 0x0, 0x3BC7480
	0x03BC7478 LDR X8, [X21]
	0x03BC747C STUR X8, [X21 + 0xB5]
	0x03BC7480 LDR W8, [X19 + 0x1FC]
	0x03BC7484 CBNZ W8, 0x3BC74AC
	0x03BC7488 LDR W0, [X19 + 0x1F8]
	0x03BC748C MOVZ W1, 0x4
	0x03BC7490 MOV X2, X31
	0x03BC7494 BL 0x3BC9AAC
	0x03BC7498 TBZ X0, 0x0, 0x3BC74A4
	0x03BC749C LDR X8, [X21]
	0x03BC74A0 STR X8, [X19 + 0x330]
	0x03BC74A4 LDR W8, [X19 + 0x1FC]
	0x03BC74A8 CBZ W8, 0x3BC7518
	0x03BC74AC LDRB W8, [X19 + 0x1F4]
	0x03BC74B0 TBZ X8, 0x2, 0x3BC7504
	0x03BC74B4 LDR W8, [X19 + 0x1FC]
	0x03BC74B8 CBNZ W8, 0x3BC7504
	0x03BC74BC LDR W0, [X19 + 0x1F8]
	0x03BC74C0 MOVZ W1, 0x2
	0x03BC74C4 MOV X2, X31
	0x03BC74C8 BL 0x3BC9AAC
	0x03BC74CC TBZ X0, 0x0, 0x3BC74D8
	0x03BC74D0 LDR X8, [X21]
	0x03BC74D4 STUR X8, [X21 + 0xC5]
	0x03BC74D8 LDR W8, [X19 + 0x1FC]
	0x03BC74DC CBNZ W8, 0x3BC7504
	0x03BC74E0 LDR W0, [X19 + 0x1F8]
	0x03BC74E4 MOVZ W1, 0x4
	0x03BC74E8 MOV X2, X31
	0x03BC74EC BL 0x3BC9AAC
	0x03BC74F0 TBZ X0, 0x0, 0x3BC74FC
	0x03BC74F4 LDR X8, [X21]
	0x03BC74F8 STR X8, [X19 + 0x340]
	0x03BC74FC LDR W8, [X19 + 0x1FC]
	0x03BC7500 CBZ W8, 0x3BC753C
	0x03BC7504 LDP X20, X19, [X31 + 0x30]
	0x03BC7508 LDP X22, X21, [X31 + 0x20]
	0x03BC750C LDR X30, [X31 + 0x10]
	0x03BC7510 LDP D9, D8, [X31], #0x40
	0x03BC7514 RET
	0x03BC7518 LDR W0, [X19 + 0x1F8]
	0x03BC751C MOVZ W1, 0x2
	0x03BC7520 MOV X2, X31
	0x03BC7524 BL 0x3BC9AAC
	0x03BC7528 LDR W8, [X19 + 0x1FC]
	0x03BC752C MOV W20, W0
	0x03BC7530 CBZ W8, 0x3BC7560
	0x03BC7534 TBZ X20, 0x0, 0x3BC74AC
	0x03BC7538 B 0x3BC7580
	0x03BC753C LDR W0, [X19 + 0x1F8]
	0x03BC7540 MOVZ W1, 0x2
	0x03BC7544 MOV X2, X31
	0x03BC7548 BL 0x3BC9AAC
	0x03BC754C LDR W8, [X19 + 0x1FC]
	0x03BC7550 MOV W20, W0
	0x03BC7554 CBZ W8, 0x3BC766C
	0x03BC7558 TBZ X20, 0x0, 0x3BC7504
	0x03BC755C B 0x3BC768C
	0x03BC7560 LDR W0, [X19 + 0x1F8]
	0x03BC7564 MOVZ W1, 0x4
	0x03BC7568 MOV X2, X31
	0x03BC756C BL 0x3BC9AAC
	0x03BC7570 AND W8, W0, 0x1
	0x03BC7574 AND W9, W20, 0x1
	0x03BC7578 CMP W9, W8
	0x03BC757C B.EQ 0x3BC74AC
	0x03BC7580 ADRP X20, 0x812000
	0x03BC7584 LDRB W8, [X20 + 0x78F]
	0x03BC7588 LDR V9, [X21 + 0x8]
	0x03BC758C CBNZ W8, 0x3BC75A4
	0x03BC7590 ADRP X0, 0x534000
	0x03BC7594 LDR X0, [X0 + 0xF08]
	0x03BC7598 BL 0x1C16CF4
	0x03BC759C MOVZ W8, 0x1
	0x03BC75A0 STRB W8, [X20 + 0x78F]
	0x03BC75A4 ADRP X22, 0x534000
	0x03BC75A8 LDR X22, [X22 + 0xF08]
	0x03BC75AC LDR X8, [X22]
	0x03BC75B0 LDR X8, [X8 + 0xB8]
	0x03BC75B4 LDR V0, [X8]
	0x03BC75B8 ADRP X8, 0xFFFFFFFFFCF22000
	0x03BC75BC LDR V8, [X8 + 0xF20]
	0x03BC75C0 FSUB V0.2S, V9.2S, V0.2S
	0x00000000 INVALID
	0x03BC75C8 FADDP S0, V0.2S
	0x03BC75CC FCMP S0, S8
	0x03BC75D0 B.PL 0x3BC75DC
	0x03BC75D4 LDRB W8, [X19 + 0x257]
	0x03BC75D8 CBZ W8, 0x3BC7778
	0x03BC75DC LDR W8, [X19 + 0x1FC]
	0x03BC75E0 CBNZ W8, 0x3BC7624
	0x03BC75E4 LDR W0, [X19 + 0x1F8]
	0x03BC75E8 MOVZ W1, 0x2
	0x03BC75EC MOV X2, X31
	0x03BC75F0 BL 0x3BC9AAC
	0x03BC75F4 TBZ X0, 0x0, 0x3BC7600
	0x03BC75F8 LDR X8, [X21 + 0x8]
	0x03BC75FC STR X8, [X19 + 0x330]
	0x03BC7600 LDR W8, [X19 + 0x1FC]
	0x03BC7604 CBNZ W8, 0x3BC7624
	0x03BC7608 LDR W0, [X19 + 0x1F8]
	0x03BC760C MOVZ W1, 0x4
	0x03BC7610 MOV X2, X31
	0x03BC7614 BL 0x3BC9AAC
	0x03BC7618 TBZ X0, 0x0, 0x3BC7624
	0x03BC761C LDR X8, [X21 + 0x8]
	0x03BC7620 STUR X8, [X21 + 0xB5]
	0x03BC7624 LDRB W8, [X20 + 0x78F]
	0x03BC7628 LDR V9, [X21 + 0x8]
	0x03BC762C CBNZ W8, 0x3BC7644
	0x03BC7630 ADRP X0, 0x534000
	0x03BC7634 LDR X0, [X0 + 0xF08]
	0x03BC7638 BL 0x1C16CF4
	0x03BC763C MOVZ W8, 0x1
	0x03BC7640 STRB W8, [X20 + 0x78F]
	0x03BC7644 LDR X8, [X22]
	0x03BC7648 LDR X8, [X8 + 0xB8]
	0x03BC764C LDR V0, [X8]
	0x03BC7650 FSUB V0.2S, V9.2S, V0.2S
	0x00000000 INVALID
	0x03BC7658 FADDP S0, V0.2S
	0x03BC765C FCMP S0, S8
	0x03BC7660 CSET W8, PL
	0x03BC7664 STRB W8, [X19 + 0x257]
	0x03BC7668 B 0x3BC74AC
	0x03BC766C LDR W0, [X19 + 0x1F8]
	0x03BC7670 MOVZ W1, 0x4
	0x03BC7674 MOV X2, X31
	0x03BC7678 BL 0x3BC9AAC
	0x03BC767C AND W8, W0, 0x1
	0x03BC7680 AND W9, W20, 0x1
	0x03BC7684 CMP W9, W8
	0x03BC7688 B.EQ 0x3BC7504
	0x03BC768C ADRP X20, 0x812000
	0x03BC7690 LDRB W8, [X20 + 0x78F]
	0x03BC7694 LDR V9, [X21 + 0x8]
	0x03BC7698 CBNZ W8, 0x3BC76B0
	0x03BC769C ADRP X0, 0x534000
	0x03BC76A0 LDR X0, [X0 + 0xF08]
	0x03BC76A4 BL 0x1C16CF4
	0x03BC76A8 MOVZ W8, 0x1
	0x03BC76AC STRB W8, [X20 + 0x78F]
	0x03BC76B0 ADRP X22, 0x534000
	0x03BC76B4 LDR X22, [X22 + 0xF08]
	0x03BC76B8 LDR X8, [X22]
	0x03BC76BC LDR X8, [X8 + 0xB8]
	0x03BC76C0 LDR V0, [X8]
	0x03BC76C4 ADRP X8, 0xFFFFFFFFFCF22000
	0x03BC76C8 LDR V8, [X8 + 0xF20]
	0x03BC76CC FSUB V0.2S, V9.2S, V0.2S
	0x00000000 INVALID
	0x03BC76D4 FADDP S0, V0.2S
	0x03BC76D8 FCMP S0, S8
	0x03BC76DC B.PL 0x3BC76E8
	0x03BC76E0 LDRB W8, [X19 + 0x257]
	0x03BC76E4 CBZ W8, 0x3BC7780
	0x03BC76E8 LDR W8, [X19 + 0x1FC]
	0x03BC76EC CBNZ W8, 0x3BC7730
	0x03BC76F0 LDR W0, [X19 + 0x1F8]
	0x03BC76F4 MOVZ W1, 0x2
	0x03BC76F8 MOV X2, X31
	0x03BC76FC BL 0x3BC9AAC
	0x03BC7700 TBZ X0, 0x0, 0x3BC770C
	0x03BC7704 LDR X8, [X21 + 0x8]
	0x03BC7708 STR X8, [X19 + 0x340]
	0x03BC770C LDR W8, [X19 + 0x1FC]
	0x03BC7710 CBNZ W8, 0x3BC7730
	0x03BC7714 LDR W0, [X19 + 0x1F8]
	0x03BC7718 MOVZ W1, 0x4
	0x03BC771C MOV X2, X31
	0x03BC7720 BL 0x3BC9AAC
	0x03BC7724 TBZ X0, 0x0, 0x3BC7730
	0x03BC7728 LDR X8, [X21 + 0x8]
	0x03BC772C STUR X8, [X21 + 0xC5]
	0x03BC7730 LDRB W8, [X20 + 0x78F]
	0x03BC7734 LDR V9, [X21 + 0x8]
	0x03BC7738 CBNZ W8, 0x3BC7750
	0x03BC773C ADRP X0, 0x534000
	0x03BC7740 LDR X0, [X0 + 0xF08]
	0x03BC7744 BL 0x1C16CF4
	0x03BC7748 MOVZ W8, 0x1
	0x03BC774C STRB W8, [X20 + 0x78F]
	0x03BC7750 LDR X8, [X22]
	0x03BC7754 LDR X8, [X8 + 0xB8]
	0x03BC7758 LDR V0, [X8]
	0x03BC775C FSUB V0.2S, V9.2S, V0.2S
	0x00000000 INVALID
	0x03BC7764 FADDP S0, V0.2S
	0x03BC7768 FCMP S0, S8
	0x03BC776C CSET W8, PL
	0x03BC7770 STRB W8, [X19 + 0x257]
	0x03BC7774 B 0x3BC7504
	0x03BC7778 STRB W31, [X19 + 0x257]
	0x03BC777C B 0x3BC74AC
	0x03BC7780 STRB W31, [X19 + 0x257]
	0x03BC7784 B 0x3BC7504
	0x03BC7788 SUB X31, X31, 0x80
	0x03BC778C STR D8, [X31 + 0x50]
	0x03BC7790 STP X30, X21, [X31 + 0x60]
	0x03BC7794 STP X20, X19, [X31 + 0x70]
	0x03BC7798 MRS X21, 0xC000
	0x03BC779C LDR X8, [X21 + 0x28]
	0x03BC77A0 MOV X19, X1
	0x03BC77A4 MOV X20, X0
	0x03BC77A8 FMOV S8, W31
	0x03BC77AC STR X8, [X31 + 0x48]
	0x03BC77B0 LDRB W8, [X0 + 0x24C]
	0x03BC77B4 FMOV S0, W31
	0x03BC77B8 CBZ W8, 0x3BC77C0
	0x03BC77BC LDR V0, [X20 + 0x1C8]
	0x03BC77C0 STR S0, [X19 + 0xC]
	0x03BC77C4 LDRB W2, [X20 + 0x24C]
	0x03BC77C8 ADD X8, X31, 0x8
	0x03BC77CC MOVZ W1, 0x4
	0x03BC77D0 MOV X0, X19
	0x03BC77D4 MOV X3, X31
	0x03BC77D8 BL 0x3BCA31C
	0x03BC77DC LDRB W8, [X20 + 0x24D]
	0x03BC77E0 CBZ W8, 0x3BC77E8
	0x03BC77E4 LDR V8, [X20 + 0x1CC]
	0x03BC77E8 STR S8, [X19 + 0x8]
	0x03BC77EC LDRB W2, [X20 + 0x24D]
	0x03BC77F0 ADD X8, X31, 0x8
	0x03BC77F4 MOVZ W1, 0x5
	0x03BC77F8 MOV X0, X19
	0x03BC77FC MOV X3, X31
	0x03BC7800 BL 0x3BCA31C
	0x03BC7804 LDRB W2, [X20 + 0x24E]
	0x03BC7808 ADD X8, X31, 0x8
	0x03BC780C MOV X0, X19
	0x03BC7810 MOV W1, W31
	0x03BC7814 MOV X3, X31
	0x03BC7818 BL 0x3BCA31C
	0x03BC781C LDRB W2, [X20 + 0x24F]
	0x03BC7820 ADD X8, X31, 0x8
	0x03BC7824 MOVZ W1, 0x2
	0x03BC7828 MOV X0, X19
	0x03BC782C MOV X3, X31
	0x03BC7830 BL 0x3BCA31C
	0x03BC7834 LDRB W2, [X20 + 0x250]
	0x03BC7838 ADD X8, X31, 0x8
	0x03BC783C MOVZ W1, 0x6
	0x03BC7840 MOV X0, X19
	0x03BC7844 MOV X3, X31
	0x03BC7848 BL 0x3BCA31C
	0x03BC784C LDRB W2, [X20 + 0x251]
	0x03BC7850 ADD X8, X31, 0x8
	0x03BC7854 MOVZ W1, 0x7
	0x03BC7858 MOV X0, X19
	0x03BC785C MOV X3, X31
	0x03BC7860 BL 0x3BCA31C
	0x03BC7864 LDRB W2, [X20 + 0x252]
	0x03BC7868 ADD X8, X31, 0x8
	0x03BC786C MOVZ W1, 0x9
	0x03BC7870 MOV X0, X19
	0x03BC7874 MOV X3, X31
	0x03BC7878 BL 0x3BCA31C
	0x03BC787C LDRB W2, [X20 + 0x253]
	0x03BC7880 ADD X8, X31, 0x8
	0x03BC7884 MOVZ W1, 0x8
	0x03BC7888 MOV X0, X19
	0x03BC788C MOV X3, X31
	0x03BC7890 BL 0x3BCA31C
	0x03BC7894 LDRB W2, [X20 + 0x254]
	0x03BC7898 ADD X8, X31, 0x8
	0x03BC789C MOVZ W1, 0xA
	0x03BC78A0 MOV X0, X19
	0x03BC78A4 MOV X3, X31
	0x03BC78A8 BL 0x3BCA31C
	0x03BC78AC LDRB W2, [X20 + 0x255]
	0x03BC78B0 ADD X8, X31, 0x8
	0x03BC78B4 MOVZ W1, 0x1
	0x03BC78B8 MOV X0, X19
	0x03BC78BC MOV X3, X31
	0x03BC78C0 BL 0x3BCA31C
	0x03BC78C4 LDRB W2, [X20 + 0x256]
	0x03BC78C8 ADD X8, X31, 0x8
	0x03BC78CC MOVZ W1, 0x3
	0x03BC78D0 MOV X0, X19
	0x03BC78D4 MOV X3, X31
	0x03BC78D8 BL 0x3BCA31C
	0x03BC78DC LDR X8, [X21 + 0x28]
	0x03BC78E0 LDR X9, [X31 + 0x48]
	0x03BC78E4 CMP X8, X9
	0x03BC78E8 B.NE 0x3BC7900
	0x03BC78EC LDP X20, X19, [X31 + 0x70]
	0x03BC78F0 LDP X30, X21, [X31 + 0x60]
	0x03BC78F4 LDR V8, [X31 + 0x50]
	0x03BC78F8 ADD X31, X31, 0x80
	0x03BC78FC RET
	0x03BC7900 BL 0x3EB1B20
	0x03BC7904 STR X30, [X31 - 0x20]!
	0x03BC7908 STP X20, X19, [X31 + 0x10]
	0x03BC790C MOV X19, X1
	0x03BC7910 MOV X20, X0
	0x03BC7914 MOVZ W1, 0x4
	0x03BC7918 MOV X0, X19
	0x03BC791C MOV X2, X31
	0x03BC7920 BL 0x3BCA358
	0x03BC7924 TBZ X0, 0x0, 0x3BC7930
	0x03BC7928 LDR V0, [X20 + 0x1C8]
	0x03BC792C STR S0, [X19 + 0xC]
	0x03BC7930 MOVZ W1, 0x5
	0x03BC7934 MOV X0, X19
	0x03BC7938 MOV X2, X31
	0x03BC793C BL 0x3BCA358
	0x03BC7940 TBZ X0, 0x0, 0x3BC794C
	0x03BC7944 LDR V0, [X20 + 0x1CC]
	0x03BC7948 STR S0, [X19 + 0x8]
	0x03BC794C LDP X20, X19, [X31 + 0x10]
	0x03BC7950 LDR X30, [X31], #0x20
	0x03BC7954 RET
	0x03BC7958 SUB X31, X31, 0xC0
	0x03BC795C STR X30, [X31 + 0x90]
	0x03BC7960 STP X22, X21, [X31 + 0xA0]
	0x03BC7964 STP X20, X19, [X31 + 0xB0]
	0x03BC7968 ADRP X20, 0x81B000
	0x03BC796C LDRB W8, [X20 + 0xD83]
	0x03BC7970 MOV X19, X0
	0x03BC7974 TBNZ X8, 0x0, 0x3BC79C8
	0x03BC7978 ADRP X0, 0x52C000
	0x03BC797C LDR X0, [X0 + 0xA28]
	0x03BC7980 BL 0x1C16CF4
	0x03BC7984 ADRP X0, 0x554000
	0x03BC7988 LDR X0, [X0 + 0x270]
	0x03BC798C BL 0x1C16CF4
	0x03BC7990 ADRP X0, 0x596000
	0x03BC7994 LDR X0, [X0 + 0x6F0]
	0x03BC7998 BL 0x1C16CF4
	0x03BC799C ADRP X0, 0x596000
	0x03BC79A0 LDR X0, [X0 + 0x6C0]
	0x03BC79A4 BL 0x1C16CF4
	0x03BC79A8 ADRP X0, 0x596000
	0x03BC79AC LDR X0, [X0 + 0x6F8]
	0x03BC79B0 BL 0x1C16CF4
	0x03BC79B4 ADRP X0, 0x596000
	0x03BC79B8 LDR X0, [X0 + 0x440]
	0x03BC79BC BL 0x1C16CF4
	0x03BC79C0 MOVZ W8, 0x1
	0x03BC79C4 STRB W8, [X20 + 0xD83]
	0x03BC79C8 ADRP X22, 0x554000
	0x03BC79CC LDR X20, [X19 + 0x370]
	0x03BC79D0 LDR X22, [X22 + 0x270]
	0x03BC79D4 CBZ X20, 0x3BC79F8
	0x03BC79D8 LDR X0, [X22]
	0x03BC79DC LDR W8, [X0 + 0xE0]
	0x03BC79E0 CBNZ W8, 0x3BC79E8
	0x03BC79E4 BL 0x1C16DFC
	0x03BC79E8 MOV X0, X20
	0x03BC79EC MOV X1, X31
	0x03BC79F0 BL 0x376E6E0
	0x03BC79F4 B 0x3BC7B00
	0x03BC79F8 STP X31, X31, [X31 + 0x78]
	0x03BC79FC ADRP X8, 0x596000
	0x03BC7A00 ADRP X9, 0x596000
	0x03BC7A04 LDR X8, [X8 + 0x440]
	0x03BC7A08 LDR X9, [X9 + 0x6F0]
	0x03BC7A0C STR X31, [X31 + 0x88]
	0x03BC7A10 STP X31, X31, [X31 + 0x68]
	0x03BC7A14 LDR X21, [X8]
	0x03BC7A18 LDR X0, [X9]
	0x03BC7A1C BL 0x1C16F10
	0x03BC7A20 MOV X1, X31
	0x03BC7A24 MOV X20, X0
	0x03BC7A28 BL 0x37DE650
	0x03BC7A2C CBZ X20, 0x3BC7B2C
	0x03BC7A30 MOVZ W8, 0x21
	0x03BC7A34 MOV X0, X20
	0x03BC7A38 MOV X1, X31
	0x03BC7A3C STR W8, [X20 + 0x28]
	0x03BC7A40 BL 0x37DE648
	0x03BC7A44 LDR X9, [X31 + 0x88]
	0x03BC7A48 LDUR V0, [X31 + 0x78]
	0x03BC7A4C LDUR V1, [X31 + 0x68]
	0x03BC7A50 LDR X8, [X22]
	0x03BC7A54 STR X9, [X31 + 0x60]
	0x03BC7A58 MOV X20, X0
	0x03BC7A5C STP V1, V0, [X31 + 0x40]
	0x03BC7A60 LDR W9, [X8 + 0xE0]
	0x03BC7A64 CBNZ W9, 0x3BC7A70
	0x03BC7A68 MOV X0, X8
	0x03BC7A6C BL 0x1C16DFC
	0x03BC7A70 LDP V1, V0, [X31 + 0x40]
	0x03BC7A74 LDR X8, [X31 + 0x60]
	0x03BC7A78 ADD X0, X31, 0x0
	0x03BC7A7C MOV X1, X31
	0x03BC7A80 STR V0, [X31]
	0x03BC7A84 STP X8, X21, [X31 + 0x10]
	0x03BC7A88 STR V1, [X31 + 0x2]
	0x03BC7A8C STR X20, [X31 + 0x30]
	0x03BC7A90 BL 0x376E5CC
	0x03BC7A94 CBZ X0, 0x3BC7ACC
	0x03BC7A98 ADRP X8, 0x596000
	0x03BC7A9C LDR X8, [X8 + 0x6C0]
	0x03BC7AA0 LDR X9, [X0]
	0x03BC7AA4 LDR X8, [X8]
	0x03BC7AA8 LDRB W11, [X9 + 0x130]
	0x03BC7AAC LDRB W10, [X8 + 0x130]
	0x03BC7AB0 CMP W11, W10
	0x03BC7AB4 B.CC 0x3BC7ACC
	0x03BC7AB8 LDR X9, [X9 + 0xC8]
	0x03BC7ABC ADD X9, X9, X10, 0x3, LSL
	0x03BC7AC0 LDUR X9, [X9 - 0x8]
	0x03BC7AC4 CMP X9, X8
	0x03BC7AC8 B.EQ 0x3BC7B24
	0x03BC7ACC STR X31, [X19 + 0x370]
	0x03BC7AD0 ADRP X8, 0x52C000
	0x03BC7AD4 LDR X8, [X8 + 0xA28]
	0x03BC7AD8 LDR X0, [X8]
	0x03BC7ADC LDR W8, [X0 + 0xE0]
	0x03BC7AE0 CBNZ W8, 0x3BC7AE8
	0x03BC7AE4 BL 0x1C16DFC
	0x03BC7AE8 ADRP X8, 0x596000
	0x03BC7AEC LDR X8, [X8 + 0x6F8]
	0x03BC7AF0 MOV X1, X19
	0x03BC7AF4 MOV X2, X31
	0x03BC7AF8 LDR X0, [X8]
	0x03BC7AFC BL 0x3C065A4
	0x03BC7B00 LDR W8, [X19 + 0x1FC]
	0x03BC7B04 CBNZ W8, 0x3BC7B10
	0x03BC7B08 MOV X0, X19
	0x03BC7B0C BL 0x3BC7B30
	0x03BC7B10 LDP X20, X19, [X31 + 0xB0]
	0x03BC7B14 LDP X22, X21, [X31 + 0xA0]
	0x03BC7B18 LDR X30, [X31 + 0x90]
	0x03BC7B1C ADD X31, X31, 0xC0
	0x03BC7B20 RET
	0x03BC7B24 STR X0, [X19 + 0x370]
	0x03BC7B28 B 0x3BC7B00
	0x03BC7B2C BL 0x1C16F20
	0x03BC7B30 SUB X31, X31, 0x140
	0x03BC7B34 STP X29, X30, [X31 + 0xF0]
	0x03BC7B38 STP X26, X25, [X31 + 0x100]
	0x03BC7B3C STP X24, X23, [X31 + 0x110]
	0x03BC7B40 STP X22, X21, [X31 + 0x120]
	0x03BC7B44 STP X20, X19, [X31 + 0x130]
	0x03BC7B48 ADRP X20, 0x81B000
	0x03BC7B4C LDRB W8, [X20 + 0xD84]
	0x03BC7B50 MOV X19, X0
	0x03BC7B54 TBNZ X8, 0x0, 0x3BC7BCC
	0x03BC7B58 ADRP X0, 0x57F000
	0x03BC7B5C LDR X0, [X0 + 0xA68]
	0x03BC7B60 BL 0x1C16CF4
	0x03BC7B64 ADRP X0, 0x52C000
	0x03BC7B68 LDR X0, [X0 + 0xA28]
	0x03BC7B6C BL 0x1C16CF4
	0x03BC7B70 ADRP X0, 0x554000
	0x03BC7B74 LDR X0, [X0 + 0x270]
	0x03BC7B78 BL 0x1C16CF4
	0x03BC7B7C ADRP X0, 0x557000
	0x03BC7B80 LDR X0, [X0 + 0x510]
	0x03BC7B84 BL 0x1C16CF4
	0x03BC7B88 ADRP X0, 0x596000
	0x03BC7B8C LDR X0, [X0 + 0x6F0]
	0x03BC7B90 BL 0x1C16CF4
	0x03BC7B94 ADRP X0, 0x596000
	0x03BC7B98 LDR X0, [X0 + 0x700]
	0x03BC7B9C BL 0x1C16CF4
	0x03BC7BA0 ADRP X0, 0x596000
	0x03BC7BA4 LDR X0, [X0 + 0x708]
	0x03BC7BA8 BL 0x1C16CF4
	0x03BC7BAC ADRP X0, 0x596000
	0x03BC7BB0 LDR X0, [X0 + 0x710]
	0x03BC7BB4 BL 0x1C16CF4
	0x03BC7BB8 ADRP X0, 0x596000
	0x03BC7BBC LDR X0, [X0 + 0x448]
	0x03BC7BC0 BL 0x1C16CF4
	0x03BC7BC4 MOVZ W8, 0x1
	0x03BC7BC8 STRB W8, [X20 + 0xD84]
	0x03BC7BCC ADRP X23, 0x554000
	0x03BC7BD0 LDR X20, [X19 + 0x378]
	0x03BC7BD4 LDR X23, [X23 + 0x270]
	0x03BC7BD8 ADD X24, X31, 0xC8
	0x03BC7BDC CBZ X20, 0x3BC7C00
	0x03BC7BE0 LDR X0, [X23]
	0x03BC7BE4 LDR W8, [X0 + 0xE0]
	0x03BC7BE8 CBNZ W8, 0x3BC7BF0
	0x03BC7BEC BL 0x1C16DFC
	0x03BC7BF0 MOV X0, X20
	0x03BC7BF4 MOV X1, X31
	0x03BC7BF8 BL 0x376E6E0
	0x03BC7BFC B 0x3BC7E08
	0x03BC7C00 STP X31, X31, [X31 + 0xD8]
	0x03BC7C04 ADRP X21, 0x596000
	0x03BC7C08 ADRP X8, 0x596000
	0x03BC7C0C LDR X21, [X21 + 0x448]
	0x03BC7C10 LDR X8, [X8 + 0x6F0]
	0x03BC7C14 STR X31, [X31 + 0xE8]
	0x03BC7C18 STP X31, X31, [X31 + 0xC8]
	0x03BC7C1C LDR X26, [X21]
	0x03BC7C20 LDR X0, [X8]
	0x03BC7C24 BL 0x1C16F10
	0x03BC7C28 MOV X1, X31
	0x03BC7C2C MOV X20, X0
	0x03BC7C30 BL 0x37DE650
	0x03BC7C34 ADRP X22, 0x57F000
	0x03BC7C38 LDR X22, [X22 + 0xA68]
	0x03BC7C3C LDR X0, [X22]
	0x03BC7C40 LDR W8, [X0 + 0xE0]
	0x03BC7C44 CBNZ W8, 0x3BC7C50
	0x03BC7C48 BL 0x1C16DFC
	0x03BC7C4C LDR X0, [X22]
	0x03BC7C50 LDR X8, [X0 + 0xB8]
	0x03BC7C54 ADRP X25, 0x557000
	0x03BC7C58 ADD X1, X31, 0xB0
	0x03BC7C5C LDR V0, [X8 + 0x18]
	0x03BC7C60 LDR X25, [X25 + 0x510]
	0x03BC7C64 STR V0, [X31 + 0xB]
	0x03BC7C68 LDR X0, [X25]
	0x03BC7C6C BL 0x1C16E04
	0x03BC7C70 ADRP X8, 0x596000
	0x03BC7C74 LDR X8, [X8 + 0x710]
	0x03BC7C78 LDR X1, [X21]
	0x03BC7C7C MOV X2, X0
	0x03BC7C80 MOV X3, X31
	0x03BC7C84 LDR X8, [X8]
	0x03BC7C88 MOV X0, X8
	0x03BC7C8C BL 0x3227BD4
	0x03BC7C90 CBZ X20, 0x3BC8058
	0x03BC7C94 STR X0, [X20 + 0x10]
	0x03BC7C98 MOVZ W8, 0x164
	0x03BC7C9C MOV X0, X20
	0x03BC7CA0 MOV X1, X31
	0x03BC7CA4 STR W8, [X20 + 0x28]
	0x03BC7CA8 BL 0x37DE648
	0x03BC7CAC LDR X9, [X31 + 0xE8]
	0x03BC7CB0 LDP V1, V0, [X24]
	0x03BC7CB4 LDR X8, [X23]
	0x03BC7CB8 MOV X20, X0
	0x03BC7CBC STR X9, [X31 + 0xA0]
	0x03BC7CC0 STP V1, V0, [X31 + 0x80]
	0x03BC7CC4 LDR W9, [X8 + 0xE0]
	0x03BC7CC8 CBNZ W9, 0x3BC7CD4
	0x03BC7CCC MOV X0, X8
	0x03BC7CD0 BL 0x1C16DFC
	0x03BC7CD4 LDP V1, V0, [X31 + 0x80]
	0x03BC7CD8 LDR X8, [X31 + 0xA0]
	0x03BC7CDC ADD X0, X31, 0x40
	0x03BC7CE0 MOV X1, X31
	0x03BC7CE4 STR V0, [X31 + 0x4]
	0x03BC7CE8 STP X8, X26, [X31 + 0x50]
	0x03BC7CEC STR V1, [X31 + 0x6]
	0x03BC7CF0 STR X20, [X31 + 0x70]
	0x03BC7CF4 BL 0x376E5CC
	0x03BC7CF8 CBZ X0, 0x3BC7D24
	0x03BC7CFC ADRP X8, 0x596000
	0x03BC7D00 LDR X8, [X8 + 0x700]
	0x03BC7D04 LDR X9, [X0]
	0x03BC7D08 LDR X8, [X8]
	0x03BC7D0C LDRB W11, [X9 + 0x130]
	0x03BC7D10 LDRB W10, [X8 + 0x130]
	0x03BC7D14 CMP W11, W10
	0x03BC7D18 B.CS 0x3BC7D30
	0x03BC7D1C MOV X20, X31
	0x03BC7D20 B 0x3BC7D44
	0x03BC7D24 MOV X20, X31
	0x03BC7D28 STR X31, [X19 + 0x378]
	0x03BC7D2C B 0x3BC7D48
	0x03BC7D30 LDR X9, [X9 + 0xC8]
	0x03BC7D34 ADD X9, X9, X10, 0x3, LSL
	0x03BC7D38 LDUR X9, [X9 - 0x8]
	0x03BC7D3C CMP X9, X8
	0x03BC7D40 CSEL X20, X0, X31, EQ
	0x03BC7D44 STR X20, [X19 + 0x378]
	0x03BC7D48 LDR X0, [X22]
	0x03BC7D4C LDR W8, [X0 + 0xE0]
	0x03BC7D50 CBZ X20, 0x3BC7D94
	0x03BC7D54 CBNZ W8, 0x3BC7D60
	0x03BC7D58 BL 0x1C16DFC
	0x03BC7D5C LDR X0, [X22]
	0x03BC7D60 LDR X8, [X23]

ISIL:
	001 Subtract X31, X31, 384
	002 Move [X31+224], D15
	003 Move [X31+232], D14
	004 Move [X31+240], D13
	005 Move [X31+248], D12
	006 Move [X31+256], D11
	007 Move [X31+264], D10
	008 Move [X31+272], D9
	009 Move [X31+280], D8
	010 Move [X31+288], X29
	011 Move [X31+296], X30
	012 Move [X31+304], X28
	013 Move [X31+312], X27
	014 Move [X31+320], X26
	015 Move [X31+328], X25
	016 Move [X31+336], X24
	017 Move [X31+344], X23
	018 Move [X31+352], X22
	019 Move [X31+360], X21
	020 Move [X31+368], X20
	021 Move [X31+376], X19
	022 Move X20, 0x81E000
	023 Move W8, [X20+3458]
	024 Move X19, X0
	025 Add X26, X0, 692
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {41}
	030 Move X0, 0x536000
	031 Move X0, [X0+1208]
	032 Call 0x1C17CF4
	033 Move X0, 0x52F000
	034 Move X0, [X0+1432]
	035 Call 0x1C17CF4
	036 Move X0, 0x599000
	037 Move X0, [X0+1120]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X20+3458], W8
	041 Move [X31+208], X31
	042 Move [X31+216], X31
	043 Move [X31+200], W31
	044 Move [X31+192], X31
	045 Move [X31+184], W31
	046 Move [X31+176], X31
	047 Move [X31+168], W31
	048 Move [X31+160], X31
	049 Move [X31+152], W31
	050 Move [X31+144], X31
	051 Move [X31+136], W31
	052 Move [X31+128], X31
	053 Move [X31+120], W31
	054 Move [X31+112], X31
	055 Move [X31+104], W31
	056 Move [X31+88], X31
	057 Move [X31+96], X31
	058 Move [X31+84], W31
	059 Move W8, [X19+472]
	060 Move W9, [X19+480]
	061 Move W10, [X19+464]
	062 Move W11, [X19+476]
	063 Move [X19+787], W8
	064 Move [X19+850], W9
	065 Move [X19+724], W10
	066 Move [X26+91], W11
	067 Move W8, [X19+484]
	068 Move [X26+154], W8
	069 Move W8, [X19+468]
	070 Move W9, [X19+504]
	071 Move [X19+720], W8
	072 Compare W9, 0
	073 JumpIfEqual {2063}
	074 Move X0, X19
	075 Call XRDeviceSimulator.FindCameraTransform, X0
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {2063}
	080 Move X0, [X19+376]
	081 Compare X0, 0
	082 JumpIfEqual {2116}
	083 Move X1, X31
	084 Call Transform.get_parent, X0
	085 Move X8, 0x52E000
	086 Move X8, [X8+1432]
	087 Move X20, X0
	088 Move X8, [X8]
	089 Move W9, [X8+224]
	090 Compare W9, 0
	091 JumpIfNotEqual {94}
	092 Move X0, X8
	093 Call 0x1C17DFC
	094 Move X0, X20
	095 Move X1, X31
	096 Move X2, X31
	097 Call Object.op_Inequality, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {111}
	102 Compare X20, 0
	103 JumpIfEqual {2116}
	104 Move X0, X20
	105 Move X1, X31
	106 Call Transform.get_rotation, X0
	107 Move V12, V0
	108 Move V14, V1
	109 Move V15, V2
	110 Move V13, V3
	111 Move X20, 0x813000
	112 Move W8, [X20+1939]
	113 Compare W8, 0
	114 JumpIfNotEqual {120}
	115 Move X0, 0x52F000
	116 Move X0, [X0+1448]
	117 Call 0x1C17CF4
	118 Move W8, 1
	119 Move [X20+1939], W8
	120 Move X8, 0x52F000
	121 Move X8, [X8+1448]
	122 Move X8, [X8]
	123 Move X8, [X8+184]
	124 Move S12, [X8]
	125 Move S14, [X8+4]
	126 Move S15, [X8+8]
	127 Move S13, [X8+12]
	128 Move V0, V12
	129 Move V1, V14
	130 Move V2, V15
	131 Move V3, V13
	132 Move X0, X31
	133 Add X25, X19, 504
	134 Call Quaternion.Inverse, X0
	135 Move [X31+208], S0
	136 Move [X31+216], S1
	137 Move [X31+216], S2
	138 Move [X31+224], S3
	139 Move W8, [X25]
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X0, X31
	142 Move V8, V0
	143 Move V9, V1
	144 Move V10, V2
	145 Move V11, V3
	146 Call Time.get_time
	147 Move S1, 1
	148 NotImplemented "Instruction FCMP not yet implemented."
	149 Move V1, [X19+536]
	150 Move V0, [X19+392]
	151 Move X0, X31
	152 Move [X31+56], S10
	153 Move [X31+64], S9
	154 Move [X31+64], S8
	155 Move [X31+32], S0
	156 Move [X31+40], S1
	157 Move V0, [X19+404]
	158 Move [X31+40], S0
	159 Call Time.get_deltaTime
	160 Move V2, [X19+540]
	161 Move V1, [X19+396]
	162 Move X0, X31
	163 Move [X31+52], S0
	164 Move [X31+20], S1
	165 Move [X31+28], S2
	166 Move V1, [X19+404]
	167 Move [X31+28], S1
	168 Call Time.get_deltaTime
	169 Move V1, [X19+400]
	170 Move V2, [X19+544]
	171 Move X0, X31
	172 Move [X31+48], S0
	173 Move [X31+8], S1
	174 Move V1, [X19+404]
	175 Move [X31+12], S1
	176 Move [X31+20], S2
	177 Call Time.get_deltaTime
	178 Move X0, [X19+376]
	179 Move [X31+44], S0
	180 Compare X0, 0
	181 JumpIfEqual {2116}
	182 Move X1, X31
	183 Call Transform.get_forward, X0
	184 Move X28, 0x813000
	185 Move W8, [X28+1926]
	186 Move V8, V0
	187 Move V9, V1
	188 Move V10, V2
	189 Compare W8, 0
	190 JumpIfNotEqual {196}
	191 Move X0, 0x52E000
	192 Move X0, [X0+1440]
	193 Call 0x1C17CF4
	194 Move W8, 1
	195 Move [X28+1926], W8
	196 Move X20, 0x52E000
	197 Move X20, [X20+1440]
	198 Move V0, V12
	199 Move V1, V14
	200 Move V2, V15
	201 Move X8, [X20]
	202 Move V3, V13
	203 Move X0, X31
	204 Move X8, [X8+184]
	205 Move S4, [X8+24]
	206 Move S5, [X8+28]
	207 Move V6, [X8+32]
	208 Call Quaternion.op_Multiply, X0, X1
	209 Move X21, 0x814000
	210 Move V13, V0
	211 Move V15, V1
	212 Multiply S0, S8, S0
	213 Multiply S1, S9, S1
	214 Move W8, [X21+1450]
	215 Add S0, S0, S1
	216 Multiply S1, S10, S2
	217 Add S0, S1, S0
	218 Move V14, V2
	219 NotImplemented "Instruction FABS not yet implemented."
	220 Move V16, V8
	221 Move V6, V9
	222 Move V2, V10
	223 Compare W8, 0
	224 JumpIfNotEqual {236}
	225 Move X0, 0x535000
	226 Move X0, [X0+1208]
	227 Move V8, V16
	228 Move V9, V6
	229 Move V10, V2
	230 Call 0x1C17CF4
	231 Move V2, V10
	232 Move V6, V9
	233 Move V16, V8
	234 Move W8, 1
	235 Move [X21+1450], W8
	236 Move X21, 0x535000
	237 Move X21, [X21+1208]
	238 Move X9, -51228672
	239 Move V1, [X9+576]
	240 Move S0, 1
	241 Move X8, [X21]
	242 Move S3, 8
	243 NotImplemented "Instruction FMAXNM not yet implemented."
	244 Multiply S1, S4, S1
	245 Move X8, [X8+184]
	246 NotImplemented "Instruction FABD not yet implemented."
	247 Move [X31], S14
	248 Move [X31+8], S13
	249 Move V7, [X8]
	250 Multiply S3, S7, S3
	251 NotImplemented "Instruction FCMP not yet implemented."
	252 NotImplemented "Instruction FCSEL not yet implemented."
	253 NotImplemented "Instruction FCMP not yet implemented."
	254 Move X0, [X19+376]
	255 Move S9, [X31+60]
	256 Move S8, [X31+64]
	257 Move V10, [X31+56]
	258 Compare X0, 0
	259 JumpIfEqual {2116}
	260 Move X1, X31
	261 Call Transform.get_up, X0
	262 NotImplemented "Instruction FNEG not yet implemented."
	263 NotImplemented "Instruction FNEG not yet implemented."
	264 NotImplemented "Instruction FNEG not yet implemented."
	265 Move S9, [X31+60]
	266 Move S8, [X31+64]
	267 Move V10, [X31+56]
	268 Move S1, [X31+32]
	269 Move S0, [X31+36]
	270 Move V4, [X31+8]
	271 Move X22, 0x813000
	272 Move W8, [X22+3641]
	273 Multiply S0, S0, S1
	274 Move S3, [X31+20]
	275 Move S1, [X31+24]
	276 Multiply S1, S1, S3
	277 Move V3, [X31+16]
	278 Multiply S3, S3, S4
	279 Move V4, [X31+40]
	280 Multiply S14, S0, S4
	281 Move V0, [X31+28]
	282 Multiply S12, S1, S0
	283 Move V0, [X31+12]
	284 Multiply S13, S3, S0
	285 Compare W8, 0
	286 JumpIfNotEqual {301}
	287 Move X0, 0x535000
	288 Move X0, [X0+1208]
	289 Move V8, V16
	290 Move V9, V6
	291 Move V10, V2
	292 Call 0x1C17CF4
	293 Move V2, V10
	294 Move V6, V9
	295 Move S10, [X31+56]
	296 Move S9, [X31+60]
	297 Move V16, V8
	298 Move V8, [X31+64]
	299 Move W8, 1
	300 Move [X22+3641], W8
	301 Move V0, [X31+52]
	302 Move X8, [X21]
	303 Move S5, [X31]
	304 Move S3, [X31+4]
	305 Multiply S1, S15, S15
	306 Multiply S14, S14, S0
	307 Move V0, [X31+48]
	308 Move X8, [X8+184]
	309 Multiply S12, S12, S0
	310 Multiply S0, S3, S3
	311 Add S0, S0, S1
	312 Multiply S1, S5, S5
	313 Move V4, [X8]
	314 Add S0, S1, S0
	315 Move V1, [X31+44]
	316 NotImplemented "Instruction FCMP not yet implemented."
	317 Multiply S13, S13, S1
	318 Multiply S1, S3, S16
	319 Multiply S4, S15, S6
	320 Multiply S7, S5, S2
	321 Add S1, S4, S1
	322 Add S1, S7, S1
	323 Multiply S4, S3, S1
	324 Multiply S7, S15, S1
	325 Multiply S1, S5, S1
	326 NotImplemented "Instruction FDIV not yet implemented."
	327 NotImplemented "Instruction FDIV not yet implemented."
	328 NotImplemented "Instruction FDIV not yet implemented."
	329 Subtract S16, S16, S4
	330 Subtract S6, S6, S7
	331 Subtract S2, S2, S0
	332 Move V0, V16
	333 Move V1, V6
	334 Move V4, V15
	335 Move X0, X31
	336 Call Quaternion.LookRotation, X0, X1
	337 Move V4, V14
	338 Move V5, V12
	339 Move V6, V13
	340 Move X0, X31
	341 Call Quaternion.op_Multiply, X0, X1
	342 Move V4, V0
	343 Move V5, V1
	344 Move V6, V2
	345 Move V0, V8
	346 Move V1, V9
	347 Move V2, V10
	348 Move V3, V11
	349 Move X0, X31
	350 Call Quaternion.op_Multiply, X0, X1
	351 Move X24, X26
	352 Add X24, X24, 96
	353 Move V3, [X24]
	354 Move V4, [X19+796]
	355 Move X27, X26
	356 Move V0.S[1], V1.S[0]
	357 Add V1, V3, V0
	358 Add S3, S2, S4
	359 Move [X24], D1
	360 Move [X19+796], S3
	361 Add X27, X27, 159
	362 Move V1, [X27]
	363 NotImplemented "Instruction LDUR not yet implemented."
	364 Add X22, X19, 725
	365 Add X10, X19, 733
	366 Add V1, V0, V1
	367 Add S3, S2, S3
	368 Move [X27], D1
	369 Move [X26+167], S3
	370 Move V1, [X19+912]
	371 Move V3, [X19+920]
	372 Move V4, [X19+968]
	373 Move V5, [X19+976]
	374 Add V1, V0, V1
	375 Add S3, S2, S3
	376 Add V4, V0, V4
	377 Add S5, S2, S5
	378 Move [X19+912], D1
	379 Move [X19+920], S3
	380 Move [X19+968], D4
	381 Move [X19+976], S5
	382 Move V1, [X19+700]
	383 Move V3, [X26]
	384 Add S1, S2, S1
	385 Add V0, V0, V3
	386 Move [X26], D0
	387 Move [X19+700], S1
	388 Move W8, [X26+8]
	389 Move X9, [X26]
	390 Move [X10], W8
	391 Move [X22], X9
	392 Move V0, [X19+548]
	393 Move V1, [X19+420]
	394 Move V2, [X19+552]
	395 Move V3, [X19+424]
	396 Move W8, [X19+432]
	397 Move V4, [X19+560]
	398 Move V5, [X19+428]
	399 Multiply S0, S0, S1
	400 Multiply S1, S2, S3
	401 NotImplemented "Instruction FNMUL not yet implemented."
	402 NotImplemented "Instruction CMP not yet implemented."
	403 Multiply S3, S4, S5
	404 NotImplemented "Instruction FCSEL not yet implemented."
	405 Move [X31+192], S0
	406 Move [X31+200], S1
	407 Move [X31+200], S3
	408 Move W9, [X19+565]
	409 Move W8, [X19+566]
	410 Compare W9, 0
	411 JumpIfEqual {421}
	412 Compare W8, 0
	413 JumpIfNotEqual {426}
	414 Move W8, [X19+567]
	415 Compare W8, 0
	416 JumpIfNotEqual {426}
	417 Move S0, [X31+192]
	418 Move S1, [X31+196]
	419 Move S8, W31
	420 Subtract S0, S1, S0
	421 Compare W8, 0
	422 JumpIfEqual {426}
	423 Move W8, [X19+567]
	424 Compare W8, 0
	425 JumpIfEqual {2112}
	426 Move S8, [X31+192]
	427 Move S0, [X31+196]
	428 Move V1, [X19+624]
	429 Move V3, [X19+632]
	430 Move W8, 0x42A00000
	431 Move S4, W31
	432 Add S0, S0, S1
	433 Move S1, W8
	434 Move W8, 0xC2A00000
	435 Move V2, [X19+628]
	436 Add S3, S3, S4
	437 Move S4, W8
	438 Move X8, -51228672
	439 Move V9, [X8+260]
	440 NotImplemented "Instruction FMIN not yet implemented."
	441 NotImplemented "Instruction FCMP not yet implemented."
	442 Add S0, S8, S2
	443 Move [X19+628], S0
	444 Multiply S1, S0, S9
	445 NotImplemented "Instruction FCSEL not yet implemented."
	446 Move [X19+624], S0
	447 Multiply S0, S0, S9
	448 Multiply S2, S3, S9
	449 Move X0, X31
	450 Move [X19+632], S3
	451 Call Quaternion.Internal_FromEulerRad, X0
	452 Move [X19+704], S0
	453 Move [X19+708], S1
	454 Move [X19+712], S2
	455 Move [X19+716], S3
	456 Move V0, [X19+44]
	457 Add X23, X19, 737
	458 Move S2, W31
	459 Move X0, X31
	460 Move [X23], V0
	461 Move V0, [X19+628]
	462 Move [X31+64], S9
	463 Multiply S1, S0, S9
	464 Move S0, W31
	465 Call Quaternion.Internal_FromEulerRad, X0
	466 Move W8, [X28+1926]
	467 Move V9, V0
	468 Move V10, V1
	469 Move V11, V2
	470 Move V12, V3
	471 Compare W8, 0
	472 JumpIfNotEqual {478}
	473 Move X0, 0x52E000
	474 Move X0, [X0+1440]
	475 Call 0x1C17CF4
	476 Move W8, 1
	477 Move [X28+1926], W8
	478 Move X8, [X20]
	479 Move V0, V9
	480 Move V1, V10
	481 Move V2, V11
	482 Move X8, [X8+184]
	483 Move V3, V12
	484 Move X0, X31
	485 Move S4, [X8+24]
	486 Move S5, [X8+28]
	487 Move V6, [X8+32]
	488 Call Quaternion.op_Multiply, X0, X1
	489 Move V3, V0
	490 Move V4, V1
	491 Move V5, V2
	492 Move V0, V8
	493 Move V1, V3
	494 Move V2, V4
	495 Move V3, V5
	496 Move X0, X31
	497 Call Quaternion.AngleAxis, V0, X0
	498 Move V10, V0
	499 Move V9, V1
	500 Move V8, V2
	501 Move V12, [X19+692]
	502 Move V14, [X19+696]
	503 Move V15, [X19+700]
	504 Move V0, [X19+788]
	505 Move V1, [X19+792]
	506 Move V2, [X19+796]
	507 Move X0, X31
	508 Subtract S4, S0, S12
	509 Subtract S5, S1, S14
	510 Subtract S6, S2, S15
	511 Move V0, V10
	512 Move V1, V9
	513 Move V2, V8
	514 Move V11, V3
	515 Call Quaternion.op_Multiply, X0, X1
	516 Move V3, [X19+800]
	517 Move V4, [X19+804]
	518 Move V6, [X19+812]
	519 Move V5, [X19+808]
	520 Add S0, S12, S0
	521 Add S1, S14, S1
	522 Add S2, S15, S2
	523 Move [X19+788], S0
	524 Move [X19+792], S1
	525 Move [X19+796], S2
	526 Multiply S0, S11, S3
	527 Multiply S1, S10, S6
	528 Multiply S2, S11, S4
	529 Multiply S7, S9, S6
	530 Add S0, S0, S1
	531 Multiply S1, S11, S5
	532 Add S2, S2, S7
	533 Multiply S7, S8, S6
	534 Multiply S6, S11, S6
	535 Add S1, S1, S7
	536 Multiply S7, S10, S3
	537 Subtract S6, S6, S7
	538 Multiply S7, S9, S5
	539 Add S0, S7, S0
	540 Multiply S7, S8, S3
	541 Add S2, S7, S2
	542 Multiply S7, S10, S4
	543 Add S1, S7, S1
	544 Multiply S7, S8, S4
	545 Multiply S4, S9, S4
	546 Subtract S4, S6, S4
	547 Multiply S6, S10, S5
	548 Multiply S3, S9, S3
	549 Multiply S5, S8, S5
	550 Subtract S0, S0, S7
	551 Subtract S2, S2, S6
	552 Subtract S1, S1, S3
	553 Subtract S3, S4, S5
	554 Move [X19+800], S0
	555 Move [X19+804], S2
	556 Move [X19+808], S1
	557 Move [X19+812], S3
	558 NotImplemented "Instruction LDUR not yet implemented."
	559 NotImplemented "Instruction LDUR not yet implemented."
	560 NotImplemented "Instruction LDUR not yet implemented."
	561 Move V3, V11
	562 Subtract S4, S0, S12
	563 Subtract S5, S1, S14
	564 Subtract S6, S2, S15
	565 Move V0, V10
	566 Move V1, V9
	567 Move V2, V8
	568 Move X0, X31
	569 Call Quaternion.op_Multiply, X0, X1
	570 NotImplemented "Instruction LDUR not yet implemented."
	571 NotImplemented "Instruction LDUR not yet implemented."
	572 NotImplemented "Instruction LDUR not yet implemented."
	573 NotImplemented "Instruction LDUR not yet implemented."
	574 Add S0, S12, S0
	575 Add S1, S14, S1
	576 Add S2, S15, S2
	577 Move [X26+159], S0
	578 Move [X26+163], S1
	579 Move [X26+167], S2
	580 Multiply S0, S11, S3
	581 Multiply S1, S10, S6
	582 Multiply S2, S11, S4
	583 Multiply S7, S9, S6
	584 Add S0, S0, S1
	585 Multiply S1, S11, S5
	586 Add S2, S2, S7
	587 Multiply S7, S8, S6
	588 Multiply S6, S11, S6
	589 Add S1, S1, S7
	590 Multiply S7, S10, S3
	591 Subtract S6, S6, S7
	592 Multiply S7, S9, S5
	593 Add S0, S7, S0
	594 Multiply S7, S8, S3
	595 Add S2, S7, S2
	596 Multiply S7, S10, S4
	597 Add S1, S7, S1
	598 Multiply S7, S8, S4
	599 Multiply S4, S9, S4
	600 Subtract S4, S6, S4
	601 Multiply S6, S10, S5
	602 Multiply S3, S9, S3
	603 Multiply S5, S8, S5
	604 Subtract S0, S0, S7
	605 Subtract S2, S2, S6
	606 Subtract S1, S1, S3
	607 Subtract S3, S4, S5
	608 Move [X26+171], S0
	609 Move [X26+175], S2
	610 Move [X26+179], S1
	611 Move [X26+183], S3
	612 Move V0, [X19+800]
	613 Move V1, [X19+804]
	614 Move V2, [X19+808]
	615 Move V3, [X19+812]
	616 Move X0, X31
	617 Call Quaternion.Internal_ToEulerRad, X0
	618 Move X8, -51228672
	619 Move V13, [X8+1096]
	620 Move X0, X31
	621 Multiply S0, S0, S13
	622 Multiply S1, S1, S13
	623 Multiply S2, S2, S13
	624 Call Quaternion.Internal_MakePositive, X0
	625 Move [X19+600], S0
	626 Move [X19+604], S1
	627 Move [X19+608], S2
	628 NotImplemented "Instruction LDUR not yet implemented."
	629 NotImplemented "Instruction LDUR not yet implemented."
	630 NotImplemented "Instruction LDUR not yet implemented."
	631 NotImplemented "Instruction LDUR not yet implemented."
	632 Move X0, X31
	633 Call Quaternion.Internal_ToEulerRad, X0
	634 Multiply S0, S0, S13
	635 Multiply S1, S1, S13
	636 Multiply S2, S2, S13
	637 Move X0, X31
	638 Call Quaternion.Internal_MakePositive, X0
	639 Move [X19+612], S0
	640 Move [X19+616], S1
	641 Move V0, [X19+912]
	642 Move V1, [X19+916]
	643 Move V3, [X19+920]
	644 Move [X19+620], S2
	645 Subtract S4, S0, S12
	646 Subtract S5, S1, S14
	647 Subtract S6, S3, S15
	648 Move V0, V10
	649 Move V1, V9
	650 Move V2, V8
	651 Move V3, V11
	652 Move X0, X31
	653 Call Quaternion.op_Multiply, X0, X1
	654 Move V3, [X19+924]
	655 Move V4, [X19+928]
	656 Move V6, [X19+936]
	657 Move V5, [X19+932]
	658 Add S0, S12, S0
	659 Add S1, S14, S1
	660 Add S2, S15, S2
	661 Move [X19+912], S0
	662 Move [X19+916], S1
	663 Move [X19+920], S2
	664 Multiply S0, S11, S3
	665 Multiply S1, S10, S6
	666 Multiply S2, S11, S4
	667 Multiply S7, S9, S6
	668 Add S0, S0, S1
	669 Multiply S1, S11, S5
	670 Add S2, S2, S7
	671 Multiply S7, S8, S6
	672 Multiply S6, S11, S6
	673 Add S1, S1, S7
	674 Multiply S7, S10, S3
	675 Subtract S6, S6, S7
	676 Multiply S7, S9, S5
	677 Add S0, S7, S0
	678 Multiply S7, S8, S3
	679 Add S2, S7, S2
	680 Multiply S7, S10, S4
	681 Add S1, S7, S1
	682 Multiply S7, S9, S4
	683 Multiply S3, S9, S3
	684 Subtract S6, S6, S7
	685 Move V7, [X19+968]
	686 Move V16, [X19+972]
	687 Subtract S1, S1, S3
	688 Move V3, [X19+976]
	689 Multiply S4, S8, S4
	690 Subtract S0, S0, S4
	691 Multiply S4, S10, S5
	692 Multiply S17, S8, S5
	693 Subtract S2, S2, S4
	694 Subtract S6, S6, S17
	695 Subtract S4, S7, S12
	696 Subtract S5, S16, S14
	697 Move [X19+924], S0
	698 Move [X19+928], S2
	699 Move [X19+932], S1
	700 Move [X19+936], S6
	701 Subtract S6, S3, S15
	702 Move V0, V10
	703 Move V1, V9
	704 Move V2, V8
	705 Move V3, V11
	706 Move X0, X31
	707 Call Quaternion.op_Multiply, X0, X1
	708 Move V3, [X19+980]
	709 Move V4, [X19+984]
	710 Move V5, [X19+988]
	711 Move V6, [X19+992]
	712 Add S0, S12, S0
	713 Add S1, S14, S1
	714 Add S2, S15, S2
	715 Move [X19+968], S0
	716 Move [X19+972], S1
	717 Multiply S0, S11, S3
	718 Multiply S1, S10, S6
	719 Multiply S7, S8, S4
	720 Multiply S16, S11, S4
	721 Multiply S17, S9, S6
	722 Multiply S18, S8, S3
	723 Multiply S20, S10, S4
	724 Multiply S21, S10, S3
	725 Multiply S22, S9, S3
	726 Multiply S3, S9, S4
	727 Multiply S4, S11, S5
	728 Multiply S23, S11, S6
	729 Multiply S6, S8, S6
	730 Move [X19+976], S2
	731 Multiply S2, S9, S5
	732 Add S0, S0, S1
	733 Add S1, S16, S17
	734 Add S4, S4, S6
	735 Subtract S6, S23, S21
	736 Add S16, S2, S0
	737 Move V0, [X19+924]
	738 Add S17, S18, S1
	739 Move V1, [X19+928]
	740 Move V2, [X19+932]
	741 Subtract S6, S6, S3
	742 Move V3, [X19+936]
	743 Multiply S19, S10, S5
	744 Multiply S5, S8, S5
	745 Add S4, S20, S4
	746 Subtract S7, S16, S7
	747 Subtract S16, S17, S19
	748 Subtract S4, S4, S22
	749 Subtract S5, S6, S5
	750 Move X0, X31
	751 Move [X19+980], S7
	752 Move [X19+984], S16
	753 Move [X19+988], S4
	754 Move [X19+992], S5
	755 Call Quaternion.Internal_ToEulerRad, X0
	756 Multiply S0, S0, S13
	757 Multiply S1, S1, S13
	758 Multiply S2, S2, S13
	759 Move X0, X31
	760 Call Quaternion.Internal_MakePositive, X0
	761 Move V6, [X19+980]
	762 Move V4, [X19+984]
	763 Move V5, [X19+988]
	764 Move V3, [X19+992]
	765 Move [X19+940], S0
	766 Move [X19+944], S1
	767 Move [X19+948], S2
	768 Move V0, V6
	769 Move V1, V4
	770 Move V2, V5
	771 Move X0, X31
	772 Call Quaternion.Internal_ToEulerRad, X0
	773 Multiply S0, S0, S13
	774 Multiply S1, S1, S13
	775 Multiply S2, S2, S13
	776 Move X0, X31
	777 Call Quaternion.Internal_MakePositive, X0
	778 Move W8, [X19+568]
	779 Move [X19+996], S0
	780 Move [X19+1000], S1
	781 Move [X19+1004], S2
	782 Compare W8, 0
	783 JumpIfEqual {953}
	784 Move X28, 0x598000
	785 Move X28, [X28+1120]
	786 Move X0, [X28]
	787 Move W8, [X0+224]
	788 Compare W8, 0
	789 JumpIfNotEqual {792}
	790 Call 0x1C17DFC
	791 Move X0, [X28]
	792 Move X8, [X0+184]
	793 Move V8, [X31+64]
	794 Move W9, [X8+8]
	795 Move X8, [X8]
	796 Move [X24+8], W9
	797 Move [X24], X8
	798 Move X8, [X0+184]
	799 Move X24, 0x813000
	800 Move W9, [X8+20]
	801 NotImplemented "Instruction LDUR not yet implemented."
	802 Move [X27+8], W9
	803 Move [X27], X8
	804 Move W8, [X24+1923]
	805 Compare W8, 0
	806 JumpIfNotEqual {812}
	807 Move X0, 0x52E000
	808 Move X0, [X0+1440]
	809 Call 0x1C17CF4
	810 Move W8, 1
	811 Move [X24+1923], W8
	812 Move X8, [X20]
	813 Move X0, X31
	814 Move X8, [X8+184]
	815 Move S0, [X8]
	816 Move S1, [X8+4]
	817 Move V2, [X8+8]
	818 Move [X19+600], S0
	819 Move [X19+604], S1
	820 Move [X19+608], S2
	821 Multiply S0, S0, S8
	822 Multiply S1, S1, S8
	823 Multiply S2, S2, S8
	824 Call Quaternion.Internal_FromEulerRad, X0
	825 Move [X19+800], S0
	826 Move [X19+804], S1
	827 Move [X19+808], S2
	828 Move [X19+812], S3
	829 Move W8, [X24+1923]
	830 Compare W8, 0
	831 JumpIfNotEqual {837}
	832 Move X0, 0x52E000
	833 Move X0, [X0+1440]
	834 Call 0x1C17CF4
	835 Move W8, 1
	836 Move [X24+1923], W8
	837 Move X8, [X20]
	838 Move X0, X31
	839 Move X8, [X8+184]
	840 Move S0, [X8]
	841 Move S1, [X8+4]
	842 Move V2, [X8+8]
	843 Move [X19+612], S0
	844 Move [X19+616], S1
	845 Move [X19+620], S2
	846 Multiply S0, S0, S8
	847 Multiply S1, S1, S8
	848 Multiply S2, S2, S8
	849 Call Quaternion.Internal_FromEulerRad, X0
	850 Move [X26+171], S0
	851 Move [X26+175], S1
	852 Move [X26+179], S2
	853 Move [X26+183], S3
	854 Move X8, [X28]
	855 Move X9, [X8+184]
	856 Move V0, [X9]
	857 Move V1, [X9+8]
	858 Move [X19+912], D0
	859 Move [X19+920], S1
	860 Move X8, [X8+184]
	861 NotImplemented "Instruction LDUR not yet implemented."
	862 Move V1, [X8+20]
	863 Move [X19+968], D0
	864 Move [X19+976], S1
	865 Move W8, [X24+1923]
	866 Compare W8, 0
	867 JumpIfNotEqual {873}
	868 Move X0, 0x52E000
	869 Move X0, [X0+1440]
	870 Call 0x1C17CF4
	871 Move W8, 1
	872 Move [X24+1923], W8
	873 Move X8, [X20]
	874 Move X0, X31
	875 Move X8, [X8+184]
	876 Move S0, [X8]
	877 Move S1, [X8+4]
	878 Move V2, [X8+8]
	879 Move [X19+940], S0
	880 Move [X19+944], S1
	881 Move [X19+948], S2
	882 Multiply S0, S0, S8
	883 Multiply S1, S1, S8
	884 Multiply S2, S2, S8
	885 Call Quaternion.Internal_FromEulerRad, X0
	886 Move [X19+924], S0
	887 Move [X19+928], S1
	888 Move [X19+932], S2
	889 Move [X19+936], S3
	890 Move W8, [X24+1923]
	891 Compare W8, 0
	892 JumpIfNotEqual {898}
	893 Move X0, 0x52E000
	894 Move X0, [X0+1440]
	895 Call 0x1C17CF4
	896 Move W8, 1
	897 Move [X24+1923], W8
	898 Move X8, [X20]
	899 Move X0, X31
	900 Add X27, X19, 704
	901 Move X8, [X8+184]
	902 Move S0, [X8]
	903 Move S1, [X8+4]
	904 Move V2, [X8+8]
	905 Move [X19+996], S0
	906 Move [X19+1000], S1
	907 Move [X19+1004], S2
	908 Multiply S0, S0, S8
	909 Multiply S1, S1, S8
	910 Multiply S2, S2, S8
	911 Call Quaternion.Internal_FromEulerRad, X0
	912 Move [X19+980], S0
	913 Move [X19+984], S1
	914 Move [X19+988], S2
	915 Move [X19+992], S3
	916 Move X8, [X21]
	917 Move X8, [X8+184]
	918 Move V0, [X8]
	919 Move [X19+692], S0
	920 Move [X19+696], S0
	921 Move [X19+700], S0
	922 Move W8, [X26+8]
	923 Move X9, [X26]
	924 Move [X22+8], W8
	925 Move [X22], X9
	926 Move W8, [X24+1923]
	927 Compare W8, 0
	928 JumpIfNotEqual {934}
	929 Move X0, 0x52E000
	930 Move X0, [X0+1440]
	931 Call 0x1C17CF4
	932 Move W8, 1
	933 Move [X24+1923], W8
	934 Move X8, [X20]
	935 Move X0, X31
	936 Move X8, [X8+184]
	937 Move S0, [X8]
	938 Move S1, [X8+4]
	939 Move V2, [X8+8]
	940 Move [X19+624], S0
	941 Move [X19+628], S1
	942 Move [X19+632], S2
	943 Multiply S0, S0, S8
	944 Multiply S1, S1, S8
	945 Multiply S2, S2, S8
	946 Call Quaternion.Internal_FromEulerRad, X0
	947 Move [X19+704], S0
	948 Move [X19+708], S1
	949 Move [X19+712], S2
	950 Move [X19+716], S3
	951 Move V0, [X27]
	952 Move [X23], V0
	953 Move W8, [X19+500]
	954 Add X22, X19, 753
	955 Add X21, X19, 816
	956 Add X20, X19, 636
	957 Move TEMP, X8
	958 And TEMP, TEMP, 1
	959 Compare TEMP, 1
	960 JumpIfNotEqual {1179}
	961 Move X27, 0x598000
	962 Move X27, [X27+1120]
	963 Move W23, [X19+384]
	964 Move X24, [X19+376]
	965 Move X0, [X27]
	966 Move W8, [X0+224]
	967 Compare W8, 0
	968 JumpIfNotEqual {970}
	969 Call 0x1C17DFC
	970 Add X2, X31, 176
	971 Add X3, X31, 160
	972 Add X4, X31, 144
	973 Move W0, W23
	974 Move X1, X24
	975 Call XRDeviceSimulator.GetAxes, X0, X1, X2, X3, X4
	976 Move V8, [X31+176]
	977 Move V9, [X31+184]
	978 Move V10, [X19+536]
	979 Move V11, [X19+392]
	980 Move X0, X31
	981 Call Time.get_deltaTime
	982 Multiply S1, S10, S11
	983 Move V10, [X31+160]
	984 Move V11, [X31+168]
	985 Move V12, [X19+540]
	986 Move V13, [X19+396]
	987 Multiply S0, S1, S0
	988 Move X0, X31
	989 NotImplemented "Instruction INVALID not yet implemented."
	990 Multiply S9, S9, S0
	991 Call Time.get_deltaTime
	992 Multiply S1, S12, S13
	993 Move V12, [X31+144]
	994 Move V13, [X31+152]
	995 Move V14, [X19+544]
	996 Move V15, [X19+400]
	997 Multiply S0, S1, S0
	998 NotImplemented "Instruction INVALID not yet implemented."
	999 Multiply S0, S11, S0
	1000 Move X0, X31
	1001 Add V8, V8, V1
	1002 Add S9, S9, S0
	1003 Call Time.get_deltaTime
	1004 Multiply S1, S14, S15
	1005 Move W8, [X19+508]
	1006 Multiply S0, S1, S0
	1007 NotImplemented "Instruction INVALID not yet implemented."
	1008 Multiply S0, S13, S0
	1009 Add V1, V8, V1
	1010 Add S8, S9, S0
	1011 Move [X31+4], V1
	1012 Compare W8, 0
	1013 JumpIfNotEqual {1078}
	1014 Move W0, [X25]
	1015 Move W1, 2
	1016 Move X2, X31
	1017 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1018 Move TEMP, X0
	1019 And TEMP, TEMP, 1
	1020 Compare TEMP, 1
	1021 JumpIfNotEqual {1044}
	1022 Move X0, [X27]
	1023 Move W23, [X19+384]
	1024 Move W8, [X0+224]
	1025 Compare W8, 0
	1026 JumpIfNotEqual {1028}
	1027 Call 0x1C17DFC
	1028 Add X2, X31, 208
	1029 Move W0, W23
	1030 Move X1, X22
	1031 Call XRDeviceSimulator.GetDeltaRotation, X0, X1, X2
	1032 Move V4, [X31+4]
	1033 Move V9, [X26+96]
	1034 Move V10, [X19+796]
	1035 Move V6, V8
	1036 Move S5, V4.S[1]
	1037 Move X0, X31
	1038 Call Quaternion.op_Multiply, X0, X1
	1039 Add S2, S10, S2
	1040 Move V0.S[1], V1.S[0]
	1041 Add V0, V9, V0
	1042 Move [X26+96], D0
	1043 Move [X19+796], S2
	1044 Move W8, [X19+508]
	1045 Compare W8, 0
	1046 JumpIfNotEqual {1078}
	1047 Move W0, [X25]
	1048 Move W1, 4
	1049 Move X2, X31
	1050 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1051 Move TEMP, X0
	1052 And TEMP, TEMP, 1
	1053 Compare TEMP, 1
	1054 JumpIfNotEqual {1077}
	1055 Move X0, [X27]
	1056 Move W23, [X19+384]
	1057 Move W8, [X0+224]
	1058 Compare W8, 0
	1059 JumpIfNotEqual {1061}
	1060 Call 0x1C17DFC
	1061 Add X2, X31, 208
	1062 Move W0, W23
	1063 Move X1, X21
	1064 Call XRDeviceSimulator.GetDeltaRotation, X0, X1, X2
	1065 Move V4, [X31+4]
	1066 NotImplemented "Instruction LDUR not yet implemented."
	1067 NotImplemented "Instruction LDUR not yet implemented."
	1068 Move V6, V8
	1069 Move S5, V4.S[1]
	1070 Move X0, X31
	1071 Call Quaternion.op_Multiply, X0, X1
	1072 Add S2, S10, S2
	1073 Move V0.S[1], V1.S[0]
	1074 Add V0, V9, V0
	1075 Move [X26+159], D0
	1076 Move [X26+167], S2
	1077 Move W8, [X19+508]
	1078 NotImplemented "Instruction CMP not yet implemented."
	1079 Move W0, [X25]
	1080 Move W1, 2
	1081 Move X2, X31
	1082 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1083 Move TEMP, X0
	1084 And TEMP, TEMP, 1
	1085 Compare TEMP, 1
	1086 JumpIfNotEqual {1110}
	1087 Move X0, [X27]
	1088 Move W23, [X19+384]
	1089 Add X24, X19, 912
	1090 Move W8, [X0+224]
	1091 Compare W8, 0
	1092 JumpIfNotEqual {1094}
	1093 Call 0x1C17DFC
	1094 Add X2, X31, 208
	1095 Move W0, W23
	1096 Move X1, X24
	1097 Call XRDeviceSimulator.GetDeltaRotation, X0, X1, X2
	1098 Move V4, [X31+4]
	1099 Move V9, [X19+912]
	1100 Move V10, [X19+920]
	1101 Move V6, V8
	1102 Move S5, V4.S[1]
	1103 Move X0, X31
	1104 Call Quaternion.op_Multiply, X0, X1
	1105 Add S2, S10, S2
	1106 Move V0.S[1], V1.S[0]
	1107 Add V0, V9, V0
	1108 Move [X19+912], D0
	1109 Move [X19+920], S2
	1110 Move W8, [X19+508]
	1111 NotImplemented "Instruction CMP not yet implemented."
	1112 Move W0, [X25]
	1113 Move W1, 4
	1114 Move X2, X31
	1115 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1116 Move TEMP, X0
	1117 And TEMP, TEMP, 1
	1118 Compare TEMP, 1
	1119 JumpIfNotEqual {1143}
	1120 Move X0, [X27]
	1121 Move W23, [X19+384]
	1122 Add X24, X19, 968
	1123 Move W8, [X0+224]
	1124 Compare W8, 0
	1125 JumpIfNotEqual {1127}
	1126 Call 0x1C17DFC
	1127 Add X2, X31, 208
	1128 Move W0, W23
	1129 Move X1, X24
	1130 Call XRDeviceSimulator.GetDeltaRotation, X0, X1, X2
	1131 Move V4, [X31+4]
	1132 Move V9, [X19+968]
	1133 Move V10, [X19+976]
	1134 Move V6, V8
	1135 Move S5, V4.S[1]
	1136 Move X0, X31
	1137 Call Quaternion.op_Multiply, X0, X1
	1138 Add S2, S10, S2
	1139 Move V0.S[1], V1.S[0]
	1140 Add V0, V9, V0
	1141 Move [X19+968], D0
	1142 Move [X19+976], S2
	1143 Move W0, [X25]
	1144 Move W1, 8
	1145 Move X2, X31
	1146 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1147 Move TEMP, X0
	1148 And TEMP, TEMP, 1
	1149 Compare TEMP, 1
	1150 JumpIfNotEqual {1179}
	1151 Move X0, [X27]
	1152 Move W23, [X19+384]
	1153 Move W8, [X0+224]
	1154 Compare W8, 0
	1155 JumpIfNotEqual {1157}
	1156 Call 0x1C17DFC
	1157 Add X2, X31, 208
	1158 Move W0, W23
	1159 Move X1, X20
	1160 Call XRDeviceSimulator.GetDeltaRotation, X0, X1, X2
	1161 Move V4, [X31+4]
	1162 Move V9, [X26]
	1163 Move V10, [X19+700]
	1164 Move V6, V8
	1165 Move S5, V4.S[1]
	1166 Move X0, X31
	1167 Call Quaternion.op_Multiply, X0, X1
	1168 Add S2, S10, S2
	1169 Move V0.S[1], V1.S[0]
	1170 Add V0, V9, V0
	1171 Move [X26], D0
	1172 Move [X19+700], S2
	1173 Move W8, [X26+8]
	1174 Move X9, [X26]
	1175 Add X10, X19, 725
	1176 Add X11, X19, 733
	1177 Move [X11], W8
	1178 Move [X10], X9
	1179 Move W8, [X19+492]
	1180 NotImplemented "Instruction CMP not yet implemented."
	1181 Compare W8, 0
	1182 JumpIfNotEqual {1189}
	1183 Move W8, [X19+564]
	1184 Compare W8, 0
	1185 JumpIfNotEqual {1192}
	1186 Move W8, [X19+496]
	1187 Compare W8, 0
	1188 JumpIfNotEqual {1229}
	1189 Move W8, [X19+564]
	1190 Compare W8, 0
	1191 JumpIfEqual {1229}
	1192 Move W8, [X19+496]
	1193 Compare W8, 0
	1194 JumpIfEqual {1229}
	1195 Move X27, 0x597000
	1196 Move X27, [X27+1120]
	1197 Move W23, [X19+388]
	1198 Move X24, [X19+376]
	1199 Move X0, [X27]
	1200 Move W8, [X0+224]
	1201 Compare W8, 0
	1202 JumpIfNotEqual {1204}
	1203 Call 0x1C17DFC
	1204 Add X2, X31, 128
	1205 Add X3, X31, 112
	1206 Add X4, X31, 96
	1207 Move W0, W23
	1208 Move X1, X24
	1209 Call XRDeviceSimulator.GetAxes, X0, X1, X2, X3, X4
	1210 Move V0, [X19+548]
	1211 Move V1, [X19+408]
	1212 Move V3, [X19+552]
	1213 Move V4, [X19+412]
	1214 Move V5, [X19+560]
	1215 Move V6, [X19+416]
	1216 Move W9, [X19+565]
	1217 Move W8, [X19+566]
	1218 Multiply S2, S0, S1
	1219 Multiply S1, S3, S4
	1220 Multiply S0, S5, S6
	1221 Compare W9, 0
	1222 JumpIfEqual {1254}
	1223 Compare W8, 0
	1224 JumpIfEqual {1278}
	1225 Move V3, [X31+128]
	1226 Move V4, [X31+136]
	1227 Move V5, [X31+112]
	1228 Move V6, [X31+120]
	1229 Move V0, [X19+548]
	1230 Move V1, [X19+420]
	1231 Move V2, [X19+552]
	1232 Move V3, [X19+424]
	1233 Move W8, [X19+432]
	1234 Move V4, [X19+560]
	1235 Move V5, [X19+428]
	1236 Multiply S0, S0, S1
	1237 Multiply S1, S2, S3
	1238 NotImplemented "Instruction FNMUL not yet implemented."
	1239 NotImplemented "Instruction CMP not yet implemented."
	1240 Multiply S3, S4, S5
	1241 NotImplemented "Instruction FCSEL not yet implemented."
	1242 Move [X31+88], S1
	1243 Move [X31+96], S0
	1244 Move [X31+84], S3
	1245 Move W9, [X19+565]
	1246 Move W8, [X19+566]
	1247 Compare W9, 0
	1248 JumpIfEqual {1269}
	1249 Compare W8, 0
	1250 JumpIfEqual {1726}
	1251 Move S0, [X31+88]
	1252 Move S1, [X31+92]
	1253 Move S2, W31
	1254 Move W9, [X19+567]
	1255 Compare W8, 0
	1256 JumpIfEqual {1732}
	1257 Compare W9, 0
	1258 JumpIfEqual {2085}
	1259 Move V3, [X31+112]
	1260 Move V4, [X31+120]
	1261 Move V5, [X31+96]
	1262 Move V6, [X31+104]
	1263 NotImplemented "Instruction INVALID not yet implemented."
	1264 Multiply S4, S1, S4
	1265 NotImplemented "Instruction INVALID not yet implemented."
	1266 Multiply S2, S2, S6
	1267 Add V1, V3, V1
	1268 Add S2, S4, S2
	1269 Move W9, [X19+567]
	1270 Compare W8, 0
	1271 JumpIfEqual {1736}
	1272 Compare W9, 0
	1273 JumpIfEqual {2098}
	1274 Move S0, [X31+88]
	1275 Move S1, [X31+92]
	1276 NotImplemented "Instruction FNEG not yet implemented."
	1277 Move S0, W31
	1278 Move W8, [X19+567]
	1279 Compare W8, 0
	1280 JumpIfEqual {2090}
	1281 Move V3, [X31+128]
	1282 Move V4, [X31+136]
	1283 Move V5, [X31+96]
	1284 Move V6, [X31+104]
	1285 NotImplemented "Instruction INVALID not yet implemented."
	1286 Multiply S2, S2, S4
	1287 NotImplemented "Instruction INVALID not yet implemented."
	1288 Multiply S5, S1, S6
	1289 Add V1, V3, V4
	1290 Add S2, S2, S5
	1291 Move V3, [X31+96]
	1292 Move V4, [X31+104]
	1293 Move W8, [X19+508]
	1294 NotImplemented "Instruction INVALID not yet implemented."
	1295 Multiply S0, S0, S4
	1296 Add V1, V1, V3
	1297 Add S8, S2, S0
	1298 Move [X31+4], V1
	1299 Compare W8, 0
	1300 JumpIfNotEqual {1365}
	1301 Move W0, [X25]
	1302 Move W1, 2
	1303 Move X2, X31
	1304 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1305 Move TEMP, X0
	1306 And TEMP, TEMP, 1
	1307 Compare TEMP, 1
	1308 JumpIfNotEqual {1331}
	1309 Move X0, [X27]
	1310 Move W23, [X19+388]
	1311 Move W8, [X0+224]
	1312 Compare W8, 0
	1313 JumpIfNotEqual {1315}
	1314 Call 0x1C17DFC
	1315 Add X2, X31, 208
	1316 Move W0, W23
	1317 Move X1, X22
	1318 Call XRDeviceSimulator.GetDeltaRotation, X0, X1, X2
	1319 Move V4, [X31+4]
	1320 Move V9, [X26+96]
	1321 Move V10, [X19+796]
	1322 Move V6, V8
	1323 Move S5, V4.S[1]
	1324 Move X0, X31
	1325 Call Quaternion.op_Multiply, X0, X1
	1326 Add S2, S10, S2
	1327 Move V0.S[1], V1.S[0]
	1328 Add V0, V9, V0
	1329 Move [X26+96], D0
	1330 Move [X19+796], S2
	1331 Move W8, [X19+508]
	1332 Compare W8, 0
	1333 JumpIfNotEqual {1365}
	1334 Move W0, [X25]
	1335 Move W1, 4
	1336 Move X2, X31
	1337 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1338 Move TEMP, X0
	1339 And TEMP, TEMP, 1
	1340 Compare TEMP, 1
	1341 JumpIfNotEqual {1364}
	1342 Move X0, [X27]
	1343 Move W22, [X19+388]
	1344 Move W8, [X0+224]
	1345 Compare W8, 0
	1346 JumpIfNotEqual {1348}
	1347 Call 0x1C17DFC
	1348 Add X2, X31, 208
	1349 Move W0, W22
	1350 Move X1, X21
	1351 Call XRDeviceSimulator.GetDeltaRotation, X0, X1, X2
	1352 Move V4, [X31+4]
	1353 NotImplemented "Instruction LDUR not yet implemented."
	1354 NotImplemented "Instruction LDUR not yet implemented."
	1355 Move V6, V8
	1356 Move S5, V4.S[1]
	1357 Move X0, X31
	1358 Call Quaternion.op_Multiply, X0, X1
	1359 Add S2, S10, S2
	1360 Move V0.S[1], V1.S[0]
	1361 Add V0, V9, V0
	1362 Move [X26+159], D0
	1363 Move [X26+167], S2
	1364 Move W8, [X19+508]
	1365 NotImplemented "Instruction CMP not yet implemented."
	1366 Move W0, [X25]
	1367 Move W1, 2
	1368 Move X2, X31
	1369 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1370 Move TEMP, X0
	1371 And TEMP, TEMP, 1
	1372 Compare TEMP, 1
	1373 JumpIfNotEqual {1397}
	1374 Move X0, [X27]
	1375 Move W21, [X19+388]
	1376 Add X22, X19, 912
	1377 Move W8, [X0+224]
	1378 Compare W8, 0
	1379 JumpIfNotEqual {1381}
	1380 Call 0x1C17DFC
	1381 Add X2, X31, 208
	1382 Move W0, W21
	1383 Move X1, X22
	1384 Call XRDeviceSimulator.GetDeltaRotation, X0, X1, X2
	1385 Move V4, [X31+4]
	1386 Move V9, [X19+912]
	1387 Move V10, [X19+920]
	1388 Move V6, V8
	1389 Move S5, V4.S[1]
	1390 Move X0, X31
	1391 Call Quaternion.op_Multiply, X0, X1
	1392 Add S2, S10, S2
	1393 Move V0.S[1], V1.S[0]
	1394 Add V0, V9, V0
	1395 Move [X19+912], D0
	1396 Move [X19+920], S2
	1397 Move W8, [X19+508]
	1398 NotImplemented "Instruction CMP not yet implemented."
	1399 Move W0, [X25]
	1400 Move W1, 4
	1401 Move X2, X31
	1402 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1403 Move TEMP, X0
	1404 And TEMP, TEMP, 1
	1405 Compare TEMP, 1
	1406 JumpIfNotEqual {1430}
	1407 Move X0, [X27]
	1408 Move W21, [X19+388]
	1409 Add X22, X19, 968
	1410 Move W8, [X0+224]
	1411 Compare W8, 0
	1412 JumpIfNotEqual {1414}
	1413 Call 0x1C17DFC
	1414 Add X2, X31, 208
	1415 Move W0, W21
	1416 Move X1, X22
	1417 Call XRDeviceSimulator.GetDeltaRotation, X0, X1, X2
	1418 Move V4, [X31+4]
	1419 Move V9, [X19+968]
	1420 Move V10, [X19+976]
	1421 Move V6, V8
	1422 Move S5, V4.S[1]
	1423 Move X0, X31
	1424 Call Quaternion.op_Multiply, X0, X1
	1425 Add S2, S10, S2
	1426 Move V0.S[1], V1.S[0]
	1427 Add V0, V9, V0
	1428 Move [X19+968], D0
	1429 Move [X19+976], S2
	1430 Move W0, [X25]
	1431 Move W1, 8
	1432 Move X2, X31
	1433 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1434 Move TEMP, X0
	1435 And TEMP, TEMP, 1
	1436 Compare TEMP, 1
	1437 JumpIfNotEqual {1466}
	1438 Move X0, [X27]
	1439 Move W21, [X19+388]
	1440 Move W8, [X0+224]
	1441 Compare W8, 0
	1442 JumpIfNotEqual {1444}
	1443 Call 0x1C17DFC
	1444 Add X2, X31, 208
	1445 Move W0, W21
	1446 Move X1, X20
	1447 Call XRDeviceSimulator.GetDeltaRotation, X0, X1, X2
	1448 Move V4, [X31+4]
	1449 Move V9, [X26]
	1450 Move V10, [X19+700]
	1451 Move V6, V8
	1452 Move S5, V4.S[1]
	1453 Move X0, X31
	1454 Call Quaternion.op_Multiply, X0, X1
	1455 Add S2, S10, S2
	1456 Move V0.S[1], V1.S[0]
	1457 Add V0, V9, V0
	1458 Move [X26], D0
	1459 Move [X19+700], S2
	1460 Move W8, [X26+8]
	1461 Move X9, [X26]
	1462 Add X10, X19, 725
	1463 Add X11, X19, 733
	1464 Move [X11], W8
	1465 Move [X10], X9
	1466 Move W8, [X19+568]
	1467 Compare W8, 0
	1468 JumpIfEqual {2063}
	1469 Move X0, X19
	1470 Call XRDeviceSimulator.GetResetScale, X0
	1471 Move W8, [X19+508]
	1472 Move V8, V0
	1473 Move V9, V1
	1474 Move V10, V2
	1475 Compare W8, 0
	1476 JumpIfNotEqual {1575}
	1477 Move W0, [X25]
	1478 Move W1, 2
	1479 Move X2, X31
	1480 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1481 Move TEMP, X0
	1482 And TEMP, TEMP, 1
	1483 Compare TEMP, 1
	1484 JumpIfNotEqual {1524}
	1485 Move X20, 0x812000
	1486 Move V11, [X19+788]
	1487 Move V12, [X19+792]
	1488 Move W8, [X20+1924]
	1489 Move V13, [X19+796]
	1490 Compare W8, 0
	1491 JumpIfNotEqual {1497}
	1492 Move X0, 0x52D000
	1493 Move X0, [X0+1448]
	1494 Call 0x1C17CF4
	1495 Move W8, 1
	1496 Move [X20+1924], W8
	1497 Move X8, 0x52D000
	1498 Move X8, [X8+1448]
	1499 Multiply S11, S8, S11
	1500 Multiply S12, S9, S12
	1501 Multiply S13, S10, S13
	1502 Move X0, [X8]
	1503 Move W8, [X0+224]
	1504 Compare W8, 0
	1505 JumpIfNotEqual {1507}
	1506 Call 0x1C17DFC
	1507 Multiply S0, S11, S11
	1508 Multiply S1, S12, S12
	1509 Add S0, S0, S1
	1510 Multiply S1, S13, S13
	1511 Add S0, S0, S1
	1512 NotImplemented "Instruction FSQRT not yet implemented."
	1513 NotImplemented "Instruction FCMP not yet implemented."
	1514 Move X8, 0x534000
	1515 Move X8, [X8+1208]
	1516 Move X8, [X8]
	1517 Move X8, [X8+184]
	1518 Move V11, [X8]
	1519 Move V12, V11
	1520 Move V13, V11
	1521 Move [X19+788], S11
	1522 Move [X19+792], S12
	1523 Move [X19+796], S13
	1524 Move W8, [X19+508]
	1525 Compare W8, 0
	1526 JumpIfNotEqual {1575}
	1527 Move W0, [X25]
	1528 Move W1, 4
	1529 Move X2, X31
	1530 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1531 Move TEMP, X0
	1532 And TEMP, TEMP, 1
	1533 Compare TEMP, 1
	1534 JumpIfNotEqual {1574}
	1535 Move X20, 0x812000
	1536 NotImplemented "Instruction LDUR not yet implemented."
	1537 NotImplemented "Instruction LDUR not yet implemented."
	1538 Move W8, [X20+1924]
	1539 NotImplemented "Instruction LDUR not yet implemented."
	1540 Compare W8, 0
	1541 JumpIfNotEqual {1547}
	1542 Move X0, 0x52D000
	1543 Move X0, [X0+1448]
	1544 Call 0x1C17CF4
	1545 Move W8, 1
	1546 Move [X20+1924], W8
	1547 Move X8, 0x52D000
	1548 Move X8, [X8+1448]
	1549 Multiply S11, S8, S11
	1550 Multiply S12, S9, S12
	1551 Multiply S13, S10, S13
	1552 Move X0, [X8]
	1553 Move W8, [X0+224]
	1554 Compare W8, 0
	1555 JumpIfNotEqual {1557}
	1556 Call 0x1C17DFC
	1557 Multiply S0, S11, S11
	1558 Multiply S1, S12, S12
	1559 Add S0, S0, S1
	1560 Multiply S1, S13, S13
	1561 Add S0, S0, S1
	1562 NotImplemented "Instruction FSQRT not yet implemented."
	1563 NotImplemented "Instruction FCMP not yet implemented."
	1564 Move X8, 0x534000
	1565 Move X8, [X8+1208]
	1566 Move X8, [X8]
	1567 Move X8, [X8+184]
	1568 Move V11, [X8]
	1569 Move V12, V11
	1570 Move V13, V11
	1571 Move [X26+159], S11
	1572 Move [X26+163], S12
	1573 Move [X26+167], S13
	1574 Move W8, [X19+508]
	1575 NotImplemented "Instruction CMP not yet implemented."
	1576 Move W0, [X25]
	1577 Move W1, 2
	1578 Move X2, X31
	1579 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1580 Move TEMP, X0
	1581 And TEMP, TEMP, 1
	1582 Compare TEMP, 1
	1583 JumpIfNotEqual {1623}
	1584 Move X20, 0x812000
	1585 Move V11, [X19+912]
	1586 Move V12, [X19+916]
	1587 Move W8, [X20+1924]
	1588 Move V13, [X19+920]
	1589 Compare W8, 0
	1590 JumpIfNotEqual {1596}
	1591 Move X0, 0x52D000
	1592 Move X0, [X0+1448]
	1593 Call 0x1C17CF4
	1594 Move W8, 1
	1595 Move [X20+1924], W8
	1596 Move X8, 0x52D000
	1597 Move X8, [X8+1448]
	1598 Multiply S11, S8, S11
	1599 Multiply S12, S9, S12
	1600 Multiply S13, S10, S13
	1601 Move X0, [X8]
	1602 Move W8, [X0+224]
	1603 Compare W8, 0
	1604 JumpIfNotEqual {1606}
	1605 Call 0x1C17DFC
	1606 Multiply S0, S11, S11
	1607 Multiply S1, S12, S12
	1608 Add S0, S0, S1
	1609 Multiply S1, S13, S13
	1610 Add S0, S0, S1
	1611 NotImplemented "Instruction FSQRT not yet implemented."
	1612 NotImplemented "Instruction FCMP not yet implemented."
	1613 Move X8, 0x534000
	1614 Move X8, [X8+1208]
	1615 Move X8, [X8]
	1616 Move X8, [X8+184]
	1617 Move V11, [X8]
	1618 Move V12, V11
	1619 Move V13, V11
	1620 Move [X19+912], S11
	1621 Move [X19+916], S12
	1622 Move [X19+920], S13
	1623 Move W8, [X19+508]
	1624 NotImplemented "Instruction CMP not yet implemented."
	1625 Move W0, [X25]
	1626 Move W1, 4
	1627 Move X2, X31
	1628 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1629 Move TEMP, X0
	1630 And TEMP, TEMP, 1
	1631 Compare TEMP, 1
	1632 JumpIfNotEqual {1672}
	1633 Move X20, 0x812000
	1634 Move V11, [X19+968]
	1635 Move V12, [X19+972]
	1636 Move W8, [X20+1924]
	1637 Move V13, [X19+976]
	1638 Compare W8, 0
	1639 JumpIfNotEqual {1645}
	1640 Move X0, 0x52D000
	1641 Move X0, [X0+1448]
	1642 Call 0x1C17CF4
	1643 Move W8, 1
	1644 Move [X20+1924], W8
	1645 Move X8, 0x52D000
	1646 Move X8, [X8+1448]
	1647 Multiply S11, S8, S11
	1648 Multiply S12, S9, S12
	1649 Multiply S13, S10, S13
	1650 Move X0, [X8]
	1651 Move W8, [X0+224]
	1652 Compare W8, 0
	1653 JumpIfNotEqual {1655}
	1654 Call 0x1C17DFC
	1655 Multiply S0, S11, S11
	1656 Multiply S1, S12, S12
	1657 Add S0, S0, S1
	1658 Multiply S1, S13, S13
	1659 Add S0, S0, S1
	1660 NotImplemented "Instruction FSQRT not yet implemented."
	1661 NotImplemented "Instruction FCMP not yet implemented."
	1662 Move X8, 0x534000
	1663 Move X8, [X8+1208]
	1664 Move X8, [X8]
	1665 Move X8, [X8+184]
	1666 Move V11, [X8]
	1667 Move V12, V11
	1668 Move V13, V11
	1669 Move [X19+968], S11
	1670 Move [X19+972], S12
	1671 Move [X19+976], S13
	1672 Move W0, [X25]
	1673 Move W1, 8
	1674 Move X2, X31
	1675 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1676 Move TEMP, X0
	1677 And TEMP, TEMP, 1
	1678 Compare TEMP, 1
	1679 JumpIfNotEqual {2063}
	1680 Move X20, 0x812000
	1681 Move V11, [X19+692]
	1682 Move V12, [X19+696]
	1683 Move W8, [X20+1924]
	1684 Move V13, [X19+700]
	1685 Compare W8, 0
	1686 JumpIfNotEqual {1692}
	1687 Move X0, 0x52D000
	1688 Move X0, [X0+1448]
	1689 Call 0x1C17CF4
	1690 Move W8, 1
	1691 Move [X20+1924], W8
	1692 Move X8, 0x52D000
	1693 Move X8, [X8+1448]
	1694 Multiply S8, S8, S11
	1695 Multiply S9, S9, S12
	1696 Multiply S10, S10, S13
	1697 Move X0, [X8]
	1698 Move W8, [X0+224]
	1699 Compare W8, 0
	1700 JumpIfNotEqual {1702}
	1701 Call 0x1C17DFC
	1702 Multiply S0, S8, S8
	1703 Multiply S1, S9, S9
	1704 Add S0, S0, S1
	1705 Multiply S1, S10, S10
	1706 Add S0, S0, S1
	1707 NotImplemented "Instruction FSQRT not yet implemented."
	1708 NotImplemented "Instruction FCMP not yet implemented."
	1709 Add X8, X19, 692
	1710 Move X9, 0x534000
	1711 Move X9, [X9+1208]
	1712 Move X9, [X9]
	1713 Move X9, [X9+184]
	1714 Move V8, [X9]
	1715 Move V9, V8
	1716 Move V10, V8
	1717 Move [X19+692], S8
	1718 Move [X19+696], S9
	1719 Move [X19+700], S10
	1720 Move W9, [X8+8]
	1721 Move X8, [X8]
	1722 Add X10, X19, 725
	1723 Add X11, X19, 733
	1724 Move [X11], W9
	1725 Move [X10], X8
	1726 Move W8, [X19+567]
	1727 Compare W8, 0
	1728 JumpIfEqual {2105}
	1729 Move S0, [X31+88]
	1730 Move S1, [X31+92]
	1731 NotImplemented "Instruction FNEG not yet implemented."
	1732 Compare W9, 0
	1733 JumpIfEqual {1225}
	1734 Move V3, [X31+96]
	1735 Move V4, [X31+104]
	1736 Compare W9, 0
	1737 JumpIfEqual {1251}
	1738 Move S1, [X31+88]
	1739 Move S2, [X31+92]
	1740 Move S0, W31
	1741 NotImplemented "Instruction FNEG not yet implemented."
	1742 Subtract S2, S1, S2
	1743 Move S1, W31
	1744 Move V3, [X31+84]
	1745 Move W8, [X19+508]
	1746 Move S4, W31
	1747 Add S8, S0, S4
	1748 Add S9, S1, S4
	1749 Add S10, S2, S3
	1750 Compare W8, 0
	1751 JumpIfNotEqual {1812}
	1752 Move W0, [X25]
	1753 Move W1, 2
	1754 Move X2, X31
	1755 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1756 Move TEMP, X0
	1757 And TEMP, TEMP, 1
	1758 Compare TEMP, 1
	1759 JumpIfNotEqual {1780}
	1760 Move V0, [X19+600]
	1761 Move V1, [X19+604]
	1762 Move V2, [X19+608]
	1763 Move X8, -51232768
	1764 Move V3, [X8+260]
	1765 Add S0, S8, S0
	1766 Add S1, S9, S1
	1767 Add S2, S10, S2
	1768 Move [X19+600], S0
	1769 Move [X19+604], S1
	1770 Move [X19+608], S2
	1771 Multiply S0, S0, S3
	1772 Multiply S1, S1, S3
	1773 Multiply S2, S2, S3
	1774 Move X0, X31
	1775 Call Quaternion.Internal_FromEulerRad, X0
	1776 Move [X19+800], S0
	1777 Move [X19+804], S1
	1778 Move [X19+808], S2
	1779 Move [X19+812], S3
	1780 Move W8, [X19+508]
	1781 Compare W8, 0
	1782 JumpIfNotEqual {1812}
	1783 Move W0, [X25]
	1784 Move W1, 4
	1785 Move X2, X31
	1786 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1787 Move TEMP, X0
	1788 And TEMP, TEMP, 1
	1789 Compare TEMP, 1
	1790 JumpIfNotEqual {1811}
	1791 Move V0, [X19+612]
	1792 Move V1, [X19+616]
	1793 Move V2, [X19+620]
	1794 Move X8, -51232768
	1795 Move V3, [X8+260]
	1796 Add S0, S8, S0
	1797 Add S1, S9, S1
	1798 Add S2, S10, S2
	1799 Move [X19+612], S0
	1800 Move [X19+616], S1
	1801 Move [X19+620], S2
	1802 Multiply S0, S0, S3
	1803 Multiply S1, S1, S3
	1804 Multiply S2, S2, S3
	1805 Move X0, X31
	1806 Call Quaternion.Internal_FromEulerRad, X0
	1807 Move [X26+171], S0
	1808 Move [X26+175], S1
	1809 Move [X26+179], S2
	1810 Move [X26+183], S3
	1811 Move W8, [X19+508]
	1812 NotImplemented "Instruction CMP not yet implemented."
	1813 Move W0, [X25]
	1814 Move W1, 2
	1815 Move X2, X31
	1816 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1817 Move TEMP, X0
	1818 And TEMP, TEMP, 1
	1819 Compare TEMP, 1
	1820 JumpIfNotEqual {1841}
	1821 Move V0, [X19+940]
	1822 Move V1, [X19+944]
	1823 Move V2, [X19+948]
	1824 Move X8, -51232768
	1825 Move V3, [X8+260]
	1826 Add S0, S8, S0
	1827 Add S1, S9, S1
	1828 Add S2, S10, S2
	1829 Move [X19+940], S0
	1830 Move [X19+944], S1
	1831 Move [X19+948], S2
	1832 Multiply S0, S0, S3
	1833 Multiply S1, S1, S3
	1834 Multiply S2, S2, S3
	1835 Move X0, X31
	1836 Call Quaternion.Internal_FromEulerRad, X0
	1837 Move [X19+924], S0
	1838 Move [X19+928], S1
	1839 Move [X19+932], S2
	1840 Move [X19+936], S3
	1841 Move W8, [X19+508]
	1842 NotImplemented "Instruction CMP not yet implemented."
	1843 Move W0, [X25]
	1844 Move W1, 4
	1845 Move X2, X31
	1846 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1847 Move TEMP, X0
	1848 And TEMP, TEMP, 1
	1849 Compare TEMP, 1
	1850 JumpIfNotEqual {1871}
	1851 Move V0, [X19+996]
	1852 Move V1, [X19+1000]
	1853 Move V2, [X19+1004]
	1854 Move X8, -51232768
	1855 Move V3, [X8+260]
	1856 Add S0, S8, S0
	1857 Add S1, S9, S1
	1858 Add S2, S10, S2
	1859 Move [X19+996], S0
	1860 Move [X19+1000], S1
	1861 Move [X19+1004], S2
	1862 Multiply S0, S0, S3
	1863 Multiply S1, S1, S3
	1864 Multiply S2, S2, S3
	1865 Move X0, X31
	1866 Call Quaternion.Internal_FromEulerRad, X0
	1867 Move [X19+980], S0
	1868 Move [X19+984], S1
	1869 Move [X19+988], S2
	1870 Move [X19+992], S3
	1871 Move W0, [X25]
	1872 Move W1, 8
	1873 Move X2, X31
	1874 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1875 Move TEMP, X0
	1876 And TEMP, TEMP, 1
	1877 Compare TEMP, 1
	1878 JumpIfNotEqual {1902}
	1879 Move V0, [X19+624]
	1880 Move V1, [X19+628]
	1881 Move V2, [X19+632]
	1882 Move X8, -51232768
	1883 Move V3, [X8+260]
	1884 Add S0, S8, S0
	1885 Add S1, S9, S1
	1886 Add S2, S10, S2
	1887 Move [X19+624], S0
	1888 Move [X19+628], S1
	1889 Move [X19+632], S2
	1890 Multiply S0, S0, S3
	1891 Multiply S1, S1, S3
	1892 Multiply S2, S2, S3
	1893 Move X0, X31
	1894 Call Quaternion.Internal_FromEulerRad, X0
	1895 Move [X19+704], S0
	1896 Move [X19+708], S1
	1897 Move [X19+712], S2
	1898 Move [X19+716], S3
	1899 Move V0, [X19+44]
	1900 Add X8, X19, 737
	1901 Move [X8], V0
	1902 Move W8, [X19+568]
	1903 Compare W8, 0
	1904 JumpIfEqual {2063}
	1905 Move X0, X19
	1906 Call XRDeviceSimulator.GetResetScale, X0
	1907 Move W8, [X19+508]
	1908 Move V8, V0
	1909 Move V9, V1
	1910 Move V10, V2
	1911 Compare W8, 0
	1912 JumpIfNotEqual {1973}
	1913 Move W0, [X25]
	1914 Move W1, 2
	1915 Move X2, X31
	1916 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1917 Move TEMP, X0
	1918 And TEMP, TEMP, 1
	1919 Compare TEMP, 1
	1920 JumpIfNotEqual {1941}
	1921 Move V0, [X19+600]
	1922 Move V1, [X19+604]
	1923 Move V2, [X19+608]
	1924 Move X8, -51232768
	1925 Move V3, [X8+260]
	1926 Multiply S0, S8, S0
	1927 Multiply S1, S9, S1
	1928 Multiply S2, S10, S2
	1929 Move [X19+600], S0
	1930 Move [X19+604], S1
	1931 Move [X19+608], S2
	1932 Multiply S0, S0, S3
	1933 Multiply S1, S1, S3
	1934 Multiply S2, S2, S3
	1935 Move X0, X31
	1936 Call Quaternion.Internal_FromEulerRad, X0
	1937 Move [X19+800], S0
	1938 Move [X19+804], S1
	1939 Move [X19+808], S2
	1940 Move [X19+812], S3
	1941 Move W8, [X19+508]
	1942 Compare W8, 0
	1943 JumpIfNotEqual {1973}
	1944 Move W0, [X25]
	1945 Move W1, 4
	1946 Move X2, X31
	1947 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1948 Move TEMP, X0
	1949 And TEMP, TEMP, 1
	1950 Compare TEMP, 1
	1951 JumpIfNotEqual {1972}
	1952 Move V0, [X19+612]
	1953 Move V1, [X19+616]
	1954 Move V2, [X19+620]
	1955 Move X8, -51232768
	1956 Move V3, [X8+260]
	1957 Multiply S0, S8, S0
	1958 Multiply S1, S9, S1
	1959 Multiply S2, S10, S2
	1960 Move [X19+612], S0
	1961 Move [X19+616], S1
	1962 Move [X19+620], S2
	1963 Multiply S0, S0, S3
	1964 Multiply S1, S1, S3
	1965 Multiply S2, S2, S3
	1966 Move X0, X31
	1967 Call Quaternion.Internal_FromEulerRad, X0
	1968 Move [X26+171], S0
	1969 Move [X26+175], S1
	1970 Move [X26+179], S2
	1971 Move [X26+183], S3
	1972 Move W8, [X19+508]
	1973 NotImplemented "Instruction CMP not yet implemented."
	1974 Move W0, [X25]
	1975 Move W1, 2
	1976 Move X2, X31
	1977 Call TargetedDevicesExtensions.HasDevice, X0, X1
	1978 Move TEMP, X0
	1979 And TEMP, TEMP, 1
	1980 Compare TEMP, 1
	1981 JumpIfNotEqual {2002}
	1982 Move V0, [X19+940]
	1983 Move V1, [X19+944]
	1984 Move V2, [X19+948]
	1985 Move X8, -51232768
	1986 Move V3, [X8+260]
	1987 Multiply S0, S8, S0
	1988 Multiply S1, S9, S1
	1989 Multiply S2, S10, S2
	1990 Move [X19+940], S0
	1991 Move [X19+944], S1
	1992 Move [X19+948], S2
	1993 Multiply S0, S0, S3
	1994 Multiply S1, S1, S3
	1995 Multiply S2, S2, S3
	1996 Move X0, X31
	1997 Call Quaternion.Internal_FromEulerRad, X0
	1998 Move [X19+924], S0
	1999 Move [X19+928], S1
	2000 Move [X19+932], S2
	2001 Move [X19+936], S3
	2002 Move W8, [X19+508]
	2003 NotImplemented "Instruction CMP not yet implemented."
	2004 Move W0, [X25]
	2005 Move W1, 4
	2006 Move X2, X31
	2007 Call TargetedDevicesExtensions.HasDevice, X0, X1
	2008 Move TEMP, X0
	2009 And TEMP, TEMP, 1
	2010 Compare TEMP, 1
	2011 JumpIfNotEqual {2032}
	2012 Move V0, [X19+996]
	2013 Move V1, [X19+1000]
	2014 Move V2, [X19+1004]
	2015 Move X8, -51232768
	2016 Move V3, [X8+260]
	2017 Multiply S0, S8, S0
	2018 Multiply S1, S9, S1
	2019 Multiply S2, S10, S2
	2020 Move [X19+996], S0
	2021 Move [X19+1000], S1
	2022 Move [X19+1004], S2
	2023 Multiply S0, S0, S3
	2024 Multiply S1, S1, S3
	2025 Multiply S2, S2, S3
	2026 Move X0, X31
	2027 Call Quaternion.Internal_FromEulerRad, X0
	2028 Move [X19+980], S0
	2029 Move [X19+984], S1
	2030 Move [X19+988], S2
	2031 Move [X19+992], S3
	2032 Move W0, [X25]
	2033 Move W1, 8
	2034 Move X2, X31
	2035 Call TargetedDevicesExtensions.HasDevice, X0, X1
	2036 Move TEMP, X0
	2037 And TEMP, TEMP, 1
	2038 Compare TEMP, 1
	2039 JumpIfNotEqual {2063}
	2040 Move V0, [X19+624]
	2041 Move V1, [X19+628]
	2042 Move V2, [X19+632]
	2043 Move X8, -51232768
	2044 Move V3, [X8+260]
	2045 Multiply S0, S8, S0
	2046 Multiply S1, S9, S1
	2047 Multiply S2, S10, S2
	2048 Move [X19+624], S0
	2049 Move [X19+628], S1
	2050 Move [X19+632], S2
	2051 Multiply S0, S0, S3
	2052 Multiply S1, S1, S3
	2053 Multiply S2, S2, S3
	2054 Move X0, X31
	2055 Call Quaternion.Internal_FromEulerRad, X0
	2056 Move [X19+704], S0
	2057 Move [X19+708], S1
	2058 Move [X19+712], S2
	2059 Move [X19+716], S3
	2060 Move V0, [X19+44]
	2061 Add X8, X19, 737
	2062 Move [X8], V0
	2063 Move X20, [X31+368]
	2064 Move X19, [X31+376]
	2065 Move X22, [X31+352]
	2066 Move X21, [X31+360]
	2067 Move X24, [X31+336]
	2068 Move X23, [X31+344]
	2069 Move X26, [X31+320]
	2070 Move X25, [X31+328]
	2071 Move X28, [X31+304]
	2072 Move X27, [X31+312]
	2073 Move X29, [X31+288]
	2074 Move X30, [X31+296]
	2075 Move D9, [X31+272]
	2076 Move D8, [X31+280]
	2077 Move D11, [X31+256]
	2078 Move D10, [X31+264]
	2079 Move D13, [X31+240]
	2080 Move D12, [X31+248]
	2081 Move D15, [X31+224]
	2082 Move D14, [X31+232]
	2083 Add X31, X31, 384
	2084 Return 
	2085 Move W8, [X19+567]
	2086 Compare W8, 0
	2087 JumpIfNotEqual {1225}
	2088 Move V3, [X31+112]
	2089 Move V4, [X31+120]
	2090 Move W8, [X19+567]
	2091 Compare W8, 0
	2092 JumpIfNotEqual {1225}
	2093 Move V3, [X31+128]
	2094 Move V4, [X31+136]
	2095 Add S2, S2, S1
	2096 NotImplemented "Instruction INVALID not yet implemented."
	2097 Multiply S2, S2, S4
	2098 Move W8, [X19+567]
	2099 Compare W8, 0
	2100 JumpIfNotEqual {1251}
	2101 Move S2, [X31+88]
	2102 Move S1, [X31+92]
	2103 Move S0, W31
	2104 Subtract S1, S1, S2
	2105 Move W8, [X19+567]
	2106 Compare W8, 0
	2107 JumpIfNotEqual {1251}
	2108 Move S2, [X31+88]
	2109 Move S0, [X31+92]
	2110 Move S1, W31
	2111 Subtract S0, S2, S0
	2112 Move S0, [X31+192]
	2113 Move S1, [X31+196]
	2114 Subtract S8, S0, S1
	2115 Move S0, W31
	2116 Call 0x1C17F20

Method: System.Void ProcessControlInput()

Disassembly:
	0x03BC8380 LDR X23, [X23 + 0x460]
	0x03BC8384 MOV X19, X2
	0x03BC8388 MOV X20, X1
	0x03BC838C MOV X21, X0
	0x03BC8390 TBNZ X8, 0x0, 0x3BC83A8
	0x03BC8394 ADRP X0, 0x595000
	0x03BC8398 LDR X0, [X0 + 0x460]
	0x03BC839C BL 0x1C16CF4
	0x03BC83A0 MOVZ W8, 0x1
	0x03BC83A4 STRB W8, [X22 + 0xD8C]
	0x03BC83A8 LDR X0, [X23]
	0x03BC83AC LDR W8, [X0 + 0xE0]
	0x03BC83B0 CBNZ W8, 0x3BC83B8
	0x03BC83B4 BL 0x1C16DFC
	0x03BC83B8 MOV X0, X21
	0x03BC83BC BL 0x3BC840C
	0x03BC83C0 CBZ X0, 0x3BC83FC
	0x03BC83C4 MOV X21, X0
	0x03BC83C8 CBZ X20, 0x3BC83DC
	0x03BC83CC MOV X0, X21
	0x03BC83D0 MOV X1, X20
	0x03BC83D4 MOV X2, X31
	0x03BC83D8 BL 0x3734A04
	0x03BC83DC CBZ X19, 0x3BC83FC
	0x03BC83E0 MOV X0, X21
	0x03BC83E4 MOV X1, X19
	0x03BC83E8 LDP X20, X19, [X31 + 0x20]
	0x03BC83EC LDP X22, X21, [X31 + 0x10]
	0x03BC83F0 MOV X2, X31
	0x03BC83F4 LDP X30, X23, [X31], #0x30
	0x03BC83F8 B 0x3734954
	0x03BC83FC LDP X20, X19, [X31 + 0x20]
	0x03BC8400 LDP X22, X21, [X31 + 0x10]
	0x03BC8404 LDP X30, X23, [X31], #0x30
	0x03BC8408 RET
	0x03BC840C STP X30, X21, [X31 - 0x20]!
	0x03BC8410 STP X20, X19, [X31 + 0x10]
	0x03BC8414 ADRP X20, 0x81A000
	0x03BC8418 ADRP X21, 0x52B000
	0x03BC841C LDRB W8, [X20 + 0xDE2]
	0x03BC8420 LDR X21, [X21 + 0x598]
	0x03BC8424 MOV X19, X0
	0x03BC8428 TBNZ X8, 0x0, 0x3BC8440
	0x03BC842C ADRP X0, 0x52B000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+508]
	004 Compare W8, 0
	005 JumpIfEqual {9}
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 
	009 Move X8, [X0]
	010 Move X19, X0
	011 Move X9, [X8+472]
	012 Move X1, [X8+480]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move W8, [X19+508]
	015 Compare W8, 0
	016 JumpIfEqual {18}
	017 Add X1, X19, 753
	018 Move W0, [X19+504]
	019 Move W1, 2
	020 Move X2, X31
	021 Call TargetedDevicesExtensions.HasDevice, X0, X1
	022 Add X1, X19, 753
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {30}
	027 Move X8, [X19]
	028 Move X9, [X8+488]
	029 Move X2, [X8+496]
	030 Move X8, [X19]
	031 Move X9, [X8+504]
	032 Move X2, [X8+512]
	033 Move X0, X19
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move W8, [X19+508]
	036 Compare W8, 0
	037 JumpIfEqual {39}
	038 Add X1, X19, 816
	039 Move W0, [X19+504]
	040 Move W1, 4
	041 Move X2, X31
	042 Call TargetedDevicesExtensions.HasDevice, X0, X1
	043 Add X1, X19, 816
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {51}
	048 Move X8, [X19]
	049 Move X3, [X8+488]
	050 Move X2, [X8+496]
	051 Move X8, [X19]
	052 Move X3, [X8+504]
	053 Move X2, [X8+512]
	054 Move X0, X19
	055 Move X30, [X31+16]
	056 Move X19, [X31+24]
	057 CallNoReturn X3

Method: System.Void ApplyHandState()

Disassembly:
	0x03BC5F38 FADD S2, S10, S2

ISIL:
	001 Return 

Method: System.Void ToggleHandExpression(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/SimulatedHandExpression simulatedExpression)

Disassembly:
	0x03BC8430 LDR X0, [X0 + 0x598]

ISIL:
	001 Return 

Method: System.Void ProcessAxis2DControlInput()

Disassembly:
	0x03BC8434 BL 0x1C16CF4
	0x03BC8438 MOVZ W8, 0x1
	0x03BC843C STRB W8, [X20 + 0xDE2]
	0x03BC8440 LDR X0, [X21]
	0x03BC8444 LDR W8, [X0 + 0xE0]
	0x03BC8448 CBNZ W8, 0x3BC8450
	0x03BC844C BL 0x1C16DFC
	0x03BC8450 MOV X0, X19
	0x03BC8454 MOV X1, X31
	0x03BC8458 MOV X2, X31
	0x03BC845C BL 0x3C354F8
	0x03BC8460 TBZ X0, 0x0, 0x3BC847C
	0x03BC8464 CBZ X19, 0x3BC848C
	0x03BC8468 MOV X0, X19
	0x03BC846C LDP X20, X19, [X31 + 0x10]
	0x03BC8470 MOV X1, X31
	0x03BC8474 LDP X30, X21, [X31], #0x20
	0x03BC8478 B 0x37451B4
	0x03BC847C LDP X20, X19, [X31 + 0x10]
	0x03BC8480 MOV X0, X31
	0x03BC8484 LDP X30, X21, [X31], #0x20
	0x03BC8488 RET
	0x03BC848C BL 0x1C16F20
	0x03BC8490 STP X30, X23, [X31 - 0x30]!
	0x03BC8494 STP X22, X21, [X31 + 0x10]
	0x03BC8498 STP X20, X19, [X31 + 0x20]
	0x03BC849C ADRP X22, 0x81A000
	0x03BC84A0 ADRP X23, 0x595000
	0x03BC84A4 LDRB W8, [X22 + 0xD8D]
	0x03BC84A8 LDR X23, [X23 + 0x460]
	0x03BC84AC MOV X19, X2
	0x03BC84B0 MOV X20, X1
	0x03BC84B4 MOV X21, X0
	0x03BC84B8 TBNZ X8, 0x0, 0x3BC84D0
	0x03BC84BC ADRP X0, 0x595000
	0x03BC84C0 LDR X0, [X0 + 0x460]
	0x03BC84C4 BL 0x1C16CF4
	0x03BC84C8 MOVZ W8, 0x1
	0x03BC84CC STRB W8, [X22 + 0xD8D]
	0x03BC84D0 LDR X0, [X23]
	0x03BC84D4 LDR W8, [X0 + 0xE0]
	0x03BC84D8 CBNZ W8, 0x3BC84E0
	0x03BC84DC BL 0x1C16DFC
	0x03BC84E0 MOV X0, X21
	0x03BC84E4 BL 0x3BC840C
	0x03BC84E8 CBZ X0, 0x3BC8524
	0x03BC84EC MOV X21, X0
	0x03BC84F0 CBZ X20, 0x3BC8504
	0x03BC84F4 MOV X0, X21
	0x03BC84F8 MOV X1, X20
	0x03BC84FC MOV X2, X31
	0x03BC8500 BL 0x3734A5C
	0x03BC8504 CBZ X19, 0x3BC8524
	0x03BC8508 MOV X0, X21
	0x03BC850C MOV X1, X19
	0x03BC8510 LDP X20, X19, [X31 + 0x20]
	0x03BC8514 LDP X22, X21, [X31 + 0x10]
	0x03BC8518 MOV X2, X31
	0x03BC851C LDP X30, X23, [X31], #0x30
	0x03BC8520 B 0x37349AC
	0x03BC8524 LDP X20, X19, [X31 + 0x20]
	0x03BC8528 LDP X22, X21, [X31 + 0x10]
	0x03BC852C LDP X30, X23, [X31], #0x30
	0x03BC8530 RET
	0x03BC8534 CMP W0, 0x1
	0x03BC8538 CSET W0, NE
	0x03BC853C RET
	0x03BC8540 CBZ W1, 0x3BC854C
	0x03BC8544 MOV W0, W31
	0x03BC8548 RET
	0x03BC854C LDR W0, [X0 + 0x1B4]
	0x03BC8550 RET
	0x03BC8554 CMP W0, 0x0
	0x03BC8558 CSET W0, EQ
	0x03BC855C RET
	0x03BC8560 SUB X31, X31, 0x30
	0x03BC8564 STP X30, X21, [X31 + 0x10]
	0x03BC8568 STP X20, X19, [X31 + 0x20]
	0x03BC856C ADRP X20, 0x81A000
	0x03BC8570 STP X1, X2, [X31]
	0x03BC8574 ADRP X21, 0x595000
	0x03BC8578 LDRB W8, [X20 + 0xDDA]
	0x03BC857C LDR X21, [X21 + 0x718]
	0x03BC8580 MOV X19, X0
	0x03BC8584 TBNZ X8, 0x0, 0x3BC859C
	0x03BC8588 ADRP X0, 0x595000
	0x03BC858C LDR X0, [X0 + 0x718]
	0x03BC8590 BL 0x1C16CF4
	0x03BC8594 MOVZ W8, 0x1
	0x03BC8598 STRB W8, [X20 + 0xDDA]
	0x03BC859C LDR X1, [X21]
	0x03BC85A0 ADD X0, X31, 0x0
	0x03BC85A4 BL 0x22B4C24
	0x03BC85A8 STR S0, [X19 + 0x218]
	0x03BC85AC LDP X20, X19, [X31 + 0x20]
	0x03BC85B0 LDP X30, X21, [X31 + 0x10]
	0x03BC85B4 ADD X31, X31, 0x30
	0x03BC85B8 RET
	0x03BC85BC STR W31, [X0 + 0x218]
	0x03BC85C0 RET
	0x03BC85C4 SUB X31, X31, 0x30
	0x03BC85C8 STP X30, X21, [X31 + 0x10]
	0x03BC85CC STP X20, X19, [X31 + 0x20]
	0x03BC85D0 ADRP X20, 0x81A000
	0x03BC85D4 STP X1, X2, [X31]
	0x03BC85D8 ADRP X21, 0x595000
	0x03BC85DC LDRB W8, [X20 + 0xDDB]
	0x03BC85E0 LDR X21, [X21 + 0x718]
	0x03BC85E4 MOV X19, X0
	0x03BC85E8 TBNZ X8, 0x0, 0x3BC8600
	0x03BC85EC ADRP X0, 0x595000
	0x03BC85F0 LDR X0, [X0 + 0x718]
	0x03BC85F4 BL 0x1C16CF4
	0x03BC85F8 MOVZ W8, 0x1
	0x03BC85FC STRB W8, [X20 + 0xDDB]
	0x03BC8600 LDR X1, [X21]
	0x03BC8604 ADD X0, X31, 0x0
	0x03BC8608 BL 0x22B4C24
	0x03BC860C STR S0, [X19 + 0x21C]
	0x03BC8610 LDP X20, X19, [X31 + 0x20]
	0x03BC8614 LDP X30, X21, [X31 + 0x10]
	0x03BC8618 ADD X31, X31, 0x30
	0x03BC861C RET
	0x03BC8620 STR W31, [X0 + 0x21C]
	0x03BC8624 RET
	0x03BC8628 SUB X31, X31, 0x30
	0x03BC862C STP X30, X21, [X31 + 0x10]
	0x03BC8630 STP X20, X19, [X31 + 0x20]
	0x03BC8634 ADRP X20, 0x81A000
	0x03BC8638 STP X1, X2, [X31]
	0x03BC863C ADRP X21, 0x595000
	0x03BC8640 LDRB W8, [X20 + 0xDDC]
	0x03BC8644 LDR X21, [X21 + 0x718]
	0x03BC8648 MOV X19, X0
	0x03BC864C TBNZ X8, 0x0, 0x3BC8664
	0x03BC8650 ADRP X0, 0x595000
	0x03BC8654 LDR X0, [X0 + 0x718]
	0x03BC8658 BL 0x1C16CF4
	0x03BC865C MOVZ W8, 0x1
	0x03BC8660 STRB W8, [X20 + 0xDDC]
	0x03BC8664 LDR X1, [X21]
	0x03BC8668 ADD X0, X31, 0x0
	0x03BC866C BL 0x22B4C24
	0x03BC8670 STR S0, [X19 + 0x220]
	0x03BC8674 LDP X20, X19, [X31 + 0x20]
	0x03BC8678 LDP X30, X21, [X31 + 0x10]
	0x03BC867C ADD X31, X31, 0x30
	0x03BC8680 RET
	0x03BC8684 STR W31, [X0 + 0x220]
	0x03BC8688 RET
	0x03BC868C STP X30, X19, [X31 - 0x10]!
	0x03BC8690 MOV X19, X0
	0x03BC8694 LDR W0, [X0 + 0x1F8]
	0x03BC8698 MOVZ W1, 0x2
	0x03BC869C MOV X2, X31
	0x03BC86A0 BL 0x3BC9A9C
	0x03BC86A4 STR W0, [X19 + 0x1F8]
	0x03BC86A8 LDP X30, X19, [X31], #0x10
	0x03BC86AC RET
	0x03BC86B0 STP X30, X19, [X31 - 0x10]!
	0x03BC86B4 MOV X19, X0
	0x03BC86B8 LDR W0, [X0 + 0x1F8]
	0x03BC86BC MOVZ W1, 0x2
	0x03BC86C0 MOV X2, X31
	0x03BC86C4 BL 0x3BC9AA4
	0x03BC86C8 STR W0, [X19 + 0x1F8]
	0x03BC86CC LDP X30, X19, [X31], #0x10
	0x03BC86D0 RET
	0x03BC86D4 STP X30, X19, [X31 - 0x10]!
	0x03BC86D8 MOV X19, X0
	0x03BC86DC LDR W0, [X0 + 0x1F8]
	0x03BC86E0 MOVZ W1, 0x4
	0x03BC86E4 MOV X2, X31
	0x03BC86E8 BL 0x3BC9A9C
	0x03BC86EC STR W0, [X19 + 0x1F8]
	0x03BC86F0 LDP X30, X19, [X31], #0x10
	0x03BC86F4 RET
	0x03BC86F8 STP X30, X19, [X31 - 0x10]!
	0x03BC86FC MOV X19, X0
	0x03BC8700 LDR W0, [X0 + 0x1F8]
	0x03BC8704 MOVZ W1, 0x4
	0x03BC8708 MOV X2, X31
	0x03BC870C BL 0x3BC9AA4
	0x03BC8710 STR W0, [X19 + 0x1F8]
	0x03BC8714 LDP X30, X19, [X31], #0x10
	0x03BC8718 RET
	0x03BC871C STP X30, X19, [X31 - 0x10]!
	0x03BC8720 MOV X19, X0
	0x03BC8724 LDR W0, [X0 + 0x1F8]
	0x03BC8728 MOVZ W1, 0x2
	0x03BC872C MOV X2, X31
	0x03BC8730 BL 0x3BC9AAC
	0x03BC8734 TBZ X0, 0x0, 0x3BC8740
	0x03BC8738 MOVZ W0, 0x1
	0x03BC873C B 0x3BC875C
	0x03BC8740 LDR W0, [X19 + 0x1F8]
	0x03BC8744 MOVZ W1, 0x2
	0x03BC8748 MOV X2, X31
	0x03BC874C BL 0x3BC9A9C
	0x03BC8750 MOVZ W1, 0x4
	0x03BC8754 MOV X2, X31
	0x03BC8758 BL 0x3BC9AA4
	0x03BC875C STR W0, [X19 + 0x1F8]
	0x03BC8760 LDP X30, X19, [X31], #0x10
	0x03BC8764 RET
	0x03BC8768 STP X30, X19, [X31 - 0x10]!
	0x03BC876C MOV X19, X0
	0x03BC8770 LDR W0, [X0 + 0x1F8]
	0x03BC8774 MOVZ W1, 0x4
	0x03BC8778 MOV X2, X31
	0x03BC877C BL 0x3BC9AAC
	0x03BC8780 TBZ X0, 0x0, 0x3BC878C
	0x03BC8784 MOVZ W0, 0x1

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, X0
	009 Move W0, [X0+504]
	010 And W31, W0, 6
	011 Move W8, [X19+500]
	012 Add X21, X19, 572
	013 Move TEMP, X8
	014 And TEMP, TEMP, 2
	015 Compare TEMP, 2
	016 JumpIfNotEqual {45}
	017 Move W8, [X19+508]
	018 Compare W8, 0
	019 JumpIfNotEqual {45}
	020 Move W1, 2
	021 Move X2, X31
	022 Call TargetedDevicesExtensions.HasDevice, X0, X1
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {29}
	027 Move X8, [X21]
	028 Move [X21+181], X8
	029 Move W8, [X19+508]
	030 Compare W8, 0
	031 JumpIfNotEqual {45}
	032 Move W0, [X19+504]
	033 Move W1, 4
	034 Move X2, X31
	035 Call TargetedDevicesExtensions.HasDevice, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {42}
	040 Move X8, [X21]
	041 Move [X19+816], X8
	042 Move W8, [X19+508]
	043 Compare W8, 0
	044 JumpIfEqual {87}
	045 Move W8, [X19+500]
	046 Move TEMP, X8
	047 And TEMP, TEMP, 4
	048 Compare TEMP, 4
	049 JumpIfNotEqual {79}
	050 Move W8, [X19+508]
	051 Compare W8, 0
	052 JumpIfNotEqual {79}
	053 Move W0, [X19+504]
	054 Move W1, 2
	055 Move X2, X31
	056 Call TargetedDevicesExtensions.HasDevice, X0, X1
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {63}
	061 Move X8, [X21]
	062 Move [X21+197], X8
	063 Move W8, [X19+508]
	064 Compare W8, 0
	065 JumpIfNotEqual {79}
	066 Move W0, [X19+504]
	067 Move W1, 4
	068 Move X2, X31
	069 Call TargetedDevicesExtensions.HasDevice, X0, X1
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {76}
	074 Move X8, [X21]
	075 Move [X19+832], X8
	076 Move W8, [X19+508]
	077 Compare W8, 0
	078 JumpIfEqual {99}
	079 Move X20, [X31+48]
	080 Move X19, [X31+56]
	081 Move X22, [X31+32]
	082 Move X21, [X31+40]
	083 Move X30, [X31+16]
	084 Move D9, [X31+64]
	085 Move D8, [X31+72]
	086 Return 
	087 Move W0, [X19+504]
	088 Move W1, 2
	089 Move X2, X31
	090 Call TargetedDevicesExtensions.HasDevice, X0, X1
	091 Move W8, [X19+508]
	092 Move W20, W0
	093 Compare W8, 0
	094 JumpIfEqual {111}
	095 Move TEMP, X20
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfNotEqual {45}
	099 Move W0, [X19+504]
	100 Move W1, 2
	101 Move X2, X31
	102 Call TargetedDevicesExtensions.HasDevice, X0, X1
	103 Move W8, [X19+508]
	104 Move W20, W0
	105 Compare W8, 0
	106 JumpIfEqual {186}
	107 Move TEMP, X20
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {79}
	111 Move W0, [X19+504]
	112 Move W1, 4
	113 Move X2, X31
	114 Call TargetedDevicesExtensions.HasDevice, X0, X1
	115 And W8, W0, 1
	116 And W9, W20, 1
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Move X20, 0x812000
	119 Move W8, [X20+1935]
	120 Move V9, [X21+8]
	121 Compare W8, 0
	122 JumpIfNotEqual {128}
	123 Move X0, 0x534000
	124 Move X0, [X0+3848]
	125 Call 0x1C17CF4
	126 Move W8, 1
	127 Move [X20+1935], W8
	128 Move X22, 0x534000
	129 Move X22, [X22+3848]
	130 Move X8, [X22]
	131 Move X8, [X8+184]
	132 Move V0, [X8]
	133 Move X8, -51240960
	134 Move V8, [X8+3872]
	135 Subtract V0, V9, V0
	136 NotImplemented "Instruction INVALID not yet implemented."
	137 NotImplemented "Instruction FADDP not yet implemented."
	138 NotImplemented "Instruction FCMP not yet implemented."
	139 Move W8, [X19+599]
	140 Compare W8, 0
	141 JumpIfEqual {261}
	142 Move W8, [X19+508]
	143 Compare W8, 0
	144 JumpIfNotEqual {168}
	145 Move W0, [X19+504]
	146 Move W1, 2
	147 Move X2, X31
	148 Call TargetedDevicesExtensions.HasDevice, X0, X1
	149 Move TEMP, X0
	150 And TEMP, TEMP, 1
	151 Compare TEMP, 1
	152 JumpIfNotEqual {155}
	153 Move X8, [X21+8]
	154 Move [X19+816], X8
	155 Move W8, [X19+508]
	156 Compare W8, 0
	157 JumpIfNotEqual {168}
	158 Move W0, [X19+504]
	159 Move W1, 4
	160 Move X2, X31
	161 Call TargetedDevicesExtensions.HasDevice, X0, X1
	162 Move TEMP, X0
	163 And TEMP, TEMP, 1
	164 Compare TEMP, 1
	165 JumpIfNotEqual {168}
	166 Move X8, [X21+8]
	167 Move [X21+181], X8
	168 Move W8, [X20+1935]
	169 Move V9, [X21+8]
	170 Compare W8, 0
	171 JumpIfNotEqual {177}
	172 Move X0, 0x534000
	173 Move X0, [X0+3848]
	174 Call 0x1C17CF4
	175 Move W8, 1
	176 Move [X20+1935], W8
	177 Move X8, [X22]
	178 Move X8, [X8+184]
	179 Move V0, [X8]
	180 Subtract V0, V9, V0
	181 NotImplemented "Instruction INVALID not yet implemented."
	182 NotImplemented "Instruction FADDP not yet implemented."
	183 NotImplemented "Instruction FCMP not yet implemented."
	184 NotImplemented "Instruction CSET not yet implemented."
	185 Move [X19+599], W8
	186 Move W0, [X19+504]
	187 Move W1, 4
	188 Move X2, X31
	189 Call TargetedDevicesExtensions.HasDevice, X0, X1
	190 And W8, W0, 1
	191 And W9, W20, 1
	192 NotImplemented "Instruction CMP not yet implemented."
	193 Move X20, 0x812000
	194 Move W8, [X20+1935]
	195 Move V9, [X21+8]
	196 Compare W8, 0
	197 JumpIfNotEqual {203}
	198 Move X0, 0x534000
	199 Move X0, [X0+3848]
	200 Call 0x1C17CF4
	201 Move W8, 1
	202 Move [X20+1935], W8
	203 Move X22, 0x534000
	204 Move X22, [X22+3848]
	205 Move X8, [X22]
	206 Move X8, [X8+184]
	207 Move V0, [X8]
	208 Move X8, -51240960
	209 Move V8, [X8+3872]
	210 Subtract V0, V9, V0
	211 NotImplemented "Instruction INVALID not yet implemented."
	212 NotImplemented "Instruction FADDP not yet implemented."
	213 NotImplemented "Instruction FCMP not yet implemented."
	214 Move W8, [X19+599]
	215 Compare W8, 0
	216 JumpIfEqual {262}
	217 Move W8, [X19+508]
	218 Compare W8, 0
	219 JumpIfNotEqual {243}
	220 Move W0, [X19+504]
	221 Move W1, 2
	222 Move X2, X31
	223 Call TargetedDevicesExtensions.HasDevice, X0, X1
	224 Move TEMP, X0
	225 And TEMP, TEMP, 1
	226 Compare TEMP, 1
	227 JumpIfNotEqual {230}
	228 Move X8, [X21+8]
	229 Move [X19+832], X8
	230 Move W8, [X19+508]
	231 Compare W8, 0
	232 JumpIfNotEqual {243}
	233 Move W0, [X19+504]
	234 Move W1, 4
	235 Move X2, X31
	236 Call TargetedDevicesExtensions.HasDevice, X0, X1
	237 Move TEMP, X0
	238 And TEMP, TEMP, 1
	239 Compare TEMP, 1
	240 JumpIfNotEqual {243}
	241 Move X8, [X21+8]
	242 Move [X21+197], X8
	243 Move W8, [X20+1935]
	244 Move V9, [X21+8]
	245 Compare W8, 0
	246 JumpIfNotEqual {252}
	247 Move X0, 0x534000
	248 Move X0, [X0+3848]
	249 Call 0x1C17CF4
	250 Move W8, 1
	251 Move [X20+1935], W8
	252 Move X8, [X22]
	253 Move X8, [X8+184]
	254 Move V0, [X8]
	255 Subtract V0, V9, V0
	256 NotImplemented "Instruction INVALID not yet implemented."
	257 NotImplemented "Instruction FADDP not yet implemented."
	258 NotImplemented "Instruction FCMP not yet implemented."
	259 NotImplemented "Instruction CSET not yet implemented."
	260 Move [X19+599], W8
	261 Move [X19+599], W31
	262 Move [X19+599], W31

Method: System.Void ProcessButtonControlInput(ref UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRSimulatedControllerState controllerState)

Disassembly:
	0x03BC8788 B 0x3BC87A8
	0x03BC878C LDR W0, [X19 + 0x1F8]
	0x03BC8790 MOVZ W1, 0x4
	0x03BC8794 MOV X2, X31
	0x03BC8798 BL 0x3BC9A9C
	0x03BC879C MOVZ W1, 0x2
	0x03BC87A0 MOV X2, X31
	0x03BC87A4 BL 0x3BC9AA4
	0x03BC87A8 STR W0, [X19 + 0x1F8]
	0x03BC87AC LDP X30, X19, [X31], #0x10
	0x03BC87B0 RET
	0x03BC87B4 MOVZ W8, 0x1
	0x03BC87B8 STR W8, [X0 + 0x1F8]
	0x03BC87BC RET
	0x03BC87C0 STP X30, X19, [X31 - 0x10]!
	0x03BC87C4 MOV X19, X0
	0x03BC87C8 LDR W0, [X0 + 0x1F8]
	0x03BC87CC MOVZ W1, 0x8
	0x03BC87D0 MOV X2, X31
	0x03BC87D4 BL 0x3BC9A9C
	0x03BC87D8 STR W0, [X19 + 0x1F8]
	0x03BC87DC LDP X30, X19, [X31], #0x10
	0x03BC87E0 RET
	0x03BC87E4 STP X30, X19, [X31 - 0x10]!
	0x03BC87E8 MOV X19, X0
	0x03BC87EC LDR W0, [X0 + 0x1F8]
	0x03BC87F0 MOVZ W1, 0x8
	0x03BC87F4 MOV X2, X31
	0x03BC87F8 BL 0x3BC9AA4
	0x03BC87FC STR W0, [X19 + 0x1F8]
	0x03BC8800 LDP X30, X19, [X31], #0x10
	0x03BC8804 RET
	0x03BC8808 RET
	0x03BC880C STP X30, X19, [X31 - 0x10]!
	0x03BC8810 MOV X19, X0
	0x03BC8814 LDR W0, [X0 + 0x1F8]
	0x03BC8818 CBZ W0, 0x3BC8858
	0x03BC881C CMP W0, 0x1
	0x03BC8820 B.NE 0x3BC882C
	0x03BC8824 MOVZ W8, 0x2
	0x03BC8828 B 0x3BC885C
	0x03BC882C MOVZ W1, 0x2
	0x03BC8830 MOV X2, X31
	0x03BC8834 BL 0x3BC9AAC
	0x03BC8838 TBZ X0, 0x0, 0x3BC8844
	0x03BC883C MOVZ W8, 0x4
	0x03BC8840 B 0x3BC885C
	0x03BC8844 LDR W0, [X19 + 0x1F8]
	0x03BC8848 MOVZ W1, 0x4
	0x03BC884C MOV X2, X31
	0x03BC8850 BL 0x3BC9AAC
	0x03BC8854 TBZ X0, 0x0, 0x3BC8860
	0x03BC8858 MOVZ W8, 0x1
	0x03BC885C STR W8, [X19 + 0x1F8]
	0x03BC8860 LDP X30, X19, [X31], #0x10
	0x03BC8864 RET
	0x03BC8868 STR W31, [X0 + 0x1F8]
	0x03BC886C RET
	0x03BC8870 SUB X31, X31, 0x30
	0x03BC8874 STP X30, X21, [X31 + 0x10]
	0x03BC8878 STP X20, X19, [X31 + 0x20]
	0x03BC887C ADRP X20, 0x81A000
	0x03BC8880 STP X1, X2, [X31]
	0x03BC8884 ADRP X21, 0x581000
	0x03BC8888 LDRB W8, [X20 + 0xDDD]
	0x03BC888C LDR X21, [X21 + 0x540]
	0x03BC8890 MOV X19, X0
	0x03BC8894 TBNZ X8, 0x0, 0x3BC88AC
	0x03BC8898 ADRP X0, 0x581000
	0x03BC889C LDR X0, [X0 + 0x540]
	0x03BC88A0 BL 0x1C16CF4
	0x03BC88A4 MOVZ W8, 0x1
	0x03BC88A8 STRB W8, [X20 + 0xDDD]
	0x03BC88AC LDR X1, [X21]
	0x03BC88B0 ADD X0, X31, 0x0
	0x03BC88B4 BL 0x22B4CFC
	0x03BC88B8 STR S0, [X19 + 0x224]
	0x03BC88BC STR S1, [X19 + 0x228]
	0x03BC88C0 LDP X20, X19, [X31 + 0x20]
	0x03BC88C4 LDP X30, X21, [X31 + 0x10]
	0x03BC88C8 ADD X31, X31, 0x30
	0x03BC88CC RET
	0x03BC88D0 STR X30, [X31 - 0x20]!
	0x03BC88D4 STP X20, X19, [X31 + 0x10]
	0x03BC88D8 ADRP X20, 0x811000
	0x03BC88DC LDRB W8, [X20 + 0x78F]
	0x03BC88E0 MOV X19, X0
	0x03BC88E4 CBNZ W8, 0x3BC88FC
	0x03BC88E8 ADRP X0, 0x533000
	0x03BC88EC LDR X0, [X0 + 0xF08]
	0x03BC88F0 BL 0x1C16CF4
	0x03BC88F4 MOVZ W8, 0x1
	0x03BC88F8 STRB W8, [X20 + 0x78F]
	0x03BC88FC ADRP X8, 0x533000
	0x03BC8900 LDR X8, [X8 + 0xF08]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+80], D8
	003 Move [X31+96], X30
	004 Move [X31+104], X21
	005 Move [X31+112], X20
	006 Move [X31+120], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X21+40]
	009 Move X19, X1
	010 Move X20, X0
	011 Move S8, W31
	012 Move [X31+72], X8
	013 Move W8, [X0+588]
	014 Move S0, W31
	015 Compare W8, 0
	016 JumpIfEqual {18}
	017 Move V0, [X20+456]
	018 Move [X19+12], S0
	019 Move W2, [X20+588]
	020 Add X8, X31, 8
	021 Move W1, 4
	022 Move X0, X19
	023 Move X3, X31
	024 Call XRSimulatedControllerState.WithButton, X0, X1, X2
	025 Move W8, [X20+589]
	026 Compare W8, 0
	027 JumpIfEqual {29}
	028 Move V8, [X20+460]
	029 Move [X19+8], S8
	030 Move W2, [X20+589]
	031 Add X8, X31, 8
	032 Move W1, 5
	033 Move X0, X19
	034 Move X3, X31
	035 Call XRSimulatedControllerState.WithButton, X0, X1, X2
	036 Move W2, [X20+590]
	037 Add X8, X31, 8
	038 Move X0, X19
	039 Move W1, W31
	040 Move X3, X31
	041 Call XRSimulatedControllerState.WithButton, X0, X1, X2
	042 Move W2, [X20+591]
	043 Add X8, X31, 8
	044 Move W1, 2
	045 Move X0, X19
	046 Move X3, X31
	047 Call XRSimulatedControllerState.WithButton, X0, X1, X2
	048 Move W2, [X20+592]
	049 Add X8, X31, 8
	050 Move W1, 6
	051 Move X0, X19
	052 Move X3, X31
	053 Call XRSimulatedControllerState.WithButton, X0, X1, X2
	054 Move W2, [X20+593]
	055 Add X8, X31, 8
	056 Move W1, 7
	057 Move X0, X19
	058 Move X3, X31
	059 Call XRSimulatedControllerState.WithButton, X0, X1, X2
	060 Move W2, [X20+594]
	061 Add X8, X31, 8
	062 Move W1, 9
	063 Move X0, X19
	064 Move X3, X31
	065 Call XRSimulatedControllerState.WithButton, X0, X1, X2
	066 Move W2, [X20+595]
	067 Add X8, X31, 8
	068 Move W1, 8
	069 Move X0, X19
	070 Move X3, X31
	071 Call XRSimulatedControllerState.WithButton, X0, X1, X2
	072 Move W2, [X20+596]
	073 Add X8, X31, 8
	074 Move W1, 10
	075 Move X0, X19
	076 Move X3, X31
	077 Call XRSimulatedControllerState.WithButton, X0, X1, X2
	078 Move W2, [X20+597]
	079 Add X8, X31, 8
	080 Move W1, 1
	081 Move X0, X19
	082 Move X3, X31
	083 Call XRSimulatedControllerState.WithButton, X0, X1, X2
	084 Move W2, [X20+598]
	085 Add X8, X31, 8
	086 Move W1, 3
	087 Move X0, X19
	088 Move X3, X31
	089 Call XRSimulatedControllerState.WithButton, X0, X1, X2
	090 Move X8, [X21+40]
	091 Move X9, [X31+72]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X20, [X31+112]
	094 Move X19, [X31+120]
	095 Move X30, [X31+96]
	096 Move X21, [X31+104]
	097 Move V8, [X31+80]
	098 Add X31, X31, 128
	099 Return 
	100 Call 0x3EB2B20

Method: System.Void ProcessAnalogButtonControlInput(ref UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRSimulatedControllerState controllerState)

Disassembly:
	0x03BC8904 LDR X8, [X8]
	0x03BC8908 LDR X8, [X8 + 0xB8]
	0x03BC890C LDR V0, [X8]
	0x03BC8910 ADD X8, X19, 0x224
	0x03BC8914 LDP X20, X19, [X31 + 0x10]
	0x03BC8918 STR D0, [X8]
	0x03BC891C LDR X30, [X31], #0x20
	0x03BC8920 RET
	0x03BC8924 SUB X31, X31, 0x30
	0x03BC8928 STP X30, X21, [X31 + 0x10]
	0x03BC892C STP X20, X19, [X31 + 0x20]
	0x03BC8930 ADRP X20, 0x81A000
	0x03BC8934 STP X1, X2, [X31]
	0x03BC8938 ADRP X21, 0x581000
	0x03BC893C LDRB W8, [X20 + 0xDDE]
	0x03BC8940 LDR X21, [X21 + 0x540]
	0x03BC8944 MOV X19, X0
	0x03BC8948 TBNZ X8, 0x0, 0x3BC8960
	0x03BC894C ADRP X0, 0x581000
	0x03BC8950 LDR X0, [X0 + 0x540]
	0x03BC8954 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Move W1, 4
	007 Move X0, X19
	008 Move X2, X31
	009 Call XRSimulatedControllerState.HasButton, X0, X1
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {16}
	014 Move V0, [X20+456]
	015 Move [X19+12], S0
	016 Move W1, 5
	017 Move X0, X19
	018 Move X2, X31
	019 Call XRSimulatedControllerState.HasButton, X0, X1
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {26}
	024 Move V0, [X20+460]
	025 Move [X19+8], S0
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return 

Method: System.Void AddDevices()

Disassembly:
	0x03BC8958 MOVZ W8, 0x1
	0x03BC895C STRB W8, [X20 + 0xDDE]
	0x03BC8960 LDR X1, [X21]
	0x03BC8964 ADD X0, X31, 0x0
	0x03BC8968 BL 0x22B4CFC
	0x03BC896C STR S0, [X19 + 0x22C]
	0x03BC8970 STR S1, [X19 + 0x230]
	0x03BC8974 LDP X20, X19, [X31 + 0x20]
	0x03BC8978 LDP X30, X21, [X31 + 0x10]
	0x03BC897C ADD X31, X31, 0x30
	0x03BC8980 RET
	0x03BC8984 STR X30, [X31 - 0x20]!
	0x03BC8988 STP X20, X19, [X31 + 0x10]
	0x03BC898C ADRP X20, 0x811000
	0x03BC8990 LDRB W8, [X20 + 0x78F]
	0x03BC8994 MOV X19, X0
	0x03BC8998 CBNZ W8, 0x3BC89B0
	0x03BC899C ADRP X0, 0x533000
	0x03BC89A0 LDR X0, [X0 + 0xF08]
	0x03BC89A4 BL 0x1C16CF4
	0x03BC89A8 MOVZ W8, 0x1
	0x03BC89AC STRB W8, [X20 + 0x78F]
	0x03BC89B0 ADRP X8, 0x533000
	0x03BC89B4 LDR X8, [X8 + 0xF08]
	0x03BC89B8 LDR X8, [X8]
	0x03BC89BC LDR X8, [X8 + 0xB8]
	0x03BC89C0 LDR V0, [X8]
	0x03BC89C4 ADD X8, X19, 0x22C
	0x03BC89C8 LDP X20, X19, [X31 + 0x10]
	0x03BC89CC STR D0, [X8]
	0x03BC89D0 LDR X30, [X31], #0x20
	0x03BC89D4 RET
	0x03BC89D8 MOVZ W8, 0x1
	0x03BC89DC STRB W8, [X0 + 0x234]
	0x03BC89E0 RET
	0x03BC89E4 STRB W31, [X0 + 0x234]
	0x03BC89E8 RET
	0x03BC89EC STP X30, X21, [X31 - 0x20]!
	0x03BC89F0 STP X20, X19, [X31 + 0x10]
	0x03BC89F4 ADRP X21, 0x81A000
	0x03BC89F8 ADRP X20, 0x595000
	0x03BC89FC LDRB W8, [X21 + 0xDDF]
	0x03BC8A00 LDR X20, [X20 + 0x460]
	0x03BC8A04 MOV X19, X0
	0x03BC8A08 TBNZ X8, 0x0, 0x3BC8A20
	0x03BC8A0C ADRP X0, 0x595000
	0x03BC8A10 LDR X0, [X0 + 0x460]
	0x03BC8A14 BL 0x1C16CF4
	0x03BC8A18 MOVZ W8, 0x1
	0x03BC8A1C STRB W8, [X21 + 0xDDF]
	0x03BC8A20 LDR X0, [X20]
	0x03BC8A24 LDR W20, [X19 + 0x1EC]
	0x03BC8A28 LDR W8, [X0 + 0xE0]
	0x03BC8A2C CBNZ W8, 0x3BC8A34
	0x03BC8A30 BL 0x1C16DFC
	0x03BC8A34 CMP W20, 0x1
	0x03BC8A38 CSET W8, NE
	0x03BC8A3C STR W8, [X19 + 0x1EC]
	0x03BC8A40 LDP X20, X19, [X31 + 0x10]
	0x03BC8A44 LDP X30, X21, [X31], #0x20
	0x03BC8A48 RET
	0x03BC8A4C MOVZ W8, 0x1
	0x03BC8A50 STRB W8, [X0 + 0x1F0]
	0x03BC8A54 RET
	0x03BC8A58 STRB W31, [X0 + 0x1F0]
	0x03BC8A5C RET
	0x03BC8A60 MOVZ W8, 0x1
	0x03BC8A64 STRB W8, [X0 + 0x235]
	0x03BC8A68 RET
	0x03BC8A6C STRB W31, [X0 + 0x235]
	0x03BC8A70 RET
	0x03BC8A74 MOVZ W8, 0x1
	0x03BC8A78 STRB W8, [X0 + 0x236]
	0x03BC8A7C RET
	0x03BC8A80 STRB W31, [X0 + 0x236]
	0x03BC8A84 RET
	0x03BC8A88 MOVZ W8, 0x1
	0x03BC8A8C STRB W8, [X0 + 0x237]
	0x03BC8A90 RET
	0x03BC8A94 STRB W31, [X0 + 0x237]
	0x03BC8A98 RET
	0x03BC8A9C MOVZ W8, 0x1
	0x03BC8AA0 STRB W8, [X0 + 0x238]
	0x03BC8AA4 RET
	0x03BC8AA8 STRB W31, [X0 + 0x238]
	0x03BC8AAC RET
	0x03BC8AB0 STP X30, X19, [X31 - 0x10]!
	0x03BC8AB4 MOV X19, X0
	0x03BC8AB8 MOV X0, X31
	0x03BC8ABC BL 0x3C246D4
	0x03BC8AC0 CBZ W0, 0x3BC8ACC
	0x03BC8AC4 MOV W0, W31
	0x03BC8AC8 B 0x3BC8AD0
	0x03BC8ACC LDR W0, [X19 + 0x1B4]
	0x03BC8AD0 MOV X1, X31
	0x03BC8AD4 LDP X30, X19, [X31], #0x10
	0x03BC8AD8 B 0x3C246FC
	0x03BC8ADC STR X30, [X31 - 0x10]!
	0x03BC8AE0 CBZ X0, 0x3BC8AFC
	0x03BC8AE4 LDR W8, [X0 + 0x1F4]
	0x03BC8AE8 ORN W8, W31, W8, 0x0
	0x03BC8AEC AND W8, W8, 0x1
	0x03BC8AF0 STR W8, [X0 + 0x1F4]
	0x03BC8AF4 LDR X30, [X31], #0x10
	0x03BC8AF8 RET
	0x03BC8AFC BL 0x1C16F20
	0x03BC8B00 STR X30, [X31 - 0x10]!
	0x03BC8B04 CBZ X0, 0x3BC8B20
	0x03BC8B08 LDR W8, [X0 + 0x1F4]
	0x03BC8B0C ORN W8, W31, W8, 0x0
	0x03BC8B10 AND W8, W8, 0x2
	0x03BC8B14 STR W8, [X0 + 0x1F4]
	0x03BC8B18 LDR X30, [X31], #0x10
	0x03BC8B1C RET
	0x03BC8B20 BL 0x1C16F20
	0x03BC8B24 STR X30, [X31 - 0x10]!
	0x03BC8B28 CBZ X0, 0x3BC8B44
	0x03BC8B2C LDR W8, [X0 + 0x1F4]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+144], X30
	003 Move [X31+160], X22
	004 Move [X31+168], X21
	005 Move [X31+176], X20
	006 Move [X31+184], X19
	007 Move X20, 0x81B000
	008 Move W8, [X20+3459]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {34}
	014 Move X0, 0x52C000
	015 Move X0, [X0+2600]
	016 Call 0x1C17CF4
	017 Move X0, 0x554000
	018 Move X0, [X0+624]
	019 Call 0x1C17CF4
	020 Move X0, 0x596000
	021 Move X0, [X0+1776]
	022 Call 0x1C17CF4
	023 Move X0, 0x596000
	024 Move X0, [X0+1728]
	025 Call 0x1C17CF4
	026 Move X0, 0x596000
	027 Move X0, [X0+1784]
	028 Call 0x1C17CF4
	029 Move X0, 0x596000
	030 Move X0, [X0+1088]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+3459], W8
	034 Move X22, 0x554000
	035 Move X20, [X19+880]
	036 Move X22, [X22+624]
	037 Compare X20, 0
	038 JumpIfEqual {47}
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X31
	046 Call InputSystem.AddDevice, X0
	047 Move [X31+120], X31
	048 Move [X31+128], X31
	049 Move X8, 0x596000
	050 Move X9, 0x596000
	051 Move X8, [X8+1088]
	052 Move X9, [X9+1776]
	053 Move [X31+136], X31
	054 Move [X31+104], X31
	055 Move [X31+112], X31
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X1, X31
	060 Move X20, X0
	061 Call XRDeviceDescriptor..ctor, X0
	062 Compare X20, 0
	063 JumpIfEqual {133}
	064 Move W8, 33
	065 Move X0, X20
	066 Move X1, X31
	067 Move [X20+40], W8
	068 Call XRDeviceDescriptor.ToJson, X0
	069 Move X9, [X31+136]
	070 NotImplemented "Instruction LDUR not yet implemented."
	071 NotImplemented "Instruction LDUR not yet implemented."
	072 Move X8, [X22]
	073 Move [X31+96], X9
	074 Move X20, X0
	075 Move [X31+64], V1
	076 Move [X31+72], V0
	077 Move W9, [X8+224]
	078 Compare W9, 0
	079 JumpIfNotEqual {82}
	080 Move X0, X8
	081 Call 0x1C17DFC
	082 Move V1, [X31+64]
	083 Move V0, [X31+80]
	084 Move X8, [X31+96]
	085 Add X0, X31, 0
	086 Move X1, X31
	087 Move [X31], V0
	088 Move [X31+16], X8
	089 Move [X31+24], X21
	090 Move [X31+2], V1
	091 Move [X31+48], X20
	092 Call InputSystem.AddDevice, X0
	093 Compare X0, 0
	094 JumpIfEqual {106}
	095 Move X8, 0x596000
	096 Move X8, [X8+1728]
	097 Move X9, [X0]
	098 Move X8, [X8]
	099 Move W11, [X9+304]
	100 Move W10, [X8+304]
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X9, [X9+200]
	103 Add X9, X9, X10
	104 NotImplemented "Instruction LDUR not yet implemented."
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move [X19+880], X31
	107 Move X8, 0x52C000
	108 Move X8, [X8+2600]
	109 Move X0, [X8]
	110 Move W8, [X0+224]
	111 Compare W8, 0
	112 JumpIfNotEqual {114}
	113 Call 0x1C17DFC
	114 Move X8, 0x596000
	115 Move X8, [X8+1784]
	116 Move X1, X19
	117 Move X2, X31
	118 Move X0, [X8]
	119 Call Debug.LogError, X0, X1
	120 Move W8, [X19+508]
	121 Compare W8, 0
	122 JumpIfNotEqual {125}
	123 Move X0, X19
	124 Call XRDeviceSimulator.AddControllerDevices, X0
	125 Move X20, [X31+176]
	126 Move X19, [X31+184]
	127 Move X22, [X31+160]
	128 Move X21, [X31+168]
	129 Move X30, [X31+144]
	130 Add X31, X31, 192
	131 Return 
	132 Move [X19+880], X0
	133 Call 0x1C17F20

Method: System.Void AddControllerDevices()

Disassembly:
	0x03BC8B30 ORN W8, W31, W8, 0x0
	0x03BC8B34 AND W8, W8, 0x4
	0x03BC8B38 STR W8, [X0 + 0x1F4]
	0x03BC8B3C LDR X30, [X31], #0x10
	0x03BC8B40 RET
	0x03BC8B44 BL 0x1C16F20
	0x03BC8B48 SUB X31, X31, 0x50
	0x03BC8B4C STR D10, [X31 + 0x10]
	0x03BC8B50 STP D9, D8, [X31 + 0x20]
	0x03BC8B54 STP X30, X21, [X31 + 0x30]
	0x03BC8B58 STP X20, X19, [X31 + 0x40]
	0x03BC8B5C ADRP X20, 0x81A000
	0x03BC8B60 STP X1, X2, [X31]
	0x03BC8B64 ADRP X21, 0x581000
	0x03BC8B68 LDRB W8, [X20 + 0xDE0]
	0x03BC8B6C LDR X21, [X21 + 0x540]
	0x03BC8B70 MOV X19, X0
	0x03BC8B74 TBNZ X8, 0x0, 0x3BC8B8C
	0x03BC8B78 ADRP X0, 0x581000
	0x03BC8B7C LDR X0, [X0 + 0x540]
	0x03BC8B80 BL 0x1C16CF4
	0x03BC8B84 MOVZ W8, 0x1
	0x03BC8B88 STRB W8, [X20 + 0xDE0]
	0x03BC8B8C LDR X1, [X21]
	0x03BC8B90 ADD X0, X31, 0x0
	0x03BC8B94 BL 0x22B4CFC
	0x03BC8B98 ADRP X20, 0x819000
	0x03BC8B9C LDRB W8, [X20 + 0x393]
	0x03BC8BA0 MOV V8.16B, V0.16B
	0x03BC8BA4 MOV V9.16B, V1.16B
	0x03BC8BA8 CBNZ W8, 0x3BC8BC0
	0x03BC8BAC ADRP X0, 0x52B000
	0x03BC8BB0 LDR X0, [X0 + 0x5A8]
	0x03BC8BB4 BL 0x1C16CF4
	0x03BC8BB8 MOVZ W8, 0x1
	0x03BC8BBC STRB W8, [X20 + 0x393]
	0x03BC8BC0 FMUL S0, S8, S8
	0x03BC8BC4 FMUL S1, S9, S9
	0x03BC8BC8 FADD S10, S0, S1
	0x03BC8BCC FMOV S0, 1
	0x03BC8BD0 FCMP S10, S0
	0x03BC8BD4 B.LE 0x3BC8BFC
	0x03BC8BD8 ADRP X8, 0x52B000
	0x03BC8BDC LDR X8, [X8 + 0x5A8]
	0x03BC8BE0 LDR X0, [X8]
	0x03BC8BE4 LDR W8, [X0 + 0xE0]
	0x03BC8BE8 CBNZ W8, 0x3BC8BF0
	0x03BC8BEC BL 0x1C16DFC
	0x03BC8BF0 FSQRT S0, S10
	0x03BC8BF4 FDIV S8, S8, S0
	0x03BC8BF8 FDIV S9, S9, S0
	0x03BC8BFC STR S8, [X19 + 0x23C]
	0x03BC8C00 STR S9, [X19 + 0x240]
	0x03BC8C04 LDP X20, X19, [X31 + 0x40]
	0x03BC8C08 LDP X30, X21, [X31 + 0x30]
	0x03BC8C0C LDP D9, D8, [X31 + 0x20]
	0x03BC8C10 LDR V10, [X31 + 0x10]
	0x03BC8C14 ADD X31, X31, 0x50
	0x03BC8C18 RET
	0x03BC8C1C STR X30, [X31 - 0x20]!
	0x03BC8C20 STP X20, X19, [X31 + 0x10]
	0x03BC8C24 ADRP X20, 0x811000
	0x03BC8C28 LDRB W8, [X20 + 0x78F]
	0x03BC8C2C MOV X19, X0
	0x03BC8C30 CBNZ W8, 0x3BC8C48
	0x03BC8C34 ADRP X0, 0x533000
	0x03BC8C38 LDR X0, [X0 + 0xF08]
	0x03BC8C3C BL 0x1C16CF4
	0x03BC8C40 MOVZ W8, 0x1
	0x03BC8C44 STRB W8, [X20 + 0x78F]
	0x03BC8C48 ADRP X8, 0x533000
	0x03BC8C4C LDR X8, [X8 + 0xF08]
	0x03BC8C50 LDR X8, [X8]
	0x03BC8C54 LDR X8, [X8 + 0xB8]
	0x03BC8C58 LDR V0, [X8]
	0x03BC8C5C ADD X8, X19, 0x23C
	0x03BC8C60 LDP X20, X19, [X31 + 0x10]
	0x03BC8C64 STR D0, [X8]
	0x03BC8C68 LDR X30, [X31], #0x20
	0x03BC8C6C RET
	0x03BC8C70 SUB X31, X31, 0x50
	0x03BC8C74 STR D10, [X31 + 0x10]
	0x03BC8C78 STP D9, D8, [X31 + 0x20]
	0x03BC8C7C STP X30, X21, [X31 + 0x30]
	0x03BC8C80 STP X20, X19, [X31 + 0x40]
	0x03BC8C84 ADRP X20, 0x81A000
	0x03BC8C88 STP X1, X2, [X31]
	0x03BC8C8C ADRP X21, 0x581000
	0x03BC8C90 LDRB W8, [X20 + 0xDE1]
	0x03BC8C94 LDR X21, [X21 + 0x540]
	0x03BC8C98 MOV X19, X0
	0x03BC8C9C TBNZ X8, 0x0, 0x3BC8CB4
	0x03BC8CA0 ADRP X0, 0x581000
	0x03BC8CA4 LDR X0, [X0 + 0x540]
	0x03BC8CA8 BL 0x1C16CF4
	0x03BC8CAC MOVZ W8, 0x1
	0x03BC8CB0 STRB W8, [X20 + 0xDE1]
	0x03BC8CB4 LDR X1, [X21]
	0x03BC8CB8 ADD X0, X31, 0x0
	0x03BC8CBC BL 0x22B4CFC
	0x03BC8CC0 ADRP X20, 0x819000
	0x03BC8CC4 LDRB W8, [X20 + 0x393]
	0x03BC8CC8 MOV V8.16B, V0.16B
	0x03BC8CCC MOV V9.16B, V1.16B
	0x03BC8CD0 CBNZ W8, 0x3BC8CE8
	0x03BC8CD4 ADRP X0, 0x52B000
	0x03BC8CD8 LDR X0, [X0 + 0x5A8]
	0x03BC8CDC BL 0x1C16CF4
	0x03BC8CE0 MOVZ W8, 0x1
	0x03BC8CE4 STRB W8, [X20 + 0x393]
	0x03BC8CE8 FMUL S0, S8, S8
	0x03BC8CEC FMUL S1, S9, S9
	0x03BC8CF0 FADD S10, S0, S1
	0x03BC8CF4 FMOV S0, 1
	0x03BC8CF8 FCMP S10, S0
	0x03BC8CFC B.LE 0x3BC8D24
	0x03BC8D00 ADRP X8, 0x52B000
	0x03BC8D04 LDR X8, [X8 + 0x5A8]
	0x03BC8D08 LDR X0, [X8]
	0x03BC8D0C LDR W8, [X0 + 0xE0]
	0x03BC8D10 CBNZ W8, 0x3BC8D18
	0x03BC8D14 BL 0x1C16DFC
	0x03BC8D18 FSQRT S0, S10
	0x03BC8D1C FDIV S8, S8, S0
	0x03BC8D20 FDIV S9, S9, S0
	0x03BC8D24 STR S8, [X19 + 0x244]
	0x03BC8D28 STR S9, [X19 + 0x248]
	0x03BC8D2C LDP X20, X19, [X31 + 0x40]
	0x03BC8D30 LDP X30, X21, [X31 + 0x30]
	0x03BC8D34 LDP D9, D8, [X31 + 0x20]
	0x03BC8D38 LDR V10, [X31 + 0x10]
	0x03BC8D3C ADD X31, X31, 0x50
	0x03BC8D40 RET
	0x03BC8D44 STR X30, [X31 - 0x20]!
	0x03BC8D48 STP X20, X19, [X31 + 0x10]
	0x03BC8D4C ADRP X20, 0x811000
	0x03BC8D50 LDRB W8, [X20 + 0x78F]
	0x03BC8D54 MOV X19, X0
	0x03BC8D58 CBNZ W8, 0x3BC8D70
	0x03BC8D5C ADRP X0, 0x533000
	0x03BC8D60 LDR X0, [X0 + 0xF08]
	0x03BC8D64 BL 0x1C16CF4
	0x03BC8D68 MOVZ W8, 0x1
	0x03BC8D6C STRB W8, [X20 + 0x78F]
	0x03BC8D70 ADRP X8, 0x533000
	0x03BC8D74 LDR X8, [X8 + 0xF08]
	0x03BC8D78 LDR X8, [X8]
	0x03BC8D7C LDR X8, [X8 + 0xB8]
	0x03BC8D80 LDR V0, [X8]
	0x03BC8D84 ADD X8, X19, 0x244
	0x03BC8D88 LDP X20, X19, [X31 + 0x10]
	0x03BC8D8C STR D0, [X8]
	0x03BC8D90 LDR X30, [X31], #0x20
	0x03BC8D94 RET
	0x03BC8D98 MOVZ W8, 0x1
	0x03BC8D9C STRB W8, [X0 + 0x24C]
	0x03BC8DA0 RET
	0x03BC8DA4 STRB W31, [X0 + 0x24C]
	0x03BC8DA8 RET
	0x03BC8DAC MOVZ W8, 0x1
	0x03BC8DB0 STRB W8, [X0 + 0x24D]
	0x03BC8DB4 RET
	0x03BC8DB8 STRB W31, [X0 + 0x24D]
	0x03BC8DBC RET
	0x03BC8DC0 MOVZ W8, 0x1
	0x03BC8DC4 STRB W8, [X0 + 0x24E]
	0x03BC8DC8 RET
	0x03BC8DCC STRB W31, [X0 + 0x24E]
	0x03BC8DD0 RET
	0x03BC8DD4 MOVZ W8, 0x1
	0x03BC8DD8 STRB W8, [X0 + 0x24F]
	0x03BC8DDC RET
	0x03BC8DE0 STRB W31, [X0 + 0x24F]
	0x03BC8DE4 RET
	0x03BC8DE8 MOVZ W8, 0x1
	0x03BC8DEC STRB W8, [X0 + 0x250]
	0x03BC8DF0 RET
	0x03BC8DF4 STRB W31, [X0 + 0x250]
	0x03BC8DF8 RET
	0x03BC8DFC MOVZ W8, 0x1
	0x03BC8E00 STRB W8, [X0 + 0x251]
	0x03BC8E04 RET
	0x03BC8E08 STRB W31, [X0 + 0x251]
	0x03BC8E0C RET
	0x03BC8E10 MOVZ W8, 0x1
	0x03BC8E14 STRB W8, [X0 + 0x252]
	0x03BC8E18 RET
	0x03BC8E1C STRB W31, [X0 + 0x252]
	0x03BC8E20 RET
	0x03BC8E24 MOVZ W8, 0x1
	0x03BC8E28 STRB W8, [X0 + 0x253]
	0x03BC8E2C RET
	0x03BC8E30 STRB W31, [X0 + 0x253]
	0x03BC8E34 RET
	0x03BC8E38 MOVZ W8, 0x1
	0x03BC8E3C STRB W8, [X0 + 0x254]
	0x03BC8E40 RET
	0x03BC8E44 STRB W31, [X0 + 0x254]
	0x03BC8E48 RET
	0x03BC8E4C MOVZ W8, 0x1
	0x03BC8E50 STRB W8, [X0 + 0x255]
	0x03BC8E54 RET
	0x03BC8E58 STRB W31, [X0 + 0x255]
	0x03BC8E5C RET
	0x03BC8E60 MOVZ W8, 0x1
	0x03BC8E64 STRB W8, [X0 + 0x256]
	0x03BC8E68 RET
	0x03BC8E6C STRB W31, [X0 + 0x256]
	0x03BC8E70 RET
	0x03BC8E74 STP X30, X21, [X31 - 0x20]!
	0x03BC8E78 STP X20, X19, [X31 + 0x10]
	0x03BC8E7C CBZ X0, 0x3BC8EDC
	0x03BC8E80 LDR W21, [X0]
	0x03BC8E84 MOV X20, X0
	0x03BC8E88 MOV X0, X31
	0x03BC8E8C MOV X19, X1
	0x03BC8E90 BL 0x37FF4BC
	0x03BC8E94 CMP W21, W0
	0x03BC8E98 B.NE 0x3BC8EA4
	0x03BC8E9C MOVZ W8, 0x1
	0x03BC8EA0 B 0x3BC8EBC
	0x03BC8EA4 MOV X0, X31
	0x03BC8EA8 BL 0x37FEC44
	0x03BC8EAC CMP W21, W0
	0x03BC8EB0 B.NE 0x3BC8EC4
	0x03BC8EB4 MOVZ W8, 0x1
	0x03BC8EB8 STRB W8, [X20 + 0x8]
	0x03BC8EBC MOVZ W0, 0x1
	0x03BC8EC0 B 0x3BC8ECC
	0x03BC8EC4 MOV X8, X31
	0x03BC8EC8 MOV W0, W31
	0x03BC8ECC STR X8, [X19]
	0x03BC8ED0 LDP X20, X19, [X31 + 0x10]
	0x03BC8ED4 LDP X30, X21, [X31], #0x20
	0x03BC8ED8 RET
	0x03BC8EDC BL 0x1C16F20
	0x03BC8EE0 STP X30, X23, [X31 - 0x30]!
	0x03BC8EE4 STP X22, X21, [X31 + 0x10]
	0x03BC8EE8 STP X20, X19, [X31 + 0x20]
	0x03BC8EEC ADRP X22, 0x81A000
	0x03BC8EF0 ADRP X23, 0x595000
	0x03BC8EF4 ADRP X20, 0x595000
	0x03BC8EF8 LDRB W8, [X22 + 0xDE3]
	0x03BC8EFC LDR X23, [X23 + 0x720]
	0x03BC8F00 LDR X20, [X20 + 0x728]
	0x03BC8F04 MOV X19, X0
	0x03BC8F08 ADD X21, X0, 0x188
	0x03BC8F0C TBNZ X8, 0x0, 0x3BC8F30
	0x03BC8F10 ADRP X0, 0x595000
	0x03BC8F14 LDR X0, [X0 + 0x728]
	0x03BC8F18 BL 0x1C16CF4
	0x03BC8F1C ADRP X0, 0x595000
	0x03BC8F20 LDR X0, [X0 + 0x720]
	0x03BC8F24 BL 0x1C16CF4
	0x03BC8F28 MOVZ W8, 0x1
	0x03BC8F2C STRB W8, [X22 + 0xDE3]
	0x03BC8F30 LDR X0, [X23]
	0x03BC8F34 BL 0x1C16F10
	0x03BC8F38 LDR X1, [X20]
	0x03BC8F3C MOV X20, X0
	0x03BC8F40 BL 0x301B7C4
	0x03BC8F44 ADRP X9, 0xFFFFFFFFFCF24000
	0x03BC8F48 ADRP X10, 0xFFFFFFFFFCF22000
	0x03BC8F4C LDR V0, [X9 + 0x33]
	0x03BC8F50 LDR V1, [X10 + 0xFA]
	0x03BC8F54 MOVZ W8, 0x2
	0x03BC8F58 STR X20, [X19 + 0x170]
	0x03BC8F5C ADRP X9, 0xFFFFFFFFFCF25000
	0x03BC8F60 STR W8, [X19 + 0x184]
	0x03BC8F64 STP V0, V1, [X21]
	0x03BC8F68 FMOV V0.2S, 0x0
	0x03BC8F6C ADRP X10, 0xFFFFFFFFFCF25000
	0x03BC8F70 LDR V2, [X9 + 0xBA8]
	0x03BC8F74 STR D0, [X19 + 0x1C8]
	0x03BC8F78 LDR V0, [X10 + 0xA18]
	0x03BC8F7C MOVZ W8, 0x1
	0x03BC8F80 MOVZ W9, 0x101
	0x03BC8F84 MOVZ W10, 0x3
	0x03BC8F88 STR D2, [X19 + 0x1A8]
	0x03BC8F8C STR W8, [X19 + 0x1B4]
	0x03BC8F90 STRH W9, [X19 + 0x1B8]
	0x03BC8F94 STRB W8, [X19 + 0x1D0]
	0x03BC8F98 STR W10, [X19 + 0x1D4]
	0x03BC8F9C STRB W8, [X19 + 0x1D8]
	0x03BC8FA0 STR W10, [X19 + 0x1DC]
	0x03BC8FA4 STRB W8, [X19 + 0x1E0]
	0x03BC8FA8 STR W10, [X19 + 0x1E4]
	0x03BC8FAC STRH W9, [X19 + 0x1E8]
	0x03BC8FB0 STR W8, [X19 + 0x1EC]
	0x03BC8FB4 STUR D0, [X21 + 0x6C]
	0x03BC8FB8 MOV X0, X19
	0x03BC8FBC LDP X20, X19, [X31 + 0x20]
	0x03BC8FC0 LDP X22, X21, [X31 + 0x10]
	0x03BC8FC4 MOV X1, X31
	0x03BC8FC8 LDP X30, X23, [X31], #0x30
	0x03BC8FCC B 0x3C36C30
	0x03BC8FD0 STR X30, [X31 - 0x20]!
	0x03BC8FD4 STP X20, X19, [X31 + 0x10]
	0x03BC8FD8 ADRP X20, 0x81A000
	0x03BC8FDC ADRP X19, 0x595000
	0x03BC8FE0 LDRB W8, [X20 + 0xDE4]
	0x03BC8FE4 LDR X19, [X19 + 0x460]
	0x03BC8FE8 TBNZ X8, 0x0, 0x3BC9000
	0x03BC8FEC ADRP X0, 0x595000
	0x03BC8FF0 LDR X0, [X0 + 0x460]
	0x03BC8FF4 BL 0x1C16CF4
	0x03BC8FF8 MOVZ W8, 0x1
	0x03BC8FFC STRB W8, [X20 + 0xDE4]
	0x03BC9000 LDR X8, [X19]
	0x03BC9004 ADRP X9, 0xFFFFFFFFFCF24000
	0x03BC9008 LDR V0, [X9 + 0x8D0]
	0x03BC900C MOVZ W9, 0x999A
	0x03BC9010 LDR X8, [X8 + 0xB8]
	0x03BC9014 MOVK W9, 0x3E990000
	0x03BC9018 ADRP X10, 0xFFFFFFFFFCF25000
	0x03BC901C STR D0, [X8]
	0x03BC9020 STR W9, [X8 + 0x8]
	0x03BC9024 LDR X8, [X19]
	0x03BC9028 LDR V0, [X10 + 0x1A0]
	0x03BC902C LDP X20, X19, [X31 + 0x10]
	0x03BC9030 LDR X8, [X8 + 0xB8]
	0x03BC9034 STUR D0, [X8 + 0xC]
	0x03BC9038 STR W9, [X8 + 0x14]
	0x03BC903C LDR X30, [X31], #0x20
	0x03BC9040 RET
	0x03BC9044 STP D9, D8, [X31 - 0x10]!
	0x03BC9048 LDP S6, S7, [X3]
	0x03BC904C LDP S16, S1, [X3 + 0x8]
	0x03BC9050 LDR V17, [X1]
	0x03BC9054 LDUR V18, [X1 + 0x4]
	0x03BC9058 LDR V20, [X2]

ISIL:
	001 Subtract X31, X31, 320
	002 Move [X31+240], X29
	003 Move [X31+248], X30
	004 Move [X31+256], X26
	005 Move [X31+264], X25
	006 Move [X31+272], X24
	007 Move [X31+280], X23
	008 Move [X31+288], X22
	009 Move [X31+296], X21
	010 Move [X31+304], X20
	011 Move [X31+312], X19
	012 Move X20, 0x81B000
	013 Move W8, [X20+3460]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {48}
	019 Move X0, 0x57F000
	020 Move X0, [X0+2664]
	021 Call 0x1C17CF4
	022 Move X0, 0x52C000
	023 Move X0, [X0+2600]
	024 Call 0x1C17CF4
	025 Move X0, 0x554000
	026 Move X0, [X0+624]
	027 Call 0x1C17CF4
	028 Move X0, 0x557000
	029 Move X0, [X0+1296]
	030 Call 0x1C17CF4
	031 Move X0, 0x596000
	032 Move X0, [X0+1776]
	033 Call 0x1C17CF4
	034 Move X0, 0x596000
	035 Move X0, [X0+1792]
	036 Call 0x1C17CF4
	037 Move X0, 0x596000
	038 Move X0, [X0+1800]
	039 Call 0x1C17CF4
	040 Move X0, 0x596000
	041 Move X0, [X0+1808]
	042 Call 0x1C17CF4
	043 Move X0, 0x596000
	044 Move X0, [X0+1096]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X20+3460], W8
	048 Move X23, 0x554000
	049 Move X20, [X19+888]
	050 Move X23, [X23+624]
	051 Add X24, X31, 200
	052 Compare X20, 0
	053 JumpIfEqual {62}
	054 Move X0, [X23]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, X20
	060 Move X1, X31
	061 Call InputSystem.AddDevice, X0
	062 Move [X31+216], X31
	063 Move [X31+224], X31
	064 Move X21, 0x596000
	065 Move X8, 0x596000
	066 Move X21, [X21+1096]
	067 Move X8, [X8+1776]
	068 Move [X31+232], X31
	069 Move [X31+200], X31
	070 Move [X31+208], X31
	071 Move X26, [X21]
	072 Move X0, [X8]
	073 Call 0x1C17F10
	074 Move X1, X31
	075 Move X20, X0
	076 Call XRDeviceDescriptor..ctor, X0
	077 Move X22, 0x57F000
	078 Move X22, [X22+2664]
	079 Move X0, [X22]
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {85}
	083 Call 0x1C17DFC
	084 Move X0, [X22]
	085 Move X8, [X0+184]
	086 Move X25, 0x557000
	087 Add X1, X31, 176
	088 Move V0, [X8+24]
	089 Move X25, [X25+1296]
	090 Move [X31+11], V0
	091 Move X0, [X25]
	092 Call 0x1C17E04
	093 Move X8, 0x596000
	094 Move X8, [X8+1808]
	095 Move X1, [X21]
	096 Move X2, X0
	097 Move X3, X31
	098 Move X8, [X8]
	099 Move X0, X8
	100 Call String.Format, X0, X1, X2
	101 Compare X20, 0
	102 JumpIfEqual {370}
	103 Move [X20+16], X0
	104 Move W8, 356
	105 Move X0, X20
	106 Move X1, X31
	107 Move [X20+40], W8
	108 Call XRDeviceDescriptor.ToJson, X0
	109 Move X9, [X31+232]
	110 Move V1, [X24]
	111 Move V0, [X24+16]
	112 Move X8, [X23]
	113 Move X20, X0
	114 Move [X31+160], X9
	115 Move [X31+128], V1
	116 Move [X31+136], V0
	117 Move W9, [X8+224]
	118 Compare W9, 0
	119 JumpIfNotEqual {122}
	120 Move X0, X8
	121 Call 0x1C17DFC
	122 Move V1, [X31+128]
	123 Move V0, [X31+144]
	124 Move X8, [X31+160]
	125 Add X0, X31, 64
	126 Move X1, X31
	127 Move [X31+4], V0
	128 Move [X31+80], X8
	129 Move [X31+88], X26
	130 Move [X31+6], V1
	131 Move [X31+112], X20
	132 Call InputSystem.AddDevice, X0
	133 Compare X0, 0
	134 JumpIfEqual {143}
	135 Move X8, 0x596000
	136 Move X8, [X8+1792]
	137 Move X9, [X0]
	138 Move X8, [X8]
	139 Move W11, [X9+304]
	140 Move W10, [X8+304]
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move X20, X31
	143 Move X20, X31
	144 Move [X19+888], X31
	145 Move X9, [X9+200]
	146 Add X9, X9, X10
	147 NotImplemented "Instruction LDUR not yet implemented."
	148 NotImplemented "Instruction CMP not yet implemented."
	149 NotImplemented "Instruction CSEL not yet implemented."
	150 Move [X19+888], X20
	151 Move X0, [X22]
	152 Move W8, [X0+224]
	153 Compare X20, 0
	154 JumpIfEqual {173}
	155 Compare W8, 0
	156 JumpIfNotEqual {159}
	157 Call 0x1C17DFC
	158 Move X0, [X22]
	159 Move X8, [X23]
	160 Move X9, [X0+184]
	161 Move W10, [X8+224]
	162 Move X22, [X9+384]
	163 Move X21, [X9+392]
	164 Compare W10, 0
	165 JumpIfNotEqual {168}
	166 Move X0, X8
	167 Call 0x1C17DFC
	168 Move X0, X20
	169 Move X1, X22
	170 Move X2, X21
	171 Move X3, X31
	172 Call InputSystem.SetDeviceUsage, X0, X1
	173 Compare W8, 0
	174 JumpIfNotEqual {177}
	175 Call 0x1C17DFC
	176 Move X0, [X22]
	177 Move X8, [X0+184]
	178 Move X0, [X25]
	179 Add X1, X31, 144
	180 Move V0, [X8+24]
	181 Move [X31+9], V0
	182 Call 0x1C17E04
	183 Move X8, 0x596000
	184 Move X8, [X8+1800]
	185 Move X1, [X21]
	186 Move X2, X0
	187 Move X3, X31
	188 Move X8, [X8]
	189 Move X0, X8
	190 Call String.Format, X0, X1, X2
	191 Move X8, 0x52C000
	192 Move X8, [X8+2600]
	193 Move X20, X0
	194 Move X8, [X8]
	195 Move W9, [X8+224]
	196 Compare W9, 0
	197 JumpIfNotEqual {200}
	198 Move X0, X8
	199 Call 0x1C17DFC
	200 Move X0, X20
	201 Move X1, X19
	202 Move X2, X31
	203 Call Debug.LogError, X0, X1
	204 Move X20, [X19+896]
	205 Compare X20, 0
	206 JumpIfEqual {215}
	207 Move X0, [X23]
	208 Move W8, [X0+224]
	209 Compare W8, 0
	210 JumpIfNotEqual {212}
	211 Call 0x1C17DFC
	212 Move X0, X20
	213 Move X1, X31
	214 Call InputSystem.AddDevice, X0
	215 Move [X31+216], X31
	216 Move [X31+224], X31
	217 Move X21, 0x596000
	218 Move X8, 0x596000
	219 Move X21, [X21+1096]
	220 Move X8, [X8+1776]
	221 Move [X31+232], X31
	222 Move [X31+200], X31
	223 Move [X31+208], X31
	224 Move X26, [X21]
	225 Move X0, [X8]
	226 Call 0x1C17F10
	227 Move X1, X31
	228 Move X20, X0
	229 Call XRDeviceDescriptor..ctor, X0
	230 Move X22, 0x57F000
	231 Move X22, [X22+2664]
	232 Move X0, [X22]
	233 Move W8, [X0+224]
	234 Compare W8, 0
	235 JumpIfNotEqual {238}
	236 Call 0x1C17DFC
	237 Move X0, [X22]
	238 Move X8, [X0+184]
	239 Move X25, 0x557000
	240 Add X1, X31, 176
	241 Move V0, [X8+25]
	242 Move X25, [X25+1296]
	243 Move [X31+11], V0
	244 Move X0, [X25]
	245 Call 0x1C17E04
	246 Move X8, 0x596000
	247 Move X8, [X8+1808]
	248 Move X1, [X21]
	249 Move X2, X0
	250 Move X3, X31
	251 Move X8, [X8]
	252 Move X0, X8
	253 Call String.Format, X0, X1, X2
	254 Compare X20, 0
	255 JumpIfEqual {370}
	256 Move [X20+16], X0
	257 Move W8, 612
	258 Move X0, X20
	259 Move X1, X31
	260 Move [X20+40], W8
	261 Call XRDeviceDescriptor.ToJson, X0
	262 Move X9, [X31+232]
	263 Move V1, [X24]
	264 Move V0, [X24+16]
	265 Move X8, [X23]
	266 Move X20, X0
	267 Move [X31+160], X9
	268 Move [X31+128], V1
	269 Move [X31+136], V0
	270 Move W9, [X8+224]
	271 Compare W9, 0
	272 JumpIfNotEqual {275}
	273 Move X0, X8
	274 Call 0x1C17DFC
	275 Move V1, [X31+128]
	276 Move V0, [X31+144]
	277 Move X8, [X31+160]
	278 Add X0, X31, 0
	279 Move X1, X31
	280 Move [X31], V0
	281 Move [X31+16], X8
	282 Move [X31+24], X26
	283 Move [X31+2], V1
	284 Move [X31+48], X20
	285 Call InputSystem.AddDevice, X0
	286 Compare X0, 0
	287 JumpIfEqual {296}
	288 Move X8, 0x596000
	289 Move X8, [X8+1792]
	290 Move X9, [X0]
	291 Move X8, [X8]
	292 Move W11, [X9+304]
	293 Move W10, [X8+304]
	294 NotImplemented "Instruction CMP not yet implemented."
	295 Move X20, X31
	296 Move [X19+896], X31
	297 Move X9, [X9+200]
	298 Add X9, X9, X10
	299 NotImplemented "Instruction LDUR not yet implemented."
	300 NotImplemented "Instruction CMP not yet implemented."
	301 NotImplemented "Instruction CSEL not yet implemented."
	302 Move [X19+896], X20
	303 Compare X20, 0
	304 JumpIfEqual {325}
	305 Move X0, [X22]
	306 Move W8, [X0+224]
	307 Compare W8, 0
	308 JumpIfNotEqual {311}
	309 Call 0x1C17DFC
	310 Move X0, [X22]
	311 Move X8, [X23]
	312 Move X9, [X0+184]
	313 Move W10, [X8+224]
	314 Move X21, [X9+400]
	315 Move X19, [X9+408]
	316 Compare W10, 0
	317 JumpIfNotEqual {320}
	318 Move X0, X8
	319 Call 0x1C17DFC
	320 Move X0, X20
	321 Move X1, X21
	322 Move X2, X19
	323 Move X3, X31
	324 Call InputSystem.SetDeviceUsage, X0, X1
	325 Move X0, [X22]
	326 Move W8, [X0+224]
	327 Compare W8, 0
	328 JumpIfNotEqual {331}
	329 Call 0x1C17DFC
	330 Move X0, [X22]
	331 Move X8, [X0+184]
	332 Move X0, [X25]
	333 Add X1, X31, 144
	334 Move V0, [X8+25]
	335 Move [X31+9], V0
	336 Call 0x1C17E04
	337 Move X8, 0x596000
	338 Move X8, [X8+1800]
	339 Move X1, [X21]
	340 Move X2, X0
	341 Move X3, X31
	342 Move X8, [X8]
	343 Move X0, X8
	344 Call String.Format, X0, X1, X2
	345 Move X8, 0x52B000
	346 Move X8, [X8+2600]
	347 Move X20, X0
	348 Move X8, [X8]
	349 Move W9, [X8+224]
	350 Compare W9, 0
	351 JumpIfNotEqual {354}
	352 Move X0, X8
	353 Call 0x1C17DFC
	354 Move X0, X20
	355 Move X1, X19
	356 Move X2, X31
	357 Call Debug.LogError, X0, X1
	358 Move X20, [X31+304]
	359 Move X19, [X31+312]
	360 Move X22, [X31+288]
	361 Move X21, [X31+296]
	362 Move X24, [X31+272]
	363 Move X23, [X31+280]
	364 Move X26, [X31+256]
	365 Move X25, [X31+264]
	366 Move X29, [X31+240]
	367 Move X30, [X31+248]
	368 Add X31, X31, 320
	369 Return 
	370 Call 0x1C17F20

Method: System.Void RemoveDevices()

Disassembly:
	0x03BC905C LDR V21, [X2 + 0x8]
	0x03BC9060 FMUL S22, S6, S6
	0x03BC9064 FMUL S23, S7, S7
	0x03BC9068 LDR V19, [X1 + 0xC]
	0x03BC906C FMUL S24, S16, S16
	0x03BC9070 FADD S22, S22, S23
	0x03BC9074 LDP S2, S3, [X4]
	0x03BC9078 LDP S4, S5, [X4 + 0x8]
	0x03BC907C FMUL S25, S1, S1
	0x03BC9080 FMUL S26, S17, D4.S[1]
	0x00000000 INVALID
	0x03BC9088 UNIMPLEMENTED
	0x03BC908C UNIMPLEMENTED
	0x03BC9090 FADD S22, S24, S22
	0x03BC9094 FMOV S0, 1
	0x03BC9098 UNIMPLEMENTED
	0x03BC909C MOV V29.S[1], V17.S[0]
	0x03BC90A0 MOV V30.S[1], V21.S[0]
	0x03BC90A4 FSUB S26, S26, S28
	0x03BC90A8 FADD S22, S25, S22
	0x03BC90AC FNEG S6, S6
	0x03BC90B0 FNEG S7, S7
	0x03BC90B4 FNEG S16, S16
	0x00000000 INVALID
	0x00000000 INVALID
	0x03BC90C0 FADD S26, S26, S26
	0x03BC90C4 FDIV S22, S0, S22
	0x03BC90C8 FSUB V23.2S, V23.2S, V24.2S
	0x03BC90CC FMUL S24, S19, S26
	0x03BC90D0 FMUL S1, S1, S22

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x81A000
	005 Move W8, [X20+3461]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x553000
	012 Move X0, [X0+624]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3461], W8
	016 Move X0, [X19+880]
	017 Compare X0, 0
	018 JumpIfEqual {36}
	019 Move X1, X31
	020 Call InputDevice.get_added, X0
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {36}
	025 Move X8, 0x553000
	026 Move X8, [X8+624]
	027 Move X20, [X19+880]
	028 Move X0, [X8]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X31
	035 Call InputSystem.RemoveDevice, X0
	036 Move X0, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]

Method: System.Void RemoveControllerDevices()

Disassembly:
	0x03BC90D4 FMUL S6, S22, S6
	0x03BC90D8 FMUL S7, S22, S7
	0x03BC90DC FMUL S16, S22, S16
	0x03BC90E0 FADD S21, S21, S24
	0x03BC90E4 FMUL S22, S2, S1
	0x03BC90E8 FMUL S24, S3, S1
	0x03BC90EC FMUL S25, S4, S1
	0x03BC90F0 FMUL S1, S1, S5
	0x03BC90F4 FMUL S27, S6, S5
	0x03BC90F8 FMUL S28, S7, S5
	0x03BC90FC FMUL S5, S16, S5
	0x03BC9100 FMUL S30, S2, S6
	0x03BC9104 FMUL S31, S4, S7
	0x03BC9108 FMUL S8, S2, S16
	0x03BC910C FMUL S9, S3, S6
	0x03BC9110 FMUL S2, S2, S7
	0x03BC9114 FMUL S7, S3, S7
	0x03BC9118 FMUL S3, S3, S16
	0x03BC911C FMUL S6, S4, S6
	0x03BC9120 FMUL S4, S4, S16
	0x03BC9124 FADD V16.2S, V23.2S, V23.2S
	0x00000000 INVALID
	0x03BC912C FADD V19.2S, V20.2S, V19.2S
	0x03BC9130 UNIMPLEMENTED
	0x03BC9134 FMUL S17, S17, D0.S[1]
	0x00000000 INVALID
	0x00000000 INVALID
	0x03BC9140 UNIMPLEMENTED
	0x03BC9144 FSUB S17, S17, S18
	0x03BC9148 MOV V16.S[1], V26.S[0]
	0x03BC914C LDR V26, [X0]
	0x03BC9150 FADD S17, S21, S17
	0x03BC9154 LDR V21, [X0 + 0x8]
	0x03BC9158 FADD S18, S27, S31
	0x03BC915C FADD S23, S28, S8
	0x03BC9160 FADD S7, S30, S7
	0x00000000 INVALID
	0x03BC9168 FADD S5, S5, S9
	0x03BC916C FADD S18, S22, S18
	0x03BC9170 FADD S22, S24, S23
	0x03BC9174 FSUB S1, S1, S7
	0x03BC9178 FSUB V7.2S, V20.2S, V16.2S
	0x03BC917C FADD S5, S25, S5
	0x03BC9180 FSUB S3, S18, S3
	0x03BC9184 FSUB S6, S22, S6
	0x03BC9188 FSUB S1, S1, S4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x81A000
	005 Move W8, [X20+3462]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x553000
	012 Move X0, [X0+624]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3462], W8
	016 Move X0, [X19+888]
	017 Compare X0, 0
	018 JumpIfEqual {36}
	019 Move X1, X31
	020 Call InputDevice.get_added, X0
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {36}
	025 Move X8, 0x553000
	026 Move X8, [X8+624]
	027 Move X20, [X19+888]
	028 Move X0, [X8]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X31
	035 Call InputSystem.RemoveDevice, X0
	036 Move X0, [X19+896]
	037 Compare X0, 0
	038 JumpIfEqual {60}
	039 Move X1, X31
	040 Call InputDevice.get_added, X0
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {60}
	045 Move X8, 0x553000
	046 Move X8, [X8+624]
	047 Move X19, [X19+896]
	048 Move X0, [X8]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, X19
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X1, X31
	057 Move X30, [X31+32]
	058 Call InputSystem.RemoveDevice, X0
	059 Return 
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X30, [X31+32]
	063 Return 

Method: System.Void OnInputDeviceChange(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.InputDeviceChange change)

Disassembly:
	0x03BC918C FADD V4.2S, V19.2S, V7.2S
	0x03BC9190 FADD S16, S21, S17
	0x03BC9194 FSUB S2, S5, S2
	0x03BC9198 FMUL S5, S3, S3
	0x03BC919C FMUL S7, S6, S6
	0x03BC91A0 FADD V4.2S, V26.2S, V4.2S
	0x03BC91A4 STR S16, [X5 + 0x8]
	0x03BC91A8 FMUL S16, S2, S2
	0x03BC91AC FADD S5, S5, S7
	0x03BC91B0 STR D4, [X5]
	0x03BC91B4 FMUL S17, S1, S1
	0x03BC91B8 FADD S4, S16, S5
	0x03BC91BC LDP S5, S7, [X1]
	0x03BC91C0 LDP S16, S18, [X1 + 0x8]
	0x03BC91C4 FADD S4, S17, S4
	0x03BC91C8 FNEG S3, S3
	0x03BC91CC FNEG S6, S6
	0x03BC91D0 FNEG S2, S2
	0x03BC91D4 FDIV S0, S0, S4
	0x03BC91D8 FMUL S1, S1, S0
	0x03BC91DC FMUL S3, S0, S3
	0x03BC91E0 FMUL S4, S0, S6
	0x03BC91E4 FMUL S0, S0, S2
	0x03BC91E8 FMUL S2, S3, S18
	0x03BC91EC FMUL S6, S4, S18
	0x03BC91F0 FMUL S17, S0, S18
	0x03BC91F4 FMUL S18, S1, S18
	0x03BC91F8 FMUL S19, S1, S5
	0x03BC91FC FMUL S20, S1, S7
	0x03BC9200 FMUL S1, S1, S16
	0x03BC9204 FMUL S21, S3, S5
	0x03BC9208 FMUL S22, S0, S7
	0x03BC920C FMUL S23, S3, S16
	0x03BC9210 FMUL S24, S4, S5
	0x03BC9214 FMUL S25, S4, S7
	0x03BC9218 FMUL S4, S4, S16
	0x03BC921C FMUL S5, S0, S5
	0x03BC9220 FMUL S3, S3, S7
	0x03BC9224 FMUL S0, S0, S16
	0x03BC9228 FADD S7, S19, S22
	0x03BC922C FADD S16, S20, S23
	0x03BC9230 FADD S1, S24, S1
	0x03BC9234 FADD S19, S21, S25
	0x03BC9238 FADD S2, S7, S2
	0x03BC923C FADD S6, S6, S16
	0x03BC9240 FADD S1, S17, S1
	0x03BC9244 FSUB S7, S18, S19
	0x03BC9248 FSUB S2, S2, S4
	0x03BC924C FSUB S4, S6, S5
	0x03BC9250 FSUB S1, S1, S3
	0x03BC9254 FSUB S0, S7, S0
	0x03BC9258 STP S2, S4, [X6]
	0x03BC925C STP S1, S0, [X6 + 0x8]
	0x03BC9260 LDP D9, D8, [X31], #0x10
	0x03BC9264 RET
	0x03BC9268 SUB X31, X31, 0xB0
	0x03BC926C STP D15, D14, [X31 + 0x30]
	0x03BC9270 STP D13, D12, [X31 + 0x40]
	0x03BC9274 STP D11, D10, [X31 + 0x50]
	0x03BC9278 STP D9, D8, [X31 + 0x60]
	0x03BC927C STP X30, X25, [X31 + 0x70]
	0x03BC9280 STP X24, X23, [X31 + 0x80]
	0x03BC9284 STP X22, X21, [X31 + 0x90]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x81A000
	007 Move W8, [X22+3463]
	008 Move W20, W2
	009 Move X19, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x553000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move X0, 0x595000
	019 Move X0, [X0+1720]
	020 Call 0x1C17CF4
	021 Move X0, 0x595000
	022 Move X0, [X0+1728]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+3463], W8
	026 Compare W20, 0
	027 JumpIfNotEqual {44}
	028 Move W8, [X21+440]
	029 Compare W8, 0
	030 JumpIfEqual {44}
	031 Compare X19, 0
	032 JumpIfEqual {44}
	033 Move X8, 0x595000
	034 Move X8, [X8+1720]
	035 Move X9, [X19]
	036 Move X10, [X8]
	037 Move W8, [X9+304]
	038 Move W11, [X10+304]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X9, [X9+200]
	041 Add X11, X9, X11
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Return 
	050 Move X10, 0x595000
	051 Move X10, [X10+1728]
	052 Move X10, [X10]
	053 Move W11, [X10+304]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Add X8, X9, X11
	056 NotImplemented "Instruction LDUR not yet implemented."
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X8, 0x553000
	059 Move X8, [X8+624]
	060 Move X0, [X8]
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Move X0, X19
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X1, X31
	071 Move X30, [X31+48]
	072 Call InputSystem.RemoveDevice, X0
	073 Return 

Method: UnityEngine.Vector3 GetResetScale()

Disassembly:
	0x03BC82E8 FADD S2, S16, S17
	0x03BC82EC FADD S16, S20, S21
	0x03BC82F0 FADD S5, S7, S5
	0x03BC82F4 FSUB S0, S3, S0
	0x03BC82F8 FADD S2, S18, S2
	0x03BC82FC FADD S3, S22, S16
	0x03BC8300 FADD S5, S24, S5
	0x03BC8304 FSUB S7, S0, S1
	0x03BC8308 FSUB S0, S2, S19
	0x03BC830C FSUB S1, S3, S23
	0x03BC8310 FSUB S2, S5, S4
	0x03BC8314 FSUB S3, S7, S6
	0x03BC8318 B 0x3BC8360
	0x03BC831C ADRP X19, 0x810000
	0x03BC8320 LDRB W8, [X19 + 0x793]
	0x03BC8324 CBNZ W8, 0x3BC833C
	0x03BC8328 ADRP X0, 0x52C000
	0x03BC832C LDR X0, [X0 + 0x5A8]
	0x03BC8330 BL 0x1C16CF4
	0x03BC8334 MOVZ W8, 0x1
	0x03BC8338 STRB W8, [X19 + 0x793]
	0x03BC833C ADRP X8, 0x52C000
	0x03BC8340 LDR X8, [X8 + 0x5A8]
	0x03BC8344 LDR X8, [X8]
	0x03BC8348 LDR X8, [X8 + 0xB8]
	0x03BC834C LDP S0, S1, [X8]
	0x03BC8350 LDP S2, S3, [X8 + 0x8]
	0x03BC8354 B 0x3BC8360
	0x03BC8358 LDP S0, S1, [X1]
	0x03BC835C LDP S2, S3, [X1 + 0x8]
	0x03BC8360 LDP X30, X19, [X31], #0x10
	0x03BC8364 RET
	0x03BC8368 STP X30, X23, [X31 - 0x30]!
	0x03BC836C STP X22, X21, [X31 + 0x10]
	0x03BC8370 STP X20, X19, [X31 + 0x20]
	0x03BC8374 ADRP X22, 0x81A000
	0x03BC8378 ADRP X23, 0x595000
	0x03BC837C LDRB W8, [X22 + 0xD8C]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W9, [X0+565]
	004 Move W8, [X0+566]
	005 Compare W9, 0
	006 JumpIfEqual {11}
	007 Move S0, W31
	008 Move S1, W31
	009 Compare W8, 0
	010 JumpIfNotEqual {20}
	011 Compare W8, 0
	012 JumpIfEqual {15}
	013 Move S1, W31
	014 Move S0, 1
	015 Move W8, [X0+567]
	016 Move S0, 1
	017 Compare W8, 0
	018 JumpIfEqual {28}
	019 Move S1, 1
	020 Move W8, [X0+567]
	021 Move S2, W31
	022 Move S3, 1
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction FCSEL not yet implemented."
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Return X0
	028 Move X19, 0x811000
	029 Move W8, [X19+1923]
	030 Compare W8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, 0x52C000
	033 Move X0, [X0+1440]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X19+1923], W8
	037 Move X8, 0x52C000
	038 Move X8, [X8+1440]
	039 Move X8, [X8]
	040 Move X8, [X8+184]
	041 Move S0, [X8]
	042 Move S1, [X8+4]
	043 Move V2, [X8+8]

Method: System.Void GetAxes(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/Space translateSpace, UnityEngine.Transform cameraTransform, out UnityEngine.Vector3 right, out UnityEngine.Vector3 up, out UnityEngine.Vector3 forward)

Disassembly:
	0x03BC7D64 LDR X9, [X0 + 0xB8]
	0x03BC7D68 LDR W10, [X8 + 0xE0]
	0x03BC7D6C LDP X22, X21, [X9 + 0x180]
	0x03BC7D70 CBNZ W10, 0x3BC7D7C
	0x03BC7D74 MOV X0, X8
	0x03BC7D78 BL 0x1C16DFC
	0x03BC7D7C MOV X0, X20
	0x03BC7D80 MOV X1, X22
	0x03BC7D84 MOV X2, X21
	0x03BC7D88 MOV X3, X31
	0x03BC7D8C BL 0x376F3E4
	0x03BC7D90 B 0x3BC7E08
	0x03BC7D94 CBNZ W8, 0x3BC7DA0
	0x03BC7D98 BL 0x1C16DFC
	0x03BC7D9C LDR X0, [X22]
	0x03BC7DA0 LDR X8, [X0 + 0xB8]
	0x03BC7DA4 LDR X0, [X25]
	0x03BC7DA8 ADD X1, X31, 0x90
	0x03BC7DAC LDR V0, [X8 + 0x18]
	0x03BC7DB0 STR V0, [X31 + 0x9]
	0x03BC7DB4 BL 0x1C16E04
	0x03BC7DB8 ADRP X8, 0x596000
	0x03BC7DBC LDR X8, [X8 + 0x708]
	0x03BC7DC0 LDR X1, [X21]
	0x03BC7DC4 MOV X2, X0
	0x03BC7DC8 MOV X3, X31
	0x03BC7DCC LDR X8, [X8]
	0x03BC7DD0 MOV X0, X8
	0x03BC7DD4 BL 0x3227BD4
	0x03BC7DD8 ADRP X8, 0x52C000
	0x03BC7DDC LDR X8, [X8 + 0xA28]
	0x03BC7DE0 MOV X20, X0
	0x03BC7DE4 LDR X8, [X8]
	0x03BC7DE8 LDR W9, [X8 + 0xE0]
	0x03BC7DEC CBNZ W9, 0x3BC7DF8
	0x03BC7DF0 MOV X0, X8
	0x03BC7DF4 BL 0x1C16DFC
	0x03BC7DF8 MOV X0, X20
	0x03BC7DFC MOV X1, X19
	0x03BC7E00 MOV X2, X31
	0x03BC7E04 BL 0x3C065A4
	0x03BC7E08 LDR X20, [X19 + 0x380]
	0x03BC7E0C CBZ X20, 0x3BC7E30
	0x03BC7E10 LDR X0, [X23]
	0x03BC7E14 LDR W8, [X0 + 0xE0]
	0x03BC7E18 CBNZ W8, 0x3BC7E20
	0x03BC7E1C BL 0x1C16DFC
	0x03BC7E20 MOV X0, X20
	0x03BC7E24 MOV X1, X31
	0x03BC7E28 BL 0x376E6E0
	0x03BC7E2C B 0x3BC803C
	0x03BC7E30 STP X31, X31, [X31 + 0xD8]
	0x03BC7E34 ADRP X21, 0x596000
	0x03BC7E38 ADRP X8, 0x596000
	0x03BC7E3C LDR X21, [X21 + 0x448]
	0x03BC7E40 LDR X8, [X8 + 0x6F0]
	0x03BC7E44 STR X31, [X31 + 0xE8]
	0x03BC7E48 STP X31, X31, [X31 + 0xC8]
	0x03BC7E4C LDR X26, [X21]
	0x03BC7E50 LDR X0, [X8]
	0x03BC7E54 BL 0x1C16F10
	0x03BC7E58 MOV X1, X31
	0x03BC7E5C MOV X20, X0
	0x03BC7E60 BL 0x37DE650
	0x03BC7E64 ADRP X22, 0x57F000
	0x03BC7E68 LDR X22, [X22 + 0xA68]
	0x03BC7E6C LDR X0, [X22]
	0x03BC7E70 LDR W8, [X0 + 0xE0]
	0x03BC7E74 CBNZ W8, 0x3BC7E80
	0x03BC7E78 BL 0x1C16DFC
	0x03BC7E7C LDR X0, [X22]
	0x03BC7E80 LDR X8, [X0 + 0xB8]
	0x03BC7E84 ADRP X25, 0x557000
	0x03BC7E88 ADD X1, X31, 0xB0
	0x03BC7E8C LDR V0, [X8 + 0x19]
	0x03BC7E90 LDR X25, [X25 + 0x510]
	0x03BC7E94 STR V0, [X31 + 0xB]
	0x03BC7E98 LDR X0, [X25]
	0x03BC7E9C BL 0x1C16E04
	0x03BC7EA0 ADRP X8, 0x596000
	0x03BC7EA4 LDR X8, [X8 + 0x710]
	0x03BC7EA8 LDR X1, [X21]
	0x03BC7EAC MOV X2, X0
	0x03BC7EB0 MOV X3, X31
	0x03BC7EB4 LDR X8, [X8]
	0x03BC7EB8 MOV X0, X8
	0x03BC7EBC BL 0x3227BD4
	0x03BC7EC0 CBZ X20, 0x3BC8058
	0x03BC7EC4 STR X0, [X20 + 0x10]
	0x03BC7EC8 MOVZ W8, 0x264
	0x03BC7ECC MOV X0, X20
	0x03BC7ED0 MOV X1, X31
	0x03BC7ED4 STR W8, [X20 + 0x28]
	0x03BC7ED8 BL 0x37DE648
	0x03BC7EDC LDR X9, [X31 + 0xE8]
	0x03BC7EE0 LDP V1, V0, [X24]
	0x03BC7EE4 LDR X8, [X23]
	0x03BC7EE8 MOV X20, X0
	0x03BC7EEC STR X9, [X31 + 0xA0]
	0x03BC7EF0 STP V1, V0, [X31 + 0x80]
	0x03BC7EF4 LDR W9, [X8 + 0xE0]
	0x03BC7EF8 CBNZ W9, 0x3BC7F04
	0x03BC7EFC MOV X0, X8
	0x03BC7F00 BL 0x1C16DFC
	0x03BC7F04 LDP V1, V0, [X31 + 0x80]
	0x03BC7F08 LDR X8, [X31 + 0xA0]
	0x03BC7F0C ADD X0, X31, 0x0
	0x03BC7F10 MOV X1, X31
	0x03BC7F14 STR V0, [X31]
	0x03BC7F18 STP X8, X26, [X31 + 0x10]
	0x03BC7F1C STR V1, [X31 + 0x2]
	0x03BC7F20 STR X20, [X31 + 0x30]
	0x03BC7F24 BL 0x376E5CC
	0x03BC7F28 CBZ X0, 0x3BC7F54
	0x03BC7F2C ADRP X8, 0x596000
	0x03BC7F30 LDR X8, [X8 + 0x700]
	0x03BC7F34 LDR X9, [X0]
	0x03BC7F38 LDR X8, [X8]
	0x03BC7F3C LDRB W11, [X9 + 0x130]
	0x03BC7F40 LDRB W10, [X8 + 0x130]
	0x03BC7F44 CMP W11, W10
	0x03BC7F48 B.CS 0x3BC7F5C
	0x03BC7F4C MOV X20, X31
	0x03BC7F50 B 0x3BC7F70
	0x03BC7F54 STR X31, [X19 + 0x380]
	0x03BC7F58 B 0x3BC7FC0
	0x03BC7F5C LDR X9, [X9 + 0xC8]
	0x03BC7F60 ADD X9, X9, X10, 0x3, LSL
	0x03BC7F64 LDUR X9, [X9 - 0x8]
	0x03BC7F68 CMP X9, X8
	0x03BC7F6C CSEL X20, X0, X31, EQ
	0x03BC7F70 STR X20, [X19 + 0x380]
	0x03BC7F74 CBZ X20, 0x3BC7FC0
	0x03BC7F78 LDR X0, [X22]
	0x03BC7F7C LDR W8, [X0 + 0xE0]
	0x03BC7F80 CBNZ W8, 0x3BC7F8C
	0x03BC7F84 BL 0x1C16DFC
	0x03BC7F88 LDR X0, [X22]
	0x03BC7F8C LDR X8, [X23]
	0x03BC7F90 LDR X9, [X0 + 0xB8]
	0x03BC7F94 LDR W10, [X8 + 0xE0]
	0x03BC7F98 LDP X21, X19, [X9 + 0x190]
	0x03BC7F9C CBNZ W10, 0x3BC7FA8
	0x03BC7FA0 MOV X0, X8
	0x03BC7FA4 BL 0x1C16DFC
	0x03BC7FA8 MOV X0, X20
	0x03BC7FAC MOV X1, X21
	0x03BC7FB0 MOV X2, X19
	0x03BC7FB4 MOV X3, X31
	0x03BC7FB8 BL 0x376F3E4
	0x03BC7FBC B 0x3BC803C
	0x03BC7FC0 LDR X0, [X22]
	0x03BC7FC4 LDR W8, [X0 + 0xE0]
	0x03BC7FC8 CBNZ W8, 0x3BC7FD4
	0x03BC7FCC BL 0x1C16DFC
	0x03BC7FD0 LDR X0, [X22]
	0x03BC7FD4 LDR X8, [X0 + 0xB8]
	0x03BC7FD8 LDR X0, [X25]
	0x03BC7FDC ADD X1, X31, 0x90
	0x03BC7FE0 LDR V0, [X8 + 0x19]
	0x03BC7FE4 STR V0, [X31 + 0x9]
	0x03BC7FE8 BL 0x1C16E04
	0x03BC7FEC ADRP X8, 0x596000
	0x03BC7FF0 LDR X8, [X8 + 0x708]
	0x03BC7FF4 LDR X1, [X21]
	0x03BC7FF8 MOV X2, X0
	0x03BC7FFC MOV X3, X31
	0x03BC8000 LDR X8, [X8]
	0x03BC8004 MOV X0, X8
	0x03BC8008 BL 0x3227BD4
	0x03BC800C ADRP X8, 0x52B000
	0x03BC8010 LDR X8, [X8 + 0xA28]
	0x03BC8014 MOV X20, X0
	0x03BC8018 LDR X8, [X8]
	0x03BC801C LDR W9, [X8 + 0xE0]
	0x03BC8020 CBNZ W9, 0x3BC802C
	0x03BC8024 MOV X0, X8
	0x03BC8028 BL 0x1C16DFC
	0x03BC802C MOV X0, X20
	0x03BC8030 MOV X1, X19
	0x03BC8034 MOV X2, X31
	0x03BC8038 BL 0x3C065A4
	0x03BC803C LDP X20, X19, [X31 + 0x130]
	0x03BC8040 LDP X22, X21, [X31 + 0x120]
	0x03BC8044 LDP X24, X23, [X31 + 0x110]
	0x03BC8048 LDP X26, X25, [X31 + 0x100]
	0x03BC804C LDP X29, X30, [X31 + 0xF0]
	0x03BC8050 ADD X31, X31, 0x140
	0x03BC8054 RET
	0x03BC8058 BL 0x1C16F20
	0x03BC805C STR X30, [X31 - 0x20]!
	0x03BC8060 STP X20, X19, [X31 + 0x10]
	0x03BC8064 ADRP X20, 0x81A000
	0x03BC8068 LDRB W8, [X20 + 0xD85]
	0x03BC806C MOV X19, X0
	0x03BC8070 TBNZ X8, 0x0, 0x3BC8088
	0x03BC8074 ADRP X0, 0x553000
	0x03BC8078 LDR X0, [X0 + 0x270]
	0x03BC807C BL 0x1C16CF4
	0x03BC8080 MOVZ W8, 0x1
	0x03BC8084 STRB W8, [X20 + 0xD85]
	0x03BC8088 LDR X0, [X19 + 0x370]
	0x03BC808C CBZ X0, 0x3BC80C4
	0x03BC8090 MOV X1, X31
	0x03BC8094 BL 0x376EE00
	0x03BC8098 TBZ X0, 0x0, 0x3BC80C4
	0x03BC809C ADRP X8, 0x553000
	0x03BC80A0 LDR X8, [X8 + 0x270]
	0x03BC80A4 LDR X20, [X19 + 0x370]
	0x03BC80A8 LDR X0, [X8]
	0x03BC80AC LDR W8, [X0 + 0xE0]
	0x03BC80B0 CBNZ W8, 0x3BC80B8
	0x03BC80B4 BL 0x1C16DFC
	0x03BC80B8 MOV X0, X20
	0x03BC80BC MOV X1, X31
	0x03BC80C0 BL 0x376E798
	0x03BC80C4 MOV X0, X19
	0x03BC80C8 LDP X20, X19, [X31 + 0x10]
	0x03BC80CC LDR X30, [X31], #0x20
	0x03BC80D0 B 0x3BC80D4
	0x03BC80D4 STR X30, [X31 - 0x20]!
	0x03BC80D8 STP X20, X19, [X31 + 0x10]
	0x03BC80DC ADRP X20, 0x81A000
	0x03BC80E0 LDRB W8, [X20 + 0xD86]
	0x03BC80E4 MOV X19, X0
	0x03BC80E8 TBNZ X8, 0x0, 0x3BC8100
	0x03BC80EC ADRP X0, 0x553000
	0x03BC80F0 LDR X0, [X0 + 0x270]
	0x03BC80F4 BL 0x1C16CF4
	0x03BC80F8 MOVZ W8, 0x1
	0x03BC80FC STRB W8, [X20 + 0xD86]
	0x03BC8100 LDR X0, [X19 + 0x378]
	0x03BC8104 CBZ X0, 0x3BC813C
	0x03BC8108 MOV X1, X31
	0x03BC810C BL 0x376EE00
	0x03BC8110 TBZ X0, 0x0, 0x3BC813C
	0x03BC8114 ADRP X8, 0x553000
	0x03BC8118 LDR X8, [X8 + 0x270]
	0x03BC811C LDR X20, [X19 + 0x378]
	0x03BC8120 LDR X0, [X8]
	0x03BC8124 LDR W8, [X0 + 0xE0]
	0x03BC8128 CBNZ W8, 0x3BC8130
	0x03BC812C BL 0x1C16DFC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x81C000
	010 Move X24, 0x52D000
	011 Move W8, [X25+3464]
	012 Move X24, [X24+1432]
	013 Move X19, X4
	014 Move X20, X3
	015 Move X21, X2
	016 Move X22, X1
	017 Move W23, W0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x52D000
	023 Move X0, [X0+1432]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X25+3464], W8
	027 Move X0, [X24]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X22
	033 Move X1, X31
	034 Move X2, X31
	035 Call Object.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {266}
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Compare W23, 0
	043 JumpIfNotEqual {119}
	044 Compare X22, 0
	045 JumpIfEqual {284}
	046 Move X0, X22
	047 Move X1, X31
	048 Call Transform.get_parent, X0
	049 Move X8, [X24]
	050 Move X22, X0
	051 Move W9, [X8+224]
	052 Compare W9, 0
	053 JumpIfNotEqual {56}
	054 Move X0, X8
	055 Call 0x1C17DFC
	056 Move X0, X22
	057 Move X1, X31
	058 Move X2, X31
	059 Call Object.op_Inequality, X0, X1
	060 Move X24, 0x812000
	061 Move W8, [X24+2928]
	062 Move W23, W0
	063 Compare W8, 0
	064 JumpIfNotEqual {70}
	065 Move X0, 0x52D000
	066 Move X0, [X0+1440]
	067 Call 0x1C17CF4
	068 Move W8, 1
	069 Move [X24+2928], W8
	070 Move X24, 0x52D000
	071 Move X24, [X24+1440]
	072 Move X8, [X24]
	073 Move X8, [X8+184]
	074 Move S0, [X8+60]
	075 Move S1, [X8+64]
	076 Move V2, [X8+68]
	077 Move TEMP, X23
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {238}
	081 Compare X22, 0
	082 JumpIfEqual {284}
	083 Move X0, X22
	084 Move X1, X31
	085 Call Transform.TransformDirection, X0, X1
	086 Move [X21], S0
	087 Move [X21+8], S1
	088 Move [X21+8], S2
	089 Move X21, 0x812000
	090 Move W8, [X21+1926]
	091 Compare W8, 0
	092 JumpIfNotEqual {98}
	093 Move X0, 0x52D000
	094 Move X0, [X0+1440]
	095 Call 0x1C17CF4
	096 Move W8, 1
	097 Move [X21+1926], W8
	098 Move X8, [X24]
	099 Move X0, X22
	100 Move X1, X31
	101 Move X8, [X8+184]
	102 Move S0, [X8+24]
	103 Move S1, [X8+28]
	104 Move V2, [X8+32]
	105 Call Transform.TransformDirection, X0, X1
	106 Move [X20], S0
	107 Move [X20+8], S1
	108 Move [X20+8], S2
	109 Move X20, 0x812000
	110 Move W8, [X20+2591]
	111 Compare W8, 0
	112 JumpIfNotEqual {118}
	113 Move X0, 0x52D000
	114 Move X0, [X0+1440]
	115 Call 0x1C17CF4
	116 Move W8, 1
	117 Move [X20+2591], W8
	118 Move X8, [X24]
	119 Move X22, 0x812000
	120 Move W8, [X22+2928]
	121 Compare W8, 0
	122 JumpIfNotEqual {128}
	123 Move X0, 0x52D000
	124 Move X0, [X0+1440]
	125 Call 0x1C17CF4
	126 Move W8, 1
	127 Move [X22+2928], W8
	128 Move X22, 0x52D000
	129 Move X22, [X22+1440]
	130 Move X8, [X22]
	131 Move X8, [X8+184]
	132 NotImplemented "Instruction LDUR not yet implemented."
	133 Move V1, [X8+68]
	134 Move [X21], D0
	135 Move [X21+8], S1
	136 Move X21, 0x812000
	137 Move W8, [X21+1926]
	138 Compare W8, 0
	139 JumpIfNotEqual {145}
	140 Move X0, 0x52D000
	141 Move X0, [X0+1440]
	142 Call 0x1C17CF4
	143 Move W8, 1
	144 Move [X21+1926], W8
	145 Move X8, [X22]
	146 Move X8, [X8+184]
	147 Move V0, [X8+24]
	148 Move V1, [X8+32]
	149 Move [X20], D0
	150 Move [X20+8], S1
	151 Move X20, 0x812000
	152 Move W8, [X20+2591]
	153 Compare W8, 0
	154 JumpIfNotEqual {160}
	155 Move X0, 0x52D000
	156 Move X0, [X0+1440]
	157 Call 0x1C17CF4
	158 Move W8, 1
	159 Move [X20+2591], W8
	160 Move X8, [X22]
	161 Move X8, [X8+184]
	162 Move S0, [X8+72]
	163 Move S1, [X8+76]
	164 Move V2, [X8+80]
	165 Move X23, 0x812000
	166 Move W8, [X23+2928]
	167 Compare W8, 0
	168 JumpIfNotEqual {174}
	169 Move X0, 0x52D000
	170 Move X0, [X0+1440]
	171 Call 0x1C17CF4
	172 Move W8, 1
	173 Move [X23+2928], W8
	174 Compare X22, 0
	175 JumpIfEqual {284}
	176 Move X23, 0x52D000
	177 Move X23, [X23+1440]
	178 Move X0, X22
	179 Move X1, X31
	180 Move X8, [X23]
	181 Move X8, [X8+184]
	182 Move S1, [X8+64]
	183 Move S2, [X8+68]
	184 Move V0, [X8+60]
	185 Call Transform.TransformDirection, X0, X1
	186 Move [X21], S0
	187 Move [X21+8], S1
	188 Move [X21+8], S2
	189 Move X21, 0x812000
	190 Move W8, [X21+1926]
	191 Compare W8, 0
	192 JumpIfNotEqual {198}
	193 Move X0, 0x52D000
	194 Move X0, [X0+1440]
	195 Call 0x1C17CF4
	196 Move W8, 1
	197 Move [X21+1926], W8
	198 Move X8, [X23]
	199 Move X0, X22
	200 Move X1, X31
	201 Move X8, [X8+184]
	202 Move S0, [X8+24]
	203 Move S1, [X8+28]
	204 Move V2, [X8+32]
	205 Call Transform.TransformDirection, X0, X1
	206 Move [X20], S0
	207 Move [X20+8], S1
	208 Move [X20+8], S2
	209 Move X20, 0x811000
	210 Move W8, [X20+2591]
	211 Compare W8, 0
	212 JumpIfNotEqual {218}
	213 Move X0, 0x52C000
	214 Move X0, [X0+1440]
	215 Call 0x1C17CF4
	216 Move W8, 1
	217 Move [X20+2591], W8
	218 Move X8, [X23]
	219 Move X8, [X8+184]
	220 Move X0, X22
	221 Move X1, X31
	222 Move S0, [X8+72]
	223 Move S1, [X8+76]
	224 Move V2, [X8+80]
	225 Call Transform.TransformDirection, X0, X1
	226 Move [X19], S0
	227 Move [X19+8], S1
	228 Move [X19+8], S2
	229 Move X20, [X31+48]
	230 Move X19, [X31+56]
	231 Move X22, [X31+32]
	232 Move X21, [X31+40]
	233 Move X24, [X31+16]
	234 Move X23, [X31+24]
	235 Move X30, [X31+64]
	236 Move X25, [X31+72]
	237 Return 
	238 Move [X21], S0
	239 Move [X21+8], S1
	240 Move [X21+8], S2
	241 Move X21, 0x811000
	242 Move W8, [X21+1926]
	243 Compare W8, 0
	244 JumpIfNotEqual {250}
	245 Move X0, 0x52C000
	246 Move X0, [X0+1440]
	247 Call 0x1C17CF4
	248 Move W8, 1
	249 Move [X21+1926], W8
	250 Move X8, [X24]
	251 Move X8, [X8+184]
	252 Move V0, [X8+24]
	253 Move V1, [X8+32]
	254 Move [X20], D0
	255 Move [X20+8], S1
	256 Move X20, 0x811000
	257 Move W8, [X20+2591]
	258 Compare W8, 0
	259 JumpIfNotEqual {265}
	260 Move X0, 0x52C000
	261 Move X0, [X0+1440]
	262 Call 0x1C17CF4
	263 Move W8, 1
	264 Move [X20+2591], W8
	265 Move X8, [X24]
	266 Move X0, 0x531000
	267 Move X0, [X0+1320]
	268 Call 0x1C17D08
	269 Call 0x1C17F10
	270 Move X19, X0
	271 Move X0, 0x596000
	272 Move X0, [X0+1760]
	273 Call 0x1C17D08
	274 Move X1, X0
	275 Move X0, X19
	276 Move X2, X31
	277 Call ArgumentNullException..ctor, X0, X1
	278 Move X0, 0x596000
	279 Move X0, [X0+1768]
	280 Call 0x1C17D08
	281 Move X1, X0
	282 Move X0, X19
	283 Call 0x1C17DEC
	284 Call 0x1C17F20

Method: UnityEngine.Quaternion GetDeltaRotation(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/Space translateSpace, in UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRSimulatedControllerState state, in UnityEngine.Quaternion inverseCameraParentRotation)

Disassembly:
	0x03BC8130 MOV X0, X20
	0x03BC8134 MOV X1, X31
	0x03BC8138 BL 0x376E798
	0x03BC813C LDR X0, [X19 + 0x380]
	0x03BC8140 CBZ X0, 0x3BC8180
	0x03BC8144 MOV X1, X31
	0x03BC8148 BL 0x376EE00
	0x03BC814C TBZ X0, 0x0, 0x3BC8180
	0x03BC8150 ADRP X8, 0x553000
	0x03BC8154 LDR X8, [X8 + 0x270]
	0x03BC8158 LDR X19, [X19 + 0x380]
	0x03BC815C LDR X0, [X8]
	0x03BC8160 LDR W8, [X0 + 0xE0]
	0x03BC8164 CBNZ W8, 0x3BC816C
	0x03BC8168 BL 0x1C16DFC
	0x03BC816C MOV X0, X19
	0x03BC8170 LDP X20, X19, [X31 + 0x10]
	0x03BC8174 MOV X1, X31
	0x03BC8178 LDR X30, [X31], #0x20
	0x03BC817C B 0x376E798
	0x03BC8180 LDP X20, X19, [X31 + 0x10]
	0x03BC8184 LDR X30, [X31], #0x20
	0x03BC8188 RET
	0x03BC818C STR X30, [X31 - 0x30]!
	0x03BC8190 STP X22, X21, [X31 + 0x10]
	0x03BC8194 STP X20, X19, [X31 + 0x20]
	0x03BC8198 ADRP X22, 0x81A000
	0x03BC819C LDRB W8, [X22 + 0xD87]
	0x03BC81A0 MOV W20, W2
	0x03BC81A4 MOV X19, X1
	0x03BC81A8 MOV X21, X0
	0x03BC81AC TBNZ X8, 0x0, 0x3BC81DC
	0x03BC81B0 ADRP X0, 0x553000
	0x03BC81B4 LDR X0, [X0 + 0x270]
	0x03BC81B8 BL 0x1C16CF4
	0x03BC81BC ADRP X0, 0x595000
	0x03BC81C0 LDR X0, [X0 + 0x6B8]
	0x03BC81C4 BL 0x1C16CF4

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X23, 0x81B000
	012 Move X22, 0x596000
	013 Move W8, [X23+3465]
	014 Move X22, [X22+1120]
	015 Move X19, X2
	016 Move X21, X1
	017 Move W20, W0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x596000
	023 Move X0, [X0+1120]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3465], W8
	027 Move X0, [X22]
	028 NotImplemented "Instruction LDUR not yet implemented."
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 Move W8, [X0+224]
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move W0, W20
	037 Move V2, V8
	038 Move V3, V9
	039 Move X1, X19
	040 Move X20, [X31+64]
	041 Move X19, [X31+72]
	042 Move X22, [X31+48]
	043 Move X21, [X31+56]
	044 Move X30, [X31+32]
	045 Move X23, [X31+40]
	046 Move D9, [X31+16]
	047 Move D8, [X31+24]
	048 Move V0, V11
	049 Move V1, V10
	050 Move D11, [X31+80]
	051 Move D10, [X31+88]
	052 Call XRDeviceSimulator.GetDeltaRotation, X0, X1, X2
	053 Return X0

Method: UnityEngine.Quaternion GetDeltaRotation(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/Space translateSpace, in UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.Hands.XRSimulatedHandState state, in UnityEngine.Quaternion inverseCameraParentRotation)

Disassembly:
	0x03BC81C8 ADRP X0, 0x595000
	0x03BC81CC LDR X0, [X0 + 0x6C0]
	0x03BC81D0 BL 0x1C16CF4
	0x03BC81D4 MOVZ W8, 0x1
	0x03BC81D8 STRB W8, [X22 + 0xD87]
	0x03BC81DC CBNZ W20, 0x3BC8220
	0x03BC81E0 LDRB W8, [X21 + 0x1B8]
	0x03BC81E4 CBZ W8, 0x3BC8220
	0x03BC81E8 CBZ X19, 0x3BC8220
	0x03BC81EC ADRP X8, 0x595000
	0x03BC81F0 LDR X8, [X8 + 0x6B8]
	0x03BC81F4 LDR X9, [X19]
	0x03BC81F8 LDR X10, [X8]
	0x03BC81FC LDRB W8, [X9 + 0x130]
	0x03BC8200 LDRB W11, [X10 + 0x130]
	0x03BC8204 CMP W8, W11
	0x03BC8208 B.CC 0x3BC8220
	0x03BC820C LDR X9, [X9 + 0xC8]
	0x03BC8210 ADD X11, X9, X11, 0x3, LSL
	0x03BC8214 LDUR X11, [X11 - 0x8]
	0x03BC8218 CMP X11, X10
	0x03BC821C B.EQ 0x3BC8230
	0x03BC8220 LDP X20, X19, [X31 + 0x20]
	0x03BC8224 LDP X22, X21, [X31 + 0x10]
	0x03BC8228 LDR X30, [X31], #0x30
	0x03BC822C RET
	0x03BC8230 ADRP X10, 0x595000
	0x03BC8234 LDR X10, [X10 + 0x6C0]
	0x03BC8238 LDR X10, [X10]
	0x03BC823C LDRB W11, [X10 + 0x130]
	0x03BC8240 CMP W8, W11
	0x03BC8244 B.CC 0x3BC8258
	0x03BC8248 ADD X8, X9, X11, 0x3, LSL
	0x03BC824C LDUR X8, [X8 - 0x8]
	0x03BC8250 CMP X8, X10
	0x03BC8254 B.EQ 0x3BC8220

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X23, 0x81B000
	012 Move X22, 0x596000
	013 Move W8, [X23+3466]
	014 Move X22, [X22+1120]
	015 Move X19, X2
	016 Move X21, X1
	017 Move W20, W0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x596000
	023 Move X0, [X0+1120]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3466], W8
	027 Move X0, [X22]
	028 Move S11, [X21+12]
	029 Move S10, [X21+16]
	030 Move S9, [X21+20]
	031 Move S8, [X21+24]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move W0, W20
	037 Move V2, V9
	038 Move V3, V8
	039 Move X1, X19
	040 Move X20, [X31+64]
	041 Move X19, [X31+72]
	042 Move X22, [X31+48]
	043 Move X21, [X31+56]
	044 Move X30, [X31+32]
	045 Move X23, [X31+40]
	046 Move D9, [X31+16]
	047 Move D8, [X31+24]
	048 Move V0, V11
	049 Move V1, V10
	050 Move D11, [X31+80]
	051 Move D10, [X31+88]
	052 Call XRDeviceSimulator.GetDeltaRotation, X0, X1, X2
	053 Return X0

Method: UnityEngine.Quaternion GetDeltaRotation(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/Space translateSpace, in UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRSimulatedHMDState state, in UnityEngine.Quaternion inverseCameraParentRotation)

Disassembly:
	0x03BC8258 ADRP X8, 0x553000
	0x03BC825C LDR X8, [X8 + 0x270]
	0x03BC8260 LDR X0, [X8]
	0x03BC8264 LDR W8, [X0 + 0xE0]
	0x03BC8268 CBNZ W8, 0x3BC8270
	0x03BC826C BL 0x1C16DFC
	0x03BC8270 MOV X0, X19
	0x03BC8274 LDP X20, X19, [X31 + 0x20]
	0x03BC8278 LDP X22, X21, [X31 + 0x10]
	0x03BC827C MOV X1, X31
	0x03BC8280 LDR X30, [X31], #0x30
	0x03BC8284 B 0x376E798
	0x03BC8288 STP X30, X19, [X31 - 0x10]!
	0x03BC828C CMP W0, 0x2
	0x03BC8290 B.EQ 0x3BC8358
	0x03BC8294 CMP W0, 0x1
	0x03BC8298 B.EQ 0x3BC831C
	0x03BC829C CBNZ W0, 0x3BC831C
	0x03BC82A0 LDP S4, S7, [X1]
	0x03BC82A4 LDP S6, S5, [X1 + 0x8]
	0x03BC82A8 FMUL S16, S3, S4
	0x03BC82AC FMUL S17, S0, S5
	0x03BC82B0 FMUL S18, S1, S6
	0x03BC82B4 FMUL S19, S2, S7
	0x03BC82B8 FMUL S20, S3, S7
	0x03BC82BC FMUL S21, S1, S5
	0x03BC82C0 FMUL S22, S2, S4
	0x03BC82C4 FMUL S23, S0, S6
	0x03BC82C8 FMUL S24, S0, S7
	0x03BC82CC FMUL S0, S0, S4
	0x03BC82D0 FMUL S4, S1, S4
	0x03BC82D4 FMUL S1, S1, S7
	0x03BC82D8 FMUL S7, S3, S6
	0x03BC82DC FMUL S3, S3, S5
	0x03BC82E0 FMUL S5, S2, S5
	0x03BC82E4 FMUL S6, S2, S6

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X23, 0x81B000
	012 Move X22, 0x596000
	013 Move W8, [X23+3467]
	014 Move X22, [X22+1120]
	015 Move X19, X2
	016 Move X21, X1
	017 Move W20, W0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x596000
	023 Move X0, [X0+1120]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3467], W8
	027 Move X0, [X22]
	028 Move S11, [X21+68]
	029 Move S10, [X21+72]
	030 Move S9, [X21+76]
	031 Move S8, [X21+80]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move W0, W20
	037 Move V2, V9
	038 Move V3, V8
	039 Move X1, X19
	040 Move X20, [X31+64]
	041 Move X19, [X31+72]
	042 Move X22, [X31+48]
	043 Move X21, [X31+56]
	044 Move X30, [X31+32]
	045 Move X23, [X31+40]
	046 Move D9, [X31+16]
	047 Move D8, [X31+24]
	048 Move V0, V11
	049 Move V1, V10
	050 Move D11, [X31+80]
	051 Move D10, [X31+88]
	052 Call XRDeviceSimulator.GetDeltaRotation, X0, X1, X2
	053 Return X0

Method: UnityEngine.Quaternion GetDeltaRotation(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/Space translateSpace, UnityEngine.Quaternion rotation, in UnityEngine.Quaternion inverseCameraParentRotation)

Disassembly:
	0x03BC9288 STP X20, X19, [X31 + 0xA0]
	0x03BC928C STR W31, [X31 + 0x2C]
	0x03BC9290 ADRP X25, 0x818000
	0x03BC9294 LDP S11, S12, [X2]
	0x03BC9298 LDR V13, [X2 + 0x8]
	0x03BC929C LDP S14, S15, [X0]
	0x03BC92A0 LDRB W8, [X25 + 0x585]
	0x03BC92A4 LDR V9, [X0 + 0x8]
	0x03BC92A8 MOV X19, X5
	0x03BC92AC MOV X21, X4
	0x03BC92B0 MOV V10.16B, V1.16B
	0x03BC92B4 MOV V8.16B, V0.16B
	0x03BC92B8 MOV X20, X3
	0x03BC92BC MOV X22, X2
	0x03BC92C0 MOV X24, X0
	0x03BC92C4 MOV X23, X1
	0x03BC92C8 STR S2, [X31 + 0x28]
	0x03BC92CC CBNZ W8, 0x3BC92E4
	0x03BC92D0 ADRP X0, 0x52A000
	0x03BC92D4 LDR X0, [X0 + 0x5A8]
	0x03BC92D8 BL 0x1C16CF4
	0x03BC92DC MOVZ W8, 0x1
	0x03BC92E0 STRB W8, [X25 + 0x585]
	0x03BC92E4 ADRP X8, 0x52A000
	0x03BC92E8 LDR X8, [X8 + 0x5A8]
	0x03BC92EC FSUB S14, S11, S14
	0x03BC92F0 FSUB S11, S12, S15
	0x03BC92F4 FSUB S9, S13, S9
	0x03BC92F8 LDR X0, [X8]
	0x03BC92FC LDR W8, [X0 + 0xE0]
	0x03BC9300 CBNZ W8, 0x3BC9308
	0x03BC9304 BL 0x1C16DFC
	0x03BC9308 FMUL S1, S14, S14
	0x03BC930C FMUL S2, S11, S11
	0x03BC9310 FMUL S0, S9, S9
	0x03BC9314 FADD S1, S1, S2
	0x03BC9318 FADD S0, S0, S1
	0x03BC931C FSQRT S0, S0
	0x03BC9320 FDIV S0, S0, S10
	0x03BC9324 MOV V1.16B, V8.16B
	0x03BC9328 BL 0x3BBD468
	0x03BC932C ADD X2, X31, 0x2C
	0x03BC9330 MOV X0, X20
	0x03BC9334 MOV X1, X23
	0x03BC9338 MOV X3, X31
	0x03BC933C STR D0, [X31 + 0x10]
	0x03BC9340 BL 0x3B874A8
	0x03BC9344 LDP S1, S0, [X31 + 0x28]
	0x03BC9348 FDIV S0, S0, S1
	0x03BC934C MOV V1.16B, V8.16B
	0x03BC9350 BL 0x3BBD468
	0x03BC9354 LDR V1, [X24]
	0x03BC9358 LDR V2, [X24 + 0x8]
	0x03BC935C LDR V3, [X22]
	0x03BC9360 LDR V4, [X22 + 0x8]
	0x03BC9364 LDR V5, [X31 + 0x1]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Compare W0, 0
	006 JumpIfNotEqual {39}
	007 Move S4, [X1]
	008 Move S7, [X1+4]
	009 Move S6, [X1+8]
	010 Move S5, [X1+12]
	011 Multiply S16, S3, S4
	012 Multiply S17, S0, S5
	013 Multiply S18, S1, S6
	014 Multiply S19, S2, S7
	015 Multiply S20, S3, S7
	016 Multiply S21, S1, S5
	017 Multiply S22, S2, S4
	018 Multiply S23, S0, S6
	019 Multiply S24, S0, S7
	020 Multiply S0, S0, S4
	021 Multiply S4, S1, S4
	022 Multiply S1, S1, S7
	023 Multiply S7, S3, S6
	024 Multiply S3, S3, S5
	025 Multiply S5, S2, S5
	026 Multiply S6, S2, S6
	027 Add S2, S16, S17
	028 Add S16, S20, S21
	029 Add S5, S7, S5
	030 Subtract S0, S3, S0
	031 Add S2, S18, S2
	032 Add S3, S22, S16
	033 Add S5, S24, S5
	034 Subtract S7, S0, S1
	035 Subtract S0, S2, S19
	036 Subtract S1, S3, S23
	037 Subtract S2, S5, S4
	038 Subtract S3, S7, S6
	039 Move X19, 0x810000
	040 Move W8, [X19+1939]
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x52C000
	044 Move X0, [X0+1448]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X19+1939], W8
	048 Move X8, 0x52C000
	049 Move X8, [X8+1448]
	050 Move X8, [X8]
	051 Move X8, [X8+184]
	052 Move S0, [X8]
	053 Move S1, [X8+4]
	054 Move S2, [X8+8]
	055 Move S3, [X8+12]
	056 Move S0, [X1]
	057 Move S1, [X1+4]
	058 Move S2, [X1+8]
	059 Move S3, [X1+12]
	060 Move X30, [X31+16]
	061 Move X19, [X31+24]
	062 Return X0

Method: System.Void Subscribe(UnityEngine.InputSystem.InputActionReference reference, System.Action`1<UnityEngine.InputSystem.InputAction/CallbackContext> performed = null, System.Action`1<UnityEngine.InputSystem.InputAction/CallbackContext> canceled = null)

Disassembly:
	0x03BC9368 MOV X0, X31
	0x03BC936C FSUB V3.2S, V3.2S, V1.2S
	0x03BC9370 FSUB S4, S4, S2
	0x00000000 INVALID
	0x03BC9378 FMUL S4, S5, S4
	0x03BC937C FADD V1.2S, V1.2S, V3.2S
	0x03BC9380 FADD S2, S2, S4
	0x03BC9384 STR D1, [X21]
	0x03BC9388 STR S2, [X21 + 0x8]
	0x03BC938C LDP S16, S1, [X23]
	0x03BC9390 LDP S2, S3, [X23 + 0x8]
	0x03BC9394 LDP S4, S5, [X20]
	0x03BC9398 LDP S6, S7, [X20 + 0x8]
	0x03BC939C STR S0, [X31]
	0x03BC93A0 MOV V0.16B, V16.16B
	0x03BC93A4 BL 0x3B47948
	0x03BC93A8 STP S0, S1, [X19]
	0x03BC93AC STP S2, S3, [X19 + 0x8]
	0x03BC93B0 LDP X20, X19, [X31 + 0xA0]
	0x03BC93B4 LDP X22, X21, [X31 + 0x90]
	0x03BC93B8 LDP X24, X23, [X31 + 0x80]
	0x03BC93BC LDP X30, X25, [X31 + 0x70]
	0x03BC93C0 LDP D9, D8, [X31 + 0x60]
	0x03BC93C4 LDP D11, D10, [X31 + 0x50]
	0x03BC93C8 LDP D13, D12, [X31 + 0x40]
	0x03BC93CC LDP D15, D14, [X31 + 0x30]
	0x03BC93D0 ADD X31, X31, 0xB0
	0x03BC93D4 RET
	0x03BC93D8 SUB X31, X31, 0x60
	0x03BC93DC STP D11, D10, [X31 + 0x10]
	0x03BC93E0 STP D9, D8, [X31 + 0x20]
	0x03BC93E4 STP X30, X31, [X31 + 0x30]
	0x03BC93E8 STP X22, X21, [X31 + 0x40]
	0x03BC93EC STP X20, X19, [X31 + 0x50]
	0x03BC93F0 MOV X22, X0
	0x03BC93F4 MOV X19, X3
	0x03BC93F8 MOV X20, X2
	0x03BC93FC MOV X21, X1
	0x03BC9400 ADD X2, X31, 0x3C
	0x03BC9404 MOV X0, X1
	0x03BC9408 MOV X1, X22

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x81A000
	008 Move X23, 0x595000
	009 Move W8, [X22+3468]
	010 Move X23, [X23+1120]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x595000
	019 Move X0, [X0+1120]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3468], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Call XRDeviceSimulator.GetInputAction, X0
	030 Compare X0, 0
	031 JumpIfEqual {52}
	032 Move X21, X0
	033 Compare X20, 0
	034 JumpIfEqual {39}
	035 Move X0, X21
	036 Move X1, X20
	037 Move X2, X31
	038 Call InputAction.add_performed, X0, X1
	039 Compare X19, 0
	040 JumpIfEqual {52}
	041 Move X0, X21
	042 Move X1, X19
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X2, X31
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Call InputAction.add_canceled, X0, X1
	051 Return 
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X30, [X31+48]
	057 Move X23, [X31+56]
	058 Return 

Method: System.Void Unsubscribe(UnityEngine.InputSystem.InputActionReference reference, System.Action`1<UnityEngine.InputSystem.InputAction/CallbackContext> performed = null, System.Action`1<UnityEngine.InputSystem.InputAction/CallbackContext> canceled = null)

Disassembly:
	0x03BC9490 LDP D9, D8, [X31 + 0x20]
	0x03BC9494 LDP D11, D10, [X31 + 0x10]
	0x03BC9498 ADD X31, X31, 0x60
	0x03BC949C RET
	0x03BC94A0 SUB X31, X31, 0xA0
	0x03BC94A4 STP D15, D14, [X31 + 0x10]
	0x03BC94A8 STP D13, D12, [X31 + 0x20]
	0x03BC94AC STP D11, D10, [X31 + 0x30]
	0x03BC94B0 STP D9, D8, [X31 + 0x40]
	0x03BC94B4 STR X30, [X31 + 0x50]
	0x03BC94B8 STP X26, X25, [X31 + 0x60]
	0x03BC94BC STP X24, X23, [X31 + 0x70]
	0x03BC94C0 STP X22, X21, [X31 + 0x80]
	0x03BC94C4 STP X20, X19, [X31 + 0x90]
	0x03BC94C8 ADRP X26, 0x818000
	0x03BC94CC LDP S10, S11, [X4]
	0x03BC94D0 LDR V12, [X4 + 0x8]
	0x03BC94D4 LDP S13, S14, [X0]
	0x03BC94D8 LDRB W8, [X26 + 0x585]
	0x03BC94DC LDR V15, [X0 + 0x8]
	0x03BC94E0 MOV X19, X7
	0x03BC94E4 MOV X20, X6
	0x03BC94E8 MOV X21, X5
	0x03BC94EC MOV V8.16B, V1.16B
	0x03BC94F0 MOV V9.16B, V0.16B
	0x03BC94F4 MOV X22, X3
	0x03BC94F8 MOV X23, X2
	0x03BC94FC MOV X25, X0
	0x03BC9500 MOV X24, X1
	0x03BC9504 CBNZ W8, 0x3BC951C
	0x03BC9508 ADRP X0, 0x52A000
	0x03BC950C LDR X0, [X0 + 0x5A8]
	0x03BC9510 BL 0x1C16CF4
	0x03BC9514 MOVZ W8, 0x1
	0x03BC9518 STRB W8, [X26 + 0x585]
	0x03BC951C ADRP X26, 0x52A000
	0x03BC9520 LDR X26, [X26 + 0x5A8]
	0x03BC9524 FSUB S13, S10, S13
	0x03BC9528 FSUB S10, S11, S14
	0x03BC952C FSUB S11, S12, S15
	0x03BC9530 LDR X0, [X26]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x81A000
	008 Move X23, 0x595000
	009 Move W8, [X22+3469]
	010 Move X23, [X23+1120]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x595000
	019 Move X0, [X0+1120]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3469], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Call XRDeviceSimulator.GetInputAction, X0
	030 Compare X0, 0
	031 JumpIfEqual {52}
	032 Move X21, X0
	033 Compare X20, 0
	034 JumpIfEqual {39}
	035 Move X0, X21
	036 Move X1, X20
	037 Move X2, X31
	038 Call InputAction.remove_performed, X0, X1
	039 Compare X19, 0
	040 JumpIfEqual {52}
	041 Move X0, X21
	042 Move X1, X19
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X2, X31
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Call InputAction.remove_canceled, X0, X1
	051 Return 
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X30, [X31+48]
	057 Move X23, [X31+56]
	058 Return 

Method: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/TransformationMode Negate(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/TransformationMode mode)

Disassembly:
	0x03BC9534 LDR W8, [X0 + 0xE0]
	0x03BC9538 CBNZ W8, 0x3BC9540
	0x03BC953C BL 0x1C16DFC

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: UnityEngine.CursorLockMode Negate(UnityEngine.CursorLockMode mode)

Disassembly:
	0x03BC9540 FMUL S1, S13, S13
	0x03BC9544 FMUL S2, S10, S10
	0x03BC9548 LDR V4, [X23]
	0x03BC954C LDR V6, [X23 + 0x8]
	0x03BC9550 FMUL S0, S11, S11

ISIL:
	001 Compare W1, 0
	002 JumpIfEqual {5}
	003 Move W0, W31
	004 Return X0
	005 Move W0, [X0+436]
	006 Return X0

Method: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/DeviceMode Negate(UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRDeviceSimulator/DeviceMode mode)

Disassembly:
	0x03BC9554 LDR V3, [X25]
	0x03BC9558 LDR V5, [X25 + 0x8]
	0x03BC955C FADD S1, S1, S2

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Void SubscribeKeyboardXTranslateAction()

Disassembly:
	0x03BC04AC BL 0x2A719B8
	0x03BC04B0 LDR X0, [X22]
	0x03BC04B4 LDR W8, [X0 + 0xE0]
	0x03BC04B8 CBNZ W8, 0x3BC04C0
	0x03BC04BC BL 0x1C16DFC
	0x03BC04C0 MOV X0, X20
	0x03BC04C4 MOV X1, X21
	0x03BC04C8 LDP X20, X19, [X31 + 0x20]
	0x03BC04CC LDP X22, X21, [X31 + 0x10]
	0x03BC04D0 MOV X2, X31
	0x03BC04D4 LDP X30, X23, [X31], #0x30
	0x03BC04D8 B 0x3BC8490
	0x03BC04DC STP X30, X23, [X31 - 0x30]!
	0x03BC04E0 STP X22, X21, [X31 + 0x10]
	0x03BC04E4 STP X20, X19, [X31 + 0x20]
	0x03BC04E8 ADRP X20, 0x822000
	0x03BC04EC ADRP X23, 0x537000
	0x03BC04F0 ADRP X21, 0x59D000
	0x03BC04F4 ADRP X22, 0x59D000
	0x03BC04F8 LDRB W8, [X20 + 0xDA0]
	0x03BC04FC LDR X23, [X23 + 0x3D8]
	0x03BC0500 LDR X21, [X21 + 0x4D0]
	0x03BC0504 LDR X22, [X22 + 0x460]
	0x03BC0508 MOV X19, X0
	0x03BC050C TBNZ X8, 0x0, 0x3BC053C
	0x03BC0510 ADRP X0, 0x537000
	0x03BC0514 LDR X0, [X0 + 0x3D8]
	0x03BC0518 BL 0x1C16CF4
	0x03BC051C ADRP X0, 0x59D000
	0x03BC0520 LDR X0, [X0 + 0x4D0]
	0x03BC0524 BL 0x1C16CF4
	0x03BC0528 ADRP X0, 0x59D000
	0x03BC052C LDR X0, [X0 + 0x460]
	0x03BC0530 BL 0x1C16CF4
	0x03BC0534 MOVZ W8, 0x1
	0x03BC0538 STRB W8, [X20 + 0xDA0]
	0x03BC053C LDR X0, [X23]
	0x03BC0540 LDR X20, [X19 + 0x78]
	0x03BC0544 BL 0x1C16F10
	0x03BC0548 LDR X2, [X21]
	0x03BC054C MOV X1, X19
	0x03BC0550 MOV X3, X31
	0x03BC0554 MOV X21, X0
	0x03BC0558 BL 0x2A719B8
	0x03BC055C LDR X0, [X22]
	0x03BC0560 LDR W8, [X0 + 0xE0]
	0x03BC0564 CBNZ W8, 0x3BC056C
	0x03BC0568 BL 0x1C16DFC
	0x03BC056C MOV X0, X20
	0x03BC0570 MOV X1, X21
	0x03BC0574 LDP X20, X19, [X31 + 0x20]
	0x03BC0578 LDP X22, X21, [X31 + 0x10]
	0x03BC057C MOV X2, X31
	0x03BC0580 LDP X30, X23, [X31], #0x30
	0x03BC0584 B 0x3BC8368
	0x03BC0588 LDR X0, [X0 + 0x80]
	0x03BC058C RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x823000
	009 Move X24, 0x538000
	010 Move X21, 0x59E000
	011 Move X22, 0x59E000
	012 Move X23, 0x59E000
	013 Move W8, [X20+3470]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1104]
	016 Move X22, [X22+1112]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x538000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59E000
	027 Move X0, [X0+1112]
	028 Call 0x1C17CF4
	029 Move X0, 0x59E000
	030 Move X0, [X0+1104]
	031 Call 0x1C17CF4
	032 Move X0, 0x59E000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3470], W8
	037 Move X0, [X24]
	038 Move X20, [X19+48]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeKeyboardXTranslateAction()

Disassembly:
	0x03BC03C8 MOV X22, X0
	0x03BC03CC BL 0x2A719B8
	0x03BC03D0 LDR X0, [X23]
	0x03BC03D4 LDR W8, [X0 + 0xE0]
	0x03BC03D8 CBNZ W8, 0x3BC03E0
	0x03BC03DC BL 0x1C16DFC
	0x03BC03E0 MOV X0, X20
	0x03BC03E4 MOV X1, X21
	0x03BC03E8 MOV X2, X22
	0x03BC03EC LDP X20, X19, [X31 + 0x30]
	0x03BC03F0 LDP X22, X21, [X31 + 0x20]
	0x03BC03F4 LDP X24, X23, [X31 + 0x10]
	0x03BC03F8 LDR X30, [X31], #0x40
	0x03BC03FC B 0x3BC8368
	0x03BC0400 LDR X0, [X0 + 0x78]
	0x03BC0404 RET
	0x03BC0408 STR X30, [X31 - 0x20]!
	0x03BC040C STP X20, X19, [X31 + 0x10]
	0x03BC0410 MOV X19, X1
	0x03BC0414 MOV X20, X0
	0x03BC0418 BL 0x3BC0430
	0x03BC041C STR X19, [X20 + 0x78]
	0x03BC0420 MOV X0, X20
	0x03BC0424 LDP X20, X19, [X31 + 0x10]
	0x03BC0428 LDR X30, [X31], #0x20
	0x03BC042C B 0x3BC04DC
	0x03BC0430 STP X30, X23, [X31 - 0x30]!
	0x03BC0434 STP X22, X21, [X31 + 0x10]
	0x03BC0438 STP X20, X19, [X31 + 0x20]
	0x03BC043C ADRP X20, 0x822000
	0x03BC0440 ADRP X23, 0x537000
	0x03BC0444 ADRP X21, 0x59D000
	0x03BC0448 ADRP X22, 0x59D000
	0x03BC044C LDRB W8, [X20 + 0xDA1]
	0x03BC0450 LDR X23, [X23 + 0x3D8]
	0x03BC0454 LDR X21, [X21 + 0x4D0]
	0x03BC0458 LDR X22, [X22 + 0x460]
	0x03BC045C MOV X19, X0
	0x03BC0460 TBNZ X8, 0x0, 0x3BC0490
	0x03BC0464 ADRP X0, 0x537000
	0x03BC0468 LDR X0, [X0 + 0x3D8]
	0x03BC046C BL 0x1C16CF4
	0x03BC0470 ADRP X0, 0x59D000
	0x03BC0474 LDR X0, [X0 + 0x4D0]
	0x03BC0478 BL 0x1C16CF4
	0x03BC047C ADRP X0, 0x59D000
	0x03BC0480 LDR X0, [X0 + 0x460]
	0x03BC0484 BL 0x1C16CF4
	0x03BC0488 MOVZ W8, 0x1
	0x03BC048C STRB W8, [X20 + 0xDA1]
	0x03BC0490 LDR X0, [X23]
	0x03BC0494 LDR X20, [X19 + 0x78]
	0x03BC0498 BL 0x1C16F10
	0x03BC049C LDR X2, [X21]
	0x03BC04A0 MOV X1, X19
	0x03BC04A4 MOV X3, X31
	0x03BC04A8 MOV X21, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x823000
	009 Move X24, 0x538000
	010 Move X21, 0x59E000
	011 Move X22, 0x59E000
	012 Move X23, 0x59E000
	013 Move W8, [X20+3471]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1104]
	016 Move X22, [X22+1112]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x538000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59E000
	027 Move X0, [X0+1112]
	028 Call 0x1C17CF4
	029 Move X0, 0x59E000
	030 Move X0, [X0+1104]
	031 Call 0x1C17CF4
	032 Move X0, 0x59E000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3471], W8
	037 Move X0, [X24]
	038 Move X20, [X19+48]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeKeyboardYTranslateAction()

Disassembly:
	0x03BC06A4 ADRP X0, 0x59D000
	0x03BC06A8 LDR X0, [X0 + 0x4D8]
	0x03BC06AC BL 0x1C16CF4
	0x03BC06B0 ADRP X0, 0x59D000
	0x03BC06B4 LDR X0, [X0 + 0x460]
	0x03BC06B8 BL 0x1C16CF4
	0x03BC06BC MOVZ W8, 0x1
	0x03BC06C0 STRB W8, [X20 + 0xDA2]
	0x03BC06C4 LDR X0, [X23]
	0x03BC06C8 LDR X20, [X19 + 0x80]
	0x03BC06CC BL 0x1C16F10
	0x03BC06D0 LDR X2, [X21]
	0x03BC06D4 MOV X1, X19
	0x03BC06D8 MOV X3, X31
	0x03BC06DC MOV X21, X0
	0x03BC06E0 BL 0x2A719B8
	0x03BC06E4 LDR X0, [X22]
	0x03BC06E8 LDR W8, [X0 + 0xE0]
	0x03BC06EC CBNZ W8, 0x3BC06F4
	0x03BC06F0 BL 0x1C16DFC
	0x03BC06F4 MOV X0, X20
	0x03BC06F8 MOV X1, X21
	0x03BC06FC LDP X20, X19, [X31 + 0x20]
	0x03BC0700 LDP X22, X21, [X31 + 0x10]
	0x03BC0704 MOV X2, X31
	0x03BC0708 LDP X30, X23, [X31], #0x30
	0x03BC070C B 0x3BC8368
	0x03BC0710 LDR X0, [X0 + 0x88]
	0x03BC0714 RET
	0x03BC0718 STR X30, [X31 - 0x20]!
	0x03BC071C STP X20, X19, [X31 + 0x10]
	0x03BC0720 MOV X19, X1
	0x03BC0724 MOV X20, X0
	0x03BC0728 BL 0x3BC0740
	0x03BC072C STR X19, [X20 + 0x88]
	0x03BC0730 MOV X0, X20
	0x03BC0734 LDP X20, X19, [X31 + 0x10]
	0x03BC0738 LDR X30, [X31], #0x20
	0x03BC073C B 0x3BC07EC
	0x03BC0740 STP X30, X23, [X31 - 0x30]!
	0x03BC0744 STP X22, X21, [X31 + 0x10]
	0x03BC0748 STP X20, X19, [X31 + 0x20]
	0x03BC074C ADRP X20, 0x822000
	0x03BC0750 ADRP X23, 0x537000
	0x03BC0754 ADRP X21, 0x59D000
	0x03BC0758 ADRP X22, 0x59D000
	0x03BC075C LDRB W8, [X20 + 0xDA5]
	0x03BC0760 LDR X23, [X23 + 0x3D8]
	0x03BC0764 LDR X21, [X21 + 0x4E0]
	0x03BC0768 LDR X22, [X22 + 0x460]
	0x03BC076C MOV X19, X0
	0x03BC0770 TBNZ X8, 0x0, 0x3BC07A0
	0x03BC0774 ADRP X0, 0x537000
	0x03BC0778 LDR X0, [X0 + 0x3D8]
	0x03BC077C BL 0x1C16CF4
	0x03BC0780 ADRP X0, 0x59D000
	0x03BC0784 LDR X0, [X0 + 0x4E0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x823000
	009 Move X24, 0x538000
	010 Move X21, 0x59E000
	011 Move X22, 0x59E000
	012 Move X23, 0x59E000
	013 Move W8, [X20+3472]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1128]
	016 Move X22, [X22+1136]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x538000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59E000
	027 Move X0, [X0+1136]
	028 Call 0x1C17CF4
	029 Move X0, 0x59E000
	030 Move X0, [X0+1128]
	031 Call 0x1C17CF4
	032 Move X0, 0x59E000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3472], W8
	037 Move X0, [X24]
	038 Move X20, [X19+56]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeKeyboardYTranslateAction()

Disassembly:
	0x03BC05C0 STP X20, X19, [X31 + 0x20]
	0x03BC05C4 ADRP X20, 0x822000
	0x03BC05C8 ADRP X23, 0x537000
	0x03BC05CC ADRP X21, 0x59D000
	0x03BC05D0 ADRP X22, 0x59D000
	0x03BC05D4 LDRB W8, [X20 + 0xDA3]
	0x03BC05D8 LDR X23, [X23 + 0x3D8]
	0x03BC05DC LDR X21, [X21 + 0x4D8]
	0x03BC05E0 LDR X22, [X22 + 0x460]
	0x03BC05E4 MOV X19, X0
	0x03BC05E8 TBNZ X8, 0x0, 0x3BC0618
	0x03BC05EC ADRP X0, 0x537000
	0x03BC05F0 LDR X0, [X0 + 0x3D8]
	0x03BC05F4 BL 0x1C16CF4
	0x03BC05F8 ADRP X0, 0x59D000
	0x03BC05FC LDR X0, [X0 + 0x4D8]
	0x03BC0600 BL 0x1C16CF4
	0x03BC0604 ADRP X0, 0x59D000
	0x03BC0608 LDR X0, [X0 + 0x460]
	0x03BC060C BL 0x1C16CF4
	0x03BC0610 MOVZ W8, 0x1
	0x03BC0614 STRB W8, [X20 + 0xDA3]
	0x03BC0618 LDR X0, [X23]
	0x03BC061C LDR X20, [X19 + 0x80]
	0x03BC0620 BL 0x1C16F10
	0x03BC0624 LDR X2, [X21]
	0x03BC0628 MOV X1, X19
	0x03BC062C MOV X3, X31
	0x03BC0630 MOV X21, X0
	0x03BC0634 BL 0x2A719B8
	0x03BC0638 LDR X0, [X22]
	0x03BC063C LDR W8, [X0 + 0xE0]
	0x03BC0640 CBNZ W8, 0x3BC0648
	0x03BC0644 BL 0x1C16DFC
	0x03BC0648 MOV X0, X20
	0x03BC064C MOV X1, X21
	0x03BC0650 LDP X20, X19, [X31 + 0x20]
	0x03BC0654 LDP X22, X21, [X31 + 0x10]
	0x03BC0658 MOV X2, X31
	0x03BC065C LDP X30, X23, [X31], #0x30
	0x03BC0660 B 0x3BC8490
	0x03BC0664 STP X30, X23, [X31 - 0x30]!
	0x03BC0668 STP X22, X21, [X31 + 0x10]
	0x03BC066C STP X20, X19, [X31 + 0x20]
	0x03BC0670 ADRP X20, 0x822000
	0x03BC0674 ADRP X23, 0x537000
	0x03BC0678 ADRP X21, 0x59D000
	0x03BC067C ADRP X22, 0x59D000
	0x03BC0680 LDRB W8, [X20 + 0xDA2]
	0x03BC0684 LDR X23, [X23 + 0x3D8]
	0x03BC0688 LDR X21, [X21 + 0x4D8]
	0x03BC068C LDR X22, [X22 + 0x460]
	0x03BC0690 MOV X19, X0
	0x03BC0694 TBNZ X8, 0x0, 0x3BC06C4
	0x03BC0698 ADRP X0, 0x537000
	0x03BC069C LDR X0, [X0 + 0x3D8]
	0x03BC06A0 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x823000
	009 Move X24, 0x538000
	010 Move X21, 0x59E000
	011 Move X22, 0x59E000
	012 Move X23, 0x59E000
	013 Move W8, [X20+3473]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1128]
	016 Move X22, [X22+1136]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x538000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59E000
	027 Move X0, [X0+1136]
	028 Call 0x1C17CF4
	029 Move X0, 0x59E000
	030 Move X0, [X0+1128]
	031 Call 0x1C17CF4
	032 Move X0, 0x59E000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3473], W8
	037 Move X0, [X24]
	038 Move X20, [X19+56]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeKeyboardZTranslateAction()

Disassembly:
	0x03BC089C RET
	0x03BC08A0 STR X30, [X31 - 0x20]!
	0x03BC08A4 STP X20, X19, [X31 + 0x10]
	0x03BC08A8 MOV X19, X1
	0x03BC08AC MOV X20, X0
	0x03BC08B0 BL 0x3BC08C8
	0x03BC08B4 STR X19, [X20 + 0x90]
	0x03BC08B8 MOV X0, X20
	0x03BC08BC LDP X20, X19, [X31 + 0x10]
	0x03BC08C0 LDR X30, [X31], #0x20
	0x03BC08C4 B 0x3BC09AC
	0x03BC08C8 STR X30, [X31 - 0x40]!
	0x03BC08CC STP X24, X23, [X31 + 0x10]
	0x03BC08D0 STP X22, X21, [X31 + 0x20]
	0x03BC08D4 STP X20, X19, [X31 + 0x30]
	0x03BC08D8 ADRP X20, 0x822000
	0x03BC08DC ADRP X24, 0x537000
	0x03BC08E0 ADRP X21, 0x59D000
	0x03BC08E4 ADRP X22, 0x59D000
	0x03BC08E8 ADRP X23, 0x59D000
	0x03BC08EC LDRB W8, [X20 + 0xDA7]
	0x03BC08F0 LDR X24, [X24 + 0x3D8]
	0x03BC08F4 LDR X21, [X21 + 0x4E8]
	0x03BC08F8 LDR X22, [X22 + 0x4F0]
	0x03BC08FC LDR X23, [X23 + 0x460]
	0x03BC0900 MOV X19, X0
	0x03BC0904 TBNZ X8, 0x0, 0x3BC0940
	0x03BC0908 ADRP X0, 0x537000
	0x03BC090C LDR X0, [X0 + 0x3D8]
	0x03BC0910 BL 0x1C16CF4
	0x03BC0914 ADRP X0, 0x59D000
	0x03BC0918 LDR X0, [X0 + 0x4F0]
	0x03BC091C BL 0x1C16CF4
	0x03BC0920 ADRP X0, 0x59D000
	0x03BC0924 LDR X0, [X0 + 0x4E8]
	0x03BC0928 BL 0x1C16CF4
	0x03BC092C ADRP X0, 0x59D000
	0x03BC0930 LDR X0, [X0 + 0x460]
	0x03BC0934 BL 0x1C16CF4
	0x03BC0938 MOVZ W8, 0x1
	0x03BC093C STRB W8, [X20 + 0xDA7]
	0x03BC0940 LDR X0, [X24]
	0x03BC0944 LDR X20, [X19 + 0x90]
	0x03BC0948 BL 0x1C16F10
	0x03BC094C LDR X2, [X21]
	0x03BC0950 MOV X1, X19
	0x03BC0954 MOV X3, X31
	0x03BC0958 MOV X21, X0
	0x03BC095C BL 0x2A719B8
	0x03BC0960 LDR X0, [X24]
	0x03BC0964 BL 0x1C16F10
	0x03BC0968 LDR X2, [X22]
	0x03BC096C MOV X1, X19
	0x03BC0970 MOV X3, X31
	0x03BC0974 MOV X22, X0
	0x03BC0978 BL 0x2A719B8
	0x03BC097C LDR X0, [X23]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x823000
	009 Move X24, 0x538000
	010 Move X21, 0x59E000
	011 Move X22, 0x59E000
	012 Move X23, 0x59E000
	013 Move W8, [X20+3474]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1144]
	016 Move X22, [X22+1152]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x538000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59E000
	027 Move X0, [X0+1152]
	028 Call 0x1C17CF4
	029 Move X0, 0x59E000
	030 Move X0, [X0+1144]
	031 Call 0x1C17CF4
	032 Move X0, 0x59E000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3474], W8
	037 Move X0, [X24]
	038 Move X20, [X19+64]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeKeyboardZTranslateAction()

Disassembly:
	0x03BC07B8 MOV X21, X0
	0x03BC07BC BL 0x2A719B8
	0x03BC07C0 LDR X0, [X22]
	0x03BC07C4 LDR W8, [X0 + 0xE0]
	0x03BC07C8 CBNZ W8, 0x3BC07D0
	0x03BC07CC BL 0x1C16DFC
	0x03BC07D0 MOV X0, X20
	0x03BC07D4 MOV X1, X21
	0x03BC07D8 LDP X20, X19, [X31 + 0x20]
	0x03BC07DC LDP X22, X21, [X31 + 0x10]
	0x03BC07E0 MOV X2, X31
	0x03BC07E4 LDP X30, X23, [X31], #0x30
	0x03BC07E8 B 0x3BC8490
	0x03BC07EC STP X30, X23, [X31 - 0x30]!
	0x03BC07F0 STP X22, X21, [X31 + 0x10]
	0x03BC07F4 STP X20, X19, [X31 + 0x20]
	0x03BC07F8 ADRP X20, 0x822000
	0x03BC07FC ADRP X23, 0x537000
	0x03BC0800 ADRP X21, 0x59D000
	0x03BC0804 ADRP X22, 0x59D000
	0x03BC0808 LDRB W8, [X20 + 0xDA4]
	0x03BC080C LDR X23, [X23 + 0x3D8]
	0x03BC0810 LDR X21, [X21 + 0x4E0]
	0x03BC0814 LDR X22, [X22 + 0x460]
	0x03BC0818 MOV X19, X0
	0x03BC081C TBNZ X8, 0x0, 0x3BC084C
	0x03BC0820 ADRP X0, 0x537000
	0x03BC0824 LDR X0, [X0 + 0x3D8]
	0x03BC0828 BL 0x1C16CF4
	0x03BC082C ADRP X0, 0x59D000
	0x03BC0830 LDR X0, [X0 + 0x4E0]
	0x03BC0834 BL 0x1C16CF4
	0x03BC0838 ADRP X0, 0x59D000
	0x03BC083C LDR X0, [X0 + 0x460]
	0x03BC0840 BL 0x1C16CF4
	0x03BC0844 MOVZ W8, 0x1
	0x03BC0848 STRB W8, [X20 + 0xDA4]
	0x03BC084C LDR X0, [X23]
	0x03BC0850 LDR X20, [X19 + 0x88]
	0x03BC0854 BL 0x1C16F10
	0x03BC0858 LDR X2, [X21]
	0x03BC085C MOV X1, X19
	0x03BC0860 MOV X3, X31
	0x03BC0864 MOV X21, X0
	0x03BC0868 BL 0x2A719B8
	0x03BC086C LDR X0, [X22]
	0x03BC0870 LDR W8, [X0 + 0xE0]
	0x03BC0874 CBNZ W8, 0x3BC087C
	0x03BC0878 BL 0x1C16DFC
	0x03BC087C MOV X0, X20
	0x03BC0880 MOV X1, X21
	0x03BC0884 LDP X20, X19, [X31 + 0x20]
	0x03BC0888 LDP X22, X21, [X31 + 0x10]
	0x03BC088C MOV X2, X31
	0x03BC0890 LDP X30, X23, [X31], #0x30
	0x03BC0894 B 0x3BC8368
	0x03BC0898 LDR X0, [X0 + 0x90]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x823000
	009 Move X24, 0x538000
	010 Move X21, 0x59E000
	011 Move X22, 0x59E000
	012 Move X23, 0x59E000
	013 Move W8, [X20+3475]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1144]
	016 Move X22, [X22+1152]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x538000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59E000
	027 Move X0, [X0+1152]
	028 Call 0x1C17CF4
	029 Move X0, 0x59E000
	030 Move X0, [X0+1144]
	031 Call 0x1C17CF4
	032 Move X0, 0x59E000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3475], W8
	037 Move X0, [X24]
	038 Move X20, [X19+64]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeManipulateLeftAction()

Disassembly:
	0x03BC0A94 RET
	0x03BC0A98 STR X30, [X31 - 0x20]!
	0x03BC0A9C STP X20, X19, [X31 + 0x10]
	0x03BC0AA0 MOV X19, X1
	0x03BC0AA4 MOV X20, X0
	0x03BC0AA8 BL 0x3BC0AC0
	0x03BC0AAC STR X19, [X20 + 0x98]
	0x03BC0AB0 MOV X0, X20
	0x03BC0AB4 LDP X20, X19, [X31 + 0x10]
	0x03BC0AB8 LDR X30, [X31], #0x20
	0x03BC0ABC B 0x3BC0BA4
	0x03BC0AC0 STR X30, [X31 - 0x40]!
	0x03BC0AC4 STP X24, X23, [X31 + 0x10]
	0x03BC0AC8 STP X22, X21, [X31 + 0x20]
	0x03BC0ACC STP X20, X19, [X31 + 0x30]
	0x03BC0AD0 ADRP X20, 0x822000
	0x03BC0AD4 ADRP X24, 0x537000
	0x03BC0AD8 ADRP X21, 0x59D000
	0x03BC0ADC ADRP X22, 0x59D000
	0x03BC0AE0 ADRP X23, 0x59D000
	0x03BC0AE4 LDRB W8, [X20 + 0xDA9]
	0x03BC0AE8 LDR X24, [X24 + 0x3D8]
	0x03BC0AEC LDR X21, [X21 + 0x4F8]
	0x03BC0AF0 LDR X22, [X22 + 0x500]
	0x03BC0AF4 LDR X23, [X23 + 0x460]
	0x03BC0AF8 MOV X19, X0
	0x03BC0AFC TBNZ X8, 0x0, 0x3BC0B38
	0x03BC0B00 ADRP X0, 0x537000
	0x03BC0B04 LDR X0, [X0 + 0x3D8]
	0x03BC0B08 BL 0x1C16CF4
	0x03BC0B0C ADRP X0, 0x59D000
	0x03BC0B10 LDR X0, [X0 + 0x500]
	0x03BC0B14 BL 0x1C16CF4
	0x03BC0B18 ADRP X0, 0x59D000
	0x03BC0B1C LDR X0, [X0 + 0x4F8]
	0x03BC0B20 BL 0x1C16CF4
	0x03BC0B24 ADRP X0, 0x59D000
	0x03BC0B28 LDR X0, [X0 + 0x460]
	0x03BC0B2C BL 0x1C16CF4
	0x03BC0B30 MOVZ W8, 0x1
	0x03BC0B34 STRB W8, [X20 + 0xDA9]
	0x03BC0B38 LDR X0, [X24]
	0x03BC0B3C LDR X20, [X19 + 0x98]
	0x03BC0B40 BL 0x1C16F10
	0x03BC0B44 LDR X2, [X21]
	0x03BC0B48 MOV X1, X19
	0x03BC0B4C MOV X3, X31
	0x03BC0B50 MOV X21, X0
	0x03BC0B54 BL 0x2A719B8
	0x03BC0B58 LDR X0, [X24]
	0x03BC0B5C BL 0x1C16F10
	0x03BC0B60 LDR X2, [X22]
	0x03BC0B64 MOV X1, X19
	0x03BC0B68 MOV X3, X31
	0x03BC0B6C MOV X22, X0
	0x03BC0B70 BL 0x2A719B8
	0x03BC0B74 LDR X0, [X23]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x823000
	009 Move X24, 0x538000
	010 Move X21, 0x59E000
	011 Move X22, 0x59E000
	012 Move X23, 0x59E000
	013 Move W8, [X20+3476]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1160]
	016 Move X22, [X22+1168]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x538000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59E000
	027 Move X0, [X0+1168]
	028 Call 0x1C17CF4
	029 Move X0, 0x59E000
	030 Move X0, [X0+1160]
	031 Call 0x1C17CF4
	032 Move X0, 0x59E000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3476], W8
	037 Move X0, [X24]
	038 Move X20, [X19+72]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeManipulateLeftAction()

Disassembly:
	0x03BC09B0 STP X24, X23, [X31 + 0x10]
	0x03BC09B4 STP X22, X21, [X31 + 0x20]
	0x03BC09B8 STP X20, X19, [X31 + 0x30]
	0x03BC09BC ADRP X20, 0x822000
	0x03BC09C0 ADRP X24, 0x537000
	0x03BC09C4 ADRP X21, 0x59D000
	0x03BC09C8 ADRP X22, 0x59D000
	0x03BC09CC ADRP X23, 0x59D000
	0x03BC09D0 LDRB W8, [X20 + 0xDA6]
	0x03BC09D4 LDR X24, [X24 + 0x3D8]
	0x03BC09D8 LDR X21, [X21 + 0x4E8]
	0x03BC09DC LDR X22, [X22 + 0x4F0]
	0x03BC09E0 LDR X23, [X23 + 0x460]
	0x03BC09E4 MOV X19, X0
	0x03BC09E8 TBNZ X8, 0x0, 0x3BC0A24
	0x03BC09EC ADRP X0, 0x537000
	0x03BC09F0 LDR X0, [X0 + 0x3D8]
	0x03BC09F4 BL 0x1C16CF4
	0x03BC09F8 ADRP X0, 0x59D000
	0x03BC09FC LDR X0, [X0 + 0x4F0]
	0x03BC0A00 BL 0x1C16CF4
	0x03BC0A04 ADRP X0, 0x59D000
	0x03BC0A08 LDR X0, [X0 + 0x4E8]
	0x03BC0A0C BL 0x1C16CF4
	0x03BC0A10 ADRP X0, 0x59D000
	0x03BC0A14 LDR X0, [X0 + 0x460]
	0x03BC0A18 BL 0x1C16CF4
	0x03BC0A1C MOVZ W8, 0x1
	0x03BC0A20 STRB W8, [X20 + 0xDA6]
	0x03BC0A24 LDR X0, [X24]
	0x03BC0A28 LDR X20, [X19 + 0x90]
	0x03BC0A2C BL 0x1C16F10
	0x03BC0A30 LDR X2, [X21]
	0x03BC0A34 MOV X1, X19
	0x03BC0A38 MOV X3, X31
	0x03BC0A3C MOV X21, X0
	0x03BC0A40 BL 0x2A719B8
	0x03BC0A44 LDR X0, [X24]
	0x03BC0A48 BL 0x1C16F10
	0x03BC0A4C LDR X2, [X22]
	0x03BC0A50 MOV X1, X19
	0x03BC0A54 MOV X3, X31
	0x03BC0A58 MOV X22, X0
	0x03BC0A5C BL 0x2A719B8
	0x03BC0A60 LDR X0, [X23]
	0x03BC0A64 LDR W8, [X0 + 0xE0]
	0x03BC0A68 CBNZ W8, 0x3BC0A70
	0x03BC0A6C BL 0x1C16DFC
	0x03BC0A70 MOV X0, X20
	0x03BC0A74 MOV X1, X21
	0x03BC0A78 MOV X2, X22
	0x03BC0A7C LDP X20, X19, [X31 + 0x30]
	0x03BC0A80 LDP X22, X21, [X31 + 0x20]
	0x03BC0A84 LDP X24, X23, [X31 + 0x10]
	0x03BC0A88 LDR X30, [X31], #0x40
	0x03BC0A8C B 0x3BC8368
	0x03BC0A90 LDR X0, [X0 + 0x98]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x823000
	009 Move X24, 0x538000
	010 Move X21, 0x59E000
	011 Move X22, 0x59E000
	012 Move X23, 0x59E000
	013 Move W8, [X20+3477]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1160]
	016 Move X22, [X22+1168]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x538000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59E000
	027 Move X0, [X0+1168]
	028 Call 0x1C17CF4
	029 Move X0, 0x59E000
	030 Move X0, [X0+1160]
	031 Call 0x1C17CF4
	032 Move X0, 0x59E000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3477], W8
	037 Move X0, [X24]
	038 Move X20, [X19+72]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeManipulateRightAction()

Disassembly:
	0x03BC0C8C RET
	0x03BC0C90 STR X30, [X31 - 0x20]!
	0x03BC0C94 STP X20, X19, [X31 + 0x10]
	0x03BC0C98 MOV X19, X1
	0x03BC0C9C MOV X20, X0
	0x03BC0CA0 BL 0x3BC0CB8
	0x03BC0CA4 STR X19, [X20 + 0xA0]
	0x03BC0CA8 MOV X0, X20
	0x03BC0CAC LDP X20, X19, [X31 + 0x10]
	0x03BC0CB0 LDR X30, [X31], #0x20
	0x03BC0CB4 B 0x3BC0D9C
	0x03BC0CB8 STR X30, [X31 - 0x40]!
	0x03BC0CBC STP X24, X23, [X31 + 0x10]
	0x03BC0CC0 STP X22, X21, [X31 + 0x20]
	0x03BC0CC4 STP X20, X19, [X31 + 0x30]
	0x03BC0CC8 ADRP X20, 0x822000
	0x03BC0CCC ADRP X24, 0x537000
	0x03BC0CD0 ADRP X21, 0x59D000
	0x03BC0CD4 ADRP X22, 0x59D000
	0x03BC0CD8 ADRP X23, 0x59D000
	0x03BC0CDC LDRB W8, [X20 + 0xDAB]
	0x03BC0CE0 LDR X24, [X24 + 0x3D8]
	0x03BC0CE4 LDR X21, [X21 + 0x508]
	0x03BC0CE8 LDR X22, [X22 + 0x510]
	0x03BC0CEC LDR X23, [X23 + 0x460]
	0x03BC0CF0 MOV X19, X0
	0x03BC0CF4 TBNZ X8, 0x0, 0x3BC0D30
	0x03BC0CF8 ADRP X0, 0x537000
	0x03BC0CFC LDR X0, [X0 + 0x3D8]
	0x03BC0D00 BL 0x1C16CF4
	0x03BC0D04 ADRP X0, 0x59D000
	0x03BC0D08 LDR X0, [X0 + 0x510]
	0x03BC0D0C BL 0x1C16CF4
	0x03BC0D10 ADRP X0, 0x59D000
	0x03BC0D14 LDR X0, [X0 + 0x508]
	0x03BC0D18 BL 0x1C16CF4
	0x03BC0D1C ADRP X0, 0x59D000
	0x03BC0D20 LDR X0, [X0 + 0x460]
	0x03BC0D24 BL 0x1C16CF4
	0x03BC0D28 MOVZ W8, 0x1
	0x03BC0D2C STRB W8, [X20 + 0xDAB]
	0x03BC0D30 LDR X0, [X24]
	0x03BC0D34 LDR X20, [X19 + 0xA0]
	0x03BC0D38 BL 0x1C16F10
	0x03BC0D3C LDR X2, [X21]
	0x03BC0D40 MOV X1, X19
	0x03BC0D44 MOV X3, X31
	0x03BC0D48 MOV X21, X0
	0x03BC0D4C BL 0x2A719B8
	0x03BC0D50 LDR X0, [X24]
	0x03BC0D54 BL 0x1C16F10
	0x03BC0D58 LDR X2, [X22]
	0x03BC0D5C MOV X1, X19
	0x03BC0D60 MOV X3, X31
	0x03BC0D64 MOV X22, X0
	0x03BC0D68 BL 0x2A719B8
	0x03BC0D6C LDR X0, [X23]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x823000
	009 Move X24, 0x538000
	010 Move X21, 0x59E000
	011 Move X22, 0x59E000
	012 Move X23, 0x59E000
	013 Move W8, [X20+3478]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1176]
	016 Move X22, [X22+1184]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x538000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59E000
	027 Move X0, [X0+1184]
	028 Call 0x1C17CF4
	029 Move X0, 0x59E000
	030 Move X0, [X0+1176]
	031 Call 0x1C17CF4
	032 Move X0, 0x59E000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3478], W8
	037 Move X0, [X24]
	038 Move X20, [X19+80]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeManipulateRightAction()

Disassembly:
	0x03BC0BA8 STP X24, X23, [X31 + 0x10]
	0x03BC0BAC STP X22, X21, [X31 + 0x20]
	0x03BC0BB0 STP X20, X19, [X31 + 0x30]
	0x03BC0BB4 ADRP X20, 0x822000
	0x03BC0BB8 ADRP X24, 0x537000
	0x03BC0BBC ADRP X21, 0x59D000
	0x03BC0BC0 ADRP X22, 0x59D000
	0x03BC0BC4 ADRP X23, 0x59D000
	0x03BC0BC8 LDRB W8, [X20 + 0xDA8]
	0x03BC0BCC LDR X24, [X24 + 0x3D8]
	0x03BC0BD0 LDR X21, [X21 + 0x4F8]
	0x03BC0BD4 LDR X22, [X22 + 0x500]
	0x03BC0BD8 LDR X23, [X23 + 0x460]
	0x03BC0BDC MOV X19, X0
	0x03BC0BE0 TBNZ X8, 0x0, 0x3BC0C1C
	0x03BC0BE4 ADRP X0, 0x537000
	0x03BC0BE8 LDR X0, [X0 + 0x3D8]
	0x03BC0BEC BL 0x1C16CF4
	0x03BC0BF0 ADRP X0, 0x59D000
	0x03BC0BF4 LDR X0, [X0 + 0x500]
	0x03BC0BF8 BL 0x1C16CF4
	0x03BC0BFC ADRP X0, 0x59D000
	0x03BC0C00 LDR X0, [X0 + 0x4F8]
	0x03BC0C04 BL 0x1C16CF4
	0x03BC0C08 ADRP X0, 0x59D000
	0x03BC0C0C LDR X0, [X0 + 0x460]
	0x03BC0C10 BL 0x1C16CF4
	0x03BC0C14 MOVZ W8, 0x1
	0x03BC0C18 STRB W8, [X20 + 0xDA8]
	0x03BC0C1C LDR X0, [X24]
	0x03BC0C20 LDR X20, [X19 + 0x98]
	0x03BC0C24 BL 0x1C16F10
	0x03BC0C28 LDR X2, [X21]
	0x03BC0C2C MOV X1, X19
	0x03BC0C30 MOV X3, X31
	0x03BC0C34 MOV X21, X0
	0x03BC0C38 BL 0x2A719B8
	0x03BC0C3C LDR X0, [X24]
	0x03BC0C40 BL 0x1C16F10
	0x03BC0C44 LDR X2, [X22]
	0x03BC0C48 MOV X1, X19
	0x03BC0C4C MOV X3, X31
	0x03BC0C50 MOV X22, X0
	0x03BC0C54 BL 0x2A719B8
	0x03BC0C58 LDR X0, [X23]
	0x03BC0C5C LDR W8, [X0 + 0xE0]
	0x03BC0C60 CBNZ W8, 0x3BC0C68
	0x03BC0C64 BL 0x1C16DFC
	0x03BC0C68 MOV X0, X20
	0x03BC0C6C MOV X1, X21
	0x03BC0C70 MOV X2, X22
	0x03BC0C74 LDP X20, X19, [X31 + 0x30]
	0x03BC0C78 LDP X22, X21, [X31 + 0x20]
	0x03BC0C7C LDP X24, X23, [X31 + 0x10]
	0x03BC0C80 LDR X30, [X31], #0x40
	0x03BC0C84 B 0x3BC8368
	0x03BC0C88 LDR X0, [X0 + 0xA0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x823000
	009 Move X24, 0x538000
	010 Move X21, 0x59E000
	011 Move X22, 0x59E000
	012 Move X23, 0x59E000
	013 Move W8, [X20+3479]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1176]
	016 Move X22, [X22+1184]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x538000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59E000
	027 Move X0, [X0+1184]
	028 Call 0x1C17CF4
	029 Move X0, 0x59E000
	030 Move X0, [X0+1176]
	031 Call 0x1C17CF4
	032 Move X0, 0x59E000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3479], W8
	037 Move X0, [X24]
	038 Move X20, [X19+80]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeToggleManipulateLeftAction()

Disassembly:
	0x03BC0E4C BL 0x2A719B8
	0x03BC0E50 LDR X0, [X23]
	0x03BC0E54 LDR W8, [X0 + 0xE0]
	0x03BC0E58 CBNZ W8, 0x3BC0E60
	0x03BC0E5C BL 0x1C16DFC
	0x03BC0E60 MOV X0, X20
	0x03BC0E64 MOV X1, X21
	0x03BC0E68 MOV X2, X22
	0x03BC0E6C LDP X20, X19, [X31 + 0x30]
	0x03BC0E70 LDP X22, X21, [X31 + 0x20]
	0x03BC0E74 LDP X24, X23, [X31 + 0x10]
	0x03BC0E78 LDR X30, [X31], #0x40
	0x03BC0E7C B 0x3BC8368
	0x03BC0E80 LDR X0, [X0 + 0xA8]
	0x03BC0E84 RET
	0x03BC0E88 STR X30, [X31 - 0x20]!
	0x03BC0E8C STP X20, X19, [X31 + 0x10]
	0x03BC0E90 MOV X19, X1
	0x03BC0E94 MOV X20, X0
	0x03BC0E98 BL 0x3BC0EB0
	0x03BC0E9C STR X19, [X20 + 0xA8]
	0x03BC0EA0 MOV X0, X20
	0x03BC0EA4 LDP X20, X19, [X31 + 0x10]
	0x03BC0EA8 LDR X30, [X31], #0x20
	0x03BC0EAC B 0x3BC0F5C
	0x03BC0EB0 STP X30, X23, [X31 - 0x30]!
	0x03BC0EB4 STP X22, X21, [X31 + 0x10]
	0x03BC0EB8 STP X20, X19, [X31 + 0x20]
	0x03BC0EBC ADRP X20, 0x822000
	0x03BC0EC0 ADRP X23, 0x537000
	0x03BC0EC4 ADRP X21, 0x59D000
	0x03BC0EC8 ADRP X22, 0x59D000
	0x03BC0ECC LDRB W8, [X20 + 0xDAD]
	0x03BC0ED0 LDR X23, [X23 + 0x3D8]
	0x03BC0ED4 LDR X21, [X21 + 0x518]
	0x03BC0ED8 LDR X22, [X22 + 0x460]
	0x03BC0EDC MOV X19, X0
	0x03BC0EE0 TBNZ X8, 0x0, 0x3BC0F10
	0x03BC0EE4 ADRP X0, 0x537000
	0x03BC0EE8 LDR X0, [X0 + 0x3D8]
	0x03BC0EEC BL 0x1C16CF4
	0x03BC0EF0 ADRP X0, 0x59D000
	0x03BC0EF4 LDR X0, [X0 + 0x518]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x823000
	008 Move X23, 0x538000
	009 Move X21, 0x59E000
	010 Move X22, 0x59E000
	011 Move W8, [X20+3480]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1192]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x538000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59E000
	024 Move X0, [X0+1192]
	025 Call 0x1C17CF4
	026 Move X0, 0x59E000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3480], W8
	031 Move X0, [X23]
	032 Move X20, [X19+88]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	054 Return 

Method: System.Void UnsubscribeToggleManipulateLeftAction()

Disassembly:
	0x03BC0DA0 STP X24, X23, [X31 + 0x10]
	0x03BC0DA4 STP X22, X21, [X31 + 0x20]
	0x03BC0DA8 STP X20, X19, [X31 + 0x30]
	0x03BC0DAC ADRP X20, 0x822000
	0x03BC0DB0 ADRP X24, 0x537000
	0x03BC0DB4 ADRP X21, 0x59D000
	0x03BC0DB8 ADRP X22, 0x59D000
	0x03BC0DBC ADRP X23, 0x59D000
	0x03BC0DC0 LDRB W8, [X20 + 0xDAA]
	0x03BC0DC4 LDR X24, [X24 + 0x3D8]
	0x03BC0DC8 LDR X21, [X21 + 0x508]
	0x03BC0DCC LDR X22, [X22 + 0x510]
	0x03BC0DD0 LDR X23, [X23 + 0x460]
	0x03BC0DD4 MOV X19, X0
	0x03BC0DD8 TBNZ X8, 0x0, 0x3BC0E14
	0x03BC0DDC ADRP X0, 0x537000
	0x03BC0DE0 LDR X0, [X0 + 0x3D8]
	0x03BC0DE4 BL 0x1C16CF4
	0x03BC0DE8 ADRP X0, 0x59D000
	0x03BC0DEC LDR X0, [X0 + 0x510]
	0x03BC0DF0 BL 0x1C16CF4
	0x03BC0DF4 ADRP X0, 0x59D000
	0x03BC0DF8 LDR X0, [X0 + 0x508]
	0x03BC0DFC BL 0x1C16CF4
	0x03BC0E00 ADRP X0, 0x59D000
	0x03BC0E04 LDR X0, [X0 + 0x460]
	0x03BC0E08 BL 0x1C16CF4
	0x03BC0E0C MOVZ W8, 0x1
	0x03BC0E10 STRB W8, [X20 + 0xDAA]
	0x03BC0E14 LDR X0, [X24]
	0x03BC0E18 LDR X20, [X19 + 0xA0]
	0x03BC0E1C BL 0x1C16F10
	0x03BC0E20 LDR X2, [X21]
	0x03BC0E24 MOV X1, X19
	0x03BC0E28 MOV X3, X31
	0x03BC0E2C MOV X21, X0
	0x03BC0E30 BL 0x2A719B8
	0x03BC0E34 LDR X0, [X24]
	0x03BC0E38 BL 0x1C16F10
	0x03BC0E3C LDR X2, [X22]
	0x03BC0E40 MOV X1, X19
	0x03BC0E44 MOV X3, X31
	0x03BC0E48 MOV X22, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x823000
	008 Move X23, 0x538000
	009 Move X21, 0x59E000
	010 Move X22, 0x59E000
	011 Move W8, [X20+3481]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1192]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x538000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59E000
	024 Move X0, [X0+1192]
	025 Call 0x1C17CF4
	026 Move X0, 0x59E000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3481], W8
	031 Move X0, [X23]
	032 Move X20, [X19+88]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	054 Return 

Method: System.Void SubscribeToggleManipulateRightAction()

Disassembly:
	0x03BC0FD4 MOV X21, X0
	0x03BC0FD8 BL 0x2A719B8
	0x03BC0FDC LDR X0, [X22]
	0x03BC0FE0 LDR W8, [X0 + 0xE0]
	0x03BC0FE4 CBNZ W8, 0x3BC0FEC
	0x03BC0FE8 BL 0x1C16DFC
	0x03BC0FEC MOV X0, X20
	0x03BC0FF0 MOV X1, X21
	0x03BC0FF4 LDP X20, X19, [X31 + 0x20]
	0x03BC0FF8 LDP X22, X21, [X31 + 0x10]
	0x03BC0FFC MOV X2, X31
	0x03BC1000 LDP X30, X23, [X31], #0x30
	0x03BC1004 B 0x3BC8368
	0x03BC1008 LDR X0, [X0 + 0xB0]
	0x03BC100C RET
	0x03BC1010 STR X30, [X31 - 0x20]!
	0x03BC1014 STP X20, X19, [X31 + 0x10]
	0x03BC1018 MOV X19, X1
	0x03BC101C MOV X20, X0
	0x03BC1020 BL 0x3BC1038
	0x03BC1024 STR X19, [X20 + 0xB0]
	0x03BC1028 MOV X0, X20
	0x03BC102C LDP X20, X19, [X31 + 0x10]
	0x03BC1030 LDR X30, [X31], #0x20
	0x03BC1034 B 0x3BC111C
	0x03BC1038 STR X30, [X31 - 0x40]!
	0x03BC103C STP X24, X23, [X31 + 0x10]
	0x03BC1040 STP X22, X21, [X31 + 0x20]
	0x03BC1044 STP X20, X19, [X31 + 0x30]
	0x03BC1048 ADRP X20, 0x821000
	0x03BC104C ADRP X24, 0x536000
	0x03BC1050 ADRP X21, 0x59C000
	0x03BC1054 ADRP X22, 0x59C000
	0x03BC1058 ADRP X23, 0x59C000
	0x03BC105C LDRB W8, [X20 + 0xDAF]
	0x03BC1060 LDR X24, [X24 + 0x3D8]
	0x03BC1064 LDR X21, [X21 + 0x520]
	0x03BC1068 LDR X22, [X22 + 0x528]
	0x03BC106C LDR X23, [X23 + 0x460]
	0x03BC1070 MOV X19, X0
	0x03BC1074 TBNZ X8, 0x0, 0x3BC10B0
	0x03BC1078 ADRP X0, 0x536000
	0x03BC107C LDR X0, [X0 + 0x3D8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x823000
	008 Move X23, 0x538000
	009 Move X21, 0x59E000
	010 Move X22, 0x59E000
	011 Move W8, [X20+3482]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1200]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x537000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59D000
	024 Move X0, [X0+1200]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3482], W8
	031 Move X0, [X23]
	032 Move X20, [X19+96]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	054 Return 

Method: System.Void UnsubscribeToggleManipulateRightAction()

Disassembly:
	0x03BC0F28 MOV X21, X0
	0x03BC0F2C BL 0x2A719B8
	0x03BC0F30 LDR X0, [X22]
	0x03BC0F34 LDR W8, [X0 + 0xE0]
	0x03BC0F38 CBNZ W8, 0x3BC0F40
	0x03BC0F3C BL 0x1C16DFC
	0x03BC0F40 MOV X0, X20
	0x03BC0F44 MOV X1, X21
	0x03BC0F48 LDP X20, X19, [X31 + 0x20]
	0x03BC0F4C LDP X22, X21, [X31 + 0x10]
	0x03BC0F50 MOV X2, X31
	0x03BC0F54 LDP X30, X23, [X31], #0x30
	0x03BC0F58 B 0x3BC8490
	0x03BC0F5C STP X30, X23, [X31 - 0x30]!
	0x03BC0F60 STP X22, X21, [X31 + 0x10]
	0x03BC0F64 STP X20, X19, [X31 + 0x20]
	0x03BC0F68 ADRP X20, 0x822000
	0x03BC0F6C ADRP X23, 0x537000
	0x03BC0F70 ADRP X21, 0x59D000
	0x03BC0F74 ADRP X22, 0x59D000
	0x03BC0F78 LDRB W8, [X20 + 0xDAC]
	0x03BC0F7C LDR X23, [X23 + 0x3D8]
	0x03BC0F80 LDR X21, [X21 + 0x518]
	0x03BC0F84 LDR X22, [X22 + 0x460]
	0x03BC0F88 MOV X19, X0
	0x03BC0F8C TBNZ X8, 0x0, 0x3BC0FBC
	0x03BC0F90 ADRP X0, 0x537000
	0x03BC0F94 LDR X0, [X0 + 0x3D8]
	0x03BC0F98 BL 0x1C16CF4
	0x03BC0F9C ADRP X0, 0x59D000
	0x03BC0FA0 LDR X0, [X0 + 0x518]
	0x03BC0FA4 BL 0x1C16CF4
	0x03BC0FA8 ADRP X0, 0x59D000
	0x03BC0FAC LDR X0, [X0 + 0x460]
	0x03BC0FB0 BL 0x1C16CF4
	0x03BC0FB4 MOVZ W8, 0x1
	0x03BC0FB8 STRB W8, [X20 + 0xDAC]
	0x03BC0FBC LDR X0, [X23]
	0x03BC0FC0 LDR X20, [X19 + 0xA8]
	0x03BC0FC4 BL 0x1C16F10
	0x03BC0FC8 LDR X2, [X21]
	0x03BC0FCC MOV X1, X19
	0x03BC0FD0 MOV X3, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x823000
	008 Move X23, 0x538000
	009 Move X21, 0x59E000
	010 Move X22, 0x59E000
	011 Move W8, [X20+3483]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1200]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x538000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59E000
	024 Move X0, [X0+1200]
	025 Call 0x1C17CF4
	026 Move X0, 0x59E000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3483], W8
	031 Move X0, [X23]
	032 Move X20, [X19+96]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	054 Return 

Method: System.Void SubscribeToggleManipulateBodyAction()

Disassembly:
	0x03BC115C ADRP X0, 0x536000
	0x03BC1160 LDR X0, [X0 + 0x3D8]
	0x03BC1164 BL 0x1C16CF4
	0x03BC1168 ADRP X0, 0x59C000
	0x03BC116C LDR X0, [X0 + 0x528]
	0x03BC1170 BL 0x1C16CF4
	0x03BC1174 ADRP X0, 0x59C000
	0x03BC1178 LDR X0, [X0 + 0x520]
	0x03BC117C BL 0x1C16CF4
	0x03BC1180 ADRP X0, 0x59C000
	0x03BC1184 LDR X0, [X0 + 0x460]
	0x03BC1188 BL 0x1C16CF4
	0x03BC118C MOVZ W8, 0x1
	0x03BC1190 STRB W8, [X20 + 0xDAE]
	0x03BC1194 LDR X0, [X24]
	0x03BC1198 LDR X20, [X19 + 0xB0]
	0x03BC119C BL 0x1C16F10
	0x03BC11A0 LDR X2, [X21]
	0x03BC11A4 MOV X1, X19
	0x03BC11A8 MOV X3, X31
	0x03BC11AC MOV X21, X0
	0x03BC11B0 BL 0x2A719B8
	0x03BC11B4 LDR X0, [X24]
	0x03BC11B8 BL 0x1C16F10
	0x03BC11BC LDR X2, [X22]
	0x03BC11C0 MOV X1, X19
	0x03BC11C4 MOV X3, X31
	0x03BC11C8 MOV X22, X0
	0x03BC11CC BL 0x2A719B8
	0x03BC11D0 LDR X0, [X23]
	0x03BC11D4 LDR W8, [X0 + 0xE0]
	0x03BC11D8 CBNZ W8, 0x3BC11E0
	0x03BC11DC BL 0x1C16DFC
	0x03BC11E0 MOV X0, X20
	0x03BC11E4 MOV X1, X21
	0x03BC11E8 MOV X2, X22
	0x03BC11EC LDP X20, X19, [X31 + 0x30]
	0x03BC11F0 LDP X22, X21, [X31 + 0x20]
	0x03BC11F4 LDP X24, X23, [X31 + 0x10]
	0x03BC11F8 LDR X30, [X31], #0x40
	0x03BC11FC B 0x3BC8368
	0x03BC1200 LDR X0, [X0 + 0xB8]
	0x03BC1204 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x822000
	008 Move X23, 0x537000
	009 Move X21, 0x59D000
	010 Move X22, 0x59D000
	011 Move W8, [X20+3484]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1208]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x537000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59D000
	024 Move X0, [X0+1208]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3484], W8
	031 Move X0, [X23]
	032 Move X20, [X19+104]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	054 Return 

Method: System.Void UnsubscribeToggleManipulateBodyAction()

Disassembly:
	0x03BC10B0 LDR X0, [X24]
	0x03BC10B4 LDR X20, [X19 + 0xB0]
	0x03BC10B8 BL 0x1C16F10
	0x03BC10BC LDR X2, [X21]
	0x03BC10C0 MOV X1, X19
	0x03BC10C4 MOV X3, X31
	0x03BC10C8 MOV X21, X0
	0x03BC10CC BL 0x2A719B8
	0x03BC10D0 LDR X0, [X24]
	0x03BC10D4 BL 0x1C16F10
	0x03BC10D8 LDR X2, [X22]
	0x03BC10DC MOV X1, X19
	0x03BC10E0 MOV X3, X31
	0x03BC10E4 MOV X22, X0
	0x03BC10E8 BL 0x2A719B8
	0x03BC10EC LDR X0, [X23]
	0x03BC10F0 LDR W8, [X0 + 0xE0]
	0x03BC10F4 CBNZ W8, 0x3BC10FC
	0x03BC10F8 BL 0x1C16DFC
	0x03BC10FC MOV X0, X20
	0x03BC1100 MOV X1, X21
	0x03BC1104 MOV X2, X22
	0x03BC1108 LDP X20, X19, [X31 + 0x30]
	0x03BC110C LDP X22, X21, [X31 + 0x20]
	0x03BC1110 LDP X24, X23, [X31 + 0x10]
	0x03BC1114 LDR X30, [X31], #0x40
	0x03BC1118 B 0x3BC8490
	0x03BC111C STR X30, [X31 - 0x40]!
	0x03BC1120 STP X24, X23, [X31 + 0x10]
	0x03BC1124 STP X22, X21, [X31 + 0x20]
	0x03BC1128 STP X20, X19, [X31 + 0x30]
	0x03BC112C ADRP X20, 0x821000
	0x03BC1130 ADRP X24, 0x536000
	0x03BC1134 ADRP X21, 0x59C000
	0x03BC1138 ADRP X22, 0x59C000
	0x03BC113C ADRP X23, 0x59C000
	0x03BC1140 LDRB W8, [X20 + 0xDAE]
	0x03BC1144 LDR X24, [X24 + 0x3D8]
	0x03BC1148 LDR X21, [X21 + 0x520]
	0x03BC114C LDR X22, [X22 + 0x528]
	0x03BC1150 LDR X23, [X23 + 0x460]
	0x03BC1154 MOV X19, X0
	0x03BC1158 TBNZ X8, 0x0, 0x3BC1194

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x822000
	008 Move X23, 0x537000
	009 Move X21, 0x59D000
	010 Move X22, 0x59D000
	011 Move W8, [X20+3485]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1208]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x537000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59D000
	024 Move X0, [X0+1208]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3485], W8
	031 Move X0, [X23]
	032 Move X20, [X19+104]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	054 Return 

Method: System.Void SubscribeManipulateHeadAction()

Disassembly:
	0x03BC131C STP X22, X21, [X31 + 0x20]
	0x03BC1320 STP X20, X19, [X31 + 0x30]
	0x03BC1324 ADRP X20, 0x821000
	0x03BC1328 ADRP X24, 0x536000
	0x03BC132C ADRP X21, 0x59C000
	0x03BC1330 ADRP X22, 0x59C000
	0x03BC1334 ADRP X23, 0x59C000
	0x03BC1338 LDRB W8, [X20 + 0xDB0]
	0x03BC133C LDR X24, [X24 + 0x3D8]
	0x03BC1340 LDR X21, [X21 + 0x530]
	0x03BC1344 LDR X22, [X22 + 0x538]
	0x03BC1348 LDR X23, [X23 + 0x460]
	0x03BC134C MOV X19, X0
	0x03BC1350 TBNZ X8, 0x0, 0x3BC138C
	0x03BC1354 ADRP X0, 0x536000
	0x03BC1358 LDR X0, [X0 + 0x3D8]
	0x03BC135C BL 0x1C16CF4
	0x03BC1360 ADRP X0, 0x59C000
	0x03BC1364 LDR X0, [X0 + 0x538]
	0x03BC1368 BL 0x1C16CF4
	0x03BC136C ADRP X0, 0x59C000
	0x03BC1370 LDR X0, [X0 + 0x530]
	0x03BC1374 BL 0x1C16CF4
	0x03BC1378 ADRP X0, 0x59C000
	0x03BC137C LDR X0, [X0 + 0x460]
	0x03BC1380 BL 0x1C16CF4
	0x03BC1384 MOVZ W8, 0x1
	0x03BC1388 STRB W8, [X20 + 0xDB0]
	0x03BC138C LDR X0, [X24]
	0x03BC1390 LDR X20, [X19 + 0xB8]
	0x03BC1394 BL 0x1C16F10
	0x03BC1398 LDR X2, [X21]
	0x03BC139C MOV X1, X19
	0x03BC13A0 MOV X3, X31
	0x03BC13A4 MOV X21, X0
	0x03BC13A8 BL 0x2A719B8
	0x03BC13AC LDR X0, [X24]
	0x03BC13B0 BL 0x1C16F10
	0x03BC13B4 LDR X2, [X22]
	0x03BC13B8 MOV X1, X19
	0x03BC13BC MOV X3, X31
	0x03BC13C0 MOV X22, X0
	0x03BC13C4 BL 0x2A719B8
	0x03BC13C8 LDR X0, [X23]
	0x03BC13CC LDR W8, [X0 + 0xE0]
	0x03BC13D0 CBNZ W8, 0x3BC13D8
	0x03BC13D4 BL 0x1C16DFC
	0x03BC13D8 MOV X0, X20
	0x03BC13DC MOV X1, X21
	0x03BC13E0 MOV X2, X22
	0x03BC13E4 LDP X20, X19, [X31 + 0x30]
	0x03BC13E8 LDP X22, X21, [X31 + 0x20]
	0x03BC13EC LDP X24, X23, [X31 + 0x10]
	0x03BC13F0 LDR X30, [X31], #0x40
	0x03BC13F4 B 0x3BC8368
	0x03BC13F8 LDR X0, [X0 + 0xC0]
	0x03BC13FC RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x822000
	009 Move X24, 0x537000
	010 Move X21, 0x59D000
	011 Move X22, 0x59D000
	012 Move X23, 0x59D000
	013 Move W8, [X20+3486]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1216]
	016 Move X22, [X22+1224]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x537000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1224]
	028 Call 0x1C17CF4
	029 Move X0, 0x59D000
	030 Move X0, [X0+1216]
	031 Call 0x1C17CF4
	032 Move X0, 0x59D000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3486], W8
	037 Move X0, [X24]
	038 Move X20, [X19+112]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeManipulateHeadAction()

Disassembly:
	0x03BC1238 STP X22, X21, [X31 + 0x20]
	0x03BC123C STP X20, X19, [X31 + 0x30]
	0x03BC1240 ADRP X20, 0x821000
	0x03BC1244 ADRP X24, 0x536000
	0x03BC1248 ADRP X21, 0x59C000
	0x03BC124C ADRP X22, 0x59C000
	0x03BC1250 ADRP X23, 0x59C000
	0x03BC1254 LDRB W8, [X20 + 0xDB1]
	0x03BC1258 LDR X24, [X24 + 0x3D8]
	0x03BC125C LDR X21, [X21 + 0x530]
	0x03BC1260 LDR X22, [X22 + 0x538]
	0x03BC1264 LDR X23, [X23 + 0x460]
	0x03BC1268 MOV X19, X0
	0x03BC126C TBNZ X8, 0x0, 0x3BC12A8
	0x03BC1270 ADRP X0, 0x536000
	0x03BC1274 LDR X0, [X0 + 0x3D8]
	0x03BC1278 BL 0x1C16CF4
	0x03BC127C ADRP X0, 0x59C000
	0x03BC1280 LDR X0, [X0 + 0x538]
	0x03BC1284 BL 0x1C16CF4
	0x03BC1288 ADRP X0, 0x59C000
	0x03BC128C LDR X0, [X0 + 0x530]
	0x03BC1290 BL 0x1C16CF4
	0x03BC1294 ADRP X0, 0x59C000
	0x03BC1298 LDR X0, [X0 + 0x460]
	0x03BC129C BL 0x1C16CF4
	0x03BC12A0 MOVZ W8, 0x1
	0x03BC12A4 STRB W8, [X20 + 0xDB1]
	0x03BC12A8 LDR X0, [X24]
	0x03BC12AC LDR X20, [X19 + 0xB8]
	0x03BC12B0 BL 0x1C16F10
	0x03BC12B4 LDR X2, [X21]
	0x03BC12B8 MOV X1, X19
	0x03BC12BC MOV X3, X31
	0x03BC12C0 MOV X21, X0
	0x03BC12C4 BL 0x2A719B8
	0x03BC12C8 LDR X0, [X24]
	0x03BC12CC BL 0x1C16F10
	0x03BC12D0 LDR X2, [X22]
	0x03BC12D4 MOV X1, X19
	0x03BC12D8 MOV X3, X31
	0x03BC12DC MOV X22, X0
	0x03BC12E0 BL 0x2A719B8
	0x03BC12E4 LDR X0, [X23]
	0x03BC12E8 LDR W8, [X0 + 0xE0]
	0x03BC12EC CBNZ W8, 0x3BC12F4
	0x03BC12F0 BL 0x1C16DFC
	0x03BC12F4 MOV X0, X20
	0x03BC12F8 MOV X1, X21
	0x03BC12FC MOV X2, X22
	0x03BC1300 LDP X20, X19, [X31 + 0x30]
	0x03BC1304 LDP X22, X21, [X31 + 0x20]
	0x03BC1308 LDP X24, X23, [X31 + 0x10]
	0x03BC130C LDR X30, [X31], #0x40
	0x03BC1310 B 0x3BC8490
	0x03BC1314 STR X30, [X31 - 0x40]!
	0x03BC1318 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x822000
	009 Move X24, 0x537000
	010 Move X21, 0x59D000
	011 Move X22, 0x59D000
	012 Move X23, 0x59D000
	013 Move W8, [X20+3487]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1216]
	016 Move X22, [X22+1224]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x537000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1224]
	028 Call 0x1C17CF4
	029 Move X0, 0x59D000
	030 Move X0, [X0+1216]
	031 Call 0x1C17CF4
	032 Move X0, 0x59D000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3487], W8
	037 Move X0, [X24]
	038 Move X20, [X19+112]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeHandControllerModeAction()

Disassembly:
	0x03BC14DC LDR X0, [X23]
	0x03BC14E0 LDR W8, [X0 + 0xE0]
	0x03BC14E4 CBNZ W8, 0x3BC14EC
	0x03BC14E8 BL 0x1C16DFC
	0x03BC14EC MOV X0, X20
	0x03BC14F0 MOV X1, X21
	0x03BC14F4 MOV X2, X22
	0x03BC14F8 LDP X20, X19, [X31 + 0x30]
	0x03BC14FC LDP X22, X21, [X31 + 0x20]
	0x03BC1500 LDP X24, X23, [X31 + 0x10]
	0x03BC1504 LDR X30, [X31], #0x40
	0x03BC1508 B 0x3BC8490
	0x03BC150C STR X30, [X31 - 0x40]!
	0x03BC1510 STP X24, X23, [X31 + 0x10]
	0x03BC1514 STP X22, X21, [X31 + 0x20]
	0x03BC1518 STP X20, X19, [X31 + 0x30]
	0x03BC151C ADRP X20, 0x821000
	0x03BC1520 ADRP X24, 0x536000
	0x03BC1524 ADRP X21, 0x59C000
	0x03BC1528 ADRP X22, 0x59C000
	0x03BC152C ADRP X23, 0x59C000
	0x03BC1530 LDRB W8, [X20 + 0xDB2]
	0x03BC1534 LDR X24, [X24 + 0x3D8]
	0x03BC1538 LDR X21, [X21 + 0x540]
	0x03BC153C LDR X22, [X22 + 0x548]
	0x03BC1540 LDR X23, [X23 + 0x460]
	0x03BC1544 MOV X19, X0
	0x03BC1548 TBNZ X8, 0x0, 0x3BC1584
	0x03BC154C ADRP X0, 0x536000
	0x03BC1550 LDR X0, [X0 + 0x3D8]
	0x03BC1554 BL 0x1C16CF4
	0x03BC1558 ADRP X0, 0x59C000
	0x03BC155C LDR X0, [X0 + 0x548]
	0x03BC1560 BL 0x1C16CF4
	0x03BC1564 ADRP X0, 0x59C000
	0x03BC1568 LDR X0, [X0 + 0x540]
	0x03BC156C BL 0x1C16CF4
	0x03BC1570 ADRP X0, 0x59C000
	0x03BC1574 LDR X0, [X0 + 0x460]
	0x03BC1578 BL 0x1C16CF4
	0x03BC157C MOVZ W8, 0x1
	0x03BC1580 STRB W8, [X20 + 0xDB2]
	0x03BC1584 LDR X0, [X24]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x822000
	008 Move X23, 0x537000
	009 Move X21, 0x59D000
	010 Move X22, 0x59D000
	011 Move W8, [X20+3488]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1232]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x537000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59D000
	024 Move X0, [X0+1232]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3488], W8
	031 Move X0, [X23]
	032 Move X20, [X19+120]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	054 Return 

Method: System.Void UnsubscribeHandControllerModeAction()

Disassembly:
	0x03BC1430 STP X22, X21, [X31 + 0x20]
	0x03BC1434 STP X20, X19, [X31 + 0x30]
	0x03BC1438 ADRP X20, 0x821000
	0x03BC143C ADRP X24, 0x536000
	0x03BC1440 ADRP X21, 0x59C000
	0x03BC1444 ADRP X22, 0x59C000
	0x03BC1448 ADRP X23, 0x59C000
	0x03BC144C LDRB W8, [X20 + 0xDB3]
	0x03BC1450 LDR X24, [X24 + 0x3D8]
	0x03BC1454 LDR X21, [X21 + 0x540]
	0x03BC1458 LDR X22, [X22 + 0x548]
	0x03BC145C LDR X23, [X23 + 0x460]
	0x03BC1460 MOV X19, X0
	0x03BC1464 TBNZ X8, 0x0, 0x3BC14A0
	0x03BC1468 ADRP X0, 0x536000
	0x03BC146C LDR X0, [X0 + 0x3D8]
	0x03BC1470 BL 0x1C16CF4
	0x03BC1474 ADRP X0, 0x59C000
	0x03BC1478 LDR X0, [X0 + 0x548]
	0x03BC147C BL 0x1C16CF4
	0x03BC1480 ADRP X0, 0x59C000
	0x03BC1484 LDR X0, [X0 + 0x540]
	0x03BC1488 BL 0x1C16CF4
	0x03BC148C ADRP X0, 0x59C000
	0x03BC1490 LDR X0, [X0 + 0x460]
	0x03BC1494 BL 0x1C16CF4
	0x03BC1498 MOVZ W8, 0x1
	0x03BC149C STRB W8, [X20 + 0xDB3]
	0x03BC14A0 LDR X0, [X24]
	0x03BC14A4 LDR X20, [X19 + 0xC0]
	0x03BC14A8 BL 0x1C16F10
	0x03BC14AC LDR X2, [X21]
	0x03BC14B0 MOV X1, X19
	0x03BC14B4 MOV X3, X31
	0x03BC14B8 MOV X21, X0
	0x03BC14BC BL 0x2A719B8
	0x03BC14C0 LDR X0, [X24]
	0x03BC14C4 BL 0x1C16F10
	0x03BC14C8 LDR X2, [X22]
	0x03BC14CC MOV X1, X19
	0x03BC14D0 MOV X3, X31
	0x03BC14D4 MOV X22, X0
	0x03BC14D8 BL 0x2A719B8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x822000
	008 Move X23, 0x537000
	009 Move X21, 0x59D000
	010 Move X22, 0x59D000
	011 Move W8, [X20+3489]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1232]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x537000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59D000
	024 Move X0, [X0+1232]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3489], W8
	031 Move X0, [X23]
	032 Move X20, [X19+120]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	054 Return 

Method: System.Void SubscribeCycleDevicesAction()

Disassembly:
	0x03BC1664 LDR X0, [X0 + 0x3D8]
	0x03BC1668 BL 0x1C16CF4
	0x03BC166C ADRP X0, 0x59C000
	0x03BC1670 LDR X0, [X0 + 0x558]
	0x03BC1674 BL 0x1C16CF4
	0x03BC1678 ADRP X0, 0x59C000
	0x03BC167C LDR X0, [X0 + 0x550]
	0x03BC1680 BL 0x1C16CF4
	0x03BC1684 ADRP X0, 0x59C000
	0x03BC1688 LDR X0, [X0 + 0x460]
	0x03BC168C BL 0x1C16CF4
	0x03BC1690 MOVZ W8, 0x1
	0x03BC1694 STRB W8, [X20 + 0xDB5]
	0x03BC1698 LDR X0, [X24]
	0x03BC169C LDR X20, [X19 + 0xC8]
	0x03BC16A0 BL 0x1C16F10
	0x03BC16A4 LDR X2, [X21]
	0x03BC16A8 MOV X1, X19
	0x03BC16AC MOV X3, X31
	0x03BC16B0 MOV X21, X0
	0x03BC16B4 BL 0x2A719B8
	0x03BC16B8 LDR X0, [X24]
	0x03BC16BC BL 0x1C16F10
	0x03BC16C0 LDR X2, [X22]
	0x03BC16C4 MOV X1, X19
	0x03BC16C8 MOV X3, X31
	0x03BC16CC MOV X22, X0
	0x03BC16D0 BL 0x2A719B8
	0x03BC16D4 LDR X0, [X23]
	0x03BC16D8 LDR W8, [X0 + 0xE0]
	0x03BC16DC CBNZ W8, 0x3BC16E4
	0x03BC16E0 BL 0x1C16DFC
	0x03BC16E4 MOV X0, X20
	0x03BC16E8 MOV X1, X21
	0x03BC16EC MOV X2, X22
	0x03BC16F0 LDP X20, X19, [X31 + 0x30]
	0x03BC16F4 LDP X22, X21, [X31 + 0x20]
	0x03BC16F8 LDP X24, X23, [X31 + 0x10]
	0x03BC16FC LDR X30, [X31], #0x40
	0x03BC1700 B 0x3BC8490
	0x03BC1704 STR X30, [X31 - 0x40]!
	0x03BC1708 STP X24, X23, [X31 + 0x10]
	0x03BC170C STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x822000
	008 Move X23, 0x537000
	009 Move X21, 0x59D000
	010 Move X22, 0x59D000
	011 Move W8, [X20+3490]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1240]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x537000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59D000
	024 Move X0, [X0+1240]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3490], W8
	031 Move X0, [X23]
	032 Move X20, [X19+128]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	054 Return 

Method: System.Void UnsubscribeCycleDevicesAction()

Disassembly:
	0x03BC15B8 MOV X22, X0
	0x03BC15BC BL 0x2A719B8
	0x03BC15C0 LDR X0, [X23]
	0x03BC15C4 LDR W8, [X0 + 0xE0]
	0x03BC15C8 CBNZ W8, 0x3BC15D0
	0x03BC15CC BL 0x1C16DFC
	0x03BC15D0 MOV X0, X20
	0x03BC15D4 MOV X1, X21
	0x03BC15D8 MOV X2, X22
	0x03BC15DC LDP X20, X19, [X31 + 0x30]
	0x03BC15E0 LDP X22, X21, [X31 + 0x20]
	0x03BC15E4 LDP X24, X23, [X31 + 0x10]
	0x03BC15E8 LDR X30, [X31], #0x40
	0x03BC15EC B 0x3BC8368
	0x03BC15F0 LDR X0, [X0 + 0xC8]
	0x03BC15F4 RET
	0x03BC15F8 STR X30, [X31 - 0x20]!
	0x03BC15FC STP X20, X19, [X31 + 0x10]
	0x03BC1600 MOV X19, X1
	0x03BC1604 MOV X20, X0
	0x03BC1608 BL 0x3BC1620
	0x03BC160C STR X19, [X20 + 0xC8]
	0x03BC1610 MOV X0, X20
	0x03BC1614 LDP X20, X19, [X31 + 0x10]
	0x03BC1618 LDR X30, [X31], #0x20
	0x03BC161C B 0x3BC1704
	0x03BC1620 STR X30, [X31 - 0x40]!
	0x03BC1624 STP X24, X23, [X31 + 0x10]
	0x03BC1628 STP X22, X21, [X31 + 0x20]
	0x03BC162C STP X20, X19, [X31 + 0x30]
	0x03BC1630 ADRP X20, 0x821000
	0x03BC1634 ADRP X24, 0x536000
	0x03BC1638 ADRP X21, 0x59C000
	0x03BC163C ADRP X22, 0x59C000
	0x03BC1640 ADRP X23, 0x59C000
	0x03BC1644 LDRB W8, [X20 + 0xDB5]
	0x03BC1648 LDR X24, [X24 + 0x3D8]
	0x03BC164C LDR X21, [X21 + 0x550]
	0x03BC1650 LDR X22, [X22 + 0x558]
	0x03BC1654 LDR X23, [X23 + 0x460]
	0x03BC1658 MOV X19, X0
	0x03BC165C TBNZ X8, 0x0, 0x3BC1698
	0x03BC1660 ADRP X0, 0x536000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x822000
	008 Move X23, 0x537000
	009 Move X21, 0x59D000
	010 Move X22, 0x59D000
	011 Move W8, [X20+3491]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1240]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x537000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59D000
	024 Move X0, [X0+1240]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3491], W8
	031 Move X0, [X23]
	032 Move X20, [X19+128]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	054 Return 

Method: System.Void SubscribeStopManipulationAction()

Disassembly:
	0x03BC17EC RET
	0x03BC17F0 STR X30, [X31 - 0x20]!
	0x03BC17F4 STP X20, X19, [X31 + 0x10]
	0x03BC17F8 MOV X19, X1
	0x03BC17FC MOV X20, X0
	0x03BC1800 BL 0x3BC1818
	0x03BC1804 STR X19, [X20 + 0xD0]
	0x03BC1808 MOV X0, X20
	0x03BC180C LDP X20, X19, [X31 + 0x10]
	0x03BC1810 LDR X30, [X31], #0x20
	0x03BC1814 B 0x3BC18FC
	0x03BC1818 STR X30, [X31 - 0x40]!
	0x03BC181C STP X24, X23, [X31 + 0x10]
	0x03BC1820 STP X22, X21, [X31 + 0x20]
	0x03BC1824 STP X20, X19, [X31 + 0x30]
	0x03BC1828 ADRP X20, 0x821000
	0x03BC182C ADRP X24, 0x536000
	0x03BC1830 ADRP X21, 0x59C000
	0x03BC1834 ADRP X22, 0x59C000
	0x03BC1838 ADRP X23, 0x59C000
	0x03BC183C LDRB W8, [X20 + 0xDB7]
	0x03BC1840 LDR X24, [X24 + 0x3D8]
	0x03BC1844 LDR X21, [X21 + 0x560]
	0x03BC1848 LDR X22, [X22 + 0x568]
	0x03BC184C LDR X23, [X23 + 0x460]
	0x03BC1850 MOV X19, X0
	0x03BC1854 TBNZ X8, 0x0, 0x3BC1890
	0x03BC1858 ADRP X0, 0x536000
	0x03BC185C LDR X0, [X0 + 0x3D8]
	0x03BC1860 BL 0x1C16CF4
	0x03BC1864 ADRP X0, 0x59C000
	0x03BC1868 LDR X0, [X0 + 0x568]
	0x03BC186C BL 0x1C16CF4
	0x03BC1870 ADRP X0, 0x59C000
	0x03BC1874 LDR X0, [X0 + 0x560]
	0x03BC1878 BL 0x1C16CF4
	0x03BC187C ADRP X0, 0x59C000
	0x03BC1880 LDR X0, [X0 + 0x460]
	0x03BC1884 BL 0x1C16CF4
	0x03BC1888 MOVZ W8, 0x1
	0x03BC188C STRB W8, [X20 + 0xDB7]
	0x03BC1890 LDR X0, [X24]
	0x03BC1894 LDR X20, [X19 + 0xD0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x822000
	008 Move X23, 0x537000
	009 Move X21, 0x59D000
	010 Move X22, 0x59D000
	011 Move W8, [X20+3492]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1248]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x537000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59D000
	024 Move X0, [X0+1248]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3492], W8
	031 Move X0, [X23]
	032 Move X20, [X19+136]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	054 Return 

Method: System.Void UnsubscribeStopManipulationAction()

Disassembly:
	0x03BC1740 TBNZ X8, 0x0, 0x3BC177C
	0x03BC1744 ADRP X0, 0x536000
	0x03BC1748 LDR X0, [X0 + 0x3D8]
	0x03BC174C BL 0x1C16CF4
	0x03BC1750 ADRP X0, 0x59C000
	0x03BC1754 LDR X0, [X0 + 0x558]
	0x03BC1758 BL 0x1C16CF4
	0x03BC175C ADRP X0, 0x59C000
	0x03BC1760 LDR X0, [X0 + 0x550]
	0x03BC1764 BL 0x1C16CF4
	0x03BC1768 ADRP X0, 0x59C000
	0x03BC176C LDR X0, [X0 + 0x460]
	0x03BC1770 BL 0x1C16CF4
	0x03BC1774 MOVZ W8, 0x1
	0x03BC1778 STRB W8, [X20 + 0xDB4]
	0x03BC177C LDR X0, [X24]
	0x03BC1780 LDR X20, [X19 + 0xC8]
	0x03BC1784 BL 0x1C16F10
	0x03BC1788 LDR X2, [X21]
	0x03BC178C MOV X1, X19
	0x03BC1790 MOV X3, X31
	0x03BC1794 MOV X21, X0
	0x03BC1798 BL 0x2A719B8
	0x03BC179C LDR X0, [X24]
	0x03BC17A0 BL 0x1C16F10
	0x03BC17A4 LDR X2, [X22]
	0x03BC17A8 MOV X1, X19
	0x03BC17AC MOV X3, X31
	0x03BC17B0 MOV X22, X0
	0x03BC17B4 BL 0x2A719B8
	0x03BC17B8 LDR X0, [X23]
	0x03BC17BC LDR W8, [X0 + 0xE0]
	0x03BC17C0 CBNZ W8, 0x3BC17C8
	0x03BC17C4 BL 0x1C16DFC
	0x03BC17C8 MOV X0, X20
	0x03BC17CC MOV X1, X21
	0x03BC17D0 MOV X2, X22
	0x03BC17D4 LDP X20, X19, [X31 + 0x30]
	0x03BC17D8 LDP X22, X21, [X31 + 0x20]
	0x03BC17DC LDP X24, X23, [X31 + 0x10]
	0x03BC17E0 LDR X30, [X31], #0x40
	0x03BC17E4 B 0x3BC8368
	0x03BC17E8 LDR X0, [X0 + 0xD0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x822000
	008 Move X23, 0x537000
	009 Move X21, 0x59D000
	010 Move X22, 0x59D000
	011 Move W8, [X20+3493]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1248]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x537000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59D000
	024 Move X0, [X0+1248]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3493], W8
	031 Move X0, [X23]
	032 Move X20, [X19+136]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	054 Return 

Method: System.Void SubscribeMouseDeltaAction()

Disassembly:
	0x03BC19AC BL 0x2A719B8
	0x03BC19B0 LDR X0, [X23]
	0x03BC19B4 LDR W8, [X0 + 0xE0]
	0x03BC19B8 CBNZ W8, 0x3BC19C0
	0x03BC19BC BL 0x1C16DFC
	0x03BC19C0 MOV X0, X20
	0x03BC19C4 MOV X1, X21
	0x03BC19C8 MOV X2, X22
	0x03BC19CC LDP X20, X19, [X31 + 0x30]
	0x03BC19D0 LDP X22, X21, [X31 + 0x20]
	0x03BC19D4 LDP X24, X23, [X31 + 0x10]
	0x03BC19D8 LDR X30, [X31], #0x40
	0x03BC19DC B 0x3BC8368
	0x03BC19E0 LDR X0, [X0 + 0xD8]
	0x03BC19E4 RET
	0x03BC19E8 STR X30, [X31 - 0x20]!
	0x03BC19EC STP X20, X19, [X31 + 0x10]
	0x03BC19F0 MOV X19, X1
	0x03BC19F4 MOV X20, X0
	0x03BC19F8 BL 0x3BC1A10
	0x03BC19FC STR X19, [X20 + 0xD8]
	0x03BC1A00 MOV X0, X20
	0x03BC1A04 LDP X20, X19, [X31 + 0x10]
	0x03BC1A08 LDR X30, [X31], #0x20
	0x03BC1A0C B 0x3BC1ABC
	0x03BC1A10 STP X30, X23, [X31 - 0x30]!
	0x03BC1A14 STP X22, X21, [X31 + 0x10]
	0x03BC1A18 STP X20, X19, [X31 + 0x20]
	0x03BC1A1C ADRP X20, 0x821000
	0x03BC1A20 ADRP X23, 0x536000
	0x03BC1A24 ADRP X21, 0x59C000
	0x03BC1A28 ADRP X22, 0x59C000
	0x03BC1A2C LDRB W8, [X20 + 0xDB9]
	0x03BC1A30 LDR X23, [X23 + 0x3D8]
	0x03BC1A34 LDR X21, [X21 + 0x570]
	0x03BC1A38 LDR X22, [X22 + 0x460]
	0x03BC1A3C MOV X19, X0
	0x03BC1A40 TBNZ X8, 0x0, 0x3BC1A70
	0x03BC1A44 ADRP X0, 0x536000
	0x03BC1A48 LDR X0, [X0 + 0x3D8]
	0x03BC1A4C BL 0x1C16CF4
	0x03BC1A50 ADRP X0, 0x59C000
	0x03BC1A54 LDR X0, [X0 + 0x570]
	0x03BC1A58 BL 0x1C16CF4
	0x03BC1A5C ADRP X0, 0x59C000
	0x03BC1A60 LDR X0, [X0 + 0x460]
	0x03BC1A64 BL 0x1C16CF4
	0x03BC1A68 MOVZ W8, 0x1
	0x03BC1A6C STRB W8, [X20 + 0xDB9]
	0x03BC1A70 LDR X0, [X23]
	0x03BC1A74 LDR X20, [X19 + 0xD8]
	0x03BC1A78 BL 0x1C16F10
	0x03BC1A7C LDR X2, [X21]
	0x03BC1A80 MOV X1, X19
	0x03BC1A84 MOV X3, X31
	0x03BC1A88 MOV X21, X0
	0x03BC1A8C BL 0x2A719B8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x822000
	009 Move X24, 0x537000
	010 Move X21, 0x59D000
	011 Move X22, 0x59D000
	012 Move X23, 0x59D000
	013 Move W8, [X20+3494]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1256]
	016 Move X22, [X22+1264]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x537000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1264]
	028 Call 0x1C17CF4
	029 Move X0, 0x59D000
	030 Move X0, [X0+1256]
	031 Call 0x1C17CF4
	032 Move X0, 0x59D000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3494], W8
	037 Move X0, [X24]
	038 Move X20, [X19+144]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeMouseDeltaAction()

Disassembly:
	0x03BC18C8 BL 0x2A719B8
	0x03BC18CC LDR X0, [X23]
	0x03BC18D0 LDR W8, [X0 + 0xE0]
	0x03BC18D4 CBNZ W8, 0x3BC18DC
	0x03BC18D8 BL 0x1C16DFC
	0x03BC18DC MOV X0, X20
	0x03BC18E0 MOV X1, X21
	0x03BC18E4 MOV X2, X22
	0x03BC18E8 LDP X20, X19, [X31 + 0x30]
	0x03BC18EC LDP X22, X21, [X31 + 0x20]
	0x03BC18F0 LDP X24, X23, [X31 + 0x10]
	0x03BC18F4 LDR X30, [X31], #0x40
	0x03BC18F8 B 0x3BC8490
	0x03BC18FC STR X30, [X31 - 0x40]!
	0x03BC1900 STP X24, X23, [X31 + 0x10]
	0x03BC1904 STP X22, X21, [X31 + 0x20]
	0x03BC1908 STP X20, X19, [X31 + 0x30]
	0x03BC190C ADRP X20, 0x821000
	0x03BC1910 ADRP X24, 0x536000
	0x03BC1914 ADRP X21, 0x59C000
	0x03BC1918 ADRP X22, 0x59C000
	0x03BC191C ADRP X23, 0x59C000
	0x03BC1920 LDRB W8, [X20 + 0xDB6]
	0x03BC1924 LDR X24, [X24 + 0x3D8]
	0x03BC1928 LDR X21, [X21 + 0x560]
	0x03BC192C LDR X22, [X22 + 0x568]
	0x03BC1930 LDR X23, [X23 + 0x460]
	0x03BC1934 MOV X19, X0
	0x03BC1938 TBNZ X8, 0x0, 0x3BC1974
	0x03BC193C ADRP X0, 0x536000
	0x03BC1940 LDR X0, [X0 + 0x3D8]
	0x03BC1944 BL 0x1C16CF4
	0x03BC1948 ADRP X0, 0x59C000
	0x03BC194C LDR X0, [X0 + 0x568]
	0x03BC1950 BL 0x1C16CF4
	0x03BC1954 ADRP X0, 0x59C000
	0x03BC1958 LDR X0, [X0 + 0x560]
	0x03BC195C BL 0x1C16CF4
	0x03BC1960 ADRP X0, 0x59C000
	0x03BC1964 LDR X0, [X0 + 0x460]
	0x03BC1968 BL 0x1C16CF4
	0x03BC196C MOVZ W8, 0x1
	0x03BC1970 STRB W8, [X20 + 0xDB6]
	0x03BC1974 LDR X0, [X24]
	0x03BC1978 LDR X20, [X19 + 0xD0]
	0x03BC197C BL 0x1C16F10
	0x03BC1980 LDR X2, [X21]
	0x03BC1984 MOV X1, X19
	0x03BC1988 MOV X3, X31
	0x03BC198C MOV X21, X0
	0x03BC1990 BL 0x2A719B8
	0x03BC1994 LDR X0, [X24]
	0x03BC1998 BL 0x1C16F10
	0x03BC199C LDR X2, [X22]
	0x03BC19A0 MOV X1, X19
	0x03BC19A4 MOV X3, X31
	0x03BC19A8 MOV X22, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x822000
	009 Move X24, 0x537000
	010 Move X21, 0x59D000
	011 Move X22, 0x59D000
	012 Move X23, 0x59D000
	013 Move W8, [X20+3495]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1256]
	016 Move X22, [X22+1264]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x537000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1264]
	028 Call 0x1C17CF4
	029 Move X0, 0x59D000
	030 Move X0, [X0+1256]
	031 Call 0x1C17CF4
	032 Move X0, 0x59D000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3495], W8
	037 Move X0, [X24]
	038 Move X20, [X19+144]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeMouseScrollAction()

Disassembly:
	0x03BC1BA4 ADRP X20, 0x821000
	0x03BC1BA8 ADRP X23, 0x536000
	0x03BC1BAC ADRP X21, 0x59C000
	0x03BC1BB0 ADRP X22, 0x59C000
	0x03BC1BB4 LDRB W8, [X20 + 0xDBB]
	0x03BC1BB8 LDR X23, [X23 + 0x3D8]
	0x03BC1BBC LDR X21, [X21 + 0x578]
	0x03BC1BC0 LDR X22, [X22 + 0x460]
	0x03BC1BC4 MOV X19, X0
	0x03BC1BC8 TBNZ X8, 0x0, 0x3BC1BF8
	0x03BC1BCC ADRP X0, 0x536000
	0x03BC1BD0 LDR X0, [X0 + 0x3D8]
	0x03BC1BD4 BL 0x1C16CF4
	0x03BC1BD8 ADRP X0, 0x59C000
	0x03BC1BDC LDR X0, [X0 + 0x578]
	0x03BC1BE0 BL 0x1C16CF4
	0x03BC1BE4 ADRP X0, 0x59C000
	0x03BC1BE8 LDR X0, [X0 + 0x460]
	0x03BC1BEC BL 0x1C16CF4
	0x03BC1BF0 MOVZ W8, 0x1
	0x03BC1BF4 STRB W8, [X20 + 0xDBB]
	0x03BC1BF8 LDR X0, [X23]
	0x03BC1BFC LDR X20, [X19 + 0xE0]
	0x03BC1C00 BL 0x1C16F10
	0x03BC1C04 LDR X2, [X21]
	0x03BC1C08 MOV X1, X19
	0x03BC1C0C MOV X3, X31
	0x03BC1C10 MOV X21, X0
	0x03BC1C14 BL 0x2A719B8
	0x03BC1C18 LDR X0, [X22]
	0x03BC1C1C LDR W8, [X0 + 0xE0]
	0x03BC1C20 CBNZ W8, 0x3BC1C28
	0x03BC1C24 BL 0x1C16DFC
	0x03BC1C28 MOV X0, X20
	0x03BC1C2C MOV X1, X21
	0x03BC1C30 LDP X20, X19, [X31 + 0x20]
	0x03BC1C34 LDP X22, X21, [X31 + 0x10]
	0x03BC1C38 MOV X2, X31
	0x03BC1C3C LDP X30, X23, [X31], #0x30
	0x03BC1C40 B 0x3BC8490
	0x03BC1C44 STP X30, X23, [X31 - 0x30]!
	0x03BC1C48 STP X22, X21, [X31 + 0x10]
	0x03BC1C4C STP X20, X19, [X31 + 0x20]
	0x03BC1C50 ADRP X20, 0x821000
	0x03BC1C54 ADRP X23, 0x536000
	0x03BC1C58 ADRP X21, 0x59C000
	0x03BC1C5C ADRP X22, 0x59C000
	0x03BC1C60 LDRB W8, [X20 + 0xDBA]
	0x03BC1C64 LDR X23, [X23 + 0x3D8]
	0x03BC1C68 LDR X21, [X21 + 0x578]
	0x03BC1C6C LDR X22, [X22 + 0x460]
	0x03BC1C70 MOV X19, X0
	0x03BC1C74 TBNZ X8, 0x0, 0x3BC1CA4
	0x03BC1C78 ADRP X0, 0x536000
	0x03BC1C7C LDR X0, [X0 + 0x3D8]
	0x03BC1C80 BL 0x1C16CF4
	0x03BC1C84 ADRP X0, 0x59C000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x822000
	009 Move X24, 0x537000
	010 Move X21, 0x59D000
	011 Move X22, 0x59D000
	012 Move X23, 0x59D000
	013 Move W8, [X20+3496]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1272]
	016 Move X22, [X22+1280]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x537000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1280]
	028 Call 0x1C17CF4
	029 Move X0, 0x59D000
	030 Move X0, [X0+1272]
	031 Call 0x1C17CF4
	032 Move X0, 0x59D000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3496], W8
	037 Move X0, [X24]
	038 Move X20, [X19+152]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeMouseScrollAction()

Disassembly:
	0x03BC1AC0 STP X22, X21, [X31 + 0x10]
	0x03BC1AC4 STP X20, X19, [X31 + 0x20]
	0x03BC1AC8 ADRP X20, 0x821000
	0x03BC1ACC ADRP X23, 0x536000
	0x03BC1AD0 ADRP X21, 0x59C000
	0x03BC1AD4 ADRP X22, 0x59C000
	0x03BC1AD8 LDRB W8, [X20 + 0xDB8]
	0x03BC1ADC LDR X23, [X23 + 0x3D8]
	0x03BC1AE0 LDR X21, [X21 + 0x570]
	0x03BC1AE4 LDR X22, [X22 + 0x460]
	0x03BC1AE8 MOV X19, X0
	0x03BC1AEC TBNZ X8, 0x0, 0x3BC1B1C
	0x03BC1AF0 ADRP X0, 0x536000
	0x03BC1AF4 LDR X0, [X0 + 0x3D8]
	0x03BC1AF8 BL 0x1C16CF4
	0x03BC1AFC ADRP X0, 0x59C000
	0x03BC1B00 LDR X0, [X0 + 0x570]
	0x03BC1B04 BL 0x1C16CF4
	0x03BC1B08 ADRP X0, 0x59C000
	0x03BC1B0C LDR X0, [X0 + 0x460]
	0x03BC1B10 BL 0x1C16CF4
	0x03BC1B14 MOVZ W8, 0x1
	0x03BC1B18 STRB W8, [X20 + 0xDB8]
	0x03BC1B1C LDR X0, [X23]
	0x03BC1B20 LDR X20, [X19 + 0xD8]
	0x03BC1B24 BL 0x1C16F10
	0x03BC1B28 LDR X2, [X21]
	0x03BC1B2C MOV X1, X19
	0x03BC1B30 MOV X3, X31
	0x03BC1B34 MOV X21, X0
	0x03BC1B38 BL 0x2A719B8
	0x03BC1B3C LDR X0, [X22]
	0x03BC1B40 LDR W8, [X0 + 0xE0]
	0x03BC1B44 CBNZ W8, 0x3BC1B4C
	0x03BC1B48 BL 0x1C16DFC
	0x03BC1B4C MOV X0, X20
	0x03BC1B50 MOV X1, X21
	0x03BC1B54 LDP X20, X19, [X31 + 0x20]
	0x03BC1B58 LDP X22, X21, [X31 + 0x10]
	0x03BC1B5C MOV X2, X31
	0x03BC1B60 LDP X30, X23, [X31], #0x30
	0x03BC1B64 B 0x3BC8368
	0x03BC1B68 LDR X0, [X0 + 0xE0]
	0x03BC1B6C RET
	0x03BC1B70 STR X30, [X31 - 0x20]!
	0x03BC1B74 STP X20, X19, [X31 + 0x10]
	0x03BC1B78 MOV X19, X1
	0x03BC1B7C MOV X20, X0
	0x03BC1B80 BL 0x3BC1B98
	0x03BC1B84 STR X19, [X20 + 0xE0]
	0x03BC1B88 MOV X0, X20
	0x03BC1B8C LDP X20, X19, [X31 + 0x10]
	0x03BC1B90 LDR X30, [X31], #0x20
	0x03BC1B94 B 0x3BC1C44
	0x03BC1B98 STP X30, X23, [X31 - 0x30]!
	0x03BC1B9C STP X22, X21, [X31 + 0x10]
	0x03BC1BA0 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x822000
	009 Move X24, 0x537000
	010 Move X21, 0x59D000
	011 Move X22, 0x59D000
	012 Move X23, 0x59D000
	013 Move W8, [X20+3497]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1272]
	016 Move X22, [X22+1280]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x537000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1280]
	028 Call 0x1C17CF4
	029 Move X0, 0x59D000
	030 Move X0, [X0+1272]
	031 Call 0x1C17CF4
	032 Move X0, 0x59D000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3497], W8
	037 Move X0, [X24]
	038 Move X20, [X19+152]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeRotateModeOverrideAction()

Disassembly:
	0x03BC1D9C BL 0x2A719B8
	0x03BC1DA0 LDR X0, [X22]
	0x03BC1DA4 LDR W8, [X0 + 0xE0]
	0x03BC1DA8 CBNZ W8, 0x3BC1DB0
	0x03BC1DAC BL 0x1C16DFC
	0x03BC1DB0 MOV X0, X20
	0x03BC1DB4 MOV X1, X21
	0x03BC1DB8 LDP X20, X19, [X31 + 0x20]
	0x03BC1DBC LDP X22, X21, [X31 + 0x10]
	0x03BC1DC0 MOV X2, X31
	0x03BC1DC4 LDP X30, X23, [X31], #0x30
	0x03BC1DC8 B 0x3BC8490
	0x03BC1DCC STP X30, X23, [X31 - 0x30]!
	0x03BC1DD0 STP X22, X21, [X31 + 0x10]
	0x03BC1DD4 STP X20, X19, [X31 + 0x20]
	0x03BC1DD8 ADRP X20, 0x821000
	0x03BC1DDC ADRP X23, 0x536000
	0x03BC1DE0 ADRP X21, 0x59C000
	0x03BC1DE4 ADRP X22, 0x59C000
	0x03BC1DE8 LDRB W8, [X20 + 0xDBC]
	0x03BC1DEC LDR X23, [X23 + 0x3D8]
	0x03BC1DF0 LDR X21, [X21 + 0x580]
	0x03BC1DF4 LDR X22, [X22 + 0x460]
	0x03BC1DF8 MOV X19, X0
	0x03BC1DFC TBNZ X8, 0x0, 0x3BC1E2C
	0x03BC1E00 ADRP X0, 0x536000
	0x03BC1E04 LDR X0, [X0 + 0x3D8]
	0x03BC1E08 BL 0x1C16CF4
	0x03BC1E0C ADRP X0, 0x59C000
	0x03BC1E10 LDR X0, [X0 + 0x580]
	0x03BC1E14 BL 0x1C16CF4
	0x03BC1E18 ADRP X0, 0x59C000
	0x03BC1E1C LDR X0, [X0 + 0x460]
	0x03BC1E20 BL 0x1C16CF4
	0x03BC1E24 MOVZ W8, 0x1
	0x03BC1E28 STRB W8, [X20 + 0xDBC]
	0x03BC1E2C LDR X0, [X23]
	0x03BC1E30 LDR X20, [X19 + 0xE8]
	0x03BC1E34 BL 0x1C16F10
	0x03BC1E38 LDR X2, [X21]
	0x03BC1E3C MOV X1, X19
	0x03BC1E40 MOV X3, X31
	0x03BC1E44 MOV X21, X0
	0x03BC1E48 BL 0x2A719B8
	0x03BC1E4C LDR X0, [X22]
	0x03BC1E50 LDR W8, [X0 + 0xE0]
	0x03BC1E54 CBNZ W8, 0x3BC1E5C
	0x03BC1E58 BL 0x1C16DFC
	0x03BC1E5C MOV X0, X20
	0x03BC1E60 MOV X1, X21
	0x03BC1E64 LDP X20, X19, [X31 + 0x20]
	0x03BC1E68 LDP X22, X21, [X31 + 0x10]
	0x03BC1E6C MOV X2, X31
	0x03BC1E70 LDP X30, X23, [X31], #0x30
	0x03BC1E74 B 0x3BC8368
	0x03BC1E78 LDR X0, [X0 + 0xF0]
	0x03BC1E7C RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x822000
	009 Move X24, 0x537000
	010 Move X21, 0x59D000
	011 Move X22, 0x59D000
	012 Move X23, 0x59D000
	013 Move W8, [X20+3498]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1288]
	016 Move X22, [X22+1296]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x537000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1296]
	028 Call 0x1C17CF4
	029 Move X0, 0x59D000
	030 Move X0, [X0+1288]
	031 Call 0x1C17CF4
	032 Move X0, 0x59D000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3498], W8
	037 Move X0, [X24]
	038 Move X20, [X19+160]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeRotateModeOverrideAction()

Disassembly:
	0x03BC1CB8 MOV X3, X31
	0x03BC1CBC MOV X21, X0
	0x03BC1CC0 BL 0x2A719B8
	0x03BC1CC4 LDR X0, [X22]
	0x03BC1CC8 LDR W8, [X0 + 0xE0]
	0x03BC1CCC CBNZ W8, 0x3BC1CD4
	0x03BC1CD0 BL 0x1C16DFC
	0x03BC1CD4 MOV X0, X20
	0x03BC1CD8 MOV X1, X21
	0x03BC1CDC LDP X20, X19, [X31 + 0x20]
	0x03BC1CE0 LDP X22, X21, [X31 + 0x10]
	0x03BC1CE4 MOV X2, X31
	0x03BC1CE8 LDP X30, X23, [X31], #0x30
	0x03BC1CEC B 0x3BC8368
	0x03BC1CF0 LDR X0, [X0 + 0xE8]
	0x03BC1CF4 RET
	0x03BC1CF8 STR X30, [X31 - 0x20]!
	0x03BC1CFC STP X20, X19, [X31 + 0x10]
	0x03BC1D00 MOV X19, X1
	0x03BC1D04 MOV X20, X0
	0x03BC1D08 BL 0x3BC1D20
	0x03BC1D0C STR X19, [X20 + 0xE8]
	0x03BC1D10 MOV X0, X20
	0x03BC1D14 LDP X20, X19, [X31 + 0x10]
	0x03BC1D18 LDR X30, [X31], #0x20
	0x03BC1D1C B 0x3BC1DCC
	0x03BC1D20 STP X30, X23, [X31 - 0x30]!
	0x03BC1D24 STP X22, X21, [X31 + 0x10]
	0x03BC1D28 STP X20, X19, [X31 + 0x20]
	0x03BC1D2C ADRP X20, 0x821000
	0x03BC1D30 ADRP X23, 0x536000
	0x03BC1D34 ADRP X21, 0x59C000
	0x03BC1D38 ADRP X22, 0x59C000
	0x03BC1D3C LDRB W8, [X20 + 0xDBD]
	0x03BC1D40 LDR X23, [X23 + 0x3D8]
	0x03BC1D44 LDR X21, [X21 + 0x580]
	0x03BC1D48 LDR X22, [X22 + 0x460]
	0x03BC1D4C MOV X19, X0
	0x03BC1D50 TBNZ X8, 0x0, 0x3BC1D80
	0x03BC1D54 ADRP X0, 0x536000
	0x03BC1D58 LDR X0, [X0 + 0x3D8]
	0x03BC1D5C BL 0x1C16CF4
	0x03BC1D60 ADRP X0, 0x59C000
	0x03BC1D64 LDR X0, [X0 + 0x580]
	0x03BC1D68 BL 0x1C16CF4
	0x03BC1D6C ADRP X0, 0x59C000
	0x03BC1D70 LDR X0, [X0 + 0x460]
	0x03BC1D74 BL 0x1C16CF4
	0x03BC1D78 MOVZ W8, 0x1
	0x03BC1D7C STRB W8, [X20 + 0xDBD]
	0x03BC1D80 LDR X0, [X23]
	0x03BC1D84 LDR X20, [X19 + 0xE8]
	0x03BC1D88 BL 0x1C16F10
	0x03BC1D8C LDR X2, [X21]
	0x03BC1D90 MOV X1, X19
	0x03BC1D94 MOV X3, X31
	0x03BC1D98 MOV X21, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x822000
	009 Move X24, 0x537000
	010 Move X21, 0x59D000
	011 Move X22, 0x59D000
	012 Move X23, 0x59D000
	013 Move W8, [X20+3499]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1288]
	016 Move X22, [X22+1296]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x537000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1296]
	028 Call 0x1C17CF4
	029 Move X0, 0x59D000
	030 Move X0, [X0+1288]
	031 Call 0x1C17CF4
	032 Move X0, 0x59D000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3499], W8
	037 Move X0, [X24]
	038 Move X20, [X19+160]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeToggleMouseTransformationModeAction()

Disassembly:
	0x03BC1F5C STP X20, X19, [X31 + 0x20]
	0x03BC1F60 ADRP X20, 0x821000
	0x03BC1F64 ADRP X23, 0x536000
	0x03BC1F68 ADRP X21, 0x59C000
	0x03BC1F6C ADRP X22, 0x59C000
	0x03BC1F70 LDRB W8, [X20 + 0xDBE]
	0x03BC1F74 LDR X23, [X23 + 0x3D8]
	0x03BC1F78 LDR X21, [X21 + 0x588]
	0x03BC1F7C LDR X22, [X22 + 0x460]
	0x03BC1F80 MOV X19, X0
	0x03BC1F84 TBNZ X8, 0x0, 0x3BC1FB4
	0x03BC1F88 ADRP X0, 0x536000
	0x03BC1F8C LDR X0, [X0 + 0x3D8]
	0x03BC1F90 BL 0x1C16CF4
	0x03BC1F94 ADRP X0, 0x59C000
	0x03BC1F98 LDR X0, [X0 + 0x588]
	0x03BC1F9C BL 0x1C16CF4
	0x03BC1FA0 ADRP X0, 0x59C000
	0x03BC1FA4 LDR X0, [X0 + 0x460]
	0x03BC1FA8 BL 0x1C16CF4
	0x03BC1FAC MOVZ W8, 0x1
	0x03BC1FB0 STRB W8, [X20 + 0xDBE]
	0x03BC1FB4 LDR X0, [X23]
	0x03BC1FB8 LDR X20, [X19 + 0xF0]
	0x03BC1FBC BL 0x1C16F10
	0x03BC1FC0 LDR X2, [X21]
	0x03BC1FC4 MOV X1, X19
	0x03BC1FC8 MOV X3, X31
	0x03BC1FCC MOV X21, X0
	0x03BC1FD0 BL 0x2A719B8
	0x03BC1FD4 LDR X0, [X22]
	0x03BC1FD8 LDR W8, [X0 + 0xE0]
	0x03BC1FDC CBNZ W8, 0x3BC1FE4
	0x03BC1FE0 BL 0x1C16DFC
	0x03BC1FE4 MOV X0, X20
	0x03BC1FE8 MOV X1, X21
	0x03BC1FEC LDP X20, X19, [X31 + 0x20]
	0x03BC1FF0 LDP X22, X21, [X31 + 0x10]
	0x03BC1FF4 MOV X2, X31
	0x03BC1FF8 LDP X30, X23, [X31], #0x30
	0x03BC1FFC B 0x3BC8368
	0x03BC2000 LDR X0, [X0 + 0xF8]
	0x03BC2004 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x822000
	008 Move X23, 0x537000
	009 Move X21, 0x59D000
	010 Move X22, 0x59D000
	011 Move W8, [X20+3500]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1304]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x537000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59D000
	024 Move X0, [X0+1304]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3500], W8
	031 Move X0, [X23]
	032 Move X20, [X19+168]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	054 Return 

Method: System.Void UnsubscribeToggleMouseTransformationModeAction()

Disassembly:
	0x03BC1EB0 STP X20, X19, [X31 + 0x20]
	0x03BC1EB4 ADRP X20, 0x821000
	0x03BC1EB8 ADRP X23, 0x536000
	0x03BC1EBC ADRP X21, 0x59C000
	0x03BC1EC0 ADRP X22, 0x59C000
	0x03BC1EC4 LDRB W8, [X20 + 0xDBF]
	0x03BC1EC8 LDR X23, [X23 + 0x3D8]
	0x03BC1ECC LDR X21, [X21 + 0x588]
	0x03BC1ED0 LDR X22, [X22 + 0x460]
	0x03BC1ED4 MOV X19, X0
	0x03BC1ED8 TBNZ X8, 0x0, 0x3BC1F08
	0x03BC1EDC ADRP X0, 0x536000
	0x03BC1EE0 LDR X0, [X0 + 0x3D8]
	0x03BC1EE4 BL 0x1C16CF4
	0x03BC1EE8 ADRP X0, 0x59C000
	0x03BC1EEC LDR X0, [X0 + 0x588]
	0x03BC1EF0 BL 0x1C16CF4
	0x03BC1EF4 ADRP X0, 0x59C000
	0x03BC1EF8 LDR X0, [X0 + 0x460]
	0x03BC1EFC BL 0x1C16CF4
	0x03BC1F00 MOVZ W8, 0x1
	0x03BC1F04 STRB W8, [X20 + 0xDBF]
	0x03BC1F08 LDR X0, [X23]
	0x03BC1F0C LDR X20, [X19 + 0xF0]
	0x03BC1F10 BL 0x1C16F10
	0x03BC1F14 LDR X2, [X21]
	0x03BC1F18 MOV X1, X19
	0x03BC1F1C MOV X3, X31
	0x03BC1F20 MOV X21, X0
	0x03BC1F24 BL 0x2A719B8
	0x03BC1F28 LDR X0, [X22]
	0x03BC1F2C LDR W8, [X0 + 0xE0]
	0x03BC1F30 CBNZ W8, 0x3BC1F38
	0x03BC1F34 BL 0x1C16DFC
	0x03BC1F38 MOV X0, X20
	0x03BC1F3C MOV X1, X21
	0x03BC1F40 LDP X20, X19, [X31 + 0x20]
	0x03BC1F44 LDP X22, X21, [X31 + 0x10]
	0x03BC1F48 MOV X2, X31
	0x03BC1F4C LDP X30, X23, [X31], #0x30
	0x03BC1F50 B 0x3BC8490
	0x03BC1F54 STP X30, X23, [X31 - 0x30]!
	0x03BC1F58 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x822000
	008 Move X23, 0x537000
	009 Move X21, 0x59D000
	010 Move X22, 0x59D000
	011 Move W8, [X20+3501]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1304]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x537000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59D000
	024 Move X0, [X0+1304]
	025 Call 0x1C17CF4
	026 Move X0, 0x59D000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3501], W8
	031 Move X0, [X23]
	032 Move X20, [X19+168]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	054 Return 

Method: System.Void SubscribeNegateModeAction()

Disassembly:
	0x03BC211C STP X22, X21, [X31 + 0x20]
	0x03BC2120 STP X20, X19, [X31 + 0x30]
	0x03BC2124 ADRP X20, 0x820000
	0x03BC2128 ADRP X24, 0x535000
	0x03BC212C ADRP X21, 0x59B000
	0x03BC2130 ADRP X22, 0x59B000
	0x03BC2134 ADRP X23, 0x59B000
	0x03BC2138 LDRB W8, [X20 + 0xDC0]
	0x03BC213C LDR X24, [X24 + 0x3D8]
	0x03BC2140 LDR X21, [X21 + 0x590]
	0x03BC2144 LDR X22, [X22 + 0x598]
	0x03BC2148 LDR X23, [X23 + 0x460]
	0x03BC214C MOV X19, X0
	0x03BC2150 TBNZ X8, 0x0, 0x3BC218C
	0x03BC2154 ADRP X0, 0x535000
	0x03BC2158 LDR X0, [X0 + 0x3D8]
	0x03BC215C BL 0x1C16CF4
	0x03BC2160 ADRP X0, 0x59B000
	0x03BC2164 LDR X0, [X0 + 0x598]
	0x03BC2168 BL 0x1C16CF4
	0x03BC216C ADRP X0, 0x59B000
	0x03BC2170 LDR X0, [X0 + 0x590]
	0x03BC2174 BL 0x1C16CF4
	0x03BC2178 ADRP X0, 0x59B000
	0x03BC217C LDR X0, [X0 + 0x460]
	0x03BC2180 BL 0x1C16CF4
	0x03BC2184 MOVZ W8, 0x1
	0x03BC2188 STRB W8, [X20 + 0xDC0]
	0x03BC218C LDR X0, [X24]
	0x03BC2190 LDR X20, [X19 + 0xF8]
	0x03BC2194 BL 0x1C16F10
	0x03BC2198 LDR X2, [X21]
	0x03BC219C MOV X1, X19
	0x03BC21A0 MOV X3, X31
	0x03BC21A4 MOV X21, X0
	0x03BC21A8 BL 0x2A719B8
	0x03BC21AC LDR X0, [X24]
	0x03BC21B0 BL 0x1C16F10
	0x03BC21B4 LDR X2, [X22]
	0x03BC21B8 MOV X1, X19
	0x03BC21BC MOV X3, X31
	0x03BC21C0 MOV X22, X0
	0x03BC21C4 BL 0x2A719B8
	0x03BC21C8 LDR X0, [X23]
	0x03BC21CC LDR W8, [X0 + 0xE0]
	0x03BC21D0 CBNZ W8, 0x3BC21D8
	0x03BC21D4 BL 0x1C16DFC
	0x03BC21D8 MOV X0, X20
	0x03BC21DC MOV X1, X21
	0x03BC21E0 MOV X2, X22
	0x03BC21E4 LDP X20, X19, [X31 + 0x30]
	0x03BC21E8 LDP X22, X21, [X31 + 0x20]
	0x03BC21EC LDP X24, X23, [X31 + 0x10]
	0x03BC21F0 LDR X30, [X31], #0x40
	0x03BC21F4 B 0x3BC8368
	0x03BC21F8 LDR X0, [X0 + 0x100]
	0x03BC21FC RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x821000
	009 Move X24, 0x536000
	010 Move X21, 0x59C000
	011 Move X22, 0x59C000
	012 Move X23, 0x59C000
	013 Move W8, [X20+3502]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1312]
	016 Move X22, [X22+1320]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x536000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1320]
	028 Call 0x1C17CF4
	029 Move X0, 0x59C000
	030 Move X0, [X0+1312]
	031 Call 0x1C17CF4
	032 Move X0, 0x59C000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3502], W8
	037 Move X0, [X24]
	038 Move X20, [X19+176]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeNegateModeAction()

Disassembly:
	0x03BC2038 STP X22, X21, [X31 + 0x20]
	0x03BC203C STP X20, X19, [X31 + 0x30]
	0x03BC2040 ADRP X20, 0x820000
	0x03BC2044 ADRP X24, 0x535000
	0x03BC2048 ADRP X21, 0x59B000
	0x03BC204C ADRP X22, 0x59B000
	0x03BC2050 ADRP X23, 0x59B000
	0x03BC2054 LDRB W8, [X20 + 0xDC1]
	0x03BC2058 LDR X24, [X24 + 0x3D8]
	0x03BC205C LDR X21, [X21 + 0x590]
	0x03BC2060 LDR X22, [X22 + 0x598]
	0x03BC2064 LDR X23, [X23 + 0x460]
	0x03BC2068 MOV X19, X0
	0x03BC206C TBNZ X8, 0x0, 0x3BC20A8
	0x03BC2070 ADRP X0, 0x535000
	0x03BC2074 LDR X0, [X0 + 0x3D8]
	0x03BC2078 BL 0x1C16CF4
	0x03BC207C ADRP X0, 0x59B000
	0x03BC2080 LDR X0, [X0 + 0x598]
	0x03BC2084 BL 0x1C16CF4
	0x03BC2088 ADRP X0, 0x59B000
	0x03BC208C LDR X0, [X0 + 0x590]
	0x03BC2090 BL 0x1C16CF4
	0x03BC2094 ADRP X0, 0x59B000
	0x03BC2098 LDR X0, [X0 + 0x460]
	0x03BC209C BL 0x1C16CF4
	0x03BC20A0 MOVZ W8, 0x1
	0x03BC20A4 STRB W8, [X20 + 0xDC1]
	0x03BC20A8 LDR X0, [X24]
	0x03BC20AC LDR X20, [X19 + 0xF8]
	0x03BC20B0 BL 0x1C16F10
	0x03BC20B4 LDR X2, [X21]
	0x03BC20B8 MOV X1, X19
	0x03BC20BC MOV X3, X31
	0x03BC20C0 MOV X21, X0
	0x03BC20C4 BL 0x2A719B8
	0x03BC20C8 LDR X0, [X24]
	0x03BC20CC BL 0x1C16F10
	0x03BC20D0 LDR X2, [X22]
	0x03BC20D4 MOV X1, X19
	0x03BC20D8 MOV X3, X31
	0x03BC20DC MOV X22, X0
	0x03BC20E0 BL 0x2A719B8
	0x03BC20E4 LDR X0, [X23]
	0x03BC20E8 LDR W8, [X0 + 0xE0]
	0x03BC20EC CBNZ W8, 0x3BC20F4
	0x03BC20F0 BL 0x1C16DFC
	0x03BC20F4 MOV X0, X20
	0x03BC20F8 MOV X1, X21
	0x03BC20FC MOV X2, X22
	0x03BC2100 LDP X20, X19, [X31 + 0x30]
	0x03BC2104 LDP X22, X21, [X31 + 0x20]
	0x03BC2108 LDP X24, X23, [X31 + 0x10]
	0x03BC210C LDR X30, [X31], #0x40
	0x03BC2110 B 0x3BC8490
	0x03BC2114 STR X30, [X31 - 0x40]!
	0x03BC2118 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x821000
	009 Move X24, 0x536000
	010 Move X21, 0x59C000
	011 Move X22, 0x59C000
	012 Move X23, 0x59C000
	013 Move W8, [X20+3503]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1312]
	016 Move X22, [X22+1320]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x536000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1320]
	028 Call 0x1C17CF4
	029 Move X0, 0x59C000
	030 Move X0, [X0+1312]
	031 Call 0x1C17CF4
	032 Move X0, 0x59C000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3503], W8
	037 Move X0, [X24]
	038 Move X20, [X19+176]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeXConstraintAction()

Disassembly:
	0x03BC2314 STP X22, X21, [X31 + 0x20]
	0x03BC2318 STP X20, X19, [X31 + 0x30]
	0x03BC231C ADRP X20, 0x820000
	0x03BC2320 ADRP X24, 0x535000
	0x03BC2324 ADRP X21, 0x59B000
	0x03BC2328 ADRP X22, 0x59B000
	0x03BC232C ADRP X23, 0x59B000
	0x03BC2330 LDRB W8, [X20 + 0xDC2]
	0x03BC2334 LDR X24, [X24 + 0x3D8]
	0x03BC2338 LDR X21, [X21 + 0x5A0]
	0x03BC233C LDR X22, [X22 + 0x5A8]
	0x03BC2340 LDR X23, [X23 + 0x460]
	0x03BC2344 MOV X19, X0
	0x03BC2348 TBNZ X8, 0x0, 0x3BC2384
	0x03BC234C ADRP X0, 0x535000
	0x03BC2350 LDR X0, [X0 + 0x3D8]
	0x03BC2354 BL 0x1C16CF4
	0x03BC2358 ADRP X0, 0x59B000
	0x03BC235C LDR X0, [X0 + 0x5A8]
	0x03BC2360 BL 0x1C16CF4
	0x03BC2364 ADRP X0, 0x59B000
	0x03BC2368 LDR X0, [X0 + 0x5A0]
	0x03BC236C BL 0x1C16CF4
	0x03BC2370 ADRP X0, 0x59B000
	0x03BC2374 LDR X0, [X0 + 0x460]
	0x03BC2378 BL 0x1C16CF4
	0x03BC237C MOVZ W8, 0x1
	0x03BC2380 STRB W8, [X20 + 0xDC2]
	0x03BC2384 LDR X0, [X24]
	0x03BC2388 LDR X20, [X19 + 0x100]
	0x03BC238C BL 0x1C16F10
	0x03BC2390 LDR X2, [X21]
	0x03BC2394 MOV X1, X19
	0x03BC2398 MOV X3, X31
	0x03BC239C MOV X21, X0
	0x03BC23A0 BL 0x2A719B8
	0x03BC23A4 LDR X0, [X24]
	0x03BC23A8 BL 0x1C16F10
	0x03BC23AC LDR X2, [X22]
	0x03BC23B0 MOV X1, X19
	0x03BC23B4 MOV X3, X31
	0x03BC23B8 MOV X22, X0
	0x03BC23BC BL 0x2A719B8
	0x03BC23C0 LDR X0, [X23]
	0x03BC23C4 LDR W8, [X0 + 0xE0]
	0x03BC23C8 CBNZ W8, 0x3BC23D0
	0x03BC23CC BL 0x1C16DFC
	0x03BC23D0 MOV X0, X20
	0x03BC23D4 MOV X1, X21
	0x03BC23D8 MOV X2, X22
	0x03BC23DC LDP X20, X19, [X31 + 0x30]
	0x03BC23E0 LDP X22, X21, [X31 + 0x20]
	0x03BC23E4 LDP X24, X23, [X31 + 0x10]
	0x03BC23E8 LDR X30, [X31], #0x40
	0x03BC23EC B 0x3BC8368
	0x03BC23F0 LDR X0, [X0 + 0x108]
	0x03BC23F4 RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x821000
	009 Move X24, 0x536000
	010 Move X21, 0x59C000
	011 Move X22, 0x59C000
	012 Move X23, 0x59C000
	013 Move W8, [X20+3504]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1328]
	016 Move X22, [X22+1336]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x536000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1336]
	028 Call 0x1C17CF4
	029 Move X0, 0x59C000
	030 Move X0, [X0+1328]
	031 Call 0x1C17CF4
	032 Move X0, 0x59C000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3504], W8
	037 Move X0, [X24]
	038 Move X20, [X19+184]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeXConstraintAction()

Disassembly:
	0x03BC2230 STP X22, X21, [X31 + 0x20]
	0x03BC2234 STP X20, X19, [X31 + 0x30]
	0x03BC2238 ADRP X20, 0x820000
	0x03BC223C ADRP X24, 0x535000
	0x03BC2240 ADRP X21, 0x59B000
	0x03BC2244 ADRP X22, 0x59B000
	0x03BC2248 ADRP X23, 0x59B000
	0x03BC224C LDRB W8, [X20 + 0xDC3]
	0x03BC2250 LDR X24, [X24 + 0x3D8]
	0x03BC2254 LDR X21, [X21 + 0x5A0]
	0x03BC2258 LDR X22, [X22 + 0x5A8]
	0x03BC225C LDR X23, [X23 + 0x460]
	0x03BC2260 MOV X19, X0
	0x03BC2264 TBNZ X8, 0x0, 0x3BC22A0
	0x03BC2268 ADRP X0, 0x535000
	0x03BC226C LDR X0, [X0 + 0x3D8]
	0x03BC2270 BL 0x1C16CF4
	0x03BC2274 ADRP X0, 0x59B000
	0x03BC2278 LDR X0, [X0 + 0x5A8]
	0x03BC227C BL 0x1C16CF4
	0x03BC2280 ADRP X0, 0x59B000
	0x03BC2284 LDR X0, [X0 + 0x5A0]
	0x03BC2288 BL 0x1C16CF4
	0x03BC228C ADRP X0, 0x59B000
	0x03BC2290 LDR X0, [X0 + 0x460]
	0x03BC2294 BL 0x1C16CF4
	0x03BC2298 MOVZ W8, 0x1
	0x03BC229C STRB W8, [X20 + 0xDC3]
	0x03BC22A0 LDR X0, [X24]
	0x03BC22A4 LDR X20, [X19 + 0x100]
	0x03BC22A8 BL 0x1C16F10
	0x03BC22AC LDR X2, [X21]
	0x03BC22B0 MOV X1, X19
	0x03BC22B4 MOV X3, X31
	0x03BC22B8 MOV X21, X0
	0x03BC22BC BL 0x2A719B8
	0x03BC22C0 LDR X0, [X24]
	0x03BC22C4 BL 0x1C16F10
	0x03BC22C8 LDR X2, [X22]
	0x03BC22CC MOV X1, X19
	0x03BC22D0 MOV X3, X31
	0x03BC22D4 MOV X22, X0
	0x03BC22D8 BL 0x2A719B8
	0x03BC22DC LDR X0, [X23]
	0x03BC22E0 LDR W8, [X0 + 0xE0]
	0x03BC22E4 CBNZ W8, 0x3BC22EC
	0x03BC22E8 BL 0x1C16DFC
	0x03BC22EC MOV X0, X20
	0x03BC22F0 MOV X1, X21
	0x03BC22F4 MOV X2, X22
	0x03BC22F8 LDP X20, X19, [X31 + 0x30]
	0x03BC22FC LDP X22, X21, [X31 + 0x20]
	0x03BC2300 LDP X24, X23, [X31 + 0x10]
	0x03BC2304 LDR X30, [X31], #0x40
	0x03BC2308 B 0x3BC8490
	0x03BC230C STR X30, [X31 - 0x40]!
	0x03BC2310 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x821000
	009 Move X24, 0x536000
	010 Move X21, 0x59C000
	011 Move X22, 0x59C000
	012 Move X23, 0x59C000
	013 Move W8, [X20+3505]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1328]
	016 Move X22, [X22+1336]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x536000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1336]
	028 Call 0x1C17CF4
	029 Move X0, 0x59C000
	030 Move X0, [X0+1328]
	031 Call 0x1C17CF4
	032 Move X0, 0x59C000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3505], W8
	037 Move X0, [X24]
	038 Move X20, [X19+184]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeYConstraintAction()

Disassembly:
	0x03BC250C STP X22, X21, [X31 + 0x20]
	0x03BC2510 STP X20, X19, [X31 + 0x30]
	0x03BC2514 ADRP X20, 0x820000
	0x03BC2518 ADRP X24, 0x535000
	0x03BC251C ADRP X21, 0x59B000
	0x03BC2520 ADRP X22, 0x59B000
	0x03BC2524 ADRP X23, 0x59B000
	0x03BC2528 LDRB W8, [X20 + 0xDC4]
	0x03BC252C LDR X24, [X24 + 0x3D8]
	0x03BC2530 LDR X21, [X21 + 0x5B0]
	0x03BC2534 LDR X22, [X22 + 0x5B8]
	0x03BC2538 LDR X23, [X23 + 0x460]
	0x03BC253C MOV X19, X0
	0x03BC2540 TBNZ X8, 0x0, 0x3BC257C
	0x03BC2544 ADRP X0, 0x535000
	0x03BC2548 LDR X0, [X0 + 0x3D8]
	0x03BC254C BL 0x1C16CF4
	0x03BC2550 ADRP X0, 0x59B000
	0x03BC2554 LDR X0, [X0 + 0x5B8]
	0x03BC2558 BL 0x1C16CF4
	0x03BC255C ADRP X0, 0x59B000
	0x03BC2560 LDR X0, [X0 + 0x5B0]
	0x03BC2564 BL 0x1C16CF4
	0x03BC2568 ADRP X0, 0x59B000
	0x03BC256C LDR X0, [X0 + 0x460]
	0x03BC2570 BL 0x1C16CF4
	0x03BC2574 MOVZ W8, 0x1
	0x03BC2578 STRB W8, [X20 + 0xDC4]
	0x03BC257C LDR X0, [X24]
	0x03BC2580 LDR X20, [X19 + 0x108]
	0x03BC2584 BL 0x1C16F10
	0x03BC2588 LDR X2, [X21]
	0x03BC258C MOV X1, X19
	0x03BC2590 MOV X3, X31
	0x03BC2594 MOV X21, X0
	0x03BC2598 BL 0x2A719B8
	0x03BC259C LDR X0, [X24]
	0x03BC25A0 BL 0x1C16F10
	0x03BC25A4 LDR X2, [X22]
	0x03BC25A8 MOV X1, X19
	0x03BC25AC MOV X3, X31
	0x03BC25B0 MOV X22, X0
	0x03BC25B4 BL 0x2A719B8
	0x03BC25B8 LDR X0, [X23]
	0x03BC25BC LDR W8, [X0 + 0xE0]
	0x03BC25C0 CBNZ W8, 0x3BC25C8
	0x03BC25C4 BL 0x1C16DFC
	0x03BC25C8 MOV X0, X20
	0x03BC25CC MOV X1, X21
	0x03BC25D0 MOV X2, X22
	0x03BC25D4 LDP X20, X19, [X31 + 0x30]
	0x03BC25D8 LDP X22, X21, [X31 + 0x20]
	0x03BC25DC LDP X24, X23, [X31 + 0x10]
	0x03BC25E0 LDR X30, [X31], #0x40
	0x03BC25E4 B 0x3BC8368
	0x03BC25E8 LDR X0, [X0 + 0x110]
	0x03BC25EC RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x821000
	009 Move X24, 0x536000
	010 Move X21, 0x59C000
	011 Move X22, 0x59C000
	012 Move X23, 0x59C000
	013 Move W8, [X20+3506]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1344]
	016 Move X22, [X22+1352]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x536000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1352]
	028 Call 0x1C17CF4
	029 Move X0, 0x59C000
	030 Move X0, [X0+1344]
	031 Call 0x1C17CF4
	032 Move X0, 0x59C000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3506], W8
	037 Move X0, [X24]
	038 Move X20, [X19+192]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeYConstraintAction()

Disassembly:
	0x03BC2428 STP X22, X21, [X31 + 0x20]
	0x03BC242C STP X20, X19, [X31 + 0x30]
	0x03BC2430 ADRP X20, 0x820000
	0x03BC2434 ADRP X24, 0x535000
	0x03BC2438 ADRP X21, 0x59B000
	0x03BC243C ADRP X22, 0x59B000
	0x03BC2440 ADRP X23, 0x59B000
	0x03BC2444 LDRB W8, [X20 + 0xDC5]
	0x03BC2448 LDR X24, [X24 + 0x3D8]
	0x03BC244C LDR X21, [X21 + 0x5B0]
	0x03BC2450 LDR X22, [X22 + 0x5B8]
	0x03BC2454 LDR X23, [X23 + 0x460]
	0x03BC2458 MOV X19, X0
	0x03BC245C TBNZ X8, 0x0, 0x3BC2498
	0x03BC2460 ADRP X0, 0x535000
	0x03BC2464 LDR X0, [X0 + 0x3D8]
	0x03BC2468 BL 0x1C16CF4
	0x03BC246C ADRP X0, 0x59B000
	0x03BC2470 LDR X0, [X0 + 0x5B8]
	0x03BC2474 BL 0x1C16CF4
	0x03BC2478 ADRP X0, 0x59B000
	0x03BC247C LDR X0, [X0 + 0x5B0]
	0x03BC2480 BL 0x1C16CF4
	0x03BC2484 ADRP X0, 0x59B000
	0x03BC2488 LDR X0, [X0 + 0x460]
	0x03BC248C BL 0x1C16CF4
	0x03BC2490 MOVZ W8, 0x1
	0x03BC2494 STRB W8, [X20 + 0xDC5]
	0x03BC2498 LDR X0, [X24]
	0x03BC249C LDR X20, [X19 + 0x108]
	0x03BC24A0 BL 0x1C16F10
	0x03BC24A4 LDR X2, [X21]
	0x03BC24A8 MOV X1, X19
	0x03BC24AC MOV X3, X31
	0x03BC24B0 MOV X21, X0
	0x03BC24B4 BL 0x2A719B8
	0x03BC24B8 LDR X0, [X24]
	0x03BC24BC BL 0x1C16F10
	0x03BC24C0 LDR X2, [X22]
	0x03BC24C4 MOV X1, X19
	0x03BC24C8 MOV X3, X31
	0x03BC24CC MOV X22, X0
	0x03BC24D0 BL 0x2A719B8
	0x03BC24D4 LDR X0, [X23]
	0x03BC24D8 LDR W8, [X0 + 0xE0]
	0x03BC24DC CBNZ W8, 0x3BC24E4
	0x03BC24E0 BL 0x1C16DFC
	0x03BC24E4 MOV X0, X20
	0x03BC24E8 MOV X1, X21
	0x03BC24EC MOV X2, X22
	0x03BC24F0 LDP X20, X19, [X31 + 0x30]
	0x03BC24F4 LDP X22, X21, [X31 + 0x20]
	0x03BC24F8 LDP X24, X23, [X31 + 0x10]
	0x03BC24FC LDR X30, [X31], #0x40
	0x03BC2500 B 0x3BC8490
	0x03BC2504 STR X30, [X31 - 0x40]!
	0x03BC2508 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x821000
	009 Move X24, 0x536000
	010 Move X21, 0x59C000
	011 Move X22, 0x59C000
	012 Move X23, 0x59C000
	013 Move W8, [X20+3507]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1344]
	016 Move X22, [X22+1352]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x536000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1352]
	028 Call 0x1C17CF4
	029 Move X0, 0x59C000
	030 Move X0, [X0+1344]
	031 Call 0x1C17CF4
	032 Move X0, 0x59C000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3507], W8
	037 Move X0, [X24]
	038 Move X20, [X19+192]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeZConstraintAction()

Disassembly:
	0x03BC2704 STP X22, X21, [X31 + 0x20]
	0x03BC2708 STP X20, X19, [X31 + 0x30]
	0x03BC270C ADRP X20, 0x820000
	0x03BC2710 ADRP X24, 0x535000
	0x03BC2714 ADRP X21, 0x59B000
	0x03BC2718 ADRP X22, 0x59B000
	0x03BC271C ADRP X23, 0x59B000
	0x03BC2720 LDRB W8, [X20 + 0xDC6]
	0x03BC2724 LDR X24, [X24 + 0x3D8]
	0x03BC2728 LDR X21, [X21 + 0x5C0]
	0x03BC272C LDR X22, [X22 + 0x5C8]
	0x03BC2730 LDR X23, [X23 + 0x460]
	0x03BC2734 MOV X19, X0
	0x03BC2738 TBNZ X8, 0x0, 0x3BC2774
	0x03BC273C ADRP X0, 0x535000
	0x03BC2740 LDR X0, [X0 + 0x3D8]
	0x03BC2744 BL 0x1C16CF4
	0x03BC2748 ADRP X0, 0x59B000
	0x03BC274C LDR X0, [X0 + 0x5C8]
	0x03BC2750 BL 0x1C16CF4
	0x03BC2754 ADRP X0, 0x59B000
	0x03BC2758 LDR X0, [X0 + 0x5C0]
	0x03BC275C BL 0x1C16CF4
	0x03BC2760 ADRP X0, 0x59B000
	0x03BC2764 LDR X0, [X0 + 0x460]
	0x03BC2768 BL 0x1C16CF4
	0x03BC276C MOVZ W8, 0x1
	0x03BC2770 STRB W8, [X20 + 0xDC6]
	0x03BC2774 LDR X0, [X24]
	0x03BC2778 LDR X20, [X19 + 0x110]
	0x03BC277C BL 0x1C16F10
	0x03BC2780 LDR X2, [X21]
	0x03BC2784 MOV X1, X19
	0x03BC2788 MOV X3, X31
	0x03BC278C MOV X21, X0
	0x03BC2790 BL 0x2A719B8
	0x03BC2794 LDR X0, [X24]
	0x03BC2798 BL 0x1C16F10
	0x03BC279C LDR X2, [X22]
	0x03BC27A0 MOV X1, X19
	0x03BC27A4 MOV X3, X31
	0x03BC27A8 MOV X22, X0
	0x03BC27AC BL 0x2A719B8
	0x03BC27B0 LDR X0, [X23]
	0x03BC27B4 LDR W8, [X0 + 0xE0]
	0x03BC27B8 CBNZ W8, 0x3BC27C0
	0x03BC27BC BL 0x1C16DFC
	0x03BC27C0 MOV X0, X20
	0x03BC27C4 MOV X1, X21
	0x03BC27C8 MOV X2, X22
	0x03BC27CC LDP X20, X19, [X31 + 0x30]
	0x03BC27D0 LDP X22, X21, [X31 + 0x20]
	0x03BC27D4 LDP X24, X23, [X31 + 0x10]
	0x03BC27D8 LDR X30, [X31], #0x40
	0x03BC27DC B 0x3BC8368
	0x03BC27E0 LDR X0, [X0 + 0x118]
	0x03BC27E4 RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x821000
	009 Move X24, 0x536000
	010 Move X21, 0x59C000
	011 Move X22, 0x59C000
	012 Move X23, 0x59C000
	013 Move W8, [X20+3508]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1360]
	016 Move X22, [X22+1368]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x536000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1368]
	028 Call 0x1C17CF4
	029 Move X0, 0x59C000
	030 Move X0, [X0+1360]
	031 Call 0x1C17CF4
	032 Move X0, 0x59C000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3508], W8
	037 Move X0, [X24]
	038 Move X20, [X19+200]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeZConstraintAction()

Disassembly:
	0x03BC2620 STP X22, X21, [X31 + 0x20]
	0x03BC2624 STP X20, X19, [X31 + 0x30]
	0x03BC2628 ADRP X20, 0x820000
	0x03BC262C ADRP X24, 0x535000
	0x03BC2630 ADRP X21, 0x59B000
	0x03BC2634 ADRP X22, 0x59B000
	0x03BC2638 ADRP X23, 0x59B000
	0x03BC263C LDRB W8, [X20 + 0xDC7]
	0x03BC2640 LDR X24, [X24 + 0x3D8]
	0x03BC2644 LDR X21, [X21 + 0x5C0]
	0x03BC2648 LDR X22, [X22 + 0x5C8]
	0x03BC264C LDR X23, [X23 + 0x460]
	0x03BC2650 MOV X19, X0
	0x03BC2654 TBNZ X8, 0x0, 0x3BC2690
	0x03BC2658 ADRP X0, 0x535000
	0x03BC265C LDR X0, [X0 + 0x3D8]
	0x03BC2660 BL 0x1C16CF4
	0x03BC2664 ADRP X0, 0x59B000
	0x03BC2668 LDR X0, [X0 + 0x5C8]
	0x03BC266C BL 0x1C16CF4
	0x03BC2670 ADRP X0, 0x59B000
	0x03BC2674 LDR X0, [X0 + 0x5C0]
	0x03BC2678 BL 0x1C16CF4
	0x03BC267C ADRP X0, 0x59B000
	0x03BC2680 LDR X0, [X0 + 0x460]
	0x03BC2684 BL 0x1C16CF4
	0x03BC2688 MOVZ W8, 0x1
	0x03BC268C STRB W8, [X20 + 0xDC7]
	0x03BC2690 LDR X0, [X24]
	0x03BC2694 LDR X20, [X19 + 0x110]
	0x03BC2698 BL 0x1C16F10
	0x03BC269C LDR X2, [X21]
	0x03BC26A0 MOV X1, X19
	0x03BC26A4 MOV X3, X31
	0x03BC26A8 MOV X21, X0
	0x03BC26AC BL 0x2A719B8
	0x03BC26B0 LDR X0, [X24]
	0x03BC26B4 BL 0x1C16F10
	0x03BC26B8 LDR X2, [X22]
	0x03BC26BC MOV X1, X19
	0x03BC26C0 MOV X3, X31
	0x03BC26C4 MOV X22, X0
	0x03BC26C8 BL 0x2A719B8
	0x03BC26CC LDR X0, [X23]
	0x03BC26D0 LDR W8, [X0 + 0xE0]
	0x03BC26D4 CBNZ W8, 0x3BC26DC
	0x03BC26D8 BL 0x1C16DFC
	0x03BC26DC MOV X0, X20
	0x03BC26E0 MOV X1, X21
	0x03BC26E4 MOV X2, X22
	0x03BC26E8 LDP X20, X19, [X31 + 0x30]
	0x03BC26EC LDP X22, X21, [X31 + 0x20]
	0x03BC26F0 LDP X24, X23, [X31 + 0x10]
	0x03BC26F4 LDR X30, [X31], #0x40
	0x03BC26F8 B 0x3BC8490
	0x03BC26FC STR X30, [X31 - 0x40]!
	0x03BC2700 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x821000
	009 Move X24, 0x536000
	010 Move X21, 0x59C000
	011 Move X22, 0x59C000
	012 Move X23, 0x59C000
	013 Move W8, [X20+3509]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1360]
	016 Move X22, [X22+1368]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x536000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1368]
	028 Call 0x1C17CF4
	029 Move X0, 0x59C000
	030 Move X0, [X0+1360]
	031 Call 0x1C17CF4
	032 Move X0, 0x59C000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3509], W8
	037 Move X0, [X24]
	038 Move X20, [X19+200]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeResetAction()

Disassembly:
	0x03BC28FC STP X22, X21, [X31 + 0x20]
	0x03BC2900 STP X20, X19, [X31 + 0x30]
	0x03BC2904 ADRP X20, 0x820000
	0x03BC2908 ADRP X24, 0x535000
	0x03BC290C ADRP X21, 0x59B000
	0x03BC2910 ADRP X22, 0x59B000
	0x03BC2914 ADRP X23, 0x59B000
	0x03BC2918 LDRB W8, [X20 + 0xDC8]
	0x03BC291C LDR X24, [X24 + 0x3D8]
	0x03BC2920 LDR X21, [X21 + 0x5D0]
	0x03BC2924 LDR X22, [X22 + 0x5D8]
	0x03BC2928 LDR X23, [X23 + 0x460]
	0x03BC292C MOV X19, X0
	0x03BC2930 TBNZ X8, 0x0, 0x3BC296C
	0x03BC2934 ADRP X0, 0x535000
	0x03BC2938 LDR X0, [X0 + 0x3D8]
	0x03BC293C BL 0x1C16CF4
	0x03BC2940 ADRP X0, 0x59B000
	0x03BC2944 LDR X0, [X0 + 0x5D8]
	0x03BC2948 BL 0x1C16CF4
	0x03BC294C ADRP X0, 0x59B000
	0x03BC2950 LDR X0, [X0 + 0x5D0]
	0x03BC2954 BL 0x1C16CF4
	0x03BC2958 ADRP X0, 0x59B000
	0x03BC295C LDR X0, [X0 + 0x460]
	0x03BC2960 BL 0x1C16CF4
	0x03BC2964 MOVZ W8, 0x1
	0x03BC2968 STRB W8, [X20 + 0xDC8]
	0x03BC296C LDR X0, [X24]
	0x03BC2970 LDR X20, [X19 + 0x118]
	0x03BC2974 BL 0x1C16F10
	0x03BC2978 LDR X2, [X21]
	0x03BC297C MOV X1, X19
	0x03BC2980 MOV X3, X31
	0x03BC2984 MOV X21, X0
	0x03BC2988 BL 0x2A719B8
	0x03BC298C LDR X0, [X24]
	0x03BC2990 BL 0x1C16F10
	0x03BC2994 LDR X2, [X22]
	0x03BC2998 MOV X1, X19
	0x03BC299C MOV X3, X31
	0x03BC29A0 MOV X22, X0
	0x03BC29A4 BL 0x2A719B8
	0x03BC29A8 LDR X0, [X23]
	0x03BC29AC LDR W8, [X0 + 0xE0]
	0x03BC29B0 CBNZ W8, 0x3BC29B8
	0x03BC29B4 BL 0x1C16DFC
	0x03BC29B8 MOV X0, X20
	0x03BC29BC MOV X1, X21
	0x03BC29C0 MOV X2, X22
	0x03BC29C4 LDP X20, X19, [X31 + 0x30]
	0x03BC29C8 LDP X22, X21, [X31 + 0x20]
	0x03BC29CC LDP X24, X23, [X31 + 0x10]
	0x03BC29D0 LDR X30, [X31], #0x40
	0x03BC29D4 B 0x3BC8368
	0x03BC29D8 LDR X0, [X0 + 0x120]
	0x03BC29DC RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x821000
	009 Move X24, 0x536000
	010 Move X21, 0x59C000
	011 Move X22, 0x59C000
	012 Move X23, 0x59C000
	013 Move W8, [X20+3510]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1376]
	016 Move X22, [X22+1384]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x536000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1384]
	028 Call 0x1C17CF4
	029 Move X0, 0x59C000
	030 Move X0, [X0+1376]
	031 Call 0x1C17CF4
	032 Move X0, 0x59C000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3510], W8
	037 Move X0, [X24]
	038 Move X20, [X19+208]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeResetAction()

Disassembly:
	0x03BC2818 STP X22, X21, [X31 + 0x20]
	0x03BC281C STP X20, X19, [X31 + 0x30]
	0x03BC2820 ADRP X20, 0x820000
	0x03BC2824 ADRP X24, 0x535000
	0x03BC2828 ADRP X21, 0x59B000
	0x03BC282C ADRP X22, 0x59B000
	0x03BC2830 ADRP X23, 0x59B000
	0x03BC2834 LDRB W8, [X20 + 0xDC9]
	0x03BC2838 LDR X24, [X24 + 0x3D8]
	0x03BC283C LDR X21, [X21 + 0x5D0]
	0x03BC2840 LDR X22, [X22 + 0x5D8]
	0x03BC2844 LDR X23, [X23 + 0x460]
	0x03BC2848 MOV X19, X0
	0x03BC284C TBNZ X8, 0x0, 0x3BC2888
	0x03BC2850 ADRP X0, 0x535000
	0x03BC2854 LDR X0, [X0 + 0x3D8]
	0x03BC2858 BL 0x1C16CF4
	0x03BC285C ADRP X0, 0x59B000
	0x03BC2860 LDR X0, [X0 + 0x5D8]
	0x03BC2864 BL 0x1C16CF4
	0x03BC2868 ADRP X0, 0x59B000
	0x03BC286C LDR X0, [X0 + 0x5D0]
	0x03BC2870 BL 0x1C16CF4
	0x03BC2874 ADRP X0, 0x59B000
	0x03BC2878 LDR X0, [X0 + 0x460]
	0x03BC287C BL 0x1C16CF4
	0x03BC2880 MOVZ W8, 0x1
	0x03BC2884 STRB W8, [X20 + 0xDC9]
	0x03BC2888 LDR X0, [X24]
	0x03BC288C LDR X20, [X19 + 0x118]
	0x03BC2890 BL 0x1C16F10
	0x03BC2894 LDR X2, [X21]
	0x03BC2898 MOV X1, X19
	0x03BC289C MOV X3, X31
	0x03BC28A0 MOV X21, X0
	0x03BC28A4 BL 0x2A719B8
	0x03BC28A8 LDR X0, [X24]
	0x03BC28AC BL 0x1C16F10
	0x03BC28B0 LDR X2, [X22]
	0x03BC28B4 MOV X1, X19
	0x03BC28B8 MOV X3, X31
	0x03BC28BC MOV X22, X0
	0x03BC28C0 BL 0x2A719B8
	0x03BC28C4 LDR X0, [X23]
	0x03BC28C8 LDR W8, [X0 + 0xE0]
	0x03BC28CC CBNZ W8, 0x3BC28D4
	0x03BC28D0 BL 0x1C16DFC
	0x03BC28D4 MOV X0, X20
	0x03BC28D8 MOV X1, X21
	0x03BC28DC MOV X2, X22
	0x03BC28E0 LDP X20, X19, [X31 + 0x30]
	0x03BC28E4 LDP X22, X21, [X31 + 0x20]
	0x03BC28E8 LDP X24, X23, [X31 + 0x10]
	0x03BC28EC LDR X30, [X31], #0x40
	0x03BC28F0 B 0x3BC8490
	0x03BC28F4 STR X30, [X31 - 0x40]!
	0x03BC28F8 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x821000
	009 Move X24, 0x536000
	010 Move X21, 0x59C000
	011 Move X22, 0x59C000
	012 Move X23, 0x59C000
	013 Move W8, [X20+3511]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1376]
	016 Move X22, [X22+1384]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x536000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1384]
	028 Call 0x1C17CF4
	029 Move X0, 0x59C000
	030 Move X0, [X0+1376]
	031 Call 0x1C17CF4
	032 Move X0, 0x59C000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3511], W8
	037 Move X0, [X24]
	038 Move X20, [X19+208]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeToggleCursorLockAction()

Disassembly:
	0x03BC2ABC LDR X0, [X23]
	0x03BC2AC0 LDR W8, [X0 + 0xE0]
	0x03BC2AC4 CBNZ W8, 0x3BC2ACC
	0x03BC2AC8 BL 0x1C16DFC
	0x03BC2ACC MOV X0, X20
	0x03BC2AD0 MOV X1, X21
	0x03BC2AD4 MOV X2, X22
	0x03BC2AD8 LDP X20, X19, [X31 + 0x30]
	0x03BC2ADC LDP X22, X21, [X31 + 0x20]
	0x03BC2AE0 LDP X24, X23, [X31 + 0x10]
	0x03BC2AE4 LDR X30, [X31], #0x40
	0x03BC2AE8 B 0x3BC8490
	0x03BC2AEC STR X30, [X31 - 0x40]!
	0x03BC2AF0 STP X24, X23, [X31 + 0x10]
	0x03BC2AF4 STP X22, X21, [X31 + 0x20]
	0x03BC2AF8 STP X20, X19, [X31 + 0x30]
	0x03BC2AFC ADRP X20, 0x820000
	0x03BC2B00 ADRP X24, 0x535000
	0x03BC2B04 ADRP X21, 0x59B000
	0x03BC2B08 ADRP X22, 0x59B000
	0x03BC2B0C ADRP X23, 0x59B000
	0x03BC2B10 LDRB W8, [X20 + 0xDCA]
	0x03BC2B14 LDR X24, [X24 + 0x3D8]
	0x03BC2B18 LDR X21, [X21 + 0x5E0]
	0x03BC2B1C LDR X22, [X22 + 0x5E8]
	0x03BC2B20 LDR X23, [X23 + 0x460]
	0x03BC2B24 MOV X19, X0
	0x03BC2B28 TBNZ X8, 0x0, 0x3BC2B64
	0x03BC2B2C ADRP X0, 0x535000
	0x03BC2B30 LDR X0, [X0 + 0x3D8]
	0x03BC2B34 BL 0x1C16CF4
	0x03BC2B38 ADRP X0, 0x59B000
	0x03BC2B3C LDR X0, [X0 + 0x5E8]
	0x03BC2B40 BL 0x1C16CF4
	0x03BC2B44 ADRP X0, 0x59B000
	0x03BC2B48 LDR X0, [X0 + 0x5E0]
	0x03BC2B4C BL 0x1C16CF4
	0x03BC2B50 ADRP X0, 0x59B000
	0x03BC2B54 LDR X0, [X0 + 0x460]
	0x03BC2B58 BL 0x1C16CF4
	0x03BC2B5C MOVZ W8, 0x1
	0x03BC2B60 STRB W8, [X20 + 0xDCA]
	0x03BC2B64 LDR X0, [X24]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x821000
	008 Move X23, 0x536000
	009 Move X21, 0x59C000
	010 Move X22, 0x59C000
	011 Move W8, [X20+3512]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1392]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x536000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59C000
	024 Move X0, [X0+1392]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3512], W8
	031 Move X0, [X23]
	032 Move X20, [X19+216]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	054 Return 

Method: System.Void UnsubscribeToggleCursorLockAction()

Disassembly:
	0x03BC2A10 STP X22, X21, [X31 + 0x20]
	0x03BC2A14 STP X20, X19, [X31 + 0x30]
	0x03BC2A18 ADRP X20, 0x820000
	0x03BC2A1C ADRP X24, 0x535000
	0x03BC2A20 ADRP X21, 0x59B000
	0x03BC2A24 ADRP X22, 0x59B000
	0x03BC2A28 ADRP X23, 0x59B000
	0x03BC2A2C LDRB W8, [X20 + 0xDCB]
	0x03BC2A30 LDR X24, [X24 + 0x3D8]
	0x03BC2A34 LDR X21, [X21 + 0x5E0]
	0x03BC2A38 LDR X22, [X22 + 0x5E8]
	0x03BC2A3C LDR X23, [X23 + 0x460]
	0x03BC2A40 MOV X19, X0
	0x03BC2A44 TBNZ X8, 0x0, 0x3BC2A80
	0x03BC2A48 ADRP X0, 0x535000
	0x03BC2A4C LDR X0, [X0 + 0x3D8]
	0x03BC2A50 BL 0x1C16CF4
	0x03BC2A54 ADRP X0, 0x59B000
	0x03BC2A58 LDR X0, [X0 + 0x5E8]
	0x03BC2A5C BL 0x1C16CF4
	0x03BC2A60 ADRP X0, 0x59B000
	0x03BC2A64 LDR X0, [X0 + 0x5E0]
	0x03BC2A68 BL 0x1C16CF4
	0x03BC2A6C ADRP X0, 0x59B000
	0x03BC2A70 LDR X0, [X0 + 0x460]
	0x03BC2A74 BL 0x1C16CF4
	0x03BC2A78 MOVZ W8, 0x1
	0x03BC2A7C STRB W8, [X20 + 0xDCB]
	0x03BC2A80 LDR X0, [X24]
	0x03BC2A84 LDR X20, [X19 + 0x120]
	0x03BC2A88 BL 0x1C16F10
	0x03BC2A8C LDR X2, [X21]
	0x03BC2A90 MOV X1, X19
	0x03BC2A94 MOV X3, X31
	0x03BC2A98 MOV X21, X0
	0x03BC2A9C BL 0x2A719B8
	0x03BC2AA0 LDR X0, [X24]
	0x03BC2AA4 BL 0x1C16F10
	0x03BC2AA8 LDR X2, [X22]
	0x03BC2AAC MOV X1, X19
	0x03BC2AB0 MOV X3, X31
	0x03BC2AB4 MOV X22, X0
	0x03BC2AB8 BL 0x2A719B8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x821000
	008 Move X23, 0x536000
	009 Move X21, 0x59C000
	010 Move X22, 0x59C000
	011 Move W8, [X20+3513]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1392]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x536000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59C000
	024 Move X0, [X0+1392]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3513], W8
	031 Move X0, [X23]
	032 Move X20, [X19+216]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	054 Return 

Method: System.Void SubscribeToggleDevicePositionTargetAction()

Disassembly:
	0x03BC2C44 LDR X0, [X0 + 0x3D8]
	0x03BC2C48 BL 0x1C16CF4
	0x03BC2C4C ADRP X0, 0x59B000
	0x03BC2C50 LDR X0, [X0 + 0x5F8]
	0x03BC2C54 BL 0x1C16CF4
	0x03BC2C58 ADRP X0, 0x59B000
	0x03BC2C5C LDR X0, [X0 + 0x5F0]
	0x03BC2C60 BL 0x1C16CF4
	0x03BC2C64 ADRP X0, 0x59B000
	0x03BC2C68 LDR X0, [X0 + 0x460]
	0x03BC2C6C BL 0x1C16CF4
	0x03BC2C70 MOVZ W8, 0x1
	0x03BC2C74 STRB W8, [X20 + 0xDCD]
	0x03BC2C78 LDR X0, [X24]
	0x03BC2C7C LDR X20, [X19 + 0x128]
	0x03BC2C80 BL 0x1C16F10
	0x03BC2C84 LDR X2, [X21]
	0x03BC2C88 MOV X1, X19
	0x03BC2C8C MOV X3, X31
	0x03BC2C90 MOV X21, X0
	0x03BC2C94 BL 0x2A719B8
	0x03BC2C98 LDR X0, [X24]
	0x03BC2C9C BL 0x1C16F10
	0x03BC2CA0 LDR X2, [X22]
	0x03BC2CA4 MOV X1, X19
	0x03BC2CA8 MOV X3, X31
	0x03BC2CAC MOV X22, X0
	0x03BC2CB0 BL 0x2A719B8
	0x03BC2CB4 LDR X0, [X23]
	0x03BC2CB8 LDR W8, [X0 + 0xE0]
	0x03BC2CBC CBNZ W8, 0x3BC2CC4
	0x03BC2CC0 BL 0x1C16DFC
	0x03BC2CC4 MOV X0, X20
	0x03BC2CC8 MOV X1, X21
	0x03BC2CCC MOV X2, X22
	0x03BC2CD0 LDP X20, X19, [X31 + 0x30]
	0x03BC2CD4 LDP X22, X21, [X31 + 0x20]
	0x03BC2CD8 LDP X24, X23, [X31 + 0x10]
	0x03BC2CDC LDR X30, [X31], #0x40
	0x03BC2CE0 B 0x3BC8490
	0x03BC2CE4 STR X30, [X31 - 0x40]!
	0x03BC2CE8 STP X24, X23, [X31 + 0x10]
	0x03BC2CEC STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x821000
	008 Move X23, 0x536000
	009 Move X21, 0x59C000
	010 Move X22, 0x59C000
	011 Move W8, [X20+3514]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1400]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x536000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59C000
	024 Move X0, [X0+1400]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3514], W8
	031 Move X0, [X23]
	032 Move X20, [X19+224]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	054 Return 

Method: System.Void UnsubscribeToggleDevicePositionTargetAction()

Disassembly:
	0x03BC2B98 MOV X22, X0
	0x03BC2B9C BL 0x2A719B8
	0x03BC2BA0 LDR X0, [X23]
	0x03BC2BA4 LDR W8, [X0 + 0xE0]
	0x03BC2BA8 CBNZ W8, 0x3BC2BB0
	0x03BC2BAC BL 0x1C16DFC
	0x03BC2BB0 MOV X0, X20
	0x03BC2BB4 MOV X1, X21
	0x03BC2BB8 MOV X2, X22
	0x03BC2BBC LDP X20, X19, [X31 + 0x30]
	0x03BC2BC0 LDP X22, X21, [X31 + 0x20]
	0x03BC2BC4 LDP X24, X23, [X31 + 0x10]
	0x03BC2BC8 LDR X30, [X31], #0x40
	0x03BC2BCC B 0x3BC8368
	0x03BC2BD0 LDR X0, [X0 + 0x128]
	0x03BC2BD4 RET
	0x03BC2BD8 STR X30, [X31 - 0x20]!
	0x03BC2BDC STP X20, X19, [X31 + 0x10]
	0x03BC2BE0 MOV X19, X1
	0x03BC2BE4 MOV X20, X0
	0x03BC2BE8 BL 0x3BC2C00
	0x03BC2BEC STR X19, [X20 + 0x128]
	0x03BC2BF0 MOV X0, X20
	0x03BC2BF4 LDP X20, X19, [X31 + 0x10]
	0x03BC2BF8 LDR X30, [X31], #0x20
	0x03BC2BFC B 0x3BC2CE4
	0x03BC2C00 STR X30, [X31 - 0x40]!
	0x03BC2C04 STP X24, X23, [X31 + 0x10]
	0x03BC2C08 STP X22, X21, [X31 + 0x20]
	0x03BC2C0C STP X20, X19, [X31 + 0x30]
	0x03BC2C10 ADRP X20, 0x820000
	0x03BC2C14 ADRP X24, 0x535000
	0x03BC2C18 ADRP X21, 0x59B000
	0x03BC2C1C ADRP X22, 0x59B000
	0x03BC2C20 ADRP X23, 0x59B000
	0x03BC2C24 LDRB W8, [X20 + 0xDCD]
	0x03BC2C28 LDR X24, [X24 + 0x3D8]
	0x03BC2C2C LDR X21, [X21 + 0x5F0]
	0x03BC2C30 LDR X22, [X22 + 0x5F8]
	0x03BC2C34 LDR X23, [X23 + 0x460]
	0x03BC2C38 MOV X19, X0
	0x03BC2C3C TBNZ X8, 0x0, 0x3BC2C78
	0x03BC2C40 ADRP X0, 0x535000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x821000
	008 Move X23, 0x536000
	009 Move X21, 0x59C000
	010 Move X22, 0x59C000
	011 Move W8, [X20+3515]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1400]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x536000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59C000
	024 Move X0, [X0+1400]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3515], W8
	031 Move X0, [X23]
	032 Move X20, [X19+224]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	054 Return 

Method: System.Void SubscribeTogglePrimary2DAxisTargetAction()

Disassembly:
	0x03BC2DCC RET
	0x03BC2DD0 STR X30, [X31 - 0x20]!
	0x03BC2DD4 STP X20, X19, [X31 + 0x10]
	0x03BC2DD8 MOV X19, X1
	0x03BC2DDC MOV X20, X0
	0x03BC2DE0 BL 0x3BC2DF8
	0x03BC2DE4 STR X19, [X20 + 0x130]
	0x03BC2DE8 MOV X0, X20
	0x03BC2DEC LDP X20, X19, [X31 + 0x10]
	0x03BC2DF0 LDR X30, [X31], #0x20
	0x03BC2DF4 B 0x3BC2EDC
	0x03BC2DF8 STR X30, [X31 - 0x40]!
	0x03BC2DFC STP X24, X23, [X31 + 0x10]
	0x03BC2E00 STP X22, X21, [X31 + 0x20]
	0x03BC2E04 STP X20, X19, [X31 + 0x30]
	0x03BC2E08 ADRP X20, 0x820000
	0x03BC2E0C ADRP X24, 0x535000
	0x03BC2E10 ADRP X21, 0x59B000
	0x03BC2E14 ADRP X22, 0x59B000
	0x03BC2E18 ADRP X23, 0x59B000
	0x03BC2E1C LDRB W8, [X20 + 0xDCF]
	0x03BC2E20 LDR X24, [X24 + 0x3D8]
	0x03BC2E24 LDR X21, [X21 + 0x600]
	0x03BC2E28 LDR X22, [X22 + 0x608]
	0x03BC2E2C LDR X23, [X23 + 0x460]
	0x03BC2E30 MOV X19, X0
	0x03BC2E34 TBNZ X8, 0x0, 0x3BC2E70
	0x03BC2E38 ADRP X0, 0x535000
	0x03BC2E3C LDR X0, [X0 + 0x3D8]
	0x03BC2E40 BL 0x1C16CF4
	0x03BC2E44 ADRP X0, 0x59B000
	0x03BC2E48 LDR X0, [X0 + 0x608]
	0x03BC2E4C BL 0x1C16CF4
	0x03BC2E50 ADRP X0, 0x59B000
	0x03BC2E54 LDR X0, [X0 + 0x600]
	0x03BC2E58 BL 0x1C16CF4
	0x03BC2E5C ADRP X0, 0x59B000
	0x03BC2E60 LDR X0, [X0 + 0x460]
	0x03BC2E64 BL 0x1C16CF4
	0x03BC2E68 MOVZ W8, 0x1
	0x03BC2E6C STRB W8, [X20 + 0xDCF]
	0x03BC2E70 LDR X0, [X24]
	0x03BC2E74 LDR X20, [X19 + 0x130]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x821000
	008 Move X23, 0x536000
	009 Move X21, 0x59C000
	010 Move X22, 0x59C000
	011 Move W8, [X20+3516]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1408]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x536000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59C000
	024 Move X0, [X0+1408]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3516], W8
	031 Move X0, [X23]
	032 Move X20, [X19+232]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	054 Return 

Method: System.Void UnsubscribeTogglePrimary2DAxisTargetAction()

Disassembly:
	0x03BC2D20 TBNZ X8, 0x0, 0x3BC2D5C
	0x03BC2D24 ADRP X0, 0x535000
	0x03BC2D28 LDR X0, [X0 + 0x3D8]
	0x03BC2D2C BL 0x1C16CF4
	0x03BC2D30 ADRP X0, 0x59B000
	0x03BC2D34 LDR X0, [X0 + 0x5F8]
	0x03BC2D38 BL 0x1C16CF4
	0x03BC2D3C ADRP X0, 0x59B000
	0x03BC2D40 LDR X0, [X0 + 0x5F0]
	0x03BC2D44 BL 0x1C16CF4
	0x03BC2D48 ADRP X0, 0x59B000
	0x03BC2D4C LDR X0, [X0 + 0x460]
	0x03BC2D50 BL 0x1C16CF4
	0x03BC2D54 MOVZ W8, 0x1
	0x03BC2D58 STRB W8, [X20 + 0xDCC]
	0x03BC2D5C LDR X0, [X24]
	0x03BC2D60 LDR X20, [X19 + 0x128]
	0x03BC2D64 BL 0x1C16F10
	0x03BC2D68 LDR X2, [X21]
	0x03BC2D6C MOV X1, X19
	0x03BC2D70 MOV X3, X31
	0x03BC2D74 MOV X21, X0
	0x03BC2D78 BL 0x2A719B8
	0x03BC2D7C LDR X0, [X24]
	0x03BC2D80 BL 0x1C16F10
	0x03BC2D84 LDR X2, [X22]
	0x03BC2D88 MOV X1, X19
	0x03BC2D8C MOV X3, X31
	0x03BC2D90 MOV X22, X0
	0x03BC2D94 BL 0x2A719B8
	0x03BC2D98 LDR X0, [X23]
	0x03BC2D9C LDR W8, [X0 + 0xE0]
	0x03BC2DA0 CBNZ W8, 0x3BC2DA8
	0x03BC2DA4 BL 0x1C16DFC
	0x03BC2DA8 MOV X0, X20
	0x03BC2DAC MOV X1, X21
	0x03BC2DB0 MOV X2, X22
	0x03BC2DB4 LDP X20, X19, [X31 + 0x30]
	0x03BC2DB8 LDP X22, X21, [X31 + 0x20]
	0x03BC2DBC LDP X24, X23, [X31 + 0x10]
	0x03BC2DC0 LDR X30, [X31], #0x40
	0x03BC2DC4 B 0x3BC8368
	0x03BC2DC8 LDR X0, [X0 + 0x130]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x821000
	008 Move X23, 0x536000
	009 Move X21, 0x59C000
	010 Move X22, 0x59C000
	011 Move W8, [X20+3517]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1408]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x536000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59C000
	024 Move X0, [X0+1408]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3517], W8
	031 Move X0, [X23]
	032 Move X20, [X19+232]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	054 Return 

Method: System.Void SubscribeToggleSecondary2DAxisTargetAction()

Disassembly:
	0x03BC2F54 LDR X0, [X24]
	0x03BC2F58 LDR X20, [X19 + 0x130]
	0x03BC2F5C BL 0x1C16F10
	0x03BC2F60 LDR X2, [X21]
	0x03BC2F64 MOV X1, X19
	0x03BC2F68 MOV X3, X31
	0x03BC2F6C MOV X21, X0
	0x03BC2F70 BL 0x2A719B8
	0x03BC2F74 LDR X0, [X24]
	0x03BC2F78 BL 0x1C16F10
	0x03BC2F7C LDR X2, [X22]
	0x03BC2F80 MOV X1, X19
	0x03BC2F84 MOV X3, X31
	0x03BC2F88 MOV X22, X0
	0x03BC2F8C BL 0x2A719B8
	0x03BC2F90 LDR X0, [X23]
	0x03BC2F94 LDR W8, [X0 + 0xE0]
	0x03BC2F98 CBNZ W8, 0x3BC2FA0
	0x03BC2F9C BL 0x1C16DFC
	0x03BC2FA0 MOV X0, X20
	0x03BC2FA4 MOV X1, X21
	0x03BC2FA8 MOV X2, X22
	0x03BC2FAC LDP X20, X19, [X31 + 0x30]
	0x03BC2FB0 LDP X22, X21, [X31 + 0x20]
	0x03BC2FB4 LDP X24, X23, [X31 + 0x10]
	0x03BC2FB8 LDR X30, [X31], #0x40
	0x03BC2FBC B 0x3BC8368
	0x03BC2FC0 LDR X0, [X0 + 0x138]
	0x03BC2FC4 RET
	0x03BC2FC8 STR X30, [X31 - 0x20]!
	0x03BC2FCC STP X20, X19, [X31 + 0x10]
	0x03BC2FD0 MOV X19, X1
	0x03BC2FD4 MOV X20, X0
	0x03BC2FD8 BL 0x3BC2FF0
	0x03BC2FDC STR X19, [X20 + 0x138]
	0x03BC2FE0 MOV X0, X20
	0x03BC2FE4 LDP X20, X19, [X31 + 0x10]
	0x03BC2FE8 LDR X30, [X31], #0x20
	0x03BC2FEC B 0x3BC30D4
	0x03BC2FF0 STR X30, [X31 - 0x40]!
	0x03BC2FF4 STP X24, X23, [X31 + 0x10]
	0x03BC2FF8 STP X22, X21, [X31 + 0x20]
	0x03BC2FFC STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x821000
	008 Move X23, 0x536000
	009 Move X21, 0x59C000
	010 Move X22, 0x59C000
	011 Move W8, [X20+3518]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1416]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x536000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59C000
	024 Move X0, [X0+1416]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3518], W8
	031 Move X0, [X23]
	032 Move X20, [X19+240]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	054 Return 

Method: System.Void UnsubscribeToggleSecondary2DAxisTargetAction()

Disassembly:
	0x03BC2EA8 BL 0x2A719B8
	0x03BC2EAC LDR X0, [X23]
	0x03BC2EB0 LDR W8, [X0 + 0xE0]
	0x03BC2EB4 CBNZ W8, 0x3BC2EBC
	0x03BC2EB8 BL 0x1C16DFC
	0x03BC2EBC MOV X0, X20
	0x03BC2EC0 MOV X1, X21
	0x03BC2EC4 MOV X2, X22
	0x03BC2EC8 LDP X20, X19, [X31 + 0x30]
	0x03BC2ECC LDP X22, X21, [X31 + 0x20]
	0x03BC2ED0 LDP X24, X23, [X31 + 0x10]
	0x03BC2ED4 LDR X30, [X31], #0x40
	0x03BC2ED8 B 0x3BC8490
	0x03BC2EDC STR X30, [X31 - 0x40]!
	0x03BC2EE0 STP X24, X23, [X31 + 0x10]
	0x03BC2EE4 STP X22, X21, [X31 + 0x20]
	0x03BC2EE8 STP X20, X19, [X31 + 0x30]
	0x03BC2EEC ADRP X20, 0x820000
	0x03BC2EF0 ADRP X24, 0x535000
	0x03BC2EF4 ADRP X21, 0x59B000
	0x03BC2EF8 ADRP X22, 0x59B000
	0x03BC2EFC ADRP X23, 0x59B000
	0x03BC2F00 LDRB W8, [X20 + 0xDCE]
	0x03BC2F04 LDR X24, [X24 + 0x3D8]
	0x03BC2F08 LDR X21, [X21 + 0x600]
	0x03BC2F0C LDR X22, [X22 + 0x608]
	0x03BC2F10 LDR X23, [X23 + 0x460]
	0x03BC2F14 MOV X19, X0
	0x03BC2F18 TBNZ X8, 0x0, 0x3BC2F54
	0x03BC2F1C ADRP X0, 0x535000
	0x03BC2F20 LDR X0, [X0 + 0x3D8]
	0x03BC2F24 BL 0x1C16CF4
	0x03BC2F28 ADRP X0, 0x59B000
	0x03BC2F2C LDR X0, [X0 + 0x608]
	0x03BC2F30 BL 0x1C16CF4
	0x03BC2F34 ADRP X0, 0x59B000
	0x03BC2F38 LDR X0, [X0 + 0x600]
	0x03BC2F3C BL 0x1C16CF4
	0x03BC2F40 ADRP X0, 0x59B000
	0x03BC2F44 LDR X0, [X0 + 0x460]
	0x03BC2F48 BL 0x1C16CF4
	0x03BC2F4C MOVZ W8, 0x1
	0x03BC2F50 STRB W8, [X20 + 0xDCE]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x821000
	008 Move X23, 0x536000
	009 Move X21, 0x59C000
	010 Move X22, 0x59C000
	011 Move W8, [X20+3519]
	012 Move X23, [X23+984]
	013 Move X21, [X21+1416]
	014 Move X22, [X22+1120]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x536000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x59C000
	024 Move X0, [X0+1416]
	025 Call 0x1C17CF4
	026 Move X0, 0x59C000
	027 Move X0, [X0+1120]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3519], W8
	031 Move X0, [X23]
	032 Move X20, [X19+240]
	033 Call 0x1C17F10
	034 Move X2, [X21]
	035 Move X1, X19
	036 Move X3, X31
	037 Move X21, X0
	038 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	054 Return 

Method: System.Void SubscribeAxis2DAction()

Disassembly:
	0x03BC3114 ADRP X0, 0x534000
	0x03BC3118 LDR X0, [X0 + 0x3D8]
	0x03BC311C BL 0x1C16CF4
	0x03BC3120 ADRP X0, 0x59A000
	0x03BC3124 LDR X0, [X0 + 0x618]
	0x03BC3128 BL 0x1C16CF4
	0x03BC312C ADRP X0, 0x59A000
	0x03BC3130 LDR X0, [X0 + 0x610]
	0x03BC3134 BL 0x1C16CF4
	0x03BC3138 ADRP X0, 0x59A000
	0x03BC313C LDR X0, [X0 + 0x460]
	0x03BC3140 BL 0x1C16CF4
	0x03BC3144 MOVZ W8, 0x1
	0x03BC3148 STRB W8, [X20 + 0xDD0]
	0x03BC314C LDR X0, [X24]
	0x03BC3150 LDR X20, [X19 + 0x138]
	0x03BC3154 BL 0x1C16F10
	0x03BC3158 LDR X2, [X21]
	0x03BC315C MOV X1, X19
	0x03BC3160 MOV X3, X31
	0x03BC3164 MOV X21, X0
	0x03BC3168 BL 0x2A719B8
	0x03BC316C LDR X0, [X24]
	0x03BC3170 BL 0x1C16F10
	0x03BC3174 LDR X2, [X22]
	0x03BC3178 MOV X1, X19
	0x03BC317C MOV X3, X31
	0x03BC3180 MOV X22, X0
	0x03BC3184 BL 0x2A719B8
	0x03BC3188 LDR X0, [X23]
	0x03BC318C LDR W8, [X0 + 0xE0]
	0x03BC3190 CBNZ W8, 0x3BC3198
	0x03BC3194 BL 0x1C16DFC
	0x03BC3198 MOV X0, X20
	0x03BC319C MOV X1, X21
	0x03BC31A0 MOV X2, X22
	0x03BC31A4 LDP X20, X19, [X31 + 0x30]
	0x03BC31A8 LDP X22, X21, [X31 + 0x20]
	0x03BC31AC LDP X24, X23, [X31 + 0x10]
	0x03BC31B0 LDR X30, [X31], #0x40
	0x03BC31B4 B 0x3BC8368
	0x03BC31B8 LDR X0, [X0 + 0x140]
	0x03BC31BC RET
	0x03BC31C0 STR X30, [X31 - 0x20]!
	0x03BC31C4 STP X20, X19, [X31 + 0x10]
	0x03BC31C8 MOV X19, X1
	0x03BC31CC MOV X20, X0
	0x03BC31D0 BL 0x3BC31E8
	0x03BC31D4 STR X19, [X20 + 0x140]
	0x03BC31D8 MOV X0, X20
	0x03BC31DC LDP X20, X19, [X31 + 0x10]
	0x03BC31E0 LDR X30, [X31], #0x20
	0x03BC31E4 B 0x3BC32CC
	0x03BC31E8 STR X30, [X31 - 0x40]!
	0x03BC31EC STP X24, X23, [X31 + 0x10]
	0x03BC31F0 STP X22, X21, [X31 + 0x20]
	0x03BC31F4 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x820000
	009 Move X24, 0x535000
	010 Move X21, 0x59B000
	011 Move X22, 0x59B000
	012 Move X23, 0x59B000
	013 Move W8, [X20+3520]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1424]
	016 Move X22, [X22+1432]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x535000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59B000
	027 Move X0, [X0+1432]
	028 Call 0x1C17CF4
	029 Move X0, 0x59B000
	030 Move X0, [X0+1424]
	031 Call 0x1C17CF4
	032 Move X0, 0x59B000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3520], W8
	037 Move X0, [X24]
	038 Move X20, [X19+248]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeAxis2DAction()

Disassembly:
	0x03BC3030 ADRP X0, 0x534000
	0x03BC3034 LDR X0, [X0 + 0x3D8]
	0x03BC3038 BL 0x1C16CF4
	0x03BC303C ADRP X0, 0x59A000
	0x03BC3040 LDR X0, [X0 + 0x618]
	0x03BC3044 BL 0x1C16CF4
	0x03BC3048 ADRP X0, 0x59A000
	0x03BC304C LDR X0, [X0 + 0x610]
	0x03BC3050 BL 0x1C16CF4
	0x03BC3054 ADRP X0, 0x59A000
	0x03BC3058 LDR X0, [X0 + 0x460]
	0x03BC305C BL 0x1C16CF4
	0x03BC3060 MOVZ W8, 0x1
	0x03BC3064 STRB W8, [X20 + 0xDD1]
	0x03BC3068 LDR X0, [X24]
	0x03BC306C LDR X20, [X19 + 0x138]
	0x03BC3070 BL 0x1C16F10
	0x03BC3074 LDR X2, [X21]
	0x03BC3078 MOV X1, X19
	0x03BC307C MOV X3, X31
	0x03BC3080 MOV X21, X0
	0x03BC3084 BL 0x2A719B8
	0x03BC3088 LDR X0, [X24]
	0x03BC308C BL 0x1C16F10
	0x03BC3090 LDR X2, [X22]
	0x03BC3094 MOV X1, X19
	0x03BC3098 MOV X3, X31
	0x03BC309C MOV X22, X0
	0x03BC30A0 BL 0x2A719B8
	0x03BC30A4 LDR X0, [X23]
	0x03BC30A8 LDR W8, [X0 + 0xE0]
	0x03BC30AC CBNZ W8, 0x3BC30B4
	0x03BC30B0 BL 0x1C16DFC
	0x03BC30B4 MOV X0, X20
	0x03BC30B8 MOV X1, X21
	0x03BC30BC MOV X2, X22
	0x03BC30C0 LDP X20, X19, [X31 + 0x30]
	0x03BC30C4 LDP X22, X21, [X31 + 0x20]
	0x03BC30C8 LDP X24, X23, [X31 + 0x10]
	0x03BC30CC LDR X30, [X31], #0x40
	0x03BC30D0 B 0x3BC8490
	0x03BC30D4 STR X30, [X31 - 0x40]!
	0x03BC30D8 STP X24, X23, [X31 + 0x10]
	0x03BC30DC STP X22, X21, [X31 + 0x20]
	0x03BC30E0 STP X20, X19, [X31 + 0x30]
	0x03BC30E4 ADRP X20, 0x81F000
	0x03BC30E8 ADRP X24, 0x534000
	0x03BC30EC ADRP X21, 0x59A000
	0x03BC30F0 ADRP X22, 0x59A000
	0x03BC30F4 ADRP X23, 0x59A000
	0x03BC30F8 LDRB W8, [X20 + 0xDD0]
	0x03BC30FC LDR X24, [X24 + 0x3D8]
	0x03BC3100 LDR X21, [X21 + 0x610]
	0x03BC3104 LDR X22, [X22 + 0x618]
	0x03BC3108 LDR X23, [X23 + 0x460]
	0x03BC310C MOV X19, X0
	0x03BC3110 TBNZ X8, 0x0, 0x3BC314C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x820000
	009 Move X24, 0x535000
	010 Move X21, 0x59B000
	011 Move X22, 0x59B000
	012 Move X23, 0x59B000
	013 Move W8, [X20+3521]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1424]
	016 Move X22, [X22+1432]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x535000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59B000
	027 Move X0, [X0+1432]
	028 Call 0x1C17CF4
	029 Move X0, 0x59B000
	030 Move X0, [X0+1424]
	031 Call 0x1C17CF4
	032 Move X0, 0x59B000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3521], W8
	037 Move X0, [X24]
	038 Move X20, [X19+248]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeRestingHandAxis2DAction()

Disassembly:
	0x03BC330C ADRP X0, 0x534000
	0x03BC3310 LDR X0, [X0 + 0x3D8]
	0x03BC3314 BL 0x1C16CF4
	0x03BC3318 ADRP X0, 0x59A000
	0x03BC331C LDR X0, [X0 + 0x628]
	0x03BC3320 BL 0x1C16CF4
	0x03BC3324 ADRP X0, 0x59A000
	0x03BC3328 LDR X0, [X0 + 0x620]
	0x03BC332C BL 0x1C16CF4
	0x03BC3330 ADRP X0, 0x59A000
	0x03BC3334 LDR X0, [X0 + 0x460]
	0x03BC3338 BL 0x1C16CF4
	0x03BC333C MOVZ W8, 0x1
	0x03BC3340 STRB W8, [X20 + 0xDD2]
	0x03BC3344 LDR X0, [X24]
	0x03BC3348 LDR X20, [X19 + 0x140]
	0x03BC334C BL 0x1C16F10
	0x03BC3350 LDR X2, [X21]
	0x03BC3354 MOV X1, X19
	0x03BC3358 MOV X3, X31
	0x03BC335C MOV X21, X0
	0x03BC3360 BL 0x2A719B8
	0x03BC3364 LDR X0, [X24]
	0x03BC3368 BL 0x1C16F10
	0x03BC336C LDR X2, [X22]
	0x03BC3370 MOV X1, X19
	0x03BC3374 MOV X3, X31
	0x03BC3378 MOV X22, X0
	0x03BC337C BL 0x2A719B8
	0x03BC3380 LDR X0, [X23]
	0x03BC3384 LDR W8, [X0 + 0xE0]
	0x03BC3388 CBNZ W8, 0x3BC3390
	0x03BC338C BL 0x1C16DFC
	0x03BC3390 MOV X0, X20
	0x03BC3394 MOV X1, X21
	0x03BC3398 MOV X2, X22
	0x03BC339C LDP X20, X19, [X31 + 0x30]
	0x03BC33A0 LDP X22, X21, [X31 + 0x20]
	0x03BC33A4 LDP X24, X23, [X31 + 0x10]
	0x03BC33A8 LDR X30, [X31], #0x40
	0x03BC33AC B 0x3BC8368
	0x03BC33B0 LDR X0, [X0 + 0x148]
	0x03BC33B4 RET
	0x03BC33B8 STR X30, [X31 - 0x20]!
	0x03BC33BC STP X20, X19, [X31 + 0x10]
	0x03BC33C0 MOV X19, X1
	0x03BC33C4 MOV X20, X0
	0x03BC33C8 BL 0x3BC33E0
	0x03BC33CC STR X19, [X20 + 0x148]
	0x03BC33D0 MOV X0, X20
	0x03BC33D4 LDP X20, X19, [X31 + 0x10]
	0x03BC33D8 LDR X30, [X31], #0x20
	0x03BC33DC B 0x3BC34C4
	0x03BC33E0 STR X30, [X31 - 0x40]!
	0x03BC33E4 STP X24, X23, [X31 + 0x10]
	0x03BC33E8 STP X22, X21, [X31 + 0x20]
	0x03BC33EC STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x820000
	009 Move X24, 0x535000
	010 Move X21, 0x59B000
	011 Move X22, 0x59B000
	012 Move X23, 0x59B000
	013 Move W8, [X20+3522]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1440]
	016 Move X22, [X22+1448]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x535000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59B000
	027 Move X0, [X0+1448]
	028 Call 0x1C17CF4
	029 Move X0, 0x59B000
	030 Move X0, [X0+1440]
	031 Call 0x1C17CF4
	032 Move X0, 0x59B000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3522], W8
	037 Move X0, [X24]
	038 Move X20, [X19+256]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeRestingHandAxis2DAction()

Disassembly:
	0x03BC3228 ADRP X0, 0x534000
	0x03BC322C LDR X0, [X0 + 0x3D8]
	0x03BC3230 BL 0x1C16CF4
	0x03BC3234 ADRP X0, 0x59A000
	0x03BC3238 LDR X0, [X0 + 0x628]
	0x03BC323C BL 0x1C16CF4
	0x03BC3240 ADRP X0, 0x59A000
	0x03BC3244 LDR X0, [X0 + 0x620]
	0x03BC3248 BL 0x1C16CF4
	0x03BC324C ADRP X0, 0x59A000
	0x03BC3250 LDR X0, [X0 + 0x460]
	0x03BC3254 BL 0x1C16CF4
	0x03BC3258 MOVZ W8, 0x1
	0x03BC325C STRB W8, [X20 + 0xDD3]
	0x03BC3260 LDR X0, [X24]
	0x03BC3264 LDR X20, [X19 + 0x140]
	0x03BC3268 BL 0x1C16F10
	0x03BC326C LDR X2, [X21]
	0x03BC3270 MOV X1, X19
	0x03BC3274 MOV X3, X31
	0x03BC3278 MOV X21, X0
	0x03BC327C BL 0x2A719B8
	0x03BC3280 LDR X0, [X24]
	0x03BC3284 BL 0x1C16F10
	0x03BC3288 LDR X2, [X22]
	0x03BC328C MOV X1, X19
	0x03BC3290 MOV X3, X31
	0x03BC3294 MOV X22, X0
	0x03BC3298 BL 0x2A719B8
	0x03BC329C LDR X0, [X23]
	0x03BC32A0 LDR W8, [X0 + 0xE0]
	0x03BC32A4 CBNZ W8, 0x3BC32AC
	0x03BC32A8 BL 0x1C16DFC
	0x03BC32AC MOV X0, X20
	0x03BC32B0 MOV X1, X21
	0x03BC32B4 MOV X2, X22
	0x03BC32B8 LDP X20, X19, [X31 + 0x30]
	0x03BC32BC LDP X22, X21, [X31 + 0x20]
	0x03BC32C0 LDP X24, X23, [X31 + 0x10]
	0x03BC32C4 LDR X30, [X31], #0x40
	0x03BC32C8 B 0x3BC8490
	0x03BC32CC STR X30, [X31 - 0x40]!
	0x03BC32D0 STP X24, X23, [X31 + 0x10]
	0x03BC32D4 STP X22, X21, [X31 + 0x20]
	0x03BC32D8 STP X20, X19, [X31 + 0x30]
	0x03BC32DC ADRP X20, 0x81F000
	0x03BC32E0 ADRP X24, 0x534000
	0x03BC32E4 ADRP X21, 0x59A000
	0x03BC32E8 ADRP X22, 0x59A000
	0x03BC32EC ADRP X23, 0x59A000
	0x03BC32F0 LDRB W8, [X20 + 0xDD2]
	0x03BC32F4 LDR X24, [X24 + 0x3D8]
	0x03BC32F8 LDR X21, [X21 + 0x620]
	0x03BC32FC LDR X22, [X22 + 0x628]
	0x03BC3300 LDR X23, [X23 + 0x460]
	0x03BC3304 MOV X19, X0
	0x03BC3308 TBNZ X8, 0x0, 0x3BC3344

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x820000
	009 Move X24, 0x535000
	010 Move X21, 0x59B000
	011 Move X22, 0x59B000
	012 Move X23, 0x59B000
	013 Move W8, [X20+3523]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1440]
	016 Move X22, [X22+1448]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x535000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59B000
	027 Move X0, [X0+1448]
	028 Call 0x1C17CF4
	029 Move X0, 0x59B000
	030 Move X0, [X0+1440]
	031 Call 0x1C17CF4
	032 Move X0, 0x59B000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3523], W8
	037 Move X0, [X24]
	038 Move X20, [X19+256]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeGripAction()

Disassembly:
	0x03BC3504 ADRP X0, 0x534000
	0x03BC3508 LDR X0, [X0 + 0x3D8]
	0x03BC350C BL 0x1C16CF4
	0x03BC3510 ADRP X0, 0x59A000
	0x03BC3514 LDR X0, [X0 + 0x638]
	0x03BC3518 BL 0x1C16CF4
	0x03BC351C ADRP X0, 0x59A000
	0x03BC3520 LDR X0, [X0 + 0x630]
	0x03BC3524 BL 0x1C16CF4
	0x03BC3528 ADRP X0, 0x59A000
	0x03BC352C LDR X0, [X0 + 0x460]
	0x03BC3530 BL 0x1C16CF4
	0x03BC3534 MOVZ W8, 0x1
	0x03BC3538 STRB W8, [X20 + 0xDD4]
	0x03BC353C LDR X0, [X24]
	0x03BC3540 LDR X20, [X19 + 0x148]
	0x03BC3544 BL 0x1C16F10
	0x03BC3548 LDR X2, [X21]
	0x03BC354C MOV X1, X19
	0x03BC3550 MOV X3, X31
	0x03BC3554 MOV X21, X0
	0x03BC3558 BL 0x2A719B8
	0x03BC355C LDR X0, [X24]
	0x03BC3560 BL 0x1C16F10
	0x03BC3564 LDR X2, [X22]
	0x03BC3568 MOV X1, X19
	0x03BC356C MOV X3, X31
	0x03BC3570 MOV X22, X0
	0x03BC3574 BL 0x2A719B8
	0x03BC3578 LDR X0, [X23]
	0x03BC357C LDR W8, [X0 + 0xE0]
	0x03BC3580 CBNZ W8, 0x3BC3588
	0x03BC3584 BL 0x1C16DFC
	0x03BC3588 MOV X0, X20
	0x03BC358C MOV X1, X21
	0x03BC3590 MOV X2, X22
	0x03BC3594 LDP X20, X19, [X31 + 0x30]
	0x03BC3598 LDP X22, X21, [X31 + 0x20]
	0x03BC359C LDP X24, X23, [X31 + 0x10]
	0x03BC35A0 LDR X30, [X31], #0x40
	0x03BC35A4 B 0x3BC8368
	0x03BC35A8 LDR X0, [X0 + 0x150]
	0x03BC35AC RET
	0x03BC35B0 STR X30, [X31 - 0x20]!
	0x03BC35B4 STP X20, X19, [X31 + 0x10]
	0x03BC35B8 MOV X19, X1
	0x03BC35BC MOV X20, X0
	0x03BC35C0 BL 0x3BC35D8
	0x03BC35C4 STR X19, [X20 + 0x150]
	0x03BC35C8 MOV X0, X20
	0x03BC35CC LDP X20, X19, [X31 + 0x10]
	0x03BC35D0 LDR X30, [X31], #0x20
	0x03BC35D4 B 0x3BC36BC
	0x03BC35D8 STR X30, [X31 - 0x40]!
	0x03BC35DC STP X24, X23, [X31 + 0x10]
	0x03BC35E0 STP X22, X21, [X31 + 0x20]
	0x03BC35E4 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x820000
	009 Move X24, 0x535000
	010 Move X21, 0x59B000
	011 Move X22, 0x59B000
	012 Move X23, 0x59B000
	013 Move W8, [X20+3524]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1456]
	016 Move X22, [X22+1464]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x535000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59B000
	027 Move X0, [X0+1464]
	028 Call 0x1C17CF4
	029 Move X0, 0x59B000
	030 Move X0, [X0+1456]
	031 Call 0x1C17CF4
	032 Move X0, 0x59B000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3524], W8
	037 Move X0, [X24]
	038 Move X20, [X19+264]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeGripAction()

Disassembly:
	0x03BC3420 ADRP X0, 0x534000
	0x03BC3424 LDR X0, [X0 + 0x3D8]
	0x03BC3428 BL 0x1C16CF4
	0x03BC342C ADRP X0, 0x59A000
	0x03BC3430 LDR X0, [X0 + 0x638]
	0x03BC3434 BL 0x1C16CF4
	0x03BC3438 ADRP X0, 0x59A000
	0x03BC343C LDR X0, [X0 + 0x630]
	0x03BC3440 BL 0x1C16CF4
	0x03BC3444 ADRP X0, 0x59A000
	0x03BC3448 LDR X0, [X0 + 0x460]
	0x03BC344C BL 0x1C16CF4
	0x03BC3450 MOVZ W8, 0x1
	0x03BC3454 STRB W8, [X20 + 0xDD5]
	0x03BC3458 LDR X0, [X24]
	0x03BC345C LDR X20, [X19 + 0x148]
	0x03BC3460 BL 0x1C16F10
	0x03BC3464 LDR X2, [X21]
	0x03BC3468 MOV X1, X19
	0x03BC346C MOV X3, X31
	0x03BC3470 MOV X21, X0
	0x03BC3474 BL 0x2A719B8
	0x03BC3478 LDR X0, [X24]
	0x03BC347C BL 0x1C16F10
	0x03BC3480 LDR X2, [X22]
	0x03BC3484 MOV X1, X19
	0x03BC3488 MOV X3, X31
	0x03BC348C MOV X22, X0
	0x03BC3490 BL 0x2A719B8
	0x03BC3494 LDR X0, [X23]
	0x03BC3498 LDR W8, [X0 + 0xE0]
	0x03BC349C CBNZ W8, 0x3BC34A4
	0x03BC34A0 BL 0x1C16DFC
	0x03BC34A4 MOV X0, X20
	0x03BC34A8 MOV X1, X21
	0x03BC34AC MOV X2, X22
	0x03BC34B0 LDP X20, X19, [X31 + 0x30]
	0x03BC34B4 LDP X22, X21, [X31 + 0x20]
	0x03BC34B8 LDP X24, X23, [X31 + 0x10]
	0x03BC34BC LDR X30, [X31], #0x40
	0x03BC34C0 B 0x3BC8490
	0x03BC34C4 STR X30, [X31 - 0x40]!
	0x03BC34C8 STP X24, X23, [X31 + 0x10]
	0x03BC34CC STP X22, X21, [X31 + 0x20]
	0x03BC34D0 STP X20, X19, [X31 + 0x30]
	0x03BC34D4 ADRP X20, 0x81F000
	0x03BC34D8 ADRP X24, 0x534000
	0x03BC34DC ADRP X21, 0x59A000
	0x03BC34E0 ADRP X22, 0x59A000
	0x03BC34E4 ADRP X23, 0x59A000
	0x03BC34E8 LDRB W8, [X20 + 0xDD4]
	0x03BC34EC LDR X24, [X24 + 0x3D8]
	0x03BC34F0 LDR X21, [X21 + 0x630]
	0x03BC34F4 LDR X22, [X22 + 0x638]
	0x03BC34F8 LDR X23, [X23 + 0x460]
	0x03BC34FC MOV X19, X0
	0x03BC3500 TBNZ X8, 0x0, 0x3BC353C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x820000
	009 Move X24, 0x535000
	010 Move X21, 0x59B000
	011 Move X22, 0x59B000
	012 Move X23, 0x59B000
	013 Move W8, [X20+3525]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1456]
	016 Move X22, [X22+1464]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x535000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59B000
	027 Move X0, [X0+1464]
	028 Call 0x1C17CF4
	029 Move X0, 0x59B000
	030 Move X0, [X0+1456]
	031 Call 0x1C17CF4
	032 Move X0, 0x59B000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3525], W8
	037 Move X0, [X24]
	038 Move X20, [X19+264]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeTriggerAction()

Disassembly:
	0x03BC36FC ADRP X0, 0x534000
	0x03BC3700 LDR X0, [X0 + 0x3D8]
	0x03BC3704 BL 0x1C16CF4
	0x03BC3708 ADRP X0, 0x59A000
	0x03BC370C LDR X0, [X0 + 0x648]
	0x03BC3710 BL 0x1C16CF4
	0x03BC3714 ADRP X0, 0x59A000
	0x03BC3718 LDR X0, [X0 + 0x640]
	0x03BC371C BL 0x1C16CF4
	0x03BC3720 ADRP X0, 0x59A000
	0x03BC3724 LDR X0, [X0 + 0x460]
	0x03BC3728 BL 0x1C16CF4
	0x03BC372C MOVZ W8, 0x1
	0x03BC3730 STRB W8, [X20 + 0xDD6]
	0x03BC3734 LDR X0, [X24]
	0x03BC3738 LDR X20, [X19 + 0x150]
	0x03BC373C BL 0x1C16F10
	0x03BC3740 LDR X2, [X21]
	0x03BC3744 MOV X1, X19
	0x03BC3748 MOV X3, X31
	0x03BC374C MOV X21, X0
	0x03BC3750 BL 0x2A719B8
	0x03BC3754 LDR X0, [X24]
	0x03BC3758 BL 0x1C16F10
	0x03BC375C LDR X2, [X22]
	0x03BC3760 MOV X1, X19
	0x03BC3764 MOV X3, X31
	0x03BC3768 MOV X22, X0
	0x03BC376C BL 0x2A719B8
	0x03BC3770 LDR X0, [X23]
	0x03BC3774 LDR W8, [X0 + 0xE0]
	0x03BC3778 CBNZ W8, 0x3BC3780
	0x03BC377C BL 0x1C16DFC
	0x03BC3780 MOV X0, X20
	0x03BC3784 MOV X1, X21
	0x03BC3788 MOV X2, X22
	0x03BC378C LDP X20, X19, [X31 + 0x30]
	0x03BC3790 LDP X22, X21, [X31 + 0x20]
	0x03BC3794 LDP X24, X23, [X31 + 0x10]
	0x03BC3798 LDR X30, [X31], #0x40
	0x03BC379C B 0x3BC8368
	0x03BC37A0 LDR X0, [X0 + 0x158]
	0x03BC37A4 RET
	0x03BC37A8 STR X30, [X31 - 0x20]!
	0x03BC37AC STP X20, X19, [X31 + 0x10]
	0x03BC37B0 MOV X19, X1
	0x03BC37B4 MOV X20, X0
	0x03BC37B8 BL 0x3BC37D0
	0x03BC37BC STR X19, [X20 + 0x158]
	0x03BC37C0 MOV X0, X20
	0x03BC37C4 LDP X20, X19, [X31 + 0x10]
	0x03BC37C8 LDR X30, [X31], #0x20
	0x03BC37CC B 0x3BC38B4
	0x03BC37D0 STR X30, [X31 - 0x40]!
	0x03BC37D4 STP X24, X23, [X31 + 0x10]
	0x03BC37D8 STP X22, X21, [X31 + 0x20]
	0x03BC37DC STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x820000
	009 Move X24, 0x535000
	010 Move X21, 0x59B000
	011 Move X22, 0x59B000
	012 Move X23, 0x59B000
	013 Move W8, [X20+3526]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1472]
	016 Move X22, [X22+1480]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x535000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59B000
	027 Move X0, [X0+1480]
	028 Call 0x1C17CF4
	029 Move X0, 0x59B000
	030 Move X0, [X0+1472]
	031 Call 0x1C17CF4
	032 Move X0, 0x59B000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3526], W8
	037 Move X0, [X24]
	038 Move X20, [X19+272]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeTriggerAction()

Disassembly:
	0x03BC3618 ADRP X0, 0x534000
	0x03BC361C LDR X0, [X0 + 0x3D8]
	0x03BC3620 BL 0x1C16CF4
	0x03BC3624 ADRP X0, 0x59A000
	0x03BC3628 LDR X0, [X0 + 0x648]
	0x03BC362C BL 0x1C16CF4
	0x03BC3630 ADRP X0, 0x59A000
	0x03BC3634 LDR X0, [X0 + 0x640]
	0x03BC3638 BL 0x1C16CF4
	0x03BC363C ADRP X0, 0x59A000
	0x03BC3640 LDR X0, [X0 + 0x460]
	0x03BC3644 BL 0x1C16CF4
	0x03BC3648 MOVZ W8, 0x1
	0x03BC364C STRB W8, [X20 + 0xDD7]
	0x03BC3650 LDR X0, [X24]
	0x03BC3654 LDR X20, [X19 + 0x150]
	0x03BC3658 BL 0x1C16F10
	0x03BC365C LDR X2, [X21]
	0x03BC3660 MOV X1, X19
	0x03BC3664 MOV X3, X31
	0x03BC3668 MOV X21, X0
	0x03BC366C BL 0x2A719B8
	0x03BC3670 LDR X0, [X24]
	0x03BC3674 BL 0x1C16F10
	0x03BC3678 LDR X2, [X22]
	0x03BC367C MOV X1, X19
	0x03BC3680 MOV X3, X31
	0x03BC3684 MOV X22, X0
	0x03BC3688 BL 0x2A719B8
	0x03BC368C LDR X0, [X23]
	0x03BC3690 LDR W8, [X0 + 0xE0]
	0x03BC3694 CBNZ W8, 0x3BC369C
	0x03BC3698 BL 0x1C16DFC
	0x03BC369C MOV X0, X20
	0x03BC36A0 MOV X1, X21
	0x03BC36A4 MOV X2, X22
	0x03BC36A8 LDP X20, X19, [X31 + 0x30]
	0x03BC36AC LDP X22, X21, [X31 + 0x20]
	0x03BC36B0 LDP X24, X23, [X31 + 0x10]
	0x03BC36B4 LDR X30, [X31], #0x40
	0x03BC36B8 B 0x3BC8490
	0x03BC36BC STR X30, [X31 - 0x40]!
	0x03BC36C0 STP X24, X23, [X31 + 0x10]
	0x03BC36C4 STP X22, X21, [X31 + 0x20]
	0x03BC36C8 STP X20, X19, [X31 + 0x30]
	0x03BC36CC ADRP X20, 0x81F000
	0x03BC36D0 ADRP X24, 0x534000
	0x03BC36D4 ADRP X21, 0x59A000
	0x03BC36D8 ADRP X22, 0x59A000
	0x03BC36DC ADRP X23, 0x59A000
	0x03BC36E0 LDRB W8, [X20 + 0xDD6]
	0x03BC36E4 LDR X24, [X24 + 0x3D8]
	0x03BC36E8 LDR X21, [X21 + 0x640]
	0x03BC36EC LDR X22, [X22 + 0x648]
	0x03BC36F0 LDR X23, [X23 + 0x460]
	0x03BC36F4 MOV X19, X0
	0x03BC36F8 TBNZ X8, 0x0, 0x3BC3734

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x820000
	009 Move X24, 0x535000
	010 Move X21, 0x59B000
	011 Move X22, 0x59B000
	012 Move X23, 0x59B000
	013 Move W8, [X20+3527]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1472]
	016 Move X22, [X22+1480]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x535000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59B000
	027 Move X0, [X0+1480]
	028 Call 0x1C17CF4
	029 Move X0, 0x59B000
	030 Move X0, [X0+1472]
	031 Call 0x1C17CF4
	032 Move X0, 0x59B000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3527], W8
	037 Move X0, [X24]
	038 Move X20, [X19+272]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribePrimaryButtonAction()

Disassembly:
	0x03BC38F4 ADRP X0, 0x534000
	0x03BC38F8 LDR X0, [X0 + 0x3D8]
	0x03BC38FC BL 0x1C16CF4
	0x03BC3900 ADRP X0, 0x59A000
	0x03BC3904 LDR X0, [X0 + 0x658]
	0x03BC3908 BL 0x1C16CF4
	0x03BC390C ADRP X0, 0x59A000
	0x03BC3910 LDR X0, [X0 + 0x650]
	0x03BC3914 BL 0x1C16CF4
	0x03BC3918 ADRP X0, 0x59A000
	0x03BC391C LDR X0, [X0 + 0x460]
	0x03BC3920 BL 0x1C16CF4
	0x03BC3924 MOVZ W8, 0x1
	0x03BC3928 STRB W8, [X20 + 0xDD8]
	0x03BC392C LDR X0, [X24]
	0x03BC3930 LDR X20, [X19 + 0x158]
	0x03BC3934 BL 0x1C16F10
	0x03BC3938 LDR X2, [X21]
	0x03BC393C MOV X1, X19
	0x03BC3940 MOV X3, X31
	0x03BC3944 MOV X21, X0
	0x03BC3948 BL 0x2A719B8
	0x03BC394C LDR X0, [X24]
	0x03BC3950 BL 0x1C16F10
	0x03BC3954 LDR X2, [X22]
	0x03BC3958 MOV X1, X19
	0x03BC395C MOV X3, X31
	0x03BC3960 MOV X22, X0
	0x03BC3964 BL 0x2A719B8
	0x03BC3968 LDR X0, [X23]
	0x03BC396C LDR W8, [X0 + 0xE0]
	0x03BC3970 CBNZ W8, 0x3BC3978
	0x03BC3974 BL 0x1C16DFC
	0x03BC3978 MOV X0, X20
	0x03BC397C MOV X1, X21
	0x03BC3980 MOV X2, X22
	0x03BC3984 LDP X20, X19, [X31 + 0x30]
	0x03BC3988 LDP X22, X21, [X31 + 0x20]
	0x03BC398C LDP X24, X23, [X31 + 0x10]
	0x03BC3990 LDR X30, [X31], #0x40
	0x03BC3994 B 0x3BC8368
	0x03BC3998 LDR X0, [X0 + 0x160]
	0x03BC399C RET
	0x03BC39A0 STR X1, [X0 + 0x160]
	0x03BC39A4 RET
	0x03BC39A8 LDR X0, [X0 + 0x170]
	0x03BC39AC RET
	0x03BC39B0 LDR X0, [X0 + 0x178]
	0x03BC39B4 RET
	0x03BC39B8 STR X1, [X0 + 0x178]
	0x03BC39BC RET
	0x03BC39C0 LDR W0, [X0 + 0x180]
	0x03BC39C4 RET
	0x03BC39C8 STR W1, [X0 + 0x180]
	0x03BC39CC RET
	0x03BC39D0 LDR W0, [X0 + 0x184]
	0x03BC39D4 RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x820000
	009 Move X24, 0x535000
	010 Move X21, 0x59B000
	011 Move X22, 0x59B000
	012 Move X23, 0x59B000
	013 Move W8, [X20+3528]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1488]
	016 Move X22, [X22+1496]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x535000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59B000
	027 Move X0, [X0+1496]
	028 Call 0x1C17CF4
	029 Move X0, 0x59B000
	030 Move X0, [X0+1488]
	031 Call 0x1C17CF4
	032 Move X0, 0x59B000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3528], W8
	037 Move X0, [X24]
	038 Move X20, [X19+280]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribePrimaryButtonAction()

Disassembly:
	0x03BC3810 ADRP X0, 0x534000
	0x03BC3814 LDR X0, [X0 + 0x3D8]
	0x03BC3818 BL 0x1C16CF4
	0x03BC381C ADRP X0, 0x59A000
	0x03BC3820 LDR X0, [X0 + 0x658]
	0x03BC3824 BL 0x1C16CF4
	0x03BC3828 ADRP X0, 0x59A000
	0x03BC382C LDR X0, [X0 + 0x650]
	0x03BC3830 BL 0x1C16CF4
	0x03BC3834 ADRP X0, 0x59A000
	0x03BC3838 LDR X0, [X0 + 0x460]
	0x03BC383C BL 0x1C16CF4
	0x03BC3840 MOVZ W8, 0x1
	0x03BC3844 STRB W8, [X20 + 0xDD9]
	0x03BC3848 LDR X0, [X24]
	0x03BC384C LDR X20, [X19 + 0x158]
	0x03BC3850 BL 0x1C16F10
	0x03BC3854 LDR X2, [X21]
	0x03BC3858 MOV X1, X19
	0x03BC385C MOV X3, X31
	0x03BC3860 MOV X21, X0
	0x03BC3864 BL 0x2A719B8
	0x03BC3868 LDR X0, [X24]
	0x03BC386C BL 0x1C16F10
	0x03BC3870 LDR X2, [X22]
	0x03BC3874 MOV X1, X19
	0x03BC3878 MOV X3, X31
	0x03BC387C MOV X22, X0
	0x03BC3880 BL 0x2A719B8
	0x03BC3884 LDR X0, [X23]
	0x03BC3888 LDR W8, [X0 + 0xE0]
	0x03BC388C CBNZ W8, 0x3BC3894
	0x03BC3890 BL 0x1C16DFC
	0x03BC3894 MOV X0, X20
	0x03BC3898 MOV X1, X21
	0x03BC389C MOV X2, X22
	0x03BC38A0 LDP X20, X19, [X31 + 0x30]
	0x03BC38A4 LDP X22, X21, [X31 + 0x20]
	0x03BC38A8 LDP X24, X23, [X31 + 0x10]
	0x03BC38AC LDR X30, [X31], #0x40
	0x03BC38B0 B 0x3BC8490
	0x03BC38B4 STR X30, [X31 - 0x40]!
	0x03BC38B8 STP X24, X23, [X31 + 0x10]
	0x03BC38BC STP X22, X21, [X31 + 0x20]
	0x03BC38C0 STP X20, X19, [X31 + 0x30]
	0x03BC38C4 ADRP X20, 0x81F000
	0x03BC38C8 ADRP X24, 0x534000
	0x03BC38CC ADRP X21, 0x59A000
	0x03BC38D0 ADRP X22, 0x59A000
	0x03BC38D4 ADRP X23, 0x59A000
	0x03BC38D8 LDRB W8, [X20 + 0xDD8]
	0x03BC38DC LDR X24, [X24 + 0x3D8]
	0x03BC38E0 LDR X21, [X21 + 0x650]
	0x03BC38E4 LDR X22, [X22 + 0x658]
	0x03BC38E8 LDR X23, [X23 + 0x460]
	0x03BC38EC MOV X19, X0
	0x03BC38F0 TBNZ X8, 0x0, 0x3BC392C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x820000
	009 Move X24, 0x535000
	010 Move X21, 0x59B000
	011 Move X22, 0x59B000
	012 Move X23, 0x59B000
	013 Move W8, [X20+3529]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1488]
	016 Move X22, [X22+1496]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x535000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59B000
	027 Move X0, [X0+1496]
	028 Call 0x1C17CF4
	029 Move X0, 0x59B000
	030 Move X0, [X0+1488]
	031 Call 0x1C17CF4
	032 Move X0, 0x59B000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3529], W8
	037 Move X0, [X24]
	038 Move X20, [X19+280]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeSecondaryButtonAction()

Disassembly:
	0x03BC3AEC LDR V0, [X0 + 0x1CC]
	0x03BC3AF0 RET
	0x03BC3AF4 STR S0, [X0 + 0x1CC]
	0x03BC3AF8 RET
	0x03BC3AFC LDRB W0, [X0 + 0x1D0]
	0x03BC3B00 RET
	0x03BC3B04 AND W8, W1, 0x1
	0x03BC3B08 STRB W8, [X0 + 0x1D0]
	0x03BC3B0C RET
	0x03BC3B10 LDR W0, [X0 + 0x1D4]
	0x03BC3B14 RET
	0x03BC3B18 STR W1, [X0 + 0x1D4]
	0x03BC3B1C RET
	0x03BC3B20 LDRB W0, [X0 + 0x1D8]
	0x03BC3B24 RET
	0x03BC3B28 AND W8, W1, 0x1
	0x03BC3B2C STRB W8, [X0 + 0x1D8]
	0x03BC3B30 RET
	0x03BC3B34 LDR W0, [X0 + 0x1DC]
	0x03BC3B38 RET
	0x03BC3B3C STR W1, [X0 + 0x1DC]
	0x03BC3B40 RET
	0x03BC3B44 LDRB W0, [X0 + 0x1E0]
	0x03BC3B48 RET
	0x03BC3B4C AND W8, W1, 0x1
	0x03BC3B50 STRB W8, [X0 + 0x1E0]
	0x03BC3B54 RET
	0x03BC3B58 LDR W0, [X0 + 0x1E4]
	0x03BC3B5C RET
	0x03BC3B60 STR W1, [X0 + 0x1E4]
	0x03BC3B64 RET
	0x03BC3B68 LDRB W0, [X0 + 0x1E8]
	0x03BC3B6C RET
	0x03BC3B70 AND W8, W1, 0x1
	0x03BC3B74 STRB W8, [X0 + 0x1E8]
	0x03BC3B78 RET
	0x03BC3B7C LDRB W0, [X0 + 0x1E9]
	0x03BC3B80 RET
	0x03BC3B84 AND W8, W1, 0x1
	0x03BC3B88 STRB W8, [X0 + 0x1E9]
	0x03BC3B8C RET
	0x03BC3B90 LDR W0, [X0 + 0x1EC]
	0x03BC3B94 RET
	0x03BC3B98 STR W1, [X0 + 0x1EC]
	0x03BC3B9C RET
	0x03BC3BA0 LDRB W0, [X0 + 0x1F0]
	0x03BC3BA4 RET
	0x03BC3BA8 AND W8, W1, 0x1
	0x03BC3BAC STRB W8, [X0 + 0x1F0]
	0x03BC3BB0 RET
	0x03BC3BB4 LDR W0, [X0 + 0x1F4]
	0x03BC3BB8 RET
	0x03BC3BBC STR W1, [X0 + 0x1F4]
	0x03BC3BC0 RET
	0x03BC3BC4 LDR W0, [X0 + 0x1F8]
	0x03BC3BC8 MOVZ W1, 0x2
	0x03BC3BCC MOV X2, X31

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x820000
	009 Move X24, 0x535000
	010 Move X21, 0x59B000
	011 Move X22, 0x59B000
	012 Move X23, 0x59B000
	013 Move W8, [X20+3530]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1504]
	016 Move X22, [X22+1512]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x535000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59B000
	027 Move X0, [X0+1512]
	028 Call 0x1C17CF4
	029 Move X0, 0x59B000
	030 Move X0, [X0+1504]
	031 Call 0x1C17CF4
	032 Move X0, 0x59B000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3530], W8
	037 Move X0, [X24]
	038 Move X20, [X19+288]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeSecondaryButtonAction()

Disassembly:
	0x03BC3A08 STR S0, [X0 + 0x190]
	0x03BC3A0C RET
	0x03BC3A10 LDR V0, [X0 + 0x194]
	0x03BC3A14 RET
	0x03BC3A18 STR S0, [X0 + 0x194]
	0x03BC3A1C RET
	0x03BC3A20 LDR V0, [X0 + 0x198]
	0x03BC3A24 RET
	0x03BC3A28 STR S0, [X0 + 0x198]
	0x03BC3A2C RET
	0x03BC3A30 LDR V0, [X0 + 0x19C]
	0x03BC3A34 RET
	0x03BC3A38 STR S0, [X0 + 0x19C]
	0x03BC3A3C RET
	0x03BC3A40 LDR V0, [X0 + 0x1A0]
	0x03BC3A44 RET
	0x03BC3A48 STR S0, [X0 + 0x1A0]
	0x03BC3A4C RET
	0x03BC3A50 LDR V0, [X0 + 0x1A4]
	0x03BC3A54 RET
	0x03BC3A58 STR S0, [X0 + 0x1A4]
	0x03BC3A5C RET
	0x03BC3A60 LDR V0, [X0 + 0x1A8]
	0x03BC3A64 RET
	0x03BC3A68 STR S0, [X0 + 0x1A8]
	0x03BC3A6C RET
	0x03BC3A70 LDR V0, [X0 + 0x1AC]
	0x03BC3A74 RET
	0x03BC3A78 STR S0, [X0 + 0x1AC]
	0x03BC3A7C RET
	0x03BC3A80 LDRB W0, [X0 + 0x1B0]
	0x03BC3A84 RET
	0x03BC3A88 AND W8, W1, 0x1
	0x03BC3A8C STRB W8, [X0 + 0x1B0]
	0x03BC3A90 RET
	0x03BC3A94 LDR W0, [X0 + 0x1B4]
	0x03BC3A98 RET
	0x03BC3A9C STR W1, [X0 + 0x1B4]
	0x03BC3AA0 RET
	0x03BC3AA4 LDRB W0, [X0 + 0x1B8]
	0x03BC3AA8 RET
	0x03BC3AAC AND W8, W1, 0x1
	0x03BC3AB0 STRB W8, [X0 + 0x1B8]
	0x03BC3AB4 RET
	0x03BC3AB8 LDRB W0, [X0 + 0x1B9]
	0x03BC3ABC RET
	0x03BC3AC0 AND W8, W1, 0x1
	0x03BC3AC4 STRB W8, [X0 + 0x1B9]
	0x03BC3AC8 RET
	0x03BC3ACC LDR X0, [X0 + 0x1C0]
	0x03BC3AD0 RET
	0x03BC3AD4 STR X1, [X0 + 0x1C0]
	0x03BC3AD8 RET
	0x03BC3ADC LDR V0, [X0 + 0x1C8]
	0x03BC3AE0 RET
	0x03BC3AE4 STR S0, [X0 + 0x1C8]
	0x03BC3AE8 RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x820000
	009 Move X24, 0x535000
	010 Move X21, 0x59B000
	011 Move X22, 0x59B000
	012 Move X23, 0x59B000
	013 Move W8, [X20+3531]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1504]
	016 Move X22, [X22+1512]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x535000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59B000
	027 Move X0, [X0+1512]
	028 Call 0x1C17CF4
	029 Move X0, 0x59B000
	030 Move X0, [X0+1504]
	031 Call 0x1C17CF4
	032 Move X0, 0x59B000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3531], W8
	037 Move X0, [X24]
	038 Move X20, [X19+288]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeMenuAction()

Disassembly:
	0x03BC3CE4 LDRB W8, [X21 + 0xD7C]
	0x03BC3CE8 LDR X20, [X20 + 0x460]
	0x03BC3CEC MOV X19, X0
	0x03BC3CF0 TBNZ X8, 0x0, 0x3BC3D08
	0x03BC3CF4 ADRP X0, 0x59A000
	0x03BC3CF8 LDR X0, [X0 + 0x460]
	0x03BC3CFC BL 0x1C16CF4
	0x03BC3D00 MOVZ W8, 0x1
	0x03BC3D04 STRB W8, [X21 + 0xD7C]
	0x03BC3D08 LDR X0, [X20]
	0x03BC3D0C LDR W8, [X0 + 0xE0]
	0x03BC3D10 CBNZ W8, 0x3BC3D1C
	0x03BC3D14 BL 0x1C16DFC
	0x03BC3D18 LDR X0, [X20]
	0x03BC3D1C LDR X8, [X0 + 0xB8]
	0x03BC3D20 STR X19, [X8 + 0x18]
	0x03BC3D24 LDP X20, X19, [X31 + 0x10]
	0x03BC3D28 LDP X30, X21, [X31], #0x20
	0x03BC3D2C RET
	0x03BC3D30 LDR W0, [X0 + 0x1F8]
	0x03BC3D34 RET
	0x03BC3D38 STR W1, [X0 + 0x1F8]
	0x03BC3D3C RET
	0x03BC3D40 LDR W0, [X0 + 0x1FC]
	0x03BC3D44 RET
	0x03BC3D48 STP X30, X23, [X31 - 0x30]!
	0x03BC3D4C STP X22, X21, [X31 + 0x10]
	0x03BC3D50 STP X20, X19, [X31 + 0x20]
	0x03BC3D54 ADRP X20, 0x81F000
	0x03BC3D58 ADRP X23, 0x59A000
	0x03BC3D5C LDRB W8, [X20 + 0xD7D]
	0x03BC3D60 LDR X23, [X23 + 0x460]
	0x03BC3D64 MOV X19, X0
	0x03BC3D68 TBNZ X8, 0x0, 0x3BC3E10
	0x03BC3D6C ADRP X0, 0x530000
	0x03BC3D70 LDR X0, [X0 + 0xA28]
	0x03BC3D74 BL 0x1C16CF4
	0x03BC3D78 ADRP X0, 0x59A000
	0x03BC3D7C LDR X0, [X0 + 0x660]
	0x03BC3D80 BL 0x1C16CF4
	0x03BC3D84 ADRP X0, 0x59A000
	0x03BC3D88 LDR X0, [X0 + 0x668]
	0x03BC3D8C BL 0x1C16CF4
	0x03BC3D90 ADRP X0, 0x534000
	0x03BC3D94 LDR X0, [X0 + 0x1D0]
	0x03BC3D98 BL 0x1C16CF4
	0x03BC3D9C ADRP X0, 0x530000
	0x03BC3DA0 LDR X0, [X0 + 0x598]
	0x03BC3DA4 BL 0x1C16CF4
	0x03BC3DA8 ADRP X0, 0x59A000
	0x03BC3DAC LDR X0, [X0 + 0x460]
	0x03BC3DB0 BL 0x1C16CF4
	0x03BC3DB4 ADRP X0, 0x59A000
	0x03BC3DB8 LDR X0, [X0 + 0x670]
	0x03BC3DBC BL 0x1C16CF4
	0x03BC3DC0 ADRP X0, 0x59A000
	0x03BC3DC4 LDR X0, [X0 + 0x678]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x820000
	009 Move X24, 0x535000
	010 Move X21, 0x59B000
	011 Move X22, 0x59B000
	012 Move X23, 0x59B000
	013 Move W8, [X20+3532]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1520]
	016 Move X22, [X22+1528]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x535000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59B000
	027 Move X0, [X0+1528]
	028 Call 0x1C17CF4
	029 Move X0, 0x59B000
	030 Move X0, [X0+1520]
	031 Call 0x1C17CF4
	032 Move X0, 0x59B000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3532], W8
	037 Move X0, [X24]
	038 Move X20, [X19+296]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeMenuAction()

Disassembly:
	0x03BC3C00 B 0x3BC9AAC
	0x03BC3C04 LDR W8, [X0 + 0x1FC]
	0x03BC3C08 CBZ W8, 0x3BC3C14
	0x03BC3C0C MOV W0, W31
	0x03BC3C10 RET
	0x03BC3C14 LDR W0, [X0 + 0x1F8]
	0x03BC3C18 MOVZ W1, 0x4
	0x03BC3C1C MOV X2, X31
	0x03BC3C20 B 0x3BC9AAC
	0x03BC3C24 LDR W8, [X0 + 0x1FC]
	0x03BC3C28 CMP W8, 0x1
	0x03BC3C2C B.NE 0x3BC3C40
	0x03BC3C30 LDR W0, [X0 + 0x1F8]
	0x03BC3C34 MOVZ W1, 0x2
	0x03BC3C38 MOV X2, X31
	0x03BC3C3C B 0x3BC9AAC
	0x03BC3C40 MOV W0, W31
	0x03BC3C44 RET
	0x03BC3C48 LDR W8, [X0 + 0x1FC]
	0x03BC3C4C CMP W8, 0x1
	0x03BC3C50 B.NE 0x3BC3C64
	0x03BC3C54 LDR W0, [X0 + 0x1F8]
	0x03BC3C58 MOVZ W1, 0x4
	0x03BC3C5C MOV X2, X31
	0x03BC3C60 B 0x3BC9AAC
	0x03BC3C64 MOV W0, W31
	0x03BC3C68 RET
	0x03BC3C6C LDR W8, [X0 + 0x1F8]
	0x03BC3C70 CMP W8, 0x1
	0x03BC3C74 CSET W0, EQ
	0x03BC3C78 RET
	0x03BC3C7C STR X30, [X31 - 0x20]!
	0x03BC3C80 STP X20, X19, [X31 + 0x10]
	0x03BC3C84 ADRP X20, 0x81F000
	0x03BC3C88 ADRP X19, 0x59A000
	0x03BC3C8C LDRB W8, [X20 + 0xD7B]
	0x03BC3C90 LDR X19, [X19 + 0x460]
	0x03BC3C94 TBNZ X8, 0x0, 0x3BC3CAC
	0x03BC3C98 ADRP X0, 0x59A000
	0x03BC3C9C LDR X0, [X0 + 0x460]
	0x03BC3CA0 BL 0x1C16CF4
	0x03BC3CA4 MOVZ W8, 0x1
	0x03BC3CA8 STRB W8, [X20 + 0xD7B]
	0x03BC3CAC LDR X0, [X19]
	0x03BC3CB0 LDR W8, [X0 + 0xE0]
	0x03BC3CB4 CBNZ W8, 0x3BC3CC0
	0x03BC3CB8 BL 0x1C16DFC
	0x03BC3CBC LDR X0, [X19]
	0x03BC3CC0 LDR X8, [X0 + 0xB8]
	0x03BC3CC4 LDP X20, X19, [X31 + 0x10]
	0x03BC3CC8 LDR X0, [X8 + 0x18]
	0x03BC3CCC LDR X30, [X31], #0x20
	0x03BC3CD0 RET
	0x03BC3CD4 STP X30, X21, [X31 - 0x20]!
	0x03BC3CD8 STP X20, X19, [X31 + 0x10]
	0x03BC3CDC ADRP X21, 0x81F000
	0x03BC3CE0 ADRP X20, 0x59A000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x820000
	009 Move X24, 0x535000
	010 Move X21, 0x59B000
	011 Move X22, 0x59B000
	012 Move X23, 0x59B000
	013 Move W8, [X20+3533]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1520]
	016 Move X22, [X22+1528]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x535000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59B000
	027 Move X0, [X0+1528]
	028 Call 0x1C17CF4
	029 Move X0, 0x59B000
	030 Move X0, [X0+1520]
	031 Call 0x1C17CF4
	032 Move X0, 0x59B000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3533], W8
	037 Move X0, [X24]
	038 Move X20, [X19+296]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribePrimary2DAxisClickAction()

Disassembly:
	0x03BC3EDC MOV X0, X8
	0x03BC3EE0 BL 0x1C16DFC
	0x03BC3EE4 TBNZ X20, 0x0, 0x3BC3E9C
	0x03BC3EE8 LDRB W8, [X21 + 0xDE5]
	0x03BC3EEC CBNZ W8, 0x3BC3F04
	0x03BC3EF0 ADRP X0, 0x59A000
	0x03BC3EF4 LDR X0, [X0 + 0x460]
	0x03BC3EF8 BL 0x1C16CF4
	0x03BC3EFC MOVZ W8, 0x1
	0x03BC3F00 STRB W8, [X21 + 0xDE5]
	0x03BC3F04 LDR X0, [X23]
	0x03BC3F08 LDR W8, [X0 + 0xE0]
	0x03BC3F0C CBNZ W8, 0x3BC3F18
	0x03BC3F10 BL 0x1C16DFC
	0x03BC3F14 LDR X0, [X23]
	0x03BC3F18 LDR X8, [X22]
	0x03BC3F1C LDR X9, [X0 + 0xB8]
	0x03BC3F20 LDR W10, [X8 + 0xE0]
	0x03BC3F24 LDR X20, [X9 + 0x18]
	0x03BC3F28 CBNZ W10, 0x3BC3F34
	0x03BC3F2C MOV X0, X8
	0x03BC3F30 BL 0x1C16DFC
	0x03BC3F34 MOV X0, X20
	0x03BC3F38 MOV X1, X19
	0x03BC3F3C MOV X2, X31
	0x03BC3F40 BL 0x3C354F8
	0x03BC3F44 TBZ X0, 0x0, 0x3BC4028
	0x03BC3F48 LDR X0, [X23]
	0x03BC3F4C LDR W8, [X0 + 0xE0]
	0x03BC3F50 CBNZ W8, 0x3BC3F58
	0x03BC3F54 BL 0x1C16DFC
	0x03BC3F58 LDRB W8, [X21 + 0xDE5]
	0x03BC3F5C CBNZ W8, 0x3BC3F74
	0x03BC3F60 ADRP X0, 0x59A000
	0x03BC3F64 LDR X0, [X0 + 0x460]
	0x03BC3F68 BL 0x1C16CF4
	0x03BC3F6C MOVZ W8, 0x1
	0x03BC3F70 STRB W8, [X21 + 0xDE5]
	0x03BC3F74 LDR X0, [X23]
	0x03BC3F78 LDR W8, [X0 + 0xE0]
	0x03BC3F7C CBNZ W8, 0x3BC3F88
	0x03BC3F80 BL 0x1C16DFC
	0x03BC3F84 LDR X0, [X23]
	0x03BC3F88 LDR X8, [X0 + 0xB8]
	0x03BC3F8C MOV X0, X19
	0x03BC3F90 MOV X1, X31
	0x03BC3F94 LDR X20, [X8 + 0x18]
	0x03BC3F98 BL 0x3C32ECC
	0x03BC3F9C ADRP X8, 0x59A000
	0x03BC3FA0 LDR X8, [X8 + 0x680]
	0x03BC3FA4 MOV X2, X0
	0x03BC3FA8 MOV X1, X20
	0x03BC3FAC MOV X3, X31
	0x03BC3FB0 LDR X8, [X8]
	0x03BC3FB4 MOV X0, X8
	0x03BC3FB8 BL 0x3227BD4
	0x03BC3FBC ADRP X8, 0x530000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x820000
	009 Move X24, 0x535000
	010 Move X21, 0x59B000
	011 Move X22, 0x59B000
	012 Move X23, 0x59B000
	013 Move W8, [X20+3534]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1536]
	016 Move X22, [X22+1544]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x535000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59B000
	027 Move X0, [X0+1544]
	028 Call 0x1C17CF4
	029 Move X0, 0x59B000
	030 Move X0, [X0+1536]
	031 Call 0x1C17CF4
	032 Move X0, 0x59B000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3534], W8
	037 Move X0, [X24]
	038 Move X20, [X19+304]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribePrimary2DAxisClickAction()

Disassembly:
	0x03BC3DF8 BL 0x1C16CF4
	0x03BC3DFC ADRP X0, 0x59A000
	0x03BC3E00 LDR X0, [X0 + 0x6A0]
	0x03BC3E04 BL 0x1C16CF4
	0x03BC3E08 MOVZ W8, 0x1
	0x03BC3E0C STRB W8, [X20 + 0xD7D]
	0x03BC3E10 LDR X0, [X23]
	0x03BC3E14 LDR W8, [X0 + 0xE0]
	0x03BC3E18 CBNZ W8, 0x3BC3E20
	0x03BC3E1C BL 0x1C16DFC
	0x03BC3E20 ADRP X21, 0x81F000
	0x03BC3E24 LDRB W8, [X21 + 0xDE5]
	0x03BC3E28 CBNZ W8, 0x3BC3E40
	0x03BC3E2C ADRP X0, 0x59A000
	0x03BC3E30 LDR X0, [X0 + 0x460]
	0x03BC3E34 BL 0x1C16CF4
	0x03BC3E38 MOVZ W8, 0x1
	0x03BC3E3C STRB W8, [X21 + 0xDE5]
	0x03BC3E40 LDR X0, [X23]
	0x03BC3E44 ADRP X22, 0x530000
	0x03BC3E48 LDR W8, [X0 + 0xE0]
	0x03BC3E4C LDR X22, [X22 + 0x598]
	0x03BC3E50 CBNZ W8, 0x3BC3E5C
	0x03BC3E54 BL 0x1C16DFC
	0x03BC3E58 LDR X0, [X23]
	0x03BC3E5C LDR X8, [X22]
	0x03BC3E60 LDR X9, [X0 + 0xB8]
	0x03BC3E64 LDR W10, [X8 + 0xE0]
	0x03BC3E68 LDR X20, [X9 + 0x18]
	0x03BC3E6C CBNZ W10, 0x3BC3E78
	0x03BC3E70 MOV X0, X8
	0x03BC3E74 BL 0x1C16DFC
	0x03BC3E78 MOV X0, X20
	0x03BC3E7C MOV X1, X31
	0x03BC3E80 MOV X2, X31
	0x03BC3E84 BL 0x3C3883C
	0x03BC3E88 LDR X8, [X23]
	0x03BC3E8C MOV W20, W0
	0x03BC3E90 LDR W9, [X8 + 0xE0]
	0x03BC3E94 CBZ W9, 0x3BC3EDC
	0x03BC3E98 TBZ X20, 0x0, 0x3BC3EE8
	0x03BC3E9C ADRP X20, 0x81F000
	0x03BC3EA0 LDRB W8, [X20 + 0xDE6]
	0x03BC3EA4 CBNZ W8, 0x3BC3EBC
	0x03BC3EA8 ADRP X0, 0x59A000
	0x03BC3EAC LDR X0, [X0 + 0x460]
	0x03BC3EB0 BL 0x1C16CF4
	0x03BC3EB4 MOVZ W8, 0x1
	0x03BC3EB8 STRB W8, [X20 + 0xDE6]
	0x03BC3EBC LDR X0, [X23]
	0x03BC3EC0 LDR W8, [X0 + 0xE0]
	0x03BC3EC4 CBNZ W8, 0x3BC3ED0
	0x03BC3EC8 BL 0x1C16DFC
	0x03BC3ECC LDR X0, [X23]
	0x03BC3ED0 LDR X8, [X0 + 0xB8]
	0x03BC3ED4 STR X19, [X8 + 0x18]
	0x03BC3ED8 B 0x3BC4028

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x820000
	009 Move X24, 0x535000
	010 Move X21, 0x59B000
	011 Move X22, 0x59B000
	012 Move X23, 0x59B000
	013 Move W8, [X20+3535]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1536]
	016 Move X22, [X22+1544]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x535000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59B000
	027 Move X0, [X0+1544]
	028 Call 0x1C17CF4
	029 Move X0, 0x59B000
	030 Move X0, [X0+1536]
	031 Call 0x1C17CF4
	032 Move X0, 0x59B000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3535], W8
	037 Move X0, [X24]
	038 Move X20, [X19+304]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeSecondary2DAxisClickAction()

Disassembly:
	0x03BC40D4 BL 0x3C354F8
	0x03BC40D8 TBZ X0, 0x0, 0x3BC40EC
	0x03BC40DC LDR X8, [X19 + 0x50]
	0x03BC40E0 CBZ X8, 0x3BC4560
	0x03BC40E4 LDR X8, [X8 + 0x18]
	0x03BC40E8 STR X8, [X19 + 0x20]
	0x03BC40EC LDR X0, [X22]
	0x03BC40F0 LDR X20, [X19 + 0x20]
	0x03BC40F4 LDR W8, [X0 + 0xE0]
	0x03BC40F8 CBNZ W8, 0x3BC4100
	0x03BC40FC BL 0x1C16DFC
	0x03BC4100 MOV X0, X20
	0x03BC4104 MOV X1, X31
	0x03BC4108 MOV X2, X31
	0x03BC410C BL 0x3C3883C
	0x03BC4110 TBZ X0, 0x0, 0x3BC4148
	0x03BC4114 ADRP X8, 0x52F000
	0x03BC4118 LDR X8, [X8 + 0xA28]
	0x03BC411C LDR X0, [X8]
	0x03BC4120 LDR W8, [X0 + 0xE0]
	0x03BC4124 CBNZ W8, 0x3BC412C
	0x03BC4128 BL 0x1C16DFC
	0x03BC412C ADRP X8, 0x599000
	0x03BC4130 LDR X8, [X8 + 0x690]
	0x03BC4134 MOV X1, X19
	0x03BC4138 MOV X2, X31
	0x03BC413C LDR X0, [X8]
	0x03BC4140 BL 0x3C065A4
	0x03BC4144 B 0x3BC41A8
	0x03BC4148 LDR X0, [X19 + 0x20]
	0x03BC414C CBZ X0, 0x3BC4560
	0x03BC4150 MOV X1, X31
	0x03BC4154 BL 0x3C389D4
	0x03BC4158 ADRP X8, 0x599000
	0x03BC415C LDR X8, [X8 + 0x698]
	0x03BC4160 MOV X1, X0
	0x03BC4164 MOV X2, X31
	0x03BC4168 LDR X8, [X8]
	0x03BC416C MOV X0, X8
	0x03BC4170 BL 0x321B938
	0x03BC4174 ADRP X8, 0x52F000
	0x03BC4178 LDR X8, [X8 + 0xA28]
	0x03BC417C LDR X20, [X19 + 0x20]
	0x03BC4180 MOV X21, X0
	0x03BC4184 LDR X8, [X8]
	0x03BC4188 LDR W9, [X8 + 0xE0]
	0x03BC418C CBNZ W9, 0x3BC4198
	0x03BC4190 MOV X0, X8
	0x03BC4194 BL 0x1C16DFC
	0x03BC4198 MOV X0, X21
	0x03BC419C MOV X1, X20
	0x03BC41A0 MOV X2, X31
	0x03BC41A4 BL 0x3C06B0C
	0x03BC41A8 LDR X0, [X22]
	0x03BC41AC LDR X20, [X19 + 0x28]
	0x03BC41B0 LDR W8, [X0 + 0xE0]
	0x03BC41B4 CBNZ W8, 0x3BC41BC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x81F000
	009 Move X24, 0x534000
	010 Move X21, 0x59A000
	011 Move X22, 0x59A000
	012 Move X23, 0x59A000
	013 Move W8, [X20+3536]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1552]
	016 Move X22, [X22+1560]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x534000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59A000
	027 Move X0, [X0+1560]
	028 Call 0x1C17CF4
	029 Move X0, 0x59A000
	030 Move X0, [X0+1552]
	031 Call 0x1C17CF4
	032 Move X0, 0x59A000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3536], W8
	037 Move X0, [X24]
	038 Move X20, [X19+312]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeSecondary2DAxisClickAction()

Disassembly:
	0x03BC3FF0 MOV X1, X31
	0x03BC3FF4 BL 0x3C32ECC
	0x03BC3FF8 LDR X8, [X22]
	0x03BC3FFC MOV X19, X0
	0x03BC4000 LDR W9, [X8 + 0xE0]
	0x03BC4004 CBNZ W9, 0x3BC4010
	0x03BC4008 MOV X0, X8
	0x03BC400C BL 0x1C16DFC
	0x03BC4010 MOV X0, X19
	0x03BC4014 LDP X20, X19, [X31 + 0x20]
	0x03BC4018 LDP X22, X21, [X31 + 0x10]
	0x03BC401C MOV X1, X31
	0x03BC4020 LDP X30, X23, [X31], #0x30
	0x03BC4024 B 0x3C394A8
	0x03BC4028 LDR X0, [X22]
	0x03BC402C LDR X20, [X19 + 0x20]
	0x03BC4030 LDR W8, [X0 + 0xE0]
	0x03BC4034 CBNZ W8, 0x3BC403C
	0x03BC4038 BL 0x1C16DFC
	0x03BC403C MOV X0, X20
	0x03BC4040 MOV X1, X31
	0x03BC4044 MOV X2, X31
	0x03BC4048 BL 0x3C3883C
	0x03BC404C TBZ X0, 0x0, 0x3BC41A8
	0x03BC4050 LDR X0, [X22]
	0x03BC4054 LDR X20, [X19 + 0x48]
	0x03BC4058 LDR W8, [X0 + 0xE0]
	0x03BC405C CBNZ W8, 0x3BC4064
	0x03BC4060 BL 0x1C16DFC
	0x03BC4064 MOV X0, X20
	0x03BC4068 MOV X1, X31
	0x03BC406C MOV X2, X31
	0x03BC4070 BL 0x3C354F8
	0x03BC4074 TBZ X0, 0x0, 0x3BC408C
	0x03BC4078 LDR X8, [X19 + 0x48]
	0x03BC407C CBZ X8, 0x3BC4560
	0x03BC4080 LDR X20, [X8 + 0x18]
	0x03BC4084 STR X20, [X19 + 0x20]
	0x03BC4088 B 0x3BC4090
	0x03BC408C LDR X20, [X19 + 0x20]
	0x03BC4090 LDR X0, [X22]
	0x03BC4094 LDR W8, [X0 + 0xE0]
	0x03BC4098 CBNZ W8, 0x3BC40A0
	0x03BC409C BL 0x1C16DFC
	0x03BC40A0 MOV X0, X20
	0x03BC40A4 MOV X1, X31
	0x03BC40A8 MOV X2, X31
	0x03BC40AC BL 0x3C3883C
	0x03BC40B0 TBZ X0, 0x0, 0x3BC40EC
	0x03BC40B4 LDR X0, [X22]
	0x03BC40B8 LDR X20, [X19 + 0x50]
	0x03BC40BC LDR W8, [X0 + 0xE0]
	0x03BC40C0 CBNZ W8, 0x3BC40C8
	0x03BC40C4 BL 0x1C16DFC
	0x03BC40C8 MOV X0, X20
	0x03BC40CC MOV X1, X31
	0x03BC40D0 MOV X2, X31

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x81F000
	009 Move X24, 0x534000
	010 Move X21, 0x59A000
	011 Move X22, 0x59A000
	012 Move X23, 0x59A000
	013 Move W8, [X20+3537]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1552]
	016 Move X22, [X22+1560]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x534000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59A000
	027 Move X0, [X0+1560]
	028 Call 0x1C17CF4
	029 Move X0, 0x59A000
	030 Move X0, [X0+1552]
	031 Call 0x1C17CF4
	032 Move X0, 0x59A000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3537], W8
	037 Move X0, [X24]
	038 Move X20, [X19+312]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribePrimary2DAxisTouchAction()

Disassembly:
	0x03BC42CC LDR X20, [X19 + 0x160]
	0x03BC42D0 LDR W8, [X0 + 0xE0]
	0x03BC42D4 CBNZ W8, 0x3BC42DC
	0x03BC42D8 BL 0x1C16DFC
	0x03BC42DC MOV X0, X20
	0x03BC42E0 MOV X1, X31
	0x03BC42E4 MOV X2, X31
	0x03BC42E8 BL 0x3C3883C
	0x03BC42EC TBZ X0, 0x0, 0x3BC4430
	0x03BC42F0 LDR X0, [X19 + 0x170]
	0x03BC42F4 CBZ X0, 0x3BC4560
	0x03BC42F8 LDR W8, [X0 + 0x18]
	0x03BC42FC CMP W8, 0x1
	0x03BC4300 B.LT 0x3BC4430
	0x03BC4304 ADRP X21, 0x599000
	0x03BC4308 LDR X21, [X21 + 0x668]
	0x03BC430C MOV W1, W31
	0x03BC4310 LDR X2, [X21]
	0x03BC4314 BL 0x301BCCC
	0x03BC4318 CBZ X0, 0x3BC4560
	0x03BC431C LDR X8, [X22]
	0x03BC4320 LDR X20, [X0 + 0x18]
	0x03BC4324 LDR W9, [X8 + 0xE0]
	0x03BC4328 CBNZ W9, 0x3BC4334
	0x03BC432C MOV X0, X8
	0x03BC4330 BL 0x1C16DFC
	0x03BC4334 MOV X0, X20
	0x03BC4338 MOV X1, X31
	0x03BC433C MOV X2, X31
	0x03BC4340 BL 0x3C354F8
	0x03BC4344 TBZ X0, 0x0, 0x3BC4374
	0x03BC4348 LDR X0, [X19 + 0x170]
	0x03BC434C CBZ X0, 0x3BC4560
	0x03BC4350 LDR X2, [X21]
	0x03BC4354 MOV W1, W31
	0x03BC4358 BL 0x301BCCC
	0x03BC435C CBZ X0, 0x3BC4560
	0x03BC4360 LDR X8, [X0 + 0x18]
	0x03BC4364 CBZ X8, 0x3BC4560
	0x03BC4368 LDR X20, [X8 + 0x18]
	0x03BC436C STR X20, [X19 + 0x160]
	0x03BC4370 B 0x3BC4378
	0x03BC4374 LDR X20, [X19 + 0x160]
	0x03BC4378 LDR X0, [X22]
	0x03BC437C LDR W8, [X0 + 0xE0]
	0x03BC4380 CBNZ W8, 0x3BC4388
	0x03BC4384 BL 0x1C16DFC
	0x03BC4388 MOV X0, X20
	0x03BC438C MOV X1, X31
	0x03BC4390 MOV X2, X31
	0x03BC4394 BL 0x3C3883C
	0x03BC4398 TBZ X0, 0x0, 0x3BC43D0
	0x03BC439C ADRP X8, 0x52F000
	0x03BC43A0 LDR X8, [X8 + 0xA28]
	0x03BC43A4 LDR X0, [X8]
	0x03BC43A8 LDR W8, [X0 + 0xE0]
	0x03BC43AC CBNZ W8, 0x3BC43B4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x81F000
	009 Move X24, 0x534000
	010 Move X21, 0x59A000
	011 Move X22, 0x59A000
	012 Move X23, 0x59A000
	013 Move W8, [X20+3538]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1568]
	016 Move X22, [X22+1576]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x534000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59A000
	027 Move X0, [X0+1576]
	028 Call 0x1C17CF4
	029 Move X0, 0x59A000
	030 Move X0, [X0+1568]
	031 Call 0x1C17CF4
	032 Move X0, 0x59A000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3538], W8
	037 Move X0, [X24]
	038 Move X20, [X19+320]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribePrimary2DAxisTouchAction()

Disassembly:
	0x03BC41E8 MOV X1, X31
	0x03BC41EC MOV X2, X31
	0x03BC41F0 BL 0x3C354F8
	0x03BC41F4 TBZ X0, 0x0, 0x3BC420C
	0x03BC41F8 LDR X8, [X19 + 0x108]
	0x03BC41FC CBZ X8, 0x3BC4560
	0x03BC4200 LDR X20, [X8 + 0x18]
	0x03BC4204 STR X20, [X19 + 0x28]
	0x03BC4208 B 0x3BC4210
	0x03BC420C LDR X20, [X19 + 0x28]
	0x03BC4210 LDR X0, [X22]
	0x03BC4214 LDR W8, [X0 + 0xE0]
	0x03BC4218 CBNZ W8, 0x3BC4220
	0x03BC421C BL 0x1C16DFC
	0x03BC4220 MOV X0, X20
	0x03BC4224 MOV X1, X31
	0x03BC4228 MOV X2, X31
	0x03BC422C BL 0x3C3883C
	0x03BC4230 TBZ X0, 0x0, 0x3BC4268
	0x03BC4234 ADRP X8, 0x52F000
	0x03BC4238 LDR X8, [X8 + 0xA28]
	0x03BC423C LDR X0, [X8]
	0x03BC4240 LDR W8, [X0 + 0xE0]
	0x03BC4244 CBNZ W8, 0x3BC424C
	0x03BC4248 BL 0x1C16DFC
	0x03BC424C ADRP X8, 0x599000
	0x03BC4250 LDR X8, [X8 + 0x688]
	0x03BC4254 MOV X1, X19
	0x03BC4258 MOV X2, X31
	0x03BC425C LDR X0, [X8]
	0x03BC4260 BL 0x3C065A4
	0x03BC4264 B 0x3BC42C8
	0x03BC4268 LDR X0, [X19 + 0x28]
	0x03BC426C CBZ X0, 0x3BC4560
	0x03BC4270 MOV X1, X31
	0x03BC4274 BL 0x3C389D4
	0x03BC4278 ADRP X8, 0x599000
	0x03BC427C LDR X8, [X8 + 0x670]
	0x03BC4280 MOV X1, X0
	0x03BC4284 MOV X2, X31
	0x03BC4288 LDR X8, [X8]
	0x03BC428C MOV X0, X8
	0x03BC4290 BL 0x321B938
	0x03BC4294 ADRP X8, 0x52F000
	0x03BC4298 LDR X8, [X8 + 0xA28]
	0x03BC429C LDR X20, [X19 + 0x28]
	0x03BC42A0 MOV X21, X0
	0x03BC42A4 LDR X8, [X8]
	0x03BC42A8 LDR W9, [X8 + 0xE0]
	0x03BC42AC CBNZ W9, 0x3BC42B8
	0x03BC42B0 MOV X0, X8
	0x03BC42B4 BL 0x1C16DFC
	0x03BC42B8 MOV X0, X21
	0x03BC42BC MOV X1, X20
	0x03BC42C0 MOV X2, X31
	0x03BC42C4 BL 0x3C06B0C
	0x03BC42C8 LDR X0, [X22]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x81F000
	009 Move X24, 0x534000
	010 Move X21, 0x59A000
	011 Move X22, 0x59A000
	012 Move X23, 0x59A000
	013 Move W8, [X20+3539]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1568]
	016 Move X22, [X22+1576]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x534000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59A000
	027 Move X0, [X0+1576]
	028 Call 0x1C17CF4
	029 Move X0, 0x59A000
	030 Move X0, [X0+1568]
	031 Call 0x1C17CF4
	032 Move X0, 0x59A000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3539], W8
	037 Move X0, [X24]
	038 Move X20, [X19+320]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeSecondary2DAxisTouchAction()

Disassembly:
	0x03BC44C4 STR D0, [X19 + 0x390]
	0x03BC44C8 STR S1, [X19 + 0x398]
	0x03BC44CC LDR X8, [X0 + 0xB8]
	0x03BC44D0 LDUR V0, [X8 + 0xC]
	0x03BC44D4 LDR V1, [X8 + 0x14]
	0x03BC44D8 STR D0, [X19 + 0x3C8]
	0x03BC44DC STR S1, [X19 + 0x3D0]
	0x03BC44E0 LDR X0, [X22]
	0x03BC44E4 LDR W8, [X0 + 0xE0]
	0x03BC44E8 CBNZ W8, 0x3BC44F0
	0x03BC44EC BL 0x1C16DFC
	0x03BC44F0 MOV X0, X20
	0x03BC44F4 MOV X1, X31
	0x03BC44F8 MOV X2, X31
	0x03BC44FC BL 0x3C354F8
	0x03BC4500 TBZ X0, 0x0, 0x3BC4550
	0x03BC4504 LDR X20, [X19 + 0x1C0]
	0x03BC4508 MOV X0, X19
	0x03BC450C MOV X1, X31
	0x03BC4510 BL 0x3C32E90
	0x03BC4514 LDR X8, [X22]
	0x03BC4518 MOV X19, X0
	0x03BC451C LDR W9, [X8 + 0xE0]
	0x03BC4520 CBNZ W9, 0x3BC452C
	0x03BC4524 MOV X0, X8
	0x03BC4528 BL 0x1C16DFC
	0x03BC452C ADRP X8, 0x533000
	0x03BC4530 LDR X8, [X8 + 0x1D0]
	0x03BC4534 MOV X0, X20
	0x03BC4538 MOV X1, X19
	0x03BC453C LDP X20, X19, [X31 + 0x20]
	0x03BC4540 LDR X2, [X8]
	0x03BC4544 LDP X22, X21, [X31 + 0x10]
	0x03BC4548 LDP X30, X23, [X31], #0x30
	0x03BC454C B 0x222D488
	0x03BC4550 LDP X20, X19, [X31 + 0x20]
	0x03BC4554 LDP X22, X21, [X31 + 0x10]
	0x03BC4558 LDP X30, X23, [X31], #0x30
	0x03BC455C RET
	0x03BC4560 BL 0x1C16F20
	0x03BC4564 RET
	0x03BC4568 SUB X31, X31, 0x60
	0x03BC456C STR X30, [X31 + 0x10]
	0x03BC4570 STP X26, X25, [X31 + 0x20]
	0x03BC4574 STP X24, X23, [X31 + 0x30]
	0x03BC4578 STP X22, X21, [X31 + 0x40]
	0x03BC457C STP X20, X19, [X31 + 0x50]
	0x03BC4580 ADRP X20, 0x81E000
	0x03BC4584 LDRB W8, [X20 + 0xD7E]
	0x03BC4588 MOV X19, X0
	0x03BC458C TBNZ X8, 0x0, 0x3BC45EC
	0x03BC4590 ADRP X0, 0x583000
	0x03BC4594 LDR X0, [X0 + 0xB88]
	0x03BC4598 BL 0x1C16CF4
	0x03BC459C ADRP X0, 0x557000
	0x03BC45A0 LDR X0, [X0 + 0x270]
	0x03BC45A4 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x81F000
	009 Move X24, 0x534000
	010 Move X21, 0x59A000
	011 Move X22, 0x59A000
	012 Move X23, 0x59A000
	013 Move W8, [X20+3540]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1584]
	016 Move X22, [X22+1592]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x534000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59A000
	027 Move X0, [X0+1592]
	028 Call 0x1C17CF4
	029 Move X0, 0x59A000
	030 Move X0, [X0+1584]
	031 Call 0x1C17CF4
	032 Move X0, 0x59A000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3540], W8
	037 Move X0, [X24]
	038 Move X20, [X19+328]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeSecondary2DAxisTouchAction()

Disassembly:
	0x03BC43E0 ADRP X8, 0x599000
	0x03BC43E4 LDR X8, [X8 + 0x678]
	0x03BC43E8 MOV X1, X0
	0x03BC43EC MOV X2, X31
	0x03BC43F0 LDR X8, [X8]
	0x03BC43F4 MOV X0, X8
	0x03BC43F8 BL 0x321B938
	0x03BC43FC ADRP X8, 0x52F000
	0x03BC4400 LDR X8, [X8 + 0xA28]
	0x03BC4404 LDR X20, [X19 + 0x160]
	0x03BC4408 MOV X21, X0
	0x03BC440C LDR X8, [X8]
	0x03BC4410 LDR W9, [X8 + 0xE0]
	0x03BC4414 CBNZ W9, 0x3BC4420
	0x03BC4418 MOV X0, X8
	0x03BC441C BL 0x1C16DFC
	0x03BC4420 MOV X0, X21
	0x03BC4424 MOV X1, X20
	0x03BC4428 MOV X2, X31
	0x03BC442C BL 0x3C06B0C
	0x03BC4430 ADD X0, X19, 0x27C
	0x03BC4434 MOV X1, X31
	0x03BC4438 BL 0x3BCA4B8
	0x03BC443C ADD X0, X19, 0x2F1
	0x03BC4440 MOV X1, X31
	0x03BC4444 BL 0x3BCA368
	0x03BC4448 ADD X0, X19, 0x330
	0x03BC444C MOV X1, X31
	0x03BC4450 BL 0x3BCA368
	0x03BC4454 ADD X0, X19, 0x390
	0x03BC4458 MOV X1, X31
	0x03BC445C BL 0x3BCA7C0
	0x03BC4460 ADD X0, X19, 0x3C8
	0x03BC4464 MOV X1, X31
	0x03BC4468 BL 0x3BCA7C0
	0x03BC446C LDR X0, [X23]
	0x03BC4470 LDR W8, [X0 + 0xE0]
	0x03BC4474 CBNZ W8, 0x3BC4480
	0x03BC4478 BL 0x1C16DFC
	0x03BC447C LDR X0, [X23]
	0x03BC4480 LDR X8, [X0 + 0xB8]
	0x03BC4484 ADD X10, X19, 0x314
	0x03BC4488 ADD X11, X19, 0x35B
	0x03BC448C LDR W9, [X8 + 0x8]
	0x03BC4490 LDR X8, [X8]
	0x03BC4494 STR W9, [X19 + 0x31C]
	0x03BC4498 STR X8, [X10]
	0x03BC449C LDR X8, [X0 + 0xB8]
	0x03BC44A0 ADD X10, X19, 0x353
	0x03BC44A4 LDR W9, [X8 + 0x14]
	0x03BC44A8 LDUR X8, [X8 + 0xC]
	0x03BC44AC STR W9, [X11]
	0x03BC44B0 STR X8, [X10]
	0x03BC44B4 LDR X8, [X0 + 0xB8]
	0x03BC44B8 LDR X20, [X19 + 0x1C0]
	0x03BC44BC LDR V0, [X8]
	0x03BC44C0 LDR V1, [X8 + 0x8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x81F000
	009 Move X24, 0x534000
	010 Move X21, 0x59A000
	011 Move X22, 0x59A000
	012 Move X23, 0x59A000
	013 Move W8, [X20+3541]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1584]
	016 Move X22, [X22+1592]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x534000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59A000
	027 Move X0, [X0+1592]
	028 Call 0x1C17CF4
	029 Move X0, 0x59A000
	030 Move X0, [X0+1584]
	031 Call 0x1C17CF4
	032 Move X0, 0x59A000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3541], W8
	037 Move X0, [X24]
	038 Move X20, [X19+328]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribePrimaryTouchAction()

Disassembly:
	0x03BC46BC B.EQ 0x3BC46DC
	0x03BC46C0 LDR X0, [X22]
	0x03BC46C4 LDR W8, [X0 + 0xE0]
	0x03BC46C8 CBNZ W8, 0x3BC46D0
	0x03BC46CC BL 0x1C16DFC
	0x03BC46D0 MOV X0, X21
	0x03BC46D4 MOV X1, X31
	0x03BC46D8 BL 0x376E798
	0x03BC46DC LDR W8, [X20 + 0x18]
	0x03BC46E0 ADD X23, X23, 0x1
	0x03BC46E4 CMP X23, W8, SXTW
	0x03BC46E8 B.LT 0x3BC4664
	0x03BC46EC ADRP X8, 0x583000
	0x03BC46F0 LDR X8, [X8 + 0xB88]
	0x03BC46F4 ADRP X20, 0x599000
	0x03BC46F8 LDR X0, [X8]
	0x03BC46FC LDR X20, [X20 + 0x6B0]
	0x03BC4700 BL 0x1C16F10
	0x03BC4704 LDR X2, [X20]
	0x03BC4708 MOV X1, X19
	0x03BC470C MOV X3, X31
	0x03BC4710 MOV X20, X0
	0x03BC4714 BL 0x2A769B4
	0x03BC4718 LDR X0, [X22]
	0x03BC471C LDR W8, [X0 + 0xE0]
	0x03BC4720 CBNZ W8, 0x3BC4728
	0x03BC4724 BL 0x1C16DFC
	0x03BC4728 MOV X0, X20
	0x03BC472C MOV X1, X31
	0x03BC4730 BL 0x376DBD4
	0x03BC4734 MOVZ W8, 0x1
	0x03BC4738 STRB W8, [X19 + 0x388]
	0x03BC473C ADRP X21, 0x52F000
	0x03BC4740 LDR X21, [X21 + 0x598]
	0x03BC4744 MOV X0, X19
	0x03BC4748 BL 0x3BC4924
	0x03BC474C LDR X8, [X19]
	0x03BC4750 MOV X0, X19
	0x03BC4754 LDR X9, [X8 + 0x208]
	0x03BC4758 LDR X1, [X8 + 0x210]
	0x03BC475C BLR X9
	0x03BC4760 MOV X0, X19
	0x03BC4764 BL 0x3BBF4AC
	0x03BC4768 MOV X0, X19
	0x03BC476C BL 0x3BBF6A4
	0x03BC4770 MOV X0, X19
	0x03BC4774 BL 0x3BBF89C
	0x03BC4778 MOV X0, X19
	0x03BC477C BL 0x3BBFA94
	0x03BC4780 MOV X0, X19
	0x03BC4784 BL 0x3BBFE4C
	0x03BC4788 MOV X0, X19
	0x03BC478C BL 0x3BBFC8C
	0x03BC4790 MOV X0, X19
	0x03BC4794 BL 0x3BBFFD4
	0x03BC4798 MOV X0, X19
	0x03BC479C BL 0x3BC015C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x81F000
	009 Move X24, 0x534000
	010 Move X21, 0x59A000
	011 Move X22, 0x59A000
	012 Move X23, 0x59A000
	013 Move W8, [X20+3542]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1600]
	016 Move X22, [X22+1608]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x534000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59A000
	027 Move X0, [X0+1608]
	028 Call 0x1C17CF4
	029 Move X0, 0x59A000
	030 Move X0, [X0+1600]
	031 Call 0x1C17CF4
	032 Move X0, 0x59A000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3542], W8
	037 Move X0, [X24]
	038 Move X20, [X19+336]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribePrimaryTouchAction()

Disassembly:
	0x03BC45D8 ADRP X0, 0x599000
	0x03BC45DC LDR X0, [X0 + 0x6C0]
	0x03BC45E0 BL 0x1C16CF4
	0x03BC45E4 MOVZ W8, 0x1
	0x03BC45E8 STRB W8, [X20 + 0xD7E]
	0x03BC45EC STP X31, X31, [X31]
	0x03BC45F0 LDRB W8, [X19 + 0x1B8]
	0x03BC45F4 CBZ W8, 0x3BC473C
	0x03BC45F8 ADRP X22, 0x557000
	0x03BC45FC LDR X22, [X22 + 0x270]
	0x03BC4600 ADRP X20, 0x599000
	0x03BC4604 LDR X0, [X22]
	0x03BC4608 LDR W8, [X0 + 0xE0]
	0x03BC460C LDR X20, [X20 + 0x6A8]
	0x03BC4610 CBNZ W8, 0x3BC4618
	0x03BC4614 BL 0x1C16DFC
	0x03BC4618 MOV X0, X31
	0x03BC461C BL 0x376DAD4
	0x03BC4620 LDR X8, [X20]
	0x03BC4624 STP X0, X1, [X31]
	0x03BC4628 ADD X0, X31, 0x0
	0x03BC462C MOV X1, X8
	0x03BC4630 BL 0x24FD838
	0x03BC4634 CBZ X0, 0x3BC4920
	0x03BC4638 LDR X8, [X0 + 0x18]
	0x03BC463C MOV X20, X0
	0x03BC4640 CMP W8, 0x1
	0x03BC4644 B.LT 0x3BC46EC
	0x03BC4648 ADRP X25, 0x599000
	0x03BC464C ADRP X26, 0x599000
	0x03BC4650 LDR X25, [X25 + 0x6B8]
	0x03BC4654 LDR X26, [X26 + 0x6C0]
	0x03BC4658 MOV X23, X31
	0x03BC465C AND X8, X8, 0x0
	0x03BC4660 ADD X24, X20, 0x20
	0x03BC4664 CMP X23, W8, UXTW
	0x03BC4668 B.CS 0x3BC491C
	0x03BC466C LDR X21, [X24, X23, LSL #3]
	0x03BC4670 CBZ X21, 0x3BC46DC
	0x03BC4674 LDR X9, [X21]
	0x03BC4678 LDR X10, [X25]
	0x03BC467C LDRB W8, [X9 + 0x130]
	0x03BC4680 LDRB W11, [X10 + 0x130]
	0x03BC4684 CMP W8, W11
	0x03BC4688 B.CC 0x3BC46DC
	0x03BC468C LDR X9, [X9 + 0xC8]
	0x03BC4690 ADD X11, X9, X11, 0x3, LSL
	0x03BC4694 LDUR X11, [X11 - 0x8]
	0x03BC4698 CMP X11, X10
	0x03BC469C B.NE 0x3BC46DC
	0x03BC46A0 LDR X10, [X26]
	0x03BC46A4 LDRB W11, [X10 + 0x130]
	0x03BC46A8 CMP W8, W11
	0x03BC46AC B.CC 0x3BC46C0
	0x03BC46B0 ADD X8, X9, X11, 0x3, LSL
	0x03BC46B4 LDUR X8, [X8 - 0x8]
	0x03BC46B8 CMP X8, X10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x81F000
	009 Move X24, 0x534000
	010 Move X21, 0x59A000
	011 Move X22, 0x59A000
	012 Move X23, 0x59A000
	013 Move W8, [X20+3543]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1600]
	016 Move X22, [X22+1608]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x534000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59A000
	027 Move X0, [X0+1608]
	028 Call 0x1C17CF4
	029 Move X0, 0x59A000
	030 Move X0, [X0+1600]
	031 Call 0x1C17CF4
	032 Move X0, 0x59A000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3543], W8
	037 Move X0, [X24]
	038 Move X20, [X19+336]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void SubscribeSecondaryTouchAction()

Disassembly:
	0x03BC48B4 TBZ X0, 0x0, 0x3BC48C8
	0x03BC48B8 LDR X0, [X19 + 0x28]
	0x03BC48BC CBZ X0, 0x3BC4920
	0x03BC48C0 MOV X1, X31
	0x03BC48C4 BL 0x373816C
	0x03BC48C8 LDR X0, [X21]
	0x03BC48CC LDR X20, [X19 + 0x20]
	0x03BC48D0 LDR W8, [X0 + 0xE0]
	0x03BC48D4 CBNZ W8, 0x3BC48DC
	0x03BC48D8 BL 0x1C16DFC
	0x03BC48DC MOV X0, X20
	0x03BC48E0 MOV X1, X31
	0x03BC48E4 MOV X2, X31
	0x03BC48E8 BL 0x3C354F8
	0x03BC48EC TBZ X0, 0x0, 0x3BC4900
	0x03BC48F0 LDR X0, [X19 + 0x20]
	0x03BC48F4 CBZ X0, 0x3BC4920
	0x03BC48F8 MOV X1, X31
	0x03BC48FC BL 0x373816C
	0x03BC4900 LDP X20, X19, [X31 + 0x50]
	0x03BC4904 LDP X22, X21, [X31 + 0x40]
	0x03BC4908 LDP X24, X23, [X31 + 0x30]
	0x03BC490C LDP X26, X25, [X31 + 0x20]
	0x03BC4910 LDR X30, [X31 + 0x10]
	0x03BC4914 ADD X31, X31, 0x60
	0x03BC4918 RET
	0x03BC491C BL 0x1C16F28
	0x03BC4920 BL 0x1C16F20
	0x03BC4924 SUB X31, X31, 0x40
	0x03BC4928 STP X30, X23, [X31 + 0x10]
	0x03BC492C STP X22, X21, [X31 + 0x20]
	0x03BC4930 STP X20, X19, [X31 + 0x30]
	0x03BC4934 ADRP X20, 0x81E000
	0x03BC4938 ADRP X23, 0x52F000
	0x03BC493C LDRB W8, [X20 + 0xD81]
	0x03BC4940 LDR X23, [X23 + 0x598]
	0x03BC4944 MOV X19, X0
	0x03BC4948 TBNZ X8, 0x0, 0x3BC4978
	0x03BC494C ADRP X0, 0x557000
	0x03BC4950 LDR X0, [X0 + 0x2C8]
	0x03BC4954 BL 0x1C16CF4
	0x03BC4958 ADRP X0, 0x52F000
	0x03BC495C LDR X0, [X0 + 0x598]
	0x03BC4960 BL 0x1C16CF4
	0x03BC4964 ADRP X0, 0x599000
	0x03BC4968 LDR X0, [X0 + 0x6C8]
	0x03BC496C BL 0x1C16CF4
	0x03BC4970 MOVZ W8, 0x1
	0x03BC4974 STRB W8, [X20 + 0xD81]
	0x03BC4978 LDR X0, [X23]
	0x03BC497C LDR X20, [X19 + 0x208]
	0x03BC4980 LDR X21, [X19 + 0x178]
	0x03BC4984 LDR W8, [X0 + 0xE0]
	0x03BC4988 CBNZ W8, 0x3BC4990
	0x03BC498C BL 0x1C16DFC
	0x03BC4990 MOV X0, X20
	0x03BC4994 MOV X1, X21

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x81F000
	009 Move X24, 0x534000
	010 Move X21, 0x59A000
	011 Move X22, 0x59A000
	012 Move X23, 0x59A000
	013 Move W8, [X20+3544]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1616]
	016 Move X22, [X22+1624]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x534000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59A000
	027 Move X0, [X0+1624]
	028 Call 0x1C17CF4
	029 Move X0, 0x59A000
	030 Move X0, [X0+1616]
	031 Call 0x1C17CF4
	032 Move X0, 0x59A000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3544], W8
	037 Move X0, [X24]
	038 Move X20, [X19+344]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Subscribe, X0, X1, X2
	068 Return 

Method: System.Void UnsubscribeSecondaryTouchAction()

Disassembly:
	0x03BC47D0 MOV X0, X19
	0x03BC47D4 BL 0x3BC0D9C
	0x03BC47D8 MOV X0, X19
	0x03BC47DC BL 0x3BC0F5C
	0x03BC47E0 MOV X0, X19
	0x03BC47E4 BL 0x3BC111C
	0x03BC47E8 MOV X0, X19
	0x03BC47EC BL 0x3BC1314
	0x03BC47F0 MOV X0, X19
	0x03BC47F4 BL 0x3BC150C
	0x03BC47F8 MOV X0, X19
	0x03BC47FC BL 0x3BC1704
	0x03BC4800 MOV X0, X19
	0x03BC4804 BL 0x3BC18FC
	0x03BC4808 MOV X0, X19
	0x03BC480C BL 0x3BC1ABC
	0x03BC4810 MOV X0, X19
	0x03BC4814 BL 0x3BC1C44
	0x03BC4818 MOV X0, X19
	0x03BC481C BL 0x3BC1DCC
	0x03BC4820 MOV X0, X19
	0x03BC4824 BL 0x3BC1F54
	0x03BC4828 MOV X0, X19
	0x03BC482C BL 0x3BC2114
	0x03BC4830 MOV X0, X19
	0x03BC4834 BL 0x3BC230C
	0x03BC4838 MOV X0, X19
	0x03BC483C BL 0x3BC2504
	0x03BC4840 MOV X0, X19
	0x03BC4844 BL 0x3BC26FC
	0x03BC4848 MOV X0, X19
	0x03BC484C BL 0x3BC28F4
	0x03BC4850 MOV X0, X19
	0x03BC4854 BL 0x3BC2AEC
	0x03BC4858 MOV X0, X19
	0x03BC485C BL 0x3BC2CE4
	0x03BC4860 MOV X0, X19
	0x03BC4864 BL 0x3BC2EDC
	0x03BC4868 MOV X0, X19
	0x03BC486C BL 0x3BC30D4
	0x03BC4870 MOV X0, X19
	0x03BC4874 BL 0x3BC32CC
	0x03BC4878 MOV X0, X19
	0x03BC487C BL 0x3BC34C4
	0x03BC4880 MOV X0, X19
	0x03BC4884 BL 0x3BC36BC
	0x03BC4888 MOV X0, X19
	0x03BC488C BL 0x3BC38B4
	0x03BC4890 LDR X0, [X21]
	0x03BC4894 LDR X20, [X19 + 0x28]
	0x03BC4898 LDR W8, [X0 + 0xE0]
	0x03BC489C CBNZ W8, 0x3BC48A4
	0x03BC48A0 BL 0x1C16DFC
	0x03BC48A4 MOV X0, X20
	0x03BC48A8 MOV X1, X31
	0x03BC48AC MOV X2, X31
	0x03BC48B0 BL 0x3C354F8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x81F000
	009 Move X24, 0x534000
	010 Move X21, 0x59A000
	011 Move X22, 0x59A000
	012 Move X23, 0x59A000
	013 Move W8, [X20+3545]
	014 Move X24, [X24+984]
	015 Move X21, [X21+1616]
	016 Move X22, [X22+1624]
	017 Move X23, [X23+1120]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x534000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0x59A000
	027 Move X0, [X0+1624]
	028 Call 0x1C17CF4
	029 Move X0, 0x59A000
	030 Move X0, [X0+1616]
	031 Call 0x1C17CF4
	032 Move X0, 0x59A000
	033 Move X0, [X0+1120]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3545], W8
	037 Move X0, [X24]
	038 Move X20, [X19+344]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X22]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X22, X0
	051 Call Action`1<CallbackContext>..ctor, X0, X1, X2
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X21
	059 Move X2, X22
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call XRDeviceSimulator.Unsubscribe, X0, X1, X2
	068 Return 

Method: System.Void OnKeyboardXTranslatePerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9560 FADD S0, S0, S1
	0x03BC9564 LDR V7, [X24]
	0x03BC9568 FSQRT S1, S0
	0x03BC956C LDR V2, [X24 + 0x8]
	0x00000000 INVALID
	0x03BC9574 STR V1, [X31]
	0x03BC9578 FMUL S1, S1, S6
	0x03BC957C FADD V0.2S, V3.2S, V0.2S
	0x03BC9580 LDP S3, S4, [X22]
	0x03BC9584 FADD S1, S5, S1
	0x03BC9588 LDR V5, [X22 + 0x8]
	0x03BC958C FSUB V0.2S, V0.2S, V7.2S
	0x03BC9590 FSUB S2, S1, S2
	0x03BC9594 MOV S1, V0.S[1]
	0x03BC9598 MOV X0, X31
	0x03BC959C BL 0x38BE684
	0x03BC95A0 STP S0, S1, [X21]
	0x03BC95A4 STP S2, S3, [X21 + 0x8]
	0x03BC95A8 ADRP X21, 0x818000
	0x03BC95AC LDRB W8, [X21 + 0x57F]
	0x03BC95B0 CBNZ W8, 0x3BC95C8
	0x03BC95B4 ADRP X0, 0x52A000
	0x03BC95B8 LDR X0, [X0 + 0x5A8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x81A000
	007 Move [X31], X1
	008 Move [X31+8], X2
	009 Move X21, 0x595000
	010 Move W8, [X20+3546]
	011 Move X21, [X21+1816]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x595000
	018 Move X0, [X0+1816]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3546], W8
	022 Move X1, [X21]
	023 Add X0, X31, 0
	024 Call CallbackContext.ReadValue, X0
	025 Move [X19+536], S0
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Add X31, X31, 48
	031 Return 

Method: System.Void OnKeyboardXTranslateCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC95BC BL 0x1C16CF4
	0x03BC95C0 MOVZ W8, 0x1

ISIL:
	001 Move [X0+536], W31
	002 Return 

Method: System.Void OnKeyboardYTranslatePerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC95C4 STRB W8, [X21 + 0x57F]
	0x03BC95C8 LDR X0, [X26]
	0x03BC95CC LDR V0, [X31]
	0x03BC95D0 LDR W8, [X0 + 0xE0]
	0x03BC95D4 FMUL S9, S0, S9
	0x03BC95D8 CBNZ W8, 0x3BC95E0
	0x03BC95DC BL 0x1C16DFC
	0x03BC95E0 FMOV S10, 1
	0x03BC95E4 FMAXNM S0, S9, S10
	0x03BC95E8 FCVT S0, S0
	0x03BC95EC BL 0x3EB1C20
	0x00000000 INVALID
	0x03BC95F4 FADD S0, S0, S10
	0x03BC95F8 FMOV W9, S0
	0x03BC95FC MOVZ W8, 0x7F800000
	0x03BC9600 AND W9, W9, 0x7FFFFFFF
	0x03BC9604 CMP W9, W8
	0x03BC9608 FMOV S1, 3
	0x03BC960C FCCMP S0, S1, 0x0, LS
	0x03BC9610 FCSEL S1, S1, S0, GT
	0x03BC9614 FMOV W9, S1
	0x03BC9618 AND W9, W9, 0x7FFFFFFF
	0x03BC961C CMP W9, W8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x81A000
	007 Move [X31], X1
	008 Move [X31+8], X2
	009 Move X21, 0x595000
	010 Move W8, [X20+3547]
	011 Move X21, [X21+1816]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x595000
	018 Move X0, [X0+1816]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3547], W8
	022 Move X1, [X21]
	023 Add X0, X31, 0
	024 Call CallbackContext.ReadValue, X0
	025 Move [X19+540], S0
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Add X31, X31, 48
	031 Return 

Method: System.Void OnKeyboardYTranslateCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9620 FCCMP S1, S10, 0x8, LS
	0x03BC9624 STR S0, [X20]

ISIL:
	001 Move [X0+540], W31
	002 Return 

Method: System.Void OnKeyboardZTranslatePerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9628 FCSEL S0, S10, S1, MI
	0x03BC962C FMUL S0, S0, S8
	0x03BC9630 STR S0, [X19]
	0x03BC9634 LDP X20, X19, [X31 + 0x90]
	0x03BC9638 LDP X22, X21, [X31 + 0x80]
	0x03BC963C LDP X24, X23, [X31 + 0x70]
	0x03BC9640 LDP X26, X25, [X31 + 0x60]
	0x03BC9644 LDR X30, [X31 + 0x50]
	0x03BC9648 LDP D9, D8, [X31 + 0x40]
	0x03BC964C LDP D11, D10, [X31 + 0x30]
	0x03BC9650 LDP D13, D12, [X31 + 0x20]
	0x03BC9654 LDP D15, D14, [X31 + 0x10]
	0x03BC9658 ADD X31, X31, 0xA0
	0x03BC965C RET
	0x03BC9660 SUB X31, X31, 0x30
	0x03BC9664 STP X30, X21, [X31 + 0x10]
	0x03BC9668 STP X20, X19, [X31 + 0x20]
	0x03BC966C ADRP X20, 0x819000
	0x03BC9670 ADRP X21, 0x594000
	0x03BC9674 LDRB W8, [X20 + 0xDE7]
	0x03BC9678 LDR X21, [X21 + 0x730]
	0x03BC967C MOV X19, X0
	0x03BC9680 TBNZ X8, 0x0, 0x3BC9698

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x81A000
	007 Move [X31], X1
	008 Move [X31+8], X2
	009 Move X21, 0x595000
	010 Move W8, [X20+3548]
	011 Move X21, [X21+1816]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x595000
	018 Move X0, [X0+1816]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3548], W8
	022 Move X1, [X21]
	023 Add X0, X31, 0
	024 Call CallbackContext.ReadValue, X0
	025 Move [X19+544], S0
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Add X31, X31, 48
	031 Return 

Method: System.Void OnKeyboardZTranslateCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9684 ADRP X0, 0x594000
	0x03BC9688 LDR X0, [X0 + 0x730]

ISIL:
	001 Move [X0+544], W31
	002 Return 

Method: System.Void OnManipulateLeftPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC968C BL 0x1C16CF4
	0x03BC9690 MOVZ W8, 0x1
	0x03BC9694 STRB W8, [X20 + 0xDE7]
	0x03BC9698 LDR X0, [X21]
	0x03BC969C LDR W8, [X0 + 0xE0]
	0x03BC96A0 CBNZ W8, 0x3BC96A8
	0x03BC96A4 BL 0x1C16DFC
	0x03BC96A8 LDUR V0, [X19 + 0x28]
	0x03BC96AC ADD X0, X31, 0x0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move W0, [X0+504]
	005 Move W1, 2
	006 Move X2, X31
	007 Call TargetedDevicesExtensions.WithDevice, X0, X1
	008 Move [X19+504], W0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

Method: System.Void OnManipulateLeftCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC96B0 MOV X1, X31
	0x03BC96B4 STR V0, [X31]
	0x03BC96B8 BL 0x37565F4
	0x03BC96BC LDP X20, X19, [X31 + 0x20]
	0x03BC96C0 LDP X30, X21, [X31 + 0x10]
	0x03BC96C4 ADD X31, X31, 0x30
	0x03BC96C8 RET
	0x03BC96CC SUB X31, X31, 0x20
	0x03BC96D0 STR X30, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move W0, [X0+504]
	005 Move W1, 2
	006 Move X2, X31
	007 Call TargetedDevicesExtensions.WithoutDevice, X0, X1
	008 Move [X19+504], W0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

Method: System.Void OnManipulateRightPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC96D4 LDR V0, [X0]
	0x03BC96D8 ADD X0, X31, 0x0
	0x03BC96DC MOV X1, X31
	0x03BC96E0 STR V0, [X31]
	0x03BC96E4 BL 0x37565F4
	0x03BC96E8 LDR X30, [X31 + 0x10]
	0x03BC96EC ADD X31, X31, 0x20
	0x03BC96F0 RET
	0x03BC96F4 LDR X0, [X0 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move W0, [X0+504]
	005 Move W1, 4
	006 Move X2, X31
	007 Call TargetedDevicesExtensions.WithDevice, X0, X1
	008 Move [X19+504], W0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

Method: System.Void OnManipulateRightCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC96F8 RET
	0x03BC96FC LDR X0, [X0 + 0x20]
	0x03BC9700 RET
	0x03BC9704 STR X1, [X0 + 0x20]
	0x03BC9708 RET
	0x03BC970C LDP X8, X1, [X0 + 0x28]
	0x03BC9710 MOV X0, X8
	0x03BC9714 RET
	0x03BC9718 STP X1, X2, [X0 + 0x28]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move W0, [X0+504]
	005 Move W1, 4
	006 Move X2, X31
	007 Call TargetedDevicesExtensions.WithoutDevice, X0, X1
	008 Move [X19+504], W0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

Method: System.Void OnToggleManipulateLeftPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC971C RET
	0x03BC9720 STR X30, [X31 - 0x10]!
	0x03BC9724 LDR X8, [X0 + 0x20]
	0x03BC9728 CBZ X8, 0x3BC9738
	0x03BC972C LDR X0, [X8 + 0x18]
	0x03BC9730 LDR X30, [X31], #0x10
	0x03BC9734 RET
	0x03BC9738 BL 0x1C16F20
	0x03BC973C STR X30, [X31 - 0x30]!
	0x03BC9740 STP X22, X21, [X31 + 0x10]
	0x03BC9744 STP X20, X19, [X31 + 0x20]
	0x03BC9748 ADRP X21, 0x819000
	0x03BC974C LDRB W8, [X21 + 0xDE8]
	0x03BC9750 MOV X20, X1
	0x03BC9754 MOV X19, X0
	0x03BC9758 TBNZ X8, 0x0, 0x3BC9788
	0x03BC975C ADRP X0, 0x52E000
	0x03BC9760 LDR X0, [X0 + 0x3D8]
	0x03BC9764 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move W0, [X0+504]
	005 Move W1, 2
	006 Move X2, X31
	007 Call TargetedDevicesExtensions.HasDevice, X0, X1
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {13}
	012 Move W0, 1
	013 Move W0, [X19+504]
	014 Move W1, 2
	015 Move X2, X31
	016 Call TargetedDevicesExtensions.WithDevice, X0, X1
	017 Move W1, 4
	018 Move X2, X31
	019 Call TargetedDevicesExtensions.WithoutDevice, X0, X1
	020 Move [X19+504], W0
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return 

Method: System.Void OnToggleManipulateRightPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9768 ADRP X0, 0x594000
	0x03BC976C LDR X0, [X0 + 0x738]
	0x03BC9770 BL 0x1C16CF4
	0x03BC9774 ADRP X0, 0x594000
	0x03BC9778 LDR X0, [X0 + 0x740]
	0x03BC977C BL 0x1C16CF4
	0x03BC9780 MOVZ W8, 0x1
	0x03BC9784 STRB W8, [X21 + 0xDE8]
	0x03BC9788 LDR X0, [X19 + 0x38]
	0x03BC978C MOV X1, X20
	0x03BC9790 MOV X2, X31
	0x03BC9794 BL 0x33C0DE4
	0x03BC9798 CBZ X0, 0x3BC97DC
	0x03BC979C ADRP X22, 0x594000
	0x03BC97A0 LDR X22, [X22 + 0x738]
	0x03BC97A4 MOV X20, X0
	0x03BC97A8 LDR X21, [X22]
	0x03BC97AC MOV X1, X21
	0x03BC97B0 BL 0x1C16E00

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move W0, [X0+504]
	005 Move W1, 4
	006 Move X2, X31
	007 Call TargetedDevicesExtensions.HasDevice, X0, X1
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {13}
	012 Move W0, 1
	013 Move W0, [X19+504]
	014 Move W1, 4
	015 Move X2, X31
	016 Call TargetedDevicesExtensions.WithDevice, X0, X1
	017 Move W1, 2
	018 Move X2, X31
	019 Call TargetedDevicesExtensions.WithoutDevice, X0, X1
	020 Move [X19+504], W0
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return 

Method: System.Void OnToggleManipulateBodyPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC97B4 CBZ X0, 0x3BC97D0
	0x03BC97B8 STR X0, [X19 + 0x38]
	0x03BC97BC LDR X21, [X22]

ISIL:
	001 Move W8, 1
	002 Move [X0+504], W8
	003 Return 

Method: System.Void OnManipulateHeadPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC97C0 MOV X0, X20
	0x03BC97C4 MOV X1, X21
	0x03BC97C8 BL 0x1C16E00
	0x03BC97CC CBNZ X0, 0x3BC97E0
	0x03BC97D0 MOV X0, X20
	0x03BC97D4 MOV X1, X21
	0x03BC97D8 BL 0x1C171E0
	0x03BC97DC STR X31, [X19 + 0x38]
	0x03BC97E0 LDRB W8, [X19 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move W0, [X0+504]
	005 Move W1, 8
	006 Move X2, X31
	007 Call TargetedDevicesExtensions.WithDevice, X0, X1
	008 Move [X19+504], W0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

Method: System.Void OnManipulateHeadCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC97E4 CBZ W8, 0x3BC97F8
	0x03BC97E8 LDP X20, X19, [X31 + 0x20]
	0x03BC97EC LDP X22, X21, [X31 + 0x10]
	0x03BC97F0 LDR X30, [X31], #0x30
	0x03BC97F4 RET
	0x03BC97F8 LDR X0, [X19 + 0x18]
	0x03BC97FC MOVZ W8, 0x1
	0x03BC9800 STRB W8, [X19 + 0x40]
	0x03BC9804 CBZ X0, 0x3BC9864

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move W0, [X0+504]
	005 Move W1, 8
	006 Move X2, X31
	007 Call TargetedDevicesExtensions.WithoutDevice, X0, X1
	008 Move [X19+504], W0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

Method: System.Void OnHandControllerModePerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9808 MOV X1, X31

ISIL:
	001 Return 

Method: System.Void OnCycleDevicesPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC980C BL 0x37451B4
	0x03BC9810 ADRP X8, 0x52E000
	0x03BC9814 LDR X8, [X8 + 0x3D8]
	0x03BC9818 MOV X20, X0
	0x03BC981C LDR X8, [X8]
	0x03BC9820 MOV X0, X8
	0x03BC9824 BL 0x1C16F10
	0x03BC9828 ADRP X8, 0x594000
	0x03BC982C LDR X8, [X8 + 0x740]
	0x03BC9830 MOV X1, X19
	0x03BC9834 MOV X3, X31
	0x03BC9838 MOV X21, X0
	0x03BC983C LDR X2, [X8]
	0x03BC9840 BL 0x2A719B8
	0x03BC9844 CBZ X20, 0x3BC9864
	0x03BC9848 MOV X0, X20
	0x03BC984C MOV X1, X21
	0x03BC9850 LDP X20, X19, [X31 + 0x20]
	0x03BC9854 LDP X22, X21, [X31 + 0x10]
	0x03BC9858 MOV X2, X31
	0x03BC985C LDR X30, [X31], #0x30
	0x03BC9860 B 0x3734A04
	0x03BC9864 BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move W0, [X0+504]
	005 Compare W0, 0
	006 JumpIfEqual {25}
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move W8, 2
	009 Move W1, 2
	010 Move X2, X31
	011 Call TargetedDevicesExtensions.HasDevice, X0, X1
	012 Move TEMP, X0
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfNotEqual {17}
	016 Move W8, 4
	017 Move W0, [X19+504]
	018 Move W1, 4
	019 Move X2, X31
	020 Call TargetedDevicesExtensions.HasDevice, X0, X1
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {27}
	025 Move W8, 1
	026 Move [X19+504], W8
	027 Move X30, [X31+16]
	028 Move X19, [X31+24]
	029 Return 

Method: System.Void OnStopManipulationPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9868 STR X30, [X31 - 0x30]!
	0x03BC986C STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X0+504], W31
	002 Return 

Method: System.Void OnMouseDeltaPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9870 STP X20, X19, [X31 + 0x20]
	0x03BC9874 ADRP X21, 0x819000
	0x03BC9878 LDRB W8, [X21 + 0xDE9]
	0x03BC987C MOV X20, X1
	0x03BC9880 MOV X19, X0
	0x03BC9884 TBNZ X8, 0x0, 0x3BC98B4
	0x03BC9888 ADRP X0, 0x52E000
	0x03BC988C LDR X0, [X0 + 0x3D8]
	0x03BC9890 BL 0x1C16CF4
	0x03BC9894 ADRP X0, 0x594000
	0x03BC9898 LDR X0, [X0 + 0x738]
	0x03BC989C BL 0x1C16CF4
	0x03BC98A0 ADRP X0, 0x594000
	0x03BC98A4 LDR X0, [X0 + 0x740]
	0x03BC98A8 BL 0x1C16CF4
	0x03BC98AC MOVZ W8, 0x1
	0x03BC98B0 STRB W8, [X21 + 0xDE9]
	0x03BC98B4 LDR X0, [X19 + 0x38]
	0x03BC98B8 MOV X1, X20
	0x03BC98BC MOV X2, X31
	0x03BC98C0 BL 0x33C0FDC
	0x03BC98C4 CBZ X0, 0x3BC9914
	0x03BC98C8 ADRP X22, 0x594000
	0x03BC98CC LDR X22, [X22 + 0x738]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x81A000
	007 Move [X31], X1
	008 Move [X31+8], X2
	009 Move X21, 0x581000
	010 Move W8, [X20+3549]
	011 Move X21, [X21+1344]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x581000
	018 Move X0, [X0+1344]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3549], W8
	022 Move X1, [X21]
	023 Add X0, X31, 0
	024 Call CallbackContext.ReadValue, X0
	025 Move [X19+548], S0
	026 Move [X19+552], S1
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X30, [X31+16]
	030 Move X21, [X31+24]
	031 Add X31, X31, 48
	032 Return 

Method: System.Void OnMouseDeltaCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC98D0 MOV X20, X0
	0x03BC98D4 LDR X21, [X22]
	0x03BC98D8 MOV X1, X21
	0x03BC98DC BL 0x1C16E00
	0x03BC98E0 CBZ X0, 0x3BC9980
	0x03BC98E4 STR X0, [X19 + 0x38]
	0x03BC98E8 LDR X21, [X22]
	0x03BC98EC MOV X0, X20
	0x03BC98F0 MOV X1, X21
	0x03BC98F4 BL 0x1C16E00
	0x03BC98F8 CBZ X0, 0x3BC9980
	0x03BC98FC LDR X8, [X19 + 0x38]
	0x03BC9900 CBZ X8, 0x3BC9918
	0x03BC9904 LDP X20, X19, [X31 + 0x20]
	0x03BC9908 LDP X22, X21, [X31 + 0x10]
	0x03BC990C LDR X30, [X31], #0x30
	0x03BC9910 RET
	0x03BC9914 STR X31, [X19 + 0x38]
	0x03BC9918 LDR X0, [X19 + 0x18]
	0x03BC991C STRB W31, [X19 + 0x40]
	0x03BC9920 CBZ X0, 0x3BC998C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x811000
	005 Move W8, [X20+1935]
	006 Move X19, X0
	007 Compare W8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, 0x533000
	010 Move X0, [X0+3848]
	011 Call 0x1C17CF4
	012 Move W8, 1
	013 Move [X20+1935], W8
	014 Move X8, 0x533000
	015 Move X8, [X8+3848]
	016 Move X8, [X8]
	017 Move X8, [X8+184]
	018 Move V0, [X8]
	019 Add X8, X19, 548
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move [X8], D0
	023 Move X30, [X31+32]
	024 Return 

Method: System.Void OnMouseScrollPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9924 ADRP X20, 0x52E000
	0x03BC9928 ADRP X21, 0x594000
	0x03BC992C LDR X20, [X20 + 0x3D8]
	0x03BC9930 LDR X21, [X21 + 0x740]
	0x03BC9934 MOV X1, X31
	0x03BC9938 BL 0x37451B4
	0x03BC993C LDR X8, [X20]
	0x03BC9940 MOV X20, X0
	0x03BC9944 MOV X0, X8
	0x03BC9948 BL 0x1C16F10
	0x03BC994C LDR X2, [X21]
	0x03BC9950 MOV X1, X19
	0x03BC9954 MOV X3, X31
	0x03BC9958 MOV X21, X0
	0x03BC995C BL 0x2A719B8
	0x03BC9960 CBZ X20, 0x3BC998C
	0x03BC9964 MOV X0, X20
	0x03BC9968 MOV X1, X21
	0x03BC996C LDP X20, X19, [X31 + 0x20]
	0x03BC9970 LDP X22, X21, [X31 + 0x10]
	0x03BC9974 MOV X2, X31
	0x03BC9978 LDR X30, [X31], #0x30
	0x03BC997C B 0x3734A5C
	0x03BC9980 MOV X0, X20

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x81A000
	007 Move [X31], X1
	008 Move [X31+8], X2
	009 Move X21, 0x581000
	010 Move W8, [X20+3550]
	011 Move X21, [X21+1344]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x581000
	018 Move X0, [X0+1344]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3550], W8
	022 Move X1, [X21]
	023 Add X0, X31, 0
	024 Call CallbackContext.ReadValue, X0
	025 Move [X19+556], S0
	026 Move [X19+560], S1
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X30, [X31+16]
	030 Move X21, [X31+24]
	031 Add X31, X31, 48
	032 Return 

Method: System.Void OnMouseScrollCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9984 MOV X1, X21
	0x03BC9988 BL 0x1C171E0
	0x03BC998C BL 0x1C16F20
	0x03BC9990 SUB X31, X31, 0x30
	0x03BC9994 STP X30, X21, [X31 + 0x10]
	0x03BC9998 STP X20, X19, [X31 + 0x20]
	0x03BC999C ADRP X20, 0x819000
	0x03BC99A0 ADRP X21, 0x594000
	0x03BC99A4 LDRB W8, [X20 + 0xDEA]
	0x03BC99A8 LDR X21, [X21 + 0x730]
	0x03BC99AC MOV X19, X0
	0x03BC99B0 TBNZ X8, 0x0, 0x3BC99C8
	0x03BC99B4 ADRP X0, 0x594000
	0x03BC99B8 LDR X0, [X0 + 0x730]
	0x03BC99BC BL 0x1C16CF4
	0x03BC99C0 MOVZ W8, 0x1
	0x03BC99C4 STRB W8, [X20 + 0xDEA]
	0x03BC99C8 LDR X0, [X21]
	0x03BC99CC LDR W8, [X0 + 0xE0]
	0x03BC99D0 CBNZ W8, 0x3BC99D8
	0x03BC99D4 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x811000
	005 Move W8, [X20+1935]
	006 Move X19, X0
	007 Compare W8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, 0x533000
	010 Move X0, [X0+3848]
	011 Call 0x1C17CF4
	012 Move W8, 1
	013 Move [X20+1935], W8
	014 Move X8, 0x533000
	015 Move X8, [X8+3848]
	016 Move X8, [X8]
	017 Move X8, [X8+184]
	018 Move V0, [X8]
	019 Add X8, X19, 556
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move [X8], D0
	023 Move X30, [X31+32]
	024 Return 

Method: System.Void OnRotateModeOverridePerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC99D8 LDUR V0, [X19 + 0x28]
	0x03BC99DC ADD X0, X31, 0x0
	0x03BC99E0 MOV X1, X31

ISIL:
	001 Move W8, 1
	002 Move [X0+564], W8
	003 Return 

Method: System.Void OnRotateModeOverrideCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC99E4 STR V0, [X31]
	0x03BC99E8 BL 0x37565F4

ISIL:
	001 Move [X0+564], W31
	002 Return 

Method: System.Void OnToggleMouseTransformationModePerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC99EC STR X0, [X19 + 0x10]
	0x03BC99F0 LDP X20, X19, [X31 + 0x20]
	0x03BC99F4 LDP X30, X21, [X31 + 0x10]
	0x03BC99F8 ADD X31, X31, 0x30
	0x03BC99FC RET
	0x03BC9A00 SUB X31, X31, 0x30
	0x03BC9A04 STP X30, X19, [X31 + 0x20]
	0x03BC9A08 LDR X1, [X0 + 0x10]
	0x03BC9A0C MOV X19, X0
	0x03BC9A10 ADD X0, X31, 0x10
	0x03BC9A14 MOV X2, X31
	0x03BC9A18 STP X31, X31, [X31 + 0x10]
	0x03BC9A1C BL 0x3757420
	0x03BC9A20 LDR V0, [X31 + 0x1]
	0x03BC9A24 STR V0, [X31]
	0x03BC9A28 STUR V0, [X19 + 0x28]
	0x03BC9A2C LDP X30, X19, [X31 + 0x20]
	0x03BC9A30 ADD X31, X31, 0x30
	0x03BC9A34 RET
	0x03BC9A38 SUB X31, X31, 0x20
	0x03BC9A3C STP X30, X19, [X31 + 0x10]
	0x03BC9A40 MOV X19, X0
	0x03BC9A44 ADD X0, X31, 0x0
	0x03BC9A48 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x81A000
	006 Move X20, 0x595000
	007 Move W8, [X21+3551]
	008 Move X20, [X20+1120]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x595000
	015 Move X0, [X0+1120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3551], W8
	019 Move X0, [X20]
	020 Move W20, [X19+492]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CSET not yet implemented."
	027 Move [X19+492], W8
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return 

Method: System.Void OnNegateModePerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9A4C STP X31, X31, [X31]
	0x03BC9A50 BL 0x3757420
	0x03BC9A54 LDR V0, [X31]

ISIL:
	001 Move W8, 1
	002 Move [X0+496], W8
	003 Return 

Method: System.Void OnNegateModeCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9A58 STR V0, [X19]
	0x03BC9A5C LDP X30, X19, [X31 + 0x10]

ISIL:
	001 Move [X0+496], W31
	002 Return 

Method: System.Void OnXConstraintPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9A60 ADD X31, X31, 0x20
	0x03BC9A64 RET
	0x03BC9A68 LDR X9, [X0 + 0x38]

ISIL:
	001 Move W8, 1
	002 Move [X0+565], W8
	003 Return 

Method: System.Void OnXConstraintCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9A6C CBZ X9, 0x3BC9A90
	0x03BC9A70 MOV X8, X0

ISIL:
	001 Move [X0+565], W31
	002 Return 

Method: System.Void OnYConstraintPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9A74 LDR X5, [X9 + 0x18]
	0x03BC9A78 LDR X0, [X9 + 0x40]
	0x03BC9A7C LDR X4, [X9 + 0x28]

ISIL:
	001 Move W8, 1
	002 Move [X0+566], W8
	003 Return 

Method: System.Void OnYConstraintCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9A80 MOV X3, X2
	0x03BC9A84 MOV X2, X1

ISIL:
	001 Move [X0+566], W31
	002 Return 

Method: System.Void OnZConstraintPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9A88 MOV X1, X8
	0x03BC9A8C BR X5
	0x03BC9A90 RET

ISIL:
	001 Move W8, 1
	002 Move [X0+567], W8
	003 Return 

Method: System.Void OnZConstraintCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9A94 MOV X1, X31
	0x03BC9A98 B 0x33BDD8C

ISIL:
	001 Move [X0+567], W31
	002 Return 

Method: System.Void OnResetPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9A9C ORR W0, W1, W0, 0x0
	0x03BC9AA0 RET
	0x03BC9AA4 BIC W0, W0, W1, 0x0

ISIL:
	001 Move W8, 1
	002 Move [X0+568], W8
	003 Return 

Method: System.Void OnResetCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9AA8 RET
	0x03BC9AAC BICS W31, W1, W0, 0x0

ISIL:
	001 Move [X0+568], W31
	002 Return 

Method: System.Void OnToggleCursorLockPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9AB0 CSET W0, EQ
	0x03BC9AB4 RET
	0x03BC9AB8 RET
	0x03BC9ABC STP X30, X23, [X31 - 0x30]!
	0x03BC9AC0 STP X22, X21, [X31 + 0x10]
	0x03BC9AC4 STP X20, X19, [X31 + 0x20]
	0x03BC9AC8 ADRP X19, 0x819000
	0x03BC9ACC ADRP X20, 0x594000
	0x03BC9AD0 LDRB W8, [X19 + 0xDEB]
	0x03BC9AD4 LDR X20, [X20 + 0x748]
	0x03BC9AD8 TBNZ X8, 0x0, 0x3BC9B38

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, X31
	005 Call Cursor.get_lockState
	006 Compare W0, 0
	007 JumpIfEqual {9}
	008 Move W0, W31
	009 Move W0, [X19+436]
	010 Move X1, X31
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call Cursor.set_lockState, X0
	014 Return 

Method: System.Void OnToggleDevicePositionTargetPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9ADC ADRP X0, 0x52A000
	0x03BC9AE0 LDR X0, [X0 + 0x970]
	0x03BC9AE4 BL 0x1C16CF4
	0x03BC9AE8 ADRP X0, 0x52A000
	0x03BC9AEC LDR X0, [X0 + 0xA28]
	0x03BC9AF0 BL 0x1C16CF4
	0x03BC9AF4 ADRP X0, 0x52A000
	0x03BC9AF8 LDR X0, [X0 + 0xD78]
	0x03BC9AFC BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {10}
	004 Move W8, [X0+500]
	005 NotImplemented "Instruction ORN not yet implemented."
	006 And W8, W8, 1
	007 Move [X0+500], W8
	008 Move X30, [X31+16]
	009 Return 
	010 Call 0x1C17F20

Method: System.Void OnTogglePrimary2DAxisTargetPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9B00 ADRP X0, 0x52A000
	0x03BC9B04 LDR X0, [X0 + 0x598]
	0x03BC9B08 BL 0x1C16CF4
	0x03BC9B0C ADRP X0, 0x594000
	0x03BC9B10 LDR X0, [X0 + 0x748]
	0x03BC9B14 BL 0x1C16CF4
	0x03BC9B18 ADRP X0, 0x594000
	0x03BC9B1C LDR X0, [X0 + 0x460]
	0x03BC9B20 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {10}
	004 Move W8, [X0+500]
	005 NotImplemented "Instruction ORN not yet implemented."
	006 And W8, W8, 2
	007 Move [X0+500], W8
	008 Move X30, [X31+16]
	009 Return 
	010 Call 0x1C17F20

Method: System.Void OnToggleSecondary2DAxisTargetPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9B24 ADRP X0, 0x594000
	0x03BC9B28 LDR X0, [X0 + 0x750]
	0x03BC9B2C BL 0x1C16CF4
	0x03BC9B30 MOVZ W8, 0x1
	0x03BC9B34 STRB W8, [X19 + 0xDEB]
	0x03BC9B38 LDR X0, [X20]
	0x03BC9B3C BL 0x25D6BC4
	0x03BC9B40 CBZ X0, 0x3BC9D50
	0x03BC9B44 LDRB W8, [X0 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {10}
	004 Move W8, [X0+500]
	005 NotImplemented "Instruction ORN not yet implemented."
	006 And W8, W8, 4
	007 Move [X0+500], W8
	008 Move X30, [X31+16]
	009 Return 
	010 Call 0x1C17F20

Method: System.Void OnAxis2DPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9B48 CBZ W8, 0x3BC9C78
	0x03BC9B4C LDR X0, [X20]
	0x03BC9B50 BL 0x25D6BC4
	0x03BC9B54 CBZ X0, 0x3BC9D50
	0x03BC9B58 LDRB W8, [X0 + 0x19]
	0x03BC9B5C CBZ W8, 0x3BC9B84
	0x03BC9B60 ADRP X8, 0x52A000
	0x03BC9B64 LDR X8, [X8 + 0x970]
	0x03BC9B68 LDR X0, [X8]
	0x03BC9B6C LDR W8, [X0 + 0xE0]
	0x03BC9B70 CBNZ W8, 0x3BC9B78
	0x03BC9B74 BL 0x1C16DFC
	0x03BC9B78 MOV X0, X31
	0x03BC9B7C BL 0x3C03278
	0x03BC9B80 TBZ X0, 0x0, 0x3BC9C78
	0x03BC9B84 ADRP X22, 0x594000
	0x03BC9B88 LDR X22, [X22 + 0x460]
	0x03BC9B8C LDR X0, [X22]
	0x03BC9B90 LDR W8, [X0 + 0xE0]
	0x03BC9B94 CBNZ W8, 0x3BC9B9C
	0x03BC9B98 BL 0x1C16DFC
	0x03BC9B9C ADRP X23, 0x819000
	0x03BC9BA0 LDRB W8, [X23 + 0xDE5]
	0x03BC9BA4 CBNZ W8, 0x3BC9BBC
	0x03BC9BA8 ADRP X0, 0x594000
	0x03BC9BAC LDR X0, [X0 + 0x460]
	0x03BC9BB0 BL 0x1C16CF4
	0x03BC9BB4 MOVZ W8, 0x1
	0x03BC9BB8 STRB W8, [X23 + 0xDE5]
	0x03BC9BBC LDR X0, [X22]
	0x03BC9BC0 LDR W8, [X0 + 0xE0]
	0x03BC9BC4 CBNZ W8, 0x3BC9BD0
	0x03BC9BC8 BL 0x1C16DFC
	0x03BC9BCC LDR X0, [X22]
	0x03BC9BD0 ADRP X21, 0x52A000
	0x03BC9BD4 LDR X21, [X21 + 0x598]
	0x03BC9BD8 LDR X9, [X0 + 0xB8]
	0x03BC9BDC LDR X8, [X21]
	0x03BC9BE0 LDR X19, [X9 + 0x18]
	0x03BC9BE4 LDR W10, [X8 + 0xE0]
	0x03BC9BE8 CBNZ W10, 0x3BC9BF4
	0x03BC9BEC MOV X0, X8
	0x03BC9BF0 BL 0x1C16DFC
	0x03BC9BF4 MOV X0, X19
	0x03BC9BF8 MOV X1, X31
	0x03BC9BFC MOV X2, X31
	0x03BC9C00 BL 0x3C3883C
	0x03BC9C04 TBZ X0, 0x0, 0x3BC9C88
	0x03BC9C08 LDR X0, [X20]
	0x03BC9C0C BL 0x25D6BC4
	0x03BC9C10 CBZ X0, 0x3BC9D50
	0x03BC9C14 LDR X8, [X21]
	0x03BC9C18 LDR X19, [X0 + 0x20]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D10
	003 Move [X31+32], D9
	004 Move [X31+40], D8
	005 Move [X31+48], X30
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X20, 0x81A000
	010 Move [X31], X1
	011 Move [X31+8], X2
	012 Move X21, 0x581000
	013 Move W8, [X20+3552]
	014 Move X21, [X21+1344]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x581000
	021 Move X0, [X0+1344]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3552], W8
	025 Move X1, [X21]
	026 Add X0, X31, 0
	027 Call CallbackContext.ReadValue, X0
	028 Move X20, 0x819000
	029 Move W8, [X20+915]
	030 Move V8, V0
	031 Move V9, V1
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0x52B000
	035 Move X0, [X0+1448]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+915], W8
	039 Multiply S0, S8, S8
	040 Multiply S1, S9, S9
	041 Add S10, S0, S1
	042 Move S0, 1
	043 NotImplemented "Instruction FCMP not yet implemented."
	044 Move X8, 0x52B000
	045 Move X8, [X8+1448]
	046 Move X0, [X8]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 NotImplemented "Instruction FSQRT not yet implemented."
	052 NotImplemented "Instruction FDIV not yet implemented."
	053 NotImplemented "Instruction FDIV not yet implemented."
	054 Move [X19+572], S8
	055 Move [X19+576], S9
	056 Move X20, [X31+64]
	057 Move X19, [X31+72]
	058 Move X30, [X31+48]
	059 Move X21, [X31+56]
	060 Move D9, [X31+32]
	061 Move D8, [X31+40]
	062 Move V10, [X31+16]
	063 Add X31, X31, 80
	064 Return 

Method: System.Void OnAxis2DCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9C1C LDR W9, [X8 + 0xE0]
	0x03BC9C20 CBNZ W9, 0x3BC9C2C
	0x03BC9C24 MOV X0, X8
	0x03BC9C28 BL 0x1C16DFC
	0x03BC9C2C MOV X0, X19
	0x03BC9C30 MOV X1, X31
	0x03BC9C34 MOV X2, X31
	0x03BC9C38 BL 0x3C3883C
	0x03BC9C3C TBZ X0, 0x0, 0x3BC9CEC
	0x03BC9C40 ADRP X8, 0x52A000
	0x03BC9C44 LDR X8, [X8 + 0xA28]
	0x03BC9C48 LDR X0, [X8]
	0x03BC9C4C LDR W8, [X0 + 0xE0]
	0x03BC9C50 CBNZ W8, 0x3BC9C58
	0x03BC9C54 BL 0x1C16DFC
	0x03BC9C58 ADRP X8, 0x594000
	0x03BC9C5C LDR X8, [X8 + 0x750]
	0x03BC9C60 LDP X20, X19, [X31 + 0x20]
	0x03BC9C64 LDP X22, X21, [X31 + 0x10]
	0x03BC9C68 MOV X1, X31
	0x03BC9C6C LDR X0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x811000
	005 Move W8, [X20+1935]
	006 Move X19, X0
	007 Compare W8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, 0x533000
	010 Move X0, [X0+3848]
	011 Call 0x1C17CF4
	012 Move W8, 1
	013 Move [X20+1935], W8
	014 Move X8, 0x533000
	015 Move X8, [X8+3848]
	016 Move X8, [X8]
	017 Move X8, [X8+184]
	018 Move V0, [X8]
	019 Add X8, X19, 572
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move [X8], D0
	023 Move X30, [X31+32]
	024 Return 

Method: System.Void OnRestingHandAxis2DPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9C70 LDP X30, X23, [X31], #0x30
	0x03BC9C74 B 0x3C06A04
	0x03BC9C78 LDP X20, X19, [X31 + 0x20]
	0x03BC9C7C LDP X22, X21, [X31 + 0x10]
	0x03BC9C80 LDP X30, X23, [X31], #0x30
	0x03BC9C84 RET
	0x03BC9C88 LDR X0, [X22]
	0x03BC9C8C LDR W8, [X0 + 0xE0]
	0x03BC9C90 CBNZ W8, 0x3BC9C98
	0x03BC9C94 BL 0x1C16DFC
	0x03BC9C98 LDRB W8, [X23 + 0xDE5]
	0x03BC9C9C CBNZ W8, 0x3BC9CB4
	0x03BC9CA0 ADRP X0, 0x594000
	0x03BC9CA4 LDR X0, [X0 + 0x460]
	0x03BC9CA8 BL 0x1C16CF4
	0x03BC9CAC MOVZ W8, 0x1
	0x03BC9CB0 STRB W8, [X23 + 0xDE5]
	0x03BC9CB4 LDR X0, [X22]
	0x03BC9CB8 LDR W8, [X0 + 0xE0]
	0x03BC9CBC CBNZ W8, 0x3BC9CC8
	0x03BC9CC0 BL 0x1C16DFC
	0x03BC9CC4 LDR X0, [X22]
	0x03BC9CC8 LDR X8, [X21]
	0x03BC9CCC LDR X9, [X0 + 0xB8]
	0x03BC9CD0 LDR W10, [X8 + 0xE0]
	0x03BC9CD4 LDR X19, [X9 + 0x18]
	0x03BC9CD8 CBNZ W10, 0x3BC9CE4
	0x03BC9CDC MOV X0, X8
	0x03BC9CE0 BL 0x1C16DFC
	0x03BC9CE4 MOV X0, X19
	0x03BC9CE8 B 0x3BC9D3C
	0x03BC9CEC LDR X0, [X21]
	0x03BC9CF0 LDR W8, [X0 + 0xE0]
	0x03BC9CF4 CBNZ W8, 0x3BC9CFC
	0x03BC9CF8 BL 0x1C16DFC
	0x03BC9CFC ADRP X8, 0x52A000
	0x03BC9D00 LDR X8, [X8 + 0xD78]
	0x03BC9D04 MOV X0, X19
	0x03BC9D08 LDR X1, [X8]
	0x03BC9D0C BL 0x222D35C
	0x03BC9D10 CBZ X19, 0x3BC9D50
	0x03BC9D14 MOV X20, X0
	0x03BC9D18 MOV X0, X19
	0x03BC9D1C MOV X1, X31
	0x03BC9D20 BL 0x3C389D4
	0x03BC9D24 CBZ X20, 0x3BC9D50
	0x03BC9D28 MOV X1, X0
	0x03BC9D2C MOV X0, X20
	0x03BC9D30 MOV X2, X31
	0x03BC9D34 BL 0x3C38A84
	0x03BC9D38 MOV X0, X20
	0x03BC9D3C LDP X20, X19, [X31 + 0x20]
	0x03BC9D40 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D10
	003 Move [X31+32], D9
	004 Move [X31+40], D8
	005 Move [X31+48], X30
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X20, 0x81A000
	010 Move [X31], X1
	011 Move [X31+8], X2
	012 Move X21, 0x581000
	013 Move W8, [X20+3553]
	014 Move X21, [X21+1344]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x581000
	021 Move X0, [X0+1344]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3553], W8
	025 Move X1, [X21]
	026 Add X0, X31, 0
	027 Call CallbackContext.ReadValue, X0
	028 Move X20, 0x819000
	029 Move W8, [X20+915]
	030 Move V8, V0
	031 Move V9, V1
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0x52B000
	035 Move X0, [X0+1448]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+915], W8
	039 Multiply S0, S8, S8
	040 Multiply S1, S9, S9
	041 Add S10, S0, S1
	042 Move S0, 1
	043 NotImplemented "Instruction FCMP not yet implemented."
	044 Move X8, 0x52B000
	045 Move X8, [X8+1448]
	046 Move X0, [X8]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 NotImplemented "Instruction FSQRT not yet implemented."
	052 NotImplemented "Instruction FDIV not yet implemented."
	053 NotImplemented "Instruction FDIV not yet implemented."
	054 Move [X19+580], S8
	055 Move [X19+584], S9
	056 Move X20, [X31+64]
	057 Move X19, [X31+72]
	058 Move X30, [X31+48]
	059 Move X21, [X31+56]
	060 Move D9, [X31+32]
	061 Move D8, [X31+40]
	062 Move V10, [X31+16]
	063 Add X31, X31, 80
	064 Return 

Method: System.Void OnRestingHandAxis2DCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9D44 MOV X1, X31
	0x03BC9D48 LDP X30, X23, [X31], #0x30
	0x03BC9D4C B 0x3C39674
	0x03BC9D50 BL 0x1C16F20
	0x03BC9D54 LDRB W0, [X0 + 0x18]
	0x03BC9D58 RET
	0x03BC9D5C AND W8, W1, 0x1
	0x03BC9D60 STRB W8, [X0 + 0x18]
	0x03BC9D64 RET
	0x03BC9D68 LDRB W0, [X0 + 0x19]
	0x03BC9D6C RET
	0x03BC9D70 AND W8, W1, 0x1
	0x03BC9D74 STRB W8, [X0 + 0x19]
	0x03BC9D78 RET
	0x03BC9D7C LDR X0, [X0 + 0x20]
	0x03BC9D80 RET
	0x03BC9D84 STR X1, [X0 + 0x20]
	0x03BC9D88 RET
	0x03BC9D8C STP X30, X21, [X31 - 0x20]!
	0x03BC9D90 STP X20, X19, [X31 + 0x10]
	0x03BC9D94 ADRP X21, 0x819000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x811000
	005 Move W8, [X20+1935]
	006 Move X19, X0
	007 Compare W8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, 0x533000
	010 Move X0, [X0+3848]
	011 Call 0x1C17CF4
	012 Move W8, 1
	013 Move [X20+1935], W8
	014 Move X8, 0x533000
	015 Move X8, [X8+3848]
	016 Move X8, [X8]
	017 Move X8, [X8+184]
	018 Move V0, [X8]
	019 Add X8, X19, 580
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move [X8], D0
	023 Move X30, [X31+32]
	024 Return 

Method: System.Void OnGripPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9D98 ADRP X20, 0x594000
	0x03BC9D9C LDRB W8, [X21 + 0xDEC]
	0x03BC9DA0 LDR X20, [X20 + 0x758]

ISIL:
	001 Move W8, 1
	002 Move [X0+588], W8
	003 Return 

Method: System.Void OnGripCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9DA4 MOV X19, X0
	0x03BC9DA8 TBNZ X8, 0x0, 0x3BC9DC0

ISIL:
	001 Move [X0+588], W31
	002 Return 

Method: System.Void OnTriggerPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9DAC ADRP X0, 0x594000
	0x03BC9DB0 LDR X0, [X0 + 0x758]
	0x03BC9DB4 BL 0x1C16CF4

ISIL:
	001 Move W8, 1
	002 Move [X0+589], W8
	003 Return 

Method: System.Void OnTriggerCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9DB8 MOVZ W8, 0x1
	0x03BC9DBC STRB W8, [X21 + 0xDEC]

ISIL:
	001 Move [X0+589], W31
	002 Return 

Method: System.Void OnPrimaryButtonPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9DC0 MOVZ W8, 0x1
	0x03BC9DC4 STRB W8, [X19 + 0x19]
	0x03BC9DC8 LDR X1, [X20]

ISIL:
	001 Move W8, 1
	002 Move [X0+590], W8
	003 Return 

Method: System.Void OnPrimaryButtonCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9DCC MOV X0, X19
	0x03BC9DD0 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X0+590], W31
	002 Return 

Method: System.Void OnSecondaryButtonPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9DD4 LDP X30, X21, [X31], #0x20
	0x03BC9DD8 B 0x25D71B0
	0x03BC9DDC LDR X0, [X0 + 0x190]

ISIL:
	001 Move W8, 1
	002 Move [X0+591], W8
	003 Return 

Method: System.Void OnSecondaryButtonCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9DE0 RET
	0x03BC9DE4 STR X1, [X0 + 0x190]

ISIL:
	001 Move [X0+591], W31
	002 Return 

Method: System.Void OnMenuPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9DE8 RET
	0x03BC9DEC LDR X0, [X0 + 0x198]
	0x03BC9DF0 RET

ISIL:
	001 Move W8, 1
	002 Move [X0+592], W8
	003 Return 

Method: System.Void OnMenuCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9DF4 STR X1, [X0 + 0x198]
	0x03BC9DF8 RET

ISIL:
	001 Move [X0+592], W31
	002 Return 

Method: System.Void OnPrimary2DAxisClickPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9DFC LDR X0, [X0 + 0x1A0]
	0x03BC9E00 RET
	0x03BC9E04 STR X1, [X0 + 0x1A0]

ISIL:
	001 Move W8, 1
	002 Move [X0+593], W8
	003 Return 

Method: System.Void OnPrimary2DAxisClickCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9E08 RET
	0x03BC9E0C LDR X0, [X0 + 0x1A8]

ISIL:
	001 Move [X0+593], W31
	002 Return 

Method: System.Void OnSecondary2DAxisClickPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9E10 RET
	0x03BC9E14 STR X1, [X0 + 0x1A8]
	0x03BC9E18 RET

ISIL:
	001 Move W8, 1
	002 Move [X0+594], W8
	003 Return 

Method: System.Void OnSecondary2DAxisClickCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9E1C LDR X0, [X0 + 0x1B0]
	0x03BC9E20 RET

ISIL:
	001 Move [X0+594], W31
	002 Return 

Method: System.Void OnPrimary2DAxisTouchPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9E24 STR X1, [X0 + 0x1B0]
	0x03BC9E28 RET
	0x03BC9E2C LDR X0, [X0 + 0x1B8]

ISIL:
	001 Move W8, 1
	002 Move [X0+595], W8
	003 Return 

Method: System.Void OnPrimary2DAxisTouchCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9E30 RET
	0x03BC9E34 STR X1, [X0 + 0x1B8]

ISIL:
	001 Move [X0+595], W31
	002 Return 

Method: System.Void OnSecondary2DAxisTouchPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9E38 RET
	0x03BC9E3C LDR X0, [X0 + 0x1C0]
	0x03BC9E40 RET

ISIL:
	001 Move W8, 1
	002 Move [X0+596], W8
	003 Return 

Method: System.Void OnSecondary2DAxisTouchCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9E44 STR X1, [X0 + 0x1C0]
	0x03BC9E48 RET

ISIL:
	001 Move [X0+596], W31
	002 Return 

Method: System.Void OnPrimaryTouchPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9E4C LDR X0, [X0 + 0x1C8]
	0x03BC9E50 RET
	0x03BC9E54 STR X1, [X0 + 0x1C8]

ISIL:
	001 Move W8, 1
	002 Move [X0+597], W8
	003 Return 

Method: System.Void OnPrimaryTouchCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9E58 RET
	0x03BC9E5C LDR X0, [X0 + 0x1D0]

ISIL:
	001 Move [X0+597], W31
	002 Return 

Method: System.Void OnSecondaryTouchPerformed(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9E60 RET
	0x03BC9E64 STR X1, [X0 + 0x1D0]
	0x03BC9E68 RET

ISIL:
	001 Move W8, 1
	002 Move [X0+598], W8
	003 Return 

Method: System.Void OnSecondaryTouchCanceled(UnityEngine.InputSystem.InputAction/CallbackContext context)

Disassembly:
	0x03BC9E6C LDR X0, [X0 + 0x1D8]
	0x03BC9E70 RET

ISIL:
	001 Move [X0+598], W31
	002 Return 

Method: UnityEngine.InputSystem.InputAction GetInputAction(UnityEngine.InputSystem.InputActionReference actionReference)

Disassembly:
	0x03BC940C MOV X3, X31
	0x03BC9410 MOV V8.16B, V3.16B
	0x03BC9414 MOV V9.16B, V2.16B
	0x03BC9418 MOV V10.16B, V1.16B
	0x03BC941C MOV V11.16B, V0.16B
	0x03BC9420 BL 0x3B874A8
	0x03BC9424 LDR V0, [X31 + 0x3C]
	0x03BC9428 ADD X2, X31, 0x38
	0x03BC942C MOV X0, X21
	0x03BC9430 MOV X1, X20
	0x03BC9434 MOV X3, X31
	0x03BC9438 FDIV S10, S0, S10
	0x03BC943C BL 0x3B874A8
	0x03BC9440 LDR V0, [X31 + 0x38]
	0x03BC9444 FMUL S1, S11, S8
	0x03BC9448 FDIV S0, S0, S9
	0x03BC944C FCMP S0, S10
	0x03BC9450 FCSEL S0, S0, S10, MI
	0x03BC9454 CSEL X20, X20, X22, MI
	0x03BC9458 BL 0x3BBD468
	0x03BC945C LDP S16, S1, [X20]
	0x03BC9460 LDP S2, S3, [X20 + 0x8]
	0x03BC9464 LDP S4, S5, [X21]
	0x03BC9468 LDP S6, S7, [X21 + 0x8]
	0x03BC946C STR S0, [X31]
	0x03BC9470 MOV V0.16B, V16.16B
	0x03BC9474 MOV X0, X31
	0x03BC9478 BL 0x3B47948
	0x03BC947C STP S0, S1, [X19]
	0x03BC9480 STP S2, S3, [X19 + 0x8]
	0x03BC9484 LDP X20, X19, [X31 + 0x50]
	0x03BC9488 LDP X22, X21, [X31 + 0x40]
	0x03BC948C LDR X30, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x81A000
	006 Move X21, 0x52B000
	007 Move W8, [X20+3554]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x52B000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3554], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X1, X31
	026 Move X2, X31
	027 Call Object.op_Inequality, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {42}
	032 Compare X19, 0
	033 JumpIfEqual {48}
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X1, X31
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call InputActionReference.get_action, X0
	041 Return X0
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X0, X31
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0
	048 Call 0x1C17F20

Method: System.Boolean TryExecuteCommand(UnityEngine.InputSystem.LowLevel.InputDeviceCommand* commandPtr, out System.Int64 result)

Disassembly:
	0x03BC9E74 STR X1, [X0 + 0x1D8]
	0x03BC9E78 RET
	0x03BC9E7C LDR X0, [X0 + 0x1E0]
	0x03BC9E80 RET
	0x03BC9E84 STR X1, [X0 + 0x1E0]
	0x03BC9E88 RET
	0x03BC9E8C LDR X0, [X0 + 0x1E8]
	0x03BC9E90 RET
	0x03BC9E94 STR X1, [X0 + 0x1E8]
	0x03BC9E98 RET
	0x03BC9E9C LDR X0, [X0 + 0x1F0]
	0x03BC9EA0 RET
	0x03BC9EA4 STR X1, [X0 + 0x1F0]
	0x03BC9EA8 RET
	0x03BC9EAC LDR X0, [X0 + 0x1F8]
	0x03BC9EB0 RET
	0x03BC9EB4 STR X1, [X0 + 0x1F8]
	0x03BC9EB8 RET
	0x03BC9EBC LDR X0, [X0 + 0x200]
	0x03BC9EC0 RET
	0x03BC9EC4 STR X1, [X0 + 0x200]
	0x03BC9EC8 RET
	0x03BC9ECC LDR X0, [X0 + 0x208]
	0x03BC9ED0 RET
	0x03BC9ED4 STR X1, [X0 + 0x208]
	0x03BC9ED8 RET
	0x03BC9EDC LDR X0, [X0 + 0x210]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {28}
	007 Move W21, [X0]
	008 Move X20, X0
	009 Move X0, X31
	010 Move X19, X1
	011 Call RequestSyncCommand.get_Type
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W8, 1
	014 Move X0, X31
	015 Call QueryCanRunInBackground.get_Type
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W8, 1
	018 Move [X20+8], W8
	019 Move W0, 1
	020 Move X8, X31
	021 Move W0, W31
	022 Move [X19], X8
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Return X0
	028 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03BC9EE0 RET
	0x03BC9EE4 STR X1, [X0 + 0x210]
	0x03BC9EE8 RET
	0x03BC9EEC STP X29, X30, [X31 - 0x60]!
	0x03BC9EF0 STP X28, X27, [X31 + 0x10]
	0x03BC9EF4 STP X26, X25, [X31 + 0x20]
	0x03BC9EF8 STP X24, X23, [X31 + 0x30]
	0x03BC9EFC STP X22, X21, [X31 + 0x40]
	0x03BC9F00 STP X20, X19, [X31 + 0x50]
	0x03BC9F04 ADRP X24, 0x819000
	0x03BC9F08 ADRP X23, 0x594000
	0x03BC9F0C ADRP X27, 0x57B000
	0x03BC9F10 ADRP X22, 0x552000
	0x03BC9F14 ADRP X21, 0x57B000
	0x03BC9F18 ADRP X29, 0x552000
	0x03BC9F1C ADRP X28, 0x594000
	0x03BC9F20 ADRP X26, 0x552000
	0x03BC9F24 ADRP X20, 0x57B000
	0x03BC9F28 ADRP X25, 0x57E000
	0x03BC9F2C LDR X23, [X23 + 0x760]
	0x03BC9F30 LDR X27, [X27 + 0xE38]
	0x03BC9F34 LDR X22, [X22 + 0x138]
	0x03BC9F38 LDR X21, [X21 + 0xE30]
	0x03BC9F3C LDR X29, [X29 + 0x118]
	0x03BC9F40 LDR X28, [X28 + 0x768]
	0x03BC9F44 LDR X26, [X26 + 0x328]
	0x03BC9F48 LDR X20, [X20 + 0xE18]
	0x03BC9F4C LDR X25, [X25 + 0x970]
	0x03BC9F50 LDRB W8, [X24 + 0xDED]
	0x03BC9F54 MOV X19, X0
	0x03BC9F58 TBNZ X8, 0x0, 0x3BCA054
	0x03BC9F5C ADRP X0, 0x57B000
	0x03BC9F60 LDR X0, [X0 + 0xE30]
	0x03BC9F64 BL 0x1C16CF4
	0x03BC9F68 ADRP X0, 0x57B000
	0x03BC9F6C LDR X0, [X0 + 0xE18]
	0x03BC9F70 BL 0x1C16CF4
	0x03BC9F74 ADRP X0, 0x57B000
	0x03BC9F78 LDR X0, [X0 + 0xE38]
	0x03BC9F7C BL 0x1C16CF4
	0x03BC9F80 ADRP X0, 0x57B000
	0x03BC9F84 LDR X0, [X0 + 0xEE0]
	0x03BC9F88 BL 0x1C16CF4
	0x03BC9F8C ADRP X0, 0x594000
	0x03BC9F90 LDR X0, [X0 + 0x768]
	0x03BC9F94 BL 0x1C16CF4
	0x03BC9F98 ADRP X0, 0x552000
	0x03BC9F9C LDR X0, [X0 + 0x320]
	0x03BC9FA0 BL 0x1C16CF4
	0x03BC9FA4 ADRP X0, 0x552000
	0x03BC9FA8 LDR X0, [X0 + 0x118]
	0x03BC9FAC BL 0x1C16CF4
	0x03BC9FB0 ADRP X0, 0x594000
	0x03BC9FB4 LDR X0, [X0 + 0x770]
	0x03BC9FB8 BL 0x1C16CF4
	0x03BC9FBC ADRP X0, 0x552000
	0x03BC9FC0 LDR X0, [X0 + 0x328]
	0x03BC9FC4 BL 0x1C16CF4
	0x03BC9FC8 ADRP X0, 0x594000
	0x03BC9FCC LDR X0, [X0 + 0x778]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x81A000
	008 Move X23, 0x595000
	009 Move X20, 0x595000
	010 Move W8, [X22+3555]
	011 Move X23, [X23+1824]
	012 Move X20, [X20+1832]
	013 Move X19, X0
	014 Add X21, X0, 392
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x595000
	020 Move X0, [X0+1832]
	021 Call 0x1C17CF4
	022 Move X0, 0x595000
	023 Move X0, [X0+1824]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+3555], W8
	027 Move X0, [X23]
	028 Call 0x1C17F10
	029 Move X1, [X20]
	030 Move X20, X0
	031 Call List`1<Object>..ctor, X0
	032 Move X9, -51232768
	033 Move X10, -51240960
	034 Move V0, [X9+51]
	035 Move V1, [X10+250]
	036 Move W8, 2
	037 Move [X19+368], X20
	038 Move X9, -51228672
	039 Move [X19+388], W8
	040 Move [X21], V0
	041 Move [X21+8], V1
	042 Move V0, 0
	043 Move X10, -51228672
	044 Move V2, [X9+2984]
	045 Move [X19+456], D0
	046 Move V0, [X10+2584]
	047 Move W8, 1
	048 Move W9, 257
	049 Move W10, 3
	050 Move [X19+424], D2
	051 Move [X19+436], W8
	052 NotImplemented "Instruction STRH not yet implemented."
	053 Move [X19+464], W8
	054 Move [X19+468], W10
	055 Move [X19+472], W8
	056 Move [X19+476], W10
	057 Move [X19+480], W8
	058 Move [X19+484], W10
	059 NotImplemented "Instruction STRH not yet implemented."
	060 Move [X19+492], W8
	061 Move [X21+108], D0
	062 Move X0, X19
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move X1, X31
	068 Move X30, [X31+48]
	069 Move X23, [X31+56]
	070 Call MonoBehaviour..ctor, X0
	071 Return 

Method: System.Void .cctor()

Disassembly:
	0x03BC9FD0 BL 0x1C16CF4
	0x03BC9FD4 ADRP X0, 0x57E000
	0x03BC9FD8 LDR X0, [X0 + 0x970]
	0x03BC9FDC BL 0x1C16CF4
	0x03BC9FE0 ADRP X0, 0x594000
	0x03BC9FE4 LDR X0, [X0 + 0x780]
	0x03BC9FE8 BL 0x1C16CF4
	0x03BC9FEC ADRP X0, 0x552000
	0x03BC9FF0 LDR X0, [X0 + 0x138]
	0x03BC9FF4 BL 0x1C16CF4
	0x03BC9FF8 ADRP X0, 0x594000
	0x03BC9FFC LDR X0, [X0 + 0x788]
	0x03BCA000 BL 0x1C16CF4
	0x03BCA004 ADRP X0, 0x593000
	0x03BCA008 LDR X0, [X0 + 0x790]
	0x03BCA00C BL 0x1C16CF4
	0x03BCA010 ADRP X0, 0x57A000
	0x03BCA014 LDR X0, [X0 + 0xEB8]
	0x03BCA018 BL 0x1C16CF4
	0x03BCA01C ADRP X0, 0x593000
	0x03BCA020 LDR X0, [X0 + 0x798]
	0x03BCA024 BL 0x1C16CF4
	0x03BCA028 ADRP X0, 0x593000
	0x03BCA02C LDR X0, [X0 + 0x7A0]
	0x03BCA030 BL 0x1C16CF4
	0x03BCA034 ADRP X0, 0x593000
	0x03BCA038 LDR X0, [X0 + 0x760]
	0x03BCA03C BL 0x1C16CF4
	0x03BCA040 ADRP X0, 0x593000
	0x03BCA044 LDR X0, [X0 + 0x7A8]
	0x03BCA048 BL 0x1C16CF4
	0x03BCA04C MOVZ W8, 0x1
	0x03BCA050 STRB W8, [X24 + 0xDED]
	0x03BCA054 MOV X0, X19
	0x03BCA058 MOV X1, X31
	0x03BCA05C BL 0x37DB700
	0x03BCA060 LDR X1, [X23]
	0x03BCA064 LDR X2, [X27]
	0x03BCA068 MOV X0, X19
	0x03BCA06C BL 0x21FC754
	0x03BCA070 STR X0, [X19 + 0x190]
	0x03BCA074 LDR X1, [X22]
	0x03BCA078 LDR X2, [X21]
	0x03BCA07C MOV X0, X19
	0x03BCA080 BL 0x21FC754
	0x03BCA084 STR X0, [X19 + 0x198]
	0x03BCA088 LDR X1, [X29]
	0x03BCA08C LDR X2, [X21]
	0x03BCA090 MOV X0, X19
	0x03BCA094 BL 0x21FC754
	0x03BCA098 STR X0, [X19 + 0x1A0]
	0x03BCA09C LDR X1, [X28]
	0x03BCA0A0 LDR X2, [X27]
	0x03BCA0A4 MOV X0, X19
	0x03BCA0A8 BL 0x21FC754
	0x03BCA0AC STR X0, [X19 + 0x1A8]
	0x03BCA0B0 LDR X1, [X26]
	0x03BCA0B4 LDR X2, [X20]
	0x03BCA0B8 MOV X0, X19
	0x03BCA0BC BL 0x21FC754
	0x03BCA0C0 STR X0, [X19 + 0x1B0]
	0x03BCA0C4 LDR X1, [X25]
	0x03BCA0C8 LDR X2, [X20]
	0x03BCA0CC MOV X0, X19
	0x03BCA0D0 BL 0x21FC754
	0x03BCA0D4 STR X0, [X19 + 0x1B8]
	0x03BCA0D8 ADRP X8, 0x551000
	0x03BCA0DC LDR X8, [X8 + 0x320]
	0x03BCA0E0 LDR X2, [X20]
	0x03BCA0E4 MOV X0, X19
	0x03BCA0E8 LDR X1, [X8]
	0x03BCA0EC BL 0x21FC754
	0x03BCA0F0 STR X0, [X19 + 0x1C0]
	0x03BCA0F4 ADRP X8, 0x593000
	0x03BCA0F8 LDR X8, [X8 + 0x7A8]
	0x03BCA0FC LDR X2, [X20]
	0x03BCA100 MOV X0, X19
	0x03BCA104 LDR X1, [X8]
	0x03BCA108 BL 0x21FC754
	0x03BCA10C STR X0, [X19 + 0x1C8]
	0x03BCA110 ADRP X8, 0x593000
	0x03BCA114 LDR X8, [X8 + 0x770]
	0x03BCA118 LDR X2, [X20]
	0x03BCA11C MOV X0, X19
	0x03BCA120 LDR X1, [X8]
	0x03BCA124 BL 0x21FC754
	0x03BCA128 STR X0, [X19 + 0x1D0]
	0x03BCA12C ADRP X8, 0x593000
	0x03BCA130 LDR X8, [X8 + 0x7A0]
	0x03BCA134 LDR X2, [X20]
	0x03BCA138 MOV X0, X19
	0x03BCA13C LDR X1, [X8]
	0x03BCA140 BL 0x21FC754
	0x03BCA144 STR X0, [X19 + 0x1D8]
	0x03BCA148 ADRP X8, 0x593000
	0x03BCA14C LDR X8, [X8 + 0x778]
	0x03BCA150 LDR X2, [X20]
	0x03BCA154 MOV X0, X19
	0x03BCA158 LDR X1, [X8]
	0x03BCA15C BL 0x21FC754
	0x03BCA160 STR X0, [X19 + 0x1E0]
	0x03BCA164 ADRP X8, 0x593000
	0x03BCA168 LDR X8, [X8 + 0x788]
	0x03BCA16C LDR X2, [X20]
	0x03BCA170 MOV X0, X19
	0x03BCA174 LDR X1, [X8]
	0x03BCA178 BL 0x21FC754
	0x03BCA17C STR X0, [X19 + 0x1E8]
	0x03BCA180 ADRP X8, 0x593000
	0x03BCA184 LDR X8, [X8 + 0x780]
	0x03BCA188 LDR X2, [X20]
	0x03BCA18C MOV X0, X19
	0x03BCA190 LDR X1, [X8]
	0x03BCA194 BL 0x21FC754
	0x03BCA198 STR X0, [X19 + 0x1F0]
	0x03BCA19C ADRP X8, 0x593000
	0x03BCA1A0 LDR X8, [X8 + 0x790]
	0x03BCA1A4 LDR X2, [X20]
	0x03BCA1A8 MOV X0, X19
	0x03BCA1AC LDR X1, [X8]
	0x03BCA1B0 BL 0x21FC754
	0x03BCA1B4 STR X0, [X19 + 0x1F8]
	0x03BCA1B8 ADRP X8, 0x593000
	0x03BCA1BC LDR X8, [X8 + 0x798]
	0x03BCA1C0 LDR X2, [X20]
	0x03BCA1C4 MOV X0, X19
	0x03BCA1C8 LDR X1, [X8]
	0x03BCA1CC BL 0x21FC754
	0x03BCA1D0 STR X0, [X19 + 0x200]
	0x03BCA1D4 ADRP X8, 0x57A000
	0x03BCA1D8 LDR X8, [X8 + 0xEE0]
	0x03BCA1DC LDR X2, [X21]
	0x03BCA1E0 MOV X0, X19
	0x03BCA1E4 LDR X1, [X8]
	0x03BCA1E8 BL 0x21FC754
	0x03BCA1EC STR X0, [X19 + 0x208]
	0x03BCA1F0 ADRP X8, 0x57A000
	0x03BCA1F4 LDR X8, [X8 + 0xEB8]
	0x03BCA1F8 LDR X2, [X20]
	0x03BCA1FC MOV X0, X19
	0x03BCA200 LDR X1, [X8]
	0x03BCA204 BL 0x21FC754
	0x03BCA208 STR X0, [X19 + 0x210]
	0x03BCA20C LDP X20, X19, [X31 + 0x50]
	0x03BCA210 LDP X22, X21, [X31 + 0x40]
	0x03BCA214 LDP X24, X23, [X31 + 0x30]
	0x03BCA218 LDP X26, X25, [X31 + 0x20]
	0x03BCA21C LDP X28, X27, [X31 + 0x10]
	0x03BCA220 LDP X29, X30, [X31], #0x60
	0x03BCA224 RET
	0x03BCA228 STR X30, [X31 - 0x30]!
	0x03BCA22C STP X22, X21, [X31 + 0x10]
	0x03BCA230 STP X20, X19, [X31 + 0x20]
	0x03BCA234 ADRP X22, 0x818000
	0x03BCA238 ADRP X21, 0x593000
	0x03BCA23C LDRB W8, [X22 + 0xDEE]
	0x03BCA240 LDR X21, [X21 + 0x460]
	0x03BCA244 MOV X19, X1
	0x03BCA248 MOV X20, X0
	0x03BCA24C TBNZ X8, 0x0, 0x3BCA264
	0x03BCA250 ADRP X0, 0x593000
	0x03BCA254 LDR X0, [X0 + 0x460]
	0x03BCA258 BL 0x1C16CF4
	0x03BCA25C MOVZ W8, 0x1
	0x03BCA260 STRB W8, [X22 + 0xDEE]
	0x03BCA264 LDR X0, [X21]
	0x03BCA268 STR X31, [X31 + 0x8]
	0x03BCA26C LDR W8, [X0 + 0xE0]
	0x03BCA270 CBNZ W8, 0x3BCA278
	0x03BCA274 BL 0x1C16DFC
	0x03BCA278 ADD X1, X31, 0x8
	0x03BCA27C MOV X0, X19
	0x03BCA280 MOV X2, X31
	0x03BCA284 BL 0x3BC8E74
	0x03BCA288 TBZ X0, 0x0, 0x3BCA294
	0x03BCA28C LDR X0, [X31 + 0x8]
	0x03BCA290 B 0x3BCA2A4
	0x03BCA294 MOV X0, X20
	0x03BCA298 MOV X1, X19
	0x03BCA29C MOV X2, X31
	0x03BCA2A0 BL 0x377B0D4
	0x03BCA2A4 LDP X20, X19, [X31 + 0x20]
	0x03BCA2A8 LDP X22, X21, [X31 + 0x10]
	0x03BCA2AC LDR X30, [X31], #0x30
	0x03BCA2B0 RET
	0x03BCA2B4 MOV X1, X31
	0x03BCA2B8 B 0x37DB840
	0x03BCA2BC STR X30, [X31 - 0x10]!
	0x03BCA2C0 ADD X0, X31, 0x8
	0x03BCA2C4 MOVZ W1, 0x58
	0x03BCA2C8 MOVZ W2, 0x52
	0x03BCA2CC MOVZ W3, 0x53
	0x03BCA2D0 MOVZ W4, 0x43
	0x03BCA2D4 MOV X5, X31
	0x03BCA2D8 STR W31, [X31 + 0x8]
	0x03BCA2DC BL 0x375AA28
	0x03BCA2E0 LDR W0, [X31 + 0x8]
	0x03BCA2E4 LDR X30, [X31], #0x10
	0x03BCA2E8 RET
	0x03BCA2EC STR X30, [X31 - 0x10]!
	0x03BCA2F0 ADD X0, X31, 0x8
	0x03BCA2F4 MOVZ W1, 0x58
	0x03BCA2F8 MOVZ W2, 0x52
	0x03BCA2FC MOVZ W3, 0x53
	0x03BCA300 MOVZ W4, 0x43
	0x03BCA304 MOV X5, X31
	0x03BCA308 STR W31, [X31 + 0x8]
	0x03BCA30C BL 0x375AA28
	0x03BCA310 LDR W0, [X31 + 0x8]
	0x03BCA314 LDR X30, [X31], #0x10
	0x03BCA318 RET
	0x03BCA31C LDRH W10, [X0 + 0x18]
	0x03BCA320 MOVZ W9, 0x1
	0x03BCA324 LSLV W9, W9, W1
	0x03BCA328 ANDS W31, W2, 0x1
	0x03BCA32C BIC W11, W10, W9, 0x0
	0x03BCA330 ORR W9, W10, W9, 0x0
	0x03BCA334 CSEL W9, W9, W11, NE
	0x03BCA338 STRH W9, [X0 + 0x18]
	0x03BCA33C LDUR V1, [X0 + 0x2F]
	0x03BCA340 LDP V2, V0, [X0 + 0x10]
	0x03BCA344 LDR V3, [X0]
	0x03BCA348 STUR V1, [X8 + 0x2F]
	0x03BCA34C STP V2, V0, [X8 + 0x10]
	0x03BCA350 STR V3, [X8]
	0x03BCA354 RET
	0x03BCA358 LDRH W8, [X0 + 0x18]
	0x03BCA35C LSRV W8, W8, W1
	0x03BCA360 AND W0, W8, 0x1
	0x03BCA364 RET
	0x03BCA368 STR X30, [X31 - 0x20]!
	0x03BCA36C STP X20, X19, [X31 + 0x10]
	0x03BCA370 MOVI V0.2D, 0x0
	0x03BCA374 STUR V0, [X0 + 0x1F]
	0x03BCA378 STP V0, V0, [X0]
	0x03BCA37C ADRP X20, 0x80E000
	0x03BCA380 LDRB W8, [X20 + 0x793]
	0x03BCA384 MOV X19, X0
	0x03BCA388 CBNZ W8, 0x3BCA3A0
	0x03BCA38C ADRP X0, 0x52A000
	0x03BCA390 LDR X0, [X0 + 0x5A8]
	0x03BCA394 BL 0x1C16CF4
	0x03BCA398 MOVZ W8, 0x1
	0x03BCA39C STRB W8, [X20 + 0x793]
	0x03BCA3A0 ADRP X8, 0x52A000
	0x03BCA3A4 LDR X8, [X8 + 0x5A8]
	0x03BCA3A8 LDR X8, [X8]
	0x03BCA3AC LDR X8, [X8 + 0xB8]
	0x03BCA3B0 LDR V0, [X8]
	0x03BCA3B4 STUR V0, [X19 + 0x2F]
	0x03BCA3B8 LDP X20, X19, [X31 + 0x10]
	0x03BCA3BC LDR X30, [X31], #0x20
	0x03BCA3C0 RET
	0x03BCA3C4 STR X30, [X31 - 0x30]!
	0x03BCA3C8 STP X22, X21, [X31 + 0x10]
	0x03BCA3CC STP X20, X19, [X31 + 0x20]
	0x03BCA3D0 ADRP X22, 0x818000
	0x03BCA3D4 ADRP X21, 0x593000
	0x03BCA3D8 LDRB W8, [X22 + 0xDEF]
	0x03BCA3DC LDR X21, [X21 + 0x460]
	0x03BCA3E0 MOV X19, X1
	0x03BCA3E4 MOV X20, X0
	0x03BCA3E8 TBNZ X8, 0x0, 0x3BCA400
	0x03BCA3EC ADRP X0, 0x593000
	0x03BCA3F0 LDR X0, [X0 + 0x460]
	0x03BCA3F4 BL 0x1C16CF4
	0x03BCA3F8 MOVZ W8, 0x1
	0x03BCA3FC STRB W8, [X22 + 0xDEF]
	0x03BCA400 LDR X0, [X21]
	0x03BCA404 STR X31, [X31 + 0x8]
	0x03BCA408 LDR W8, [X0 + 0xE0]
	0x03BCA40C CBNZ W8, 0x3BCA414
	0x03BCA410 BL 0x1C16DFC
	0x03BCA414 ADD X1, X31, 0x8
	0x03BCA418 MOV X0, X19
	0x03BCA41C MOV X2, X31
	0x03BCA420 BL 0x3BC8E74
	0x03BCA424 TBZ X0, 0x0, 0x3BCA430
	0x03BCA428 LDR X0, [X31 + 0x8]
	0x03BCA42C B 0x3BCA440
	0x03BCA430 MOV X0, X20
	0x03BCA434 MOV X1, X19
	0x03BCA438 MOV X2, X31
	0x03BCA43C BL 0x377B0D4
	0x03BCA440 LDP X20, X19, [X31 + 0x20]
	0x03BCA444 LDP X22, X21, [X31 + 0x10]
	0x03BCA448 LDR X30, [X31], #0x30
	0x03BCA44C RET
	0x03BCA450 MOV X1, X31
	0x03BCA454 B 0x37DB5B8
	0x03BCA458 STR X30, [X31 - 0x10]!
	0x03BCA45C ADD X0, X31, 0x8
	0x03BCA460 MOVZ W1, 0x58
	0x03BCA464 MOVZ W2, 0x52
	0x03BCA468 MOVZ W3, 0x53
	0x03BCA46C MOVZ W4, 0x48
	0x03BCA470 MOV X5, X31
	0x03BCA474 STR W31, [X31 + 0x8]
	0x03BCA478 BL 0x375AA28
	0x03BCA47C LDR W0, [X31 + 0x8]
	0x03BCA480 LDR X30, [X31], #0x10
	0x03BCA484 RET
	0x03BCA488 STR X30, [X31 - 0x10]!
	0x03BCA48C ADD X0, X31, 0x8
	0x03BCA490 MOVZ W1, 0x58
	0x03BCA494 MOVZ W2, 0x52
	0x03BCA498 MOVZ W3, 0x53
	0x03BCA49C MOVZ W4, 0x48
	0x03BCA4A0 MOV X5, X31
	0x03BCA4A4 STR W31, [X31 + 0x8]
	0x03BCA4A8 BL 0x375AA28
	0x03BCA4AC LDR W0, [X31 + 0x8]
	0x03BCA4B0 LDR X30, [X31], #0x10
	0x03BCA4B4 RET
	0x03BCA4B8 STR X30, [X31 - 0x20]!
	0x03BCA4BC STP X20, X19, [X31 + 0x10]
	0x03BCA4C0 STR W31, [X0 + 0x8]
	0x03BCA4C4 STR X31, [X0]
	0x03BCA4C8 ADRP X20, 0x80E000
	0x03BCA4CC LDRB W8, [X20 + 0x793]
	0x03BCA4D0 MOV X19, X0
	0x03BCA4D4 CBNZ W8, 0x3BCA4EC
	0x03BCA4D8 ADRP X0, 0x52A000
	0x03BCA4DC LDR X0, [X0 + 0x5A8]
	0x03BCA4E0 BL 0x1C16CF4
	0x03BCA4E4 MOVZ W8, 0x1
	0x03BCA4E8 STRB W8, [X20 + 0x793]
	0x03BCA4EC ADRP X8, 0x52A000
	0x03BCA4F0 LDR X8, [X8 + 0x5A8]
	0x03BCA4F4 LDR X8, [X8]
	0x03BCA4F8 LDR X9, [X8 + 0xB8]
	0x03BCA4FC LDR V0, [X9]
	0x03BCA500 STUR X31, [X19 + 0x1C]
	0x03BCA504 STR W31, [X19 + 0x24]
	0x03BCA508 STUR V0, [X19 + 0xC]
	0x03BCA50C LDR X9, [X8 + 0xB8]
	0x03BCA510 LDR V0, [X9]
	0x03BCA514 STR X31, [X19 + 0x38]
	0x03BCA518 STR W31, [X19 + 0x40]
	0x03BCA51C STUR V0, [X19 + 0x28]
	0x03BCA520 LDR X9, [X8 + 0xB8]
	0x03BCA524 LDR V0, [X9]
	0x03BCA528 STUR X31, [X19 + 0x5C]
	0x03BCA52C STUR X31, [X19 + 0x54]
	0x03BCA530 STRB W31, [X19 + 0x64]
	0x03BCA534 STUR V0, [X19 + 0x44]
	0x03BCA538 LDR X8, [X8 + 0xB8]
	0x03BCA53C LDR V0, [X8]
	0x03BCA540 STUR V0, [X19 + 0x65]
	0x03BCA544 LDP X20, X19, [X31 + 0x10]
	0x03BCA548 LDR X30, [X31], #0x20
	0x03BCA54C RET
	0x03BCA550 LDR X0, [X0 + 0x18]
	0x03BCA554 RET
	0x03BCA558 STR X1, [X0 + 0x18]
	0x03BCA55C RET
	0x03BCA560 LDR X0, [X0 + 0x20]
	0x03BCA564 RET
	0x03BCA568 STR X1, [X0 + 0x20]
	0x03BCA56C RET
	0x03BCA570 LDR X0, [X0 + 0x28]
	0x03BCA574 RET
	0x03BCA578 STR X1, [X0 + 0x28]
	0x03BCA57C RET
	0x03BCA580 MOV X1, X31
	0x03BCA584 B 0x3C36D2C
	0x03BCA588 SUB X31, X31, 0x30
	0x03BCA58C STP X30, X21, [X31 + 0x10]
	0x03BCA590 STP X20, X19, [X31 + 0x20]
	0x03BCA594 ADRP X21, 0x818000
	0x03BCA598 LDRB W8, [X21 + 0xDF0]
	0x03BCA59C MOV X20, X1
	0x03BCA5A0 MOV X19, X0
	0x03BCA5A4 TBNZ X8, 0x0, 0x3BCA5BC
	0x03BCA5A8 ADRP X0, 0x593000
	0x03BCA5AC LDR X0, [X0 + 0x730]
	0x03BCA5B0 BL 0x1C16CF4
	0x03BCA5B4 MOVZ W8, 0x1
	0x03BCA5B8 STRB W8, [X21 + 0xDF0]
	0x03BCA5BC CBZ X20, 0x3BCA5D8
	0x03BCA5C0 ADRP X21, 0x593000
	0x03BCA5C4 LDR X21, [X21 + 0x730]
	0x03BCA5C8 LDR X9, [X20]
	0x03BCA5CC LDR X8, [X21]
	0x03BCA5D0 CMP X9, X8
	0x03BCA5D4 B.EQ 0x3BCA5E0
	0x03BCA5D8 MOV W0, W31
	0x03BCA5DC B 0x3BCA61C
	0x03BCA5E0 MOV X0, X20
	0x03BCA5E4 BL 0x1C16E08
	0x03BCA5E8 MOV X8, X0
	0x03BCA5EC LDR X0, [X21]
	0x03BCA5F0 LDP X21, X20, [X8]
	0x03BCA5F4 LDR W9, [X0 + 0xE0]
	0x03BCA5F8 CBNZ W9, 0x3BCA600
	0x03BCA5FC BL 0x1C16DFC
	0x03BCA600 LDR V0, [X19]
	0x03BCA604 ADD X0, X31, 0x0
	0x03BCA608 MOV X1, X21
	0x03BCA60C MOV X2, X20
	0x03BCA610 MOV X3, X31
	0x03BCA614 STR V0, [X31]
	0x03BCA618 BL 0x375F8CC
	0x03BCA61C LDP X20, X19, [X31 + 0x20]
	0x03BCA620 LDP X30, X21, [X31 + 0x10]
	0x03BCA624 AND W0, W0, 0x1
	0x03BCA628 ADD X31, X31, 0x30
	0x03BCA62C RET
	0x03BCA630 SUB X31, X31, 0x20
	0x03BCA634 STR X30, [X31 + 0x10]
	0x03BCA638 LDR V0, [X0]
	0x03BCA63C ADD X0, X31, 0x0
	0x03BCA640 MOV X3, X31
	0x03BCA644 STR V0, [X31]
	0x03BCA648 BL 0x375F8CC
	0x03BCA64C LDR X30, [X31 + 0x10]
	0x03BCA650 AND W0, W0, 0x1
	0x03BCA654 ADD X31, X31, 0x20
	0x03BCA658 RET
	0x03BCA65C SUB X31, X31, 0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x81A000
	005 Move X19, 0x595000
	006 Move W8, [X20+3556]
	007 Move X19, [X19+1120]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x595000
	013 Move X0, [X0+1120]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3556], W8
	017 Move X8, [X19]
	018 Move X9, -51232768
	019 Move V0, [X9+2256]
	020 Move W9, 0x999A
	021 Move X8, [X8+184]
	022 NotImplemented "Instruction MOVK not yet implemented."
	023 Move X10, -51228672
	024 Move [X8], D0
	025 Move [X8+8], W9
	026 Move X8, [X19]
	027 Move V0, [X10+416]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X8, [X8+184]
	031 Move [X8+12], D0
	032 Move [X8+20], W9
	033 Move X30, [X31+32]
	034 Return 
	035 Move [X31-16], D9
	036 Move [X31-8], D8
	037 Move S6, [X3]
	038 Move S7, [X3+4]
	039 Move S16, [X3+8]
	040 Move S1, [X3+12]
	041 Move V17, [X1]
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 Move V20, [X2]
	044 Move V21, [X2+8]
	045 Multiply S22, S6, S6
	046 Multiply S23, S7, S7
	047 Move V19, [X1+12]
	048 Multiply S24, S16, S16
	049 Add S22, S22, S23
	050 Move S2, [X4]
	051 Move S3, [X4+4]
	052 Move S4, [X4+8]
	053 Move S5, [X4+12]
	054 Multiply S25, S1, S1
	055 Multiply S26, S17, D4.S[1]
	056 NotImplemented "Instruction INVALID not yet implemented."
	057 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	058 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	059 Add S22, S24, S22
	060 Move S0, 1
	061 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	062 Move V29.S[1], V17.S[0]
	063 Move V30.S[1], V21.S[0]
	064 Subtract S26, S26, S28
	065 Add S22, S25, S22
	066 NotImplemented "Instruction FNEG not yet implemented."
	067 NotImplemented "Instruction FNEG not yet implemented."
	068 NotImplemented "Instruction FNEG not yet implemented."
	069 NotImplemented "Instruction INVALID not yet implemented."
	070 NotImplemented "Instruction INVALID not yet implemented."
	071 Add S26, S26, S26
	072 NotImplemented "Instruction FDIV not yet implemented."
	073 Subtract V23, V23, V24
	074 Multiply S24, S19, S26
	075 Multiply S1, S1, S22
	076 Multiply S6, S22, S6
	077 Multiply S7, S22, S7
	078 Multiply S16, S22, S16
	079 Add S21, S21, S24
	080 Multiply S22, S2, S1
	081 Multiply S24, S3, S1
	082 Multiply S25, S4, S1
	083 Multiply S1, S1, S5
	084 Multiply S27, S6, S5
	085 Multiply S28, S7, S5
	086 Multiply S5, S16, S5
	087 Multiply S30, S2, S6
	088 Multiply S31, S4, S7
	089 Multiply S8, S2, S16
	090 Multiply S9, S3, S6
	091 Multiply S2, S2, S7
	092 Multiply S7, S3, S7
	093 Multiply S3, S3, S16
	094 Multiply S6, S4, S6
	095 Multiply S4, S4, S16
	096 Add V16, V23, V23
	097 NotImplemented "Instruction INVALID not yet implemented."
	098 Add V19, V20, V19
	099 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	100 Multiply S17, S17, D0.S[1]
	101 NotImplemented "Instruction INVALID not yet implemented."
	102 NotImplemented "Instruction INVALID not yet implemented."
	103 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	104 Subtract S17, S17, S18
	105 Move V16.S[1], V26.S[0]
	106 Move V26, [X0]
	107 Add S17, S21, S17
	108 Move V21, [X0+8]
	109 Add S18, S27, S31
	110 Add S23, S28, S8
	111 Add S7, S30, S7
	112 NotImplemented "Instruction INVALID not yet implemented."
	113 Add S5, S5, S9
	114 Add S18, S22, S18
	115 Add S22, S24, S23
	116 Subtract S1, S1, S7
	117 Subtract V7, V20, V16
	118 Add S5, S25, S5
	119 Subtract S3, S18, S3
	120 Subtract S6, S22, S6
	121 Subtract S1, S1, S4
	122 Add V4, V19, V7
	123 Add S16, S21, S17
	124 Subtract S2, S5, S2
	125 Multiply S5, S3, S3
	126 Multiply S7, S6, S6
	127 Add V4, V26, V4
	128 Move [X5+8], S16
	129 Multiply S16, S2, S2
	130 Add S5, S5, S7
	131 Move [X5], D4
	132 Multiply S17, S1, S1
	133 Add S4, S16, S5
	134 Move S5, [X1]
	135 Move S7, [X1+4]
	136 Move S16, [X1+8]
	137 Move S18, [X1+12]
	138 Add S4, S17, S4
	139 NotImplemented "Instruction FNEG not yet implemented."
	140 NotImplemented "Instruction FNEG not yet implemented."
	141 NotImplemented "Instruction FNEG not yet implemented."
	142 NotImplemented "Instruction FDIV not yet implemented."
	143 Multiply S1, S1, S0
	144 Multiply S3, S0, S3
	145 Multiply S4, S0, S6
	146 Multiply S0, S0, S2
	147 Multiply S2, S3, S18
	148 Multiply S6, S4, S18
	149 Multiply S17, S0, S18
	150 Multiply S18, S1, S18
	151 Multiply S19, S1, S5
	152 Multiply S20, S1, S7
	153 Multiply S1, S1, S16
	154 Multiply S21, S3, S5
	155 Multiply S22, S0, S7
	156 Multiply S23, S3, S16
	157 Multiply S24, S4, S5
	158 Multiply S25, S4, S7
	159 Multiply S4, S4, S16
	160 Multiply S5, S0, S5
	161 Multiply S3, S3, S7
	162 Multiply S0, S0, S16
	163 Add S7, S19, S22
	164 Add S16, S20, S23
	165 Add S1, S24, S1
	166 Add S19, S21, S25
	167 Add S2, S7, S2
	168 Add S6, S6, S16
	169 Add S1, S17, S1
	170 Subtract S7, S18, S19
	171 Subtract S2, S2, S4
	172 Subtract S4, S6, S5
	173 Subtract S1, S1, S3
	174 Subtract S0, S7, S0
	175 Move [X6], S2
	176 Move [X6+8], S4
	177 Move [X6+8], S1
	178 Move [X6+16], S0
	179 Move D9, [X31+16]
	180 Move D8, [X31+24]
	181 Return 
	182 Subtract X31, X31, 176
	183 Move [X31+48], D15
	184 Move [X31+56], D14
	185 Move [X31+64], D13
	186 Move [X31+72], D12
	187 Move [X31+80], D11
	188 Move [X31+88], D10
	189 Move [X31+96], D9
	190 Move [X31+104], D8
	191 Move [X31+112], X30
	192 Move [X31+120], X25
	193 Move [X31+128], X24
	194 Move [X31+136], X23
	195 Move [X31+144], X22
	196 Move [X31+152], X21
	197 Move [X31+160], X20
	198 Move [X31+168], X19
	199 Move [X31+44], W31
	200 Move X25, 0x818000
	201 Move S11, [X2]
	202 Move S12, [X2+4]
	203 Move V13, [X2+8]
	204 Move S14, [X0]
	205 Move S15, [X0+4]
	206 Move W8, [X25+1413]
	207 Move V9, [X0+8]
	208 Move X19, X5
	209 Move X21, X4
	210 Move V10, V1
	211 Move V8, V0
	212 Move X20, X3
	213 Move X22, X2
	214 Move X24, X0
	215 Move X23, X1
	216 Move [X31+40], S2
	217 Compare W8, 0
	218 JumpIfNotEqual {224}
	219 Move X0, 0x52A000
	220 Move X0, [X0+1448]
	221 Call 0x1C17CF4
	222 Move W8, 1
	223 Move [X25+1413], W8
	224 Move X8, 0x52A000
	225 Move X8, [X8+1448]
	226 Subtract S14, S11, S14
	227 Subtract S11, S12, S15
	228 Subtract S9, S13, S9
	229 Move X0, [X8]
	230 Move W8, [X0+224]
	231 Compare W8, 0
	232 JumpIfNotEqual {234}
	233 Call 0x1C17DFC
	234 Multiply S1, S14, S14
	235 Multiply S2, S11, S11
	236 Multiply S0, S9, S9
	237 Add S1, S1, S2
	238 Add S0, S0, S1
	239 NotImplemented "Instruction FSQRT not yet implemented."
	240 NotImplemented "Instruction FDIV not yet implemented."
	241 Move V1, V8
	242 Call XRTransformStabilizer.CalculateStabilizedLerp, V0, V1
	243 Add X2, X31, 44
	244 Move X0, X20
	245 Move X1, X23
	246 Move X3, X31
	247 Move [X31+16], D0
	248 Call BurstMathUtility.Angle, X0, X1, X2
	249 Move S1, [X31+40]
	250 Move S0, [X31+44]
	251 NotImplemented "Instruction FDIV not yet implemented."
	252 Move V1, V8
	253 Call XRTransformStabilizer.CalculateStabilizedLerp, V0, V1
	254 Move V1, [X24]
	255 Move V2, [X24+8]
	256 Move V3, [X22]
	257 Move V4, [X22+8]
	258 Move V5, [X31+1]
	259 Move X0, X31
	260 Subtract V3, V3, V1
	261 Subtract S4, S4, S2
	262 NotImplemented "Instruction INVALID not yet implemented."
	263 Multiply S4, S5, S4
	264 Add V1, V1, V3
	265 Add S2, S2, S4
	266 Move [X21], D1
	267 Move [X21+8], S2
	268 Move S16, [X23]
	269 Move S1, [X23+4]
	270 Move S2, [X23+8]
	271 Move S3, [X23+12]
	272 Move S4, [X20]
	273 Move S5, [X20+4]
	274 Move S6, [X20+8]
	275 Move S7, [X20+12]
	276 Move [X31], S0
	277 Move V0, V16
	278 Call 0x3B48948
	279 Move [X19], S0
	280 Move [X19+8], S1
	281 Move [X19+8], S2
	282 Move [X19+16], S3
	283 Move X20, [X31+160]
	284 Move X19, [X31+168]
	285 Move X22, [X31+144]
	286 Move X21, [X31+152]
	287 Move X24, [X31+128]
	288 Move X23, [X31+136]
	289 Move X30, [X31+112]
	290 Move X25, [X31+120]
	291 Move D9, [X31+96]
	292 Move D8, [X31+104]
	293 Move D11, [X31+80]
	294 Move D10, [X31+88]
	295 Move D13, [X31+64]
	296 Move D12, [X31+72]
	297 Move D15, [X31+48]
	298 Move D14, [X31+56]
	299 Add X31, X31, 176
	300 Return 
	301 Subtract X31, X31, 96
	302 Move [X31+16], D11
	303 Move [X31+24], D10
	304 Move [X31+32], D9
	305 Move [X31+40], D8
	306 Move [X31+48], X30
	307 Move [X31+56], X31
	308 Move [X31+64], X22
	309 Move [X31+72], X21
	310 Move [X31+80], X20
	311 Move [X31+88], X19
	312 Move X22, X0
	313 Move X19, X3
	314 Move X20, X2
	315 Move X21, X1
	316 Add X2, X31, 60
	317 Move X0, X1
	318 Move X1, X22
	319 Move X3, X31
	320 Move V8, V3
	321 Move V9, V2
	322 Move V10, V1
	323 Move V11, V0
	324 Call BurstMathUtility.Angle, X0, X1, X2
	325 Move V0, [X31+60]
	326 Add X2, X31, 56
	327 Move X0, X21
	328 Move X1, X20
	329 Move X3, X31
	330 NotImplemented "Instruction FDIV not yet implemented."
	331 Call BurstMathUtility.Angle, X0, X1, X2
	332 Move V0, [X31+56]
	333 Multiply S1, S11, S8
	334 NotImplemented "Instruction FDIV not yet implemented."
	335 NotImplemented "Instruction FCMP not yet implemented."
	336 NotImplemented "Instruction FCSEL not yet implemented."
	337 NotImplemented "Instruction CSEL not yet implemented."
	338 Call XRTransformStabilizer.CalculateStabilizedLerp, V0, V1
	339 Move S16, [X20]
	340 Move S1, [X20+4]
	341 Move S2, [X20+8]
	342 Move S3, [X20+12]
	343 Move S4, [X21]
	344 Move S5, [X21+4]
	345 Move S6, [X21+8]
	346 Move S7, [X21+12]
	347 Move [X31], S0
	348 Move V0, V16
	349 Move X0, X31
	350 Call 0x3B48948
	351 Move [X19], S0
	352 Move [X19+8], S1
	353 Move [X19+8], S2
	354 Move [X19+16], S3
	355 Move X20, [X31+80]
	356 Move X19, [X31+88]
	357 Move X22, [X31+64]
	358 Move X21, [X31+72]
	359 Move X30, [X31+48]
	360 Move D9, [X31+32]
	361 Move D8, [X31+40]
	362 Move D11, [X31+16]
	363 Move D10, [X31+24]
	364 Add X31, X31, 96
	365 Return 
	366 Subtract X31, X31, 160
	367 Move [X31+16], D15
	368 Move [X31+24], D14
	369 Move [X31+32], D13
	370 Move [X31+40], D12
	371 Move [X31+48], D11
	372 Move [X31+56], D10
	373 Move [X31+64], D9
	374 Move [X31+72], D8
	375 Move [X31+80], X30
	376 Move [X31+96], X26
	377 Move [X31+104], X25
	378 Move [X31+112], X24
	379 Move [X31+120], X23
	380 Move [X31+128], X22
	381 Move [X31+136], X21
	382 Move [X31+144], X20
	383 Move [X31+152], X19
	384 Move X26, 0x818000
	385 Move S10, [X4]
	386 Move S11, [X4+4]
	387 Move V12, [X4+8]
	388 Move S13, [X0]
	389 Move S14, [X0+4]
	390 Move W8, [X26+1413]
	391 Move V15, [X0+8]
	392 Move X19, X7
	393 Move X20, X6
	394 Move X21, X5
	395 Move V8, V1
	396 Move V9, V0
	397 Move X22, X3
	398 Move X23, X2
	399 Move X25, X0
	400 Move X24, X1
	401 Compare W8, 0
	402 JumpIfNotEqual {408}
	403 Move X0, 0x52A000
	404 Move X0, [X0+1448]
	405 Call 0x1C17CF4
	406 Move W8, 1
	407 Move [X26+1413], W8
	408 Move X26, 0x52A000
	409 Move X26, [X26+1448]
	410 Subtract S13, S10, S13
	411 Subtract S10, S11, S14
	412 Subtract S11, S12, S15
	413 Move X0, [X26]
	414 Move W8, [X0+224]
	415 Compare W8, 0
	416 JumpIfNotEqual {418}
	417 Call 0x1C17DFC
	418 Multiply S1, S13, S13
	419 Multiply S2, S10, S10
	420 Move V4, [X23]
	421 Move V6, [X23+8]
	422 Multiply S0, S11, S11
	423 Move V3, [X25]
	424 Move V5, [X25+8]
	425 Add S1, S1, S2
	426 Add S0, S0, S1
	427 Move V7, [X24]
	428 NotImplemented "Instruction FSQRT not yet implemented."
	429 Move V2, [X24+8]
	430 NotImplemented "Instruction INVALID not yet implemented."
	431 Move [X31], V1
	432 Multiply S1, S1, S6
	433 Add V0, V3, V0
	434 Move S3, [X22]
	435 Move S4, [X22+4]
	436 Add S1, S5, S1
	437 Move V5, [X22+8]
	438 Subtract V0, V0, V7
	439 Subtract S2, S1, S2
	440 Move S1, V0.S[1]
	441 Move X0, X31
	442 Call quaternion.LookRotationSafe, X0, X1
	443 Move [X21], S0
	444 Move [X21+8], S1
	445 Move [X21+8], S2
	446 Move [X21+16], S3
	447 Move X21, 0x818000
	448 Move W8, [X21+1407]
	449 Compare W8, 0
	450 JumpIfNotEqual {456}
	451 Move X0, 0x52A000
	452 Move X0, [X0+1448]
	453 Call 0x1C17CF4
	454 Move W8, 1
	455 Move [X21+1407], W8
	456 Move X0, [X26]
	457 Move V0, [X31]
	458 Move W8, [X0+224]
	459 Multiply S9, S0, S9
	460 Compare W8, 0
	461 JumpIfNotEqual {463}
	462 Call 0x1C17DFC
	463 Move S10, 1
	464 NotImplemented "Instruction FMAXNM not yet implemented."
	465 NotImplemented "Instruction FCVT not yet implemented."
	466 Call 0x3EB2C20
	467 NotImplemented "Instruction INVALID not yet implemented."
	468 Add S0, S0, S10
	469 Move W9, S0
	470 Move W8, 0x7F800000
	471 And W9, W9, 0x7FFFFFFF
	472 NotImplemented "Instruction CMP not yet implemented."
	473 Move S1, 3
	474 NotImplemented "Instruction FCCMP not yet implemented."
	475 NotImplemented "Instruction FCSEL not yet implemented."
	476 Move W9, S1
	477 And W9, W9, 0x7FFFFFFF
	478 NotImplemented "Instruction CMP not yet implemented."
	479 NotImplemented "Instruction FCCMP not yet implemented."
	480 Move [X20], S0
	481 NotImplemented "Instruction FCSEL not yet implemented."
	482 Multiply S0, S0, S8
	483 Move [X19], S0
	484 Move X20, [X31+144]
	485 Move X19, [X31+152]
	486 Move X22, [X31+128]
	487 Move X21, [X31+136]
	488 Move X24, [X31+112]
	489 Move X23, [X31+120]
	490 Move X26, [X31+96]
	491 Move X25, [X31+104]
	492 Move X30, [X31+80]
	493 Move D9, [X31+64]
	494 Move D8, [X31+72]
	495 Move D11, [X31+48]
	496 Move D10, [X31+56]
	497 Move D13, [X31+32]
	498 Move D12, [X31+40]
	499 Move D15, [X31+16]
	500 Move D14, [X31+24]
	501 Add X31, X31, 160
	502 Return 

