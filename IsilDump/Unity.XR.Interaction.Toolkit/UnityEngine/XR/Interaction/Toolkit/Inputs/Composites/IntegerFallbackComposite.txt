Type: UnityEngine.XR.Interaction.Toolkit.Inputs.Composites.IntegerFallbackComposite

Method: System.Int32 ReadValue(ref UnityEngine.InputSystem.InputBindingCompositeContext context)

Disassembly:
	0x03BCBF24 LDR X8, [X8]
	0x03BCBF28 STR X8, [X20 + 0x10]
	0x03BCBF2C ADRP X26, 0x592000
	0x03BCBF30 ADRP X27, 0x592000
	0x03BCBF34 ADRP X28, 0x529000
	0x03BCBF38 ADRP X29, 0x552000
	0x03BCBF3C ADRP X23, 0x528000
	0x03BCBF40 LDR X26, [X26 + 0x908]
	0x03BCBF44 LDR X27, [X27 + 0x918]
	0x03BCBF48 LDR X28, [X28 + 0x9D8]
	0x03BCBF4C LDR X29, [X29 + 0x580]
	0x03BCBF50 LDR X23, [X23 + 0xA28]
	0x03BCBF54 ADD W24, W21, 0x1
	0x03BCBF58 ADRP X8, 0x592000
	0x03BCBF5C LDR X8, [X8 + 0x900]
	0x03BCBF60 LDR X0, [X8]
	0x03BCBF64 BL 0x1C16F10
	0x03BCBF68 MOV X1, X31
	0x03BCBF6C MOV X21, X0
	0x03BCBF70 BL 0x33BDD8C
	0x03BCBF74 CBZ X20, 0x3BCC0B0
	0x03BCBF78 CBZ X21, 0x3BCC0B0
	0x03BCBF7C LDR X8, [X20 + 0x10]
	0x03BCBF80 STR X8, [X21 + 0x10]
	0x03BCBF84 LDUR V0, [X20 + 0x18]
	0x03BCBF88 STUR V0, [X21 + 0x18]
	0x03BCBF8C LDR X0, [X19 + 0x10]
	0x03BCBF90 CBZ X0, 0x3BCC0B0
	0x03BCBF94 LDR W10, [X0 + 0x1C]
	0x03BCBF98 LDR X8, [X0 + 0x10]
	0x03BCBF9C LDR X9, [X26]
	0x03BCBFA0 ADD W10, W10, 0x1
	0x03BCBFA4 STR W10, [X0 + 0x1C]
	0x03BCBFA8 CBZ X8, 0x3BCC0B0
	0x03BCBFAC LDRSW X10, [X0 + 0x18]
	0x03BCBFB0 LDR W11, [X8 + 0x18]
	0x03BCBFB4 CMP W10, W11
	0x03BCBFB8 B.CS 0x3BCBFD0
	0x03BCBFBC ADD W9, W10, 0x1
	0x03BCBFC0 ADD X8, X8, X10, 0x3, LSL
	0x03BCBFC4 STR W9, [X0 + 0x18]
	0x03BCBFC8 STR X21, [X8 + 0x20]
	0x03BCBFCC B 0x3BCBFE4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x818000
	007 Move X21, 0x593000
	008 Move W8, [X22+3582]
	009 Move X21, [X21+2056]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x593000
	017 Move X0, [X0+2056]
	018 Call 0x1C17CF4
	019 Move X0, 0x593000
	020 Move X0, [X0+2064]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+3582], W8
	024 Move [X31+8], X31
	025 Move W1, [X20+16]
	026 Move X3, [X21]
	027 Add X2, X31, 8
	028 Move X0, X19
	029 Call 0x21FC290, X0, X1, X2
	030 Move X8, [X31+8]
	031 Compare X8, 0
	032 JumpIfNotEqual {47}
	033 Move W1, [X20+20]
	034 Move X3, [X21]
	035 Add X2, X31, 8
	036 Move X0, X19
	037 Call 0x21FC290, X0, X1, X2
	038 Move X8, [X31+8]
	039 Compare X8, 0
	040 JumpIfNotEqual {47}
	041 Move X8, 0x593000
	042 Move W1, [X20+24]
	043 Move X8, [X8+2064]
	044 Move X0, X19
	045 Move X2, [X8]
	046 Call 0x21FC08C, X0, X1
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Return X0

Method: System.Void Initialize()

Disassembly:
	0x03BCBFD0 LDR X8, [X9 + 0x20]

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03BCBFD4 MOV X1, X21
	0x03BCBFD8 LDR X8, [X8 + 0xC0]
	0x03BCBFDC LDR X2, [X8 + 0x70]
	0x03BCBFE0 BL 0x301BF90
	0x03BCBFE4 LDR X8, [X19 + 0x10]
	0x03BCBFE8 CBZ X8, 0x3BCC0B0
	0x03BCBFEC LDR X0, [X22]
	0x03BCBFF0 LDR W8, [X8 + 0x18]
	0x03BCBFF4 MOV X25, X22
	0x03BCBFF8 LDR W9, [X0 + 0xE0]
	0x03BCBFFC SUB W21, W8, 0x1
	0x03BCC000 CBNZ W9, 0x3BCC008
	0x03BCC004 BL 0x1C16DFC
	0x03BCC008 MOV W0, W21
	0x03BCC00C BL 0x3BCC0B4
	0x03BCC010 LDR X8, [X19 + 0x10]
	0x03BCC014 CBZ X8, 0x3BCC0B0
	0x03BCC018 LDR X2, [X27]
	0x03BCC01C MOV X22, X0
	0x03BCC020 AND W1, W21, 0xFF
	0x03BCC024 MOV X0, X8
	0x03BCC028 BL 0x301BCCC
	0x03BCC02C CBZ X0, 0x3BCC0B0
	0x03BCC030 STR X22, [X0 + 0x10]
	0x03BCC034 LDR X0, [X28]
	0x03BCC038 ADD X1, X31, 0xC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x818000
	005 Move X19, 0x551000
	006 Move W8, [X20+3583]
	007 Move X19, [X19+624]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x593000
	013 Move X0, [X0+2072]
	014 Call 0x1C17CF4
	015 Move X0, 0x551000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3583], W8
	020 Move X0, [X19]
	021 Move X19, 0x592000
	022 Move W8, [X0+224]
	023 Move X19, [X19+2072]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X1, [X19]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X0, X31
	031 Move X30, [X31+32]
	032 Call 0x220D4A8, X0
	033 Return 

Method: System.Void .ctor()

Disassembly:
	0x03BCC03C STRB W21, [X31 + 0xC]
	0x03BCC040 BL 0x1C16E04
	0x03BCC044 LDR X8, [X29]
	0x03BCC048 MOV X1, X0
	0x03BCC04C MOV X2, X22
	0x03BCC050 MOV X3, X31
	0x03BCC054 MOV X0, X8
	0x03BCC058 BL 0x3227BD4
	0x03BCC05C LDR X8, [X23]
	0x03BCC060 MOV X21, X0
	0x03BCC064 LDR W9, [X8 + 0xE0]
	0x03BCC068 CBNZ W9, 0x3BCC074
	0x03BCC06C MOV X0, X8
	0x03BCC070 BL 0x1C16DFC
	0x03BCC074 MOV X0, X21
	0x03BCC078 MOV X1, X31
	0x03BCC07C BL 0x3C06A04
	0x03BCC080 SUB W24, W24, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x817000
	006 Move X21, 0x592000
	007 Move W8, [X20+3584]
	008 Move X21, [X21+2080]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x592000
	015 Move X0, [X0+2080]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3584], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call 0x2D12400, X0
	026 Return 

