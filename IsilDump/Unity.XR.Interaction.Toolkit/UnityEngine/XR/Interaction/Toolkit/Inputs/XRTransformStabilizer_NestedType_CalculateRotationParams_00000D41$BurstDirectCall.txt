Type: UnityEngine.XR.Interaction.Toolkit.Inputs.XRTransformStabilizer/CalculateRotationParams_00000D41$BurstDirectCall

Method: System.Void GetFunctionPointerDiscard(ref System.IntPtr param_0)

Disassembly:
	0x03BBFFEC ADRP X22, 0x59E000
	0x03BBFFF0 LDRB W8, [X20 + 0xD9A]
	0x03BBFFF4 LDR X23, [X23 + 0x3D8]
	0x03BBFFF8 LDR X21, [X21 + 0x4B0]
	0x03BBFFFC LDR X22, [X22 + 0x460]
	0x03BC0000 MOV X19, X0
	0x03BC0004 TBNZ X8, 0x0, 0x3BC0034
	0x03BC0008 ADRP X0, 0x537000
	0x03BC000C LDR X0, [X0 + 0x3D8]
	0x03BC0010 BL 0x1C16CF4
	0x03BC0014 ADRP X0, 0x59D000
	0x03BC0018 LDR X0, [X0 + 0x4B0]
	0x03BC001C BL 0x1C16CF4
	0x03BC0020 ADRP X0, 0x59D000
	0x03BC0024 LDR X0, [X0 + 0x460]
	0x03BC0028 BL 0x1C16CF4
	0x03BC002C MOVZ W8, 0x1
	0x03BC0030 STRB W8, [X20 + 0xD9A]
	0x03BC0034 LDR X0, [X23]
	0x03BC0038 LDR X20, [X19 + 0x60]
	0x03BC003C BL 0x1C16F10
	0x03BC0040 LDR X2, [X21]
	0x03BC0044 MOV X1, X19
	0x03BC0048 MOV X3, X31
	0x03BC004C MOV X21, X0
	0x03BC0050 BL 0x2A719B8
	0x03BC0054 LDR X0, [X22]
	0x03BC0058 LDR W8, [X0 + 0xE0]
	0x03BC005C CBNZ W8, 0x3BC0064
	0x03BC0060 BL 0x1C16DFC
	0x03BC0064 MOV X0, X20
	0x03BC0068 MOV X1, X21
	0x03BC006C LDP X20, X19, [X31 + 0x20]
	0x03BC0070 LDP X22, X21, [X31 + 0x10]
	0x03BC0074 MOV X2, X31
	0x03BC0078 LDP X30, X23, [X31], #0x30
	0x03BC007C B 0x3BC8368
	0x03BC0080 LDR X0, [X0 + 0x68]
	0x03BC0084 RET
	0x03BC0088 STR X30, [X31 - 0x20]!
	0x03BC008C STP X20, X19, [X31 + 0x10]
	0x03BC0090 MOV X19, X1
	0x03BC0094 MOV X20, X0
	0x03BC0098 BL 0x3BC00B0
	0x03BC009C STR X19, [X20 + 0x68]
	0x03BC00A0 MOV X0, X20
	0x03BC00A4 LDP X20, X19, [X31 + 0x10]
	0x03BC00A8 LDR X30, [X31], #0x20
	0x03BC00AC B 0x3BC015C
	0x03BC00B0 STP X30, X23, [X31 - 0x30]!
	0x03BC00B4 STP X22, X21, [X31 + 0x10]
	0x03BC00B8 STP X20, X19, [X31 + 0x20]
	0x03BC00BC ADRP X20, 0x822000
	0x03BC00C0 ADRP X23, 0x537000
	0x03BC00C4 ADRP X21, 0x59D000
	0x03BC00C8 ADRP X22, 0x59D000
	0x03BC00CC LDRB W8, [X20 + 0xD9D]
	0x03BC00D0 LDR X23, [X23 + 0x3D8]
	0x03BC00D4 LDR X21, [X21 + 0x4B8]
	0x03BC00D8 LDR X22, [X22 + 0x460]
	0x03BC00DC MOV X19, X0
	0x03BC00E0 TBNZ X8, 0x0, 0x3BC0110
	0x03BC00E4 ADRP X0, 0x537000
	0x03BC00E8 LDR X0, [X0 + 0x3D8]
	0x03BC00EC BL 0x1C16CF4
	0x03BC00F0 ADRP X0, 0x59D000
	0x03BC00F4 LDR X0, [X0 + 0x4B8]
	0x03BC00F8 BL 0x1C16CF4
	0x03BC00FC ADRP X0, 0x59D000
	0x03BC0100 LDR X0, [X0 + 0x460]
	0x03BC0104 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x824000
	008 Move X23, 0x59F000
	009 Move W8, [X20+3446]
	010 Call 0x3EB29B4
	011 Return 
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0x55C000
	018 Move X0, [X0+2120]
	019 Call 0x1C17CF4
	020 Move X0, 0x59E000
	021 Move X0, [X0+928]
	022 Call 0x1C17CF4
	023 Move X0, 0x59E000
	024 Move X0, [X0+1048]
	025 Call 0x1C17CF4
	026 Move X0, 0x59E000
	027 Move X0, [X0+1056]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3446], W8
	031 Move X8, [X23]
	032 Move W9, [X8+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {38}
	035 Move X0, X8
	036 Call 0x1C17DFC
	037 Move X8, [X23]
	038 Move X9, [X8+184]
	039 Move X10, [X9]
	040 Compare X10, 0
	041 JumpIfNotEqual {71}
	042 Move W10, [X8+224]
	043 Compare W10, 0
	044 JumpIfNotEqual {49}
	045 Move X0, X8
	046 Call 0x1C17DFC
	047 Move X8, [X23]
	048 Move X9, [X8+184]
	049 Move X8, 0x55C000
	050 Move X20, [X9+8]
	051 Move X8, [X8+2120]
	052 Move X0, [X8]
	053 Move X8, 0x59E000
	054 Move X8, [X8+1056]
	055 Move X21, [X8]
	056 Move X8, 0x59E000
	057 Move X8, [X8+1048]
	058 Move W9, [X0+224]
	059 Move X22, [X8]
	060 Compare W9, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X0, X20
	064 Move X1, X21
	065 Move X2, X22
	066 Move X3, X31
	067 Call BurstCompiler.GetILPPMethodFunctionPointer2, X0, X1, X2
	068 Move X8, [X23]
	069 Move X9, [X8+184]
	070 Move [X9], X0
	071 Move W9, [X8+224]
	072 Compare W9, 0
	073 JumpIfNotEqual {77}
	074 Move X0, X8
	075 Call 0x1C17DFC
	076 Move X8, [X23]
	077 Move X8, [X8+184]
	078 Move X22, [X31+16]
	079 Move X21, [X31+24]
	080 Move X8, [X8]
	081 Move [X19], X8
	082 Move X20, [X31+32]
	083 Move X19, [X31+40]
	084 Move X30, [X31+48]
	085 Move X23, [X31+56]
	086 Return 

Method: System.IntPtr GetFunctionPointer()

Disassembly:
	0x03BC0108 MOVZ W8, 0x1
	0x03BC010C STRB W8, [X20 + 0xD9D]
	0x03BC0110 LDR X0, [X23]
	0x03BC0114 LDR X20, [X19 + 0x68]
	0x03BC0118 BL 0x1C16F10
	0x03BC011C LDR X2, [X21]
	0x03BC0120 MOV X1, X19
	0x03BC0124 MOV X3, X31
	0x03BC0128 MOV X21, X0
	0x03BC012C BL 0x2A719B8
	0x03BC0130 LDR X0, [X22]
	0x03BC0134 LDR W8, [X0 + 0xE0]
	0x03BC0138 CBNZ W8, 0x3BC0140
	0x03BC013C BL 0x1C16DFC
	0x03BC0140 MOV X0, X20
	0x03BC0144 MOV X1, X21
	0x03BC0148 LDP X20, X19, [X31 + 0x20]
	0x03BC014C LDP X22, X21, [X31 + 0x10]
	0x03BC0150 MOV X2, X31
	0x03BC0154 LDP X30, X23, [X31], #0x30
	0x03BC0158 B 0x3BC8490
	0x03BC015C STP X30, X23, [X31 - 0x30]!
	0x03BC0160 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x823000
	005 Move X19, 0x59E000
	006 Move W8, [X20+3447]
	007 Move X19, [X19+928]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x59E000
	013 Move X0, [X0+928]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3447], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 8
	024 Call CalculateRotationParams_00000D41$BurstDirectCall.GetFunctionPointerDiscard, X0
	025 Move X0, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void Constructor()

Disassembly:
	0x03BC0164 STP X20, X19, [X31 + 0x20]
	0x03BC0168 ADRP X20, 0x822000
	0x03BC016C ADRP X23, 0x537000
	0x03BC0170 ADRP X21, 0x59D000
	0x03BC0174 ADRP X22, 0x59D000
	0x03BC0178 LDRB W8, [X20 + 0xD9C]
	0x03BC017C LDR X23, [X23 + 0x3D8]
	0x03BC0180 LDR X21, [X21 + 0x4B8]
	0x03BC0184 LDR X22, [X22 + 0x460]
	0x03BC0188 MOV X19, X0
	0x03BC018C TBNZ X8, 0x0, 0x3BC01BC
	0x03BC0190 ADRP X0, 0x537000
	0x03BC0194 LDR X0, [X0 + 0x3D8]
	0x03BC0198 BL 0x1C16CF4
	0x03BC019C ADRP X0, 0x59D000
	0x03BC01A0 LDR X0, [X0 + 0x4B8]
	0x03BC01A4 BL 0x1C16CF4
	0x03BC01A8 ADRP X0, 0x59D000
	0x03BC01AC LDR X0, [X0 + 0x460]
	0x03BC01B0 BL 0x1C16CF4
	0x03BC01B4 MOVZ W8, 0x1
	0x03BC01B8 STRB W8, [X20 + 0xD9C]
	0x03BC01BC LDR X0, [X23]
	0x03BC01C0 LDR X20, [X19 + 0x68]
	0x03BC01C4 BL 0x1C16F10
	0x03BC01C8 LDR X2, [X21]
	0x03BC01CC MOV X1, X19
	0x03BC01D0 MOV X3, X31
	0x03BC01D4 MOV X21, X0
	0x03BC01D8 BL 0x2A719B8
	0x03BC01DC LDR X0, [X22]
	0x03BC01E0 LDR W8, [X0 + 0xE0]
	0x03BC01E4 CBNZ W8, 0x3BC01EC
	0x03BC01E8 BL 0x1C16DFC
	0x03BC01EC MOV X0, X20
	0x03BC01F0 MOV X1, X21
	0x03BC01F4 LDP X20, X19, [X31 + 0x20]
	0x03BC01F8 LDP X22, X21, [X31 + 0x10]
	0x03BC01FC MOV X2, X31
	0x03BC0200 LDP X30, X23, [X31], #0x30
	0x03BC0204 B 0x3BC8368
	0x03BC0208 LDR X0, [X0 + 0x70]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x823000
	006 Move X19, 0x59E000
	007 Move X20, 0x55C000
	008 Move W8, [X21+3448]
	009 Move X19, [X19+1064]
	010 Move X20, [X20+2120]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x55C000
	016 Move X0, [X0+2120]
	017 Call 0x1C17CF4
	018 Move X0, 0x59E000
	019 Move X0, [X0+928]
	020 Call 0x1C17CF4
	021 Move X0, 0x59E000
	022 Move X0, [X0+1064]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3448], W8
	026 Move X0, [X20]
	027 Move X20, 0x59E000
	028 Move X19, [X19]
	029 Move W8, [X0+224]
	030 Move X20, [X20+928]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call BurstCompiler.CompileILPPMethod2, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move [X8+8], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void Initialize()

Disassembly:
	0x03BC020C RET

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03BC0210 STR X30, [X31 - 0x20]!

ISIL:
	001 Call CalculateRotationParams_00000D41$BurstDirectCall.Constructor
	002 Return 

Method: System.Void Invoke(in Unity.Mathematics.float3 currentPosition, in Unity.Mathematics.float3 resultPosition, in Unity.Mathematics.float3 forward, in Unity.Mathematics.float3 up, in Unity.Mathematics.float3 rayEnd, System.Single invScale, System.Single angleStabilization, out Unity.Mathematics.quaternion antiRotation, out System.Single scaleFactor, out System.Single targetAngleScale)

Disassembly:
	0x03BBE63C RET
	0x03BBE640 ADRP X1, 0xFFFFFFFFFCF5D000
	0x03BBE644 ADD X1, X1, 0xEE3
	0x03BBE648 MOV X0, X31
	0x03BBE64C BL 0x1C16F3C
	0x03BBE650 MOV X1, X31
	0x03BBE654 BL 0x1C16DEC
	0x03BBE658 LDR X8, [X0 + 0x40]
	0x03BBE65C LDR X6, [X0 + 0x18]
	0x03BBE660 LDR X5, [X0 + 0x28]
	0x03BBE664 MOV X0, X8
	0x03BBE668 BR X6
	0x03BBE66C SUB X31, X31, 0xB0
	0x03BBE670 STR X30, [X31 + 0x50]
	0x03BBE674 STP X28, X27, [X31 + 0x60]
	0x03BBE678 STP X26, X25, [X31 + 0x70]
	0x03BBE67C STP X24, X23, [X31 + 0x80]
	0x03BBE680 STP X22, X21, [X31 + 0x90]
	0x03BBE684 STP X20, X19, [X31 + 0xA0]
	0x03BBE688 STP S1, S0, [X31 + 0x58]
	0x03BBE68C ADRP X28, 0x824000
	0x03BBE690 STP S3, S2, [X31 + 0x48]
	0x03BBE694 ADRP X26, 0x53B000
	0x03BBE698 ADRP X27, 0x535000
	0x03BBE69C LDRB W8, [X28 + 0xD6B]
	0x03BBE6A0 LDR X26, [X26 + 0x7B8]
	0x03BBE6A4 LDR X27, [X27 + 0xA90]
	0x03BBE6A8 MOV X19, X6
	0x03BBE6AC MOV X20, X5
	0x03BBE6B0 MOV X22, X4
	0x03BBE6B4 MOV X23, X3
	0x03BBE6B8 MOV X24, X2
	0x03BBE6BC MOV X25, X1
	0x03BBE6C0 MOV X21, X0
	0x03BBE6C4 TBNZ X8, 0x0, 0x3BBE6E8
	0x03BBE6C8 ADRP X0, 0x535000
	0x03BBE6CC LDR X0, [X0 + 0xA90]
	0x03BBE6D0 BL 0x1C16CF4
	0x03BBE6D4 ADRP X0, 0x53B000
	0x03BBE6D8 LDR X0, [X0 + 0x7B8]
	0x03BBE6DC BL 0x1C16CF4
	0x03BBE6E0 MOVZ W8, 0x1
	0x03BBE6E4 STRB W8, [X28 + 0xD6B]
	0x03BBE6E8 LDR X0, [X26]
	0x03BBE6EC MOVI V0.2D, 0x0
	0x03BBE6F0 MOV X1, X25
	0x03BBE6F4 STUR V0, [X31 + 0x38]
	0x03BBE6F8 STUR V0, [X31 + 0x28]
	0x03BBE6FC STUR V0, [X31 + 0x18]
	0x03BBE700 BL 0x1C16E04
	0x03BBE704 LDR X8, [X26]
	0x03BBE708 STR X0, [X31]
	0x03BBE70C MOV X1, X24
	0x03BBE710 MOV X0, X8
	0x03BBE714 BL 0x1C16E04
	0x03BBE718 LDR X8, [X26]
	0x03BBE71C STR X0, [X31 + 0x8]
	0x03BBE720 MOV X1, X23
	0x03BBE724 MOV X0, X8
	0x03BBE728 BL 0x1C16E04
	0x03BBE72C LDR X8, [X27]
	0x03BBE730 STR X0, [X31 + 0x10]
	0x03BBE734 ADD X1, X31, 0x5C
	0x03BBE738 MOV X0, X8
	0x03BBE73C BL 0x1C16E04
	0x03BBE740 LDR X8, [X27]
	0x03BBE744 STR X0, [X31 + 0x18]
	0x03BBE748 ADD X1, X31, 0x58
	0x03BBE74C MOV X0, X8
	0x03BBE750 BL 0x1C16E04
	0x03BBE754 LDR X8, [X27]
	0x03BBE758 STR X0, [X31 + 0x20]
	0x03BBE75C ADD X1, X31, 0x4C
	0x03BBE760 MOV X0, X8
	0x03BBE764 BL 0x1C16E04
	0x03BBE768 LDR X8, [X27]
	0x03BBE76C STR X0, [X31 + 0x28]
	0x03BBE770 ADD X1, X31, 0x48
	0x03BBE774 MOV X0, X8
	0x03BBE778 BL 0x1C16E04
	0x03BBE77C LDR X8, [X26]
	0x03BBE780 STR X0, [X31 + 0x30]
	0x03BBE784 MOV X1, X22

ISIL:
	001 Move [X31-112], D9
	002 Move [X31-104], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X27, 0x825000
	015 Move X28, 0x55E000
	016 Move W8, [X27+3449]
	017 Move X28, [X28+2120]
	018 Move X19, X7
	019 Move X20, X6
	020 Move X21, X5
	021 Move V8, V1
	022 Move V9, V0
	023 Move X22, X4
	024 Move X23, X3
	025 Move X24, X2
	026 Move X25, X1
	027 Move X26, X0
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {40}
	032 Move X0, 0x55E000
	033 Move X0, [X0+2120]
	034 Call 0x1C17CF4
	035 Move X0, 0x5A0000
	036 Move X0, [X0+928]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X27+3449], W8
	040 Move X0, [X28]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X31
	046 Call BurstCompiler.get_IsEnabled
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {86}
	051 Move X8, 0x5A0000
	052 Move X8, [X8+928]
	053 Move X0, [X8]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Call CalculateRotationParams_00000D41$BurstDirectCall.GetFunctionPointer
	059 Compare X0, 0
	060 JumpIfEqual {86}
	061 Move X8, X0
	062 Move X0, X26
	063 Move X1, X25
	064 Move X2, X24
	065 Move X3, X23
	066 Move X4, X22
	067 Move X5, X21
	068 Move X6, X20
	069 Move X7, X19
	070 Move X20, [X31+96]
	071 Move X19, [X31+104]
	072 Move X22, [X31+80]
	073 Move X21, [X31+88]
	074 Move X24, [X31+64]
	075 Move X23, [X31+72]
	076 Move X26, [X31+48]
	077 Move X25, [X31+56]
	078 Move X28, [X31+32]
	079 Move X27, [X31+40]
	080 Move X30, [X31+16]
	081 Move V0, V9
	082 Move V1, V8
	083 Move D9, [X31+112]
	084 Move D8, [X31+120]
	085 CallNoReturn X8
	086 Move X0, X26
	087 Move X1, X25
	088 Move X2, X24
	089 Move X3, X23
	090 Move X4, X22
	091 Move X5, X21
	092 Move X6, X20
	093 Move X7, X19
	094 Move X20, [X31+96]
	095 Move X19, [X31+104]
	096 Move X22, [X31+80]
	097 Move X21, [X31+88]
	098 Move X24, [X31+64]
	099 Move X23, [X31+72]
	100 Move X26, [X31+48]
	101 Move X25, [X31+56]
	102 Move X28, [X31+32]
	103 Move X27, [X31+40]
	104 Move X30, [X31+16]
	105 Move [X31+112], X31
	106 Move V0, V9
	107 Move V1, V8
	108 Move D9, [X31+112]
	109 Move D8, [X31+120]
	110 Call 0x3BCA4A0
	111 Return 

