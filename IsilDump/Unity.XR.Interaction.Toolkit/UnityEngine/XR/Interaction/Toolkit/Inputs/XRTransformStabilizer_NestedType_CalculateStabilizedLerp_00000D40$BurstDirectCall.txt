Type: UnityEngine.XR.Interaction.Toolkit.Inputs.XRTransformStabilizer/CalculateStabilizedLerp_00000D40$BurstDirectCall

Method: System.Void GetFunctionPointerDiscard(ref System.IntPtr param_0)

Disassembly:
	0x03BBFB60 MOV X2, X22
	0x03BBFB64 LDP X20, X19, [X31 + 0x30]
	0x03BBFB68 LDP X22, X21, [X31 + 0x20]
	0x03BBFB6C LDP X24, X23, [X31 + 0x10]
	0x03BBFB70 LDR X30, [X31], #0x40
	0x03BBFB74 B 0x3BC8368
	0x03BBFB78 LDR X0, [X0 + 0x50]
	0x03BBFB7C RET
	0x03BBFB80 STR X30, [X31 - 0x20]!
	0x03BBFB84 STP X20, X19, [X31 + 0x10]
	0x03BBFB88 MOV X19, X1
	0x03BBFB8C MOV X20, X0
	0x03BBFB90 BL 0x3BBFBA8
	0x03BBFB94 STR X19, [X20 + 0x50]
	0x03BBFB98 MOV X0, X20
	0x03BBFB9C LDP X20, X19, [X31 + 0x10]
	0x03BBFBA0 LDR X30, [X31], #0x20
	0x03BBFBA4 B 0x3BBFC8C
	0x03BBFBA8 STR X30, [X31 - 0x40]!
	0x03BBFBAC STP X24, X23, [X31 + 0x10]
	0x03BBFBB0 STP X22, X21, [X31 + 0x20]
	0x03BBFBB4 STP X20, X19, [X31 + 0x30]
	0x03BBFBB8 ADRP X20, 0x823000
	0x03BBFBBC ADRP X24, 0x538000
	0x03BBFBC0 ADRP X21, 0x59E000
	0x03BBFBC4 ADRP X22, 0x59E000
	0x03BBFBC8 ADRP X23, 0x59E000
	0x03BBFBCC LDRB W8, [X20 + 0xD97]
	0x03BBFBD0 LDR X24, [X24 + 0x3D8]
	0x03BBFBD4 LDR X21, [X21 + 0x498]
	0x03BBFBD8 LDR X22, [X22 + 0x4A0]
	0x03BBFBDC LDR X23, [X23 + 0x460]
	0x03BBFBE0 MOV X19, X0
	0x03BBFBE4 TBNZ X8, 0x0, 0x3BBFC20
	0x03BBFBE8 ADRP X0, 0x538000
	0x03BBFBEC LDR X0, [X0 + 0x3D8]
	0x03BBFBF0 BL 0x1C16CF4
	0x03BBFBF4 ADRP X0, 0x59E000
	0x03BBFBF8 LDR X0, [X0 + 0x4A0]
	0x03BBFBFC BL 0x1C16CF4
	0x03BBFC00 ADRP X0, 0x59E000
	0x03BBFC04 LDR X0, [X0 + 0x498]
	0x03BBFC08 BL 0x1C16CF4
	0x03BBFC0C ADRP X0, 0x59E000
	0x03BBFC10 LDR X0, [X0 + 0x460]
	0x03BBFC14 BL 0x1C16CF4
	0x03BBFC18 MOVZ W8, 0x1
	0x03BBFC1C STRB W8, [X20 + 0xD97]
	0x03BBFC20 LDR X0, [X24]
	0x03BBFC24 LDR X20, [X19 + 0x50]
	0x03BBFC28 BL 0x1C16F10
	0x03BBFC2C LDR X2, [X21]
	0x03BBFC30 MOV X1, X19
	0x03BBFC34 MOV X3, X31
	0x03BBFC38 MOV X21, X0
	0x03BBFC3C BL 0x2A719B8
	0x03BBFC40 LDR X0, [X24]
	0x03BBFC44 BL 0x1C16F10
	0x03BBFC48 LDR X2, [X22]
	0x03BBFC4C MOV X1, X19
	0x03BBFC50 MOV X3, X31
	0x03BBFC54 MOV X22, X0
	0x03BBFC58 BL 0x2A719B8
	0x03BBFC5C LDR X0, [X23]
	0x03BBFC60 LDR W8, [X0 + 0xE0]
	0x03BBFC64 CBNZ W8, 0x3BBFC6C
	0x03BBFC68 BL 0x1C16DFC
	0x03BBFC6C MOV X0, X20
	0x03BBFC70 MOV X1, X21
	0x03BBFC74 MOV X2, X22
	0x03BBFC78 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x824000
	008 Move X23, 0x59F000
	009 Move W8, [X20+3441]
	010 Move X23, [X23+944]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x55D000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0x59F000
	020 Move X0, [X0+944]
	021 Call 0x1C17CF4
	022 Move X0, 0x59F000
	023 Move X0, [X0+1024]
	024 Call 0x1C17CF4
	025 Move X0, 0x59F000
	026 Move X0, [X0+1032]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+3441], W8
	030 Move X8, [X23]
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X23]
	037 Move X9, [X8+184]
	038 Move X10, [X9]
	039 Compare X10, 0
	040 JumpIfNotEqual {70}
	041 Move W10, [X8+224]
	042 Compare W10, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X23]
	047 Move X9, [X8+184]
	048 Move X8, 0x55D000
	049 Move X20, [X9+8]
	050 Move X8, [X8+2120]
	051 Move X0, [X8]
	052 Move X8, 0x59F000
	053 Move X8, [X8+1032]
	054 Move X21, [X8]
	055 Move X8, 0x59F000
	056 Move X8, [X8+1024]
	057 Move W9, [X0+224]
	058 Move X22, [X8]
	059 Compare W9, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X22
	065 Move X3, X31
	066 Call BurstCompiler.GetILPPMethodFunctionPointer2, X0, X1, X2
	067 Move X8, [X23]
	068 Move X9, [X8+184]
	069 Move [X9], X0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {76}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, [X23]
	076 Move X8, [X8+184]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X8, [X8]
	080 Move [X19], X8
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 

Method: System.IntPtr GetFunctionPointer()

Disassembly:
	0x03BBFC7C LDP X22, X21, [X31 + 0x20]
	0x03BBFC80 LDP X24, X23, [X31 + 0x10]
	0x03BBFC84 LDR X30, [X31], #0x40
	0x03BBFC88 B 0x3BC8490
	0x03BBFC8C STR X30, [X31 - 0x40]!
	0x03BBFC90 STP X24, X23, [X31 + 0x10]
	0x03BBFC94 STP X22, X21, [X31 + 0x20]
	0x03BBFC98 STP X20, X19, [X31 + 0x30]
	0x03BBFC9C ADRP X20, 0x823000
	0x03BBFCA0 ADRP X24, 0x538000
	0x03BBFCA4 ADRP X21, 0x59E000
	0x03BBFCA8 ADRP X22, 0x59E000
	0x03BBFCAC ADRP X23, 0x59E000
	0x03BBFCB0 LDRB W8, [X20 + 0xD96]
	0x03BBFCB4 LDR X24, [X24 + 0x3D8]
	0x03BBFCB8 LDR X21, [X21 + 0x498]
	0x03BBFCBC LDR X22, [X22 + 0x4A0]
	0x03BBFCC0 LDR X23, [X23 + 0x460]
	0x03BBFCC4 MOV X19, X0
	0x03BBFCC8 TBNZ X8, 0x0, 0x3BBFD04
	0x03BBFCCC ADRP X0, 0x538000
	0x03BBFCD0 LDR X0, [X0 + 0x3D8]
	0x03BBFCD4 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x824000
	005 Move X19, 0x59F000
	006 Move W8, [X20+3442]
	007 Move X19, [X19+944]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x59F000
	013 Move X0, [X0+944]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3442], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 8
	024 Call CalculateStabilizedLerp_00000D40$BurstDirectCall.GetFunctionPointerDiscard, X0
	025 Move X0, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void Constructor()

Disassembly:
	0x03BBFCD8 ADRP X0, 0x59E000
	0x03BBFCDC LDR X0, [X0 + 0x4A0]
	0x03BBFCE0 BL 0x1C16CF4
	0x03BBFCE4 ADRP X0, 0x59E000
	0x03BBFCE8 LDR X0, [X0 + 0x498]
	0x03BBFCEC BL 0x1C16CF4
	0x03BBFCF0 ADRP X0, 0x59E000
	0x03BBFCF4 LDR X0, [X0 + 0x460]
	0x03BBFCF8 BL 0x1C16CF4
	0x03BBFCFC MOVZ W8, 0x1
	0x03BBFD00 STRB W8, [X20 + 0xD96]
	0x03BBFD04 LDR X0, [X24]
	0x03BBFD08 LDR X20, [X19 + 0x50]
	0x03BBFD0C BL 0x1C16F10
	0x03BBFD10 LDR X2, [X21]
	0x03BBFD14 MOV X1, X19
	0x03BBFD18 MOV X3, X31
	0x03BBFD1C MOV X21, X0
	0x03BBFD20 BL 0x2A719B8
	0x03BBFD24 LDR X0, [X24]
	0x03BBFD28 BL 0x1C16F10
	0x03BBFD2C LDR X2, [X22]
	0x03BBFD30 MOV X1, X19
	0x03BBFD34 MOV X3, X31
	0x03BBFD38 MOV X22, X0
	0x03BBFD3C BL 0x2A719B8
	0x03BBFD40 LDR X0, [X23]
	0x03BBFD44 LDR W8, [X0 + 0xE0]
	0x03BBFD48 CBNZ W8, 0x3BBFD50
	0x03BBFD4C BL 0x1C16DFC
	0x03BBFD50 MOV X0, X20
	0x03BBFD54 MOV X1, X21
	0x03BBFD58 MOV X2, X22
	0x03BBFD5C LDP X20, X19, [X31 + 0x30]
	0x03BBFD60 LDP X22, X21, [X31 + 0x20]
	0x03BBFD64 LDP X24, X23, [X31 + 0x10]
	0x03BBFD68 LDR X30, [X31], #0x40
	0x03BBFD6C B 0x3BC8368
	0x03BBFD70 LDR X0, [X0 + 0x58]
	0x03BBFD74 RET
	0x03BBFD78 STR X30, [X31 - 0x20]!
	0x03BBFD7C STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x824000
	006 Move X19, 0x59F000
	007 Move X20, 0x55D000
	008 Move W8, [X21+3443]
	009 Move X19, [X19+1040]
	010 Move X20, [X20+2120]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x55D000
	016 Move X0, [X0+2120]
	017 Call 0x1C17CF4
	018 Move X0, 0x59F000
	019 Move X0, [X0+944]
	020 Call 0x1C17CF4
	021 Move X0, 0x59F000
	022 Move X0, [X0+1040]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3443], W8
	026 Move X0, [X20]
	027 Move X20, 0x59F000
	028 Move X19, [X19]
	029 Move W8, [X0+224]
	030 Move X20, [X20+944]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call BurstCompiler.CompileILPPMethod2, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move [X8+8], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void Initialize()

Disassembly:
	0x03BBFD80 MOV X19, X1

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03BBFD84 MOV X20, X0

ISIL:
	001 Call CalculateStabilizedLerp_00000D40$BurstDirectCall.Constructor
	002 Return 

Method: System.Single Invoke(System.Single distance, System.Single timeSlice)

Disassembly:
	0x03BBE4CC LDR X0, [X0 + 0x398]
	0x03BBE4D0 BL 0x1C16CF4
	0x03BBE4D4 MOVZ W8, 0x1
	0x03BBE4D8 STRB W8, [X20 + 0xD68]
	0x03BBE4DC LDR X0, [X19]
	0x03BBE4E0 STR X31, [X31 + 0x8]
	0x03BBE4E4 LDR W8, [X0 + 0xE0]
	0x03BBE4E8 CBNZ W8, 0x3BBE4F0
	0x03BBE4EC BL 0x1C16DFC
	0x03BBE4F0 ADD X0, X31, 0x8
	0x03BBE4F4 BL 0x3BBE390
	0x03BBE4F8 LDR X0, [X31 + 0x8]
	0x03BBE4FC LDP X20, X19, [X31 + 0x10]
	0x03BBE500 LDR X30, [X31], #0x20
	0x03BBE504 RET
	0x03BBE508 STP X30, X21, [X31 - 0x20]!
	0x03BBE50C STP X20, X19, [X31 + 0x10]
	0x03BBE510 ADRP X21, 0x824000
	0x03BBE514 ADRP X19, 0x59F000
	0x03BBE518 ADRP X20, 0x55D000
	0x03BBE51C LDRB W8, [X21 + 0xD69]
	0x03BBE520 LDR X19, [X19 + 0x3E0]
	0x03BBE524 LDR X20, [X20 + 0x848]
	0x03BBE528 TBNZ X8, 0x0, 0x3BBE558
	0x03BBE52C ADRP X0, 0x55D000
	0x03BBE530 LDR X0, [X0 + 0x848]
	0x03BBE534 BL 0x1C16CF4
	0x03BBE538 ADRP X0, 0x59F000
	0x03BBE53C LDR X0, [X0 + 0x398]
	0x03BBE540 BL 0x1C16CF4
	0x03BBE544 ADRP X0, 0x59F000
	0x03BBE548 LDR X0, [X0 + 0x3E0]
	0x03BBE54C BL 0x1C16CF4
	0x03BBE550 MOVZ W8, 0x1
	0x03BBE554 STRB W8, [X21 + 0xD69]
	0x03BBE558 LDR X0, [X20]
	0x03BBE55C ADRP X20, 0x59F000
	0x03BBE560 LDR X19, [X19]
	0x03BBE564 LDR W8, [X0 + 0xE0]
	0x03BBE568 LDR X20, [X20 + 0x398]
	0x03BBE56C CBNZ W8, 0x3BBE574
	0x03BBE570 BL 0x1C16DFC
	0x03BBE574 MOV X0, X19
	0x03BBE578 MOV X1, X31
	0x03BBE57C BL 0x36FA754
	0x03BBE580 LDR X8, [X20]
	0x03BBE584 MOV X19, X0
	0x03BBE588 LDR W9, [X8 + 0xE0]
	0x03BBE58C CBNZ W9, 0x3BBE59C
	0x03BBE590 MOV X0, X8
	0x03BBE594 BL 0x1C16DFC
	0x03BBE598 LDR X8, [X20]
	0x03BBE59C LDR X8, [X8 + 0xB8]
	0x03BBE5A0 STR X19, [X8 + 0x8]
	0x03BBE5A4 LDP X20, X19, [X31 + 0x10]
	0x03BBE5A8 LDP X30, X21, [X31], #0x20
	0x03BBE5AC RET
	0x03BBE5B0 RET
	0x03BBE5B4 B 0x3BBE508
	0x03BBE5B8 STP X30, X21, [X31 - 0x20]!
	0x03BBE5BC STP X20, X19, [X31 + 0x10]
	0x03BBE5C0 LDR X8, [X2 + 0x8]
	0x03BBE5C4 STP X1, X2, [X0 + 0x20]
	0x03BBE5C8 MOV X19, X0
	0x03BBE5CC MOV X20, X1
	0x03BBE5D0 STR X8, [X0 + 0x10]
	0x03BBE5D4 LDRB W21, [X2 + 0x52]
	0x03BBE5D8 STR X0, [X0 + 0x40]
	0x03BBE5DC MOV X0, X2
	0x03BBE5E0 BL 0x1C16D84
	0x03BBE5E4 TBZ X0, 0x0, 0x3BBE5FC
	0x03BBE5E8 CMP W21, 0x8
	0x03BBE5EC B.NE 0x3BBE618
	0x03BBE5F0 ADRP X8, 0xFFFFFFFFFE042000
	0x03BBE5F4 ADD X8, X8, 0xEAC
	0x03BBE5F8 B 0x3BBE60C
	0x03BBE5FC CMP W21, 0x7
	0x03BBE600 B.NE 0x3BBE614
	0x03BBE604 ADRP X8, 0xFFFFFFFFFE042000
	0x03BBE608 ADD X8, X8, 0xE90
	0x03BBE60C STR X8, [X19 + 0x18]
	0x03BBE610 B 0x3BBE628
	0x03BBE614 CBZ X20, 0x3BBE640
	0x03BBE618 LDR X8, [X19 + 0x10]
	0x03BBE61C LDR X9, [X19 + 0x20]
	0x03BBE620 STR X8, [X19 + 0x18]
	0x03BBE624 STR X9, [X19 + 0x40]
	0x03BBE628 ADRP X8, 0xFFFFFFFFFE042000
	0x03BBE62C ADD X8, X8, 0xDF0
	0x03BBE630 STR X8, [X19 + 0x38]
	0x03BBE634 LDP X20, X19, [X31 + 0x10]
	0x03BBE638 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x825000
	007 Move X20, 0x55E000
	008 Move W8, [X19+3444]
	009 Move X20, [X20+2120]
	010 Move V9, V1
	011 Move V8, V0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x55E000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0x5A0000
	020 Move X0, [X0+944]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X19+3444], W8
	024 Move X0, [X20]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X31
	030 Call BurstCompiler.get_IsEnabled
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {53}
	035 Move X8, 0x5A0000
	036 Move X8, [X8+944]
	037 Move X0, [X8]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Call CalculateStabilizedLerp_00000D40$BurstDirectCall.GetFunctionPointer
	043 Compare X0, 0
	044 JumpIfEqual {53}
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X30, [X31+16]
	048 Move V0, V8
	049 Move V1, V9
	050 Move D9, [X31+48]
	051 Move D8, [X31+56]
	052 CallNoReturn X0
	053 Move S0, 1
	054 NotImplemented "Instruction FCMP not yet implemented."
	055 NotImplemented "Instruction FCMP not yet implemented."
	056 Move S0, W31
	057 Move X8, -51195904
	058 Move V3, [X8+640]
	059 Move X8, -51183616
	060 Move V5, [X8+3208]
	061 Move W9, 0x7F800000
	062 NotImplemented "Instruction FDIV not yet implemented."
	063 Move W8, S3
	064 And W8, W8, 0x7FFFFFFF
	065 Move S1, 1
	066 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Add V5, V7, V5
	069 NotImplemented "Instruction FCCMP not yet implemented."
	070 Move V7, V5
	071 NotImplemented "Instruction FCSEL not yet implemented."
	072 Move V4, 0
	073 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	074 NotImplemented "Instruction BIC not yet implemented."
	075 Move W8, S1
	076 NotImplemented "Instruction INVALID not yet implemented."
	077 NotImplemented "Instruction INVALID not yet implemented."
	078 And W8, W8, 0x7FFFFFFF
	079 Move S2, W31
	080 Or V3, V3, V7
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction FCCMP not yet implemented."
	083 NotImplemented "Instruction INVALID not yet implemented."
	084 NotImplemented "Instruction FCSEL not yet implemented."
	085 Move V2, V3
	086 Multiply S0, S8, S8
	087 NotImplemented "Instruction BIC not yet implemented."
	088 Subtract S0, S8, S0
	089 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	090 NotImplemented "Instruction INVALID not yet implemented."
	091 Multiply S7, S0, S0
	092 Or V2, V4, V2
	093 NotImplemented "Instruction BIC not yet implemented."
	094 Move V7.S[1], V0.S[0]
	095 NotImplemented "Instruction INVALID not yet implemented."
	096 Multiply S1, S1, S8
	097 Move S2, V0.S[1]
	098 Add S1, S1, S2
	099 Add S0, S0, S1
	100 Move X20, [X31+32]
	101 Move X19, [X31+40]
	102 Move X30, [X31+16]
	103 Move D9, [X31+48]
	104 Move D8, [X31+56]
	105 Return V0

