Type: UnityEngine.XR.Interaction.Toolkit.Inputs.XRTransformStabilizer/StabilizeOptimalRotation_00000D3F$BurstDirectCall

Method: System.Void GetFunctionPointerDiscard(ref System.IntPtr param_0)

Disassembly:
	0x03BBF7D4 ADRP X22, 0x59E000
	0x03BBF7D8 ADRP X23, 0x59E000
	0x03BBF7DC LDRB W8, [X20 + 0xD93]
	0x03BBF7E0 LDR X24, [X24 + 0x3D8]
	0x03BBF7E4 LDR X21, [X21 + 0x478]
	0x03BBF7E8 LDR X22, [X22 + 0x480]
	0x03BBF7EC LDR X23, [X23 + 0x460]
	0x03BBF7F0 MOV X19, X0
	0x03BBF7F4 TBNZ X8, 0x0, 0x3BBF830
	0x03BBF7F8 ADRP X0, 0x538000
	0x03BBF7FC LDR X0, [X0 + 0x3D8]
	0x03BBF800 BL 0x1C16CF4
	0x03BBF804 ADRP X0, 0x59E000
	0x03BBF808 LDR X0, [X0 + 0x480]
	0x03BBF80C BL 0x1C16CF4
	0x03BBF810 ADRP X0, 0x59E000
	0x03BBF814 LDR X0, [X0 + 0x478]
	0x03BBF818 BL 0x1C16CF4
	0x03BBF81C ADRP X0, 0x59E000
	0x03BBF820 LDR X0, [X0 + 0x460]
	0x03BBF824 BL 0x1C16CF4
	0x03BBF828 MOVZ W8, 0x1
	0x03BBF82C STRB W8, [X20 + 0xD93]
	0x03BBF830 LDR X0, [X24]
	0x03BBF834 LDR X20, [X19 + 0x40]
	0x03BBF838 BL 0x1C16F10
	0x03BBF83C LDR X2, [X21]
	0x03BBF840 MOV X1, X19
	0x03BBF844 MOV X3, X31
	0x03BBF848 MOV X21, X0
	0x03BBF84C BL 0x2A719B8
	0x03BBF850 LDR X0, [X24]
	0x03BBF854 BL 0x1C16F10
	0x03BBF858 LDR X2, [X22]
	0x03BBF85C MOV X1, X19
	0x03BBF860 MOV X3, X31
	0x03BBF864 MOV X22, X0
	0x03BBF868 BL 0x2A719B8
	0x03BBF86C LDR X0, [X23]
	0x03BBF870 LDR W8, [X0 + 0xE0]
	0x03BBF874 CBNZ W8, 0x3BBF87C
	0x03BBF878 BL 0x1C16DFC
	0x03BBF87C MOV X0, X20
	0x03BBF880 MOV X1, X21
	0x03BBF884 MOV X2, X22
	0x03BBF888 LDP X20, X19, [X31 + 0x30]
	0x03BBF88C LDP X22, X21, [X31 + 0x20]
	0x03BBF890 LDP X24, X23, [X31 + 0x10]
	0x03BBF894 LDR X30, [X31], #0x40
	0x03BBF898 B 0x3BC8490
	0x03BBF89C STR X30, [X31 - 0x40]!
	0x03BBF8A0 STP X24, X23, [X31 + 0x10]
	0x03BBF8A4 STP X22, X21, [X31 + 0x20]
	0x03BBF8A8 STP X20, X19, [X31 + 0x30]
	0x03BBF8AC ADRP X20, 0x823000
	0x03BBF8B0 ADRP X24, 0x538000
	0x03BBF8B4 ADRP X21, 0x59E000
	0x03BBF8B8 ADRP X22, 0x59E000
	0x03BBF8BC ADRP X23, 0x59E000
	0x03BBF8C0 LDRB W8, [X20 + 0xD92]
	0x03BBF8C4 LDR X24, [X24 + 0x3D8]
	0x03BBF8C8 LDR X21, [X21 + 0x478]
	0x03BBF8CC LDR X22, [X22 + 0x480]
	0x03BBF8D0 LDR X23, [X23 + 0x460]
	0x03BBF8D4 MOV X19, X0
	0x03BBF8D8 TBNZ X8, 0x0, 0x3BBF914
	0x03BBF8DC ADRP X0, 0x538000
	0x03BBF8E0 LDR X0, [X0 + 0x3D8]
	0x03BBF8E4 BL 0x1C16CF4
	0x03BBF8E8 ADRP X0, 0x59E000
	0x03BBF8EC LDR X0, [X0 + 0x480]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x824000
	008 Move X23, 0x59F000
	009 Move W8, [X20+3436]
	010 Move X23, [X23+936]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x55D000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0x59F000
	020 Move X0, [X0+936]
	021 Call 0x1C17CF4
	022 Move X0, 0x59F000
	023 Move X0, [X0+1000]
	024 Call 0x1C17CF4
	025 Move X0, 0x59F000
	026 Move X0, [X0+1008]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+3436], W8
	030 Move X8, [X23]
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X23]
	037 Move X9, [X8+184]
	038 Move X10, [X9]
	039 Compare X10, 0
	040 JumpIfNotEqual {70}
	041 Move W10, [X8+224]
	042 Compare W10, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X23]
	047 Move X9, [X8+184]
	048 Move X8, 0x55D000
	049 Move X20, [X9+8]
	050 Move X8, [X8+2120]
	051 Move X0, [X8]
	052 Move X8, 0x59F000
	053 Move X8, [X8+1008]
	054 Move X21, [X8]
	055 Move X8, 0x59F000
	056 Move X8, [X8+1000]
	057 Move W9, [X0+224]
	058 Move X22, [X8]
	059 Compare W9, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X22
	065 Move X3, X31
	066 Call BurstCompiler.GetILPPMethodFunctionPointer2, X0, X1, X2
	067 Move X8, [X23]
	068 Move X9, [X8+184]
	069 Move [X9], X0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {76}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, [X23]
	076 Move X8, [X8+184]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X8, [X8]
	080 Move [X19], X8
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 

Method: System.IntPtr GetFunctionPointer()

Disassembly:
	0x03BBF8F0 BL 0x1C16CF4
	0x03BBF8F4 ADRP X0, 0x59E000
	0x03BBF8F8 LDR X0, [X0 + 0x478]
	0x03BBF8FC BL 0x1C16CF4
	0x03BBF900 ADRP X0, 0x59E000
	0x03BBF904 LDR X0, [X0 + 0x460]
	0x03BBF908 BL 0x1C16CF4
	0x03BBF90C MOVZ W8, 0x1
	0x03BBF910 STRB W8, [X20 + 0xD92]
	0x03BBF914 LDR X0, [X24]
	0x03BBF918 LDR X20, [X19 + 0x40]
	0x03BBF91C BL 0x1C16F10
	0x03BBF920 LDR X2, [X21]
	0x03BBF924 MOV X1, X19
	0x03BBF928 MOV X3, X31
	0x03BBF92C MOV X21, X0
	0x03BBF930 BL 0x2A719B8
	0x03BBF934 LDR X0, [X24]
	0x03BBF938 BL 0x1C16F10
	0x03BBF93C LDR X2, [X22]
	0x03BBF940 MOV X1, X19
	0x03BBF944 MOV X3, X31
	0x03BBF948 MOV X22, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x824000
	005 Move X19, 0x59F000
	006 Move W8, [X20+3437]
	007 Move X19, [X19+936]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x59F000
	013 Move X0, [X0+936]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3437], W8
	017 Move X0, [X19]
	018 Move [X31+8], X31
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 8
	024 Call StabilizeOptimalRotation_00000D3F$BurstDirectCall.GetFunctionPointerDiscard, X0
	025 Move X0, [X31+8]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void Constructor()

Disassembly:
	0x03BBF94C BL 0x2A719B8
	0x03BBF950 LDR X0, [X23]
	0x03BBF954 LDR W8, [X0 + 0xE0]
	0x03BBF958 CBNZ W8, 0x3BBF960
	0x03BBF95C BL 0x1C16DFC
	0x03BBF960 MOV X0, X20
	0x03BBF964 MOV X1, X21
	0x03BBF968 MOV X2, X22
	0x03BBF96C LDP X20, X19, [X31 + 0x30]
	0x03BBF970 LDP X22, X21, [X31 + 0x20]
	0x03BBF974 LDP X24, X23, [X31 + 0x10]
	0x03BBF978 LDR X30, [X31], #0x40
	0x03BBF97C B 0x3BC8368
	0x03BBF980 LDR X0, [X0 + 0x48]
	0x03BBF984 RET
	0x03BBF988 STR X30, [X31 - 0x20]!
	0x03BBF98C STP X20, X19, [X31 + 0x10]
	0x03BBF990 MOV X19, X1
	0x03BBF994 MOV X20, X0
	0x03BBF998 BL 0x3BBF9B0
	0x03BBF99C STR X19, [X20 + 0x48]
	0x03BBF9A0 MOV X0, X20
	0x03BBF9A4 LDP X20, X19, [X31 + 0x10]
	0x03BBF9A8 LDR X30, [X31], #0x20
	0x03BBF9AC B 0x3BBFA94
	0x03BBF9B0 STR X30, [X31 - 0x40]!
	0x03BBF9B4 STP X24, X23, [X31 + 0x10]
	0x03BBF9B8 STP X22, X21, [X31 + 0x20]
	0x03BBF9BC STP X20, X19, [X31 + 0x30]
	0x03BBF9C0 ADRP X20, 0x823000
	0x03BBF9C4 ADRP X24, 0x538000
	0x03BBF9C8 ADRP X21, 0x59E000
	0x03BBF9CC ADRP X22, 0x59E000
	0x03BBF9D0 ADRP X23, 0x59E000
	0x03BBF9D4 LDRB W8, [X20 + 0xD95]
	0x03BBF9D8 LDR X24, [X24 + 0x3D8]
	0x03BBF9DC LDR X21, [X21 + 0x488]
	0x03BBF9E0 LDR X22, [X22 + 0x490]
	0x03BBF9E4 LDR X23, [X23 + 0x460]
	0x03BBF9E8 MOV X19, X0
	0x03BBF9EC TBNZ X8, 0x0, 0x3BBFA28
	0x03BBF9F0 ADRP X0, 0x538000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x824000
	006 Move X19, 0x59F000
	007 Move X20, 0x55D000
	008 Move W8, [X21+3438]
	009 Move X19, [X19+1016]
	010 Move X20, [X20+2120]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x55D000
	016 Move X0, [X0+2120]
	017 Call 0x1C17CF4
	018 Move X0, 0x59F000
	019 Move X0, [X0+936]
	020 Call 0x1C17CF4
	021 Move X0, 0x59F000
	022 Move X0, [X0+1016]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3438], W8
	026 Move X0, [X20]
	027 Move X20, 0x59F000
	028 Move X19, [X19]
	029 Move W8, [X0+224]
	030 Move X20, [X20+936]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call BurstCompiler.CompileILPPMethod2, X0
	037 Move X8, [X20]
	038 Move X19, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move [X8+8], X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void Initialize()

Disassembly:
	0x03BBF9F4 LDR X0, [X0 + 0x3D8]

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x03BBF9F8 BL 0x1C16CF4

ISIL:
	001 Call StabilizeOptimalRotation_00000D3F$BurstDirectCall.Constructor
	002 Return 

Method: System.Void Invoke(in Unity.Mathematics.quaternion startRot, in Unity.Mathematics.quaternion targetRot, in Unity.Mathematics.quaternion alternateStartRot, System.Single deltaTime, System.Single angleStabilization, System.Single alternateStabilization, System.Single scaleFactor, out Unity.Mathematics.quaternion resultRot)

Disassembly:
	0x03BBE340 STR X0, [X31 + 0x20]
	0x03BBE344 MOV X1, X22
	0x03BBE348 MOV X0, X8
	0x03BBE34C BL 0x1C16E04
	0x03BBE350 STR X0, [X31 + 0x28]
	0x03BBE354 ADD X1, X31, 0x8
	0x03BBE358 MOV X0, X21
	0x03BBE35C MOV X2, X20
	0x03BBE360 MOV X3, X19
	0x03BBE364 BL 0x1C16CB0
	0x03BBE368 LDP X20, X19, [X31 + 0x80]
	0x03BBE36C LDP X22, X21, [X31 + 0x70]
	0x03BBE370 LDP X24, X23, [X31 + 0x60]
	0x03BBE374 LDP X26, X25, [X31 + 0x50]
	0x03BBE378 LDP X30, X27, [X31 + 0x40]
	0x03BBE37C ADD X31, X31, 0x90
	0x03BBE380 RET
	0x03BBE384 MOV X0, X1
	0x03BBE388 MOV X1, X31
	0x03BBE38C B 0x1C16CB4
	0x03BBE390 STP X30, X23, [X31 - 0x30]!
	0x03BBE394 STP X22, X21, [X31 + 0x10]
	0x03BBE398 STP X20, X19, [X31 + 0x20]
	0x03BBE39C ADRP X20, 0x824000
	0x03BBE3A0 ADRP X23, 0x59F000
	0x03BBE3A4 LDRB W8, [X20 + 0xD67]
	0x03BBE3A8 LDR X23, [X23 + 0x398]
	0x03BBE3AC MOV X19, X0
	0x03BBE3B0 TBNZ X8, 0x0, 0x3BBE3EC
	0x03BBE3B4 ADRP X0, 0x55D000
	0x03BBE3B8 LDR X0, [X0 + 0x848]
	0x03BBE3BC BL 0x1C16CF4
	0x03BBE3C0 ADRP X0, 0x59F000
	0x03BBE3C4 LDR X0, [X0 + 0x398]
	0x03BBE3C8 BL 0x1C16CF4
	0x03BBE3CC ADRP X0, 0x59F000
	0x03BBE3D0 LDR X0, [X0 + 0x3D0]
	0x03BBE3D4 BL 0x1C16CF4
	0x03BBE3D8 ADRP X0, 0x59F000
	0x03BBE3DC LDR X0, [X0 + 0x3D8]
	0x03BBE3E0 BL 0x1C16CF4
	0x03BBE3E4 MOVZ W8, 0x1
	0x03BBE3E8 STRB W8, [X20 + 0xD67]
	0x03BBE3EC LDR X8, [X23]
	0x03BBE3F0 LDR W9, [X8 + 0xE0]
	0x03BBE3F4 CBNZ W9, 0x3BBE404
	0x03BBE3F8 MOV X0, X8
	0x03BBE3FC BL 0x1C16DFC
	0x03BBE400 LDR X8, [X23]
	0x03BBE404 LDR X9, [X8 + 0xB8]
	0x03BBE408 LDR X10, [X9]
	0x03BBE40C CBNZ X10, 0x3BBE47C
	0x03BBE410 LDR W10, [X8 + 0xE0]
	0x03BBE414 CBNZ W10, 0x3BBE428
	0x03BBE418 MOV X0, X8
	0x03BBE41C BL 0x1C16DFC
	0x03BBE420 LDR X8, [X23]
	0x03BBE424 LDR X9, [X8 + 0xB8]
	0x03BBE428 ADRP X8, 0x55D000
	0x03BBE42C LDR X20, [X9 + 0x8]
	0x03BBE430 LDR X8, [X8 + 0x848]
	0x03BBE434 LDR X0, [X8]
	0x03BBE438 ADRP X8, 0x59F000
	0x03BBE43C LDR X8, [X8 + 0x3D8]
	0x03BBE440 LDR X21, [X8]
	0x03BBE444 ADRP X8, 0x59F000
	0x03BBE448 LDR X8, [X8 + 0x3D0]
	0x03BBE44C LDR W9, [X0 + 0xE0]
	0x03BBE450 LDR X22, [X8]
	0x03BBE454 CBNZ W9, 0x3BBE45C
	0x03BBE458 BL 0x1C16DFC
	0x03BBE45C MOV X0, X20
	0x03BBE460 MOV X1, X21
	0x03BBE464 MOV X2, X22

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X23, 0x825000
	013 Move X24, 0x55E000
	014 Move W8, [X23+3439]
	015 Move X24, [X24+2120]
	016 Move X19, X3
	017 Move V8, V3
	018 Move V9, V2
	019 Move V10, V1
	020 Move V11, V0
	021 Move X20, X2
	022 Move X21, X1
	023 Move X22, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {36}
	028 Move X0, 0x55E000
	029 Move X0, [X0+2120]
	030 Call 0x1C17CF4
	031 Move X0, 0x5A0000
	032 Move X0, [X0+936]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X23+3439], W8
	036 Move X0, [X24]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X31
	042 Call BurstCompiler.get_IsEnabled
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {78}
	047 Move X8, 0x5A0000
	048 Move X8, [X8+936]
	049 Move X0, [X8]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Call StabilizeOptimalRotation_00000D3F$BurstDirectCall.GetFunctionPointer
	055 Compare X0, 0
	056 JumpIfEqual {78}
	057 Move X4, X0
	058 Move X0, X22
	059 Move X1, X21
	060 Move X2, X20
	061 Move V2, V9
	062 Move V3, V8
	063 Move X3, X19
	064 Move X20, [X31+80]
	065 Move X19, [X31+88]
	066 Move X22, [X31+64]
	067 Move X21, [X31+72]
	068 Move X24, [X31+48]
	069 Move X23, [X31+56]
	070 Move X30, [X31+32]
	071 Move D9, [X31+16]
	072 Move D8, [X31+24]
	073 Move V0, V11
	074 Move V1, V10
	075 Move D11, [X31+96]
	076 Move D10, [X31+104]
	077 CallNoReturn X4
	078 Move X0, X22
	079 Move X1, X21
	080 Move X2, X20
	081 Move V2, V9
	082 Move V3, V8
	083 Move X3, X19
	084 Move X20, [X31+80]
	085 Move X19, [X31+88]
	086 Move X22, [X31+64]
	087 Move X21, [X31+72]
	088 Move X24, [X31+48]
	089 Move X23, [X31+56]
	090 Move X30, [X31+32]
	091 Move D9, [X31+16]
	092 Move D8, [X31+24]
	093 Move V0, V11
	094 Move V1, V10
	095 Move X4, X31
	096 Move D11, [X31+96]
	097 Move D10, [X31+104]
	098 Call 0x3BCA3D8
	099 Return 

