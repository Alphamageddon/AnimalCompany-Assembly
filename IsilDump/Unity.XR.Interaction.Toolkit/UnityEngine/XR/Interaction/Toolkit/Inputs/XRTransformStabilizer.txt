Type: UnityEngine.XR.Interaction.Toolkit.Inputs.XRTransformStabilizer

Method: UnityEngine.Transform get_targetTransform()

Disassembly:
	0x03BBD6F0 MOV X8, X0
	0x03BBD6F4 MOV X0, X26

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_targetTransform(UnityEngine.Transform value)

Disassembly:
	0x03BBD6F8 MOV X1, X25
	0x03BBD6FC MOV X2, X24

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.IXRRayProvider get_aimTarget()

Disassembly:
	0x03BBD700 MOV X3, X23
	0x03BBD704 MOV X4, X22

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_aimTarget(UnityEngine.XR.Interaction.Toolkit.IXRRayProvider value)

Disassembly:
	0x03BBD708 MOV X5, X21
	0x03BBD70C MOV X6, X20
	0x03BBD710 MOV X7, X19
	0x03BBD714 LDP X20, X19, [X31 + 0x60]
	0x03BBD718 LDP X22, X21, [X31 + 0x50]
	0x03BBD71C LDP X24, X23, [X31 + 0x40]
	0x03BBD720 LDP X26, X25, [X31 + 0x30]
	0x03BBD724 LDP X28, X27, [X31 + 0x20]
	0x03BBD728 LDR X30, [X31 + 0x10]
	0x03BBD72C MOV V0.16B, V9.16B
	0x03BBD730 MOV V1.16B, V8.16B
	0x03BBD734 LDP D9, D8, [X31], #0x70
	0x03BBD738 BR X8
	0x03BBD73C MOV X0, X26
	0x03BBD740 MOV X1, X25
	0x03BBD744 MOV X2, X24
	0x03BBD748 MOV X3, X23
	0x03BBD74C MOV X4, X22
	0x03BBD750 MOV X5, X21
	0x03BBD754 MOV X6, X20
	0x03BBD758 MOV X7, X19
	0x03BBD75C LDP X20, X19, [X31 + 0x60]
	0x03BBD760 LDP X22, X21, [X31 + 0x50]
	0x03BBD764 LDP X24, X23, [X31 + 0x40]
	0x03BBD768 LDP X26, X25, [X31 + 0x30]
	0x03BBD76C LDP X28, X27, [X31 + 0x20]
	0x03BBD770 LDR X30, [X31 + 0x10]
	0x03BBD774 STR X31, [X31 + 0x70]
	0x03BBD778 MOV V0.16B, V9.16B
	0x03BBD77C MOV V1.16B, V8.16B
	0x03BBD780 LDP D9, D8, [X31], #0x70
	0x03BBD784 B 0x3BC94A0
	0x03BBD788 ADRP X8, 0xFFFFFFFFFCF30000
	0x03BBD78C LDR V0, [X8 + 0x8C8]
	0x03BBD790 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x826000
	006 Move W8, [X21+3416]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x537000
	014 Move X0, [X0+1432]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3416], W8
	018 Move [X19+48], X20
	019 Compare X20, 0
	020 JumpIfEqual {29}
	021 Move X8, 0x537000
	022 Move X8, [X8+1432]
	023 Move X9, [X20]
	024 Move X8, [X8]
	025 Move W11, [X9+304]
	026 Move W10, [X8+304]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X8, X31
	029 Move [X19+40], X31
	030 Move X9, [X9+200]
	031 Add X9, X9, X10
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 NotImplemented "Instruction CSEL not yet implemented."
	035 Move [X19+40], X8
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return 

Method: System.Boolean get_useLocalSpace()

Disassembly:
	0x03BBD794 STUR D0, [X0 + 0x3C]
	0x03BBD798 B 0x3C36C30

ISIL:
	001 Move W0, [X0+56]
	002 Return X0

Method: System.Void set_useLocalSpace(System.Boolean value)

Disassembly:
	0x03BBD79C SUB X31, X31, 0xB0
	0x03BBD7A0 STP D15, D14, [X31 + 0x30]
	0x03BBD7A4 STP D13, D12, [X31 + 0x40]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+56], W8
	003 Return 

Method: System.Single get_angleStabilization()

Disassembly:
	0x03BBD7A8 STP D11, D10, [X31 + 0x50]
	0x03BBD7AC STP D9, D8, [X31 + 0x60]

ISIL:
	001 Move V0, [X0+60]
	002 Return V0

Method: System.Void set_angleStabilization(System.Single value)

Disassembly:
	0x03BBD7B0 STP X30, X25, [X31 + 0x70]
	0x03BBD7B4 STP X24, X23, [X31 + 0x80]

ISIL:
	001 Move [X0+60], S0
	002 Return 

Method: System.Single get_positionStabilization()

Disassembly:
	0x03BBD7B8 STP X22, X21, [X31 + 0x90]
	0x03BBD7BC STP X20, X19, [X31 + 0xA0]

ISIL:
	001 Move V0, [X0+64]
	002 Return V0

Method: System.Void set_positionStabilization(System.Single value)

Disassembly:
	0x03BBD7C0 STR W31, [X31 + 0x2C]
	0x03BBD7C4 ADRP X25, 0x824000

ISIL:
	001 Move [X0+64], S0
	002 Return 

Method: System.Void Awake()

Disassembly:
	0x03BBD7C8 LDP S11, S12, [X2]
	0x03BBD7CC LDR V13, [X2 + 0x8]
	0x03BBD7D0 LDP S14, S15, [X0]
	0x03BBD7D4 LDRB W8, [X25 + 0x585]
	0x03BBD7D8 LDR V9, [X0 + 0x8]
	0x03BBD7DC MOV X19, X5
	0x03BBD7E0 MOV X21, X4
	0x03BBD7E4 MOV V10.16B, V1.16B
	0x03BBD7E8 MOV V8.16B, V0.16B
	0x03BBD7EC MOV X20, X3
	0x03BBD7F0 MOV X22, X2
	0x03BBD7F4 MOV X24, X0
	0x03BBD7F8 MOV X23, X1
	0x03BBD7FC STR S2, [X31 + 0x28]
	0x03BBD800 CBNZ W8, 0x3BBD818
	0x03BBD804 ADRP X0, 0x536000
	0x03BBD808 LDR X0, [X0 + 0x5A8]
	0x03BBD80C BL 0x1C16CF4
	0x03BBD810 MOVZ W8, 0x1
	0x03BBD814 STRB W8, [X25 + 0x585]
	0x03BBD818 ADRP X8, 0x536000
	0x03BBD81C LDR X8, [X8 + 0x5A8]
	0x03BBD820 FSUB S14, S11, S14
	0x03BBD824 FSUB S11, S12, S15
	0x03BBD828 FSUB S9, S13, S9
	0x03BBD82C LDR X0, [X8]
	0x03BBD830 LDR W8, [X0 + 0xE0]
	0x03BBD834 CBNZ W8, 0x3BBD83C
	0x03BBD838 BL 0x1C16DFC
	0x03BBD83C FMUL S1, S14, S14
	0x03BBD840 FMUL S2, S11, S11
	0x03BBD844 FMUL S0, S9, S9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x826000
	006 Move W8, [X20+3417]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x59F000
	013 Move X0, [X0+1288]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3417], W8
	017 Move X0, X19
	018 Move X1, X31
	019 Call Component.get_transform, X0
	020 Move X8, [X19+48]
	021 Move [X19+72], X0
	022 Compare X8, 0
	023 JumpIfEqual {29}
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Move X21, [X31+40]
	028 Return 
	029 Move X21, 0x59F000
	030 Move X20, [X19+40]
	031 Move X21, [X21+1288]
	032 Move X0, X20
	033 Move X1, [X21]
	034 Call 0x1C17E00
	035 Move [X19+48], X0
	036 Move X1, [X21]
	037 Move X0, X20
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call 0x1C17E00
	043 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03BBD848 FADD S1, S1, S2
	0x03BBD84C FADD S0, S0, S1
	0x03BBD850 FSQRT S0, S0
	0x03BBD854 FDIV S0, S0, S10
	0x03BBD858 MOV V1.16B, V8.16B
	0x03BBD85C BL 0x3BBD468
	0x03BBD860 ADD X2, X31, 0x2C
	0x03BBD864 MOV X0, X20
	0x03BBD868 MOV X1, X23
	0x03BBD86C MOV X3, X31
	0x03BBD870 STR D0, [X31 + 0x10]
	0x03BBD874 BL 0x3B874A8
	0x03BBD878 LDP S1, S0, [X31 + 0x28]
	0x03BBD87C FDIV S0, S0, S1
	0x03BBD880 MOV V1.16B, V8.16B
	0x03BBD884 BL 0x3BBD468
	0x03BBD888 LDR V1, [X24]
	0x03BBD88C LDR V2, [X24 + 0x8]
	0x03BBD890 LDR V3, [X22]
	0x03BBD894 LDR V4, [X22 + 0x8]
	0x03BBD898 LDR V5, [X31 + 0x1]
	0x03BBD89C MOV X0, X31
	0x03BBD8A0 FSUB V3.2S, V3.2S, V1.2S
	0x03BBD8A4 FSUB S4, S4, S2
	0x00000000 INVALID
	0x03BBD8AC FMUL S4, S5, S4
	0x03BBD8B0 FADD V1.2S, V1.2S, V3.2S
	0x03BBD8B4 FADD S2, S2, S4
	0x03BBD8B8 STR D1, [X21]
	0x03BBD8BC STR S2, [X21 + 0x8]
	0x03BBD8C0 LDP S16, S1, [X23]
	0x03BBD8C4 LDP S2, S3, [X23 + 0x8]
	0x03BBD8C8 LDP S4, S5, [X20]
	0x03BBD8CC LDP S6, S7, [X20 + 0x8]
	0x03BBD8D0 STR S0, [X31]
	0x03BBD8D4 MOV V0.16B, V16.16B
	0x03BBD8D8 BL 0x3B47948
	0x03BBD8DC STP S0, S1, [X19]
	0x03BBD8E0 STP S2, S3, [X19 + 0x8]
	0x03BBD8E4 LDP X20, X19, [X31 + 0xA0]
	0x03BBD8E8 LDP X22, X21, [X31 + 0x90]
	0x03BBD8EC LDP X24, X23, [X31 + 0x80]
	0x03BBD8F0 LDP X30, X25, [X31 + 0x70]
	0x03BBD8F4 LDP D9, D8, [X31 + 0x60]
	0x03BBD8F8 LDP D11, D10, [X31 + 0x50]
	0x03BBD8FC LDP D13, D12, [X31 + 0x40]
	0x03BBD900 LDP D15, D14, [X31 + 0x30]
	0x03BBD904 ADD X31, X31, 0xB0
	0x03BBD908 RET
	0x03BBD90C STP D15, D14, [X31 - 0x70]!
	0x03BBD910 STP D13, D12, [X31 + 0x10]
	0x03BBD914 STP D11, D10, [X31 + 0x20]
	0x03BBD918 STP D9, D8, [X31 + 0x30]
	0x03BBD91C STR X30, [X31 + 0x40]
	0x03BBD920 STP X22, X21, [X31 + 0x50]
	0x03BBD924 STP X20, X19, [X31 + 0x60]
	0x03BBD928 ADRP X22, 0x824000
	0x03BBD92C LDP S10, S11, [X1]
	0x03BBD930 LDR V12, [X1 + 0x8]
	0x03BBD934 LDP S13, S14, [X0]
	0x03BBD938 LDRB W8, [X22 + 0x585]
	0x03BBD93C LDR V15, [X0 + 0x8]
	0x03BBD940 MOV X19, X2
	0x03BBD944 MOV V8.16B, V1.16B
	0x03BBD948 MOV X20, X1
	0x03BBD94C MOV X21, X0
	0x03BBD950 MOV V9.16B, V0.16B
	0x03BBD954 CBNZ W8, 0x3BBD96C
	0x03BBD958 ADRP X0, 0x536000
	0x03BBD95C LDR X0, [X0 + 0x5A8]
	0x03BBD960 BL 0x1C16CF4
	0x03BBD964 MOVZ W8, 0x1
	0x03BBD968 STRB W8, [X22 + 0x585]
	0x03BBD96C ADRP X8, 0x536000
	0x03BBD970 LDR X8, [X8 + 0x5A8]
	0x03BBD974 FSUB S13, S10, S13
	0x03BBD978 FSUB S10, S11, S14

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x826000
	009 Move W8, [X20+3418]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x59F000
	016 Move X0, [X0+1288]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3418], W8
	020 Move X8, [X19+48]
	021 Compare X8, 0
	022 JumpIfNotEqual {33}
	023 Move X21, 0x59F000
	024 Move X20, [X19+40]
	025 Move X21, [X21+1288]
	026 Move X0, X20
	027 Move X1, [X21]
	028 Call 0x1C17E00
	029 Move [X19+48], X0
	030 Move X1, [X21]
	031 Move X0, X20
	032 Call 0x1C17E00
	033 Move X0, [X19+32]
	034 Compare X0, 0
	035 JumpIfEqual {99}
	036 Move W8, [X19+56]
	037 Move X20, [X19+72]
	038 Move X1, X31
	039 Compare W8, 0
	040 JumpIfEqual {66}
	041 Call Transform.get_localPosition, X0
	042 Compare X20, 0
	043 JumpIfEqual {99}
	044 Move X0, X20
	045 Move X1, X31
	046 Call Transform.set_localPosition, X0, X1
	047 Move X0, [X19+32]
	048 Compare X0, 0
	049 JumpIfEqual {99}
	050 Move X19, [X19+72]
	051 Move X1, X31
	052 Call Transform.get_localRotation, X0
	053 Compare X19, 0
	054 JumpIfEqual {99}
	055 Move X0, X19
	056 Move X20, [X31+48]
	057 Move X19, [X31+56]
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 Move D9, [X31+16]
	061 Move D8, [X31+24]
	062 Move X1, X31
	063 Move V10, [X31+64]
	064 Call Transform.set_localRotation, X0, X1
	065 Return 
	066 Call Transform.get_position, X0
	067 Move X0, [X19+32]
	068 Compare X0, 0
	069 JumpIfEqual {99}
	070 Move X1, X31
	071 Move V8, V0
	072 Move V9, V1
	073 Move V10, V2
	074 Call Transform.get_rotation, X0
	075 Compare X20, 0
	076 JumpIfEqual {99}
	077 Move V4, V0
	078 Move V5, V1
	079 Move X0, X20
	080 Move V0, V8
	081 Move V1, V9
	082 Move X20, [X31+48]
	083 Move X19, [X31+56]
	084 Move X30, [X31+32]
	085 Move X21, [X31+40]
	086 Move D9, [X31+16]
	087 Move D8, [X31+24]
	088 Move V6, V2
	089 Move V7, V3
	090 Move V2, V10
	091 Move V3, V4
	092 Move V4, V5
	093 Move V5, V6
	094 Move V6, V7
	095 Move X1, X31
	096 Move V10, [X31+64]
	097 Call Transform.SetPositionAndRotation, X0, X1, X2
	098 Return 
	099 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x03BBD97C FSUB S11, S12, S15
	0x03BBD980 LDR X0, [X8]
	0x03BBD984 LDR W8, [X0 + 0xE0]
	0x03BBD988 CBNZ W8, 0x3BBD990
	0x03BBD98C BL 0x1C16DFC
	0x03BBD990 FMUL S1, S13, S13
	0x03BBD994 FMUL S2, S10, S10
	0x03BBD998 FMUL S0, S11, S11
	0x03BBD99C FADD S1, S1, S2
	0x03BBD9A0 FADD S0, S0, S1
	0x03BBD9A4 FSQRT S0, S0
	0x03BBD9A8 FDIV S0, S0, S8
	0x03BBD9AC MOV V1.16B, V9.16B
	0x03BBD9B0 BL 0x3BBD468
	0x03BBD9B4 LDR V1, [X21]
	0x03BBD9B8 LDR V2, [X21 + 0x8]
	0x03BBD9BC LDR V3, [X20]
	0x03BBD9C0 LDR V4, [X20 + 0x8]
	0x03BBD9C4 LDP X22, X21, [X31 + 0x50]
	0x03BBD9C8 LDR X30, [X31 + 0x40]
	0x03BBD9CC FSUB V3.2S, V3.2S, V1.2S
	0x03BBD9D0 FSUB S4, S4, S2
	0x00000000 INVALID
	0x03BBD9D8 FMUL S0, S0, S4
	0x03BBD9DC FADD V1.2S, V1.2S, V3.2S
	0x03BBD9E0 FADD S0, S2, S0
	0x03BBD9E4 STR D1, [X19]
	0x03BBD9E8 STR S0, [X19 + 0x8]
	0x03BBD9EC LDP X20, X19, [X31 + 0x60]
	0x03BBD9F0 LDP D9, D8, [X31 + 0x30]
	0x03BBD9F4 LDP D11, D10, [X31 + 0x20]
	0x03BBD9F8 LDP D13, D12, [X31 + 0x10]
	0x03BBD9FC LDP D15, D14, [X31], #0x70
	0x03BBDA00 RET
	0x03BBDA04 SUB X31, X31, 0x60
	0x03BBDA08 STP D11, D10, [X31 + 0x10]
	0x03BBDA0C STP D9, D8, [X31 + 0x20]
	0x03BBDA10 STP X30, X31, [X31 + 0x30]
	0x03BBDA14 STP X22, X21, [X31 + 0x40]
	0x03BBDA18 STP X20, X19, [X31 + 0x50]
	0x03BBDA1C MOV X22, X0
	0x03BBDA20 MOV X19, X3
	0x03BBDA24 MOV X20, X2
	0x03BBDA28 MOV X21, X1
	0x03BBDA2C ADD X2, X31, 0x3C
	0x03BBDA30 MOV X0, X1
	0x03BBDA34 MOV X1, X22
	0x03BBDA38 MOV X3, X31
	0x03BBDA3C MOV V8.16B, V3.16B
	0x03BBDA40 MOV V9.16B, V2.16B
	0x03BBDA44 MOV V10.16B, V1.16B
	0x03BBDA48 MOV V11.16B, V0.16B
	0x03BBDA4C BL 0x3B874A8
	0x03BBDA50 LDR V0, [X31 + 0x3C]
	0x03BBDA54 ADD X2, X31, 0x38
	0x03BBDA58 MOV X0, X21
	0x03BBDA5C MOV X1, X20
	0x03BBDA60 MOV X3, X31
	0x03BBDA64 FDIV S10, S0, S10
	0x03BBDA68 BL 0x3B874A8
	0x03BBDA6C LDR V0, [X31 + 0x38]
	0x03BBDA70 FMUL S1, S11, S8
	0x03BBDA74 FDIV S0, S0, S9
	0x03BBDA78 FCMP S0, S10
	0x03BBDA7C FCSEL S0, S0, S10, MI
	0x03BBDA80 CSEL X20, X20, X22, MI
	0x03BBDA84 BL 0x3BBD468
	0x03BBDA88 LDP S16, S1, [X20]
	0x03BBDA8C LDP S2, S3, [X20 + 0x8]
	0x03BBDA90 LDP S4, S5, [X21]
	0x03BBDA94 LDP S6, S7, [X21 + 0x8]
	0x03BBDA98 STR S0, [X31]
	0x03BBDA9C MOV V0.16B, V16.16B
	0x03BBDAA0 MOV X0, X31
	0x03BBDAA4 BL 0x3B47948
	0x03BBDAA8 STP S0, S1, [X19]
	0x03BBDAAC STP S2, S3, [X19 + 0x8]
	0x03BBDAB0 LDP X20, X19, [X31 + 0x50]
	0x03BBDAB4 LDP X22, X21, [X31 + 0x40]
	0x03BBDAB8 LDR X30, [X31 + 0x30]
	0x03BBDABC LDP D9, D8, [X31 + 0x20]
	0x03BBDAC0 LDP D11, D10, [X31 + 0x10]
	0x03BBDAC4 ADD X31, X31, 0x60
	0x03BBDAC8 RET
	0x03BBDACC FMOV S2, 1
	0x03BBDAD0 FCMP S0, S2
	0x03BBDAD4 B.GE 0x3BBDB90
	0x03BBDAD8 FCMP S0, 0x0
	0x03BBDADC FMOV S2, W31
	0x03BBDAE0 B.LS 0x3BBDB90
	0x03BBDAE4 ADRP X8, 0xFFFFFFFFFCF2D000
	0x03BBDAE8 LDR V5, [X8 + 0x280]
	0x03BBDAEC ADRP X8, 0xFFFFFFFFFCF30000
	0x03BBDAF0 LDR V7, [X8 + 0xC88]
	0x03BBDAF4 MOVZ W9, 0x7F800000
	0x03BBDAF8 FDIV S1, S1, S5
	0x03BBDAFC FMOV W8, S1
	0x03BBDB00 AND W8, W8, 0x7FFFFFFF
	0x03BBDB04 FMOV S3, 1
	0x03BBDB08 UNIMPLEMENTED
	0x03BBDB0C CMP W8, W9
	0x03BBDB10 FADD V7.2S, V16.2S, V7.2S
	0x03BBDB14 FCCMP S1, S3, 0x0, LS
	0x03BBDB18 MOV V16.16B, V7.16B
	0x03BBDB1C FCSEL S1, S3, S1, GT
	0x03BBDB20 FMOV V6.2S, 0x0
	0x03BBDB24 UNIMPLEMENTED
	0x03BBDB28 BIC V16.2S, 0x80, 0x18
	0x03BBDB2C FMOV W8, S1
	0x00000000 INVALID
	0x00000000 INVALID
	0x03BBDB38 AND W8, W8, 0x7FFFFFFF
	0x03BBDB3C FMOV S4, W31
	0x03BBDB40 ORR V3.8B, V3.8B, V16.8B
	0x03BBDB44 CMP W8, W9
	0x03BBDB48 FCCMP S1, S4, 0x8, LS
	0x00000000 INVALID
	0x03BBDB50 FCSEL S1, S4, S1, MI
	0x03BBDB54 MOV V4.16B, V3.16B
	0x03BBDB58 FMUL S2, S0, S0
	0x03BBDB5C BIC V4.2S, 0x80, 0x18
	0x03BBDB60 FSUB S2, S0, S2
	0x03BBDB64 UNIMPLEMENTED
	0x03BBDB68 FMUL S0, S1, S0
	0x00000000 INVALID
	0x03BBDB70 FMUL S16, S2, S2
	0x03BBDB74 ORR V1.8B, V6.8B, V1.8B
	0x03BBDB78 BIC V1.8B, V3.8B, V1.8B
	0x03BBDB7C MOV V16.S[1], V2.S[0]
	0x00000000 INVALID
	0x03BBDB84 MOV S2, V1.S[1]
	0x03BBDB88 FADD S0, S0, S2
	0x03BBDB8C FADD S2, S1, S0
	0x03BBDB90 MOV V0.16B, V2.16B
	0x03BBDB94 RET
	0x03BBDB98 SUB X31, X31, 0xA0
	0x03BBDB9C STP D15, D14, [X31 + 0x10]
	0x03BBDBA0 STP D13, D12, [X31 + 0x20]
	0x03BBDBA4 STP D11, D10, [X31 + 0x30]
	0x03BBDBA8 STP D9, D8, [X31 + 0x40]
	0x03BBDBAC STR X30, [X31 + 0x50]
	0x03BBDBB0 STP X26, X25, [X31 + 0x60]
	0x03BBDBB4 STP X24, X23, [X31 + 0x70]
	0x03BBDBB8 STP X22, X21, [X31 + 0x80]
	0x03BBDBBC STP X20, X19, [X31 + 0x90]
	0x03BBDBC0 ADRP X26, 0x824000
	0x03BBDBC4 LDP S10, S11, [X4]
	0x03BBDBC8 LDR V12, [X4 + 0x8]
	0x03BBDBCC LDP S13, S14, [X0]
	0x03BBDBD0 LDRB W8, [X26 + 0x585]
	0x03BBDBD4 LDR V15, [X0 + 0x8]
	0x03BBDBD8 MOV X19, X7
	0x03BBDBDC MOV X20, X6
	0x03BBDBE0 MOV X21, X5
	0x03BBDBE4 MOV V8.16B, V1.16B
	0x03BBDBE8 MOV V9.16B, V0.16B
	0x03BBDBEC MOV X22, X3
	0x03BBDBF0 MOV X23, X2
	0x03BBDBF4 MOV X25, X0
	0x03BBDBF8 MOV X24, X1
	0x03BBDBFC CBNZ W8, 0x3BBDC14
	0x03BBDC00 ADRP X0, 0x536000
	0x03BBDC04 LDR X0, [X0 + 0x5A8]
	0x03BBDC08 BL 0x1C16CF4
	0x03BBDC0C MOVZ W8, 0x1
	0x03BBDC10 STRB W8, [X26 + 0x585]
	0x03BBDC14 ADRP X26, 0x536000
	0x03BBDC18 LDR X26, [X26 + 0x5A8]
	0x03BBDC1C FSUB S13, S10, S13
	0x03BBDC20 FSUB S10, S11, S14
	0x03BBDC24 FSUB S11, S12, S15
	0x03BBDC28 LDR X0, [X26]
	0x03BBDC2C LDR W8, [X0 + 0xE0]
	0x03BBDC30 CBNZ W8, 0x3BBDC38
	0x03BBDC34 BL 0x1C16DFC
	0x03BBDC38 FMUL S1, S13, S13
	0x03BBDC3C FMUL S2, S10, S10
	0x03BBDC40 LDR V4, [X23]
	0x03BBDC44 LDR V6, [X23 + 0x8]
	0x03BBDC48 FMUL S0, S11, S11
	0x03BBDC4C LDR V3, [X25]
	0x03BBDC50 LDR V5, [X25 + 0x8]
	0x03BBDC54 FADD S1, S1, S2
	0x03BBDC58 FADD S0, S0, S1
	0x03BBDC5C LDR V7, [X24]
	0x03BBDC60 FSQRT S1, S0
	0x03BBDC64 LDR V2, [X24 + 0x8]
	0x00000000 INVALID
	0x03BBDC6C STR V1, [X31]
	0x03BBDC70 FMUL S1, S1, S6
	0x03BBDC74 FADD V0.2S, V3.2S, V0.2S
	0x03BBDC78 LDP S3, S4, [X22]
	0x03BBDC7C FADD S1, S5, S1
	0x03BBDC80 LDR V5, [X22 + 0x8]
	0x03BBDC84 FSUB V0.2S, V0.2S, V7.2S
	0x03BBDC88 FSUB S2, S1, S2
	0x03BBDC8C MOV S1, V0.S[1]
	0x03BBDC90 MOV X0, X31
	0x03BBDC94 BL 0x38BE684
	0x03BBDC98 STP S0, S1, [X21]
	0x03BBDC9C STP S2, S3, [X21 + 0x8]
	0x03BBDCA0 ADRP X21, 0x824000
	0x03BBDCA4 LDRB W8, [X21 + 0x57F]
	0x03BBDCA8 CBNZ W8, 0x3BBDCC0
	0x03BBDCAC ADRP X0, 0x536000
	0x03BBDCB0 LDR X0, [X0 + 0x5A8]
	0x03BBDCB4 BL 0x1C16CF4
	0x03BBDCB8 MOVZ W8, 0x1
	0x03BBDCBC STRB W8, [X21 + 0x57F]
	0x03BBDCC0 LDR X0, [X26]
	0x03BBDCC4 LDR V0, [X31]
	0x03BBDCC8 LDR W8, [X0 + 0xE0]
	0x03BBDCCC FMUL S9, S0, S9
	0x03BBDCD0 CBNZ W8, 0x3BBDCD8
	0x03BBDCD4 BL 0x1C16DFC
	0x03BBDCD8 FMOV S10, 1
	0x03BBDCDC FMAXNM S0, S9, S10
	0x03BBDCE0 FCVT S0, S0
	0x03BBDCE4 BL 0x3EB1C20
	0x00000000 INVALID
	0x03BBDCEC FADD S0, S0, S10
	0x03BBDCF0 FMOV W9, S0
	0x03BBDCF4 MOVZ W8, 0x7F800000
	0x03BBDCF8 AND W9, W9, 0x7FFFFFFF
	0x03BBDCFC CMP W9, W8
	0x03BBDD00 FMOV S1, 3
	0x03BBDD04 FCCMP S0, S1, 0x0, LS
	0x03BBDD08 FCSEL S1, S1, S0, GT
	0x03BBDD0C FMOV W9, S1
	0x03BBDD10 AND W9, W9, 0x7FFFFFFF
	0x03BBDD14 CMP W9, W8
	0x03BBDD18 FCCMP S1, S10, 0x8, LS
	0x03BBDD1C STR S0, [X20]
	0x03BBDD20 FCSEL S0, S10, S1, MI
	0x03BBDD24 FMUL S0, S0, S8
	0x03BBDD28 STR S0, [X19]
	0x03BBDD2C LDP X20, X19, [X31 + 0x90]
	0x03BBDD30 LDP X22, X21, [X31 + 0x80]
	0x03BBDD34 LDP X24, X23, [X31 + 0x70]
	0x03BBDD38 LDP X26, X25, [X31 + 0x60]
	0x03BBDD3C LDR X30, [X31 + 0x50]
	0x03BBDD40 LDP D9, D8, [X31 + 0x40]
	0x03BBDD44 LDP D11, D10, [X31 + 0x30]
	0x03BBDD48 LDP D13, D12, [X31 + 0x20]
	0x03BBDD4C LDP D15, D14, [X31 + 0x10]
	0x03BBDD50 ADD X31, X31, 0xA0
	0x03BBDD54 RET
	0x03BBDD58 STP X30, X21, [X31 - 0x20]!
	0x03BBDD5C STP X20, X19, [X31 + 0x10]
	0x03BBDD60 LDR X8, [X2 + 0x8]
	0x03BBDD64 STP X1, X2, [X0 + 0x20]
	0x03BBDD68 MOV X19, X0
	0x03BBDD6C MOV X20, X1
	0x03BBDD70 STR X8, [X0 + 0x10]
	0x03BBDD74 LDRB W21, [X2 + 0x52]
	0x03BBDD78 STR X0, [X0 + 0x40]
	0x03BBDD7C MOV X0, X2
	0x03BBDD80 BL 0x1C16D84
	0x03BBDD84 TBZ X0, 0x0, 0x3BBDD9C
	0x03BBDD88 CMP W21, 0x9
	0x03BBDD8C B.NE 0x3BBDDB8
	0x03BBDD90 ADRP X8, 0xFFFFFFFFFE043000
	0x03BBDD94 ADD X8, X8, 0xCF0
	0x03BBDD98 B 0x3BBDDAC
	0x03BBDD9C CMP W21, 0x8
	0x03BBDDA0 B.NE 0x3BBDDB4
	0x03BBDDA4 ADRP X8, 0xFFFFFFFFFE043000
	0x03BBDDA8 ADD X8, X8, 0xCCC
	0x03BBDDAC STR X8, [X19 + 0x18]

ISIL:
	001 Subtract X31, X31, 320
	002 Move [X31+224], D15
	003 Move [X31+232], D14
	004 Move [X31+240], D13
	005 Move [X31+248], D12
	006 Move [X31+256], D11
	007 Move [X31+264], D10
	008 Move [X31+272], D9
	009 Move [X31+280], D8
	010 Move [X31+288], X29
	011 Move [X31+296], X30
	012 Move [X31+304], X20
	013 Move [X31+312], X19
	014 Move X20, 0x826000
	015 Move W8, [X20+3419]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x59F000
	022 Move X0, [X0+1288]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3419], W8
	026 Move [X31+216], W31
	027 Move [X31+200], X31
	028 Move [X31+208], X31
	029 Move [X31+192], X31
	030 Move [X31+184], W31
	031 Move [X31+168], X31
	032 Move [X31+176], X31
	033 Move [X31+160], X31
	034 Move [X31+152], W31
	035 Move [X31+136], X31
	036 Move [X31+144], X31
	037 Move [X31+128], X31
	038 Move [X31+120], W31
	039 Move [X31+104], X31
	040 Move [X31+112], X31
	041 Move [X31+88], X31
	042 Move [X31+96], X31
	043 Move [X31+72], X31
	044 Move [X31+80], X31
	045 Move [X31+64], W31
	046 Move [X31+56], X31
	047 Move [X31+48], W31
	048 Move [X31+40], X31
	049 Move X0, [X19+72]
	050 Compare X0, 0
	051 JumpIfEqual {331}
	052 Move X1, X31
	053 Call Transform.get_position, X0
	054 Move X0, [X19+72]
	055 Compare X0, 0
	056 JumpIfEqual {331}
	057 Move X1, X31
	058 Move V8, V0
	059 Move V9, V1
	060 Move V10, V2
	061 Call Transform.get_rotation, X0
	062 Move X0, [X19+32]
	063 Compare X0, 0
	064 JumpIfEqual {331}
	065 Move X1, X31
	066 Move [X31+24], S0
	067 Move [X31+32], S1
	068 Move [X31+32], S3
	069 Move [X31+40], S2
	070 Call Transform.get_position, X0
	071 Move X0, [X19+32]
	072 Compare X0, 0
	073 JumpIfEqual {331}
	074 Move X1, X31
	075 Move V13, V0
	076 Move V11, V1
	077 Move V12, V2
	078 Call Transform.get_rotation, X0
	079 Move W8, [X19+56]
	080 Move [X31+16], S0
	081 Move [X31+24], S1
	082 Move V14, V2
	083 Move V15, V3
	084 Move S0, 1
	085 Compare W8, 0
	086 JumpIfEqual {92}
	087 Move X0, [X19+72]
	088 Compare X0, 0
	089 JumpIfEqual {331}
	090 Move X1, X31
	091 Call Transform.get_lossyScale, X0
	092 Move X8, -51191808
	093 Move V1, [X8+816]
	094 Move X20, [X19+48]
	095 NotImplemented "Instruction FABS not yet implemented."
	096 Move [X31+12], S14
	097 NotImplemented "Instruction FCMP not yet implemented."
	098 NotImplemented "Instruction FCSEL not yet implemented."
	099 Move V0, V8
	100 Move V1, V9
	101 Move V2, V10
	102 Move X0, X31
	103 Call float3.op_Implicit, X0
	104 Move [X31+176], S0
	105 Move [X31+184], S1
	106 Move [X31+184], S2
	107 Compare X20, 0
	108 JumpIfEqual {179}
	109 Move V0, V13
	110 Move V1, V11
	111 Move V2, V12
	112 Move X0, X31
	113 Call float3.op_Implicit, X0
	114 Move X0, X31
	115 Move [X31+144], S0
	116 Move [X31+152], S1
	117 Move [X31+152], S2
	118 Call Time.get_deltaTime
	119 Move V1, [X19+64]
	120 Add X0, X31, 176
	121 Add X1, X31, 144
	122 Add X2, X31, 112
	123 Multiply S1, S14, S1
	124 Call XRTransformStabilizer.StabilizePosition, X0, X1, V0, V1, X2
	125 Move V0, V8
	126 Move V1, V9
	127 Move V2, V10
	128 Move X0, X31
	129 Call float3.op_Implicit, X0
	130 Move [X31+176], S0
	131 Move [X31+184], S1
	132 Move [X31+184], S2
	133 Move X0, [X19+72]
	134 Compare X0, 0
	135 JumpIfEqual {331}
	136 Move X1, X31
	137 Call Transform.get_forward, X0
	138 Move X0, X31
	139 Call float3.op_Implicit, X0
	140 Move [X31+144], S0
	141 Move [X31+152], S1
	142 Move [X31+152], S2
	143 Move X0, [X19+72]
	144 Compare X0, 0
	145 JumpIfEqual {331}
	146 Move X1, X31
	147 Call Transform.get_up, X0
	148 Move X0, X31
	149 Call float3.op_Implicit, X0
	150 Move [X31+56], S0
	151 Move [X31+64], S1
	152 Move [X31+64], S2
	153 Move X20, [X19+48]
	154 Compare X20, 0
	155 JumpIfEqual {331}
	156 Move X10, 0x59F000
	157 Move X8, [X20]
	158 Move X10, [X10+1288]
	159 Move V9, [X31+12]
	160 Move S11, [X31+32]
	161 Move S10, [X31+36]
	162 NotImplemented "Instruction LDRH not yet implemented."
	163 Move X1, [X10]
	164 Move S13, [X31+24]
	165 Move S12, [X31+28]
	166 Move S0, 1
	167 NotImplemented "Instruction FDIV not yet implemented."
	168 Compare X9, 0
	169 JumpIfEqual {176}
	170 Move X10, [X8+176]
	171 Add X10, X10, 8
	172 NotImplemented "Instruction LDUR not yet implemented."
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Subtract X9, X9, 1
	175 Add X10, X10, 16
	176 Move W2, 4
	177 Move X0, X20
	178 Call 0x1C5D788
	179 Move S0, [X31+24]
	180 Move S1, [X31+28]
	181 Move S3, [X31+32]
	182 Move S2, [X31+36]
	183 Move X0, X31
	184 Call quaternion.op_Implicit, X0
	185 Move [X31+160], S0
	186 Move [X31+168], S1
	187 Move [X31+168], S2
	188 Move [X31+176], S3
	189 Move V0, V13
	190 Move V1, V11
	191 Move V2, V12
	192 Move X0, X31
	193 Call float3.op_Implicit, X0
	194 Move [X31+144], S0
	195 Move [X31+152], S1
	196 Move [X31+152], S2
	197 Move S0, [X31+16]
	198 Move S1, [X31+20]
	199 Move V2, [X31+12]
	200 Move V3, V15
	201 Move X0, X31
	202 Call quaternion.op_Implicit, X0
	203 Move X0, X31
	204 Move [X31+128], S0
	205 Move [X31+136], S1
	206 Move [X31+136], S2
	207 Move [X31+144], S3
	208 Call Time.get_deltaTime
	209 Move S2, [X19+60]
	210 Move S1, [X19+64]
	211 Add X0, X31, 176
	212 Add X1, X31, 160
	213 Add X2, X31, 144
	214 Multiply S1, S14, S1
	215 Add X3, X31, 128
	216 Add X4, X31, 208
	217 Add X5, X31, 192
	218 Call XRTransformStabilizer.StabilizeTransform, X0, X1, X2, X3, V0, V1, V2, X4, X5
	219 Move S0, [X31+208]
	220 Move S1, [X31+212]
	221 Move V2, [X31+216]
	222 Move X19, [X19+72]
	223 Move X0, X31
	224 Call float3.op_Implicit, X0
	225 Move V8, V0
	226 Move V9, V1
	227 Move S0, [X31+192]
	228 Move S1, [X31+196]
	229 Move S4, [X31+200]
	230 Move S3, [X31+204]
	231 Move W9, [X10]
	232 Add W9, W9, 4
	233 Add X8, X8, W9
	234 Add X0, X8, 312
	235 Move X8, [X0]
	236 Move X1, [X0+8]
	237 Move X0, X20
	238 NotImplemented "Instruction BLR not yet implemented."
	239 Move X0, X31
	240 Call float3.op_Implicit, X0
	241 Move [X31+40], S0
	242 Move [X31+48], S1
	243 Move [X31+48], S2
	244 Move V1, [X19+60]
	245 Add X0, X31, 176
	246 Add X1, X31, 112
	247 Add X2, X31, 144
	248 Add X3, X31, 56
	249 Add X4, X31, 40
	250 Add X5, X31, 96
	251 Add X6, X31, 92
	252 Add X7, X31, 88
	253 Move V0, V8
	254 Call XRTransformStabilizer.CalculateRotationParams, X0, X1, X2, X3, X4, V0, V1, X5, X6, X7
	255 Move V0, V13
	256 Move V1, V12
	257 Move V2, V10
	258 Move V3, V11
	259 Move X0, X31
	260 Call quaternion.op_Implicit, X0
	261 Move [X31+160], S0
	262 Move [X31+168], S1
	263 Move S0, [X31+16]
	264 Move S1, [X31+20]
	265 Move [X31+168], S2
	266 Move [X31+176], S3
	267 Move V2, V9
	268 Move V3, V15
	269 Move X0, X31
	270 Call quaternion.op_Implicit, X0
	271 Move X0, X31
	272 Move [X31+128], S0
	273 Move [X31+136], S1
	274 Move [X31+136], S2
	275 Move [X31+144], S3
	276 Call Time.get_deltaTime
	277 Move V1, [X19+60]
	278 Move S2, [X31+88]
	279 Move S3, [X31+92]
	280 Add X0, X31, 160
	281 Add X1, X31, 128
	282 Add X2, X31, 96
	283 Add X3, X31, 72
	284 Call XRTransformStabilizer.StabilizeOptimalRotation, X0, X1, X2, V0, V1, V2, V3, X3
	285 Move S0, [X31+112]
	286 Move S1, [X31+116]
	287 Move V2, [X31+120]
	288 Move X19, [X19+72]
	289 Move X0, X31
	290 Call float3.op_Implicit, X0
	291 Move V8, V0
	292 Move V9, V1
	293 Move S0, [X31+72]
	294 Move S1, [X31+76]
	295 Move S4, [X31+80]
	296 Move S3, [X31+84]
	297 Move V10, V2
	298 Move V2, V4
	299 Move X0, X31
	300 Call quaternion.op_Implicit, X0
	301 Compare X19, 0
	302 JumpIfEqual {331}
	303 Move V4, V0
	304 Move V5, V1
	305 Move V6, V2
	306 Move V7, V3
	307 Move X0, X19
	308 Move V0, V8
	309 Move V1, V9
	310 Move V2, V10
	311 Move V3, V4
	312 Move V4, V5
	313 Move V5, V6
	314 Move V6, V7
	315 Move X1, X31
	316 Call Transform.SetPositionAndRotation, X0, X1, X2
	317 Move X20, [X31+304]
	318 Move X19, [X31+312]
	319 Move X29, [X31+288]
	320 Move X30, [X31+296]
	321 Move D9, [X31+272]
	322 Move D8, [X31+280]
	323 Move D11, [X31+256]
	324 Move D10, [X31+264]
	325 Move D13, [X31+240]
	326 Move D12, [X31+248]
	327 Move D15, [X31+224]
	328 Move D14, [X31+232]
	329 Add X31, X31, 320
	330 Return 
	331 Call 0x1C17F20

Method: System.Void StabilizeTransform(in Unity.Mathematics.float3 startPos, in Unity.Mathematics.quaternion startRot, in Unity.Mathematics.float3 targetPos, in Unity.Mathematics.quaternion targetRot, System.Single deltaTime, System.Single positionStabilization, System.Single angleStabilization, out Unity.Mathematics.float3 resultPos, out Unity.Mathematics.quaternion resultRot)

Disassembly:
	0x03BBDDB0 B 0x3BBDDC8
	0x03BBDDB4 CBZ X20, 0x3BBDDE0
	0x03BBDDB8 LDR X8, [X19 + 0x10]
	0x03BBDDBC LDR X9, [X19 + 0x20]
	0x03BBDDC0 STR X8, [X19 + 0x18]
	0x03BBDDC4 STR X9, [X19 + 0x40]
	0x03BBDDC8 ADRP X8, 0xFFFFFFFFFE043000
	0x03BBDDCC ADD X8, X8, 0xC1C
	0x03BBDDD0 STR X8, [X19 + 0x38]
	0x03BBDDD4 LDP X20, X19, [X31 + 0x10]
	0x03BBDDD8 LDP X30, X21, [X31], #0x20
	0x03BBDDDC RET
	0x03BBDDE0 ADRP X1, 0xFFFFFFFFFCF5E000
	0x03BBDDE4 ADD X1, X1, 0xEE3
	0x03BBDDE8 MOV X0, X31
	0x03BBDDEC BL 0x1C16F3C
	0x03BBDDF0 MOV X1, X31
	0x03BBDDF4 BL 0x1C16DEC
	0x03BBDDF8 LDR X8, [X0 + 0x40]
	0x03BBDDFC LDR X9, [X0 + 0x18]
	0x03BBDE00 LDR X7, [X0 + 0x28]
	0x03BBDE04 MOV X0, X8
	0x03BBDE08 BR X9
	0x03BBDE0C SUB X31, X31, 0xD0
	0x03BBDE10 STP X29, X30, [X31 + 0x70]
	0x03BBDE14 STP X28, X27, [X31 + 0x80]
	0x03BBDE18 STP X26, X25, [X31 + 0x90]
	0x03BBDE1C STP X24, X23, [X31 + 0xA0]
	0x03BBDE20 STP X22, X21, [X31 + 0xB0]
	0x03BBDE24 STP X20, X19, [X31 + 0xC0]
	0x03BBDE28 STP X6, X7, [X31]
	0x03BBDE2C STP S1, S0, [X31 + 0x68]
	0x03BBDE30 ADRP X20, 0x825000
	0x03BBDE34 STR S2, [X31 + 0x64]
	0x03BBDE38 ADRP X29, 0x561000
	0x03BBDE3C ADRP X28, 0x53C000
	0x03BBDE40 ADRP X19, 0x536000
	0x03BBDE44 LDR X21, [X31 + 0xD0]
	0x03BBDE48 LDRB W8, [X20 + 0xD61]
	0x03BBDE4C LDR X29, [X29 + 0x838]
	0x03BBDE50 LDR X28, [X28 + 0x7B8]
	0x03BBDE54 LDR X19, [X19 + 0xA90]
	0x03BBDE58 MOV X23, X5
	0x03BBDE5C MOV X24, X4
	0x03BBDE60 MOV X25, X3
	0x03BBDE64 MOV X26, X2
	0x03BBDE68 MOV X27, X1

ISIL:
	001 Move [X31-96], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X25, 0x826000
	014 Move X26, 0x5A1000
	015 Move W8, [X25+3420]
	016 Move X26, [X26+912]
	017 Move X19, X5
	018 Move X20, X4
	019 Move V8, V2
	020 Move V9, V1
	021 Move V10, V0
	022 Move X21, X3
	023 Move X22, X2
	024 Move X23, X1
	025 Move X24, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {35}
	030 Move X0, 0x5A1000
	031 Move X0, [X0+912]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X25+3420], W8
	035 Move X0, [X26]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X24
	041 Move X1, X23
	042 Move X2, X22
	043 Move X3, X21
	044 Move V1, V9
	045 Move V2, V8
	046 Move X4, X20
	047 Move X5, X19
	048 Move X20, [X31+80]
	049 Move X19, [X31+88]
	050 Move X22, [X31+64]
	051 Move X21, [X31+72]
	052 Move X24, [X31+48]
	053 Move X23, [X31+56]
	054 Move X26, [X31+32]
	055 Move X25, [X31+40]
	056 Move X30, [X31+24]
	057 Move D9, [X31+8]
	058 Move D8, [X31+16]
	059 Move V0, V10
	060 Move V10, [X31+96]
	061 Call StabilizeTransform_00000D3D$BurstDirectCall.Invoke, X0, X1, X2, X3, V0, V1, V2, X4, X5
	062 Return 

Method: System.Void StabilizePosition(in Unity.Mathematics.float3 startPos, in Unity.Mathematics.float3 targetPos, System.Single deltaTime, System.Single positionStabilization, out Unity.Mathematics.float3 resultPos)

Disassembly:
	0x03BBDE6C MOV X22, X0
	0x03BBDE70 TBNZ X8, 0x0, 0x3BBDEA0
	0x03BBDE74 ADRP X0, 0x536000
	0x03BBDE78 LDR X0, [X0 + 0xA90]
	0x03BBDE7C BL 0x1C16CF4
	0x03BBDE80 ADRP X0, 0x561000
	0x03BBDE84 LDR X0, [X0 + 0x838]
	0x03BBDE88 BL 0x1C16CF4
	0x03BBDE8C ADRP X0, 0x53C000
	0x03BBDE90 LDR X0, [X0 + 0x7B8]
	0x03BBDE94 BL 0x1C16CF4
	0x03BBDE98 MOVZ W8, 0x1
	0x03BBDE9C STRB W8, [X20 + 0xD61]
	0x03BBDEA0 LDR X0, [X29]
	0x03BBDEA4 MOVI V0.2D, 0x0
	0x03BBDEA8 MOV X1, X27
	0x03BBDEAC STP V0, V0, [X31 + 0x40]
	0x03BBDEB0 STR V0, [X31 + 0x3]
	0x03BBDEB4 BL 0x1C16E04
	0x03BBDEB8 LDR X8, [X28]
	0x03BBDEBC STR X0, [X31 + 0x10]
	0x03BBDEC0 MOV X1, X26
	0x03BBDEC4 MOV X0, X8
	0x03BBDEC8 BL 0x1C16E04
	0x03BBDECC LDR X8, [X29]
	0x03BBDED0 STR X0, [X31 + 0x18]
	0x03BBDED4 MOV X1, X25
	0x03BBDED8 MOV X0, X8
	0x03BBDEDC BL 0x1C16E04
	0x03BBDEE0 LDR X8, [X28]
	0x03BBDEE4 STR X0, [X31 + 0x20]
	0x03BBDEE8 MOV X1, X24
	0x03BBDEEC MOV X0, X8

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x826000
	010 Move X23, 0x5A1000
	011 Move W8, [X22+3421]
	012 Move X23, [X23+920]
	013 Move X19, X2
	014 Move V8, V1
	015 Move V9, V0
	016 Move X20, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x5A1000
	023 Move X0, [X0+920]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+3421], W8
	027 Move X0, [X23]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X21
	033 Move X1, X20
	034 Move X2, X19
	035 Move X20, [X31+48]
	036 Move X19, [X31+56]
	037 Move X22, [X31+32]
	038 Move X21, [X31+40]
	039 Move X30, [X31+16]
	040 Move X23, [X31+24]
	041 Move V0, V9
	042 Move V1, V8
	043 Move D9, [X31+64]
	044 Move D8, [X31+72]
	045 Call StabilizePosition_00000D3E$BurstDirectCall.Invoke, X0, X1, V0, V1, X2
	046 Return 

Method: System.Void StabilizeOptimalRotation(in Unity.Mathematics.quaternion startRot, in Unity.Mathematics.quaternion targetRot, in Unity.Mathematics.quaternion alternateStartRot, System.Single deltaTime, System.Single angleStabilization, System.Single alternateStabilization, System.Single scaleFactor, out Unity.Mathematics.quaternion resultRot)

Disassembly:
	0x03BBDFB4 LDR X23, [X23 + 0x390]
	0x03BBDFB8 MOV X19, X0
	0x03BBDFBC TBNZ X8, 0x0, 0x3BBDFF8
	0x03BBDFC0 ADRP X0, 0x55E000
	0x03BBDFC4 LDR X0, [X0 + 0x848]
	0x03BBDFC8 BL 0x1C16CF4
	0x03BBDFCC ADRP X0, 0x5A0000
	0x03BBDFD0 LDR X0, [X0 + 0x390]
	0x03BBDFD4 BL 0x1C16CF4
	0x03BBDFD8 ADRP X0, 0x5A0000
	0x03BBDFDC LDR X0, [X0 + 0x3B8]
	0x03BBDFE0 BL 0x1C16CF4
	0x03BBDFE4 ADRP X0, 0x5A0000
	0x03BBDFE8 LDR X0, [X0 + 0x3C0]
	0x03BBDFEC BL 0x1C16CF4
	0x03BBDFF0 MOVZ W8, 0x1
	0x03BBDFF4 STRB W8, [X20 + 0xD62]
	0x03BBDFF8 LDR X8, [X23]
	0x03BBDFFC LDR W9, [X8 + 0xE0]
	0x03BBE000 CBNZ W9, 0x3BBE010
	0x03BBE004 MOV X0, X8
	0x03BBE008 BL 0x1C16DFC
	0x03BBE00C LDR X8, [X23]
	0x03BBE010 LDR X9, [X8 + 0xB8]
	0x03BBE014 LDR X10, [X9]
	0x03BBE018 CBNZ X10, 0x3BBE088
	0x03BBE01C LDR W10, [X8 + 0xE0]
	0x03BBE020 CBNZ W10, 0x3BBE034
	0x03BBE024 MOV X0, X8
	0x03BBE028 BL 0x1C16DFC
	0x03BBE02C LDR X8, [X23]
	0x03BBE030 LDR X9, [X8 + 0xB8]
	0x03BBE034 ADRP X8, 0x55D000
	0x03BBE038 LDR X20, [X9 + 0x8]
	0x03BBE03C LDR X8, [X8 + 0x848]
	0x03BBE040 LDR X0, [X8]
	0x03BBE044 ADRP X8, 0x59F000
	0x03BBE048 LDR X8, [X8 + 0x3C0]
	0x03BBE04C LDR X21, [X8]
	0x03BBE050 ADRP X8, 0x59F000
	0x03BBE054 LDR X8, [X8 + 0x3B8]
	0x03BBE058 LDR W9, [X0 + 0xE0]
	0x03BBE05C LDR X22, [X8]

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X23, 0x826000
	013 Move X24, 0x5A1000
	014 Move W8, [X23+3422]
	015 Move X24, [X24+936]
	016 Move X19, X3
	017 Move V8, V3
	018 Move V9, V2
	019 Move V10, V1
	020 Move V11, V0
	021 Move X20, X2
	022 Move X21, X1
	023 Move X22, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {33}
	028 Move X0, 0x5A0000
	029 Move X0, [X0+936]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X23+3422], W8
	033 Move X0, [X24]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X22
	039 Move X1, X21
	040 Move X2, X20
	041 Move V2, V9
	042 Move V3, V8
	043 Move X3, X19
	044 Move X20, [X31+80]
	045 Move X19, [X31+88]
	046 Move X22, [X31+64]
	047 Move X21, [X31+72]
	048 Move X24, [X31+48]
	049 Move X23, [X31+56]
	050 Move X30, [X31+32]
	051 Move D9, [X31+16]
	052 Move D8, [X31+24]
	053 Move V0, V11
	054 Move V1, V10
	055 Move D11, [X31+96]
	056 Move D10, [X31+104]
	057 Call StabilizeOptimalRotation_00000D3F$BurstDirectCall.Invoke, X0, X1, X2, V0, V1, V2, V3, X3
	058 Return 

Method: System.Single CalculateStabilizedLerp(System.Single distance, System.Single timeSlice)

Disassembly:
	0x03BBE468 MOV X3, X31
	0x03BBE46C BL 0x36FAD70
	0x03BBE470 LDR X8, [X23]
	0x03BBE474 LDR X9, [X8 + 0xB8]
	0x03BBE478 STR X0, [X9]
	0x03BBE47C LDR W9, [X8 + 0xE0]
	0x03BBE480 CBNZ W9, 0x3BBE490
	0x03BBE484 MOV X0, X8
	0x03BBE488 BL 0x1C16DFC
	0x03BBE48C LDR X8, [X23]
	0x03BBE490 LDR X8, [X8 + 0xB8]
	0x03BBE494 LDP X22, X21, [X31 + 0x10]
	0x03BBE498 LDR X8, [X8]
	0x03BBE49C STR X8, [X19]
	0x03BBE4A0 LDP X20, X19, [X31 + 0x20]
	0x03BBE4A4 LDP X30, X23, [X31], #0x30
	0x03BBE4A8 RET
	0x03BBE4AC STR X30, [X31 - 0x20]!
	0x03BBE4B0 STP X20, X19, [X31 + 0x10]
	0x03BBE4B4 ADRP X20, 0x824000
	0x03BBE4B8 ADRP X19, 0x59F000
	0x03BBE4BC LDRB W8, [X20 + 0xD68]
	0x03BBE4C0 LDR X19, [X19 + 0x398]
	0x03BBE4C4 TBNZ X8, 0x0, 0x3BBE4DC
	0x03BBE4C8 ADRP X0, 0x59F000

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x825000
	007 Move X20, 0x5A0000
	008 Move W8, [X19+3423]
	009 Move X20, [X20+944]
	010 Move V8, V1
	011 Move V9, V0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5A0000
	017 Move X0, [X0+944]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+3423], W8
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move V0, V9
	030 Move V1, V8
	031 Move D9, [X31+48]
	032 Move D8, [X31+56]

Method: System.Void CalculateRotationParams(in Unity.Mathematics.float3 currentPosition, in Unity.Mathematics.float3 resultPosition, in Unity.Mathematics.float3 forward, in Unity.Mathematics.float3 up, in Unity.Mathematics.float3 rayEnd, System.Single invScale, System.Single angleStabilization, out Unity.Mathematics.quaternion antiRotation, out System.Single scaleFactor, out System.Single targetAngleScale)

Disassembly:
	0x03BBDEF0 BL 0x1C16E04
	0x03BBDEF4 LDR X8, [X19]
	0x03BBDEF8 STR X0, [X31 + 0x28]
	0x03BBDEFC ADD X1, X31, 0x6C
	0x03BBDF00 MOV X0, X8
	0x03BBDF04 BL 0x1C16E04
	0x03BBDF08 LDR X8, [X19]
	0x03BBDF0C STR X0, [X31 + 0x30]
	0x03BBDF10 ADD X1, X31, 0x68
	0x03BBDF14 MOV X0, X8
	0x03BBDF18 BL 0x1C16E04
	0x03BBDF1C LDR X8, [X19]
	0x03BBDF20 STR X0, [X31 + 0x38]
	0x03BBDF24 ADD X1, X31, 0x64
	0x03BBDF28 MOV X0, X8
	0x03BBDF2C BL 0x1C16E04
	0x03BBDF30 LDR X8, [X29]
	0x03BBDF34 STR X0, [X31 + 0x40]
	0x03BBDF38 MOV X1, X23
	0x03BBDF3C MOV X0, X8
	0x03BBDF40 BL 0x1C16E04
	0x03BBDF44 LDR X8, [X28]
	0x03BBDF48 LDR X1, [X31]
	0x03BBDF4C STR X0, [X31 + 0x48]
	0x03BBDF50 MOV X0, X8
	0x03BBDF54 BL 0x1C16E04
	0x03BBDF58 LDR X2, [X31 + 0x8]
	0x03BBDF5C STR X0, [X31 + 0x50]
	0x03BBDF60 ADD X1, X31, 0x10
	0x03BBDF64 MOV X0, X22
	0x03BBDF68 MOV X3, X21
	0x03BBDF6C BL 0x1C16CB0
	0x03BBDF70 LDP X20, X19, [X31 + 0xC0]
	0x03BBDF74 LDP X22, X21, [X31 + 0xB0]
	0x03BBDF78 LDP X24, X23, [X31 + 0xA0]
	0x03BBDF7C LDP X26, X25, [X31 + 0x90]
	0x03BBDF80 LDP X28, X27, [X31 + 0x80]
	0x03BBDF84 LDP X29, X30, [X31 + 0x70]
	0x03BBDF88 ADD X31, X31, 0xD0
	0x03BBDF8C RET
	0x03BBDF90 MOV X0, X1
	0x03BBDF94 MOV X1, X31
	0x03BBDF98 B 0x1C16CB4
	0x03BBDF9C STP X30, X23, [X31 - 0x30]!
	0x03BBDFA0 STP X22, X21, [X31 + 0x10]
	0x03BBDFA4 STP X20, X19, [X31 + 0x20]
	0x03BBDFA8 ADRP X20, 0x825000
	0x03BBDFAC ADRP X23, 0x5A0000
	0x03BBDFB0 LDRB W8, [X20 + 0xD62]

ISIL:
	001 Move [X31-112], D9
	002 Move [X31-104], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X27, 0x826000
	015 Move X28, 0x5A1000
	016 Move W8, [X27+3424]
	017 Move X28, [X28+928]
	018 Move X19, X7
	019 Move X20, X6
	020 Move X21, X5
	021 Move V8, V1
	022 Move V9, V0
	023 Move X22, X4
	024 Move X23, X3
	025 Move X24, X2
	026 Move X25, X1
	027 Move X26, X0
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {37}
	032 Move X0, 0x5A1000
	033 Move X0, [X0+928]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X27+3424], W8
	037 Move X0, [X28]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X26
	043 Move X1, X25
	044 Move X2, X24
	045 Move X3, X23
	046 Move X4, X22
	047 Move X5, X21
	048 Move X6, X20
	049 Move X7, X19
	050 Move X20, [X31+96]
	051 Move X19, [X31+104]
	052 Move X22, [X31+80]
	053 Move X21, [X31+88]
	054 Move X24, [X31+64]
	055 Move X23, [X31+72]
	056 Move X26, [X31+48]
	057 Move X25, [X31+56]
	058 Move X28, [X31+32]
	059 Move X27, [X31+40]
	060 Move X30, [X31+16]
	061 Move V0, V9
	062 Move V1, V8
	063 Move D9, [X31+112]
	064 Move D8, [X31+120]
	065 Call CalculateRotationParams_00000D41$BurstDirectCall.Invoke, X0, X1, X2, X3, X4, V0, V1, X5, X6, X7
	066 Return 

Method: System.Void .ctor()

Disassembly:
	0x03BBE788 MOV X0, X8
	0x03BBE78C BL 0x1C16E04
	0x03BBE790 STR X0, [X31 + 0x38]
	0x03BBE794 ADD X1, X31, 0x0
	0x03BBE798 MOV X0, X21

ISIL:
	001 Move X8, -51183616
	002 Move V0, [X8+2248]
	003 Move X1, X31
	004 Move [X0+60], D0
	005 Call MonoBehaviour..ctor, X0
	006 Return 

Method: System.Void StabilizeTransform$BurstManaged(in Unity.Mathematics.float3 startPos, in Unity.Mathematics.quaternion startRot, in Unity.Mathematics.float3 targetPos, in Unity.Mathematics.quaternion targetRot, System.Single deltaTime, System.Single positionStabilization, System.Single angleStabilization, out Unity.Mathematics.float3 resultPos, out Unity.Mathematics.quaternion resultRot)

Disassembly:
	0x03BBE79C MOV X2, X20
	0x03BBE7A0 MOV X3, X19
	0x03BBE7A4 BL 0x1C16CB0
	0x03BBE7A8 LDP X20, X19, [X31 + 0xA0]
	0x03BBE7AC LDP X22, X21, [X31 + 0x90]
	0x03BBE7B0 LDP X24, X23, [X31 + 0x80]
	0x03BBE7B4 LDP X26, X25, [X31 + 0x70]
	0x03BBE7B8 LDP X28, X27, [X31 + 0x60]
	0x03BBE7BC LDR X30, [X31 + 0x50]
	0x03BBE7C0 ADD X31, X31, 0xB0
	0x03BBE7C4 RET
	0x03BBE7C8 MOV X0, X1
	0x03BBE7CC MOV X1, X31
	0x03BBE7D0 B 0x1C16CB4
	0x03BBE7D4 STP X30, X23, [X31 - 0x30]!
	0x03BBE7D8 STP X22, X21, [X31 + 0x10]
	0x03BBE7DC STP X20, X19, [X31 + 0x20]
	0x03BBE7E0 ADRP X20, 0x824000
	0x03BBE7E4 ADRP X23, 0x59F000
	0x03BBE7E8 LDRB W8, [X20 + 0xD6C]
	0x03BBE7EC LDR X23, [X23 + 0x3A8]
	0x03BBE7F0 MOV X19, X0
	0x03BBE7F4 TBNZ X8, 0x0, 0x3BBE830
	0x03BBE7F8 ADRP X0, 0x55D000
	0x03BBE7FC LDR X0, [X0 + 0x848]
	0x03BBE800 BL 0x1C16CF4
	0x03BBE804 ADRP X0, 0x59F000
	0x03BBE808 LDR X0, [X0 + 0x3A8]
	0x03BBE80C BL 0x1C16CF4
	0x03BBE810 ADRP X0, 0x59F000
	0x03BBE814 LDR X0, [X0 + 0x3E8]
	0x03BBE818 BL 0x1C16CF4
	0x03BBE81C ADRP X0, 0x59F000
	0x03BBE820 LDR X0, [X0 + 0x3F0]
	0x03BBE824 BL 0x1C16CF4
	0x03BBE828 MOVZ W8, 0x1
	0x03BBE82C STRB W8, [X20 + 0xD6C]
	0x03BBE830 LDR X8, [X23]
	0x03BBE834 LDR W9, [X8 + 0xE0]
	0x03BBE838 CBNZ W9, 0x3BBE848
	0x03BBE83C MOV X0, X8
	0x03BBE840 BL 0x1C16DFC
	0x03BBE844 LDR X8, [X23]
	0x03BBE848 LDR X9, [X8 + 0xB8]
	0x03BBE84C LDR X10, [X9]
	0x03BBE850 CBNZ X10, 0x3BBE8C0
	0x03BBE854 LDR W10, [X8 + 0xE0]
	0x03BBE858 CBNZ W10, 0x3BBE86C
	0x03BBE85C MOV X0, X8
	0x03BBE860 BL 0x1C16DFC
	0x03BBE864 LDR X8, [X23]
	0x03BBE868 LDR X9, [X8 + 0xB8]
	0x03BBE86C ADRP X8, 0x55D000
	0x03BBE870 LDR X20, [X9 + 0x8]
	0x03BBE874 LDR X8, [X8 + 0x848]
	0x03BBE878 LDR X0, [X8]
	0x03BBE87C ADRP X8, 0x59F000
	0x03BBE880 LDR X8, [X8 + 0x3F0]
	0x03BBE884 LDR X21, [X8]
	0x03BBE888 ADRP X8, 0x59F000
	0x03BBE88C LDR X8, [X8 + 0x3E8]
	0x03BBE890 LDR W9, [X0 + 0xE0]
	0x03BBE894 LDR X22, [X8]
	0x03BBE898 CBNZ W9, 0x3BBE8A0
	0x03BBE89C BL 0x1C16DFC
	0x03BBE8A0 MOV X0, X20
	0x03BBE8A4 MOV X1, X21
	0x03BBE8A8 MOV X2, X22
	0x03BBE8AC MOV X3, X31
	0x03BBE8B0 BL 0x36FAD70
	0x03BBE8B4 LDR X8, [X23]
	0x03BBE8B8 LDR X9, [X8 + 0xB8]
	0x03BBE8BC STR X0, [X9]
	0x03BBE8C0 LDR W9, [X8 + 0xE0]
	0x03BBE8C4 CBNZ W9, 0x3BBE8D4
	0x03BBE8C8 MOV X0, X8
	0x03BBE8CC BL 0x1C16DFC
	0x03BBE8D0 LDR X8, [X23]
	0x03BBE8D4 LDR X8, [X8 + 0xB8]
	0x03BBE8D8 LDP X22, X21, [X31 + 0x10]
	0x03BBE8DC LDR X8, [X8]
	0x03BBE8E0 STR X8, [X19]
	0x03BBE8E4 LDP X20, X19, [X31 + 0x20]
	0x03BBE8E8 LDP X30, X23, [X31], #0x30
	0x03BBE8EC RET
	0x03BBE8F0 STR X30, [X31 - 0x20]!
	0x03BBE8F4 STP X20, X19, [X31 + 0x10]
	0x03BBE8F8 ADRP X20, 0x824000
	0x03BBE8FC ADRP X19, 0x59F000
	0x03BBE900 LDRB W8, [X20 + 0xD6D]
	0x03BBE904 LDR X19, [X19 + 0x3A8]
	0x03BBE908 TBNZ X8, 0x0, 0x3BBE920

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X30
	011 Move [X31+120], X25
	012 Move [X31+128], X24
	013 Move [X31+136], X23
	014 Move [X31+144], X22
	015 Move [X31+152], X21
	016 Move [X31+160], X20
	017 Move [X31+168], X19
	018 Move [X31+44], W31
	019 Move X25, 0x824000
	020 Move S11, [X2]
	021 Move S12, [X2+4]
	022 Move V13, [X2+8]
	023 Move S14, [X0]
	024 Move S15, [X0+4]
	025 Move W8, [X25+1413]
	026 Move V9, [X0+8]
	027 Move X19, X5
	028 Move X21, X4
	029 Move V10, V1
	030 Move V8, V0
	031 Move X20, X3
	032 Move X22, X2
	033 Move X24, X0
	034 Move X23, X1
	035 Move [X31+40], S2
	036 Compare W8, 0
	037 JumpIfNotEqual {43}
	038 Move X0, 0x536000
	039 Move X0, [X0+1448]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X25+1413], W8
	043 Move X8, 0x536000
	044 Move X8, [X8+1448]
	045 Subtract S14, S11, S14
	046 Subtract S11, S12, S15
	047 Subtract S9, S13, S9
	048 Move X0, [X8]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Multiply S1, S14, S14
	054 Multiply S2, S11, S11
	055 Multiply S0, S9, S9
	056 Add S1, S1, S2
	057 Add S0, S0, S1
	058 NotImplemented "Instruction FSQRT not yet implemented."
	059 NotImplemented "Instruction FDIV not yet implemented."
	060 Move V1, V8
	061 Call XRTransformStabilizer.CalculateStabilizedLerp, V0, V1
	062 Add X2, X31, 44
	063 Move X0, X20
	064 Move X1, X23
	065 Move X3, X31
	066 Move [X31+16], D0
	067 Call BurstMathUtility.Angle, X0, X1, X2
	068 Move S1, [X31+40]
	069 Move S0, [X31+44]
	070 NotImplemented "Instruction FDIV not yet implemented."
	071 Move V1, V8
	072 Call XRTransformStabilizer.CalculateStabilizedLerp, V0, V1
	073 Move V1, [X24]
	074 Move V2, [X24+8]
	075 Move V3, [X22]
	076 Move V4, [X22+8]
	077 Move V5, [X31+1]
	078 Move X0, X31
	079 Subtract V3, V3, V1
	080 Subtract S4, S4, S2
	081 NotImplemented "Instruction INVALID not yet implemented."
	082 Multiply S4, S5, S4
	083 Add V1, V1, V3
	084 Add S2, S2, S4
	085 Move [X21], D1
	086 Move [X21+8], S2
	087 Move S16, [X23]
	088 Move S1, [X23+4]
	089 Move S2, [X23+8]
	090 Move S3, [X23+12]
	091 Move S4, [X20]
	092 Move S5, [X20+4]
	093 Move S6, [X20+8]
	094 Move S7, [X20+12]
	095 Move [X31], S0
	096 Move V0, V16
	097 Call 0x3B48948
	098 Move [X19], S0
	099 Move [X19+8], S1
	100 Move [X19+8], S2
	101 Move [X19+16], S3
	102 Move X20, [X31+160]
	103 Move X19, [X31+168]
	104 Move X22, [X31+144]
	105 Move X21, [X31+152]
	106 Move X24, [X31+128]
	107 Move X23, [X31+136]
	108 Move X30, [X31+112]
	109 Move X25, [X31+120]
	110 Move D9, [X31+96]
	111 Move D8, [X31+104]
	112 Move D11, [X31+80]
	113 Move D10, [X31+88]
	114 Move D13, [X31+64]
	115 Move D12, [X31+72]
	116 Move D15, [X31+48]
	117 Move D14, [X31+56]
	118 Add X31, X31, 176
	119 Return 

Method: System.Void StabilizePosition$BurstManaged(in Unity.Mathematics.float3 startPos, in Unity.Mathematics.float3 targetPos, System.Single deltaTime, System.Single positionStabilization, out Unity.Mathematics.float3 resultPos)

Disassembly:
	0x03BBE90C ADRP X0, 0x59F000
	0x03BBE910 LDR X0, [X0 + 0x3A8]
	0x03BBE914 BL 0x1C16CF4
	0x03BBE918 MOVZ W8, 0x1
	0x03BBE91C STRB W8, [X20 + 0xD6D]
	0x03BBE920 LDR X0, [X19]
	0x03BBE924 STR X31, [X31 + 0x8]
	0x03BBE928 LDR W8, [X0 + 0xE0]
	0x03BBE92C CBNZ W8, 0x3BBE934
	0x03BBE930 BL 0x1C16DFC
	0x03BBE934 ADD X0, X31, 0x8
	0x03BBE938 BL 0x3BBE7D4
	0x03BBE93C LDR X0, [X31 + 0x8]
	0x03BBE940 LDP X20, X19, [X31 + 0x10]
	0x03BBE944 LDR X30, [X31], #0x20
	0x03BBE948 RET
	0x03BBE94C STP X30, X21, [X31 - 0x20]!
	0x03BBE950 STP X20, X19, [X31 + 0x10]
	0x03BBE954 ADRP X21, 0x824000
	0x03BBE958 ADRP X19, 0x59F000
	0x03BBE95C ADRP X20, 0x55D000
	0x03BBE960 LDRB W8, [X21 + 0xD6E]
	0x03BBE964 LDR X19, [X19 + 0x3F8]
	0x03BBE968 LDR X20, [X20 + 0x848]
	0x03BBE96C TBNZ X8, 0x0, 0x3BBE99C
	0x03BBE970 ADRP X0, 0x55D000
	0x03BBE974 LDR X0, [X0 + 0x848]
	0x03BBE978 BL 0x1C16CF4
	0x03BBE97C ADRP X0, 0x59F000
	0x03BBE980 LDR X0, [X0 + 0x3A8]
	0x03BBE984 BL 0x1C16CF4
	0x03BBE988 ADRP X0, 0x59F000
	0x03BBE98C LDR X0, [X0 + 0x3F8]
	0x03BBE990 BL 0x1C16CF4
	0x03BBE994 MOVZ W8, 0x1
	0x03BBE998 STRB W8, [X21 + 0xD6E]
	0x03BBE99C LDR X0, [X20]
	0x03BBE9A0 ADRP X20, 0x59F000
	0x03BBE9A4 LDR X19, [X19]
	0x03BBE9A8 LDR W8, [X0 + 0xE0]
	0x03BBE9AC LDR X20, [X20 + 0x3A8]
	0x03BBE9B0 CBNZ W8, 0x3BBE9B8
	0x03BBE9B4 BL 0x1C16DFC
	0x03BBE9B8 MOV X0, X19
	0x03BBE9BC MOV X1, X31
	0x03BBE9C0 BL 0x36FA754
	0x03BBE9C4 LDR X8, [X20]
	0x03BBE9C8 MOV X19, X0
	0x03BBE9CC LDR W9, [X8 + 0xE0]
	0x03BBE9D0 CBNZ W9, 0x3BBE9E0
	0x03BBE9D4 MOV X0, X8
	0x03BBE9D8 BL 0x1C16DFC
	0x03BBE9DC LDR X8, [X20]
	0x03BBE9E0 LDR X8, [X8 + 0xB8]
	0x03BBE9E4 STR X19, [X8 + 0x8]
	0x03BBE9E8 LDP X20, X19, [X31 + 0x10]
	0x03BBE9EC LDP X30, X21, [X31], #0x20
	0x03BBE9F0 RET
	0x03BBE9F4 RET
	0x03BBE9F8 B 0x3BBE94C
	0x03BBE9FC STP X30, X21, [X31 - 0x20]!
	0x03BBEA00 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-112], D15
	002 Move [X31-104], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X22, 0x824000
	015 Move S10, [X1]
	016 Move S11, [X1+4]
	017 Move V12, [X1+8]
	018 Move S13, [X0]
	019 Move S14, [X0+4]
	020 Move W8, [X22+1413]
	021 Move V15, [X0+8]
	022 Move X19, X2
	023 Move V8, V1
	024 Move X20, X1
	025 Move X21, X0
	026 Move V9, V0
	027 Compare W8, 0
	028 JumpIfNotEqual {34}
	029 Move X0, 0x536000
	030 Move X0, [X0+1448]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X22+1413], W8
	034 Move X8, 0x536000
	035 Move X8, [X8+1448]
	036 Subtract S13, S10, S13
	037 Subtract S10, S11, S14
	038 Subtract S11, S12, S15
	039 Move X0, [X8]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Multiply S1, S13, S13
	045 Multiply S2, S10, S10
	046 Multiply S0, S11, S11
	047 Add S1, S1, S2
	048 Add S0, S0, S1
	049 NotImplemented "Instruction FSQRT not yet implemented."
	050 NotImplemented "Instruction FDIV not yet implemented."
	051 Move V1, V9
	052 Call XRTransformStabilizer.CalculateStabilizedLerp, V0, V1
	053 Move V1, [X21]
	054 Move V2, [X21+8]
	055 Move V3, [X20]
	056 Move V4, [X20+8]
	057 Move X22, [X31+80]
	058 Move X21, [X31+88]
	059 Move X30, [X31+64]
	060 Subtract V3, V3, V1
	061 Subtract S4, S4, S2
	062 NotImplemented "Instruction INVALID not yet implemented."
	063 Multiply S0, S0, S4
	064 Add V1, V1, V3
	065 Add S0, S2, S0
	066 Move [X19], D1
	067 Move [X19+8], S0
	068 Move X20, [X31+96]
	069 Move X19, [X31+104]
	070 Move D9, [X31+48]
	071 Move D8, [X31+56]
	072 Move D11, [X31+32]
	073 Move D10, [X31+40]
	074 Move D13, [X31+16]
	075 Move D12, [X31+24]
	076 Move D15, [X31+112]
	077 Move D14, [X31+120]
	078 Return 

Method: System.Void StabilizeOptimalRotation$BurstManaged(in Unity.Mathematics.quaternion startRot, in Unity.Mathematics.quaternion targetRot, in Unity.Mathematics.quaternion alternateStartRot, System.Single deltaTime, System.Single angleStabilization, System.Single alternateStabilization, System.Single scaleFactor, out Unity.Mathematics.quaternion resultRot)

Disassembly:
	0x03BBEA04 LDR X8, [X2 + 0x8]
	0x03BBEA08 STP X1, X2, [X0 + 0x20]
	0x03BBEA0C MOV X19, X0
	0x03BBEA10 MOV X20, X1
	0x03BBEA14 STR X8, [X0 + 0x10]
	0x03BBEA18 LDRB W21, [X2 + 0x52]
	0x03BBEA1C STR X0, [X0 + 0x40]
	0x03BBEA20 MOV X0, X2
	0x03BBEA24 BL 0x1C16D84
	0x03BBEA28 TBZ X0, 0x0, 0x3BBEA44
	0x03BBEA2C CMP W21, 0x2
	0x03BBEA30 B.NE 0x3BBEA48
	0x03BBEA34 ADRP X8, 0xFFFFFFFFFE042000
	0x03BBEA38 ADD X8, X8, 0xF40
	0x03BBEA3C STR X8, [X19 + 0x18]
	0x03BBEA40 B 0x3BBEA58
	0x03BBEA44 CBZ X20, 0x3BBEA70
	0x03BBEA48 LDR X8, [X19 + 0x10]
	0x03BBEA4C LDR X9, [X19 + 0x20]
	0x03BBEA50 STR X8, [X19 + 0x18]
	0x03BBEA54 STR X9, [X19 + 0x40]
	0x03BBEA58 ADRP X8, 0xFFFFFFFFFE042000
	0x03BBEA5C ADD X8, X8, 0xEE0
	0x03BBEA60 STR X8, [X19 + 0x38]
	0x03BBEA64 LDP X20, X19, [X31 + 0x10]
	0x03BBEA68 LDP X30, X21, [X31], #0x20
	0x03BBEA6C RET
	0x03BBEA70 ADRP X1, 0xFFFFFFFFFCF5D000
	0x03BBEA74 ADD X1, X1, 0xEE3
	0x03BBEA78 MOV X0, X31
	0x03BBEA7C BL 0x1C16F3C
	0x03BBEA80 MOV X1, X31
	0x03BBEA84 BL 0x1C16DEC
	0x03BBEA88 LDR X8, [X0 + 0x40]
	0x03BBEA8C LDR X2, [X0 + 0x18]
	0x03BBEA90 LDR X1, [X0 + 0x28]
	0x03BBEA94 MOV X0, X8
	0x03BBEA98 BR X2
	0x03BBEA9C SUB X31, X31, 0x50
	0x03BBEAA0 STP X30, X23, [X31 + 0x20]
	0x03BBEAA4 STP X22, X21, [X31 + 0x30]
	0x03BBEAA8 STP X20, X19, [X31 + 0x40]
	0x03BBEAAC ADRP X23, 0x824000
	0x03BBEAB0 STP S1, S0, [X31 + 0x18]
	0x03BBEAB4 ADRP X22, 0x535000
	0x03BBEAB8 LDRB W8, [X23 + 0xD70]
	0x03BBEABC LDR X22, [X22 + 0xA90]
	0x03BBEAC0 MOV X19, X2
	0x03BBEAC4 MOV X20, X1
	0x03BBEAC8 MOV X21, X0

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X31
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, X0
	013 Move X19, X3
	014 Move X20, X2
	015 Move X21, X1
	016 Add X2, X31, 60
	017 Move X0, X1
	018 Move X1, X22
	019 Move X3, X31
	020 Move V8, V3
	021 Move V9, V2
	022 Move V10, V1
	023 Move V11, V0
	024 Call BurstMathUtility.Angle, X0, X1, X2
	025 Move V0, [X31+60]
	026 Add X2, X31, 56
	027 Move X0, X21
	028 Move X1, X20
	029 Move X3, X31
	030 NotImplemented "Instruction FDIV not yet implemented."
	031 Call BurstMathUtility.Angle, X0, X1, X2
	032 Move V0, [X31+56]
	033 Multiply S1, S11, S8
	034 NotImplemented "Instruction FDIV not yet implemented."
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 NotImplemented "Instruction FCSEL not yet implemented."
	037 NotImplemented "Instruction CSEL not yet implemented."
	038 Call XRTransformStabilizer.CalculateStabilizedLerp, V0, V1
	039 Move S16, [X20]
	040 Move S1, [X20+4]
	041 Move S2, [X20+8]
	042 Move S3, [X20+12]
	043 Move S4, [X21]
	044 Move S5, [X21+4]
	045 Move S6, [X21+8]
	046 Move S7, [X21+12]
	047 Move [X31], S0
	048 Move V0, V16
	049 Move X0, X31
	050 Call 0x3B48948
	051 Move [X19], S0
	052 Move [X19+8], S1
	053 Move [X19+8], S2
	054 Move [X19+16], S3
	055 Move X20, [X31+80]
	056 Move X19, [X31+88]
	057 Move X22, [X31+64]
	058 Move X21, [X31+72]
	059 Move X30, [X31+48]
	060 Move D9, [X31+32]
	061 Move D8, [X31+40]
	062 Move D11, [X31+16]
	063 Move D10, [X31+24]
	064 Add X31, X31, 96
	065 Return 

Method: System.Single CalculateStabilizedLerp$BurstManaged(System.Single distance, System.Single timeSlice)

Disassembly:
	0x03BBEACC TBNZ X8, 0x0, 0x3BBEAE4
	0x03BBEAD0 ADRP X0, 0x535000
	0x03BBEAD4 LDR X0, [X0 + 0xA90]
	0x03BBEAD8 BL 0x1C16CF4
	0x03BBEADC MOVZ W8, 0x1
	0x03BBEAE0 STRB W8, [X23 + 0xD70]
	0x03BBEAE4 LDR X0, [X22]
	0x03BBEAE8 ADD X1, X31, 0x1C
	0x03BBEAEC STP X31, X31, [X31]
	0x03BBEAF0 STR X31, [X31 + 0x10]
	0x03BBEAF4 BL 0x1C16E04
	0x03BBEAF8 LDR X8, [X22]
	0x03BBEAFC STR X0, [X31]
	0x03BBEB00 ADD X1, X31, 0x18
	0x03BBEB04 MOV X0, X8
	0x03BBEB08 BL 0x1C16E04
	0x03BBEB0C STR X0, [X31 + 0x8]
	0x03BBEB10 ADD X1, X31, 0x0
	0x03BBEB14 MOV X0, X21
	0x03BBEB18 MOV X2, X20
	0x03BBEB1C MOV X3, X19
	0x03BBEB20 BL 0x1C16CB0
	0x03BBEB24 LDP X20, X19, [X31 + 0x40]
	0x03BBEB28 LDP X22, X21, [X31 + 0x30]
	0x03BBEB2C LDP X30, X23, [X31 + 0x20]
	0x03BBEB30 ADD X31, X31, 0x50
	0x03BBEB34 RET
	0x03BBEB38 STR X30, [X31 - 0x10]!
	0x03BBEB3C MOV X0, X1
	0x03BBEB40 MOV X1, X31
	0x03BBEB44 BL 0x1C16CB4
	0x03BBEB48 CBZ X0, 0x3BBEB5C
	0x03BBEB4C BL 0x1C16E08
	0x03BBEB50 LDR V0, [X0]
	0x03BBEB54 LDR X30, [X31], #0x10
	0x03BBEB58 RET
	0x03BBEB5C BL 0x1C16F20
	0x03BBEB60 STP X30, X23, [X31 - 0x30]!
	0x03BBEB64 STP X22, X21, [X31 + 0x10]
	0x03BBEB68 STP X20, X19, [X31 + 0x20]
	0x03BBEB6C ADRP X20, 0x824000
	0x03BBEB70 ADRP X23, 0x59F000
	0x03BBEB74 LDRB W8, [X20 + 0xD71]
	0x03BBEB78 LDR X23, [X23 + 0x3B0]
	0x03BBEB7C MOV X19, X0
	0x03BBEB80 TBNZ X8, 0x0, 0x3BBEBBC
	0x03BBEB84 ADRP X0, 0x55D000
	0x03BBEB88 LDR X0, [X0 + 0x848]
	0x03BBEB8C BL 0x1C16CF4
	0x03BBEB90 ADRP X0, 0x59F000
	0x03BBEB94 LDR X0, [X0 + 0x3B0]

ISIL:
	001 Move S2, 1
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Move S2, W31
	005 Move X8, -51195904
	006 Move V5, [X8+640]
	007 Move X8, -51183616
	008 Move V7, [X8+3208]
	009 Move W9, 0x7F800000
	010 NotImplemented "Instruction FDIV not yet implemented."
	011 Move W8, S1
	012 And W8, W8, 0x7FFFFFFF
	013 Move S3, 1
	014 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Add V7, V16, V7
	017 NotImplemented "Instruction FCCMP not yet implemented."
	018 Move V16, V7
	019 NotImplemented "Instruction FCSEL not yet implemented."
	020 Move V6, 0
	021 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	022 NotImplemented "Instruction BIC not yet implemented."
	023 Move W8, S1
	024 NotImplemented "Instruction INVALID not yet implemented."
	025 NotImplemented "Instruction INVALID not yet implemented."
	026 And W8, W8, 0x7FFFFFFF
	027 Move S4, W31
	028 Or V3, V3, V16
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction FCCMP not yet implemented."
	031 NotImplemented "Instruction INVALID not yet implemented."
	032 NotImplemented "Instruction FCSEL not yet implemented."
	033 Move V4, V3
	034 Multiply S2, S0, S0
	035 NotImplemented "Instruction BIC not yet implemented."
	036 Subtract S2, S0, S2
	037 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	038 Multiply S0, S1, S0
	039 NotImplemented "Instruction INVALID not yet implemented."
	040 Multiply S16, S2, S2
	041 Or V1, V6, V1
	042 NotImplemented "Instruction BIC not yet implemented."
	043 Move V16.S[1], V2.S[0]
	044 NotImplemented "Instruction INVALID not yet implemented."
	045 Move S2, V1.S[1]
	046 Add S0, S0, S2
	047 Add S2, S1, S0
	048 Move V0, V2
	049 Return V0

Method: System.Void CalculateRotationParams$BurstManaged(in Unity.Mathematics.float3 currentPosition, in Unity.Mathematics.float3 resultPosition, in Unity.Mathematics.float3 forward, in Unity.Mathematics.float3 up, in Unity.Mathematics.float3 rayEnd, System.Single invScale, System.Single angleStabilization, out Unity.Mathematics.quaternion antiRotation, out System.Single scaleFactor, out System.Single targetAngleScale)

Disassembly:
	0x03BBEB98 BL 0x1C16CF4
	0x03BBEB9C ADRP X0, 0x59F000
	0x03BBEBA0 LDR X0, [X0 + 0x400]
	0x03BBEBA4 BL 0x1C16CF4
	0x03BBEBA8 ADRP X0, 0x59F000
	0x03BBEBAC LDR X0, [X0 + 0x408]
	0x03BBEBB0 BL 0x1C16CF4
	0x03BBEBB4 MOVZ W8, 0x1
	0x03BBEBB8 STRB W8, [X20 + 0xD71]
	0x03BBEBBC LDR X8, [X23]
	0x03BBEBC0 LDR W9, [X8 + 0xE0]
	0x03BBEBC4 CBNZ W9, 0x3BBEBD4
	0x03BBEBC8 MOV X0, X8
	0x03BBEBCC BL 0x1C16DFC
	0x03BBEBD0 LDR X8, [X23]
	0x03BBEBD4 LDR X9, [X8 + 0xB8]
	0x03BBEBD8 LDR X10, [X9]
	0x03BBEBDC CBNZ X10, 0x3BBEC4C
	0x03BBEBE0 LDR W10, [X8 + 0xE0]
	0x03BBEBE4 CBNZ W10, 0x3BBEBF8
	0x03BBEBE8 MOV X0, X8
	0x03BBEBEC BL 0x1C16DFC
	0x03BBEBF0 LDR X8, [X23]
	0x03BBEBF4 LDR X9, [X8 + 0xB8]
	0x03BBEBF8 ADRP X8, 0x55D000
	0x03BBEBFC LDR X20, [X9 + 0x8]
	0x03BBEC00 LDR X8, [X8 + 0x848]
	0x03BBEC04 LDR X0, [X8]
	0x03BBEC08 ADRP X8, 0x59F000
	0x03BBEC0C LDR X8, [X8 + 0x408]
	0x03BBEC10 LDR X21, [X8]
	0x03BBEC14 ADRP X8, 0x59F000
	0x03BBEC18 LDR X8, [X8 + 0x400]
	0x03BBEC1C LDR W9, [X0 + 0xE0]
	0x03BBEC20 LDR X22, [X8]
	0x03BBEC24 CBNZ W9, 0x3BBEC2C
	0x03BBEC28 BL 0x1C16DFC
	0x03BBEC2C MOV X0, X20
	0x03BBEC30 MOV X1, X21
	0x03BBEC34 MOV X2, X22
	0x03BBEC38 MOV X3, X31
	0x03BBEC3C BL 0x36FAD70
	0x03BBEC40 LDR X8, [X23]
	0x03BBEC44 LDR X9, [X8 + 0xB8]
	0x03BBEC48 STR X0, [X9]
	0x03BBEC4C LDR W9, [X8 + 0xE0]
	0x03BBEC50 CBNZ W9, 0x3BBEC60
	0x03BBEC54 MOV X0, X8
	0x03BBEC58 BL 0x1C16DFC
	0x03BBEC5C LDR X8, [X23]
	0x03BBEC60 LDR X8, [X8 + 0xB8]
	0x03BBEC64 LDP X22, X21, [X31 + 0x10]
	0x03BBEC68 LDR X8, [X8]
	0x03BBEC6C STR X8, [X19]
	0x03BBEC70 LDP X20, X19, [X31 + 0x20]
	0x03BBEC74 LDP X30, X23, [X31], #0x30
	0x03BBEC78 RET
	0x03BBEC7C STR X30, [X31 - 0x20]!
	0x03BBEC80 STP X20, X19, [X31 + 0x10]
	0x03BBEC84 ADRP X20, 0x824000
	0x03BBEC88 ADRP X19, 0x59F000
	0x03BBEC8C LDRB W8, [X20 + 0xD72]
	0x03BBEC90 LDR X19, [X19 + 0x3B0]
	0x03BBEC94 TBNZ X8, 0x0, 0x3BBECAC
	0x03BBEC98 ADRP X0, 0x59F000
	0x03BBEC9C LDR X0, [X0 + 0x3B0]
	0x03BBECA0 BL 0x1C16CF4
	0x03BBECA4 MOVZ W8, 0x1
	0x03BBECA8 STRB W8, [X20 + 0xD72]
	0x03BBECAC LDR X0, [X19]
	0x03BBECB0 STR X31, [X31 + 0x8]
	0x03BBECB4 LDR W8, [X0 + 0xE0]
	0x03BBECB8 CBNZ W8, 0x3BBECC0
	0x03BBECBC BL 0x1C16DFC
	0x03BBECC0 ADD X0, X31, 0x8
	0x03BBECC4 BL 0x3BBEB60
	0x03BBECC8 LDR X0, [X31 + 0x8]
	0x03BBECCC LDP X20, X19, [X31 + 0x10]
	0x03BBECD0 LDR X30, [X31], #0x20
	0x03BBECD4 RET
	0x03BBECD8 STP X30, X21, [X31 - 0x20]!
	0x03BBECDC STP X20, X19, [X31 + 0x10]
	0x03BBECE0 ADRP X21, 0x824000
	0x03BBECE4 ADRP X19, 0x59F000
	0x03BBECE8 ADRP X20, 0x55D000
	0x03BBECEC LDRB W8, [X21 + 0xD73]
	0x03BBECF0 LDR X19, [X19 + 0x410]
	0x03BBECF4 LDR X20, [X20 + 0x848]
	0x03BBECF8 TBNZ X8, 0x0, 0x3BBED28
	0x03BBECFC ADRP X0, 0x55D000
	0x03BBED00 LDR X0, [X0 + 0x848]
	0x03BBED04 BL 0x1C16CF4
	0x03BBED08 ADRP X0, 0x59F000
	0x03BBED0C LDR X0, [X0 + 0x3B0]
	0x03BBED10 BL 0x1C16CF4
	0x03BBED14 ADRP X0, 0x59F000
	0x03BBED18 LDR X0, [X0 + 0x410]
	0x03BBED1C BL 0x1C16CF4
	0x03BBED20 MOVZ W8, 0x1
	0x03BBED24 STRB W8, [X21 + 0xD73]
	0x03BBED28 LDR X0, [X20]
	0x03BBED2C ADRP X20, 0x59F000
	0x03BBED30 LDR X19, [X19]
	0x03BBED34 LDR W8, [X0 + 0xE0]
	0x03BBED38 LDR X20, [X20 + 0x3B0]
	0x03BBED3C CBNZ W8, 0x3BBED44
	0x03BBED40 BL 0x1C16DFC
	0x03BBED44 MOV X0, X19
	0x03BBED48 MOV X1, X31
	0x03BBED4C BL 0x36FA754
	0x03BBED50 LDR X8, [X20]
	0x03BBED54 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X26
	012 Move [X31+104], X25
	013 Move [X31+112], X24
	014 Move [X31+120], X23
	015 Move [X31+128], X22
	016 Move [X31+136], X21
	017 Move [X31+144], X20
	018 Move [X31+152], X19
	019 Move X26, 0x824000
	020 Move S10, [X4]
	021 Move S11, [X4+4]
	022 Move V12, [X4+8]
	023 Move S13, [X0]
	024 Move S14, [X0+4]
	025 Move W8, [X26+1413]
	026 Move V15, [X0+8]
	027 Move X19, X7
	028 Move X20, X6
	029 Move X21, X5
	030 Move V8, V1
	031 Move V9, V0
	032 Move X22, X3
	033 Move X23, X2
	034 Move X25, X0
	035 Move X24, X1
	036 Compare W8, 0
	037 JumpIfNotEqual {43}
	038 Move X0, 0x536000
	039 Move X0, [X0+1448]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X26+1413], W8
	043 Move X26, 0x536000
	044 Move X26, [X26+1448]
	045 Subtract S13, S10, S13
	046 Subtract S10, S11, S14
	047 Subtract S11, S12, S15
	048 Move X0, [X26]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Multiply S1, S13, S13
	054 Multiply S2, S10, S10
	055 Move V4, [X23]
	056 Move V6, [X23+8]
	057 Multiply S0, S11, S11
	058 Move V3, [X25]
	059 Move V5, [X25+8]
	060 Add S1, S1, S2
	061 Add S0, S0, S1
	062 Move V7, [X24]
	063 NotImplemented "Instruction FSQRT not yet implemented."
	064 Move V2, [X24+8]
	065 NotImplemented "Instruction INVALID not yet implemented."
	066 Move [X31], V1
	067 Multiply S1, S1, S6
	068 Add V0, V3, V0
	069 Move S3, [X22]
	070 Move S4, [X22+4]
	071 Add S1, S5, S1
	072 Move V5, [X22+8]
	073 Subtract V0, V0, V7
	074 Subtract S2, S1, S2
	075 Move S1, V0.S[1]
	076 Move X0, X31
	077 Call quaternion.LookRotationSafe, X0, X1
	078 Move [X21], S0
	079 Move [X21+8], S1
	080 Move [X21+8], S2
	081 Move [X21+16], S3
	082 Move X21, 0x824000
	083 Move W8, [X21+1407]
	084 Compare W8, 0
	085 JumpIfNotEqual {91}
	086 Move X0, 0x536000
	087 Move X0, [X0+1448]
	088 Call 0x1C17CF4
	089 Move W8, 1
	090 Move [X21+1407], W8
	091 Move X0, [X26]
	092 Move V0, [X31]
	093 Move W8, [X0+224]
	094 Multiply S9, S0, S9
	095 Compare W8, 0
	096 JumpIfNotEqual {98}
	097 Call 0x1C17DFC
	098 Move S10, 1
	099 NotImplemented "Instruction FMAXNM not yet implemented."
	100 NotImplemented "Instruction FCVT not yet implemented."
	101 Call 0x3EB2C20
	102 NotImplemented "Instruction INVALID not yet implemented."
	103 Add S0, S0, S10
	104 Move W9, S0
	105 Move W8, 0x7F800000
	106 And W9, W9, 0x7FFFFFFF
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move S1, 3
	109 NotImplemented "Instruction FCCMP not yet implemented."
	110 NotImplemented "Instruction FCSEL not yet implemented."
	111 Move W9, S1
	112 And W9, W9, 0x7FFFFFFF
	113 NotImplemented "Instruction CMP not yet implemented."
	114 NotImplemented "Instruction FCCMP not yet implemented."
	115 Move [X20], S0
	116 NotImplemented "Instruction FCSEL not yet implemented."
	117 Multiply S0, S0, S8
	118 Move [X19], S0
	119 Move X20, [X31+144]
	120 Move X19, [X31+152]
	121 Move X22, [X31+128]
	122 Move X21, [X31+136]
	123 Move X24, [X31+112]
	124 Move X23, [X31+120]
	125 Move X26, [X31+96]
	126 Move X25, [X31+104]
	127 Move X30, [X31+80]
	128 Move D9, [X31+64]
	129 Move D8, [X31+72]
	130 Move D11, [X31+48]
	131 Move D10, [X31+56]
	132 Move D13, [X31+32]
	133 Move D12, [X31+40]
	134 Move D15, [X31+16]
	135 Move D14, [X31+24]
	136 Add X31, X31, 160
	137 Return 

