Type: UnityEngine.ProBuilder.EdgeLookup

Method: UnityEngine.ProBuilder.Edge get_local()

Disassembly:
	0x038FF718 CBZ X9, 0x38FF73C
	0x038FF71C LDR X10, [X8 + 0xB0]

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Void set_local(UnityEngine.ProBuilder.Edge value)

Disassembly:
	0x038FF720 ADD X10, X10, 0x8
	0x038FF724 LDUR X11, [X10 - 0x8]

ISIL:
	001 Move [X0], X1
	002 Return 

Method: UnityEngine.ProBuilder.Edge get_common()

Disassembly:
	0x038FF728 CMP X11, X1
	0x038FF72C B.EQ 0x38FF74C

ISIL:
	001 Move X0, [X0+8]
	002 Return X0

Method: System.Void set_common(UnityEngine.ProBuilder.Edge value)

Disassembly:
	0x038FF730 SUBS X9, X9, 0x1
	0x038FF734 ADD X10, X10, 0x10

ISIL:
	001 Move [X0+8], X1
	002 Return 

Method: System.Void .ctor(UnityEngine.ProBuilder.Edge common, UnityEngine.ProBuilder.Edge local)

Disassembly:
	0x038FF738 B.NE 0x38FF724
	0x038FF73C MOV X0, X20

ISIL:
	001 Move [X0], X2
	002 Move [X0+8], X1
	003 Return 

Method: System.Void .ctor(System.Int32 cx, System.Int32 cy, System.Int32 x, System.Int32 y)

Disassembly:
	0x038FF740 MOV W2, W31
	0x038FF744 BL 0x1C5C788
	0x038FF748 B 0x38FF758
	0x038FF74C LDRSW X9, [X10]
	0x038FF750 ADD X8, X8, X9, 0x4, LSL
	0x038FF754 ADD X0, X8, 0x138

ISIL:
	001 Move W8, W1
	002 Move W9, W3
	003 NotImplemented "Instruction BFM not yet implemented."
	004 NotImplemented "Instruction BFM not yet implemented."
	005 Move [X0], X9
	006 Move [X0+8], X8
	007 Return 

Method: System.Boolean Equals(UnityEngine.ProBuilder.EdgeLookup other)

Disassembly:
	0x038FF758 LDP X8, X1, [X0]
	0x038FF75C MOV X0, X20
	0x038FF760 BLR X8
	0x038FF764 CMP W22, W0
	0x038FF768 B.GE 0x38FF810
	0x038FF76C LDR X8, [X20]
	0x038FF770 LDR X1, [X25]
	0x038FF774 LDRH W9, [X8 + 0x12E]
	0x038FF778 CBZ X9, 0x38FF79C
	0x038FF77C LDR X10, [X8 + 0xB0]
	0x038FF780 ADD X10, X10, 0x8
	0x038FF784 LDUR X11, [X10 - 0x8]
	0x038FF788 CMP X11, X1
	0x038FF78C B.EQ 0x38FF7AC
	0x038FF790 SUBS X9, X9, 0x1
	0x038FF794 ADD X10, X10, 0x10
	0x038FF798 B.NE 0x38FF784
	0x038FF79C MOV X0, X20
	0x038FF7A0 MOV W2, W31
	0x038FF7A4 BL 0x1C5C788
	0x038FF7A8 B 0x38FF7B8
	0x038FF7AC LDRSW X9, [X10]
	0x038FF7B0 ADD X8, X8, X9, 0x4, LSL
	0x038FF7B4 ADD X0, X8, 0x138
	0x038FF7B8 LDP X8, X2, [X0]
	0x038FF7BC MOV X0, X20
	0x038FF7C0 MOV W1, W22
	0x038FF7C4 BLR X8
	0x038FF7C8 STR X0, [X31 + 0x8]
	0x038FF7CC CBZ X21, 0x38FF830
	0x038FF7D0 MOV X0, X21
	0x038FF7D4 MOV X1, X31
	0x038FF7D8 BL 0x3916198
	0x038FF7DC LDR X8, [X26]
	0x038FF7E0 MOV X23, X0
	0x038FF7E4 LDR W9, [X8 + 0xE0]
	0x038FF7E8 CBNZ W9, 0x38FF7F4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xAE3000
	007 Move X21, 0x81D000
	008 Move W8, [X22+1950]
	009 Move X21, [X21+1536]
	010 Move X19, X2
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x81D000
	017 Move X0, [X0+1536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1950], W8
	021 Move X0, [X21]
	022 Move X20, [X20+8]
	023 Move X21, X19
	024 ShiftRight X21, 32
	025 And X21, X21, 0x7FFFFFFF
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X8, X20
	032 ShiftRight X8, 32
	033 And X8, X8, 0x7FFFFFFF
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move W0, 1
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CSET not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CSET not yet implemented."
	040 And W0, W9, W8
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x038FF7EC MOV X0, X8
	0x038FF7F0 BL 0x1C16DFC
	0x038FF7F4 ADD X0, X31, 0x8
	0x038FF7F8 MOV X1, X19
	0x038FF7FC MOV X2, X23
	0x038FF800 BL 0x38FE0D0
	0x038FF804 TBNZ X0, 0x0, 0x38FF814
	0x038FF808 ADD W22, W22, 0x1
	0x038FF80C B 0x38FF70C
	0x038FF810 MOVN W22, 0x0
	0x038FF814 MOV W0, W22
	0x038FF818 LDP X20, X19, [X31 + 0x40]
	0x038FF81C LDP X22, X21, [X31 + 0x30]
	0x038FF820 LDP X24, X23, [X31 + 0x20]
	0x038FF824 LDP X26, X25, [X31 + 0x10]
	0x038FF828 LDR X30, [X31], #0x50
	0x038FF82C RET
	0x038FF830 BL 0x1C16F20
	0x038FF834 STR X30, [X31 - 0x20]!
	0x038FF838 STP X20, X19, [X31 + 0x10]
	0x038FF83C ADRP X20, 0xAE2000
	0x038FF840 LDRB W8, [X20 + 0x7AC]
	0x038FF844 MOV X19, X0
	0x038FF848 TBNZ X8, 0x0, 0x38FF860
	0x038FF84C ADRP X0, 0x7F5000
	0x038FF850 LDR X0, [X0 + 0xE58]
	0x038FF854 BL 0x1C16CF4
	0x038FF858 MOVZ W8, 0x1
	0x038FF85C STRB W8, [X20 + 0x7AC]
	0x038FF860 CBZ X19, 0x38FF900
	0x038FF864 ADRP X8, 0x7F5000
	0x038FF868 LDR X8, [X8 + 0xE58]
	0x038FF86C LDR W9, [X19 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xAE3000
	006 Move W8, [X21+1951]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x820000
	014 Move X0, [X0+1208]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1951], W8
	018 Compare X19, 0
	019 JumpIfEqual {38}
	020 Move X8, 0x820000
	021 Move X8, [X8+1208]
	022 Move X9, [X19]
	023 Move X0, X19
	024 Move X1, [X8]
	025 Move X8, [X9+64]
	026 Move X9, [X1+64]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Call 0x1C17E08
	029 Move X1, [X0]
	030 Move X2, [X0+8]
	031 Move X0, X20
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call EdgeLookup.Equals, X0, X1
	037 Return X0
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move W0, W31
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return X0
	044 Call 0x1C181E0

Method: System.Int32 GetHashCode()

Disassembly:
	0x038FF870 LDR X0, [X8]
	0x038FF874 UBFM W1, W9, 0x1F, 0x1E
	0x038FF878 BL 0x1C16D6C
	0x038FF87C LDR X9, [X19 + 0x18]
	0x038FF880 CMP W9, 0x1
	0x038FF884 B.LT 0x38FF8F0
	0x038FF888 AND X9, X9, 0x0
	0x038FF88C MOV X11, X31
	0x038FF890 MOV X8, X31
	0x038FF894 SXTW X10, W9
	0x038FF898 CMP X8, X9
	0x038FF89C B.CS 0x38FF8FC
	0x038FF8A0 CBZ X0, 0x38FF900
	0x038FF8A4 LDR W13, [X0 + 0x18]
	0x038FF8A8 CMP W11, W13
	0x038FF8AC B.CS 0x38FF8FC
	0x038FF8B0 ADD X12, X19, X11, 0x2, LSL
	0x038FF8B4 LDR W14, [X12 + 0x20]
	0x038FF8B8 ADD X12, X11, 0x1
	0x038FF8BC ADD X15, X0, W11, 0x2, SXTW
	0x038FF8C0 CMP W12, W13
	0x038FF8C4 STR W14, [X15 + 0x20]
	0x038FF8C8 B.CS 0x38FF8FC
	0x038FF8CC ADD X13, X11, 0x1
	0x038FF8D0 ADD X11, X19, X11, 0x2, LSL
	0x038FF8D4 LDR W11, [X11 + 0x24]
	0x038FF8D8 ADD X8, X8, 0x1
	0x038FF8DC ADD X13, X0, W13, 0x2, SXTW

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xAE3000
	006 Move X20, 0x81D000
	007 Move W8, [X21+1952]
	008 Move X20, [X20+1536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x81D000
	015 Move X0, [X0+1536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1952], W8
	019 Move X0, [X20]
	020 Move W20, [X19+8]
	021 Move W19, [X19+12]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSEL not yet implemented."
	028 NotImplemented "Instruction CSEL not yet implemented."
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move W8, 29
	032 NotImplemented "Instruction MADD not yet implemented."
	033 Move W9, 0x58B3
	034 Add W0, W8, W9
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return X0

Method: System.Boolean op_Equality(UnityEngine.ProBuilder.EdgeLookup a, UnityEngine.ProBuilder.EdgeLookup b)

Disassembly:
	0x038FF8E0 CMP X8, X10
	0x038FF8E4 STR W11, [X13 + 0x20]
	0x038FF8E8 ADD X11, X12, 0x1
	0x038FF8EC B.LT 0x38FF898
	0x038FF8F0 LDP X20, X19, [X31 + 0x10]
	0x038FF8F4 LDR X30, [X31], #0x20
	0x038FF8F8 RET
	0x038FF8FC BL 0x1C16F28
	0x038FF900 BL 0x1C16F20
	0x038FF904 SUB X31, X31, 0x70
	0x038FF908 STP X29, X30, [X31 + 0x10]
	0x038FF90C STP X28, X27, [X31 + 0x20]
	0x038FF910 STP X26, X25, [X31 + 0x30]
	0x038FF914 STP X24, X23, [X31 + 0x40]
	0x038FF918 STP X22, X21, [X31 + 0x50]
	0x038FF91C STP X20, X19, [X31 + 0x60]
	0x038FF920 ADRP X21, 0xAE2000
	0x038FF924 LDRB W8, [X21 + 0x7AD]
	0x038FF928 MOV X19, X1
	0x038FF92C MOV X20, X0
	0x038FF930 TBNZ X8, 0x0, 0x38FF948
	0x038FF934 ADRP X0, 0x81C000
	0x038FF938 LDR X0, [X0 + 0x600]
	0x038FF93C BL 0x1C16CF4
	0x038FF940 MOVZ W8, 0x1
	0x038FF944 STRB W8, [X21 + 0x7AD]
	0x038FF948 CBZ X20, 0x38FFA7C
	0x038FF94C LDR X23, [X20 + 0x28]
	0x038FF950 CBZ X23, 0x38FFA7C
	0x038FF954 LDR W8, [X23 + 0x18]
	0x038FF958 CMP W8, 0x1
	0x038FF95C B.LT 0x38FFA50
	0x038FF960 ADRP X26, 0x81C000
	0x038FF964 LDR X26, [X26 + 0x600]
	0x038FF968 MOV W24, W31
	0x038FF96C MOV X20, X31
	0x038FF970 UBFM X25, X19, 0x20, 0x3F
	0x038FF974 STR X23, [X31 + 0x8]
	0x038FF978 CMP W24, W8

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+48], X24
	004 Move [X31+56], X23
	005 Move [X31+64], X22
	006 Move [X31+72], X21
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 Move X24, 0xAE3000
	010 Move X23, 0x820000
	011 Move W8, [X24+1953]
	012 Move X23, [X23+1208]
	013 Move X19, X3
	014 Move X20, X2
	015 Move X21, X1
	016 Move X22, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x820000
	022 Move X0, [X0+1208]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X24+1953], W8
	026 Move X0, [X23]
	027 Add X1, X31, 16
	028 Move [X31+16], X22
	029 Move [X31+24], X21
	030 Call 0x1C17E04
	031 Move X21, X0
	032 Move X0, [X23]
	033 Add X1, X31, 0
	034 Move [X31], X20
	035 Move [X31+8], X19
	036 Call 0x1C17E04
	037 Move X1, X0
	038 Move X0, X21
	039 Move X2, X31
	040 Call Object.Equals, X0, X1
	041 Move X20, [X31+80]
	042 Move X19, [X31+88]
	043 Move X22, [X31+64]
	044 Move X21, [X31+72]
	045 Move X24, [X31+48]
	046 Move X23, [X31+56]
	047 Move X30, [X31+32]
	048 And W0, W0, 1
	049 Add X31, X31, 96
	050 Return X0

Method: System.Boolean op_Inequality(UnityEngine.ProBuilder.EdgeLookup a, UnityEngine.ProBuilder.EdgeLookup b)

Disassembly:
	0x038FF97C B.CS 0x38FFA78
	0x038FF980 ADD X8, X23, W24, 0x3, SXTW
	0x038FF984 LDR X21, [X8 + 0x20]
	0x038FF988 CBZ X21, 0x38FFA7C
	0x038FF98C LDR X22, [X21 + 0x60]
	0x038FF990 CBNZ X22, 0x38FF9A4
	0x038FF994 MOV X0, X21
	0x038FF998 BL 0x38FFEEC
	0x038FF99C MOV X22, X0
	0x038FF9A0 CBZ X0, 0x38FFA7C
	0x038FF9A4 LDR X8, [X22 + 0x18]
	0x038FF9A8 SUBS W27, W8, 0x1
	0x038FF9AC B.LT 0x38FFA34
	0x038FF9B0 CBZ W8, 0x38FFA78
	0x038FF9B4 MOV W28, W31
	0x038FF9B8 ADD X29, X22, W28, 0x3, SXTW
	0x038FF9BC LDR X23, [X29 + 0x20]!
	0x038FF9C0 LDR X0, [X26]
	0x038FF9C4 LDR W8, [X0 + 0xE0]
	0x038FF9C8 CBNZ W8, 0x38FF9D0
	0x038FF9CC BL 0x1C16DFC
	0x038FF9D0 CMP W19, W23
	0x038FF9D4 UBFM X8, X23, 0x20, 0x3F
	0x038FF9D8 B.NE 0x38FF9E4
	0x038FF9DC CMP W25, W8
	0x038FF9E0 B.EQ 0x38FFA48
	0x038FF9E4 CMP W25, W23
	0x038FF9E8 B.NE 0x38FF9F4
	0x038FF9EC CMP W19, W8
	0x038FF9F0 B.EQ 0x38FFA48
	0x038FF9F4 LDR W8, [X22 + 0x18]
	0x038FF9F8 CMP W28, W8
	0x038FF9FC B.CS 0x38FFA78
	0x038FFA00 LDR X1, [X29]
	0x038FFA04 MOV X0, X22
	0x038FFA08 BL 0x38FF544
	0x038FFA0C ANDS W31, W0, 0x1
	0x038FFA10 CSEL X20, X21, X20, NE
	0x038FFA14 CMP W27, W28
	0x038FFA18 B.EQ 0x38FFA30

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+48], X24
	004 Move [X31+56], X23
	005 Move [X31+64], X22
	006 Move [X31+72], X21
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 Move X24, 0xAE3000
	010 Move X23, 0x820000
	011 Move W8, [X24+1954]
	012 Move X23, [X23+1208]
	013 Move X19, X3
	014 Move X20, X2
	015 Move X21, X1
	016 Move X22, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x820000
	022 Move X0, [X0+1208]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X24+1954], W8
	026 Move X0, [X23]
	027 Add X1, X31, 16
	028 Move [X31+16], X22
	029 Move [X31+24], X21
	030 Call 0x1C17E04
	031 Move X21, X0
	032 Move X0, [X23]
	033 Add X1, X31, 0
	034 Move [X31], X20
	035 Move [X31+8], X19
	036 Call 0x1C17E04
	037 Move X1, X0
	038 Move X0, X21
	039 Move X2, X31
	040 Call Object.Equals, X0, X1
	041 Move X20, [X31+80]
	042 Move X19, [X31+88]
	043 Move X22, [X31+64]
	044 Move X21, [X31+72]
	045 Move X24, [X31+48]
	046 Move X23, [X31+56]
	047 Move X30, [X31+32]
	048 NotImplemented "Instruction ORN not yet implemented."
	049 And W0, W8, 1
	050 Add X31, X31, 96
	051 Return X0

Method: System.String ToString()

Disassembly:
	0x038FFA1C LDR W8, [X22 + 0x18]
	0x038FFA20 ADD W28, W28, 0x1
	0x038FFA24 CMP W28, W8
	0x038FFA28 B.CC 0x38FF9B8
	0x038FFA2C B 0x38FFA78
	0x038FFA30 LDR X23, [X31 + 0x8]
	0x038FFA34 LDR W8, [X23 + 0x18]
	0x038FFA38 ADD W24, W24, 0x1
	0x038FFA3C CMP W24, W8
	0x038FFA40 B.LT 0x38FF978
	0x038FFA44 B 0x38FFA54
	0x038FFA48 MOV X20, X21
	0x038FFA4C B 0x38FFA54
	0x038FFA50 MOV X20, X31
	0x038FFA54 MOV X0, X20
	0x038FFA58 LDP X20, X19, [X31 + 0x60]
	0x038FFA5C LDP X22, X21, [X31 + 0x50]
	0x038FFA60 LDP X24, X23, [X31 + 0x40]
	0x038FFA64 LDP X26, X25, [X31 + 0x30]
	0x038FFA68 LDP X28, X27, [X31 + 0x20]
	0x038FFA6C LDP X29, X30, [X31 + 0x10]
	0x038FFA70 ADD X31, X31, 0x70
	0x038FFA74 RET
	0x038FFA78 BL 0x1C16F28
	0x038FFA7C BL 0x1C16F20
	0x038FFA80 LDR X8, [X0 + 0x60]
	0x038FFA84 CBZ X8, 0x38FFA90
	0x038FFA88 MOV X0, X8
	0x038FFA8C RET
	0x038FFA90 B 0x38FFEEC
	0x038FFA94 LDR X0, [X0 + 0x10]
	0x038FFA98 B 0x38FF198
	0x038FFA9C LDR W0, [X0 + 0x20]
	0x038FFAA0 RET
	0x038FFAA4 STR X30, [X31 - 0x30]!
	0x038FFAA8 STP X22, X21, [X31 + 0x10]
	0x038FFAAC STP X20, X19, [X31 + 0x20]
	0x038FFAB0 ADRP X21, 0xAE2000
	0x038FFAB4 ADRP X22, 0x7FB000
	0x038FFAB8 ADRP X20, 0x7F4000
	0x038FFABC LDRB W8, [X21 + 0x7AE]
	0x038FFAC0 LDR X22, [X22 + 0xB40]
	0x038FFAC4 LDR X20, [X20 + 0x598]
	0x038FFAC8 MOV X19, X0
	0x038FFACC TBNZ X8, 0x0, 0x38FFAF0
	0x038FFAD0 ADRP X0, 0x7FB000
	0x038FFAD4 LDR X0, [X0 + 0xB40]
	0x038FFAD8 BL 0x1C16CF4
	0x038FFADC ADRP X0, 0x7F4000
	0x038FFAE0 LDR X0, [X0 + 0x598]
	0x038FFAE4 BL 0x1C16CF4
	0x038FFAE8 MOVZ W8, 0x1
	0x038FFAEC STRB W8, [X21 + 0x7AE]
	0x038FFAF0 LDR X1, [X22]
	0x038FFAF4 MOV X0, X19
	0x038FFAF8 BL 0x21A3894
	0x038FFAFC LDR X8, [X20]
	0x038FFB00 MOV X20, X0
	0x038FFB04 LDR W9, [X8 + 0xE0]
	0x038FFB08 CBNZ W9, 0x38FFB14
	0x038FFB0C MOV X0, X8
	0x038FFB10 BL 0x1C16DFC
	0x038FFB14 MOV X0, X20
	0x038FFB18 MOV X1, X31
	0x038FFB1C BL 0x3C38948
	0x038FFB20 TBZ X0, 0x0, 0x38FFB58
	0x038FFB24 LDR W8, [X19 + 0x20]
	0x038FFB28 CMP W8, 0x3
	0x038FFB2C B.EQ 0x38FFB38
	0x038FFB30 CMP W8, 0x2
	0x038FFB34 B.NE 0x38FFB58
	0x038FFB38 CBZ X20, 0x38FFB68
	0x038FFB3C MOV X0, X20
	0x038FFB40 LDP X20, X19, [X31 + 0x20]
	0x038FFB44 LDP X22, X21, [X31 + 0x10]
	0x038FFB48 MOV W1, W31
	0x038FFB4C MOV X2, X31
	0x038FFB50 LDR X30, [X31], #0x30
	0x038FFB54 B 0x3C13034
	0x038FFB58 LDP X20, X19, [X31 + 0x20]
	0x038FFB5C LDP X22, X21, [X31 + 0x10]
	0x038FFB60 LDR X30, [X31], #0x30
	0x038FFB64 RET
	0x038FFB68 BL 0x1C16F20
	0x038FFB6C STR W1, [X0 + 0x20]
	0x038FFB70 RET
	0x038FFB74 MOV X1, X31
	0x038FFB78 B 0x3C36C30
	0x038FFB7C LDRB W0, [X0 + 0x4C]
	0x038FFB80 RET
	0x038FFB84 AND W8, W1, 0x1
	0x038FFB88 STRB W8, [X0 + 0x4C]
	0x038FFB8C RET
	0x038FFB90 LDR W0, [X0 + 0x54]
	0x038FFB94 RET
	0x038FFB98 STR W1, [X0 + 0x54]
	0x038FFB9C RET
	0x038FFBA0 LDR X0, [X0 + 0x10]
	0x038FFBA4 RET
	0x038FFBA8 STP X30, X19, [X31 - 0x10]!
	0x038FFBAC LDR X8, [X0 + 0x10]
	0x038FFBB0 CBZ X8, 0x38FFBE8
	0x038FFBB4 LDR W8, [X8 + 0x18]
	0x038FFBB8 MOVZ W9, 0xAAAB
	0x038FFBBC MOVZ W10, 0xAAAA
	0x038FFBC0 MOVK W9, 0xAAAA0000
	0x038FFBC4 MOVK W10, 0x2AAA0000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X19, 0xAE3000
	008 Move X21, 0x7F5000
	009 Move X22, 0x7F5000
	010 Move W8, [X19+1955]
	011 Move X21, [X21+2512]
	012 Move X22, [X22+1880]
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x7F5000
	019 Move X0, [X0+1880]
	020 Call 0x1C17CF4
	021 Move X0, 0x7F5000
	022 Move X0, [X0+2512]
	023 Call 0x1C17CF4
	024 Move X0, 0x84F000
	025 Move X0, [X0+3224]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X19+1955], W8
	029 Move X0, [X21]
	030 Move W1, 4
	031 Call 0x1C17D6C
	032 Move X19, X0
	033 Move X8, [X20+8]
	034 Move X0, [X22]
	035 Add X1, X31, 28
	036 Move [X31+28], W8
	037 Call 0x1C17E04
	038 Compare X19, 0
	039 JumpIfEqual {121}
	040 Move X21, X0
	041 Compare X0, 0
	042 JumpIfEqual {49}
	043 Move X8, [X19]
	044 Move X0, X21
	045 Move X1, [X8+64]
	046 Call 0x1C17E00
	047 Compare X0, 0
	048 JumpIfEqual {118}
	049 Move W8, [X19+24]
	050 Compare W8, 0
	051 JumpIfEqual {117}
	052 Move [X19+32], X21
	053 Move W8, [X20+12]
	054 Move X0, [X22]
	055 Add X1, X31, 24
	056 Move [X31+24], W8
	057 Call 0x1C17E04
	058 Move X21, X0
	059 Compare X0, 0
	060 JumpIfEqual {67}
	061 Move X8, [X19]
	062 Move X0, X21
	063 Move X1, [X8+64]
	064 Call 0x1C17E00
	065 Compare X0, 0
	066 JumpIfEqual {118}
	067 Move W8, [X19+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move [X19+40], X21
	070 Move X8, [X20]
	071 Move X0, [X22]
	072 Add X1, X31, 12
	073 Move [X31+12], W8
	074 Call 0x1C17E04
	075 Move X21, X0
	076 Compare X0, 0
	077 JumpIfEqual {84}
	078 Move X8, [X19]
	079 Move X0, X21
	080 Move X1, [X8+64]
	081 Call 0x1C17E00
	082 Compare X0, 0
	083 JumpIfEqual {118}
	084 Move W8, [X19+24]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move [X19+48], X21
	087 Move W8, [X20+4]
	088 Move X0, [X22]
	089 Add X1, X31, 8
	090 Move [X31+8], W8
	091 Call 0x1C17E04
	092 Move X20, X0
	093 Compare X0, 0
	094 JumpIfEqual {101}
	095 Move X8, [X19]
	096 Move X0, X20
	097 Move X1, [X8+64]
	098 Call 0x1C17E00
	099 Compare X0, 0
	100 JumpIfEqual {118}
	101 Move W8, [X19+24]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X8, 0x84F000
	104 Move X8, [X8+3224]
	105 Move [X19+56], X20
	106 Move X1, X19
	107 Move X2, X31
	108 Move X0, [X8]
	109 Call String.Format, X0, X1
	110 Move X20, [X31+48]
	111 Move X19, [X31+56]
	112 Move X22, [X31+32]
	113 Move X21, [X31+40]
	114 Move X30, [X31+16]
	115 Add X31, X31, 64
	116 Return X0
	117 Call 0x1C17F28
	118 Call 0x1C17F44
	119 Move X1, X31
	120 Call 0x1C17DEC
	121 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.EdgeLookup> GetEdgeLookup(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Edge> edges, System.Collections.Generic.Dictionary`2<System.Int32, System.Int32> lookup)

Disassembly:
	0x038FFBC8 MADD W8, W8, W9, W10
	0x038FFBCC ORR W9, W31, 0x55555555
	0x038FFBD0 CMP W8, W9
	0x038FFBD4 B.CS 0x38FFC1C
	0x038FFBD8 STR X1, [X0 + 0x10]
	0x038FFBDC STP X31, X31, [X0 + 0x58]
	0x038FFBE0 LDP X30, X19, [X31], #0x10
	0x038FFBE4 RET
	0x038FFBE8 ADRP X0, 0x7F9000
	0x038FFBEC LDR X0, [X0 + 0x528]
	0x038FFBF0 BL 0x1C16D08
	0x038FFBF4 BL 0x1C16F10
	0x038FFBF8 MOV X19, X0
	0x038FFBFC ADRP X0, 0x7FE000
	0x038FFC00 LDR X0, [X0 + 0xEC8]
	0x038FFC04 BL 0x1C16D08
	0x038FFC08 MOV X1, X0
	0x038FFC0C MOV X0, X19
	0x038FFC10 MOV X2, X31
	0x038FFC14 BL 0x330E100
	0x038FFC18 B 0x38FFC4C
	0x038FFC1C ADRP X0, 0x7FC000
	0x038FFC20 LDR X0, [X0 + 0x578]
	0x038FFC24 BL 0x1C16D08
	0x038FFC28 BL 0x1C16F10
	0x038FFC2C MOV X19, X0
	0x038FFC30 ADRP X0, 0x84E000
	0x038FFC34 LDR X0, [X0 + 0xD18]
	0x038FFC38 BL 0x1C16D08
	0x038FFC3C MOV X1, X0
	0x038FFC40 MOV X0, X19
	0x038FFC44 MOV X2, X31
	0x038FFC48 BL 0x3314A68
	0x038FFC4C ADRP X0, 0x84E000
	0x038FFC50 LDR X0, [X0 + 0xD20]
	0x038FFC54 BL 0x1C16D08
	0x038FFC58 MOV X1, X0
	0x038FFC5C MOV X0, X19
	0x038FFC60 BL 0x1C16DEC
	0x038FFC64 STP X31, X31, [X0 + 0x58]
	0x038FFC68 RET
	0x038FFC6C STR X30, [X31 - 0x30]!
	0x038FFC70 STP X22, X21, [X31 + 0x10]
	0x038FFC74 STP X20, X19, [X31 + 0x20]
	0x038FFC78 ADRP X22, 0xAE2000
	0x038FFC7C ADRP X21, 0x84E000
	0x038FFC80 ADRP X20, 0x84E000
	0x038FFC84 LDRB W8, [X22 + 0x7B0]
	0x038FFC88 LDR X21, [X21 + 0xD28]
	0x038FFC8C LDR X20, [X20 + 0xD30]
	0x038FFC90 MOV X19, X0
	0x038FFC94 TBNZ X8, 0x0, 0x38FFCB8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xAE3000
	007 Move X22, 0x84F000
	008 Move W8, [X21+1956]
	009 Move X22, [X22+3232]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x84F000
	017 Move X0, [X0+3240]
	018 Call 0x1C17CF4
	019 Move X0, 0x84F000
	020 Move X0, [X0+3248]
	021 Call 0x1C17CF4
	022 Move X0, 0x84F000
	023 Move X0, [X0+3256]
	024 Call 0x1C17CF4
	025 Move X0, 0x84F000
	026 Move X0, [X0+3232]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+1956], W8
	030 Move X0, [X22]
	031 Call 0x1C17F10
	032 Move X1, X31
	033 Move X21, X0
	034 Call Object..ctor, X0
	035 Compare X21, 0
	036 JumpIfEqual {61}
	037 Move X8, 0x84F000
	038 Move X8, [X8+3248]
	039 Move [X21+16], X20
	040 Move X20, 0x84F000
	041 Move X22, 0x84F000
	042 Move X0, [X8]
	043 Move X20, [X20+3256]
	044 Move X22, [X22+3240]
	045 Call 0x1C17F10
	046 Move X2, [X20]
	047 Move X1, X21
	048 Move X3, X31
	049 Move X20, X0
	050 Call Func`2<Edge, EdgeLookup>..ctor, X0, X1, X2
	051 Move X2, [X22]
	052 Move X0, X19
	053 Move X1, X20
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Call Enumerable.Select, X0, X1
	060 Return X0
	061 Call 0x1C17F20

Method: System.Collections.Generic.HashSet`1<UnityEngine.ProBuilder.EdgeLookup> GetEdgeLookupHashSet(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Edge> edges, System.Collections.Generic.Dictionary`2<System.Int32, System.Int32> lookup)

Disassembly:
	0x038FFCA0 BL 0x1C16CF4
	0x038FFCA4 ADRP X0, 0x84E000
	0x038FFCA8 LDR X0, [X0 + 0xD28]
	0x038FFCAC BL 0x1C16CF4
	0x038FFCB0 MOVZ W8, 0x1
	0x038FFCB4 STRB W8, [X22 + 0x7B0]
	0x038FFCB8 LDR X0, [X21]
	0x038FFCBC LDR X19, [X19 + 0x10]
	0x038FFCC0 BL 0x1C16F10
	0x038FFCC4 LDR X2, [X20]
	0x038FFCC8 MOV X1, X19
	0x038FFCCC MOV X20, X0
	0x038FFCD0 BL 0x253DBA8
	0x038FFCD4 MOV X0, X20
	0x038FFCD8 LDP X20, X19, [X31 + 0x20]
	0x038FFCDC LDP X22, X21, [X31 + 0x10]
	0x038FFCE0 LDR X30, [X31], #0x30
	0x038FFCE4 RET
	0x038FFCE8 STP X30, X21, [X31 - 0x20]!
	0x038FFCEC STP X20, X19, [X31 + 0x10]
	0x038FFCF0 ADRP X21, 0xAE2000
	0x038FFCF4 LDRB W8, [X21 + 0x7B1]
	0x038FFCF8 MOV X20, X1
	0x038FFCFC MOV X19, X0
	0x038FFD00 TBNZ X8, 0x0, 0x38FFD18
	0x038FFD04 ADRP X0, 0x7F6000
	0x038FFD08 LDR X0, [X0 + 0x9C8]
	0x038FFD0C BL 0x1C16CF4
	0x038FFD10 MOVZ W8, 0x1
	0x038FFD14 STRB W8, [X21 + 0x7B1]
	0x038FFD18 CBZ X20, 0x38FFD6C
	0x038FFD1C ADRP X8, 0x7F6000
	0x038FFD20 LDR X8, [X8 + 0x9C8]
	0x038FFD24 MOV X0, X20
	0x038FFD28 LDR X1, [X8]
	0x038FFD2C BL 0x21D54D4
	0x038FFD30 CBZ X0, 0x38FFDA0
	0x038FFD34 LDR W8, [X0 + 0x18]
	0x038FFD38 MOVZ W9, 0xAAAB
	0x038FFD3C MOVZ W10, 0xAAAA
	0x038FFD40 MOVK W9, 0xAAAA0000
	0x038FFD44 MOVK W10, 0x2AAA0000
	0x038FFD48 MADD W8, W8, W9, W10
	0x038FFD4C ORR W9, W31, 0x55555555
	0x038FFD50 CMP W8, W9
	0x038FFD54 B.CS 0x38FFDA4
	0x038FFD58 STR X0, [X19 + 0x10]
	0x038FFD5C STP X31, X31, [X19 + 0x58]
	0x038FFD60 LDP X20, X19, [X31 + 0x10]
	0x038FFD64 LDP X30, X21, [X31], #0x20
	0x038FFD68 RET
	0x038FFD6C ADRP X0, 0x7F9000
	0x038FFD70 LDR X0, [X0 + 0x528]
	0x038FFD74 BL 0x1C16D08
	0x038FFD78 BL 0x1C16F10
	0x038FFD7C MOV X19, X0
	0x038FFD80 ADRP X0, 0x825000
	0x038FFD84 LDR X0, [X0 + 0xE88]
	0x038FFD88 BL 0x1C16D08
	0x038FFD8C MOV X1, X0
	0x038FFD90 MOV X0, X19
	0x038FFD94 MOV X2, X31
	0x038FFD98 BL 0x330E100
	0x038FFD9C B 0x38FFDD4
	0x038FFDA0 BL 0x1C16F20
	0x038FFDA4 ADRP X0, 0x7FC000
	0x038FFDA8 LDR X0, [X0 + 0x578]
	0x038FFDAC BL 0x1C16D08
	0x038FFDB0 BL 0x1C16F10
	0x038FFDB4 MOV X19, X0
	0x038FFDB8 ADRP X0, 0x84E000
	0x038FFDBC LDR X0, [X0 + 0xD18]
	0x038FFDC0 BL 0x1C16D08
	0x038FFDC4 MOV X1, X0
	0x038FFDC8 MOV X0, X19
	0x038FFDCC MOV X2, X31
	0x038FFDD0 BL 0x3314A68
	0x038FFDD4 ADRP X0, 0x84E000
	0x038FFDD8 LDR X0, [X0 + 0xD38]
	0x038FFDDC BL 0x1C16D08
	0x038FFDE0 MOV X1, X0
	0x038FFDE4 MOV X0, X19
	0x038FFDE8 BL 0x1C16DEC
	0x038FFDEC STP X30, X23, [X31 - 0x30]!
	0x038FFDF0 STP X22, X21, [X31 + 0x10]
	0x038FFDF4 STP X20, X19, [X31 + 0x20]
	0x038FFDF8 ADRP X20, 0x81F000
	0x038FFDFC ADRP X21, 0x7F6000
	0x038FFE00 LDR X20, [X20 + 0xBB8]
	0x038FFE04 LDR X21, [X21 + 0x9C8]
	0x038FFE08 MOV X19, X0
	0x038FFE0C ADRP X22, 0xAE2000
	0x038FFE10 MOVZ W23, 0x1
	0x038FFE14 LDRB W8, [X22 + 0x7B7]
	0x038FFE18 TBNZ X8, 0x0, 0x38FFE30
	0x038FFE1C MOV X0, X20
	0x038FFE20 BL 0x1C16CF4
	0x038FFE24 MOV X0, X21
	0x038FFE28 BL 0x1C16CF4
	0x038FFE2C STRB W23, [X22 + 0x7B7]
	0x038FFE30 LDR X0, [X19 + 0x10]
	0x038FFE34 CBZ X0, 0x38FFE50
	0x038FFE38 LDR X1, [X20]
	0x038FFE3C BL 0x21C0304
	0x038FFE40 LDR X1, [X21]
	0x038FFE44 BL 0x21D54D4
	0x038FFE48 STR X0, [X19 + 0x58]
	0x038FFE4C CBZ X0, 0x38FFE14
	0x038FFE50 LDP X20, X19, [X31 + 0x20]
	0x038FFE54 LDP X22, X21, [X31 + 0x10]
	0x038FFE58 LDP X30, X23, [X31], #0x30
	0x038FFE5C RET
	0x038FFE60 STR X30, [X31 - 0x30]!
	0x038FFE64 STP X22, X21, [X31 + 0x10]
	0x038FFE68 STP X20, X19, [X31 + 0x20]
	0x038FFE6C ADRP X20, 0xAE2000
	0x038FFE70 LDRB W8, [X20 + 0x7B2]
	0x038FFE74 MOV X19, X0
	0x038FFE78 TBNZ X8, 0x0, 0x38FFE9C
	0x038FFE7C ADRP X0, 0x84E000
	0x038FFE80 LDR X0, [X0 + 0xD30]
	0x038FFE84 BL 0x1C16CF4
	0x038FFE88 ADRP X0, 0x84E000
	0x038FFE8C LDR X0, [X0 + 0xD28]
	0x038FFE90 BL 0x1C16CF4
	0x038FFE94 MOVZ W8, 0x1
	0x038FFE98 STRB W8, [X20 + 0x7B2]
	0x038FFE9C ADRP X22, 0x84E000
	0x038FFEA0 ADRP X21, 0x84E000
	0x038FFEA4 LDR X20, [X19 + 0x58]
	0x038FFEA8 LDR X22, [X22 + 0xD28]
	0x038FFEAC LDR X21, [X21 + 0xD30]
	0x038FFEB0 CBNZ X20, 0x38FFEC0
	0x038FFEB4 MOV X0, X19
	0x038FFEB8 BL 0x38FFDEC
	0x038FFEBC MOV X20, X0
	0x038FFEC0 LDR X0, [X22]
	0x038FFEC4 BL 0x1C16F10
	0x038FFEC8 LDR X2, [X21]
	0x038FFECC MOV X1, X20
	0x038FFED0 MOV X19, X0
	0x038FFED4 BL 0x253DBA8
	0x038FFED8 MOV X0, X19
	0x038FFEDC LDP X20, X19, [X31 + 0x20]
	0x038FFEE0 LDP X22, X21, [X31 + 0x10]
	0x038FFEE4 LDR X30, [X31], #0x30
	0x038FFEE8 RET
	0x038FFEEC STP X29, X30, [X31 - 0x60]!
	0x038FFEF0 STP X28, X27, [X31 + 0x10]
	0x038FFEF4 STP X26, X25, [X31 + 0x20]
	0x038FFEF8 STP X24, X23, [X31 + 0x30]
	0x038FFEFC STP X22, X21, [X31 + 0x40]
	0x038FFF00 STP X20, X19, [X31 + 0x50]
	0x038FFF04 ADRP X20, 0xAE2000
	0x038FFF08 LDRB W8, [X20 + 0x7B6]
	0x038FFF0C MOV X19, X0
	0x038FFF10 TBNZ X8, 0x0, 0x38FFF88
	0x038FFF14 ADRP X0, 0x81C000
	0x038FFF18 LDR X0, [X0 + 0x600]
	0x038FFF1C BL 0x1C16CF4
	0x038FFF20 ADRP X0, 0x84E000
	0x038FFF24 LDR X0, [X0 + 0xD40]
	0x038FFF28 BL 0x1C16CF4
	0x038FFF2C ADRP X0, 0x84E000
	0x038FFF30 LDR X0, [X0 + 0xD48]
	0x038FFF34 BL 0x1C16CF4
	0x038FFF38 ADRP X0, 0x84E000
	0x038FFF3C LDR X0, [X0 + 0xD50]
	0x038FFF40 BL 0x1C16CF4
	0x038FFF44 ADRP X0, 0x84E000
	0x038FFF48 LDR X0, [X0 + 0xD58]
	0x038FFF4C BL 0x1C16CF4
	0x038FFF50 ADRP X0, 0x84E000
	0x038FFF54 LDR X0, [X0 + 0xD60]
	0x038FFF58 BL 0x1C16CF4
	0x038FFF5C ADRP X0, 0x84E000
	0x038FFF60 LDR X0, [X0 + 0xD68]
	0x038FFF64 BL 0x1C16CF4
	0x038FFF68 ADRP X0, 0x84E000
	0x038FFF6C LDR X0, [X0 + 0xD70]
	0x038FFF70 BL 0x1C16CF4
	0x038FFF74 ADRP X0, 0x84E000
	0x038FFF78 LDR X0, [X0 + 0xD78]
	0x038FFF7C BL 0x1C16CF4
	0x038FFF80 MOVZ W8, 0x1
	0x038FFF84 STRB W8, [X20 + 0x7B6]
	0x038FFF88 LDR X8, [X19 + 0x10]
	0x038FFF8C CBZ X8, 0x3900218
	0x038FFF90 ADRP X8, 0x84E000
	0x038FFF94 LDR X8, [X8 + 0xD60]
	0x038FFF98 ADRP X20, 0x84E000
	0x038FFF9C ADRP X21, 0x84E000
	0x038FFFA0 ADRP X22, 0x84E000
	0x038FFFA4 LDR X0, [X8]
	0x038FFFA8 LDR X20, [X20 + 0xD58]
	0x038FFFAC LDR X21, [X21 + 0xD78]
	0x038FFFB0 LDR X22, [X22 + 0xD70]
	0x038FFFB4 BL 0x1C16F10
	0x038FFFB8 LDR X1, [X20]
	0x038FFFBC MOV X20, X0
	0x038FFFC0 BL 0x2D9B014
	0x038FFFC4 LDR X0, [X21]
	0x038FFFC8 BL 0x1C16F10
	0x038FFFCC LDR X1, [X22]
	0x038FFFD0 MOV X21, X0
	0x038FFFD4 BL 0x2FB9738
	0x038FFFD8 LDR X8, [X19 + 0x10]
	0x038FFFDC CBZ X8, 0x3900238
	0x038FFFE0 ADRP X28, 0x84E000
	0x038FFFE4 ADRP X29, 0x84E000
	0x038FFFE8 LDR X28, [X28 + 0xD48]
	0x038FFFEC LDR X29, [X29 + 0xD68]
	0x038FFFF0 MOV W22, W31
	0x038FFFF4 LDR W10, [X8 + 0x18]
	0x038FFFF8 CMP W22, W10
	0x038FFFFC B.GE 0x39001E0
	0x03900000 CMP W22, W10
	0x03900004 B.CS 0x390023C
	0x03900008 ADD W9, W22, 0x1
	0x0390000C CMP W9, W10
	0x03900010 B.CS 0x390023C
	0x03900014 ADRP X10, 0x81B000
	0x03900018 LDR X10, [X10 + 0x600]
	0x0390001C SXTW X26, W22
	0x03900020 SXTW X23, W9
	0x03900024 ADD X9, X8, X23, 0x2, LSL
	0x03900028 LDR X0, [X10]
	0x0390002C ADD X10, X8, X26, 0x2, LSL
	0x03900030 LDR W24, [X10 + 0x20]
	0x03900034 LDR W27, [X9 + 0x20]
	0x03900038 LDR W10, [X0 + 0xE0]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X19, 0xAE3000
	012 Move W8, [X19+1957]
	013 Move X21, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {45}
	019 Move X0, 0x84F000
	020 Move X0, [X0+3200]
	021 Call 0x1C17CF4
	022 Move X0, 0x84F000
	023 Move X0, [X0+3264]
	024 Call 0x1C17CF4
	025 Move X0, 0x84F000
	026 Move X0, [X0+3272]
	027 Call 0x1C17CF4
	028 Move X0, 0x84F000
	029 Move X0, [X0+3280]
	030 Call 0x1C17CF4
	031 Move X0, 0x7F5000
	032 Move X0, [X0+3584]
	033 Call 0x1C17CF4
	034 Move X0, 0x84F000
	035 Move X0, [X0+3208]
	036 Call 0x1C17CF4
	037 Move X0, 0x84F000
	038 Move X0, [X0+3216]
	039 Call 0x1C17CF4
	040 Move X0, 0x7F5000
	041 Move X0, [X0+3608]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X19+1957], W8
	045 Move X19, X31
	046 Compare X20, 0
	047 JumpIfEqual {187}
	048 Compare X21, 0
	049 JumpIfEqual {187}
	050 Move X8, 0x84F000
	051 Move X8, [X8+3280]
	052 Move X0, [X8]
	053 Call 0x1C17F10
	054 Move X8, 0x84F000
	055 Move X8, [X8+3272]
	056 Move X19, X0
	057 Move X1, [X8]
	058 Call HashSet`1<EdgeLookup>..ctor, X0
	059 Move X10, 0x84F000
	060 Move X8, [X20]
	061 Move X10, [X10+3208]
	062 NotImplemented "Instruction LDRH not yet implemented."
	063 Move X1, [X10]
	064 Compare X9, 0
	065 JumpIfEqual {72}
	066 Move X10, [X8+176]
	067 Add X10, X10, 8
	068 NotImplemented "Instruction LDUR not yet implemented."
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Subtract X9, X9, 1
	071 Add X10, X10, 16
	072 Move X0, X20
	073 Move W2, W31
	074 Call 0x1C5D788
	075 NotImplemented "Instruction LDRSW not yet implemented."
	076 Add X8, X8, X9
	077 Add X0, X8, 312
	078 Move X8, [X0]
	079 Move X1, [X0+8]
	080 Move X0, X20
	081 NotImplemented "Instruction BLR not yet implemented."
	082 Move X20, X0
	083 Compare X0, 0
	084 JumpIfEqual {200}
	085 Move X24, 0x7F5000
	086 Move X25, 0x84F000
	087 Move X26, 0x84F000
	088 Move X27, 0x84F000
	089 Move X24, [X24+3608]
	090 Move X25, [X25+3216]
	091 Move X26, [X26+3200]
	092 Move X27, [X27+3264]
	093 Move X8, [X20]
	094 Move X1, [X24]
	095 NotImplemented "Instruction LDRH not yet implemented."
	096 Compare X9, 0
	097 JumpIfEqual {104}
	098 Move X10, [X8+176]
	099 Add X10, X10, 8
	100 NotImplemented "Instruction LDUR not yet implemented."
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Subtract X9, X9, 1
	103 Add X10, X10, 16
	104 Move X0, X20
	105 Move W2, W31
	106 Call 0x1C5D788
	107 NotImplemented "Instruction LDRSW not yet implemented."
	108 Add X8, X8, X9
	109 Add X0, X8, 312
	110 Move X8, [X0]
	111 Move X1, [X0+8]
	112 Move X0, X20
	113 NotImplemented "Instruction BLR not yet implemented."
	114 Move TEMP, X0
	115 And TEMP, TEMP, 1
	116 Compare TEMP, 1
	117 JumpIfNotEqual {159}
	118 Move X8, [X20]
	119 Move X1, [X25]
	120 NotImplemented "Instruction LDRH not yet implemented."
	121 Compare X9, 0
	122 JumpIfEqual {129}
	123 Move X10, [X8+176]
	124 Add X10, X10, 8
	125 NotImplemented "Instruction LDUR not yet implemented."
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Subtract X9, X9, 1
	128 Add X10, X10, 16
	129 Move X0, X20
	130 Move W2, W31
	131 Call 0x1C5D788
	132 NotImplemented "Instruction LDRSW not yet implemented."
	133 Add X8, X8, X9
	134 Add X0, X8, 312
	135 Move X8, [X0]
	136 Move X1, [X0+8]
	137 Move X0, X20
	138 NotImplemented "Instruction BLR not yet implemented."
	139 Move X2, [X26]
	140 Move X22, X0
	141 Move X0, X21
	142 Move W1, W22
	143 Call Dictionary`2<Int32, Int32>.get_Item, X0, X1
	144 Move X2, [X26]
	145 Move W23, W0
	146 Move X1, X22
	147 ShiftRight X1, 32
	148 And X1, X1, 0x7FFFFFFF
	149 Move X0, X21
	150 Call Dictionary`2<Int32, Int32>.get_Item, X0, X1
	151 Compare X19, 0
	152 JumpIfEqual {199}
	153 Move X3, [X27]
	154 Move W2, W23
	155 NotImplemented "Instruction BFM not yet implemented."
	156 Move X0, X19
	157 Move X1, X22
	158 Call HashSet`1<EdgeLookup>.Add, X0, X1
	159 Move X21, X31
	160 Compare X20, 0
	161 JumpIfEqual {185}
	162 Move X10, 0x7F5000
	163 Move X8, [X20]
	164 Move X10, [X10+3584]
	165 NotImplemented "Instruction LDRH not yet implemented."
	166 Move X1, [X10]
	167 Compare X9, 0
	168 JumpIfEqual {175}
	169 Move X10, [X8+176]
	170 Add X10, X10, 8
	171 NotImplemented "Instruction LDUR not yet implemented."
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Subtract X9, X9, 1
	174 Add X10, X10, 16
	175 Move X0, X20
	176 Move W2, W31
	177 Call 0x1C5D788
	178 NotImplemented "Instruction LDRSW not yet implemented."
	179 Add X8, X8, X9
	180 Add X0, X8, 312
	181 Move X8, [X0]
	182 Move X1, [X0+8]
	183 Move X0, X20
	184 NotImplemented "Instruction BLR not yet implemented."
	185 Compare X21, 0
	186 JumpIfNotEqual {201}
	187 Move X0, X19
	188 Move X20, [X31+64]
	189 Move X19, [X31+72]
	190 Move X22, [X31+48]
	191 Move X21, [X31+56]
	192 Move X24, [X31+32]
	193 Move X23, [X31+40]
	194 Move X26, [X31+16]
	195 Move X25, [X31+24]
	196 Move X30, [X31+80]
	197 Move X27, [X31+88]
	198 Return X0
	199 Call 0x1C17F20
	200 Call 0x1C17F20
	201 Move X0, X21
	202 Call 0x1C17F18
	203 Move X22, X0
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move X0, X22
	206 Call 0x3EB2AD0
	207 Move X21, [X0]
	208 Call 0x3EB2AE0
	209 Move X21, X31
	210 Move X22, X0
	211 Compare X20, 0
	212 JumpIfEqual {236}
	213 Move X10, 0x7F5000
	214 Move X8, [X20]
	215 Move X10, [X10+3584]
	216 NotImplemented "Instruction LDRH not yet implemented."
	217 Move X1, [X10]
	218 Compare X9, 0
	219 JumpIfEqual {226}
	220 Move X10, [X8+176]
	221 Add X10, X10, 8
	222 NotImplemented "Instruction LDUR not yet implemented."
	223 NotImplemented "Instruction CMP not yet implemented."
	224 Subtract X9, X9, 1
	225 Add X10, X10, 16
	226 Move X0, X20
	227 Move W2, W31
	228 Call 0x1C5D788
	229 NotImplemented "Instruction LDRSW not yet implemented."
	230 Add X8, X8, X9
	231 Add X0, X8, 312
	232 Move X8, [X0]
	233 Move X1, [X0+8]
	234 Move X0, X20
	235 NotImplemented "Instruction BLR not yet implemented."
	236 Compare X21, 0
	237 JumpIfNotEqual {240}
	238 Move X0, X22
	239 Call 0x1D2D690
	240 Move X0, X21
	241 Call 0x1C17F18
	242 Call 0x1991590

