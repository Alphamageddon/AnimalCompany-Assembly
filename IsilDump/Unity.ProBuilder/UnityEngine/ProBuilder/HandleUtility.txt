Type: UnityEngine.ProBuilder.HandleUtility

Method: UnityEngine.Vector3 ScreenToGuiPoint(UnityEngine.Camera camera, UnityEngine.Vector3 point, System.Single pixelsPerPoint)

Disassembly:
	0x039032E0 CBZ X8, 0x39035B8
	0x039032E4 LDR W9, [X8 + 0x18]
	0x039032E8 CMP X24, X9
	0x039032EC B.CS 0x39035B4
	0x039032F0 ADD X8, X8, X24, 0x3, LSL
	0x039032F4 LDR X8, [X8 + 0x20]
	0x039032F8 CBZ X8, 0x39035B8
	0x039032FC LDR X19, [X8 + 0x10]
	0x03903300 CBZ X19, 0x39035B8
	0x03903304 LDR W8, [X19 + 0x18]
	0x03903308 CMP W8, 0x1
	0x0390330C B.LT 0x390355C
	0x03903310 MOVZ W28, 0x1
	0x03903314 SUB W11, W28, 0x1
	0x03903318 CMP W11, W8
	0x0390331C B.CS 0x39035B4
	0x03903320 CBZ X27, 0x39035B8
	0x03903324 ADD X9, X19, W11, 0x2, SXTW
	0x03903328 LDRSW X9, [X9 + 0x20]
	0x0390332C LDR W10, [X27 + 0x18]

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Compare X0, 0
	007 JumpIfEqual {25}
	008 Move X1, X31
	009 Move V9, V3
	010 Move V8, V2
	011 Move V10, V1
	012 Move V11, V0
	013 Call Camera.get_pixelHeight, X0
	014 NotImplemented "Instruction SCVTF not yet implemented."
	015 Subtract S1, S1, S10
	016 NotImplemented "Instruction FDIV not yet implemented."
	017 NotImplemented "Instruction FDIV not yet implemented."
	018 Move V2, V8
	019 Move X30, [X31+32]
	020 Move D9, [X31+16]
	021 Move D8, [X31+24]
	022 Move D11, [X31+48]
	023 Move D10, [X31+56]
	024 Return X0
	025 Call 0x1C17F20

Method: System.Boolean FaceRaycast(UnityEngine.Ray worldRay, UnityEngine.ProBuilder.ProBuilderMesh mesh, out UnityEngine.ProBuilder.RaycastHit hit, System.Collections.Generic.HashSet`1<UnityEngine.ProBuilder.Face> ignore = null)

Disassembly:
	0x03903330 CMP W9, W10
	0x03903334 B.CS 0x39035B4
	0x03903338 ADD W12, W11, 0x1
	0x0390333C CMP W12, W8
	0x03903340 B.CS 0x39035B4
	0x03903344 ADD X11, X19, W28, 0x2, SXTW
	0x03903348 LDRSW X11, [X11 + 0x20]
	0x0390334C CMP W11, W10
	0x03903350 B.CS 0x39035B4
	0x03903354 ADD W29, W12, 0x1
	0x03903358 CMP W29, W8
	0x0390335C B.CS 0x39035B4
	0x03903360 ADD W8, W28, 0x1
	0x03903364 ADD X8, X19, W8, 0x2, SXTW
	0x03903368 LDRSW X8, [X8 + 0x20]
	0x0390336C CMP W8, W10

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X0+16]
	004 Move V0, [X0]
	005 Move X4, X3
	006 Add X0, X31, 0
	007 Move [X31+16], X8
	008 Move W8, 0x7F800000
	009 Move [X31], V0
	010 Move W3, 1
	011 Move S0, W8
	012 Call HandleUtility.FaceRaycast, X0, X1, X2, V0, X3, X4
	013 Move X30, [X31+32]
	014 And W0, W0, 1
	015 Add X31, X31, 48
	016 Return X0

Method: System.Boolean FaceRaycast(UnityEngine.Ray worldRay, UnityEngine.ProBuilder.ProBuilderMesh mesh, out UnityEngine.ProBuilder.RaycastHit hit, System.Single distance, UnityEngine.ProBuilder.CullingMode cullingMode, System.Collections.Generic.HashSet`1<UnityEngine.ProBuilder.Face> ignore = null)

Disassembly:
	0x03903370 B.CS 0x39035B4
	0x03903374 MADD X9, X9, X22, X27
	0x03903378 MADD X10, X11, X22, X27
	0x0390337C MADD X8, X8, X22, X27
	0x03903380 LDP S10, S9, [X9 + 0x20]
	0x03903384 LDR V8, [X9 + 0x28]
	0x03903388 LDP S13, S12, [X10 + 0x20]
	0x0390338C LDR V11, [X10 + 0x28]
	0x03903390 LDP S14, S15, [X8 + 0x20]
	0x03903394 LDR V1, [X8 + 0x28]
	0x03903398 STR W31, [X31 + 0x11C]
	0x0390339C LDR V0, [X23]
	0x039033A0 LDR X8, [X23 + 0x10]
	0x039033A4 STR S1, [X31 + 0x2C]
	0x039033A8 STP S15, S1, [X31 + 0x4]
	0x039033AC STR V0, [X31 + 0x3]
	0x039033B0 ADD X0, X31, 0x30
	0x039033B4 ADD X1, X31, 0x11C
	0x039033B8 ADD X2, X31, 0x110
	0x039033BC MOV V0.16B, V10.16B
	0x039033C0 MOV V1.16B, V9.16B
	0x039033C4 MOV V2.16B, V8.16B
	0x039033C8 MOV V3.16B, V13.16B
	0x039033CC MOV V4.16B, V12.16B
	0x039033D0 MOV V5.16B, V11.16B
	0x039033D4 STR X8, [X31 + 0x40]
	0x039033D8 STR S14, [X31]
	0x039033DC BL 0x39028A0
	0x039033E0 TBZ X0, 0x0, 0x3903548
	0x039033E4 LDR V5, [X31 + 0x2C]
	0x039033E8 FSUB S0, S13, S10
	0x039033EC FSUB S1, S12, S9
	0x039033F0 FSUB S2, S11, S8
	0x039033F4 FSUB S3, S14, S10
	0x039033F8 FSUB S4, S15, S9
	0x039033FC FSUB S5, S5, S8
	0x03903400 FMUL S6, S1, S5
	0x03903404 FMUL S7, S2, S4
	0x03903408 FMUL S2, S2, S3
	0x0390340C FMUL S5, S0, S5
	0x03903410 FMUL S0, S0, S4
	0x03903414 FMUL S1, S1, S3
	0x03903418 CMP W21, 0x1
	0x0390341C FSUB S10, S6, S7
	0x03903420 FSUB S9, S2, S5
	0x03903424 FSUB S8, S0, S1
	0x03903428 B.EQ 0x3903464
	0x0390342C CMP W21, 0x3
	0x03903430 B.EQ 0x3903488
	0x03903434 CMP W21, 0x2
	0x03903438 B.NE 0x3903548
	0x0390343C LDP S0, S1, [X23 + 0xC]
	0x03903440 LDR V2, [X23 + 0x14]
	0x03903444 FMUL S0, S10, S0
	0x03903448 FMUL S1, S9, S1
	0x0390344C FADD S0, S0, S1
	0x03903450 FMUL S1, S8, S2
	0x03903454 FADD S0, S1, S0
	0x03903458 FCMP S0, 0x0
	0x0390345C B.GT 0x3903488
	0x03903460 B 0x3903548
	0x03903464 LDP S0, S1, [X23 + 0xC]
	0x03903468 LDR V2, [X23 + 0x14]
	0x0390346C FMUL S0, S10, S0
	0x03903470 FMUL S1, S9, S1
	0x03903474 FADD S0, S0, S1
	0x03903478 FMUL S1, S8, S2
	0x0390347C FADD S0, S1, S0
	0x03903480 FCMP S0, 0x0
	0x03903484 B.PL 0x3903548
	0x03903488 LDR V11, [X31 + 0x11C]
	0x0390348C LDR X25, [X20]
	0x03903490 MOV X0, X23
	0x03903494 MOV X1, X31
	0x03903498 MOV V0.16B, V11.16B
	0x0390349C BL 0x3C0B1B4
	0x039034A0 ADRP X8, 0x84A000
	0x039034A4 LDR X8, [X8 + 0xE30]
	0x039034A8 MOV V12.16B, V0.16B
	0x039034AC MOV V13.16B, V1.16B
	0x039034B0 MOV V14.16B, V2.16B
	0x039034B4 LDR X0, [X8]
	0x039034B8 BL 0x1C16F10
	0x039034BC MOV V0.16B, V11.16B
	0x039034C0 MOV V1.16B, V12.16B
	0x039034C4 MOV V2.16B, V13.16B
	0x039034C8 MOV V3.16B, V14.16B
	0x039034CC MOV V4.16B, V10.16B
	0x039034D0 MOV V5.16B, V9.16B
	0x039034D4 MOV V6.16B, V8.16B
	0x039034D8 MOV W1, W24
	0x039034DC MOV X2, X31
	0x039034E0 MOV X26, X0
	0x039034E4 BL 0x3921E90
	0x039034E8 CBZ X25, 0x39035B8
	0x039034EC ADRP X9, 0x84A000
	0x039034F0 LDR W10, [X25 + 0x1C]
	0x039034F4 LDR X8, [X25 + 0x10]
	0x039034F8 LDR X9, [X9 + 0xE50]
	0x039034FC ADD W10, W10, 0x1
	0x03903500 LDR X9, [X9]
	0x03903504 STR W10, [X25 + 0x1C]
	0x03903508 CBZ X8, 0x39035B8
	0x0390350C LDRSW X10, [X25 + 0x18]
	0x03903510 LDR W11, [X8 + 0x18]
	0x03903514 CMP W10, W11
	0x03903518 B.CS 0x3903530
	0x0390351C ADD W9, W10, 0x1
	0x03903520 ADD X8, X8, X10, 0x3, LSL
	0x03903524 STR W9, [X25 + 0x18]
	0x03903528 STR X26, [X8 + 0x20]
	0x0390352C B 0x3903548
	0x03903530 LDR X8, [X9 + 0x20]
	0x03903534 MOV X0, X25
	0x03903538 MOV X1, X26
	0x0390353C LDR X8, [X8 + 0xC0]
	0x03903540 LDR X2, [X8 + 0x70]
	0x03903544 BL 0x301BF90
	0x03903548 LDR W8, [X19 + 0x18]
	0x0390354C ADD W9, W29, 0x1
	0x03903550 ADD W28, W28, 0x3
	0x03903554 CMP W9, W8
	0x03903558 B.LT 0x3903314
	0x0390355C LDR X8, [X31 + 0x18]
	0x03903560 ADD X24, X24, 0x1
	0x03903564 LDR X8, [X8 + 0x28]
	0x03903568 CBNZ X8, 0x390329C
	0x0390356C B 0x39035B8
	0x03903570 LDR X8, [X20]
	0x03903574 CBZ X8, 0x39035B8
	0x03903578 LDR W8, [X8 + 0x18]
	0x0390357C LDP X20, X19, [X31 + 0x1B0]
	0x03903580 LDP X22, X21, [X31 + 0x1A0]
	0x03903584 LDP X24, X23, [X31 + 0x190]
	0x03903588 LDP X26, X25, [X31 + 0x180]
	0x0390358C LDP X28, X27, [X31 + 0x170]
	0x03903590 LDP X29, X30, [X31 + 0x160]
	0x03903594 LDP D9, D8, [X31 + 0x150]
	0x03903598 LDP D11, D10, [X31 + 0x140]
	0x0390359C LDP D13, D12, [X31 + 0x130]
	0x039035A0 LDP D15, D14, [X31 + 0x120]
	0x039035A4 CMP W8, 0x0
	0x039035A8 CSET W0, GT
	0x039035AC ADD X31, X31, 0x1C0
	0x039035B0 RET
	0x039035B4 BL 0x1C16F28
	0x039035B8 BL 0x1C16F20
	0x039035BC SUB X31, X31, 0x120
	0x039035C0 STP D13, D12, [X31 + 0xC0]
	0x039035C4 STP D11, D10, [X31 + 0xD0]
	0x039035C8 STP D9, D8, [X31 + 0xE0]
	0x039035CC STR X29, [X31 + 0xF0]
	0x039035D0 STP X30, X21, [X31 + 0x100]
	0x039035D4 STP X20, X19, [X31 + 0x110]
	0x039035D8 MOVI V0.2D, 0x0
	0x039035DC STP V0, V0, [X31 + 0xA0]
	0x039035E0 STP V0, V0, [X31 + 0x80]
	0x039035E4 CBZ X0, 0x3903778
	0x039035E8 LDP S9, S10, [X1 + 0x4]
	0x039035EC LDR V8, [X1]
	0x039035F0 MOV X20, X1
	0x039035F4 MOV X1, X31
	0x039035F8 MOV X21, X0
	0x039035FC MOV X19, X8
	0x03903600 BL 0x3C3F58C
	0x03903604 ADD X8, X31, 0x40
	0x03903608 MOV X0, X21
	0x0390360C MOV X1, X31
	0x03903610 FSUB S8, S8, S0
	0x03903614 FSUB S9, S9, S1
	0x03903618 FSUB S10, S10, S2
	0x0390361C BL 0x3C3FF0C
	0x03903620 LDP V0, V1, [X31 + 0x40]
	0x03903624 LDP V2, V3, [X31 + 0x60]
	0x03903628 ADD X0, X31, 0x0
	0x0390362C MOV X1, X31
	0x03903630 STP V0, V1, [X31]
	0x03903634 STP V2, V3, [X31 + 0x20]
	0x03903638 FMOV S3, W31
	0x0390363C MOV V0.16B, V8.16B
	0x03903640 MOV V1.16B, V9.16B
	0x03903644 MOV V2.16B, V10.16B
	0x03903648 BL 0x3C2806C
	0x0390364C ADD X8, X31, 0x40
	0x03903650 MOV X0, X21
	0x03903654 MOV X1, X31
	0x03903658 MOV V11.16B, V0.16B
	0x0390365C MOV V12.16B, V1.16B
	0x03903660 MOV V13.16B, V2.16B
	0x03903664 BL 0x3C3FF0C
	0x03903668 LDP V0, V1, [X31 + 0x40]
	0x0390366C LDP V2, V3, [X31 + 0x60]
	0x03903670 ADD X0, X31, 0x80
	0x03903674 MOV X1, X31
	0x03903678 STP V0, V1, [X31 + 0x80]
	0x0390367C STP V2, V3, [X31 + 0xA0]
	0x03903680 LDP S0, S1, [X20 + 0xC]
	0x03903684 LDR V2, [X20 + 0x14]
	0x03903688 BL 0x3C282D0
	0x0390368C ADRP X20, 0xAD5000
	0x03903690 LDRB W8, [X20 + 0x785]
	0x03903694 MOV V8.16B, V0.16B
	0x03903698 MOV V9.16B, V1.16B
	0x0390369C MOV V10.16B, V2.16B
	0x039036A0 STR W31, [X19 + 0x14]
	0x039036A4 STUR X31, [X19 + 0xC]
	0x039036A8 STP S11, S12, [X19]
	0x039036AC STR S13, [X19 + 0x8]
	0x039036B0 CBNZ W8, 0x39036C8
	0x039036B4 ADRP X0, 0x7F0000
	0x039036B8 LDR X0, [X0 + 0x5A8]
	0x039036BC BL 0x1C16CF4
	0x039036C0 MOVZ W8, 0x1
	0x039036C4 STRB W8, [X20 + 0x785]
	0x039036C8 ADRP X8, 0x7F0000
	0x039036CC LDR X8, [X8 + 0x5A8]
	0x039036D0 LDR X0, [X8]
	0x039036D4 LDR W8, [X0 + 0xE0]
	0x039036D8 CBNZ W8, 0x39036E0
	0x039036DC BL 0x1C16DFC
	0x039036E0 FMUL S0, S8, S8
	0x039036E4 FMUL S1, S9, S9
	0x039036E8 ADRP X8, 0xFFFFFFFFFD1E7000
	0x039036EC FADD S0, S0, S1
	0x039036F0 LDR V1, [X8 + 0x17C]
	0x039036F4 FMUL S2, S10, S10
	0x039036F8 FADD S0, S2, S0
	0x039036FC FSQRT S2, S0
	0x03903700 FCMP S2, S1
	0x03903704 B.LE 0x3903718
	0x03903708 FDIV S0, S8, S2
	0x0390370C FDIV S1, S9, S2
	0x03903710 FDIV S2, S10, S2
	0x03903714 B 0x3903750
	0x03903718 ADRP X20, 0xAD5000
	0x0390371C LDRB W8, [X20 + 0x783]
	0x03903720 CBNZ W8, 0x3903738
	0x03903724 ADRP X0, 0x7F0000
	0x03903728 LDR X0, [X0 + 0x5A0]
	0x0390372C BL 0x1C16CF4
	0x03903730 MOVZ W8, 0x1
	0x03903734 STRB W8, [X20 + 0x783]
	0x03903738 ADRP X8, 0x7F0000
	0x0390373C LDR X8, [X8 + 0x5A0]
	0x03903740 LDR X8, [X8]
	0x03903744 LDR X8, [X8 + 0xB8]
	0x03903748 LDP S0, S1, [X8]
	0x0390374C LDR V2, [X8 + 0x8]
	0x03903750 STP S0, S1, [X19 + 0xC]
	0x03903754 STR S2, [X19 + 0x14]
	0x03903758 LDP X20, X19, [X31 + 0x110]
	0x0390375C LDP X30, X21, [X31 + 0x100]
	0x03903760 LDR X29, [X31 + 0xF0]
	0x03903764 LDP D9, D8, [X31 + 0xE0]
	0x03903768 LDP D11, D10, [X31 + 0xD0]
	0x0390376C LDP D13, D12, [X31 + 0xC0]
	0x03903770 ADD X31, X31, 0x120
	0x03903774 RET
	0x03903778 BL 0x1C16F20
	0x0390377C SUB X31, X31, 0x90
	0x03903780 STR D8, [X31 + 0x50]
	0x03903784 STR X30, [X31 + 0x58]
	0x03903788 STP X24, X23, [X31 + 0x60]
	0x0390378C STP X22, X21, [X31 + 0x70]
	0x03903790 STP X20, X19, [X31 + 0x80]
	0x03903794 ADRP X22, 0xADE000
	0x03903798 LDRB W8, [X22 + 0x7C8]
	0x0390379C MOV V8.16B, V0.16B
	0x039037A0 MOV X19, X2
	0x039037A4 MOV X21, X1
	0x039037A8 MOV X20, X0
	0x039037AC TBNZ X8, 0x0, 0x39037D0
	0x039037B0 ADRP X0, 0x7F2000
	0x039037B4 LDR X0, [X0 + 0x168]
	0x039037B8 BL 0x1C16CF4
	0x039037BC ADRP X0, 0x7F0000
	0x039037C0 LDR X0, [X0 + 0x598]
	0x039037C4 BL 0x1C16CF4
	0x039037C8 MOVZ W8, 0x1
	0x039037CC STRB W8, [X22 + 0x7C8]
	0x039037D0 CBZ X21, 0x39038F0
	0x039037D4 ADRP X8, 0x7F2000
	0x039037D8 LDR X8, [X8 + 0x168]
	0x039037DC ADRP X24, 0x7F0000
	0x039037E0 MOV X0, X21
	0x039037E4 LDR X1, [X8]
	0x039037E8 LDR X24, [X24 + 0x598]
	0x039037EC BL 0x21E52E4
	0x039037F0 LDR X8, [X24]
	0x039037F4 MOV X23, X0
	0x039037F8 LDR W9, [X8 + 0xE0]
	0x039037FC CBNZ W9, 0x3903808
	0x03903800 MOV X0, X8
	0x03903804 BL 0x1C16DFC
	0x03903808 MOV X0, X23
	0x0390380C MOV X1, X31
	0x03903810 MOV X2, X31
	0x03903814 BL 0x3C354F8
	0x03903818 MOV X22, X31
	0x0390381C TBZ X0, 0x0, 0x3903834
	0x03903820 CBZ X23, 0x39038F0
	0x03903824 MOV X0, X23
	0x03903828 MOV X1, X31
	0x0390382C BL 0x3C16D04
	0x03903830 MOV X22, X0
	0x03903834 LDR X0, [X24]
	0x03903838 LDR W8, [X0 + 0xE0]
	0x0390383C CBNZ W8, 0x3903844
	0x03903840 BL 0x1C16DFC
	0x03903844 MOV X0, X22
	0x03903848 MOV X1, X31
	0x0390384C BL 0x3C38948
	0x03903850 TBZ X0, 0x0, 0x39038C8
	0x03903854 MOV X0, X21
	0x03903858 MOV X1, X31
	0x0390385C BL 0x3C356F8
	0x03903860 LDR X8, [X20 + 0x10]
	0x03903864 LDR V0, [X20]
	0x03903868 ADD X1, X31, 0x20
	0x0390386C STR X8, [X31 + 0x30]
	0x03903870 ADD X8, X31, 0x38
	0x03903874 STR V0, [X31 + 0x2]
	0x03903878 BL 0x39035BC
	0x0390387C CBZ X22, 0x39038F0
	0x03903880 MOV X0, X22
	0x03903884 MOV X1, X31
	0x03903888 BL 0x3C17EBC
	0x0390388C MOV X20, X0
	0x03903890 MOV X0, X22
	0x03903894 MOV X1, X31
	0x03903898 BL 0x3C18F3C
	0x0390389C LDUR V0, [X31 + 0x38]

ISIL:
	001 Subtract X31, X31, 448
	002 Move [X31+288], D15
	003 Move [X31+296], D14
	004 Move [X31+304], D13
	005 Move [X31+312], D12
	006 Move [X31+320], D11
	007 Move [X31+328], D10
	008 Move [X31+336], D9
	009 Move [X31+344], D8
	010 Move [X31+352], X29
	011 Move [X31+360], X30
	012 Move [X31+368], X28
	013 Move [X31+376], X27
	014 Move [X31+384], X26
	015 Move [X31+392], X25
	016 Move [X31+400], X24
	017 Move [X31+408], X23
	018 Move [X31+416], X22
	019 Move [X31+424], X21
	020 Move [X31+432], X20
	021 Move [X31+440], X19
	022 Move X19, 0xADF000
	023 Move W8, [X19+1989]
	024 Move X21, X4
	025 Move W22, W3
	026 Move V8, V0
	027 Move X23, X2
	028 Move X29, X1
	029 Move X20, X0
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {42}
	034 Move X0, 0x84B000
	035 Move X0, [X0+3624]
	036 Call 0x1C17CF4
	037 Move X0, 0x84B000
	038 Move X0, [X0+3632]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X19+1989], W8
	042 Move [X31+272], X31
	043 Move [X31+280], X31
	044 Compare X29, 0
	045 JumpIfEqual {379}
	046 Move V9, [X20]
	047 Move V10, [X20+8]
	048 Move X0, X29
	049 Move X1, X31
	050 Call Component.get_transform, X0
	051 Compare X0, 0
	052 JumpIfEqual {379}
	053 Move X1, X31
	054 Call Transform.get_position, X0
	055 Subtract S2, S10, S2
	056 Move V0.S[1], V1.S[0]
	057 Subtract V0, V9, V0
	058 Move X0, X29
	059 Move X1, X31
	060 Move [X20], D0
	061 Move [X20+8], S2
	062 Call Component.get_transform, X0
	063 Compare X0, 0
	064 JumpIfEqual {379}
	065 Add X8, X31, 208
	066 Move X1, X31
	067 Call Transform.get_worldToLocalMatrix, X0
	068 Move V0, [X31+208]
	069 Move V1, [X31+224]
	070 Move V2, [X31+240]
	071 Move V3, [X31+256]
	072 Add X0, X31, 144
	073 Move X1, X31
	074 Move [X31+144], V0
	075 Move [X31+152], V1
	076 Move [X31+176], V2
	077 Move [X31+184], V3
	078 Move S0, [X20]
	079 Move S1, [X20+4]
	080 Move V2, [X20+8]
	081 Move S3, W31
	082 Call Matrix4x4.op_Multiply, X0, X1
	083 Move X0, X29
	084 Move X1, X31
	085 Move [X20], S0
	086 Move [X20+8], S1
	087 Move [X20+8], S2
	088 Call Component.get_transform, X0
	089 Compare X0, 0
	090 JumpIfEqual {379}
	091 Add X8, X31, 208
	092 Move X1, X31
	093 Call Transform.get_worldToLocalMatrix, X0
	094 Move V0, [X31+208]
	095 Move V1, [X31+224]
	096 Move V2, [X31+240]
	097 Move V3, [X31+256]
	098 Add X0, X31, 80
	099 Move X1, X31
	100 Move [X31+80], V0
	101 Move [X31+88], V1
	102 Move [X31+112], V2
	103 Move [X31+120], V3
	104 Move S0, [X20+12]
	105 Move S1, [X20+16]
	106 Move V2, [X20+20]
	107 Move S3, W31
	108 Call Matrix4x4.op_Multiply, X0, X1
	109 Move X19, 0xAD6000
	110 Move W8, [X19+1925]
	111 Move V9, V0
	112 Move V10, V1
	113 Move V11, V2
	114 Compare W8, 0
	115 JumpIfNotEqual {121}
	116 Move X0, 0x7F1000
	117 Move X0, [X0+1448]
	118 Call 0x1C17CF4
	119 Move W8, 1
	120 Move [X19+1925], W8
	121 Move X8, 0x7F1000
	122 Move X8, [X8+1448]
	123 Move X0, [X8]
	124 Move W8, [X0+224]
	125 Compare W8, 0
	126 JumpIfNotEqual {128}
	127 Call 0x1C17DFC
	128 Multiply S0, S9, S9
	129 Multiply S1, S10, S10
	130 Move X8, -48332800
	131 Add S0, S0, S1
	132 Move V1, [X8+380]
	133 Move X19, 0x7F1000
	134 Multiply S2, S11, S11
	135 Move X19, [X19+1440]
	136 Add S0, S2, S0
	137 NotImplemented "Instruction FSQRT not yet implemented."
	138 NotImplemented "Instruction FCMP not yet implemented."
	139 Move X8, 0xAD6000
	140 Move W8, [X8+1923]
	141 NotImplemented "Instruction FDIV not yet implemented."
	142 NotImplemented "Instruction FDIV not yet implemented."
	143 NotImplemented "Instruction FDIV not yet implemented."
	144 NotImplemented "Instruction CMP not yet implemented."
	145 NotImplemented "Instruction CSET not yet implemented."
	146 Move X24, X21
	147 Move X21, 0xAD6000
	148 Move W8, [X21+1923]
	149 Compare W8, 0
	150 JumpIfNotEqual {156}
	151 Move X0, 0x7F1000
	152 Move X0, [X0+1440]
	153 Call 0x1C17CF4
	154 Move W8, 1
	155 Move [X21+1923], W8
	156 Move X8, [X19]
	157 Move X21, X24
	158 Move X8, [X8+184]
	159 Move S0, [X8]
	160 Move S1, [X8+4]
	161 Move V2, [X8+8]
	162 Move W8, W31
	163 Move [X20+12], S0
	164 Move [X20+20], S1
	165 Move [X20+20], S2
	166 Move X25, [X29+88]
	167 Move X26, [X29+40]
	168 Compare W8, 0
	169 JumpIfEqual {176}
	170 Move X0, 0x7F1000
	171 Move X0, [X0+1440]
	172 Call 0x1C17CF4
	173 Move X8, 0xAD6000
	174 Move W9, 1
	175 Move [X8+1923], W9
	176 Compare X26, 0
	177 JumpIfEqual {379}
	178 Move X8, [X19]
	179 Move [X31+24], X23
	180 Move X9, [X8+184]
	181 Move X8, [X26+24]
	182 Move S10, [X9+4]
	183 Move S9, [X9+8]
	184 Move V11, [X9]
	185 NotImplemented "Instruction CMP not yet implemented."
	186 And X8, X8, 0
	187 Move [X31+32], X26
	188 Move [X31+40], X8
	189 Move W8, 0x7F800000
	190 Move X27, X31
	191 Move TEMP, 0
	192 Not TEMP
	193 Move W24, TEMP
	194 Move S12, W8
	195 Move W19, 12
	196 Compare X21, 0
	197 JumpIfEqual {211}
	198 Move W8, [X26+24]
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Add X8, X26, X27
	201 Move X1, [X8+32]
	202 Move X8, 0x84B000
	203 Move X8, [X8+3624]
	204 Move X0, X21
	205 Move X2, [X8]
	206 Call HashSet`1<Object>.Contains, X0, X1
	207 Move TEMP, X0
	208 And TEMP, TEMP, 1
	209 Compare TEMP, 1
	210 JumpIfEqual {320}
	211 Move X8, [X29+40]
	212 Compare X8, 0
	213 JumpIfEqual {379}
	214 Move W9, [X8+24]
	215 NotImplemented "Instruction CMP not yet implemented."
	216 Add X8, X8, X27
	217 Move X8, [X8+32]
	218 Compare X8, 0
	219 JumpIfEqual {379}
	220 Move X28, [X8+16]
	221 Compare X28, 0
	222 JumpIfEqual {379}
	223 Move X23, [X28+24]
	224 NotImplemented "Instruction CMP not yet implemented."
	225 Compare W23, 0
	226 JumpIfEqual {378}
	227 Move X26, X29
	228 Move X29, X21
	229 Move W8, W23
	230 Move W21, 1
	231 Compare X25, 0
	232 JumpIfEqual {379}
	233 Subtract W9, W21, 1
	234 Add X9, X28, W9
	235 NotImplemented "Instruction LDRSW not yet implemented."
	236 Move W10, [X25+24]
	237 NotImplemented "Instruction CMP not yet implemented."
	238 NotImplemented "Instruction CMP not yet implemented."
	239 Add X11, X28, W21
	240 NotImplemented "Instruction LDRSW not yet implemented."
	241 NotImplemented "Instruction CMP not yet implemented."
	242 Add W12, W21, 1
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Add X8, X28, W12
	245 NotImplemented "Instruction LDRSW not yet implemented."
	246 NotImplemented "Instruction CMP not yet implemented."
	247 NotImplemented "Instruction MADD not yet implemented."
	248 NotImplemented "Instruction MADD not yet implemented."
	249 NotImplemented "Instruction MADD not yet implemented."
	250 Move S0, [X9+32]
	251 Move S1, [X9+36]
	252 Move V2, [X9+40]
	253 Move S3, [X10+32]
	254 Move S4, [X10+36]
	255 Move V5, [X10+40]
	256 Move S6, [X8+32]
	257 Move S7, [X8+36]
	258 Move V16, [X8+40]
	259 Subtract S17, S3, S0
	260 Subtract S18, S4, S1
	261 Subtract S19, S5, S2
	262 Subtract S20, S6, S0
	263 Subtract S21, S7, S1
	264 Subtract S22, S16, S2
	265 Multiply S23, S18, S22
	266 Multiply S24, S19, S21
	267 Multiply S19, S19, S20
	268 Multiply S22, S17, S22
	269 Multiply S17, S17, S21
	270 Multiply S18, S18, S20
	271 Move S20, [X20+12]
	272 Move S21, [X20+16]
	273 Subtract S13, S23, S24
	274 Move V23, [X20+20]
	275 Subtract S14, S19, S22
	276 Subtract S15, S17, S18
	277 Multiply S17, S20, S13
	278 Multiply S18, S21, S14
	279 Multiply S19, S15, S23
	280 Add S17, S17, S18
	281 NotImplemented "Instruction CMP not yet implemented."
	282 Add S17, S19, S17
	283 NotImplemented "Instruction CMP not yet implemented."
	284 NotImplemented "Instruction FCMP not yet implemented."
	285 Move [X31+284], W31
	286 NotImplemented "Instruction FCMP not yet implemented."
	287 Move [X31+284], W31
	288 Move [X31+284], W31
	289 Move X8, [X20+16]
	290 Move V17, [X20]
	291 Add X0, X31, 48
	292 Add X1, X31, 284
	293 Add X2, X31, 272
	294 Move [X31+64], X8
	295 Move [X31+3], V17
	296 Move [X31+4], S7
	297 Move [X31+12], S16
	298 Move [X31], S6
	299 Call Math.RayIntersectsTriangle, X0, X1, X2, X3, X4, X5
	300 Move V0, [X31+284]
	301 NotImplemented "Instruction FCMP not yet implemented."
	302 NotImplemented "Instruction FCMP not yet implemented."
	303 Move TEMP, X0
	304 And TEMP, TEMP, 1
	305 Compare TEMP, 1
	306 JumpIfNotEqual {312}
	307 Move V9, V15
	308 Move V10, V14
	309 Move V11, V13
	310 Move W24, W27
	311 Move V12, V0
	312 Add W9, W21, 2
	313 NotImplemented "Instruction CMP not yet implemented."
	314 Move W8, [X28+24]
	315 Add W21, W21, 3
	316 NotImplemented "Instruction CMP not yet implemented."
	317 Move X21, X29
	318 Move X29, X26
	319 Move X26, [X31+32]
	320 Move X8, [X31+40]
	321 Add X27, X27, 1
	322 NotImplemented "Instruction CMP not yet implemented."
	323 Move W8, 0x7F800000
	324 Move TEMP, 0
	325 Not TEMP
	326 Move W24, TEMP
	327 Move S12, W8
	328 Move X19, 0x84B000
	329 Move X19, [X19+3632]
	330 Move X0, X20
	331 Move V0, V12
	332 Move X1, X31
	333 Call Ray.GetPoint, X0, V0
	334 Move X0, [X19]
	335 Move V8, V0
	336 Move V13, V1
	337 Move V14, V2
	338 Call 0x1C17F10
	339 Move V0, V12
	340 Move V1, V8
	341 Move V2, V13
	342 Move V3, V14
	343 Move V4, V11
	344 Move V5, V10
	345 Move V6, V9
	346 Move W1, W24
	347 Move X2, X31
	348 Move X20, X0
	349 Call RaycastHit..ctor, X0, V0, X1, X2, X3
	350 NotImplemented "Instruction ORN not yet implemented."
	351 Move W0, W8
	352 ShiftRight W0, 31
	353 And W0, W0, 0x7FFFFFFF
	354 Move X8, [X31+24]
	355 Move X22, [X31+416]
	356 Move X21, [X31+424]
	357 Move X24, [X31+400]
	358 Move X23, [X31+408]
	359 Move X26, [X31+384]
	360 Move X25, [X31+392]
	361 Move [X8], X20
	362 Move X20, [X31+432]
	363 Move X19, [X31+440]
	364 Move X28, [X31+368]
	365 Move X27, [X31+376]
	366 Move X29, [X31+352]
	367 Move X30, [X31+360]
	368 Move D9, [X31+336]
	369 Move D8, [X31+344]
	370 Move D11, [X31+320]
	371 Move D10, [X31+328]
	372 Move D13, [X31+304]
	373 Move D12, [X31+312]
	374 Move D15, [X31+288]
	375 Move D14, [X31+296]
	376 Add X31, X31, 448
	377 Return X0
	378 Call 0x1C17F28
	379 Call 0x1C17F20

Method: System.Boolean FaceRaycastBothCullModes(UnityEngine.Ray worldRay, UnityEngine.ProBuilder.ProBuilderMesh mesh, ref UnityEngine.ProBuilder.SimpleTuple`2<UnityEngine.ProBuilder.Face, UnityEngine.Vector3> back, ref UnityEngine.ProBuilder.SimpleTuple`2<UnityEngine.ProBuilder.Face, UnityEngine.Vector3> front)

Disassembly:
	0x03903B40 LDP X22, X21, [X31 + 0xB0]
	0x03903B44 LDP X24, X23, [X31 + 0xA0]
	0x03903B48 LDP X26, X25, [X31 + 0x90]
	0x03903B4C LDR X30, [X31 + 0x80]
	0x03903B50 LDP D9, D8, [X31 + 0x70]
	0x03903B54 LDP D11, D10, [X31 + 0x60]
	0x03903B58 LDP D13, D12, [X31 + 0x50]
	0x03903B5C LDP D15, D14, [X31 + 0x40]
	0x03903B60 UBFM W0, W8, 0x1F, 0x1F
	0x03903B64 ADD X31, X31, 0xD0
	0x03903B68 RET
	0x03903B6C BL 0x1C16F28
	0x03903B70 BL 0x1C16F20
	0x03903B74 SUB X31, X31, 0x90
	0x03903B78 STP D15, D14, [X31 + 0x20]
	0x03903B7C STP D13, D12, [X31 + 0x30]
	0x03903B80 STP D11, D10, [X31 + 0x40]
	0x03903B84 STP D9, D8, [X31 + 0x50]
	0x03903B88 STP X30, X23, [X31 + 0x60]
	0x03903B8C STP X22, X21, [X31 + 0x70]
	0x03903B90 STP X20, X19, [X31 + 0x80]
	0x03903B94 ADRP X22, 0xADE000
	0x03903B98 ADRP X23, 0x84A000
	0x03903B9C ADRP X21, 0x7F7000
	0x03903BA0 LDP S8, S6, [X31 + 0xB4]
	0x03903BA4 LDR V9, [X31 + 0xB0]
	0x03903BA8 LDP S10, S13, [X31 + 0xA4]
	0x03903BAC LDR V12, [X31 + 0xA0]
	0x03903BB0 LDP S15, S14, [X31 + 0x94]
	0x03903BB4 LDRB W8, [X22 + 0x7F8]
	0x03903BB8 LDR V11, [X31 + 0x90]
	0x03903BBC LDR X23, [X23 + 0xE70]
	0x03903BC0 LDR X21, [X21 + 0x4B8]
	0x03903BC4 MOV X19, X1
	0x03903BC8 MOV X20, X0
	0x03903BCC TBNZ X8, 0x0, 0x3903C10
	0x03903BD0 ADRP X0, 0x84A000
	0x03903BD4 LDR X0, [X0 + 0xE70]
	0x03903BD8 STP S4, S5, [X31 + 0x18]
	0x03903BDC STP S2, S3, [X31 + 0x10]
	0x03903BE0 STP S0, S1, [X31 + 0x8]
	0x03903BE4 STR S6, [X31 + 0x4]
	0x03903BE8 BL 0x1C16CF4
	0x03903BEC ADRP X0, 0x7F7000
	0x03903BF0 LDR X0, [X0 + 0x4B8]
	0x03903BF4 BL 0x1C16CF4
	0x03903BF8 LDP S6, S0, [X31 + 0x4]
	0x03903BFC LDP S1, S2, [X31 + 0xC]
	0x03903C00 LDP S3, S4, [X31 + 0x14]
	0x03903C04 LDR V5, [X31 + 0x1C]
	0x03903C08 MOVZ W8, 0x1
	0x03903C0C STRB W8, [X22 + 0x7F8]
	0x03903C10 LDR X8, [X23]
	0x03903C14 FSUB S27, S9, S11
	0x03903C18 FSUB S26, S8, S15
	0x03903C1C FSUB S25, S6, S14
	0x03903C20 LDR X8, [X8 + 0xB8]
	0x03903C24 FMUL S6, S4, S25
	0x03903C28 FMUL S7, S5, S26
	0x03903C2C FMUL S16, S5, S27
	0x03903C30 FMUL S17, S3, S25
	0x03903C34 FMUL S18, S3, S26
	0x03903C38 FMUL S21, S4, S27
	0x03903C3C FSUB S24, S12, S11
	0x03903C40 FSUB S23, S10, S15
	0x03903C44 FSUB S22, S13, S14
	0x03903C48 FSUB S20, S6, S7
	0x03903C4C FSUB S19, S16, S17
	0x03903C50 FSUB S7, S18, S21
	0x03903C54 STP S24, S23, [X8]
	0x03903C58 STP S22, S27, [X8 + 0x8]
	0x03903C5C STP S26, S25, [X8 + 0x10]
	0x03903C60 STP S20, S19, [X8 + 0x24]
	0x03903C64 STR S7, [X8 + 0x2C]
	0x03903C68 LDR X9, [X21]
	0x03903C6C FMUL S6, S24, S20
	0x03903C70 FMUL S16, S23, S19
	0x03903C74 FADD S6, S6, S16
	0x03903C78 LDR X9, [X9 + 0xB8]
	0x03903C7C FMUL S16, S22, S7
	0x03903C80 FADD S6, S16, S6
	0x03903C84 MOV W0, W31
	0x03903C88 LDR V17, [X9]
	0x03903C8C FCMP S6, S17
	0x03903C90 B.MI 0x3903D88
	0x03903C94 FSUB S16, S0, S11
	0x03903C98 FSUB S17, S1, S15
	0x03903C9C FSUB S18, S2, S14
	0x03903CA0 FMUL S20, S16, S20
	0x03903CA4 FMUL S19, S17, S19
	0x03903CA8 FADD S19, S20, S19
	0x03903CAC FMUL S7, S18, S7
	0x03903CB0 FADD S7, S7, S19
	0x03903CB4 FCMP S7, 0x0
	0x03903CB8 STP S16, S17, [X8 + 0x18]
	0x03903CBC STR S18, [X8 + 0x20]
	0x03903CC0 B.MI 0x3903D88
	0x03903CC4 FCMP S7, S6
	0x03903CC8 B.GT 0x3903D88
	0x03903CCC FMUL S19, S17, S22
	0x03903CD0 FMUL S20, S18, S23
	0x03903CD4 FMUL S18, S18, S24
	0x03903CD8 FMUL S21, S16, S22
	0x03903CDC FMUL S16, S16, S23
	0x03903CE0 FMUL S17, S17, S24
	0x03903CE4 FSUB S19, S19, S20
	0x03903CE8 FSUB S18, S18, S21
	0x03903CEC FSUB S20, S16, S17
	0x03903CF0 FMUL S16, S3, S19
	0x03903CF4 FMUL S17, S4, S18
	0x03903CF8 FADD S16, S17, S16
	0x03903CFC FMUL S17, S5, S20
	0x03903D00 FADD S16, S17, S16
	0x03903D04 MOV W0, W31
	0x03903D08 FCMP S16, 0x0
	0x03903D0C STP S19, S18, [X8 + 0x24]
	0x03903D10 STR S20, [X8 + 0x2C]
	0x03903D14 B.MI 0x3903D88
	0x03903D18 FADD S7, S7, S16
	0x03903D1C FCMP S7, S6
	0x03903D20 B.GT 0x3903D88
	0x03903D24 FMUL S0, S19, S27
	0x03903D28 FMUL S1, S18, S26
	0x03903D2C FMUL S2, S20, S25
	0x03903D30 FMOV S3, 1
	0x03903D34 FADD S0, S0, S1
	0x03903D38 FDIV S1, S3, S6
	0x03903D3C FADD S0, S2, S0
	0x03903D40 FMUL S0, S1, S0
	0x03903D44 STR S0, [X20]
	0x03903D48 LDP S0, S3, [X8 + 0x4]
	0x03903D4C LDP S1, S2, [X8 + 0x10]
	0x03903D50 LDR V4, [X8 + 0xC]
	0x03903D54 LDR V5, [X8]
	0x03903D58 MOVZ W0, 0x1
	0x03903D5C FMUL S6, S0, S2
	0x03903D60 FMUL S7, S3, S1
	0x03903D64 FMUL S3, S3, S4
	0x03903D68 FMUL S2, S5, S2
	0x03903D6C FMUL S1, S5, S1
	0x03903D70 FMUL S0, S0, S4
	0x03903D74 FSUB S4, S6, S7
	0x03903D78 FSUB S2, S3, S2
	0x03903D7C FSUB S0, S1, S0
	0x03903D80 STP S4, S2, [X19]
	0x03903D84 STR S0, [X19 + 0x8]
	0x03903D88 LDP X20, X19, [X31 + 0x80]
	0x03903D8C LDP X22, X21, [X31 + 0x70]
	0x03903D90 LDP X30, X23, [X31 + 0x60]
	0x03903D94 LDP D9, D8, [X31 + 0x50]
	0x03903D98 LDP D11, D10, [X31 + 0x40]
	0x03903D9C LDP D13, D12, [X31 + 0x30]
	0x03903DA0 LDP D15, D14, [X31 + 0x20]
	0x03903DA4 ADD X31, X31, 0x90
	0x03903DA8 RET
	0x03903DAC SUB X31, X31, 0xB0
	0x03903DB0 STP D15, D14, [X31 + 0x40]
	0x03903DB4 STP D13, D12, [X31 + 0x50]
	0x03903DB8 STP D11, D10, [X31 + 0x60]
	0x03903DBC STP D9, D8, [X31 + 0x70]
	0x03903DC0 STP X30, X23, [X31 + 0x80]
	0x03903DC4 STP X22, X21, [X31 + 0x90]
	0x03903DC8 STP X20, X19, [X31 + 0xA0]
	0x03903DCC STR X31, [X31 + 0x38]
	0x03903DD0 CBZ X0, 0x3904060
	0x03903DD4 MOV X19, X1
	0x03903DD8 MOV X1, X31
	0x03903DDC MOV V14.16B, V2.16B
	0x03903DE0 MOV V15.16B, V1.16B
	0x03903DE4 MOV V8.16B, V0.16B
	0x03903DE8 MOV X20, X0
	0x03903DEC BL 0x3C32E90
	0x03903DF0 CBZ X0, 0x3904060
	0x03903DF4 MOV X1, X31
	0x03903DF8 BL 0x3C3F58C
	0x03903DFC ADRP X22, 0xAD5000
	0x03903E00 LDRB W8, [X22 + 0x785]
	0x03903E04 MOV V11.16B, V0.16B
	0x03903E08 MOV V12.16B, V1.16B
	0x03903E0C MOV V13.16B, V2.16B
	0x03903E10 CBNZ W8, 0x3903E28
	0x03903E14 ADRP X0, 0x7F0000
	0x03903E18 LDR X0, [X0 + 0x5A8]
	0x03903E1C BL 0x1C16CF4
	0x03903E20 MOVZ W8, 0x1
	0x03903E24 STRB W8, [X22 + 0x785]
	0x03903E28 ADRP X21, 0x7F0000
	0x03903E2C LDR X21, [X21 + 0x5A8]
	0x03903E30 STR S8, [X31 + 0x14]
	0x03903E34 FSUB S11, S11, S8
	0x03903E38 FSUB S10, S12, S15
	0x03903E3C LDR X0, [X21]
	0x03903E40 FSUB S8, S13, S14
	0x03903E44 LDR W8, [X0 + 0xE0]
	0x03903E48 CBNZ W8, 0x3903E50
	0x03903E4C BL 0x1C16DFC
	0x03903E50 ADRP X8, 0xFFFFFFFFFD1E7000
	0x03903E54 FMUL S0, S11, S11
	0x03903E58 FMUL S1, S10, S10
	0x03903E5C LDR V9, [X8 + 0x17C]
	0x03903E60 FADD S0, S0, S1
	0x03903E64 FMUL S1, S8, S8
	0x03903E68 FADD S0, S1, S0
	0x03903E6C FSQRT S0, S0
	0x03903E70 FCMP S0, S9
	0x03903E74 STP S15, S14, [X31 + 0x18]
	0x03903E78 B.LE 0x3903E8C
	0x03903E7C FDIV S11, S11, S0
	0x03903E80 FDIV S10, S10, S0
	0x03903E84 FDIV S8, S8, S0
	0x03903E88 B 0x3903EC4
	0x03903E8C ADRP X23, 0xAD5000
	0x03903E90 LDRB W8, [X23 + 0x783]
	0x03903E94 CBNZ W8, 0x3903EAC
	0x03903E98 ADRP X0, 0x7F0000
	0x03903E9C LDR X0, [X0 + 0x5A0]
	0x03903EA0 BL 0x1C16CF4
	0x03903EA4 MOVZ W8, 0x1
	0x03903EA8 STRB W8, [X23 + 0x783]
	0x03903EAC ADRP X8, 0x7F0000
	0x03903EB0 LDR X8, [X8 + 0x5A0]
	0x03903EB4 LDR X8, [X8]
	0x03903EB8 LDR X8, [X8 + 0xB8]
	0x03903EBC LDP S11, S10, [X8]
	0x03903EC0 LDR V8, [X8 + 0x8]
	0x03903EC4 LDRB W8, [X22 + 0x785]
	0x03903EC8 CBNZ W8, 0x3903EE0
	0x03903ECC ADRP X0, 0x7F0000
	0x03903ED0 LDR X0, [X0 + 0x5A8]
	0x03903ED4 BL 0x1C16CF4
	0x03903ED8 MOVZ W8, 0x1
	0x03903EDC STRB W8, [X22 + 0x785]
	0x03903EE0 LDR X0, [X21]
	0x03903EE4 LDR W8, [X0 + 0xE0]
	0x03903EE8 CBNZ W8, 0x3903EF0
	0x03903EEC BL 0x1C16DFC
	0x03903EF0 FMUL S0, S11, S11
	0x03903EF4 FMUL S1, S10, S10
	0x03903EF8 FADD S0, S0, S1
	0x03903EFC FMUL S1, S8, S8
	0x03903F00 FADD S0, S1, S0
	0x03903F04 FSQRT S0, S0
	0x03903F08 FCMP S0, S9
	0x03903F0C B.LE 0x3903F20
	0x03903F10 FDIV S9, S11, S0
	0x03903F14 FDIV S12, S10, S0
	0x03903F18 FDIV S13, S8, S0
	0x03903F1C B 0x3903F58
	0x03903F20 ADRP X22, 0xAD5000
	0x03903F24 LDRB W8, [X22 + 0x783]
	0x03903F28 CBNZ W8, 0x3903F40
	0x03903F2C ADRP X0, 0x7F0000
	0x03903F30 LDR X0, [X0 + 0x5A0]
	0x03903F34 BL 0x1C16CF4
	0x03903F38 MOVZ W8, 0x1
	0x03903F3C STRB W8, [X22 + 0x783]
	0x03903F40 ADRP X8, 0x7F0000
	0x03903F44 LDR X8, [X8 + 0x5A0]
	0x03903F48 LDR X8, [X8]
	0x03903F4C LDR X8, [X8 + 0xB8]
	0x03903F50 LDP S9, S12, [X8]
	0x03903F54 LDR V13, [X8 + 0x8]
	0x03903F58 MOV X0, X20
	0x03903F5C MOV X1, X31
	0x03903F60 BL 0x3C32E90
	0x03903F64 CBZ X0, 0x3904060
	0x03903F68 MOV X1, X31
	0x03903F6C STP S13, S12, [X31]
	0x03903F70 STP S9, S10, [X31 + 0x8]
	0x03903F74 STR S11, [X31 + 0x10]
	0x03903F78 BL 0x3C3F58C
	0x03903F7C ADRP X20, 0xAD5000
	0x03903F80 LDRB W8, [X20 + 0x85C]
	0x03903F84 MOV V11.16B, V0.16B
	0x03903F88 MOV V12.16B, V1.16B
	0x03903F8C MOV V13.16B, V2.16B
	0x03903F90 CBNZ W8, 0x3903FA8
	0x03903F94 ADRP X0, 0x7F0000
	0x03903F98 LDR X0, [X0 + 0x5A8]
	0x03903F9C BL 0x1C16CF4
	0x03903FA0 MOVZ W8, 0x1
	0x03903FA4 STRB W8, [X20 + 0x85C]
	0x03903FA8 LDR X0, [X21]
	0x03903FAC LDP S15, S14, [X31 + 0x14]
	0x03903FB0 LDR V9, [X31 + 0x1C]
	0x03903FB4 LDR W8, [X0 + 0xE0]
	0x03903FB8 FSUB S10, S11, S15
	0x03903FBC FSUB S12, S12, S14
	0x03903FC0 FSUB S11, S13, S9
	0x03903FC4 CBNZ W8, 0x3903FCC
	0x03903FC8 BL 0x1C16DFC
	0x03903FCC ADRP X8, 0xFFFFFFFFFD1E6000
	0x03903FD0 FMUL S0, S10, S10
	0x03903FD4 FMUL S1, S12, S12
	0x03903FD8 FMUL S2, S11, S11
	0x03903FDC LDR V3, [X8 + 0xF28]
	0x03903FE0 FADD S0, S0, S1
	0x03903FE4 FADD S0, S2, S0
	0x03903FE8 LDP S2, S4, [X31 + 0xC]
	0x03903FEC FMUL S1, S8, S3
	0x03903FF0 FSQRT S0, S0
	0x03903FF4 ADD X0, X31, 0x20
	0x03903FF8 FMUL S2, S2, S3
	0x03903FFC FMUL S3, S4, S3
	0x03904000 FADD S4, S9, S1
	0x03904004 LDR V1, [X31 + 0x8]
	0x03904008 FADD S2, S14, S2
	0x0390400C FADD S3, S15, S3
	0x03904010 ADD X2, X31, 0x38
	0x03904014 STP S4, S1, [X31 + 0x28]
	0x03904018 LDR V4, [X31 + 0x4]
	0x0390401C LDR V1, [X31]
	0x03904020 MOVZ W3, 0x2
	0x03904024 MOV X1, X19
	0x03904028 MOV X4, X31
	0x0390402C STP S3, S2, [X31 + 0x20]
	0x03904030 STP S4, S1, [X31 + 0x30]
	0x03904034 BL 0x3902370

ISIL:
	001 Subtract X31, X31, 448
	002 Move [X31+288], D15
	003 Move [X31+296], D14
	004 Move [X31+304], D13
	005 Move [X31+312], D12
	006 Move [X31+320], D11
	007 Move [X31+328], D10
	008 Move [X31+336], D9
	009 Move [X31+344], D8
	010 Move [X31+352], X29
	011 Move [X31+360], X30
	012 Move [X31+368], X28
	013 Move [X31+376], X27
	014 Move [X31+384], X26
	015 Move [X31+392], X25
	016 Move [X31+400], X24
	017 Move [X31+408], X23
	018 Move [X31+416], X22
	019 Move [X31+424], X21
	020 Move [X31+432], X20
	021 Move [X31+440], X19
	022 Move X19, 0xADF000
	023 Move W8, [X19+1990]
	024 Move X22, X3
	025 Move X25, X2
	026 Move X21, X0
	027 Move [X31+24], X1
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {43}
	032 Move X0, 0x84B000
	033 Move X0, [X0+3640]
	034 Call 0x1C17CF4
	035 Move X0, 0x84B000
	036 Move X0, [X0+3648]
	037 Call 0x1C17CF4
	038 Move X0, 0x84B000
	039 Move X0, [X0+3656]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X19+1990], W8
	043 Move X19, [X31+24]
	044 Move [X31+272], X31
	045 Move [X31+280], X31
	046 Compare X19, 0
	047 JumpIfEqual {303}
	048 Move V8, [X21]
	049 Move V9, [X21+8]
	050 Move X0, X19
	051 Move X1, X31
	052 Call Component.get_transform, X0
	053 Compare X0, 0
	054 JumpIfEqual {303}
	055 Move X1, X31
	056 Call Transform.get_position, X0
	057 Subtract S2, S9, S2
	058 Move V0.S[1], V1.S[0]
	059 Subtract V0, V8, V0
	060 Move X0, X19
	061 Move X1, X31
	062 Move [X21], D0
	063 Move [X21+8], S2
	064 Call Component.get_transform, X0
	065 Compare X0, 0
	066 JumpIfEqual {303}
	067 Add X8, X31, 208
	068 Move X1, X31
	069 Call Transform.get_worldToLocalMatrix, X0
	070 Move V0, [X31+208]
	071 Move V1, [X31+224]
	072 Move V2, [X31+240]
	073 Move V3, [X31+256]
	074 Add X0, X31, 144
	075 Move X1, X31
	076 Move [X31+144], V0
	077 Move [X31+152], V1
	078 Move [X31+176], V2
	079 Move [X31+184], V3
	080 Move S0, [X21]
	081 Move S1, [X21+4]
	082 Move V2, [X21+8]
	083 Move S3, W31
	084 Call Matrix4x4.op_Multiply, X0, X1
	085 Move X0, X19
	086 Move X1, X31
	087 Move [X21], S0
	088 Move [X21+8], S1
	089 Move [X21+8], S2
	090 Call Component.get_transform, X0
	091 Compare X0, 0
	092 JumpIfEqual {303}
	093 Add X8, X31, 208
	094 Move X1, X31
	095 Call Transform.get_worldToLocalMatrix, X0
	096 Move V0, [X31+208]
	097 Move V1, [X31+224]
	098 Move V2, [X31+240]
	099 Move V3, [X31+256]
	100 Add X0, X31, 80
	101 Move X1, X31
	102 Move [X31+80], V0
	103 Move [X31+88], V1
	104 Move [X31+112], V2
	105 Move [X31+120], V3
	106 Move S0, [X21+12]
	107 Move S1, [X21+16]
	108 Move V2, [X21+20]
	109 Move S3, W31
	110 Call Matrix4x4.op_Multiply, X0, X1
	111 Move X19, 0xAD6000
	112 Move W8, [X19+1925]
	113 Move V8, V0
	114 Move V9, V1
	115 Move V10, V2
	116 Compare W8, 0
	117 JumpIfNotEqual {123}
	118 Move X0, 0x7F1000
	119 Move X0, [X0+1448]
	120 Call 0x1C17CF4
	121 Move W8, 1
	122 Move [X19+1925], W8
	123 Move X8, 0x7F1000
	124 Move X8, [X8+1448]
	125 Move X0, [X8]
	126 Move W8, [X0+224]
	127 Compare W8, 0
	128 JumpIfNotEqual {130}
	129 Call 0x1C17DFC
	130 Multiply S0, S8, S8
	131 Multiply S1, S9, S9
	132 Move X8, -48332800
	133 Add S0, S0, S1
	134 Move V1, [X8+380]
	135 Multiply S2, S10, S10
	136 Add S0, S2, S0
	137 NotImplemented "Instruction FSQRT not yet implemented."
	138 NotImplemented "Instruction FCMP not yet implemented."
	139 NotImplemented "Instruction FDIV not yet implemented."
	140 NotImplemented "Instruction FDIV not yet implemented."
	141 NotImplemented "Instruction FDIV not yet implemented."
	142 Move X19, 0xAD6000
	143 Move W8, [X19+1923]
	144 Compare W8, 0
	145 JumpIfNotEqual {151}
	146 Move X0, 0x7F1000
	147 Move X0, [X0+1440]
	148 Call 0x1C17CF4
	149 Move W8, 1
	150 Move [X19+1923], W8
	151 Move X8, 0x7F1000
	152 Move X8, [X8+1440]
	153 Move X8, [X8]
	154 Move X8, [X8+184]
	155 Move S0, [X8]
	156 Move S1, [X8+4]
	157 Move V2, [X8+8]
	158 Move X11, [X31+24]
	159 Move [X21+12], S0
	160 Move [X21+20], S1
	161 Move [X21+20], S2
	162 Move X23, [X11+40]
	163 Move X24, [X11+88]
	164 Move [X25], X31
	165 Move [X22], X31
	166 Compare X23, 0
	167 JumpIfEqual {303}
	168 Move W8, [X23+24]
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Move [X31+32], W8
	171 Move W9, 0x7F800000
	172 Move X20, X22
	173 Move W8, W31
	174 Move S0, W9
	175 Move W26, 12
	176 Move X9, X23
	177 Move [X31+36], S0
	178 Move [X31+44], S0
	179 Move W10, [X9+24]
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move X27, W8
	182 Add X8, X9, X27
	183 Move X8, [X8+32]
	184 Compare X8, 0
	185 JumpIfEqual {303}
	186 Move X28, [X8+16]
	187 Compare X28, 0
	188 JumpIfEqual {303}
	189 Move X29, [X28+24]
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Compare W29, 0
	192 JumpIfEqual {358}
	193 Add X9, X23, X27
	194 Move W8, W29
	195 Add X22, X9, 32
	196 Move W19, 1
	197 Compare X24, 0
	198 JumpIfEqual {303}
	199 Subtract W9, W19, 1
	200 Add X9, X28, W9
	201 NotImplemented "Instruction LDRSW not yet implemented."
	202 Move W10, [X24+24]
	203 NotImplemented "Instruction CMP not yet implemented."
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Add X11, X28, W19
	206 NotImplemented "Instruction LDRSW not yet implemented."
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Add W12, W19, 1
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Add X8, X28, W12
	211 NotImplemented "Instruction LDRSW not yet implemented."
	212 NotImplemented "Instruction CMP not yet implemented."
	213 NotImplemented "Instruction MADD not yet implemented."
	214 NotImplemented "Instruction MADD not yet implemented."
	215 NotImplemented "Instruction MADD not yet implemented."
	216 Move V0, [X21]
	217 Move S12, [X9+32]
	218 Move S11, [X9+36]
	219 Move V10, [X9+40]
	220 Move S15, [X10+32]
	221 Move S14, [X10+36]
	222 Move V13, [X10+40]
	223 Move S8, [X8+32]
	224 Move S9, [X8+36]
	225 Move V1, [X8+40]
	226 Move X9, [X21+16]
	227 Move [X31+3], V0
	228 Add X0, X31, 48
	229 Move [X31+44], S1
	230 Move [X31+4], S9
	231 Move [X31+12], S1
	232 Add X1, X31, 284
	233 Add X2, X31, 272
	234 Move V0, V12
	235 Move V1, V11
	236 Move V2, V10
	237 Move V3, V15
	238 Move V4, V14
	239 Move V5, V13
	240 Move [X31+64], X9
	241 Move [X31], S8
	242 Call Math.RayIntersectsTriangle, X0, X1, X2, X3, X4, X5
	243 Move TEMP, X0
	244 And TEMP, TEMP, 1
	245 Compare TEMP, 1
	246 JumpIfNotEqual {252}
	247 Move V0, [X31+284]
	248 Move V1, [X31+40]
	249 NotImplemented "Instruction FCMP not yet implemented."
	250 Move V1, [X31+36]
	251 NotImplemented "Instruction FCMP not yet implemented."
	252 Add W9, W19, 2
	253 NotImplemented "Instruction CMP not yet implemented."
	254 Move W8, [X28+24]
	255 Add W19, W19, 3
	256 NotImplemented "Instruction CMP not yet implemented."
	257 Move V6, [X31+44]
	258 Subtract S1, S15, S12
	259 Subtract S2, S14, S11
	260 Subtract S3, S13, S10
	261 Subtract S4, S8, S12
	262 Subtract S5, S9, S11
	263 Subtract S6, S6, S10
	264 Move S7, [X21+12]
	265 Move S16, [X21+16]
	266 Multiply S17, S2, S6
	267 Multiply S6, S1, S6
	268 Multiply S1, S1, S5
	269 Multiply S5, S3, S5
	270 Multiply S3, S3, S4
	271 Multiply S2, S2, S4
	272 Move V4, [X21+20]
	273 Subtract S5, S17, S5
	274 Subtract S3, S3, S6
	275 Subtract S1, S1, S2
	276 Multiply S2, S5, S7
	277 Multiply S3, S3, S16
	278 Add S2, S2, S3
	279 Multiply S1, S1, S4
	280 Add S1, S1, S2
	281 NotImplemented "Instruction FCMP not yet implemented."
	282 Move V1, [X31+40]
	283 NotImplemented "Instruction FCMP not yet implemented."
	284 Move W8, [X23+24]
	285 NotImplemented "Instruction CMP not yet implemented."
	286 Move X8, [X22]
	287 Move [X31+40], S0
	288 Move [X25], X8
	289 Move V1, [X31+36]
	290 NotImplemented "Instruction FCMP not yet implemented."
	291 Move W8, [X23+24]
	292 NotImplemented "Instruction CMP not yet implemented."
	293 Move X8, [X22]
	294 Move [X31+36], S0
	295 Move [X20], X8
	296 Move X11, [X31+24]
	297 Move W9, [X31+32]
	298 Add W8, W27, 1
	299 NotImplemented "Instruction CMP not yet implemented."
	300 Move X9, [X11+40]
	301 Compare X9, 0
	302 JumpIfNotEqual {179}
	303 Call 0x1C17F20
	304 Move X22, X20
	305 Move W8, 0x7F800000
	306 Move S0, W8
	307 Move [X31+36], S0
	308 Move [X31+44], S0
	309 Move X8, [X25]
	310 Compare X8, 0
	311 JumpIfEqual {319}
	312 Move V0, [X31+40]
	313 Move X0, X21
	314 Move X1, X31
	315 Call Ray.GetPoint, X0, V0
	316 Move [X25+8], S0
	317 Move [X25+16], S1
	318 Move [X25+16], S2
	319 Move X8, [X22]
	320 Compare X8, 0
	321 JumpIfEqual {329}
	322 Move V0, [X31+36]
	323 Move X0, X21
	324 Move X1, X31
	325 Call Ray.GetPoint, X0, V0
	326 Move [X22+8], S0
	327 Move [X22+16], S1
	328 Move [X22+16], S2
	329 Move X8, [X25]
	330 Compare X8, 0
	331 JumpIfEqual {333}
	332 Move W0, 1
	333 Move X8, [X22]
	334 NotImplemented "Instruction CMP not yet implemented."
	335 NotImplemented "Instruction CSET not yet implemented."
	336 Move X20, [X31+432]
	337 Move X19, [X31+440]
	338 Move X22, [X31+416]
	339 Move X21, [X31+424]
	340 Move X24, [X31+400]
	341 Move X23, [X31+408]
	342 Move X26, [X31+384]
	343 Move X25, [X31+392]
	344 Move X28, [X31+368]
	345 Move X27, [X31+376]
	346 Move X29, [X31+352]
	347 Move X30, [X31+360]
	348 Move D9, [X31+336]
	349 Move D8, [X31+344]
	350 Move D11, [X31+320]
	351 Move D10, [X31+328]
	352 Move D13, [X31+304]
	353 Move D12, [X31+312]
	354 Move D15, [X31+288]
	355 Move D14, [X31+296]
	356 Add X31, X31, 448
	357 Return X0
	358 Call 0x1C17F28

Method: System.Boolean FaceRaycast(UnityEngine.Ray InWorldRay, UnityEngine.ProBuilder.ProBuilderMesh mesh, out System.Collections.Generic.List`1<UnityEngine.ProBuilder.RaycastHit> hits, UnityEngine.ProBuilder.CullingMode cullingMode, System.Collections.Generic.HashSet`1<UnityEngine.ProBuilder.Face> ignore = null)

Disassembly:
	0x03904038 LDP X20, X19, [X31 + 0xA0]
	0x0390403C LDP X22, X21, [X31 + 0x90]
	0x03904040 LDP X30, X23, [X31 + 0x80]
	0x03904044 LDP D9, D8, [X31 + 0x70]
	0x03904048 LDP D11, D10, [X31 + 0x60]
	0x0390404C LDP D13, D12, [X31 + 0x50]
	0x03904050 LDP D15, D14, [X31 + 0x40]
	0x03904054 AND W0, W0, 0x1
	0x03904058 ADD X31, X31, 0xB0
	0x0390405C RET
	0x03904060 BL 0x1C16F20
	0x03904064 SUB X31, X31, 0xD0
	0x03904068 STP D15, D14, [X31 + 0x30]
	0x0390406C STP D13, D12, [X31 + 0x40]
	0x03904070 STP D11, D10, [X31 + 0x50]
	0x03904074 STP D9, D8, [X31 + 0x60]
	0x03904078 STP X29, X30, [X31 + 0x70]
	0x0390407C STP X28, X27, [X31 + 0x80]
	0x03904080 STP X26, X25, [X31 + 0x90]
	0x03904084 STP X24, X23, [X31 + 0xA0]
	0x03904088 STP X22, X21, [X31 + 0xB0]
	0x0390408C STP X20, X19, [X31 + 0xC0]
	0x03904090 ADRP X21, 0xADD000
	0x03904094 LDRB W8, [X21 + 0x7CA]
	0x03904098 MOV X20, X1
	0x0390409C MOV X19, X0
	0x039040A0 TBNZ X8, 0x0, 0x39040E8
	0x039040A4 ADRP X0, 0x7EF000
	0x039040A8 LDR X0, [X0 + 0xE00]
	0x039040AC BL 0x1C16CF4
	0x039040B0 ADRP X0, 0x817000
	0x039040B4 LDR X0, [X0 + 0x7B8]
	0x039040B8 BL 0x1C16CF4
	0x039040BC ADRP X0, 0x817000
	0x039040C0 LDR X0, [X0 + 0x7C0]
	0x039040C4 BL 0x1C16CF4
	0x039040C8 ADRP X0, 0x7EF000
	0x039040CC LDR X0, [X0 + 0xE18]
	0x039040D0 BL 0x1C16CF4
	0x039040D4 ADRP X0, 0x849000
	0x039040D8 LDR X0, [X0 + 0xE78]
	0x039040DC BL 0x1C16CF4
	0x039040E0 MOVZ W8, 0x1
	0x039040E4 STRB W8, [X21 + 0x7CA]
	0x039040E8 CBZ X19, 0x3904630
	0x039040EC MOVZ W1, 0x40
	0x039040F0 MOV X0, X19
	0x039040F4 MOV X2, X31
	0x039040F8 BL 0x39112BC
	0x039040FC TBNZ X0, 0x0, 0x3904124
	0x03904100 ADRP X8, 0x849000
	0x03904104 LDR X8, [X8 + 0xE78]
	0x03904108 LDR X0, [X8]
	0x0390410C LDR W8, [X0 + 0xE0]
	0x03904110 CBNZ W8, 0x3904118
	0x03904114 BL 0x1C16DFC
	0x03904118 MOV X0, X19
	0x0390411C MOV X1, X31
	0x03904120 BL 0x3913B20
	0x03904124 MOVZ W1, 0x80
	0x03904128 MOV X0, X19
	0x0390412C MOV X2, X31
	0x03904130 BL 0x39112BC
	0x03904134 TBNZ X0, 0x0, 0x390415C
	0x03904138 ADRP X8, 0x849000
	0x0390413C LDR X8, [X8 + 0xE78]
	0x03904140 LDR X0, [X8]
	0x03904144 LDR W8, [X0 + 0xE0]
	0x03904148 CBNZ W8, 0x3904150
	0x0390414C BL 0x1C16DFC
	0x03904150 MOV X0, X19
	0x03904154 MOV X1, X31
	0x03904158 BL 0x3913164
	0x0390415C ADRP X24, 0xAD4000
	0x03904160 LDRB W8, [X24 + 0x783]
	0x03904164 LDP X27, X21, [X19 + 0x78]
	0x03904168 CBNZ W8, 0x3904180
	0x0390416C ADRP X0, 0x7EF000
	0x03904170 LDR X0, [X0 + 0x5A0]
	0x03904174 BL 0x1C16CF4
	0x03904178 MOVZ W8, 0x1
	0x0390417C STRB W8, [X24 + 0x783]
	0x03904180 ADRP X25, 0x7EF000
	0x03904184 LDR X25, [X25 + 0x5A0]
	0x03904188 ADRP X22, 0xAD4000
	0x0390418C LDRB W9, [X22 + 0xE5A]
	0x03904190 LDR X8, [X25]
	0x03904194 LDR X8, [X8 + 0xB8]
	0x03904198 LDR V13, [X8]
	0x0390419C LDUR V11, [X8 + 0x4]
	0x039041A0 CBNZ W9, 0x39041B8
	0x039041A4 ADRP X0, 0x7F6000
	0x039041A8 LDR X0, [X0 + 0x9A0]
	0x039041AC BL 0x1C16CF4
	0x039041B0 MOVZ W8, 0x1
	0x039041B4 STRB W8, [X22 + 0xE5A]
	0x039041B8 CBZ X20, 0x3904630
	0x039041BC ADRP X23, 0x7F6000
	0x039041C0 LDR X23, [X23 + 0x9A0]
	0x039041C4 ADRP X11, 0x817000
	0x039041C8 LDR X8, [X20]
	0x039041CC LDR X9, [X23]
	0x039041D0 LDR X10, [X9 + 0xB8]
	0x039041D4 LDR X11, [X11 + 0x7B8]
	0x039041D8 LDRH W9, [X8 + 0x12E]
	0x039041DC LDP D14, D15, [X10]
	0x039041E0 LDR X1, [X11]
	0x039041E4 CBZ X9, 0x3904208
	0x039041E8 LDR X10, [X8 + 0xB0]
	0x039041EC ADD X10, X10, 0x8
	0x039041F0 LDUR X11, [X10 - 0x8]
	0x039041F4 CMP X11, X1
	0x039041F8 B.EQ 0x3904218
	0x039041FC SUBS X9, X9, 0x1
	0x03904200 ADD X10, X10, 0x10
	0x03904204 B.NE 0x39041F0
	0x03904208 MOV X0, X20
	0x0390420C MOV W2, W31
	0x03904210 BL 0x1C5C788
	0x03904214 B 0x3904224
	0x03904218 LDRSW X9, [X10]
	0x0390421C ADD X8, X8, X9, 0x4, LSL
	0x03904220 ADD X0, X8, 0x138
	0x03904224 LDP X8, X1, [X0]
	0x03904228 MOV X0, X20
	0x0390422C BLR X8
	0x03904230 MOV X20, X0
	0x03904234 CBZ X0, 0x3904634
	0x03904238 ADRP X28, 0x7EF000
	0x0390423C ADRP X29, 0x817000
	0x03904240 LDR X28, [X28 + 0xE18]
	0x03904244 LDR X29, [X29 + 0x7C0]
	0x03904248 FMOV S0, W31
	0x0390424C STR V0, [X31 + 0x2]
	0x03904250 MOVZ W26, 0xC
	0x03904254 FMOV S12, 1
	0x03904258 MOV V8.16B, V13.16B
	0x0390425C MOV V9.16B, V15.16B
	0x03904260 MOV V10.16B, V14.16B
	0x03904264 STR D11, [X31 + 0x10]
	0x03904268 LDR X8, [X20]
	0x0390426C LDR X1, [X28]
	0x03904270 LDRH W9, [X8 + 0x12E]
	0x03904274 CBZ X9, 0x3904298
	0x03904278 LDR X10, [X8 + 0xB0]
	0x0390427C ADD X10, X10, 0x8
	0x03904280 LDUR X11, [X10 - 0x8]
	0x03904284 CMP X11, X1
	0x03904288 B.EQ 0x39042A8
	0x0390428C SUBS X9, X9, 0x1
	0x03904290 ADD X10, X10, 0x10
	0x03904294 B.NE 0x3904280
	0x03904298 MOV X0, X20
	0x0390429C MOV W2, W31
	0x039042A0 BL 0x1C5C788
	0x039042A4 B 0x39042B4
	0x039042A8 LDRSW X9, [X10]
	0x039042AC ADD X8, X8, X9, 0x4, LSL
	0x039042B0 ADD X0, X8, 0x138
	0x039042B4 LDP X8, X1, [X0]
	0x039042B8 MOV X0, X20
	0x039042BC BLR X8
	0x039042C0 TBZ X0, 0x0, 0x3904374
	0x039042C4 LDR X8, [X20]
	0x039042C8 LDR X1, [X29]
	0x039042CC LDRH W9, [X8 + 0x12E]
	0x039042D0 CBZ X9, 0x39042F4
	0x039042D4 LDR X10, [X8 + 0xB0]
	0x039042D8 ADD X10, X10, 0x8
	0x039042DC LDUR X11, [X10 - 0x8]
	0x039042E0 CMP X11, X1
	0x039042E4 B.EQ 0x3904304
	0x039042E8 SUBS X9, X9, 0x1
	0x039042EC ADD X10, X10, 0x10
	0x039042F0 B.NE 0x39042DC
	0x039042F4 MOV X0, X20
	0x039042F8 MOV W2, W31
	0x039042FC BL 0x1C5C788
	0x03904300 B 0x3904310
	0x03904304 LDRSW X9, [X10]
	0x03904308 ADD X8, X8, X9, 0x4, LSL
	0x0390430C ADD X0, X8, 0x138
	0x03904310 LDP X8, X1, [X0]
	0x03904314 MOV X0, X20
	0x03904318 BLR X8
	0x0390431C CBZ X21, 0x3904628
	0x03904320 LDR W8, [X21 + 0x18]
	0x03904324 CMP W0, W8
	0x03904328 B.CS 0x3904624
	0x0390432C CBZ X27, 0x390462C
	0x03904330 LDR W8, [X27 + 0x18]
	0x03904334 CMP W0, W8
	0x03904338 B.CS 0x3904620
	0x0390433C SXTW X8, W0
	0x03904340 MADD X9, X8, X26, X21
	0x03904344 LDR V0, [X9 + 0x20]
	0x03904348 ADD X8, X27, X8, 0x4, LSL
	0x0390434C LDUR V1, [X9 + 0x24]
	0x03904350 LDP D2, D3, [X8 + 0x20]
	0x03904354 FADD S8, S8, S0
	0x03904358 LDR V0, [X31 + 0x2]
	0x0390435C FADD V11.2S, V11.2S, V1.2S
	0x03904360 FADD V10.2S, V10.2S, V2.2S
	0x03904364 FADD V9.2S, V9.2S, V3.2S
	0x03904368 FADD S0, S0, S12
	0x0390436C STR V0, [X31 + 0x2]
	0x03904370 B 0x3904268
	0x03904374 MOV X21, X31
	0x03904378 MOVZ W26, 0x6
	0x0390437C CBZ X20, 0x39043E0
	0x03904380 LDR X8, [X20]
	0x03904384 ADRP X10, 0x7EF000
	0x03904388 LDRH W9, [X8 + 0x12E]
	0x0390438C LDR X10, [X10 + 0xE00]
	0x03904390 LDR X1, [X10]
	0x03904394 CBZ X9, 0x39043B8
	0x03904398 LDR X10, [X8 + 0xB0]
	0x0390439C ADD X10, X10, 0x8
	0x039043A0 LDUR X11, [X10 - 0x8]
	0x039043A4 CMP X11, X1
	0x039043A8 B.EQ 0x39043C8
	0x039043AC SUBS X9, X9, 0x1
	0x039043B0 ADD X10, X10, 0x10
	0x039043B4 B.NE 0x39043A0
	0x039043B8 MOV X0, X20
	0x039043BC MOV W2, W31
	0x039043C0 BL 0x1C5C788
	0x039043C4 B 0x39043D4
	0x039043C8 LDRSW X9, [X10]
	0x039043CC ADD X8, X8, X9, 0x4, LSL
	0x039043D0 ADD X0, X8, 0x138
	0x039043D4 LDP X8, X1, [X0]
	0x039043D8 MOV X0, X20
	0x039043DC BLR X8
	0x039043E0 CBNZ X21, 0x3904638
	0x039043E4 CMP W26, 0x6
	0x039043E8 B.EQ 0x39043F0
	0x039043EC CBNZ W26, 0x39045F0
	0x039043F0 LDR V0, [X31 + 0x2]
	0x039043F4 LDRB W8, [X24 + 0x783]
	0x039043F8 UNIMPLEMENTED
	0x039043FC FDIV S8, S8, S0
	0x00000000 INVALID
	0x03904404 CBNZ W8, 0x3904424
	0x03904408 ADRP X0, 0x7EF000
	0x0390440C LDR X0, [X0 + 0x5A0]
	0x03904410 STR V3, [X31 + 0x2]
	0x03904414 BL 0x1C16CF4
	0x03904418 LDR V3, [X31 + 0x2]
	0x0390441C MOVZ W8, 0x1
	0x03904420 STRB W8, [X24 + 0x783]
	0x03904424 LDR X8, [X25]
	0x03904428 LDR X8, [X8 + 0xB8]
	0x0390442C LDR V0, [X8]
	0x03904430 LDUR V1, [X8 + 0x4]
	0x03904434 ADRP X8, 0xFFFFFFFFFD1E5000
	0x03904438 LDR V11, [X8 + 0xF20]
	0x0390443C FSUB S0, S8, S0
	0x03904440 FSUB V1.2S, V3.2S, V1.2S
	0x03904444 FMUL S0, S0, S0
	0x00000000 INVALID
	0x0390444C FADD S0, S0, S1
	0x03904450 MOV S1, V1.S[1]
	0x03904454 FADD S0, S1, S0
	0x03904458 FCMP S0, S11
	0x0390445C B.MI 0x39044CC
	0x03904460 LDRB W8, [X22 + 0xE5A]
	0x00000000 INVALID
	0x00000000 INVALID
	0x0390446C CBNZ W8, 0x3904494
	0x03904470 ADRP X0, 0x7F6000
	0x03904474 LDR X0, [X0 + 0x9A0]
	0x03904478 STP V4, V3, [X31 + 0x10]
	0x0390447C STR V5, [X31]
	0x03904480 BL 0x1C16CF4
	0x03904484 LDP V5, V4, [X31]
	0x03904488 LDR V3, [X31 + 0x2]
	0x0390448C MOVZ W8, 0x1
	0x03904490 STRB W8, [X22 + 0xE5A]
	0x03904494 LDR X8, [X23]
	0x03904498 LDR X8, [X8 + 0xB8]
	0x0390449C LDP D0, D1, [X8]
	0x039044A0 FSUB V0.2S, V5.2S, V0.2S
	0x00000000 INVALID
	0x039044A8 FSUB V1.2S, V4.2S, V1.2S
	0x039044AC UNIMPLEMENTED
	0x00000000 INVALID
	0x039044B4 FADD V0.2S, V0.2S, V2.2S
	0x039044B8 FADD V0.2S, V1.2S, V0.2S
	0x039044BC UNIMPLEMENTED
	0x039044C0 FADD V0.2S, V1.2S, V0.2S
	0x039044C4 FCMP S0, S11
	0x039044C8 B.PL 0x39044E8
	0x039044CC MOV X0, X19
	0x039044D0 MOV X1, X31
	0x039044D4 BL 0x3C32E90
	0x039044D8 CBZ X0, 0x3904630
	0x039044DC MOV X1, X31
	0x039044E0 BL 0x3C3DEB4
	0x039044E4 B 0x39045F0
	0x039044E8 MOV X0, X19
	0x039044EC MOV X1, X31
	0x039044F0 STP V5, V4, [X31]
	0x039044F4 STR V3, [X31 + 0x2]
	0x039044F8 BL 0x3C32E90
	0x039044FC CBZ X0, 0x3904630
	0x03904500 LDP V2, V0, [X31 + 0x10]
	0x03904504 LDR V1, [X31]
	0x03904508 MOV X1, X31
	0x0390450C MOV S9, V0.S[1]
	0x03904510 MOV V5.16B, V0.16B
	0x03904514 FMUL S0, S1, V2.S[1]
	0x00000000 INVALID
	0x0390451C FMUL S2, S2, V2.S[1]
	0x03904520 FMUL S3, S5, S0
	0x03904524 FMUL S0, S9, S0
	0x03904528 FMUL S4, S8, S2
	0x0390452C MOV S1, V1.S[1]
	0x03904530 FSUB S0, S0, S4
	0x03904534 FMUL S2, S5, S2
	0x03904538 FMUL S5, S8, S1
	0x0390453C STR S0, [X31 + 0x10]
	0x03904540 FMUL S0, S9, S1
	0x03904544 FSUB S11, S5, S3
	0x03904548 FSUB S12, S2, S0
	0x0390454C BL 0x3C3DEB4
	0x03904550 LDR V4, [X31 + 0x10]
	0x03904554 MOV V13.16B, V0.16B
	0x03904558 MOV V14.16B, V1.16B
	0x0390455C MOV V15.16B, V2.16B
	0x03904560 MOV V10.16B, V3.16B
	0x03904564 MOV V0.16B, V8.16B
	0x03904568 LDR V1, [X31 + 0x2]
	0x0390456C MOV V2.16B, V9.16B
	0x03904570 MOV V3.16B, V12.16B
	0x03904574 MOV V5.16B, V11.16B
	0x03904578 MOV X0, X31
	0x0390457C BL 0x3C2A810
	0x03904580 FMUL S4, S10, S0
	0x03904584 FMUL S5, S13, S3
	0x03904588 FMUL S7, S15, S1
	0x0390458C FMUL S16, S10, S1
	0x03904590 FMUL S17, S14, S3
	0x03904594 FMUL S18, S15, S0
	0x03904598 FMUL S20, S13, S1
	0x0390459C FMUL S21, S13, S0
	0x039045A0 FMUL S22, S14, S0
	0x039045A4 FMUL S0, S14, S1
	0x039045A8 FMUL S1, S10, S2
	0x039045AC FMUL S23, S10, S3
	0x039045B0 FMUL S3, S15, S3
	0x039045B4 FMUL S6, S14, S2
	0x039045B8 FMUL S19, S13, S2

ISIL:
	001 Subtract X31, X31, 448
	002 Move [X31+288], D15
	003 Move [X31+296], D14
	004 Move [X31+304], D13
	005 Move [X31+312], D12
	006 Move [X31+320], D11
	007 Move [X31+328], D10
	008 Move [X31+336], D9
	009 Move [X31+344], D8
	010 Move [X31+352], X29
	011 Move [X31+360], X30
	012 Move [X31+368], X28
	013 Move [X31+376], X27
	014 Move [X31+384], X26
	015 Move [X31+392], X25
	016 Move [X31+400], X24
	017 Move [X31+408], X23
	018 Move [X31+416], X22
	019 Move [X31+424], X21
	020 Move [X31+432], X20
	021 Move [X31+440], X19
	022 Move X19, 0xADE000
	023 Move W8, [X19+1991]
	024 Move W21, W3
	025 Move X20, X2
	026 Move X25, X1
	027 Move X23, X0
	028 Move [X31+32], X4
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {53}
	033 Move X0, 0x84A000
	034 Move X0, [X0+3624]
	035 Call 0x1C17CF4
	036 Move X0, 0x84A000
	037 Move X0, [X0+3664]
	038 Call 0x1C17CF4
	039 Move X0, 0x84A000
	040 Move X0, [X0+3672]
	041 Call 0x1C17CF4
	042 Move X0, 0x84A000
	043 Move X0, [X0+3680]
	044 Call 0x1C17CF4
	045 Move X0, 0x84A000
	046 Move X0, [X0+3688]
	047 Call 0x1C17CF4
	048 Move X0, 0x84A000
	049 Move X0, [X0+3632]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X19+1991], W8
	053 Move [X31+272], X31
	054 Move [X31+280], X31
	055 Compare X25, 0
	056 JumpIfEqual {397}
	057 Move V8, [X23]
	058 Move V9, [X23+8]
	059 Move X0, X25
	060 Move X1, X31
	061 Call Component.get_transform, X0
	062 Compare X0, 0
	063 JumpIfEqual {397}
	064 Move X1, X31
	065 Call Transform.get_position, X0
	066 Subtract S2, S9, S2
	067 Move V0.S[1], V1.S[0]
	068 Subtract V0, V8, V0
	069 Move X0, X25
	070 Move X1, X31
	071 Move [X23], D0
	072 Move [X23+8], S2
	073 Call Component.get_transform, X0
	074 Compare X0, 0
	075 JumpIfEqual {397}
	076 Add X8, X31, 208
	077 Move X1, X31
	078 Call Transform.get_worldToLocalMatrix, X0
	079 Move V0, [X31+208]
	080 Move V1, [X31+224]
	081 Move V2, [X31+240]
	082 Move V3, [X31+256]
	083 Add X0, X31, 144
	084 Move X1, X31
	085 Move [X31+144], V0
	086 Move [X31+152], V1
	087 Move [X31+176], V2
	088 Move [X31+184], V3
	089 Move S0, [X23]
	090 Move S1, [X23+4]
	091 Move V2, [X23+8]
	092 Move S3, W31
	093 Call Matrix4x4.op_Multiply, X0, X1
	094 Move X0, X25
	095 Move X1, X31
	096 Move [X23], S0
	097 Move [X23+8], S1
	098 Move [X23+8], S2
	099 Call Component.get_transform, X0
	100 Compare X0, 0
	101 JumpIfEqual {397}
	102 Add X8, X31, 208
	103 Move X1, X31
	104 Call Transform.get_worldToLocalMatrix, X0
	105 Move V0, [X31+208]
	106 Move V1, [X31+224]
	107 Move V2, [X31+240]
	108 Move V3, [X31+256]
	109 Add X0, X31, 80
	110 Move X1, X31
	111 Move [X31+80], V0
	112 Move [X31+88], V1
	113 Move [X31+112], V2
	114 Move [X31+120], V3
	115 Move S0, [X23+12]
	116 Move S1, [X23+16]
	117 Move V2, [X23+20]
	118 Move S3, W31
	119 Call Matrix4x4.op_Multiply, X0, X1
	120 Move X19, 0xAD5000
	121 Move W8, [X19+1925]
	122 Move V8, V0
	123 Move V9, V1
	124 Move V10, V2
	125 Compare W8, 0
	126 JumpIfNotEqual {132}
	127 Move X0, 0x7F0000
	128 Move X0, [X0+1448]
	129 Call 0x1C17CF4
	130 Move W8, 1
	131 Move [X19+1925], W8
	132 Move X8, 0x7F0000
	133 Move X8, [X8+1448]
	134 Move X0, [X8]
	135 Move W8, [X0+224]
	136 Compare W8, 0
	137 JumpIfNotEqual {139}
	138 Call 0x1C17DFC
	139 Multiply S0, S8, S8
	140 Multiply S1, S9, S9
	141 Move X8, -48336896
	142 Move X19, 0x84A000
	143 Add S0, S0, S1
	144 Move V1, [X8+380]
	145 Move X22, 0x84A000
	146 Move X19, [X19+3688]
	147 Multiply S2, S10, S10
	148 Move X22, [X22+3672]
	149 Add S0, S2, S0
	150 NotImplemented "Instruction FSQRT not yet implemented."
	151 NotImplemented "Instruction FCMP not yet implemented."
	152 NotImplemented "Instruction FDIV not yet implemented."
	153 NotImplemented "Instruction FDIV not yet implemented."
	154 NotImplemented "Instruction FDIV not yet implemented."
	155 Move X24, 0xAD5000
	156 Move W8, [X24+1923]
	157 Compare W8, 0
	158 JumpIfNotEqual {164}
	159 Move X0, 0x7F0000
	160 Move X0, [X0+1440]
	161 Call 0x1C17CF4
	162 Move W8, 1
	163 Move [X24+1923], W8
	164 Move X8, 0x7F0000
	165 Move X8, [X8+1440]
	166 Move X8, [X8]
	167 Move X8, [X8+184]
	168 Move S0, [X8]
	169 Move S1, [X8+4]
	170 Move V2, [X8+8]
	171 Move [X23+12], S0
	172 Move [X23+20], S1
	173 Move [X23+20], S2
	174 Move X0, [X19]
	175 Move X27, [X25+88]
	176 Call 0x1C17F10
	177 Move X1, [X22]
	178 Move X24, X0
	179 Call List`1<Object>..ctor, X0
	180 Move [X20], X24
	181 Move X8, [X25+40]
	182 Compare X8, 0
	183 JumpIfEqual {397}
	184 Move X24, X31
	185 Move W22, 12
	186 Move [X31+24], X25
	187 Move W9, [X8+24]
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Move X10, [X31+32]
	190 Compare X10, 0
	191 JumpIfEqual {208}
	192 NotImplemented "Instruction CMP not yet implemented."
	193 Add X8, X8, X24
	194 Move X1, [X8+32]
	195 Move X8, 0x84A000
	196 Move X8, [X8+3624]
	197 Move X0, [X31+32]
	198 Move X2, [X8]
	199 Call HashSet`1<Object>.Contains, X0, X1
	200 Move TEMP, X0
	201 And TEMP, TEMP, 1
	202 Compare TEMP, 1
	203 JumpIfEqual {363}
	204 Move X8, [X31+24]
	205 Move X8, [X8+40]
	206 Compare X8, 0
	207 JumpIfEqual {397}
	208 Move W9, [X8+24]
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Add X8, X8, X24
	211 Move X8, [X8+32]
	212 Compare X8, 0
	213 JumpIfEqual {397}
	214 Move X19, [X8+16]
	215 Compare X19, 0
	216 JumpIfEqual {397}
	217 Move W8, [X19+24]
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Move W28, 1
	220 Subtract W11, W28, 1
	221 NotImplemented "Instruction CMP not yet implemented."
	222 Compare X27, 0
	223 JumpIfEqual {397}
	224 Add X9, X19, W11
	225 NotImplemented "Instruction LDRSW not yet implemented."
	226 Move W10, [X27+24]
	227 NotImplemented "Instruction CMP not yet implemented."
	228 Add W12, W11, 1
	229 NotImplemented "Instruction CMP not yet implemented."
	230 Add X11, X19, W28
	231 NotImplemented "Instruction LDRSW not yet implemented."
	232 NotImplemented "Instruction CMP not yet implemented."
	233 Add W29, W12, 1
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Add W8, W28, 1
	236 Add X8, X19, W8
	237 NotImplemented "Instruction LDRSW not yet implemented."
	238 NotImplemented "Instruction CMP not yet implemented."
	239 NotImplemented "Instruction MADD not yet implemented."
	240 NotImplemented "Instruction MADD not yet implemented."
	241 NotImplemented "Instruction MADD not yet implemented."
	242 Move S10, [X9+32]
	243 Move S9, [X9+36]
	244 Move V8, [X9+40]
	245 Move S13, [X10+32]
	246 Move S12, [X10+36]
	247 Move V11, [X10+40]
	248 Move S14, [X8+32]
	249 Move S15, [X8+36]
	250 Move V1, [X8+40]
	251 Move [X31+284], W31
	252 Move V0, [X23]
	253 Move X8, [X23+16]
	254 Move [X31+44], S1
	255 Move [X31+4], S15
	256 Move [X31+12], S1
	257 Move [X31+3], V0
	258 Add X0, X31, 48
	259 Add X1, X31, 284
	260 Add X2, X31, 272
	261 Move V0, V10
	262 Move V1, V9
	263 Move V2, V8
	264 Move V3, V13
	265 Move V4, V12
	266 Move V5, V11
	267 Move [X31+64], X8
	268 Move [X31], S14
	269 Call Math.RayIntersectsTriangle, X0, X1, X2, X3, X4, X5
	270 Move TEMP, X0
	271 And TEMP, TEMP, 1
	272 Compare TEMP, 1
	273 JumpIfNotEqual {359}
	274 Move V5, [X31+44]
	275 Subtract S0, S13, S10
	276 Subtract S1, S12, S9
	277 Subtract S2, S11, S8
	278 Subtract S3, S14, S10
	279 Subtract S4, S15, S9
	280 Subtract S5, S5, S8
	281 Multiply S6, S1, S5
	282 Multiply S7, S2, S4
	283 Multiply S2, S2, S3
	284 Multiply S5, S0, S5
	285 Multiply S0, S0, S4
	286 Multiply S1, S1, S3
	287 NotImplemented "Instruction CMP not yet implemented."
	288 Subtract S10, S6, S7
	289 Subtract S9, S2, S5
	290 Subtract S8, S0, S1
	291 NotImplemented "Instruction CMP not yet implemented."
	292 NotImplemented "Instruction CMP not yet implemented."
	293 Move S0, [X23+12]
	294 Move S1, [X23+16]
	295 Move V2, [X23+20]
	296 Multiply S0, S10, S0
	297 Multiply S1, S9, S1
	298 Add S0, S0, S1
	299 Multiply S1, S8, S2
	300 Add S0, S1, S0
	301 NotImplemented "Instruction FCMP not yet implemented."
	302 Move S0, [X23+12]
	303 Move S1, [X23+16]
	304 Move V2, [X23+20]
	305 Multiply S0, S10, S0
	306 Multiply S1, S9, S1
	307 Add S0, S0, S1
	308 Multiply S1, S8, S2
	309 Add S0, S1, S0
	310 NotImplemented "Instruction FCMP not yet implemented."
	311 Move V11, [X31+284]
	312 Move X25, [X20]
	313 Move X0, X23
	314 Move X1, X31
	315 Move V0, V11
	316 Call Ray.GetPoint, X0, V0
	317 Move X8, 0x84A000
	318 Move X8, [X8+3632]
	319 Move V12, V0
	320 Move V13, V1
	321 Move V14, V2
	322 Move X0, [X8]
	323 Call 0x1C17F10
	324 Move V0, V11
	325 Move V1, V12
	326 Move V2, V13
	327 Move V3, V14
	328 Move V4, V10
	329 Move V5, V9
	330 Move V6, V8
	331 Move W1, W24
	332 Move X2, X31
	333 Move X26, X0
	334 Call RaycastHit..ctor, X0, V0, X1, X2, X3
	335 Compare X25, 0
	336 JumpIfEqual {397}
	337 Move X9, 0x84A000
	338 Move W10, [X25+28]
	339 Move X8, [X25+16]
	340 Move X9, [X9+3664]
	341 Add W10, W10, 1
	342 Move X9, [X9]
	343 Move [X25+28], W10
	344 Compare X8, 0
	345 JumpIfEqual {397}
	346 NotImplemented "Instruction LDRSW not yet implemented."
	347 Move W11, [X8+24]
	348 NotImplemented "Instruction CMP not yet implemented."
	349 Add W9, W10, 1
	350 Add X8, X8, X10
	351 Move [X25+24], W9
	352 Move [X8+32], X26
	353 Move X8, [X9+32]
	354 Move X0, X25
	355 Move X1, X26
	356 Move X8, [X8+192]
	357 Move X2, [X8+112]
	358 Call List`1<Object>.AddWithResize, X0, X1
	359 Move W8, [X19+24]
	360 Add W9, W29, 1
	361 Add W28, W28, 3
	362 NotImplemented "Instruction CMP not yet implemented."
	363 Move X8, [X31+24]
	364 Add X24, X24, 1
	365 Move X8, [X8+40]
	366 Compare X8, 0
	367 JumpIfNotEqual {187}
	368 Move X8, [X20]
	369 Compare X8, 0
	370 JumpIfEqual {397}
	371 Move W8, [X8+24]
	372 Move X20, [X31+432]
	373 Move X19, [X31+440]
	374 Move X22, [X31+416]
	375 Move X21, [X31+424]
	376 Move X24, [X31+400]
	377 Move X23, [X31+408]
	378 Move X26, [X31+384]
	379 Move X25, [X31+392]
	380 Move X28, [X31+368]
	381 Move X27, [X31+376]
	382 Move X29, [X31+352]
	383 Move X30, [X31+360]
	384 Move D9, [X31+336]
	385 Move D8, [X31+344]
	386 Move D11, [X31+320]
	387 Move D10, [X31+328]
	388 Move D13, [X31+304]
	389 Move D12, [X31+312]
	390 Move D15, [X31+288]
	391 Move D14, [X31+296]
	392 NotImplemented "Instruction CMP not yet implemented."
	393 NotImplemented "Instruction CSET not yet implemented."
	394 Add X31, X31, 448
	395 Return X0
	396 Call 0x1C17F28
	397 Call 0x1C17F20

Method: UnityEngine.Ray InverseTransformRay(UnityEngine.Transform transform, UnityEngine.Ray InWorldRay)

Disassembly:
	0x039045BC FMUL S24, S15, S2
	0x039045C0 FADD S2, S4, S5
	0x039045C4 FADD S4, S16, S17
	0x039045C8 FADD S1, S1, S3
	0x039045CC FSUB S3, S23, S21
	0x039045D0 FADD S2, S6, S2
	0x039045D4 FADD S4, S18, S4
	0x039045D8 FADD S5, S20, S1
	0x039045DC FSUB S3, S3, S0
	0x039045E0 FSUB S0, S2, S7
	0x039045E4 FSUB S1, S4, S19
	0x039045E8 FSUB S2, S5, S22
	0x039045EC FSUB S3, S3, S24
	0x039045F0 LDP X20, X19, [X31 + 0xC0]
	0x039045F4 LDP X22, X21, [X31 + 0xB0]
	0x039045F8 LDP X24, X23, [X31 + 0xA0]
	0x039045FC LDP X26, X25, [X31 + 0x90]
	0x03904600 LDP X28, X27, [X31 + 0x80]
	0x03904604 LDP X29, X30, [X31 + 0x70]
	0x03904608 LDP D9, D8, [X31 + 0x60]
	0x0390460C LDP D11, D10, [X31 + 0x50]
	0x03904610 LDP D13, D12, [X31 + 0x40]
	0x03904614 LDP D15, D14, [X31 + 0x30]
	0x03904618 ADD X31, X31, 0xD0
	0x0390461C RET
	0x03904620 BL 0x1C16F28
	0x03904624 BL 0x1C16F28
	0x03904628 BL 0x1C16F20
	0x0390462C BL 0x1C16F20
	0x03904630 BL 0x1C16F20
	0x03904634 BL 0x1C16F20
	0x03904638 MOV X0, X21
	0x0390463C BL 0x1C16F18
	0x03904640 B 0x390464C
	0x03904644 B 0x3904648
	0x03904648 LDR V11, [X31 + 0x10]
	0x0390464C FMOV S0, W31
	0x03904650 STR V0, [X31 + 0x2]
	0x03904654 MOV V8.16B, V13.16B
	0x03904658 MOV V9.16B, V15.16B
	0x0390465C MOV V10.16B, V14.16B
	0x03904660 B 0x3904670
	0x03904664 B 0x3904670
	0x03904668 B 0x3904670
	0x0390466C B 0x3904670
	0x03904670 CMP W1, 0x1
	0x03904674 B.NE 0x3904690
	0x03904678 BL 0x3EB1AD0
	0x0390467C LDR X21, [X0]
	0x03904680 BL 0x3EB1AE0
	0x03904684 MOV W26, W31
	0x03904688 CBNZ X20, 0x3904380
	0x0390468C B 0x39043E0
	0x03904690 MOV X19, X0
	0x03904694 MOV X21, X31
	0x03904698 B 0x39046A0
	0x0390469C MOV X19, X0
	0x039046A0 CBZ X20, 0x3904704
	0x039046A4 LDR X8, [X20]
	0x039046A8 ADRP X10, 0x7EF000
	0x039046AC LDRH W9, [X8 + 0x12E]
	0x039046B0 LDR X10, [X10 + 0xE00]
	0x039046B4 LDR X1, [X10]
	0x039046B8 CBZ X9, 0x39046DC
	0x039046BC LDR X10, [X8 + 0xB0]
	0x039046C0 ADD X10, X10, 0x8
	0x039046C4 LDUR X11, [X10 - 0x8]
	0x039046C8 CMP X11, X1
	0x039046CC B.EQ 0x39046EC
	0x039046D0 SUBS X9, X9, 0x1
	0x039046D4 ADD X10, X10, 0x10
	0x039046D8 B.NE 0x39046C4
	0x039046DC MOV X0, X20
	0x039046E0 MOV W2, W31
	0x039046E4 BL 0x1C5C788
	0x039046E8 B 0x39046F8
	0x039046EC LDRSW X9, [X10]
	0x039046F0 ADD X8, X8, X9, 0x4, LSL
	0x039046F4 ADD X0, X8, 0x138
	0x039046F8 LDP X8, X1, [X0]
	0x039046FC MOV X0, X20
	0x03904700 BLR X8
	0x03904704 CBNZ X21, 0x3904710
	0x03904708 MOV X0, X19
	0x0390470C BL 0x1D2C690
	0x03904710 MOV X0, X21
	0x03904714 BL 0x1C16F18
	0x03904718 BL 0x1990590
	0x0390471C STP X30, X23, [X31 - 0x30]!
	0x03904720 STP X22, X21, [X31 + 0x10]
	0x03904724 STP X20, X19, [X31 + 0x20]
	0x03904728 ADRP X22, 0xADD000
	0x0390472C ADRP X23, 0x7EF000
	0x03904730 LDRB W8, [X22 + 0x7CB]
	0x03904734 LDR X23, [X23 + 0x598]
	0x03904738 MOV X20, X2
	0x0390473C MOV W21, W1
	0x03904740 MOV X19, X0
	0x03904744 TBNZ X8, 0x0, 0x3904768
	0x03904748 ADRP X0, 0x849000
	0x0390474C LDR X0, [X0 + 0xE80]
	0x03904750 BL 0x1C16CF4
	0x03904754 ADRP X0, 0x7EF000
	0x03904758 LDR X0, [X0 + 0x598]
	0x0390475C BL 0x1C16CF4
	0x03904760 MOVZ W8, 0x1
	0x03904764 STRB W8, [X22 + 0x7CB]
	0x03904768 LDR X0, [X23]
	0x0390476C LDR W8, [X0 + 0xE0]
	0x03904770 CBNZ W8, 0x3904778
	0x03904774 BL 0x1C16DFC
	0x03904778 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 288
	002 Move [X31+192], D13
	003 Move [X31+200], D12
	004 Move [X31+208], D11
	005 Move [X31+216], D10
	006 Move [X31+224], D9
	007 Move [X31+232], D8
	008 Move [X31+240], X29
	009 Move [X31+256], X30
	010 Move [X31+264], X21
	011 Move [X31+272], X20
	012 Move [X31+280], X19
	013 NotImplemented "Instruction MOVI not yet implemented."
	014 Move [X31+160], V0
	015 Move [X31+168], V0
	016 Move [X31+128], V0
	017 Move [X31+136], V0
	018 Compare X0, 0
	019 JumpIfEqual {139}
	020 Move S9, [X1+4]
	021 Move S10, [X1+8]
	022 Move V8, [X1]
	023 Move X20, X1
	024 Move X1, X31
	025 Move X21, X0
	026 Move X19, X8
	027 Call Transform.get_position, X0
	028 Add X8, X31, 64
	029 Move X0, X21
	030 Move X1, X31
	031 Subtract S8, S8, S0
	032 Subtract S9, S9, S1
	033 Subtract S10, S10, S2
	034 Call Transform.get_worldToLocalMatrix, X0
	035 Move V0, [X31+64]
	036 Move V1, [X31+80]
	037 Move V2, [X31+96]
	038 Move V3, [X31+112]
	039 Add X0, X31, 0
	040 Move X1, X31
	041 Move [X31], V0
	042 Move [X31+8], V1
	043 Move [X31+32], V2
	044 Move [X31+40], V3
	045 Move S3, W31
	046 Move V0, V8
	047 Move V1, V9
	048 Move V2, V10
	049 Call Matrix4x4.op_Multiply, X0, X1
	050 Add X8, X31, 64
	051 Move X0, X21
	052 Move X1, X31
	053 Move V11, V0
	054 Move V12, V1
	055 Move V13, V2
	056 Call Transform.get_worldToLocalMatrix, X0
	057 Move V0, [X31+64]
	058 Move V1, [X31+80]
	059 Move V2, [X31+96]
	060 Move V3, [X31+112]
	061 Add X0, X31, 128
	062 Move X1, X31
	063 Move [X31+128], V0
	064 Move [X31+136], V1
	065 Move [X31+160], V2
	066 Move [X31+168], V3
	067 Move S0, [X20+12]
	068 Move S1, [X20+16]
	069 Move V2, [X20+20]
	070 Call Matrix4x4.MultiplyVector, X0, X1
	071 Move X20, 0xAD5000
	072 Move W8, [X20+1925]
	073 Move V8, V0
	074 Move V9, V1
	075 Move V10, V2
	076 Move [X19+20], W31
	077 Move [X19+12], X31
	078 Move [X19], S11
	079 Move [X19+8], S12
	080 Move [X19+8], S13
	081 Compare W8, 0
	082 JumpIfNotEqual {88}
	083 Move X0, 0x7F0000
	084 Move X0, [X0+1448]
	085 Call 0x1C17CF4
	086 Move W8, 1
	087 Move [X20+1925], W8
	088 Move X8, 0x7F0000
	089 Move X8, [X8+1448]
	090 Move X0, [X8]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Multiply S0, S8, S8
	096 Multiply S1, S9, S9
	097 Move X8, -48336896
	098 Add S0, S0, S1
	099 Move V1, [X8+380]
	100 Multiply S2, S10, S10
	101 Add S0, S2, S0
	102 NotImplemented "Instruction FSQRT not yet implemented."
	103 NotImplemented "Instruction FCMP not yet implemented."
	104 NotImplemented "Instruction FDIV not yet implemented."
	105 NotImplemented "Instruction FDIV not yet implemented."
	106 NotImplemented "Instruction FDIV not yet implemented."
	107 Move X20, 0xAD5000
	108 Move W8, [X20+1923]
	109 Compare W8, 0
	110 JumpIfNotEqual {116}
	111 Move X0, 0x7F0000
	112 Move X0, [X0+1440]
	113 Call 0x1C17CF4
	114 Move W8, 1
	115 Move [X20+1923], W8
	116 Move X8, 0x7F0000
	117 Move X8, [X8+1440]
	118 Move X8, [X8]
	119 Move X8, [X8+184]
	120 Move S0, [X8]
	121 Move S1, [X8+4]
	122 Move V2, [X8+8]
	123 Move [X19+12], S0
	124 Move [X19+20], S1
	125 Move [X19+20], S2
	126 Move X20, [X31+272]
	127 Move X19, [X31+280]
	128 Move X30, [X31+256]
	129 Move X21, [X31+264]
	130 Move X29, [X31+240]
	131 Move D9, [X31+224]
	132 Move D8, [X31+232]
	133 Move D11, [X31+208]
	134 Move D10, [X31+216]
	135 Move D13, [X31+192]
	136 Move D12, [X31+200]
	137 Add X31, X31, 288
	138 Return X0
	139 Call 0x1C17F20

Method: System.Boolean MeshRaycast(UnityEngine.Ray InWorldRay, UnityEngine.GameObject gameObject, out UnityEngine.ProBuilder.RaycastHit hit, System.Single distance = ∞)

Disassembly:
	0x0390477C MOV X1, X31
	0x03904780 MOV X2, X31
	0x03904784 BL 0x3C3883C
	0x03904788 TBNZ X0, 0x0, 0x39047C8
	0x0390478C CMP W21, 0x1
	0x03904790 B.EQ 0x3904810
	0x03904794 CMP W21, 0x2
	0x03904798 B.NE 0x39047C8
	0x0390479C ADRP X8, 0x849000
	0x039047A0 LDR X8, [X8 + 0xE80]
	0x039047A4 MOV X0, X20
	0x039047A8 LDR X1, [X8]
	0x039047AC BL 0x21C69A4
	0x039047B0 MOV X1, X0
	0x039047B4 MOV X0, X19
	0x039047B8 LDP X20, X19, [X31 + 0x20]
	0x039047BC LDP X22, X21, [X31 + 0x10]
	0x039047C0 LDP X30, X23, [X31], #0x30
	0x039047C4 B 0x390483C
	0x039047C8 ADRP X19, 0xAD4000
	0x039047CC LDRB W8, [X19 + 0x793]
	0x039047D0 CBNZ W8, 0x39047E8
	0x039047D4 ADRP X0, 0x7F0000
	0x039047D8 LDR X0, [X0 + 0x5A8]
	0x039047DC BL 0x1C16CF4
	0x039047E0 MOVZ W8, 0x1
	0x039047E4 STRB W8, [X19 + 0x793]
	0x039047E8 ADRP X8, 0x7F0000
	0x039047EC LDR X8, [X8 + 0x5A8]
	0x039047F0 LDP X20, X19, [X31 + 0x20]
	0x039047F4 LDP X22, X21, [X31 + 0x10]
	0x039047F8 LDR X8, [X8]
	0x039047FC LDR X8, [X8 + 0xB8]
	0x03904800 LDP S0, S1, [X8]
	0x03904804 LDP S2, S3, [X8 + 0x8]
	0x03904808 LDP X30, X23, [X31], #0x30
	0x0390480C RET
	0x03904810 CBZ X19, 0x3904838
	0x03904814 MOV X0, X19
	0x03904818 MOV X1, X31
	0x0390481C BL 0x3C32E90
	0x03904820 CBZ X0, 0x3904838
	0x03904824 LDP X20, X19, [X31 + 0x20]
	0x03904828 LDP X22, X21, [X31 + 0x10]
	0x0390482C MOV X1, X31
	0x03904830 LDP X30, X23, [X31], #0x30
	0x03904834 B 0x3C3DEB4
	0x03904838 BL 0x1C16F20
	0x0390483C SUB X31, X31, 0xA0
	0x03904840 STP D15, D14, [X31 + 0x30]
	0x03904844 STP D13, D12, [X31 + 0x40]
	0x03904848 STP D11, D10, [X31 + 0x50]
	0x0390484C STP D9, D8, [X31 + 0x60]
	0x03904850 STR X30, [X31 + 0x70]
	0x03904854 STP X22, X21, [X31 + 0x80]
	0x03904858 STP X20, X19, [X31 + 0x90]
	0x0390485C ADRP X21, 0xADD000
	0x03904860 ADRP X22, 0x7EF000
	0x03904864 LDRB W8, [X21 + 0x7CC]
	0x03904868 LDR X22, [X22 + 0x598]
	0x0390486C MOV X20, X1
	0x03904870 MOV X19, X0
	0x03904874 TBNZ X8, 0x0, 0x390488C
	0x03904878 ADRP X0, 0x7EF000
	0x0390487C LDR X0, [X0 + 0x598]
	0x03904880 BL 0x1C16CF4
	0x03904884 MOVZ W8, 0x1
	0x03904888 STRB W8, [X21 + 0x7CC]
	0x0390488C LDR X0, [X22]
	0x03904890 LDR W8, [X0 + 0xE0]
	0x03904894 CBNZ W8, 0x390489C
	0x03904898 BL 0x1C16DFC
	0x0390489C MOV X0, X19
	0x039048A0 MOV X1, X31
	0x039048A4 MOV X2, X31
	0x039048A8 BL 0x3C3883C
	0x039048AC TBZ X0, 0x0, 0x39048EC
	0x039048B0 ADRP X19, 0xAD4000
	0x039048B4 LDRB W8, [X19 + 0x793]
	0x039048B8 CBNZ W8, 0x39048D0
	0x039048BC ADRP X0, 0x7F0000
	0x039048C0 LDR X0, [X0 + 0x5A8]
	0x039048C4 BL 0x1C16CF4
	0x039048C8 MOVZ W8, 0x1
	0x039048CC STRB W8, [X19 + 0x793]
	0x039048D0 ADRP X8, 0x7F0000
	0x039048D4 LDR X8, [X8 + 0x5A8]
	0x039048D8 LDR X8, [X8]
	0x039048DC LDR X8, [X8 + 0xB8]
	0x039048E0 LDP S0, S1, [X8]
	0x039048E4 LDP S2, S3, [X8 + 0x8]
	0x039048E8 B 0x39049BC
	0x039048EC CBZ X20, 0x39049A0
	0x039048F0 ADD X8, X31, 0x8

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+80], D8
	003 Move [X31+88], X30
	004 Move [X31+96], X24
	005 Move [X31+104], X23
	006 Move [X31+112], X22
	007 Move [X31+120], X21
	008 Move [X31+128], X20
	009 Move [X31+136], X19
	010 Move X22, 0xADE000
	011 Move W8, [X22+1992]
	012 Move V8, V0
	013 Move X19, X2
	014 Move X21, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x7F2000
	021 Move X0, [X0+360]
	022 Call 0x1C17CF4
	023 Move X0, 0x7F0000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+1992], W8
	028 Compare X21, 0
	029 JumpIfEqual {113}
	030 Move X8, 0x7F2000
	031 Move X8, [X8+360]
	032 Move X24, 0x7F0000
	033 Move X0, X21
	034 Move X1, [X8]
	035 Move X24, [X24+1432]
	036 Call 0x21E62E4, X0
	037 Move X8, [X24]
	038 Move X23, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X0, X23
	045 Move X1, X31
	046 Move X2, X31
	047 Call Object.op_Inequality, X0, X1
	048 Move X22, X31
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {59}
	053 Compare X23, 0
	054 JumpIfEqual {113}
	055 Move X0, X23
	056 Move X1, X31
	057 Call MeshFilter.get_sharedMesh, X0
	058 Move X22, X0
	059 Move X0, [X24]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X22
	065 Move X1, X31
	066 Call Object.op_Implicit, X0
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {100}
	071 Move X0, X21
	072 Move X1, X31
	073 Call GameObject.get_transform, X0
	074 Move X8, [X20+16]
	075 Move V0, [X20]
	076 Add X1, X31, 32
	077 Move [X31+48], X8
	078 Add X8, X31, 56
	079 Move [X31+2], V0
	080 Call HandleUtility.InverseTransformRay, X0, X1
	081 Compare X22, 0
	082 JumpIfEqual {113}
	083 Move X0, X22
	084 Move X1, X31
	085 Call Mesh.get_vertices, X0
	086 Move X20, X0
	087 Move X0, X22
	088 Move X1, X31
	089 Call Mesh.get_triangles, X0
	090 NotImplemented "Instruction LDUR not yet implemented."
	091 Move X8, [X31+72]
	092 Move X2, X0
	093 Add X0, X31, 0
	094 Move [X31], V0
	095 Move X1, X20
	096 Move X3, X19
	097 Move V0, V8
	098 Move [X31+16], X8
	099 Call HandleUtility.MeshRaycast, X0, X1, X2, X3, V0
	100 Move W0, W31
	101 Move [X19], X31
	102 Move X20, [X31+128]
	103 Move X19, [X31+136]
	104 Move X22, [X31+112]
	105 Move X21, [X31+120]
	106 Move X24, [X31+96]
	107 Move X23, [X31+104]
	108 Move X30, [X31+88]
	109 Move V8, [X31+80]
	110 And W0, W0, 1
	111 Add X31, X31, 144
	112 Return X0
	113 Call 0x1C17F20

Method: System.Boolean MeshRaycast(UnityEngine.Ray InRay, UnityEngine.Vector3[] mesh, System.Int32[] triangles, out UnityEngine.ProBuilder.RaycastHit hit, System.Single distance = ∞)

Disassembly:
	0x039048F4 MOV X0, X19
	0x039048F8 MOV X1, X20
	0x039048FC BL 0x3904AA4
	0x03904900 ADRP X20, 0xAD4000
	0x03904904 LDP S8, S9, [X31 + 0x8]
	0x03904908 LDR V10, [X31 + 0x10]
	0x0390490C LDP S11, S13, [X31 + 0x24]
	0x03904910 LDRB W8, [X20 + 0x783]
	0x03904914 LDR V12, [X31 + 0x2C]
	0x03904918 CBNZ W8, 0x3904930
	0x0390491C ADRP X0, 0x7EF000
	0x03904920 LDR X0, [X0 + 0x5A0]
	0x03904924 BL 0x1C16CF4
	0x03904928 MOVZ W8, 0x1
	0x0390492C STRB W8, [X20 + 0x783]
	0x03904930 ADRP X8, 0x7EF000
	0x03904934 LDR X8, [X8 + 0x5A0]
	0x03904938 ADRP X9, 0xFFFFFFFFFD1E5000
	0x0390493C LDR V0, [X9 + 0xF20]
	0x03904940 LDR X8, [X8]
	0x03904944 LDR X8, [X8 + 0xB8]
	0x03904948 LDP S2, S1, [X8]
	0x0390494C LDR V3, [X8 + 0x8]
	0x03904950 FSUB S4, S8, S2
	0x03904954 FSUB S5, S9, S1
	0x03904958 FMUL S4, S4, S4
	0x0390495C FMUL S5, S5, S5
	0x03904960 FADD S4, S4, S5
	0x03904964 FSUB S5, S10, S3
	0x03904968 FMUL S5, S5, S5
	0x0390496C FADD S4, S5, S4
	0x03904970 FCMP S4, S0
	0x03904974 B.MI 0x39049A0
	0x03904978 FSUB S2, S11, S2
	0x0390497C FSUB S1, S13, S1
	0x03904980 FSUB S3, S12, S3
	0x03904984 FMUL S2, S2, S2
	0x03904988 FMUL S1, S1, S1
	0x0390498C FADD S1, S2, S1
	0x03904990 FMUL S2, S3, S3
	0x03904994 FADD S1, S2, S1
	0x03904998 FCMP S1, S0
	0x0390499C B.PL 0x39049E0
	0x039049A0 CBZ X19, 0x3904AA0
	0x039049A4 MOV X0, X19
	0x039049A8 MOV X1, X31
	0x039049AC BL 0x3C32E90
	0x039049B0 CBZ X0, 0x3904AA0
	0x039049B4 MOV X1, X31
	0x039049B8 BL 0x3C3DEB4
	0x039049BC LDP X20, X19, [X31 + 0x90]
	0x039049C0 LDP X22, X21, [X31 + 0x80]
	0x039049C4 LDR X30, [X31 + 0x70]
	0x039049C8 LDP D9, D8, [X31 + 0x60]
	0x039049CC LDP D11, D10, [X31 + 0x50]
	0x039049D0 LDP D13, D12, [X31 + 0x40]
	0x039049D4 LDP D15, D14, [X31 + 0x30]
	0x039049D8 ADD X31, X31, 0xA0
	0x039049DC RET
	0x039049E0 CBZ X19, 0x3904AA0
	0x039049E4 MOV X0, X19
	0x039049E8 MOV X1, X31
	0x039049EC STP S12, S11, [X31 + 0x78]
	0x039049F0 BL 0x3C32E90
	0x039049F4 CBZ X0, 0x3904AA0
	0x039049F8 MOV X1, X31
	0x039049FC BL 0x3C3DEB4
	0x03904A00 MOV V12.16B, V3.16B
	0x03904A04 LDP S5, S3, [X31 + 0x78]
	0x03904A08 MOV V14.16B, V0.16B
	0x03904A0C MOV V15.16B, V1.16B
	0x03904A10 MOV V11.16B, V2.16B
	0x03904A14 MOV V0.16B, V8.16B
	0x03904A18 MOV V1.16B, V9.16B
	0x03904A1C MOV V2.16B, V10.16B
	0x03904A20 MOV V4.16B, V13.16B
	0x03904A24 MOV X0, X31
	0x03904A28 BL 0x3C2A810
	0x03904A2C FMUL S4, S12, S0
	0x03904A30 FMUL S5, S14, S3
	0x03904A34 FMUL S7, S11, S1
	0x03904A38 FMUL S16, S12, S1
	0x03904A3C FMUL S17, S15, S3
	0x03904A40 FMUL S18, S11, S0
	0x03904A44 FMUL S20, S14, S1
	0x03904A48 FMUL S21, S14, S0
	0x03904A4C FMUL S22, S15, S0
	0x03904A50 FMUL S0, S15, S1
	0x03904A54 FMUL S1, S12, S2
	0x03904A58 FMUL S23, S12, S3
	0x03904A5C FMUL S3, S11, S3
	0x03904A60 FMUL S6, S15, S2
	0x03904A64 FMUL S19, S14, S2
	0x03904A68 FMUL S24, S11, S2
	0x03904A6C FADD S2, S4, S5
	0x03904A70 FADD S4, S16, S17
	0x03904A74 FADD S1, S1, S3
	0x03904A78 FSUB S3, S23, S21
	0x03904A7C FADD S2, S6, S2
	0x03904A80 FADD S4, S18, S4
	0x03904A84 FADD S5, S20, S1
	0x03904A88 FSUB S3, S3, S0
	0x03904A8C FSUB S0, S2, S7
	0x03904A90 FSUB S1, S4, S19
	0x03904A94 FSUB S2, S5, S22
	0x03904A98 FSUB S3, S3, S24
	0x03904A9C B 0x39049BC
	0x03904AA0 BL 0x1C16F20
	0x03904AA4 SUB X31, X31, 0x80
	0x03904AA8 STP D13, D12, [X31 + 0x20]
	0x03904AAC STP D11, D10, [X31 + 0x30]
	0x03904AB0 STP D9, D8, [X31 + 0x40]
	0x03904AB4 STP X30, X23, [X31 + 0x50]
	0x03904AB8 STP X22, X21, [X31 + 0x60]
	0x03904ABC STP X20, X19, [X31 + 0x70]
	0x03904AC0 ADRP X23, 0xADD000
	0x03904AC4 ADRP X22, 0x7EF000
	0x03904AC8 MOV X19, X8
	0x03904ACC LDRB W8, [X23 + 0x7FC]
	0x03904AD0 LDR X22, [X22 + 0x598]
	0x03904AD4 MOV X21, X1
	0x03904AD8 MOV X20, X0
	0x03904ADC TBNZ X8, 0x0, 0x3904B00
	0x03904AE0 ADRP X0, 0x849000
	0x03904AE4 LDR X0, [X0 + 0xE88]
	0x03904AE8 BL 0x1C16CF4
	0x03904AEC ADRP X0, 0x7EF000
	0x03904AF0 LDR X0, [X0 + 0x598]
	0x03904AF4 BL 0x1C16CF4
	0x03904AF8 MOVZ W8, 0x1
	0x03904AFC STRB W8, [X23 + 0x7FC]
	0x03904B00 LDR X0, [X22]
	0x03904B04 STR W31, [X31 + 0x18]
	0x03904B08 STR X31, [X31 + 0x10]
	0x03904B0C STR W31, [X31 + 0x8]
	0x03904B10 STR X31, [X31]
	0x03904B14 LDR W8, [X0 + 0xE0]
	0x03904B18 CBNZ W8, 0x3904B20
	0x03904B1C BL 0x1C16DFC
	0x03904B20 MOV X0, X20
	0x03904B24 MOV X1, X31
	0x03904B28 MOV X2, X31
	0x03904B2C BL 0x3C3883C
	0x03904B30 CBZ X21, 0x3904E00
	0x03904B34 TBNZ X0, 0x0, 0x3904E00
	0x03904B38 LDR X8, [X21 + 0x10]
	0x03904B3C CBZ X8, 0x3904DFC
	0x03904B40 LDR W8, [X8 + 0x18]
	0x03904B44 CMP W8, 0x2
	0x03904B48 B.LE 0x3904E00
	0x03904B4C CBZ X20, 0x3904DFC
	0x03904B50 LDR X22, [X20 + 0x60]
	0x03904B54 CBZ X22, 0x3904E48
	0x03904B58 MOV X0, X20
	0x03904B5C MOV X1, X31
	0x03904B60 BL 0x39120C0
	0x03904B64 LDR W8, [X22 + 0x18]
	0x03904B68 CMP W0, W8
	0x03904B6C B.NE 0x3904E48
	0x03904B70 MOV X0, X20

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+64], D15
	003 Move [X31+72], D14
	004 Move [X31+80], D13
	005 Move [X31+88], D12
	006 Move [X31+96], D11
	007 Move [X31+104], D10
	008 Move [X31+112], D9
	009 Move [X31+120], D8
	010 Move [X31+128], X30
	011 Move [X31+144], X26
	012 Move [X31+152], X25
	013 Move [X31+160], X24
	014 Move [X31+168], X23
	015 Move [X31+176], X22
	016 Move [X31+184], X21
	017 Move [X31+192], X20
	018 Move [X31+200], X19
	019 Move X23, 0xADE000
	020 Move W8, [X23+1993]
	021 Move X19, X3
	022 Move X21, X2
	023 Move X22, X1
	024 Move X20, X0
	025 Move [X31+140], S0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {35}
	030 Move X0, 0x84A000
	031 Move X0, [X0+3632]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X23+1993], W8
	035 Move X23, 0xAD5000
	036 Move W8, [X23+1923]
	037 Compare W8, 0
	038 JumpIfNotEqual {44}
	039 Move X0, 0x7F0000
	040 Move X0, [X0+1440]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X23+1923], W8
	044 Move X8, 0x7F0000
	045 Move X8, [X8+1440]
	046 Move X8, [X8]
	047 Move X8, [X8+184]
	048 Move S0, [X8]
	049 Move S1, [X8+4]
	050 Move V10, [X8+8]
	051 Move [X31+48], S0
	052 Move [X31+56], S1
	053 Move [X31+56], S10
	054 Compare X21, 0
	055 JumpIfEqual {195}
	056 Move W8, [X21+24]
	057 Move [X31+44], S1
	058 Move [X31+136], S0
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move S13, [X20+16]
	061 Move S12, [X20+20]
	062 Move S15, [X20+8]
	063 Move S14, [X20+12]
	064 Move S9, [X20]
	065 Move S8, [X20+4]
	066 Move W9, 0x7F800000
	067 Move W26, 0x5556
	068 Move W24, W31
	069 Move TEMP, 0
	070 Not TEMP
	071 Move W23, TEMP
	072 Move S11, W9
	073 Move W25, 12
	074 NotImplemented "Instruction MOVK not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Compare X22, 0
	077 JumpIfEqual {195}
	078 Add X9, X21, W24
	079 NotImplemented "Instruction LDRSW not yet implemented."
	080 Move W10, [X22+24]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Add W11, W24, 1
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Add X11, X21, W11
	085 NotImplemented "Instruction LDRSW not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Add W12, W24, 2
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Add X8, X21, W12
	090 NotImplemented "Instruction LDRSW not yet implemented."
	091 NotImplemented "Instruction CMP not yet implemented."
	092 NotImplemented "Instruction MADD not yet implemented."
	093 NotImplemented "Instruction MADD not yet implemented."
	094 NotImplemented "Instruction MADD not yet implemented."
	095 Move S0, [X9+32]
	096 Move S1, [X9+36]
	097 Move V2, [X9+40]
	098 Move S3, [X10+32]
	099 Move S4, [X10+36]
	100 Move V5, [X10+40]
	101 Move X9, [X8+32]
	102 Move V6, [X8+40]
	103 Move [X31+16], S3
	104 Move [X31+20], S4
	105 Move [X31+28], S5
	106 Move [X31+4], S1
	107 Move [X31+12], S2
	108 Add X0, X31, 140
	109 Add X1, X31, 48
	110 Move [X31], S0
	111 Move V0, V9
	112 Move V1, V8
	113 Move V2, V15
	114 Move V3, V14
	115 Move V4, V13
	116 Move V5, V12
	117 Move [X31+40], S6
	118 Move [X31+32], X9
	119 Call Math.RayIntersectsTriangle2, X0, X1, X2, X3, X4, X5, X6
	120 Move TEMP, X0
	121 And TEMP, TEMP, 1
	122 Compare TEMP, 1
	123 JumpIfNotEqual {140}
	124 Move V0, [X31+140]
	125 NotImplemented "Instruction FCMP not yet implemented."
	126 Move V1, [X31+48]
	127 NotImplemented "Instruction SMADDL not yet implemented."
	128 Move X9, X8
	129 ShiftRight X9, 63
	130 And X9, X9, 0x7FFFFFFF
	131 Move X8, X8
	132 ShiftRight X8, 32
	133 And X8, X8, 0x7FFFFFFF
	134 Move [X31+136], S1
	135 Move S1, [X31+52]
	136 Move S10, [X31+56]
	137 Add W23, W8, W9
	138 Move V11, V0
	139 Move [X31+44], S1
	140 Move W8, [X21+24]
	141 Add W24, W24, 3
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Move W8, 0x7F800000
	144 Move TEMP, 0
	145 Not TEMP
	146 Move W23, TEMP
	147 Move S11, W8
	148 Move X21, 0x84A000
	149 Move X21, [X21+3632]
	150 Move X0, X20
	151 Move V0, V11
	152 Move X1, X31
	153 Call Ray.GetPoint, X0, V0
	154 Move X0, [X21]
	155 Move V8, V0
	156 Move V9, V1
	157 Move V12, V2
	158 Call 0x1C17F10
	159 Move V4, [X31+136]
	160 Move V5, [X31+44]
	161 Move V0, V11
	162 Move V1, V8
	163 Move V2, V9
	164 Move V3, V12
	165 Move V6, V10
	166 Move W1, W23
	167 Move X2, X31
	168 Move X20, X0
	169 Call RaycastHit..ctor, X0, V0, X1, X2, X3
	170 NotImplemented "Instruction ORN not yet implemented."
	171 Move [X19], X20
	172 Move X20, [X31+192]
	173 Move X19, [X31+200]
	174 Move X22, [X31+176]
	175 Move X21, [X31+184]
	176 Move X24, [X31+160]
	177 Move X23, [X31+168]
	178 Move X26, [X31+144]
	179 Move X25, [X31+152]
	180 Move X30, [X31+128]
	181 Move D9, [X31+112]
	182 Move D8, [X31+120]
	183 Move D11, [X31+96]
	184 Move D10, [X31+104]
	185 Move D13, [X31+80]
	186 Move D12, [X31+88]
	187 Move D15, [X31+64]
	188 Move D14, [X31+72]
	189 Move W0, W8
	190 ShiftRight W0, 31
	191 And W0, W0, 0x7FFFFFFF
	192 Add X31, X31, 208
	193 Return X0
	194 Call 0x1C17F28
	195 Call 0x1C17F20

Method: System.Boolean PointIsOccluded(UnityEngine.Camera cam, UnityEngine.ProBuilder.ProBuilderMesh pb, UnityEngine.Vector3 worldPoint)

Disassembly:
	0x03904DAC FMUL S5, S10, S1
	0x03904DB0 FMUL S6, S10, S2
	0x03904DB4 FMUL S0, S8, S0
	0x03904DB8 FMUL S1, S8, S1
	0x03904DBC FMUL S2, S9, S2
	0x03904DC0 FSUB S4, S4, S5
	0x03904DC4 FSUB S0, S6, S0
	0x03904DC8 FSUB S1, S1, S2
	0x03904DCC STP S8, S9, [X19]
	0x03904DD0 STP S3, S4, [X19 + 0x18]
	0x03904DD4 STP S0, S1, [X19 + 0x20]
	0x03904DD8 LDP X20, X19, [X31 + 0x70]
	0x03904DDC LDP X22, X21, [X31 + 0x60]
	0x03904DE0 LDP X30, X23, [X31 + 0x50]
	0x03904DE4 LDP D9, D8, [X31 + 0x40]
	0x03904DE8 LDP D11, D10, [X31 + 0x30]
	0x03904DEC LDP D13, D12, [X31 + 0x20]
	0x03904DF0 ADD X31, X31, 0x80
	0x03904DF4 RET
	0x03904DF8 BL 0x1C16F28
	0x03904DFC BL 0x1C16F20
	0x03904E00 ADRP X0, 0x7F4000
	0x03904E04 LDR X0, [X0 + 0x528]
	0x03904E08 BL 0x1C16D08
	0x03904E0C BL 0x1C16F10
	0x03904E10 MOV X19, X0
	0x03904E14 ADRP X0, 0x849000
	0x03904E18 LDR X0, [X0 + 0xE90]
	0x03904E1C BL 0x1C16D08
	0x03904E20 MOV X20, X0
	0x03904E24 ADRP X0, 0x849000
	0x03904E28 LDR X0, [X0 + 0xE98]
	0x03904E2C BL 0x1C16D08
	0x03904E30 MOV X2, X0
	0x03904E34 MOV X0, X19
	0x03904E38 MOV X1, X20
	0x03904E3C MOV X3, X31
	0x03904E40 BL 0x3315F7C
	0x03904E44 B 0x3904E78
	0x03904E48 ADRP X0, 0x7F7000
	0x03904E4C LDR X0, [X0 + 0x578]
	0x03904E50 BL 0x1C16D08
	0x03904E54 BL 0x1C16F10
	0x03904E58 MOV X19, X0
	0x03904E5C ADRP X0, 0x849000
	0x03904E60 LDR X0, [X0 + 0xEA0]
	0x03904E64 BL 0x1C16D08
	0x03904E68 MOV X1, X0
	0x03904E6C MOV X0, X19
	0x03904E70 MOV X2, X31
	0x03904E74 BL 0x3314A68
	0x03904E78 ADRP X0, 0x849000
	0x03904E7C LDR X0, [X0 + 0xE88]
	0x03904E80 BL 0x1C16D08
	0x03904E84 MOV X1, X0
	0x03904E88 MOV X0, X19
	0x03904E8C BL 0x1C16DEC
	0x03904E90 STP X30, X23, [X31 - 0x30]!
	0x03904E94 STP X22, X21, [X31 + 0x10]
	0x03904E98 STP X20, X19, [X31 + 0x20]
	0x03904E9C ADRP X22, 0xADD000
	0x03904EA0 ADRP X23, 0x7EF000
	0x03904EA4 LDRB W8, [X22 + 0x7CD]
	0x03904EA8 LDR X23, [X23 + 0x598]
	0x03904EAC MOV X20, X2
	0x03904EB0 MOV W21, W1
	0x03904EB4 MOV X19, X0
	0x03904EB8 TBNZ X8, 0x0, 0x3904EDC
	0x03904EBC ADRP X0, 0x849000
	0x03904EC0 LDR X0, [X0 + 0xEA8]
	0x03904EC4 BL 0x1C16CF4
	0x03904EC8 ADRP X0, 0x7EF000
	0x03904ECC LDR X0, [X0 + 0x598]
	0x03904ED0 BL 0x1C16CF4
	0x03904ED4 MOVZ W8, 0x1
	0x03904ED8 STRB W8, [X22 + 0x7CD]
	0x03904EDC LDR X0, [X23]
	0x03904EE0 LDR W8, [X0 + 0xE0]
	0x03904EE4 CBNZ W8, 0x3904EEC
	0x03904EE8 BL 0x1C16DFC
	0x03904EEC MOV X0, X19
	0x03904EF0 MOV X1, X31
	0x03904EF4 MOV X2, X31
	0x03904EF8 BL 0x3C3883C
	0x03904EFC TBNZ X0, 0x0, 0x3904F3C
	0x03904F00 CMP W21, 0x1
	0x03904F04 B.EQ 0x3904F84
	0x03904F08 CMP W21, 0x2
	0x03904F0C B.NE 0x3904F3C
	0x03904F10 ADRP X8, 0x849000
	0x03904F14 LDR X8, [X8 + 0xEA8]
	0x03904F18 MOV X0, X20
	0x03904F1C LDR X1, [X8]
	0x03904F20 BL 0x21C6044
	0x03904F24 MOV X1, X0
	0x03904F28 MOV X0, X19
	0x03904F2C LDP X20, X19, [X31 + 0x20]
	0x03904F30 LDP X22, X21, [X31 + 0x10]
	0x03904F34 LDP X30, X23, [X31], #0x30
	0x03904F38 B 0x3904FB0
	0x03904F3C ADRP X19, 0xAD4000
	0x03904F40 LDRB W8, [X19 + 0x793]
	0x03904F44 CBNZ W8, 0x3904F5C
	0x03904F48 ADRP X0, 0x7F0000
	0x03904F4C LDR X0, [X0 + 0x5A8]
	0x03904F50 BL 0x1C16CF4
	0x03904F54 MOVZ W8, 0x1
	0x03904F58 STRB W8, [X19 + 0x793]
	0x03904F5C ADRP X8, 0x7F0000
	0x03904F60 LDR X8, [X8 + 0x5A8]
	0x03904F64 LDP X20, X19, [X31 + 0x20]
	0x03904F68 LDP X22, X21, [X31 + 0x10]
	0x03904F6C LDR X8, [X8]
	0x03904F70 LDR X8, [X8 + 0xB8]
	0x03904F74 LDP S0, S1, [X8]
	0x03904F78 LDP S2, S3, [X8 + 0x8]
	0x03904F7C LDP X30, X23, [X31], #0x30
	0x03904F80 RET
	0x03904F84 CBZ X19, 0x3904FAC
	0x03904F88 MOV X0, X19
	0x03904F8C MOV X1, X31
	0x03904F90 BL 0x3C32E90
	0x03904F94 CBZ X0, 0x3904FAC
	0x03904F98 LDP X20, X19, [X31 + 0x20]
	0x03904F9C LDP X22, X21, [X31 + 0x10]
	0x03904FA0 MOV X1, X31
	0x03904FA4 LDP X30, X23, [X31], #0x30
	0x03904FA8 B 0x3C3DEB4
	0x03904FAC BL 0x1C16F20
	0x03904FB0 STR X30, [X31 - 0x30]!
	0x03904FB4 STP X22, X21, [X31 + 0x10]
	0x03904FB8 STP X20, X19, [X31 + 0x20]
	0x03904FBC ADRP X21, 0xADD000
	0x03904FC0 ADRP X22, 0x7EF000
	0x03904FC4 LDRB W8, [X21 + 0x7CE]
	0x03904FC8 LDR X22, [X22 + 0x598]
	0x03904FCC MOV X20, X1
	0x03904FD0 MOV X19, X0
	0x03904FD4 TBNZ X8, 0x0, 0x3904FEC
	0x03904FD8 ADRP X0, 0x7EF000
	0x03904FDC LDR X0, [X0 + 0x598]
	0x03904FE0 BL 0x1C16CF4
	0x03904FE4 MOVZ W8, 0x1
	0x03904FE8 STRB W8, [X21 + 0x7CE]
	0x03904FEC LDR X0, [X22]
	0x03904FF0 LDR W8, [X0 + 0xE0]
	0x03904FF4 CBNZ W8, 0x3904FFC
	0x03904FF8 BL 0x1C16DFC
	0x03904FFC MOV X0, X19
	0x03905000 MOV X1, X31
	0x03905004 MOV X2, X31
	0x03905008 BL 0x3C3883C
	0x0390500C TBZ X0, 0x0, 0x3905058
	0x03905010 ADRP X19, 0xAD3000
	0x03905014 LDRB W8, [X19 + 0x793]
	0x03905018 CBNZ W8, 0x3905030
	0x0390501C ADRP X0, 0x7EF000
	0x03905020 LDR X0, [X0 + 0x5A8]
	0x03905024 BL 0x1C16CF4
	0x03905028 MOVZ W8, 0x1
	0x0390502C STRB W8, [X19 + 0x793]
	0x03905030 ADRP X8, 0x7EF000
	0x03905034 LDR X8, [X8 + 0x5A8]
	0x03905038 LDP X20, X19, [X31 + 0x20]
	0x0390503C LDP X22, X21, [X31 + 0x10]
	0x03905040 LDR X8, [X8]
	0x03905044 LDR X8, [X8 + 0xB8]
	0x03905048 LDP S0, S1, [X8]
	0x0390504C LDP S2, S3, [X8 + 0x8]
	0x03905050 LDR X30, [X31], #0x30
	0x03905054 RET
	0x03905058 MOV X0, X19
	0x0390505C MOV X1, X20
	0x03905060 BL 0x38FF904

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+64], D15
	003 Move [X31+72], D14
	004 Move [X31+80], D13
	005 Move [X31+88], D12
	006 Move [X31+96], D11
	007 Move [X31+104], D10
	008 Move [X31+112], D9
	009 Move [X31+120], D8
	010 Move [X31+128], X30
	011 Move [X31+136], X23
	012 Move [X31+144], X22
	013 Move [X31+152], X21
	014 Move [X31+160], X20
	015 Move [X31+168], X19
	016 Move [X31+56], X31
	017 Compare X0, 0
	018 JumpIfEqual {205}
	019 Move X19, X1
	020 Move X1, X31
	021 Move V14, V2
	022 Move V15, V1
	023 Move V8, V0
	024 Move X20, X0
	025 Call Component.get_transform, X0
	026 Compare X0, 0
	027 JumpIfEqual {205}
	028 Move X1, X31
	029 Call Transform.get_position, X0
	030 Move X22, 0xAD5000
	031 Move W8, [X22+1925]
	032 Move V11, V0
	033 Move V12, V1
	034 Move V13, V2
	035 Compare W8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, 0x7F0000
	038 Move X0, [X0+1448]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X22+1925], W8
	042 Move X21, 0x7F0000
	043 Move X21, [X21+1448]
	044 Move [X31+20], S8
	045 Subtract S11, S11, S8
	046 Subtract S10, S12, S15
	047 Move X0, [X21]
	048 Subtract S8, S13, S14
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X8, -48336896
	054 Multiply S0, S11, S11
	055 Multiply S1, S10, S10
	056 Move V9, [X8+380]
	057 Add S0, S0, S1
	058 Multiply S1, S8, S8
	059 Add S0, S1, S0
	060 NotImplemented "Instruction FSQRT not yet implemented."
	061 NotImplemented "Instruction FCMP not yet implemented."
	062 Move [X31+24], S15
	063 Move [X31+32], S14
	064 NotImplemented "Instruction FDIV not yet implemented."
	065 NotImplemented "Instruction FDIV not yet implemented."
	066 NotImplemented "Instruction FDIV not yet implemented."
	067 Move X23, 0xAD5000
	068 Move W8, [X23+1923]
	069 Compare W8, 0
	070 JumpIfNotEqual {76}
	071 Move X0, 0x7F0000
	072 Move X0, [X0+1440]
	073 Call 0x1C17CF4
	074 Move W8, 1
	075 Move [X23+1923], W8
	076 Move X8, 0x7F0000
	077 Move X8, [X8+1440]
	078 Move X8, [X8]
	079 Move X8, [X8+184]
	080 Move S11, [X8]
	081 Move S10, [X8+4]
	082 Move V8, [X8+8]
	083 Move W8, [X22+1925]
	084 Compare W8, 0
	085 JumpIfNotEqual {91}
	086 Move X0, 0x7F0000
	087 Move X0, [X0+1448]
	088 Call 0x1C17CF4
	089 Move W8, 1
	090 Move [X22+1925], W8
	091 Move X0, [X21]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Multiply S0, S11, S11
	097 Multiply S1, S10, S10
	098 Add S0, S0, S1
	099 Multiply S1, S8, S8
	100 Add S0, S1, S0
	101 NotImplemented "Instruction FSQRT not yet implemented."
	102 NotImplemented "Instruction FCMP not yet implemented."
	103 NotImplemented "Instruction FDIV not yet implemented."
	104 NotImplemented "Instruction FDIV not yet implemented."
	105 NotImplemented "Instruction FDIV not yet implemented."
	106 Move X22, 0xAD5000
	107 Move W8, [X22+1923]
	108 Compare W8, 0
	109 JumpIfNotEqual {115}
	110 Move X0, 0x7F0000
	111 Move X0, [X0+1440]
	112 Call 0x1C17CF4
	113 Move W8, 1
	114 Move [X22+1923], W8
	115 Move X8, 0x7F0000
	116 Move X8, [X8+1440]
	117 Move X8, [X8]
	118 Move X8, [X8+184]
	119 Move S9, [X8]
	120 Move S12, [X8+4]
	121 Move V13, [X8+8]
	122 Move X0, X20
	123 Move X1, X31
	124 Call Component.get_transform, X0
	125 Compare X0, 0
	126 JumpIfEqual {205}
	127 Move X1, X31
	128 Move [X31], S13
	129 Move [X31+8], S12
	130 Move [X31+8], S9
	131 Move [X31+16], S10
	132 Move [X31+16], S11
	133 Call Transform.get_position, X0
	134 Move X20, 0xAD5000
	135 Move W8, [X20+2140]
	136 Move V11, V0
	137 Move V12, V1
	138 Move V13, V2
	139 Compare W8, 0
	140 JumpIfNotEqual {146}
	141 Move X0, 0x7F0000
	142 Move X0, [X0+1448]
	143 Call 0x1C17CF4
	144 Move W8, 1
	145 Move [X20+2140], W8
	146 Move X0, [X21]
	147 Move S15, [X31+20]
	148 Move S14, [X31+24]
	149 Move V9, [X31+28]
	150 Move W8, [X0+224]
	151 Subtract S10, S11, S15
	152 Subtract S12, S12, S14
	153 Subtract S11, S13, S9
	154 Compare W8, 0
	155 JumpIfNotEqual {157}
	156 Call 0x1C17DFC
	157 Move X8, -48340992
	158 Multiply S0, S10, S10
	159 Multiply S1, S12, S12
	160 Multiply S2, S11, S11
	161 Move V3, [X8+3880]
	162 Add S0, S0, S1
	163 Add S0, S2, S0
	164 Move S2, [X31+12]
	165 Move S4, [X31+16]
	166 Multiply S1, S8, S3
	167 NotImplemented "Instruction FSQRT not yet implemented."
	168 Add X0, X31, 32
	169 Multiply S2, S2, S3
	170 Multiply S3, S4, S3
	171 Add S4, S9, S1
	172 Move V1, [X31+8]
	173 Add S2, S14, S2
	174 Add S3, S15, S3
	175 Add X2, X31, 56
	176 Move [X31+40], S4
	177 Move [X31+48], S1
	178 Move V4, [X31+4]
	179 Move V1, [X31]
	180 Move W3, 2
	181 Move X1, X19
	182 Move X4, X31
	183 Move [X31+32], S3
	184 Move [X31+40], S2
	185 Move [X31+48], S4
	186 Move [X31+56], S1
	187 Call HandleUtility.FaceRaycast, X0, X1, X2, V0, X3, X4
	188 Move X20, [X31+160]
	189 Move X19, [X31+168]
	190 Move X22, [X31+144]
	191 Move X21, [X31+152]
	192 Move X30, [X31+128]
	193 Move X23, [X31+136]
	194 Move D9, [X31+112]
	195 Move D8, [X31+120]
	196 Move D11, [X31+96]
	197 Move D10, [X31+104]
	198 Move D13, [X31+80]
	199 Move D12, [X31+88]
	200 Move D15, [X31+64]
	201 Move D14, [X31+72]
	202 And W0, W0, 1
	203 Add X31, X31, 176
	204 Return X0
	205 Call 0x1C17F20

Method: UnityEngine.Quaternion GetRotation(UnityEngine.ProBuilder.ProBuilderMesh mesh, System.Collections.Generic.IEnumerable`1<System.Int32> indices)

Disassembly:
	0x03905064 MOV X1, X0
	0x03905068 MOV X0, X19
	0x0390506C LDP X20, X19, [X31 + 0x20]
	0x03905070 LDP X22, X21, [X31 + 0x10]
	0x03905074 LDR X30, [X31], #0x30
	0x03905078 B 0x390483C
	0x0390507C STP X30, X23, [X31 - 0x30]!
	0x03905080 STP X22, X21, [X31 + 0x10]
	0x03905084 STP X20, X19, [X31 + 0x20]
	0x03905088 ADRP X22, 0xADC000
	0x0390508C ADRP X23, 0x7EE000
	0x03905090 LDRB W8, [X22 + 0x7CF]
	0x03905094 LDR X23, [X23 + 0x598]
	0x03905098 MOV X20, X2
	0x0390509C MOV W21, W1
	0x039050A0 MOV X19, X0
	0x039050A4 TBNZ X8, 0x0, 0x39050BC
	0x039050A8 ADRP X0, 0x7EE000
	0x039050AC LDR X0, [X0 + 0x598]
	0x039050B0 BL 0x1C16CF4
	0x039050B4 MOVZ W8, 0x1
	0x039050B8 STRB W8, [X22 + 0x7CF]
	0x039050BC LDR X0, [X23]
	0x039050C0 LDR W8, [X0 + 0xE0]
	0x039050C4 CBNZ W8, 0x39050CC
	0x039050C8 BL 0x1C16DFC
	0x039050CC MOV X0, X19
	0x039050D0 MOV X1, X31
	0x039050D4 MOV X2, X31
	0x039050D8 BL 0x3C3883C
	0x039050DC TBNZ X0, 0x0, 0x3905120
	0x039050E0 CMP W21, 0x1
	0x039050E4 B.EQ 0x3905168
	0x039050E8 CMP W21, 0x2
	0x039050EC B.NE 0x3905120
	0x039050F0 CBZ X19, 0x3905190
	0x039050F4 MOV X0, X19
	0x039050F8 MOV X1, X31
	0x039050FC BL 0x391D12C
	0x03905100 CMP W0, 0x1
	0x03905104 B.LT 0x390516C
	0x03905108 MOV X0, X19
	0x0390510C MOV X1, X20
	0x03905110 LDP X20, X19, [X31 + 0x20]
	0x03905114 LDP X22, X21, [X31 + 0x10]
	0x03905118 LDP X30, X23, [X31], #0x30
	0x0390511C B 0x3904064
	0x03905120 ADRP X19, 0xAD3000
	0x03905124 LDRB W8, [X19 + 0x793]
	0x03905128 CBNZ W8, 0x3905140
	0x0390512C ADRP X0, 0x7EF000
	0x03905130 LDR X0, [X0 + 0x5A8]
	0x03905134 BL 0x1C16CF4
	0x03905138 MOVZ W8, 0x1
	0x0390513C STRB W8, [X19 + 0x793]
	0x03905140 ADRP X8, 0x7EF000
	0x03905144 LDR X8, [X8 + 0x5A8]
	0x03905148 LDP X20, X19, [X31 + 0x20]
	0x0390514C LDP X22, X21, [X31 + 0x10]
	0x03905150 LDR X8, [X8]
	0x03905154 LDR X8, [X8 + 0xB8]
	0x03905158 LDP S0, S1, [X8]
	0x0390515C LDP S2, S3, [X8 + 0x8]
	0x03905160 LDP X30, X23, [X31], #0x30
	0x03905164 RET
	0x03905168 CBZ X19, 0x3905190
	0x0390516C MOV X0, X19
	0x03905170 MOV X1, X31
	0x03905174 BL 0x3C32E90
	0x03905178 CBZ X0, 0x3905190
	0x0390517C LDP X20, X19, [X31 + 0x20]
	0x03905180 LDP X22, X21, [X31 + 0x10]
	0x03905184 MOV X1, X31
	0x03905188 LDP X30, X23, [X31], #0x30
	0x0390518C B 0x3C3DEB4
	0x03905190 BL 0x1C16F20
	0x03905194 STR X30, [X31 - 0x30]!
	0x03905198 STP X22, X21, [X31 + 0x10]
	0x0390519C STP X20, X19, [X31 + 0x20]
	0x039051A0 ADRP X21, 0xADC000
	0x039051A4 ADRP X22, 0x7EE000
	0x039051A8 LDRB W8, [X21 + 0x7D0]
	0x039051AC LDR X22, [X22 + 0x598]
	0x039051B0 MOV W20, W1
	0x039051B4 MOV X19, X0
	0x039051B8 TBNZ X8, 0x0, 0x39051DC
	0x039051BC ADRP X0, 0x7EF000
	0x039051C0 LDR X0, [X0 + 0xE58]
	0x039051C4 BL 0x1C16CF4
	0x039051C8 ADRP X0, 0x7EE000
	0x039051CC LDR X0, [X0 + 0x598]
	0x039051D0 BL 0x1C16CF4
	0x039051D4 MOVZ W8, 0x1
	0x039051D8 STRB W8, [X21 + 0x7D0]
	0x039051DC LDR X0, [X22]
	0x039051E0 LDR W8, [X0 + 0xE0]
	0x039051E4 CBNZ W8, 0x39051EC
	0x039051E8 BL 0x1C16DFC
	0x039051EC MOV X0, X19
	0x039051F0 MOV X1, X31
	0x039051F4 MOV X2, X31
	0x039051F8 BL 0x3C3883C
	0x039051FC TBZ X0, 0x0, 0x3905248
	0x03905200 ADRP X19, 0xAD3000
	0x03905204 LDRB W8, [X19 + 0x793]
	0x03905208 CBNZ W8, 0x3905220
	0x0390520C ADRP X0, 0x7EF000
	0x03905210 LDR X0, [X0 + 0x5A8]
	0x03905214 BL 0x1C16CF4
	0x03905218 MOVZ W8, 0x1
	0x0390521C STRB W8, [X19 + 0x793]
	0x03905220 ADRP X8, 0x7EF000
	0x03905224 LDR X8, [X8 + 0x5A8]
	0x03905228 LDP X20, X19, [X31 + 0x20]
	0x0390522C LDP X22, X21, [X31 + 0x10]
	0x03905230 LDR X8, [X8]
	0x03905234 LDR X8, [X8 + 0xB8]
	0x03905238 LDP S0, S1, [X8]
	0x0390523C LDP S2, S3, [X8 + 0x8]
	0x03905240 LDR X30, [X31], #0x30
	0x03905244 RET
	0x03905248 TBNZ X20, 0x1F, 0x3905288
	0x0390524C ADRP X8, 0x7EF000
	0x03905250 LDR X8, [X8 + 0xE58]
	0x03905254 MOVZ W1, 0x1
	0x03905258 LDR X0, [X8]
	0x0390525C BL 0x1C16D6C
	0x03905260 CBZ X0, 0x39052B0
	0x03905264 LDR W8, [X0 + 0x18]
	0x03905268 MOV X1, X0
	0x0390526C CBZ W8, 0x39052B4
	0x03905270 STR W20, [X1 + 0x20]
	0x03905274 MOV X0, X19
	0x03905278 LDP X20, X19, [X31 + 0x20]
	0x0390527C LDP X22, X21, [X31 + 0x10]
	0x03905280 LDR X30, [X31], #0x30
	0x03905284 B 0x3904064
	0x03905288 CBZ X19, 0x39052B0
	0x0390528C MOV X0, X19
	0x03905290 MOV X1, X31
	0x03905294 BL 0x3C32E90
	0x03905298 CBZ X0, 0x39052B0
	0x0390529C LDP X20, X19, [X31 + 0x20]
	0x039052A0 LDP X22, X21, [X31 + 0x10]
	0x039052A4 MOV X1, X31
	0x039052A8 LDR X30, [X31], #0x30
	0x039052AC B 0x3C3DEB4
	0x039052B0 BL 0x1C16F20
	0x039052B4 BL 0x1C16F28
	0x039052B8 SUB X31, X31, 0x50
	0x039052BC STR X30, [X31 + 0x20]
	0x039052C0 STP X22, X21, [X31 + 0x30]
	0x039052C4 STP X20, X19, [X31 + 0x40]
	0x039052C8 ADRP X20, 0xADC000
	0x039052CC LDRB W8, [X20 + 0x7D1]
	0x039052D0 MOV X21, X1
	0x039052D4 MOV X19, X0
	0x039052D8 TBNZ X8, 0x0, 0x39052F0
	0x039052DC ADRP X0, 0x848000
	0x039052E0 LDR X0, [X0 + 0xE80]
	0x039052E4 BL 0x1C16CF4
	0x039052E8 MOVZ W8, 0x1
	0x039052EC STRB W8, [X20 + 0x7D1]
	0x039052F0 CBZ X19, 0x3905364
	0x039052F4 ADRP X22, 0x848000
	0x039052F8 LDR X22, [X22 + 0xE80]
	0x039052FC MOV X0, X19
	0x03905300 MOV X1, X31
	0x03905304 BL 0x3C32E90
	0x03905308 LDR X1, [X22]
	0x0390530C LDR X20, [X19 + 0x58]
	0x03905310 MOV X19, X0
	0x03905314 MOV X0, X21
	0x03905318 BL 0x21C69A4
	0x0390531C CBZ X0, 0x3905364
	0x03905320 LDR X1, [X0 + 0x58]
	0x03905324 CBNZ X1, 0x3905330
	0x03905328 BL 0x38FFDEC
	0x0390532C MOV X1, X0
	0x03905330 ADD X8, X31, 0x8
	0x03905334 MOV X0, X20
	0x03905338 BL 0x3905368
	0x0390533C CBZ X19, 0x3905364
	0x03905340 LDP S0, S1, [X31 + 0x8]
	0x03905344 LDR V2, [X31 + 0x10]
	0x03905348 MOV X0, X19
	0x0390534C LDP X20, X19, [X31 + 0x40]
	0x03905350 LDP X22, X21, [X31 + 0x30]
	0x03905354 LDR X30, [X31 + 0x20]
	0x03905358 MOV X1, X31
	0x0390535C ADD X31, X31, 0x50
	0x03905360 B 0x3C3DE4C
	0x03905364 BL 0x1C16F20
	0x03905368 STP D13, D12, [X31 - 0x70]!
	0x0390536C STP D11, D10, [X31 + 0x10]
	0x03905370 STP D9, D8, [X31 + 0x20]
	0x03905374 STP X30, X25, [X31 + 0x30]
	0x03905378 STP X24, X23, [X31 + 0x40]
	0x0390537C STP X22, X21, [X31 + 0x50]
	0x03905380 STP X20, X19, [X31 + 0x60]
	0x03905384 ADRP X22, 0xADC000
	0x03905388 LDRB W9, [X22 + 0x7FF]
	0x0390538C MOV X21, X1
	0x03905390 MOV X20, X0
	0x03905394 MOV X19, X8
	0x03905398 TBNZ X9, 0x0, 0x39053BC
	0x0390539C ADRP X0, 0x816000
	0x039053A0 LDR X0, [X0 + 0x7A0]
	0x039053A4 BL 0x1C16CF4
	0x039053A8 ADRP X0, 0x816000
	0x039053AC LDR X0, [X0 + 0x7A8]
	0x039053B0 BL 0x1C16CF4
	0x039053B4 MOVZ W8, 0x1
	0x039053B8 STRB W8, [X22 + 0x7FF]
	0x039053BC ADRP X22, 0x816000
	0x039053C0 LDR X22, [X22 + 0x7A0]
	0x039053C4 CBZ X21, 0x3905428
	0x039053C8 LDR X8, [X21]
	0x039053CC LDR X1, [X22]
	0x039053D0 LDRH W9, [X8 + 0x12E]
	0x039053D4 CBZ X9, 0x39053F8
	0x039053D8 LDR X10, [X8 + 0xB0]
	0x039053DC ADD X10, X10, 0x8
	0x039053E0 LDUR X11, [X10 - 0x8]
	0x039053E4 CMP X11, X1
	0x039053E8 B.EQ 0x3905408
	0x039053EC SUBS X9, X9, 0x1
	0x039053F0 ADD X10, X10, 0x10
	0x039053F4 B.NE 0x39053E0
	0x039053F8 MOV X0, X21
	0x039053FC MOV W2, W31
	0x03905400 BL 0x1C5C788
	0x03905404 B 0x3905414
	0x03905408 LDRSW X9, [X10]
	0x0390540C ADD X8, X8, X9, 0x4, LSL
	0x03905410 ADD X0, X8, 0x138
	0x03905414 LDP X8, X1, [X0]
	0x03905418 MOV X0, X21
	0x0390541C BLR X8
	0x03905420 CMP W0, 0x1
	0x03905424 B.LT 0x390548C
	0x03905428 CBZ X20, 0x3905934
	0x0390542C LDR W8, [X20 + 0x18]
	0x03905430 CMP W8, 0x0
	0x03905434 B.LE 0x390548C
	0x03905438 CMP X21, 0x0
	0x0390543C CSEL X23, X31, X20, EQ
	0x03905440 CBZ X21, 0x3905498
	0x03905444 ADRP X10, 0x816000
	0x03905448 LDR X8, [X21]
	0x0390544C LDR X10, [X10 + 0x7A8]
	0x03905450 LDRH W9, [X8 + 0x12E]
	0x03905454 LDR X1, [X10]
	0x03905458 CBZ X9, 0x390547C
	0x0390545C LDR X10, [X8 + 0xB0]
	0x03905460 ADD X10, X10, 0x8
	0x03905464 LDUR X11, [X10 - 0x8]
	0x03905468 CMP X11, X1
	0x0390546C B.EQ 0x39054A4
	0x03905470 SUBS X9, X9, 0x1
	0x03905474 ADD X10, X10, 0x10
	0x03905478 B.NE 0x3905464
	0x0390547C MOV X0, X21
	0x03905480 MOV W2, W31
	0x03905484 BL 0x1C5C788
	0x03905488 B 0x39054B0
	0x0390548C STP X31, X31, [X19]
	0x03905490 STR X31, [X19 + 0x10]
	0x03905494 B 0x3905910
	0x03905498 MOV X8, X31
	0x0390549C MOV X23, X20
	0x039054A0 B 0x39054C8
	0x039054A4 LDRSW X9, [X10]
	0x039054A8 ADD X8, X8, X9, 0x4, LSL
	0x039054AC ADD X0, X8, 0x138
	0x039054B0 LDP X8, X2, [X0]
	0x039054B4 MOV X0, X21
	0x039054B8 MOV W1, W31
	0x039054BC BLR X8
	0x039054C0 CBZ X21, 0x3905934
	0x039054C4 SXTW X8, W0
	0x039054C8 LDR W9, [X23 + 0x18]
	0x039054CC CMP W8, W9
	0x039054D0 B.CS 0x3905930
	0x039054D4 MOVZ W9, 0xC
	0x039054D8 MADD X8, X8, X9, X23
	0x039054DC LDP S10, S8, [X8 + 0x20]
	0x039054E0 LDR V9, [X8 + 0x28]
	0x039054E4 CBZ X21, 0x3905528
	0x039054E8 LDR X8, [X21]
	0x039054EC LDR X1, [X22]
	0x039054F0 LDRH W9, [X8 + 0x12E]
	0x039054F4 CBZ X9, 0x3905518
	0x039054F8 LDR X10, [X8 + 0xB0]
	0x039054FC ADD X10, X10, 0x8
	0x03905500 LDUR X11, [X10 - 0x8]
	0x03905504 CMP X11, X1
	0x03905508 B.EQ 0x3905590
	0x0390550C SUBS X9, X9, 0x1
	0x03905510 ADD X10, X10, 0x10
	0x03905514 B.NE 0x3905500
	0x03905518 MOV X0, X21
	0x0390551C MOV W2, W31
	0x03905520 BL 0x1C5C788
	0x03905524 B 0x390559C
	0x03905528 LDR X8, [X20 + 0x18]
	0x0390552C CMP W8, 0x2
	0x03905530 B.LT 0x39058C4
	0x03905534 AND X9, X8, 0x0
	0x03905538 ADD X8, X20, 0x34
	0x0390553C SUB X9, X9, 0x1
	0x03905540 MOV V13.16B, V10.16B
	0x03905544 MOV V12.16B, V8.16B
	0x03905548 MOV V11.16B, V9.16B
	0x0390554C LDP S0, S1, [X8 - 0x8]
	0x03905550 FCMP S0, S10
	0x03905554 FCSEL S10, S0, S10, MI
	0x03905558 FCMP S0, S13
	0x0390555C FCSEL S13, S0, S13, GT
	0x03905560 LDR V0, [X8], #0xC
	0x03905564 FCMP S1, S8
	0x03905568 FCSEL S8, S1, S8, MI
	0x0390556C FCMP S1, S12
	0x03905570 FCSEL S12, S1, S12, GT
	0x03905574 FCMP S0, S9
	0x03905578 FCSEL S9, S0, S9, MI
	0x0390557C FCMP S0, S11
	0x03905580 FCSEL S11, S0, S11, GT
	0x03905584 SUBS X9, X9, 0x1
	0x03905588 B.NE 0x390554C
	0x0390558C B 0x39058D0
	0x03905590 LDRSW X9, [X10]
	0x03905594 ADD X8, X8, X9, 0x4, LSL
	0x03905598 ADD X0, X8, 0x138
	0x0390559C LDP X8, X1, [X0]
	0x039055A0 MOV X0, X21
	0x039055A4 BLR X8
	0x039055A8 CMP W0, 0x2
	0x039055AC B.LT 0x39058C4
	0x039055B0 ADRP X24, 0x816000
	0x039055B4 LDR X24, [X24 + 0x7A8]
	0x039055B8 MOV W22, W0
	0x039055BC MOVZ W23, 0x1
	0x039055C0 MOVZ W25, 0xC
	0x039055C4 MOV V13.16B, V10.16B
	0x039055C8 MOV V12.16B, V8.16B
	0x039055CC MOV V11.16B, V9.16B
	0x039055D0 LDR X8, [X21]
	0x039055D4 LDR X1, [X24]
	0x039055D8 LDRH W9, [X8 + 0x12E]
	0x039055DC CBZ X9, 0x3905600
	0x039055E0 LDR X10, [X8 + 0xB0]
	0x039055E4 ADD X10, X10, 0x8
	0x039055E8 LDUR X11, [X10 - 0x8]
	0x039055EC CMP X11, X1
	0x039055F0 B.EQ 0x3905610
	0x039055F4 SUBS X9, X9, 0x1
	0x039055F8 ADD X10, X10, 0x10
	0x039055FC B.NE 0x39055E8
	0x03905600 MOV X0, X21
	0x03905604 MOV W2, W31
	0x03905608 BL 0x1C5C788
	0x0390560C B 0x390561C
	0x03905610 LDRSW X9, [X10]
	0x03905614 ADD X8, X8, X9, 0x4, LSL
	0x03905618 ADD X0, X8, 0x138
	0x0390561C LDP X8, X2, [X0]
	0x03905620 MOV X0, X21
	0x03905624 MOV W1, W23
	0x03905628 BLR X8
	0x0390562C LDR W8, [X20 + 0x18]
	0x03905630 CMP W0, W8
	0x03905634 B.CS 0x3905930
	0x03905638 LDR X8, [X21]
	0x0390563C NOP
	0x03905640 SMADDL X9, X0, X25, X20
	0x03905644 LDR V0, [X9 + 0x20]
	0x03905648 LDR X1, [X24]
	0x0390564C LDRH W9, [X8 + 0x12E]
	0x03905650 FCMP S0, S10
	0x03905654 FCSEL S10, S0, S10, MI
	0x03905658 CBZ X9, 0x390567C
	0x0390565C LDR X10, [X8 + 0xB0]
	0x03905660 ADD X10, X10, 0x8
	0x03905664 LDUR X11, [X10 - 0x8]
	0x03905668 CMP X11, X1
	0x0390566C B.EQ 0x390568C
	0x03905670 SUBS X9, X9, 0x1
	0x03905674 ADD X10, X10, 0x10
	0x03905678 B.NE 0x3905664
	0x0390567C MOV X0, X21
	0x03905680 MOV W2, W31
	0x03905684 BL 0x1C5C788
	0x03905688 B 0x3905698
	0x0390568C LDRSW X9, [X10]
	0x03905690 ADD X8, X8, X9, 0x4, LSL
	0x03905694 ADD X0, X8, 0x138
	0x03905698 LDP X8, X2, [X0]
	0x0390569C MOV X0, X21
	0x039056A0 MOV W1, W23
	0x039056A4 BLR X8
	0x039056A8 LDR W8, [X20 + 0x18]
	0x039056AC CMP W0, W8
	0x039056B0 B.CS 0x3905930
	0x039056B4 LDR X8, [X21]
	0x039056B8 NOP
	0x039056BC SMADDL X9, X0, X25, X20
	0x039056C0 LDR V0, [X9 + 0x20]
	0x039056C4 LDR X1, [X24]
	0x039056C8 LDRH W9, [X8 + 0x12E]
	0x039056CC FCMP S0, S13
	0x039056D0 FCSEL S13, S0, S13, GT
	0x039056D4 CBZ X9, 0x39056F8
	0x039056D8 LDR X10, [X8 + 0xB0]
	0x039056DC ADD X10, X10, 0x8
	0x039056E0 LDUR X11, [X10 - 0x8]
	0x039056E4 CMP X11, X1
	0x039056E8 B.EQ 0x3905708
	0x039056EC SUBS X9, X9, 0x1
	0x039056F0 ADD X10, X10, 0x10
	0x039056F4 B.NE 0x39056E0
	0x039056F8 MOV X0, X21
	0x039056FC MOV W2, W31
	0x03905700 BL 0x1C5C788
	0x03905704 B 0x3905714
	0x03905708 LDRSW X9, [X10]
	0x0390570C ADD X8, X8, X9, 0x4, LSL
	0x03905710 ADD X0, X8, 0x138
	0x03905714 LDP X8, X2, [X0]
	0x03905718 MOV X0, X21

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X29
	011 Move [X31+120], X30
	012 Move [X31+128], X28
	013 Move [X31+136], X27
	014 Move [X31+144], X26
	015 Move [X31+152], X25
	016 Move [X31+160], X24
	017 Move [X31+168], X23
	018 Move [X31+176], X22
	019 Move [X31+184], X21
	020 Move [X31+192], X20
	021 Move [X31+200], X19
	022 Move X21, 0xADD000
	023 Move W8, [X21+1994]
	024 Move X20, X1
	025 Move X19, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {47}
	030 Move X0, 0x7EF000
	031 Move X0, [X0+3584]
	032 Call 0x1C17CF4
	033 Move X0, 0x817000
	034 Move X0, [X0+1976]
	035 Call 0x1C17CF4
	036 Move X0, 0x817000
	037 Move X0, [X0+1984]
	038 Call 0x1C17CF4
	039 Move X0, 0x7EF000
	040 Move X0, [X0+3608]
	041 Call 0x1C17CF4
	042 Move X0, 0x849000
	043 Move X0, [X0+3704]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X21+1994], W8
	047 Compare X19, 0
	048 JumpIfEqual {417}
	049 Move W1, 64
	050 Move X0, X19
	051 Move X2, X31
	052 Call ProBuilderMesh.HasArrays, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {67}
	057 Move X8, 0x849000
	058 Move X8, [X8+3704]
	059 Move X0, [X8]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X19
	065 Move X1, X31
	066 Call Normals.CalculateNormals, X0
	067 Move W1, 128
	068 Move X0, X19
	069 Move X2, X31
	070 Call ProBuilderMesh.HasArrays, X0, X1
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {85}
	075 Move X8, 0x849000
	076 Move X8, [X8+3704]
	077 Move X0, [X8]
	078 Move W8, [X0+224]
	079 Compare W8, 0
	080 JumpIfNotEqual {82}
	081 Call 0x1C17DFC
	082 Move X0, X19
	083 Move X1, X31
	084 Call Normals.CalculateTangents, X0
	085 Move X24, 0xAD4000
	086 Move W8, [X24+1923]
	087 Move X27, [X19+120]
	088 Move X21, [X19+128]
	089 Compare W8, 0
	090 JumpIfNotEqual {96}
	091 Move X0, 0x7EF000
	092 Move X0, [X0+1440]
	093 Call 0x1C17CF4
	094 Move W8, 1
	095 Move [X24+1923], W8
	096 Move X25, 0x7EF000
	097 Move X25, [X25+1440]
	098 Move X22, 0xAD4000
	099 Move W9, [X22+3674]
	100 Move X8, [X25]
	101 Move X8, [X8+184]
	102 Move V13, [X8]
	103 NotImplemented "Instruction LDUR not yet implemented."
	104 Compare W9, 0
	105 JumpIfNotEqual {111}
	106 Move X0, 0x7F6000
	107 Move X0, [X0+2464]
	108 Call 0x1C17CF4
	109 Move W8, 1
	110 Move [X22+3674], W8
	111 Compare X20, 0
	112 JumpIfEqual {417}
	113 Move X23, 0x7F6000
	114 Move X23, [X23+2464]
	115 Move X11, 0x817000
	116 Move X8, [X20]
	117 Move X9, [X23]
	118 Move X10, [X9+184]
	119 Move X11, [X11+1976]
	120 NotImplemented "Instruction LDRH not yet implemented."
	121 Move D14, [X10]
	122 Move D15, [X10+8]
	123 Move X1, [X11]
	124 Compare X9, 0
	125 JumpIfEqual {132}
	126 Move X10, [X8+176]
	127 Add X10, X10, 8
	128 NotImplemented "Instruction LDUR not yet implemented."
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Subtract X9, X9, 1
	131 Add X10, X10, 16
	132 Move X0, X20
	133 Move W2, W31
	134 Call 0x1C5D788
	135 NotImplemented "Instruction LDRSW not yet implemented."
	136 Add X8, X8, X9
	137 Add X0, X8, 312
	138 Move X8, [X0]
	139 Move X1, [X0+8]
	140 Move X0, X20
	141 NotImplemented "Instruction BLR not yet implemented."
	142 Move X20, X0
	143 Compare X0, 0
	144 JumpIfEqual {418}
	145 Move X28, 0x7EF000
	146 Move X29, 0x817000
	147 Move X28, [X28+3608]
	148 Move X29, [X29+1984]
	149 Move S0, W31
	150 Move [X31+2], V0
	151 Move W26, 12
	152 Move S12, 1
	153 Move V8, V13
	154 Move V9, V15
	155 Move V10, V14
	156 Move [X31+16], D11
	157 Move X8, [X20]
	158 Move X1, [X28]
	159 NotImplemented "Instruction LDRH not yet implemented."
	160 Compare X9, 0
	161 JumpIfEqual {168}
	162 Move X10, [X8+176]
	163 Add X10, X10, 8
	164 NotImplemented "Instruction LDUR not yet implemented."
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Subtract X9, X9, 1
	167 Add X10, X10, 16
	168 Move X0, X20
	169 Move W2, W31
	170 Call 0x1C5D788
	171 NotImplemented "Instruction LDRSW not yet implemented."
	172 Add X8, X8, X9
	173 Add X0, X8, 312
	174 Move X8, [X0]
	175 Move X1, [X0+8]
	176 Move X0, X20
	177 NotImplemented "Instruction BLR not yet implemented."
	178 Move TEMP, X0
	179 And TEMP, TEMP, 1
	180 Compare TEMP, 1
	181 JumpIfNotEqual {225}
	182 Move X8, [X20]
	183 Move X1, [X29]
	184 NotImplemented "Instruction LDRH not yet implemented."
	185 Compare X9, 0
	186 JumpIfEqual {193}
	187 Move X10, [X8+176]
	188 Add X10, X10, 8
	189 NotImplemented "Instruction LDUR not yet implemented."
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Subtract X9, X9, 1
	192 Add X10, X10, 16
	193 Move X0, X20
	194 Move W2, W31
	195 Call 0x1C5D788
	196 NotImplemented "Instruction LDRSW not yet implemented."
	197 Add X8, X8, X9
	198 Add X0, X8, 312
	199 Move X8, [X0]
	200 Move X1, [X0+8]
	201 Move X0, X20
	202 NotImplemented "Instruction BLR not yet implemented."
	203 Compare X21, 0
	204 JumpIfEqual {415}
	205 Move W8, [X21+24]
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Compare X27, 0
	208 JumpIfEqual {416}
	209 Move W8, [X27+24]
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move X8, W0
	212 NotImplemented "Instruction MADD not yet implemented."
	213 Move V0, [X9+32]
	214 Add X8, X27, X8
	215 NotImplemented "Instruction LDUR not yet implemented."
	216 Move D2, [X8+32]
	217 Move D3, [X8+40]
	218 Add S8, S8, S0
	219 Move V0, [X31+2]
	220 Add V11, V11, V1
	221 Add V10, V10, V2
	222 Add V9, V9, V3
	223 Add S0, S0, S12
	224 Move [X31+2], V0
	225 Move X21, X31
	226 Move W26, 6
	227 Compare X20, 0
	228 JumpIfEqual {252}
	229 Move X8, [X20]
	230 Move X10, 0x7EF000
	231 NotImplemented "Instruction LDRH not yet implemented."
	232 Move X10, [X10+3584]
	233 Move X1, [X10]
	234 Compare X9, 0
	235 JumpIfEqual {242}
	236 Move X10, [X8+176]
	237 Add X10, X10, 8
	238 NotImplemented "Instruction LDUR not yet implemented."
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Subtract X9, X9, 1
	241 Add X10, X10, 16
	242 Move X0, X20
	243 Move W2, W31
	244 Call 0x1C5D788
	245 NotImplemented "Instruction LDRSW not yet implemented."
	246 Add X8, X8, X9
	247 Add X0, X8, 312
	248 Move X8, [X0]
	249 Move X1, [X0+8]
	250 Move X0, X20
	251 NotImplemented "Instruction BLR not yet implemented."
	252 Compare X21, 0
	253 JumpIfNotEqual {419}
	254 NotImplemented "Instruction CMP not yet implemented."
	255 Compare W26, 0
	256 JumpIfNotEqual {391}
	257 Move V0, [X31+2]
	258 Move W8, [X24+1923]
	259 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	260 NotImplemented "Instruction FDIV not yet implemented."
	261 NotImplemented "Instruction INVALID not yet implemented."
	262 Compare W8, 0
	263 JumpIfNotEqual {271}
	264 Move X0, 0x7EF000
	265 Move X0, [X0+1440]
	266 Move [X31+2], V3
	267 Call 0x1C17CF4
	268 Move V3, [X31+2]
	269 Move W8, 1
	270 Move [X24+1923], W8
	271 Move X8, [X25]
	272 Move X8, [X8+184]
	273 Move V0, [X8]
	274 NotImplemented "Instruction LDUR not yet implemented."
	275 Move X8, -48345088
	276 Move V11, [X8+3872]
	277 Subtract S0, S8, S0
	278 Subtract V1, V3, V1
	279 Multiply S0, S0, S0
	280 NotImplemented "Instruction INVALID not yet implemented."
	281 Add S0, S0, S1
	282 Move S1, V1.S[1]
	283 Add S0, S1, S0
	284 NotImplemented "Instruction FCMP not yet implemented."
	285 Move W8, [X22+3674]
	286 NotImplemented "Instruction INVALID not yet implemented."
	287 NotImplemented "Instruction INVALID not yet implemented."
	288 Compare W8, 0
	289 JumpIfNotEqual {301}
	290 Move X0, 0x7F6000
	291 Move X0, [X0+2464]
	292 Move [X31+16], V4
	293 Move [X31+24], V3
	294 Move [X31], V5
	295 Call 0x1C17CF4
	296 Move V5, [X31]
	297 Move V4, [X31+16]
	298 Move V3, [X31+2]
	299 Move W8, 1
	300 Move [X22+3674], W8
	301 Move X8, [X23]
	302 Move X8, [X8+184]
	303 Move D0, [X8]
	304 Move D1, [X8+8]
	305 Subtract V0, V5, V0
	306 NotImplemented "Instruction INVALID not yet implemented."
	307 Subtract V1, V4, V1
	308 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	309 NotImplemented "Instruction INVALID not yet implemented."
	310 Add V0, V0, V2
	311 Add V0, V1, V0
	312 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	313 Add V0, V1, V0
	314 NotImplemented "Instruction FCMP not yet implemented."
	315 Move X0, X19
	316 Move X1, X31
	317 Call Component.get_transform, X0
	318 Compare X0, 0
	319 JumpIfEqual {417}
	320 Move X1, X31
	321 Call Transform.get_rotation, X0
	322 Move X0, X19
	323 Move X1, X31
	324 Move [X31], V5
	325 Move [X31+8], V4
	326 Move [X31+2], V3
	327 Call Component.get_transform, X0
	328 Compare X0, 0
	329 JumpIfEqual {417}
	330 Move V2, [X31+16]
	331 Move V0, [X31+32]
	332 Move V1, [X31]
	333 Move X1, X31
	334 Move S9, V0.S[1]
	335 Move V5, V0
	336 Multiply S0, S1, V2.S[1]
	337 NotImplemented "Instruction INVALID not yet implemented."
	338 Multiply S2, S2, V2.S[1]
	339 Multiply S3, S5, S0
	340 Multiply S0, S9, S0
	341 Multiply S4, S8, S2
	342 Move S1, V1.S[1]
	343 Subtract S0, S0, S4
	344 Multiply S2, S5, S2
	345 Multiply S5, S8, S1
	346 Move [X31+16], S0
	347 Multiply S0, S9, S1
	348 Subtract S11, S5, S3
	349 Subtract S12, S2, S0
	350 Call Transform.get_rotation, X0
	351 Move V4, [X31+16]
	352 Move V13, V0
	353 Move V14, V1
	354 Move V15, V2
	355 Move V10, V3
	356 Move V0, V8
	357 Move V1, [X31+2]
	358 Move V2, V9
	359 Move V3, V12
	360 Move V5, V11
	361 Move X0, X31
	362 Call Quaternion.LookRotation, X0, X1
	363 Multiply S4, S10, S0
	364 Multiply S5, S13, S3
	365 Multiply S7, S15, S1
	366 Multiply S16, S10, S1
	367 Multiply S17, S14, S3
	368 Multiply S18, S15, S0
	369 Multiply S20, S13, S1
	370 Multiply S21, S13, S0
	371 Multiply S22, S14, S0
	372 Multiply S0, S14, S1
	373 Multiply S1, S10, S2
	374 Multiply S23, S10, S3
	375 Multiply S3, S15, S3
	376 Multiply S6, S14, S2
	377 Multiply S19, S13, S2
	378 Multiply S24, S15, S2
	379 Add S2, S4, S5
	380 Add S4, S16, S17
	381 Add S1, S1, S3
	382 Subtract S3, S23, S21
	383 Add S2, S6, S2
	384 Add S4, S18, S4
	385 Add S5, S20, S1
	386 Subtract S3, S3, S0
	387 Subtract S0, S2, S7
	388 Subtract S1, S4, S19
	389 Subtract S2, S5, S22
	390 Subtract S3, S3, S24
	391 Move X20, [X31+192]
	392 Move X19, [X31+200]
	393 Move X22, [X31+176]
	394 Move X21, [X31+184]
	395 Move X24, [X31+160]
	396 Move X23, [X31+168]
	397 Move X26, [X31+144]
	398 Move X25, [X31+152]
	399 Move X28, [X31+128]
	400 Move X27, [X31+136]
	401 Move X29, [X31+112]
	402 Move X30, [X31+120]
	403 Move D9, [X31+96]
	404 Move D8, [X31+104]
	405 Move D11, [X31+80]
	406 Move D10, [X31+88]
	407 Move D13, [X31+64]
	408 Move D12, [X31+72]
	409 Move D15, [X31+48]
	410 Move D14, [X31+56]
	411 Add X31, X31, 208
	412 Return X0
	413 Call 0x1C17F28
	414 Call 0x1C17F28
	415 Call 0x1C17F20
	416 Call 0x1C17F20
	417 Call 0x1C17F20
	418 Call 0x1C17F20
	419 Move X0, X21
	420 Call 0x1C17F18
	421 Move V11, [X31+16]
	422 Move S0, W31
	423 Move [X31+2], V0
	424 Move V8, V13
	425 Move V9, V15
	426 Move V10, V14
	427 NotImplemented "Instruction CMP not yet implemented."
	428 Call 0x3EB2AD0
	429 Move X21, [X0]
	430 Call 0x3EB2AE0
	431 Move W26, W31
	432 Compare X20, 0
	433 JumpIfNotEqual {229}
	434 Move X19, X0
	435 Move X21, X31
	436 Move X19, X0
	437 Compare X20, 0
	438 JumpIfEqual {462}
	439 Move X8, [X20]
	440 Move X10, 0x7EF000
	441 NotImplemented "Instruction LDRH not yet implemented."
	442 Move X10, [X10+3584]
	443 Move X1, [X10]
	444 Compare X9, 0
	445 JumpIfEqual {452}
	446 Move X10, [X8+176]
	447 Add X10, X10, 8
	448 NotImplemented "Instruction LDUR not yet implemented."
	449 NotImplemented "Instruction CMP not yet implemented."
	450 Subtract X9, X9, 1
	451 Add X10, X10, 16
	452 Move X0, X20
	453 Move W2, W31
	454 Call 0x1C5D788
	455 NotImplemented "Instruction LDRSW not yet implemented."
	456 Add X8, X8, X9
	457 Add X0, X8, 312
	458 Move X8, [X0]
	459 Move X1, [X0+8]
	460 Move X0, X20
	461 NotImplemented "Instruction BLR not yet implemented."
	462 Compare X21, 0
	463 JumpIfNotEqual {466}
	464 Move X0, X19
	465 Call 0x1D2D690
	466 Move X0, X21
	467 Call 0x1C17F18
	468 Call 0x1991590

Method: UnityEngine.Quaternion GetFaceRotation(UnityEngine.ProBuilder.ProBuilderMesh mesh, UnityEngine.ProBuilder.HandleOrientation orientation, System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> faces)

Disassembly:
	0x0390571C MOV W1, W23
	0x03905720 BLR X8
	0x03905724 LDR W8, [X20 + 0x18]
	0x03905728 CMP W0, W8
	0x0390572C B.CS 0x3905930
	0x03905730 LDR X8, [X21]
	0x03905734 NOP
	0x03905738 SMADDL X9, X0, X25, X20
	0x0390573C LDR V0, [X9 + 0x24]
	0x03905740 LDR X1, [X24]
	0x03905744 LDRH W9, [X8 + 0x12E]
	0x03905748 FCMP S0, S8
	0x0390574C FCSEL S8, S0, S8, MI
	0x03905750 CBZ X9, 0x3905774
	0x03905754 LDR X10, [X8 + 0xB0]
	0x03905758 ADD X10, X10, 0x8
	0x0390575C LDUR X11, [X10 - 0x8]
	0x03905760 CMP X11, X1
	0x03905764 B.EQ 0x3905784
	0x03905768 SUBS X9, X9, 0x1
	0x0390576C ADD X10, X10, 0x10
	0x03905770 B.NE 0x390575C
	0x03905774 MOV X0, X21
	0x03905778 MOV W2, W31
	0x0390577C BL 0x1C5C788
	0x03905780 B 0x3905790
	0x03905784 LDRSW X9, [X10]
	0x03905788 ADD X8, X8, X9, 0x4, LSL
	0x0390578C ADD X0, X8, 0x138
	0x03905790 LDP X8, X2, [X0]
	0x03905794 MOV X0, X21
	0x03905798 MOV W1, W23
	0x0390579C BLR X8
	0x039057A0 LDR W8, [X20 + 0x18]
	0x039057A4 CMP W0, W8
	0x039057A8 B.CS 0x3905930
	0x039057AC LDR X8, [X21]
	0x039057B0 NOP
	0x039057B4 SMADDL X9, X0, X25, X20
	0x039057B8 LDR V0, [X9 + 0x24]
	0x039057BC LDR X1, [X24]
	0x039057C0 LDRH W9, [X8 + 0x12E]
	0x039057C4 FCMP S0, S12
	0x039057C8 FCSEL S12, S0, S12, GT
	0x039057CC CBZ X9, 0x39057F0
	0x039057D0 LDR X10, [X8 + 0xB0]
	0x039057D4 ADD X10, X10, 0x8
	0x039057D8 LDUR X11, [X10 - 0x8]
	0x039057DC CMP X11, X1
	0x039057E0 B.EQ 0x3905800
	0x039057E4 SUBS X9, X9, 0x1
	0x039057E8 ADD X10, X10, 0x10
	0x039057EC B.NE 0x39057D8
	0x039057F0 MOV X0, X21
	0x039057F4 MOV W2, W31
	0x039057F8 BL 0x1C5C788
	0x039057FC B 0x390580C
	0x03905800 LDRSW X9, [X10]
	0x03905804 ADD X8, X8, X9, 0x4, LSL
	0x03905808 ADD X0, X8, 0x138
	0x0390580C LDP X8, X2, [X0]
	0x03905810 MOV X0, X21
	0x03905814 MOV W1, W23
	0x03905818 BLR X8
	0x0390581C LDR W8, [X20 + 0x18]
	0x03905820 CMP W0, W8
	0x03905824 B.CS 0x3905930
	0x03905828 LDR X8, [X21]
	0x0390582C NOP
	0x03905830 SMADDL X9, X0, X25, X20
	0x03905834 LDR V0, [X9 + 0x28]
	0x03905838 LDR X1, [X24]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xADD000
	008 Move X23, 0x7EF000
	009 Move W8, [X22+1995]
	010 Move X23, [X23+1432]
	011 Move X20, X2
	012 Move W21, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x849000
	019 Move X0, [X0+3712]
	020 Call 0x1C17CF4
	021 Move X0, 0x7EF000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+1995], W8
	026 Move X0, [X23]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X19
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {54}
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X8, 0x849000
	042 Move X8, [X8+3712]
	043 Move X0, X20
	044 Move X1, [X8]
	045 Call Enumerable.Last, X0
	046 Move X1, X0
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Move X19, 0xAD4000
	055 Move W8, [X19+1939]
	056 Compare W8, 0
	057 JumpIfNotEqual {63}
	058 Move X0, 0x7F0000
	059 Move X0, [X0+1448]
	060 Call 0x1C17CF4
	061 Move W8, 1
	062 Move [X19+1939], W8
	063 Move X8, 0x7F0000
	064 Move X8, [X8+1448]
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X8, [X8]
	070 Move X8, [X8+184]
	071 Move S0, [X8]
	072 Move S1, [X8+4]
	073 Move S2, [X8+8]
	074 Move S3, [X8+12]
	075 Move X30, [X31+48]
	076 Move X23, [X31+56]
	077 Return X0
	078 Compare X19, 0
	079 JumpIfEqual {94}
	080 Move X0, X19
	081 Move X1, X31
	082 Call Component.get_transform, X0
	083 Compare X0, 0
	084 JumpIfEqual {94}
	085 Move X20, [X31+32]
	086 Move X19, [X31+40]
	087 Move X22, [X31+16]
	088 Move X21, [X31+24]
	089 Move X1, X31
	090 Move X30, [X31+48]
	091 Move X23, [X31+56]
	092 Call Transform.get_rotation, X0
	093 Return X0
	094 Call 0x1C17F20

Method: UnityEngine.Quaternion GetFaceRotation(UnityEngine.ProBuilder.ProBuilderMesh mesh, UnityEngine.ProBuilder.Face face)

Disassembly:
	0x0390583C LDRH W9, [X8 + 0x12E]
	0x03905840 FCMP S0, S9
	0x03905844 FCSEL S9, S0, S9, MI
	0x03905848 CBZ X9, 0x390586C
	0x0390584C LDR X10, [X8 + 0xB0]
	0x03905850 ADD X10, X10, 0x8
	0x03905854 LDUR X11, [X10 - 0x8]
	0x03905858 CMP X11, X1
	0x0390585C B.EQ 0x390587C
	0x03905860 SUBS X9, X9, 0x1
	0x03905864 ADD X10, X10, 0x10
	0x03905868 B.NE 0x3905854
	0x0390586C MOV X0, X21
	0x03905870 MOV W2, W31
	0x03905874 BL 0x1C5C788
	0x03905878 B 0x3905888
	0x0390587C LDRSW X9, [X10]
	0x03905880 ADD X8, X8, X9, 0x4, LSL
	0x03905884 ADD X0, X8, 0x138
	0x03905888 LDP X8, X2, [X0]
	0x0390588C MOV X0, X21
	0x03905890 MOV W1, W23
	0x03905894 BLR X8
	0x03905898 LDR W8, [X20 + 0x18]
	0x0390589C CMP W0, W8
	0x039058A0 B.CS 0x3905930
	0x039058A4 SMADDL X8, X0, X25, X20
	0x039058A8 LDR V0, [X8 + 0x28]
	0x039058AC ADD W23, W23, 0x1
	0x039058B0 FCMP S0, S11
	0x039058B4 FCSEL S11, S0, S11, GT
	0x039058B8 CMP W23, W22
	0x039058BC B.NE 0x39055D0
	0x039058C0 B 0x39058D0
	0x039058C4 MOV V11.16B, V9.16B
	0x039058C8 MOV V12.16B, V8.16B
	0x039058CC MOV V13.16B, V10.16B
	0x039058D0 FADD S0, S13, S10
	0x039058D4 FADD S1, S12, S8
	0x039058D8 FADD S2, S11, S9
	0x039058DC FMOV S3, 0.5
	0x039058E0 FSUB S4, S13, S10
	0x039058E4 FSUB S5, S12, S8
	0x039058E8 FSUB S6, S11, S9
	0x039058EC FMUL S0, S0, S3
	0x039058F0 FMUL S1, S1, S3
	0x039058F4 FMUL S2, S2, S3
	0x039058F8 FMUL S4, S4, S3
	0x039058FC FMUL S5, S5, S3
	0x03905900 FMUL S3, S6, S3
	0x03905904 STP S0, S1, [X19]
	0x03905908 STP S2, S4, [X19 + 0x8]
	0x0390590C STP S5, S3, [X19 + 0x10]
	0x03905910 LDP X20, X19, [X31 + 0x60]
	0x03905914 LDP X22, X21, [X31 + 0x50]
	0x03905918 LDP X24, X23, [X31 + 0x40]
	0x0390591C LDP X30, X25, [X31 + 0x30]
	0x03905920 LDP D9, D8, [X31 + 0x20]
	0x03905924 LDP D11, D10, [X31 + 0x10]
	0x03905928 LDP D13, D12, [X31], #0x70
	0x0390592C RET
	0x03905930 BL 0x1C16F28
	0x03905934 BL 0x1C16F20
	0x03905938 SUB X31, X31, 0x50
	0x0390593C STR X30, [X31 + 0x20]
	0x03905940 STP X22, X21, [X31 + 0x30]
	0x03905944 STP X20, X19, [X31 + 0x40]
	0x03905948 ADRP X21, 0xADC000
	0x0390594C ADRP X22, 0x848000
	0x03905950 LDRB W8, [X21 + 0x7D2]
	0x03905954 LDR X22, [X22 + 0xEA8]
	0x03905958 MOV X20, X1
	0x0390595C MOV X19, X0
	0x03905960 TBNZ X8, 0x0, 0x3905984
	0x03905964 ADRP X0, 0x848000
	0x03905968 LDR X0, [X0 + 0xEA8]
	0x0390596C BL 0x1C16CF4
	0x03905970 ADRP X0, 0x7EF000
	0x03905974 LDR X0, [X0 + 0xE58]
	0x03905978 BL 0x1C16CF4
	0x0390597C MOVZ W8, 0x1
	0x03905980 STRB W8, [X21 + 0x7D2]
	0x03905984 LDR X1, [X22]
	0x03905988 MOV X0, X20
	0x0390598C BL 0x21C6044
	0x03905990 CBZ X19, 0x3905A1C
	0x03905994 ADRP X22, 0x7EF000
	0x03905998 LDR X22, [X22 + 0xE58]
	0x0390599C MOV X20, X0
	0x039059A0 MOV X0, X19
	0x039059A4 MOV X1, X31
	0x039059A8 BL 0x3C32E90
	0x039059AC LDR X8, [X22]
	0x039059B0 LDR X21, [X19 + 0x58]
	0x039059B4 MOV X19, X0
	0x039059B8 MOVZ W1, 0x2
	0x039059BC MOV X0, X8
	0x039059C0 BL 0x1C16D6C
	0x039059C4 CBZ X0, 0x3905A1C
	0x039059C8 LDR W8, [X0 + 0x18]
	0x039059CC MOV X1, X0
	0x039059D0 CBZ W8, 0x3905A20
	0x039059D4 CMP W8, 0x1
	0x039059D8 STR W20, [X1 + 0x20]
	0x039059DC B.EQ 0x3905A20
	0x039059E0 UBFM X8, X20, 0x20, 0x3F
	0x039059E4 STR W8, [X1 + 0x24]
	0x039059E8 ADD X8, X31, 0x8
	0x039059EC MOV X0, X21
	0x039059F0 BL 0x3905368
	0x039059F4 CBZ X19, 0x3905A1C
	0x039059F8 LDP S0, S1, [X31 + 0x8]
	0x039059FC LDR V2, [X31 + 0x10]
	0x03905A00 MOV X0, X19
	0x03905A04 LDP X20, X19, [X31 + 0x40]
	0x03905A08 LDP X22, X21, [X31 + 0x30]
	0x03905A0C LDR X30, [X31 + 0x20]
	0x03905A10 MOV X1, X31
	0x03905A14 ADD X31, X31, 0x50
	0x03905A18 B 0x3C3DE4C
	0x03905A1C BL 0x1C16F20
	0x03905A20 BL 0x1C16F28
	0x03905A24 STR X30, [X31 - 0x30]!
	0x03905A28 STP X22, X21, [X31 + 0x10]
	0x03905A2C STP X20, X19, [X31 + 0x20]
	0x03905A30 ADRP X21, 0xADC000
	0x03905A34 LDRB W8, [X21 + 0x7D3]
	0x03905A38 MOV X19, X1
	0x03905A3C MOV X20, X0
	0x03905A40 TBNZ X8, 0x0, 0x3905A58
	0x03905A44 ADRP X0, 0x848000
	0x03905A48 LDR X0, [X0 + 0xAA8]
	0x03905A4C BL 0x1C16CF4
	0x03905A50 MOVZ W8, 0x1
	0x03905A54 STRB W8, [X21 + 0x7D3]
	0x03905A58 CBZ X20, 0x3905AC4
	0x03905A5C ADRP X22, 0x848000
	0x03905A60 LDR X22, [X22 + 0xAA8]
	0x03905A64 MOV X0, X20
	0x03905A68 MOV X1, X31
	0x03905A6C BL 0x3C32E90
	0x03905A70 LDR X1, [X22]
	0x03905A74 LDR X21, [X20 + 0x58]
	0x03905A78 MOV X20, X0
	0x03905A7C MOV X0, X19
	0x03905A80 BL 0x21C2B84
	0x03905A84 CBZ X21, 0x3905AC4
	0x03905A88 LDR W8, [X21 + 0x18]
	0x03905A8C CMP W0, W8
	0x03905A90 B.CS 0x3905AC8
	0x03905A94 CBZ X20, 0x3905AC4
	0x03905A98 SXTW X8, W0
	0x03905A9C MOVZ W9, 0xC
	0x03905AA0 MADD X8, X8, X9, X21

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X30
	011 Move [X31+128], X22
	012 Move [X31+136], X21
	013 Move [X31+144], X20
	014 Move [X31+152], X19
	015 Move X21, 0xADD000
	016 Move X22, 0x7EF000
	017 Move W8, [X21+1996]
	018 Move X22, [X22+1432]
	019 Move X20, X1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x7EF000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+1996], W8
	030 Move X0, [X22]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X19
	036 Move X1, X31
	037 Move X2, X31
	038 Call Object.op_Equality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {60}
	043 Move X19, 0xAD4000
	044 Move W8, [X19+1939]
	045 Compare W8, 0
	046 JumpIfNotEqual {52}
	047 Move X0, 0x7F0000
	048 Move X0, [X0+1448]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X19+1939], W8
	052 Move X8, 0x7F0000
	053 Move X8, [X8+1448]
	054 Move X8, [X8]
	055 Move X8, [X8+184]
	056 Move S0, [X8]
	057 Move S1, [X8+4]
	058 Move S2, [X8+8]
	059 Move S3, [X8+12]
	060 Compare X20, 0
	061 JumpIfEqual {108}
	062 Add X8, X31, 8
	063 Move X0, X19
	064 Move X1, X20
	065 Call Math.NormalTangentBitangent, X0, X1
	066 Move X20, 0xAD4000
	067 Move S8, [X31+8]
	068 Move S9, [X31+12]
	069 Move V10, [X31+16]
	070 Move S11, [X31+36]
	071 Move S13, [X31+40]
	072 Move W8, [X20+1923]
	073 Move V12, [X31+44]
	074 Compare W8, 0
	075 JumpIfNotEqual {81}
	076 Move X0, 0x7EF000
	077 Move X0, [X0+1440]
	078 Call 0x1C17CF4
	079 Move W8, 1
	080 Move [X20+1923], W8
	081 Move X8, 0x7EF000
	082 Move X8, [X8+1440]
	083 Move X9, -48345088
	084 Move V0, [X9+3872]
	085 Move X8, [X8]
	086 Move X8, [X8+184]
	087 Move S2, [X8]
	088 Move S1, [X8+4]
	089 Move V3, [X8+8]
	090 Subtract S4, S8, S2
	091 Subtract S5, S9, S1
	092 Multiply S4, S4, S4
	093 Multiply S5, S5, S5
	094 Add S4, S4, S5
	095 Subtract S5, S10, S3
	096 Multiply S5, S5, S5
	097 Add S4, S5, S4
	098 NotImplemented "Instruction FCMP not yet implemented."
	099 Subtract S2, S11, S2
	100 Subtract S1, S13, S1
	101 Subtract S3, S12, S3
	102 Multiply S2, S2, S2
	103 Multiply S1, S1, S1
	104 Add S1, S2, S1
	105 Multiply S2, S3, S3
	106 Add S1, S2, S1
	107 NotImplemented "Instruction FCMP not yet implemented."
	108 Compare X19, 0
	109 JumpIfEqual {183}
	110 Move X0, X19
	111 Move X1, X31
	112 Call Component.get_transform, X0
	113 Compare X0, 0
	114 JumpIfEqual {183}
	115 Move X1, X31
	116 Call Transform.get_rotation, X0
	117 Move X20, [X31+144]
	118 Move X19, [X31+152]
	119 Move X22, [X31+128]
	120 Move X21, [X31+136]
	121 Move X30, [X31+112]
	122 Move D9, [X31+96]
	123 Move D8, [X31+104]
	124 Move D11, [X31+80]
	125 Move D10, [X31+88]
	126 Move D13, [X31+64]
	127 Move D12, [X31+72]
	128 Move D15, [X31+48]
	129 Move D14, [X31+56]
	130 Add X31, X31, 160
	131 Return X0
	132 Compare X19, 0
	133 JumpIfEqual {183}
	134 Move X0, X19
	135 Move X1, X31
	136 Move [X31+120], S12
	137 Move [X31+128], S11
	138 Call Component.get_transform, X0
	139 Compare X0, 0
	140 JumpIfEqual {183}
	141 Move X1, X31
	142 Call Transform.get_rotation, X0
	143 Move V12, V3
	144 Move S5, [X31+120]
	145 Move S3, [X31+124]
	146 Move V14, V0
	147 Move V15, V1
	148 Move V11, V2
	149 Move V0, V8
	150 Move V1, V9
	151 Move V2, V10
	152 Move V4, V13
	153 Move X0, X31
	154 Call Quaternion.LookRotation, X0, X1
	155 Multiply S4, S12, S0
	156 Multiply S5, S14, S3
	157 Multiply S7, S11, S1
	158 Multiply S16, S12, S1
	159 Multiply S17, S15, S3
	160 Multiply S18, S11, S0
	161 Multiply S20, S14, S1
	162 Multiply S21, S14, S0
	163 Multiply S22, S15, S0
	164 Multiply S0, S15, S1
	165 Multiply S1, S12, S2
	166 Multiply S23, S12, S3
	167 Multiply S3, S11, S3
	168 Multiply S6, S15, S2
	169 Multiply S19, S14, S2
	170 Multiply S24, S11, S2
	171 Add S2, S4, S5
	172 Add S4, S16, S17
	173 Add S1, S1, S3
	174 Subtract S3, S23, S21
	175 Add S2, S6, S2
	176 Add S4, S18, S4
	177 Add S5, S20, S1
	178 Subtract S3, S3, S0
	179 Subtract S0, S2, S7
	180 Subtract S1, S4, S19
	181 Subtract S2, S5, S22
	182 Subtract S3, S3, S24
	183 Call 0x1C17F20

Method: UnityEngine.Quaternion GetEdgeRotation(UnityEngine.ProBuilder.ProBuilderMesh mesh, UnityEngine.ProBuilder.HandleOrientation orientation, System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Edge> edges)

Disassembly:
	0x03905E90 LDR X8, [X8]
	0x03905E94 LDR X9, [X9 + 0x648]
	0x03905E98 ADRP X24, 0x832000
	0x03905E9C STR X8, [X21 + 0x10]
	0x03905EA0 LDR X0, [X9]
	0x03905EA4 LDR X22, [X22 + 0xEC0]
	0x03905EA8 LDR X23, [X23 + 0xEB8]
	0x03905EAC LDR X24, [X24 + 0xC78]
	0x03905EB0 BL 0x1C16F10
	0x03905EB4 LDR X2, [X22]
	0x03905EB8 MOV X1, X21
	0x03905EBC MOV X3, X31
	0x03905EC0 MOV X22, X0
	0x03905EC4 BL 0x2D2BA94
	0x03905EC8 LDR X2, [X23]
	0x03905ECC MOV X0, X20
	0x03905ED0 MOV X1, X22
	0x03905ED4 BL 0x21D9398
	0x03905ED8 LDR X1, [X24]
	0x03905EDC BL 0x21D52B4
	0x03905EE0 MOV X1, X0
	0x03905EE4 MOV X0, X31
	0x03905EE8 MOV X2, X31
	0x03905EEC BL 0x32256D4
	0x03905EF0 CBZ X0, 0x3905F88
	0x03905EF4 MOVZ W1, 0x2C
	0x03905EF8 MOV W2, W31
	0x03905EFC MOV X3, X31
	0x03905F00 BL 0x3229AE8
	0x03905F04 CBZ X0, 0x3905F88
	0x03905F08 LDR W8, [X0 + 0x18]
	0x03905F0C MOV X20, X0
	0x03905F10 CMP W8, 0x4
	0x03905F14 B.LT 0x3905FE8
	0x03905F18 LDR X0, [X20 + 0x20]
	0x03905F1C MOV X1, X31
	0x03905F20 BL 0x3390104
	0x03905F24 LDR W8, [X20 + 0x18]
	0x03905F28 CMP W8, 0x1
	0x03905F2C B.LS 0x3905F8C
	0x03905F30 LDR X0, [X20 + 0x28]
	0x03905F34 MOV V8.16B, V0.16B
	0x03905F38 MOV X1, X31
	0x03905F3C BL 0x3390104
	0x03905F40 LDR W8, [X20 + 0x18]
	0x03905F44 CMP W8, 0x2
	0x03905F48 B.LS 0x3905F90
	0x03905F4C LDR X0, [X20 + 0x30]
	0x03905F50 MOV V9.16B, V0.16B
	0x03905F54 MOV X1, X31
	0x03905F58 BL 0x3390104
	0x03905F5C LDR W8, [X20 + 0x18]
	0x03905F60 CMP W8, 0x3
	0x03905F64 B.LS 0x3905F94
	0x03905F68 LDR X0, [X20 + 0x38]
	0x03905F6C MOV V10.16B, V0.16B
	0x03905F70 MOV X1, X31
	0x03905F74 BL 0x3390104
	0x03905F78 MOVZ W0, 0x1
	0x03905F7C STP S8, S9, [X19]
	0x03905F80 STP S10, S0, [X19 + 0x8]
	0x03905F84 B 0x3905FEC
	0x03905F88 BL 0x1C16F20
	0x03905F8C BL 0x1C16F28
	0x03905F90 BL 0x1C16F28
	0x03905F94 BL 0x1C16F28
	0x03905F98 B 0x3905FB0
	0x03905F9C B 0x3905FB0
	0x03905FA0 B 0x3905FB0
	0x03905FA4 B 0x3905FB0
	0x03905FA8 B 0x3905FB0
	0x03905FAC B 0x3905FB0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xADD000
	008 Move X23, 0x7EF000
	009 Move W8, [X22+1997]
	010 Move X23, [X23+1432]
	011 Move X20, X2
	012 Move W21, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x849000
	019 Move X0, [X0+3752]
	020 Call 0x1C17CF4
	021 Move X0, 0x7EF000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+1997], W8
	026 Move X0, [X23]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X19
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {54}
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X8, 0x849000
	042 Move X8, [X8+3752]
	043 Move X0, X20
	044 Move X1, [X8]
	045 Call 0x21C7044, X0
	046 Move X1, X0
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Move X19, 0xAD4000
	055 Move W8, [X19+1939]
	056 Compare W8, 0
	057 JumpIfNotEqual {63}
	058 Move X0, 0x7F0000
	059 Move X0, [X0+1448]
	060 Call 0x1C17CF4
	061 Move W8, 1
	062 Move [X19+1939], W8
	063 Move X8, 0x7F0000
	064 Move X8, [X8+1448]
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X8, [X8]
	070 Move X8, [X8+184]
	071 Move S0, [X8]
	072 Move S1, [X8+4]
	073 Move S2, [X8+8]
	074 Move S3, [X8+12]
	075 Move X30, [X31+48]
	076 Move X23, [X31+56]
	077 Return X0
	078 Compare X19, 0
	079 JumpIfEqual {94}
	080 Move X0, X19
	081 Move X1, X31
	082 Call Component.get_transform, X0
	083 Compare X0, 0
	084 JumpIfEqual {94}
	085 Move X20, [X31+32]
	086 Move X19, [X31+40]
	087 Move X22, [X31+16]
	088 Move X21, [X31+24]
	089 Move X1, X31
	090 Move X30, [X31+48]
	091 Move X23, [X31+56]
	092 Call Transform.get_rotation, X0
	093 Return X0
	094 Call 0x1C17F20

Method: UnityEngine.Quaternion GetEdgeRotation(UnityEngine.ProBuilder.ProBuilderMesh mesh, UnityEngine.ProBuilder.Edge edge)

Disassembly:
	0x03905FB0 MOV X19, X0
	0x03905FB4 CMP W1, 0x1
	0x03905FB8 B.NE 0x3906030
	0x03905FBC MOV X0, X19
	0x03905FC0 BL 0x3EB1AD0
	0x03905FC4 MOV X19, X0
	0x03905FC8 ADRP X0, 0x7F4000
	0x03905FCC LDR X0, [X0 + 0xCC0]
	0x03905FD0 BL 0x1C16D08
	0x03905FD4 LDR X8, [X19]
	0x03905FD8 LDR X1, [X8]
	0x03905FDC BL 0x1C17270
	0x03905FE0 TBZ X0, 0x0, 0x3906008
	0x03905FE4 BL 0x3EB1AE0
	0x03905FE8 MOV W0, W31
	0x03905FEC LDP X20, X19, [X31 + 0x40]
	0x03905FF0 LDP X22, X21, [X31 + 0x30]
	0x03905FF4 LDP X24, X23, [X31 + 0x20]
	0x03905FF8 LDR X30, [X31 + 0x18]
	0x03905FFC LDP D9, D8, [X31 + 0x8]
	0x03906000 LDR V10, [X31], #0x50
	0x03906004 RET
	0x03906008 MOVZ W0, 0x8
	0x0390600C BL 0x3EB1AF0
	0x03906010 LDR X8, [X19]
	0x03906014 STR X8, [X0]
	0x03906018 ADRP X1, 0x5AE000
	0x0390601C ADD X1, X1, 0xE58
	0x03906020 MOV X2, X31
	0x03906024 BL 0x3EB1B00
	0x03906028 MOV X19, X0
	0x0390602C BL 0x3EB1AE0
	0x03906030 MOV X0, X19
	0x03906034 BL 0x1D2C690
	0x03906038 BL 0x1990590
	0x0390603C MOV X1, X31
	0x03906040 B 0x33BDD8C
	0x03906044 STR X30, [X31 - 0x10]!
	0x03906048 LDR X0, [X0 + 0x10]
	0x0390604C CBZ X0, 0x390605C
	0x03906050 MOV X2, X31
	0x03906054 LDR X30, [X31], #0x10
	0x03906058 B 0x322BD74
	0x0390605C BL 0x1C16F20
	0x03906060 LDR V0, [X0]
	0x03906064 RET
	0x03906068 LDR V0, [X0 + 0x4]
	0x0390606C RET
	0x03906070 STP S0, S1, [X0]
	0x03906074 RET
	0x03906078 STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xADD000
	007 Move X22, 0x7EF000
	008 Move W8, [X21+1998]
	009 Move X22, [X22+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x7EF000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1998], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X19
	027 Move X1, X31
	028 Move X2, X31
	029 Call Object.op_Equality, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {57}
	034 Move X19, 0xAD3000
	035 Move W8, [X19+1939]
	036 Compare W8, 0
	037 JumpIfNotEqual {43}
	038 Move X0, 0x7EF000
	039 Move X0, [X0+1448]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X19+1939], W8
	043 Move X8, 0x7EF000
	044 Move X8, [X8+1448]
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X8, [X8]
	050 Move X8, [X8+184]
	051 Move S0, [X8]
	052 Move S1, [X8+4]
	053 Move S2, [X8+8]
	054 Move S3, [X8+12]
	055 Move X30, [X31+48]
	056 Return X0
	057 Move X0, X19
	058 Move X1, X20
	059 Call EdgeUtility.GetFace, X0, X1
	060 Move X1, X0
	061 Move X0, X19
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X30, [X31+48]
	067 Call HandleUtility.GetFaceRotation, X0, X1
	068 Return X0

Method: UnityEngine.Quaternion GetVertexRotation(UnityEngine.ProBuilder.ProBuilderMesh mesh, UnityEngine.ProBuilder.HandleOrientation orientation, System.Collections.Generic.IEnumerable`1<System.Int32> vertices)

Disassembly:
	0x0390607C STP X22, X21, [X31 + 0x10]
	0x03906080 STP X20, X19, [X31 + 0x20]
	0x03906084 ADRP X20, 0xADB000
	0x03906088 ADRP X22, 0x7ED000
	0x0390608C ADRP X21, 0x847000
	0x03906090 LDRB W8, [X20 + 0x7D8]
	0x03906094 LDR X22, [X22 + 0xA90]
	0x03906098 LDR X21, [X21 + 0xED0]
	0x0390609C MOV X19, X0
	0x039060A0 TBNZ X8, 0x0, 0x39060C4
	0x039060A4 ADRP X0, 0x7ED000
	0x039060A8 LDR X0, [X0 + 0xA90]
	0x039060AC BL 0x1C16CF4
	0x039060B0 ADRP X0, 0x847000
	0x039060B4 LDR X0, [X0 + 0xED0]
	0x039060B8 BL 0x1C16CF4
	0x039060BC MOVZ W8, 0x1
	0x039060C0 STRB W8, [X20 + 0x7D8]
	0x039060C4 LDR V0, [X19]
	0x039060C8 LDR X0, [X22]
	0x039060CC ADD X1, X31, 0xC
	0x039060D0 STR S0, [X31 + 0xC]
	0x039060D4 BL 0x1C16E04
	0x039060D8 MOV X20, X0
	0x039060DC LDR V0, [X19 + 0x4]
	0x039060E0 LDR X0, [X22]
	0x039060E4 ADD X1, X31, 0x8
	0x039060E8 STR S0, [X31 + 0x8]
	0x039060EC BL 0x1C16E04
	0x039060F0 LDR X8, [X21]
	0x039060F4 MOV X2, X0
	0x039060F8 MOV X1, X20
	0x039060FC MOV X3, X31
	0x03906100 MOV X0, X8
	0x03906104 BL 0x3227BD4
	0x03906108 LDP X20, X19, [X31 + 0x20]
	0x0390610C LDP X22, X21, [X31 + 0x10]
	0x03906110 LDR X30, [X31], #0x30
	0x03906114 RET
	0x03906118 STR X30, [X31 - 0x10]!
	0x0390611C STP S0, S1, [X31 + 0x8]
	0x03906120 ADD X0, X31, 0x8
	0x03906124 MOV V0.16B, V2.16B
	0x03906128 MOV V1.16B, V3.16B
	0x0390612C BL 0x390613C
	0x03906130 AND W0, W0, 0x1
	0x03906134 LDR X30, [X31], #0x10
	0x03906138 RET
	0x0390613C STP D9, D8, [X31 - 0x30]!
	0x03906140 STR X30, [X31 + 0x10]
	0x03906144 STP X20, X19, [X31 + 0x20]
	0x03906148 MOV V8.16B, V1.16B
	0x0390614C LDR V1, [X0]
	0x03906150 MOV V9.16B, V0.16B
	0x03906154 MOV X19, X0
	0x03906158 MOV V0.16B, V1.16B
	0x0390615C BL 0x39061D0
	0x03906160 MOV V0.16B, V9.16B
	0x03906164 MOV W20, W0
	0x03906168 BL 0x39061D0
	0x0390616C CMP W20, W0
	0x03906170 B.NE 0x3906194
	0x03906174 LDR V0, [X19 + 0x4]
	0x03906178 BL 0x39061D0
	0x0390617C MOV V0.16B, V8.16B
	0x03906180 MOV W19, W0
	0x03906184 BL 0x39061D0
	0x03906188 CMP W19, W0
	0x0390618C CSET W0, EQ
	0x03906190 B 0x3906198

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xADC000
	008 Move X23, 0x7EE000
	009 Move W8, [X22+1999]
	010 Move X23, [X23+1432]
	011 Move X20, X2
	012 Move W21, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x7EE000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1999], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {54}
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Compare X19, 0
	039 JumpIfEqual {94}
	040 Move X0, X19
	041 Move X1, X31
	042 Call ProBuilderMesh.get_selectedVertexCount, X0
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, X19
	045 Move X1, X20
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Move X23, [X31+56]
	052 Call HandleUtility.GetRotation, X0, X1
	053 Return X0
	054 Move X19, 0xAD3000
	055 Move W8, [X19+1939]
	056 Compare W8, 0
	057 JumpIfNotEqual {63}
	058 Move X0, 0x7EF000
	059 Move X0, [X0+1448]
	060 Call 0x1C17CF4
	061 Move W8, 1
	062 Move [X19+1939], W8
	063 Move X8, 0x7EF000
	064 Move X8, [X8+1448]
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X8, [X8]
	070 Move X8, [X8+184]
	071 Move S0, [X8]
	072 Move S1, [X8+4]
	073 Move S2, [X8+8]
	074 Move S3, [X8+12]
	075 Move X30, [X31+48]
	076 Move X23, [X31+56]
	077 Return X0
	078 Compare X19, 0
	079 JumpIfEqual {94}
	080 Move X0, X19
	081 Move X1, X31
	082 Call Component.get_transform, X0
	083 Compare X0, 0
	084 JumpIfEqual {94}
	085 Move X20, [X31+32]
	086 Move X19, [X31+40]
	087 Move X22, [X31+16]
	088 Move X21, [X31+24]
	089 Move X1, X31
	090 Move X30, [X31+48]
	091 Move X23, [X31+56]
	092 Call Transform.get_rotation, X0
	093 Return X0
	094 Call 0x1C17F20

Method: UnityEngine.Quaternion GetVertexRotation(UnityEngine.ProBuilder.ProBuilderMesh mesh, System.Int32 vertex)

Disassembly:
	0x03906194 MOV W0, W31
	0x03906198 LDP X20, X19, [X31 + 0x20]
	0x0390619C LDR X30, [X31 + 0x10]
	0x039061A0 LDP D9, D8, [X31], #0x30
	0x039061A4 RET
	0x039061A8 STR X30, [X31 - 0x10]!
	0x039061AC STP S0, S1, [X31 + 0x8]
	0x039061B0 ADD X0, X31, 0x8
	0x039061B4 MOV V0.16B, V2.16B
	0x039061B8 MOV V1.16B, V3.16B
	0x039061BC BL 0x390613C
	0x039061C0 ORN W8, W31, W0, 0x0
	0x039061C4 AND W0, W8, 0x1
	0x039061C8 LDR X30, [X31], #0x10
	0x039061CC RET
	0x039061D0 STR D8, [X31 - 0x20]!
	0x039061D4 STR X30, [X31 + 0x8]
	0x039061D8 STP X20, X19, [X31 + 0x10]
	0x039061DC ADRP X19, 0xADB000
	0x039061E0 ADRP X20, 0x7F6000
	0x039061E4 LDRB W8, [X19 + 0x7DA]
	0x039061E8 LDR X20, [X20 + 0x9E8]
	0x039061EC MOV V8.16B, V0.16B
	0x039061F0 TBNZ X8, 0x0, 0x3906208
	0x039061F4 ADRP X0, 0x7F6000
	0x039061F8 LDR X0, [X0 + 0x9E8]
	0x039061FC BL 0x1C16CF4
	0x03906200 MOVZ W8, 0x1
	0x03906204 STRB W8, [X19 + 0x7DA]
	0x03906208 LDR X0, [X20]
	0x0390620C LDR W8, [X0 + 0xE0]
	0x03906210 CBNZ W8, 0x3906218
	0x03906214 BL 0x1C16DFC
	0x03906218 LDP X20, X19, [X31 + 0x10]
	0x0390621C LDR X30, [X31 + 0x8]
	0x03906220 MOVZ W8, 0x447A0000
	0x03906224 FMOV S0, W8
	0x03906228 FMUL S0, S8, S0
	0x0390622C MOV X0, X31
	0x03906230 LDR V8, [X31], #0x20
	0x03906234 B 0x332049C
	0x03906238 STP D9, D8, [X31 - 0x30]!
	0x0390623C STR X30, [X31 + 0x10]
	0x03906240 STP X20, X19, [X31 + 0x20]
	0x03906244 MOV V8.16B, V1.16B
	0x03906248 LDR V1, [X0]
	0x0390624C MOV V9.16B, V0.16B
	0x03906250 MOV X19, X0
	0x03906254 MOV V0.16B, V1.16B
	0x03906258 BL 0x39061D0
	0x0390625C MOV V0.16B, V9.16B
	0x03906260 MOV W20, W0
	0x03906264 BL 0x39061D0
	0x03906268 CMP W20, W0
	0x0390626C B.NE 0x3906290
	0x03906270 LDR V0, [X19 + 0x4]
	0x03906274 BL 0x39061D0
	0x03906278 MOV V0.16B, V8.16B
	0x0390627C MOV W19, W0
	0x03906280 BL 0x39061D0
	0x03906284 CMP W19, W0
	0x03906288 CSET W0, EQ
	0x0390628C B 0x3906294
	0x03906290 MOV W0, W31
	0x03906294 LDP X20, X19, [X31 + 0x20]
	0x03906298 LDR X30, [X31 + 0x10]
	0x0390629C LDP D9, D8, [X31], #0x30
	0x039062A0 RET
	0x039062A4 STP X30, X21, [X31 - 0x20]!
	0x039062A8 STP X20, X19, [X31 + 0x10]
	0x039062AC ADRP X21, 0xADB000
	0x039062B0 LDRB W8, [X21 + 0x7D9]
	0x039062B4 MOV X20, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xADC000
	007 Move X22, 0x7EE000
	008 Move W8, [X21+2000]
	009 Move X22, [X22+1432]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x7EF000
	017 Move X0, [X0+3672]
	018 Call 0x1C17CF4
	019 Move X0, 0x7EE000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+2000], W8
	024 Move X0, [X22]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X19
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {60}
	037 Move X19, 0xAD3000
	038 Move W8, [X19+1939]
	039 Compare W8, 0
	040 JumpIfNotEqual {46}
	041 Move X0, 0x7EF000
	042 Move X0, [X0+1448]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X19+1939], W8
	046 Move X8, 0x7EF000
	047 Move X8, [X8+1448]
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X8, [X8]
	053 Move X8, [X8+184]
	054 Move S0, [X8]
	055 Move S1, [X8+4]
	056 Move S2, [X8+8]
	057 Move S3, [X8+12]
	058 Move X30, [X31+48]
	059 Return X0
	060 Move TEMP, X20
	061 And TEMP, TEMP, -2147483648
	062 Compare TEMP, -2147483648
	063 JumpIfEqual {84}
	064 Move X8, 0x7EF000
	065 Move X8, [X8+3672]
	066 Move W1, 1
	067 Move X0, [X8]
	068 Call 0x1C17D6C
	069 Compare X0, 0
	070 JumpIfEqual {99}
	071 Move W8, [X0+24]
	072 Move X1, X0
	073 Compare W8, 0
	074 JumpIfEqual {100}
	075 Move [X1+32], W20
	076 Move X0, X19
	077 Move X20, [X31+32]
	078 Move X19, [X31+40]
	079 Move X22, [X31+16]
	080 Move X21, [X31+24]
	081 Move X30, [X31+48]
	082 Call HandleUtility.GetRotation, X0, X1
	083 Return X0
	084 Compare X19, 0
	085 JumpIfEqual {99}
	086 Move X0, X19
	087 Move X1, X31
	088 Call Component.get_transform, X0
	089 Compare X0, 0
	090 JumpIfEqual {99}
	091 Move X20, [X31+32]
	092 Move X19, [X31+40]
	093 Move X22, [X31+16]
	094 Move X21, [X31+24]
	095 Move X1, X31
	096 Move X30, [X31+48]
	097 Call Transform.get_rotation, X0
	098 Return X0
	099 Call 0x1C17F20
	100 Call 0x1C17F28

Method: UnityEngine.Vector3 GetActiveElementPosition(UnityEngine.ProBuilder.ProBuilderMesh mesh, System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> faces)

Disassembly:
	0x039062B8 MOV X19, X0
	0x039062BC TBNZ X8, 0x0, 0x39062E0
	0x039062C0 ADRP X0, 0x847000
	0x039062C4 LDR X0, [X0 + 0xED8]
	0x039062C8 BL 0x1C16CF4
	0x039062CC ADRP X0, 0x7F5000
	0x039062D0 LDR X0, [X0 + 0xF08]
	0x039062D4 BL 0x1C16CF4
	0x039062D8 MOVZ W8, 0x1
	0x039062DC STRB W8, [X21 + 0x7D9]
	0x039062E0 CBZ X20, 0x3906334
	0x039062E4 ADRP X8, 0x847000
	0x039062E8 LDR X8, [X8 + 0xED8]
	0x039062EC LDR X9, [X8]
	0x039062F0 LDR X8, [X20]
	0x039062F4 CMP X8, X9
	0x039062F8 B.NE 0x3906320
	0x039062FC MOV X0, X20
	0x03906300 BL 0x1C16E08
	0x03906304 LDP S0, S1, [X0]
	0x03906308 MOV X0, X19
	0x0390630C BL 0x390613C
	0x03906310 TBZ X0, 0x0, 0x390631C
	0x03906314 MOVZ W0, 0x1
	0x03906318 B 0x3906338
	0x0390631C LDR X8, [X20]
	0x03906320 ADRP X9, 0x7F5000
	0x03906324 LDR X9, [X9 + 0xF08]
	0x03906328 LDR X9, [X9]
	0x0390632C CMP X8, X9
	0x03906330 B.EQ 0x3906344
	0x03906334 MOV W0, W31
	0x03906338 LDP X20, X19, [X31 + 0x10]
	0x0390633C LDP X30, X21, [X31], #0x20
	0x03906340 RET
	0x03906344 MOV X0, X20
	0x03906348 BL 0x1C16E08
	0x0390634C LDP S0, S1, [X0]
	0x03906350 MOV X0, X19
	0x03906354 LDP X20, X19, [X31 + 0x10]
	0x03906358 LDP X30, X21, [X31], #0x20
	0x0390635C B 0x3906238
	0x03906360 LDP S0, S1, [X0]
	0x03906364 MOV X0, X31

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X20, 0xADC000
	008 Move W8, [X20+2001]
	009 Move X21, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x848000
	016 Move X0, [X0+3712]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2001], W8
	020 Compare X19, 0
	021 JumpIfEqual {57}
	022 Move X22, 0x848000
	023 Move X22, [X22+3712]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_transform, X0
	027 Move X1, [X22]
	028 Move X20, [X19+88]
	029 Move X19, X0
	030 Move X0, X21
	031 Call Enumerable.Last, X0
	032 Compare X0, 0
	033 JumpIfEqual {57}
	034 Move X1, [X0+88]
	035 Compare X1, 0
	036 JumpIfNotEqual {39}
	037 Call Face.CacheDistinctIndexes, X0
	038 Move X1, X0
	039 Add X8, X31, 8
	040 Move X0, X20
	041 Call Math.GetBounds, X0, X1
	042 Compare X19, 0
	043 JumpIfEqual {57}
	044 Move S0, [X31+8]
	045 Move S1, [X31+12]
	046 Move V2, [X31+16]
	047 Move X0, X19
	048 Move X20, [X31+64]
	049 Move X19, [X31+72]
	050 Move X22, [X31+48]
	051 Move X21, [X31+56]
	052 Move X30, [X31+32]
	053 Move X1, X31
	054 Add X31, X31, 80
	055 Call Transform.TransformPoint, X0, X1
	056 Return X0
	057 Call 0x1C17F20

Method: UnityEngine.Vector3 GetActiveElementPosition(UnityEngine.ProBuilder.ProBuilderMesh mesh, System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Edge> edges)

Disassembly:
	0x03906938 AND W0, W0, 0x1
	0x0390693C ADD X31, X31, 0x20
	0x03906940 RET
	0x03906944 STP D11, D10, [X31 - 0x40]!
	0x03906948 STP D9, D8, [X31 + 0x10]
	0x0390694C STR X30, [X31 + 0x20]
	0x03906950 STP X20, X19, [X31 + 0x30]
	0x03906954 MOV V10.16B, V1.16B
	0x03906958 LDR V1, [X0]
	0x0390695C MOV V11.16B, V0.16B
	0x03906960 MOV V8.16B, V3.16B
	0x03906964 MOV V9.16B, V2.16B
	0x03906968 MOV V0.16B, V1.16B
	0x0390696C MOV X19, X0
	0x03906970 BL 0x3906A34
	0x03906974 MOV V0.16B, V11.16B
	0x03906978 MOV W20, W0
	0x0390697C BL 0x3906A34
	0x03906980 CMP W20, W0
	0x03906984 B.NE 0x39069E0
	0x03906988 LDR V0, [X19 + 0x4]
	0x0390698C BL 0x3906A34
	0x03906990 MOV V0.16B, V10.16B
	0x03906994 MOV W20, W0
	0x03906998 BL 0x3906A34
	0x0390699C CMP W20, W0
	0x039069A0 B.NE 0x39069E0
	0x039069A4 LDR V0, [X19 + 0x8]
	0x039069A8 BL 0x3906A34
	0x039069AC MOV V0.16B, V9.16B
	0x039069B0 MOV W20, W0
	0x039069B4 BL 0x3906A34
	0x039069B8 CMP W20, W0
	0x039069BC B.NE 0x39069E0
	0x039069C0 LDR V0, [X19 + 0xC]
	0x039069C4 BL 0x3906A34
	0x039069C8 MOV V0.16B, V8.16B
	0x039069CC MOV W19, W0
	0x039069D0 BL 0x3906A34
	0x039069D4 CMP W19, W0
	0x039069D8 CSET W0, EQ
	0x039069DC B 0x39069E4
	0x039069E0 MOV W0, W31
	0x039069E4 LDP X20, X19, [X31 + 0x30]
	0x039069E8 LDR X30, [X31 + 0x20]
	0x039069EC LDP D9, D8, [X31 + 0x10]
	0x039069F0 LDP D11, D10, [X31], #0x40
	0x039069F4 RET
	0x039069F8 SUB X31, X31, 0x20
	0x039069FC STR X30, [X31 + 0x10]
	0x03906A00 STP S0, S1, [X31]
	0x03906A04 STP S2, S3, [X31 + 0x8]
	0x03906A08 ADD X0, X31, 0x0
	0x03906A0C MOV V0.16B, V4.16B
	0x03906A10 MOV V1.16B, V5.16B
	0x03906A14 MOV V2.16B, V6.16B
	0x03906A18 MOV V3.16B, V7.16B
	0x03906A1C BL 0x3906944
	0x03906A20 LDR X30, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X21, 0xADC000
	008 Move X22, 0x848000
	009 Move W8, [X21+2002]
	010 Move X22, [X22+3752]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x848000
	018 Move X0, [X0+3752]
	019 Call 0x1C17CF4
	020 Move X0, 0x7EF000
	021 Move X0, [X0+3672]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2002], W8
	025 Move X1, [X22]
	026 Move X0, X20
	027 Call 0x21C7044, X0
	028 Compare X19, 0
	029 JumpIfEqual {72}
	030 Move X22, 0x7EF000
	031 Move X22, [X22+3672]
	032 Move X20, X0
	033 Move X0, X19
	034 Move X1, X31
	035 Call Component.get_transform, X0
	036 Move X8, [X22]
	037 Move X21, [X19+88]
	038 Move X19, X0
	039 Move W1, 2
	040 Move X0, X8
	041 Call 0x1C17D6C
	042 Compare X0, 0
	043 JumpIfEqual {72}
	044 Move W8, [X0+24]
	045 Move X1, X0
	046 Compare W8, 0
	047 JumpIfEqual {73}
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move [X1+32], W20
	050 Move X8, X20
	051 ShiftRight X8, 32
	052 And X8, X8, 0x7FFFFFFF
	053 Move [X1+36], W8
	054 Add X8, X31, 8
	055 Move X0, X21
	056 Call Math.GetBounds, X0, X1
	057 Compare X19, 0
	058 JumpIfEqual {72}
	059 Move S0, [X31+8]
	060 Move S1, [X31+12]
	061 Move V2, [X31+16]
	062 Move X0, X19
	063 Move X20, [X31+64]
	064 Move X19, [X31+72]
	065 Move X22, [X31+48]
	066 Move X21, [X31+56]
	067 Move X30, [X31+32]
	068 Move X1, X31
	069 Add X31, X31, 80
	070 Call Transform.TransformPoint, X0, X1
	071 Return X0
	072 Call 0x1C17F20
	073 Call 0x1C17F28

Method: UnityEngine.Vector3 GetActiveElementPosition(UnityEngine.ProBuilder.ProBuilderMesh mesh, System.Collections.Generic.IEnumerable`1<System.Int32> vertices)

Disassembly:
	0x03906A24 ORN W8, W31, W0, 0x0
	0x03906A28 AND W0, W8, 0x1
	0x03906A2C ADD X31, X31, 0x20
	0x03906A30 RET
	0x03906A34 STR D8, [X31 - 0x20]!
	0x03906A38 STR X30, [X31 + 0x8]
	0x03906A3C STP X20, X19, [X31 + 0x10]
	0x03906A40 ADRP X19, 0xADB000
	0x03906A44 ADRP X20, 0x7F6000
	0x03906A48 LDRB W8, [X19 + 0x7E0]
	0x03906A4C LDR X20, [X20 + 0x9E8]
	0x03906A50 MOV V8.16B, V0.16B
	0x03906A54 TBNZ X8, 0x0, 0x3906A6C
	0x03906A58 ADRP X0, 0x7F6000
	0x03906A5C LDR X0, [X0 + 0x9E8]
	0x03906A60 BL 0x1C16CF4
	0x03906A64 MOVZ W8, 0x1
	0x03906A68 STRB W8, [X19 + 0x7E0]
	0x03906A6C LDR X0, [X20]
	0x03906A70 LDR W8, [X0 + 0xE0]
	0x03906A74 CBNZ W8, 0x3906A7C
	0x03906A78 BL 0x1C16DFC
	0x03906A7C LDP X20, X19, [X31 + 0x10]
	0x03906A80 LDR X30, [X31 + 0x8]
	0x03906A84 MOVZ W8, 0x447A0000
	0x03906A88 FMOV S0, W8
	0x03906A8C FMUL S0, S8, S0
	0x03906A90 MOV X0, X31
	0x03906A94 LDR V8, [X31], #0x20
	0x03906A98 B 0x332049C
	0x03906A9C STP D11, D10, [X31 - 0x40]!
	0x03906AA0 STP D9, D8, [X31 + 0x10]
	0x03906AA4 STR X30, [X31 + 0x20]
	0x03906AA8 STP X20, X19, [X31 + 0x30]
	0x03906AAC MOV V10.16B, V1.16B
	0x03906AB0 LDR V1, [X0]
	0x03906AB4 MOV V11.16B, V0.16B
	0x03906AB8 MOV V8.16B, V3.16B
	0x03906ABC MOV V9.16B, V2.16B
	0x03906AC0 MOV V0.16B, V1.16B
	0x03906AC4 MOV X19, X0
	0x03906AC8 BL 0x3906A34

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xADC000
	007 Move W8, [X21+2003]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x848000
	015 Move X0, [X0+2728]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2003], W8
	019 Compare X20, 0
	020 JumpIfEqual {52}
	021 Move X22, 0x848000
	022 Move X22, [X22+2728]
	023 Move X0, X20
	024 Move X1, X31
	025 Call Component.get_transform, X0
	026 Move X1, [X22]
	027 Move X21, [X20+88]
	028 Move X20, X0
	029 Move X0, X19
	030 Call Enumerable.First, X0
	031 Compare X21, 0
	032 JumpIfEqual {52}
	033 Move W8, [X21+24]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Compare X20, 0
	036 JumpIfEqual {52}
	037 Move X8, W0
	038 Move W9, 12
	039 NotImplemented "Instruction MADD not yet implemented."
	040 Move S1, [X8+36]
	041 Move S2, [X8+40]
	042 Move V0, [X8+32]
	043 Move X0, X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X1, X31
	049 Move X30, [X31+48]
	050 Call Transform.TransformPoint, X0, X1
	051 Return X0
	052 Call 0x1C17F20
	053 Call 0x1C17F28

