Type: UnityEngine.ProBuilder.UnwrapParameters

Method: System.Single get_hardAngle()

Disassembly:
	0x0393BA1C STR X30, [X31 + 0x20]
	0x0393BA20 STP X26, X25, [X31 + 0x30]

ISIL:
	001 Move V0, [X0+16]
	002 Return V0

Method: System.Void set_hardAngle(System.Single value)

Disassembly:
	0x0393BA24 STP X24, X23, [X31 + 0x40]
	0x0393BA28 STP X22, X21, [X31 + 0x50]

ISIL:
	001 Move [X0+16], S0
	002 Return 

Method: System.Single get_packMargin()

Disassembly:
	0x0393BA2C STP X20, X19, [X31 + 0x60]
	0x0393BA30 ADRP X22, 0xAA6000

ISIL:
	001 Move V0, [X0+20]
	002 Return V0

Method: System.Void set_packMargin(System.Single value)

Disassembly:
	0x0393BA34 LDRB W8, [X22 + 0x933]
	0x0393BA38 MOV X19, X2

ISIL:
	001 Move [X0+20], S0
	002 Return 

Method: System.Single get_angleError()

Disassembly:
	0x0393BA3C MOV X20, X1
	0x0393BA40 MOV X21, X0

ISIL:
	001 Move V0, [X0+24]
	002 Return V0

Method: System.Void set_angleError(System.Single value)

Disassembly:
	0x0393BA44 TBNZ X8, 0x0, 0x393BA80
	0x0393BA48 ADRP X0, 0x812000

ISIL:
	001 Move [X0+24], S0
	002 Return 

Method: System.Single get_areaError()

Disassembly:
	0x0393BA4C LDR X0, [X0 + 0xF50]
	0x0393BA50 BL 0x1C16CF4

ISIL:
	001 Move V0, [X0+28]
	002 Return V0

Method: System.Void set_areaError(System.Single value)

Disassembly:
	0x0393BA54 ADRP X0, 0x7E0000
	0x0393BA58 LDR X0, [X0 + 0x7A0]

ISIL:
	001 Move [X0+28], S0
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x039343EC STR S2, [X20 + 0x34]
	0x039343F0 LDR X0, [X8]
	0x039343F4 BL 0x1C16F10
	0x039343F8 MOV X1, X31
	0x039343FC MOV X22, X0
	0x03934400 BL 0x3231AC4
	0x03934404 CMP W19, 0x3
	0x03934408 B.LT 0x3934530
	0x0393440C MOVZ W24, 0x2
	0x03934410 MOVZ W25, 0x3
	0x03934414 MOVZ W26, 0xC
	0x03934418 MOVZ W27, 0x1
	0x0393441C FMOV S8, W31
	0x03934420 SCVTF S0, W24

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X8, -48533504
	005 Move V0, [X8+90]
	006 Move X1, X31
	007 Move X19, X0
	008 Move [X31], V0
	009 Move [X0+1], V0
	010 Call Object..ctor, X0
	011 Move V0, [X31]
	012 Move [X19+1], V0
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Add X31, X31, 32
	016 Return 

Method: System.Void .ctor(UnityEngine.ProBuilder.UnwrapParameters other)

Disassembly:
	0x0393BA6C ADRP X0, 0x813000
	0x0393BA70 LDR X0, [X0 + 0x590]
	0x0393BA74 BL 0x1C16CF4
	0x0393BA78 MOVZ W8, 0x1
	0x0393BA7C STRB W8, [X22 + 0x933]
	0x0393BA80 CBZ X20, 0x393C300
	0x0393BA84 ADRP X25, 0x7E0000
	0x0393BA88 LDR X8, [X20]
	0x0393BA8C LDR X25, [X25 + 0x7A0]
	0x0393BA90 ADRP X22, 0x812000
	0x0393BA94 LDRH W9, [X8 + 0x12E]
	0x0393BA98 LDR X1, [X25]
	0x0393BA9C LDR X22, [X22 + 0xF50]
	0x0393BAA0 CBZ X9, 0x393BAC4
	0x0393BAA4 LDR X10, [X8 + 0xB0]
	0x0393BAA8 ADD X10, X10, 0x8
	0x0393BAAC LDUR X11, [X10 - 0x8]
	0x0393BAB0 CMP X11, X1
	0x0393BAB4 B.EQ 0x393BAD4
	0x0393BAB8 SUBS X9, X9, 0x1
	0x0393BABC ADD X10, X10, 0x10
	0x0393BAC0 B.NE 0x393BAAC
	0x0393BAC4 MOV X0, X20
	0x0393BAC8 MOV W2, W31
	0x0393BACC BL 0x1C5C788
	0x0393BAD0 B 0x393BAE0
	0x0393BAD4 LDRSW X9, [X10]
	0x0393BAD8 ADD X8, X8, X9, 0x4, LSL
	0x0393BADC ADD X0, X8, 0x138
	0x0393BAE0 LDP X8, X1, [X0]
	0x0393BAE4 MOV X0, X20
	0x0393BAE8 BLR X8
	0x0393BAEC LDR X8, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, -48562176
	005 Move V0, [X8+90]
	006 Move X19, X1
	007 Move X1, X31
	008 Move X20, X0
	009 Move [X0+1], V0
	010 Call Object..ctor, X0
	011 Compare X19, 0
	012 JumpIfEqual {19}
	013 Move V0, [X19+1]
	014 Move [X20+1], V0
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Return 
	019 Move X0, 0x7BE000
	020 Move X0, [X0+1320]
	021 Call 0x1C17D08
	022 Call 0x1C17F10
	023 Move X19, X0
	024 Move X0, 0x7E3000
	025 Move X0, [X0+2344]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Move X2, X31
	030 Call ArgumentNullException..ctor, X0, X1
	031 Move X0, 0x814000
	032 Move X0, [X0+3752]
	033 Call 0x1C17D08
	034 Move X1, X0
	035 Move X0, X19
	036 Call 0x1C17DEC

Method: System.Void Reset()

Disassembly:
	0x0393BA5C BL 0x1C16CF4
	0x0393BA60 ADRP X0, 0x7E0000
	0x0393BA64 LDR X0, [X0 + 0x7A8]
	0x0393BA68 BL 0x1C16CF4

ISIL:
	001 Move X8, -48562176
	002 Move V0, [X8+90]
	003 Move [X0+1], V0
	004 Return 

Method: System.String ToString()

Disassembly:
	0x0393BAF0 MOV W22, W0
	0x0393BAF4 MOV X0, X8
	0x0393BAF8 BL 0x1C16F10
	0x0393BAFC MOV X1, X21
	0x0393BB00 MOV X2, X20
	0x0393BB04 MOV X3, X31
	0x0393BB08 MOV X24, X0
	0x0393BB0C BL 0x38F8640
	0x0393BB10 LDR W8, [X19 + 0x4]
	0x0393BB14 CMP W8, 0x2
	0x0393BB18 B.EQ 0x393BB6C
	0x0393BB1C CBNZ W8, 0x393BBBC
	0x0393BB20 CBZ X24, 0x393C300
	0x0393BB24 ADRP X8, 0x813000
	0x0393BB28 LDR X8, [X8 + 0x590]
	0x0393BB2C LDP S0, S1, [X24 + 0x18]
	0x0393BB30 LDR X0, [X8]
	0x0393BB34 FCMP S0, S1
	0x0393BB38 FCSEL S8, S0, S1, GT
	0x0393BB3C LDR W8, [X0 + 0xE0]
	0x0393BB40 CBNZ W8, 0x393BB48
	0x0393BB44 BL 0x1C16DFC
	0x0393BB48 MOV X0, X21
	0x0393BB4C MOV X1, X20
	0x0393BB50 MOV V0.16B, V8.16B
	0x0393BB54 MOV V1.16B, V8.16B
	0x0393BB58 MOV X2, X24
	0x0393BB5C BL 0x393C498
	0x0393BB60 LDR V0, [X24 + 0x10]
	0x0393BB64 FDIV S0, S0, S8
	0x0393BB68 B 0x393BBB0
	0x0393BB6C CBZ X24, 0x393C300
	0x0393BB70 ADRP X8, 0x813000
	0x0393BB74 LDR X8, [X8 + 0x590]
	0x0393BB78 LDP S9, S8, [X24 + 0x18]
	0x0393BB7C LDR X0, [X8]
	0x0393BB80 LDR W8, [X0 + 0xE0]
	0x0393BB84 CBNZ W8, 0x393BB8C
	0x0393BB88 BL 0x1C16DFC
	0x0393BB8C MOV X0, X21
	0x0393BB90 MOV X1, X20
	0x0393BB94 MOV V0.16B, V9.16B
	0x0393BB98 MOV V1.16B, V8.16B
	0x0393BB9C MOV X2, X24
	0x0393BBA0 BL 0x393C498
	0x0393BBA4 LDR V0, [X24 + 0x10]
	0x0393BBA8 LDP S1, S8, [X24 + 0x18]
	0x0393BBAC FDIV S0, S0, S1
	0x0393BBB0 LDR V1, [X24 + 0x14]
	0x0393BBB4 FDIV S1, S1, S8
	0x0393BBB8 STP S0, S1, [X24 + 0x10]
	0x0393BBBC LDR V0, [X19 + 0x8]
	0x0393BBC0 FMOV V1.2S, 0x0
	0x0393BBC4 ADRP X26, 0x7E0000
	0x0393BBC8 LDR X26, [X26 + 0x7A8]
	0x0393BBCC FCMEQ V1.2S, V0.2S, V1.2S
	0x0393BBD0 UNIMPLEMENTED
	0x0393BBD4 AND V1.8B, V1.8B, V2.8B
	0x0393BBD8 FMOV W8, S1
	0x0393BBDC TBZ X8, 0x0, 0x393BBEC
	0x0393BBE0 LDR V1, [X19 + 0x18]
	0x0393BBE4 FCMP S1, 0x0
	0x0393BBE8 B.EQ 0x393BE98
	0x0393BBEC CBZ X24, 0x393C300
	0x0393BBF0 CMP W22, 0x1
	0x0393BBF4 B.LT 0x393BE98
	0x0393BBF8 LDR V1, [X24 + 0x10]
	0x0393BBFC MOV W23, W31
	0x00000000 INVALID
	0x0393BC04 MOV S8, V0.S[1]
	0x0393BC08 FSUB V9.2S, V1.2S, V0.2S
	0x0393BC0C STR V0, [X31]
	0x0393BC10 LDR X8, [X20]
	0x0393BC14 LDR X1, [X26]
	0x0393BC18 LDRH W9, [X8 + 0x12E]
	0x0393BC1C CBZ X9, 0x393BC40
	0x0393BC20 LDR X10, [X8 + 0xB0]
	0x0393BC24 ADD X10, X10, 0x8
	0x0393BC28 LDUR X11, [X10 - 0x8]
	0x0393BC2C CMP X11, X1
	0x0393BC30 B.EQ 0x393BC50
	0x0393BC34 SUBS X9, X9, 0x1
	0x0393BC38 ADD X10, X10, 0x10
	0x0393BC3C B.NE 0x393BC28
	0x0393BC40 MOV X0, X20
	0x0393BC44 MOV W2, W31
	0x0393BC48 BL 0x1C5C788
	0x0393BC4C B 0x393BC5C
	0x0393BC50 LDRSW X9, [X10]
	0x0393BC54 ADD X8, X8, X9, 0x4, LSL
	0x0393BC58 ADD X0, X8, 0x138
	0x0393BC5C LDP X8, X2, [X0]
	0x0393BC60 MOV X0, X20
	0x0393BC64 MOV W1, W23
	0x0393BC68 BLR X8
	0x0393BC6C CBZ X21, 0x393C300
	0x0393BC70 LDR W8, [X21 + 0x18]
	0x0393BC74 CMP W0, W8
	0x0393BC78 B.CS 0x393C2FC
	0x0393BC7C ADD X8, X21, W0, 0x3, SXTW
	0x0393BC80 LDR V0, [X8 + 0x20]
	0x0393BC84 FSUB V0.2S, V0.2S, V9.2S
	0x0393BC88 STR D0, [X8 + 0x20]
	0x0393BC8C LDR X8, [X20]
	0x0393BC90 LDR X1, [X26]
	0x0393BC94 LDRH W9, [X8 + 0x12E]
	0x0393BC98 CBZ X9, 0x393BCBC

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X19, 0xAA7000
	008 Move X21, 0x7B9000
	009 Move X22, 0x7B9000
	010 Move W8, [X19+2345]
	011 Move X21, [X21+2512]
	012 Move X22, [X22+2704]
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x7B9000
	019 Move X0, [X0+2512]
	020 Call 0x1C17CF4
	021 Move X0, 0x7B9000
	022 Move X0, [X0+2704]
	023 Call 0x1C17CF4
	024 Move X0, 0x814000
	025 Move X0, [X0+3760]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X19+2345], W8
	029 Move X0, [X21]
	030 Move W1, 4
	031 Call 0x1C17D6C
	032 Move X19, X0
	033 Move V0, [X20+16]
	034 Move X0, [X22]
	035 Add X1, X31, 28
	036 Move [X31+28], S0
	037 Call 0x1C17E04
	038 Compare X19, 0
	039 JumpIfEqual {121}
	040 Move X21, X0
	041 Compare X0, 0
	042 JumpIfEqual {49}
	043 Move X8, [X19]
	044 Move X0, X21
	045 Move X1, [X8+64]
	046 Call 0x1C17E00
	047 Compare X0, 0
	048 JumpIfEqual {118}
	049 Move W8, [X19+24]
	050 Compare W8, 0
	051 JumpIfEqual {117}
	052 Move [X19+32], X21
	053 Move V0, [X20+20]
	054 Move X0, [X22]
	055 Add X1, X31, 24
	056 Move [X31+24], S0
	057 Call 0x1C17E04
	058 Move X21, X0
	059 Compare X0, 0
	060 JumpIfEqual {67}
	061 Move X8, [X19]
	062 Move X0, X21
	063 Move X1, [X8+64]
	064 Call 0x1C17E00
	065 Compare X0, 0
	066 JumpIfEqual {118}
	067 Move W8, [X19+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move [X19+40], X21
	070 Move V0, [X20+24]
	071 Move X0, [X22]
	072 Add X1, X31, 12
	073 Move [X31+12], S0
	074 Call 0x1C17E04
	075 Move X21, X0
	076 Compare X0, 0
	077 JumpIfEqual {84}
	078 Move X8, [X19]
	079 Move X0, X21
	080 Move X1, [X8+64]
	081 Call 0x1C17E00
	082 Compare X0, 0
	083 JumpIfEqual {118}
	084 Move W8, [X19+24]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move [X19+48], X21
	087 Move V0, [X20+28]
	088 Move X0, [X22]
	089 Add X1, X31, 8
	090 Move [X31+8], S0
	091 Call 0x1C17E04
	092 Move X20, X0
	093 Compare X0, 0
	094 JumpIfEqual {101}
	095 Move X8, [X19]
	096 Move X0, X20
	097 Move X1, [X8+64]
	098 Call 0x1C17E00
	099 Compare X0, 0
	100 JumpIfEqual {118}
	101 Move W8, [X19+24]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X8, 0x814000
	104 Move X8, [X8+3760]
	105 Move [X19+56], X20
	106 Move X1, X19
	107 Move X2, X31
	108 Move X0, [X8]
	109 Call String.Format, X0, X1
	110 Move X20, [X31+48]
	111 Move X19, [X31+56]
	112 Move X22, [X31+32]
	113 Move X21, [X31+40]
	114 Move X30, [X31+16]
	115 Add X31, X31, 64
	116 Return X0
	117 Call 0x1C17F28
	118 Call 0x1C17F44
	119 Move X1, X31
	120 Call 0x1C17DEC
	121 Call 0x1C17F20

