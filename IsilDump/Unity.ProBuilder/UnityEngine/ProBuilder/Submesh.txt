Type: UnityEngine.ProBuilder.Submesh

Method: System.Collections.Generic.IEnumerable`1<System.Int32> get_indexes()

Disassembly:
	0x03939CBC ADRP X8, 0x815000
	0x03939CC0 LDR X8, [X8 + 0xE60]
	0x03939CC4 ADD X0, X19, 0x18
	0x03939CC8 MOV X1, X31
	0x03939CCC LDR X8, [X8]
	0x03939CD0 STR X8, [X20 + 0x30]
	0x03939CD4 BL 0x338FE24
	0x03939CD8 LDR W8, [X20 + 0x18]
	0x03939CDC CMP W8, 0x3
	0x03939CE0 B.LS 0x3939D48
	0x03939CE4 CMP W8, 0x4
	0x03939CE8 STR X0, [X20 + 0x38]
	0x03939CEC B.EQ 0x3939D48
	0x03939CF0 ADRP X8, 0x815000
	0x03939CF4 LDR X8, [X8 + 0xE68]
	0x03939CF8 ADD X0, X31, 0x8
	0x03939CFC MOV X1, X31
	0x03939D00 MOV X2, X31
	0x03939D04 LDR X8, [X8]
	0x03939D08 MOV X3, X31
	0x03939D0C STR X8, [X20 + 0x40]
	0x03939D10 LDUR X8, [X19 + 0x1C]
	0x03939D14 STR X8, [X31 + 0x8]
	0x03939D18 BL 0x25F34C4
	0x03939D1C LDR W8, [X20 + 0x18]
	0x03939D20 CMP W8, 0x5
	0x03939D24 B.LS 0x3939D48
	0x03939D28 STR X0, [X20 + 0x48]
	0x03939D2C MOV X0, X20
	0x03939D30 MOV X1, X31
	0x03939D34 BL 0x32278CC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xAA9000
	007 Move X21, 0x815000
	008 Move X20, 0x815000
	009 Move W8, [X22+2326]
	010 Move X21, [X21+3368]
	011 Move X20, [X20+3376]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x815000
	018 Move X0, [X0+3376]
	019 Call 0x1C17CF4
	020 Move X0, 0x815000
	021 Move X0, [X0+3368]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2326], W8
	025 Move X0, [X21]
	026 Move X19, [X19+16]
	027 Call 0x1C17F10
	028 Move X2, [X20]
	029 Move X1, X19
	030 Move X20, X0
	031 Call ReadOnlyCollection`1<Int32>..ctor, X0, X1
	032 Move X0, X20
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Return X0

Method: System.Void set_indexes(System.Collections.Generic.IEnumerable`1<System.Int32> value)

Disassembly:
	0x03939D38 LDP X20, X19, [X31 + 0x20]
	0x03939D3C LDP X30, X21, [X31 + 0x10]
	0x03939D40 ADD X31, X31, 0x30
	0x03939D44 RET
	0x03939D48 BL 0x1C16F28
	0x03939D4C BL 0x1C16F20
	0x03939D50 STR X30, [X31 - 0x30]!
	0x03939D54 STP X22, X21, [X31 + 0x10]
	0x03939D58 STP X20, X19, [X31 + 0x20]
	0x03939D5C ADRP X20, 0xAA8000
	0x03939D60 LDRB W8, [X20 + 0x91E]
	0x03939D64 MOV X19, X0
	0x03939D68 TBNZ X8, 0x0, 0x3939D98
	0x03939D6C ADRP X0, 0x815000
	0x03939D70 LDR X0, [X0 + 0xE70]
	0x03939D74 BL 0x1C16CF4
	0x03939D78 ADRP X0, 0x7C1000
	0x03939D7C LDR X0, [X0 + 0x708]
	0x03939D80 BL 0x1C16CF4
	0x03939D84 ADRP X0, 0x815000
	0x03939D88 LDR X0, [X0 + 0xE78]
	0x03939D8C BL 0x1C16CF4
	0x03939D90 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xAA9000
	007 Move X22, 0x7BD000
	008 Move W8, [X21+2327]
	009 Move X22, [X22+2504]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x7BD000
	017 Move X0, [X0+2504]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2327], W8
	021 Move X1, [X22]
	022 Move X0, X20
	023 Call Enumerable.ToArray, X0
	024 Move [X19+16], X0
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 Return 

Method: UnityEngine.MeshTopology get_topology()

Disassembly:
	0x03939D94 STRB W8, [X20 + 0x91E]
	0x03939D98 CBZ X19, 0x3939E84

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_topology(UnityEngine.MeshTopology value)

Disassembly:
	0x03939D9C ADRP X20, 0x7C1000
	0x03939DA0 LDR X20, [X20 + 0x708]

ISIL:
	001 Move [X0+24], W1
	002 Return 

Method: System.Int32 get_submeshIndex()

Disassembly:
	0x03939DA4 MOV X0, X19
	0x03939DA8 MOV X1, X31

ISIL:
	001 Move W0, [X0+28]
	002 Return X0

Method: System.Void set_submeshIndex(System.Int32 value)

Disassembly:
	0x03939DAC BL 0x3C40C8C
	0x03939DB0 LDR X8, [X20]

ISIL:
	001 Move [X0+28], W1
	002 Return 

Method: System.Void .ctor(System.Int32 submeshIndex, UnityEngine.MeshTopology topology, System.Collections.Generic.IEnumerable`1<System.Int32> indexes)

Disassembly:
	0x03939DB4 MOV W1, W0
	0x03939DB8 MOV X0, X8
	0x03939DBC BL 0x1C16D6C
	0x03939DC0 MOV X20, X0
	0x03939DC4 MOV X0, X19
	0x03939DC8 MOV X1, X31
	0x03939DCC BL 0x3C40C8C
	0x03939DD0 SUBS W21, W0, 0x1
	0x03939DD4 B.MI 0x3939E38
	0x03939DD8 MOV X0, X19
	0x03939DDC MOV W1, W21
	0x03939DE0 MOV X2, X31
	0x03939DE4 BL 0x3C410A0
	0x03939DE8 CBZ X20, 0x3939E84
	0x03939DEC MOV X22, X0
	0x03939DF0 CBZ X0, 0x3939E88
	0x03939DF4 LDR X8, [X20]
	0x03939DF8 MOV X0, X22
	0x03939DFC LDR X1, [X8 + 0x40]
	0x03939E00 BL 0x1C16E00
	0x03939E04 CBZ X0, 0x3939EA4
	0x03939E08 LDR W8, [X20 + 0x18]
	0x03939E0C CMP W21, W8
	0x03939E10 B.CS 0x3939EA0
	0x03939E14 ADD X8, X20, W21, 0x3, UXTW
	0x03939E18 MOVZ W2, 0x1
	0x03939E1C MOV X0, X22
	0x03939E20 MOV X1, X31
	0x03939E24 MOV X3, X31
	0x03939E28 STR X22, [X8 + 0x20]
	0x03939E2C BL 0x3C3FEB8
	0x03939E30 SUBS W21, W21, 0x1
	0x03939E34 B.PL 0x3939DD8
	0x03939E38 ADRP X21, 0x815000
	0x03939E3C LDR X21, [X21 + 0xE78]
	0x03939E40 LDR X0, [X21]
	0x03939E44 LDR W8, [X0 + 0xE0]
	0x03939E48 CBNZ W8, 0x3939E54
	0x03939E4C BL 0x1C16DFC
	0x03939E50 LDR X0, [X21]
	0x03939E54 LDR X8, [X0 + 0xB8]
	0x03939E58 LDR X0, [X8]
	0x03939E5C CBZ X0, 0x3939E84
	0x03939E60 ADRP X8, 0x815000
	0x03939E64 LDR X8, [X8 + 0xE70]
	0x03939E68 MOV X1, X19
	0x03939E6C MOV X2, X20
	0x03939E70 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xAA9000
	008 Move W8, [X23+2328]
	009 Move X22, X3
	010 Move W20, W2
	011 Move W19, W1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x7BD000
	018 Move X0, [X0+2504]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+2328], W8
	022 Move X0, X21
	023 Move X1, X31
	024 Call Object..ctor, X0
	025 Compare X22, 0
	026 JumpIfEqual {42}
	027 Move X8, 0x7BD000
	028 Move X8, [X8+2504]
	029 Move X0, X22
	030 Move X1, [X8]
	031 Call Enumerable.ToArray, X0
	032 Move [X21+16], X0
	033 Move [X21+24], W20
	034 Move [X21+28], W19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Move X23, [X31+56]
	041 Return 
	042 Move X0, 0x7C0000
	043 Move X0, [X0+1320]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X19, X0
	047 Move X0, 0x7F3000
	048 Move X0, [X0+3600]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Move X2, X31
	053 Call ArgumentNullException..ctor, X0, X1
	054 Move X0, 0x816000
	055 Move X0, [X0+3608]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X19
	059 Call 0x1C17DEC

Method: System.Void .ctor(UnityEngine.Mesh mesh, System.Int32 subMeshIndex)

Disassembly:
	0x03939E74 LDR X3, [X8]
	0x03939E78 LDP X22, X21, [X31 + 0x10]
	0x03939E7C LDR X30, [X31], #0x30
	0x03939E80 B 0x2AA5098
	0x03939E84 BL 0x1C16F20
	0x03939E88 LDR W8, [X20 + 0x18]
	0x03939E8C CMP W21, W8
	0x03939E90 B.CS 0x3939EA0
	0x03939E94 ADD X8, X20, W21, 0x3, UXTW
	0x03939E98 STR X22, [X8 + 0x20]
	0x03939E9C BL 0x1C16F20
	0x03939EA0 BL 0x1C16F28
	0x03939EA4 BL 0x1C16F44
	0x03939EA8 MOV X1, X31
	0x03939EAC BL 0x1C16DEC
	0x03939EB0 STR X30, [X31 - 0x30]!
	0x03939EB4 STP X22, X21, [X31 + 0x10]
	0x03939EB8 STP X20, X19, [X31 + 0x20]
	0x03939EBC ADRP X21, 0xAA8000
	0x03939EC0 ADRP X20, 0x815000
	0x03939EC4 LDRB W8, [X21 + 0x91F]
	0x03939EC8 LDR X20, [X20 + 0xE78]
	0x03939ECC MOV X19, X0
	0x03939ED0 TBNZ X8, 0x0, 0x3939F00
	0x03939ED4 ADRP X0, 0x815000
	0x03939ED8 LDR X0, [X0 + 0xE80]
	0x03939EDC BL 0x1C16CF4
	0x03939EE0 ADRP X0, 0x815000
	0x03939EE4 LDR X0, [X0 + 0xE88]
	0x03939EE8 BL 0x1C16CF4
	0x03939EEC ADRP X0, 0x815000
	0x03939EF0 LDR X0, [X0 + 0xE78]
	0x03939EF4 BL 0x1C16CF4
	0x03939EF8 MOVZ W8, 0x1
	0x03939EFC STRB W8, [X21 + 0x91F]
	0x03939F00 LDR X0, [X20]
	0x03939F04 STR X31, [X31 + 0x8]
	0x03939F08 LDR W8, [X0 + 0xE0]
	0x03939F0C CBNZ W8, 0x3939F18
	0x03939F10 BL 0x1C16DFC
	0x03939F14 LDR X0, [X20]
	0x03939F18 LDR X8, [X0 + 0xB8]
	0x03939F1C LDR X0, [X8]
	0x03939F20 CBZ X0, 0x3939FD0
	0x03939F24 ADRP X8, 0x815000
	0x03939F28 LDR X8, [X8 + 0xE88]
	0x03939F2C ADD X2, X31, 0x8
	0x03939F30 MOV X1, X19
	0x03939F34 LDR X3, [X8]
	0x03939F38 BL 0x2AA6B2C
	0x03939F3C TBZ X0, 0x0, 0x3939FC0
	0x03939F40 LDR X21, [X31 + 0x8]
	0x03939F44 CBZ X21, 0x3939FD0
	0x03939F48 LDR W8, [X21 + 0x18]
	0x03939F4C CMP W8, 0x1
	0x03939F50 B.LT 0x3939F8C
	0x03939F54 MOV W22, W31
	0x03939F58 CMP W22, W8
	0x03939F5C B.CS 0x3939FD4
	0x03939F60 ADD X8, X21, W22, 0x3, SXTW
	0x03939F64 LDR X0, [X8 + 0x20]
	0x03939F68 CBZ X0, 0x3939FD0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xAA9000
	008 Move X22, 0x7BB000
	009 Move W8, [X23+2329]
	010 Move X22, [X22+1432]
	011 Move W19, W2
	012 Move X21, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x7BB000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+2329], W8
	023 Move X0, X20
	024 Move X1, X31
	025 Call Object..ctor, X0
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X21
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {59}
	039 Compare X21, 0
	040 JumpIfEqual {77}
	041 Move X0, X21
	042 Move W1, W19
	043 Move X2, X31
	044 Call Mesh.GetIndices, X0, X1
	045 Move [X20+16], X0
	046 Move X0, X21
	047 Move W1, W19
	048 Move X2, X31
	049 Call Mesh.GetTopology, X0, X1
	050 Move [X20+24], W0
	051 Move [X20+28], W19
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X30, [X31+48]
	057 Move X23, [X31+56]
	058 Return 
	059 Move X0, 0x7C0000
	060 Move X0, [X0+1320]
	061 Call 0x1C17D08
	062 Call 0x1C17F10
	063 Move X19, X0
	064 Move X0, 0x815000
	065 Move X0, [X0+3728]
	066 Call 0x1C17D08
	067 Move X1, X0
	068 Move X0, X19
	069 Move X2, X31
	070 Call ArgumentNullException..ctor, X0, X1
	071 Move X0, 0x816000
	072 Move X0, [X0+3616]
	073 Call 0x1C17D08
	074 Move X1, X0
	075 Move X0, X19
	076 Call 0x1C17DEC
	077 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x03939F6C MOVZ W2, 0x1
	0x03939F70 MOV X1, X19
	0x03939F74 MOV X3, X31
	0x03939F78 BL 0x3C3FEB8
	0x03939F7C LDR W8, [X21 + 0x18]
	0x03939F80 ADD W22, W22, 0x1
	0x03939F84 CMP W22, W8
	0x03939F88 B.LT 0x3939F58
	0x03939F8C LDR X0, [X20]
	0x03939F90 LDR W8, [X0 + 0xE0]
	0x03939F94 CBNZ W8, 0x3939FA0
	0x03939F98 BL 0x1C16DFC
	0x03939F9C LDR X0, [X20]
	0x03939FA0 LDR X8, [X0 + 0xB8]
	0x03939FA4 LDR X0, [X8]
	0x03939FA8 CBZ X0, 0x3939FD0
	0x03939FAC ADRP X8, 0x815000
	0x03939FB0 LDR X8, [X8 + 0xE80]
	0x03939FB4 MOV X1, X19
	0x03939FB8 LDR X2, [X8]
	0x03939FBC BL 0x2AA64F8
	0x03939FC0 LDP X20, X19, [X31 + 0x20]
	0x03939FC4 LDP X22, X21, [X31 + 0x10]
	0x03939FC8 LDR X30, [X31], #0x30
	0x03939FCC RET
	0x03939FD0 BL 0x1C16F20
	0x03939FD4 BL 0x1C16F28
	0x03939FD8 STR X30, [X31 - 0x30]!
	0x03939FDC STP X22, X21, [X31 + 0x10]
	0x03939FE0 STP X20, X19, [X31 + 0x20]
	0x03939FE4 ADRP X20, 0xAA8000
	0x03939FE8 ADRP X22, 0x815000
	0x03939FEC LDRB W8, [X20 + 0x920]
	0x03939FF0 LDR X22, [X22 + 0x20]
	0x03939FF4 MOV X19, X1
	0x03939FF8 MOV X21, X0
	0x03939FFC TBNZ X8, 0x0, 0x393A014
	0x0393A000 ADRP X0, 0x814000
	0x0393A004 LDR X0, [X0 + 0x20]
	0x0393A008 BL 0x1C16CF4
	0x0393A00C MOVZ W8, 0x1
	0x0393A010 STRB W8, [X20 + 0x920]
	0x0393A014 LDR X0, [X22]
	0x0393A018 BL 0x1C16F10
	0x0393A01C MOV X1, X31
	0x0393A020 MOV X20, X0
	0x0393A024 BL 0x393DC14
	0x0393A028 CBZ X19, 0x393A1D4
	0x0393A02C MOVZ W1, 0x1
	0x0393A030 MOV X0, X19
	0x0393A034 MOV X2, X31
	0x0393A038 BL 0x393DBA4
	0x0393A03C TBZ X0, 0x0, 0x393A068
	0x0393A040 CBZ X21, 0x393A1D4
	0x0393A044 LDP S1, S2, [X19 + 0x14]
	0x0393A048 LDR V0, [X19 + 0x10]
	0x0393A04C MOV X0, X21
	0x0393A050 MOV X1, X31
	0x0393A054 BL 0x3C3DE4C
	0x0393A058 CBZ X20, 0x393A1D4
	0x0393A05C MOV X0, X20
	0x0393A060 MOV X1, X31
	0x0393A064 BL 0x393D8A8
	0x0393A068 MOVZ W1, 0x20
	0x0393A06C MOV X0, X19
	0x0393A070 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X23, 0xAA9000
	009 Move X20, 0x7BB000
	010 Move X22, 0x816000
	011 Move X21, 0x7E5000
	012 Move W8, [X23+2330]
	013 Move X20, [X20+1880]
	014 Move X22, [X22+88]
	015 Move X21, [X21+640]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0x7BB000
	022 Move X0, [X0+1880]
	023 Call 0x1C17CF4
	024 Move X0, 0x816000
	025 Move X0, [X0+88]
	026 Call 0x1C17CF4
	027 Move X0, 0x7E5000
	028 Move X0, [X0+640]
	029 Call 0x1C17CF4
	030 Move X0, 0x7BD000
	031 Move X0, [X0+1200]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X23+2330], W8
	035 Move W8, [X19+28]
	036 Move X0, [X20]
	037 Add X1, X31, 24
	038 Move [X31+24], W8
	039 Move [X31+28], W31
	040 Call 0x1C17E04
	041 Move X8, [X22]
	042 Move TEMP, 0
	043 Not TEMP
	044 Move X9, TEMP
	045 Move X20, X0
	046 Add X0, X31, 0
	047 Move [X31], X8
	048 Move [X31+8], X9
	049 Move W8, [X19+24]
	050 Move X1, X31
	051 Move [X31+16], W8
	052 Call Enum.ToString, X0
	053 Move X8, [X19+16]
	054 Move X21, [X21]
	055 Move X19, X0
	056 Compare X8, 0
	057 JumpIfEqual {64}
	058 Move X8, [X8+24]
	059 Add X0, X31, 28
	060 Move X1, X31
	061 Move [X31+28], W8
	062 Call Int32.ToString, X0
	063 Move X3, X0
	064 Move X8, 0x7BC000
	065 Move X8, [X8+1200]
	066 Move X3, [X8]
	067 Move X0, X21
	068 Move X1, X20
	069 Move X2, X19
	070 Move X4, X31
	071 Call String.Format, X0, X1, X2, X3
	072 Move X20, [X31+64]
	073 Move X19, [X31+72]
	074 Move X22, [X31+48]
	075 Move X21, [X31+56]
	076 Move X30, [X31+32]
	077 Move X23, [X31+40]
	078 Add X31, X31, 80
	079 Return X0

Method: System.Int32 GetSubmeshCount(UnityEngine.ProBuilder.ProBuilderMesh mesh)

Disassembly:
	0x0393A074 BL 0x393DBA4
	0x0393A078 TBZ X0, 0x0, 0x393A094
	0x0393A07C CBZ X20, 0x393A1D4
	0x0393A080 LDP S2, S3, [X19 + 0x24]
	0x0393A084 LDP S0, S1, [X19 + 0x1C]
	0x0393A088 MOV X0, X20
	0x0393A08C MOV X1, X31
	0x0393A090 BL 0x393D8FC
	0x0393A094 MOVZ W1, 0x40
	0x0393A098 MOV X0, X19
	0x0393A09C MOV X2, X31
	0x0393A0A0 BL 0x393DBA4
	0x0393A0A4 TBZ X0, 0x0, 0x393A0D0
	0x0393A0A8 CBZ X21, 0x393A1D4
	0x0393A0AC LDP S1, S2, [X19 + 0x30]
	0x0393A0B0 LDR V0, [X19 + 0x2C]
	0x0393A0B4 MOV X0, X21
	0x0393A0B8 MOV X1, X31
	0x0393A0BC BL 0x3C40610
	0x0393A0C0 CBZ X20, 0x393A1D4
	0x0393A0C4 MOV X0, X20
	0x0393A0C8 MOV X1, X31
	0x0393A0CC BL 0x393D960
	0x0393A0D0 MOVZ W1, 0x80
	0x0393A0D4 MOV X0, X19
	0x0393A0D8 MOV X2, X31
	0x0393A0DC BL 0x393DBA4

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {26}
	004 Move X8, [X0+40]
	005 Compare X8, 0
	006 JumpIfEqual {26}
	007 Move W9, [X8+24]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move W11, W31
	010 Move W10, W31
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add X12, X8, W11
	013 Move X12, [X12+32]
	014 Compare X12, 0
	015 JumpIfEqual {26}
	016 Move W12, [X12+72]
	017 Add W11, W11, 1
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CSEL not yet implemented."
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Add W0, W10, 1
	022 Move W0, 1
	023 Move X30, [X31+16]
	024 Return X0
	025 Call 0x1C17F28
	026 Call 0x1C17F20

Method: UnityEngine.ProBuilder.Submesh[] GetSubmeshes(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> faces, System.Int32 submeshCount, UnityEngine.MeshTopology preferredTopology = 0)

Disassembly:
	0x0393A0E0 TBZ X0, 0x0, 0x393A118
	0x0393A0E4 CBZ X21, 0x393A1D4
	0x0393A0E8 MOV X0, X21
	0x0393A0EC MOV X1, X31
	0x0393A0F0 BL 0x3C3DEB4
	0x0393A0F4 LDP S4, S5, [X19 + 0x38]
	0x0393A0F8 LDR V6, [X19 + 0x40]
	0x0393A0FC MOV X0, X31
	0x0393A100 BL 0x3C2A9FC
	0x0393A104 CBZ X20, 0x393A1D4
	0x0393A108 FMOV S3, W31
	0x0393A10C MOV X0, X20
	0x0393A110 MOV X1, X31
	0x0393A114 BL 0x393D9C4
	0x0393A118 MOVZ W1, 0x2
	0x0393A11C MOV X0, X19
	0x0393A120 MOV X2, X31
	0x0393A124 BL 0x393DBA4
	0x0393A128 TBZ X0, 0x0, 0x393A140
	0x0393A12C CBZ X20, 0x393A1D4
	0x0393A130 LDP S0, S1, [X19 + 0x48]
	0x0393A134 MOV X0, X20
	0x0393A138 MOV X1, X31
	0x0393A13C BL 0x393DA24
	0x0393A140 MOVZ W1, 0x4
	0x0393A144 MOV X0, X19
	0x0393A148 MOV X2, X31
	0x0393A14C BL 0x393DBA4
	0x0393A150 TBZ X0, 0x0, 0x393A168
	0x0393A154 CBZ X20, 0x393A1D4
	0x0393A158 LDP S0, S1, [X19 + 0x50]
	0x0393A15C MOV X0, X20
	0x0393A160 MOV X1, X31
	0x0393A164 BL 0x393DA80
	0x0393A168 MOVZ W1, 0x8
	0x0393A16C MOV X0, X19
	0x0393A170 MOV X2, X31
	0x0393A174 BL 0x393DBA4
	0x0393A178 TBZ X0, 0x0, 0x393A194
	0x0393A17C CBZ X20, 0x393A1D4
	0x0393A180 LDP S2, S3, [X19 + 0x60]
	0x0393A184 LDP S0, S1, [X19 + 0x58]
	0x0393A188 MOV X0, X20
	0x0393A18C MOV X1, X31
	0x0393A190 BL 0x393DAE0
	0x0393A194 MOVZ W1, 0x10
	0x0393A198 MOV X0, X19
	0x0393A19C MOV X2, X31
	0x0393A1A0 BL 0x393DBA4
	0x0393A1A4 TBZ X0, 0x0, 0x393A1C0
	0x0393A1A8 CBZ X20, 0x393A1D4
	0x0393A1AC LDP S2, S3, [X19 + 0x70]
	0x0393A1B0 LDP S0, S1, [X19 + 0x68]
	0x0393A1B4 MOV X0, X20
	0x0393A1B8 MOV X1, X31
	0x0393A1BC BL 0x393DB44
	0x0393A1C0 MOV X0, X20
	0x0393A1C4 LDP X20, X19, [X31 + 0x20]
	0x0393A1C8 LDP X22, X21, [X31 + 0x10]
	0x0393A1CC LDR X30, [X31], #0x30
	0x0393A1D0 RET
	0x0393A1D4 BL 0x1C16F20
	0x0393A1D8 STR X30, [X31 - 0x30]!
	0x0393A1DC STP X22, X21, [X31 + 0x10]
	0x0393A1E0 STP X20, X19, [X31 + 0x20]
	0x0393A1E4 ADRP X20, 0xAA7000
	0x0393A1E8 ADRP X22, 0x814000
	0x0393A1EC LDRB W8, [X20 + 0x921]
	0x0393A1F0 LDR X22, [X22 + 0x20]
	0x0393A1F4 MOV X19, X1
	0x0393A1F8 MOV X21, X0
	0x0393A1FC TBNZ X8, 0x0, 0x393A214
	0x0393A200 ADRP X0, 0x814000
	0x0393A204 LDR X0, [X0 + 0x20]
	0x0393A208 BL 0x1C16CF4
	0x0393A20C MOVZ W8, 0x1
	0x0393A210 STRB W8, [X20 + 0x921]
	0x0393A214 LDR X0, [X22]
	0x0393A218 BL 0x1C16F10
	0x0393A21C MOV X1, X31
	0x0393A220 MOV X20, X0
	0x0393A224 BL 0x393DC14
	0x0393A228 CBZ X19, 0x393A3CC
	0x0393A22C MOVZ W1, 0x1
	0x0393A230 MOV X0, X19
	0x0393A234 MOV X2, X31
	0x0393A238 BL 0x393DBA4
	0x0393A23C TBZ X0, 0x0, 0x393A268
	0x0393A240 CBZ X21, 0x393A3CC
	0x0393A244 LDP S1, S2, [X19 + 0x14]
	0x0393A248 LDR V0, [X19 + 0x10]
	0x0393A24C MOV X0, X21
	0x0393A250 MOV X1, X31
	0x0393A254 BL 0x3C40B58
	0x0393A258 CBZ X20, 0x393A3CC
	0x0393A25C MOV X0, X20
	0x0393A260 MOV X1, X31
	0x0393A264 BL 0x393D8A8
	0x0393A268 MOVZ W1, 0x20
	0x0393A26C MOV X0, X19
	0x0393A270 MOV X2, X31
	0x0393A274 BL 0x393DBA4
	0x0393A278 TBZ X0, 0x0, 0x393A294
	0x0393A27C CBZ X20, 0x393A3CC
	0x0393A280 LDP S2, S3, [X19 + 0x24]
	0x0393A284 LDP S0, S1, [X19 + 0x1C]
	0x0393A288 MOV X0, X20
	0x0393A28C MOV X1, X31
	0x0393A290 BL 0x393D8FC
	0x0393A294 MOVZ W1, 0x40
	0x0393A298 MOV X0, X19
	0x0393A29C MOV X2, X31
	0x0393A2A0 BL 0x393DBA4
	0x0393A2A4 TBZ X0, 0x0, 0x393A2D0
	0x0393A2A8 CBZ X21, 0x393A3CC
	0x0393A2AC LDP S1, S2, [X19 + 0x30]
	0x0393A2B0 LDR V0, [X19 + 0x2C]
	0x0393A2B4 MOV X0, X21
	0x0393A2B8 MOV X1, X31
	0x0393A2BC BL 0x3C408CC
	0x0393A2C0 CBZ X20, 0x393A3CC
	0x0393A2C4 MOV X0, X20
	0x0393A2C8 MOV X1, X31
	0x0393A2CC BL 0x393D960
	0x0393A2D0 MOVZ W1, 0x80
	0x0393A2D4 MOV X0, X19
	0x0393A2D8 MOV X2, X31
	0x0393A2DC BL 0x393DBA4
	0x0393A2E0 TBZ X0, 0x0, 0x393A310
	0x0393A2E4 CBZ X21, 0x393A3CC
	0x0393A2E8 LDP S1, S2, [X19 + 0x3C]
	0x0393A2EC LDR V0, [X19 + 0x38]
	0x0393A2F0 MOV X0, X21
	0x0393A2F4 MOV X1, X31
	0x0393A2F8 BL 0x3C408CC
	0x0393A2FC CBZ X20, 0x393A3CC
	0x0393A300 FMOV S3, W31
	0x0393A304 MOV X0, X20
	0x0393A308 MOV X1, X31
	0x0393A30C BL 0x393D9C4
	0x0393A310 MOVZ W1, 0x2
	0x0393A314 MOV X0, X19
	0x0393A318 MOV X2, X31
	0x0393A31C BL 0x393DBA4
	0x0393A320 TBZ X0, 0x0, 0x393A338
	0x0393A324 CBZ X20, 0x393A3CC
	0x0393A328 LDP S0, S1, [X19 + 0x48]
	0x0393A32C MOV X0, X20
	0x0393A330 MOV X1, X31
	0x0393A334 BL 0x393DA24
	0x0393A338 MOVZ W1, 0x4
	0x0393A33C MOV X0, X19
	0x0393A340 MOV X2, X31
	0x0393A344 BL 0x393DBA4
	0x0393A348 TBZ X0, 0x0, 0x393A360
	0x0393A34C CBZ X20, 0x393A3CC
	0x0393A350 LDP S0, S1, [X19 + 0x50]
	0x0393A354 MOV X0, X20
	0x0393A358 MOV X1, X31
	0x0393A35C BL 0x393DA80
	0x0393A360 MOVZ W1, 0x8
	0x0393A364 MOV X0, X19
	0x0393A368 MOV X2, X31
	0x0393A36C BL 0x393DBA4
	0x0393A370 TBZ X0, 0x0, 0x393A38C
	0x0393A374 CBZ X20, 0x393A3CC
	0x0393A378 LDP S2, S3, [X19 + 0x60]
	0x0393A37C LDP S0, S1, [X19 + 0x58]
	0x0393A380 MOV X0, X20
	0x0393A384 MOV X1, X31
	0x0393A388 BL 0x393DAE0
	0x0393A38C MOVZ W1, 0x10
	0x0393A390 MOV X0, X19
	0x0393A394 MOV X2, X31
	0x0393A398 BL 0x393DBA4
	0x0393A39C TBZ X0, 0x0, 0x393A3B8
	0x0393A3A0 CBZ X20, 0x393A3CC
	0x0393A3A4 LDP S2, S3, [X19 + 0x70]
	0x0393A3A8 LDP S0, S1, [X19 + 0x68]
	0x0393A3AC MOV X0, X20
	0x0393A3B0 MOV X1, X31
	0x0393A3B4 BL 0x393DB44
	0x0393A3B8 MOV X0, X20
	0x0393A3BC LDP X20, X19, [X31 + 0x20]
	0x0393A3C0 LDP X22, X21, [X31 + 0x10]
	0x0393A3C4 LDR X30, [X31], #0x30
	0x0393A3C8 RET
	0x0393A3CC BL 0x1C16F20
	0x0393A3D0 STR X30, [X31 - 0x30]!
	0x0393A3D4 STP X22, X21, [X31 + 0x10]
	0x0393A3D8 STP X20, X19, [X31 + 0x20]
	0x0393A3DC ADRP X21, 0xAA7000
	0x0393A3E0 ADRP X22, 0x814000
	0x0393A3E4 ADRP X19, 0x814000
	0x0393A3E8 ADRP X20, 0x814000
	0x0393A3EC LDRB W8, [X21 + 0x922]
	0x0393A3F0 LDR X22, [X22 + 0xE90]
	0x0393A3F4 LDR X19, [X19 + 0xE98]
	0x0393A3F8 LDR X20, [X20 + 0xE78]
	0x0393A3FC TBNZ X8, 0x0, 0x393A42C
	0x0393A400 ADRP X0, 0x814000
	0x0393A404 LDR X0, [X0 + 0xE98]
	0x0393A408 BL 0x1C16CF4
	0x0393A40C ADRP X0, 0x814000
	0x0393A410 LDR X0, [X0 + 0xE90]
	0x0393A414 BL 0x1C16CF4
	0x0393A418 ADRP X0, 0x814000
	0x0393A41C LDR X0, [X0 + 0xE78]
	0x0393A420 BL 0x1C16CF4
	0x0393A424 MOVZ W8, 0x1
	0x0393A428 STRB W8, [X21 + 0x922]
	0x0393A42C LDR X0, [X22]
	0x0393A430 BL 0x1C16F10
	0x0393A434 LDR X1, [X19]
	0x0393A438 MOV X19, X0
	0x0393A43C BL 0x2AA4804
	0x0393A440 LDR X8, [X20]
	0x0393A444 LDP X22, X21, [X31 + 0x10]
	0x0393A448 LDR X8, [X8 + 0xB8]
	0x0393A44C STR X19, [X8]
	0x0393A450 LDP X20, X19, [X31 + 0x20]
	0x0393A454 LDR X30, [X31], #0x30
	0x0393A458 RET
	0x0393A45C LDR W0, [X0]
	0x0393A460 RET
	0x0393A464 LDR W0, [X0 + 0x4]
	0x0393A468 RET
	0x0393A46C LDR W0, [X0 + 0x8]
	0x0393A470 RET
	0x0393A474 STP X30, X21, [X31 - 0x20]!
	0x0393A478 STP X20, X19, [X31 + 0x10]
	0x0393A47C ADRP X20, 0xAA7000
	0x0393A480 ADRP X21, 0x7BA000
	0x0393A484 LDRB W8, [X20 + 0x923]
	0x0393A488 LDR X21, [X21 + 0xE58]
	0x0393A48C MOV X19, X0
	0x0393A490 TBNZ X8, 0x0, 0x393A4A8
	0x0393A494 ADRP X0, 0x7BA000
	0x0393A498 LDR X0, [X0 + 0xE58]
	0x0393A49C BL 0x1C16CF4
	0x0393A4A0 MOVZ W8, 0x1
	0x0393A4A4 STRB W8, [X20 + 0x923]
	0x0393A4A8 LDR X0, [X21]
	0x0393A4AC MOVZ W1, 0x3
	0x0393A4B0 BL 0x1C16D6C
	0x0393A4B4 CBZ X0, 0x393A4F8
	0x0393A4B8 LDR W8, [X0 + 0x18]
	0x0393A4BC CBZ W8, 0x393A4F4
	0x0393A4C0 LDR W9, [X19]
	0x0393A4C4 CMP W8, 0x1
	0x0393A4C8 STR W9, [X0 + 0x20]
	0x0393A4CC B.EQ 0x393A4F4
	0x0393A4D0 LDR W9, [X19 + 0x4]
	0x0393A4D4 CMP W8, 0x2
	0x0393A4D8 STR W9, [X0 + 0x24]
	0x0393A4DC B.LS 0x393A4F4
	0x0393A4E0 LDR W8, [X19 + 0x8]
	0x0393A4E4 LDP X20, X19, [X31 + 0x10]
	0x0393A4E8 STR W8, [X0 + 0x28]
	0x0393A4EC LDP X30, X21, [X31], #0x20
	0x0393A4F0 RET
	0x0393A4F4 BL 0x1C16F28
	0x0393A4F8 BL 0x1C16F20
	0x0393A4FC STP W1, W2, [X0]
	0x0393A500 STR W3, [X0 + 0x8]
	0x0393A504 RET
	0x0393A508 LDR W8, [X0]
	0x0393A50C CMP W8, W1
	0x0393A510 B.NE 0x393A534
	0x0393A514 LDR W8, [X0 + 0x4]
	0x0393A518 UBFM X9, X1, 0x20, 0x3F
	0x0393A51C CMP W8, W9
	0x0393A520 B.NE 0x393A534
	0x0393A524 LDR W8, [X0 + 0x8]
	0x0393A528 CMP W8, W2
	0x0393A52C CSET W0, EQ
	0x0393A530 RET
	0x0393A534 MOV W0, W31
	0x0393A538 RET
	0x0393A53C STP X30, X21, [X31 - 0x20]!
	0x0393A540 STP X20, X19, [X31 + 0x10]
	0x0393A544 ADRP X21, 0xAA7000
	0x0393A548 LDRB W8, [X21 + 0x924]
	0x0393A54C MOV X20, X1
	0x0393A550 MOV X19, X0
	0x0393A554 TBNZ X8, 0x0, 0x393A56C
	0x0393A558 ADRP X0, 0x7E4000
	0x0393A55C LDR X0, [X0 + 0x7C8]
	0x0393A560 BL 0x1C16CF4
	0x0393A564 MOVZ W8, 0x1
	0x0393A568 STRB W8, [X21 + 0x924]
	0x0393A56C CBZ X20, 0x393A5C4
	0x0393A570 ADRP X8, 0x7E4000
	0x0393A574 LDR X8, [X8 + 0x7C8]
	0x0393A578 LDR X9, [X20]
	0x0393A57C LDR X8, [X8]
	0x0393A580 CMP X9, X8
	0x0393A584 B.NE 0x393A5C4
	0x0393A588 MOV X0, X20
	0x0393A58C BL 0x1C16E08
	0x0393A590 LDR X8, [X0]
	0x0393A594 LDR W9, [X19]
	0x0393A598 CMP W9, W8
	0x0393A59C B.NE 0x393A5C4
	0x0393A5A0 LDR W9, [X19 + 0x4]
	0x0393A5A4 UBFM X8, X8, 0x20, 0x3F
	0x0393A5A8 CMP W9, W8
	0x0393A5AC B.NE 0x393A5C4
	0x0393A5B0 LDR W8, [X0 + 0x8]
	0x0393A5B4 LDR W9, [X19 + 0x8]
	0x0393A5B8 CMP W9, W8
	0x0393A5BC CSET W0, EQ
	0x0393A5C0 B 0x393A5C8
	0x0393A5C4 MOV W0, W31
	0x0393A5C8 LDP X20, X19, [X31 + 0x10]
	0x0393A5CC LDP X30, X21, [X31], #0x20
	0x0393A5D0 RET
	0x0393A5D4 LDP W8, W9, [X0]
	0x0393A5D8 LDR W10, [X0 + 0x8]
	0x0393A5DC MOVZ W11, 0x18D
	0x0393A5E0 MUL W8, W8, W11
	0x0393A5E4 EOR W8, W8, W9, 0x0
	0x0393A5E8 MUL W8, W8, W11
	0x0393A5EC EOR W0, W8, W10, 0x0
	0x0393A5F0 RET
	0x0393A5F4 SUB X31, X31, 0x30
	0x0393A5F8 STP X30, X19, [X31 + 0x20]
	0x0393A5FC STP X31, X1, [X31 + 0x8]
	0x0393A600 STR W2, [X31 + 0x18]
	0x0393A604 LDP W1, W2, [X0]
	0x0393A608 MOV X19, X0
	0x0393A60C ADD X0, X31, 0x8
	0x0393A610 MOV X3, X31
	0x0393A614 BL 0x38FDC24
	0x0393A618 LDR X1, [X31 + 0x8]
	0x0393A61C ADD X0, X31, 0x10
	0x0393A620 BL 0x393A688
	0x0393A624 TBNZ X0, 0x0, 0x393A64C
	0x0393A628 LDP W1, W2, [X19 + 0x4]
	0x0393A62C ADD X0, X31, 0x8
	0x0393A630 MOV X3, X31
	0x0393A634 STR X31, [X31 + 0x8]
	0x0393A638 BL 0x38FDC24
	0x0393A63C LDR X1, [X31 + 0x8]
	0x0393A640 ADD X0, X31, 0x10
	0x0393A644 BL 0x393A688
	0x0393A648 TBZ X0, 0x0, 0x393A654
	0x0393A64C MOVZ W0, 0x1
	0x0393A650 B 0x393A678
	0x0393A654 LDR W1, [X19 + 0x8]
	0x0393A658 LDR W2, [X19]
	0x0393A65C ADD X0, X31, 0x8
	0x0393A660 MOV X3, X31
	0x0393A664 STR X31, [X31 + 0x8]
	0x0393A668 BL 0x38FDC24
	0x0393A66C LDR X1, [X31 + 0x8]
	0x0393A670 ADD X0, X31, 0x10
	0x0393A674 BL 0x393A688
	0x0393A678 LDP X30, X19, [X31 + 0x20]
	0x0393A67C AND W0, W0, 0x1
	0x0393A680 ADD X31, X31, 0x30
	0x0393A684 RET
	0x0393A688 STR X30, [X31 - 0x30]!
	0x0393A68C STP X22, X21, [X31 + 0x10]
	0x0393A690 STP X20, X19, [X31 + 0x20]
	0x0393A694 ADRP X22, 0xAA7000
	0x0393A698 ADRP X21, 0x7E1000
	0x0393A69C LDRB W8, [X22 + 0x925]
	0x0393A6A0 LDR X21, [X21 + 0x600]
	0x0393A6A4 MOV X19, X1
	0x0393A6A8 MOV X20, X0
	0x0393A6AC TBNZ X8, 0x0, 0x393A6C4
	0x0393A6B0 ADRP X0, 0x7E1000
	0x0393A6B4 LDR X0, [X0 + 0x600]
	0x0393A6B8 BL 0x1C16CF4
	0x0393A6BC MOVZ W8, 0x1
	0x0393A6C0 STRB W8, [X22 + 0x925]
	0x0393A6C4 LDP W1, W2, [X20]
	0x0393A6C8 ADD X0, X31, 0x8
	0x0393A6CC MOV X3, X31
	0x0393A6D0 STR X31, [X31 + 0x8]
	0x0393A6D4 BL 0x38FDC24
	0x0393A6D8 LDR X0, [X21]
	0x0393A6DC LDR W8, [X0 + 0xE0]
	0x0393A6E0 CBNZ W8, 0x393A6E8
	0x0393A6E4 BL 0x1C16DFC
	0x0393A6E8 LDR X0, [X31 + 0x8]
	0x0393A6EC MOV X1, X19
	0x0393A6F0 MOV X2, X31
	0x0393A6F4 BL 0x38FDEF0
	0x0393A6F8 TBNZ X0, 0x0, 0x393A734
	0x0393A6FC LDP W1, W2, [X20 + 0x4]
	0x0393A700 ADD X0, X31, 0x8
	0x0393A704 MOV X3, X31
	0x0393A708 STR X31, [X31 + 0x8]
	0x0393A70C BL 0x38FDC24
	0x0393A710 LDR X0, [X21]
	0x0393A714 LDR W8, [X0 + 0xE0]
	0x0393A718 CBNZ W8, 0x393A720
	0x0393A71C BL 0x1C16DFC
	0x0393A720 LDR X0, [X31 + 0x8]
	0x0393A724 MOV X1, X19
	0x0393A728 MOV X2, X31
	0x0393A72C BL 0x38FDEF0
	0x0393A730 TBZ X0, 0x0, 0x393A73C
	0x0393A734 MOVZ W0, 0x1
	0x0393A738 B 0x393A774
	0x0393A73C LDR W1, [X20 + 0x8]
	0x0393A740 LDR W2, [X20]
	0x0393A744 ADD X0, X31, 0x8
	0x0393A748 MOV X3, X31
	0x0393A74C STR X31, [X31 + 0x8]
	0x0393A750 BL 0x38FDC24
	0x0393A754 LDR X0, [X21]
	0x0393A758 LDR W8, [X0 + 0xE0]
	0x0393A75C CBNZ W8, 0x393A764
	0x0393A760 BL 0x1C16DFC
	0x0393A764 LDR X0, [X31 + 0x8]
	0x0393A768 MOV X1, X19
	0x0393A76C MOV X2, X31
	0x0393A770 BL 0x38FDEF0
	0x0393A774 LDP X20, X19, [X31 + 0x20]
	0x0393A778 LDP X22, X21, [X31 + 0x10]
	0x0393A77C AND W0, W0, 0x1
	0x0393A780 LDR X30, [X31], #0x30
	0x0393A784 RET
	0x0393A788 STR X30, [X31 - 0x30]!
	0x0393A78C STP X22, X21, [X31 + 0x10]
	0x0393A790 STP X20, X19, [X31 + 0x20]
	0x0393A794 ADRP X20, 0xAA7000
	0x0393A798 LDRB W8, [X20 + 0x926]
	0x0393A79C MOV X19, X0
	0x0393A7A0 TBNZ X8, 0x0, 0x393A7E8
	0x0393A7A4 ADRP X0, 0x813000
	0x0393A7A8 LDR X0, [X0 + 0xAC8]
	0x0393A7AC BL 0x1C16CF4
	0x0393A7B0 ADRP X0, 0x7BB000
	0x0393A7B4 LDR X0, [X0 + 0x160]
	0x0393A7B8 BL 0x1C16CF4
	0x0393A7BC ADRP X0, 0x813000
	0x0393A7C0 LDR X0, [X0 + 0xBD0]
	0x0393A7C4 BL 0x1C16CF4
	0x0393A7C8 ADRP X0, 0x814000
	0x0393A7CC LDR X0, [X0 + 0xEA0]
	0x0393A7D0 BL 0x1C16CF4
	0x0393A7D4 ADRP X0, 0x7B9000
	0x0393A7D8 LDR X0, [X0 + 0x598]
	0x0393A7DC BL 0x1C16CF4
	0x0393A7E0 MOVZ W8, 0x1
	0x0393A7E4 STRB W8, [X20 + 0x926]
	0x0393A7E8 MOV X0, X19
	0x0393A7EC MOV X1, X31
	0x0393A7F0 BL 0x3C32ECC
	0x0393A7F4 CBZ X0, 0x393A920
	0x0393A7F8 ADRP X8, 0x813000
	0x0393A7FC LDR X8, [X8 + 0xBD0]
	0x0393A800 ADRP X22, 0x7B9000
	0x0393A804 LDR X1, [X8]
	0x0393A808 LDR X22, [X22 + 0x598]
	0x0393A80C BL 0x21E52E4
	0x0393A810 LDR X8, [X22]
	0x0393A814 MOV X20, X0
	0x0393A818 LDR W9, [X8 + 0xE0]
	0x0393A81C CBNZ W9, 0x393A828
	0x0393A820 MOV X0, X8
	0x0393A824 BL 0x1C16DFC
	0x0393A828 MOV X0, X20
	0x0393A82C MOV X1, X31
	0x0393A830 BL 0x3C38948
	0x0393A834 TBNZ X0, 0x0, 0x393A85C
	0x0393A838 MOV X0, X19
	0x0393A83C MOV X1, X31
	0x0393A840 BL 0x3C32ECC
	0x0393A844 CBZ X0, 0x393A920
	0x0393A848 ADRP X8, 0x7BB000
	0x0393A84C LDR X8, [X8 + 0x160]
	0x0393A850 LDR X1, [X8]
	0x0393A854 BL 0x21E51FC
	0x0393A858 MOV X20, X0
	0x0393A85C CBZ X20, 0x393A880
	0x0393A860 ADRP X8, 0x814000
	0x0393A864 LDR X8, [X8 + 0xEA0]
	0x0393A868 LDR X9, [X20]
	0x0393A86C LDR X8, [X8]
	0x0393A870 LDRB W11, [X9 + 0x130]
	0x0393A874 LDRB W10, [X8 + 0x130]
	0x0393A878 CMP W11, W10
	0x0393A87C B.CS 0x393A888
	0x0393A880 MOV X21, X31
	0x0393A884 B 0x393A89C
	0x0393A888 LDR X9, [X9 + 0xC8]
	0x0393A88C ADD X9, X9, X10, 0x3, LSL
	0x0393A890 LDUR X9, [X9 - 0x8]
	0x0393A894 CMP X9, X8
	0x0393A898 CSEL X21, X20, X31, EQ
	0x0393A89C LDR X0, [X22]
	0x0393A8A0 LDR W8, [X0 + 0xE0]
	0x0393A8A4 CBNZ W8, 0x393A8AC
	0x0393A8A8 BL 0x1C16DFC
	0x0393A8AC MOV X0, X21
	0x0393A8B0 MOV X1, X31
	0x0393A8B4 BL 0x3C38948
	0x0393A8B8 TBZ X0, 0x0, 0x393A8D0
	0x0393A8BC CBZ X21, 0x393A920
	0x0393A8C0 MOVZ W1, 0x1
	0x0393A8C4 MOV X0, X21
	0x0393A8C8 MOV X2, X31
	0x0393A8CC BL 0x3C8FC7C
	0x0393A8D0 CBZ X20, 0x393A920
	0x0393A8D4 ADRP X21, 0x813000
	0x0393A8D8 LDR X21, [X21 + 0xAC8]
	0x0393A8DC MOVZ W1, 0x1
	0x0393A8E0 MOV X0, X20
	0x0393A8E4 MOV X2, X31
	0x0393A8E8 BL 0x3C8F7C8
	0x0393A8EC LDR X0, [X21]
	0x0393A8F0 LDR W8, [X0 + 0xE0]
	0x0393A8F4 CBNZ W8, 0x393A8FC
	0x0393A8F8 BL 0x1C16DFC
	0x0393A8FC MOV X0, X31
	0x0393A900 BL 0x38FAF30
	0x0393A904 MOV X1, X0
	0x0393A908 MOV X0, X19
	0x0393A90C LDP X20, X19, [X31 + 0x20]
	0x0393A910 LDP X22, X21, [X31 + 0x10]
	0x0393A914 MOV X2, X31
	0x0393A918 LDR X30, [X31], #0x30
	0x0393A91C B 0x38FBF44
	0x0393A920 BL 0x1C16F20
	0x0393A924 SUB X31, X31, 0x30
	0x0393A928 STP X30, X21, [X31 + 0x10]
	0x0393A92C STP X20, X19, [X31 + 0x20]
	0x0393A930 ADRP X21, 0xAA7000
	0x0393A934 ADRP X20, 0x7BF000
	0x0393A938 LDRB W8, [X21 + 0x927]
	0x0393A93C LDR X20, [X20 + 0x7A0]
	0x0393A940 MOV X19, X0
	0x0393A944 TBNZ X8, 0x0, 0x393A95C
	0x0393A948 ADRP X0, 0x7BF000
	0x0393A94C LDR X0, [X0 + 0x7A0]
	0x0393A950 BL 0x1C16CF4
	0x0393A954 MOVZ W8, 0x1
	0x0393A958 STRB W8, [X21 + 0x927]
	0x0393A95C LDR X2, [X20]
	0x0393A960 ADD X1, X31, 0x8
	0x0393A964 MOV X0, X19
	0x0393A968 STR X31, [X31 + 0x8]
	0x0393A96C BL 0x21A4990
	0x0393A970 TBZ X0, 0x0, 0x393A988
	0x0393A974 LDR X0, [X31 + 0x8]
	0x0393A978 CBZ X0, 0x393A998
	0x0393A97C MOV W1, W31
	0x0393A980 MOV X2, X31
	0x0393A984 BL 0x3C13034
	0x0393A988 LDP X20, X19, [X31 + 0x20]
	0x0393A98C LDP X30, X21, [X31 + 0x10]
	0x0393A990 ADD X31, X31, 0x30
	0x0393A994 RET
	0x0393A998 BL 0x1C16F20
	0x0393A99C SUB X31, X31, 0x30
	0x0393A9A0 STP X30, X21, [X31 + 0x10]
	0x0393A9A4 STP X20, X19, [X31 + 0x20]
	0x0393A9A8 ADRP X21, 0xAA7000
	0x0393A9AC ADRP X20, 0x7BF000
	0x0393A9B0 LDRB W8, [X21 + 0x928]
	0x0393A9B4 LDR X20, [X20 + 0x7A0]
	0x0393A9B8 MOV X19, X0
	0x0393A9BC TBNZ X8, 0x0, 0x393A9D4
	0x0393A9C0 ADRP X0, 0x7BF000
	0x0393A9C4 LDR X0, [X0 + 0x7A0]
	0x0393A9C8 BL 0x1C16CF4
	0x0393A9CC MOVZ W8, 0x1
	0x0393A9D0 STRB W8, [X21 + 0x928]
	0x0393A9D4 LDR X2, [X20]
	0x0393A9D8 ADD X1, X31, 0x8
	0x0393A9DC MOV X0, X19
	0x0393A9E0 STR X31, [X31 + 0x8]
	0x0393A9E4 BL 0x21A4990
	0x0393A9E8 TBZ X0, 0x0, 0x393AA00
	0x0393A9EC LDR X0, [X31 + 0x8]
	0x0393A9F0 CBZ X0, 0x393AA10
	0x0393A9F4 MOV W1, W31
	0x0393A9F8 MOV X2, X31
	0x0393A9FC BL 0x3C13034
	0x0393AA00 LDP X20, X19, [X31 + 0x20]
	0x0393AA04 LDP X30, X21, [X31 + 0x10]
	0x0393AA08 ADD X31, X31, 0x30
	0x0393AA0C RET
	0x0393AA10 BL 0x1C16F20
	0x0393AA14 MOV X1, X31
	0x0393AA18 B 0x38FC1A8
	0x0393AA1C LDR V0, [X0 + 0x10]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X19, 0xAA8000
	015 Move W8, [X19+2331]
	016 Move W21, W2
	017 Move W24, W1
	018 Move X22, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {64}
	023 Move X0, 0x7BA000
	024 Move X0, [X0+3584]
	025 Call 0x1C17CF4
	026 Move X0, 0x814000
	027 Move X0, [X0+3504]
	028 Call 0x1C17CF4
	029 Move X0, 0x814000
	030 Move X0, [X0+3512]
	031 Call 0x1C17CF4
	032 Move X0, 0x7BA000
	033 Move X0, [X0+3608]
	034 Call 0x1C17CF4
	035 Move X0, 0x7BB000
	036 Move X0, [X0+3672]
	037 Call 0x1C17CF4
	038 Move X0, 0x815000
	039 Move X0, [X0+3624]
	040 Call 0x1C17CF4
	041 Move X0, 0x815000
	042 Move X0, [X0+1672]
	043 Call 0x1C17CF4
	044 Move X0, 0x7BE000
	045 Move X0, [X0+2928]
	046 Call 0x1C17CF4
	047 Move X0, 0x7BB000
	048 Move X0, [X0+3624]
	049 Call 0x1C17CF4
	050 Move X0, 0x7E4000
	051 Move X0, [X0+3896]
	052 Call 0x1C17CF4
	053 Move X0, 0x7BB000
	054 Move X0, [X0+3632]
	055 Call 0x1C17CF4
	056 Move X0, 0x815000
	057 Move X0, [X0+3632]
	058 Call 0x1C17CF4
	059 Move X0, 0x815000
	060 Move X0, [X0+3640]
	061 Call 0x1C17CF4
	062 Move W8, 1
	063 Move [X19+2331], W8
	064 Or W8, W21, 2
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Compare X22, 0
	067 JumpIfEqual {503}
	068 Move X19, 0x815000
	069 Move X19, [X19+3624]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X0, [X19]
	072 Move W1, W24
	073 Call 0x1C17D6C
	074 Move X20, X0
	075 Move X20, X31
	076 Move X0, [X19]
	077 Move W1, W24
	078 Call 0x1C17D6C
	079 Subtract W8, W24, 1
	080 Move X19, X0
	081 Move [X31+12], W8
	082 Move X26, 0x7BB000
	083 Move X27, 0x7BE000
	084 Move X26, [X26+3632]
	085 Move X27, [X27+2928]
	086 Move X25, X31
	087 Move W28, W24
	088 Add X29, X19, 32
	089 Add X23, X20, 32
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X0, [X26]
	092 Call 0x1C17F10
	093 Move X1, [X27]
	094 Move X24, X0
	095 Call List`1<Int32>..ctor, X0
	096 Compare X20, 0
	097 JumpIfEqual {498}
	098 Compare X24, 0
	099 JumpIfEqual {106}
	100 Move X8, [X20]
	101 Move X0, X24
	102 Move X1, [X8+64]
	103 Call 0x1C17E00
	104 Compare X0, 0
	105 JumpIfEqual {500}
	106 Move W8, [X20+24]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move [X23], X24
	109 Move X0, [X26]
	110 Call 0x1C17F10
	111 Move X1, [X27]
	112 Move X24, X0
	113 Call List`1<Int32>..ctor, X0
	114 Compare X19, 0
	115 JumpIfEqual {498}
	116 Compare X24, 0
	117 JumpIfEqual {124}
	118 Move X8, [X19]
	119 Move X0, X24
	120 Move X1, [X8+64]
	121 Call 0x1C17E00
	122 Compare X0, 0
	123 JumpIfEqual {500}
	124 Move W8, [X19+24]
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move [X29], X24
	127 Add X25, X25, 1
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X10, 0x814000
	130 Move X8, [X22]
	131 Move X10, [X10+3504]
	132 NotImplemented "Instruction LDRH not yet implemented."
	133 Move X1, [X10]
	134 Compare X9, 0
	135 JumpIfEqual {142}
	136 Move X10, [X8+176]
	137 Add X10, X10, 8
	138 NotImplemented "Instruction LDUR not yet implemented."
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Subtract X9, X9, 1
	141 Add X10, X10, 16
	142 Move X0, X22
	143 Move W2, W31
	144 Call 0x1C5D788
	145 NotImplemented "Instruction LDRSW not yet implemented."
	146 Add X8, X8, X9
	147 Add X0, X8, 312
	148 Move X8, [X0]
	149 Move X1, [X0+8]
	150 Move X27, 0x7BA000
	151 Move X27, [X27+3584]
	152 Move X0, X22
	153 NotImplemented "Instruction BLR not yet implemented."
	154 Move X22, X0
	155 Move [X31+16], X19
	156 Compare X0, 0
	157 JumpIfEqual {515}
	158 Move X28, 0x7BA000
	159 Move X29, 0x814000
	160 Move X26, 0x815000
	161 Move X28, [X28+3608]
	162 Move X29, [X29+3512]
	163 Move X26, [X26+1672]
	164 Move TEMP, 0
	165 Not TEMP
	166 Move W8, TEMP
	167 Move [X31+28], W8
	168 Move X8, [X22]
	169 Move X1, [X28]
	170 NotImplemented "Instruction LDRH not yet implemented."
	171 Compare X9, 0
	172 JumpIfEqual {179}
	173 Move X10, [X8+176]
	174 Add X10, X10, 8
	175 NotImplemented "Instruction LDUR not yet implemented."
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Subtract X9, X9, 1
	178 Add X10, X10, 16
	179 Move X0, X22
	180 Move W2, W31
	181 Call 0x1C5D788
	182 NotImplemented "Instruction LDRSW not yet implemented."
	183 Add X8, X8, X9
	184 Add X0, X8, 312
	185 Move X8, [X0]
	186 Move X1, [X0+8]
	187 Move X0, X22
	188 NotImplemented "Instruction BLR not yet implemented."
	189 Move TEMP, X0
	190 And TEMP, TEMP, 1
	191 Compare TEMP, 1
	192 JumpIfNotEqual {266}
	193 Move X8, [X22]
	194 Move X1, [X29]
	195 NotImplemented "Instruction LDRH not yet implemented."
	196 Compare X9, 0
	197 JumpIfEqual {204}
	198 Move X10, [X8+176]
	199 Add X10, X10, 8
	200 NotImplemented "Instruction LDUR not yet implemented."
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Subtract X9, X9, 1
	203 Add X10, X10, 16
	204 Move X0, X22
	205 Move W2, W31
	206 Call 0x1C5D788
	207 NotImplemented "Instruction LDRSW not yet implemented."
	208 Add X8, X8, X9
	209 Add X0, X8, 312
	210 Move X8, [X0]
	211 Move X1, [X0+8]
	212 Move X0, X22
	213 NotImplemented "Instruction BLR not yet implemented."
	214 Move X24, X0
	215 Compare X0, 0
	216 JumpIfEqual {499}
	217 Move X8, [X24+16]
	218 Compare X8, 0
	219 JumpIfEqual {168}
	220 Move W8, [X8+24]
	221 NotImplemented "Instruction CMP not yet implemented."
	222 Move W0, [X24+72]
	223 Move W2, [X31+12]
	224 Move W1, W31
	225 Move X3, X31
	226 Call Math.Clamp, X0, X1, X2
	227 Move W8, [X31+28]
	228 Move W25, W0
	229 NotImplemented "Instruction CMP not yet implemented."
	230 NotImplemented "Instruction CSEL not yet implemented."
	231 NotImplemented "Instruction CMP not yet implemented."
	232 Move [X31+28], W8
	233 Move X0, X24
	234 Move X1, X31
	235 Call Face.IsQuad, X0
	236 Move TEMP, X0
	237 And TEMP, TEMP, 1
	238 Compare TEMP, 1
	239 JumpIfNotEqual {255}
	240 Compare X20, 0
	241 JumpIfEqual {539}
	242 Move W8, [X20+24]
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Add X8, X20, W25
	245 Move X25, [X8+32]
	246 Move X0, X24
	247 Move X1, X31
	248 Call Face.ToQuad, X0
	249 Move X1, X0
	250 Compare X25, 0
	251 JumpIfEqual {541}
	252 Move X2, [X26]
	253 Move X0, X25
	254 Call List`1<Int32>.AddRange, X0, X1
	255 Compare X19, 0
	256 JumpIfEqual {538}
	257 Move W8, [X19+24]
	258 NotImplemented "Instruction CMP not yet implemented."
	259 Add X8, X19, W25
	260 Move X0, [X8+32]
	261 Compare X0, 0
	262 JumpIfEqual {537}
	263 Move X1, [X24+16]
	264 Move X2, [X26]
	265 Call List`1<Int32>.AddRange, X0, X1
	266 Move X24, X31
	267 Compare X22, 0
	268 JumpIfEqual {290}
	269 Move X8, [X22]
	270 Move X1, [X27]
	271 NotImplemented "Instruction LDRH not yet implemented."
	272 Compare X9, 0
	273 JumpIfEqual {280}
	274 Move X10, [X8+176]
	275 Add X10, X10, 8
	276 NotImplemented "Instruction LDUR not yet implemented."
	277 NotImplemented "Instruction CMP not yet implemented."
	278 Subtract X9, X9, 1
	279 Add X10, X10, 16
	280 Move X0, X22
	281 Move W2, W31
	282 Call 0x1C5D788
	283 NotImplemented "Instruction LDRSW not yet implemented."
	284 Add X8, X8, X9
	285 Add X0, X8, 312
	286 Move X8, [X0]
	287 Move X1, [X0+8]
	288 Move X0, X22
	289 NotImplemented "Instruction BLR not yet implemented."
	290 Compare X24, 0
	291 JumpIfNotEqual {516}
	292 Move X8, 0x815000
	293 Move X8, [X8+3632]
	294 Move X0, [X8]
	295 Move W8, [X31+28]
	296 Add W23, W8, 1
	297 Move W1, W23
	298 Call 0x1C17D6C
	299 Move X22, X0
	300 Compare W21, 0
	301 JumpIfEqual {456}
	302 NotImplemented "Instruction CMP not yet implemented."
	303 NotImplemented "Instruction CMP not yet implemented."
	304 Compare X19, 0
	305 JumpIfEqual {498}
	306 Move X29, 0x7E4000
	307 Move X29, [X29+3896]
	308 Move W8, W31
	309 Move W9, [X19+24]
	310 NotImplemented "Instruction CMP not yet implemented."
	311 Move X21, W8
	312 Add X8, X19, X21
	313 Move X25, [X8+32]
	314 Compare X25, 0
	315 JumpIfEqual {498}
	316 Move W27, [X25+24]
	317 NotImplemented "Instruction CMP not yet implemented."
	318 Compare X20, 0
	319 JumpIfEqual {498}
	320 Move W8, [X20+24]
	321 NotImplemented "Instruction CMP not yet implemented."
	322 Add X8, X20, X21
	323 Move X23, [X8+32]
	324 Compare X23, 0
	325 JumpIfEqual {498}
	326 Move X8, 0x7BB000
	327 Move W28, [X23+24]
	328 Move X8, [X8+3672]
	329 Move W9, 6
	330 Move X19, X20
	331 NotImplemented "Instruction CMP not yet implemented."
	332 Move X0, [X8]
	333 Add W8, W28, 3
	334 NotImplemented "Instruction CSEL not yet implemented."
	335 NotImplemented "Instruction SBFM not yet implemented."
	336 NotImplemented "Instruction MADD not yet implemented."
	337 Call 0x1C17D6C
	338 Move X24, X0
	339 Move X26, X31
	340 Add X20, X0, 32
	341 Move X2, [X29]
	342 Move X0, X25
	343 Move W1, W26
	344 Call List`1<Int32>.get_Item, X0, X1
	345 Compare X24, 0
	346 JumpIfEqual {498}
	347 Move W8, [X24+24]
	348 NotImplemented "Instruction CMP not yet implemented."
	349 Move [X20], W0
	350 Add X26, X26, 1
	351 NotImplemented "Instruction CMP not yet implemented."
	352 NotImplemented "Instruction CMP not yet implemented."
	353 Move W25, W31
	354 Move X2, [X29]
	355 Move X0, X23
	356 Move W1, W25
	357 Call List`1<Int32>.get_Item, X0, X1
	358 Move W8, [X24+24]
	359 NotImplemented "Instruction CMP not yet implemented."
	360 Add X8, X24, W27
	361 Move [X8+32], W0
	362 Move X2, [X29]
	363 Add W25, W25, 1
	364 Move X0, X23
	365 Move W1, W25
	366 Call List`1<Int32>.get_Item, X0, X1
	367 Move W8, [X24+24]
	368 Add W20, W27, 1
	369 NotImplemented "Instruction CMP not yet implemented."
	370 Add X8, X24, W20
	371 Move [X8+32], W0
	372 Move X2, [X29]
	373 Add W25, W25, 1
	374 Move X0, X23
	375 Move W1, W25
	376 Call List`1<Int32>.get_Item, X0, X1
	377 Move W8, [X24+24]
	378 Add W20, W20, 1
	379 NotImplemented "Instruction CMP not yet implemented."
	380 Add W8, W27, 2
	381 Add X8, X24, W8
	382 Move [X8+32], W0
	383 Move X2, [X29]
	384 Move X0, X23
	385 Move W1, W25
	386 Call List`1<Int32>.get_Item, X0, X1
	387 Move W8, [X24+24]
	388 Add W20, W20, 1
	389 NotImplemented "Instruction CMP not yet implemented."
	390 Add W8, W27, 3
	391 Add X8, X24, W8
	392 Move [X8+32], W0
	393 Move X2, [X29]
	394 Add W25, W25, 1
	395 Move X0, X23
	396 Move W1, W25
	397 Call List`1<Int32>.get_Item, X0, X1
	398 Move W8, [X24+24]
	399 Add W20, W20, 1
	400 NotImplemented "Instruction CMP not yet implemented."
	401 Add W8, W27, 4
	402 Add X8, X24, W8
	403 Move [X8+32], W0
	404 Move X2, [X29]
	405 Subtract W25, W25, 3
	406 Move X0, X23
	407 Move W1, W25
	408 Call List`1<Int32>.get_Item, X0, X1
	409 Move W9, [X24+24]
	410 Add W8, W20, 1
	411 NotImplemented "Instruction CMP not yet implemented."
	412 Add W9, W27, 5
	413 Add W25, W25, 4
	414 Add X9, X24, W9
	415 NotImplemented "Instruction CMP not yet implemented."
	416 Add W27, W8, 1
	417 Move [X9+32], W0
	418 Move X8, 0x815000
	419 Move X8, [X8+3640]
	420 Move X0, [X8]
	421 Call 0x1C17F10
	422 Move W1, W21
	423 Move W2, W31
	424 Move X3, X24
	425 Move X23, X0
	426 Call Submesh..ctor, X0, X1, X2, X3
	427 Compare X22, 0
	428 JumpIfEqual {498}
	429 Move W8, [X22+24]
	430 Move X20, X19
	431 Move X19, [X31+16]
	432 Compare X20, 0
	433 JumpIfEqual {498}
	434 Move W8, [X20+24]
	435 NotImplemented "Instruction CMP not yet implemented."
	436 Add X8, X20, X21
	437 Move X24, [X8+32]
	438 Move X8, 0x815000
	439 Move X8, [X8+3640]
	440 Move X0, [X8]
	441 Call 0x1C17F10
	442 Move W2, 2
	443 Move W1, W21
	444 Move X3, X24
	445 Move X23, X0
	446 Call Submesh..ctor, X0, X1, X2, X3
	447 Compare X22, 0
	448 JumpIfEqual {498}
	449 Move W8, [X22+24]
	450 NotImplemented "Instruction CMP not yet implemented."
	451 Move W9, [X31+28]
	452 Add X8, X22, X21
	453 Move [X8+32], X23
	454 Add W8, W21, 1
	455 NotImplemented "Instruction CMP not yet implemented."
	456 NotImplemented "Instruction CMP not yet implemented."
	457 Compare X19, 0
	458 JumpIfEqual {498}
	459 Move X27, 0x815000
	460 Move X27, [X27+3640]
	461 Move X20, X31
	462 Move W24, W23
	463 Add X25, X19, 32
	464 Add X26, X22, 32
	465 Move W8, [X19+24]
	466 NotImplemented "Instruction CMP not yet implemented."
	467 Move X0, [X27]
	468 Move X23, [X25]
	469 Call 0x1C17F10
	470 Move W1, W20
	471 Move W2, W31
	472 Move X3, X23
	473 Move X21, X0
	474 Call Submesh..ctor, X0, X1, X2, X3
	475 Compare X22, 0
	476 JumpIfEqual {498}
	477 Move W8, [X22+24]
	478 NotImplemented "Instruction CMP not yet implemented."
	479 Move [X26], X21
	480 Add X20, X20, 1
	481 NotImplemented "Instruction CMP not yet implemented."
	482 Move X0, X22
	483 Move X20, [X31+112]
	484 Move X19, [X31+120]
	485 Move X22, [X31+96]
	486 Move X21, [X31+104]
	487 Move X24, [X31+80]
	488 Move X23, [X31+88]
	489 Move X26, [X31+64]
	490 Move X25, [X31+72]
	491 Move X28, [X31+48]
	492 Move X27, [X31+56]
	493 Move X29, [X31+32]
	494 Move X30, [X31+40]
	495 Add X31, X31, 128
	496 Return X0
	497 Call 0x1C17F28
	498 Call 0x1C17F20
	499 Call 0x1C17F20
	500 Call 0x1C17F44
	501 Move X1, X31
	502 Call 0x1C17DEC
	503 Move X0, 0x7BF000
	504 Move X0, [X0+1320]
	505 Call 0x1C17D08
	506 Call 0x1C17F10
	507 Move X19, X0
	508 Move X0, 0x815000
	509 Move X0, [X0+1600]
	510 Call 0x1C17D08
	511 Move X1, X0
	512 Move X0, X19
	513 Move X2, X31
	514 Call ArgumentNullException..ctor, X0, X1
	515 Call 0x1C17F20
	516 Move X0, X24
	517 Call 0x1C17F18
	518 Move X0, 0x7C3000
	519 Move X0, [X0+1880]
	520 Call 0x1C17D08
	521 Call 0x1C17F10
	522 Move X19, X0
	523 Move X0, 0x815000
	524 Move X0, [X0+3648]
	525 Call 0x1C17D08
	526 Move X1, X0
	527 Move X0, X19
	528 Move X2, X31
	529 Call NotImplementedException..ctor, X0, X1
	530 Move X0, 0x815000
	531 Move X0, [X0+3656]
	532 Call 0x1C17D08
	533 Move X1, X0
	534 Move X0, X19
	535 Call 0x1C17DEC
	536 Call 0x1C17F28
	537 Call 0x1C17F20
	538 Call 0x1C17F20
	539 Call 0x1C17F20
	540 Call 0x1C17F28
	541 Call 0x1C17F20
	542 Move X19, [X31+16]
	543 Move TEMP, 0
	544 Not TEMP
	545 Move W8, TEMP
	546 Move X23, X0
	547 Move [X31+28], W8
	548 Move X19, [X31+16]
	549 Move X23, X0
	550 NotImplemented "Instruction CMP not yet implemented."
	551 Move X0, X23
	552 Call 0x3EB2AD0
	553 Move X24, [X0]
	554 Call 0x3EB2AE0
	555 Move X24, X31
	556 Move X23, X0
	557 Compare X22, 0
	558 JumpIfEqual {580}
	559 Move X8, [X22]
	560 Move X1, [X27]
	561 NotImplemented "Instruction LDRH not yet implemented."
	562 Compare X9, 0
	563 JumpIfEqual {570}
	564 Move X10, [X8+176]
	565 Add X10, X10, 8
	566 NotImplemented "Instruction LDUR not yet implemented."
	567 NotImplemented "Instruction CMP not yet implemented."
	568 Subtract X9, X9, 1
	569 Add X10, X10, 16
	570 Move X0, X22
	571 Move W2, W31
	572 Call 0x1C5D788
	573 NotImplemented "Instruction LDRSW not yet implemented."
	574 Add X8, X8, X9
	575 Add X0, X8, 312
	576 Move X8, [X0]
	577 Move X1, [X0+8]
	578 Move X0, X22
	579 NotImplemented "Instruction BLR not yet implemented."
	580 Compare X24, 0
	581 JumpIfNotEqual {584}
	582 Move X0, X23
	583 Call 0x1D2D690
	584 Move X0, X24
	585 Call 0x1C17F18
	586 Call 0x1991590

Method: System.Void MapFaceMaterialsToSubmeshIndex(UnityEngine.ProBuilder.ProBuilderMesh mesh)

Disassembly:
	0x0393AA20 RET
	0x0393AA24 STR S0, [X0 + 0x10]
	0x0393AA28 RET
	0x0393AA2C LDR V0, [X0 + 0x14]
	0x0393AA30 RET
	0x0393AA34 STR S0, [X0 + 0x14]
	0x0393AA38 RET
	0x0393AA3C LDR V0, [X0 + 0x18]
	0x0393AA40 RET
	0x0393AA44 STR S0, [X0 + 0x18]
	0x0393AA48 RET
	0x0393AA4C LDR V0, [X0 + 0x1C]
	0x0393AA50 RET
	0x0393AA54 STR S0, [X0 + 0x1C]
	0x0393AA58 RET
	0x0393AA5C ADRP X8, 0xFFFFFFFFFD1B0000
	0x0393AA60 LDR V0, [X8 + 0x5A]
	0x0393AA64 STR V0, [X0 + 0x1]
	0x0393AA68 RET
	0x0393AA6C STR X30, [X31 - 0x20]!
	0x0393AA70 STP X20, X19, [X31 + 0x10]
	0x0393AA74 ADRP X8, 0xFFFFFFFFFD1B0000
	0x0393AA78 LDR V0, [X8 + 0x5A]
	0x0393AA7C MOV X19, X1
	0x0393AA80 MOV X1, X31
	0x0393AA84 MOV X20, X0
	0x0393AA88 STR V0, [X0 + 0x1]
	0x0393AA8C BL 0x33BDD8C
	0x0393AA90 CBZ X19, 0x393AAA8
	0x0393AA94 LDR V0, [X19 + 0x1]
	0x0393AA98 STR V0, [X20 + 0x1]
	0x0393AA9C LDP X20, X19, [X31 + 0x10]
	0x0393AAA0 LDR X30, [X31], #0x20
	0x0393AAA4 RET
	0x0393AAA8 ADRP X0, 0x7BE000
	0x0393AAAC LDR X0, [X0 + 0x528]
	0x0393AAB0 BL 0x1C16D08
	0x0393AAB4 BL 0x1C16F10
	0x0393AAB8 MOV X19, X0
	0x0393AABC ADRP X0, 0x7E3000
	0x0393AAC0 LDR X0, [X0 + 0x928]
	0x0393AAC4 BL 0x1C16D08
	0x0393AAC8 MOV X1, X0
	0x0393AACC MOV X0, X19
	0x0393AAD0 MOV X2, X31
	0x0393AAD4 BL 0x330E100
	0x0393AAD8 ADRP X0, 0x814000
	0x0393AADC LDR X0, [X0 + 0xEA8]
	0x0393AAE0 BL 0x1C16D08
	0x0393AAE4 MOV X1, X0
	0x0393AAE8 MOV X0, X19
	0x0393AAEC BL 0x1C16DEC
	0x0393AAF0 SUB X31, X31, 0x40
	0x0393AAF4 STR X30, [X31 + 0x10]
	0x0393AAF8 STP X22, X21, [X31 + 0x20]
	0x0393AAFC STP X20, X19, [X31 + 0x30]
	0x0393AB00 ADRP X19, 0xAA7000
	0x0393AB04 ADRP X21, 0x7B9000
	0x0393AB08 ADRP X22, 0x7B9000
	0x0393AB0C LDRB W8, [X19 + 0x929]
	0x0393AB10 LDR X21, [X21 + 0x9D0]
	0x0393AB14 LDR X22, [X22 + 0xA90]
	0x0393AB18 MOV X20, X0
	0x0393AB1C TBNZ X8, 0x0, 0x393AB4C
	0x0393AB20 ADRP X0, 0x7B9000
	0x0393AB24 LDR X0, [X0 + 0x9D0]
	0x0393AB28 BL 0x1C16CF4
	0x0393AB2C ADRP X0, 0x7B9000
	0x0393AB30 LDR X0, [X0 + 0xA90]
	0x0393AB34 BL 0x1C16CF4
	0x0393AB38 ADRP X0, 0x814000
	0x0393AB3C LDR X0, [X0 + 0xEB0]
	0x0393AB40 BL 0x1C16CF4
	0x0393AB44 MOVZ W8, 0x1
	0x0393AB48 STRB W8, [X19 + 0x929]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, 0xAA8000
	011 Move W8, [X19+2332]
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x815000
	018 Move X0, [X0+3664]
	019 Call 0x1C17CF4
	020 Move X0, 0x7BA000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+2332], W8
	025 Compare X20, 0
	026 JumpIfEqual {91}
	027 Move X0, X20
	028 Move X1, X31
	029 Call ProBuilderMesh.get_renderer, X0
	030 Compare X0, 0
	031 JumpIfEqual {91}
	032 Move X1, X31
	033 Call Renderer.get_sharedMaterials, X0
	034 Compare X0, 0
	035 JumpIfEqual {91}
	036 Move X22, [X20+40]
	037 Compare X22, 0
	038 JumpIfEqual {91}
	039 Move W8, [X22+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W9, [X0+24]
	042 Move X24, 0x7BA000
	043 Move X25, 0x815000
	044 Move X24, [X24+1432]
	045 Move X25, [X25+3664]
	046 Move X19, X0
	047 Move W23, W31
	048 Subtract W20, W9, 1
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Add X8, X22, W23
	051 Move X26, [X8+32]
	052 Compare X26, 0
	053 JumpIfEqual {91}
	054 Move X0, [X24]
	055 Move X21, [X26+64]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X21
	061 Move X1, X31
	062 Move X2, X31
	063 Call Object.op_Equality, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfEqual {78}
	068 Move X1, [X26+64]
	069 Move X2, [X25]
	070 Move X0, X19
	071 Call Array.IndexOf, X0, X1
	072 Move W1, W31
	073 Move W2, W20
	074 Move X3, X31
	075 Call Math.Clamp, X0, X1, X2
	076 Move [X26+72], W0
	077 Move [X26+64], X31
	078 Move W8, [X22+24]
	079 Add W23, W23, 1
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X20, [X31+64]
	082 Move X19, [X31+72]
	083 Move X22, [X31+48]
	084 Move X21, [X31+56]
	085 Move X24, [X31+32]
	086 Move X23, [X31+40]
	087 Move X26, [X31+16]
	088 Move X25, [X31+24]
	089 Move X30, [X31+80]
	090 Return 
	091 Call 0x1C17F20
	092 Call 0x1C17F28

