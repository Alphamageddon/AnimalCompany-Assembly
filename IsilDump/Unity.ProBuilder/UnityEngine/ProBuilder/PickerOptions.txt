Type: UnityEngine.ProBuilder.PickerOptions

Method: System.Boolean get_depthTest()

Disassembly:
	0x0392650C MOV X0, X28
	0x03926510 MOV W2, W31

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.Void set_depthTest(System.Boolean value)

Disassembly:
	0x03926514 BL 0x1C5C788
	0x03926518 B 0x3926528
	0x0392651C LDRSW X9, [X10]

ISIL:
	001 And W8, W1, 1
	002 Move [X0], W8
	003 Return 

Method: UnityEngine.ProBuilder.RectSelectMode get_rectSelectMode()

Disassembly:
	0x03926520 ADD X8, X8, X9, 0x4, LSL
	0x03926524 ADD X0, X8, 0x138

ISIL:
	001 Move W0, [X0+4]
	002 Return X0

Method: System.Void set_rectSelectMode(UnityEngine.ProBuilder.RectSelectMode value)

Disassembly:
	0x03926528 LDP X8, X2, [X0]
	0x0392652C MOV X0, X28

ISIL:
	001 Move [X0+4], W1
	002 Return 

Method: UnityEngine.ProBuilder.PickerOptions get_Default()

Disassembly:
	0x03926530 MOV W1, W22
	0x03926534 BLR X8
	0x03926538 ADRP X8, 0x7D4000
	0x0392653C LDR X8, [X8 + 0x700]
	0x03926540 MOV X24, X0
	0x03926544 LDR X8, [X8]
	0x03926548 MOV X0, X8
	0x0392654C BL 0x1C16F10
	0x03926550 MOV X1, X31
	0x03926554 MOV X23, X0
	0x03926558 BL 0x3C17028
	0x0392655C CBZ X24, 0x3926854
	0x03926560 CBZ X23, 0x3926854
	0x03926564 LDR X1, [X24 + 0x58]
	0x03926568 MOV X0, X23
	0x0392656C MOV X2, X31
	0x03926570 BL 0x3C17F08
	0x03926574 LDR X0, [X21]
	0x03926578 LDR X25, [X24 + 0x28]
	0x0392657C LDR W8, [X0 + 0xE0]
	0x03926580 CBNZ W8, 0x392658C
	0x03926584 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xABC000
	005 Move X19, 0x829000
	006 Move W8, [X20+2226]
	007 Move X19, [X19+1976]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x829000
	013 Move X0, [X0+1976]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2226], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03926588 LDR X0, [X21]
	0x0392658C LDR X8, [X0 + 0xB8]
	0x03926590 LDR X26, [X8 + 0x8]
	0x03926594 CBNZ X26, 0x39265E8
	0x03926598 LDR W8, [X0 + 0xE0]
	0x0392659C CBNZ W8, 0x39265A8
	0x039265A0 BL 0x1C16DFC
	0x039265A4 LDR X0, [X21]
	0x039265A8 LDR X8, [X0 + 0xB8]
	0x039265AC LDR X28, [X8]
	0x039265B0 ADRP X8, 0x827000
	0x039265B4 LDR X8, [X8 + 0xFA8]
	0x039265B8 LDR X0, [X8]
	0x039265BC BL 0x1C16F10
	0x039265C0 ADRP X8, 0x828000
	0x039265C4 LDR X8, [X8 + 0x9A8]
	0x039265C8 MOV X1, X28
	0x039265CC MOV X3, X31
	0x039265D0 MOV X26, X0
	0x039265D4 LDR X2, [X8]
	0x039265D8 BL 0x2D30578
	0x039265DC LDR X8, [X21]
	0x039265E0 LDR X8, [X8 + 0xB8]
	0x039265E4 STR X26, [X8 + 0x8]
	0x039265E8 STR X22, [X31 + 0x18]
	0x039265EC ADRP X8, 0x827000
	0x039265F0 LDR X8, [X8 + 0xFA0]
	0x039265F4 MOV X0, X25
	0x039265F8 MOV X1, X26
	0x039265FC LDR X2, [X8]
	0x03926600 BL 0x21D0FD8
	0x03926604 ADRP X8, 0x7CF000
	0x03926608 LDR X8, [X8 + 0x9C8]
	0x0392660C LDR X1, [X8]
	0x03926610 BL 0x21D54D4
	0x03926614 MOV X1, X0
	0x03926618 MOV X0, X23
	0x0392661C MOV X2, X31
	0x03926620 BL 0x3C18FF0
	0x03926624 MOV X0, X23
	0x03926628 MOV X1, X31
	0x0392662C BL 0x3C17618

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xABC000
	006 Move W8, [X21+2227]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x829000
	014 Move X0, [X0+1976]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2227], W8
	018 Compare X19, 0
	019 JumpIfEqual {25}
	020 Move X21, 0x829000
	021 Move X21, [X21+1976]
	022 Move X8, [X19]
	023 Move X0, [X21]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move W0, W31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfEqual {35}
	034 Move X1, X0
	035 Call 0x1C17DFC
	036 Move X1, [X21]
	037 Move X0, [X19]
	038 Move X8, [X0+64]
	039 Move X9, [X1+64]
	040 Move X0, X19
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Call 0x1C17E08
	043 Move X1, [X0]
	044 Move X0, X20
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call 0x1C181E0

Method: System.Boolean Equals(UnityEngine.ProBuilder.PickerOptions other)

Disassembly:
	0x03926630 ADRP X8, 0x7F9000
	0x03926634 LDR X8, [X8 + 0xAF8]
	0x03926638 MOV W1, W0
	0x0392663C LDR X8, [X8]
	0x03926640 MOV X0, X8
	0x03926644 BL 0x1C16D6C
	0x03926648 LDR X22, [X24 + 0x28]
	0x0392664C CBZ X22, 0x3926854
	0x03926650 LDR W8, [X22 + 0x18]
	0x03926654 MOV X25, X0
	0x03926658 CMP W8, 0x1
	0x0392665C B.LT 0x3926774
	0x03926660 MOV W29, W31
	0x03926664 MOV W21, W27
	0x03926668 CMP W29, W8
	0x0392666C B.CS 0x3926858
	0x03926670 ADRP X8, 0x828000
	0x03926674 LDR X8, [X8 + 0x7E8]
	0x03926678 LDR X0, [X8]
	0x0392667C ADD X8, X22, W29, 0x3, SXTW
	0x03926680 LDR X26, [X8 + 0x20]
	0x03926684 LDR W9, [X0 + 0xE0]
	0x03926688 CBNZ W9, 0x3926690
	0x0392668C BL 0x1C16DFC
	0x03926690 ADRP X8, 0x828000
	0x03926694 LDR X27, [X19]
	0x03926698 LDR X8, [X8 + 0x9A0]
	0x0392669C ADD X0, X31, 0x20
	0x039266A0 MOV X1, X24
	0x039266A4 MOV X2, X26
	0x039266A8 LDR X3, [X8]
	0x039266AC STP X31, X31, [X31 + 0x20]
	0x039266B0 BL 0x25E6D3C
	0x039266B4 CBZ X27, 0x3926854
	0x039266B8 LDP X2, X3, [X31 + 0x20]
	0x039266BC LDR X4, [X20]
	0x039266C0 UBFM W8, W21, 0x10, 0x17
	0x039266C4 AND W1, W21, 0xFFFF
	0x039266C8 BFM W1, W8, 0x10, 0x7
	0x039266CC MOV X0, X27

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xABC000
	007 Move X21, 0x829000
	008 Move W8, [X22+2228]
	009 Move X21, [X21+1976]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x829000
	017 Move X0, [X0+1976]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2228], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move W8, [X19]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction CSET not yet implemented."
	029 And W31, W20, 255
	030 NotImplemented "Instruction CSET not yet implemented."
	031 Xor W8, W9, W8
	032 Move TEMP, X8
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {37}
	036 Move W0, W31
	037 Move X0, [X21]
	038 Move X20, X20
	039 ShiftRight X20, 32
	040 And X20, X20, 0x7FFFFFFF
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move W8, [X19+4]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction CSET not yet implemented."
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x039266D0 BL 0x2AFF460
	0x039266D4 CBZ X26, 0x3926854
	0x039266D8 MOV X0, X26
	0x039266DC MOV X1, X31
	0x039266E0 BL 0x38FF530
	0x039266E4 CBZ X0, 0x3926854
	0x039266E8 AND W8, W21, 0xFF00
	0x039266EC BFM W8, W21, 0x10, 0xF
	0x039266F0 BFM W8, W21, 0x10, 0x17
	0x039266F4 MOV W28, W31
	0x039266F8 ADD W27, W21, 0x1
	0x039266FC ORR W21, W8, 0xFF000000
	0x03926700 LDR W8, [X0 + 0x18]
	0x03926704 CMP W28, W8
	0x03926708 B.GE 0x3926760
	0x0392670C MOV X0, X26
	0x03926710 MOV X1, X31
	0x03926714 BL 0x38FF530
	0x03926718 CBZ X0, 0x3926854
	0x0392671C LDR W8, [X0 + 0x18]
	0x03926720 CMP W28, W8
	0x03926724 B.CS 0x3926858
	0x03926728 CBZ X25, 0x3926854
	0x0392672C ADD X8, X0, W28, 0x2, SXTW
	0x03926730 LDRSW X8, [X8 + 0x20]
	0x03926734 LDR W9, [X25 + 0x18]
	0x03926738 CMP W8, W9
	0x0392673C B.CS 0x3926858
	0x03926740 ADD X8, X25, X8, 0x2, LSL
	0x03926744 MOV X0, X26
	0x03926748 MOV X1, X31
	0x0392674C STR W21, [X8 + 0x20]
	0x03926750 ADD W28, W28, 0x1
	0x03926754 BL 0x38FF530
	0x03926758 CBNZ X0, 0x3926700
	0x0392675C B 0x3926854
	0x03926760 LDR W8, [X22 + 0x18]
	0x03926764 ADD W29, W29, 0x1
	0x03926768 MOV W21, W27
	0x0392676C CMP W29, W8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xABC000
	007 Move X20, 0x829000
	008 Move W8, [X21+2229]
	009 Move X20, [X20+1976]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x7CE000
	016 Move X0, [X0+2904]
	017 Call 0x1C17CF4
	018 Move X0, 0x829000
	019 Move X0, [X0+1976]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+2229], W8
	023 Move X0, [X20]
	024 Move X20, 0x7CE000
	025 Move W8, [X0+224]
	026 Move X20, [X20+2904]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move W8, [X19]
	031 Move X0, [X20]
	032 Move [X31+12], W8
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Add X0, X31, 12
	038 Move X1, X31
	039 Call Boolean.GetHashCode, X0
	040 Move W8, [X19+4]
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+16]
	044 Move X21, [X31+24]
	045 Move W9, 397
	046 Multiply W9, W0, W9
	047 Xor W0, W9, W8
	048 Add X31, X31, 48
	049 Return X0

Method: System.Boolean op_Equality(UnityEngine.ProBuilder.PickerOptions a, UnityEngine.ProBuilder.PickerOptions b)

Disassembly:
	0x03926770 B.LT 0x3926668
	0x03926774 MOV X0, X23
	0x03926778 MOV X1, X25
	0x0392677C MOV X2, X31
	0x03926780 BL 0x3C18318
	0x03926784 MOV X0, X24
	0x03926788 MOV X1, X31
	0x0392678C BL 0x3C389D4
	0x03926790 ADRP X8, 0x828000
	0x03926794 LDR X8, [X8 + 0x9B8]
	0x03926798 MOV X2, X31
	0x0392679C LDR X1, [X8]
	0x039267A0 BL 0x321B938
	0x039267A4 MOV X25, X0
	0x039267A8 MOV X0, X24
	0x039267AC MOV X1, X31
	0x039267B0 BL 0x3C32E90
	0x039267B4 ADRP X8, 0x827000
	0x039267B8 LDR X8, [X8 + 0xAC8]
	0x039267BC MOV X24, X0
	0x039267C0 LDR X8, [X8]
	0x039267C4 LDR W9, [X8 + 0xE0]
	0x039267C8 CBNZ W9, 0x39267D4
	0x039267CC MOV X0, X8
	0x039267D0 BL 0x1C16DFC
	0x039267D4 MOV X0, X31
	0x039267D8 BL 0x38FAE1C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xABC000
	007 Move [X31+8], X0
	008 Move X21, 0x829000
	009 Move W8, [X20+2230]
	010 Move X21, [X21+1976]
	011 Move X19, X1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x829000
	017 Move X0, [X0+1976]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+2230], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Add X0, X31, 8
	027 Move X1, X19
	028 Call PickerOptions.Equals, X0, X1
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 And W0, W0, 1
	034 Add X31, X31, 48
	035 Return X0

Method: System.Boolean op_Inequality(UnityEngine.ProBuilder.PickerOptions a, UnityEngine.ProBuilder.PickerOptions b)

Disassembly:
	0x039267DC MOV X3, X0
	0x039267E0 MOVZ W4, 0x1
	0x039267E4 MOV X0, X25
	0x039267E8 MOV X1, X24
	0x039267EC MOV X2, X23
	0x039267F0 MOV X5, X31
	0x039267F4 BL 0x3905BB4
	0x039267F8 ADRP X21, 0x828000
	0x039267FC LDP X29, X28, [X31 + 0x8]
	0x03926800 LDR X22, [X31 + 0x18]
	0x03926804 LDR X21, [X21 + 0x9B0]
	0x03926808 CBZ X29, 0x3926854
	0x0392680C LDR W8, [X29 + 0x18]
	0x03926810 CMP X22, X8
	0x03926814 B.CS 0x3926858
	0x03926818 LDR X9, [X31]
	0x0392681C ADD X8, X29, X22, 0x3, LSL
	0x03926820 ADD X22, X22, 0x1
	0x03926824 STR X0, [X8 + 0x20]
	0x03926828 CMP X22, X9
	0x0392682C B.NE 0x39264D4
	0x03926830 MOV X0, X29
	0x03926834 LDP X20, X19, [X31 + 0x80]
	0x03926838 LDP X22, X21, [X31 + 0x70]
	0x0392683C LDP X24, X23, [X31 + 0x60]
	0x03926840 LDP X26, X25, [X31 + 0x50]
	0x03926844 LDP X28, X27, [X31 + 0x40]
	0x03926848 LDP X29, X30, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xABC000
	007 Move [X31+8], X0
	008 Move X21, 0x829000
	009 Move W8, [X20+2231]
	010 Move X21, [X21+1976]
	011 Move X19, X1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x829000
	017 Move X0, [X0+1976]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+2231], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Add X0, X31, 8
	027 Move X1, X19
	028 Call PickerOptions.Equals, X0, X1
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 NotImplemented "Instruction ORN not yet implemented."
	034 And W0, W8, 1
	035 Add X31, X31, 48
	036 Return X0

Method: System.Void .cctor()

Disassembly:
	0x0392684C ADD X31, X31, 0x90
	0x03926850 RET
	0x03926854 BL 0x1C16F20
	0x03926858 BL 0x1C16F28
	0x0392685C SUB X31, X31, 0x80
	0x03926860 STP X29, X30, [X31 + 0x20]
	0x03926864 STP X28, X27, [X31 + 0x30]
	0x03926868 STP X26, X25, [X31 + 0x40]
	0x0392686C STP X24, X23, [X31 + 0x50]
	0x03926870 STP X22, X21, [X31 + 0x60]
	0x03926874 STP X20, X19, [X31 + 0x70]
	0x03926878 STR W1, [X31 + 0x14]
	0x0392687C ADRP X22, 0xABB000
	0x03926880 ADRP X24, 0x828000
	0x03926884 ADRP X19, 0x828000
	0x03926888 LDRB W8, [X22 + 0x8C2]
	0x0392688C LDR X24, [X24 + 0x9C0]
	0x03926890 LDR X19, [X19 + 0x9C8]
	0x03926894 MOV X21, X4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xABC000
	005 Move X20, 0x829000
	006 Move W8, [X19+2232]
	007 Move X20, [X20+1976]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x829000
	013 Move X0, [X0+1976]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2232], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move W9, 1
	021 Move X8, [X8+184]
	022 Move [X8], X9
	023 Move X30, [X31+32]
	024 Return 

