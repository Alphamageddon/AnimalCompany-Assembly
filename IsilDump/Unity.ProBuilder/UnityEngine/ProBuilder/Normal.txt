Type: UnityEngine.ProBuilder.Normal

Method: UnityEngine.Vector3 get_normal()

Disassembly:
	0x03913E1C LDR X8, [X22]
	0x03913E20 LDR X9, [X8 + 0xB8]
	0x03913E24 LDR X10, [X9 + 0x10]

ISIL:
	001 Move S0, [X0]
	002 Move S1, [X0+4]
	003 Move V2, [X0+8]
	004 Return X0

Method: System.Void set_normal(UnityEngine.Vector3 value)

Disassembly:
	0x03913E28 CBZ X10, 0x39140C0
	0x03913E2C LDR W11, [X10 + 0x18]
	0x03913E30 CMP W21, W11

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Move [X0+8], S2
	004 Return 

Method: UnityEngine.Vector4 get_tangent()

Disassembly:
	0x03913E34 B.CS 0x39140C4
	0x03913E38 SXTW X26, W21
	0x03913E3C ADD X10, X10, X26, 0x2, LSL

ISIL:
	001 Move S0, [X0+12]
	002 Move S1, [X0+16]
	003 Move S2, [X0+20]
	004 Move S3, [X0+24]
	005 Return X0

Method: System.Void set_tangent(UnityEngine.Vector4 value)

Disassembly:
	0x03913E40 LDR W29, [X10 + 0x20]
	0x03913E44 CMP W29, 0x1
	0x03913E48 B.LT 0x3913EFC

ISIL:
	001 Move [X0+12], S0
	002 Move [X0+20], S1
	003 Move [X0+20], S2
	004 Move [X0+28], S3
	005 Return 

Method: UnityEngine.Vector3 get_bitangent()

Disassembly:
	0x03913E4C SUB W10, W29, 0x19
	0x03913E50 CMP W10, 0x11
	0x03913E54 B.CC 0x3913EFC

ISIL:
	001 Move S0, [X0+28]
	002 Move S1, [X0+32]
	003 Move V2, [X0+36]
	004 Return X0

Method: System.Void set_bitangent(UnityEngine.Vector3 value)

Disassembly:
	0x03913E58 LDR W10, [X8 + 0xE0]
	0x03913E5C CBNZ W10, 0x3913E70
	0x03913E60 MOV X0, X8

ISIL:
	001 Move [X0+28], S0
	002 Move [X0+36], S1
	003 Move [X0+36], S2
	004 Return 

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03913E64 BL 0x1C16DFC
	0x03913E68 LDR X8, [X22]
	0x03913E6C LDR X9, [X8 + 0xB8]
	0x03913E70 LDR X8, [X9]
	0x03913E74 CBZ X8, 0x39140C0
	0x03913E78 LDR W10, [X8 + 0x18]
	0x03913E7C CMP W29, W10
	0x03913E80 B.CS 0x39140C4
	0x03913E84 MADD X10, X29, X19, X8
	0x03913E88 LDR V0, [X10 + 0x20]!
	0x03913E8C CBZ X24, 0x39140C0
	0x03913E90 LDR W11, [X24 + 0x18]
	0x03913E94 CMP W21, W11
	0x03913E98 B.CS 0x39140C4
	0x03913E9C MOVZ W12, 0xC
	0x03913EA0 MADD X11, X26, X12, X24
	0x03913EA4 LDR V1, [X11 + 0x20]
	0x03913EA8 NOP
	0x03913EAC MADD X8, X29, X12, X8
	0x03913EB0 MOVZ W19, 0xC
	0x03913EB4 FADD S0, S0, S1
	0x03913EB8 STR S0, [X10]
	0x03913EBC LDR V0, [X11 + 0x24]
	0x03913EC0 LDP S1, S2, [X8 + 0x24]
	0x03913EC4 FADD S0, S1, S0
	0x03913EC8 STR S0, [X8 + 0x24]
	0x03913ECC LDR V0, [X11 + 0x28]
	0x03913ED0 FADD S0, S2, S0
	0x03913ED4 STR S0, [X8 + 0x28]
	0x03913ED8 LDR X8, [X9 + 0x8]
	0x03913EDC CBZ X8, 0x39140C0
	0x03913EE0 LDR W9, [X8 + 0x18]
	0x03913EE4 CMP W29, W9
	0x03913EE8 B.CS 0x39140C4
	0x03913EEC ADD X8, X8, X29, 0x2, LSL
	0x03913EF0 LDR V0, [X8 + 0x20]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+56], X21
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 Move X21, 0xACF000
	007 Move W8, [X21+2083]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x83C000
	015 Move X0, [X0+528]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2083], W8
	019 Compare X20, 0
	020 JumpIfEqual {26}
	021 Move X8, 0x83C000
	022 Move X8, [X8+528]
	023 Move X9, [X20]
	024 Move X8, [X8]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, W31
	027 Move X0, X20
	028 Call 0x1C17E08
	029 Move V0, [X0]
	030 Move V1, [X0+16]
	031 Move X8, [X0+32]
	032 Add X1, X31, 0
	033 Move X0, X19
	034 Move [X31], V0
	035 Move [X31+8], V1
	036 Move [X31+32], X8
	037 Call Normal.Equals, X0, X1
	038 Move X20, [X31+64]
	039 Move X19, [X31+72]
	040 Move X30, [X31+48]
	041 Move X21, [X31+56]
	042 And W0, W0, 1
	043 Add X31, X31, 80
	044 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03913F8C ADD X10, X10, X26, 0x2, LSL
	0x03913F90 LDR W29, [X10 + 0x20]
	0x03913F94 CMP W29, 0x1
	0x03913F98 B.LT 0x3914074
	0x03913F9C SUB W10, W29, 0x19
	0x03913FA0 CMP W10, 0x11
	0x03913FA4 B.CC 0x3914074
	0x03913FA8 CBZ X24, 0x39140C0
	0x03913FAC LDR W10, [X8 + 0xE0]
	0x03913FB0 CBNZ W10, 0x3913FC4
	0x03913FB4 MOV X0, X8
	0x03913FB8 BL 0x1C16DFC
	0x03913FBC LDR X8, [X22]
	0x03913FC0 LDR X9, [X8 + 0xB8]
	0x03913FC4 LDR X8, [X9]
	0x03913FC8 CBZ X8, 0x39140C0
	0x03913FCC LDR W10, [X8 + 0x18]
	0x03913FD0 CMP W29, W10
	0x03913FD4 B.CS 0x39140C4
	0x03913FD8 LDR X9, [X9 + 0x8]
	0x03913FDC CBZ X9, 0x39140C0
	0x03913FE0 LDR W10, [X9 + 0x18]
	0x03913FE4 CMP W29, W10
	0x03913FE8 B.CS 0x39140C4
	0x03913FEC LDR W10, [X24 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move S0, [X0]
	005 Move S1, [X0+4]
	006 Move V2, [X0+8]
	007 Move X19, X0
	008 Move X0, X31
	009 Call VectorHash.GetHashCode, X0
	010 Move S0, [X19+12]
	011 Move S1, [X19+16]
	012 Move S2, [X19+20]
	013 Move S3, [X19+24]
	014 Move W20, W0
	015 Move X0, X31
	016 Call VectorHash.GetHashCode, X0
	017 Move S0, [X19+28]
	018 Move S1, [X19+32]
	019 Move V2, [X19+36]
	020 Move W19, W0
	021 Move X0, X31
	022 Call VectorHash.GetHashCode, X0
	023 Move W8, 397
	024 Multiply W9, W20, W8
	025 Xor W9, W19, W9
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Multiply W8, W9, W8
	029 Xor W0, W0, W8
	030 Move X30, [X31+32]
	031 Return X0

Method: System.Boolean Equals(UnityEngine.ProBuilder.Normal other)

Disassembly:
	0x03913EF4 FADD S0, S0, S8
	0x03913EF8 STR S0, [X8 + 0x20]
	0x03913EFC LDR W8, [X23 + 0x18]
	0x03913F00 ADD W20, W20, 0x1
	0x03913F04 CMP W25, W8
	0x03913F08 B.CC 0x3913DCC
	0x03913F0C B 0x39140C4
	0x03913F10 CMP W25, W8
	0x03913F14 B.CS 0x39140C4
	0x03913F18 MOV W20, W31
	0x03913F1C LDR X0, [X28]
	0x03913F20 CBZ X0, 0x39140C0
	0x03913F24 MOV X1, X31
	0x03913F28 BL 0x393492C
	0x03913F2C CMP W20, W0
	0x03913F30 B.GE 0x3914088
	0x03913F34 LDR W8, [X23 + 0x18]
	0x03913F38 CMP W25, W8
	0x03913F3C B.CS 0x39140C4
	0x03913F40 LDR X0, [X28]
	0x03913F44 CBZ X0, 0x39140C0
	0x03913F48 MOV W1, W20
	0x03913F4C MOV X2, X31
	0x03913F50 BL 0x39282DC
	0x03913F54 LDR X8, [X22]
	0x03913F58 MOV W21, W0
	0x03913F5C LDR W9, [X8 + 0xE0]
	0x03913F60 CBNZ W9, 0x3913F70
	0x03913F64 MOV X0, X8
	0x03913F68 BL 0x1C16DFC
	0x03913F6C LDR X8, [X22]
	0x03913F70 LDR X9, [X8 + 0xB8]
	0x03913F74 LDR X10, [X9 + 0x10]
	0x03913F78 CBZ X10, 0x39140C0
	0x03913F7C LDR W11, [X10 + 0x18]
	0x03913F80 CMP W21, W11
	0x03913F84 B.CS 0x39140C4
	0x03913F88 SXTW X26, W21

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, -48402432
	006 Move V8, [X8+3880]
	007 Move S0, [X0]
	008 Move S1, [X0+4]
	009 Move V2, [X0+8]
	010 Move S3, [X1]
	011 Move S4, [X1+4]
	012 Move V5, [X1+8]
	013 Move X20, X0
	014 Move V6, V8
	015 Move X0, X31
	016 Move X19, X1
	017 Call Math.Approx3, X0, X1, V0
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {49}
	022 Move S0, [X20+12]
	023 Move S1, [X20+16]
	024 Move V2, [X20+20]
	025 Move S3, [X19+12]
	026 Move S4, [X19+16]
	027 Move V5, [X19+20]
	028 Move V6, V8
	029 Move X0, X31
	030 Call Math.Approx3, X0, X1, V0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {49}
	035 Move S0, [X20+28]
	036 Move S1, [X20+32]
	037 Move V2, [X20+36]
	038 Move S3, [X19+28]
	039 Move S4, [X19+32]
	040 Move V5, [X19+36]
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+8]
	044 Move V6, V8
	045 Move X0, X31
	046 Move V8, [X31+32]
	047 Call Math.Approx3, X0, X1, V0
	048 Return X0
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+8]
	052 Move W0, W31
	053 Move V8, [X31+32]
	054 Return X0

Method: System.Boolean op_Equality(UnityEngine.ProBuilder.Normal a, UnityEngine.ProBuilder.Normal b)

Disassembly:
	0x03913FF0 CMP W21, W10
	0x03913FF4 B.CS 0x39140C4
	0x03913FF8 MOVZ W11, 0xC
	0x03913FFC MADD X10, X29, X11, X8
	0x03914000 ADD X9, X9, X29, 0x2, LSL
	0x03914004 LDR V0, [X10 + 0x20]
	0x03914008 LDR V1, [X9 + 0x20]!
	0x0391400C NOP
	0x03914010 MADD X26, X26, X11, X24
	0x03914014 MADD X8, X29, X11, X8
	0x03914018 MOV X29, X26
	0x0391401C FDIV S0, S0, S1

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+48], X30
	003 Move X8, [X1+32]
	004 Move V1, [X1]
	005 Move V0, [X1+16]
	006 Add X1, X31, 0
	007 Move [X31+32], X8
	008 Move [X31], V1
	009 Move [X31+8], V0
	010 Call Normal.Equals, X0, X1
	011 Move X30, [X31+48]
	012 And W0, W0, 1
	013 Add X31, X31, 64
	014 Return X0

Method: System.Boolean op_Inequality(UnityEngine.ProBuilder.Normal a, UnityEngine.ProBuilder.Normal b)

Disassembly:
	0x03914020 STR S0, [X29 + 0x20]!
	0x03914024 LDR V1, [X8 + 0x24]
	0x03914028 LDR V2, [X9]
	0x0391402C MOV X27, X22
	0x03914030 MOV X22, X26
	0x03914034 MOV X0, X31
	0x03914038 FDIV S1, S1, S2
	0x0391403C STR S1, [X22 + 0x24]!
	0x03914040 LDR V2, [X8 + 0x28]
	0x03914044 LDR V3, [X9]
	0x03914048 MOVZ W19, 0xC
	0x0391404C FDIV S2, S2, S3
	0x03914050 STR S2, [X26 + 0x28]!
	0x03914054 BL 0x390B668
	0x03914058 LDR W8, [X24 + 0x18]
	0x0391405C CMP W21, W8
	0x03914060 B.CS 0x39140C4
	0x03914064 STR S0, [X29]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+96], X30
	003 Move X8, [X0+32]
	004 Move V1, [X0]
	005 Move V0, [X0+16]
	006 Add X0, X31, 0
	007 Move [X31+32], X8
	008 Move [X31], V1
	009 Move [X31+8], V0
	010 Move X8, [X1+32]
	011 Move V1, [X1]
	012 Move V0, [X1+16]
	013 Add X1, X31, 48
	014 Move [X31+80], X8
	015 Move [X31+48], V1
	016 Move [X31+56], V0
	017 Call Normal.Equals, X0, X1
	018 Move X30, [X31+96]
	019 NotImplemented "Instruction ORN not yet implemented."
	020 And W0, W8, 1
	021 Add X31, X31, 112
	022 Return X0

