Type: UnityEngine.ProBuilder.Triangle

Method: System.Int32 get_a()

Disassembly:
	0x0393B45C SUB X31, X31, 0x80
	0x0393B460 STR D10, [X31 + 0x40]

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.Int32 get_b()

Disassembly:
	0x0393B464 STP D9, D8, [X31 + 0x48]
	0x0393B468 STR X30, [X31 + 0x58]

ISIL:
	001 Move W0, [X0+4]
	002 Return X0

Method: System.Int32 get_c()

Disassembly:
	0x0393B46C STP X22, X21, [X31 + 0x60]
	0x0393B470 STP X20, X19, [X31 + 0x70]

ISIL:
	001 Move W0, [X0+8]
	002 Return X0

Method: System.Collections.Generic.IEnumerable`1<System.Int32> get_indices()

Disassembly:
	0x0393B474 ADRP X22, 0xAA6000
	0x0393B478 LDRB W9, [X22 + 0x92C]
	0x0393B47C MOV X20, X1
	0x0393B480 MOV X21, X0
	0x0393B484 MOV X19, X8
	0x0393B488 TBNZ X9, 0x0, 0x393B4A0
	0x0393B48C ADRP X0, 0x813000
	0x0393B490 LDR X0, [X0 + 0x590]
	0x0393B494 BL 0x1C16CF4
	0x0393B498 MOVZ W8, 0x1
	0x0393B49C STRB W8, [X22 + 0x92C]
	0x0393B4A0 CBZ X20, 0x393B55C
	0x0393B4A4 LDRB W8, [X20 + 0x4C]
	0x0393B4A8 CBZ W8, 0x393B51C
	0x0393B4AC ADRP X8, 0x813000
	0x0393B4B0 LDR X8, [X8 + 0x590]
	0x0393B4B4 LDR X0, [X8]
	0x0393B4B8 LDR W8, [X0 + 0xE0]
	0x0393B4BC CBNZ W8, 0x393B4C4
	0x0393B4C0 BL 0x1C16DFC
	0x0393B4C4 ADD X8, X31, 0x0
	0x0393B4C8 MOV X0, X21
	0x0393B4CC MOV X1, X20
	0x0393B4D0 BL 0x393B560
	0x0393B4D4 LDR V8, [X31]
	0x0393B4D8 LDR V9, [X31 + 0x8]
	0x0393B4DC LDUR V10, [X31 + 0xC]
	0x0393B4E0 ADD X8, X31, 0x0
	0x0393B4E4 MOV X0, X31
	0x0393B4E8 BL 0x38F691C
	0x0393B4EC LDR V0, [X31 + 0x8]
	0x0393B4F0 LDR X8, [X31]
	0x0393B4F4 LDR W10, [X31 + 0x1C]
	0x0393B4F8 MOVZ W9, 0x43B40000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xAA7000
	006 Move X21, 0x7BA000
	007 Move W8, [X20+2339]
	008 Move X21, [X21+3672]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x7BA000
	015 Move X0, [X0+3672]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2339], W8
	019 Move X0, [X21]
	020 Move W1, 3
	021 Call 0x1C17D6C
	022 Compare X0, 0
	023 JumpIfEqual {41}
	024 Move W8, [X0+24]
	025 Compare W8, 0
	026 JumpIfEqual {40}
	027 Move W9, [X19]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move [X0+32], W9
	030 Move W9, [X19+4]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move [X0+36], W9
	033 Move W8, [X19+8]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move [X0+40], W8
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return X0
	040 Call 0x1C17F28
	041 Call 0x1C17F20

Method: System.Void .ctor(System.Int32 a, System.Int32 b, System.Int32 c)

Disassembly:
	0x0393B4FC FMOV S1, W9
	0x0393B500 FSUB S1, S1, S9
	0x00000000 INVALID

ISIL:
	001 Move [X0], W1
	002 Move [X0+4], W2
	003 Move [X0+8], W3
	004 Return 

Method: System.Boolean Equals(UnityEngine.ProBuilder.Triangle other)

Disassembly:
	0x0393B508 STR S1, [X19 + 0x18]
	0x0393B50C STR X8, [X19]
	0x0393B510 STP D0, D8, [X19 + 0x8]
	0x0393B514 STR W10, [X19 + 0x1C]
	0x0393B518 B 0x393B540
	0x0393B51C LDUR V0, [X20 + 0x2C]
	0x0393B520 LDUR V1, [X20 + 0x1C]
	0x0393B524 MOVI V2.2D, 0x0
	0x0393B528 ADD X1, X31, 0x20
	0x0393B52C MOV X0, X19
	0x0393B530 MOV X2, X31
	0x0393B534 STP V1, V0, [X31 + 0x20]
	0x0393B538 STP V2, V2, [X19]

ISIL:
	001 Move W8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W8, [X0+4]
	004 Move X9, X1
	005 ShiftRight X9, 32
	006 And X9, X9, 0x7FFFFFFF
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move W8, [X0+8]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CSET not yet implemented."
	011 Return X0
	012 Move W0, W31
	013 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x0393B53C BL 0x38F69EC
	0x0393B540 LDP X20, X19, [X31 + 0x70]
	0x0393B544 LDP X22, X21, [X31 + 0x60]
	0x0393B548 LDR X30, [X31 + 0x58]
	0x0393B54C LDP D9, D8, [X31 + 0x48]
	0x0393B550 LDR V10, [X31 + 0x40]
	0x0393B554 ADD X31, X31, 0x80
	0x0393B558 RET
	0x0393B55C BL 0x1C16F20
	0x0393B560 SUB X31, X31, 0x70
	0x0393B564 STR D10, [X31 + 0x20]
	0x0393B568 STP D9, D8, [X31 + 0x28]
	0x0393B56C STR X30, [X31 + 0x38]
	0x0393B570 STP X24, X23, [X31 + 0x40]
	0x0393B574 STP X22, X21, [X31 + 0x50]
	0x0393B578 STP X20, X19, [X31 + 0x60]
	0x0393B57C ADRP X22, 0xAA6000
	0x0393B580 LDRB W9, [X22 + 0x92D]
	0x0393B584 MOV X20, X1
	0x0393B588 MOV X21, X0
	0x0393B58C MOV X19, X8
	0x0393B590 TBNZ X9, 0x0, 0x393B5A8
	0x0393B594 ADRP X0, 0x813000
	0x0393B598 LDR X0, [X0 + 0x590]
	0x0393B59C BL 0x1C16CF4
	0x0393B5A0 MOVZ W8, 0x1
	0x0393B5A4 STRB W8, [X22 + 0x92D]
	0x0393B5A8 CBZ X21, 0x393B664
	0x0393B5AC CBZ X20, 0x393B664
	0x0393B5B0 ADRP X24, 0x813000
	0x0393B5B4 LDR X22, [X21 + 0x58]
	0x0393B5B8 LDR X23, [X20 + 0x10]
	0x0393B5BC LDR X24, [X24 + 0x590]
	0x0393B5C0 MOV X0, X21
	0x0393B5C4 MOV X1, X20
	0x0393B5C8 MOV X2, X31
	0x0393B5CC BL 0x390987C
	0x0393B5D0 LDR X0, [X24]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xAA7000
	006 Move W8, [X21+2340]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x7E4000
	014 Move X0, [X0+1992]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2340], W8
	018 Compare X20, 0
	019 JumpIfEqual {39}
	020 Move X8, 0x7E4000
	021 Move X8, [X8+1992]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, X20
	026 Call 0x1C17E08
	027 Move X8, [X0]
	028 Move W9, [X19]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W9, [X19+4]
	031 Move X8, X8
	032 ShiftRight X8, 32
	033 And X8, X8, 0x7FFFFFFF
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move W8, [X0+8]
	036 Move W9, [X19+8]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CSET not yet implemented."
	039 Move W0, W31
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x0393B5D4 MOV V8.16B, V0.16B
	0x0393B5D8 MOV V9.16B, V1.16B
	0x0393B5DC MOV V10.16B, V2.16B
	0x0393B5E0 LDR W8, [X0 + 0xE0]
	0x0393B5E4 CBNZ W8, 0x393B5F0
	0x0393B5E8 BL 0x1C16DFC
	0x0393B5EC LDR X0, [X24]
	0x0393B5F0 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move W8, [X0]
	002 Move W9, [X0+4]
	003 Move W10, [X0+8]
	004 Move W11, 397
	005 Multiply W8, W8, W11
	006 Xor W8, W8, W9
	007 Multiply W8, W8, W11
	008 Xor W0, W8, W10
	009 Return X0

Method: System.Boolean IsAdjacent(UnityEngine.ProBuilder.Triangle other)

Disassembly:
	0x0393B5F4 MOV X0, X22
	0x0393B5F8 MOV X1, X23
	0x0393B5FC MOV V0.16B, V8.16B
	0x0393B600 LDR X2, [X8]
	0x0393B604 MOV V1.16B, V9.16B
	0x0393B608 MOV V2.16B, V10.16B
	0x0393B60C MOV X3, X31
	0x0393B610 BL 0x391FD30
	0x0393B614 LDR X8, [X24]
	0x0393B618 LDR X0, [X21 + 0x60]
	0x0393B61C LDR X1, [X20 + 0x10]
	0x0393B620 MOV X3, X31
	0x0393B624 LDR X8, [X8 + 0xB8]
	0x0393B628 LDR X2, [X8]
	0x0393B62C ADD X8, X31, 0x8
	0x0393B630 BL 0x393B018
	0x0393B634 LDR W8, [X31 + 0x18]
	0x0393B638 LDUR V0, [X31 + 0x8]
	0x0393B63C LDP X22, X21, [X31 + 0x50]
	0x0393B640 LDP X24, X23, [X31 + 0x40]
	0x0393B644 STR W8, [X19 + 0x10]
	0x0393B648 STR V0, [X19]
	0x0393B64C LDP X20, X19, [X31 + 0x60]
	0x0393B650 LDR X30, [X31 + 0x38]
	0x0393B654 LDP D9, D8, [X31 + 0x28]
	0x0393B658 LDR V10, [X31 + 0x20]
	0x0393B65C ADD X31, X31, 0x70
	0x0393B660 RET
	0x0393B664 BL 0x1C16F20
	0x0393B668 STP X30, X21, [X31 - 0x20]!
	0x0393B66C STP X20, X19, [X31 + 0x10]
	0x0393B670 ADRP X21, 0xAA6000
	0x0393B674 LDRB W8, [X21 + 0x92E]
	0x0393B678 MOV W19, W1
	0x0393B67C MOV X20, X0
	0x0393B680 TBNZ X8, 0x0, 0x393B698
	0x0393B684 ADRP X0, 0x7E0000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move [X31+8], X31
	005 Move [X31+16], X1
	006 Move [X31+24], W2
	007 Move W1, [X0]
	008 Move W2, [X0+4]
	009 Move X19, X0
	010 Add X0, X31, 8
	011 Move X3, X31
	012 Call Edge..ctor, X0, X1, X2
	013 Move X1, [X31+8]
	014 Add X0, X31, 16
	015 Call Triangle.ContainsEdge, X0, X1
	016 Move TEMP, X0
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {33}
	020 Move W1, [X19+4]
	021 Move W2, [X19+8]
	022 Add X0, X31, 8
	023 Move X3, X31
	024 Move [X31+8], X31
	025 Call Edge..ctor, X0, X1, X2
	026 Move X1, [X31+8]
	027 Add X0, X31, 16
	028 Call Triangle.ContainsEdge, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {34}
	033 Move W0, 1
	034 Move W1, [X19+8]
	035 Move W2, [X19]
	036 Add X0, X31, 8
	037 Move X3, X31
	038 Move [X31+8], X31
	039 Call Edge..ctor, X0, X1, X2
	040 Move X1, [X31+8]
	041 Add X0, X31, 16
	042 Call Triangle.ContainsEdge, X0, X1
	043 Move X30, [X31+32]
	044 Move X19, [X31+40]
	045 And W0, W0, 1
	046 Add X31, X31, 48
	047 Return X0

Method: System.Boolean ContainsEdge(UnityEngine.ProBuilder.Edge edge)

Disassembly:
	0x0393B688 LDR X0, [X0 + 0x7A8]
	0x0393B68C BL 0x1C16CF4
	0x0393B690 MOVZ W8, 0x1
	0x0393B694 STRB W8, [X21 + 0x92E]
	0x0393B698 CBZ X20, 0x393B6E4
	0x0393B69C ADRP X10, 0x7E0000
	0x0393B6A0 LDR X8, [X20]
	0x0393B6A4 LDR X10, [X10 + 0x7A8]
	0x0393B6A8 LDRH W9, [X8 + 0x12E]
	0x0393B6AC LDR X1, [X10]
	0x0393B6B0 CBZ X9, 0x393B6D4
	0x0393B6B4 LDR X10, [X8 + 0xB0]
	0x0393B6B8 ADD X10, X10, 0x8
	0x0393B6BC LDUR X11, [X10 - 0x8]
	0x0393B6C0 CMP X11, X1
	0x0393B6C4 B.EQ 0x393B6F4
	0x0393B6C8 SUBS X9, X9, 0x1
	0x0393B6CC ADD X10, X10, 0x10
	0x0393B6D0 B.NE 0x393B6BC
	0x0393B6D4 MOV X0, X20
	0x0393B6D8 MOV W2, W31
	0x0393B6DC BL 0x1C5C788
	0x0393B6E0 B 0x393B700
	0x0393B6E4 MOV W0, W19
	0x0393B6E8 LDP X20, X19, [X31 + 0x10]
	0x0393B6EC LDP X30, X21, [X31], #0x20
	0x0393B6F0 RET
	0x0393B6F4 LDRSW X9, [X10]
	0x0393B6F8 ADD X8, X8, X9, 0x4, LSL
	0x0393B6FC ADD X0, X8, 0x138
	0x0393B700 LDP X3, X2, [X0]
	0x0393B704 MOV X0, X20
	0x0393B708 MOV W1, W19
	0x0393B70C LDP X20, X19, [X31 + 0x10]
	0x0393B710 LDP X30, X21, [X31], #0x20
	0x0393B714 BR X3
	0x0393B718 STR D14, [X31 - 0x80]!
	0x0393B71C STP D13, D12, [X31 + 0x10]
	0x0393B720 STP D11, D10, [X31 + 0x20]
	0x0393B724 STP D9, D8, [X31 + 0x30]
	0x0393B728 STP X30, X25, [X31 + 0x40]
	0x0393B72C STP X24, X23, [X31 + 0x50]
	0x0393B730 STP X22, X21, [X31 + 0x60]
	0x0393B734 STP X20, X19, [X31 + 0x70]
	0x0393B738 ADRP X21, 0xAA6000
	0x0393B73C LDRB W8, [X21 + 0x930]
	0x0393B740 MOV V8.16B, V2.16B
	0x0393B744 MOV V9.16B, V1.16B
	0x0393B748 MOV V10.16B, V0.16B
	0x0393B74C MOV X19, X1
	0x0393B750 MOV X20, X0
	0x0393B754 TBNZ X8, 0x0, 0x393B790
	0x0393B758 ADRP X0, 0x812000
	0x0393B75C LDR X0, [X0 + 0xA90]
	0x0393B760 BL 0x1C16CF4
	0x0393B764 ADRP X0, 0x7E0000
	0x0393B768 LDR X0, [X0 + 0x7A0]
	0x0393B76C BL 0x1C16CF4
	0x0393B770 ADRP X0, 0x812000
	0x0393B774 LDR X0, [X0 + 0xA98]
	0x0393B778 BL 0x1C16CF4
	0x0393B77C ADRP X0, 0x813000
	0x0393B780 LDR X0, [X0 + 0x590]
	0x0393B784 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xAA7000
	007 Move X21, 0x7E1000
	008 Move W8, [X22+2341]
	009 Move X21, [X21+1536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x7E1000
	017 Move X0, [X0+1536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2341], W8
	021 Move W1, [X20]
	022 Move W2, [X20+4]
	023 Add X0, X31, 8
	024 Move X3, X31
	025 Move [X31+8], X31
	026 Call Edge..ctor, X0, X1, X2
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, [X31+8]
	033 Move X1, X19
	034 Move X2, X31
	035 Call Edge.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {59}
	040 Move W1, [X20+4]
	041 Move W2, [X20+8]
	042 Add X0, X31, 8
	043 Move X3, X31
	044 Move [X31+8], X31
	045 Call Edge..ctor, X0, X1, X2
	046 Move X0, [X21]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, [X31+8]
	052 Move X1, X19
	053 Move X2, X31
	054 Call Edge.op_Equality, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {60}
	059 Move W0, 1
	060 Move W1, [X20+8]
	061 Move W2, [X20]
	062 Add X0, X31, 8
	063 Move X3, X31
	064 Move [X31+8], X31
	065 Call Edge..ctor, X0, X1, X2
	066 Move X0, [X21]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Move X0, [X31+8]
	072 Move X1, X19
	073 Move X2, X31
	074 Call Edge.op_Equality, X0, X1
	075 Move X20, [X31+32]
	076 Move X19, [X31+40]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 And W0, W0, 1
	080 Move X30, [X31+48]
	081 Return X0

