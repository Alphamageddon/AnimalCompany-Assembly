Type: UnityEngine.ProBuilder.BezierShape

Method: System.Boolean get_isEditing()

Disassembly:
	0x038F8C6C LDR X8, [X8 + 0xF08]
	0x038F8C70 MOV X0, X19

ISIL:
	001 Move W0, [X0+57]
	002 Return X0

Method: System.Void set_isEditing(System.Boolean value)

Disassembly:
	0x038F8C74 MOV X1, X31
	0x038F8C78 LDR X8, [X8]
	0x038F8C7C LDR X9, [X8 + 0xB8]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+57], W8
	003 Return 

Method: UnityEngine.ProBuilder.ProBuilderMesh get_mesh()

Disassembly:
	0x038F8C80 LDR V0, [X9]
	0x038F8C84 STR D0, [X19 + 0x10]
	0x038F8C88 LDR X9, [X8 + 0xB8]
	0x038F8C8C LDR V0, [X9]
	0x038F8C90 STR D0, [X19 + 0x18]
	0x038F8C94 LDR X8, [X8 + 0xB8]
	0x038F8C98 LDR V0, [X8]
	0x038F8C9C STR D0, [X19 + 0x20]
	0x038F8CA0 BL 0x33BDD8C
	0x038F8CA4 CBZ X21, 0x38F8DF0
	0x038F8CA8 LDR X8, [X21 + 0x18]
	0x038F8CAC FMOV S1, W31
	0x038F8CB0 CBZ X8, 0x38F8D94
	0x038F8CB4 CBZ X20, 0x38F8DF0
	0x038F8CB8 LDR X9, [X20 + 0x18]
	0x038F8CBC FMOV S0, W31
	0x038F8CC0 FMOV S2, W31
	0x038F8CC4 FMOV S3, W31
	0x038F8CC8 CBZ X9, 0x38F8DAC
	0x038F8CCC CBZ W9, 0x38F8DEC
	0x038F8CD0 LDRSW X10, [X20 + 0x20]
	0x038F8CD4 CMP W10, W8
	0x038F8CD8 B.CS 0x38F8DEC
	0x038F8CDC MOVZ W11, 0xC
	0x038F8CE0 MADD X10, X10, X11, X21
	0x038F8CE4 LDP S3, S0, [X10 + 0x20]
	0x038F8CE8 CMP W9, 0x1
	0x038F8CEC B.LT 0x38F8DA4
	0x038F8CF0 MOV W12, W31
	0x038F8CF4 MOVZ W10, 0xC
	0x038F8CF8 MOV V2.16B, V3.16B
	0x038F8CFC MOV V1.16B, V0.16B
	0x038F8D00 ADD X11, X20, W12, 0x3, SXTW
	0x038F8D04 LDRSW X11, [X11 + 0x20]
	0x038F8D08 CMP W11, W8
	0x038F8D0C B.CS 0x38F8DEC
	0x038F8D10 SXTW X12, W12

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xAEA000
	006 Move X20, 0x7FC000
	007 Move W8, [X21+1885]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x856000
	015 Move X0, [X0+2656]
	016 Call 0x1C17CF4
	017 Move X0, 0x7FC000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1885], W8
	022 Move X0, [X20]
	023 Move X20, [X19+64]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {42}
	036 Move X8, 0x856000
	037 Move X8, [X8+2656]
	038 Move X0, X19
	039 Move X1, [X8]
	040 Call 0x21A4894, X0
	041 Move [X19+64], X0
	042 Move X0, [X19+64]
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0

Method: System.Void set_mesh(UnityEngine.ProBuilder.ProBuilderMesh value)

Disassembly:
	0x038F8D14 MADD X13, X11, X10, X21
	0x038F8D18 LDR V4, [X13 + 0x20]

ISIL:
	001 Move [X0+64], X1
	002 Return 

Method: System.Void Init()

Disassembly:
	0x038F8D1C ADD X13, X20, X12, 0x3, LSL
	0x038F8D20 LDRSW X13, [X13 + 0x24]
	0x038F8D24 FCMP S3, S4
	0x038F8D28 FCSEL S3, S3, S4, MI
	0x038F8D2C CMP W13, W8
	0x038F8D30 B.CS 0x38F8DEC
	0x038F8D34 ADD X14, X21, 0x20
	0x038F8D38 MADD X13, X13, X10, X14
	0x038F8D3C LDP S5, S7, [X13]
	0x038F8D40 NOP
	0x038F8D44 MADD X11, X11, X10, X14
	0x038F8D48 LDR V6, [X11 + 0x4]
	0x038F8D4C ADD W12, W12, 0x1
	0x038F8D50 FCMP S3, S5
	0x038F8D54 FCSEL S3, S3, S5, MI
	0x038F8D58 FCMP S0, S6
	0x038F8D5C FCSEL S0, S0, S6, MI
	0x038F8D60 FCMP S0, S7
	0x038F8D64 FCSEL S0, S0, S7, MI
	0x038F8D68 FCMP S2, S4
	0x038F8D6C FCSEL S2, S2, S4, GT
	0x038F8D70 FCMP S2, S5
	0x038F8D74 FCSEL S2, S2, S5, GT
	0x038F8D78 FCMP S1, S6
	0x038F8D7C FCSEL S1, S1, S6, GT
	0x038F8D80 FCMP S1, S7
	0x038F8D84 FCSEL S1, S1, S7, GT
	0x038F8D88 CMP W9, W12
	0x038F8D8C B.NE 0x38F8D00
	0x038F8D90 B 0x38F8DAC
	0x038F8D94 FMOV S0, W31
	0x038F8D98 FMOV S2, W31
	0x038F8D9C FMOV S3, W31
	0x038F8DA0 B 0x38F8DAC
	0x038F8DA4 MOV V1.16B, V0.16B
	0x038F8DA8 MOV V2.16B, V3.16B
	0x038F8DAC FADD S4, S2, S3
	0x038F8DB0 FMOV S5, 0.5
	0x038F8DB4 FADD S6, S1, S0
	0x038F8DB8 FSUB S2, S2, S3
	0x038F8DBC FSUB S0, S1, S0
	0x038F8DC0 FMUL S1, S4, S5
	0x038F8DC4 FMUL S3, S6, S5
	0x038F8DC8 STP S2, S0, [X19 + 0x18]
	0x038F8DCC FMUL S2, S2, S5
	0x038F8DD0 FMUL S0, S0, S5
	0x038F8DD4 STP S1, S3, [X19 + 0x10]
	0x038F8DD8 STP S2, S0, [X19 + 0x20]
	0x038F8DDC LDP X20, X19, [X31 + 0x20]
	0x038F8DE0 LDP X22, X21, [X31 + 0x10]
	0x038F8DE4 LDR X30, [X31], #0x30
	0x038F8DE8 RET
	0x038F8DEC BL 0x1C16F28
	0x038F8DF0 BL 0x1C16F20
	0x038F8DF4 STR X30, [X31 - 0x30]!
	0x038F8DF8 STP X22, X21, [X31 + 0x10]
	0x038F8DFC STP X20, X19, [X31 + 0x20]
	0x038F8E00 ADRP X22, 0xAE1000
	0x038F8E04 LDRB W8, [X22 + 0x78F]
	0x038F8E08 MOV W21, W2
	0x038F8E0C MOV X20, X1
	0x038F8E10 MOV X19, X0
	0x038F8E14 CBNZ W8, 0x38F8E2C
	0x038F8E18 ADRP X0, 0x803000
	0x038F8E1C LDR X0, [X0 + 0xF08]
	0x038F8E20 BL 0x1C16CF4
	0x038F8E24 MOVZ W8, 0x1
	0x038F8E28 STRB W8, [X22 + 0x78F]
	0x038F8E2C ADRP X8, 0x803000
	0x038F8E30 LDR X8, [X8 + 0xF08]
	0x038F8E34 MOV X0, X19
	0x038F8E38 MOV X1, X31
	0x038F8E3C LDR X8, [X8]
	0x038F8E40 LDR X9, [X8 + 0xB8]
	0x038F8E44 LDR V0, [X9]
	0x038F8E48 STR D0, [X19 + 0x10]
	0x038F8E4C LDR X9, [X8 + 0xB8]
	0x038F8E50 LDR V0, [X9]
	0x038F8E54 STR D0, [X19 + 0x18]
	0x038F8E58 LDR X8, [X8 + 0xB8]
	0x038F8E5C LDR V0, [X8]
	0x038F8E60 STR D0, [X19 + 0x20]
	0x038F8E64 BL 0x33BDD8C
	0x038F8E68 CBZ X20, 0x38F8F38
	0x038F8E6C LDR X9, [X20 + 0x18]
	0x038F8E70 CBZ X9, 0x38F8ED8
	0x038F8E74 CBZ W9, 0x38F8F34
	0x038F8E78 LDP S1, S0, [X20 + 0x20]
	0x038F8E7C SUBS W8, W21, 0x2
	0x038F8E80 B.LT 0x38F8EEC
	0x038F8E84 MOV W11, W21
	0x038F8E88 SUB W9, W9, 0x1
	0x038F8E8C ADD X10, X20, 0x2C
	0x038F8E90 SUB X11, X11, 0x1
	0x038F8E94 MOV V3.16B, V1.16B
	0x038F8E98 MOV V2.16B, V0.16B
	0x038F8E9C CMP W9, W8
	0x038F8EA0 B.LS 0x38F8F34
	0x038F8EA4 LDP S4, S5, [X10 - 0x4]
	0x038F8EA8 ADD X10, X10, 0x8
	0x038F8EAC FCMP S1, S4
	0x038F8EB0 FCSEL S1, S1, S4, MI
	0x038F8EB4 FCMP S0, S5
	0x038F8EB8 FCSEL S0, S0, S5, MI
	0x038F8EBC FCMP S3, S4
	0x038F8EC0 FCSEL S3, S3, S4, GT
	0x038F8EC4 FCMP S2, S5
	0x038F8EC8 FCSEL S2, S2, S5, GT
	0x038F8ECC SUBS X11, X11, 0x1
	0x038F8ED0 B.NE 0x38F8E9C
	0x038F8ED4 B 0x38F8EF4
	0x038F8ED8 FMOV S2, W31
	0x038F8EDC FMOV S0, W31
	0x038F8EE0 FMOV S3, W31
	0x038F8EE4 FMOV S1, W31
	0x038F8EE8 B 0x38F8EF4
	0x038F8EEC MOV V2.16B, V0.16B
	0x038F8EF0 MOV V3.16B, V1.16B
	0x038F8EF4 FADD S4, S3, S1
	0x038F8EF8 FMOV S5, 0.5
	0x038F8EFC FADD S6, S2, S0
	0x038F8F00 FSUB S1, S3, S1
	0x038F8F04 FSUB S0, S2, S0
	0x038F8F08 FMUL S2, S4, S5
	0x038F8F0C FMUL S3, S6, S5
	0x038F8F10 STP S1, S0, [X19 + 0x18]
	0x038F8F14 FMUL S1, S1, S5
	0x038F8F18 FMUL S0, S0, S5
	0x038F8F1C STP S2, S3, [X19 + 0x10]
	0x038F8F20 STP S1, S0, [X19 + 0x20]
	0x038F8F24 LDP X20, X19, [X31 + 0x20]
	0x038F8F28 LDP X22, X21, [X31 + 0x10]
	0x038F8F2C LDR X30, [X31], #0x30
	0x038F8F30 RET
	0x038F8F34 BL 0x1C16F28
	0x038F8F38 BL 0x1C16F20
	0x038F8F3C LDR V2, [X0 + 0x10]
	0x038F8F40 LDR V3, [X0 + 0x20]
	0x038F8F44 MOV X8, X0
	0x038F8F48 MOV W0, W31
	0x038F8F4C FADD S4, S2, S3
	0x038F8F50 FCMP S0, S4
	0x038F8F54 B.GT 0x38F8F8C
	0x038F8F58 FSUB S2, S2, S3
	0x038F8F5C FCMP S0, S2
	0x038F8F60 B.MI 0x38F8F8C
	0x038F8F64 LDR V0, [X8 + 0x24]
	0x038F8F68 LDR V2, [X8 + 0x14]
	0x038F8F6C FADD S3, S0, S2

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+64], D10
	003 Move [X31+80], D9
	004 Move [X31+88], D8
	005 Move [X31+96], X30
	006 Move [X31+104], X23
	007 Move [X31+112], X22
	008 Move [X31+120], X21
	009 Move [X31+128], X20
	010 Move [X31+136], X19
	011 Move X20, 0xAEA000
	012 Move W8, [X20+1886]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x856000
	019 Move X0, [X0+2664]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1886], W8
	023 Move X21, 0xAE1000
	024 Move W8, [X21+1923]
	025 Move X20, [X19+32]
	026 Compare W8, 0
	027 JumpIfNotEqual {33}
	028 Move X0, 0x7FC000
	029 Move X0, [X0+1440]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+1923], W8
	033 Move X8, 0x7FC000
	034 Move X8, [X8+1440]
	035 Move X23, 0xAE1000
	036 Move W9, [X23+1939]
	037 Move X8, [X8]
	038 Move X8, [X8+184]
	039 Move S10, [X8]
	040 Move S9, [X8+4]
	041 Move V8, [X8+8]
	042 Compare W9, 0
	043 JumpIfNotEqual {49}
	044 Move X0, 0x7FD000
	045 Move X0, [X0+1448]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X23+1939], W8
	049 Compare X20, 0
	050 JumpIfEqual {180}
	051 Move X22, 0x7FD000
	052 Move X22, [X22+1448]
	053 Move X21, 0x856000
	054 Move X8, [X22]
	055 Move X9, [X8+184]
	056 Move X21, [X21+2664]
	057 Move W11, [X20+28]
	058 Move X8, [X20+16]
	059 Move S3, [X9]
	060 Move S2, [X9+4]
	061 Move S1, [X9+8]
	062 Move S0, [X9+12]
	063 Move X10, [X21]
	064 Add W9, W11, 1
	065 Move [X20+28], W9
	066 Compare X8, 0
	067 JumpIfEqual {180}
	068 NotImplemented "Instruction LDRSW not yet implemented."
	069 Move W11, [X8+24]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Add W10, W9, 1
	072 Move [X20+24], W10
	073 Move W10, 52
	074 Move X11, -48283648
	075 NotImplemented "Instruction MADD not yet implemented."
	076 Move X9, -48275456
	077 Move V4, [X11+246]
	078 Move V5, [X9+1632]
	079 Move [X8+32], S10
	080 Move [X8+40], S9
	081 Move [X8+40], S8
	082 Move [X8+68], S3
	083 Move [X8+76], S2
	084 Move [X8+44], V4
	085 Move [X8+60], D5
	086 Move [X8+76], S1
	087 Move [X8+84], S0
	088 Move X19, [X19+32]
	089 Move X8, [X10+32]
	090 Move X9, -48283648
	091 Move V4, [X9+246]
	092 Move X9, -48275456
	093 Move X8, [X8+192]
	094 Move V5, [X9+1632]
	095 Add X1, X31, 0
	096 Move X0, X20
	097 Move X2, [X8+112]
	098 Move [X31], S10
	099 Move [X31+8], S9
	100 Move [X31+8], S8
	101 Move [X31+12], V4
	102 Move [X31+28], D5
	103 Move [X31+36], S3
	104 Move [X31+44], S2
	105 Move [X31+44], S1
	106 Move [X31+52], S0
	107 Call List`1<BezierPoint>.AddWithResize, X0, X1
	108 Move W8, [X23+1939]
	109 Move X19, [X19+32]
	110 Compare W8, 0
	111 JumpIfNotEqual {117}
	112 Move X0, 0x7FD000
	113 Move X0, [X0+1448]
	114 Call 0x1C17CF4
	115 Move W8, 1
	116 Move [X23+1939], W8
	117 Compare X19, 0
	118 JumpIfEqual {180}
	119 Move X8, [X22]
	120 Move W11, [X19+28]
	121 Move X10, [X21]
	122 Move X9, [X8+184]
	123 Move X8, [X19+16]
	124 Move S3, [X9]
	125 Move S2, [X9+4]
	126 Move S1, [X9+8]
	127 Move S0, [X9+12]
	128 Add W9, W11, 1
	129 Move [X19+28], W9
	130 Compare X8, 0
	131 JumpIfEqual {180}
	132 NotImplemented "Instruction LDRSW not yet implemented."
	133 Move W11, [X8+24]
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Add W10, W9, 1
	136 Move [X19+24], W10
	137 Move W10, 52
	138 Move X11, -48283648
	139 NotImplemented "Instruction MADD not yet implemented."
	140 Move X9, -48283648
	141 Move V4, [X11+34]
	142 Move V5, [X9+63]
	143 Move W10, 0xC0000000
	144 Move [X8+64], W10
	145 Move [X8+68], S3
	146 Move [X8+76], S2
	147 Move [X8+32], V4
	148 Move [X8+40], V5
	149 Move [X8+76], S1
	150 Move [X8+84], S0
	151 Move X8, [X10+32]
	152 Move X9, -48283648
	153 Move X10, -48283648
	154 Move V4, [X9+34]
	155 Move X8, [X8+192]
	156 Move V5, [X10+63]
	157 Move W9, 0xC0000000
	158 Add X1, X31, 0
	159 Move X2, [X8+112]
	160 Move X0, X19
	161 Move [X31], V4
	162 Move [X31+8], V5
	163 Move [X31+32], W9
	164 Move [X31+36], S3
	165 Move [X31+44], S2
	166 Move [X31+44], S1
	167 Move [X31+52], S0
	168 Call List`1<BezierPoint>.AddWithResize, X0, X1
	169 Move X20, [X31+128]
	170 Move X19, [X31+136]
	171 Move X22, [X31+112]
	172 Move X21, [X31+120]
	173 Move X30, [X31+96]
	174 Move X23, [X31+104]
	175 Move D9, [X31+80]
	176 Move D8, [X31+88]
	177 Move V10, [X31+64]
	178 Add X31, X31, 144
	179 Return 
	180 Call 0x1C17F20

Method: System.Void Refresh()

Disassembly:
	0x038F8F70 FCMP S1, S3
	0x038F8F74 B.LE 0x38F8F80
	0x038F8F78 MOV W0, W31
	0x038F8F7C RET
	0x038F8F80 FSUB S0, S2, S0
	0x038F8F84 FCMP S1, S0
	0x038F8F88 CSET W0, PL
	0x038F8F8C RET
	0x038F8F90 STP D15, D14, [X31 - 0x60]!
	0x038F8F94 STP D13, D12, [X31 + 0x10]
	0x038F8F98 STP D11, D10, [X31 + 0x20]
	0x038F8F9C STP D9, D8, [X31 + 0x30]
	0x038F8FA0 STR X30, [X31 + 0x40]
	0x038F8FA4 STP X20, X19, [X31 + 0x50]
	0x038F8FA8 MOV V8.16B, V3.16B
	0x038F8FAC MOV V10.16B, V1.16B
	0x038F8FB0 MOV V11.16B, V0.16B
	0x038F8FB4 LDR V1, [X0 + 0x10]
	0x038F8FB8 LDP S3, S0, [X0 + 0x20]
	0x038F8FBC MOV V9.16B, V2.16B
	0x038F8FC0 FADD S2, S1, S3
	0x038F8FC4 FCMP S11, S2
	0x038F8FC8 FSUB S1, S1, S3
	0x038F8FCC B.GT 0x38F8FF4
	0x038F8FD0 FCMP S11, S1
	0x038F8FD4 B.MI 0x38F8FF4
	0x038F8FD8 LDR V3, [X0 + 0x14]
	0x038F8FDC FADD S4, S0, S3
	0x038F8FE0 FCMP S10, S4
	0x038F8FE4 B.GT 0x38F8FF4
	0x038F8FE8 FSUB S3, S3, S0
	0x038F8FEC FCMP S10, S3
	0x038F8FF0 B.PL 0x38F90C8
	0x038F8FF4 FCMP S9, S2
	0x038F8FF8 B.GT 0x38F9020
	0x038F8FFC FCMP S9, S1
	0x038F9000 B.MI 0x38F9020
	0x038F9004 LDR V1, [X0 + 0x14]
	0x038F9008 FADD S2, S0, S1
	0x038F900C FCMP S8, S2
	0x038F9010 B.GT 0x38F9020
	0x038F9014 FSUB S0, S1, S0
	0x038F9018 FCMP S8, S0
	0x038F901C B.PL 0x38F90C8
	0x038F9020 BL 0x38F80EC
	0x038F9024 CBZ X0, 0x38F9124
	0x038F9028 LDR W20, [X0 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xAEA000
	005 Move W8, [X20+1887]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x856000
	012 Move X0, [X0+2672]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1887], W8
	016 Move X8, [X19+32]
	017 Compare X8, 0
	018 JumpIfEqual {55}
	019 Move W20, [X8+24]
	020 Move X0, X19
	021 Call BezierShape.get_mesh, X0
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move [X31+8], X0
	024 Move X0, [X19+32]
	025 Move V0, [X19+44]
	026 Move W2, [X19+48]
	027 Move W1, [X19+52]
	028 Move W3, [X19+40]
	029 Move W4, [X19+56]
	030 Add X5, X31, 8
	031 Move X6, X31
	032 Call Spline.Extrude, X0, V0, X1, X2, X3, X4, X5
	033 Compare X0, 0
	034 JumpIfEqual {55}
	035 Move X1, X31
	036 Call ProBuilderMesh.Clear, X0
	037 Move X0, X19
	038 Call BezierShape.get_mesh, X0
	039 Compare X0, 0
	040 JumpIfEqual {55}
	041 Move W1, W31
	042 Move X2, X31
	043 Call ProBuilderMesh.ToMesh, X0, X1
	044 Move X0, X19
	045 Call BezierShape.get_mesh, X0
	046 Compare X0, 0
	047 JumpIfEqual {55}
	048 Move W1, 31
	049 Move X2, X31
	050 Call ProBuilderMesh.Refresh, X0, X1
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Return 
	055 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x038F902C MOV X19, X0
	0x038F9030 CMP W20, 0x1
	0x038F9034 B.EQ 0x38F9120
	0x038F9038 CBZ W20, 0x38F9120
	0x038F903C LDP S14, S15, [X19 + 0x28]
	0x038F9040 LDP S0, S1, [X19 + 0x20]
	0x038F9044 MOV V4.16B, V11.16B
	0x038F9048 MOV V5.16B, V10.16B
	0x038F904C MOV V2.16B, V14.16B
	0x038F9050 MOV V3.16B, V15.16B
	0x038F9054 MOV V6.16B, V9.16B
	0x038F9058 MOV V7.16B, V8.16B
	0x038F905C STP S0, S1, [X31 + 0x48]
	0x038F9060 BL 0x38F9128
	0x038F9064 TBNZ X0, 0x0, 0x38F90C8
	0x038F9068 CMP W20, 0x3
	0x038F906C B.LS 0x38F9120
	0x038F9070 LDP S12, S13, [X19 + 0x38]
	0x038F9074 MOV V0.16B, V14.16B
	0x038F9078 MOV V1.16B, V15.16B
	0x038F907C MOV V4.16B, V11.16B
	0x038F9080 MOV V2.16B, V12.16B
	0x038F9084 MOV V3.16B, V13.16B
	0x038F9088 MOV V5.16B, V10.16B
	0x038F908C MOV V6.16B, V9.16B
	0x038F9090 MOV V7.16B, V8.16B
	0x038F9094 BL 0x38F9128
	0x038F9098 TBNZ X0, 0x0, 0x38F90C8
	0x038F909C LDP S14, S15, [X19 + 0x30]
	0x038F90A0 MOV V0.16B, V12.16B
	0x038F90A4 MOV V1.16B, V13.16B
	0x038F90A8 MOV V4.16B, V11.16B
	0x038F90AC MOV V2.16B, V14.16B
	0x038F90B0 MOV V3.16B, V15.16B
	0x038F90B4 MOV V5.16B, V10.16B
	0x038F90B8 MOV V6.16B, V9.16B
	0x038F90BC MOV V7.16B, V8.16B
	0x038F90C0 BL 0x38F9128

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xAE9000
	007 Move X22, 0x855000
	008 Move X20, 0x855000
	009 Move W8, [X21+1888]
	010 Move X22, [X22+2680]
	011 Move X20, [X20+2688]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x855000
	018 Move X0, [X0+2688]
	019 Call 0x1C17CF4
	020 Move X0, 0x855000
	021 Move X0, [X0+2680]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1888], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X1, [X20]
	028 Move X20, X0
	029 Call List`1<BezierPoint>..ctor, X0
	030 Move X8, -48275456
	031 Move V0, [X8+368]
	032 Move W8, 0x3F000000
	033 Move W9, 1
	034 Move [X19+32], X20
	035 Move [X19+44], W8
	036 Move [X19+48], D0
	037 Move [X19+56], W9
	038 Move X0, X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X1, X31
	044 Move X30, [X31+48]
	045 Call MonoBehaviour..ctor, X0
	046 Return 

