Type: UnityEngine.ProBuilder.AutoUnwrapSettings

Method: UnityEngine.ProBuilder.AutoUnwrapSettings get_defaultAutoUnwrapSettings()

Disassembly:
	0x038F791C B 0x38F792C
	0x038F7920 LDRSW X9, [X10]
	0x038F7924 ADD X8, X8, X9, 0x4, LSL
	0x038F7928 ADD X0, X8, 0x138
	0x038F792C LDP X9, X2, [X0]
	0x038F7930 ADD X8, X31, 0x18

ISIL:
	001 Move X9, -48275456
	002 Move V0, [X9+142]
	003 Move X9, 9
	004 Move [X8+16], X31
	005 Move [X8+24], X9
	006 Move [X8], V0
	007 Return X0

Method: System.Boolean get_useWorldSpace()

Disassembly:
	0x038F794C LDR V13, [X31 + 0x30]
	0x038F7950 LDR V10, [X31 + 0x38]

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.Void set_useWorldSpace(System.Boolean value)

Disassembly:
	0x038F7954 LDRH W9, [X8 + 0x12E]
	0x038F7958 LDR X1, [X22]
	0x038F795C CBZ X9, 0x38F7980

ISIL:
	001 And W8, W1, 1
	002 Move [X0], W8
	003 Return 

Method: System.Boolean get_flipU()

Disassembly:
	0x038F7960 LDR X10, [X8 + 0xB0]
	0x038F7964 ADD X10, X10, 0x8

ISIL:
	001 Move W0, [X0+1]
	002 Return X0

Method: System.Void set_flipU(System.Boolean value)

Disassembly:
	0x038F7968 LDUR X11, [X10 - 0x8]
	0x038F796C CMP X11, X1
	0x038F7970 B.EQ 0x38F7990

ISIL:
	001 And W8, W1, 1
	002 Move [X0+1], W8
	003 Return 

Method: System.Boolean get_flipV()

Disassembly:
	0x038F7974 SUBS X9, X9, 0x1
	0x038F7978 ADD X10, X10, 0x10

ISIL:
	001 Move W0, [X0+2]
	002 Return X0

Method: System.Void set_flipV(System.Boolean value)

Disassembly:
	0x038F797C B.NE 0x38F7968
	0x038F7980 MOV X0, X19
	0x038F7984 MOV W2, W31

ISIL:
	001 And W8, W1, 1
	002 Move [X0+2], W8
	003 Return 

Method: System.Boolean get_swapUV()

Disassembly:
	0x038F7988 BL 0x1C5C788
	0x038F798C B 0x38F799C

ISIL:
	001 Move W0, [X0+3]
	002 Return X0

Method: System.Void set_swapUV(System.Boolean value)

Disassembly:
	0x038F7990 LDRSW X9, [X10]
	0x038F7994 ADD X8, X8, X9, 0x4, LSL
	0x038F7998 ADD X0, X8, 0x138

ISIL:
	001 And W8, W1, 1
	002 Move [X0+3], W8
	003 Return 

Method: UnityEngine.ProBuilder.AutoUnwrapSettings/Fill get_fill()

Disassembly:
	0x038F799C LDP X9, X2, [X0]
	0x038F79A0 ADD X8, X31, 0x18

ISIL:
	001 Move W0, [X0+4]
	002 Return X0

Method: System.Void set_fill(UnityEngine.ProBuilder.AutoUnwrapSettings/Fill value)

Disassembly:
	0x038F79A4 MOV X0, X19
	0x038F79A8 MOV W1, W21

ISIL:
	001 Move [X0+4], W1
	002 Return 

Method: UnityEngine.Vector2 get_scale()

Disassembly:
	0x038F79AC BLR X9
	0x038F79B0 MOVZ W9, 0x5C28

ISIL:
	001 Move S0, [X0+8]
	002 Move S1, [X0+12]
	003 Return X0

Method: System.Void set_scale(UnityEngine.Vector2 value)

Disassembly:
	0x038F79B4 MOVK W9, 0x3F4F0000
	0x038F79B8 UNIMPLEMENTED

ISIL:
	001 Move [X0+8], S0
	002 Move [X0+16], S1
	003 Return 

Method: UnityEngine.Vector2 get_offset()

Disassembly:
	0x038F79BC MOVZ W9, 0x51EB
	0x038F79C0 LDR V0, [X31 + 0x18]

ISIL:
	001 Move S0, [X0+16]
	002 Move S1, [X0+20]
	003 Return X0

Method: System.Void set_offset(UnityEngine.Vector2 value)

Disassembly:
	0x038F79C4 ADRP X8, 0xFFFFFFFFFD1F3000
	0x038F79C8 MOVK W9, 0x3E380000

ISIL:
	001 Move [X0+16], S0
	002 Move [X0+24], S1
	003 Return 

Method: System.Single get_rotation()

Disassembly:
	0x038F79CC UNIMPLEMENTED
	0x038F79D0 LDR V4, [X8 + 0x1EC]

ISIL:
	001 Move V0, [X0+24]
	002 Return V0

Method: System.Void set_rotation(System.Single value)

Disassembly:
	0x038F79D4 MOVZ W8, 0xD70B
	0x00000000 INVALID

ISIL:
	001 Move [X0+24], S0
	002 Return 

Method: UnityEngine.ProBuilder.AutoUnwrapSettings/Anchor get_anchor()

Disassembly:
	0x00000000 INVALID
	0x038F79E0 MOVK W8, 0x3C230000

ISIL:
	001 Move W0, [X0+28]
	002 Return X0

Method: System.Void set_anchor(UnityEngine.ProBuilder.AutoUnwrapSettings/Anchor value)

Disassembly:
	0x038F79E4 ADRP X9, 0xFFFFFFFFFD1F3000
	0x038F79E8 FADD V2.2S, V2.2S, V3.2S

ISIL:
	001 Move [X0+28], W1
	002 Return 

Method: System.Void .ctor(UnityEngine.ProBuilder.AutoUnwrapSettings unwrapSettings)

Disassembly:
	0x038F79EC UNIMPLEMENTED
	0x038F79F0 ADRP X8, 0xFFFFFFFFFD1F3000
	0x00000000 INVALID
	0x038F79F8 LDR V3, [X9 + 0x70]
	0x038F79FC LDR V1, [X31 + 0x20]
	0x038F7A00 LDR V5, [X8 + 0x74]
	0x038F7A04 ADRP X19, 0xAE1000
	0x038F7A08 LDRB W8, [X19 + 0x785]
	0x038F7A0C FMUL S4, S11, S4
	0x038F7A10 FMUL S3, S10, S3
	0x038F7A14 FMUL S1, S1, S5
	0x038F7A18 FADD S3, S4, S3
	0x038F7A1C FADD S11, S3, S1
	0x038F7A20 FADD V10.2S, V2.2S, V0.2S
	0x038F7A24 CBNZ W8, 0x38F7A3C
	0x038F7A28 ADRP X0, 0x7FC000
	0x038F7A2C LDR X0, [X0 + 0x5A8]
	0x038F7A30 BL 0x1C16CF4
	0x038F7A34 MOVZ W8, 0x1
	0x038F7A38 STRB W8, [X19 + 0x785]
	0x038F7A3C ADRP X8, 0x7FC000
	0x038F7A40 LDR X8, [X8 + 0x5A8]
	0x038F7A44 FSUB V10.2S, V8.2S, V10.2S

ISIL:
	001 Move W8, [X1]
	002 And W8, W8, 1
	003 Move [X0], W8
	004 Move W8, [X1+1]
	005 And W8, W8, 1
	006 Move [X0+1], W8
	007 Move W8, [X1+2]
	008 And W8, W8, 1
	009 Move [X0+2], W8
	010 Move W8, [X1+3]
	011 And W8, W8, 1
	012 Move [X0+3], W8
	013 Move W8, [X1+4]
	014 Move [X0+4], W8
	015 Move X8, [X1+8]
	016 Move [X0+8], X8
	017 Move X8, [X1+16]
	018 Move [X0+16], X8
	019 Move V0, [X1+24]
	020 Move [X0+24], S0
	021 Move W8, [X1+28]
	022 Move [X0+28], W8
	023 Return 

Method: UnityEngine.ProBuilder.AutoUnwrapSettings get_tile()

Disassembly:
	0x038F7A48 FSUB S8, S9, S11
	0x038F7A4C LDR X0, [X8]
	0x038F7A50 LDR W8, [X0 + 0xE0]
	0x038F7A54 CBNZ W8, 0x38F7A5C
	0x038F7A58 BL 0x1C16DFC
	0x038F7A5C ADRP X8, 0xFFFFFFFFFD1F3000

ISIL:
	001 Move X9, -48275456
	002 Move V0, [X9+142]
	003 Move X9, 9
	004 Move [X8+16], X31
	005 Move [X8+24], X9
	006 Move [X8], V0
	007 Return X0

Method: UnityEngine.ProBuilder.AutoUnwrapSettings get_fit()

Disassembly:
	0x00000000 INVALID
	0x038F7A64 LDR V2, [X8 + 0x17C]
	0x038F7A68 FADDP S0, V0.2S
	0x038F7A6C FMUL S1, S8, S8
	0x038F7A70 FADD S0, S1, S0
	0x038F7A74 FSQRT S1, S0

ISIL:
	001 Move X9, -48283648
	002 Move V0, [X9+188]
	003 Move X9, 9
	004 Move [X8+16], X31
	005 Move [X8+24], X9
	006 Move [X8], V0
	007 Return X0

Method: UnityEngine.ProBuilder.AutoUnwrapSettings get_stretch()

Disassembly:
	0x038F7A78 FCMP S1, S2
	0x038F7A7C B.LE 0x38F7A90
	0x038F7A80 UNIMPLEMENTED
	0x00000000 INVALID
	0x038F7A88 FDIV S2, S8, S1
	0x038F7A8C B 0x38F7AC8

ISIL:
	001 Move X9, -48279552
	002 Move V0, [X9+117]
	003 Move X9, 9
	004 Move [X8+16], X31
	005 Move [X8+24], X9
	006 Move [X8], V0
	007 Return X0

Method: System.Void Reset()

Disassembly:
	0x038F7934 MOV X0, X19
	0x038F7938 MOV W1, W20
	0x038F793C BLR X9
	0x038F7940 LDR X8, [X19]
	0x038F7944 LDR V12, [X31 + 0x18]
	0x038F7948 LDR V11, [X31 + 0x20]

ISIL:
	001 Move X8, -48275456
	002 Move V0, [X8+142]
	003 Move X8, 9
	004 Move [X0+16], X31
	005 Move [X0+24], X8
	006 Move [X0], V0
	007 Return 

Method: System.String ToString()

Disassembly:
	0x038F7A90 ADRP X19, 0xAE1000
	0x038F7A94 LDRB W8, [X19 + 0x783]
	0x038F7A98 CBNZ W8, 0x38F7AB0
	0x038F7A9C ADRP X0, 0x7FC000
	0x038F7AA0 LDR X0, [X0 + 0x5A0]
	0x038F7AA4 BL 0x1C16CF4
	0x038F7AA8 MOVZ W8, 0x1
	0x038F7AAC STRB W8, [X19 + 0x783]
	0x038F7AB0 ADRP X8, 0x7FC000
	0x038F7AB4 LDR X8, [X8 + 0x5A0]
	0x038F7AB8 LDR X8, [X8]
	0x038F7ABC LDR X8, [X8 + 0xB8]
	0x038F7AC0 LDR V0, [X8]
	0x038F7AC4 LDR V2, [X8 + 0x8]
	0x038F7AC8 LDP X20, X19, [X31 + 0xC0]
	0x038F7ACC LDP X22, X21, [X31 + 0xB0]
	0x038F7AD0 LDP X24, X23, [X31 + 0xA0]
	0x038F7AD4 LDP X30, X25, [X31 + 0x90]
	0x038F7AD8 LDP D9, D8, [X31 + 0x80]
	0x038F7ADC LDP D11, D10, [X31 + 0x70]
	0x038F7AE0 LDP D13, D12, [X31 + 0x60]
	0x038F7AE4 LDP D15, D14, [X31 + 0x50]
	0x038F7AE8 MOV S1, V0.S[1]
	0x038F7AEC ADD X31, X31, 0xD0
	0x038F7AF0 RET
	0x038F7AF4 LDRSW X9, [X10]
	0x038F7AF8 ADD X8, X8, X9, 0x4, LSL
	0x038F7AFC ADD X0, X8, 0x138
	0x038F7B00 LDP X9, X2, [X0]
	0x038F7B04 ADD X8, X31, 0x18
	0x038F7B08 MOV X0, X19
	0x038F7B0C MOV W1, W20
	0x038F7B10 BLR X9
	0x038F7B14 LDR X8, [X19]
	0x038F7B18 LDR V9, [X31 + 0x18]
	0x038F7B1C LDR V10, [X31 + 0x20]
	0x038F7B20 LDR V8, [X31 + 0x30]
	0x038F7B24 LDR V11, [X31 + 0x38]
	0x038F7B28 LDRH W9, [X8 + 0x12E]
	0x038F7B2C LDR X1, [X21]
	0x038F7B30 CBZ X9, 0x38F7B54
	0x038F7B34 LDR X10, [X8 + 0xB0]
	0x038F7B38 ADD X10, X10, 0x8
	0x038F7B3C LDUR X11, [X10 - 0x8]
	0x038F7B40 CMP X11, X1
	0x038F7B44 B.EQ 0x38F7B64
	0x038F7B48 SUBS X9, X9, 0x1
	0x038F7B4C ADD X10, X10, 0x10
	0x038F7B50 B.NE 0x38F7B3C
	0x038F7B54 MOV X0, X19
	0x038F7B58 MOV W2, W31
	0x038F7B5C BL 0x1C5C788
	0x038F7B60 B 0x38F7B70
	0x038F7B64 LDRSW X9, [X10]
	0x038F7B68 ADD X8, X8, X9, 0x4, LSL
	0x038F7B6C ADD X0, X8, 0x138
	0x038F7B70 LDP X9, X2, [X0]
	0x038F7B74 ADD X8, X31, 0x18
	0x038F7B78 MOV X0, X19
	0x038F7B7C MOV W1, W22
	0x038F7B80 BLR X9
	0x038F7B84 ADRP X8, 0xFFFFFFFFFD1F3000
	0x038F7B88 LDR V1, [X8 + 0x1EC]
	0x038F7B8C MOVZ W8, 0x5C28
	0x038F7B90 MOVK W8, 0x3F4F0000
	0x038F7B94 UNIMPLEMENTED
	0x038F7B98 ADRP X8, 0xFFFFFFFFFD1F3000
	0x038F7B9C LDR V0, [X31 + 0x20]
	0x038F7BA0 ADRP X9, 0xFFFFFFFFFD1F3000
	0x038F7BA4 LDR V4, [X8 + 0x74]
	0x038F7BA8 LDR V3, [X9 + 0x70]
	0x038F7BAC MOVZ W9, 0x51EB
	0x038F7BB0 LDR X8, [X19]
	0x038F7BB4 MOVK W9, 0x3E380000
	0x00000000 INVALID
	0x038F7BBC FMUL S9, S0, S4
	0x038F7BC0 UNIMPLEMENTED
	0x038F7BC4 MOVZ W9, 0xD70B
	0x038F7BC8 FMUL S1, S10, S1
	0x038F7BCC FMUL S3, S11, S3
	0x038F7BD0 LDR V5, [X31 + 0x18]
	0x038F7BD4 MOVK W9, 0x3C230000
	0x038F7BD8 FADD S10, S1, S3
	0x038F7BDC UNIMPLEMENTED
	0x038F7BE0 LDRH W9, [X8 + 0x12E]
	0x038F7BE4 LDR X1, [X21]
	0x00000000 INVALID
	0x038F7BEC FADD V8.2S, V2.2S, V0.2S
	0x00000000 INVALID
	0x038F7BF4 CBZ X9, 0x38F7C18
	0x038F7BF8 LDR X10, [X8 + 0xB0]
	0x038F7BFC ADD X10, X10, 0x8
	0x038F7C00 LDUR X11, [X10 - 0x8]
	0x038F7C04 CMP X11, X1
	0x038F7C08 B.EQ 0x38F7C28
	0x038F7C0C SUBS X9, X9, 0x1
	0x038F7C10 ADD X10, X10, 0x10
	0x038F7C14 B.NE 0x38F7C00
	0x038F7C18 MOV X0, X19
	0x038F7C1C MOV W2, W31
	0x038F7C20 BL 0x1C5C788
	0x038F7C24 B 0x38F7C34
	0x038F7C28 LDRSW X9, [X10]
	0x038F7C2C ADD X8, X8, X9, 0x4, LSL
	0x038F7C30 ADD X0, X8, 0x138
	0x038F7C34 LDP X9, X2, [X0]
	0x038F7C38 ADD X8, X31, 0x18
	0x038F7C3C MOV X0, X19
	0x038F7C40 MOV W1, W20
	0x038F7C44 FADD S9, S10, S9
	0x038F7C48 FADD V8.2S, V8.2S, V11.2S
	0x038F7C4C BLR X9
	0x038F7C50 ADRP X19, 0xAE1000
	0x038F7C54 LDR V10, [X31 + 0x18]
	0x038F7C58 LDRB W8, [X19 + 0x785]
	0x038F7C5C LDR V11, [X31 + 0x20]
	0x038F7C60 CBNZ W8, 0x38F7A3C
	0x038F7C64 B 0x38F7A28
	0x038F7C68 BL 0x1C16F20
	0x038F7C6C LDRB W0, [X0 + 0x39]
	0x038F7C70 RET
	0x038F7C74 AND W8, W1, 0x1
	0x038F7C78 STRB W8, [X0 + 0x39]
	0x038F7C7C RET
	0x038F7C80 STP X30, X21, [X31 - 0x20]!
	0x038F7C84 STP X20, X19, [X31 + 0x10]
	0x038F7C88 ADRP X21, 0xAEA000
	0x038F7C8C ADRP X20, 0x7FC000
	0x038F7C90 LDRB W8, [X21 + 0x75D]
	0x038F7C94 LDR X20, [X20 + 0x598]
	0x038F7C98 MOV X19, X0
	0x038F7C9C TBNZ X8, 0x0, 0x38F7CC0
	0x038F7CA0 ADRP X0, 0x856000
	0x038F7CA4 LDR X0, [X0 + 0xA60]
	0x038F7CA8 BL 0x1C16CF4
	0x038F7CAC ADRP X0, 0x7FC000
	0x038F7CB0 LDR X0, [X0 + 0x598]
	0x038F7CB4 BL 0x1C16CF4
	0x038F7CB8 MOVZ W8, 0x1
	0x038F7CBC STRB W8, [X21 + 0x75D]
	0x038F7CC0 LDR X0, [X20]
	0x038F7CC4 LDR X20, [X19 + 0x40]
	0x038F7CC8 LDR W8, [X0 + 0xE0]
	0x038F7CCC CBNZ W8, 0x38F7CD4
	0x038F7CD0 BL 0x1C16DFC
	0x038F7CD4 MOV X0, X20
	0x038F7CD8 MOV X1, X31
	0x038F7CDC MOV X2, X31
	0x038F7CE0 BL 0x3C3883C
	0x038F7CE4 TBZ X0, 0x0, 0x38F7D04
	0x038F7CE8 ADRP X8, 0x856000
	0x038F7CEC LDR X8, [X8 + 0xA60]
	0x038F7CF0 MOV X0, X19
	0x038F7CF4 LDR X1, [X8]
	0x038F7CF8 BL 0x21A3894
	0x038F7CFC STR X0, [X19 + 0x40]
	0x038F7D00 B 0x38F7D08
	0x038F7D04 LDR X0, [X19 + 0x40]
	0x038F7D08 LDP X20, X19, [X31 + 0x10]
	0x038F7D0C LDP X30, X21, [X31], #0x20
	0x038F7D10 RET
	0x038F7D14 STR X1, [X0 + 0x40]
	0x038F7D18 RET
	0x038F7D1C SUB X31, X31, 0x90
	0x038F7D20 STR D10, [X31 + 0x40]
	0x038F7D24 STP D9, D8, [X31 + 0x50]
	0x038F7D28 STP X30, X23, [X31 + 0x60]
	0x038F7D2C STP X22, X21, [X31 + 0x70]
	0x038F7D30 STP X20, X19, [X31 + 0x80]
	0x038F7D34 ADRP X20, 0xAEA000
	0x038F7D38 LDRB W8, [X20 + 0x75E]
	0x038F7D3C MOV X19, X0
	0x038F7D40 TBNZ X8, 0x0, 0x38F7D58
	0x038F7D44 ADRP X0, 0x856000
	0x038F7D48 LDR X0, [X0 + 0xA68]
	0x038F7D4C BL 0x1C16CF4
	0x038F7D50 MOVZ W8, 0x1
	0x038F7D54 STRB W8, [X20 + 0x75E]
	0x038F7D58 ADRP X21, 0xAE1000
	0x038F7D5C LDRB W8, [X21 + 0x783]
	0x038F7D60 LDR X20, [X19 + 0x20]
	0x038F7D64 CBNZ W8, 0x38F7D7C
	0x038F7D68 ADRP X0, 0x7FC000
	0x038F7D6C LDR X0, [X0 + 0x5A0]
	0x038F7D70 BL 0x1C16CF4
	0x038F7D74 MOVZ W8, 0x1
	0x038F7D78 STRB W8, [X21 + 0x783]
	0x038F7D7C ADRP X8, 0x7FC000
	0x038F7D80 LDR X8, [X8 + 0x5A0]
	0x038F7D84 ADRP X23, 0xAE1000
	0x038F7D88 LDRB W9, [X23 + 0x793]
	0x038F7D8C LDR X8, [X8]
	0x038F7D90 LDR X8, [X8 + 0xB8]
	0x038F7D94 LDP S10, S9, [X8]
	0x038F7D98 LDR V8, [X8 + 0x8]
	0x038F7D9C CBNZ W9, 0x38F7DB4
	0x038F7DA0 ADRP X0, 0x7FD000
	0x038F7DA4 LDR X0, [X0 + 0x5A8]
	0x038F7DA8 BL 0x1C16CF4
	0x038F7DAC MOVZ W8, 0x1
	0x038F7DB0 STRB W8, [X23 + 0x793]
	0x038F7DB4 CBZ X20, 0x38F7F6C
	0x038F7DB8 ADRP X22, 0x7FD000
	0x038F7DBC LDR X22, [X22 + 0x5A8]
	0x038F7DC0 ADRP X21, 0x856000
	0x038F7DC4 LDR X8, [X22]
	0x038F7DC8 LDR X9, [X8 + 0xB8]
	0x038F7DCC LDR X21, [X21 + 0xA68]
	0x038F7DD0 LDR W11, [X20 + 0x1C]
	0x038F7DD4 LDR X8, [X20 + 0x10]
	0x038F7DD8 LDP S3, S2, [X9]
	0x038F7DDC LDP S1, S0, [X9 + 0x8]
	0x038F7DE0 LDR X10, [X21]
	0x038F7DE4 ADD W9, W11, 0x1
	0x038F7DE8 STR W9, [X20 + 0x1C]
	0x038F7DEC CBZ X8, 0x38F7F6C
	0x038F7DF0 LDRSW X9, [X20 + 0x18]
	0x038F7DF4 LDR W11, [X8 + 0x18]
	0x038F7DF8 CMP W9, W11
	0x038F7DFC B.CS 0x38F7E40
	0x038F7E00 ADD W10, W9, 0x1

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+80], X30
	003 Move [X31+88], X21
	004 Move [X31+96], X20
	005 Move [X31+104], X19
	006 Move X21, 0xAEB000
	007 Move X20, 0x7FD000
	008 Move W8, [X21+1883]
	009 Move X20, [X20+2760]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {56}
	015 Move X0, 0x857000
	016 Move X0, [X0+2560]
	017 Call 0x1C17CF4
	018 Move X0, 0x7FD000
	019 Move X0, [X0+2904]
	020 Call 0x1C17CF4
	021 Move X0, 0x857000
	022 Move X0, [X0+2568]
	023 Call 0x1C17CF4
	024 Move X0, 0x7FD000
	025 Move X0, [X0+2760]
	026 Call 0x1C17CF4
	027 Move X0, 0x857000
	028 Move X0, [X0+2576]
	029 Call 0x1C17CF4
	030 Move X0, 0x857000
	031 Move X0, [X0+2584]
	032 Call 0x1C17CF4
	033 Move X0, 0x857000
	034 Move X0, [X0+2592]
	035 Call 0x1C17CF4
	036 Move X0, 0x857000
	037 Move X0, [X0+2600]
	038 Call 0x1C17CF4
	039 Move X0, 0x857000
	040 Move X0, [X0+2608]
	041 Call 0x1C17CF4
	042 Move X0, 0x857000
	043 Move X0, [X0+2616]
	044 Call 0x1C17CF4
	045 Move X0, 0x857000
	046 Move X0, [X0+2624]
	047 Call 0x1C17CF4
	048 Move X0, 0x857000
	049 Move X0, [X0+2632]
	050 Call 0x1C17CF4
	051 Move X0, 0x857000
	052 Move X0, [X0+2640]
	053 Call 0x1C17CF4
	054 Move W8, 1
	055 Move [X21+1883], W8
	056 Move X0, [X20]
	057 Move W1, 18
	058 Move [X31+64], X31
	059 Move [X31+60], W31
	060 Call 0x1C17D6C
	061 Compare X0, 0
	062 JumpIfEqual {220}
	063 Move W8, [X0+24]
	064 Move X20, X0
	065 Compare W8, 0
	066 JumpIfEqual {219}
	067 Move X8, 0x857000
	068 Move X8, [X8+2584]
	069 Move X9, 0x7FD000
	070 Move X8, [X8]
	071 Move X9, [X9+2904]
	072 Move [X20+32], X8
	073 Move W8, [X19]
	074 Move X0, [X9]
	075 Move [X31+76], W8
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Add X0, X31, 76
	081 Move X1, X31
	082 Call Boolean.ToString, X0
	083 Move W8, [X20+24]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move [X20+40], X0
	087 Move X8, 0x857000
	088 Move X8, [X8+2600]
	089 Add X0, X31, 76
	090 Move X1, X31
	091 Move X8, [X8]
	092 Move [X20+48], X8
	093 Move W8, [X19+1]
	094 Move [X31+76], W8
	095 Call Boolean.ToString, X0
	096 Move W8, [X20+24]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move [X20+56], X0
	100 Move X8, 0x857000
	101 Move X8, [X8+2616]
	102 Add X0, X31, 76
	103 Move X1, X31
	104 Move X8, [X8]
	105 Move [X20+64], X8
	106 Move W8, [X19+2]
	107 Move [X31+76], W8
	108 Call Boolean.ToString, X0
	109 Move W8, [X20+24]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move [X20+72], X0
	113 Move X8, 0x857000
	114 Move X8, [X8+2624]
	115 Add X0, X31, 76
	116 Move X1, X31
	117 Move X8, [X8]
	118 Move [X20+80], X8
	119 Move W8, [X19+3]
	120 Move [X31+76], W8
	121 Call Boolean.ToString, X0
	122 Move W8, [X20+24]
	123 NotImplemented "Instruction CMP not yet implemented."
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move [X20+88], X0
	126 Move X8, 0x857000
	127 Move X8, [X8+2632]
	128 Move X9, 0x857000
	129 Move TEMP, 0
	130 Not TEMP
	131 Move X10, TEMP
	132 Add X0, X31, 32
	133 Move X8, [X8]
	134 Move X9, [X9+2568]
	135 Move X1, X31
	136 Move [X20+96], X8
	137 Move X8, [X9]
	138 Move W9, [X19+4]
	139 Move [X31+32], X8
	140 Move [X31+40], X10
	141 Move [X31+48], W9
	142 Call Enum.ToString, X0
	143 Move W8, [X20+24]
	144 NotImplemented "Instruction CMP not yet implemented."
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move [X20+104], X0
	147 Move X8, 0x857000
	148 Move X8, [X8+2576]
	149 Move X9, 0x857000
	150 Move TEMP, 0
	151 Not TEMP
	152 Move X10, TEMP
	153 Add X0, X31, 8
	154 Move X8, [X8]
	155 Move X9, [X9+2560]
	156 Move X1, X31
	157 Move [X20+112], X8
	158 Move X8, [X9]
	159 Move W9, [X19+28]
	160 Move [X31+8], X8
	161 Move [X31+16], X10
	162 Move [X31+24], W9
	163 Call Enum.ToString, X0
	164 Move W8, [X20+24]
	165 NotImplemented "Instruction CMP not yet implemented."
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Move [X20+120], X0
	168 Move X8, 0x857000
	169 Move X8, [X8+2592]
	170 Add X0, X31, 64
	171 Move X1, X31
	172 Move X2, X31
	173 Move X8, [X8]
	174 Move X3, X31
	175 Move [X20+128], X8
	176 Move V0, [X19+8]
	177 Move [X31+64], D0
	178 Call 0x25F44C4
	179 Move W8, [X20+24]
	180 NotImplemented "Instruction CMP not yet implemented."
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Move [X20+136], X0
	183 Move X8, 0x857000
	184 Move X8, [X8+2640]
	185 Add X0, X31, 64
	186 Move X1, X31
	187 Move X2, X31
	188 Move X8, [X8]
	189 Move X3, X31
	190 Move [X20+144], X8
	191 Move V0, [X19+16]
	192 Move [X31+64], D0
	193 Call 0x25F44C4
	194 Move W8, [X20+24]
	195 NotImplemented "Instruction CMP not yet implemented."
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Move [X20+152], X0
	198 Move X8, 0x857000
	199 Move X8, [X8+2608]
	200 Add X0, X31, 60
	201 Move X1, X31
	202 Move X8, [X8]
	203 Move [X20+160], X8
	204 Move V0, [X19+24]
	205 Move [X31+60], S0
	206 Call Single.ToString, X0
	207 Move W8, [X20+24]
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Move [X20+168], X0
	210 Move X0, X20
	211 Move X1, X31
	212 Call String.Concat, X0
	213 Move X20, [X31+96]
	214 Move X19, [X31+104]
	215 Move X30, [X31+80]
	216 Move X21, [X31+88]
	217 Add X31, X31, 112
	218 Return X0
	219 Call 0x1C17F28
	220 Call 0x1C17F20

