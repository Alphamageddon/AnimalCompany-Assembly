Type: UnityEngine.ProBuilder.ProBuilderMesh

Method: System.Boolean get_userCollisions()

Disassembly:
	0x0391683C LDP X8, X2, [X0]
	0x03916840 MOV X0, X19

ISIL:
	001 Move W0, [X0+144]
	002 Return X0

Method: System.Void set_userCollisions(System.Boolean value)

Disassembly:
	0x03916844 MOV X1, X26
	0x03916848 BLR X8
	0x0391684C LDR W8, [X31 + 0x3C]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+144], W8
	003 Return 

Method: UnityEngine.ProBuilder.UnwrapParameters get_unwrapParameters()

Disassembly:
	0x03916850 CBZ W8, 0x39168DC
	0x03916854 LDR X8, [X19]

ISIL:
	001 Move X0, [X0+152]
	002 Return X0

Method: System.Void set_unwrapParameters(UnityEngine.ProBuilder.UnwrapParameters value)

Disassembly:
	0x03916858 LDR X1, [X24]
	0x0391685C LDRH W9, [X8 + 0x12E]

ISIL:
	001 Move [X0+152], X1
	002 Return 

Method: UnityEngine.MeshRenderer get_renderer()

Disassembly:
	0x03913AD8 SCVTF S0, S0
	0x03913ADC FDIV S2, S8, S0
	0x03913AE0 UNIMPLEMENTED
	0x00000000 INVALID
	0x03913AE8 STUR S2, [X22 - 0x4]
	0x03913AEC STR D0, [X22], #0xC
	0x03913AF0 B.NE 0x3913A80
	0x03913AF4 LDP X20, X19, [X31 + 0xA0]
	0x03913AF8 LDP X22, X21, [X31 + 0x90]
	0x03913AFC LDP X24, X23, [X31 + 0x80]
	0x03913B00 LDP X26, X25, [X31 + 0x70]
	0x03913B04 LDP X28, X27, [X31 + 0x60]
	0x03913B08 LDP X29, X30, [X31 + 0x50]
	0x03913B0C LDP D9, D8, [X31 + 0x40]
	0x03913B10 LDP D11, D10, [X31 + 0x30]
	0x03913B14 ADD X31, X31, 0xB0
	0x03913B18 RET
	0x03913B1C BL 0x1C16F20
	0x03913B20 SUB X31, X31, 0x80
	0x03913B24 STR D8, [X31 + 0x10]
	0x03913B28 STP X29, X30, [X31 + 0x20]
	0x03913B2C STP X28, X27, [X31 + 0x30]
	0x03913B30 STP X26, X25, [X31 + 0x40]
	0x03913B34 STP X24, X23, [X31 + 0x50]
	0x03913B38 STP X22, X21, [X31 + 0x60]
	0x03913B3C STP X20, X19, [X31 + 0x70]
	0x03913B40 ADRP X20, 0xACE000
	0x03913B44 ADRP X22, 0x83A000
	0x03913B48 LDRB W8, [X20 + 0x827]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xACF000
	005 Move W8, [X20+2113]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x83C000
	012 Move X0, [X0+512]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2113], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call Component.get_gameObject, X0
	019 Compare X0, 0
	020 JumpIfEqual {37}
	021 Move X8, 0x83C000
	022 Move X8, [X8+512]
	023 Add X19, X19, 184
	024 Move X1, X19
	025 Move X2, [X8]
	026 Call 0x21E7600, X0, X1
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfNotEqual {32}
	031 Move X0, [X19]
	032 Move X0, X31
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0
	037 Call 0x1C17F20

Method: UnityEngine.MeshFilter get_filter()

Disassembly:
	0x03916860 CBZ X9, 0x3916884
	0x03916864 LDR X10, [X8 + 0xB0]
	0x03916868 ADD X10, X10, 0x8
	0x0391686C LDUR X11, [X10 - 0x8]
	0x03916870 CMP X11, X1
	0x03916874 B.EQ 0x3916894
	0x03916878 SUBS X9, X9, 0x1
	0x0391687C ADD X10, X10, 0x10
	0x03916880 B.NE 0x391686C
	0x03916884 MOV X0, X19
	0x03916888 MOV W2, W31
	0x0391688C BL 0x1C5C788
	0x03916890 B 0x39168A0
	0x03916894 LDRSW X9, [X10]
	0x03916898 ADD X8, X8, X9, 0x4, LSL
	0x0391689C ADD X0, X8, 0x138
	0x039168A0 LDP X8, X2, [X0]
	0x039168A4 MOV X0, X19
	0x039168A8 MOV W1, W25
	0x039168AC BLR X8
	0x039168B0 CBZ X28, 0x3916CEC
	0x039168B4 LDR W8, [X28 + 0x18]
	0x039168B8 CMP X25, X8
	0x039168BC B.CS 0x3916CF0
	0x039168C0 CBZ X0, 0x3916CEC
	0x039168C4 MOVZ W8, 0xC
	0x039168C8 MADD X8, X25, X8, X28
	0x039168CC LDP S1, S2, [X8 + 0x24]
	0x039168D0 LDR V0, [X8 + 0x20]
	0x039168D4 MOV X1, X31
	0x039168D8 BL 0x393D8A8
	0x039168DC LDR W8, [X31 + 0x30]
	0x039168E0 TBNZ X8, 0x0, 0x3916968
	0x039168E4 LDR X8, [X19]
	0x039168E8 LDR X1, [X24]
	0x039168EC LDRH W9, [X8 + 0x12E]
	0x039168F0 CBZ X9, 0x3916914
	0x039168F4 LDR X10, [X8 + 0xB0]
	0x039168F8 ADD X10, X10, 0x8
	0x039168FC LDUR X11, [X10 - 0x8]
	0x03916900 CMP X11, X1
	0x03916904 B.EQ 0x3916924
	0x03916908 SUBS X9, X9, 0x1
	0x0391690C ADD X10, X10, 0x10
	0x03916910 B.NE 0x39168FC
	0x03916914 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xACC000
	007 Move X22, 0x7DE000
	008 Move W8, [X20+2114]
	009 Move X22, [X22+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x839000
	016 Move X0, [X0+968]
	017 Call 0x1C17CF4
	018 Move X0, 0x7DE000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2114], W8
	023 Move X20, X19
	024 Add X20, X20, 192
	025 Move X21, [X20]
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X21
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {53}
	039 Move X0, X19
	040 Move X1, X31
	041 Call Component.get_gameObject, X0
	042 Compare X0, 0
	043 JumpIfEqual {61}
	044 Move X8, 0x839000
	045 Move X8, [X8+968]
	046 Move X1, X20
	047 Move X2, [X8]
	048 Call 0x21E7600, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {54}
	053 Move X0, [X20]
	054 Move X0, X31
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X30, [X31+48]
	060 Return X0
	061 Call 0x1C17F20

Method: System.UInt16 get_versionIndex()

Disassembly:
	0x03916918 MOV W2, W31
	0x0391691C BL 0x1C5C788

ISIL:
	001 NotImplemented "Instruction LDRH not yet implemented."
	002 Return X0

Method: System.UInt16 get_nonSerializedVersionIndex()

Disassembly:
	0x03916920 B 0x3916930
	0x03916924 LDRSW X9, [X10]

ISIL:
	001 NotImplemented "Instruction LDRH not yet implemented."
	002 Return X0

Method: System.Boolean get_preserveMeshAssetOnDestroy()

Disassembly:
	0x03916928 ADD X8, X8, X9, 0x4, LSL
	0x0391692C ADD X0, X8, 0x138

ISIL:
	001 Move W0, [X0+160]
	002 Return X0

Method: System.Void set_preserveMeshAssetOnDestroy(System.Boolean value)

Disassembly:
	0x03916930 LDP X8, X2, [X0]
	0x03916934 MOV X0, X19
	0x03916938 MOV W1, W25

ISIL:
	001 And W8, W1, 1
	002 Move [X0+160], W8
	003 Return 

Method: System.Boolean HasArrays(UnityEngine.ProBuilder.MeshArrays channels)

Disassembly:
	0x039122BC MOV X23, X31
	0x039122C0 TBZ X0, 0x0, 0x39122DC
	0x039122C4 MOV X0, X26
	0x039122C8 BL 0x3912CAC
	0x039122CC CBZ X0, 0x3912750
	0x039122D0 MOV X1, X31
	0x039122D4 BL 0x3C1816C
	0x039122D8 MOV X23, X0
	0x039122DC STR W27, [X31 + 0x18]
	0x039122E0 STR X25, [X31 + 0x48]
	0x039122E4 ADRP X25, 0x83C000
	0x039122E8 LDR X25, [X25 + 0x8]
	0x039122EC ADRP X28, 0x83C000
	0x039122F0 LDR X0, [X25]
	0x039122F4 LDR X28, [X28 + 0x10]
	0x039122F8 BL 0x1C16F10
	0x039122FC LDR X1, [X28]
	0x03912300 MOV X27, X0
	0x03912304 BL 0x30CE5F4
	0x03912308 LDR X0, [X25]
	0x0391230C BL 0x1C16F10
	0x03912310 LDR X1, [X28]
	0x03912314 MOV X25, X0
	0x03912318 BL 0x30CE5F4
	0x0391231C MOVZ W1, 0x2
	0x03912320 MOV X0, X26
	0x03912324 MOV X2, X27
	0x03912328 STR X27, [X31 + 0x10]
	0x0391232C BL 0x39114F4
	0x03912330 MOVZ W1, 0x3
	0x03912334 MOV X0, X26
	0x03912338 MOV X2, X25
	0x0391233C STR X25, [X31 + 0x8]
	0x03912340 BL 0x39114F4
	0x03912344 CBZ X24, 0x391235C
	0x03912348 LDR W8, [X24 + 0x18]
	0x0391234C CMP W29, W8
	0x03912350 CSET W8, EQ
	0x03912354 STR W8, [X31 + 0x40]
	0x03912358 B 0x3912360
	0x0391235C STR W31, [X31 + 0x40]
	0x03912360 LDR X28, [X31 + 0x48]
	0x03912364 LDR W9, [X31 + 0x18]
	0x03912368 CBZ X28, 0x391237C
	0x0391236C LDR W8, [X28 + 0x18]
	0x03912370 CMP W29, W8
	0x03912374 CSET W8, NE
	0x03912378 B 0x3912380
	0x0391237C MOVZ W8, 0x1
	0x03912380 STR W8, [X31 + 0x3C]
	0x03912384 CBZ X22, 0x3912398
	0x03912388 LDR W8, [X22 + 0x18]
	0x0391238C CMP W29, W8
	0x03912390 CSET W8, NE
	0x03912394 B 0x391239C
	0x03912398 MOVZ W8, 0x1
	0x0391239C STR W8, [X31 + 0x38]
	0x039123A0 CBZ X21, 0x39123B4
	0x039123A4 LDR W8, [X21 + 0x18]
	0x039123A8 CMP W29, W8
	0x039123AC CSET W8, NE
	0x039123B0 B 0x39123B8
	0x039123B4 MOVZ W8, 0x1
	0x039123B8 STR W8, [X31 + 0x34]
	0x039123BC CBZ X19, 0x39123D0
	0x039123C0 LDR W8, [X19 + 0x18]
	0x039123C4 CMP W29, W8
	0x039123C8 CSET W8, NE
	0x039123CC B 0x39123D4
	0x039123D0 MOVZ W8, 0x1
	0x039123D4 STR W8, [X31 + 0x30]
	0x039123D8 CBZ X23, 0x39123EC
	0x039123DC LDR W8, [X23 + 0x18]
	0x039123E0 CMP W29, W8
	0x039123E4 CSET W8, NE
	0x039123E8 B 0x39123F0
	0x039123EC MOVZ W8, 0x1
	0x039123F0 STR W8, [X31 + 0x2C]
	0x039123F4 LDR X8, [X31 + 0x10]
	0x039123F8 CBZ X8, 0x3912750
	0x039123FC LDR X8, [X31 + 0x8]
	0x03912400 CBZ X8, 0x3912750
	0x03912404 CMP W9, 0x1
	0x03912408 B.LT 0x3912728
	0x0391240C LDR X8, [X31 + 0x10]
	0x03912410 MOV X26, X31
	0x03912414 LDR W10, [X8 + 0x18]
	0x03912418 LDR X8, [X31 + 0x8]
	0x0391241C LDR W8, [X8 + 0x18]
	0x03912420 STP W8, W10, [X31 + 0x24]
	0x03912424 MOV W8, W9
	0x03912428 STR X8, [X31 + 0x18]
	0x0391242C ADRP X8, 0x83C000
	0x03912430 LDR X8, [X8 + 0x20]
	0x03912434 LDR X0, [X8]
	0x03912438 BL 0x1C16F10
	0x0391243C MOV X1, X31
	0x03912440 MOV X27, X0
	0x03912444 BL 0x393DC14
	0x03912448 CBZ X20, 0x3912750
	0x0391244C LDR W8, [X20 + 0x18]
	0x03912450 CMP X26, X8
	0x03912454 B.CS 0x391274C
	0x03912458 LDR W8, [X31 + 0x44]
	0x0391245C ADD X25, X20, X26, 0x3, LSL
	0x03912460 STR X27, [X25 + 0x20]!
	0x03912464 TBZ X8, 0x0, 0x3912470
	0x03912468 MOV W27, W26
	0x0391246C B 0x39124DC
	0x03912470 LDR X27, [X31]
	0x03912474 ADRP X10, 0x809000
	0x03912478 LDR X8, [X27]
	0x0391247C LDRH W9, [X8 + 0x12E]
	0x03912480 LDR X10, [X10 + 0x7A8]
	0x03912484 LDR X1, [X10]
	0x03912488 CBZ X9, 0x39124AC
	0x0391248C LDR X10, [X8 + 0xB0]
	0x03912490 ADD X10, X10, 0x8
	0x03912494 LDUR X11, [X10 - 0x8]
	0x03912498 CMP X11, X1
	0x0391249C B.EQ 0x39124BC
	0x039124A0 SUBS X9, X9, 0x1
	0x039124A4 ADD X10, X10, 0x10
	0x039124A8 B.NE 0x3912494
	0x039124AC MOV X0, X27
	0x039124B0 MOV W2, W31
	0x039124B4 BL 0x1C5C788
	0x039124B8 B 0x39124C8
	0x039124BC LDRSW X9, [X10]
	0x039124C0 ADD X8, X8, X9, 0x4, LSL
	0x039124C4 ADD X0, X8, 0x138
	0x039124C8 LDP X8, X2, [X0]
	0x039124CC MOV X0, X27
	0x039124D0 MOV W1, W26
	0x039124D4 BLR X8
	0x039124D8 MOV W27, W0
	0x039124DC LDR W8, [X31 + 0x40]
	0x039124E0 CBZ W8, 0x3912524
	0x039124E4 LDR W8, [X20 + 0x18]
	0x039124E8 CMP X26, X8
	0x039124EC B.CS 0x391274C
	0x039124F0 CBZ X24, 0x3912750

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xAD0000
	006 Move W8, [X21+2115]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x83D000
	014 Move X0, [X0+48]
	015 Call 0x1C17CF4
	016 Move X0, 0x7E2000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2115], W8
	021 Move X9, [X19+88]
	022 Compare X9, 0
	023 JumpIfEqual {25}
	024 Move W8, [X9+24]
	025 Move W8, W31
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSET not yet implemented."
	028 And W9, W20, W9
	029 Move TEMP, X20
	030 And TEMP, TEMP, 64
	031 Compare TEMP, 64
	032 JumpIfEqual {34}
	033 Move W10, W31
	034 Move X10, [X19+128]
	035 And W11, W20, 64
	036 And W9, W9, W11
	037 Compare X10, 0
	038 JumpIfEqual {42}
	039 Move W10, [X10+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction CSET not yet implemented."
	042 Move W10, 1
	043 Or W9, W10, W9
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CSET not yet implemented."
	046 Move TEMP, X20
	047 And TEMP, TEMP, 2
	048 Compare TEMP, 2
	049 JumpIfEqual {51}
	050 Move W10, W31
	051 Move X10, [X19+96]
	052 And W11, W20, 2
	053 And W9, W9, W11
	054 Compare X10, 0
	055 JumpIfEqual {59}
	056 Move W10, [X10+24]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 NotImplemented "Instruction CSET not yet implemented."
	059 Move W10, 1
	060 Or W9, W10, W9
	061 NotImplemented "Instruction CMP not yet implemented."
	062 NotImplemented "Instruction CSET not yet implemented."
	063 Move TEMP, X20
	064 And TEMP, TEMP, 8
	065 Compare TEMP, 8
	066 JumpIfEqual {68}
	067 Move W10, W31
	068 Move X10, [X19+104]
	069 And W11, W20, 8
	070 And W9, W9, W11
	071 Compare X10, 0
	072 JumpIfEqual {76}
	073 Move W10, [X10+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction CSET not yet implemented."
	076 Move W10, 1
	077 Or W9, W10, W9
	078 NotImplemented "Instruction CMP not yet implemented."
	079 NotImplemented "Instruction CSET not yet implemented."
	080 Move TEMP, X20
	081 And TEMP, TEMP, 16
	082 Compare TEMP, 16
	083 JumpIfEqual {85}
	084 Move W10, W31
	085 Move X10, [X19+112]
	086 And W11, W20, 16
	087 And W9, W9, W11
	088 Compare X10, 0
	089 JumpIfEqual {93}
	090 Move W10, [X10+24]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 NotImplemented "Instruction CSET not yet implemented."
	093 Move W10, 1
	094 Or W9, W10, W9
	095 NotImplemented "Instruction CMP not yet implemented."
	096 NotImplemented "Instruction CSET not yet implemented."
	097 Move TEMP, X20
	098 And TEMP, TEMP, 32
	099 Compare TEMP, 32
	100 JumpIfEqual {102}
	101 Move W10, W31
	102 Move X10, [X19+136]
	103 And W11, W20, 32
	104 And W9, W9, W11
	105 Compare X10, 0
	106 JumpIfEqual {110}
	107 Move W10, [X10+24]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 NotImplemented "Instruction CSET not yet implemented."
	110 Move W10, 1
	111 Or W9, W10, W9
	112 NotImplemented "Instruction CMP not yet implemented."
	113 NotImplemented "Instruction CSET not yet implemented."
	114 Move TEMP, X20
	115 And TEMP, TEMP, 128
	116 Compare TEMP, 128
	117 JumpIfEqual {119}
	118 Move W8, W31
	119 Move X10, [X19+120]
	120 And W11, W20, 128
	121 And W9, W9, W11
	122 Compare X10, 0
	123 JumpIfEqual {127}
	124 Move W10, [X10+24]
	125 NotImplemented "Instruction CMP not yet implemented."
	126 NotImplemented "Instruction CSET not yet implemented."
	127 Move W8, 1
	128 Or W21, W8, W9
	129 Move TEMP, X20
	130 And TEMP, TEMP, 4
	131 Compare TEMP, 4
	132 JumpIfNotEqual {162}
	133 Move X0, X19
	134 Call ProBuilderMesh.get_mesh, X0
	135 Move X8, 0x7E2000
	136 Move X8, [X8+1432]
	137 Move X20, X0
	138 Move X8, [X8]
	139 Move W9, [X8+224]
	140 Compare W9, 0
	141 JumpIfNotEqual {144}
	142 Move X0, X8
	143 Call 0x1C17DFC
	144 Move X0, X20
	145 Move X1, X31
	146 Move X2, X31
	147 Call Object.op_Inequality, X0, X1
	148 Move TEMP, X0
	149 And TEMP, TEMP, 1
	150 Compare TEMP, 1
	151 JumpIfNotEqual {162}
	152 Move X0, X19
	153 Call ProBuilderMesh.get_mesh, X0
	154 Compare X0, 0
	155 JumpIfEqual {169}
	156 Move W1, 5
	157 Move X2, X31
	158 Call Mesh.HasVertexAttribute, X0, X1
	159 NotImplemented "Instruction ORN not yet implemented."
	160 And W8, W8, 1
	161 Or W21, W21, W8
	162 Move X20, [X31+16]
	163 Move X19, [X31+24]
	164 NotImplemented "Instruction CMP not yet implemented."
	165 NotImplemented "Instruction CSET not yet implemented."
	166 Move X30, [X31+32]
	167 Move X21, [X31+40]
	168 Return X0
	169 Call 0x1C17F20

Method: UnityEngine.ProBuilder.Face[] get_facesInternal()

Disassembly:
	0x0391693C BLR X8
	0x03916940 CBZ X29, 0x3916CEC

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_facesInternal(UnityEngine.ProBuilder.Face[] value)

Disassembly:
	0x03916944 LDR W8, [X29 + 0x18]
	0x03916948 CMP X25, X8

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Face> get_faces()

Disassembly:
	0x0391694C B.CS 0x3916CF0
	0x03916950 CBZ X0, 0x3916CEC
	0x03916954 ADD X8, X29, X25, 0x4, LSL
	0x03916958 LDP S2, S3, [X8 + 0x28]
	0x0391695C LDP S0, S1, [X8 + 0x20]
	0x03916960 MOV X1, X31
	0x03916964 BL 0x393D8FC
	0x03916968 LDR W8, [X31 + 0x2C]
	0x0391696C TBNZ X8, 0x0, 0x39169F8
	0x03916970 LDR X8, [X19]
	0x03916974 LDR X1, [X24]
	0x03916978 LDRH W9, [X8 + 0x12E]
	0x0391697C CBZ X9, 0x39169A0
	0x03916980 LDR X10, [X8 + 0xB0]
	0x03916984 ADD X10, X10, 0x8
	0x03916988 LDUR X11, [X10 - 0x8]
	0x0391698C CMP X11, X1
	0x03916990 B.EQ 0x39169B0
	0x03916994 SUBS X9, X9, 0x1
	0x03916998 ADD X10, X10, 0x10
	0x0391699C B.NE 0x3916988
	0x039169A0 MOV X0, X19
	0x039169A4 MOV W2, W31
	0x039169A8 BL 0x1C5C788
	0x039169AC B 0x39169BC
	0x039169B0 LDRSW X9, [X10]
	0x039169B4 ADD X8, X8, X9, 0x4, LSL
	0x039169B8 ADD X0, X8, 0x138
	0x039169BC LDP X8, X2, [X0]
	0x039169C0 MOV X0, X19
	0x039169C4 MOV W1, W25

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xACC000
	007 Move X21, 0x839000
	008 Move X20, 0x839000
	009 Move W8, [X22+2116]
	010 Move X21, [X21+976]
	011 Move X20, [X20+984]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x839000
	018 Move X0, [X0+984]
	019 Call 0x1C17CF4
	020 Move X0, 0x839000
	021 Move X0, [X0+976]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2116], W8
	025 Move X0, [X21]
	026 Move X19, [X19+40]
	027 Call 0x1C17F10
	028 Move X2, [X20]
	029 Move X1, X19
	030 Move X20, X0
	031 Call ReadOnlyCollection`1<Object>..ctor, X0, X1
	032 Move X0, X20
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Return X0

Method: System.Void set_faces(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Face> value)

Disassembly:
	0x039169C8 BLR X8
	0x039169CC CBZ X21, 0x3916CEC
	0x039169D0 LDR W8, [X21 + 0x18]
	0x039169D4 CMP X25, X8
	0x039169D8 B.CS 0x3916CF0
	0x039169DC CBZ X0, 0x3916CEC
	0x039169E0 MOVZ W8, 0xC
	0x039169E4 MADD X8, X25, X8, X21
	0x039169E8 LDP S1, S2, [X8 + 0x24]
	0x039169EC LDR V0, [X8 + 0x20]
	0x039169F0 MOV X1, X31
	0x039169F4 BL 0x393D960
	0x039169F8 LDR W8, [X31 + 0x28]
	0x039169FC TBNZ X8, 0x0, 0x3916A84
	0x03916A00 LDR X8, [X19]
	0x03916A04 LDR X1, [X24]
	0x03916A08 LDRH W9, [X8 + 0x12E]
	0x03916A0C CBZ X9, 0x3916A30
	0x03916A10 LDR X10, [X8 + 0xB0]
	0x03916A14 ADD X10, X10, 0x8
	0x03916A18 LDUR X11, [X10 - 0x8]
	0x03916A1C CMP X11, X1
	0x03916A20 B.EQ 0x3916A40
	0x03916A24 SUBS X9, X9, 0x1
	0x03916A28 ADD X10, X10, 0x10
	0x03916A2C B.NE 0x3916A18
	0x03916A30 MOV X0, X19
	0x03916A34 MOV W2, W31
	0x03916A38 BL 0x1C5C788
	0x03916A3C B 0x3916A4C
	0x03916A40 LDRSW X9, [X10]
	0x03916A44 ADD X8, X8, X9, 0x4, LSL
	0x03916A48 ADD X0, X8, 0x138
	0x03916A4C LDP X8, X2, [X0]
	0x03916A50 MOV X0, X19
	0x03916A54 MOV W1, W25
	0x03916A58 BLR X8
	0x03916A5C CBZ X20, 0x3916CEC
	0x03916A60 LDR W8, [X20 + 0x18]
	0x03916A64 CMP X25, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xACC000
	006 Move W8, [X21+2117]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x839000
	014 Move X0, [X0+992]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2117], W8
	018 Compare X20, 0
	019 JumpIfEqual {31}
	020 Move X8, 0x839000
	021 Move X8, [X8+992]
	022 Move X0, X20
	023 Move X1, [X8]
	024 Call Enumerable.ToArray, X0
	025 Move [X19+40], X0
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return 
	031 Move X0, 0x7E3000
	032 Move X0, [X0+1320]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X19, X0
	036 Move X0, 0x7E8000
	037 Move X0, [X0+3784]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X19
	041 Move X2, X31
	042 Call ArgumentNullException..ctor, X0, X1
	043 Move X0, 0x839000
	044 Move X0, [X0+1000]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X19
	048 Call 0x1C17DEC

Method: System.Void InvalidateSharedVertexLookup()

Disassembly:
	0x03916A68 B.CS 0x3916CF0
	0x03916A6C CBZ X0, 0x3916CEC
	0x03916A70 ADD X8, X20, X25, 0x4, LSL
	0x03916A74 LDP S2, S3, [X8 + 0x28]
	0x03916A78 LDP S0, S1, [X8 + 0x20]
	0x03916A7C MOV X1, X31
	0x03916A80 BL 0x393D9C4
	0x03916A84 LDR W8, [X31 + 0x24]
	0x03916A88 TBNZ X8, 0x0, 0x3916B0C
	0x03916A8C LDR X8, [X19]
	0x03916A90 LDR X1, [X24]
	0x03916A94 LDRH W9, [X8 + 0x12E]
	0x03916A98 CBZ X9, 0x3916ABC
	0x03916A9C LDR X10, [X8 + 0xB0]
	0x03916AA0 ADD X10, X10, 0x8
	0x03916AA4 LDUR X11, [X10 - 0x8]
	0x03916AA8 CMP X11, X1
	0x03916AAC B.EQ 0x3916ACC
	0x03916AB0 SUBS X9, X9, 0x1
	0x03916AB4 ADD X10, X10, 0x10
	0x03916AB8 B.NE 0x3916AA4
	0x03916ABC MOV X0, X19
	0x03916AC0 MOV W2, W31
	0x03916AC4 BL 0x1C5C788
	0x03916AC8 B 0x3916AD8
	0x03916ACC LDRSW X9, [X10]
	0x03916AD0 ADD X8, X8, X9, 0x4, LSL
	0x03916AD4 ADD X0, X8, 0x138
	0x03916AD8 LDP X8, X2, [X0]
	0x03916ADC MOV X0, X19
	0x03916AE0 MOV W1, W25
	0x03916AE4 BLR X8
	0x03916AE8 CBZ X23, 0x3916CEC
	0x03916AEC LDR W8, [X23 + 0x18]
	0x03916AF0 CMP X25, X8
	0x03916AF4 B.CS 0x3916CF0
	0x03916AF8 CBZ X0, 0x3916CEC
	0x03916AFC ADD X8, X23, X25, 0x3, LSL
	0x03916B00 LDP S0, S1, [X8 + 0x20]
	0x03916B04 MOV X1, X31
	0x03916B08 BL 0x393DA24
	0x03916B0C LDR W8, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xACC000
	005 Move W8, [X20+2118]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0x808000
	012 Move X0, [X0+2256]
	013 Call 0x1C17CF4
	014 Move X0, 0x7E8000
	015 Move X0, [X0+2192]
	016 Call 0x1C17CF4
	017 Move X0, 0x7E8000
	018 Move X0, [X0+2184]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2118], W8
	022 Move X20, [X19+64]
	023 Compare X20, 0
	024 JumpIfNotEqual {37}
	025 Move X8, 0x7E8000
	026 Move X8, [X8+2184]
	027 Move X0, [X8]
	028 Call 0x1C17F10
	029 Move X8, 0x7E8000
	030 Move X8, [X8+2192]
	031 Move X20, X0
	032 Move X1, [X8]
	033 Call Dictionary`2<Int32, Int32>..ctor, X0
	034 Move [X19+64], X20
	035 Compare X20, 0
	036 JumpIfEqual {49}
	037 Move X8, 0x808000
	038 Move X8, [X8+2256]
	039 Move X0, X20
	040 Move X1, [X8]
	041 Call Dictionary`2<Int32, Int32>.Clear, X0
	042 Move W8, [X19+56]
	043 And W8, W8, 254
	044 Move [X19+56], W8
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Return 
	049 Call 0x1C17F20

Method: System.Void InvalidateSharedTextureLookup()

Disassembly:
	0x03916B10 TBNZ X8, 0x0, 0x3916B94
	0x03916B14 LDR X8, [X19]
	0x03916B18 LDR X1, [X24]
	0x03916B1C LDRH W9, [X8 + 0x12E]
	0x03916B20 CBZ X9, 0x3916B44
	0x03916B24 LDR X10, [X8 + 0xB0]
	0x03916B28 ADD X10, X10, 0x8
	0x03916B2C LDUR X11, [X10 - 0x8]
	0x03916B30 CMP X11, X1
	0x03916B34 B.EQ 0x3916B54
	0x03916B38 SUBS X9, X9, 0x1
	0x03916B3C ADD X10, X10, 0x10
	0x03916B40 B.NE 0x3916B2C
	0x03916B44 MOV X0, X19
	0x03916B48 MOV W2, W31
	0x03916B4C BL 0x1C5C788
	0x03916B50 B 0x3916B60
	0x03916B54 LDRSW X9, [X10]
	0x03916B58 ADD X8, X8, X9, 0x4, LSL
	0x03916B5C ADD X0, X8, 0x138
	0x03916B60 LDP X8, X2, [X0]
	0x03916B64 MOV X0, X19
	0x03916B68 MOV W1, W25
	0x03916B6C BLR X8
	0x03916B70 CBZ X22, 0x3916CEC
	0x03916B74 LDR W8, [X22 + 0x18]
	0x03916B78 CMP X25, X8
	0x03916B7C B.CS 0x3916CF0
	0x03916B80 CBZ X0, 0x3916CEC
	0x03916B84 ADD X8, X22, X25, 0x3, LSL
	0x03916B88 LDP S0, S1, [X8 + 0x20]
	0x03916B8C MOV X1, X31
	0x03916B90 BL 0x393DA80
	0x03916B94 LDR W8, [X31 + 0x1C]
	0x03916B98 CMP W8, W27
	0x03916B9C B.NE 0x3916C28
	0x03916BA0 LDR X8, [X19]
	0x03916BA4 LDR X1, [X24]
	0x03916BA8 LDRH W9, [X8 + 0x12E]
	0x03916BAC CBZ X9, 0x3916BD0
	0x03916BB0 LDR X10, [X8 + 0xB0]
	0x03916BB4 ADD X10, X10, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xACC000
	005 Move W8, [X20+2119]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0x808000
	012 Move X0, [X0+2256]
	013 Call 0x1C17CF4
	014 Move X0, 0x7E8000
	015 Move X0, [X0+2192]
	016 Call 0x1C17CF4
	017 Move X0, 0x7E8000
	018 Move X0, [X0+2184]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2119], W8
	022 Move X20, [X19+80]
	023 Compare X20, 0
	024 JumpIfNotEqual {37}
	025 Move X8, 0x7E8000
	026 Move X8, [X8+2184]
	027 Move X0, [X8]
	028 Call 0x1C17F10
	029 Move X8, 0x7E8000
	030 Move X8, [X8+2192]
	031 Move X20, X0
	032 Move X1, [X8]
	033 Call Dictionary`2<Int32, Int32>..ctor, X0
	034 Move [X19+80], X20
	035 Compare X20, 0
	036 JumpIfEqual {49}
	037 Move X8, 0x808000
	038 Move X8, [X8+2256]
	039 Move X0, X20
	040 Move X1, [X8]
	041 Call Dictionary`2<Int32, Int32>.Clear, X0
	042 Move W8, [X19+56]
	043 And W8, W8, 0xFFFFFFFD
	044 Move [X19+56], W8
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Return 
	049 Call 0x1C17F20

Method: System.Void InvalidateFaces()

Disassembly:
	0x03916BB8 LDUR X11, [X10 - 0x8]
	0x03916BBC CMP X11, X1
	0x03916BC0 B.EQ 0x3916BE0
	0x03916BC4 SUBS X9, X9, 0x1
	0x03916BC8 ADD X10, X10, 0x10
	0x03916BCC B.NE 0x3916BB8
	0x03916BD0 MOV X0, X19
	0x03916BD4 MOV W2, W31
	0x03916BD8 BL 0x1C5C788
	0x03916BDC B 0x3916BEC
	0x03916BE0 LDRSW X9, [X10]
	0x03916BE4 ADD X8, X8, X9, 0x4, LSL
	0x03916BE8 ADD X0, X8, 0x138
	0x03916BEC LDP X8, X2, [X0]
	0x03916BF0 MOV X0, X19
	0x03916BF4 MOV W1, W25
	0x03916BF8 BLR X8
	0x03916BFC ADRP X8, 0x838000
	0x03916C00 LDR X8, [X8 + 0x38]
	0x03916C04 MOV X26, X0
	0x03916C08 LDR X0, [X31 + 0x8]
	0x03916C0C MOV W1, W25
	0x03916C10 LDR X2, [X8]
	0x03916C14 BL 0x30CEAFC
	0x03916C18 CBZ X26, 0x3916CEC
	0x03916C1C MOV X0, X26
	0x03916C20 MOV X1, X31
	0x03916C24 BL 0x393DAE0
	0x03916C28 LDR W8, [X31 + 0x18]
	0x03916C2C CMP W8, W27
	0x03916C30 B.NE 0x3916CBC
	0x03916C34 LDR X8, [X19]
	0x03916C38 LDR X1, [X24]
	0x03916C3C LDRH W9, [X8 + 0x12E]
	0x03916C40 CBZ X9, 0x3916C64
	0x03916C44 LDR X10, [X8 + 0xB0]
	0x03916C48 ADD X10, X10, 0x8
	0x03916C4C LDUR X11, [X10 - 0x8]
	0x03916C50 CMP X11, X1
	0x03916C54 B.EQ 0x3916C74
	0x03916C58 SUBS X9, X9, 0x1
	0x03916C5C ADD X10, X10, 0x10
	0x03916C60 B.NE 0x3916C4C
	0x03916C64 MOV X0, X19
	0x03916C68 MOV W2, W31
	0x03916C6C BL 0x1C5C788
	0x03916C70 B 0x3916C80
	0x03916C74 LDRSW X9, [X10]
	0x03916C78 ADD X8, X8, X9, 0x4, LSL
	0x03916C7C ADD X0, X8, 0x138
	0x03916C80 LDP X8, X2, [X0]
	0x03916C84 MOV X0, X19
	0x03916C88 MOV W1, W25
	0x03916C8C BLR X8
	0x03916C90 ADRP X8, 0x838000
	0x03916C94 LDR X8, [X8 + 0x38]
	0x03916C98 MOV X26, X0
	0x03916C9C LDR X0, [X31]
	0x03916CA0 MOV W1, W25
	0x03916CA4 LDR X2, [X8]
	0x03916CA8 BL 0x30CEAFC
	0x03916CAC CBZ X26, 0x3916CEC
	0x03916CB0 MOV X0, X26
	0x03916CB4 MOV X1, X31
	0x03916CB8 BL 0x393DB44
	0x03916CBC LDR X8, [X31 + 0x10]
	0x03916CC0 ADD X25, X25, 0x1
	0x03916CC4 CMP X25, X8
	0x03916CC8 B.NE 0x39167C8
	0x03916CCC LDP X20, X19, [X31 + 0x90]
	0x03916CD0 LDP X22, X21, [X31 + 0x80]
	0x03916CD4 LDP X24, X23, [X31 + 0x70]
	0x03916CD8 LDP X26, X25, [X31 + 0x60]
	0x03916CDC LDP X28, X27, [X31 + 0x50]
	0x03916CE0 LDP X29, X30, [X31 + 0x40]
	0x03916CE4 ADD X31, X31, 0xA0
	0x03916CE8 RET
	0x03916CEC BL 0x1C16F20
	0x03916CF0 BL 0x1C16F28
	0x03916CF4 SUB X31, X31, 0x80
	0x03916CF8 STR X30, [X31 + 0x50]
	0x03916CFC STP X22, X21, [X31 + 0x60]
	0x03916D00 STP X20, X19, [X31 + 0x70]
	0x03916D04 ADRP X20, 0xACB000
	0x03916D08 LDRB W8, [X20 + 0x851]
	0x03916D0C MOV W21, W2
	0x03916D10 MOV X22, X1
	0x03916D14 MOV X19, X0
	0x03916D18 TBNZ X8, 0x0, 0x3916D30
	0x03916D1C ADRP X0, 0x838000
	0x03916D20 LDR X0, [X0 + 0x448]
	0x03916D24 BL 0x1C16CF4
	0x03916D28 MOVZ W8, 0x1
	0x03916D2C STRB W8, [X20 + 0x851]
	0x03916D30 STR X31, [X31 + 0x58]
	0x03916D34 STP X31, X31, [X31 + 0x40]
	0x03916D38 STP X31, X31, [X31 + 0x30]
	0x03916D3C STP X31, X31, [X31 + 0x20]
	0x03916D40 STR X31, [X31 + 0x18]
	0x03916D44 CBZ X22, 0x3916F74
	0x03916D48 ADRP X8, 0x838000
	0x03916D4C LDR X8, [X8 + 0x448]
	0x03916D50 MOV X0, X22
	0x03916D54 LDR X1, [X8]
	0x03916D58 BL 0x21C4D84
	0x03916D5C MOV X1, X31
	0x03916D60 MOV X2, X31
	0x03916D64 MOV X20, X0
	0x03916D68 BL 0x393E0FC
	0x03916D6C TBNZ X0, 0x0, 0x3916F58
	0x03916D70 CBZ X20, 0x3916FBC
	0x03916D74 MOVZ W1, 0x1
	0x03916D78 MOV X0, X20
	0x03916D7C MOV X2, X31
	0x03916D80 BL 0x393DBA4
	0x03916D84 TBZ X0, 0x0, 0x3916F58
	0x03916D88 ADD X8, X31, 0x18
	0x03916D8C ADD X1, X31, 0x58
	0x03916D90 ADD X2, X31, 0x48
	0x03916D94 ADD X3, X31, 0x30
	0x03916D98 ADD X4, X31, 0x40
	0x03916D9C ADD X5, X31, 0x38
	0x03916DA0 ADD X6, X31, 0x28
	0x03916DA4 ADD X7, X31, 0x20
	0x03916DA8 MOV X0, X22
	0x03916DAC STP X8, X31, [X31]
	0x03916DB0 BL 0x393EE30
	0x03916DB4 LDR X10, [X31 + 0x48]
	0x03916DB8 LDR X8, [X31 + 0x40]
	0x03916DBC LDR X9, [X31 + 0x58]
	0x03916DC0 STP X8, X10, [X19 + 0x80]
	0x03916DC4 LDR X8, [X31 + 0x30]
	0x03916DC8 LDR X10, [X31 + 0x38]
	0x03916DCC STP X9, X8, [X19 + 0x58]
	0x03916DD0 LDR X8, [X31 + 0x20]
	0x03916DD4 STR X8, [X19 + 0x68]
	0x03916DD8 LDR X8, [X31 + 0x18]
	0x03916DDC STP X8, X10, [X19 + 0x70]
	0x03916DE0 TBZ X21, 0x0, 0x3916F60
	0x03916DE4 MOV X0, X19
	0x03916DE8 BL 0x3912CAC
	0x03916DEC MOV X21, X0
	0x03916DF0 MOVZ W1, 0x1
	0x03916DF4 MOV X0, X20
	0x03916DF8 MOV X2, X31
	0x03916DFC BL 0x393DBA4
	0x03916E00 TBZ X0, 0x0, 0x3916E18
	0x03916E04 CBZ X21, 0x3916FBC
	0x03916E08 LDR X1, [X31 + 0x58]
	0x03916E0C MOV X0, X21
	0x03916E10 MOV X2, X31
	0x03916E14 BL 0x3C17F08
	0x03916E18 MOVZ W1, 0x20
	0x03916E1C MOV X0, X20
	0x03916E20 MOV X2, X31
	0x03916E24 BL 0x393DBA4
	0x03916E28 TBZ X0, 0x0, 0x3916E40
	0x03916E2C CBZ X21, 0x3916FBC
	0x03916E30 LDR X1, [X31 + 0x48]
	0x03916E34 MOV X0, X21
	0x03916E38 MOV X2, X31
	0x03916E3C BL 0x3C18264
	0x03916E40 MOVZ W1, 0x2
	0x03916E44 MOV X0, X20
	0x03916E48 MOV X2, X31
	0x03916E4C BL 0x393DBA4
	0x03916E50 TBZ X0, 0x0, 0x3916E68
	0x03916E54 CBZ X21, 0x3916FBC
	0x03916E58 LDR X1, [X31 + 0x30]
	0x03916E5C MOV X0, X21
	0x03916E60 MOV X2, X31
	0x03916E64 BL 0x3C1810C
	0x03916E68 MOVZ W1, 0x40
	0x03916E6C MOV X0, X20
	0x03916E70 MOV X2, X31
	0x03916E74 BL 0x393DBA4
	0x03916E78 TBZ X0, 0x0, 0x3916E90
	0x03916E7C CBZ X21, 0x3916FBC
	0x03916E80 LDR X1, [X31 + 0x40]
	0x03916E84 MOV X0, X21
	0x03916E88 MOV X2, X31
	0x03916E8C BL 0x3C17FB4
	0x03916E90 MOVZ W1, 0x80
	0x03916E94 MOV X0, X20
	0x03916E98 MOV X2, X31
	0x03916E9C BL 0x393DBA4
	0x03916EA0 TBZ X0, 0x0, 0x3916EB8
	0x03916EA4 CBZ X21, 0x3916FBC
	0x03916EA8 LDR X1, [X31 + 0x38]
	0x03916EAC MOV X0, X21
	0x03916EB0 MOV X2, X31
	0x03916EB4 BL 0x3C18060
	0x03916EB8 MOVZ W1, 0x4
	0x03916EBC MOV X0, X20
	0x03916EC0 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xACC000
	006 Move W8, [X20+2120]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {29}
	012 Move X0, 0x839000
	013 Move X0, [X0+1008]
	014 Call 0x1C17CF4
	015 Move X0, 0x7DE000
	016 Move X0, [X0+3584]
	017 Call 0x1C17CF4
	018 Move X0, 0x838000
	019 Move X0, [X0+3504]
	020 Call 0x1C17CF4
	021 Move X0, 0x838000
	022 Move X0, [X0+3512]
	023 Call 0x1C17CF4
	024 Move X0, 0x7DE000
	025 Move X0, [X0+3608]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+2120], W8
	029 Move X8, [X19+40]
	030 Compare X8, 0
	031 JumpIfEqual {53}
	032 Move X0, X19
	033 Call ProBuilderMesh.get_faces, X0
	034 Compare X0, 0
	035 JumpIfEqual {157}
	036 Move X10, 0x838000
	037 Move X8, [X0]
	038 Move X10, [X10+3504]
	039 Move X19, X0
	040 NotImplemented "Instruction LDRH not yet implemented."
	041 Move X1, [X10]
	042 Compare X9, 0
	043 JumpIfEqual {50}
	044 Move X10, [X8+176]
	045 Add X10, X10, 8
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Subtract X9, X9, 1
	049 Add X10, X10, 16
	050 Move X0, X19
	051 Move W2, W31
	052 Call 0x1C5D788
	053 Move X8, 0x839000
	054 Move X8, [X8+1008]
	055 Move W1, W31
	056 Move X0, [X8]
	057 Call 0x1C17D6C
	058 Move [X19+40], X0
	059 NotImplemented "Instruction LDRSW not yet implemented."
	060 Add X8, X8, X9
	061 Add X0, X8, 312
	062 Move X8, [X0]
	063 Move X1, [X0+8]
	064 Move X0, X19
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Move X19, X0
	067 Compare X0, 0
	068 JumpIfEqual {158}
	069 Move X20, 0x7DE000
	070 Move X21, 0x838000
	071 Move X20, [X20+3608]
	072 Move X21, [X21+3512]
	073 Move X8, [X19]
	074 Move X1, [X20]
	075 NotImplemented "Instruction LDRH not yet implemented."
	076 Compare X9, 0
	077 JumpIfEqual {84}
	078 Move X10, [X8+176]
	079 Add X10, X10, 8
	080 NotImplemented "Instruction LDUR not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Subtract X9, X9, 1
	083 Add X10, X10, 16
	084 Move X0, X19
	085 Move W2, W31
	086 Call 0x1C5D788
	087 NotImplemented "Instruction LDRSW not yet implemented."
	088 Add X8, X8, X9
	089 Add X0, X8, 312
	090 Move X8, [X0]
	091 Move X1, [X0+8]
	092 Move X0, X19
	093 NotImplemented "Instruction BLR not yet implemented."
	094 Move TEMP, X0
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfNotEqual {123}
	098 Move X8, [X19]
	099 Move X1, [X21]
	100 NotImplemented "Instruction LDRH not yet implemented."
	101 Compare X9, 0
	102 JumpIfEqual {109}
	103 Move X10, [X8+176]
	104 Add X10, X10, 8
	105 NotImplemented "Instruction LDUR not yet implemented."
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Subtract X9, X9, 1
	108 Add X10, X10, 16
	109 Move X0, X19
	110 Move W2, W31
	111 Call 0x1C5D788
	112 NotImplemented "Instruction LDRSW not yet implemented."
	113 Add X8, X8, X9
	114 Add X0, X8, 312
	115 Move X8, [X0]
	116 Move X1, [X0+8]
	117 Move X0, X19
	118 NotImplemented "Instruction BLR not yet implemented."
	119 Compare X0, 0
	120 JumpIfEqual {156}
	121 Move X1, X31
	122 Call Face.InvalidateCache, X0
	123 Move X20, X31
	124 Compare X19, 0
	125 JumpIfEqual {149}
	126 Move X10, 0x7DE000
	127 Move X8, [X19]
	128 Move X10, [X10+3584]
	129 NotImplemented "Instruction LDRH not yet implemented."
	130 Move X1, [X10]
	131 Compare X9, 0
	132 JumpIfEqual {139}
	133 Move X10, [X8+176]
	134 Add X10, X10, 8
	135 NotImplemented "Instruction LDUR not yet implemented."
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Subtract X9, X9, 1
	138 Add X10, X10, 16
	139 Move X0, X19
	140 Move W2, W31
	141 Call 0x1C5D788
	142 NotImplemented "Instruction LDRSW not yet implemented."
	143 Add X8, X8, X9
	144 Add X0, X8, 312
	145 Move X8, [X0]
	146 Move X1, [X0+8]
	147 Move X0, X19
	148 NotImplemented "Instruction BLR not yet implemented."
	149 Compare X20, 0
	150 JumpIfNotEqual {159}
	151 Move X20, [X31+16]
	152 Move X19, [X31+24]
	153 Move X30, [X31+32]
	154 Move X21, [X31+40]
	155 Return 
	156 Call 0x1C17F20
	157 Call 0x1C17F20
	158 Call 0x1C17F20
	159 Move X0, X20
	160 Call 0x1C17F18
	161 Move X21, X0
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move X0, X21
	164 Call 0x3EB2AD0
	165 Move X20, [X0]
	166 Call 0x3EB2AE0
	167 Move X20, X31
	168 Move X21, X0
	169 Compare X19, 0
	170 JumpIfEqual {194}
	171 Move X10, 0x7DE000
	172 Move X8, [X19]
	173 Move X10, [X10+3584]
	174 NotImplemented "Instruction LDRH not yet implemented."
	175 Move X1, [X10]
	176 Compare X9, 0
	177 JumpIfEqual {184}
	178 Move X10, [X8+176]
	179 Add X10, X10, 8
	180 NotImplemented "Instruction LDUR not yet implemented."
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Subtract X9, X9, 1
	183 Add X10, X10, 16
	184 Move X0, X19
	185 Move W2, W31
	186 Call 0x1C5D788
	187 NotImplemented "Instruction LDRSW not yet implemented."
	188 Add X8, X8, X9
	189 Add X0, X8, 312
	190 Move X8, [X0]
	191 Move X1, [X0+8]
	192 Move X0, X19
	193 NotImplemented "Instruction BLR not yet implemented."
	194 Compare X20, 0
	195 JumpIfNotEqual {198}
	196 Move X0, X21
	197 Call 0x1D2D690
	198 Move X0, X20
	199 Call 0x1C17F18
	200 Call 0x1991590

Method: System.Void InvalidateCaches()

Disassembly:
	0x03916EC4 BL 0x393DBA4
	0x03916EC8 TBZ X0, 0x0, 0x3916EE0
	0x03916ECC CBZ X21, 0x3916FBC
	0x03916ED0 LDR X1, [X31 + 0x28]
	0x03916ED4 MOV X0, X21
	0x03916ED8 MOV X2, X31
	0x03916EDC BL 0x3C181B8
	0x03916EE0 MOVZ W1, 0x8
	0x03916EE4 MOV X0, X20
	0x03916EE8 MOV X2, X31
	0x03916EEC BL 0x393DBA4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call ProBuilderMesh.InvalidateSharedVertexLookup, X0
	005 Move X0, X19
	006 Call ProBuilderMesh.InvalidateSharedTextureLookup, X0
	007 Move X0, X19
	008 Call ProBuilderMesh.InvalidateFaces, X0
	009 Move W8, 1
	010 Move [X19+232], W8
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Return 

Method: UnityEngine.ProBuilder.SharedVertex[] get_sharedVerticesInternal()

Disassembly:
	0x03916EF0 TBZ X0, 0x0, 0x3916F0C
	0x03916EF4 CBZ X21, 0x3916FBC

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_sharedVerticesInternal(UnityEngine.ProBuilder.SharedVertex[] value)

Disassembly:
	0x03916EF8 LDR X2, [X31 + 0x20]
	0x03916EFC MOVZ W1, 0x2

ISIL:
	001 Move [X0+48], X1
	002 Call ProBuilderMesh.InvalidateSharedVertexLookup, X0
	003 Return 

Method: System.Collections.Generic.IList`1<UnityEngine.ProBuilder.SharedVertex> get_sharedVertices()

Disassembly:
	0x03916F00 MOV X0, X21
	0x03916F04 MOV X3, X31
	0x03916F08 BL 0x3C18A7C
	0x03916F0C MOVZ W1, 0x10
	0x03916F10 MOV X0, X20
	0x03916F14 MOV X2, X31
	0x03916F18 BL 0x393DBA4
	0x03916F1C TBZ X0, 0x0, 0x3916F38
	0x03916F20 CBZ X21, 0x3916FBC
	0x03916F24 LDR X2, [X31 + 0x18]
	0x03916F28 MOVZ W1, 0x3
	0x03916F2C MOV X0, X21
	0x03916F30 MOV X3, X31
	0x03916F34 BL 0x3C18A7C
	0x03916F38 LDRH W8, [X19 + 0xC8]
	0x03916F3C MOVZ W9, 0x1
	0x03916F40 ADD W10, W8, 0x1
	0x03916F44 ANDS W31, W10, 0x10000
	0x03916F48 CSINC W8, W9, W8, NE
	0x03916F4C STRH W8, [X19 + 0xC8]
	0x03916F50 STRH W8, [X19 + 0xCA]
	0x03916F54 B 0x3916F60
	0x03916F58 MOV X0, X19
	0x03916F5C BL 0x3916FC0
	0x03916F60 LDP X20, X19, [X31 + 0x70]
	0x03916F64 LDP X22, X21, [X31 + 0x60]
	0x03916F68 LDR X30, [X31 + 0x50]
	0x03916F6C ADD X31, X31, 0x80
	0x03916F70 RET
	0x03916F74 ADRP X0, 0x7E2000
	0x03916F78 LDR X0, [X0 + 0x528]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xACC000
	007 Move X21, 0x839000
	008 Move X20, 0x839000
	009 Move W8, [X22+2121]
	010 Move X21, [X21+1016]
	011 Move X20, [X20+1024]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x839000
	018 Move X0, [X0+1024]
	019 Call 0x1C17CF4
	020 Move X0, 0x839000
	021 Move X0, [X0+1016]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2121], W8
	025 Move X0, [X21]
	026 Move X19, [X19+48]
	027 Call 0x1C17F10
	028 Move X2, [X20]
	029 Move X1, X19
	030 Move X20, X0
	031 Call ReadOnlyCollection`1<Object>..ctor, X0, X1
	032 Move X0, X20
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Return X0

Method: System.Void set_sharedVertices(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.SharedVertex> value)

Disassembly:
	0x03916F7C BL 0x1C16D08
	0x03916F80 BL 0x1C16F10
	0x03916F84 MOV X19, X0
	0x03916F88 ADRP X0, 0x838000
	0x03916F8C LDR X0, [X0 + 0x450]
	0x03916F90 BL 0x1C16D08
	0x03916F94 MOV X1, X0
	0x03916F98 MOV X0, X19
	0x03916F9C MOV X2, X31
	0x03916FA0 BL 0x330E100
	0x03916FA4 ADRP X0, 0x838000
	0x03916FA8 LDR X0, [X0 + 0x458]
	0x03916FAC BL 0x1C16D08
	0x03916FB0 MOV X1, X0
	0x03916FB4 MOV X0, X19
	0x03916FB8 BL 0x1C16DEC
	0x03916FBC BL 0x1C16F20
	0x03916FC0 STR X30, [X31 - 0x40]!
	0x03916FC4 STP X24, X23, [X31 + 0x10]
	0x03916FC8 STP X22, X21, [X31 + 0x20]
	0x03916FCC STP X20, X19, [X31 + 0x30]
	0x03916FD0 ADRP X23, 0xACB000
	0x03916FD4 ADRP X24, 0x838000
	0x03916FD8 ADRP X22, 0x7DF000
	0x03916FDC ADRP X21, 0x837000
	0x03916FE0 ADRP X20, 0x838000
	0x03916FE4 LDRB W8, [X23 + 0x871]
	0x03916FE8 LDR X24, [X24 + 0x3F0]
	0x03916FEC LDR X22, [X22 + 0x9B0]
	0x03916FF0 LDR X21, [X21 + 0xA88]
	0x03916FF4 LDR X20, [X20 + 0x418]
	0x03916FF8 MOV X19, X0
	0x03916FFC TBNZ X8, 0x0, 0x3917038
	0x03917000 ADRP X0, 0x837000
	0x03917004 LDR X0, [X0 + 0x3F0]
	0x03917008 BL 0x1C16CF4
	0x0391700C ADRP X0, 0x837000
	0x03917010 LDR X0, [X0 + 0x418]
	0x03917014 BL 0x1C16CF4
	0x03917018 ADRP X0, 0x836000
	0x0391701C LDR X0, [X0 + 0xA88]
	0x03917020 BL 0x1C16CF4
	0x03917024 ADRP X0, 0x7DE000
	0x03917028 LDR X0, [X0 + 0x9B0]
	0x0391702C BL 0x1C16CF4
	0x03917030 MOVZ W8, 0x1
	0x03917034 STRB W8, [X23 + 0x871]
	0x03917038 LDR X0, [X24]
	0x0391703C MOV W1, W31
	0x03917040 BL 0x1C16D6C
	0x03917044 STR X0, [X19 + 0x28]
	0x03917048 LDR X0, [X22]
	0x0391704C MOV W1, W31
	0x03917050 BL 0x1C16D6C
	0x03917054 STR X0, [X19 + 0x58]
	0x03917058 LDR X0, [X21]
	0x0391705C MOV W1, W31
	0x03917060 BL 0x1C16D6C
	0x03917064 STP X0, X31, [X19 + 0x60]
	0x03917068 STP X31, X31, [X19 + 0x70]
	0x0391706C LDR X0, [X20]
	0x03917070 MOV W1, W31
	0x03917074 BL 0x1C16D6C
	0x03917078 STR X0, [X19 + 0x30]
	0x0391707C LDR X0, [X20]
	0x03917080 MOV W1, W31
	0x03917084 BL 0x1C16D6C
	0x03917088 STR X0, [X19 + 0x48]
	0x0391708C MOV X0, X19
	0x03917090 BL 0x3915A68
	0x03917094 MOV X0, X19
	0x03917098 BL 0x3915B10
	0x0391709C LDRH W8, [X19 + 0xC8]
	0x039170A0 MOVZ W9, 0x2
	0x039170A4 STR W9, [X19 + 0x20]
	0x039170A8 MOVZ W10, 0x1
	0x039170AC ADD W9, W8, 0x1
	0x039170B0 ANDS W31, W9, 0x10000
	0x039170B4 CSINC W8, W10, W8, NE
	0x039170B8 STR X31, [X19 + 0x88]
	0x039170BC STRH W8, [X19 + 0xC8]
	0x039170C0 STRH W8, [X19 + 0xCA]
	0x039170C4 MOV X0, X19
	0x039170C8 LDP X20, X19, [X31 + 0x30]
	0x039170CC LDP X22, X21, [X31 + 0x20]
	0x039170D0 LDP X24, X23, [X31 + 0x10]
	0x039170D4 LDR X30, [X31], #0x40
	0x039170D8 B 0x3918CAC
	0x039170DC LDRH W8, [X0 + 0xC8]
	0x039170E0 MOVZ W9, 0x1
	0x039170E4 ADD W10, W8, 0x1
	0x039170E8 ANDS W31, W10, 0x10000
	0x039170EC CSINC W8, W9, W8, NE
	0x039170F0 STRH W8, [X0 + 0xC8]
	0x039170F4 STRH W8, [X0 + 0xCA]
	0x039170F8 RET
	0x039170FC STR X30, [X31 - 0x20]!
	0x03917100 STP X20, X19, [X31 + 0x10]
	0x03917104 ADRP X20, 0xACA000
	0x03917108 LDRB W8, [X20 + 0x852]
	0x0391710C MOV X19, X0
	0x03917110 TBNZ X8, 0x0, 0x3917134
	0x03917114 ADRP X0, 0x837000
	0x03917118 LDR X0, [X0 + 0x238]
	0x0391711C BL 0x1C16CF4
	0x03917120 ADRP X0, 0x837000
	0x03917124 LDR X0, [X0 + 0x230]
	0x03917128 BL 0x1C16CF4
	0x0391712C MOVZ W8, 0x1
	0x03917130 STRB W8, [X20 + 0x852]
	0x03917134 LDR X19, [X19 + 0x80]
	0x03917138 CBZ X19, 0x3917168
	0x0391713C ADRP X8, 0x837000
	0x03917140 LDR X8, [X8 + 0x230]
	0x03917144 ADRP X20, 0x837000
	0x03917148 LDR X0, [X8]
	0x0391714C LDR X20, [X20 + 0x238]
	0x03917150 BL 0x1C16F10
	0x03917154 LDR X2, [X20]
	0x03917158 MOV X1, X19
	0x0391715C MOV X20, X0
	0x03917160 BL 0x257D040
	0x03917164 B 0x391716C
	0x03917168 MOV X20, X31
	0x0391716C MOV X0, X20
	0x03917170 LDP X20, X19, [X31 + 0x10]
	0x03917174 LDR X30, [X31], #0x20
	0x03917178 RET
	0x0391717C LDR X0, [X0 + 0x80]
	0x03917180 RET
	0x03917184 STR X1, [X0 + 0x80]
	0x03917188 RET
	0x0391718C LDR X0, [X0 + 0x88]
	0x03917190 RET
	0x03917194 STR X1, [X0 + 0x88]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0xACC000
	012 Move W8, [X21+2122]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {33}
	019 Move X0, 0x839000
	020 Move X0, [X0+1032]
	021 Call 0x1C17CF4
	022 Move X0, 0x839000
	023 Move X0, [X0+1040]
	024 Call 0x1C17CF4
	025 Move X0, 0x839000
	026 Move X0, [X0+1048]
	027 Call 0x1C17CF4
	028 Move X0, 0x839000
	029 Move X0, [X0+1056]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+2122], W8
	033 Compare X19, 0
	034 JumpIfEqual {128}
	035 Move X10, 0x839000
	036 Move X8, [X19]
	037 Move X10, [X10+1032]
	038 Move X21, 0x839000
	039 NotImplemented "Instruction LDRH not yet implemented."
	040 Move X1, [X10]
	041 Move X21, [X21+1048]
	042 Compare X9, 0
	043 JumpIfEqual {50}
	044 Move X10, [X8+176]
	045 Add X10, X10, 8
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Subtract X9, X9, 1
	049 Add X10, X10, 16
	050 Move X0, X19
	051 Move W2, W31
	052 Call 0x1C5D788
	053 NotImplemented "Instruction LDRSW not yet implemented."
	054 Add X8, X8, X9
	055 Add X0, X8, 312
	056 Move X8, [X0]
	057 Move X1, [X0+8]
	058 Move X0, X19
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move X8, [X21]
	061 Move W23, W0
	062 Move W1, W23
	063 Move X0, X8
	064 Call 0x1C17D6C
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move [X20+48], X0
	067 Move X25, 0x838000
	068 Move X26, 0x838000
	069 Move X25, [X25+1040]
	070 Move X26, [X26+1056]
	071 Move X22, X0
	072 Move X21, X31
	073 Move W27, W23
	074 Move X8, [X19]
	075 Move X1, [X25]
	076 NotImplemented "Instruction LDRH not yet implemented."
	077 Compare X9, 0
	078 JumpIfEqual {85}
	079 Move X10, [X8+176]
	080 Add X10, X10, 8
	081 NotImplemented "Instruction LDUR not yet implemented."
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Subtract X9, X9, 1
	084 Add X10, X10, 16
	085 Move X0, X19
	086 Move W2, W31
	087 Call 0x1C5D788
	088 NotImplemented "Instruction LDRSW not yet implemented."
	089 Add X8, X8, X9
	090 Add X0, X8, 312
	091 Move X8, [X0]
	092 Move X2, [X0+8]
	093 Move X0, X19
	094 Move W1, W21
	095 NotImplemented "Instruction BLR not yet implemented."
	096 Move X8, [X26]
	097 Move X24, X0
	098 Move X0, X8
	099 Call 0x1C17F10
	100 Move X1, X24
	101 Move X2, X31
	102 Move X23, X0
	103 Call SharedVertex..ctor, X0, X1
	104 Compare X22, 0
	105 JumpIfEqual {126}
	106 Move W8, [X22+24]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Add X8, X22, X21
	109 Add X21, X21, 1
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move [X8+32], X23
	112 Move X22, [X20+48]
	113 Move X0, X20
	114 Move X20, [X31+64]
	115 Move X19, [X31+72]
	116 Move X22, [X31+48]
	117 Move X21, [X31+56]
	118 Move X24, [X31+32]
	119 Move X23, [X31+40]
	120 Move X26, [X31+16]
	121 Move X25, [X31+24]
	122 Move X30, [X31+80]
	123 Move X27, [X31+88]
	124 Call ProBuilderMesh.InvalidateSharedVertexLookup, X0
	125 Return 
	126 Call 0x1C17F20
	127 Call 0x1C17F28
	128 Move X0, 0x7E2000
	129 Move X0, [X0+1320]
	130 Call 0x1C17D08
	131 Call 0x1C17F10
	132 Move X19, X0
	133 Move X0, 0x7E7000
	134 Move X0, [X0+3784]
	135 Call 0x1C17D08
	136 Move X1, X0
	137 Move X0, X19
	138 Move X2, X31
	139 Call ArgumentNullException..ctor, X0, X1
	140 Move X0, 0x838000
	141 Move X0, [X0+1064]
	142 Call 0x1C17D08
	143 Move X1, X0
	144 Move X0, X19
	145 Call 0x1C17DEC

Method: System.Collections.Generic.Dictionary`2<System.Int32, System.Int32> get_sharedVertexLookup()

Disassembly:
	0x03917198 RET
	0x0391719C STR X30, [X31 - 0x20]!
	0x039171A0 STP X20, X19, [X31 + 0x10]
	0x039171A4 ADRP X20, 0xACA000
	0x039171A8 LDRB W8, [X20 + 0x854]
	0x039171AC MOV X19, X0
	0x039171B0 TBNZ X8, 0x0, 0x39171D4
	0x039171B4 ADRP X0, 0x836000
	0x039171B8 LDR X0, [X0 + 0xBE0]
	0x039171BC BL 0x1C16CF4
	0x039171C0 ADRP X0, 0x836000
	0x039171C4 LDR X0, [X0 + 0xBD8]
	0x039171C8 BL 0x1C16CF4
	0x039171CC MOVZ W8, 0x1
	0x039171D0 STRB W8, [X20 + 0x854]
	0x039171D4 LDR X19, [X19 + 0x88]
	0x039171D8 CBZ X19, 0x3917208
	0x039171DC ADRP X8, 0x836000
	0x039171E0 LDR X8, [X8 + 0xBD8]
	0x039171E4 ADRP X20, 0x836000
	0x039171E8 LDR X0, [X8]
	0x039171EC LDR X20, [X20 + 0xBE0]
	0x039171F0 BL 0x1C16F10
	0x039171F4 LDR X2, [X20]
	0x039171F8 MOV X1, X19
	0x039171FC MOV X20, X0
	0x03917200 BL 0x2525AA8
	0x03917204 B 0x391720C
	0x03917208 MOV X20, X31
	0x0391720C MOV X0, X20
	0x03917210 LDP X20, X19, [X31 + 0x10]
	0x03917214 LDR X30, [X31], #0x20
	0x03917218 RET
	0x0391721C STP X30, X21, [X31 - 0x20]!
	0x03917220 STP X20, X19, [X31 + 0x10]
	0x03917224 ADRP X21, 0xACA000
	0x03917228 LDRB W8, [X21 + 0x855]
	0x0391722C MOV X20, X1
	0x03917230 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xACB000
	005 Move W8, [X20+2123]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x7E7000
	012 Move X0, [X0+2192]
	013 Call 0x1C17CF4
	014 Move X0, 0x7E7000
	015 Move X0, [X0+2184]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2123], W8
	019 Move W8, [X19+56]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {44}
	024 Move X20, [X19+64]
	025 Compare X20, 0
	026 JumpIfNotEqual {37}
	027 Move X8, 0x7E7000
	028 Move X8, [X8+2184]
	029 Move X0, [X8]
	030 Call 0x1C17F10
	031 Move X8, 0x7E7000
	032 Move X8, [X8+2192]
	033 Move X20, X0
	034 Move X1, [X8]
	035 Call Dictionary`2<Int32, Int32>..ctor, X0
	036 Move [X19+64], X20
	037 Move X0, [X19+48]
	038 Move X1, X20
	039 Move X2, X31
	040 Call SharedVertex.GetSharedVertexLookup, X0, X1
	041 Move W8, [X19+56]
	042 Or W8, W8, 1
	043 Move [X19+56], W8
	044 Move X0, [X19+64]
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Return X0

Method: System.Void SetSharedVertices(System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<System.Int32, System.Int32>> indexes)

Disassembly:
	0x03917234 TBNZ X8, 0x0, 0x3917258
	0x03917238 ADRP X0, 0x837000
	0x0391723C LDR X0, [X0 + 0x460]
	0x03917240 BL 0x1C16CF4
	0x03917244 ADRP X0, 0x837000
	0x03917248 LDR X0, [X0 + 0x468]
	0x0391724C BL 0x1C16CF4
	0x03917250 MOVZ W8, 0x1
	0x03917254 STRB W8, [X21 + 0x855]
	0x03917258 CBZ X20, 0x3917300
	0x0391725C ADRP X21, 0x837000
	0x03917260 LDR X8, [X20]
	0x03917264 LDR X21, [X21 + 0x468]
	0x03917268 LDRH W9, [X8 + 0x12E]
	0x0391726C LDR X1, [X21]
	0x03917270 CBZ X9, 0x3917294
	0x03917274 LDR X10, [X8 + 0xB0]
	0x03917278 ADD X10, X10, 0x8
	0x0391727C LDUR X11, [X10 - 0x8]
	0x03917280 CMP X11, X1
	0x03917284 B.EQ 0x39172A4
	0x03917288 SUBS X9, X9, 0x1
	0x0391728C ADD X10, X10, 0x10
	0x03917290 B.NE 0x391727C
	0x03917294 MOV X0, X20
	0x03917298 MOV W2, W31
	0x0391729C BL 0x1C5C788
	0x039172A0 B 0x39172B0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {15}
	005 Move X19, X0
	006 Move X0, X1
	007 Move X1, X31
	008 Call SharedVertex.ToSharedVertices, X0
	009 Move [X19+48], X0
	010 Move X0, X19
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call ProBuilderMesh.InvalidateSharedVertexLookup, X0
	014 Return 
	015 Move X0, 0x7E2000
	016 Move X0, [X0+1320]
	017 Call 0x1C17D08
	018 Call 0x1C17F10
	019 Move X19, X0
	020 Move X0, 0x815000
	021 Move X0, [X0+3600]
	022 Call 0x1C17D08
	023 Move X1, X0
	024 Move X0, X19
	025 Move X2, X31
	026 Call ArgumentNullException..ctor, X0, X1
	027 Move X0, 0x838000
	028 Move X0, [X0+1072]
	029 Call 0x1C17D08
	030 Move X1, X0
	031 Move X0, X19
	032 Call 0x1C17DEC

Method: UnityEngine.ProBuilder.SharedVertex[] get_sharedTextures()

Disassembly:
	0x039172A4 LDRSW X9, [X10]
	0x039172A8 ADD X8, X8, X9, 0x4, LSL

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Void set_sharedTextures(UnityEngine.ProBuilder.SharedVertex[] value)

Disassembly:
	0x039172AC ADD X0, X8, 0x138
	0x039172B0 LDP X8, X1, [X0]

ISIL:
	001 Move [X0+72], X1
	002 Call ProBuilderMesh.InvalidateSharedTextureLookup, X0
	003 Return 

Method: System.Collections.Generic.Dictionary`2<System.Int32, System.Int32> get_sharedTextureLookup()

Disassembly:
	0x039172B4 MOV X0, X20
	0x039172B8 BLR X8
	0x039172BC CBZ W0, 0x3917300
	0x039172C0 LDR X8, [X20]
	0x039172C4 LDR X1, [X21]
	0x039172C8 LDRH W9, [X8 + 0x12E]
	0x039172CC CBZ X9, 0x39172F0
	0x039172D0 LDR X10, [X8 + 0xB0]
	0x039172D4 ADD X10, X10, 0x8
	0x039172D8 LDUR X11, [X10 - 0x8]
	0x039172DC CMP X11, X1
	0x039172E0 B.EQ 0x3917308
	0x039172E4 SUBS X9, X9, 0x1
	0x039172E8 ADD X10, X10, 0x10
	0x039172EC B.NE 0x39172D8
	0x039172F0 MOV X0, X20
	0x039172F4 MOV W2, W31
	0x039172F8 BL 0x1C5C788
	0x039172FC B 0x3917314
	0x03917300 MOV X0, X31
	0x03917304 B 0x3917348
	0x03917308 LDRSW X9, [X10]
	0x0391730C ADD X8, X8, X9, 0x4, LSL
	0x03917310 ADD X0, X8, 0x138
	0x03917314 LDP X8, X1, [X0]
	0x03917318 MOV X0, X20
	0x0391731C BLR X8
	0x03917320 LDR X8, [X19 + 0x58]
	0x03917324 CBZ X8, 0x391732C
	0x03917328 LDR W8, [X8 + 0x18]
	0x0391732C CMP W0, W8
	0x03917330 B.NE 0x3917358
	0x03917334 ADRP X8, 0x837000
	0x03917338 LDR X8, [X8 + 0x460]
	0x0391733C MOV X0, X20
	0x03917340 LDR X1, [X8]
	0x03917344 BL 0x21D533C
	0x03917348 STR X0, [X19 + 0x88]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xACB000
	005 Move W8, [X20+2124]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x7E7000
	012 Move X0, [X0+2192]
	013 Call 0x1C17CF4
	014 Move X0, 0x7E7000
	015 Move X0, [X0+2184]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2124], W8
	019 Move W8, [X19+56]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 2
	022 Compare TEMP, 2
	023 JumpIfEqual {43}
	024 Move X20, [X19+80]
	025 Or W8, W8, 2
	026 Move [X19+56], W8
	027 Compare X20, 0
	028 JumpIfNotEqual {39}
	029 Move X8, 0x7E7000
	030 Move X8, [X8+2184]
	031 Move X0, [X8]
	032 Call 0x1C17F10
	033 Move X8, 0x7E7000
	034 Move X8, [X8+2192]
	035 Move X20, X0
	036 Move X1, [X8]
	037 Call Dictionary`2<Int32, Int32>..ctor, X0
	038 Move [X19+80], X20
	039 Move X0, [X19+72]
	040 Move X1, X20
	041 Move X2, X31
	042 Call SharedVertex.GetSharedVertexLookup, X0, X1
	043 Move X0, [X19+80]
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Return X0

Method: System.Void SetSharedTextures(System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<System.Int32, System.Int32>> indexes)

Disassembly:
	0x0391734C LDP X20, X19, [X31 + 0x10]
	0x03917350 LDP X30, X21, [X31], #0x20
	0x03917354 RET
	0x03917358 ADRP X0, 0x7E4000
	0x0391735C LDR X0, [X0 + 0x760]
	0x03917360 BL 0x1C16D08
	0x03917364 BL 0x1C16F10
	0x03917368 MOV X19, X0
	0x0391736C ADRP X0, 0x7E6000
	0x03917370 LDR X0, [X0 + 0xEC8]
	0x03917374 BL 0x1C16D08
	0x03917378 MOV X20, X0
	0x0391737C ADRP X0, 0x837000
	0x03917380 LDR X0, [X0 + 0x470]
	0x03917384 BL 0x1C16D08
	0x03917388 MOV X2, X0
	0x0391738C MOV X0, X19
	0x03917390 MOV X1, X20
	0x03917394 MOV X3, X31
	0x03917398 BL 0x3311888
	0x0391739C ADRP X0, 0x837000
	0x039173A0 LDR X0, [X0 + 0x478]
	0x039173A4 BL 0x1C16D08
	0x039173A8 MOV X1, X0
	0x039173AC MOV X0, X19
	0x039173B0 BL 0x1C16DEC
	0x039173B4 STR X30, [X31 - 0x20]!
	0x039173B8 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {15}
	005 Move X19, X0
	006 Move X0, X1
	007 Move X1, X31
	008 Call SharedVertex.ToSharedVertices, X0
	009 Move [X19+72], X0
	010 Move X0, X19
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call ProBuilderMesh.InvalidateSharedTextureLookup, X0
	014 Return 
	015 Move X0, 0x7E2000
	016 Move X0, [X0+1320]
	017 Call 0x1C17D08
	018 Call 0x1C17F10
	019 Move X19, X0
	020 Move X0, 0x815000
	021 Move X0, [X0+3600]
	022 Call 0x1C17D08
	023 Move X1, X0
	024 Move X0, X19
	025 Move X2, X31
	026 Call ArgumentNullException..ctor, X0, X1
	027 Move X0, 0x838000
	028 Move X0, [X0+1080]
	029 Call 0x1C17D08
	030 Move X1, X0
	031 Move X0, X19
	032 Call 0x1C17DEC

Method: UnityEngine.Vector3[] get_positionsInternal()

Disassembly:
	0x039173BC ADRP X20, 0xACA000
	0x039173C0 LDRB W8, [X20 + 0x856]

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: System.Void set_positionsInternal(UnityEngine.Vector3[] value)

Disassembly:
	0x039173C4 MOV X19, X0
	0x039173C8 TBNZ X8, 0x0, 0x39173EC

ISIL:
	001 Move [X0+88], X1
	002 Return 

Method: System.Collections.Generic.IList`1<UnityEngine.Vector3> get_positions()

Disassembly:
	0x039173CC ADRP X0, 0x837000
	0x039173D0 LDR X0, [X0 + 0x480]
	0x039173D4 BL 0x1C16CF4
	0x039173D8 ADRP X0, 0x837000
	0x039173DC LDR X0, [X0 + 0x460]
	0x039173E0 BL 0x1C16CF4
	0x039173E4 MOVZ W8, 0x1
	0x039173E8 STRB W8, [X20 + 0x856]
	0x039173EC MOVZ W1, 0x20
	0x039173F0 MOV X0, X19
	0x039173F4 BL 0x39112BC
	0x039173F8 TBZ X0, 0x0, 0x391741C
	0x039173FC MOV X0, X19
	0x03917400 BL 0x391719C
	0x03917404 ADRP X8, 0x837000
	0x03917408 LDR X8, [X8 + 0x460]
	0x0391740C LDP X20, X19, [X31 + 0x10]
	0x03917410 LDR X1, [X8]
	0x03917414 LDR X30, [X31], #0x20
	0x03917418 B 0x21D533C
	0x0391741C LDR X8, [X19 + 0x58]
	0x03917420 CBZ X8, 0x391742C
	0x03917424 LDR W0, [X8 + 0x18]
	0x03917428 B 0x3917430
	0x0391742C MOV W0, W31
	0x03917430 ADRP X8, 0x837000
	0x03917434 LDR X8, [X8 + 0x480]
	0x03917438 LDP X20, X19, [X31 + 0x10]
	0x0391743C FMOV S0, 1
	0x03917440 FMOV S1, 1
	0x03917444 LDR X1, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xACB000
	007 Move X21, 0x838000
	008 Move X20, 0x838000
	009 Move W8, [X22+2125]
	010 Move X21, [X21+560]
	011 Move X20, [X20+568]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x838000
	018 Move X0, [X0+568]
	019 Call 0x1C17CF4
	020 Move X0, 0x838000
	021 Move X0, [X0+560]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2125], W8
	025 Move X0, [X21]
	026 Move X19, [X19+88]
	027 Call 0x1C17F10
	028 Move X2, [X20]
	029 Move X1, X19
	030 Move X20, X0
	031 Call ReadOnlyCollection`1<Vector3>..ctor, X0, X1
	032 Move X0, X20
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Return X0

Method: System.Void set_positions(System.Collections.Generic.IList`1<UnityEngine.Vector3> value)

Disassembly:
	0x03917448 FMOV S2, 1
	0x0391744C FMOV S3, 1
	0x03917450 LDR X30, [X31], #0x20
	0x03917454 B 0x217E698
	0x03917458 STR X30, [X31 - 0x20]!
	0x0391745C STP X20, X19, [X31 + 0x10]
	0x03917460 ADRP X19, 0xACA000
	0x03917464 LDRB W8, [X19 + 0x857]
	0x03917468 MOV X20, X0
	0x0391746C TBNZ X8, 0x0, 0x3917490
	0x03917470 ADRP X0, 0x837000
	0x03917474 LDR X0, [X0 + 0x488]
	0x03917478 BL 0x1C16CF4
	0x0391747C ADRP X0, 0x837000
	0x03917480 LDR X0, [X0 + 0x490]
	0x03917484 BL 0x1C16CF4
	0x03917488 MOVZ W8, 0x1
	0x0391748C STRB W8, [X19 + 0x857]
	0x03917490 LDR X19, [X20 + 0x78]
	0x03917494 CBZ X19, 0x39174DC
	0x03917498 LDR X8, [X20 + 0x58]
	0x0391749C CBZ X8, 0x39174A4
	0x039174A0 LDR W8, [X8 + 0x18]
	0x039174A4 LDR W9, [X19 + 0x18]
	0x039174A8 CMP W8, W9
	0x039174AC B.NE 0x39174DC
	0x039174B0 ADRP X8, 0x837000
	0x039174B4 LDR X8, [X8 + 0x490]
	0x039174B8 LDR X0, [X8]
	0x039174BC BL 0x1C16F10
	0x039174C0 ADRP X8, 0x837000
	0x039174C4 LDR X8, [X8 + 0x488]
	0x039174C8 MOV X1, X19
	0x039174CC MOV X20, X0
	0x039174D0 LDR X2, [X8]
	0x039174D4 BL 0x257DE38
	0x039174D8 B 0x39174E0
	0x039174DC MOV X20, X31
	0x039174E0 MOV X0, X20
	0x039174E4 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xACB000
	006 Move W8, [X21+2126]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x838000
	014 Move X0, [X0+368]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2126], W8
	018 Compare X20, 0
	019 JumpIfEqual {31}
	020 Move X8, 0x838000
	021 Move X8, [X8+368]
	022 Move X0, X20
	023 Move X1, [X8]
	024 Call Enumerable.ToArray, X0
	025 Move [X19+88], X0
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return 
	031 Move X0, 0x7E2000
	032 Move X0, [X0+1320]
	033 Call 0x1C17D08
	034 Call 0x1C17F10
	035 Move X19, X0
	036 Move X0, 0x7E7000
	037 Move X0, [X0+3784]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X19
	041 Move X2, X31
	042 Call ArgumentNullException..ctor, X0, X1
	043 Move X0, 0x838000
	044 Move X0, [X0+1088]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X19
	048 Call 0x1C17DEC

Method: UnityEngine.ProBuilder.Vertex[] GetVertices(System.Collections.Generic.IList`1<System.Int32> indexes = null)

Disassembly:
	0x03913114 LDR W8, [X0 + 0xE0]
	0x03913118 CBNZ W8, 0x3913124
	0x0391311C BL 0x1C16DFC
	0x03913120 LDR X0, [X20]
	0x03913124 LDR X8, [X0 + 0xB8]
	0x03913128 LDR X8, [X8 + 0x10]
	0x0391312C CBZ X8, 0x391315C
	0x03913130 LDR W9, [X8 + 0x18]
	0x03913134 CMP X21, X9
	0x03913138 B.CS 0x3913160
	0x0391313C ADD X8, X8, X21, 0x2, LSL
	0x03913140 ADD X21, X21, 0x1
	0x03913144 CMP X19, X21
	0x03913148 STR W31, [X8 + 0x20]
	0x0391314C B.NE 0x3913114
	0x03913150 LDP X20, X19, [X31 + 0x10]
	0x03913154 LDP X30, X21, [X31], #0x20
	0x03913158 RET
	0x0391315C BL 0x1C16F20
	0x03913160 BL 0x1C16F28
	0x03913164 SUB X31, X31, 0x90
	0x03913168 STP D9, D8, [X31 + 0x20]
	0x0391316C STR X30, [X31 + 0x30]
	0x03913170 STP X28, X27, [X31 + 0x40]
	0x03913174 STP X26, X25, [X31 + 0x50]
	0x03913178 STP X24, X23, [X31 + 0x60]
	0x0391317C STP X22, X21, [X31 + 0x70]
	0x03913180 STP X20, X19, [X31 + 0x80]
	0x03913184 ADRP X19, 0xACE000
	0x03913188 LDRB W8, [X19 + 0x825]
	0x0391318C MOV X23, X0
	0x03913190 TBNZ X8, 0x0, 0x39131C0
	0x03913194 ADRP X0, 0x83B000
	0x03913198 LDR X0, [X0 + 0x218]
	0x0391319C BL 0x1C16CF4
	0x039131A0 ADRP X0, 0x7E2000
	0x039131A4 LDR X0, [X0 + 0x9B0]
	0x039131A8 BL 0x1C16CF4
	0x039131AC ADRP X0, 0x83B000
	0x039131B0 LDR X0, [X0 + 0x48]
	0x039131B4 BL 0x1C16CF4
	0x039131B8 MOVZ W8, 0x1
	0x039131BC STRB W8, [X19 + 0x825]
	0x039131C0 STR W31, [X31 + 0x18]
	0x039131C4 STR X31, [X31 + 0x10]
	0x039131C8 STR W31, [X31 + 0x8]
	0x039131CC STR X31, [X31]
	0x039131D0 CBZ X23, 0x3913660
	0x039131D4 LDR X8, [X23 + 0x58]
	0x039131D8 CBZ X8, 0x39131E4
	0x039131DC LDR W22, [X8 + 0x18]
	0x039131E0 B 0x39131E8
	0x039131E4 MOV W22, W31
	0x039131E8 MOVZ W1, 0x80
	0x039131EC MOV X0, X23
	0x039131F0 BL 0x39112BC
	0x039131F4 TBNZ X0, 0x0, 0x3913210
	0x039131F8 ADRP X8, 0x83B000
	0x039131FC LDR X8, [X8 + 0x48]
	0x03913200 MOV W1, W22
	0x03913204 LDR X0, [X8]
	0x03913208 BL 0x1C16D6C
	0x0391320C STR X0, [X23 + 0x78]
	0x03913210 MOVZ W1, 0x1
	0x03913214 MOV X0, X23
	0x03913218 BL 0x39112BC
	0x0391321C TBZ X0, 0x0, 0x3913638
	0x03913220 MOVZ W1, 0x2
	0x03913224 MOV X0, X23
	0x03913228 BL 0x39112BC
	0x0391322C TBZ X0, 0x0, 0x3913638
	0x03913230 MOV X0, X23
	0x03913234 BL 0x3911808
	0x03913238 ADRP X20, 0x7E2000
	0x0391323C LDP X24, X25, [X23 + 0x58]
	0x03913240 LDR X20, [X20 + 0x9B0]
	0x03913244 MOV X19, X0
	0x03913248 MOV W1, W22
	0x0391324C LDR X8, [X20]
	0x03913250 MOV X0, X8
	0x03913254 BL 0x1C16D6C
	0x03913258 LDR X8, [X20]
	0x0391325C MOV X20, X0
	0x03913260 MOV W1, W22
	0x03913264 MOV X0, X8
	0x03913268 BL 0x1C16D6C
	0x0391326C LDR X8, [X23 + 0x28]
	0x03913270 CBZ X8, 0x3913660
	0x03913274 LDR W11, [X8 + 0x18]
	0x03913278 LDR X23, [X23 + 0x78]
	0x0391327C MOV X21, X0
	0x03913280 CMP W11, 0x1
	0x03913284 B.LT 0x3913510
	0x03913288 MOV W9, W31
	0x0391328C MOVZ W10, 0xC
	0x03913290 FMOV S0, 1
	0x03913294 CMP W9, W11
	0x03913298 B.CS 0x391365C
	0x0391329C ADD X11, X8, W9, 0x3, SXTW
	0x039132A0 LDR X11, [X11 + 0x20]
	0x039132A4 CBZ X11, 0x3913660
	0x039132A8 LDR X11, [X11 + 0x10]
	0x039132AC CBZ X11, 0x3913660
	0x039132B0 LDR X12, [X11 + 0x18]
	0x039132B4 CMP W12, 0x1
	0x039132B8 B.LT 0x3913500
	0x039132BC CBZ W12, 0x391365C
	0x039132C0 MOV W15, W12
	0x039132C4 MOV W13, W31
	0x039132C8 ADD W17, W13, 0x1
	0x039132CC CMP W17, W15
	0x039132D0 B.CS 0x391365C
	0x039132D4 ADD W14, W13, 0x2
	0x039132D8 CMP W14, W15
	0x039132DC B.CS 0x391365C
	0x039132E0 CBZ X24, 0x3913660
	0x039132E4 ADD X15, X11, W13, 0x2, SXTW
	0x039132E8 LDRSW X16, [X15 + 0x20]
	0x039132EC LDR W0, [X24 + 0x18]
	0x039132F0 CMP W16, W0
	0x039132F4 B.CS 0x391365C
	0x039132F8 ADD X15, X11, W17, 0x2, SXTW
	0x039132FC LDRSW X15, [X15 + 0x20]
	0x03913300 CMP W15, W0
	0x03913304 B.CS 0x391365C
	0x03913308 ADD X14, X11, W14, 0x2, SXTW
	0x0391330C LDRSW X14, [X14 + 0x20]
	0x03913310 CMP W14, W0
	0x03913314 B.CS 0x391365C
	0x03913318 CBZ X25, 0x3913660
	0x0391331C LDR W17, [X25 + 0x18]
	0x03913320 CMP W16, W17
	0x03913324 B.CS 0x391365C
	0x03913328 CMP W15, W17
	0x0391332C B.CS 0x391365C
	0x03913330 CMP W14, W17
	0x03913334 B.CS 0x391365C
	0x03913338 CBZ X20, 0x3913660
	0x0391333C LDR W17, [X20 + 0x18]
	0x03913340 CMP W16, W17
	0x03913344 B.CS 0x391365C
	0x03913348 MADD X17, X16, X10, X24
	0x0391334C MADD X0, X15, X10, X24
	0x03913350 LDR V1, [X17 + 0x20]
	0x03913354 LDR V2, [X17 + 0x28]
	0x03913358 NOP
	0x0391335C MADD X17, X14, X10, X24
	0x03913360 LDR V3, [X0 + 0x20]
	0x03913364 LDR V4, [X0 + 0x28]
	0x03913368 ADD X0, X25, X16, 0x3, LSL
	0x0391336C LDR V5, [X17 + 0x20]
	0x03913370 LDR V16, [X17 + 0x28]
	0x03913374 ADD X17, X25, 0x20
	0x03913378 LDP S17, S18, [X0 + 0x20]
	0x0391337C ADD X0, X17, X15, 0x3, LSL
	0x03913380 ADD X17, X17, X14, 0x3, LSL
	0x03913384 LDP S20, S19, [X0]
	0x03913388 LDP S22, S23, [X17]
	0x0391338C FSUB V6.2S, V3.2S, V1.2S
	0x03913390 FSUB V7.2S, V5.2S, V1.2S
	0x03913394 FSUB S1, S4, S2
	0x03913398 FSUB S3, S16, S2
	0x0391339C FSUB S5, S20, S17
	0x039133A0 FSUB S4, S22, S17
	0x039133A4 FSUB S2, S19, S18
	0x039133A8 FSUB S16, S23, S18
	0x039133AC FMUL S17, S5, S16
	0x039133B0 FMUL S18, S2, S4
	0x039133B4 MADD X0, X16, X10, X20
	0x00000000 INVALID
	0x039133BC FSUB S17, S17, S18
	0x00000000 INVALID
	0x039133C4 LDR V21, [X0 + 0x20]
	0x039133C8 FSUB V18.2S, V19.2S, V18.2S
	0x039133CC LDR V19, [X0 + 0x28]
	0x039133D0 FMUL S16, S1, S16
	0x039133D4 FMUL S2, S3, S2
	0x039133D8 FSUB S16, S16, S2
	0x039133DC FDIV S2, S0, S17
	0x00000000 INVALID
	0x039133E4 FMUL S16, S16, S2
	0x039133E8 FADD V18.2S, V17.2S, V21.2S
	0x039133EC FADD S19, S16, S19
	0x039133F0 STR D18, [X0 + 0x20]
	0x039133F4 STR S19, [X0 + 0x28]
	0x039133F8 LDR W17, [X20 + 0x18]
	0x039133FC CMP W15, W17
	0x03913400 B.CS 0x391365C
	0x03913404 MADD X17, X15, X10, X20
	0x03913408 LDR V18, [X17 + 0x20]
	0x0391340C LDR V19, [X17 + 0x28]
	0x03913410 FADD V18.2S, V17.2S, V18.2S
	0x03913414 FADD S19, S16, S19
	0x03913418 STR D18, [X17 + 0x20]
	0x0391341C STR S19, [X17 + 0x28]
	0x03913420 LDR W17, [X20 + 0x18]
	0x03913424 CMP W14, W17
	0x03913428 B.CS 0x391365C
	0x0391342C MADD X17, X14, X10, X20
	0x03913430 LDR V18, [X17 + 0x20]
	0x03913434 LDR V19, [X17 + 0x28]
	0x03913438 FADD V17.2S, V17.2S, V18.2S
	0x0391343C FADD S16, S16, S19
	0x03913440 STR D17, [X17 + 0x20]
	0x03913444 STR S16, [X17 + 0x28]
	0x03913448 CBZ X21, 0x3913660
	0x0391344C LDR W17, [X21 + 0x18]
	0x03913450 CMP W16, W17
	0x03913454 B.CS 0x391365C
	0x00000000 INVALID
	0x00000000 INVALID
	0x03913460 MADD X16, X16, X10, X21
	0x03913464 FMUL S3, S3, S5
	0x03913468 FMUL S1, S1, S4
	0x0391346C FSUB V4.2S, V7.2S, V6.2S
	0x03913470 LDR V5, [X16 + 0x20]
	0x03913474 LDR V6, [X16 + 0x28]
	0x03913478 FSUB S3, S3, S1
	0x00000000 INVALID
	0x03913480 FMUL S2, S3, S2
	0x03913484 FADD V3.2S, V1.2S, V5.2S
	0x03913488 FADD S4, S2, S6
	0x0391348C STR D3, [X16 + 0x20]
	0x03913490 STR S4, [X16 + 0x28]
	0x03913494 LDR W16, [X21 + 0x18]
	0x03913498 CMP W15, W16
	0x0391349C B.CS 0x391365C
	0x039134A0 MADD X15, X15, X10, X21
	0x039134A4 LDR V3, [X15 + 0x20]
	0x039134A8 LDR V4, [X15 + 0x28]
	0x039134AC FADD V3.2S, V1.2S, V3.2S
	0x039134B0 FADD S4, S2, S4
	0x039134B4 STR D3, [X15 + 0x20]
	0x039134B8 STR S4, [X15 + 0x28]
	0x039134BC LDR W15, [X21 + 0x18]
	0x039134C0 CMP W14, W15
	0x039134C4 B.CS 0x391365C
	0x039134C8 MADD X14, X14, X10, X21
	0x039134CC LDR V3, [X14 + 0x20]
	0x039134D0 LDR V4, [X14 + 0x28]
	0x039134D4 ADD W13, W13, 0x3
	0x039134D8 CMP W13, W12
	0x039134DC FADD V1.2S, V1.2S, V3.2S
	0x039134E0 FADD S2, S2, S4
	0x039134E4 STR D1, [X14 + 0x20]
	0x039134E8 STR S2, [X14 + 0x28]
	0x039134EC B.GE 0x3913500
	0x039134F0 LDR W15, [X11 + 0x18]
	0x039134F4 CMP W13, W15
	0x039134F8 B.CC 0x39132C8
	0x039134FC B 0x391365C
	0x03913500 LDR W11, [X8 + 0x18]
	0x03913504 ADD W9, W9, 0x1
	0x03913508 CMP W9, W11
	0x0391350C B.LT 0x3913294
	0x03913510 CMP W22, 0x1
	0x03913514 B.LT 0x3913638
	0x03913518 CBZ X19, 0x3913660
	0x0391351C MOV X24, X31
	0x03913520 SXTW X22, W22
	0x03913524 ADD X25, X23, 0x2C
	0x03913528 ADD X26, X19, 0x28
	0x0391352C ADD X27, X21, 0x28
	0x03913530 ADD X28, X20, 0x28
	0x03913534 FMOV S8, 1
	0x03913538 FMOV S9, -1
	0x0391353C LDR W8, [X19 + 0x18]
	0x03913540 CMP W24, W8
	0x03913544 B.CS 0x391365C
	0x03913548 LDUR V0, [X26 - 0x8]
	0x0391354C LDR V1, [X26]
	0x03913550 STR D0, [X31 + 0x10]
	0x03913554 STR S1, [X31 + 0x18]
	0x03913558 CBZ X20, 0x3913660
	0x0391355C LDR W8, [X20 + 0x18]
	0x03913560 CMP W24, W8
	0x03913564 B.CS 0x391365C
	0x03913568 LDP S0, S1, [X28 - 0x8]
	0x0391356C LDR V2, [X28]
	0x03913570 MOV X0, X31
	0x03913574 BL 0x390B668
	0x03913578 ADD X0, X31, 0x10
	0x0391357C ADD X1, X31, 0x0
	0x03913580 MOV X2, X31
	0x03913584 STP S0, S1, [X31]
	0x03913588 STR S2, [X31 + 0x8]
	0x0391358C BL 0x3C28B74
	0x03913590 CBZ X23, 0x3913660
	0x03913594 LDR W8, [X23 + 0x18]
	0x03913598 CMP W24, W8
	0x0391359C B.CS 0x391365C
	0x039135A0 LDR V0, [X31]
	0x039135A4 STUR S0, [X25 - 0xC]
	0x039135A8 LDR V0, [X31 + 0x4]
	0x039135AC STUR S0, [X25 - 0x8]
	0x039135B0 LDR V0, [X31 + 0x8]
	0x039135B4 STUR S0, [X25 - 0x4]
	0x039135B8 CBZ X21, 0x3913660
	0x039135BC LDR W8, [X21 + 0x18]
	0x039135C0 CMP W24, W8
	0x039135C4 B.CS 0x391365C
	0x039135C8 LDP S0, S1, [X31 + 0x14]
	0x039135CC LDP S3, S2, [X31 + 0x4]
	0x039135D0 LDR V4, [X31]
	0x039135D4 LDR V5, [X31 + 0x10]
	0x039135D8 ADD X24, X24, 0x1
	0x039135DC FMUL S6, S0, S2
	0x039135E0 FMUL S7, S1, S3
	0x039135E4 FMUL S1, S1, S4
	0x039135E8 FMUL S2, S5, S2
	0x039135EC FMUL S3, S5, S3
	0x039135F0 FMUL S0, S0, S4
	0x039135F4 LDP S4, S5, [X27 - 0x8]
	0x039135F8 FSUB S6, S6, S7
	0x039135FC LDR V7, [X27], #0xC
	0x03913600 FSUB S1, S1, S2
	0x03913604 FSUB S0, S3, S0
	0x03913608 FMUL S2, S6, S4
	0x0391360C FMUL S1, S1, S5
	0x03913610 FMUL S0, S0, S7
	0x03913614 FADD S1, S2, S1
	0x03913618 FADD S0, S0, S1
	0x0391361C FCMP S0, 0x0
	0x03913620 FCSEL S0, S9, S8, MI
	0x03913624 ADD X26, X26, 0xC
	0x03913628 CMP X22, X24
	0x0391362C STR S0, [X25], #0x10
	0x03913630 ADD X28, X28, 0xC
	0x03913634 B.NE 0x391353C
	0x03913638 LDP X20, X19, [X31 + 0x80]
	0x0391363C LDP X22, X21, [X31 + 0x70]
	0x03913640 LDP X24, X23, [X31 + 0x60]
	0x03913644 LDP X26, X25, [X31 + 0x50]
	0x03913648 LDP X28, X27, [X31 + 0x40]
	0x0391364C LDR X30, [X31 + 0x30]
	0x03913650 LDP D9, D8, [X31 + 0x20]
	0x03913654 ADD X31, X31, 0x90
	0x03913658 RET
	0x0391365C BL 0x1C16F28
	0x03913660 BL 0x1C16F20
	0x03913664 SUB X31, X31, 0xB0
	0x03913668 STP D11, D10, [X31 + 0x30]
	0x0391366C STP D9, D8, [X31 + 0x40]
	0x03913670 STP X29, X30, [X31 + 0x50]
	0x03913674 STP X28, X27, [X31 + 0x60]
	0x03913678 STP X26, X25, [X31 + 0x70]
	0x0391367C STP X24, X23, [X31 + 0x80]
	0x03913680 STP X22, X21, [X31 + 0x90]
	0x03913684 STP X20, X19, [X31 + 0xA0]
	0x03913688 ADRP X19, 0xACE000
	0x0391368C LDRB W8, [X19 + 0x826]
	0x03913690 MOV X21, X0
	0x03913694 TBNZ X8, 0x0, 0x39136B8
	0x03913698 ADRP X0, 0x83A000
	0x0391369C LDR X0, [X0 + 0xE78]
	0x039136A0 BL 0x1C16CF4
	0x039136A4 ADRP X0, 0x7E2000
	0x039136A8 LDR X0, [X0 + 0x9B0]
	0x039136AC BL 0x1C16CF4
	0x039136B0 MOVZ W8, 0x1
	0x039136B4 STRB W8, [X19 + 0x826]
	0x039136B8 CBZ X21, 0x3913B1C
	0x039136BC ADRP X8, 0x83A000
	0x039136C0 LDR X24, [X21 + 0x58]
	0x039136C4 LDR X8, [X8 + 0xE78]
	0x039136C8 CBZ X24, 0x39136D4
	0x039136CC LDR W20, [X24 + 0x18]
	0x039136D0 B 0x39136D8
	0x039136D4 MOV W20, W31
	0x039136D8 LDR X0, [X8]
	0x039136DC LDR X22, [X21 + 0x28]
	0x039136E0 LDR W8, [X0 + 0xE0]
	0x039136E4 CBNZ W8, 0x39136EC
	0x039136E8 BL 0x1C16DFC
	0x039136EC MOV W0, W20
	0x039136F0 BL 0x3913068
	0x039136F4 MOVZ W1, 0x40
	0x039136F8 MOV X0, X21
	0x039136FC BL 0x39112BC
	0x03913700 TBZ X0, 0x0, 0x391370C
	0x03913704 LDR X19, [X21 + 0x80]
	0x03913708 B 0x3913728
	0x0391370C ADRP X8, 0x7E2000
	0x03913710 LDR X8, [X8 + 0x9B0]
	0x03913714 MOV W1, W20
	0x03913718 LDR X0, [X8]
	0x0391371C BL 0x1C16D6C
	0x03913720 MOV X19, X0
	0x03913724 STR X0, [X21 + 0x80]
	0x03913728 CMP W20, 0x1
	0x0391372C B.LT 0x3913760
	0x03913730 CBZ X19, 0x3913B1C
	0x03913734 LDR W9, [X19 + 0x18]
	0x03913738 MOV X8, X31
	0x0391373C MOV W10, W20
	0x03913740 ADD X11, X19, 0x28
	0x03913744 CMP X8, X9
	0x03913748 B.CS 0x3913A54
	0x0391374C ADD X8, X8, 0x1
	0x03913750 STUR X31, [X11 - 0x8]

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+80], X29
	003 Move [X31+88], X30
	004 Move [X31+96], X28
	005 Move [X31+104], X27
	006 Move [X31+112], X26
	007 Move [X31+120], X25
	008 Move [X31+128], X24
	009 Move [X31+136], X23
	010 Move [X31+144], X22
	011 Move [X31+152], X21
	012 Move [X31+160], X20
	013 Move [X31+168], X19
	014 Move X19, 0xACF000
	015 Move W8, [X19+2127]
	016 Move X20, X1
	017 Move X26, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {51}
	022 Move X0, 0x809000
	023 Move X0, [X0+1952]
	024 Call 0x1C17CF4
	025 Move X0, 0x809000
	026 Move X0, [X0+1960]
	027 Call 0x1C17CF4
	028 Move X0, 0x83C000
	029 Move X0, [X0+16]
	030 Call 0x1C17CF4
	031 Move X0, 0x83C000
	032 Move X0, [X0+48]
	033 Call 0x1C17CF4
	034 Move X0, 0x83C000
	035 Move X0, [X0+56]
	036 Call 0x1C17CF4
	037 Move X0, 0x83C000
	038 Move X0, [X0+8]
	039 Call 0x1C17CF4
	040 Move X0, 0x7E1000
	041 Move X0, [X0+1432]
	042 Call 0x1C17CF4
	043 Move X0, 0x83C000
	044 Move X0, [X0+24]
	045 Call 0x1C17CF4
	046 Move X0, 0x83C000
	047 Move X0, [X0+32]
	048 Call 0x1C17CF4
	049 Move W8, 1
	050 Move [X19+2127], W8
	051 Move X19, 0x83C000
	052 Move X23, 0x7E1000
	053 Move X8, [X26+88]
	054 Move X19, [X19+24]
	055 Move X23, [X23+1432]
	056 Move [X31], X20
	057 Compare X8, 0
	058 JumpIfEqual {78}
	059 Move W29, [X8+24]
	060 Compare X20, 0
	061 JumpIfEqual {81}
	062 Move X10, 0x809000
	063 Move X8, [X20]
	064 Move X10, [X10+1952]
	065 NotImplemented "Instruction LDRH not yet implemented."
	066 Move X1, [X10]
	067 Compare X9, 0
	068 JumpIfEqual {75}
	069 Move X10, [X8+176]
	070 Add X10, X10, 8
	071 NotImplemented "Instruction LDUR not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Subtract X9, X9, 1
	074 Add X10, X10, 16
	075 Move X0, X20
	076 Move W2, W31
	077 Call 0x1C5D788
	078 Move W29, W31
	079 Compare X20, 0
	080 JumpIfNotEqual {62}
	081 Move W8, 1
	082 Move [X31+68], W8
	083 Move W27, W29
	084 NotImplemented "Instruction LDRSW not yet implemented."
	085 Add X8, X8, X9
	086 Add X0, X8, 312
	087 Move X8, [X0]
	088 Move X1, [X0+8]
	089 Move X0, X20
	090 NotImplemented "Instruction BLR not yet implemented."
	091 Move W27, W0
	092 Move [X31+68], W31
	093 Move X0, [X19]
	094 Move W1, W27
	095 Call 0x1C17D6C
	096 Move X25, [X26+136]
	097 Move X24, [X26+88]
	098 Move X19, [X26+96]
	099 Move X20, X0
	100 Move X0, X26
	101 Call ProBuilderMesh.GetTangents, X0
	102 Move X21, X0
	103 Move X0, X26
	104 Call ProBuilderMesh.GetNormals, X0
	105 Move X22, X0
	106 Move X0, X26
	107 Call ProBuilderMesh.get_mesh, X0
	108 Move X8, [X23]
	109 Move X23, X0
	110 Move W9, [X8+224]
	111 Compare W9, 0
	112 JumpIfNotEqual {115}
	113 Move X0, X8
	114 Call 0x1C17DFC
	115 Move X0, X23
	116 Move X1, X31
	117 Move X2, X31
	118 Call Object.op_Inequality, X0, X1
	119 Move X23, X31
	120 Move TEMP, X0
	121 And TEMP, TEMP, 1
	122 Compare TEMP, 1
	123 JumpIfNotEqual {131}
	124 Move X0, X26
	125 Call ProBuilderMesh.get_mesh, X0
	126 Compare X0, 0
	127 JumpIfEqual {446}
	128 Move X1, X31
	129 Call Mesh.get_uv2, X0
	130 Move X23, X0
	131 Move [X31+24], W27
	132 Move [X31+72], X25
	133 Move X25, 0x83C000
	134 Move X25, [X25+8]
	135 Move X28, 0x83C000
	136 Move X0, [X25]
	137 Move X28, [X28+16]
	138 Call 0x1C17F10
	139 Move X1, [X28]
	140 Move X27, X0
	141 Call List`1<Vector4>..ctor, X0
	142 Move X0, [X25]
	143 Call 0x1C17F10
	144 Move X1, [X28]
	145 Move X25, X0
	146 Call List`1<Vector4>..ctor, X0
	147 Move W1, 2
	148 Move X0, X26
	149 Move X2, X27
	150 Move [X31+16], X27
	151 Call ProBuilderMesh.GetUVs, X0, X1, X2
	152 Move W1, 3
	153 Move X0, X26
	154 Move X2, X25
	155 Move [X31+8], X25
	156 Call ProBuilderMesh.GetUVs, X0, X1, X2
	157 Compare X24, 0
	158 JumpIfEqual {163}
	159 Move W8, [X24+24]
	160 NotImplemented "Instruction CMP not yet implemented."
	161 NotImplemented "Instruction CSET not yet implemented."
	162 Move [X31+64], W8
	163 Move [X31+64], W31
	164 Move X28, [X31+72]
	165 Move W9, [X31+24]
	166 Compare X28, 0
	167 JumpIfEqual {171}
	168 Move W8, [X28+24]
	169 NotImplemented "Instruction CMP not yet implemented."
	170 NotImplemented "Instruction CSET not yet implemented."
	171 Move W8, 1
	172 Move [X31+60], W8
	173 Compare X22, 0
	174 JumpIfEqual {178}
	175 Move W8, [X22+24]
	176 NotImplemented "Instruction CMP not yet implemented."
	177 NotImplemented "Instruction CSET not yet implemented."
	178 Move W8, 1
	179 Move [X31+56], W8
	180 Compare X21, 0
	181 JumpIfEqual {185}
	182 Move W8, [X21+24]
	183 NotImplemented "Instruction CMP not yet implemented."
	184 NotImplemented "Instruction CSET not yet implemented."
	185 Move W8, 1
	186 Move [X31+52], W8
	187 Compare X19, 0
	188 JumpIfEqual {192}
	189 Move W8, [X19+24]
	190 NotImplemented "Instruction CMP not yet implemented."
	191 NotImplemented "Instruction CSET not yet implemented."
	192 Move W8, 1
	193 Move [X31+48], W8
	194 Compare X23, 0
	195 JumpIfEqual {199}
	196 Move W8, [X23+24]
	197 NotImplemented "Instruction CMP not yet implemented."
	198 NotImplemented "Instruction CSET not yet implemented."
	199 Move W8, 1
	200 Move [X31+44], W8
	201 Move X8, [X31+16]
	202 Compare X8, 0
	203 JumpIfEqual {446}
	204 Move X8, [X31+8]
	205 Compare X8, 0
	206 JumpIfEqual {446}
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Move X8, [X31+16]
	209 Move X26, X31
	210 Move W10, [X8+24]
	211 Move X8, [X31+8]
	212 Move W8, [X8+24]
	213 Move [X31+36], W8
	214 Move [X31+40], W10
	215 Move W8, W9
	216 Move [X31+24], X8
	217 Move X8, 0x83C000
	218 Move X8, [X8+32]
	219 Move X0, [X8]
	220 Call 0x1C17F10
	221 Move X1, X31
	222 Move X27, X0
	223 Call Vertex..ctor, X0
	224 Compare X20, 0
	225 JumpIfEqual {446}
	226 Move W8, [X20+24]
	227 NotImplemented "Instruction CMP not yet implemented."
	228 Move W8, [X31+68]
	229 Add X25, X20, X26
	230 Move [X25+32], X27
	231 Move TEMP, X8
	232 And TEMP, TEMP, 1
	233 Compare TEMP, 1
	234 JumpIfNotEqual {236}
	235 Move W27, W26
	236 Move X27, [X31]
	237 Move X10, 0x809000
	238 Move X8, [X27]
	239 NotImplemented "Instruction LDRH not yet implemented."
	240 Move X10, [X10+1960]
	241 Move X1, [X10]
	242 Compare X9, 0
	243 JumpIfEqual {250}
	244 Move X10, [X8+176]
	245 Add X10, X10, 8
	246 NotImplemented "Instruction LDUR not yet implemented."
	247 NotImplemented "Instruction CMP not yet implemented."
	248 Subtract X9, X9, 1
	249 Add X10, X10, 16
	250 Move X0, X27
	251 Move W2, W31
	252 Call 0x1C5D788
	253 NotImplemented "Instruction LDRSW not yet implemented."
	254 Add X8, X8, X9
	255 Add X0, X8, 312
	256 Move X8, [X0]
	257 Move X2, [X0+8]
	258 Move X0, X27
	259 Move W1, W26
	260 NotImplemented "Instruction BLR not yet implemented."
	261 Move W27, W0
	262 Move W8, [X31+64]
	263 Compare W8, 0
	264 JumpIfEqual {282}
	265 Move W8, [X20+24]
	266 NotImplemented "Instruction CMP not yet implemented."
	267 Compare X24, 0
	268 JumpIfEqual {446}
	269 Move W8, [X24+24]
	270 NotImplemented "Instruction CMP not yet implemented."
	271 Move X0, [X25]
	272 Compare X0, 0
	273 JumpIfEqual {446}
	274 Move X8, W27
	275 Move W9, 12
	276 NotImplemented "Instruction MADD not yet implemented."
	277 Move S1, [X8+36]
	278 Move S2, [X8+40]
	279 Move V0, [X8+32]
	280 Move X1, X31
	281 Call Vertex.set_position, X0, X1
	282 Move W8, [X31+60]
	283 Move TEMP, X8
	284 And TEMP, TEMP, 1
	285 Compare TEMP, 1
	286 JumpIfEqual {305}
	287 Move W8, [X20+24]
	288 NotImplemented "Instruction CMP not yet implemented."
	289 Compare X28, 0
	290 JumpIfEqual {446}
	291 Move W8, [X28+24]
	292 NotImplemented "Instruction CMP not yet implemented."
	293 Move X0, [X25]
	294 Compare X0, 0
	295 JumpIfEqual {446}
	296 Move W8, W27
	297 Move X8, W8
	298 Add X8, X28, X8
	299 Move S2, [X8+40]
	300 Move S3, [X8+44]
	301 Move S0, [X8+32]
	302 Move S1, [X8+36]
	303 Move X1, X31
	304 Call Vertex.set_color, X0, X1
	305 Move W8, [X31+56]
	306 Move TEMP, X8
	307 And TEMP, TEMP, 1
	308 Compare TEMP, 1
	309 JumpIfEqual {328}
	310 Move W8, [X20+24]
	311 NotImplemented "Instruction CMP not yet implemented."
	312 Compare X22, 0
	313 JumpIfEqual {446}
	314 Move W8, [X22+24]
	315 NotImplemented "Instruction CMP not yet implemented."
	316 Move X0, [X25]
	317 Compare X0, 0
	318 JumpIfEqual {446}
	319 Move W8, W27
	320 Move X8, W8
	321 Move W9, 12
	322 NotImplemented "Instruction MADD not yet implemented."
	323 Move S1, [X8+36]
	324 Move S2, [X8+40]
	325 Move V0, [X8+32]
	326 Move X1, X31
	327 Call Vertex.set_normal, X0, X1
	328 Move W8, [X31+52]
	329 Move TEMP, X8
	330 And TEMP, TEMP, 1
	331 Compare TEMP, 1
	332 JumpIfEqual {351}
	333 Move W8, [X20+24]
	334 NotImplemented "Instruction CMP not yet implemented."
	335 Compare X21, 0
	336 JumpIfEqual {446}
	337 Move W8, [X21+24]
	338 NotImplemented "Instruction CMP not yet implemented."
	339 Move X0, [X25]
	340 Compare X0, 0
	341 JumpIfEqual {446}
	342 Move W8, W27
	343 Move X8, W8
	344 Add X8, X21, X8
	345 Move S2, [X8+40]
	346 Move S3, [X8+44]
	347 Move S0, [X8+32]
	348 Move S1, [X8+36]
	349 Move X1, X31
	350 Call Vertex.set_tangent, X0, X1
	351 Move W8, [X31+48]
	352 Move TEMP, X8
	353 And TEMP, TEMP, 1
	354 Compare TEMP, 1
	355 JumpIfEqual {372}
	356 Move W8, [X20+24]
	357 NotImplemented "Instruction CMP not yet implemented."
	358 Compare X19, 0
	359 JumpIfEqual {446}
	360 Move W8, [X19+24]
	361 NotImplemented "Instruction CMP not yet implemented."
	362 Move X0, [X25]
	363 Compare X0, 0
	364 JumpIfEqual {446}
	365 Move W8, W27
	366 Move X8, W8
	367 Add X8, X19, X8
	368 Move S0, [X8+32]
	369 Move S1, [X8+36]
	370 Move X1, X31
	371 Call Vertex.set_uv0, X0, X1
	372 Move W8, [X31+44]
	373 Move TEMP, X8
	374 And TEMP, TEMP, 1
	375 Compare TEMP, 1
	376 JumpIfEqual {393}
	377 Move W8, [X20+24]
	378 NotImplemented "Instruction CMP not yet implemented."
	379 Compare X23, 0
	380 JumpIfEqual {446}
	381 Move W8, [X23+24]
	382 NotImplemented "Instruction CMP not yet implemented."
	383 Move X0, [X25]
	384 Compare X0, 0
	385 JumpIfEqual {446}
	386 Move W8, W27
	387 Move X8, W8
	388 Add X8, X23, X8
	389 Move S0, [X8+32]
	390 Move S1, [X8+36]
	391 Move X1, X31
	392 Call Vertex.set_uv2, X0, X1
	393 Move W8, [X31+40]
	394 NotImplemented "Instruction CMP not yet implemented."
	395 Move W8, [X20+24]
	396 NotImplemented "Instruction CMP not yet implemented."
	397 Move X8, 0x83C000
	398 Move X28, [X25]
	399 Move X8, [X8+56]
	400 Move X0, [X31+16]
	401 Move W1, W27
	402 Move X2, [X8]
	403 Call List`1<Vector4>.get_Item, X0, X1
	404 Compare X28, 0
	405 JumpIfEqual {446}
	406 Move X0, X28
	407 Move X1, X31
	408 Call Vertex.set_uv3, X0, X1
	409 Move X28, [X31+72]
	410 Move W8, [X31+36]
	411 NotImplemented "Instruction CMP not yet implemented."
	412 Move W8, [X20+24]
	413 NotImplemented "Instruction CMP not yet implemented."
	414 Move X8, 0x83C000
	415 Move X28, [X25]
	416 Move X8, [X8+56]
	417 Move X0, [X31+8]
	418 Move W1, W27
	419 Move X2, [X8]
	420 Call List`1<Vector4>.get_Item, X0, X1
	421 Compare X28, 0
	422 JumpIfEqual {446}
	423 Move X0, X28
	424 Move X1, X31
	425 Call Vertex.set_uv4, X0, X1
	426 Move X28, [X31+72]
	427 Move X8, [X31+24]
	428 Add X26, X26, 1
	429 NotImplemented "Instruction CMP not yet implemented."
	430 Move X0, X20
	431 Move X20, [X31+160]
	432 Move X19, [X31+168]
	433 Move X22, [X31+144]
	434 Move X21, [X31+152]
	435 Move X24, [X31+128]
	436 Move X23, [X31+136]
	437 Move X26, [X31+112]
	438 Move X25, [X31+120]
	439 Move X28, [X31+96]
	440 Move X27, [X31+104]
	441 Move X29, [X31+80]
	442 Move X30, [X31+88]
	443 Add X31, X31, 176
	444 Return X0
	445 Call 0x1C17F28
	446 Call 0x1C17F20

Method: System.Void GetVerticesInList(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Vertex> vertices)

Disassembly:
	0x039174E8 LDR X30, [X31], #0x20
	0x039174EC RET
	0x039174F0 STP X30, X21, [X31 - 0x20]!
	0x039174F4 STP X20, X19, [X31 + 0x10]
	0x039174F8 ADRP X21, 0xACA000
	0x039174FC LDRB W8, [X21 + 0x858]
	0x03917500 MOV X20, X1
	0x03917504 MOV X19, X0
	0x03917508 TBNZ X8, 0x0, 0x391752C
	0x0391750C ADRP X0, 0x837000
	0x03917510 LDR X0, [X0 + 0x178]
	0x03917514 BL 0x1C16CF4
	0x03917518 ADRP X0, 0x836000
	0x0391751C LDR X0, [X0 + 0xF90]
	0x03917520 BL 0x1C16CF4
	0x03917524 MOVZ W8, 0x1
	0x03917528 STRB W8, [X21 + 0x858]
	0x0391752C CBZ X20, 0x3917578
	0x03917530 ADRP X10, 0x836000
	0x03917534 LDR X8, [X20]
	0x03917538 LDR X10, [X10 + 0xF90]
	0x0391753C LDRH W9, [X8 + 0x12E]
	0x03917540 LDR X1, [X10]
	0x03917544 CBZ X9, 0x3917568
	0x03917548 LDR X10, [X8 + 0xB0]
	0x0391754C ADD X10, X10, 0x8
	0x03917550 LDUR X11, [X10 - 0x8]
	0x03917554 CMP X11, X1
	0x03917558 B.EQ 0x3917580
	0x0391755C SUBS X9, X9, 0x1
	0x03917560 ADD X10, X10, 0x10
	0x03917564 B.NE 0x3917550
	0x03917568 MOV X0, X20
	0x0391756C MOV W2, W31
	0x03917570 BL 0x1C5C788
	0x03917574 B 0x391758C
	0x03917578 MOV X0, X31
	0x0391757C B 0x39175C0
	0x03917580 LDRSW X9, [X10]
	0x03917584 ADD X8, X8, X9, 0x4, LSL
	0x03917588 ADD X0, X8, 0x138
	0x0391758C LDP X8, X1, [X0]
	0x03917590 MOV X0, X20
	0x03917594 BLR X8
	0x03917598 LDR X8, [X19 + 0x58]
	0x0391759C CBZ X8, 0x39175A4
	0x039175A0 LDR W8, [X8 + 0x18]
	0x039175A4 CMP W0, W8
	0x039175A8 B.NE 0x39175D0
	0x039175AC ADRP X8, 0x837000
	0x039175B0 LDR X8, [X8 + 0x178]
	0x039175B4 MOV X0, X20
	0x039175B8 LDR X1, [X8]
	0x039175BC BL 0x21D5A24
	0x039175C0 STR X0, [X19 + 0x78]
	0x039175C4 LDP X20, X19, [X31 + 0x10]
	0x039175C8 LDP X30, X21, [X31], #0x20
	0x039175CC RET
	0x039175D0 ADRP X0, 0x7E4000
	0x039175D4 LDR X0, [X0 + 0x760]
	0x039175D8 BL 0x1C16D08
	0x039175DC BL 0x1C16F10
	0x039175E0 MOV X19, X0
	0x039175E4 ADRP X0, 0x7E6000
	0x039175E8 LDR X0, [X0 + 0xEC8]
	0x039175EC BL 0x1C16D08
	0x039175F0 MOV X20, X0
	0x039175F4 ADRP X0, 0x837000
	0x039175F8 LDR X0, [X0 + 0x498]
	0x039175FC BL 0x1C16D08
	0x03917600 MOV X2, X0
	0x03917604 MOV X0, X19
	0x03917608 MOV X1, X20
	0x0391760C MOV X3, X31
	0x03917610 BL 0x3311888
	0x03917614 ADRP X0, 0x837000
	0x03917618 LDR X0, [X0 + 0x4A0]
	0x0391761C BL 0x1C16D08
	0x03917620 MOV X1, X0
	0x03917624 MOV X0, X19
	0x03917628 BL 0x1C16DEC
	0x0391762C LDR X0, [X0 + 0x78]
	0x03917630 RET
	0x03917634 STR X1, [X0 + 0x78]
	0x03917638 RET
	0x0391763C LDR X0, [X0 + 0x60]
	0x03917640 RET
	0x03917644 STR X1, [X0 + 0x60]
	0x03917648 RET
	0x0391764C LDR X0, [X0 + 0x68]
	0x03917650 RET
	0x03917654 STR X1, [X0 + 0x68]
	0x03917658 RET
	0x0391765C LDR X0, [X0 + 0x70]
	0x03917660 RET
	0x03917664 STR X1, [X0 + 0x70]
	0x03917668 RET
	0x0391766C STR X30, [X31 - 0x20]!
	0x03917670 STP X20, X19, [X31 + 0x10]
	0x03917674 ADRP X20, 0xACA000
	0x03917678 LDRB W8, [X20 + 0x85A]
	0x0391767C MOV X19, X0
	0x03917680 TBNZ X8, 0x0, 0x39176A4
	0x03917684 ADRP X0, 0x837000
	0x03917688 LDR X0, [X0 + 0x4A8]
	0x0391768C BL 0x1C16CF4
	0x03917690 ADRP X0, 0x837000
	0x03917694 LDR X0, [X0 + 0x4B0]
	0x03917698 BL 0x1C16CF4
	0x0391769C MOVZ W8, 0x1
	0x039176A0 STRB W8, [X20 + 0x85A]
	0x039176A4 LDR X19, [X19 + 0x60]
	0x039176A8 CBZ X19, 0x39176D8
	0x039176AC ADRP X8, 0x837000
	0x039176B0 LDR X8, [X8 + 0x4B0]
	0x039176B4 ADRP X20, 0x837000
	0x039176B8 LDR X0, [X8]
	0x039176BC LDR X20, [X20 + 0x4A8]
	0x039176C0 BL 0x1C16F10
	0x039176C4 LDR X2, [X20]
	0x039176C8 MOV X1, X19
	0x039176CC MOV X20, X0
	0x039176D0 BL 0x257C278
	0x039176D4 B 0x39176DC
	0x039176D8 MOV X20, X31
	0x039176DC MOV X0, X20
	0x039176E0 LDP X20, X19, [X31 + 0x10]
	0x039176E4 LDR X30, [X31], #0x20
	0x039176E8 RET
	0x039176EC STP X30, X21, [X31 - 0x20]!
	0x039176F0 STP X20, X19, [X31 + 0x10]
	0x039176F4 ADRP X21, 0xACA000
	0x039176F8 LDRB W8, [X21 + 0x85B]
	0x039176FC MOV X20, X1
	0x03917700 MOV X19, X0
	0x03917704 TBNZ X8, 0x0, 0x3917728
	0x03917708 ADRP X0, 0x837000
	0x0391770C LDR X0, [X0 + 0x4B8]
	0x03917710 BL 0x1C16CF4
	0x03917714 ADRP X0, 0x836000
	0x03917718 LDR X0, [X0 + 0xA90]
	0x0391771C BL 0x1C16CF4
	0x03917720 MOVZ W8, 0x1
	0x03917724 STRB W8, [X21 + 0x85B]
	0x03917728 CBZ X20, 0x3917774
	0x0391772C ADRP X10, 0x836000
	0x03917730 LDR X8, [X20]
	0x03917734 LDR X10, [X10 + 0xA90]
	0x03917738 LDRH W9, [X8 + 0x12E]
	0x0391773C LDR X1, [X10]
	0x03917740 CBZ X9, 0x3917764
	0x03917744 LDR X10, [X8 + 0xB0]
	0x03917748 ADD X10, X10, 0x8
	0x0391774C LDUR X11, [X10 - 0x8]
	0x03917750 CMP X11, X1
	0x03917754 B.EQ 0x391777C
	0x03917758 SUBS X9, X9, 0x1
	0x0391775C ADD X10, X10, 0x10
	0x03917760 B.NE 0x391774C
	0x03917764 MOV X0, X20
	0x03917768 MOV W2, W31
	0x0391776C BL 0x1C5C788
	0x03917770 B 0x3917788
	0x03917774 MOV X0, X31
	0x03917778 B 0x39177BC
	0x0391777C LDRSW X9, [X10]
	0x03917780 ADD X8, X8, X9, 0x4, LSL
	0x03917784 ADD X0, X8, 0x138
	0x03917788 LDP X8, X1, [X0]
	0x0391778C MOV X0, X20
	0x03917790 BLR X8
	0x03917794 LDR X8, [X19 + 0x58]
	0x03917798 CBZ X8, 0x39177A0
	0x0391779C LDR W8, [X8 + 0x18]
	0x039177A0 CMP W0, W8
	0x039177A4 B.NE 0x39177CC
	0x039177A8 ADRP X8, 0x837000
	0x039177AC LDR X8, [X8 + 0x4B8]
	0x039177B0 MOV X0, X20
	0x039177B4 LDR X1, [X8]
	0x039177B8 BL 0x21D5914
	0x039177BC STR X0, [X19 + 0x60]
	0x039177C0 LDP X20, X19, [X31 + 0x10]
	0x039177C4 LDP X30, X21, [X31], #0x20
	0x039177C8 RET
	0x039177CC ADRP X0, 0x7E4000
	0x039177D0 LDR X0, [X0 + 0x760]
	0x039177D4 BL 0x1C16D08
	0x039177D8 BL 0x1C16F10
	0x039177DC MOV X19, X0
	0x039177E0 ADRP X0, 0x7E6000
	0x039177E4 LDR X0, [X0 + 0xEC8]
	0x039177E8 BL 0x1C16D08
	0x039177EC MOV X1, X0
	0x039177F0 MOV X0, X19
	0x039177F4 MOV X2, X31
	0x039177F8 BL 0x3316014
	0x039177FC ADRP X0, 0x837000
	0x03917800 LDR X0, [X0 + 0x4C0]
	0x03917804 BL 0x1C16D08
	0x03917808 MOV X1, X0
	0x0391780C MOV X0, X19
	0x03917810 BL 0x1C16DEC
	0x03917814 STP X30, X21, [X31 - 0x20]!
	0x03917818 STP X20, X19, [X31 + 0x10]
	0x0391781C ADRP X21, 0xACA000
	0x03917820 LDRB W8, [X21 + 0x85D]
	0x03917824 MOV W20, W1
	0x03917828 MOV X19, X0
	0x0391782C TBNZ X8, 0x0, 0x3917868
	0x03917830 ADRP X0, 0x837000
	0x03917834 LDR X0, [X0 + 0x4C8]
	0x03917838 BL 0x1C16CF4
	0x0391783C ADRP X0, 0x837000
	0x03917840 LDR X0, [X0 + 0x4D0]
	0x03917844 BL 0x1C16CF4
	0x03917848 ADRP X0, 0x837000
	0x0391784C LDR X0, [X0 + 0x4A8]
	0x03917850 BL 0x1C16CF4
	0x03917854 ADRP X0, 0x837000
	0x03917858 LDR X0, [X0 + 0x4B0]
	0x0391785C BL 0x1C16CF4
	0x03917860 MOVZ W8, 0x1
	0x03917864 STRB W8, [X21 + 0x85D]
	0x03917868 CMP W20, 0x3
	0x0391786C B.HI 0x39178D4
	0x03917870 ADRP X9, 0xFFFFFFFFFD280000
	0x03917874 MOV W8, W20
	0x03917878 ADD X9, X9, 0xA3A
	0x0391787C ADR X10, 0x10
	0x03917880 LDRB W11, [X9, X8, LSL]
	0x03917884 ADD X10, X10, X11, 0x2, LSL
	0x03917888 BR X10
	0x0391788C ADRP X8, 0x837000
	0x03917890 LDR X19, [X19 + 0x60]
	0x03917894 LDR X8, [X8 + 0x4B0]
	0x03917898 LDR X0, [X8]
	0x0391789C B 0x3917904
	0x039178A0 LDR X0, [X19 + 0x68]
	0x039178A4 CBZ X0, 0x39178D4
	0x039178A8 ADRP X8, 0x837000
	0x039178AC LDR X8, [X8 + 0x4C8]
	0x039178B0 LDR X1, [X8]
	0x039178B4 BL 0x21B4548
	0x039178B8 ADRP X8, 0x837000
	0x039178BC LDR X8, [X8 + 0x4D0]
	0x039178C0 LDR X1, [X8]
	0x039178C4 BL 0x21D7B68
	0x039178C8 B 0x39178F0
	0x039178CC LDR X0, [X19 + 0x70]
	0x039178D0 CBNZ X0, 0x39178A8
	0x039178D4 MOV X0, X31
	0x039178D8 B 0x3917924
	0x039178DC MOV X0, X19
	0x039178E0 BL 0x3912CAC
	0x039178E4 CBZ X0, 0x3917930
	0x039178E8 MOV X1, X31
	0x039178EC BL 0x3C1816C
	0x039178F0 ADRP X8, 0x837000
	0x039178F4 LDR X8, [X8 + 0x4B0]
	0x039178F8 MOV X19, X0
	0x039178FC LDR X8, [X8]
	0x03917900 MOV X0, X8
	0x03917904 BL 0x1C16F10
	0x03917908 ADRP X8, 0x837000
	0x0391790C LDR X8, [X8 + 0x4A8]
	0x03917910 MOV X1, X19
	0x03917914 MOV X20, X0
	0x03917918 LDR X2, [X8]
	0x0391791C BL 0x257C278
	0x03917920 MOV X0, X20
	0x03917924 LDP X20, X19, [X31 + 0x10]
	0x03917928 LDP X30, X21, [X31], #0x20
	0x0391792C RET
	0x03917930 BL 0x1C16F20
	0x03917934 STP X30, X23, [X31 - 0x30]!
	0x03917938 STP X22, X21, [X31 + 0x10]
	0x0391793C STP X20, X19, [X31 + 0x20]
	0x03917940 ADRP X22, 0xACA000
	0x03917944 LDRB W8, [X22 + 0x85E]
	0x03917948 MOV X19, X2
	0x0391794C MOV W21, W1
	0x03917950 MOV X20, X0
	0x03917954 TBNZ X8, 0x0, 0x39179C0
	0x03917958 ADRP X0, 0x837000
	0x0391795C LDR X0, [X0 + 0x4D8]
	0x03917960 BL 0x1C16CF4
	0x03917964 ADRP X0, 0x837000
	0x03917968 LDR X0, [X0 + 0x4B8]
	0x0391796C BL 0x1C16CF4
	0x03917970 ADRP X0, 0x837000
	0x03917974 LDR X0, [X0 + 0x4E0]
	0x03917978 BL 0x1C16CF4
	0x0391797C ADRP X0, 0x837000
	0x03917980 LDR X0, [X0 + 0x4E8]
	0x03917984 BL 0x1C16CF4
	0x03917988 ADRP X0, 0x837000
	0x0391798C LDR X0, [X0 + 0x8]
	0x03917990 BL 0x1C16CF4
	0x03917994 ADRP X0, 0x837000
	0x03917998 LDR X0, [X0 + 0x4F0]
	0x0391799C BL 0x1C16CF4
	0x039179A0 ADRP X0, 0x837000
	0x039179A4 LDR X0, [X0 + 0x4F8]
	0x039179A8 BL 0x1C16CF4
	0x039179AC ADRP X0, 0x837000
	0x039179B0 LDR X0, [X0 + 0x500]
	0x039179B4 BL 0x1C16CF4
	0x039179B8 MOVZ W8, 0x1
	0x039179BC STRB W8, [X22 + 0x85E]
	0x039179C0 CMP W21, 0x3
	0x039179C4 B.HI 0x3917C00
	0x039179C8 ADRP X9, 0xFFFFFFFFFD280000
	0x039179CC MOV W8, W21
	0x039179D0 ADD X9, X9, 0xA3E
	0x039179D4 ADR X10, 0x10
	0x039179D8 LDRB W11, [X9, X8, LSL]
	0x039179DC ADD X10, X10, X11, 0x2, LSL
	0x039179E0 BR X10
	0x039179E4 CBZ X19, 0x3917BC4
	0x039179E8 ADRP X23, 0x837000
	0x039179EC LDR X23, [X23 + 0x500]
	0x039179F0 LDR X0, [X23]
	0x039179F4 LDR W8, [X0 + 0xE0]
	0x039179F8 CBNZ W8, 0x3917A04
	0x039179FC BL 0x1C16DFC
	0x03917A00 LDR X0, [X23]
	0x03917A04 LDR X8, [X0 + 0xB8]
	0x03917A08 LDR X21, [X8 + 0x8]
	0x03917A0C CBNZ X21, 0x3917A60
	0x03917A10 LDR W8, [X0 + 0xE0]
	0x03917A14 CBNZ W8, 0x3917A20
	0x03917A18 BL 0x1C16DFC
	0x03917A1C LDR X0, [X23]
	0x03917A20 ADRP X9, 0x837000
	0x03917A24 LDR X8, [X0 + 0xB8]
	0x03917A28 LDR X9, [X9 + 0x4E0]
	0x03917A2C LDR X22, [X8]
	0x03917A30 LDR X0, [X9]
	0x03917A34 BL 0x1C16F10
	0x03917A38 ADRP X8, 0x837000
	0x03917A3C LDR X8, [X8 + 0x4F0]
	0x03917A40 MOV X1, X22
	0x03917A44 MOV X3, X31
	0x03917A48 MOV X21, X0
	0x03917A4C LDR X2, [X8]
	0x03917A50 BL 0x2D34AEC
	0x03917A54 LDR X8, [X23]
	0x03917A58 LDR X8, [X8 + 0xB8]
	0x03917A5C STR X21, [X8 + 0x8]
	0x03917A60 ADRP X8, 0x837000
	0x03917A64 LDR X8, [X8 + 0x4D8]
	0x03917A68 MOV X0, X19
	0x03917A6C MOV X1, X21
	0x03917A70 LDR X2, [X8]
	0x03917A74 BL 0x21D03DC
	0x03917A78 ADRP X8, 0x837000
	0x03917A7C LDR X8, [X8 + 0x4B8]
	0x03917A80 LDR X1, [X8]
	0x03917A84 BL 0x21D5914
	0x03917A88 CBNZ X20, 0x3917BCC
	0x03917A8C B 0x3917C10
	0x03917A90 CBZ X19, 0x3917BB4
	0x03917A94 ADRP X8, 0x837000
	0x03917A98 LDR X8, [X8 + 0x8]
	0x03917A9C LDR X0, [X8]
	0x03917AA0 BL 0x1C16F10
	0x03917AA4 ADRP X8, 0x837000
	0x03917AA8 LDR X8, [X8 + 0x4E8]
	0x03917AAC MOV X1, X19
	0x03917AB0 MOV X21, X0
	0x03917AB4 LDR X2, [X8]
	0x03917AB8 BL 0x30CE710
	0x03917ABC CBNZ X20, 0x3917BBC
	0x03917AC0 B 0x3917C10
	0x03917AC4 MOV X0, X20
	0x03917AC8 BL 0x3912CAC
	0x03917ACC MOV X20, X0
	0x03917AD0 CBZ X19, 0x3917BD4
	0x03917AD4 ADRP X23, 0x837000
	0x03917AD8 LDR X23, [X23 + 0x500]
	0x03917ADC LDR X0, [X23]
	0x03917AE0 LDR W8, [X0 + 0xE0]
	0x03917AE4 CBNZ W8, 0x3917AF0
	0x03917AE8 BL 0x1C16DFC
	0x03917AEC LDR X0, [X23]
	0x03917AF0 LDR X8, [X0 + 0xB8]
	0x03917AF4 LDR X21, [X8 + 0x10]
	0x03917AF8 CBNZ X21, 0x3917B4C
	0x03917AFC LDR W8, [X0 + 0xE0]
	0x03917B00 CBNZ W8, 0x3917B0C
	0x03917B04 BL 0x1C16DFC
	0x03917B08 LDR X0, [X23]
	0x03917B0C ADRP X9, 0x837000
	0x03917B10 LDR X8, [X0 + 0xB8]
	0x03917B14 LDR X9, [X9 + 0x4E0]
	0x03917B18 LDR X22, [X8]
	0x03917B1C LDR X0, [X9]
	0x03917B20 BL 0x1C16F10
	0x03917B24 ADRP X8, 0x837000
	0x03917B28 LDR X8, [X8 + 0x4F8]
	0x03917B2C MOV X1, X22
	0x03917B30 MOV X3, X31
	0x03917B34 MOV X21, X0
	0x03917B38 LDR X2, [X8]
	0x03917B3C BL 0x2D34AEC
	0x03917B40 LDR X8, [X23]
	0x03917B44 LDR X8, [X8 + 0xB8]
	0x03917B48 STR X21, [X8 + 0x10]
	0x03917B4C ADRP X8, 0x837000
	0x03917B50 LDR X8, [X8 + 0x4D8]
	0x03917B54 MOV X0, X19
	0x03917B58 MOV X1, X21
	0x03917B5C LDR X2, [X8]
	0x03917B60 BL 0x21D03DC
	0x03917B64 ADRP X8, 0x837000
	0x03917B68 LDR X8, [X8 + 0x4B8]
	0x03917B6C LDR X1, [X8]
	0x03917B70 BL 0x21D5914
	0x03917B74 MOV X1, X0
	0x03917B78 CBNZ X20, 0x3917BDC
	0x03917B7C B 0x3917C10
	0x03917B80 CBZ X19, 0x3917BF4
	0x03917B84 ADRP X8, 0x837000
	0x03917B88 LDR X8, [X8 + 0x8]
	0x03917B8C LDR X0, [X8]
	0x03917B90 BL 0x1C16F10
	0x03917B94 ADRP X8, 0x837000
	0x03917B98 LDR X8, [X8 + 0x4E8]
	0x03917B9C MOV X1, X19
	0x03917BA0 MOV X21, X0
	0x03917BA4 LDR X2, [X8]
	0x03917BA8 BL 0x30CE710
	0x03917BAC CBNZ X20, 0x3917BFC
	0x03917BB0 B 0x3917C10
	0x03917BB4 MOV X21, X31
	0x03917BB8 CBZ X20, 0x3917C10
	0x03917BBC STR X21, [X20 + 0x68]
	0x03917BC0 B 0x3917C00
	0x03917BC4 MOV X0, X31
	0x03917BC8 CBZ X20, 0x3917C10
	0x03917BCC STR X0, [X20 + 0x60]
	0x03917BD0 B 0x3917C00
	0x03917BD4 MOV X1, X31
	0x03917BD8 CBZ X20, 0x3917C10
	0x03917BDC MOV X0, X20
	0x03917BE0 LDP X20, X19, [X31 + 0x20]
	0x03917BE4 LDP X22, X21, [X31 + 0x10]
	0x03917BE8 MOV X2, X31
	0x03917BEC LDP X30, X23, [X31], #0x30
	0x03917BF0 B 0x3C181B8
	0x03917BF4 MOV X21, X31
	0x03917BF8 CBZ X20, 0x3917C10
	0x03917BFC STR X21, [X20 + 0x70]
	0x03917C00 LDP X20, X19, [X31 + 0x20]
	0x03917C04 LDP X22, X21, [X31 + 0x10]
	0x03917C08 LDP X30, X23, [X31], #0x30
	0x03917C0C RET
	0x03917C10 BL 0x1C16F20
	0x03917C14 STR X30, [X31 - 0x30]!
	0x03917C18 STP X22, X21, [X31 + 0x10]
	0x03917C1C STP X20, X19, [X31 + 0x20]
	0x03917C20 LDR X8, [X0 + 0x28]
	0x03917C24 CBZ X8, 0x3917C84
	0x03917C28 LDR W21, [X8 + 0x18]
	0x03917C2C CMP W21, 0x1
	0x03917C30 B.LT 0x3917C84
	0x03917C34 MOV X19, X0
	0x03917C38 MOV W22, W31
	0x03917C3C MOV W20, W31
	0x03917C40 LDR W9, [X8 + 0x18]
	0x03917C44 CMP W22, W9
	0x03917C48 B.CS 0x3917C9C
	0x03917C4C ADD X8, X8, W22, 0x3, SXTW
	0x03917C50 LDR X0, [X8 + 0x20]
	0x03917C54 CBZ X0, 0x3917C80
	0x03917C58 MOV X1, X31
	0x03917C5C BL 0x38FFA80
	0x03917C60 CBZ X0, 0x3917C80
	0x03917C64 LDR W8, [X0 + 0x18]
	0x03917C68 ADD W22, W22, 0x1
	0x03917C6C CMP W21, W22
	0x03917C70 ADD W20, W20, W8
	0x03917C74 B.EQ 0x3917C88
	0x03917C78 LDR X8, [X19 + 0x28]
	0x03917C7C CBNZ X8, 0x3917C40
	0x03917C80 BL 0x1C16F20
	0x03917C84 MOV W20, W31
	0x03917C88 MOV W0, W20
	0x03917C8C LDP X20, X19, [X31 + 0x20]
	0x03917C90 LDP X22, X21, [X31 + 0x10]
	0x03917C94 LDR X30, [X31], #0x30
	0x03917C98 RET
	0x03917C9C BL 0x1C16F28
	0x03917CA0 STP X30, X23, [X31 - 0x30]!
	0x03917CA4 STP X22, X21, [X31 + 0x10]
	0x03917CA8 STP X20, X19, [X31 + 0x20]
	0x03917CAC ADRP X20, 0xACA000
	0x03917CB0 LDRB W8, [X20 + 0x85F]
	0x03917CB4 MOV X19, X0
	0x03917CB8 TBNZ X8, 0x0, 0x3917CF4
	0x03917CBC ADRP X0, 0x837000
	0x03917CC0 LDR X0, [X0 + 0x508]
	0x03917CC4 BL 0x1C16CF4
	0x03917CC8 ADRP X0, 0x837000
	0x03917CCC LDR X0, [X0 + 0x510]
	0x03917CD0 BL 0x1C16CF4
	0x03917CD4 ADRP X0, 0x837000
	0x03917CD8 LDR X0, [X0 + 0x518]
	0x03917CDC BL 0x1C16CF4
	0x03917CE0 ADRP X0, 0x837000
	0x03917CE4 LDR X0, [X0 + 0x500]
	0x03917CE8 BL 0x1C16CF4
	0x03917CEC MOVZ W8, 0x1
	0x03917CF0 STRB W8, [X20 + 0x85F]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], X29
	003 Move [X31+72], X30
	004 Move [X31+80], X28
	005 Move [X31+88], X27
	006 Move [X31+96], X26
	007 Move [X31+104], X25
	008 Move [X31+112], X24
	009 Move [X31+120], X23
	010 Move [X31+128], X22
	011 Move [X31+136], X21
	012 Move [X31+144], X20
	013 Move [X31+152], X19
	014 Move X20, 0xACB000
	015 Move W8, [X20+2128]
	016 Move X19, X1
	017 Move X25, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {48}
	022 Move X0, 0x838000
	023 Move X0, [X0+488]
	024 Call 0x1C17CF4
	025 Move X0, 0x837000
	026 Move X0, [X0+3936]
	027 Call 0x1C17CF4
	028 Move X0, 0x838000
	029 Move X0, [X0+16]
	030 Call 0x1C17CF4
	031 Move X0, 0x838000
	032 Move X0, [X0+48]
	033 Call 0x1C17CF4
	034 Move X0, 0x838000
	035 Move X0, [X0+56]
	036 Call 0x1C17CF4
	037 Move X0, 0x838000
	038 Move X0, [X0+8]
	039 Call 0x1C17CF4
	040 Move X0, 0x7DD000
	041 Move X0, [X0+1432]
	042 Call 0x1C17CF4
	043 Move X0, 0x838000
	044 Move X0, [X0+32]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X20+2128], W8
	048 Move X8, [X25+88]
	049 Compare X8, 0
	050 JumpIfEqual {54}
	051 Move W27, [X8+24]
	052 Compare X19, 0
	053 JumpIfNotEqual {57}
	054 Move W27, W31
	055 Compare X19, 0
	056 JumpIfEqual {558}
	057 Move X10, 0x838000
	058 Move X8, [X19]
	059 Move X10, [X10+488]
	060 Move X22, 0x7DD000
	061 NotImplemented "Instruction LDRH not yet implemented."
	062 Move X1, [X10]
	063 Move X22, [X22+1432]
	064 Compare X9, 0
	065 JumpIfEqual {72}
	066 Move X10, [X8+176]
	067 Add X10, X10, 8
	068 NotImplemented "Instruction LDUR not yet implemented."
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Subtract X9, X9, 1
	071 Add X10, X10, 16
	072 Move W2, 3
	073 Move X0, X19
	074 Call 0x1C5D788
	075 Move W9, [X10]
	076 Add W9, W9, 3
	077 Add X8, X8, W9
	078 Add X0, X8, 312
	079 Move X8, [X0]
	080 Move X1, [X0+8]
	081 Move X0, X19
	082 NotImplemented "Instruction BLR not yet implemented."
	083 Move X24, [X25+136]
	084 Move X28, [X25+88]
	085 Move X23, [X25+96]
	086 Move X0, X25
	087 Call ProBuilderMesh.GetTangents, X0
	088 Move X20, X0
	089 Move X0, X25
	090 Call ProBuilderMesh.GetNormals, X0
	091 Move X21, X0
	092 Move X0, X25
	093 Call ProBuilderMesh.get_mesh, X0
	094 Move X8, [X22]
	095 Move X22, X0
	096 Move W9, [X8+224]
	097 Compare W9, 0
	098 JumpIfNotEqual {101}
	099 Move X0, X8
	100 Call 0x1C17DFC
	101 Move X0, X22
	102 Move X1, X31
	103 Move X2, X31
	104 Call Object.op_Inequality, X0, X1
	105 Move X22, X31
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfNotEqual {117}
	110 Move X0, X25
	111 Call ProBuilderMesh.get_mesh, X0
	112 Compare X0, 0
	113 JumpIfEqual {558}
	114 Move X1, X31
	115 Call Mesh.get_uv2, X0
	116 Move X22, X0
	117 Move [X31+48], X24
	118 Move X24, 0x838000
	119 Move X24, [X24+8]
	120 Move X26, 0x838000
	121 Move X0, [X24]
	122 Move X26, [X26+16]
	123 Call 0x1C17F10
	124 Move X1, [X26]
	125 Move X29, X0
	126 Call List`1<Vector4>..ctor, X0
	127 Move X0, [X24]
	128 Call 0x1C17F10
	129 Move X1, [X26]
	130 Move X24, X0
	131 Call List`1<Vector4>..ctor, X0
	132 Move W1, 2
	133 Move X0, X25
	134 Move X2, X29
	135 Move [X31+8], X29
	136 Call ProBuilderMesh.GetUVs, X0, X1, X2
	137 Move W1, 3
	138 Move X0, X25
	139 Move X2, X24
	140 Move [X31], X24
	141 Call ProBuilderMesh.GetUVs, X0, X1, X2
	142 Compare X28, 0
	143 JumpIfEqual {148}
	144 Move W8, [X28+24]
	145 NotImplemented "Instruction CMP not yet implemented."
	146 NotImplemented "Instruction CSET not yet implemented."
	147 Move [X31+60], W8
	148 Move [X31+60], W31
	149 Move X29, [X31+48]
	150 Compare X29, 0
	151 JumpIfEqual {155}
	152 Move W8, [X29+24]
	153 NotImplemented "Instruction CMP not yet implemented."
	154 NotImplemented "Instruction CSET not yet implemented."
	155 Move W8, 1
	156 Move [X31+48], W8
	157 Compare X21, 0
	158 JumpIfEqual {162}
	159 Move W8, [X21+24]
	160 NotImplemented "Instruction CMP not yet implemented."
	161 NotImplemented "Instruction CSET not yet implemented."
	162 Move W8, 1
	163 Move [X31+44], W8
	164 Compare X20, 0
	165 JumpIfEqual {169}
	166 Move W8, [X20+24]
	167 NotImplemented "Instruction CMP not yet implemented."
	168 NotImplemented "Instruction CSET not yet implemented."
	169 Move W8, 1
	170 Move [X31+40], W8
	171 Compare X23, 0
	172 JumpIfEqual {176}
	173 Move W8, [X23+24]
	174 NotImplemented "Instruction CMP not yet implemented."
	175 NotImplemented "Instruction CSET not yet implemented."
	176 Move W8, 1
	177 Move [X31+36], W8
	178 Compare X22, 0
	179 JumpIfEqual {183}
	180 Move W8, [X22+24]
	181 NotImplemented "Instruction CMP not yet implemented."
	182 NotImplemented "Instruction CSET not yet implemented."
	183 Move W8, 1
	184 Move [X31+32], W8
	185 Move X8, [X31+8]
	186 Compare X8, 0
	187 JumpIfEqual {558}
	188 Move X8, [X31]
	189 Compare X8, 0
	190 JumpIfEqual {558}
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move X24, 0x837000
	193 Move X24, [X24+3936]
	194 Move X8, [X31+8]
	195 Move X25, X31
	196 Move W9, [X8+24]
	197 Move X8, [X31]
	198 Move W8, [X8+24]
	199 Move [X31+24], W8
	200 Move [X31+28], W9
	201 Move W8, W27
	202 Move [X31+16], X8
	203 Move X8, 0x838000
	204 Move X8, [X8+32]
	205 Move X0, [X8]
	206 Call 0x1C17F10
	207 Move X1, X31
	208 Move X26, X0
	209 Call Vertex..ctor, X0
	210 Move X8, [X19]
	211 Move X10, 0x838000
	212 NotImplemented "Instruction LDRH not yet implemented."
	213 Move X10, [X10+488]
	214 Move X1, [X10]
	215 Compare X9, 0
	216 JumpIfEqual {223}
	217 Move X10, [X8+176]
	218 Add X10, X10, 8
	219 NotImplemented "Instruction LDUR not yet implemented."
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Subtract X9, X9, 1
	222 Add X10, X10, 16
	223 Move W2, 2
	224 Move X0, X19
	225 Call 0x1C5D788
	226 Move W9, [X10]
	227 Add W9, W9, 2
	228 Add X8, X8, W9
	229 Add X0, X8, 312
	230 Move X8, [X0]
	231 Move X2, [X0+8]
	232 Move X0, X19
	233 Move X1, X26
	234 NotImplemented "Instruction BLR not yet implemented."
	235 Move W8, [X31+60]
	236 Compare W8, 0
	237 JumpIfEqual {273}
	238 Move X8, [X19]
	239 Move X1, [X24]
	240 NotImplemented "Instruction LDRH not yet implemented."
	241 Compare X9, 0
	242 JumpIfEqual {249}
	243 Move X10, [X8+176]
	244 Add X10, X10, 8
	245 NotImplemented "Instruction LDUR not yet implemented."
	246 NotImplemented "Instruction CMP not yet implemented."
	247 Subtract X9, X9, 1
	248 Add X10, X10, 16
	249 Move X0, X19
	250 Move W2, W31
	251 Call 0x1C5D788
	252 NotImplemented "Instruction LDRSW not yet implemented."
	253 Add X8, X8, X9
	254 Add X0, X8, 312
	255 Move X8, [X0]
	256 Move X2, [X0+8]
	257 Move X0, X19
	258 Move W1, W25
	259 NotImplemented "Instruction BLR not yet implemented."
	260 Compare X28, 0
	261 JumpIfEqual {558}
	262 Move W8, [X28+24]
	263 NotImplemented "Instruction CMP not yet implemented."
	264 Compare X0, 0
	265 JumpIfEqual {558}
	266 Move W8, 12
	267 NotImplemented "Instruction MADD not yet implemented."
	268 Move S1, [X8+36]
	269 Move S2, [X8+40]
	270 Move V0, [X8+32]
	271 Move X1, X31
	272 Call Vertex.set_position, X0, X1
	273 Move W8, [X31+48]
	274 Move TEMP, X8
	275 And TEMP, TEMP, 1
	276 Compare TEMP, 1
	277 JumpIfEqual {313}
	278 Move X8, [X19]
	279 Move X1, [X24]
	280 NotImplemented "Instruction LDRH not yet implemented."
	281 Compare X9, 0
	282 JumpIfEqual {289}
	283 Move X10, [X8+176]
	284 Add X10, X10, 8
	285 NotImplemented "Instruction LDUR not yet implemented."
	286 NotImplemented "Instruction CMP not yet implemented."
	287 Subtract X9, X9, 1
	288 Add X10, X10, 16
	289 Move X0, X19
	290 Move W2, W31
	291 Call 0x1C5D788
	292 NotImplemented "Instruction LDRSW not yet implemented."
	293 Add X8, X8, X9
	294 Add X0, X8, 312
	295 Move X8, [X0]
	296 Move X2, [X0+8]
	297 Move X0, X19
	298 Move W1, W25
	299 NotImplemented "Instruction BLR not yet implemented."
	300 Compare X29, 0
	301 JumpIfEqual {558}
	302 Move W8, [X29+24]
	303 NotImplemented "Instruction CMP not yet implemented."
	304 Compare X0, 0
	305 JumpIfEqual {558}
	306 Add X8, X29, X25
	307 Move S2, [X8+40]
	308 Move S3, [X8+44]
	309 Move S0, [X8+32]
	310 Move S1, [X8+36]
	311 Move X1, X31
	312 Call Vertex.set_color, X0, X1
	313 Move W8, [X31+44]
	314 Move TEMP, X8
	315 And TEMP, TEMP, 1
	316 Compare TEMP, 1
	317 JumpIfEqual {353}
	318 Move X8, [X19]
	319 Move X1, [X24]
	320 NotImplemented "Instruction LDRH not yet implemented."
	321 Compare X9, 0
	322 JumpIfEqual {329}
	323 Move X10, [X8+176]
	324 Add X10, X10, 8
	325 NotImplemented "Instruction LDUR not yet implemented."
	326 NotImplemented "Instruction CMP not yet implemented."
	327 Subtract X9, X9, 1
	328 Add X10, X10, 16
	329 Move X0, X19
	330 Move W2, W31
	331 Call 0x1C5D788
	332 NotImplemented "Instruction LDRSW not yet implemented."
	333 Add X8, X8, X9
	334 Add X0, X8, 312
	335 Move X8, [X0]
	336 Move X2, [X0+8]
	337 Move X0, X19
	338 Move W1, W25
	339 NotImplemented "Instruction BLR not yet implemented."
	340 Compare X21, 0
	341 JumpIfEqual {558}
	342 Move W8, [X21+24]
	343 NotImplemented "Instruction CMP not yet implemented."
	344 Compare X0, 0
	345 JumpIfEqual {558}
	346 Move W8, 12
	347 NotImplemented "Instruction MADD not yet implemented."
	348 Move S1, [X8+36]
	349 Move S2, [X8+40]
	350 Move V0, [X8+32]
	351 Move X1, X31
	352 Call Vertex.set_normal, X0, X1
	353 Move W8, [X31+40]
	354 Move TEMP, X8
	355 And TEMP, TEMP, 1
	356 Compare TEMP, 1
	357 JumpIfEqual {393}
	358 Move X8, [X19]
	359 Move X1, [X24]
	360 NotImplemented "Instruction LDRH not yet implemented."
	361 Compare X9, 0
	362 JumpIfEqual {369}
	363 Move X10, [X8+176]
	364 Add X10, X10, 8
	365 NotImplemented "Instruction LDUR not yet implemented."
	366 NotImplemented "Instruction CMP not yet implemented."
	367 Subtract X9, X9, 1
	368 Add X10, X10, 16
	369 Move X0, X19
	370 Move W2, W31
	371 Call 0x1C5D788
	372 NotImplemented "Instruction LDRSW not yet implemented."
	373 Add X8, X8, X9
	374 Add X0, X8, 312
	375 Move X8, [X0]
	376 Move X2, [X0+8]
	377 Move X0, X19
	378 Move W1, W25
	379 NotImplemented "Instruction BLR not yet implemented."
	380 Compare X20, 0
	381 JumpIfEqual {558}
	382 Move W8, [X20+24]
	383 NotImplemented "Instruction CMP not yet implemented."
	384 Compare X0, 0
	385 JumpIfEqual {558}
	386 Add X8, X20, X25
	387 Move S2, [X8+40]
	388 Move S3, [X8+44]
	389 Move S0, [X8+32]
	390 Move S1, [X8+36]
	391 Move X1, X31
	392 Call Vertex.set_tangent, X0, X1
	393 Move W8, [X31+36]
	394 Move TEMP, X8
	395 And TEMP, TEMP, 1
	396 Compare TEMP, 1
	397 JumpIfEqual {431}
	398 Move X8, [X19]
	399 Move X1, [X24]
	400 NotImplemented "Instruction LDRH not yet implemented."
	401 Compare X9, 0
	402 JumpIfEqual {409}
	403 Move X10, [X8+176]
	404 Add X10, X10, 8
	405 NotImplemented "Instruction LDUR not yet implemented."
	406 NotImplemented "Instruction CMP not yet implemented."
	407 Subtract X9, X9, 1
	408 Add X10, X10, 16
	409 Move X0, X19
	410 Move W2, W31
	411 Call 0x1C5D788
	412 NotImplemented "Instruction LDRSW not yet implemented."
	413 Add X8, X8, X9
	414 Add X0, X8, 312
	415 Move X8, [X0]
	416 Move X2, [X0+8]
	417 Move X0, X19
	418 Move W1, W25
	419 NotImplemented "Instruction BLR not yet implemented."
	420 Compare X23, 0
	421 JumpIfEqual {558}
	422 Move W8, [X23+24]
	423 NotImplemented "Instruction CMP not yet implemented."
	424 Compare X0, 0
	425 JumpIfEqual {558}
	426 Add X8, X23, X25
	427 Move S0, [X8+32]
	428 Move S1, [X8+36]
	429 Move X1, X31
	430 Call Vertex.set_uv0, X0, X1
	431 Move W8, [X31+32]
	432 Move TEMP, X8
	433 And TEMP, TEMP, 1
	434 Compare TEMP, 1
	435 JumpIfEqual {469}
	436 Move X8, [X19]
	437 Move X1, [X24]
	438 NotImplemented "Instruction LDRH not yet implemented."
	439 Compare X9, 0
	440 JumpIfEqual {447}
	441 Move X10, [X8+176]
	442 Add X10, X10, 8
	443 NotImplemented "Instruction LDUR not yet implemented."
	444 NotImplemented "Instruction CMP not yet implemented."
	445 Subtract X9, X9, 1
	446 Add X10, X10, 16
	447 Move X0, X19
	448 Move W2, W31
	449 Call 0x1C5D788
	450 NotImplemented "Instruction LDRSW not yet implemented."
	451 Add X8, X8, X9
	452 Add X0, X8, 312
	453 Move X8, [X0]
	454 Move X2, [X0+8]
	455 Move X0, X19
	456 Move W1, W25
	457 NotImplemented "Instruction BLR not yet implemented."
	458 Compare X22, 0
	459 JumpIfEqual {558}
	460 Move W8, [X22+24]
	461 NotImplemented "Instruction CMP not yet implemented."
	462 Compare X0, 0
	463 JumpIfEqual {558}
	464 Add X8, X22, X25
	465 Move S0, [X8+32]
	466 Move S1, [X8+36]
	467 Move X1, X31
	468 Call Vertex.set_uv2, X0, X1
	469 Move W8, [X31+28]
	470 NotImplemented "Instruction CMP not yet implemented."
	471 Move X8, [X19]
	472 Move X1, [X24]
	473 NotImplemented "Instruction LDRH not yet implemented."
	474 Compare X9, 0
	475 JumpIfEqual {482}
	476 Move X10, [X8+176]
	477 Add X10, X10, 8
	478 NotImplemented "Instruction LDUR not yet implemented."
	479 NotImplemented "Instruction CMP not yet implemented."
	480 Subtract X9, X9, 1
	481 Add X10, X10, 16
	482 Move X0, X19
	483 Move W2, W31
	484 Call 0x1C5D788
	485 NotImplemented "Instruction LDRSW not yet implemented."
	486 Add X8, X8, X9
	487 Add X0, X8, 312
	488 Move X8, [X0]
	489 Move X2, [X0+8]
	490 Move X0, X19
	491 Move W1, W25
	492 NotImplemented "Instruction BLR not yet implemented."
	493 Move X8, 0x838000
	494 Move X8, [X8+56]
	495 Move X26, X0
	496 Move X0, [X31+8]
	497 Move W1, W25
	498 Move X2, [X8]
	499 Call List`1<Vector4>.get_Item, X0, X1
	500 Compare X26, 0
	501 JumpIfEqual {558}
	502 Move X0, X26
	503 Move X1, X31
	504 Call Vertex.set_uv3, X0, X1
	505 Move W8, [X31+24]
	506 NotImplemented "Instruction CMP not yet implemented."
	507 Move X8, [X19]
	508 Move X1, [X24]
	509 NotImplemented "Instruction LDRH not yet implemented."
	510 Compare X9, 0
	511 JumpIfEqual {518}
	512 Move X10, [X8+176]
	513 Add X10, X10, 8
	514 NotImplemented "Instruction LDUR not yet implemented."
	515 NotImplemented "Instruction CMP not yet implemented."
	516 Subtract X9, X9, 1
	517 Add X10, X10, 16
	518 Move X0, X19
	519 Move W2, W31
	520 Call 0x1C5D788
	521 NotImplemented "Instruction LDRSW not yet implemented."
	522 Add X8, X8, X9
	523 Add X0, X8, 312
	524 Move X8, [X0]
	525 Move X2, [X0+8]
	526 Move X0, X19
	527 Move W1, W25
	528 NotImplemented "Instruction BLR not yet implemented."
	529 Move X8, 0x838000
	530 Move X8, [X8+56]
	531 Move X26, X0
	532 Move X0, [X31]
	533 Move W1, W25
	534 Move X2, [X8]
	535 Call List`1<Vector4>.get_Item, X0, X1
	536 Compare X26, 0
	537 JumpIfEqual {558}
	538 Move X0, X26
	539 Move X1, X31
	540 Call Vertex.set_uv4, X0, X1
	541 Move X8, [X31+16]
	542 Add X25, X25, 1
	543 NotImplemented "Instruction CMP not yet implemented."
	544 Move X20, [X31+144]
	545 Move X19, [X31+152]
	546 Move X22, [X31+128]
	547 Move X21, [X31+136]
	548 Move X24, [X31+112]
	549 Move X23, [X31+120]
	550 Move X26, [X31+96]
	551 Move X25, [X31+104]
	552 Move X28, [X31+80]
	553 Move X27, [X31+88]
	554 Move X29, [X31+64]
	555 Move X30, [X31+72]
	556 Add X31, X31, 160
	557 Return 
	558 Call 0x1C17F20
	559 Call 0x1C17F28

Method: System.Void SetVertices(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Vertex> vertices, System.Boolean applyMesh = False)

Disassembly:
	0x03917CF4 LDR X19, [X19 + 0x28]
	0x03917CF8 CBZ X19, 0x3917D98
	0x03917CFC ADRP X22, 0x837000
	0x03917D00 LDR X22, [X22 + 0x500]
	0x03917D04 LDR X0, [X22]
	0x03917D08 LDR W8, [X0 + 0xE0]
	0x03917D0C CBNZ W8, 0x3917D18
	0x03917D10 BL 0x1C16DFC
	0x03917D14 LDR X0, [X22]
	0x03917D18 LDR X8, [X0 + 0xB8]
	0x03917D1C ADRP X23, 0x837000
	0x03917D20 LDR X20, [X8 + 0x18]
	0x03917D24 LDR X23, [X23 + 0x508]
	0x03917D28 CBNZ X20, 0x3917D7C
	0x03917D2C LDR W8, [X0 + 0xE0]
	0x03917D30 CBNZ W8, 0x3917D3C
	0x03917D34 BL 0x1C16DFC
	0x03917D38 LDR X0, [X22]
	0x03917D3C ADRP X9, 0x837000
	0x03917D40 LDR X8, [X0 + 0xB8]
	0x03917D44 LDR X9, [X9 + 0x510]
	0x03917D48 LDR X21, [X8]
	0x03917D4C LDR X0, [X9]
	0x03917D50 BL 0x1C16F10
	0x03917D54 ADRP X8, 0x837000
	0x03917D58 LDR X8, [X8 + 0x518]
	0x03917D5C MOV X1, X21
	0x03917D60 MOV X3, X31
	0x03917D64 MOV X20, X0
	0x03917D68 LDR X2, [X8]
	0x03917D6C BL 0x2D30128
	0x03917D70 LDR X8, [X22]
	0x03917D74 LDR X8, [X8 + 0xB8]
	0x03917D78 STR X20, [X8 + 0x18]
	0x03917D7C LDR X2, [X23]
	0x03917D80 MOV X0, X19
	0x03917D84 MOV X1, X20
	0x03917D88 LDP X20, X19, [X31 + 0x20]
	0x03917D8C LDP X22, X21, [X31 + 0x10]
	0x03917D90 LDP X30, X23, [X31], #0x30
	0x03917D94 B 0x21D49C0
	0x03917D98 LDP X20, X19, [X31 + 0x20]
	0x03917D9C LDP X22, X21, [X31 + 0x10]
	0x03917DA0 MOV W0, W31
	0x03917DA4 LDP X30, X23, [X31], #0x30
	0x03917DA8 RET
	0x03917DAC STP X30, X23, [X31 - 0x30]!
	0x03917DB0 STP X22, X21, [X31 + 0x10]
	0x03917DB4 STP X20, X19, [X31 + 0x20]
	0x03917DB8 ADRP X20, 0xACA000
	0x03917DBC LDRB W8, [X20 + 0x860]
	0x03917DC0 MOV X19, X0
	0x03917DC4 TBNZ X8, 0x0, 0x3917E00
	0x03917DC8 ADRP X0, 0x837000
	0x03917DCC LDR X0, [X0 + 0x508]
	0x03917DD0 BL 0x1C16CF4
	0x03917DD4 ADRP X0, 0x837000
	0x03917DD8 LDR X0, [X0 + 0x510]
	0x03917DDC BL 0x1C16CF4
	0x03917DE0 ADRP X0, 0x837000
	0x03917DE4 LDR X0, [X0 + 0x520]
	0x03917DE8 BL 0x1C16CF4
	0x03917DEC ADRP X0, 0x837000
	0x03917DF0 LDR X0, [X0 + 0x500]
	0x03917DF4 BL 0x1C16CF4
	0x03917DF8 MOVZ W8, 0x1
	0x03917DFC STRB W8, [X20 + 0x860]
	0x03917E00 LDR X19, [X19 + 0x28]
	0x03917E04 CBZ X19, 0x3917EB4
	0x03917E08 ADRP X22, 0x837000
	0x03917E0C LDR X22, [X22 + 0x500]
	0x03917E10 LDR X0, [X22]
	0x03917E14 LDR W8, [X0 + 0xE0]
	0x03917E18 CBNZ W8, 0x3917E24
	0x03917E1C BL 0x1C16DFC
	0x03917E20 LDR X0, [X22]
	0x03917E24 LDR X8, [X0 + 0xB8]
	0x03917E28 ADRP X23, 0x837000
	0x03917E2C LDR X20, [X8 + 0x20]
	0x03917E30 LDR X23, [X23 + 0x508]
	0x03917E34 CBNZ X20, 0x3917E88
	0x03917E38 LDR W8, [X0 + 0xE0]
	0x03917E3C CBNZ W8, 0x3917E48
	0x03917E40 BL 0x1C16DFC
	0x03917E44 LDR X0, [X22]
	0x03917E48 ADRP X9, 0x837000
	0x03917E4C LDR X8, [X0 + 0xB8]
	0x03917E50 LDR X9, [X9 + 0x510]
	0x03917E54 LDR X21, [X8]
	0x03917E58 LDR X0, [X9]
	0x03917E5C BL 0x1C16F10
	0x03917E60 ADRP X8, 0x837000
	0x03917E64 LDR X8, [X8 + 0x520]
	0x03917E68 MOV X1, X21
	0x03917E6C MOV X3, X31
	0x03917E70 MOV X20, X0
	0x03917E74 LDR X2, [X8]
	0x03917E78 BL 0x2D30128
	0x03917E7C LDR X8, [X22]
	0x03917E80 LDR X8, [X8 + 0xB8]
	0x03917E84 STR X20, [X8 + 0x20]
	0x03917E88 LDR X2, [X23]
	0x03917E8C MOV X0, X19
	0x03917E90 MOV X1, X20
	0x03917E94 BL 0x21D49C0
	0x03917E98 MOVZ W8, 0x5556
	0x03917E9C MOVK W8, 0x55550000
	0x03917EA0 SMADDL X8, X0, X8, X31
	0x03917EA4 UBFM X9, X8, 0x3F, 0x3F
	0x03917EA8 UBFM X8, X8, 0x20, 0x3F
	0x03917EAC ADD W0, W8, W9
	0x03917EB0 B 0x3917EB8
	0x03917EB4 MOV W0, W31
	0x03917EB8 LDP X20, X19, [X31 + 0x20]
	0x03917EBC LDP X22, X21, [X31 + 0x10]
	0x03917EC0 LDP X30, X23, [X31], #0x30
	0x03917EC4 RET
	0x03917EC8 STP X30, X25, [X31 - 0x40]!
	0x03917ECC STP X24, X23, [X31 + 0x10]
	0x03917ED0 STP X22, X21, [X31 + 0x20]
	0x03917ED4 STP X20, X19, [X31 + 0x30]
	0x03917ED8 ADRP X20, 0xACA000
	0x03917EDC ADRP X24, 0x837000
	0x03917EE0 LDRB W8, [X20 + 0x861]
	0x03917EE4 LDR X24, [X24 + 0x528]
	0x03917EE8 MOV X19, X0
	0x03917EEC TBNZ X8, 0x0, 0x3917F10
	0x03917EF0 ADRP X0, 0x837000
	0x03917EF4 LDR X0, [X0 + 0x530]
	0x03917EF8 BL 0x1C16CF4
	0x03917EFC ADRP X0, 0x837000
	0x03917F00 LDR X0, [X0 + 0x528]
	0x03917F04 BL 0x1C16CF4
	0x03917F08 MOVZ W8, 0x1
	0x03917F0C STRB W8, [X20 + 0x861]
	0x03917F10 LDR X0, [X24]
	0x03917F14 LDR W8, [X0 + 0xE0]
	0x03917F18 CBNZ W8, 0x3917F24
	0x03917F1C BL 0x1C16DFC
	0x03917F20 LDR X0, [X24]
	0x03917F24 LDR X8, [X0 + 0xB8]
	0x03917F28 ADRP X25, 0x837000
	0x03917F2C LDR X20, [X8]
	0x03917F30 LDR X25, [X25 + 0x530]
	0x03917F34 MOV X0, X20
	0x03917F38 MOV X1, X19
	0x03917F3C MOV X2, X31
	0x03917F40 BL 0x33C0DE4
	0x03917F44 CBZ X0, 0x3917F64
	0x03917F48 LDR X23, [X25]
	0x03917F4C MOV X22, X0
	0x03917F50 MOV X1, X23
	0x03917F54 BL 0x1C16E00
	0x03917F58 MOV X21, X0
	0x03917F5C CBNZ X0, 0x3917F68
	0x03917F60 B 0x3917FAC
	0x03917F64 MOV X21, X31
	0x03917F68 LDR X0, [X24]
	0x03917F6C LDR W8, [X0 + 0xE0]
	0x03917F70 CBNZ W8, 0x3917F7C
	0x03917F74 BL 0x1C16DFC
	0x03917F78 LDR X0, [X24]
	0x03917F7C LDR X0, [X0 + 0xB8]
	0x03917F80 MOV X1, X21
	0x03917F84 MOV X2, X20
	0x03917F88 BL 0x1C24138
	0x03917F8C CMP X20, X0
	0x03917F90 MOV X20, X0
	0x03917F94 B.NE 0x3917F34
	0x03917F98 LDP X20, X19, [X31 + 0x30]
	0x03917F9C LDP X22, X21, [X31 + 0x20]
	0x03917FA0 LDP X24, X23, [X31 + 0x10]
	0x03917FA4 LDP X30, X25, [X31], #0x40
	0x03917FA8 RET
	0x03917FAC MOV X0, X22
	0x03917FB0 MOV X1, X23
	0x03917FB4 BL 0x1C171E0
	0x03917FB8 STP X30, X25, [X31 - 0x40]!
	0x03917FBC STP X24, X23, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+80], X30
	003 Move [X31+96], X22
	004 Move [X31+104], X21
	005 Move [X31+112], X20
	006 Move [X31+120], X19
	007 Move X20, 0xACB000
	008 Move W8, [X20+2129]
	009 Move W21, W2
	010 Move X22, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x838000
	017 Move X0, [X0+1096]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+2129], W8
	021 Move [X31+88], X31
	022 Move [X31+64], X31
	023 Move [X31+72], X31
	024 Move [X31+48], X31
	025 Move [X31+56], X31
	026 Move [X31+32], X31
	027 Move [X31+40], X31
	028 Move [X31+24], X31
	029 Compare X22, 0
	030 JumpIfEqual {217}
	031 Move X8, 0x838000
	032 Move X8, [X8+1096]
	033 Move X0, X22
	034 Move X1, [X8]
	035 Call Enumerable.FirstOrDefault, X0
	036 Move X1, X31
	037 Move X2, X31
	038 Move X20, X0
	039 Call Vertex.op_Equality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {208}
	044 Compare X20, 0
	045 JumpIfEqual {235}
	046 Move W1, 1
	047 Move X0, X20
	048 Move X2, X31
	049 Call Vertex.HasArrays, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {208}
	054 Add X8, X31, 24
	055 Add X1, X31, 88
	056 Add X2, X31, 72
	057 Add X3, X31, 48
	058 Add X4, X31, 64
	059 Add X5, X31, 56
	060 Add X6, X31, 40
	061 Add X7, X31, 32
	062 Move X0, X22
	063 Move [X31], X8
	064 Move [X31+8], X31
	065 Call Vertex.GetArrays, X0, X1, X2, X3, X4, X5, X6, X7, X8
	066 Move X10, [X31+72]
	067 Move X8, [X31+64]
	068 Move X9, [X31+88]
	069 Move [X19+128], X8
	070 Move [X19+136], X10
	071 Move X8, [X31+48]
	072 Move X10, [X31+56]
	073 Move [X19+88], X9
	074 Move [X19+96], X8
	075 Move X8, [X31+32]
	076 Move [X19+104], X8
	077 Move X8, [X31+24]
	078 Move [X19+112], X8
	079 Move [X19+120], X10
	080 Move TEMP, X21
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {210}
	084 Move X0, X19
	085 Call ProBuilderMesh.get_mesh, X0
	086 Move X21, X0
	087 Move W1, 1
	088 Move X0, X20
	089 Move X2, X31
	090 Call Vertex.HasArrays, X0, X1
	091 Move TEMP, X0
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfNotEqual {101}
	095 Compare X21, 0
	096 JumpIfEqual {235}
	097 Move X1, [X31+88]
	098 Move X0, X21
	099 Move X2, X31
	100 Call Mesh.set_vertices, X0, X1
	101 Move W1, 32
	102 Move X0, X20
	103 Move X2, X31
	104 Call Vertex.HasArrays, X0, X1
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {115}
	109 Compare X21, 0
	110 JumpIfEqual {235}
	111 Move X1, [X31+72]
	112 Move X0, X21
	113 Move X2, X31
	114 Call Mesh.set_colors, X0, X1
	115 Move W1, 2
	116 Move X0, X20
	117 Move X2, X31
	118 Call Vertex.HasArrays, X0, X1
	119 Move TEMP, X0
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfNotEqual {129}
	123 Compare X21, 0
	124 JumpIfEqual {235}
	125 Move X1, [X31+48]
	126 Move X0, X21
	127 Move X2, X31
	128 Call Mesh.set_uv, X0, X1
	129 Move W1, 64
	130 Move X0, X20
	131 Move X2, X31
	132 Call Vertex.HasArrays, X0, X1
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfNotEqual {143}
	137 Compare X21, 0
	138 JumpIfEqual {235}
	139 Move X1, [X31+64]
	140 Move X0, X21
	141 Move X2, X31
	142 Call Mesh.set_normals, X0, X1
	143 Move W1, 128
	144 Move X0, X20
	145 Move X2, X31
	146 Call Vertex.HasArrays, X0, X1
	147 Move TEMP, X0
	148 And TEMP, TEMP, 1
	149 Compare TEMP, 1
	150 JumpIfNotEqual {157}
	151 Compare X21, 0
	152 JumpIfEqual {235}
	153 Move X1, [X31+56]
	154 Move X0, X21
	155 Move X2, X31
	156 Call Mesh.set_tangents, X0, X1
	157 Move W1, 4
	158 Move X0, X20
	159 Move X2, X31
	160 Call Vertex.HasArrays, X0, X1
	161 Move TEMP, X0
	162 And TEMP, TEMP, 1
	163 Compare TEMP, 1
	164 JumpIfNotEqual {171}
	165 Compare X21, 0
	166 JumpIfEqual {235}
	167 Move X1, [X31+40]
	168 Move X0, X21
	169 Move X2, X31
	170 Call Mesh.set_uv2, X0, X1
	171 Move W1, 8
	172 Move X0, X20
	173 Move X2, X31
	174 Call Vertex.HasArrays, X0, X1
	175 Move TEMP, X0
	176 And TEMP, TEMP, 1
	177 Compare TEMP, 1
	178 JumpIfNotEqual {186}
	179 Compare X21, 0
	180 JumpIfEqual {235}
	181 Move X2, [X31+32]
	182 Move W1, 2
	183 Move X0, X21
	184 Move X3, X31
	185 Call Mesh.SetUVs, X0, X1, X2
	186 Move W1, 16
	187 Move X0, X20
	188 Move X2, X31
	189 Call Vertex.HasArrays, X0, X1
	190 Move TEMP, X0
	191 And TEMP, TEMP, 1
	192 Compare TEMP, 1
	193 JumpIfNotEqual {201}
	194 Compare X21, 0
	195 JumpIfEqual {235}
	196 Move X2, [X31+24]
	197 Move W1, 3
	198 Move X0, X21
	199 Move X3, X31
	200 Call Mesh.SetUVs, X0, X1, X2
	201 NotImplemented "Instruction LDRH not yet implemented."
	202 Move W9, 1
	203 Add W10, W8, 1
	204 And W31, W10, 0x10000
	205 NotImplemented "Instruction CSINC not yet implemented."
	206 NotImplemented "Instruction STRH not yet implemented."
	207 NotImplemented "Instruction STRH not yet implemented."
	208 Move X0, X19
	209 Call ProBuilderMesh.Clear, X0
	210 Move X20, [X31+112]
	211 Move X19, [X31+120]
	212 Move X22, [X31+96]
	213 Move X21, [X31+104]
	214 Move X30, [X31+80]
	215 Add X31, X31, 128
	216 Return 
	217 Move X0, 0x7E2000
	218 Move X0, [X0+1320]
	219 Call 0x1C17D08
	220 Call 0x1C17F10
	221 Move X19, X0
	222 Move X0, 0x838000
	223 Move X0, [X0+1104]
	224 Call 0x1C17D08
	225 Move X1, X0
	226 Move X0, X19
	227 Move X2, X31
	228 Call ArgumentNullException..ctor, X0, X1
	229 Move X0, 0x838000
	230 Move X0, [X0+1112]
	231 Call 0x1C17D08
	232 Move X1, X0
	233 Move X0, X19
	234 Call 0x1C17DEC
	235 Call 0x1C17F20

Method: System.Collections.Generic.IList`1<UnityEngine.Vector3> get_normals()

Disassembly:
	0x039180FC BL 0x1C16DFC
	0x03918100 LDR X0, [X24]
	0x03918104 LDR X8, [X0 + 0xB8]
	0x03918108 ADRP X25, 0x836000
	0x0391810C LDR X20, [X8 + 0x8]
	0x03918110 LDR X25, [X25 + 0x530]
	0x03918114 MOV X0, X20
	0x03918118 MOV X1, X19
	0x0391811C MOV X2, X31
	0x03918120 BL 0x33C0DE4
	0x03918124 CBZ X0, 0x3918144
	0x03918128 LDR X23, [X25]
	0x0391812C MOV X22, X0
	0x03918130 MOV X1, X23
	0x03918134 BL 0x1C16E00
	0x03918138 MOV X21, X0
	0x0391813C CBNZ X0, 0x3918148
	0x03918140 B 0x3918190
	0x03918144 MOV X21, X31
	0x03918148 LDR X0, [X24]
	0x0391814C LDR W8, [X0 + 0xE0]
	0x03918150 CBNZ W8, 0x391815C
	0x03918154 BL 0x1C16DFC
	0x03918158 LDR X0, [X24]
	0x0391815C LDR X8, [X0 + 0xB8]
	0x03918160 MOV X1, X21
	0x03918164 MOV X2, X20
	0x03918168 ADD X0, X8, 0x8
	0x0391816C BL 0x1C24138
	0x03918170 CMP X20, X0
	0x03918174 MOV X20, X0
	0x03918178 B.NE 0x3918114

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xACA000
	005 Move W8, [X20+2130]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x837000
	012 Move X0, [X0+568]
	013 Call 0x1C17CF4
	014 Move X0, 0x837000
	015 Move X0, [X0+560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2130], W8
	019 Move X19, [X19+128]
	020 Compare X19, 0
	021 JumpIfEqual {32}
	022 Move X8, 0x837000
	023 Move X8, [X8+560]
	024 Move X20, 0x837000
	025 Move X0, [X8]
	026 Move X20, [X20+568]
	027 Call 0x1C17F10
	028 Move X2, [X20]
	029 Move X1, X19
	030 Move X20, X0
	031 Call ReadOnlyCollection`1<Vector3>..ctor, X0, X1
	032 Move X20, X31
	033 Move X0, X20
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return X0

Method: UnityEngine.Vector3[] get_normalsInternal()

Disassembly:
	0x0391817C LDP X20, X19, [X31 + 0x30]
	0x03918180 LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move X0, [X0+128]
	002 Return X0

Method: System.Void set_normalsInternal(UnityEngine.Vector3[] value)

Disassembly:
	0x03918184 LDP X24, X23, [X31 + 0x10]
	0x03918188 LDP X30, X25, [X31], #0x40

ISIL:
	001 Move [X0+128], X1
	002 Return 

Method: UnityEngine.Vector3[] GetNormals()

Disassembly:
	0x03912808 B.EQ 0x3912828
	0x0391280C SUBS X9, X9, 0x1
	0x03912810 ADD X10, X10, 0x10
	0x03912814 B.NE 0x3912800
	0x03912818 MOV X0, X19
	0x0391281C MOV W2, W31
	0x03912820 BL 0x1C5C788
	0x03912824 B 0x3912834
	0x03912828 LDRSW X9, [X10]
	0x0391282C ADD X8, X8, X9, 0x4, LSL
	0x03912830 ADD X0, X8, 0x138
	0x03912834 LDP X8, X1, [X0]
	0x03912838 MOV X0, X19
	0x0391283C BLR X8
	0x03912840 CMP W0, 0x1
	0x03912844 B.LT 0x39129B0
	0x03912848 ADRP X25, 0x83B000
	0x0391284C ADRP X26, 0x7E1000
	0x03912850 ADRP X27, 0x83C000
	0x03912854 LDR X25, [X25 + 0xF60]
	0x03912858 LDR X26, [X26 + 0x758]
	0x0391285C LDR X27, [X27 + 0x1F0]
	0x03912860 MOV W21, W0
	0x03912864 MOV W22, W31
	0x03912868 LDR X8, [X19]
	0x0391286C LDR X1, [X25]
	0x03912870 LDRH W9, [X8 + 0x12E]
	0x03912874 CBZ X9, 0x3912898
	0x03912878 LDR X10, [X8 + 0xB0]
	0x0391287C ADD X10, X10, 0x8
	0x03912880 LDUR X11, [X10 - 0x8]
	0x03912884 CMP X11, X1
	0x03912888 B.EQ 0x39128A8
	0x0391288C SUBS X9, X9, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xAD0000
	005 Move W8, [X20+2131]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x83D000
	012 Move X0, [X0+368]
	013 Call 0x1C17CF4
	014 Move X0, 0x83C000
	015 Move X0, [X0+3704]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2131], W8
	019 Move X20, 0x83D000
	020 Move X20, [X20+368]
	021 Move W1, 64
	022 Move X0, X19
	023 Call ProBuilderMesh.HasArrays, X0, X1
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {37}
	028 Move X8, 0x83C000
	029 Move X8, [X8+3704]
	030 Move X0, [X8]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X19
	036 Call Normals.CalculateNormals, X0
	037 Move X0, X19
	038 Call ProBuilderMesh.get_normals, X0
	039 Move X1, [X20]
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Call Enumerable.ToArray, X0
	044 Return X0

Method: UnityEngine.Color[] get_colorsInternal()

Disassembly:
	0x0391818C RET
	0x03918190 MOV X0, X22

ISIL:
	001 Move X0, [X0+136]
	002 Return X0

Method: System.Void set_colorsInternal(UnityEngine.Color[] value)

Disassembly:
	0x03918194 MOV X1, X23
	0x03918198 BL 0x1C171E0

ISIL:
	001 Move [X0+136], X1
	002 Return 

Method: System.Collections.Generic.IList`1<UnityEngine.Color> get_colors()

Disassembly:
	0x0391819C STP X30, X25, [X31 - 0x40]!
	0x039181A0 STP X24, X23, [X31 + 0x10]
	0x039181A4 STP X22, X21, [X31 + 0x20]
	0x039181A8 STP X20, X19, [X31 + 0x30]
	0x039181AC ADRP X20, 0xAC9000
	0x039181B0 ADRP X24, 0x836000
	0x039181B4 LDRB W8, [X20 + 0x864]
	0x039181B8 LDR X24, [X24 + 0x528]
	0x039181BC MOV X19, X0
	0x039181C0 TBNZ X8, 0x0, 0x39181E4
	0x039181C4 ADRP X0, 0x836000
	0x039181C8 LDR X0, [X0 + 0x530]
	0x039181CC BL 0x1C16CF4
	0x039181D0 ADRP X0, 0x836000
	0x039181D4 LDR X0, [X0 + 0x528]
	0x039181D8 BL 0x1C16CF4
	0x039181DC MOVZ W8, 0x1
	0x039181E0 STRB W8, [X20 + 0x864]
	0x039181E4 LDR X0, [X24]
	0x039181E8 LDR W8, [X0 + 0xE0]
	0x039181EC CBNZ W8, 0x39181F8
	0x039181F0 BL 0x1C16DFC
	0x039181F4 LDR X0, [X24]
	0x039181F8 LDR X8, [X0 + 0xB8]
	0x039181FC ADRP X25, 0x836000
	0x03918200 LDR X20, [X8 + 0x8]
	0x03918204 LDR X25, [X25 + 0x530]
	0x03918208 MOV X0, X20
	0x0391820C MOV X1, X19
	0x03918210 MOV X2, X31
	0x03918214 BL 0x33C0FDC
	0x03918218 CBZ X0, 0x3918238

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xACA000
	005 Move W8, [X20+2132]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x836000
	012 Move X0, [X0+3040]
	013 Call 0x1C17CF4
	014 Move X0, 0x836000
	015 Move X0, [X0+3032]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2132], W8
	019 Move X19, [X19+136]
	020 Compare X19, 0
	021 JumpIfEqual {32}
	022 Move X8, 0x836000
	023 Move X8, [X8+3032]
	024 Move X20, 0x836000
	025 Move X0, [X8]
	026 Move X20, [X20+3040]
	027 Call 0x1C17F10
	028 Move X2, [X20]
	029 Move X1, X19
	030 Move X20, X0
	031 Call ReadOnlyCollection`1<Color>..ctor, X0, X1
	032 Move X20, X31
	033 Move X0, X20
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return X0

Method: System.Void set_colors(System.Collections.Generic.IList`1<UnityEngine.Color> value)

Disassembly:
	0x0391821C LDR X23, [X25]
	0x03918220 MOV X22, X0
	0x03918224 MOV X1, X23
	0x03918228 BL 0x1C16E00
	0x0391822C MOV X21, X0
	0x03918230 CBNZ X0, 0x391823C
	0x03918234 B 0x3918284
	0x03918238 MOV X21, X31
	0x0391823C LDR X0, [X24]
	0x03918240 LDR W8, [X0 + 0xE0]
	0x03918244 CBNZ W8, 0x3918250
	0x03918248 BL 0x1C16DFC
	0x0391824C LDR X0, [X24]
	0x03918250 LDR X8, [X0 + 0xB8]
	0x03918254 MOV X1, X21
	0x03918258 MOV X2, X20
	0x0391825C ADD X0, X8, 0x8
	0x03918260 BL 0x1C24138
	0x03918264 CMP X20, X0
	0x03918268 MOV X20, X0
	0x0391826C B.NE 0x3918208
	0x03918270 LDP X20, X19, [X31 + 0x30]
	0x03918274 LDP X22, X21, [X31 + 0x20]
	0x03918278 LDP X24, X23, [X31 + 0x10]
	0x0391827C LDP X30, X25, [X31], #0x40
	0x03918280 RET
	0x03918284 MOV X0, X22
	0x03918288 MOV X1, X23
	0x0391828C BL 0x1C171E0
	0x03918290 STP X30, X25, [X31 - 0x40]!
	0x03918294 STP X24, X23, [X31 + 0x10]
	0x03918298 STP X22, X21, [X31 + 0x20]
	0x0391829C STP X20, X19, [X31 + 0x30]
	0x039182A0 ADRP X20, 0xAC9000
	0x039182A4 ADRP X24, 0x836000
	0x039182A8 LDRB W8, [X20 + 0x865]
	0x039182AC LDR X24, [X24 + 0x528]
	0x039182B0 MOV X19, X0
	0x039182B4 TBNZ X8, 0x0, 0x39182D8
	0x039182B8 ADRP X0, 0x836000
	0x039182BC LDR X0, [X0 + 0x530]
	0x039182C0 BL 0x1C16CF4
	0x039182C4 ADRP X0, 0x836000
	0x039182C8 LDR X0, [X0 + 0x528]
	0x039182CC BL 0x1C16CF4
	0x039182D0 MOVZ W8, 0x1
	0x039182D4 STRB W8, [X20 + 0x865]
	0x039182D8 LDR X0, [X24]
	0x039182DC LDR W8, [X0 + 0xE0]
	0x039182E0 CBNZ W8, 0x39182EC
	0x039182E4 BL 0x1C16DFC
	0x039182E8 LDR X0, [X24]
	0x039182EC LDR X8, [X0 + 0xB8]
	0x039182F0 ADRP X25, 0x836000
	0x039182F4 LDR X20, [X8 + 0x10]
	0x039182F8 LDR X25, [X25 + 0x530]
	0x039182FC MOV X0, X20
	0x03918300 MOV X1, X19
	0x03918304 MOV X2, X31
	0x03918308 BL 0x33C0DE4
	0x0391830C CBZ X0, 0x391832C
	0x03918310 LDR X23, [X25]
	0x03918314 MOV X22, X0
	0x03918318 MOV X1, X23
	0x0391831C BL 0x1C16E00
	0x03918320 MOV X21, X0
	0x03918324 CBNZ X0, 0x3918330
	0x03918328 B 0x3918378
	0x0391832C MOV X21, X31
	0x03918330 LDR X0, [X24]
	0x03918334 LDR W8, [X0 + 0xE0]
	0x03918338 CBNZ W8, 0x3918344
	0x0391833C BL 0x1C16DFC
	0x03918340 LDR X0, [X24]
	0x03918344 LDR X8, [X0 + 0xB8]
	0x03918348 MOV X1, X21
	0x0391834C MOV X2, X20
	0x03918350 ADD X0, X8, 0x10
	0x03918354 BL 0x1C24138
	0x03918358 CMP X20, X0
	0x0391835C MOV X20, X0
	0x03918360 B.NE 0x39182FC
	0x03918364 LDP X20, X19, [X31 + 0x30]
	0x03918368 LDP X22, X21, [X31 + 0x20]
	0x0391836C LDP X24, X23, [X31 + 0x10]
	0x03918370 LDP X30, X25, [X31], #0x40
	0x03918374 RET
	0x03918378 MOV X0, X22
	0x0391837C MOV X1, X23
	0x03918380 BL 0x1C171E0
	0x03918384 STP X30, X25, [X31 - 0x40]!
	0x03918388 STP X24, X23, [X31 + 0x10]
	0x0391838C STP X22, X21, [X31 + 0x20]
	0x03918390 STP X20, X19, [X31 + 0x30]
	0x03918394 ADRP X20, 0xAC9000
	0x03918398 ADRP X24, 0x836000
	0x0391839C LDRB W8, [X20 + 0x866]
	0x039183A0 LDR X24, [X24 + 0x528]
	0x039183A4 MOV X19, X0
	0x039183A8 TBNZ X8, 0x0, 0x39183CC
	0x039183AC ADRP X0, 0x836000
	0x039183B0 LDR X0, [X0 + 0x530]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xACA000
	006 Move W8, [X21+2133]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x837000
	014 Move X0, [X0+1120]
	015 Call 0x1C17CF4
	016 Move X0, 0x837000
	017 Move X0, [X0+1128]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2133], W8
	021 Compare X20, 0
	022 JumpIfEqual {62}
	023 Move X21, 0x837000
	024 Move X8, [X20]
	025 Move X21, [X21+1128]
	026 NotImplemented "Instruction LDRH not yet implemented."
	027 Move X1, [X21]
	028 Compare X9, 0
	029 JumpIfEqual {36}
	030 Move X10, [X8+176]
	031 Add X10, X10, 8
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Subtract X9, X9, 1
	035 Add X10, X10, 16
	036 Move X0, X20
	037 Move W2, W31
	038 Call 0x1C5D788
	039 NotImplemented "Instruction LDRSW not yet implemented."
	040 Add X8, X8, X9
	041 Add X0, X8, 312
	042 Move X8, [X0]
	043 Move X1, [X0+8]
	044 Move X0, X20
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Compare W0, 0
	047 JumpIfEqual {62}
	048 Move X8, [X20]
	049 Move X1, [X21]
	050 NotImplemented "Instruction LDRH not yet implemented."
	051 Compare X9, 0
	052 JumpIfEqual {59}
	053 Move X10, [X8+176]
	054 Add X10, X10, 8
	055 NotImplemented "Instruction LDUR not yet implemented."
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Subtract X9, X9, 1
	058 Add X10, X10, 16
	059 Move X0, X20
	060 Move W2, W31
	061 Call 0x1C5D788
	062 Move X0, X31
	063 NotImplemented "Instruction LDRSW not yet implemented."
	064 Add X8, X8, X9
	065 Add X0, X8, 312
	066 Move X8, [X0]
	067 Move X1, [X0+8]
	068 Move X0, X20
	069 NotImplemented "Instruction BLR not yet implemented."
	070 Move X8, [X19+88]
	071 Compare X8, 0
	072 JumpIfEqual {74}
	073 Move W8, [X8+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X8, 0x837000
	076 Move X8, [X8+1120]
	077 Move X0, X20
	078 Move X1, [X8]
	079 Call Enumerable.ToArray, X0
	080 Move [X19+136], X0
	081 Move X20, [X31+16]
	082 Move X19, [X31+24]
	083 Move X30, [X31+32]
	084 Move X21, [X31+40]
	085 Return 
	086 Move X0, 0x7E4000
	087 Move X0, [X0+1888]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X19, X0
	091 Move X0, 0x7E6000
	092 Move X0, [X0+3784]
	093 Call 0x1C17D08
	094 Move X20, X0
	095 Move X0, 0x837000
	096 Move X0, [X0+1136]
	097 Call 0x1C17D08
	098 Move X2, X0
	099 Move X0, X19
	100 Move X1, X20
	101 Move X3, X31
	102 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	103 Move X0, 0x837000
	104 Move X0, [X0+1144]
	105 Call 0x1C17D08
	106 Move X1, X0
	107 Move X0, X19
	108 Call 0x1C17DEC

Method: UnityEngine.Color[] GetColors()

Disassembly:
	0x039183B4 BL 0x1C16CF4
	0x039183B8 ADRP X0, 0x836000
	0x039183BC LDR X0, [X0 + 0x528]
	0x039183C0 BL 0x1C16CF4
	0x039183C4 MOVZ W8, 0x1
	0x039183C8 STRB W8, [X20 + 0x866]
	0x039183CC LDR X0, [X24]
	0x039183D0 LDR W8, [X0 + 0xE0]
	0x039183D4 CBNZ W8, 0x39183E0
	0x039183D8 BL 0x1C16DFC
	0x039183DC LDR X0, [X24]
	0x039183E0 LDR X8, [X0 + 0xB8]
	0x039183E4 ADRP X25, 0x836000
	0x039183E8 LDR X20, [X8 + 0x10]
	0x039183EC LDR X25, [X25 + 0x530]
	0x039183F0 MOV X0, X20
	0x039183F4 MOV X1, X19
	0x039183F8 MOV X2, X31
	0x039183FC BL 0x33C0FDC
	0x03918400 CBZ X0, 0x3918420
	0x03918404 LDR X23, [X25]
	0x03918408 MOV X22, X0
	0x0391840C MOV X1, X23
	0x03918410 BL 0x1C16E00
	0x03918414 MOV X21, X0
	0x03918418 CBNZ X0, 0x3918424
	0x0391841C B 0x391846C
	0x03918420 MOV X21, X31
	0x03918424 LDR X0, [X24]
	0x03918428 LDR W8, [X0 + 0xE0]
	0x0391842C CBNZ W8, 0x3918438
	0x03918430 BL 0x1C16DFC
	0x03918434 LDR X0, [X24]
	0x03918438 LDR X8, [X0 + 0xB8]
	0x0391843C MOV X1, X21
	0x03918440 MOV X2, X20
	0x03918444 ADD X0, X8, 0x10
	0x03918448 BL 0x1C24138
	0x0391844C CMP X20, X0
	0x03918450 MOV X20, X0
	0x03918454 B.NE 0x39183F0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xACA000
	005 Move W8, [X20+2134]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x837000
	012 Move X0, [X0+1152]
	013 Call 0x1C17CF4
	014 Move X0, 0x837000
	015 Move X0, [X0+1120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2134], W8
	019 Move W1, 32
	020 Move X0, X19
	021 Call ProBuilderMesh.HasArrays, X0, X1
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {36}
	026 Move X0, X19
	027 Call ProBuilderMesh.get_colors, X0
	028 Move X8, 0x837000
	029 Move X8, [X8+1120]
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X1, [X8]
	033 Move X30, [X31+32]
	034 Call Enumerable.ToArray, X0
	035 Return X0
	036 Move X8, [X19+88]
	037 Compare X8, 0
	038 JumpIfEqual {40}
	039 Move W0, [X8+24]
	040 Move W0, W31
	041 Move X8, 0x837000
	042 Move X8, [X8+1152]
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move S0, 1
	046 Move S1, 1
	047 Move X1, [X8]
	048 Move S2, 1
	049 Move S3, 1
	050 Move X30, [X31+32]
	051 Call 0x217F698, X0, X1
	052 Return X0

Method: System.Collections.Generic.IList`1<UnityEngine.Vector4> get_tangents()

Disassembly:
	0x03918458 LDP X20, X19, [X31 + 0x30]
	0x0391845C LDP X22, X21, [X31 + 0x20]
	0x03918460 LDP X24, X23, [X31 + 0x10]
	0x03918464 LDP X30, X25, [X31], #0x40
	0x03918468 RET
	0x0391846C MOV X0, X22
	0x03918470 MOV X1, X23
	0x03918474 BL 0x1C171E0
	0x03918478 STP X30, X25, [X31 - 0x40]!
	0x0391847C STP X24, X23, [X31 + 0x10]
	0x03918480 STP X22, X21, [X31 + 0x20]
	0x03918484 STP X20, X19, [X31 + 0x30]
	0x03918488 ADRP X20, 0xAC9000
	0x0391848C ADRP X24, 0x836000
	0x03918490 LDRB W8, [X20 + 0x867]
	0x03918494 LDR X24, [X24 + 0x528]
	0x03918498 MOV X19, X0
	0x0391849C TBNZ X8, 0x0, 0x39184C0
	0x039184A0 ADRP X0, 0x836000
	0x039184A4 LDR X0, [X0 + 0x530]
	0x039184A8 BL 0x1C16CF4
	0x039184AC ADRP X0, 0x836000
	0x039184B0 LDR X0, [X0 + 0x528]
	0x039184B4 BL 0x1C16CF4
	0x039184B8 MOVZ W8, 0x1
	0x039184BC STRB W8, [X20 + 0x867]
	0x039184C0 LDR X0, [X24]
	0x039184C4 LDR W8, [X0 + 0xE0]
	0x039184C8 CBNZ W8, 0x39184D4
	0x039184CC BL 0x1C16DFC
	0x039184D0 LDR X0, [X24]
	0x039184D4 LDR X8, [X0 + 0xB8]
	0x039184D8 ADRP X25, 0x836000
	0x039184DC LDR X20, [X8 + 0x18]
	0x039184E0 LDR X25, [X25 + 0x530]
	0x039184E4 MOV X0, X20
	0x039184E8 MOV X1, X19
	0x039184EC MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xACA000
	005 Move W8, [X19+2135]
	006 Move X20, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x837000
	012 Move X0, [X0+1160]
	013 Call 0x1C17CF4
	014 Move X0, 0x837000
	015 Move X0, [X0+1168]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+2135], W8
	019 Move X19, [X20+120]
	020 Compare X19, 0
	021 JumpIfEqual {38}
	022 Move X8, [X20+88]
	023 Compare X8, 0
	024 JumpIfEqual {26}
	025 Move W8, [X8+24]
	026 Move W9, [X19+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X8, 0x837000
	029 Move X8, [X8+1168]
	030 Move X0, [X8]
	031 Call 0x1C17F10
	032 Move X8, 0x837000
	033 Move X8, [X8+1160]
	034 Move X1, X19
	035 Move X20, X0
	036 Move X2, [X8]
	037 Call ReadOnlyCollection`1<Vector4>..ctor, X0, X1
	038 Move X20, X31
	039 Move X0, X20
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Return X0

Method: System.Void set_tangents(System.Collections.Generic.IList`1<UnityEngine.Vector4> value)

Disassembly:
	0x039184F0 BL 0x33C0DE4
	0x039184F4 CBZ X0, 0x3918514
	0x039184F8 LDR X23, [X25]
	0x039184FC MOV X22, X0
	0x03918500 MOV X1, X23
	0x03918504 BL 0x1C16E00
	0x03918508 MOV X21, X0
	0x0391850C CBNZ X0, 0x3918518
	0x03918510 B 0x3918560
	0x03918514 MOV X21, X31
	0x03918518 LDR X0, [X24]
	0x0391851C LDR W8, [X0 + 0xE0]
	0x03918520 CBNZ W8, 0x391852C
	0x03918524 BL 0x1C16DFC
	0x03918528 LDR X0, [X24]
	0x0391852C LDR X8, [X0 + 0xB8]
	0x03918530 MOV X1, X21
	0x03918534 MOV X2, X20
	0x03918538 ADD X0, X8, 0x18
	0x0391853C BL 0x1C24138
	0x03918540 CMP X20, X0
	0x03918544 MOV X20, X0
	0x03918548 B.NE 0x39184E4
	0x0391854C LDP X20, X19, [X31 + 0x30]
	0x03918550 LDP X22, X21, [X31 + 0x20]
	0x03918554 LDP X24, X23, [X31 + 0x10]
	0x03918558 LDP X30, X25, [X31], #0x40
	0x0391855C RET
	0x03918560 MOV X0, X22
	0x03918564 MOV X1, X23
	0x03918568 BL 0x1C171E0
	0x0391856C STP X30, X25, [X31 - 0x40]!
	0x03918570 STP X24, X23, [X31 + 0x10]
	0x03918574 STP X22, X21, [X31 + 0x20]
	0x03918578 STP X20, X19, [X31 + 0x30]
	0x0391857C ADRP X20, 0xAC9000
	0x03918580 ADRP X24, 0x836000
	0x03918584 LDRB W8, [X20 + 0x868]
	0x03918588 LDR X24, [X24 + 0x528]
	0x0391858C MOV X19, X0
	0x03918590 TBNZ X8, 0x0, 0x39185B4
	0x03918594 ADRP X0, 0x836000
	0x03918598 LDR X0, [X0 + 0x530]
	0x0391859C BL 0x1C16CF4
	0x039185A0 ADRP X0, 0x836000
	0x039185A4 LDR X0, [X0 + 0x528]
	0x039185A8 BL 0x1C16CF4
	0x039185AC MOVZ W8, 0x1
	0x039185B0 STRB W8, [X20 + 0x868]
	0x039185B4 LDR X0, [X24]
	0x039185B8 LDR W8, [X0 + 0xE0]
	0x039185BC CBNZ W8, 0x39185C8
	0x039185C0 BL 0x1C16DFC
	0x039185C4 LDR X0, [X24]
	0x039185C8 LDR X8, [X0 + 0xB8]
	0x039185CC ADRP X25, 0x836000
	0x039185D0 LDR X20, [X8 + 0x18]
	0x039185D4 LDR X25, [X25 + 0x530]
	0x039185D8 MOV X0, X20
	0x039185DC MOV X1, X19
	0x039185E0 MOV X2, X31
	0x039185E4 BL 0x33C0FDC
	0x039185E8 CBZ X0, 0x3918608
	0x039185EC LDR X23, [X25]
	0x039185F0 MOV X22, X0
	0x039185F4 MOV X1, X23
	0x039185F8 BL 0x1C16E00
	0x039185FC MOV X21, X0
	0x03918600 CBNZ X0, 0x391860C
	0x03918604 B 0x3918654
	0x03918608 MOV X21, X31
	0x0391860C LDR X0, [X24]
	0x03918610 LDR W8, [X0 + 0xE0]
	0x03918614 CBNZ W8, 0x3918620
	0x03918618 BL 0x1C16DFC
	0x0391861C LDR X0, [X24]
	0x03918620 LDR X8, [X0 + 0xB8]
	0x03918624 MOV X1, X21
	0x03918628 MOV X2, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xACA000
	006 Move W8, [X21+2136]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x837000
	014 Move X0, [X0+376]
	015 Call 0x1C17CF4
	016 Move X0, 0x836000
	017 Move X0, [X0+3984]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2136], W8
	021 Compare X20, 0
	022 JumpIfEqual {39}
	023 Move X10, 0x836000
	024 Move X8, [X20]
	025 Move X10, [X10+3984]
	026 NotImplemented "Instruction LDRH not yet implemented."
	027 Move X1, [X10]
	028 Compare X9, 0
	029 JumpIfEqual {36}
	030 Move X10, [X8+176]
	031 Add X10, X10, 8
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Subtract X9, X9, 1
	035 Add X10, X10, 16
	036 Move X0, X20
	037 Move W2, W31
	038 Call 0x1C5D788
	039 Move X0, X31
	040 NotImplemented "Instruction LDRSW not yet implemented."
	041 Add X8, X8, X9
	042 Add X0, X8, 312
	043 Move X8, [X0]
	044 Move X1, [X0+8]
	045 Move X0, X20
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move X8, [X19+88]
	048 Compare X8, 0
	049 JumpIfEqual {51}
	050 Move W8, [X8+24]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X8, 0x837000
	053 Move X8, [X8+376]
	054 Move X0, X20
	055 Move X1, [X8]
	056 Call Enumerable.ToArray, X0
	057 Move [X19+120], X0
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Return 
	063 Move X0, 0x7E4000
	064 Move X0, [X0+1888]
	065 Call 0x1C17D08
	066 Call 0x1C17F10
	067 Move X19, X0
	068 Move X0, 0x7E6000
	069 Move X0, [X0+3784]
	070 Call 0x1C17D08
	071 Move X20, X0
	072 Move X0, 0x837000
	073 Move X0, [X0+1176]
	074 Call 0x1C17D08
	075 Move X2, X0
	076 Move X0, X19
	077 Move X1, X20
	078 Move X3, X31
	079 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	080 Move X0, 0x837000
	081 Move X0, [X0+1184]
	082 Call 0x1C17D08
	083 Move X1, X0
	084 Move X0, X19
	085 Call 0x1C17DEC

Method: UnityEngine.Vector4[] get_tangentsInternal()

Disassembly:
	0x0391862C ADD X0, X8, 0x18
	0x03918630 BL 0x1C24138

ISIL:
	001 Move X0, [X0+120]
	002 Return X0

Method: System.Void set_tangentsInternal(UnityEngine.Vector4[] value)

Disassembly:
	0x03918634 CMP X20, X0
	0x03918638 MOV X20, X0

ISIL:
	001 Move [X0+120], X1
	002 Return 

Method: UnityEngine.Vector4[] GetTangents()

Disassembly:
	0x03912890 ADD X10, X10, 0x10
	0x03912894 B.NE 0x3912880
	0x03912898 MOV X0, X19
	0x0391289C MOV W2, W31
	0x039128A0 BL 0x1C5C788
	0x039128A4 B 0x39128B4
	0x039128A8 LDRSW X9, [X10]
	0x039128AC ADD X8, X8, X9, 0x4, LSL
	0x039128B0 ADD X0, X8, 0x138
	0x039128B4 LDP X8, X2, [X0]
	0x039128B8 MOV X0, X19
	0x039128BC MOV W1, W22
	0x039128C0 BLR X8
	0x039128C4 CBZ X0, 0x39129E0
	0x039128C8 LDP S0, S1, [X0 + 0x10]
	0x039128CC LDR V2, [X0 + 0x18]
	0x039128D0 MOV X23, X0
	0x039128D4 MOV X0, X31
	0x039128D8 BL 0x390B44C
	0x039128DC TBZ X0, 0x0, 0x3912964
	0x039128E0 LDP S0, S1, [X23 + 0x1C]
	0x039128E4 LDP S2, S3, [X23 + 0x24]
	0x039128E8 MOV X0, X31
	0x039128EC BL 0x390B488
	0x039128F0 TBZ X0, 0x0, 0x3912964
	0x039128F4 LDP S0, S1, [X23 + 0x48]
	0x039128F8 MOV X0, X31
	0x039128FC BL 0x390B428
	0x03912900 TBZ X0, 0x0, 0x3912964
	0x03912904 LDP S0, S1, [X23 + 0x2C]
	0x03912908 LDR V2, [X23 + 0x34]
	0x0391290C MOV X0, X31
	0x03912910 BL 0x390B44C
	0x03912914 TBZ X0, 0x0, 0x3912964

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xAD0000
	005 Move W8, [X20+2137]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x83D000
	012 Move X0, [X0+376]
	013 Call 0x1C17CF4
	014 Move X0, 0x83C000
	015 Move X0, [X0+3704]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2137], W8
	019 Move X20, 0x83D000
	020 Move X20, [X20+376]
	021 Move W1, 128
	022 Move X0, X19
	023 Call ProBuilderMesh.HasArrays, X0, X1
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {37}
	028 Move X8, 0x83C000
	029 Move X8, [X8+3704]
	030 Move X0, [X8]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X19
	036 Call Normals.CalculateTangents, X0
	037 Move X0, X19
	038 Call ProBuilderMesh.get_tangents, X0
	039 Move X1, [X20]
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Call Enumerable.ToArray, X0
	044 Return X0

Method: UnityEngine.Vector2[] get_texturesInternal()

Disassembly:
	0x0391863C B.NE 0x39185D8
	0x03918640 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move X0, [X0+96]
	002 Return X0

Method: System.Void set_texturesInternal(UnityEngine.Vector2[] value)

Disassembly:
	0x03918644 LDP X22, X21, [X31 + 0x20]
	0x03918648 LDP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X0+96], X1
	002 Return 

Method: System.Collections.Generic.List`1<UnityEngine.Vector4> get_textures2Internal()

Disassembly:
	0x0391864C LDP X30, X25, [X31], #0x40
	0x03918650 RET

ISIL:
	001 Move X0, [X0+104]
	002 Return X0

Method: System.Void set_textures2Internal(System.Collections.Generic.List`1<UnityEngine.Vector4> value)

Disassembly:
	0x03918654 MOV X0, X22
	0x03918658 MOV X1, X23

ISIL:
	001 Move [X0+104], X1
	002 Return 

Method: System.Collections.Generic.List`1<UnityEngine.Vector4> get_textures3Internal()

Disassembly:
	0x0391865C BL 0x1C171E0
	0x03918660 STP X30, X25, [X31 - 0x40]!

ISIL:
	001 Move X0, [X0+112]
	002 Return X0

Method: System.Void set_textures3Internal(System.Collections.Generic.List`1<UnityEngine.Vector4> value)

Disassembly:
	0x03918664 STP X24, X23, [X31 + 0x10]
	0x03918668 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X0+112], X1
	002 Return 

Method: System.Collections.Generic.IList`1<UnityEngine.Vector2> get_textures()

Disassembly:
	0x0391866C STP X20, X19, [X31 + 0x30]
	0x03918670 ADRP X20, 0xAC9000
	0x03918674 ADRP X24, 0x836000
	0x03918678 LDRB W8, [X20 + 0x869]
	0x0391867C LDR X24, [X24 + 0x528]
	0x03918680 MOV X19, X0
	0x03918684 TBNZ X8, 0x0, 0x39186A8
	0x03918688 ADRP X0, 0x836000
	0x0391868C LDR X0, [X0 + 0x530]
	0x03918690 BL 0x1C16CF4
	0x03918694 ADRP X0, 0x836000
	0x03918698 LDR X0, [X0 + 0x528]
	0x0391869C BL 0x1C16CF4
	0x039186A0 MOVZ W8, 0x1
	0x039186A4 STRB W8, [X20 + 0x869]
	0x039186A8 LDR X0, [X24]
	0x039186AC LDR W8, [X0 + 0xE0]
	0x039186B0 CBNZ W8, 0x39186BC
	0x039186B4 BL 0x1C16DFC
	0x039186B8 LDR X0, [X24]
	0x039186BC LDR X8, [X0 + 0xB8]
	0x039186C0 ADRP X25, 0x836000
	0x039186C4 LDR X20, [X8 + 0x20]
	0x039186C8 LDR X25, [X25 + 0x530]
	0x039186CC MOV X0, X20
	0x039186D0 MOV X1, X19
	0x039186D4 MOV X2, X31
	0x039186D8 BL 0x33C0DE4
	0x039186DC CBZ X0, 0x39186FC
	0x039186E0 LDR X23, [X25]
	0x039186E4 MOV X22, X0
	0x039186E8 MOV X1, X23

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xACA000
	005 Move W8, [X20+2138]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x837000
	012 Move X0, [X0+1192]
	013 Call 0x1C17CF4
	014 Move X0, 0x837000
	015 Move X0, [X0+1200]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2138], W8
	019 Move X19, [X19+96]
	020 Compare X19, 0
	021 JumpIfEqual {32}
	022 Move X8, 0x837000
	023 Move X8, [X8+1200]
	024 Move X20, 0x837000
	025 Move X0, [X8]
	026 Move X20, [X20+1192]
	027 Call 0x1C17F10
	028 Move X2, [X20]
	029 Move X1, X19
	030 Move X20, X0
	031 Call ReadOnlyCollection`1<Vector2>..ctor, X0, X1
	032 Move X20, X31
	033 Move X0, X20
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return X0

Method: System.Void set_textures(System.Collections.Generic.IList`1<UnityEngine.Vector2> value)

Disassembly:
	0x039186EC BL 0x1C16E00
	0x039186F0 MOV X21, X0
	0x039186F4 CBNZ X0, 0x3918700
	0x039186F8 B 0x3918748
	0x039186FC MOV X21, X31
	0x03918700 LDR X0, [X24]
	0x03918704 LDR W8, [X0 + 0xE0]
	0x03918708 CBNZ W8, 0x3918714
	0x0391870C BL 0x1C16DFC
	0x03918710 LDR X0, [X24]
	0x03918714 LDR X8, [X0 + 0xB8]
	0x03918718 MOV X1, X21
	0x0391871C MOV X2, X20
	0x03918720 ADD X0, X8, 0x20
	0x03918724 BL 0x1C24138
	0x03918728 CMP X20, X0
	0x0391872C MOV X20, X0
	0x03918730 B.NE 0x39186CC
	0x03918734 LDP X20, X19, [X31 + 0x30]
	0x03918738 LDP X22, X21, [X31 + 0x20]
	0x0391873C LDP X24, X23, [X31 + 0x10]
	0x03918740 LDP X30, X25, [X31], #0x40
	0x03918744 RET
	0x03918748 MOV X0, X22
	0x0391874C MOV X1, X23
	0x03918750 BL 0x1C171E0
	0x03918754 STP X30, X25, [X31 - 0x40]!
	0x03918758 STP X24, X23, [X31 + 0x10]
	0x0391875C STP X22, X21, [X31 + 0x20]
	0x03918760 STP X20, X19, [X31 + 0x30]
	0x03918764 ADRP X20, 0xAC9000
	0x03918768 ADRP X24, 0x836000
	0x0391876C LDRB W8, [X20 + 0x86A]
	0x03918770 LDR X24, [X24 + 0x528]
	0x03918774 MOV X19, X0
	0x03918778 TBNZ X8, 0x0, 0x391879C
	0x0391877C ADRP X0, 0x836000
	0x03918780 LDR X0, [X0 + 0x530]
	0x03918784 BL 0x1C16CF4
	0x03918788 ADRP X0, 0x836000
	0x0391878C LDR X0, [X0 + 0x528]
	0x03918790 BL 0x1C16CF4
	0x03918794 MOVZ W8, 0x1
	0x03918798 STRB W8, [X20 + 0x86A]
	0x0391879C LDR X0, [X24]
	0x039187A0 LDR W8, [X0 + 0xE0]
	0x039187A4 CBNZ W8, 0x39187B0
	0x039187A8 BL 0x1C16DFC
	0x039187AC LDR X0, [X24]
	0x039187B0 LDR X8, [X0 + 0xB8]
	0x039187B4 ADRP X25, 0x836000
	0x039187B8 LDR X20, [X8 + 0x20]
	0x039187BC LDR X25, [X25 + 0x530]
	0x039187C0 MOV X0, X20
	0x039187C4 MOV X1, X19
	0x039187C8 MOV X2, X31
	0x039187CC BL 0x33C0FDC
	0x039187D0 CBZ X0, 0x39187F0
	0x039187D4 LDR X23, [X25]
	0x039187D8 MOV X22, X0
	0x039187DC MOV X1, X23
	0x039187E0 BL 0x1C16E00
	0x039187E4 MOV X21, X0
	0x039187E8 CBNZ X0, 0x39187F4
	0x039187EC B 0x391883C
	0x039187F0 MOV X21, X31
	0x039187F4 LDR X0, [X24]
	0x039187F8 LDR W8, [X0 + 0xE0]
	0x039187FC CBNZ W8, 0x3918808
	0x03918800 BL 0x1C16DFC
	0x03918804 LDR X0, [X24]
	0x03918808 LDR X8, [X0 + 0xB8]
	0x0391880C MOV X1, X21
	0x03918810 MOV X2, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xACA000
	006 Move W8, [X21+2139]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x837000
	014 Move X0, [X0+1208]
	015 Call 0x1C17CF4
	016 Move X0, 0x836000
	017 Move X0, [X0+2704]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2139], W8
	021 Compare X20, 0
	022 JumpIfEqual {39}
	023 Move X10, 0x836000
	024 Move X8, [X20]
	025 Move X10, [X10+2704]
	026 NotImplemented "Instruction LDRH not yet implemented."
	027 Move X1, [X10]
	028 Compare X9, 0
	029 JumpIfEqual {36}
	030 Move X10, [X8+176]
	031 Add X10, X10, 8
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Subtract X9, X9, 1
	035 Add X10, X10, 16
	036 Move X0, X20
	037 Move W2, W31
	038 Call 0x1C5D788
	039 Move X0, X31
	040 NotImplemented "Instruction LDRSW not yet implemented."
	041 Add X8, X8, X9
	042 Add X0, X8, 312
	043 Move X8, [X0]
	044 Move X1, [X0+8]
	045 Move X0, X20
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move X8, [X19+88]
	048 Compare X8, 0
	049 JumpIfEqual {51}
	050 Move W8, [X8+24]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X8, 0x837000
	053 Move X8, [X8+1208]
	054 Move X0, X20
	055 Move X1, [X8]
	056 Call Enumerable.ToArray, X0
	057 Move [X19+96], X0
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Return 
	063 Move X0, 0x7E4000
	064 Move X0, [X0+1888]
	065 Call 0x1C17D08
	066 Call 0x1C17F10
	067 Move X19, X0
	068 Move X0, 0x7E6000
	069 Move X0, [X0+3784]
	070 Call 0x1C17D08
	071 Move X1, X0
	072 Move X0, X19
	073 Move X2, X31
	074 Call ArgumentOutOfRangeException..ctor, X0, X1
	075 Move X0, 0x837000
	076 Move X0, [X0+1216]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X19
	080 Call 0x1C17DEC

Method: System.Void GetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)

Disassembly:
	0x039124F4 LDR W8, [X24 + 0x18]
	0x039124F8 CMP W27, W8
	0x039124FC B.CS 0x391274C
	0x03912500 LDR X0, [X25]
	0x03912504 CBZ X0, 0x3912750
	0x03912508 SXTW X8, W27
	0x0391250C MOVZ W9, 0xC
	0x03912510 MADD X8, X8, X9, X24
	0x03912514 LDP S1, S2, [X8 + 0x24]
	0x03912518 LDR V0, [X8 + 0x20]
	0x0391251C MOV X1, X31
	0x03912520 BL 0x393D8A8
	0x03912524 LDR W8, [X31 + 0x3C]
	0x03912528 TBNZ X8, 0x0, 0x391256C
	0x0391252C LDR W8, [X20 + 0x18]
	0x03912530 CMP X26, X8
	0x03912534 B.CS 0x391274C
	0x03912538 CBZ X28, 0x3912750
	0x0391253C LDR W8, [X28 + 0x18]
	0x03912540 CMP W27, W8
	0x03912544 B.CS 0x391274C
	0x03912548 LDR X0, [X25]
	0x0391254C CBZ X0, 0x3912750
	0x03912550 MOV W8, W27
	0x03912554 SXTW X8, W8
	0x03912558 ADD X8, X28, X8, 0x4, LSL
	0x0391255C LDP S2, S3, [X8 + 0x28]
	0x03912560 LDP S0, S1, [X8 + 0x20]
	0x03912564 MOV X1, X31
	0x03912568 BL 0x393D8FC
	0x0391256C LDR W8, [X31 + 0x38]
	0x03912570 TBNZ X8, 0x0, 0x39125B8
	0x03912574 LDR W8, [X20 + 0x18]
	0x03912578 CMP X26, X8
	0x0391257C B.CS 0x391274C
	0x03912580 CBZ X22, 0x3912750
	0x03912584 LDR W8, [X22 + 0x18]
	0x03912588 CMP W27, W8
	0x0391258C B.CS 0x391274C
	0x03912590 LDR X0, [X25]
	0x03912594 CBZ X0, 0x3912750
	0x03912598 MOV W8, W27
	0x0391259C SXTW X8, W8
	0x039125A0 MOVZ W9, 0xC
	0x039125A4 MADD X8, X8, X9, X22
	0x039125A8 LDP S1, S2, [X8 + 0x24]
	0x039125AC LDR V0, [X8 + 0x20]
	0x039125B0 MOV X1, X31
	0x039125B4 BL 0x393D960
	0x039125B8 LDR W8, [X31 + 0x34]
	0x039125BC TBNZ X8, 0x0, 0x3912600
	0x039125C0 LDR W8, [X20 + 0x18]
	0x039125C4 CMP X26, X8
	0x039125C8 B.CS 0x391274C
	0x039125CC CBZ X21, 0x3912750
	0x039125D0 LDR W8, [X21 + 0x18]
	0x039125D4 CMP W27, W8
	0x039125D8 B.CS 0x391274C
	0x039125DC LDR X0, [X25]
	0x039125E0 CBZ X0, 0x3912750
	0x039125E4 MOV W8, W27
	0x039125E8 SXTW X8, W8
	0x039125EC ADD X8, X21, X8, 0x4, LSL
	0x039125F0 LDP S2, S3, [X8 + 0x28]
	0x039125F4 LDP S0, S1, [X8 + 0x20]
	0x039125F8 MOV X1, X31
	0x039125FC BL 0x393D9C4
	0x03912600 LDR W8, [X31 + 0x30]
	0x03912604 TBNZ X8, 0x0, 0x3912644
	0x03912608 LDR W8, [X20 + 0x18]
	0x0391260C CMP X26, X8
	0x03912610 B.CS 0x391274C
	0x03912614 CBZ X19, 0x3912750
	0x03912618 LDR W8, [X19 + 0x18]
	0x0391261C CMP W27, W8
	0x03912620 B.CS 0x391274C
	0x03912624 LDR X0, [X25]
	0x03912628 CBZ X0, 0x3912750
	0x0391262C MOV W8, W27
	0x03912630 SXTW X8, W8
	0x03912634 ADD X8, X19, X8, 0x3, LSL
	0x03912638 LDP S0, S1, [X8 + 0x20]
	0x0391263C MOV X1, X31
	0x03912640 BL 0x393DA24
	0x03912644 LDR W8, [X31 + 0x2C]
	0x03912648 TBNZ X8, 0x0, 0x3912688
	0x0391264C LDR W8, [X20 + 0x18]
	0x03912650 CMP X26, X8
	0x03912654 B.CS 0x391274C
	0x03912658 CBZ X23, 0x3912750
	0x0391265C LDR W8, [X23 + 0x18]
	0x03912660 CMP W27, W8
	0x03912664 B.CS 0x391274C
	0x03912668 LDR X0, [X25]
	0x0391266C CBZ X0, 0x3912750
	0x03912670 MOV W8, W27
	0x03912674 SXTW X8, W8
	0x03912678 ADD X8, X23, X8, 0x3, LSL
	0x0391267C LDP S0, S1, [X8 + 0x20]
	0x03912680 MOV X1, X31
	0x03912684 BL 0x393DA80
	0x03912688 LDR W8, [X31 + 0x28]
	0x0391268C CMP W8, W29
	0x03912690 B.NE 0x39126D0
	0x03912694 LDR W8, [X20 + 0x18]
	0x03912698 CMP X26, X8
	0x0391269C B.CS 0x391274C
	0x039126A0 ADRP X8, 0x83C000
	0x039126A4 LDR X28, [X25]
	0x039126A8 LDR X8, [X8 + 0x38]
	0x039126AC LDR X0, [X31 + 0x10]
	0x039126B0 MOV W1, W27
	0x039126B4 LDR X2, [X8]
	0x039126B8 BL 0x30CEAFC
	0x039126BC CBZ X28, 0x3912750
	0x039126C0 MOV X0, X28
	0x039126C4 MOV X1, X31
	0x039126C8 BL 0x393DAE0
	0x039126CC LDR X28, [X31 + 0x48]
	0x039126D0 LDR W8, [X31 + 0x24]
	0x039126D4 CMP W8, W29
	0x039126D8 B.NE 0x3912718
	0x039126DC LDR W8, [X20 + 0x18]
	0x039126E0 CMP X26, X8
	0x039126E4 B.CS 0x391274C
	0x039126E8 ADRP X8, 0x83C000
	0x039126EC LDR X28, [X25]
	0x039126F0 LDR X8, [X8 + 0x38]
	0x039126F4 LDR X0, [X31 + 0x8]
	0x039126F8 MOV W1, W27
	0x039126FC LDR X2, [X8]
	0x03912700 BL 0x30CEAFC
	0x03912704 CBZ X28, 0x3912750
	0x03912708 MOV X0, X28
	0x0391270C MOV X1, X31
	0x03912710 BL 0x393DB44
	0x03912714 LDR X28, [X31 + 0x48]
	0x03912718 LDR X8, [X31 + 0x18]
	0x0391271C ADD X26, X26, 0x1
	0x03912720 CMP X26, X8
	0x03912724 B.NE 0x391242C
	0x03912728 MOV X0, X20
	0x0391272C LDP X20, X19, [X31 + 0xA0]
	0x03912730 LDP X22, X21, [X31 + 0x90]
	0x03912734 LDP X24, X23, [X31 + 0x80]
	0x03912738 LDP X26, X25, [X31 + 0x70]
	0x0391273C LDP X28, X27, [X31 + 0x60]
	0x03912740 LDP X29, X30, [X31 + 0x50]
	0x03912744 ADD X31, X31, 0xB0
	0x03912748 RET
	0x0391274C BL 0x1C16F28
	0x03912750 BL 0x1C16F20
	0x03912754 SUB X31, X31, 0x60
	0x03912758 STP X30, X27, [X31 + 0x10]
	0x0391275C STP X26, X25, [X31 + 0x20]
	0x03912760 STP X24, X23, [X31 + 0x30]
	0x03912764 STP X22, X21, [X31 + 0x40]
	0x03912768 STP X20, X19, [X31 + 0x50]
	0x0391276C ADRP X20, 0xACF000
	0x03912770 ADRP X21, 0x7E1000
	0x03912774 LDRB W8, [X20 + 0x81D]
	0x03912778 LDR X21, [X21 + 0x8F0]
	0x0391277C MOV X19, X0
	0x03912780 TBNZ X8, 0x0, 0x39127C8
	0x03912784 ADRP X0, 0x83C000
	0x03912788 LDR X0, [X0 + 0x1E8]
	0x0391278C BL 0x1C16CF4
	0x03912790 ADRP X0, 0x83B000
	0x03912794 LDR X0, [X0 + 0xF60]
	0x03912798 BL 0x1C16CF4
	0x0391279C ADRP X0, 0x7E1000
	0x039127A0 LDR X0, [X0 + 0x758]
	0x039127A4 BL 0x1C16CF4
	0x039127A8 ADRP X0, 0x7E1000
	0x039127AC LDR X0, [X0 + 0x8F0]
	0x039127B0 BL 0x1C16CF4
	0x039127B4 ADRP X0, 0x83C000
	0x039127B8 LDR X0, [X0 + 0x1F0]
	0x039127BC BL 0x1C16CF4
	0x039127C0 MOVZ W8, 0x1
	0x039127C4 STRB W8, [X20 + 0x81D]
	0x039127C8 LDR X0, [X21]
	0x039127CC BL 0x1C16F10
	0x039127D0 MOV X1, X31
	0x039127D4 MOV X20, X0
	0x039127D8 BL 0x3231AC4
	0x039127DC CBZ X19, 0x39129E0
	0x039127E0 ADRP X10, 0x83C000
	0x039127E4 LDR X8, [X19]
	0x039127E8 LDR X10, [X10 + 0x1E8]
	0x039127EC LDRH W9, [X8 + 0x12E]
	0x039127F0 LDR X1, [X10]
	0x039127F4 CBZ X9, 0x3912818
	0x039127F8 LDR X10, [X8 + 0xB0]
	0x039127FC ADD X10, X10, 0x8
	0x03912800 LDUR X11, [X10 - 0x8]
	0x03912804 CMP X11, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xAD0000
	008 Move W8, [X22+2140]
	009 Move X19, X2
	010 Move W21, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x83D000
	017 Move X0, [X0+352]
	018 Call 0x1C17CF4
	019 Move X0, 0x83C000
	020 Move X0, [X0+4080]
	021 Call 0x1C17CF4
	022 Move X0, 0x83C000
	023 Move X0, [X0+4088]
	024 Call 0x1C17CF4
	025 Move X0, 0x7E2000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+2140], W8
	030 Compare X19, 0
	031 JumpIfEqual {187}
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W8, [X19+28]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Add W8, W8, 1
	036 Move [X19+24], W31
	037 Move [X19+28], W8
	038 Move X9, -47685632
	039 Move W8, W21
	040 Add X9, X9, 2614
	041 NotImplemented "Instruction ADR not yet implemented."
	042 Move W11, [X9]
	043 Add X10, X10, X11
	044 CallNoReturn X10
	045 Move X23, 0x83C000
	046 Move X23, [X23+4080]
	047 Move X21, X31
	048 Move X22, X31
	049 Move X8, [X20+88]
	050 Compare X8, 0
	051 JumpIfEqual {53}
	052 Move X8, [X8+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X8, [X20+96]
	055 Compare X8, 0
	056 JumpIfEqual {185}
	057 Move W9, [X8+24]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Add X8, X8, X21
	060 Move W10, [X19+28]
	061 Move S0, [X8+32]
	062 Move S1, [X8+36]
	063 Move X8, [X19+16]
	064 Move X9, [X23]
	065 Add W10, W10, 1
	066 Move [X19+28], W10
	067 Compare X8, 0
	068 JumpIfEqual {185}
	069 NotImplemented "Instruction LDRSW not yet implemented."
	070 Move W11, [X8+24]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Add W9, W10, 1
	073 Add X8, X8, X10
	074 Move [X19+24], W9
	075 Move [X8+32], S0
	076 Move [X8+40], S1
	077 Move [X8+40], X31
	078 Move X8, [X9+32]
	079 Move S2, W31
	080 Move S3, W31
	081 Move X0, X19
	082 Move X8, [X8+192]
	083 Move X1, [X8+112]
	084 Call List`1<Vector4>.AddWithResize, X0, X1
	085 Add X22, X22, 1
	086 Add X21, X21, 8
	087 Move X0, X20
	088 Call ProBuilderMesh.get_mesh, X0
	089 Move X8, 0x7E2000
	090 Move X8, [X8+1432]
	091 Move X21, X0
	092 Move X8, [X8]
	093 Move W9, [X8+224]
	094 Compare W9, 0
	095 JumpIfNotEqual {98}
	096 Move X0, X8
	097 Call 0x1C17DFC
	098 Move X0, X21
	099 Move X1, X31
	100 Move X2, X31
	101 Call Object.op_Inequality, X0, X1
	102 Move TEMP, X0
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfNotEqual {178}
	106 Move X0, X20
	107 Call ProBuilderMesh.get_mesh, X0
	108 Compare X0, 0
	109 JumpIfEqual {185}
	110 Move X1, X31
	111 Call Mesh.get_uv2, X0
	112 Compare X0, 0
	113 JumpIfEqual {178}
	114 Move X0, X20
	115 Call ProBuilderMesh.get_mesh, X0
	116 Compare X0, 0
	117 JumpIfEqual {185}
	118 Move X1, X31
	119 Call Mesh.get_uv2, X0
	120 Compare X0, 0
	121 JumpIfEqual {185}
	122 Move X8, [X0+24]
	123 Move X20, X0
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move X23, 0x83C000
	126 Move X23, [X23+4080]
	127 Move X21, X31
	128 And X8, X8, 0
	129 Add X22, X20, 36
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Move W10, [X19+28]
	132 Move S0, [X22-4]
	133 Move S1, [X22]
	134 Move X8, [X19+16]
	135 Move X9, [X23]
	136 Add W10, W10, 1
	137 Move [X19+28], W10
	138 Compare X8, 0
	139 JumpIfEqual {185}
	140 NotImplemented "Instruction LDRSW not yet implemented."
	141 Move W11, [X8+24]
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Add W9, W10, 1
	144 Add X8, X8, X10
	145 Move [X19+24], W9
	146 Move [X8+32], S0
	147 Move [X8+40], S1
	148 Move [X8+40], X31
	149 Move X8, [X9+32]
	150 Move S2, W31
	151 Move S3, W31
	152 Move X0, X19
	153 Move X8, [X8+192]
	154 Move X1, [X8+112]
	155 Call List`1<Vector4>.AddWithResize, X0, X1
	156 Move W8, [X20+24]
	157 Add X21, X21, 1
	158 Add X22, X22, 8
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Move X1, [X20+104]
	161 Compare X1, 0
	162 JumpIfEqual {178}
	163 Move X8, 0x83D000
	164 Move X8, [X8+352]
	165 Move X0, X19
	166 Move X20, [X31+32]
	167 Move X19, [X31+40]
	168 Move X22, [X31+16]
	169 Move X21, [X31+24]
	170 Move X2, [X8]
	171 Move X30, [X31+48]
	172 Move X23, [X31+56]
	173 Call List`1<Vector4>.AddRange, X0, X1
	174 Return 
	175 Move X1, [X20+112]
	176 Compare X1, 0
	177 JumpIfNotEqual {163}
	178 Move X20, [X31+32]
	179 Move X19, [X31+40]
	180 Move X22, [X31+16]
	181 Move X21, [X31+24]
	182 Move X30, [X31+48]
	183 Move X23, [X31+56]
	184 Return 
	185 Call 0x1C17F20
	186 Call 0x1C17F28
	187 Move X0, 0x7E7000
	188 Move X0, [X0+1320]
	189 Call 0x1C17D08
	190 Call 0x1C17F10
	191 Move X19, X0
	192 Move X0, 0x80B000
	193 Move X0, [X0+120]
	194 Call 0x1C17D08
	195 Move X1, X0
	196 Move X0, X19
	197 Move X2, X31
	198 Call ArgumentNullException..ctor, X0, X1
	199 Move X0, 0x7EA000
	200 Move X0, [X0+1888]
	201 Call 0x1C17D08
	202 Call 0x1C17F10
	203 Move X19, X0
	204 Move X0, 0x813000
	205 Move X0, [X0+56]
	206 Call 0x1C17D08
	207 Move X1, X0
	208 Move X0, X19
	209 Move X2, X31
	210 Call ArgumentOutOfRangeException..ctor, X0, X1
	211 Move X0, 0x83D000
	212 Move X0, [X0+360]
	213 Call 0x1C17D08
	214 Move X1, X0
	215 Move X0, X19
	216 Call 0x1C17DEC

Method: System.Collections.ObjectModel.ReadOnlyCollection`1<UnityEngine.Vector2> GetUVs(System.Int32 channel)

Disassembly:
	0x03918814 ADD X0, X8, 0x20
	0x03918818 BL 0x1C24138
	0x0391881C CMP X20, X0
	0x03918820 MOV X20, X0
	0x03918824 B.NE 0x39187C0
	0x03918828 LDP X20, X19, [X31 + 0x30]
	0x0391882C LDP X22, X21, [X31 + 0x20]
	0x03918830 LDP X24, X23, [X31 + 0x10]
	0x03918834 LDP X30, X25, [X31], #0x40
	0x03918838 RET
	0x0391883C MOV X0, X22
	0x03918840 MOV X1, X23
	0x03918844 BL 0x1C171E0
	0x03918848 STR X1, [X0 + 0xB0]
	0x0391884C RET
	0x03918850 STR X30, [X31 - 0x10]!
	0x03918854 MOV X1, X31
	0x03918858 BL 0x3C32ECC
	0x0391885C CBZ X0, 0x391886C
	0x03918860 MOV X1, X31
	0x03918864 LDR X30, [X31], #0x10
	0x03918868 B 0x3C385F8
	0x0391886C BL 0x1C16F20
	0x03918870 STP X30, X21, [X31 - 0x20]!
	0x03918874 STP X20, X19, [X31 + 0x10]
	0x03918878 ADRP X21, 0xAC9000
	0x0391887C ADRP X20, 0x7DB000
	0x03918880 LDRB W8, [X21 + 0x86C]
	0x03918884 LDR X20, [X20 + 0x598]
	0x03918888 MOV X19, X0
	0x0391888C TBNZ X8, 0x0, 0x39188A4
	0x03918890 ADRP X0, 0x7DB000
	0x03918894 LDR X0, [X0 + 0x598]
	0x03918898 BL 0x1C16CF4
	0x0391889C MOVZ W8, 0x1
	0x039188A0 STRB W8, [X21 + 0x86C]
	0x039188A4 MOV X0, X19
	0x039188A8 BL 0x3912CAC
	0x039188AC LDR X8, [X20]
	0x039188B0 MOV X20, X0
	0x039188B4 LDR W9, [X8 + 0xE0]
	0x039188B8 CBNZ W9, 0x39188C4
	0x039188BC MOV X0, X8
	0x039188C0 BL 0x1C16DFC
	0x039188C4 MOV X0, X20
	0x039188C8 MOV X1, X31
	0x039188CC MOV X2, X31
	0x039188D0 BL 0x3C3883C
	0x039188D4 TBZ X0, 0x0, 0x39188E0
	0x039188D8 MOV W0, W31
	0x039188DC B 0x391891C
	0x039188E0 LDRH W9, [X19 + 0xC8]
	0x039188E4 LDRH W8, [X19 + 0xCA]
	0x039188E8 CMP W9, W8
	0x039188EC B.EQ 0x39188FC
	0x039188F0 CBZ W8, 0x39188FC
	0x039188F4 MOVZ W0, 0x4
	0x039188F8 B 0x391891C
	0x039188FC MOV X0, X19
	0x03918900 BL 0x3912CAC
	0x03918904 CBZ X0, 0x3918928
	0x03918908 MOV X1, X31
	0x0391890C BL 0x3C1816C
	0x03918910 CMP X0, 0x0
	0x03918914 MOVZ W8, 0x2
	0x03918918 CINC W0, W8, NE
	0x0391891C LDP X20, X19, [X31 + 0x10]
	0x03918920 LDP X30, X21, [X31], #0x20
	0x03918924 RET
	0x03918928 BL 0x1C16F20
	0x0391892C LDR W0, [X0 + 0x20]
	0x03918930 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xACA000
	006 Move W8, [X21+2141]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x837000
	014 Move X0, [X0+1224]
	015 Call 0x1C17CF4
	016 Move X0, 0x837000
	017 Move X0, [X0+1232]
	018 Call 0x1C17CF4
	019 Move X0, 0x837000
	020 Move X0, [X0+1192]
	021 Call 0x1C17CF4
	022 Move X0, 0x837000
	023 Move X0, [X0+1200]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+2141], W8
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X9, -47710208
	029 Move W8, W20
	030 Add X9, X9, 2618
	031 NotImplemented "Instruction ADR not yet implemented."
	032 Move W11, [X9]
	033 Add X10, X10, X11
	034 CallNoReturn X10
	035 Move X8, 0x837000
	036 Move X19, [X19+96]
	037 Move X8, [X8+1200]
	038 Move X0, [X8]
	039 Move X0, [X19+104]
	040 Compare X0, 0
	041 JumpIfEqual {53}
	042 Move X8, 0x837000
	043 Move X8, [X8+1224]
	044 Move X1, [X8]
	045 Call Enumerable.Cast, X0
	046 Move X8, 0x837000
	047 Move X8, [X8+1232]
	048 Move X1, [X8]
	049 Call Enumerable.ToList, X0
	050 Move X0, [X19+112]
	051 Compare X0, 0
	052 JumpIfNotEqual {42}
	053 Move X0, X31
	054 Move X0, X19
	055 Call ProBuilderMesh.get_mesh, X0
	056 Compare X0, 0
	057 JumpIfEqual {78}
	058 Move X1, X31
	059 Call Mesh.get_uv2, X0
	060 Move X8, 0x837000
	061 Move X8, [X8+1200]
	062 Move X19, X0
	063 Move X8, [X8]
	064 Move X0, X8
	065 Call 0x1C17F10
	066 Move X8, 0x837000
	067 Move X8, [X8+1192]
	068 Move X1, X19
	069 Move X20, X0
	070 Move X2, [X8]
	071 Call ReadOnlyCollection`1<Vector2>..ctor, X0, X1
	072 Move X0, X20
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 Move X30, [X31+32]
	076 Move X21, [X31+40]
	077 Return X0
	078 Call 0x1C17F20

Method: System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)

Disassembly:
	0x03918934 STR X30, [X31 - 0x30]!
	0x03918938 STP X22, X21, [X31 + 0x10]
	0x0391893C STP X20, X19, [X31 + 0x20]
	0x03918940 ADRP X20, 0xAC9000
	0x03918944 LDRB W8, [X20 + 0x86D]
	0x03918948 MOV X19, X0
	0x0391894C TBNZ X8, 0x0, 0x3918964
	0x03918950 ADRP X0, 0x836000
	0x03918954 LDR X0, [X0 + 0x528]
	0x03918958 BL 0x1C16CF4
	0x0391895C MOVZ W8, 0x1
	0x03918960 STRB W8, [X20 + 0x86D]
	0x03918964 MOV X0, X19
	0x03918968 BL 0x3918A88
	0x0391896C MOV X0, X19
	0x03918970 BL 0x3918BAC
	0x03918974 MOV X0, X19
	0x03918978 BL 0x3918CAC
	0x0391897C LDR X8, [X19 + 0x58]
	0x03918980 CBZ X8, 0x3918A18
	0x03918984 LDR W8, [X8 + 0x18]
	0x03918988 CMP W8, 0x1
	0x0391898C B.LT 0x3918A18
	0x03918990 LDR X8, [X19 + 0x28]
	0x03918994 CBZ X8, 0x3918A18
	0x03918998 LDR W8, [X8 + 0x18]
	0x0391899C CMP W8, 0x1
	0x039189A0 B.LT 0x3918A18
	0x039189A4 MOV X0, X19
	0x039189A8 BL 0x3918870
	0x039189AC CBNZ W0, 0x3918A18
	0x039189B0 LDRH W21, [X19 + 0xC8]
	0x039189B4 LDRH W20, [X19 + 0xCA]
	0x039189B8 MOV X0, X19
	0x039189BC MOV W1, W31
	0x039189C0 BL 0x39197E8
	0x039189C4 MOVZ W1, 0x1F
	0x039189C8 MOV X0, X19
	0x039189CC BL 0x3919D94
	0x039189D0 ADRP X22, 0x836000
	0x039189D4 LDR X22, [X22 + 0x528]
	0x039189D8 LDR X0, [X22]
	0x039189DC LDR W8, [X0 + 0xE0]
	0x039189E0 CBNZ W8, 0x39189EC
	0x039189E4 BL 0x1C16DFC
	0x039189E8 LDR X0, [X22]
	0x039189EC LDR X8, [X0 + 0xB8]
	0x039189F0 LDR X8, [X8 + 0x8]
	0x039189F4 CBZ X8, 0x3918A0C
	0x039189F8 LDR X0, [X8 + 0x40]
	0x039189FC LDR X9, [X8 + 0x18]
	0x03918A00 LDR X2, [X8 + 0x28]
	0x03918A04 MOV X1, X19
	0x03918A08 BLR X9
	0x03918A0C STRH W21, [X19 + 0xC8]
	0x03918A10 STRH W20, [X19 + 0xCA]
	0x03918A14 STRH W21, [X19 + 0xCA]
	0x03918A18 LDP X20, X19, [X31 + 0x20]
	0x03918A1C LDP X22, X21, [X31 + 0x10]
	0x03918A20 LDR X30, [X31], #0x30
	0x03918A24 RET
	0x03918A28 CMP W1, 0x1
	0x03918A2C STR W20, [X31 + 0xC]
	0x03918A30 B.NE 0x3918A58
	0x03918A34 BL 0x3EB1AD0
	0x03918A38 LDR X20, [X0]
	0x03918A3C BL 0x3EB1AE0
	0x03918A40 LDR W8, [X31 + 0xC]
	0x03918A44 STRH W21, [X19 + 0xC8]
	0x03918A48 STRH W8, [X19 + 0xCA]
	0x03918A4C CBZ X20, 0x3918A14
	0x03918A50 MOV X0, X20
	0x03918A54 BL 0x1C16F18
	0x03918A58 LDR W8, [X31 + 0xC]
	0x03918A5C STRH W21, [X19 + 0xC8]
	0x03918A60 STRH W8, [X19 + 0xCA]
	0x03918A64 B 0x3918A78
	0x03918A68 LDR W8, [X31 + 0xC]
	0x03918A6C STRH W21, [X19 + 0xC8]
	0x03918A70 STRH W8, [X19 + 0xCA]
	0x03918A74 CBNZ X20, 0x3918A7C
	0x03918A78 BL 0x1D2C690
	0x03918A7C MOV X0, X20
	0x03918A80 BL 0x1C16F18
	0x03918A84 BL 0x1990590
	0x03918A88 STP X30, X21, [X31 - 0x20]!
	0x03918A8C STP X20, X19, [X31 + 0x10]
	0x03918A90 ADRP X20, 0xAC9000
	0x03918A94 ADRP X21, 0x7DB000
	0x03918A98 LDRB W8, [X20 + 0x872]
	0x03918A9C LDR X21, [X21 + 0x598]
	0x03918AA0 MOV X19, X0
	0x03918AA4 TBNZ X8, 0x0, 0x3918AC8
	0x03918AA8 ADRP X0, 0x7E2000
	0x03918AAC LDR X0, [X0 + 0x6F0]
	0x03918AB0 BL 0x1C16CF4
	0x03918AB4 ADRP X0, 0x7DB000
	0x03918AB8 LDR X0, [X0 + 0x598]
	0x03918ABC BL 0x1C16CF4
	0x03918AC0 MOVZ W8, 0x1
	0x03918AC4 STRB W8, [X20 + 0x872]
	0x03918AC8 MOV X0, X19
	0x03918ACC BL 0x3915860
	0x03918AD0 LDR X8, [X21]
	0x03918AD4 MOV X20, X0
	0x03918AD8 LDR W9, [X8 + 0xE0]
	0x03918ADC CBNZ W9, 0x3918AE8
	0x03918AE0 MOV X0, X8
	0x03918AE4 BL 0x1C16DFC
	0x03918AE8 MOV X0, X20
	0x03918AEC MOV X1, X31
	0x03918AF0 MOV X2, X31
	0x03918AF4 BL 0x3C3883C
	0x03918AF8 TBZ X0, 0x0, 0x3918B20
	0x03918AFC MOV X0, X19
	0x03918B00 MOV X1, X31
	0x03918B04 BL 0x3C32ECC
	0x03918B08 CBZ X0, 0x3918BA8
	0x03918B0C ADRP X8, 0x7E2000
	0x03918B10 LDR X8, [X8 + 0x6F0]
	0x03918B14 LDR X1, [X8]
	0x03918B18 BL 0x21E51FC
	0x03918B1C STR X0, [X19 + 0xC0]
	0x03918B20 MOV X0, X19
	0x03918B24 BL 0x3912AD8
	0x03918B28 CBZ X0, 0x3918BA8
	0x03918B2C MOV X1, X31
	0x03918B30 BL 0x3C13278
	0x03918B34 TBNZ X0, 0x0, 0x3918B9C
	0x03918B38 MOV X0, X19
	0x03918B3C BL 0x3915860
	0x03918B40 CBZ X0, 0x3918BA8
	0x03918B44 MOV X1, X31
	0x03918B48 BL 0x3C16D04
	0x03918B4C LDR X8, [X21]
	0x03918B50 LDR X20, [X19 + 0xB0]
	0x03918B54 MOV X21, X0
	0x03918B58 LDR W9, [X8 + 0xE0]
	0x03918B5C CBNZ W9, 0x3918B68
	0x03918B60 MOV X0, X8
	0x03918B64 BL 0x1C16DFC
	0x03918B68 MOV X0, X21
	0x03918B6C MOV X1, X20
	0x03918B70 MOV X2, X31
	0x03918B74 BL 0x3C354F8
	0x03918B78 TBZ X0, 0x0, 0x3918B9C
	0x03918B7C MOV X0, X19
	0x03918B80 BL 0x3915860
	0x03918B84 CBZ X0, 0x3918BA8
	0x03918B88 LDR X1, [X19 + 0xB0]
	0x03918B8C LDP X20, X19, [X31 + 0x10]
	0x03918B90 MOV X2, X31
	0x03918B94 LDP X30, X21, [X31], #0x20
	0x03918B98 B 0x3C16D40
	0x03918B9C LDP X20, X19, [X31 + 0x10]
	0x03918BA0 LDP X30, X21, [X31], #0x20
	0x03918BA4 RET
	0x03918BA8 BL 0x1C16F20
	0x03918BAC SUB X31, X31, 0x30
	0x03918BB0 STP X30, X21, [X31 + 0x10]
	0x03918BB4 STP X20, X19, [X31 + 0x20]
	0x03918BB8 ADRP X20, 0xAC9000
	0x03918BBC LDRB W8, [X20 + 0x87D]
	0x03918BC0 MOV X19, X0
	0x03918BC4 TBNZ X8, 0x0, 0x3918BE8
	0x03918BC8 ADRP X0, 0x836000
	0x03918BCC LDR X0, [X0 + 0x538]
	0x03918BD0 BL 0x1C16CF4
	0x03918BD4 ADRP X0, 0x7DB000
	0x03918BD8 LDR X0, [X0 + 0x598]
	0x03918BDC BL 0x1C16CF4
	0x03918BE0 MOVZ W8, 0x1
	0x03918BE4 STRB W8, [X20 + 0x87D]
	0x03918BE8 MOV X0, X19
	0x03918BEC MOV X1, X31
	0x03918BF0 STR X31, [X31 + 0x8]
	0x03918BF4 BL 0x3C32ECC
	0x03918BF8 CBZ X0, 0x3918CA8
	0x03918BFC ADRP X8, 0x836000
	0x03918C00 LDR X8, [X8 + 0x538]
	0x03918C04 ADD X1, X31, 0x8
	0x03918C08 LDR X2, [X8]
	0x03918C0C BL 0x21E6600
	0x03918C10 TBZ X0, 0x0, 0x3918C90

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xACA000
	008 Move W8, [X22+2142]
	009 Move X19, X2
	010 Move W21, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {42}
	016 Move X0, 0x837000
	017 Move X0, [X0+1240]
	018 Call 0x1C17CF4
	019 Move X0, 0x837000
	020 Move X0, [X0+1208]
	021 Call 0x1C17CF4
	022 Move X0, 0x837000
	023 Move X0, [X0+1248]
	024 Call 0x1C17CF4
	025 Move X0, 0x837000
	026 Move X0, [X0+1256]
	027 Call 0x1C17CF4
	028 Move X0, 0x837000
	029 Move X0, [X0+8]
	030 Call 0x1C17CF4
	031 Move X0, 0x837000
	032 Move X0, [X0+1264]
	033 Call 0x1C17CF4
	034 Move X0, 0x837000
	035 Move X0, [X0+1272]
	036 Call 0x1C17CF4
	037 Move X0, 0x837000
	038 Move X0, [X0+1280]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X22+2142], W8
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X9, -47710208
	044 Move W8, W21
	045 Add X9, X9, 2622
	046 NotImplemented "Instruction ADR not yet implemented."
	047 Move W11, [X9]
	048 Add X10, X10, X11
	049 CallNoReturn X10
	050 Compare X19, 0
	051 JumpIfEqual {180}
	052 Move X23, 0x837000
	053 Move X23, [X23+1280]
	054 Move X0, [X23]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {60}
	058 Call 0x1C17DFC
	059 Move X0, [X23]
	060 Move X8, [X0+184]
	061 Move X21, [X8+8]
	062 Compare X21, 0
	063 JumpIfNotEqual {85}
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {69}
	067 Call 0x1C17DFC
	068 Move X0, [X23]
	069 Move X9, 0x837000
	070 Move X8, [X0+184]
	071 Move X9, [X9+1248]
	072 Move X22, [X8]
	073 Move X0, [X9]
	074 Call 0x1C17F10
	075 Move X8, 0x837000
	076 Move X8, [X8+1264]
	077 Move X1, X22
	078 Move X3, X31
	079 Move X21, X0
	080 Move X2, [X8]
	081 Call Func`2<Vector4, Vector2>..ctor, X0, X1, X2
	082 Move X8, [X23]
	083 Move X8, [X8+184]
	084 Move [X8+8], X21
	085 Move X8, 0x837000
	086 Move X8, [X8+1240]
	087 Move X0, X19
	088 Move X1, X21
	089 Move X2, [X8]
	090 Call Enumerable.Select, X0, X1
	091 Move X8, 0x837000
	092 Move X8, [X8+1208]
	093 Move X1, [X8]
	094 Call Enumerable.ToArray, X0
	095 Compare X20, 0
	096 JumpIfNotEqual {183}
	097 Compare X19, 0
	098 JumpIfEqual {176}
	099 Move X8, 0x837000
	100 Move X8, [X8+8]
	101 Move X0, [X8]
	102 Call 0x1C17F10
	103 Move X8, 0x837000
	104 Move X8, [X8+1256]
	105 Move X1, X19
	106 Move X21, X0
	107 Move X2, [X8]
	108 Call List`1<Vector4>..ctor, X0, X1
	109 Compare X20, 0
	110 JumpIfNotEqual {179}
	111 Move X0, X20
	112 Call ProBuilderMesh.get_mesh, X0
	113 Move X20, X0
	114 Compare X19, 0
	115 JumpIfEqual {184}
	116 Move X23, 0x837000
	117 Move X23, [X23+1280]
	118 Move X0, [X23]
	119 Move W8, [X0+224]
	120 Compare W8, 0
	121 JumpIfNotEqual {124}
	122 Call 0x1C17DFC
	123 Move X0, [X23]
	124 Move X8, [X0+184]
	125 Move X21, [X8+16]
	126 Compare X21, 0
	127 JumpIfNotEqual {149}
	128 Move W8, [X0+224]
	129 Compare W8, 0
	130 JumpIfNotEqual {133}
	131 Call 0x1C17DFC
	132 Move X0, [X23]
	133 Move X9, 0x837000
	134 Move X8, [X0+184]
	135 Move X9, [X9+1248]
	136 Move X22, [X8]
	137 Move X0, [X9]
	138 Call 0x1C17F10
	139 Move X8, 0x837000
	140 Move X8, [X8+1272]
	141 Move X1, X22
	142 Move X3, X31
	143 Move X21, X0
	144 Move X2, [X8]
	145 Call Func`2<Vector4, Vector2>..ctor, X0, X1, X2
	146 Move X8, [X23]
	147 Move X8, [X8+184]
	148 Move [X8+16], X21
	149 Move X8, 0x837000
	150 Move X8, [X8+1240]
	151 Move X0, X19
	152 Move X1, X21
	153 Move X2, [X8]
	154 Call Enumerable.Select, X0, X1
	155 Move X8, 0x837000
	156 Move X8, [X8+1208]
	157 Move X1, [X8]
	158 Call Enumerable.ToArray, X0
	159 Move X1, X0
	160 Compare X20, 0
	161 JumpIfNotEqual {187}
	162 Compare X19, 0
	163 JumpIfEqual {197}
	164 Move X8, 0x837000
	165 Move X8, [X8+8]
	166 Move X0, [X8]
	167 Call 0x1C17F10
	168 Move X8, 0x837000
	169 Move X8, [X8+1256]
	170 Move X1, X19
	171 Move X21, X0
	172 Move X2, [X8]
	173 Call List`1<Vector4>..ctor, X0, X1
	174 Compare X20, 0
	175 JumpIfNotEqual {200}
	176 Move X21, X31
	177 Compare X20, 0
	178 JumpIfEqual {208}
	179 Move [X20+104], X21
	180 Move X0, X31
	181 Compare X20, 0
	182 JumpIfEqual {208}
	183 Move [X20+96], X0
	184 Move X1, X31
	185 Compare X20, 0
	186 JumpIfEqual {208}
	187 Move X0, X20
	188 Move X20, [X31+32]
	189 Move X19, [X31+40]
	190 Move X22, [X31+16]
	191 Move X21, [X31+24]
	192 Move X2, X31
	193 Move X30, [X31+48]
	194 Move X23, [X31+56]
	195 Call Mesh.set_uv2, X0, X1
	196 Return 
	197 Move X21, X31
	198 Compare X20, 0
	199 JumpIfEqual {208}
	200 Move [X20+112], X21
	201 Move X20, [X31+32]
	202 Move X19, [X31+40]
	203 Move X22, [X31+16]
	204 Move X21, [X31+24]
	205 Move X30, [X31+48]
	206 Move X23, [X31+56]
	207 Return 
	208 Call 0x1C17F20

Method: System.Int32 get_faceCount()

Disassembly:
	0x039150C8 MOV X19, X2
	0x039150CC MOV X20, X1
	0x039150D0 MOV X21, X0
	0x039150D4 TBNZ X8, 0x0, 0x39150EC
	0x039150D8 ADRP X0, 0x813000
	0x039150DC LDR X0, [X0 + 0x4F8]

ISIL:
	001 Move X8, [X0+40]
	002 Compare X8, 0
	003 JumpIfEqual {6}
	004 Move W0, [X8+24]
	005 Return X0
	006 Move W0, W31
	007 Return X0

Method: System.Int32 get_vertexCount()

Disassembly:
	0x039130C0 LDR X9, [X8 + 0x10]
	0x039130C4 CBZ X9, 0x391315C
	0x039130C8 LDR W9, [X9 + 0x18]
	0x039130CC CMP W9, W19
	0x039130D0 B.GE 0x3913100
	0x039130D4 LDR W9, [X0 + 0xE0]

ISIL:
	001 Move X8, [X0+88]
	002 Compare X8, 0
	003 JumpIfEqual {6}
	004 Move W0, [X8+24]
	005 Return X0
	006 Move W0, W31
	007 Return X0

Method: System.Int32 get_edgeCount()

Disassembly:
	0x03918C14 LDR X20, [X31 + 0x8]
	0x03918C18 MOV X0, X19
	0x03918C1C BL 0x3912CAC
	0x03918C20 ADRP X8, 0x7DB000
	0x03918C24 LDR X8, [X8 + 0x598]
	0x03918C28 MOV X21, X0
	0x03918C2C LDR X8, [X8]
	0x03918C30 LDR W9, [X8 + 0xE0]
	0x03918C34 CBNZ W9, 0x3918C40
	0x03918C38 MOV X0, X8
	0x03918C3C BL 0x1C16DFC
	0x03918C40 MOV X0, X21
	0x03918C44 MOV X1, X31
	0x03918C48 MOV X2, X31
	0x03918C4C BL 0x3C354F8
	0x03918C50 MOV X1, X31
	0x03918C54 TBZ X0, 0x0, 0x3918C80
	0x03918C58 MOV X0, X19
	0x03918C5C BL 0x3912CAC
	0x03918C60 CBZ X0, 0x3918CA8
	0x03918C64 MOV X1, X31
	0x03918C68 BL 0x3C17618
	0x03918C6C CMP W0, 0x1
	0x03918C70 B.LT 0x3918CA0
	0x03918C74 MOV X0, X19
	0x03918C78 BL 0x3912CAC
	0x03918C7C MOV X1, X0
	0x03918C80 CBZ X20, 0x3918CA8
	0x03918C84 MOV X0, X20
	0x03918C88 MOV X2, X31
	0x03918C8C BL 0x3C8FBFC
	0x03918C90 LDP X20, X19, [X31 + 0x20]
	0x03918C94 LDP X30, X21, [X31 + 0x10]
	0x03918C98 ADD X31, X31, 0x30
	0x03918C9C RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X0+40]
	007 Compare X8, 0
	008 JumpIfEqual {32}
	009 Move W21, [X8+24]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move X19, X0
	012 Move W22, W31
	013 Move W20, W31
	014 Move W9, [X8+24]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Add X8, X8, W22
	017 Move X0, [X8+32]
	018 Compare X0, 0
	019 JumpIfEqual {31}
	020 Move X1, X31
	021 Call Face.get_edgesInternal, X0
	022 Compare X0, 0
	023 JumpIfEqual {31}
	024 Move W8, [X0+24]
	025 Add W22, W22, 1
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Add W20, W20, W8
	028 Move X8, [X19+40]
	029 Compare X8, 0
	030 JumpIfNotEqual {14}
	031 Call 0x1C17F20
	032 Move W20, W31
	033 Move W0, W20
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Return X0
	040 Call 0x1C17F28

Method: System.Int32 get_indexCount()

Disassembly:
	0x03918CA0 MOV X1, X31
	0x03918CA4 CBNZ X20, 0x3918C84
	0x03918CA8 BL 0x1C16F20
	0x03918CAC STR X30, [X31 - 0x30]!
	0x03918CB0 STP X22, X21, [X31 + 0x10]
	0x03918CB4 STP X20, X19, [X31 + 0x20]
	0x03918CB8 ADRP X22, 0xAC9000
	0x03918CBC ADRP X20, 0x7DC000
	0x03918CC0 ADRP X21, 0x836000
	0x03918CC4 LDRB W8, [X22 + 0x89C]
	0x03918CC8 LDR X20, [X20 + 0xE58]
	0x03918CCC LDR X21, [X21 + 0x540]
	0x03918CD0 MOV X19, X0
	0x03918CD4 TBNZ X8, 0x0, 0x3918CF8
	0x03918CD8 ADRP X0, 0x836000
	0x03918CDC LDR X0, [X0 + 0x540]
	0x03918CE0 BL 0x1C16CF4
	0x03918CE4 ADRP X0, 0x7DC000
	0x03918CE8 LDR X0, [X0 + 0xE58]
	0x03918CEC BL 0x1C16CF4
	0x03918CF0 MOVZ W8, 0x1
	0x03918CF4 STRB W8, [X22 + 0x89C]
	0x03918CF8 LDR X0, [X20]
	0x03918CFC MOV W1, W31
	0x03918D00 BL 0x1C16D6C
	0x03918D04 STR X0, [X19 + 0xD0]
	0x03918D08 LDR X0, [X21]
	0x03918D0C MOV W1, W31
	0x03918D10 BL 0x1C16D6C
	0x03918D14 STR X0, [X19 + 0xD8]
	0x03918D18 LDR X0, [X20]
	0x03918D1C MOV W1, W31
	0x03918D20 BL 0x1C16D6C
	0x03918D24 MOVZ W8, 0x1
	0x03918D28 STR X0, [X19 + 0xE0]
	0x03918D2C STRB W8, [X19 + 0xE8]
	0x03918D30 LDP X20, X19, [X31 + 0x20]
	0x03918D34 LDP X22, X21, [X31 + 0x10]
	0x03918D38 LDR X30, [X31], #0x30
	0x03918D3C RET
	0x03918D40 STR X30, [X31 - 0x10]!
	0x03918D44 STR X1, [X0]
	0x03918D48 CBZ X1, 0x3918D64
	0x03918D4C LDRH W8, [X1 + 0xC8]
	0x03918D50 STRH W8, [X0 + 0x8]
	0x03918D54 LDRH W8, [X1 + 0xCA]
	0x03918D58 STRH W8, [X0 + 0xA]
	0x03918D5C LDR X30, [X31], #0x10
	0x03918D60 RET
	0x03918D64 BL 0x1C16F20
	0x03918D68 STR X30, [X31 - 0x20]!
	0x03918D6C STP X20, X19, [X31 + 0x10]
	0x03918D70 ADRP X20, 0xAC9000
	0x03918D74 LDRB W8, [X20 + 0x86E]
	0x03918D78 MOV X19, X0
	0x03918D7C TBNZ X8, 0x0, 0x3918D94
	0x03918D80 ADRP X0, 0x836000
	0x03918D84 LDR X0, [X0 + 0x528]
	0x03918D88 BL 0x1C16CF4
	0x03918D8C MOVZ W8, 0x1
	0x03918D90 STRB W8, [X20 + 0x86E]
	0x03918D94 MOV X0, X19
	0x03918D98 BL 0x3918870
	0x03918D9C CBZ W0, 0x3918E18
	0x03918DA0 ADRP X20, 0x836000
	0x03918DA4 LDR X20, [X20 + 0x528]
	0x03918DA8 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xACA000
	008 Move W8, [X20+2143]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x837000
	015 Move X0, [X0+1288]
	016 Call 0x1C17CF4
	017 Move X0, 0x837000
	018 Move X0, [X0+1296]
	019 Call 0x1C17CF4
	020 Move X0, 0x837000
	021 Move X0, [X0+1304]
	022 Call 0x1C17CF4
	023 Move X0, 0x837000
	024 Move X0, [X0+1280]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+2143], W8
	028 Move X19, [X19+40]
	029 Compare X19, 0
	030 JumpIfEqual {77}
	031 Move X22, 0x837000
	032 Move X22, [X22+1280]
	033 Move X0, [X22]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X22]
	039 Move X8, [X0+184]
	040 Move X23, 0x837000
	041 Move X20, [X8+24]
	042 Move X23, [X23+1288]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0x837000
	051 Move X8, [X0+184]
	052 Move X9, [X9+1296]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0x837000
	057 Move X8, [X8+1304]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Func`2<Object, Int32>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+24], X20
	066 Move X2, [X23]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move X30, [X31+48]
	074 Move X23, [X31+56]
	075 Call Enumerable.Sum, X0, X1
	076 Return X0
	077 Move X20, [X31+32]
	078 Move X19, [X31+40]
	079 Move X22, [X31+16]
	080 Move X21, [X31+24]
	081 Move W0, W31
	082 Move X30, [X31+48]
	083 Move X23, [X31+56]
	084 Return X0

Method: System.Int32 get_triangleCount()

Disassembly:
	0x03918DAC MOV W1, W31
	0x03918DB0 BL 0x39197E8
	0x03918DB4 MOVZ W1, 0x1F
	0x03918DB8 MOV X0, X19
	0x03918DBC BL 0x3919D94
	0x03918DC0 LDR X0, [X20]
	0x03918DC4 LDR W8, [X0 + 0xE0]
	0x03918DC8 CBNZ W8, 0x3918DD4
	0x03918DCC BL 0x1C16DFC
	0x03918DD0 LDR X0, [X20]
	0x03918DD4 LDR X8, [X0 + 0xB8]
	0x03918DD8 LDR X8, [X8 + 0x18]
	0x03918DDC CBZ X8, 0x3918E18
	0x03918DE0 LDR W9, [X0 + 0xE0]
	0x03918DE4 CBNZ W9, 0x3918DFC
	0x03918DE8 BL 0x1C16DFC
	0x03918DEC LDR X8, [X20]
	0x03918DF0 LDR X8, [X8 + 0xB8]
	0x03918DF4 LDR X8, [X8 + 0x18]
	0x03918DF8 CBZ X8, 0x3918E24
	0x03918DFC LDR X3, [X8 + 0x18]
	0x03918E00 LDR X0, [X8 + 0x40]
	0x03918E04 LDR X2, [X8 + 0x28]
	0x03918E08 MOV X1, X19
	0x03918E0C LDP X20, X19, [X31 + 0x10]
	0x03918E10 LDR X30, [X31], #0x20
	0x03918E14 BR X3
	0x03918E18 LDP X20, X19, [X31 + 0x10]
	0x03918E1C LDR X30, [X31], #0x20
	0x03918E20 RET
	0x03918E24 BL 0x1C16F20
	0x03918E28 STR X30, [X31 - 0x30]!
	0x03918E2C STP X22, X21, [X31 + 0x10]
	0x03918E30 STP X20, X19, [X31 + 0x20]
	0x03918E34 ADRP X20, 0xAC9000
	0x03918E38 ADRP X22, 0x7DB000
	0x03918E3C LDRB W8, [X20 + 0x86F]
	0x03918E40 LDR X22, [X22 + 0x598]
	0x03918E44 MOV X19, X0
	0x03918E48 TBNZ X8, 0x0, 0x3918E84
	0x03918E4C ADRP X0, 0x7DB000
	0x03918E50 LDR X0, [X0 + 0x970]
	0x03918E54 BL 0x1C16CF4
	0x03918E58 ADRP X0, 0x7E1000
	0x03918E5C LDR X0, [X0 + 0x7B0]
	0x03918E60 BL 0x1C16CF4
	0x03918E64 ADRP X0, 0x7DB000
	0x03918E68 LDR X0, [X0 + 0x598]
	0x03918E6C BL 0x1C16CF4
	0x03918E70 ADRP X0, 0x836000
	0x03918E74 LDR X0, [X0 + 0x528]
	0x03918E78 BL 0x1C16CF4
	0x03918E7C MOVZ W8, 0x1
	0x03918E80 STRB W8, [X20 + 0x86F]
	0x03918E84 MOV X20, X19
	0x03918E88 LDR X21, [X20 + 0xC0]!
	0x03918E8C LDR X0, [X22]
	0x03918E90 LDR W8, [X0 + 0xE0]
	0x03918E94 CBNZ W8, 0x3918E9C
	0x03918E98 BL 0x1C16DFC
	0x03918E9C MOV X0, X21
	0x03918EA0 MOV X1, X31
	0x03918EA4 MOV X2, X31
	0x03918EA8 BL 0x3C354F8
	0x03918EAC TBNZ X0, 0x0, 0x3918ECC
	0x03918EB0 ADRP X8, 0x7E1000
	0x03918EB4 LDR X8, [X8 + 0x7B0]
	0x03918EB8 MOV X0, X19
	0x03918EBC MOV X1, X20
	0x03918EC0 LDR X2, [X8]
	0x03918EC4 BL 0x21A4990

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xACA000
	008 Move W8, [X20+2144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x837000
	015 Move X0, [X0+1288]
	016 Call 0x1C17CF4
	017 Move X0, 0x837000
	018 Move X0, [X0+1296]
	019 Call 0x1C17CF4
	020 Move X0, 0x837000
	021 Move X0, [X0+1312]
	022 Call 0x1C17CF4
	023 Move X0, 0x837000
	024 Move X0, [X0+1280]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+2144], W8
	028 Move X19, [X19+40]
	029 Compare X19, 0
	030 JumpIfEqual {80}
	031 Move X22, 0x837000
	032 Move X22, [X22+1280]
	033 Move X0, [X22]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X22]
	039 Move X8, [X0+184]
	040 Move X23, 0x837000
	041 Move X20, [X8+32]
	042 Move X23, [X23+1288]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0x837000
	051 Move X8, [X0+184]
	052 Move X9, [X9+1296]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0x837000
	057 Move X8, [X8+1312]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Func`2<Object, Int32>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+32], X20
	066 Move X2, [X23]
	067 Move X0, X19
	068 Move X1, X20
	069 Call Enumerable.Sum, X0, X1
	070 Move W8, 0x5556
	071 NotImplemented "Instruction MOVK not yet implemented."
	072 NotImplemented "Instruction SMADDL not yet implemented."
	073 Move X9, X8
	074 ShiftRight X9, 63
	075 And X9, X9, 0x7FFFFFFF
	076 Move X8, X8
	077 ShiftRight X8, 32
	078 And X8, X8, 0x7FFFFFFF
	079 Add W0, W8, W9
	080 Move W0, W31
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move X30, [X31+48]
	086 Move X23, [X31+56]
	087 Return X0

Method: System.Void add_meshWillBeDestroyed(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)

Disassembly:
	0x03918EC8 TBZ X0, 0x0, 0x3918EE0
	0x03918ECC LDR X0, [X20]
	0x03918ED0 CBZ X0, 0x3918FB4
	0x03918ED4 MOV W1, W31
	0x03918ED8 MOV X2, X31
	0x03918EDC BL 0x3C396EC
	0x03918EE0 ADRP X20, 0x836000
	0x03918EE4 LDR X20, [X20 + 0x528]
	0x03918EE8 LDR X0, [X20]
	0x03918EEC LDR W8, [X0 + 0xE0]
	0x03918EF0 CBNZ W8, 0x3918EFC
	0x03918EF4 BL 0x1C16DFC
	0x03918EF8 LDR X0, [X20]
	0x03918EFC LDR X8, [X0 + 0xB8]
	0x03918F00 LDR X8, [X8 + 0x10]
	0x03918F04 CBZ X8, 0x3918F38
	0x03918F08 LDR W9, [X0 + 0xE0]
	0x03918F0C CBNZ W9, 0x3918F24
	0x03918F10 BL 0x1C16DFC
	0x03918F14 LDR X8, [X20]
	0x03918F18 LDR X8, [X8 + 0xB8]
	0x03918F1C LDR X8, [X8 + 0x10]
	0x03918F20 CBZ X8, 0x3918FB4
	0x03918F24 LDR X9, [X8 + 0x18]
	0x03918F28 LDR X0, [X8 + 0x40]
	0x03918F2C LDR X2, [X8 + 0x28]
	0x03918F30 MOV X1, X19
	0x03918F34 BLR X9
	0x03918F38 LDRB W8, [X19 + 0xA0]
	0x03918F3C CBNZ W8, 0x3918FA4
	0x03918F40 ADRP X20, 0x7DB000
	0x03918F44 LDR X20, [X20 + 0x970]
	0x03918F48 LDR X0, [X20]
	0x03918F4C LDR W8, [X0 + 0xE0]
	0x03918F50 CBNZ W8, 0x3918F58
	0x03918F54 BL 0x1C16DFC
	0x03918F58 MOV X0, X31
	0x03918F5C BL 0x3C03278
	0x03918F60 TBZ X0, 0x0, 0x3918FA4
	0x03918F64 LDR X0, [X20]
	0x03918F68 LDR W8, [X0 + 0xE0]
	0x03918F6C CBNZ W8, 0x3918F74
	0x03918F70 BL 0x1C16DFC
	0x03918F74 MOV X0, X31
	0x03918F78 BL 0x3C018E4
	0x03918F7C TBNZ X0, 0x0, 0x3918FA4
	0x03918F80 MOV X0, X31
	0x03918F84 BL 0x3C3C88C
	0x03918F88 CMP W0, 0x1
	0x03918F8C B.LT 0x3918FA4
	0x03918F90 MOV X0, X19
	0x03918F94 LDP X20, X19, [X31 + 0x20]
	0x03918F98 LDP X22, X21, [X31 + 0x10]
	0x03918F9C LDR X30, [X31], #0x30
	0x03918FA0 B 0x3918FB8
	0x03918FA4 LDP X20, X19, [X31 + 0x20]
	0x03918FA8 LDP X22, X21, [X31 + 0x10]
	0x03918FAC LDR X30, [X31], #0x30
	0x03918FB0 RET
	0x03918FB4 BL 0x1C16F20

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xACA000
	010 Move X24, 0x837000
	011 Move W8, [X20+2145]
	012 Move X24, [X24+1320]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x837000
	019 Move X0, [X0+1328]
	020 Call 0x1C17CF4
	021 Move X0, 0x837000
	022 Move X0, [X0+1320]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2145], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x837000
	034 Move X20, [X8]
	035 Move X25, [X25+1328]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Combine, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X0, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Call 0x1C25138
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X20, X0
	062 Move X20, [X31+48]
	063 Move X19, [X31+56]
	064 Move X22, [X31+32]
	065 Move X21, [X31+40]
	066 Move X24, [X31+16]
	067 Move X23, [X31+24]
	068 Move X30, [X31+64]
	069 Move X25, [X31+72]
	070 Return 
	071 Move X0, X22
	072 Move X1, X23
	073 Call 0x1C181E0

Method: System.Void remove_meshWillBeDestroyed(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)

Disassembly:
	0x03918FB8 STP X30, X21, [X31 - 0x20]!
	0x03918FBC STP X20, X19, [X31 + 0x10]
	0x03918FC0 ADRP X21, 0xAC9000
	0x03918FC4 ADRP X20, 0x836000
	0x03918FC8 LDRB W8, [X21 + 0x870]
	0x03918FCC LDR X20, [X20 + 0x528]
	0x03918FD0 MOV X19, X0
	0x03918FD4 TBNZ X8, 0x0, 0x3919004
	0x03918FD8 ADRP X0, 0x7DD000
	0x03918FDC LDR X0, [X0 + 0x168]
	0x03918FE0 BL 0x1C16CF4
	0x03918FE4 ADRP X0, 0x7DB000
	0x03918FE8 LDR X0, [X0 + 0x598]
	0x03918FEC BL 0x1C16CF4
	0x03918FF0 ADRP X0, 0x836000
	0x03918FF4 LDR X0, [X0 + 0x528]
	0x03918FF8 BL 0x1C16CF4
	0x03918FFC MOVZ W8, 0x1
	0x03919000 STRB W8, [X21 + 0x870]
	0x03919004 LDR X0, [X20]
	0x03919008 LDR W8, [X0 + 0xE0]
	0x0391900C CBNZ W8, 0x3919018
	0x03919010 BL 0x1C16DFC
	0x03919014 LDR X0, [X20]
	0x03919018 LDR X8, [X0 + 0xB8]
	0x0391901C LDR X8, [X8]
	0x03919020 CBZ X8, 0x391905C
	0x03919024 LDR W9, [X0 + 0xE0]
	0x03919028 CBNZ W9, 0x3919040
	0x0391902C BL 0x1C16DFC
	0x03919030 LDR X8, [X20]
	0x03919034 LDR X8, [X8 + 0xB8]
	0x03919038 LDR X8, [X8]
	0x0391903C CBZ X8, 0x39190C0
	0x03919040 LDR X3, [X8 + 0x18]
	0x03919044 LDR X0, [X8 + 0x40]
	0x03919048 LDR X2, [X8 + 0x28]
	0x0391904C MOV X1, X19
	0x03919050 LDP X20, X19, [X31 + 0x10]
	0x03919054 LDP X30, X21, [X31], #0x20
	0x03919058 BR X3
	0x0391905C MOV X0, X19
	0x03919060 MOV X1, X31
	0x03919064 BL 0x3C32ECC
	0x03919068 CBZ X0, 0x39190C0
	0x0391906C ADRP X8, 0x7DC000
	0x03919070 LDR X8, [X8 + 0x168]
	0x03919074 LDR X1, [X8]
	0x03919078 BL 0x21E52E4
	0x0391907C CBZ X0, 0x39190C0
	0x03919080 MOV X1, X31
	0x03919084 BL 0x3C16D04
	0x03919088 ADRP X8, 0x7DA000
	0x0391908C LDR X8, [X8 + 0x598]
	0x03919090 MOV X19, X0
	0x03919094 LDR X8, [X8]
	0x03919098 LDR W9, [X8 + 0xE0]
	0x0391909C CBNZ W9, 0x39190A8
	0x039190A0 MOV X0, X8
	0x039190A4 BL 0x1C16DFC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xACA000
	010 Move X24, 0x837000
	011 Move W8, [X20+2146]
	012 Move X24, [X24+1320]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x837000
	019 Move X0, [X0+1328]
	020 Call 0x1C17CF4
	021 Move X0, 0x837000
	022 Move X0, [X0+1320]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2146], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x836000
	034 Move X20, [X8]
	035 Move X25, [X25+1328]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Remove, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X0, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Call 0x1C25138
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X20, X0
	062 Move X20, [X31+48]
	063 Move X19, [X31+56]
	064 Move X22, [X31+32]
	065 Move X21, [X31+40]
	066 Move X24, [X31+16]
	067 Move X23, [X31+24]
	068 Move X30, [X31+64]
	069 Move X25, [X31+72]
	070 Return 
	071 Move X0, X22
	072 Move X1, X23
	073 Call 0x1C181E0

Method: System.Void add_meshWasInitialized(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)

Disassembly:
	0x039190A8 MOV X0, X19
	0x039190AC LDP X20, X19, [X31 + 0x10]
	0x039190B0 MOVZ W1, 0x1
	0x039190B4 MOV X2, X31
	0x039190B8 LDP X30, X21, [X31], #0x20
	0x039190BC B 0x3C39520
	0x039190C0 BL 0x1C16F20
	0x039190C4 STR X30, [X31 - 0x20]!
	0x039190C8 STP X20, X19, [X31 + 0x10]
	0x039190CC ADRP X20, 0xAC8000
	0x039190D0 LDRB W8, [X20 + 0x873]
	0x039190D4 MOV X19, X0
	0x039190D8 TBNZ X8, 0x0, 0x3919120
	0x039190DC ADRP X0, 0x835000
	0x039190E0 LDR X0, [X0 + 0x548]
	0x039190E4 BL 0x1C16CF4
	0x039190E8 ADRP X0, 0x7DA000
	0x039190EC LDR X0, [X0 + 0xA58]
	0x039190F0 BL 0x1C16CF4
	0x039190F4 ADRP X0, 0x834000
	0x039190F8 LDR X0, [X0 + 0xAD0]
	0x039190FC BL 0x1C16CF4
	0x03919100 ADRP X0, 0x835000
	0x03919104 LDR X0, [X0 + 0x550]
	0x03919108 BL 0x1C16CF4
	0x0391910C ADRP X0, 0x835000
	0x03919110 LDR X0, [X0 + 0x558]
	0x03919114 BL 0x1C16CF4
	0x03919118 MOVZ W8, 0x1
	0x0391911C STRB W8, [X20 + 0x873]
	0x03919120 CBZ X19, 0x39191D8
	0x03919124 LDRB W8, [X19 + 0x18]
	0x03919128 ANDS W31, W8, 0x3
	0x0391912C B.EQ 0x3919164
	0x03919130 ADRP X8, 0x834000
	0x03919134 LDR X8, [X8 + 0xAD0]
	0x03919138 ADRP X19, 0x835000
	0x0391913C LDR X0, [X8]
	0x03919140 LDR W8, [X0 + 0xE0]
	0x03919144 LDR X19, [X19 + 0x558]
	0x03919148 CBNZ W8, 0x3919150
	0x0391914C BL 0x1C16DFC
	0x03919150 LDR X0, [X19]
	0x03919154 MOV X1, X31
	0x03919158 BL 0x39070F4
	0x0391915C MOV X20, X31
	0x03919160 B 0x39191C8
	0x03919164 ADRP X8, 0x7DA000
	0x03919168 LDR X8, [X8 + 0xA58]
	0x0391916C LDR X0, [X8]
	0x03919170 BL 0x1C16F10
	0x03919174 MOV X1, X31
	0x03919178 MOV X20, X0
	0x0391917C BL 0x3C35A08
	0x03919180 CBZ X20, 0x39191D8
	0x03919184 ADRP X8, 0x835000
	0x03919188 LDR X8, [X8 + 0x550]
	0x0391918C MOV X0, X20
	0x03919190 MOV X2, X31
	0x03919194 LDR X1, [X8]
	0x03919198 BL 0x3C38A84

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xAC9000
	010 Move X24, 0x836000
	011 Move W8, [X20+2147]
	012 Move X24, [X24+1320]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x836000
	019 Move X0, [X0+1328]
	020 Call 0x1C17CF4
	021 Move X0, 0x836000
	022 Move X0, [X0+1320]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2147], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x836000
	034 Move X20, [X8+8]
	035 Move X25, [X25+1328]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Combine, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X8, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Add X0, X8, 8
	060 Call 0x1C25138
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, X0
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return 
	072 Move X0, X22
	073 Move X1, X23
	074 Call 0x1C181E0

Method: System.Void remove_meshWasInitialized(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)

Disassembly:
	0x0391919C ADRP X8, 0x835000
	0x039191A0 LDR X8, [X8 + 0x548]
	0x039191A4 MOV X0, X20
	0x039191A8 LDR X1, [X8]
	0x039191AC BL 0x21E51FC
	0x039191B0 CBZ X0, 0x39191D8
	0x039191B4 MOVZ W8, 0x2
	0x039191B8 MOV X1, X19
	0x039191BC MOV X20, X0
	0x039191C0 STR W8, [X0 + 0x20]
	0x039191C4 BL 0x39191DC
	0x039191C8 MOV X0, X20
	0x039191CC LDP X20, X19, [X31 + 0x10]
	0x039191D0 LDR X30, [X31], #0x20
	0x039191D4 RET
	0x039191D8 BL 0x1C16F20
	0x039191DC SUB X31, X31, 0xC0
	0x039191E0 STR X30, [X31 + 0x70]
	0x039191E4 STP X26, X25, [X31 + 0x80]
	0x039191E8 STP X24, X23, [X31 + 0x90]
	0x039191EC STP X22, X21, [X31 + 0xA0]
	0x039191F0 STP X20, X19, [X31 + 0xB0]
	0x039191F4 ADRP X21, 0xAC8000
	0x039191F8 LDRB W8, [X21 + 0x877]
	0x039191FC MOV X20, X1
	0x03919200 MOV X19, X0
	0x03919204 TBNZ X8, 0x0, 0x3919234
	0x03919208 ADRP X0, 0x835000
	0x0391920C LDR X0, [X0 + 0x3F0]
	0x03919210 BL 0x1C16CF4
	0x03919214 ADRP X0, 0x835000
	0x03919218 LDR X0, [X0 + 0x560]
	0x0391921C BL 0x1C16CF4
	0x03919220 ADRP X0, 0x7DB000
	0x03919224 LDR X0, [X0 + 0xE58]
	0x03919228 BL 0x1C16CF4
	0x0391922C MOVZ W8, 0x1
	0x03919230 STRB W8, [X21 + 0x877]
	0x03919234 CBZ X20, 0x39193DC
	0x03919238 ADRP X9, 0x835000
	0x0391923C LDR W8, [X20 + 0x18]
	0x03919240 LDR X9, [X9 + 0x3F0]
	0x03919244 CMP W8, 0x0
	0x03919248 LDR X0, [X9]
	0x0391924C ADD W9, W8, 0x3
	0x03919250 CSEL W8, W9, W8, LT
	0x03919254 SBFM W1, W8, 0x2, 0x1F
	0x03919258 BL 0x1C16D6C
	0x0391925C LDR W8, [X20 + 0x18]
	0x03919260 MOV X21, X0
	0x03919264 CMP W8, 0x1
	0x03919268 B.LT 0x3919374
	0x0391926C ADRP X24, 0x7DB000
	0x03919270 ADRP X25, 0x835000
	0x03919274 LDR X24, [X24 + 0xE58]
	0x03919278 LDR X25, [X25 + 0x560]
	0x0391927C MOV W23, W31
	0x03919280 LDR X0, [X24]
	0x03919284 MOVZ W1, 0x6
	0x03919288 BL 0x1C16D6C
	0x0391928C CBZ X0, 0x39193DC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xAC9000
	010 Move X24, 0x836000
	011 Move W8, [X20+2148]
	012 Move X24, [X24+1320]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x836000
	019 Move X0, [X0+1328]
	020 Call 0x1C17CF4
	021 Move X0, 0x836000
	022 Move X0, [X0+1320]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2148], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x836000
	034 Move X20, [X8+8]
	035 Move X25, [X25+1328]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Remove, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X8, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Add X0, X8, 8
	060 Call 0x1C25138
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, X0
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return 
	072 Move X0, X22
	073 Move X1, X23
	074 Call 0x1C181E0

Method: System.Void add_componentWillBeDestroyed(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)

Disassembly:
	0x03919290 LDR W8, [X0 + 0x18]
	0x03919294 MOV X22, X0
	0x03919298 CBZ W8, 0x39193D8
	0x0391929C CMP W8, 0x1
	0x039192A0 STR W23, [X22 + 0x20]
	0x039192A4 B.EQ 0x39193D8
	0x039192A8 ADD W9, W23, 0x1
	0x039192AC CMP W8, 0x2
	0x039192B0 STR W9, [X22 + 0x24]
	0x039192B4 B.LS 0x39193D8
	0x039192B8 ADD W9, W9, 0x1
	0x039192BC CMP W8, 0x3
	0x039192C0 STR W9, [X22 + 0x28]
	0x039192C4 B.EQ 0x39193D8
	0x039192C8 SUB W9, W9, 0x1
	0x039192CC CMP W8, 0x4
	0x039192D0 STR W9, [X22 + 0x2C]
	0x039192D4 B.LS 0x39193D8
	0x039192D8 ADD W9, W9, 0x2
	0x039192DC CMP W8, 0x5
	0x039192E0 STR W9, [X22 + 0x30]
	0x039192E4 B.EQ 0x39193D8
	0x039192E8 SUB W26, W9, 0x1
	0x039192EC ADD X8, X31, 0x30
	0x039192F0 MOV X0, X31
	0x039192F4 STR W26, [X22 + 0x34]
	0x039192F8 BL 0x38F6A48
	0x039192FC LDP V0, V1, [X31 + 0x30]
	0x03919300 LDR X0, [X25]
	0x03919304 STP V0, V1, [X31 + 0x50]
	0x03919308 BL 0x1C16F10
	0x0391930C LDP V0, V1, [X31 + 0x50]
	0x03919310 ADD X3, X31, 0x10
	0x03919314 MOVN W5, 0x0
	0x03919318 MOVN W6, 0x0
	0x0391931C MOV X1, X22
	0x03919320 MOV W2, W31
	0x03919324 MOV W4, W31
	0x03919328 MOV W7, W31
	0x0391932C MOV X23, X0
	0x03919330 STP V0, V1, [X31 + 0x10]
	0x03919334 STR X31, [X31]
	0x03919338 BL 0x39004D4
	0x0391933C CBZ X21, 0x39193DC
	0x03919340 SUB W8, W26, 0x2
	0x03919344 LDR W10, [X21 + 0x18]
	0x03919348 CMP W8, 0x0
	0x0391934C CSINC W9, W8, W26, GE
	0x03919350 SBFM W9, W9, 0x2, 0x1F
	0x03919354 CMP W9, W10
	0x03919358 B.CS 0x39193D8
	0x0391935C ADD X9, X21, W9, 0x3, SXTW
	0x03919360 STR X23, [X9 + 0x20]
	0x03919364 LDR W9, [X20 + 0x18]
	0x03919368 ADD W23, W8, 0x4
	0x0391936C CMP W23, W9
	0x03919370 B.LT 0x3919280
	0x03919374 MOV X0, X19
	0x03919378 BL 0x3916FC0
	0x0391937C MOV X0, X19
	0x03919380 MOV X1, X20

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xAC9000
	010 Move X24, 0x836000
	011 Move W8, [X20+2149]
	012 Move X24, [X24+1320]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x836000
	019 Move X0, [X0+1328]
	020 Call 0x1C17CF4
	021 Move X0, 0x836000
	022 Move X0, [X0+1320]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2149], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x836000
	034 Move X20, [X8+16]
	035 Move X25, [X25+1328]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Combine, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X8, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Add X0, X8, 16
	060 Call 0x1C25138
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, X0
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return 
	072 Move X0, X22
	073 Move X1, X23
	074 Call 0x1C181E0

Method: System.Void remove_componentWillBeDestroyed(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)

Disassembly:
	0x03919384 BL 0x3916448
	0x03919388 MOV X0, X20
	0x0391938C MOV X1, X31
	0x03919390 STR X21, [X19 + 0x28]
	0x03919394 BL 0x3933C34
	0x03919398 STR X0, [X19 + 0x30]
	0x0391939C MOV X0, X19
	0x039193A0 BL 0x3915EC4
	0x039193A4 MOV X0, X19
	0x039193A8 MOV W1, W31
	0x039193AC BL 0x39197E8
	0x039193B0 MOVZ W1, 0x1F
	0x039193B4 MOV X0, X19
	0x039193B8 BL 0x3919D94
	0x039193BC LDP X20, X19, [X31 + 0xB0]
	0x039193C0 LDP X22, X21, [X31 + 0xA0]
	0x039193C4 LDP X24, X23, [X31 + 0x90]
	0x039193C8 LDP X26, X25, [X31 + 0x80]
	0x039193CC LDR X30, [X31 + 0x70]
	0x039193D0 ADD X31, X31, 0xC0
	0x039193D4 RET
	0x039193D8 BL 0x1C16F28
	0x039193DC BL 0x1C16F20
	0x039193E0 STR X30, [X31 - 0x20]!
	0x039193E4 STP X20, X19, [X31 + 0x10]
	0x039193E8 ADRP X19, 0xAC8000
	0x039193EC ADRP X20, 0x7DA000
	0x039193F0 LDRB W8, [X19 + 0x874]
	0x039193F4 LDR X20, [X20 + 0xA58]
	0x039193F8 TBNZ X8, 0x0, 0x391941C
	0x039193FC ADRP X0, 0x835000
	0x03919400 LDR X0, [X0 + 0x548]
	0x03919404 BL 0x1C16CF4
	0x03919408 ADRP X0, 0x7DA000
	0x0391940C LDR X0, [X0 + 0xA58]
	0x03919410 BL 0x1C16CF4
	0x03919414 MOVZ W8, 0x1
	0x03919418 STRB W8, [X19 + 0x874]
	0x0391941C LDR X0, [X20]
	0x03919420 BL 0x1C16F10
	0x03919424 MOV X1, X31
	0x03919428 MOV X19, X0
	0x0391942C BL 0x3C35A08
	0x03919430 CBZ X19, 0x391946C
	0x03919434 ADRP X8, 0x835000
	0x03919438 LDR X8, [X8 + 0x548]
	0x0391943C MOV X0, X19
	0x03919440 LDR X1, [X8]
	0x03919444 BL 0x21E51FC
	0x03919448 CBZ X0, 0x391946C
	0x0391944C MOVZ W8, 0x2
	0x03919450 MOV X19, X0
	0x03919454 STR W8, [X0 + 0x20]
	0x03919458 BL 0x3916FC0
	0x0391945C MOV X0, X19
	0x03919460 LDP X20, X19, [X31 + 0x10]
	0x03919464 LDR X30, [X31], #0x20
	0x03919468 RET
	0x0391946C BL 0x1C16F20
	0x03919470 STR X30, [X31 - 0x30]!
	0x03919474 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xAC9000
	010 Move X24, 0x836000
	011 Move W8, [X20+2150]
	012 Move X24, [X24+1320]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x836000
	019 Move X0, [X0+1328]
	020 Call 0x1C17CF4
	021 Move X0, 0x836000
	022 Move X0, [X0+1320]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2150], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x836000
	034 Move X20, [X8+16]
	035 Move X25, [X25+1328]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Remove, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X8, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Add X0, X8, 16
	060 Call 0x1C25138
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, X0
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return 
	072 Move X0, X22
	073 Move X1, X23
	074 Call 0x1C181E0

Method: System.Void add_componentHasBeenReset(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)

Disassembly:
	0x03919478 STP X20, X19, [X31 + 0x20]
	0x0391947C ADRP X21, 0xAC8000
	0x03919480 ADRP X22, 0x7DA000
	0x03919484 LDRB W8, [X21 + 0x875]
	0x03919488 LDR X22, [X22 + 0xA58]
	0x0391948C MOV X19, X1
	0x03919490 MOV X20, X0
	0x03919494 TBNZ X8, 0x0, 0x39194C4
	0x03919498 ADRP X0, 0x835000
	0x0391949C LDR X0, [X0 + 0x548]
	0x039194A0 BL 0x1C16CF4
	0x039194A4 ADRP X0, 0x7DA000
	0x039194A8 LDR X0, [X0 + 0xA58]
	0x039194AC BL 0x1C16CF4
	0x039194B0 ADRP X0, 0x835000
	0x039194B4 LDR X0, [X0 + 0x550]
	0x039194B8 BL 0x1C16CF4
	0x039194BC MOVZ W8, 0x1
	0x039194C0 STRB W8, [X21 + 0x875]
	0x039194C4 LDR X0, [X22]
	0x039194C8 BL 0x1C16F10
	0x039194CC MOV X1, X31
	0x039194D0 MOV X21, X0
	0x039194D4 BL 0x3C35A08
	0x039194D8 CBZ X21, 0x391953C
	0x039194DC ADRP X8, 0x835000
	0x039194E0 LDR X8, [X8 + 0x548]
	0x039194E4 ADRP X22, 0x835000
	0x039194E8 MOV X0, X21
	0x039194EC LDR X1, [X8]
	0x039194F0 LDR X22, [X22 + 0x550]
	0x039194F4 BL 0x21E51FC
	0x039194F8 LDR X1, [X22]
	0x039194FC MOV X22, X0
	0x03919500 MOV X0, X21
	0x03919504 MOV X2, X31
	0x03919508 BL 0x3C38A84
	0x0391950C CBZ X22, 0x391953C
	0x03919510 MOVZ W8, 0x2
	0x03919514 MOV X0, X22
	0x03919518 MOV X1, X20
	0x0391951C MOV X2, X19
	0x03919520 STR W8, [X22 + 0x20]
	0x03919524 BL 0x3919540
	0x03919528 MOV X0, X22
	0x0391952C LDP X20, X19, [X31 + 0x20]
	0x03919530 LDP X22, X21, [X31 + 0x10]
	0x03919534 LDR X30, [X31], #0x30
	0x03919538 RET
	0x0391953C BL 0x1C16F20
	0x03919540 STP X30, X23, [X31 - 0x30]!
	0x03919544 STP X22, X21, [X31 + 0x10]
	0x03919548 STP X20, X19, [X31 + 0x20]
	0x0391954C ADRP X22, 0xAC8000
	0x03919550 LDRB W8, [X22 + 0x878]
	0x03919554 MOV X20, X2
	0x03919558 MOV X21, X1
	0x0391955C MOV X19, X0
	0x03919560 TBNZ X8, 0x0, 0x3919584
	0x03919564 ADRP X0, 0x835000
	0x03919568 LDR X0, [X0 + 0x3E0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xAC9000
	010 Move X24, 0x836000
	011 Move W8, [X20+2151]
	012 Move X24, [X24+1320]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x836000
	019 Move X0, [X0+1328]
	020 Call 0x1C17CF4
	021 Move X0, 0x836000
	022 Move X0, [X0+1320]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2151], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x836000
	034 Move X20, [X8+24]
	035 Move X25, [X25+1328]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Combine, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X8, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Add X0, X8, 24
	060 Call 0x1C25138
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, X0
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return 
	072 Move X0, X22
	073 Move X1, X23
	074 Call 0x1C181E0

Method: System.Void remove_componentHasBeenReset(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)

Disassembly:
	0x0391956C BL 0x1C16CF4
	0x03919570 ADRP X0, 0x835000
	0x03919574 LDR X0, [X0 + 0x170]
	0x03919578 BL 0x1C16CF4
	0x0391957C MOVZ W8, 0x1
	0x03919580 STRB W8, [X22 + 0x878]
	0x03919584 CBZ X21, 0x3919608
	0x03919588 ADRP X22, 0x835000
	0x0391958C ADRP X23, 0x835000
	0x03919590 LDR X22, [X22 + 0x170]
	0x03919594 LDR X23, [X23 + 0x3E0]
	0x03919598 MOV X0, X19
	0x0391959C BL 0x3916FC0
	0x039195A0 LDR X1, [X22]
	0x039195A4 MOV X0, X21
	0x039195A8 BL 0x21D599C
	0x039195AC STR X0, [X19 + 0x58]
	0x039195B0 LDR X1, [X23]
	0x039195B4 MOV X0, X20
	0x039195B8 BL 0x21D577C
	0x039195BC LDR X8, [X19 + 0x58]
	0x039195C0 STR X0, [X19 + 0x28]
	0x039195C4 MOV X1, X31
	0x039195C8 MOV X0, X8
	0x039195CC BL 0x3933C34
	0x039195D0 STR X0, [X19 + 0x30]
	0x039195D4 MOV X0, X19
	0x039195D8 BL 0x3915A68
	0x039195DC MOV X0, X19
	0x039195E0 BL 0x3915B10
	0x039195E4 MOV X0, X19
	0x039195E8 MOV W1, W31
	0x039195EC BL 0x39197E8
	0x039195F0 MOV X0, X19
	0x039195F4 LDP X20, X19, [X31 + 0x20]
	0x039195F8 LDP X22, X21, [X31 + 0x10]
	0x039195FC MOVZ W1, 0x1F
	0x03919600 LDP X30, X23, [X31], #0x30
	0x03919604 B 0x3919D94
	0x03919608 ADRP X0, 0x7DF000
	0x0391960C LDR X0, [X0 + 0x528]
	0x03919610 BL 0x1C16D08
	0x03919614 BL 0x1C16F10
	0x03919618 MOV X19, X0
	0x0391961C ADRP X0, 0x835000
	0x03919620 LDR X0, [X0 + 0x450]
	0x03919624 BL 0x1C16D08
	0x03919628 MOV X1, X0
	0x0391962C MOV X0, X19
	0x03919630 MOV X2, X31
	0x03919634 BL 0x330E100
	0x03919638 ADRP X0, 0x835000
	0x0391963C LDR X0, [X0 + 0x568]
	0x03919640 BL 0x1C16D08
	0x03919644 MOV X1, X0
	0x03919648 MOV X0, X19
	0x0391964C BL 0x1C16DEC
	0x03919650 STP X30, X25, [X31 - 0x40]!
	0x03919654 STP X24, X23, [X31 + 0x10]
	0x03919658 STP X22, X21, [X31 + 0x20]
	0x0391965C STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xAC9000
	010 Move X24, 0x836000
	011 Move W8, [X20+2152]
	012 Move X24, [X24+1320]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x836000
	019 Move X0, [X0+1328]
	020 Call 0x1C17CF4
	021 Move X0, 0x836000
	022 Move X0, [X0+1320]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2152], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x836000
	034 Move X20, [X8+24]
	035 Move X25, [X25+1328]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Remove, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X8, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Add X0, X8, 24
	060 Call 0x1C25138
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, X0
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return 
	072 Move X0, X22
	073 Move X1, X23
	074 Call 0x1C181E0

Method: System.Void add_elementSelectionChanged(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)

Disassembly:
	0x03919660 ADRP X23, 0xAC8000
	0x03919664 ADRP X25, 0x7DA000
	0x03919668 LDRB W8, [X23 + 0x876]
	0x0391966C LDR X25, [X25 + 0xA58]
	0x03919670 MOV X24, X4
	0x03919674 MOV X19, X3
	0x03919678 MOV X20, X2
	0x0391967C MOV X21, X1
	0x03919680 MOV X22, X0
	0x03919684 TBNZ X8, 0x0, 0x39196CC
	0x03919688 ADRP X0, 0x835000
	0x0391968C LDR X0, [X0 + 0x570]
	0x03919690 BL 0x1C16CF4
	0x03919694 ADRP X0, 0x835000
	0x03919698 LDR X0, [X0 + 0x578]
	0x0391969C BL 0x1C16CF4
	0x039196A0 ADRP X0, 0x835000
	0x039196A4 LDR X0, [X0 + 0x548]
	0x039196A8 BL 0x1C16CF4
	0x039196AC ADRP X0, 0x7DA000
	0x039196B0 LDR X0, [X0 + 0xA58]
	0x039196B4 BL 0x1C16CF4
	0x039196B8 ADRP X0, 0x835000
	0x039196BC LDR X0, [X0 + 0x550]
	0x039196C0 BL 0x1C16CF4
	0x039196C4 MOVZ W8, 0x1
	0x039196C8 STRB W8, [X23 + 0x876]
	0x039196CC LDR X0, [X25]
	0x039196D0 BL 0x1C16F10
	0x039196D4 MOV X1, X31
	0x039196D8 MOV X23, X0
	0x039196DC BL 0x3C35A08
	0x039196E0 CBZ X23, 0x39197E4
	0x039196E4 ADRP X8, 0x835000
	0x039196E8 LDR X8, [X8 + 0x550]
	0x039196EC ADRP X25, 0x835000
	0x039196F0 MOV X0, X23
	0x039196F4 MOV X2, X31
	0x039196F8 LDR X1, [X8]
	0x039196FC LDR X25, [X25 + 0x548]
	0x03919700 BL 0x3C38A84
	0x03919704 LDR X1, [X25]
	0x03919708 MOV X0, X23
	0x0391970C BL 0x21E51FC
	0x03919710 MOV X23, X0
	0x03919714 CBZ X24, 0x3919754
	0x03919718 CBZ X23, 0x39197E4
	0x0391971C ADRP X25, 0x835000
	0x03919720 LDR X25, [X25 + 0x570]
	0x03919724 MOV X0, X23
	0x03919728 BL 0x3912AD8
	0x0391972C LDR X1, [X25]
	0x03919730 MOV X25, X0
	0x03919734 MOV X0, X24
	0x03919738 BL 0x21D577C
	0x0391973C CBZ X25, 0x39197E4
	0x03919740 MOV X1, X0
	0x03919744 MOV X0, X25
	0x03919748 MOV X2, X31
	0x0391974C BL 0x3C13558
	0x03919750 B 0x3919758

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xAC9000
	010 Move X24, 0x836000
	011 Move W8, [X20+2153]
	012 Move X24, [X24+1320]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x836000
	019 Move X0, [X0+1328]
	020 Call 0x1C17CF4
	021 Move X0, 0x836000
	022 Move X0, [X0+1320]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2153], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x836000
	034 Move X20, [X8+32]
	035 Move X25, [X25+1328]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Combine, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X8, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Add X0, X8, 32
	060 Call 0x1C25138
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, X0
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return 
	072 Move X0, X22
	073 Move X1, X23
	074 Call 0x1C181E0

Method: System.Void remove_elementSelectionChanged(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)

Disassembly:
	0x03919754 CBZ X23, 0x39197E4
	0x03919758 MOVZ W8, 0x2
	0x0391975C MOV X0, X23
	0x03919760 MOV X1, X22
	0x03919764 MOV W2, W31
	0x03919768 STR W8, [X23 + 0x20]
	0x0391976C BL 0x3916CF4
	0x03919770 MOV X0, X23
	0x03919774 MOV X1, X21
	0x03919778 BL 0x39159C8
	0x0391977C MOV X0, X23
	0x03919780 MOV X1, X20
	0x03919784 BL 0x3915F7C
	0x03919788 CBZ X19, 0x39197A4
	0x0391978C ADRP X8, 0x835000
	0x03919790 LDR X8, [X8 + 0x578]
	0x03919794 MOV X0, X19
	0x03919798 LDR X1, [X8]
	0x0391979C BL 0x21D577C
	0x039197A0 B 0x39197A8
	0x039197A4 MOV X0, X31
	0x039197A8 STR X0, [X23 + 0x48]
	0x039197AC MOV X0, X23
	0x039197B0 BL 0x3915B10
	0x039197B4 MOV X0, X23
	0x039197B8 MOV W1, W31
	0x039197BC BL 0x39197E8
	0x039197C0 MOVZ W1, 0x1F
	0x039197C4 MOV X0, X23
	0x039197C8 BL 0x3919D94
	0x039197CC MOV X0, X23
	0x039197D0 LDP X20, X19, [X31 + 0x30]
	0x039197D4 LDP X22, X21, [X31 + 0x20]
	0x039197D8 LDP X24, X23, [X31 + 0x10]
	0x039197DC LDP X30, X25, [X31], #0x40
	0x039197E0 RET
	0x039197E4 BL 0x1C16F20
	0x039197E8 SUB X31, X31, 0x70
	0x039197EC STP X29, X30, [X31 + 0x10]
	0x039197F0 STP X28, X27, [X31 + 0x20]
	0x039197F4 STP X26, X25, [X31 + 0x30]
	0x039197F8 STP X24, X23, [X31 + 0x40]
	0x039197FC STP X22, X21, [X31 + 0x50]
	0x03919800 STP X20, X19, [X31 + 0x60]
	0x03919804 ADRP X21, 0xAC8000
	0x03919808 ADRP X20, 0x7DA000
	0x0391980C LDRB W8, [X21 + 0x879]
	0x03919810 LDR X20, [X20 + 0x598]
	0x03919814 MOV W22, W1
	0x03919818 MOV X19, X0
	0x0391981C TBNZ X8, 0x0, 0x39198AC
	0x03919820 ADRP X0, 0x7DA000
	0x03919824 LDR X0, [X0 + 0x758]
	0x03919828 BL 0x1C16CF4
	0x0391982C ADRP X0, 0x834000
	0x03919830 LDR X0, [X0 + 0xF38]
	0x03919834 BL 0x1C16CF4
	0x03919838 ADRP X0, 0x835000
	0x0391983C LDR X0, [X0 + 0x580]
	0x03919840 BL 0x1C16CF4
	0x03919844 ADRP X0, 0x835000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xAC9000
	010 Move X24, 0x836000
	011 Move W8, [X20+2154]
	012 Move X24, [X24+1320]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x836000
	019 Move X0, [X0+1328]
	020 Call 0x1C17CF4
	021 Move X0, 0x836000
	022 Move X0, [X0+1320]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2154], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x836000
	034 Move X20, [X8+32]
	035 Move X25, [X25+1328]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Remove, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X8, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Add X0, X8, 32
	060 Call 0x1C25138
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, X0
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return 
	072 Move X0, X22
	073 Move X1, X23
	074 Call 0x1C181E0

Method: UnityEngine.Mesh get_mesh()

Disassembly:
	0x03913CAC LDR X8, [X0 + 0xB8]
	0x03913CB0 LDR X9, [X8]
	0x03913CB4 CBZ X9, 0x39140C0
	0x03913CB8 LDR W9, [X9 + 0x18]
	0x03913CBC CMP W19, W9
	0x03913CC0 B.LE 0x3913D10
	0x03913CC4 LDR W9, [X0 + 0xE0]
	0x03913CC8 CBNZ W9, 0x3913CD8
	0x03913CCC BL 0x1C16DFC
	0x03913CD0 LDR X8, [X22]
	0x03913CD4 LDR X8, [X8 + 0xB8]
	0x03913CD8 ADRP X9, 0x83B000
	0x03913CDC LDR X9, [X9 + 0x228]
	0x03913CE0 MOV X0, X8
	0x03913CE4 MOV W1, W19
	0x03913CE8 LDR X2, [X9]
	0x03913CEC BL 0x2144898
	0x03913CF0 LDR X8, [X22]
	0x03913CF4 ADRP X9, 0x83B000
	0x03913CF8 MOV W1, W19
	0x03913CFC LDR X8, [X8 + 0xB8]
	0x03913D00 LDR X9, [X9 + 0x220]
	0x03913D04 ADD X0, X8, 0x8
	0x03913D08 LDR X2, [X9]
	0x03913D0C BL 0x21436CC
	0x03913D10 STR W19, [X31 + 0x1C]
	0x03913D14 CBZ X23, 0x39140C0
	0x03913D18 LDR W8, [X23 + 0x18]
	0x03913D1C CMP W8, 0x1
	0x03913D20 B.LT 0x391409C
	0x03913D24 LDR W9, [X31 + 0x1C]
	0x03913D28 MOV W25, W31
	0x03913D2C MOVZ W19, 0xC
	0x03913D30 FMOV S8, 1
	0x03913D34 MOV W26, W9
	0x03913D38 STR X26, [X31 + 0x8]
	0x03913D3C LDR W9, [X31 + 0x1C]
	0x03913D40 CMP W9, 0x1
	0x03913D44 B.LT 0x3913DB8
	0x03913D48 LDR X0, [X22]
	0x03913D4C MOV X20, X31
	0x03913D50 MOVZ W21, 0x20
	0x03913D54 LDR W8, [X0 + 0xE0]
	0x03913D58 CBNZ W8, 0x3913D64
	0x03913D5C BL 0x1C16DFC
	0x03913D60 LDR X0, [X22]
	0x03913D64 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xACF000
	006 Move X21, 0x7E1000
	007 Move W8, [X20+2155]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x7E1000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2155], W8
	019 Move X0, [X21]
	020 Move X20, [X19+176]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {57}
	033 Move X0, X19
	034 Call ProBuilderMesh.get_filter, X0
	035 Move X8, [X21]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Inequality, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {57}
	050 Move X0, X19
	051 Call ProBuilderMesh.get_filter, X0
	052 Compare X0, 0
	053 JumpIfEqual {63}
	054 Move X1, X31
	055 Call MeshFilter.get_sharedMesh, X0
	056 Move [X19+176], X0
	057 Move X0, [X19+176]
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Return X0
	063 Call 0x1C17F20

Method: System.Void set_mesh(UnityEngine.Mesh value)

Disassembly:
	0x03919848 LDR X0, [X0 + 0x588]
	0x0391984C BL 0x1C16CF4

ISIL:
	001 Move [X0+176], X1
	002 Return 

Method: System.Int32 get_id()

Disassembly:
	0x03919850 ADRP X0, 0x7E1000
	0x03919854 LDR X0, [X0 + 0xA88]
	0x03919858 BL 0x1C16CF4
	0x0391985C ADRP X0, 0x834000
	0x03919860 LDR X0, [X0 + 0xF40]
	0x03919864 BL 0x1C16CF4
	0x03919868 ADRP X0, 0x834000
	0x0391986C LDR X0, [X0 + 0xF30]

ISIL:
	001 Move [X31-16], X30
	002 Move X1, X31
	003 Call Component.get_gameObject, X0
	004 Compare X0, 0
	005 JumpIfEqual {10}
	006 Move X1, X31
	007 Move X30, [X31+16]
	008 Call Object.GetInstanceID, X0
	009 Return X0
	010 Call 0x1C17F20

Method: UnityEngine.ProBuilder.MeshSyncState get_meshSyncState()

Disassembly:
	0x03919870 BL 0x1C16CF4
	0x03919874 ADRP X0, 0x7E1000
	0x03919878 LDR X0, [X0 + 0x700]
	0x0391987C BL 0x1C16CF4
	0x03919880 ADRP X0, 0x7DA000
	0x03919884 LDR X0, [X0 + 0x598]
	0x03919888 BL 0x1C16CF4
	0x0391988C ADRP X0, 0x835000
	0x03919890 LDR X0, [X0 + 0x590]
	0x03919894 BL 0x1C16CF4
	0x03919898 ADRP X0, 0x835000
	0x0391989C LDR X0, [X0 + 0x598]
	0x039198A0 BL 0x1C16CF4
	0x039198A4 MOVZ W8, 0x1
	0x039198A8 STRB W8, [X21 + 0x879]
	0x039198AC MOV X0, X19
	0x039198B0 BL 0x3912CAC
	0x039198B4 LDR X8, [X20]
	0x039198B8 MOV X20, X0
	0x039198BC LDR W9, [X8 + 0xE0]
	0x039198C0 CBNZ W9, 0x39198CC
	0x039198C4 MOV X0, X8
	0x039198C8 BL 0x1C16DFC
	0x039198CC MOV X0, X20
	0x039198D0 MOV X1, X31
	0x039198D4 MOV X2, X31
	0x039198D8 BL 0x3C3883C
	0x039198DC TBZ X0, 0x0, 0x3919960
	0x039198E0 ADRP X8, 0x7E1000
	0x039198E4 LDR X8, [X8 + 0x700]
	0x039198E8 ADRP X20, 0x7DA000
	0x039198EC ADRP X23, 0x835000
	0x039198F0 LDR X0, [X8]
	0x039198F4 LDR X20, [X20 + 0x758]
	0x039198F8 LDR X23, [X23 + 0x598]
	0x039198FC BL 0x1C16F10
	0x03919900 MOV X1, X31
	0x03919904 MOV X21, X0
	0x03919908 BL 0x3C17028
	0x0391990C MOV X0, X19
	0x03919910 MOV X1, X31
	0x03919914 BL 0x3C385F8
	0x03919918 LDR X8, [X20]
	0x0391991C STR W0, [X31 + 0xC]
	0x03919920 ADD X1, X31, 0xC
	0x03919924 MOV X0, X8
	0x03919928 BL 0x1C16E04

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xAC9000
	006 Move X20, 0x7DB000
	007 Move W8, [X21+2156]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x7DB000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2156], W8
	019 Move X0, X19
	020 Call ProBuilderMesh.get_mesh, X0
	021 Move X8, [X20]
	022 Move X20, X0
	023 Move W9, [X8+224]
	024 Compare W9, 0
	025 JumpIfNotEqual {28}
	026 Move X0, X8
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {37}
	036 Move W0, W31
	037 NotImplemented "Instruction LDRH not yet implemented."
	038 NotImplemented "Instruction LDRH not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Compare W8, 0
	041 JumpIfEqual {43}
	042 Move W0, 4
	043 Move X0, X19
	044 Call ProBuilderMesh.get_mesh, X0
	045 Compare X0, 0
	046 JumpIfEqual {57}
	047 Move X1, X31
	048 Call Mesh.get_uv2, X0
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move W8, 2
	051 NotImplemented "Instruction CINC not yet implemented."
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return X0
	057 Call 0x1C17F20

Method: System.Int32 get_meshFormatVersion()

Disassembly:
	0x0391992C LDR X8, [X23]
	0x03919930 MOV X1, X0

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void Awake()

Disassembly:
	0x03919934 MOV X2, X31
	0x03919938 MOV X0, X8
	0x0391993C BL 0x321EFD0
	0x03919940 CBZ X21, 0x3919D8C
	0x03919944 MOV X1, X0
	0x03919948 MOV X0, X21
	0x0391994C MOV X2, X31
	0x03919950 BL 0x3C38A84
	0x03919954 MOV W20, W31
	0x03919958 STR X21, [X19 + 0xB0]
	0x0391995C B 0x39199B0
	0x03919960 MOV X0, X19
	0x03919964 BL 0x3912CAC
	0x03919968 CBZ X0, 0x3919D8C
	0x0391996C MOV X1, X31
	0x03919970 BL 0x3C17618
	0x03919974 LDR X8, [X19 + 0x58]
	0x03919978 CBZ X8, 0x3919980
	0x0391997C LDR W8, [X8 + 0x18]
	0x03919980 CMP W0, W8
	0x03919984 B.NE 0x3919990
	0x03919988 MOV W20, W31
	0x0391998C B 0x39199B0
	0x03919990 MOV X0, X19
	0x03919994 BL 0x39129E4
	0x03919998 MOV W20, W0
	0x0391999C MOV X0, X19
	0x039199A0 BL 0x3912CAC
	0x039199A4 CBZ X0, 0x3919D8C
	0x039199A8 MOV X1, X31
	0x039199AC BL 0x3C19C94
	0x039199B0 MOV X0, X19
	0x039199B4 BL 0x3912CAC
	0x039199B8 LDR X8, [X19 + 0x58]
	0x039199BC CBZ X8, 0x39199C4
	0x039199C0 LDR W8, [X8 + 0x18]
	0x039199C4 CBZ X0, 0x3919D8C
	0x039199C8 CMP W8, 0x10000
	0x039199CC CSET W1, GE
	0x039199D0 MOV X2, X31
	0x039199D4 BL 0x3C170A8
	0x039199D8 MOV X0, X19
	0x039199DC BL 0x3912CAC
	0x039199E0 CBZ X0, 0x3919D8C
	0x039199E4 LDR X1, [X19 + 0x58]
	0x039199E8 MOV X2, X31
	0x039199EC BL 0x3C17F08
	0x039199F0 MOV X0, X19
	0x039199F4 BL 0x3912CAC
	0x039199F8 CBZ X0, 0x3919D8C
	0x039199FC ADRP X24, 0x834000
	0x03919A00 LDR X24, [X24 + 0xF30]
	0x03919A04 MOV X1, X31
	0x03919A08 MOV X2, X31
	0x03919A0C BL 0x3C181B8
	0x03919A10 LDR W8, [X19 + 0x20]
	0x03919A14 CMP W8, 0x1
	0x03919A18 B.GT 0x3919A5C
	0x03919A1C B.EQ 0x3919A38
	0x03919A20 MOV X0, X19
	0x03919A24 MOV X1, X31
	0x03919A28 BL 0x3939A20
	0x03919A2C LDR W8, [X19 + 0x20]
	0x03919A30 CMP W8, 0x1
	0x03919A34 B.GT 0x3919A5C
	0x03919A38 ADRP X8, 0x835000
	0x03919A3C LDR X8, [X8 + 0x590]
	0x03919A40 LDR X0, [X8]
	0x03919A44 LDR W8, [X0 + 0xE0]
	0x03919A48 CBNZ W8, 0x3919A50
	0x03919A4C BL 0x1C16DFC
	0x03919A50 MOV X0, X19
	0x03919A54 MOV X1, X31
	0x03919A58 BL 0x393CA34
	0x03919A5C MOVZ W8, 0x2
	0x03919A60 MOV X0, X19
	0x03919A64 STR W8, [X19 + 0x20]
	0x03919A68 BL 0x3912AD8
	0x03919A6C LDR X8, [X24]
	0x03919A70 MOV X21, X0
	0x03919A74 LDR W9, [X8 + 0xE0]
	0x03919A78 CBNZ W9, 0x3919A84
	0x03919A7C MOV X0, X8
	0x03919A80 BL 0x1C16DFC
	0x03919A84 MOV X0, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xAC9000
	007 Move W8, [X20+2157]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x836000
	014 Move X0, [X0+1320]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+2157], W8
	018 Move X0, X19
	019 Call ProBuilderMesh.EnsureMeshFilterIsAssigned, X0
	020 Move X0, X19
	021 Call ProBuilderMesh.EnsureMeshColliderIsAssigned, X0
	022 Move X0, X19
	023 Call ProBuilderMesh.ClearSelection, X0
	024 Move X8, [X19+88]
	025 Compare X8, 0
	026 JumpIfEqual {66}
	027 Move W8, [X8+24]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X8, [X19+40]
	030 Compare X8, 0
	031 JumpIfEqual {66}
	032 Move W8, [X8+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Call ProBuilderMesh.get_meshSyncState, X0
	036 Compare W0, 0
	037 JumpIfNotEqual {66}
	038 NotImplemented "Instruction LDRH not yet implemented."
	039 NotImplemented "Instruction LDRH not yet implemented."
	040 Move X0, X19
	041 Move W1, W31
	042 Call ProBuilderMesh.ToMesh, X0, X1
	043 Move W1, 31
	044 Move X0, X19
	045 Call ProBuilderMesh.Refresh, X0, X1
	046 Move X22, 0x836000
	047 Move X22, [X22+1320]
	048 Move X0, [X22]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {54}
	052 Call 0x1C17DFC
	053 Move X0, [X22]
	054 Move X8, [X0+184]
	055 Move X8, [X8+8]
	056 Compare X8, 0
	057 JumpIfEqual {63}
	058 Move X0, [X8+64]
	059 Move X9, [X8+24]
	060 Move X2, [X8+40]
	061 Move X1, X19
	062 NotImplemented "Instruction BLR not yet implemented."
	063 NotImplemented "Instruction STRH not yet implemented."
	064 NotImplemented "Instruction STRH not yet implemented."
	065 NotImplemented "Instruction STRH not yet implemented."
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Return 
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move [X31+12], W20
	074 Call 0x3EB2AD0
	075 Move X20, [X0]
	076 Call 0x3EB2AE0
	077 Move W8, [X31+12]
	078 NotImplemented "Instruction STRH not yet implemented."
	079 NotImplemented "Instruction STRH not yet implemented."
	080 Compare X20, 0
	081 JumpIfEqual {65}
	082 Move X0, X20
	083 Call 0x1C17F18
	084 Move W8, [X31+12]
	085 NotImplemented "Instruction STRH not yet implemented."
	086 NotImplemented "Instruction STRH not yet implemented."
	087 Move W8, [X31+12]
	088 NotImplemented "Instruction STRH not yet implemented."
	089 NotImplemented "Instruction STRH not yet implemented."
	090 Compare X20, 0
	091 JumpIfNotEqual {93}
	092 Call 0x1D2D690
	093 Move X0, X20
	094 Call 0x1C17F18
	095 Call 0x1991590

Method: System.Void Reset()

Disassembly:
	0x03919D68 BL 0x3919EA4
	0x03919D6C LDP X20, X19, [X31 + 0x60]
	0x03919D70 LDP X22, X21, [X31 + 0x50]
	0x03919D74 LDP X24, X23, [X31 + 0x40]
	0x03919D78 LDP X26, X25, [X31 + 0x30]
	0x03919D7C LDP X28, X27, [X31 + 0x20]
	0x03919D80 LDP X29, X30, [X31 + 0x10]
	0x03919D84 ADD X31, X31, 0x70
	0x03919D88 RET
	0x03919D8C BL 0x1C16F20
	0x03919D90 BL 0x1C16F28
	0x03919D94 STP X30, X21, [X31 - 0x20]!
	0x03919D98 STP X20, X19, [X31 + 0x10]
	0x03919D9C ADRP X21, 0xAC8000
	0x03919DA0 LDRB W8, [X21 + 0x87C]
	0x03919DA4 MOV W20, W1
	0x03919DA8 MOV X19, X0
	0x03919DAC TBZ X8, 0x0, 0x3919E50
	0x03919DB0 TBNZ X20, 0x0, 0x3919E68
	0x03919DB4 TBNZ X20, 0x1, 0x3919E78
	0x03919DB8 TBNZ X20, 0x2, 0x3919E84
	0x03919DBC TBNZ X20, 0x3, 0x3919E90
	0x03919DC0 TBZ X20, 0x4, 0x3919DCC
	0x03919DC4 MOV X0, X19
	0x03919DC8 BL 0x3918BAC
	0x03919DCC MOVZ W8, 0x16
	0x03919DD0 ANDS W31, W20, W8, 0x0
	0x03919DD4 B.EQ 0x3919E28
	0x03919DD8 ADRP X20, 0x7DA000
	0x03919DDC LDR X20, [X20 + 0x598]
	0x03919DE0 MOV X0, X19
	0x03919DE4 BL 0x3912CAC
	0x03919DE8 LDR X8, [X20]
	0x03919DEC MOV X20, X0
	0x03919DF0 LDR W9, [X8 + 0xE0]
	0x03919DF4 CBNZ W9, 0x3919E00
	0x03919DF8 MOV X0, X8
	0x03919DFC BL 0x1C16DFC
	0x03919E00 MOV X0, X20
	0x03919E04 MOV X1, X31
	0x03919E08 MOV X2, X31
	0x03919E0C BL 0x3C354F8
	0x03919E10 TBZ X0, 0x0, 0x3919E28
	0x03919E14 MOV X0, X19
	0x03919E18 BL 0x3912CAC
	0x03919E1C CBZ X0, 0x3919EA0
	0x03919E20 MOV X1, X31
	0x03919E24 BL 0x3C19CD4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xAC9000
	005 Move W8, [X20+2158]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x836000
	012 Move X0, [X0+1320]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2158], W8
	016 Move X0, X19
	017 Call ProBuilderMesh.get_meshSyncState, X0
	018 Compare W0, 0
	019 JumpIfEqual {55}
	020 Move X20, 0x836000
	021 Move X20, [X20+1320]
	022 Move X0, X19
	023 Move W1, W31
	024 Call ProBuilderMesh.ToMesh, X0, X1
	025 Move W1, 31
	026 Move X0, X19
	027 Call ProBuilderMesh.Refresh, X0, X1
	028 Move X0, [X20]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X20]
	034 Move X8, [X0+184]
	035 Move X8, [X8+24]
	036 Compare X8, 0
	037 JumpIfEqual {55}
	038 Move W9, [X0+224]
	039 Compare W9, 0
	040 JumpIfNotEqual {47}
	041 Call 0x1C17DFC
	042 Move X8, [X20]
	043 Move X8, [X8+184]
	044 Move X8, [X8+24]
	045 Compare X8, 0
	046 JumpIfEqual {59}
	047 Move X3, [X8+24]
	048 Move X0, [X8+64]
	049 Move X2, [X8+40]
	050 Move X1, X19
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 CallNoReturn X3
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X30, [X31+32]
	058 Return 
	059 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x03919E28 LDRH W8, [X19 + 0xC8]
	0x03919E2C MOVZ W9, 0x1
	0x03919E30 ADD W10, W8, 0x1
	0x03919E34 ANDS W31, W10, 0x10000
	0x03919E38 CSINC W8, W9, W8, NE
	0x03919E3C STRH W8, [X19 + 0xC8]
	0x03919E40 STRH W8, [X19 + 0xCA]
	0x03919E44 LDP X20, X19, [X31 + 0x10]
	0x03919E48 LDP X30, X21, [X31], #0x20
	0x03919E4C RET
	0x03919E50 ADRP X0, 0x7DA000
	0x03919E54 LDR X0, [X0 + 0x598]
	0x03919E58 BL 0x1C16CF4
	0x03919E5C MOVZ W8, 0x1
	0x03919E60 STRB W8, [X21 + 0x87C]
	0x03919E64 TBZ X20, 0x0, 0x3919DB4
	0x03919E68 LDR X1, [X19 + 0x28]
	0x03919E6C MOV X0, X19
	0x03919E70 BL 0x391A384
	0x03919E74 TBZ X20, 0x1, 0x3919DB8
	0x03919E78 MOV X0, X19
	0x03919E7C BL 0x391A92C
	0x03919E80 TBZ X20, 0x2, 0x3919DBC
	0x03919E84 MOV X0, X19
	0x03919E88 BL 0x391A95C
	0x03919E8C TBZ X20, 0x3, 0x3919DC0
	0x03919E90 MOV X0, X19
	0x03919E94 BL 0x391A9CC
	0x03919E98 TBNZ X20, 0x4, 0x3919DC4
	0x03919E9C B 0x3919DCC
	0x03919EA0 BL 0x1C16F20
	0x03919EA4 STR X30, [X31 - 0x20]!
	0x03919EA8 STP X20, X19, [X31 + 0x10]
	0x03919EAC MOV W20, W1
	0x03919EB0 MOV X19, X0
	0x03919EB4 BL 0x3918A88
	0x03919EB8 TBZ X20, 0x0, 0x3919EC4
	0x03919EBC MOV X0, X19
	0x03919EC0 BL 0x3912B4C
	0x03919EC4 LDRH W8, [X19 + 0xC8]
	0x03919EC8 MOVZ W9, 0x1
	0x03919ECC ADD W10, W8, 0x1
	0x03919ED0 ANDS W31, W10, 0x10000
	0x03919ED4 CSINC W8, W9, W8, NE
	0x03919ED8 STRH W8, [X19 + 0xC8]
	0x03919EDC STRH W8, [X19 + 0xCA]
	0x03919EE0 LDP X20, X19, [X31 + 0x10]
	0x03919EE4 LDR X30, [X31], #0x20
	0x03919EE8 RET
	0x03919EEC STR X30, [X31 - 0x30]!
	0x03919EF0 STP X22, X21, [X31 + 0x10]
	0x03919EF4 STP X20, X19, [X31 + 0x20]
	0x03919EF8 ADRP X20, 0xAC8000
	0x03919EFC ADRP X21, 0x7DA000
	0x03919F00 LDRB W8, [X20 + 0x87A]
	0x03919F04 LDR X21, [X21 + 0x598]
	0x03919F08 MOV X19, X0
	0x03919F0C TBNZ X8, 0x0, 0x3919F54
	0x03919F10 ADRP X0, 0x7DA000
	0x03919F14 LDR X0, [X0 + 0x758]
	0x03919F18 BL 0x1C16CF4
	0x03919F1C ADRP X0, 0x7E1000
	0x03919F20 LDR X0, [X0 + 0x700]
	0x03919F24 BL 0x1C16CF4
	0x03919F28 ADRP X0, 0x7DB000
	0x03919F2C LDR X0, [X0 + 0xE38]
	0x03919F30 BL 0x1C16CF4
	0x03919F34 ADRP X0, 0x7DA000
	0x03919F38 LDR X0, [X0 + 0x598]
	0x03919F3C BL 0x1C16CF4
	0x03919F40 ADRP X0, 0x835000
	0x03919F44 LDR X0, [X0 + 0x598]
	0x03919F48 BL 0x1C16CF4
	0x03919F4C MOVZ W8, 0x1
	0x03919F50 STRB W8, [X20 + 0x87A]
	0x03919F54 MOV X0, X19
	0x03919F58 BL 0x3912CAC
	0x03919F5C LDR X8, [X21]
	0x03919F60 MOV X20, X0
	0x03919F64 LDR W9, [X8 + 0xE0]
	0x03919F68 CBNZ W9, 0x3919F74
	0x03919F6C MOV X0, X8
	0x03919F70 BL 0x1C16DFC
	0x03919F74 MOV X0, X20
	0x03919F78 MOV X1, X31
	0x03919F7C MOV X2, X31
	0x03919F80 BL 0x3C354F8
	0x03919F84 TBZ X0, 0x0, 0x3919FC4
	0x03919F88 ADRP X22, 0x7DB000
	0x03919F8C LDR X22, [X22 + 0xE38]
	0x03919F90 MOV X0, X19
	0x03919F94 BL 0x3912CAC
	0x03919F98 LDR X8, [X21]
	0x03919F9C MOV X20, X0
	0x03919FA0 LDR W9, [X8 + 0xE0]
	0x03919FA4 CBNZ W9, 0x3919FB0
	0x03919FA8 MOV X0, X8
	0x03919FAC BL 0x1C16DFC
	0x03919FB0 LDR X1, [X22]
	0x03919FB4 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xAC9000
	007 Move X22, 0x7DB000
	008 Move W8, [X20+2159]
	009 Move X22, [X22+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x7DB000
	016 Move X0, [X0+2416]
	017 Call 0x1C17CF4
	018 Move X0, 0x7E1000
	019 Move X0, [X0+1968]
	020 Call 0x1C17CF4
	021 Move X0, 0x7DB000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move X0, 0x836000
	025 Move X0, [X0+1320]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+2159], W8
	029 Move X20, X19
	030 Add X20, X20, 192
	031 Move X21, [X20]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X21
	038 Move X1, X31
	039 Move X2, X31
	040 Call Object.op_Inequality, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {55}
	045 Move X8, 0x7E1000
	046 Move X8, [X8+1968]
	047 Move X0, X19
	048 Move X1, X20
	049 Move X2, [X8]
	050 Call 0x21A5990, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {61}
	055 Move X0, [X20]
	056 Compare X0, 0
	057 JumpIfEqual {129}
	058 Move W1, W31
	059 Move X2, X31
	060 Call Object.set_hideFlags, X0, X1
	061 Move X20, 0x836000
	062 Move X20, [X20+1320]
	063 Move X0, [X20]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {69}
	067 Call 0x1C17DFC
	068 Move X0, [X20]
	069 Move X8, [X0+184]
	070 Move X8, [X8+16]
	071 Compare X8, 0
	072 JumpIfEqual {87}
	073 Move W9, [X0+224]
	074 Compare W9, 0
	075 JumpIfNotEqual {82}
	076 Call 0x1C17DFC
	077 Move X8, [X20]
	078 Move X8, [X8+184]
	079 Move X8, [X8+16]
	080 Compare X8, 0
	081 JumpIfEqual {129}
	082 Move X9, [X8+24]
	083 Move X0, [X8+64]
	084 Move X2, [X8+40]
	085 Move X1, X19
	086 NotImplemented "Instruction BLR not yet implemented."
	087 Move W8, [X19+160]
	088 Compare W8, 0
	089 JumpIfNotEqual {123}
	090 Move X20, 0x7DB000
	091 Move X20, [X20+2416]
	092 Move X0, [X20]
	093 Move W8, [X0+224]
	094 Compare W8, 0
	095 JumpIfNotEqual {97}
	096 Call 0x1C17DFC
	097 Move X0, X31
	098 Call Application.get_isEditor
	099 Move TEMP, X0
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfNotEqual {123}
	103 Move X0, [X20]
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {108}
	107 Call 0x1C17DFC
	108 Move X0, X31
	109 Call Application.get_isPlaying
	110 Move TEMP, X0
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfEqual {123}
	114 Move X0, X31
	115 Call Time.get_frameCount
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move X0, X19
	118 Move X20, [X31+32]
	119 Move X19, [X31+40]
	120 Move X22, [X31+16]
	121 Move X21, [X31+24]
	122 Move X30, [X31+48]
	123 Move X20, [X31+32]
	124 Move X19, [X31+40]
	125 Move X22, [X31+16]
	126 Move X21, [X31+24]
	127 Move X30, [X31+48]
	128 Return 
	129 Call 0x1C17F20

Method: System.Void DestroyUnityMesh()

Disassembly:
	0x03919FB8 BL 0x222D35C
	0x03919FBC MOV X20, X0
	0x03919FC0 B 0x391A038
	0x03919FC4 ADRP X8, 0x7E1000
	0x03919FC8 LDR X8, [X8 + 0x700]
	0x03919FCC ADRP X21, 0x7DA000
	0x03919FD0 ADRP X22, 0x835000
	0x03919FD4 LDR X0, [X8]
	0x03919FD8 LDR X21, [X21 + 0x758]
	0x03919FDC LDR X22, [X22 + 0x598]
	0x03919FE0 BL 0x1C16F10
	0x03919FE4 MOV X1, X31
	0x03919FE8 MOV X20, X0
	0x03919FEC BL 0x3C17028
	0x03919FF0 MOV X0, X19
	0x03919FF4 MOV X1, X31
	0x03919FF8 BL 0x3C385F8
	0x03919FFC LDR X8, [X21]
	0x0391A000 STR W0, [X31 + 0xC]
	0x0391A004 ADD X1, X31, 0xC
	0x0391A008 MOV X0, X8
	0x0391A00C BL 0x1C16E04
	0x0391A010 LDR X8, [X22]
	0x0391A014 MOV X1, X0
	0x0391A018 MOV X2, X31
	0x0391A01C MOV X0, X8
	0x0391A020 BL 0x321EFD0
	0x0391A024 CBZ X20, 0x391A0A4
	0x0391A028 MOV X1, X0
	0x0391A02C MOV X0, X20
	0x0391A030 MOV X2, X31
	0x0391A034 BL 0x3C38A84
	0x0391A038 CBZ X19, 0x391A0A4
	0x0391A03C MOV X0, X19
	0x0391A040 STR X20, [X19 + 0xB0]
	0x0391A044 BL 0x3918870
	0x0391A048 CMP W0, 0x3
	0x0391A04C B.NE 0x391A07C
	0x0391A050 MOV X0, X19
	0x0391A054 BL 0x3915860
	0x0391A058 MOV X20, X0
	0x0391A05C MOV X0, X19
	0x0391A060 BL 0x3912CAC
	0x0391A064 CBZ X20, 0x391A0A4
	0x0391A068 MOV X1, X0
	0x0391A06C MOV X0, X20
	0x0391A070 MOV X2, X31
	0x0391A074 BL 0x3C16DC0
	0x0391A078 B 0x391A094
	0x0391A07C MOV X0, X19
	0x0391A080 MOV W1, W31
	0x0391A084 BL 0x39197E8
	0x0391A088 MOVZ W1, 0x1F
	0x0391A08C MOV X0, X19
	0x0391A090 BL 0x3919D94
	0x0391A094 LDP X20, X19, [X31 + 0x20]
	0x0391A098 LDP X22, X21, [X31 + 0x10]
	0x0391A09C LDR X30, [X31], #0x30
	0x0391A0A0 RET
	0x0391A0A4 BL 0x1C16F20
	0x0391A0A8 STR X30, [X31 - 0x50]!
	0x0391A0AC STP X26, X25, [X31 + 0x10]
	0x0391A0B0 STP X24, X23, [X31 + 0x20]
	0x0391A0B4 STP X22, X21, [X31 + 0x30]
	0x0391A0B8 STP X20, X19, [X31 + 0x40]
	0x0391A0BC ADRP X21, 0xAC7000
	0x0391A0C0 ADRP X22, 0x7D9000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xAC9000
	006 Move X20, 0x836000
	007 Move W8, [X21+2160]
	008 Move X20, [X20+1320]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x7DD000
	015 Move X0, [X0+360]
	016 Call 0x1C17CF4
	017 Move X0, 0x7DB000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x836000
	021 Move X0, [X0+1320]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2160], W8
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X20]
	031 Move X8, [X0+184]
	032 Move X8, [X8]
	033 Compare X8, 0
	034 JumpIfEqual {53}
	035 Move W9, [X0+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {44}
	038 Call 0x1C17DFC
	039 Move X8, [X20]
	040 Move X8, [X8+184]
	041 Move X8, [X8]
	042 Compare X8, 0
	043 JumpIfEqual {84}
	044 Move X3, [X8+24]
	045 Move X0, [X8+64]
	046 Move X2, [X8+40]
	047 Move X1, X19
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 CallNoReturn X3
	053 Move X0, X19
	054 Move X1, X31
	055 Call Component.get_gameObject, X0
	056 Compare X0, 0
	057 JumpIfEqual {84}
	058 Move X8, 0x7DC000
	059 Move X8, [X8+360]
	060 Move X1, [X8]
	061 Call 0x21E62E4, X0
	062 Compare X0, 0
	063 JumpIfEqual {84}
	064 Move X1, X31
	065 Call MeshFilter.get_sharedMesh, X0
	066 Move X8, 0x7DA000
	067 Move X8, [X8+1432]
	068 Move X19, X0
	069 Move X8, [X8]
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {75}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X0, X19
	076 Move X20, [X31+16]
	077 Move X19, [X31+24]
	078 Move W1, 1
	079 Move X2, X31
	080 Move X30, [X31+32]
	081 Move X21, [X31+40]
	082 Call Object.DestroyImmediate, X0, X1
	083 Return 
	084 Call 0x1C17F20

Method: System.Void IncrementVersionIndex()

Disassembly:
	0x039180DC ADRP X0, 0x836000
	0x039180E0 LDR X0, [X0 + 0x528]
	0x039180E4 BL 0x1C16CF4
	0x039180E8 MOVZ W8, 0x1
	0x039180EC STRB W8, [X20 + 0x863]
	0x039180F0 LDR X0, [X24]
	0x039180F4 LDR W8, [X0 + 0xE0]
	0x039180F8 CBNZ W8, 0x3918104

ISIL:
	001 NotImplemented "Instruction LDRH not yet implemented."
	002 Move W9, 1
	003 Add W10, W8, 1
	004 And W31, W10, 0x10000
	005 NotImplemented "Instruction CSINC not yet implemented."
	006 NotImplemented "Instruction STRH not yet implemented."
	007 NotImplemented "Instruction STRH not yet implemented."
	008 Return 

Method: System.Void Clear()

Disassembly:
	0x03917FC0 STP X22, X21, [X31 + 0x20]
	0x03917FC4 STP X20, X19, [X31 + 0x30]
	0x03917FC8 ADRP X20, 0xACA000
	0x03917FCC ADRP X24, 0x837000
	0x03917FD0 LDRB W8, [X20 + 0x862]
	0x03917FD4 LDR X24, [X24 + 0x528]
	0x03917FD8 MOV X19, X0
	0x03917FDC TBNZ X8, 0x0, 0x3918000
	0x03917FE0 ADRP X0, 0x837000
	0x03917FE4 LDR X0, [X0 + 0x530]
	0x03917FE8 BL 0x1C16CF4
	0x03917FEC ADRP X0, 0x837000
	0x03917FF0 LDR X0, [X0 + 0x528]
	0x03917FF4 BL 0x1C16CF4
	0x03917FF8 MOVZ W8, 0x1
	0x03917FFC STRB W8, [X20 + 0x862]
	0x03918000 LDR X0, [X24]
	0x03918004 LDR W8, [X0 + 0xE0]
	0x03918008 CBNZ W8, 0x3918014
	0x0391800C BL 0x1C16DFC
	0x03918010 LDR X0, [X24]
	0x03918014 LDR X8, [X0 + 0xB8]
	0x03918018 ADRP X25, 0x836000
	0x0391801C LDR X20, [X8]
	0x03918020 LDR X25, [X25 + 0x530]
	0x03918024 MOV X0, X20
	0x03918028 MOV X1, X19
	0x0391802C MOV X2, X31
	0x03918030 BL 0x33C0FDC
	0x03918034 CBZ X0, 0x3918054
	0x03918038 LDR X23, [X25]
	0x0391803C MOV X22, X0
	0x03918040 MOV X1, X23
	0x03918044 BL 0x1C16E00
	0x03918048 MOV X21, X0
	0x0391804C CBNZ X0, 0x3918058
	0x03918050 B 0x391809C
	0x03918054 MOV X21, X31
	0x03918058 LDR X0, [X24]
	0x0391805C LDR W8, [X0 + 0xE0]
	0x03918060 CBNZ W8, 0x391806C
	0x03918064 BL 0x1C16DFC
	0x03918068 LDR X0, [X24]
	0x0391806C LDR X0, [X0 + 0xB8]
	0x03918070 MOV X1, X21
	0x03918074 MOV X2, X20
	0x03918078 BL 0x1C24138
	0x0391807C CMP X20, X0
	0x03918080 MOV X20, X0
	0x03918084 B.NE 0x3918024
	0x03918088 LDP X20, X19, [X31 + 0x30]
	0x0391808C LDP X22, X21, [X31 + 0x20]
	0x03918090 LDP X24, X23, [X31 + 0x10]
	0x03918094 LDP X30, X25, [X31], #0x40
	0x03918098 RET
	0x0391809C MOV X0, X22
	0x039180A0 MOV X1, X23
	0x039180A4 BL 0x1C171E0
	0x039180A8 STP X30, X25, [X31 - 0x40]!
	0x039180AC STP X24, X23, [X31 + 0x10]
	0x039180B0 STP X22, X21, [X31 + 0x20]
	0x039180B4 STP X20, X19, [X31 + 0x30]
	0x039180B8 ADRP X20, 0xAC9000
	0x039180BC ADRP X24, 0x836000
	0x039180C0 LDRB W8, [X20 + 0x863]
	0x039180C4 LDR X24, [X24 + 0x528]
	0x039180C8 MOV X19, X0
	0x039180CC TBNZ X8, 0x0, 0x39180F0
	0x039180D0 ADRP X0, 0x836000
	0x039180D4 LDR X0, [X0 + 0x530]
	0x039180D8 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xACB000
	009 Move X24, 0x838000
	010 Move X22, 0x7DF000
	011 Move X21, 0x837000
	012 Move X20, 0x838000
	013 Move W8, [X23+2161]
	014 Move X24, [X24+1008]
	015 Move X22, [X22+2480]
	016 Move X21, [X21+2696]
	017 Move X20, [X20+1048]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x837000
	024 Move X0, [X0+1008]
	025 Call 0x1C17CF4
	026 Move X0, 0x837000
	027 Move X0, [X0+1048]
	028 Call 0x1C17CF4
	029 Move X0, 0x836000
	030 Move X0, [X0+2696]
	031 Call 0x1C17CF4
	032 Move X0, 0x7DE000
	033 Move X0, [X0+2480]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X23+2161], W8
	037 Move X0, [X24]
	038 Move W1, W31
	039 Call 0x1C17D6C
	040 Move [X19+40], X0
	041 Move X0, [X22]
	042 Move W1, W31
	043 Call 0x1C17D6C
	044 Move [X19+88], X0
	045 Move X0, [X21]
	046 Move W1, W31
	047 Call 0x1C17D6C
	048 Move [X19+96], X0
	049 Move [X19+104], X31
	050 Move [X19+112], X31
	051 Move [X19+120], X31
	052 Move X0, [X20]
	053 Move W1, W31
	054 Call 0x1C17D6C
	055 Move [X19+48], X0
	056 Move X0, [X20]
	057 Move W1, W31
	058 Call 0x1C17D6C
	059 Move [X19+72], X0
	060 Move X0, X19
	061 Call ProBuilderMesh.InvalidateSharedVertexLookup, X0
	062 Move X0, X19
	063 Call ProBuilderMesh.InvalidateSharedTextureLookup, X0
	064 NotImplemented "Instruction LDRH not yet implemented."
	065 Move W9, 2
	066 Move [X19+32], W9
	067 Move W10, 1
	068 Add W9, W8, 1
	069 And W31, W9, 0x10000
	070 NotImplemented "Instruction CSINC not yet implemented."
	071 Move [X19+136], X31
	072 NotImplemented "Instruction STRH not yet implemented."
	073 NotImplemented "Instruction STRH not yet implemented."
	074 Move X0, X19
	075 Move X20, [X31+48]
	076 Move X19, [X31+56]
	077 Move X22, [X31+32]
	078 Move X21, [X31+40]
	079 Move X24, [X31+16]
	080 Move X23, [X31+24]
	081 Move X30, [X31+64]
	082 Call ProBuilderMesh.ClearSelection, X0
	083 Return 

Method: System.Void EnsureMeshFilterIsAssigned()

Disassembly:
	0x03919A88 MOV X1, X31
	0x03919A8C BL 0x3907814
	0x03919A90 LDR X8, [X19 + 0x28]
	0x03919A94 MOV W21, W0
	0x03919A98 MOV W1, W21
	0x03919A9C MOV W2, W22
	0x03919AA0 MOV X0, X8
	0x03919AA4 MOV X3, X31
	0x03919AA8 BL 0x39390E0
	0x03919AAC MOV X22, X0
	0x03919AB0 MOV X0, X19
	0x03919AB4 BL 0x3912CAC
	0x03919AB8 CBZ X22, 0x3919D8C
	0x03919ABC CBZ X0, 0x3919D8C
	0x03919AC0 LDR W1, [X22 + 0x18]
	0x03919AC4 MOV X2, X31
	0x03919AC8 BL 0x3C17654
	0x03919ACC MOV X0, X19
	0x03919AD0 BL 0x3912CAC
	0x03919AD4 CBZ X0, 0x3919D8C
	0x03919AD8 MOV X1, X31
	0x03919ADC BL 0x3C0F650
	0x03919AE0 CBZ W0, 0x3919D60
	0x03919AE4 MOV X0, X19
	0x03919AE8 BL 0x3912CAC
	0x03919AEC CBZ X0, 0x3919D8C
	0x03919AF0 ADRP X26, 0x835000
	0x03919AF4 LDR X26, [X26 + 0x580]
	0x03919AF8 MOV W23, W31
	0x03919AFC MOV W28, W31
	0x03919B00 MOV W25, W31
	0x03919B04 MOVN W27, 0x0
	0x03919B08 MOV X1, X31
	0x03919B0C BL 0x3C0F650
	0x03919B10 CMP W25, W0
	0x03919B14 B.GE 0x3919C90
	0x03919B18 LDR W8, [X22 + 0x18]
	0x03919B1C CMP W25, W8
	0x03919B20 B.CS 0x3919D90
	0x03919B24 ADD X29, X22, W25, 0x3, SXTW
	0x03919B28 LDR X9, [X29 + 0x20]!
	0x03919B2C CBZ X9, 0x3919D8C
	0x03919B30 LDR X10, [X9 + 0x10]
	0x03919B34 CBZ X10, 0x3919D8C
	0x03919B38 LDR X10, [X10 + 0x18]
	0x03919B3C CBZ X10, 0x3919B80
	0x03919B40 MOV X0, X19
	0x03919B44 STR W23, [X9 + 0x1C]
	0x03919B48 BL 0x3912CAC
	0x03919B4C LDR W8, [X22 + 0x18]
	0x03919B50 CMP W25, W8
	0x03919B54 B.CS 0x3919D90
	0x03919B58 LDR X8, [X29]
	0x03919B5C CBZ X8, 0x3919D8C
	0x03919B60 CBZ X0, 0x3919D8C
	0x03919B64 LDP W2, W3, [X8 + 0x18]
	0x03919B68 LDR X1, [X8 + 0x10]
	0x03919B6C MOV W4, W31
	0x03919B70 MOV X5, X31
	0x03919B74 BL 0x3C1985C
	0x03919B78 ADD W23, W23, 0x1
	0x03919B7C B 0x3919C7C
	0x03919B80 TBNZ X28, 0x0, 0x3919BEC
	0x03919B84 LDR X0, [X24]
	0x03919B88 LDR W8, [X0 + 0xE0]
	0x03919B8C CBNZ W8, 0x3919B98
	0x03919B90 BL 0x1C16DFC
	0x03919B94 LDR X0, [X24]
	0x03919B98 LDR X8, [X0 + 0xB8]
	0x03919B9C LDR X8, [X8]
	0x03919BA0 CBZ X8, 0x3919D8C
	0x03919BA4 LDP W2, W9, [X8 + 0x18]
	0x03919BA8 ADD W9, W9, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xAC9000
	006 Move X21, 0x7DB000
	007 Move W8, [X20+2162]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x7E2000
	015 Move X0, [X0+1776]
	016 Call 0x1C17CF4
	017 Move X0, 0x7DB000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2162], W8
	022 Move X0, X19
	023 Call ProBuilderMesh.get_filter, X0
	024 Move X8, [X21]
	025 Move X20, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {49}
	039 Move X0, X19
	040 Move X1, X31
	041 Call Component.get_gameObject, X0
	042 Compare X0, 0
	043 JumpIfEqual {98}
	044 Move X8, 0x7E2000
	045 Move X8, [X8+1776]
	046 Move X1, [X8]
	047 Call 0x21E61FC, X0
	048 Move [X19+192], X0
	049 Move X0, X19
	050 Call ProBuilderMesh.get_renderer, X0
	051 Compare X0, 0
	052 JumpIfEqual {98}
	053 Move X1, X31
	054 Call Renderer.get_isPartOfStaticBatch, X0
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {93}
	059 Move X0, X19
	060 Call ProBuilderMesh.get_filter, X0
	061 Compare X0, 0
	062 JumpIfEqual {98}
	063 Move X1, X31
	064 Call MeshFilter.get_sharedMesh, X0
	065 Move X8, [X21]
	066 Move X20, [X19+176]
	067 Move X21, X0
	068 Move W9, [X8+224]
	069 Compare W9, 0
	070 JumpIfNotEqual {73}
	071 Move X0, X8
	072 Call 0x1C17DFC
	073 Move X0, X21
	074 Move X1, X20
	075 Move X2, X31
	076 Call Object.op_Inequality, X0, X1
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {93}
	081 Move X0, X19
	082 Call ProBuilderMesh.get_filter, X0
	083 Compare X0, 0
	084 JumpIfEqual {98}
	085 Move X1, [X19+176]
	086 Move X20, [X31+16]
	087 Move X19, [X31+24]
	088 Move X2, X31
	089 Move X30, [X31+32]
	090 Move X21, [X31+40]
	091 Call MeshFilter.set_sharedMesh, X0, X1
	092 Return 
	093 Move X20, [X31+16]
	094 Move X19, [X31+24]
	095 Move X30, [X31+32]
	096 Move X21, [X31+40]
	097 Return 
	098 Call 0x1C17F20

Method: UnityEngine.ProBuilder.ProBuilderMesh CreateInstanceWithPoints(UnityEngine.Vector3[] positions)

Disassembly:
	0x0391A0C4 LDRB W8, [X21 + 0x87B]
	0x0391A0C8 LDR X22, [X22 + 0x598]
	0x0391A0CC MOV X20, X1
	0x0391A0D0 MOV X19, X0
	0x0391A0D4 TBNZ X8, 0x0, 0x391A14C
	0x0391A0D8 ADRP X0, 0x834000
	0x0391A0DC LDR X0, [X0 + 0x5A0]
	0x0391A0E0 BL 0x1C16CF4
	0x0391A0E4 ADRP X0, 0x834000
	0x0391A0E8 LDR X0, [X0 + 0x3E0]
	0x0391A0EC BL 0x1C16CF4
	0x0391A0F0 ADRP X0, 0x834000
	0x0391A0F4 LDR X0, [X0 + 0x5A8]
	0x0391A0F8 BL 0x1C16CF4
	0x0391A0FC ADRP X0, 0x834000
	0x0391A100 LDR X0, [X0 + 0x10]
	0x0391A104 BL 0x1C16CF4
	0x0391A108 ADRP X0, 0x834000
	0x0391A10C LDR X0, [X0 + 0x8]
	0x0391A110 BL 0x1C16CF4
	0x0391A114 ADRP X0, 0x7D9000
	0x0391A118 LDR X0, [X0 + 0x598]
	0x0391A11C BL 0x1C16CF4
	0x0391A120 ADRP X0, 0x834000
	0x0391A124 LDR X0, [X0 + 0x5B0]
	0x0391A128 BL 0x1C16CF4
	0x0391A12C ADRP X0, 0x834000
	0x0391A130 LDR X0, [X0 + 0x500]
	0x0391A134 BL 0x1C16CF4
	0x0391A138 ADRP X0, 0x834000
	0x0391A13C LDR X0, [X0 + 0x5B8]
	0x0391A140 BL 0x1C16CF4
	0x0391A144 MOVZ W8, 0x1
	0x0391A148 STRB W8, [X21 + 0x87B]
	0x0391A14C LDR X0, [X22]
	0x0391A150 LDR W8, [X0 + 0xE0]
	0x0391A154 CBNZ W8, 0x391A15C
	0x0391A158 BL 0x1C16DFC
	0x0391A15C MOV X0, X20
	0x0391A160 MOV X1, X31
	0x0391A164 MOV X2, X31
	0x0391A168 BL 0x3C3883C
	0x0391A16C TBNZ X0, 0x0, 0x391A33C
	0x0391A170 MOV X0, X19
	0x0391A174 BL 0x3916FC0
	0x0391A178 CBZ X20, 0x391A338
	0x0391A17C ADRP X24, 0x834000
	0x0391A180 LDR X24, [X24 + 0x500]
	0x0391A184 MOV X0, X20
	0x0391A188 BL 0x39163CC
	0x0391A18C MOV X1, X0
	0x0391A190 MOV X0, X19
	0x0391A194 BL 0x3916448
	0x0391A198 LDR X1, [X20 + 0x30]
	0x0391A19C MOV X0, X19
	0x0391A1A0 BL 0x3915F7C
	0x0391A1A4 MOV X0, X20
	0x0391A1A8 BL 0x39162B4
	0x0391A1AC MOV X1, X0
	0x0391A1B0 MOV X0, X19
	0x0391A1B4 BL 0x391634C
	0x0391A1B8 MOV X0, X20
	0x0391A1BC BL 0x391594C
	0x0391A1C0 LDR X8, [X24]
	0x0391A1C4 MOV X21, X0
	0x0391A1C8 LDR W9, [X8 + 0xE0]
	0x0391A1CC CBNZ W9, 0x391A1DC
	0x0391A1D0 MOV X0, X8
	0x0391A1D4 BL 0x1C16DFC
	0x0391A1D8 LDR X8, [X24]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xAC8000
	005 Move W8, [X20+2163]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {28}
	011 Move X0, 0x835000
	012 Move X0, [X0+1352]
	013 Call 0x1C17CF4
	014 Move X0, 0x7DA000
	015 Move X0, [X0+2648]
	016 Call 0x1C17CF4
	017 Move X0, 0x834000
	018 Move X0, [X0+2768]
	019 Call 0x1C17CF4
	020 Move X0, 0x835000
	021 Move X0, [X0+1360]
	022 Call 0x1C17CF4
	023 Move X0, 0x835000
	024 Move X0, [X0+1368]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+2163], W8
	028 Compare X19, 0
	029 JumpIfEqual {77}
	030 Move W8, [X19+24]
	031 And W31, W8, 3
	032 Move X8, 0x834000
	033 Move X8, [X8+2768]
	034 Move X19, 0x835000
	035 Move X0, [X8]
	036 Move W8, [X0+224]
	037 Move X19, [X19+1368]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, [X19]
	042 Move X1, X31
	043 Call Log.Warning, X0
	044 Move X20, X31
	045 Move X8, 0x7DA000
	046 Move X8, [X8+2648]
	047 Move X0, [X8]
	048 Call 0x1C17F10
	049 Move X1, X31
	050 Move X20, X0
	051 Call GameObject..ctor, X0
	052 Compare X20, 0
	053 JumpIfEqual {77}
	054 Move X8, 0x835000
	055 Move X8, [X8+1360]
	056 Move X0, X20
	057 Move X2, X31
	058 Move X1, [X8]
	059 Call Object.set_name, X0, X1
	060 Move X8, 0x835000
	061 Move X8, [X8+1352]
	062 Move X0, X20
	063 Move X1, [X8]
	064 Call 0x21E61FC, X0
	065 Compare X0, 0
	066 JumpIfEqual {77}
	067 Move W8, 2
	068 Move X1, X19
	069 Move X20, X0
	070 Move [X0+32], W8
	071 Call ProBuilderMesh.GeometryWithPoints, X0, X1
	072 Move X0, X20
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 Move X30, [X31+32]
	076 Return X0
	077 Call 0x1C17F20

Method: UnityEngine.ProBuilder.ProBuilderMesh Create()

Disassembly:
	0x0391A3E0 BL 0x1C16CF4
	0x0391A3E4 ADRP X0, 0x833000
	0x0391A3E8 LDR X0, [X0 + 0xDB8]
	0x0391A3EC BL 0x1C16CF4
	0x0391A3F0 ADRP X0, 0x7D9000
	0x0391A3F4 LDR X0, [X0 + 0xE18]
	0x0391A3F8 BL 0x1C16CF4
	0x0391A3FC ADRP X0, 0x834000
	0x0391A400 LDR X0, [X0 + 0x528]
	0x0391A404 BL 0x1C16CF4
	0x0391A408 ADRP X0, 0x834000
	0x0391A40C LDR X0, [X0 + 0x590]
	0x0391A410 BL 0x1C16CF4
	0x0391A414 ADRP X0, 0x833000
	0x0391A418 LDR X0, [X0 + 0xA88]
	0x0391A41C BL 0x1C16CF4
	0x0391A420 MOVZ W8, 0x1
	0x0391A424 STRB W8, [X21 + 0x880]
	0x0391A428 MOVZ W1, 0x2
	0x0391A42C MOV X0, X19
	0x0391A430 BL 0x39112BC
	0x0391A434 TBNZ X0, 0x0, 0x391A49C
	0x0391A438 ADRP X8, 0x833000
	0x0391A43C LDR X9, [X19 + 0x58]
	0x0391A440 LDR X8, [X8 + 0xA88]
	0x0391A444 CBZ X9, 0x391A450
	0x0391A448 LDR W1, [X9 + 0x18]
	0x0391A44C B 0x391A454
	0x0391A450 MOV W1, W31
	0x0391A454 LDR X0, [X8]
	0x0391A458 BL 0x1C16D6C
	0x0391A45C LDR X20, [X19 + 0x28]
	0x0391A460 STR X0, [X19 + 0x60]
	0x0391A464 CBZ X20, 0x391A83C
	0x0391A468 LDR W8, [X20 + 0x18]
	0x0391A46C CMP W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xAC8000
	005 Move X20, 0x7DA000
	006 Move W8, [X19+2164]
	007 Move X20, [X20+2648]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x835000
	013 Move X0, [X0+1352]
	014 Call 0x1C17CF4
	015 Move X0, 0x7DA000
	016 Move X0, [X0+2648]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+2164], W8
	020 Move X0, [X20]
	021 Call 0x1C17F10
	022 Move X1, X31
	023 Move X19, X0
	024 Call GameObject..ctor, X0
	025 Compare X19, 0
	026 JumpIfEqual {43}
	027 Move X8, 0x835000
	028 Move X8, [X8+1352]
	029 Move X0, X19
	030 Move X1, [X8]
	031 Call 0x21E61FC, X0
	032 Compare X0, 0
	033 JumpIfEqual {43}
	034 Move W8, 2
	035 Move X19, X0
	036 Move [X0+32], W8
	037 Call ProBuilderMesh.Clear, X0
	038 Move X0, X19
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return X0
	043 Call 0x1C17F20

Method: UnityEngine.ProBuilder.ProBuilderMesh Create(System.Collections.Generic.IEnumerable`1<UnityEngine.Vector3> positions, System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> faces)

Disassembly:
	0x0391A470 B.LT 0x391A49C
	0x0391A474 MOV W9, W31
	0x0391A478 CMP W8, W9
	0x0391A47C B.EQ 0x391A840
	0x0391A480 ADD X10, X20, W9, 0x3, SXTW
	0x0391A484 LDR X10, [X10 + 0x20]
	0x0391A488 CBZ X10, 0x391A83C
	0x0391A48C ADD W9, W9, 0x1
	0x0391A490 CMP W8, W9
	0x0391A494 STRB W31, [X10 + 0x4C]
	0x0391A498 B.NE 0x391A478
	0x0391A49C ADRP X24, 0x834000
	0x0391A4A0 LDR X24, [X24 + 0x528]
	0x0391A4A4 LDR X0, [X24]
	0x0391A4A8 LDR W8, [X0 + 0xE0]
	0x0391A4AC CBNZ W8, 0x391A4B8
	0x0391A4B0 BL 0x1C16DFC
	0x0391A4B4 LDR X0, [X24]
	0x0391A4B8 LDR X8, [X0 + 0xB8]
	0x0391A4BC LDR X0, [X8 + 0x28]
	0x0391A4C0 CBZ X0, 0x391A83C
	0x0391A4C4 ADRP X8, 0x7E0000
	0x0391A4C8 LDR X8, [X8 + 0x678]
	0x0391A4CC LDR X1, [X8]
	0x0391A4D0 BL 0x2DAA53C
	0x0391A4D4 CBZ X20, 0x391A83C
	0x0391A4D8 ADRP X10, 0x833000
	0x0391A4DC LDR X8, [X20]
	0x0391A4E0 LDR X10, [X10 + 0xDB0]
	0x0391A4E4 LDRH W9, [X8 + 0x12E]
	0x0391A4E8 LDR X1, [X10]
	0x0391A4EC CBZ X9, 0x391A510
	0x0391A4F0 LDR X10, [X8 + 0xB0]
	0x0391A4F4 ADD X10, X10, 0x8
	0x0391A4F8 LDUR X11, [X10 - 0x8]
	0x0391A4FC CMP X11, X1
	0x0391A500 B.EQ 0x391A520
	0x0391A504 SUBS X9, X9, 0x1
	0x0391A508 ADD X10, X10, 0x10
	0x0391A50C B.NE 0x391A4F8
	0x0391A510 MOV X0, X20
	0x0391A514 MOV W2, W31
	0x0391A518 BL 0x1C5C788
	0x0391A51C B 0x391A52C
	0x0391A520 LDRSW X9, [X10]
	0x0391A524 ADD X8, X8, X9, 0x4, LSL
	0x0391A528 ADD X0, X8, 0x138
	0x0391A52C LDP X8, X1, [X0]
	0x0391A530 MOV X0, X20
	0x0391A534 BLR X8
	0x0391A538 MOV X20, X0
	0x0391A53C CBZ X0, 0x391A844

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xAC8000
	007 Move X22, 0x7DA000
	008 Move W8, [X21+2165]
	009 Move X22, [X22+2648]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x835000
	017 Move X0, [X0+1352]
	018 Call 0x1C17CF4
	019 Move X0, 0x7DA000
	020 Move X0, [X0+2648]
	021 Call 0x1C17CF4
	022 Move X0, 0x835000
	023 Move X0, [X0+1360]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+2165], W8
	027 Move X0, [X22]
	028 Call 0x1C17F10
	029 Move X1, X31
	030 Move X21, X0
	031 Call GameObject..ctor, X0
	032 Compare X21, 0
	033 JumpIfEqual {61}
	034 Move X8, 0x835000
	035 Move X8, [X8+1352]
	036 Move X22, 0x835000
	037 Move X0, X21
	038 Move X1, [X8]
	039 Move X22, [X22+1360]
	040 Call 0x21E61FC, X0
	041 Move X1, [X22]
	042 Move X22, X0
	043 Move X0, X21
	044 Move X2, X31
	045 Call Object.set_name, X0, X1
	046 Compare X22, 0
	047 JumpIfEqual {61}
	048 Move W8, 2
	049 Move X0, X22
	050 Move X1, X20
	051 Move X2, X19
	052 Move [X22+32], W8
	053 Call ProBuilderMesh.RebuildWithPositionsAndFaces, X0, X1, X2
	054 Move X0, X22
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X30, [X31+48]
	060 Return X0
	061 Call 0x1C17F20

Method: UnityEngine.ProBuilder.ProBuilderMesh Create(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Vertex> vertices, System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Face> faces, System.Collections.Generic.IList`1<UnityEngine.ProBuilder.SharedVertex> sharedVertices = null, System.Collections.Generic.IList`1<UnityEngine.ProBuilder.SharedVertex> sharedTextures = null, System.Collections.Generic.IList`1<UnityEngine.Material> materials = null)

Disassembly:
	0x0391A650 LDR W22, [X21 + 0x54]
	0x0391A654 LDR W8, [X0 + 0xE0]
	0x0391A658 CBNZ W8, 0x391A660
	0x0391A65C BL 0x1C16DFC
	0x0391A660 CMP W22, 0x0
	0x0391A664 B.LE 0x391A6DC
	0x0391A668 LDR X0, [X24]
	0x0391A66C LDR W8, [X0 + 0xE0]
	0x0391A670 CBNZ W8, 0x391A67C
	0x0391A674 BL 0x1C16DFC
	0x0391A678 LDR X0, [X24]
	0x0391A67C LDR X8, [X0 + 0xB8]
	0x0391A680 LDR X0, [X8 + 0x28]
	0x0391A684 CBZ X0, 0x391A854
	0x0391A688 LDR X2, [X27]
	0x0391A68C MOV W1, W22
	0x0391A690 BL 0x2DAB03C
	0x0391A694 MOV X29, X23
	0x0391A698 TBZ X0, 0x0, 0x391A564
	0x0391A69C LDUR V0, [X21 + 0x2C]
	0x0391A6A0 LDUR V1, [X21 + 0x1C]
	0x0391A6A4 LDR X0, [X28]
	0x0391A6A8 STP V1, V0, [X31 + 0x20]
	0x0391A6AC LDR W8, [X0 + 0xE0]
	0x0391A6B0 CBNZ W8, 0x391A6B8
	0x0391A6B4 BL 0x1C16DFC
	0x0391A6B8 LDP V0, V1, [X31 + 0x20]
	0x0391A6BC STP V0, V1, [X31]
	0x0391A6C0 ADD X2, X31, 0x0
	0x0391A6C4 MOV X0, X19
	0x0391A6C8 MOV W1, W22
	0x0391A6CC MOV X3, X31
	0x0391A6D0 BL 0x393C304
	0x0391A6D4 MOV X29, X23
	0x0391A6D8 B 0x391A564
	0x0391A6DC LDR X0, [X28]
	0x0391A6E0 LDR W8, [X0 + 0xE0]
	0x0391A6E4 CBNZ W8, 0x391A6EC
	0x0391A6E8 BL 0x1C16DFC
	0x0391A6EC FMOV S0, W31
	0x0391A6F0 FMOV S1, W31
	0x0391A6F4 FMOV S2, W31
	0x0391A6F8 MOV X0, X19
	0x0391A6FC MOV X1, X21
	0x0391A700 MOV X2, X31
	0x0391A704 BL 0x3933424
	0x0391A708 MOV X29, X23
	0x0391A70C B 0x391A564
	0x0391A710 MOV X21, X31
	0x0391A714 MOVZ W22, 0xA
	0x0391A718 CBZ X20, 0x391A77C
	0x0391A71C LDR X8, [X20]
	0x0391A720 ADRP X10, 0x7D9000
	0x0391A724 LDRH W9, [X8 + 0x12E]
	0x0391A728 LDR X10, [X10 + 0xE00]
	0x0391A72C LDR X1, [X10]
	0x0391A730 CBZ X9, 0x391A754
	0x0391A734 LDR X10, [X8 + 0xB0]
	0x0391A738 ADD X10, X10, 0x8
	0x0391A73C LDUR X11, [X10 - 0x8]
	0x0391A740 CMP X11, X1
	0x0391A744 B.EQ 0x391A764
	0x0391A748 SUBS X9, X9, 0x1
	0x0391A74C ADD X10, X10, 0x10
	0x0391A750 B.NE 0x391A73C
	0x0391A754 MOV X0, X20
	0x0391A758 MOV W2, W31
	0x0391A75C BL 0x1C5C788
	0x0391A760 B 0x391A770
	0x0391A764 LDRSW X9, [X10]
	0x0391A768 ADD X8, X8, X9, 0x4, LSL
	0x0391A76C ADD X0, X8, 0x138
	0x0391A770 LDP X8, X1, [X0]
	0x0391A774 MOV X0, X20
	0x0391A778 BLR X8
	0x0391A77C CBNZ X21, 0x391A848
	0x0391A780 CMP W22, 0xA
	0x0391A784 B.EQ 0x391A78C
	0x0391A788 CBNZ W22, 0x391A818
	0x0391A78C MOV X0, X19
	0x0391A790 BL 0x3912CAC
	0x0391A794 CBZ X0, 0x391A83C
	0x0391A798 LDR X1, [X19 + 0x60]
	0x0391A79C MOV X2, X31
	0x0391A7A0 BL 0x3C1810C
	0x0391A7A4 MOVZ W1, 0x8
	0x0391A7A8 MOV X0, X19
	0x0391A7AC BL 0x39112BC
	0x0391A7B0 TBZ X0, 0x0, 0x391A7D0
	0x0391A7B4 MOV X0, X19
	0x0391A7B8 BL 0x3912CAC
	0x0391A7BC CBZ X0, 0x391A83C
	0x0391A7C0 LDR X2, [X19 + 0x68]
	0x0391A7C4 MOVZ W1, 0x2
	0x0391A7C8 MOV X3, X31
	0x0391A7CC BL 0x3C18A7C
	0x0391A7D0 MOVZ W1, 0x10
	0x0391A7D4 MOV X0, X19
	0x0391A7D8 BL 0x39112BC
	0x0391A7DC TBZ X0, 0x0, 0x391A7FC
	0x0391A7E0 MOV X0, X19
	0x0391A7E4 BL 0x3912CAC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X23, 0xAC8000
	010 Move X25, 0x7DA000
	011 Move W8, [X23+2166]
	012 Move X25, [X25+2648]
	013 Move X24, X4
	014 Move X19, X3
	015 Move X20, X2
	016 Move X21, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {39}
	022 Move X0, 0x835000
	023 Move X0, [X0+1392]
	024 Call 0x1C17CF4
	025 Move X0, 0x835000
	026 Move X0, [X0+1400]
	027 Call 0x1C17CF4
	028 Move X0, 0x835000
	029 Move X0, [X0+1352]
	030 Call 0x1C17CF4
	031 Move X0, 0x7DA000
	032 Move X0, [X0+2648]
	033 Call 0x1C17CF4
	034 Move X0, 0x835000
	035 Move X0, [X0+1360]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X23+2166], W8
	039 Move X0, [X25]
	040 Call 0x1C17F10
	041 Move X1, X31
	042 Move X23, X0
	043 Call GameObject..ctor, X0
	044 Compare X23, 0
	045 JumpIfEqual {117}
	046 Move X8, 0x835000
	047 Move X8, [X8+1360]
	048 Move X25, 0x835000
	049 Move X0, X23
	050 Move X2, X31
	051 Move X1, [X8]
	052 Move X25, [X25+1352]
	053 Call Object.set_name, X0, X1
	054 Move X1, [X25]
	055 Move X0, X23
	056 Call 0x21E61FC, X0
	057 Move X23, X0
	058 Compare X24, 0
	059 JumpIfEqual {76}
	060 Compare X23, 0
	061 JumpIfEqual {117}
	062 Move X25, 0x835000
	063 Move X25, [X25+1392]
	064 Move X0, X23
	065 Call ProBuilderMesh.get_renderer, X0
	066 Move X1, [X25]
	067 Move X25, X0
	068 Move X0, X24
	069 Call Enumerable.ToArray, X0
	070 Compare X25, 0
	071 JumpIfEqual {117}
	072 Move X1, X0
	073 Move X0, X25
	074 Move X2, X31
	075 Call Renderer.set_sharedMaterials, X0, X1
	076 Compare X23, 0
	077 JumpIfEqual {117}
	078 Move W8, 2
	079 Move X0, X23
	080 Move X1, X22
	081 Move W2, W31
	082 Move [X23+32], W8
	083 Call ProBuilderMesh.SetVertices, X0, X1, X2
	084 Move X0, X23
	085 Move X1, X21
	086 Call ProBuilderMesh.set_faces, X0, X1
	087 Move X0, X23
	088 Move X1, X20
	089 Call ProBuilderMesh.set_sharedVertices, X0, X1
	090 Compare X19, 0
	091 JumpIfEqual {97}
	092 Move X8, 0x835000
	093 Move X8, [X8+1400]
	094 Move X0, X19
	095 Move X1, [X8]
	096 Call Enumerable.ToArray, X0
	097 Move X0, X31
	098 Move [X23+72], X0
	099 Move X0, X23
	100 Call ProBuilderMesh.InvalidateSharedTextureLookup, X0
	101 Move X0, X23
	102 Move W1, W31
	103 Call ProBuilderMesh.ToMesh, X0, X1
	104 Move W1, 31
	105 Move X0, X23
	106 Call ProBuilderMesh.Refresh, X0, X1
	107 Move X0, X23
	108 Move X20, [X31+48]
	109 Move X19, [X31+56]
	110 Move X22, [X31+32]
	111 Move X21, [X31+40]
	112 Move X24, [X31+16]
	113 Move X23, [X31+24]
	114 Move X30, [X31+64]
	115 Move X25, [X31+72]
	116 Return X0
	117 Call 0x1C17F20

Method: System.Void GeometryWithPoints(UnityEngine.Vector3[] points)

Disassembly:
	0x0391A1DC LDR X9, [X8 + 0xB8]
	0x0391A1E0 ADRP X26, 0x834000
	0x0391A1E4 ADRP X25, 0x834000
	0x0391A1E8 LDR X22, [X9 + 0x28]
	0x0391A1EC LDR X26, [X26 + 0x5A0]
	0x0391A1F0 LDR X25, [X25 + 0x3E0]
	0x0391A1F4 CBNZ X22, 0x391A24C
	0x0391A1F8 LDR W9, [X8 + 0xE0]
	0x0391A1FC CBNZ W9, 0x391A20C
	0x0391A200 MOV X0, X8
	0x0391A204 BL 0x1C16DFC
	0x0391A208 LDR X8, [X24]
	0x0391A20C ADRP X9, 0x834000
	0x0391A210 LDR X8, [X8 + 0xB8]
	0x0391A214 LDR X9, [X9 + 0x5A8]
	0x0391A218 LDR X23, [X8]
	0x0391A21C LDR X0, [X9]
	0x0391A220 BL 0x1C16F10
	0x0391A224 ADRP X8, 0x834000
	0x0391A228 LDR X8, [X8 + 0x5B0]
	0x0391A22C MOV X1, X23
	0x0391A230 MOV X3, X31
	0x0391A234 MOV X22, X0
	0x0391A238 LDR X2, [X8]
	0x0391A23C BL 0x2D30578
	0x0391A240 LDR X8, [X24]
	0x0391A244 LDR X8, [X8 + 0xB8]
	0x0391A248 STR X22, [X8 + 0x28]
	0x0391A24C LDR X2, [X26]
	0x0391A250 MOV X0, X21
	0x0391A254 MOV X1, X22
	0x0391A258 BL 0x21CF224
	0x0391A25C LDR X1, [X25]
	0x0391A260 BL 0x21D577C
	0x0391A264 CBZ X19, 0x391A338
	0x0391A268 ADRP X8, 0x834000
	0x0391A26C LDR X8, [X8 + 0x8]
	0x0391A270 STR X0, [X19 + 0x28]
	0x0391A274 ADRP X21, 0x834000
	0x0391A278 ADRP X23, 0x834000
	0x0391A27C LDR X0, [X8]
	0x0391A280 LDR X21, [X21 + 0x10]
	0x0391A284 LDR X23, [X23 + 0x5B8]
	0x0391A288 BL 0x1C16F10
	0x0391A28C LDR X1, [X21]
	0x0391A290 MOV X21, X0
	0x0391A294 BL 0x30CE5F4
	0x0391A298 MOV W22, W31
	0x0391A29C MOV X0, X20
	0x0391A2A0 MOV W1, W22
	0x0391A2A4 MOV X2, X21
	0x0391A2A8 BL 0x39114F4
	0x0391A2AC MOV X0, X19
	0x0391A2B0 MOV W1, W22
	0x0391A2B4 MOV X2, X21
	0x0391A2B8 BL 0x3917934
	0x0391A2BC ADD W22, W22, 0x1
	0x0391A2C0 CMP W22, 0x4
	0x0391A2C4 B.NE 0x391A29C
	0x0391A2C8 MOV X0, X20
	0x0391A2CC BL 0x3917458
	0x0391A2D0 MOV X1, X0
	0x0391A2D4 MOV X0, X19
	0x0391A2D8 BL 0x39174F0
	0x0391A2DC MOV X0, X20
	0x0391A2E0 BL 0x391719C
	0x0391A2E4 MOV X1, X0
	0x0391A2E8 MOV X0, X19
	0x0391A2EC BL 0x391721C
	0x0391A2F0 LDRB W8, [X20 + 0x90]
	0x0391A2F4 STRB W8, [X19 + 0x90]
	0x0391A2F8 LDRB W8, [X20 + 0xCC]
	0x0391A2FC STRB W8, [X19 + 0xCC]
	0x0391A300 LDR X0, [X23]
	0x0391A304 LDR X20, [X20 + 0x98]
	0x0391A308 BL 0x1C16F10
	0x0391A30C MOV X1, X20
	0x0391A310 MOV X2, X31
	0x0391A314 MOV X21, X0
	0x0391A318 BL 0x393AA6C
	0x0391A31C STR X21, [X19 + 0x98]
	0x0391A320 LDP X20, X19, [X31 + 0x40]
	0x0391A324 LDP X22, X21, [X31 + 0x30]
	0x0391A328 LDP X24, X23, [X31 + 0x20]
	0x0391A32C LDP X26, X25, [X31 + 0x10]
	0x0391A330 LDR X30, [X31], #0x50
	0x0391A334 RET
	0x0391A338 BL 0x1C16F20
	0x0391A33C ADRP X0, 0x7DE000
	0x0391A340 LDR X0, [X0 + 0x528]
	0x0391A344 BL 0x1C16D08
	0x0391A348 BL 0x1C16F10
	0x0391A34C MOV X19, X0
	0x0391A350 ADRP X0, 0x803000
	0x0391A354 LDR X0, [X0 + 0x928]
	0x0391A358 BL 0x1C16D08
	0x0391A35C MOV X1, X0
	0x0391A360 MOV X0, X19
	0x0391A364 MOV X2, X31
	0x0391A368 BL 0x330E100
	0x0391A36C ADRP X0, 0x834000
	0x0391A370 LDR X0, [X0 + 0x5C0]
	0x0391A374 BL 0x1C16D08
	0x0391A378 MOV X1, X0
	0x0391A37C MOV X0, X19
	0x0391A380 BL 0x1C16DEC
	0x0391A384 SUB X31, X31, 0xA0
	0x0391A388 STP X29, X30, [X31 + 0x40]
	0x0391A38C STP X28, X27, [X31 + 0x50]
	0x0391A390 STP X26, X25, [X31 + 0x60]
	0x0391A394 STP X24, X23, [X31 + 0x70]
	0x0391A398 STP X22, X21, [X31 + 0x80]
	0x0391A39C STP X20, X19, [X31 + 0x90]
	0x0391A3A0 ADRP X21, 0xAC7000
	0x0391A3A4 LDRB W8, [X21 + 0x880]
	0x0391A3A8 MOV X20, X1
	0x0391A3AC MOV X19, X0
	0x0391A3B0 TBNZ X8, 0x0, 0x391A428
	0x0391A3B4 ADRP X0, 0x7DB000
	0x0391A3B8 LDR X0, [X0 + 0x9D8]
	0x0391A3BC BL 0x1C16CF4
	0x0391A3C0 ADRP X0, 0x7E0000
	0x0391A3C4 LDR X0, [X0 + 0x678]
	0x0391A3C8 BL 0x1C16CF4
	0x0391A3CC ADRP X0, 0x7D9000
	0x0391A3D0 LDR X0, [X0 + 0xE00]
	0x0391A3D4 BL 0x1C16CF4
	0x0391A3D8 ADRP X0, 0x833000
	0x0391A3DC LDR X0, [X0 + 0xDB0]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+112], X30
	003 Move [X31+128], X26
	004 Move [X31+136], X25
	005 Move [X31+144], X24
	006 Move [X31+152], X23
	007 Move [X31+160], X22
	008 Move [X31+168], X21
	009 Move [X31+176], X20
	010 Move [X31+184], X19
	011 Move X21, 0xAC8000
	012 Move W8, [X21+2167]
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0x835000
	020 Move X0, [X0+1008]
	021 Call 0x1C17CF4
	022 Move X0, 0x835000
	023 Move X0, [X0+1376]
	024 Call 0x1C17CF4
	025 Move X0, 0x7DB000
	026 Move X0, [X0+3672]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+2167], W8
	030 Compare X20, 0
	031 JumpIfEqual {144}
	032 Move X9, 0x835000
	033 Move W8, [X20+24]
	034 Move X9, [X9+1008]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X0, [X9]
	037 Add W9, W8, 3
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 NotImplemented "Instruction SBFM not yet implemented."
	040 Call 0x1C17D6C
	041 Move W8, [X20+24]
	042 Move X21, X0
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X24, 0x7DB000
	045 Move X25, 0x835000
	046 Move X24, [X24+3672]
	047 Move X25, [X25+1376]
	048 Move W23, W31
	049 Move X0, [X24]
	050 Move W1, 6
	051 Call 0x1C17D6C
	052 Compare X0, 0
	053 JumpIfEqual {144}
	054 Move W8, [X0+24]
	055 Move X22, X0
	056 Compare W8, 0
	057 JumpIfEqual {143}
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move [X22+32], W23
	060 Add W9, W23, 1
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move [X22+36], W9
	063 Add W9, W9, 1
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move [X22+40], W9
	066 Subtract W9, W9, 1
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move [X22+44], W9
	069 Add W9, W9, 2
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move [X22+48], W9
	072 Subtract W26, W9, 1
	073 Add X8, X31, 48
	074 Move X0, X31
	075 Move [X22+52], W26
	076 Call AutoUnwrapSettings.get_tile
	077 Move V0, [X31+48]
	078 Move V1, [X31+64]
	079 Move X0, [X25]
	080 Move [X31+80], V0
	081 Move [X31+88], V1
	082 Call 0x1C17F10
	083 Move V0, [X31+80]
	084 Move V1, [X31+96]
	085 Add X3, X31, 16
	086 Move TEMP, 0
	087 Not TEMP
	088 Move W5, TEMP
	089 Move TEMP, 0
	090 Not TEMP
	091 Move W6, TEMP
	092 Move X1, X22
	093 Move W2, W31
	094 Move W4, W31
	095 Move W7, W31
	096 Move X23, X0
	097 Move [X31+16], V0
	098 Move [X31+24], V1
	099 Move [X31], X31
	100 Call Face..ctor, X0, X1, X2, X3, X4, X5, X6, X7
	101 Compare X21, 0
	102 JumpIfEqual {144}
	103 Subtract W8, W26, 2
	104 Move W10, [X21+24]
	105 NotImplemented "Instruction CMP not yet implemented."
	106 NotImplemented "Instruction CSINC not yet implemented."
	107 NotImplemented "Instruction SBFM not yet implemented."
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Add X9, X21, W9
	110 Move [X9+32], X23
	111 Move W9, [X20+24]
	112 Add W23, W8, 4
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X0, X19
	115 Call ProBuilderMesh.Clear, X0
	116 Move X0, X19
	117 Move X1, X20
	118 Call ProBuilderMesh.set_positions, X0, X1
	119 Move X0, X20
	120 Move X1, X31
	121 Move [X19+40], X21
	122 Call SharedVertex.GetSharedVerticesWithPositions, X0
	123 Move [X19+48], X0
	124 Move X0, X19
	125 Call ProBuilderMesh.InvalidateCaches, X0
	126 Move X0, X19
	127 Move W1, W31
	128 Call ProBuilderMesh.ToMesh, X0, X1
	129 Move W1, 31
	130 Move X0, X19
	131 Call ProBuilderMesh.Refresh, X0, X1
	132 Move X20, [X31+176]
	133 Move X19, [X31+184]
	134 Move X22, [X31+160]
	135 Move X21, [X31+168]
	136 Move X24, [X31+144]
	137 Move X23, [X31+152]
	138 Move X26, [X31+128]
	139 Move X25, [X31+136]
	140 Move X30, [X31+112]
	141 Add X31, X31, 192
	142 Return 
	143 Call 0x1C17F28
	144 Call 0x1C17F20

Method: System.Void RebuildWithPositionsAndFaces(System.Collections.Generic.IEnumerable`1<UnityEngine.Vector3> vertices, System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> faces)

Disassembly:
	0x0391A540 ADRP X25, 0x7D9000
	0x0391A544 ADRP X26, 0x833000
	0x0391A548 ADRP X27, 0x7DB000
	0x0391A54C ADRP X28, 0x834000
	0x0391A550 LDR X25, [X25 + 0xE18]
	0x0391A554 LDR X26, [X26 + 0xDB8]
	0x0391A558 LDR X27, [X27 + 0x9D8]
	0x0391A55C LDR X28, [X28 + 0x590]
	0x0391A560 MOV X29, X31
	0x0391A564 LDR X8, [X20]
	0x0391A568 LDR X1, [X25]
	0x0391A56C LDRH W9, [X8 + 0x12E]
	0x0391A570 CBZ X9, 0x391A594
	0x0391A574 LDR X10, [X8 + 0xB0]
	0x0391A578 ADD X10, X10, 0x8
	0x0391A57C LDUR X11, [X10 - 0x8]
	0x0391A580 CMP X11, X1
	0x0391A584 B.EQ 0x391A5A4
	0x0391A588 SUBS X9, X9, 0x1
	0x0391A58C ADD X10, X10, 0x10
	0x0391A590 B.NE 0x391A57C
	0x0391A594 MOV X0, X20
	0x0391A598 MOV W2, W31
	0x0391A59C BL 0x1C5C788
	0x0391A5A0 B 0x391A5B0
	0x0391A5A4 LDRSW X9, [X10]
	0x0391A5A8 ADD X8, X8, X9, 0x4, LSL
	0x0391A5AC ADD X0, X8, 0x138
	0x0391A5B0 LDP X8, X1, [X0]
	0x0391A5B4 MOV X0, X20
	0x0391A5B8 BLR X8
	0x0391A5BC TBZ X0, 0x0, 0x391A710
	0x0391A5C0 LDR X8, [X20]
	0x0391A5C4 LDR X1, [X26]
	0x0391A5C8 LDRH W9, [X8 + 0x12E]
	0x0391A5CC CBZ X9, 0x391A5F0
	0x0391A5D0 LDR X10, [X8 + 0xB0]
	0x0391A5D4 ADD X10, X10, 0x8
	0x0391A5D8 LDUR X11, [X10 - 0x8]
	0x0391A5DC CMP X11, X1
	0x0391A5E0 B.EQ 0x391A600
	0x0391A5E4 SUBS X9, X9, 0x1
	0x0391A5E8 ADD X10, X10, 0x10
	0x0391A5EC B.NE 0x391A5D8
	0x0391A5F0 MOV X0, X20
	0x0391A5F4 MOV W2, W31
	0x0391A5F8 BL 0x1C5C788
	0x0391A5FC B 0x391A60C
	0x0391A600 LDRSW X9, [X10]
	0x0391A604 ADD X8, X8, X9, 0x4, LSL
	0x0391A608 ADD X0, X8, 0x138
	0x0391A60C LDP X8, X1, [X0]
	0x0391A610 MOV X0, X20
	0x0391A614 BLR X8
	0x0391A618 MOV X21, X0
	0x0391A61C CBZ X0, 0x391A838
	0x0391A620 LDRB W8, [X21 + 0x4C]
	0x0391A624 CBNZ W8, 0x391A564
	0x0391A628 LDR X8, [X21 + 0x10]
	0x0391A62C CMP X8, 0x0
	0x0391A630 CSEL X23, X29, X8, EQ
	0x0391A634 CBZ X8, 0x391A64C
	0x0391A638 CBZ X23, 0x391A850
	0x0391A63C LDR W9, [X23 + 0x18]
	0x0391A640 MOV X29, X8
	0x0391A644 CMP W9, 0x2
	0x0391A648 B.LE 0x391A564
	0x0391A64C LDR X0, [X24]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xAC8000
	008 Move W8, [X22+2168]
	009 Move X20, X2
	010 Move X21, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x835000
	017 Move X0, [X0+992]
	018 Call 0x1C17CF4
	019 Move X0, 0x835000
	020 Move X0, [X0+368]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2168], W8
	024 Compare X21, 0
	025 JumpIfEqual {62}
	026 Move X22, 0x835000
	027 Move X23, 0x835000
	028 Move X22, [X22+368]
	029 Move X23, [X23+992]
	030 Move X0, X19
	031 Call ProBuilderMesh.Clear, X0
	032 Move X1, [X22]
	033 Move X0, X21
	034 Call Enumerable.ToArray, X0
	035 Move [X19+88], X0
	036 Move X1, [X23]
	037 Move X0, X20
	038 Call Enumerable.ToArray, X0
	039 Move X8, [X19+88]
	040 Move [X19+40], X0
	041 Move X1, X31
	042 Move X0, X8
	043 Call SharedVertex.GetSharedVerticesWithPositions, X0
	044 Move [X19+48], X0
	045 Move X0, X19
	046 Call ProBuilderMesh.InvalidateSharedVertexLookup, X0
	047 Move X0, X19
	048 Call ProBuilderMesh.InvalidateSharedTextureLookup, X0
	049 Move X0, X19
	050 Move W1, W31
	051 Call ProBuilderMesh.ToMesh, X0, X1
	052 Move X0, X19
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move W1, 31
	058 Move X30, [X31+48]
	059 Move X23, [X31+56]
	060 Call ProBuilderMesh.Refresh, X0, X1
	061 Return 
	062 Move X0, 0x7DF000
	063 Move X0, [X0+1320]
	064 Call 0x1C17D08
	065 Call 0x1C17F10
	066 Move X19, X0
	067 Move X0, 0x835000
	068 Move X0, [X0+1104]
	069 Call 0x1C17D08
	070 Move X1, X0
	071 Move X0, X19
	072 Move X2, X31
	073 Call ArgumentNullException..ctor, X0, X1
	074 Move X0, 0x835000
	075 Move X0, [X0+1384]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X19
	079 Call 0x1C17DEC

Method: System.Void Rebuild()

Disassembly:
	0x039130D8 CBNZ W9, 0x39130E8
	0x039130DC BL 0x1C16DFC
	0x039130E0 LDR X8, [X20]
	0x039130E4 LDR X8, [X8 + 0xB8]
	0x039130E8 ADRP X9, 0x809000
	0x039130EC LDR X9, [X9 + 0xED0]
	0x039130F0 ADD X0, X8, 0x10
	0x039130F4 MOV W1, W19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, W31
	004 Move X19, X0
	005 Call ProBuilderMesh.ToMesh, X0, X1
	006 Move W1, 31
	007 Move X0, X19
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Call ProBuilderMesh.Refresh, X0, X1
	011 Return 

Method: System.Void ToMesh(UnityEngine.MeshTopology preferredTopology = 0)

Disassembly:
	0x0391A7E8 CBZ X0, 0x391A83C
	0x0391A7EC LDR X2, [X19 + 0x70]
	0x0391A7F0 MOVZ W1, 0x3
	0x0391A7F4 MOV X3, X31
	0x0391A7F8 BL 0x3C18A7C
	0x0391A7FC LDRH W8, [X19 + 0xC8]
	0x0391A800 MOVZ W9, 0x1
	0x0391A804 ADD W10, W8, 0x1
	0x0391A808 ANDS W31, W10, 0x10000
	0x0391A80C CSINC W8, W9, W8, NE
	0x0391A810 STRH W8, [X19 + 0xC8]
	0x0391A814 STRH W8, [X19 + 0xCA]
	0x0391A818 LDP X20, X19, [X31 + 0x90]
	0x0391A81C LDP X22, X21, [X31 + 0x80]
	0x0391A820 LDP X24, X23, [X31 + 0x70]
	0x0391A824 LDP X26, X25, [X31 + 0x60]
	0x0391A828 LDP X28, X27, [X31 + 0x50]
	0x0391A82C LDP X29, X30, [X31 + 0x40]
	0x0391A830 ADD X31, X31, 0xA0
	0x0391A834 RET
	0x0391A838 BL 0x1C16F20
	0x0391A83C BL 0x1C16F20
	0x0391A840 BL 0x1C16F28
	0x0391A844 BL 0x1C16F20
	0x0391A848 MOV X0, X21
	0x0391A84C BL 0x1C16F18
	0x0391A850 BL 0x1C16F20
	0x0391A854 BL 0x1C16F20
	0x0391A858 B 0x391A880
	0x0391A85C B 0x391A880
	0x0391A860 B 0x391A880
	0x0391A864 B 0x391A880
	0x0391A868 B 0x391A880
	0x0391A86C B 0x391A880
	0x0391A870 B 0x391A880
	0x0391A874 B 0x391A880
	0x0391A878 B 0x391A880
	0x0391A87C B 0x391A880
	0x0391A880 CMP W1, 0x1
	0x0391A884 B.NE 0x391A8A0
	0x0391A888 BL 0x3EB1AD0
	0x0391A88C LDR X21, [X0]
	0x0391A890 BL 0x3EB1AE0
	0x0391A894 MOV W22, W31
	0x0391A898 CBNZ X20, 0x391A71C
	0x0391A89C B 0x391A77C
	0x0391A8A0 MOV X19, X0
	0x0391A8A4 MOV X21, X31
	0x0391A8A8 B 0x391A8B0
	0x0391A8AC MOV X19, X0
	0x0391A8B0 CBZ X20, 0x391A914
	0x0391A8B4 LDR X8, [X20]
	0x0391A8B8 ADRP X10, 0x7D9000
	0x0391A8BC LDRH W9, [X8 + 0x12E]
	0x0391A8C0 LDR X10, [X10 + 0xE00]
	0x0391A8C4 LDR X1, [X10]
	0x0391A8C8 CBZ X9, 0x391A8EC
	0x0391A8CC LDR X10, [X8 + 0xB0]
	0x0391A8D0 ADD X10, X10, 0x8
	0x0391A8D4 LDUR X11, [X10 - 0x8]
	0x0391A8D8 CMP X11, X1
	0x0391A8DC B.EQ 0x391A8FC
	0x0391A8E0 SUBS X9, X9, 0x1
	0x0391A8E4 ADD X10, X10, 0x10
	0x0391A8E8 B.NE 0x391A8D4
	0x0391A8EC MOV X0, X20
	0x0391A8F0 MOV W2, W31
	0x0391A8F4 BL 0x1C5C788
	0x0391A8F8 B 0x391A908
	0x0391A8FC LDRSW X9, [X10]
	0x0391A900 ADD X8, X8, X9, 0x4, LSL
	0x0391A904 ADD X0, X8, 0x138
	0x0391A908 LDP X8, X1, [X0]
	0x0391A90C MOV X0, X20
	0x0391A910 BLR X8
	0x0391A914 CBNZ X21, 0x391A920
	0x0391A918 MOV X0, X19
	0x0391A91C BL 0x1D2C690
	0x0391A920 MOV X0, X21
	0x0391A924 BL 0x1C16F18
	0x0391A928 BL 0x1990590
	0x0391A92C STP X30, X19, [X31 - 0x10]!
	0x0391A930 MOV X19, X0
	0x0391A934 BL 0x3915860
	0x0391A938 CBZ X0, 0x391A958
	0x0391A93C MOV X1, X31
	0x0391A940 BL 0x3C16D04
	0x0391A944 CBZ X0, 0x391A958
	0x0391A948 LDR X1, [X19 + 0x88]
	0x0391A94C MOV X2, X31
	0x0391A950 LDP X30, X19, [X31], #0x10
	0x0391A954 B 0x3C18264
	0x0391A958 BL 0x1C16F20
	0x0391A95C STP X30, X21, [X31 - 0x20]!
	0x0391A960 STP X20, X19, [X31 + 0x10]
	0x0391A964 ADRP X20, 0xAC7000
	0x0391A968 ADRP X21, 0x833000
	0x0391A96C LDRB W8, [X20 + 0x884]
	0x0391A970 LDR X21, [X21 + 0xE78]
	0x0391A974 MOV X19, X0
	0x0391A978 TBNZ X8, 0x0, 0x391A990
	0x0391A97C ADRP X0, 0x833000
	0x0391A980 LDR X0, [X0 + 0xE78]
	0x0391A984 BL 0x1C16CF4
	0x0391A988 MOVZ W8, 0x1
	0x0391A98C STRB W8, [X20 + 0x884]
	0x0391A990 LDR X0, [X21]
	0x0391A994 LDR W8, [X0 + 0xE0]
	0x0391A998 CBNZ W8, 0x391A9A0
	0x0391A99C BL 0x1C16DFC
	0x0391A9A0 MOV X0, X19
	0x0391A9A4 BL 0x3913B20
	0x0391A9A8 MOV X0, X19
	0x0391A9AC BL 0x3912CAC
	0x0391A9B0 CBZ X0, 0x391A9C8
	0x0391A9B4 LDR X1, [X19 + 0x80]
	0x0391A9B8 LDP X20, X19, [X31 + 0x10]
	0x0391A9BC MOV X2, X31
	0x0391A9C0 LDP X30, X21, [X31], #0x20
	0x0391A9C4 B 0x3C17FB4
	0x0391A9C8 BL 0x1C16F20
	0x0391A9CC STP X30, X21, [X31 - 0x20]!
	0x0391A9D0 STP X20, X19, [X31 + 0x10]
	0x0391A9D4 ADRP X20, 0xAC7000
	0x0391A9D8 ADRP X21, 0x833000
	0x0391A9DC LDRB W8, [X20 + 0x885]
	0x0391A9E0 LDR X21, [X21 + 0xE78]
	0x0391A9E4 MOV X19, X0
	0x0391A9E8 TBNZ X8, 0x0, 0x391AA00
	0x0391A9EC ADRP X0, 0x833000
	0x0391A9F0 LDR X0, [X0 + 0xE78]
	0x0391A9F4 BL 0x1C16CF4
	0x0391A9F8 MOVZ W8, 0x1
	0x0391A9FC STRB W8, [X20 + 0x885]
	0x0391AA00 LDR X0, [X21]
	0x0391AA04 LDR W8, [X0 + 0xE0]
	0x0391AA08 CBNZ W8, 0x391AA10
	0x0391AA0C BL 0x1C16DFC
	0x0391AA10 MOV X0, X19
	0x0391AA14 BL 0x3913164
	0x0391AA18 MOV X0, X19
	0x0391AA1C BL 0x3912CAC
	0x0391AA20 CBZ X0, 0x391AA38
	0x0391AA24 LDR X1, [X19 + 0x78]
	0x0391AA28 LDP X20, X19, [X31 + 0x10]
	0x0391AA2C MOV X2, X31
	0x0391AA30 LDP X30, X21, [X31], #0x20
	0x0391AA34 B 0x3C18060
	0x0391AA38 BL 0x1C16F20
	0x0391AA3C STP X30, X25, [X31 - 0x40]!
	0x0391AA40 STP X24, X23, [X31 + 0x10]
	0x0391AA44 STP X22, X21, [X31 + 0x20]
	0x0391AA48 STP X20, X19, [X31 + 0x30]
	0x0391AA4C ADRP X21, 0xAC7000
	0x0391AA50 ADRP X22, 0x834000
	0x0391AA54 LDRB W8, [X21 + 0x87E]
	0x0391AA58 LDR X22, [X22 + 0x5C8]
	0x0391AA5C MOV W20, W1
	0x0391AA60 MOV X19, X0
	0x0391AA64 TBNZ X8, 0x0, 0x391AAA0
	0x0391AA68 ADRP X0, 0x834000
	0x0391AA6C LDR X0, [X0 + 0x5D0]
	0x0391AA70 BL 0x1C16CF4
	0x0391AA74 ADRP X0, 0x834000
	0x0391AA78 LDR X0, [X0 + 0x5D8]
	0x0391AA7C BL 0x1C16CF4
	0x0391AA80 ADRP X0, 0x834000
	0x0391AA84 LDR X0, [X0 + 0x5E0]
	0x0391AA88 BL 0x1C16CF4
	0x0391AA8C ADRP X0, 0x834000
	0x0391AA90 LDR X0, [X0 + 0x5C8]
	0x0391AA94 BL 0x1C16CF4
	0x0391AA98 MOVZ W8, 0x1
	0x0391AA9C STRB W8, [X21 + 0x87E]
	0x0391AAA0 LDR X0, [X22]
	0x0391AAA4 BL 0x1C16F10
	0x0391AAA8 MOV X1, X31
	0x0391AAAC MOV X21, X0
	0x0391AAB0 BL 0x33BDD8C
	0x0391AAB4 CBZ X21, 0x391AB28
	0x0391AAB8 ADRP X23, 0x834000
	0x0391AABC ADRP X24, 0x834000
	0x0391AAC0 ADRP X25, 0x834000
	0x0391AAC4 LDR X23, [X23 + 0x5D8]
	0x0391AAC8 LDR X24, [X24 + 0x5E0]
	0x0391AACC LDR X25, [X25 + 0x5D0]
	0x0391AAD0 STR W20, [X21 + 0x10]
	0x0391AAD4 LDR X0, [X23]
	0x0391AAD8 LDR X20, [X19 + 0x28]
	0x0391AADC BL 0x1C16F10
	0x0391AAE0 LDR X2, [X24]
	0x0391AAE4 MOV X1, X21
	0x0391AAE8 MOV X3, X31
	0x0391AAEC MOV X22, X0
	0x0391AAF0 BL 0x24AD1FC
	0x0391AAF4 LDR X2, [X25]
	0x0391AAF8 MOV X0, X20
	0x0391AAFC MOV X1, X22
	0x0391AB00 BL 0x22E5B98
	0x0391AB04 MOV W8, W0
	0x0391AB08 LDR W0, [X21 + 0x10]
	0x0391AB0C ADD W20, W0, 0x1
	0x0391AB10 TBNZ X8, 0x0, 0x391AAD0
	0x0391AB14 LDP X20, X19, [X31 + 0x30]
	0x0391AB18 LDP X22, X21, [X31 + 0x20]
	0x0391AB1C LDP X24, X23, [X31 + 0x10]
	0x0391AB20 LDP X30, X25, [X31], #0x40
	0x0391AB24 RET
	0x0391AB28 BL 0x1C16F20
	0x0391AB2C MOV X1, X31
	0x0391AB30 B 0x33BDD8C
	0x0391AB34 CMP W0, 0x0
	0x0391AB38 CSET W0, GT
	0x0391AB3C RET
	0x0391AB40 STP X30, X25, [X31 - 0x40]!
	0x0391AB44 STP X24, X23, [X31 + 0x10]
	0x0391AB48 STP X22, X21, [X31 + 0x20]
	0x0391AB4C STP X20, X19, [X31 + 0x30]
	0x0391AB50 ADRP X21, 0xAC7000
	0x0391AB54 ADRP X22, 0x834000
	0x0391AB58 LDRB W8, [X21 + 0x87F]
	0x0391AB5C LDR X22, [X22 + 0x5E8]
	0x0391AB60 MOV W20, W1
	0x0391AB64 MOV X19, X0
	0x0391AB68 TBNZ X8, 0x0, 0x391ABA4
	0x0391AB6C ADRP X0, 0x834000
	0x0391AB70 LDR X0, [X0 + 0x5D0]
	0x0391AB74 BL 0x1C16CF4
	0x0391AB78 ADRP X0, 0x834000
	0x0391AB7C LDR X0, [X0 + 0x5D8]
	0x0391AB80 BL 0x1C16CF4
	0x0391AB84 ADRP X0, 0x834000
	0x0391AB88 LDR X0, [X0 + 0x5F0]
	0x0391AB8C BL 0x1C16CF4
	0x0391AB90 ADRP X0, 0x834000
	0x0391AB94 LDR X0, [X0 + 0x5E8]
	0x0391AB98 BL 0x1C16CF4
	0x0391AB9C MOVZ W8, 0x1
	0x0391ABA0 STRB W8, [X21 + 0x87F]
	0x0391ABA4 LDR X0, [X22]
	0x0391ABA8 BL 0x1C16F10
	0x0391ABAC MOV X1, X31
	0x0391ABB0 MOV X21, X0
	0x0391ABB4 BL 0x33BDD8C
	0x0391ABB8 CBZ X21, 0x391AC2C
	0x0391ABBC ADRP X23, 0x834000
	0x0391ABC0 ADRP X24, 0x834000
	0x0391ABC4 ADRP X25, 0x834000
	0x0391ABC8 LDR X23, [X23 + 0x5D8]
	0x0391ABCC LDR X24, [X24 + 0x5F0]
	0x0391ABD0 LDR X25, [X25 + 0x5D0]
	0x0391ABD4 STR W20, [X21 + 0x10]
	0x0391ABD8 LDR X0, [X23]
	0x0391ABDC LDR X20, [X19 + 0x28]
	0x0391ABE0 BL 0x1C16F10
	0x0391ABE4 LDR X2, [X24]
	0x0391ABE8 MOV X1, X21
	0x0391ABEC MOV X3, X31
	0x0391ABF0 MOV X22, X0
	0x0391ABF4 BL 0x24AD1FC
	0x0391ABF8 LDR X2, [X25]
	0x0391ABFC MOV X0, X20
	0x0391AC00 MOV X1, X22
	0x0391AC04 BL 0x22E5B98
	0x0391AC08 MOV W8, W0
	0x0391AC0C LDR W0, [X21 + 0x10]
	0x0391AC10 ADD W20, W0, 0x1
	0x0391AC14 TBNZ X8, 0x0, 0x391ABD4
	0x0391AC18 LDP X20, X19, [X31 + 0x30]
	0x0391AC1C LDP X22, X21, [X31 + 0x20]
	0x0391AC20 LDP X24, X23, [X31 + 0x10]
	0x0391AC24 LDP X30, X25, [X31], #0x40
	0x0391AC28 RET
	0x0391AC2C BL 0x1C16F20
	0x0391AC30 MOV X1, X31
	0x0391AC34 B 0x33BDD8C
	0x0391AC38 STP X30, X23, [X31 - 0x30]!
	0x0391AC3C STP X22, X21, [X31 + 0x10]
	0x0391AC40 STP X20, X19, [X31 + 0x20]
	0x0391AC44 ADRP X22, 0xAC7000
	0x0391AC48 ADRP X23, 0x834000
	0x0391AC4C LDRB W8, [X22 + 0x881]
	0x0391AC50 LDR X23, [X23 + 0x528]
	0x0391AC54 MOV W19, W2
	0x0391AC58 MOV X20, X1
	0x0391AC5C MOV X21, X0
	0x0391AC60 TBNZ X8, 0x0, 0x391AC78
	0x0391AC64 ADRP X0, 0x834000
	0x0391AC68 LDR X0, [X0 + 0x528]
	0x0391AC6C BL 0x1C16CF4
	0x0391AC70 MOVZ W8, 0x1
	0x0391AC74 STRB W8, [X22 + 0x881]
	0x0391AC78 LDR X0, [X23]
	0x0391AC7C LDR W8, [X0 + 0xE0]
	0x0391AC80 CBNZ W8, 0x391AC88
	0x0391AC84 BL 0x1C16DFC
	0x0391AC88 CMP W19, 0x1
	0x0391AC8C B.LT 0x391ACE4
	0x0391AC90 LDR X8, [X21 + 0x28]
	0x0391AC94 CBZ X8, 0x391ACF8
	0x0391AC98 LDR W10, [X8 + 0x18]
	0x0391AC9C CMP W10, 0x1
	0x0391ACA0 B.LT 0x391ACE4
	0x0391ACA4 MOV W9, W31
	0x0391ACA8 CMP W9, W10
	0x0391ACAC B.CS 0x391ACF4
	0x0391ACB0 ADD X10, X8, W9, 0x3, SXTW
	0x0391ACB4 LDR X10, [X10 + 0x20]
	0x0391ACB8 CBZ X10, 0x391ACF8
	0x0391ACBC LDR W11, [X10 + 0x54]
	0x0391ACC0 CMP W11, W19
	0x0391ACC4 B.NE 0x391ACD4
	0x0391ACC8 LDP V1, V0, [X20]
	0x0391ACCC STUR V0, [X10 + 0x2C]
	0x0391ACD0 STUR V1, [X10 + 0x1C]
	0x0391ACD4 LDR W10, [X8 + 0x18]
	0x0391ACD8 ADD W9, W9, 0x1
	0x0391ACDC CMP W9, W10
	0x0391ACE0 B.LT 0x391ACA8
	0x0391ACE4 LDP X20, X19, [X31 + 0x20]
	0x0391ACE8 LDP X22, X21, [X31 + 0x10]
	0x0391ACEC LDP X30, X23, [X31], #0x30
	0x0391ACF0 RET
	0x0391ACF4 BL 0x1C16F28
	0x0391ACF8 BL 0x1C16F20
	0x0391ACFC SUB X31, X31, 0x60
	0x0391AD00 STP D11, D10, [X31 + 0x10]
	0x0391AD04 STP D9, D8, [X31 + 0x20]
	0x0391AD08 STP X30, X23, [X31 + 0x30]
	0x0391AD0C STP X22, X21, [X31 + 0x40]
	0x0391AD10 STP X20, X19, [X31 + 0x50]
	0x0391AD14 ADRP X21, 0xAC7000
	0x0391AD18 LDRB W8, [X21 + 0x882]
	0x0391AD1C MOV V8.16B, V3.16B
	0x0391AD20 MOV V9.16B, V2.16B
	0x0391AD24 MOV V10.16B, V1.16B
	0x0391AD28 MOV V11.16B, V0.16B
	0x0391AD2C MOV X19, X1
	0x0391AD30 MOV X20, X0
	0x0391AD34 TBNZ X8, 0x0, 0x391AD7C
	0x0391AD38 ADRP X0, 0x834000
	0x0391AD3C LDR X0, [X0 + 0x480]
	0x0391AD40 BL 0x1C16CF4
	0x0391AD44 ADRP X0, 0x7D9000
	0x0391AD48 LDR X0, [X0 + 0xE00]
	0x0391AD4C BL 0x1C16CF4
	0x0391AD50 ADRP X0, 0x801000
	0x0391AD54 LDR X0, [X0 + 0x7C0]
	0x0391AD58 BL 0x1C16CF4
	0x0391AD5C ADRP X0, 0x7D9000
	0x0391AD60 LDR X0, [X0 + 0xE18]
	0x0391AD64 BL 0x1C16CF4
	0x0391AD68 ADRP X0, 0x834000
	0x0391AD6C LDR X0, [X0 + 0x5F8]
	0x0391AD70 BL 0x1C16CF4
	0x0391AD74 MOVZ W8, 0x1
	0x0391AD78 STRB W8, [X21 + 0x882]
	0x0391AD7C CBZ X19, 0x391AF6C
	0x0391AD80 MOVZ W1, 0x20
	0x0391AD84 MOV X0, X20
	0x0391AD88 BL 0x39112BC
	0x0391AD8C TBNZ X0, 0x0, 0x391ADC8
	0x0391AD90 LDR X8, [X20 + 0x58]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0xAC8000
	015 Move X20, 0x7DA000
	016 Move W8, [X21+2169]
	017 Move X20, [X20+1432]
	018 Move W22, W1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {59}
	024 Move X0, 0x7DA000
	025 Move X0, [X0+1880]
	026 Call 0x1C17CF4
	027 Move X0, 0x834000
	028 Move X0, [X0+3896]
	029 Call 0x1C17CF4
	030 Move X0, 0x835000
	031 Move X0, [X0+1408]
	032 Call 0x1C17CF4
	033 Move X0, 0x835000
	034 Move X0, [X0+1416]
	035 Call 0x1C17CF4
	036 Move X0, 0x7E1000
	037 Move X0, [X0+2696]
	038 Call 0x1C17CF4
	039 Move X0, 0x834000
	040 Move X0, [X0+3904]
	041 Call 0x1C17CF4
	042 Move X0, 0x834000
	043 Move X0, [X0+3888]
	044 Call 0x1C17CF4
	045 Move X0, 0x7E1000
	046 Move X0, [X0+1792]
	047 Call 0x1C17CF4
	048 Move X0, 0x7DA000
	049 Move X0, [X0+1432]
	050 Call 0x1C17CF4
	051 Move X0, 0x835000
	052 Move X0, [X0+1424]
	053 Call 0x1C17CF4
	054 Move X0, 0x835000
	055 Move X0, [X0+1432]
	056 Call 0x1C17CF4
	057 Move W8, 1
	058 Move [X21+2169], W8
	059 Move X0, X19
	060 Call ProBuilderMesh.get_mesh, X0
	061 Move X8, [X20]
	062 Move X20, X0
	063 Move W9, [X8+224]
	064 Compare W9, 0
	065 JumpIfNotEqual {68}
	066 Move X0, X8
	067 Call 0x1C17DFC
	068 Move X0, X20
	069 Move X1, X31
	070 Move X2, X31
	071 Call Object.op_Equality, X0, X1
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {108}
	076 Move X8, 0x7E1000
	077 Move X8, [X8+1792]
	078 Move X20, 0x7DA000
	079 Move X23, 0x835000
	080 Move X0, [X8]
	081 Move X20, [X20+1880]
	082 Move X23, [X23+1432]
	083 Call 0x1C17F10
	084 Move X1, X31
	085 Move X21, X0
	086 Call Mesh..ctor, X0
	087 Move X0, X19
	088 Move X1, X31
	089 Call Object.GetInstanceID, X0
	090 Move X8, [X20]
	091 Move [X31+12], W0
	092 Add X1, X31, 12
	093 Move X0, X8
	094 Call 0x1C17E04
	095 Move X8, [X23]
	096 Move X1, X0
	097 Move X2, X31
	098 Move X0, X8
	099 Call String.Format, X0, X1
	100 Compare X21, 0
	101 JumpIfEqual {410}
	102 Move X1, X0
	103 Move X0, X21
	104 Move X2, X31
	105 Call Object.set_name, X0, X1
	106 Move W20, W31
	107 Move [X19+176], X21
	108 Move X0, X19
	109 Call ProBuilderMesh.get_mesh, X0
	110 Compare X0, 0
	111 JumpIfEqual {410}
	112 Move X1, X31
	113 Call Mesh.get_vertexCount, X0
	114 Move X8, [X19+88]
	115 Compare X8, 0
	116 JumpIfEqual {118}
	117 Move W8, [X8+24]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move W20, W31
	120 Move X0, X19
	121 Call MeshUtility.IsUsedInParticleSystem, X0
	122 Move W20, W0
	123 Move X0, X19
	124 Call ProBuilderMesh.get_mesh, X0
	125 Compare X0, 0
	126 JumpIfEqual {410}
	127 Move X1, X31
	128 Call Mesh.Clear, X0
	129 Move X0, X19
	130 Call ProBuilderMesh.get_mesh, X0
	131 Move X8, [X19+88]
	132 Compare X8, 0
	133 JumpIfEqual {135}
	134 Move W8, [X8+24]
	135 Compare X0, 0
	136 JumpIfEqual {410}
	137 NotImplemented "Instruction CMP not yet implemented."
	138 NotImplemented "Instruction CSET not yet implemented."
	139 Move X2, X31
	140 Call Mesh.set_indexFormat, X0, X1
	141 Move X0, X19
	142 Call ProBuilderMesh.get_mesh, X0
	143 Compare X0, 0
	144 JumpIfEqual {410}
	145 Move X1, [X19+88]
	146 Move X2, X31
	147 Call Mesh.set_vertices, X0, X1
	148 Move X0, X19
	149 Call ProBuilderMesh.get_mesh, X0
	150 Compare X0, 0
	151 JumpIfEqual {410}
	152 Move X24, 0x834000
	153 Move X24, [X24+3888]
	154 Move X1, X31
	155 Move X2, X31
	156 Call Mesh.set_uv2, X0, X1
	157 Move W8, [X19+32]
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Move X0, X19
	160 Move X1, X31
	161 Call Submesh.MapFaceMaterialsToSubmeshIndex, X0
	162 Move W8, [X19+32]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move X8, 0x835000
	165 Move X8, [X8+1424]
	166 Move X0, [X8]
	167 Move W8, [X0+224]
	168 Compare W8, 0
	169 JumpIfNotEqual {171}
	170 Call 0x1C17DFC
	171 Move X0, X19
	172 Move X1, X31
	173 Call UvUnwrapping.UpgradeAutoUVScaleOffset, X0
	174 Move W8, 2
	175 Move X0, X19
	176 Move [X19+32], W8
	177 Call ProBuilderMesh.get_renderer, X0
	178 Move X8, [X24]
	179 Move X21, X0
	180 Move W9, [X8+224]
	181 Compare W9, 0
	182 JumpIfNotEqual {185}
	183 Move X0, X8
	184 Call 0x1C17DFC
	185 Move X0, X21
	186 Move X1, X31
	187 Call MaterialUtility.GetMaterialCount, X0
	188 Move X8, [X19+40]
	189 Move W21, W0
	190 Move W1, W21
	191 Move W2, W22
	192 Move X0, X8
	193 Move X3, X31
	194 Call Submesh.GetSubmeshes, X0, X1, X2
	195 Move X22, X0
	196 Move X0, X19
	197 Call ProBuilderMesh.get_mesh, X0
	198 Compare X22, 0
	199 JumpIfEqual {410}
	200 Compare X0, 0
	201 JumpIfEqual {410}
	202 Move W1, [X22+24]
	203 Move X2, X31
	204 Call Mesh.set_subMeshCount, X0, X1
	205 Move X0, X19
	206 Call ProBuilderMesh.get_mesh, X0
	207 Compare X0, 0
	208 JumpIfEqual {410}
	209 Move X1, X31
	210 Call Mesh.get_subMeshCount, X0
	211 Compare W0, 0
	212 JumpIfEqual {393}
	213 Move X0, X19
	214 Call ProBuilderMesh.get_mesh, X0
	215 Compare X0, 0
	216 JumpIfEqual {410}
	217 Move X26, 0x835000
	218 Move X26, [X26+1408]
	219 Move W23, W31
	220 Move W28, W31
	221 Move W25, W31
	222 Move TEMP, 0
	223 Not TEMP
	224 Move W27, TEMP
	225 Move X1, X31
	226 Call Mesh.get_subMeshCount, X0
	227 NotImplemented "Instruction CMP not yet implemented."
	228 Move W8, [X22+24]
	229 NotImplemented "Instruction CMP not yet implemented."
	230 Add X29, X22, W25
	231 Add X29, X29, 32
	232 Move X9, [X29]
	233 Compare X9, 0
	234 JumpIfEqual {410}
	235 Move X10, [X9+16]
	236 Compare X10, 0
	237 JumpIfEqual {410}
	238 Move X10, [X10+24]
	239 Compare X10, 0
	240 JumpIfEqual {258}
	241 Move X0, X19
	242 Move [X9+28], W23
	243 Call ProBuilderMesh.get_mesh, X0
	244 Move W8, [X22+24]
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Move X8, [X29]
	247 Compare X8, 0
	248 JumpIfEqual {410}
	249 Compare X0, 0
	250 JumpIfEqual {410}
	251 Move W2, [X8+24]
	252 Move W3, [X8+28]
	253 Move X1, [X8+16]
	254 Move W4, W31
	255 Move X5, X31
	256 Call Mesh.SetIndices, X0, X1, X2, X3, X4
	257 Add W23, W23, 1
	258 Move TEMP, X28
	259 And TEMP, TEMP, 1
	260 Compare TEMP, 1
	261 JumpIfEqual {292}
	262 Move X0, [X24]
	263 Move W8, [X0+224]
	264 Compare W8, 0
	265 JumpIfNotEqual {268}
	266 Call 0x1C17DFC
	267 Move X0, [X24]
	268 Move X8, [X0+184]
	269 Move X8, [X8]
	270 Compare X8, 0
	271 JumpIfEqual {410}
	272 Move W2, [X8+24]
	273 Move W9, [X8+28]
	274 Add W9, W9, 1
	275 NotImplemented "Instruction CMP not yet implemented."
	276 Move [X8+24], W31
	277 Move [X8+28], W9
	278 Move X0, [X8+16]
	279 Move W1, W31
	280 Move X3, X31
	281 Call Array.Clear, X0, X1, X2
	282 Move X0, X19
	283 Call ProBuilderMesh.get_renderer, X0
	284 Compare X0, 0
	285 JumpIfEqual {410}
	286 Move X8, [X24]
	287 Move X2, X31
	288 Move X8, [X8+184]
	289 Move X1, [X8]
	290 Call Renderer.GetSharedMaterials, X0, X1
	291 Move W8, [X22+24]
	292 NotImplemented "Instruction CMP not yet implemented."
	293 Move X8, [X29]
	294 Compare X8, 0
	295 JumpIfEqual {410}
	296 Move [X8+28], W27
	297 Move X0, [X24]
	298 Move W8, [X0+224]
	299 Compare W8, 0
	300 JumpIfNotEqual {303}
	301 Call 0x1C17DFC
	302 Move X0, [X24]
	303 Move X8, [X0+184]
	304 Move X0, [X8]
	305 Compare X0, 0
	306 JumpIfEqual {410}
	307 Move X2, [X26]
	308 Move W1, W23
	309 Call List`1<Object>.RemoveAt, X0, X1
	310 Move X8, [X19+40]
	311 Compare X8, 0
	312 JumpIfEqual {410}
	313 Move W9, [X8+24]
	314 NotImplemented "Instruction CMP not yet implemented."
	315 Move W10, W31
	316 NotImplemented "Instruction CMP not yet implemented."
	317 Add X11, X8, W10
	318 Move X11, [X11+32]
	319 Compare X11, 0
	320 JumpIfEqual {410}
	321 Move W12, [X11+72]
	322 NotImplemented "Instruction CMP not yet implemented."
	323 Subtract W12, W12, 1
	324 Move [X11+72], W12
	325 Add W10, W10, 1
	326 NotImplemented "Instruction CMP not yet implemented."
	327 Move W28, 1
	328 Move X0, X19
	329 Add W25, W25, 1
	330 Call ProBuilderMesh.get_mesh, X0
	331 Compare X0, 0
	332 JumpIfNotEqual {225}
	333 Move X0, X19
	334 Call ProBuilderMesh.get_mesh, X0
	335 Compare X0, 0
	336 JumpIfEqual {410}
	337 Move X1, X31
	338 Call Mesh.get_subMeshCount, X0
	339 NotImplemented "Instruction CMP not yet implemented."
	340 Move X0, X19
	341 Call ProBuilderMesh.get_mesh, X0
	342 Compare X0, 0
	343 JumpIfEqual {410}
	344 Move X1, X31
	345 Call Mesh.get_subMeshCount, X0
	346 Move X8, [X24]
	347 Move W22, W0
	348 Move W9, [X8+224]
	349 Compare W9, 0
	350 JumpIfNotEqual {354}
	351 Move X0, X8
	352 Call 0x1C17DFC
	353 Move X8, [X24]
	354 Move X8, [X8+184]
	355 Move X0, [X8]
	356 Compare X0, 0
	357 JumpIfEqual {410}
	358 Move X9, 0x835000
	359 Move W8, [X0+24]
	360 Move X9, [X9+1416]
	361 Subtract W2, W21, W22
	362 Subtract W1, W8, W2
	363 Move X3, [X9]
	364 Call List`1<Object>.RemoveRange, X0, X1, X2
	365 Move TEMP, X28
	366 And TEMP, TEMP, 1
	367 Compare TEMP, 1
	368 JumpIfNotEqual {393}
	369 Move X0, X19
	370 Call ProBuilderMesh.get_renderer, X0
	371 Move X8, [X24]
	372 Move X21, X0
	373 Move W9, [X8+224]
	374 Compare W9, 0
	375 JumpIfNotEqual {379}
	376 Move X0, X8
	377 Call 0x1C17DFC
	378 Move X8, [X24]
	379 Move X8, [X8+184]
	380 Move X0, [X8]
	381 Compare X0, 0
	382 JumpIfEqual {410}
	383 Move X8, 0x7E1000
	384 Move X8, [X8+2696]
	385 Move X1, [X8]
	386 Call List`1<Object>.ToArray, X0
	387 Compare X21, 0
	388 JumpIfEqual {410}
	389 Move X1, X0
	390 Move X0, X21
	391 Move X2, X31
	392 Call Renderer.set_sharedMaterials, X0, X1
	393 And W1, W20, 1
	394 Move X0, X19
	395 Call ProBuilderMesh.FinalizeToMesh, X0, X1
	396 Move X20, [X31+96]
	397 Move X19, [X31+104]
	398 Move X22, [X31+80]
	399 Move X21, [X31+88]
	400 Move X24, [X31+64]
	401 Move X23, [X31+72]
	402 Move X26, [X31+48]
	403 Move X25, [X31+56]
	404 Move X28, [X31+32]
	405 Move X27, [X31+40]
	406 Move X29, [X31+16]
	407 Move X30, [X31+24]
	408 Add X31, X31, 112
	409 Return 
	410 Call 0x1C17F20
	411 Call 0x1C17F28

Method: System.Void FinalizeToMesh(System.Boolean usedInParticleSystem)

Disassembly:
	0x0391AEA4 LDRSW X9, [X10]
	0x0391AEA8 ADD X8, X8, X9, 0x4, LSL
	0x0391AEAC ADD X0, X8, 0x138
	0x0391AEB0 LDP X8, X1, [X0]
	0x0391AEB4 MOV X0, X19
	0x0391AEB8 BLR X8
	0x0391AEBC LDR X8, [X20 + 0x88]
	0x0391AEC0 CBZ X8, 0x391AF64
	0x0391AEC4 LDR W9, [X8 + 0x18]
	0x0391AEC8 CMP W0, W9
	0x0391AECC B.CS 0x391AF68
	0x0391AED0 SXTW X9, W0
	0x0391AED4 ADD X8, X8, X9, 0x4, LSL
	0x0391AED8 STP S11, S10, [X8 + 0x20]
	0x0391AEDC STP S9, S8, [X8 + 0x28]
	0x0391AEE0 B 0x391AE08
	0x0391AEE4 MOV X20, X31
	0x0391AEE8 CBZ X19, 0x391AF44

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 Move X19, X0
	006 Call ProBuilderMesh.EnsureMeshFilterIsAssigned, X0
	007 Move TEMP, X20
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {13}
	011 Move X0, X19
	012 Call MeshUtility.RestoreParticleSystem, X0
	013 NotImplemented "Instruction LDRH not yet implemented."
	014 Move W9, 1
	015 Add W10, W8, 1
	016 And W31, W10, 0x10000
	017 NotImplemented "Instruction CSINC not yet implemented."
	018 NotImplemented "Instruction STRH not yet implemented."
	019 NotImplemented "Instruction STRH not yet implemented."
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return 

Method: System.Void MakeUnique()

Disassembly:
	0x0391AEEC LDR X8, [X19]
	0x0391AEF0 LDR X1, [X21]
	0x0391AEF4 LDRH W9, [X8 + 0x12E]
	0x0391AEF8 CBZ X9, 0x391AF1C
	0x0391AEFC LDR X10, [X8 + 0xB0]
	0x0391AF00 ADD X10, X10, 0x8
	0x0391AF04 LDUR X11, [X10 - 0x8]
	0x0391AF08 CMP X11, X1
	0x0391AF0C B.EQ 0x391AF2C
	0x0391AF10 SUBS X9, X9, 0x1
	0x0391AF14 ADD X10, X10, 0x10
	0x0391AF18 B.NE 0x391AF04
	0x0391AF1C MOV X0, X19
	0x0391AF20 MOV W2, W31
	0x0391AF24 BL 0x1C5C788
	0x0391AF28 B 0x391AF38
	0x0391AF2C LDRSW X9, [X10]
	0x0391AF30 ADD X8, X8, X9, 0x4, LSL
	0x0391AF34 ADD X0, X8, 0x138
	0x0391AF38 LDP X8, X1, [X0]
	0x0391AF3C MOV X0, X19
	0x0391AF40 BLR X8
	0x0391AF44 CBNZ X20, 0x391AFBC
	0x0391AF48 LDP X20, X19, [X31 + 0x50]
	0x0391AF4C LDP X22, X21, [X31 + 0x40]
	0x0391AF50 LDP X30, X23, [X31 + 0x30]
	0x0391AF54 LDP D9, D8, [X31 + 0x20]
	0x0391AF58 LDP D11, D10, [X31 + 0x10]
	0x0391AF5C ADD X31, X31, 0x60
	0x0391AF60 RET
	0x0391AF64 BL 0x1C16F20
	0x0391AF68 BL 0x1C16F28
	0x0391AF6C ADRP X0, 0x7DE000
	0x0391AF70 LDR X0, [X0 + 0x528]
	0x0391AF74 BL 0x1C16D08
	0x0391AF78 BL 0x1C16F10
	0x0391AF7C MOV X19, X0
	0x0391AF80 ADRP X0, 0x834000
	0x0391AF84 LDR X0, [X0 + 0x600]
	0x0391AF88 BL 0x1C16D08
	0x0391AF8C MOV X1, X0
	0x0391AF90 MOV X0, X19
	0x0391AF94 MOV X2, X31
	0x0391AF98 BL 0x330E100
	0x0391AF9C ADRP X0, 0x834000
	0x0391AFA0 LDR X0, [X0 + 0x608]
	0x0391AFA4 BL 0x1C16D08
	0x0391AFA8 MOV X1, X0
	0x0391AFAC MOV X0, X19
	0x0391AFB0 BL 0x1C16DEC
	0x0391AFB4 BL 0x1C16F20
	0x0391AFB8 BL 0x1C16F20
	0x0391AFBC MOV X0, X20
	0x0391AFC0 BL 0x1C16F18
	0x0391AFC4 B 0x391AFD0
	0x0391AFC8 B 0x391AFD0
	0x0391AFCC B 0x391AFD0
	0x0391AFD0 CMP W1, 0x1
	0x0391AFD4 B.NE 0x391AFE8
	0x0391AFD8 BL 0x3EB1AD0
	0x0391AFDC LDR X20, [X0]
	0x0391AFE0 BL 0x3EB1AE0
	0x0391AFE4 B 0x391AEE8
	0x0391AFE8 STR X0, [X31 + 0x8]
	0x0391AFEC MOV X20, X31
	0x0391AFF0 B 0x391AFF8
	0x0391AFF4 STR X0, [X31 + 0x8]
	0x0391AFF8 CBZ X19, 0x391B054
	0x0391AFFC LDR X8, [X19]
	0x0391B000 LDR X1, [X21]
	0x0391B004 LDRH W9, [X8 + 0x12E]
	0x0391B008 CBZ X9, 0x391B02C
	0x0391B00C LDR X10, [X8 + 0xB0]
	0x0391B010 ADD X10, X10, 0x8
	0x0391B014 LDUR X11, [X10 - 0x8]
	0x0391B018 CMP X11, X1
	0x0391B01C B.EQ 0x391B03C
	0x0391B020 SUBS X9, X9, 0x1
	0x0391B024 ADD X10, X10, 0x10
	0x0391B028 B.NE 0x391B014
	0x0391B02C MOV X0, X19
	0x0391B030 MOV W2, W31
	0x0391B034 BL 0x1C5C788
	0x0391B038 B 0x391B048
	0x0391B03C LDRSW X9, [X10]
	0x0391B040 ADD X8, X8, X9, 0x4, LSL
	0x0391B044 ADD X0, X8, 0x138
	0x0391B048 LDP X8, X1, [X0]
	0x0391B04C MOV X0, X19
	0x0391B050 BLR X8
	0x0391B054 CBNZ X20, 0x391B060
	0x0391B058 LDR X0, [X31 + 0x8]
	0x0391B05C BL 0x1D2C690
	0x0391B060 MOV X0, X20
	0x0391B064 BL 0x1C16F18
	0x0391B068 BL 0x1990590
	0x0391B06C SUB X31, X31, 0x70
	0x0391B070 STP X29, X30, [X31 + 0x10]
	0x0391B074 STP X28, X27, [X31 + 0x20]
	0x0391B078 STP X26, X25, [X31 + 0x30]
	0x0391B07C STP X24, X23, [X31 + 0x40]
	0x0391B080 STP X22, X21, [X31 + 0x50]
	0x0391B084 STP X20, X19, [X31 + 0x60]
	0x0391B088 ADRP X19, 0xAC6000
	0x0391B08C LDRB W8, [X19 + 0x883]
	0x0391B090 MOV X22, X2
	0x0391B094 MOV X20, X1
	0x0391B098 MOV X27, X0
	0x0391B09C TBNZ X8, 0x0, 0x391B108
	0x0391B0A0 ADRP X0, 0x833000
	0x0391B0A4 LDR X0, [X0 + 0x610]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xAC8000
	007 Move X21, 0x7DA000
	008 Move W8, [X20+2170]
	009 Move X21, [X21+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0x7DA000
	016 Move X0, [X0+1880]
	017 Call 0x1C17CF4
	018 Move X0, 0x7E1000
	019 Move X0, [X0+1792]
	020 Call 0x1C17CF4
	021 Move X0, 0x7DB000
	022 Move X0, [X0+3640]
	023 Call 0x1C17CF4
	024 Move X0, 0x7DA000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0x835000
	028 Move X0, [X0+1432]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+2170], W8
	032 Move X0, X19
	033 Call ProBuilderMesh.get_mesh, X0
	034 Move X8, [X21]
	035 Move X20, X0
	036 Move W9, [X8+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Move X0, X20
	042 Move X1, X31
	043 Move X2, X31
	044 Call Object.op_Inequality, X0, X1
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {64}
	049 Move X22, 0x7DB000
	050 Move X22, [X22+3640]
	051 Move X0, X19
	052 Call ProBuilderMesh.get_mesh, X0
	053 Move X8, [X21]
	054 Move X20, X0
	055 Move W9, [X8+224]
	056 Compare W9, 0
	057 JumpIfNotEqual {60}
	058 Move X0, X8
	059 Call 0x1C17DFC
	060 Move X1, [X22]
	061 Move X0, X20
	062 Call 0x222E35C, X0
	063 Move X20, X0
	064 Move X8, 0x7E1000
	065 Move X8, [X8+1792]
	066 Move X21, 0x7DA000
	067 Move X22, 0x835000
	068 Move X0, [X8]
	069 Move X21, [X21+1880]
	070 Move X22, [X22+1432]
	071 Call 0x1C17F10
	072 Move X1, X31
	073 Move X20, X0
	074 Call Mesh..ctor, X0
	075 Move X0, X19
	076 Move X1, X31
	077 Call Object.GetInstanceID, X0
	078 Move X8, [X21]
	079 Move [X31+12], W0
	080 Add X1, X31, 12
	081 Move X0, X8
	082 Call 0x1C17E04
	083 Move X8, [X22]
	084 Move X1, X0
	085 Move X2, X31
	086 Move X0, X8
	087 Call String.Format, X0, X1
	088 Compare X20, 0
	089 JumpIfEqual {123}
	090 Move X1, X0
	091 Move X0, X20
	092 Move X2, X31
	093 Call Object.set_name, X0, X1
	094 Compare X19, 0
	095 JumpIfEqual {123}
	096 Move X0, X19
	097 Move [X19+176], X20
	098 Call ProBuilderMesh.get_meshSyncState, X0
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move X0, X19
	101 Call ProBuilderMesh.get_filter, X0
	102 Move X20, X0
	103 Move X0, X19
	104 Call ProBuilderMesh.get_mesh, X0
	105 Compare X20, 0
	106 JumpIfEqual {123}
	107 Move X1, X0
	108 Move X0, X20
	109 Move X2, X31
	110 Call MeshFilter.set_mesh, X0, X1
	111 Move X0, X19
	112 Move W1, W31
	113 Call ProBuilderMesh.ToMesh, X0, X1
	114 Move W1, 31
	115 Move X0, X19
	116 Call ProBuilderMesh.Refresh, X0, X1
	117 Move X20, [X31+32]
	118 Move X19, [X31+40]
	119 Move X22, [X31+16]
	120 Move X21, [X31+24]
	121 Move X30, [X31+48]
	122 Return 
	123 Call 0x1C17F20

Method: System.Void CopyFrom(UnityEngine.ProBuilder.ProBuilderMesh other)

Disassembly:
	0x0391B0A8 BL 0x1C16CF4
	0x0391B0AC ADRP X0, 0x7DA000
	0x0391B0B0 LDR X0, [X0 + 0x9B8]
	0x0391B0B4 BL 0x1C16CF4
	0x0391B0B8 ADRP X0, 0x7D8000
	0x0391B0BC LDR X0, [X0 + 0xE00]
	0x0391B0C0 BL 0x1C16CF4
	0x0391B0C4 ADRP X0, 0x832000
	0x0391B0C8 LDR X0, [X0 + 0xDB0]
	0x0391B0CC BL 0x1C16CF4
	0x0391B0D0 ADRP X0, 0x832000
	0x0391B0D4 LDR X0, [X0 + 0xDB8]
	0x0391B0D8 BL 0x1C16CF4
	0x0391B0DC ADRP X0, 0x7D8000
	0x0391B0E0 LDR X0, [X0 + 0xE18]
	0x0391B0E4 BL 0x1C16CF4
	0x0391B0E8 ADRP X0, 0x7DF000
	0x0391B0EC LDR X0, [X0 + 0x7A0]
	0x0391B0F0 BL 0x1C16CF4
	0x0391B0F4 ADRP X0, 0x7D8000
	0x0391B0F8 LDR X0, [X0 + 0x598]
	0x0391B0FC BL 0x1C16CF4
	0x0391B100 MOVZ W8, 0x1
	0x0391B104 STRB W8, [X19 + 0x883]
	0x0391B108 MOV X0, X27
	0x0391B10C BL 0x3912AD8
	0x0391B110 CBZ X0, 0x391B508
	0x0391B114 MOV X1, X31
	0x0391B118 BL 0x3C1351C
	0x0391B11C CBZ X0, 0x391B508
	0x0391B120 LDR X25, [X0 + 0x18]
	0x0391B124 MOV X23, X0
	0x0391B128 SUBS W24, W25, 0x1
	0x0391B12C B.LT 0x391B1B0
	0x0391B130 AND X8, X25, 0x0
	0x0391B134 STR X20, [X31 + 0x8]
	0x0391B138 CBZ X8, 0x391B1A0
	0x0391B13C ADRP X28, 0x7D8000
	0x0391B140 LDR X28, [X28 + 0x598]
	0x0391B144 MOV X20, X27
	0x0391B148 MOV X27, X31
	0x0391B14C SXTW X29, W8
	0x0391B150 ADD X19, X23, 0x20
	0x0391B154 MOVN W21, 0x0
	0x0391B158 LDR X0, [X28]
	0x0391B15C LDR X26, [X19, X27, LSL #3]
	0x0391B160 LDR W8, [X0 + 0xE0]
	0x0391B164 CBNZ W8, 0x391B16C
	0x0391B168 BL 0x1C16DFC
	0x0391B16C MOV X0, X26
	0x0391B170 MOV X1, X22
	0x0391B174 MOV X2, X31
	0x0391B178 BL 0x3C3883C
	0x0391B17C ANDS W31, W0, 0x1
	0x0391B180 CSEL W21, W27, W21, NE
	0x0391B184 ADD X27, X27, 0x1
	0x0391B188 CMP X27, X29
	0x0391B18C B.GE 0x391B1A4
	0x0391B190 TBZ X21, 0x1F, 0x391B1A4
	0x0391B194 LDR W8, [X23 + 0x18]
	0x0391B198 CMP X27, X8
	0x0391B19C B.CC 0x391B158
	0x0391B1A0 BL 0x1C16F28
	0x0391B1A4 MOV X27, X20
	0x0391B1A8 LDR X20, [X31 + 0x8]
	0x0391B1AC TBZ X21, 0x1F, 0x391B310
	0x0391B1B0 ADRP X8, 0x7DA000
	0x0391B1B4 LDR X8, [X8 + 0x9B8]
	0x0391B1B8 MOV W1, W25
	0x0391B1BC LDR X0, [X8]
	0x0391B1C0 BL 0x1C16D6C
	0x0391B1C4 LDR X25, [X27 + 0x28]
	0x0391B1C8 CBZ X25, 0x391B508
	0x0391B1CC LDR W8, [X25 + 0x18]
	0x0391B1D0 MOV X21, X0
	0x0391B1D4 CMP W8, 0x1
	0x0391B1D8 B.LT 0x391B234
	0x0391B1DC MOV W19, W31
	0x0391B1E0 MOVZ W26, 0x1
	0x0391B1E4 CMP W19, W8
	0x0391B1E8 B.CS 0x391B1A0
	0x0391B1EC ADD X8, X25, W19, 0x3, SXTW
	0x0391B1F0 LDR X8, [X8 + 0x20]
	0x0391B1F4 CBZ X8, 0x391B508
	0x0391B1F8 LDR W0, [X8 + 0x48]
	0x0391B1FC MOV W1, W31
	0x0391B200 MOV W2, W24
	0x0391B204 MOV X3, X31
	0x0391B208 BL 0x3907A24
	0x0391B20C CBZ X21, 0x391B508
	0x0391B210 LDR W8, [X21 + 0x18]
	0x0391B214 CMP W0, W8
	0x0391B218 B.CS 0x391B1A0
	0x0391B21C ADD X8, X21, W0, SXTW
	0x0391B220 STRB W26, [X8 + 0x20]
	0x0391B224 LDR W8, [X25 + 0x18]
	0x0391B228 ADD W19, W19, 0x1
	0x0391B22C CMP W19, W8
	0x0391B230 B.LT 0x391B1E4
	0x0391B234 ADRP X8, 0x833000
	0x0391B238 LDR X8, [X8 + 0x610]
	0x0391B23C MOV X0, X21
	0x0391B240 MOV W1, W31
	0x0391B244 LDR X2, [X8]
	0x0391B248 BL 0x22E7380
	0x0391B24C TBNZ X0, 0x1F, 0x391B290
	0x0391B250 MOV W21, W0
	0x0391B254 CBZ X22, 0x391B26C
	0x0391B258 LDR X8, [X23]
	0x0391B25C MOV X0, X22
	0x0391B260 LDR X1, [X8 + 0x40]
	0x0391B264 BL 0x1C16E00
	0x0391B268 CBZ X0, 0x391B518
	0x0391B26C LDR W8, [X23 + 0x18]
	0x0391B270 CMP W21, W8
	0x0391B274 B.CS 0x391B1A0
	0x0391B278 ADD X8, X23, W21, 0x3, UXTW
	0x0391B27C MOV X0, X27
	0x0391B280 STR X22, [X8 + 0x20]
	0x0391B284 BL 0x3912AD8
	0x0391B288 CBNZ X0, 0x391B304
	0x0391B28C B 0x391B508
	0x0391B290 ADRP X8, 0x7DF000
	0x0391B294 LDR X21, [X23 + 0x18]
	0x0391B298 LDR X8, [X8 + 0x7A0]
	0x0391B29C ADD W1, W21, 0x1
	0x0391B2A0 LDR X0, [X8]
	0x0391B2A4 BL 0x1C16D6C
	0x0391B2A8 MOV X24, X0
	0x0391B2AC MOV X0, X23
	0x0391B2B0 MOV X1, X24
	0x0391B2B4 MOV W2, W21
	0x0391B2B8 MOV X3, X31
	0x0391B2BC BL 0x33A0C7C
	0x0391B2C0 CBZ X24, 0x391B508
	0x0391B2C4 CBZ X22, 0x391B2DC
	0x0391B2C8 LDR X8, [X24]
	0x0391B2CC MOV X0, X22
	0x0391B2D0 LDR X1, [X8 + 0x40]
	0x0391B2D4 BL 0x1C16E00
	0x0391B2D8 CBZ X0, 0x391B518
	0x0391B2DC LDR W8, [X24 + 0x18]
	0x0391B2E0 CMP W21, W8
	0x0391B2E4 B.CS 0x391B1A0
	0x0391B2E8 UBFM X8, X21, 0x20, 0x1F
	0x0391B2EC ADD X8, X24, X8, 0x1D, ASR
	0x0391B2F0 MOV X0, X27
	0x0391B2F4 STR X22, [X8 + 0x20]
	0x0391B2F8 BL 0x3912AD8
	0x0391B2FC CBZ X0, 0x391B508
	0x0391B300 MOV X23, X24
	0x0391B304 MOV X1, X23
	0x0391B308 MOV X2, X31
	0x0391B30C BL 0x3C13558
	0x0391B310 CBZ X20, 0x391B508
	0x0391B314 ADRP X10, 0x832000
	0x0391B318 LDR X8, [X20]
	0x0391B31C LDR X10, [X10 + 0xDB0]
	0x0391B320 LDRH W9, [X8 + 0x12E]
	0x0391B324 LDR X1, [X10]
	0x0391B328 CBZ X9, 0x391B34C
	0x0391B32C LDR X10, [X8 + 0xB0]
	0x0391B330 ADD X10, X10, 0x8
	0x0391B334 LDUR X11, [X10 - 0x8]
	0x0391B338 CMP X11, X1
	0x0391B33C B.EQ 0x391B35C
	0x0391B340 SUBS X9, X9, 0x1
	0x0391B344 ADD X10, X10, 0x10
	0x0391B348 B.NE 0x391B334
	0x0391B34C MOV X0, X20
	0x0391B350 MOV W2, W31
	0x0391B354 BL 0x1C5C788
	0x0391B358 B 0x391B368
	0x0391B35C LDRSW X9, [X10]
	0x0391B360 ADD X8, X8, X9, 0x4, LSL
	0x0391B364 ADD X0, X8, 0x138
	0x0391B368 LDP X8, X1, [X0]
	0x0391B36C ADRP X23, 0x7D8000
	0x0391B370 LDR X23, [X23 + 0xE00]
	0x0391B374 MOV X0, X20
	0x0391B378 BLR X8
	0x0391B37C MOV X20, X0
	0x0391B380 CBZ X0, 0x391B50C

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0xAC7000
	011 Move X22, 0x7D9000
	012 Move W8, [X21+2171]
	013 Move X22, [X22+1432]
	014 Move X20, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {49}
	020 Move X0, 0x834000
	021 Move X0, [X0+1440]
	022 Call 0x1C17CF4
	023 Move X0, 0x834000
	024 Move X0, [X0+992]
	025 Call 0x1C17CF4
	026 Move X0, 0x834000
	027 Move X0, [X0+1448]
	028 Call 0x1C17CF4
	029 Move X0, 0x834000
	030 Move X0, [X0+16]
	031 Call 0x1C17CF4
	032 Move X0, 0x834000
	033 Move X0, [X0+8]
	034 Call 0x1C17CF4
	035 Move X0, 0x7D9000
	036 Move X0, [X0+1432]
	037 Call 0x1C17CF4
	038 Move X0, 0x834000
	039 Move X0, [X0+1456]
	040 Call 0x1C17CF4
	041 Move X0, 0x834000
	042 Move X0, [X0+1280]
	043 Call 0x1C17CF4
	044 Move X0, 0x834000
	045 Move X0, [X0+1464]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X21+2171], W8
	049 Move X0, [X22]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X20
	055 Move X1, X31
	056 Move X2, X31
	057 Call Object.op_Equality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {185}
	062 Move X0, X19
	063 Call ProBuilderMesh.Clear, X0
	064 Compare X20, 0
	065 JumpIfEqual {184}
	066 Move X24, 0x834000
	067 Move X24, [X24+1280]
	068 Move X0, X20
	069 Call ProBuilderMesh.get_positions, X0
	070 Move X1, X0
	071 Move X0, X19
	072 Call ProBuilderMesh.set_positions, X0, X1
	073 Move X1, [X20+48]
	074 Move X0, X19
	075 Call ProBuilderMesh.set_sharedVertices, X0, X1
	076 Move X0, X20
	077 Call ProBuilderMesh.get_sharedTextureLookup, X0
	078 Move X1, X0
	079 Move X0, X19
	080 Call ProBuilderMesh.SetSharedTextures, X0, X1
	081 Move X0, X20
	082 Call ProBuilderMesh.get_faces, X0
	083 Move X8, [X24]
	084 Move X21, X0
	085 Move W9, [X8+224]
	086 Compare W9, 0
	087 JumpIfNotEqual {91}
	088 Move X0, X8
	089 Call 0x1C17DFC
	090 Move X8, [X24]
	091 Move X9, [X8+184]
	092 Move X26, 0x834000
	093 Move X25, 0x834000
	094 Move X22, [X9+40]
	095 Move X26, [X26+1440]
	096 Move X25, [X25+992]
	097 Compare X22, 0
	098 JumpIfNotEqual {121}
	099 Move W9, [X8+224]
	100 Compare W9, 0
	101 JumpIfNotEqual {105}
	102 Move X0, X8
	103 Call 0x1C17DFC
	104 Move X8, [X24]
	105 Move X9, 0x834000
	106 Move X8, [X8+184]
	107 Move X9, [X9+1448]
	108 Move X23, [X8]
	109 Move X0, [X9]
	110 Call 0x1C17F10
	111 Move X8, 0x834000
	112 Move X8, [X8+1456]
	113 Move X1, X23
	114 Move X3, X31
	115 Move X22, X0
	116 Move X2, [X8]
	117 Call Func`2<Object, Object>..ctor, X0, X1, X2
	118 Move X8, [X24]
	119 Move X8, [X8+184]
	120 Move [X8+40], X22
	121 Move X2, [X26]
	122 Move X0, X21
	123 Move X1, X22
	124 Call Enumerable.Select, X0, X1
	125 Move X1, [X25]
	126 Call Enumerable.ToArray, X0
	127 Compare X19, 0
	128 JumpIfEqual {184}
	129 Move X8, 0x834000
	130 Move X8, [X8+8]
	131 Move [X19+40], X0
	132 Move X21, 0x834000
	133 Move X23, 0x834000
	134 Move X0, [X8]
	135 Move X21, [X21+16]
	136 Move X23, [X23+1464]
	137 Call 0x1C17F10
	138 Move X1, [X21]
	139 Move X21, X0
	140 Call List`1<Vector4>..ctor, X0
	141 Move W22, W31
	142 Move X0, X20
	143 Move W1, W22
	144 Move X2, X21
	145 Call ProBuilderMesh.GetUVs, X0, X1, X2
	146 Move X0, X19
	147 Move W1, W22
	148 Move X2, X21
	149 Call ProBuilderMesh.SetUVs, X0, X1, X2
	150 Add W22, W22, 1
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move X0, X20
	153 Call ProBuilderMesh.get_tangents, X0
	154 Move X1, X0
	155 Move X0, X19
	156 Call ProBuilderMesh.set_tangents, X0, X1
	157 Move X0, X20
	158 Call ProBuilderMesh.get_colors, X0
	159 Move X1, X0
	160 Move X0, X19
	161 Call ProBuilderMesh.set_colors, X0, X1
	162 Move W8, [X20+144]
	163 Move [X19+144], W8
	164 Move W8, [X20+204]
	165 Move [X19+204], W8
	166 Move X0, [X23]
	167 Move X20, [X20+152]
	168 Call 0x1C17F10
	169 Move X1, X20
	170 Move X2, X31
	171 Move X21, X0
	172 Call UnwrapParameters..ctor, X0, X1
	173 Move [X19+152], X21
	174 Move X20, [X31+64]
	175 Move X19, [X31+72]
	176 Move X22, [X31+48]
	177 Move X21, [X31+56]
	178 Move X24, [X31+32]
	179 Move X23, [X31+40]
	180 Move X26, [X31+16]
	181 Move X25, [X31+24]
	182 Move X30, [X31+80]
	183 Return 
	184 Call 0x1C17F20
	185 Move X0, 0x7DE000
	186 Move X0, [X0+1320]
	187 Call 0x1C17D08
	188 Call 0x1C17F10
	189 Move X19, X0
	190 Move X0, 0x803000
	191 Move X0, [X0+2344]
	192 Call 0x1C17D08
	193 Move X1, X0
	194 Move X0, X19
	195 Move X2, X31
	196 Call ArgumentNullException..ctor, X0, X1
	197 Move X0, 0x834000
	198 Move X0, [X0+1472]
	199 Call 0x1C17D08
	200 Move X1, X0
	201 Move X0, X19
	202 Call 0x1C17DEC

Method: System.Void Refresh(UnityEngine.ProBuilder.RefreshMask mask = 31)

Disassembly:
	0x0391AD94 CBZ X8, 0x391ADA0
	0x0391AD98 LDR W0, [X8 + 0x18]
	0x0391AD9C B 0x391ADA4
	0x0391ADA0 MOV W0, W31
	0x0391ADA4 ADRP X8, 0x834000
	0x0391ADA8 LDR X8, [X8 + 0x480]
	0x0391ADAC FMOV S0, 1
	0x0391ADB0 FMOV S1, 1
	0x0391ADB4 FMOV S2, 1
	0x0391ADB8 LDR X1, [X8]
	0x0391ADBC FMOV S3, 1
	0x0391ADC0 BL 0x217E698
	0x0391ADC4 STR X0, [X20 + 0x88]
	0x0391ADC8 MOV X0, X19
	0x0391ADCC MOV X1, X31
	0x0391ADD0 BL 0x38FFE60
	0x0391ADD4 CBZ X0, 0x391AFB4
	0x0391ADD8 ADRP X8, 0x834000
	0x0391ADDC LDR X8, [X8 + 0x5F8]
	0x0391ADE0 ADRP X21, 0x7D9000
	0x0391ADE4 LDR X1, [X8]
	0x0391ADE8 LDR X21, [X21 + 0xE00]
	0x0391ADEC BL 0x253DE40
	0x0391ADF0 MOV X19, X0
	0x0391ADF4 CBZ X0, 0x391AFB8
	0x0391ADF8 ADRP X22, 0x7D9000
	0x0391ADFC ADRP X23, 0x801000
	0x0391AE00 LDR X22, [X22 + 0xE18]
	0x0391AE04 LDR X23, [X23 + 0x7C0]
	0x0391AE08 LDR X8, [X19]
	0x0391AE0C LDR X1, [X22]
	0x0391AE10 LDRH W9, [X8 + 0x12E]
	0x0391AE14 CBZ X9, 0x391AE38
	0x0391AE18 LDR X10, [X8 + 0xB0]
	0x0391AE1C ADD X10, X10, 0x8
	0x0391AE20 LDUR X11, [X10 - 0x8]
	0x0391AE24 CMP X11, X1
	0x0391AE28 B.EQ 0x391AE48
	0x0391AE2C SUBS X9, X9, 0x1
	0x0391AE30 ADD X10, X10, 0x10
	0x0391AE34 B.NE 0x391AE20
	0x0391AE38 MOV X0, X19
	0x0391AE3C MOV W2, W31
	0x0391AE40 BL 0x1C5C788
	0x0391AE44 B 0x391AE54
	0x0391AE48 LDRSW X9, [X10]
	0x0391AE4C ADD X8, X8, X9, 0x4, LSL
	0x0391AE50 ADD X0, X8, 0x138
	0x0391AE54 LDP X8, X1, [X0]
	0x0391AE58 MOV X0, X19
	0x0391AE5C BLR X8
	0x0391AE60 TBZ X0, 0x0, 0x391AEE4
	0x0391AE64 LDR X8, [X19]
	0x0391AE68 LDR X1, [X23]
	0x0391AE6C LDRH W9, [X8 + 0x12E]
	0x0391AE70 CBZ X9, 0x391AE94
	0x0391AE74 LDR X10, [X8 + 0xB0]
	0x0391AE78 ADD X10, X10, 0x8
	0x0391AE7C LDUR X11, [X10 - 0x8]
	0x0391AE80 CMP X11, X1
	0x0391AE84 B.EQ 0x391AEA4
	0x0391AE88 SUBS X9, X9, 0x1
	0x0391AE8C ADD X10, X10, 0x10
	0x0391AE90 B.NE 0x391AE7C
	0x0391AE94 MOV X0, X19
	0x0391AE98 MOV W2, W31
	0x0391AE9C BL 0x1C5C788
	0x0391AEA0 B 0x391AEB0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xAC8000
	006 Move W8, [X21+2172]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {74}
	013 Move TEMP, X20
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {83}
	017 Move TEMP, X20
	018 And TEMP, TEMP, 2
	019 Compare TEMP, 2
	020 JumpIfEqual {90}
	021 Move TEMP, X20
	022 And TEMP, TEMP, 4
	023 Compare TEMP, 4
	024 JumpIfEqual {96}
	025 Move TEMP, X20
	026 And TEMP, TEMP, 8
	027 Compare TEMP, 8
	028 JumpIfEqual {102}
	029 Move TEMP, X20
	030 And TEMP, TEMP, 16
	031 Compare TEMP, 16
	032 JumpIfNotEqual {35}
	033 Move X0, X19
	034 Call ProBuilderMesh.EnsureMeshColliderIsAssigned, X0
	035 Move W8, 22
	036 And W31, W20, W8
	037 Move X20, 0x7DA000
	038 Move X20, [X20+1432]
	039 Move X0, X19
	040 Call ProBuilderMesh.get_mesh, X0
	041 Move X8, [X20]
	042 Move X20, X0
	043 Move W9, [X8+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {48}
	046 Move X0, X8
	047 Call 0x1C17DFC
	048 Move X0, X20
	049 Move X1, X31
	050 Move X2, X31
	051 Call Object.op_Inequality, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {62}
	056 Move X0, X19
	057 Call ProBuilderMesh.get_mesh, X0
	058 Compare X0, 0
	059 JumpIfEqual {108}
	060 Move X1, X31
	061 Call Mesh.RecalculateBounds, X0
	062 NotImplemented "Instruction LDRH not yet implemented."
	063 Move W9, 1
	064 Add W10, W8, 1
	065 And W31, W10, 0x10000
	066 NotImplemented "Instruction CSINC not yet implemented."
	067 NotImplemented "Instruction STRH not yet implemented."
	068 NotImplemented "Instruction STRH not yet implemented."
	069 Move X20, [X31+16]
	070 Move X19, [X31+24]
	071 Move X30, [X31+32]
	072 Move X21, [X31+40]
	073 Return 
	074 Move X0, 0x7DA000
	075 Move X0, [X0+1432]
	076 Call 0x1C17CF4
	077 Move W8, 1
	078 Move [X21+2172], W8
	079 Move TEMP, X20
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {17}
	083 Move X1, [X19+40]
	084 Move X0, X19
	085 Call ProBuilderMesh.RefreshUV, X0, X1
	086 Move TEMP, X20
	087 And TEMP, TEMP, 2
	088 Compare TEMP, 2
	089 JumpIfNotEqual {21}
	090 Move X0, X19
	091 Call ProBuilderMesh.RefreshColors, X0
	092 Move TEMP, X20
	093 And TEMP, TEMP, 4
	094 Compare TEMP, 4
	095 JumpIfNotEqual {25}
	096 Move X0, X19
	097 Call ProBuilderMesh.RefreshNormals, X0
	098 Move TEMP, X20
	099 And TEMP, TEMP, 8
	100 Compare TEMP, 8
	101 JumpIfNotEqual {29}
	102 Move X0, X19
	103 Call ProBuilderMesh.RefreshTangents, X0
	104 Move TEMP, X20
	105 And TEMP, TEMP, 16
	106 Compare TEMP, 16
	107 JumpIfEqual {33}
	108 Call 0x1C17F20

Method: System.Void EnsureMeshColliderIsAssigned()

Disassembly:
	0x03919BAC CMP W2, 0x1
	0x03919BB0 STP W31, W9, [X8 + 0x18]
	0x03919BB4 B.LT 0x3919BC8
	0x03919BB8 LDR X0, [X8 + 0x10]
	0x03919BBC MOV W1, W31
	0x03919BC0 MOV X3, X31
	0x03919BC4 BL 0x339FA34
	0x03919BC8 MOV X0, X19
	0x03919BCC BL 0x3912AD8
	0x03919BD0 CBZ X0, 0x3919D8C
	0x03919BD4 LDR X8, [X24]
	0x03919BD8 MOV X2, X31
	0x03919BDC LDR X8, [X8 + 0xB8]
	0x03919BE0 LDR X1, [X8]
	0x03919BE4 BL 0x3C1368C
	0x03919BE8 LDR W8, [X22 + 0x18]
	0x03919BEC CMP W25, W8
	0x03919BF0 B.CS 0x3919D90
	0x03919BF4 LDR X8, [X29]
	0x03919BF8 CBZ X8, 0x3919D8C
	0x03919BFC STR W27, [X8 + 0x1C]
	0x03919C00 LDR X0, [X24]
	0x03919C04 LDR W8, [X0 + 0xE0]
	0x03919C08 CBNZ W8, 0x3919C14
	0x03919C0C BL 0x1C16DFC
	0x03919C10 LDR X0, [X24]
	0x03919C14 LDR X8, [X0 + 0xB8]
	0x03919C18 LDR X0, [X8]
	0x03919C1C CBZ X0, 0x3919D8C
	0x03919C20 LDR X2, [X26]
	0x03919C24 MOV W1, W23
	0x03919C28 BL 0x301DA48
	0x03919C2C LDR X8, [X19 + 0x28]
	0x03919C30 CBZ X8, 0x3919D8C
	0x03919C34 LDR W9, [X8 + 0x18]
	0x03919C38 CMP W9, 0x1
	0x03919C3C B.LT 0x3919C78
	0x03919C40 MOV W10, W31
	0x03919C44 CMP W9, W10
	0x03919C48 B.EQ 0x3919D90
	0x03919C4C ADD X11, X8, W10, 0x3, SXTW
	0x03919C50 LDR X11, [X11 + 0x20]
	0x03919C54 CBZ X11, 0x3919D8C
	0x03919C58 LDR W12, [X11 + 0x48]
	0x03919C5C CMP W23, W12
	0x03919C60 B.GE 0x3919C6C
	0x03919C64 SUB W12, W12, 0x1
	0x03919C68 STR W12, [X11 + 0x48]
	0x03919C6C ADD W10, W10, 0x1
	0x03919C70 CMP W9, W10
	0x03919C74 B.NE 0x3919C44
	0x03919C78 MOVZ W28, 0x1
	0x03919C7C MOV X0, X19
	0x03919C80 ADD W25, W25, 0x1
	0x03919C84 BL 0x3912CAC
	0x03919C88 CBNZ X0, 0x3919B08
	0x03919C8C B 0x3919D8C
	0x03919C90 MOV X0, X19
	0x03919C94 BL 0x3912CAC
	0x03919C98 CBZ X0, 0x3919D8C
	0x03919C9C MOV X1, X31
	0x03919CA0 BL 0x3C0F650
	0x03919CA4 CMP W0, W21
	0x03919CA8 B.GE 0x3919D08

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xAC9000
	007 Move W8, [X20+2173]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x836000
	014 Move X0, [X0+1336]
	015 Call 0x1C17CF4
	016 Move X0, 0x7DB000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+2173], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Move [X31+8], X31
	024 Call Component.get_gameObject, X0
	025 Compare X0, 0
	026 JumpIfEqual {81}
	027 Move X8, 0x836000
	028 Move X8, [X8+1336]
	029 Add X1, X31, 8
	030 Move X2, [X8]
	031 Call 0x21E7600, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {72}
	036 Move X20, [X31+8]
	037 Move X0, X19
	038 Call ProBuilderMesh.get_mesh, X0
	039 Move X8, 0x7DB000
	040 Move X8, [X8+1432]
	041 Move X21, X0
	042 Move X8, [X8]
	043 Move W9, [X8+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {48}
	046 Move X0, X8
	047 Call 0x1C17DFC
	048 Move X0, X21
	049 Move X1, X31
	050 Move X2, X31
	051 Call Object.op_Inequality, X0, X1
	052 Move X1, X31
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {67}
	057 Move X0, X19
	058 Call ProBuilderMesh.get_mesh, X0
	059 Compare X0, 0
	060 JumpIfEqual {81}
	061 Move X1, X31
	062 Call Mesh.get_vertexCount, X0
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X0, X19
	065 Call ProBuilderMesh.get_mesh, X0
	066 Move X1, X0
	067 Compare X20, 0
	068 JumpIfEqual {81}
	069 Move X0, X20
	070 Move X2, X31
	071 Call MeshCollider.set_sharedMesh, X0, X1
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X30, [X31+16]
	075 Move X21, [X31+24]
	076 Add X31, X31, 48
	077 Return 
	078 Move X1, X31
	079 Compare X20, 0
	080 JumpIfNotEqual {69}
	081 Call 0x1C17F20

Method: System.Int32 GetUnusedTextureGroup(System.Int32 i = 1)

Disassembly:
	0x0391BA3C MOV X21, X31
	0x0391BA40 B 0x391BA48
	0x0391BA44 MOV X19, X0
	0x0391BA48 CBZ X20, 0x391BAA4
	0x0391BA4C LDR X8, [X20]
	0x0391BA50 LDR X1, [X22]
	0x0391BA54 LDRH W9, [X8 + 0x12E]
	0x0391BA58 CBZ X9, 0x391BA7C
	0x0391BA5C LDR X10, [X8 + 0xB0]
	0x0391BA60 ADD X10, X10, 0x8
	0x0391BA64 LDUR X11, [X10 - 0x8]
	0x0391BA68 CMP X11, X1
	0x0391BA6C B.EQ 0x391BA8C
	0x0391BA70 SUBS X9, X9, 0x1
	0x0391BA74 ADD X10, X10, 0x10
	0x0391BA78 B.NE 0x391BA64
	0x0391BA7C MOV X0, X20
	0x0391BA80 MOV W2, W31
	0x0391BA84 BL 0x1C5C788
	0x0391BA88 B 0x391BA98
	0x0391BA8C LDRSW X9, [X10]
	0x0391BA90 ADD X8, X8, X9, 0x4, LSL
	0x0391BA94 ADD X0, X8, 0x138
	0x0391BA98 LDP X8, X1, [X0]
	0x0391BA9C MOV X0, X20
	0x0391BAA0 BLR X8
	0x0391BAA4 CBNZ X21, 0x391BAB0
	0x0391BAA8 MOV X0, X19
	0x0391BAAC BL 0x1D2C690
	0x0391BAB0 MOV X0, X21
	0x0391BAB4 BL 0x1C16F18
	0x0391BAB8 BL 0x1990590
	0x0391BABC STP X30, X21, [X31 - 0x20]!
	0x0391BAC0 STP X20, X19, [X31 + 0x10]
	0x0391BAC4 ADRP X21, 0xAC6000
	0x0391BAC8 LDRB W8, [X21 + 0x888]
	0x0391BACC MOV X19, X1
	0x0391BAD0 MOV X20, X0
	0x0391BAD4 TBNZ X8, 0x0, 0x391BAF8
	0x0391BAD8 ADRP X0, 0x7DC000
	0x0391BADC LDR X0, [X0 + 0xB70]
	0x0391BAE0 BL 0x1C16CF4
	0x0391BAE4 ADRP X0, 0x7D9000
	0x0391BAE8 LDR X0, [X0 + 0xE30]
	0x0391BAEC BL 0x1C16CF4
	0x0391BAF0 MOVZ W8, 0x1
	0x0391BAF4 STRB W8, [X21 + 0x888]
	0x0391BAF8 CBZ X19, 0x391BB40
	0x0391BAFC ADRP X8, 0x7D9000
	0x0391BB00 LDR X8, [X8 + 0xE30]
	0x0391BB04 ADRP X21, 0x7DC000
	0x0391BB08 LDR X0, [X8]
	0x0391BB0C LDR X21, [X21 + 0xB70]
	0x0391BB10 BL 0x1C16F10
	0x0391BB14 LDR X1, [X21]
	0x0391BB18 MOV X21, X0
	0x0391BB1C BL 0x2FDBF14
	0x0391BB20 MOV X0, X20
	0x0391BB24 MOV X1, X19
	0x0391BB28 MOV X2, X21

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0xAC7000
	010 Move X22, 0x834000
	011 Move W8, [X21+2174]
	012 Move X22, [X22+1480]
	013 Move W20, W1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {33}
	019 Move X0, 0x834000
	020 Move X0, [X0+1488]
	021 Call 0x1C17CF4
	022 Move X0, 0x834000
	023 Move X0, [X0+1496]
	024 Call 0x1C17CF4
	025 Move X0, 0x834000
	026 Move X0, [X0+1504]
	027 Call 0x1C17CF4
	028 Move X0, 0x834000
	029 Move X0, [X0+1480]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+2174], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X1, X31
	036 Move X21, X0
	037 Call Object..ctor, X0
	038 Compare X21, 0
	039 JumpIfEqual {75}
	040 Move X23, 0x834000
	041 Move X24, 0x834000
	042 Move X25, 0x834000
	043 Move X23, [X23+1496]
	044 Move X24, [X24+1504]
	045 Move X25, [X25+1488]
	046 Move [X21+16], W20
	047 Move X0, [X23]
	048 Move X20, [X19+40]
	049 Call 0x1C17F10
	050 Move X2, [X24]
	051 Move X1, X21
	052 Move X3, X31
	053 Move X22, X0
	054 Call Predicate`1<Object>..ctor, X0, X1, X2
	055 Move X2, [X25]
	056 Move X0, X20
	057 Move X1, X22
	058 Call 0x22E6B98, X0, X1
	059 Move W8, W0
	060 Move W0, [X21+16]
	061 Add W20, W0, 1
	062 Move TEMP, X8
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfEqual {46}
	066 Move X20, [X31+48]
	067 Move X19, [X31+56]
	068 Move X22, [X31+32]
	069 Move X21, [X31+40]
	070 Move X24, [X31+16]
	071 Move X23, [X31+24]
	072 Move X30, [X31+64]
	073 Move X25, [X31+72]
	074 Return X0
	075 Call 0x1C17F20

Method: System.Boolean IsValidTextureGroup(System.Int32 group)

Disassembly:
	0x0391BB34 MOV X0, X21
	0x0391BB38 LDP X30, X21, [X31], #0x20
	0x0391BB3C RET

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Int32 UnusedElementGroup(System.Int32 i = 1)

Disassembly:
	0x0391BB40 ADRP X0, 0x7DD000
	0x0391BB44 LDR X0, [X0 + 0x528]
	0x0391BB48 BL 0x1C16D08
	0x0391BB4C BL 0x1C16F10
	0x0391BB50 MOV X19, X0
	0x0391BB54 ADRP X0, 0x833000
	0x0391BB58 LDR X0, [X0 + 0x450]
	0x0391BB5C BL 0x1C16D08
	0x0391BB60 MOV X1, X0
	0x0391BB64 MOV X0, X19
	0x0391BB68 MOV X2, X31
	0x0391BB6C BL 0x330E100
	0x0391BB70 ADRP X0, 0x833000
	0x0391BB74 LDR X0, [X0 + 0x628]
	0x0391BB78 BL 0x1C16D08
	0x0391BB7C MOV X1, X0
	0x0391BB80 MOV X0, X19
	0x0391BB84 BL 0x1C16DEC
	0x0391BB88 SUB X31, X31, 0x70
	0x0391BB8C STP X29, X30, [X31 + 0x10]
	0x0391BB90 STP X28, X27, [X31 + 0x20]
	0x0391BB94 STP X26, X25, [X31 + 0x30]
	0x0391BB98 STP X24, X23, [X31 + 0x40]
	0x0391BB9C STP X22, X21, [X31 + 0x50]
	0x0391BBA0 STP X20, X19, [X31 + 0x60]
	0x0391BBA4 ADRP X21, 0xAC6000
	0x0391BBA8 LDRB W8, [X21 + 0x88B]
	0x0391BBAC MOV X20, X2
	0x0391BBB0 MOV X19, X1
	0x0391BBB4 STR X0, [X31 + 0x8]
	0x0391BBB8 TBNZ X8, 0x0, 0x391BC3C
	0x0391BBBC ADRP X0, 0x832000
	0x0391BBC0 LDR X0, [X0 + 0xC80]
	0x0391BBC4 BL 0x1C16CF4
	0x0391BBC8 ADRP X0, 0x7DA000
	0x0391BBCC LDR X0, [X0 + 0x9D8]
	0x0391BBD0 BL 0x1C16CF4
	0x0391BBD4 ADRP X0, 0x7DF000
	0x0391BBD8 LDR X0, [X0 + 0x678]
	0x0391BBDC BL 0x1C16CF4
	0x0391BBE0 ADRP X0, 0x7D8000
	0x0391BBE4 LDR X0, [X0 + 0xE00]
	0x0391BBE8 BL 0x1C16CF4
	0x0391BBEC ADRP X0, 0x800000
	0x0391BBF0 LDR X0, [X0 + 0x7B8]
	0x0391BBF4 BL 0x1C16CF4
	0x0391BBF8 ADRP X0, 0x800000
	0x0391BBFC LDR X0, [X0 + 0x7C0]
	0x0391BC00 BL 0x1C16CF4
	0x0391BC04 ADRP X0, 0x7D8000
	0x0391BC08 LDR X0, [X0 + 0xE18]
	0x0391BC0C BL 0x1C16CF4
	0x0391BC10 ADRP X0, 0x7D9000
	0x0391BC14 LDR X0, [X0 + 0xE10]
	0x0391BC18 BL 0x1C16CF4
	0x0391BC1C ADRP X0, 0x7DF000
	0x0391BC20 LDR X0, [X0 + 0x858]
	0x0391BC24 BL 0x1C16CF4
	0x0391BC28 ADRP X0, 0x833000
	0x0391BC2C LDR X0, [X0 + 0x528]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0xAC7000
	010 Move X22, 0x834000
	011 Move W8, [X21+2175]
	012 Move X22, [X22+1512]
	013 Move W20, W1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {33}
	019 Move X0, 0x834000
	020 Move X0, [X0+1488]
	021 Call 0x1C17CF4
	022 Move X0, 0x834000
	023 Move X0, [X0+1496]
	024 Call 0x1C17CF4
	025 Move X0, 0x834000
	026 Move X0, [X0+1520]
	027 Call 0x1C17CF4
	028 Move X0, 0x834000
	029 Move X0, [X0+1512]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+2175], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X1, X31
	036 Move X21, X0
	037 Call Object..ctor, X0
	038 Compare X21, 0
	039 JumpIfEqual {75}
	040 Move X23, 0x834000
	041 Move X24, 0x834000
	042 Move X25, 0x834000
	043 Move X23, [X23+1496]
	044 Move X24, [X24+1520]
	045 Move X25, [X25+1488]
	046 Move [X21+16], W20
	047 Move X0, [X23]
	048 Move X20, [X19+40]
	049 Call 0x1C17F10
	050 Move X2, [X24]
	051 Move X1, X21
	052 Move X3, X31
	053 Move X22, X0
	054 Call Predicate`1<Object>..ctor, X0, X1, X2
	055 Move X2, [X25]
	056 Move X0, X20
	057 Move X1, X22
	058 Call 0x22E6B98, X0, X1
	059 Move W8, W0
	060 Move W0, [X21+16]
	061 Add W20, W0, 1
	062 Move TEMP, X8
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfEqual {46}
	066 Move X20, [X31+48]
	067 Move X19, [X31+56]
	068 Move X22, [X31+32]
	069 Move X21, [X31+40]
	070 Move X24, [X31+16]
	071 Move X23, [X31+24]
	072 Move X30, [X31+64]
	073 Move X25, [X31+72]
	074 Return X0
	075 Call 0x1C17F20

Method: System.Void RefreshUV(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> facesToRefresh)

Disassembly:
	0x0391B384 ADRP X22, 0x7D8000
	0x0391B388 ADRP X24, 0x832000
	0x0391B38C LDR X22, [X22 + 0xE18]
	0x0391B390 LDR X24, [X24 + 0xDB8]
	0x0391B394 LDR X8, [X20]
	0x0391B398 LDR X1, [X22]
	0x0391B39C LDRH W9, [X8 + 0x12E]
	0x0391B3A0 CBZ X9, 0x391B3C4
	0x0391B3A4 LDR X10, [X8 + 0xB0]
	0x0391B3A8 ADD X10, X10, 0x8
	0x0391B3AC LDUR X11, [X10 - 0x8]
	0x0391B3B0 CMP X11, X1
	0x0391B3B4 B.EQ 0x391B3D4
	0x0391B3B8 SUBS X9, X9, 0x1
	0x0391B3BC ADD X10, X10, 0x10
	0x0391B3C0 B.NE 0x391B3AC
	0x0391B3C4 MOV X0, X20
	0x0391B3C8 MOV W2, W31
	0x0391B3CC BL 0x1C5C788
	0x0391B3D0 B 0x391B3E0
	0x0391B3D4 LDRSW X9, [X10]
	0x0391B3D8 ADD X8, X8, X9, 0x4, LSL
	0x0391B3DC ADD X0, X8, 0x138
	0x0391B3E0 LDP X8, X1, [X0]
	0x0391B3E4 MOV X0, X20
	0x0391B3E8 BLR X8
	0x0391B3EC TBZ X0, 0x0, 0x391B454
	0x0391B3F0 LDR X8, [X20]
	0x0391B3F4 LDR X1, [X24]
	0x0391B3F8 LDRH W9, [X8 + 0x12E]
	0x0391B3FC CBZ X9, 0x391B420
	0x0391B400 LDR X10, [X8 + 0xB0]
	0x0391B404 ADD X10, X10, 0x8
	0x0391B408 LDUR X11, [X10 - 0x8]
	0x0391B40C CMP X11, X1
	0x0391B410 B.EQ 0x391B430
	0x0391B414 SUBS X9, X9, 0x1
	0x0391B418 ADD X10, X10, 0x10
	0x0391B41C B.NE 0x391B408
	0x0391B420 MOV X0, X20
	0x0391B424 MOV W2, W31
	0x0391B428 BL 0x1C5C788
	0x0391B42C B 0x391B43C
	0x0391B430 LDRSW X9, [X10]
	0x0391B434 ADD X8, X8, X9, 0x4, LSL
	0x0391B438 ADD X0, X8, 0x138
	0x0391B43C LDP X8, X1, [X0]
	0x0391B440 MOV X0, X20
	0x0391B444 BLR X8
	0x0391B448 CBZ X0, 0x391B504
	0x0391B44C STR W21, [X0 + 0x48]
	0x0391B450 B 0x391B394
	0x0391B454 MOV X21, X31
	0x0391B458 MOVZ W22, 0xC
	0x0391B45C CBZ X20, 0x391B4B8
	0x0391B460 LDR X8, [X20]
	0x0391B464 LDR X1, [X23]
	0x0391B468 LDRH W9, [X8 + 0x12E]
	0x0391B46C CBZ X9, 0x391B490
	0x0391B470 LDR X10, [X8 + 0xB0]
	0x0391B474 ADD X10, X10, 0x8
	0x0391B478 LDUR X11, [X10 - 0x8]
	0x0391B47C CMP X11, X1
	0x0391B480 B.EQ 0x391B4A0
	0x0391B484 SUBS X9, X9, 0x1
	0x0391B488 ADD X10, X10, 0x10
	0x0391B48C B.NE 0x391B478
	0x0391B490 MOV X0, X20
	0x0391B494 MOV W2, W31
	0x0391B498 BL 0x1C5C788
	0x0391B49C B 0x391B4AC
	0x0391B4A0 LDRSW X9, [X10]
	0x0391B4A4 ADD X8, X8, X9, 0x4, LSL
	0x0391B4A8 ADD X0, X8, 0x138
	0x0391B4AC LDP X8, X1, [X0]
	0x0391B4B0 MOV X0, X20
	0x0391B4B4 BLR X8
	0x0391B4B8 CBNZ X21, 0x391B510
	0x0391B4BC CMP W22, 0xC
	0x0391B4C0 B.EQ 0x391B4C8
	0x0391B4C4 CBNZ W22, 0x391B4E4
	0x0391B4C8 LDRH W8, [X27 + 0xC8]
	0x0391B4CC MOVZ W9, 0x1
	0x0391B4D0 ADD W10, W8, 0x1
	0x0391B4D4 ANDS W31, W10, 0x10000
	0x0391B4D8 CSINC W8, W9, W8, NE
	0x0391B4DC STRH W8, [X27 + 0xC8]
	0x0391B4E0 STRH W8, [X27 + 0xCA]
	0x0391B4E4 LDP X20, X19, [X31 + 0x60]
	0x0391B4E8 LDP X22, X21, [X31 + 0x50]
	0x0391B4EC LDP X24, X23, [X31 + 0x40]
	0x0391B4F0 LDP X26, X25, [X31 + 0x30]
	0x0391B4F4 LDP X28, X27, [X31 + 0x20]
	0x0391B4F8 LDP X29, X30, [X31 + 0x10]
	0x0391B4FC ADD X31, X31, 0x70
	0x0391B500 RET
	0x0391B504 BL 0x1C16F20
	0x0391B508 BL 0x1C16F20
	0x0391B50C BL 0x1C16F20
	0x0391B510 MOV X0, X21
	0x0391B514 BL 0x1C16F18
	0x0391B518 BL 0x1C16F44
	0x0391B51C MOV X1, X31
	0x0391B520 BL 0x1C16DEC
	0x0391B524 B 0x391B530
	0x0391B528 B 0x391B530
	0x0391B52C B 0x391B530
	0x0391B530 MOV X22, X0
	0x0391B534 CMP W1, 0x1
	0x0391B538 B.NE 0x391B558
	0x0391B53C MOV X0, X22
	0x0391B540 BL 0x3EB1AD0
	0x0391B544 LDR X21, [X0]
	0x0391B548 BL 0x3EB1AE0
	0x0391B54C MOV W22, W31
	0x0391B550 CBNZ X20, 0x391B460
	0x0391B554 B 0x391B4B8
	0x0391B558 MOV X21, X31
	0x0391B55C B 0x391B564
	0x0391B560 MOV X22, X0
	0x0391B564 CBZ X20, 0x391B5C0
	0x0391B568 LDR X8, [X20]
	0x0391B56C LDR X1, [X23]
	0x0391B570 LDRH W9, [X8 + 0x12E]
	0x0391B574 CBZ X9, 0x391B598
	0x0391B578 LDR X10, [X8 + 0xB0]
	0x0391B57C ADD X10, X10, 0x8
	0x0391B580 LDUR X11, [X10 - 0x8]
	0x0391B584 CMP X11, X1
	0x0391B588 B.EQ 0x391B5A8
	0x0391B58C SUBS X9, X9, 0x1
	0x0391B590 ADD X10, X10, 0x10
	0x0391B594 B.NE 0x391B580
	0x0391B598 MOV X0, X20
	0x0391B59C MOV W2, W31
	0x0391B5A0 BL 0x1C5C788
	0x0391B5A4 B 0x391B5B4
	0x0391B5A8 LDRSW X9, [X10]
	0x0391B5AC ADD X8, X8, X9, 0x4, LSL
	0x0391B5B0 ADD X0, X8, 0x138
	0x0391B5B4 LDP X8, X1, [X0]
	0x0391B5B8 MOV X0, X20
	0x0391B5BC BLR X8
	0x0391B5C0 CBNZ X21, 0x391B5CC
	0x0391B5C4 MOV X0, X22
	0x0391B5C8 BL 0x1D2C690
	0x0391B5CC MOV X0, X21
	0x0391B5D0 BL 0x1C16F18
	0x0391B5D4 BL 0x1990590
	0x0391B5D8 STR X30, [X31 - 0x40]!
	0x0391B5DC STP X24, X23, [X31 + 0x10]
	0x0391B5E0 STP X22, X21, [X31 + 0x20]
	0x0391B5E4 STP X20, X19, [X31 + 0x30]
	0x0391B5E8 ADRP X21, 0xAC6000
	0x0391B5EC LDRB W8, [X21 + 0x886]
	0x0391B5F0 MOV W19, W1
	0x0391B5F4 MOV X20, X0
	0x0391B5F8 TBNZ X8, 0x0, 0x391B610
	0x0391B5FC ADRP X0, 0x7E2000
	0x0391B600 LDR X0, [X0 + 0x870]
	0x0391B604 BL 0x1C16CF4
	0x0391B608 MOVZ W8, 0x1
	0x0391B60C STRB W8, [X21 + 0x886]
	0x0391B610 STR W31, [X31 + 0xC]
	0x0391B614 LDR X0, [X20 + 0x40]
	0x0391B618 CBZ X0, 0x391B6E8
	0x0391B61C ADRP X8, 0x7E2000
	0x0391B620 LDR X8, [X8 + 0x870]
	0x0391B624 ADD X2, X31, 0xC
	0x0391B628 MOV W1, W19
	0x0391B62C LDR X3, [X8]
	0x0391B630 BL 0x2A0BC68
	0x0391B634 TBZ X0, 0x0, 0x391B654
	0x0391B638 LDR W21, [X31 + 0xC]
	0x0391B63C MOV W0, W21
	0x0391B640 LDP X20, X19, [X31 + 0x30]
	0x0391B644 LDP X22, X21, [X31 + 0x20]
	0x0391B648 LDP X24, X23, [X31 + 0x10]
	0x0391B64C LDR X30, [X31], #0x40
	0x0391B650 RET
	0x0391B654 LDR X8, [X20 + 0x30]
	0x0391B658 CBZ X8, 0x391B6E8
	0x0391B65C MOV W21, W31
	0x0391B660 LDR W9, [X8 + 0x18]
	0x0391B664 CMP W21, W9
	0x0391B668 B.GE 0x391B6F0
	0x0391B66C CMP W21, W9
	0x0391B670 B.CS 0x391B6EC
	0x0391B674 SXTW X24, W21
	0x0391B678 ADD X8, X8, X24, 0x3, LSL
	0x0391B67C LDR X0, [X8 + 0x20]
	0x0391B680 CBZ X0, 0x391B6E8
	0x0391B684 MOV X1, X31
	0x0391B688 BL 0x393492C
	0x0391B68C CMP W0, 0x1
	0x0391B690 B.LT 0x391B6DC
	0x0391B694 MOV W22, W0
	0x0391B698 MOV W23, W31
	0x0391B69C LDR X8, [X20 + 0x30]
	0x0391B6A0 CBZ X8, 0x391B6E8
	0x0391B6A4 LDR W9, [X8 + 0x18]
	0x0391B6A8 CMP W21, W9
	0x0391B6AC B.CS 0x391B6EC
	0x0391B6B0 ADD X8, X8, X24, 0x3, LSL
	0x0391B6B4 LDR X0, [X8 + 0x20]
	0x0391B6B8 CBZ X0, 0x391B6E8
	0x0391B6BC MOV W1, W23
	0x0391B6C0 MOV X2, X31
	0x0391B6C4 BL 0x39282DC
	0x0391B6C8 CMP W0, W19
	0x0391B6CC B.EQ 0x391B63C
	0x0391B6D0 ADD W23, W23, 0x1
	0x0391B6D4 CMP W22, W23
	0x0391B6D8 B.NE 0x391B69C
	0x0391B6DC LDR X8, [X20 + 0x30]
	0x0391B6E0 ADD W21, W21, 0x1
	0x0391B6E4 CBNZ X8, 0x391B660
	0x0391B6E8 BL 0x1C16F20
	0x0391B6EC BL 0x1C16F28
	0x0391B6F0 ADRP X0, 0x7E0000
	0x0391B6F4 LDR X0, [X0 + 0x760]
	0x0391B6F8 BL 0x1C16D08
	0x0391B6FC BL 0x1C16F10
	0x0391B700 MOV X19, X0
	0x0391B704 ADRP X0, 0x833000
	0x0391B708 LDR X0, [X0 + 0x618]
	0x0391B70C BL 0x1C16D08
	0x0391B710 MOV X1, X0
	0x0391B714 MOV X0, X19
	0x0391B718 MOV X2, X31
	0x0391B71C BL 0x3316014
	0x0391B720 ADRP X0, 0x833000
	0x0391B724 LDR X0, [X0 + 0x620]
	0x0391B728 BL 0x1C16D08
	0x0391B72C MOV X1, X0
	0x0391B730 MOV X0, X19
	0x0391B734 BL 0x1C16DEC
	0x0391B738 STR X30, [X31 - 0x50]!
	0x0391B73C STP X26, X25, [X31 + 0x10]
	0x0391B740 STP X24, X23, [X31 + 0x20]
	0x0391B744 STP X22, X21, [X31 + 0x30]
	0x0391B748 STP X20, X19, [X31 + 0x40]
	0x0391B74C ADRP X23, 0xAC6000
	0x0391B750 ADRP X21, 0x7D9000
	0x0391B754 ADRP X22, 0x7DF000
	0x0391B758 LDRB W8, [X23 + 0x887]
	0x0391B75C LDR X21, [X21 + 0xE08]
	0x0391B760 LDR X22, [X22 + 0x688]
	0x0391B764 MOV X20, X1
	0x0391B768 MOV X19, X0
	0x0391B76C TBNZ X8, 0x0, 0x391B7D8
	0x0391B770 ADRP X0, 0x832000
	0x0391B774 LDR X0, [X0 + 0xC80]
	0x0391B778 BL 0x1C16CF4
	0x0391B77C ADRP X0, 0x7DA000
	0x0391B780 LDR X0, [X0 + 0x9D8]
	0x0391B784 BL 0x1C16CF4
	0x0391B788 ADRP X0, 0x7DF000
	0x0391B78C LDR X0, [X0 + 0x688]
	0x0391B790 BL 0x1C16CF4
	0x0391B794 ADRP X0, 0x7D9000
	0x0391B798 LDR X0, [X0 + 0xE08]
	0x0391B79C BL 0x1C16CF4
	0x0391B7A0 ADRP X0, 0x7D8000
	0x0391B7A4 LDR X0, [X0 + 0xE00]
	0x0391B7A8 BL 0x1C16CF4
	0x0391B7AC ADRP X0, 0x800000
	0x0391B7B0 LDR X0, [X0 + 0x7B8]
	0x0391B7B4 BL 0x1C16CF4
	0x0391B7B8 ADRP X0, 0x800000
	0x0391B7BC LDR X0, [X0 + 0x7C0]
	0x0391B7C0 BL 0x1C16CF4
	0x0391B7C4 ADRP X0, 0x7D8000
	0x0391B7C8 LDR X0, [X0 + 0xE18]
	0x0391B7CC BL 0x1C16CF4
	0x0391B7D0 MOVZ W8, 0x1
	0x0391B7D4 STRB W8, [X23 + 0x887]
	0x0391B7D8 MOV X0, X19
	0x0391B7DC BL 0x3916198
	0x0391B7E0 LDR X8, [X21]
	0x0391B7E4 MOV X21, X0
	0x0391B7E8 MOV X0, X8
	0x0391B7EC BL 0x1C16F10
	0x0391B7F0 LDR X1, [X22]
	0x0391B7F4 MOV X19, X0
	0x0391B7F8 BL 0x2DA9EF4
	0x0391B7FC CBZ X20, 0x391B9F8
	0x0391B800 ADRP X10, 0x800000
	0x0391B804 LDR X8, [X20]
	0x0391B808 LDR X10, [X10 + 0x7B8]
	0x0391B80C LDRH W9, [X8 + 0x12E]
	0x0391B810 LDR X1, [X10]
	0x0391B814 CBZ X9, 0x391B838
	0x0391B818 LDR X10, [X8 + 0xB0]
	0x0391B81C ADD X10, X10, 0x8
	0x0391B820 LDUR X11, [X10 - 0x8]
	0x0391B824 CMP X11, X1
	0x0391B828 B.EQ 0x391B848
	0x0391B82C SUBS X9, X9, 0x1
	0x0391B830 ADD X10, X10, 0x10
	0x0391B834 B.NE 0x391B820
	0x0391B838 MOV X0, X20
	0x0391B83C MOV W2, W31
	0x0391B840 BL 0x1C5C788
	0x0391B844 B 0x391B854
	0x0391B848 LDRSW X9, [X10]
	0x0391B84C ADD X8, X8, X9, 0x4, LSL
	0x0391B850 ADD X0, X8, 0x138
	0x0391B854 LDP X8, X1, [X0]
	0x0391B858 ADRP X22, 0x7D8000
	0x0391B85C LDR X22, [X22 + 0xE00]
	0x0391B860 MOV X0, X20
	0x0391B864 BLR X8
	0x0391B868 MOV X20, X0
	0x0391B86C CBZ X0, 0x391B9FC
	0x0391B870 ADRP X23, 0x7D8000
	0x0391B874 ADRP X24, 0x800000
	0x0391B878 ADRP X25, 0x832000
	0x0391B87C ADRP X26, 0x7DA000
	0x0391B880 LDR X23, [X23 + 0xE18]
	0x0391B884 LDR X24, [X24 + 0x7C0]
	0x0391B888 LDR X25, [X25 + 0xC80]
	0x0391B88C LDR X26, [X26 + 0x9D8]
	0x0391B890 LDR X8, [X20]
	0x0391B894 LDR X1, [X23]
	0x0391B898 LDRH W9, [X8 + 0x12E]
	0x0391B89C CBZ X9, 0x391B8C0
	0x0391B8A0 LDR X10, [X8 + 0xB0]
	0x0391B8A4 ADD X10, X10, 0x8
	0x0391B8A8 LDUR X11, [X10 - 0x8]
	0x0391B8AC CMP X11, X1
	0x0391B8B0 B.EQ 0x391B8D0
	0x0391B8B4 SUBS X9, X9, 0x1
	0x0391B8B8 ADD X10, X10, 0x10
	0x0391B8BC B.NE 0x391B8A8
	0x0391B8C0 MOV X0, X20
	0x0391B8C4 MOV W2, W31
	0x0391B8C8 BL 0x1C5C788
	0x0391B8CC B 0x391B8DC
	0x0391B8D0 LDRSW X9, [X10]
	0x0391B8D4 ADD X8, X8, X9, 0x4, LSL
	0x0391B8D8 ADD X0, X8, 0x138
	0x0391B8DC LDP X8, X1, [X0]
	0x0391B8E0 MOV X0, X20
	0x0391B8E4 BLR X8
	0x0391B8E8 TBZ X0, 0x0, 0x391B970
	0x0391B8EC LDR X8, [X20]
	0x0391B8F0 LDR X1, [X24]
	0x0391B8F4 LDRH W9, [X8 + 0x12E]
	0x0391B8F8 CBZ X9, 0x391B91C
	0x0391B8FC LDR X10, [X8 + 0xB0]
	0x0391B900 ADD X10, X10, 0x8
	0x0391B904 LDUR X11, [X10 - 0x8]
	0x0391B908 CMP X11, X1
	0x0391B90C B.EQ 0x391B92C
	0x0391B910 SUBS X9, X9, 0x1
	0x0391B914 ADD X10, X10, 0x10
	0x0391B918 B.NE 0x391B904
	0x0391B91C MOV X0, X20
	0x0391B920 MOV W2, W31
	0x0391B924 BL 0x1C5C788
	0x0391B928 B 0x391B938

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], X29
	003 Move [X31+72], X30
	004 Move [X31+80], X28
	005 Move [X31+88], X27
	006 Move [X31+96], X26
	007 Move [X31+104], X25
	008 Move [X31+112], X24
	009 Move [X31+120], X23
	010 Move [X31+128], X22
	011 Move [X31+136], X21
	012 Move [X31+144], X20
	013 Move [X31+152], X19
	014 Move X21, 0xAC7000
	015 Move W8, [X21+2176]
	016 Move X20, X1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {51}
	022 Move X0, 0x7DB000
	023 Move X0, [X0+2520]
	024 Call 0x1C17CF4
	025 Move X0, 0x7E0000
	026 Move X0, [X0+1656]
	027 Call 0x1C17CF4
	028 Move X0, 0x7D9000
	029 Move X0, [X0+3584]
	030 Call 0x1C17CF4
	031 Move X0, 0x833000
	032 Move X0, [X0+3504]
	033 Call 0x1C17CF4
	034 Move X0, 0x833000
	035 Move X0, [X0+3512]
	036 Call 0x1C17CF4
	037 Move X0, 0x7D9000
	038 Move X0, [X0+3608]
	039 Call 0x1C17CF4
	040 Move X0, 0x834000
	041 Move X0, [X0+1320]
	042 Call 0x1C17CF4
	043 Move X0, 0x834000
	044 Move X0, [X0+1424]
	045 Call 0x1C17CF4
	046 Move X0, 0x833000
	047 Move X0, [X0+2696]
	048 Call 0x1C17CF4
	049 Move W8, 1
	050 Move [X21+2176], W8
	051 Move W1, 2
	052 Move X0, X19
	053 Call ProBuilderMesh.HasArrays, X0, X1
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfEqual {82}
	058 Move X8, 0x833000
	059 Move X9, [X19+88]
	060 Move X8, [X8+2696]
	061 Compare X9, 0
	062 JumpIfEqual {64}
	063 Move W1, [X9+24]
	064 Move W1, W31
	065 Move X0, [X8]
	066 Call 0x1C17D6C
	067 Move X20, [X19+40]
	068 Move [X19+96], X0
	069 Compare X20, 0
	070 JumpIfEqual {345}
	071 Move W8, [X20+24]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move W9, W31
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Add X10, X20, W9
	076 Move X10, [X10+32]
	077 Compare X10, 0
	078 JumpIfEqual {345}
	079 Add W9, W9, 1
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move [X10+76], W31
	082 Move X24, 0x834000
	083 Move X24, [X24+1320]
	084 Move X0, [X24]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {90}
	088 Call 0x1C17DFC
	089 Move X0, [X24]
	090 Move X8, [X0+184]
	091 Move X0, [X8+40]
	092 Compare X0, 0
	093 JumpIfEqual {345}
	094 Move X8, 0x7E0000
	095 Move X8, [X8+1656]
	096 Move X1, [X8]
	097 Call HashSet`1<Int32>.Clear, X0
	098 Compare X20, 0
	099 JumpIfEqual {345}
	100 Move X10, 0x833000
	101 Move X8, [X20]
	102 Move X10, [X10+3504]
	103 NotImplemented "Instruction LDRH not yet implemented."
	104 Move X1, [X10]
	105 Compare X9, 0
	106 JumpIfEqual {113}
	107 Move X10, [X8+176]
	108 Add X10, X10, 8
	109 NotImplemented "Instruction LDUR not yet implemented."
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Subtract X9, X9, 1
	112 Add X10, X10, 16
	113 Move X0, X20
	114 Move W2, W31
	115 Call 0x1C5D788
	116 NotImplemented "Instruction LDRSW not yet implemented."
	117 Add X8, X8, X9
	118 Add X0, X8, 312
	119 Move X8, [X0]
	120 Move X1, [X0+8]
	121 Move X0, X20
	122 NotImplemented "Instruction BLR not yet implemented."
	123 Move X20, X0
	124 Compare X0, 0
	125 JumpIfEqual {347}
	126 Move X25, 0x7D9000
	127 Move X26, 0x833000
	128 Move X27, 0x7DB000
	129 Move X28, 0x834000
	130 Move X25, [X25+3608]
	131 Move X26, [X26+3512]
	132 Move X27, [X27+2520]
	133 Move X28, [X28+1424]
	134 Move X29, X31
	135 Move X8, [X20]
	136 Move X1, [X25]
	137 NotImplemented "Instruction LDRH not yet implemented."
	138 Compare X9, 0
	139 JumpIfEqual {146}
	140 Move X10, [X8+176]
	141 Add X10, X10, 8
	142 NotImplemented "Instruction LDUR not yet implemented."
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Subtract X9, X9, 1
	145 Add X10, X10, 16
	146 Move X0, X20
	147 Move W2, W31
	148 Call 0x1C5D788
	149 NotImplemented "Instruction LDRSW not yet implemented."
	150 Add X8, X8, X9
	151 Add X0, X8, 312
	152 Move X8, [X0]
	153 Move X1, [X0+8]
	154 Move X0, X20
	155 NotImplemented "Instruction BLR not yet implemented."
	156 Move TEMP, X0
	157 And TEMP, TEMP, 1
	158 Compare TEMP, 1
	159 JumpIfNotEqual {254}
	160 Move X8, [X20]
	161 Move X1, [X26]
	162 NotImplemented "Instruction LDRH not yet implemented."
	163 Compare X9, 0
	164 JumpIfEqual {171}
	165 Move X10, [X8+176]
	166 Add X10, X10, 8
	167 NotImplemented "Instruction LDUR not yet implemented."
	168 NotImplemented "Instruction CMP not yet implemented."
	169 Subtract X9, X9, 1
	170 Add X10, X10, 16
	171 Move X0, X20
	172 Move W2, W31
	173 Call 0x1C5D788
	174 NotImplemented "Instruction LDRSW not yet implemented."
	175 Add X8, X8, X9
	176 Add X0, X8, 312
	177 Move X8, [X0]
	178 Move X1, [X0+8]
	179 Move X0, X20
	180 NotImplemented "Instruction BLR not yet implemented."
	181 Move X21, X0
	182 Compare X0, 0
	183 JumpIfEqual {344}
	184 Move W8, [X21+76]
	185 Compare W8, 0
	186 JumpIfNotEqual {135}
	187 Move X8, [X21+16]
	188 NotImplemented "Instruction CMP not yet implemented."
	189 NotImplemented "Instruction CSEL not yet implemented."
	190 Compare X8, 0
	191 JumpIfEqual {197}
	192 Compare X23, 0
	193 JumpIfEqual {350}
	194 Move W9, [X23+24]
	195 Move X29, X8
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Move X0, [X24]
	198 Move W22, [X21+84]
	199 Move W8, [X0+224]
	200 Compare W8, 0
	201 JumpIfNotEqual {203}
	202 Call 0x1C17DFC
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Move X0, [X24]
	205 Move W8, [X0+224]
	206 Compare W8, 0
	207 JumpIfNotEqual {210}
	208 Call 0x1C17DFC
	209 Move X0, [X24]
	210 Move X8, [X0+184]
	211 Move X0, [X8+40]
	212 Compare X0, 0
	213 JumpIfEqual {351}
	214 Move X2, [X27]
	215 Move W1, W22
	216 Call HashSet`1<Int32>.Add, X0, X1
	217 Move X29, X23
	218 Move TEMP, X0
	219 And TEMP, TEMP, 1
	220 Compare TEMP, 1
	221 JumpIfNotEqual {135}
	222 NotImplemented "Instruction LDUR not yet implemented."
	223 NotImplemented "Instruction LDUR not yet implemented."
	224 Move X0, [X28]
	225 Move [X31+32], V1
	226 Move [X31+40], V0
	227 Move W8, [X0+224]
	228 Compare W8, 0
	229 JumpIfNotEqual {231}
	230 Call 0x1C17DFC
	231 Move V0, [X31+32]
	232 Move V1, [X31+48]
	233 Move [X31], V0
	234 Move [X31+8], V1
	235 Add X2, X31, 0
	236 Move X0, X19
	237 Move W1, W22
	238 Move X3, X31
	239 Call UvUnwrapping.ProjectTextureGroup, X0, X1, X2
	240 Move X29, X23
	241 Move X0, [X28]
	242 Move W8, [X0+224]
	243 Compare W8, 0
	244 JumpIfNotEqual {246}
	245 Call 0x1C17DFC
	246 Move S0, W31
	247 Move S1, W31
	248 Move S2, W31
	249 Move X0, X19
	250 Move X1, X21
	251 Move X2, X31
	252 Call UvUnwrapping.Unwrap, X0, X1, X2
	253 Move X29, X23
	254 Move X21, X31
	255 Move W22, 10
	256 Compare X20, 0
	257 JumpIfEqual {281}
	258 Move X8, [X20]
	259 Move X10, 0x7D9000
	260 NotImplemented "Instruction LDRH not yet implemented."
	261 Move X10, [X10+3584]
	262 Move X1, [X10]
	263 Compare X9, 0
	264 JumpIfEqual {271}
	265 Move X10, [X8+176]
	266 Add X10, X10, 8
	267 NotImplemented "Instruction LDUR not yet implemented."
	268 NotImplemented "Instruction CMP not yet implemented."
	269 Subtract X9, X9, 1
	270 Add X10, X10, 16
	271 Move X0, X20
	272 Move W2, W31
	273 Call 0x1C5D788
	274 NotImplemented "Instruction LDRSW not yet implemented."
	275 Add X8, X8, X9
	276 Add X0, X8, 312
	277 Move X8, [X0]
	278 Move X1, [X0+8]
	279 Move X0, X20
	280 NotImplemented "Instruction BLR not yet implemented."
	281 Compare X21, 0
	282 JumpIfNotEqual {348}
	283 NotImplemented "Instruction CMP not yet implemented."
	284 Compare W22, 0
	285 JumpIfNotEqual {330}
	286 Move X0, X19
	287 Call ProBuilderMesh.get_mesh, X0
	288 Compare X0, 0
	289 JumpIfEqual {345}
	290 Move X1, [X19+96]
	291 Move X2, X31
	292 Call Mesh.set_uv, X0, X1
	293 Move W1, 8
	294 Move X0, X19
	295 Call ProBuilderMesh.HasArrays, X0, X1
	296 Move TEMP, X0
	297 And TEMP, TEMP, 1
	298 Compare TEMP, 1
	299 JumpIfNotEqual {308}
	300 Move X0, X19
	301 Call ProBuilderMesh.get_mesh, X0
	302 Compare X0, 0
	303 JumpIfEqual {345}
	304 Move X2, [X19+104]
	305 Move W1, 2
	306 Move X3, X31
	307 Call Mesh.SetUVs, X0, X1, X2
	308 Move W1, 16
	309 Move X0, X19
	310 Call ProBuilderMesh.HasArrays, X0, X1
	311 Move TEMP, X0
	312 And TEMP, TEMP, 1
	313 Compare TEMP, 1
	314 JumpIfNotEqual {323}
	315 Move X0, X19
	316 Call ProBuilderMesh.get_mesh, X0
	317 Compare X0, 0
	318 JumpIfEqual {345}
	319 Move X2, [X19+112]
	320 Move W1, 3
	321 Move X3, X31
	322 Call Mesh.SetUVs, X0, X1, X2
	323 NotImplemented "Instruction LDRH not yet implemented."
	324 Move W9, 1
	325 Add W10, W8, 1
	326 And W31, W10, 0x10000
	327 NotImplemented "Instruction CSINC not yet implemented."
	328 NotImplemented "Instruction STRH not yet implemented."
	329 NotImplemented "Instruction STRH not yet implemented."
	330 Move X20, [X31+144]
	331 Move X19, [X31+152]
	332 Move X22, [X31+128]
	333 Move X21, [X31+136]
	334 Move X24, [X31+112]
	335 Move X23, [X31+120]
	336 Move X26, [X31+96]
	337 Move X25, [X31+104]
	338 Move X28, [X31+80]
	339 Move X27, [X31+88]
	340 Move X29, [X31+64]
	341 Move X30, [X31+72]
	342 Add X31, X31, 160
	343 Return 
	344 Call 0x1C17F20
	345 Call 0x1C17F20
	346 Call 0x1C17F28
	347 Call 0x1C17F20
	348 Move X0, X21
	349 Call 0x1C17F18
	350 Call 0x1C17F20
	351 Call 0x1C17F20
	352 NotImplemented "Instruction CMP not yet implemented."
	353 Call 0x3EB2AD0
	354 Move X21, [X0]
	355 Call 0x3EB2AE0
	356 Move W22, W31
	357 Compare X20, 0
	358 JumpIfNotEqual {258}
	359 Move X19, X0
	360 Move X21, X31
	361 Move X19, X0
	362 Compare X20, 0
	363 JumpIfEqual {387}
	364 Move X8, [X20]
	365 Move X10, 0x7D9000
	366 NotImplemented "Instruction LDRH not yet implemented."
	367 Move X10, [X10+3584]
	368 Move X1, [X10]
	369 Compare X9, 0
	370 JumpIfEqual {377}
	371 Move X10, [X8+176]
	372 Add X10, X10, 8
	373 NotImplemented "Instruction LDUR not yet implemented."
	374 NotImplemented "Instruction CMP not yet implemented."
	375 Subtract X9, X9, 1
	376 Add X10, X10, 16
	377 Move X0, X20
	378 Move W2, W31
	379 Call 0x1C5D788
	380 NotImplemented "Instruction LDRSW not yet implemented."
	381 Add X8, X8, X9
	382 Add X0, X8, 312
	383 Move X8, [X0]
	384 Move X1, [X0+8]
	385 Move X0, X20
	386 NotImplemented "Instruction BLR not yet implemented."
	387 Compare X21, 0
	388 JumpIfNotEqual {391}
	389 Move X0, X19
	390 Call 0x1D2D690
	391 Move X0, X21
	392 Call 0x1C17F18
	393 Call 0x1991590

Method: System.Void SetGroupUV(UnityEngine.ProBuilder.AutoUnwrapSettings settings, System.Int32 group)

Disassembly:
	0x0391BC38 STRB W8, [X21 + 0x88B]
	0x0391BC3C CBZ X19, 0x391BF78
	0x0391BC40 CBZ X20, 0x391BF98
	0x0391BC44 LDR W8, [X20 + 0x1C]
	0x0391BC48 ADRP X27, 0x833000
	0x0391BC4C LDR X27, [X27 + 0x528]
	0x0391BC50 ADD W8, W8, 0x1
	0x0391BC54 STP W31, W8, [X20 + 0x18]
	0x0391BC58 LDR X0, [X27]
	0x0391BC5C LDR W8, [X0 + 0xE0]
	0x0391BC60 CBNZ W8, 0x391BC6C
	0x0391BC64 BL 0x1C16DFC
	0x0391BC68 LDR X0, [X27]
	0x0391BC6C LDR X8, [X0 + 0xB8]
	0x0391BC70 LDR X0, [X8 + 0x28]
	0x0391BC74 CBZ X0, 0x391BFE0
	0x0391BC78 ADRP X8, 0x7DF000
	0x0391BC7C LDR X8, [X8 + 0x678]
	0x0391BC80 ADRP X21, 0x800000
	0x0391BC84 LDR X1, [X8]
	0x0391BC88 LDR X21, [X21 + 0x7B8]
	0x0391BC8C BL 0x2DAA53C
	0x0391BC90 LDR X0, [X31 + 0x8]
	0x0391BC94 BL 0x3916198
	0x0391BC98 LDR X8, [X19]
	0x0391BC9C LDR X1, [X21]
	0x0391BCA0 MOV X22, X0
	0x0391BCA4 LDRH W9, [X8 + 0x12E]
	0x0391BCA8 CBZ X9, 0x391BCCC
	0x0391BCAC LDR X10, [X8 + 0xB0]
	0x0391BCB0 ADD X10, X10, 0x8
	0x0391BCB4 LDUR X11, [X10 - 0x8]
	0x0391BCB8 CMP X11, X1
	0x0391BCBC B.EQ 0x391BCDC
	0x0391BCC0 SUBS X9, X9, 0x1
	0x0391BCC4 ADD X10, X10, 0x10
	0x0391BCC8 B.NE 0x391BCB4
	0x0391BCCC MOV X0, X19
	0x0391BCD0 MOV W2, W31
	0x0391BCD4 BL 0x1C5C788
	0x0391BCD8 B 0x391BCE8
	0x0391BCDC LDRSW X9, [X10]
	0x0391BCE0 ADD X8, X8, X9, 0x4, LSL
	0x0391BCE4 ADD X0, X8, 0x138
	0x0391BCE8 LDP X8, X1, [X0]
	0x0391BCEC MOV X0, X19
	0x0391BCF0 BLR X8
	0x0391BCF4 MOV X19, X0
	0x0391BCF8 CBZ X0, 0x391BFE4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xAC7000
	008 Move X23, 0x834000
	009 Move W8, [X22+2177]
	010 Move X23, [X23+1320]
	011 Move W19, W2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x834000
	019 Move X0, [X0+1320]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2177], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X8, [X21+40]
	030 Compare X8, 0
	031 JumpIfEqual {57}
	032 Move W10, [X8+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W9, W31
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Add X10, X8, W9
	037 Move X10, [X10+32]
	038 Compare X10, 0
	039 JumpIfEqual {57}
	040 Move W11, [X10+84]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move V1, [X20]
	043 Move V0, [X20+16]
	044 Move [X10+44], V0
	045 Move [X10+28], V1
	046 Move W10, [X8+24]
	047 Add W9, W9, 1
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Move X23, [X31+56]
	055 Return 
	056 Call 0x1C17F28
	057 Call 0x1C17F20

Method: System.Void RefreshColors()

Disassembly:
	0x0391B92C LDRSW X9, [X10]
	0x0391B930 ADD X8, X8, X9, 0x4, LSL
	0x0391B934 ADD X0, X8, 0x138
	0x0391B938 LDP X8, X1, [X0]
	0x0391B93C MOV X0, X20
	0x0391B940 BLR X8
	0x0391B944 MOV W1, W0
	0x0391B948 CBZ X21, 0x391B9F0
	0x0391B94C LDR X2, [X25]
	0x0391B950 MOV X0, X21
	0x0391B954 BL 0x2A0A2A8
	0x0391B958 MOV W1, W0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call ProBuilderMesh.get_filter, X0
	005 Compare X0, 0
	006 JumpIfEqual {17}
	007 Move X1, X31
	008 Call MeshFilter.get_sharedMesh, X0
	009 Compare X0, 0
	010 JumpIfEqual {17}
	011 Move X1, [X19+136]
	012 Move X2, X31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call Mesh.set_colors, X0, X1
	016 Return 
	017 Call 0x1C17F20

Method: System.Void SetFaceColor(UnityEngine.ProBuilder.Face face, UnityEngine.Color color)

Disassembly:
	0x0391BCFC ADRP X28, 0x7D8000
	0x0391BD00 ADRP X26, 0x832000
	0x0391BD04 ADRP X21, 0x7DA000
	0x0391BD08 ADRP X29, 0x7D9000
	0x0391BD0C LDR X28, [X28 + 0xE18]
	0x0391BD10 LDR X26, [X26 + 0xC80]
	0x0391BD14 LDR X21, [X21 + 0x9D8]
	0x0391BD18 LDR X29, [X29 + 0xE10]
	0x0391BD1C LDR X8, [X19]
	0x0391BD20 LDR X1, [X28]
	0x0391BD24 LDRH W9, [X8 + 0x12E]
	0x0391BD28 CBZ X9, 0x391BD4C
	0x0391BD2C LDR X10, [X8 + 0xB0]
	0x0391BD30 ADD X10, X10, 0x8
	0x0391BD34 LDUR X11, [X10 - 0x8]
	0x0391BD38 CMP X11, X1
	0x0391BD3C B.EQ 0x391BD5C
	0x0391BD40 SUBS X9, X9, 0x1
	0x0391BD44 ADD X10, X10, 0x10
	0x0391BD48 B.NE 0x391BD34
	0x0391BD4C MOV X0, X19
	0x0391BD50 MOV W2, W31
	0x0391BD54 BL 0x1C5C788
	0x0391BD58 B 0x391BD68
	0x0391BD5C LDRSW X9, [X10]
	0x0391BD60 ADD X8, X8, X9, 0x4, LSL
	0x0391BD64 ADD X0, X8, 0x138
	0x0391BD68 LDP X8, X1, [X0]
	0x0391BD6C MOV X0, X19
	0x0391BD70 BLR X8
	0x0391BD74 TBZ X0, 0x0, 0x391BED4
	0x0391BD78 LDR X8, [X19]
	0x0391BD7C ADRP X10, 0x800000
	0x0391BD80 LDRH W9, [X8 + 0x12E]
	0x0391BD84 LDR X10, [X10 + 0x7C0]
	0x0391BD88 LDR X1, [X10]
	0x0391BD8C CBZ X9, 0x391BDB0
	0x0391BD90 LDR X10, [X8 + 0xB0]
	0x0391BD94 ADD X10, X10, 0x8
	0x0391BD98 LDUR X11, [X10 - 0x8]
	0x0391BD9C CMP X11, X1
	0x0391BDA0 B.EQ 0x391BDC0
	0x0391BDA4 SUBS X9, X9, 0x1
	0x0391BDA8 ADD X10, X10, 0x10
	0x0391BDAC B.NE 0x391BD98
	0x0391BDB0 MOV X0, X19
	0x0391BDB4 MOV W2, W31
	0x0391BDB8 BL 0x1C5C788
	0x0391BDBC B 0x391BDCC
	0x0391BDC0 LDRSW X9, [X10]
	0x0391BDC4 ADD X8, X8, X9, 0x4, LSL
	0x0391BDC8 ADD X0, X8, 0x138
	0x0391BDCC LDP X8, X1, [X0]
	0x0391BDD0 MOV X0, X19
	0x0391BDD4 BLR X8
	0x0391BDD8 MOV W1, W0
	0x0391BDDC CBZ X22, 0x391BF64
	0x0391BDE0 LDR X2, [X26]
	0x0391BDE4 MOV X0, X22
	0x0391BDE8 BL 0x2A0A2A8
	0x0391BDEC MOV W23, W0
	0x0391BDF0 LDR X0, [X27]
	0x0391BDF4 LDR W8, [X0 + 0xE0]
	0x0391BDF8 CBNZ W8, 0x391BE04
	0x0391BDFC BL 0x1C16DFC
	0x0391BE00 LDR X0, [X27]
	0x0391BE04 LDR X8, [X0 + 0xB8]
	0x0391BE08 LDR X0, [X8 + 0x28]
	0x0391BE0C CBZ X0, 0x391BF68
	0x0391BE10 LDR X2, [X21]
	0x0391BE14 MOV W1, W23
	0x0391BE18 BL 0x2DAB03C
	0x0391BE1C TBZ X0, 0x0, 0x391BD1C
	0x0391BE20 LDR X8, [X31 + 0x8]
	0x0391BE24 LDR X8, [X8 + 0x30]
	0x0391BE28 CBZ X8, 0x391BF6C
	0x0391BE2C LDR W9, [X8 + 0x18]
	0x0391BE30 CMP W23, W9
	0x0391BE34 B.CS 0x391BF74
	0x0391BE38 ADD X8, X8, W23, 0x3, SXTW
	0x0391BE3C LDR X23, [X8 + 0x20]
	0x0391BE40 CBZ X23, 0x391BF70
	0x0391BE44 MOV X0, X23
	0x0391BE48 MOV X1, X31
	0x0391BE4C BL 0x393492C
	0x0391BE50 MOV W24, W0
	0x0391BE54 CMP W0, 0x1
	0x0391BE58 B.LT 0x391BD1C
	0x0391BE5C MOV W25, W31
	0x0391BE60 MOV X0, X23
	0x0391BE64 MOV W1, W25
	0x0391BE68 MOV X2, X31
	0x0391BE6C BL 0x39282DC
	0x0391BE70 MOV W1, W0
	0x0391BE74 LDR W10, [X20 + 0x1C]
	0x0391BE78 LDR X8, [X20 + 0x10]
	0x0391BE7C LDR X9, [X29]
	0x0391BE80 ADD W10, W10, 0x1
	0x0391BE84 STR W10, [X20 + 0x1C]
	0x0391BE88 CBZ X8, 0x391BF60
	0x0391BE8C LDRSW X10, [X20 + 0x18]
	0x0391BE90 LDR W11, [X8 + 0x18]
	0x0391BE94 CMP W10, W11
	0x0391BE98 B.CS 0x391BEB0
	0x0391BE9C ADD W9, W10, 0x1
	0x0391BEA0 ADD X8, X8, X10, 0x2, LSL
	0x0391BEA4 STR W9, [X20 + 0x18]
	0x0391BEA8 STR W1, [X8 + 0x20]
	0x0391BEAC B 0x391BEC4
	0x0391BEB0 LDR X8, [X9 + 0x20]
	0x0391BEB4 LDR X8, [X8 + 0xC0]
	0x0391BEB8 LDR X2, [X8 + 0x70]
	0x0391BEBC MOV X0, X20
	0x0391BEC0 BL 0x2FDC70C
	0x0391BEC4 ADD W25, W25, 0x1
	0x0391BEC8 CMP W24, W25
	0x0391BECC B.NE 0x391BE60
	0x0391BED0 B 0x391BD1C
	0x0391BED4 MOV X21, X31
	0x0391BED8 CBZ X19, 0x391BF3C
	0x0391BEDC LDR X8, [X19]
	0x0391BEE0 ADRP X10, 0x7D8000
	0x0391BEE4 LDRH W9, [X8 + 0x12E]
	0x0391BEE8 LDR X10, [X10 + 0xE00]
	0x0391BEEC LDR X1, [X10]
	0x0391BEF0 CBZ X9, 0x391BF14
	0x0391BEF4 LDR X10, [X8 + 0xB0]
	0x0391BEF8 ADD X10, X10, 0x8
	0x0391BEFC LDUR X11, [X10 - 0x8]
	0x0391BF00 CMP X11, X1
	0x0391BF04 B.EQ 0x391BF24
	0x0391BF08 SUBS X9, X9, 0x1
	0x0391BF0C ADD X10, X10, 0x10
	0x0391BF10 B.NE 0x391BEFC
	0x0391BF14 MOV X0, X19
	0x0391BF18 MOV W2, W31
	0x0391BF1C BL 0x1C5C788
	0x0391BF20 B 0x391BF30
	0x0391BF24 LDRSW X9, [X10]
	0x0391BF28 ADD X8, X8, X9, 0x4, LSL
	0x0391BF2C ADD X0, X8, 0x138
	0x0391BF30 LDP X8, X1, [X0]
	0x0391BF34 MOV X0, X19
	0x0391BF38 BLR X8
	0x0391BF3C CBNZ X21, 0x391BFE8
	0x0391BF40 LDP X20, X19, [X31 + 0x60]
	0x0391BF44 LDP X22, X21, [X31 + 0x50]
	0x0391BF48 LDP X24, X23, [X31 + 0x40]
	0x0391BF4C LDP X26, X25, [X31 + 0x30]
	0x0391BF50 LDP X28, X27, [X31 + 0x20]
	0x0391BF54 LDP X29, X30, [X31 + 0x10]
	0x0391BF58 ADD X31, X31, 0x70
	0x0391BF5C RET
	0x0391BF60 BL 0x1C16F20
	0x0391BF64 BL 0x1C16F20
	0x0391BF68 BL 0x1C16F20
	0x0391BF6C BL 0x1C16F20
	0x0391BF70 BL 0x1C16F20
	0x0391BF74 BL 0x1C16F28
	0x0391BF78 ADRP X0, 0x7DD000
	0x0391BF7C LDR X0, [X0 + 0x528]
	0x0391BF80 BL 0x1C16D08
	0x0391BF84 BL 0x1C16F10
	0x0391BF88 MOV X19, X0
	0x0391BF8C ADRP X0, 0x833000
	0x0391BF90 LDR X0, [X0 + 0x450]
	0x0391BF94 B 0x391BFB4
	0x0391BF98 ADRP X0, 0x7DD000
	0x0391BF9C LDR X0, [X0 + 0x528]
	0x0391BFA0 BL 0x1C16D08
	0x0391BFA4 BL 0x1C16F10
	0x0391BFA8 MOV X19, X0
	0x0391BFAC ADRP X0, 0x833000
	0x0391BFB0 LDR X0, [X0 + 0x630]
	0x0391BFB4 BL 0x1C16D08
	0x0391BFB8 MOV X1, X0
	0x0391BFBC MOV X0, X19
	0x0391BFC0 MOV X2, X31
	0x0391BFC4 BL 0x330E100
	0x0391BFC8 ADRP X0, 0x833000
	0x0391BFCC LDR X0, [X0 + 0x638]
	0x0391BFD0 BL 0x1C16D08
	0x0391BFD4 MOV X1, X0
	0x0391BFD8 MOV X0, X19
	0x0391BFDC BL 0x1C16DEC
	0x0391BFE0 BL 0x1C16F20
	0x0391BFE4 BL 0x1C16F20
	0x0391BFE8 MOV X0, X21
	0x0391BFEC BL 0x1C16F18
	0x0391BFF0 B 0x391C020
	0x0391BFF4 B 0x391C020
	0x0391BFF8 B 0x391C020
	0x0391BFFC B 0x391C020
	0x0391C000 B 0x391C020
	0x0391C004 B 0x391C020
	0x0391C008 B 0x391C020
	0x0391C00C B 0x391C020
	0x0391C010 B 0x391C020
	0x0391C014 B 0x391C020
	0x0391C018 B 0x391C020
	0x0391C01C B 0x391C020
	0x0391C020 MOV X20, X0
	0x0391C024 CMP W1, 0x1
	0x0391C028 B.NE 0x391C040
	0x0391C02C MOV X0, X20
	0x0391C030 BL 0x3EB1AD0
	0x0391C034 LDR X21, [X0]
	0x0391C038 BL 0x3EB1AE0
	0x0391C03C B 0x391BED8
	0x0391C040 MOV X21, X31
	0x0391C044 B 0x391C04C
	0x0391C048 MOV X20, X0
	0x0391C04C CBZ X19, 0x391C0B0
	0x0391C050 LDR X8, [X19]
	0x0391C054 ADRP X10, 0x7D7000
	0x0391C058 LDRH W9, [X8 + 0x12E]
	0x0391C05C LDR X10, [X10 + 0xE00]
	0x0391C060 LDR X1, [X10]
	0x0391C064 CBZ X9, 0x391C088
	0x0391C068 LDR X10, [X8 + 0xB0]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0xAC7000
	013 Move W8, [X21+2178]
	014 Move V8, V3
	015 Move V9, V2
	016 Move V10, V1
	017 Move V11, V0
	018 Move X19, X1
	019 Move X20, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {41}
	024 Move X0, 0x834000
	025 Move X0, [X0+1152]
	026 Call 0x1C17CF4
	027 Move X0, 0x7D9000
	028 Move X0, [X0+3584]
	029 Call 0x1C17CF4
	030 Move X0, 0x801000
	031 Move X0, [X0+1984]
	032 Call 0x1C17CF4
	033 Move X0, 0x7D9000
	034 Move X0, [X0+3608]
	035 Call 0x1C17CF4
	036 Move X0, 0x834000
	037 Move X0, [X0+1528]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X21+2178], W8
	041 Compare X19, 0
	042 JumpIfEqual {179}
	043 Move W1, 32
	044 Move X0, X20
	045 Call ProBuilderMesh.HasArrays, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {64}
	050 Move X8, [X20+88]
	051 Compare X8, 0
	052 JumpIfEqual {54}
	053 Move W0, [X8+24]
	054 Move W0, W31
	055 Move X8, 0x834000
	056 Move X8, [X8+1152]
	057 Move S0, 1
	058 Move S1, 1
	059 Move S2, 1
	060 Move X1, [X8]
	061 Move S3, 1
	062 Call 0x217F698, X0, X1
	063 Move [X20+136], X0
	064 Move X0, X19
	065 Move X1, X31
	066 Call Face.get_distinctIndexes, X0
	067 Compare X0, 0
	068 JumpIfEqual {197}
	069 Move X8, 0x834000
	070 Move X8, [X8+1528]
	071 Move X21, 0x7D9000
	072 Move X1, [X8]
	073 Move X21, [X21+3584]
	074 Call ReadOnlyCollection`1<Int32>.GetEnumerator, X0
	075 Move X19, X0
	076 Compare X0, 0
	077 JumpIfEqual {198}
	078 Move X22, 0x7D9000
	079 Move X23, 0x801000
	080 Move X22, [X22+3608]
	081 Move X23, [X23+1984]
	082 Move X8, [X19]
	083 Move X1, [X22]
	084 NotImplemented "Instruction LDRH not yet implemented."
	085 Compare X9, 0
	086 JumpIfEqual {93}
	087 Move X10, [X8+176]
	088 Add X10, X10, 8
	089 NotImplemented "Instruction LDUR not yet implemented."
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Subtract X9, X9, 1
	092 Add X10, X10, 16
	093 Move X0, X19
	094 Move W2, W31
	095 Call 0x1C5D788
	096 NotImplemented "Instruction LDRSW not yet implemented."
	097 Add X8, X8, X9
	098 Add X0, X8, 312
	099 Move X8, [X0]
	100 Move X1, [X0+8]
	101 Move X0, X19
	102 NotImplemented "Instruction BLR not yet implemented."
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {139}
	107 Move X8, [X19]
	108 Move X1, [X23]
	109 NotImplemented "Instruction LDRH not yet implemented."
	110 Compare X9, 0
	111 JumpIfEqual {118}
	112 Move X10, [X8+176]
	113 Add X10, X10, 8
	114 NotImplemented "Instruction LDUR not yet implemented."
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Subtract X9, X9, 1
	117 Add X10, X10, 16
	118 Move X0, X19
	119 Move W2, W31
	120 Call 0x1C5D788
	121 NotImplemented "Instruction LDRSW not yet implemented."
	122 Add X8, X8, X9
	123 Add X0, X8, 312
	124 Move X8, [X0]
	125 Move X1, [X0+8]
	126 Move X0, X19
	127 NotImplemented "Instruction BLR not yet implemented."
	128 Move X8, [X20+136]
	129 Compare X8, 0
	130 JumpIfEqual {177}
	131 Move W9, [X8+24]
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move X9, W0
	134 Add X8, X8, X9
	135 Move [X8+32], S11
	136 Move [X8+40], S10
	137 Move [X8+40], S9
	138 Move [X8+48], S8
	139 Move X20, X31
	140 Compare X19, 0
	141 JumpIfEqual {163}
	142 Move X8, [X19]
	143 Move X1, [X21]
	144 NotImplemented "Instruction LDRH not yet implemented."
	145 Compare X9, 0
	146 JumpIfEqual {153}
	147 Move X10, [X8+176]
	148 Add X10, X10, 8
	149 NotImplemented "Instruction LDUR not yet implemented."
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Subtract X9, X9, 1
	152 Add X10, X10, 16
	153 Move X0, X19
	154 Move W2, W31
	155 Call 0x1C5D788
	156 NotImplemented "Instruction LDRSW not yet implemented."
	157 Add X8, X8, X9
	158 Add X0, X8, 312
	159 Move X8, [X0]
	160 Move X1, [X0+8]
	161 Move X0, X19
	162 NotImplemented "Instruction BLR not yet implemented."
	163 Compare X20, 0
	164 JumpIfNotEqual {199}
	165 Move X20, [X31+80]
	166 Move X19, [X31+88]
	167 Move X22, [X31+64]
	168 Move X21, [X31+72]
	169 Move X30, [X31+48]
	170 Move X23, [X31+56]
	171 Move D9, [X31+32]
	172 Move D8, [X31+40]
	173 Move D11, [X31+16]
	174 Move D10, [X31+24]
	175 Add X31, X31, 96
	176 Return 
	177 Call 0x1C17F20
	178 Call 0x1C17F28
	179 Move X0, 0x7DE000
	180 Move X0, [X0+1320]
	181 Call 0x1C17D08
	182 Call 0x1C17F10
	183 Move X19, X0
	184 Move X0, 0x834000
	185 Move X0, [X0+1536]
	186 Call 0x1C17D08
	187 Move X1, X0
	188 Move X0, X19
	189 Move X2, X31
	190 Call ArgumentNullException..ctor, X0, X1
	191 Move X0, 0x834000
	192 Move X0, [X0+1544]
	193 Call 0x1C17D08
	194 Move X1, X0
	195 Move X0, X19
	196 Call 0x1C17DEC
	197 Call 0x1C17F20
	198 Call 0x1C17F20
	199 Move X0, X20
	200 Call 0x1C17F18
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Call 0x3EB2AD0
	203 Move X20, [X0]
	204 Call 0x3EB2AE0
	205 Move [X31+8], X0
	206 Move X20, X31
	207 Move [X31+8], X0
	208 Compare X19, 0
	209 JumpIfEqual {231}
	210 Move X8, [X19]
	211 Move X1, [X21]
	212 NotImplemented "Instruction LDRH not yet implemented."
	213 Compare X9, 0
	214 JumpIfEqual {221}
	215 Move X10, [X8+176]
	216 Add X10, X10, 8
	217 NotImplemented "Instruction LDUR not yet implemented."
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Subtract X9, X9, 1
	220 Add X10, X10, 16
	221 Move X0, X19
	222 Move W2, W31
	223 Call 0x1C5D788
	224 NotImplemented "Instruction LDRSW not yet implemented."
	225 Add X8, X8, X9
	226 Add X0, X8, 312
	227 Move X8, [X0]
	228 Move X1, [X0+8]
	229 Move X0, X19
	230 NotImplemented "Instruction BLR not yet implemented."
	231 Compare X20, 0
	232 JumpIfNotEqual {235}
	233 Move X0, [X31+8]
	234 Call 0x1D2D690
	235 Move X0, X20
	236 Call 0x1C17F18
	237 Call 0x1991590

Method: System.Void SetMaterial(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> faces, UnityEngine.Material material)

Disassembly:
	0x0391C06C ADD X10, X10, 0x8
	0x0391C070 LDUR X11, [X10 - 0x8]
	0x0391C074 CMP X11, X1
	0x0391C078 B.EQ 0x391C098
	0x0391C07C SUBS X9, X9, 0x1
	0x0391C080 ADD X10, X10, 0x10
	0x0391C084 B.NE 0x391C070
	0x0391C088 MOV X0, X19
	0x0391C08C MOV W2, W31
	0x0391C090 BL 0x1C5C788
	0x0391C094 B 0x391C0A4
	0x0391C098 LDRSW X9, [X10]
	0x0391C09C ADD X8, X8, X9, 0x4, LSL
	0x0391C0A0 ADD X0, X8, 0x138
	0x0391C0A4 LDP X8, X1, [X0]
	0x0391C0A8 MOV X0, X19
	0x0391C0AC BLR X8
	0x0391C0B0 CBNZ X21, 0x391C0BC
	0x0391C0B4 MOV X0, X20
	0x0391C0B8 BL 0x1D2C690
	0x0391C0BC MOV X0, X21
	0x0391C0C0 BL 0x1C16F18
	0x0391C0C4 BL 0x1990590
	0x0391C0C8 SUB X31, X31, 0x70
	0x0391C0CC STP X29, X30, [X31 + 0x10]
	0x0391C0D0 STP X28, X27, [X31 + 0x20]
	0x0391C0D4 STP X26, X25, [X31 + 0x30]
	0x0391C0D8 STP X24, X23, [X31 + 0x40]
	0x0391C0DC STP X22, X21, [X31 + 0x50]
	0x0391C0E0 STP X20, X19, [X31 + 0x60]
	0x0391C0E4 ADRP X21, 0xAC5000
	0x0391C0E8 LDRB W8, [X21 + 0x889]
	0x0391C0EC MOV X20, X2
	0x0391C0F0 MOV X19, X1
	0x0391C0F4 STR X0, [X31 + 0x8]
	0x0391C0F8 TBNZ X8, 0x0, 0x391C17C
	0x0391C0FC ADRP X0, 0x831000
	0x0391C100 LDR X0, [X0 + 0xC80]
	0x0391C104 BL 0x1C16CF4
	0x0391C108 ADRP X0, 0x7D9000
	0x0391C10C LDR X0, [X0 + 0x9D8]
	0x0391C110 BL 0x1C16CF4
	0x0391C114 ADRP X0, 0x7DE000
	0x0391C118 LDR X0, [X0 + 0x678]
	0x0391C11C BL 0x1C16CF4
	0x0391C120 ADRP X0, 0x7D7000
	0x0391C124 LDR X0, [X0 + 0xE00]
	0x0391C128 BL 0x1C16CF4
	0x0391C12C ADRP X0, 0x831000
	0x0391C130 LDR X0, [X0 + 0xDB0]
	0x0391C134 BL 0x1C16CF4
	0x0391C138 ADRP X0, 0x831000
	0x0391C13C LDR X0, [X0 + 0xDB8]
	0x0391C140 BL 0x1C16CF4
	0x0391C144 ADRP X0, 0x7D7000
	0x0391C148 LDR X0, [X0 + 0xE18]
	0x0391C14C BL 0x1C16CF4
	0x0391C150 ADRP X0, 0x7D8000
	0x0391C154 LDR X0, [X0 + 0xE10]
	0x0391C158 BL 0x1C16CF4
	0x0391C15C ADRP X0, 0x7DE000
	0x0391C160 LDR X0, [X0 + 0x858]
	0x0391C164 BL 0x1C16CF4
	0x0391C168 ADRP X0, 0x832000
	0x0391C16C LDR X0, [X0 + 0x528]
	0x0391C170 BL 0x1C16CF4
	0x0391C174 MOVZ W8, 0x1
	0x0391C178 STRB W8, [X21 + 0x889]
	0x0391C17C CBZ X19, 0x391C518
	0x0391C180 CBZ X20, 0x391C538
	0x0391C184 LDR W8, [X20 + 0x1C]
	0x0391C188 ADRP X28, 0x832000
	0x0391C18C LDR X28, [X28 + 0x528]
	0x0391C190 ADD W8, W8, 0x1
	0x0391C194 STP W31, W8, [X20 + 0x18]
	0x0391C198 LDR X0, [X28]
	0x0391C19C LDR W8, [X0 + 0xE0]
	0x0391C1A0 CBNZ W8, 0x391C1AC
	0x0391C1A4 BL 0x1C16DFC
	0x0391C1A8 LDR X0, [X28]
	0x0391C1AC LDR X8, [X0 + 0xB8]
	0x0391C1B0 LDR X0, [X8 + 0x28]
	0x0391C1B4 CBZ X0, 0x391C580
	0x0391C1B8 ADRP X8, 0x7DE000
	0x0391C1BC LDR X8, [X8 + 0x678]
	0x0391C1C0 ADRP X21, 0x831000
	0x0391C1C4 LDR X1, [X8]
	0x0391C1C8 LDR X21, [X21 + 0xDB0]
	0x0391C1CC BL 0x2DAA53C
	0x0391C1D0 LDR X0, [X31 + 0x8]
	0x0391C1D4 BL 0x3916198
	0x0391C1D8 LDR X8, [X19]
	0x0391C1DC LDR X1, [X21]
	0x0391C1E0 MOV X22, X0
	0x0391C1E4 LDRH W9, [X8 + 0x12E]
	0x0391C1E8 CBZ X9, 0x391C20C
	0x0391C1EC LDR X10, [X8 + 0xB0]
	0x0391C1F0 ADD X10, X10, 0x8
	0x0391C1F4 LDUR X11, [X10 - 0x8]
	0x0391C1F8 CMP X11, X1
	0x0391C1FC B.EQ 0x391C21C
	0x0391C200 SUBS X9, X9, 0x1
	0x0391C204 ADD X10, X10, 0x10
	0x0391C208 B.NE 0x391C1F4
	0x0391C20C MOV X0, X19
	0x0391C210 MOV W2, W31
	0x0391C214 BL 0x1C5C788
	0x0391C218 B 0x391C228
	0x0391C21C LDRSW X9, [X10]
	0x0391C220 ADD X8, X8, X9, 0x4, LSL
	0x0391C224 ADD X0, X8, 0x138
	0x0391C228 LDP X8, X1, [X0]
	0x0391C22C MOV X0, X19
	0x0391C230 BLR X8
	0x0391C234 STR X0, [X31]
	0x0391C238 CBZ X0, 0x391C584
	0x0391C23C ADRP X27, 0x831000
	0x0391C240 ADRP X29, 0x7D9000
	0x0391C244 ADRP X19, 0x7D8000
	0x0391C248 LDR X27, [X27 + 0xC80]
	0x0391C24C LDR X29, [X29 + 0x9D8]
	0x0391C250 LDR X19, [X19 + 0xE10]
	0x0391C254 LDR X21, [X31]
	0x0391C258 ADRP X10, 0x7D7000
	0x0391C25C LDR X8, [X21]
	0x0391C260 LDRH W9, [X8 + 0x12E]
	0x0391C264 LDR X10, [X10 + 0xE18]
	0x0391C268 LDR X1, [X10]
	0x0391C26C CBZ X9, 0x391C290
	0x0391C270 LDR X10, [X8 + 0xB0]
	0x0391C274 ADD X10, X10, 0x8
	0x0391C278 LDUR X11, [X10 - 0x8]
	0x0391C27C CMP X11, X1
	0x0391C280 B.EQ 0x391C2A0
	0x0391C284 SUBS X9, X9, 0x1
	0x0391C288 ADD X10, X10, 0x10
	0x0391C28C B.NE 0x391C278
	0x0391C290 MOV X0, X21
	0x0391C294 MOV W2, W31
	0x0391C298 BL 0x1C5C788
	0x0391C29C B 0x391C2AC
	0x0391C2A0 LDRSW X9, [X10]
	0x0391C2A4 ADD X8, X8, X9, 0x4, LSL
	0x0391C2A8 ADD X0, X8, 0x138
	0x0391C2AC LDP X8, X1, [X0]
	0x0391C2B0 MOV X0, X21
	0x0391C2B4 BLR X8
	0x0391C2B8 TBZ X0, 0x0, 0x391C45C
	0x0391C2BC LDR X8, [X21]
	0x0391C2C0 ADRP X10, 0x831000
	0x0391C2C4 LDRH W9, [X8 + 0x12E]
	0x0391C2C8 LDR X10, [X10 + 0xDB8]
	0x0391C2CC LDR X1, [X10]
	0x0391C2D0 CBZ X9, 0x391C2F4
	0x0391C2D4 LDR X10, [X8 + 0xB0]
	0x0391C2D8 ADD X10, X10, 0x8
	0x0391C2DC LDUR X11, [X10 - 0x8]
	0x0391C2E0 CMP X11, X1
	0x0391C2E4 B.EQ 0x391C304
	0x0391C2E8 SUBS X9, X9, 0x1
	0x0391C2EC ADD X10, X10, 0x10
	0x0391C2F0 B.NE 0x391C2DC
	0x0391C2F4 MOV X0, X21
	0x0391C2F8 MOV W2, W31
	0x0391C2FC BL 0x1C5C788
	0x0391C300 B 0x391C310
	0x0391C304 LDRSW X9, [X10]
	0x0391C308 ADD X8, X8, X9, 0x4, LSL
	0x0391C30C ADD X0, X8, 0x138
	0x0391C310 LDP X8, X1, [X0]
	0x0391C314 MOV X0, X21
	0x0391C318 BLR X8
	0x0391C31C CBZ X0, 0x391C510
	0x0391C320 MOV X1, X31
	0x0391C324 BL 0x38FF530
	0x0391C328 MOV X23, X0
	0x0391C32C CBZ X0, 0x391C514
	0x0391C330 LDR X8, [X23 + 0x18]
	0x0391C334 CMP W8, 0x1
	0x0391C338 B.LT 0x391C254
	0x0391C33C MOV X21, X31
	0x0391C340 AND X8, X8, 0x0
	0x0391C344 CMP X21, W8, UXTW
	0x0391C348 B.CS 0x391C500
	0x0391C34C CBZ X22, 0x391C4FC
	0x0391C350 ADD X8, X23, X21, 0x2, LSL
	0x0391C354 LDR W1, [X8 + 0x20]
	0x0391C358 LDR X2, [X27]
	0x0391C35C MOV X0, X22
	0x0391C360 BL 0x2A0A2A8
	0x0391C364 MOV W24, W0
	0x0391C368 LDR X0, [X28]
	0x0391C36C LDR W8, [X0 + 0xE0]
	0x0391C370 CBNZ W8, 0x391C37C
	0x0391C374 BL 0x1C16DFC
	0x0391C378 LDR X0, [X28]
	0x0391C37C LDR X8, [X0 + 0xB8]
	0x0391C380 LDR X0, [X8 + 0x28]
	0x0391C384 CBZ X0, 0x391C4F8
	0x0391C388 LDR X2, [X29]
	0x0391C38C MOV W1, W24
	0x0391C390 BL 0x2DAB03C
	0x0391C394 TBZ X0, 0x0, 0x391C448
	0x0391C398 LDR X8, [X31 + 0x8]
	0x0391C39C LDR X8, [X8 + 0x30]
	0x0391C3A0 CBZ X8, 0x391C504
	0x0391C3A4 LDR W9, [X8 + 0x18]
	0x0391C3A8 CMP W24, W9
	0x0391C3AC B.CS 0x391C50C
	0x0391C3B0 ADD X8, X8, W24, 0x3, SXTW
	0x0391C3B4 LDR X24, [X8 + 0x20]
	0x0391C3B8 CBZ X24, 0x391C508
	0x0391C3BC MOV X0, X24
	0x0391C3C0 MOV X1, X31
	0x0391C3C4 BL 0x393492C
	0x0391C3C8 MOV W25, W0
	0x0391C3CC CMP W0, 0x1
	0x0391C3D0 B.LT 0x391C448
	0x0391C3D4 MOV W26, W31
	0x0391C3D8 MOV X0, X24
	0x0391C3DC MOV W1, W26
	0x0391C3E0 MOV X2, X31
	0x0391C3E4 BL 0x39282DC
	0x0391C3E8 MOV W1, W0
	0x0391C3EC LDR W10, [X20 + 0x1C]
	0x0391C3F0 LDR X8, [X20 + 0x10]
	0x0391C3F4 LDR X9, [X19]
	0x0391C3F8 ADD W10, W10, 0x1
	0x0391C3FC STR W10, [X20 + 0x1C]
	0x0391C400 CBZ X8, 0x391C4F4
	0x0391C404 LDRSW X10, [X20 + 0x18]
	0x0391C408 LDR W11, [X8 + 0x18]
	0x0391C40C CMP W10, W11
	0x0391C410 B.CS 0x391C428
	0x0391C414 ADD W9, W10, 0x1
	0x0391C418 ADD X8, X8, X10, 0x2, LSL
	0x0391C41C STR W9, [X20 + 0x18]
	0x0391C420 STR W1, [X8 + 0x20]
	0x0391C424 B 0x391C43C
	0x0391C428 LDR X8, [X9 + 0x20]
	0x0391C42C LDR X8, [X8 + 0xC0]
	0x0391C430 LDR X2, [X8 + 0x70]
	0x0391C434 MOV X0, X20
	0x0391C438 BL 0x2FDC70C
	0x0391C43C ADD W26, W26, 0x1
	0x0391C440 CMP W25, W26
	0x0391C444 B.NE 0x391C3D8
	0x0391C448 LDR W8, [X23 + 0x18]
	0x0391C44C ADD X21, X21, 0x1
	0x0391C450 CMP X21, W8, SXTW
	0x0391C454 B.LT 0x391C344
	0x0391C458 B 0x391C254
	0x0391C45C MOV X21, X31
	0x0391C460 LDR X8, [X31]
	0x0391C464 CBZ X8, 0x391C4D0
	0x0391C468 LDR X8, [X8]
	0x0391C46C ADRP X10, 0x7D7000
	0x0391C470 LDRH W9, [X8 + 0x12E]
	0x0391C474 LDR X10, [X10 + 0xE00]
	0x0391C478 LDR X1, [X10]
	0x0391C47C CBZ X9, 0x391C4A0
	0x0391C480 LDR X10, [X8 + 0xB0]
	0x0391C484 ADD X10, X10, 0x8
	0x0391C488 LDUR X11, [X10 - 0x8]
	0x0391C48C CMP X11, X1
	0x0391C490 B.EQ 0x391C4B4
	0x0391C494 SUBS X9, X9, 0x1
	0x0391C498 ADD X10, X10, 0x10
	0x0391C49C B.NE 0x391C488
	0x0391C4A0 LDR X19, [X31]
	0x0391C4A4 MOV W2, W31
	0x0391C4A8 MOV X0, X19
	0x0391C4AC BL 0x1C5C788
	0x0391C4B0 B 0x391C4C4
	0x0391C4B4 LDRSW X9, [X10]
	0x0391C4B8 LDR X19, [X31]
	0x0391C4BC ADD X8, X8, X9, 0x4, LSL
	0x0391C4C0 ADD X0, X8, 0x138
	0x0391C4C4 LDP X8, X1, [X0]
	0x0391C4C8 MOV X0, X19
	0x0391C4CC BLR X8
	0x0391C4D0 CBNZ X21, 0x391C588
	0x0391C4D4 LDP X20, X19, [X31 + 0x60]
	0x0391C4D8 LDP X22, X21, [X31 + 0x50]
	0x0391C4DC LDP X24, X23, [X31 + 0x40]
	0x0391C4E0 LDP X26, X25, [X31 + 0x30]
	0x0391C4E4 LDP X28, X27, [X31 + 0x20]
	0x0391C4E8 LDP X29, X30, [X31 + 0x10]
	0x0391C4EC ADD X31, X31, 0x70
	0x0391C4F0 RET
	0x0391C4F4 BL 0x1C16F20
	0x0391C4F8 BL 0x1C16F20
	0x0391C4FC BL 0x1C16F20
	0x0391C500 BL 0x1C16F28
	0x0391C504 BL 0x1C16F20
	0x0391C508 BL 0x1C16F20
	0x0391C50C BL 0x1C16F28
	0x0391C510 BL 0x1C16F20
	0x0391C514 BL 0x1C16F20
	0x0391C518 ADRP X0, 0x7DC000
	0x0391C51C LDR X0, [X0 + 0x528]
	0x0391C520 BL 0x1C16D08
	0x0391C524 BL 0x1C16F10
	0x0391C528 MOV X19, X0
	0x0391C52C ADRP X0, 0x832000
	0x0391C530 LDR X0, [X0 + 0x640]
	0x0391C534 B 0x391C554
	0x0391C538 ADRP X0, 0x7DC000
	0x0391C53C LDR X0, [X0 + 0x528]
	0x0391C540 BL 0x1C16D08
	0x0391C544 BL 0x1C16F10
	0x0391C548 MOV X19, X0
	0x0391C54C ADRP X0, 0x832000
	0x0391C550 LDR X0, [X0 + 0x630]
	0x0391C554 BL 0x1C16D08
	0x0391C558 MOV X1, X0
	0x0391C55C MOV X0, X19
	0x0391C560 MOV X2, X31
	0x0391C564 BL 0x330E100
	0x0391C568 ADRP X0, 0x832000
	0x0391C56C LDR X0, [X0 + 0x648]
	0x0391C570 BL 0x1C16D08
	0x0391C574 MOV X1, X0
	0x0391C578 MOV X0, X19
	0x0391C57C BL 0x1C16DEC
	0x0391C580 BL 0x1C16F20
	0x0391C584 BL 0x1C16F20
	0x0391C588 MOV X0, X21
	0x0391C58C BL 0x1C16F18
	0x0391C590 B 0x391C5D0
	0x0391C594 B 0x391C5D0
	0x0391C598 B 0x391C5D0
	0x0391C59C B 0x391C5D0
	0x0391C5A0 B 0x391C5D0
	0x0391C5A4 B 0x391C5D0
	0x0391C5A8 B 0x391C5D0
	0x0391C5AC B 0x391C5D0
	0x0391C5B0 B 0x391C5D0
	0x0391C5B4 B 0x391C5D0
	0x0391C5B8 B 0x391C5D0
	0x0391C5BC B 0x391C5D0
	0x0391C5C0 B 0x391C5D0
	0x0391C5C4 B 0x391C5D0
	0x0391C5C8 B 0x391C5D0
	0x0391C5CC B 0x391C5D0
	0x0391C5D0 MOV X20, X0
	0x0391C5D4 CMP W1, 0x1

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X19, 0xAC6000
	015 Move W8, [X19+2179]
	016 Move X22, X2
	017 Move X20, X1
	018 Move X27, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {49}
	023 Move X0, 0x833000
	024 Move X0, [X0+1552]
	025 Call 0x1C17CF4
	026 Move X0, 0x7DA000
	027 Move X0, [X0+2488]
	028 Call 0x1C17CF4
	029 Move X0, 0x7D8000
	030 Move X0, [X0+3584]
	031 Call 0x1C17CF4
	032 Move X0, 0x832000
	033 Move X0, [X0+3504]
	034 Call 0x1C17CF4
	035 Move X0, 0x832000
	036 Move X0, [X0+3512]
	037 Call 0x1C17CF4
	038 Move X0, 0x7D8000
	039 Move X0, [X0+3608]
	040 Call 0x1C17CF4
	041 Move X0, 0x7DF000
	042 Move X0, [X0+1952]
	043 Call 0x1C17CF4
	044 Move X0, 0x7D8000
	045 Move X0, [X0+1432]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X19+2179], W8
	049 Move X0, X27
	050 Call ProBuilderMesh.get_renderer, X0
	051 Compare X0, 0
	052 JumpIfEqual {331}
	053 Move X1, X31
	054 Call Renderer.get_sharedMaterials, X0
	055 Compare X0, 0
	056 JumpIfEqual {331}
	057 Move X25, [X0+24]
	058 Move X23, X0
	059 Subtract W24, W25, 1
	060 And X8, X25, 0
	061 Move [X31+8], X20
	062 Compare X8, 0
	063 JumpIfEqual {93}
	064 Move X28, 0x7D8000
	065 Move X28, [X28+1432]
	066 Move X20, X27
	067 Move X27, X31
	068 Move X29, W8
	069 Add X19, X23, 32
	070 Move TEMP, 0
	071 Not TEMP
	072 Move W21, TEMP
	073 Move X0, [X28]
	074 Move X26, [X19]
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {79}
	078 Call 0x1C17DFC
	079 Move X0, X26
	080 Move X1, X22
	081 Move X2, X31
	082 Call Object.op_Equality, X0, X1
	083 And W31, W0, 1
	084 NotImplemented "Instruction CSEL not yet implemented."
	085 Add X27, X27, 1
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move TEMP, X21
	088 And TEMP, TEMP, -2147483648
	089 Compare TEMP, -2147483648
	090 JumpIfNotEqual {94}
	091 Move W8, [X23+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Call 0x1C17F28
	094 Move X27, X20
	095 Move X20, [X31+8]
	096 Move TEMP, X21
	097 And TEMP, TEMP, -2147483648
	098 Compare TEMP, -2147483648
	099 JumpIfNotEqual {196}
	100 Move X8, 0x7DA000
	101 Move X8, [X8+2488]
	102 Move W1, W25
	103 Move X0, [X8]
	104 Call 0x1C17D6C
	105 Move X25, [X27+40]
	106 Compare X25, 0
	107 JumpIfEqual {331}
	108 Move W8, [X25+24]
	109 Move X21, X0
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move W19, W31
	112 Move W26, 1
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Add X8, X25, W19
	115 Move X8, [X8+32]
	116 Compare X8, 0
	117 JumpIfEqual {331}
	118 Move W0, [X8+72]
	119 Move W1, W31
	120 Move W2, W24
	121 Move X3, X31
	122 Call Math.Clamp, X0, X1, X2
	123 Compare X21, 0
	124 JumpIfEqual {331}
	125 Move W8, [X21+24]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Add X8, X21, W0
	128 Move [X8+32], W26
	129 Move W8, [X25+24]
	130 Add W19, W19, 1
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move X8, 0x833000
	133 Move X8, [X8+1552]
	134 Move X0, X21
	135 Move W1, W31
	136 Move X2, [X8]
	137 Call 0x22E8380, X0, X1
	138 Move TEMP, X0
	139 And TEMP, TEMP, -2147483648
	140 Compare TEMP, -2147483648
	141 JumpIfEqual {159}
	142 Move W21, W0
	143 Compare X22, 0
	144 JumpIfEqual {151}
	145 Move X8, [X23]
	146 Move X0, X22
	147 Move X1, [X8+64]
	148 Call 0x1C17E00
	149 Compare X0, 0
	150 JumpIfEqual {335}
	151 Move W8, [X23+24]
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Add X8, X23, W21
	154 Move X0, X27
	155 Move [X8+32], X22
	156 Call ProBuilderMesh.get_renderer, X0
	157 Compare X0, 0
	158 JumpIfNotEqual {193}
	159 Move X8, 0x7DF000
	160 Move X21, [X23+24]
	161 Move X8, [X8+1952]
	162 Add W1, W21, 1
	163 Move X0, [X8]
	164 Call 0x1C17D6C
	165 Move X24, X0
	166 Move X0, X23
	167 Move X1, X24
	168 Move W2, W21
	169 Move X3, X31
	170 Call Array.Copy, X0, X1, X2
	171 Compare X24, 0
	172 JumpIfEqual {331}
	173 Compare X22, 0
	174 JumpIfEqual {181}
	175 Move X8, [X24]
	176 Move X0, X22
	177 Move X1, [X8+64]
	178 Call 0x1C17E00
	179 Compare X0, 0
	180 JumpIfEqual {335}
	181 Move W8, [X24+24]
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Move X8, X21
	184 ShiftRight X8, 32
	185 And X8, X8, 0x7FFFFFFF
	186 Add X8, X24, X8
	187 Move X0, X27
	188 Move [X8+32], X22
	189 Call ProBuilderMesh.get_renderer, X0
	190 Compare X0, 0
	191 JumpIfEqual {331}
	192 Move X23, X24
	193 Move X1, X23
	194 Move X2, X31
	195 Call Renderer.set_sharedMaterials, X0, X1
	196 Compare X20, 0
	197 JumpIfEqual {331}
	198 Move X10, 0x832000
	199 Move X8, [X20]
	200 Move X10, [X10+3504]
	201 NotImplemented "Instruction LDRH not yet implemented."
	202 Move X1, [X10]
	203 Compare X9, 0
	204 JumpIfEqual {211}
	205 Move X10, [X8+176]
	206 Add X10, X10, 8
	207 NotImplemented "Instruction LDUR not yet implemented."
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Subtract X9, X9, 1
	210 Add X10, X10, 16
	211 Move X0, X20
	212 Move W2, W31
	213 Call 0x1C5D788
	214 NotImplemented "Instruction LDRSW not yet implemented."
	215 Add X8, X8, X9
	216 Add X0, X8, 312
	217 Move X8, [X0]
	218 Move X1, [X0+8]
	219 Move X23, 0x7D8000
	220 Move X23, [X23+3584]
	221 Move X0, X20
	222 NotImplemented "Instruction BLR not yet implemented."
	223 Move X20, X0
	224 Compare X0, 0
	225 JumpIfEqual {332}
	226 Move X22, 0x7D8000
	227 Move X24, 0x832000
	228 Move X22, [X22+3608]
	229 Move X24, [X24+3512]
	230 Move X8, [X20]
	231 Move X1, [X22]
	232 NotImplemented "Instruction LDRH not yet implemented."
	233 Compare X9, 0
	234 JumpIfEqual {241}
	235 Move X10, [X8+176]
	236 Add X10, X10, 8
	237 NotImplemented "Instruction LDUR not yet implemented."
	238 NotImplemented "Instruction CMP not yet implemented."
	239 Subtract X9, X9, 1
	240 Add X10, X10, 16
	241 Move X0, X20
	242 Move W2, W31
	243 Call 0x1C5D788
	244 NotImplemented "Instruction LDRSW not yet implemented."
	245 Add X8, X8, X9
	246 Add X0, X8, 312
	247 Move X8, [X0]
	248 Move X1, [X0+8]
	249 Move X0, X20
	250 NotImplemented "Instruction BLR not yet implemented."
	251 Move TEMP, X0
	252 And TEMP, TEMP, 1
	253 Compare TEMP, 1
	254 JumpIfNotEqual {279}
	255 Move X8, [X20]
	256 Move X1, [X24]
	257 NotImplemented "Instruction LDRH not yet implemented."
	258 Compare X9, 0
	259 JumpIfEqual {266}
	260 Move X10, [X8+176]
	261 Add X10, X10, 8
	262 NotImplemented "Instruction LDUR not yet implemented."
	263 NotImplemented "Instruction CMP not yet implemented."
	264 Subtract X9, X9, 1
	265 Add X10, X10, 16
	266 Move X0, X20
	267 Move W2, W31
	268 Call 0x1C5D788
	269 NotImplemented "Instruction LDRSW not yet implemented."
	270 Add X8, X8, X9
	271 Add X0, X8, 312
	272 Move X8, [X0]
	273 Move X1, [X0+8]
	274 Move X0, X20
	275 NotImplemented "Instruction BLR not yet implemented."
	276 Compare X0, 0
	277 JumpIfEqual {330}
	278 Move [X0+72], W21
	279 Move X21, X31
	280 Move W22, 12
	281 Compare X20, 0
	282 JumpIfEqual {304}
	283 Move X8, [X20]
	284 Move X1, [X23]
	285 NotImplemented "Instruction LDRH not yet implemented."
	286 Compare X9, 0
	287 JumpIfEqual {294}
	288 Move X10, [X8+176]
	289 Add X10, X10, 8
	290 NotImplemented "Instruction LDUR not yet implemented."
	291 NotImplemented "Instruction CMP not yet implemented."
	292 Subtract X9, X9, 1
	293 Add X10, X10, 16
	294 Move X0, X20
	295 Move W2, W31
	296 Call 0x1C5D788
	297 NotImplemented "Instruction LDRSW not yet implemented."
	298 Add X8, X8, X9
	299 Add X0, X8, 312
	300 Move X8, [X0]
	301 Move X1, [X0+8]
	302 Move X0, X20
	303 NotImplemented "Instruction BLR not yet implemented."
	304 Compare X21, 0
	305 JumpIfNotEqual {333}
	306 NotImplemented "Instruction CMP not yet implemented."
	307 Compare W22, 0
	308 JumpIfNotEqual {316}
	309 NotImplemented "Instruction LDRH not yet implemented."
	310 Move W9, 1
	311 Add W10, W8, 1
	312 And W31, W10, 0x10000
	313 NotImplemented "Instruction CSINC not yet implemented."
	314 NotImplemented "Instruction STRH not yet implemented."
	315 NotImplemented "Instruction STRH not yet implemented."
	316 Move X20, [X31+96]
	317 Move X19, [X31+104]
	318 Move X22, [X31+80]
	319 Move X21, [X31+88]
	320 Move X24, [X31+64]
	321 Move X23, [X31+72]
	322 Move X26, [X31+48]
	323 Move X25, [X31+56]
	324 Move X28, [X31+32]
	325 Move X27, [X31+40]
	326 Move X29, [X31+16]
	327 Move X30, [X31+24]
	328 Add X31, X31, 112
	329 Return 
	330 Call 0x1C17F20
	331 Call 0x1C17F20
	332 Call 0x1C17F20
	333 Move X0, X21
	334 Call 0x1C17F18
	335 Call 0x1C17F44
	336 Move X1, X31
	337 Call 0x1C17DEC
	338 Move X22, X0
	339 NotImplemented "Instruction CMP not yet implemented."
	340 Move X0, X22
	341 Call 0x3EB2AD0
	342 Move X21, [X0]
	343 Call 0x3EB2AE0
	344 Move W22, W31
	345 Compare X20, 0
	346 JumpIfNotEqual {283}
	347 Move X21, X31
	348 Move X22, X0
	349 Compare X20, 0
	350 JumpIfEqual {372}
	351 Move X8, [X20]
	352 Move X1, [X23]
	353 NotImplemented "Instruction LDRH not yet implemented."
	354 Compare X9, 0
	355 JumpIfEqual {362}
	356 Move X10, [X8+176]
	357 Add X10, X10, 8
	358 NotImplemented "Instruction LDUR not yet implemented."
	359 NotImplemented "Instruction CMP not yet implemented."
	360 Subtract X9, X9, 1
	361 Add X10, X10, 16
	362 Move X0, X20
	363 Move W2, W31
	364 Call 0x1C5D788
	365 NotImplemented "Instruction LDRSW not yet implemented."
	366 Add X8, X8, X9
	367 Add X0, X8, 312
	368 Move X8, [X0]
	369 Move X1, [X0+8]
	370 Move X0, X20
	371 NotImplemented "Instruction BLR not yet implemented."
	372 Compare X21, 0
	373 JumpIfNotEqual {376}
	374 Move X0, X22
	375 Call 0x1D2D690
	376 Move X0, X21
	377 Call 0x1C17F18
	378 Call 0x1991590

Method: System.Void RefreshNormals()

Disassembly:
	0x0391B95C CBZ X19, 0x391B9F4
	0x0391B960 LDR X2, [X26]
	0x0391B964 MOV X0, X19
	0x0391B968 BL 0x2DAB03C
	0x0391B96C B 0x391B890
	0x0391B970 MOV X21, X31
	0x0391B974 CBZ X20, 0x391B9D0
	0x0391B978 LDR X8, [X20]
	0x0391B97C LDR X1, [X22]
	0x0391B980 LDRH W9, [X8 + 0x12E]
	0x0391B984 CBZ X9, 0x391B9A8
	0x0391B988 LDR X10, [X8 + 0xB0]
	0x0391B98C ADD X10, X10, 0x8
	0x0391B990 LDUR X11, [X10 - 0x8]
	0x0391B994 CMP X11, X1
	0x0391B998 B.EQ 0x391B9B8
	0x0391B99C SUBS X9, X9, 0x1
	0x0391B9A0 ADD X10, X10, 0x10
	0x0391B9A4 B.NE 0x391B990
	0x0391B9A8 MOV X0, X20
	0x0391B9AC MOV W2, W31
	0x0391B9B0 BL 0x1C5C788
	0x0391B9B4 B 0x391B9C4
	0x0391B9B8 LDRSW X9, [X10]
	0x0391B9BC ADD X8, X8, X9, 0x4, LSL
	0x0391B9C0 ADD X0, X8, 0x138
	0x0391B9C4 LDP X8, X1, [X0]
	0x0391B9C8 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xAC7000
	006 Move X21, 0x833000
	007 Move W8, [X20+2180]
	008 Move X21, [X21+3704]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x833000
	015 Move X0, [X0+3704]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2180], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Normals.CalculateNormals, X0
	026 Move X0, X19
	027 Call ProBuilderMesh.get_mesh, X0
	028 Compare X0, 0
	029 JumpIfEqual {38}
	030 Move X1, [X19+128]
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X2, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call Mesh.set_normals, X0, X1
	037 Return 
	038 Call 0x1C17F20

Method: System.Void RefreshTangents()

Disassembly:
	0x0391B9CC BLR X8
	0x0391B9D0 CBNZ X21, 0x391BA00
	0x0391B9D4 MOV X0, X19
	0x0391B9D8 LDP X20, X19, [X31 + 0x40]
	0x0391B9DC LDP X22, X21, [X31 + 0x30]
	0x0391B9E0 LDP X24, X23, [X31 + 0x20]
	0x0391B9E4 LDP X26, X25, [X31 + 0x10]
	0x0391B9E8 LDR X30, [X31], #0x50
	0x0391B9EC RET
	0x0391B9F0 BL 0x1C16F20
	0x0391B9F4 BL 0x1C16F20
	0x0391B9F8 BL 0x1C16F20
	0x0391B9FC BL 0x1C16F20
	0x0391BA00 MOV X0, X21
	0x0391BA04 BL 0x1C16F18
	0x0391BA08 B 0x391BA20
	0x0391BA0C B 0x391BA20
	0x0391BA10 B 0x391BA20
	0x0391BA14 B 0x391BA20
	0x0391BA18 B 0x391BA20
	0x0391BA1C B 0x391BA20
	0x0391BA20 CMP W1, 0x1
	0x0391BA24 B.NE 0x391BA38
	0x0391BA28 BL 0x3EB1AD0
	0x0391BA2C LDR X21, [X0]
	0x0391BA30 BL 0x3EB1AE0
	0x0391BA34 B 0x391B974
	0x0391BA38 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xAC7000
	006 Move X21, 0x833000
	007 Move W8, [X20+2181]
	008 Move X21, [X21+3704]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x833000
	015 Move X0, [X0+3704]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2181], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call Normals.CalculateTangents, X0
	026 Move X0, X19
	027 Call ProBuilderMesh.get_mesh, X0
	028 Compare X0, 0
	029 JumpIfEqual {38}
	030 Move X1, [X19+120]
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X2, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call Mesh.set_tangents, X0, X1
	037 Return 
	038 Call 0x1C17F20

Method: System.Int32 GetSharedVertexHandle(System.Int32 vertex)

Disassembly:
	0x0391C5D8 B.NE 0x391C5F0
	0x0391C5DC MOV X0, X20
	0x0391C5E0 BL 0x3EB1AD0
	0x0391C5E4 LDR X21, [X0]
	0x0391C5E8 BL 0x3EB1AE0
	0x0391C5EC B 0x391C460
	0x0391C5F0 MOV X21, X31
	0x0391C5F4 B 0x391C5FC
	0x0391C5F8 MOV X20, X0
	0x0391C5FC LDR X8, [X31]
	0x0391C600 CBZ X8, 0x391C668
	0x0391C604 LDR X8, [X31]
	0x0391C608 ADRP X10, 0x7D7000
	0x0391C60C LDR X8, [X8]
	0x0391C610 LDRH W9, [X8 + 0x12E]
	0x0391C614 LDR X10, [X10 + 0xE00]
	0x0391C618 LDR X1, [X10]
	0x0391C61C CBZ X9, 0x391C640
	0x0391C620 LDR X10, [X8 + 0xB0]
	0x0391C624 ADD X10, X10, 0x8
	0x0391C628 LDUR X11, [X10 - 0x8]
	0x0391C62C CMP X11, X1
	0x0391C630 B.EQ 0x391C650
	0x0391C634 SUBS X9, X9, 0x1
	0x0391C638 ADD X10, X10, 0x10
	0x0391C63C B.NE 0x391C628
	0x0391C640 LDR X0, [X31]
	0x0391C644 MOV W2, W31
	0x0391C648 BL 0x1C5C788
	0x0391C64C B 0x391C65C
	0x0391C650 LDRSW X9, [X10]
	0x0391C654 ADD X8, X8, X9, 0x4, LSL
	0x0391C658 ADD X0, X8, 0x138
	0x0391C65C LDP X8, X1, [X0]
	0x0391C660 LDR X0, [X31]
	0x0391C664 BLR X8
	0x0391C668 CBNZ X21, 0x391C674
	0x0391C66C MOV X0, X20
	0x0391C670 BL 0x1D2C690
	0x0391C674 MOV X0, X21
	0x0391C678 BL 0x1C16F18
	0x0391C67C BL 0x1990590
	0x0391C680 SUB X31, X31, 0x70
	0x0391C684 STP X29, X30, [X31 + 0x10]
	0x0391C688 STP X28, X27, [X31 + 0x20]
	0x0391C68C STP X26, X25, [X31 + 0x30]
	0x0391C690 STP X24, X23, [X31 + 0x40]
	0x0391C694 STP X22, X21, [X31 + 0x50]
	0x0391C698 STP X20, X19, [X31 + 0x60]
	0x0391C69C ADRP X21, 0xAC5000
	0x0391C6A0 LDRB W8, [X21 + 0x88A]
	0x0391C6A4 MOV X20, X2
	0x0391C6A8 MOV X19, X1
	0x0391C6AC STR X0, [X31 + 0x8]
	0x0391C6B0 TBNZ X8, 0x0, 0x391C734
	0x0391C6B4 ADRP X0, 0x831000
	0x0391C6B8 LDR X0, [X0 + 0xC80]
	0x0391C6BC BL 0x1C16CF4
	0x0391C6C0 ADRP X0, 0x7D9000
	0x0391C6C4 LDR X0, [X0 + 0x9D8]
	0x0391C6C8 BL 0x1C16CF4
	0x0391C6CC ADRP X0, 0x7DE000
	0x0391C6D0 LDR X0, [X0 + 0x678]
	0x0391C6D4 BL 0x1C16CF4
	0x0391C6D8 ADRP X0, 0x7D7000
	0x0391C6DC LDR X0, [X0 + 0xE00]
	0x0391C6E0 BL 0x1C16CF4
	0x0391C6E4 ADRP X0, 0x831000
	0x0391C6E8 LDR X0, [X0 + 0xC88]
	0x0391C6EC BL 0x1C16CF4
	0x0391C6F0 ADRP X0, 0x831000
	0x0391C6F4 LDR X0, [X0 + 0xC90]
	0x0391C6F8 BL 0x1C16CF4
	0x0391C6FC ADRP X0, 0x7D7000
	0x0391C700 LDR X0, [X0 + 0xE18]
	0x0391C704 BL 0x1C16CF4
	0x0391C708 ADRP X0, 0x7D8000
	0x0391C70C LDR X0, [X0 + 0xE10]
	0x0391C710 BL 0x1C16CF4
	0x0391C714 ADRP X0, 0x7DE000
	0x0391C718 LDR X0, [X0 + 0x858]
	0x0391C71C BL 0x1C16CF4
	0x0391C720 ADRP X0, 0x832000
	0x0391C724 LDR X0, [X0 + 0x528]
	0x0391C728 BL 0x1C16CF4
	0x0391C72C MOVZ W8, 0x1
	0x0391C730 STRB W8, [X21 + 0x88A]
	0x0391C734 LDR X0, [X31 + 0x8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xAC6000
	009 Move W8, [X21+2182]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x7E2000
	017 Move X0, [X0+2160]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2182], W8
	021 Move [X31+12], W31
	022 Move X0, [X20+64]
	023 Compare X0, 0
	024 JumpIfEqual {81}
	025 Move X8, 0x7E2000
	026 Move X8, [X8+2160]
	027 Add X2, X31, 12
	028 Move W1, W19
	029 Move X3, [X8]
	030 Call Dictionary`2<Int32, Int32>.TryGetValue, X0, X1, X2
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {45}
	035 Move W21, [X31+12]
	036 Move W0, W21
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X22, [X31+32]
	040 Move X21, [X31+40]
	041 Move X24, [X31+16]
	042 Move X23, [X31+24]
	043 Move X30, [X31+64]
	044 Return X0
	045 Move X8, [X20+48]
	046 Compare X8, 0
	047 JumpIfEqual {81}
	048 Move W21, W31
	049 Move W9, [X8+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X24, W21
	053 Add X8, X8, X24
	054 Move X0, [X8+32]
	055 Compare X0, 0
	056 JumpIfEqual {81}
	057 Move X1, X31
	058 Call SharedVertex.get_Count, X0
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W22, W0
	061 Move W23, W31
	062 Move X8, [X20+48]
	063 Compare X8, 0
	064 JumpIfEqual {81}
	065 Move W9, [X8+24]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Add X8, X8, X24
	068 Move X0, [X8+32]
	069 Compare X0, 0
	070 JumpIfEqual {81}
	071 Move W1, W23
	072 Move X2, X31
	073 Call SharedVertex.get_Item, X0, X1
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Add W23, W23, 1
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X8, [X20+48]
	078 Add W21, W21, 1
	079 Compare X8, 0
	080 JumpIfNotEqual {49}
	081 Call 0x1C17F20
	082 Call 0x1C17F28
	083 Move X0, 0x7E0000
	084 Move X0, [X0+1888]
	085 Call 0x1C17D08
	086 Call 0x1C17F10
	087 Move X19, X0
	088 Move X0, 0x833000
	089 Move X0, [X0+1560]
	090 Call 0x1C17D08
	091 Move X1, X0
	092 Move X0, X19
	093 Move X2, X31
	094 Call ArgumentOutOfRangeException..ctor, X0, X1
	095 Move X0, 0x833000
	096 Move X0, [X0+1568]
	097 Call 0x1C17D08
	098 Move X1, X0
	099 Move X0, X19
	100 Call 0x1C17DEC

Method: System.Collections.Generic.HashSet`1<System.Int32> GetSharedVertexHandles(System.Collections.Generic.IEnumerable`1<System.Int32> vertices)

Disassembly:
	0x0391C738 BL 0x391594C
	0x0391C73C CBZ X0, 0x391CB8C
	0x0391C740 CBZ X20, 0x391CBAC
	0x0391C744 LDR W8, [X20 + 0x1C]
	0x0391C748 ADRP X28, 0x832000
	0x0391C74C LDR X28, [X28 + 0x528]
	0x0391C750 ADD W8, W8, 0x1
	0x0391C754 STP W31, W8, [X20 + 0x18]
	0x0391C758 LDR X0, [X28]
	0x0391C75C LDR W8, [X0 + 0xE0]
	0x0391C760 CBNZ W8, 0x391C76C
	0x0391C764 BL 0x1C16DFC
	0x0391C768 LDR X0, [X28]
	0x0391C76C LDR X8, [X0 + 0xB8]
	0x0391C770 LDR X0, [X8 + 0x28]
	0x0391C774 CBZ X0, 0x391CB88
	0x0391C778 ADRP X8, 0x7DE000
	0x0391C77C LDR X8, [X8 + 0x678]
	0x0391C780 LDR X1, [X8]
	0x0391C784 BL 0x2DAA53C
	0x0391C788 LDR X0, [X31 + 0x8]
	0x0391C78C BL 0x3916198
	0x0391C790 CBZ X19, 0x391CB88
	0x0391C794 ADRP X10, 0x831000
	0x0391C798 LDR X8, [X19]
	0x0391C79C LDR X10, [X10 + 0xC88]
	0x0391C7A0 MOV X22, X0
	0x0391C7A4 LDRH W9, [X8 + 0x12E]
	0x0391C7A8 LDR X1, [X10]
	0x0391C7AC CBZ X9, 0x391C7D0
	0x0391C7B0 LDR X10, [X8 + 0xB0]
	0x0391C7B4 ADD X10, X10, 0x8
	0x0391C7B8 LDUR X11, [X10 - 0x8]
	0x0391C7BC CMP X11, X1
	0x0391C7C0 B.EQ 0x391C7E0
	0x0391C7C4 SUBS X9, X9, 0x1
	0x0391C7C8 ADD X10, X10, 0x10
	0x0391C7CC B.NE 0x391C7B8
	0x0391C7D0 MOV X0, X19
	0x0391C7D4 MOV W2, W31
	0x0391C7D8 BL 0x1C5C788
	0x0391C7DC B 0x391C7EC
	0x0391C7E0 LDRSW X9, [X10]
	0x0391C7E4 ADD X8, X8, X9, 0x4, LSL
	0x0391C7E8 ADD X0, X8, 0x138
	0x0391C7EC LDP X8, X1, [X0]
	0x0391C7F0 MOV X0, X19
	0x0391C7F4 BLR X8
	0x0391C7F8 MOV X19, X0
	0x0391C7FC CBZ X0, 0x391CBF4
	0x0391C800 ADRP X27, 0x831000
	0x0391C804 ADRP X29, 0x7D9000
	0x0391C808 ADRP X21, 0x7D8000
	0x0391C80C LDR X27, [X27 + 0xC80]
	0x0391C810 LDR X29, [X29 + 0x9D8]
	0x0391C814 LDR X21, [X21 + 0xE10]
	0x0391C818 LDR X8, [X19]
	0x0391C81C ADRP X10, 0x7D7000
	0x0391C820 LDRH W9, [X8 + 0x12E]
	0x0391C824 LDR X10, [X10 + 0xE18]
	0x0391C828 LDR X1, [X10]
	0x0391C82C CBZ X9, 0x391C850
	0x0391C830 LDR X10, [X8 + 0xB0]
	0x0391C834 ADD X10, X10, 0x8
	0x0391C838 LDUR X11, [X10 - 0x8]
	0x0391C83C CMP X11, X1
	0x0391C840 B.EQ 0x391C860
	0x0391C844 SUBS X9, X9, 0x1
	0x0391C848 ADD X10, X10, 0x10
	0x0391C84C B.NE 0x391C838
	0x0391C850 MOV X0, X19
	0x0391C854 MOV W2, W31
	0x0391C858 BL 0x1C5C788
	0x0391C85C B 0x391C86C
	0x0391C860 LDRSW X9, [X10]
	0x0391C864 ADD X8, X8, X9, 0x4, LSL
	0x0391C868 ADD X0, X8, 0x138
	0x0391C86C LDP X8, X1, [X0]
	0x0391C870 MOV X0, X19
	0x0391C874 BLR X8
	0x0391C878 TBZ X0, 0x0, 0x391CAD0
	0x0391C87C LDR X8, [X19]
	0x0391C880 ADRP X10, 0x831000
	0x0391C884 LDRH W9, [X8 + 0x12E]
	0x0391C888 LDR X10, [X10 + 0xC90]
	0x0391C88C LDR X1, [X10]
	0x0391C890 CBZ X9, 0x391C8B4
	0x0391C894 LDR X10, [X8 + 0xB0]
	0x0391C898 ADD X10, X10, 0x8
	0x0391C89C LDUR X11, [X10 - 0x8]
	0x0391C8A0 CMP X11, X1
	0x0391C8A4 B.EQ 0x391C8C4
	0x0391C8A8 SUBS X9, X9, 0x1
	0x0391C8AC ADD X10, X10, 0x10
	0x0391C8B0 B.NE 0x391C89C
	0x0391C8B4 MOV X0, X19
	0x0391C8B8 MOV W2, W31
	0x0391C8BC BL 0x1C5C788
	0x0391C8C0 B 0x391C8D0
	0x0391C8C4 LDRSW X9, [X10]
	0x0391C8C8 ADD X8, X8, X9, 0x4, LSL
	0x0391C8CC ADD X0, X8, 0x138
	0x0391C8D0 LDP X8, X1, [X0]
	0x0391C8D4 MOV X0, X19
	0x0391C8D8 BLR X8
	0x0391C8DC CBZ X22, 0x391CB64
	0x0391C8E0 LDR X2, [X27]
	0x0391C8E4 MOV X23, X0
	0x0391C8E8 MOV X0, X22
	0x0391C8EC MOV W1, W23
	0x0391C8F0 BL 0x2A0A2A8
	0x0391C8F4 MOV W24, W0
	0x0391C8F8 LDR X0, [X28]
	0x0391C8FC LDR W8, [X0 + 0xE0]
	0x0391C900 CBNZ W8, 0x391C90C
	0x0391C904 BL 0x1C16DFC
	0x0391C908 LDR X0, [X28]
	0x0391C90C LDR X8, [X0 + 0xB8]
	0x0391C910 LDR X0, [X8 + 0x28]
	0x0391C914 CBZ X0, 0x391CB68
	0x0391C918 LDR X2, [X29]
	0x0391C91C MOV W1, W24
	0x0391C920 BL 0x2DAB03C
	0x0391C924 TBZ X0, 0x0, 0x391C9D8
	0x0391C928 LDR X8, [X31 + 0x8]
	0x0391C92C LDR X8, [X8 + 0x30]
	0x0391C930 CBZ X8, 0x391CB70
	0x0391C934 LDR W9, [X8 + 0x18]
	0x0391C938 CMP W24, W9
	0x0391C93C B.CS 0x391CB78
	0x0391C940 ADD X8, X8, W24, 0x3, SXTW
	0x0391C944 LDR X24, [X8 + 0x20]
	0x0391C948 CBZ X24, 0x391CB74
	0x0391C94C MOV X0, X24
	0x0391C950 MOV X1, X31
	0x0391C954 BL 0x393492C
	0x0391C958 MOV W25, W0
	0x0391C95C CMP W0, 0x1
	0x0391C960 B.LT 0x391C9D8
	0x0391C964 MOV W26, W31
	0x0391C968 MOV X0, X24
	0x0391C96C MOV W1, W26
	0x0391C970 MOV X2, X31
	0x0391C974 BL 0x39282DC
	0x0391C978 MOV W1, W0
	0x0391C97C LDR W10, [X20 + 0x1C]
	0x0391C980 LDR X8, [X20 + 0x10]
	0x0391C984 LDR X9, [X21]
	0x0391C988 ADD W10, W10, 0x1
	0x0391C98C STR W10, [X20 + 0x1C]
	0x0391C990 CBZ X8, 0x391CB5C
	0x0391C994 LDRSW X10, [X20 + 0x18]
	0x0391C998 LDR W11, [X8 + 0x18]
	0x0391C99C CMP W10, W11
	0x0391C9A0 B.CS 0x391C9B8
	0x0391C9A4 ADD W9, W10, 0x1
	0x0391C9A8 ADD X8, X8, X10, 0x2, LSL
	0x0391C9AC STR W9, [X20 + 0x18]
	0x0391C9B0 STR W1, [X8 + 0x20]
	0x0391C9B4 B 0x391C9CC
	0x0391C9B8 LDR X8, [X9 + 0x20]
	0x0391C9BC LDR X8, [X8 + 0xC0]
	0x0391C9C0 LDR X2, [X8 + 0x70]
	0x0391C9C4 MOV X0, X20
	0x0391C9C8 BL 0x2FDC70C
	0x0391C9CC ADD W26, W26, 0x1
	0x0391C9D0 CMP W25, W26
	0x0391C9D4 B.NE 0x391C968
	0x0391C9D8 LDR X2, [X27]
	0x0391C9DC UBFM X1, X23, 0x20, 0x3F
	0x0391C9E0 MOV X0, X22
	0x0391C9E4 BL 0x2A0A2A8
	0x0391C9E8 MOV W23, W0
	0x0391C9EC LDR X0, [X28]
	0x0391C9F0 LDR W8, [X0 + 0xE0]
	0x0391C9F4 CBNZ W8, 0x391CA00
	0x0391C9F8 BL 0x1C16DFC
	0x0391C9FC LDR X0, [X28]
	0x0391CA00 LDR X8, [X0 + 0xB8]
	0x0391CA04 LDR X0, [X8 + 0x28]
	0x0391CA08 CBZ X0, 0x391CB6C
	0x0391CA0C LDR X2, [X29]
	0x0391CA10 MOV W1, W23
	0x0391CA14 BL 0x2DAB03C
	0x0391CA18 TBZ X0, 0x0, 0x391C818
	0x0391CA1C LDR X8, [X31 + 0x8]
	0x0391CA20 LDR X8, [X8 + 0x30]
	0x0391CA24 CBZ X8, 0x391CB84
	0x0391CA28 LDR W9, [X8 + 0x18]
	0x0391CA2C CMP W23, W9
	0x0391CA30 B.CS 0x391CB80
	0x0391CA34 ADD X8, X8, W23, 0x3, SXTW
	0x0391CA38 LDR X23, [X8 + 0x20]
	0x0391CA3C CBZ X23, 0x391CB7C
	0x0391CA40 MOV X0, X23
	0x0391CA44 MOV X1, X31
	0x0391CA48 BL 0x393492C
	0x0391CA4C MOV W24, W0
	0x0391CA50 CMP W0, 0x1
	0x0391CA54 B.LT 0x391C818
	0x0391CA58 MOV W25, W31
	0x0391CA5C MOV X0, X23
	0x0391CA60 MOV W1, W25
	0x0391CA64 MOV X2, X31
	0x0391CA68 BL 0x39282DC
	0x0391CA6C MOV W1, W0
	0x0391CA70 LDR W10, [X20 + 0x1C]
	0x0391CA74 LDR X8, [X20 + 0x10]
	0x0391CA78 LDR X9, [X21]
	0x0391CA7C ADD W10, W10, 0x1
	0x0391CA80 STR W10, [X20 + 0x1C]
	0x0391CA84 CBZ X8, 0x391CB60
	0x0391CA88 LDRSW X10, [X20 + 0x18]
	0x0391CA8C LDR W11, [X8 + 0x18]
	0x0391CA90 CMP W10, W11
	0x0391CA94 B.CS 0x391CAAC
	0x0391CA98 ADD W9, W10, 0x1
	0x0391CA9C ADD X8, X8, X10, 0x2, LSL
	0x0391CAA0 STR W9, [X20 + 0x18]
	0x0391CAA4 STR W1, [X8 + 0x20]
	0x0391CAA8 B 0x391CAC0
	0x0391CAAC LDR X8, [X9 + 0x20]
	0x0391CAB0 LDR X8, [X8 + 0xC0]
	0x0391CAB4 LDR X2, [X8 + 0x70]
	0x0391CAB8 MOV X0, X20

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X23, 0xAC6000
	011 Move X21, 0x7D9000
	012 Move X22, 0x7DF000
	013 Move W8, [X23+2183]
	014 Move X21, [X21+3592]
	015 Move X22, [X22+1672]
	016 Move X20, X1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {48}
	022 Move X0, 0x832000
	023 Move X0, [X0+3200]
	024 Call 0x1C17CF4
	025 Move X0, 0x7DA000
	026 Move X0, [X0+2520]
	027 Call 0x1C17CF4
	028 Move X0, 0x7DF000
	029 Move X0, [X0+1672]
	030 Call 0x1C17CF4
	031 Move X0, 0x7D9000
	032 Move X0, [X0+3592]
	033 Call 0x1C17CF4
	034 Move X0, 0x7D8000
	035 Move X0, [X0+3584]
	036 Call 0x1C17CF4
	037 Move X0, 0x800000
	038 Move X0, [X0+1976]
	039 Call 0x1C17CF4
	040 Move X0, 0x800000
	041 Move X0, [X0+1984]
	042 Call 0x1C17CF4
	043 Move X0, 0x7D8000
	044 Move X0, [X0+3608]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X23+2183], W8
	048 Move X0, X19
	049 Call ProBuilderMesh.get_sharedVertexLookup, X0
	050 Move X8, [X21]
	051 Move X21, X0
	052 Move X0, X8
	053 Call 0x1C17F10
	054 Move X1, [X22]
	055 Move X19, X0
	056 Call HashSet`1<Int32>..ctor, X0
	057 Compare X20, 0
	058 JumpIfEqual {192}
	059 Move X10, 0x800000
	060 Move X8, [X20]
	061 Move X10, [X10+1976]
	062 NotImplemented "Instruction LDRH not yet implemented."
	063 Move X1, [X10]
	064 Compare X9, 0
	065 JumpIfEqual {72}
	066 Move X10, [X8+176]
	067 Add X10, X10, 8
	068 NotImplemented "Instruction LDUR not yet implemented."
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Subtract X9, X9, 1
	071 Add X10, X10, 16
	072 Move X0, X20
	073 Move W2, W31
	074 Call 0x1C5D788
	075 NotImplemented "Instruction LDRSW not yet implemented."
	076 Add X8, X8, X9
	077 Add X0, X8, 312
	078 Move X8, [X0]
	079 Move X1, [X0+8]
	080 Move X22, 0x7D8000
	081 Move X22, [X22+3584]
	082 Move X0, X20
	083 NotImplemented "Instruction BLR not yet implemented."
	084 Move X20, X0
	085 Compare X0, 0
	086 JumpIfEqual {193}
	087 Move X23, 0x7D8000
	088 Move X24, 0x800000
	089 Move X25, 0x832000
	090 Move X26, 0x7DA000
	091 Move X23, [X23+3608]
	092 Move X24, [X24+1984]
	093 Move X25, [X25+3200]
	094 Move X26, [X26+2520]
	095 Move X8, [X20]
	096 Move X1, [X23]
	097 NotImplemented "Instruction LDRH not yet implemented."
	098 Compare X9, 0
	099 JumpIfEqual {106}
	100 Move X10, [X8+176]
	101 Add X10, X10, 8
	102 NotImplemented "Instruction LDUR not yet implemented."
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Subtract X9, X9, 1
	105 Add X10, X10, 16
	106 Move X0, X20
	107 Move W2, W31
	108 Call 0x1C5D788
	109 NotImplemented "Instruction LDRSW not yet implemented."
	110 Add X8, X8, X9
	111 Add X0, X8, 312
	112 Move X8, [X0]
	113 Move X1, [X0+8]
	114 Move X0, X20
	115 NotImplemented "Instruction BLR not yet implemented."
	116 Move TEMP, X0
	117 And TEMP, TEMP, 1
	118 Compare TEMP, 1
	119 JumpIfNotEqual {153}
	120 Move X8, [X20]
	121 Move X1, [X24]
	122 NotImplemented "Instruction LDRH not yet implemented."
	123 Compare X9, 0
	124 JumpIfEqual {131}
	125 Move X10, [X8+176]
	126 Add X10, X10, 8
	127 NotImplemented "Instruction LDUR not yet implemented."
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Subtract X9, X9, 1
	130 Add X10, X10, 16
	131 Move X0, X20
	132 Move W2, W31
	133 Call 0x1C5D788
	134 NotImplemented "Instruction LDRSW not yet implemented."
	135 Add X8, X8, X9
	136 Add X0, X8, 312
	137 Move X8, [X0]
	138 Move X1, [X0+8]
	139 Move X0, X20
	140 NotImplemented "Instruction BLR not yet implemented."
	141 Move W1, W0
	142 Compare X21, 0
	143 JumpIfEqual {190}
	144 Move X2, [X25]
	145 Move X0, X21
	146 Call Dictionary`2<Int32, Int32>.get_Item, X0, X1
	147 Move W1, W0
	148 Compare X19, 0
	149 JumpIfEqual {191}
	150 Move X2, [X26]
	151 Move X0, X19
	152 Call HashSet`1<Int32>.Add, X0, X1
	153 Move X21, X31
	154 Compare X20, 0
	155 JumpIfEqual {177}
	156 Move X8, [X20]
	157 Move X1, [X22]
	158 NotImplemented "Instruction LDRH not yet implemented."
	159 Compare X9, 0
	160 JumpIfEqual {167}
	161 Move X10, [X8+176]
	162 Add X10, X10, 8
	163 NotImplemented "Instruction LDUR not yet implemented."
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Subtract X9, X9, 1
	166 Add X10, X10, 16
	167 Move X0, X20
	168 Move W2, W31
	169 Call 0x1C5D788
	170 NotImplemented "Instruction LDRSW not yet implemented."
	171 Add X8, X8, X9
	172 Add X0, X8, 312
	173 Move X8, [X0]
	174 Move X1, [X0+8]
	175 Move X0, X20
	176 NotImplemented "Instruction BLR not yet implemented."
	177 Compare X21, 0
	178 JumpIfNotEqual {194}
	179 Move X0, X19
	180 Move X20, [X31+64]
	181 Move X19, [X31+72]
	182 Move X22, [X31+48]
	183 Move X21, [X31+56]
	184 Move X24, [X31+32]
	185 Move X23, [X31+40]
	186 Move X26, [X31+16]
	187 Move X25, [X31+24]
	188 Move X30, [X31+80]
	189 Return X0
	190 Call 0x1C17F20
	191 Call 0x1C17F20
	192 Call 0x1C17F20
	193 Call 0x1C17F20
	194 Move X0, X21
	195 Call 0x1C17F18
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Call 0x3EB2AD0
	198 Move X21, [X0]
	199 Call 0x3EB2AE0
	200 Move X19, X0
	201 Move X21, X31
	202 Move X19, X0
	203 Compare X20, 0
	204 JumpIfEqual {226}
	205 Move X8, [X20]
	206 Move X1, [X22]
	207 NotImplemented "Instruction LDRH not yet implemented."
	208 Compare X9, 0
	209 JumpIfEqual {216}
	210 Move X10, [X8+176]
	211 Add X10, X10, 8
	212 NotImplemented "Instruction LDUR not yet implemented."
	213 NotImplemented "Instruction CMP not yet implemented."
	214 Subtract X9, X9, 1
	215 Add X10, X10, 16
	216 Move X0, X20
	217 Move W2, W31
	218 Call 0x1C5D788
	219 NotImplemented "Instruction LDRSW not yet implemented."
	220 Add X8, X8, X9
	221 Add X0, X8, 312
	222 Move X8, [X0]
	223 Move X1, [X0+8]
	224 Move X0, X20
	225 NotImplemented "Instruction BLR not yet implemented."
	226 Compare X21, 0
	227 JumpIfNotEqual {230}
	228 Move X0, X19
	229 Call 0x1D2D690
	230 Move X0, X21
	231 Call 0x1C17F18
	232 Call 0x1991590

Method: System.Collections.Generic.List`1<System.Int32> GetCoincidentVertices(System.Collections.Generic.IEnumerable`1<System.Int32> vertices)

Disassembly:
	0x0391CABC BL 0x2FDC70C
	0x0391CAC0 ADD W25, W25, 0x1
	0x0391CAC4 CMP W24, W25
	0x0391CAC8 B.NE 0x391CA5C
	0x0391CACC B 0x391C818
	0x0391CAD0 MOV X21, X31
	0x0391CAD4 CBZ X19, 0x391CB38
	0x0391CAD8 LDR X8, [X19]
	0x0391CADC ADRP X10, 0x7D7000
	0x0391CAE0 LDRH W9, [X8 + 0x12E]
	0x0391CAE4 LDR X10, [X10 + 0xE00]
	0x0391CAE8 LDR X1, [X10]
	0x0391CAEC CBZ X9, 0x391CB10
	0x0391CAF0 LDR X10, [X8 + 0xB0]
	0x0391CAF4 ADD X10, X10, 0x8
	0x0391CAF8 LDUR X11, [X10 - 0x8]
	0x0391CAFC CMP X11, X1
	0x0391CB00 B.EQ 0x391CB20
	0x0391CB04 SUBS X9, X9, 0x1
	0x0391CB08 ADD X10, X10, 0x10
	0x0391CB0C B.NE 0x391CAF8
	0x0391CB10 MOV X0, X19
	0x0391CB14 MOV W2, W31
	0x0391CB18 BL 0x1C5C788
	0x0391CB1C B 0x391CB2C
	0x0391CB20 LDRSW X9, [X10]
	0x0391CB24 ADD X8, X8, X9, 0x4, LSL
	0x0391CB28 ADD X0, X8, 0x138
	0x0391CB2C LDP X8, X1, [X0]
	0x0391CB30 MOV X0, X19
	0x0391CB34 BLR X8
	0x0391CB38 CBNZ X21, 0x391CBF8
	0x0391CB3C LDP X20, X19, [X31 + 0x60]
	0x0391CB40 LDP X22, X21, [X31 + 0x50]
	0x0391CB44 LDP X24, X23, [X31 + 0x40]
	0x0391CB48 LDP X26, X25, [X31 + 0x30]
	0x0391CB4C LDP X28, X27, [X31 + 0x20]
	0x0391CB50 LDP X29, X30, [X31 + 0x10]
	0x0391CB54 ADD X31, X31, 0x70
	0x0391CB58 RET
	0x0391CB5C BL 0x1C16F20
	0x0391CB60 BL 0x1C16F20
	0x0391CB64 BL 0x1C16F20
	0x0391CB68 BL 0x1C16F20
	0x0391CB6C BL 0x1C16F20
	0x0391CB70 BL 0x1C16F20
	0x0391CB74 BL 0x1C16F20
	0x0391CB78 BL 0x1C16F28
	0x0391CB7C BL 0x1C16F20
	0x0391CB80 BL 0x1C16F28
	0x0391CB84 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xAC6000
	006 Move W8, [X21+2184]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x7DC000
	014 Move X0, [X0+2928]
	015 Call 0x1C17CF4
	016 Move X0, 0x7D9000
	017 Move X0, [X0+3632]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2184], W8
	021 Compare X19, 0
	022 JumpIfEqual {42}
	023 Move X8, 0x7D9000
	024 Move X8, [X8+3632]
	025 Move X21, 0x7DC000
	026 Move X0, [X8]
	027 Move X21, [X21+2928]
	028 Call 0x1C17F10
	029 Move X1, [X21]
	030 Move X21, X0
	031 Call List`1<Int32>..ctor, X0
	032 Move X0, X20
	033 Move X1, X19
	034 Move X2, X21
	035 Call ProBuilderMesh.GetCoincidentVertices, X0, X1, X2
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X0, X21
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0
	042 Move X0, 0x7DD000
	043 Move X0, [X0+1320]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X19, X0
	047 Move X0, 0x833000
	048 Move X0, [X0+1104]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Move X2, X31
	053 Call ArgumentNullException..ctor, X0, X1
	054 Move X0, 0x833000
	055 Move X0, [X0+1576]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X19
	059 Call 0x1C17DEC

Method: System.Void GetCoincidentVertices(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> faces, System.Collections.Generic.List`1<System.Int32> coincident)

Disassembly:
	0x0391D0C8 ADRP X0, 0x831000
	0x0391D0CC LDR X0, [X0 + 0x618]
	0x0391D0D0 BL 0x1C16D08
	0x0391D0D4 MOV X1, X0
	0x0391D0D8 MOV X0, X19
	0x0391D0DC MOV X2, X31
	0x0391D0E0 BL 0x330E100
	0x0391D0E4 ADRP X0, 0x831000
	0x0391D0E8 LDR X0, [X0 + 0x680]
	0x0391D0EC BL 0x1C16D08
	0x0391D0F0 MOV X1, X0
	0x0391D0F4 MOV X0, X19
	0x0391D0F8 BL 0x1C16DEC
	0x0391D0FC LDRB W0, [X0 + 0xCC]
	0x0391D100 RET
	0x0391D104 AND W8, W1, 0x1
	0x0391D108 STRB W8, [X0 + 0xCC]
	0x0391D10C RET
	0x0391D110 STR X30, [X31 - 0x10]!
	0x0391D114 LDR X8, [X0 + 0xD0]
	0x0391D118 CBZ X8, 0x391D128
	0x0391D11C LDR W0, [X8 + 0x18]
	0x0391D120 LDR X30, [X31], #0x10
	0x0391D124 RET
	0x0391D128 BL 0x1C16F20
	0x0391D12C STR X30, [X31 - 0x10]!
	0x0391D130 LDR X8, [X0 + 0xE0]
	0x0391D134 CBZ X8, 0x391D144
	0x0391D138 LDR W0, [X8 + 0x18]
	0x0391D13C LDR X30, [X31], #0x10
	0x0391D140 RET
	0x0391D144 BL 0x1C16F20
	0x0391D148 STR X30, [X31 - 0x10]!
	0x0391D14C LDR X8, [X0 + 0xD8]
	0x0391D150 CBZ X8, 0x391D160
	0x0391D154 LDR W0, [X8 + 0x18]
	0x0391D158 LDR X30, [X31], #0x10
	0x0391D15C RET
	0x0391D160 BL 0x1C16F20
	0x0391D164 STP X30, X19, [X31 - 0x10]!
	0x0391D168 MOV X19, X0
	0x0391D16C BL 0x391D17C
	0x0391D170 LDR W0, [X19 + 0xEC]
	0x0391D174 LDP X30, X19, [X31], #0x10
	0x0391D178 RET
	0x0391D17C STR X30, [X31 - 0x60]!
	0x0391D180 STP X28, X27, [X31 + 0x10]
	0x0391D184 STP X26, X25, [X31 + 0x20]
	0x0391D188 STP X24, X23, [X31 + 0x30]
	0x0391D18C STP X22, X21, [X31 + 0x40]
	0x0391D190 STP X20, X19, [X31 + 0x50]
	0x0391D194 ADRP X20, 0xAC4000
	0x0391D198 LDRB W8, [X20 + 0x88F]
	0x0391D19C MOV X19, X0
	0x0391D1A0 TBNZ X8, 0x0, 0x391D1E8
	0x0391D1A4 ADRP X0, 0x830000
	0x0391D1A8 LDR X0, [X0 + 0xC80]
	0x0391D1AC BL 0x1C16CF4
	0x0391D1B0 ADRP X0, 0x7D8000
	0x0391D1B4 LDR X0, [X0 + 0x9D8]
	0x0391D1B8 BL 0x1C16CF4
	0x0391D1BC ADRP X0, 0x7DD000
	0x0391D1C0 LDR X0, [X0 + 0x678]
	0x0391D1C4 BL 0x1C16CF4
	0x0391D1C8 ADRP X0, 0x831000
	0x0391D1CC LDR X0, [X0 + 0x688]
	0x0391D1D0 BL 0x1C16CF4
	0x0391D1D4 ADRP X0, 0x7DD000
	0x0391D1D8 LDR X0, [X0 + 0x858]
	0x0391D1DC BL 0x1C16CF4
	0x0391D1E0 MOVZ W8, 0x1
	0x0391D1E4 STRB W8, [X20 + 0x88F]
	0x0391D1E8 LDRB W8, [X19 + 0xE8]
	0x0391D1EC CBZ W8, 0x391D320
	0x0391D1F0 LDR X0, [X19 + 0xF8]
	0x0391D1F4 STRB W31, [X19 + 0xE8]
	0x0391D1F8 CBZ X0, 0x391D358
	0x0391D1FC ADRP X8, 0x7DD000
	0x0391D200 LDR X8, [X8 + 0x678]
	0x0391D204 LDR X1, [X8]
	0x0391D208 BL 0x2DAA53C
	0x0391D20C LDR X8, [X19 + 0x100]
	0x0391D210 CBZ X8, 0x391D358
	0x0391D214 LDR W9, [X8 + 0x1C]
	0x0391D218 MOV X0, X19
	0x0391D21C ADD W9, W9, 0x1
	0x0391D220 STP W31, W9, [X8 + 0x18]
	0x0391D224 BL 0x3916198
	0x0391D228 LDR X23, [X19 + 0xE0]
	0x0391D22C STP W31, W31, [X19 + 0xEC]
	0x0391D230 CBZ X23, 0x391D35C
	0x0391D234 LDR X8, [X23 + 0x18]
	0x0391D238 CMP W8, 0x1
	0x0391D23C B.LT 0x391D320
	0x0391D240 ADRP X26, 0x830000
	0x0391D244 ADRP X27, 0x7D8000
	0x0391D248 ADRP X28, 0x831000
	0x0391D24C LDR X26, [X26 + 0xC80]
	0x0391D250 LDR X27, [X27 + 0x9D8]
	0x0391D254 LDR X28, [X28 + 0x688]
	0x0391D258 MOV X20, X0
	0x0391D25C MOV X24, X31
	0x0391D260 AND X8, X8, 0x0
	0x0391D264 ADD X25, X23, 0x20
	0x0391D268 CMP X24, W8, UXTW
	0x0391D26C B.CS 0x391D344
	0x0391D270 CBZ X20, 0x391D33C
	0x0391D274 LDR W21, [X25, X24, LSL #2]
	0x0391D278 LDR X22, [X19 + 0xF8]
	0x0391D27C LDR X2, [X26]
	0x0391D280 MOV X0, X20
	0x0391D284 MOV W1, W21
	0x0391D288 BL 0x2A0A2A8
	0x0391D28C MOV W1, W0
	0x0391D290 CBZ X22, 0x391D340
	0x0391D294 LDR X2, [X27]
	0x0391D298 MOV X0, X22
	0x0391D29C BL 0x2DAB03C
	0x0391D2A0 TBZ X0, 0x0, 0x391D310
	0x0391D2A4 LDR X22, [X19 + 0x30]
	0x0391D2A8 LDR X2, [X26]
	0x0391D2AC MOV X0, X20
	0x0391D2B0 MOV W1, W21
	0x0391D2B4 BL 0x2A0A2A8
	0x0391D2B8 CBZ X22, 0x391D348
	0x0391D2BC LDR W8, [X22 + 0x18]
	0x0391D2C0 CMP W0, W8
	0x0391D2C4 B.CS 0x391D354
	0x0391D2C8 ADD X8, X22, W0, 0x3, SXTW
	0x0391D2CC LDR W9, [X19 + 0xEC]
	0x0391D2D0 LDR X21, [X8 + 0x20]
	0x0391D2D4 ADD W8, W9, 0x1
	0x0391D2D8 STR W8, [X19 + 0xEC]
	0x0391D2DC CBZ X21, 0x391D350
	0x0391D2E0 LDR W22, [X19 + 0xF0]
	0x0391D2E4 MOV X0, X21
	0x0391D2E8 MOV X1, X31
	0x0391D2EC BL 0x393492C
	0x0391D2F0 MOV W8, W0
	0x0391D2F4 LDR X0, [X19 + 0x100]
	0x0391D2F8 ADD W8, W8, W22
	0x0391D2FC STR W8, [X19 + 0xF0]
	0x0391D300 CBZ X0, 0x391D34C
	0x0391D304 LDR X2, [X28]
	0x0391D308 MOV X1, X21
	0x0391D30C BL 0x2FDC918
	0x0391D310 LDR W8, [X23 + 0x18]
	0x0391D314 ADD X24, X24, 0x1
	0x0391D318 CMP X24, W8, SXTW
	0x0391D31C B.LT 0x391D268
	0x0391D320 LDP X20, X19, [X31 + 0x50]
	0x0391D324 LDP X22, X21, [X31 + 0x40]
	0x0391D328 LDP X24, X23, [X31 + 0x30]
	0x0391D32C LDP X26, X25, [X31 + 0x20]
	0x0391D330 LDP X28, X27, [X31 + 0x10]
	0x0391D334 LDR X30, [X31], #0x60
	0x0391D338 RET
	0x0391D33C BL 0x1C16F20
	0x0391D340 BL 0x1C16F20
	0x0391D344 BL 0x1C16F28
	0x0391D348 BL 0x1C16F20
	0x0391D34C BL 0x1C16F20
	0x0391D350 BL 0x1C16F20
	0x0391D354 BL 0x1C16F28
	0x0391D358 BL 0x1C16F20
	0x0391D35C BL 0x1C16F20
	0x0391D360 B 0x391D390
	0x0391D364 B 0x391D390
	0x0391D368 B 0x391D390
	0x0391D36C B 0x391D390
	0x0391D370 B 0x391D390
	0x0391D374 B 0x391D390
	0x0391D378 B 0x391D390
	0x0391D37C B 0x391D390
	0x0391D380 B 0x391D390
	0x0391D384 B 0x391D390
	0x0391D388 B 0x391D390
	0x0391D38C B 0x391D390
	0x0391D390 MOV X20, X0
	0x0391D394 CMP W1, 0x1
	0x0391D398 B.NE 0x391D410
	0x0391D39C MOV X0, X20
	0x0391D3A0 BL 0x3EB1AD0
	0x0391D3A4 MOV X20, X0
	0x0391D3A8 ADRP X0, 0x7DC000
	0x0391D3AC LDR X0, [X0 + 0xCC0]
	0x0391D3B0 BL 0x1C16D08
	0x0391D3B4 LDR X8, [X20]
	0x0391D3B8 LDR X1, [X8]
	0x0391D3BC BL 0x1C17270
	0x0391D3C0 TBZ X0, 0x0, 0x391D3E8
	0x0391D3C4 BL 0x3EB1AE0
	0x0391D3C8 MOV X0, X19
	0x0391D3CC LDP X20, X19, [X31 + 0x50]
	0x0391D3D0 LDP X22, X21, [X31 + 0x40]
	0x0391D3D4 LDP X24, X23, [X31 + 0x30]
	0x0391D3D8 LDP X26, X25, [X31 + 0x20]
	0x0391D3DC LDP X28, X27, [X31 + 0x10]
	0x0391D3E0 LDR X30, [X31], #0x60
	0x0391D3E4 B 0x3918CAC
	0x0391D3E8 MOVZ W0, 0x8
	0x0391D3EC BL 0x3EB1AF0
	0x0391D3F0 LDR X8, [X20]
	0x0391D3F4 STR X8, [X0]
	0x0391D3F8 ADRP X1, 0x597000
	0x0391D3FC ADD X1, X1, 0xE58
	0x0391D400 MOV X2, X31
	0x0391D404 BL 0x3EB1B00
	0x0391D408 MOV X20, X0
	0x0391D40C BL 0x3EB1AE0
	0x0391D410 MOV X0, X20
	0x0391D414 BL 0x1D2C690
	0x0391D418 BL 0x1990590
	0x0391D41C STP X30, X19, [X31 - 0x10]!
	0x0391D420 MOV X19, X0
	0x0391D424 BL 0x391D17C
	0x0391D428 LDR W0, [X19 + 0xF0]
	0x0391D42C LDP X30, X19, [X31], #0x10
	0x0391D430 RET
	0x0391D434 STP X30, X19, [X31 - 0x10]!
	0x0391D438 MOV X19, X0
	0x0391D43C BL 0x391D17C
	0x0391D440 LDR X0, [X19 + 0xF8]
	0x0391D444 LDP X30, X19, [X31], #0x10
	0x0391D448 RET
	0x0391D44C STP X30, X19, [X31 - 0x10]!
	0x0391D450 MOV X19, X0
	0x0391D454 BL 0x391D17C
	0x0391D458 LDR X0, [X19 + 0x100]
	0x0391D45C LDP X30, X19, [X31], #0x10
	0x0391D460 RET
	0x0391D464 STR X30, [X31 - 0x20]!
	0x0391D468 STP X20, X19, [X31 + 0x10]
	0x0391D46C ADRP X20, 0xAC4000
	0x0391D470 LDRB W8, [X20 + 0x890]
	0x0391D474 MOV X19, X0
	0x0391D478 TBNZ X8, 0x0, 0x391D490
	0x0391D47C ADRP X0, 0x831000
	0x0391D480 LDR X0, [X0 + 0x3F0]
	0x0391D484 BL 0x1C16CF4
	0x0391D488 MOVZ W8, 0x1
	0x0391D48C STRB W8, [X20 + 0x890]
	0x0391D490 LDR X8, [X19 + 0xD0]
	0x0391D494 CBZ X8, 0x391D528
	0x0391D498 ADRP X9, 0x831000
	0x0391D49C LDR X9, [X9 + 0x3F0]
	0x0391D4A0 LDR W20, [X8 + 0x18]
	0x0391D4A4 LDR X0, [X9]
	0x0391D4A8 MOV W1, W20
	0x0391D4AC BL 0x1C16D6C
	0x0391D4B0 CMP W20, 0x1
	0x0391D4B4 B.LT 0x391D51C
	0x0391D4B8 MOV W8, W31
	0x0391D4BC LDR X11, [X19 + 0xD0]
	0x0391D4C0 CBZ X11, 0x391D528
	0x0391D4C4 LDR W9, [X11 + 0x18]
	0x0391D4C8 CMP W8, W9
	0x0391D4CC B.CS 0x391D52C
	0x0391D4D0 LDR X9, [X19 + 0x28]
	0x0391D4D4 CBZ X9, 0x391D528
	0x0391D4D8 SXTW X10, W8
	0x0391D4DC ADD X11, X11, X10, 0x2, LSL
	0x0391D4E0 LDRSW X11, [X11 + 0x20]
	0x0391D4E4 LDR W12, [X9 + 0x18]
	0x0391D4E8 CMP W11, W12
	0x0391D4EC B.CS 0x391D52C
	0x0391D4F0 CBZ X0, 0x391D528
	0x0391D4F4 LDR W12, [X0 + 0x18]
	0x0391D4F8 CMP W8, W12
	0x0391D4FC B.CS 0x391D52C
	0x0391D500 ADD X9, X9, X11, 0x3, LSL
	0x0391D504 LDR X9, [X9 + 0x20]
	0x0391D508 ADD W8, W8, 0x1
	0x0391D50C ADD X10, X0, X10, 0x3, LSL
	0x0391D510 CMP W20, W8
	0x0391D514 STR X9, [X10 + 0x20]
	0x0391D518 B.NE 0x391D4BC
	0x0391D51C LDP X20, X19, [X31 + 0x10]
	0x0391D520 LDR X30, [X31], #0x20
	0x0391D524 RET
	0x0391D528 BL 0x1C16F20
	0x0391D52C BL 0x1C16F28
	0x0391D530 STR X30, [X31 - 0x30]!
	0x0391D534 STP X22, X21, [X31 + 0x10]
	0x0391D538 STP X20, X19, [X31 + 0x20]
	0x0391D53C ADRP X22, 0xAC4000
	0x0391D540 ADRP X21, 0x830000
	0x0391D544 ADRP X20, 0x830000
	0x0391D548 LDRB W8, [X22 + 0x891]
	0x0391D54C LDR X21, [X21 + 0xD28]
	0x0391D550 LDR X20, [X20 + 0xD30]
	0x0391D554 MOV X19, X0
	0x0391D558 TBNZ X8, 0x0, 0x391D57C
	0x0391D55C ADRP X0, 0x830000
	0x0391D560 LDR X0, [X0 + 0xD30]
	0x0391D564 BL 0x1C16CF4
	0x0391D568 ADRP X0, 0x830000
	0x0391D56C LDR X0, [X0 + 0xD28]
	0x0391D570 BL 0x1C16CF4
	0x0391D574 MOVZ W8, 0x1
	0x0391D578 STRB W8, [X22 + 0x891]
	0x0391D57C LDR X0, [X21]
	0x0391D580 LDR X19, [X19 + 0xD0]
	0x0391D584 BL 0x1C16F10
	0x0391D588 LDR X2, [X20]
	0x0391D58C MOV X1, X19
	0x0391D590 MOV X20, X0
	0x0391D594 BL 0x253DBA8
	0x0391D598 MOV X0, X20
	0x0391D59C LDP X20, X19, [X31 + 0x20]
	0x0391D5A0 LDP X22, X21, [X31 + 0x10]
	0x0391D5A4 LDR X30, [X31], #0x30
	0x0391D5A8 RET
	0x0391D5AC STR X30, [X31 - 0x30]!
	0x0391D5B0 STP X22, X21, [X31 + 0x10]
	0x0391D5B4 STP X20, X19, [X31 + 0x20]
	0x0391D5B8 ADRP X22, 0xAC4000
	0x0391D5BC ADRP X21, 0x830000
	0x0391D5C0 ADRP X20, 0x830000
	0x0391D5C4 LDRB W8, [X22 + 0x892]
	0x0391D5C8 LDR X21, [X21 + 0xD28]
	0x0391D5CC LDR X20, [X20 + 0xD30]
	0x0391D5D0 MOV X19, X0
	0x0391D5D4 TBNZ X8, 0x0, 0x391D5F8
	0x0391D5D8 ADRP X0, 0x830000
	0x0391D5DC LDR X0, [X0 + 0xD30]
	0x0391D5E0 BL 0x1C16CF4
	0x0391D5E4 ADRP X0, 0x830000
	0x0391D5E8 LDR X0, [X0 + 0xD28]
	0x0391D5EC BL 0x1C16CF4
	0x0391D5F0 MOVZ W8, 0x1
	0x0391D5F4 STRB W8, [X22 + 0x892]
	0x0391D5F8 LDR X0, [X21]
	0x0391D5FC LDR X19, [X19 + 0xE0]
	0x0391D600 BL 0x1C16F10
	0x0391D604 LDR X2, [X20]
	0x0391D608 MOV X1, X19
	0x0391D60C MOV X20, X0
	0x0391D610 BL 0x253DBA8
	0x0391D614 MOV X0, X20
	0x0391D618 LDP X20, X19, [X31 + 0x20]
	0x0391D61C LDP X22, X21, [X31 + 0x10]
	0x0391D620 LDR X30, [X31], #0x30
	0x0391D624 RET
	0x0391D628 STR X30, [X31 - 0x30]!
	0x0391D62C STP X22, X21, [X31 + 0x10]
	0x0391D630 STP X20, X19, [X31 + 0x20]
	0x0391D634 ADRP X22, 0xAC4000
	0x0391D638 ADRP X21, 0x830000
	0x0391D63C ADRP X20, 0x830000
	0x0391D640 LDRB W8, [X22 + 0x893]
	0x0391D644 LDR X21, [X21 + 0xD88]
	0x0391D648 LDR X20, [X20 + 0xD80]
	0x0391D64C MOV X19, X0
	0x0391D650 TBNZ X8, 0x0, 0x391D674
	0x0391D654 ADRP X0, 0x830000
	0x0391D658 LDR X0, [X0 + 0xD80]
	0x0391D65C BL 0x1C16CF4
	0x0391D660 ADRP X0, 0x830000
	0x0391D664 LDR X0, [X0 + 0xD88]
	0x0391D668 BL 0x1C16CF4
	0x0391D66C MOVZ W8, 0x1
	0x0391D670 STRB W8, [X22 + 0x893]
	0x0391D674 LDR X0, [X21]
	0x0391D678 LDR X19, [X19 + 0xD8]
	0x0391D67C BL 0x1C16F10

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0xAC5000
	015 Move W8, [X21+2185]
	016 Move X20, X2
	017 Move X19, X1
	018 Move [X31+8], X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {55}
	023 Move X0, 0x831000
	024 Move X0, [X0+3200]
	025 Call 0x1C17CF4
	026 Move X0, 0x7D9000
	027 Move X0, [X0+2520]
	028 Call 0x1C17CF4
	029 Move X0, 0x7DE000
	030 Move X0, [X0+1656]
	031 Call 0x1C17CF4
	032 Move X0, 0x7D7000
	033 Move X0, [X0+3584]
	034 Call 0x1C17CF4
	035 Move X0, 0x831000
	036 Move X0, [X0+3504]
	037 Call 0x1C17CF4
	038 Move X0, 0x831000
	039 Move X0, [X0+3512]
	040 Call 0x1C17CF4
	041 Move X0, 0x7D7000
	042 Move X0, [X0+3608]
	043 Call 0x1C17CF4
	044 Move X0, 0x7D8000
	045 Move X0, [X0+3600]
	046 Call 0x1C17CF4
	047 Move X0, 0x7DE000
	048 Move X0, [X0+2136]
	049 Call 0x1C17CF4
	050 Move X0, 0x832000
	051 Move X0, [X0+1320]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X21+2185], W8
	055 Compare X19, 0
	056 JumpIfEqual {301}
	057 Compare X20, 0
	058 JumpIfEqual {308}
	059 Move W8, [X20+28]
	060 Move X28, 0x832000
	061 Move X28, [X28+1320]
	062 Add W8, W8, 1
	063 Move [X20+24], W31
	064 Move [X20+28], W8
	065 Move X0, [X28]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {71}
	069 Call 0x1C17DFC
	070 Move X0, [X28]
	071 Move X8, [X0+184]
	072 Move X0, [X8+40]
	073 Compare X0, 0
	074 JumpIfEqual {326}
	075 Move X8, 0x7DE000
	076 Move X8, [X8+1656]
	077 Move X21, 0x831000
	078 Move X1, [X8]
	079 Move X21, [X21+3504]
	080 Call HashSet`1<Int32>.Clear, X0
	081 Move X0, [X31+8]
	082 Call ProBuilderMesh.get_sharedVertexLookup, X0
	083 Move X8, [X19]
	084 Move X1, [X21]
	085 Move X22, X0
	086 NotImplemented "Instruction LDRH not yet implemented."
	087 Compare X9, 0
	088 JumpIfEqual {95}
	089 Move X10, [X8+176]
	090 Add X10, X10, 8
	091 NotImplemented "Instruction LDUR not yet implemented."
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Subtract X9, X9, 1
	094 Add X10, X10, 16
	095 Move X0, X19
	096 Move W2, W31
	097 Call 0x1C5D788
	098 NotImplemented "Instruction LDRSW not yet implemented."
	099 Add X8, X8, X9
	100 Add X0, X8, 312
	101 Move X8, [X0]
	102 Move X1, [X0+8]
	103 Move X0, X19
	104 NotImplemented "Instruction BLR not yet implemented."
	105 Move [X31], X0
	106 Compare X0, 0
	107 JumpIfEqual {327}
	108 Move X27, 0x831000
	109 Move X29, 0x7D9000
	110 Move X19, 0x7D8000
	111 Move X27, [X27+3200]
	112 Move X29, [X29+2520]
	113 Move X19, [X19+3600]
	114 Move X21, [X31]
	115 Move X10, 0x7D7000
	116 Move X8, [X21]
	117 NotImplemented "Instruction LDRH not yet implemented."
	118 Move X10, [X10+3608]
	119 Move X1, [X10]
	120 Compare X9, 0
	121 JumpIfEqual {128}
	122 Move X10, [X8+176]
	123 Add X10, X10, 8
	124 NotImplemented "Instruction LDUR not yet implemented."
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Subtract X9, X9, 1
	127 Add X10, X10, 16
	128 Move X0, X21
	129 Move W2, W31
	130 Call 0x1C5D788
	131 NotImplemented "Instruction LDRSW not yet implemented."
	132 Add X8, X8, X9
	133 Add X0, X8, 312
	134 Move X8, [X0]
	135 Move X1, [X0+8]
	136 Move X0, X21
	137 NotImplemented "Instruction BLR not yet implemented."
	138 Move TEMP, X0
	139 And TEMP, TEMP, 1
	140 Compare TEMP, 1
	141 JumpIfNotEqual {247}
	142 Move X8, [X21]
	143 Move X10, 0x831000
	144 NotImplemented "Instruction LDRH not yet implemented."
	145 Move X10, [X10+3512]
	146 Move X1, [X10]
	147 Compare X9, 0
	148 JumpIfEqual {155}
	149 Move X10, [X8+176]
	150 Add X10, X10, 8
	151 NotImplemented "Instruction LDUR not yet implemented."
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Subtract X9, X9, 1
	154 Add X10, X10, 16
	155 Move X0, X21
	156 Move W2, W31
	157 Call 0x1C5D788
	158 NotImplemented "Instruction LDRSW not yet implemented."
	159 Add X8, X8, X9
	160 Add X0, X8, 312
	161 Move X8, [X0]
	162 Move X1, [X0+8]
	163 Move X0, X21
	164 NotImplemented "Instruction BLR not yet implemented."
	165 Compare X0, 0
	166 JumpIfEqual {299}
	167 Move X1, X31
	168 Call Face.get_distinctIndexesInternal, X0
	169 Move X23, X0
	170 Compare X0, 0
	171 JumpIfEqual {300}
	172 Move X8, [X23+24]
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Move X21, X31
	175 And X8, X8, 0
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Compare X22, 0
	178 JumpIfEqual {294}
	179 Add X8, X23, X21
	180 Move W1, [X8+32]
	181 Move X2, [X27]
	182 Move X0, X22
	183 Call Dictionary`2<Int32, Int32>.get_Item, X0, X1
	184 Move W24, W0
	185 Move X0, [X28]
	186 Move W8, [X0+224]
	187 Compare W8, 0
	188 JumpIfNotEqual {191}
	189 Call 0x1C17DFC
	190 Move X0, [X28]
	191 Move X8, [X0+184]
	192 Move X0, [X8+40]
	193 Compare X0, 0
	194 JumpIfEqual {293}
	195 Move X2, [X29]
	196 Move W1, W24
	197 Call HashSet`1<Int32>.Add, X0, X1
	198 Move TEMP, X0
	199 And TEMP, TEMP, 1
	200 Compare TEMP, 1
	201 JumpIfNotEqual {244}
	202 Move X8, [X31+8]
	203 Move X8, [X8+48]
	204 Compare X8, 0
	205 JumpIfEqual {296}
	206 Move W9, [X8+24]
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Add X8, X8, W24
	209 Move X24, [X8+32]
	210 Compare X24, 0
	211 JumpIfEqual {297}
	212 Move X0, X24
	213 Move X1, X31
	214 Call SharedVertex.get_Count, X0
	215 Move W25, W0
	216 NotImplemented "Instruction CMP not yet implemented."
	217 Move W26, W31
	218 Move X0, X24
	219 Move W1, W26
	220 Move X2, X31
	221 Call SharedVertex.get_Item, X0, X1
	222 Move W1, W0
	223 Move W10, [X20+28]
	224 Move X8, [X20+16]
	225 Move X9, [X19]
	226 Add W10, W10, 1
	227 Move [X20+28], W10
	228 Compare X8, 0
	229 JumpIfEqual {292}
	230 NotImplemented "Instruction LDRSW not yet implemented."
	231 Move W11, [X8+24]
	232 NotImplemented "Instruction CMP not yet implemented."
	233 Add W9, W10, 1
	234 Add X8, X8, X10
	235 Move [X20+24], W9
	236 Move [X8+32], W1
	237 Move X8, [X9+32]
	238 Move X8, [X8+192]
	239 Move X2, [X8+112]
	240 Move X0, X20
	241 Call List`1<Int32>.AddWithResize, X0, X1
	242 Add W26, W26, 1
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Move W8, [X23+24]
	245 Add X21, X21, 1
	246 NotImplemented "Instruction CMP not yet implemented."
	247 Move X21, X31
	248 Move X8, [X31]
	249 Compare X8, 0
	250 JumpIfEqual {276}
	251 Move X8, [X8]
	252 Move X10, 0x7D7000
	253 NotImplemented "Instruction LDRH not yet implemented."
	254 Move X10, [X10+3584]
	255 Move X1, [X10]
	256 Compare X9, 0
	257 JumpIfEqual {264}
	258 Move X10, [X8+176]
	259 Add X10, X10, 8
	260 NotImplemented "Instruction LDUR not yet implemented."
	261 NotImplemented "Instruction CMP not yet implemented."
	262 Subtract X9, X9, 1
	263 Add X10, X10, 16
	264 Move X19, [X31]
	265 Move W2, W31
	266 Move X0, X19
	267 Call 0x1C5D788
	268 NotImplemented "Instruction LDRSW not yet implemented."
	269 Move X19, [X31]
	270 Add X8, X8, X9
	271 Add X0, X8, 312
	272 Move X8, [X0]
	273 Move X1, [X0+8]
	274 Move X0, X19
	275 NotImplemented "Instruction BLR not yet implemented."
	276 Compare X21, 0
	277 JumpIfNotEqual {328}
	278 Move X20, [X31+96]
	279 Move X19, [X31+104]
	280 Move X22, [X31+80]
	281 Move X21, [X31+88]
	282 Move X24, [X31+64]
	283 Move X23, [X31+72]
	284 Move X26, [X31+48]
	285 Move X25, [X31+56]
	286 Move X28, [X31+32]
	287 Move X27, [X31+40]
	288 Move X29, [X31+16]
	289 Move X30, [X31+24]
	290 Add X31, X31, 112
	291 Return 
	292 Call 0x1C17F20
	293 Call 0x1C17F20
	294 Call 0x1C17F20
	295 Call 0x1C17F28
	296 Call 0x1C17F20
	297 Call 0x1C17F20
	298 Call 0x1C17F28
	299 Call 0x1C17F20
	300 Call 0x1C17F20
	301 Move X0, 0x7DC000
	302 Move X0, [X0+1320]
	303 Call 0x1C17D08
	304 Call 0x1C17F10
	305 Move X19, X0
	306 Move X0, 0x832000
	307 Move X0, [X0+1600]
	308 Move X0, 0x7DC000
	309 Move X0, [X0+1320]
	310 Call 0x1C17D08
	311 Call 0x1C17F10
	312 Move X19, X0
	313 Move X0, 0x832000
	314 Move X0, [X0+1584]
	315 Call 0x1C17D08
	316 Move X1, X0
	317 Move X0, X19
	318 Move X2, X31
	319 Call ArgumentNullException..ctor, X0, X1
	320 Move X0, 0x832000
	321 Move X0, [X0+1608]
	322 Call 0x1C17D08
	323 Move X1, X0
	324 Move X0, X19
	325 Call 0x1C17DEC
	326 Call 0x1C17F20
	327 Call 0x1C17F20
	328 Move X0, X21
	329 Call 0x1C17F18
	330 Move X20, X0
	331 NotImplemented "Instruction CMP not yet implemented."
	332 Move X0, X20
	333 Call 0x3EB2AD0
	334 Move X21, [X0]
	335 Call 0x3EB2AE0
	336 Move X21, X31
	337 Move X20, X0
	338 Move X8, [X31]
	339 Compare X8, 0
	340 JumpIfEqual {365}
	341 Move X8, [X31]
	342 Move X10, 0x7D7000
	343 Move X8, [X8]
	344 NotImplemented "Instruction LDRH not yet implemented."
	345 Move X10, [X10+3584]
	346 Move X1, [X10]
	347 Compare X9, 0
	348 JumpIfEqual {355}
	349 Move X10, [X8+176]
	350 Add X10, X10, 8
	351 NotImplemented "Instruction LDUR not yet implemented."
	352 NotImplemented "Instruction CMP not yet implemented."
	353 Subtract X9, X9, 1
	354 Add X10, X10, 16
	355 Move X0, [X31]
	356 Move W2, W31
	357 Call 0x1C5D788
	358 NotImplemented "Instruction LDRSW not yet implemented."
	359 Add X8, X8, X9
	360 Add X0, X8, 312
	361 Move X8, [X0]
	362 Move X1, [X0+8]
	363 Move X0, [X31]
	364 NotImplemented "Instruction BLR not yet implemented."
	365 Compare X21, 0
	366 JumpIfNotEqual {369}
	367 Move X0, X20
	368 Call 0x1D2D690
	369 Move X0, X21
	370 Call 0x1C17F18
	371 Call 0x1991590

Method: System.Void GetCoincidentVertices(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Edge> edges, System.Collections.Generic.List`1<System.Int32> coincident)

Disassembly:
	0x0391D680 LDR X2, [X20]
	0x0391D684 MOV X1, X19
	0x0391D688 MOV X20, X0
	0x0391D68C BL 0x2532FB8
	0x0391D690 MOV X0, X20
	0x0391D694 LDP X20, X19, [X31 + 0x20]
	0x0391D698 LDP X22, X21, [X31 + 0x10]
	0x0391D69C LDR X30, [X31], #0x30
	0x0391D6A0 RET
	0x0391D6A4 B 0x391D464
	0x0391D6A8 STP X30, X25, [X31 - 0x40]!
	0x0391D6AC STP X24, X23, [X31 + 0x10]
	0x0391D6B0 STP X22, X21, [X31 + 0x20]
	0x0391D6B4 STP X20, X19, [X31 + 0x30]
	0x0391D6B8 ADRP X24, 0xAC4000
	0x0391D6BC ADRP X25, 0x831000
	0x0391D6C0 ADRP X21, 0x831000
	0x0391D6C4 ADRP X23, 0x831000
	0x0391D6C8 ADRP X22, 0x7D8000
	0x0391D6CC LDRB W8, [X24 + 0x894]
	0x0391D6D0 LDR X25, [X25 + 0x510]
	0x0391D6D4 LDR X21, [X21 + 0x690]
	0x0391D6D8 LDR X23, [X23 + 0x698]
	0x0391D6DC LDR X22, [X22 + 0x9C8]
	0x0391D6E0 MOV X20, X1
	0x0391D6E4 MOV X19, X0
	0x0391D6E8 TBNZ X8, 0x0, 0x391D724
	0x0391D6EC ADRP X0, 0x831000
	0x0391D6F0 LDR X0, [X0 + 0x698]
	0x0391D6F4 BL 0x1C16CF4
	0x0391D6F8 ADRP X0, 0x7D8000
	0x0391D6FC LDR X0, [X0 + 0x9C8]
	0x0391D700 BL 0x1C16CF4
	0x0391D704 ADRP X0, 0x831000
	0x0391D708 LDR X0, [X0 + 0x510]
	0x0391D70C BL 0x1C16CF4
	0x0391D710 ADRP X0, 0x831000
	0x0391D714 LDR X0, [X0 + 0x690]
	0x0391D718 BL 0x1C16CF4
	0x0391D71C MOVZ W8, 0x1
	0x0391D720 STRB W8, [X24 + 0x894]
	0x0391D724 LDR X0, [X25]
	0x0391D728 BL 0x1C16F10
	0x0391D72C LDR X2, [X21]
	0x0391D730 MOV X1, X19
	0x0391D734 MOV X3, X31
	0x0391D738 MOV X21, X0
	0x0391D73C BL 0x2D30128
	0x0391D740 LDR X2, [X23]
	0x0391D744 MOV X0, X20
	0x0391D748 MOV X1, X21
	0x0391D74C BL 0x21CEC3C
	0x0391D750 LDR X1, [X22]
	0x0391D754 BL 0x21D54D4
	0x0391D758 STR X0, [X19 + 0xD0]
	0x0391D75C LDP X20, X19, [X31 + 0x30]
	0x0391D760 LDP X22, X21, [X31 + 0x20]
	0x0391D764 LDP X24, X23, [X31 + 0x10]
	0x0391D768 LDP X30, X25, [X31], #0x40
	0x0391D76C RET
	0x0391D770 LDR X0, [X0 + 0xD0]
	0x0391D774 RET
	0x0391D778 STR X1, [X0 + 0xD0]
	0x0391D77C RET
	0x0391D780 LDR X0, [X0 + 0xD8]
	0x0391D784 RET
	0x0391D788 STR X1, [X0 + 0xD8]
	0x0391D78C RET
	0x0391D790 LDR X0, [X0 + 0xE0]
	0x0391D794 RET
	0x0391D798 STR X1, [X0 + 0xE0]
	0x0391D79C RET
	0x0391D7A0 STR X30, [X31 - 0x10]!
	0x0391D7A4 LDR X8, [X0 + 0xD0]
	0x0391D7A8 CBZ X8, 0x391D7F4
	0x0391D7AC LDR X10, [X8 + 0x18]
	0x0391D7B0 CMP W10, 0x1
	0x0391D7B4 B.LT 0x391D7E8
	0x0391D7B8 LDR X9, [X0 + 0x28]
	0x0391D7BC CBZ X9, 0x391D7F4
	0x0391D7C0 MOV X11, INVALID
	0x0391D7C4 ADD X10, X11, X10, 0x20, LSL
	0x0391D7C8 ADD X8, X8, X10, 0x1E, ASR
	0x0391D7CC LDRSW X8, [X8 + 0x20]
	0x0391D7D0 LDR W10, [X9 + 0x18]
	0x0391D7D4 CMP W8, W10
	0x0391D7D8 B.CS 0x391D7F8
	0x0391D7DC ADD X8, X9, X8, 0x3, LSL
	0x0391D7E0 LDR X0, [X8 + 0x20]
	0x0391D7E4 B 0x391D7EC
	0x0391D7E8 MOV X0, X31
	0x0391D7EC LDR X30, [X31], #0x10
	0x0391D7F0 RET
	0x0391D7F4 BL 0x1C16F20
	0x0391D7F8 BL 0x1C16F28
	0x0391D7FC STR X30, [X31 - 0x20]!
	0x0391D800 STP X20, X19, [X31 + 0x10]
	0x0391D804 ADRP X20, 0xAC4000
	0x0391D808 LDRB W8, [X20 + 0x895]
	0x0391D80C MOV X19, X0
	0x0391D810 TBNZ X8, 0x0, 0x391D828
	0x0391D814 ADRP X0, 0x7FE000
	0x0391D818 LDR X0, [X0 + 0x600]
	0x0391D81C BL 0x1C16CF4
	0x0391D820 MOVZ W8, 0x1
	0x0391D824 STRB W8, [X20 + 0x895]
	0x0391D828 LDR X8, [X19 + 0xD8]
	0x0391D82C CBZ X8, 0x391D880
	0x0391D830 LDR X9, [X8 + 0x18]
	0x0391D834 CMP W9, 0x0
	0x0391D838 B.LE 0x391D850
	0x0391D83C MOV X10, INVALID
	0x0391D840 ADD X9, X10, X9, 0x20, LSL
	0x0391D844 ADD X8, X8, X9, 0x1D, ASR
	0x0391D848 ADD X8, X8, 0x20
	0x0391D84C B 0x391D870
	0x0391D850 ADRP X19, 0x7FE000
	0x0391D854 LDR X19, [X19 + 0x600]
	0x0391D858 LDR X0, [X19]
	0x0391D85C LDR W8, [X0 + 0xE0]
	0x0391D860 CBNZ W8, 0x391D86C
	0x0391D864 BL 0x1C16DFC
	0x0391D868 LDR X0, [X19]
	0x0391D86C LDR X8, [X0 + 0xB8]
	0x0391D870 LDR X0, [X8]
	0x0391D874 LDP X20, X19, [X31 + 0x10]
	0x0391D878 LDR X30, [X31], #0x20
	0x0391D87C RET
	0x0391D880 BL 0x1C16F20
	0x0391D884 STR X30, [X31 - 0x10]!
	0x0391D888 LDR X8, [X0 + 0xE0]
	0x0391D88C CBZ X8, 0x391D8BC
	0x0391D890 LDR X9, [X8 + 0x18]
	0x0391D894 CMP W9, 0x1
	0x0391D898 B.LT 0x391D8B0
	0x0391D89C MOV X10, INVALID
	0x0391D8A0 ADD X9, X10, X9, 0x20, LSL
	0x0391D8A4 ADD X8, X8, X9, 0x1E, ASR
	0x0391D8A8 LDR W0, [X8 + 0x20]
	0x0391D8AC B 0x391D8B4
	0x0391D8B0 MOVN W0, 0x0
	0x0391D8B4 LDR X30, [X31], #0x10
	0x0391D8B8 RET
	0x0391D8BC BL 0x1C16F20
	0x0391D8C0 STP X30, X21, [X31 - 0x20]!
	0x0391D8C4 STP X20, X19, [X31 + 0x10]
	0x0391D8C8 ADRP X21, 0xAC4000
	0x0391D8CC LDRB W8, [X21 + 0x896]
	0x0391D8D0 MOV W20, W1
	0x0391D8D4 MOV X19, X0
	0x0391D8D8 TBNZ X8, 0x0, 0x391D8F0
	0x0391D8DC ADRP X0, 0x831000
	0x0391D8E0 LDR X0, [X0 + 0x6A0]
	0x0391D8E4 BL 0x1C16CF4
	0x0391D8E8 MOVZ W8, 0x1
	0x0391D8EC STRB W8, [X21 + 0x896]
	0x0391D8F0 TBNZ X20, 0x1F, 0x391D920
	0x0391D8F4 ADRP X8, 0x831000
	0x0391D8F8 LDR X8, [X8 + 0x6A0]
	0x0391D8FC LDR X0, [X19 + 0xD0]
	0x0391D900 MOV W1, W20
	0x0391D904 LDR X2, [X8]
	0x0391D908 BL 0x217CCA0
	0x0391D90C MOV X1, X0
	0x0391D910 MOV X0, X19
	0x0391D914 LDP X20, X19, [X31 + 0x10]
	0x0391D918 LDP X30, X21, [X31], #0x20
	0x0391D91C B 0x391D92C
	0x0391D920 LDP X20, X19, [X31 + 0x10]
	0x0391D924 LDP X30, X21, [X31], #0x20
	0x0391D928 RET
	0x0391D92C STP X29, X30, [X31 - 0x60]!
	0x0391D930 STP X28, X27, [X31 + 0x10]
	0x0391D934 STP X26, X25, [X31 + 0x20]
	0x0391D938 STP X24, X23, [X31 + 0x30]
	0x0391D93C STP X22, X21, [X31 + 0x40]
	0x0391D940 STP X20, X19, [X31 + 0x50]
	0x0391D944 ADRP X21, 0xAC4000
	0x0391D948 LDRB W8, [X21 + 0x898]
	0x0391D94C MOV X20, X1
	0x0391D950 MOV X19, X0
	0x0391D954 TBNZ X8, 0x0, 0x391D9CC
	0x0391D958 ADRP X0, 0x831000
	0x0391D95C LDR X0, [X0 + 0x6A8]
	0x0391D960 BL 0x1C16CF4
	0x0391D964 ADRP X0, 0x831000
	0x0391D968 LDR X0, [X0 + 0x6B0]
	0x0391D96C BL 0x1C16CF4
	0x0391D970 ADRP X0, 0x830000
	0x0391D974 LDR X0, [X0 + 0xD40]
	0x0391D978 BL 0x1C16CF4
	0x0391D97C ADRP X0, 0x7D8000
	0x0391D980 LDR X0, [X0 + 0x9C8]
	0x0391D984 BL 0x1C16CF4
	0x0391D988 ADRP X0, 0x831000
	0x0391D98C LDR X0, [X0 + 0x6B8]
	0x0391D990 BL 0x1C16CF4
	0x0391D994 ADRP X0, 0x831000
	0x0391D998 LDR X0, [X0 + 0x6C0]
	0x0391D99C BL 0x1C16CF4
	0x0391D9A0 ADRP X0, 0x831000
	0x0391D9A4 LDR X0, [X0 + 0x6C8]
	0x0391D9A8 BL 0x1C16CF4
	0x0391D9AC ADRP X0, 0x831000
	0x0391D9B0 LDR X0, [X0 + 0x6D0]
	0x0391D9B4 BL 0x1C16CF4
	0x0391D9B8 ADRP X0, 0x831000
	0x0391D9BC LDR X0, [X0 + 0x528]
	0x0391D9C0 BL 0x1C16CF4
	0x0391D9C4 MOVZ W8, 0x1
	0x0391D9C8 STRB W8, [X21 + 0x898]
	0x0391D9CC ADRP X22, 0x831000
	0x0391D9D0 LDR X22, [X22 + 0x528]
	0x0391D9D4 CBZ X20, 0x391DAA4
	0x0391D9D8 ADRP X23, 0x7D8000
	0x0391D9DC LDR X23, [X23 + 0x9C8]
	0x0391D9E0 ADRP X21, 0x831000
	0x0391D9E4 ADRP X24, 0x831000
	0x0391D9E8 ADRP X25, 0x831000
	0x0391D9EC ADRP X26, 0x831000
	0x0391D9F0 LDR X21, [X21 + 0x6C0]
	0x0391D9F4 LDR X24, [X24 + 0x6C8]
	0x0391D9F8 LDR X25, [X25 + 0x6B0]
	0x0391D9FC LDR X26, [X26 + 0x6B8]
	0x0391DA00 LDR X1, [X23]
	0x0391DA04 ADRP X27, 0x831000
	0x0391DA08 ADRP X28, 0x831000
	0x0391DA0C ADRP X29, 0x830000
	0x0391DA10 LDR X27, [X27 + 0x6D0]
	0x0391DA14 LDR X28, [X28 + 0x6A8]
	0x0391DA18 LDR X29, [X29 + 0xD40]
	0x0391DA1C MOV X0, X20
	0x0391DA20 BL 0x21D54D4
	0x0391DA24 STR X0, [X19 + 0xD0]
	0x0391DA28 MOV X20, X0
	0x0391DA2C LDR X0, [X21]
	0x0391DA30 BL 0x1C16F10
	0x0391DA34 LDR X2, [X24]
	0x0391DA38 MOV X1, X19
	0x0391DA3C MOV X3, X31
	0x0391DA40 MOV X21, X0
	0x0391DA44 BL 0x2D2D154
	0x0391DA48 LDR X2, [X25]
	0x0391DA4C MOV X0, X20
	0x0391DA50 MOV X1, X21
	0x0391DA54 BL 0x21D0EF8
	0x0391DA58 LDR X1, [X23]
	0x0391DA5C BL 0x21D54D4
	0x0391DA60 STR X0, [X19 + 0xE0]
	0x0391DA64 LDR X0, [X26]
	0x0391DA68 LDR X20, [X19 + 0xD0]
	0x0391DA6C BL 0x1C16F10
	0x0391DA70 LDR X2, [X27]
	0x0391DA74 MOV X1, X19
	0x0391DA78 MOV X3, X31
	0x0391DA7C MOV X21, X0
	0x0391DA80 BL 0x2D2D154
	0x0391DA84 LDR X2, [X28]
	0x0391DA88 MOV X0, X20
	0x0391DA8C MOV X1, X21
	0x0391DA90 BL 0x21D0E88
	0x0391DA94 LDR X1, [X29]
	0x0391DA98 BL 0x21D544C
	0x0391DA9C STR X0, [X19 + 0xD8]
	0x0391DAA0 B 0x391DAAC
	0x0391DAA4 MOV X0, X19
	0x0391DAA8 BL 0x3918CAC
	0x0391DAAC MOVZ W8, 0x1
	0x0391DAB0 STRB W8, [X19 + 0xE8]
	0x0391DAB4 LDR X0, [X22]
	0x0391DAB8 LDR W8, [X0 + 0xE0]
	0x0391DABC CBNZ W8, 0x391DAC8
	0x0391DAC0 BL 0x1C16DFC
	0x0391DAC4 LDR X0, [X22]
	0x0391DAC8 LDR X8, [X0 + 0xB8]
	0x0391DACC LDR X8, [X8 + 0x20]
	0x0391DAD0 CBZ X8, 0x391DB1C
	0x0391DAD4 LDR W9, [X0 + 0xE0]
	0x0391DAD8 CBNZ W9, 0x391DAF0
	0x0391DADC BL 0x1C16DFC
	0x0391DAE0 LDR X8, [X22]
	0x0391DAE4 LDR X8, [X8 + 0xB8]
	0x0391DAE8 LDR X8, [X8 + 0x20]
	0x0391DAEC CBZ X8, 0x391DB38
	0x0391DAF0 LDR X3, [X8 + 0x18]
	0x0391DAF4 LDR X0, [X8 + 0x40]
	0x0391DAF8 LDR X2, [X8 + 0x28]
	0x0391DAFC MOV X1, X19
	0x0391DB00 LDP X20, X19, [X31 + 0x50]
	0x0391DB04 LDP X22, X21, [X31 + 0x40]
	0x0391DB08 LDP X24, X23, [X31 + 0x30]
	0x0391DB0C LDP X26, X25, [X31 + 0x20]
	0x0391DB10 LDP X28, X27, [X31 + 0x10]
	0x0391DB14 LDP X29, X30, [X31], #0x60
	0x0391DB18 BR X3
	0x0391DB1C LDP X20, X19, [X31 + 0x50]
	0x0391DB20 LDP X22, X21, [X31 + 0x40]
	0x0391DB24 LDP X24, X23, [X31 + 0x30]
	0x0391DB28 LDP X26, X25, [X31 + 0x20]
	0x0391DB2C LDP X28, X27, [X31 + 0x10]
	0x0391DB30 LDP X29, X30, [X31], #0x60
	0x0391DB34 RET
	0x0391DB38 BL 0x1C16F20
	0x0391DB3C STR X30, [X31 - 0x30]!
	0x0391DB40 STP X22, X21, [X31 + 0x10]
	0x0391DB44 STP X20, X19, [X31 + 0x20]
	0x0391DB48 ADRP X21, 0xAC4000
	0x0391DB4C LDRB W8, [X21 + 0x897]
	0x0391DB50 MOV X20, X1
	0x0391DB54 MOV X19, X0
	0x0391DB58 TBNZ X8, 0x0, 0x391DB88
	0x0391DB5C ADRP X0, 0x831000
	0x0391DB60 LDR X0, [X0 + 0x698]
	0x0391DB64 BL 0x1C16CF4
	0x0391DB68 ADRP X0, 0x831000
	0x0391DB6C LDR X0, [X0 + 0x510]
	0x0391DB70 BL 0x1C16CF4
	0x0391DB74 ADRP X0, 0x831000
	0x0391DB78 LDR X0, [X0 + 0x6D8]
	0x0391DB7C BL 0x1C16CF4
	0x0391DB80 MOVZ W8, 0x1
	0x0391DB84 STRB W8, [X21 + 0x897]
	0x0391DB88 CBZ X20, 0x391DBEC
	0x0391DB8C ADRP X8, 0x831000
	0x0391DB90 LDR X8, [X8 + 0x510]
	0x0391DB94 ADRP X21, 0x831000
	0x0391DB98 ADRP X22, 0x831000
	0x0391DB9C LDR X0, [X8]
	0x0391DBA0 LDR X21, [X21 + 0x6D8]
	0x0391DBA4 LDR X22, [X22 + 0x698]
	0x0391DBA8 BL 0x1C16F10
	0x0391DBAC LDR X2, [X21]
	0x0391DBB0 MOV X1, X19
	0x0391DBB4 MOV X3, X31
	0x0391DBB8 MOV X21, X0
	0x0391DBBC BL 0x2D30128
	0x0391DBC0 LDR X2, [X22]
	0x0391DBC4 MOV X0, X20
	0x0391DBC8 MOV X1, X21
	0x0391DBCC BL 0x21CEC3C
	0x0391DBD0 MOV X1, X0
	0x0391DBD4 CBZ X19, 0x391DBF4
	0x0391DBD8 MOV X0, X19
	0x0391DBDC LDP X20, X19, [X31 + 0x20]
	0x0391DBE0 LDP X22, X21, [X31 + 0x10]
	0x0391DBE4 LDR X30, [X31], #0x30
	0x0391DBE8 B 0x391D92C
	0x0391DBEC MOV X1, X31
	0x0391DBF0 CBNZ X19, 0x391DBD8
	0x0391DBF4 BL 0x1C16F20
	0x0391DBF8 STR X30, [X31 - 0x30]!
	0x0391DBFC STP X22, X21, [X31 + 0x10]
	0x0391DC00 STP X20, X19, [X31 + 0x20]
	0x0391DC04 ADRP X21, 0xAC4000
	0x0391DC08 LDRB W8, [X21 + 0x899]
	0x0391DC0C MOV X20, X1
	0x0391DC10 MOV X19, X0
	0x0391DC14 TBNZ X8, 0x0, 0x391DC44
	0x0391DC18 ADRP X0, 0x830000
	0x0391DC1C LDR X0, [X0 + 0xD40]
	0x0391DC20 BL 0x1C16CF4
	0x0391DC24 ADRP X0, 0x7D7000
	0x0391DC28 LDR X0, [X0 + 0xE58]
	0x0391DC2C BL 0x1C16CF4
	0x0391DC30 ADRP X0, 0x831000
	0x0391DC34 LDR X0, [X0 + 0x528]
	0x0391DC38 BL 0x1C16CF4
	0x0391DC3C MOVZ W8, 0x1
	0x0391DC40 STRB W8, [X21 + 0x899]
	0x0391DC44 ADRP X21, 0x831000
	0x0391DC48 LDR X21, [X21 + 0x528]
	0x0391DC4C CBZ X20, 0x391DC90
	0x0391DC50 ADRP X8, 0x7D7000
	0x0391DC54 LDR X8, [X8 + 0xE58]
	0x0391DC58 ADRP X22, 0x830000
	0x0391DC5C MOV W1, W31
	0x0391DC60 LDR X0, [X8]
	0x0391DC64 LDR X22, [X22 + 0xD40]
	0x0391DC68 BL 0x1C16D6C
	0x0391DC6C STR X0, [X19 + 0xD0]
	0x0391DC70 LDR X1, [X22]
	0x0391DC74 MOV X0, X20
	0x0391DC78 BL 0x21D544C
	0x0391DC7C MOV X1, X31
	0x0391DC80 STR X0, [X19 + 0xD8]
	0x0391DC84 BL 0x38FF834
	0x0391DC88 STR X0, [X19 + 0xE0]
	0x0391DC8C B 0x391DC98
	0x0391DC90 MOV X0, X19
	0x0391DC94 BL 0x3918CAC
	0x0391DC98 MOVZ W8, 0x1
	0x0391DC9C STRB W8, [X19 + 0xE8]
	0x0391DCA0 LDR X0, [X21]
	0x0391DCA4 LDR W8, [X0 + 0xE0]
	0x0391DCA8 CBNZ W8, 0x391DCB4
	0x0391DCAC BL 0x1C16DFC
	0x0391DCB0 LDR X0, [X21]
	0x0391DCB4 LDR X8, [X0 + 0xB8]
	0x0391DCB8 LDR X8, [X8 + 0x20]
	0x0391DCBC CBZ X8, 0x391DCFC
	0x0391DCC0 LDR W9, [X0 + 0xE0]
	0x0391DCC4 CBNZ W9, 0x391DCDC
	0x0391DCC8 BL 0x1C16DFC
	0x0391DCCC LDR X8, [X21]
	0x0391DCD0 LDR X8, [X8 + 0xB8]
	0x0391DCD4 LDR X8, [X8 + 0x20]
	0x0391DCD8 CBZ X8, 0x391DD0C
	0x0391DCDC LDR X3, [X8 + 0x18]
	0x0391DCE0 LDR X0, [X8 + 0x40]
	0x0391DCE4 LDR X2, [X8 + 0x28]
	0x0391DCE8 MOV X1, X19
	0x0391DCEC LDP X20, X19, [X31 + 0x20]
	0x0391DCF0 LDP X22, X21, [X31 + 0x10]
	0x0391DCF4 LDR X30, [X31], #0x30
	0x0391DCF8 BR X3

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0xAC5000
	015 Move W8, [X21+2186]
	016 Move X20, X2
	017 Move X19, X1
	018 Move [X31+8], X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {55}
	023 Move X0, 0x831000
	024 Move X0, [X0+3200]
	025 Call 0x1C17CF4
	026 Move X0, 0x7D9000
	027 Move X0, [X0+2520]
	028 Call 0x1C17CF4
	029 Move X0, 0x7DE000
	030 Move X0, [X0+1656]
	031 Call 0x1C17CF4
	032 Move X0, 0x7D7000
	033 Move X0, [X0+3584]
	034 Call 0x1C17CF4
	035 Move X0, 0x831000
	036 Move X0, [X0+3208]
	037 Call 0x1C17CF4
	038 Move X0, 0x831000
	039 Move X0, [X0+3216]
	040 Call 0x1C17CF4
	041 Move X0, 0x7D7000
	042 Move X0, [X0+3608]
	043 Call 0x1C17CF4
	044 Move X0, 0x7D8000
	045 Move X0, [X0+3600]
	046 Call 0x1C17CF4
	047 Move X0, 0x7DE000
	048 Move X0, [X0+2136]
	049 Call 0x1C17CF4
	050 Move X0, 0x832000
	051 Move X0, [X0+1320]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X21+2186], W8
	055 Move X0, [X31+8]
	056 Call ProBuilderMesh.get_faces, X0
	057 Compare X0, 0
	058 JumpIfEqual {355}
	059 Compare X20, 0
	060 JumpIfEqual {362}
	061 Move W8, [X20+28]
	062 Move X28, 0x832000
	063 Move X28, [X28+1320]
	064 Add W8, W8, 1
	065 Move [X20+24], W31
	066 Move [X20+28], W8
	067 Move X0, [X28]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {73}
	071 Call 0x1C17DFC
	072 Move X0, [X28]
	073 Move X8, [X0+184]
	074 Move X0, [X8+40]
	075 Compare X0, 0
	076 JumpIfEqual {354}
	077 Move X8, 0x7DE000
	078 Move X8, [X8+1656]
	079 Move X1, [X8]
	080 Call HashSet`1<Int32>.Clear, X0
	081 Move X0, [X31+8]
	082 Call ProBuilderMesh.get_sharedVertexLookup, X0
	083 Compare X19, 0
	084 JumpIfEqual {354}
	085 Move X10, 0x831000
	086 Move X8, [X19]
	087 Move X10, [X10+3208]
	088 Move X22, X0
	089 NotImplemented "Instruction LDRH not yet implemented."
	090 Move X1, [X10]
	091 Compare X9, 0
	092 JumpIfEqual {99}
	093 Move X10, [X8+176]
	094 Add X10, X10, 8
	095 NotImplemented "Instruction LDUR not yet implemented."
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Subtract X9, X9, 1
	098 Add X10, X10, 16
	099 Move X0, X19
	100 Move W2, W31
	101 Call 0x1C5D788
	102 NotImplemented "Instruction LDRSW not yet implemented."
	103 Add X8, X8, X9
	104 Add X0, X8, 312
	105 Move X8, [X0]
	106 Move X1, [X0+8]
	107 Move X0, X19
	108 NotImplemented "Instruction BLR not yet implemented."
	109 Move X19, X0
	110 Compare X0, 0
	111 JumpIfEqual {380}
	112 Move X27, 0x831000
	113 Move X29, 0x7D9000
	114 Move X21, 0x7D8000
	115 Move X27, [X27+3200]
	116 Move X29, [X29+2520]
	117 Move X21, [X21+3600]
	118 Move X8, [X19]
	119 Move X10, 0x7D7000
	120 NotImplemented "Instruction LDRH not yet implemented."
	121 Move X10, [X10+3608]
	122 Move X1, [X10]
	123 Compare X9, 0
	124 JumpIfEqual {131}
	125 Move X10, [X8+176]
	126 Add X10, X10, 8
	127 NotImplemented "Instruction LDUR not yet implemented."
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Subtract X9, X9, 1
	130 Add X10, X10, 16
	131 Move X0, X19
	132 Move W2, W31
	133 Call 0x1C5D788
	134 NotImplemented "Instruction LDRSW not yet implemented."
	135 Add X8, X8, X9
	136 Add X0, X8, 312
	137 Move X8, [X0]
	138 Move X1, [X0+8]
	139 Move X0, X19
	140 NotImplemented "Instruction BLR not yet implemented."
	141 Move TEMP, X0
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfNotEqual {301}
	145 Move X8, [X19]
	146 Move X10, 0x831000
	147 NotImplemented "Instruction LDRH not yet implemented."
	148 Move X10, [X10+3216]
	149 Move X1, [X10]
	150 Compare X9, 0
	151 JumpIfEqual {158}
	152 Move X10, [X8+176]
	153 Add X10, X10, 8
	154 NotImplemented "Instruction LDUR not yet implemented."
	155 NotImplemented "Instruction CMP not yet implemented."
	156 Subtract X9, X9, 1
	157 Add X10, X10, 16
	158 Move X0, X19
	159 Move W2, W31
	160 Call 0x1C5D788
	161 NotImplemented "Instruction LDRSW not yet implemented."
	162 Add X8, X8, X9
	163 Add X0, X8, 312
	164 Move X8, [X0]
	165 Move X1, [X0+8]
	166 Move X0, X19
	167 NotImplemented "Instruction BLR not yet implemented."
	168 Compare X22, 0
	169 JumpIfEqual {345}
	170 Move X2, [X27]
	171 Move X23, X0
	172 Move X0, X22
	173 Move W1, W23
	174 Call Dictionary`2<Int32, Int32>.get_Item, X0, X1
	175 Move W24, W0
	176 Move X0, [X28]
	177 Move W8, [X0+224]
	178 Compare W8, 0
	179 JumpIfNotEqual {182}
	180 Call 0x1C17DFC
	181 Move X0, [X28]
	182 Move X8, [X0+184]
	183 Move X0, [X8+40]
	184 Compare X0, 0
	185 JumpIfEqual {346}
	186 Move X2, [X29]
	187 Move W1, W24
	188 Call HashSet`1<Int32>.Add, X0, X1
	189 Move TEMP, X0
	190 And TEMP, TEMP, 1
	191 Compare TEMP, 1
	192 JumpIfNotEqual {235}
	193 Move X8, [X31+8]
	194 Move X8, [X8+48]
	195 Compare X8, 0
	196 JumpIfEqual {348}
	197 Move W9, [X8+24]
	198 NotImplemented "Instruction CMP not yet implemented."
	199 Add X8, X8, W24
	200 Move X24, [X8+32]
	201 Compare X24, 0
	202 JumpIfEqual {349}
	203 Move X0, X24
	204 Move X1, X31
	205 Call SharedVertex.get_Count, X0
	206 Move W25, W0
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Move W26, W31
	209 Move X0, X24
	210 Move W1, W26
	211 Move X2, X31
	212 Call SharedVertex.get_Item, X0, X1
	213 Move W1, W0
	214 Move W10, [X20+28]
	215 Move X8, [X20+16]
	216 Move X9, [X21]
	217 Add W10, W10, 1
	218 Move [X20+28], W10
	219 Compare X8, 0
	220 JumpIfEqual {343}
	221 NotImplemented "Instruction LDRSW not yet implemented."
	222 Move W11, [X8+24]
	223 NotImplemented "Instruction CMP not yet implemented."
	224 Add W9, W10, 1
	225 Add X8, X8, X10
	226 Move [X20+24], W9
	227 Move [X8+32], W1
	228 Move X8, [X9+32]
	229 Move X8, [X8+192]
	230 Move X2, [X8+112]
	231 Move X0, X20
	232 Call List`1<Int32>.AddWithResize, X0, X1
	233 Add W26, W26, 1
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Move X2, [X27]
	236 Move X1, X23
	237 ShiftRight X1, 32
	238 And X1, X1, 0x7FFFFFFF
	239 Move X0, X22
	240 Call Dictionary`2<Int32, Int32>.get_Item, X0, X1
	241 Move W23, W0
	242 Move X0, [X28]
	243 Move W8, [X0+224]
	244 Compare W8, 0
	245 JumpIfNotEqual {248}
	246 Call 0x1C17DFC
	247 Move X0, [X28]
	248 Move X8, [X0+184]
	249 Move X0, [X8+40]
	250 Compare X0, 0
	251 JumpIfEqual {347}
	252 Move X2, [X29]
	253 Move W1, W23
	254 Call HashSet`1<Int32>.Add, X0, X1
	255 Move TEMP, X0
	256 And TEMP, TEMP, 1
	257 Compare TEMP, 1
	258 JumpIfNotEqual {118}
	259 Move X8, [X31+8]
	260 Move X8, [X8+48]
	261 Compare X8, 0
	262 JumpIfEqual {353}
	263 Move W9, [X8+24]
	264 NotImplemented "Instruction CMP not yet implemented."
	265 Add X8, X8, W23
	266 Move X23, [X8+32]
	267 Compare X23, 0
	268 JumpIfEqual {351}
	269 Move X0, X23
	270 Move X1, X31
	271 Call SharedVertex.get_Count, X0
	272 Move W24, W0
	273 NotImplemented "Instruction CMP not yet implemented."
	274 Move W25, W31
	275 Move X0, X23
	276 Move W1, W25
	277 Move X2, X31
	278 Call SharedVertex.get_Item, X0, X1
	279 Move W1, W0
	280 Move W10, [X20+28]
	281 Move X8, [X20+16]
	282 Move X9, [X21]
	283 Add W10, W10, 1
	284 Move [X20+28], W10
	285 Compare X8, 0
	286 JumpIfEqual {344}
	287 NotImplemented "Instruction LDRSW not yet implemented."
	288 Move W11, [X8+24]
	289 NotImplemented "Instruction CMP not yet implemented."
	290 Add W9, W10, 1
	291 Add X8, X8, X10
	292 Move [X20+24], W9
	293 Move [X8+32], W1
	294 Move X8, [X9+32]
	295 Move X8, [X8+192]
	296 Move X2, [X8+112]
	297 Move X0, X20
	298 Call List`1<Int32>.AddWithResize, X0, X1
	299 Add W25, W25, 1
	300 NotImplemented "Instruction CMP not yet implemented."
	301 Move X21, X31
	302 Compare X19, 0
	303 JumpIfEqual {327}
	304 Move X8, [X19]
	305 Move X10, 0x7D7000
	306 NotImplemented "Instruction LDRH not yet implemented."
	307 Move X10, [X10+3584]
	308 Move X1, [X10]
	309 Compare X9, 0
	310 JumpIfEqual {317}
	311 Move X10, [X8+176]
	312 Add X10, X10, 8
	313 NotImplemented "Instruction LDUR not yet implemented."
	314 NotImplemented "Instruction CMP not yet implemented."
	315 Subtract X9, X9, 1
	316 Add X10, X10, 16
	317 Move X0, X19
	318 Move W2, W31
	319 Call 0x1C5D788
	320 NotImplemented "Instruction LDRSW not yet implemented."
	321 Add X8, X8, X9
	322 Add X0, X8, 312
	323 Move X8, [X0]
	324 Move X1, [X0+8]
	325 Move X0, X19
	326 NotImplemented "Instruction BLR not yet implemented."
	327 Compare X21, 0
	328 JumpIfNotEqual {381}
	329 Move X20, [X31+96]
	330 Move X19, [X31+104]
	331 Move X22, [X31+80]
	332 Move X21, [X31+88]
	333 Move X24, [X31+64]
	334 Move X23, [X31+72]
	335 Move X26, [X31+48]
	336 Move X25, [X31+56]
	337 Move X28, [X31+32]
	338 Move X27, [X31+40]
	339 Move X29, [X31+16]
	340 Move X30, [X31+24]
	341 Add X31, X31, 112
	342 Return 
	343 Call 0x1C17F20
	344 Call 0x1C17F20
	345 Call 0x1C17F20
	346 Call 0x1C17F20
	347 Call 0x1C17F20
	348 Call 0x1C17F20
	349 Call 0x1C17F20
	350 Call 0x1C17F28
	351 Call 0x1C17F20
	352 Call 0x1C17F28
	353 Call 0x1C17F20
	354 Call 0x1C17F20
	355 Move X0, 0x7DC000
	356 Move X0, [X0+1320]
	357 Call 0x1C17D08
	358 Call 0x1C17F10
	359 Move X19, X0
	360 Move X0, 0x832000
	361 Move X0, [X0+1616]
	362 Move X0, 0x7DC000
	363 Move X0, [X0+1320]
	364 Call 0x1C17D08
	365 Call 0x1C17F10
	366 Move X19, X0
	367 Move X0, 0x832000
	368 Move X0, [X0+1584]
	369 Call 0x1C17D08
	370 Move X1, X0
	371 Move X0, X19
	372 Move X2, X31
	373 Call ArgumentNullException..ctor, X0, X1
	374 Move X0, 0x832000
	375 Move X0, [X0+1624]
	376 Call 0x1C17D08
	377 Move X1, X0
	378 Move X0, X19
	379 Call 0x1C17DEC
	380 Call 0x1C17F20
	381 Move X0, X21
	382 Call 0x1C17F18
	383 Move X20, X0
	384 NotImplemented "Instruction CMP not yet implemented."
	385 Move X0, X20
	386 Call 0x3EB2AD0
	387 Move X21, [X0]
	388 Call 0x3EB2AE0
	389 Move X21, X31
	390 Move X20, X0
	391 Compare X19, 0
	392 JumpIfEqual {416}
	393 Move X8, [X19]
	394 Move X10, 0x7D7000
	395 NotImplemented "Instruction LDRH not yet implemented."
	396 Move X10, [X10+3584]
	397 Move X1, [X10]
	398 Compare X9, 0
	399 JumpIfEqual {406}
	400 Move X10, [X8+176]
	401 Add X10, X10, 8
	402 NotImplemented "Instruction LDUR not yet implemented."
	403 NotImplemented "Instruction CMP not yet implemented."
	404 Subtract X9, X9, 1
	405 Add X10, X10, 16
	406 Move X0, X19
	407 Move W2, W31
	408 Call 0x1C5D788
	409 NotImplemented "Instruction LDRSW not yet implemented."
	410 Add X8, X8, X9
	411 Add X0, X8, 312
	412 Move X8, [X0]
	413 Move X1, [X0+8]
	414 Move X0, X19
	415 NotImplemented "Instruction BLR not yet implemented."
	416 Compare X21, 0
	417 JumpIfNotEqual {420}
	418 Move X0, X20
	419 Call 0x1D2D690
	420 Move X0, X21
	421 Call 0x1C17F18
	422 Call 0x1991590

Method: System.Void GetCoincidentVertices(System.Collections.Generic.IEnumerable`1<System.Int32> vertices, System.Collections.Generic.List`1<System.Int32> coincident)

Disassembly:
	0x0391CB88 BL 0x1C16F20
	0x0391CB8C ADRP X0, 0x7DC000
	0x0391CB90 LDR X0, [X0 + 0x528]
	0x0391CB94 BL 0x1C16D08
	0x0391CB98 BL 0x1C16F10
	0x0391CB9C MOV X19, X0
	0x0391CBA0 ADRP X0, 0x832000
	0x0391CBA4 LDR X0, [X0 + 0x650]
	0x0391CBA8 B 0x391CBC8
	0x0391CBAC ADRP X0, 0x7DC000
	0x0391CBB0 LDR X0, [X0 + 0x528]
	0x0391CBB4 BL 0x1C16D08
	0x0391CBB8 BL 0x1C16F10
	0x0391CBBC MOV X19, X0
	0x0391CBC0 ADRP X0, 0x832000
	0x0391CBC4 LDR X0, [X0 + 0x630]
	0x0391CBC8 BL 0x1C16D08
	0x0391CBCC MOV X1, X0
	0x0391CBD0 MOV X0, X19
	0x0391CBD4 MOV X2, X31
	0x0391CBD8 BL 0x330E100
	0x0391CBDC ADRP X0, 0x832000
	0x0391CBE0 LDR X0, [X0 + 0x658]
	0x0391CBE4 BL 0x1C16D08
	0x0391CBE8 MOV X1, X0
	0x0391CBEC MOV X0, X19
	0x0391CBF0 BL 0x1C16DEC
	0x0391CBF4 BL 0x1C16F20
	0x0391CBF8 MOV X0, X21
	0x0391CBFC BL 0x1C16F18
	0x0391CC00 B 0x391CC54
	0x0391CC04 B 0x391CC54
	0x0391CC08 B 0x391CC54
	0x0391CC0C B 0x391CC54
	0x0391CC10 B 0x391CC54
	0x0391CC14 B 0x391CC54
	0x0391CC18 B 0x391CC54
	0x0391CC1C B 0x391CC54
	0x0391CC20 B 0x391CC54
	0x0391CC24 B 0x391CC54
	0x0391CC28 B 0x391CC54
	0x0391CC2C B 0x391CC54
	0x0391CC30 B 0x391CC54
	0x0391CC34 B 0x391CC54
	0x0391CC38 B 0x391CC54
	0x0391CC3C B 0x391CC54
	0x0391CC40 B 0x391CC54
	0x0391CC44 B 0x391CC54
	0x0391CC48 B 0x391CC54
	0x0391CC4C B 0x391CC54
	0x0391CC50 B 0x391CC54
	0x0391CC54 MOV X20, X0
	0x0391CC58 CMP W1, 0x1
	0x0391CC5C B.NE 0x391CC74
	0x0391CC60 MOV X0, X20
	0x0391CC64 BL 0x3EB1AD0
	0x0391CC68 LDR X21, [X0]
	0x0391CC6C BL 0x3EB1AE0
	0x0391CC70 B 0x391CAD4
	0x0391CC74 MOV X21, X31
	0x0391CC78 B 0x391CC80
	0x0391CC7C MOV X20, X0
	0x0391CC80 CBZ X19, 0x391CCE4
	0x0391CC84 LDR X8, [X19]
	0x0391CC88 ADRP X10, 0x7D7000
	0x0391CC8C LDRH W9, [X8 + 0x12E]
	0x0391CC90 LDR X10, [X10 + 0xE00]
	0x0391CC94 LDR X1, [X10]
	0x0391CC98 CBZ X9, 0x391CCBC
	0x0391CC9C LDR X10, [X8 + 0xB0]
	0x0391CCA0 ADD X10, X10, 0x8
	0x0391CCA4 LDUR X11, [X10 - 0x8]
	0x0391CCA8 CMP X11, X1
	0x0391CCAC B.EQ 0x391CCCC
	0x0391CCB0 SUBS X9, X9, 0x1
	0x0391CCB4 ADD X10, X10, 0x10
	0x0391CCB8 B.NE 0x391CCA4
	0x0391CCBC MOV X0, X19
	0x0391CCC0 MOV W2, W31
	0x0391CCC4 BL 0x1C5C788
	0x0391CCC8 B 0x391CCD8
	0x0391CCCC LDRSW X9, [X10]
	0x0391CCD0 ADD X8, X8, X9, 0x4, LSL
	0x0391CCD4 ADD X0, X8, 0x138
	0x0391CCD8 LDP X8, X1, [X0]
	0x0391CCDC MOV X0, X19
	0x0391CCE0 BLR X8
	0x0391CCE4 CBNZ X21, 0x391CCF0
	0x0391CCE8 MOV X0, X20
	0x0391CCEC BL 0x1D2C690
	0x0391CCF0 MOV X0, X21
	0x0391CCF4 BL 0x1C16F18
	0x0391CCF8 BL 0x1990590
	0x0391CCFC SUB X31, X31, 0x40
	0x0391CD00 STP X30, X23, [X31 + 0x10]
	0x0391CD04 STP X22, X21, [X31 + 0x20]
	0x0391CD08 STP X20, X19, [X31 + 0x30]
	0x0391CD0C ADRP X22, 0xAC5000
	0x0391CD10 LDRB W8, [X22 + 0x88C]
	0x0391CD14 MOV X19, X2
	0x0391CD18 MOV W21, W1
	0x0391CD1C MOV X20, X0
	0x0391CD20 TBNZ X8, 0x0, 0x391CD44
	0x0391CD24 ADRP X0, 0x7E1000
	0x0391CD28 LDR X0, [X0 + 0x870]
	0x0391CD2C BL 0x1C16CF4
	0x0391CD30 ADRP X0, 0x7D8000
	0x0391CD34 LDR X0, [X0 + 0xE10]
	0x0391CD38 BL 0x1C16CF4
	0x0391CD3C MOVZ W8, 0x1
	0x0391CD40 STRB W8, [X22 + 0x88C]
	0x0391CD44 STR W31, [X31 + 0xC]
	0x0391CD48 CBZ X19, 0x391CE44
	0x0391CD4C MOV X0, X20
	0x0391CD50 BL 0x3916198
	0x0391CD54 CBZ X0, 0x391CE40
	0x0391CD58 ADRP X8, 0x7E1000
	0x0391CD5C LDR X8, [X8 + 0x870]
	0x0391CD60 ADD X2, X31, 0xC
	0x0391CD64 MOV W1, W21
	0x0391CD68 LDR X3, [X8]
	0x0391CD6C BL 0x2A0BC68
	0x0391CD70 TBZ X0, 0x0, 0x391CE78
	0x0391CD74 LDR X8, [X20 + 0x30]
	0x0391CD78 CBZ X8, 0x391CE40
	0x0391CD7C LDRSW X9, [X31 + 0xC]
	0x0391CD80 LDR W10, [X8 + 0x18]
	0x0391CD84 CMP W9, W10
	0x0391CD88 B.CS 0x391CEC0
	0x0391CD8C ADD X8, X8, X9, 0x3, LSL
	0x0391CD90 LDR X20, [X8 + 0x20]
	0x0391CD94 CBZ X20, 0x391CE40
	0x0391CD98 MOV X0, X20
	0x0391CD9C MOV X1, X31
	0x0391CDA0 BL 0x393492C
	0x0391CDA4 CMP W0, 0x1
	0x0391CDA8 B.LT 0x391CE2C
	0x0391CDAC ADRP X23, 0x7D8000
	0x0391CDB0 LDR X23, [X23 + 0xE10]
	0x0391CDB4 MOV W21, W0
	0x0391CDB8 MOV W22, W31
	0x0391CDBC MOV X0, X20
	0x0391CDC0 MOV W1, W22
	0x0391CDC4 MOV X2, X31
	0x0391CDC8 BL 0x39282DC
	0x0391CDCC LDR W10, [X19 + 0x1C]
	0x0391CDD0 LDR X8, [X19 + 0x10]
	0x0391CDD4 LDR X9, [X23]
	0x0391CDD8 ADD W10, W10, 0x1
	0x0391CDDC STR W10, [X19 + 0x1C]
	0x0391CDE0 CBZ X8, 0x391CE40
	0x0391CDE4 LDRSW X10, [X19 + 0x18]
	0x0391CDE8 LDR W11, [X8 + 0x18]
	0x0391CDEC MOV W1, W0
	0x0391CDF0 CMP W10, W11
	0x0391CDF4 B.CS 0x391CE0C
	0x0391CDF8 ADD W9, W10, 0x1
	0x0391CDFC ADD X8, X8, X10, 0x2, LSL
	0x0391CE00 STR W9, [X19 + 0x18]
	0x0391CE04 STR W1, [X8 + 0x20]
	0x0391CE08 B 0x391CE20
	0x0391CE0C LDR X8, [X9 + 0x20]
	0x0391CE10 MOV X0, X19
	0x0391CE14 LDR X8, [X8 + 0xC0]
	0x0391CE18 LDR X2, [X8 + 0x70]
	0x0391CE1C BL 0x2FDC70C
	0x0391CE20 ADD W22, W22, 0x1
	0x0391CE24 CMP W21, W22
	0x0391CE28 B.NE 0x391CDBC
	0x0391CE2C LDP X20, X19, [X31 + 0x30]
	0x0391CE30 LDP X22, X21, [X31 + 0x20]
	0x0391CE34 LDP X30, X23, [X31 + 0x10]
	0x0391CE38 ADD X31, X31, 0x40
	0x0391CE3C RET
	0x0391CE40 BL 0x1C16F20
	0x0391CE44 ADRP X0, 0x7DC000
	0x0391CE48 LDR X0, [X0 + 0x528]
	0x0391CE4C BL 0x1C16D08
	0x0391CE50 BL 0x1C16F10
	0x0391CE54 MOV X19, X0
	0x0391CE58 ADRP X0, 0x832000
	0x0391CE5C LDR X0, [X0 + 0x630]
	0x0391CE60 BL 0x1C16D08
	0x0391CE64 MOV X1, X0
	0x0391CE68 MOV X0, X19
	0x0391CE6C MOV X2, X31
	0x0391CE70 BL 0x330E100
	0x0391CE74 B 0x391CEA8
	0x0391CE78 ADRP X0, 0x7DF000
	0x0391CE7C LDR X0, [X0 + 0x760]
	0x0391CE80 BL 0x1C16D08
	0x0391CE84 BL 0x1C16F10
	0x0391CE88 MOV X19, X0
	0x0391CE8C ADRP X0, 0x832000
	0x0391CE90 LDR X0, [X0 + 0x618]
	0x0391CE94 BL 0x1C16D08
	0x0391CE98 MOV X1, X0
	0x0391CE9C MOV X0, X19
	0x0391CEA0 MOV X2, X31
	0x0391CEA4 BL 0x3316014
	0x0391CEA8 ADRP X0, 0x832000
	0x0391CEAC LDR X0, [X0 + 0x660]
	0x0391CEB0 BL 0x1C16D08
	0x0391CEB4 MOV X1, X0
	0x0391CEB8 MOV X0, X19
	0x0391CEBC BL 0x1C16DEC
	0x0391CEC0 BL 0x1C16F28
	0x0391CEC4 SUB X31, X31, 0x40
	0x0391CEC8 STP X30, X23, [X31 + 0x10]
	0x0391CECC STP X22, X21, [X31 + 0x20]
	0x0391CED0 STP X20, X19, [X31 + 0x30]
	0x0391CED4 ADRP X23, 0xAC5000
	0x0391CED8 ADRP X22, 0x7D8000
	0x0391CEDC ADRP X21, 0x7DB000
	0x0391CEE0 LDRB W8, [X23 + 0x88D]
	0x0391CEE4 LDR X22, [X22 + 0xE30]
	0x0391CEE8 LDR X21, [X21 + 0xB70]
	0x0391CEEC MOV X20, X1
	0x0391CEF0 MOV X19, X0
	0x0391CEF4 TBNZ X8, 0x0, 0x391CF18
	0x0391CEF8 ADRP X0, 0x7DB000
	0x0391CEFC LDR X0, [X0 + 0xB70]
	0x0391CF00 BL 0x1C16CF4
	0x0391CF04 ADRP X0, 0x7D8000
	0x0391CF08 LDR X0, [X0 + 0xE30]
	0x0391CF0C BL 0x1C16CF4
	0x0391CF10 MOVZ W8, 0x1
	0x0391CF14 STRB W8, [X23 + 0x88D]
	0x0391CF18 MOV X0, X19
	0x0391CF1C BL 0x3916198
	0x0391CF20 LDR X8, [X22]
	0x0391CF24 STR X0, [X31 + 0x8]
	0x0391CF28 MOV X0, X8
	0x0391CF2C BL 0x1C16F10
	0x0391CF30 LDR X1, [X21]
	0x0391CF34 MOV X21, X0
	0x0391CF38 BL 0x2FDBF14
	0x0391CF3C MOV X0, X19
	0x0391CF40 MOV X1, X20
	0x0391CF44 MOV X2, X21
	0x0391CF48 BL 0x391BB88
	0x0391CF4C ADD X0, X31, 0x8
	0x0391CF50 MOV X1, X21
	0x0391CF54 MOV X2, X31
	0x0391CF58 BL 0x3935CD4
	0x0391CF5C LDR X1, [X31 + 0x8]
	0x0391CF60 MOV X0, X19
	0x0391CF64 BL 0x3916234
	0x0391CF68 LDP X20, X19, [X31 + 0x30]
	0x0391CF6C LDP X22, X21, [X31 + 0x20]
	0x0391CF70 LDP X30, X23, [X31 + 0x10]
	0x0391CF74 ADD X31, X31, 0x40
	0x0391CF78 RET
	0x0391CF7C STR X30, [X31 - 0x20]!
	0x0391CF80 STP X20, X19, [X31 + 0x10]
	0x0391CF84 MOV X19, X1
	0x0391CF88 MOV X20, X0
	0x0391CF8C BL 0x39162B4
	0x0391CF90 STR X0, [X31 + 0x8]
	0x0391CF94 ADD X0, X31, 0x8
	0x0391CF98 MOV X1, X19
	0x0391CF9C MOV X2, X31
	0x0391CFA0 BL 0x3935CD4
	0x0391CFA4 LDR X1, [X31 + 0x8]
	0x0391CFA8 MOV X0, X20
	0x0391CFAC BL 0x391634C
	0x0391CFB0 LDP X20, X19, [X31 + 0x10]
	0x0391CFB4 LDR X30, [X31], #0x20
	0x0391CFB8 RET
	0x0391CFBC STP X30, X19, [X31 - 0x10]!
	0x0391CFC0 TBNZ X1, 0x1F, 0x391D004
	0x0391CFC4 LDR X8, [X0 + 0x30]
	0x0391CFC8 MOV X19, X0
	0x0391CFCC CBZ X8, 0x391D04C
	0x0391CFD0 LDR W9, [X8 + 0x18]
	0x0391CFD4 CMP W9, W1
	0x0391CFD8 B.LE 0x391D004
	0x0391CFDC B.LS 0x391D050
	0x0391CFE0 ADD X8, X8, W1, 0x3, UXTW
	0x0391CFE4 LDR X0, [X8 + 0x20]
	0x0391CFE8 CBZ X0, 0x391D04C
	0x0391CFEC MOV W1, W2
	0x0391CFF0 MOV X2, X31
	0x0391CFF4 BL 0x3934A84
	0x0391CFF8 MOV X0, X19
	0x0391CFFC LDP X30, X19, [X31], #0x10
	0x0391D000 B 0x3915A68
	0x0391D004 ADRP X0, 0x7DE000
	0x0391D008 LDR X0, [X0 + 0x760]
	0x0391D00C BL 0x1C16D08
	0x0391D010 BL 0x1C16F10
	0x0391D014 MOV X19, X0
	0x0391D018 ADRP X0, 0x831000
	0x0391D01C LDR X0, [X0 + 0x668]
	0x0391D020 BL 0x1C16D08
	0x0391D024 MOV X1, X0
	0x0391D028 MOV X0, X19
	0x0391D02C MOV X2, X31
	0x0391D030 BL 0x3316014
	0x0391D034 ADRP X0, 0x831000
	0x0391D038 LDR X0, [X0 + 0x670]
	0x0391D03C BL 0x1C16D08
	0x0391D040 MOV X1, X0
	0x0391D044 MOV X0, X19
	0x0391D048 BL 0x1C16DEC
	0x0391D04C BL 0x1C16F20
	0x0391D050 BL 0x1C16F28
	0x0391D054 STP X30, X21, [X31 - 0x20]!
	0x0391D058 STP X20, X19, [X31 + 0x10]
	0x0391D05C ADRP X21, 0xAC4000
	0x0391D060 LDRB W8, [X21 + 0x88E]
	0x0391D064 MOV X20, X1
	0x0391D068 MOV X19, X0
	0x0391D06C TBNZ X8, 0x0, 0x391D084
	0x0391D070 ADRP X0, 0x831000
	0x0391D074 LDR X0, [X0 + 0x678]
	0x0391D078 BL 0x1C16CF4
	0x0391D07C MOVZ W8, 0x1
	0x0391D080 STRB W8, [X21 + 0x88E]
	0x0391D084 CBZ X20, 0x391D0B4
	0x0391D088 ADRP X8, 0x831000
	0x0391D08C LDR X8, [X8 + 0x678]
	0x0391D090 LDR X0, [X19 + 0x30]
	0x0391D094 MOV X1, X20
	0x0391D098 LDR X2, [X8]
	0x0391D09C BL 0x217CD40
	0x0391D0A0 STR X0, [X19 + 0x30]
	0x0391D0A4 MOV X0, X19
	0x0391D0A8 LDP X20, X19, [X31 + 0x10]
	0x0391D0AC LDP X30, X21, [X31], #0x20
	0x0391D0B0 B 0x3915A68
	0x0391D0B4 ADRP X0, 0x7DB000
	0x0391D0B8 LDR X0, [X0 + 0x528]
	0x0391D0BC BL 0x1C16D08
	0x0391D0C0 BL 0x1C16F10
	0x0391D0C4 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0xAC6000
	015 Move W8, [X21+2187]
	016 Move X20, X2
	017 Move X19, X1
	018 Move [X31+8], X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {55}
	023 Move X0, 0x832000
	024 Move X0, [X0+3200]
	025 Call 0x1C17CF4
	026 Move X0, 0x7DA000
	027 Move X0, [X0+2520]
	028 Call 0x1C17CF4
	029 Move X0, 0x7DF000
	030 Move X0, [X0+1656]
	031 Call 0x1C17CF4
	032 Move X0, 0x7D8000
	033 Move X0, [X0+3584]
	034 Call 0x1C17CF4
	035 Move X0, 0x800000
	036 Move X0, [X0+1976]
	037 Call 0x1C17CF4
	038 Move X0, 0x800000
	039 Move X0, [X0+1984]
	040 Call 0x1C17CF4
	041 Move X0, 0x7D8000
	042 Move X0, [X0+3608]
	043 Call 0x1C17CF4
	044 Move X0, 0x7D9000
	045 Move X0, [X0+3600]
	046 Call 0x1C17CF4
	047 Move X0, 0x7DF000
	048 Move X0, [X0+2136]
	049 Call 0x1C17CF4
	050 Move X0, 0x833000
	051 Move X0, [X0+1320]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X21+2187], W8
	055 Compare X19, 0
	056 JumpIfEqual {278}
	057 Compare X20, 0
	058 JumpIfEqual {285}
	059 Move W8, [X20+28]
	060 Move X27, 0x833000
	061 Move X27, [X27+1320]
	062 Add W8, W8, 1
	063 Move [X20+24], W31
	064 Move [X20+28], W8
	065 Move X0, [X27]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {71}
	069 Call 0x1C17DFC
	070 Move X0, [X27]
	071 Move X8, [X0+184]
	072 Move X0, [X8+40]
	073 Compare X0, 0
	074 JumpIfEqual {303}
	075 Move X8, 0x7DF000
	076 Move X8, [X8+1656]
	077 Move X21, 0x800000
	078 Move X1, [X8]
	079 Move X21, [X21+1976]
	080 Call HashSet`1<Int32>.Clear, X0
	081 Move X0, [X31+8]
	082 Call ProBuilderMesh.get_sharedVertexLookup, X0
	083 Move X8, [X19]
	084 Move X1, [X21]
	085 Move X22, X0
	086 NotImplemented "Instruction LDRH not yet implemented."
	087 Compare X9, 0
	088 JumpIfEqual {95}
	089 Move X10, [X8+176]
	090 Add X10, X10, 8
	091 NotImplemented "Instruction LDUR not yet implemented."
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Subtract X9, X9, 1
	094 Add X10, X10, 16
	095 Move X0, X19
	096 Move W2, W31
	097 Call 0x1C5D788
	098 NotImplemented "Instruction LDRSW not yet implemented."
	099 Add X8, X8, X9
	100 Add X0, X8, 312
	101 Move X8, [X0]
	102 Move X1, [X0+8]
	103 Move X0, X19
	104 NotImplemented "Instruction BLR not yet implemented."
	105 Move X19, X0
	106 Compare X0, 0
	107 JumpIfEqual {304}
	108 Move X28, 0x7D8000
	109 Move X26, 0x832000
	110 Move X21, 0x7DA000
	111 Move X29, 0x7D9000
	112 Move X28, [X28+3608]
	113 Move X26, [X26+3200]
	114 Move X21, [X21+2520]
	115 Move X29, [X29+3600]
	116 Move X8, [X19]
	117 Move X1, [X28]
	118 NotImplemented "Instruction LDRH not yet implemented."
	119 Compare X9, 0
	120 JumpIfEqual {127}
	121 Move X10, [X8+176]
	122 Add X10, X10, 8
	123 NotImplemented "Instruction LDUR not yet implemented."
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Subtract X9, X9, 1
	126 Add X10, X10, 16
	127 Move X0, X19
	128 Move W2, W31
	129 Call 0x1C5D788
	130 NotImplemented "Instruction LDRSW not yet implemented."
	131 Add X8, X8, X9
	132 Add X0, X8, 312
	133 Move X8, [X0]
	134 Move X1, [X0+8]
	135 Move X0, X19
	136 NotImplemented "Instruction BLR not yet implemented."
	137 Move TEMP, X0
	138 And TEMP, TEMP, 1
	139 Compare TEMP, 1
	140 JumpIfNotEqual {230}
	141 Move X8, [X19]
	142 Move X10, 0x800000
	143 NotImplemented "Instruction LDRH not yet implemented."
	144 Move X10, [X10+1984]
	145 Move X1, [X10]
	146 Compare X9, 0
	147 JumpIfEqual {154}
	148 Move X10, [X8+176]
	149 Add X10, X10, 8
	150 NotImplemented "Instruction LDUR not yet implemented."
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Subtract X9, X9, 1
	153 Add X10, X10, 16
	154 Move X0, X19
	155 Move W2, W31
	156 Call 0x1C5D788
	157 NotImplemented "Instruction LDRSW not yet implemented."
	158 Add X8, X8, X9
	159 Add X0, X8, 312
	160 Move X8, [X0]
	161 Move X1, [X0+8]
	162 Move X0, X19
	163 NotImplemented "Instruction BLR not yet implemented."
	164 Move W1, W0
	165 Compare X22, 0
	166 JumpIfEqual {273}
	167 Move X2, [X26]
	168 Move X0, X22
	169 Call Dictionary`2<Int32, Int32>.get_Item, X0, X1
	170 Move W23, W0
	171 Move X0, [X27]
	172 Move W8, [X0+224]
	173 Compare W8, 0
	174 JumpIfNotEqual {177}
	175 Call 0x1C17DFC
	176 Move X0, [X27]
	177 Move X8, [X0+184]
	178 Move X0, [X8+40]
	179 Compare X0, 0
	180 JumpIfEqual {274}
	181 Move X2, [X21]
	182 Move W1, W23
	183 Call HashSet`1<Int32>.Add, X0, X1
	184 Move TEMP, X0
	185 And TEMP, TEMP, 1
	186 Compare TEMP, 1
	187 JumpIfNotEqual {116}
	188 Move X8, [X31+8]
	189 Move X8, [X8+48]
	190 Compare X8, 0
	191 JumpIfEqual {275}
	192 Move W9, [X8+24]
	193 NotImplemented "Instruction CMP not yet implemented."
	194 Add X8, X8, W23
	195 Move X23, [X8+32]
	196 Compare X23, 0
	197 JumpIfEqual {276}
	198 Move X0, X23
	199 Move X1, X31
	200 Call SharedVertex.get_Count, X0
	201 Move W24, W0
	202 NotImplemented "Instruction CMP not yet implemented."
	203 Move W25, W31
	204 Move X0, X23
	205 Move W1, W25
	206 Move X2, X31
	207 Call SharedVertex.get_Item, X0, X1
	208 Move W1, W0
	209 Move W10, [X20+28]
	210 Move X8, [X20+16]
	211 Move X9, [X29]
	212 Add W10, W10, 1
	213 Move [X20+28], W10
	214 Compare X8, 0
	215 JumpIfEqual {272}
	216 NotImplemented "Instruction LDRSW not yet implemented."
	217 Move W11, [X8+24]
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Add W9, W10, 1
	220 Add X8, X8, X10
	221 Move [X20+24], W9
	222 Move [X8+32], W1
	223 Move X8, [X9+32]
	224 Move X8, [X8+192]
	225 Move X2, [X8+112]
	226 Move X0, X20
	227 Call List`1<Int32>.AddWithResize, X0, X1
	228 Add W25, W25, 1
	229 NotImplemented "Instruction CMP not yet implemented."
	230 Move X21, X31
	231 Compare X19, 0
	232 JumpIfEqual {256}
	233 Move X8, [X19]
	234 Move X10, 0x7D8000
	235 NotImplemented "Instruction LDRH not yet implemented."
	236 Move X10, [X10+3584]
	237 Move X1, [X10]
	238 Compare X9, 0
	239 JumpIfEqual {246}
	240 Move X10, [X8+176]
	241 Add X10, X10, 8
	242 NotImplemented "Instruction LDUR not yet implemented."
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Subtract X9, X9, 1
	245 Add X10, X10, 16
	246 Move X0, X19
	247 Move W2, W31
	248 Call 0x1C5D788
	249 NotImplemented "Instruction LDRSW not yet implemented."
	250 Add X8, X8, X9
	251 Add X0, X8, 312
	252 Move X8, [X0]
	253 Move X1, [X0+8]
	254 Move X0, X19
	255 NotImplemented "Instruction BLR not yet implemented."
	256 Compare X21, 0
	257 JumpIfNotEqual {305}
	258 Move X20, [X31+96]
	259 Move X19, [X31+104]
	260 Move X22, [X31+80]
	261 Move X21, [X31+88]
	262 Move X24, [X31+64]
	263 Move X23, [X31+72]
	264 Move X26, [X31+48]
	265 Move X25, [X31+56]
	266 Move X28, [X31+32]
	267 Move X27, [X31+40]
	268 Move X29, [X31+16]
	269 Move X30, [X31+24]
	270 Add X31, X31, 112
	271 Return 
	272 Call 0x1C17F20
	273 Call 0x1C17F20
	274 Call 0x1C17F20
	275 Call 0x1C17F20
	276 Call 0x1C17F20
	277 Call 0x1C17F28
	278 Move X0, 0x7DD000
	279 Move X0, [X0+1320]
	280 Call 0x1C17D08
	281 Call 0x1C17F10
	282 Move X19, X0
	283 Move X0, 0x833000
	284 Move X0, [X0+1104]
	285 Move X0, 0x7DD000
	286 Move X0, [X0+1320]
	287 Call 0x1C17D08
	288 Call 0x1C17F10
	289 Move X19, X0
	290 Move X0, 0x833000
	291 Move X0, [X0+1584]
	292 Call 0x1C17D08
	293 Move X1, X0
	294 Move X0, X19
	295 Move X2, X31
	296 Call ArgumentNullException..ctor, X0, X1
	297 Move X0, 0x833000
	298 Move X0, [X0+1592]
	299 Call 0x1C17D08
	300 Move X1, X0
	301 Move X0, X19
	302 Call 0x1C17DEC
	303 Call 0x1C17F20
	304 Call 0x1C17F20
	305 Move X0, X21
	306 Call 0x1C17F18
	307 Move X20, X0
	308 NotImplemented "Instruction CMP not yet implemented."
	309 Move X0, X20
	310 Call 0x3EB2AD0
	311 Move X21, [X0]
	312 Call 0x3EB2AE0
	313 Move X21, X31
	314 Move X20, X0
	315 Compare X19, 0
	316 JumpIfEqual {340}
	317 Move X8, [X19]
	318 Move X10, 0x7D7000
	319 NotImplemented "Instruction LDRH not yet implemented."
	320 Move X10, [X10+3584]
	321 Move X1, [X10]
	322 Compare X9, 0
	323 JumpIfEqual {330}
	324 Move X10, [X8+176]
	325 Add X10, X10, 8
	326 NotImplemented "Instruction LDUR not yet implemented."
	327 NotImplemented "Instruction CMP not yet implemented."
	328 Subtract X9, X9, 1
	329 Add X10, X10, 16
	330 Move X0, X19
	331 Move W2, W31
	332 Call 0x1C5D788
	333 NotImplemented "Instruction LDRSW not yet implemented."
	334 Add X8, X8, X9
	335 Add X0, X8, 312
	336 Move X8, [X0]
	337 Move X1, [X0+8]
	338 Move X0, X19
	339 NotImplemented "Instruction BLR not yet implemented."
	340 Compare X21, 0
	341 JumpIfNotEqual {344}
	342 Move X0, X20
	343 Call 0x1D2D690
	344 Move X0, X21
	345 Call 0x1C17F18
	346 Call 0x1991590

Method: System.Void GetCoincidentVertices(System.Int32 vertex, System.Collections.Generic.List`1<System.Int32> coincident)

Disassembly:
	0x0391DCFC LDP X20, X19, [X31 + 0x20]
	0x0391DD00 LDP X22, X21, [X31 + 0x10]
	0x0391DD04 LDR X30, [X31], #0x30
	0x0391DD08 RET
	0x0391DD0C BL 0x1C16F20
	0x0391DD10 STP X30, X23, [X31 - 0x30]!
	0x0391DD14 STP X22, X21, [X31 + 0x10]
	0x0391DD18 STP X20, X19, [X31 + 0x20]
	0x0391DD1C ADRP X21, 0xAC4000
	0x0391DD20 ADRP X22, 0x7D7000
	0x0391DD24 ADRP X23, 0x831000
	0x0391DD28 LDRB W8, [X21 + 0x89A]
	0x0391DD2C LDR X22, [X22 + 0xE58]
	0x0391DD30 LDR X23, [X23 + 0x540]
	0x0391DD34 MOV X20, X1
	0x0391DD38 MOV X19, X0
	0x0391DD3C TBNZ X8, 0x0, 0x391DD84
	0x0391DD40 ADRP X0, 0x831000
	0x0391DD44 LDR X0, [X0 + 0x540]
	0x0391DD48 BL 0x1C16CF4
	0x0391DD4C ADRP X0, 0x801000
	0x0391DD50 LDR X0, [X0 + 0xBB8]
	0x0391DD54 BL 0x1C16CF4
	0x0391DD58 ADRP X0, 0x7D8000
	0x0391DD5C LDR X0, [X0 + 0x9C8]
	0x0391DD60 BL 0x1C16CF4
	0x0391DD64 ADRP X0, 0x7D7000
	0x0391DD68 LDR X0, [X0 + 0xE58]
	0x0391DD6C BL 0x1C16CF4
	0x0391DD70 ADRP X0, 0x831000
	0x0391DD74 LDR X0, [X0 + 0x528]
	0x0391DD78 BL 0x1C16CF4
	0x0391DD7C MOVZ W8, 0x1
	0x0391DD80 STRB W8, [X21 + 0x89A]
	0x0391DD84 LDR X0, [X22]
	0x0391DD88 ADRP X21, 0x831000
	0x0391DD8C LDR X21, [X21 + 0x528]
	0x0391DD90 MOV W1, W31
	0x0391DD94 BL 0x1C16D6C
	0x0391DD98 STR X0, [X19 + 0xD0]
	0x0391DD9C LDR X0, [X23]
	0x0391DDA0 MOV W1, W31
	0x0391DDA4 BL 0x1C16D6C
	0x0391DDA8 STR X0, [X19 + 0xD8]
	0x0391DDAC CBZ X20, 0x391DDD8
	0x0391DDB0 ADRP X8, 0x801000
	0x0391DDB4 LDR X8, [X8 + 0xBB8]
	0x0391DDB8 ADRP X22, 0x7D8000
	0x0391DDBC MOV X0, X20
	0x0391DDC0 LDR X1, [X8]
	0x0391DDC4 LDR X22, [X22 + 0x9C8]
	0x0391DDC8 BL 0x21C0304
	0x0391DDCC LDR X1, [X22]
	0x0391DDD0 BL 0x21D54D4
	0x0391DDD4 B 0x391DDE4
	0x0391DDD8 LDR X0, [X22]
	0x0391DDDC MOV W1, W31
	0x0391DDE0 BL 0x1C16D6C
	0x0391DDE4 MOVZ W8, 0x1
	0x0391DDE8 STR X0, [X19 + 0xE0]
	0x0391DDEC STRB W8, [X19 + 0xE8]
	0x0391DDF0 LDR X0, [X21]
	0x0391DDF4 LDR W8, [X0 + 0xE0]
	0x0391DDF8 CBNZ W8, 0x391DE04
	0x0391DDFC BL 0x1C16DFC
	0x0391DE00 LDR X0, [X21]
	0x0391DE04 LDR X8, [X0 + 0xB8]
	0x0391DE08 LDR X8, [X8 + 0x20]
	0x0391DE0C CBZ X8, 0x391DE4C
	0x0391DE10 LDR W9, [X0 + 0xE0]
	0x0391DE14 CBNZ W9, 0x391DE2C
	0x0391DE18 BL 0x1C16DFC
	0x0391DE1C LDR X8, [X21]
	0x0391DE20 LDR X8, [X8 + 0xB8]
	0x0391DE24 LDR X8, [X8 + 0x20]
	0x0391DE28 CBZ X8, 0x391DE5C
	0x0391DE2C LDR X3, [X8 + 0x18]
	0x0391DE30 LDR X0, [X8 + 0x40]
	0x0391DE34 LDR X2, [X8 + 0x28]
	0x0391DE38 MOV X1, X19
	0x0391DE3C LDP X20, X19, [X31 + 0x20]
	0x0391DE40 LDP X22, X21, [X31 + 0x10]
	0x0391DE44 LDP X30, X23, [X31], #0x30
	0x0391DE48 BR X3
	0x0391DE4C LDP X20, X19, [X31 + 0x20]
	0x0391DE50 LDP X22, X21, [X31 + 0x10]
	0x0391DE54 LDP X30, X23, [X31], #0x30
	0x0391DE58 RET
	0x0391DE5C BL 0x1C16F20
	0x0391DE60 STR X30, [X31 - 0x30]!
	0x0391DE64 STP X22, X21, [X31 + 0x10]
	0x0391DE68 STP X20, X19, [X31 + 0x20]
	0x0391DE6C ADRP X22, 0xAC4000
	0x0391DE70 ADRP X21, 0x831000
	0x0391DE74 LDRB W8, [X22 + 0x89B]
	0x0391DE78 LDR X21, [X21 + 0x6E0]
	0x0391DE7C MOV W20, W1
	0x0391DE80 MOV X19, X0
	0x0391DE84 TBNZ X8, 0x0, 0x391DE9C
	0x0391DE88 ADRP X0, 0x831000
	0x0391DE8C LDR X0, [X0 + 0x6E0]
	0x0391DE90 BL 0x1C16CF4
	0x0391DE94 MOVZ W8, 0x1
	0x0391DE98 STRB W8, [X22 + 0x89B]
	0x0391DE9C LDR X0, [X19 + 0xD0]
	0x0391DEA0 LDR X2, [X21]
	0x0391DEA4 MOV W1, W20
	0x0391DEA8 BL 0x217FBE4
	0x0391DEAC MOV X1, X0
	0x0391DEB0 MOV X0, X19
	0x0391DEB4 LDP X20, X19, [X31 + 0x20]
	0x0391DEB8 LDP X22, X21, [X31 + 0x10]
	0x0391DEBC LDR X30, [X31], #0x30
	0x0391DEC0 B 0x391D92C

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0xAC5000
	009 Move W8, [X22+2188]
	010 Move X19, X2
	011 Move W21, W1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x7E1000
	018 Move X0, [X0+2160]
	019 Call 0x1C17CF4
	020 Move X0, 0x7D8000
	021 Move X0, [X0+3600]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2188], W8
	025 Move [X31+12], W31
	026 Compare X19, 0
	027 JumpIfEqual {95}
	028 Move X0, X20
	029 Call ProBuilderMesh.get_sharedVertexLookup, X0
	030 Compare X0, 0
	031 JumpIfEqual {94}
	032 Move X8, 0x7E1000
	033 Move X8, [X8+2160]
	034 Add X2, X31, 12
	035 Move W1, W21
	036 Move X3, [X8]
	037 Call Dictionary`2<Int32, Int32>.TryGetValue, X0, X1, X2
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {107}
	042 Move X8, [X20+48]
	043 Compare X8, 0
	044 JumpIfEqual {94}
	045 NotImplemented "Instruction LDRSW not yet implemented."
	046 Move W10, [X8+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Add X8, X8, X9
	049 Move X20, [X8+32]
	050 Compare X20, 0
	051 JumpIfEqual {94}
	052 Move X0, X20
	053 Move X1, X31
	054 Call SharedVertex.get_Count, X0
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X23, 0x7D8000
	057 Move X23, [X23+3600]
	058 Move W21, W0
	059 Move W22, W31
	060 Move X0, X20
	061 Move W1, W22
	062 Move X2, X31
	063 Call SharedVertex.get_Item, X0, X1
	064 Move W10, [X19+28]
	065 Move X8, [X19+16]
	066 Move X9, [X23]
	067 Add W10, W10, 1
	068 Move [X19+28], W10
	069 Compare X8, 0
	070 JumpIfEqual {94}
	071 NotImplemented "Instruction LDRSW not yet implemented."
	072 Move W11, [X8+24]
	073 Move W1, W0
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Add W9, W10, 1
	076 Add X8, X8, X10
	077 Move [X19+24], W9
	078 Move [X8+32], W1
	079 Move X8, [X9+32]
	080 Move X0, X19
	081 Move X8, [X8+192]
	082 Move X2, [X8+112]
	083 Call List`1<Int32>.AddWithResize, X0, X1
	084 Add W22, W22, 1
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X20, [X31+48]
	087 Move X19, [X31+56]
	088 Move X22, [X31+32]
	089 Move X21, [X31+40]
	090 Move X30, [X31+16]
	091 Move X23, [X31+24]
	092 Add X31, X31, 64
	093 Return 
	094 Call 0x1C17F20
	095 Move X0, 0x7DC000
	096 Move X0, [X0+1320]
	097 Call 0x1C17D08
	098 Call 0x1C17F10
	099 Move X19, X0
	100 Move X0, 0x832000
	101 Move X0, [X0+1584]
	102 Call 0x1C17D08
	103 Move X1, X0
	104 Move X0, X19
	105 Move X2, X31
	106 Call ArgumentNullException..ctor, X0, X1
	107 Move X0, 0x7DF000
	108 Move X0, [X0+1888]
	109 Call 0x1C17D08
	110 Call 0x1C17F10
	111 Move X19, X0
	112 Move X0, 0x832000
	113 Move X0, [X0+1560]
	114 Call 0x1C17D08
	115 Move X1, X0
	116 Move X0, X19
	117 Move X2, X31
	118 Call ArgumentOutOfRangeException..ctor, X0, X1
	119 Move X0, 0x832000
	120 Move X0, [X0+1632]
	121 Call 0x1C17D08
	122 Move X1, X0
	123 Move X0, X19
	124 Call 0x1C17DEC
	125 Call 0x1C17F28

Method: System.Void SetVerticesCoincident(System.Collections.Generic.IEnumerable`1<System.Int32> vertices)

Disassembly:
	0x0391DEC4 STR X30, [X31 - 0x50]!
	0x0391DEC8 STP X26, X25, [X31 + 0x10]
	0x0391DECC STP X24, X23, [X31 + 0x20]
	0x0391DED0 STP X22, X21, [X31 + 0x30]
	0x0391DED4 STP X20, X19, [X31 + 0x40]
	0x0391DED8 ADRP X26, 0xAC4000
	0x0391DEDC ADRP X24, 0x7D7000
	0x0391DEE0 ADRP X25, 0x831000
	0x0391DEE4 ADRP X23, 0x7D7000
	0x0391DEE8 ADRP X20, 0x7DD000
	0x0391DEEC ADRP X22, 0x7D7000
	0x0391DEF0 ADRP X21, 0x7DA000
	0x0391DEF4 LDR X24, [X24 + 0xE58]
	0x0391DEF8 LDRB W8, [X26 + 0x89D]
	0x0391DEFC LDR X25, [X25 + 0x540]
	0x0391DF00 LDR X23, [X23 + 0xE08]
	0x0391DF04 LDR X20, [X20 + 0x688]
	0x0391DF08 LDR X22, [X22 + 0xE30]
	0x0391DF0C LDR X21, [X21 + 0xB70]
	0x0391DF10 MOV X19, X0
	0x0391DF14 TBNZ X8, 0x0, 0x391DF68
	0x0391DF18 ADRP X0, 0x831000
	0x0391DF1C LDR X0, [X0 + 0x540]
	0x0391DF20 BL 0x1C16CF4
	0x0391DF24 ADRP X0, 0x7DD000
	0x0391DF28 LDR X0, [X0 + 0x688]
	0x0391DF2C BL 0x1C16CF4
	0x0391DF30 ADRP X0, 0x7D7000
	0x0391DF34 LDR X0, [X0 + 0xE08]
	0x0391DF38 BL 0x1C16CF4
	0x0391DF3C ADRP X0, 0x7D7000
	0x0391DF40 LDR X0, [X0 + 0xE58]
	0x0391DF44 BL 0x1C16CF4
	0x0391DF48 ADRP X0, 0x7DA000
	0x0391DF4C LDR X0, [X0 + 0xB70]
	0x0391DF50 BL 0x1C16CF4
	0x0391DF54 ADRP X0, 0x7D7000
	0x0391DF58 LDR X0, [X0 + 0xE30]
	0x0391DF5C BL 0x1C16CF4
	0x0391DF60 MOVZ W8, 0x1
	0x0391DF64 STRB W8, [X26 + 0x89D]
	0x0391DF68 MOVZ W8, 0x1
	0x0391DF6C STRB W8, [X19 + 0xCC]
	0x0391DF70 LDR X0, [X24]
	0x0391DF74 MOV W1, W31
	0x0391DF78 BL 0x1C16D6C

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xAC5000
	009 Move X22, 0x7D8000
	010 Move X21, 0x7DB000
	011 Move W8, [X23+2189]
	012 Move X22, [X22+3632]
	013 Move X21, [X21+2928]
	014 Move X20, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x7DB000
	021 Move X0, [X0+2928]
	022 Call 0x1C17CF4
	023 Move X0, 0x7D8000
	024 Move X0, [X0+3632]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+2189], W8
	028 Move X0, X19
	029 Call ProBuilderMesh.get_sharedVertexLookup, X0
	030 Move X8, [X22]
	031 Move [X31+8], X0
	032 Move X0, X8
	033 Call 0x1C17F10
	034 Move X1, [X21]
	035 Move X21, X0
	036 Call List`1<Int32>..ctor, X0
	037 Move X0, X19
	038 Move X1, X20
	039 Move X2, X21
	040 Call ProBuilderMesh.GetCoincidentVertices, X0, X1, X2
	041 Add X0, X31, 8
	042 Move X1, X21
	043 Move X2, X31
	044 Call SharedVertex.SetCoincident, X0, X1
	045 Move X1, [X31+8]
	046 Move X0, X19
	047 Call ProBuilderMesh.SetSharedVertices, X0, X1
	048 Move X20, [X31+48]
	049 Move X19, [X31+56]
	050 Move X22, [X31+32]
	051 Move X21, [X31+40]
	052 Move X30, [X31+16]
	053 Move X23, [X31+24]
	054 Add X31, X31, 64
	055 Return 

Method: System.Void SetTexturesCoincident(System.Collections.Generic.IEnumerable`1<System.Int32> vertices)

Disassembly:
	0x0391DF7C STR X0, [X19 + 0xD0]
	0x0391DF80 LDR X0, [X25]
	0x0391DF84 MOV W1, W31
	0x0391DF88 BL 0x1C16D6C
	0x0391DF8C STR X0, [X19 + 0xD8]
	0x0391DF90 LDR X0, [X24]
	0x0391DF94 MOV W1, W31
	0x0391DF98 BL 0x1C16D6C
	0x0391DF9C STR X0, [X19 + 0xE0]
	0x0391DFA0 LDR X0, [X23]
	0x0391DFA4 BL 0x1C16F10
	0x0391DFA8 LDR X1, [X20]
	0x0391DFAC MOV X20, X0
	0x0391DFB0 BL 0x2DA9EF4
	0x0391DFB4 STR X20, [X19 + 0xF8]
	0x0391DFB8 LDR X0, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call ProBuilderMesh.get_sharedTextureLookup, X0
	007 Move [X31+8], X0
	008 Add X0, X31, 8
	009 Move X1, X19
	010 Move X2, X31
	011 Call SharedVertex.SetCoincident, X0, X1
	012 Move X1, [X31+8]
	013 Move X0, X20
	014 Call ProBuilderMesh.SetSharedTextures, X0, X1
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Return 

Method: System.Void AddToSharedVertex(System.Int32 sharedVertexHandle, System.Int32 vertex)

Disassembly:
	0x0391DFBC BL 0x1C16F10
	0x0391DFC0 LDR X1, [X21]
	0x0391DFC4 MOV X20, X0
	0x0391DFC8 BL 0x2FDBF14
	0x0391DFCC STR X20, [X19 + 0x100]
	0x0391DFD0 MOV X0, X19
	0x0391DFD4 LDP X20, X19, [X31 + 0x40]
	0x0391DFD8 LDP X22, X21, [X31 + 0x30]
	0x0391DFDC LDP X24, X23, [X31 + 0x20]
	0x0391DFE0 LDP X26, X25, [X31 + 0x10]
	0x0391DFE4 MOV X1, X31
	0x0391DFE8 LDR X30, [X31], #0x50
	0x0391DFEC B 0x3C36C30
	0x0391DFF0 STR X30, [X31 - 0x30]!
	0x0391DFF4 STP X22, X21, [X31 + 0x10]
	0x0391DFF8 STP X20, X19, [X31 + 0x20]
	0x0391DFFC ADRP X21, 0xAC4000
	0x0391E000 ADRP X22, 0x7D6000
	0x0391E004 ADRP X19, 0x7DC000
	0x0391E008 ADRP X20, 0x830000
	0x0391E00C LDRB W8, [X21 + 0x89E]
	0x0391E010 LDR X22, [X22 + 0xE08]
	0x0391E014 LDR X19, [X19 + 0x688]
	0x0391E018 LDR X20, [X20 + 0x528]
	0x0391E01C TBNZ X8, 0x0, 0x391E04C
	0x0391E020 ADRP X0, 0x7DC000
	0x0391E024 LDR X0, [X0 + 0x688]
	0x0391E028 BL 0x1C16CF4
	0x0391E02C ADRP X0, 0x7D6000
	0x0391E030 LDR X0, [X0 + 0xE08]
	0x0391E034 BL 0x1C16CF4
	0x0391E038 ADRP X0, 0x830000
	0x0391E03C LDR X0, [X0 + 0x528]
	0x0391E040 BL 0x1C16CF4
	0x0391E044 MOVZ W8, 0x1
	0x0391E048 STRB W8, [X21 + 0x89E]
	0x0391E04C LDR X0, [X22]
	0x0391E050 BL 0x1C16F10

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move TEMP, X1
	004 And TEMP, TEMP, -2147483648
	005 Compare TEMP, -2147483648
	006 JumpIfEqual {25}
	007 Move X8, [X0+48]
	008 Move X19, X0
	009 Compare X8, 0
	010 JumpIfEqual {43}
	011 Move W9, [X8+24]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Add X8, X8, W1
	014 Move X0, [X8+32]
	015 Compare X0, 0
	016 JumpIfEqual {43}
	017 Move W1, W2
	018 Move X2, X31
	019 Call SharedVertex.Add, X0, X1
	020 Move X0, X19
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Call ProBuilderMesh.InvalidateSharedVertexLookup, X0
	024 Return 
	025 Move X0, 0x7DE000
	026 Move X0, [X0+1888]
	027 Call 0x1C17D08
	028 Call 0x1C17F10
	029 Move X19, X0
	030 Move X0, 0x831000
	031 Move X0, [X0+1640]
	032 Call 0x1C17D08
	033 Move X1, X0
	034 Move X0, X19
	035 Move X2, X31
	036 Call ArgumentOutOfRangeException..ctor, X0, X1
	037 Move X0, 0x831000
	038 Move X0, [X0+1648]
	039 Call 0x1C17D08
	040 Move X1, X0
	041 Move X0, X19
	042 Call 0x1C17DEC
	043 Call 0x1C17F20
	044 Call 0x1C17F28

Method: System.Void AddSharedVertex(UnityEngine.ProBuilder.SharedVertex vertex)

Disassembly:
	0x0391E054 LDR X1, [X19]
	0x0391E058 MOV X19, X0
	0x0391E05C BL 0x2DA9EF4
	0x0391E060 LDR X8, [X20]
	0x0391E064 LDP X22, X21, [X31 + 0x10]
	0x0391E068 LDR X8, [X8 + 0xB8]
	0x0391E06C STR X19, [X8 + 0x28]
	0x0391E070 LDP X20, X19, [X31 + 0x20]
	0x0391E074 LDR X30, [X31], #0x30
	0x0391E078 RET
	0x0391E07C STR X30, [X31 - 0x30]!
	0x0391E080 STP X22, X21, [X31 + 0x10]
	0x0391E084 STP X20, X19, [X31 + 0x20]
	0x0391E088 ADRP X22, 0xAC3000
	0x0391E08C ADRP X21, 0x830000
	0x0391E090 LDRB W8, [X22 + 0x89F]
	0x0391E094 LDR X21, [X21 + 0x6E8]
	0x0391E098 MOV X19, X1
	0x0391E09C MOV X20, X0
	0x0391E0A0 TBNZ X8, 0x0, 0x391E0B8
	0x0391E0A4 ADRP X0, 0x830000
	0x0391E0A8 LDR X0, [X0 + 0x6E8]
	0x0391E0AC BL 0x1C16CF4
	0x0391E0B0 MOVZ W8, 0x1
	0x0391E0B4 STRB W8, [X22 + 0x89F]
	0x0391E0B8 LDR X0, [X20 + 0x28]
	0x0391E0BC LDR X2, [X21]
	0x0391E0C0 MOV X1, X19
	0x0391E0C4 LDP X20, X19, [X31 + 0x20]
	0x0391E0C8 LDP X22, X21, [X31 + 0x10]
	0x0391E0CC LDR X30, [X31], #0x30
	0x0391E0D0 B 0x22E75A0
	0x0391E0D4 STR X30, [X31 - 0x30]!
	0x0391E0D8 STP X22, X21, [X31 + 0x10]
	0x0391E0DC STP X20, X19, [X31 + 0x20]
	0x0391E0E0 ADRP X22, 0xAC3000
	0x0391E0E4 ADRP X21, 0x830000
	0x0391E0E8 LDRB W8, [X22 + 0x8A0]
	0x0391E0EC LDR X21, [X21 + 0x6E8]
	0x0391E0F0 MOV X19, X1
	0x0391E0F4 MOV X20, X0
	0x0391E0F8 TBNZ X8, 0x0, 0x391E110

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xAC4000
	006 Move W8, [X21+2190]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x831000
	014 Move X0, [X0+1656]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2190], W8
	018 Compare X20, 0
	019 JumpIfEqual {34}
	020 Move X8, 0x831000
	021 Move X8, [X8+1656]
	022 Move X0, [X19+48]
	023 Move X1, X20
	024 Move X2, [X8]
	025 Call ArrayUtility.Add, X0, X1
	026 Move [X19+48], X0
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call ProBuilderMesh.InvalidateSharedVertexLookup, X0
	033 Return 
	034 Move X0, 0x7DB000
	035 Move X0, [X0+1320]
	036 Call 0x1C17D08
	037 Call 0x1C17F10
	038 Move X19, X0
	039 Move X0, 0x831000
	040 Move X0, [X0+1560]
	041 Call 0x1C17D08
	042 Move X1, X0
	043 Move X0, X19
	044 Move X2, X31
	045 Call ArgumentNullException..ctor, X0, X1
	046 Move X0, 0x831000
	047 Move X0, [X0+1664]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X19
	051 Call 0x1C17DEC

Method: System.Boolean get_selectable()

Disassembly:
	0x0391E0FC ADRP X0, 0x830000
	0x0391E100 LDR X0, [X0 + 0x6E8]

ISIL:
	001 Move W0, [X0+204]
	002 Return X0

Method: System.Void set_selectable(System.Boolean value)

Disassembly:
	0x0391E104 BL 0x1C16CF4
	0x0391E108 MOVZ W8, 0x1
	0x0391E10C STRB W8, [X22 + 0x8A0]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+204], W8
	003 Return 

Method: System.Int32 get_selectedFaceCount()

Disassembly:
	0x0391E110 LDR X0, [X20 + 0x28]
	0x0391E114 LDR X2, [X21]
	0x0391E118 MOV X1, X19
	0x0391E11C LDP X20, X19, [X31 + 0x20]
	0x0391E120 LDP X22, X21, [X31 + 0x10]
	0x0391E124 LDR X30, [X31], #0x30
	0x0391E128 B 0x22E75A0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+208]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Int32 get_selectedVertexCount()

Disassembly:
	0x0391E12C STR X30, [X31 - 0x10]!
	0x0391E130 LDR X8, [X0 + 0x28]
	0x0391E134 CBZ X8, 0x391E15C
	0x0391E138 LDR W9, [X8 + 0x18]
	0x0391E13C CMP W9, W1
	0x0391E140 B.LS 0x391E160
	0x0391E144 ADD X8, X8, W1, 0x3, SXTW

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+224]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Int32 get_selectedEdgeCount()

Disassembly:
	0x0391E148 LDR X0, [X8 + 0x20]
	0x0391E14C CBZ X0, 0x391E15C
	0x0391E150 MOV X1, X31
	0x0391E154 LDR X30, [X31], #0x10
	0x0391E158 B 0x38FF530
	0x0391E15C BL 0x1C16F20
	0x0391E160 BL 0x1C16F28

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+216]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Int32 get_selectedSharedVerticesCount()

Disassembly:
	0x0391E164 STR X30, [X31 - 0x10]!
	0x0391E168 LDR X8, [X0 + 0x28]
	0x0391E16C CBZ X8, 0x391E194
	0x0391E170 LDR W9, [X8 + 0x18]
	0x0391E174 CMP W9, W1
	0x0391E178 B.LS 0x391E198

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call ProBuilderMesh.CacheSelection, X0
	005 Move W0, [X19+236]
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Int32 get_selectedCoincidentVertexCount()

Disassembly:
	0x0391E41C FABD S4, S0, S0
	0x0391E420 FCMP S4, S3
	0x0391E424 B.PL 0x391E450
	0x0391E428 FABS S3, S10
	0x0391E42C FMAXNM S3, S3, S0
	0x0391E430 FMUL S1, S3, S1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call ProBuilderMesh.CacheSelection, X0
	005 Move W0, [X19+240]
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Collections.Generic.IEnumerable`1<System.Int32> get_selectedSharedVertices()

Disassembly:
	0x0391E434 FCMP S1, S2
	0x0391E438 FCSEL S1, S1, S2, GT
	0x0391E43C FABD S0, S0, S0
	0x0391E440 FCMP S0, S1
	0x0391E444 B.PL 0x391E450
	0x0391E448 MOVZ W0, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call ProBuilderMesh.CacheSelection, X0
	005 Move X0, [X19+248]
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Collections.Generic.IEnumerable`1<System.Int32> get_selectedCoincidentVertices()

Disassembly:
	0x0391E44C B 0x391E4DC
	0x0391E450 FCMP S10, 0x0
	0x0391E454 MOV W0, W31
	0x0391E458 B.EQ 0x391E4DC
	0x0391E45C B.VS 0x391E4DC
	0x0391E460 LDRB W8, [X21 + 0x5AA]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call ProBuilderMesh.CacheSelection, X0
	005 Move X0, [X19+256]
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Void CacheSelection()

Disassembly:
	0x0391E17C ADD X8, X8, W1, 0x3, SXTW
	0x0391E180 LDR X0, [X8 + 0x20]
	0x0391E184 CBZ X0, 0x391E194
	0x0391E188 MOV X1, X31
	0x0391E18C LDR X30, [X31], #0x10
	0x0391E190 B 0x3900240
	0x0391E194 BL 0x1C16F20
	0x0391E198 BL 0x1C16F28
	0x0391E19C STR X30, [X31 - 0x10]!
	0x0391E1A0 LDR X8, [X0]
	0x0391E1A4 CBZ X8, 0x391E1C0
	0x0391E1A8 LDRH W9, [X0 + 0x8]
	0x0391E1AC STRH W9, [X8 + 0xC8]
	0x0391E1B0 LDRH W9, [X0 + 0xA]
	0x0391E1B4 STRH W9, [X8 + 0xCA]
	0x0391E1B8 LDR X30, [X31], #0x10
	0x0391E1BC RET
	0x0391E1C0 BL 0x1C16F20
	0x0391E1C4 STR X30, [X31 - 0x20]!
	0x0391E1C8 STP X20, X19, [X31 + 0x10]
	0x0391E1CC ADRP X19, 0xAC3000
	0x0391E1D0 ADRP X20, 0x830000
	0x0391E1D4 LDRB W8, [X19 + 0x8A1]
	0x0391E1D8 LDR X20, [X20 + 0x500]
	0x0391E1DC TBNZ X8, 0x0, 0x391E1F4
	0x0391E1E0 ADRP X0, 0x830000
	0x0391E1E4 LDR X0, [X0 + 0x500]
	0x0391E1E8 BL 0x1C16CF4
	0x0391E1EC MOVZ W8, 0x1
	0x0391E1F0 STRB W8, [X19 + 0x8A1]
	0x0391E1F4 LDR X0, [X20]
	0x0391E1F8 BL 0x1C16F10
	0x0391E1FC MOV X1, X31
	0x0391E200 MOV X19, X0
	0x0391E204 BL 0x33BDD8C
	0x0391E208 LDR X8, [X20]
	0x0391E20C LDR X8, [X8 + 0xB8]
	0x0391E210 STR X19, [X8]
	0x0391E214 LDP X20, X19, [X31 + 0x10]
	0x0391E218 LDR X30, [X31], #0x20
	0x0391E21C RET
	0x0391E220 MOV X1, X31
	0x0391E224 B 0x33BDD8C
	0x0391E228 RET
	0x0391E22C RET
	0x0391E230 STR X30, [X31 - 0x10]!
	0x0391E234 CBZ X1, 0x391E24C
	0x0391E238 LDR X8, [X1 + 0x10]
	0x0391E23C CBZ X8, 0x391E24C
	0x0391E240 LDR W0, [X8 + 0x18]
	0x0391E244 LDR X30, [X31], #0x10
	0x0391E248 RET
	0x0391E24C BL 0x1C16F20
	0x0391E250 STR X30, [X31 - 0x10]!
	0x0391E254 CBZ X1, 0x391E26C
	0x0391E258 LDR X8, [X1 + 0x10]
	0x0391E25C CBZ X8, 0x391E26C
	0x0391E260 LDR W0, [X8 + 0x18]
	0x0391E264 LDR X30, [X31], #0x10
	0x0391E268 RET
	0x0391E26C BL 0x1C16F20
	0x0391E270 STP X30, X21, [X31 - 0x20]!
	0x0391E274 STP X20, X19, [X31 + 0x10]
	0x0391E278 ADRP X20, 0xAC3000
	0x0391E27C ADRP X21, 0x830000
	0x0391E280 LDRB W8, [X20 + 0x8A2]
	0x0391E284 LDR X21, [X21 + 0x560]
	0x0391E288 MOV X19, X1
	0x0391E28C TBNZ X8, 0x0, 0x391E2A4
	0x0391E290 ADRP X0, 0x830000
	0x0391E294 LDR X0, [X0 + 0x560]
	0x0391E298 BL 0x1C16CF4
	0x0391E29C MOVZ W8, 0x1
	0x0391E2A0 STRB W8, [X20 + 0x8A2]
	0x0391E2A4 LDR X0, [X21]
	0x0391E2A8 BL 0x1C16F10
	0x0391E2AC MOV X1, X19
	0x0391E2B0 MOV X2, X31
	0x0391E2B4 MOV X20, X0
	0x0391E2B8 BL 0x3900598
	0x0391E2BC MOV X0, X20
	0x0391E2C0 LDP X20, X19, [X31 + 0x10]
	0x0391E2C4 LDP X30, X21, [X31], #0x20
	0x0391E2C8 RET
	0x0391E2CC STR X30, [X31 - 0x10]!
	0x0391E2D0 CBZ X1, 0x391E2EC
	0x0391E2D4 LDR W8, [X1 + 0x54]
	0x0391E2D8 LDR W9, [X0 + 0x10]
	0x0391E2DC CMP W8, W9
	0x0391E2E0 CSET W0, EQ
	0x0391E2E4 LDR X30, [X31], #0x10
	0x0391E2E8 RET
	0x0391E2EC BL 0x1C16F20
	0x0391E2F0 STR X30, [X31 - 0x10]!
	0x0391E2F4 CBZ X1, 0x391E310
	0x0391E2F8 LDR W8, [X1 + 0x50]
	0x0391E2FC LDR W9, [X0 + 0x10]
	0x0391E300 CMP W8, W9
	0x0391E304 CSET W0, EQ
	0x0391E308 LDR X30, [X31], #0x10
	0x0391E30C RET
	0x0391E310 BL 0x1C16F20
	0x0391E314 STP D11, D10, [X31 - 0x40]!
	0x0391E318 STP D9, D8, [X31 + 0x10]
	0x0391E31C STP X30, X21, [X31 + 0x20]
	0x0391E320 STP X20, X19, [X31 + 0x30]
	0x0391E324 ADRP X20, 0x7DC000
	0x0391E328 LDR X20, [X20 + 0x4B8]
	0x0391E32C MOV V10.16B, V2.16B
	0x0391E330 MOV V8.16B, V1.16B
	0x0391E334 MOV V9.16B, V0.16B
	0x0391E338 FCMP S0, 0x0
	0x0391E33C ADRP X21, 0xABB000
	0x0391E340 ADRP X19, 0xFFFFFFFFFD1CC000
	0x0391E344 B.EQ 0x391E3C4
	0x0391E348 B.VS 0x391E3C4
	0x0391E34C LDRB W8, [X21 + 0x5AA]
	0x0391E350 CBNZ W8, 0x391E368
	0x0391E354 ADRP X0, 0x7DC000
	0x0391E358 LDR X0, [X0 + 0x4B8]
	0x0391E35C BL 0x1C16CF4
	0x0391E360 MOVZ W8, 0x1
	0x0391E364 STRB W8, [X21 + 0x5AA]
	0x0391E368 LDR X8, [X20]
	0x0391E36C LDR V1, [X19 + 0x240]
	0x0391E370 FABS S2, S8
	0x0391E374 FMOV S0, W31
	0x0391E378 LDR X8, [X8 + 0xB8]
	0x0391E37C FMOV S4, 8
	0x0391E380 FMAXNM S2, S2, S0
	0x0391E384 FMUL S5, S2, S1
	0x0391E388 LDR V3, [X8]
	0x0391E38C FMUL S2, S3, S4
	0x0391E390 FCMP S5, S2
	0x0391E394 FCSEL S3, S5, S2, GT
	0x0391E398 FABD S4, S0, S0
	0x0391E39C FCMP S4, S3
	0x0391E3A0 B.PL 0x391E3C4
	0x0391E3A4 FABS S3, S10
	0x0391E3A8 FMAXNM S3, S3, S0
	0x0391E3AC FMUL S1, S3, S1
	0x0391E3B0 FCMP S1, S2
	0x0391E3B4 FCSEL S1, S1, S2, GT
	0x0391E3B8 FABD S0, S0, S0
	0x0391E3BC FCMP S0, S1
	0x0391E3C0 B.MI 0x391E448
	0x0391E3C4 FCMP S8, 0x0
	0x0391E3C8 FABS S11, S9
	0x0391E3CC B.EQ 0x391E450
	0x0391E3D0 B.VS 0x391E450
	0x0391E3D4 LDRB W8, [X21 + 0x5AA]
	0x0391E3D8 CBNZ W8, 0x391E3F0
	0x0391E3DC ADRP X0, 0x7DC000
	0x0391E3E0 LDR X0, [X0 + 0x4B8]
	0x0391E3E4 BL 0x1C16CF4
	0x0391E3E8 MOVZ W8, 0x1
	0x0391E3EC STRB W8, [X21 + 0x5AA]
	0x0391E3F0 LDR X8, [X20]
	0x0391E3F4 LDR V1, [X19 + 0x240]
	0x0391E3F8 FMOV S0, W31
	0x0391E3FC FMOV S3, 8
	0x0391E400 LDR X8, [X8 + 0xB8]
	0x0391E404 FMAXNM S4, S11, S0
	0x0391E408 FMUL S4, S4, S1
	0x0391E40C LDR V2, [X8]
	0x0391E410 FMUL S2, S2, S3
	0x0391E414 FCMP S4, S2
	0x0391E418 FCSEL S3, S4, S2, GT

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0xAC4000
	013 Move W8, [X20+2191]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {36}
	019 Move X0, 0x830000
	020 Move X0, [X0+3200]
	021 Call 0x1C17CF4
	022 Move X0, 0x7D8000
	023 Move X0, [X0+2520]
	024 Call 0x1C17CF4
	025 Move X0, 0x7DD000
	026 Move X0, [X0+1656]
	027 Call 0x1C17CF4
	028 Move X0, 0x831000
	029 Move X0, [X0+1672]
	030 Call 0x1C17CF4
	031 Move X0, 0x7DD000
	032 Move X0, [X0+2136]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+2191], W8
	036 Move W8, [X19+232]
	037 Compare W8, 0
	038 JumpIfEqual {124}
	039 Move X0, [X19+248]
	040 Move [X19+232], W31
	041 Compare X0, 0
	042 JumpIfEqual {143}
	043 Move X8, 0x7DD000
	044 Move X8, [X8+1656]
	045 Move X1, [X8]
	046 Call HashSet`1<Int32>.Clear, X0
	047 Move X8, [X19+256]
	048 Compare X8, 0
	049 JumpIfEqual {143}
	050 Move W9, [X8+28]
	051 Move X0, X19
	052 Add W9, W9, 1
	053 Move [X8+24], W31
	054 Move [X8+28], W9
	055 Call ProBuilderMesh.get_sharedVertexLookup, X0
	056 Move X23, [X19+224]
	057 Move [X19+236], W31
	058 Move [X19+240], W31
	059 Compare X23, 0
	060 JumpIfEqual {144}
	061 Move X8, [X23+24]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X26, 0x830000
	064 Move X27, 0x7D8000
	065 Move X28, 0x831000
	066 Move X26, [X26+3200]
	067 Move X27, [X27+2520]
	068 Move X28, [X28+1672]
	069 Move X20, X0
	070 Move X24, X31
	071 And X8, X8, 0
	072 Add X25, X23, 32
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Compare X20, 0
	075 JumpIfEqual {136}
	076 Move W21, [X25]
	077 Move X22, [X19+248]
	078 Move X2, [X26]
	079 Move X0, X20
	080 Move W1, W21
	081 Call Dictionary`2<Int32, Int32>.get_Item, X0, X1
	082 Move W1, W0
	083 Compare X22, 0
	084 JumpIfEqual {137}
	085 Move X2, [X27]
	086 Move X0, X22
	087 Call HashSet`1<Int32>.Add, X0, X1
	088 Move TEMP, X0
	089 And TEMP, TEMP, 1
	090 Compare TEMP, 1
	091 JumpIfNotEqual {121}
	092 Move X22, [X19+48]
	093 Move X2, [X26]
	094 Move X0, X20
	095 Move W1, W21
	096 Call Dictionary`2<Int32, Int32>.get_Item, X0, X1
	097 Compare X22, 0
	098 JumpIfEqual {139}
	099 Move W8, [X22+24]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Add X8, X22, W0
	102 Move W9, [X19+236]
	103 Move X21, [X8+32]
	104 Add W8, W9, 1
	105 Move [X19+236], W8
	106 Compare X21, 0
	107 JumpIfEqual {141}
	108 Move W22, [X19+240]
	109 Move X0, X21
	110 Move X1, X31
	111 Call SharedVertex.get_Count, X0
	112 Move W8, W0
	113 Move X0, [X19+256]
	114 Add W8, W8, W22
	115 Move [X19+240], W8
	116 Compare X0, 0
	117 JumpIfEqual {140}
	118 Move X2, [X28]
	119 Move X1, X21
	120 Call List`1<Int32>.AddRange, X0, X1
	121 Move W8, [X23+24]
	122 Add X24, X24, 1
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move X20, [X31+80]
	125 Move X19, [X31+88]
	126 Move X22, [X31+64]
	127 Move X21, [X31+72]
	128 Move X24, [X31+48]
	129 Move X23, [X31+56]
	130 Move X26, [X31+32]
	131 Move X25, [X31+40]
	132 Move X28, [X31+16]
	133 Move X27, [X31+24]
	134 Move X30, [X31+96]
	135 Return 
	136 Call 0x1C17F20
	137 Call 0x1C17F20
	138 Call 0x1C17F28
	139 Call 0x1C17F20
	140 Call 0x1C17F20
	141 Call 0x1C17F20
	142 Call 0x1C17F28
	143 Call 0x1C17F20
	144 Call 0x1C17F20
	145 Move X20, X0
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move X0, X20
	148 Call 0x3EB2AD0
	149 Move X20, X0
	150 Move X0, 0x7DC000
	151 Move X0, [X0+3264]
	152 Call 0x1C17D08
	153 Move X8, [X20]
	154 Move X1, [X8]
	155 Call 0x1C18270
	156 Move TEMP, X0
	157 And TEMP, TEMP, 1
	158 Compare TEMP, 1
	159 JumpIfNotEqual {175}
	160 Call 0x3EB2AE0
	161 Move X0, X19
	162 Move X20, [X31+80]
	163 Move X19, [X31+88]
	164 Move X22, [X31+64]
	165 Move X21, [X31+72]
	166 Move X24, [X31+48]
	167 Move X23, [X31+56]
	168 Move X26, [X31+32]
	169 Move X25, [X31+40]
	170 Move X28, [X31+16]
	171 Move X27, [X31+24]
	172 Move X30, [X31+96]
	173 Call ProBuilderMesh.ClearSelection, X0
	174 Return 
	175 Move W0, 8
	176 Call 0x3EB2AF0
	177 Move X8, [X20]
	178 Move [X0], X8
	179 Move X1, 0x597000
	180 Add X1, X1, 3672
	181 Move X2, X31
	182 Call 0x3EB2B00
	183 Move X20, X0
	184 Call 0x3EB2AE0
	185 Move X0, X20
	186 Call 0x1D2D690
	187 Call 0x1991590

Method: UnityEngine.ProBuilder.Face[] GetSelectedFaces()

Disassembly:
	0x0391E464 CBNZ W8, 0x391E47C
	0x0391E468 ADRP X0, 0x7DC000
	0x0391E46C LDR X0, [X0 + 0x4B8]
	0x0391E470 BL 0x1C16CF4
	0x0391E474 MOVZ W8, 0x1
	0x0391E478 STRB W8, [X21 + 0x5AA]
	0x0391E47C LDR X8, [X20]
	0x0391E480 LDR V1, [X19 + 0x240]
	0x0391E484 FMOV S0, W31
	0x0391E488 FMOV S3, 8
	0x0391E48C LDR X8, [X8 + 0xB8]
	0x0391E490 FMAXNM S4, S11, S0
	0x0391E494 FMUL S4, S4, S1
	0x0391E498 LDR V2, [X8]
	0x0391E49C FMUL S2, S2, S3
	0x0391E4A0 FCMP S4, S2
	0x0391E4A4 FCSEL S3, S4, S2, GT
	0x0391E4A8 FABD S4, S0, S0
	0x0391E4AC FCMP S4, S3
	0x0391E4B0 B.PL 0x391E4D8
	0x0391E4B4 FABS S3, S8
	0x0391E4B8 FMAXNM S3, S3, S0
	0x0391E4BC FMUL S1, S3, S1
	0x0391E4C0 FCMP S1, S2
	0x0391E4C4 FCSEL S1, S1, S2, GT
	0x0391E4C8 FABD S0, S0, S0
	0x0391E4CC FCMP S0, S1
	0x0391E4D0 CSET W0, MI
	0x0391E4D4 B 0x391E4DC
	0x0391E4D8 MOV W0, W31
	0x0391E4DC LDP X20, X19, [X31 + 0x30]
	0x0391E4E0 LDP X30, X21, [X31 + 0x20]
	0x0391E4E4 LDP D9, D8, [X31 + 0x10]
	0x0391E4E8 LDP D11, D10, [X31], #0x40
	0x0391E4EC RET
	0x0391E4F0 FCMP S1, 0x0
	0x0391E4F4 B.NE 0x391E4FC
	0x0391E4F8 RET
	0x0391E4FC STP D9, D8, [X31 - 0x20]!
	0x0391E500 STR X30, [X31 + 0x10]
	0x0391E504 FDIV S9, S0, S1
	0x0391E508 FCVT S0, S9
	0x0391E50C ADD X0, X31, 0x18
	0x0391E510 MOV V8.16B, V1.16B
	0x0391E514 BL 0x3EB1C00
	0x0391E518 FCMP S9, 0x0
	0x0391E51C B.GE 0x391E538
	0x0391E520 FMOV D1, -0.5
	0x0391E524 FCMP D0, D1
	0x0391E528 B.NE 0x391E564
	0x0391E52C LDR V0, [X31 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xAC4000
	005 Move W8, [X20+2192]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x831000
	012 Move X0, [X0+1008]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2192], W8
	016 Move X8, [X19+208]
	017 Compare X8, 0
	018 JumpIfEqual {54}
	019 Move X9, 0x831000
	020 Move X9, [X9+1008]
	021 Move W20, [X8+24]
	022 Move X0, [X9]
	023 Move W1, W20
	024 Call 0x1C17D6C
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W8, W31
	027 Move X11, [X19+208]
	028 Compare X11, 0
	029 JumpIfEqual {54}
	030 Move W9, [X11+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X9, [X19+40]
	033 Compare X9, 0
	034 JumpIfEqual {54}
	035 Move X10, W8
	036 Add X11, X11, X10
	037 NotImplemented "Instruction LDRSW not yet implemented."
	038 Move W12, [X9+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Compare X0, 0
	041 JumpIfEqual {54}
	042 Move W12, [X0+24]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Add X9, X9, X11
	045 Move X9, [X9+32]
	046 Add W8, W8, 1
	047 Add X10, X0, X10
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move [X10+32], X9
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X30, [X31+32]
	053 Return X0
	054 Call 0x1C17F20
	055 Call 0x1C17F28

Method: System.Collections.ObjectModel.ReadOnlyCollection`1<System.Int32> get_selectedFaceIndexes()

Disassembly:
	0x0391E530 FMOV S1, -1
	0x0391E534 B 0x391E54C
	0x0391E538 FMOV D1, 0.5
	0x0391E53C FCMP D0, D1
	0x0391E540 B.NE 0x391E574
	0x0391E544 LDR V0, [X31 + 0x18]
	0x0391E548 FMOV S1, 1
	0x0391E54C FCVTZS X8, D0
	0x00000000 INVALID
	0x0391E554 FADD S1, S0, S1
	0x0391E558 ANDS X31, X8, 0x1
	0x0391E55C FCSEL S0, S0, S1, EQ
	0x0391E560 B 0x391E580
	0x0391E564 FMOV S0, -0.5
	0x0391E568 FADD S0, S9, S0
	0x0391E56C FRINTP S0, S0
	0x0391E570 B 0x391E580
	0x0391E574 FMOV S0, 0.5
	0x0391E578 FADD S0, S9, S0
	0x0391E57C FRINTM S0, S0
	0x0391E580 LDR X30, [X31 + 0x10]
	0x0391E584 FMUL S0, S0, S8
	0x0391E588 LDP D9, D8, [X31], #0x20
	0x0391E58C RET
	0x0391E590 STP D13, D12, [X31 - 0x40]!
	0x0391E594 STP D11, D10, [X31 + 0x10]
	0x0391E598 STP D9, D8, [X31 + 0x20]
	0x0391E59C STR X30, [X31 + 0x30]
	0x0391E5A0 ADRP X8, 0xFFFFFFFFFD1CB000
	0x0391E5A4 LDR V13, [X8 + 0xF28]
	0x0391E5A8 MOV V9.16B, V1.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xAC4000
	007 Move X21, 0x830000
	008 Move X20, 0x830000
	009 Move W8, [X22+2193]
	010 Move X21, [X21+3368]
	011 Move X20, [X20+3376]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x830000
	018 Move X0, [X0+3376]
	019 Call 0x1C17CF4
	020 Move X0, 0x830000
	021 Move X0, [X0+3368]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2193], W8
	025 Move X0, [X21]
	026 Move X19, [X19+208]
	027 Call 0x1C17F10
	028 Move X2, [X20]
	029 Move X1, X19
	030 Move X20, X0
	031 Call ReadOnlyCollection`1<Int32>..ctor, X0, X1
	032 Move X0, X20
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Return X0

Method: System.Collections.ObjectModel.ReadOnlyCollection`1<System.Int32> get_selectedVertices()

Disassembly:
	0x0391E5AC FABS S1, S3
	0x0391E5B0 MOV V10.16B, V5.16B
	0x0391E5B4 MOV V12.16B, V4.16B
	0x0391E5B8 MOV V8.16B, V2.16B
	0x0391E5BC FCMP S1, S13
	0x0391E5C0 MOV V11.16B, V0.16B
	0x0391E5C4 B.LE 0x391E5D8
	0x0391E5C8 MOV V0.16B, V11.16B
	0x0391E5CC MOV V1.16B, V3.16B
	0x0391E5D0 BL 0x391E4F0
	0x0391E5D4 MOV V11.16B, V0.16B
	0x0391E5D8 FABS S0, S12
	0x0391E5DC FCMP S0, S13
	0x0391E5E0 B.LE 0x391E5F4
	0x0391E5E4 MOV V0.16B, V9.16B
	0x0391E5E8 MOV V1.16B, V12.16B
	0x0391E5EC BL 0x391E4F0
	0x0391E5F0 MOV V9.16B, V0.16B
	0x0391E5F4 FABS S0, S10
	0x0391E5F8 FCMP S0, S13
	0x0391E5FC B.LE 0x391E610
	0x0391E600 MOV V0.16B, V8.16B
	0x0391E604 MOV V1.16B, V10.16B
	0x0391E608 BL 0x391E4F0
	0x0391E60C MOV V8.16B, V0.16B
	0x0391E610 MOV V0.16B, V11.16B
	0x0391E614 MOV V1.16B, V9.16B
	0x0391E618 MOV V2.16B, V8.16B
	0x0391E61C LDR X30, [X31 + 0x30]
	0x0391E620 LDP D9, D8, [X31 + 0x20]
	0x0391E624 LDP D11, D10, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xAC4000
	007 Move X21, 0x830000
	008 Move X20, 0x830000
	009 Move W8, [X22+2194]
	010 Move X21, [X21+3368]
	011 Move X20, [X20+3376]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x830000
	018 Move X0, [X0+3376]
	019 Call 0x1C17CF4
	020 Move X0, 0x830000
	021 Move X0, [X0+3368]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2194], W8
	025 Move X0, [X21]
	026 Move X19, [X19+224]
	027 Call 0x1C17F10
	028 Move X2, [X20]
	029 Move X1, X19
	030 Move X20, X0
	031 Call ReadOnlyCollection`1<Int32>..ctor, X0, X1
	032 Move X0, X20
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Return X0

Method: System.Collections.ObjectModel.ReadOnlyCollection`1<UnityEngine.ProBuilder.Edge> get_selectedEdges()

Disassembly:
	0x0391E628 LDP D13, D12, [X31], #0x40
	0x0391E62C RET
	0x0391E630 STR D10, [X31 - 0x80]!
	0x0391E634 STP D9, D8, [X31 + 0x10]
	0x0391E638 STP X29, X30, [X31 + 0x20]
	0x0391E63C STP X28, X27, [X31 + 0x30]
	0x0391E640 STP X26, X25, [X31 + 0x40]
	0x0391E644 STP X24, X23, [X31 + 0x50]
	0x0391E648 STP X22, X21, [X31 + 0x60]
	0x0391E64C STP X20, X19, [X31 + 0x70]
	0x0391E650 ADRP X21, 0xAC3000
	0x0391E654 LDRB W8, [X21 + 0x8A3]
	0x0391E658 MOV V8.16B, V2.16B
	0x0391E65C MOV V9.16B, V1.16B
	0x0391E660 MOV V10.16B, V0.16B
	0x0391E664 MOV X19, X1
	0x0391E668 MOV X20, X0
	0x0391E66C TBNZ X8, 0x0, 0x391E6A8
	0x0391E670 ADRP X0, 0x7D5000
	0x0391E674 LDR X0, [X0 + 0xE00]
	0x0391E678 BL 0x1C16CF4
	0x0391E67C ADRP X0, 0x7FD000
	0x0391E680 LDR X0, [X0 + 0x7B8]
	0x0391E684 BL 0x1C16CF4
	0x0391E688 ADRP X0, 0x7FD000
	0x0391E68C LDR X0, [X0 + 0x7C0]
	0x0391E690 BL 0x1C16CF4
	0x0391E694 ADRP X0, 0x7D5000
	0x0391E698 LDR X0, [X0 + 0xE18]
	0x0391E69C BL 0x1C16CF4
	0x0391E6A0 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xAC4000
	007 Move X21, 0x830000
	008 Move X20, 0x830000
	009 Move W8, [X22+2195]
	010 Move X21, [X21+3464]
	011 Move X20, [X20+3456]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x830000
	018 Move X0, [X0+3456]
	019 Call 0x1C17CF4
	020 Move X0, 0x830000
	021 Move X0, [X0+3464]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2195], W8
	025 Move X0, [X21]
	026 Move X19, [X19+216]
	027 Call 0x1C17F10
	028 Move X2, [X20]
	029 Move X1, X19
	030 Move X20, X0
	031 Call ReadOnlyCollection`1<Edge>..ctor, X0, X1
	032 Move X0, X20
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Return X0

Method: UnityEngine.ProBuilder.Face[] get_selectedFacesInternal()

Disassembly:
	0x0391E6A4 STRB W8, [X21 + 0x8A3]

ISIL:
	001 Call ProBuilderMesh.GetSelectedFaces, X0
	002 Return X0

Method: System.Void set_selectedFacesInternal(UnityEngine.ProBuilder.Face[] value)

Disassembly:
	0x0391E6A8 CBZ X20, 0x391E920
	0x0391E6AC CBZ X19, 0x391E920
	0x0391E6B0 ADRP X10, 0x7FD000
	0x0391E6B4 LDR X8, [X19]
	0x0391E6B8 LDR X10, [X10 + 0x7B8]
	0x0391E6BC LDR X24, [X20 + 0x58]
	0x0391E6C0 LDRH W9, [X8 + 0x12E]
	0x0391E6C4 LDR X1, [X10]
	0x0391E6C8 CBZ X9, 0x391E6EC
	0x0391E6CC LDR X10, [X8 + 0xB0]
	0x0391E6D0 ADD X10, X10, 0x8
	0x0391E6D4 LDUR X11, [X10 - 0x8]
	0x0391E6D8 CMP X11, X1
	0x0391E6DC B.EQ 0x391E6FC
	0x0391E6E0 SUBS X9, X9, 0x1
	0x0391E6E4 ADD X10, X10, 0x10
	0x0391E6E8 B.NE 0x391E6D4
	0x0391E6EC MOV X0, X19
	0x0391E6F0 MOV W2, W31
	0x0391E6F4 BL 0x1C5C788
	0x0391E6F8 B 0x391E708
	0x0391E6FC LDRSW X9, [X10]
	0x0391E700 ADD X8, X8, X9, 0x4, LSL
	0x0391E704 ADD X0, X8, 0x138
	0x0391E708 LDP X8, X1, [X0]
	0x0391E70C MOV X0, X19
	0x0391E710 BLR X8
	0x0391E714 MOV X19, X0
	0x0391E718 CBZ X0, 0x391E924
	0x0391E71C ADRP X25, 0x7D5000
	0x0391E720 ADRP X26, 0x7FD000
	0x0391E724 LDR X25, [X25 + 0xE18]
	0x0391E728 LDR X26, [X26 + 0x7C0]
	0x0391E72C MOVZ W27, 0xC
	0x0391E730 LDR X8, [X19]
	0x0391E734 LDR X1, [X25]
	0x0391E738 LDRH W9, [X8 + 0x12E]
	0x0391E73C CBZ X9, 0x391E760
	0x0391E740 LDR X10, [X8 + 0xB0]
	0x0391E744 ADD X10, X10, 0x8
	0x0391E748 LDUR X11, [X10 - 0x8]
	0x0391E74C CMP X11, X1
	0x0391E750 B.EQ 0x391E770
	0x0391E754 SUBS X9, X9, 0x1
	0x0391E758 ADD X10, X10, 0x10
	0x0391E75C B.NE 0x391E748
	0x0391E760 MOV X0, X19
	0x0391E764 MOV W2, W31
	0x0391E768 BL 0x1C5C788
	0x0391E76C B 0x391E77C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0xAC4000
	010 Move X25, 0x831000
	011 Move X21, 0x831000
	012 Move X23, 0x831000
	013 Move X22, 0x7D8000
	014 Move W8, [X24+2196]
	015 Move X25, [X25+1296]
	016 Move X21, [X21+1680]
	017 Move X23, [X23+1688]
	018 Move X22, [X22+2504]
	019 Move X20, X1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {39}
	025 Move X0, 0x831000
	026 Move X0, [X0+1688]
	027 Call 0x1C17CF4
	028 Move X0, 0x7D8000
	029 Move X0, [X0+2504]
	030 Call 0x1C17CF4
	031 Move X0, 0x831000
	032 Move X0, [X0+1296]
	033 Call 0x1C17CF4
	034 Move X0, 0x831000
	035 Move X0, [X0+1680]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X24+2196], W8
	039 Move X0, [X25]
	040 Call 0x1C17F10
	041 Move X2, [X21]
	042 Move X1, X19
	043 Move X3, X31
	044 Move X21, X0
	045 Call Func`2<Object, Int32>..ctor, X0, X1, X2
	046 Move X2, [X23]
	047 Move X0, X20
	048 Move X1, X21
	049 Call Enumerable.Select, X0, X1
	050 Move X1, [X22]
	051 Call Enumerable.ToArray, X0
	052 Move [X19+208], X0
	053 Move X20, [X31+48]
	054 Move X19, [X31+56]
	055 Move X22, [X31+32]
	056 Move X21, [X31+40]
	057 Move X24, [X31+16]
	058 Move X23, [X31+24]
	059 Move X30, [X31+64]
	060 Move X25, [X31+72]
	061 Return 

Method: System.Int32[] get_selectedFaceIndicesInternal()

Disassembly:
	0x0391E770 LDRSW X9, [X10]
	0x0391E774 ADD X8, X8, X9, 0x4, LSL

ISIL:
	001 Move X0, [X0+208]
	002 Return X0

Method: System.Void set_selectedFaceIndicesInternal(System.Int32[] value)

Disassembly:
	0x0391E778 ADD X0, X8, 0x138
	0x0391E77C LDP X8, X1, [X0]

ISIL:
	001 Move [X0+208], X1
	002 Return 

Method: UnityEngine.ProBuilder.Edge[] get_selectedEdgesInternal()

Disassembly:
	0x0391E780 MOV X0, X19
	0x0391E784 BLR X8

ISIL:
	001 Move X0, [X0+216]
	002 Return X0

Method: System.Void set_selectedEdgesInternal(UnityEngine.ProBuilder.Edge[] value)

Disassembly:
	0x0391E788 TBZ X0, 0x0, 0x391E87C
	0x0391E78C LDR X8, [X19]

ISIL:
	001 Move [X0+216], X1
	002 Return 

Method: System.Int32[] get_selectedIndexesInternal()

Disassembly:
	0x0391E790 LDR X1, [X26]
	0x0391E794 LDRH W9, [X8 + 0x12E]

ISIL:
	001 Move X0, [X0+224]
	002 Return X0

Method: System.Void set_selectedIndexesInternal(System.Int32[] value)

Disassembly:
	0x0391E798 CBZ X9, 0x391E7BC
	0x0391E79C LDR X10, [X8 + 0xB0]

ISIL:
	001 Move [X0+224], X1
	002 Return 

Method: UnityEngine.ProBuilder.Face GetActiveFace()

Disassembly:
	0x0391E7A0 ADD X10, X10, 0x8
	0x0391E7A4 LDUR X11, [X10 - 0x8]
	0x0391E7A8 CMP X11, X1
	0x0391E7AC B.EQ 0x391E7CC
	0x0391E7B0 SUBS X9, X9, 0x1
	0x0391E7B4 ADD X10, X10, 0x10
	0x0391E7B8 B.NE 0x391E7A4
	0x0391E7BC MOV X0, X19
	0x0391E7C0 MOV W2, W31
	0x0391E7C4 BL 0x1C5C788
	0x0391E7C8 B 0x391E7D8
	0x0391E7CC LDRSW X9, [X10]
	0x0391E7D0 ADD X8, X8, X9, 0x4, LSL
	0x0391E7D4 ADD X0, X8, 0x138
	0x0391E7D8 LDP X8, X1, [X0]
	0x0391E7DC MOV X0, X19
	0x0391E7E0 BLR X8
	0x0391E7E4 MOV W21, W0
	0x0391E7E8 MOV X0, X20
	0x0391E7EC MOV X1, X31
	0x0391E7F0 BL 0x3C32E90
	0x0391E7F4 MOV X22, X0
	0x0391E7F8 MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+208]
	003 Compare X8, 0
	004 JumpIfEqual {21}
	005 Move X10, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X9, [X0+40]
	008 Compare X9, 0
	009 JumpIfEqual {21}
	010 Move X11, INVALID
	011 Add X10, X11, X10
	012 Add X8, X8, X10
	013 NotImplemented "Instruction LDRSW not yet implemented."
	014 Move W10, [X9+24]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Add X8, X9, X8
	017 Move X0, [X8+32]
	018 Move X0, X31
	019 Move X30, [X31+16]
	020 Return X0
	021 Call 0x1C17F20
	022 Call 0x1C17F28

Method: UnityEngine.ProBuilder.Edge GetActiveEdge()

Disassembly:
	0x0391E7FC MOV X1, X31
	0x0391E800 BL 0x3C32E90
	0x0391E804 CBZ X24, 0x391E914
	0x0391E808 LDR W8, [X24 + 0x18]
	0x0391E80C CMP W21, W8
	0x0391E810 B.CS 0x391E91C
	0x0391E814 CBZ X0, 0x391E918
	0x0391E818 SXTW X8, W21
	0x0391E81C MADD X8, X8, X27, X24
	0x0391E820 ADD X28, X8, 0x20
	0x0391E824 ADD X29, X8, 0x24
	0x0391E828 ADD X23, X8, 0x28
	0x0391E82C LDR V2, [X23]
	0x0391E830 LDR V1, [X29]
	0x0391E834 LDR V0, [X28]
	0x0391E838 MOV X1, X31
	0x0391E83C BL 0x3C3DE4C
	0x0391E840 MOV V3.16B, V10.16B
	0x0391E844 MOV V4.16B, V9.16B
	0x0391E848 MOV V5.16B, V8.16B
	0x0391E84C BL 0x391E590
	0x0391E850 CBZ X22, 0x391E90C
	0x0391E854 MOV X0, X22
	0x0391E858 MOV X1, X31
	0x0391E85C BL 0x3C40B58
	0x0391E860 LDR W8, [X24 + 0x18]
	0x0391E864 CMP W21, W8
	0x0391E868 B.CS 0x391E910
	0x0391E86C STR S0, [X28]
	0x0391E870 STR S1, [X29]
	0x0391E874 STR S2, [X23]
	0x0391E878 B 0x391E730
	0x0391E87C MOV X20, X31
	0x0391E880 CBZ X19, 0x391E8E4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xAC4000
	005 Move W8, [X20+2197]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x7FE000
	012 Move X0, [X0+1536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2197], W8
	016 Move X8, [X19+216]
	017 Compare X8, 0
	018 JumpIfEqual {39}
	019 Move X9, [X8+24]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X10, INVALID
	022 Add X9, X10, X9
	023 Add X8, X8, X9
	024 Add X8, X8, 32
	025 Move X19, 0x7FE000
	026 Move X19, [X19+1536]
	027 Move X0, [X19]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {33}
	031 Call 0x1C17DFC
	032 Move X0, [X19]
	033 Move X8, [X0+184]
	034 Move X0, [X8]
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return X0
	039 Call 0x1C17F20

Method: System.Int32 GetActiveVertex()

Disassembly:
	0x0391E884 LDR X8, [X19]
	0x0391E888 ADRP X10, 0x7D5000
	0x0391E88C LDRH W9, [X8 + 0x12E]
	0x0391E890 LDR X10, [X10 + 0xE00]
	0x0391E894 LDR X1, [X10]
	0x0391E898 CBZ X9, 0x391E8BC
	0x0391E89C LDR X10, [X8 + 0xB0]
	0x0391E8A0 ADD X10, X10, 0x8
	0x0391E8A4 LDUR X11, [X10 - 0x8]
	0x0391E8A8 CMP X11, X1
	0x0391E8AC B.EQ 0x391E8CC
	0x0391E8B0 SUBS X9, X9, 0x1
	0x0391E8B4 ADD X10, X10, 0x10
	0x0391E8B8 B.NE 0x391E8A4
	0x0391E8BC MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+224]
	003 Compare X8, 0
	004 JumpIfEqual {16}
	005 Move X9, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X10, INVALID
	008 Add X9, X10, X9
	009 Add X8, X8, X9
	010 Move W0, [X8+32]
	011 Move TEMP, 0
	012 Not TEMP
	013 Move W0, TEMP
	014 Move X30, [X31+16]
	015 Return X0
	016 Call 0x1C17F20

Method: System.Void AddToFaceSelection(System.Int32 index)

Disassembly:
	0x0391E8C0 MOV W2, W31
	0x0391E8C4 BL 0x1C5C788
	0x0391E8C8 B 0x391E8D8
	0x0391E8CC LDRSW X9, [X10]
	0x0391E8D0 ADD X8, X8, X9, 0x4, LSL
	0x0391E8D4 ADD X0, X8, 0x138
	0x0391E8D8 LDP X8, X1, [X0]
	0x0391E8DC MOV X0, X19
	0x0391E8E0 BLR X8
	0x0391E8E4 CBNZ X20, 0x391E928
	0x0391E8E8 LDP X20, X19, [X31 + 0x70]
	0x0391E8EC LDP X22, X21, [X31 + 0x60]
	0x0391E8F0 LDP X24, X23, [X31 + 0x50]
	0x0391E8F4 LDP X26, X25, [X31 + 0x40]
	0x0391E8F8 LDP X28, X27, [X31 + 0x30]
	0x0391E8FC LDP X29, X30, [X31 + 0x20]
	0x0391E900 LDP D9, D8, [X31 + 0x10]
	0x0391E904 LDR V10, [X31], #0x80
	0x0391E908 RET
	0x0391E90C BL 0x1C16F20
	0x0391E910 BL 0x1C16F28
	0x0391E914 BL 0x1C16F20
	0x0391E918 BL 0x1C16F20
	0x0391E91C BL 0x1C16F28
	0x0391E920 BL 0x1C16F20
	0x0391E924 BL 0x1C16F20
	0x0391E928 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xAC4000
	006 Move W8, [X21+2198]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x831000
	014 Move X0, [X0+1696]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2198], W8
	018 Move TEMP, X20
	019 And TEMP, TEMP, -2147483648
	020 Compare TEMP, -2147483648
	021 JumpIfEqual {34}
	022 Move X8, 0x831000
	023 Move X8, [X8+1696]
	024 Move X0, [X19+208]
	025 Move W1, W20
	026 Move X2, [X8]
	027 Call 0x217DCA0, X0, X1
	028 Move X1, X0
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 

Method: System.Void SetSelectedFaces(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> selected)

Disassembly:
	0x0391EB3C STP S0, S1, [X31 + 0x10]
	0x0391EB40 LDR V0, [X19 + 0x8]
	0x0391EB44 ADRP X8, 0xABA000
	0x0391EB48 STR S0, [X31 + 0xC]
	0x0391EB4C LDR V10, [X24 + 0xC]!
	0x0391EB50 LDR V9, [X25 + 0x10]!
	0x0391EB54 LDR V8, [X26 + 0x14]!
	0x0391EB58 LDRB W8, [X8 + 0x785]
	0x0391EB5C CBNZ W8, 0x391EB78
	0x0391EB60 ADRP X0, 0x7D5000
	0x0391EB64 LDR X0, [X0 + 0x5A8]
	0x0391EB68 BL 0x1C16CF4
	0x0391EB6C MOVZ W8, 0x1
	0x0391EB70 ADRP X9, 0xABA000
	0x0391EB74 STRB W8, [X9 + 0x785]
	0x0391EB78 ADRP X20, 0x7D5000
	0x0391EB7C LDR X20, [X20 + 0x5A8]
	0x0391EB80 LDR X0, [X20]
	0x0391EB84 LDR W8, [X0 + 0xE0]
	0x0391EB88 CBNZ W8, 0x391EB90
	0x0391EB8C BL 0x1C16DFC
	0x0391EB90 ADRP X8, 0xFFFFFFFFFD1CC000
	0x0391EB94 FMUL S0, S10, S10
	0x0391EB98 FMUL S1, S9, S9
	0x0391EB9C LDR V3, [X8 + 0x17C]
	0x0391EBA0 FMUL S2, S8, S8
	0x0391EBA4 FADD S0, S0, S1
	0x0391EBA8 FADD S0, S2, S0
	0x0391EBAC FSQRT S0, S0
	0x0391EBB0 FCMP S0, S3
	0x0391EBB4 ADRP X28, 0xABA000
	0x0391EBB8 STR S3, [X31 + 0x3C]
	0x0391EBBC B.LE 0x391EBD4
	0x0391EBC0 FDIV S2, S10, S0
	0x0391EBC4 FDIV S1, S9, S0
	0x0391EBC8 STP S1, S2, [X31 + 0x28]
	0x0391EBCC FDIV S0, S8, S0
	0x0391EBD0 B 0x391EC10
	0x0391EBD4 LDRB W8, [X28 + 0x783]
	0x0391EBD8 CBNZ W8, 0x391EBF0
	0x0391EBDC ADRP X0, 0x7D5000
	0x0391EBE0 LDR X0, [X0 + 0x5A0]
	0x0391EBE4 BL 0x1C16CF4
	0x0391EBE8 MOVZ W8, 0x1
	0x0391EBEC STRB W8, [X28 + 0x783]
	0x0391EBF0 ADRP X8, 0x7D5000
	0x0391EBF4 LDR X8, [X8 + 0x5A0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xAC4000
	007 Move W8, [X21+2199]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x831000
	015 Move X0, [X0+1688]
	016 Call 0x1C17CF4
	017 Move X0, 0x831000
	018 Move X0, [X0+1296]
	019 Call 0x1C17CF4
	020 Move X0, 0x831000
	021 Move X0, [X0+1752]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2199], W8
	025 Compare X20, 0
	026 JumpIfEqual {55}
	027 Move X8, 0x831000
	028 Move X8, [X8+1296]
	029 Move X21, 0x831000
	030 Move X22, 0x831000
	031 Move X0, [X8]
	032 Move X21, [X21+1752]
	033 Move X22, [X22+1688]
	034 Call 0x1C17F10
	035 Move X2, [X21]
	036 Move X1, X19
	037 Move X3, X31
	038 Move X21, X0
	039 Call Func`2<Object, Int32>..ctor, X0, X1, X2
	040 Move X2, [X22]
	041 Move X0, X20
	042 Move X1, X21
	043 Call Enumerable.Select, X0, X1
	044 Move X1, X0
	045 Compare X19, 0
	046 JumpIfEqual {58}
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Call ProBuilderMesh.SetSelectedFaces, X0, X1
	054 Return 
	055 Move X1, X31
	056 Compare X19, 0
	057 JumpIfNotEqual {47}
	058 Call 0x1C17F20

Method: System.Void SetSelectedFaces(System.Collections.Generic.IEnumerable`1<System.Int32> selected)

Disassembly:
	0x0391E92C BL 0x1C16F18
	0x0391E930 B 0x391E958
	0x0391E934 B 0x391E958
	0x0391E938 B 0x391E958
	0x0391E93C B 0x391E958
	0x0391E940 B 0x391E958
	0x0391E944 B 0x391E958
	0x0391E948 B 0x391E958
	0x0391E94C B 0x391E958
	0x0391E950 B 0x391E958
	0x0391E954 B 0x391E958
	0x0391E958 CMP W1, 0x1
	0x0391E95C B.NE 0x391E970
	0x0391E960 BL 0x3EB1AD0
	0x0391E964 LDR X20, [X0]
	0x0391E968 BL 0x3EB1AE0
	0x0391E96C B 0x391E880
	0x0391E970 MOV X21, X0
	0x0391E974 MOV X20, X31
	0x0391E978 B 0x391E980
	0x0391E97C MOV X21, X0
	0x0391E980 CBZ X19, 0x391E9E4
	0x0391E984 LDR X8, [X19]
	0x0391E988 ADRP X10, 0x7D5000
	0x0391E98C LDRH W9, [X8 + 0x12E]
	0x0391E990 LDR X10, [X10 + 0xE00]
	0x0391E994 LDR X1, [X10]
	0x0391E998 CBZ X9, 0x391E9BC
	0x0391E99C LDR X10, [X8 + 0xB0]
	0x0391E9A0 ADD X10, X10, 0x8
	0x0391E9A4 LDUR X11, [X10 - 0x8]
	0x0391E9A8 CMP X11, X1
	0x0391E9AC B.EQ 0x391E9CC
	0x0391E9B0 SUBS X9, X9, 0x1
	0x0391E9B4 ADD X10, X10, 0x10
	0x0391E9B8 B.NE 0x391E9A4
	0x0391E9BC MOV X0, X19
	0x0391E9C0 MOV W2, W31
	0x0391E9C4 BL 0x1C5C788
	0x0391E9C8 B 0x391E9D8
	0x0391E9CC LDRSW X9, [X10]
	0x0391E9D0 ADD X8, X8, X9, 0x4, LSL
	0x0391E9D4 ADD X0, X8, 0x138
	0x0391E9D8 LDP X8, X1, [X0]
	0x0391E9DC MOV X0, X19
	0x0391E9E0 BLR X8
	0x0391E9E4 CBNZ X20, 0x391E9F0
	0x0391E9E8 MOV X0, X21
	0x0391E9EC BL 0x1D2C690
	0x0391E9F0 MOV X0, X20
	0x0391E9F4 BL 0x1C16F18
	0x0391E9F8 BL 0x1990590
	0x0391E9FC STR D10, [X31 - 0x30]!
	0x0391EA00 STP D9, D8, [X31 + 0x10]
	0x0391EA04 STP X30, X19, [X31 + 0x20]
	0x0391EA08 ADRP X19, 0xABB000
	0x0391EA0C LDRB W8, [X19 + 0x5AA]
	0x0391EA10 MOV V8.16B, V2.16B
	0x0391EA14 MOV V9.16B, V1.16B
	0x0391EA18 FABS S10, S0
	0x0391EA1C CBNZ W8, 0x391EA34
	0x0391EA20 ADRP X0, 0x7DC000
	0x0391EA24 LDR X0, [X0 + 0x4B8]
	0x0391EA28 BL 0x1C16CF4
	0x0391EA2C MOVZ W8, 0x1
	0x0391EA30 STRB W8, [X19 + 0x5AA]
	0x0391EA34 ADRP X8, 0x7DC000
	0x0391EA38 LDR X8, [X8 + 0x4B8]
	0x0391EA3C FMOV S2, 1
	0x0391EA40 FMOV S1, 8
	0x0391EA44 FABS S3, S9
	0x0391EA48 LDR X8, [X8]
	0x0391EA4C FABS S4, S8
	0x0391EA50 FMOV S5, W31
	0x0391EA54 LDP X30, X19, [X31 + 0x20]
	0x0391EA58 LDR X8, [X8 + 0xB8]
	0x0391EA5C LDP D9, D8, [X31 + 0x10]
	0x0391EA60 LDR V0, [X8]
	0x0391EA64 ADRP X8, 0xFFFFFFFFFD1CC000
	0x0391EA68 LDR V6, [X8 + 0x240]
	0x0391EA6C FMUL S7, S0, S1
	0x0391EA70 FMAXNM S0, S3, S2
	0x0391EA74 FMUL S0, S0, S6
	0x0391EA78 FCMP S0, S7
	0x0391EA7C FABD S1, S2, S2
	0x0391EA80 FCSEL S0, S0, S7, GT
	0x0391EA84 FCMP S1, S0
	0x0391EA88 FMAXNM S0, S10, S2
	0x0391EA8C FMAXNM S1, S4, S2
	0x0391EA90 FMUL S0, S0, S6
	0x0391EA94 FMUL S6, S1, S6
	0x0391EA98 FCSEL S1, S5, S2, MI
	0x0391EA9C FCMP S0, S7
	0x0391EAA0 FABD S3, S2, S2
	0x0391EAA4 FCSEL S0, S0, S7, GT
	0x0391EAA8 FCMP S3, S0
	0x0391EAAC FCSEL S0, S5, S2, MI
	0x0391EAB0 FCMP S6, S7
	0x0391EAB4 FCSEL S3, S6, S7, GT
	0x0391EAB8 FABD S4, S2, S2
	0x0391EABC FCMP S4, S3
	0x0391EAC0 FCSEL S2, S5, S2, MI
	0x0391EAC4 LDR V10, [X31], #0x30
	0x0391EAC8 RET
	0x0391EACC SUB X31, X31, 0xF0
	0x0391EAD0 STP D15, D14, [X31 + 0x50]
	0x0391EAD4 STP D13, D12, [X31 + 0x60]
	0x0391EAD8 STP D11, D10, [X31 + 0x70]
	0x0391EADC STP D9, D8, [X31 + 0x80]
	0x0391EAE0 STP X29, X30, [X31 + 0x90]
	0x0391EAE4 STP X28, X27, [X31 + 0xA0]
	0x0391EAE8 STP X26, X25, [X31 + 0xB0]
	0x0391EAEC STP X24, X23, [X31 + 0xC0]
	0x0391EAF0 STP X22, X21, [X31 + 0xD0]
	0x0391EAF4 STP X20, X19, [X31 + 0xE0]
	0x0391EAF8 ADRP X20, 0xAC3000
	0x0391EAFC LDRB W8, [X20 + 0x8A4]
	0x0391EB00 MOV X19, X0
	0x0391EB04 STP S1, S0, [X31 + 0x34]
	0x0391EB08 STRB W1, [X31 + 0x48]
	0x0391EB0C TBNZ X8, 0x0, 0x391EB24
	0x0391EB10 ADRP X0, 0x830000
	0x0391EB14 LDR X0, [X0 + 0x6F0]
	0x0391EB18 BL 0x1C16CF4
	0x0391EB1C MOVZ W8, 0x1
	0x0391EB20 STRB W8, [X20 + 0x8A4]
	0x0391EB24 STRB W31, [X31 + 0x40]
	0x0391EB28 LDR V1, [X19]
	0x0391EB2C LDR V0, [X19 + 0x4]
	0x0391EB30 MOV X24, X19
	0x0391EB34 MOV X25, X19
	0x0391EB38 MOV X26, X19

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X21, 0xAC4000
	014 Move W8, [X21+2200]
	015 Move X20, X1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {50}
	021 Move X0, 0x831000
	022 Move X0, [X0+1704]
	023 Call 0x1C17CF4
	024 Move X0, 0x831000
	025 Move X0, [X0+1712]
	026 Call 0x1C17CF4
	027 Move X0, 0x830000
	028 Move X0, [X0+3392]
	029 Call 0x1C17CF4
	030 Move X0, 0x7D8000
	031 Move X0, [X0+2504]
	032 Call 0x1C17CF4
	033 Move X0, 0x831000
	034 Move X0, [X0+1720]
	035 Call 0x1C17CF4
	036 Move X0, 0x831000
	037 Move X0, [X0+1728]
	038 Call 0x1C17CF4
	039 Move X0, 0x831000
	040 Move X0, [X0+1736]
	041 Call 0x1C17CF4
	042 Move X0, 0x831000
	043 Move X0, [X0+1744]
	044 Call 0x1C17CF4
	045 Move X0, 0x831000
	046 Move X0, [X0+1320]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X21+2200], W8
	050 Move X22, 0x831000
	051 Move X22, [X22+1320]
	052 Compare X20, 0
	053 JumpIfEqual {104}
	054 Move X23, 0x7D8000
	055 Move X23, [X23+2504]
	056 Move X21, 0x831000
	057 Move X24, 0x831000
	058 Move X25, 0x831000
	059 Move X26, 0x831000
	060 Move X21, [X21+1728]
	061 Move X24, [X24+1736]
	062 Move X25, [X25+1712]
	063 Move X26, [X26+1720]
	064 Move X1, [X23]
	065 Move X27, 0x831000
	066 Move X28, 0x831000
	067 Move X29, 0x830000
	068 Move X27, [X27+1744]
	069 Move X28, [X28+1704]
	070 Move X29, [X29+3392]
	071 Move X0, X20
	072 Call Enumerable.ToArray, X0
	073 Move [X19+208], X0
	074 Move X20, X0
	075 Move X0, [X21]
	076 Call 0x1C17F10
	077 Move X2, [X24]
	078 Move X1, X19
	079 Move X3, X31
	080 Move X21, X0
	081 Call Func`2<Int32, Object>..ctor, X0, X1, X2
	082 Move X2, [X25]
	083 Move X0, X20
	084 Move X1, X21
	085 Call Enumerable.SelectMany, X0, X1
	086 Move X1, [X23]
	087 Call Enumerable.ToArray, X0
	088 Move [X19+224], X0
	089 Move X0, [X26]
	090 Move X20, [X19+208]
	091 Call 0x1C17F10
	092 Move X2, [X27]
	093 Move X1, X19
	094 Move X3, X31
	095 Move X21, X0
	096 Call Func`2<Int32, Object>..ctor, X0, X1, X2
	097 Move X2, [X28]
	098 Move X0, X20
	099 Move X1, X21
	100 Call 0x21D1E88, X0, X1
	101 Move X1, [X29]
	102 Call Enumerable.ToArray, X0
	103 Move [X19+216], X0
	104 Move X0, X19
	105 Call ProBuilderMesh.ClearSelection, X0
	106 Move W8, 1
	107 Move [X19+232], W8
	108 Move X0, [X22]
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {114}
	112 Call 0x1C17DFC
	113 Move X0, [X22]
	114 Move X8, [X0+184]
	115 Move X8, [X8+32]
	116 Compare X8, 0
	117 JumpIfEqual {144}
	118 Move W9, [X0+224]
	119 Compare W9, 0
	120 JumpIfNotEqual {127}
	121 Call 0x1C17DFC
	122 Move X8, [X22]
	123 Move X8, [X8+184]
	124 Move X8, [X8+32]
	125 Compare X8, 0
	126 JumpIfEqual {157}
	127 Move X3, [X8+24]
	128 Move X0, [X8+64]
	129 Move X2, [X8+40]
	130 Move X1, X19
	131 Move X20, [X31+80]
	132 Move X19, [X31+88]
	133 Move X22, [X31+64]
	134 Move X21, [X31+72]
	135 Move X24, [X31+48]
	136 Move X23, [X31+56]
	137 Move X26, [X31+32]
	138 Move X25, [X31+40]
	139 Move X28, [X31+16]
	140 Move X27, [X31+24]
	141 Move X29, [X31+96]
	142 Move X30, [X31+104]
	143 CallNoReturn X3
	144 Move X20, [X31+80]
	145 Move X19, [X31+88]
	146 Move X22, [X31+64]
	147 Move X21, [X31+72]
	148 Move X24, [X31+48]
	149 Move X23, [X31+56]
	150 Move X26, [X31+32]
	151 Move X25, [X31+40]
	152 Move X28, [X31+16]
	153 Move X27, [X31+24]
	154 Move X29, [X31+96]
	155 Move X30, [X31+104]
	156 Return 
	157 Call 0x1C17F20

Method: System.Void SetSelectedEdges(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Edge> edges)

Disassembly:
	0x0391EBF8 LDR X8, [X8]
	0x0391EBFC LDR X8, [X8 + 0xB8]
	0x0391EC00 LDR V1, [X8]
	0x0391EC04 LDR V0, [X8 + 0x4]
	0x0391EC08 STP S0, S1, [X31 + 0x28]
	0x0391EC0C LDR V0, [X8 + 0x8]
	0x0391EC10 STR S0, [X31 + 0x24]
	0x0391EC14 LDR V1, [X19]
	0x0391EC18 LDR V0, [X19 + 0x4]
	0x0391EC1C ADRP X8, 0xABA000
	0x0391EC20 LDRB W8, [X8 + 0x785]
	0x0391EC24 LDP S10, S9, [X19 + 0x10]
	0x0391EC28 STP S0, S1, [X31 + 0x4]
	0x0391EC2C LDP S0, S8, [X19 + 0x8]
	0x0391EC30 STR S0, [X31]
	0x0391EC34 CBNZ W8, 0x391EC50
	0x0391EC38 ADRP X0, 0x7D5000
	0x0391EC3C LDR X0, [X0 + 0x5A8]
	0x0391EC40 BL 0x1C16CF4
	0x0391EC44 MOVZ W8, 0x1
	0x0391EC48 ADRP X9, 0xABA000
	0x0391EC4C STRB W8, [X9 + 0x785]
	0x0391EC50 LDR X0, [X20]
	0x0391EC54 LDR W8, [X0 + 0xE0]
	0x0391EC58 CBNZ W8, 0x391EC60
	0x0391EC5C BL 0x1C16DFC
	0x0391EC60 FMUL S0, S8, S8
	0x0391EC64 FMUL S1, S10, S10
	0x0391EC68 FADD S0, S0, S1
	0x0391EC6C FMUL S1, S9, S9
	0x0391EC70 FADD S0, S1, S0
	0x0391EC74 LDR V1, [X31 + 0x3C]
	0x0391EC78 FSQRT S0, S0
	0x0391EC7C FCMP S0, S1
	0x0391EC80 B.LE 0x391ECA4
	0x0391EC84 FNEG S1, S8
	0x0391EC88 FNEG S2, S10
	0x0391EC8C FNEG S3, S9
	0x0391EC90 FDIV S4, S1, S0
	0x0391EC94 FDIV S1, S2, S0
	0x0391EC98 STP S1, S4, [X31 + 0x1C]
	0x0391EC9C FDIV S0, S3, S0
	0x0391ECA0 B 0x391ECE0
	0x0391ECA4 LDRB W8, [X28 + 0x783]
	0x0391ECA8 CBNZ W8, 0x391ECC0
	0x0391ECAC ADRP X0, 0x7D5000
	0x0391ECB0 LDR X0, [X0 + 0x5A0]
	0x0391ECB4 BL 0x1C16CF4
	0x0391ECB8 MOVZ W8, 0x1
	0x0391ECBC STRB W8, [X28 + 0x783]
	0x0391ECC0 ADRP X8, 0x7D5000
	0x0391ECC4 LDR X8, [X8 + 0x5A0]
	0x0391ECC8 LDR X8, [X8]
	0x0391ECCC LDR X8, [X8 + 0xB8]
	0x0391ECD0 LDR V1, [X8]
	0x0391ECD4 LDR V0, [X8 + 0x4]
	0x0391ECD8 STP S0, S1, [X31 + 0x1C]
	0x0391ECDC LDR V0, [X8 + 0x8]
	0x0391ECE0 STR S0, [X31 + 0x18]
	0x0391ECE4 ADRP X29, 0x830000
	0x0391ECE8 ADRP X9, 0xFFFFFFFFFD1CB000
	0x0391ECEC ADRP X23, 0x7DC000
	0x0391ECF0 LDR X29, [X29 + 0x6F0]
	0x0391ECF4 LDR X23, [X23 + 0x4B8]
	0x0391ECF8 LDR V12, [X9 + 0xF28]
	0x0391ECFC MOVZ W8, 0x7F800000
	0x0391ED00 MOV W22, W31
	0x0391ED04 MOVZ W27, 0x1
	0x0391ED08 ADRP X21, 0xAC3000
	0x0391ED0C FMOV S0, W8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xAC4000
	007 Move W8, [X21+2201]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x830000
	015 Move X0, [X0+3392]
	016 Call 0x1C17CF4
	017 Move X0, 0x7D7000
	018 Move X0, [X0+3672]
	019 Call 0x1C17CF4
	020 Move X0, 0x831000
	021 Move X0, [X0+1320]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2201], W8
	025 Move X21, 0x831000
	026 Move X21, [X21+1320]
	027 Compare X20, 0
	028 JumpIfEqual {44}
	029 Move X8, 0x7D7000
	030 Move X8, [X8+3672]
	031 Move X22, 0x830000
	032 Move W1, W31
	033 Move X0, [X8]
	034 Move X22, [X22+3392]
	035 Call 0x1C17D6C
	036 Move [X19+208], X0
	037 Move X1, [X22]
	038 Move X0, X20
	039 Call Enumerable.ToArray, X0
	040 Move X1, X31
	041 Move [X19+216], X0
	042 Call EdgeUtility.AllTriangles, X0
	043 Move [X19+224], X0
	044 Move X0, X19
	045 Call ProBuilderMesh.ClearSelection, X0
	046 Move W8, 1
	047 Move [X19+232], W8
	048 Move X0, [X21]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {54}
	052 Call 0x1C17DFC
	053 Move X0, [X21]
	054 Move X8, [X0+184]
	055 Move X8, [X8+32]
	056 Compare X8, 0
	057 JumpIfEqual {77}
	058 Move W9, [X0+224]
	059 Compare W9, 0
	060 JumpIfNotEqual {67}
	061 Call 0x1C17DFC
	062 Move X8, [X21]
	063 Move X8, [X8+184]
	064 Move X8, [X8+32]
	065 Compare X8, 0
	066 JumpIfEqual {83}
	067 Move X3, [X8+24]
	068 Move X0, [X8+64]
	069 Move X2, [X8+40]
	070 Move X1, X19
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X22, [X31+16]
	074 Move X21, [X31+24]
	075 Move X30, [X31+48]
	076 CallNoReturn X3
	077 Move X20, [X31+32]
	078 Move X19, [X31+40]
	079 Move X22, [X31+16]
	080 Move X21, [X31+24]
	081 Move X30, [X31+48]
	082 Return 
	083 Call 0x1C17F20

Method: System.Void SetSelectedVertices(System.Collections.Generic.IEnumerable`1<System.Int32> vertices)

Disassembly:
	0x0391ED10 STR S12, [X31 + 0x30]
	0x0391ED14 LDR X0, [X29]
	0x0391ED18 MOV V8.16B, V0.16B
	0x0391ED1C LDR W8, [X0 + 0xE0]
	0x0391ED20 CBNZ W8, 0x391ED28
	0x0391ED24 BL 0x1C16DFC
	0x0391ED28 ADD X0, X31, 0x48
	0x0391ED2C MOV W1, W22
	0x0391ED30 MOV X2, X31
	0x0391ED34 BL 0x393D6CC
	0x0391ED38 FCMP S0, 0x0
	0x0391ED3C B.LE 0x391F100
	0x0391ED40 LDR X0, [X29]
	0x0391ED44 LDR W8, [X0 + 0xE0]
	0x0391ED48 CBNZ W8, 0x391ED50
	0x0391ED4C BL 0x1C16DFC
	0x0391ED50 LSLV W8, W27, W22
	0x0391ED54 AND W0, W8, 0xFF
	0x0391ED58 MOV X1, X31
	0x0391ED5C BL 0x393D328
	0x0391ED60 ADD X0, X31, 0x40
	0x0391ED64 FMOV S3, W27
	0x0391ED68 MOV X1, X31
	0x0391ED6C BL 0x393D1C0
	0x0391ED70 LDR V0, [X31 + 0x38]
	0x0391ED74 LDR V14, [X24]
	0x0391ED78 LDR V15, [X25]
	0x0391ED7C LDR V10, [X26]
	0x0391ED80 MOV V1.16B, V12.16B
	0x0391ED84 MOV X0, X31
	0x0391ED88 BL 0x390B4D4
	0x0391ED8C LDRB W0, [X31 + 0x40]
	0x0391ED90 MOV V9.16B, V0.16B
	0x0391ED94 MOV X8, X24
	0x0391ED98 CBZ W22, 0x391EDB4
	0x0391ED9C CMP W22, 0x2
	0x0391EDA0 MOV X8, X26
	0x0391EDA4 B.EQ 0x391EDB4
	0x0391EDA8 CMP W22, 0x1
	0x0391EDAC MOV X8, X25
	0x0391EDB0 B.NE 0x391F17C
	0x0391EDB4 LDR V0, [X8]
	0x0391EDB8 FMOV S1, 1
	0x0391EDBC MOV X1, X31
	0x0391EDC0 FCMP S0, 0x0
	0x0391EDC4 FMOV S0, -1
	0x0391EDC8 FCSEL S0, S1, S0, GE
	0x0391EDCC BL 0x393D3F4
	0x0391EDD0 LDRB W8, [X21 + 0x8C7]
	0x0391EDD4 MOV V13.16B, V0.16B
	0x0391EDD8 MOV V11.16B, V1.16B
	0x0391EDDC MOV V12.16B, V2.16B
	0x0391EDE0 CBNZ W8, 0x391EDF0
	0x0391EDE4 MOV X0, X23
	0x0391EDE8 BL 0x1C16CF4
	0x0391EDEC STRB W27, [X21 + 0x8C7]
	0x0391EDF0 LDR X8, [X23]
	0x0391EDF4 FMUL S0, S13, S13
	0x0391EDF8 FMUL S1, S11, S11
	0x0391EDFC FADD S0, S0, S1
	0x0391EE00 LDR X8, [X8 + 0xB8]
	0x0391EE04 FMUL S1, S12, S12
	0x0391EE08 FADD S2, S1, S0
	0x0391EE0C LDR V3, [X8]
	0x0391EE10 FCMP S2, S3
	0x0391EE14 B.PL 0x391EE4C
	0x0391EE18 LDRB W8, [X28 + 0x783]
	0x0391EE1C CBNZ W8, 0x391EE30
	0x0391EE20 ADRP X0, 0x7D5000
	0x0391EE24 LDR X0, [X0 + 0x5A0]
	0x0391EE28 BL 0x1C16CF4
	0x0391EE2C STRB W27, [X28 + 0x783]
	0x0391EE30 ADRP X8, 0x7D5000
	0x0391EE34 LDR X8, [X8 + 0x5A0]
	0x0391EE38 LDR X8, [X8]
	0x0391EE3C LDR X8, [X8 + 0xB8]
	0x0391EE40 LDP S0, S1, [X8]
	0x0391EE44 LDR V2, [X8 + 0x8]
	0x0391EE48 B 0x391EE84
	0x0391EE4C FMUL S0, S14, S9
	0x0391EE50 FMUL S1, S15, S9
	0x0391EE54 FMUL S3, S10, S9
	0x0391EE58 FMUL S0, S0, S13
	0x0391EE5C FMUL S1, S1, S11

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xAC4000
	008 Move X22, 0x7D7000
	009 Move X23, 0x831000
	010 Move W8, [X21+2202]
	011 Move X22, [X22+3672]
	012 Move X23, [X23+1344]
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {36}
	019 Move X0, 0x831000
	020 Move X0, [X0+1344]
	021 Call 0x1C17CF4
	022 Move X0, 0x801000
	023 Move X0, [X0+3000]
	024 Call 0x1C17CF4
	025 Move X0, 0x7D8000
	026 Move X0, [X0+2504]
	027 Call 0x1C17CF4
	028 Move X0, 0x7D7000
	029 Move X0, [X0+3672]
	030 Call 0x1C17CF4
	031 Move X0, 0x831000
	032 Move X0, [X0+1320]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X21+2202], W8
	036 Move X0, [X22]
	037 Move X21, 0x831000
	038 Move X21, [X21+1320]
	039 Move W1, W31
	040 Call 0x1C17D6C
	041 Move [X19+208], X0
	042 Move X0, [X23]
	043 Move W1, W31
	044 Call 0x1C17D6C
	045 Move [X19+216], X0
	046 Compare X20, 0
	047 JumpIfEqual {57}
	048 Move X8, 0x801000
	049 Move X8, [X8+3000]
	050 Move X22, 0x7D8000
	051 Move X0, X20
	052 Move X1, [X8]
	053 Move X22, [X22+2504]
	054 Call Enumerable.Distinct, X0
	055 Move X1, [X22]
	056 Call Enumerable.ToArray, X0
	057 Move X0, [X22]
	058 Move W1, W31
	059 Call 0x1C17D6C
	060 Move W8, 1
	061 Move [X19+224], X0
	062 Move [X19+232], W8
	063 Move X0, [X21]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {69}
	067 Call 0x1C17DFC
	068 Move X0, [X21]
	069 Move X8, [X0+184]
	070 Move X8, [X8+32]
	071 Compare X8, 0
	072 JumpIfEqual {93}
	073 Move W9, [X0+224]
	074 Compare W9, 0
	075 JumpIfNotEqual {82}
	076 Call 0x1C17DFC
	077 Move X8, [X21]
	078 Move X8, [X8+184]
	079 Move X8, [X8+32]
	080 Compare X8, 0
	081 JumpIfEqual {100}
	082 Move X3, [X8+24]
	083 Move X0, [X8+64]
	084 Move X2, [X8+40]
	085 Move X1, X19
	086 Move X20, [X31+32]
	087 Move X19, [X31+40]
	088 Move X22, [X31+16]
	089 Move X21, [X31+24]
	090 Move X30, [X31+48]
	091 Move X23, [X31+56]
	092 CallNoReturn X3
	093 Move X20, [X31+32]
	094 Move X19, [X31+40]
	095 Move X22, [X31+16]
	096 Move X21, [X31+24]
	097 Move X30, [X31+48]
	098 Move X23, [X31+56]
	099 Return 
	100 Call 0x1C17F20

Method: System.Void RemoveFromFaceSelectionAtIndex(System.Int32 index)

Disassembly:
	0x0391EE60 FMUL S3, S3, S12
	0x0391EE64 FADD S0, S0, S1
	0x0391EE68 FADD S0, S3, S0
	0x0391EE6C FMUL S1, S13, S0
	0x0391EE70 FMUL S3, S11, S0
	0x0391EE74 FMUL S4, S12, S0
	0x0391EE78 FDIV S0, S1, S2
	0x0391EE7C FDIV S1, S3, S2
	0x0391EE80 FDIV S2, S4, S2
	0x0391EE84 LDP S3, S4, [X19]
	0x0391EE88 LDR V5, [X19 + 0x8]
	0x0391EE8C LDRB W0, [X31 + 0x40]
	0x0391EE90 MOV X1, X31
	0x0391EE94 FADD S11, S0, S3
	0x0391EE98 FADD S12, S1, S4
	0x0391EE9C FADD S13, S2, S5
	0x0391EEA0 BL 0x393D328
	0x0391EEA4 MOV V14.16B, V0.16B
	0x0391EEA8 LDRB W0, [X31 + 0x40]
	0x0391EEAC LDR V0, [X31 + 0x34]
	0x0391EEB0 MOV X1, X31
	0x0391EEB4 MOV V15.16B, V1.16B
	0x0391EEB8 MOV V9.16B, V2.16B
	0x0391EEBC BL 0x393D3F4
	0x0391EEC0 MOV V3.16B, V0.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xAC4000
	007 Move X21, 0x831000
	008 Move W8, [X22+2203]
	009 Move X21, [X21+1760]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x831000
	017 Move X0, [X0+1760]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2203], W8
	021 Move X0, [X19+208]
	022 Move X2, [X21]
	023 Move W1, W20
	024 Call 0x2180BE4, X0, X1
	025 Move X1, X0
	026 Move X0, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X22, [X31+16]
	030 Move X21, [X31+24]
	031 Move X30, [X31+48]
	032 Call ProBuilderMesh.SetSelectedFaces, X0, X1
	033 Return 

Method: System.Void ClearSelection()

Disassembly:
	0x03919CAC MOV X0, X19
	0x03919CB0 BL 0x3912CAC
	0x03919CB4 CBZ X0, 0x3919D8C
	0x03919CB8 MOV X1, X31
	0x03919CBC BL 0x3C0F650
	0x03919CC0 LDR X8, [X24]
	0x03919CC4 MOV W22, W0
	0x03919CC8 LDR W9, [X8 + 0xE0]
	0x03919CCC CBNZ W9, 0x3919CDC
	0x03919CD0 MOV X0, X8
	0x03919CD4 BL 0x1C16DFC
	0x03919CD8 LDR X8, [X24]
	0x03919CDC LDR X8, [X8 + 0xB8]
	0x03919CE0 LDR X0, [X8]
	0x03919CE4 CBZ X0, 0x3919D8C
	0x03919CE8 ADRP X9, 0x835000
	0x03919CEC LDR W8, [X0 + 0x18]
	0x03919CF0 LDR X9, [X9 + 0x588]
	0x03919CF4 SUB W2, W21, W22
	0x03919CF8 SUB W1, W8, W2
	0x03919CFC LDR X3, [X9]
	0x03919D00 BL 0x301DAD8
	0x03919D04 B 0x3919D0C
	0x03919D08 TBZ X28, 0x0, 0x3919D60
	0x03919D0C MOV X0, X19
	0x03919D10 BL 0x3912AD8
	0x03919D14 LDR X8, [X24]
	0x03919D18 MOV X21, X0
	0x03919D1C LDR W9, [X8 + 0xE0]
	0x03919D20 CBNZ W9, 0x3919D30
	0x03919D24 MOV X0, X8
	0x03919D28 BL 0x1C16DFC
	0x03919D2C LDR X8, [X24]
	0x03919D30 LDR X8, [X8 + 0xB8]
	0x03919D34 LDR X0, [X8]
	0x03919D38 CBZ X0, 0x3919D8C
	0x03919D3C ADRP X8, 0x7E1000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xAC9000
	007 Move X20, 0x7DC000
	008 Move X21, 0x836000
	009 Move W8, [X22+2204]
	010 Move X20, [X20+3672]
	011 Move X21, [X21+1344]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x836000
	018 Move X0, [X0+1344]
	019 Call 0x1C17CF4
	020 Move X0, 0x7DC000
	021 Move X0, [X0+3672]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2204], W8
	025 Move X0, [X20]
	026 Move W1, W31
	027 Call 0x1C17D6C
	028 Move [X19+208], X0
	029 Move X0, [X21]
	030 Move W1, W31
	031 Call 0x1C17D6C
	032 Move [X19+216], X0
	033 Move X0, [X20]
	034 Move W1, W31
	035 Call 0x1C17D6C
	036 Move W8, 1
	037 Move [X19+224], X0
	038 Move [X19+232], W8
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 

Method: System.Void .ctor()

Disassembly:
	0x0391EEC4 MOV V4.16B, V1.16B
	0x0391EEC8 MOV V5.16B, V2.16B
	0x0391EECC MOV V0.16B, V11.16B
	0x0391EED0 MOV V1.16B, V12.16B
	0x0391EED4 MOV V2.16B, V13.16B
	0x0391EED8 BL 0x391E590
	0x0391EEDC ADRP X8, 0xABA000
	0x0391EEE0 LDRB W8, [X8 + 0x785]
	0x0391EEE4 MOV V11.16B, V0.16B
	0x0391EEE8 MOV V12.16B, V1.16B
	0x0391EEEC MOV V13.16B, V2.16B
	0x0391EEF0 CBNZ W8, 0x391EF04
	0x0391EEF4 MOV X0, X20
	0x0391EEF8 BL 0x1C16CF4
	0x0391EEFC ADRP X8, 0xABA000
	0x0391EF00 STRB W27, [X8 + 0x785]
	0x0391EF04 LDR X0, [X20]
	0x0391EF08 LDR W8, [X0 + 0xE0]
	0x0391EF0C CBNZ W8, 0x391EF14
	0x0391EF10 BL 0x1C16DFC
	0x0391EF14 FMUL S0, S14, S14
	0x0391EF18 FMUL S1, S15, S15
	0x0391EF1C FADD S0, S0, S1
	0x0391EF20 FMUL S1, S9, S9
	0x0391EF24 FADD S0, S1, S0
	0x0391EF28 LDR V1, [X31 + 0x3C]
	0x0391EF2C FSQRT S0, S0
	0x0391EF30 FCMP S0, S1
	0x0391EF34 B.LE 0x391EF48
	0x0391EF38 FDIV S14, S14, S0
	0x0391EF3C FDIV S15, S15, S0
	0x0391EF40 FDIV S9, S9, S0
	0x0391EF44 B 0x391EF78
	0x0391EF48 LDRB W8, [X28 + 0x783]
	0x0391EF4C CBNZ W8, 0x391EF60
	0x0391EF50 ADRP X0, 0x7D5000
	0x0391EF54 LDR X0, [X0 + 0x5A0]
	0x0391EF58 BL 0x1C16CF4
	0x0391EF5C STRB W27, [X28 + 0x783]
	0x0391EF60 ADRP X8, 0x7D5000
	0x0391EF64 LDR X8, [X8 + 0x5A0]
	0x0391EF68 LDR X8, [X8]
	0x0391EF6C LDR X8, [X8 + 0xB8]
	0x0391EF70 LDP S14, S15, [X8]
	0x0391EF74 LDR V9, [X8 + 0x8]
	0x0391EF78 FMUL S0, S11, S14
	0x0391EF7C FMUL S1, S12, S15
	0x0391EF80 FMUL S2, S13, S9
	0x0391EF84 FADD S0, S0, S1
	0x0391EF88 LDP S1, S3, [X19]
	0x0391EF8C FADD S11, S2, S0
	0x0391EF90 LDR V0, [X19 + 0x8]
	0x0391EF94 LDR V12, [X31 + 0x30]
	0x0391EF98 FMUL S1, S14, S1
	0x0391EF9C FMUL S2, S15, S3
	0x0391EFA0 FADD S1, S1, S2
	0x0391EFA4 FMUL S0, S9, S0
	0x0391EFA8 FADD S0, S0, S1
	0x0391EFAC FABD S0, S0, S0
	0x0391EFB0 FCMP S0, S12
	0x0391EFB4 FMOV S0, W31
	0x0391EFB8 B.MI 0x391F104
	0x0391EFBC ADRP X8, 0xABB000
	0x0391EFC0 LDRB W8, [X8 + 0x5AA]
	0x0391EFC4 CBNZ W8, 0x391EFD8
	0x0391EFC8 MOV X0, X23
	0x0391EFCC BL 0x1C16CF4
	0x0391EFD0 ADRP X8, 0xABB000
	0x0391EFD4 STRB W27, [X8 + 0x5AA]
	0x0391EFD8 LDR V0, [X31 + 0x2C]
	0x0391EFDC LDR X8, [X23]
	0x0391EFE0 ADRP X9, 0xFFFFFFFFFD1CC000
	0x0391EFE4 FMOV S4, W31
	0x0391EFE8 FMUL S1, S0, S14
	0x0391EFEC LDR V0, [X31 + 0x28]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X26, 0xAC4000
	011 Move X24, 0x7D7000
	012 Move X25, 0x831000
	013 Move X23, 0x7D7000
	014 Move X20, 0x7DD000
	015 Move X22, 0x7D7000
	016 Move X21, 0x7DA000
	017 Move X24, [X24+3672]
	018 Move W8, [X26+2205]
	019 Move X25, [X25+1344]
	020 Move X23, [X23+3592]
	021 Move X20, [X20+1672]
	022 Move X22, [X22+3632]
	023 Move X21, [X21+2928]
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {49}
	029 Move X0, 0x831000
	030 Move X0, [X0+1344]
	031 Call 0x1C17CF4
	032 Move X0, 0x7DD000
	033 Move X0, [X0+1672]
	034 Call 0x1C17CF4
	035 Move X0, 0x7D7000
	036 Move X0, [X0+3592]
	037 Call 0x1C17CF4
	038 Move X0, 0x7D7000
	039 Move X0, [X0+3672]
	040 Call 0x1C17CF4
	041 Move X0, 0x7DA000
	042 Move X0, [X0+2928]
	043 Call 0x1C17CF4
	044 Move X0, 0x7D7000
	045 Move X0, [X0+3632]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X26+2205], W8
	049 Move W8, 1
	050 Move [X19+204], W8
	051 Move X0, [X24]
	052 Move W1, W31
	053 Call 0x1C17D6C
	054 Move [X19+208], X0
	055 Move X0, [X25]
	056 Move W1, W31
	057 Call 0x1C17D6C
	058 Move [X19+216], X0
	059 Move X0, [X24]
	060 Move W1, W31
	061 Call 0x1C17D6C
	062 Move [X19+224], X0
	063 Move X0, [X23]
	064 Call 0x1C17F10
	065 Move X1, [X20]
	066 Move X20, X0
	067 Call HashSet`1<Int32>..ctor, X0
	068 Move [X19+248], X20
	069 Move X0, [X22]
	070 Call 0x1C17F10
	071 Move X1, [X21]
	072 Move X20, X0
	073 Call List`1<Int32>..ctor, X0
	074 Move [X19+256], X20
	075 Move X0, X19
	076 Move X20, [X31+64]
	077 Move X19, [X31+72]
	078 Move X22, [X31+48]
	079 Move X21, [X31+56]
	080 Move X24, [X31+32]
	081 Move X23, [X31+40]
	082 Move X26, [X31+16]
	083 Move X25, [X31+24]
	084 Move X1, X31
	085 Move X30, [X31+80]
	086 Call MonoBehaviour..ctor, X0
	087 Return 

Method: System.Void .cctor()

Disassembly:
	0x0391EFF0 LDR X8, [X8 + 0xB8]
	0x0391EFF4 FMOV S5, 8
	0x0391EFF8 FMUL S2, S0, S15
	0x0391EFFC LDR V0, [X31 + 0x24]
	0x0391F000 FADD S1, S1, S2
	0x0391F004 FMUL S3, S0, S9
	0x0391F008 LDR V0, [X9 + 0x240]
	0x0391F00C FADD S2, S3, S1
	0x0391F010 LDR V1, [X8]
	0x0391F014 FABS S3, S2
	0x0391F018 FMAXNM S3, S3, S4
	0x0391F01C FMUL S3, S3, S0
	0x0391F020 FMUL S1, S1, S5
	0x0391F024 FCMP S3, S1
	0x0391F028 FCSEL S3, S3, S1, GT
	0x0391F02C FABD S4, S4, S4
	0x0391F030 FCMP S4, S3
	0x0391F034 B.MI 0x391F078
	0x0391F038 LDP S4, S3, [X31 + 0x10]
	0x0391F03C FMUL S3, S3, S14
	0x0391F040 FMUL S4, S4, S15
	0x0391F044 FADD S3, S3, S4
	0x0391F048 LDR V4, [X31 + 0xC]
	0x0391F04C FMUL S4, S4, S9
	0x0391F050 FADD S3, S4, S3
	0x0391F054 FSUB S3, S11, S3
	0x0391F058 FDIV S2, S3, S2
	0x0391F05C FCMP S2, 0x0
	0x0391F060 B.LE 0x391F078
	0x0391F064 FABS S3, S2
	0x0391F068 FABS S4, S8
	0x0391F06C FCMP S3, S4
	0x0391F070 B.PL 0x391F078
	0x0391F074 MOV V8.16B, V2.16B
	0x0391F078 LDP S3, S2, [X31 + 0x1C]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xAC4000
	007 Move X22, 0x7D6000
	008 Move X19, 0x7DC000
	009 Move X20, 0x830000
	010 Move W8, [X21+2206]
	011 Move X22, [X22+3592]
	012 Move X19, [X19+1672]
	013 Move X20, [X20+1320]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x7DC000
	019 Move X0, [X0+1672]
	020 Call 0x1C17CF4
	021 Move X0, 0x7D6000
	022 Move X0, [X0+3592]
	023 Call 0x1C17CF4
	024 Move X0, 0x830000
	025 Move X0, [X0+1320]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+2206], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X1, [X19]
	032 Move X19, X0
	033 Call HashSet`1<Int32>..ctor, X0
	034 Move X8, [X20]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X8, [X8+184]
	038 Move [X8+40], X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

Method: System.Int32 <set_selectedFacesInternal>b__231_0(UnityEngine.ProBuilder.Face x)

Disassembly:
	0x0391F07C LDR V4, [X31 + 0x18]
	0x0391F080 FMUL S2, S2, S14
	0x0391F084 FMUL S3, S3, S15
	0x0391F088 FMUL S4, S4, S9
	0x0391F08C FADD S2, S2, S3
	0x0391F090 FADD S2, S4, S2
	0x0391F094 FABS S3, S2
	0x0391F098 FMOV S4, W31
	0x0391F09C FMAXNM S3, S3, S4
	0x0391F0A0 FMUL S0, S3, S0
	0x0391F0A4 FCMP S0, S1
	0x0391F0A8 FCSEL S0, S0, S1, GT
	0x0391F0AC FABD S1, S4, S4
	0x0391F0B0 FCMP S1, S0
	0x0391F0B4 B.MI 0x391F100
	0x0391F0B8 LDP S0, S3, [X31]
	0x0391F0BC LDR V1, [X31 + 0x8]
	0x0391F0C0 FMUL S3, S3, S15
	0x0391F0C4 FMUL S1, S1, S14
	0x0391F0C8 FMUL S0, S0, S9
	0x0391F0CC FADD S1, S1, S3
	0x0391F0D0 FADD S0, S0, S1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xAC3000
	007 Move X21, 0x830000
	008 Move W8, [X22+2207]
	009 Move X21, [X21+1768]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x830000
	017 Move X0, [X0+1768]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2207], W8
	021 Move X0, [X20+40]
	022 Move X2, [X21]
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call Array.IndexOf, X0, X1
	030 Return X0

Method: System.Int32 <SetSelectedFaces>b__245_0(UnityEngine.ProBuilder.Face x)

Disassembly:
	0x0391F0D4 FSUB S0, S11, S0
	0x0391F0D8 FDIV S1, S0, S2
	0x0391F0DC FCMP S1, 0x0
	0x0391F0E0 B.LE 0x391F100
	0x0391F0E4 FABS S0, S1
	0x0391F0E8 FABS S2, S8
	0x0391F0EC FCMP S0, S2
	0x0391F0F0 MOV V0.16B, V8.16B
	0x0391F0F4 B.PL 0x391F104
	0x0391F0F8 FNEG S0, S1
	0x0391F0FC B 0x391F104
	0x0391F100 MOV V0.16B, V8.16B
	0x0391F104 ADD W22, W22, 0x1
	0x0391F108 CMP W22, 0x3
	0x0391F10C B.NE 0x391ED14
	0x0391F110 MOVZ W8, 0x7F800000
	0x0391F114 FABS S5, S0
	0x0391F118 FMOV S6, W8
	0x0391F11C FCMP S5, S6
	0x0391F120 LDR V5, [X31 + 0x38]
	0x0391F124 LDUR V3, [X19 + 0xC]
	0x0391F128 LDR V1, [X19]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xAC3000
	007 Move X21, 0x830000
	008 Move W8, [X22+2208]
	009 Move X21, [X21+1768]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x830000
	017 Move X0, [X0+1768]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2208], W8
	021 Move X0, [X20+40]
	022 Move X2, [X21]
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call Array.IndexOf, X0, X1
	030 Return X0

Method: System.Collections.Generic.IEnumerable`1<System.Int32> <SetSelectedFaces>b__246_0(System.Int32 x)

Disassembly:
	0x0391F12C LDR V4, [X19 + 0x14]
	0x0391F130 LDR V2, [X19 + 0x8]
	0x0391F134 FCSEL S0, S0, S5, LT
	0x0391F138 LDP X20, X19, [X31 + 0xE0]
	0x0391F13C LDP X22, X21, [X31 + 0xD0]
	0x0391F140 LDP X24, X23, [X31 + 0xC0]
	0x0391F144 LDP X26, X25, [X31 + 0xB0]
	0x0391F148 LDP X28, X27, [X31 + 0xA0]
	0x0391F14C LDP X29, X30, [X31 + 0x90]
	0x0391F150 LDP D9, D8, [X31 + 0x80]
	0x0391F154 LDP D11, D10, [X31 + 0x70]
	0x0391F158 LDP D13, D12, [X31 + 0x60]
	0x0391F15C LDP D15, D14, [X31 + 0x50]
	0x00000000 INVALID

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+40]
	003 Compare X8, 0
	004 JumpIfEqual {15}
	005 Move W9, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Add X8, X8, W1
	008 Move X0, [X8+32]
	009 Compare X0, 0
	010 JumpIfEqual {15}
	011 Move X1, X31
	012 Move X30, [X31+16]
	013 Call Face.get_distinctIndexesInternal, X0
	014 Return X0
	015 Call 0x1C17F20
	016 Call 0x1C17F28

Method: System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Edge> <SetSelectedFaces>b__246_1(System.Int32 x)

Disassembly:
	0x0391F164 FMUL S4, S0, S4
	0x0391F168 FADD V0.2S, V1.2S, V3.2S
	0x0391F16C FADD S2, S2, S4
	0x0391F170 MOV S1, V0.S[1]
	0x0391F174 ADD X31, X31, 0xF0
	0x0391F178 RET
	0x0391F17C ADRP X0, 0x7DE000
	0x0391F180 LDR X0, [X0 + 0xF78]
	0x0391F184 BL 0x1C16D08
	0x0391F188 BL 0x1C16F10
	0x0391F18C MOV X19, X0
	0x0391F190 ADRP X0, 0x82F000
	0x0391F194 LDR X0, [X0 + 0x6F8]
	0x0391F198 BL 0x1C16D08

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+40]
	003 Compare X8, 0
	004 JumpIfEqual {15}
	005 Move W9, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Add X8, X8, W1
	008 Move X0, [X8+32]
	009 Compare X0, 0
	010 JumpIfEqual {15}
	011 Move X1, X31
	012 Move X30, [X31+16]
	013 Call Face.get_edges, X0
	014 Return X0
	015 Call 0x1C17F20
	016 Call 0x1C17F28

