Type: TMPro.MaterialReferenceManager

Method: TMPro.MaterialReferenceManager get_instance()

Disassembly:
	0x03ACBB60 LDRB W8, [X20 + 0x4C1]
	0x03ACBB64 LDR X21, [X21 + 0x598]
	0x03ACBB68 MOV X19, X0
	0x03ACBB6C TBNZ X8, 0x0, 0x3ACBB84
	0x03ACBB70 ADRP X0, 0x628000
	0x03ACBB74 LDR X0, [X0 + 0x598]
	0x03ACBB78 BL 0x1C16CF4
	0x03ACBB7C MOVZ W8, 0x1
	0x03ACBB80 STRB W8, [X20 + 0x4C1]
	0x03ACBB84 MOV X0, X19
	0x03ACBB88 BL 0x3ACC08C
	0x03ACBB8C LDR X0, [X21]
	0x03ACBB90 LDR X20, [X19 + 0x68]
	0x03ACBB94 LDR W8, [X0 + 0xE0]
	0x03ACBB98 CBNZ W8, 0x3ACBBA0
	0x03ACBB9C BL 0x1C16DFC
	0x03ACBBA0 MOV X0, X20
	0x03ACBBA4 MOV X1, X31
	0x03ACBBA8 MOV X2, X31
	0x03ACBBAC BL 0x3C354F8
	0x03ACBBB0 TBZ X0, 0x0, 0x3ACBBDC
	0x03ACBBB4 LDR X0, [X19 + 0x68]
	0x03ACBBB8 CBZ X0, 0x3ACBC5C
	0x03ACBBBC LDP S0, S1, [X19 + 0x38]
	0x03ACBBC0 MOV X1, X31
	0x03ACBBC4 BL 0x3C3E99C
	0x03ACBBC8 LDR X0, [X19 + 0x68]
	0x03ACBBCC CBZ X0, 0x3ACBC5C
	0x03ACBBD0 MOVZ W1, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x918000
	005 Move X20, 0x68E000
	006 Move W8, [X19+1198]
	007 Move X20, [X20+1184]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x68E000
	013 Move X0, [X0+1184]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1198], W8
	017 Move X0, [X20]
	018 Move X8, [X0+184]
	019 Move X8, [X8]
	020 Compare X8, 0
	021 JumpIfNotEqual {31}
	022 Call 0x1C17F10
	023 Move X19, X0
	024 Call MaterialReferenceManager..ctor, X0
	025 Move X8, [X20]
	026 Move X8, [X8+184]
	027 Move [X8], X19
	028 Move X8, [X20]
	029 Move X8, [X8+184]
	030 Move X8, [X8]
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X0, X8
	034 Move X30, [X31+32]
	035 Return X0

Method: System.Void AddFontAsset(TMPro.TMP_FontAsset fontAsset)

Disassembly:
	0x03ACBD28 LDR V4, [X0 + 0x30]
	0x03ACBD2C FCMP S4, S0
	0x03ACBD30 B.NE 0x3ACBD5C
	0x03ACBD34 LDR V4, [X0 + 0x3C]
	0x03ACBD38 FCMP S4, S3
	0x03ACBD3C B.NE 0x3ACBD5C
	0x03ACBD40 LDR V4, [X0 + 0x38]
	0x03ACBD44 FCMP S4, S2

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MaterialReferenceManager.get_instance
	005 Compare X0, 0
	006 JumpIfEqual {10}
	007 Move X1, X19
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Call 0x1C17F20

Method: System.Void AddFontAssetInternal(TMPro.TMP_FontAsset fontAsset)

Disassembly:
	0x03ACBD48 B.NE 0x3ACBD5C
	0x03ACBD4C LDR V4, [X0 + 0x34]
	0x03ACBD50 FCMP S4, S1
	0x03ACBD54 B.NE 0x3ACBD5C
	0x03ACBD58 RET
	0x03ACBD5C MOVZ W8, 0x1
	0x03ACBD60 STP S0, S1, [X0 + 0x30]
	0x03ACBD64 STP S2, S3, [X0 + 0x38]
	0x03ACBD68 STRB W8, [X0 + 0x20]
	0x03ACBD6C B 0x3ACBB50
	0x03ACBD70 LDP S0, S1, [X0 + 0x38]
	0x03ACBD74 RET
	0x03ACBD78 LDP S2, S3, [X0 + 0x38]
	0x03ACBD7C ADRP X8, 0xFFFFFFFFFD01E000
	0x03ACBD80 LDR V4, [X8 + 0xF20]
	0x03ACBD84 FSUB S2, S2, S0
	0x03ACBD88 FSUB S3, S3, S1
	0x03ACBD8C FMUL S2, S2, S2
	0x03ACBD90 FMUL S3, S3, S3
	0x03ACBD94 FADD S2, S2, S3
	0x03ACBD98 FCMP S2, S4
	0x03ACBD9C B.MI 0x3ACBDB4
	0x03ACBDA0 MOVZ W8, 0x1
	0x03ACBDA4 STP S0, S1, [X0 + 0x38]
	0x03ACBDA8 STRB W8, [X0 + 0x20]
	0x03ACBDAC STRH W31, [X0 + 0x40]
	0x03ACBDB0 B 0x3ACBB50
	0x03ACBDB4 RET
	0x03ACBDB8 STP S0, S1, [X0 + 0x38]
	0x03ACBDBC RET
	0x03ACBDC0 LDR V0, [X0 + 0x38]
	0x03ACBDC4 RET
	0x03ACBDC8 MOVZ W8, 0x1
	0x03ACBDCC STR S0, [X0 + 0x38]
	0x03ACBDD0 STRB W8, [X0 + 0x20]
	0x03ACBDD4 STRB W31, [X0 + 0x40]
	0x03ACBDD8 B 0x3ACBB50
	0x03ACBDDC LDR V0, [X0 + 0x3C]
	0x03ACBDE0 RET
	0x03ACBDE4 MOVZ W8, 0x1
	0x03ACBDE8 STR S0, [X0 + 0x3C]
	0x03ACBDEC STRB W8, [X0 + 0x20]
	0x03ACBDF0 STRB W31, [X0 + 0x41]
	0x03ACBDF4 B 0x3ACBB50
	0x03ACBDF8 LDRB W0, [X0 + 0x40]
	0x03ACBDFC RET
	0x03ACBE00 LDRB W0, [X0 + 0x41]
	0x03ACBE04 RET
	0x03ACBE08 LDRB W0, [X0 + 0x42]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x918000
	006 Move W8, [X21+1199]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x68E000
	014 Move X0, [X0+1256]
	015 Call 0x1C17CF4
	016 Move X0, 0x68E000
	017 Move X0, [X0+1264]
	018 Call 0x1C17CF4
	019 Move X0, 0x68E000
	020 Move X0, [X0+1272]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1199], W8
	024 Compare X19, 0
	025 JumpIfEqual {66}
	026 Move X0, [X20+24]
	027 Compare X0, 0
	028 JumpIfEqual {66}
	029 Move X8, 0x68E000
	030 Move X8, [X8+1272]
	031 Move W1, [X19+28]
	032 Move X2, [X8]
	033 Call Dictionary`2<Int32, Object>.ContainsKey, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {43}
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return 
	043 Move X0, [X20+24]
	044 Compare X0, 0
	045 JumpIfEqual {66}
	046 Move X8, 0x68E000
	047 Move W1, [X19+28]
	048 Move X8, [X8+1256]
	049 Move X2, X19
	050 Move X3, [X8]
	051 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	052 Move X0, [X20+16]
	053 Compare X0, 0
	054 JumpIfEqual {66}
	055 Move X8, 0x68E000
	056 Move X2, [X19+32]
	057 Move W1, [X19+40]
	058 Move X8, [X8+1264]
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X3, [X8]
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	065 Return 
	066 Call 0x1C17F20

Method: System.Void AddSpriteAsset(TMPro.TMP_SpriteAsset spriteAsset)

Disassembly:
	0x03ACBE0C RET
	0x03ACBE10 AND W8, W1, 0x1
	0x03ACBE14 STRB W8, [X0 + 0x42]
	0x03ACBE18 RET
	0x03ACBE1C LDR X0, [X0 + 0x48]
	0x03ACBE20 RET
	0x03ACBE24 LDR X0, [X0 + 0x50]
	0x03ACBE28 RET

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MaterialReferenceManager.get_instance
	005 Compare X0, 0
	006 JumpIfEqual {10}
	007 Move X1, X19
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Call 0x1C17F20

Method: System.Void AddSpriteAssetInternal(TMPro.TMP_SpriteAsset spriteAsset)

Disassembly:
	0x03ACBE2C LDP S0, S1, [X0 + 0x58]
	0x03ACBE30 LDP S2, S3, [X0 + 0x60]
	0x03ACBE34 RET
	0x03ACBE38 LDP S4, S5, [X0 + 0x58]
	0x03ACBE3C LDP S6, S7, [X0 + 0x60]
	0x03ACBE40 ADRP X8, 0xFFFFFFFFFD01E000
	0x03ACBE44 FSUB S4, S4, S0
	0x03ACBE48 FSUB S5, S5, S1
	0x03ACBE4C FMUL S4, S4, S4
	0x03ACBE50 FMUL S5, S5, S5
	0x03ACBE54 FADD S4, S4, S5
	0x03ACBE58 LDR V5, [X8 + 0xF20]
	0x03ACBE5C FSUB S6, S6, S2
	0x03ACBE60 FSUB S7, S7, S3
	0x03ACBE64 FMUL S6, S6, S6
	0x03ACBE68 FADD S4, S6, S4
	0x03ACBE6C FMUL S6, S7, S7
	0x03ACBE70 FADD S4, S6, S4
	0x03ACBE74 FCMP S4, S5
	0x03ACBE78 B.MI 0x3ACBE90
	0x03ACBE7C MOVZ W8, 0x1
	0x03ACBE80 STP S0, S1, [X0 + 0x58]
	0x03ACBE84 STP S2, S3, [X0 + 0x60]
	0x03ACBE88 STRB W8, [X0 + 0x20]
	0x03ACBE8C B 0x3ACBB50
	0x03ACBE90 RET
	0x03ACBE94 STP X30, X21, [X31 - 0x20]!
	0x03ACBE98 STP X20, X19, [X31 + 0x10]
	0x03ACBE9C ADRP X21, 0x917000
	0x03ACBEA0 ADRP X20, 0x628000
	0x03ACBEA4 LDRB W8, [X21 + 0x4BE]
	0x03ACBEA8 LDR X20, [X20 + 0x598]
	0x03ACBEAC MOV X19, X0
	0x03ACBEB0 TBNZ X8, 0x0, 0x3ACBED4
	0x03ACBEB4 ADRP X0, 0x62A000
	0x03ACBEB8 LDR X0, [X0 + 0x6B8]
	0x03ACBEBC BL 0x1C16CF4
	0x03ACBEC0 ADRP X0, 0x628000
	0x03ACBEC4 LDR X0, [X0 + 0x598]
	0x03ACBEC8 BL 0x1C16CF4
	0x03ACBECC MOVZ W8, 0x1
	0x03ACBED0 STRB W8, [X21 + 0x4BE]
	0x03ACBED4 LDR X0, [X20]
	0x03ACBED8 LDR X20, [X19 + 0x68]
	0x03ACBEDC LDR W8, [X0 + 0xE0]
	0x03ACBEE0 CBNZ W8, 0x3ACBEE8
	0x03ACBEE4 BL 0x1C16DFC
	0x03ACBEE8 MOV X0, X20
	0x03ACBEEC MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x918000
	006 Move W8, [X21+1200]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x68E000
	014 Move X0, [X0+1280]
	015 Call 0x1C17CF4
	016 Move X0, 0x68E000
	017 Move X0, [X0+1264]
	018 Call 0x1C17CF4
	019 Move X0, 0x68E000
	020 Move X0, [X0+1288]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1200], W8
	024 Compare X19, 0
	025 JumpIfEqual {66}
	026 Move X0, [X20+32]
	027 Compare X0, 0
	028 JumpIfEqual {66}
	029 Move X8, 0x68E000
	030 Move X8, [X8+1288]
	031 Move W1, [X19+28]
	032 Move X2, [X8]
	033 Call Dictionary`2<Int32, Object>.ContainsKey, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {43}
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return 
	043 Move X0, [X20+32]
	044 Compare X0, 0
	045 JumpIfEqual {66}
	046 Move X8, 0x68E000
	047 Move W1, [X19+28]
	048 Move X8, [X8+1280]
	049 Move X2, X19
	050 Move X3, [X8]
	051 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	052 Move X0, [X20+16]
	053 Compare X0, 0
	054 JumpIfEqual {66}
	055 Move X8, 0x68E000
	056 Move X2, [X19+32]
	057 Move W1, [X19+28]
	058 Move X8, [X8+1264]
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X3, [X8]
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	065 Return 
	066 Call 0x1C17F20

Method: System.Void AddSpriteAsset(System.Int32 hashCode, TMPro.TMP_SpriteAsset spriteAsset)

Disassembly:
	0x03ACBEF0 MOV X2, X31
	0x03ACBEF4 BL 0x3C3883C
	0x03ACBEF8 TBZ X0, 0x0, 0x3ACBF18
	0x03ACBEFC ADRP X8, 0x62A000
	0x03ACBF00 LDR X8, [X8 + 0x6B8]
	0x03ACBF04 MOV X0, X19
	0x03ACBF08 LDR X1, [X8]
	0x03ACBF0C BL 0x21A3894
	0x03ACBF10 STR X0, [X19 + 0x68]
	0x03ACBF14 B 0x3ACBF1C
	0x03ACBF18 LDR X0, [X19 + 0x68]
	0x03ACBF1C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move W20, W0
	006 Call MaterialReferenceManager.get_instance
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move W1, W20
	010 Move X2, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Call 0x1C17F20

Method: System.Void AddSpriteAssetInternal(System.Int32 hashCode, TMPro.TMP_SpriteAsset spriteAsset)

Disassembly:
	0x03ACBF20 LDP X30, X21, [X31], #0x20
	0x03ACBF24 RET
	0x03ACBF28 STP X30, X21, [X31 - 0x20]!
	0x03ACBF2C STP X20, X19, [X31 + 0x10]
	0x03ACBF30 ADRP X21, 0x917000
	0x03ACBF34 ADRP X20, 0x628000
	0x03ACBF38 LDRB W8, [X21 + 0x4BF]
	0x03ACBF3C LDR X20, [X20 + 0x598]
	0x03ACBF40 MOV X19, X0
	0x03ACBF44 TBNZ X8, 0x0, 0x3ACBF68
	0x03ACBF48 ADRP X0, 0x68D000
	0x03ACBF4C LDR X0, [X0 + 0x548]
	0x03ACBF50 BL 0x1C16CF4
	0x03ACBF54 ADRP X0, 0x628000
	0x03ACBF58 LDR X0, [X0 + 0x598]
	0x03ACBF5C BL 0x1C16CF4
	0x03ACBF60 MOVZ W8, 0x1
	0x03ACBF64 STRB W8, [X21 + 0x4BF]
	0x03ACBF68 LDR X0, [X20]
	0x03ACBF6C LDR X20, [X19 + 0x70]
	0x03ACBF70 LDR W8, [X0 + 0xE0]
	0x03ACBF74 CBNZ W8, 0x3ACBF7C
	0x03ACBF78 BL 0x1C16DFC
	0x03ACBF7C MOV X0, X20
	0x03ACBF80 MOV X1, X31
	0x03ACBF84 MOV X2, X31
	0x03ACBF88 BL 0x3C3883C
	0x03ACBF8C TBZ X0, 0x0, 0x3ACBFAC
	0x03ACBF90 ADRP X8, 0x68D000
	0x03ACBF94 LDR X8, [X8 + 0x548]
	0x03ACBF98 MOV X0, X19
	0x03ACBF9C LDR X1, [X8]
	0x03ACBFA0 BL 0x21A3894
	0x03ACBFA4 STR X0, [X19 + 0x70]
	0x03ACBFA8 B 0x3ACBFB0
	0x03ACBFAC LDR X0, [X19 + 0x70]
	0x03ACBFB0 LDP X20, X19, [X31 + 0x10]
	0x03ACBFB4 LDP X30, X21, [X31], #0x20
	0x03ACBFB8 RET
	0x03ACBFBC STR X30, [X31 - 0x30]!
	0x03ACBFC0 STP X22, X21, [X31 + 0x10]
	0x03ACBFC4 STP X20, X19, [X31 + 0x20]
	0x03ACBFC8 ADRP X20, 0x917000
	0x03ACBFCC LDRB W8, [X20 + 0x4C0]
	0x03ACBFD0 MOV X19, X0
	0x03ACBFD4 TBNZ X8, 0x0, 0x3ACC004
	0x03ACBFD8 ADRP X0, 0x628000
	0x03ACBFDC LDR X0, [X0 + 0xA28]
	0x03ACBFE0 BL 0x1C16CF4
	0x03ACBFE4 ADRP X0, 0x650000
	0x03ACBFE8 LDR X0, [X0 + 0x6F8]
	0x03ACBFEC BL 0x1C16CF4
	0x03ACBFF0 ADRP X0, 0x68D000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x918000
	007 Move W8, [X22+1201]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x68E000
	016 Move X0, [X0+1280]
	017 Call 0x1C17CF4
	018 Move X0, 0x68E000
	019 Move X0, [X0+1264]
	020 Call 0x1C17CF4
	021 Move X0, 0x68E000
	022 Move X0, [X0+1288]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+1201], W8
	026 Move X0, [X21+32]
	027 Compare X0, 0
	028 JumpIfEqual {68}
	029 Move X8, 0x68E000
	030 Move X8, [X8+1288]
	031 Move W1, W20
	032 Move X2, [X8]
	033 Call Dictionary`2<Int32, Object>.ContainsKey, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {62}
	038 Move X0, [X21+32]
	039 Compare X0, 0
	040 JumpIfEqual {68}
	041 Move X8, 0x68E000
	042 Move X8, [X8+1280]
	043 Move W1, W20
	044 Move X2, X19
	045 Move X3, [X8]
	046 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	047 Compare X19, 0
	048 JumpIfEqual {68}
	049 Move X0, [X21+16]
	050 Compare X0, 0
	051 JumpIfEqual {68}
	052 Move X8, 0x68E000
	053 Move X2, [X19+32]
	054 Move X8, [X8+1264]
	055 Move W1, W20
	056 Move X3, [X8]
	057 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	058 Move W8, [X19+28]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Move [X19+28], W20
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X30, [X31+48]
	067 Return 
	068 Call 0x1C17F20

Method: System.Void AddFontMaterial(System.Int32 hashCode, UnityEngine.Material material)

Disassembly:
	0x03ACBFF4 LDR X0, [X0 + 0x550]
	0x03ACBFF8 BL 0x1C16CF4
	0x03ACBFFC MOVZ W8, 0x1
	0x03ACC000 STRB W8, [X20 + 0x4C0]
	0x03ACC004 MOV X0, X19
	0x03ACC008 MOV X1, X31
	0x03ACC00C BL 0x3C32ECC
	0x03ACC010 CBZ X0, 0x3ACC080
	0x03ACC014 ADRP X20, 0x68C000
	0x03ACC018 ADRP X21, 0x64F000
	0x03ACC01C ADRP X22, 0x627000
	0x03ACC020 LDR X20, [X20 + 0x550]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move W20, W0
	006 Call MaterialReferenceManager.get_instance
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move W1, W20
	010 Move X2, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Call 0x1C17F20

Method: System.Void AddFontMaterialInternal(System.Int32 hashCode, UnityEngine.Material material)

Disassembly:
	0x03ACC024 LDR X21, [X21 + 0x6F8]
	0x03ACC028 LDR X22, [X22 + 0xA28]
	0x03ACC02C MOV X1, X31
	0x03ACC030 BL 0x3C389D4
	0x03ACC034 LDR X8, [X20]
	0x03ACC038 LDR X2, [X21]
	0x03ACC03C MOV X1, X0
	0x03ACC040 MOV X3, X31
	0x03ACC044 MOV X0, X8
	0x03ACC048 BL 0x32274B8
	0x03ACC04C LDR X8, [X22]
	0x03ACC050 MOV X20, X0
	0x03ACC054 LDR W9, [X8 + 0xE0]
	0x03ACC058 CBNZ W9, 0x3ACC064
	0x03ACC05C MOV X0, X8
	0x03ACC060 BL 0x1C16DFC
	0x03ACC064 MOV X0, X20
	0x03ACC068 MOV X1, X19
	0x03ACC06C LDP X20, X19, [X31 + 0x20]
	0x03ACC070 LDP X22, X21, [X31 + 0x10]
	0x03ACC074 MOV X2, X31
	0x03ACC078 LDR X30, [X31], #0x30
	0x03ACC07C B 0x3C06B0C
	0x03ACC080 BL 0x1C16F20
	0x03ACC084 B 0x3ACBB50
	0x03ACC088 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x917000
	007 Move W8, [X22+1202]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x68D000
	016 Move X0, [X0+1264]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1202], W8
	020 Move X0, [X21+16]
	021 Compare X0, 0
	022 JumpIfEqual {35}
	023 Move X8, 0x68D000
	024 Move X8, [X8+1264]
	025 Move W1, W20
	026 Move X2, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X3, [X8]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]
	033 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	034 Return 
	035 Call 0x1C17F20

Method: System.Void AddColorGradientPreset(System.Int32 hashCode, TMPro.TMP_ColorGradient spriteAsset)

Disassembly:
	0x03ACC08C STR X30, [X31 - 0x20]!
	0x03ACC090 STP X20, X19, [X31 + 0x10]
	0x03ACC094 ADRP X20, 0x916000
	0x03ACC098 LDRB W8, [X20 + 0x4C3]
	0x03ACC09C MOV X19, X0
	0x03ACC0A0 TBNZ X8, 0x0, 0x3ACC0B8
	0x03ACC0A4 ADRP X0, 0x627000
	0x03ACC0A8 LDR X0, [X0 + 0x598]
	0x03ACC0AC BL 0x1C16CF4
	0x03ACC0B0 MOVZ W8, 0x1
	0x03ACC0B4 STRB W8, [X20 + 0x4C3]
	0x03ACC0B8 LDR X8, [X19 + 0x48]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move W20, W0
	006 Call MaterialReferenceManager.get_instance
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move W1, W20
	010 Move X2, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Call 0x1C17F20

Method: System.Void AddColorGradientPreset_Internal(System.Int32 hashCode, TMPro.TMP_ColorGradient spriteAsset)

Disassembly:
	0x03ACC0BC CBZ X8, 0x3ACC1D8
	0x03ACC0C0 LDR W9, [X8 + 0x18]
	0x03ACC0C4 CBZ W9, 0x3ACC1DC
	0x03ACC0C8 LDUR V0, [X19 + 0x24]
	0x03ACC0CC LDR V1, [X19 + 0x38]
	0x03ACC0D0 STR W31, [X8 + 0x28]
	0x03ACC0D4 UNIMPLEMENTED
	0x00000000 INVALID
	0x03ACC0DC STR D0, [X8 + 0x20]
	0x03ACC0E0 LDR X8, [X19 + 0x48]
	0x03ACC0E4 CBZ X8, 0x3ACC1D8
	0x03ACC0E8 LDR W9, [X8 + 0x18]
	0x03ACC0EC CMP W9, 0x1
	0x03ACC0F0 B.LS 0x3ACC1DC
	0x03ACC0F4 LDP S0, S1, [X19 + 0x24]
	0x03ACC0F8 LDR V2, [X19 + 0x38]
	0x03ACC0FC FMOV S3, 1
	0x03ACC100 STR W31, [X8 + 0x34]
	0x03ACC104 FNEG S0, S0
	0x03ACC108 FSUB S1, S3, S1
	0x03ACC10C MOV V0.S[1], V1.S[0]
	0x00000000 INVALID
	0x03ACC114 STUR D0, [X8 + 0x2C]
	0x03ACC118 LDR X8, [X19 + 0x48]
	0x03ACC11C CBZ X8, 0x3ACC1D8
	0x03ACC120 LDR W9, [X8 + 0x18]
	0x03ACC124 CMP W9, 0x2
	0x03ACC128 B.LS 0x3ACC1DC
	0x03ACC12C LDUR V0, [X19 + 0x24]
	0x03ACC130 LDR V1, [X19 + 0x38]
	0x03ACC134 FMOV V2.2S, 0x0
	0x03ACC138 STR W31, [X8 + 0x40]
	0x03ACC13C FSUB V0.2S, V2.2S, V0.2S
	0x00000000 INVALID
	0x03ACC144 STR D0, [X8 + 0x38]
	0x03ACC148 LDR X8, [X19 + 0x48]
	0x03ACC14C CBZ X8, 0x3ACC1D8
	0x03ACC150 LDR W9, [X8 + 0x18]
	0x03ACC154 CMP W9, 0x3
	0x03ACC158 B.LS 0x3ACC1DC
	0x03ACC15C ADRP X9, 0x627000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x917000
	007 Move W8, [X22+1203]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x68D000
	016 Move X0, [X0+1296]
	017 Call 0x1C17CF4
	018 Move X0, 0x68D000
	019 Move X0, [X0+1304]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1203], W8
	023 Move X0, [X21+40]
	024 Compare X0, 0
	025 JumpIfEqual {56}
	026 Move X8, 0x68D000
	027 Move X8, [X8+1304]
	028 Move W1, W20
	029 Move X2, [X8]
	030 Call Dictionary`2<Int32, Object>.ContainsKey, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {41}
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return 
	041 Move X0, [X21+40]
	042 Compare X0, 0
	043 JumpIfEqual {56}
	044 Move X8, 0x68D000
	045 Move X8, [X8+1296]
	046 Move W1, W20
	047 Move X2, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X3, [X8]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	055 Return 
	056 Call 0x1C17F20

Method: System.Boolean Contains(TMPro.TMP_FontAsset font)

Disassembly:
	0x03ACC160 LDR X9, [X9 + 0x598]
	0x03ACC164 LDP S0, S1, [X19 + 0x24]
	0x03ACC168 LDR V2, [X19 + 0x38]
	0x03ACC16C FMOV S3, 1
	0x03ACC170 STR W31, [X8 + 0x4C]
	0x03ACC174 FSUB S0, S3, S0
	0x03ACC178 FNEG S1, S1
	0x03ACC17C MOV V0.S[1], V1.S[0]
	0x00000000 INVALID
	0x03ACC184 STUR D0, [X8 + 0x44]
	0x03ACC188 LDR X0, [X9]
	0x03ACC18C LDR X20, [X19 + 0x68]
	0x03ACC190 LDR W8, [X0 + 0xE0]
	0x03ACC194 CBNZ W8, 0x3ACC19C
	0x03ACC198 BL 0x1C16DFC
	0x03ACC19C MOV X0, X20
	0x03ACC1A0 MOV X1, X31
	0x03ACC1A4 MOV X2, X31
	0x03ACC1A8 BL 0x3C354F8
	0x03ACC1AC TBZ X0, 0x0, 0x3ACC1CC
	0x03ACC1B0 LDR X0, [X19 + 0x68]
	0x03ACC1B4 CBZ X0, 0x3ACC1D8
	0x03ACC1B8 LDP S0, S1, [X19 + 0x24]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x917000
	006 Move W8, [X21+1204]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x68D000
	014 Move X0, [X0+1272]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1204], W8
	018 Compare X19, 0
	019 JumpIfEqual {33}
	020 Move X0, [X20+24]
	021 Compare X0, 0
	022 JumpIfEqual {33}
	023 Move X8, 0x68D000
	024 Move X8, [X8+1272]
	025 Move W1, [X19+28]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X2, [X8]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Dictionary`2<Int32, Object>.ContainsKey, X0, X1
	032 Return X0
	033 Call 0x1C17F20

Method: System.Boolean Contains(TMPro.TMP_SpriteAsset sprite)

Disassembly:
	0x03ACC1BC LDP X20, X19, [X31 + 0x10]
	0x03ACC1C0 MOV X1, X31
	0x03ACC1C4 LDR X30, [X31], #0x20
	0x03ACC1C8 B 0x3C3EAB8
	0x03ACC1CC LDP X20, X19, [X31 + 0x10]
	0x03ACC1D0 LDR X30, [X31], #0x20
	0x03ACC1D4 RET
	0x03ACC1D8 BL 0x1C16F20
	0x03ACC1DC BL 0x1C16F28
	0x03ACC1E0 STP D9, D8, [X31 - 0x30]!
	0x03ACC1E4 STP X30, X21, [X31 + 0x10]
	0x03ACC1E8 STP X20, X19, [X31 + 0x20]
	0x03ACC1EC ADRP X21, 0x916000
	0x03ACC1F0 ADRP X20, 0x627000
	0x03ACC1F4 LDRB W8, [X21 + 0x4C2]
	0x03ACC1F8 LDR X20, [X20 + 0x598]
	0x03ACC1FC MOV X19, X0
	0x03ACC200 TBNZ X8, 0x0, 0x3ACC230
	0x03ACC204 ADRP X0, 0x68C000
	0x03ACC208 LDR X0, [X0 + 0x558]
	0x03ACC20C BL 0x1C16CF4
	0x03ACC210 ADRP X0, 0x627000
	0x03ACC214 LDR X0, [X0 + 0x598]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x917000
	006 Move W8, [X21+1205]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x68D000
	014 Move X0, [X0+1272]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1205], W8
	018 Compare X19, 0
	019 JumpIfEqual {33}
	020 Move X0, [X20+24]
	021 Compare X0, 0
	022 JumpIfEqual {33}
	023 Move X8, 0x68D000
	024 Move X8, [X8+1272]
	025 Move W1, [X19+28]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X2, [X8]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Dictionary`2<Int32, Object>.ContainsKey, X0, X1
	032 Return X0
	033 Call 0x1C17F20

Method: System.Boolean TryGetFontAsset(System.Int32 hashCode, out TMPro.TMP_FontAsset fontAsset)

Disassembly:
	0x03ACC218 BL 0x1C16CF4
	0x03ACC21C ADRP X0, 0x68C000
	0x03ACC220 LDR X0, [X0 + 0x560]
	0x03ACC224 BL 0x1C16CF4
	0x03ACC228 MOVZ W8, 0x1
	0x03ACC22C STRB W8, [X21 + 0x4C2]
	0x03ACC230 MOV X0, X19
	0x03ACC234 BL 0x3ACBE94
	0x03ACC238 LDR X8, [X20]
	0x03ACC23C MOV X20, X0
	0x03ACC240 LDR W9, [X8 + 0xE0]
	0x03ACC244 CBNZ W9, 0x3ACC250

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move W20, W0
	006 Call MaterialReferenceManager.get_instance
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move W1, W20
	010 Move X2, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Call 0x1C17F20

Method: System.Boolean TryGetFontAssetInternal(System.Int32 hashCode, out TMPro.TMP_FontAsset fontAsset)

Disassembly:
	0x03ACC248 MOV X0, X8
	0x03ACC24C BL 0x1C16DFC
	0x03ACC250 MOV X0, X20
	0x03ACC254 MOV X1, X31
	0x03ACC258 MOV X2, X31
	0x03ACC25C BL 0x3C3883C
	0x03ACC260 TBZ X0, 0x0, 0x3ACC28C
	0x03ACC264 MOV X0, X19
	0x03ACC268 MOV X1, X31
	0x03ACC26C BL 0x3C32ECC
	0x03ACC270 CBZ X0, 0x3ACC338
	0x03ACC274 ADRP X8, 0x68C000
	0x03ACC278 LDR X8, [X8 + 0x558]
	0x03ACC27C LDR X1, [X8]
	0x03ACC280 BL 0x21E51FC
	0x03ACC284 STR X0, [X19 + 0x68]
	0x03ACC288 B 0x3ACC290
	0x03ACC28C LDR X0, [X19 + 0x68]
	0x03ACC290 CBZ X0, 0x3ACC338
	0x03ACC294 ADRP X20, 0x68C000
	0x03ACC298 LDR X20, [X20 + 0x560]
	0x03ACC29C MOV X1, X31
	0x03ACC2A0 BL 0x3C3E90C
	0x03ACC2A4 LDR X0, [X20]
	0x03ACC2A8 MOV V8.16B, V0.16B
	0x03ACC2AC MOV V9.16B, V1.16B
	0x03ACC2B0 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x917000
	007 Move W8, [X22+1206]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x68D000
	016 Move X0, [X0+1312]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1206], W8
	020 Move [X19], X31
	021 Move X0, [X21+24]
	022 Compare X0, 0
	023 JumpIfEqual {36}
	024 Move X8, 0x68D000
	025 Move X8, [X8+1312]
	026 Move W1, W20
	027 Move X2, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X3, [X8]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Call Dictionary`2<Int32, Object>.TryGetValue, X0, X1, X2
	035 Return X0
	036 Call 0x1C17F20

Method: System.Boolean TryGetSpriteAsset(System.Int32 hashCode, out TMPro.TMP_SpriteAsset spriteAsset)

Disassembly:
	0x03ACC2B4 CBNZ W8, 0x3ACC2C0
	0x03ACC2B8 BL 0x1C16DFC
	0x03ACC2BC LDR X0, [X20]
	0x03ACC2C0 LDR X8, [X0 + 0xB8]
	0x03ACC2C4 LDP S0, S1, [X8]
	0x03ACC2C8 ADRP X8, 0xFFFFFFFFFD01D000
	0x03ACC2CC LDR V2, [X8 + 0xF20]
	0x03ACC2D0 FSUB S0, S8, S0
	0x03ACC2D4 FSUB S1, S9, S1
	0x03ACC2D8 FMUL S0, S0, S0
	0x03ACC2DC FMUL S1, S1, S1
	0x03ACC2E0 FADD S0, S0, S1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move W20, W0
	006 Call MaterialReferenceManager.get_instance
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move W1, W20
	010 Move X2, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Call 0x1C17F20

Method: System.Boolean TryGetSpriteAssetInternal(System.Int32 hashCode, out TMPro.TMP_SpriteAsset spriteAsset)

Disassembly:
	0x03ACC2E4 FCMP S0, S2
	0x03ACC2E8 B.MI 0x3ACC304
	0x03ACC2EC LDR X0, [X19 + 0x68]
	0x03ACC2F0 CBZ X0, 0x3ACC338
	0x03ACC2F4 MOV X1, X31
	0x03ACC2F8 BL 0x3C3E90C
	0x03ACC2FC MOV X0, X19
	0x03ACC300 BL 0x3ACBD78
	0x03ACC304 LDR X0, [X19 + 0x68]
	0x03ACC308 CBZ X0, 0x3ACC338
	0x03ACC30C MOV X1, X31
	0x03ACC310 BL 0x3C3EA28
	0x03ACC314 MOV X0, X19
	0x03ACC318 BL 0x3ACBA00
	0x03ACC31C MOVZ W8, 0x1
	0x03ACC320 STRB W8, [X19 + 0x20]
	0x03ACC324 MOV X0, X19
	0x03ACC328 LDP X20, X19, [X31 + 0x20]
	0x03ACC32C LDP X30, X21, [X31 + 0x10]
	0x03ACC330 LDP D9, D8, [X31], #0x30
	0x03ACC334 B 0x3ACBB50
	0x03ACC338 BL 0x1C16F20
	0x03ACC33C STP X30, X21, [X31 - 0x20]!
	0x03ACC340 STP X20, X19, [X31 + 0x10]
	0x03ACC344 ADRP X21, 0x916000
	0x03ACC348 ADRP X20, 0x629000
	0x03ACC34C LDRB W8, [X21 + 0x4C4]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x917000
	007 Move W8, [X22+1207]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x68D000
	016 Move X0, [X0+1320]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1207], W8
	020 Move [X19], X31
	021 Move X0, [X21+32]
	022 Compare X0, 0
	023 JumpIfEqual {36}
	024 Move X8, 0x68D000
	025 Move X8, [X8+1320]
	026 Move W1, W20
	027 Move X2, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X3, [X8]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Call Dictionary`2<Int32, Object>.TryGetValue, X0, X1, X2
	035 Return X0
	036 Call 0x1C17F20

Method: System.Boolean TryGetColorGradientPreset(System.Int32 hashCode, out TMPro.TMP_ColorGradient gradientPreset)

Disassembly:
	0x03ACC350 LDR X20, [X20 + 0x9B0]
	0x03ACC354 MOV X19, X0
	0x03ACC358 TBNZ X8, 0x0, 0x3ACC370
	0x03ACC35C ADRP X0, 0x629000
	0x03ACC360 LDR X0, [X0 + 0x9B0]
	0x03ACC364 BL 0x1C16CF4
	0x03ACC368 MOVZ W8, 0x1
	0x03ACC36C STRB W8, [X21 + 0x4C4]
	0x03ACC370 MOVZ W8, 0x4
	0x03ACC374 STR W8, [X19 + 0x2C]
	0x03ACC378 LDR X0, [X20]
	0x03ACC37C MOVZ W1, 0x4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move W20, W0
	006 Call MaterialReferenceManager.get_instance
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move W1, W20
	010 Move X2, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Call 0x1C17F20

Method: System.Boolean TryGetColorGradientPresetInternal(System.Int32 hashCode, out TMPro.TMP_ColorGradient gradientPreset)

Disassembly:
	0x03ACC380 BL 0x1C16D6C
	0x03ACC384 STR X0, [X19 + 0x48]
	0x03ACC388 LDR X0, [X20]
	0x03ACC38C MOVZ W1, 0x4
	0x03ACC390 BL 0x1C16D6C
	0x03ACC394 STR X0, [X19 + 0x50]
	0x03ACC398 MOV X0, X19
	0x03ACC39C LDP X20, X19, [X31 + 0x10]
	0x03ACC3A0 MOV X1, X31
	0x03ACC3A4 LDP X30, X21, [X31], #0x20
	0x03ACC3A8 B 0x3E4E160
	0x03ACC3AC STR X30, [X31 - 0x20]!
	0x03ACC3B0 STP X20, X19, [X31 + 0x10]
	0x03ACC3B4 ADRP X19, 0x916000
	0x03ACC3B8 ADRP X20, 0x68C000
	0x03ACC3BC LDRB W8, [X19 + 0x4C5]
	0x03ACC3C0 LDR X20, [X20 + 0x560]
	0x03ACC3C4 TBNZ X8, 0x0, 0x3ACC3DC
	0x03ACC3C8 ADRP X0, 0x68C000
	0x03ACC3CC LDR X0, [X0 + 0x560]
	0x03ACC3D0 BL 0x1C16CF4
	0x03ACC3D4 MOVZ W8, 0x1
	0x03ACC3D8 STRB W8, [X19 + 0x4C5]
	0x03ACC3DC LDR X8, [X20]
	0x03ACC3E0 LDP X20, X19, [X31 + 0x10]
	0x03ACC3E4 MOVZ W9, 0x42C80000
	0x03ACC3E8 UNIMPLEMENTED

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x917000
	007 Move W8, [X22+1208]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x68D000
	016 Move X0, [X0+1328]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1208], W8
	020 Move [X19], X31
	021 Move X0, [X21+40]
	022 Compare X0, 0
	023 JumpIfEqual {36}
	024 Move X8, 0x68D000
	025 Move X8, [X8+1328]
	026 Move W1, W20
	027 Move X2, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X3, [X8]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Call Dictionary`2<Int32, Object>.TryGetValue, X0, X1, X2
	035 Return X0
	036 Call 0x1C17F20

Method: System.Boolean TryGetMaterial(System.Int32 hashCode, out UnityEngine.Material material)

Disassembly:
	0x03ACC3EC LDR X8, [X8 + 0xB8]
	0x03ACC3F0 STR D0, [X8]
	0x03ACC3F4 LDR X30, [X31], #0x20
	0x03ACC3F8 RET
	0x03ACC3FC STP X30, X21, [X31 - 0x20]!
	0x03ACC400 STP X20, X19, [X31 + 0x10]
	0x03ACC404 ADRP X21, 0x916000
	0x03ACC408 ADRP X20, 0x627000
	0x03ACC40C LDRB W8, [X21 + 0x4C6]
	0x03ACC410 LDR X20, [X20 + 0x598]
	0x03ACC414 MOV X19, X0
	0x03ACC418 TBNZ X8, 0x0, 0x3ACC430

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move W20, W0
	006 Call MaterialReferenceManager.get_instance
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move W1, W20
	010 Move X2, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Call 0x1C17F20

Method: System.Boolean TryGetMaterialInternal(System.Int32 hashCode, out UnityEngine.Material material)

Disassembly:
	0x03ACC41C ADRP X0, 0x627000
	0x03ACC420 LDR X0, [X0 + 0x598]
	0x03ACC424 BL 0x1C16CF4
	0x03ACC428 MOVZ W8, 0x1
	0x03ACC42C STRB W8, [X21 + 0x4C6]
	0x03ACC430 MOV X0, X19
	0x03ACC434 BL 0x3ACC490
	0x03ACC438 LDR X8, [X20]
	0x03ACC43C MOV X20, X0
	0x03ACC440 LDR W9, [X8 + 0xE0]
	0x03ACC444 CBNZ W9, 0x3ACC450
	0x03ACC448 MOV X0, X8
	0x03ACC44C BL 0x1C16DFC
	0x03ACC450 MOV X0, X20
	0x03ACC454 MOV X1, X31
	0x03ACC458 MOV X2, X31
	0x03ACC45C BL 0x3C3883C
	0x03ACC460 TBZ X0, 0x0, 0x3ACC474
	0x03ACC464 LDP X20, X19, [X31 + 0x10]
	0x03ACC468 MOV W0, W31
	0x03ACC46C LDP X30, X21, [X31], #0x20
	0x03ACC470 RET
	0x03ACC474 LDR X0, [X19 + 0x6E8]
	0x03ACC478 CBZ X0, 0x3ACC48C
	0x03ACC47C LDP X20, X19, [X31 + 0x10]
	0x03ACC480 MOV X1, X31
	0x03ACC484 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x917000
	007 Move W8, [X22+1209]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x68D000
	016 Move X0, [X0+1336]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1209], W8
	020 Move [X19], X31
	021 Move X0, [X21+16]
	022 Compare X0, 0
	023 JumpIfEqual {36}
	024 Move X8, 0x68D000
	025 Move X8, [X8+1336]
	026 Move W1, W20
	027 Move X2, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X3, [X8]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Call Dictionary`2<Int32, Object>.TryGetValue, X0, X1, X2
	035 Return X0
	036 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03ACBBD4 MOV X2, X31
	0x03ACBBD8 BL 0x3C40FC8
	0x03ACBBDC MOV X0, X19
	0x03ACBBE0 BL 0x3ACBF28
	0x03ACBBE4 LDR X8, [X21]
	0x03ACBBE8 MOV X20, X0
	0x03ACBBEC LDR W9, [X8 + 0xE0]
	0x03ACBBF0 CBNZ W9, 0x3ACBBFC
	0x03ACBBF4 MOV X0, X8
	0x03ACBBF8 BL 0x1C16DFC
	0x03ACBBFC MOV X0, X20
	0x03ACBC00 MOV X1, X31
	0x03ACBC04 MOV X2, X31
	0x03ACBC08 BL 0x3C354F8
	0x03ACBC0C TBZ X0, 0x0, 0x3ACBC50
	0x03ACBC10 LDR X0, [X19 + 0x70]
	0x03ACBC14 CBZ X0, 0x3ACBC5C
	0x03ACBC18 LDR X8, [X0]
	0x03ACBC1C LDR X9, [X8 + 0x2F8]
	0x03ACBC20 LDR X1, [X8 + 0x300]
	0x03ACBC24 BLR X9
	0x03ACBC28 LDR X0, [X19 + 0x70]
	0x03ACBC2C CBZ X0, 0x3ACBC5C
	0x03ACBC30 LDR X8, [X0]
	0x03ACBC34 LDP S2, S3, [X19 + 0x60]
	0x03ACBC38 LDP S0, S1, [X19 + 0x58]
	0x03ACBC3C LDP X20, X19, [X31 + 0x10]
	0x03ACBC40 LDR X2, [X8 + 0x5D8]
	0x03ACBC44 LDR X1, [X8 + 0x5E0]
	0x03ACBC48 LDP X30, X21, [X31], #0x20
	0x03ACBC4C BR X2
	0x03ACBC50 LDP X20, X19, [X31 + 0x10]
	0x03ACBC54 LDP X30, X21, [X31], #0x20
	0x03ACBC58 RET
	0x03ACBC5C BL 0x1C16F20
	0x03ACBC60 LDR W0, [X0 + 0x2C]
	0x03ACBC64 RET
	0x03ACBC68 STP X30, X19, [X31 - 0x10]!
	0x03ACBC6C LDR W8, [X0 + 0x2C]
	0x03ACBC70 CMP W8, W1
	0x03ACBC74 B.NE 0x3ACBC80
	0x03ACBC78 LDP X30, X19, [X31], #0x10
	0x03ACBC7C RET
	0x03ACBC80 MOV X19, X0
	0x03ACBC84 STR W1, [X0 + 0x2C]
	0x03ACBC88 BL 0x3ACBCA4
	0x03ACBC8C MOVZ W8, 0x1
	0x03ACBC90 STP S0, S1, [X19 + 0x24]
	0x03ACBC94 STRB W8, [X19 + 0x20]
	0x03ACBC98 MOV X0, X19
	0x03ACBC9C LDP X30, X19, [X31], #0x10
	0x03ACBCA0 B 0x3ACBB50
	0x03ACBCA4 STR X30, [X31 - 0x20]!
	0x03ACBCA8 STP X20, X19, [X31 + 0x10]
	0x03ACBCAC ADRP X20, 0x90E000
	0x03ACBCB0 LDRB W8, [X20 + 0x78F]
	0x03ACBCB4 MOV W19, W1
	0x03ACBCB8 CBNZ W8, 0x3ACBCD0
	0x03ACBCBC ADRP X0, 0x630000
	0x03ACBCC0 LDR X0, [X0 + 0xF08]
	0x03ACBCC4 BL 0x1C16CF4
	0x03ACBCC8 MOVZ W8, 0x1
	0x03ACBCCC STRB W8, [X20 + 0x78F]
	0x03ACBCD0 ADRP X8, 0x630000
	0x03ACBCD4 LDR X8, [X8 + 0xF08]
	0x03ACBCD8 ADRP X9, 0xFFFFFFFFFD0CC000
	0x03ACBCDC ADRP X10, 0xFFFFFFFFFD0CC000
	0x03ACBCE0 ADD X9, X9, 0xBB4
	0x03ACBCE4 LDR X8, [X8]
	0x03ACBCE8 ADD X10, X10, 0xBD8
	0x03ACBCEC CMP W19, 0x9
	0x03ACBCF0 ADD X9, X9, W19, 0x2, SXTW
	0x03ACBCF4 LDR X8, [X8 + 0xB8]
	0x03ACBCF8 ADD X10, X10, W19, 0x2, SXTW
	0x03ACBCFC LDP X20, X19, [X31 + 0x10]
	0x03ACBD00 ADD X11, X8, 0x4
	0x03ACBD04 CSEL X8, X10, X8, CC
	0x03ACBD08 CSEL X9, X9, X11, CC
	0x03ACBD0C LDR V1, [X9]
	0x03ACBD10 LDR V0, [X8]
	0x03ACBD14 LDR X30, [X31], #0x20
	0x03ACBD18 RET
	0x03ACBD1C LDP S0, S1, [X0 + 0x30]
	0x03ACBD20 LDP S2, S3, [X0 + 0x38]
	0x03ACBD24 RET

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X27, 0x918000
	013 Move X28, 0x68E000
	014 Move X20, 0x68E000
	015 Move X26, 0x68E000
	016 Move X25, 0x68E000
	017 Move X24, 0x68E000
	018 Move X23, 0x68E000
	019 Move X22, 0x68E000
	020 Move X21, 0x68E000
	021 Move X28, [X28+1192]
	022 Move X20, [X20+1200]
	023 Move X26, [X26+1208]
	024 Move W8, [X27+1210]
	025 Move X25, [X25+1216]
	026 Move X24, [X24+1224]
	027 Move X23, [X23+1232]
	028 Move X22, [X22+1240]
	029 Move X21, [X21+1248]
	030 Move X19, X0
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {61}
	035 Move X0, 0x68E000
	036 Move X0, [X0+1248]
	037 Call 0x1C17CF4
	038 Move X0, 0x68E000
	039 Move X0, [X0+1200]
	040 Call 0x1C17CF4
	041 Move X0, 0x68E000
	042 Move X0, [X0+1232]
	043 Call 0x1C17CF4
	044 Move X0, 0x68E000
	045 Move X0, [X0+1216]
	046 Call 0x1C17CF4
	047 Move X0, 0x68E000
	048 Move X0, [X0+1208]
	049 Call 0x1C17CF4
	050 Move X0, 0x68E000
	051 Move X0, [X0+1224]
	052 Call 0x1C17CF4
	053 Move X0, 0x68E000
	054 Move X0, [X0+1240]
	055 Call 0x1C17CF4
	056 Move X0, 0x68E000
	057 Move X0, [X0+1192]
	058 Call 0x1C17CF4
	059 Move W8, 1
	060 Move [X27+1210], W8
	061 Move X0, [X28]
	062 Call 0x1C17F10
	063 Move X1, [X20]
	064 Move X20, X0
	065 Call Dictionary`2<Int32, Object>..ctor, X0
	066 Move [X19+16], X20
	067 Move X0, [X26]
	068 Call 0x1C17F10
	069 Move X1, [X25]
	070 Move X20, X0
	071 Call Dictionary`2<Int32, Object>..ctor, X0
	072 Move [X19+24], X20
	073 Move X0, [X24]
	074 Call 0x1C17F10
	075 Move X1, [X23]
	076 Move X20, X0
	077 Call Dictionary`2<Int32, Object>..ctor, X0
	078 Move [X19+32], X20
	079 Move X0, [X22]
	080 Call 0x1C17F10
	081 Move X1, [X21]
	082 Move X20, X0
	083 Call Dictionary`2<Int32, Object>..ctor, X0
	084 Move [X19+40], X20
	085 Move X0, X19
	086 Move X20, [X31+80]
	087 Move X19, [X31+88]
	088 Move X22, [X31+64]
	089 Move X21, [X31+72]
	090 Move X24, [X31+48]
	091 Move X23, [X31+56]
	092 Move X26, [X31+32]
	093 Move X25, [X31+40]
	094 Move X28, [X31+16]
	095 Move X27, [X31+24]
	096 Move X1, X31
	097 Move X30, [X31+96]
	098 Call Object..ctor, X0
	099 Return 

