Type: TMPro.TMP_Style

Method: TMPro.TMP_Style get_NormalStyle()

Disassembly:
	0x03B19B18 STR X20, [X19 + 0x68]
	0x03B19B1C CBZ X20, 0x3B19B40
	0x03B19B20 MOVZ W1, 0x3D
	0x03B19B24 MOV X0, X20
	0x03B19B28 MOV X2, X31
	0x03B19B2C BL 0x3C396EC
	0x03B19B30 LDR X0, [X19 + 0x68]
	0x03B19B34 LDP X20, X19, [X31 + 0x10]
	0x03B19B38 LDP X30, X21, [X31], #0x20
	0x03B19B3C RET
	0x03B19B40 BL 0x1C16F20
	0x03B19B44 STR X1, [X0 + 0x68]
	0x03B19B48 RET
	0x03B19B4C STP X30, X21, [X31 - 0x20]!
	0x03B19B50 STP X20, X19, [X31 + 0x10]
	0x03B19B54 ADRP X21, 0x8C9000
	0x03B19B58 ADRP X20, 0x5DA000
	0x03B19B5C LDRB W8, [X21 + 0x6D3]
	0x03B19B60 LDR X20, [X20 + 0x598]
	0x03B19B64 MOV X19, X0
	0x03B19B68 TBNZ X8, 0x0, 0x3B19B8C
	0x03B19B6C ADRP X0, 0x640000
	0x03B19B70 LDR X0, [X0 + 0xA18]
	0x03B19B74 BL 0x1C16CF4
	0x03B19B78 ADRP X0, 0x5DA000
	0x03B19B7C LDR X0, [X0 + 0x598]
	0x03B19B80 BL 0x1C16CF4
	0x03B19B84 MOVZ W8, 0x1
	0x03B19B88 STRB W8, [X21 + 0x6D3]
	0x03B19B8C LDR X0, [X20]
	0x03B19B90 LDR X20, [X19 + 0x70]
	0x03B19B94 LDR W8, [X0 + 0xE0]
	0x03B19B98 CBNZ W8, 0x3B19BA0
	0x03B19B9C BL 0x1C16DFC
	0x03B19BA0 MOV X0, X20
	0x03B19BA4 MOV X1, X31
	0x03B19BA8 MOV X2, X31
	0x03B19BAC BL 0x3C3883C
	0x03B19BB0 TBZ X0, 0x0, 0x3B19BD0
	0x03B19BB4 ADRP X8, 0x640000
	0x03B19BB8 LDR X8, [X8 + 0xA18]
	0x03B19BBC MOV X0, X19
	0x03B19BC0 LDR X1, [X8]
	0x03B19BC4 BL 0x21A3F50
	0x03B19BC8 STR X0, [X19 + 0x70]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x8CA000
	006 Move X21, 0x641000
	007 Move W8, [X19+1736]
	008 Move X21, [X21+2480]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x5DD000
	014 Move X0, [X0+632]
	015 Call 0x1C17CF4
	016 Move X0, 0x641000
	017 Move X0, [X0+2480]
	018 Call 0x1C17CF4
	019 Move X0, 0x641000
	020 Move X0, [X0+2488]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X19+1736], W8
	024 Move X0, [X21]
	025 Move X8, [X0+184]
	026 Move X8, [X8]
	027 Compare X8, 0
	028 JumpIfNotEqual {48}
	029 Move X8, 0x5DD000
	030 Move X8, [X8+632]
	031 Move X8, [X8]
	032 Move X8, [X8+184]
	033 Move X19, [X8]
	034 Call 0x1C17F10
	035 Move X8, 0x641000
	036 Move X8, [X8+2488]
	037 Move X2, X19
	038 Move X3, X19
	039 Move X20, X0
	040 Move X1, [X8]
	041 Call TMP_Style..ctor, X0, X1, X2, X3
	042 Move X8, [X21]
	043 Move X8, [X8+184]
	044 Move [X8], X20
	045 Move X8, [X21]
	046 Move X8, [X8+184]
	047 Move X8, [X8]
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X0, X8
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return X0

Method: System.String get_name()

Disassembly:
	0x03B19C5C STRB W8, [X21 + 0x6D4]
	0x03B19C60 LDR X0, [X20 + 0x18]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_name(System.String value)

Disassembly:
	0x03B19C64 CBZ X0, 0x3B19F90
	0x03B19C68 ADRP X21, 0x640000
	0x03B19C6C ADRP X22, 0x5DA000
	0x03B19C70 ADRP X23, 0x5E2000
	0x03B19C74 ADRP X24, 0x640000
	0x03B19C78 ADRP X25, 0x5DA000
	0x03B19C7C LDR X21, [X21 + 0xA30]
	0x03B19C80 LDR X22, [X22 + 0x848]
	0x03B19C84 LDR X23, [X23 + 0xC60]
	0x03B19C88 LDR X24, [X24 + 0xA28]
	0x03B19C8C LDR X25, [X25 + 0x6C0]
	0x03B19C90 MOV X1, X31
	0x03B19C94 BL 0x3C389D4
	0x03B19C98 LDR X8, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+16]
	005 Move X19, X0
	006 Move X20, X1
	007 Move X0, X1
	008 Move X1, X8
	009 Move X2, X31
	010 Call String.op_Inequality, X0, X1
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {16}
	015 Move [X19+16], X20
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X30, [X31+32]
	019 Return 

Method: System.Int32 get_hashCode()

Disassembly:
	0x03B19C9C LDR X2, [X22]
	0x03B19CA0 MOV X1, X0

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_hashCode(System.Int32 value)

Disassembly:
	0x03B19CA4 MOV X3, X31
	0x03B19CA8 MOV X0, X8
	0x03B19CAC BL 0x32274B8
	0x03B19CB0 LDR X8, [X23]
	0x03B19CB4 MOV X21, X0

ISIL:
	001 Move W8, [X0+24]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move [X0+24], W1
	004 Return 

Method: System.String get_styleOpeningDefinition()

Disassembly:
	0x03B19CB8 MOVZ W1, 0x1
	0x03B19CBC MOV X0, X8

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.String get_styleClosingDefinition()

Disassembly:
	0x03B19CC0 BL 0x1C16D6C
	0x03B19CC4 LDR X8, [X25]

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Int32[] get_styleOpeningTagArray()

Disassembly:
	0x03B19CC8 LDR X22, [X24]
	0x03B19CCC MOV X23, X0

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Int32[] get_styleClosingTagArray()

Disassembly:
	0x03B19CD0 LDR W9, [X8 + 0xE0]
	0x03B19CD4 CBNZ W9, 0x3B19CE0

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void .ctor(System.String styleName, System.String styleOpeningDefinition, System.String styleClosingDefinition)

Disassembly:
	0x03B19BCC B 0x3B19BD4
	0x03B19BD0 LDR X0, [X19 + 0x70]
	0x03B19BD4 LDP X20, X19, [X31 + 0x10]
	0x03B19BD8 LDP X30, X21, [X31], #0x20
	0x03B19BDC RET
	0x03B19BE0 STP X30, X25, [X31 - 0x40]!
	0x03B19BE4 STP X24, X23, [X31 + 0x10]
	0x03B19BE8 STP X22, X21, [X31 + 0x20]
	0x03B19BEC STP X20, X19, [X31 + 0x30]
	0x03B19BF0 ADRP X21, 0x8C9000
	0x03B19BF4 LDRB W8, [X21 + 0x6D4]
	0x03B19BF8 MOV X20, X1
	0x03B19BFC MOV X19, X0
	0x03B19C00 TBNZ X8, 0x0, 0x3B19C60
	0x03B19C04 ADRP X0, 0x640000
	0x03B19C08 LDR X0, [X0 + 0xA20]
	0x03B19C0C BL 0x1C16CF4
	0x03B19C10 ADRP X0, 0x5DA000
	0x03B19C14 LDR X0, [X0 + 0xA58]
	0x03B19C18 BL 0x1C16CF4
	0x03B19C1C ADRP X0, 0x640000
	0x03B19C20 LDR X0, [X0 + 0xA28]
	0x03B19C24 BL 0x1C16CF4
	0x03B19C28 ADRP X0, 0x5E2000
	0x03B19C2C LDR X0, [X0 + 0xC60]
	0x03B19C30 BL 0x1C16CF4
	0x03B19C34 ADRP X0, 0x5DA000
	0x03B19C38 LDR X0, [X0 + 0x6C0]
	0x03B19C3C BL 0x1C16CF4
	0x03B19C40 ADRP X0, 0x640000
	0x03B19C44 LDR X0, [X0 + 0xA30]
	0x03B19C48 BL 0x1C16CF4
	0x03B19C4C ADRP X0, 0x5DA000
	0x03B19C50 LDR X0, [X0 + 0x848]
	0x03B19C54 BL 0x1C16CF4
	0x03B19C58 MOVZ W8, 0x1

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x8CA000
	009 Move X23, 0x641000
	010 Move W8, [X24+1737]
	011 Move X23, [X23+496]
	012 Move X19, X3
	013 Move X21, X2
	014 Move X22, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x641000
	021 Move X0, [X0+496]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+1737], W8
	025 Move X0, X20
	026 Move X1, X31
	027 Call Object..ctor, X0
	028 Move [X20+16], X22
	029 Move X0, [X23]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X22
	035 Call TMP_TextParsingUtilities.GetHashCode, X0
	036 Move [X20+24], W0
	037 Move [X20+32], X21
	038 Move [X20+40], X19
	039 Move X0, X20
	040 Move X20, [X31+48]
	041 Move X19, [X31+56]
	042 Move X22, [X31+32]
	043 Move X21, [X31+40]
	044 Move X24, [X31+16]
	045 Move X23, [X31+24]
	046 Move X30, [X31+64]
	047 Call TMP_Style.RefreshStyle, X0
	048 Return 

Method: System.Void RefreshStyle()

Disassembly:
	0x03B19D94 MOV W2, W31
	0x03B19D98 MOV X3, X31
	0x03B19D9C BL 0x3C3FEB8
	0x03B19DA0 MOV X0, X22
	0x03B19DA4 MOV X1, X31
	0x03B19DA8 BL 0x3C356F8
	0x03B19DAC ADRP X24, 0x8BF000
	0x03B19DB0 LDRB W8, [X24 + 0x783]
	0x03B19DB4 MOV X23, X0
	0x03B19DB8 CBNZ W8, 0x3B19DD0
	0x03B19DBC ADRP X0, 0x5DA000
	0x03B19DC0 LDR X0, [X0 + 0x5A0]
	0x03B19DC4 BL 0x1C16CF4
	0x03B19DC8 MOVZ W8, 0x1
	0x03B19DCC STRB W8, [X24 + 0x783]
	0x03B19DD0 CBZ X23, 0x3B19F90
	0x03B19DD4 ADRP X24, 0x5DA000
	0x03B19DD8 LDR X24, [X24 + 0x5A0]
	0x03B19DDC MOV X0, X23
	0x03B19DE0 MOV X1, X31
	0x03B19DE4 LDR X8, [X24]
	0x03B19DE8 LDR X8, [X8 + 0xB8]
	0x03B19DEC LDP S1, S2, [X8 + 0x4]
	0x03B19DF0 LDR V0, [X8]
	0x03B19DF4 BL 0x3C3EC04
	0x03B19DF8 MOV X0, X22
	0x03B19DFC MOV X1, X31
	0x03B19E00 BL 0x3C356F8
	0x03B19E04 ADRP X25, 0x8BF000
	0x03B19E08 LDRB W8, [X25 + 0x793]
	0x03B19E0C MOV X23, X0
	0x03B19E10 CBNZ W8, 0x3B19E28
	0x03B19E14 ADRP X0, 0x5DB000
	0x03B19E18 LDR X0, [X0 + 0x5A8]
	0x03B19E1C BL 0x1C16CF4
	0x03B19E20 MOVZ W8, 0x1
	0x03B19E24 STRB W8, [X25 + 0x793]
	0x03B19E28 CBZ X23, 0x3B19F90
	0x03B19E2C ADRP X8, 0x5DB000
	0x03B19E30 LDR X8, [X8 + 0x5A8]
	0x03B19E34 MOV X0, X23
	0x03B19E38 MOV X1, X31
	0x03B19E3C LDR X8, [X8]
	0x03B19E40 LDR X8, [X8 + 0xB8]
	0x03B19E44 LDP S2, S3, [X8 + 0x8]
	0x03B19E48 LDP S0, S1, [X8]
	0x03B19E4C BL 0x3C3F8B8
	0x03B19E50 MOV X0, X22
	0x03B19E54 MOV X1, X31
	0x03B19E58 BL 0x3C356F8
	0x03B19E5C ADRP X25, 0x8BF000
	0x03B19E60 LDRB W8, [X25 + 0x85B]
	0x03B19E64 MOV X23, X0
	0x03B19E68 CBNZ W8, 0x3B19E80
	0x03B19E6C ADRP X0, 0x5DA000
	0x03B19E70 LDR X0, [X0 + 0x5A0]
	0x03B19E74 BL 0x1C16CF4
	0x03B19E78 MOVZ W8, 0x1
	0x03B19E7C STRB W8, [X25 + 0x85B]
	0x03B19E80 CBZ X23, 0x3B19F90
	0x03B19E84 LDR X8, [X24]
	0x03B19E88 MOV X0, X23
	0x03B19E8C MOV X1, X31
	0x03B19E90 LDR X8, [X8 + 0xB8]
	0x03B19E94 LDP S1, S2, [X8 + 0x10]
	0x03B19E98 LDR V0, [X8 + 0xC]
	0x03B19E9C BL 0x3C3FC4C
	0x03B19EA0 MOV X0, X19
	0x03B19EA4 MOV X1, X31
	0x03B19EA8 BL 0x3C32ECC
	0x03B19EAC CBZ X0, 0x3B19F90
	0x03B19EB0 MOV X1, X31
	0x03B19EB4 BL 0x3C35734
	0x03B19EB8 MOV W1, W0
	0x03B19EBC MOV X0, X22
	0x03B19EC0 MOV X2, X31
	0x03B19EC4 BL 0x3C35770
	0x03B19EC8 CBZ X21, 0x3B19F90
	0x03B19ECC STR X19, [X21 + 0x70]
	0x03B19ED0 LDR X8, [X20 + 0x8]
	0x03B19ED4 MOV X0, X21
	0x03B19ED8 STR X8, [X21 + 0x20]
	0x03B19EDC LDR X8, [X20 + 0x10]
	0x03B19EE0 STR X8, [X21 + 0x28]
	0x03B19EE4 LDRB W8, [X20 + 0x20]
	0x03B19EE8 AND W8, W8, 0x1
	0x03B19EEC STRB W8, [X21 + 0x50]
	0x03B19EF0 LDR X8, [X20 + 0x18]
	0x03B19EF4 STR X8, [X21 + 0x38]
	0x03B19EF8 BL 0x3B19620
	0x03B19EFC MOV X0, X21
	0x03B19F00 STR S0, [X21 + 0x54]
	0x03B19F04 BL 0x3B1A510
	0x03B19F08 MOV X0, X21
	0x03B19F0C BL 0x3B19904
	0x03B19F10 MOV X20, X0
	0x03B19F14 MOV X0, X19
	0x03B19F18 MOV X1, X31
	0x03B19F1C BL 0x3ACC490
	0x03B19F20 CBZ X0, 0x3B19F90
	0x03B19F24 MOV X1, X31
	0x03B19F28 BL 0x3C13100
	0x03B19F2C CBZ X20, 0x3B19F90
	0x03B19F30 MOV W1, W0
	0x03B19F34 MOV X0, X20
	0x03B19F38 MOV X2, X31
	0x03B19F3C BL 0x3C1313C
	0x03B19F40 MOV X0, X21
	0x03B19F44 BL 0x3B19904
	0x03B19F48 MOV X20, X0
	0x03B19F4C MOV X0, X19
	0x03B19F50 MOV X1, X31
	0x03B19F54 BL 0x3ACC490
	0x03B19F58 CBZ X0, 0x3B19F90
	0x03B19F5C MOV X1, X31
	0x03B19F60 BL 0x3C13180
	0x03B19F64 CBZ X20, 0x3B19F90
	0x03B19F68 MOV W1, W0
	0x03B19F6C MOV X0, X20
	0x03B19F70 MOV X2, X31
	0x03B19F74 BL 0x3C131BC
	0x03B19F78 MOV X0, X21
	0x03B19F7C LDP X20, X19, [X31 + 0x30]
	0x03B19F80 LDP X22, X21, [X31 + 0x20]
	0x03B19F84 LDP X24, X23, [X31 + 0x10]
	0x03B19F88 LDP X30, X25, [X31], #0x40

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x8CA000
	009 Move X20, 0x641000
	010 Move W8, [X21+1738]
	011 Move X20, [X20+496]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x5DC000
	018 Move X0, [X0+3672]
	019 Call 0x1C17CF4
	020 Move X0, 0x641000
	021 Move X0, [X0+496]
	022 Call 0x1C17CF4
	023 Move X0, 0x604000
	024 Move X0, [X0+3336]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+1738], W8
	028 Move X0, [X20]
	029 Move X20, [X19+16]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Call TMP_TextParsingUtilities.GetHashCode, X0
	036 Move X8, [X19+32]
	037 Move [X19+24], W0
	038 Compare X8, 0
	039 JumpIfEqual {137}
	040 Move X23, 0x5DC000
	041 Move X23, [X23+3672]
	042 Move W20, [X8+16]
	043 Move X22, 0x604000
	044 Move X0, [X23]
	045 Move X22, [X22+3336]
	046 Move W1, W20
	047 Call 0x1C17D6C
	048 Move [X19+48], X0
	049 Move X0, [X22]
	050 Move W1, W20
	051 Call 0x1C17D6C
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move [X19+64], X0
	054 Move X21, X31
	055 Move X0, [X19+32]
	056 Compare X0, 0
	057 JumpIfEqual {137}
	058 Move X24, [X19+48]
	059 Move W1, W21
	060 Move X2, X31
	061 Call String.get_Chars, X0, X1
	062 Compare X24, 0
	063 JumpIfEqual {137}
	064 Move W8, [X24+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 And W8, W0, 0xFFFF
	067 Add X9, X24, X21
	068 Move [X9+32], W8
	069 Move X0, [X19+32]
	070 Compare X0, 0
	071 JumpIfEqual {137}
	072 Move X24, [X19+64]
	073 Move W1, W21
	074 Move X2, X31
	075 Call String.get_Chars, X0, X1
	076 Compare X24, 0
	077 JumpIfEqual {137}
	078 Move W8, [X24+24]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Add X9, X24, X21
	081 Add X21, X21, 1
	082 And W8, W0, 0xFFFF
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move [X9+32], W8
	085 Move X8, [X19+40]
	086 Compare X8, 0
	087 JumpIfEqual {137}
	088 Move W20, [X8+16]
	089 Move X0, [X23]
	090 Move W1, W20
	091 Call 0x1C17D6C
	092 Move [X19+56], X0
	093 Move X0, [X22]
	094 Move W1, W20
	095 Call 0x1C17D6C
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move [X19+72], X0
	098 Move X21, X31
	099 Move X0, [X19+40]
	100 Compare X0, 0
	101 JumpIfEqual {137}
	102 Move X22, [X19+56]
	103 Move W1, W21
	104 Move X2, X31
	105 Call String.get_Chars, X0, X1
	106 Compare X22, 0
	107 JumpIfEqual {137}
	108 Move W8, [X22+24]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 And W8, W0, 0xFFFF
	111 Add X9, X22, X21
	112 Move [X9+32], W8
	113 Move X0, [X19+40]
	114 Compare X0, 0
	115 JumpIfEqual {137}
	116 Move X22, [X19+72]
	117 Move W1, W21
	118 Move X2, X31
	119 Call String.get_Chars, X0, X1
	120 Compare X22, 0
	121 JumpIfEqual {137}
	122 Move W8, [X22+24]
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Add X9, X22, X21
	125 Add X21, X21, 1
	126 And W8, W0, 0xFFFF
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move [X9+32], W8
	129 Move X20, [X31+48]
	130 Move X19, [X31+56]
	131 Move X22, [X31+32]
	132 Move X21, [X31+40]
	133 Move X24, [X31+16]
	134 Move X23, [X31+24]
	135 Move X30, [X31+64]
	136 Return 
	137 Call 0x1C17F20
	138 Call 0x1C17F28

