Type: TMPro.TMP_InputField/<CaretBlink>d__276

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x03B0E354 BL 0x3C124EC
	0x03B0E358 LDR X8, [X20]
	0x03B0E35C MOV X1, X31
	0x03B0E360 LDR X8, [X8 + 0xB8]
	0x03B0E364 STR W0, [X8 + 0x10]
	0x03B0E368 ADRP X8, 0x64B000
	0x03B0E36C LDR X8, [X8 + 0x608]
	0x03B0E370 LDR X0, [X8]
	0x03B0E374 BL 0x3C124EC
	0x03B0E378 LDR X8, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x03B0E37C MOV X1, X31

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x03B0E380 LDR X8, [X8 + 0xB8]
	0x03B0E384 STR W0, [X8 + 0x14]
	0x03B0E388 ADRP X8, 0x64B000
	0x03B0E38C LDR X8, [X8 + 0x5A8]
	0x03B0E390 LDR X0, [X8]
	0x03B0E394 BL 0x3C124EC
	0x03B0E398 LDR X8, [X20]
	0x03B0E39C MOV X1, X31
	0x03B0E3A0 LDR X8, [X8 + 0xB8]
	0x03B0E3A4 STR W0, [X8 + 0x18]
	0x03B0E3A8 ADRP X8, 0x64B000
	0x03B0E3AC LDR X8, [X8 + 0x4F0]
	0x03B0E3B0 LDR X0, [X8]
	0x03B0E3B4 BL 0x3C124EC
	0x03B0E3B8 LDR X8, [X20]
	0x03B0E3BC MOV X1, X31
	0x03B0E3C0 LDR X8, [X8 + 0xB8]
	0x03B0E3C4 STR W0, [X8 + 0x1C]
	0x03B0E3C8 ADRP X8, 0x64B000
	0x03B0E3CC LDR X8, [X8 + 0x628]
	0x03B0E3D0 LDR X0, [X8]
	0x03B0E3D4 BL 0x3C124EC
	0x03B0E3D8 LDR X8, [X20]
	0x03B0E3DC MOV X1, X31
	0x03B0E3E0 LDR X8, [X8 + 0xB8]
	0x03B0E3E4 STR W0, [X8 + 0x20]
	0x03B0E3E8 ADRP X8, 0x64B000
	0x03B0E3EC LDR X8, [X8 + 0x588]
	0x03B0E3F0 LDR X0, [X8]
	0x03B0E3F4 BL 0x3C124EC
	0x03B0E3F8 LDR X8, [X20]
	0x03B0E3FC MOV X1, X31
	0x03B0E400 LDR X8, [X8 + 0xB8]
	0x03B0E404 STR W0, [X8 + 0x24]
	0x03B0E408 ADRP X8, 0x64B000
	0x03B0E40C LDR X8, [X8 + 0x4F8]
	0x03B0E410 LDR X0, [X8]
	0x03B0E414 BL 0x3C124EC
	0x03B0E418 LDR X8, [X20]
	0x03B0E41C MOV X1, X31
	0x03B0E420 LDR X8, [X8 + 0xB8]
	0x03B0E424 STR W0, [X8 + 0x28]
	0x03B0E428 ADRP X8, 0x64B000
	0x03B0E42C LDR X8, [X8 + 0x5F0]
	0x03B0E430 LDR X0, [X8]
	0x03B0E434 BL 0x3C124EC
	0x03B0E438 LDR X8, [X20]
	0x03B0E43C MOV X1, X31
	0x03B0E440 LDR X8, [X8 + 0xB8]
	0x03B0E444 STR W0, [X8 + 0x2C]
	0x03B0E448 ADRP X8, 0x64B000
	0x03B0E44C LDR X8, [X8 + 0x498]
	0x03B0E450 LDR X0, [X8]
	0x03B0E454 BL 0x3C124EC
	0x03B0E458 LDR X8, [X20]
	0x03B0E45C MOV X1, X31
	0x03B0E460 LDR X8, [X8 + 0xB8]
	0x03B0E464 STR W0, [X8 + 0x30]
	0x03B0E468 ADRP X8, 0x64B000
	0x03B0E46C LDR X8, [X8 + 0x5F8]
	0x03B0E470 LDR X0, [X8]
	0x03B0E474 BL 0x3C124EC
	0x03B0E478 LDR X8, [X20]
	0x03B0E47C MOV X1, X31
	0x03B0E480 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+16]
	006 Move X20, [X0+32]
	007 Move X19, X0
	008 Subtract W9, W8, 1
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move TEMP, 0
	011 Not TEMP
	012 Move W8, TEMP
	013 Move [X19+16], W8
	014 Compare X20, 0
	015 JumpIfEqual {73}
	016 Move W8, [X20+624]
	017 Compare W8, 0
	018 JumpIfNotEqual {22}
	019 Move W8, [X20+715]
	020 Compare W8, 0
	021 JumpIfEqual {65}
	022 Move V0, [X20+552]
	023 NotImplemented "Instruction FCMP not yet implemented."
	024 Move S1, 1
	025 Move X0, X31
	026 NotImplemented "Instruction FDIV not yet implemented."
	027 Call Time.get_unscaledTime
	028 Move V1, [X20+640]
	029 Subtract S0, S0, S1
	030 Move V1, V8
	031 Call 0x3EB2BA0
	032 Move S1, 0.5
	033 Move W9, [X20+628]
	034 Multiply S1, S8, S1
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 NotImplemented "Instruction CSET not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X0, X20
	039 Move X1, X31
	040 Move [X20+628], W8
	041 Call TMP_InputField.get_hasSelection, X0
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfEqual {49}
	046 Move X0, X20
	047 Move X1, X31
	048 Call TMP_InputField.MarkGeometryAsDirty, X0
	049 Move W8, 2
	050 Move [X19+24], X31
	051 Move [X19+16], W8
	052 Move W0, 1
	053 Compare W8, 0
	054 JumpIfNotEqual {67}
	055 Move TEMP, 0
	056 Not TEMP
	057 Move W8, TEMP
	058 Move [X19+16], W8
	059 Compare X20, 0
	060 JumpIfEqual {73}
	061 Move W0, 1
	062 Move [X20+628], W0
	063 Move [X19+24], X31
	064 Move [X19+16], W0
	065 Move W0, W31
	066 Move [X20+632], X31
	067 Move W0, W31
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+8]
	071 Move V8, [X31+32]
	072 Return X0
	073 Call 0x1C17F20

Method: System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()

Disassembly:
	0x03B0E484 STR W0, [X8 + 0x34]
	0x03B0E488 ADRP X8, 0x64B000

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x03B0E48C LDR X8, [X8 + 0x4C0]
	0x03B0E490 LDR X0, [X8]
	0x03B0E494 BL 0x3C124EC
	0x03B0E498 LDR X8, [X20]
	0x03B0E49C MOV X1, X31
	0x03B0E4A0 LDR X8, [X8 + 0xB8]
	0x03B0E4A4 STR W0, [X8 + 0x38]
	0x03B0E4A8 ADRP X8, 0x64B000
	0x03B0E4AC LDR X8, [X8 + 0x520]
	0x03B0E4B0 LDR X0, [X8]
	0x03B0E4B4 BL 0x3C124EC
	0x03B0E4B8 LDR X8, [X20]
	0x03B0E4BC MOV X1, X31
	0x03B0E4C0 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x5E6000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0x64C000
	011 Move X0, [X0+992]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x03B0E4C4 STR W0, [X8 + 0x3C]
	0x03B0E4C8 ADRP X8, 0x64B000

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

