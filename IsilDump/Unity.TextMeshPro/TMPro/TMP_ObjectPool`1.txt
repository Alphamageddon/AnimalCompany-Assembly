Type: TMPro.TMP_ObjectPool`1

Method: System.Int32 get_countAll()

Disassembly:
	0x02671644 LDR W11, [X1 + 0x10]
	0x02671648 LDR V0, [X1]

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_countAll(System.Int32 value)

Disassembly:
	0x0267164C CMP W9, W10
	0x02671650 STR W11, [X31 + 0x10]

ISIL:
	001 Move [X0+40], W1
	002 Return 

Method: System.Int32 get_countActive()

Disassembly:
	0x02671654 STR V0, [X31]
	0x02671658 B.CS 0x2671690
	0x0267165C LDR W10, [X31 + 0x10]
	0x02671660 LDR V0, [X31]
	0x02671664 MOVZ W11, 0x14
	0x02671668 MADD X8, X9, X11, X8
	0x0267166C STR W10, [X8 + 0x30]
	0x02671670 STR V0, [X8 + 0x2]
	0x02671674 LDR W8, [X0 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move W9, [X0+40]
	006 Move W8, [X8+24]
	007 Subtract W0, W9, W8
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: System.Int32 get_countInactive()

Disassembly:
	0x02671678 ADD W8, W8, 0x1
	0x0267167C STR W8, [X0 + 0x8]
	0x02671680 LDR X30, [X31 + 0x20]
	0x02671684 ADD X31, X31, 0x30
	0x02671688 RET
	0x0267168C BL 0x1C16F20
	0x02671690 BL 0x1C16F28

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void .ctor(UnityEngine.Events.UnityAction`1<T> actionOnGet, UnityEngine.Events.UnityAction`1<T> actionOnRelease)

Disassembly:
	0x02671694 STR X30, [X31 - 0x10]!
	0x02671698 LDR W9, [X0 + 0x8]
	0x0267169C SUB W10, W9, 0x1
	0x026716A0 CMP W10, 0x0
	0x026716A4 STR W10, [X0 + 0x8]
	0x026716A8 B.LE 0x26716D0
	0x026716AC LDR X10, [X0]
	0x026716B0 CBZ X10, 0x2671704
	0x026716B4 LDR W11, [X10 + 0x18]
	0x026716B8 SUB W9, W9, 0x2
	0x026716BC CMP W9, W11
	0x026716C0 B.CS 0x2671708
	0x026716C4 MOVZ W11, 0x14
	0x026716C8 UMADDL X9, X9, X11, X10
	0x026716CC B 0x26716E8
	0x026716D0 LDR X9, [X0]
	0x026716D4 MOVZ W10, 0x1
	0x026716D8 STR W10, [X0 + 0x8]
	0x026716DC CBZ X9, 0x2671704
	0x026716E0 LDR W10, [X9 + 0x18]
	0x026716E4 CBZ W10, 0x2671708
	0x026716E8 ADD X9, X9, 0x20
	0x026716EC LDR W10, [X9 + 0x10]
	0x026716F0 LDR V0, [X9]
	0x026716F4 STR W10, [X8 + 0x10]
	0x026716F8 STR V0, [X8]
	0x026716FC LDR X30, [X31], #0x10
	0x02671700 RET
	0x02671704 BL 0x1C16F20
	0x02671708 BL 0x1C16F28
	0x0267170C SUB X31, X31, 0x60

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+32]
	007 Move X22, X3
	008 Move X19, X2
	009 Move X20, X1
	010 Move X8, [X8+192]
	011 Move X21, X0
	012 Move X8, [X8+24]
	013 Move W9, [X8+309]
	014 Move TEMP, X9
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {21}
	018 Move X0, X8
	019 Call 0x1C5D684
	020 Move X8, X0
	021 Move X0, X8
	022 Call 0x1C17F10
	023 Move X8, [X22+32]
	024 Move X22, X0
	025 Move X8, [X8+192]
	026 Move X1, [X8+40]
	027 Call Stack`1<Object>..ctor, X0
	028 Move X0, X21
	029 Move X1, X31
	030 Move [X21+16], X22
	031 Call Object..ctor, X0
	032 Move [X21+24], X20
	033 Move [X21+32], X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Return 

Method: T Get()

Disassembly:
	0x02671710 STP X30, X21, [X31 + 0x40]
	0x02671714 STP X20, X19, [X31 + 0x50]
	0x02671718 LDR W8, [X0 + 0x8]
	0x0267171C LDR W9, [X0 + 0x20]
	0x02671720 MOV X19, X0
	0x02671724 MOV X20, X1
	0x02671728 CMP W8, W9
	0x0267172C B.NE 0x267176C
	0x02671730 UBFM W8, W8, 0x1F, 0x1E
	0x02671734 CMP W8, 0x0
	0x02671738 MOVZ W9, 0x4
	0x0267173C CSEL W21, W9, W8, EQ
	0x02671740 STR W21, [X19 + 0x20]
	0x02671744 LDR X0, [X2 + 0x20]
	0x02671748 LDRB W8, [X0 + 0x135]
	0x0267174C TBNZ X8, 0x0, 0x2671754
	0x02671750 BL 0x1C5C684
	0x02671754 LDR X8, [X0 + 0xC0]
	0x02671758 MOV X0, X19
	0x0267175C MOV W1, W21
	0x02671760 LDR X2, [X8 + 0x38]
	0x02671764 BL 0x2115C4C
	0x02671768 LDR W8, [X19 + 0x8]
	0x0267176C LDR X9, [X19]
	0x02671770 LDR W10, [X20 + 0x10]
	0x02671774 LDR V0, [X20]
	0x02671778 STR W10, [X31 + 0x30]
	0x0267177C STR V0, [X31 + 0x2]
	0x02671780 CBZ X9, 0x2671804
	0x02671784 LDR V0, [X31 + 0x2]
	0x02671788 LDR W10, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+16]
	006 Compare X0, 0
	007 JumpIfEqual {35}
	008 Move X8, [X1+32]
	009 Move W9, [X0+24]
	010 Move X8, [X8+192]
	011 Compare W9, 0
	012 JumpIfEqual {16}
	013 Move X1, [X8+80]
	014 Call Stack`1<Object>.Pop, X0
	015 Move X20, X0
	016 Move X0, [X8+56]
	017 Call Activator.CreateInstance
	018 Move W8, [X19+40]
	019 Move X20, X0
	020 Add W8, W8, 1
	021 Move [X19+40], W8
	022 Move X8, [X19+24]
	023 Compare X8, 0
	024 JumpIfEqual {30}
	025 Move X9, [X8+24]
	026 Move X0, [X8+64]
	027 Move X2, [X8+40]
	028 Move X1, X20
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move X0, X20
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Call 0x1C17F20

Method: System.Void Release(T element)

Disassembly:
	0x0267178C STR V0, [X31]
	0x02671790 STR W10, [X31 + 0x10]
	0x02671794 LDR W10, [X9 + 0x18]
	0x02671798 CMP W8, W10
	0x0267179C B.CS 0x2671808
	0x026717A0 LDR W10, [X31 + 0x10]
	0x026717A4 LDR V0, [X31]
	0x026717A8 MOVZ W11, 0x14
	0x026717AC SMADDL X8, X8, X11, X9
	0x026717B0 STR W10, [X8 + 0x30]
	0x026717B4 STR V0, [X8 + 0x2]
	0x026717B8 LDR W8, [X19 + 0x8]
	0x026717BC LDR W9, [X19 + 0x24]
	0x026717C0 ADD W8, W8, 0x1
	0x026717C4 CBZ W9, 0x26717E4
	0x026717C8 LDR W10, [X19 + 0x28]
	0x026717CC SDIV W11, W8, W9
	0x026717D0 MSUB W8, W11, W9, W8
	0x026717D4 STR W8, [X19 + 0x8]
	0x026717D8 CMP W10, W9
	0x026717DC CSINC W8, W9, W10, GE
	0x026717E0 B 0x26717F0
	0x026717E4 LDR W9, [X19 + 0x28]
	0x026717E8 STR W8, [X19 + 0x8]
	0x026717EC ADD W8, W9, 0x1
	0x026717F0 STR W8, [X19 + 0x28]
	0x026717F4 LDP X20, X19, [X31 + 0x50]
	0x026717F8 LDP X30, X21, [X31 + 0x40]
	0x026717FC ADD X31, X31, 0x60
	0x02671800 RET
	0x02671804 BL 0x1C16F20
	0x02671808 BL 0x1C16F28
	0x0267180C SUB X31, X31, 0x50
	0x02671810 STR X30, [X31 + 0x40]
	0x02671814 LDR W9, [X0 + 0x8]
	0x02671818 LDR W10, [X0 + 0x24]
	0x0267181C CBZ W9, 0x267182C
	0x02671820 SUB W9, W9, 0x1
	0x02671824 CBNZ W10, 0x2671834
	0x02671828 B 0x2671844
	0x0267182C CBZ W10, 0x26718EC
	0x02671830 MOVN W9, 0x0
	0x02671834 SDIV W11, W9, W10
	0x02671838 MSUB W9, W11, W10, W9
	0x0267183C AND W10, W10, W9, 0x1F
	0x02671840 ADD W9, W10, W9
	0x02671844 LDR X10, [X0]
	0x02671848 STR W9, [X0 + 0x8]
	0x0267184C CBZ X10, 0x26718F8
	0x02671850 LDR W11, [X10 + 0x18]
	0x02671854 CMP W9, W11
	0x02671858 B.CS 0x26718FC
	0x0267185C MOVZ W11, 0x14
	0x02671860 SMADDL X9, X9, X11, X10
	0x02671864 LDR W10, [X9 + 0x30]
	0x02671868 LDR V0, [X9 + 0x2]
	0x0267186C STR W10, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1D6A000
	007 Move W8, [X22+523]
	008 Move X20, X2
	009 Move X19, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x1A83000
	016 Move X0, [X0+2600]
	017 Call 0x1C17CF4
	018 Move X0, 0x1AAC000
	019 Move X0, [X0+3528]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+523], W8
	023 Move X0, [X21+16]
	024 Compare X0, 0
	025 JumpIfEqual {67}
	026 Move W8, [X0+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X8, [X20+32]
	029 Move X8, [X8+192]
	030 Move X1, [X8+96]
	031 Call Stack`1<Object>.Peek, X0
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X8, 0x1A83000
	034 Move X8, [X8+2600]
	035 Move X0, [X8]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X8, 0x1AAC000
	041 Move X8, [X8+3528]
	042 Move X1, X31
	043 Move X0, [X8]
	044 Call Debug.LogError, X0
	045 Move X8, [X21+32]
	046 Compare X8, 0
	047 JumpIfEqual {53}
	048 Move X9, [X8+24]
	049 Move X0, [X8+64]
	050 Move X2, [X8+40]
	051 Move X1, X19
	052 NotImplemented "Instruction BLR not yet implemented."
	053 Move X0, [X21+16]
	054 Compare X0, 0
	055 JumpIfEqual {67}
	056 Move X8, [X20+32]
	057 Move X1, X19
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X8, [X8+192]
	063 Move X2, [X8+104]
	064 Move X30, [X31+48]
	065 Call Stack`1<Object>.Push, X0, X1
	066 Return 
	067 Call 0x1C17F20

