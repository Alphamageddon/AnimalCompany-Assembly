Type: TMPro.TMP_FontFeatureTable

Method: System.Collections.Generic.List`1<TMPro.TMP_GlyphPairAdjustmentRecord> get_glyphPairAdjustmentRecords()

Disassembly:
	0x03AED044 LDR X0, [X0 + 0x48]
	0x03AED048 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_glyphPairAdjustmentRecords(System.Collections.Generic.List`1<TMPro.TMP_GlyphPairAdjustmentRecord> value)

Disassembly:
	0x03AED04C MOVZ W8, 0x1
	0x03AED050 STRB W8, [X20 + 0x60C]

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x03AE9D58 STR X0, [X8]
	0x03AE9D5C LDR X0, [X19]
	0x03AE9D60 BL 0x3BFE7FC
	0x03AE9D64 LDR X8, [X20]
	0x03AE9D68 MOVZ W1, 0x1
	0x03AE9D6C MOV W2, W31
	0x03AE9D70 MOV W3, W31
	0x03AE9D74 LDR X8, [X8 + 0xB8]
	0x03AE9D78 MOV X4, X31
	0x03AE9D7C STR X0, [X8 + 0x8]
	0x03AE9D80 LDR X0, [X29]
	0x03AE9D84 BL 0x3BFE7FC
	0x03AE9D88 LDR X8, [X20]
	0x03AE9D8C MOVZ W1, 0x1
	0x03AE9D90 MOV W2, W31
	0x03AE9D94 MOV W3, W31
	0x03AE9D98 LDR X8, [X8 + 0xB8]
	0x03AE9D9C MOV X4, X31
	0x03AE9DA0 STR X0, [X8 + 0x10]
	0x03AE9DA4 LDR X0, [X28]
	0x03AE9DA8 BL 0x3BFE7FC
	0x03AE9DAC LDR X8, [X20]
	0x03AE9DB0 MOVZ W1, 0x1
	0x03AE9DB4 MOV W2, W31
	0x03AE9DB8 MOV W3, W31
	0x03AE9DBC LDR X8, [X8 + 0xB8]
	0x03AE9DC0 MOV X4, X31
	0x03AE9DC4 STR X0, [X8 + 0x18]
	0x03AE9DC8 LDR X0, [X27]
	0x03AE9DCC BL 0x3BFE7FC
	0x03AE9DD0 LDR X8, [X20]
	0x03AE9DD4 MOVZ W1, 0x1
	0x03AE9DD8 MOV W2, W31
	0x03AE9DDC MOV W3, W31
	0x03AE9DE0 LDR X8, [X8 + 0xB8]
	0x03AE9DE4 MOV X4, X31
	0x03AE9DE8 STR X0, [X8 + 0x20]
	0x03AE9DEC ADRP X8, 0x66F000
	0x03AE9DF0 LDR X8, [X8 + 0xF28]
	0x03AE9DF4 LDR X0, [X8]
	0x03AE9DF8 BL 0x3BFE7FC
	0x03AE9DFC LDR X8, [X20]
	0x03AE9E00 MOVZ W1, 0x1
	0x03AE9E04 MOV W2, W31
	0x03AE9E08 MOV W3, W31
	0x03AE9E0C LDR X8, [X8 + 0xB8]
	0x03AE9E10 MOV X4, X31
	0x03AE9E14 STR X0, [X8 + 0x28]
	0x03AE9E18 ADRP X8, 0x66F000
	0x03AE9E1C LDR X8, [X8 + 0xF30]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x8FA000
	009 Move X23, 0x670000
	010 Move X20, 0x670000
	011 Move X22, 0x670000
	012 Move X21, 0x670000
	013 Move W8, [X24+1485]
	014 Move X23, [X23+3432]
	015 Move X20, [X20+3736]
	016 Move X22, [X22+3360]
	017 Move X21, [X21+3352]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x670000
	024 Move X0, [X0+3352]
	025 Call 0x1C17CF4
	026 Move X0, 0x670000
	027 Move X0, [X0+3360]
	028 Call 0x1C17CF4
	029 Move X0, 0x670000
	030 Move X0, [X0+3736]
	031 Call 0x1C17CF4
	032 Move X0, 0x670000
	033 Move X0, [X0+3432]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X24+1485], W8
	037 Move X0, X19
	038 Move X1, X31
	039 Call Object..ctor, X0
	040 Move X0, [X23]
	041 Call 0x1C17F10
	042 Move X1, [X20]
	043 Move X20, X0
	044 Call List`1<Object>..ctor, X0
	045 Move [X19+16], X20
	046 Move X0, [X22]
	047 Call 0x1C17F10
	048 Move X1, [X21]
	049 Move X20, X0
	050 Call Dictionary`2<UInt32, Object>..ctor, X0
	051 Move [X19+24], X20
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X22, [X31+32]
	055 Move X21, [X31+40]
	056 Move X24, [X31+16]
	057 Move X23, [X31+24]
	058 Move X30, [X31+64]
	059 Return 

Method: System.Void SortGlyphPairAdjustmentRecords()

Disassembly:
	0x03AE522C LDR X0, [X0 + 0x610]
	0x03AE5230 BL 0x1C16CF4
	0x03AE5234 ADRP X0, 0x673000
	0x03AE5238 LDR X0, [X0 + 0xC48]
	0x03AE523C BL 0x1C16CF4
	0x03AE5240 ADRP X0, 0x60E000
	0x03AE5244 LDR X0, [X0 + 0x598]
	0x03AE5248 BL 0x1C16CF4
	0x03AE524C ADRP X0, 0x673000
	0x03AE5250 LDR X0, [X0 + 0x578]
	0x03AE5254 BL 0x1C16CF4
	0x03AE5258 MOVZ W8, 0x1
	0x03AE525C STRB W8, [X23 + 0x59C]
	0x03AE5260 STR X31, [X31 + 0x8]
	0x03AE5264 LDR X0, [X21 + 0xC8]
	0x03AE5268 CBNZ X0, 0x3AE527C
	0x03AE526C MOV X0, X21
	0x03AE5270 BL 0x3AE1A88
	0x03AE5274 LDR X0, [X21 + 0xC8]
	0x03AE5278 CBZ X0, 0x3AE53D0
	0x03AE527C ADRP X8, 0x673000
	0x03AE5280 LDR X8, [X8 + 0xC88]
	0x03AE5284 MOV W1, W20
	0x03AE5288 LDR X2, [X8]
	0x03AE528C BL 0x2B0F250
	0x03AE5290 TBZ X0, 0x0, 0x3AE529C
	0x03AE5294 MOVZ W24, 0x1
	0x03AE5298 B 0x3AE53D4
	0x03AE529C TBZ X19, 0x0, 0x3AE52CC
	0x03AE52A0 LDR W8, [X21 + 0x48]
	0x03AE52A4 CMP W8, 0x1
	0x03AE52A8 B.NE 0x3AE52CC
	0x03AE52AC ADD X2, X31, 0x8
	0x03AE52B0 MOV X0, X21
	0x03AE52B4 MOV W1, W20
	0x03AE52B8 BL 0x3AE4974
	0x03AE52BC MOV W24, W0
	0x03AE52C0 TBNZ X0, 0x0, 0x3AE53D4
	0x03AE52C4 TBNZ X22, 0x0, 0x3AE52D0
	0x03AE52C8 B 0x3AE53D4
	0x03AE52CC TBZ X22, 0x0, 0x3AE53D0
	0x03AE52D0 LDR X0, [X21 + 0x138]
	0x03AE52D4 CBZ X0, 0x3AE53D0
	0x03AE52D8 LDR W8, [X0 + 0x18]
	0x03AE52DC CMP W8, 0x1
	0x03AE52E0 B.LT 0x3AE53D0
	0x03AE52E4 ADRP X25, 0x673000
	0x03AE52E8 ADRP X26, 0x60E000
	0x03AE52EC ADRP X27, 0x673000
	0x03AE52F0 ADRP X28, 0x610000
	0x03AE52F4 LDR X25, [X25 + 0xC48]
	0x03AE52F8 LDR X26, [X26 + 0x598]
	0x03AE52FC LDR X27, [X27 + 0x578]
	0x03AE5300 LDR X28, [X28 + 0x9D8]
	0x03AE5304 MOV W22, W31
	0x03AE5308 LDR X2, [X25]
	0x03AE530C MOV W1, W22
	0x03AE5310 BL 0x301BCCC
	0x03AE5314 LDR X8, [X26]
	0x03AE5318 MOV X23, X0
	0x03AE531C LDR W9, [X8 + 0xE0]
	0x03AE5320 CBNZ W9, 0x3AE532C
	0x03AE5324 MOV X0, X8
	0x03AE5328 BL 0x1C16DFC
	0x03AE532C MOV X0, X23
	0x03AE5330 MOV X1, X31
	0x03AE5334 MOV X2, X31
	0x03AE5338 BL 0x3C354F8
	0x03AE533C TBZ X0, 0x0, 0x3AE53D0
	0x03AE5340 LDR X0, [X21 + 0x138]
	0x03AE5344 CBZ X0, 0x3AE53F4
	0x03AE5348 LDR X2, [X25]
	0x03AE534C MOV W1, W22
	0x03AE5350 BL 0x301BCCC
	0x03AE5354 CBZ X0, 0x3AE53F4
	0x03AE5358 MOV X1, X31
	0x03AE535C MOV X23, X0
	0x03AE5360 BL 0x3C385F8
	0x03AE5364 LDR X8, [X27]
	0x03AE5368 MOV W24, W0
	0x03AE536C LDR W9, [X8 + 0xE0]
	0x03AE5370 CBNZ W9, 0x3AE5380
	0x03AE5374 MOV X0, X8
	0x03AE5378 BL 0x1C16DFC
	0x03AE537C LDR X8, [X27]
	0x03AE5380 LDR X8, [X8 + 0xB8]
	0x03AE5384 LDR X0, [X8 + 0x40]
	0x03AE5388 CBZ X0, 0x3AE53F4
	0x03AE538C LDR X2, [X28]
	0x03AE5390 MOV W1, W24
	0x03AE5394 BL 0x2DAB03C
	0x03AE5398 TBZ X0, 0x0, 0x3AE53B8
	0x03AE539C AND W3, W19, 0x1
	0x03AE53A0 MOVZ W2, 0x1
	0x03AE53A4 MOV X0, X23
	0x03AE53A8 MOV W1, W20
	0x03AE53AC MOVZ W24, 0x1
	0x03AE53B0 BL 0x3AE51DC
	0x03AE53B4 TBNZ X0, 0x0, 0x3AE53D4
	0x03AE53B8 LDR X0, [X21 + 0x138]
	0x03AE53BC CBZ X0, 0x3AE53F4
	0x03AE53C0 LDR W8, [X0 + 0x18]
	0x03AE53C4 ADD W22, W22, 0x1
	0x03AE53C8 CMP W22, W8
	0x03AE53CC B.LT 0x3AE5308
	0x03AE53D0 MOV W24, W31
	0x03AE53D4 AND W0, W24, 0x1
	0x03AE53D8 LDP X20, X19, [X31 + 0x50]
	0x03AE53DC LDP X22, X21, [X31 + 0x40]
	0x03AE53E0 LDP X24, X23, [X31 + 0x30]
	0x03AE53E4 LDP X26, X25, [X31 + 0x20]
	0x03AE53E8 LDP X28, X27, [X31 + 0x10]
	0x03AE53EC LDR X30, [X31], #0x60
	0x03AE53F0 RET
	0x03AE53F4 BL 0x1C16F20
	0x03AE53F8 STP X30, X25, [X31 - 0x40]!
	0x03AE53FC STP X24, X23, [X31 + 0x10]
	0x03AE5400 STP X22, X21, [X31 + 0x20]
	0x03AE5404 STP X20, X19, [X31 + 0x30]
	0x03AE5408 ADRP X22, 0x8FD000
	0x03AE540C LDRB W8, [X22 + 0x59D]
	0x03AE5410 MOV X19, X2
	0x03AE5414 MOV X20, X1

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x8FE000
	010 Move W8, [X20+1486]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {42}
	016 Move X0, 0x674000
	017 Move X0, [X0+3528]
	018 Call 0x1C17CF4
	019 Move X0, 0x674000
	020 Move X0, [X0+3536]
	021 Call 0x1C17CF4
	022 Move X0, 0x674000
	023 Move X0, [X0+3544]
	024 Call 0x1C17CF4
	025 Move X0, 0x674000
	026 Move X0, [X0+3552]
	027 Call 0x1C17CF4
	028 Move X0, 0x674000
	029 Move X0, [X0+3376]
	030 Call 0x1C17CF4
	031 Move X0, 0x674000
	032 Move X0, [X0+3560]
	033 Call 0x1C17CF4
	034 Move X0, 0x674000
	035 Move X0, [X0+3568]
	036 Call 0x1C17CF4
	037 Move X0, 0x674000
	038 Move X0, [X0+3576]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+1486], W8
	042 Move X20, [X19+16]
	043 Compare X20, 0
	044 JumpIfEqual {140}
	045 Move W8, [X20+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X23, 0x674000
	048 Move X23, [X23+3576]
	049 Move X0, [X23]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {55}
	053 Call 0x1C17DFC
	054 Move X0, [X23]
	055 Move X8, [X0+184]
	056 Move X24, 0x674000
	057 Move X21, [X8+8]
	058 Move X24, [X24+3528]
	059 Compare X21, 0
	060 JumpIfNotEqual {82}
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {66}
	064 Call 0x1C17DFC
	065 Move X0, [X23]
	066 Move X9, 0x674000
	067 Move X8, [X0+184]
	068 Move X9, [X9+3552]
	069 Move X22, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0x674000
	073 Move X8, [X8+3560]
	074 Move X1, X22
	075 Move X3, X31
	076 Move X21, X0
	077 Move X2, [X8]
	078 Call Func`2<Object, UInt32>..ctor, X0, X1, X2
	079 Move X8, [X23]
	080 Move X8, [X8+184]
	081 Move [X8+8], X21
	082 Move X2, [X24]
	083 Move X0, X20
	084 Move X1, X21
	085 Call Enumerable.OrderBy, X0, X1
	086 Move X8, [X23]
	087 Move X20, X0
	088 Move W9, [X8+224]
	089 Compare W9, 0
	090 JumpIfNotEqual {94}
	091 Move X0, X8
	092 Call 0x1C17DFC
	093 Move X8, [X23]
	094 Move X9, [X8+184]
	095 Move X25, 0x674000
	096 Move X24, 0x674000
	097 Move X21, [X9+16]
	098 Move X25, [X25+3536]
	099 Move X24, [X24+3544]
	100 Compare X21, 0
	101 JumpIfNotEqual {124}
	102 Move W9, [X8+224]
	103 Compare W9, 0
	104 JumpIfNotEqual {108}
	105 Move X0, X8
	106 Call 0x1C17DFC
	107 Move X8, [X23]
	108 Move X9, 0x674000
	109 Move X8, [X8+184]
	110 Move X9, [X9+3552]
	111 Move X22, [X8]
	112 Move X0, [X9]
	113 Call 0x1C17F10
	114 Move X8, 0x674000
	115 Move X8, [X8+3568]
	116 Move X1, X22
	117 Move X3, X31
	118 Move X21, X0
	119 Move X2, [X8]
	120 Call Func`2<Object, UInt32>..ctor, X0, X1, X2
	121 Move X8, [X23]
	122 Move X8, [X8+184]
	123 Move [X8+16], X21
	124 Move X2, [X25]
	125 Move X0, X20
	126 Move X1, X21
	127 Call Enumerable.ThenBy, X0, X1
	128 Move X1, [X24]
	129 Call Enumerable.ToList, X0
	130 Move [X19+16], X0
	131 Move X20, [X31+48]
	132 Move X19, [X31+56]
	133 Move X22, [X31+32]
	134 Move X21, [X31+40]
	135 Move X24, [X31+16]
	136 Move X23, [X31+24]
	137 Move X30, [X31+64]
	138 Move X25, [X31+72]
	139 Return 
	140 Call 0x1C17F20

