Type: TMPro.HighlightState

Method: System.Void .ctor(UnityEngine.Color32 color, TMPro.TMP_Offset padding)

Disassembly:
	0x03ADCDE8 ADRP X0, 0x67C000
	0x03ADCDEC LDR X0, [X0 + 0x558]
	0x03ADCDF0 BL 0x1C16CF4
	0x03ADCDF4 ADRP X0, 0x67C000

ISIL:
	001 Move [X0], W1
	002 Move [X0+4], S0
	003 Move [X0+12], S1
	004 Move [X0+12], S2
	005 Move [X0+20], S3
	006 Return 

Method: System.Boolean op_Equality(TMPro.HighlightState lhs, TMPro.HighlightState rhs)

Disassembly:
	0x03ADCDF8 LDR X0, [X0 + 0x910]
	0x03ADCDFC BL 0x1C16CF4
	0x03ADCE00 ADRP X0, 0x677000
	0x03ADCE04 LDR X0, [X0 + 0xB40]
	0x03ADCE08 BL 0x1C16CF4
	0x03ADCE0C ADRP X0, 0x617000
	0x03ADCE10 LDR X0, [X0 + 0xA58]
	0x03ADCE14 BL 0x1C16CF4
	0x03ADCE18 ADRP X0, 0x67C000
	0x03ADCE1C LDR X0, [X0 + 0x8D8]
	0x03ADCE20 BL 0x1C16CF4
	0x03ADCE24 ADRP X0, 0x67C000
	0x03ADCE28 LDR X0, [X0 + 0x918]
	0x03ADCE2C BL 0x1C16CF4
	0x03ADCE30 ADRP X0, 0x669000
	0x03ADCE34 LDR X0, [X0 + 0x350]
	0x03ADCE38 BL 0x1C16CF4
	0x03ADCE3C MOVZ W8, 0x1
	0x03ADCE40 STRB W8, [X19 + 0x568]
	0x03ADCE44 LDR X0, [X23]
	0x03ADCE48 ADRP X24, 0x669000
	0x03ADCE4C ADRP X19, 0x617000
	0x03ADCE50 ADRP X21, 0x67C000
	0x03ADCE54 LDR W8, [X0 + 0xE0]
	0x03ADCE58 LDR X24, [X24 + 0x350]
	0x03ADCE5C LDR X19, [X19 + 0xA58]
	0x03ADCE60 LDR X21, [X21 + 0x918]
	0x03ADCE64 CBNZ W8, 0x3ADCE70
	0x03ADCE68 BL 0x1C16DFC
	0x03ADCE6C LDR X0, [X23]
	0x03ADCE70 LDR X8, [X0 + 0xB8]
	0x03ADCE74 LDR X0, [X24]
	0x03ADCE78 LDP S0, S1, [X8 + 0x8]
	0x03ADCE7C BL 0x3ADC6A8
	0x03ADCE80 LDR X8, [X19]
	0x03ADCE84 MOV X19, X0
	0x03ADCE88 MOV X0, X8
	0x03ADCE8C BL 0x1C16F10
	0x03ADCE90 LDR X1, [X21]
	0x03ADCE94 MOV X2, X31
	0x03ADCE98 MOV X21, X0
	0x03ADCE9C BL 0x3C35934
	0x03ADCEA0 CBZ X21, 0x3ADD064
	0x03ADCEA4 ADRP X8, 0x67C000
	0x03ADCEA8 LDR X8, [X8 + 0x558]
	0x03ADCEAC MOV X0, X21
	0x03ADCEB0 LDR X1, [X8]
	0x03ADCEB4 BL 0x21E51FC
	0x03ADCEB8 MOV X0, X21
	0x03ADCEBC MOV X1, X19
	0x03ADCEC0 BL 0x3ADC810

ISIL:
	001 Move [X31-96], D15
	002 Move [X31-88], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X21, 0x907000
	014 Move W8, [X21+1365]
	015 Move X19, X1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x67D000
	022 Move X0, [X0+848]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+1365], W8
	026 Move W0, [X20]
	027 Move W1, [X19]
	028 Move X2, X31
	029 Call TMPro_ExtensionMethods.Compare, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {60}
	034 Move X8, 0x67D000
	035 Move X8, [X8+848]
	036 Move S9, [X20+4]
	037 Move S8, [X20+8]
	038 Move S12, [X20+12]
	039 Move S10, [X20+16]
	040 Move S15, [X19+4]
	041 Move S14, [X19+8]
	042 Move X0, [X8]
	043 Move S13, [X19+12]
	044 Move S11, [X19+16]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 NotImplemented "Instruction FCMP not yet implemented."
	050 NotImplemented "Instruction CSET not yet implemented."
	051 NotImplemented "Instruction FCMP not yet implemented."
	052 NotImplemented "Instruction CSET not yet implemented."
	053 NotImplemented "Instruction FCMP not yet implemented."
	054 And W8, W8, W9
	055 NotImplemented "Instruction CSET not yet implemented."
	056 NotImplemented "Instruction FCMP not yet implemented."
	057 And W8, W9, W8
	058 NotImplemented "Instruction CSET not yet implemented."
	059 And W0, W8, W9
	060 Move W0, W31
	061 Move X20, [X31+80]
	062 Move X19, [X31+88]
	063 Move X30, [X31+64]
	064 Move X21, [X31+72]
	065 Move D9, [X31+48]
	066 Move D8, [X31+56]
	067 Move D11, [X31+32]
	068 Move D10, [X31+40]
	069 Move D13, [X31+16]
	070 Move D12, [X31+24]
	071 Move D15, [X31+96]
	072 Move D14, [X31+104]
	073 Return X0

Method: System.Boolean op_Inequality(TMPro.HighlightState lhs, TMPro.HighlightState rhs)

Disassembly:
	0x03ADCEC4 CBZ X19, 0x3ADD064
	0x03ADCEC8 ADRP X8, 0x67C000
	0x03ADCECC LDR X8, [X8 + 0x8E0]
	0x03ADCED0 MOV X0, X19
	0x03ADCED4 LDR X1, [X8]
	0x03ADCED8 BL 0x21E51FC
	0x03ADCEDC CBZ X0, 0x3ADD064
	0x03ADCEE0 LDR X1, [X20]
	0x03ADCEE4 ADRP X20, 0x67C000
	0x03ADCEE8 ADRP X25, 0x67C000
	0x03ADCEEC LDR X20, [X20 + 0x908]
	0x03ADCEF0 LDR X25, [X25 + 0x910]
	0x03ADCEF4 MOV X2, X31
	0x03ADCEF8 MOV X22, X0
	0x03ADCEFC BL 0x3CD3398
	0x03ADCF00 MOVZ W1, 0x1
	0x03ADCF04 MOV X0, X22
	0x03ADCF08 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move W8, [X0+16]
	004 Move V0, [X0]
	005 Add X0, X31, 32
	006 Move [X31+48], W8
	007 Move [X31+2], V0
	008 Move W8, [X1+16]
	009 Move V0, [X1]
	010 Add X1, X31, 0
	011 Move [X31+16], W8
	012 Move [X31], V0
	013 Call HighlightState.op_Equality, X0, X1
	014 Move X30, [X31+64]
	015 NotImplemented "Instruction ORN not yet implemented."
	016 And W0, W8, 1
	017 Add X31, X31, 80
	018 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03ADCF0C BL 0x3CD364C
	0x03ADCF10 LDR X8, [X23]
	0x03ADCF14 LDR X9, [X22]
	0x03ADCF18 MOV X0, X22
	0x03ADCF1C LDR X8, [X8 + 0xB8]
	0x03ADCF20 LDR X10, [X9 + 0x2A8]
	0x03ADCF24 LDR X1, [X9 + 0x2B0]
	0x03ADCF28 LDP S0, S1, [X8 + 0x18]
	0x03ADCF2C LDP S2, S3, [X8 + 0x20]
	0x03ADCF30 BLR X10
	0x03ADCF34 LDR X1, [X20]
	0x03ADCF38 MOV X0, X19
	0x03ADCF3C BL 0x21E51FC
	0x03ADCF40 BL 0x3ADC998
	0x03ADCF44 LDR X1, [X25]
	0x03ADCF48 MOV X0, X21
	0x03ADCF4C BL 0x21E51FC
	0x03ADCF50 CBZ X0, 0x3ADD064
	0x03ADCF54 LDR X8, [X0]
	0x03ADCF58 LDR X1, [X24]
	0x03ADCF5C ADRP X22, 0x677000
	0x03ADCF60 MOV X20, X0
	0x03ADCF64 LDR X9, [X8 + 0x558]
	0x03ADCF68 LDR X2, [X8 + 0x560]
	0x03ADCF6C LDR X22, [X22 + 0xB40]
	0x03ADCF70 BLR X9
	0x03ADCF74 MOVZ W1, 0x202

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x907000
	007 Move X20, 0x67D000
	008 Move W8, [X21+1366]
	009 Move X20, [X20+2184]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x67D000
	016 Move X0, [X0+2184]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1366], W8
	020 Move W8, [X19+16]
	021 Move V0, [X19]
	022 Move X0, [X20]
	023 Add X1, X31, 0
	024 Move [X31+16], W8
	025 Move [X31], V0
	026 Call 0x1C17E04
	027 Move X1, X31
	028 Call ValueType.GetHashCode, X0
	029 Move X20, [X31+48]
	030 Move X19, [X31+56]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Add X31, X31, 64
	034 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03ADCF78 MOV X0, X20
	0x03ADCF7C MOV X2, X31
	0x03ADCF80 BL 0x3AF80D0
	0x03ADCF84 MOV X0, X20
	0x03ADCF88 BL 0x3ADC910
	0x03ADCF8C LDR X1, [X22]
	0x03ADCF90 MOV X0, X21
	0x03ADCF94 BL 0x21E52E4
	0x03ADCF98 ADRP X21, 0x8FD000
	0x03ADCF9C LDRB W8, [X21 + 0x78F]
	0x03ADCFA0 MOV X20, X0
	0x03ADCFA4 CBNZ W8, 0x3ADCFBC
	0x03ADCFA8 ADRP X0, 0x61F000
	0x03ADCFAC LDR X0, [X0 + 0xF08]
	0x03ADCFB0 BL 0x1C16CF4
	0x03ADCFB4 MOVZ W8, 0x1
	0x03ADCFB8 STRB W8, [X21 + 0x78F]
	0x03ADCFBC CBZ X20, 0x3ADD064
	0x03ADCFC0 ADRP X22, 0x61F000
	0x03ADCFC4 LDR X22, [X22 + 0xF08]
	0x03ADCFC8 MOV X0, X20
	0x03ADCFCC MOV X1, X31
	0x03ADCFD0 LDR X8, [X22]
	0x03ADCFD4 LDR X8, [X8 + 0xB8]
	0x03ADCFD8 LDP S0, S1, [X8]
	0x03ADCFDC BL 0x3C3E648
	0x03ADCFE0 ADRP X23, 0x905000
	0x03ADCFE4 LDRB W8, [X23 + 0xA48]
	0x03ADCFE8 CBNZ W8, 0x3ADD000
	0x03ADCFEC ADRP X0, 0x61F000
	0x03ADCFF0 LDR X0, [X0 + 0xF08]
	0x03ADCFF4 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X22, 0x907000
	008 Move X21, 0x67D000
	009 Move W8, [X22+1367]
	010 Move X21, [X21+2184]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x67D000
	018 Move X0, [X0+2184]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+1367], W8
	022 Move W8, [X20+16]
	023 Move V0, [X20]
	024 Move X0, [X21]
	025 Add X1, X31, 0
	026 Move [X31+16], W8
	027 Move [X31], V0
	028 Call 0x1C17E04
	029 Move X1, X19
	030 Move X2, X31
	031 Call ValueType.Equals, X0, X1
	032 Move X20, [X31+64]
	033 Move X19, [X31+72]
	034 Move X22, [X31+48]
	035 Move X21, [X31+56]
	036 Move X30, [X31+32]
	037 And W0, W0, 1
	038 Add X31, X31, 80
	039 Return X0

Method: System.Boolean Equals(TMPro.HighlightState other)

Disassembly:
	0x03ADCFF8 MOVZ W8, 0x1
	0x03ADCFFC STRB W8, [X23 + 0xA48]
	0x03ADD000 LDR X8, [X22]
	0x03ADD004 MOV X0, X20
	0x03ADD008 MOV X1, X31
	0x03ADD00C LDR X8, [X8 + 0xB8]
	0x03ADD010 LDP S0, S1, [X8 + 0x8]
	0x03ADD014 BL 0x3C3E764
	0x03ADD018 LDRB W8, [X21 + 0x78F]
	0x03ADD01C CBNZ W8, 0x3ADD034
	0x03ADD020 ADRP X0, 0x61E000
	0x03ADD024 LDR X0, [X0 + 0xF08]
	0x03ADD028 BL 0x1C16CF4
	0x03ADD02C MOVZ W8, 0x1
	0x03ADD030 STRB W8, [X21 + 0x78F]
	0x03ADD034 LDR X8, [X22]
	0x03ADD038 MOV X0, X20
	0x03ADD03C MOV X1, X31
	0x03ADD040 LDR X8, [X8 + 0xB8]
	0x03ADD044 LDP S0, S1, [X8]
	0x03ADD048 BL 0x3C3E99C
	0x03ADD04C MOV X0, X19
	0x03ADD050 LDP X20, X19, [X31 + 0x30]
	0x03ADD054 LDP X22, X21, [X31 + 0x20]
	0x03ADD058 LDP X24, X23, [X31 + 0x10]
	0x03ADD05C LDP X30, X25, [X31], #0x40
	0x03ADD060 RET
	0x03ADD064 BL 0x1C16F20
	0x03ADD068 STR X30, [X31 - 0x20]!
	0x03ADD06C STP X20, X19, [X31 + 0x10]
	0x03ADD070 ADRP X20, 0x905000
	0x03ADD074 ADRP X19, 0x67B000
	0x03ADD078 LDRB W8, [X20 + 0x569]
	0x03ADD07C LDR X19, [X19 + 0x8D8]
	0x03ADD080 TBNZ X8, 0x0, 0x3ADD0B0
	0x03ADD084 ADRP X0, 0x67B000
	0x03ADD088 LDR X0, [X0 + 0x910]
	0x03ADD08C BL 0x1C16CF4
	0x03ADD090 ADRP X0, 0x67B000
	0x03ADD094 LDR X0, [X0 + 0x8D8]
	0x03ADD098 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X22, 0x906000
	008 Move X21, 0x67C000
	009 Move W8, [X22+1368]
	010 Move X21, [X21+2184]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x67C000
	018 Move X0, [X0+2184]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+1368], W8
	022 Move W8, [X20+16]
	023 Move V0, [X20]
	024 Move X0, [X21]
	025 Add X1, X31, 32
	026 Move [X31+48], W8
	027 Move [X31+2], V0
	028 Call 0x1C17E04
	029 Move X20, X0
	030 Move W8, [X19+16]
	031 Move V0, [X19]
	032 Move X0, [X21]
	033 Add X1, X31, 0
	034 Move [X31+16], W8
	035 Move [X31], V0
	036 Call 0x1C17E04
	037 Move X1, X0
	038 Move X0, X20
	039 Move X2, X31
	040 Call ValueType.Equals, X0, X1
	041 Move X20, [X31+96]
	042 Move X19, [X31+104]
	043 Move X22, [X31+80]
	044 Move X21, [X31+88]
	045 Move X30, [X31+64]
	046 And W0, W0, 1
	047 Add X31, X31, 112
	048 Return X0

