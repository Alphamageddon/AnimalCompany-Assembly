Type: TMPro.TMP_SpriteAnimator/<DoSpriteAnimationInternal>d__7

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x03B17230 MOV X1, X31
	0x03B17234 BL 0x32277A8
	0x03B17238 TBZ X0, 0x0, 0x3B1724C
	0x03B1723C MOV X0, X19
	0x03B17240 LDP X20, X19, [X31 + 0x10]
	0x03B17244 LDP X30, X21, [X31], #0x20
	0x03B17248 B 0x3B17258
	0x03B1724C LDP X20, X19, [X31 + 0x10]
	0x03B17250 LDP X30, X21, [X31], #0x20
	0x03B17254 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x03B172D8 BL 0x1C16CF4

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x03B172DC ADRP X0, 0x642000
	0x03B172E0 LDR X0, [X0 + 0x920]
	0x03B172E4 BL 0x1C16CF4
	0x03B172E8 ADRP X0, 0x5DC000
	0x03B172EC LDR X0, [X0 + 0xAC8]
	0x03B172F0 BL 0x1C16CF4
	0x03B172F4 ADRP X0, 0x642000
	0x03B172F8 LDR X0, [X0 + 0x928]
	0x03B172FC BL 0x1C16CF4
	0x03B17300 ADRP X0, 0x642000
	0x03B17304 LDR X0, [X0 + 0x930]
	0x03B17308 BL 0x1C16CF4
	0x03B1730C ADRP X0, 0x641000
	0x03B17310 LDR X0, [X0 + 0xBF0]
	0x03B17314 BL 0x1C16CF4
	0x03B17318 ADRP X0, 0x641000
	0x03B1731C LDR X0, [X0 + 0xC70]
	0x03B17320 BL 0x1C16CF4
	0x03B17324 ADRP X0, 0x642000
	0x03B17328 LDR X0, [X0 + 0x938]
	0x03B1732C BL 0x1C16CF4
	0x03B17330 ADRP X0, 0x5E5000
	0x03B17334 LDR X0, [X0 + 0x790]
	0x03B17338 BL 0x1C16CF4
	0x03B1733C MOVZ W8, 0x1
	0x03B17340 STRB W8, [X21 + 0x6C4]
	0x03B17344 LDR X8, [X22]
	0x03B17348 MOVZ W1, 0x5
	0x03B1734C STR X8, [X19 + 0x40]
	0x03B17350 LDR X0, [X20]
	0x03B17354 BL 0x1C16D6C
	0x03B17358 CBZ X0, 0x3B176B8
	0x03B1735C LDR W8, [X0 + 0x18]
	0x03B17360 MOV X20, X0
	0x03B17364 CBZ W8, 0x3B176E4
	0x03B17368 ADRP X8, 0x642000
	0x03B1736C LDR X8, [X8 + 0x938]
	0x03B17370 MOV X0, X19
	0x03B17374 MOV X1, X31
	0x03B17378 LDR X8, [X8]
	0x03B1737C STR X8, [X20 + 0x20]
	0x03B17380 BL 0x3C389D4
	0x03B17384 LDR W8, [X20 + 0x18]
	0x03B17388 CMP W8, 0x1
	0x03B1738C B.LS 0x3B176E4
	0x03B17390 CMP W8, 0x2
	0x03B17394 STR X0, [X20 + 0x28]
	0x03B17398 B.EQ 0x3B176E4
	0x03B1739C ADRP X9, 0x641000
	0x03B173A0 LDR X9, [X9 + 0xC70]
	0x03B173A4 CMP W8, 0x3
	0x03B173A8 LDR X9, [X9]
	0x03B173AC STR X9, [X20 + 0x30]
	0x03B173B0 B.LS 0x3B176E4
	0x03B173B4 LDR X9, [X19 + 0x40]
	0x03B173B8 CMP W8, 0x4
	0x03B173BC STR X9, [X20 + 0x38]
	0x03B173C0 B.EQ 0x3B176E4
	0x03B173C4 ADRP X8, 0x5E5000
	0x03B173C8 LDR X8, [X8 + 0x790]
	0x03B173CC ADRP X21, 0x5DC000
	0x03B173D0 MOV X0, X20
	0x03B173D4 MOV X1, X31
	0x03B173D8 LDR X8, [X8]
	0x03B173DC LDR X21, [X21 + 0xA28]
	0x03B173E0 STR X8, [X20 + 0x40]
	0x03B173E4 BL 0x32278CC
	0x03B173E8 LDR X8, [X21]
	0x03B173EC MOV X20, X0
	0x03B173F0 LDR W9, [X8 + 0xE0]
	0x03B173F4 CBNZ W9, 0x3B17400
	0x03B173F8 MOV X0, X8
	0x03B173FC BL 0x1C16DFC
	0x03B17400 MOV X0, X20
	0x03B17404 MOV X1, X19
	0x03B17408 MOV X2, X31
	0x03B1740C BL 0x3C06150
	0x03B17410 LDR X8, [X19 + 0xB0]
	0x03B17414 CBZ X8, 0x3B176B8
	0x03B17418 LDP W2, W9, [X8 + 0x18]
	0x03B1741C ADD W9, W9, 0x1
	0x03B17420 CMP W2, 0x1
	0x03B17424 STP W31, W9, [X8 + 0x18]
	0x03B17428 B.LT 0x3B1743C
	0x03B1742C LDR X0, [X8 + 0x10]
	0x03B17430 MOV W1, W31
	0x03B17434 MOV X3, X31
	0x03B17438 BL 0x339FA34
	0x03B1743C LDR X8, [X19 + 0xC0]
	0x03B17440 CBZ X8, 0x3B176B8
	0x03B17444 LDP W2, W9, [X8 + 0x18]
	0x03B17448 ADD W9, W9, 0x1
	0x03B1744C CMP W2, 0x1
	0x03B17450 STP W31, W9, [X8 + 0x18]
	0x03B17454 B.LT 0x3B17468
	0x03B17458 LDR X0, [X8 + 0x10]
	0x03B1745C MOV W1, W31
	0x03B17460 MOV X3, X31
	0x03B17464 BL 0x339FA34
	0x03B17468 LDR X0, [X19 + 0xD0]
	0x03B1746C CBZ X0, 0x3B176B8
	0x03B17470 ADRP X27, 0x642000
	0x03B17474 ADRP X28, 0x642000
	0x03B17478 LDR X27, [X27 + 0x928]
	0x03B1747C LDR X28, [X28 + 0x8F8]
	0x03B17480 MOV W20, W31
	0x03B17484 MOVZ W29, 0x7F800000
	0x03B17488 MOVZ W24, 0x80000000
	0x03B1748C MOVZ W25, 0x2
	0x03B17490 MOVZ W26, 0xFFFE
	0x03B17494 LDR W8, [X0 + 0x18]
	0x03B17498 CMP W20, W8
	0x03B1749C B.GE 0x3B176BC
	0x03B174A0 ADRP X8, 0x642000
	0x03B174A4 LDR X8, [X8 + 0x920]
	0x03B174A8 MOV W1, W20
	0x03B174AC LDR X2, [X8]
	0x03B174B0 BL 0x301BCCC
	0x03B174B4 ADRP X8, 0x642000
	0x03B174B8 LDR X8, [X8 + 0x930]
	0x03B174BC MOV X21, X0
	0x03B174C0 LDR X8, [X8]
	0x03B174C4 MOV X0, X8
	0x03B174C8 BL 0x1C16F10
	0x03B174CC MOV X1, X31
	0x03B174D0 MOV X22, X0
	0x03B174D4 BL 0x3C9C500
	0x03B174D8 CBZ X22, 0x3B176B8
	0x03B174DC MOV X0, X22
	0x03B174E0 MOV W1, W20
	0x03B174E4 MOV X2, X31
	0x03B174E8 BL 0x3C9C49C
	0x03B174EC CBZ X21, 0x3B176B8
	0x03B174F0 LDR X8, [X21 + 0x50]
	0x03B174F4 ADD X0, X31, 0x28
	0x03B174F8 MOV X1, X31
	0x03B174FC STR X8, [X22 + 0x48]
	0x03B17500 LDP S0, S1, [X21 + 0x1C]
	0x03B17504 LDP S2, S3, [X21 + 0x24]
	0x03B17508 LDR V4, [X21 + 0x2C]
	0x03B1750C STP X31, X31, [X31 + 0x28]
	0x03B17510 STR W31, [X31 + 0x38]
	0x03B17514 BL 0x3C9C2F4
	0x03B17518 LDUR V0, [X31 + 0x28]
	0x03B1751C LDR W8, [X31 + 0x38]
	0x03B17520 ADD X1, X31, 0x10
	0x03B17524 MOV X0, X22
	0x03B17528 MOV X2, X31
	0x03B1752C STR V0, [X31 + 0x1]
	0x03B17530 STR W8, [X31 + 0x20]
	0x03B17534 BL 0x3C9C4B8
	0x03B17538 LDP S0, S1, [X21 + 0x14]
	0x03B1753C LDP S2, S3, [X21 + 0x1C]
	0x03B17540 FMOV S4, W29
	0x03B17544 ADD X0, X31, 0x0
	0x03B17548 FCVTZS W8, S0
	0x03B1754C FCMP S0, S4
	0x03B17550 FCVTZS W9, S1
	0x03B17554 CSEL W1, W24, W8, EQ
	0x03B17558 FCMP S1, S4
	0x03B1755C FCVTZS W10, S2
	0x03B17560 CSEL W2, W24, W9, EQ
	0x03B17564 FCMP S2, S4
	0x03B17568 FCVTZS W11, S3
	0x03B1756C CSEL W3, W24, W10, EQ
	0x03B17570 FCMP S3, S4
	0x03B17574 CSEL W4, W24, W11, EQ
	0x03B17578 MOV X5, X31
	0x03B1757C STP X31, X31, [X31]
	0x03B17580 BL 0x3C9C108
	0x03B17584 LDP X1, X2, [X31]
	0x03B17588 MOV X0, X22
	0x03B1758C MOV X3, X31
	0x03B17590 BL 0x3C9C4D8
	0x03B17594 FMOV S0, 1
	0x03B17598 MOV X0, X22
	0x03B1759C MOV X1, X31
	0x03B175A0 BL 0x3C9C4E8
	0x03B175A4 MOV X0, X22
	0x03B175A8 MOV W1, W31
	0x03B175AC MOV X2, X31
	0x03B175B0 BL 0x3C9C4F8
	0x03B175B4 LDR X0, [X19 + 0xC0]
	0x03B175B8 CBZ X0, 0x3B176B8
	0x03B175BC ADRP X9, 0x642000
	0x03B175C0 LDR W10, [X0 + 0x1C]
	0x03B175C4 LDR X8, [X0 + 0x10]
	0x03B175C8 LDR X9, [X9 + 0x900]
	0x03B175CC ADD W10, W10, 0x1
	0x03B175D0 LDR X9, [X9]
	0x03B175D4 STR W10, [X0 + 0x1C]
	0x03B175D8 CBZ X8, 0x3B176B8
	0x03B175DC LDRSW X10, [X0 + 0x18]
	0x03B175E0 LDR W11, [X8 + 0x18]
	0x03B175E4 CMP W10, W11
	0x03B175E8 B.CS 0x3B17600
	0x03B175EC ADD W9, W10, 0x1
	0x03B175F0 ADD X8, X8, X10, 0x3, LSL
	0x03B175F4 STR W9, [X0 + 0x18]
	0x03B175F8 STR X22, [X8 + 0x20]
	0x03B175FC B 0x3B17614
	0x03B17600 LDR X8, [X9 + 0x20]
	0x03B17604 MOV X1, X22
	0x03B17608 LDR X8, [X8 + 0xC0]
	0x03B1760C LDR X2, [X8 + 0x70]
	0x03B17610 BL 0x301BF90
	0x03B17614 LDR X0, [X27]
	0x03B17618 BL 0x1C16F10
	0x03B1761C MOV X1, X31
	0x03B17620 MOV X23, X0
	0x03B17624 BL 0x33BDD8C
	0x03B17628 STRB W25, [X23 + 0x10]
	0x03B1762C STR X22, [X23 + 0x20]
	0x03B17630 LDR W8, [X21 + 0x44]
	0x03B17634 MOV X0, X23
	0x03B17638 CMP W8, 0x0
	0x03B1763C CSEL W8, W26, W8, EQ
	0x03B17640 STR W8, [X23 + 0x14]
	0x03B17644 LDR X1, [X21 + 0x38]
	0x03B17648 BL 0x3B18650
	0x03B1764C LDR V0, [X21 + 0x30]
	0x03B17650 STR S0, [X23 + 0x2C]
	0x03B17654 LDR X0, [X19 + 0xB0]
	0x03B17658 CBZ X0, 0x3B176B8
	0x03B1765C LDR W10, [X0 + 0x1C]
	0x03B17660 LDR X8, [X0 + 0x10]
	0x03B17664 LDR X9, [X28]
	0x03B17668 ADD W10, W10, 0x1
	0x03B1766C STR W10, [X0 + 0x1C]
	0x03B17670 CBZ X8, 0x3B176B8
	0x03B17674 LDRSW X10, [X0 + 0x18]
	0x03B17678 LDR W11, [X8 + 0x18]
	0x03B1767C CMP W10, W11
	0x03B17680 B.CS 0x3B17698
	0x03B17684 ADD W9, W10, 0x1
	0x03B17688 ADD X8, X8, X10, 0x3, LSL
	0x03B1768C STR W9, [X0 + 0x18]
	0x03B17690 STR X23, [X8 + 0x20]
	0x03B17694 B 0x3B176AC
	0x03B17698 LDR X8, [X9 + 0x20]
	0x03B1769C MOV X1, X23
	0x03B176A0 LDR X8, [X8 + 0xC0]
	0x03B176A4 LDR X2, [X8 + 0x70]
	0x03B176A8 BL 0x301BF90
	0x03B176AC LDR X0, [X19 + 0xD0]
	0x03B176B0 ADD W20, W20, 0x1
	0x03B176B4 CBNZ X0, 0x3B17494
	0x03B176B8 BL 0x1C16F20
	0x03B176BC MOV X0, X19
	0x03B176C0 BL 0x3B16C90
	0x03B176C4 LDP X20, X19, [X31 + 0x90]
	0x03B176C8 LDP X22, X21, [X31 + 0x80]
	0x03B176CC LDP X24, X23, [X31 + 0x70]
	0x03B176D0 LDP X26, X25, [X31 + 0x60]
	0x03B176D4 LDP X28, X27, [X31 + 0x50]
	0x03B176D8 LDP X29, X30, [X31 + 0x40]
	0x03B176DC ADD X31, X31, 0xA0
	0x03B176E0 RET
	0x03B176E4 BL 0x1C16F28
	0x03B176E8 STR X30, [X31 - 0x30]!
	0x03B176EC STP X22, X21, [X31 + 0x10]
	0x03B176F0 STP X20, X19, [X31 + 0x20]
	0x03B176F4 ADRP X20, 0x8CB000
	0x03B176F8 ADRP X22, 0x641000
	0x03B176FC LDRB W8, [X20 + 0x6B7]
	0x03B17700 LDR X22, [X22 + 0x338]
	0x03B17704 MOV X19, X0
	0x03B17708 TBNZ X8, 0x0, 0x3B17738
	0x03B1770C ADRP X0, 0x5E0000
	0x03B17710 LDR X0, [X0 + 0xCA0]
	0x03B17714 BL 0x1C16CF4
	0x03B17718 ADRP X0, 0x641000
	0x03B1771C LDR X0, [X0 + 0x338]
	0x03B17720 BL 0x1C16CF4
	0x03B17724 ADRP X0, 0x642000
	0x03B17728 LDR X0, [X0 + 0x940]
	0x03B1772C BL 0x1C16CF4
	0x03B17730 MOVZ W8, 0x1
	0x03B17734 STRB W8, [X20 + 0x6B7]
	0x03B17738 LDR X0, [X22]
	0x03B1773C ADRP X21, 0x642000
	0x03B17740 ADRP X20, 0x5E0000
	0x03B17744 LDR W8, [X0 + 0xE0]
	0x03B17748 LDR X21, [X21 + 0x940]
	0x03B1774C LDR X20, [X20 + 0xCA0]
	0x03B17750 CBNZ W8, 0x3B17758
	0x03B17754 BL 0x1C16DFC
	0x03B17758 BL 0x3B0DFAC
	0x03B1775C LDR X0, [X21]
	0x03B17760 MOV X1, X31
	0x03B17764 BL 0x3C13E40
	0x03B17768 LDR X8, [X20]
	0x03B1776C MOV X21, X0
	0x03B17770 MOV X0, X8
	0x03B17774 BL 0x1C16F10
	0x03B17778 MOV X1, X21
	0x03B1777C MOV X2, X31
	0x03B17780 MOV X20, X0
	0x03B17784 BL 0x3C1454C
	0x03B17788 CBZ X20, 0x3B177CC
	0x03B1778C LDR X8, [X22]
	0x03B17790 LDR X2, [X19 + 0xA8]
	0x03B17794 MOV X0, X20
	0x03B17798 MOV X3, X31
	0x03B1779C LDR X8, [X8 + 0xB8]
	0x03B177A0 LDR W1, [X8]
	0x03B177A4 BL 0x3C14C34
	0x03B177A8 MOVZ W1, 0x1
	0x03B177AC MOV X0, X20
	0x03B177B0 MOV X2, X31
	0x03B177B4 BL 0x3C396EC
	0x03B177B8 MOV X0, X20
	0x03B177BC LDP X20, X19, [X31 + 0x20]
	0x03B177C0 LDP X22, X21, [X31 + 0x10]
	0x03B177C4 LDR X30, [X31], #0x30
	0x03B177C8 RET
	0x03B177CC BL 0x1C16F20
	0x03B177D0 SUB X31, X31, 0x30
	0x03B177D4 STP X30, X21, [X31 + 0x10]
	0x03B177D8 STP X20, X19, [X31 + 0x20]
	0x03B177DC ADRP X21, 0x8CB000
	0x03B177E0 LDRB W8, [X21 + 0x6B9]
	0x03B177E4 MOV W19, W1
	0x03B177E8 MOV X20, X0
	0x03B177EC TBNZ X8, 0x0, 0x3B17804
	0x03B177F0 ADRP X0, 0x5E6000
	0x03B177F4 LDR X0, [X0 + 0x870]
	0x03B177F8 BL 0x1C16CF4
	0x03B177FC MOVZ W8, 0x1
	0x03B17800 STRB W8, [X21 + 0x6B9]
	0x03B17804 STR W31, [X31 + 0xC]
	0x03B17808 LDR X0, [X20 + 0x30]
	0x03B1780C CBNZ X0, 0x3B17820
	0x03B17810 MOV X0, X20
	0x03B17814 BL 0x3B16C90
	0x03B17818 LDR X0, [X20 + 0x30]
	0x03B1781C CBZ X0, 0x3B17854
	0x03B17820 ADRP X8, 0x5E6000
	0x03B17824 LDR X8, [X8 + 0x870]
	0x03B17828 ADD X2, X31, 0xC
	0x03B1782C MOV W1, W19
	0x03B17830 LDR X3, [X8]
	0x03B17834 BL 0x2A0BC68
	0x03B17838 LDR W8, [X31 + 0xC]
	0x03B1783C LDP X20, X19, [X31 + 0x20]
	0x03B17840 LDP X30, X21, [X31 + 0x10]
	0x03B17844 ANDS W31, W0, 0x1
	0x03B17848 CSINV W0, W8, W31, NE
	0x03B1784C ADD X31, X31, 0x30
	0x03B17850 RET
	0x03B17854 BL 0x1C16F20
	0x03B17858 SUB X31, X31, 0x30
	0x03B1785C STP X30, X21, [X31 + 0x10]
	0x03B17860 STP X20, X19, [X31 + 0x20]
	0x03B17864 ADRP X21, 0x8CB000
	0x03B17868 LDRB W8, [X21 + 0x6BA]
	0x03B1786C MOV W19, W1
	0x03B17870 MOV X20, X0
	0x03B17874 TBNZ X8, 0x0, 0x3B1788C
	0x03B17878 ADRP X0, 0x641000
	0x03B1787C LDR X0, [X0 + 0xFE0]
	0x03B17880 BL 0x1C16CF4
	0x03B17884 MOVZ W8, 0x1
	0x03B17888 STRB W8, [X21 + 0x6BA]
	0x03B1788C STR X31, [X31 + 0x8]
	0x03B17890 LDR X0, [X20 + 0xB8]
	0x03B17894 CBNZ X0, 0x3B178A8
	0x03B17898 MOV X0, X20
	0x03B1789C BL 0x3B16C90
	0x03B178A0 LDR X0, [X20 + 0xB8]
	0x03B178A4 CBZ X0, 0x3B178E8
	0x03B178A8 ADRP X8, 0x641000
	0x03B178AC LDR X8, [X8 + 0xFE0]
	0x03B178B0 ADD X2, X31, 0x8
	0x03B178B4 MOV W1, W19
	0x03B178B8 LDR X3, [X8]
	0x03B178BC BL 0x2B10A7C
	0x03B178C0 TBZ X0, 0x0, 0x3B178D4
	0x03B178C4 LDR X8, [X31 + 0x8]
	0x03B178C8 CBZ X8, 0x3B178E8
	0x03B178CC LDR W0, [X8 + 0x28]
	0x03B178D0 B 0x3B178D8
	0x03B178D4 MOVN W0, 0x0
	0x03B178D8 LDP X20, X19, [X31 + 0x20]
	0x03B178DC LDP X30, X21, [X31 + 0x10]
	0x03B178E0 ADD X31, X31, 0x30
	0x03B178E4 RET
	0x03B178E8 BL 0x1C16F20
	0x03B178EC STP X30, X21, [X31 - 0x20]!
	0x03B178F0 STP X20, X19, [X31 + 0x10]
	0x03B178F4 ADRP X21, 0x8CB000
	0x03B178F8 LDRB W8, [X21 + 0x6BB]
	0x03B178FC MOV X20, X1
	0x03B17900 MOV X19, X0
	0x03B17904 TBNZ X8, 0x0, 0x3B1791C
	0x03B17908 ADRP X0, 0x641000
	0x03B1790C LDR X0, [X0 + 0xBB8]
	0x03B17910 BL 0x1C16CF4
	0x03B17914 MOVZ W8, 0x1
	0x03B17918 STRB W8, [X21 + 0x6BB]
	0x03B1791C ADRP X21, 0x641000
	0x03B17920 LDR X8, [X19 + 0x30]
	0x03B17924 LDR X21, [X21 + 0xBB8]
	0x03B17928 CBNZ X8, 0x3B17934
	0x03B1792C MOV X0, X19
	0x03B17930 BL 0x3B16C90
	0x03B17934 LDR X0, [X21]
	0x03B17938 LDR W8, [X0 + 0xE0]
	0x03B1793C CBNZ W8, 0x3B17944
	0x03B17940 BL 0x1C16DFC
	0x03B17944 MOV X0, X20
	0x03B17948 BL 0x3B17960
	0x03B1794C MOV W1, W0
	0x03B17950 MOV X0, X19
	0x03B17954 LDP X20, X19, [X31 + 0x10]
	0x03B17958 LDP X30, X21, [X31], #0x20
	0x03B1795C B 0x3B177D0
	0x03B17960 STP X30, X21, [X31 - 0x20]!
	0x03B17964 STP X20, X19, [X31 + 0x10]
	0x03B17968 CBZ X0, 0x3B179C8
	0x03B1796C LDR W8, [X0 + 0x10]
	0x03B17970 MOV X19, X0
	0x03B17974 CMP W8, 0x1
	0x03B17978 B.LT 0x3B179B4
	0x03B1797C MOV W21, W31
	0x03B17980 MOV W20, W31
	0x03B17984 MOV X0, X19
	0x03B17988 MOV W1, W21
	0x03B1798C MOV X2, X31
	0x03B17990 BL 0x3222A1C
	0x03B17994 LDR W8, [X19 + 0x10]
	0x03B17998 ADD W9, W20, W20, 0x5, LSL
	0x03B1799C AND W10, W0, 0xFFFF
	0x03B179A0 ADD W21, W21, 0x1
	0x03B179A4 CMP W21, W8
	0x03B179A8 EOR W20, W9, W10, 0x0
	0x03B179AC B.LT 0x3B17984
	0x03B179B0 B 0x3B179B8
	0x03B179B4 MOV W20, W31
	0x03B179B8 MOV W0, W20
	0x03B179BC LDP X20, X19, [X31 + 0x10]
	0x03B179C0 LDP X30, X21, [X31], #0x20
	0x03B179C4 RET
	0x03B179C8 BL 0x1C16F20
	0x03B179CC STP X30, X25, [X31 - 0x40]!
	0x03B179D0 STP X24, X23, [X31 + 0x10]
	0x03B179D4 STP X22, X21, [X31 + 0x20]
	0x03B179D8 STP X20, X19, [X31 + 0x30]
	0x03B179DC ADRP X23, 0x8CB000
	0x03B179E0 ADRP X24, 0x5DC000
	0x03B179E4 LDRB W8, [X23 + 0x6BC]
	0x03B179E8 LDR X24, [X24 + 0x598]
	0x03B179EC MOV X19, X3
	0x03B179F0 MOV W22, W2
	0x03B179F4 MOV W20, W1
	0x03B179F8 MOV X21, X0
	0x03B179FC TBNZ X8, 0x0, 0x3B17A5C
	0x03B17A00 ADRP X0, 0x5DE000
	0x03B17A04 LDR X0, [X0 + 0x9D8]
	0x03B17A08 BL 0x1C16CF4
	0x03B17A0C ADRP X0, 0x5E3000
	0x03B17A10 LDR X0, [X0 + 0x678]
	0x03B17A14 BL 0x1C16CF4
	0x03B17A18 ADRP X0, 0x5E3000
	0x03B17A1C LDR X0, [X0 + 0x688]
	0x03B17A20 BL 0x1C16CF4
	0x03B17A24 ADRP X0, 0x5DD000
	0x03B17A28 LDR X0, [X0 + 0xE08]
	0x03B17A2C BL 0x1C16CF4
	0x03B17A30 ADRP X0, 0x641000
	0x03B17A34 LDR X0, [X0 + 0xFE8]
	0x03B17A38 BL 0x1C16CF4
	0x03B17A3C ADRP X0, 0x5DC000
	0x03B17A40 LDR X0, [X0 + 0x598]
	0x03B17A44 BL 0x1C16CF4
	0x03B17A48 ADRP X0, 0x641000
	0x03B17A4C LDR X0, [X0 + 0x628]
	0x03B17A50 BL 0x1C16CF4
	0x03B17A54 MOVZ W8, 0x1
	0x03B17A58 STRB W8, [X23 + 0x6BC]
	0x03B17A5C LDR X0, [X24]
	0x03B17A60 LDR W8, [X0 + 0xE0]
	0x03B17A64 CBNZ W8, 0x3B17A6C
	0x03B17A68 BL 0x1C16DFC
	0x03B17A6C MOV X0, X21
	0x03B17A70 MOV X1, X31
	0x03B17A74 MOV X2, X31
	0x03B17A78 BL 0x3C3883C
	0x03B17A7C TBZ X0, 0x0, 0x3B17A90
	0x03B17A80 MOV X21, X31
	0x03B17A84 MOVN W8, 0x0
	0x03B17A88 STR W8, [X19]
	0x03B17A8C B 0x3B17AAC
	0x03B17A90 CBZ X21, 0x3B17BEC
	0x03B17A94 MOV X0, X21
	0x03B17A98 MOV W1, W20
	0x03B17A9C BL 0x3B17858
	0x03B17AA0 ADDS W31, W0, 0x1
	0x03B17AA4 STR W0, [X19]
	0x03B17AA8 B.EQ 0x3B17AC4
	0x03B17AAC MOV X0, X21
	0x03B17AB0 LDP X20, X19, [X31 + 0x30]
	0x03B17AB4 LDP X22, X21, [X31 + 0x20]
	0x03B17AB8 LDP X24, X23, [X31 + 0x10]
	0x03B17ABC LDP X30, X25, [X31], #0x40
	0x03B17AC0 RET
	0x03B17AC4 ADRP X25, 0x641000
	0x03B17AC8 LDR X25, [X25 + 0x628]
	0x03B17ACC LDR X8, [X25]
	0x03B17AD0 LDR X8, [X8 + 0xB8]
	0x03B17AD4 LDR X0, [X8]
	0x03B17AD8 CBZ X0, 0x3B17AF0
	0x03B17ADC ADRP X8, 0x5E3000
	0x03B17AE0 LDR X8, [X8 + 0x678]
	0x03B17AE4 LDR X1, [X8]
	0x03B17AE8 BL 0x2DAA53C
	0x03B17AEC B 0x3B17B20
	0x03B17AF0 ADRP X8, 0x5DD000
	0x03B17AF4 LDR X8, [X8 + 0xE08]
	0x03B17AF8 LDR X0, [X8]
	0x03B17AFC BL 0x1C16F10
	0x03B17B00 ADRP X8, 0x5E3000
	0x03B17B04 LDR X8, [X8 + 0x688]
	0x03B17B08 MOV X23, X0
	0x03B17B0C LDR X1, [X8]
	0x03B17B10 BL 0x2DA9EF4
	0x03B17B14 LDR X8, [X25]
	0x03B17B18 LDR X8, [X8 + 0xB8]
	0x03B17B1C STR X23, [X8]
	0x03B17B20 MOV X0, X21
	0x03B17B24 MOV X1, X31
	0x03B17B28 BL 0x3C385F8
	0x03B17B2C LDR X8, [X25]
	0x03B17B30 LDR X8, [X8 + 0xB8]
	0x03B17B34 LDR X8, [X8]
	0x03B17B38 CBZ X8, 0x3B17BEC
	0x03B17B3C ADRP X9, 0x5DE000
	0x03B17B40 LDR X9, [X9 + 0x9D8]
	0x03B17B44 MOV W1, W0
	0x03B17B48 MOV X0, X8
	0x03B17B4C LDR X2, [X9]
	0x03B17B50 BL 0x2DAB03C
	0x03B17B54 TBZ X22, 0x0, 0x3B17A80
	0x03B17B58 LDR X0, [X21 + 0xD8]
	0x03B17B5C CBZ X0, 0x3B17B8C
	0x03B17B60 LDR W8, [X0 + 0x18]
	0x03B17B64 CMP W8, 0x1
	0x03B17B68 B.LT 0x3B17B8C
	0x03B17B6C MOV W1, W20
	0x03B17B70 MOV X3, X19
	0x03B17B74 LDP X20, X19, [X31 + 0x30]
	0x03B17B78 LDP X22, X21, [X31 + 0x20]
	0x03B17B7C LDP X24, X23, [X31 + 0x10]
	0x03B17B80 MOVZ W2, 0x1
	0x03B17B84 LDP X30, X25, [X31], #0x40
	0x03B17B88 B 0x3B17BF0
	0x03B17B8C BL 0x3B13C88
	0x03B17B90 CBZ X0, 0x3B17BEC
	0x03B17B94 LDR X8, [X24]
	0x03B17B98 LDR X21, [X0 + 0x68]
	0x03B17B9C LDR W9, [X8 + 0xE0]
	0x03B17BA0 CBNZ W9, 0x3B17BAC
	0x03B17BA4 MOV X0, X8
	0x03B17BA8 BL 0x1C16DFC
	0x03B17BAC MOV X0, X21
	0x03B17BB0 MOV X1, X31
	0x03B17BB4 MOV X2, X31
	0x03B17BB8 BL 0x3C354F8
	0x03B17BBC TBZ X0, 0x0, 0x3B17A80
	0x03B17BC0 BL 0x3B13C88
	0x03B17BC4 CBZ X0, 0x3B17BEC
	0x03B17BC8 LDR X0, [X0 + 0x68]
	0x03B17BCC MOV W1, W20
	0x03B17BD0 MOV X3, X19
	0x03B17BD4 LDP X20, X19, [X31 + 0x30]
	0x03B17BD8 LDP X22, X21, [X31 + 0x20]
	0x03B17BDC LDP X24, X23, [X31 + 0x10]
	0x03B17BE0 MOVZ W2, 0x1
	0x03B17BE4 LDP X30, X25, [X31], #0x40
	0x03B17BE8 B 0x3B17D90

ISIL:
	001 Subtract X31, X31, 256
	002 Move [X31+96], D15
	003 Move [X31+104], D14
	004 Move [X31+112], D13
	005 Move [X31+120], D12
	006 Move [X31+128], D11
	007 Move [X31+136], D10
	008 Move [X31+144], D9
	009 Move [X31+152], D8
	010 Move [X31+160], X29
	011 Move [X31+168], X30
	012 Move [X31+176], X28
	013 Move [X31+184], X27
	014 Move [X31+192], X26
	015 Move [X31+200], X25
	016 Move [X31+208], X24
	017 Move [X31+216], X23
	018 Move [X31+224], X22
	019 Move [X31+232], X21
	020 Move [X31+240], X20
	021 Move [X31+248], X19
	022 Move X20, 0x8CC000
	023 Move W8, [X20+1717]
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {46}
	029 Move X0, 0x643000
	030 Move X0, [X0+2136]
	031 Call 0x1C17CF4
	032 Move X0, 0x605000
	033 Move X0, [X0+1544]
	034 Call 0x1C17CF4
	035 Move X0, 0x643000
	036 Move X0, [X0+552]
	037 Call 0x1C17CF4
	038 Move X0, 0x642000
	039 Move X0, [X0+816]
	040 Call 0x1C17CF4
	041 Move X0, 0x5DD000
	042 Move X0, [X0+1432]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X20+1717], W8
	046 Move [X31+64], X31
	047 Move [X31+72], X31
	048 Move [X31+80], W31
	049 Move [X31+48], X31
	050 Move [X31+56], X31
	051 Move W8, [X19+16]
	052 Move X24, [X19+32]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W0, W31
	056 Compare W8, 0
	057 JumpIfNotEqual {651}
	058 Move TEMP, 0
	059 Not TEMP
	060 Move W8, TEMP
	061 Move [X19+16], W8
	062 Compare X24, 0
	063 JumpIfEqual {673}
	064 Move X8, 0x5DD000
	065 Move X8, [X8+1432]
	066 Move X20, [X24+40]
	067 Move X0, [X8]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X0, X20
	073 Move X1, X31
	074 Move X2, X31
	075 Call Object.op_Equality, X0, X1
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfEqual {259}
	080 Move W0, 1
	081 Move [X19+24], X31
	082 Move [X19+16], W0
	083 Move V0, [X19+544]
	084 Move TEMP, 0
	085 Not TEMP
	086 Move W8, TEMP
	087 Move [X19+16], W8
	088 Move W8, [X19+40]
	089 Move X20, [X19+48]
	090 Move TEMP, 0
	091 Not TEMP
	092 Move W9, TEMP
	093 Move [X19+16], W9
	094 Move [X19+64], W8
	095 Compare X20, 0
	096 JumpIfEqual {673}
	097 Move X8, [X20+56]
	098 Move W21, [X19+44]
	099 Compare X8, 0
	100 JumpIfNotEqual {103}
	101 Move X0, X20
	102 Call TMP_SpriteAsset.UpdateLookupTables, X0
	103 Move X8, [X20+176]
	104 Compare X8, 0
	105 JumpIfEqual {673}
	106 Move W8, [X8+24]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X20, [X19+48]
	109 Compare X20, 0
	110 JumpIfEqual {673}
	111 Move X8, [X20+56]
	112 Compare X8, 0
	113 JumpIfNotEqual {116}
	114 Move X0, X20
	115 Call TMP_SpriteAsset.UpdateLookupTables, X0
	116 Move X8, [X20+176]
	117 Compare X8, 0
	118 JumpIfEqual {673}
	119 Move W8, [X8+24]
	120 Subtract W8, W8, 1
	121 Move [X19+44], W8
	122 Compare X24, 0
	123 JumpIfEqual {673}
	124 Move X8, [X24+40]
	125 Compare X8, 0
	126 JumpIfEqual {673}
	127 Move X8, [X8+872]
	128 Compare X8, 0
	129 JumpIfEqual {673}
	130 Move X8, [X8+56]
	131 Compare X8, 0
	132 JumpIfEqual {673}
	133 NotImplemented "Instruction LDRSW not yet implemented."
	134 Move W10, [X8+24]
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move W10, 376
	137 NotImplemented "Instruction MADD not yet implemented."
	138 Add X1, X8, 32
	139 Add X0, X19, 72
	140 Move W2, 376
	141 Call 0x3EB2B30
	142 NotImplemented "Instruction LDRSW not yet implemented."
	143 Move W9, [X19+148]
	144 Move [X19+448], W8
	145 Move [X19+452], W9
	146 Move X9, [X24+40]
	147 Compare X9, 0
	148 JumpIfEqual {673}
	149 Move X9, [X9+872]
	150 Compare X9, 0
	151 JumpIfEqual {673}
	152 Move X9, [X9+96]
	153 Compare X9, 0
	154 JumpIfEqual {673}
	155 Move W10, [X9+24]
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move W10, 80
	158 NotImplemented "Instruction MADD not yet implemented."
	159 Add X1, X8, 32
	160 Add X0, X19, 456
	161 Move W2, 80
	162 Call 0x3EB2B30
	163 Move X20, [X19+48]
	164 Compare X20, 0
	165 JumpIfEqual {673}
	166 Move X8, [X20+56]
	167 Compare X8, 0
	168 JumpIfNotEqual {171}
	169 Move X0, X20
	170 Call TMP_SpriteAsset.UpdateLookupTables, X0
	171 Move X0, [X20+176]
	172 Compare X0, 0
	173 JumpIfEqual {673}
	174 Move X21, 0x642000
	175 Move W1, [X19+40]
	176 Move X21, [X21+816]
	177 Move X2, [X21]
	178 Call List`1<Object>.get_Item, X0, X1
	179 Compare X0, 0
	180 JumpIfEqual {673}
	181 Move X20, [X19+48]
	182 Compare X20, 0
	183 JumpIfEqual {673}
	184 Move X8, [X20+56]
	185 Move V8, [X0+44]
	186 Compare X8, 0
	187 JumpIfNotEqual {190}
	188 Move X0, X20
	189 Call TMP_SpriteAsset.UpdateLookupTables, X0
	190 Move X0, [X20+176]
	191 Compare X0, 0
	192 JumpIfEqual {673}
	193 Move W1, [X19+40]
	194 Move X2, [X21]
	195 Call List`1<Object>.get_Item, X0, X1
	196 Compare X0, 0
	197 JumpIfEqual {673}
	198 Move X0, [X0+32]
	199 Compare X0, 0
	200 JumpIfEqual {673}
	201 Move X1, X31
	202 Call Glyph.get_scale, X0
	203 Multiply S0, S8, S0
	204 Move [X19+540], W31
	205 Move [X19+536], S0
	206 Move X21, 0x8C5000
	207 Move W8, [X21+1297]
	208 Move W20, [X19+60]
	209 Compare W8, 0
	210 JumpIfNotEqual {216}
	211 Move X0, 0x5DD000
	212 Move X0, [X0+1448]
	213 Call 0x1C17CF4
	214 Move W8, 1
	215 Move [X21+1297], W8
	216 Move X8, 0x5DD000
	217 Move X8, [X8+1448]
	218 Move X0, [X8]
	219 Move W8, [X0+224]
	220 Compare W8, 0
	221 JumpIfNotEqual {223}
	222 Call 0x1C17DFC
	223 NotImplemented "Instruction CMP not yet implemented."
	224 NotImplemented "Instruction CSNEG not yet implemented."
	225 NotImplemented "Instruction SCVTF not yet implemented."
	226 Move S1, 1
	227 NotImplemented "Instruction FDIV not yet implemented."
	228 Move [X19+544], S0
	229 Move V1, [X19+540]
	230 NotImplemented "Instruction FCMP not yet implemented."
	231 Move [X19+540], W31
	232 Compare X24, 0
	233 JumpIfEqual {673}
	234 Move X8, [X24+40]
	235 Compare X8, 0
	236 JumpIfEqual {673}
	237 Move X8, [X8+872]
	238 Compare X8, 0
	239 JumpIfEqual {673}
	240 Move X8, [X8+56]
	241 Compare X8, 0
	242 JumpIfEqual {673}
	243 NotImplemented "Instruction LDRSW not yet implemented."
	244 Move W9, [X8+24]
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Move W9, 376
	247 NotImplemented "Instruction MADD not yet implemented."
	248 NotImplemented "Instruction LDRH not yet implemented."
	249 Move W9, 0x2026
	250 NotImplemented "Instruction CMP not yet implemented."
	251 NotImplemented "Instruction CMP not yet implemented."
	252 Move X0, [X24+32]
	253 Compare X0, 0
	254 JumpIfEqual {673}
	255 Move X8, 0x643000
	256 Move X8, [X8+2136]
	257 Move X2, [X8]
	258 Call Dictionary`2<Int32, Boolean>.Remove, X0, X1
	259 Move W0, W31
	260 Move X20, [X19+48]
	261 Compare X20, 0
	262 JumpIfEqual {673}
	263 Move X8, [X20+56]
	264 Compare X8, 0
	265 JumpIfNotEqual {268}
	266 Move X0, X20
	267 Call TMP_SpriteAsset.UpdateLookupTables, X0
	268 Move X0, [X20+176]
	269 Compare X0, 0
	270 JumpIfEqual {673}
	271 Move X8, 0x642000
	272 Move W1, [X19+64]
	273 Move X8, [X8+816]
	274 Move X2, [X8]
	275 Call List`1<Object>.get_Item, X0, X1
	276 Compare X0, 0
	277 JumpIfEqual {673}
	278 Move X21, X0
	279 Move X0, [X0+32]
	280 Compare X0, 0
	281 JumpIfEqual {673}
	282 Move X20, [X19+472]
	283 Move V10, [X19+360]
	284 Move V11, [X19+372]
	285 Move V12, [X19+392]
	286 Move V9, [X19+536]
	287 Move V8, [X21+44]
	288 Move X1, X31
	289 Call Glyph.get_scale, X0
	290 Move X0, [X21+32]
	291 Compare X0, 0
	292 JumpIfEqual {673}
	293 Add X8, X31, 24
	294 Move X1, X31
	295 Move V15, V0
	296 Call Glyph.get_metrics, X0
	297 NotImplemented "Instruction LDUR not yet implemented."
	298 Move W8, [X31+40]
	299 Add X0, X31, 64
	300 Move X1, X31
	301 Move [X31+4], V0
	302 Move [X31+80], W8
	303 Call GlyphMetrics.get_horizontalBearingX, X0
	304 Move X0, [X21+32]
	305 Compare X0, 0
	306 JumpIfEqual {673}
	307 Add X8, X31, 24
	308 Move X1, X31
	309 Move V14, V0
	310 Move [X31+20], S10
	311 Call Glyph.get_metrics, X0
	312 NotImplemented "Instruction LDUR not yet implemented."
	313 Move W8, [X31+40]
	314 Add X0, X31, 64
	315 Move X1, X31
	316 Move [X31+4], V0
	317 Move [X31+80], W8
	318 Call GlyphMetrics.get_horizontalBearingY, X0
	319 Move X0, [X21+32]
	320 Compare X0, 0
	321 JumpIfEqual {673}
	322 Add X8, X31, 24
	323 Move X1, X31
	324 Move V10, V0
	325 Move [X31+12], S14
	326 Move [X31+20], S11
	327 Call Glyph.get_metrics, X0
	328 NotImplemented "Instruction LDUR not yet implemented."
	329 Move W8, [X31+40]
	330 Add X0, X31, 64
	331 Move X1, X31
	332 Move [X31+4], V0
	333 Move [X31+80], W8
	334 Call GlyphMetrics.get_height, X0
	335 Move X0, [X21+32]
	336 Compare X0, 0
	337 JumpIfEqual {673}
	338 Add X8, X31, 24
	339 Move X1, X31
	340 Move V11, V0
	341 Call Glyph.get_metrics, X0
	342 NotImplemented "Instruction LDUR not yet implemented."
	343 Move W8, [X31+40]
	344 Add X0, X31, 64
	345 Move X1, X31
	346 Move [X31+4], V0
	347 Move [X31+80], W8
	348 Call GlyphMetrics.get_horizontalBearingY, X0
	349 Move X0, [X21+32]
	350 Compare X0, 0
	351 JumpIfEqual {673}
	352 Add X8, X31, 24
	353 Move X1, X31
	354 Move V14, V0
	355 Call Glyph.get_metrics, X0
	356 NotImplemented "Instruction LDUR not yet implemented."
	357 Move W8, [X31+40]
	358 Add X0, X31, 64
	359 Move X1, X31
	360 Move [X31+4], V0
	361 Move [X31+80], W8
	362 Call GlyphMetrics.get_horizontalBearingX, X0
	363 Move X0, [X21+32]
	364 Compare X0, 0
	365 JumpIfEqual {673}
	366 Add X8, X31, 24
	367 Move X1, X31
	368 Move V13, V0
	369 Call Glyph.get_metrics, X0
	370 NotImplemented "Instruction LDUR not yet implemented."
	371 Move W8, [X31+40]
	372 Add X0, X31, 64
	373 Move X1, X31
	374 Move [X31+4], V0
	375 Move [X31+80], W8
	376 Call GlyphMetrics.get_width, X0
	377 Compare X20, 0
	378 JumpIfEqual {673}
	379 NotImplemented "Instruction LDRSW not yet implemented."
	380 Move W9, [X20+24]
	381 NotImplemented "Instruction CMP not yet implemented."
	382 NotImplemented "Instruction FDIV not yet implemented."
	383 Multiply S1, S1, S8
	384 Multiply S2, S1, S15
	385 Move S1, [X31+12]
	386 Move S6, [X31+16]
	387 Move V5, [X31+20]
	388 Subtract S3, S10, S11
	389 Move W9, 12
	390 Multiply S1, S2, S1
	391 Multiply S3, S2, S3
	392 NotImplemented "Instruction MADD not yet implemented."
	393 Add S4, S5, S1
	394 Add S1, S6, S3
	395 Move [X8+32], S4
	396 Move [X8+40], S1
	397 Move [X8+40], W31
	398 Move W8, [X19+452]
	399 Move W9, [X20+24]
	400 Add W8, W8, 1
	401 NotImplemented "Instruction CMP not yet implemented."
	402 Multiply S3, S2, S14
	403 Move X8, W8
	404 Move W9, 12
	405 Add S3, S6, S3
	406 NotImplemented "Instruction MADD not yet implemented."
	407 Move [X8+32], S4
	408 Move [X8+40], S3
	409 Move [X8+40], W31
	410 Move W8, [X19+452]
	411 Move W9, [X20+24]
	412 Add W8, W8, 2
	413 NotImplemented "Instruction CMP not yet implemented."
	414 Add S0, S13, S0
	415 Move X8, W8
	416 Move W9, 12
	417 Multiply S0, S2, S0
	418 NotImplemented "Instruction MADD not yet implemented."
	419 Add S0, S5, S0
	420 Move [X8+32], S0
	421 Move [X8+40], S3
	422 Move [X8+40], W31
	423 Move W8, [X19+452]
	424 Move W9, [X20+24]
	425 Add W8, W8, 3
	426 NotImplemented "Instruction CMP not yet implemented."
	427 Move X8, W8
	428 Move W9, 12
	429 NotImplemented "Instruction MADD not yet implemented."
	430 Move [X8+32], S0
	431 Move [X8+40], S1
	432 Move [X8+40], W31
	433 Move X0, [X21+32]
	434 Compare X0, 0
	435 JumpIfEqual {673}
	436 Move X22, [X19+496]
	437 Move X1, X31
	438 Call Glyph.get_glyphRect, X0
	439 Move X9, 0x605000
	440 Move X9, [X9+1544]
	441 Move X8, X0
	442 Move [X31+48], X8
	443 Move [X31+56], X1
	444 Move X0, [X9]
	445 Move W8, [X0+224]
	446 Compare W8, 0
	447 JumpIfNotEqual {449}
	448 Call 0x1C17DFC
	449 Add X0, X31, 48
	450 Move X1, X31
	451 Call GlyphRect.get_x, X0
	452 Move X8, [X19+48]
	453 Compare X8, 0
	454 JumpIfEqual {673}
	455 Move W23, W0
	456 Move X0, [X8+168]
	457 Compare X0, 0
	458 JumpIfEqual {673}
	459 Move X8, [X0]
	460 Move X9, [X8+392]
	461 Move X1, [X8+400]
	462 NotImplemented "Instruction BLR not yet implemented."
	463 Move X8, [X21+32]
	464 Compare X8, 0
	465 JumpIfEqual {673}
	466 Move W25, W0
	467 Move X0, X8
	468 Move X1, X31
	469 Call Glyph.get_glyphRect, X0
	470 Move [X31+48], X0
	471 Move [X31+56], X1
	472 Add X0, X31, 48
	473 Move X1, X31
	474 Call GlyphRect.get_y, X0
	475 Move X8, [X19+48]
	476 Compare X8, 0
	477 JumpIfEqual {673}
	478 Move W26, W0
	479 Move X0, [X8+168]
	480 Compare X0, 0
	481 JumpIfEqual {673}
	482 Move X8, [X0]
	483 Move X9, [X8+424]
	484 Move X1, [X8+432]
	485 NotImplemented "Instruction BLR not yet implemented."
	486 Move X8, [X21+32]
	487 Compare X8, 0
	488 JumpIfEqual {673}
	489 Move W27, W0
	490 Move X0, X8
	491 Move X1, X31
	492 Call Glyph.get_glyphRect, X0
	493 Move [X31+48], X0
	494 Move [X31+56], X1
	495 Add X0, X31, 48
	496 Move X1, X31
	497 Call GlyphRect.get_y, X0
	498 Move X8, [X21+32]
	499 Compare X8, 0
	500 JumpIfEqual {673}
	501 Move W28, W0
	502 Move X0, X8
	503 Move X1, X31
	504 Call Glyph.get_glyphRect, X0
	505 Move [X31+48], X0
	506 Move [X31+56], X1
	507 Add X0, X31, 48
	508 Move X1, X31
	509 Call GlyphRect.get_height, X0
	510 Move X8, [X19+48]
	511 Compare X8, 0
	512 JumpIfEqual {673}
	513 Move [X31+16], W0
	514 Move [X31+20], W28
	515 Move X0, [X8+168]
	516 Compare X0, 0
	517 JumpIfEqual {673}
	518 Move X8, [X0]
	519 Move W28, W27
	520 Move W27, W26
	521 Move W26, W25
	522 Move X9, [X8+424]
	523 Move X1, [X8+432]
	524 NotImplemented "Instruction BLR not yet implemented."
	525 Move X8, [X21+32]
	526 Compare X8, 0
	527 JumpIfEqual {673}
	528 Move W29, W0
	529 Move X0, X8
	530 Move X1, X31
	531 Move W25, W23
	532 Call Glyph.get_glyphRect, X0
	533 Move [X31+48], X0
	534 Move [X31+56], X1
	535 Add X0, X31, 48
	536 Move X1, X31
	537 Call GlyphRect.get_x, X0
	538 Move X8, [X21+32]
	539 Compare X8, 0
	540 JumpIfEqual {673}
	541 Move W21, W0
	542 Move X0, X8
	543 Move X1, X31
	544 Call Glyph.get_glyphRect, X0
	545 Move [X31+48], X0
	546 Move [X31+56], X1
	547 Add X0, X31, 48
	548 Move X1, X31
	549 Call GlyphRect.get_width, X0
	550 Move X8, [X19+48]
	551 Compare X8, 0
	552 JumpIfEqual {673}
	553 Move W23, W0
	554 Move X0, [X8+168]
	555 Compare X0, 0
	556 JumpIfEqual {673}
	557 Move X8, [X0]
	558 Move X9, [X8+392]
	559 Move X1, [X8+400]
	560 NotImplemented "Instruction BLR not yet implemented."
	561 Compare X22, 0
	562 JumpIfEqual {673}
	563 NotImplemented "Instruction LDRSW not yet implemented."
	564 Move W9, [X22+24]
	565 NotImplemented "Instruction CMP not yet implemented."
	566 NotImplemented "Instruction SCVTF not yet implemented."
	567 NotImplemented "Instruction SCVTF not yet implemented."
	568 NotImplemented "Instruction SCVTF not yet implemented."
	569 NotImplemented "Instruction SCVTF not yet implemented."
	570 Add X8, X22, X8
	571 NotImplemented "Instruction FDIV not yet implemented."
	572 NotImplemented "Instruction FDIV not yet implemented."
	573 Move [X8+32], S2
	574 Move [X8+40], S0
	575 Move W8, [X19+452]
	576 Move W9, [X22+24]
	577 Add W8, W8, 1
	578 NotImplemented "Instruction CMP not yet implemented."
	579 Move W10, [X31+16]
	580 Move W9, [X31+20]
	581 NotImplemented "Instruction SCVTF not yet implemented."
	582 Move X8, W8
	583 Add X8, X22, X8
	584 Add W9, W10, W9
	585 NotImplemented "Instruction SCVTF not yet implemented."
	586 NotImplemented "Instruction FDIV not yet implemented."
	587 Move [X8+32], S2
	588 Move [X8+40], S1
	589 Move W8, [X19+452]
	590 Move W9, [X22+24]
	591 Add W8, W8, 2
	592 NotImplemented "Instruction CMP not yet implemented."
	593 Add W9, W23, W21
	594 NotImplemented "Instruction SCVTF not yet implemented."
	595 Move X8, W8
	596 NotImplemented "Instruction SCVTF not yet implemented."
	597 Add X8, X22, X8
	598 NotImplemented "Instruction FDIV not yet implemented."
	599 Move [X8+32], S2
	600 Move [X8+40], S1
	601 Move W8, [X19+452]
	602 Move W9, [X22+24]
	603 Add W8, W8, 3
	604 NotImplemented "Instruction CMP not yet implemented."
	605 Move X8, W8
	606 Add X8, X22, X8
	607 Move [X8+32], S2
	608 Move [X8+40], S0
	609 Move X0, [X19+456]
	610 Compare X0, 0
	611 JumpIfEqual {673}
	612 Move X1, X20
	613 Move X2, X31
	614 Call Mesh.set_vertices, X0, X1
	615 Move X0, [X19+456]
	616 Compare X0, 0
	617 JumpIfEqual {673}
	618 Move X1, X22
	619 Move X2, X31
	620 Call Mesh.set_uv, X0, X1
	621 Move X0, [X24+40]
	622 Compare X0, 0
	623 JumpIfEqual {673}
	624 Move X8, [X0]
	625 Move W2, [X19+448]
	626 Move X1, [X19+456]
	627 Move X9, [X8+2024]
	628 Move X3, [X8+2032]
	629 NotImplemented "Instruction BLR not yet implemented."
	630 Move W9, [X19+60]
	631 Move W8, [X19+64]
	632 NotImplemented "Instruction CMP not yet implemented."
	633 Move W9, [X19+44]
	634 NotImplemented "Instruction CMP not yet implemented."
	635 Add W8, W8, 1
	636 Move W9, [X19+40]
	637 NotImplemented "Instruction CMP not yet implemented."
	638 Subtract W8, W8, 1
	639 Move W8, [X19+40]
	640 Move W8, [X19+44]
	641 Move [X19+64], W8
	642 Move V8, [X19+540]
	643 Move X0, X31
	644 Call Time.get_deltaTime
	645 Add S0, S8, S0
	646 Move W8, 2
	647 Move [X19+24], X31
	648 Move [X19+540], S0
	649 Move [X19+16], W8
	650 Move W0, 1
	651 Move X20, [X31+240]
	652 Move X19, [X31+248]
	653 Move X22, [X31+224]
	654 Move X21, [X31+232]
	655 Move X24, [X31+208]
	656 Move X23, [X31+216]
	657 Move X26, [X31+192]
	658 Move X25, [X31+200]
	659 Move X28, [X31+176]
	660 Move X27, [X31+184]
	661 Move X29, [X31+160]
	662 Move X30, [X31+168]
	663 Move D9, [X31+144]
	664 Move D8, [X31+152]
	665 Move D11, [X31+128]
	666 Move D10, [X31+136]
	667 Move D13, [X31+112]
	668 Move D12, [X31+120]
	669 Move D15, [X31+96]
	670 Move D14, [X31+104]
	671 Add X31, X31, 256
	672 Return X0
	673 Call 0x1C17F20
	674 Call 0x1C17F28

Method: System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()

Disassembly:
	0x03B17C10 MOV X19, X3
	0x03B17C14 MOV W23, W2

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x03B17C18 MOV W20, W1
	0x03B17C1C MOV X21, X0
	0x03B17C20 TBNZ X8, 0x0, 0x3B17C68
	0x03B17C24 ADRP X0, 0x5DE000
	0x03B17C28 LDR X0, [X0 + 0x9D8]
	0x03B17C2C BL 0x1C16CF4
	0x03B17C30 ADRP X0, 0x641000
	0x03B17C34 LDR X0, [X0 + 0xFE8]
	0x03B17C38 BL 0x1C16CF4
	0x03B17C3C ADRP X0, 0x641000
	0x03B17C40 LDR X0, [X0 + 0xFF0]
	0x03B17C44 BL 0x1C16CF4
	0x03B17C48 ADRP X0, 0x5DC000
	0x03B17C4C LDR X0, [X0 + 0x598]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x5DD000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0x643000
	011 Move X0, [X0+2144]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x03B17C50 BL 0x1C16CF4
	0x03B17C54 ADRP X0, 0x641000

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

