Type: TMPro.KerningPair

Method: System.UInt32 get_firstGlyph()

Disassembly:
	0x03AEB158 LDR W8, [X21 + 0x18]
	0x03AEB15C ADD W22, W22, 0x1

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_firstGlyph(System.UInt32 value)

Disassembly:
	0x03AEB160 CMP W22, W8
	0x03AEB164 B.LT 0x3AEB110

ISIL:
	001 Move [X0+16], W1
	002 Return 

Method: TMPro.GlyphValueRecord_Legacy get_firstGlyphAdjustments()

Disassembly:
	0x03AEB168 MOV X23, X31
	0x03AEB16C MOV X0, X23
	0x03AEB170 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move S0, [X0+20]
	002 Move S1, [X0+24]
	003 Move S2, [X0+28]
	004 Move S3, [X0+32]
	005 Return X0

Method: System.UInt32 get_secondGlyph()

Disassembly:
	0x03AEB174 LDP X22, X21, [X31 + 0x20]
	0x03AEB178 LDP X24, X23, [X31 + 0x10]

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Void set_secondGlyph(System.UInt32 value)

Disassembly:
	0x03AEB17C LDP X30, X25, [X31], #0x40
	0x03AEB180 RET

ISIL:
	001 Move [X0+36], W1
	002 Return 

Method: TMPro.GlyphValueRecord_Legacy get_secondGlyphAdjustments()

Disassembly:
	0x03AEB184 STR X30, [X31 - 0x20]!
	0x03AEB188 STP X20, X19, [X31 + 0x10]
	0x03AEB18C ADRP X19, 0x8F7000

ISIL:
	001 Move S0, [X0+40]
	002 Move S1, [X0+44]
	003 Move S2, [X0+48]
	004 Move S3, [X0+52]
	005 Return X0

Method: System.Boolean get_ignoreSpacingAdjustments()

Disassembly:
	0x03AEB190 ADRP X20, 0x66D000
	0x03AEB194 LDRB W8, [X19 + 0x5C6]

ISIL:
	001 Move W0, [X0+60]
	002 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03AEB198 LDR X20, [X20 + 0x618]
	0x03AEB19C TBNZ X8, 0x0, 0x3AEB1B4
	0x03AEB1A0 ADRP X0, 0x66D000
	0x03AEB1A4 LDR X0, [X0 + 0x618]
	0x03AEB1A8 BL 0x1C16CF4
	0x03AEB1AC MOVZ W8, 0x1
	0x03AEB1B0 STRB W8, [X19 + 0x5C6]
	0x03AEB1B4 LDR X0, [X20]
	0x03AEB1B8 BL 0x1C16F10

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Object..ctor, X0
	006 NotImplemented "Instruction MOVI not yet implemented."
	007 Move [X19+48], X31
	008 Move [X19+16], V0
	009 Move [X19+24], V0
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 

Method: System.Void .ctor(System.UInt32 left, System.UInt32 right, System.Single offset)

Disassembly:
	0x03AEB1BC MOV X1, X31
	0x03AEB1C0 MOV X19, X0
	0x03AEB1C4 BL 0x33BDD8C
	0x03AEB1C8 LDR X8, [X20]
	0x03AEB1CC LDR X8, [X8 + 0xB8]
	0x03AEB1D0 STR X19, [X8]
	0x03AEB1D4 LDP X20, X19, [X31 + 0x10]
	0x03AEB1D8 LDR X30, [X31], #0x20
	0x03AEB1DC RET
	0x03AEB1E0 MOV X1, X31
	0x03AEB1E4 B 0x33BDD8C
	0x03AEB1E8 STR X30, [X31 - 0x20]!
	0x03AEB1EC STP X20, X19, [X31 + 0x10]
	0x03AEB1F0 ADRP X20, 0x8F7000
	0x03AEB1F4 ADRP X19, 0x66D000
	0x03AEB1F8 LDRB W8, [X20 + 0x5C7]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W20, W1
	007 Move X1, X31
	008 Move V8, V0
	009 Move W19, W2
	010 Move X21, X0
	011 Call Object..ctor, X0
	012 Move [X21+16], W20
	013 Move [X21+36], W19
	014 Move [X21+56], S8
	015 Move X20, [X31+32]
	016 Move X19, [X31+40]
	017 Move X30, [X31+16]
	018 Move X21, [X31+24]
	019 Move V8, [X31+48]
	020 Return 

Method: System.Void .ctor(System.UInt32 firstGlyph, TMPro.GlyphValueRecord_Legacy firstGlyphAdjustments, System.UInt32 secondGlyph, TMPro.GlyphValueRecord_Legacy secondGlyphAdjustments)

Disassembly:
	0x03AEB1FC LDR X19, [X19 + 0x618]
	0x03AEB200 TBNZ X8, 0x0, 0x3AEB218
	0x03AEB204 ADRP X0, 0x66D000
	0x03AEB208 LDR X0, [X0 + 0x618]
	0x03AEB20C BL 0x1C16CF4
	0x03AEB210 MOVZ W8, 0x1
	0x03AEB214 STRB W8, [X20 + 0x5C7]
	0x03AEB218 LDR X0, [X19]
	0x03AEB21C LDR W8, [X0 + 0xE0]
	0x03AEB220 CBNZ W8, 0x3AEB22C
	0x03AEB224 BL 0x1C16DFC
	0x03AEB228 LDR X0, [X19]
	0x03AEB22C LDR X8, [X0 + 0xB8]
	0x03AEB230 LDP X20, X19, [X31 + 0x10]
	0x03AEB234 LDR X0, [X8]
	0x03AEB238 LDR X30, [X31], #0x20
	0x03AEB23C RET
	0x03AEB240 STR X30, [X31 - 0x50]!
	0x03AEB244 STP X26, X25, [X31 + 0x10]
	0x03AEB248 STP X24, X23, [X31 + 0x20]
	0x03AEB24C STP X22, X21, [X31 + 0x30]
	0x03AEB250 STP X20, X19, [X31 + 0x40]
	0x03AEB254 ADRP X25, 0x8F7000
	0x03AEB258 LDRB W8, [X25 + 0x5C8]
	0x03AEB25C MOV X19, X5
	0x03AEB260 MOV W20, W4
	0x03AEB264 MOV W21, W3
	0x03AEB268 MOV W23, W2
	0x03AEB26C MOV X22, X1
	0x03AEB270 MOV W24, W0
	0x03AEB274 TBNZ X8, 0x0, 0x3AEB2B0
	0x03AEB278 ADRP X0, 0x60F000

ISIL:
	001 Move [X31-96], D15
	002 Move [X31-88], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move W20, W1
	014 Move X1, X31
	015 Move V8, V7
	016 Move V9, V6
	017 Move V10, V5
	018 Move V11, V4
	019 Move W19, W2
	020 Move V12, V3
	021 Move V13, V2
	022 Move V14, V1
	023 Move V15, V0
	024 Move X21, X0
	025 Call Object..ctor, X0
	026 Move [X21+16], W20
	027 Move [X21+20], S15
	028 Move [X21+28], S14
	029 Move [X21+28], S13
	030 Move [X21+36], S12
	031 Move [X21+36], W19
	032 Move [X21+40], S11
	033 Move [X21+48], S10
	034 Move [X21+48], S9
	035 Move [X21+56], S8
	036 Move X20, [X31+80]
	037 Move X19, [X31+88]
	038 Move X30, [X31+64]
	039 Move X21, [X31+72]
	040 Move D9, [X31+48]
	041 Move D8, [X31+56]
	042 Move D11, [X31+32]
	043 Move D10, [X31+40]
	044 Move D13, [X31+16]
	045 Move D12, [X31+24]
	046 Move D15, [X31+96]
	047 Move D14, [X31+104]
	048 Return 

Method: System.Void ConvertLegacyKerningData()

Disassembly:
	0x03AEB27C LDR X0, [X0 + 0x678]
	0x03AEB280 BL 0x1C16CF4
	0x03AEB284 ADRP X0, 0x60F000

ISIL:
	001 Move V0, [X0+56]
	002 Move [X0+28], S0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x03AEB288 LDR X0, [X0 + 0x688]
	0x03AEB28C BL 0x1C16CF4
	0x03AEB290 ADRP X0, 0x609000
	0x03AEB294 LDR X0, [X0 + 0xE08]
	0x03AEB298 BL 0x1C16CF4
	0x03AEB29C ADRP X0, 0x66D000
	0x03AEB2A0 LDR X0, [X0 + 0x618]
	0x03AEB2A4 BL 0x1C16CF4
	0x03AEB2A8 MOVZ W8, 0x1
	0x03AEB2AC STRB W8, [X25 + 0x5C8]
	0x03AEB2B0 ADRP X26, 0x66D000
	0x03AEB2B4 LDR X26, [X26 + 0x618]
	0x03AEB2B8 TBZ X23, 0x0, 0x3AEB350
	0x03AEB2BC LDR X0, [X26]
	0x03AEB2C0 LDR W8, [X0 + 0xE0]
	0x03AEB2C4 CBNZ W8, 0x3AEB2D0
	0x03AEB2C8 BL 0x1C16DFC
	0x03AEB2CC LDR X0, [X26]
	0x03AEB2D0 LDR X8, [X0 + 0xB8]
	0x03AEB2D4 LDR X8, [X8 + 0x8]
	0x03AEB2D8 CBZ X8, 0x3AEB310
	0x03AEB2DC LDR W9, [X0 + 0xE0]
	0x03AEB2E0 CBNZ W9, 0x3AEB2F8
	0x03AEB2E4 BL 0x1C16DFC
	0x03AEB2E8 LDR X8, [X26]
	0x03AEB2EC LDR X8, [X8 + 0xB8]
	0x03AEB2F0 LDR X8, [X8 + 0x8]
	0x03AEB2F4 CBZ X8, 0x3AEB390

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x8F8000
	005 Move X20, 0x66E000
	006 Move W8, [X19+1466]
	007 Move X20, [X20+3904]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x66E000
	013 Move X0, [X0+3904]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1466], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call Object..ctor, X0
	022 NotImplemented "Instruction MOVI not yet implemented."
	023 Move [X19+16], W31
	024 Move [X19+36], W31
	025 Move [X19+20], V0
	026 Move [X19+40], V0
	027 Move X8, [X20]
	028 Move X8, [X8+184]
	029 Move [X8], X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Return 

