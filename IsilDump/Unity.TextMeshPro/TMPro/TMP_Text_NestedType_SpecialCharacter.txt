Type: TMPro.TMP_Text/SpecialCharacter

Method: System.Void .ctor(TMPro.TMP_Character character, System.Int32 materialIndex)

Disassembly:
	0x03B1CAD8 LDP X22, X21, [X31 + 0x30]
	0x03B1CADC LDP X24, X23, [X31 + 0x20]
	0x03B1CAE0 LDP X26, X25, [X31 + 0x10]
	0x03B1CAE4 LDR X30, [X31], #0x50
	0x03B1CAE8 RET
	0x03B1CAEC CBZ X8, 0x3B1CBF0
	0x03B1CAF0 ADRP X9, 0x63D000
	0x03B1CAF4 LDR X9, [X9 + 0xA78]
	0x03B1CAF8 LDR W1, [X8 + 0x18]
	0x03B1CAFC LDR X0, [X9]
	0x03B1CB00 BL 0x1C16D6C
	0x03B1CB04 STR X0, [X19 + 0x68]
	0x03B1CB08 CBZ X0, 0x3B1CBF0
	0x03B1CB0C MOV X21, X0
	0x03B1CB10 MOV X25, X31
	0x03B1CB14 MOV W26, W31
	0x03B1CB18 LDR W8, [X21 + 0x18]
	0x03B1CB1C CMP W26, W8
	0x03B1CB20 B.GE 0x3B1C8C8
	0x03B1CB24 LDR X8, [X19 + 0x60]
	0x03B1CB28 CBZ X8, 0x3B1CBF0
	0x03B1CB2C LDR W9, [X8 + 0x18]
	0x03B1CB30 CMP W26, W9
	0x03B1CB34 B.CS 0x3B1CBF4
	0x03B1CB38 ADD X8, X8, X25
	0x03B1CB3C LDR X8, [X8 + 0x30]
	0x03B1CB40 CBZ X8, 0x3B1CBF0
	0x03B1CB44 LDR W20, [X8 + 0x18]
	0x03B1CB48 LDR X0, [X22]
	0x03B1CB4C MOV W1, W20
	0x03B1CB50 BL 0x1C16D6C
	0x03B1CB54 LDR W8, [X21 + 0x18]
	0x03B1CB58 CMP W26, W8
	0x03B1CB5C B.CS 0x3B1CBF4
	0x03B1CB60 ADD X8, X21, X25
	0x03B1CB64 STR X0, [X8 + 0x30]
	0x03B1CB68 LDR X21, [X19 + 0x68]
	0x03B1CB6C CBZ X21, 0x3B1CBF0
	0x03B1CB70 LDR X0, [X23]
	0x03B1CB74 MOV W1, W20
	0x03B1CB78 BL 0x1C16D6C
	0x03B1CB7C LDR W8, [X21 + 0x18]
	0x03B1CB80 CMP W26, W8
	0x03B1CB84 B.CS 0x3B1CBF4
	0x03B1CB88 ADD X8, X21, X25
	0x03B1CB8C STR X0, [X8 + 0x48]
	0x03B1CB90 LDR X21, [X19 + 0x68]
	0x03B1CB94 CBZ X21, 0x3B1CBF0
	0x03B1CB98 LDR X0, [X23]
	0x03B1CB9C MOV W1, W20
	0x03B1CBA0 BL 0x1C16D6C
	0x03B1CBA4 LDR W8, [X21 + 0x18]
	0x03B1CBA8 CMP W26, W8
	0x03B1CBAC B.CS 0x3B1CBF4
	0x03B1CBB0 ADD X8, X21, X25
	0x03B1CBB4 STR X0, [X8 + 0x50]
	0x03B1CBB8 LDR X21, [X19 + 0x68]
	0x03B1CBBC CBZ X21, 0x3B1CBF0
	0x03B1CBC0 LDR X0, [X24]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8C7000
	007 Move W8, [X22+1778]
	008 Move W19, W2
	009 Move X21, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x5D8000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move X0, 0x63D000
	019 Move X0, [X0+1400]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1778], W8
	023 Move [X20], X21
	024 Compare X21, 0
	025 JumpIfEqual {71}
	026 Move X8, 0x5D8000
	027 Move X9, [X21+24]
	028 Move X8, [X8+1432]
	029 Compare X9, 0
	030 JumpIfEqual {38}
	031 Move X10, 0x63D000
	032 Move X10, [X10+1400]
	033 Move X11, [X9]
	034 Move X10, [X10]
	035 Move W13, [X11+304]
	036 Move W12, [X10+304]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X21, X31
	039 Move X11, [X11+200]
	040 Add X11, X11, X12
	041 NotImplemented "Instruction LDUR not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CSEL not yet implemented."
	044 Move [X20+8], X21
	045 Move X0, [X8]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X21
	051 Move X1, X31
	052 Move X2, X31
	053 Call Object.op_Inequality, X0, X1
	054 Move X8, X31
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {63}
	059 Move X8, [X20+8]
	060 Compare X8, 0
	061 JumpIfEqual {71}
	062 Move X8, [X8+32]
	063 Move [X20+16], X8
	064 Move [X20+24], W19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+48]
	070 Return 
	071 Call 0x1C17F20

