Type: TMPro.TMP_SelectionCaret

Method: System.Void Cull(UnityEngine.Rect clipRect, System.Boolean validRect)

Disassembly:
	0x03B14B50 LDR X8, [X8 + 0xB8]
	0x03B14B54 LDR W1, [X8 + 0x3C]
	0x03B14B58 BL 0x3C15F98
	0x03B14B5C LDR X8, [X21]
	0x03B14B60 MOV X0, X19
	0x03B14B64 MOV X2, X31
	0x03B14B68 MOV V9.16B, V0.16B
	0x03B14B6C LDR X8, [X8 + 0xB8]
	0x03B14B70 LDR W1, [X8 + 0x40]
	0x03B14B74 BL 0x3C15F98
	0x03B14B78 LDR X8, [X21]
	0x03B14B7C MOV X0, X19
	0x03B14B80 MOV X2, X31
	0x03B14B84 MOV V11.16B, V0.16B
	0x03B14B88 LDR X8, [X8 + 0xB8]
	0x03B14B8C LDR W1, [X8 + 0x30]
	0x03B14B90 BL 0x3C15F98
	0x03B14B94 LDR X8, [X21]
	0x03B14B98 MOV X0, X19
	0x03B14B9C MOV X2, X31
	0x03B14BA0 MOV V12.16B, V0.16B
	0x03B14BA4 LDR X8, [X8 + 0xB8]
	0x03B14BA8 LDR W1, [X8 + 0x34]
	0x03B14BAC BL 0x3C15F98
	0x03B14BB0 FCMP S12, S0
	0x03B14BB4 LDR X0, [X21]
	0x03B14BB8 FMOV S1, 0.25
	0x03B14BBC FCSEL S0, S12, S0, GT
	0x03B14BC0 FMUL S0, S0, S1
	0x03B14BC4 FADD S12, S10, S0
	0x03B14BC8 FMOV S10, 1
	0x03B14BCC TBNZ X20, 0x0, 0x3B14C00
	0x03B14BD0 LDR W8, [X0 + 0xE0]
	0x03B14BD4 FADD S0, S9, S12
	0x03B14BD8 FADD S0, S11, S0
	0x03B14BDC FMAX S9, S0, S10
	0x03B14BE0 CBNZ W8, 0x3B14BEC
	0x03B14BE4 BL 0x1C16DFC
	0x03B14BE8 LDR X0, [X21]
	0x03B14BEC LDR X8, [X0 + 0xB8]
	0x03B14BF0 FMUL S1, S8, S9
	0x03B14BF4 LDR V0, [X8 + 0x128]
	0x03B14BF8 FSUB S0, S8, S0
	0x03B14BFC FDIV S10, S0, S1
	0x03B14C00 LDR W8, [X0 + 0xE0]
	0x03B14C04 CBNZ W8, 0x3B14C10
	0x03B14C08 BL 0x1C16DFC
	0x03B14C0C LDR X0, [X21]
	0x03B14C10 LDR X8, [X0 + 0xB8]
	0x03B14C14 MOV X0, X19
	0x03B14C18 MOV V0.16B, V10.16B
	0x03B14C1C MOV X2, X31

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x8CF000
	010 Move W8, [X21+1694]
	011 Move W20, W1
	012 Move V8, V3
	013 Move V9, V2
	014 Move V10, V1
	015 Move V11, V0
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x645000
	022 Move X0, [X0+1816]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+1694], W8
	026 Move TEMP, X20
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {57}
	030 Move X0, X19
	031 Move X1, X31
	032 Call Graphic.get_canvasRenderer, X0
	033 Compare X0, 0
	034 JumpIfEqual {74}
	035 Move W1, W31
	036 Move X2, X31
	037 Call CanvasRenderer.set_cull, X0, X1
	038 Move X8, 0x645000
	039 Move X8, [X8+1816]
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X19
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Move D9, [X31+16]
	051 Move D8, [X31+24]
	052 Move X1, X31
	053 Move D11, [X31+64]
	054 Move D10, [X31+72]
	055 Call CanvasUpdateRegistry.RegisterCanvasElementForGraphicRebuild, X0
	056 Return 
	057 Move X0, X19
	058 Move V2, V9
	059 Move V3, V8
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Move D9, [X31+16]
	065 Move D8, [X31+24]
	066 Move V0, V11
	067 Move V1, V10
	068 Move W1, W31
	069 Move X2, X31
	070 Move D11, [X31+64]
	071 Move D10, [X31+72]
	072 Call MaskableGraphic.Cull, X0, X1, X2
	073 Return 
	074 Call 0x1C17F20

Method: System.Void UpdateGeometry()

Disassembly:
	0x03B14C20 LDR W1, [X8 + 0xCC]

ISIL:
	001 Return 

Method: System.Void .ctor()

Disassembly:
	0x03B14C24 BL 0x3C15CD8
	0x03B14C28 LDR X8, [X21]

ISIL:
	001 Move X1, X31
	002 Call MaskableGraphic..ctor, X0
	003 Return 

