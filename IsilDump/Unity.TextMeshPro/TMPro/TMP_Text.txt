Type: TMPro.TMP_Text

Method: System.String get_text()

Disassembly:
	0x03AF8008 CMP W8, W1
	0x03AF800C B.NE 0x3AF8018
	0x03AF8010 LDP X30, X19, [X31], #0x10
	0x03AF8014 RET
	0x03AF8018 LDR X8, [X0]

ISIL:
	001 Move W8, [X0+224]
	002 Compare W8, 0
	003 JumpIfEqual {4}
	004 Move X0, [X0+216]
	005 Return X0

Method: System.Void set_text(System.String value)

Disassembly:
	0x03AF80F0 STR W8, [X0 + 0x270]
	0x03AF80F4 LDR X8, [X0]
	0x03AF80F8 AND W9, W1, 0xFF
	0x03AF80FC MOVZ W10, 0x1
	0x03AF8100 STR W9, [X0 + 0x26C]
	0x03AF8104 STRB W10, [X0 + 0x370]
	0x03AF8108 LDR X2, [X8 + 0x2F8]
	0x03AF810C LDR X1, [X8 + 0x300]
	0x03AF8110 BR X2
	0x03AF8114 LDR V0, [X0 + 0x2A8]
	0x03AF8118 RET
	0x03AF811C STP X30, X19, [X31 - 0x10]!
	0x03AF8120 LDR V1, [X0 + 0x2A8]
	0x03AF8124 FCMP S1, S0
	0x03AF8128 B.NE 0x3AF8134
	0x03AF812C LDP X30, X19, [X31], #0x10
	0x03AF8130 RET
	0x03AF8134 LDR X8, [X0]
	0x03AF8138 MOVZ W9, 0x1
	0x03AF813C STR S0, [X0 + 0x2A8]
	0x03AF8140 STRB W9, [X0 + 0x370]
	0x03AF8144 LDR X9, [X8 + 0x2F8]
	0x03AF8148 LDR X1, [X8 + 0x300]
	0x03AF814C MOV X19, X0
	0x03AF8150 BLR X9
	0x03AF8154 LDR X8, [X19]
	0x03AF8158 MOV X0, X19
	0x03AF815C LDR X2, [X8 + 0x2E8]
	0x03AF8160 LDR X1, [X8 + 0x2F0]
	0x03AF8164 LDP X30, X19, [X31], #0x10
	0x03AF8168 BR X2
	0x03AF816C LDR V0, [X0 + 0x2B4]
	0x03AF8170 RET
	0x03AF8174 STP X30, X19, [X31 - 0x10]!
	0x03AF8178 LDR V1, [X0 + 0x2B4]
	0x03AF817C FCMP S1, S0
	0x03AF8180 B.NE 0x3AF818C
	0x03AF8184 LDP X30, X19, [X31], #0x10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+224]
	005 Move X19, X0
	006 Move X20, X1
	007 Compare W8, 0
	008 JumpIfEqual {28}
	009 Move X9, [X19]
	010 Move W8, 3
	011 Move W10, 1
	012 Move [X19+224], W31
	013 Move [X19+216], X20
	014 Move [X19+1024], W8
	015 Move [X19+880], W10
	016 Move X8, [X9+760]
	017 Move X1, [X9+768]
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move X8, [X19]
	021 Move X0, X19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X2, [X8+744]
	025 Move X1, [X8+752]
	026 Move X30, [X31+32]
	027 CallNoReturn X2
	028 Compare X20, 0
	029 JumpIfEqual {9}
	030 Move X0, [X19+216]
	031 Compare X0, 0
	032 JumpIfEqual {9}
	033 Move W8, [X0+16]
	034 Move W9, [X20+16]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X1, X20
	037 Move X2, X31
	038 Call String.op_Equality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {9}
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Return 

Method: TMPro.ITextPreprocessor get_textPreprocessor()

Disassembly:
	0x03AF8188 RET
	0x03AF818C LDR X8, [X0]

ISIL:
	001 Move X0, [X0+232]
	002 Return X0

Method: System.Void set_textPreprocessor(TMPro.ITextPreprocessor value)

Disassembly:
	0x03AF8190 MOVZ W9, 0x1
	0x03AF8194 STR S0, [X0 + 0x2B4]

ISIL:
	001 Move [X0+232], X1
	002 Return 

Method: System.Boolean get_isRightToLeftText()

Disassembly:
	0x03AF8198 STRB W9, [X0 + 0x370]
	0x03AF819C LDR X9, [X8 + 0x2F8]

ISIL:
	001 Move W0, [X0+240]
	002 Return X0

Method: System.Void set_isRightToLeftText(System.Boolean value)

Disassembly:
	0x03AF81A0 LDR X1, [X8 + 0x300]
	0x03AF81A4 MOV X19, X0
	0x03AF81A8 BLR X9
	0x03AF81AC LDR X8, [X19]
	0x03AF81B0 MOV X0, X19
	0x03AF81B4 LDR X2, [X8 + 0x2E8]
	0x03AF81B8 LDR X1, [X8 + 0x2F0]
	0x03AF81BC LDP X30, X19, [X31], #0x10
	0x03AF81C0 BR X2
	0x03AF81C4 LDR V0, [X0 + 0x2B8]
	0x03AF81C8 RET
	0x03AF81CC STP X30, X19, [X31 - 0x10]!
	0x03AF81D0 LDR V1, [X0 + 0x2B8]
	0x03AF81D4 FCMP S1, S0
	0x03AF81D8 B.NE 0x3AF81E4
	0x03AF81DC LDP X30, X19, [X31], #0x10
	0x03AF81E0 RET
	0x03AF81E4 LDR X8, [X0]
	0x03AF81E8 MOVZ W9, 0x1
	0x03AF81EC STR S0, [X0 + 0x2B8]
	0x03AF81F0 STRB W9, [X0 + 0x370]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W9, [X0+240]
	004 And W8, W1, 1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 
	009 Move X9, [X0]
	010 Move [X0+240], W8
	011 Move W8, 1
	012 Move [X0+880], W8
	013 Move X8, [X9+760]
	014 Move X1, [X9+768]
	015 Move X19, X0
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+744]
	020 Move X1, [X8+752]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2

Method: TMPro.TMP_FontAsset get_font()

Disassembly:
	0x03AF81F4 LDR X9, [X8 + 0x2F8]
	0x03AF81F8 LDR X1, [X8 + 0x300]

ISIL:
	001 Move X0, [X0+248]
	002 Return X0

Method: System.Void set_font(TMPro.TMP_FontAsset value)

Disassembly:
	0x03AF81FC MOV X19, X0
	0x03AF8200 BLR X9
	0x03AF8204 LDR X8, [X19]
	0x03AF8208 MOV X0, X19
	0x03AF820C LDR X2, [X8 + 0x2E8]
	0x03AF8210 LDR X1, [X8 + 0x2F0]
	0x03AF8214 LDP X30, X19, [X31], #0x10
	0x03AF8218 BR X2
	0x03AF821C LDR V0, [X0 + 0x2C8]
	0x03AF8220 RET
	0x03AF8224 STP X30, X19, [X31 - 0x10]!
	0x03AF8228 LDR V1, [X0 + 0x2C8]
	0x03AF822C FCMP S1, S0
	0x03AF8230 B.NE 0x3AF823C
	0x03AF8234 LDP X30, X19, [X31], #0x10
	0x03AF8238 RET
	0x03AF823C LDR X8, [X0]
	0x03AF8240 MOVZ W9, 0x1
	0x03AF8244 STR S0, [X0 + 0x2C8]
	0x03AF8248 STRB W9, [X0 + 0x370]
	0x03AF824C LDR X9, [X8 + 0x2F8]
	0x03AF8250 LDR X1, [X8 + 0x300]
	0x03AF8254 MOV X19, X0
	0x03AF8258 BLR X9
	0x03AF825C LDR X8, [X19]
	0x03AF8260 MOV X0, X19
	0x03AF8264 LDR X2, [X8 + 0x2E8]
	0x03AF8268 LDR X1, [X8 + 0x2F0]
	0x03AF826C LDP X30, X19, [X31], #0x10
	0x03AF8270 BR X2
	0x03AF8274 LDR V0, [X0 + 0x2CC]
	0x03AF8278 RET
	0x03AF827C STP X30, X19, [X31 - 0x10]!
	0x03AF8280 LDR V1, [X0 + 0x2CC]
	0x03AF8284 FCMP S1, S0
	0x03AF8288 B.NE 0x3AF8294
	0x03AF828C LDP X30, X19, [X31], #0x10
	0x03AF8290 RET
	0x03AF8294 LDR X8, [X0]
	0x03AF8298 MOVZ W9, 0x1
	0x03AF829C STR S0, [X0 + 0x2CC]
	0x03AF82A0 STRB W9, [X0 + 0x370]
	0x03AF82A4 LDR X9, [X8 + 0x2F8]
	0x03AF82A8 LDR X1, [X8 + 0x300]
	0x03AF82AC MOV X19, X0
	0x03AF82B0 BLR X9
	0x03AF82B4 LDR X8, [X19]
	0x03AF82B8 MOV X0, X19
	0x03AF82BC LDR X2, [X8 + 0x2E8]
	0x03AF82C0 LDR X1, [X8 + 0x2F0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8EB000
	007 Move X21, 0x5FC000
	008 Move W8, [X22+1578]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5FC000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1578], W8
	021 Move X0, [X21]
	022 Move X21, [X19+248]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X21
	028 Move X1, X20
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {41}
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return 
	041 Move X8, [X19]
	042 Move [X19+248], X20
	043 Move X0, X19
	044 Move X9, [X8+1736]
	045 Move X1, [X8+1744]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move X8, [X19]
	048 Move W9, 1
	049 Move [X19+880], W9
	050 Move X0, X19
	051 Move X9, [X8+760]
	052 Move X1, [X8+768]
	053 NotImplemented "Instruction BLR not yet implemented."
	054 Move X8, [X19]
	055 Move X0, X19
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move X2, [X8+744]
	061 Move X1, [X8+752]
	062 Move X30, [X31+48]
	063 CallNoReturn X2

Method: UnityEngine.Material get_fontSharedMaterial()

Disassembly:
	0x03AF82C4 LDP X30, X19, [X31], #0x10
	0x03AF82C8 BR X2

ISIL:
	001 Move X0, [X0+272]
	002 Return X0

Method: System.Void set_fontSharedMaterial(UnityEngine.Material value)

Disassembly:
	0x03AF82CC LDR V0, [X0 + 0x2D0]
	0x03AF82D0 RET
	0x03AF82D4 STP X30, X19, [X31 - 0x10]!
	0x03AF82D8 LDR V1, [X0 + 0x2D0]
	0x03AF82DC FCMP S1, S0
	0x03AF82E0 B.NE 0x3AF82EC
	0x03AF82E4 LDP X30, X19, [X31], #0x10
	0x03AF82E8 RET
	0x03AF82EC LDR X8, [X0]
	0x03AF82F0 MOVZ W9, 0x1
	0x03AF82F4 STR S0, [X0 + 0x2D0]
	0x03AF82F8 STRB W9, [X0 + 0x370]
	0x03AF82FC LDR X9, [X8 + 0x2F8]
	0x03AF8300 LDR X1, [X8 + 0x300]
	0x03AF8304 MOV X19, X0
	0x03AF8308 BLR X9
	0x03AF830C LDR X8, [X19]
	0x03AF8310 MOV X0, X19
	0x03AF8314 LDR X2, [X8 + 0x2E8]
	0x03AF8318 LDR X1, [X8 + 0x2F0]
	0x03AF831C LDP X30, X19, [X31], #0x10
	0x03AF8320 BR X2
	0x03AF8324 LDRB W0, [X0 + 0x2D8]
	0x03AF8328 RET
	0x03AF832C STP X30, X19, [X31 - 0x10]!
	0x03AF8330 LDRB W9, [X0 + 0x2D8]
	0x03AF8334 AND W8, W1, 0x1
	0x03AF8338 CMP W9, W8
	0x03AF833C B.NE 0x3AF8348
	0x03AF8340 LDP X30, X19, [X31], #0x10
	0x03AF8344 RET
	0x03AF8348 LDR X9, [X0]
	0x03AF834C MOVZ W10, 0x1
	0x03AF8350 STRB W8, [X0 + 0x2D8]
	0x03AF8354 STRB W10, [X0 + 0x370]
	0x03AF8358 LDR X8, [X9 + 0x2F8]
	0x03AF835C LDR X1, [X9 + 0x300]
	0x03AF8360 MOV X19, X0
	0x03AF8364 BLR X8
	0x03AF8368 LDR X8, [X19]
	0x03AF836C MOV X0, X19
	0x03AF8370 LDR X2, [X8 + 0x2E8]
	0x03AF8374 LDR X1, [X8 + 0x2F0]
	0x03AF8378 LDP X30, X19, [X31], #0x10
	0x03AF837C BR X2
	0x03AF8380 LDR V0, [X0 + 0x2DC]
	0x03AF8384 RET
	0x03AF8388 STP X30, X19, [X31 - 0x10]!
	0x03AF838C LDR V1, [X0 + 0x2DC]
	0x03AF8390 FCMP S1, S0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8EB000
	007 Move X21, 0x5FC000
	008 Move W8, [X22+1579]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5FC000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1579], W8
	021 Move X0, [X21]
	022 Move X21, [X19+272]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X21
	028 Move X1, X20
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {41}
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return 
	041 Move X8, [X19]
	042 Move X0, X19
	043 Move X1, X20
	044 Move X9, [X8+1752]
	045 Move X2, [X8+1760]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move X8, [X19]
	048 Move W9, 1
	049 Move [X19+880], W9
	050 Move X0, X19
	051 Move X9, [X8+760]
	052 Move X1, [X8+768]
	053 NotImplemented "Instruction BLR not yet implemented."
	054 Move X8, [X19]
	055 Move X0, X19
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move X2, [X8+776]
	061 Move X1, [X8+784]
	062 Move X30, [X31+48]
	063 CallNoReturn X2

Method: UnityEngine.Material[] get_fontSharedMaterials()

Disassembly:
	0x03AF8394 B.NE 0x3AF83A0
	0x03AF8398 LDP X30, X19, [X31], #0x10
	0x03AF839C RET
	0x03AF83A0 LDR X8, [X0]

ISIL:
	001 Move X8, [X0]
	002 Move X2, [X8+1800]
	003 Move X1, [X8+1808]
	004 CallNoReturn X2

Method: System.Void set_fontSharedMaterials(UnityEngine.Material[] value)

Disassembly:
	0x03AF83A4 MOVZ W9, 0x1
	0x03AF83A8 STR S0, [X0 + 0x2DC]
	0x03AF83AC STRB W9, [X0 + 0x370]
	0x03AF83B0 LDR X9, [X8 + 0x2F8]
	0x03AF83B4 LDR X1, [X8 + 0x300]
	0x03AF83B8 MOV X19, X0
	0x03AF83BC BLR X9
	0x03AF83C0 LDR X8, [X19]
	0x03AF83C4 MOV X0, X19
	0x03AF83C8 LDR X2, [X8 + 0x2E8]
	0x03AF83CC LDR X1, [X8 + 0x2F0]
	0x03AF83D0 LDP X30, X19, [X31], #0x10
	0x03AF83D4 BR X2
	0x03AF83D8 LDR W0, [X0 + 0x2E0]
	0x03AF83DC RET
	0x03AF83E0 STP X30, X19, [X31 - 0x10]!
	0x03AF83E4 LDR W8, [X0 + 0x2E0]
	0x03AF83E8 CMP W8, W1
	0x03AF83EC B.NE 0x3AF83F8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move X19, X0
	005 Move X9, [X8+1816]
	006 Move X2, [X8+1824]
	007 NotImplemented "Instruction BLR not yet implemented."
	008 Move X8, [X19]
	009 Move W9, 1
	010 Move [X19+880], W9
	011 Move X0, X19
	012 Move X9, [X8+760]
	013 Move X1, [X8+768]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X8, [X19]
	016 Move X0, X19
	017 Move X2, [X8+776]
	018 Move X1, [X8+784]
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 CallNoReturn X2

Method: UnityEngine.Material get_fontMaterial()

Disassembly:
	0x03AF83F0 LDP X30, X19, [X31], #0x10
	0x03AF83F4 RET
	0x03AF83F8 LDR X8, [X0]
	0x03AF83FC MOVZ W9, 0x1
	0x03AF8400 STR W1, [X0 + 0x2E0]

ISIL:
	001 Move X8, [X0]
	002 Move X1, [X0+272]
	003 Move X3, [X8+1768]
	004 Move X2, [X8+1776]
	005 CallNoReturn X3

Method: System.Void set_fontMaterial(UnityEngine.Material value)

Disassembly:
	0x03AF8404 STRB W9, [X0 + 0x370]
	0x03AF8408 LDR X9, [X8 + 0x2F8]
	0x03AF840C LDR X1, [X8 + 0x300]
	0x03AF8410 MOV X19, X0
	0x03AF8414 BLR X9
	0x03AF8418 LDR X8, [X19]
	0x03AF841C MOV X0, X19
	0x03AF8420 LDR X2, [X8 + 0x2E8]
	0x03AF8424 LDR X1, [X8 + 0x2F0]
	0x03AF8428 LDP X30, X19, [X31], #0x10
	0x03AF842C BR X2
	0x03AF8430 LDR W8, [X0 + 0x2E4]
	0x03AF8434 ADDS W31, W8, 0x1
	0x03AF8438 CSET W0, NE
	0x03AF843C RET
	0x03AF8440 LDR W0, [X0 + 0x2E4]
	0x03AF8444 RET
	0x03AF8448 LDR X0, [X0 + 0x2E8]
	0x03AF844C RET
	0x03AF8450 STR X30, [X31 - 0x30]!
	0x03AF8454 STP X22, X21, [X31 + 0x10]
	0x03AF8458 STP X20, X19, [X31 + 0x20]
	0x03AF845C ADRP X21, 0x8EA000
	0x03AF8460 ADRP X22, 0x5FB000
	0x03AF8464 LDRB W8, [X21 + 0x631]
	0x03AF8468 LDR X22, [X22 + 0x598]
	0x03AF846C MOV X20, X1
	0x03AF8470 MOV X19, X0
	0x03AF8474 TBNZ X8, 0x0, 0x3AF848C
	0x03AF8478 ADRP X0, 0x5FB000
	0x03AF847C LDR X0, [X0 + 0x598]
	0x03AF8480 BL 0x1C16CF4
	0x03AF8484 MOVZ W8, 0x1
	0x03AF8488 STRB W8, [X21 + 0x631]
	0x03AF848C LDR X0, [X22]
	0x03AF8490 LDR W8, [X0 + 0xE0]
	0x03AF8494 CBNZ W8, 0x3AF849C
	0x03AF8498 BL 0x1C16DFC
	0x03AF849C MOV X0, X20
	0x03AF84A0 MOV X1, X31
	0x03AF84A4 MOV X2, X31
	0x03AF84A8 BL 0x3C3883C
	0x03AF84AC TBZ X0, 0x0, 0x3AF84C4
	0x03AF84B0 LDR X1, [X19 + 0x2E8]
	0x03AF84B4 MOV X0, X19
	0x03AF84B8 BL 0x3AF853C
	0x03AF84BC STR X20, [X19 + 0x2E8]
	0x03AF84C0 B 0x3AF84FC
	0x03AF84C4 MOV X0, X19
	0x03AF84C8 MOV X1, X20
	0x03AF84CC BL 0x3AF8654
	0x03AF84D0 TBZ X0, 0x0, 0x3AF84E4
	0x03AF84D4 LDP X20, X19, [X31 + 0x20]
	0x03AF84D8 LDP X22, X21, [X31 + 0x10]
	0x03AF84DC LDR X30, [X31], #0x30
	0x03AF84E0 RET
	0x03AF84E4 LDR X1, [X19 + 0x2E8]
	0x03AF84E8 MOV X0, X19
	0x03AF84EC BL 0x3AF853C
	0x03AF84F0 STR X20, [X19 + 0x2E8]
	0x03AF84F4 CBZ X20, 0x3AF8538
	0x03AF84F8 STR X19, [X20 + 0x2F0]
	0x03AF84FC LDR X8, [X19]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8EB000
	007 Move X21, 0x5FC000
	008 Move W8, [X22+1580]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5FC000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1580], W8
	021 Move X0, [X21]
	022 Move X21, [X19+272]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X21
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Inequality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {53}
	035 Move X0, [X19+272]
	036 Compare X0, 0
	037 JumpIfEqual {77}
	038 Move X1, X31
	039 Call Object.GetInstanceID, X0
	040 Compare X20, 0
	041 JumpIfEqual {77}
	042 Move W21, W0
	043 Move X0, X20
	044 Move X1, X31
	045 Call Object.GetInstanceID, X0
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Return 
	053 Move X8, [X19]
	054 Move [X19+272], X20
	055 Move X0, X19
	056 Move X9, [X8+1960]
	057 Move X1, [X8+1968]
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Move X8, [X19]
	060 Move W9, 1
	061 Move [X19+1560], S0
	062 Move [X19+880], W9
	063 Move X9, [X8+760]
	064 Move X1, [X8+768]
	065 Move X0, X19
	066 NotImplemented "Instruction BLR not yet implemented."
	067 Move X8, [X19]
	068 Move X0, X19
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move X2, [X8+776]
	074 Move X1, [X8+784]
	075 Move X30, [X31+48]
	076 CallNoReturn X2
	077 Call 0x1C17F20

Method: UnityEngine.Material[] get_fontMaterials()

Disassembly:
	0x03AF8500 MOVZ W9, 0x1
	0x03AF8504 STRB W9, [X19 + 0x370]
	0x03AF8508 MOV X0, X19
	0x03AF850C LDR X9, [X8 + 0x2F8]
	0x03AF8510 LDR X1, [X8 + 0x300]

ISIL:
	001 Move X8, [X0]
	002 Move X1, [X0+296]
	003 Move X3, [X8+1832]
	004 Move X2, [X8+1840]
	005 CallNoReturn X3

Method: System.Void set_fontMaterials(UnityEngine.Material[] value)

Disassembly:
	0x03AF8514 BLR X9
	0x03AF8518 LDR X8, [X19]
	0x03AF851C MOV X0, X19
	0x03AF8520 LDP X20, X19, [X31 + 0x20]
	0x03AF8524 LDP X22, X21, [X31 + 0x10]
	0x03AF8528 LDR X2, [X8 + 0x2E8]
	0x03AF852C LDR X1, [X8 + 0x2F0]
	0x03AF8530 LDR X30, [X31], #0x30
	0x03AF8534 BR X2
	0x03AF8538 BL 0x1C16F20
	0x03AF853C STR X30, [X31 - 0x30]!
	0x03AF8540 STP X22, X21, [X31 + 0x10]
	0x03AF8544 STP X20, X19, [X31 + 0x20]
	0x03AF8548 ADRP X22, 0x8EA000
	0x03AF854C ADRP X21, 0x5FB000
	0x03AF8550 LDRB W8, [X22 + 0x668]
	0x03AF8554 LDR X21, [X21 + 0x598]
	0x03AF8558 MOV X19, X1
	0x03AF855C MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move X19, X0
	005 Move X9, [X8+1816]
	006 Move X2, [X8+1824]
	007 NotImplemented "Instruction BLR not yet implemented."
	008 Move X8, [X19]
	009 Move W9, 1
	010 Move [X19+880], W9
	011 Move X0, X19
	012 Move X9, [X8+760]
	013 Move X1, [X8+768]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X8, [X19]
	016 Move X0, X19
	017 Move X2, [X8+776]
	018 Move X1, [X8+784]
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 CallNoReturn X2

Method: UnityEngine.Color get_color()

Disassembly:
	0x03AF8560 TBNZ X8, 0x0, 0x3AF8584
	0x03AF8564 ADRP X0, 0x5FB000
	0x03AF8568 LDR X0, [X0 + 0x598]
	0x03AF856C BL 0x1C16CF4
	0x03AF8570 ADRP X0, 0x5FD000

ISIL:
	001 Move V0, [X0+328]
	002 Move V1, [X0+332]
	003 Move V2, [X0+336]
	004 Move V3, [X0+340]
	005 Return X0

Method: System.Void set_color(UnityEngine.Color value)

Disassembly:
	0x03AF8574 LDR X0, [X0 + 0x278]
	0x03AF8578 BL 0x1C16CF4
	0x03AF857C MOVZ W8, 0x1
	0x03AF8580 STRB W8, [X22 + 0x668]
	0x03AF8584 LDR X0, [X21]
	0x03AF8588 LDR W8, [X0 + 0xE0]
	0x03AF858C CBNZ W8, 0x3AF8594
	0x03AF8590 BL 0x1C16DFC
	0x03AF8594 MOV X0, X19
	0x03AF8598 MOV X1, X31
	0x03AF859C MOV X2, X31
	0x03AF85A0 BL 0x3C3883C
	0x03AF85A4 TBNZ X0, 0x0, 0x3AF8640
	0x03AF85A8 CBZ X19, 0x3AF8650
	0x03AF85AC LDR X0, [X21]
	0x03AF85B0 LDR X21, [X19 + 0x2E8]
	0x03AF85B4 LDR W8, [X0 + 0xE0]
	0x03AF85B8 CBNZ W8, 0x3AF85C0
	0x03AF85BC BL 0x1C16DFC
	0x03AF85C0 MOV X0, X21
	0x03AF85C4 MOV X1, X31
	0x03AF85C8 MOV X2, X31
	0x03AF85CC BL 0x3C354F8
	0x03AF85D0 TBZ X0, 0x0, 0x3AF85E0
	0x03AF85D4 MOV X0, X20
	0x03AF85D8 MOV X1, X21
	0x03AF85DC BL 0x3AF853C
	0x03AF85E0 ADRP X8, 0x5FD000
	0x03AF85E4 LDR X8, [X8 + 0x278]
	0x03AF85E8 LDR X9, [X19]

ISIL:
	001 Move V4, [X0+328]
	002 Move V5, [X0+332]
	003 Move V6, [X0+336]
	004 Move V7, [X0+340]
	005 Subtract S4, S4, S0
	006 Subtract S5, S5, S1
	007 Move X8, -50388992
	008 Multiply S4, S4, S4
	009 Multiply S5, S5, S5
	010 Add S4, S4, S5
	011 Move V5, [X8+3872]
	012 Subtract S6, S6, S2
	013 Subtract S7, S7, S3
	014 Multiply S6, S6, S6
	015 Add S4, S6, S4
	016 Multiply S6, S7, S7
	017 Add S4, S6, S4
	018 NotImplemented "Instruction FCMP not yet implemented."
	019 Return 
	020 Move X9, [X0]
	021 Move W8, 1
	022 Move [X0+328], S0
	023 Move [X0+332], S1
	024 Move [X0+336], S2
	025 Move [X0+340], S3
	026 Move [X0+880], W8
	027 Move X2, [X9+760]
	028 Move X1, [X9+768]
	029 CallNoReturn X2

Method: System.Single get_alpha()

Disassembly:
	0x03AF85EC MOV X0, X19
	0x03AF85F0 LDR X8, [X8]

ISIL:
	001 Move V0, [X0+340]
	002 Return V0

Method: System.Void set_alpha(System.Single value)

Disassembly:
	0x03AF85F4 LDR X10, [X9 + 0x558]
	0x03AF85F8 LDR X2, [X9 + 0x560]
	0x03AF85FC LDR X8, [X8 + 0xB8]
	0x03AF8600 LDR X1, [X8]
	0x03AF8604 BLR X10
	0x03AF8608 LDR W8, [X19 + 0x324]
	0x03AF860C CBZ W8, 0x3AF8630
	0x03AF8610 LDR X8, [X19]
	0x03AF8614 MOVZ W9, 0x1
	0x03AF8618 STR W31, [X19 + 0x324]
	0x03AF861C STRB W9, [X19 + 0x370]

ISIL:
	001 Move V1, [X0+340]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Return 
	004 Move X8, [X0]
	005 Move W9, 1
	006 Move [X0+340], S0
	007 Move [X0+880], W9
	008 Move X2, [X8+760]
	009 Move X1, [X8+768]
	010 CallNoReturn X2

Method: System.Boolean get_enableVertexGradient()

Disassembly:
	0x03AF8620 LDR X9, [X8 + 0x2F8]
	0x03AF8624 LDR X1, [X8 + 0x300]

ISIL:
	001 Move W0, [X0+352]
	002 Return X0

Method: System.Void set_enableVertexGradient(System.Boolean value)

Disassembly:
	0x03AF8628 MOV X0, X19
	0x03AF862C BLR X9
	0x03AF8630 MOV X0, X19
	0x03AF8634 MOV X1, X31
	0x03AF8638 BL 0x3AF8450
	0x03AF863C STR X31, [X19 + 0x2F0]
	0x03AF8640 LDP X20, X19, [X31 + 0x20]
	0x03AF8644 LDP X22, X21, [X31 + 0x10]
	0x03AF8648 LDR X30, [X31], #0x30
	0x03AF864C RET
	0x03AF8650 BL 0x1C16F20
	0x03AF8654 STR X30, [X31 - 0x30]!

ISIL:
	001 Move W9, [X0+352]
	002 And W8, W1, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Return 
	005 Move X9, [X0]
	006 Move W10, 1
	007 Move [X0+352], W8
	008 Move [X0+880], W10
	009 Move X2, [X9+760]
	010 Move X1, [X9+768]
	011 CallNoReturn X2

Method: TMPro.VertexGradient get_colorGradient()

Disassembly:
	0x03AF8658 STP X22, X21, [X31 + 0x10]
	0x03AF865C STP X20, X19, [X31 + 0x20]
	0x03AF8660 ADRP X22, 0x8EA000
	0x03AF8664 ADRP X21, 0x5FB000
	0x03AF8668 LDRB W8, [X22 + 0x667]
	0x03AF866C LDR X21, [X21 + 0x598]

ISIL:
	001 Add X9, X0, 360
	002 Move V1, [X9+32]
	003 Move V0, [X9+48]
	004 Move V3, [X9]
	005 Move V2, [X9+16]
	006 Move [X8+32], V1
	007 Move [X8+40], V0
	008 Move [X8], V3
	009 Move [X8+8], V2
	010 Return X0

Method: System.Void set_colorGradient(TMPro.VertexGradient value)

Disassembly:
	0x03AF8670 MOV X19, X1
	0x03AF8674 MOV X20, X0
	0x03AF8678 TBNZ X8, 0x0, 0x3AF8690
	0x03AF867C ADRP X0, 0x5FB000
	0x03AF8680 LDR X0, [X0 + 0x598]
	0x03AF8684 BL 0x1C16CF4
	0x03AF8688 MOVZ W8, 0x1
	0x03AF868C STRB W8, [X22 + 0x667]
	0x03AF8690 LDR X0, [X21]
	0x03AF8694 LDR W8, [X0 + 0xE0]
	0x03AF8698 CBNZ W8, 0x3AF86A0

ISIL:
	001 Move W8, 1
	002 Move [X0+880], W8
	003 Move V0, [X1+32]
	004 Move V1, [X1+48]
	005 Move V2, [X1]
	006 Move V3, [X1+16]
	007 Add X8, X0, 360
	008 Move [X8+32], V0
	009 Move [X8+40], V1
	010 Move [X8], V2
	011 Move [X8+8], V3
	012 Move X8, [X0]
	013 Move X2, [X8+760]
	014 Move X1, [X8+768]
	015 CallNoReturn X2

Method: TMPro.TMP_ColorGradient get_colorGradientPreset()

Disassembly:
	0x03AF869C BL 0x1C16DFC
	0x03AF86A0 MOV X0, X19

ISIL:
	001 Move X0, [X0+424]
	002 Return X0

Method: System.Void set_colorGradientPreset(TMPro.TMP_ColorGradient value)

Disassembly:
	0x03AF86A4 MOV X1, X31
	0x03AF86A8 MOV X2, X31
	0x03AF86AC BL 0x3C3883C
	0x03AF86B0 TBZ X0, 0x0, 0x3AF86BC
	0x03AF86B4 MOVZ W0, 0x1
	0x03AF86B8 B 0x3AF8720
	0x03AF86BC LDR X0, [X21]

ISIL:
	001 Move X8, [X0]
	002 Move W9, 1
	003 Move [X0+424], X1
	004 Move [X0+880], W9
	005 Move X2, [X8+760]
	006 Move X1, [X8+768]
	007 CallNoReturn X2

Method: TMPro.TMP_SpriteAsset get_spriteAsset()

Disassembly:
	0x03AF86C0 LDR X21, [X20 + 0x2F0]
	0x03AF86C4 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move X0, [X0+432]
	002 Return X0

Method: System.Void set_spriteAsset(TMPro.TMP_SpriteAsset value)

Disassembly:
	0x03AF86C8 CBNZ W8, 0x3AF86D0
	0x03AF86CC BL 0x1C16DFC
	0x03AF86D0 MOV X0, X21
	0x03AF86D4 MOV X1, X31
	0x03AF86D8 MOV X2, X31
	0x03AF86DC BL 0x3C354F8
	0x03AF86E0 TBZ X0, 0x0, 0x3AF86F8
	0x03AF86E4 LDR X0, [X20 + 0x2F0]
	0x03AF86E8 CBZ X0, 0x3AF8730
	0x03AF86EC MOV X1, X19
	0x03AF86F0 BL 0x3AF8654
	0x03AF86F4 TBNZ X0, 0x0, 0x3AF86B4
	0x03AF86F8 MOV X0, X20
	0x03AF86FC MOV X1, X31
	0x03AF8700 BL 0x3C385F8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move W9, 1
	005 Move [X0+432], X1
	006 Move [X0+880], W9
	007 Move X9, [X8+760]
	008 Move X1, [X8+768]
	009 Move X19, X0
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move X8, [X19]
	012 Move X0, X19
	013 Move X2, [X8+744]
	014 Move X1, [X8+752]
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 CallNoReturn X2

Method: System.Boolean get_tintAllSprites()

Disassembly:
	0x03AF8704 CBZ X19, 0x3AF8730
	0x03AF8708 MOV W20, W0

ISIL:
	001 Move W0, [X0+440]
	002 Return X0

Method: System.Void set_tintAllSprites(System.Boolean value)

Disassembly:
	0x03AF870C MOV X0, X19
	0x03AF8710 MOV X1, X31
	0x03AF8714 BL 0x3C385F8
	0x03AF8718 CMP W20, W0
	0x03AF871C CSET W0, EQ
	0x03AF8720 LDP X20, X19, [X31 + 0x20]
	0x03AF8724 LDP X22, X21, [X31 + 0x10]
	0x03AF8728 LDR X30, [X31], #0x30
	0x03AF872C RET
	0x03AF8730 BL 0x1C16F20
	0x03AF8734 LDRB W0, [X0 + 0x2F8]
	0x03AF8738 RET

ISIL:
	001 Move W9, [X0+440]
	002 And W8, W1, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Return 
	005 Move X9, [X0]
	006 Move [X0+440], W8
	007 Move W8, 1
	008 Move [X0+880], W8
	009 Move X2, [X9+760]
	010 Move X1, [X9+768]
	011 CallNoReturn X2

Method: TMPro.TMP_StyleSheet get_styleSheet()

Disassembly:
	0x03AF873C LDRB W0, [X0 + 0x2F9]
	0x03AF8740 RET

ISIL:
	001 Move X0, [X0+448]
	002 Return X0

Method: System.Void set_styleSheet(TMPro.TMP_StyleSheet value)

Disassembly:
	0x03AF8744 STP X30, X19, [X31 - 0x10]!
	0x03AF8748 LDRB W9, [X0 + 0x2F9]
	0x03AF874C AND W8, W1, 0x1
	0x03AF8750 CMP W9, W8
	0x03AF8754 B.NE 0x3AF8760
	0x03AF8758 LDP X30, X19, [X31], #0x10
	0x03AF875C RET
	0x03AF8760 LDR X9, [X0]
	0x03AF8764 MOVZ W10, 0x1
	0x03AF8768 STRB W8, [X0 + 0x2F9]
	0x03AF876C STRB W10, [X0 + 0x370]
	0x03AF8770 LDR X8, [X9 + 0x2F8]
	0x03AF8774 LDR X1, [X9 + 0x300]
	0x03AF8778 MOV X19, X0
	0x03AF877C BLR X8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move W9, 1
	005 Move [X0+448], X1
	006 Move [X0+880], W9
	007 Move X9, [X8+760]
	008 Move X1, [X8+768]
	009 Move X19, X0
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move X8, [X19]
	012 Move X0, X19
	013 Move X2, [X8+744]
	014 Move X1, [X8+752]
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 CallNoReturn X2

Method: TMPro.TMP_Style get_textStyle()

Disassembly:
	0x03AF8780 LDR X8, [X19]
	0x03AF8784 MOV X0, X19
	0x03AF8788 LDR X2, [X8 + 0x2E8]
	0x03AF878C LDR X1, [X8 + 0x2F0]
	0x03AF8790 LDP X30, X19, [X31], #0x10
	0x03AF8794 BR X2
	0x03AF8798 LDRB W0, [X0 + 0x300]
	0x03AF879C RET
	0x03AF87A0 STP X30, X19, [X31 - 0x10]!
	0x03AF87A4 LDRB W9, [X0 + 0x300]
	0x03AF87A8 AND W8, W1, 0x1
	0x03AF87AC CMP W9, W8
	0x03AF87B0 B.NE 0x3AF87BC
	0x03AF87B4 LDP X30, X19, [X31], #0x10

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, [X0+464]
	004 Move X19, X0
	005 Call TMP_Text.GetStyle, X0, X1
	006 Move [X19+456], X0
	007 Compare X0, 0
	008 JumpIfNotEqual {15}
	009 Call TMP_Style.get_NormalStyle
	010 Move [X19+456], X0
	011 Compare X0, 0
	012 JumpIfEqual {18}
	013 Move W8, [X0+24]
	014 Move [X19+464], W8
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return X0
	018 Call 0x1C17F20

Method: System.Void set_textStyle(TMPro.TMP_Style value)

Disassembly:
	0x03AF88A8 BR X2
	0x03AF88AC LDRB W0, [X0 + 0x304]
	0x03AF88B0 RET
	0x03AF88B4 STP X30, X19, [X31 - 0x10]!
	0x03AF88B8 LDRB W9, [X0 + 0x304]
	0x03AF88BC AND W8, W1, 0x1
	0x03AF88C0 CMP W9, W8
	0x03AF88C4 B.NE 0x3AF88D0
	0x03AF88C8 LDP X30, X19, [X31], #0x10
	0x03AF88CC RET
	0x03AF88D0 LDR X9, [X0]
	0x03AF88D4 STRB W8, [X0 + 0x304]
	0x03AF88D8 MOV X19, X0
	0x03AF88DC LDR X8, [X9 + 0x778]
	0x03AF88E0 LDR X1, [X9 + 0x780]
	0x03AF88E4 BLR X8
	0x03AF88E8 LDR X8, [X19]
	0x03AF88EC MOVZ W9, 0x1
	0x03AF88F0 STRB W9, [X19 + 0x370]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move [X0+456], X1
	004 Compare X1, 0
	005 JumpIfEqual {22}
	006 Move W8, [X1+24]
	007 Move X9, [X0]
	008 Move W10, 1
	009 Move [X0+880], W10
	010 Move [X0+464], W8
	011 Move X8, [X9+760]
	012 Move X1, [X9+768]
	013 Move X19, X0
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X8, [X19]
	016 Move X0, X19
	017 Move X2, [X8+744]
	018 Move X1, [X8+752]
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 CallNoReturn X2
	022 Call 0x1C17F20

Method: System.Boolean get_overrideColorTags()

Disassembly:
	0x03AF88F4 MOV X0, X19
	0x03AF88F8 LDR X2, [X8 + 0x2F8]

ISIL:
	001 Move W0, [X0+468]
	002 Return X0

Method: System.Void set_overrideColorTags(System.Boolean value)

Disassembly:
	0x03AF88FC LDR X1, [X8 + 0x300]
	0x03AF8900 LDP X30, X19, [X31], #0x10
	0x03AF8904 BR X2
	0x03AF8908 LDRB W0, [X0 + 0x305]
	0x03AF890C RET
	0x03AF8910 LDRB W9, [X0 + 0x305]
	0x03AF8914 AND W8, W1, 0x1
	0x03AF8918 CMP W9, W8
	0x03AF891C B.NE 0x3AF8924
	0x03AF8920 RET
	0x03AF8924 LDR X9, [X0]
	0x03AF8928 MOVZ W10, 0x1

ISIL:
	001 Move W9, [X0+468]
	002 And W8, W1, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Return 
	005 Move X9, [X0]
	006 Move W10, 1
	007 Move [X0+468], W8
	008 Move [X0+880], W10
	009 Move X2, [X9+760]
	010 Move X1, [X9+768]
	011 CallNoReturn X2

Method: UnityEngine.Color32 get_faceColor()

Disassembly:
	0x03AF892C STRB W8, [X0 + 0x305]
	0x03AF8930 STRB W10, [X0 + 0x370]
	0x03AF8934 LDR X2, [X9 + 0x2F8]
	0x03AF8938 LDR X1, [X9 + 0x300]
	0x03AF893C BR X2
	0x03AF8940 LDRB W0, [X0 + 0x306]
	0x03AF8944 RET
	0x03AF8948 STP X30, X19, [X31 - 0x10]!
	0x03AF894C LDRB W9, [X0 + 0x306]
	0x03AF8950 AND W8, W1, 0x1
	0x03AF8954 CMP W9, W8
	0x03AF8958 B.EQ 0x3AF897C
	0x03AF895C LDR X9, [X0]
	0x03AF8960 STRB W8, [X0 + 0x306]
	0x03AF8964 MOV X19, X0
	0x03AF8968 LDR X8, [X9 + 0x788]
	0x03AF896C LDR X1, [X9 + 0x790]
	0x03AF8970 BLR X8
	0x03AF8974 MOVZ W8, 0x1
	0x03AF8978 STRB W8, [X19 + 0x370]
	0x03AF897C LDP X30, X19, [X31], #0x10
	0x03AF8980 RET
	0x03AF8984 LDRB W0, [X0 + 0x309]
	0x03AF8988 RET
	0x03AF898C LDRB W9, [X0 + 0x309]
	0x03AF8990 AND W8, W1, 0x1
	0x03AF8994 CMP W9, W8
	0x03AF8998 B.EQ 0x3AF89A8
	0x03AF899C MOVZ W9, 0x1
	0x03AF89A0 STRB W9, [X0 + 0x370]
	0x03AF89A4 STRB W8, [X0 + 0x309]
	0x03AF89A8 RET
	0x03AF89AC LDR W0, [X0 + 0x30C]
	0x03AF89B0 RET
	0x03AF89B4 LDR W8, [X0 + 0x30C]
	0x03AF89B8 CMP W8, W1
	0x03AF89BC B.NE 0x3AF89C4
	0x03AF89C0 RET
	0x03AF89C4 LDR X8, [X0]
	0x03AF89C8 MOVZ W9, 0x1
	0x03AF89CC STR W1, [X0 + 0x30C]
	0x03AF89D0 STRB W9, [X0 + 0x370]
	0x03AF89D4 LDR X2, [X8 + 0x2F8]
	0x03AF89D8 LDR X1, [X8 + 0x300]
	0x03AF89DC BR X2
	0x03AF89E0 LDR W0, [X0 + 0x310]
	0x03AF89E4 RET
	0x03AF89E8 LDR W8, [X0 + 0x310]
	0x03AF89EC CMP W8, W1
	0x03AF89F0 B.NE 0x3AF89F8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8EB000
	006 Move X20, 0x5FC000
	007 Move W8, [X21+1581]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5FC000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move X0, 0x661000
	018 Move X0, [X0+824]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1581], W8
	022 Move X0, [X20]
	023 Move X20, [X19+272]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {37}
	036 Move W0, [X19+472]
	037 Move X21, 0x661000
	038 Move X21, [X21+824]
	039 Move X20, [X19+272]
	040 Move X0, [X21]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Compare X20, 0
	046 JumpIfEqual {62}
	047 Move X8, [X21]
	048 Move X0, X20
	049 Move X2, X31
	050 Move X8, [X8+184]
	051 Move W1, [X8+8]
	052 Call Material.GetColor, X0, X1
	053 Move X0, X31
	054 Call 0x1E44664
	055 Move [X19+472], W0
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move W0, W0
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Return X0
	062 Call 0x1C17F20

Method: System.Void set_faceColor(UnityEngine.Color32 value)

Disassembly:
	0x03AF89F4 RET
	0x03AF89F8 LDR X8, [X0]
	0x03AF89FC MOVZ W9, 0x1
	0x03AF8A00 STR W1, [X0 + 0x310]
	0x03AF8A04 STRB W9, [X0 + 0x370]
	0x03AF8A08 LDR X2, [X8 + 0x2F8]
	0x03AF8A0C LDR X1, [X8 + 0x300]
	0x03AF8A10 BR X2
	0x03AF8A14 LDR V0, [X0 + 0x314]
	0x03AF8A18 RET
	0x03AF8A1C LDR V1, [X0 + 0x314]
	0x03AF8A20 FCMP S1, S0
	0x03AF8A24 B.NE 0x3AF8A2C
	0x03AF8A28 RET
	0x03AF8A2C LDR X8, [X0]
	0x03AF8A30 MOVZ W9, 0x1
	0x03AF8A34 STR S0, [X0 + 0x314]
	0x03AF8A38 STRB W9, [X0 + 0x370]
	0x03AF8A3C LDR X2, [X8 + 0x2F8]
	0x03AF8A40 LDR X1, [X8 + 0x300]
	0x03AF8A44 BR X2
	0x03AF8A48 LDR W0, [X0 + 0x318]
	0x03AF8A4C RET
	0x03AF8A50 LDR W8, [X0 + 0x318]
	0x03AF8A54 CMP W8, W1
	0x03AF8A58 B.EQ 0x3AF8A68
	0x03AF8A5C MOVZ W8, 0x1
	0x03AF8A60 STR W1, [X0 + 0x318]
	0x03AF8A64 STRB W8, [X0 + 0x370]
	0x03AF8A68 RET
	0x03AF8A6C LDR W0, [X0 + 0x31C]
	0x03AF8A70 RET
	0x03AF8A74 LDR X8, [X0]
	0x03AF8A78 MOVZ W9, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move W0, [X0+472]
	007 And X21, X1, 0
	008 Move X20, X1
	009 Move X1, X21
	010 Move X2, X31
	011 Call TMPro_ExtensionMethods.Compare, X0, X1
	012 Move TEMP, X0
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfNotEqual {21}
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X30, [X31+32]
	019 Move X21, [X31+40]
	020 Return 
	021 Move X8, [X19]
	022 Move X0, X19
	023 Move X1, X21
	024 Move X9, [X8+1864]
	025 Move X2, [X8+1872]
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X8, [X19]
	028 Move W9, 1
	029 Move [X19+472], W20
	030 Move [X19+880], W9
	031 Move X9, [X8+760]
	032 Move X1, [X8+768]
	033 Move X0, X19
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move X8, [X19]
	036 Move X0, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X2, [X8+776]
	040 Move X1, [X8+784]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 CallNoReturn X2

Method: UnityEngine.Color32 get_outlineColor()

Disassembly:
	0x03AF8A7C STR W1, [X0 + 0x31C]
	0x03AF8A80 STRB W9, [X0 + 0x370]
	0x03AF8A84 LDR X2, [X8 + 0x2F8]
	0x03AF8A88 LDR X1, [X8 + 0x300]
	0x03AF8A8C BR X2
	0x03AF8A90 LDRB W0, [X0 + 0x320]
	0x03AF8A94 RET
	0x03AF8A98 STP X30, X23, [X31 - 0x30]!
	0x03AF8A9C STP X22, X21, [X31 + 0x10]
	0x03AF8AA0 STP X20, X19, [X31 + 0x20]
	0x03AF8AA4 ADRP X23, 0x8EA000
	0x03AF8AA8 ADRP X21, 0x660000
	0x03AF8AAC LDRB W8, [X23 + 0x632]
	0x03AF8AB0 LDR X21, [X21 + 0x568]
	0x03AF8AB4 MOV W20, W1
	0x03AF8AB8 MOV X19, X0
	0x03AF8ABC AND W22, W1, 0x1
	0x03AF8AC0 TBNZ X8, 0x0, 0x3AF8AD8
	0x03AF8AC4 ADRP X0, 0x660000
	0x03AF8AC8 LDR X0, [X0 + 0x568]
	0x03AF8ACC BL 0x1C16CF4
	0x03AF8AD0 MOVZ W8, 0x1
	0x03AF8AD4 STRB W8, [X23 + 0x632]
	0x03AF8AD8 STRB W22, [X19 + 0x320]
	0x03AF8ADC LDR X0, [X21]
	0x03AF8AE0 LDR W8, [X0 + 0xE0]
	0x03AF8AE4 CBNZ W8, 0x3AF8AEC
	0x03AF8AE8 BL 0x1C16DFC
	0x03AF8AEC MOV X0, X19
	0x03AF8AF0 MOV X1, X31
	0x03AF8AF4 TBZ X20, 0x0, 0x3AF8B08
	0x03AF8AF8 LDP X20, X19, [X31 + 0x20]
	0x03AF8AFC LDP X22, X21, [X31 + 0x10]
	0x03AF8B00 LDP X30, X23, [X31], #0x30
	0x03AF8B04 B 0x3B20A78
	0x03AF8B08 LDP X20, X19, [X31 + 0x20]
	0x03AF8B0C LDP X22, X21, [X31 + 0x10]
	0x03AF8B10 LDP X30, X23, [X31], #0x30
	0x03AF8B14 B 0x3B20260
	0x03AF8B18 LDRB W0, [X0 + 0x321]
	0x03AF8B1C RET
	0x03AF8B20 LDR X9, [X0]
	0x03AF8B24 AND W8, W1, 0x1
	0x03AF8B28 MOVZ W10, 0x1
	0x03AF8B2C STRB W8, [X0 + 0x321]
	0x03AF8B30 STRB W10, [X0 + 0x370]
	0x03AF8B34 LDR X2, [X9 + 0x2F8]
	0x03AF8B38 LDR X1, [X9 + 0x300]
	0x03AF8B3C BR X2
	0x03AF8B40 LDR W0, [X0 + 0x324]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8EB000
	006 Move X20, 0x5FC000
	007 Move W8, [X21+1582]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5FC000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move X0, 0x661000
	018 Move X0, [X0+824]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1582], W8
	022 Move X0, [X20]
	023 Move X20, [X19+272]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {37}
	036 Move W0, [X19+476]
	037 Move X21, 0x661000
	038 Move X21, [X21+824]
	039 Move X20, [X19+272]
	040 Move X0, [X21]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Compare X20, 0
	046 JumpIfEqual {62}
	047 Move X8, [X21]
	048 Move X0, X20
	049 Move X2, X31
	050 Move X8, [X8+184]
	051 Move W1, [X8+68]
	052 Call Material.GetColor, X0, X1
	053 Move X0, X31
	054 Call 0x1E44664
	055 Move [X19+476], W0
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move W0, W0
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Return X0
	062 Call 0x1C17F20

Method: System.Void set_outlineColor(UnityEngine.Color32 value)

Disassembly:
	0x03AF8B44 RET
	0x03AF8B48 LDR W8, [X0 + 0x324]
	0x03AF8B4C CMP W8, W1
	0x03AF8B50 B.NE 0x3AF8B58
	0x03AF8B54 RET
	0x03AF8B58 LDR X8, [X0]
	0x03AF8B5C MOVZ W9, 0x1
	0x03AF8B60 STR W1, [X0 + 0x324]
	0x03AF8B64 STRB W9, [X0 + 0x370]
	0x03AF8B68 LDR X2, [X8 + 0x2F8]
	0x03AF8B6C LDR X1, [X8 + 0x300]
	0x03AF8B70 BR X2
	0x03AF8B74 LDR W0, [X0 + 0x328]
	0x03AF8B78 RET
	0x03AF8B7C LDR W8, [X0 + 0x328]
	0x03AF8B80 CMP W8, W1
	0x03AF8B84 B.NE 0x3AF8B8C
	0x03AF8B88 RET
	0x03AF8B8C LDR X8, [X0]
	0x03AF8B90 MOVZ W9, 0x1
	0x03AF8B94 STR W1, [X0 + 0x328]
	0x03AF8B98 STRB W9, [X0 + 0x370]
	0x03AF8B9C LDR X2, [X8 + 0x2F8]
	0x03AF8BA0 LDR X1, [X8 + 0x300]
	0x03AF8BA4 BR X2
	0x03AF8BA8 LDR W0, [X0 + 0x32C]
	0x03AF8BAC RET
	0x03AF8BB0 LDR W8, [X0 + 0x32C]
	0x03AF8BB4 CMP W8, W1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move W0, [X0+476]
	007 And X21, X1, 0
	008 Move X20, X1
	009 Move X1, X21
	010 Move X2, X31
	011 Call TMPro_ExtensionMethods.Compare, X0, X1
	012 Move TEMP, X0
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfNotEqual {21}
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X30, [X31+32]
	019 Move X21, [X31+40]
	020 Return 
	021 Move X8, [X19]
	022 Move X0, X19
	023 Move X1, X21
	024 Move X9, [X8+1880]
	025 Move X2, [X8+1888]
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X8, [X19]
	028 Move W9, 1
	029 Move [X19+476], W20
	030 Move [X19+880], W9
	031 Move X2, [X8+760]
	032 Move X1, [X8+768]
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 CallNoReturn X2

Method: System.Single get_outlineWidth()

Disassembly:
	0x03AF8BB8 B.NE 0x3AF8BC0
	0x03AF8BBC RET
	0x03AF8BC0 LDR X8, [X0]
	0x03AF8BC4 MOVZ W9, 0x1
	0x03AF8BC8 STR W1, [X0 + 0x32C]
	0x03AF8BCC STRB W9, [X0 + 0x370]
	0x03AF8BD0 LDR X2, [X8 + 0x2F8]
	0x03AF8BD4 LDR X1, [X8 + 0x300]
	0x03AF8BD8 BR X2
	0x03AF8BDC LDR W0, [X0 + 0x330]
	0x03AF8BE0 RET
	0x03AF8BE4 LDR W8, [X0 + 0x330]
	0x03AF8BE8 CMP W8, W1
	0x03AF8BEC B.NE 0x3AF8BF4
	0x03AF8BF0 RET
	0x03AF8BF4 LDR X8, [X0]
	0x03AF8BF8 MOVZ W9, 0x1
	0x03AF8BFC STR W1, [X0 + 0x330]
	0x03AF8C00 STRB W9, [X0 + 0x370]
	0x03AF8C04 LDR X2, [X8 + 0x2F8]
	0x03AF8C08 LDR X1, [X8 + 0x300]
	0x03AF8C0C BR X2
	0x03AF8C10 LDRB W0, [X0 + 0x334]
	0x03AF8C14 RET
	0x03AF8C18 LDRB W9, [X0 + 0x334]
	0x03AF8C1C AND W8, W1, 0x1
	0x03AF8C20 CMP W9, W8
	0x03AF8C24 B.NE 0x3AF8C2C
	0x03AF8C28 RET
	0x03AF8C2C LDR X9, [X0]
	0x03AF8C30 MOVZ W10, 0x1
	0x03AF8C34 STRB W8, [X0 + 0x334]
	0x03AF8C38 STRB W10, [X0 + 0x370]
	0x03AF8C3C LDR X2, [X9 + 0x2F8]
	0x03AF8C40 LDR X1, [X9 + 0x300]
	0x03AF8C44 BR X2
	0x03AF8C48 LDR W0, [X0 + 0x338]
	0x03AF8C4C RET
	0x03AF8C50 LDR W8, [X0 + 0x338]
	0x03AF8C54 CMP W8, W1
	0x03AF8C58 B.NE 0x3AF8C60
	0x03AF8C5C RET
	0x03AF8C60 LDR X8, [X0]
	0x03AF8C64 MOVZ W9, 0x1
	0x03AF8C68 STR W1, [X0 + 0x338]
	0x03AF8C6C STRB W9, [X0 + 0x370]
	0x03AF8C70 LDR X2, [X8 + 0x2F8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8EB000
	006 Move X20, 0x5FC000
	007 Move W8, [X21+1583]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5FC000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move X0, 0x661000
	018 Move X0, [X0+824]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1583], W8
	022 Move X0, [X20]
	023 Move X20, [X19+272]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {37}
	036 Move V0, [X19+480]
	037 Move X21, 0x661000
	038 Move X21, [X21+824]
	039 Move X20, [X19+272]
	040 Move X0, [X21]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Compare X20, 0
	046 JumpIfEqual {59}
	047 Move X8, [X21]
	048 Move X0, X20
	049 Move X2, X31
	050 Move X8, [X8+184]
	051 Move W1, [X8+60]
	052 Call Material.GetFloat, X0, X1
	053 Move [X19+480], S0
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Return V0
	059 Call 0x1C17F20

Method: System.Void set_outlineWidth(System.Single value)

Disassembly:
	0x03AF8C74 LDR X1, [X8 + 0x300]
	0x03AF8C78 BR X2
	0x03AF8C7C LDR V0, [X0 + 0x340]
	0x03AF8C80 LDR V1, [X0 + 0x344]
	0x03AF8C84 LDR V2, [X0 + 0x348]
	0x03AF8C88 LDR V3, [X0 + 0x34C]
	0x03AF8C8C RET
	0x03AF8C90 STP X30, X19, [X31 - 0x10]!
	0x03AF8C94 LDR V4, [X0 + 0x340]
	0x03AF8C98 LDR V5, [X0 + 0x344]
	0x03AF8C9C LDR V6, [X0 + 0x348]
	0x03AF8CA0 LDR V7, [X0 + 0x34C]
	0x03AF8CA4 FSUB S4, S4, S0
	0x03AF8CA8 FSUB S5, S5, S1
	0x03AF8CAC ADRP X8, 0xFFFFFFFFFCFF1000
	0x03AF8CB0 FMUL S4, S4, S4
	0x03AF8CB4 FMUL S5, S5, S5
	0x03AF8CB8 FADD S4, S4, S5
	0x03AF8CBC LDR V5, [X8 + 0xF20]
	0x03AF8CC0 FSUB S6, S6, S2
	0x03AF8CC4 FSUB S7, S7, S3
	0x03AF8CC8 FMUL S6, S6, S6
	0x03AF8CCC FADD S4, S6, S4
	0x03AF8CD0 FMUL S6, S7, S7

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move V1, [X0+480]
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Move V8, [X31+32]
	009 Return 
	010 Move X8, [X0]
	011 Move X19, X0
	012 Move V8, V0
	013 Move X9, [X8+1896]
	014 Move X1, [X8+1904]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X8, [X19]
	017 Move W9, 1
	018 Move [X19+480], S8
	019 Move [X19+880], W9
	020 Move X2, [X8+760]
	021 Move X1, [X8+768]
	022 Move X0, X19
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Move V8, [X31+32]
	026 CallNoReturn X2

Method: System.Single get_fontSize()

Disassembly:
	0x03AF8CD4 FADD S4, S6, S4
	0x03AF8CD8 FCMP S4, S5

ISIL:
	001 Move V0, [X0+484]
	002 Return V0

Method: System.Void set_fontSize(System.Single value)

Disassembly:
	0x03AF8CDC B.PL 0x3AF8CE8
	0x03AF8CE0 LDP X30, X19, [X31], #0x10
	0x03AF8CE4 RET
	0x03AF8CE8 LDR X8, [X0]
	0x03AF8CEC STR S0, [X0 + 0x340]
	0x03AF8CF0 STR S1, [X0 + 0x344]
	0x03AF8CF4 STR S2, [X0 + 0x348]
	0x03AF8CF8 STR S3, [X0 + 0x34C]
	0x03AF8CFC LDR X9, [X8 + 0x8A8]
	0x03AF8D00 LDR X1, [X8 + 0x8B0]
	0x03AF8D04 MOV X19, X0
	0x03AF8D08 BLR X9
	0x03AF8D0C LDR X8, [X19]
	0x03AF8D10 MOVZ W9, 0x1
	0x03AF8D14 STRB W9, [X19 + 0x370]
	0x03AF8D18 MOV X0, X19
	0x03AF8D1C LDR X2, [X8 + 0x2F8]
	0x03AF8D20 LDR X1, [X8 + 0x300]
	0x03AF8D24 LDP X30, X19, [X31], #0x10
	0x03AF8D28 BR X2
	0x03AF8D2C LDR X0, [X0 + 0x368]
	0x03AF8D30 RET
	0x03AF8D34 LDRB W0, [X0 + 0x370]
	0x03AF8D38 RET

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move V1, [X0+484]
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move W8, [X0+568]
	009 Move X19, X0
	010 Move W9, 1
	011 Move [X0+880], W9
	012 Move [X0+484], S0
	013 Compare W8, 0
	014 JumpIfNotEqual {16}
	015 Move [X19+492], S0
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X9, [X8+760]
	019 Move X1, [X8+768]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X8, [X19]
	022 Move X0, X19
	023 Move X2, [X8+744]
	024 Move X1, [X8+752]
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 CallNoReturn X2

Method: TMPro.FontWeight get_fontWeight()

Disassembly:
	0x03AF8D3C LDRB W9, [X0 + 0x370]
	0x03AF8D40 AND W8, W1, 0x1

ISIL:
	001 Move W0, [X0+528]
	002 Return X0

Method: System.Void set_fontWeight(TMPro.FontWeight value)

Disassembly:
	0x03AF8D44 CMP W9, W8
	0x03AF8D48 B.NE 0x3AF8D50
	0x03AF8D4C RET
	0x03AF8D50 LDR X9, [X0]
	0x03AF8D54 STRB W8, [X0 + 0x370]
	0x03AF8D58 LDR X2, [X9 + 0x2D8]
	0x03AF8D5C LDR X1, [X9 + 0x2E0]
	0x03AF8D60 BR X2
	0x03AF8D64 LDRB W0, [X0 + 0x371]
	0x03AF8D68 RET
	0x03AF8D6C AND W8, W1, 0x1
	0x03AF8D70 STRB W8, [X0 + 0x371]
	0x03AF8D74 RET
	0x03AF8D78 STP X30, X21, [X31 - 0x20]!
	0x03AF8D7C STP X20, X19, [X31 + 0x10]
	0x03AF8D80 ADRP X21, 0x8EA000
	0x03AF8D84 ADRP X20, 0x5FB000
	0x03AF8D88 LDRB W8, [X21 + 0x633]
	0x03AF8D8C LDR X20, [X20 + 0x598]
	0x03AF8D90 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+528]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move X8, [X0]
	009 Move W9, 1
	010 Move [X0+528], W1
	011 Move [X0+880], W9
	012 Move X9, [X8+760]
	013 Move X1, [X8+768]
	014 Move X19, X0
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X2, [X8+744]
	019 Move X1, [X8+752]
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 CallNoReturn X2

Method: System.Single get_pixelsPerUnit()

Disassembly:
	0x03AF8D94 TBNZ X8, 0x0, 0x3AF8DB8
	0x03AF8D98 ADRP X0, 0x660000
	0x03AF8D9C LDR X0, [X0 + 0x570]
	0x03AF8DA0 BL 0x1C16CF4
	0x03AF8DA4 ADRP X0, 0x5FB000
	0x03AF8DA8 LDR X0, [X0 + 0x598]
	0x03AF8DAC BL 0x1C16CF4
	0x03AF8DB0 MOVZ W8, 0x1
	0x03AF8DB4 STRB W8, [X21 + 0x633]
	0x03AF8DB8 LDR X0, [X20]
	0x03AF8DBC LDR X20, [X19 + 0x378]
	0x03AF8DC0 LDR W8, [X0 + 0xE0]
	0x03AF8DC4 CBNZ W8, 0x3AF8DCC
	0x03AF8DC8 BL 0x1C16DFC
	0x03AF8DCC MOV X0, X20
	0x03AF8DD0 MOV X1, X31
	0x03AF8DD4 MOV X2, X31
	0x03AF8DD8 BL 0x3C3883C
	0x03AF8DDC TBZ X0, 0x0, 0x3AF8DFC
	0x03AF8DE0 ADRP X8, 0x660000
	0x03AF8DE4 LDR X8, [X8 + 0x570]
	0x03AF8DE8 MOV X0, X19
	0x03AF8DEC LDR X1, [X8]
	0x03AF8DF0 BL 0x21A3894
	0x03AF8DF4 STR X0, [X19 + 0x378]
	0x03AF8DF8 B 0x3AF8E00
	0x03AF8DFC LDR X0, [X19 + 0x378]
	0x03AF8E00 LDP X20, X19, [X31 + 0x10]
	0x03AF8E04 LDP X30, X21, [X31], #0x20
	0x03AF8E08 RET
	0x03AF8E0C STP X30, X21, [X31 - 0x20]!
	0x03AF8E10 STP X20, X19, [X31 + 0x10]
	0x03AF8E14 ADRP X21, 0x8EA000
	0x03AF8E18 ADRP X20, 0x5FB000
	0x03AF8E1C LDRB W8, [X21 + 0x634]
	0x03AF8E20 LDR X20, [X20 + 0x598]
	0x03AF8E24 MOV X19, X0
	0x03AF8E28 TBNZ X8, 0x0, 0x3AF8E4C
	0x03AF8E2C ADRP X0, 0x5FD000
	0x03AF8E30 LDR X0, [X0 + 0x6B8]
	0x03AF8E34 BL 0x1C16CF4
	0x03AF8E38 ADRP X0, 0x5FB000
	0x03AF8E3C LDR X0, [X0 + 0x598]
	0x03AF8E40 BL 0x1C16CF4
	0x03AF8E44 MOVZ W8, 0x1
	0x03AF8E48 STRB W8, [X21 + 0x634]
	0x03AF8E4C LDR X0, [X20]
	0x03AF8E50 LDR X20, [X19 + 0x380]
	0x03AF8E54 LDR W8, [X0 + 0xE0]
	0x03AF8E58 CBNZ W8, 0x3AF8E60
	0x03AF8E5C BL 0x1C16DFC
	0x03AF8E60 MOV X0, X20
	0x03AF8E64 MOV X1, X31
	0x03AF8E68 MOV X2, X31
	0x03AF8E6C BL 0x3C3883C
	0x03AF8E70 TBZ X0, 0x0, 0x3AF8E90
	0x03AF8E74 ADRP X8, 0x5FD000
	0x03AF8E78 LDR X8, [X8 + 0x6B8]
	0x03AF8E7C MOV X0, X19
	0x03AF8E80 LDR X1, [X8]
	0x03AF8E84 BL 0x21A3894
	0x03AF8E88 STR X0, [X19 + 0x380]
	0x03AF8E8C B 0x3AF8E94
	0x03AF8E90 LDR X0, [X19 + 0x380]
	0x03AF8E94 LDP X20, X19, [X31 + 0x10]
	0x03AF8E98 LDP X30, X21, [X31], #0x20
	0x03AF8E9C RET
	0x03AF8EA0 LDRB W0, [X0 + 0x398]
	0x03AF8EA4 RET
	0x03AF8EA8 AND W8, W1, 0x1
	0x03AF8EAC STRB W8, [X0 + 0x398]
	0x03AF8EB0 RET
	0x03AF8EB4 LDR X0, [X0 + 0x3A0]
	0x03AF8EB8 RET
	0x03AF8EBC LDRB W0, [X0 + 0x3A8]
	0x03AF8EC0 RET
	0x03AF8EC4 STP X30, X19, [X31 - 0x10]!
	0x03AF8EC8 LDRB W9, [X0 + 0x3A8]
	0x03AF8ECC AND W8, W1, 0x1
	0x03AF8ED0 CMP W9, W8
	0x03AF8ED4 B.NE 0x3AF8EE0
	0x03AF8ED8 LDP X30, X19, [X31], #0x10
	0x03AF8EDC RET
	0x03AF8EE0 MOV X19, X0
	0x03AF8EE4 LDR X0, [X0 + 0x368]
	0x03AF8EE8 STRB W8, [X19 + 0x370]
	0x03AF8EEC CBZ X0, 0x3AF8F28
	0x03AF8EF0 AND W1, W1, 0x1
	0x03AF8EF4 MOV X2, X31
	0x03AF8EF8 BL 0x3B1C4B4
	0x03AF8EFC LDR X8, [X19]
	0x03AF8F00 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+96], D9
	003 Move [X31+104], D8
	004 Move [X31+112], X30
	005 Move [X31+128], X22
	006 Move [X31+136], X21
	007 Move [X31+144], X20
	008 Move [X31+152], X19
	009 Move X20, 0x8EB000
	010 Move X22, 0x5FC000
	011 Move W8, [X20+1584]
	012 Move X22, [X22+1432]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x5FC000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1584], W8
	023 NotImplemented "Instruction MOVI not yet implemented."
	024 Move X0, X19
	025 Move X1, X31
	026 Move [X31+64], V0
	027 Move [X31+72], V0
	028 Move [X31+32], V0
	029 Move [X31+40], V0
	030 Move [X31], V0
	031 Move [X31+8], V0
	032 Call Graphic.get_canvas, X0
	033 Move X8, [X22]
	034 Move X20, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X31
	042 Call Object.op_Implicit, X0
	043 Move S8, 1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {106}
	048 Move X0, [X22]
	049 Move X21, [X19+248]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X21
	055 Move X1, X31
	056 Call Object.op_Implicit, X0
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {100}
	061 Move X0, [X22]
	062 Move X20, [X19+256]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X0, X20
	068 Move X1, X31
	069 Move X2, X31
	070 Call Object.op_Equality, X0, X1
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {106}
	075 Move X8, [X19+256]
	076 Compare X8, 0
	077 JumpIfEqual {116}
	078 Add X1, X8, 80
	079 Add X0, X31, 0
	080 Move W2, 96
	081 Call 0x3EB2B30
	082 Add X0, X31, 0
	083 Move X1, X31
	084 Call FaceInfo.get_pointSize, X0
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move V9, [X19+484]
	087 NotImplemented "Instruction FCMP not yet implemented."
	088 Move X8, [X19+256]
	089 Compare X8, 0
	090 JumpIfEqual {116}
	091 Add X1, X8, 80
	092 Add X0, X31, 0
	093 Move W2, 96
	094 Call 0x3EB2B30
	095 Add X0, X31, 0
	096 Move X1, X31
	097 Call FaceInfo.get_pointSize, X0
	098 NotImplemented "Instruction SCVTF not yet implemented."
	099 NotImplemented "Instruction FDIV not yet implemented."
	100 Compare X20, 0
	101 JumpIfEqual {116}
	102 Move X0, X20
	103 Move X1, X31
	104 Call Canvas.get_scaleFactor, X0
	105 Move V8, V0
	106 Move V0, V8
	107 Move X20, [X31+144]
	108 Move X19, [X31+152]
	109 Move X22, [X31+128]
	110 Move X21, [X31+136]
	111 Move X30, [X31+112]
	112 Move D9, [X31+96]
	113 Move D8, [X31+104]
	114 Add X31, X31, 160
	115 Return V0
	116 Call 0x1C17F20

Method: System.Boolean get_enableAutoSizing()

Disassembly:
	0x03AF8F04 LDR X9, [X8 + 0x2F8]
	0x03AF8F08 LDR X1, [X8 + 0x300]

ISIL:
	001 Move W0, [X0+568]
	002 Return X0

Method: System.Void set_enableAutoSizing(System.Boolean value)

Disassembly:
	0x03AF8F0C BLR X9
	0x03AF8F10 LDR X8, [X19]
	0x03AF8F14 MOV X0, X19
	0x03AF8F18 LDR X2, [X8 + 0x2E8]
	0x03AF8F1C LDR X1, [X8 + 0x2F0]
	0x03AF8F20 LDP X30, X19, [X31], #0x10
	0x03AF8F24 BR X2
	0x03AF8F28 BL 0x1C16F20
	0x03AF8F2C SUB X31, X31, 0x50
	0x03AF8F30 STR X30, [X31 + 0x20]
	0x03AF8F34 STP X22, X21, [X31 + 0x30]
	0x03AF8F38 STP X20, X19, [X31 + 0x40]
	0x03AF8F3C ADRP X22, 0x8EA000
	0x03AF8F40 ADRP X21, 0x5FB000
	0x03AF8F44 MOV X19, X8
	0x03AF8F48 LDRB W8, [X22 + 0x635]
	0x03AF8F4C LDR X21, [X21 + 0x598]
	0x03AF8F50 MOV X20, X0
	0x03AF8F54 TBNZ X8, 0x0, 0x3AF8F6C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W9, [X0+568]
	004 And W8, W1, 1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 
	009 Move X9, [X0]
	010 Move [X0+568], W8
	011 Move X19, X0
	012 Move X8, [X9+760]
	013 Move X1, [X9+768]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X8, [X19]
	016 Move X0, X19
	017 Move X2, [X8+744]
	018 Move X1, [X8+752]
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 CallNoReturn X2

Method: System.Single get_fontSizeMin()

Disassembly:
	0x03AF8F58 ADRP X0, 0x5FB000
	0x03AF8F5C LDR X0, [X0 + 0x598]

ISIL:
	001 Move V0, [X0+592]
	002 Return V0

Method: System.Void set_fontSizeMin(System.Single value)

Disassembly:
	0x03AF8F60 BL 0x1C16CF4
	0x03AF8F64 MOVZ W8, 0x1
	0x03AF8F68 STRB W8, [X22 + 0x635]
	0x03AF8F6C LDR X0, [X21]
	0x03AF8F70 LDR X21, [X20 + 0x3A0]
	0x03AF8F74 LDR W8, [X0 + 0xE0]
	0x03AF8F78 CBNZ W8, 0x3AF8F80
	0x03AF8F7C BL 0x1C16DFC
	0x03AF8F80 MOV X0, X21
	0x03AF8F84 MOV X1, X31
	0x03AF8F88 MOV X2, X31
	0x03AF8F8C BL 0x3C3883C
	0x03AF8F90 TBZ X0, 0x0, 0x3AF8FA0
	0x03AF8F94 STP X31, X31, [X19]
	0x03AF8F98 STR X31, [X19 + 0x10]
	0x03AF8F9C B 0x3AF8FC8
	0x03AF8FA0 LDR X8, [X20]
	0x03AF8FA4 MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move V1, [X0+592]
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move X8, [X0]
	009 Move [X0+592], S0
	010 Move X19, X0
	011 Move X9, [X8+760]
	012 Move X1, [X8+768]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move X8, [X19]
	015 Move X0, X19
	016 Move X2, [X8+744]
	017 Move X1, [X8+752]
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 CallNoReturn X2

Method: System.Single get_fontSizeMax()

Disassembly:
	0x03AF8FA8 LDR X9, [X8 + 0x878]
	0x03AF8FAC LDR X1, [X8 + 0x880]

ISIL:
	001 Move V0, [X0+596]
	002 Return V0

Method: System.Void set_fontSizeMax(System.Single value)

Disassembly:
	0x03AF8FB0 ADD X8, X31, 0x8
	0x03AF8FB4 BLR X9
	0x03AF8FB8 LDR X8, [X31 + 0x18]
	0x03AF8FBC LDUR V0, [X31 + 0x8]
	0x03AF8FC0 STR X8, [X19 + 0x10]
	0x03AF8FC4 STR V0, [X19]
	0x03AF8FC8 LDP X20, X19, [X31 + 0x40]
	0x03AF8FCC LDP X22, X21, [X31 + 0x30]
	0x03AF8FD0 LDR X30, [X31 + 0x20]
	0x03AF8FD4 ADD X31, X31, 0x50
	0x03AF8FD8 RET
	0x03AF8FDC SUB X31, X31, 0x30
	0x03AF8FE0 STP X30, X19, [X31 + 0x20]
	0x03AF8FE4 LDR X9, [X0 + 0x368]
	0x03AF8FE8 MOV X19, X8
	0x03AF8FEC CBZ X9, 0x3AF900C
	0x03AF8FF0 ADD X8, X31, 0x8
	0x03AF8FF4 BL 0x3AF9020

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move V1, [X0+596]
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move X8, [X0]
	009 Move [X0+596], S0
	010 Move X19, X0
	011 Move X9, [X8+760]
	012 Move X1, [X8+768]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move X8, [X19]
	015 Move X0, X19
	016 Move X2, [X8+744]
	017 Move X1, [X8+752]
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 CallNoReturn X2

Method: TMPro.FontStyles get_fontStyle()

Disassembly:
	0x03AF8FF8 LDR X8, [X31 + 0x18]
	0x03AF8FFC LDUR V0, [X31 + 0x8]

ISIL:
	001 Move W0, [X0+600]
	002 Return X0

Method: System.Void set_fontStyle(TMPro.FontStyles value)

Disassembly:
	0x03AF9000 STR X8, [X19 + 0x10]
	0x03AF9004 STR V0, [X19]
	0x03AF9008 B 0x3AF9014
	0x03AF900C STP X31, X31, [X19]
	0x03AF9010 STR X31, [X19 + 0x10]
	0x03AF9014 LDP X30, X19, [X31 + 0x20]
	0x03AF9018 ADD X31, X31, 0x30
	0x03AF901C RET
	0x03AF9020 SUB X31, X31, 0x50
	0x03AF9024 STP D11, D10, [X31 + 0x10]
	0x03AF9028 STP D9, D8, [X31 + 0x20]
	0x03AF902C STP X30, X21, [X31 + 0x30]
	0x03AF9030 STP X20, X19, [X31 + 0x40]
	0x03AF9034 ADRP X21, 0x8E9000
	0x03AF9038 LDRB W9, [X21 + 0x655]
	0x03AF903C MOV X20, X0
	0x03AF9040 MOV X19, X8
	0x03AF9044 TBNZ X9, 0x0, 0x3AF9068
	0x03AF9048 ADRP X0, 0x65F000
	0x03AF904C LDR X0, [X0 + 0x878]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+600]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move X8, [X0]
	009 Move W9, 1
	010 Move [X0+600], W1
	011 Move [X0+880], W9
	012 Move X9, [X8+760]
	013 Move X1, [X8+768]
	014 Move X19, X0
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X2, [X8+744]
	019 Move X1, [X8+752]
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 CallNoReturn X2

Method: System.Boolean get_isUsingBold()

Disassembly:
	0x03AF9050 BL 0x1C16CF4
	0x03AF9054 ADRP X0, 0x65F000

ISIL:
	001 Move W0, [X0+618]
	002 Return X0

Method: TMPro.HorizontalAlignmentOptions get_horizontalAlignment()

Disassembly:
	0x03AF9058 LDR X0, [X0 + 0x3E8]
	0x03AF905C BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+620]
	002 Return X0

Method: System.Void set_horizontalAlignment(TMPro.HorizontalAlignmentOptions value)

Disassembly:
	0x03AF9060 MOVZ W8, 0x1
	0x03AF9064 STRB W8, [X21 + 0x655]
	0x03AF9068 STP X31, X31, [X31]
	0x03AF906C LDR X8, [X20 + 0x368]
	0x03AF9070 CBZ X8, 0x3AF908C
	0x03AF9074 LDR X9, [X8 + 0x38]
	0x03AF9078 CBZ X9, 0x3AF91C4
	0x03AF907C LDR W8, [X8 + 0x18]
	0x03AF9080 LDR W9, [X9 + 0x18]
	0x03AF9084 CMP W8, W9
	0x03AF9088 B.LE 0x3AF9098

ISIL:
	001 Move W8, [X0+620]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 
	004 Move X8, [X0]
	005 Move W9, 1
	006 Move [X0+620], W1
	007 Move [X0+880], W9
	008 Move X2, [X8+760]
	009 Move X1, [X8+768]
	010 CallNoReturn X2

Method: TMPro.VerticalAlignmentOptions get_verticalAlignment()

Disassembly:
	0x03AF908C STP X31, X31, [X19]
	0x03AF9090 STR X31, [X19 + 0x10]

ISIL:
	001 Move W0, [X0+624]
	002 Return X0

Method: System.Void set_verticalAlignment(TMPro.VerticalAlignmentOptions value)

Disassembly:
	0x03AF9094 B 0x3AF91AC
	0x03AF9098 ADRP X21, 0x65F000
	0x03AF909C LDR X21, [X21 + 0x3E8]
	0x03AF90A0 LDR X0, [X21]
	0x03AF90A4 LDR W8, [X0 + 0xE0]
	0x03AF90A8 CBNZ W8, 0x3AF90B4
	0x03AF90AC BL 0x1C16DFC
	0x03AF90B0 LDR X0, [X21]
	0x03AF90B4 ADRP X9, 0x65F000
	0x03AF90B8 LDR X8, [X0 + 0xB8]
	0x03AF90BC LDR X9, [X9 + 0x878]

ISIL:
	001 Move W8, [X0+624]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 
	004 Move X8, [X0]
	005 Move W9, 1
	006 Move [X0+624], W1
	007 Move [X0+880], W9
	008 Move X2, [X8+760]
	009 Move X1, [X8+768]
	010 CallNoReturn X2

Method: TMPro.TextAlignmentOptions get_alignment()

Disassembly:
	0x03AF90C0 LDR V11, [X8 + 0x1598]
	0x03AF90C4 LDR X0, [X9]
	0x03AF90C8 LDR V10, [X8 + 0x159C]
	0x03AF90CC LDR V8, [X8 + 0x15A0]

ISIL:
	001 Move W8, [X0+620]
	002 Move W9, [X0+624]
	003 Or W0, W9, W8
	004 Return X0

Method: System.Void set_alignment(TMPro.TextAlignmentOptions value)

Disassembly:
	0x03AF90D0 LDR V9, [X8 + 0x15A4]
	0x03AF90D4 LDR W9, [X0 + 0xE0]
	0x03AF90D8 CBNZ W9, 0x3AF90E0
	0x03AF90DC BL 0x1C16DFC
	0x03AF90E0 ADD X0, X31, 0x0
	0x03AF90E4 MOV V0.16B, V11.16B
	0x03AF90E8 MOV V1.16B, V10.16B
	0x03AF90EC MOV V2.16B, V8.16B
	0x03AF90F0 MOV V3.16B, V9.16B
	0x03AF90F4 MOV X1, X31
	0x03AF90F8 BL 0x3ADB4B8
	0x03AF90FC LDR X10, [X20 + 0x368]
	0x03AF9100 CBZ X10, 0x3AF91C4
	0x03AF9104 LDRSW X8, [X10 + 0x18]
	0x03AF9108 CMP W8, 0x1
	0x03AF910C B.LT 0x3AF9184
	0x03AF9110 LDR X10, [X10 + 0x38]

ISIL:
	001 Move W8, [X0+620]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 And W8, W1, 0xFF00
	004 Move W9, [X0+624]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Return 
	007 Move [X0+624], W8
	008 Move X8, [X0]
	009 And W9, W1, 255
	010 Move W10, 1
	011 Move [X0+620], W9
	012 Move [X0+880], W10
	013 Move X2, [X8+760]
	014 Move X1, [X8+768]
	015 CallNoReturn X2

Method: System.Single get_characterSpacing()

Disassembly:
	0x03AF9114 MOV X9, X31
	0x03AF9118 ADD X11, X10, 0x140

ISIL:
	001 Move V0, [X0+680]
	002 Return V0

Method: System.Void set_characterSpacing(System.Single value)

Disassembly:
	0x03AF911C CBZ X10, 0x3AF91C4
	0x03AF9120 LDR W12, [X10 + 0x18]
	0x03AF9124 CMP X9, W12, SXTW
	0x03AF9128 B.GE 0x3AF9184
	0x03AF912C CMP X9, X12
	0x03AF9130 B.CS 0x3AF91C8
	0x03AF9134 LDRB W12, [X11 + 0x54]
	0x03AF9138 CBZ W12, 0x3AF9174
	0x03AF913C LDR V0, [X11]
	0x03AF9140 LDP S1, S2, [X31]
	0x03AF9144 FCMP S1, S0
	0x03AF9148 FCSEL S0, S1, S0, MI
	0x03AF914C STR S0, [X31]
	0x03AF9150 LDR V0, [X11 + 0x10]
	0x03AF9154 FCMP S2, S0
	0x03AF9158 FCSEL S0, S2, S0, MI
	0x03AF915C STR S0, [X31 + 0x4]
	0x03AF9160 LDR V0, [X31 + 0x8]
	0x03AF9164 LDUR V1, [X11 + 0x4]
	0x00000000 INVALID

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move V1, [X0+680]
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move X8, [X0]
	009 Move W9, 1
	010 Move [X0+680], S0
	011 Move [X0+880], W9
	012 Move X9, [X8+760]
	013 Move X1, [X8+768]
	014 Move X19, X0
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X2, [X8+744]
	019 Move X1, [X8+752]
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 CallNoReturn X2

Method: System.Single get_wordSpacing()

Disassembly:
	0x00000000 INVALID
	0x03AF9170 STR D0, [X31 + 0x8]

ISIL:
	001 Move V0, [X0+692]
	002 Return V0

Method: System.Void set_wordSpacing(System.Single value)

Disassembly:
	0x03AF9174 ADD X9, X9, 0x1
	0x03AF9178 CMP X9, X8
	0x03AF917C ADD X11, X11, 0x178
	0x03AF9180 B.LT 0x3AF911C
	0x03AF9184 LDP D1, D0, [X31]
	0x03AF9188 MOVI V2.2S, 0x3F, 0x18
	0x03AF918C STR W31, [X19 + 0x8]
	0x03AF9190 STR W31, [X19 + 0x14]
	0x03AF9194 FSUB V3.2S, V0.2S, V1.2S
	0x03AF9198 FADD V0.2S, V0.2S, V1.2S
	0x00000000 INVALID
	0x00000000 INVALID
	0x03AF91A4 STR D0, [X19]
	0x03AF91A8 STUR D1, [X19 + 0xC]
	0x03AF91AC LDP X20, X19, [X31 + 0x40]
	0x03AF91B0 LDP X30, X21, [X31 + 0x30]
	0x03AF91B4 LDP D9, D8, [X31 + 0x20]
	0x03AF91B8 LDP D11, D10, [X31 + 0x10]
	0x03AF91BC ADD X31, X31, 0x50
	0x03AF91C0 RET

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move V1, [X0+692]
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move X8, [X0]
	009 Move W9, 1
	010 Move [X0+692], S0
	011 Move [X0+880], W9
	012 Move X9, [X8+760]
	013 Move X1, [X8+768]
	014 Move X19, X0
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X2, [X8+744]
	019 Move X1, [X8+752]
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 CallNoReturn X2

Method: System.Single get_lineSpacing()

Disassembly:
	0x03AF91C4 BL 0x1C16F20
	0x03AF91C8 BL 0x1C16F28

ISIL:
	001 Move V0, [X0+696]
	002 Return V0

Method: System.Void set_lineSpacing(System.Single value)

Disassembly:
	0x03AF91CC STP X30, X25, [X31 - 0x40]!
	0x03AF91D0 STP X24, X23, [X31 + 0x10]
	0x03AF91D4 STP X22, X21, [X31 + 0x20]
	0x03AF91D8 STP X20, X19, [X31 + 0x30]
	0x03AF91DC ADRP X20, 0x8E9000
	0x03AF91E0 ADRP X24, 0x65F000
	0x03AF91E4 LDRB W8, [X20 + 0x636]
	0x03AF91E8 LDR X24, [X24 + 0x3E8]
	0x03AF91EC MOV X19, X0
	0x03AF91F0 TBNZ X8, 0x0, 0x3AF9214
	0x03AF91F4 ADRP X0, 0x660000
	0x03AF91F8 LDR X0, [X0 + 0x1B8]
	0x03AF91FC BL 0x1C16CF4
	0x03AF9200 ADRP X0, 0x65F000
	0x03AF9204 LDR X0, [X0 + 0x3E8]
	0x03AF9208 BL 0x1C16CF4
	0x03AF920C MOVZ W8, 0x1
	0x03AF9210 STRB W8, [X20 + 0x636]
	0x03AF9214 LDR X0, [X24]
	0x03AF9218 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move V1, [X0+696]
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move X8, [X0]
	009 Move W9, 1
	010 Move [X0+696], S0
	011 Move [X0+880], W9
	012 Move X9, [X8+760]
	013 Move X1, [X8+768]
	014 Move X19, X0
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X2, [X8+744]
	019 Move X1, [X8+752]
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 CallNoReturn X2

Method: System.Single get_lineSpacingAdjustment()

Disassembly:
	0x03AF921C CBNZ W8, 0x3AF9228
	0x03AF9220 BL 0x1C16DFC

ISIL:
	001 Move V0, [X0+712]
	002 Return V0

Method: System.Void set_lineSpacingAdjustment(System.Single value)

Disassembly:
	0x03AF9224 LDR X0, [X24]
	0x03AF9228 LDR X8, [X0 + 0xB8]
	0x03AF922C ADRP X25, 0x660000
	0x03AF9230 LDR X20, [X8 + 0x70]
	0x03AF9234 LDR X25, [X25 + 0x1B8]
	0x03AF9238 MOV X0, X20
	0x03AF923C MOV X1, X19
	0x03AF9240 MOV X2, X31
	0x03AF9244 BL 0x33C0DE4
	0x03AF9248 CBZ X0, 0x3AF9268
	0x03AF924C LDR X23, [X25]
	0x03AF9250 MOV X22, X0
	0x03AF9254 MOV X1, X23
	0x03AF9258 BL 0x1C16E00
	0x03AF925C MOV X21, X0
	0x03AF9260 CBNZ X0, 0x3AF926C
	0x03AF9264 B 0x3AF92B4
	0x03AF9268 MOV X21, X31
	0x03AF926C LDR X0, [X24]
	0x03AF9270 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move V1, [X0+712]
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move X8, [X0]
	009 Move W9, 1
	010 Move [X0+712], S0
	011 Move [X0+880], W9
	012 Move X9, [X8+760]
	013 Move X1, [X8+768]
	014 Move X19, X0
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X2, [X8+744]
	019 Move X1, [X8+752]
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 CallNoReturn X2

Method: System.Single get_paragraphSpacing()

Disassembly:
	0x03AF9274 CBNZ W8, 0x3AF9280
	0x03AF9278 BL 0x1C16DFC

ISIL:
	001 Move V0, [X0+716]
	002 Return V0

Method: System.Void set_paragraphSpacing(System.Single value)

Disassembly:
	0x03AF927C LDR X0, [X24]
	0x03AF9280 LDR X8, [X0 + 0xB8]
	0x03AF9284 MOV X1, X21
	0x03AF9288 MOV X2, X20
	0x03AF928C ADD X0, X8, 0x70
	0x03AF9290 BL 0x1C24138
	0x03AF9294 CMP X20, X0
	0x03AF9298 MOV X20, X0
	0x03AF929C B.NE 0x3AF9238
	0x03AF92A0 LDP X20, X19, [X31 + 0x30]
	0x03AF92A4 LDP X22, X21, [X31 + 0x20]
	0x03AF92A8 LDP X24, X23, [X31 + 0x10]
	0x03AF92AC LDP X30, X25, [X31], #0x40
	0x03AF92B0 RET
	0x03AF92B4 MOV X0, X22
	0x03AF92B8 MOV X1, X23
	0x03AF92BC BL 0x1C171E0
	0x03AF92C0 STP X30, X25, [X31 - 0x40]!
	0x03AF92C4 STP X24, X23, [X31 + 0x10]
	0x03AF92C8 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move V1, [X0+716]
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move X8, [X0]
	009 Move W9, 1
	010 Move [X0+716], S0
	011 Move [X0+880], W9
	012 Move X9, [X8+760]
	013 Move X1, [X8+768]
	014 Move X19, X0
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X2, [X8+744]
	019 Move X1, [X8+752]
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 CallNoReturn X2

Method: System.Single get_characterWidthAdjustment()

Disassembly:
	0x03AF92CC STP X20, X19, [X31 + 0x30]
	0x03AF92D0 ADRP X20, 0x8E9000

ISIL:
	001 Move V0, [X0+720]
	002 Return V0

Method: System.Void set_characterWidthAdjustment(System.Single value)

Disassembly:
	0x03AF92D4 ADRP X24, 0x65F000
	0x03AF92D8 LDRB W8, [X20 + 0x637]
	0x03AF92DC LDR X24, [X24 + 0x3E8]
	0x03AF92E0 MOV X19, X0
	0x03AF92E4 TBNZ X8, 0x0, 0x3AF9308
	0x03AF92E8 ADRP X0, 0x660000
	0x03AF92EC LDR X0, [X0 + 0x1B8]
	0x03AF92F0 BL 0x1C16CF4
	0x03AF92F4 ADRP X0, 0x65F000
	0x03AF92F8 LDR X0, [X0 + 0x3E8]
	0x03AF92FC BL 0x1C16CF4
	0x03AF9300 MOVZ W8, 0x1
	0x03AF9304 STRB W8, [X20 + 0x637]
	0x03AF9308 LDR X0, [X24]
	0x03AF930C LDR W8, [X0 + 0xE0]
	0x03AF9310 CBNZ W8, 0x3AF931C
	0x03AF9314 BL 0x1C16DFC
	0x03AF9318 LDR X0, [X24]
	0x03AF931C LDR X8, [X0 + 0xB8]
	0x03AF9320 ADRP X25, 0x660000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move V1, [X0+720]
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move X8, [X0]
	009 Move W9, 1
	010 Move [X0+720], S0
	011 Move [X0+880], W9
	012 Move X9, [X8+760]
	013 Move X1, [X8+768]
	014 Move X19, X0
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X2, [X8+744]
	019 Move X1, [X8+752]
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 CallNoReturn X2

Method: System.Boolean get_enableWordWrapping()

Disassembly:
	0x03AF9324 LDR X20, [X8 + 0x70]
	0x03AF9328 LDR X25, [X25 + 0x1B8]

ISIL:
	001 Move W0, [X0+728]
	002 Return X0

Method: System.Void set_enableWordWrapping(System.Boolean value)

Disassembly:
	0x03AF932C MOV X0, X20
	0x03AF9330 MOV X1, X19
	0x03AF9334 MOV X2, X31
	0x03AF9338 BL 0x33C0FDC
	0x03AF933C CBZ X0, 0x3AF935C
	0x03AF9340 LDR X23, [X25]
	0x03AF9344 MOV X22, X0
	0x03AF9348 MOV X1, X23
	0x03AF934C BL 0x1C16E00
	0x03AF9350 MOV X21, X0
	0x03AF9354 CBNZ X0, 0x3AF9360
	0x03AF9358 B 0x3AF93A8
	0x03AF935C MOV X21, X31
	0x03AF9360 LDR X0, [X24]
	0x03AF9364 LDR W8, [X0 + 0xE0]
	0x03AF9368 CBNZ W8, 0x3AF9374
	0x03AF936C BL 0x1C16DFC
	0x03AF9370 LDR X0, [X24]
	0x03AF9374 LDR X8, [X0 + 0xB8]
	0x03AF9378 MOV X1, X21
	0x03AF937C MOV X2, X20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W9, [X0+728]
	004 And W8, W1, 1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 
	009 Move X9, [X0]
	010 Move W10, 1
	011 Move [X0+728], W8
	012 Move [X0+880], W10
	013 Move X8, [X9+760]
	014 Move X1, [X9+768]
	015 Move X19, X0
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+744]
	020 Move X1, [X8+752]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2

Method: System.Single get_wordWrappingRatios()

Disassembly:
	0x03AF9380 ADD X0, X8, 0x70
	0x03AF9384 BL 0x1C24138

ISIL:
	001 Move V0, [X0+732]
	002 Return V0

Method: System.Void set_wordWrappingRatios(System.Single value)

Disassembly:
	0x03AF9388 CMP X20, X0
	0x03AF938C MOV X20, X0
	0x03AF9390 B.NE 0x3AF932C
	0x03AF9394 LDP X20, X19, [X31 + 0x30]
	0x03AF9398 LDP X22, X21, [X31 + 0x20]
	0x03AF939C LDP X24, X23, [X31 + 0x10]
	0x03AF93A0 LDP X30, X25, [X31], #0x40
	0x03AF93A4 RET
	0x03AF93A8 MOV X0, X22
	0x03AF93AC MOV X1, X23
	0x03AF93B0 BL 0x1C171E0
	0x03AF93B4 STP X30, X25, [X31 - 0x40]!
	0x03AF93B8 STP X24, X23, [X31 + 0x10]
	0x03AF93BC STP X22, X21, [X31 + 0x20]
	0x03AF93C0 STP X20, X19, [X31 + 0x30]
	0x03AF93C4 ADRP X20, 0x8E9000
	0x03AF93C8 ADRP X24, 0x65F000
	0x03AF93CC LDRB W8, [X20 + 0x638]
	0x03AF93D0 LDR X24, [X24 + 0x3E8]
	0x03AF93D4 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move V1, [X0+732]
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move X8, [X0]
	009 Move W9, 1
	010 Move [X0+732], S0
	011 Move [X0+880], W9
	012 Move X9, [X8+760]
	013 Move X1, [X8+768]
	014 Move X19, X0
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X2, [X8+744]
	019 Move X1, [X8+752]
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 CallNoReturn X2

Method: TMPro.TextOverflowModes get_overflowMode()

Disassembly:
	0x03AF93D8 TBNZ X8, 0x0, 0x3AF93FC
	0x03AF93DC ADRP X0, 0x660000

ISIL:
	001 Move W0, [X0+736]
	002 Return X0

Method: System.Void set_overflowMode(TMPro.TextOverflowModes value)

Disassembly:
	0x03AF93E0 LDR X0, [X0 + 0x1C0]
	0x03AF93E4 BL 0x1C16CF4
	0x03AF93E8 ADRP X0, 0x65F000
	0x03AF93EC LDR X0, [X0 + 0x3E8]
	0x03AF93F0 BL 0x1C16CF4
	0x03AF93F4 MOVZ W8, 0x1
	0x03AF93F8 STRB W8, [X20 + 0x638]
	0x03AF93FC LDR X0, [X24]
	0x03AF9400 LDR W8, [X0 + 0xE0]
	0x03AF9404 CBNZ W8, 0x3AF9410
	0x03AF9408 BL 0x1C16DFC
	0x03AF940C LDR X0, [X24]
	0x03AF9410 LDR X8, [X0 + 0xB8]
	0x03AF9414 ADRP X25, 0x660000
	0x03AF9418 LDR X20, [X8 + 0x78]
	0x03AF941C LDR X25, [X25 + 0x1C0]
	0x03AF9420 MOV X0, X20
	0x03AF9424 MOV X1, X19
	0x03AF9428 MOV X2, X31
	0x03AF942C BL 0x33C0DE4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+736]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move X8, [X0]
	009 Move W9, 1
	010 Move [X0+736], W1
	011 Move [X0+880], W9
	012 Move X9, [X8+760]
	013 Move X1, [X8+768]
	014 Move X19, X0
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X2, [X8+744]
	019 Move X1, [X8+752]
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 CallNoReturn X2

Method: System.Boolean get_isTextOverflowing()

Disassembly:
	0x03AF9430 CBZ X0, 0x3AF9450
	0x03AF9434 LDR X23, [X25]
	0x03AF9438 MOV X22, X0
	0x03AF943C MOV X1, X23

ISIL:
	001 Move W8, [X0+740]
	002 Add W31, W8, 1
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Int32 get_firstOverflowCharacterIndex()

Disassembly:
	0x03AF9440 BL 0x1C16E00
	0x03AF9444 MOV X21, X0

ISIL:
	001 Move W0, [X0+740]
	002 Return X0

Method: TMPro.TMP_Text get_linkedTextComponent()

Disassembly:
	0x03AF9448 CBNZ X0, 0x3AF9454
	0x03AF944C B 0x3AF949C

ISIL:
	001 Move X0, [X0+744]
	002 Return X0

Method: System.Void set_linkedTextComponent(TMPro.TMP_Text value)

Disassembly:
	0x03AF9450 MOV X21, X31
	0x03AF9454 LDR X0, [X24]
	0x03AF9458 LDR W8, [X0 + 0xE0]
	0x03AF945C CBNZ W8, 0x3AF9468
	0x03AF9460 BL 0x1C16DFC
	0x03AF9464 LDR X0, [X24]
	0x03AF9468 LDR X8, [X0 + 0xB8]
	0x03AF946C MOV X1, X21
	0x03AF9470 MOV X2, X20
	0x03AF9474 ADD X0, X8, 0x78
	0x03AF9478 BL 0x1C24138
	0x03AF947C CMP X20, X0
	0x03AF9480 MOV X20, X0
	0x03AF9484 B.NE 0x3AF9420
	0x03AF9488 LDP X20, X19, [X31 + 0x30]
	0x03AF948C LDP X22, X21, [X31 + 0x20]
	0x03AF9490 LDP X24, X23, [X31 + 0x10]
	0x03AF9494 LDP X30, X25, [X31], #0x40
	0x03AF9498 RET
	0x03AF949C MOV X0, X22
	0x03AF94A0 MOV X1, X23
	0x03AF94A4 BL 0x1C171E0
	0x03AF94A8 STP X30, X25, [X31 - 0x40]!
	0x03AF94AC STP X24, X23, [X31 + 0x10]
	0x03AF94B0 STP X22, X21, [X31 + 0x20]
	0x03AF94B4 STP X20, X19, [X31 + 0x30]
	0x03AF94B8 ADRP X20, 0x8E9000
	0x03AF94BC ADRP X24, 0x65F000
	0x03AF94C0 LDRB W8, [X20 + 0x639]
	0x03AF94C4 LDR X24, [X24 + 0x3E8]
	0x03AF94C8 MOV X19, X0
	0x03AF94CC TBNZ X8, 0x0, 0x3AF94F0
	0x03AF94D0 ADRP X0, 0x660000
	0x03AF94D4 LDR X0, [X0 + 0x1C0]
	0x03AF94D8 BL 0x1C16CF4
	0x03AF94DC ADRP X0, 0x65F000
	0x03AF94E0 LDR X0, [X0 + 0x3E8]
	0x03AF94E4 BL 0x1C16CF4
	0x03AF94E8 MOVZ W8, 0x1
	0x03AF94EC STRB W8, [X20 + 0x639]
	0x03AF94F0 LDR X0, [X24]
	0x03AF94F4 LDR W8, [X0 + 0xE0]
	0x03AF94F8 CBNZ W8, 0x3AF9504
	0x03AF94FC BL 0x1C16DFC
	0x03AF9500 LDR X0, [X24]
	0x03AF9504 LDR X8, [X0 + 0xB8]
	0x03AF9508 ADRP X25, 0x660000
	0x03AF950C LDR X20, [X8 + 0x78]
	0x03AF9510 LDR X25, [X25 + 0x1C0]
	0x03AF9514 MOV X0, X20
	0x03AF9518 MOV X1, X19
	0x03AF951C MOV X2, X31
	0x03AF9520 BL 0x33C0FDC
	0x03AF9524 CBZ X0, 0x3AF9544
	0x03AF9528 LDR X23, [X25]
	0x03AF952C MOV X22, X0
	0x03AF9530 MOV X1, X23
	0x03AF9534 BL 0x1C16E00
	0x03AF9538 MOV X21, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8EA000
	007 Move X22, 0x5FB000
	008 Move W8, [X21+1585]
	009 Move X22, [X22+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5FB000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1585], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Move X2, X31
	029 Call Object.op_Equality, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {38}
	034 Move X1, [X19+744]
	035 Move X0, X19
	036 Call TMP_Text.ReleaseLinkedTextComponent, X0, X1
	037 Move [X19+744], X20
	038 Move X0, X19
	039 Move X1, X20
	040 Call TMP_Text.IsSelfOrLinkedAncestor, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {51}
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+48]
	050 Return 
	051 Move X1, [X19+744]
	052 Move X0, X19
	053 Call TMP_Text.ReleaseLinkedTextComponent, X0, X1
	054 Move [X19+744], X20
	055 Compare X20, 0
	056 JumpIfEqual {75}
	057 Move [X20+752], X19
	058 Move X8, [X19]
	059 Move W9, 1
	060 Move [X19+880], W9
	061 Move X0, X19
	062 Move X9, [X8+760]
	063 Move X1, [X8+768]
	064 NotImplemented "Instruction BLR not yet implemented."
	065 Move X8, [X19]
	066 Move X0, X19
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Move X2, [X8+744]
	072 Move X1, [X8+752]
	073 Move X30, [X31+48]
	074 CallNoReturn X2
	075 Call 0x1C17F20

Method: System.Boolean get_isTextTruncated()

Disassembly:
	0x03AF9734 LDR X0, [X0 + 0x1D0]
	0x03AF9738 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+760]
	002 Return X0

Method: System.Boolean get_enableKerning()

Disassembly:
	0x03AF973C ADRP X0, 0x5FA000
	0x03AF9740 LDR X0, [X0 + 0x598]

ISIL:
	001 Move W0, [X0+761]
	002 Return X0

Method: System.Void set_enableKerning(System.Boolean value)

Disassembly:
	0x03AF9744 BL 0x1C16CF4
	0x03AF9748 MOVZ W8, 0x1
	0x03AF974C STRB W8, [X20 + 0x63C]
	0x03AF9750 LDR X0, [X21]
	0x03AF9754 LDR X20, [X19 + 0x3B8]
	0x03AF9758 LDR W8, [X0 + 0xE0]
	0x03AF975C CBNZ W8, 0x3AF9764
	0x03AF9760 BL 0x1C16DFC
	0x03AF9764 MOV X0, X20
	0x03AF9768 MOV X1, X31
	0x03AF976C MOV X2, X31
	0x03AF9770 BL 0x3C3883C
	0x03AF9774 TBZ X0, 0x0, 0x3AF97DC
	0x03AF9778 ADRP X8, 0x660000
	0x03AF977C LDR X8, [X8 + 0x1C8]
	0x03AF9780 MOV X0, X19
	0x03AF9784 LDR X1, [X8]
	0x03AF9788 BL 0x21A3894
	0x03AF978C STR X0, [X19 + 0x3B8]
	0x03AF9790 MOV X20, X0
	0x03AF9794 LDR X0, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W9, [X0+761]
	004 And W8, W1, 1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 
	009 Move X9, [X0]
	010 Move W10, 1
	011 Move [X0+761], W8
	012 Move [X0+880], W10
	013 Move X8, [X9+760]
	014 Move X1, [X9+768]
	015 Move X19, X0
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+744]
	020 Move X1, [X8+752]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2

Method: System.Boolean get_extraPadding()

Disassembly:
	0x03AF9798 LDR W8, [X0 + 0xE0]
	0x03AF979C CBNZ W8, 0x3AF97A4

ISIL:
	001 Move W0, [X0+768]
	002 Return X0

Method: System.Void set_extraPadding(System.Boolean value)

Disassembly:
	0x03AF97A0 BL 0x1C16DFC
	0x03AF97A4 MOV X0, X20
	0x03AF97A8 MOV X1, X31
	0x03AF97AC MOV X2, X31
	0x03AF97B0 BL 0x3C3883C
	0x03AF97B4 TBZ X0, 0x0, 0x3AF97DC
	0x03AF97B8 MOV X0, X19
	0x03AF97BC MOV X1, X31
	0x03AF97C0 BL 0x3C32ECC
	0x03AF97C4 CBZ X0, 0x3AF97EC
	0x03AF97C8 ADRP X8, 0x660000
	0x03AF97CC LDR X8, [X8 + 0x1D0]
	0x03AF97D0 LDR X1, [X8]
	0x03AF97D4 BL 0x21E51FC
	0x03AF97D8 STR X0, [X19 + 0x3B8]
	0x03AF97DC LDR X0, [X19 + 0x3B8]
	0x03AF97E0 LDP X20, X19, [X31 + 0x10]
	0x03AF97E4 LDP X30, X21, [X31], #0x20
	0x03AF97E8 RET
	0x03AF97EC BL 0x1C16F20
	0x03AF97F0 LDR V0, [X0 + 0x3C0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W9, [X0+768]
	004 And W8, W1, 1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 
	009 Move X9, [X0]
	010 Move W10, 1
	011 Move [X0+768], W8
	012 Move [X0+880], W10
	013 Move X8, [X9+2088]
	014 Move X1, [X9+2096]
	015 Move X19, X0
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+760]
	020 Move X1, [X8+768]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2

Method: System.Boolean get_richText()

Disassembly:
	0x03AF97F4 RET
	0x03AF97F8 LDR V0, [X0 + 0x3C4]

ISIL:
	001 Move W0, [X0+770]
	002 Return X0

Method: System.Void set_richText(System.Boolean value)

Disassembly:
	0x03AF97FC RET
	0x03AF9800 LDR V0, [X0 + 0x3C8]
	0x03AF9804 RET
	0x03AF9808 LDR V0, [X0 + 0x3CC]
	0x03AF980C RET
	0x03AF9810 LDR V0, [X0 + 0x3D0]
	0x03AF9814 RET
	0x03AF9818 LDR V0, [X0 + 0x3D4]
	0x03AF981C RET
	0x03AF9820 STP X30, X21, [X31 - 0x20]!
	0x03AF9824 STP X20, X19, [X31 + 0x10]
	0x03AF9828 ADRP X21, 0x8E9000
	0x03AF982C ADRP X20, 0x5FA000
	0x03AF9830 LDRB W8, [X21 + 0x63D]
	0x03AF9834 LDR X20, [X20 + 0x598]
	0x03AF9838 MOV X19, X0
	0x03AF983C TBNZ X8, 0x0, 0x3AF9860
	0x03AF9840 ADRP X0, 0x660000
	0x03AF9844 LDR X0, [X0 + 0x1D8]
	0x03AF9848 BL 0x1C16CF4
	0x03AF984C ADRP X0, 0x5FA000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W9, [X0+770]
	004 And W8, W1, 1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 
	009 Move X9, [X0]
	010 Move [X0+770], W8
	011 Move W8, 1
	012 Move [X0+880], W8
	013 Move X8, [X9+760]
	014 Move X1, [X9+768]
	015 Move X19, X0
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+744]
	020 Move X1, [X8+752]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2

Method: System.Boolean get_parseCtrlCharacters()

Disassembly:
	0x03AF9850 LDR X0, [X0 + 0x598]
	0x03AF9854 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+771]
	002 Return X0

Method: System.Void set_parseCtrlCharacters(System.Boolean value)

Disassembly:
	0x03AF9858 MOVZ W8, 0x1
	0x03AF985C STRB W8, [X21 + 0x63D]
	0x03AF9860 LDR X0, [X20]
	0x03AF9864 LDR X20, [X19 + 0x3D8]
	0x03AF9868 LDR W8, [X0 + 0xE0]
	0x03AF986C CBNZ W8, 0x3AF9874
	0x03AF9870 BL 0x1C16DFC
	0x03AF9874 MOV X0, X20
	0x03AF9878 MOV X1, X31
	0x03AF987C MOV X2, X31
	0x03AF9880 BL 0x3C3883C
	0x03AF9884 TBZ X0, 0x0, 0x3AF98A4
	0x03AF9888 ADRP X8, 0x660000
	0x03AF988C LDR X8, [X8 + 0x1D8]
	0x03AF9890 MOV X0, X19
	0x03AF9894 LDR X1, [X8]
	0x03AF9898 BL 0x21A3894
	0x03AF989C STR X0, [X19 + 0x3D8]
	0x03AF98A0 B 0x3AF98A8
	0x03AF98A4 LDR X0, [X19 + 0x3D8]
	0x03AF98A8 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W9, [X0+771]
	004 And W8, W1, 1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 
	009 Move X9, [X0]
	010 Move [X0+771], W8
	011 Move W8, 1
	012 Move [X0+880], W8
	013 Move X8, [X9+760]
	014 Move X1, [X9+768]
	015 Move X19, X0
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+744]
	020 Move X1, [X8+752]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2

Method: System.Boolean get_isOverlay()

Disassembly:
	0x03AF98AC LDP X30, X21, [X31], #0x20
	0x03AF98B0 RET

ISIL:
	001 Move W0, [X0+772]
	002 Return X0

Method: System.Void set_isOverlay(System.Boolean value)

Disassembly:
	0x03AF98B4 STP X30, X19, [X31 - 0x10]!
	0x03AF98B8 MOV X19, X0
	0x03AF98BC BL 0x3AF98CC
	0x03AF98C0 STR S0, [X19 + 0x3E0]
	0x03AF98C4 LDP X30, X19, [X31], #0x10
	0x03AF98C8 RET
	0x03AF98CC SUB X31, X31, 0x40
	0x03AF98D0 STP D9, D8, [X31 + 0x10]
	0x03AF98D4 STP X30, X21, [X31 + 0x20]
	0x03AF98D8 STP X20, X19, [X31 + 0x30]
	0x03AF98DC ADRP X21, 0x8E9000
	0x03AF98E0 ADRP X20, 0x5FA000
	0x03AF98E4 LDRB W8, [X21 + 0x652]
	0x03AF98E8 LDR X20, [X20 + 0x598]
	0x03AF98EC MOV X19, X0
	0x03AF98F0 TBNZ X8, 0x0, 0x3AF9914
	0x03AF98F4 ADRP X0, 0x5FA000
	0x03AF98F8 LDR X0, [X0 + 0x598]
	0x03AF98FC BL 0x1C16CF4
	0x03AF9900 ADRP X0, 0x65F000
	0x03AF9904 LDR X0, [X0 + 0x3E8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W9, [X0+772]
	004 And W8, W1, 1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 
	009 Move X9, [X0]
	010 Move [X0+772], W8
	011 Move X19, X0
	012 Move X8, [X9+1912]
	013 Move X1, [X9+1920]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X8, [X19]
	016 Move W9, 1
	017 Move [X19+880], W9
	018 Move X0, X19
	019 Move X2, [X8+760]
	020 Move X1, [X8+768]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2

Method: System.Boolean get_isOrthographic()

Disassembly:
	0x03AF9908 BL 0x1C16CF4
	0x03AF990C MOVZ W8, 0x1

ISIL:
	001 Move W0, [X0+773]
	002 Return X0

Method: System.Void set_isOrthographic(System.Boolean value)

Disassembly:
	0x03AF9910 STRB W8, [X21 + 0x652]
	0x03AF9914 MOV X0, X31
	0x03AF9918 BL 0x3B13C88
	0x03AF991C LDR X8, [X20]
	0x03AF9920 MOV X20, X0
	0x03AF9924 LDR W9, [X8 + 0xE0]
	0x03AF9928 CBNZ W9, 0x3AF9934
	0x03AF992C MOV X0, X8
	0x03AF9930 BL 0x1C16DFC
	0x03AF9934 MOV X0, X20
	0x03AF9938 MOV X1, X31
	0x03AF993C MOV X2, X31

ISIL:
	001 Move W9, [X0+773]
	002 And W8, W1, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Return 
	005 Move X9, [X0]
	006 Move W10, 1
	007 Move [X0+773], W8
	008 Move [X0+880], W10
	009 Move X2, [X9+760]
	010 Move X1, [X9+768]
	011 CallNoReturn X2

Method: System.Boolean get_enableCulling()

Disassembly:
	0x03AF9940 BL 0x3C3883C
	0x03AF9944 FMOV S0, W31

ISIL:
	001 Move W0, [X0+774]
	002 Return X0

Method: System.Void set_enableCulling(System.Boolean value)

Disassembly:
	0x03AF9948 TBNZ X0, 0x0, 0x3AF99F4
	0x03AF994C LDRB W8, [X19 + 0x3E8]
	0x03AF9950 CBZ W8, 0x3AF99F0
	0x03AF9954 LDRB W8, [X19 + 0x238]
	0x03AF9958 MOVZ W9, 0x254
	0x03AF995C MOVZ W10, 0x1E4
	0x03AF9960 ADRP X20, 0x65F000
	0x03AF9964 CMP W8, 0x0
	0x03AF9968 CSEL X8, X10, X9, EQ
	0x03AF996C LDR V0, [X19, X8, LSL]
	0x03AF9970 ADD X8, X19, 0x23C
	0x03AF9974 STR S0, [X31 + 0xC]
	0x03AF9978 LDR V0, [X19 + 0x250]
	0x03AF997C UNIMPLEMENTED
	0x03AF9980 STR D0, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W9, [X0+774]
	004 And W8, W1, 1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X9, [X0]
	007 Move [X0+774], W8
	008 Move X19, X0
	009 Move X8, [X9+1928]
	010 Move X1, [X9+1936]
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Move W8, 1
	013 Move [X19+880], W8
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return 

Method: System.Boolean get_ignoreVisibility()

Disassembly:
	0x03AF9984 STR W31, [X19 + 0x2D4]
	0x03AF9988 LDR X20, [X20 + 0x3E8]

ISIL:
	001 Move W0, [X0+777]
	002 Return X0

Method: System.Void set_ignoreVisibility(System.Boolean value)

Disassembly:
	0x03AF998C LDR X0, [X20]
	0x03AF9990 LDR W8, [X0 + 0xE0]
	0x03AF9994 CBNZ W8, 0x3AF99A0
	0x03AF9998 BL 0x1C16DFC
	0x03AF999C LDR X0, [X20]
	0x03AF99A0 LDR X8, [X0 + 0xB8]
	0x03AF99A4 MOV X0, X19
	0x03AF99A8 LDR V8, [X8 + 0x1598]

ISIL:
	001 Move W9, [X0+777]
	002 And W8, W1, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W9, 1
	005 Move [X0+880], W9
	006 Move [X0+777], W8
	007 Return 

Method: TMPro.TextureMappingOptions get_horizontalMapping()

Disassembly:
	0x03AF99AC LDR V9, [X8 + 0x159C]
	0x03AF99B0 MOVZ W8, 0x1

ISIL:
	001 Move W0, [X0+780]
	002 Return X0

Method: System.Void set_horizontalMapping(TMPro.TextureMappingOptions value)

Disassembly:
	0x03AF99B4 STRB W8, [X19 + 0x3F5]
	0x03AF99B8 BL 0x3AFA118
	0x03AF99BC LDR X8, [X19]
	0x03AF99C0 STR W31, [X19 + 0x244]
	0x03AF99C4 ADD X1, X31, 0xC
	0x03AF99C8 MOV X0, X19
	0x03AF99CC LDR X9, [X8 + 0x868]
	0x03AF99D0 LDR X4, [X8 + 0x870]
	0x03AF99D4 MOV V0.16B, V8.16B
	0x03AF99D8 MOV V1.16B, V9.16B
	0x03AF99DC MOV W2, W31

ISIL:
	001 Move W8, [X0+780]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 
	004 Move X8, [X0]
	005 Move W9, 1
	006 Move [X0+780], W1
	007 Move [X0+880], W9
	008 Move X2, [X8+760]
	009 Move X1, [X8+768]
	010 CallNoReturn X2

Method: TMPro.TextureMappingOptions get_verticalMapping()

Disassembly:
	0x03AF99E0 MOV W3, W31
	0x03AF99E4 BLR X9

ISIL:
	001 Move W0, [X0+784]
	002 Return X0

Method: System.Void set_verticalMapping(TMPro.TextureMappingOptions value)

Disassembly:
	0x03AF99E8 STRB W31, [X19 + 0x3E8]
	0x03AF99EC B 0x3AF99F4
	0x03AF99F0 LDR V0, [X19 + 0x3E0]
	0x03AF99F4 LDP X20, X19, [X31 + 0x30]
	0x03AF99F8 LDP X30, X21, [X31 + 0x20]
	0x03AF99FC LDP D9, D8, [X31 + 0x10]
	0x03AF9A00 ADD X31, X31, 0x40
	0x03AF9A04 RET
	0x03AF9A08 STP X30, X19, [X31 - 0x10]!
	0x03AF9A0C MOV X19, X0
	0x03AF9A10 BL 0x3AF9A20

ISIL:
	001 Move W8, [X0+784]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 
	004 Move X8, [X0]
	005 Move W9, 1
	006 Move [X0+784], W1
	007 Move [X0+880], W9
	008 Move X2, [X8+760]
	009 Move X1, [X8+768]
	010 CallNoReturn X2

Method: System.Single get_mappingUvLineOffset()

Disassembly:
	0x03AF9A14 STR S0, [X19 + 0x3EC]
	0x03AF9A18 LDP X30, X19, [X31], #0x10

ISIL:
	001 Move V0, [X0+788]
	002 Return V0

Method: System.Void set_mappingUvLineOffset(System.Single value)

Disassembly:
	0x03AF9A1C RET
	0x03AF9A20 SUB X31, X31, 0x40
	0x03AF9A24 STP D9, D8, [X31 + 0x10]
	0x03AF9A28 STP X30, X21, [X31 + 0x20]
	0x03AF9A2C STP X20, X19, [X31 + 0x30]
	0x03AF9A30 ADRP X21, 0x8E9000
	0x03AF9A34 ADRP X20, 0x5FA000
	0x03AF9A38 LDRB W8, [X21 + 0x653]
	0x03AF9A3C LDR X20, [X20 + 0x598]
	0x03AF9A40 MOV X19, X0
	0x03AF9A44 TBNZ X8, 0x0, 0x3AF9A68

ISIL:
	001 Move V1, [X0+788]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Return 
	004 Move X8, [X0]
	005 Move W9, 1
	006 Move [X0+788], S0
	007 Move [X0+880], W9
	008 Move X2, [X8+760]
	009 Move X1, [X8+768]
	010 CallNoReturn X2

Method: TMPro.TextRenderFlags get_renderMode()

Disassembly:
	0x03AF9A48 ADRP X0, 0x5FA000
	0x03AF9A4C LDR X0, [X0 + 0x598]

ISIL:
	001 Move W0, [X0+792]
	002 Return X0

Method: System.Void set_renderMode(TMPro.TextRenderFlags value)

Disassembly:
	0x03AF9A50 BL 0x1C16CF4
	0x03AF9A54 ADRP X0, 0x65F000
	0x03AF9A58 LDR X0, [X0 + 0x3E8]
	0x03AF9A5C BL 0x1C16CF4
	0x03AF9A60 MOVZ W8, 0x1
	0x03AF9A64 STRB W8, [X21 + 0x653]
	0x03AF9A68 MOV X0, X31

ISIL:
	001 Move W8, [X0+792]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W8, 1
	004 Move [X0+792], W1
	005 Move [X0+880], W8
	006 Return 

Method: TMPro.VertexSortingOrder get_geometrySortingOrder()

Disassembly:
	0x03AF9A6C BL 0x3B13C88
	0x03AF9A70 LDR X8, [X20]

ISIL:
	001 Move W0, [X0+796]
	002 Return X0

Method: System.Void set_geometrySortingOrder(TMPro.VertexSortingOrder value)

Disassembly:
	0x03AF9A74 MOV X20, X0
	0x03AF9A78 LDR W9, [X8 + 0xE0]
	0x03AF9A7C CBNZ W9, 0x3AF9A88
	0x03AF9A80 MOV X0, X8
	0x03AF9A84 BL 0x1C16DFC
	0x03AF9A88 MOV X0, X20
	0x03AF9A8C MOV X1, X31

ISIL:
	001 Move X8, [X0]
	002 Move W9, 1
	003 Move [X0+796], W1
	004 Move [X0+880], W9
	005 Move X2, [X8+760]
	006 Move X1, [X8+768]
	007 CallNoReturn X2

Method: System.Boolean get_isTextObjectScaleStatic()

Disassembly:
	0x03AF9A90 MOV X2, X31
	0x03AF9A94 BL 0x3C3883C

ISIL:
	001 Move W0, [X0+800]
	002 Return X0

Method: System.Void set_isTextObjectScaleStatic(System.Boolean value)

Disassembly:
	0x03AF9A98 FMOV S1, W31
	0x03AF9A9C TBNZ X0, 0x0, 0x3AF9B80
	0x03AF9AA0 LDRB W8, [X19 + 0x3F4]
	0x03AF9AA4 CBZ W8, 0x3AF9B7C
	0x03AF9AA8 LDRB W8, [X19 + 0x238]
	0x03AF9AAC MOVZ W9, 0x254
	0x03AF9AB0 ADRP X20, 0x65F000
	0x03AF9AB4 CMP W8, 0x0
	0x03AF9AB8 MOVZ W8, 0x1E4
	0x03AF9ABC CSEL X8, X8, X9, EQ
	0x03AF9AC0 LDR V0, [X19, X8, LSL]
	0x03AF9AC4 ADD X8, X19, 0x23C
	0x03AF9AC8 STR S0, [X31 + 0xC]
	0x03AF9ACC LDR V0, [X19 + 0x250]
	0x03AF9AD0 UNIMPLEMENTED
	0x03AF9AD4 STR D0, [X8]
	0x03AF9AD8 STR W31, [X19 + 0x2D4]
	0x03AF9ADC LDR V8, [X19 + 0x358]
	0x03AF9AE0 LDR X20, [X20 + 0x3E8]
	0x03AF9AE4 FCMP S8, 0x0
	0x03AF9AE8 LDR X0, [X20]
	0x03AF9AEC B.NE 0x3AF9B08
	0x03AF9AF0 LDR W8, [X0 + 0xE0]
	0x03AF9AF4 CBNZ W8, 0x3AF9B00
	0x03AF9AF8 BL 0x1C16DFC
	0x03AF9AFC LDR X0, [X20]
	0x03AF9B00 LDR X8, [X0 + 0xB8]
	0x03AF9B04 LDR V8, [X8 + 0x15A8]
	0x03AF9B08 LDR W8, [X0 + 0xE0]
	0x03AF9B0C CBNZ W8, 0x3AF9B18
	0x03AF9B10 BL 0x1C16DFC
	0x03AF9B14 LDR X0, [X20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x8EA000
	008 Move X21, 0x660000
	009 Move W8, [X23+1586]
	010 Move X21, [X21+1384]
	011 Move W20, W1
	012 Move X19, X0
	013 And W22, W1, 1
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x660000
	019 Move X0, [X0+1384]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+1586], W8
	023 Move [X19+800], W22
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X19
	030 Move X1, X31
	031 Move TEMP, X20
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {43}
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Move X23, [X31+56]
	041 Call TMP_UpdateManager.UnRegisterTextObjectForUpdate, X0
	042 Return 
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X30, [X31+48]
	048 Move X23, [X31+56]
	049 Call TMP_UpdateManager.RegisterTextObjectForUpdate, X0
	050 Return 

Method: System.Boolean get_vertexBufferAutoSizeReduction()

Disassembly:
	0x03AF9B18 LDR X8, [X0 + 0xB8]
	0x03AF9B1C MOV X0, X19

ISIL:
	001 Move W0, [X0+801]
	002 Return X0

Method: System.Void set_vertexBufferAutoSizeReduction(System.Boolean value)

Disassembly:
	0x03AF9B20 LDR V9, [X8 + 0x15A8]
	0x03AF9B24 MOVZ W8, 0x1
	0x03AF9B28 STRB W8, [X19 + 0x3F5]
	0x03AF9B2C BL 0x3AFA118
	0x03AF9B30 STRB W31, [X19 + 0x24C]
	0x03AF9B34 STR W31, [X19 + 0x244]
	0x03AF9B38 LDR X8, [X19]
	0x03AF9B3C LDRB W2, [X19 + 0x238]

ISIL:
	001 Move X9, [X0]
	002 And W8, W1, 1
	003 Move W10, 1
	004 Move [X0+801], W8
	005 Move [X0+880], W10
	006 Move X2, [X9+760]
	007 Move X1, [X9+768]
	008 CallNoReturn X2

Method: System.Int32 get_firstVisibleCharacter()

Disassembly:
	0x03AF9B40 LDRB W3, [X19 + 0x2D8]
	0x03AF9B44 ADD X1, X31, 0xC

ISIL:
	001 Move W0, [X0+804]
	002 Return X0

Method: System.Void set_firstVisibleCharacter(System.Int32 value)

Disassembly:
	0x03AF9B48 LDR X9, [X8 + 0x868]
	0x03AF9B4C LDR X4, [X8 + 0x870]
	0x03AF9B50 MOV X0, X19
	0x03AF9B54 MOV V0.16B, V8.16B
	0x03AF9B58 MOV V1.16B, V9.16B
	0x03AF9B5C BLR X9
	0x03AF9B60 LDR W8, [X19 + 0x244]
	0x03AF9B64 LDRB W9, [X19 + 0x24C]
	0x03AF9B68 ADD W8, W8, 0x1
	0x03AF9B6C STR W8, [X19 + 0x244]
	0x03AF9B70 CBZ W9, 0x3AF9B38

ISIL:
	001 Move W8, [X0+804]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 
	004 Move X8, [X0]
	005 Move W9, 1
	006 Move [X0+804], W1
	007 Move [X0+880], W9
	008 Move X2, [X8+760]
	009 Move X1, [X8+768]
	010 CallNoReturn X2

Method: System.Int32 get_maxVisibleCharacters()

Disassembly:
	0x03AF9B74 STRB W31, [X19 + 0x3F4]
	0x03AF9B78 B 0x3AF9B80

ISIL:
	001 Move W0, [X0+808]
	002 Return X0

Method: System.Void set_maxVisibleCharacters(System.Int32 value)

Disassembly:
	0x03AF9B7C LDR V1, [X19 + 0x3EC]
	0x03AF9B80 LDP X20, X19, [X31 + 0x30]
	0x03AF9B84 LDP X30, X21, [X31 + 0x20]
	0x03AF9B88 LDP D9, D8, [X31 + 0x10]
	0x03AF9B8C MOV V0.16B, V1.16B
	0x03AF9B90 ADD X31, X31, 0x40
	0x03AF9B94 RET
	0x03AF9B98 SUB X31, X31, 0x30
	0x03AF9B9C STR X30, [X31 + 0x20]
	0x03AF9BA0 ADD X8, X31, 0x8
	0x03AF9BA4 BL 0x3AF9020

ISIL:
	001 Move W8, [X0+808]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 
	004 Move X8, [X0]
	005 Move W9, 1
	006 Move [X0+808], W1
	007 Move [X0+880], W9
	008 Move X2, [X8+760]
	009 Move X1, [X8+768]
	010 CallNoReturn X2

Method: System.Int32 get_maxVisibleWords()

Disassembly:
	0x03AF9BA8 LDR V0, [X31 + 0x14]
	0x03AF9BAC LDR X30, [X31 + 0x20]

ISIL:
	001 Move W0, [X0+812]
	002 Return X0

Method: System.Void set_maxVisibleWords(System.Int32 value)

Disassembly:
	0x03AF9BB0 FADD S0, S0, S0
	0x03AF9BB4 ADD X31, X31, 0x30
	0x03AF9BB8 RET
	0x03AF9BBC SUB X31, X31, 0x30
	0x03AF9BC0 STR X30, [X31 + 0x20]
	0x03AF9BC4 ADD X8, X31, 0x8
	0x03AF9BC8 BL 0x3AF9020
	0x03AF9BCC LDR V0, [X31 + 0x14]
	0x03AF9BD0 LDR X30, [X31 + 0x20]
	0x03AF9BD4 FADD S0, S0, S0
	0x03AF9BD8 ADD X31, X31, 0x30

ISIL:
	001 Move W8, [X0+812]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 
	004 Move X8, [X0]
	005 Move W9, 1
	006 Move [X0+812], W1
	007 Move [X0+880], W9
	008 Move X2, [X8+760]
	009 Move X1, [X8+768]
	010 CallNoReturn X2

Method: System.Int32 get_maxVisibleLines()

Disassembly:
	0x03AF9BDC RET
	0x03AF9BE0 SUB X31, X31, 0x30

ISIL:
	001 Move W0, [X0+816]
	002 Return X0

Method: System.Void set_maxVisibleLines(System.Int32 value)

Disassembly:
	0x03AF9BE4 STR X30, [X31 + 0x20]
	0x03AF9BE8 ADD X8, X31, 0x8
	0x03AF9BEC BL 0x3AF9020
	0x03AF9BF0 LDR V0, [X31 + 0x18]
	0x03AF9BF4 LDR X30, [X31 + 0x20]
	0x03AF9BF8 FADD S0, S0, S0
	0x03AF9BFC ADD X31, X31, 0x30
	0x03AF9C00 RET
	0x03AF9C04 SUB X31, X31, 0x30
	0x03AF9C08 STR X30, [X31 + 0x20]
	0x03AF9C0C ADD X8, X31, 0x8

ISIL:
	001 Move W8, [X0+816]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 
	004 Move X8, [X0]
	005 Move W9, 1
	006 Move [X0+816], W1
	007 Move [X0+880], W9
	008 Move X2, [X8+760]
	009 Move X1, [X8+768]
	010 CallNoReturn X2

Method: System.Boolean get_useMaxVisibleDescender()

Disassembly:
	0x03AF9C10 BL 0x3AF9020
	0x03AF9C14 LDR V0, [X31 + 0x18]

ISIL:
	001 Move W0, [X0+820]
	002 Return X0

Method: System.Void set_useMaxVisibleDescender(System.Boolean value)

Disassembly:
	0x03AF9C18 LDR X30, [X31 + 0x20]
	0x03AF9C1C FADD S0, S0, S0
	0x03AF9C20 ADD X31, X31, 0x30
	0x03AF9C24 RET
	0x03AF9C28 LDR W0, [X0 + 0x3F8]
	0x03AF9C2C RET
	0x03AF9C30 RET
	0x03AF9C34 RET
	0x03AF9C38 MOV X0, X31
	0x03AF9C3C RET
	0x03AF9C40 RET
	0x03AF9C44 MOV X0, X31

ISIL:
	001 Move W9, [X0+820]
	002 And W8, W1, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Return 
	005 Move X9, [X0]
	006 Move W10, 1
	007 Move [X0+820], W8
	008 Move [X0+880], W10
	009 Move X2, [X9+760]
	010 Move X1, [X9+768]
	011 CallNoReturn X2

Method: System.Int32 get_pageToDisplay()

Disassembly:
	0x03AF9C48 RET
	0x03AF9C4C RET

ISIL:
	001 Move W0, [X0+824]
	002 Return X0

Method: System.Void set_pageToDisplay(System.Int32 value)

Disassembly:
	0x03AF9C50 MOV X0, X31
	0x03AF9C54 RET
	0x03AF9C58 STP X30, X21, [X31 - 0x20]!
	0x03AF9C5C STP X20, X19, [X31 + 0x10]
	0x03AF9C60 ADRP X19, 0x8E9000
	0x03AF9C64 ADRP X21, 0x5FE000
	0x03AF9C68 LDRB W8, [X19 + 0x63E]
	0x03AF9C6C LDR X21, [X21 + 0xCA0]
	0x03AF9C70 MOV X20, X1
	0x03AF9C74 TBNZ X8, 0x0, 0x3AF9C98
	0x03AF9C78 ADRP X0, 0x5FE000

ISIL:
	001 Move W8, [X0+824]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 
	004 Move X8, [X0]
	005 Move W9, 1
	006 Move [X0+824], W1
	007 Move [X0+880], W9
	008 Move X2, [X8+760]
	009 Move X1, [X8+768]
	010 CallNoReturn X2

Method: UnityEngine.Vector4 get_margin()

Disassembly:
	0x03AF9C7C LDR X0, [X0 + 0xCA0]
	0x03AF9C80 BL 0x1C16CF4
	0x03AF9C84 ADRP X0, 0x660000
	0x03AF9C88 LDR X0, [X0 + 0x1E0]
	0x03AF9C8C BL 0x1C16CF4

ISIL:
	001 Move V0, [X0+832]
	002 Move V1, [X0+836]
	003 Move V2, [X0+840]
	004 Move V3, [X0+844]
	005 Return X0

Method: System.Void set_margin(UnityEngine.Vector4 value)

Disassembly:
	0x03AF9C90 MOVZ W8, 0x1
	0x03AF9C94 STRB W8, [X19 + 0x63E]
	0x03AF9C98 LDR X0, [X21]
	0x03AF9C9C BL 0x1C16F10
	0x03AF9CA0 MOV X1, X20
	0x03AF9CA4 MOV X2, X31
	0x03AF9CA8 MOV X19, X0
	0x03AF9CAC BL 0x3C145DC
	0x03AF9CB0 CBZ X20, 0x3AF9D14
	0x03AF9CB4 MOV X0, X20
	0x03AF9CB8 MOV X1, X31
	0x03AF9CBC BL 0x3C15294
	0x03AF9CC0 CBZ X19, 0x3AF9D14
	0x03AF9CC4 ADRP X20, 0x660000
	0x03AF9CC8 LDR X20, [X20 + 0x1E0]
	0x03AF9CCC MOV X1, X0
	0x03AF9CD0 MOV X0, X19
	0x03AF9CD4 MOV X2, X31
	0x03AF9CD8 BL 0x3C152D0
	0x03AF9CDC MOV X0, X19
	0x03AF9CE0 MOV X1, X31
	0x03AF9CE4 BL 0x3C389D4
	0x03AF9CE8 LDR X1, [X20]
	0x03AF9CEC MOV X2, X31
	0x03AF9CF0 BL 0x321B938
	0x03AF9CF4 MOV X1, X0
	0x03AF9CF8 MOV X0, X19
	0x03AF9CFC MOV X2, X31
	0x03AF9D00 BL 0x3C38A84
	0x03AF9D04 MOV X0, X19
	0x03AF9D08 LDP X20, X19, [X31 + 0x10]
	0x03AF9D0C LDP X30, X21, [X31], #0x20
	0x03AF9D10 RET
	0x03AF9D14 BL 0x1C16F20
	0x03AF9D18 STR X30, [X31 - 0x30]!
	0x03AF9D1C STP X22, X21, [X31 + 0x10]
	0x03AF9D20 STP X20, X19, [X31 + 0x20]
	0x03AF9D24 ADRP X21, 0x8E9000
	0x03AF9D28 ADRP X22, 0x5FA000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move V4, [X0+832]
	004 Move V5, [X0+836]
	005 Move V6, [X0+840]
	006 Move V7, [X0+844]
	007 Subtract S4, S4, S0
	008 Subtract S5, S5, S1
	009 Move X8, -50393088
	010 Multiply S4, S4, S4
	011 Multiply S5, S5, S5
	012 Add S4, S4, S5
	013 Move V5, [X8+3872]
	014 Subtract S6, S6, S2
	015 Subtract S7, S7, S3
	016 Multiply S6, S6, S6
	017 Add S4, S6, S4
	018 Multiply S6, S7, S7
	019 Add S4, S6, S4
	020 NotImplemented "Instruction FCMP not yet implemented."
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return 
	024 Move X8, [X0]
	025 Move [X0+832], S0
	026 Move [X0+836], S1
	027 Move [X0+840], S2
	028 Move [X0+844], S3
	029 Move X9, [X8+2216]
	030 Move X1, [X8+2224]
	031 Move X19, X0
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move X8, [X19]
	034 Move W9, 1
	035 Move [X19+880], W9
	036 Move X0, X19
	037 Move X2, [X8+760]
	038 Move X1, [X8+768]
	039 Move X30, [X31+16]
	040 Move X19, [X31+24]
	041 CallNoReturn X2

Method: TMPro.TMP_TextInfo get_textInfo()

Disassembly:
	0x03AF9D2C LDRB W8, [X21 + 0x63F]
	0x03AF9D30 LDR X22, [X22 + 0x598]

ISIL:
	001 Move X0, [X0+872]
	002 Return X0

Method: System.Boolean get_havePropertiesChanged()

Disassembly:
	0x03AF9D34 MOV X20, X1
	0x03AF9D38 MOV X19, X0

ISIL:
	001 Move W0, [X0+880]
	002 Return X0

Method: System.Void set_havePropertiesChanged(System.Boolean value)

Disassembly:
	0x03AF9D3C TBNZ X8, 0x0, 0x3AF9D54
	0x03AF9D40 ADRP X0, 0x5FA000
	0x03AF9D44 LDR X0, [X0 + 0x598]
	0x03AF9D48 BL 0x1C16CF4
	0x03AF9D4C MOVZ W8, 0x1
	0x03AF9D50 STRB W8, [X21 + 0x63F]
	0x03AF9D54 LDR X0, [X22]
	0x03AF9D58 LDR W8, [X0 + 0xE0]
	0x03AF9D5C CBNZ W8, 0x3AF9D64
	0x03AF9D60 BL 0x1C16DFC

ISIL:
	001 Move W9, [X0+880]
	002 And W8, W1, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Return 
	005 Move X9, [X0]
	006 Move [X0+880], W8
	007 Move X2, [X9+728]
	008 Move X1, [X9+736]
	009 CallNoReturn X2

Method: System.Boolean get_isUsingLegacyAnimationComponent()

Disassembly:
	0x03AF9D64 MOV X0, X20
	0x03AF9D68 MOV X1, X31

ISIL:
	001 Move W0, [X0+881]
	002 Return X0

Method: System.Void set_isUsingLegacyAnimationComponent(System.Boolean value)

Disassembly:
	0x03AF9D6C MOV X2, X31
	0x03AF9D70 BL 0x3C3883C
	0x03AF9D74 TBZ X0, 0x0, 0x3AF9D88

ISIL:
	001 And W8, W1, 1
	002 Move [X0+881], W8
	003 Return 

Method: UnityEngine.Transform get_transform()

Disassembly:
	0x03AF9D78 LDP X20, X19, [X31 + 0x20]
	0x03AF9D7C LDP X22, X21, [X31 + 0x10]
	0x03AF9D80 LDR X30, [X31], #0x30
	0x03AF9D84 RET
	0x03AF9D88 CBZ X20, 0x3AF9DD0
	0x03AF9D8C LDUR V0, [X20 + 0x3C]
	0x03AF9D90 ADD X8, X19, 0x168
	0x03AF9D94 MOV X0, X19
	0x03AF9D98 LDP X22, X21, [X31 + 0x10]
	0x03AF9D9C STR V0, [X8 + 0x2]
	0x03AF9DA0 LDUR V0, [X20 + 0x4C]
	0x03AF9DA4 STR V0, [X8 + 0x3]
	0x03AF9DA8 LDUR V0, [X20 + 0x1C]
	0x03AF9DAC STR V0, [X8]
	0x03AF9DB0 LDUR V0, [X20 + 0x2C]
	0x03AF9DB4 STR V0, [X8 + 0x1]
	0x03AF9DB8 LDR X8, [X19]
	0x03AF9DBC LDP X20, X19, [X31 + 0x20]
	0x03AF9DC0 LDR X2, [X8 + 0x2F8]
	0x03AF9DC4 LDR X1, [X8 + 0x300]
	0x03AF9DC8 LDR X30, [X31], #0x30
	0x03AF9DCC BR X2
	0x03AF9DD0 BL 0x1C16F20
	0x03AF9DD4 RET
	0x03AF9DD8 RET
	0x03AF9DDC RET
	0x03AF9DE0 RET
	0x03AF9DE4 RET
	0x03AF9DE8 RET
	0x03AF9DEC RET
	0x03AF9DF0 RET
	0x03AF9DF4 STP X30, X23, [X31 - 0x30]!
	0x03AF9DF8 STP X22, X21, [X31 + 0x10]
	0x03AF9DFC STP X20, X19, [X31 + 0x20]
	0x03AF9E00 ADRP X20, 0x8E9000
	0x03AF9E04 ADRP X21, 0x65F000
	0x03AF9E08 LDRB W8, [X20 + 0x640]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8EA000
	006 Move X20, 0x5FB000
	007 Move W8, [X21+1587]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x660000
	015 Move X0, [X0+1392]
	016 Call 0x1C17CF4
	017 Move X0, 0x5FB000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1587], W8
	022 Move X0, [X20]
	023 Move X20, [X19+888]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {42}
	036 Move X8, 0x660000
	037 Move X8, [X8+1392]
	038 Move X0, X19
	039 Move X1, [X8]
	040 Call 0x21A4894, X0
	041 Move [X19+888], X0
	042 Move X0, [X19+888]
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0

Method: UnityEngine.RectTransform get_rectTransform()

Disassembly:
	0x03AF9E0C LDR X21, [X21 + 0x338]
	0x03AF9E10 MOV X19, X0
	0x03AF9E14 TBNZ X8, 0x0, 0x3AF9E38
	0x03AF9E18 ADRP X0, 0x5FA000
	0x03AF9E1C LDR X0, [X0 + 0x598]
	0x03AF9E20 BL 0x1C16CF4
	0x03AF9E24 ADRP X0, 0x65F000
	0x03AF9E28 LDR X0, [X0 + 0x338]
	0x03AF9E2C BL 0x1C16CF4
	0x03AF9E30 MOVZ W8, 0x1
	0x03AF9E34 STRB W8, [X20 + 0x640]
	0x03AF9E38 LDR X0, [X21]
	0x03AF9E3C ADRP X20, 0x5FA000
	0x03AF9E40 LDR W8, [X0 + 0xE0]
	0x03AF9E44 LDR X20, [X20 + 0x598]
	0x03AF9E48 CBNZ W8, 0x3AF9E50
	0x03AF9E4C BL 0x1C16DFC
	0x03AF9E50 MOV X0, X31
	0x03AF9E54 BL 0x3B0DFAC
	0x03AF9E58 LDR X0, [X20]
	0x03AF9E5C LDR X20, [X19 + 0x110]
	0x03AF9E60 LDR W8, [X0 + 0xE0]
	0x03AF9E64 CBNZ W8, 0x3AF9E6C
	0x03AF9E68 BL 0x1C16DFC
	0x03AF9E6C MOV X0, X20
	0x03AF9E70 MOV X1, X31
	0x03AF9E74 MOV X2, X31
	0x03AF9E78 BL 0x3C3883C
	0x03AF9E7C FMOV S0, W31
	0x03AF9E80 TBNZ X0, 0x0, 0x3AF9F00
	0x03AF9E84 LDR X0, [X21]
	0x03AF9E88 LDR X20, [X19 + 0x110]
	0x03AF9E8C LDRB W22, [X19 + 0x300]
	0x03AF9E90 LDRB W23, [X19 + 0x26A]
	0x03AF9E94 LDR W8, [X0 + 0xE0]
	0x03AF9E98 CBNZ W8, 0x3AF9EA0
	0x03AF9E9C BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8EA000
	006 Move X20, 0x5FB000
	007 Move W8, [X21+1588]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5FD000
	015 Move X0, [X0+1720]
	016 Call 0x1C17CF4
	017 Move X0, 0x5FB000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1588], W8
	022 Move X0, [X20]
	023 Move X20, [X19+896]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {42}
	036 Move X8, 0x5FD000
	037 Move X8, [X8+1720]
	038 Move X0, X19
	039 Move X1, [X8]
	040 Call 0x21A4894, X0
	041 Move [X19+896], X0
	042 Move X0, [X19+896]
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0

Method: System.Boolean get_autoSizeTextContainer()

Disassembly:
	0x03AF9EA0 CMP W23, 0x0
	0x03AF9EA4 CSET W2, NE

ISIL:
	001 Move W0, [X0+920]
	002 Return X0

Method: System.Void set_autoSizeTextContainer(System.Boolean value)

Disassembly:
	0x03AF9EA8 CMP W22, 0x0
	0x03AF9EAC CSET W1, NE
	0x03AF9EB0 MOV X0, X20

ISIL:
	001 And W8, W1, 1
	002 Move [X0+920], W8
	003 Return 

Method: UnityEngine.Mesh get_mesh()

Disassembly:
	0x03AF9EB4 MOV X3, X31
	0x03AF9EB8 BL 0x3B15054

ISIL:
	001 Move X0, [X0+928]
	002 Return X0

Method: System.Boolean get_isVolumetricText()

Disassembly:
	0x03AF9EBC LDR X0, [X19 + 0x110]
	0x03AF9EC0 MOV X1, X31

ISIL:
	001 Move W0, [X0+936]
	002 Return X0

Method: System.Void set_isVolumetricText(System.Boolean value)

Disassembly:
	0x03AF9EC4 STR S0, [X19 + 0x618]
	0x03AF9EC8 BL 0x3B14EB8
	0x03AF9ECC LDR X8, [X19 + 0x110]
	0x03AF9ED0 AND W9, W0, 0x1
	0x03AF9ED4 STRB W9, [X19 + 0x307]
	0x03AF9ED8 CBZ X8, 0x3AF9F10
	0x03AF9EDC LDR X9, [X21]
	0x03AF9EE0 MOV X0, X8
	0x03AF9EE4 MOV X2, X31
	0x03AF9EE8 LDR X9, [X9 + 0xB8]
	0x03AF9EEC LDR W1, [X9 + 0x30]
	0x03AF9EF0 BL 0x3C14D08
	0x03AF9EF4 LDR V0, [X19 + 0x618]
	0x03AF9EF8 AND W8, W0, 0x1
	0x03AF9EFC STRB W8, [X19 + 0x108]
	0x03AF9F00 LDP X20, X19, [X31 + 0x20]
	0x03AF9F04 LDP X22, X21, [X31 + 0x10]
	0x03AF9F08 LDP X30, X23, [X31], #0x30
	0x03AF9F0C RET
	0x03AF9F10 BL 0x1C16F20
	0x03AF9F14 STP X30, X23, [X31 - 0x30]!
	0x03AF9F18 STP X22, X21, [X31 + 0x10]
	0x03AF9F1C STP X20, X19, [X31 + 0x20]
	0x03AF9F20 ADRP X21, 0x8E9000
	0x03AF9F24 ADRP X22, 0x5FA000
	0x03AF9F28 LDRB W8, [X21 + 0x641]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W9, [X0+936]
	004 And W8, W1, 1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 
	009 Move X19, X0
	010 Move X0, [X0+872]
	011 Move [X19+880], W8
	012 Compare X0, 0
	013 JumpIfEqual {29}
	014 And W1, W1, 1
	015 Move X2, X31
	016 Call TMP_TextInfo.ResetVertexLayout, X0, X1
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X9, [X8+760]
	020 Move X1, [X8+768]
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move X8, [X19]
	023 Move X0, X19
	024 Move X2, [X8+744]
	025 Move X1, [X8+752]
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 CallNoReturn X2
	029 Call 0x1C17F20

Method: UnityEngine.Bounds get_bounds()

Disassembly:
	0x03AF9F2C LDR X22, [X22 + 0x598]
	0x03AF9F30 MOV X20, X1
	0x03AF9F34 MOV X19, X0
	0x03AF9F38 TBNZ X8, 0x0, 0x3AF9F5C
	0x03AF9F3C ADRP X0, 0x5FA000
	0x03AF9F40 LDR X0, [X0 + 0x598]
	0x03AF9F44 BL 0x1C16CF4
	0x03AF9F48 ADRP X0, 0x65F000
	0x03AF9F4C LDR X0, [X0 + 0x338]
	0x03AF9F50 BL 0x1C16CF4
	0x03AF9F54 MOVZ W8, 0x1
	0x03AF9F58 STRB W8, [X21 + 0x641]
	0x03AF9F5C LDR X0, [X22]
	0x03AF9F60 LDR W8, [X0 + 0xE0]
	0x03AF9F64 CBNZ W8, 0x3AF9F6C
	0x03AF9F68 BL 0x1C16DFC
	0x03AF9F6C MOV X0, X20
	0x03AF9F70 MOV X1, X31
	0x03AF9F74 MOV X2, X31
	0x03AF9F78 BL 0x3C3883C
	0x03AF9F7C FMOV S0, W31
	0x03AF9F80 TBNZ X0, 0x0, 0x3AFA000
	0x03AF9F84 ADRP X21, 0x65F000
	0x03AF9F88 LDR X21, [X21 + 0x338]
	0x03AF9F8C LDRB W22, [X19 + 0x300]
	0x03AF9F90 LDRB W23, [X19 + 0x26A]
	0x03AF9F94 LDR X0, [X21]
	0x03AF9F98 LDR W8, [X0 + 0xE0]
	0x03AF9F9C CBNZ W8, 0x3AF9FA4
	0x03AF9FA0 BL 0x1C16DFC
	0x03AF9FA4 CMP W23, 0x0
	0x03AF9FA8 CSET W2, NE
	0x03AF9FAC CMP W22, 0x0
	0x03AF9FB0 CSET W1, NE
	0x03AF9FB4 MOV X0, X20
	0x03AF9FB8 MOV X3, X31
	0x03AF9FBC BL 0x3B15054
	0x03AF9FC0 LDR X0, [X19 + 0x110]
	0x03AF9FC4 MOV X1, X31
	0x03AF9FC8 STR S0, [X19 + 0x618]
	0x03AF9FCC BL 0x3B14EB8
	0x03AF9FD0 AND W8, W0, 0x1
	0x03AF9FD4 STRB W8, [X19 + 0x307]
	0x03AF9FD8 CBZ X20, 0x3AFA010

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X22, 0x8EA000
	008 Move X21, 0x5FB000
	009 Move X19, X8
	010 Move W8, [X22+1589]
	011 Move X21, [X21+1432]
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x5FB000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+1589], W8
	022 Move X0, [X21]
	023 Move X21, [X20+928]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {39}
	036 Move [X19], X31
	037 Move [X19+8], X31
	038 Move [X19+16], X31
	039 Move X8, [X20]
	040 Move X0, X20
	041 Move X9, [X8+2168]
	042 Move X1, [X8+2176]
	043 Add X8, X31, 8
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move X8, [X31+24]
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 Move [X19+16], X8
	048 Move [X19], V0
	049 Move X20, [X31+64]
	050 Move X19, [X31+72]
	051 Move X22, [X31+48]
	052 Move X21, [X31+56]
	053 Move X30, [X31+32]
	054 Add X31, X31, 80
	055 Return X0

Method: UnityEngine.Bounds get_textBounds()

Disassembly:
	0x03AF9FDC LDR X8, [X21]
	0x03AF9FE0 MOV X0, X20
	0x03AF9FE4 MOV X2, X31
	0x03AF9FE8 LDR X8, [X8 + 0xB8]
	0x03AF9FEC LDR W1, [X8 + 0x30]
	0x03AF9FF0 BL 0x3C14D08
	0x03AF9FF4 LDR V0, [X19 + 0x618]
	0x03AF9FF8 AND W8, W0, 0x1
	0x03AF9FFC STRB W8, [X19 + 0x108]
	0x03AFA000 LDP X20, X19, [X31 + 0x20]
	0x03AFA004 LDP X22, X21, [X31 + 0x10]
	0x03AFA008 LDP X30, X23, [X31], #0x30
	0x03AFA00C RET
	0x03AFA010 BL 0x1C16F20
	0x03AFA014 MOV X0, X31
	0x03AFA018 RET
	0x03AFA01C RET

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move X9, [X0+872]
	005 Move X19, X8
	006 Compare X9, 0
	007 JumpIfEqual {14}
	008 Add X8, X31, 8
	009 Call TMP_Text.GetTextBounds, X0
	010 Move X8, [X31+24]
	011 NotImplemented "Instruction LDUR not yet implemented."
	012 Move [X19+16], X8
	013 Move [X19], V0
	014 Move [X19], X31
	015 Move [X19+8], X31
	016 Move [X19+16], X31
	017 Move X30, [X31+32]
	018 Move X19, [X31+40]
	019 Add X31, X31, 48
	020 Return X0

Method: System.Void add_OnFontAssetRequest(System.Func`3<System.Int32, System.String, TMPro.TMP_FontAsset> value)

Disassembly:
	0x03AFA1CC ADD X0, X8, 0x138
	0x03AFA1D0 LDP X8, X2, [X0]
	0x03AFA1D4 MOV X0, X22
	0x03AFA1D8 MOV X1, X21
	0x03AFA1DC BLR X8
	0x03AFA1E0 CBZ X20, 0x3AFA22C
	0x03AFA1E4 MOV X21, X0
	0x03AFA1E8 CBZ X21, 0x3AFA1BC
	0x03AFA1EC LDR W3, [X21 + 0x10]
	0x03AFA1F0 MOV X0, X20
	0x03AFA1F4 MOV X1, X21
	0x03AFA1F8 MOV W2, W31
	0x03AFA1FC BL 0x3AFACB8
	0x03AFA200 MOV X0, X19
	0x03AFA204 BL 0x3AFA248
	0x03AFA208 LDR X8, [X19]
	0x03AFA20C LDR X1, [X19 + 0x478]
	0x03AFA210 MOV X0, X19
	0x03AFA214 LDP X20, X19, [X31 + 0x20]
	0x03AFA218 LDR X3, [X8 + 0x858]
	0x03AFA21C LDR X2, [X8 + 0x860]
	0x03AFA220 LDP X22, X21, [X31 + 0x10]
	0x03AFA224 LDR X30, [X31], #0x30
	0x03AFA228 BR X3
	0x03AFA22C BL 0x1C16F20
	0x03AFA230 CBZ X1, 0x3AFA23C
	0x03AFA234 LDR W3, [X1 + 0x10]
	0x03AFA238 B 0x3AFA240
	0x03AFA23C MOV W3, W31
	0x03AFA240 MOV W2, W31
	0x03AFA244 B 0x3AFACB8
	0x03AFA248 SUB X31, X31, 0x70
	0x03AFA24C STP X29, X30, [X31 + 0x10]
	0x03AFA250 STP X28, X27, [X31 + 0x20]
	0x03AFA254 STP X26, X25, [X31 + 0x30]
	0x03AFA258 STP X24, X23, [X31 + 0x40]
	0x03AFA25C STP X22, X21, [X31 + 0x50]
	0x03AFA260 STP X20, X19, [X31 + 0x60]
	0x03AFA264 ADRP X20, 0x8E8000
	0x03AFA268 LDRB W8, [X20 + 0x643]
	0x03AFA26C MOV X19, X0
	0x03AFA270 TBNZ X8, 0x0, 0x3AFA2AC
	0x03AFA274 ADRP X0, 0x65F000
	0x03AFA278 LDR X0, [X0 + 0x1F0]
	0x03AFA27C BL 0x1C16CF4
	0x03AFA280 ADRP X0, 0x65F000
	0x03AFA284 LDR X0, [X0 + 0x1F8]
	0x03AFA288 BL 0x1C16CF4
	0x03AFA28C ADRP X0, 0x65F000
	0x03AFA290 LDR X0, [X0 + 0x200]
	0x03AFA294 BL 0x1C16CF4
	0x03AFA298 ADRP X0, 0x65F000
	0x03AFA29C LDR X0, [X0 + 0x208]
	0x03AFA2A0 BL 0x1C16CF4
	0x03AFA2A4 MOVZ W8, 0x1
	0x03AFA2A8 STRB W8, [X20 + 0x643]
	0x03AFA2AC STR W31, [X31 + 0x8]
	0x03AFA2B0 LDR X8, [X19 + 0x478]
	0x03AFA2B4 CBZ X8, 0x3AFACB4
	0x03AFA2B8 LDR W21, [X19 + 0x6B8]
	0x03AFA2BC LDR W8, [X8 + 0x18]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x8E9000
	010 Move X24, 0x65F000
	011 Move W8, [X20+1590]
	012 Move X24, [X24+1000]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x660000
	019 Move X0, [X0+440]
	020 Call 0x1C17CF4
	021 Move X0, 0x65F000
	022 Move X0, [X0+1000]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+1590], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x660000
	034 Move X20, [X8+112]
	035 Move X25, [X25+440]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Combine, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X8, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Add X0, X8, 112
	060 Call 0x1C25138
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, X0
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return 
	072 Move X0, X22
	073 Move X1, X23
	074 Call 0x1C181E0

Method: System.Void remove_OnFontAssetRequest(System.Func`3<System.Int32, System.String, TMPro.TMP_FontAsset> value)

Disassembly:
	0x03AFA2C0 ADRP X22, 0x65F000
	0x03AFA2C4 LDR X22, [X22 + 0x1F8]
	0x03AFA2C8 ADD X20, X19, 0x478
	0x03AFA2CC CMP W21, W8
	0x03AFA2D0 B.LE 0x3AFA2F0
	0x03AFA2D4 ADRP X8, 0x65F000
	0x03AFA2D8 LDR X8, [X8 + 0x208]
	0x03AFA2DC MOV X0, X19
	0x03AFA2E0 MOV X1, X20
	0x03AFA2E4 MOV W2, W21
	0x03AFA2E8 LDR X3, [X8]
	0x03AFA2EC BL 0x2299010
	0x03AFA2F0 LDR X0, [X19 + 0x5C0]
	0x03AFA2F4 LDR X2, [X22]
	0x03AFA2F8 MOV W1, W31
	0x03AFA2FC BL 0x2671B6C
	0x03AFA300 MOV X0, X19
	0x03AFA304 STR W31, [X19 + 0x5C8]
	0x03AFA308 STR W31, [X31 + 0xC]
	0x03AFA30C BL 0x3AF7780
	0x03AFA310 CBZ X0, 0x3AFACB4
	0x03AFA314 LDR W8, [X0 + 0x18]
	0x03AFA318 MOVZ W9, 0x50F3
	0x03AFA31C MOVK W9, 0xB9750000
	0x03AFA320 CMP W8, W9
	0x03AFA324 B.EQ 0x3AFA33C
	0x03AFA328 LDR X1, [X19 + 0x1C8]
	0x03AFA32C ADD X4, X31, 0xC
	0x03AFA330 MOV X0, X19
	0x03AFA334 MOV X3, X20
	0x03AFA338 BL 0x3AFAFEC
	0x03AFA33C ADRP X29, 0x65F000
	0x03AFA340 LDR X29, [X29 + 0x200]
	0x03AFA344 SUBS W27, W21, 0x1
	0x03AFA348 B.LT 0x3AFAC0C
	0x03AFA34C MOV W23, W31
	0x03AFA350 ADD X22, X19, 0x6B0
	0x03AFA354 MOVZ W28, 0xC
	0x03AFA358 MOV X0, X22
	0x03AFA35C MOV W1, W23
	0x03AFA360 MOV X2, X31
	0x03AFA364 BL 0x3B1BBF0
	0x03AFA368 CBZ W0, 0x3AFAC0C
	0x03AFA36C MOV W26, W0
	0x03AFA370 CMP W0, 0x5C
	0x03AFA374 B.NE 0x3AFA410
	0x03AFA378 LDR W8, [X19 + 0x400]
	0x03AFA37C CBNZ W8, 0x3AFA410
	0x03AFA380 CMP W23, W27
	0x03AFA384 B.GE 0x3AFAB74
	0x03AFA388 ADD W25, W23, 0x1
	0x03AFA38C MOV X0, X22
	0x03AFA390 MOV W1, W25
	0x03AFA394 MOV X2, X31
	0x03AFA398 BL 0x3B1BBF0
	0x03AFA39C SUB W8, W0, 0x6E
	0x03AFA3A0 CMP W8, 0x8
	0x03AFA3A4 B.HI 0x3AFA5F8
	0x03AFA3A8 ADRP X11, 0xFFFFFFFFFD09D000
	0x03AFA3AC ADD X11, X11, 0xC74
	0x03AFA3B0 ADR X9, 0x10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x8E9000
	010 Move X24, 0x65F000
	011 Move W8, [X20+1591]
	012 Move X24, [X24+1000]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x660000
	019 Move X0, [X0+440]
	020 Call 0x1C17CF4
	021 Move X0, 0x65F000
	022 Move X0, [X0+1000]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+1591], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x660000
	034 Move X20, [X8+112]
	035 Move X25, [X25+440]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Remove, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X8, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Add X0, X8, 112
	060 Call 0x1C25138
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, X0
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return 
	072 Move X0, X22
	073 Move X1, X23
	074 Call 0x1C181E0

Method: System.Void add_OnSpriteAssetRequest(System.Func`3<System.Int32, System.String, TMPro.TMP_SpriteAsset> value)

Disassembly:
	0x03AFA3B4 LDRH W10, [X11, X8, LSL #1]
	0x03AFA3B8 ADD X9, X9, X10, 0x2, LSL
	0x03AFA3BC BR X9
	0x03AFA3C0 LDRB W8, [X19 + 0x303]
	0x03AFA3C4 CBZ W8, 0x3AFAB74
	0x03AFA3C8 LDR X8, [X20]
	0x03AFA3CC CBZ X8, 0x3AFACB4
	0x03AFA3D0 LDRSW X24, [X31 + 0xC]
	0x03AFA3D4 LDR W9, [X8 + 0x18]
	0x03AFA3D8 CMP W24, W9
	0x03AFA3DC B.NE 0x3AFA3F8
	0x03AFA3E0 LDR X2, [X29]
	0x03AFA3E4 MOV X0, X19
	0x03AFA3E8 MOV X1, X20
	0x03AFA3EC BL 0x2298F68
	0x03AFA3F0 LDR X8, [X19 + 0x478]
	0x03AFA3F4 CBZ X8, 0x3AFACB4
	0x03AFA3F8 LDR W9, [X8 + 0x18]
	0x03AFA3FC CMP W24, W9
	0x03AFA400 B.CS 0x3AFACB0
	0x03AFA404 MADD X10, X24, X28, X8
	0x03AFA408 MOVZ W11, 0xA
	0x03AFA40C B 0x3AFA91C
	0x03AFA410 UBFM W8, W26, 0xA, 0x1F
	0x03AFA414 CMP W8, 0x36
	0x03AFA418 B.NE 0x3AFA534
	0x03AFA41C ADD W24, W23, 0x1
	0x03AFA420 CMP W21, W24
	0x03AFA424 B.LE 0x3AFAB74
	0x03AFA428 MOV X0, X22
	0x03AFA42C MOV W1, W24
	0x03AFA430 MOV X2, X31
	0x03AFA434 BL 0x3B1BBF0
	0x03AFA438 UBFM W8, W0, 0xA, 0x1F
	0x03AFA43C CMP W8, 0x37
	0x03AFA440 B.CC 0x3AFAB74
	0x03AFA444 MOV X0, X22
	0x03AFA448 MOV W1, W24
	0x03AFA44C MOV X2, X31
	0x03AFA450 BL 0x3B1BBF0
	0x03AFA454 UBFM W8, W0, 0xD, 0x1F
	0x03AFA458 CMP W8, 0x6
	0x03AFA45C B.HI 0x3AFAB74
	0x03AFA460 MOV X28, X29
	0x03AFA464 LDR X29, [X20]
	0x03AFA468 STR W27, [X31 + 0x4]
	0x03AFA46C CBZ X29, 0x3AFACB4
	0x03AFA470 LDRSW X27, [X31 + 0xC]
	0x03AFA474 LDR W8, [X29 + 0x18]
	0x03AFA478 CMP W27, W8
	0x03AFA47C B.NE 0x3AFA498
	0x03AFA480 LDR X2, [X28]
	0x03AFA484 MOV X0, X19
	0x03AFA488 MOV X1, X20
	0x03AFA48C BL 0x2298F68
	0x03AFA490 LDR X29, [X19 + 0x478]
	0x03AFA494 CBZ X29, 0x3AFACB4
	0x03AFA498 MOV X0, X22
	0x03AFA49C MOV W1, W24
	0x03AFA4A0 MOV X2, X31
	0x03AFA4A4 BL 0x3B1BBF0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x8E9000
	010 Move X24, 0x65F000
	011 Move W8, [X20+1592]
	012 Move X24, [X24+1000]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x660000
	019 Move X0, [X0+448]
	020 Call 0x1C17CF4
	021 Move X0, 0x65F000
	022 Move X0, [X0+1000]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+1592], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x660000
	034 Move X20, [X8+120]
	035 Move X25, [X25+448]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Combine, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X8, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Add X0, X8, 120
	060 Call 0x1C25138
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, X0
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return 
	072 Move X0, X22
	073 Move X1, X23
	074 Call 0x1C181E0

Method: System.Void remove_OnSpriteAssetRequest(System.Func`3<System.Int32, System.String, TMPro.TMP_SpriteAsset> value)

Disassembly:
	0x03AFA4A8 ADRP X8, 0x65F000
	0x03AFA4AC LDR X8, [X8 + 0x1F0]
	0x03AFA4B0 MOV W25, W0
	0x03AFA4B4 LDR X8, [X8]
	0x03AFA4B8 LDR W9, [X8 + 0xE0]
	0x03AFA4BC CBNZ W9, 0x3AFA4C8
	0x03AFA4C0 MOV X0, X8
	0x03AFA4C4 BL 0x1C16DFC
	0x03AFA4C8 MOV W0, W26
	0x03AFA4CC MOV W1, W25
	0x03AFA4D0 MOV X2, X31
	0x03AFA4D4 BL 0x3B1CF18
	0x03AFA4D8 LDR W8, [X29 + 0x18]
	0x03AFA4DC CMP W27, W8
	0x03AFA4E0 B.CS 0x3AFACB0
	0x03AFA4E4 MOVZ W8, 0xC
	0x03AFA4E8 MADD X8, X27, X8, X29
	0x03AFA4EC STR W0, [X8 + 0x20]
	0x03AFA4F0 LDR X8, [X20]
	0x03AFA4F4 CBZ X8, 0x3AFACB4
	0x03AFA4F8 LDRSW X10, [X31 + 0xC]
	0x03AFA4FC LDR W9, [X8 + 0x18]
	0x03AFA500 LDR W27, [X31 + 0x4]
	0x03AFA504 CMP W10, W9
	0x03AFA508 B.CS 0x3AFACB0
	0x03AFA50C MOV X29, X28
	0x03AFA510 MOVZ W28, 0xC
	0x03AFA514 MADD X10, X10, X28, X8
	0x03AFA518 STR W23, [X10 + 0x24]
	0x03AFA51C LDRSW X10, [X31 + 0xC]
	0x03AFA520 CMP W10, W9
	0x03AFA524 B.CS 0x3AFACB0
	0x03AFA528 MADD X8, X10, X28, X8
	0x03AFA52C MOVZ W9, 0x2
	0x03AFA530 B 0x3AFA9F0
	0x03AFA534 CMP W26, 0x3C
	0x03AFA538 B.NE 0x3AFAB74
	0x03AFA53C LDRB W8, [X19 + 0x302]
	0x03AFA540 CBZ W8, 0x3AFAB74
	0x03AFA544 LDR X1, [X19 + 0x6B0]
	0x03AFA548 LDR X2, [X19 + 0x6B8]
	0x03AFA54C ADD W3, W23, 0x1
	0x03AFA550 BL 0x3AFB594
	0x03AFA554 MOVZ W8, 0xC72F
	0x03AFA558 MOVK W8, 0x2B0000
	0x03AFA55C CMP W0, W8
	0x03AFA560 B.LE 0x3AFA734
	0x03AFA564 MOVZ W8, 0x2CAE
	0x03AFA568 MOVK W8, 0x320000
	0x03AFA56C CMP W0, W8
	0x03AFA570 B.EQ 0x3AFAA7C
	0x03AFA574 MOVZ W8, 0xBD17
	0x03AFA578 MOVK W8, 0x5F90000
	0x03AFA57C CMP W0, W8
	0x03AFA580 B.EQ 0x3AFAAFC
	0x03AFA584 MOVZ W8, 0xF418
	0x03AFA588 MOVK W8, 0x72E60000
	0x03AFA58C CMP W0, W8
	0x03AFA590 B.NE 0x3AFAB74
	0x03AFA594 LDRSW X24, [X31 + 0xC]
	0x03AFA598 ADD X4, X31, 0xC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x8E9000
	010 Move X24, 0x65F000
	011 Move W8, [X20+1593]
	012 Move X24, [X24+1000]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x660000
	019 Move X0, [X0+448]
	020 Call 0x1C17CF4
	021 Move X0, 0x65F000
	022 Move X0, [X0+1000]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+1593], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X25, 0x660000
	034 Move X20, [X8+120]
	035 Move X25, [X25+448]
	036 Move X0, X20
	037 Move X1, X19
	038 Move X2, X31
	039 Call Delegate.Remove, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move X23, [X25]
	043 Move X22, X0
	044 Move X1, X23
	045 Call 0x1C17E00
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {50}
	049 Move X21, X31
	050 Move X0, [X24]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X24]
	056 Move X8, [X0+184]
	057 Move X1, X21
	058 Move X2, X20
	059 Add X0, X8, 120
	060 Call 0x1C25138
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, X0
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return 
	072 Move X0, X22
	073 Move X1, X23
	074 Call 0x1C181E0

Method: System.Void add_OnPreRenderText(System.Action`1<TMPro.TMP_TextInfo> value)

Disassembly:
	0x03AFA59C MOV X0, X19
	0x03AFA5A0 MOV X3, X20
	0x03AFA5A4 BL 0x3AFBABC
	0x03AFA5A8 LDR W8, [X31 + 0xC]
	0x03AFA5AC MOVZ W11, 0x8
	0x03AFA5B0 CMP W24, W8
	0x03AFA5B4 B.GE 0x3AFA5F0
	0x03AFA5B8 LDR X9, [X20]
	0x03AFA5BC CBZ X9, 0x3AFACB4
	0x03AFA5C0 LDR W8, [X9 + 0x18]
	0x03AFA5C4 NOP
	0x03AFA5C8 MADD X9, X24, X28, X9
	0x03AFA5CC ADD X9, X9, 0x28
	0x03AFA5D0 CMP W24, W8
	0x03AFA5D4 B.CS 0x3AFACB0
	0x03AFA5D8 STP W23, W11, [X9 - 0x4]
	0x03AFA5DC LDRSW X10, [X31 + 0xC]
	0x03AFA5E0 ADD X24, X24, 0x1
	0x03AFA5E4 ADD X9, X9, 0xC
	0x03AFA5E8 CMP X24, X10
	0x03AFA5EC B.LT 0x3AFA5D0
	0x03AFA5F0 ADD W24, W23, 0x7
	0x03AFA5F4 B 0x3AFABF4
	0x03AFA5F8 CMP W0, 0x55
	0x03AFA5FC B.EQ 0x3AFA958
	0x03AFA600 CMP W0, 0x5C
	0x03AFA604 B.NE 0x3AFAB74
	0x03AFA608 LDRB W8, [X19 + 0x303]
	0x03AFA60C CBZ W8, 0x3AFAB74
	0x03AFA610 ADD W24, W23, 0x2
	0x03AFA614 CMP W21, W24
	0x03AFA618 B.LE 0x3AFAB74
	0x03AFA61C MOV W28, W27
	0x03AFA620 LDR X27, [X20]
	0x03AFA624 CBZ X27, 0x3AFACB4
	0x03AFA628 LDRSW X26, [X31 + 0xC]
	0x03AFA62C LDR W8, [X27 + 0x18]
	0x03AFA630 ADD W9, W26, 0x2
	0x03AFA634 CMP W9, W8
	0x03AFA638 B.LE 0x3AFA654
	0x03AFA63C LDR X2, [X29]
	0x03AFA640 MOV X0, X19
	0x03AFA644 MOV X1, X20
	0x03AFA648 BL 0x2298F68
	0x03AFA64C LDR X27, [X19 + 0x478]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x8E9000
	009 Move W8, [X21+1594]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x65F000
	017 Move X0, [X0+1424]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1594], W8
	021 Move X24, 0x65F000
	022 Move X21, [X20+944]
	023 Move X24, [X24+1424]
	024 Add X20, X20, 944
	025 Move X0, X21
	026 Move X1, X19
	027 Move X2, X31
	028 Call Delegate.Combine, X0, X1
	029 Compare X0, 0
	030 JumpIfEqual {38}
	031 Move X23, [X24]
	032 Move X22, X0
	033 Move X1, X23
	034 Call 0x1C17E00
	035 Move X1, X0
	036 Compare X0, 0
	037 JumpIfNotEqual {39}
	038 Move X1, X31
	039 Move X0, X20
	040 Move X2, X21
	041 Call 0x1C25138
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X21, X0
	044 Move X20, [X31+48]
	045 Move X19, [X31+56]
	046 Move X22, [X31+32]
	047 Move X21, [X31+40]
	048 Move X24, [X31+16]
	049 Move X23, [X31+24]
	050 Move X30, [X31+64]
	051 Return 
	052 Move X0, X22
	053 Move X1, X23
	054 Call 0x1C181E0

Method: System.Void remove_OnPreRenderText(System.Action`1<TMPro.TMP_TextInfo> value)

Disassembly:
	0x03AFA650 CBZ X27, 0x3AFACB4
	0x03AFA654 MOV X0, X22
	0x03AFA658 MOV W1, W25
	0x03AFA65C MOV X2, X31
	0x03AFA660 BL 0x3B1BBF0
	0x03AFA664 LDR W8, [X27 + 0x18]
	0x03AFA668 CMP W26, W8
	0x03AFA66C B.CS 0x3AFACB0
	0x03AFA670 MOVZ W8, 0xC
	0x03AFA674 MADD X8, X26, X8, X27
	0x03AFA678 STR W0, [X8 + 0x20]
	0x03AFA67C LDR X25, [X20]
	0x03AFA680 CBZ X25, 0x3AFACB4
	0x03AFA684 LDRSW X9, [X31 + 0xC]
	0x03AFA688 LDR W8, [X25 + 0x18]
	0x03AFA68C CMP W9, W8
	0x03AFA690 B.CS 0x3AFACB0
	0x03AFA694 MOV W27, W28
	0x03AFA698 MOVZ W28, 0xC
	0x03AFA69C MADD X9, X9, X28, X25
	0x03AFA6A0 STR W23, [X9 + 0x24]
	0x03AFA6A4 LDRSW X9, [X31 + 0xC]
	0x03AFA6A8 CMP W9, W8
	0x03AFA6AC B.CS 0x3AFACB0
	0x03AFA6B0 MADD X8, X9, X28, X25
	0x03AFA6B4 MOVZ W9, 0x1
	0x03AFA6B8 STR W9, [X8 + 0x28]
	0x03AFA6BC LDR W26, [X31 + 0xC]
	0x03AFA6C0 MOV X0, X22
	0x03AFA6C4 MOV W1, W24
	0x03AFA6C8 MOV X2, X31
	0x03AFA6CC BL 0x3B1BBF0
	0x03AFA6D0 LDR W9, [X25 + 0x18]
	0x03AFA6D4 ADD W8, W26, 0x1
	0x03AFA6D8 CMP W8, W9
	0x03AFA6DC B.CS 0x3AFACB0
	0x03AFA6E0 SMADDL X8, X8, X28, X25
	0x03AFA6E4 STR W0, [X8 + 0x20]
	0x03AFA6E8 LDR X8, [X20]
	0x03AFA6EC CBZ X8, 0x3AFACB4
	0x03AFA6F0 LDR W10, [X31 + 0xC]
	0x03AFA6F4 LDR W9, [X8 + 0x18]
	0x03AFA6F8 ADD W10, W10, 0x1
	0x03AFA6FC CMP W10, W9
	0x03AFA700 B.CS 0x3AFACB0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x8E9000
	009 Move W8, [X21+1595]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x65F000
	017 Move X0, [X0+1424]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1595], W8
	021 Move X24, 0x65F000
	022 Move X21, [X20+944]
	023 Move X24, [X24+1424]
	024 Add X20, X20, 944
	025 Move X0, X21
	026 Move X1, X19
	027 Move X2, X31
	028 Call Delegate.Remove, X0, X1
	029 Compare X0, 0
	030 JumpIfEqual {38}
	031 Move X23, [X24]
	032 Move X22, X0
	033 Move X1, X23
	034 Call 0x1C17E00
	035 Move X1, X0
	036 Compare X0, 0
	037 JumpIfNotEqual {39}
	038 Move X1, X31
	039 Move X0, X20
	040 Move X2, X21
	041 Call 0x1C25138
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X21, X0
	044 Move X20, [X31+48]
	045 Move X19, [X31+56]
	046 Move X22, [X31+32]
	047 Move X21, [X31+40]
	048 Move X24, [X31+16]
	049 Move X23, [X31+24]
	050 Move X30, [X31+64]
	051 Return 
	052 Move X0, X22
	053 Move X1, X23
	054 Call 0x1C181E0

Method: TMPro.TMP_SpriteAnimator get_spriteAnimator()

Disassembly:
	0x03AFA704 SMADDL X10, X10, X28, X8
	0x03AFA708 STR W23, [X10 + 0x24]
	0x03AFA70C LDR W10, [X31 + 0xC]
	0x03AFA710 ADD W10, W10, 0x1
	0x03AFA714 CMP W10, W9
	0x03AFA718 B.CS 0x3AFACB0
	0x03AFA71C SMADDL X8, X10, X28, X8
	0x03AFA720 MOVZ W9, 0x1
	0x03AFA724 STR W9, [X8 + 0x28]
	0x03AFA728 LDR W8, [X31 + 0xC]
	0x03AFA72C ADD W8, W8, 0x2
	0x03AFA730 B 0x3AFABF0
	0x03AFA734 CMP W0, 0x8D0
	0x03AFA738 B.EQ 0x3AFA9FC
	0x03AFA73C MOVZ W8, 0xC72F
	0x03AFA740 MOVK W8, 0x2B0000
	0x03AFA744 CMP W0, W8
	0x03AFA748 B.NE 0x3AFAB74
	0x03AFA74C LDR X8, [X20]
	0x03AFA750 CBZ X8, 0x3AFACB4
	0x03AFA754 LDRSW X24, [X31 + 0xC]
	0x03AFA758 LDR W9, [X8 + 0x18]
	0x03AFA75C CMP W24, W9
	0x03AFA760 B.NE 0x3AFA77C
	0x03AFA764 LDR X2, [X29]
	0x03AFA768 MOV X0, X19
	0x03AFA76C MOV X1, X20
	0x03AFA770 BL 0x2298F68
	0x03AFA774 LDR X8, [X19 + 0x478]
	0x03AFA778 CBZ X8, 0x3AFACB4
	0x03AFA77C LDR W9, [X8 + 0x18]
	0x03AFA780 CMP W24, W9
	0x03AFA784 B.CS 0x3AFACB0
	0x03AFA788 MADD X10, X24, X28, X8
	0x03AFA78C MOVZ W11, 0xA0
	0x03AFA790 B 0x3AFAAC0
	0x03AFA794 LDRB W8, [X19 + 0x303]
	0x03AFA798 CBZ W8, 0x3AFAB74
	0x03AFA79C LDR X8, [X20]
	0x03AFA7A0 CBZ X8, 0x3AFACB4
	0x03AFA7A4 LDRSW X24, [X31 + 0xC]
	0x03AFA7A8 LDR W9, [X8 + 0x18]
	0x03AFA7AC CMP W24, W9
	0x03AFA7B0 B.NE 0x3AFA7CC
	0x03AFA7B4 LDR X2, [X29]
	0x03AFA7B8 MOV X0, X19
	0x03AFA7BC MOV X1, X20
	0x03AFA7C0 BL 0x2298F68
	0x03AFA7C4 LDR X8, [X19 + 0x478]
	0x03AFA7C8 CBZ X8, 0x3AFACB4
	0x03AFA7CC LDR W9, [X8 + 0x18]
	0x03AFA7D0 CMP W24, W9
	0x03AFA7D4 B.CS 0x3AFACB0
	0x03AFA7D8 MADD X10, X24, X28, X8
	0x03AFA7DC MOVZ W11, 0xD
	0x03AFA7E0 B 0x3AFA91C
	0x03AFA7E4 LDRB W8, [X19 + 0x303]
	0x03AFA7E8 CBZ W8, 0x3AFAB74
	0x03AFA7EC LDR X8, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8E9000
	006 Move X21, 0x5FA000
	007 Move W8, [X20+1596]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x660000
	015 Move X0, [X0+456]
	016 Call 0x1C17CF4
	017 Move X0, 0x660000
	018 Move X0, [X0+464]
	019 Call 0x1C17CF4
	020 Move X0, 0x5FA000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+1596], W8
	025 Move X0, [X21]
	026 Move X20, [X19+952]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {69}
	039 Move X8, 0x660000
	040 Move X8, [X8+456]
	041 Move X0, X19
	042 Move X1, [X8]
	043 Call 0x21A4894, X0
	044 Move [X19+952], X0
	045 Move X20, X0
	046 Move X0, [X21]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, X20
	052 Move X1, X31
	053 Move X2, X31
	054 Call Object.op_Equality, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {69}
	059 Move X0, X19
	060 Move X1, X31
	061 Call Component.get_gameObject, X0
	062 Compare X0, 0
	063 JumpIfEqual {75}
	064 Move X8, 0x660000
	065 Move X8, [X8+464]
	066 Move X1, [X8]
	067 Call 0x21E61FC, X0
	068 Move [X19+952], X0
	069 Move X0, [X19+952]
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X30, [X31+32]
	073 Move X21, [X31+40]
	074 Return X0
	075 Call 0x1C17F20

Method: System.Single get_flexibleHeight()

Disassembly:
	0x03AFA7F0 CBZ X8, 0x3AFACB4
	0x03AFA7F4 LDRSW X24, [X31 + 0xC]

ISIL:
	001 Move V0, [X0+960]
	002 Return V0

Method: System.Single get_flexibleWidth()

Disassembly:
	0x03AFA7F8 LDR W9, [X8 + 0x18]
	0x03AFA7FC CMP W24, W9

ISIL:
	001 Move V0, [X0+964]
	002 Return V0

Method: System.Single get_minWidth()

Disassembly:
	0x03AFA800 B.NE 0x3AFA81C
	0x03AFA804 LDR X2, [X29]

ISIL:
	001 Move V0, [X0+968]
	002 Return V0

Method: System.Single get_minHeight()

Disassembly:
	0x03AFA808 MOV X0, X19
	0x03AFA80C MOV X1, X20

ISIL:
	001 Move V0, [X0+972]
	002 Return V0

Method: System.Single get_maxWidth()

Disassembly:
	0x03AFA810 BL 0x2298F68
	0x03AFA814 LDR X8, [X19 + 0x478]

ISIL:
	001 Move V0, [X0+976]
	002 Return V0

Method: System.Single get_maxHeight()

Disassembly:
	0x03AFA818 CBZ X8, 0x3AFACB4
	0x03AFA81C LDR W9, [X8 + 0x18]

ISIL:
	001 Move V0, [X0+980]
	002 Return V0

Method: UnityEngine.UI.LayoutElement get_layoutElement()

Disassembly:
	0x03AFA820 CMP W24, W9
	0x03AFA824 B.CS 0x3AFACB0
	0x03AFA828 MADD X10, X24, X28, X8
	0x03AFA82C MOVZ W11, 0x9
	0x03AFA830 B 0x3AFA91C
	0x03AFA834 ADD W24, W23, 0x5
	0x03AFA838 CMP W21, W24
	0x03AFA83C B.LE 0x3AFAB74
	0x03AFA840 LDR X26, [X20]
	0x03AFA844 CBZ X26, 0x3AFACB4
	0x03AFA848 LDRSW X25, [X31 + 0xC]
	0x03AFA84C LDR W8, [X26 + 0x18]
	0x03AFA850 CMP W25, W8
	0x03AFA854 B.NE 0x3AFA870
	0x03AFA858 LDR X2, [X29]
	0x03AFA85C MOV X0, X19
	0x03AFA860 MOV X1, X20
	0x03AFA864 BL 0x2298F68
	0x03AFA868 LDR X26, [X19 + 0x478]
	0x03AFA86C CBZ X26, 0x3AFACB4
	0x03AFA870 LDR X1, [X19 + 0x6B0]
	0x03AFA874 LDR X2, [X19 + 0x6B8]
	0x03AFA878 ADD W3, W23, 0x2
	0x03AFA87C MOV X0, X19
	0x03AFA880 BL 0x3AFB3B4
	0x03AFA884 LDR W8, [X26 + 0x18]
	0x03AFA888 CMP W25, W8
	0x03AFA88C B.CS 0x3AFACB0
	0x03AFA890 MADD X8, X25, X28, X26
	0x03AFA894 STR W0, [X8 + 0x20]
	0x03AFA898 LDR X8, [X20]
	0x03AFA89C CBZ X8, 0x3AFACB4
	0x03AFA8A0 LDRSW X10, [X31 + 0xC]
	0x03AFA8A4 LDR W9, [X8 + 0x18]
	0x03AFA8A8 CMP W10, W9
	0x03AFA8AC B.CS 0x3AFACB0
	0x03AFA8B0 MADD X10, X10, X28, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8E9000
	006 Move X20, 0x5FA000
	007 Move W8, [X21+1597]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x660000
	015 Move X0, [X0+472]
	016 Call 0x1C17CF4
	017 Move X0, 0x5FA000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1597], W8
	022 Move X0, [X20]
	023 Move X20, [X19+984]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {42}
	036 Move X8, 0x660000
	037 Move X8, [X8+472]
	038 Move X0, X19
	039 Move X1, [X8]
	040 Call 0x21A4894, X0
	041 Move [X19+984], X0
	042 Move X0, [X19+984]
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0

Method: System.Single get_preferredWidth()

Disassembly:
	0x03AFA8B4 STR W23, [X10 + 0x24]
	0x03AFA8B8 LDRSW X10, [X31 + 0xC]
	0x03AFA8BC CMP W10, W9
	0x03AFA8C0 B.CS 0x3AFACB0
	0x03AFA8C4 MADD X8, X10, X28, X8
	0x03AFA8C8 MOVZ W9, 0x6

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call TMP_Text.GetPreferredWidth, X0
	005 Move [X19+992], S0
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return V0

Method: System.Single get_preferredHeight()

Disassembly:
	0x03AFAA08 LDR W9, [X8 + 0x18]
	0x03AFAA0C CMP W24, W9
	0x03AFAA10 B.NE 0x3AFAA2C
	0x03AFAA14 LDR X2, [X29]
	0x03AFAA18 MOV X0, X19
	0x03AFAA1C MOV X1, X20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call TMP_Text.GetPreferredHeight, X0
	005 Move [X19+1004], S0
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return V0

Method: System.Single get_renderedWidth()

Disassembly:
	0x03AFAB98 BL 0x2298F68
	0x03AFAB9C LDR X8, [X19 + 0x478]
	0x03AFABA0 CBZ X8, 0x3AFACB4
	0x03AFABA4 LDR W9, [X8 + 0x18]
	0x03AFABA8 CMP W24, W9
	0x03AFABAC B.CS 0x3AFACB0
	0x03AFABB0 MADD X10, X24, X28, X8
	0x03AFABB4 STR W26, [X10 + 0x20]
	0x03AFABB8 LDRSW X10, [X31 + 0xC]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Add X8, X31, 8
	004 Call TMP_Text.GetTextBounds, X0
	005 Move V0, [X31+20]
	006 Move X30, [X31+32]
	007 Add S0, S0, S0
	008 Add X31, X31, 48
	009 Return V0

Method: System.Single get_renderedHeight()

Disassembly:
	0x03AFABE0 STR W9, [X8 + 0x28]
	0x03AFABE4 LDR W8, [X31 + 0xC]
	0x03AFABE8 MOV W24, W23
	0x03AFABEC ADD W8, W8, 0x1
	0x03AFABF0 STR W8, [X31 + 0xC]
	0x03AFABF4 ADD W23, W24, 0x1
	0x03AFABF8 CMP W23, W21
	0x03AFABFC B.LT 0x3AFA358
	0x03AFAC00 B 0x3AFAC0C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Add X8, X31, 8
	004 Call TMP_Text.GetTextBounds, X0
	005 Move V0, [X31+24]
	006 Move X30, [X31+32]
	007 Add S0, S0, S0
	008 Add X31, X31, 48
	009 Return V0

Method: System.Int32 get_layoutPriority()

Disassembly:
	0x03AFAC28 CMP W8, W9
	0x03AFAC2C B.EQ 0x3AFAC40

ISIL:
	001 Move W0, [X0+1016]
	002 Return X0

Method: System.Void LoadFontAsset()

Disassembly:
	0x03AFAC30 ADD X2, X31, 0xC

ISIL:
	001 Return 

Method: System.Void SetSharedMaterial(UnityEngine.Material mat)

Disassembly:
	0x03AFAC34 MOV X0, X19

ISIL:
	001 Return 

Method: UnityEngine.Material GetMaterial(UnityEngine.Material mat)

Disassembly:
	0x03AFAC38 MOV X1, X20
	0x03AFAC3C BL 0x3AFBEA8

ISIL:
	001 Move X0, X31
	002 Return X0

Method: System.Void SetFontBaseMaterial(UnityEngine.Material mat)

Disassembly:
	0x03AFAC40 LDR X8, [X20]

ISIL:
	001 Return 

Method: UnityEngine.Material[] GetSharedMaterials()

Disassembly:
	0x03AFAC44 CBZ X8, 0x3AFACB4
	0x03AFAC48 LDRSW X21, [X31 + 0xC]

ISIL:
	001 Move X0, X31
	002 Return X0

Method: System.Void SetSharedMaterials(UnityEngine.Material[] materials)

Disassembly:
	0x03AFAC4C LDR W9, [X8 + 0x18]

ISIL:
	001 Return 

Method: UnityEngine.Material[] GetMaterials(UnityEngine.Material[] mats)

Disassembly:
	0x03AFAC50 CMP W21, W9
	0x03AFAC54 B.NE 0x3AFAC70

ISIL:
	001 Move X0, X31
	002 Return X0

Method: UnityEngine.Material CreateMaterialInstance(UnityEngine.Material source)

Disassembly:
	0x03AFAC58 LDR X2, [X29]
	0x03AFAC5C MOV X0, X19
	0x03AFAC60 MOV X1, X20
	0x03AFAC64 BL 0x2298F68
	0x03AFAC68 LDR X8, [X19 + 0x478]
	0x03AFAC6C CBZ X8, 0x3AFACB4
	0x03AFAC70 LDR W9, [X8 + 0x18]
	0x03AFAC74 CMP W21, W9
	0x03AFAC78 B.CS 0x3AFACB0
	0x03AFAC7C MOVZ W9, 0xC
	0x03AFAC80 MADD X8, X21, X9, X8
	0x03AFAC84 STR W31, [X8 + 0x20]
	0x03AFAC88 LDR W8, [X31 + 0xC]
	0x03AFAC8C LDP X22, X21, [X31 + 0x50]
	0x03AFAC90 LDP X24, X23, [X31 + 0x40]
	0x03AFAC94 LDP X26, X25, [X31 + 0x30]
	0x03AFAC98 STR W8, [X19 + 0x480]
	0x03AFAC9C LDP X20, X19, [X31 + 0x60]
	0x03AFACA0 LDP X28, X27, [X31 + 0x20]
	0x03AFACA4 LDP X29, X30, [X31 + 0x10]
	0x03AFACA8 ADD X31, X31, 0x70
	0x03AFACAC RET
	0x03AFACB0 BL 0x1C16F28
	0x03AFACB4 BL 0x1C16F20
	0x03AFACB8 STR X30, [X31 - 0x40]!
	0x03AFACBC STP X24, X23, [X31 + 0x10]
	0x03AFACC0 STP X22, X21, [X31 + 0x20]
	0x03AFACC4 STP X20, X19, [X31 + 0x30]
	0x03AFACC8 MOV X20, X1
	0x03AFACCC MOV X19, X0
	0x03AFACD0 CBZ X1, 0x3AFAD04
	0x03AFACD4 LDR W8, [X20 + 0x10]
	0x03AFACD8 ADD W9, W3, W2
	0x03AFACDC SUBS W10, W8, W2
	0x03AFACE0 CSEL W11, W8, W2, LT
	0x03AFACE4 CMP W2, 0x0
	0x03AFACE8 CSEL W24, W31, W11, LT
	0x03AFACEC CMP W9, W8
	0x03AFACF0 CSEL W8, W3, W10, LT
	0x03AFACF4 TBNZ X3, 0x1F, 0x3AFAD08
	0x03AFACF8 CMP W8, W3
	0x03AFACFC CSEL W21, W8, W3, LT
	0x03AFAD00 B 0x3AFAD0C
	0x03AFAD04 MOV W24, W31
	0x03AFAD08 MOV W21, W31
	0x03AFAD0C ADD X22, X19, 0x6B0
	0x03AFAD10 MOV X0, X22
	0x03AFAD14 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x8E9000
	006 Move X21, 0x5FE000
	007 Move W8, [X19+1598]
	008 Move X21, [X21+3232]
	009 Move X20, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5FE000
	015 Move X0, [X0+3232]
	016 Call 0x1C17CF4
	017 Move X0, 0x660000
	018 Move X0, [X0+480]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X19+1598], W8
	022 Move X0, [X21]
	023 Call 0x1C17F10
	024 Move X1, X20
	025 Move X2, X31
	026 Move X19, X0
	027 Call Material..ctor, X0, X1
	028 Compare X20, 0
	029 JumpIfEqual {57}
	030 Move X0, X20
	031 Move X1, X31
	032 Call Material.get_shaderKeywords, X0
	033 Compare X19, 0
	034 JumpIfEqual {57}
	035 Move X20, 0x660000
	036 Move X20, [X20+480]
	037 Move X1, X0
	038 Move X0, X19
	039 Move X2, X31
	040 Call Material.set_shaderKeywords, X0, X1
	041 Move X0, X19
	042 Move X1, X31
	043 Call Object.get_name, X0
	044 Move X1, [X20]
	045 Move X2, X31
	046 Call String.Concat, X0, X1
	047 Move X1, X0
	048 Move X0, X19
	049 Move X2, X31
	050 Call Object.set_name, X0, X1
	051 Move X0, X19
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return X0
	057 Call 0x1C17F20

Method: System.Void SetVertexColorGradient(TMPro.TMP_ColorGradient gradient)

Disassembly:
	0x03AFAD18 BL 0x3B1BBC4
	0x03AFAD1C CMP W21, W0
	0x03AFAD20 B.LT 0x3AFAD34
	0x03AFAD24 MOV X0, X22
	0x03AFAD28 MOV W1, W21
	0x03AFAD2C MOV X2, X31
	0x03AFAD30 BL 0x3B1BC80
	0x03AFAD34 ADD W8, W21, W24
	0x03AFAD38 CMP W24, W8
	0x03AFAD3C B.GE 0x3AFAD7C
	0x03AFAD40 CBZ X20, 0x3AFADAC
	0x03AFAD44 MOV W23, W31
	0x03AFAD48 ADD W1, W24, W23
	0x03AFAD4C MOV X0, X20
	0x03AFAD50 MOV X2, X31
	0x03AFAD54 BL 0x3222A1C
	0x03AFAD58 AND W2, W0, 0xFFFF
	0x03AFAD5C MOV X0, X22
	0x03AFAD60 MOV W1, W23
	0x03AFAD64 MOV X3, X31
	0x03AFAD68 BL 0x3B1BC20
	0x03AFAD6C ADD W23, W23, 0x1
	0x03AFAD70 CMP W21, W23
	0x03AFAD74 B.NE 0x3AFAD48
	0x03AFAD78 B 0x3AFAD80
	0x03AFAD7C MOV W21, W31
	0x03AFAD80 MOV X0, X22
	0x03AFAD84 MOV W1, W21
	0x03AFAD88 MOV W2, W31
	0x03AFAD8C MOV X3, X31
	0x03AFAD90 BL 0x3B1BC20
	0x03AFAD94 STR W21, [X19 + 0x6B8]
	0x03AFAD98 LDP X20, X19, [X31 + 0x30]
	0x03AFAD9C LDP X22, X21, [X31 + 0x20]
	0x03AFADA0 LDP X24, X23, [X31 + 0x10]
	0x03AFADA4 LDR X30, [X31], #0x40
	0x03AFADA8 RET
	0x03AFADAC BL 0x1C16F20
	0x03AFADB0 STR X30, [X31 - 0x40]!
	0x03AFADB4 STP X24, X23, [X31 + 0x10]
	0x03AFADB8 STP X22, X21, [X31 + 0x20]
	0x03AFADBC STP X20, X19, [X31 + 0x30]
	0x03AFADC0 MOV X20, X1
	0x03AFADC4 MOV X19, X0
	0x03AFADC8 CBZ X1, 0x3AFAE2C
	0x03AFADCC MOV X0, X20
	0x03AFADD0 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8E9000
	007 Move X22, 0x5FA000
	008 Move W8, [X21+1599]
	009 Move X22, [X22+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5FA000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1599], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Move X2, X31
	029 Call Object.op_Equality, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {40}
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Return 
	040 Compare X20, 0
	041 JumpIfEqual {61}
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 Add X8, X19, 360
	044 Move X0, X19
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move [X8+2], V0
	048 NotImplemented "Instruction LDUR not yet implemented."
	049 Move [X8+3], V0
	050 NotImplemented "Instruction LDUR not yet implemented."
	051 Move [X8], V0
	052 NotImplemented "Instruction LDUR not yet implemented."
	053 Move [X8+1], V0
	054 Move X8, [X19]
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X2, [X8+760]
	058 Move X1, [X8+768]
	059 Move X30, [X31+48]
	060 CallNoReturn X2
	061 Call 0x1C17F20

Method: System.Void SetTextSortingOrder(TMPro.VertexSortingOrder order)

Disassembly:
	0x03AFADD4 MOV W21, W3

ISIL:
	001 Return 

Method: System.Void SetTextSortingOrder(System.Int32[] order)

Disassembly:
	0x03AFADD8 MOV W22, W2

ISIL:
	001 Return 

Method: System.Void SetFaceColor(UnityEngine.Color32 color)

Disassembly:
	0x03AFADDC BL 0x323260C

ISIL:
	001 Return 

Method: System.Void SetOutlineColor(UnityEngine.Color32 color)

Disassembly:
	0x03AFADE0 CMP W0, W22

ISIL:
	001 Return 

Method: System.Void SetOutlineThickness(System.Single thickness)

Disassembly:
	0x03AFADE4 CSEL W8, W0, W22, LT

ISIL:
	001 Return 

Method: System.Void SetShaderDepth()

Disassembly:
	0x03AFADE8 CMP W22, 0x0

ISIL:
	001 Return 

Method: System.Void SetCulling()

Disassembly:
	0x03AFADEC MOV X0, X20

ISIL:
	001 Return 

Method: System.Void UpdateCulling()

Disassembly:
	0x03AFADF0 MOV X1, X31

ISIL:
	001 Return 

Method: System.Single GetPaddingForMaterial()

Disassembly:
	0x03AFADF4 CSEL W24, W31, W8, LT
	0x03AFADF8 BL 0x323260C
	0x03AFADFC ADD W8, W21, W22
	0x03AFAE00 CMP W8, W0
	0x03AFAE04 MOV W8, W21
	0x03AFAE08 B.LT 0x3AFAE1C
	0x03AFAE0C MOV X0, X20
	0x03AFAE10 MOV X1, X31
	0x03AFAE14 BL 0x323260C
	0x03AFAE18 SUB W8, W0, W22
	0x03AFAE1C TBNZ X21, 0x1F, 0x3AFAE30
	0x03AFAE20 CMP W8, W21
	0x03AFAE24 CSEL W21, W8, W21, LT
	0x03AFAE28 B 0x3AFAE34
	0x03AFAE2C MOV W24, W31
	0x03AFAE30 MOV W21, W31
	0x03AFAE34 ADD X22, X19, 0x6B0
	0x03AFAE38 MOV X0, X22
	0x03AFAE3C MOV X1, X31
	0x03AFAE40 BL 0x3B1BBC4
	0x03AFAE44 CMP W21, W0
	0x03AFAE48 B.LT 0x3AFAE5C
	0x03AFAE4C MOV X0, X22
	0x03AFAE50 MOV W1, W21
	0x03AFAE54 MOV X2, X31
	0x03AFAE58 BL 0x3B1BC80
	0x03AFAE5C ADD W8, W21, W24
	0x03AFAE60 CMP W24, W8
	0x03AFAE64 B.GE 0x3AFAEA4
	0x03AFAE68 CBZ X20, 0x3AFAED4
	0x03AFAE6C MOV W23, W31
	0x03AFAE70 ADD W1, W24, W23
	0x03AFAE74 MOV X0, X20
	0x03AFAE78 MOV X2, X31
	0x03AFAE7C BL 0x3232E88
	0x03AFAE80 AND W2, W0, 0xFFFF
	0x03AFAE84 MOV X0, X22
	0x03AFAE88 MOV W1, W23
	0x03AFAE8C MOV X3, X31
	0x03AFAE90 BL 0x3B1BC20
	0x03AFAE94 ADD W23, W23, 0x1
	0x03AFAE98 CMP W21, W23
	0x03AFAE9C B.NE 0x3AFAE70
	0x03AFAEA0 B 0x3AFAEA8
	0x03AFAEA4 MOV W21, W31
	0x03AFAEA8 MOV X0, X22
	0x03AFAEAC MOV W1, W21
	0x03AFAEB0 MOV W2, W31
	0x03AFAEB4 MOV X3, X31
	0x03AFAEB8 BL 0x3B1BC20
	0x03AFAEBC STR W21, [X19 + 0x6B8]
	0x03AFAEC0 LDP X20, X19, [X31 + 0x30]
	0x03AFAEC4 LDP X22, X21, [X31 + 0x20]
	0x03AFAEC8 LDP X24, X23, [X31 + 0x10]
	0x03AFAECC LDR X30, [X31], #0x40
	0x03AFAED0 RET
	0x03AFAED4 BL 0x1C16F20
	0x03AFAED8 STR X30, [X31 - 0x50]!
	0x03AFAEDC STP X26, X25, [X31 + 0x10]
	0x03AFAEE0 STP X24, X23, [X31 + 0x20]
	0x03AFAEE4 STP X22, X21, [X31 + 0x30]
	0x03AFAEE8 STP X20, X19, [X31 + 0x40]
	0x03AFAEEC MOV X20, X1
	0x03AFAEF0 MOV X19, X0
	0x03AFAEF4 CBZ X1, 0x3AFAF28
	0x03AFAEF8 LDR W8, [X20 + 0x18]
	0x03AFAEFC ADD W9, W3, W2
	0x03AFAF00 SUBS W10, W8, W2
	0x03AFAF04 CSEL W11, W8, W2, LT
	0x03AFAF08 CMP W2, 0x0
	0x03AFAF0C CSEL W24, W31, W11, LT
	0x03AFAF10 CMP W9, W8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x8E9000
	008 Move X21, 0x65F000
	009 Move W8, [X20+1600]
	010 Move X21, [X21+824]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x5FA000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move X0, 0x65F000
	020 Move X0, [X0+824]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+1600], W8
	024 Move X0, [X21]
	025 Move X20, 0x5FA000
	026 Move W8, [X0+224]
	027 Move X20, [X20+1432]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X31
	032 Call ShaderUtilities.GetShaderPropertyIDs
	033 Move X0, [X20]
	034 Move X20, [X19+272]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Equality, X0, X1
	043 Move S0, W31
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {81}
	048 Move X0, [X21]
	049 Move X20, [X19+272]
	050 Move W22, [X19+768]
	051 Move W23, [X19+618]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 NotImplemented "Instruction CMP not yet implemented."
	057 NotImplemented "Instruction CSET not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction CSET not yet implemented."
	060 Move X0, X20
	061 Move X3, X31
	062 Call ShaderUtilities.GetPadding, X0, X1, X2
	063 Move X0, [X19+272]
	064 Move X1, X31
	065 Move [X19+1560], S0
	066 Call ShaderUtilities.IsMaskingEnabled, X0
	067 Move X8, [X19+272]
	068 And W9, W0, 1
	069 Move [X19+775], W9
	070 Compare X8, 0
	071 JumpIfEqual {88}
	072 Move X9, [X21]
	073 Move X0, X8
	074 Move X2, X31
	075 Move X9, [X9+184]
	076 Move W1, [X9+48]
	077 Call Material.HasProperty, X0, X1
	078 Move V0, [X19+1560]
	079 And W8, W0, 1
	080 Move [X19+264], W8
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move X30, [X31+48]
	086 Move X23, [X31+56]
	087 Return V0
	088 Call 0x1C17F20

Method: System.Single GetPaddingForMaterial(UnityEngine.Material mat)

Disassembly:
	0x03AFAF14 CSEL W8, W3, W10, LT
	0x03AFAF18 TBNZ X3, 0x1F, 0x3AFAF2C
	0x03AFAF1C CMP W8, W3
	0x03AFAF20 CSEL W21, W8, W3, LT
	0x03AFAF24 B 0x3AFAF30
	0x03AFAF28 MOV W24, W31
	0x03AFAF2C MOV W21, W31
	0x03AFAF30 ADD X22, X19, 0x6B0
	0x03AFAF34 MOV X0, X22
	0x03AFAF38 MOV X1, X31
	0x03AFAF3C BL 0x3B1BBC4
	0x03AFAF40 CMP W21, W0
	0x03AFAF44 B.LT 0x3AFAF58
	0x03AFAF48 MOV X0, X22
	0x03AFAF4C MOV W1, W21
	0x03AFAF50 MOV X2, X31
	0x03AFAF54 BL 0x3B1BC80
	0x03AFAF58 ADD W8, W21, W24
	0x03AFAF5C CMP W24, W8
	0x03AFAF60 B.GE 0x3AFAFB0
	0x03AFAF64 CBZ X20, 0x3AFAFE8
	0x03AFAF68 ADD X8, X20, W24, 0x1, SXTW
	0x03AFAF6C MOV X23, X31
	0x03AFAF70 MOV W24, W24
	0x03AFAF74 ADD X25, X8, 0x20
	0x03AFAF78 MOV W26, W21
	0x03AFAF7C LDR W8, [X20 + 0x18]
	0x03AFAF80 ADD W9, W24, W23
	0x03AFAF84 CMP W9, W8
	0x03AFAF88 B.CS 0x3AFAFE4
	0x03AFAF8C LDRH W2, [X25, X23, LSL #1]
	0x03AFAF90 MOV X0, X22
	0x03AFAF94 MOV W1, W23
	0x03AFAF98 MOV X3, X31
	0x03AFAF9C BL 0x3B1BC20
	0x03AFAFA0 ADD X23, X23, 0x1
	0x03AFAFA4 CMP W26, W23
	0x03AFAFA8 B.NE 0x3AFAF7C
	0x03AFAFAC B 0x3AFAFB4
	0x03AFAFB0 MOV W21, W31
	0x03AFAFB4 MOV X0, X22
	0x03AFAFB8 MOV W1, W21
	0x03AFAFBC MOV W2, W31
	0x03AFAFC0 MOV X3, X31
	0x03AFAFC4 BL 0x3B1BC20
	0x03AFAFC8 STR W21, [X19 + 0x6B8]
	0x03AFAFCC LDP X20, X19, [X31 + 0x40]
	0x03AFAFD0 LDP X22, X21, [X31 + 0x30]
	0x03AFAFD4 LDP X24, X23, [X31 + 0x20]
	0x03AFAFD8 LDP X26, X25, [X31 + 0x10]
	0x03AFAFDC LDR X30, [X31], #0x50
	0x03AFAFE0 RET
	0x03AFAFE4 BL 0x1C16F28
	0x03AFAFE8 BL 0x1C16F20
	0x03AFAFEC SUB X31, X31, 0x70
	0x03AFAFF0 STP X29, X30, [X31 + 0x10]
	0x03AFAFF4 STP X28, X27, [X31 + 0x20]
	0x03AFAFF8 STP X26, X25, [X31 + 0x30]
	0x03AFAFFC STP X24, X23, [X31 + 0x40]
	0x03AFB000 STP X22, X21, [X31 + 0x50]
	0x03AFB004 STP X20, X19, [X31 + 0x60]
	0x03AFB008 ADRP X23, 0x8E7000
	0x03AFB00C LDRB W8, [X23 + 0x649]
	0x03AFB010 MOV X20, X4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x8E9000
	008 Move X22, 0x5FA000
	009 Move W8, [X21+1601]
	010 Move X22, [X22+1432]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x5FA000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x65F000
	021 Move X0, [X0+824]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1601], W8
	025 Move X0, [X22]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move S0, W31
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {72}
	039 Move X21, 0x65F000
	040 Move X21, [X21+824]
	041 Move W22, [X19+768]
	042 Move W23, [X19+618]
	043 Move X0, [X21]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 NotImplemented "Instruction CMP not yet implemented."
	049 NotImplemented "Instruction CSET not yet implemented."
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CSET not yet implemented."
	052 Move X0, X20
	053 Move X3, X31
	054 Call ShaderUtilities.GetPadding, X0, X1, X2
	055 Move X0, [X19+272]
	056 Move X1, X31
	057 Move [X19+1560], S0
	058 Call ShaderUtilities.IsMaskingEnabled, X0
	059 And W8, W0, 1
	060 Move [X19+775], W8
	061 Compare X20, 0
	062 JumpIfEqual {79}
	063 Move X8, [X21]
	064 Move X0, X20
	065 Move X2, X31
	066 Move X8, [X8+184]
	067 Move W1, [X8+48]
	068 Call Material.HasProperty, X0, X1
	069 Move V0, [X19+1560]
	070 And W8, W0, 1
	071 Move [X19+264], W8
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Move X30, [X31+48]
	077 Move X23, [X31+56]
	078 Return V0
	079 Call 0x1C17F20

Method: UnityEngine.Vector3[] GetTextContainerLocalCorners()

Disassembly:
	0x03AFB014 MOV X21, X3
	0x03AFB018 MOV X19, X1

ISIL:
	001 Move X0, X31
	002 Return X0

Method: System.Void ForceMeshUpdate(System.Boolean ignoreActiveState = False, System.Boolean forceTextReparsing = False)

Disassembly:
	0x03AFB01C MOV X22, X0

ISIL:
	001 Return 

Method: System.Void UpdateGeometry(UnityEngine.Mesh mesh, System.Int32 index)

Disassembly:
	0x03AFB020 TBNZ X8, 0x0, 0x3AFB044

ISIL:
	001 Return 

Method: System.Void UpdateVertexData(TMPro.TMP_VertexDataUpdateFlags flags)

Disassembly:
	0x03AFB024 ADRP X0, 0x65E000

ISIL:
	001 Return 

Method: System.Void UpdateVertexData()

Disassembly:
	0x03AFB028 LDR X0, [X0 + 0x210]

ISIL:
	001 Return 

Method: System.Void SetVertices(UnityEngine.Vector3[] vertices)

Disassembly:
	0x03AFB02C BL 0x1C16CF4

ISIL:
	001 Return 

Method: System.Void UpdateMeshPadding()

Disassembly:
	0x03AFB030 ADRP X0, 0x65E000

ISIL:
	001 Return 

Method: System.Void CrossFadeColor(UnityEngine.Color targetColor, System.Single duration, System.Boolean ignoreTimeScale, System.Boolean useAlpha)

Disassembly:
	0x03AFB034 LDR X0, [X0 + 0x200]
	0x03AFB038 BL 0x1C16CF4
	0x03AFB03C MOVZ W8, 0x1
	0x03AFB040 STRB W8, [X23 + 0x649]
	0x03AFB044 STR W31, [X31 + 0x4]
	0x03AFB048 CBZ X19, 0x3AFB388
	0x03AFB04C LDR X8, [X22 + 0x5C0]
	0x03AFB050 CBZ X8, 0x3AFB3B0
	0x03AFB054 LDR W9, [X8 + 0x18]
	0x03AFB058 CBZ W9, 0x3AFB380
	0x03AFB05C ADRP X9, 0x65E000
	0x03AFB060 LDR X9, [X9 + 0x210]
	0x03AFB064 LDR W1, [X19 + 0x18]
	0x03AFB068 ADD X0, X8, 0x20
	0x03AFB06C LDR X2, [X9]
	0x03AFB070 BL 0x2671D30
	0x03AFB074 LDR X23, [X19 + 0x30]
	0x03AFB078 CBZ X23, 0x3AFB3B0
	0x03AFB07C LDR X26, [X23 + 0x18]
	0x03AFB080 STR X23, [X31 + 0x8]
	0x03AFB084 CMP W26, 0x1
	0x03AFB088 B.LT 0x3AFB384
	0x03AFB08C CBZ W26, 0x3AFB380
	0x03AFB090 ADRP X27, 0x65E000
	0x03AFB094 LDR X27, [X27 + 0x200]
	0x03AFB098 MOVZ W29, 0xC72F
	0x03AFB09C MOV W8, W26
	0x03AFB0A0 MOV W24, W31
	0x03AFB0A4 MOVZ W28, 0xC
	0x03AFB0A8 MOVK W29, 0x2B0000
	0x03AFB0AC ADD X9, X23, W24, 0x2, SXTW
	0x03AFB0B0 LDR W25, [X9 + 0x20]
	0x03AFB0B4 CMP W25, 0x5C
	0x03AFB0B8 B.NE 0x3AFB168

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 And W20, W1, 1
	011 And W21, W2, 1
	012 Move W1, W20
	013 Move W2, W21
	014 Move X3, X31
	015 Move V8, V4
	016 Move V9, V3
	017 Move V10, V2
	018 Move V11, V1
	019 Move V12, V0
	020 Move X19, X0
	021 Call Graphic.CrossFadeColor, X0, X1, V0, X2, X3
	022 Move X8, [X19]
	023 Move X0, X19
	024 Move V1, V11
	025 Move V2, V10
	026 Move X4, [X8+2104]
	027 Move X3, [X8+2112]
	028 Move V3, V9
	029 Move V4, V8
	030 Move W1, W20
	031 Move W2, W21
	032 Move X20, [X31+64]
	033 Move X19, [X31+72]
	034 Move X30, [X31+48]
	035 Move X21, [X31+56]
	036 Move D9, [X31+32]
	037 Move D8, [X31+40]
	038 Move D11, [X31+16]
	039 Move D10, [X31+24]
	040 Move V0, V12
	041 Move V12, [X31+80]
	042 CallNoReturn X4

Method: System.Void CrossFadeAlpha(System.Single alpha, System.Single duration, System.Boolean ignoreTimeScale)

Disassembly:
	0x03AFB0BC ADD W9, W24, 0x1
	0x03AFB0C0 CMP W9, W26
	0x03AFB0C4 B.GE 0x3AFB128
	0x03AFB0C8 CMP W9, W8
	0x03AFB0CC B.CS 0x3AFB380
	0x03AFB0D0 ADD X8, X23, W9, 0x2, SXTW
	0x03AFB0D4 LDR W8, [X8 + 0x20]
	0x03AFB0D8 CMP W8, 0x5C
	0x03AFB0DC B.LE 0x3AFB110
	0x03AFB0E0 CMP W8, 0x6E
	0x03AFB0E4 B.EQ 0x3AFB130
	0x03AFB0E8 CMP W8, 0x75
	0x03AFB0EC B.NE 0x3AFB128
	0x03AFB0F0 ADD W29, W24, 0x5
	0x03AFB0F4 CMP W29, W26
	0x03AFB0F8 B.GE 0x3AFB280
	0x03AFB0FC ADD W2, W24, 0x2
	0x03AFB100 MOV X0, X22
	0x03AFB104 MOV X1, X23
	0x03AFB108 BL 0x3AFCB98
	0x03AFB10C B 0x3AFB158

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 And W20, W1, 1
	007 Move W1, W20
	008 Move X2, X31
	009 Move V8, V1
	010 Move V9, V0
	011 Move X19, X0
	012 Call Graphic.CrossFadeAlpha, X0, V0, V1, X1
	013 Move X8, [X19]
	014 Move X0, X19
	015 Move W1, W20
	016 Move X20, [X31+32]
	017 Move X19, [X31+40]
	018 Move X3, [X8+2120]
	019 Move X2, [X8+2128]
	020 Move X30, [X31+16]
	021 Move V0, V9
	022 Move V1, V8
	023 Move D9, [X31+48]
	024 Move D8, [X31+56]
	025 CallNoReturn X3

Method: System.Void InternalCrossFadeColor(UnityEngine.Color targetColor, System.Single duration, System.Boolean ignoreTimeScale, System.Boolean useAlpha)

Disassembly:
	0x03AFB110 CMP W8, 0x55

ISIL:
	001 Return 

Method: System.Void InternalCrossFadeAlpha(System.Single alpha, System.Single duration, System.Boolean ignoreTimeScale)

Disassembly:
	0x03AFB114 B.EQ 0x3AFB13C

ISIL:
	001 Return 

Method: System.Void ParseInputText()

Disassembly:
	0x03AFB118 CMP W8, 0x5C
	0x03AFB11C B.NE 0x3AFB128
	0x03AFB120 MOVZ W25, 0x5C
	0x03AFB124 B 0x3AFB134
	0x03AFB128 MOVZ W25, 0x5C
	0x03AFB12C B 0x3AFB314
	0x03AFB130 MOVZ W25, 0xA
	0x03AFB134 MOV W24, W9
	0x03AFB138 B 0x3AFB314
	0x03AFB13C ADD W29, W24, 0x9
	0x03AFB140 CMP W29, W26
	0x03AFB144 B.GE 0x3AFB280
	0x03AFB148 ADD W2, W24, 0x2
	0x03AFB14C MOV X0, X22
	0x03AFB150 MOV X1, X23
	0x03AFB154 BL 0x3AFCC40
	0x03AFB158 MOV W24, W29
	0x03AFB15C MOVZ W29, 0xC72F
	0x03AFB160 MOV W25, W0
	0x03AFB164 MOVK W29, 0x2B0000
	0x03AFB168 CMP W25, 0x3C
	0x03AFB16C B.NE 0x3AFB314
	0x03AFB170 ADD W2, W24, 0x1
	0x03AFB174 MOV X1, X23
	0x03AFB178 BL 0x3AFCD88
	0x03AFB17C CMP W0, W29
	0x03AFB180 B.LE 0x3AFB1CC
	0x03AFB184 MOVZ W8, 0x2CAE
	0x03AFB188 MOVK W8, 0x320000
	0x03AFB18C CMP W0, W8
	0x03AFB190 B.EQ 0x3AFB290
	0x03AFB194 MOVZ W8, 0xBD17
	0x03AFB198 MOVK W8, 0x5F90000
	0x03AFB19C CMP W0, W8
	0x03AFB1A0 B.EQ 0x3AFB2E8
	0x03AFB1A4 MOVZ W8, 0xF418
	0x03AFB1A8 MOVK W8, 0x72E60000
	0x03AFB1AC CMP W0, W8
	0x03AFB1B0 B.NE 0x3AFB310
	0x03AFB1B4 MOV X0, X22
	0x03AFB1B8 MOV X3, X21
	0x03AFB1BC MOV X4, X20
	0x03AFB1C0 BL 0x3AFD2C0
	0x03AFB1C4 ADD W24, W24, 0x7
	0x03AFB1C8 B 0x3AFB368
	0x03AFB1CC CMP W0, 0x8D0
	0x03AFB1D0 B.EQ 0x3AFB228
	0x03AFB1D4 CMP W0, W29
	0x03AFB1D8 B.NE 0x3AFB310
	0x03AFB1DC LDR X8, [X21]
	0x03AFB1E0 CBZ X8, 0x3AFB3B0
	0x03AFB1E4 LDR W9, [X20]
	0x03AFB1E8 LDR W10, [X8 + 0x18]
	0x03AFB1EC CMP W9, W10
	0x03AFB1F0 B.NE 0x3AFB210
	0x03AFB1F4 LDR X2, [X27]
	0x03AFB1F8 MOV X0, X22
	0x03AFB1FC MOV X1, X21
	0x03AFB200 BL 0x2298F68
	0x03AFB204 LDR X8, [X21]
	0x03AFB208 CBZ X8, 0x3AFB3B0
	0x03AFB20C LDR W9, [X20]
	0x03AFB210 LDR W10, [X8 + 0x18]
	0x03AFB214 CMP W9, W10
	0x03AFB218 B.CS 0x3AFB380
	0x03AFB21C SMADDL X8, X9, X28, X8
	0x03AFB220 MOVZ W9, 0xA0
	0x03AFB224 B 0x3AFB2D8
	0x03AFB228 LDR X8, [X21]
	0x03AFB22C CBZ X8, 0x3AFB3B0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x8E8000
	007 Move W8, [X20+1602]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x65F000
	014 Move X0, [X0+488]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+1602], W8
	018 Move W8, [X19+1024]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Compare W8, 0
	021 JumpIfNotEqual {68}
	022 Move X22, [X19+232]
	023 Move X21, [X19+216]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 NotImplemented "Instruction CSEL not yet implemented."
	026 Compare X22, 0
	027 JumpIfEqual {44}
	028 Move X10, 0x65F000
	029 Move X8, [X22]
	030 Move X10, [X10+488]
	031 NotImplemented "Instruction LDRH not yet implemented."
	032 Move X1, [X10]
	033 Compare X9, 0
	034 JumpIfEqual {41}
	035 Move X10, [X8+176]
	036 Add X10, X10, 8
	037 NotImplemented "Instruction LDUR not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Subtract X9, X9, 1
	040 Add X10, X10, 16
	041 Move X0, X22
	042 Move W2, W31
	043 Call 0x1C5D788
	044 Move X20, X19
	045 Compare X21, 0
	046 JumpIfNotEqual {61}
	047 Move W3, W31
	048 NotImplemented "Instruction LDRSW not yet implemented."
	049 Add X8, X8, X9
	050 Add X0, X8, 312
	051 Move X8, [X0]
	052 Move X2, [X0+8]
	053 Move X0, X22
	054 Move X1, X21
	055 NotImplemented "Instruction BLR not yet implemented."
	056 Compare X20, 0
	057 JumpIfEqual {79}
	058 Move X21, X0
	059 Compare X21, 0
	060 JumpIfEqual {47}
	061 Move W3, [X21+16]
	062 Move X0, X20
	063 Move X1, X21
	064 Move W2, W31
	065 Call TMP_Text.PopulateTextBackingArray, X0, X1, X2, X3
	066 Move X0, X19
	067 Call TMP_Text.PopulateTextProcessingArray, X0
	068 Move X8, [X19]
	069 Move X1, [X19+1144]
	070 Move X0, X19
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X3, [X8+2136]
	074 Move X2, [X8+2144]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X30, [X31+48]
	078 CallNoReturn X3
	079 Call 0x1C17F20

Method: System.Void PopulateTextBackingArray(System.String sourceText)

Disassembly:
	0x03AFB230 LDR W9, [X20]
	0x03AFB234 LDR W10, [X8 + 0x18]
	0x03AFB238 CMP W9, W10
	0x03AFB23C B.NE 0x3AFB25C
	0x03AFB240 LDR X2, [X27]
	0x03AFB244 MOV X0, X22

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {4}
	003 Move W3, [X1+16]
	004 Move W3, W31
	005 Move W2, W31
	006 Call TMP_Text.PopulateTextBackingArray, X0, X1, X2, X3
	007 Return 

Method: System.Void PopulateTextBackingArray(System.String sourceText, System.Int32 start, System.Int32 length)

Disassembly:
	0x03AFBCB8 ADD W23, W23, 0x7
	0x03AFBCBC B 0x3AFBE5C
	0x03AFBCC0 CMP W0, 0x8D0
	0x03AFBCC4 B.EQ 0x3AFBD1C
	0x03AFBCC8 CMP W0, W28
	0x03AFBCCC B.NE 0x3AFBE04
	0x03AFBCD0 LDR X8, [X21]
	0x03AFBCD4 CBZ X8, 0x3AFBEA4
	0x03AFBCD8 LDR W9, [X20]
	0x03AFBCDC LDR W10, [X8 + 0x18]
	0x03AFBCE0 CMP W9, W10
	0x03AFBCE4 B.NE 0x3AFBD04
	0x03AFBCE8 LDR X2, [X26]
	0x03AFBCEC MOV X0, X19
	0x03AFBCF0 MOV X1, X21
	0x03AFBCF4 BL 0x2298F68
	0x03AFBCF8 LDR X8, [X21]
	0x03AFBCFC CBZ X8, 0x3AFBEA4
	0x03AFBD00 LDR W9, [X20]
	0x03AFBD04 LDR W10, [X8 + 0x18]
	0x03AFBD08 CMP W9, W10
	0x03AFBD0C B.CS 0x3AFBE74
	0x03AFBD10 SMADDL X8, X9, X27, X8
	0x03AFBD14 MOVZ W9, 0xA0
	0x03AFBD18 B 0x3AFBDCC
	0x03AFBD1C LDR X8, [X21]
	0x03AFBD20 CBZ X8, 0x3AFBEA4
	0x03AFBD24 LDR W9, [X20]
	0x03AFBD28 LDR W10, [X8 + 0x18]
	0x03AFBD2C CMP W9, W10
	0x03AFBD30 B.NE 0x3AFBD50
	0x03AFBD34 LDR X2, [X26]
	0x03AFBD38 MOV X0, X19
	0x03AFBD3C MOV X1, X21
	0x03AFBD40 BL 0x2298F68
	0x03AFBD44 LDR X8, [X21]
	0x03AFBD48 CBZ X8, 0x3AFBEA4
	0x03AFBD4C LDR W9, [X20]
	0x03AFBD50 LDR W10, [X8 + 0x18]
	0x03AFBD54 CMP W9, W10
	0x03AFBD58 B.CS 0x3AFBE74
	0x03AFBD5C SMADDL X8, X9, X27, X8
	0x03AFBD60 MOVZ W9, 0xA
	0x03AFBD64 STR W9, [X8 + 0x20]
	0x03AFBD68 LDR W8, [X20]
	0x03AFBD6C ADD W23, W23, 0x3
	0x03AFBD70 B 0x3AFBE54
	0x03AFBD74 MOVZ W29, 0x2CAE
	0x03AFBD78 MOVZ W24, 0x5C
	0x03AFBD7C MOVK W29, 0x320000
	0x03AFBD80 B 0x3AFBE08
	0x03AFBD84 LDR X8, [X21]
	0x03AFBD88 CBZ X8, 0x3AFBEA4
	0x03AFBD8C LDR W9, [X20]
	0x03AFBD90 LDR W10, [X8 + 0x18]
	0x03AFBD94 CMP W9, W10
	0x03AFBD98 B.NE 0x3AFBDB8
	0x03AFBD9C LDR X2, [X26]
	0x03AFBDA0 MOV X0, X19
	0x03AFBDA4 MOV X1, X21
	0x03AFBDA8 BL 0x2298F68
	0x03AFBDAC LDR X8, [X21]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, X1
	009 Move X19, X0
	010 Compare X1, 0
	011 JumpIfEqual {26}
	012 Move W8, [X20+16]
	013 Add W9, W3, W2
	014 Subtract W10, W8, W2
	015 NotImplemented "Instruction CSEL not yet implemented."
	016 NotImplemented "Instruction CMP not yet implemented."
	017 NotImplemented "Instruction CSEL not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CSEL not yet implemented."
	020 Move TEMP, X3
	021 And TEMP, TEMP, -2147483648
	022 Compare TEMP, -2147483648
	023 JumpIfEqual {27}
	024 NotImplemented "Instruction CMP not yet implemented."
	025 NotImplemented "Instruction CSEL not yet implemented."
	026 Move W24, W31
	027 Move W21, W31
	028 Add X22, X19, 1712
	029 Move X0, X22
	030 Move X1, X31
	031 Call TextBackingContainer.get_Capacity, X0
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, X22
	034 Move W1, W21
	035 Move X2, X31
	036 Call TextBackingContainer.Resize, X0, X1
	037 Add W8, W21, W24
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Compare X20, 0
	040 JumpIfEqual {68}
	041 Move W23, W31
	042 Add W1, W24, W23
	043 Move X0, X20
	044 Move X2, X31
	045 Call String.get_Chars, X0, X1
	046 And W2, W0, 0xFFFF
	047 Move X0, X22
	048 Move W1, W23
	049 Move X3, X31
	050 Call TextBackingContainer.set_Item, X0, X1, X2
	051 Add W23, W23, 1
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W21, W31
	054 Move X0, X22
	055 Move W1, W21
	056 Move W2, W31
	057 Move X3, X31
	058 Call TextBackingContainer.set_Item, X0, X1, X2
	059 Move [X19+1720], W21
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Return 
	068 Call 0x1C17F20

Method: System.Void PopulateTextBackingArray(System.Text.StringBuilder sourceText, System.Int32 start, System.Int32 length)

Disassembly:
	0x03AFBDB0 CBZ X8, 0x3AFBEA4
	0x03AFBDB4 LDR W9, [X20]
	0x03AFBDB8 LDR W10, [X8 + 0x18]
	0x03AFBDBC CMP W9, W10
	0x03AFBDC0 B.CS 0x3AFBE74
	0x03AFBDC4 SMADDL X8, X9, X27, X8
	0x03AFBDC8 MOVZ W9, 0x200B
	0x03AFBDCC STR W9, [X8 + 0x20]
	0x03AFBDD0 LDR W8, [X20]
	0x03AFBDD4 ADD W23, W23, 0x5
	0x03AFBDD8 B 0x3AFBE54
	0x03AFBDDC ADD X1, X31, 0x8
	0x03AFBDE0 ADD X3, X31, 0x4
	0x03AFBDE4 MOV X0, X19
	0x03AFBDE8 MOV W2, W23
	0x03AFBDEC MOV X4, X21
	0x03AFBDF0 MOV X5, X20
	0x03AFBDF4 BL 0x3AFCEA4
	0x03AFBDF8 TBZ X0, 0x0, 0x3AFBE04
	0x03AFBDFC LDR W23, [X31 + 0x4]
	0x03AFBE00 B 0x3AFBE5C
	0x03AFBE04 MOVZ W24, 0x3C
	0x03AFBE08 LDR X8, [X21]
	0x03AFBE0C CBZ X8, 0x3AFBEA4
	0x03AFBE10 LDR W9, [X20]
	0x03AFBE14 LDR W10, [X8 + 0x18]
	0x03AFBE18 CMP W9, W10
	0x03AFBE1C B.NE 0x3AFBE3C
	0x03AFBE20 LDR X2, [X26]
	0x03AFBE24 MOV X0, X19
	0x03AFBE28 MOV X1, X21
	0x03AFBE2C BL 0x2298F68
	0x03AFBE30 LDR X8, [X21]
	0x03AFBE34 CBZ X8, 0x3AFBEA4
	0x03AFBE38 LDR W9, [X20]
	0x03AFBE3C LDR W10, [X8 + 0x18]
	0x03AFBE40 CMP W9, W10
	0x03AFBE44 B.CS 0x3AFBE74
	0x03AFBE48 SMADDL X8, X9, X27, X8
	0x03AFBE4C STR W24, [X8 + 0x20]
	0x03AFBE50 LDR W8, [X20]
	0x03AFBE54 ADD W8, W8, 0x1
	0x03AFBE58 STR W8, [X20]
	0x03AFBE5C ADD W23, W23, 0x1
	0x03AFBE60 CMP W23, W25
	0x03AFBE64 B.GE 0x3AFBE78
	0x03AFBE68 LDR W8, [X22 + 0x18]
	0x03AFBE6C CMP W23, W8
	0x03AFBE70 B.CC 0x3AFBBA8
	0x03AFBE74 BL 0x1C16F28
	0x03AFBE78 LDR W8, [X19 + 0x5C8]
	0x03AFBE7C SUB W8, W8, 0x1
	0x03AFBE80 STR W8, [X19 + 0x5C8]
	0x03AFBE84 LDP X20, X19, [X31 + 0x60]
	0x03AFBE88 LDP X22, X21, [X31 + 0x50]
	0x03AFBE8C LDP X24, X23, [X31 + 0x40]
	0x03AFBE90 LDP X26, X25, [X31 + 0x30]
	0x03AFBE94 LDP X28, X27, [X31 + 0x20]
	0x03AFBE98 LDP X29, X30, [X31 + 0x10]
	0x03AFBE9C ADD X31, X31, 0x70
	0x03AFBEA0 RET
	0x03AFBEA4 BL 0x1C16F20
	0x03AFBEA8 SUB X31, X31, 0x70
	0x03AFBEAC STP X29, X30, [X31 + 0x10]
	0x03AFBEB0 STP X28, X27, [X31 + 0x20]
	0x03AFBEB4 STP X26, X25, [X31 + 0x30]
	0x03AFBEB8 STP X24, X23, [X31 + 0x40]
	0x03AFBEBC STP X22, X21, [X31 + 0x50]
	0x03AFBEC0 STP X20, X19, [X31 + 0x60]
	0x03AFBEC4 ADRP X22, 0x8E7000
	0x03AFBEC8 LDRB W8, [X22 + 0x64A]
	0x03AFBECC MOV X19, X2
	0x03AFBED0 MOV X20, X1
	0x03AFBED4 MOV X21, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, X1
	009 Move X19, X0
	010 Compare X1, 0
	011 JumpIfEqual {37}
	012 Move X0, X20
	013 Move X1, X31
	014 Move W21, W3
	015 Move W22, W2
	016 Call StringBuilder.get_Length, X0
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction CSEL not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X0, X20
	021 Move X1, X31
	022 NotImplemented "Instruction CSEL not yet implemented."
	023 Call StringBuilder.get_Length, X0
	024 Add W8, W21, W22
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W8, W21
	027 Move X0, X20
	028 Move X1, X31
	029 Call StringBuilder.get_Length, X0
	030 Subtract W8, W0, W22
	031 Move TEMP, X21
	032 And TEMP, TEMP, -2147483648
	033 Compare TEMP, -2147483648
	034 JumpIfEqual {38}
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSEL not yet implemented."
	037 Move W24, W31
	038 Move W21, W31
	039 Add X22, X19, 1712
	040 Move X0, X22
	041 Move X1, X31
	042 Call TextBackingContainer.get_Capacity, X0
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, X22
	045 Move W1, W21
	046 Move X2, X31
	047 Call TextBackingContainer.Resize, X0, X1
	048 Add W8, W21, W24
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Compare X20, 0
	051 JumpIfEqual {79}
	052 Move W23, W31
	053 Add W1, W24, W23
	054 Move X0, X20
	055 Move X2, X31
	056 Call StringBuilder.get_Chars, X0, X1
	057 And W2, W0, 0xFFFF
	058 Move X0, X22
	059 Move W1, W23
	060 Move X3, X31
	061 Call TextBackingContainer.set_Item, X0, X1, X2
	062 Add W23, W23, 1
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move W21, W31
	065 Move X0, X22
	066 Move W1, W21
	067 Move W2, W31
	068 Move X3, X31
	069 Call TextBackingContainer.set_Item, X0, X1, X2
	070 Move [X19+1720], W21
	071 Move X20, [X31+48]
	072 Move X19, [X31+56]
	073 Move X22, [X31+32]
	074 Move X21, [X31+40]
	075 Move X24, [X31+16]
	076 Move X23, [X31+24]
	077 Move X30, [X31+64]
	078 Return 
	079 Call 0x1C17F20

Method: System.Void PopulateTextBackingArray(System.Char[] sourceText, System.Int32 start, System.Int32 length)

Disassembly:
	0x03AFBED8 TBNZ X8, 0x0, 0x3AFBEFC
	0x03AFBEDC ADRP X0, 0x65E000
	0x03AFBEE0 LDR X0, [X0 + 0x218]
	0x03AFBEE4 BL 0x1C16CF4
	0x03AFBEE8 ADRP X0, 0x65E000
	0x03AFBEEC LDR X0, [X0 + 0x200]
	0x03AFBEF0 BL 0x1C16CF4
	0x03AFBEF4 MOVZ W8, 0x1
	0x03AFBEF8 STRB W8, [X22 + 0x64A]
	0x03AFBEFC STR W31, [X31 + 0x4]
	0x03AFBF00 LDR X8, [X21 + 0x5C0]
	0x03AFBF04 CBZ X8, 0x3AFC268
	0x03AFBF08 LDR W9, [X8 + 0x18]
	0x03AFBF0C CBZ W9, 0x3AFC240
	0x03AFBF10 ADRP X9, 0x65E000
	0x03AFBF14 LDR X9, [X9 + 0x218]
	0x03AFBF18 ADD X0, X8, 0x20
	0x03AFBF1C LDR X1, [X9]
	0x03AFBF20 BL 0x2671DF8
	0x03AFBF24 MOV W1, W0
	0x03AFBF28 MOV X0, X21
	0x03AFBF2C BL 0x3AF77B8
	0x03AFBF30 CBZ X0, 0x3AFC268
	0x03AFBF34 LDR X22, [X0 + 0x38]
	0x03AFBF38 CBZ X22, 0x3AFC268
	0x03AFBF3C LDR X25, [X22 + 0x18]
	0x03AFBF40 STR X22, [X31 + 0x8]
	0x03AFBF44 CMP W25, 0x1
	0x03AFBF48 B.LT 0x3AFC244
	0x03AFBF4C CBZ W25, 0x3AFC240
	0x03AFBF50 ADRP X26, 0x65E000
	0x03AFBF54 LDR X26, [X26 + 0x200]
	0x03AFBF58 MOVZ W28, 0xC72F
	0x03AFBF5C MOVZ W29, 0x2CAE
	0x03AFBF60 MOV W8, W25
	0x03AFBF64 MOV W23, W31
	0x03AFBF68 MOVZ W27, 0xC
	0x03AFBF6C MOVK W28, 0x2B0000
	0x03AFBF70 MOVK W29, 0x320000
	0x03AFBF74 ADD X9, X22, W23, 0x2, SXTW
	0x03AFBF78 LDR W24, [X9 + 0x20]
	0x03AFBF7C CMP W24, 0x5C
	0x03AFBF80 B.NE 0x3AFC030
	0x03AFBF84 ADD W9, W23, 0x1
	0x03AFBF88 CMP W9, W25
	0x03AFBF8C B.GE 0x3AFBFF0
	0x03AFBF90 CMP W9, W8
	0x03AFBF94 B.CS 0x3AFC240
	0x03AFBF98 ADD X8, X22, W9, 0x2, SXTW
	0x03AFBF9C LDR W8, [X8 + 0x20]
	0x03AFBFA0 CMP W8, 0x5C
	0x03AFBFA4 B.LE 0x3AFBFD8
	0x03AFBFA8 CMP W8, 0x6E
	0x03AFBFAC B.EQ 0x3AFBFF8
	0x03AFBFB0 CMP W8, 0x75
	0x03AFBFB4 B.NE 0x3AFBFF0
	0x03AFBFB8 ADD W29, W23, 0x5
	0x03AFBFBC CMP W29, W25
	0x03AFBFC0 B.GE 0x3AFC140
	0x03AFBFC4 ADD W2, W23, 0x2
	0x03AFBFC8 MOV X0, X21
	0x03AFBFCC MOV X1, X22
	0x03AFBFD0 BL 0x3AFCB98
	0x03AFBFD4 B 0x3AFC020
	0x03AFBFD8 CMP W8, 0x55
	0x03AFBFDC B.EQ 0x3AFC004
	0x03AFBFE0 CMP W8, 0x5C
	0x03AFBFE4 B.NE 0x3AFBFF0
	0x03AFBFE8 MOVZ W24, 0x5C

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, X1
	011 Move X19, X0
	012 Compare X1, 0
	013 JumpIfEqual {28}
	014 Move W8, [X20+24]
	015 Add W9, W3, W2
	016 Subtract W10, W8, W2
	017 NotImplemented "Instruction CSEL not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CSEL not yet implemented."
	020 NotImplemented "Instruction CMP not yet implemented."
	021 NotImplemented "Instruction CSEL not yet implemented."
	022 Move TEMP, X3
	023 And TEMP, TEMP, -2147483648
	024 Compare TEMP, -2147483648
	025 JumpIfEqual {29}
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSEL not yet implemented."
	028 Move W24, W31
	029 Move W21, W31
	030 Add X22, X19, 1712
	031 Move X0, X22
	032 Move X1, X31
	033 Call TextBackingContainer.get_Capacity, X0
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X0, X22
	036 Move W1, W21
	037 Move X2, X31
	038 Call TextBackingContainer.Resize, X0, X1
	039 Add W8, W21, W24
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Compare X20, 0
	042 JumpIfEqual {76}
	043 Add X8, X20, W24
	044 Move X23, X31
	045 Move W24, W24
	046 Add X25, X8, 32
	047 Move W26, W21
	048 Move W8, [X20+24]
	049 Add W9, W24, W23
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction LDRH not yet implemented."
	052 Move X0, X22
	053 Move W1, W23
	054 Move X3, X31
	055 Call TextBackingContainer.set_Item, X0, X1, X2
	056 Add X23, X23, 1
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move W21, W31
	059 Move X0, X22
	060 Move W1, W21
	061 Move W2, W31
	062 Move X3, X31
	063 Call TextBackingContainer.set_Item, X0, X1, X2
	064 Move [X19+1720], W21
	065 Move X20, [X31+64]
	066 Move X19, [X31+72]
	067 Move X22, [X31+48]
	068 Move X21, [X31+56]
	069 Move X24, [X31+32]
	070 Move X23, [X31+40]
	071 Move X26, [X31+16]
	072 Move X25, [X31+24]
	073 Move X30, [X31+80]
	074 Return 
	075 Call 0x1C17F28
	076 Call 0x1C17F20

Method: System.Void PopulateTextProcessingArray()

Disassembly:
	0x03AFB248 MOV X1, X21
	0x03AFB24C BL 0x2298F68
	0x03AFB250 LDR X8, [X21]
	0x03AFB254 CBZ X8, 0x3AFB3B0
	0x03AFB258 LDR W9, [X20]
	0x03AFB25C LDR W10, [X8 + 0x18]
	0x03AFB260 CMP W9, W10
	0x03AFB264 B.CS 0x3AFB380
	0x03AFB268 SMADDL X8, X9, X28, X8
	0x03AFB26C MOVZ W9, 0xA
	0x03AFB270 STR W9, [X8 + 0x20]
	0x03AFB274 LDR W8, [X20]
	0x03AFB278 ADD W24, W24, 0x3
	0x03AFB27C B 0x3AFB360
	0x03AFB280 MOVZ W29, 0xC72F
	0x03AFB284 MOVZ W25, 0x5C
	0x03AFB288 MOVK W29, 0x2B0000
	0x03AFB28C B 0x3AFB314
	0x03AFB290 LDR X8, [X21]
	0x03AFB294 CBZ X8, 0x3AFB3B0
	0x03AFB298 LDR W9, [X20]
	0x03AFB29C LDR W10, [X8 + 0x18]
	0x03AFB2A0 CMP W9, W10
	0x03AFB2A4 B.NE 0x3AFB2C4
	0x03AFB2A8 LDR X2, [X27]
	0x03AFB2AC MOV X0, X22
	0x03AFB2B0 MOV X1, X21
	0x03AFB2B4 BL 0x2298F68
	0x03AFB2B8 LDR X8, [X21]
	0x03AFB2BC CBZ X8, 0x3AFB3B0
	0x03AFB2C0 LDR W9, [X20]
	0x03AFB2C4 LDR W10, [X8 + 0x18]
	0x03AFB2C8 CMP W9, W10
	0x03AFB2CC B.CS 0x3AFB380
	0x03AFB2D0 SMADDL X8, X9, X28, X8
	0x03AFB2D4 MOVZ W9, 0x200B
	0x03AFB2D8 STR W9, [X8 + 0x20]
	0x03AFB2DC LDR W8, [X20]
	0x03AFB2E0 ADD W24, W24, 0x5
	0x03AFB2E4 B 0x3AFB360
	0x03AFB2E8 ADD X1, X31, 0x8
	0x03AFB2EC ADD X3, X31, 0x4
	0x03AFB2F0 MOV X0, X22
	0x03AFB2F4 MOV W2, W24
	0x03AFB2F8 MOV X4, X21
	0x03AFB2FC MOV X5, X20
	0x03AFB300 BL 0x3AFCEA4
	0x03AFB304 TBZ X0, 0x0, 0x3AFB310
	0x03AFB308 LDR W24, [X31 + 0x4]
	0x03AFB30C B 0x3AFB368
	0x03AFB310 MOVZ W25, 0x3C
	0x03AFB314 LDR X8, [X21]
	0x03AFB318 CBZ X8, 0x3AFB3B0
	0x03AFB31C LDR W9, [X20]
	0x03AFB320 LDR W10, [X8 + 0x18]
	0x03AFB324 CMP W9, W10
	0x03AFB328 B.NE 0x3AFB348
	0x03AFB32C LDR X2, [X27]
	0x03AFB330 MOV X0, X22
	0x03AFB334 MOV X1, X21
	0x03AFB338 BL 0x2298F68
	0x03AFB33C LDR X8, [X21]
	0x03AFB340 CBZ X8, 0x3AFB3B0
	0x03AFB344 LDR W9, [X20]
	0x03AFB348 LDR W10, [X8 + 0x18]
	0x03AFB34C CMP W9, W10
	0x03AFB350 B.CS 0x3AFB380
	0x03AFB354 SMADDL X8, X9, X28, X8
	0x03AFB358 STR W25, [X8 + 0x20]
	0x03AFB35C LDR W8, [X20]
	0x03AFB360 ADD W8, W8, 0x1
	0x03AFB364 STR W8, [X20]
	0x03AFB368 ADD W24, W24, 0x1
	0x03AFB36C CMP W24, W26
	0x03AFB370 B.GE 0x3AFB384
	0x03AFB374 LDR W8, [X23 + 0x18]
	0x03AFB378 CMP W24, W8
	0x03AFB37C B.CC 0x3AFB0AC
	0x03AFB380 BL 0x1C16F28
	0x03AFB384 STR W31, [X22 + 0x5C8]
	0x03AFB388 CMP X19, 0x0
	0x03AFB38C LDP X20, X19, [X31 + 0x60]
	0x03AFB390 LDP X22, X21, [X31 + 0x50]
	0x03AFB394 LDP X24, X23, [X31 + 0x40]
	0x03AFB398 LDP X26, X25, [X31 + 0x30]
	0x03AFB39C LDP X28, X27, [X31 + 0x20]
	0x03AFB3A0 LDP X29, X30, [X31 + 0x10]
	0x03AFB3A4 CSET W0, NE
	0x03AFB3A8 ADD X31, X31, 0x70
	0x03AFB3AC RET
	0x03AFB3B0 BL 0x1C16F20
	0x03AFB3B4 SUB X31, X31, 0x40
	0x03AFB3B8 STP X2, X30, [X31 + 0x8]
	0x03AFB3BC STP X22, X21, [X31 + 0x20]
	0x03AFB3C0 STP X20, X19, [X31 + 0x30]
	0x03AFB3C4 STR X1, [X31]
	0x03AFB3C8 ADD X0, X31, 0x0
	0x03AFB3CC MOV W1, W3
	0x03AFB3D0 MOV X2, X31
	0x03AFB3D4 MOV W19, W3
	0x03AFB3D8 BL 0x3B1BBF0
	0x03AFB3DC MOV W1, W0
	0x03AFB3E0 BL 0x3B0B580
	0x03AFB3E4 MOV W20, W0
	0x03AFB3E8 ADD W1, W19, 0x1
	0x03AFB3EC ADD X0, X31, 0x0
	0x03AFB3F0 MOV X2, X31
	0x03AFB3F4 BL 0x3B1BBF0
	0x03AFB3F8 MOV W1, W0
	0x03AFB3FC BL 0x3B0B580
	0x03AFB400 MOV W21, W0
	0x03AFB404 ADD W1, W19, 0x2
	0x03AFB408 ADD X0, X31, 0x0
	0x03AFB40C MOV X2, X31
	0x03AFB410 BL 0x3B1BBF0
	0x03AFB414 MOV W1, W0
	0x03AFB418 BL 0x3B0B580
	0x03AFB41C MOV W22, W0
	0x03AFB420 ADD W1, W19, 0x3
	0x03AFB424 ADD X0, X31, 0x0
	0x03AFB428 MOV X2, X31
	0x03AFB42C BL 0x3B1BBF0
	0x03AFB430 MOV W1, W0
	0x03AFB434 BL 0x3B0B580
	0x03AFB438 UBFM W8, W21, 0x18, 0x17
	0x03AFB43C ADD W8, W8, W20, 0xC, LSL
	0x03AFB440 ADD W8, W8, W22, 0x4, LSL
	0x03AFB444 LDP X20, X19, [X31 + 0x30]
	0x03AFB448 LDP X22, X21, [X31 + 0x20]
	0x03AFB44C LDR X30, [X31 + 0x10]
	0x03AFB450 ADD W0, W8, W0
	0x03AFB454 ADD X31, X31, 0x40
	0x03AFB458 RET
	0x03AFB45C SUB X31, X31, 0x60
	0x03AFB460 STP X2, X30, [X31 + 0x8]
	0x03AFB464 STP X26, X25, [X31 + 0x20]
	0x03AFB468 STP X24, X23, [X31 + 0x30]
	0x03AFB46C STP X22, X21, [X31 + 0x40]
	0x03AFB470 STP X20, X19, [X31 + 0x50]
	0x03AFB474 STR X1, [X31]
	0x03AFB478 ADD X0, X31, 0x0
	0x03AFB47C MOV W1, W3
	0x03AFB480 MOV X2, X31
	0x03AFB484 MOV W19, W3
	0x03AFB488 BL 0x3B1BBF0
	0x03AFB48C MOV W1, W0
	0x03AFB490 BL 0x3B0B580
	0x03AFB494 MOV W20, W0
	0x03AFB498 ADD W1, W19, 0x1
	0x03AFB49C ADD X0, X31, 0x0
	0x03AFB4A0 MOV X2, X31
	0x03AFB4A4 BL 0x3B1BBF0
	0x03AFB4A8 MOV W1, W0
	0x03AFB4AC BL 0x3B0B580
	0x03AFB4B0 MOV W21, W0
	0x03AFB4B4 ADD W1, W19, 0x2
	0x03AFB4B8 ADD X0, X31, 0x0
	0x03AFB4BC MOV X2, X31
	0x03AFB4C0 BL 0x3B1BBF0
	0x03AFB4C4 MOV W1, W0
	0x03AFB4C8 BL 0x3B0B580
	0x03AFB4CC MOV W22, W0
	0x03AFB4D0 ADD W1, W19, 0x3
	0x03AFB4D4 ADD X0, X31, 0x0
	0x03AFB4D8 MOV X2, X31
	0x03AFB4DC BL 0x3B1BBF0
	0x03AFB4E0 MOV W1, W0
	0x03AFB4E4 BL 0x3B0B580
	0x03AFB4E8 MOV W23, W0
	0x03AFB4EC ADD W1, W19, 0x4
	0x03AFB4F0 ADD X0, X31, 0x0
	0x03AFB4F4 MOV X2, X31
	0x03AFB4F8 BL 0x3B1BBF0
	0x03AFB4FC MOV W1, W0
	0x03AFB500 BL 0x3B0B580
	0x03AFB504 MOV W24, W0
	0x03AFB508 ADD W1, W19, 0x5
	0x03AFB50C ADD X0, X31, 0x0
	0x03AFB510 MOV X2, X31
	0x03AFB514 BL 0x3B1BBF0
	0x03AFB518 MOV W1, W0
	0x03AFB51C BL 0x3B0B580
	0x03AFB520 MOV W25, W0
	0x03AFB524 ADD W1, W19, 0x6
	0x03AFB528 ADD X0, X31, 0x0
	0x03AFB52C MOV X2, X31
	0x03AFB530 BL 0x3B1BBF0
	0x03AFB534 MOV W1, W0
	0x03AFB538 BL 0x3B0B580
	0x03AFB53C MOV W26, W0
	0x03AFB540 ADD W1, W19, 0x7
	0x03AFB544 ADD X0, X31, 0x0
	0x03AFB548 MOV X2, X31
	0x03AFB54C BL 0x3B1BBF0
	0x03AFB550 MOV W1, W0
	0x03AFB554 BL 0x3B0B580
	0x03AFB558 UBFM W8, W21, 0x8, 0x7
	0x03AFB55C ADD W8, W8, W20, 0x1C, LSL
	0x03AFB560 ADD W8, W8, W22, 0x14, LSL
	0x03AFB564 ADD W8, W8, W23, 0x10, LSL
	0x03AFB568 ADD W8, W8, W24, 0xC, LSL
	0x03AFB56C ADD W8, W8, W25, 0x8, LSL
	0x03AFB570 ADD W8, W8, W26, 0x4, LSL
	0x03AFB574 LDP X20, X19, [X31 + 0x50]
	0x03AFB578 LDP X22, X21, [X31 + 0x40]
	0x03AFB57C LDP X24, X23, [X31 + 0x30]
	0x03AFB580 LDP X26, X25, [X31 + 0x20]
	0x03AFB584 LDR X30, [X31 + 0x10]
	0x03AFB588 ADD W0, W8, W0
	0x03AFB58C ADD X31, X31, 0x60
	0x03AFB590 RET
	0x03AFB594 SUB X31, X31, 0x60
	0x03AFB598 STP X2, X30, [X31 + 0x8]
	0x03AFB59C STP X26, X25, [X31 + 0x20]
	0x03AFB5A0 STP X24, X23, [X31 + 0x30]
	0x03AFB5A4 STP X22, X21, [X31 + 0x40]
	0x03AFB5A8 STP X20, X19, [X31 + 0x50]
	0x03AFB5AC ADRP X20, 0x8E7000
	0x03AFB5B0 LDRB W8, [X20 + 0x64C]
	0x03AFB5B4 MOV W19, W3
	0x03AFB5B8 STR X1, [X31]
	0x03AFB5BC TBNZ X8, 0x0, 0x3AFB5D4
	0x03AFB5C0 ADRP X0, 0x65D000
	0x03AFB5C4 LDR X0, [X0 + 0xBB8]
	0x03AFB5C8 BL 0x1C16CF4
	0x03AFB5CC MOVZ W8, 0x1
	0x03AFB5D0 STRB W8, [X20 + 0x64C]
	0x03AFB5D4 ADD X0, X31, 0x0
	0x03AFB5D8 MOV X1, X31
	0x03AFB5DC BL 0x3B1BBC4
	0x03AFB5E0 MOVZ W8, 0xFFEF
	0x03AFB5E4 MOVK W8, 0x7FFF0000
	0x03AFB5E8 CMP W19, W8
	0x03AFB5EC MOV W20, W31
	0x03AFB5F0 B.GT 0x3AFB680
	0x03AFB5F4 MOV W21, W0
	0x03AFB5F8 CMP W0, W19
	0x03AFB5FC B.LE 0x3AFB680
	0x03AFB600 ADRP X23, 0x65D000
	0x03AFB604 LDR X23, [X23 + 0xBB8]
	0x03AFB608 MOVZ X26, 0x1
	0x03AFB60C MOV W20, W31
	0x03AFB610 ADD W24, W19, 0x10
	0x03AFB614 MOVZ W25, 0x1
	0x03AFB618 MOVK X26, 0x60000000
	0x03AFB61C ADD X0, X31, 0x0
	0x03AFB620 MOV W1, W19
	0x03AFB624 MOV X2, X31
	0x03AFB628 BL 0x3B1BBF0
	0x03AFB62C MOV W22, W0
	0x03AFB630 CMP W0, 0x3E
	0x03AFB634 B.HI 0x3AFB648
	0x03AFB638 MOV W8, W22
	0x03AFB63C LSLV X8, X25, X8
	0x03AFB640 ANDS X31, X8, X26, 0x0
	0x03AFB644 B.NE 0x3AFB680
	0x03AFB648 LDR X0, [X23]
	0x03AFB64C LDR W8, [X0 + 0xE0]
	0x03AFB650 CBNZ W8, 0x3AFB658
	0x03AFB654 BL 0x1C16DFC
	0x03AFB658 MOV W0, W22
	0x03AFB65C MOV X1, X31
	0x03AFB660 BL 0x3B1FC80
	0x03AFB664 ADD W8, W20, W20, 0x5, LSL
	0x03AFB668 ADD W19, W19, 0x1
	0x03AFB66C CMP W19, W24
	0x03AFB670 EOR W20, W0, W8, 0x0
	0x03AFB674 B.GE 0x3AFB680
	0x03AFB678 CMP W19, W21
	0x03AFB67C B.LT 0x3AFB61C
	0x03AFB680 MOV W0, W20
	0x03AFB684 LDP X20, X19, [X31 + 0x50]
	0x03AFB688 LDP X22, X21, [X31 + 0x40]
	0x03AFB68C LDP X24, X23, [X31 + 0x30]
	0x03AFB690 LDP X26, X25, [X31 + 0x20]
	0x03AFB694 LDR X30, [X31 + 0x10]
	0x03AFB698 ADD X31, X31, 0x60
	0x03AFB69C RET
	0x03AFB6A0 SUB X31, X31, 0x70
	0x03AFB6A4 STP X29, X30, [X31 + 0x10]
	0x03AFB6A8 STP X28, X27, [X31 + 0x20]
	0x03AFB6AC STP X26, X25, [X31 + 0x30]
	0x03AFB6B0 STP X24, X23, [X31 + 0x40]
	0x03AFB6B4 STP X22, X21, [X31 + 0x50]
	0x03AFB6B8 STP X20, X19, [X31 + 0x60]
	0x03AFB6BC ADRP X25, 0x8E7000
	0x03AFB6C0 LDRB W8, [X25 + 0x645]
	0x03AFB6C4 MOV X19, X5
	0x03AFB6C8 MOV X20, X4
	0x03AFB6CC MOV X22, X3
	0x03AFB6D0 MOV W24, W2
	0x03AFB6D4 MOV X23, X1
	0x03AFB6D8 MOV X21, X0
	0x03AFB6DC TBNZ X8, 0x0, 0x3AFB700
	0x03AFB6E0 ADRP X0, 0x65E000
	0x03AFB6E4 LDR X0, [X0 + 0x210]
	0x03AFB6E8 BL 0x1C16CF4
	0x03AFB6EC ADRP X0, 0x65E000
	0x03AFB6F0 LDR X0, [X0 + 0x200]
	0x03AFB6F4 BL 0x1C16CF4
	0x03AFB6F8 MOVZ W8, 0x1
	0x03AFB6FC STRB W8, [X25 + 0x645]
	0x03AFB700 ADD W2, W24, 0x7
	0x03AFB704 MOV X1, X23
	0x03AFB708 MOV X3, X22
	0x03AFB70C STR W31, [X31 + 0x4]
	0x03AFB710 BL 0x3AFCA8C
	0x03AFB714 MOV W1, W0
	0x03AFB718 MOV X0, X21
	0x03AFB71C BL 0x3AF77B8
	0x03AFB720 CBZ X0, 0x3AFBA98
	0x03AFB724 LDR W8, [X22]
	0x03AFB728 CBZ W8, 0x3AFBA94
	0x03AFB72C LDR W9, [X21 + 0x5C8]
	0x03AFB730 LDR X8, [X21 + 0x5C0]
	0x03AFB734 ADD W9, W9, 0x1
	0x03AFB738 STR W9, [X21 + 0x5C8]
	0x03AFB73C CBZ X8, 0x3AFBAB8
	0x03AFB740 LDR W10, [X8 + 0x18]
	0x03AFB744 CMP W9, W10
	0x03AFB748 B.CS 0x3AFBA7C
	0x03AFB74C ADRP X10, 0x65E000
	0x03AFB750 LDR W1, [X0 + 0x18]
	0x03AFB754 LDR X10, [X10 + 0x210]
	0x03AFB758 SXTW X9, W9
	0x03AFB75C ADD X8, X8, X9, 0x5, LSL
	0x03AFB760 MOV X23, X0
	0x03AFB764 LDR X2, [X10]
	0x03AFB768 ADD X0, X8, 0x20
	0x03AFB76C BL 0x2671D30
	0x03AFB770 LDR X22, [X23 + 0x30]
	0x03AFB774 CBZ X22, 0x3AFBAB8
	0x03AFB778 LDR X25, [X22 + 0x18]
	0x03AFB77C STR X22, [X31 + 0x8]
	0x03AFB780 CMP W25, 0x1
	0x03AFB784 B.LT 0x3AFBA80
	0x03AFB788 CBZ W25, 0x3AFBA7C
	0x03AFB78C ADRP X26, 0x65E000
	0x03AFB790 LDR X26, [X26 + 0x200]
	0x03AFB794 MOVZ W28, 0xC72F
	0x03AFB798 MOVZ W29, 0x2CAE
	0x03AFB79C MOV W8, W25
	0x03AFB7A0 MOV W23, W31
	0x03AFB7A4 MOVZ W27, 0xC
	0x03AFB7A8 MOVK W28, 0x2B0000
	0x03AFB7AC MOVK W29, 0x320000
	0x03AFB7B0 ADD X9, X22, W23, 0x2, SXTW
	0x03AFB7B4 LDR W24, [X9 + 0x20]
	0x03AFB7B8 CMP W24, 0x5C
	0x03AFB7BC B.NE 0x3AFB86C
	0x03AFB7C0 ADD W9, W23, 0x1
	0x03AFB7C4 CMP W9, W25
	0x03AFB7C8 B.GE 0x3AFB82C
	0x03AFB7CC CMP W9, W8
	0x03AFB7D0 B.CS 0x3AFBA7C
	0x03AFB7D4 ADD X8, X22, W9, 0x2, SXTW
	0x03AFB7D8 LDR W8, [X8 + 0x20]
	0x03AFB7DC CMP W8, 0x5C
	0x03AFB7E0 B.LE 0x3AFB814
	0x03AFB7E4 CMP W8, 0x6E
	0x03AFB7E8 B.EQ 0x3AFB834
	0x03AFB7EC CMP W8, 0x75
	0x03AFB7F0 B.NE 0x3AFB82C
	0x03AFB7F4 ADD W29, W23, 0x5
	0x03AFB7F8 CMP W29, W25
	0x03AFB7FC B.GE 0x3AFB97C
	0x03AFB800 ADD W2, W23, 0x2
	0x03AFB804 MOV X0, X21
	0x03AFB808 MOV X1, X22
	0x03AFB80C BL 0x3AFCB98
	0x03AFB810 B 0x3AFB85C
	0x03AFB814 CMP W8, 0x55
	0x03AFB818 B.EQ 0x3AFB840
	0x03AFB81C CMP W8, 0x5C
	0x03AFB820 B.NE 0x3AFB82C
	0x03AFB824 MOVZ W24, 0x5C
	0x03AFB828 B 0x3AFB838
	0x03AFB82C MOVZ W24, 0x5C
	0x03AFB830 B 0x3AFBA10
	0x03AFB834 MOVZ W24, 0xA
	0x03AFB838 MOV W23, W9
	0x03AFB83C B 0x3AFBA10
	0x03AFB840 ADD W29, W23, 0x9
	0x03AFB844 CMP W29, W25
	0x03AFB848 B.GE 0x3AFB97C
	0x03AFB84C ADD W2, W23, 0x2
	0x03AFB850 MOV X0, X21
	0x03AFB854 MOV X1, X22
	0x03AFB858 BL 0x3AFCC40
	0x03AFB85C MOV W23, W29
	0x03AFB860 MOVZ W29, 0x2CAE
	0x03AFB864 MOV W24, W0
	0x03AFB868 MOVK W29, 0x320000
	0x03AFB86C CMP W24, 0x3C
	0x03AFB870 B.NE 0x3AFBA10
	0x03AFB874 ADD W2, W23, 0x1
	0x03AFB878 MOV X1, X22
	0x03AFB87C BL 0x3AFCD88
	0x03AFB880 CMP W0, W28
	0x03AFB884 B.LE 0x3AFB8C8
	0x03AFB888 CMP W0, W29
	0x03AFB88C B.EQ 0x3AFB98C
	0x03AFB890 MOVZ W8, 0xBD17
	0x03AFB894 MOVK W8, 0x5F90000
	0x03AFB898 CMP W0, W8
	0x03AFB89C B.EQ 0x3AFB9E4
	0x03AFB8A0 MOVZ W8, 0xF418
	0x03AFB8A4 MOVK W8, 0x72E60000
	0x03AFB8A8 CMP W0, W8
	0x03AFB8AC B.NE 0x3AFBA0C
	0x03AFB8B0 MOV X0, X21
	0x03AFB8B4 MOV X3, X20
	0x03AFB8B8 MOV X4, X19
	0x03AFB8BC BL 0x3AFD2C0
	0x03AFB8C0 ADD W23, W23, 0x7
	0x03AFB8C4 B 0x3AFBA64
	0x03AFB8C8 CMP W0, 0x8D0
	0x03AFB8CC B.EQ 0x3AFB924
	0x03AFB8D0 CMP W0, W28
	0x03AFB8D4 B.NE 0x3AFBA0C
	0x03AFB8D8 LDR X8, [X20]
	0x03AFB8DC CBZ X8, 0x3AFBAB8
	0x03AFB8E0 LDR W9, [X19]
	0x03AFB8E4 LDR W10, [X8 + 0x18]
	0x03AFB8E8 CMP W9, W10
	0x03AFB8EC B.NE 0x3AFB90C
	0x03AFB8F0 LDR X2, [X26]
	0x03AFB8F4 MOV X0, X21
	0x03AFB8F8 MOV X1, X20
	0x03AFB8FC BL 0x2298F68
	0x03AFB900 LDR X8, [X20]
	0x03AFB904 CBZ X8, 0x3AFBAB8
	0x03AFB908 LDR W9, [X19]
	0x03AFB90C LDR W10, [X8 + 0x18]
	0x03AFB910 CMP W9, W10
	0x03AFB914 B.CS 0x3AFBA7C
	0x03AFB918 SMADDL X8, X9, X27, X8
	0x03AFB91C MOVZ W9, 0xA0
	0x03AFB920 B 0x3AFB9D4
	0x03AFB924 LDR X8, [X20]
	0x03AFB928 CBZ X8, 0x3AFBAB8
	0x03AFB92C LDR W9, [X19]
	0x03AFB930 LDR W10, [X8 + 0x18]
	0x03AFB934 CMP W9, W10
	0x03AFB938 B.NE 0x3AFB958
	0x03AFB93C LDR X2, [X26]
	0x03AFB940 MOV X0, X21
	0x03AFB944 MOV X1, X20
	0x03AFB948 BL 0x2298F68
	0x03AFB94C LDR X8, [X20]
	0x03AFB950 CBZ X8, 0x3AFBAB8
	0x03AFB954 LDR W9, [X19]
	0x03AFB958 LDR W10, [X8 + 0x18]
	0x03AFB95C CMP W9, W10
	0x03AFB960 B.CS 0x3AFBA7C
	0x03AFB964 SMADDL X8, X9, X27, X8
	0x03AFB968 MOVZ W9, 0xA
	0x03AFB96C STR W9, [X8 + 0x20]
	0x03AFB970 LDR W8, [X19]
	0x03AFB974 ADD W23, W23, 0x3
	0x03AFB978 B 0x3AFBA5C
	0x03AFB97C MOVZ W29, 0x2CAE
	0x03AFB980 MOVZ W24, 0x5C
	0x03AFB984 MOVK W29, 0x320000
	0x03AFB988 B 0x3AFBA10
	0x03AFB98C LDR X8, [X20]
	0x03AFB990 CBZ X8, 0x3AFBAB8
	0x03AFB994 LDR W9, [X19]
	0x03AFB998 LDR W10, [X8 + 0x18]
	0x03AFB99C CMP W9, W10
	0x03AFB9A0 B.NE 0x3AFB9C0
	0x03AFB9A4 LDR X2, [X26]
	0x03AFB9A8 MOV X0, X21
	0x03AFB9AC MOV X1, X20
	0x03AFB9B0 BL 0x2298F68
	0x03AFB9B4 LDR X8, [X20]
	0x03AFB9B8 CBZ X8, 0x3AFBAB8
	0x03AFB9BC LDR W9, [X19]
	0x03AFB9C0 LDR W10, [X8 + 0x18]
	0x03AFB9C4 CMP W9, W10
	0x03AFB9C8 B.CS 0x3AFBA7C
	0x03AFB9CC SMADDL X8, X9, X27, X8
	0x03AFB9D0 MOVZ W9, 0x200B
	0x03AFB9D4 STR W9, [X8 + 0x20]
	0x03AFB9D8 LDR W8, [X19]
	0x03AFB9DC ADD W23, W23, 0x5
	0x03AFB9E0 B 0x3AFBA5C
	0x03AFB9E4 ADD X1, X31, 0x8
	0x03AFB9E8 ADD X3, X31, 0x4
	0x03AFB9EC MOV X0, X21
	0x03AFB9F0 MOV W2, W23
	0x03AFB9F4 MOV X4, X20
	0x03AFB9F8 MOV X5, X19
	0x03AFB9FC BL 0x3AFCEA4
	0x03AFBA00 TBZ X0, 0x0, 0x3AFBA0C
	0x03AFBA04 LDR W23, [X31 + 0x4]
	0x03AFBA08 B 0x3AFBA64
	0x03AFBA0C MOVZ W24, 0x3C
	0x03AFBA10 LDR X8, [X20]
	0x03AFBA14 CBZ X8, 0x3AFBAB8
	0x03AFBA18 LDR W9, [X19]
	0x03AFBA1C LDR W10, [X8 + 0x18]
	0x03AFBA20 CMP W9, W10
	0x03AFBA24 B.NE 0x3AFBA44
	0x03AFBA28 LDR X2, [X26]
	0x03AFBA2C MOV X0, X21
	0x03AFBA30 MOV X1, X20
	0x03AFBA34 BL 0x2298F68
	0x03AFBA38 LDR X8, [X20]
	0x03AFBA3C CBZ X8, 0x3AFBAB8
	0x03AFBA40 LDR W9, [X19]
	0x03AFBA44 LDR W10, [X8 + 0x18]
	0x03AFBA48 CMP W9, W10
	0x03AFBA4C B.CS 0x3AFBA7C
	0x03AFBA50 SMADDL X8, X9, X27, X8
	0x03AFBA54 STR W24, [X8 + 0x20]
	0x03AFBA58 LDR W8, [X19]
	0x03AFBA5C ADD W8, W8, 0x1
	0x03AFBA60 STR W8, [X19]
	0x03AFBA64 ADD W23, W23, 0x1
	0x03AFBA68 CMP W23, W25
	0x03AFBA6C B.GE 0x3AFBA80
	0x03AFBA70 LDR W8, [X22 + 0x18]
	0x03AFBA74 CMP W23, W8
	0x03AFBA78 B.CC 0x3AFB7B0
	0x03AFBA7C BL 0x1C16F28
	0x03AFBA80 LDR W8, [X21 + 0x5C8]
	0x03AFBA84 MOVZ W0, 0x1
	0x03AFBA88 SUB W8, W8, 0x1
	0x03AFBA8C STR W8, [X21 + 0x5C8]
	0x03AFBA90 B 0x3AFBA98
	0x03AFBA94 MOV W0, W31
	0x03AFBA98 LDP X20, X19, [X31 + 0x60]
	0x03AFBA9C LDP X22, X21, [X31 + 0x50]
	0x03AFBAA0 LDP X24, X23, [X31 + 0x40]
	0x03AFBAA4 LDP X26, X25, [X31 + 0x30]
	0x03AFBAA8 LDP X28, X27, [X31 + 0x20]
	0x03AFBAAC LDP X29, X30, [X31 + 0x10]
	0x03AFBAB0 ADD X31, X31, 0x70
	0x03AFBAB4 RET
	0x03AFBAB8 BL 0x1C16F20
	0x03AFBABC SUB X31, X31, 0x70
	0x03AFBAC0 STP X29, X30, [X31 + 0x10]
	0x03AFBAC4 STP X28, X27, [X31 + 0x20]
	0x03AFBAC8 STP X26, X25, [X31 + 0x30]
	0x03AFBACC STP X24, X23, [X31 + 0x40]
	0x03AFBAD0 STP X22, X21, [X31 + 0x50]
	0x03AFBAD4 STP X20, X19, [X31 + 0x60]
	0x03AFBAD8 ADRP X22, 0x8E7000
	0x03AFBADC LDRB W8, [X22 + 0x647]
	0x03AFBAE0 MOV X20, X4
	0x03AFBAE4 MOV X21, X3
	0x03AFBAE8 MOV X19, X0
	0x03AFBAEC TBNZ X8, 0x0, 0x3AFBB10
	0x03AFBAF0 ADRP X0, 0x65E000
	0x03AFBAF4 LDR X0, [X0 + 0x218]
	0x03AFBAF8 BL 0x1C16CF4
	0x03AFBAFC ADRP X0, 0x65E000
	0x03AFBB00 LDR X0, [X0 + 0x200]
	0x03AFBB04 BL 0x1C16CF4
	0x03AFBB08 MOVZ W8, 0x1
	0x03AFBB0C STRB W8, [X22 + 0x647]
	0x03AFBB10 STR W31, [X31 + 0x4]
	0x03AFBB14 LDR X8, [X19 + 0x5C0]
	0x03AFBB18 CBZ X8, 0x3AFBEA4
	0x03AFBB1C LDR W9, [X19 + 0x5C8]
	0x03AFBB20 LDR W10, [X8 + 0x18]
	0x03AFBB24 ADD W9, W9, 0x1
	0x03AFBB28 CMP W9, W10
	0x03AFBB2C B.CS 0x3AFBE74
	0x03AFBB30 ADRP X10, 0x65E000
	0x03AFBB34 LDR X10, [X10 + 0x218]
	0x03AFBB38 SXTW X9, W9
	0x03AFBB3C ADD X8, X8, X9, 0x5, LSL
	0x03AFBB40 ADD X0, X8, 0x20
	0x03AFBB44 LDR X1, [X10]
	0x03AFBB48 BL 0x2671DF8
	0x03AFBB4C MOV W1, W0
	0x03AFBB50 MOV X0, X19
	0x03AFBB54 BL 0x3AF77B8
	0x03AFBB58 CBZ X0, 0x3AFBE84
	0x03AFBB5C LDR W8, [X19 + 0x5C8]
	0x03AFBB60 ADD W8, W8, 0x1
	0x03AFBB64 STR W8, [X19 + 0x5C8]
	0x03AFBB68 LDR X22, [X0 + 0x38]
	0x03AFBB6C CBZ X22, 0x3AFBEA4
	0x03AFBB70 LDR X25, [X22 + 0x18]
	0x03AFBB74 STR X22, [X31 + 0x8]
	0x03AFBB78 CMP W25, 0x1
	0x03AFBB7C B.LT 0x3AFBE7C
	0x03AFBB80 CBZ W25, 0x3AFBE74
	0x03AFBB84 ADRP X26, 0x65E000
	0x03AFBB88 LDR X26, [X26 + 0x200]
	0x03AFBB8C MOVZ W28, 0xC72F
	0x03AFBB90 MOVZ W29, 0x2CAE
	0x03AFBB94 MOV W8, W25
	0x03AFBB98 MOV W23, W31
	0x03AFBB9C MOVZ W27, 0xC
	0x03AFBBA0 MOVK W28, 0x2B0000
	0x03AFBBA4 MOVK W29, 0x320000
	0x03AFBBA8 ADD X9, X22, W23, 0x2, SXTW
	0x03AFBBAC LDR W24, [X9 + 0x20]
	0x03AFBBB0 CMP W24, 0x5C
	0x03AFBBB4 B.NE 0x3AFBC64
	0x03AFBBB8 ADD W9, W23, 0x1
	0x03AFBBBC CMP W9, W25
	0x03AFBBC0 B.GE 0x3AFBC24
	0x03AFBBC4 CMP W9, W8
	0x03AFBBC8 B.CS 0x3AFBE74
	0x03AFBBCC ADD X8, X22, W9, 0x2, SXTW
	0x03AFBBD0 LDR W8, [X8 + 0x20]
	0x03AFBBD4 CMP W8, 0x5C
	0x03AFBBD8 B.LE 0x3AFBC0C
	0x03AFBBDC CMP W8, 0x6E
	0x03AFBBE0 B.EQ 0x3AFBC2C
	0x03AFBBE4 CMP W8, 0x75
	0x03AFBBE8 B.NE 0x3AFBC24
	0x03AFBBEC ADD W29, W23, 0x5
	0x03AFBBF0 CMP W29, W25
	0x03AFBBF4 B.GE 0x3AFBD74
	0x03AFBBF8 ADD W2, W23, 0x2
	0x03AFBBFC MOV X0, X19
	0x03AFBC00 MOV X1, X22
	0x03AFBC04 BL 0x3AFCB98
	0x03AFBC08 B 0x3AFBC54
	0x03AFBC0C CMP W8, 0x55
	0x03AFBC10 B.EQ 0x3AFBC38
	0x03AFBC14 CMP W8, 0x5C
	0x03AFBC18 B.NE 0x3AFBC24
	0x03AFBC1C MOVZ W24, 0x5C
	0x03AFBC20 B 0x3AFBC30
	0x03AFBC24 MOVZ W24, 0x5C
	0x03AFBC28 B 0x3AFBE08
	0x03AFBC2C MOVZ W24, 0xA
	0x03AFBC30 MOV W23, W9
	0x03AFBC34 B 0x3AFBE08
	0x03AFBC38 ADD W29, W23, 0x9
	0x03AFBC3C CMP W29, W25
	0x03AFBC40 B.GE 0x3AFBD74
	0x03AFBC44 ADD W2, W23, 0x2
	0x03AFBC48 MOV X0, X19
	0x03AFBC4C MOV X1, X22
	0x03AFBC50 BL 0x3AFCC40
	0x03AFBC54 MOV W23, W29
	0x03AFBC58 MOVZ W29, 0x2CAE
	0x03AFBC5C MOV W24, W0
	0x03AFBC60 MOVK W29, 0x320000
	0x03AFBC64 CMP W24, 0x3C
	0x03AFBC68 B.NE 0x3AFBE08
	0x03AFBC6C ADD W2, W23, 0x1
	0x03AFBC70 MOV X1, X22
	0x03AFBC74 BL 0x3AFCD88
	0x03AFBC78 CMP W0, W28
	0x03AFBC7C B.LE 0x3AFBCC0
	0x03AFBC80 CMP W0, W29
	0x03AFBC84 B.EQ 0x3AFBD84
	0x03AFBC88 MOVZ W8, 0xBD17
	0x03AFBC8C MOVK W8, 0x5F90000
	0x03AFBC90 CMP W0, W8
	0x03AFBC94 B.EQ 0x3AFBDDC
	0x03AFBC98 MOVZ W8, 0xF418
	0x03AFBC9C MOVK W8, 0x72E60000
	0x03AFBCA0 CMP W0, W8
	0x03AFBCA4 B.NE 0x3AFBE04
	0x03AFBCA8 MOV X0, X19
	0x03AFBCAC MOV X3, X21
	0x03AFBCB0 MOV X4, X20
	0x03AFBCB4 BL 0x3AFD2C0

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x8E8000
	015 Move W8, [X20+1603]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0x65F000
	022 Move X0, [X0+496]
	023 Call 0x1C17CF4
	024 Move X0, 0x65F000
	025 Move X0, [X0+504]
	026 Call 0x1C17CF4
	027 Move X0, 0x65F000
	028 Move X0, [X0+512]
	029 Call 0x1C17CF4
	030 Move X0, 0x65F000
	031 Move X0, [X0+520]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+1603], W8
	035 Move [X31+8], W31
	036 Move X8, [X19+1144]
	037 Compare X8, 0
	038 JumpIfEqual {649}
	039 Move W21, [X19+1720]
	040 Move W8, [X8+24]
	041 Move X22, 0x65F000
	042 Move X22, [X22+504]
	043 Add X20, X19, 1144
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X8, 0x65F000
	046 Move X8, [X8+520]
	047 Move X0, X19
	048 Move X1, X20
	049 Move W2, W21
	050 Move X3, [X8]
	051 Call TMP_Text.ResizeInternalArray, X0, X1, X2
	052 Move X0, [X19+1472]
	053 Move X2, [X22]
	054 Move W1, W31
	055 Call TMP_TextProcessingStack`1<Int32>.SetDefault, X0, X1
	056 Move X0, X19
	057 Move [X19+1480], W31
	058 Move [X31+12], W31
	059 Call TMP_Text.get_textStyle, X0
	060 Compare X0, 0
	061 JumpIfEqual {649}
	062 Move W8, [X0+24]
	063 Move W9, 0x50F3
	064 NotImplemented "Instruction MOVK not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X1, [X19+456]
	067 Add X4, X31, 12
	068 Move X0, X19
	069 Move X3, X20
	070 Call TMP_Text.InsertOpeningStyleTag, X0, X1, X2, X3, X4
	071 Move X29, 0x65F000
	072 Move X29, [X29+512]
	073 Subtract W27, W21, 1
	074 Move W23, W31
	075 Add X22, X19, 1712
	076 Move W28, 12
	077 Move X0, X22
	078 Move W1, W23
	079 Move X2, X31
	080 Call TextBackingContainer.get_Item, X0, X1
	081 Compare W0, 0
	082 JumpIfEqual {601}
	083 Move W26, W0
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move W8, [X19+1024]
	086 Compare W8, 0
	087 JumpIfNotEqual {122}
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Add W25, W23, 1
	090 Move X0, X22
	091 Move W1, W25
	092 Move X2, X31
	093 Call TextBackingContainer.get_Item, X0, X1
	094 Subtract W8, W0, 110
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X11, -49688576
	097 Add X11, X11, 3188
	098 NotImplemented "Instruction ADR not yet implemented."
	099 NotImplemented "Instruction LDRH not yet implemented."
	100 Add X9, X9, X10
	101 CallNoReturn X9
	102 Move W8, [X19+771]
	103 Compare W8, 0
	104 JumpIfEqual {568}
	105 Move X8, [X20]
	106 Compare X8, 0
	107 JumpIfEqual {649}
	108 NotImplemented "Instruction LDRSW not yet implemented."
	109 Move W9, [X8+24]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move X2, [X29]
	112 Move X0, X19
	113 Move X1, X20
	114 Call TMP_Text.ResizeInternalArray, X0, X1
	115 Move X8, [X19+1144]
	116 Compare X8, 0
	117 JumpIfEqual {649}
	118 Move W9, [X8+24]
	119 NotImplemented "Instruction CMP not yet implemented."
	120 NotImplemented "Instruction MADD not yet implemented."
	121 Move W11, 10
	122 Move W8, W26
	123 ShiftRight W8, 10
	124 And W8, W8, 0x7FFFFFFF
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Add W24, W23, 1
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X0, X22
	129 Move W1, W24
	130 Move X2, X31
	131 Call TextBackingContainer.get_Item, X0, X1
	132 Move W8, W0
	133 ShiftRight W8, 10
	134 And W8, W8, 0x7FFFFFFF
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move X0, X22
	137 Move W1, W24
	138 Move X2, X31
	139 Call TextBackingContainer.get_Item, X0, X1
	140 Move W8, W0
	141 ShiftRight W8, 13
	142 And W8, W8, 0x7FFFFFFF
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Move X28, X29
	145 Move X29, [X20]
	146 Move [X31+4], W27
	147 Compare X29, 0
	148 JumpIfEqual {649}
	149 NotImplemented "Instruction LDRSW not yet implemented."
	150 Move W8, [X29+24]
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move X2, [X28]
	153 Move X0, X19
	154 Move X1, X20
	155 Call TMP_Text.ResizeInternalArray, X0, X1
	156 Move X29, [X19+1144]
	157 Compare X29, 0
	158 JumpIfEqual {649}
	159 Move X0, X22
	160 Move W1, W24
	161 Move X2, X31
	162 Call TextBackingContainer.get_Item, X0, X1
	163 Move X8, 0x65F000
	164 Move X8, [X8+496]
	165 Move W25, W0
	166 Move X8, [X8]
	167 Move W9, [X8+224]
	168 Compare W9, 0
	169 JumpIfNotEqual {172}
	170 Move X0, X8
	171 Call 0x1C17DFC
	172 Move W0, W26
	173 Move W1, W25
	174 Move X2, X31
	175 Call TMP_TextParsingUtilities.ConvertToUTF32, X0, X1
	176 Move W8, [X29+24]
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Move W8, 12
	179 NotImplemented "Instruction MADD not yet implemented."
	180 Move [X8+32], W0
	181 Move X8, [X20]
	182 Compare X8, 0
	183 JumpIfEqual {649}
	184 NotImplemented "Instruction LDRSW not yet implemented."
	185 Move W9, [X8+24]
	186 Move W27, [X31+4]
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Move X29, X28
	189 Move W28, 12
	190 NotImplemented "Instruction MADD not yet implemented."
	191 Move [X10+36], W23
	192 NotImplemented "Instruction LDRSW not yet implemented."
	193 NotImplemented "Instruction CMP not yet implemented."
	194 NotImplemented "Instruction MADD not yet implemented."
	195 Move W9, 2
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Move W8, [X19+770]
	198 Compare W8, 0
	199 JumpIfEqual {568}
	200 Move X1, [X19+1712]
	201 Move X2, [X19+1720]
	202 Add W3, W23, 1
	203 Call TMP_Text.GetMarkupTagHashCode, X0, X1, X2
	204 Move W8, 0xC72F
	205 NotImplemented "Instruction MOVK not yet implemented."
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Move W8, 0x2CAE
	208 NotImplemented "Instruction MOVK not yet implemented."
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Move W8, 0xBD17
	211 NotImplemented "Instruction MOVK not yet implemented."
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Move W8, 0xF418
	214 NotImplemented "Instruction MOVK not yet implemented."
	215 NotImplemented "Instruction CMP not yet implemented."
	216 NotImplemented "Instruction LDRSW not yet implemented."
	217 Add X4, X31, 12
	218 Move X0, X19
	219 Move X3, X20
	220 Call TMP_Text.ReplaceClosingStyleTag, X0, X1, X2, X3, X4
	221 Move W8, [X31+12]
	222 Move W11, 8
	223 NotImplemented "Instruction CMP not yet implemented."
	224 Move X9, [X20]
	225 Compare X9, 0
	226 JumpIfEqual {649}
	227 Move W8, [X9+24]
	228 NotImplemented "Instruction NOP not yet implemented."
	229 NotImplemented "Instruction MADD not yet implemented."
	230 Add X9, X9, 40
	231 NotImplemented "Instruction CMP not yet implemented."
	232 Move [X9-4], W23
	233 Move [X9], W11
	234 NotImplemented "Instruction LDRSW not yet implemented."
	235 Add X24, X24, 1
	236 Add X9, X9, 12
	237 NotImplemented "Instruction CMP not yet implemented."
	238 Add W24, W23, 7
	239 NotImplemented "Instruction CMP not yet implemented."
	240 NotImplemented "Instruction CMP not yet implemented."
	241 Move W8, [X19+771]
	242 Compare W8, 0
	243 JumpIfEqual {568}
	244 Add W24, W23, 2
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Move W28, W27
	247 Move X27, [X20]
	248 Compare X27, 0
	249 JumpIfEqual {649}
	250 NotImplemented "Instruction LDRSW not yet implemented."
	251 Move W8, [X27+24]
	252 Add W9, W26, 2
	253 NotImplemented "Instruction CMP not yet implemented."
	254 Move X2, [X29]
	255 Move X0, X19
	256 Move X1, X20
	257 Call TMP_Text.ResizeInternalArray, X0, X1
	258 Move X27, [X19+1144]
	259 Compare X27, 0
	260 JumpIfEqual {649}
	261 Move X0, X22
	262 Move W1, W25
	263 Move X2, X31
	264 Call TextBackingContainer.get_Item, X0, X1
	265 Move W8, [X27+24]
	266 NotImplemented "Instruction CMP not yet implemented."
	267 Move W8, 12
	268 NotImplemented "Instruction MADD not yet implemented."
	269 Move [X8+32], W0
	270 Move X25, [X20]
	271 Compare X25, 0
	272 JumpIfEqual {649}
	273 NotImplemented "Instruction LDRSW not yet implemented."
	274 Move W8, [X25+24]
	275 NotImplemented "Instruction CMP not yet implemented."
	276 Move W27, W28
	277 Move W28, 12
	278 NotImplemented "Instruction MADD not yet implemented."
	279 Move [X9+36], W23
	280 NotImplemented "Instruction LDRSW not yet implemented."
	281 NotImplemented "Instruction CMP not yet implemented."
	282 NotImplemented "Instruction MADD not yet implemented."
	283 Move W9, 1
	284 Move [X8+40], W9
	285 Move W26, [X31+12]
	286 Move X0, X22
	287 Move W1, W24
	288 Move X2, X31
	289 Call TextBackingContainer.get_Item, X0, X1
	290 Move W9, [X25+24]
	291 Add W8, W26, 1
	292 NotImplemented "Instruction CMP not yet implemented."
	293 NotImplemented "Instruction SMADDL not yet implemented."
	294 Move [X8+32], W0
	295 Move X8, [X20]
	296 Compare X8, 0
	297 JumpIfEqual {649}
	298 Move W10, [X31+12]
	299 Move W9, [X8+24]
	300 Add W10, W10, 1
	301 NotImplemented "Instruction CMP not yet implemented."
	302 NotImplemented "Instruction SMADDL not yet implemented."
	303 Move [X10+36], W23
	304 Move W10, [X31+12]
	305 Add W10, W10, 1
	306 NotImplemented "Instruction CMP not yet implemented."
	307 NotImplemented "Instruction SMADDL not yet implemented."
	308 Move W9, 1
	309 Move [X8+40], W9
	310 Move W8, [X31+12]
	311 Add W8, W8, 2
	312 NotImplemented "Instruction CMP not yet implemented."
	313 Move W8, 0xC72F
	314 NotImplemented "Instruction MOVK not yet implemented."
	315 NotImplemented "Instruction CMP not yet implemented."
	316 Move X8, [X20]
	317 Compare X8, 0
	318 JumpIfEqual {649}
	319 NotImplemented "Instruction LDRSW not yet implemented."
	320 Move W9, [X8+24]
	321 NotImplemented "Instruction CMP not yet implemented."
	322 Move X2, [X29]
	323 Move X0, X19
	324 Move X1, X20
	325 Call TMP_Text.ResizeInternalArray, X0, X1
	326 Move X8, [X19+1144]
	327 Compare X8, 0
	328 JumpIfEqual {649}
	329 Move W9, [X8+24]
	330 NotImplemented "Instruction CMP not yet implemented."
	331 NotImplemented "Instruction MADD not yet implemented."
	332 Move W11, 160
	333 Move W8, [X19+771]
	334 Compare W8, 0
	335 JumpIfEqual {568}
	336 Move X8, [X20]
	337 Compare X8, 0
	338 JumpIfEqual {649}
	339 NotImplemented "Instruction LDRSW not yet implemented."
	340 Move W9, [X8+24]
	341 NotImplemented "Instruction CMP not yet implemented."
	342 Move X2, [X29]
	343 Move X0, X19
	344 Move X1, X20
	345 Call TMP_Text.ResizeInternalArray, X0, X1
	346 Move X8, [X19+1144]
	347 Compare X8, 0
	348 JumpIfEqual {649}
	349 Move W9, [X8+24]
	350 NotImplemented "Instruction CMP not yet implemented."
	351 NotImplemented "Instruction MADD not yet implemented."
	352 Move W11, 13
	353 Move W8, [X19+771]
	354 Compare W8, 0
	355 JumpIfEqual {568}
	356 Move X8, [X20]
	357 Compare X8, 0
	358 JumpIfEqual {649}
	359 NotImplemented "Instruction LDRSW not yet implemented."
	360 Move W9, [X8+24]
	361 NotImplemented "Instruction CMP not yet implemented."
	362 Move X2, [X29]
	363 Move X0, X19
	364 Move X1, X20
	365 Call TMP_Text.ResizeInternalArray, X0, X1
	366 Move X8, [X19+1144]
	367 Compare X8, 0
	368 JumpIfEqual {649}
	369 Move W9, [X8+24]
	370 NotImplemented "Instruction CMP not yet implemented."
	371 NotImplemented "Instruction MADD not yet implemented."
	372 Move W11, 9
	373 Add W24, W23, 5
	374 NotImplemented "Instruction CMP not yet implemented."
	375 Move X26, [X20]
	376 Compare X26, 0
	377 JumpIfEqual {649}
	378 NotImplemented "Instruction LDRSW not yet implemented."
	379 Move W8, [X26+24]
	380 NotImplemented "Instruction CMP not yet implemented."
	381 Move X2, [X29]
	382 Move X0, X19
	383 Move X1, X20
	384 Call TMP_Text.ResizeInternalArray, X0, X1
	385 Move X26, [X19+1144]
	386 Compare X26, 0
	387 JumpIfEqual {649}
	388 Move X1, [X19+1712]
	389 Move X2, [X19+1720]
	390 Add W3, W23, 2
	391 Move X0, X19
	392 Call TMP_Text.GetUTF16, X0, X1, X2
	393 Move W8, [X26+24]
	394 NotImplemented "Instruction CMP not yet implemented."
	395 NotImplemented "Instruction MADD not yet implemented."
	396 Move [X8+32], W0
	397 Move X8, [X20]
	398 Compare X8, 0
	399 JumpIfEqual {649}
	400 NotImplemented "Instruction LDRSW not yet implemented."
	401 Move W9, [X8+24]
	402 NotImplemented "Instruction CMP not yet implemented."
	403 NotImplemented "Instruction MADD not yet implemented."
	404 Move [X10+36], W23
	405 NotImplemented "Instruction LDRSW not yet implemented."
	406 NotImplemented "Instruction CMP not yet implemented."
	407 NotImplemented "Instruction MADD not yet implemented."
	408 Move W9, 6
	409 Move W8, [X19+771]
	410 Compare W8, 0
	411 JumpIfEqual {568}
	412 Move X8, [X20]
	413 Compare X8, 0
	414 JumpIfEqual {649}
	415 NotImplemented "Instruction LDRSW not yet implemented."
	416 Move W9, [X8+24]
	417 NotImplemented "Instruction CMP not yet implemented."
	418 Move X2, [X29]
	419 Move X0, X19
	420 Move X1, X20
	421 Call TMP_Text.ResizeInternalArray, X0, X1
	422 Move X8, [X19+1144]
	423 Compare X8, 0
	424 JumpIfEqual {649}
	425 Move W9, [X8+24]
	426 NotImplemented "Instruction CMP not yet implemented."
	427 NotImplemented "Instruction MADD not yet implemented."
	428 Move W11, 11
	429 Move [X10+32], W11
	430 NotImplemented "Instruction LDRSW not yet implemented."
	431 NotImplemented "Instruction CMP not yet implemented."
	432 NotImplemented "Instruction MADD not yet implemented."
	433 Move [X10+36], W23
	434 NotImplemented "Instruction LDRSW not yet implemented."
	435 NotImplemented "Instruction CMP not yet implemented."
	436 NotImplemented "Instruction MADD not yet implemented."
	437 Move W9, 1
	438 Move [X8+40], W9
	439 Move W8, [X31+12]
	440 Move W24, W25
	441 Add W24, W23, 9
	442 NotImplemented "Instruction CMP not yet implemented."
	443 Move X26, [X20]
	444 Compare X26, 0
	445 JumpIfEqual {649}
	446 NotImplemented "Instruction LDRSW not yet implemented."
	447 Move W8, [X26+24]
	448 NotImplemented "Instruction CMP not yet implemented."
	449 Move X2, [X29]
	450 Move X0, X19
	451 Move X1, X20
	452 Call TMP_Text.ResizeInternalArray, X0, X1
	453 Move X26, [X19+1144]
	454 Compare X26, 0
	455 JumpIfEqual {649}
	456 Move X1, [X19+1712]
	457 Move X2, [X19+1720]
	458 Add W3, W23, 2
	459 Move X0, X19
	460 Call TMP_Text.GetUTF32, X0, X1, X2
	461 Move W8, [X26+24]
	462 NotImplemented "Instruction CMP not yet implemented."
	463 NotImplemented "Instruction MADD not yet implemented."
	464 Move [X8+32], W0
	465 Move X8, [X20]
	466 Compare X8, 0
	467 JumpIfEqual {649}
	468 NotImplemented "Instruction LDRSW not yet implemented."
	469 Move W9, [X8+24]
	470 NotImplemented "Instruction CMP not yet implemented."
	471 NotImplemented "Instruction MADD not yet implemented."
	472 Move [X10+36], W23
	473 NotImplemented "Instruction LDRSW not yet implemented."
	474 NotImplemented "Instruction CMP not yet implemented."
	475 NotImplemented "Instruction MADD not yet implemented."
	476 Move W9, 10
	477 Move [X8+40], W9
	478 Move W8, [X31+12]
	479 Move X8, [X20]
	480 Compare X8, 0
	481 JumpIfEqual {649}
	482 NotImplemented "Instruction LDRSW not yet implemented."
	483 Move W9, [X8+24]
	484 NotImplemented "Instruction CMP not yet implemented."
	485 Move X2, [X29]
	486 Move X0, X19
	487 Move X1, X20
	488 Call TMP_Text.ResizeInternalArray, X0, X1
	489 Move X8, [X19+1144]
	490 Compare X8, 0
	491 JumpIfEqual {649}
	492 Move W9, [X8+24]
	493 NotImplemented "Instruction CMP not yet implemented."
	494 NotImplemented "Instruction MADD not yet implemented."
	495 Move W11, 10
	496 Move [X10+32], W11
	497 NotImplemented "Instruction LDRSW not yet implemented."
	498 NotImplemented "Instruction CMP not yet implemented."
	499 NotImplemented "Instruction MADD not yet implemented."
	500 Move [X10+36], W23
	501 NotImplemented "Instruction LDRSW not yet implemented."
	502 NotImplemented "Instruction CMP not yet implemented."
	503 NotImplemented "Instruction MADD not yet implemented."
	504 Move W9, 4
	505 Move [X8+40], W9
	506 Move W8, [X31+12]
	507 Add W24, W23, 3
	508 Move X8, [X20]
	509 Compare X8, 0
	510 JumpIfEqual {649}
	511 NotImplemented "Instruction LDRSW not yet implemented."
	512 Move W9, [X8+24]
	513 NotImplemented "Instruction CMP not yet implemented."
	514 Move X2, [X29]
	515 Move X0, X19
	516 Move X1, X20
	517 Call TMP_Text.ResizeInternalArray, X0, X1
	518 Move X8, [X19+1144]
	519 Compare X8, 0
	520 JumpIfEqual {649}
	521 Move W9, [X8+24]
	522 NotImplemented "Instruction CMP not yet implemented."
	523 NotImplemented "Instruction MADD not yet implemented."
	524 Move W11, 0x200B
	525 Move [X10+32], W11
	526 NotImplemented "Instruction LDRSW not yet implemented."
	527 NotImplemented "Instruction CMP not yet implemented."
	528 NotImplemented "Instruction MADD not yet implemented."
	529 Move [X10+36], W23
	530 NotImplemented "Instruction LDRSW not yet implemented."
	531 NotImplemented "Instruction CMP not yet implemented."
	532 NotImplemented "Instruction MADD not yet implemented."
	533 Move W9, 6
	534 Move [X8+40], W9
	535 Move W8, [X31+12]
	536 Add W24, W23, 5
	537 NotImplemented "Instruction LDRSW not yet implemented."
	538 Add X3, X31, 8
	539 Add X5, X31, 12
	540 Move X0, X19
	541 Move X1, X22
	542 Move W2, W23
	543 Move X4, X20
	544 Call TMP_Text.ReplaceOpeningStyleTag, X0, X1, X2, X3, X4, X5
	545 Move TEMP, X0
	546 And TEMP, TEMP, 1
	547 Compare TEMP, 1
	548 JumpIfNotEqual {568}
	549 Move W8, [X31+12]
	550 NotImplemented "Instruction CMP not yet implemented."
	551 Move X9, [X20]
	552 Compare X9, 0
	553 JumpIfEqual {649}
	554 Move W24, [X31+8]
	555 Move W8, [X9+24]
	556 NotImplemented "Instruction NOP not yet implemented."
	557 NotImplemented "Instruction MADD not yet implemented."
	558 Add X10, X10, 40
	559 Subtract W9, W24, W23
	560 Add W9, W9, 1
	561 NotImplemented "Instruction CMP not yet implemented."
	562 Move [X10-4], W23
	563 Move [X10], W9
	564 NotImplemented "Instruction LDRSW not yet implemented."
	565 Add X25, X25, 1
	566 Add X10, X10, 12
	567 NotImplemented "Instruction CMP not yet implemented."
	568 Move X8, [X20]
	569 Compare X8, 0
	570 JumpIfEqual {649}
	571 NotImplemented "Instruction LDRSW not yet implemented."
	572 Move W9, [X8+24]
	573 NotImplemented "Instruction CMP not yet implemented."
	574 Move X2, [X29]
	575 Move X0, X19
	576 Move X1, X20
	577 Call TMP_Text.ResizeInternalArray, X0, X1
	578 Move X8, [X19+1144]
	579 Compare X8, 0
	580 JumpIfEqual {649}
	581 Move W9, [X8+24]
	582 NotImplemented "Instruction CMP not yet implemented."
	583 NotImplemented "Instruction MADD not yet implemented."
	584 Move [X10+32], W26
	585 NotImplemented "Instruction LDRSW not yet implemented."
	586 NotImplemented "Instruction CMP not yet implemented."
	587 NotImplemented "Instruction MADD not yet implemented."
	588 Move [X10+36], W23
	589 NotImplemented "Instruction LDRSW not yet implemented."
	590 NotImplemented "Instruction CMP not yet implemented."
	591 NotImplemented "Instruction MADD not yet implemented."
	592 Move W9, 1
	593 Move [X8+40], W9
	594 Move W8, [X31+12]
	595 Move W24, W23
	596 Add W8, W8, 1
	597 Move [X31+12], W8
	598 Add W23, W24, 1
	599 NotImplemented "Instruction CMP not yet implemented."
	600 Move W24, [X31+8]
	601 Move X0, X19
	602 Move [X19+1480], W31
	603 Call TMP_Text.get_textStyle, X0
	604 Compare X0, 0
	605 JumpIfEqual {649}
	606 Move W8, [X0+24]
	607 Move W9, 0x50F3
	608 NotImplemented "Instruction MOVK not yet implemented."
	609 NotImplemented "Instruction CMP not yet implemented."
	610 Add X2, X31, 12
	611 Move X0, X19
	612 Move X1, X20
	613 Call TMP_Text.InsertClosingStyleTag, X0, X1, X2
	614 Move X8, [X20]
	615 Compare X8, 0
	616 JumpIfEqual {649}
	617 NotImplemented "Instruction LDRSW not yet implemented."
	618 Move W9, [X8+24]
	619 NotImplemented "Instruction CMP not yet implemented."
	620 Move X2, [X29]
	621 Move X0, X19
	622 Move X1, X20
	623 Call TMP_Text.ResizeInternalArray, X0, X1
	624 Move X8, [X19+1144]
	625 Compare X8, 0
	626 JumpIfEqual {649}
	627 Move W9, [X8+24]
	628 NotImplemented "Instruction CMP not yet implemented."
	629 Move W9, 12
	630 NotImplemented "Instruction MADD not yet implemented."
	631 Move [X8+32], W31
	632 Move W8, [X31+12]
	633 Move X22, [X31+80]
	634 Move X21, [X31+88]
	635 Move X24, [X31+64]
	636 Move X23, [X31+72]
	637 Move X26, [X31+48]
	638 Move X25, [X31+56]
	639 Move [X19+1152], W8
	640 Move X20, [X31+96]
	641 Move X19, [X31+104]
	642 Move X28, [X31+32]
	643 Move X27, [X31+40]
	644 Move X29, [X31+16]
	645 Move X30, [X31+24]
	646 Add X31, X31, 112
	647 Return 
	648 Call 0x1C17F28
	649 Call 0x1C17F20

Method: System.Void SetTextInternal(System.String sourceText)

Disassembly:
	0x03AFD26C CMP W23, W25
	0x03AFD270 B.GE 0x3AFD284
	0x03AFD274 LDR W8, [X22 + 0x18]
	0x03AFD278 CMP W23, W8
	0x03AFD27C B.CC 0x3AFCFB4
	0x03AFD280 BL 0x1C16F28
	0x03AFD284 LDR W8, [X21 + 0x5C8]
	0x03AFD288 MOVZ W0, 0x1
	0x03AFD28C SUB W8, W8, 0x1
	0x03AFD290 STR W8, [X21 + 0x5C8]
	0x03AFD294 B 0x3AFD29C
	0x03AFD298 MOV W0, W31
	0x03AFD29C LDP X20, X19, [X31 + 0x60]
	0x03AFD2A0 LDP X22, X21, [X31 + 0x50]
	0x03AFD2A4 LDP X24, X23, [X31 + 0x40]
	0x03AFD2A8 LDP X26, X25, [X31 + 0x30]
	0x03AFD2AC LDP X28, X27, [X31 + 0x20]
	0x03AFD2B0 LDP X29, X30, [X31 + 0x10]
	0x03AFD2B4 ADD X31, X31, 0x70

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Compare X1, 0
	006 JumpIfEqual {8}
	007 Move W3, [X1+16]
	008 Move W3, W31
	009 Move X0, X19
	010 Move W2, W31
	011 Call TMP_Text.PopulateTextBackingArray, X0, X1, X2, X3
	012 Move W20, [X19+1024]
	013 Move W8, 3
	014 Move X0, X19
	015 Move [X19+1024], W8
	016 Call TMP_Text.PopulateTextProcessingArray, X0
	017 Move [X19+1024], W20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return 

Method: System.Void SetText(System.String sourceText, System.Boolean syncTextInputBox = True)

Disassembly:
	0x03AFD2B8 RET
	0x03AFD2BC BL 0x1C16F20
	0x03AFD2C0 SUB X31, X31, 0x70
	0x03AFD2C4 STP X29, X30, [X31 + 0x10]
	0x03AFD2C8 STP X28, X27, [X31 + 0x20]
	0x03AFD2CC STP X26, X25, [X31 + 0x30]
	0x03AFD2D0 STP X24, X23, [X31 + 0x40]
	0x03AFD2D4 STP X22, X21, [X31 + 0x50]
	0x03AFD2D8 STP X20, X19, [X31 + 0x60]
	0x03AFD2DC ADRP X22, 0x8E5000
	0x03AFD2E0 LDRB W8, [X22 + 0x648]
	0x03AFD2E4 MOV X20, X4
	0x03AFD2E8 MOV X21, X3
	0x03AFD2EC MOV X19, X0
	0x03AFD2F0 TBNZ X8, 0x0, 0x3AFD314
	0x03AFD2F4 ADRP X0, 0x65C000
	0x03AFD2F8 LDR X0, [X0 + 0x218]
	0x03AFD2FC BL 0x1C16CF4
	0x03AFD300 ADRP X0, 0x65C000
	0x03AFD304 LDR X0, [X0 + 0x200]
	0x03AFD308 BL 0x1C16CF4
	0x03AFD30C MOVZ W8, 0x1
	0x03AFD310 STRB W8, [X22 + 0x648]
	0x03AFD314 STR W31, [X31 + 0x4]
	0x03AFD318 LDR X8, [X19 + 0x5C0]
	0x03AFD31C CBZ X8, 0x3AFD6A8
	0x03AFD320 LDR W9, [X19 + 0x5C8]
	0x03AFD324 LDR W10, [X8 + 0x18]
	0x03AFD328 ADD W9, W9, 0x1
	0x03AFD32C CMP W9, W10
	0x03AFD330 B.CS 0x3AFD678

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X19, X0
	006 Compare X1, 0
	007 JumpIfEqual {9}
	008 Move W3, [X20+16]
	009 Move W3, W31
	010 Move X0, X19
	011 Move X1, X20
	012 Move W2, W31
	013 Call TMP_Text.PopulateTextBackingArray, X0, X1, X2, X3
	014 Move W8, 3
	015 Move X0, X19
	016 Move [X19+216], X20
	017 Move [X19+1024], W8
	018 Call TMP_Text.PopulateTextProcessingArray, X0
	019 Move X8, [X19]
	020 Move W9, 1
	021 Move [X19+880], W9
	022 Move X0, X19
	023 Move X9, [X8+760]
	024 Move X1, [X8+768]
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Move X8, [X19]
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, [X8+744]
	031 Move X1, [X8+752]
	032 Move X30, [X31+32]
	033 CallNoReturn X2

Method: System.Void SetText(System.String sourceText, System.Single arg0)

Disassembly:
	0x03AFD334 ADRP X10, 0x65C000
	0x03AFD338 LDR X10, [X10 + 0x218]
	0x03AFD33C SXTW X9, W9
	0x03AFD340 ADD X8, X8, X9, 0x5, LSL
	0x03AFD344 ADD X0, X8, 0x20
	0x03AFD348 LDR X1, [X10]
	0x03AFD34C BL 0x2671DF8
	0x03AFD350 MOV W1, W0

ISIL:
	001 Move S1, W31
	002 Move S2, W31
	003 Move S3, W31
	004 Move S4, W31
	005 Move S5, W31
	006 Move S6, W31
	007 Move S7, W31

Method: System.Void SetText(System.String sourceText, System.Single arg0, System.Single arg1)

Disassembly:
	0x03AFD614 LDR W9, [X20]
	0x03AFD618 LDR W10, [X8 + 0x18]
	0x03AFD61C CMP W9, W10
	0x03AFD620 B.NE 0x3AFD640
	0x03AFD624 LDR X2, [X26]
	0x03AFD628 MOV X0, X19
	0x03AFD62C MOV X1, X21

ISIL:
	001 Move S2, W31
	002 Move S3, W31
	003 Move S4, W31
	004 Move S5, W31
	005 Move S6, W31
	006 Move S7, W31
	007 Call TMP_Text.SetText, X0, X1, V0, V1, V2, V3, V4, V5, V6, V7
	008 Return 

Method: System.Void SetText(System.String sourceText, System.Single arg0, System.Single arg1, System.Single arg2)

Disassembly:
	0x03AFD630 BL 0x2298F68
	0x03AFD634 LDR X8, [X21]
	0x03AFD638 CBZ X8, 0x3AFD6A8
	0x03AFD63C LDR W9, [X20]
	0x03AFD640 LDR W10, [X8 + 0x18]
	0x03AFD644 CMP W9, W10

ISIL:
	001 Move S3, W31
	002 Move S4, W31
	003 Move S5, W31
	004 Move S6, W31
	005 Move S7, W31
	006 Call TMP_Text.SetText, X0, X1, V0, V1, V2, V3, V4, V5, V6, V7
	007 Return 

Method: System.Void SetText(System.String sourceText, System.Single arg0, System.Single arg1, System.Single arg2, System.Single arg3)

Disassembly:
	0x03AFD648 B.CS 0x3AFD678
	0x03AFD64C SMADDL X8, X9, X27, X8
	0x03AFD650 STR W24, [X8 + 0x20]
	0x03AFD654 LDR W8, [X20]
	0x03AFD658 ADD W8, W8, 0x1

ISIL:
	001 Move S4, W31
	002 Move S5, W31
	003 Move S6, W31
	004 Move S7, W31
	005 Call TMP_Text.SetText, X0, X1, V0, V1, V2, V3, V4, V5, V6, V7
	006 Return 

Method: System.Void SetText(System.String sourceText, System.Single arg0, System.Single arg1, System.Single arg2, System.Single arg3, System.Single arg4)

Disassembly:
	0x03AFD65C STR W8, [X20]
	0x03AFD660 ADD W23, W23, 0x1
	0x03AFD664 CMP W23, W25
	0x03AFD668 B.GE 0x3AFD67C

ISIL:
	001 Move S5, W31
	002 Move S6, W31
	003 Move S7, W31
	004 Call TMP_Text.SetText, X0, X1, V0, V1, V2, V3, V4, V5, V6, V7
	005 Return 

Method: System.Void SetText(System.String sourceText, System.Single arg0, System.Single arg1, System.Single arg2, System.Single arg3, System.Single arg4, System.Single arg5)

Disassembly:
	0x03AFD66C LDR W8, [X22 + 0x18]
	0x03AFD670 CMP W23, W8
	0x03AFD674 B.CC 0x3AFD3AC

ISIL:
	001 Move S6, W31
	002 Move S7, W31
	003 Call TMP_Text.SetText, X0, X1, V0, V1, V2, V3, V4, V5, V6, V7
	004 Return 

Method: System.Void SetText(System.String sourceText, System.Single arg0, System.Single arg1, System.Single arg2, System.Single arg3, System.Single arg4, System.Single arg5, System.Single arg6)

Disassembly:
	0x03AFD678 BL 0x1C16F28
	0x03AFD67C LDR W8, [X19 + 0x5C8]

ISIL:
	001 Move S7, W31
	002 Call TMP_Text.SetText, X0, X1, V0, V1, V2, V3, V4, V5, V6, V7
	003 Return 

Method: System.Void SetText(System.String sourceText, System.Single arg0, System.Single arg1, System.Single arg2, System.Single arg3, System.Single arg4, System.Single arg5, System.Single arg6, System.Single arg7)

Disassembly:
	0x03AFD354 MOV X0, X19
	0x03AFD358 BL 0x3AF77B8
	0x03AFD35C CBZ X0, 0x3AFD688
	0x03AFD360 LDR W8, [X19 + 0x5C8]
	0x03AFD364 ADD W8, W8, 0x1
	0x03AFD368 STR W8, [X19 + 0x5C8]
	0x03AFD36C LDR X22, [X0 + 0x38]
	0x03AFD370 CBZ X22, 0x3AFD6A8
	0x03AFD374 LDR X25, [X22 + 0x18]
	0x03AFD378 STR X22, [X31 + 0x8]
	0x03AFD37C CMP W25, 0x1
	0x03AFD380 B.LT 0x3AFD680
	0x03AFD384 CBZ W25, 0x3AFD678
	0x03AFD388 ADRP X26, 0x65C000
	0x03AFD38C LDR X26, [X26 + 0x200]
	0x03AFD390 MOVZ W28, 0xC72F
	0x03AFD394 MOVZ W29, 0x2CAE
	0x03AFD398 MOV W8, W25
	0x03AFD39C MOV W23, W31
	0x03AFD3A0 MOVZ W27, 0xC
	0x03AFD3A4 MOVK W28, 0x2B0000
	0x03AFD3A8 MOVK W29, 0x320000
	0x03AFD3AC ADD X9, X22, W23, 0x2, SXTW
	0x03AFD3B0 LDR W24, [X9 + 0x20]
	0x03AFD3B4 CMP W24, 0x5C
	0x03AFD3B8 B.NE 0x3AFD468
	0x03AFD3BC ADD W9, W23, 0x1
	0x03AFD3C0 CMP W9, W25
	0x03AFD3C4 B.GE 0x3AFD428
	0x03AFD3C8 CMP W9, W8
	0x03AFD3CC B.CS 0x3AFD678
	0x03AFD3D0 ADD X8, X22, W9, 0x2, SXTW
	0x03AFD3D4 LDR W8, [X8 + 0x20]
	0x03AFD3D8 CMP W8, 0x5C
	0x03AFD3DC B.LE 0x3AFD410
	0x03AFD3E0 CMP W8, 0x6E
	0x03AFD3E4 B.EQ 0x3AFD430
	0x03AFD3E8 CMP W8, 0x75
	0x03AFD3EC B.NE 0x3AFD428
	0x03AFD3F0 ADD W29, W23, 0x5
	0x03AFD3F4 CMP W29, W25
	0x03AFD3F8 B.GE 0x3AFD578
	0x03AFD3FC ADD W2, W23, 0x2
	0x03AFD400 MOV X0, X19
	0x03AFD404 MOV X1, X22
	0x03AFD408 BL 0x3AFCB98
	0x03AFD40C B 0x3AFD458
	0x03AFD410 CMP W8, 0x55
	0x03AFD414 B.EQ 0x3AFD43C
	0x03AFD418 CMP W8, 0x5C
	0x03AFD41C B.NE 0x3AFD428
	0x03AFD420 MOVZ W24, 0x5C
	0x03AFD424 B 0x3AFD434
	0x03AFD428 MOVZ W24, 0x5C
	0x03AFD42C B 0x3AFD60C
	0x03AFD430 MOVZ W24, 0xA
	0x03AFD434 MOV W23, W9
	0x03AFD438 B 0x3AFD60C
	0x03AFD43C ADD W29, W23, 0x9
	0x03AFD440 CMP W29, W25
	0x03AFD444 B.GE 0x3AFD578
	0x03AFD448 ADD W2, W23, 0x2
	0x03AFD44C MOV X0, X19
	0x03AFD450 MOV X1, X22
	0x03AFD454 BL 0x3AFCC40
	0x03AFD458 MOV W23, W29
	0x03AFD45C MOVZ W29, 0x2CAE
	0x03AFD460 MOV W24, W0
	0x03AFD464 MOVK W29, 0x320000
	0x03AFD468 CMP W24, 0x3C
	0x03AFD46C B.NE 0x3AFD60C
	0x03AFD470 ADD W2, W23, 0x1
	0x03AFD474 MOV X1, X22
	0x03AFD478 BL 0x3AFCD88
	0x03AFD47C CMP W0, W28
	0x03AFD480 B.LE 0x3AFD4C4
	0x03AFD484 CMP W0, W29
	0x03AFD488 B.EQ 0x3AFD588
	0x03AFD48C MOVZ W8, 0xBD17
	0x03AFD490 MOVK W8, 0x5F90000
	0x03AFD494 CMP W0, W8
	0x03AFD498 B.EQ 0x3AFD5E0
	0x03AFD49C MOVZ W8, 0xF418
	0x03AFD4A0 MOVK W8, 0x72E60000
	0x03AFD4A4 CMP W0, W8
	0x03AFD4A8 B.NE 0x3AFD608
	0x03AFD4AC MOV X0, X19
	0x03AFD4B0 MOV X3, X21
	0x03AFD4B4 MOV X4, X20
	0x03AFD4B8 BL 0x3AFD2C0
	0x03AFD4BC ADD W23, W23, 0x7
	0x03AFD4C0 B 0x3AFD660
	0x03AFD4C4 CMP W0, 0x8D0
	0x03AFD4C8 B.EQ 0x3AFD520
	0x03AFD4CC CMP W0, W28
	0x03AFD4D0 B.NE 0x3AFD608
	0x03AFD4D4 LDR X8, [X21]
	0x03AFD4D8 CBZ X8, 0x3AFD6A8
	0x03AFD4DC LDR W9, [X20]
	0x03AFD4E0 LDR W10, [X8 + 0x18]
	0x03AFD4E4 CMP W9, W10
	0x03AFD4E8 B.NE 0x3AFD508
	0x03AFD4EC LDR X2, [X26]
	0x03AFD4F0 MOV X0, X19
	0x03AFD4F4 MOV X1, X21
	0x03AFD4F8 BL 0x2298F68
	0x03AFD4FC LDR X8, [X21]
	0x03AFD500 CBZ X8, 0x3AFD6A8
	0x03AFD504 LDR W9, [X20]
	0x03AFD508 LDR W10, [X8 + 0x18]
	0x03AFD50C CMP W9, W10
	0x03AFD510 B.CS 0x3AFD678
	0x03AFD514 SMADDL X8, X9, X27, X8
	0x03AFD518 MOVZ W9, 0xA0
	0x03AFD51C B 0x3AFD5D0
	0x03AFD520 LDR X8, [X21]
	0x03AFD524 CBZ X8, 0x3AFD6A8
	0x03AFD528 LDR W9, [X20]
	0x03AFD52C LDR W10, [X8 + 0x18]
	0x03AFD530 CMP W9, W10
	0x03AFD534 B.NE 0x3AFD554
	0x03AFD538 LDR X2, [X26]
	0x03AFD53C MOV X0, X19
	0x03AFD540 MOV X1, X21
	0x03AFD544 BL 0x2298F68
	0x03AFD548 LDR X8, [X21]
	0x03AFD54C CBZ X8, 0x3AFD6A8
	0x03AFD550 LDR W9, [X20]
	0x03AFD554 LDR W10, [X8 + 0x18]
	0x03AFD558 CMP W9, W10
	0x03AFD55C B.CS 0x3AFD678
	0x03AFD560 SMADDL X8, X9, X27, X8
	0x03AFD564 MOVZ W9, 0xA
	0x03AFD568 STR W9, [X8 + 0x20]
	0x03AFD56C LDR W8, [X20]
	0x03AFD570 ADD W23, W23, 0x3
	0x03AFD574 B 0x3AFD658
	0x03AFD578 MOVZ W29, 0x2CAE
	0x03AFD57C MOVZ W24, 0x5C
	0x03AFD580 MOVK W29, 0x320000
	0x03AFD584 B 0x3AFD60C
	0x03AFD588 LDR X8, [X21]
	0x03AFD58C CBZ X8, 0x3AFD6A8
	0x03AFD590 LDR W9, [X20]
	0x03AFD594 LDR W10, [X8 + 0x18]
	0x03AFD598 CMP W9, W10
	0x03AFD59C B.NE 0x3AFD5BC
	0x03AFD5A0 LDR X2, [X26]
	0x03AFD5A4 MOV X0, X19
	0x03AFD5A8 MOV X1, X21
	0x03AFD5AC BL 0x2298F68
	0x03AFD5B0 LDR X8, [X21]
	0x03AFD5B4 CBZ X8, 0x3AFD6A8
	0x03AFD5B8 LDR W9, [X20]
	0x03AFD5BC LDR W10, [X8 + 0x18]
	0x03AFD5C0 CMP W9, W10
	0x03AFD5C4 B.CS 0x3AFD678
	0x03AFD5C8 SMADDL X8, X9, X27, X8
	0x03AFD5CC MOVZ W9, 0x200B
	0x03AFD5D0 STR W9, [X8 + 0x20]
	0x03AFD5D4 LDR W8, [X20]
	0x03AFD5D8 ADD W23, W23, 0x5
	0x03AFD5DC B 0x3AFD658
	0x03AFD5E0 ADD X1, X31, 0x8
	0x03AFD5E4 ADD X3, X31, 0x4
	0x03AFD5E8 MOV X0, X19
	0x03AFD5EC MOV W2, W23
	0x03AFD5F0 MOV X4, X21
	0x03AFD5F4 MOV X5, X20
	0x03AFD5F8 BL 0x3AFCEA4
	0x03AFD5FC TBZ X0, 0x0, 0x3AFD608
	0x03AFD600 LDR W23, [X31 + 0x4]
	0x03AFD604 B 0x3AFD660
	0x03AFD608 MOVZ W24, 0x3C
	0x03AFD60C LDR X8, [X21]
	0x03AFD610 CBZ X8, 0x3AFD6A8

ISIL:
	001 Move [X31-160], D15
	002 Move [X31-152], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X28
	011 Move [X31+88], X27
	012 Move [X31+96], X26
	013 Move [X31+104], X25
	014 Move [X31+112], X24
	015 Move [X31+120], X23
	016 Move [X31+128], X22
	017 Move [X31+136], X21
	018 Move [X31+144], X20
	019 Move [X31+152], X19
	020 Move [X31+76], W31
	021 Compare X1, 0
	022 JumpIfEqual {163}
	023 Move W8, [X1+16]
	024 Move X20, X1
	025 Move X19, X0
	026 Add X21, X0, 1712
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X26, -49696768
	029 Move V8, V7
	030 Move V9, V6
	031 Move V10, V5
	032 Move V11, V4
	033 Move V12, V3
	034 Move V13, V2
	035 Move V14, V1
	036 Move V15, V0
	037 Move W22, W31
	038 Move W27, W31
	039 Move W23, W31
	040 Move W24, W31
	041 Move W28, W31
	042 Add X26, X26, 3206
	043 Move X0, X20
	044 Move W1, W22
	045 Move X2, X31
	046 Call String.get_Chars, X0, X1
	047 And W2, W0, 0xFFFF
	048 NotImplemented "Instruction CMP not yet implemented."
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move W8, W28
	052 NotImplemented "Instruction ADR not yet implemented."
	053 Move W10, [X26]
	054 Add X9, X9, X10
	055 CallNoReturn X9
	056 Add X3, X31, 76
	057 Move X0, X19
	058 Move V0, V15
	059 Move W27, 1
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Subtract W8, W2, 48
	062 And W9, W8, 0xFFFF
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move W27, 2
	065 Move W28, W8
	066 NotImplemented "Instruction CMP not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 NotImplemented "Instruction CMP not yet implemented."
	070 NotImplemented "Instruction CMP not yet implemented."
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Add W24, W24, 1
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Add W23, W23, 1
	075 Move W27, 3
	076 Add X3, X31, 76
	077 Move X0, X19
	078 Move V0, V14
	079 Add X3, X31, 76
	080 Move X0, X19
	081 Move V0, V13
	082 Add X3, X31, 76
	083 Move X0, X19
	084 Move V0, V12
	085 Add X3, X31, 76
	086 Move X0, X19
	087 Move V0, V11
	088 Add X3, X31, 76
	089 Move X0, X19
	090 Move V0, V10
	091 Add X3, X31, 76
	092 Move X0, X19
	093 Move V0, V9
	094 Add X3, X31, 76
	095 Move X0, X19
	096 Move V0, V8
	097 Move W1, W24
	098 Move W2, W23
	099 Call TMP_Text.AddFloatToInternalTextBackingArray, X0, V0, X1, X2, X3
	100 Move W27, W31
	101 Move W23, W31
	102 Move W24, W31
	103 Move W28, W31
	104 NotImplemented "Instruction CMP not yet implemented."
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move W27, 2
	107 Subtract W9, W2, 49
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move W25, [X31+76]
	110 Move X0, X21
	111 Move X3, X31
	112 Move W1, W25
	113 Call TextBackingContainer.set_Item, X0, X1, X2
	114 Add W8, W25, 1
	115 Move [X31+76], W8
	116 Move W8, [X20+16]
	117 Add W22, W22, 1
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move W27, 2
	120 Move W23, W8
	121 Move W20, [X31+76]
	122 Move X0, X21
	123 Move W2, W31
	124 Move X3, X31
	125 Move W1, W20
	126 Call TextBackingContainer.set_Item, X0, X1, X2
	127 Move [X19+1720], W20
	128 Move W20, 1
	129 Move X0, X19
	130 Move [X19+224], W20
	131 Move [X19+1024], W20
	132 Call TMP_Text.PopulateTextProcessingArray, X0
	133 Move X8, [X19]
	134 Move [X19+880], W20
	135 Move X0, X19
	136 Move X9, [X8+760]
	137 Move X1, [X8+768]
	138 NotImplemented "Instruction BLR not yet implemented."
	139 Move X8, [X19]
	140 Move X0, X19
	141 Move X20, [X31+144]
	142 Move X19, [X31+152]
	143 Move X22, [X31+128]
	144 Move X21, [X31+136]
	145 Move X2, [X8+744]
	146 Move X1, [X8+752]
	147 Move X24, [X31+112]
	148 Move X23, [X31+120]
	149 Move X26, [X31+96]
	150 Move X25, [X31+104]
	151 Move X28, [X31+80]
	152 Move X27, [X31+88]
	153 Move X30, [X31+64]
	154 Move D9, [X31+48]
	155 Move D8, [X31+56]
	156 Move D11, [X31+32]
	157 Move D10, [X31+40]
	158 Move D13, [X31+16]
	159 Move D12, [X31+24]
	160 Move D15, [X31+160]
	161 Move D14, [X31+168]
	162 CallNoReturn X2
	163 Call 0x1C17F20

Method: System.Void SetText(System.Text.StringBuilder sourceText)

Disassembly:
	0x03AFD95C STR S0, [X31 + 0xC]
	0x03AFD960 LDR V0, [X19 + 0x250]
	0x03AFD964 MOV W3, W31
	0x03AFD968 UNIMPLEMENTED
	0x03AFD96C STR D0, [X8]
	0x03AFD970 LDR X8, [X19]
	0x03AFD974 STR W31, [X19 + 0x2D4]
	0x03AFD978 STR W31, [X19 + 0x244]
	0x03AFD97C MOV V0.16B, V9.16B
	0x03AFD980 LDR X9, [X8 + 0x868]
	0x03AFD984 LDR X4, [X8 + 0x870]
	0x03AFD988 BLR X9
	0x03AFD98C MOV V10.16B, V0.16B
	0x03AFD990 MOV X0, X19
	0x03AFD994 MOV V0.16B, V9.16B
	0x03AFD998 MOV V1.16B, V8.16B
	0x03AFD99C BL 0x3AFDA14

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Compare X1, 0
	007 JumpIfEqual {12}
	008 Move X0, X19
	009 Move X1, X31
	010 Call StringBuilder.get_Length, X0
	011 Move W3, W0
	012 Move W3, W31
	013 Move X0, X20
	014 Move X1, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W2, W31
	018 Move X30, [X31+32]

Method: System.Void SetText(System.Text.StringBuilder sourceText, System.Int32 start, System.Int32 length)

Disassembly:
	0x03AFD9A0 LDP X30, X19, [X31 + 0x20]
	0x03AFD9A4 LDP D9, D8, [X31 + 0x10]
	0x03AFD9A8 MOV V1.16B, V0.16B
	0x03AFD9AC MOV V0.16B, V10.16B
	0x03AFD9B0 LDR V10, [X31], #0x30
	0x03AFD9B4 RET
	0x03AFD9B8 STR X30, [X31 - 0x10]!
	0x03AFD9BC LDRB W8, [X0 + 0x238]
	0x03AFD9C0 MOVZ W9, 0x254
	0x03AFD9C4 ADD X1, X31, 0xC
	0x03AFD9C8 MOV W2, W31
	0x03AFD9CC CMP W8, 0x0
	0x03AFD9D0 MOVZ W8, 0x1E4
	0x03AFD9D4 CSEL X8, X8, X9, EQ
	0x03AFD9D8 LDR V2, [X0, X8, LSL]
	0x03AFD9DC ADD X8, X0, 0x23C
	0x03AFD9E0 MOV W3, W31
	0x03AFD9E4 STR S2, [X31 + 0xC]
	0x03AFD9E8 LDR V2, [X0 + 0x250]
	0x03AFD9EC UNIMPLEMENTED
	0x03AFD9F0 STR D2, [X8]
	0x03AFD9F4 LDR X8, [X0]
	0x03AFD9F8 STR W31, [X0 + 0x2D4]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call TMP_Text.PopulateTextBackingArray, X0, X1, X2, X3
	006 Move W20, 1
	007 Move W8, 2
	008 Move X0, X19
	009 Move [X19+224], W20
	010 Move [X19+1024], W8
	011 Call TMP_Text.PopulateTextProcessingArray, X0
	012 Move X8, [X19]
	013 Move [X19+880], W20
	014 Move X0, X19
	015 Move X9, [X8+760]
	016 Move X1, [X8+768]
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move X8, [X19]
	019 Move X0, X19
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X2, [X8+744]
	023 Move X1, [X8+752]
	024 Move X30, [X31+32]
	025 CallNoReturn X2

Method: System.Void SetText(System.Char[] sourceText)

Disassembly:
	0x03AFD9FC STR W31, [X0 + 0x244]
	0x03AFDA00 LDR X9, [X8 + 0x868]
	0x03AFDA04 LDR X4, [X8 + 0x870]
	0x03AFDA08 BLR X9
	0x03AFDA0C LDR X30, [X31], #0x10
	0x03AFDA10 RET

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {4}
	003 Move W3, [X1+24]
	004 Move W3, W31
	005 Move W2, W31

Method: System.Void SetText(System.Char[] sourceText, System.Int32 start, System.Int32 length)

Disassembly:
	0x03AFDA70 CSET W2, NE

ISIL:
	001 Call TMP_Text.SetCharArray, X0, X1, X2, X3
	002 Return 

Method: System.Void SetCharArray(System.Char[] sourceText)

Disassembly:
	0x03AFDA74 LDR X10, [X9 + 0x868]
	0x03AFDA78 LDR X4, [X9 + 0x870]
	0x03AFDA7C ADD X1, X31, 0xC
	0x03AFDA80 MOV X0, X19
	0x03AFDA84 MOV V0.16B, V9.16B
	0x03AFDA88 MOV V1.16B, V8.16B

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {4}
	003 Move W3, [X1+24]
	004 Move W3, W31
	005 Move W2, W31
	006 Call TMP_Text.SetCharArray, X0, X1, X2, X3
	007 Return 

Method: System.Void SetCharArray(System.Char[] sourceText, System.Int32 start, System.Int32 length)

Disassembly:
	0x03AFDA14 SUB X31, X31, 0x30
	0x03AFDA18 STP D9, D8, [X31 + 0x10]
	0x03AFDA1C STP X30, X19, [X31 + 0x20]
	0x03AFDA20 LDRB W8, [X0 + 0x238]
	0x03AFDA24 MOVZ W9, 0x254
	0x03AFDA28 MOVZ W10, 0x1E4
	0x03AFDA2C MOV V9.16B, V0.16B
	0x03AFDA30 CMP W8, 0x0
	0x03AFDA34 CSEL X9, X10, X9, EQ
	0x03AFDA38 LDR V0, [X0, X9, LSL]
	0x03AFDA3C MOV V8.16B, V1.16B
	0x03AFDA40 MOV X19, X0
	0x03AFDA44 ADD X9, X0, 0x23C
	0x03AFDA48 STR S0, [X31 + 0xC]
	0x03AFDA4C LDR V0, [X0 + 0x250]
	0x03AFDA50 UNIMPLEMENTED
	0x03AFDA54 STR D0, [X9]
	0x03AFDA58 STR W31, [X0 + 0x2D4]
	0x03AFDA5C STRB W31, [X0 + 0x24C]
	0x03AFDA60 STR W31, [X0 + 0x244]
	0x03AFDA64 LDR X9, [X19]
	0x03AFDA68 LDRB W3, [X19 + 0x2D8]
	0x03AFDA6C ANDS W31, W8, 0xFF

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call TMP_Text.PopulateTextBackingArray, X0, X1, X2, X3
	006 Move W20, 1
	007 Move W8, 2
	008 Move X0, X19
	009 Move [X19+224], W20
	010 Move [X19+1024], W8
	011 Call TMP_Text.PopulateTextProcessingArray, X0
	012 Move X8, [X19]
	013 Move [X19+880], W20
	014 Move X0, X19
	015 Move X9, [X8+760]
	016 Move X1, [X8+768]
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move X8, [X19]
	019 Move X0, X19
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X2, [X8+744]
	023 Move X1, [X8+752]
	024 Move X30, [X31+32]
	025 CallNoReturn X2

Method: TMPro.TMP_Style GetStyle(System.Int32 hashCode)

Disassembly:
	0x03AF87B8 RET
	0x03AF87BC LDR X9, [X0]
	0x03AF87C0 MOVZ W10, 0x1
	0x03AF87C4 STRB W8, [X0 + 0x300]
	0x03AF87C8 STRB W10, [X0 + 0x370]
	0x03AF87CC LDR X8, [X9 + 0x828]
	0x03AF87D0 LDR X1, [X9 + 0x830]
	0x03AF87D4 MOV X19, X0
	0x03AF87D8 BLR X8
	0x03AF87DC LDR X8, [X19]
	0x03AF87E0 MOV X0, X19
	0x03AF87E4 LDR X2, [X8 + 0x2F8]
	0x03AF87E8 LDR X1, [X8 + 0x300]
	0x03AF87EC LDP X30, X19, [X31], #0x10
	0x03AF87F0 BR X2
	0x03AF87F4 LDRB W0, [X0 + 0x302]
	0x03AF87F8 RET
	0x03AF87FC STP X30, X19, [X31 - 0x10]!
	0x03AF8800 LDRB W9, [X0 + 0x302]
	0x03AF8804 AND W8, W1, 0x1
	0x03AF8808 CMP W9, W8
	0x03AF880C B.NE 0x3AF8818
	0x03AF8810 LDP X30, X19, [X31], #0x10
	0x03AF8814 RET
	0x03AF8818 LDR X9, [X0]
	0x03AF881C STRB W8, [X0 + 0x302]
	0x03AF8820 MOVZ W8, 0x1
	0x03AF8824 STRB W8, [X0 + 0x370]
	0x03AF8828 LDR X8, [X9 + 0x2F8]
	0x03AF882C LDR X1, [X9 + 0x300]
	0x03AF8830 MOV X19, X0
	0x03AF8834 BLR X8
	0x03AF8838 LDR X8, [X19]
	0x03AF883C MOV X0, X19
	0x03AF8840 LDR X2, [X8 + 0x2E8]
	0x03AF8844 LDR X1, [X8 + 0x2F0]
	0x03AF8848 LDP X30, X19, [X31], #0x10
	0x03AF884C BR X2
	0x03AF8850 LDRB W0, [X0 + 0x303]
	0x03AF8854 RET
	0x03AF8858 STP X30, X19, [X31 - 0x10]!
	0x03AF885C LDRB W9, [X0 + 0x303]
	0x03AF8860 AND W8, W1, 0x1
	0x03AF8864 CMP W9, W8
	0x03AF8868 B.NE 0x3AF8874
	0x03AF886C LDP X30, X19, [X31], #0x10
	0x03AF8870 RET
	0x03AF8874 LDR X9, [X0]
	0x03AF8878 STRB W8, [X0 + 0x303]
	0x03AF887C MOVZ W8, 0x1
	0x03AF8880 STRB W8, [X0 + 0x370]
	0x03AF8884 LDR X8, [X9 + 0x2F8]
	0x03AF8888 LDR X1, [X9 + 0x300]
	0x03AF888C MOV X19, X0
	0x03AF8890 BLR X8
	0x03AF8894 LDR X8, [X19]
	0x03AF8898 MOV X0, X19
	0x03AF889C LDR X2, [X8 + 0x2E8]
	0x03AF88A0 LDR X1, [X8 + 0x2F0]
	0x03AF88A4 LDP X30, X19, [X31], #0x10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8EB000
	007 Move X22, 0x5FC000
	008 Move W8, [X21+1604]
	009 Move X22, [X22+1432]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5FC000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1604], W8
	021 Move X0, [X22]
	022 Move X21, [X20+448]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X21
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Inequality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {43}
	035 Move X0, [X20+448]
	036 Compare X0, 0
	037 JumpIfEqual {81}
	038 Move W1, W19
	039 Move X2, X31
	040 Call TMP_StyleSheet.GetStyle, X0, X1
	041 Compare X0, 0
	042 JumpIfNotEqual {75}
	043 Move X0, X31
	044 Call TMP_Settings.get_defaultStyleSheet
	045 Move X8, [X22]
	046 Move X20, X0
	047 Move W9, [X8+224]
	048 Compare W9, 0
	049 JumpIfNotEqual {52}
	050 Move X0, X8
	051 Call 0x1C17DFC
	052 Move X0, X20
	053 Move X1, X31
	054 Move X2, X31
	055 Call Object.op_Inequality, X0, X1
	056 Move W8, W0
	057 Move X0, X31
	058 Move TEMP, X8
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {75}
	062 Move X0, X31
	063 Call TMP_Settings.get_defaultStyleSheet
	064 Compare X0, 0
	065 JumpIfEqual {81}
	066 Move W1, W19
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Move X2, X31
	072 Move X30, [X31+48]
	073 Call TMP_StyleSheet.GetStyle, X0, X1
	074 Return X0
	075 Move X20, [X31+32]
	076 Move X19, [X31+40]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X30, [X31+48]
	080 Return X0
	081 Call 0x1C17F20

Method: System.Boolean ReplaceOpeningStyleTag(ref TMPro.TMP_Text/TextBackingContainer sourceText, System.Int32 srcIndex, out System.Int32 srcOffset, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)

Disassembly:
	0x03AFC6A0 MRS X27, 0xC000
	0x03AFC6A4 LDR X8, [X27 + 0x28]
	0x03AFC6A8 ADRP X23, 0x8E6000
	0x03AFC6AC MOV X19, X3
	0x03AFC6B0 MOV W20, W2
	0x03AFC6B4 STR X8, [X31 + 0x18]
	0x03AFC6B8 LDRB W8, [X23 + 0x64F]
	0x03AFC6BC MOV W22, W1
	0x03AFC6C0 MOV V8.16B, V0.16B
	0x03AFC6C4 MOV X21, X0
	0x03AFC6C8 TBNZ X8, 0x0, 0x3AFC6E0
	0x03AFC6CC ADRP X0, 0x61F000
	0x03AFC6D0 LDR X0, [X0 + 0x5F0]
	0x03AFC6D4 BL 0x1C16CF4
	0x03AFC6D8 MOVZ W8, 0x1
	0x03AFC6DC STRB W8, [X23 + 0x64F]
	0x03AFC6E0 ADRP X28, 0x61F000
	0x03AFC6E4 LDR X28, [X28 + 0x5F0]
	0x03AFC6E8 FCMP S8, 0x0
	0x03AFC6EC B.PL 0x3AFC714
	0x03AFC6F0 LDR W1, [X19]
	0x03AFC6F4 ADD X0, X21, 0x6B0
	0x03AFC6F8 MOVZ W2, 0x2D
	0x03AFC6FC MOV X3, X31
	0x03AFC700 BL 0x3B1BC20
	0x03AFC704 LDR W8, [X19]
	0x03AFC708 FNEG S8, S8
	0x03AFC70C ADD W8, W8, 0x1
	0x03AFC710 STR W8, [X19]
	0x03AFC714 LDR X0, [X28]
	0x03AFC718 LDR W8, [X0 + 0xE0]
	0x03AFC71C CBNZ W8, 0x3AFC724
	0x03AFC720 BL 0x1C16DFC
	0x03AFC724 MOV V0.16B, V8.16B
	0x03AFC728 MOV X0, X31
	0x03AFC72C BL 0x33D8F2C
	0x03AFC730 MOV X23, X0
	0x03AFC734 MOV X24, X1
	0x03AFC738 ORR W8, W20, W22, 0x0
	0x03AFC73C MOVZ W9, 0x9
	0x03AFC740 CBZ W8, 0x3AFC7A0
	0x03AFC744 LDR X8, [X21 + 0x6C0]
	0x03AFC748 CMP W20, 0x9
	0x03AFC74C CSEL W9, W20, W9, LT
	0x03AFC750 CBZ X8, 0x3AFC950
	0x03AFC754 LDR W10, [X8 + 0x18]
	0x03AFC758 CMP W9, W10
	0x03AFC75C B.CS 0x3AFC954
	0x03AFC760 LDR X0, [X28]
	0x03AFC764 SXTW X9, W9
	0x03AFC768 ADD X8, X8, X9, 0x4, LSL
	0x03AFC76C LDP X26, X25, [X8 + 0x20]
	0x03AFC770 LDR W9, [X0 + 0xE0]
	0x03AFC774 CBNZ W9, 0x3AFC77C
	0x03AFC778 BL 0x1C16DFC
	0x03AFC77C MOV X0, X23
	0x03AFC780 MOV X1, X24
	0x03AFC784 MOV X2, X26
	0x03AFC788 MOV X3, X25
	0x03AFC78C MOV X4, X31
	0x03AFC790 BL 0x33D9144
	0x03AFC794 MOV X23, X0
	0x03AFC798 MOV X24, X1
	0x03AFC79C B 0x3AFC7A4
	0x03AFC7A0 MOVZ W20, 0x9
	0x03AFC7A4 LDR X0, [X28]
	0x03AFC7A8 LDR W8, [X0 + 0xE0]
	0x03AFC7AC CBNZ W8, 0x3AFC7B4
	0x03AFC7B0 BL 0x1C16DFC
	0x03AFC7B4 MOV X0, X23
	0x03AFC7B8 MOV X1, X24
	0x03AFC7BC MOV X2, X31
	0x03AFC7C0 BL 0x33D9018
	0x03AFC7C4 MOV X25, X0
	0x03AFC7C8 SCVTF D0, X0
	0x03AFC7CC MOV X0, X21
	0x03AFC7D0 MOV W1, W22
	0x03AFC7D4 MOV X2, X19
	0x03AFC7D8 BL 0x3AFD788
	0x03AFC7DC CMP W20, 0x1
	0x03AFC7E0 B.LT 0x3AFC91C
	0x03AFC7E4 LDR X0, [X28]
	0x03AFC7E8 LDR W8, [X0 + 0xE0]
	0x03AFC7EC CBNZ W8, 0x3AFC7F4
	0x03AFC7F0 BL 0x1C16DFC
	0x03AFC7F4 MOV X0, X25
	0x03AFC7F8 MOV X1, X31
	0x03AFC7FC BL 0x33D8F08
	0x03AFC800 MOV X2, X0
	0x03AFC804 MOV X3, X1
	0x03AFC808 MOV X0, X23
	0x03AFC80C MOV X1, X24
	0x03AFC810 MOV X4, X31
	0x03AFC814 BL 0x33D9860
	0x03AFC818 LDR X8, [X28]
	0x03AFC81C MOV X4, X31
	0x03AFC820 MOV X22, X0
	0x03AFC824 MOV X23, X1
	0x03AFC828 LDR X8, [X8 + 0xB8]
	0x03AFC82C LDP X2, X3, [X8]
	0x03AFC830 BL 0x33DA760
	0x03AFC834 TBZ X0, 0x0, 0x3AFC91C
	0x03AFC838 LDR W1, [X19]
	0x03AFC83C ADD X21, X21, 0x6B0
	0x03AFC840 MOVZ W2, 0x2E
	0x03AFC844 MOV X0, X21
	0x03AFC848 ADD W8, W1, 0x1
	0x03AFC84C MOV X3, X31
	0x03AFC850 STR W8, [X19]
	0x03AFC854 BL 0x3B1BC20
	0x03AFC858 MOV W25, W31
	0x03AFC85C ADD X0, X31, 0x8
	0x03AFC860 MOVZ W1, 0xA
	0x03AFC864 MOV X2, X31
	0x03AFC868 STP X31, X31, [X31 + 0x8]
	0x03AFC86C BL 0x33D61F0
	0x03AFC870 LDR X0, [X28]
	0x03AFC874 LDR W8, [X0 + 0xE0]
	0x03AFC878 CBNZ W8, 0x3AFC880
	0x03AFC87C BL 0x1C16DFC
	0x03AFC880 LDP X2, X3, [X31 + 0x8]
	0x03AFC884 MOV X0, X22
	0x03AFC888 MOV X1, X23
	0x03AFC88C MOV X4, X31
	0x03AFC890 BL 0x33D9914
	0x03AFC894 MOV X2, X31
	0x03AFC898 MOV X22, X0
	0x03AFC89C MOV X23, X1
	0x03AFC8A0 BL 0x33D9018
	0x03AFC8A4 LDR W1, [X19]
	0x03AFC8A8 MOV X24, X0
	0x03AFC8AC ADD W8, W24, 0x30
	0x03AFC8B0 AND W2, W8, 0xFFFF
	0x03AFC8B4 ADD W9, W1, 0x1
	0x03AFC8B8 MOV X0, X21
	0x03AFC8BC MOV X3, X31
	0x03AFC8C0 STR W9, [X19]
	0x03AFC8C4 BL 0x3B1BC20
	0x03AFC8C8 MOV X0, X24
	0x03AFC8CC MOV X1, X31
	0x03AFC8D0 BL 0x33D8F08
	0x03AFC8D4 MOV X2, X0
	0x03AFC8D8 MOV X3, X1
	0x03AFC8DC MOV X0, X22
	0x03AFC8E0 MOV X1, X23
	0x03AFC8E4 MOV X4, X31
	0x03AFC8E8 BL 0x33D9860
	0x03AFC8EC LDR X8, [X28]
	0x03AFC8F0 MOV X4, X31
	0x03AFC8F4 MOV X22, X0
	0x03AFC8F8 MOV X23, X1
	0x03AFC8FC LDR X8, [X8 + 0xB8]
	0x03AFC900 LDP X2, X3, [X8]
	0x03AFC904 BL 0x33DA6D0
	0x03AFC908 ANDS W31, W0, 0x1
	0x03AFC90C CSEL W8, W20, W25, NE
	0x03AFC910 ADD W25, W8, 0x1
	0x03AFC914 CMP W25, W20
	0x03AFC918 B.LT 0x3AFC85C
	0x03AFC91C LDR X8, [X27 + 0x28]
	0x03AFC920 LDR X9, [X31 + 0x18]
	0x03AFC924 CMP X8, X9
	0x03AFC928 B.NE 0x3AFC958
	0x03AFC92C LDP X20, X19, [X31 + 0x70]
	0x03AFC930 LDP X22, X21, [X31 + 0x60]
	0x03AFC934 LDP X24, X23, [X31 + 0x50]
	0x03AFC938 LDP X26, X25, [X31 + 0x40]
	0x03AFC93C LDP X28, X27, [X31 + 0x30]
	0x03AFC940 LDR X30, [X31 + 0x28]
	0x03AFC944 LDR V8, [X31 + 0x20]
	0x03AFC948 ADD X31, X31, 0x80
	0x03AFC94C RET
	0x03AFC950 BL 0x1C16F20
	0x03AFC954 BL 0x1C16F28
	0x03AFC958 BL 0x3EB1B20
	0x03AFC95C STR X30, [X31 - 0x20]!
	0x03AFC960 STP X20, X19, [X31 + 0x10]
	0x03AFC964 MOV X19, X1
	0x03AFC968 MOV X20, X0
	0x03AFC96C CBZ X1, 0x3AFC984
	0x03AFC970 MOV X0, X19
	0x03AFC974 MOV X1, X31
	0x03AFC978 BL 0x323260C
	0x03AFC97C MOV W3, W0
	0x03AFC980 B 0x3AFC988
	0x03AFC984 MOV W3, W31
	0x03AFC988 MOV X0, X20
	0x03AFC98C MOV X1, X19
	0x03AFC990 LDP X20, X19, [X31 + 0x10]
	0x03AFC994 MOV W2, W31
	0x03AFC998 LDR X30, [X31], #0x20
	0x03AFC99C B 0x3AFC9A0
	0x03AFC9A0 STR X30, [X31 - 0x20]!
	0x03AFC9A4 STP X20, X19, [X31 + 0x10]
	0x03AFC9A8 MOV X19, X0
	0x03AFC9AC BL 0x3AFADB0
	0x03AFC9B0 MOVZ W20, 0x1
	0x03AFC9B4 MOVZ W8, 0x2
	0x03AFC9B8 MOV X0, X19
	0x03AFC9BC STRB W20, [X19 + 0xE0]
	0x03AFC9C0 STR W8, [X19 + 0x400]
	0x03AFC9C4 BL 0x3AFA248
	0x03AFC9C8 LDR X8, [X19]
	0x03AFC9CC STRB W20, [X19 + 0x370]
	0x03AFC9D0 MOV X0, X19
	0x03AFC9D4 LDR X9, [X8 + 0x2F8]
	0x03AFC9D8 LDR X1, [X8 + 0x300]
	0x03AFC9DC BLR X9
	0x03AFC9E0 LDR X8, [X19]
	0x03AFC9E4 MOV X0, X19
	0x03AFC9E8 LDP X20, X19, [X31 + 0x10]
	0x03AFC9EC LDR X2, [X8 + 0x2E8]
	0x03AFC9F0 LDR X1, [X8 + 0x2F0]
	0x03AFC9F4 LDR X30, [X31], #0x20
	0x03AFC9F8 BR X2
	0x03AFC9FC CBZ X1, 0x3AFCA08
	0x03AFCA00 LDR W3, [X1 + 0x18]
	0x03AFCA04 B 0x3AFCA0C
	0x03AFCA08 MOV W3, W31
	0x03AFCA0C MOV W2, W31
	0x03AFCA10 B 0x3AFCA14
	0x03AFCA14 STR X30, [X31 - 0x20]!
	0x03AFCA18 STP X20, X19, [X31 + 0x10]
	0x03AFCA1C MOV X19, X0
	0x03AFCA20 BL 0x3AFAED8
	0x03AFCA24 MOVZ W20, 0x1
	0x03AFCA28 MOVZ W8, 0x2
	0x03AFCA2C MOV X0, X19
	0x03AFCA30 STRB W20, [X19 + 0xE0]
	0x03AFCA34 STR W8, [X19 + 0x400]
	0x03AFCA38 BL 0x3AFA248
	0x03AFCA3C LDR X8, [X19]
	0x03AFCA40 STRB W20, [X19 + 0x370]
	0x03AFCA44 MOV X0, X19
	0x03AFCA48 LDR X9, [X8 + 0x2F8]
	0x03AFCA4C LDR X1, [X8 + 0x300]
	0x03AFCA50 BLR X9
	0x03AFCA54 LDR X8, [X19]
	0x03AFCA58 MOV X0, X19
	0x03AFCA5C LDP X20, X19, [X31 + 0x10]
	0x03AFCA60 LDR X2, [X8 + 0x2E8]
	0x03AFCA64 LDR X1, [X8 + 0x2F0]
	0x03AFCA68 LDR X30, [X31], #0x20
	0x03AFCA6C BR X2
	0x03AFCA70 B 0x3AFCA14
	0x03AFCA74 CBZ X1, 0x3AFCA80
	0x03AFCA78 LDR W3, [X1 + 0x18]
	0x03AFCA7C B 0x3AFCA84
	0x03AFCA80 MOV W3, W31
	0x03AFCA84 MOV W2, W31
	0x03AFCA88 B 0x3AFCA14
	0x03AFCA8C STR X30, [X31 - 0x40]!
	0x03AFCA90 STP X24, X23, [X31 + 0x10]
	0x03AFCA94 STP X22, X21, [X31 + 0x20]
	0x03AFCA98 STP X20, X19, [X31 + 0x30]
	0x03AFCA9C ADRP X22, 0x8E6000
	0x03AFCAA0 LDRB W8, [X22 + 0x64E]
	0x03AFCAA4 MOV X19, X3
	0x03AFCAA8 MOV W20, W2
	0x03AFCAAC MOV X21, X1
	0x03AFCAB0 TBNZ X8, 0x0, 0x3AFCAC8
	0x03AFCAB4 ADRP X0, 0x65D000
	0x03AFCAB8 LDR X0, [X0 + 0x1F0]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X25, 0x8E7000
	015 Move W8, [X25+1605]
	016 Move X19, X5
	017 Move X20, X4
	018 Move X22, X3
	019 Move W24, W2
	020 Move X23, X1
	021 Move X21, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {34}
	026 Move X0, 0x65E000
	027 Move X0, [X0+528]
	028 Call 0x1C17CF4
	029 Move X0, 0x65E000
	030 Move X0, [X0+512]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X25+1605], W8
	034 Add W2, W24, 7
	035 Move X1, X23
	036 Move X3, X22
	037 Move [X31+4], W31
	038 Call TMP_Text.GetStyleHashCode, X0, X1, X2, X3
	039 Move W1, W0
	040 Move X0, X21
	041 Call TMP_Text.GetStyle, X0, X1
	042 Compare X0, 0
	043 JumpIfEqual {240}
	044 Move W8, [X22]
	045 Compare W8, 0
	046 JumpIfEqual {239}
	047 Move W9, [X21+1480]
	048 Move X8, [X21+1472]
	049 Add W9, W9, 1
	050 Move [X21+1480], W9
	051 Compare X8, 0
	052 JumpIfEqual {254}
	053 Move W10, [X8+24]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X10, 0x65E000
	056 Move W1, [X0+24]
	057 Move X10, [X10+528]
	058 Move X9, W9
	059 Add X8, X8, X9
	060 Move X23, X0
	061 Move X2, [X10]
	062 Add X0, X8, 32
	063 Call TMP_TextProcessingStack`1<Int32>.Push, X0, X1
	064 Move X22, [X23+48]
	065 Compare X22, 0
	066 JumpIfEqual {254}
	067 Move X25, [X22+24]
	068 Move [X31+8], X22
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Compare W25, 0
	071 JumpIfEqual {234}
	072 Move X26, 0x65E000
	073 Move X26, [X26+512]
	074 Move W28, 0xC72F
	075 Move W29, 0x2CAE
	076 Move W8, W25
	077 Move W23, W31
	078 Move W27, 12
	079 NotImplemented "Instruction MOVK not yet implemented."
	080 NotImplemented "Instruction MOVK not yet implemented."
	081 Add X9, X22, W23
	082 Move W24, [X9+32]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Add W9, W23, 1
	085 NotImplemented "Instruction CMP not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Add X8, X22, W9
	088 Move W8, [X8+32]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 NotImplemented "Instruction CMP not yet implemented."
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Add W29, W23, 5
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Add W2, W23, 2
	095 Move X0, X21
	096 Move X1, X22
	097 Call TMP_Text.GetUTF16, X0, X1, X2
	098 NotImplemented "Instruction CMP not yet implemented."
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move W24, 92
	101 Move W24, 92
	102 Move W24, 10
	103 Move W23, W9
	104 Add W29, W23, 9
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Add W2, W23, 2
	107 Move X0, X21
	108 Move X1, X22
	109 Call TMP_Text.GetUTF32, X0, X1, X2
	110 Move W23, W29
	111 Move W29, 0x2CAE
	112 Move W24, W0
	113 NotImplemented "Instruction MOVK not yet implemented."
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Add W2, W23, 1
	116 Move X1, X22
	117 Call TMP_Text.GetMarkupTagHashCode, X0, X1, X2
	118 NotImplemented "Instruction CMP not yet implemented."
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move W8, 0xBD17
	121 NotImplemented "Instruction MOVK not yet implemented."
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move W8, 0xF418
	124 NotImplemented "Instruction MOVK not yet implemented."
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move X0, X21
	127 Move X3, X20
	128 Move X4, X19
	129 Call TMP_Text.ReplaceClosingStyleTag, X0, X1, X2, X3, X4
	130 Add W23, W23, 7
	131 NotImplemented "Instruction CMP not yet implemented."
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move X8, [X20]
	134 Compare X8, 0
	135 JumpIfEqual {254}
	136 Move W9, [X19]
	137 Move W10, [X8+24]
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move X2, [X26]
	140 Move X0, X21
	141 Move X1, X20
	142 Call TMP_Text.ResizeInternalArray, X0, X1
	143 Move X8, [X20]
	144 Compare X8, 0
	145 JumpIfEqual {254}
	146 Move W9, [X19]
	147 Move W10, [X8+24]
	148 NotImplemented "Instruction CMP not yet implemented."
	149 NotImplemented "Instruction SMADDL not yet implemented."
	150 Move W9, 160
	151 Move X8, [X20]
	152 Compare X8, 0
	153 JumpIfEqual {254}
	154 Move W9, [X19]
	155 Move W10, [X8+24]
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move X2, [X26]
	158 Move X0, X21
	159 Move X1, X20
	160 Call TMP_Text.ResizeInternalArray, X0, X1
	161 Move X8, [X20]
	162 Compare X8, 0
	163 JumpIfEqual {254}
	164 Move W9, [X19]
	165 Move W10, [X8+24]
	166 NotImplemented "Instruction CMP not yet implemented."
	167 NotImplemented "Instruction SMADDL not yet implemented."
	168 Move W9, 10
	169 Move [X8+32], W9
	170 Move W8, [X19]
	171 Add W23, W23, 3
	172 Move W29, 0x2CAE
	173 Move W24, 92
	174 NotImplemented "Instruction MOVK not yet implemented."
	175 Move X8, [X20]
	176 Compare X8, 0
	177 JumpIfEqual {254}
	178 Move W9, [X19]
	179 Move W10, [X8+24]
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move X2, [X26]
	182 Move X0, X21
	183 Move X1, X20
	184 Call TMP_Text.ResizeInternalArray, X0, X1
	185 Move X8, [X20]
	186 Compare X8, 0
	187 JumpIfEqual {254}
	188 Move W9, [X19]
	189 Move W10, [X8+24]
	190 NotImplemented "Instruction CMP not yet implemented."
	191 NotImplemented "Instruction SMADDL not yet implemented."
	192 Move W9, 0x200B
	193 Move [X8+32], W9
	194 Move W8, [X19]
	195 Add W23, W23, 5
	196 Add X1, X31, 8
	197 Add X3, X31, 4
	198 Move X0, X21
	199 Move W2, W23
	200 Move X4, X20
	201 Move X5, X19
	202 Call TMP_Text.ReplaceOpeningStyleTag, X0, X1, X2, X3, X4, X5
	203 Move TEMP, X0
	204 And TEMP, TEMP, 1
	205 Compare TEMP, 1
	206 JumpIfNotEqual {208}
	207 Move W23, [X31+4]
	208 Move W24, 60
	209 Move X8, [X20]
	210 Compare X8, 0
	211 JumpIfEqual {254}
	212 Move W9, [X19]
	213 Move W10, [X8+24]
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Move X2, [X26]
	216 Move X0, X21
	217 Move X1, X20
	218 Call TMP_Text.ResizeInternalArray, X0, X1
	219 Move X8, [X20]
	220 Compare X8, 0
	221 JumpIfEqual {254}
	222 Move W9, [X19]
	223 Move W10, [X8+24]
	224 NotImplemented "Instruction CMP not yet implemented."
	225 NotImplemented "Instruction SMADDL not yet implemented."
	226 Move [X8+32], W24
	227 Move W8, [X19]
	228 Add W8, W8, 1
	229 Move [X19], W8
	230 Add W23, W23, 1
	231 NotImplemented "Instruction CMP not yet implemented."
	232 Move W8, [X22+24]
	233 NotImplemented "Instruction CMP not yet implemented."
	234 Call 0x1C17F28
	235 Move W8, [X21+1480]
	236 Move W0, 1
	237 Subtract W8, W8, 1
	238 Move [X21+1480], W8
	239 Move W0, W31
	240 Move X20, [X31+96]
	241 Move X19, [X31+104]
	242 Move X22, [X31+80]
	243 Move X21, [X31+88]
	244 Move X24, [X31+64]
	245 Move X23, [X31+72]
	246 Move X26, [X31+48]
	247 Move X25, [X31+56]
	248 Move X28, [X31+32]
	249 Move X27, [X31+40]
	250 Move X29, [X31+16]
	251 Move X30, [X31+24]
	252 Add X31, X31, 112
	253 Return X0
	254 Call 0x1C17F20

Method: System.Boolean ReplaceOpeningStyleTag(ref System.Int32[] sourceText, System.Int32 srcIndex, out System.Int32 srcOffset, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)

Disassembly:
	0x03AFDEA4 CMP X10, X9
	0x03AFDEA8 ADD X13, X13, 0x178
	0x03AFDEAC B.LT 0x3AFDDE4
	0x03AFDEB0 LDP D1, D0, [X31]
	0x03AFDEB4 MOVI V2.2S, 0x3F, 0x18
	0x03AFDEB8 STR W31, [X19 + 0x8]
	0x03AFDEBC STR W31, [X19 + 0x14]
	0x03AFDEC0 FSUB V3.2S, V0.2S, V1.2S
	0x03AFDEC4 FADD V0.2S, V0.2S, V1.2S
	0x00000000 INVALID
	0x00000000 INVALID
	0x03AFDED0 STR D0, [X19]
	0x03AFDED4 STUR D1, [X19 + 0xC]
	0x03AFDED8 B 0x3AFDEE4
	0x03AFDEDC STP X31, X31, [X19]
	0x03AFDEE0 STR X31, [X19 + 0x10]
	0x03AFDEE4 LDP X20, X19, [X31 + 0x50]
	0x03AFDEE8 LDP X22, X21, [X31 + 0x40]
	0x03AFDEEC LDP X30, X23, [X31 + 0x30]
	0x03AFDEF0 LDP D9, D8, [X31 + 0x20]
	0x03AFDEF4 LDP D11, D10, [X31 + 0x10]
	0x03AFDEF8 ADD X31, X31, 0x60
	0x03AFDEFC RET
	0x03AFDF00 BL 0x1C16F28
	0x03AFDF04 BL 0x1C16F20
	0x03AFDF08 SUB X31, X31, 0x30
	0x03AFDF0C STR X30, [X31 + 0x20]
	0x03AFDF10 AND W1, W1, 0x1
	0x03AFDF14 ADD X8, X31, 0x8
	0x03AFDF18 BL 0x3AFDD00
	0x03AFDF1C LDR V0, [X31 + 0x14]
	0x03AFDF20 LDR X30, [X31 + 0x20]
	0x03AFDF24 FADD S0, S0, S0
	0x03AFDF28 ADD X31, X31, 0x30
	0x03AFDF2C RET
	0x03AFDF30 SUB X31, X31, 0x30
	0x03AFDF34 STR X30, [X31 + 0x20]
	0x03AFDF38 AND W1, W1, 0x1
	0x03AFDF3C ADD X8, X31, 0x8
	0x03AFDF40 BL 0x3AFDD00
	0x03AFDF44 LDR V0, [X31 + 0x18]
	0x03AFDF48 LDR X30, [X31 + 0x20]
	0x03AFDF4C FADD S0, S0, S0
	0x03AFDF50 ADD X31, X31, 0x30
	0x03AFDF54 RET
	0x03AFDF58 STP D15, D14, [X31 - 0xA0]!
	0x03AFDF5C STP D13, D12, [X31 + 0x10]
	0x03AFDF60 STP D11, D10, [X31 + 0x20]
	0x03AFDF64 STP D9, D8, [X31 + 0x30]
	0x03AFDF68 STP X29, X30, [X31 + 0x40]
	0x03AFDF6C STP X28, X27, [X31 + 0x50]
	0x03AFDF70 STP X26, X25, [X31 + 0x60]
	0x03AFDF74 STP X24, X23, [X31 + 0x70]
	0x03AFDF78 STP X22, X21, [X31 + 0x80]
	0x03AFDF7C STP X20, X19, [X31 + 0x90]
	0x03AFDF80 SUB X31, X31, 0xC00
	0x03AFDF84 ADRP X23, 0x8E5000
	0x03AFDF88 ADRP X21, 0x5F6000
	0x03AFDF8C LDRB W8, [X23 + 0x654]
	0x03AFDF90 LDR X21, [X21 + 0x598]
	0x03AFDF94 MOV W22, W3
	0x03AFDF98 MOV W26, W2
	0x03AFDF9C MOV V8.16B, V0.16B
	0x03AFDFA0 MOV X20, X1
	0x03AFDFA4 MOV X19, X0
	0x03AFDFA8 TBNZ X8, 0x0, 0x3AFE068
	0x03AFDFAC ADRP X0, 0x5F8000
	0x03AFDFB0 LDR X0, [X0 + 0x170]
	0x03AFDFB4 BL 0x1C16CF4
	0x03AFDFB8 ADRP X0, 0x5F6000
	0x03AFDFBC LDR X0, [X0 + 0xA28]
	0x03AFDFC0 BL 0x1C16CF4
	0x03AFDFC4 ADRP X0, 0x65B000
	0x03AFDFC8 LDR X0, [X0 + 0x318]
	0x03AFDFCC BL 0x1C16CF4
	0x03AFDFD0 ADRP X0, 0x65B000
	0x03AFDFD4 LDR X0, [X0 + 0x320]
	0x03AFDFD8 BL 0x1C16CF4
	0x03AFDFDC ADRP X0, 0x65B000
	0x03AFDFE0 LDR X0, [X0 + 0x328]
	0x03AFDFE4 BL 0x1C16CF4
	0x03AFDFE8 ADRP X0, 0x65B000
	0x03AFDFEC LDR X0, [X0 + 0x330]
	0x03AFDFF0 BL 0x1C16CF4
	0x03AFDFF4 ADRP X0, 0x5F6000
	0x03AFDFF8 LDR X0, [X0 + 0x5A8]
	0x03AFDFFC BL 0x1C16CF4
	0x03AFE000 ADRP X0, 0x5F5000
	0x03AFE004 LDR X0, [X0 + 0x598]
	0x03AFE008 BL 0x1C16CF4
	0x03AFE00C ADRP X0, 0x65B000
	0x03AFE010 LDR X0, [X0 + 0x220]
	0x03AFE014 BL 0x1C16CF4
	0x03AFE018 ADRP X0, 0x65A000
	0x03AFE01C LDR X0, [X0 + 0x370]
	0x03AFE020 BL 0x1C16CF4
	0x03AFE024 ADRP X0, 0x65A000
	0x03AFE028 LDR X0, [X0 + 0x3A0]
	0x03AFE02C BL 0x1C16CF4
	0x03AFE030 ADRP X0, 0x65A000
	0x03AFE034 LDR X0, [X0 + 0x3B0]
	0x03AFE038 BL 0x1C16CF4
	0x03AFE03C ADRP X0, 0x65A000
	0x03AFE040 LDR X0, [X0 + 0x3D0]
	0x03AFE044 BL 0x1C16CF4
	0x03AFE048 ADRP X0, 0x65A000
	0x03AFE04C LDR X0, [X0 + 0x3E8]
	0x03AFE050 BL 0x1C16CF4
	0x03AFE054 ADRP X0, 0x65A000
	0x03AFE058 LDR X0, [X0 + 0x3F8]
	0x03AFE05C BL 0x1C16CF4
	0x03AFE060 MOVZ W8, 0x1
	0x03AFE064 STRB W8, [X23 + 0x654]
	0x03AFE068 ADD X0, X31, 0x840
	0x03AFE06C MOVZ W2, 0x378
	0x03AFE070 MOV W1, W31
	0x03AFE074 STR X31, [X31 + 0xBB8]
	0x03AFE078 BL 0x3EB1B10
	0x03AFE07C ADD X0, X31, 0x4C8
	0x03AFE080 MOVZ W2, 0x378
	0x03AFE084 MOV W1, W31
	0x03AFE088 BL 0x3EB1B10
	0x03AFE08C ADD X0, X31, 0x150
	0x03AFE090 MOVZ W2, 0x378
	0x03AFE094 MOV W1, W31
	0x03AFE098 BL 0x3EB1B10
	0x03AFE09C LDR X0, [X21]
	0x03AFE0A0 MOVI V0.2D, 0x0
	0x03AFE0A4 STR W31, [X31 + 0x14C]
	0x03AFE0A8 STP X31, X31, [X31 + 0xC0]
	0x03AFE0AC STR W31, [X31 + 0xD0]
	0x03AFE0B0 STR W31, [X31 + 0xBC]
	0x03AFE0B4 STP V0, V0, [X31 + 0x120]
	0x03AFE0B8 STP V0, V0, [X31 + 0x100]
	0x03AFE0BC STP V0, V0, [X31 + 0xE0]
	0x03AFE0C0 STP X31, X31, [X31 + 0xA0]
	0x03AFE0C4 STR W31, [X31 + 0xB0]
	0x03AFE0C8 STR X31, [X31 + 0x98]
	0x03AFE0CC LDR W8, [X0 + 0xE0]
	0x03AFE0D0 LDR X23, [X19 + 0xF8]
	0x03AFE0D4 CBNZ W8, 0x3AFE0DC
	0x03AFE0D8 BL 0x1C16DFC
	0x03AFE0DC MOV X0, X23
	0x03AFE0E0 MOV X1, X31
	0x03AFE0E4 MOV X2, X31
	0x03AFE0E8 BL 0x3C3883C
	0x03AFE0EC TBNZ X0, 0x0, 0x3AFE1E0
	0x03AFE0F0 LDR X0, [X19 + 0xF8]
	0x03AFE0F4 CBZ X0, 0x3AFFD98
	0x03AFE0F8 MOV X1, X31
	0x03AFE0FC BL 0x3AE1CD0
	0x03AFE100 CBZ X0, 0x3AFE1E0
	0x03AFE104 LDR X8, [X19 + 0x478]
	0x03AFE108 CBZ X8, 0x3AFE244
	0x03AFE10C LDR X9, [X8 + 0x18]
	0x03AFE110 CBZ X9, 0x3AFE244
	0x03AFE114 CBZ W9, 0x3AFFFE0
	0x03AFE118 LDR W8, [X8 + 0x20]
	0x03AFE11C CBZ W8, 0x3AFE244
	0x03AFE120 LDR X2, [X19 + 0xF8]
	0x03AFE124 LDR X4, [X19 + 0x110]
	0x03AFE128 STR W31, [X19 + 0x120]
	0x03AFE12C ADRP X23, 0x65A000
	0x03AFE130 STR X2, [X19 + 0x100]
	0x03AFE134 STR X4, [X19 + 0x118]
	0x03AFE138 LDR X23, [X23 + 0x3E8]
	0x03AFE13C LDR X0, [X23]
	0x03AFE140 LDR W8, [X0 + 0xE0]
	0x03AFE144 CBNZ W8, 0x3AFE154
	0x03AFE148 BL 0x1C16DFC
	0x03AFE14C LDR X2, [X19 + 0x100]
	0x03AFE150 LDR X4, [X19 + 0x118]
	0x03AFE154 LDR V0, [X19 + 0x618]
	0x03AFE158 MOVI V1.2D, 0x0
	0x03AFE15C ADD X0, X31, 0x60
	0x03AFE160 MOV W1, W31
	0x03AFE164 MOV X3, X31
	0x03AFE168 MOV X5, X31
	0x03AFE16C STR X31, [X31 + 0x90]
	0x03AFE170 STP V1, V1, [X31 + 0x70]
	0x03AFE174 STR V1, [X31 + 0x6]
	0x03AFE178 BL 0x3ACB488
	0x03AFE17C LDR X8, [X23]
	0x03AFE180 ADRP X9, 0x65A000
	0x03AFE184 LDR X9, [X9 + 0x3B0]
	0x03AFE188 LDP V0, V1, [X31 + 0x60]
	0x03AFE18C LDR X8, [X8 + 0xB8]
	0x03AFE190 LDR V2, [X31 + 0x8]
	0x03AFE194 LDR X10, [X31 + 0x90]
	0x03AFE198 LDR X2, [X9]
	0x03AFE19C ADD X0, X8, 0x10
	0x03AFE1A0 ADD X1, X31, 0xBC0
	0x03AFE1A4 STR V0, [X31 + 0xBC]
	0x03AFE1A8 STR V1, [X31 + 0xBD]
	0x03AFE1AC STR V2, [X31 + 0xBE]
	0x03AFE1B0 STR X10, [X31 + 0xBF0]
	0x03AFE1B4 BL 0x2672734
	0x03AFE1B8 LDR X8, [X19 + 0x488]
	0x03AFE1BC LDR W24, [X19 + 0x490]
	0x03AFE1C0 CBZ X8, 0x3AFE1D0
	0x03AFE1C4 LDR W8, [X8 + 0x18]
	0x03AFE1C8 CMP W24, W8
	0x03AFE1CC B.LE 0x3AFE2D0
	0x03AFE1D0 CMP W24, 0x400
	0x03AFE1D4 B.LE 0x3AFE2AC
	0x03AFE1D8 ADD W1, W24, 0x100
	0x03AFE1DC B 0x3AFE2BC
	0x03AFE1E0 ADRP X20, 0x65A000
	0x03AFE1E4 ADRP X21, 0x5F5000
	0x03AFE1E8 LDR X20, [X20 + 0x3F8]
	0x03AFE1EC LDR X21, [X21 + 0xA28]
	0x03AFE1F0 MOV X0, X19
	0x03AFE1F4 MOV X1, X31
	0x03AFE1F8 BL 0x3C385F8
	0x03AFE1FC STR W0, [X31 + 0x14C]
	0x03AFE200 ADD X0, X31, 0x14C
	0x03AFE204 MOV X1, X31
	0x03AFE208 BL 0x337B6E0
	0x03AFE20C LDR X8, [X20]
	0x03AFE210 MOV X1, X0
	0x03AFE214 MOV X2, X31
	0x03AFE218 MOV X0, X8
	0x03AFE21C BL 0x321B938
	0x03AFE220 LDR X8, [X21]
	0x03AFE224 MOV X20, X0
	0x03AFE228 LDR W9, [X8 + 0xE0]
	0x03AFE22C CBNZ W9, 0x3AFE238
	0x03AFE230 MOV X0, X8
	0x03AFE234 BL 0x1C16DFC
	0x03AFE238 MOV X0, X20
	0x03AFE23C MOV X1, X31
	0x03AFE240 BL 0x3C06A04
	0x03AFE244 MOVZ W20, 0x1
	0x03AFE248 STRB W20, [X19 + 0x24C]
	0x03AFE24C ADRP X19, 0x8DB000
	0x03AFE250 LDRB W8, [X19 + 0x78F]
	0x03AFE254 CBNZ W8, 0x3AFE268
	0x03AFE258 ADRP X0, 0x5FD000
	0x03AFE25C LDR X0, [X0 + 0xF08]
	0x03AFE260 BL 0x1C16CF4
	0x03AFE264 STRB W20, [X19 + 0x78F]
	0x03AFE268 ADRP X8, 0x5FD000
	0x03AFE26C LDR X8, [X8 + 0xF08]
	0x03AFE270 LDR X8, [X8]
	0x03AFE274 LDR X8, [X8 + 0xB8]
	0x03AFE278 LDP S0, S1, [X8]
	0x03AFE27C ADD X31, X31, 0xC00
	0x03AFE280 LDP X20, X19, [X31 + 0x90]
	0x03AFE284 LDP X22, X21, [X31 + 0x80]
	0x03AFE288 LDP X24, X23, [X31 + 0x70]
	0x03AFE28C LDP X26, X25, [X31 + 0x60]
	0x03AFE290 LDP X28, X27, [X31 + 0x50]
	0x03AFE294 LDP X29, X30, [X31 + 0x40]
	0x03AFE298 LDP D9, D8, [X31 + 0x30]
	0x03AFE29C LDP D11, D10, [X31 + 0x20]
	0x03AFE2A0 LDP D13, D12, [X31 + 0x10]
	0x03AFE2A4 LDP D15, D14, [X31], #0xA0
	0x03AFE2A8 RET
	0x03AFE2AC MOV W0, W24
	0x03AFE2B0 MOV X1, X31
	0x03AFE2B4 BL 0x3C2B340
	0x03AFE2B8 MOV W1, W0
	0x03AFE2BC ADRP X8, 0x65B000

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X25, 0x8E6000
	015 Move W8, [X25+1606]
	016 Move X19, X5
	017 Move X20, X4
	018 Move X22, X3
	019 Move W24, W2
	020 Move X23, X1
	021 Move X21, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {34}
	026 Move X0, 0x65D000
	027 Move X0, [X0+528]
	028 Call 0x1C17CF4
	029 Move X0, 0x65D000
	030 Move X0, [X0+512]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X25+1606], W8
	034 Add W2, W24, 7
	035 Move X1, X23
	036 Move X3, X22
	037 Move [X31+4], W31
	038 Call TMP_Text.GetStyleHashCode, X0, X1, X2, X3
	039 Move W1, W0
	040 Move X0, X21
	041 Call TMP_Text.GetStyle, X0, X1
	042 Compare X0, 0
	043 JumpIfEqual {240}
	044 Move W8, [X22]
	045 Compare W8, 0
	046 JumpIfEqual {239}
	047 Move W9, [X21+1480]
	048 Move X8, [X21+1472]
	049 Add W9, W9, 1
	050 Move [X21+1480], W9
	051 Compare X8, 0
	052 JumpIfEqual {254}
	053 Move W10, [X8+24]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X10, 0x65D000
	056 Move W1, [X0+24]
	057 Move X10, [X10+528]
	058 Move X9, W9
	059 Add X8, X8, X9
	060 Move X23, X0
	061 Move X2, [X10]
	062 Add X0, X8, 32
	063 Call TMP_TextProcessingStack`1<Int32>.Push, X0, X1
	064 Move X22, [X23+48]
	065 Compare X22, 0
	066 JumpIfEqual {254}
	067 Move X25, [X22+24]
	068 Move [X31+8], X22
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Compare W25, 0
	071 JumpIfEqual {234}
	072 Move X26, 0x65D000
	073 Move X26, [X26+512]
	074 Move W28, 0xC72F
	075 Move W29, 0x2CAE
	076 Move W8, W25
	077 Move W23, W31
	078 Move W27, 12
	079 NotImplemented "Instruction MOVK not yet implemented."
	080 NotImplemented "Instruction MOVK not yet implemented."
	081 Add X9, X22, W23
	082 Move W24, [X9+32]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Add W9, W23, 1
	085 NotImplemented "Instruction CMP not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Add X8, X22, W9
	088 Move W8, [X8+32]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 NotImplemented "Instruction CMP not yet implemented."
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Add W29, W23, 5
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Add W2, W23, 2
	095 Move X0, X21
	096 Move X1, X22
	097 Call TMP_Text.GetUTF16, X0, X1, X2
	098 NotImplemented "Instruction CMP not yet implemented."
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move W24, 92
	101 Move W24, 92
	102 Move W24, 10
	103 Move W23, W9
	104 Add W29, W23, 9
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Add W2, W23, 2
	107 Move X0, X21
	108 Move X1, X22
	109 Call TMP_Text.GetUTF32, X0, X1, X2
	110 Move W23, W29
	111 Move W29, 0x2CAE
	112 Move W24, W0
	113 NotImplemented "Instruction MOVK not yet implemented."
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Add W2, W23, 1
	116 Move X1, X22
	117 Call TMP_Text.GetMarkupTagHashCode, X0, X1, X2
	118 NotImplemented "Instruction CMP not yet implemented."
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move W8, 0xBD17
	121 NotImplemented "Instruction MOVK not yet implemented."
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move W8, 0xF418
	124 NotImplemented "Instruction MOVK not yet implemented."
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move X0, X21
	127 Move X3, X20
	128 Move X4, X19
	129 Call TMP_Text.ReplaceClosingStyleTag, X0, X1, X2, X3, X4
	130 Add W23, W23, 7
	131 NotImplemented "Instruction CMP not yet implemented."
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move X8, [X20]
	134 Compare X8, 0
	135 JumpIfEqual {254}
	136 Move W9, [X19]
	137 Move W10, [X8+24]
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move X2, [X26]
	140 Move X0, X21
	141 Move X1, X20
	142 Call TMP_Text.ResizeInternalArray, X0, X1
	143 Move X8, [X20]
	144 Compare X8, 0
	145 JumpIfEqual {254}
	146 Move W9, [X19]
	147 Move W10, [X8+24]
	148 NotImplemented "Instruction CMP not yet implemented."
	149 NotImplemented "Instruction SMADDL not yet implemented."
	150 Move W9, 160
	151 Move X8, [X20]
	152 Compare X8, 0
	153 JumpIfEqual {254}
	154 Move W9, [X19]
	155 Move W10, [X8+24]
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move X2, [X26]
	158 Move X0, X21
	159 Move X1, X20
	160 Call TMP_Text.ResizeInternalArray, X0, X1
	161 Move X8, [X20]
	162 Compare X8, 0
	163 JumpIfEqual {254}
	164 Move W9, [X19]
	165 Move W10, [X8+24]
	166 NotImplemented "Instruction CMP not yet implemented."
	167 NotImplemented "Instruction SMADDL not yet implemented."
	168 Move W9, 10
	169 Move [X8+32], W9
	170 Move W8, [X19]
	171 Add W23, W23, 3
	172 Move W29, 0x2CAE
	173 Move W24, 92
	174 NotImplemented "Instruction MOVK not yet implemented."
	175 Move X8, [X20]
	176 Compare X8, 0
	177 JumpIfEqual {254}
	178 Move W9, [X19]
	179 Move W10, [X8+24]
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move X2, [X26]
	182 Move X0, X21
	183 Move X1, X20
	184 Call TMP_Text.ResizeInternalArray, X0, X1
	185 Move X8, [X20]
	186 Compare X8, 0
	187 JumpIfEqual {254}
	188 Move W9, [X19]
	189 Move W10, [X8+24]
	190 NotImplemented "Instruction CMP not yet implemented."
	191 NotImplemented "Instruction SMADDL not yet implemented."
	192 Move W9, 0x200B
	193 Move [X8+32], W9
	194 Move W8, [X19]
	195 Add W23, W23, 5
	196 Add X1, X31, 8
	197 Add X3, X31, 4
	198 Move X0, X21
	199 Move W2, W23
	200 Move X4, X20
	201 Move X5, X19
	202 Call TMP_Text.ReplaceOpeningStyleTag, X0, X1, X2, X3, X4, X5
	203 Move TEMP, X0
	204 And TEMP, TEMP, 1
	205 Compare TEMP, 1
	206 JumpIfNotEqual {208}
	207 Move W23, [X31+4]
	208 Move W24, 60
	209 Move X8, [X20]
	210 Compare X8, 0
	211 JumpIfEqual {254}
	212 Move W9, [X19]
	213 Move W10, [X8+24]
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Move X2, [X26]
	216 Move X0, X21
	217 Move X1, X20
	218 Call TMP_Text.ResizeInternalArray, X0, X1
	219 Move X8, [X20]
	220 Compare X8, 0
	221 JumpIfEqual {254}
	222 Move W9, [X19]
	223 Move W10, [X8+24]
	224 NotImplemented "Instruction CMP not yet implemented."
	225 NotImplemented "Instruction SMADDL not yet implemented."
	226 Move [X8+32], W24
	227 Move W8, [X19]
	228 Add W8, W8, 1
	229 Move [X19], W8
	230 Add W23, W23, 1
	231 NotImplemented "Instruction CMP not yet implemented."
	232 Move W8, [X22+24]
	233 NotImplemented "Instruction CMP not yet implemented."
	234 Call 0x1C17F28
	235 Move W8, [X21+1480]
	236 Move W0, 1
	237 Subtract W8, W8, 1
	238 Move [X21+1480], W8
	239 Move W0, W31
	240 Move X20, [X31+96]
	241 Move X19, [X31+104]
	242 Move X22, [X31+80]
	243 Move X21, [X31+88]
	244 Move X24, [X31+64]
	245 Move X23, [X31+72]
	246 Move X26, [X31+48]
	247 Move X25, [X31+56]
	248 Move X28, [X31+32]
	249 Move X27, [X31+40]
	250 Move X29, [X31+16]
	251 Move X30, [X31+24]
	252 Add X31, X31, 112
	253 Return X0
	254 Call 0x1C17F20

Method: System.Void ReplaceClosingStyleTag(ref TMPro.TMP_Text/TextBackingContainer sourceText, System.Int32 srcIndex, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)

Disassembly:
	0x03AFCABC BL 0x1C16CF4
	0x03AFCAC0 MOVZ W8, 0x1
	0x03AFCAC4 STRB W8, [X22 + 0x64E]
	0x03AFCAC8 MOV X0, X21
	0x03AFCACC MOV X1, X31
	0x03AFCAD0 STR W31, [X19]
	0x03AFCAD4 BL 0x3B1BBC4
	0x03AFCAD8 CMP W0, W20
	0x03AFCADC MOV W22, W31
	0x03AFCAE0 B.LE 0x3AFCB80
	0x03AFCAE4 ADRP X24, 0x65D000
	0x03AFCAE8 LDR X24, [X24 + 0x1F0]
	0x03AFCAEC MOV W22, W31
	0x03AFCAF0 MOV X0, X21
	0x03AFCAF4 MOV W1, W20
	0x03AFCAF8 MOV X2, X31
	0x03AFCAFC BL 0x3B1BBF0
	0x03AFCB00 CMP W0, 0x22
	0x03AFCB04 B.EQ 0x3AFCB60
	0x03AFCB08 MOV X0, X21
	0x03AFCB0C MOV W1, W20
	0x03AFCB10 MOV X2, X31
	0x03AFCB14 BL 0x3B1BBF0
	0x03AFCB18 CMP W0, 0x3E
	0x03AFCB1C B.EQ 0x3AFCB7C
	0x03AFCB20 MOV X0, X21
	0x03AFCB24 MOV W1, W20
	0x03AFCB28 MOV X2, X31
	0x03AFCB2C BL 0x3B1BBF0
	0x03AFCB30 LDR X8, [X24]
	0x03AFCB34 MOV W23, W0
	0x03AFCB38 LDR W9, [X8 + 0xE0]
	0x03AFCB3C CBNZ W9, 0x3AFCB48
	0x03AFCB40 MOV X0, X8
	0x03AFCB44 BL 0x1C16DFC
	0x03AFCB48 MOV W0, W23
	0x03AFCB4C MOV X1, X31
	0x03AFCB50 BL 0x3B1CD20
	0x03AFCB54 ADD W8, W22, W22, 0x5, LSL
	0x03AFCB58 AND W9, W0, 0xFFFF
	0x03AFCB5C EOR W22, W8, W9, 0x0
	0x03AFCB60 MOV X0, X21
	0x03AFCB64 MOV X1, X31
	0x03AFCB68 ADD W20, W20, 0x1
	0x03AFCB6C BL 0x3B1BBC4
	0x03AFCB70 CMP W20, W0
	0x03AFCB74 B.LT 0x3AFCAF0
	0x03AFCB78 B 0x3AFCB80
	0x03AFCB7C STR W20, [X19]
	0x03AFCB80 MOV W0, W22
	0x03AFCB84 LDP X20, X19, [X31 + 0x30]
	0x03AFCB88 LDP X22, X21, [X31 + 0x20]
	0x03AFCB8C LDP X24, X23, [X31 + 0x10]
	0x03AFCB90 LDR X30, [X31], #0x40
	0x03AFCB94 RET
	0x03AFCB98 STP X30, X23, [X31 - 0x30]!
	0x03AFCB9C STP X22, X21, [X31 + 0x10]
	0x03AFCBA0 STP X20, X19, [X31 + 0x20]
	0x03AFCBA4 CBZ X1, 0x3AFCC3C
	0x03AFCBA8 LDR W10, [X1 + 0x18]
	0x03AFCBAC CMP W10, W2
	0x03AFCBB0 B.LS 0x3AFCC38
	0x03AFCBB4 ADD W9, W2, 0x1
	0x03AFCBB8 CMP W9, W10
	0x03AFCBBC B.CS 0x3AFCC38
	0x03AFCBC0 ADD W8, W2, 0x2
	0x03AFCBC4 CMP W8, W10
	0x03AFCBC8 B.CS 0x3AFCC38
	0x03AFCBCC ADD W22, W2, 0x3
	0x03AFCBD0 CMP W22, W10
	0x03AFCBD4 B.CS 0x3AFCC38
	0x03AFCBD8 ADD X23, X1, 0x20
	0x03AFCBDC ADD X10, X1, W2, 0x2, SXTW
	0x03AFCBE0 ADD X9, X1, W9, 0x2, SXTW
	0x03AFCBE4 LDR W1, [X23, W8, SXTW]
	0x03AFCBE8 LDR W19, [X10 + 0x20]
	0x03AFCBEC LDR W20, [X9 + 0x20]
	0x03AFCBF0 BL 0x3B0B580
	0x03AFCBF4 MOV W1, W20
	0x03AFCBF8 MOV W21, W0
	0x03AFCBFC BL 0x3B0B580
	0x03AFCC00 MOV W1, W19
	0x03AFCC04 MOV W20, W0
	0x03AFCC08 BL 0x3B0B580
	0x03AFCC0C LDR W1, [X23, W22, SXTW]
	0x03AFCC10 MOV W19, W0
	0x03AFCC14 BL 0x3B0B580
	0x03AFCC18 UBFM W8, W20, 0x18, 0x17
	0x03AFCC1C ADD W8, W8, W21, 0x4, LSL
	0x03AFCC20 ADD W8, W8, W19, 0xC, LSL
	0x03AFCC24 LDP X20, X19, [X31 + 0x20]
	0x03AFCC28 LDP X22, X21, [X31 + 0x10]
	0x03AFCC2C ADD W0, W8, W0
	0x03AFCC30 LDP X30, X23, [X31], #0x30
	0x03AFCC34 RET
	0x03AFCC38 BL 0x1C16F28
	0x03AFCC3C BL 0x1C16F20
	0x03AFCC40 STP X30, X27, [X31 - 0x50]!
	0x03AFCC44 STP X26, X25, [X31 + 0x10]
	0x03AFCC48 STP X24, X23, [X31 + 0x20]
	0x03AFCC4C STP X22, X21, [X31 + 0x30]
	0x03AFCC50 STP X20, X19, [X31 + 0x40]
	0x03AFCC54 CBZ X1, 0x3AFCD84
	0x03AFCC58 LDR W9, [X1 + 0x18]
	0x03AFCC5C CMP W9, W2
	0x03AFCC60 B.LS 0x3AFCD80
	0x03AFCC64 ADD W8, W2, 0x1
	0x03AFCC68 CMP W8, W9
	0x03AFCC6C B.CS 0x3AFCD80
	0x03AFCC70 ADD W10, W2, 0x2
	0x03AFCC74 CMP W10, W9
	0x03AFCC78 B.CS 0x3AFCD80
	0x03AFCC7C ADD W11, W2, 0x3
	0x03AFCC80 CMP W11, W9
	0x03AFCC84 B.CS 0x3AFCD80
	0x03AFCC88 ADD W13, W2, 0x4
	0x03AFCC8C CMP W13, W9
	0x03AFCC90 B.CS 0x3AFCD80
	0x03AFCC94 ADD W14, W2, 0x5
	0x03AFCC98 CMP W14, W9
	0x03AFCC9C B.CS 0x3AFCD80
	0x03AFCCA0 ADD W12, W2, 0x6
	0x03AFCCA4 CMP W12, W9
	0x03AFCCA8 B.CS 0x3AFCD80
	0x03AFCCAC ADD W26, W2, 0x7
	0x03AFCCB0 CMP W26, W9
	0x03AFCCB4 B.CS 0x3AFCD80
	0x03AFCCB8 ADD X27, X1, 0x20
	0x03AFCCBC ADD X9, X1, W2, 0x2, SXTW
	0x03AFCCC0 ADD X8, X1, W8, 0x2, SXTW
	0x03AFCCC4 ADD X10, X1, W10, 0x2, SXTW
	0x03AFCCC8 ADD X11, X1, W11, 0x2, SXTW
	0x03AFCCCC ADD X13, X1, W13, 0x2, SXTW
	0x03AFCCD0 ADD X14, X1, W14, 0x2, SXTW
	0x03AFCCD4 LDR W1, [X27, W12, SXTW]
	0x03AFCCD8 LDR W19, [X9 + 0x20]
	0x03AFCCDC LDR W20, [X8 + 0x20]
	0x03AFCCE0 LDR W21, [X10 + 0x20]
	0x03AFCCE4 LDR W22, [X11 + 0x20]
	0x03AFCCE8 LDR W23, [X13 + 0x20]
	0x03AFCCEC LDR W24, [X14 + 0x20]
	0x03AFCCF0 BL 0x3B0B580
	0x03AFCCF4 MOV W1, W24
	0x03AFCCF8 MOV W25, W0
	0x03AFCCFC BL 0x3B0B580
	0x03AFCD00 MOV W1, W23
	0x03AFCD04 MOV W24, W0
	0x03AFCD08 BL 0x3B0B580
	0x03AFCD0C MOV W1, W22
	0x03AFCD10 MOV W23, W0
	0x03AFCD14 BL 0x3B0B580
	0x03AFCD18 MOV W1, W21
	0x03AFCD1C MOV W22, W0
	0x03AFCD20 BL 0x3B0B580
	0x03AFCD24 MOV W1, W20
	0x03AFCD28 MOV W21, W0
	0x03AFCD2C BL 0x3B0B580
	0x03AFCD30 MOV W1, W19
	0x03AFCD34 MOV W20, W0
	0x03AFCD38 BL 0x3B0B580
	0x03AFCD3C LDR W1, [X27, W26, SXTW]
	0x03AFCD40 MOV W19, W0
	0x03AFCD44 BL 0x3B0B580
	0x03AFCD48 UBFM W8, W24, 0x18, 0x17
	0x03AFCD4C ADD W8, W8, W25, 0x4, LSL
	0x03AFCD50 ADD W8, W8, W23, 0xC, LSL
	0x03AFCD54 ADD W8, W8, W22, 0x10, LSL
	0x03AFCD58 ADD W8, W8, W21, 0x14, LSL
	0x03AFCD5C ADD W8, W8, W20, 0x18, LSL
	0x03AFCD60 ADD W8, W8, W19, 0x1C, LSL
	0x03AFCD64 LDP X20, X19, [X31 + 0x40]
	0x03AFCD68 LDP X22, X21, [X31 + 0x30]
	0x03AFCD6C LDP X24, X23, [X31 + 0x20]
	0x03AFCD70 LDP X26, X25, [X31 + 0x10]
	0x03AFCD74 ADD W0, W8, W0
	0x03AFCD78 LDP X30, X27, [X31], #0x50
	0x03AFCD7C RET
	0x03AFCD80 BL 0x1C16F28
	0x03AFCD84 BL 0x1C16F20
	0x03AFCD88 STR X30, [X31 - 0x60]!
	0x03AFCD8C STP X28, X27, [X31 + 0x10]
	0x03AFCD90 STP X26, X25, [X31 + 0x20]
	0x03AFCD94 STP X24, X23, [X31 + 0x30]
	0x03AFCD98 STP X22, X21, [X31 + 0x40]
	0x03AFCD9C STP X20, X19, [X31 + 0x50]
	0x03AFCDA0 ADRP X20, 0x8E6000
	0x03AFCDA4 LDRB W8, [X20 + 0x64B]
	0x03AFCDA8 MOV W21, W2
	0x03AFCDAC MOV X19, X1
	0x03AFCDB0 TBNZ X8, 0x0, 0x3AFCDC8
	0x03AFCDB4 ADRP X0, 0x65C000
	0x03AFCDB8 LDR X0, [X0 + 0xBB8]
	0x03AFCDBC BL 0x1C16CF4
	0x03AFCDC0 MOVZ W8, 0x1
	0x03AFCDC4 STRB W8, [X20 + 0x64B]
	0x03AFCDC8 CBZ X19, 0x3AFCEA0
	0x03AFCDCC MOVZ W8, 0xFFEF
	0x03AFCDD0 MOVK W8, 0x7FFF0000
	0x03AFCDD4 CMP W21, W8
	0x03AFCDD8 MOV W20, W31
	0x03AFCDDC B.GT 0x3AFCE80
	0x03AFCDE0 LDR X8, [X19 + 0x18]
	0x03AFCDE4 CMP W8, W21
	0x03AFCDE8 B.LE 0x3AFCE80
	0x03AFCDEC CMP W8, W21
	0x03AFCDF0 B.LS 0x3AFCE7C
	0x03AFCDF4 ADRP X25, 0x65C000
	0x03AFCDF8 LDR X25, [X25 + 0xBB8]
	0x03AFCDFC ADD W9, W21, 0x10
	0x03AFCE00 MOVZ X28, 0x1
	0x03AFCE04 MOV W20, W31
	0x03AFCE08 SXTW X22, W8
	0x03AFCE0C SXTW X23, W21
	0x03AFCE10 ADD X24, X19, 0x20
	0x03AFCE14 MOVZ W26, 0x1
	0x03AFCE18 SXTW X27, W9
	0x03AFCE1C MOVK X28, 0x60000000
	0x03AFCE20 LDR W21, [X24, X23, LSL #2]
	0x03AFCE24 CMP W21, 0x3E
	0x03AFCE28 B.HI 0x3AFCE38
	0x03AFCE2C LSLV X8, X26, X21
	0x03AFCE30 ANDS X31, X8, X28, 0x0
	0x03AFCE34 B.NE 0x3AFCE80
	0x03AFCE38 LDR X0, [X25]
	0x03AFCE3C LDR W8, [X0 + 0xE0]
	0x03AFCE40 CBNZ W8, 0x3AFCE48
	0x03AFCE44 BL 0x1C16DFC
	0x03AFCE48 MOV W0, W21
	0x03AFCE4C MOV X1, X31
	0x03AFCE50 BL 0x3B1FC80
	0x03AFCE54 ADD W8, W20, W20, 0x5, LSL
	0x03AFCE58 ADD X23, X23, 0x1
	0x03AFCE5C CMP X23, X27
	0x03AFCE60 EOR W20, W0, W8, 0x0
	0x03AFCE64 B.GE 0x3AFCE80
	0x03AFCE68 CMP X23, X22
	0x03AFCE6C B.GE 0x3AFCE80
	0x03AFCE70 LDR W8, [X19 + 0x18]
	0x03AFCE74 CMP W23, W8
	0x03AFCE78 B.CC 0x3AFCE20
	0x03AFCE7C BL 0x1C16F28
	0x03AFCE80 MOV W0, W20
	0x03AFCE84 LDP X20, X19, [X31 + 0x50]
	0x03AFCE88 LDP X22, X21, [X31 + 0x40]
	0x03AFCE8C LDP X24, X23, [X31 + 0x30]
	0x03AFCE90 LDP X26, X25, [X31 + 0x20]
	0x03AFCE94 LDP X28, X27, [X31 + 0x10]
	0x03AFCE98 LDR X30, [X31], #0x60
	0x03AFCE9C RET
	0x03AFCEA0 BL 0x1C16F20
	0x03AFCEA4 SUB X31, X31, 0x70

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X22, 0x8E7000
	015 Move W8, [X22+1607]
	016 Move X20, X4
	017 Move X21, X3
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0x65E000
	024 Move X0, [X0+536]
	025 Call 0x1C17CF4
	026 Move X0, 0x65E000
	027 Move X0, [X0+512]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+1607], W8
	031 Move [X31+4], W31
	032 Move X8, [X19+1472]
	033 Compare X8, 0
	034 JumpIfEqual {242}
	035 Move W9, [X19+1480]
	036 Move W10, [X8+24]
	037 Add W9, W9, 1
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X10, 0x65E000
	040 Move X10, [X10+536]
	041 Move X9, W9
	042 Add X8, X8, X9
	043 Add X0, X8, 32
	044 Move X1, [X10]
	045 Call TMP_TextProcessingStack`1<Int32>.Pop, X0
	046 Move W1, W0
	047 Move X0, X19
	048 Call TMP_Text.GetStyle, X0, X1
	049 Compare X0, 0
	050 JumpIfEqual {228}
	051 Move W8, [X19+1480]
	052 Add W8, W8, 1
	053 Move [X19+1480], W8
	054 Move X22, [X0+56]
	055 Compare X22, 0
	056 JumpIfEqual {242}
	057 Move X25, [X22+24]
	058 Move [X31+8], X22
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Compare W25, 0
	061 JumpIfEqual {224}
	062 Move X26, 0x65E000
	063 Move X26, [X26+512]
	064 Move W28, 0xC72F
	065 Move W29, 0x2CAE
	066 Move W8, W25
	067 Move W23, W31
	068 Move W27, 12
	069 NotImplemented "Instruction MOVK not yet implemented."
	070 NotImplemented "Instruction MOVK not yet implemented."
	071 Add X9, X22, W23
	072 Move W24, [X9+32]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Add W9, W23, 1
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Add X8, X22, W9
	078 Move W8, [X8+32]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction CMP not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Add W29, W23, 5
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Add W2, W23, 2
	085 Move X0, X19
	086 Move X1, X22
	087 Call TMP_Text.GetUTF16, X0, X1, X2
	088 NotImplemented "Instruction CMP not yet implemented."
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move W24, 92
	091 Move W24, 92
	092 Move W24, 10
	093 Move W23, W9
	094 Add W29, W23, 9
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Add W2, W23, 2
	097 Move X0, X19
	098 Move X1, X22
	099 Call TMP_Text.GetUTF32, X0, X1, X2
	100 Move W23, W29
	101 Move W29, 0x2CAE
	102 Move W24, W0
	103 NotImplemented "Instruction MOVK not yet implemented."
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Add W2, W23, 1
	106 Move X1, X22
	107 Call TMP_Text.GetMarkupTagHashCode, X0, X1, X2
	108 NotImplemented "Instruction CMP not yet implemented."
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move W8, 0xBD17
	111 NotImplemented "Instruction MOVK not yet implemented."
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move W8, 0xF418
	114 NotImplemented "Instruction MOVK not yet implemented."
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X0, X19
	117 Move X3, X21
	118 Move X4, X20
	119 Call TMP_Text.ReplaceClosingStyleTag, X0, X1, X2, X3, X4
	120 Add W23, W23, 7
	121 NotImplemented "Instruction CMP not yet implemented."
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move X8, [X21]
	124 Compare X8, 0
	125 JumpIfEqual {242}
	126 Move W9, [X20]
	127 Move W10, [X8+24]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X2, [X26]
	130 Move X0, X19
	131 Move X1, X21
	132 Call TMP_Text.ResizeInternalArray, X0, X1
	133 Move X8, [X21]
	134 Compare X8, 0
	135 JumpIfEqual {242}
	136 Move W9, [X20]
	137 Move W10, [X8+24]
	138 NotImplemented "Instruction CMP not yet implemented."
	139 NotImplemented "Instruction SMADDL not yet implemented."
	140 Move W9, 160
	141 Move X8, [X21]
	142 Compare X8, 0
	143 JumpIfEqual {242}
	144 Move W9, [X20]
	145 Move W10, [X8+24]
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move X2, [X26]
	148 Move X0, X19
	149 Move X1, X21
	150 Call TMP_Text.ResizeInternalArray, X0, X1
	151 Move X8, [X21]
	152 Compare X8, 0
	153 JumpIfEqual {242}
	154 Move W9, [X20]
	155 Move W10, [X8+24]
	156 NotImplemented "Instruction CMP not yet implemented."
	157 NotImplemented "Instruction SMADDL not yet implemented."
	158 Move W9, 10
	159 Move [X8+32], W9
	160 Move W8, [X20]
	161 Add W23, W23, 3
	162 Move W29, 0x2CAE
	163 Move W24, 92
	164 NotImplemented "Instruction MOVK not yet implemented."
	165 Move X8, [X21]
	166 Compare X8, 0
	167 JumpIfEqual {242}
	168 Move W9, [X20]
	169 Move W10, [X8+24]
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Move X2, [X26]
	172 Move X0, X19
	173 Move X1, X21
	174 Call TMP_Text.ResizeInternalArray, X0, X1
	175 Move X8, [X21]
	176 Compare X8, 0
	177 JumpIfEqual {242}
	178 Move W9, [X20]
	179 Move W10, [X8+24]
	180 NotImplemented "Instruction CMP not yet implemented."
	181 NotImplemented "Instruction SMADDL not yet implemented."
	182 Move W9, 0x200B
	183 Move [X8+32], W9
	184 Move W8, [X20]
	185 Add W23, W23, 5
	186 Add X1, X31, 8
	187 Add X3, X31, 4
	188 Move X0, X19
	189 Move W2, W23
	190 Move X4, X21
	191 Move X5, X20
	192 Call TMP_Text.ReplaceOpeningStyleTag, X0, X1, X2, X3, X4, X5
	193 Move TEMP, X0
	194 And TEMP, TEMP, 1
	195 Compare TEMP, 1
	196 JumpIfNotEqual {198}
	197 Move W23, [X31+4]
	198 Move W24, 60
	199 Move X8, [X21]
	200 Compare X8, 0
	201 JumpIfEqual {242}
	202 Move W9, [X20]
	203 Move W10, [X8+24]
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move X2, [X26]
	206 Move X0, X19
	207 Move X1, X21
	208 Call TMP_Text.ResizeInternalArray, X0, X1
	209 Move X8, [X21]
	210 Compare X8, 0
	211 JumpIfEqual {242}
	212 Move W9, [X20]
	213 Move W10, [X8+24]
	214 NotImplemented "Instruction CMP not yet implemented."
	215 NotImplemented "Instruction SMADDL not yet implemented."
	216 Move [X8+32], W24
	217 Move W8, [X20]
	218 Add W8, W8, 1
	219 Move [X20], W8
	220 Add W23, W23, 1
	221 NotImplemented "Instruction CMP not yet implemented."
	222 Move W8, [X22+24]
	223 NotImplemented "Instruction CMP not yet implemented."
	224 Call 0x1C17F28
	225 Move W8, [X19+1480]
	226 Subtract W8, W8, 1
	227 Move [X19+1480], W8
	228 Move X20, [X31+96]
	229 Move X19, [X31+104]
	230 Move X22, [X31+80]
	231 Move X21, [X31+88]
	232 Move X24, [X31+64]
	233 Move X23, [X31+72]
	234 Move X26, [X31+48]
	235 Move X25, [X31+56]
	236 Move X28, [X31+32]
	237 Move X27, [X31+40]
	238 Move X29, [X31+16]
	239 Move X30, [X31+24]
	240 Add X31, X31, 112
	241 Return 
	242 Call 0x1C17F20

Method: System.Void ReplaceClosingStyleTag(ref System.Int32[] sourceText, System.Int32 srcIndex, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)

Disassembly:
	0x03AFE2C0 LDR X8, [X8 + 0x220]
	0x03AFE2C4 LDR X0, [X8]
	0x03AFE2C8 BL 0x1C16D6C
	0x03AFE2CC STR X0, [X19 + 0x488]
	0x03AFE2D0 LDR X8, [X19 + 0xF8]
	0x03AFE2D4 CBZ X8, 0x3AFFD98
	0x03AFE2D8 LDR V9, [X20]
	0x03AFE2DC ADD X1, X8, 0x50
	0x03AFE2E0 ADD X0, X31, 0xE0
	0x03AFE2E4 MOVZ W2, 0x60
	0x03AFE2E8 BL 0x3EB1B30
	0x03AFE2EC ADD X0, X31, 0xE0
	0x03AFE2F0 MOV X1, X31
	0x03AFE2F4 BL 0x3C9BF88
	0x03AFE2F8 LDR X8, [X19 + 0xF8]
	0x03AFE2FC CBZ X8, 0x3AFFD98
	0x03AFE300 MOV W25, W0
	0x03AFE304 ADD X1, X8, 0x50
	0x03AFE308 ADD X0, X31, 0xE0
	0x03AFE30C MOVZ W2, 0x60
	0x03AFE310 BL 0x3EB1B30
	0x03AFE314 ADD X0, X31, 0xE0
	0x03AFE318 MOV X1, X31
	0x03AFE31C BL 0x3C9BF98
	0x03AFE320 MOVZ W9, 0x3F800000
	0x03AFE324 LDR V12, [X20]
	0x03AFE328 STR W9, [X19 + 0x404]
	0x03AFE32C MOV V14.16B, V0.16B
	0x03AFE330 LDR V0, [X20]
	0x03AFE334 ADRP X21, 0x65A000
	0x03AFE338 LDRB W8, [X19 + 0x305]
	0x03AFE33C ADRP X9, 0xFFFFFFFFFCFEC000
	0x03AFE340 STR S0, [X19 + 0x1E8]
	0x03AFE344 LDR X21, [X21 + 0x3D0]
	0x03AFE348 LDR V2, [X9 + 0xBC]
	0x03AFE34C CMP W8, 0x0
	0x03AFE350 FMOV S1, 1
	0x03AFE354 LDR X1, [X21]
	0x03AFE358 ADD X0, X19, 0x1F0
	0x03AFE35C STR S2, [X31 + 0x20]
	0x03AFE360 FCSEL S15, S2, S1, EQ
	0x03AFE364 BL 0x26733E0
	0x03AFE368 LDR W8, [X19 + 0x258]
	0x03AFE36C LDR W1, [X19 + 0x26C]
	0x03AFE370 ADD X0, X19, 0x280
	0x03AFE374 STR W8, [X19 + 0x25C]
	0x03AFE378 STR W1, [X19 + 0x278]
	0x03AFE37C ADRP X8, 0x65A000
	0x03AFE380 LDR X8, [X8 + 0x3A0]
	0x03AFE384 LDR X2, [X8]
	0x03AFE388 BL 0x2672150
	0x03AFE38C STR W31, [X19 + 0x61C]
	0x03AFE390 ADRP X8, 0x65A000
	0x03AFE394 LDR X8, [X8 + 0x370]
	0x03AFE398 ADD X0, X19, 0x620
	0x03AFE39C LDR X1, [X8]
	0x03AFE3A0 BL 0x26733D4
	0x03AFE3A4 LDR X8, [X19 + 0x100]
	0x03AFE3A8 MOVZ W9, 0xFE00
	0x03AFE3AC MOVK W9, 0xC6FF0000
	0x03AFE3B0 STR W31, [X19 + 0x4D8]
	0x03AFE3B4 STR W9, [X19 + 0x2C0]
	0x03AFE3B8 CBZ X8, 0x3AFFD98
	0x03AFE3BC ADD X1, X8, 0x50
	0x03AFE3C0 ADD X0, X31, 0xE0
	0x03AFE3C4 MOVZ W2, 0x60
	0x03AFE3C8 BL 0x3EB1B30
	0x03AFE3CC ADD X0, X31, 0xE0
	0x03AFE3D0 MOV X1, X31
	0x03AFE3D4 BL 0x3C9BFA8
	0x03AFE3D8 LDR X8, [X19 + 0x100]
	0x03AFE3DC CBZ X8, 0x3AFFD98
	0x03AFE3E0 ADD X1, X8, 0x50
	0x03AFE3E4 ADD X0, X31, 0xE0
	0x03AFE3E8 MOVZ W2, 0x60
	0x03AFE3EC MOV V10.16B, V0.16B
	0x03AFE3F0 STR S12, [X31 + 0x5C]
	0x03AFE3F4 BL 0x3EB1B30
	0x03AFE3F8 ADD X0, X31, 0xE0
	0x03AFE3FC MOV X1, X31
	0x03AFE400 BL 0x3C9BFB8
	0x03AFE404 LDR X8, [X19 + 0x100]
	0x03AFE408 CBZ X8, 0x3AFFD98
	0x03AFE40C ADD X1, X8, 0x50
	0x03AFE410 ADD X0, X31, 0xE0
	0x03AFE414 MOVZ W2, 0x60
	0x03AFE418 MOV V11.16B, V0.16B
	0x03AFE41C ADD X28, X19, 0x2AC
	0x03AFE420 BL 0x3EB1B30
	0x03AFE424 ADD X0, X31, 0xE0
	0x03AFE428 MOV X1, X31
	0x03AFE42C BL 0x3C9BFF8
	0x03AFE430 MOVI D13, 0x0
	0x03AFE434 STR D13, [X28]
	0x03AFE438 STR W31, [X19 + 0x640]
	0x03AFE43C STR D13, [X19 + 0x408]
	0x03AFE440 LDR X1, [X21]
	0x03AFE444 MOV V12.16B, V0.16B
	0x03AFE448 ADD X0, X19, 0x410
	0x03AFE44C FMOV S0, W31
	0x03AFE450 BL 0x26733E0
	0x03AFE454 STRB W31, [X19 + 0x430]
	0x03AFE458 STR X31, [X28 + 0x1E8]
	0x03AFE45C LDR X0, [X23]
	0x03AFE460 STR W26, [X31 + 0xC]
	0x03AFE464 LDR W8, [X0 + 0xE0]
	0x03AFE468 CBNZ W8, 0x3AFE474
	0x03AFE46C BL 0x1C16DFC
	0x03AFE470 LDR X0, [X23]
	0x03AFE474 LDR X8, [X0 + 0xB8]
	0x03AFE478 MOVZ W9, 0xBF800000
	0x03AFE47C MOVZ W10, 0x1
	0x03AFE480 ADD X0, X31, 0xBB8
	0x03AFE484 LDR V0, [X8 + 0x15A8]
	0x03AFE488 MOVN W1, 0x0
	0x03AFE48C MOV W2, W31
	0x03AFE490 MOV X3, X31
	0x03AFE494 UNIMPLEMENTED
	0x03AFE498 STR W31, [X19 + 0x4A8]
	0x03AFE49C STR W31, [X19 + 0x4D0]
	0x03AFE4A0 STRB W31, [X19 + 0x2C4]
	0x03AFE4A4 STR D13, [X19 + 0x350]
	0x03AFE4A8 STR W9, [X19 + 0x360]
	0x03AFE4AC STRB W10, [X19 + 0x3F5]
	0x03AFE4B0 STR D13, [X19 + 0x4B8]
	0x03AFE4B4 STR W31, [X19 + 0x4C4]
	0x03AFE4B8 STR D0, [X19 + 0x4C8]
	0x03AFE4BC STRB W31, [X19 + 0x2DA]
	0x03AFE4C0 BL 0x3B1BAD0
	0x03AFE4C4 ADD X0, X31, 0x840
	0x03AFE4C8 MOVZ W2, 0x378
	0x03AFE4CC MOV W1, W31
	0x03AFE4D0 BL 0x3EB1B10
	0x03AFE4D4 ADD X0, X31, 0x4C8
	0x03AFE4D8 MOVZ W2, 0x378
	0x03AFE4DC MOV W1, W31
	0x03AFE4E0 BL 0x3EB1B10
	0x03AFE4E4 ADD X0, X31, 0x150
	0x03AFE4E8 MOVZ W2, 0x378
	0x03AFE4EC MOV W1, W31
	0x03AFE4F0 BL 0x3EB1B10
	0x03AFE4F4 LDR W8, [X19 + 0x244]
	0x03AFE4F8 LDR X1, [X19 + 0x478]
	0x03AFE4FC ADD W8, W8, 0x1
	0x03AFE500 STR W8, [X19 + 0x244]
	0x03AFE504 CBZ X1, 0x3AFFD98
	0x03AFE508 EOR W10, W22, 0x1
	0x03AFE50C STR W10, [X31 + 0x30]
	0x03AFE510 ADRP X10, 0xFFFFFFFFFCFEC000
	0x03AFE514 LDR V4, [X10 + 0x5C]
	0x03AFE518 SUB W9, W24, 0x1
	0x03AFE51C STR W9, [X31 + 0x58]
	0x03AFE520 ADRP X9, 0xFFFFFFFFFCFEB000
	0x03AFE524 STR S4, [X31 + 0x8]
	0x03AFE528 FMOV S4, W31
	0x03AFE52C LDR V2, [X9 + 0xF28]
	0x03AFE530 STR S4, [X31 + 0x4C]
	0x03AFE534 FMOV S4, W31
	0x03AFE538 FSUB S1, S11, S12
	0x03AFE53C STR S4, [X31 + 0x38]
	0x03AFE540 FMOV S4, W31
	0x03AFE544 STR S4, [X31 + 0x34]
	0x03AFE548 FSUB S4, S10, S1
	0x03AFE54C FMOV S1, W31
	0x03AFE550 SCVTF S0, W25
	0x03AFE554 STR S1, [X31 + 0x54]
	0x03AFE558 FMOV S1, W31
	0x03AFE55C FDIV S0, S9, S0
	0x03AFE560 STR S1, [X31 + 0x28]
	0x03AFE564 FADD S1, S8, S2
	0x03AFE568 ADRP X8, 0xFFFFFFFFFCFEC000
	0x03AFE56C FMUL S0, S0, S14
	0x03AFE570 STR S1, [X31 + 0x2C]
	0x03AFE574 FMOV S1, W31
	0x03AFE578 LDR V3, [X8 + 0x330]
	0x03AFE57C STR S1, [X31 + 0x44]
	0x03AFE580 FMUL S1, S0, S15
	0x03AFE584 LDR V0, [X31 + 0x5C]
	0x03AFE588 MOVZ W8, 0x1
	0x03AFE58C STR W31, [X31 + 0x1C]
	0x03AFE590 STR W31, [X31 + 0x3C]
	0x03AFE594 FMUL S0, S0, S3
	0x03AFE598 FMUL S0, S15, S0
	0x03AFE59C MOV W23, W31
	0x03AFE5A0 FMOV S13, W31
	0x03AFE5A4 MOVZ W29, 0x178
	0x03AFE5A8 STR S3, [X31 + 0x10]
	0x03AFE5AC STR S0, [X31 + 0x40]
	0x03AFE5B0 STP S1, S4, [X31 + 0x14]
	0x03AFE5B4 MOV V15.16B, V1.16B
	0x03AFE5B8 STR W8, [X31 + 0x24]
	0x03AFE5BC LDR W8, [X1 + 0x18]
	0x03AFE5C0 CMP W23, W8
	0x03AFE5C4 B.GE 0x3AFFD9C
	0x03AFE5C8 B.CS 0x3AFFFE0
	0x03AFE5CC MOVZ W8, 0xC
	0x03AFE5D0 SMADDL X8, X23, X8, X1
	0x03AFE5D4 LDR W24, [X8 + 0x20]
	0x03AFE5D8 CBZ W24, 0x3AFFD9C
	0x03AFE5DC CMP W24, 0x3C
	0x03AFE5E0 B.NE 0x3AFE61C
	0x03AFE5E4 LDRB W8, [X19 + 0x302]
	0x03AFE5E8 CBZ W8, 0x3AFE61C
	0x03AFE5EC MOVZ W8, 0x1
	0x03AFE5F0 ADD W2, W23, 0x1
	0x03AFE5F4 ADD X3, X31, 0xBC
	0x03AFE5F8 MOV X0, X19
	0x03AFE5FC STRB W8, [X19 + 0x431]
	0x03AFE600 STR W31, [X19 + 0x644]
	0x03AFE604 BL 0x3AFFFE4
	0x03AFE608 TBZ X0, 0x0, 0x3AFE658
	0x03AFE60C LDR W8, [X19 + 0x644]
	0x03AFE610 LDR W23, [X31 + 0xBC]
	0x03AFE614 CBNZ W8, 0x3AFE658
	0x03AFE618 B 0x3AFE7B4
	0x03AFE61C LDR X8, [X19 + 0x368]
	0x03AFE620 CBZ X8, 0x3AFFD98
	0x03AFE624 LDR X8, [X8 + 0x38]
	0x03AFE628 CBZ X8, 0x3AFFD98
	0x03AFE62C LDRSW X9, [X28 + 0x1E8]
	0x03AFE630 LDR W10, [X8 + 0x18]
	0x03AFE634 CMP W9, W10
	0x03AFE638 B.CS 0x3AFFFE0
	0x03AFE63C MADD X8, X9, X29, X8
	0x03AFE640 LDR W9, [X8 + 0x2C]
	0x03AFE644 STR W9, [X19 + 0x644]
	0x03AFE648 LDR W9, [X8 + 0x58]
	0x03AFE64C STR W9, [X19 + 0x120]
	0x03AFE650 LDR X8, [X8 + 0x38]
	0x03AFE654 STR X8, [X19 + 0x100]
	0x03AFE658 LDR X8, [X19 + 0x368]
	0x03AFE65C CBZ X8, 0x3AFFD98
	0x03AFE660 LDR X8, [X8 + 0x38]
	0x03AFE664 CBZ X8, 0x3AFFD98
	0x03AFE668 LDRSW X25, [X28 + 0x1E8]
	0x03AFE66C LDR W9, [X8 + 0x18]
	0x03AFE670 CMP W25, W9
	0x03AFE674 B.CS 0x3AFFFE0
	0x03AFE678 MADD X8, X25, X29, X8
	0x03AFE67C LDRB W27, [X8 + 0x5C]
	0x03AFE680 STRB W31, [X19 + 0x431]
	0x03AFE684 LDR W8, [X31 + 0xBB8]
	0x03AFE688 LDR W21, [X19 + 0x120]
	0x03AFE68C CMP W8, W25
	0x03AFE690 B.NE 0x3AFE704
	0x03AFE694 LDR W24, [X31 + 0xBBC]
	0x03AFE698 MOVZ W8, 0x2026
	0x03AFE69C STR W31, [X19 + 0x644]
	0x03AFE6A0 CMP W24, W8
	0x03AFE6A4 B.EQ 0x3AFE70C
	0x03AFE6A8 CMP W24, 0x3

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X22, 0x8E5000
	015 Move W8, [X22+1608]
	016 Move X20, X4
	017 Move X21, X3
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0x65C000
	024 Move X0, [X0+536]
	025 Call 0x1C17CF4
	026 Move X0, 0x65C000
	027 Move X0, [X0+512]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+1608], W8
	031 Move [X31+4], W31
	032 Move X8, [X19+1472]
	033 Compare X8, 0
	034 JumpIfEqual {242}
	035 Move W9, [X19+1480]
	036 Move W10, [X8+24]
	037 Add W9, W9, 1
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X10, 0x65C000
	040 Move X10, [X10+536]
	041 Move X9, W9
	042 Add X8, X8, X9
	043 Add X0, X8, 32
	044 Move X1, [X10]
	045 Call TMP_TextProcessingStack`1<Int32>.Pop, X0
	046 Move W1, W0
	047 Move X0, X19
	048 Call TMP_Text.GetStyle, X0, X1
	049 Compare X0, 0
	050 JumpIfEqual {228}
	051 Move W8, [X19+1480]
	052 Add W8, W8, 1
	053 Move [X19+1480], W8
	054 Move X22, [X0+56]
	055 Compare X22, 0
	056 JumpIfEqual {242}
	057 Move X25, [X22+24]
	058 Move [X31+8], X22
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Compare W25, 0
	061 JumpIfEqual {224}
	062 Move X26, 0x65C000
	063 Move X26, [X26+512]
	064 Move W28, 0xC72F
	065 Move W29, 0x2CAE
	066 Move W8, W25
	067 Move W23, W31
	068 Move W27, 12
	069 NotImplemented "Instruction MOVK not yet implemented."
	070 NotImplemented "Instruction MOVK not yet implemented."
	071 Add X9, X22, W23
	072 Move W24, [X9+32]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Add W9, W23, 1
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Add X8, X22, W9
	078 Move W8, [X8+32]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction CMP not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Add W29, W23, 5
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Add W2, W23, 2
	085 Move X0, X19
	086 Move X1, X22
	087 Call TMP_Text.GetUTF16, X0, X1, X2
	088 NotImplemented "Instruction CMP not yet implemented."
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move W24, 92
	091 Move W24, 92
	092 Move W24, 10
	093 Move W23, W9
	094 Add W29, W23, 9
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Add W2, W23, 2
	097 Move X0, X19
	098 Move X1, X22
	099 Call TMP_Text.GetUTF32, X0, X1, X2
	100 Move W23, W29
	101 Move W29, 0x2CAE
	102 Move W24, W0
	103 NotImplemented "Instruction MOVK not yet implemented."
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Add W2, W23, 1
	106 Move X1, X22
	107 Call TMP_Text.GetMarkupTagHashCode, X0, X1, X2
	108 NotImplemented "Instruction CMP not yet implemented."
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move W8, 0xBD17
	111 NotImplemented "Instruction MOVK not yet implemented."
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move W8, 0xF418
	114 NotImplemented "Instruction MOVK not yet implemented."
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X0, X19
	117 Move X3, X21
	118 Move X4, X20
	119 Call TMP_Text.ReplaceClosingStyleTag, X0, X1, X2, X3, X4
	120 Add W23, W23, 7
	121 NotImplemented "Instruction CMP not yet implemented."
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move X8, [X21]
	124 Compare X8, 0
	125 JumpIfEqual {242}
	126 Move W9, [X20]
	127 Move W10, [X8+24]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X2, [X26]
	130 Move X0, X19
	131 Move X1, X21
	132 Call TMP_Text.ResizeInternalArray, X0, X1
	133 Move X8, [X21]
	134 Compare X8, 0
	135 JumpIfEqual {242}
	136 Move W9, [X20]
	137 Move W10, [X8+24]
	138 NotImplemented "Instruction CMP not yet implemented."
	139 NotImplemented "Instruction SMADDL not yet implemented."
	140 Move W9, 160
	141 Move X8, [X21]
	142 Compare X8, 0
	143 JumpIfEqual {242}
	144 Move W9, [X20]
	145 Move W10, [X8+24]
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move X2, [X26]
	148 Move X0, X19
	149 Move X1, X21
	150 Call TMP_Text.ResizeInternalArray, X0, X1
	151 Move X8, [X21]
	152 Compare X8, 0
	153 JumpIfEqual {242}
	154 Move W9, [X20]
	155 Move W10, [X8+24]
	156 NotImplemented "Instruction CMP not yet implemented."
	157 NotImplemented "Instruction SMADDL not yet implemented."
	158 Move W9, 10
	159 Move [X8+32], W9
	160 Move W8, [X20]
	161 Add W23, W23, 3
	162 Move W29, 0x2CAE
	163 Move W24, 92
	164 NotImplemented "Instruction MOVK not yet implemented."
	165 Move X8, [X21]
	166 Compare X8, 0
	167 JumpIfEqual {242}
	168 Move W9, [X20]
	169 Move W10, [X8+24]
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Move X2, [X26]
	172 Move X0, X19
	173 Move X1, X21
	174 Call TMP_Text.ResizeInternalArray, X0, X1
	175 Move X8, [X21]
	176 Compare X8, 0
	177 JumpIfEqual {242}
	178 Move W9, [X20]
	179 Move W10, [X8+24]
	180 NotImplemented "Instruction CMP not yet implemented."
	181 NotImplemented "Instruction SMADDL not yet implemented."
	182 Move W9, 0x200B
	183 Move [X8+32], W9
	184 Move W8, [X20]
	185 Add W23, W23, 5
	186 Add X1, X31, 8
	187 Add X3, X31, 4
	188 Move X0, X19
	189 Move W2, W23
	190 Move X4, X21
	191 Move X5, X20
	192 Call TMP_Text.ReplaceOpeningStyleTag, X0, X1, X2, X3, X4, X5
	193 Move TEMP, X0
	194 And TEMP, TEMP, 1
	195 Compare TEMP, 1
	196 JumpIfNotEqual {198}
	197 Move W23, [X31+4]
	198 Move W24, 60
	199 Move X8, [X21]
	200 Compare X8, 0
	201 JumpIfEqual {242}
	202 Move W9, [X20]
	203 Move W10, [X8+24]
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move X2, [X26]
	206 Move X0, X19
	207 Move X1, X21
	208 Call TMP_Text.ResizeInternalArray, X0, X1
	209 Move X8, [X21]
	210 Compare X8, 0
	211 JumpIfEqual {242}
	212 Move W9, [X20]
	213 Move W10, [X8+24]
	214 NotImplemented "Instruction CMP not yet implemented."
	215 NotImplemented "Instruction SMADDL not yet implemented."
	216 Move [X8+32], W24
	217 Move W8, [X20]
	218 Add W8, W8, 1
	219 Move [X20], W8
	220 Add W23, W23, 1
	221 NotImplemented "Instruction CMP not yet implemented."
	222 Move W8, [X22+24]
	223 NotImplemented "Instruction CMP not yet implemented."
	224 Call 0x1C17F28
	225 Move W8, [X19+1480]
	226 Subtract W8, W8, 1
	227 Move [X19+1480], W8
	228 Move X20, [X31+96]
	229 Move X19, [X31+104]
	230 Move X22, [X31+80]
	231 Move X21, [X31+88]
	232 Move X24, [X31+64]
	233 Move X23, [X31+72]
	234 Move X26, [X31+48]
	235 Move X25, [X31+56]
	236 Move X28, [X31+32]
	237 Move X27, [X31+40]
	238 Move X29, [X31+16]
	239 Move X30, [X31+24]
	240 Add X31, X31, 112
	241 Return 
	242 Call 0x1C17F20

Method: System.Boolean InsertOpeningStyleTag(TMPro.TMP_Style style, System.Int32 srcIndex, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)

Disassembly:
	0x03AFBFEC B 0x3AFBFFC
	0x03AFBFF0 MOVZ W24, 0x5C
	0x03AFBFF4 B 0x3AFC1D4
	0x03AFBFF8 MOVZ W24, 0xA
	0x03AFBFFC MOV W23, W9
	0x03AFC000 B 0x3AFC1D4
	0x03AFC004 ADD W29, W23, 0x9
	0x03AFC008 CMP W29, W25
	0x03AFC00C B.GE 0x3AFC140
	0x03AFC010 ADD W2, W23, 0x2
	0x03AFC014 MOV X0, X21
	0x03AFC018 MOV X1, X22
	0x03AFC01C BL 0x3AFCC40
	0x03AFC020 MOV W23, W29
	0x03AFC024 MOVZ W29, 0x2CAE
	0x03AFC028 MOV W24, W0
	0x03AFC02C MOVK W29, 0x320000
	0x03AFC030 CMP W24, 0x3C
	0x03AFC034 B.NE 0x3AFC1D4
	0x03AFC038 ADD W2, W23, 0x1
	0x03AFC03C MOV X1, X22
	0x03AFC040 BL 0x3AFCD88
	0x03AFC044 CMP W0, W28
	0x03AFC048 B.LE 0x3AFC08C
	0x03AFC04C CMP W0, W29
	0x03AFC050 B.EQ 0x3AFC150
	0x03AFC054 MOVZ W8, 0xBD17
	0x03AFC058 MOVK W8, 0x5F90000
	0x03AFC05C CMP W0, W8
	0x03AFC060 B.EQ 0x3AFC1A8
	0x03AFC064 MOVZ W8, 0xF418
	0x03AFC068 MOVK W8, 0x72E60000
	0x03AFC06C CMP W0, W8
	0x03AFC070 B.NE 0x3AFC1D0
	0x03AFC074 MOV X0, X21
	0x03AFC078 MOV X3, X20
	0x03AFC07C MOV X4, X19
	0x03AFC080 BL 0x3AFD2C0
	0x03AFC084 ADD W23, W23, 0x7
	0x03AFC088 B 0x3AFC228
	0x03AFC08C CMP W0, 0x8D0
	0x03AFC090 B.EQ 0x3AFC0E8
	0x03AFC094 CMP W0, W28
	0x03AFC098 B.NE 0x3AFC1D0
	0x03AFC09C LDR X8, [X20]
	0x03AFC0A0 CBZ X8, 0x3AFC268
	0x03AFC0A4 LDR W9, [X19]
	0x03AFC0A8 LDR W10, [X8 + 0x18]
	0x03AFC0AC CMP W9, W10
	0x03AFC0B0 B.NE 0x3AFC0D0
	0x03AFC0B4 LDR X2, [X26]
	0x03AFC0B8 MOV X0, X21
	0x03AFC0BC MOV X1, X20
	0x03AFC0C0 BL 0x2298F68
	0x03AFC0C4 LDR X8, [X20]
	0x03AFC0C8 CBZ X8, 0x3AFC268
	0x03AFC0CC LDR W9, [X19]
	0x03AFC0D0 LDR W10, [X8 + 0x18]
	0x03AFC0D4 CMP W9, W10
	0x03AFC0D8 B.CS 0x3AFC240
	0x03AFC0DC SMADDL X8, X9, X27, X8
	0x03AFC0E0 MOVZ W9, 0xA0
	0x03AFC0E4 B 0x3AFC198
	0x03AFC0E8 LDR X8, [X20]
	0x03AFC0EC CBZ X8, 0x3AFC268
	0x03AFC0F0 LDR W9, [X19]
	0x03AFC0F4 LDR W10, [X8 + 0x18]
	0x03AFC0F8 CMP W9, W10
	0x03AFC0FC B.NE 0x3AFC11C
	0x03AFC100 LDR X2, [X26]
	0x03AFC104 MOV X0, X21
	0x03AFC108 MOV X1, X20
	0x03AFC10C BL 0x2298F68
	0x03AFC110 LDR X8, [X20]
	0x03AFC114 CBZ X8, 0x3AFC268
	0x03AFC118 LDR W9, [X19]
	0x03AFC11C LDR W10, [X8 + 0x18]
	0x03AFC120 CMP W9, W10
	0x03AFC124 B.CS 0x3AFC240
	0x03AFC128 SMADDL X8, X9, X27, X8
	0x03AFC12C MOVZ W9, 0xA
	0x03AFC130 STR W9, [X8 + 0x20]
	0x03AFC134 LDR W8, [X19]
	0x03AFC138 ADD W23, W23, 0x3
	0x03AFC13C B 0x3AFC220
	0x03AFC140 MOVZ W29, 0x2CAE
	0x03AFC144 MOVZ W24, 0x5C
	0x03AFC148 MOVK W29, 0x320000
	0x03AFC14C B 0x3AFC1D4
	0x03AFC150 LDR X8, [X20]
	0x03AFC154 CBZ X8, 0x3AFC268
	0x03AFC158 LDR W9, [X19]
	0x03AFC15C LDR W10, [X8 + 0x18]
	0x03AFC160 CMP W9, W10
	0x03AFC164 B.NE 0x3AFC184
	0x03AFC168 LDR X2, [X26]
	0x03AFC16C MOV X0, X21
	0x03AFC170 MOV X1, X20
	0x03AFC174 BL 0x2298F68
	0x03AFC178 LDR X8, [X20]
	0x03AFC17C CBZ X8, 0x3AFC268
	0x03AFC180 LDR W9, [X19]
	0x03AFC184 LDR W10, [X8 + 0x18]
	0x03AFC188 CMP W9, W10
	0x03AFC18C B.CS 0x3AFC240
	0x03AFC190 SMADDL X8, X9, X27, X8
	0x03AFC194 MOVZ W9, 0x200B
	0x03AFC198 STR W9, [X8 + 0x20]
	0x03AFC19C LDR W8, [X19]
	0x03AFC1A0 ADD W23, W23, 0x5
	0x03AFC1A4 B 0x3AFC220
	0x03AFC1A8 ADD X1, X31, 0x8
	0x03AFC1AC ADD X3, X31, 0x4
	0x03AFC1B0 MOV X0, X21
	0x03AFC1B4 MOV W2, W23
	0x03AFC1B8 MOV X4, X20
	0x03AFC1BC MOV X5, X19
	0x03AFC1C0 BL 0x3AFCEA4
	0x03AFC1C4 TBZ X0, 0x0, 0x3AFC1D0
	0x03AFC1C8 LDR W23, [X31 + 0x4]
	0x03AFC1CC B 0x3AFC228
	0x03AFC1D0 MOVZ W24, 0x3C
	0x03AFC1D4 LDR X8, [X20]
	0x03AFC1D8 CBZ X8, 0x3AFC268
	0x03AFC1DC LDR W9, [X19]
	0x03AFC1E0 LDR W10, [X8 + 0x18]
	0x03AFC1E4 CMP W9, W10
	0x03AFC1E8 B.NE 0x3AFC208
	0x03AFC1EC LDR X2, [X26]
	0x03AFC1F0 MOV X0, X21
	0x03AFC1F4 MOV X1, X20
	0x03AFC1F8 BL 0x2298F68
	0x03AFC1FC LDR X8, [X20]
	0x03AFC200 CBZ X8, 0x3AFC268
	0x03AFC204 LDR W9, [X19]
	0x03AFC208 LDR W10, [X8 + 0x18]
	0x03AFC20C CMP W9, W10
	0x03AFC210 B.CS 0x3AFC240
	0x03AFC214 SMADDL X8, X9, X27, X8
	0x03AFC218 STR W24, [X8 + 0x20]
	0x03AFC21C LDR W8, [X19]
	0x03AFC220 ADD W8, W8, 0x1
	0x03AFC224 STR W8, [X19]
	0x03AFC228 ADD W23, W23, 0x1
	0x03AFC22C CMP W23, W25
	0x03AFC230 B.GE 0x3AFC244
	0x03AFC234 LDR W8, [X22 + 0x18]
	0x03AFC238 CMP W23, W8
	0x03AFC23C B.CC 0x3AFBF74
	0x03AFC240 BL 0x1C16F28
	0x03AFC244 STR W31, [X21 + 0x5C8]
	0x03AFC248 LDP X20, X19, [X31 + 0x60]
	0x03AFC24C LDP X22, X21, [X31 + 0x50]
	0x03AFC250 LDP X24, X23, [X31 + 0x40]
	0x03AFC254 LDP X26, X25, [X31 + 0x30]
	0x03AFC258 LDP X28, X27, [X31 + 0x20]
	0x03AFC25C LDP X29, X30, [X31 + 0x10]
	0x03AFC260 ADD X31, X31, 0x70
	0x03AFC264 RET
	0x03AFC268 BL 0x1C16F20
	0x03AFC26C STR X30, [X31 - 0x20]!
	0x03AFC270 STP X20, X19, [X31 + 0x10]
	0x03AFC274 MOV X19, X0
	0x03AFC278 CBZ X1, 0x3AFC284
	0x03AFC27C LDR W3, [X1 + 0x10]
	0x03AFC280 B 0x3AFC288
	0x03AFC284 MOV W3, W31
	0x03AFC288 MOV X0, X19
	0x03AFC28C MOV W2, W31
	0x03AFC290 BL 0x3AFACB8
	0x03AFC294 LDR W20, [X19 + 0x400]
	0x03AFC298 MOVZ W8, 0x3
	0x03AFC29C MOV X0, X19
	0x03AFC2A0 STR W8, [X19 + 0x400]
	0x03AFC2A4 BL 0x3AFA248
	0x03AFC2A8 STR W20, [X19 + 0x400]
	0x03AFC2AC LDP X20, X19, [X31 + 0x10]
	0x03AFC2B0 LDR X30, [X31], #0x20
	0x03AFC2B4 RET
	0x03AFC2B8 STR X30, [X31 - 0x20]!
	0x03AFC2BC STP X20, X19, [X31 + 0x10]
	0x03AFC2C0 MOV X20, X1
	0x03AFC2C4 MOV X19, X0
	0x03AFC2C8 CBZ X1, 0x3AFC2D4
	0x03AFC2CC LDR W3, [X20 + 0x10]
	0x03AFC2D0 B 0x3AFC2D8
	0x03AFC2D4 MOV W3, W31
	0x03AFC2D8 MOV X0, X19
	0x03AFC2DC MOV X1, X20
	0x03AFC2E0 MOV W2, W31
	0x03AFC2E4 BL 0x3AFACB8
	0x03AFC2E8 MOVZ W8, 0x3
	0x03AFC2EC MOV X0, X19
	0x03AFC2F0 STR X20, [X19 + 0xD8]
	0x03AFC2F4 STR W8, [X19 + 0x400]
	0x03AFC2F8 BL 0x3AFA248
	0x03AFC2FC LDR X8, [X19]
	0x03AFC300 MOVZ W9, 0x1
	0x03AFC304 STRB W9, [X19 + 0x370]
	0x03AFC308 MOV X0, X19
	0x03AFC30C LDR X9, [X8 + 0x2F8]
	0x03AFC310 LDR X1, [X8 + 0x300]
	0x03AFC314 BLR X9
	0x03AFC318 LDR X8, [X19]
	0x03AFC31C MOV X0, X19
	0x03AFC320 LDP X20, X19, [X31 + 0x10]
	0x03AFC324 LDR X2, [X8 + 0x2E8]
	0x03AFC328 LDR X1, [X8 + 0x2F0]
	0x03AFC32C LDR X30, [X31], #0x20
	0x03AFC330 BR X2
	0x03AFC334 FMOV S1, W31
	0x03AFC338 FMOV S2, W31
	0x03AFC33C FMOV S3, W31
	0x03AFC340 FMOV S4, W31
	0x03AFC344 FMOV S5, W31
	0x03AFC348 FMOV S6, W31
	0x03AFC34C FMOV S7, W31
	0x03AFC350 B 0x3AFC354
	0x03AFC354 STP D15, D14, [X31 - 0xA0]!
	0x03AFC358 STP D13, D12, [X31 + 0x10]
	0x03AFC35C STP D11, D10, [X31 + 0x20]
	0x03AFC360 STP D9, D8, [X31 + 0x30]
	0x03AFC364 STR X30, [X31 + 0x40]
	0x03AFC368 STP X28, X27, [X31 + 0x50]
	0x03AFC36C STP X26, X25, [X31 + 0x60]
	0x03AFC370 STP X24, X23, [X31 + 0x70]
	0x03AFC374 STP X22, X21, [X31 + 0x80]
	0x03AFC378 STP X20, X19, [X31 + 0x90]
	0x03AFC37C STR W31, [X31 + 0x4C]
	0x03AFC380 CBZ X1, 0x3AFC610
	0x03AFC384 LDR W8, [X1 + 0x10]
	0x03AFC388 MOV X20, X1
	0x03AFC38C MOV X19, X0
	0x03AFC390 ADD X21, X0, 0x6B0
	0x03AFC394 CMP W8, 0x1
	0x03AFC398 B.LT 0x3AFC58C
	0x03AFC39C ADRP X26, 0xFFFFFFFFFD09B000
	0x03AFC3A0 MOV V8.16B, V7.16B
	0x03AFC3A4 MOV V9.16B, V6.16B
	0x03AFC3A8 MOV V10.16B, V5.16B
	0x03AFC3AC MOV V11.16B, V4.16B
	0x03AFC3B0 MOV V12.16B, V3.16B

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X23, 0x8E7000
	015 Move W8, [X23+1609]
	016 Move X20, X4
	017 Move X21, X3
	018 Move X19, X1
	019 Move X22, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0x65E000
	025 Move X0, [X0+528]
	026 Call 0x1C17CF4
	027 Move X0, 0x65E000
	028 Move X0, [X0+512]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X23+1609], W8
	032 Move [X31+4], W31
	033 Compare X19, 0
	034 JumpIfEqual {219}
	035 Move X8, [X22+1472]
	036 Compare X8, 0
	037 JumpIfEqual {235}
	038 Move W9, [X8+24]
	039 Compare W9, 0
	040 JumpIfEqual {217}
	041 Move X9, 0x65E000
	042 Move X9, [X9+528]
	043 Move W1, [X19+24]
	044 Add X0, X8, 32
	045 Move X2, [X9]
	046 Call TMP_TextProcessingStack`1<Int32>.Push, X0, X1
	047 Move X23, [X19+48]
	048 Compare X23, 0
	049 JumpIfEqual {235}
	050 Move X26, [X23+24]
	051 Move [X31+8], X23
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Compare W26, 0
	054 JumpIfEqual {217}
	055 Move X27, 0x65E000
	056 Move X27, [X27+512]
	057 Move W29, 0xC72F
	058 Move W8, W26
	059 Move W24, W31
	060 Move W28, 12
	061 NotImplemented "Instruction MOVK not yet implemented."
	062 Add X9, X23, W24
	063 Move W25, [X9+32]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Add W9, W24, 1
	066 NotImplemented "Instruction CMP not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Add X8, X23, W9
	069 Move W8, [X8+32]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 NotImplemented "Instruction CMP not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Add W29, W24, 5
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Add W2, W24, 2
	076 Move X0, X22
	077 Move X1, X23
	078 Call TMP_Text.GetUTF16, X0, X1, X2
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move W25, 92
	082 Move W25, 92
	083 Move W25, 10
	084 Move W24, W9
	085 Add W29, W24, 9
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Add W2, W24, 2
	088 Move X0, X22
	089 Move X1, X23
	090 Call TMP_Text.GetUTF32, X0, X1, X2
	091 Move W24, W29
	092 Move W29, 0xC72F
	093 Move W25, W0
	094 NotImplemented "Instruction MOVK not yet implemented."
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Add W2, W24, 1
	097 Move X1, X23
	098 Call TMP_Text.GetMarkupTagHashCode, X0, X1, X2
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move W8, 0x2CAE
	101 NotImplemented "Instruction MOVK not yet implemented."
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move W8, 0xBD17
	104 NotImplemented "Instruction MOVK not yet implemented."
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move W8, 0xF418
	107 NotImplemented "Instruction MOVK not yet implemented."
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move X0, X22
	110 Move X3, X21
	111 Move X4, X20
	112 Call TMP_Text.ReplaceClosingStyleTag, X0, X1, X2, X3, X4
	113 Add W24, W24, 7
	114 NotImplemented "Instruction CMP not yet implemented."
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X8, [X21]
	117 Compare X8, 0
	118 JumpIfEqual {235}
	119 Move W9, [X20]
	120 Move W10, [X8+24]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move X2, [X27]
	123 Move X0, X22
	124 Move X1, X21
	125 Call TMP_Text.ResizeInternalArray, X0, X1
	126 Move X8, [X21]
	127 Compare X8, 0
	128 JumpIfEqual {235}
	129 Move W9, [X20]
	130 Move W10, [X8+24]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 NotImplemented "Instruction SMADDL not yet implemented."
	133 Move W9, 160
	134 Move X8, [X21]
	135 Compare X8, 0
	136 JumpIfEqual {235}
	137 Move W9, [X20]
	138 Move W10, [X8+24]
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move X2, [X27]
	141 Move X0, X22
	142 Move X1, X21
	143 Call TMP_Text.ResizeInternalArray, X0, X1
	144 Move X8, [X21]
	145 Compare X8, 0
	146 JumpIfEqual {235}
	147 Move W9, [X20]
	148 Move W10, [X8+24]
	149 NotImplemented "Instruction CMP not yet implemented."
	150 NotImplemented "Instruction SMADDL not yet implemented."
	151 Move W9, 10
	152 Move [X8+32], W9
	153 Move W8, [X20]
	154 Add W24, W24, 3
	155 Move W29, 0xC72F
	156 Move W25, 92
	157 NotImplemented "Instruction MOVK not yet implemented."
	158 Move X8, [X21]
	159 Compare X8, 0
	160 JumpIfEqual {235}
	161 Move W9, [X20]
	162 Move W10, [X8+24]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move X2, [X27]
	165 Move X0, X22
	166 Move X1, X21
	167 Call TMP_Text.ResizeInternalArray, X0, X1
	168 Move X8, [X21]
	169 Compare X8, 0
	170 JumpIfEqual {235}
	171 Move W9, [X20]
	172 Move W10, [X8+24]
	173 NotImplemented "Instruction CMP not yet implemented."
	174 NotImplemented "Instruction SMADDL not yet implemented."
	175 Move W9, 0x200B
	176 Move [X8+32], W9
	177 Move W8, [X20]
	178 Add W24, W24, 5
	179 Add X1, X31, 8
	180 Add X3, X31, 4
	181 Move X0, X22
	182 Move W2, W24
	183 Move X4, X21
	184 Move X5, X20
	185 Call TMP_Text.ReplaceOpeningStyleTag, X0, X1, X2, X3, X4, X5
	186 Move TEMP, X0
	187 And TEMP, TEMP, 1
	188 Compare TEMP, 1
	189 JumpIfNotEqual {191}
	190 Move W24, [X31+4]
	191 Move W25, 60
	192 Move X8, [X21]
	193 Compare X8, 0
	194 JumpIfEqual {235}
	195 Move W9, [X20]
	196 Move W10, [X8+24]
	197 NotImplemented "Instruction CMP not yet implemented."
	198 Move X2, [X27]
	199 Move X0, X22
	200 Move X1, X21
	201 Call TMP_Text.ResizeInternalArray, X0, X1
	202 Move X8, [X21]
	203 Compare X8, 0
	204 JumpIfEqual {235}
	205 Move W9, [X20]
	206 Move W10, [X8+24]
	207 NotImplemented "Instruction CMP not yet implemented."
	208 NotImplemented "Instruction SMADDL not yet implemented."
	209 Move [X8+32], W25
	210 Move W8, [X20]
	211 Add W8, W8, 1
	212 Move [X20], W8
	213 Add W24, W24, 1
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Move W8, [X23+24]
	216 NotImplemented "Instruction CMP not yet implemented."
	217 Call 0x1C17F28
	218 Move [X22+1480], W31
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Move X20, [X31+96]
	221 Move X19, [X31+104]
	222 Move X22, [X31+80]
	223 Move X21, [X31+88]
	224 Move X24, [X31+64]
	225 Move X23, [X31+72]
	226 Move X26, [X31+48]
	227 Move X25, [X31+56]
	228 Move X28, [X31+32]
	229 Move X27, [X31+40]
	230 Move X29, [X31+16]
	231 Move X30, [X31+24]
	232 NotImplemented "Instruction CSET not yet implemented."
	233 Add X31, X31, 112
	234 Return X0
	235 Call 0x1C17F20

Method: System.Void InsertClosingStyleTag(ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)

Disassembly:
	0x03AFCEA8 STP X29, X30, [X31 + 0x10]
	0x03AFCEAC STP X28, X27, [X31 + 0x20]
	0x03AFCEB0 STP X26, X25, [X31 + 0x30]
	0x03AFCEB4 STP X24, X23, [X31 + 0x40]
	0x03AFCEB8 STP X22, X21, [X31 + 0x50]
	0x03AFCEBC STP X20, X19, [X31 + 0x60]
	0x03AFCEC0 ADRP X25, 0x8E6000
	0x03AFCEC4 LDRB W8, [X25 + 0x646]
	0x03AFCEC8 MOV X19, X5
	0x03AFCECC MOV X20, X4
	0x03AFCED0 MOV X22, X3
	0x03AFCED4 MOV W24, W2
	0x03AFCED8 MOV X23, X1
	0x03AFCEDC MOV X21, X0
	0x03AFCEE0 TBNZ X8, 0x0, 0x3AFCF04
	0x03AFCEE4 ADRP X0, 0x65D000
	0x03AFCEE8 LDR X0, [X0 + 0x210]
	0x03AFCEEC BL 0x1C16CF4
	0x03AFCEF0 ADRP X0, 0x65D000
	0x03AFCEF4 LDR X0, [X0 + 0x200]
	0x03AFCEF8 BL 0x1C16CF4
	0x03AFCEFC MOVZ W8, 0x1
	0x03AFCF00 STRB W8, [X25 + 0x646]
	0x03AFCF04 ADD W2, W24, 0x7
	0x03AFCF08 MOV X1, X23
	0x03AFCF0C MOV X3, X22
	0x03AFCF10 STR W31, [X31 + 0x4]
	0x03AFCF14 BL 0x3AFD6AC
	0x03AFCF18 MOV W1, W0
	0x03AFCF1C MOV X0, X21
	0x03AFCF20 BL 0x3AF77B8
	0x03AFCF24 CBZ X0, 0x3AFD29C
	0x03AFCF28 LDR W8, [X22]
	0x03AFCF2C CBZ W8, 0x3AFD298
	0x03AFCF30 LDR W9, [X21 + 0x5C8]
	0x03AFCF34 LDR X8, [X21 + 0x5C0]
	0x03AFCF38 ADD W9, W9, 0x1
	0x03AFCF3C STR W9, [X21 + 0x5C8]
	0x03AFCF40 CBZ X8, 0x3AFD2BC
	0x03AFCF44 LDR W10, [X8 + 0x18]
	0x03AFCF48 CMP W9, W10
	0x03AFCF4C B.CS 0x3AFD280
	0x03AFCF50 ADRP X10, 0x65D000
	0x03AFCF54 LDR W1, [X0 + 0x18]
	0x03AFCF58 LDR X10, [X10 + 0x210]
	0x03AFCF5C SXTW X9, W9
	0x03AFCF60 ADD X8, X8, X9, 0x5, LSL
	0x03AFCF64 MOV X23, X0
	0x03AFCF68 LDR X2, [X10]
	0x03AFCF6C ADD X0, X8, 0x20
	0x03AFCF70 BL 0x2671D30
	0x03AFCF74 LDR X22, [X23 + 0x30]
	0x03AFCF78 CBZ X22, 0x3AFD2BC
	0x03AFCF7C LDR X25, [X22 + 0x18]
	0x03AFCF80 STR X22, [X31 + 0x8]
	0x03AFCF84 CMP W25, 0x1
	0x03AFCF88 B.LT 0x3AFD284
	0x03AFCF8C CBZ W25, 0x3AFD280
	0x03AFCF90 ADRP X26, 0x65D000
	0x03AFCF94 LDR X26, [X26 + 0x200]
	0x03AFCF98 MOVZ W28, 0xC72F
	0x03AFCF9C MOVZ W29, 0x2CAE
	0x03AFCFA0 MOV W8, W25
	0x03AFCFA4 MOV W23, W31
	0x03AFCFA8 MOVZ W27, 0xC
	0x03AFCFAC MOVK W28, 0x2B0000
	0x03AFCFB0 MOVK W29, 0x320000
	0x03AFCFB4 ADD X9, X22, W23, 0x2, SXTW
	0x03AFCFB8 LDR W24, [X9 + 0x20]
	0x03AFCFBC CMP W24, 0x5C
	0x03AFCFC0 B.NE 0x3AFD070
	0x03AFCFC4 ADD W9, W23, 0x1
	0x03AFCFC8 CMP W9, W25
	0x03AFCFCC B.GE 0x3AFD030
	0x03AFCFD0 CMP W9, W8
	0x03AFCFD4 B.CS 0x3AFD280
	0x03AFCFD8 ADD X8, X22, W9, 0x2, SXTW
	0x03AFCFDC LDR W8, [X8 + 0x20]
	0x03AFCFE0 CMP W8, 0x5C
	0x03AFCFE4 B.LE 0x3AFD018
	0x03AFCFE8 CMP W8, 0x6E
	0x03AFCFEC B.EQ 0x3AFD038
	0x03AFCFF0 CMP W8, 0x75
	0x03AFCFF4 B.NE 0x3AFD030
	0x03AFCFF8 ADD W29, W23, 0x5
	0x03AFCFFC CMP W29, W25
	0x03AFD000 B.GE 0x3AFD180
	0x03AFD004 ADD W2, W23, 0x2
	0x03AFD008 MOV X0, X21
	0x03AFD00C MOV X1, X22
	0x03AFD010 BL 0x3AFCB98
	0x03AFD014 B 0x3AFD060
	0x03AFD018 CMP W8, 0x55
	0x03AFD01C B.EQ 0x3AFD044
	0x03AFD020 CMP W8, 0x5C
	0x03AFD024 B.NE 0x3AFD030
	0x03AFD028 MOVZ W24, 0x5C
	0x03AFD02C B 0x3AFD03C
	0x03AFD030 MOVZ W24, 0x5C
	0x03AFD034 B 0x3AFD214
	0x03AFD038 MOVZ W24, 0xA
	0x03AFD03C MOV W23, W9
	0x03AFD040 B 0x3AFD214
	0x03AFD044 ADD W29, W23, 0x9
	0x03AFD048 CMP W29, W25
	0x03AFD04C B.GE 0x3AFD180
	0x03AFD050 ADD W2, W23, 0x2
	0x03AFD054 MOV X0, X21
	0x03AFD058 MOV X1, X22
	0x03AFD05C BL 0x3AFCC40
	0x03AFD060 MOV W23, W29
	0x03AFD064 MOVZ W29, 0x2CAE
	0x03AFD068 MOV W24, W0
	0x03AFD06C MOVK W29, 0x320000
	0x03AFD070 CMP W24, 0x3C
	0x03AFD074 B.NE 0x3AFD214
	0x03AFD078 ADD W2, W23, 0x1
	0x03AFD07C MOV X1, X22
	0x03AFD080 BL 0x3AFCD88
	0x03AFD084 CMP W0, W28
	0x03AFD088 B.LE 0x3AFD0CC
	0x03AFD08C CMP W0, W29
	0x03AFD090 B.EQ 0x3AFD190
	0x03AFD094 MOVZ W8, 0xBD17
	0x03AFD098 MOVK W8, 0x5F90000
	0x03AFD09C CMP W0, W8
	0x03AFD0A0 B.EQ 0x3AFD1E8
	0x03AFD0A4 MOVZ W8, 0xF418
	0x03AFD0A8 MOVK W8, 0x72E60000
	0x03AFD0AC CMP W0, W8
	0x03AFD0B0 B.NE 0x3AFD210
	0x03AFD0B4 MOV X0, X21
	0x03AFD0B8 MOV X3, X20
	0x03AFD0BC MOV X4, X19
	0x03AFD0C0 BL 0x3AFD2C0
	0x03AFD0C4 ADD W23, W23, 0x7
	0x03AFD0C8 B 0x3AFD268
	0x03AFD0CC CMP W0, 0x8D0
	0x03AFD0D0 B.EQ 0x3AFD128
	0x03AFD0D4 CMP W0, W28
	0x03AFD0D8 B.NE 0x3AFD210
	0x03AFD0DC LDR X8, [X20]
	0x03AFD0E0 CBZ X8, 0x3AFD2BC
	0x03AFD0E4 LDR W9, [X19]
	0x03AFD0E8 LDR W10, [X8 + 0x18]
	0x03AFD0EC CMP W9, W10
	0x03AFD0F0 B.NE 0x3AFD110
	0x03AFD0F4 LDR X2, [X26]
	0x03AFD0F8 MOV X0, X21
	0x03AFD0FC MOV X1, X20
	0x03AFD100 BL 0x2298F68
	0x03AFD104 LDR X8, [X20]
	0x03AFD108 CBZ X8, 0x3AFD2BC
	0x03AFD10C LDR W9, [X19]
	0x03AFD110 LDR W10, [X8 + 0x18]
	0x03AFD114 CMP W9, W10
	0x03AFD118 B.CS 0x3AFD280
	0x03AFD11C SMADDL X8, X9, X27, X8
	0x03AFD120 MOVZ W9, 0xA0
	0x03AFD124 B 0x3AFD1D8
	0x03AFD128 LDR X8, [X20]
	0x03AFD12C CBZ X8, 0x3AFD2BC
	0x03AFD130 LDR W9, [X19]
	0x03AFD134 LDR W10, [X8 + 0x18]
	0x03AFD138 CMP W9, W10
	0x03AFD13C B.NE 0x3AFD15C
	0x03AFD140 LDR X2, [X26]
	0x03AFD144 MOV X0, X21
	0x03AFD148 MOV X1, X20
	0x03AFD14C BL 0x2298F68
	0x03AFD150 LDR X8, [X20]
	0x03AFD154 CBZ X8, 0x3AFD2BC
	0x03AFD158 LDR W9, [X19]
	0x03AFD15C LDR W10, [X8 + 0x18]
	0x03AFD160 CMP W9, W10
	0x03AFD164 B.CS 0x3AFD280
	0x03AFD168 SMADDL X8, X9, X27, X8
	0x03AFD16C MOVZ W9, 0xA
	0x03AFD170 STR W9, [X8 + 0x20]
	0x03AFD174 LDR W8, [X19]
	0x03AFD178 ADD W23, W23, 0x3
	0x03AFD17C B 0x3AFD260
	0x03AFD180 MOVZ W29, 0x2CAE
	0x03AFD184 MOVZ W24, 0x5C
	0x03AFD188 MOVK W29, 0x320000
	0x03AFD18C B 0x3AFD214
	0x03AFD190 LDR X8, [X20]
	0x03AFD194 CBZ X8, 0x3AFD2BC
	0x03AFD198 LDR W9, [X19]
	0x03AFD19C LDR W10, [X8 + 0x18]
	0x03AFD1A0 CMP W9, W10
	0x03AFD1A4 B.NE 0x3AFD1C4
	0x03AFD1A8 LDR X2, [X26]
	0x03AFD1AC MOV X0, X21
	0x03AFD1B0 MOV X1, X20
	0x03AFD1B4 BL 0x2298F68
	0x03AFD1B8 LDR X8, [X20]
	0x03AFD1BC CBZ X8, 0x3AFD2BC
	0x03AFD1C0 LDR W9, [X19]
	0x03AFD1C4 LDR W10, [X8 + 0x18]
	0x03AFD1C8 CMP W9, W10
	0x03AFD1CC B.CS 0x3AFD280
	0x03AFD1D0 SMADDL X8, X9, X27, X8
	0x03AFD1D4 MOVZ W9, 0x200B
	0x03AFD1D8 STR W9, [X8 + 0x20]
	0x03AFD1DC LDR W8, [X19]
	0x03AFD1E0 ADD W23, W23, 0x5
	0x03AFD1E4 B 0x3AFD260
	0x03AFD1E8 ADD X1, X31, 0x8
	0x03AFD1EC ADD X3, X31, 0x4
	0x03AFD1F0 MOV X0, X21
	0x03AFD1F4 MOV W2, W23
	0x03AFD1F8 MOV X4, X20
	0x03AFD1FC MOV X5, X19
	0x03AFD200 BL 0x3AFCEA4
	0x03AFD204 TBZ X0, 0x0, 0x3AFD210
	0x03AFD208 LDR W23, [X31 + 0x4]
	0x03AFD20C B 0x3AFD268
	0x03AFD210 MOVZ W24, 0x3C
	0x03AFD214 LDR X8, [X20]
	0x03AFD218 CBZ X8, 0x3AFD2BC
	0x03AFD21C LDR W9, [X19]
	0x03AFD220 LDR W10, [X8 + 0x18]
	0x03AFD224 CMP W9, W10
	0x03AFD228 B.NE 0x3AFD248
	0x03AFD22C LDR X2, [X26]
	0x03AFD230 MOV X0, X21
	0x03AFD234 MOV X1, X20
	0x03AFD238 BL 0x2298F68
	0x03AFD23C LDR X8, [X20]
	0x03AFD240 CBZ X8, 0x3AFD2BC
	0x03AFD244 LDR W9, [X19]
	0x03AFD248 LDR W10, [X8 + 0x18]
	0x03AFD24C CMP W9, W10
	0x03AFD250 B.CS 0x3AFD280
	0x03AFD254 SMADDL X8, X9, X27, X8
	0x03AFD258 STR W24, [X8 + 0x20]
	0x03AFD25C LDR W8, [X19]
	0x03AFD260 ADD W8, W8, 0x1
	0x03AFD264 STR W8, [X19]
	0x03AFD268 ADD W23, W23, 0x1

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X22, 0x8E7000
	015 Move W8, [X22+1610]
	016 Move X19, X2
	017 Move X20, X1
	018 Move X21, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0x65E000
	024 Move X0, [X0+536]
	025 Call 0x1C17CF4
	026 Move X0, 0x65E000
	027 Move X0, [X0+512]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+1610], W8
	031 Move [X31+4], W31
	032 Move X8, [X21+1472]
	033 Compare X8, 0
	034 JumpIfEqual {234}
	035 Move W9, [X8+24]
	036 Compare W9, 0
	037 JumpIfEqual {218}
	038 Move X9, 0x65E000
	039 Move X9, [X9+536]
	040 Add X0, X8, 32
	041 Move X1, [X9]
	042 Call TMP_TextProcessingStack`1<Int32>.Pop, X0
	043 Move W1, W0
	044 Move X0, X21
	045 Call TMP_Text.GetStyle, X0, X1
	046 Compare X0, 0
	047 JumpIfEqual {234}
	048 Move X22, [X0+56]
	049 Compare X22, 0
	050 JumpIfEqual {234}
	051 Move X25, [X22+24]
	052 Move [X31+8], X22
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Compare W25, 0
	055 JumpIfEqual {218}
	056 Move X26, 0x65E000
	057 Move X26, [X26+512]
	058 Move W28, 0xC72F
	059 Move W29, 0x2CAE
	060 Move W8, W25
	061 Move W23, W31
	062 Move W27, 12
	063 NotImplemented "Instruction MOVK not yet implemented."
	064 NotImplemented "Instruction MOVK not yet implemented."
	065 Add X9, X22, W23
	066 Move W24, [X9+32]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Add W9, W23, 1
	069 NotImplemented "Instruction CMP not yet implemented."
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Add X8, X22, W9
	072 Move W8, [X8+32]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Add W29, W23, 5
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Add W2, W23, 2
	079 Move X0, X21
	080 Move X1, X22
	081 Call TMP_Text.GetUTF16, X0, X1, X2
	082 NotImplemented "Instruction CMP not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move W24, 92
	085 Move W24, 92
	086 Move W24, 10
	087 Move W23, W9
	088 Add W29, W23, 9
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Add W2, W23, 2
	091 Move X0, X21
	092 Move X1, X22
	093 Call TMP_Text.GetUTF32, X0, X1, X2
	094 Move W23, W29
	095 Move W29, 0x2CAE
	096 Move W24, W0
	097 NotImplemented "Instruction MOVK not yet implemented."
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Add W2, W23, 1
	100 Move X1, X22
	101 Call TMP_Text.GetMarkupTagHashCode, X0, X1, X2
	102 NotImplemented "Instruction CMP not yet implemented."
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move W8, 0xBD17
	105 NotImplemented "Instruction MOVK not yet implemented."
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move W8, 0xF418
	108 NotImplemented "Instruction MOVK not yet implemented."
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move X0, X21
	111 Move X3, X20
	112 Move X4, X19
	113 Call TMP_Text.ReplaceClosingStyleTag, X0, X1, X2, X3, X4
	114 Add W23, W23, 7
	115 NotImplemented "Instruction CMP not yet implemented."
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move X8, [X20]
	118 Compare X8, 0
	119 JumpIfEqual {234}
	120 Move W9, [X19]
	121 Move W10, [X8+24]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move X2, [X26]
	124 Move X0, X21
	125 Move X1, X20
	126 Call TMP_Text.ResizeInternalArray, X0, X1
	127 Move X8, [X20]
	128 Compare X8, 0
	129 JumpIfEqual {234}
	130 Move W9, [X19]
	131 Move W10, [X8+24]
	132 NotImplemented "Instruction CMP not yet implemented."
	133 NotImplemented "Instruction SMADDL not yet implemented."
	134 Move W9, 160
	135 Move X8, [X20]
	136 Compare X8, 0
	137 JumpIfEqual {234}
	138 Move W9, [X19]
	139 Move W10, [X8+24]
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X2, [X26]
	142 Move X0, X21
	143 Move X1, X20
	144 Call TMP_Text.ResizeInternalArray, X0, X1
	145 Move X8, [X20]
	146 Compare X8, 0
	147 JumpIfEqual {234}
	148 Move W9, [X19]
	149 Move W10, [X8+24]
	150 NotImplemented "Instruction CMP not yet implemented."
	151 NotImplemented "Instruction SMADDL not yet implemented."
	152 Move W9, 10
	153 Move [X8+32], W9
	154 Move W8, [X19]
	155 Add W23, W23, 3
	156 Move W29, 0x2CAE
	157 Move W24, 92
	158 NotImplemented "Instruction MOVK not yet implemented."
	159 Move X8, [X20]
	160 Compare X8, 0
	161 JumpIfEqual {234}
	162 Move W9, [X19]
	163 Move W10, [X8+24]
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Move X2, [X26]
	166 Move X0, X21
	167 Move X1, X20
	168 Call TMP_Text.ResizeInternalArray, X0, X1
	169 Move X8, [X20]
	170 Compare X8, 0
	171 JumpIfEqual {234}
	172 Move W9, [X19]
	173 Move W10, [X8+24]
	174 NotImplemented "Instruction CMP not yet implemented."
	175 NotImplemented "Instruction SMADDL not yet implemented."
	176 Move W9, 0x200B
	177 Move [X8+32], W9
	178 Move W8, [X19]
	179 Add W23, W23, 5
	180 Add X1, X31, 8
	181 Add X3, X31, 4
	182 Move X0, X21
	183 Move W2, W23
	184 Move X4, X20
	185 Move X5, X19
	186 Call TMP_Text.ReplaceOpeningStyleTag, X0, X1, X2, X3, X4, X5
	187 Move TEMP, X0
	188 And TEMP, TEMP, 1
	189 Compare TEMP, 1
	190 JumpIfNotEqual {192}
	191 Move W23, [X31+4]
	192 Move W24, 60
	193 Move X8, [X20]
	194 Compare X8, 0
	195 JumpIfEqual {234}
	196 Move W9, [X19]
	197 Move W10, [X8+24]
	198 NotImplemented "Instruction CMP not yet implemented."
	199 Move X2, [X26]
	200 Move X0, X21
	201 Move X1, X20
	202 Call TMP_Text.ResizeInternalArray, X0, X1
	203 Move X8, [X20]
	204 Compare X8, 0
	205 JumpIfEqual {234}
	206 Move W9, [X19]
	207 Move W10, [X8+24]
	208 NotImplemented "Instruction CMP not yet implemented."
	209 NotImplemented "Instruction SMADDL not yet implemented."
	210 Move [X8+32], W24
	211 Move W8, [X19]
	212 Add W8, W8, 1
	213 Move [X19], W8
	214 Add W23, W23, 1
	215 NotImplemented "Instruction CMP not yet implemented."
	216 Move W8, [X22+24]
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Call 0x1C17F28
	219 Move [X21+1480], W31
	220 Move X20, [X31+96]
	221 Move X19, [X31+104]
	222 Move X22, [X31+80]
	223 Move X21, [X31+88]
	224 Move X24, [X31+64]
	225 Move X23, [X31+72]
	226 Move X26, [X31+48]
	227 Move X25, [X31+56]
	228 Move X28, [X31+32]
	229 Move X27, [X31+40]
	230 Move X29, [X31+16]
	231 Move X30, [X31+24]
	232 Add X31, X31, 112
	233 Return 
	234 Call 0x1C17F20

Method: System.Int32 GetMarkupTagHashCode(System.Int32[] tagDefinition, System.Int32 readIndex)

Disassembly:
	0x03AFDD88 LDR V11, [X8 + 0x1598]
	0x03AFDD8C LDR V10, [X8 + 0x159C]
	0x03AFDD90 LDR V8, [X8 + 0x15A0]
	0x03AFDD94 LDR W9, [X0 + 0xE0]
	0x03AFDD98 LDR V9, [X8 + 0x15A4]
	0x03AFDD9C CBNZ W9, 0x3AFDDA4
	0x03AFDDA0 BL 0x1C16DFC
	0x03AFDDA4 ADD X0, X31, 0x0
	0x03AFDDA8 MOV V0.16B, V11.16B
	0x03AFDDAC MOV V1.16B, V10.16B
	0x03AFDDB0 MOV V2.16B, V8.16B
	0x03AFDDB4 MOV V3.16B, V9.16B
	0x03AFDDB8 MOV X1, X31
	0x03AFDDBC BL 0x3ADB4B8
	0x03AFDDC0 LDR X8, [X21 + 0x368]
	0x03AFDDC4 CBZ X8, 0x3AFDF04
	0x03AFDDC8 LDRSW X9, [X8 + 0x18]
	0x03AFDDCC CMP W9, 0x1
	0x03AFDDD0 B.LT 0x3AFDEB0
	0x03AFDDD4 LDRSW X11, [X21 + 0x328]
	0x03AFDDD8 MOV X10, X31
	0x03AFDDDC AND W12, W20, 0x1
	0x03AFDDE0 MOVZ W13, 0x194
	0x03AFDDE4 CMP X10, X11
	0x03AFDDE8 B.LE 0x3AFDDF4
	0x03AFDDEC MOVZ W14, 0x1
	0x03AFDDF0 B 0x3AFDE20
	0x03AFDDF4 LDR X14, [X8 + 0x38]
	0x03AFDDF8 CBZ X14, 0x3AFDF04
	0x03AFDDFC LDR W15, [X14 + 0x18]
	0x03AFDE00 CMP X10, X15
	0x03AFDE04 B.CS 0x3AFDF00
	0x03AFDE08 ADD X14, X14, X13
	0x03AFDE0C SUB X14, X14, 0x130
	0x03AFDE10 LDR W14, [X14]
	0x03AFDE14 LDR W15, [X21 + 0x330]
	0x03AFDE18 CMP W14, W15
	0x03AFDE1C CSET W14, GT
	0x03AFDE20 ANDS W31, W14, W12, 0x0
	0x03AFDE24 B.NE 0x3AFDEB0
	0x03AFDE28 TBZ X20, 0x0, 0x3AFDE4C
	0x03AFDE2C LDR X14, [X8 + 0x38]
	0x03AFDE30 CBZ X14, 0x3AFDF04
	0x03AFDE34 LDR W15, [X14 + 0x18]
	0x03AFDE38 CMP X10, X15
	0x03AFDE3C B.CS 0x3AFDF00
	0x03AFDE40 LDRB W15, [X14, X13, LSL]
	0x03AFDE44 CBNZ W15, 0x3AFDE54
	0x03AFDE48 B 0x3AFDEA0
	0x03AFDE4C LDR X14, [X8 + 0x38]
	0x03AFDE50 CBZ X14, 0x3AFDF04
	0x03AFDE54 LDR W15, [X14 + 0x18]
	0x03AFDE58 LDR V0, [X31]
	0x03AFDE5C CMP X10, X15
	0x03AFDE60 B.CS 0x3AFDF00
	0x03AFDE64 ADD X14, X14, X13
	0x03AFDE68 LDUR V1, [X14 - 0x54]
	0x03AFDE6C LDR V2, [X31 + 0x4]
	0x03AFDE70 FCMP S0, S1
	0x03AFDE74 FCSEL S0, S0, S1, MI
	0x03AFDE78 STR S0, [X31]
	0x03AFDE7C LDUR V0, [X14 - 0x44]
	0x03AFDE80 FCMP S2, S0
	0x03AFDE84 FCSEL S0, S2, S0, MI
	0x03AFDE88 STR S0, [X31 + 0x4]
	0x03AFDE8C LDR V0, [X31 + 0x8]
	0x03AFDE90 LDUR V1, [X14 - 0x50]
	0x00000000 INVALID
	0x00000000 INVALID
	0x03AFDE9C STR D0, [X31 + 0x8]
	0x03AFDEA0 ADD X10, X10, 0x1

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x8E6000
	013 Move W8, [X20+1611]
	014 Move W21, W2
	015 Move X19, X1
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x65C000
	021 Move X0, [X0+3000]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+1611], W8
	025 Compare X19, 0
	026 JumpIfEqual {78}
	027 Move W8, 0xFFEF
	028 NotImplemented "Instruction MOVK not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W20, W31
	031 Move X8, [X19+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X25, 0x65C000
	035 Move X25, [X25+3000]
	036 Add W9, W21, 16
	037 Move X28, 1
	038 Move W20, W31
	039 Move X22, W8
	040 Move X23, W21
	041 Add X24, X19, 32
	042 Move W26, 1
	043 Move X27, W9
	044 NotImplemented "Instruction MOVK not yet implemented."
	045 Move W21, [X24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction LSLV not yet implemented."
	048 And X31, X8, X28
	049 Move X0, [X25]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move W0, W21
	055 Move X1, X31
	056 Call TMP_TextUtilities.ToUpperASCIIFast, X0
	057 Add W8, W20, W20
	058 Add X23, X23, 1
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Xor W20, W0, W8
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move W8, [X19+24]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Call 0x1C17F28
	065 Move W0, W20
	066 Move X20, [X31+80]
	067 Move X19, [X31+88]
	068 Move X22, [X31+64]
	069 Move X21, [X31+72]
	070 Move X24, [X31+48]
	071 Move X23, [X31+56]
	072 Move X26, [X31+32]
	073 Move X25, [X31+40]
	074 Move X28, [X31+16]
	075 Move X27, [X31+24]
	076 Move X30, [X31+96]
	077 Return X0
	078 Call 0x1C17F20

Method: System.Int32 GetMarkupTagHashCode(TMPro.TMP_Text/TextBackingContainer tagDefinition, System.Int32 readIndex)

Disassembly:
	0x03AFC594 MOV W2, W31
	0x03AFC598 MOV X3, X31
	0x03AFC59C MOV W1, W20
	0x03AFC5A0 BL 0x3B1BC20
	0x03AFC5A4 STR W20, [X19 + 0x6B8]
	0x03AFC5A8 MOVZ W20, 0x1
	0x03AFC5AC MOV X0, X19
	0x03AFC5B0 STRB W20, [X19 + 0xE0]
	0x03AFC5B4 STR W20, [X19 + 0x400]
	0x03AFC5B8 BL 0x3AFA248
	0x03AFC5BC LDR X8, [X19]
	0x03AFC5C0 STRB W20, [X19 + 0x370]
	0x03AFC5C4 MOV X0, X19
	0x03AFC5C8 LDR X9, [X8 + 0x2F8]
	0x03AFC5CC LDR X1, [X8 + 0x300]
	0x03AFC5D0 BLR X9
	0x03AFC5D4 LDR X8, [X19]
	0x03AFC5D8 MOV X0, X19
	0x03AFC5DC LDP X20, X19, [X31 + 0x90]
	0x03AFC5E0 LDP X22, X21, [X31 + 0x80]
	0x03AFC5E4 LDR X2, [X8 + 0x2E8]
	0x03AFC5E8 LDR X1, [X8 + 0x2F0]
	0x03AFC5EC LDP X24, X23, [X31 + 0x70]
	0x03AFC5F0 LDP X26, X25, [X31 + 0x60]
	0x03AFC5F4 LDP X28, X27, [X31 + 0x50]
	0x03AFC5F8 LDR X30, [X31 + 0x40]
	0x03AFC5FC LDP D9, D8, [X31 + 0x30]
	0x03AFC600 LDP D11, D10, [X31 + 0x20]
	0x03AFC604 LDP D13, D12, [X31 + 0x10]
	0x03AFC608 LDP D15, D14, [X31], #0xA0
	0x03AFC60C BR X2
	0x03AFC610 BL 0x1C16F20
	0x03AFC614 FMOV S2, W31
	0x03AFC618 FMOV S3, W31
	0x03AFC61C FMOV S4, W31
	0x03AFC620 FMOV S5, W31
	0x03AFC624 FMOV S6, W31
	0x03AFC628 FMOV S7, W31
	0x03AFC62C B 0x3AFC354
	0x03AFC630 FMOV S3, W31
	0x03AFC634 FMOV S4, W31
	0x03AFC638 FMOV S5, W31
	0x03AFC63C FMOV S6, W31
	0x03AFC640 FMOV S7, W31
	0x03AFC644 B 0x3AFC354
	0x03AFC648 FMOV S4, W31
	0x03AFC64C FMOV S5, W31
	0x03AFC650 FMOV S6, W31
	0x03AFC654 FMOV S7, W31
	0x03AFC658 B 0x3AFC354
	0x03AFC65C FMOV S5, W31
	0x03AFC660 FMOV S6, W31
	0x03AFC664 FMOV S7, W31
	0x03AFC668 B 0x3AFC354
	0x03AFC66C FMOV S6, W31
	0x03AFC670 FMOV S7, W31
	0x03AFC674 B 0x3AFC354
	0x03AFC678 FMOV S7, W31
	0x03AFC67C B 0x3AFC354
	0x03AFC680 SUB X31, X31, 0x80
	0x03AFC684 STR D8, [X31 + 0x20]
	0x03AFC688 STR X30, [X31 + 0x28]
	0x03AFC68C STP X28, X27, [X31 + 0x30]
	0x03AFC690 STP X26, X25, [X31 + 0x40]
	0x03AFC694 STP X24, X23, [X31 + 0x50]
	0x03AFC698 STP X22, X21, [X31 + 0x60]
	0x03AFC69C STP X20, X19, [X31 + 0x70]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+8], X2
	003 Move [X31+16], X30
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x8E7000
	013 Move W8, [X20+1612]
	014 Move W19, W3
	015 Move [X31], X1
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x65D000
	021 Move X0, [X0+3000]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+1612], W8
	025 Add X0, X31, 0
	026 Move X1, X31
	027 Call TextBackingContainer.get_Capacity, X0
	028 Move W8, 0xFFEF
	029 NotImplemented "Instruction MOVK not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move W20, W31
	032 Move W21, W0
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X23, 0x65D000
	035 Move X23, [X23+3000]
	036 Move X26, 1
	037 Move W20, W31
	038 Add W24, W19, 16
	039 Move W25, 1
	040 NotImplemented "Instruction MOVK not yet implemented."
	041 Add X0, X31, 0
	042 Move W1, W19
	043 Move X2, X31
	044 Call TextBackingContainer.get_Item, X0, X1
	045 Move W22, W0
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move W8, W22
	048 NotImplemented "Instruction LSLV not yet implemented."
	049 And X31, X8, X26
	050 Move X0, [X23]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move W0, W22
	056 Move X1, X31
	057 Call TMP_TextUtilities.ToUpperASCIIFast, X0
	058 Add W8, W20, W20
	059 Add W19, W19, 1
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Xor W20, W0, W8
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move W0, W20
	064 Move X20, [X31+80]
	065 Move X19, [X31+88]
	066 Move X22, [X31+64]
	067 Move X21, [X31+72]
	068 Move X24, [X31+48]
	069 Move X23, [X31+56]
	070 Move X26, [X31+32]
	071 Move X25, [X31+40]
	072 Move X30, [X31+16]
	073 Add X31, X31, 96
	074 Return X0

Method: System.Int32 GetStyleHashCode(ref System.Int32[] text, System.Int32 index, out System.Int32 closeIndex)

Disassembly:
	0x03AFE6AC B.NE 0x3AFE76C
	0x03AFE6B0 LDR X24, [X19 + 0x488]
	0x03AFE6B4 CBZ X24, 0x3AFFD98
	0x03AFE6B8 LDR X0, [X19 + 0x100]
	0x03AFE6BC CBZ X0, 0x3AFFD98
	0x03AFE6C0 MOV X1, X31
	0x03AFE6C4 BL 0x3AE1CD0
	0x03AFE6C8 CBZ X0, 0x3AFFD98
	0x03AFE6CC ADRP X8, 0x65A000
	0x03AFE6D0 LDR X8, [X8 + 0x328]
	0x03AFE6D4 MOVZ W1, 0x3
	0x03AFE6D8 LDR X2, [X8]
	0x03AFE6DC BL 0x2B0EFBC
	0x03AFE6E0 LDR W8, [X24 + 0x18]
	0x03AFE6E4 CMP W25, W8
	0x03AFE6E8 B.CS 0x3AFFFE0
	0x03AFE6EC MADD X8, X25, X29, X24
	0x03AFE6F0 MOVZ W26, 0x1
	0x03AFE6F4 MOVZ W24, 0x3
	0x03AFE6F8 STR X0, [X8 + 0x30]
	0x03AFE6FC STRB W26, [X19 + 0x2F8]
	0x03AFE700 B 0x3AFE7BC
	0x03AFE704 MOV W26, W31
	0x03AFE708 B 0x3AFE770
	0x03AFE70C LDR X8, [X19 + 0x488]
	0x03AFE710 CBZ X8, 0x3AFFD98
	0x03AFE714 LDR W9, [X8 + 0x18]
	0x03AFE718 CMP W25, W9
	0x03AFE71C B.CS 0x3AFFFE0
	0x03AFE720 LDR X9, [X19 + 0x650]
	0x03AFE724 NOP
	0x03AFE728 MADD X8, X25, X29, X8
	0x03AFE72C STR W31, [X8 + 0x2C]
	0x03AFE730 MOVZ W26, 0x1
	0x03AFE734 STR X9, [X8 + 0x30]
	0x03AFE738 LDR X9, [X19 + 0x658]
	0x03AFE73C MOVZ W24, 0x2026
	0x03AFE740 STR X9, [X8 + 0x38]
	0x03AFE744 LDR X9, [X19 + 0x660]
	0x03AFE748 STR X9, [X8 + 0x50]
	0x03AFE74C LDR W9, [X19 + 0x668]
	0x03AFE750 STR W9, [X8 + 0x58]
	0x03AFE754 ADD W8, W25, 0x1
	0x03AFE758 STRB W26, [X19 + 0x2F8]
	0x03AFE75C STR W8, [X31 + 0xBB8]
	0x03AFE760 MOVZ W8, 0x3
	0x03AFE764 STR W8, [X31 + 0xBBC]
	0x03AFE768 B 0x3AFE770
	0x03AFE76C MOVZ W26, 0x1
	0x03AFE770 CMP W24, 0x3
	0x03AFE774 B.EQ 0x3AFE7BC
	0x03AFE778 LDR W8, [X19 + 0x324]
	0x03AFE77C CMP W25, W8
	0x03AFE780 B.GE 0x3AFE7BC
	0x03AFE784 LDR X8, [X19 + 0x488]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x8E5000
	010 Move W8, [X22+1613]
	011 Move X19, X3
	012 Move W20, W2
	013 Move X21, X1
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x65C000
	019 Move X0, [X0+496]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1613], W8
	023 Move [X19], W31
	024 Move X8, [X21]
	025 Compare X8, 0
	026 JumpIfEqual {53}
	027 Move X24, 0x65C000
	028 Move X24, [X24+496]
	029 NotImplemented "Instruction SBFM not yet implemented."
	030 Move W22, W31
	031 Add X25, X9, 32
	032 Move W9, [X8+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W23, [X8]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, [X24]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move W0, W23
	043 Move X1, X31
	044 Call TMP_TextParsingUtilities.ToUpperASCIIFast, X0
	045 Move X8, [X21]
	046 Add W9, W22, W22
	047 And W10, W0, 0xFFFF
	048 Xor W22, W9, W10
	049 Add W20, W20, 1
	050 Add X25, X25, 4
	051 Compare X8, 0
	052 JumpIfNotEqual {32}
	053 Call 0x1C17F20
	054 Move [X19], W20
	055 Move W0, W22
	056 Move X20, [X31+48]
	057 Move X19, [X31+56]
	058 Move X22, [X31+32]
	059 Move X21, [X31+40]
	060 Move X24, [X31+16]
	061 Move X23, [X31+24]
	062 Move X30, [X31+64]
	063 Move X25, [X31+72]
	064 Return X0
	065 Call 0x1C17F28

Method: System.Int32 GetStyleHashCode(ref TMPro.TMP_Text/TextBackingContainer text, System.Int32 index, out System.Int32 closeIndex)

Disassembly:
	0x03AFDA8C BLR X10
	0x03AFDA90 LDR W8, [X19 + 0x244]
	0x03AFDA94 LDRB W9, [X19 + 0x24C]
	0x03AFDA98 ADD W8, W8, 0x1
	0x03AFDA9C STR W8, [X19 + 0x244]
	0x03AFDAA0 CBNZ W9, 0x3AFDAAC
	0x03AFDAA4 LDRB W8, [X19 + 0x238]
	0x03AFDAA8 B 0x3AFDA64
	0x03AFDAAC LDP X30, X19, [X31 + 0x20]
	0x03AFDAB0 LDP D9, D8, [X31 + 0x10]
	0x03AFDAB4 MOV V0.16B, V1.16B
	0x03AFDAB8 ADD X31, X31, 0x30
	0x03AFDABC RET
	0x03AFDAC0 SUB X31, X31, 0x50
	0x03AFDAC4 STR D10, [X31 + 0x10]
	0x03AFDAC8 STP D9, D8, [X31 + 0x18]
	0x03AFDACC STR X30, [X31 + 0x28]
	0x03AFDAD0 STP X22, X21, [X31 + 0x30]
	0x03AFDAD4 STP X20, X19, [X31 + 0x40]
	0x03AFDAD8 ADRP X22, 0x8E5000
	0x03AFDADC ADRP X21, 0x65B000
	0x03AFDAE0 LDRB W8, [X22 + 0x651]
	0x03AFDAE4 LDR X21, [X21 + 0x3E8]
	0x03AFDAE8 MOV X20, X1
	0x03AFDAEC MOV X19, X0
	0x03AFDAF0 TBNZ X8, 0x0, 0x3AFDB08
	0x03AFDAF4 ADRP X0, 0x65B000
	0x03AFDAF8 LDR X0, [X0 + 0x3E8]
	0x03AFDAFC BL 0x1C16CF4
	0x03AFDB00 MOVZ W8, 0x1
	0x03AFDB04 STRB W8, [X22 + 0x651]
	0x03AFDB08 MOVZ W8, 0x1
	0x03AFDB0C MOV X0, X19
	0x03AFDB10 MOV X1, X20
	0x03AFDB14 STRB W8, [X19 + 0x3F5]
	0x03AFDB18 BL 0x3AFC26C
	0x03AFDB1C LDR X8, [X19]
	0x03AFDB20 LDR X1, [X19 + 0x478]
	0x03AFDB24 MOV X0, X19
	0x03AFDB28 LDR X9, [X8 + 0x858]
	0x03AFDB2C LDR X2, [X8 + 0x860]
	0x03AFDB30 BLR X9
	0x03AFDB34 LDR X0, [X21]
	0x03AFDB38 LDR W8, [X0 + 0xE0]
	0x03AFDB3C CBNZ W8, 0x3AFDB48
	0x03AFDB40 BL 0x1C16DFC
	0x03AFDB44 LDR X0, [X21]
	0x03AFDB48 LDRB W8, [X19 + 0x238]
	0x03AFDB4C MOVZ W10, 0x254
	0x03AFDB50 LDR X9, [X0 + 0xB8]
	0x03AFDB54 ADD X1, X31, 0xC
	0x03AFDB58 CMP W8, 0x0
	0x03AFDB5C MOVZ W8, 0x1E4
	0x03AFDB60 CSEL X8, X8, X10, EQ
	0x03AFDB64 LDR V0, [X19, X8, LSL]
	0x03AFDB68 LDR V8, [X9 + 0x1598]
	0x03AFDB6C LDR V9, [X9 + 0x159C]
	0x03AFDB70 ADD X8, X19, 0x23C
	0x03AFDB74 STR S0, [X31 + 0xC]
	0x03AFDB78 LDR V0, [X19 + 0x250]
	0x03AFDB7C MOV X0, X19
	0x03AFDB80 MOV V1.16B, V9.16B
	0x03AFDB84 MOV W2, W31
	0x03AFDB88 UNIMPLEMENTED
	0x03AFDB8C STR D0, [X8]
	0x03AFDB90 LDR X8, [X19]
	0x03AFDB94 STR W31, [X19 + 0x2D4]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x8E6000
	009 Move W8, [X22+1614]
	010 Move X19, X3
	011 Move W20, W2
	012 Move X21, X1
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x65D000
	018 Move X0, [X0+496]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+1614], W8
	022 Move X0, X21
	023 Move X1, X31
	024 Move [X19], W31
	025 Call TextBackingContainer.get_Capacity, X0
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move W22, W31
	028 Move X24, 0x65D000
	029 Move X24, [X24+496]
	030 Move W22, W31
	031 Move X0, X21
	032 Move W1, W20
	033 Move X2, X31
	034 Call TextBackingContainer.get_Item, X0, X1
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X0, X21
	037 Move W1, W20
	038 Move X2, X31
	039 Call TextBackingContainer.get_Item, X0, X1
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X0, X21
	042 Move W1, W20
	043 Move X2, X31
	044 Call TextBackingContainer.get_Item, X0, X1
	045 Move X8, [X24]
	046 Move W23, W0
	047 Move W9, [X8+224]
	048 Compare W9, 0
	049 JumpIfNotEqual {52}
	050 Move X0, X8
	051 Call 0x1C17DFC
	052 Move W0, W23
	053 Move X1, X31
	054 Call TMP_TextParsingUtilities.ToUpperASCIIFast, X0
	055 Add W8, W22, W22
	056 And W9, W0, 0xFFFF
	057 Xor W22, W8, W9
	058 Move X0, X21
	059 Move X1, X31
	060 Add W20, W20, 1
	061 Call TextBackingContainer.get_Capacity, X0
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move [X19], W20
	064 Move W0, W22
	065 Move X20, [X31+48]
	066 Move X19, [X31+56]
	067 Move X22, [X31+32]
	068 Move X21, [X31+40]
	069 Move X24, [X31+16]
	070 Move X23, [X31+24]
	071 Move X30, [X31+64]
	072 Return X0

Method: System.Void ResizeInternalArray(ref T[] array)

Disassembly:
	0x02299F0C MOV X0, X19
	0x02299F10 LDP X20, X19, [X31 + 0x10]
	0x02299F14 LDR X30, [X31], #0x20
	0x02299F18 RET
	0x02299F1C ADRP X0, 0x1E5F000
	0x02299F20 LDR X0, [X0 + 0x528]
	0x02299F24 BL 0x1C16D08
	0x02299F28 BL 0x1C16F10
	0x02299F2C MOV X20, X0
	0x02299F30 ADRP X0, 0x1E83000
	0x02299F34 LDR X0, [X0 + 0x778]
	0x02299F38 BL 0x1C16D08
	0x02299F3C MOV X1, X0
	0x02299F40 MOV X0, X20
	0x02299F44 MOV X2, X31
	0x02299F48 BL 0x330E100
	0x02299F4C MOV X0, X20
	0x02299F50 MOV X1, X19
	0x02299F54 BL 0x1C16DEC
	0x02299F58 BL 0x1C16F20
	0x02299F5C STR X30, [X31 - 0x20]!
	0x02299F60 STP X20, X19, [X31 + 0x10]
	0x02299F64 LDR X8, [X1 + 0x38]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X2+56]
	005 Move X20, X2
	006 Move X19, X1
	007 Compare X8, 0
	008 JumpIfNotEqual {11}
	009 Move X0, X20
	010 Call 0x1C5D6E0
	011 Move X8, [X19]
	012 Compare X8, 0
	013 JumpIfEqual {27}
	014 Move W8, [X8+24]
	015 Move X1, X31
	016 Add W0, W8, 1
	017 Call Mathf.NextPowerOfTwo, X0
	018 Move X8, [X20+56]
	019 Move W1, W0
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X2, [X8+8]
	024 Move X3, [X2]
	025 Move X30, [X31+32]
	026 CallNoReturn X3
	027 Call 0x1C17F20

Method: System.Void ResizeInternalArray(ref T[] array, System.Int32 size)

Disassembly:
	0x02299FC0 LDP X20, X19, [X31 + 0x10]
	0x02299FC4 LDR X30, [X31], #0x20
	0x02299FC8 RET
	0x02299FCC ADRP X0, 0x1E5F000
	0x02299FD0 LDR X0, [X0 + 0x528]
	0x02299FD4 BL 0x1C16D08
	0x02299FD8 BL 0x1C16F10
	0x02299FDC MOV X20, X0
	0x02299FE0 ADRP X0, 0x1E83000
	0x02299FE4 LDR X0, [X0 + 0x778]
	0x02299FE8 BL 0x1C16D08
	0x02299FEC MOV X1, X0
	0x02299FF0 MOV X0, X20
	0x02299FF4 MOV X2, X31
	0x02299FF8 BL 0x330E100
	0x02299FFC MOV X0, X20
	0x0229A000 MOV X1, X19
	0x0229A004 BL 0x1C16DEC
	0x0229A008 BL 0x1C16F20
	0x0229A00C STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X3+56]
	006 Move X19, X3
	007 Move W21, W2
	008 Move X20, X1
	009 Compare X8, 0
	010 JumpIfNotEqual {13}
	011 Move X0, X19
	012 Call 0x1C5D6E0
	013 Add W0, W21, 1
	014 Move X1, X31
	015 Call Mathf.NextPowerOfTwo, X0
	016 Move X8, [X19+56]
	017 Move W1, W0
	018 Move X0, X20
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X2, [X8+8]
	022 Move X3, [X2]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 CallNoReturn X3

Method: System.Void AddFloatToInternalTextBackingArray(System.Single value, System.Int32 padding, System.Int32 precision, ref System.Int32 writeIndex)

Disassembly:
	0x03AFD680 SUB W8, W8, 0x1
	0x03AFD684 STR W8, [X19 + 0x5C8]
	0x03AFD688 LDP X20, X19, [X31 + 0x60]
	0x03AFD68C LDP X22, X21, [X31 + 0x50]
	0x03AFD690 LDP X24, X23, [X31 + 0x40]
	0x03AFD694 LDP X26, X25, [X31 + 0x30]
	0x03AFD698 LDP X28, X27, [X31 + 0x20]
	0x03AFD69C LDP X29, X30, [X31 + 0x10]
	0x03AFD6A0 ADD X31, X31, 0x70
	0x03AFD6A4 RET
	0x03AFD6A8 BL 0x1C16F20
	0x03AFD6AC STP X30, X25, [X31 - 0x40]!
	0x03AFD6B0 STP X24, X23, [X31 + 0x10]
	0x03AFD6B4 STP X22, X21, [X31 + 0x20]
	0x03AFD6B8 STP X20, X19, [X31 + 0x30]
	0x03AFD6BC ADRP X22, 0x8E5000
	0x03AFD6C0 LDRB W8, [X22 + 0x64D]
	0x03AFD6C4 MOV X19, X3
	0x03AFD6C8 MOV W20, W2
	0x03AFD6CC MOV X21, X1
	0x03AFD6D0 TBNZ X8, 0x0, 0x3AFD6E8
	0x03AFD6D4 ADRP X0, 0x65C000
	0x03AFD6D8 LDR X0, [X0 + 0x1F0]
	0x03AFD6DC BL 0x1C16CF4
	0x03AFD6E0 MOVZ W8, 0x1
	0x03AFD6E4 STRB W8, [X22 + 0x64D]
	0x03AFD6E8 STR W31, [X19]
	0x03AFD6EC LDR X8, [X21]
	0x03AFD6F0 CBZ X8, 0x3AFD764
	0x03AFD6F4 ADRP X24, 0x65C000
	0x03AFD6F8 LDR X24, [X24 + 0x1F0]
	0x03AFD6FC SBFM X9, X20, 0x3E, 0x1F
	0x03AFD700 MOV W22, W31
	0x03AFD704 ADD X25, X9, 0x20
	0x03AFD708 LDR W9, [X8 + 0x18]
	0x03AFD70C CMP W20, W9
	0x03AFD710 B.GE 0x3AFD76C
	0x03AFD714 B.CS 0x3AFD784
	0x03AFD718 LDR W23, [X8, X25, LSL]
	0x03AFD71C CMP W23, 0x22
	0x03AFD720 B.EQ 0x3AFD758
	0x03AFD724 CMP W23, 0x3E
	0x03AFD728 B.EQ 0x3AFD768
	0x03AFD72C LDR X0, [X24]
	0x03AFD730 LDR W8, [X0 + 0xE0]
	0x03AFD734 CBNZ W8, 0x3AFD73C
	0x03AFD738 BL 0x1C16DFC
	0x03AFD73C MOV W0, W23
	0x03AFD740 MOV X1, X31
	0x03AFD744 BL 0x3B1CD20
	0x03AFD748 LDR X8, [X21]
	0x03AFD74C ADD W9, W22, W22, 0x5, LSL
	0x03AFD750 AND W10, W0, 0xFFFF
	0x03AFD754 EOR W22, W9, W10, 0x0
	0x03AFD758 ADD W20, W20, 0x1
	0x03AFD75C ADD X25, X25, 0x4
	0x03AFD760 CBNZ X8, 0x3AFD708
	0x03AFD764 BL 0x1C16F20
	0x03AFD768 STR W20, [X19]
	0x03AFD76C MOV W0, W22
	0x03AFD770 LDP X20, X19, [X31 + 0x30]
	0x03AFD774 LDP X22, X21, [X31 + 0x20]
	0x03AFD778 LDP X24, X23, [X31 + 0x10]
	0x03AFD77C LDP X30, X25, [X31], #0x40
	0x03AFD780 RET
	0x03AFD784 BL 0x1C16F28
	0x03AFD788 STR D10, [X31 - 0x60]!
	0x03AFD78C STP D9, D8, [X31 + 0x10]
	0x03AFD790 STP X30, X25, [X31 + 0x20]
	0x03AFD794 STP X24, X23, [X31 + 0x30]
	0x03AFD798 STP X22, X21, [X31 + 0x40]
	0x03AFD79C STP X20, X19, [X31 + 0x50]
	0x03AFD7A0 ADRP X8, 0xFFFFFFFFFCFF0000
	0x03AFD7A4 LDR W24, [X2]
	0x03AFD7A8 LDR V9, [X8 + 0x550]
	0x03AFD7AC MOV X19, X2
	0x03AFD7B0 MOV W21, W1
	0x03AFD7B4 MOV V8.16B, V0.16B
	0x03AFD7B8 MOV W23, W31
	0x03AFD7BC ADD X20, X0, 0x6B0
	0x03AFD7C0 FMOV D10, 8.000000000465661
	0x03AFD7C4 MOVZ X25, 0x40480000
	0x03AFD7C8 FMOV D1, 8.000000000465661
	0x03AFD7CC MOV V0.16B, V8.16B
	0x03AFD7D0 ADD W22, W24, W23
	0x03AFD7D4 BL 0x3EB1C10
	0x03AFD7D8 FMOV D1, X25
	0x03AFD7DC FADD D0, D0, D1
	0x03AFD7E0 FCVTZS W8, D0
	0x03AFD7E4 FCMP D0, 0x0
	0x03AFD7E8 CSEL W8, W8, W8, MI
	0x03AFD7EC AND W2, W8, 0xFFFF
	0x03AFD7F0 MOV X0, X20
	0x03AFD7F4 MOV W1, W22
	0x03AFD7F8 MOV X3, X31
	0x03AFD7FC BL 0x3B1BC20
	0x03AFD800 ADD W23, W23, 0x1
	0x03AFD804 CMP W23, W21
	0x03AFD808 FDIV D8, D8, D10
	0x03AFD80C B.LT 0x3AFD7C8
	0x03AFD810 FCMP D8, D9
	0x03AFD814 B.GT 0x3AFD7C8
	0x03AFD818 LDR W1, [X19]
	0x03AFD81C ADD W24, W24, W23
	0x03AFD820 ADD W8, W1, 0x1
	0x03AFD824 CMP W8, W24
	0x03AFD828 B.GE 0x3AFD898
	0x03AFD82C MOV W21, W24
	0x03AFD830 MOV X0, X20
	0x03AFD834 MOV X2, X31
	0x03AFD838 SUB W21, W21, 0x1
	0x03AFD83C BL 0x3B1BBF0
	0x03AFD840 LDR W22, [X19]
	0x03AFD844 MOV W23, W0
	0x03AFD848 MOV X0, X20
	0x03AFD84C MOV W1, W21
	0x03AFD850 MOV X2, X31
	0x03AFD854 BL 0x3B1BBF0
	0x03AFD858 MOV W2, W0
	0x03AFD85C MOV X0, X20
	0x03AFD860 MOV W1, W22
	0x03AFD864 MOV X3, X31
	0x03AFD868 BL 0x3B1BC20
	0x03AFD86C MOV X0, X20
	0x03AFD870 MOV W1, W21
	0x03AFD874 MOV W2, W23
	0x03AFD878 MOV X3, X31
	0x03AFD87C BL 0x3B1BC20
	0x03AFD880 LDR W8, [X19]
	0x03AFD884 ADD W1, W8, 0x1
	0x03AFD888 ADD W8, W8, 0x2
	0x03AFD88C CMP W8, W21
	0x03AFD890 STR W1, [X19]
	0x03AFD894 B.LT 0x3AFD830
	0x03AFD898 STR W24, [X19]
	0x03AFD89C LDP X20, X19, [X31 + 0x50]
	0x03AFD8A0 LDP X22, X21, [X31 + 0x40]
	0x03AFD8A4 LDP X24, X23, [X31 + 0x30]
	0x03AFD8A8 LDP X30, X25, [X31 + 0x20]
	0x03AFD8AC LDP D9, D8, [X31 + 0x10]
	0x03AFD8B0 LDR V10, [X31], #0x60
	0x03AFD8B4 RET
	0x03AFD8B8 MOV W0, W31
	0x03AFD8BC RET
	0x03AFD8C0 STR D8, [X31 - 0x20]!
	0x03AFD8C4 STR X30, [X31 + 0x8]
	0x03AFD8C8 STP X20, X19, [X31 + 0x10]
	0x03AFD8CC MOVZ W20, 0x1
	0x03AFD8D0 MOV X19, X0
	0x03AFD8D4 STRB W20, [X0 + 0x3E8]
	0x03AFD8D8 BL 0x3AF98CC
	0x03AFD8DC MOV X0, X19
	0x03AFD8E0 MOV V8.16B, V0.16B
	0x03AFD8E4 STRB W20, [X19 + 0x3F4]
	0x03AFD8E8 BL 0x3AF9A20
	0x03AFD8EC STRB W20, [X19 + 0x3E8]
	0x03AFD8F0 STRB W20, [X19 + 0x3F4]
	0x03AFD8F4 LDP X20, X19, [X31 + 0x10]
	0x03AFD8F8 LDR X30, [X31 + 0x8]
	0x03AFD8FC MOV V1.16B, V0.16B
	0x03AFD900 MOV V0.16B, V8.16B
	0x03AFD904 LDR V8, [X31], #0x20
	0x03AFD908 RET
	0x03AFD90C STR D10, [X31 - 0x30]!
	0x03AFD910 STP D9, D8, [X31 + 0x10]
	0x03AFD914 STP X30, X19, [X31 + 0x20]
	0x03AFD918 MOVZ W8, 0x1
	0x03AFD91C MOV V8.16B, V1.16B
	0x03AFD920 MOV V9.16B, V0.16B
	0x03AFD924 MOV X19, X0
	0x03AFD928 STRB W8, [X0 + 0x3F5]
	0x03AFD92C BL 0x3AFA118
	0x03AFD930 LDRB W8, [X19 + 0x238]
	0x03AFD934 MOVZ W9, 0x254
	0x03AFD938 ADD X1, X31, 0xC
	0x03AFD93C MOV X0, X19
	0x03AFD940 CMP W8, 0x0
	0x03AFD944 MOVZ W8, 0x1E4
	0x03AFD948 CSEL X8, X8, X9, EQ
	0x03AFD94C LDR V0, [X19, X8, LSL]
	0x03AFD950 ADD X8, X19, 0x23C
	0x03AFD954 MOV V1.16B, V8.16B
	0x03AFD958 MOV W2, W31

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D8
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 NotImplemented "Instruction MRS not yet implemented."
	015 Move X8, [X27+40]
	016 Move X23, 0x8E6000
	017 Move X19, X3
	018 Move W20, W2
	019 Move [X31+24], X8
	020 Move W8, [X23+1615]
	021 Move W22, W1
	022 Move V8, V0
	023 Move X21, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {33}
	028 Move X0, 0x61F000
	029 Move X0, [X0+1520]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X23+1615], W8
	033 Move X28, 0x61F000
	034 Move X28, [X28+1520]
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 Move W1, [X19]
	037 Add X0, X21, 1712
	038 Move W2, 45
	039 Move X3, X31
	040 Call TextBackingContainer.set_Item, X0, X1, X2
	041 Move W8, [X19]
	042 NotImplemented "Instruction FNEG not yet implemented."
	043 Add W8, W8, 1
	044 Move [X19], W8
	045 Move X0, [X28]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move V0, V8
	051 Move X0, X31
	052 Call Decimal.op_Explicit, V0
	053 Move X23, X0
	054 Move X24, X1
	055 Or W8, W20, W22
	056 Move W9, 9
	057 Compare W8, 0
	058 JumpIfEqual {83}
	059 Move X8, [X21+1728]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 NotImplemented "Instruction CSEL not yet implemented."
	062 Compare X8, 0
	063 JumpIfEqual {203}
	064 Move W10, [X8+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, [X28]
	067 Move X9, W9
	068 Add X8, X8, X9
	069 Move X26, [X8+32]
	070 Move X25, [X8+40]
	071 Move W9, [X0+224]
	072 Compare W9, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X0, X23
	076 Move X1, X24
	077 Move X2, X26
	078 Move X3, X25
	079 Move X4, X31
	080 Call Decimal.op_Addition, X0, X1
	081 Move X23, X0
	082 Move X24, X1
	083 Move W20, 9
	084 Move X0, [X28]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Move X0, X23
	090 Move X1, X24
	091 Move X2, X31
	092 Call Decimal.op_Explicit, X0
	093 Move X25, X0
	094 NotImplemented "Instruction SCVTF not yet implemented."
	095 Move X0, X21
	096 Move W1, W22
	097 Move X2, X19
	098 Call TMP_Text.AddIntegerToInternalTextBackingArray, X0, V0, X1, X2
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move X0, [X28]
	101 Move W8, [X0+224]
	102 Compare W8, 0
	103 JumpIfNotEqual {105}
	104 Call 0x1C17DFC
	105 Move X0, X25
	106 Move X1, X31
	107 Call Decimal.op_Implicit, X0
	108 Move X2, X0
	109 Move X3, X1
	110 Move X0, X23
	111 Move X1, X24
	112 Move X4, X31
	113 Call Decimal.op_Subtraction, X0, X1
	114 Move X8, [X28]
	115 Move X4, X31
	116 Move X22, X0
	117 Move X23, X1
	118 Move X8, [X8+184]
	119 Move X2, [X8]
	120 Move X3, [X8+8]
	121 Call Decimal.op_Inequality, X0, X1
	122 Move TEMP, X0
	123 And TEMP, TEMP, 1
	124 Compare TEMP, 1
	125 JumpIfNotEqual {186}
	126 Move W1, [X19]
	127 Add X21, X21, 1712
	128 Move W2, 46
	129 Move X0, X21
	130 Add W8, W1, 1
	131 Move X3, X31
	132 Move [X19], W8
	133 Call TextBackingContainer.set_Item, X0, X1, X2
	134 Move W25, W31
	135 Add X0, X31, 8
	136 Move W1, 10
	137 Move X2, X31
	138 Move [X31+8], X31
	139 Move [X31+16], X31
	140 Call Decimal..ctor, X0, X1
	141 Move X0, [X28]
	142 Move W8, [X0+224]
	143 Compare W8, 0
	144 JumpIfNotEqual {146}
	145 Call 0x1C17DFC
	146 Move X2, [X31+8]
	147 Move X3, [X31+16]
	148 Move X0, X22
	149 Move X1, X23
	150 Move X4, X31
	151 Call Decimal.op_Multiply, X0, X1
	152 Move X2, X31
	153 Move X22, X0
	154 Move X23, X1
	155 Call Decimal.op_Explicit, X0
	156 Move W1, [X19]
	157 Move X24, X0
	158 Add W8, W24, 48
	159 And W2, W8, 0xFFFF
	160 Add W9, W1, 1
	161 Move X0, X21
	162 Move X3, X31
	163 Move [X19], W9
	164 Call TextBackingContainer.set_Item, X0, X1, X2
	165 Move X0, X24
	166 Move X1, X31
	167 Call Decimal.op_Implicit, X0
	168 Move X2, X0
	169 Move X3, X1
	170 Move X0, X22
	171 Move X1, X23
	172 Move X4, X31
	173 Call Decimal.op_Subtraction, X0, X1
	174 Move X8, [X28]
	175 Move X4, X31
	176 Move X22, X0
	177 Move X23, X1
	178 Move X8, [X8+184]
	179 Move X2, [X8]
	180 Move X3, [X8+8]
	181 Call Decimal.op_Equality, X0, X1
	182 And W31, W0, 1
	183 NotImplemented "Instruction CSEL not yet implemented."
	184 Add W25, W8, 1
	185 NotImplemented "Instruction CMP not yet implemented."
	186 Move X8, [X27+40]
	187 Move X9, [X31+24]
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Move X20, [X31+112]
	190 Move X19, [X31+120]
	191 Move X22, [X31+96]
	192 Move X21, [X31+104]
	193 Move X24, [X31+80]
	194 Move X23, [X31+88]
	195 Move X26, [X31+64]
	196 Move X25, [X31+72]
	197 Move X28, [X31+48]
	198 Move X27, [X31+56]
	199 Move X30, [X31+40]
	200 Move V8, [X31+32]
	201 Add X31, X31, 128
	202 Return 
	203 Call 0x1C17F20
	204 Call 0x1C17F28
	205 Call 0x3EB2B20

Method: System.Void AddIntegerToInternalTextBackingArray(System.Double number, System.Int32 padding, ref System.Int32 writeIndex)

Disassembly:
	0x03AFE788 CBZ X8, 0x3AFFD98
	0x03AFE78C LDR W9, [X8 + 0x18]
	0x03AFE790 CMP W25, W9
	0x03AFE794 B.CS 0x3AFFFE0
	0x03AFE798 MADD X8, X25, X29, X8
	0x03AFE79C ADD W9, W25, 0x1
	0x03AFE7A0 MOVZ W10, 0x200B
	0x03AFE7A4 STRB W31, [X8 + 0x194]
	0x03AFE7A8 STRH W10, [X8 + 0x20]
	0x03AFE7AC STR W31, [X8 + 0x64]
	0x03AFE7B0 STR W9, [X28 + 0x1E8]
	0x03AFE7B4 MOV V14.16B, V15.16B
	0x03AFE7B8 B 0x3AFFD88
	0x03AFE7BC LDR W8, [X19 + 0x644]
	0x03AFE7C0 CBZ W8, 0x3AFE95C
	0x03AFE7C4 FMOV S14, 1
	0x03AFE7C8 CBZ W8, 0x3AFEAAC
	0x03AFE7CC CMP W8, 0x1
	0x03AFE7D0 B.NE 0x3AFE9C4
	0x03AFE7D4 LDR X8, [X19 + 0x368]
	0x03AFE7D8 CBZ X8, 0x3AFFD98
	0x03AFE7DC LDR X8, [X8 + 0x38]
	0x03AFE7E0 CBZ X8, 0x3AFFD98
	0x03AFE7E4 LDRSW X9, [X28 + 0x1E8]
	0x03AFE7E8 LDR W10, [X8 + 0x18]
	0x03AFE7EC CMP W9, W10
	0x03AFE7F0 B.CS 0x3AFFFE0
	0x03AFE7F4 MADD X8, X9, X29, X8
	0x03AFE7F8 LDR X0, [X8 + 0x40]
	0x03AFE7FC STR X0, [X19 + 0x698]
	0x03AFE800 LDR W8, [X8 + 0x48]
	0x03AFE804 STR W8, [X19 + 0x6A4]
	0x03AFE808 CBZ X0, 0x3AFFD98
	0x03AFE80C MOV X1, X31
	0x03AFE810 BL 0x3B16BEC
	0x03AFE814 CBZ X0, 0x3AFFD98
	0x03AFE818 ADRP X8, 0x65A000
	0x03AFE81C LDR W1, [X19 + 0x6A4]
	0x03AFE820 LDR X8, [X8 + 0x330]
	0x03AFE824 LDR X2, [X8]
	0x03AFE828 BL 0x301BCCC
	0x03AFE82C CBZ X0, 0x3AFE7B4
	0x03AFE830 MOV X25, X0
	0x03AFE834 CMP W24, 0x3C
	0x03AFE838 B.NE 0x3AFE844
	0x03AFE83C LDR W8, [X19 + 0x6A4]
	0x03AFE840 ADD W24, W8, 0xE000
	0x03AFE844 LDR X8, [X19 + 0x698]
	0x03AFE848 CBZ X8, 0x3AFFD98
	0x03AFE84C ADD X1, X8, 0x48
	0x03AFE850 ADD X0, X31, 0xE0
	0x03AFE854 MOVZ W2, 0x60
	0x03AFE858 BL 0x3EB1B30
	0x03AFE85C ADD X0, X31, 0xE0
	0x03AFE860 MOV X1, X31
	0x03AFE864 BL 0x3C9BF88
	0x03AFE868 LDR V15, [X19 + 0x1E8]
	0x03AFE86C CMP W0, 0x1
	0x03AFE870 B.LT 0x3AFEC0C
	0x03AFE874 LDR X8, [X19 + 0x698]
	0x03AFE878 CBZ X8, 0x3AFFD98
	0x03AFE87C ADD X1, X8, 0x48
	0x03AFE880 ADD X0, X31, 0xE0
	0x03AFE884 MOVZ W2, 0x60
	0x03AFE888 BL 0x3EB1B30
	0x03AFE88C ADD X0, X31, 0xE0
	0x03AFE890 MOV X1, X31
	0x03AFE894 BL 0x3C9BF88
	0x03AFE898 LDR X8, [X19 + 0x698]
	0x03AFE89C CBZ X8, 0x3AFFD98
	0x03AFE8A0 MOV W26, W0
	0x03AFE8A4 ADD X1, X8, 0x48
	0x03AFE8A8 ADD X0, X31, 0xE0
	0x03AFE8AC MOVZ W2, 0x60
	0x03AFE8B0 BL 0x3EB1B30
	0x03AFE8B4 ADD X0, X31, 0xE0

ISIL:
	001 Move [X31-96], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X8, -50397184
	013 Move W24, [X2]
	014 Move V9, [X8+1360]
	015 Move X19, X2
	016 Move W21, W1
	017 Move V8, V0
	018 Move W23, W31
	019 Add X20, X0, 1712
	020 Move D10, 8.000000000465661
	021 Move X25, 0x40480000
	022 Move D1, 8.000000000465661
	023 Move V0, V8
	024 Add W22, W24, W23
	025 Call 0x3EB2C10
	026 Move D1, X25
	027 Add D0, D0, D1
	028 NotImplemented "Instruction FCVTZS not yet implemented."
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 NotImplemented "Instruction CSEL not yet implemented."
	031 And W2, W8, 0xFFFF
	032 Move X0, X20
	033 Move W1, W22
	034 Move X3, X31
	035 Call TextBackingContainer.set_Item, X0, X1, X2
	036 Add W23, W23, 1
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction FDIV not yet implemented."
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 Move W1, [X19]
	041 Add W24, W24, W23
	042 Add W8, W1, 1
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move W21, W24
	045 Move X0, X20
	046 Move X2, X31
	047 Subtract W21, W21, 1
	048 Call TextBackingContainer.get_Item, X0, X1
	049 Move W22, [X19]
	050 Move W23, W0
	051 Move X0, X20
	052 Move W1, W21
	053 Move X2, X31
	054 Call TextBackingContainer.get_Item, X0, X1
	055 Move W2, W0
	056 Move X0, X20
	057 Move W1, W22
	058 Move X3, X31
	059 Call TextBackingContainer.set_Item, X0, X1, X2
	060 Move X0, X20
	061 Move W1, W21
	062 Move W2, W23
	063 Move X3, X31
	064 Call TextBackingContainer.set_Item, X0, X1, X2
	065 Move W8, [X19]
	066 Add W1, W8, 1
	067 Add W8, W8, 2
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move [X19], W1
	070 Move [X19], W24
	071 Move X20, [X31+80]
	072 Move X19, [X31+88]
	073 Move X22, [X31+64]
	074 Move X21, [X31+72]
	075 Move X24, [X31+48]
	076 Move X23, [X31+56]
	077 Move X30, [X31+32]
	078 Move X25, [X31+40]
	079 Move D9, [X31+16]
	080 Move D8, [X31+24]
	081 Move V10, [X31+96]
	082 Return 

Method: System.String InternalTextBackingArrayToString()

Disassembly:
	0x03AF801C MOVZ W9, 0x1
	0x03AF8020 STR W1, [X0 + 0x258]
	0x03AF8024 STRB W9, [X0 + 0x370]
	0x03AF8028 LDR X9, [X8 + 0x2F8]
	0x03AF802C LDR X1, [X8 + 0x300]
	0x03AF8030 MOV X19, X0
	0x03AF8034 BLR X9
	0x03AF8038 LDR X8, [X19]
	0x03AF803C MOV X0, X19
	0x03AF8040 LDR X2, [X8 + 0x2E8]
	0x03AF8044 LDR X1, [X8 + 0x2F0]
	0x03AF8048 LDP X30, X19, [X31], #0x10
	0x03AF804C BR X2
	0x03AF8050 LDRB W0, [X0 + 0x26A]
	0x03AF8054 RET
	0x03AF8058 LDR W0, [X0 + 0x26C]
	0x03AF805C RET
	0x03AF8060 LDR W8, [X0 + 0x26C]
	0x03AF8064 CMP W8, W1
	0x03AF8068 B.NE 0x3AF8070
	0x03AF806C RET
	0x03AF8070 LDR X8, [X0]
	0x03AF8074 MOVZ W9, 0x1
	0x03AF8078 STR W1, [X0 + 0x26C]
	0x03AF807C STRB W9, [X0 + 0x370]
	0x03AF8080 LDR X2, [X8 + 0x2F8]
	0x03AF8084 LDR X1, [X8 + 0x300]
	0x03AF8088 BR X2
	0x03AF808C LDR W0, [X0 + 0x270]
	0x03AF8090 RET
	0x03AF8094 LDR W8, [X0 + 0x270]
	0x03AF8098 CMP W8, W1
	0x03AF809C B.NE 0x3AF80A4
	0x03AF80A0 RET
	0x03AF80A4 LDR X8, [X0]
	0x03AF80A8 MOVZ W9, 0x1
	0x03AF80AC STR W1, [X0 + 0x270]
	0x03AF80B0 STRB W9, [X0 + 0x370]
	0x03AF80B4 LDR X2, [X8 + 0x2F8]
	0x03AF80B8 LDR X1, [X8 + 0x300]
	0x03AF80BC BR X2
	0x03AF80C0 LDR W8, [X0 + 0x26C]
	0x03AF80C4 LDR W9, [X0 + 0x270]
	0x03AF80C8 ORR W0, W9, W8, 0x0
	0x03AF80CC RET
	0x03AF80D0 LDR W8, [X0 + 0x26C]
	0x03AF80D4 CMP W8, W1, UXTB
	0x03AF80D8 AND W8, W1, 0xFF00
	0x03AF80DC B.NE 0x3AF80F0
	0x03AF80E0 LDR W9, [X0 + 0x270]
	0x03AF80E4 CMP W9, W8
	0x03AF80E8 B.NE 0x3AF80F0
	0x03AF80EC RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x8EB000
	008 Move X20, 0x605000
	009 Move W8, [X21+1616]
	010 Move X20, [X20+2264]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x605000
	017 Move X0, [X0+2264]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1616], W8
	021 Move W1, [X19+1720]
	022 Move X0, [X20]
	023 Add X20, X19, 1712
	024 Call 0x1C17D6C
	025 Move X21, X0
	026 Move X0, X20
	027 Move X1, X31
	028 Call TextBackingContainer.get_Capacity, X0
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X22, X31
	031 Add X23, X21, 32
	032 Move X0, X20
	033 Move W1, W22
	034 Move X2, X31
	035 Call TextBackingContainer.get_Item, X0, X1
	036 And W31, W0, 0xFFFF
	037 Compare X21, 0
	038 JumpIfEqual {60}
	039 Move W8, [X21+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction STRH not yet implemented."
	042 Move X0, X20
	043 Move X1, X31
	044 Add X22, X22, 1
	045 Call TextBackingContainer.get_Capacity, X0
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move [X19+224], W31
	048 Move X1, X21
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X0, X31
	054 Move X2, X31
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 Call String.CreateString, X0, X1
	058 Return X0
	059 Call 0x1C17F28
	060 Call 0x1C17F20

Method: System.Int32 SetArraySizes(TMPro.TMP_Text/UnicodeChar[] unicodeChars)

Disassembly:
	0x03AFE8B8 MOV X1, X31
	0x03AFE8BC BL 0x3C9BF98

ISIL:
	001 Move W0, W31
	002 Return X0

Method: UnityEngine.Vector2 GetPreferredValues()

Disassembly:
	0x03AFE8C0 LDR X0, [X25 + 0x20]
	0x03AFE8C4 CBZ X0, 0x3AFFD98
	0x03AFE8C8 LDRB W8, [X19 + 0x305]
	0x03AFE8CC MOV V9.16B, V0.16B
	0x03AFE8D0 LDR V0, [X31 + 0x20]
	0x03AFE8D4 LDR V11, [X25 + 0x2C]
	0x03AFE8D8 CMP W8, 0x0
	0x03AFE8DC FMOV S1, 1
	0x03AFE8E0 MOV X1, X31
	0x03AFE8E4 FCSEL S13, S0, S1, EQ
	0x03AFE8E8 BL 0x3C9C4E0
	0x03AFE8EC LDR X8, [X19 + 0x698]
	0x03AFE8F0 CBZ X8, 0x3AFFD98
	0x03AFE8F4 ADD X1, X8, 0x48
	0x03AFE8F8 ADD X0, X31, 0xE0
	0x03AFE8FC MOVZ W2, 0x60
	0x03AFE900 MOV V10.16B, V0.16B
	0x03AFE904 BL 0x3EB1B30
	0x03AFE908 ADD X0, X31, 0xE0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W20, 1
	006 Move X19, X0
	007 Move [X0+1000], W20
	008 Call TMP_Text.GetPreferredWidth, X0
	009 Move X0, X19
	010 Move V8, V0
	011 Move [X19+1012], W20
	012 Call TMP_Text.GetPreferredHeight, X0
	013 Move [X19+1000], W20
	014 Move [X19+1012], W20
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+8]
	018 Move V1, V0
	019 Move V0, V8
	020 Move V8, [X31+32]
	021 Return X0

Method: UnityEngine.Vector2 GetPreferredValues(System.Single width, System.Single height)

Disassembly:
	0x03AFE90C MOV X1, X31
	0x03AFE910 BL 0x3C9BFB8
	0x03AFE914 LDR X8, [X19 + 0x698]
	0x03AFE918 CBZ X8, 0x3AFFD98
	0x03AFE91C MOV V8.16B, V0.16B
	0x03AFE920 SCVTF S0, W26
	0x03AFE924 FDIV S0, S15, S0
	0x03AFE928 FMUL S0, S0, S9
	0x03AFE92C FMUL S1, S11, S10
	0x03AFE930 FMUL S0, S0, S13
	0x03AFE934 ADD X1, X8, 0x48
	0x03AFE938 ADD X0, X31, 0xE0
	0x03AFE93C MOVZ W2, 0x60
	0x03AFE940 FMUL S15, S0, S1
	0x03AFE944 BL 0x3EB1B30
	0x03AFE948 ADD X0, X31, 0xE0
	0x03AFE94C MOV X1, X31
	0x03AFE950 BL 0x3C9BFF8
	0x03AFE954 MOV V9.16B, V0.16B
	0x03AFE958 B 0x3AFED60
	0x03AFE95C LDR W8, [X19 + 0x25C]
	0x03AFE960 TBNZ X8, 0x4, 0x3AFE9FC
	0x03AFE964 TBNZ X8, 0x3, 0x3AFEA50
	0x03AFE968 FMOV S14, 1
	0x03AFE96C TBZ X8, 0x5, 0x3AFEAA4
	0x03AFE970 ADRP X8, 0x5F7000
	0x03AFE974 LDR X8, [X8 + 0x170]
	0x03AFE978 LDR X0, [X8]
	0x03AFE97C LDR W8, [X0 + 0xE0]
	0x03AFE980 CBNZ W8, 0x3AFE988
	0x03AFE984 BL 0x1C16DFC
	0x03AFE988 MOV W0, W24
	0x03AFE98C MOV X1, X31
	0x03AFE990 BL 0x331AA58
	0x03AFE994 TBZ X0, 0x0, 0x3AFEAA4
	0x03AFE998 ADRP X8, 0x5F7000
	0x03AFE99C LDR X8, [X8 + 0x170]
	0x03AFE9A0 LDR X0, [X8]
	0x03AFE9A4 LDR W8, [X0 + 0xE0]
	0x03AFE9A8 CBNZ W8, 0x3AFE9B0
	0x03AFE9AC BL 0x1C16DFC
	0x03AFE9B0 MOV W0, W24
	0x03AFE9B4 MOV X1, X31

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move W8, 1
	007 Move V8, V1
	008 Move V9, V0
	009 Move X19, X0
	010 Move [X0+1013], W8
	011 Call TMP_Text.ParseInputText, X0
	012 Move W8, [X19+568]
	013 Move W9, 596
	014 Add X1, X31, 12
	015 Move X0, X19
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W8, 484
	018 NotImplemented "Instruction CSEL not yet implemented."
	019 Move V0, [X19]
	020 Add X8, X19, 572
	021 Move V1, V8
	022 Move W2, W31
	023 Move [X31+12], S0
	024 Move V0, [X19+592]
	025 Move W3, W31
	026 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	027 Move [X8], D0
	028 Move X8, [X19]
	029 Move [X19+724], W31
	030 Move [X19+580], W31
	031 Move V0, V9
	032 Move X9, [X8+2152]
	033 Move X4, [X8+2160]
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move V10, V0
	036 Move X0, X19
	037 Move V0, V9
	038 Move V1, V8
	039 Call TMP_Text.GetPreferredHeight, X0, X1
	040 Move X30, [X31+32]
	041 Move X19, [X31+40]
	042 Move D9, [X31+16]
	043 Move D8, [X31+24]
	044 Move V1, V0
	045 Move V0, V10
	046 Move V10, [X31+48]
	047 Return X0

Method: UnityEngine.Vector2 GetPreferredValues(System.String text)

Disassembly:
	0x03AFEAC0 LDR W10, [X8 + 0x18]
	0x03AFEAC4 CMP W9, W10
	0x03AFEAC8 B.CS 0x3AFFFE0
	0x03AFEACC MADD X11, X9, X29, X8
	0x03AFEAD0 LDR X11, [X11 + 0x30]
	0x03AFEAD4 STR X11, [X19 + 0x648]
	0x03AFEAD8 CBZ X11, 0x3AFE7B4
	0x03AFEADC MADD X11, X9, X29, X8
	0x03AFEAE0 LDR W11, [X11 + 0x58]
	0x03AFEAE4 STR W11, [X19 + 0x120]
	0x03AFEAE8 CBZ W26, 0x3AFEB20
	0x03AFEAEC LDR X11, [X19 + 0x478]
	0x03AFEAF0 CBZ X11, 0x3AFFD98
	0x03AFEAF4 LDR W12, [X11 + 0x18]
	0x03AFEAF8 CMP W23, W12
	0x03AFEAFC B.CS 0x3AFFFE0
	0x03AFEB00 MOVZ W12, 0xC
	0x03AFEB04 SMADDL X11, X23, X12, X11
	0x03AFEB08 LDR W11, [X11 + 0x20]
	0x03AFEB0C CMP W11, 0xA
	0x03AFEB10 B.NE 0x3AFEB20
	0x03AFEB14 LDR W11, [X19 + 0x498]
	0x03AFEB18 CMP W9, W11
	0x03AFEB1C B.NE 0x3AFFC8C
	0x03AFEB20 LDR X8, [X19 + 0x100]
	0x03AFEB24 CBZ X8, 0x3AFFD98
	0x03AFEB28 LDR V11, [X19 + 0x1E8]
	0x03AFEB2C ADD X0, X8, 0x50
	0x03AFEB30 MOV X1, X31
	0x03AFEB34 BL 0x3C9BF88
	0x03AFEB38 LDR X8, [X19 + 0x100]
	0x03AFEB3C CBZ X8, 0x3AFFD98
	0x03AFEB40 MOV W25, W0
	0x03AFEB44 ADD X0, X8, 0x50
	0x03AFEB48 MOV X1, X31
	0x03AFEB4C BL 0x3C9BF98
	0x03AFEB50 LDRB W8, [X19 + 0x305]
	0x03AFEB54 MOV V10.16B, V0.16B
	0x03AFEB58 LDR V0, [X31 + 0x20]
	0x03AFEB5C FMOV S1, 1
	0x03AFEB60 CMP W8, 0x0
	0x03AFEB64 MOVZ W8, 0x2026
	0x03AFEB68 FCSEL S12, S0, S1, EQ
	0x03AFEB6C CMP W24, W8
	0x03AFEB70 CSET W8, EQ
	0x03AFEB74 AND W8, W26, W8, 0x0
	0x03AFEB78 FMOV S9, W31
	0x03AFEB7C FMOV S8, W31
	0x03AFEB80 TBNZ X8, 0x0, 0x3AFEBB4
	0x03AFEB84 LDR X8, [X19 + 0x100]
	0x03AFEB88 CBZ X8, 0x3AFFD98
	0x03AFEB8C ADD X0, X8, 0x50
	0x03AFEB90 MOV X1, X31
	0x03AFEB94 BL 0x3C9BFB8
	0x03AFEB98 LDR X8, [X19 + 0x100]
	0x03AFEB9C CBZ X8, 0x3AFFD98
	0x03AFEBA0 ADD X0, X8, 0x50
	0x03AFEBA4 MOV X1, X31
	0x03AFEBA8 MOV V8.16B, V0.16B
	0x03AFEBAC BL 0x3C9BFF8
	0x03AFEBB0 MOV V9.16B, V0.16B
	0x03AFEBB4 LDR X10, [X19 + 0x648]
	0x03AFEBB8 CBZ X10, 0x3AFFD98
	0x03AFEBBC LDR X8, [X19 + 0x488]
	0x03AFEBC0 CBZ X8, 0x3AFFD98
	0x03AFEBC4 LDR W9, [X19 + 0x494]
	0x03AFEBC8 LDR W11, [X8 + 0x18]
	0x03AFEBCC CMP W9, W11
	0x03AFEBD0 B.CS 0x3AFFFE0
	0x03AFEBD4 FMUL S0, S14, S11
	0x03AFEBD8 SCVTF S1, W25
	0x03AFEBDC LDR V2, [X19 + 0x404]
	0x03AFEBE0 LDR V3, [X10 + 0x2C]
	0x03AFEBE4 FDIV S0, S0, S1

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D10
	003 Move [X31+24], D9
	004 Move [X31+32], D8
	005 Move [X31+40], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x8E5000
	011 Move X21, 0x65B000
	012 Move W8, [X22+1617]
	013 Move X21, [X21+1000]
	014 Move X20, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x65B000
	021 Move X0, [X0+1000]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+1617], W8
	025 Move W8, 1
	026 Move X0, X19
	027 Move X1, X20
	028 Move [X19+1013], W8
	029 Call TMP_Text.SetTextInternal, X0, X1
	030 Move X8, [X19]
	031 Move X1, [X19+1144]
	032 Move X0, X19
	033 Move X9, [X8+2136]
	034 Move X2, [X8+2144]
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X0, [X21]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {42}
	040 Call 0x1C17DFC
	041 Move X0, [X21]
	042 Move W8, [X19+568]
	043 Move W10, 596
	044 Move X9, [X0+184]
	045 Add X1, X31, 12
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move W8, 484
	048 NotImplemented "Instruction CSEL not yet implemented."
	049 Move V0, [X19]
	050 Move V8, [X9+5528]
	051 Move V9, [X9+5532]
	052 Add X8, X19, 572
	053 Move [X31+12], S0
	054 Move V0, [X19+592]
	055 Move X0, X19
	056 Move V1, V9
	057 Move W2, W31
	058 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	059 Move [X8], D0
	060 Move X8, [X19]
	061 Move [X19+724], W31
	062 Move [X19+580], W31
	063 Move V0, V8
	064 Move X9, [X8+2152]
	065 Move X4, [X8+2160]
	066 Move W3, W31
	067 NotImplemented "Instruction BLR not yet implemented."
	068 Move V10, V0
	069 Move X0, X19
	070 Move V0, V8
	071 Move V1, V9
	072 Call TMP_Text.GetPreferredHeight, X0, X1
	073 Move V1, V0
	074 Move V0, V10
	075 Move X20, [X31+64]
	076 Move X19, [X31+72]
	077 Move X22, [X31+48]
	078 Move X21, [X31+56]
	079 Move X30, [X31+40]
	080 Move D9, [X31+24]
	081 Move D8, [X31+32]
	082 Move V10, [X31+16]
	083 Add X31, X31, 80
	084 Return X0

Method: UnityEngine.Vector2 GetPreferredValues(System.String text, System.Single width, System.Single height)

Disassembly:
	0x03AFEBE8 FMUL S0, S0, S10
	0x03AFEBEC FMUL S0, S0, S12
	0x03AFEBF0 SXTW X10, W9
	0x03AFEBF4 FMUL S0, S0, S2
	0x03AFEBF8 MADD X10, X10, X29, X8
	0x03AFEBFC FMUL S15, S0, S3
	0x03AFEC00 STR S14, [X31 + 0x50]
	0x03AFEC04 STR W31, [X10 + 0x2C]
	0x03AFEC08 B 0x3AFED9C
	0x03AFEC0C LDR X8, [X19 + 0x100]
	0x03AFEC10 CBZ X8, 0x3AFFD98
	0x03AFEC14 ADD X1, X8, 0x50
	0x03AFEC18 ADD X0, X31, 0xE0
	0x03AFEC1C MOVZ W2, 0x60
	0x03AFEC20 BL 0x3EB1B30
	0x03AFEC24 ADD X0, X31, 0xE0
	0x03AFEC28 MOV X1, X31
	0x03AFEC2C BL 0x3C9BF88
	0x03AFEC30 LDR X8, [X19 + 0x100]
	0x03AFEC34 CBZ X8, 0x3AFFD98
	0x03AFEC38 MOV W26, W0
	0x03AFEC3C ADD X1, X8, 0x50
	0x03AFEC40 ADD X0, X31, 0xE0
	0x03AFEC44 MOVZ W2, 0x60
	0x03AFEC48 BL 0x3EB1B30
	0x03AFEC4C ADD X0, X31, 0xE0
	0x03AFEC50 MOV X1, X31
	0x03AFEC54 BL 0x3C9BF98
	0x03AFEC58 LDRB W9, [X19 + 0x305]
	0x03AFEC5C MOV V8.16B, V0.16B
	0x03AFEC60 LDR V0, [X31 + 0x20]
	0x03AFEC64 LDR X8, [X19 + 0x100]
	0x03AFEC68 CMP W9, 0x0
	0x03AFEC6C FMOV S1, 1
	0x03AFEC70 FCSEL S13, S0, S1, EQ
	0x03AFEC74 CBZ X8, 0x3AFFD98
	0x03AFEC78 ADD X1, X8, 0x50
	0x03AFEC7C ADD X0, X31, 0xE0
	0x03AFEC80 MOVZ W2, 0x60
	0x03AFEC84 BL 0x3EB1B30
	0x03AFEC88 ADD X0, X31, 0xE0
	0x03AFEC8C MOV X1, X31
	0x03AFEC90 BL 0x3C9BFB8
	0x03AFEC94 LDR X0, [X25 + 0x20]
	0x03AFEC98 CBZ X0, 0x3AFFD98
	0x03AFEC9C ADD X8, X31, 0xBC0
	0x03AFECA0 MOV X1, X31
	0x03AFECA4 MOV V9.16B, V0.16B
	0x03AFECA8 MOV V12.16B, V14.16B

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move W8, 1
	007 Move V8, V1
	008 Move V9, V0
	009 Move X19, X0
	010 Move [X0+1013], W8
	011 Call TMP_Text.SetTextInternal, X0, X1
	012 Move X8, [X19]
	013 Move X1, [X19+1144]
	014 Move X0, X19
	015 Move X9, [X8+2136]
	016 Move X2, [X8+2144]
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move W8, [X19+568]
	019 Move W9, 596
	020 Add X1, X31, 12
	021 Move X0, X19
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move W8, 484
	024 NotImplemented "Instruction CSEL not yet implemented."
	025 Move V0, [X19]
	026 Add X8, X19, 572
	027 Move V1, V8
	028 Move W2, W31
	029 Move [X31+12], S0
	030 Move V0, [X19+592]
	031 Move W3, W31
	032 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	033 Move [X8], D0
	034 Move X8, [X19]
	035 Move [X19+724], W31
	036 Move [X19+580], W31
	037 Move V0, V9
	038 Move X9, [X8+2152]
	039 Move X4, [X8+2160]
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move V10, V0
	042 Move X0, X19
	043 Move V0, V9
	044 Move V1, V8
	045 Call TMP_Text.GetPreferredHeight, X0, X1
	046 Move X30, [X31+32]
	047 Move X19, [X31+40]
	048 Move D9, [X31+16]
	049 Move D8, [X31+24]
	050 Move V1, V0
	051 Move V0, V10
	052 Move V10, [X31+48]
	053 Return X0

Method: System.Single GetPreferredWidth()

Disassembly:
	0x03AFA8CC B 0x3AFA9F0
	0x03AFA8D0 LDRB W8, [X19 + 0x303]
	0x03AFA8D4 CBZ W8, 0x3AFAB74
	0x03AFA8D8 LDR X8, [X20]
	0x03AFA8DC CBZ X8, 0x3AFACB4
	0x03AFA8E0 LDRSW X24, [X31 + 0xC]
	0x03AFA8E4 LDR W9, [X8 + 0x18]
	0x03AFA8E8 CMP W24, W9
	0x03AFA8EC B.NE 0x3AFA908
	0x03AFA8F0 LDR X2, [X29]
	0x03AFA8F4 MOV X0, X19
	0x03AFA8F8 MOV X1, X20
	0x03AFA8FC BL 0x2298F68
	0x03AFA900 LDR X8, [X19 + 0x478]
	0x03AFA904 CBZ X8, 0x3AFACB4
	0x03AFA908 LDR W9, [X8 + 0x18]
	0x03AFA90C CMP W24, W9
	0x03AFA910 B.CS 0x3AFACB0
	0x03AFA914 MADD X10, X24, X28, X8
	0x03AFA918 MOVZ W11, 0xB
	0x03AFA91C STR W11, [X10 + 0x20]
	0x03AFA920 LDRSW X10, [X31 + 0xC]
	0x03AFA924 CMP W10, W9
	0x03AFA928 B.CS 0x3AFACB0
	0x03AFA92C MADD X10, X10, X28, X8
	0x03AFA930 STR W23, [X10 + 0x24]
	0x03AFA934 LDRSW X10, [X31 + 0xC]
	0x03AFA938 CMP W10, W9
	0x03AFA93C B.CS 0x3AFACB0
	0x03AFA940 MADD X8, X10, X28, X8
	0x03AFA944 MOVZ W9, 0x1
	0x03AFA948 STR W9, [X8 + 0x28]
	0x03AFA94C LDR W8, [X31 + 0xC]
	0x03AFA950 MOV W24, W25
	0x03AFA954 B 0x3AFABEC
	0x03AFA958 ADD W24, W23, 0x9
	0x03AFA95C CMP W21, W24
	0x03AFA960 B.LE 0x3AFAB74
	0x03AFA964 LDR X26, [X20]
	0x03AFA968 CBZ X26, 0x3AFACB4
	0x03AFA96C LDRSW X25, [X31 + 0xC]
	0x03AFA970 LDR W8, [X26 + 0x18]
	0x03AFA974 CMP W25, W8
	0x03AFA978 B.NE 0x3AFA994
	0x03AFA97C LDR X2, [X29]
	0x03AFA980 MOV X0, X19
	0x03AFA984 MOV X1, X20
	0x03AFA988 BL 0x2298F68
	0x03AFA98C LDR X26, [X19 + 0x478]
	0x03AFA990 CBZ X26, 0x3AFACB4
	0x03AFA994 LDR X1, [X19 + 0x6B0]
	0x03AFA998 LDR X2, [X19 + 0x6B8]
	0x03AFA99C ADD W3, W23, 0x2
	0x03AFA9A0 MOV X0, X19
	0x03AFA9A4 BL 0x3AFB45C
	0x03AFA9A8 LDR W8, [X26 + 0x18]
	0x03AFA9AC CMP W25, W8
	0x03AFA9B0 B.CS 0x3AFACB0
	0x03AFA9B4 MADD X8, X25, X28, X26
	0x03AFA9B8 STR W0, [X8 + 0x20]
	0x03AFA9BC LDR X8, [X20]
	0x03AFA9C0 CBZ X8, 0x3AFACB4
	0x03AFA9C4 LDRSW X10, [X31 + 0xC]
	0x03AFA9C8 LDR W9, [X8 + 0x18]
	0x03AFA9CC CMP W10, W9
	0x03AFA9D0 B.CS 0x3AFACB0
	0x03AFA9D4 MADD X10, X10, X28, X8
	0x03AFA9D8 STR W23, [X10 + 0x24]
	0x03AFA9DC LDRSW X10, [X31 + 0xC]
	0x03AFA9E0 CMP W10, W9
	0x03AFA9E4 B.CS 0x3AFACB0
	0x03AFA9E8 MADD X8, X10, X28, X8
	0x03AFA9EC MOVZ W9, 0xA
	0x03AFA9F0 STR W9, [X8 + 0x28]
	0x03AFA9F4 LDR W8, [X31 + 0xC]
	0x03AFA9F8 B 0x3AFABEC
	0x03AFA9FC LDR X8, [X20]
	0x03AFAA00 CBZ X8, 0x3AFACB4
	0x03AFAA04 LDRSW X24, [X31 + 0xC]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x8E9000
	009 Move X20, 0x5FA000
	010 Move W8, [X21+1618]
	011 Move X20, [X20+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x5FA000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x65F000
	021 Move X0, [X0+1000]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1618], W8
	025 Move X0, X31
	026 Call TMP_Settings.get_instance
	027 Move X8, [X20]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Equality, X0, X1
	038 Move S0, W31
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {86}
	043 Move W8, [X19+1000]
	044 Compare W8, 0
	045 JumpIfEqual {85}
	046 Move W8, [X19+568]
	047 Move W9, 596
	048 Move W10, 484
	049 Move X20, 0x65F000
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CSEL not yet implemented."
	052 Move V0, [X19]
	053 Add X8, X19, 572
	054 Move [X31+12], S0
	055 Move V0, [X19+592]
	056 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	057 Move [X8], D0
	058 Move [X19+724], W31
	059 Move X20, [X20+1000]
	060 Move X0, [X20]
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {66}
	064 Call 0x1C17DFC
	065 Move X0, [X20]
	066 Move X8, [X0+184]
	067 Move X0, X19
	068 Move V8, [X8+5528]
	069 Move V9, [X8+5532]
	070 Move W8, 1
	071 Move [X19+1013], W8
	072 Call TMP_Text.ParseInputText, X0
	073 Move X8, [X19]
	074 Move [X19+580], W31
	075 Add X1, X31, 12
	076 Move X0, X19
	077 Move X9, [X8+2152]
	078 Move X4, [X8+2160]
	079 Move V0, V8
	080 Move V1, V9
	081 Move W2, W31
	082 Move W3, W31
	083 NotImplemented "Instruction BLR not yet implemented."
	084 Move [X19+1000], W31
	085 Move V0, [X19+992]
	086 Move X20, [X31+48]
	087 Move X19, [X31+56]
	088 Move X30, [X31+32]
	089 Move X21, [X31+40]
	090 Move D9, [X31+16]
	091 Move D8, [X31+24]
	092 Add X31, X31, 64
	093 Return V0

Method: System.Single GetPreferredWidth(UnityEngine.Vector2 margin)

Disassembly:
	0x03AFE9B8 BL 0x331ACB8
	0x03AFE9BC LDR V14, [X31 + 0x8]
	0x03AFE9C0 B 0x3AFEAA0
	0x03AFE9C4 CMP W24, 0xAD
	0x03AFE9C8 CSET W25, EQ
	0x03AFE9CC CMP W24, 0x3
	0x03AFE9D0 LDR X8, [X19 + 0x488]
	0x03AFE9D4 CSET W9, EQ
	0x03AFE9D8 ORR W9, W25, W9, 0x0
	0x03AFE9DC CMP W9, 0x0
	0x03AFE9E0 FMOV S8, W31
	0x03AFE9E4 STR S14, [X31 + 0x50]
	0x03AFE9E8 FCSEL S14, S8, S15, NE
	0x03AFE9EC CBZ X8, 0x3AFFD98
	0x03AFE9F0 LDR W9, [X19 + 0x494]
	0x03AFE9F4 FMOV S9, W31
	0x03AFE9F8 B 0x3AFEDB8
	0x03AFE9FC ADRP X8, 0x5F7000
	0x03AFEA00 LDR X8, [X8 + 0x170]
	0x03AFEA04 LDR X0, [X8]
	0x03AFEA08 LDR W8, [X0 + 0xE0]
	0x03AFEA0C CBNZ W8, 0x3AFEA14
	0x03AFEA10 BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+568]
	003 Move W9, 596
	004 Add X1, X31, 12
	005 Move W2, W31
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move W8, 484
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 Move V2, [X0]
	010 Add X8, X0, 572
	011 Move W3, W31
	012 Move [X31+12], S2
	013 Move V2, [X0+592]
	014 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	015 Move [X8], D2
	016 Move X8, [X0]
	017 Move [X0+724], W31
	018 Move [X0+580], W31
	019 Move X9, [X8+2152]
	020 Move X4, [X8+2160]
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move X30, [X31+16]
	023 Return V0

Method: System.Single GetPreferredHeight()

Disassembly:
	0x03AFAA20 BL 0x2298F68
	0x03AFAA24 LDR X8, [X19 + 0x478]
	0x03AFAA28 CBZ X8, 0x3AFACB4
	0x03AFAA2C LDR W9, [X8 + 0x18]
	0x03AFAA30 CMP W24, W9
	0x03AFAA34 B.CS 0x3AFACB0
	0x03AFAA38 MADD X10, X24, X28, X8
	0x03AFAA3C MOVZ W11, 0xA
	0x03AFAA40 STR W11, [X10 + 0x20]
	0x03AFAA44 LDRSW X10, [X31 + 0xC]
	0x03AFAA48 CMP W10, W9
	0x03AFAA4C B.CS 0x3AFACB0
	0x03AFAA50 MADD X10, X10, X28, X8
	0x03AFAA54 STR W23, [X10 + 0x24]
	0x03AFAA58 LDRSW X10, [X31 + 0xC]
	0x03AFAA5C CMP W10, W9
	0x03AFAA60 B.CS 0x3AFACB0
	0x03AFAA64 MADD X8, X10, X28, X8
	0x03AFAA68 MOVZ W9, 0x4
	0x03AFAA6C STR W9, [X8 + 0x28]
	0x03AFAA70 LDR W8, [X31 + 0xC]
	0x03AFAA74 ADD W24, W23, 0x3
	0x03AFAA78 B 0x3AFABEC
	0x03AFAA7C LDR X8, [X20]
	0x03AFAA80 CBZ X8, 0x3AFACB4
	0x03AFAA84 LDRSW X24, [X31 + 0xC]
	0x03AFAA88 LDR W9, [X8 + 0x18]
	0x03AFAA8C CMP W24, W9
	0x03AFAA90 B.NE 0x3AFAAAC
	0x03AFAA94 LDR X2, [X29]
	0x03AFAA98 MOV X0, X19
	0x03AFAA9C MOV X1, X20
	0x03AFAAA0 BL 0x2298F68
	0x03AFAAA4 LDR X8, [X19 + 0x478]
	0x03AFAAA8 CBZ X8, 0x3AFACB4
	0x03AFAAAC LDR W9, [X8 + 0x18]
	0x03AFAAB0 CMP W24, W9
	0x03AFAAB4 B.CS 0x3AFACB0
	0x03AFAAB8 MADD X10, X24, X28, X8
	0x03AFAABC MOVZ W11, 0x200B
	0x03AFAAC0 STR W11, [X10 + 0x20]
	0x03AFAAC4 LDRSW X10, [X31 + 0xC]
	0x03AFAAC8 CMP W10, W9
	0x03AFAACC B.CS 0x3AFACB0
	0x03AFAAD0 MADD X10, X10, X28, X8
	0x03AFAAD4 STR W23, [X10 + 0x24]
	0x03AFAAD8 LDRSW X10, [X31 + 0xC]
	0x03AFAADC CMP W10, W9
	0x03AFAAE0 B.CS 0x3AFACB0
	0x03AFAAE4 MADD X8, X10, X28, X8
	0x03AFAAE8 MOVZ W9, 0x6
	0x03AFAAEC STR W9, [X8 + 0x28]
	0x03AFAAF0 LDR W8, [X31 + 0xC]
	0x03AFAAF4 ADD W24, W23, 0x5
	0x03AFAAF8 B 0x3AFABEC
	0x03AFAAFC LDRSW X25, [X31 + 0xC]
	0x03AFAB00 ADD X3, X31, 0x8
	0x03AFAB04 ADD X5, X31, 0xC
	0x03AFAB08 MOV X0, X19
	0x03AFAB0C MOV X1, X22
	0x03AFAB10 MOV W2, W23
	0x03AFAB14 MOV X4, X20
	0x03AFAB18 BL 0x3AFB6A0
	0x03AFAB1C TBZ X0, 0x0, 0x3AFAB74
	0x03AFAB20 LDR W8, [X31 + 0xC]
	0x03AFAB24 CMP W25, W8
	0x03AFAB28 B.GE 0x3AFAC04
	0x03AFAB2C LDR X9, [X20]
	0x03AFAB30 CBZ X9, 0x3AFACB4
	0x03AFAB34 LDR W24, [X31 + 0x8]
	0x03AFAB38 LDR W8, [X9 + 0x18]
	0x03AFAB3C NOP
	0x03AFAB40 MADD X10, X25, X28, X9
	0x03AFAB44 ADD X10, X10, 0x28
	0x03AFAB48 SUB W9, W24, W23
	0x03AFAB4C ADD W9, W9, 0x1
	0x03AFAB50 CMP W25, W8
	0x03AFAB54 B.CS 0x3AFACB0
	0x03AFAB58 STP W23, W9, [X10 - 0x4]
	0x03AFAB5C LDRSW X11, [X31 + 0xC]
	0x03AFAB60 ADD X25, X25, 0x1
	0x03AFAB64 ADD X10, X10, 0xC
	0x03AFAB68 CMP X25, X11
	0x03AFAB6C B.LT 0x3AFAB50
	0x03AFAB70 B 0x3AFABF4
	0x03AFAB74 LDR X8, [X20]
	0x03AFAB78 CBZ X8, 0x3AFACB4
	0x03AFAB7C LDRSW X24, [X31 + 0xC]
	0x03AFAB80 LDR W9, [X8 + 0x18]
	0x03AFAB84 CMP W24, W9
	0x03AFAB88 B.NE 0x3AFABA4
	0x03AFAB8C LDR X2, [X29]
	0x03AFAB90 MOV X0, X19
	0x03AFAB94 MOV X1, X20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x8E9000
	009 Move X20, 0x5FA000
	010 Move W8, [X21+1619]
	011 Move X20, [X20+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x5FA000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x65F000
	021 Move X0, [X0+1000]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1619], W8
	025 Move X0, X31
	026 Call TMP_Settings.get_instance
	027 Move X8, [X20]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Equality, X0, X1
	038 Move S1, W31
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {101}
	043 Move W8, [X19+1012]
	044 Compare W8, 0
	045 JumpIfEqual {100}
	046 Move W8, [X19+568]
	047 Move W9, 596
	048 Move X20, 0x65F000
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move W8, 484
	051 NotImplemented "Instruction CSEL not yet implemented."
	052 Move V0, [X19]
	053 Add X8, X19, 572
	054 Move [X31+12], S0
	055 Move V0, [X19+592]
	056 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	057 Move [X8], D0
	058 Move [X19+724], W31
	059 Move V8, [X19+856]
	060 Move X20, [X20+1000]
	061 NotImplemented "Instruction FCMP not yet implemented."
	062 Move X0, [X20]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {68}
	066 Call 0x1C17DFC
	067 Move X0, [X20]
	068 Move X8, [X0+184]
	069 Move V8, [X8+5544]
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {75}
	073 Call 0x1C17DFC
	074 Move X0, [X20]
	075 Move X8, [X0+184]
	076 Move X0, X19
	077 Move V9, [X8+5544]
	078 Move W8, 1
	079 Move [X19+1013], W8
	080 Call TMP_Text.ParseInputText, X0
	081 Move [X19+588], W31
	082 Move [X19+580], W31
	083 Move X8, [X19]
	084 Move W2, [X19+568]
	085 Move W3, [X19+728]
	086 Add X1, X31, 12
	087 Move X9, [X8+2152]
	088 Move X4, [X8+2160]
	089 Move X0, X19
	090 Move V0, V8
	091 Move V1, V9
	092 NotImplemented "Instruction BLR not yet implemented."
	093 Move W8, [X19+580]
	094 Move W9, [X19+588]
	095 Add W8, W8, 1
	096 Move [X19+580], W8
	097 Compare W9, 0
	098 JumpIfEqual {83}
	099 Move [X19+1012], W31
	100 Move V1, [X19+1004]
	101 Move X20, [X31+48]
	102 Move X19, [X31+56]
	103 Move X30, [X31+32]
	104 Move X21, [X31+40]
	105 Move D9, [X31+16]
	106 Move D8, [X31+24]
	107 Move V0, V1
	108 Add X31, X31, 64
	109 Return V0

Method: System.Single GetPreferredHeight(UnityEngine.Vector2 margin)

Disassembly:
	0x03AFEA14 MOV W0, W24
	0x03AFEA18 MOV X1, X31
	0x03AFEA1C BL 0x331AA58
	0x03AFEA20 FMOV S14, 1
	0x03AFEA24 TBZ X0, 0x0, 0x3AFEAA4
	0x03AFEA28 ADRP X8, 0x5F7000
	0x03AFEA2C LDR X8, [X8 + 0x170]
	0x03AFEA30 LDR X0, [X8]
	0x03AFEA34 LDR W8, [X0 + 0xE0]
	0x03AFEA38 CBNZ W8, 0x3AFEA40
	0x03AFEA3C BL 0x1C16DFC
	0x03AFEA40 MOV W0, W24
	0x03AFEA44 MOV X1, X31
	0x03AFEA48 BL 0x331ACB8
	0x03AFEA4C B 0x3AFEAA0
	0x03AFEA50 ADRP X8, 0x5F7000
	0x03AFEA54 LDR X8, [X8 + 0x170]
	0x03AFEA58 LDR X0, [X8]
	0x03AFEA5C LDR W8, [X0 + 0xE0]
	0x03AFEA60 CBNZ W8, 0x3AFEA68
	0x03AFEA64 BL 0x1C16DFC
	0x03AFEA68 MOV W0, W24
	0x03AFEA6C MOV X1, X31
	0x03AFEA70 BL 0x331A99C
	0x03AFEA74 FMOV S14, 1
	0x03AFEA78 TBZ X0, 0x0, 0x3AFEAA4
	0x03AFEA7C ADRP X8, 0x5F7000
	0x03AFEA80 LDR X8, [X8 + 0x170]
	0x03AFEA84 LDR X0, [X8]
	0x03AFEA88 LDR W8, [X0 + 0xE0]
	0x03AFEA8C CBNZ W8, 0x3AFEA94
	0x03AFEA90 BL 0x1C16DFC
	0x03AFEA94 MOV W0, W24
	0x03AFEA98 MOV X1, X31
	0x03AFEA9C BL 0x331AE30
	0x03AFEAA0 AND W24, W0, 0xFFFF
	0x03AFEAA4 LDR W8, [X19 + 0x644]
	0x03AFEAA8 CBNZ W8, 0x3AFE7CC
	0x03AFEAAC LDR X8, [X19 + 0x368]
	0x03AFEAB0 CBZ X8, 0x3AFFD98
	0x03AFEAB4 LDR X8, [X8 + 0x38]
	0x03AFEAB8 CBZ X8, 0x3AFFD98
	0x03AFEABC LDRSW X9, [X28 + 0x1E8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move W8, [X0+568]
	007 Move W9, 596
	008 Move W10, 484
	009 Move V9, V0
	010 NotImplemented "Instruction CMP not yet implemented."
	011 NotImplemented "Instruction CSEL not yet implemented."
	012 Move V0, [X0]
	013 Move V8, V1
	014 Move X19, X0
	015 Add X9, X0, 572
	016 Move [X31+12], S0
	017 Move V0, [X0+592]
	018 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	019 Move [X9], D0
	020 Move [X0+724], W31
	021 Move [X0+588], W31
	022 Move [X0+580], W31
	023 Move X9, [X19]
	024 Move W3, [X19+728]
	025 And W31, W8, 255
	026 NotImplemented "Instruction CSET not yet implemented."
	027 Move X10, [X9+2152]
	028 Move X4, [X9+2160]
	029 Add X1, X31, 12
	030 Move X0, X19
	031 Move V0, V9
	032 Move V1, V8
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move W8, [X19+580]
	035 Move W9, [X19+588]
	036 Add W8, W8, 1
	037 Move [X19+580], W8
	038 Compare W9, 0
	039 JumpIfNotEqual {41}
	040 Move W8, [X19+568]
	041 Move X30, [X31+32]
	042 Move X19, [X31+40]
	043 Move D9, [X31+16]
	044 Move D8, [X31+24]
	045 Move V0, V1
	046 Add X31, X31, 48
	047 Return V0

Method: UnityEngine.Vector2 GetRenderedValues()

Disassembly:
	0x03AFECAC BL 0x3C9C4A4
	0x03AFECB0 LDR V0, [X31 + 0xBC]
	0x03AFECB4 LDR W8, [X31 + 0xBD0]
	0x03AFECB8 ADD X0, X31, 0xA0
	0x03AFECBC MOV X1, X31
	0x03AFECC0 STR V0, [X31 + 0xA]
	0x03AFECC4 STR W8, [X31 + 0xB0]
	0x03AFECC8 BL 0x3C9C2D4
	0x03AFECCC LDR X0, [X25 + 0x20]
	0x03AFECD0 CBZ X0, 0x3AFFD98

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Add X8, X31, 8
	004 Call TMP_Text.GetTextBounds, X0
	005 Move S0, [X31+20]
	006 Move S1, [X31+24]
	007 Move X30, [X31+32]
	008 Add S0, S0, S0
	009 Add S1, S1, S1
	010 Add X31, X31, 48
	011 Return X0

Method: UnityEngine.Vector2 GetRenderedValues(System.Boolean onlyVisibleCharacters)

Disassembly:
	0x03AFECD4 LDR V14, [X25 + 0x2C]
	0x03AFECD8 MOV X1, X31
	0x03AFECDC MOV V10.16B, V0.16B
	0x03AFECE0 BL 0x3C9C4E0
	0x03AFECE4 LDR X8, [X19 + 0x100]
	0x03AFECE8 CBZ X8, 0x3AFFD98
	0x03AFECEC ADD X1, X8, 0x50
	0x03AFECF0 ADD X0, X31, 0xE0
	0x03AFECF4 MOVZ W2, 0x60
	0x03AFECF8 MOV V11.16B, V0.16B
	0x03AFECFC BL 0x3EB1B30

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 And W1, W1, 1
	004 Add X8, X31, 8
	005 Call TMP_Text.GetTextBounds, X0, X1
	006 Move S0, [X31+20]
	007 Move S1, [X31+24]
	008 Move X30, [X31+32]
	009 Add S0, S0, S0
	010 Add S1, S1, S1
	011 Add X31, X31, 48
	012 Return X0

Method: System.Single GetRenderedWidth()

Disassembly:
	0x03AFABBC CMP W10, W9
	0x03AFABC0 B.CS 0x3AFACB0
	0x03AFABC4 MADD X10, X10, X28, X8
	0x03AFABC8 STR W23, [X10 + 0x24]
	0x03AFABCC LDRSW X10, [X31 + 0xC]
	0x03AFABD0 CMP W10, W9
	0x03AFABD4 B.CS 0x3AFACB0
	0x03AFABD8 MADD X8, X10, X28, X8
	0x03AFABDC MOVZ W9, 0x1

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Add X8, X31, 8
	004 Call TMP_Text.GetTextBounds, X0
	005 Move V0, [X31+20]
	006 Move X30, [X31+32]
	007 Add S0, S0, S0
	008 Add X31, X31, 48
	009 Return V0

Method: System.Single GetRenderedWidth(System.Boolean onlyVisibleCharacters)

Disassembly:
	0x03AFEF08 B 0x3AFEFFC
	0x03AFEF0C FMOV S0, W31
	0x03AFEF10 STR S0, [X31 + 0x48]
	0x03AFEF14 FMOV S11, W31
	0x03AFEF18 FMOV S12, W31
	0x03AFEF1C FMOV S10, W31
	0x03AFEF20 FMOV S13, W31
	0x03AFEF24 B 0x3AFEF3C
	0x03AFEF28 STR S0, [X31 + 0x48]
	0x03AFEF2C FMOV S12, W31

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 And W1, W1, 1
	004 Add X8, X31, 8
	005 Call TMP_Text.GetTextBounds, X0, X1
	006 Move V0, [X31+20]
	007 Move X30, [X31+32]
	008 Add S0, S0, S0
	009 Add X31, X31, 48
	010 Return V0

Method: System.Single GetRenderedHeight()

Disassembly:
	0x03AFAC04 LDR W24, [X31 + 0x8]
	0x03AFAC08 B 0x3AFABF4
	0x03AFAC0C MOV X0, X19
	0x03AFAC10 STR W31, [X19 + 0x5C8]
	0x03AFAC14 BL 0x3AF7780
	0x03AFAC18 CBZ X0, 0x3AFACB4
	0x03AFAC1C LDR W8, [X0 + 0x18]
	0x03AFAC20 MOVZ W9, 0x50F3
	0x03AFAC24 MOVK W9, 0xB9750000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Add X8, X31, 8
	004 Call TMP_Text.GetTextBounds, X0
	005 Move V0, [X31+24]
	006 Move X30, [X31+32]
	007 Add S0, S0, S0
	008 Add X31, X31, 48
	009 Return V0

Method: System.Single GetRenderedHeight(System.Boolean onlyVisibleCharacters)

Disassembly:
	0x03AFEF30 FMOV S10, W31
	0x03AFEF34 FMOV S13, W31
	0x03AFEF38 LDR W8, [X28 + 0x1E8]
	0x03AFEF3C SUBS W8, W8, 0x1
	0x03AFEF40 B.LT 0x3AFEFF4
	0x03AFEF44 LDR X9, [X19 + 0x368]
	0x03AFEF48 CBZ X9, 0x3AFFD98
	0x03AFEF4C LDR X9, [X9 + 0x38]
	0x03AFEF50 CBZ X9, 0x3AFFD98
	0x03AFEF54 LDR W10, [X9 + 0x18]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 And W1, W1, 1
	004 Add X8, X31, 8
	005 Call TMP_Text.GetTextBounds, X0, X1
	006 Move V0, [X31+24]
	007 Move X30, [X31+32]
	008 Add S0, S0, S0
	009 Add X31, X31, 48
	010 Return V0

Method: UnityEngine.Vector2 CalculatePreferredValues(ref System.Single fontSize, UnityEngine.Vector2 marginSize, System.Boolean isTextAutoSizingEnabled, System.Boolean isWordWrappingEnabled)

Disassembly:
	0x03AFEF58 CMP W8, W10
	0x03AFEF5C B.CS 0x3AFFFE0
	0x03AFEF60 UMADDL X8, X8, X29, X9
	0x03AFEF64 LDR X8, [X8 + 0x30]
	0x03AFEF68 CBZ X8, 0x3AFFD98
	0x03AFEF6C LDR X9, [X19 + 0x100]
	0x03AFEF70 CBZ X9, 0x3AFFD98
	0x03AFEF74 LDR X9, [X9 + 0x128]
	0x03AFEF78 CBZ X9, 0x3AFFD98
	0x03AFEF7C LDR X0, [X9 + 0x18]
	0x03AFEF80 CBZ X0, 0x3AFFD98
	0x03AFEF84 ADRP X9, 0x65A000
	0x03AFEF88 LDR W8, [X8 + 0x28]
	0x03AFEF8C LDR X9, [X9 + 0x320]
	0x03AFEF90 ADD X2, X31, 0x98
	0x03AFEF94 ORR W1, W8, W21, 0x10
	0x03AFEF98 LDR X3, [X9]
	0x03AFEF9C BL 0x2B10A7C
	0x03AFEFA0 TBZ X0, 0x0, 0x3AFEFF4
	0x03AFEFA4 LDR X8, [X31 + 0x98]
	0x03AFEFA8 CBZ X8, 0x3AFFD98
	0x03AFEFAC LDP S4, S5, [X8 + 0x28]
	0x03AFEFB0 LDP S6, S7, [X8 + 0x30]
	0x03AFEFB4 MOV V0.16B, V11.16B
	0x03AFEFB8 MOV V1.16B, V12.16B
	0x03AFEFBC MOV V2.16B, V10.16B
	0x03AFEFC0 MOV V3.16B, V13.16B
	0x03AFEFC4 MOV X0, X31
	0x03AFEFC8 BL 0x3AEBF44
	0x03AFEFCC LDR X8, [X31 + 0x98]
	0x03AFEFD0 CBZ X8, 0x3AFFD98
	0x03AFEFD4 LDRB W8, [X8 + 0x39]
	0x03AFEFD8 LDR V0, [X31 + 0x5C]
	0x03AFEFDC FMOV S13, W31
	0x03AFEFE0 MOV V10.16B, V2.16B
	0x03AFEFE4 ANDS W31, W8, 0x1
	0x03AFEFE8 FCSEL S0, S0, S13, EQ
	0x03AFEFEC STR S0, [X31 + 0x5C]
	0x03AFEFF0 B 0x3AFEFF8
	0x03AFEFF4 FMOV S13, W31
	0x03AFEFF8 STR S10, [X19 + 0x2FC]
	0x03AFEFFC LDR V12, [X19 + 0x2B0]
	0x03AFF000 FCMP S12, 0x0
	0x03AFF004 B.EQ 0x3AFF0B4
	0x03AFF008 LDR X8, [X19 + 0x648]
	0x03AFF00C CBZ X8, 0x3AFFD98
	0x03AFF010 LDR X0, [X8 + 0x20]
	0x03AFF014 CBZ X0, 0x3AFFD98
	0x03AFF018 ADD X8, X31, 0xBC0
	0x03AFF01C MOV X1, X31
	0x03AFF020 BL 0x3C9C4A4
	0x03AFF024 LDR V0, [X31 + 0xBC]
	0x03AFF028 LDR W8, [X31 + 0xBD0]
	0x03AFF02C ADD X0, X31, 0xA0
	0x03AFF030 MOV X1, X31
	0x03AFF034 STR V0, [X31 + 0xA]
	0x03AFF038 STR W8, [X31 + 0xB0]
	0x03AFF03C BL 0x3C9C2CC
	0x03AFF040 LDR X8, [X19 + 0x648]
	0x03AFF044 CBZ X8, 0x3AFFD98
	0x03AFF048 LDR X0, [X8 + 0x20]
	0x03AFF04C CBZ X0, 0x3AFFD98
	0x03AFF050 ADD X8, X31, 0xBC0
	0x03AFF054 MOV X1, X31
	0x03AFF058 MOV V11.16B, V0.16B
	0x03AFF05C BL 0x3C9C4A4
	0x03AFF060 LDR V0, [X31 + 0xBC]
	0x03AFF064 LDR W8, [X31 + 0xBD0]
	0x03AFF068 ADD X0, X31, 0xA0
	0x03AFF06C MOV X1, X31
	0x03AFF070 STR V0, [X31 + 0xA]
	0x03AFF074 STR W8, [X31 + 0xB0]
	0x03AFF078 BL 0x3C9C2DC
	0x03AFF07C FMOV S3, 0.5
	0x03AFF080 LDR V1, [X19 + 0x2D4]
	0x03AFF084 FMUL S2, S12, S3
	0x03AFF088 FMUL S3, S11, S3
	0x03AFF08C FADD S0, S3, S0
	0x03AFF090 FMUL S0, S14, S0
	0x03AFF094 LDR V3, [X19 + 0x640]
	0x03AFF098 FSUB S0, S2, S0
	0x03AFF09C FMOV S2, 1
	0x03AFF0A0 FSUB S1, S2, S1
	0x03AFF0A4 FMUL S0, S1, S0
	0x03AFF0A8 STR S0, [X31 + 0x48]
	0x03AFF0AC FADD S0, S3, S0
	0x03AFF0B0 STR S0, [X19 + 0x640]
	0x03AFF0B4 LDR W10, [X19 + 0x644]
	0x03AFF0B8 FMOV S11, W31
	0x03AFF0BC CBNZ W27, 0x3AFF0D8
	0x03AFF0C0 CBNZ W10, 0x3AFF0D8
	0x03AFF0C4 LDRB W8, [X19 + 0x25C]
	0x03AFF0C8 TBZ X8, 0x0, 0x3AFF0D8
	0x03AFF0CC LDR X8, [X19 + 0x100]
	0x03AFF0D0 CBZ X8, 0x3AFFD98
	0x03AFF0D4 LDR V11, [X8 + 0x1B4]
	0x03AFF0D8 LDR X8, [X19 + 0x488]
	0x03AFF0DC CBZ X8, 0x3AFFD98
	0x03AFF0E0 LDRSW X9, [X19 + 0x494]
	0x03AFF0E4 LDR W11, [X8 + 0x18]
	0x03AFF0E8 CMP W9, W11
	0x03AFF0EC B.CS 0x3AFFFE0
	0x03AFF0F0 LDR V0, [X19 + 0x4D8]
	0x03AFF0F4 LDR V1, [X19 + 0x61C]
	0x03AFF0F8 NOP
	0x03AFF0FC MADD X11, X9, X29, X8
	0x03AFF100 FMUL S3, S8, S14
	0x03AFF104 FSUB S2, S13, S0
	0x03AFF108 FADD S2, S2, S1
	0x03AFF10C STR S2, [X11 + 0x14C]
	0x03AFF110 CBZ W10, 0x3AFF11C
	0x03AFF114 FMUL S2, S9, S14
	0x03AFF118 B 0x3AFF12C
	0x03AFF11C LDR V4, [X31 + 0x50]
	0x03AFF120 FMUL S2, S9, S14
	0x03AFF124 FDIV S3, S3, S4
	0x03AFF128 FDIV S2, S2, S4
	0x03AFF12C FADD S8, S1, S3
	0x03AFF130 CBZ W26, 0x3AFF174
	0x03AFF134 LDR W10, [X19 + 0x498]
	0x03AFF138 CMP W9, W10
	0x03AFF13C B.EQ 0x3AFF174
	0x03AFF140 LDR V1, [X19 + 0x4C8]
	0x03AFF144 NOP
	0x03AFF148 MADD X8, X9, X29, X8
	0x03AFF14C STR S1, [X8 + 0x154]
	0x03AFF150 LDR V2, [X19 + 0x4CC]
	0x03AFF154 FSUB S1, S1, S0
	0x03AFF158 STR S1, [X8 + 0x148]
	0x03AFF15C STR S2, [X8 + 0x158]
	0x03AFF160 STR S1, [X19 + 0x4C0]
	0x03AFF164 FSUB S1, S2, S0
	0x03AFF168 STR S1, [X8 + 0x150]
	0x03AFF16C STR S1, [X19 + 0x4C4]
	0x03AFF170 B 0x3AFF23C
	0x03AFF174 FADD S2, S1, S2
	0x03AFF178 FCMP S1, 0x0
	0x03AFF17C MOV V3.16B, V2.16B
	0x03AFF180 MOV V4.16B, V8.16B
	0x03AFF184 B.EQ 0x3AFF1AC
	0x03AFF188 LDR V3, [X19 + 0x404]
	0x03AFF18C FSUB S4, S8, S1
	0x03AFF190 FSUB S1, S2, S1
	0x03AFF194 FDIV S4, S4, S3
	0x03AFF198 FDIV S1, S1, S3
	0x03AFF19C FCMP S4, S8
	0x03AFF1A0 FCSEL S4, S4, S8, GT
	0x03AFF1A4 FCMP S1, S2
	0x03AFF1A8 FCSEL S3, S1, S2, MI
	0x03AFF1AC LDR V1, [X19 + 0x4C8]
	0x03AFF1B0 LDR V5, [X19 + 0x4CC]
	0x03AFF1B4 NOP
	0x03AFF1B8 MADD X8, X9, X29, X8
	0x03AFF1BC FSUB S2, S2, S0
	0x03AFF1C0 FCMP S4, S1
	0x03AFF1C4 FCSEL S1, S4, S1, GT
	0x03AFF1C8 FCMP S3, S5
	0x03AFF1CC FCSEL S5, S3, S5, MI
	0x03AFF1D0 STR S5, [X19 + 0x4CC]
	0x03AFF1D4 FSUB S5, S8, S0
	0x03AFF1D8 STR S1, [X19 + 0x4C8]
	0x03AFF1DC STR S4, [X8 + 0x154]
	0x03AFF1E0 STR S3, [X8 + 0x158]
	0x03AFF1E4 STR S5, [X8 + 0x148]
	0x03AFF1E8 STR S5, [X19 + 0x4C0]
	0x03AFF1EC STR S2, [X8 + 0x150]
	0x03AFF1F0 LDR W8, [X19 + 0x4A8]
	0x03AFF1F4 STR S2, [X19 + 0x4C4]
	0x03AFF1F8 CBZ W8, 0x3AFF204
	0x03AFF1FC LDRB W8, [X19 + 0x33C]
	0x03AFF200 CBZ W8, 0x3AFF23C
	0x03AFF204 LDR X8, [X19 + 0x100]
	0x03AFF208 STR S1, [X19 + 0x4B8]
	0x03AFF20C CBZ X8, 0x3AFFD98
	0x03AFF210 LDR V9, [X19 + 0x4BC]
	0x03AFF214 ADD X0, X8, 0x50
	0x03AFF218 MOV X1, X31
	0x03AFF21C BL 0x3C9BFC8
	0x03AFF220 LDR V1, [X31 + 0x50]
	0x03AFF224 FMUL S0, S14, S0
	0x03AFF228 FDIV S1, S0, S1
	0x03AFF22C LDR V0, [X19 + 0x4D8]
	0x03AFF230 FCMP S9, S1
	0x03AFF234 FCSEL S1, S9, S1, GT
	0x03AFF238 STR S1, [X19 + 0x4BC]
	0x03AFF23C FCMP S0, 0x0
	0x03AFF240 B.NE 0x3AFF268
	0x03AFF244 CBZ W26, 0x3AFF258
	0x03AFF248 LDR W8, [X19 + 0x494]
	0x03AFF24C LDR W9, [X19 + 0x498]
	0x03AFF250 CMP W8, W9
	0x03AFF254 B.NE 0x3AFF2A8
	0x03AFF258 LDR V0, [X19 + 0x4B4]
	0x03AFF25C FCMP S0, S8
	0x03AFF260 FCSEL S0, S0, S8, GT
	0x03AFF264 STR S0, [X19 + 0x4B4]
	0x03AFF268 LDRB W8, [X19 + 0x278]
	0x03AFF26C ANDS W31, W8, 0x18
	0x03AFF270 CSET W21, EQ
	0x03AFF274 CMP W24, 0x9
	0x03AFF278 B.NE 0x3AFF284
	0x03AFF27C MOVZ W27, 0x1
	0x03AFF280 B 0x3AFF2D8
	0x03AFF284 CBNZ W26, 0x3AFF2BC
	0x03AFF288 CMP W24, 0x3
	0x03AFF28C B.EQ 0x3AFF2BC
	0x03AFF290 MOVZ W8, 0x200B
	0x03AFF294 CMP W24, W8
	0x03AFF298 B.EQ 0x3AFF2BC
	0x03AFF29C CMP W24, 0xAD
	0x03AFF2A0 B.EQ 0x3AFF2BC
	0x03AFF2A4 B 0x3AFF2D4
	0x03AFF2A8 LDRB W8, [X19 + 0x278]
	0x03AFF2AC ANDS W31, W8, 0x18
	0x03AFF2B0 CSET W21, EQ
	0x03AFF2B4 CMP W24, 0x9
	0x03AFF2B8 B.EQ 0x3AFF27C
	0x03AFF2BC LDR W8, [X31 + 0x3C]
	0x03AFF2C0 ORN W8, W8, W25, 0x0
	0x03AFF2C4 TBZ X8, 0x0, 0x3AFF2D4
	0x03AFF2C8 LDR W8, [X19 + 0x644]
	0x03AFF2CC CMP W8, 0x1
	0x03AFF2D0 B.NE 0x3AFF44C
	0x03AFF2D4 MOV W27, W31
	0x03AFF2D8 LDR V0, [X19 + 0x350]
	0x03AFF2DC LDR V4, [X31 + 0x2C]
	0x03AFF2E0 LDR V1, [X19 + 0x354]
	0x03AFF2E4 LDR V2, [X19 + 0x360]
	0x03AFF2E8 LDR V3, [X19 + 0x640]
	0x03AFF2EC FSUB S0, S4, S0
	0x03AFF2F0 FSUB S0, S0, S1
	0x03AFF2F4 FCMP S0, S2
	0x03AFF2F8 FMOV S1, -1
	0x03AFF2FC FCCMP S2, S1, 0x4, PL
	0x03AFF300 ADD X0, X31, 0xC0
	0x03AFF304 MOV X1, X31
	0x03AFF308 FCSEL S8, S0, S2, EQ
	0x03AFF30C FABS S12, S3
	0x03AFF310 BL 0x3C9C2EC
	0x03AFF314 LDR V1, [X19 + 0x2D4]
	0x03AFF318 ADRP X8, 0xFFFFFFFFFCFEB000
	0x03AFF31C LDR V2, [X8 + 0x190]
	0x03AFF320 FMOV S4, 1
	0x03AFF324 CMP W25, 0x0
	0x03AFF328 FSUB S1, S4, S1
	0x03AFF32C FCSEL S3, S15, S14, NE
	0x03AFF330 CMP W21, 0x0
	0x03AFF334 FMUL S0, S0, S1
	0x03AFF338 FCSEL S9, S4, S2, NE
	0x03AFF33C FMUL S0, S3, S0
	0x03AFF340 LDR W9, [X31 + 0x30]
	0x03AFF344 FADD S12, S12, S0
	0x03AFF348 FMUL S0, S9, S8
	0x03AFF34C FCMP S12, S0
	0x03AFF350 CSET W8, LE
	0x03AFF354 ORR W8, W8, W9, 0x0
	0x03AFF358 STR S12, [X31 + 0x44]
	0x03AFF35C TBNZ X8, 0x0, 0x3AFF370
	0x03AFF360 LDR W8, [X19 + 0x494]
	0x03AFF364 LDR W9, [X19 + 0x498]
	0x03AFF368 CMP W8, W9
	0x03AFF36C B.NE 0x3AFF3D8
	0x03AFF370 LDR V12, [X19 + 0x350]
	0x03AFF374 LDR V15, [X19 + 0x354]
	0x03AFF378 CBZ W27, 0x3AFF450
	0x03AFF37C LDR X8, [X19 + 0x100]
	0x03AFF380 CBZ X8, 0x3AFFD98
	0x03AFF384 ADD X1, X8, 0x50
	0x03AFF388 ADD X0, X31, 0xE0
	0x03AFF38C MOVZ W2, 0x60
	0x03AFF390 BL 0x3EB1B30
	0x03AFF394 ADD X0, X31, 0xE0
	0x03AFF398 MOV X1, X31
	0x03AFF39C BL 0x3C9C080
	0x03AFF3A0 LDR X8, [X19 + 0x100]
	0x03AFF3A4 CBZ X8, 0x3AFFD98
	0x03AFF3A8 LDR V1, [X8 + 0x1B9]
	0x03AFF3AC LDR V2, [X19 + 0x640]
	0x03AFF3B0 UCVTF S1, S1
	0x03AFF3B4 FMUL S0, S0, S1
	0x03AFF3B8 FMUL S0, S14, S0
	0x03AFF3BC FDIV S1, S2, S0
	0x03AFF3C0 FRINTP S1, S1
	0x03AFF3C4 FMUL S1, S0, S1
	0x03AFF3C8 FADD S0, S2, S0
	0x03AFF3CC FCMP S1, S2
	0x03AFF3D0 FCSEL S0, S1, S0, GT
	0x03AFF3D4 B 0x3AFF554
	0x03AFF3D8 ADD X1, X31, 0x840
	0x03AFF3DC MOV X0, X19
	0x03AFF3E0 BL 0x3B05AD0
	0x03AFF3E4 LDR X8, [X19 + 0x488]
	0x03AFF3E8 CBZ X8, 0x3AFFD98
	0x03AFF3EC LDRSW X9, [X19 + 0x494]
	0x03AFF3F0 LDR W11, [X8 + 0x18]
	0x03AFF3F4 SUB W10, W9, 0x1
	0x03AFF3F8 CMP W10, W11
	0x03AFF3FC B.CS 0x3AFFFE0
	0x03AFF400 SMADDL X12, X10, X29, X8
	0x03AFF404 LDRH W12, [X12 + 0x20]
	0x03AFF408 LDR W13, [X31 + 0x3C]
	0x03AFF40C MOV W23, W0
	0x03AFF410 CMP W12, 0xAD
	0x03AFF414 CSET W12, NE
	0x03AFF418 ORR W12, W13, W12, 0x0
	0x03AFF41C TBNZ X12, 0x0, 0x3AFF428
	0x03AFF420 LDR W12, [X19 + 0x2E0]
	0x03AFF424 CBZ W12, 0x3AFFC5C
	0x03AFF428 CMP W9, W11
	0x03AFF42C B.CS 0x3AFFFE0
	0x03AFF430 MADD X8, X9, X29, X8
	0x03AFF434 LDRH W8, [X8 + 0x20]
	0x03AFF438 CMP W8, 0xAD
	0x03AFF43C B.NE 0x3AFFAA0
	0x03AFF440 MOVZ W8, 0x1
	0x03AFF444 STR W8, [X31 + 0x3C]
	0x03AFF448 B 0x3AFFD88
	0x03AFF44C LDP S15, S12, [X31 + 0x34]
	0x03AFF450 LDR V0, [X19 + 0x2B0]
	0x03AFF454 LDR V8, [X19 + 0x640]
	0x03AFF458 FCMP S0, 0x0
	0x03AFF45C B.NE 0x3AFF4B4
	0x03AFF460 ADD X0, X31, 0xC0
	0x03AFF464 MOV X1, X31
	0x03AFF468 BL 0x3C9C2EC
	0x03AFF46C LDR X8, [X19 + 0x100]
	0x03AFF470 CBZ X8, 0x3AFFD98
	0x03AFF474 LDR V1, [X8 + 0x1AC]
	0x03AFF478 LDR V4, [X31 + 0x5C]
	0x03AFF47C LDR V3, [X19 + 0x2D4]
	0x03AFF480 LDR V2, [X19 + 0x2AC]
	0x03AFF484 FADD S0, S10, S0
	0x03AFF488 FADD S1, S4, S1
	0x03AFF48C FMOV S4, 1
	0x03AFF490 FSUB S3, S4, S3
	0x03AFF494 LDR V4, [X31 + 0x40]
	0x03AFF498 FADD S1, S11, S1
	0x03AFF49C FMUL S0, S14, S0
	0x03AFF4A0 FMUL S1, S4, S1
	0x03AFF4A4 FADD S0, S0, S1
	0x03AFF4A8 FADD S0, S2, S0
	0x03AFF4AC FMUL S0, S3, S0
	0x03AFF4B0 B 0x3AFF4F4
	0x03AFF4B4 LDR X8, [X19 + 0x100]
	0x03AFF4B8 CBZ X8, 0x3AFFD98
	0x03AFF4BC LDR V4, [X31 + 0x48]
	0x03AFF4C0 LDR V1, [X8 + 0x1AC]
	0x03AFF4C4 LDR V2, [X19 + 0x2D4]
	0x03AFF4C8 LDR V3, [X19 + 0x2AC]
	0x03AFF4CC FSUB S0, S0, S4
	0x03AFF4D0 LDR V4, [X31 + 0x5C]
	0x03AFF4D4 FADD S1, S4, S1
	0x03AFF4D8 FMOV S4, 1
	0x03AFF4DC FSUB S2, S4, S2
	0x03AFF4E0 LDR V4, [X31 + 0x40]
	0x03AFF4E4 FMUL S1, S4, S1
	0x03AFF4E8 FADD S0, S0, S1
	0x03AFF4EC FADD S0, S3, S0
	0x03AFF4F0 FMUL S0, S2, S0
	0x03AFF4F4 MOVZ W8, 0x200B
	0x03AFF4F8 FADD S0, S8, S0
	0x03AFF4FC CMP W24, W8
	0x03AFF500 STR S0, [X19 + 0x640]
	0x03AFF504 B.EQ 0x3AFF50C
	0x03AFF508 CBZ W26, 0x3AFF520
	0x03AFF50C LDR V1, [X19 + 0x2B4]
	0x03AFF510 LDR V2, [X31 + 0x40]
	0x03AFF514 FMUL S1, S2, S1
	0x03AFF518 FADD S0, S0, S1
	0x03AFF51C STR S0, [X19 + 0x640]
	0x03AFF520 CMP W24, 0xD
	0x03AFF524 B.NE 0x3AFF5E0
	0x03AFF528 LDR V1, [X31 + 0x54]
	0x03AFF52C LDR V3, [X31 + 0x4C]
	0x03AFF530 FMOV S2, W31
	0x03AFF534 FADD S0, S1, S0
	0x03AFF538 LDR V1, [X19 + 0x40C]
	0x03AFF53C FCMP S3, S0
	0x03AFF540 FCSEL S3, S3, S0, GT
	0x03AFF544 FMOV S0, W31
	0x03AFF548 STR S0, [X31 + 0x54]
	0x03AFF54C FADD S0, S1, S2
	0x03AFF550 STR S3, [X31 + 0x4C]
	0x03AFF554 MOV W21, W31
	0x03AFF558 STR S0, [X19 + 0x640]
	0x03AFF55C LDR W3, [X28 + 0x1E8]
	0x03AFF560 LDR W8, [X31 + 0x58]
	0x03AFF564 CMP W3, W8
	0x03AFF568 B.EQ 0x3AFF614
	0x03AFF56C STP S15, S12, [X31 + 0x34]
	0x03AFF570 TBNZ X22, 0x0, 0x3AFF584
	0x03AFF574 LDR W8, [X19 + 0x2E0]
	0x03AFF578 ORR W8, W8, 0x2
	0x03AFF57C CMP W8, 0x3
	0x03AFF580 B.NE 0x3AFFD7C
	0x03AFF584 CBZ W26, 0x3AFF710
	0x03AFF588 LDRB W8, [X19 + 0x2DA]
	0x03AFF58C CBZ W8, 0x3AFF788
	0x03AFF590 LDR W8, [X31 + 0x1C]
	0x03AFF594 TBZ X8, 0x0, 0x3AFF738
	0x03AFF598 MOV X0, X31
	0x03AFF59C BL 0x3B140EC
	0x03AFF5A0 CBZ X0, 0x3AFFD98
	0x03AFF5A4 LDR X0, [X0 + 0x10]
	0x03AFF5A8 CBZ X0, 0x3AFFD98
	0x03AFF5AC ADRP X8, 0x659000
	0x03AFF5B0 LDR X8, [X8 + 0x318]
	0x03AFF5B4 MOV W1, W24
	0x03AFF5B8 LDR X2, [X8]
	0x03AFF5BC BL 0x2A04684
	0x03AFF5C0 TBNZ X0, 0x0, 0x3AFF5D8
	0x03AFF5C4 LDR W3, [X19 + 0x494]
	0x03AFF5C8 ADD X1, X31, 0x840
	0x03AFF5CC MOV X0, X19
	0x03AFF5D0 MOV W2, W23
	0x03AFF5D4 BL 0x3B05DB4
	0x03AFF5D8 STR W31, [X31 + 0x1C]
	0x03AFF5DC B 0x3AFFD7C
	0x03AFF5E0 CMP W24, 0xA
	0x03AFF5E4 CSET W21, EQ
	0x03AFF5E8 CMP W24, 0xB
	0x03AFF5EC B.HI 0x3AFF604
	0x03AFF5F0 MOVZ W8, 0x1
	0x03AFF5F4 LSLV W8, W8, W24
	0x03AFF5F8 MOVZ W9, 0xC08
	0x03AFF5FC ANDS W31, W8, W9, 0x0
	0x03AFF600 B.NE 0x3AFF614
	0x03AFF604 MOVN W8, 0x2027
	0x03AFF608 ADD W8, W24, W8
	0x03AFF60C CMP W8, 0x2
	0x03AFF610 B.CS 0x3AFF55C
	0x03AFF614 LDR V0, [X19 + 0x4D8]
	0x03AFF618 FCMP S0, 0x0
	0x03AFF61C B.LE 0x3AFF67C
	0x03AFF620 ADRP X8, 0x5F4000
	0x03AFF624 LDR X8, [X8 + 0x5A8]
	0x03AFF628 LDR V8, [X19 + 0x4C8]
	0x03AFF62C LDR V9, [X19 + 0x4D0]
	0x03AFF630 LDR X0, [X8]
	0x03AFF634 LDR W8, [X0 + 0xE0]
	0x03AFF638 CBNZ W8, 0x3AFF640
	0x03AFF63C BL 0x1C16DFC
	0x03AFF640 LDR V2, [X31 + 0x10]
	0x03AFF644 FSUB S0, S8, S9
	0x03AFF648 FABS S1, S0
	0x03AFF64C FCMP S1, S2
	0x03AFF650 B.LE 0x3AFF67C
	0x03AFF654 LDRB W8, [X19 + 0x2C4]
	0x03AFF658 CBNZ W8, 0x3AFF67C
	0x03AFF65C LDRB W8, [X19 + 0x33C]
	0x03AFF660 CBNZ W8, 0x3AFF67C
	0x03AFF664 LDR V1, [X19 + 0x4C4]
	0x03AFF668 LDR V2, [X19 + 0x4D8]
	0x03AFF66C FSUB S1, S1, S0
	0x03AFF670 FADD S0, S0, S2
	0x03AFF674 STR S1, [X19 + 0x4C4]
	0x03AFF678 STR S0, [X19 + 0x4D8]
	0x03AFF67C LDR V0, [X19 + 0x4CC]
	0x03AFF680 LDR V1, [X19 + 0x4D8]
	0x03AFF684 LDR V2, [X31 + 0x54]
	0x03AFF688 LDR V3, [X31 + 0x44]
	0x03AFF68C LDR W3, [X19 + 0x494]
	0x03AFF690 FSUB S0, S0, S1
	0x03AFF694 LDR V1, [X19 + 0x4C4]
	0x03AFF698 FADD S2, S2, S3
	0x03AFF69C LDR V3, [X31 + 0x4C]
	0x03AFF6A0 LDR W8, [X31 + 0x58]
	0x03AFF6A4 FCMP S1, S0
	0x03AFF6A8 FCSEL S0, S1, S0, MI
	0x03AFF6AC LDR V1, [X19 + 0x4B8]
	0x03AFF6B0 FADD S2, S12, S2
	0x03AFF6B4 FADD S2, S15, S2
	0x03AFF6B8 FCMP S3, S2
	0x03AFF6BC FCSEL S2, S3, S2, GT
	0x03AFF6C0 CMP W3, W8
	0x03AFF6C4 STR S0, [X19 + 0x4C4]
	0x03AFF6C8 FCSEL S3, S3, S2, EQ
	0x03AFF6CC FCSEL S2, S2, S13, EQ
	0x03AFF6D0 FSUB S0, S1, S0
	0x03AFF6D4 STRB W31, [X19 + 0x33C]
	0x03AFF6D8 STR S3, [X31 + 0x4C]
	0x03AFF6DC STR S2, [X31 + 0x54]
	0x03AFF6E0 STR S0, [X31 + 0x28]
	0x03AFF6E4 TBNZ X21, 0x0, 0x3AFF92C
	0x03AFF6E8 MOVZ W8, 0x2027
	0x03AFF6EC CMP W24, W8
	0x03AFF6F0 B.GT 0x3AFF91C
	0x03AFF6F4 CMP W24, 0x3
	0x03AFF6F8 B.EQ 0x3AFFC78
	0x03AFF6FC CMP W24, 0xB
	0x03AFF700 B.EQ 0x3AFF92C
	0x03AFF704 CMP W24, 0x2D
	0x03AFF708 B.EQ 0x3AFF92C
	0x03AFF70C B 0x3AFF56C
	0x03AFF710 CMP W24, 0x2D
	0x03AFF714 B.EQ 0x3AFF588
	0x03AFF718 MOVZ W8, 0x200B
	0x03AFF71C CMP W24, W8
	0x03AFF720 B.EQ 0x3AFF588
	0x03AFF724 CMP W24, 0xAD
	0x03AFF728 B.EQ 0x3AFF588
	0x03AFF72C LDRB W8, [X19 + 0x2DA]
	0x03AFF730 CBNZ W8, 0x3AFF590
	0x03AFF734 B 0x3AFF7C4
	0x03AFF738 LDR W8, [X31 + 0x24]
	0x03AFF73C TBZ X8, 0x0, 0x3AFFBA8
	0x03AFF740 LDR W8, [X31 + 0x3C]
	0x03AFF744 ORN W8, W8, W25, 0x0
	0x03AFF748 TBZ X8, 0x0, 0x3AFF750
	0x03AFF74C CBZ W26, 0x3AFF764
	0x03AFF750 LDR W3, [X19 + 0x494]
	0x03AFF754 ADD X1, X31, 0x150
	0x03AFF758 MOV X0, X19
	0x03AFF75C MOV W2, W23
	0x03AFF760 BL 0x3B05DB4
	0x03AFF764 LDR W3, [X19 + 0x494]
	0x03AFF768 ADD X1, X31, 0x840
	0x03AFF76C MOV X0, X19
	0x03AFF770 MOV W2, W23
	0x03AFF774 BL 0x3B05DB4
	0x03AFF778 STR W31, [X31 + 0x1C]
	0x03AFF77C MOVZ W8, 0x1
	0x03AFF780 STR W8, [X31 + 0x24]
	0x03AFF784 B 0x3AFFD7C
	0x03AFF788 MOVN W8, 0x2006
	0x03AFF78C ADD W8, W24, W8
	0x03AFF790 CMP W8, 0x28
	0x03AFF794 B.HI 0x3AFF7B0
	0x03AFF798 MOVZ W9, 0x1
	0x03AFF79C LSLV X8, X9, X8
	0x03AFF7A0 MOVZ X9, 0x401
	0x03AFF7A4 MOVK X9, 0x100
	0x03AFF7A8 ANDS X31, X8, X9, 0x0
	0x03AFF7AC B.NE 0x3AFF7C4
	0x03AFF7B0 CMP W24, 0xA0
	0x03AFF7B4 B.EQ 0x3AFF7C4
	0x03AFF7B8 MOVZ W8, 0x2060
	0x03AFF7BC CMP W24, W8
	0x03AFF7C0 B.NE 0x3AFFD5C
	0x03AFF7C4 MOVN W8, 0xAC00
	0x03AFF7C8 ADD W8, W24, W8
	0x03AFF7CC MOVZ W9, 0x2BFE
	0x03AFF7D0 CMP W8, W9
	0x03AFF7D4 B.CC 0x3AFF7F8
	0x03AFF7D8 MOVN W8, 0x1100
	0x03AFF7DC ADD W8, W24, W8
	0x03AFF7E0 CMP W8, 0xFE
	0x03AFF7E4 B.CC 0x3AFF7F8
	0x03AFF7E8 MOVN W8, 0xA960
	0x03AFF7EC ADD W8, W24, W8
	0x03AFF7F0 CMP W8, 0x1D
	0x03AFF7F4 B.HI 0x3AFF804
	0x03AFF7F8 MOV X0, X31
	0x03AFF7FC BL 0x3B14228
	0x03AFF800 TBZ X0, 0x0, 0x3AFF848
	0x03AFF804 MOVN W8, 0xFF00
	0x03AFF808 ADD W8, W24, W8
	0x03AFF80C CMP W8, 0xEE
	0x03AFF810 B.CC 0x3AFF848
	0x03AFF814 MOVN W8, 0xFE30
	0x03AFF818 ADD W8, W24, W8
	0x03AFF81C CMP W8, 0x1E
	0x03AFF820 B.CC 0x3AFF848
	0x03AFF824 MOVN W8, 0x2E80
	0x03AFF828 ADD W8, W24, W8
	0x03AFF82C MOVZ W9, 0x717E
	0x03AFF830 CMP W8, W9
	0x03AFF834 B.CC 0x3AFF848
	0x03AFF838 MOVN W8, 0xF900
	0x03AFF83C ADD W8, W24, W8
	0x03AFF840 CMP W8, 0x1FD
	0x03AFF844 B.HI 0x3AFF590
	0x03AFF848 MOV X0, X31
	0x03AFF84C BL 0x3B140EC
	0x03AFF850 CBZ X0, 0x3AFFD98
	0x03AFF854 LDR X0, [X0 + 0x10]
	0x03AFF858 CBZ X0, 0x3AFFD98
	0x03AFF85C ADRP X8, 0x659000
	0x03AFF860 LDR X8, [X8 + 0x318]
	0x03AFF864 MOV W1, W24
	0x03AFF868 LDR X2, [X8]
	0x03AFF86C BL 0x2A04684
	0x03AFF870 LDR W8, [X28 + 0x1E8]
	0x03AFF874 LDR W9, [X31 + 0x58]
	0x03AFF878 MOV W24, W0
	0x03AFF87C CMP W8, W9
	0x03AFF880 B.GE 0x3AFFD2C
	0x03AFF884 MOV X0, X31
	0x03AFF888 BL 0x3B140EC
	0x03AFF88C CBZ X0, 0x3AFFD98
	0x03AFF890 LDR X8, [X19 + 0x488]
	0x03AFF894 CBZ X8, 0x3AFFD98
	0x03AFF898 LDR W9, [X28 + 0x1E8]
	0x03AFF89C LDR W10, [X8 + 0x18]
	0x03AFF8A0 ADD W9, W9, 0x1
	0x03AFF8A4 CMP W9, W10
	0x03AFF8A8 B.CS 0x3AFFFE0
	0x03AFF8AC LDR X0, [X0 + 0x18]
	0x03AFF8B0 CBZ X0, 0x3AFFD98
	0x03AFF8B4 SMADDL X8, X9, X29, X8
	0x03AFF8B8 LDRH W1, [X8 + 0x20]
	0x03AFF8BC ADRP X8, 0x659000
	0x03AFF8C0 LDR X8, [X8 + 0x318]
	0x03AFF8C4 LDR X2, [X8]
	0x03AFF8C8 BL 0x2A04684
	0x03AFF8CC LDR W8, [X31 + 0x24]
	0x03AFF8D0 ORN W8, W8, W24, 0x0
	0x03AFF8D4 TBZ X8, 0x0, 0x3AFFD4C
	0x03AFF8D8 TBZ X0, 0x0, 0x3AFFD38
	0x03AFF8DC LDR W8, [X31 + 0x24]
	0x03AFF8E0 TBZ X8, 0x0, 0x3AFFD4C
	0x03AFF8E4 CBZ W26, 0x3AFF8FC
	0x03AFF8E8 LDR W3, [X19 + 0x494]
	0x03AFF8EC ADD X1, X31, 0x150
	0x03AFF8F0 MOV X0, X19
	0x03AFF8F4 MOV W2, W23
	0x03AFF8F8 BL 0x3B05DB4
	0x03AFF8FC LDR W3, [X19 + 0x494]
	0x03AFF900 ADD X1, X31, 0x840
	0x03AFF904 MOV X0, X19
	0x03AFF908 MOV W2, W23
	0x03AFF90C BL 0x3B05DB4
	0x03AFF910 MOVZ W8, 0x1
	0x03AFF914 STR W8, [X31 + 0x1C]
	0x03AFF918 B 0x3AFF77C
	0x03AFF91C MOVN W8, 0x2027
	0x03AFF920 ADD W8, W24, W8
	0x03AFF924 CMP W8, 0x1
	0x03AFF928 B.HI 0x3AFF56C
	0x03AFF92C ADD X1, X31, 0x4C8
	0x03AFF930 MOV X0, X19
	0x03AFF934 MOV W2, W23
	0x03AFF938 BL 0x3B05DB4
	0x03AFF93C LDR W3, [X19 + 0x494]
	0x03AFF940 ADD X1, X31, 0x840
	0x03AFF944 MOV X0, X19
	0x03AFF948 MOV W2, W23
	0x03AFF94C BL 0x3B05DB4
	0x03AFF950 LDR W8, [X19 + 0x4A8]
	0x03AFF954 LDRSW X9, [X19 + 0x494]
	0x03AFF958 LDR X10, [X19 + 0x488]
	0x03AFF95C ADD W11, W8, 0x1
	0x03AFF960 ADD W8, W9, 0x1
	0x03AFF964 STR W11, [X19 + 0x4A8]
	0x03AFF968 STR W8, [X19 + 0x498]
	0x03AFF96C CBZ X10, 0x3AFFD98
	0x03AFF970 LDR W11, [X10 + 0x18]
	0x03AFF974 CMP W9, W11
	0x03AFF978 B.CS 0x3AFFFE0
	0x03AFF97C ADRP X11, 0xFFFFFFFFFCFEB000
	0x03AFF980 LDR V0, [X19 + 0x2C0]
	0x03AFF984 LDR V1, [X11 + 0x214]
	0x03AFF988 NOP
	0x03AFF98C MADD X9, X9, X29, X10
	0x03AFF990 LDR V8, [X9 + 0x154]
	0x03AFF994 FCMP S0, S1
	0x03AFF998 B.NE 0x3AFFA04
	0x03AFF99C MOVZ W9, 0x2029
	0x03AFF9A0 CMP W24, W9
	0x03AFF9A4 CSET W9, NE
	0x03AFF9A8 FMOV S0, W31
	0x03AFF9AC BIC W9, W9, W21, 0x0
	0x03AFF9B0 FMOV S1, W31
	0x03AFF9B4 TBNZ X9, 0x0, 0x3AFF9BC
	0x03AFF9B8 LDR V1, [X19 + 0x2CC]
	0x03AFF9BC LDR V2, [X19 + 0x4CC]
	0x03AFF9C0 LDR V3, [X19 + 0x2BC]
	0x03AFF9C4 LDR V4, [X19 + 0x2B8]
	0x03AFF9C8 LDR V5, [X19 + 0x4D8]
	0x03AFF9CC FSUB S0, S0, S2
	0x03AFF9D0 LDR V2, [X31 + 0x18]
	0x03AFF9D4 FADD S0, S8, S0
	0x03AFF9D8 FADD S1, S4, S1
	0x03AFF9DC MOV W9, W31
	0x03AFF9E0 FADD S2, S2, S3
	0x03AFF9E4 LDR V3, [X31 + 0x14]
	0x03AFF9E8 FMUL S2, S3, S2
	0x03AFF9EC FADD S0, S0, S2
	0x03AFF9F0 LDR V2, [X31 + 0x40]
	0x03AFF9F4 FMUL S1, S2, S1
	0x03AFF9F8 FADD S0, S0, S1
	0x03AFF9FC FADD S0, S0, S5
	0x03AFFA00 B 0x3AFFA40
	0x03AFFA04 MOVZ W9, 0x2029
	0x03AFFA08 CMP W24, W9
	0x03AFFA0C CSET W9, NE
	0x03AFFA10 BIC W9, W9, W21, 0x0
	0x03AFFA14 FMOV S1, W31
	0x03AFFA18 TBNZ X9, 0x0, 0x3AFFA20
	0x03AFFA1C LDR V1, [X19 + 0x2CC]
	0x03AFFA20 LDR V2, [X19 + 0x2B8]
	0x03AFFA24 LDR V3, [X19 + 0x4D8]
	0x03AFFA28 MOVZ W9, 0x1
	0x03AFFA2C FADD S1, S2, S1
	0x03AFFA30 LDR V2, [X31 + 0x40]
	0x03AFFA34 FMUL S1, S2, S1
	0x03AFFA38 FADD S0, S0, S1
	0x03AFFA3C FADD S0, S3, S0
	0x03AFFA40 STP S15, S12, [X31 + 0x34]
	0x03AFFA44 STR S0, [X19 + 0x4D8]
	0x03AFFA48 STRB W9, [X19 + 0x2C4]
	0x03AFFA4C ADRP X21, 0x659000
	0x03AFFA50 LDR X21, [X21 + 0x3E8]
	0x03AFFA54 LDR X0, [X21]
	0x03AFFA58 LDR W9, [X0 + 0xE0]
	0x03AFFA5C CBNZ W9, 0x3AFFA70
	0x03AFFA60 BL 0x1C16DFC
	0x03AFFA64 LDR W8, [X28 + 0x1E8]
	0x03AFFA68 LDR X0, [X21]
	0x03AFFA6C ADD W8, W8, 0x1
	0x03AFFA70 LDR X9, [X0 + 0xB8]
	0x03AFFA74 LDR V0, [X19 + 0x408]
	0x03AFFA78 LDR V1, [X19 + 0x40C]
	0x03AFFA7C LDR V2, [X9 + 0x15A8]
	0x03AFFA80 FADD S0, S0, S13
	0x03AFFA84 FADD S0, S0, S1
	0x03AFFA88 STR S0, [X19 + 0x640]
	0x03AFFA8C UNIMPLEMENTED
	0x03AFFA90 STR S8, [X19 + 0x4D0]
	0x03AFFA94 STR D0, [X19 + 0x4C8]
	0x03AFFA98 STR W8, [X19 + 0x494]
	0x03AFFA9C B 0x3AFFD88
	0x03AFFAA0 LDR W8, [X31 + 0xC]
	0x03AFFAA4 LDR W9, [X31 + 0x24]
	0x03AFFAA8 AND W8, W9, W8, 0x0
	0x03AFFAAC TBZ X8, 0x0, 0x3AFFAFC
	0x03AFFAB0 LDR V0, [X19 + 0x2D0]
	0x03AFFAB4 LDR V1, [X19 + 0x2D4]
	0x03AFFAB8 MOVZ W8, 0x42C80000
	0x03AFFABC FMOV S2, W8
	0x03AFFAC0 FDIV S0, S0, S2
	0x03AFFAC4 FCMP S1, S0
	0x03AFFAC8 B.PL 0x3AFFADC
	0x03AFFACC LDR W8, [X19 + 0x244]
	0x03AFFAD0 LDR W9, [X19 + 0x248]
	0x03AFFAD4 CMP W8, W9
	0x03AFFAD8 B.LT 0x3AFFF30
	0x03AFFADC LDR V0, [X20]
	0x03AFFAE0 LDR V1, [X19 + 0x250]
	0x03AFFAE4 FCMP S0, S1
	0x03AFFAE8 B.LE 0x3AFFAFC
	0x03AFFAEC LDR W8, [X19 + 0x244]
	0x03AFFAF0 LDR W9, [X19 + 0x248]
	0x03AFFAF4 CMP W8, W9
	0x03AFFAF8 B.LT 0x3AFFF74
	0x03AFFAFC LDR V0, [X19 + 0x4D8]
	0x03AFFB00 FCMP S0, 0x0
	0x03AFFB04 B.LE 0x3AFFB64
	0x03AFFB08 ADRP X8, 0x5F4000
	0x03AFFB0C LDR X8, [X8 + 0x5A8]
	0x03AFFB10 LDR V8, [X19 + 0x4C8]
	0x03AFFB14 LDR V9, [X19 + 0x4D0]
	0x03AFFB18 LDR X0, [X8]
	0x03AFFB1C LDR W8, [X0 + 0xE0]
	0x03AFFB20 CBNZ W8, 0x3AFFB28
	0x03AFFB24 BL 0x1C16DFC
	0x03AFFB28 LDR V2, [X31 + 0x10]
	0x03AFFB2C FSUB S0, S8, S9
	0x03AFFB30 FABS S1, S0
	0x03AFFB34 FCMP S1, S2
	0x03AFFB38 B.LE 0x3AFFB64
	0x03AFFB3C LDRB W8, [X19 + 0x2C4]
	0x03AFFB40 CBNZ W8, 0x3AFFB64
	0x03AFFB44 LDRB W8, [X19 + 0x33C]
	0x03AFFB48 CBNZ W8, 0x3AFFB64
	0x03AFFB4C LDR V1, [X19 + 0x4C4]
	0x03AFFB50 LDR V2, [X19 + 0x4D8]
	0x03AFFB54 FSUB S1, S1, S0
	0x03AFFB58 FADD S0, S0, S2
	0x03AFFB5C STR S1, [X19 + 0x4C4]
	0x03AFFB60 STR S0, [X19 + 0x4D8]
	0x03AFFB64 LDR V1, [X19 + 0x4D8]
	0x03AFFB68 LDR V2, [X19 + 0x4CC]
	0x03AFFB6C LDR V3, [X19 + 0x4C4]
	0x03AFFB70 LDR V0, [X19 + 0x4C8]
	0x03AFFB74 LDR W8, [X19 + 0x494]
	0x03AFFB78 LDR V8, [X19 + 0x640]
	0x03AFFB7C FSUB S2, S2, S1
	0x03AFFB80 FCMP S3, S2
	0x03AFFB84 FCSEL S3, S3, S2, MI
	0x03AFFB88 STR W8, [X19 + 0x498]
	0x03AFFB8C STR S3, [X19 + 0x4C4]
	0x03AFFB90 STR W31, [X19 + 0x4AC]
	0x03AFFB94 TBZ X22, 0x0, 0x3AFFBB4
	0x03AFFB98 LDR V0, [X19 + 0x4B8]
	0x03AFFB9C FSUB S0, S0, S3
	0x03AFFBA0 STR S0, [X31 + 0x28]
	0x03AFFBA4 B 0x3AFFBCC
	0x03AFFBA8 STR W31, [X31 + 0x1C]
	0x03AFFBAC STR W31, [X31 + 0x24]
	0x03AFFBB0 B 0x3AFFD7C
	0x03AFFBB4 FSUB S0, S0, S1
	0x03AFFBB8 LDR V1, [X31 + 0x28]
	0x03AFFBBC FSUB S0, S0, S2
	0x03AFFBC0 FCMP S1, S0
	0x03AFFBC4 FCSEL S1, S1, S0, GT
	0x03AFFBC8 STR S1, [X31 + 0x28]
	0x03AFFBCC SUB W3, W8, 0x1
	0x03AFFBD0 ADD X1, X31, 0x4C8
	0x03AFFBD4 MOV X0, X19
	0x03AFFBD8 MOV W2, W23
	0x03AFFBDC BL 0x3B05DB4
	0x03AFFBE0 LDR W9, [X19 + 0x4A8]
	0x03AFFBE4 LDR X8, [X19 + 0x488]
	0x03AFFBE8 ADD W9, W9, 0x1
	0x03AFFBEC STR W9, [X19 + 0x4A8]
	0x03AFFBF0 CBZ X8, 0x3AFFD98
	0x03AFFBF4 LDRSW X9, [X19 + 0x494]
	0x03AFFBF8 LDR W10, [X8 + 0x18]
	0x03AFFBFC CMP W9, W10
	0x03AFFC00 B.CS 0x3AFFFE0
	0x03AFFC04 ADRP X10, 0xFFFFFFFFFCFEB000
	0x03AFFC08 LDR V0, [X19 + 0x2C0]
	0x03AFFC0C LDR V1, [X10 + 0x214]
	0x03AFFC10 NOP
	0x03AFFC14 MADD X8, X9, X29, X8
	0x03AFFC18 LDR V9, [X8 + 0x154]
	0x03AFFC1C FCMP S0, S1
	0x03AFFC20 B.NE 0x3AFFCB0
	0x03AFFC24 LDR V1, [X19 + 0x2BC]
	0x03AFFC28 LDR V3, [X31 + 0x18]
	0x03AFFC2C LDR V0, [X19 + 0x4CC]
	0x03AFFC30 LDR V2, [X19 + 0x2B8]
	0x03AFFC34 MOV W8, W31
	0x03AFFC38 FADD S1, S3, S1
	0x03AFFC3C LDR V3, [X31 + 0x14]
	0x03AFFC40 FSUB S0, S13, S0
	0x03AFFC44 FADD S0, S9, S0
	0x03AFFC48 FMUL S1, S3, S1
	0x03AFFC4C FADD S1, S0, S1
	0x03AFFC50 LDR V0, [X31 + 0x40]
	0x03AFFC54 FMUL S0, S0, S2
	0x03AFFC58 B 0x3AFFCC0
	0x03AFFC5C MOVZ W8, 0x2D
	0x03AFFC60 STR W31, [X31 + 0x3C]
	0x03AFFC64 STR W10, [X31 + 0xBB8]
	0x03AFFC68 STR W8, [X31 + 0xBBC]
	0x03AFFC6C SUB W23, W23, 0x1
	0x03AFFC70 STR W10, [X28 + 0x1E8]
	0x03AFFC74 B 0x3AFFD88
	0x03AFFC78 LDR X8, [X19 + 0x478]
	0x03AFFC7C CBZ X8, 0x3AFFD98
	0x03AFFC80 LDR W23, [X8 + 0x18]
	0x03AFFC84 MOVZ W24, 0x3
	0x03AFFC88 B 0x3AFF56C
	0x03AFFC8C SUB W9, W9, 0x1
	0x03AFFC90 CMP W9, W10
	0x03AFFC94 B.CS 0x3AFFFE0
	0x03AFFC98 LDR X10, [X19 + 0x100]
	0x03AFFC9C CBZ X10, 0x3AFFD98
	0x03AFFCA0 SMADDL X8, X9, X29, X8
	0x03AFFCA4 LDR V11, [X8 + 0x60]
	0x03AFFCA8 ADD X0, X10, 0x50
	0x03AFFCAC B 0x3AFEB30
	0x03AFFCB0 LDR V1, [X19 + 0x2B8]
	0x03AFFCB4 LDR V2, [X31 + 0x40]
	0x03AFFCB8 MOVZ W8, 0x1
	0x03AFFCBC FMUL S1, S2, S1
	0x03AFFCC0 LDR V2, [X19 + 0x4D8]
	0x03AFFCC4 FADD S0, S0, S1
	0x03AFFCC8 STRB W8, [X19 + 0x2C4]
	0x03AFFCCC ADRP X21, 0x659000
	0x03AFFCD0 FADD S0, S2, S0
	0x03AFFCD4 STR S0, [X19 + 0x4D8]
	0x03AFFCD8 LDR X21, [X21 + 0x3E8]
	0x03AFFCDC LDR X0, [X21]
	0x03AFFCE0 LDR W8, [X0 + 0xE0]
	0x03AFFCE4 CBNZ W8, 0x3AFFCF0
	0x03AFFCE8 BL 0x1C16DFC
	0x03AFFCEC LDR X0, [X21]
	0x03AFFCF0 LDR V1, [X31 + 0x54]
	0x03AFFCF4 LDR X8, [X0 + 0xB8]
	0x03AFFCF8 LDR V0, [X19 + 0x40C]
	0x03AFFCFC STR W31, [X31 + 0x3C]
	0x03AFFD00 FADD S1, S1, S8
	0x03AFFD04 STR S1, [X31 + 0x54]
	0x03AFFD08 LDR V1, [X8 + 0x15A8]
	0x03AFFD0C FADD S0, S0, S13
	0x03AFFD10 STR S0, [X19 + 0x640]
	0x03AFFD14 MOVZ W8, 0x1
	0x03AFFD18 UNIMPLEMENTED
	0x03AFFD1C STR S9, [X19 + 0x4D0]
	0x03AFFD20 STR D0, [X19 + 0x4C8]
	0x03AFFD24 STR W8, [X31 + 0x24]
	0x03AFFD28 B 0x3AFFD88
	0x03AFFD2C LDR W8, [X31 + 0x24]
	0x03AFFD30 ORN W8, W8, W24, 0x0
	0x03AFFD34 TBZ X8, 0x0, 0x3AFFD4C
	0x03AFFD38 LDR W3, [X19 + 0x494]
	0x03AFFD3C ADD X1, X31, 0x840
	0x03AFFD40 MOV X0, X19
	0x03AFFD44 MOV W2, W23
	0x03AFFD48 BL 0x3B05DB4
	0x03AFFD4C MOVZ W8, 0x1
	0x03AFFD50 STR W31, [X31 + 0x24]
	0x03AFFD54 STR W8, [X31 + 0x1C]
	0x03AFFD58 B 0x3AFFD7C
	0x03AFFD5C ADD X1, X31, 0x840
	0x03AFFD60 MOV X0, X19
	0x03AFFD64 MOV W2, W23
	0x03AFFD68 BL 0x3B05DB4
	0x03AFFD6C MOVN W8, 0x0
	0x03AFFD70 STR W31, [X31 + 0x1C]
	0x03AFFD74 STR W31, [X31 + 0x24]
	0x03AFFD78 STR W8, [X31 + 0x150]
	0x03AFFD7C LDR W8, [X28 + 0x1E8]
	0x03AFFD80 ADD W8, W8, 0x1
	0x03AFFD84 STR W8, [X28 + 0x1E8]
	0x03AFFD88 LDR X1, [X19 + 0x478]
	0x03AFFD8C ADD W23, W23, 0x1
	0x03AFFD90 MOV V15.16B, V14.16B
	0x03AFFD94 CBNZ X1, 0x3AFE5BC
	0x03AFFD98 BL 0x1C16F20
	0x03AFFD9C LDR V0, [X19 + 0x23C]
	0x03AFFDA0 LDR V1, [X19 + 0x240]
	0x03AFFDA4 ADRP X8, 0xFFFFFFFFFCFEB000
	0x03AFFDA8 LDR V2, [X8 + 0xD0]
	0x03AFFDAC FSUB S1, S0, S1
	0x03AFFDB0 FCMP S1, S2
	0x03AFFDB4 B.LE 0x3AFFE90
	0x03AFFDB8 LDR W8, [X31 + 0xC]
	0x03AFFDBC TBZ X8, 0x0, 0x3AFFE90
	0x03AFFDC0 LDR V1, [X20]
	0x03AFFDC4 LDR V2, [X19 + 0x254]
	0x03AFFDC8 FCMP S1, S2
	0x03AFFDCC B.PL 0x3AFFE90
	0x03AFFDD0 LDR W8, [X19 + 0x244]
	0x03AFFDD4 LDR W9, [X19 + 0x248]
	0x03AFFDD8 CMP W8, W9
	0x03AFFDDC B.GE 0x3AFFE90
	0x03AFFDE0 LDR V2, [X19 + 0x2D0]
	0x03AFFDE4 LDR V3, [X19 + 0x2D4]
	0x03AFFDE8 MOVZ W8, 0x42C80000
	0x03AFFDEC FMOV S4, W8
	0x03AFFDF0 FDIV S2, S2, S4
	0x03AFFDF4 FCMP S3, S2
	0x03AFFDF8 B.PL 0x3AFFE04
	0x03AFFDFC STR W31, [X19 + 0x2D4]
	0x03AFFE00 LDR V1, [X20]
	0x03AFFE04 STR S1, [X19 + 0x240]
	0x03AFFE08 LDR V1, [X20]
	0x03AFFE0C ADRP X8, 0xFFFFFFFFFCFEB000
	0x03AFFE10 LDR V2, [X8 + 0x200]
	0x03AFFE14 FMOV S3, 0.5
	0x03AFFE18 FSUB S0, S0, S1
	0x03AFFE1C FMUL S0, S0, S3
	0x03AFFE20 FMAXNM S0, S0, S2
	0x03AFFE24 FMOV S2, 20
	0x03AFFE28 MOVZ W8, 0x7F800000
	0x03AFFE2C FADD S0, S1, S0
	0x03AFFE30 FMOV S1, W8
	0x03AFFE34 ADRP X8, 0xFFFFFFFFFCFEB000
	0x03AFFE38 STR S0, [X20]
	0x03AFFE3C FMUL S0, S0, S2
	0x03AFFE40 FADD S0, S0, S3
	0x03AFFE44 LDR V3, [X8 + 0x420]
	0x03AFFE48 FCMP S0, S1
	0x03AFFE4C LDR V1, [X19 + 0x254]
	0x03AFFE50 FCVTZS W8, S0
	0x03AFFE54 SCVTF S0, W8
	0x03AFFE58 FDIV S0, S0, S2
	0x03AFFE5C FCSEL S0, S3, S0, EQ
	0x03AFFE60 FCMP S0, S1
	0x03AFFE64 FCSEL S0, S0, S1, MI
	0x03AFFE68 STR S0, [X20]
	0x03AFFE6C ADRP X19, 0x8DA000
	0x03AFFE70 LDRB W8, [X19 + 0x78F]
	0x03AFFE74 CBNZ W8, 0x3AFE268
	0x03AFFE78 ADRP X0, 0x5FC000
	0x03AFFE7C LDR X0, [X0 + 0xF08]
	0x03AFFE80 BL 0x1C16CF4
	0x03AFFE84 MOVZ W8, 0x1
	0x03AFFE88 STRB W8, [X19 + 0x78F]
	0x03AFFE8C B 0x3AFE268
	0x03AFFE90 LDR V0, [X19 + 0x340]
	0x03AFFE94 LDR V2, [X19 + 0x348]
	0x03AFFE98 LDR V3, [X19 + 0x344]
	0x03AFFE9C LDR V4, [X19 + 0x34C]
	0x03AFFEA0 FMOV S1, W31
	0x03AFFEA4 FMAXNM S0, S0, S1
	0x03AFFEA8 FMAXNM S2, S2, S1
	0x03AFFEAC FMAXNM S3, S3, S1
	0x03AFFEB0 FMAXNM S1, S4, S1
	0x03AFFEB4 LDR V4, [X31 + 0x54]
	0x03AFFEB8 LDR V5, [X31 + 0x28]
	0x03AFFEBC MOVZ W8, 0x1
	0x03AFFEC0 STRB W8, [X19 + 0x24C]
	0x03AFFEC4 MOVZ W8, 0x42C80000
	0x03AFFEC8 FADD S0, S4, S0
	0x03AFFECC FADD S3, S5, S3
	0x03AFFED0 FMOV S5, W8
	0x03AFFED4 FADD S0, S0, S2
	0x03AFFED8 FMOV S4, 1
	0x03AFFEDC ADRP X8, 0xFFFFFFFFFCFEA000
	0x03AFFEE0 FADD S1, S3, S1
	0x03AFFEE4 FMUL S0, S0, S5
	0x03AFFEE8 MOVZ W9, 0x7F800000
	0x03AFFEEC LDR V3, [X8 + 0xF7C]
	0x03AFFEF0 FMUL S1, S1, S5
	0x03AFFEF4 FADD S0, S0, S4
	0x03AFFEF8 FMOV S2, W9
	0x03AFFEFC FADD S1, S1, S4
	0x03AFFF00 FCVTZS W8, S0
	0x03AFFF04 FCMP S0, S2
	0x03AFFF08 FCVTZS W9, S1
	0x03AFFF0C SCVTF S0, W8
	0x03AFFF10 SCVTF S4, W9
	0x03AFFF14 FDIV S0, S0, S5
	0x03AFFF18 FDIV S4, S4, S5
	0x03AFFF1C FCSEL S0, S3, S0, EQ
	0x03AFFF20 FCMP S1, S2
	0x03AFFF24 FCSEL S1, S3, S4, EQ
	0x03AFFF28 STRB W31, [X19 + 0x3F5]
	0x03AFFF2C B 0x3AFE27C
	0x03AFFF30 FCMP S1, 0x0
	0x03AFFF34 MOV V2.16B, V12.16B
	0x03AFFF38 B.LE 0x3AFFF48
	0x03AFFF3C FMOV S2, 1
	0x03AFFF40 FSUB S2, S2, S1
	0x03AFFF44 FDIV S2, S12, S2
	0x03AFFF48 ADRP X8, 0xFFFFFFFFFCFEB000
	0x03AFFF4C LDR V3, [X8 + 0x2F0]
	0x03AFFF50 FADD S3, S8, S3
	0x03AFFF54 FMUL S3, S9, S3
	0x03AFFF58 FSUB S3, S12, S3
	0x03AFFF5C FDIV S2, S3, S2
	0x03AFFF60 FADD S1, S1, S2
	0x03AFFF64 FCMP S1, S0
	0x03AFFF68 FCSEL S0, S1, S0, MI
	0x03AFFF6C STR S0, [X19 + 0x2D4]
	0x03AFFF70 B 0x3AFFE6C
	0x03AFFF74 STR S0, [X19 + 0x23C]
	0x03AFFF78 LDR V0, [X19 + 0x240]
	0x03AFFF7C LDR V1, [X20]
	0x03AFFF80 ADRP X8, 0xFFFFFFFFFCFEB000
	0x03AFFF84 LDR V2, [X8 + 0x200]
	0x03AFFF88 FMOV S3, 0.5
	0x03AFFF8C FSUB S0, S1, S0
	0x03AFFF90 FMUL S0, S0, S3
	0x03AFFF94 FMAXNM S0, S0, S2
	0x03AFFF98 FMOV S2, 20
	0x03AFFF9C MOVZ W8, 0x7F800000
	0x03AFFFA0 FSUB S0, S1, S0
	0x03AFFFA4 FMOV S1, W8
	0x03AFFFA8 ADRP X8, 0xFFFFFFFFFCFEB000
	0x03AFFFAC STR S0, [X20]
	0x03AFFFB0 FMUL S0, S0, S2
	0x03AFFFB4 FADD S0, S0, S3
	0x03AFFFB8 LDR V3, [X8 + 0x420]
	0x03AFFFBC FCMP S0, S1
	0x03AFFFC0 LDR V1, [X19 + 0x250]
	0x03AFFFC4 FCVTZS W8, S0
	0x03AFFFC8 SCVTF S0, W8
	0x03AFFFCC FDIV S0, S0, S2
	0x03AFFFD0 FCSEL S0, S3, S0, EQ
	0x03AFFFD4 FCMP S0, S1
	0x03AFFFD8 FCSEL S0, S0, S1, GT
	0x03AFFFDC B 0x3AFFE68
	0x03AFFFE0 BL 0x1C16F28
	0x03AFFFE4 STP D15, D14, [X31 - 0xA0]!
	0x03AFFFE8 STP D13, D12, [X31 + 0x10]
	0x03AFFFEC STP D11, D10, [X31 + 0x20]
	0x03AFFFF0 STP D9, D8, [X31 + 0x30]
	0x03AFFFF4 STP X29, X30, [X31 + 0x40]
	0x03AFFFF8 STP X28, X27, [X31 + 0x50]
	0x03AFFFFC STP X26, X25, [X31 + 0x60]
	0x03B00000 STP X24, X23, [X31 + 0x70]
	0x03B00004 STP X22, X21, [X31 + 0x80]
	0x03B00008 STP X20, X19, [X31 + 0x90]
	0x03B0000C SUB X31, X31, 0x320
	0x03B00010 ADRP X19, 0x8E2000
	0x03B00014 ADRP X23, 0x658000
	0x03B00018 LDRB W8, [X19 + 0x66A]
	0x03B0001C LDR X23, [X23 + 0x3E8]
	0x03B00020 MOV X24, X3
	0x03B00024 MOV W20, W2
	0x03B00028 MOV X22, X1
	0x03B0002C MOV X21, X0
	0x03B00030 TBNZ X8, 0x0, 0x3B001E0
	0x03B00034 ADRP X0, 0x5F3000
	0x03B00038 LDR X0, [X0 + 0xA28]
	0x03B0003C BL 0x1C16CF4
	0x03B00040 ADRP X0, 0x659000
	0x03B00044 LDR X0, [X0 + 0x228]
	0x03B00048 BL 0x1C16CF4
	0x03B0004C ADRP X0, 0x5F3000
	0x03B00050 LDR X0, [X0 + 0x598]
	0x03B00054 BL 0x1C16CF4
	0x03B00058 ADRP X0, 0x64D000
	0x03B0005C LDR X0, [X0 + 0xAD8]
	0x03B00060 BL 0x1C16CF4
	0x03B00064 ADRP X0, 0x659000
	0x03B00068 LDR X0, [X0 + 0x230]
	0x03B0006C BL 0x1C16CF4
	0x03B00070 ADRP X0, 0x658000
	0x03B00074 LDR X0, [X0 + 0x5C0]
	0x03B00078 BL 0x1C16CF4
	0x03B0007C ADRP X0, 0x659000
	0x03B00080 LDR X0, [X0 + 0x238]
	0x03B00084 BL 0x1C16CF4
	0x03B00088 ADRP X0, 0x658000
	0x03B0008C LDR X0, [X0 + 0x350]
	0x03B00090 BL 0x1C16CF4
	0x03B00094 ADRP X0, 0x659000
	0x03B00098 LDR X0, [X0 + 0x240]
	0x03B0009C BL 0x1C16CF4
	0x03B000A0 ADRP X0, 0x658000
	0x03B000A4 LDR X0, [X0 + 0x368]
	0x03B000A8 BL 0x1C16CF4
	0x03B000AC ADRP X0, 0x659000
	0x03B000B0 LDR X0, [X0 + 0x248]
	0x03B000B4 BL 0x1C16CF4
	0x03B000B8 ADRP X0, 0x659000
	0x03B000BC LDR X0, [X0 + 0x250]
	0x03B000C0 BL 0x1C16CF4
	0x03B000C4 ADRP X0, 0x659000
	0x03B000C8 LDR X0, [X0 + 0x258]
	0x03B000CC BL 0x1C16CF4
	0x03B000D0 ADRP X0, 0x659000
	0x03B000D4 LDR X0, [X0 + 0x260]
	0x03B000D8 BL 0x1C16CF4
	0x03B000DC ADRP X0, 0x659000
	0x03B000E0 LDR X0, [X0 + 0x268]
	0x03B000E4 BL 0x1C16CF4
	0x03B000E8 ADRP X0, 0x659000
	0x03B000EC LDR X0, [X0 + 0x270]
	0x03B000F0 BL 0x1C16CF4
	0x03B000F4 ADRP X0, 0x659000
	0x03B000F8 LDR X0, [X0 + 0x278]
	0x03B000FC BL 0x1C16CF4
	0x03B00100 ADRP X0, 0x659000
	0x03B00104 LDR X0, [X0 + 0x280]
	0x03B00108 BL 0x1C16CF4
	0x03B0010C ADRP X0, 0x659000
	0x03B00110 LDR X0, [X0 + 0x288]
	0x03B00114 BL 0x1C16CF4
	0x03B00118 ADRP X0, 0x659000
	0x03B0011C LDR X0, [X0 + 0x290]
	0x03B00120 BL 0x1C16CF4
	0x03B00124 ADRP X0, 0x659000
	0x03B00128 LDR X0, [X0 + 0x298]
	0x03B0012C BL 0x1C16CF4
	0x03B00130 ADRP X0, 0x659000
	0x03B00134 LDR X0, [X0 + 0x2A0]
	0x03B00138 BL 0x1C16CF4
	0x03B0013C ADRP X0, 0x659000
	0x03B00140 LDR X0, [X0 + 0x2A8]
	0x03B00144 BL 0x1C16CF4
	0x03B00148 ADRP X0, 0x659000
	0x03B0014C LDR X0, [X0 + 0x2B0]
	0x03B00150 BL 0x1C16CF4
	0x03B00154 ADRP X0, 0x659000
	0x03B00158 LDR X0, [X0 + 0x2B8]
	0x03B0015C BL 0x1C16CF4
	0x03B00160 ADRP X0, 0x659000
	0x03B00164 LDR X0, [X0 + 0x2C0]
	0x03B00168 BL 0x1C16CF4
	0x03B0016C ADRP X0, 0x659000
	0x03B00170 LDR X0, [X0 + 0x2C8]
	0x03B00174 BL 0x1C16CF4
	0x03B00178 ADRP X0, 0x659000
	0x03B0017C LDR X0, [X0 + 0x2D0]
	0x03B00180 BL 0x1C16CF4
	0x03B00184 ADRP X0, 0x659000
	0x03B00188 LDR X0, [X0 + 0x2D8]
	0x03B0018C BL 0x1C16CF4
	0x03B00190 ADRP X0, 0x659000
	0x03B00194 LDR X0, [X0 + 0x2E0]
	0x03B00198 BL 0x1C16CF4
	0x03B0019C ADRP X0, 0x658000
	0x03B001A0 LDR X0, [X0 + 0x3E8]
	0x03B001A4 BL 0x1C16CF4
	0x03B001A8 ADRP X0, 0x659000
	0x03B001AC LDR X0, [X0 + 0x2E8]
	0x03B001B0 BL 0x1C16CF4
	0x03B001B4 ADRP X0, 0x659000
	0x03B001B8 LDR X0, [X0 + 0x2F0]
	0x03B001BC BL 0x1C16CF4
	0x03B001C0 ADRP X0, 0x659000
	0x03B001C4 LDR X0, [X0 + 0x2F8]
	0x03B001C8 BL 0x1C16CF4
	0x03B001CC ADRP X0, 0x659000
	0x03B001D0 LDR X0, [X0 + 0x300]
	0x03B001D4 BL 0x1C16CF4
	0x03B001D8 MOVZ W8, 0x1
	0x03B001DC STRB W8, [X19 + 0x66A]
	0x03B001E0 LDR X0, [X23]
	0x03B001E4 MOVI V0.2D, 0x0
	0x03B001E8 STR X31, [X31 + 0x318]
	0x03B001EC STR X31, [X31 + 0x310]
	0x03B001F0 STR X31, [X31 + 0x300]
	0x03B001F4 STR X31, [X31 + 0x2F8]
	0x03B001F8 STR W31, [X31 + 0x308]
	0x03B001FC STR X31, [X31 + 0x2F0]
	0x03B00200 STR X31, [X31 + 0x2E8]
	0x03B00204 STR X31, [X31 + 0x2E0]
	0x03B00208 STR X31, [X31 + 0x2D8]
	0x03B0020C STR W31, [X31 + 0x2D4]
	0x03B00210 STP V0, V0, [X31 + 0x2B0]
	0x03B00214 STP V0, V0, [X31 + 0x290]
	0x03B00218 STP V0, V0, [X31 + 0x270]
	0x03B0021C STR X31, [X31 + 0x268]
	0x03B00220 LDR W8, [X0 + 0xE0]
	0x03B00224 CBNZ W8, 0x3B00230
	0x03B00228 BL 0x1C16DFC
	0x03B0022C LDR X0, [X23]
	0x03B00230 LDR X8, [X0 + 0xB8]
	0x03B00234 LDR X8, [X8 + 0x88]
	0x03B00238 CBZ X8, 0x3B05924
	0x03B0023C LDR W9, [X8 + 0x18]
	0x03B00240 CBZ W9, 0x3B058BC
	0x03B00244 CMP W9, 0x1
	0x03B00248 STP X31, X31, [X8 + 0x20]
	0x03B0024C STR X31, [X8 + 0x30]
	0x03B00250 B.EQ 0x3B058BC
	0x03B00254 CMP W9, 0x2
	0x03B00258 STR W31, [X8 + 0x38]
	0x03B0025C B.LS 0x3B058BC
	0x03B00260 CMP W9, 0x3
	0x03B00264 STR W31, [X8 + 0x50]
	0x03B00268 B.EQ 0x3B058BC
	0x03B0026C CMP W9, 0x4
	0x03B00270 STR W31, [X8 + 0x68]
	0x03B00274 B.LS 0x3B058BC
	0x03B00278 STR W31, [X8 + 0x80]
	0x03B0027C STR W20, [X24]
	0x03B00280 CBZ X22, 0x3B05924
	0x03B00284 LDR W8, [X22 + 0x18]
	0x03B00288 CMP W8, W20
	0x03B0028C B.LE 0x3B05A00
	0x03B00290 STP X24, X21, [X31 + 0x18]
	0x03B00294 MOV W24, W31
	0x03B00298 MOV W23, W31
	0x03B0029C MOV W26, W31
	0x03B002A0 MOV W19, W31
	0x03B002A4 MOV X25, X31
	0x03B002A8 MOV W27, W20
	0x03B002AC MOVZ W28, 0xC
	0x03B002B0 STR W31, [X31 + 0x2C]
	0x03B002B4 ADD X29, X27, X25
	0x03B002B8 CMP W29, W8
	0x03B002BC B.CS 0x3B058BC
	0x03B002C0 SMADDL X21, X29, X28, X22
	0x03B002C4 LDR W8, [X21 + 0x20]!
	0x03B002C8 CBZ W8, 0x3B05A00
	0x03B002CC LDR W8, [X0 + 0xE0]
	0x03B002D0 CBNZ W8, 0x3B002E4
	0x03B002D4 BL 0x1C16DFC
	0x03B002D8 ADRP X8, 0x658000
	0x03B002DC LDR X8, [X8 + 0x3E8]
	0x03B002E0 LDR X0, [X8]
	0x03B002E4 LDR X8, [X0 + 0xB8]
	0x03B002E8 LDR X9, [X8 + 0x80]
	0x03B002EC CBZ X9, 0x3B05924
	0x03B002F0 LDRSW X10, [X9 + 0x18]
	0x03B002F4 CMP X25, X10
	0x03B002F8 B.GE 0x3B05A00
	0x03B002FC LDR W10, [X22 + 0x18]
	0x03B00300 CMP W29, W10
	0x03B00304 B.CS 0x3B058BC
	0x03B00308 LDR W29, [X21]
	0x03B0030C CMP W29, 0x3C
	0x03B00310 B.EQ 0x3B05A00
	0x03B00314 CMP W29, 0x3E
	0x03B00318 B.EQ 0x3B008CC
	0x03B0031C LDR W8, [X0 + 0xE0]
	0x03B00320 CBNZ W8, 0x3B00334
	0x03B00324 BL 0x1C16DFC
	0x03B00328 ADRP X8, 0x658000
	0x03B0032C LDR X8, [X8 + 0x3E8]
	0x03B00330 LDR X0, [X8]
	0x03B00334 LDR X8, [X0 + 0xB8]
	0x03B00338 LDR X8, [X8 + 0x80]
	0x03B0033C CBZ X8, 0x3B05924
	0x03B00340 LDR W9, [X8 + 0x18]
	0x03B00344 CMP X25, X9
	0x03B00348 B.CS 0x3B058BC
	0x03B0034C AND W9, W19, 0xFF
	0x03B00350 ADD X8, X8, X25, 0x1, LSL
	0x03B00354 CMP W9, 0x1
	0x03B00358 STRH W29, [X8 + 0x20]
	0x03B0035C B.NE 0x3B00720
	0x03B00360 CMP W23, 0x4
	0x03B00364 MOVZ W19, 0x1
	0x03B00368 B.HI 0x3B00720
	0x03B0036C ADRP X11, 0xFFFFFFFFFD097000
	0x03B00370 MOV W8, W23
	0x03B00374 ADD X11, X11, 0xC8E
	0x03B00378 ADR X9, 0x10
	0x03B0037C LDRB W10, [X11, X8, LSL]
	0x03B00380 ADD X9, X9, X10, 0x2, LSL
	0x03B00384 BR X9
	0x03B00388 CMP W29, 0x2E
	0x03B0038C B.HI 0x3B00670
	0x03B00390 MOV W8, W29
	0x03B00394 MOVZ W9, 0x1
	0x03B00398 LSLV X8, X9, X8
	0x03B0039C MOVZ X9, 0x6800
	0x03B003A0 ANDS X31, X8, X9, 0x0
	0x03B003A4 B.EQ 0x3B00670
	0x03B003A8 LDR W8, [X0 + 0xE0]
	0x03B003AC CBNZ W8, 0x3B003C0
	0x03B003B0 BL 0x1C16DFC
	0x03B003B4 ADRP X8, 0x658000
	0x03B003B8 LDR X8, [X8 + 0x3E8]
	0x03B003BC LDR X0, [X8]
	0x03B003C0 LDR X8, [X0 + 0xB8]
	0x03B003C4 LDR X8, [X8 + 0x88]
	0x03B003C8 CBZ X8, 0x3B05924
	0x03B003CC LDR W9, [X8 + 0x18]
	0x03B003D0 CMP W26, W9
	0x03B003D4 B.CS 0x3B058BC
	0x03B003D8 MOVZ W9, 0x18
	0x03B003DC SMADDL X8, X26, X9, X8
	0x03B003E0 LDR W9, [X8 + 0x30]
	0x03B003E4 MOVZ W23, 0x1
	0x03B003E8 STR W31, [X31 + 0x2C]
	0x03B003EC ADD W9, W9, 0x1
	0x03B003F0 STP W23, W25, [X8 + 0x28]
	0x03B003F4 STR W9, [X8 + 0x30]
	0x03B003F8 MOVZ W19, 0x1
	0x03B003FC B 0x3B00804
	0x03B00400 CMP W29, 0x22
	0x03B00404 B.NE 0x3B004EC
	0x03B00408 LDR W8, [X0 + 0xE0]
	0x03B0040C CBNZ W8, 0x3B00420
	0x03B00410 BL 0x1C16DFC
	0x03B00414 ADRP X8, 0x658000
	0x03B00418 LDR X8, [X8 + 0x3E8]
	0x03B0041C LDR X0, [X8]
	0x03B00420 LDR X8, [X0 + 0xB8]
	0x03B00424 LDR X8, [X8 + 0x88]
	0x03B00428 CBZ X8, 0x3B05924
	0x03B0042C LDR W9, [X8 + 0x18]
	0x03B00430 ADD W26, W26, 0x1
	0x03B00434 CMP W26, W9
	0x03B00438 B.CS 0x3B058BC
	0x03B0043C MOVZ W9, 0x18
	0x03B00440 SMADDL X8, X26, X9, X8
	0x03B00444 MOV W23, W31
	0x03B00448 STR W31, [X31 + 0x2C]
	0x03B0044C STP X31, X31, [X8 + 0x20]
	0x03B00450 STR X31, [X8 + 0x30]
	0x03B00454 B 0x3B00800
	0x03B00458 CMP W29, 0x64
	0x03B0045C B.GT 0x3B0054C
	0x03B00460 CMP W29, 0x20
	0x03B00464 B.EQ 0x3B005DC
	0x03B00468 CMP W29, 0x25
	0x03B0046C B.NE 0x3B006D4
	0x03B00470 LDR W8, [X0 + 0xE0]
	0x03B00474 CBNZ W8, 0x3B00488
	0x03B00478 BL 0x1C16DFC
	0x03B0047C ADRP X8, 0x658000
	0x03B00480 LDR X8, [X8 + 0x3E8]
	0x03B00484 LDR X0, [X8]
	0x03B00488 LDR X8, [X0 + 0xB8]
	0x03B0048C LDR X8, [X8 + 0x88]
	0x03B00490 CBZ X8, 0x3B05924
	0x03B00494 LDR W9, [X8 + 0x18]
	0x03B00498 CMP W26, W9
	0x03B0049C B.CS 0x3B058BC
	0x03B004A0 MOVZ W19, 0x2
	0x03B004A4 B 0x3B00610
	0x03B004A8 CMP W29, 0x20
	0x03B004AC B.NE 0x3B00594
	0x03B004B0 LDR W8, [X0 + 0xE0]
	0x03B004B4 CBNZ W8, 0x3B004C8
	0x03B004B8 BL 0x1C16DFC
	0x03B004BC ADRP X8, 0x658000
	0x03B004C0 LDR X8, [X8 + 0x3E8]
	0x03B004C4 LDR X0, [X8]
	0x03B004C8 LDR X8, [X0 + 0xB8]
	0x03B004CC LDR X8, [X8 + 0x88]
	0x03B004D0 CBZ X8, 0x3B05924
	0x03B004D4 LDR W9, [X8 + 0x18]
	0x03B004D8 ADD W26, W26, 0x1
	0x03B004DC CMP W26, W9
	0x03B004E0 B.CS 0x3B058BC
	0x03B004E4 STR W31, [X31 + 0x2C]
	0x03B004E8 B 0x3B00654
	0x03B004EC LDR W8, [X0 + 0xE0]
	0x03B004F0 CBNZ W8, 0x3B00504
	0x03B004F4 BL 0x1C16DFC
	0x03B004F8 ADRP X8, 0x658000
	0x03B004FC LDR X8, [X8 + 0x3E8]
	0x03B00500 LDR X0, [X8]
	0x03B00504 LDR X8, [X0 + 0xB8]
	0x03B00508 LDR X8, [X8 + 0x88]
	0x03B0050C CBZ X8, 0x3B05924
	0x03B00510 LDR W9, [X8 + 0x18]
	0x03B00514 CMP W26, W9
	0x03B00518 B.CS 0x3B058BC
	0x03B0051C MOVZ W9, 0x18
	0x03B00520 SMADDL X8, X26, X9, X8
	0x03B00524 LDR W9, [X8 + 0x24]
	0x03B00528 LDR W10, [X8 + 0x30]
	0x03B0052C MOVZ W19, 0x1
	0x03B00530 MOVZ W23, 0x2
	0x03B00534 ADD W9, W9, W9, 0x5, LSL
	0x03B00538 ADD W10, W10, 0x1
	0x03B0053C EOR W9, W9, W29, 0x0
	0x03B00540 STR W10, [X8 + 0x30]
	0x03B00544 STR W9, [X8 + 0x24]
	0x03B00548 B 0x3B00720
	0x03B0054C CMP W29, 0x70
	0x03B00550 B.EQ 0x3B005DC
	0x03B00554 CMP W29, 0x65
	0x03B00558 B.NE 0x3B006D4
	0x03B0055C LDR W8, [X0 + 0xE0]
	0x03B00560 CBNZ W8, 0x3B00574
	0x03B00564 BL 0x1C16DFC
	0x03B00568 ADRP X8, 0x658000
	0x03B0056C LDR X8, [X8 + 0x3E8]
	0x03B00570 LDR X0, [X8]
	0x03B00574 LDR X8, [X0 + 0xB8]
	0x03B00578 LDR X8, [X8 + 0x88]
	0x03B0057C CBZ X8, 0x3B05924
	0x03B00580 LDR W9, [X8 + 0x18]
	0x03B00584 CMP W26, W9
	0x03B00588 B.CS 0x3B058BC
	0x03B0058C MOVZ W19, 0x1
	0x03B00590 B 0x3B00610
	0x03B00594 LDR W8, [X0 + 0xE0]
	0x03B00598 CBNZ W8, 0x3B005AC
	0x03B0059C BL 0x1C16DFC
	0x03B005A0 ADRP X8, 0x658000
	0x03B005A4 LDR X8, [X8 + 0x3E8]
	0x03B005A8 LDR X0, [X8]
	0x03B005AC LDR X8, [X0 + 0xB8]
	0x03B005B0 LDR X8, [X8 + 0x88]
	0x03B005B4 CBZ X8, 0x3B05924
	0x03B005B8 LDR W9, [X8 + 0x18]
	0x03B005BC CMP W26, W9
	0x03B005C0 B.CS 0x3B058BC
	0x03B005C4 MOVZ W9, 0x18
	0x03B005C8 SMADDL X8, X26, X9, X8
	0x03B005CC LDR W9, [X8 + 0x30]
	0x03B005D0 MOVZ W19, 0x1
	0x03B005D4 MOVZ W23, 0x4
	0x03B005D8 B 0x3B00718
	0x03B005DC LDR W8, [X0 + 0xE0]
	0x03B005E0 CBNZ W8, 0x3B005F4
	0x03B005E4 BL 0x1C16DFC
	0x03B005E8 ADRP X8, 0x658000
	0x03B005EC LDR X8, [X8 + 0x3E8]
	0x03B005F0 LDR X0, [X8]
	0x03B005F4 LDR X8, [X0 + 0xB8]
	0x03B005F8 LDR X8, [X8 + 0x88]
	0x03B005FC CBZ X8, 0x3B05924
	0x03B00600 LDR W9, [X8 + 0x18]
	0x03B00604 CMP W26, W9
	0x03B00608 B.CS 0x3B058BC
	0x03B0060C MOV W19, W31
	0x03B00610 MOVZ W9, 0x18
	0x03B00614 SMADDL X8, X26, X9, X8
	0x03B00618 STR W19, [X8 + 0x34]
	0x03B0061C LDR W8, [X0 + 0xE0]
	0x03B00620 CBNZ W8, 0x3B00634
	0x03B00624 BL 0x1C16DFC
	0x03B00628 ADRP X8, 0x658000
	0x03B0062C LDR X8, [X8 + 0x3E8]
	0x03B00630 LDR X0, [X8]
	0x03B00634 LDR X8, [X0 + 0xB8]
	0x03B00638 LDR X8, [X8 + 0x88]
	0x03B0063C CBZ X8, 0x3B05924
	0x03B00640 LDR W9, [X8 + 0x18]
	0x03B00644 ADD W26, W26, 0x1
	0x03B00648 STR W19, [X31 + 0x2C]
	0x03B0064C CMP W26, W9
	0x03B00650 B.CS 0x3B058BC
	0x03B00654 MOVZ W9, 0x18
	0x03B00658 SMADDL X8, X26, X9, X8
	0x03B0065C MOV W23, W31
	0x03B00660 STP X31, X31, [X8 + 0x20]
	0x03B00664 STR X31, [X8 + 0x30]
	0x03B00668 MOVZ W19, 0x2
	0x03B0066C B 0x3B00720
	0x03B00670 SUB W8, W29, 0x30
	0x03B00674 CMP W8, 0x9
	0x03B00678 B.LS 0x3B003A8
	0x03B0067C CMP W29, 0x22
	0x03B00680 B.EQ 0x3B0081C
	0x03B00684 CMP W29, 0x23
	0x03B00688 B.NE 0x3B00868
	0x03B0068C LDR W8, [X0 + 0xE0]
	0x03B00690 CBNZ W8, 0x3B006A4
	0x03B00694 BL 0x1C16DFC
	0x03B00698 ADRP X8, 0x658000
	0x03B0069C LDR X8, [X8 + 0x3E8]
	0x03B006A0 LDR X0, [X8]
	0x03B006A4 LDR X8, [X0 + 0xB8]
	0x03B006A8 LDR X8, [X8 + 0x88]
	0x03B006AC CBZ X8, 0x3B05924
	0x03B006B0 LDR W9, [X8 + 0x18]
	0x03B006B4 CMP W26, W9
	0x03B006B8 B.CS 0x3B058BC
	0x03B006BC MOVZ W9, 0x18
	0x03B006C0 SMADDL X8, X26, X9, X8
	0x03B006C4 LDR W9, [X8 + 0x30]
	0x03B006C8 STR W31, [X31 + 0x2C]
	0x03B006CC MOVZ W23, 0x4
	0x03B006D0 B 0x3B003EC
	0x03B006D4 LDR W8, [X0 + 0xE0]
	0x03B006D8 CBNZ W8, 0x3B006EC
	0x03B006DC BL 0x1C16DFC
	0x03B006E0 ADRP X8, 0x658000
	0x03B006E4 LDR X8, [X8 + 0x3E8]
	0x03B006E8 LDR X0, [X8]
	0x03B006EC LDR X8, [X0 + 0xB8]
	0x03B006F0 LDR X8, [X8 + 0x88]
	0x03B006F4 CBZ X8, 0x3B05924
	0x03B006F8 LDR W9, [X8 + 0x18]
	0x03B006FC CMP W26, W9
	0x03B00700 B.CS 0x3B058BC
	0x03B00704 MOVZ W9, 0x18
	0x03B00708 SMADDL X8, X26, X9, X8
	0x03B0070C LDR W9, [X8 + 0x30]
	0x03B00710 MOVZ W23, 0x1
	0x03B00714 MOVZ W19, 0x1
	0x03B00718 ADD W9, W9, 0x1
	0x03B0071C STR W9, [X8 + 0x30]
	0x03B00720 CMP W29, 0x3D
	0x03B00724 CSINC W19, W19, W31, NE
	0x03B00728 CMP W29, 0x20
	0x03B0072C B.NE 0x3B00794
	0x03B00730 ANDS W31, W19, 0xFF
	0x03B00734 B.NE 0x3B00794
	0x03B00738 TBNZ X24, 0x0, 0x3B05A00
	0x03B0073C LDR W8, [X0 + 0xE0]
	0x03B00740 CBNZ W8, 0x3B00754
	0x03B00744 BL 0x1C16DFC
	0x03B00748 ADRP X8, 0x658000
	0x03B0074C LDR X8, [X8 + 0x3E8]
	0x03B00750 LDR X0, [X8]
	0x03B00754 LDR X8, [X0 + 0xB8]
	0x03B00758 LDR X8, [X8 + 0x88]
	0x03B0075C CBZ X8, 0x3B05924
	0x03B00760 LDR W9, [X8 + 0x18]
	0x03B00764 ADD W26, W26, 0x1
	0x03B00768 CMP W26, W9
	0x03B0076C B.CS 0x3B058BC
	0x03B00770 MOVZ W9, 0x18
	0x03B00774 MOV W23, W31
	0x03B00778 SMADDL X8, X26, X9, X8
	0x03B0077C MOVZ W24, 0x1
	0x03B00780 STR W31, [X31 + 0x2C]
	0x03B00784 STP X31, X31, [X8 + 0x20]
	0x03B00788 STR X31, [X8 + 0x30]
	0x03B0078C MOV W19, W31
	0x03B00790 B 0x3B00804
	0x03B00794 AND W8, W19, 0xFF
	0x03B00798 CMP W8, 0x2
	0x03B0079C B.EQ 0x3B007F8
	0x03B007A0 CBNZ W8, 0x3B00804
	0x03B007A4 LDR W8, [X0 + 0xE0]
	0x03B007A8 CBNZ W8, 0x3B007BC
	0x03B007AC BL 0x1C16DFC
	0x03B007B0 ADRP X8, 0x658000
	0x03B007B4 LDR X8, [X8 + 0x3E8]
	0x03B007B8 LDR X0, [X8]
	0x03B007BC LDR X8, [X0 + 0xB8]
	0x03B007C0 LDR X8, [X8 + 0x88]
	0x03B007C4 CBZ X8, 0x3B05924
	0x03B007C8 LDR W9, [X8 + 0x18]
	0x03B007CC CMP W26, W9
	0x03B007D0 B.CS 0x3B058BC
	0x03B007D4 MOVZ W9, 0x18
	0x03B007D8 SMADDL X8, X26, X9, X8
	0x03B007DC LDR W9, [X8 + 0x20]
	0x03B007E0 MOV W19, W31
	0x03B007E4 UBFM W10, W9, 0x1D, 0x1C
	0x03B007E8 SUB W9, W10, W9
	0x03B007EC ADD W9, W9, W29
	0x03B007F0 STR W9, [X8 + 0x20]
	0x03B007F4 B 0x3B00804
	0x03B007F8 CMP W29, 0x20
	0x03B007FC B.EQ 0x3B0078C
	0x03B00800 MOVZ W19, 0x2
	0x03B00804 LDR W8, [X22 + 0x18]
	0x03B00808 ADD X25, X25, 0x1
	0x03B0080C ADD W9, W27, W25
	0x03B00810 CMP W9, W8
	0x03B00814 B.LT 0x3B002B4
	0x03B00818 B 0x3B05A00
	0x03B0081C LDR W8, [X0 + 0xE0]
	0x03B00820 CBNZ W8, 0x3B00834
	0x03B00824 BL 0x1C16DFC
	0x03B00828 ADRP X8, 0x658000
	0x03B0082C LDR X8, [X8 + 0x3E8]
	0x03B00830 LDR X0, [X8]
	0x03B00834 LDR X8, [X0 + 0xB8]
	0x03B00838 LDR X8, [X8 + 0x88]
	0x03B0083C CBZ X8, 0x3B05924
	0x03B00840 LDR W9, [X8 + 0x18]
	0x03B00844 CMP W26, W9
	0x03B00848 B.CS 0x3B058BC
	0x03B0084C MOVZ W9, 0x18
	0x03B00850 SMADDL X8, X26, X9, X8
	0x03B00854 MOVZ W23, 0x2
	0x03B00858 ADD W9, W25, 0x1
	0x03B0085C STR W31, [X31 + 0x2C]
	0x03B00860 STP W23, W9, [X8 + 0x28]
	0x03B00864 B 0x3B003F8
	0x03B00868 LDR W8, [X0 + 0xE0]
	0x03B0086C CBNZ W8, 0x3B00880
	0x03B00870 BL 0x1C16DFC
	0x03B00874 ADRP X8, 0x658000
	0x03B00878 LDR X8, [X8 + 0x3E8]
	0x03B0087C LDR X0, [X8]
	0x03B00880 LDR X8, [X0 + 0xB8]
	0x03B00884 LDR X8, [X8 + 0x88]
	0x03B00888 CBZ X8, 0x3B05924
	0x03B0088C LDR W9, [X8 + 0x18]
	0x03B00890 CMP W26, W9
	0x03B00894 B.CS 0x3B058BC
	0x03B00898 MOVZ W9, 0x18
	0x03B0089C SMADDL X8, X26, X9, X8
	0x03B008A0 LDR W9, [X8 + 0x24]
	0x03B008A4 LDR W10, [X8 + 0x30]
	0x03B008A8 MOVZ W23, 0x2
	0x03B008AC STR W31, [X31 + 0x2C]
	0x03B008B0 ADD W9, W9, W9, 0x5, LSL
	0x03B008B4 ADD W10, W10, 0x1
	0x03B008B8 EOR W9, W9, W29, 0x0
	0x03B008BC STP W25, W10, [X8 + 0x2C]
	0x03B008C0 STP W9, W23, [X8 + 0x24]
	0x03B008C4 MOVZ W19, 0x1
	0x03B008C8 B 0x3B00720
	0x03B008CC LDR X11, [X31 + 0x18]
	0x03B008D0 ADD W10, W20, W25
	0x03B008D4 STR W10, [X11]
	0x03B008D8 LDR W10, [X0 + 0xE0]
	0x03B008DC CBZ W10, 0x3B008F0
	0x03B008E0 ADRP X22, 0x658000
	0x03B008E4 LDR X21, [X31 + 0x20]
	0x03B008E8 LDR X22, [X22 + 0x3E8]
	0x03B008EC B 0x3B00910
	0x03B008F0 BL 0x1C16DFC
	0x03B008F4 ADRP X22, 0x658000
	0x03B008F8 LDR X22, [X22 + 0x3E8]
	0x03B008FC LDR X21, [X31 + 0x20]
	0x03B00900 LDR X0, [X22]
	0x03B00904 LDR X8, [X0 + 0xB8]
	0x03B00908 LDR X9, [X8 + 0x80]
	0x03B0090C CBZ X9, 0x3B05924
	0x03B00910 LDR W10, [X9 + 0x18]
	0x03B00914 CMP W25, W10
	0x03B00918 B.CS 0x3B058BC
	0x03B0091C ADD X9, X9, X25, 0x1, LSL
	0x03B00920 STRH W31, [X9 + 0x20]
	0x03B00924 LDRB W9, [X21 + 0x430]
	0x03B00928 MOVZ W19, 0x42D3
	0x03B0092C MOVK W19, 0x3350000
	0x03B00930 CBZ W9, 0x3B0099C
	0x03B00934 LDR W9, [X0 + 0xE0]
	0x03B00938 CBNZ W9, 0x3B00948
	0x03B0093C BL 0x1C16DFC
	0x03B00940 LDR X0, [X22]
	0x03B00944 LDR X8, [X0 + 0xB8]
	0x03B00948 LDR X8, [X8 + 0x88]
	0x03B0094C CBZ X8, 0x3B05924
	0x03B00950 LDR W9, [X8 + 0x18]
	0x03B00954 CBZ W9, 0x3B058BC
	0x03B00958 LDR W9, [X8 + 0x20]
	0x03B0095C CMP W9, W19
	0x03B00960 B.EQ 0x3B0099C
	0x03B00964 LDR W9, [X0 + 0xE0]
	0x03B00968 CBNZ W9, 0x3B00980
	0x03B0096C BL 0x1C16DFC
	0x03B00970 LDR X0, [X22]
	0x03B00974 LDR X8, [X0 + 0xB8]
	0x03B00978 LDR X8, [X8 + 0x88]
	0x03B0097C CBZ X8, 0x3B05924
	0x03B00980 LDR W9, [X8 + 0x18]
	0x03B00984 CBZ W9, 0x3B058BC
	0x03B00988 LDR W8, [X8 + 0x20]
	0x03B0098C MOVZ W9, 0x3DB3
	0x03B00990 MOVK W9, 0x2F20000
	0x03B00994 CMP W8, W9
	0x03B00998 B.NE 0x3B05A00
	0x03B0099C LDR W8, [X0 + 0xE0]
	0x03B009A0 CBNZ W8, 0x3B009AC
	0x03B009A4 BL 0x1C16DFC
	0x03B009A8 LDR X0, [X22]
	0x03B009AC LDR X8, [X0 + 0xB8]
	0x03B009B0 LDR X9, [X8 + 0x88]
	0x03B009B4 CBZ X9, 0x3B05924
	0x03B009B8 LDR W10, [X9 + 0x18]
	0x03B009BC CBZ W10, 0x3B058BC
	0x03B009C0 LDR W10, [X9 + 0x20]
	0x03B009C4 CMP W10, W19
	0x03B009C8 B.EQ 0x3B00A04
	0x03B009CC LDR W10, [X0 + 0xE0]
	0x03B009D0 CBNZ W10, 0x3B009E8
	0x03B009D4 BL 0x1C16DFC
	0x03B009D8 LDR X0, [X22]
	0x03B009DC LDR X8, [X0 + 0xB8]
	0x03B009E0 LDR X9, [X8 + 0x88]
	0x03B009E4 CBZ X9, 0x3B05924
	0x03B009E8 LDR W10, [X9 + 0x18]
	0x03B009EC CBZ W10, 0x3B058BC
	0x03B009F0 LDR W9, [X9 + 0x20]
	0x03B009F4 MOVZ W10, 0x3DB3
	0x03B009F8 MOVK W10, 0x2F20000
	0x03B009FC CMP W9, W10
	0x03B00A00 B.NE 0x3B00A0C
	0x03B00A04 STRB W31, [X21 + 0x430]
	0x03B00A08 B 0x3B00B64
	0x03B00A0C LDR W9, [X0 + 0xE0]
	0x03B00A10 CBNZ W9, 0x3B00A20
	0x03B00A14 BL 0x1C16DFC
	0x03B00A18 LDR X0, [X22]
	0x03B00A1C LDR X8, [X0 + 0xB8]
	0x03B00A20 LDR X1, [X8 + 0x80]
	0x03B00A24 CBZ X1, 0x3B05924
	0x03B00A28 LDR W9, [X1 + 0x18]
	0x03B00A2C CBZ W9, 0x3B058BC
	0x03B00A30 LDRH W9, [X1 + 0x20]
	0x03B00A34 LDR W10, [X0 + 0xE0]
	0x03B00A38 CMP W9, 0x23
	0x03B00A3C CSET W9, EQ
	0x03B00A40 CMP W25, 0x4
	0x03B00A44 CSET W11, EQ
	0x03B00A48 AND W19, W11, W9, 0x0
	0x03B00A4C CBNZ W10, 0x3B00A60
	0x03B00A50 BL 0x1C16DFC
	0x03B00A54 LDR X0, [X22]
	0x03B00A58 LDR X8, [X0 + 0xB8]
	0x03B00A5C LDR X1, [X8 + 0x80]
	0x03B00A60 CBZ W19, 0x3B00A6C
	0x03B00A64 MOVZ W2, 0x4
	0x03B00A68 B 0x3B00B40
	0x03B00A6C CBZ X1, 0x3B05924
	0x03B00A70 LDR W9, [X1 + 0x18]
	0x03B00A74 CBZ W9, 0x3B058BC
	0x03B00A78 LDRH W9, [X1 + 0x20]
	0x03B00A7C LDR W10, [X0 + 0xE0]
	0x03B00A80 CMP W9, 0x23
	0x03B00A84 CSET W9, EQ
	0x03B00A88 CMP W25, 0x5
	0x03B00A8C CSET W11, EQ
	0x03B00A90 AND W19, W11, W9, 0x0
	0x03B00A94 CBNZ W10, 0x3B00AA8
	0x03B00A98 BL 0x1C16DFC
	0x03B00A9C LDR X0, [X22]
	0x03B00AA0 LDR X8, [X0 + 0xB8]
	0x03B00AA4 LDR X1, [X8 + 0x80]
	0x03B00AA8 CBZ W19, 0x3B00AB4
	0x03B00AAC MOVZ W2, 0x5
	0x03B00AB0 B 0x3B00B40
	0x03B00AB4 CBZ X1, 0x3B05924
	0x03B00AB8 LDR W9, [X1 + 0x18]
	0x03B00ABC CBZ W9, 0x3B058BC
	0x03B00AC0 LDRH W9, [X1 + 0x20]
	0x03B00AC4 LDR W10, [X0 + 0xE0]
	0x03B00AC8 CMP W9, 0x23
	0x03B00ACC CSET W9, EQ
	0x03B00AD0 CMP W25, 0x7
	0x03B00AD4 CSET W11, EQ
	0x03B00AD8 AND W19, W11, W9, 0x0
	0x03B00ADC CBNZ W10, 0x3B00AF0
	0x03B00AE0 BL 0x1C16DFC
	0x03B00AE4 LDR X0, [X22]
	0x03B00AE8 LDR X8, [X0 + 0xB8]
	0x03B00AEC LDR X1, [X8 + 0x80]
	0x03B00AF0 CBZ W19, 0x3B00AFC
	0x03B00AF4 MOVZ W2, 0x7
	0x03B00AF8 B 0x3B00B40
	0x03B00AFC CBZ X1, 0x3B05924
	0x03B00B00 LDR W9, [X1 + 0x18]
	0x03B00B04 CBZ W9, 0x3B058BC
	0x03B00B08 LDRH W9, [X1 + 0x20]
	0x03B00B0C LDR W10, [X0 + 0xE0]
	0x03B00B10 CMP W9, 0x23
	0x03B00B14 CSET W9, EQ
	0x03B00B18 CMP W25, 0x9
	0x03B00B1C CSET W11, EQ
	0x03B00B20 AND W19, W11, W9, 0x0
	0x03B00B24 CBNZ W10, 0x3B00B34
	0x03B00B28 BL 0x1C16DFC
	0x03B00B2C LDR X0, [X22]
	0x03B00B30 LDR X8, [X0 + 0xB8]
	0x03B00B34 CBZ W19, 0x3B00B6C
	0x03B00B38 LDR X1, [X8 + 0x80]
	0x03B00B3C MOVZ W2, 0x9
	0x03B00B40 BL 0x3B0BB5C
	0x03B00B44 STR W0, [X21 + 0x4EC]
	0x03B00B48 ADRP X8, 0x659000
	0x03B00B4C LDR X8, [X8 + 0x268]
	0x03B00B50 LDR X2, [X8]
	0x03B00B54 ADD X8, X21, 0x4F0
	0x03B00B58 AND X1, X0, 0x0
	0x03B00B5C MOV X0, X8
	0x03B00B60 BL 0x267102C
	0x03B00B64 MOVZ W20, 0x1
	0x03B00B68 B 0x3B05A04
	0x03B00B6C LDR X9, [X8 + 0x88]
	0x03B00B70 CBZ X9, 0x3B05924
	0x03B00B74 LDR W10, [X9 + 0x18]
	0x03B00B78 CBZ W10, 0x3B058BC
	0x03B00B7C LDR W10, [X9 + 0x20]
	0x03B00B80 MOVZ W19, 0xD8FE
	0x03B00B84 MOVK W19, 0x20000
	0x03B00B88 CMP W10, W19
	0x03B00B8C B.LE 0x3B00C0C
	0x03B00B90 MOVZ W11, 0x1282
	0x03B00B94 MOVK W11, 0x690000
	0x03B00B98 CMP W10, W11
	0x03B00B9C B.LE 0x3B00C78
	0x03B00BA0 MOVZ W11, 0x4822
	0x03B00BA4 MOVK W11, 0x3430000
	0x03B00BA8 CMP W10, W11
	0x03B00BAC B.LE 0x3B00D2C
	0x03B00BB0 MOVZ W11, 0x47A1
	0x03B00BB4 MOVK W11, 0x1EAF0000
	0x03B00BB8 CMP W10, W11
	0x03B00BBC B.LE 0x3B00E84
	0x03B00BC0 MOVZ W11, 0xF08A
	0x03B00BC4 MOVK W11, 0x2E9A0000
	0x03B00BC8 CMP W10, W11
	0x03B00BCC B.LE 0x3B01178
	0x03B00BD0 MOVZ W11, 0xE49D
	0x03B00BD4 MOVK W11, 0x421F0000
	0x03B00BD8 CMP W10, W11
	0x03B00BDC B.LE 0x3B01AB0
	0x03B00BE0 MOVZ W11, 0x4431
	0x03B00BE4 MOVK W11, 0x71170000
	0x03B00BE8 CMP W10, W11
	0x03B00BEC B.EQ 0x3B0387C
	0x03B00BF0 MOVZ W11, 0xD356
	0x03B00BF4 MOVK W11, 0x71170000
	0x03B00BF8 CMP W10, W11
	0x03B00BFC B.EQ 0x3B03890
	0x03B00C00 MOVZ W11, 0xF5BE
	0x03B00C04 MOVK W11, 0x77EE0000
	0x03B00C08 B 0x3B013A0
	0x03B00C0C CMP W10, 0xB93
	0x03B00C10 B.LE 0x3B00CEC
	0x03B00C14 MOVZ W11, 0x79C1
	0x03B00C18 CMP W10, W11
	0x03B00C1C B.LE 0x3B00D98
	0x03B00C20 MOVZ W11, 0x2EF4
	0x03B00C24 MOVK W11, 0x20000
	0x03B00C28 CMP W10, W11
	0x03B00C2C B.LE 0x3B00ED8
	0x03B00C30 MOVZ W12, 0x60F4
	0x03B00C34 MOVK W12, 0x20000
	0x03B00C38 CMP W10, W12
	0x03B00C3C B.LE 0x3B011B4
	0x03B00C40 ADD W11, W12, 0x39C
	0x03B00C44 CMP W10, W11
	0x03B00C48 B.LE 0x3B01ADC
	0x03B00C4C MOVZ W11, 0x6AB8
	0x03B00C50 MOVK W11, 0x20000
	0x03B00C54 CMP W10, W11
	0x03B00C58 B.EQ 0x3B037EC
	0x03B00C5C MOVZ W11, 0xD7AD
	0x03B00C60 MOVK W11, 0x20000
	0x03B00C64 CMP W10, W11
	0x03B00C68 B.EQ 0x3B034E0
	0x03B00C6C MOVZ W11, 0xD8FE
	0x03B00C70 MOVK W11, 0x20000
	0x03B00C74 B 0x3B02358
	0x03B00C78 MOVZ W11, 0x5B0C
	0x03B00C7C MOVK W11, 0x100000
	0x03B00C80 CMP W10, W11
	0x03B00C84 B.LE 0x3B00DE4
	0x03B00C88 MOVZ W11, 0xB5DD
	0x03B00C8C MOVK W11, 0x180000
	0x03B00C90 CMP W10, W11
	0x03B00C94 B.LE 0x3B00F14
	0x03B00C98 MOVZ W11, 0x319E
	0x03B00C9C MOVK W11, 0x200000
	0x03B00CA0 CMP W10, W11
	0x03B00CA4 B.LE 0x3B01240
	0x03B00CA8 MOVZ W11, 0xFEFB
	0x03B00CAC MOVK W11, 0x210000
	0x03B00CB0 CMP W10, W11
	0x03B00CB4 B.LE 0x3B01AF4
	0x03B00CB8 MOVZ W8, 0x48DD
	0x03B00CBC MOVK W8, 0x220000
	0x03B00CC0 CMP W10, W8
	0x03B00CC4 B.EQ 0x3B00F64
	0x03B00CC8 MOVZ W8, 0x65
	0x03B00CCC MOVK W8, 0x680000
	0x03B00CD0 CMP W10, W8
	0x03B00CD4 B.EQ 0x3B01780
	0x03B00CD8 MOVZ W8, 0x1282
	0x03B00CDC MOVK W8, 0x690000
	0x03B00CE0 CMP W10, W8
	0x03B00CE4 B.NE 0x3B05A00
	0x03B00CE8 B 0x3B03314
	0x03B00CEC CMP W10, 0x62
	0x03B00CF0 B.LE 0x3B00E40
	0x03B00CF4 CMP W10, 0x1B2
	0x03B00CF8 B.LE 0x3B01020
	0x03B00CFC CMP W10, 0x29E
	0x03B00D00 B.LE 0x3B0127C
	0x03B00D04 CMP W10, 0x394
	0x03B00D08 B.LE 0x3B02C38
	0x03B00D0C CMP W10, 0x39E
	0x03B00D10 MOVZ W20, 0x1
	0x03B00D14 B.EQ 0x3B05A04
	0x03B00D18 CMP W10, 0xB8F
	0x03B00D1C B.EQ 0x3B05A00
	0x03B00D20 CMP W10, 0xB93
	0x03B00D24 B.NE 0x3B05A00
	0x03B00D28 B 0x3B05A04
	0x03B00D2C MOVZ W11, 0x5E9A
	0x03B00D30 MOVK W11, 0x760000
	0x03B00D34 CMP W10, W11
	0x03B00D38 B.LE 0x3B0104C
	0x03B00D3C MOVZ W11, 0xA57A
	0x03B00D40 MOVK W11, 0xE60000
	0x03B00D44 CMP W10, W11
	0x03B00D48 B.LE 0x3B012A0
	0x03B00D4C MOVZ W11, 0xFC43
	0x03B00D50 MOVK W11, 0x2D90000
	0x03B00D54 CMP W10, W11
	0x03B00D58 B.LE 0x3B01C28
	0x03B00D5C MOVZ W8, 0x4302
	0x03B00D60 MOVK W8, 0x3000000
	0x03B00D64 CMP W10, W8
	0x03B00D68 B.EQ 0x3B00D8C
	0x03B00D6C MOVZ W8, 0x163
	0x03B00D70 MOVK W8, 0x31D0000
	0x03B00D74 CMP W10, W8
	0x03B00D78 B.EQ 0x3B01C48
	0x03B00D7C MOVZ W8, 0x4822
	0x03B00D80 MOVK W8, 0x3430000
	0x03B00D84 CMP W10, W8
	0x03B00D88 B.NE 0x3B05A00
	0x03B00D8C LDR X8, [X31 + 0x20]
	0x03B00D90 STR W31, [X8 + 0x61C]
	0x03B00D94 B 0x3B00B64
	0x03B00D98 MOVZ W11, 0x19A6
	0x03B00D9C CMP W10, W11
	0x03B00DA0 B.LE 0x3B010A0
	0x03B00DA4 MOVZ W11, 0x5891
	0x03B00DA8 CMP W10, W11
	0x03B00DAC B.LE 0x3B012DC
	0x03B00DB0 MOVZ W11, 0x6F5F
	0x03B00DB4 CMP W10, W11
	0x03B00DB8 B.LE 0x3B01C80
	0x03B00DBC MOVZ W8, 0x7625
	0x03B00DC0 CMP W10, W8
	0x03B00DC4 B.EQ 0x3B0389C
	0x03B00DC8 MOVZ W8, 0x763A
	0x03B00DCC CMP W10, W8
	0x03B00DD0 B.EQ 0x3B014AC
	0x03B00DD4 MOVZ W8, 0x79C1
	0x03B00DD8 CMP W10, W8
	0x03B00DDC B.NE 0x3B05A00
	0x03B00DE0 B 0x3B03274
	0x03B00DE4 MOVZ W11, 0xD122
	0x03B00DE8 MOVK W11, 0x40000
	0x03B00DEC CMP W10, W11
	0x03B00DF0 B.LE 0x3B010D8
	0x03B00DF4 MOVZ W11, 0xFCEC
	0x03B00DF8 MOVK W11, 0xE0000
	0x03B00DFC CMP W10, W11
	0x03B00E00 B.LE 0x3B01308
	0x03B00E04 MOVZ W8, 0x878F
	0x03B00E08 MOVK W8, 0xF0000
	0x03B00E0C CMP W10, W8
	0x03B00E10 B.LE 0x3B01D60
	0x03B00E14 MOVZ W8, 0xAF07
	0x03B00E18 MOVK W8, 0xF0000
	0x03B00E1C CMP W10, W8
	0x03B00E20 B.EQ 0x3B03C34
	0x03B00E24 MOVZ W8, 0x4376
	0x03B00E28 MOVK W8, 0x100000
	0x03B00E2C CMP W10, W8
	0x03B00E30 B.EQ 0x3B0385C
	0x03B00E34 MOVZ W8, 0x5B0C
	0x03B00E38 MOVK W8, 0x100000
	0x03B00E3C B 0x3B01340
	0x03B00E40 MOVZ W11, 0xB266
	0x03B00E44 MOVK W11, 0xCD090000
	0x03B00E48 CMP W10, W11
	0x03B00E4C B.LE 0x3B01124
	0x03B00E50 MOVZ W11, 0xC6BE
	0x03B00E54 MOVK W11, 0xEC480000
	0x03B00E58 CMP W10, W11
	0x03B00E5C B.LE 0x3B01368
	0x03B00E60 CMP W10, 0x49
	0x03B00E64 B.LE 0x3B01D7C
	0x03B00E68 CMP W10, 0x53
	0x03B00E6C B.EQ 0x3B02AEC
	0x03B00E70 CMP W10, 0x55
	0x03B00E74 B.EQ 0x3B03C44
	0x03B00E78 CMP W10, 0x62
	0x03B00E7C B.NE 0x3B05A00
	0x03B00E80 B 0x3B031F8
	0x03B00E84 MOVZ W11, 0x5107
	0x03B00E88 MOVK W11, 0x14490000
	0x03B00E8C CMP W10, W11
	0x03B00E90 B.LE 0x3B01440
	0x03B00E94 MOVZ W9, 0x7507
	0x03B00E98 MOVK W9, 0x161E0000
	0x03B00E9C CMP W10, W9
	0x03B00EA0 B.LE 0x3B01D90
	0x03B00EA4 MOVZ W9, 0x4B66
	0x03B00EA8 MOVK W9, 0x16500000
	0x03B00EAC CMP W10, W9
	0x03B00EB0 B.EQ 0x3B03228
	0x03B00EB4 MOVZ W8, 0xB577
	0x03B00EB8 MOVK W8, 0x1B400000
	0x03B00EBC CMP W10, W8
	0x03B00EC0 B.EQ 0x3B03790
	0x03B00EC4 MOVZ W8, 0x47A1
	0x03B00EC8 MOVK W8, 0x1EAF0000
	0x03B00ECC CMP W10, W8
	0x03B00ED0 B.NE 0x3B05A00
	0x03B00ED4 B 0x3B037C8
	0x03B00ED8 MOVZ W11, 0xA83A
	0x03B00EDC CMP W10, W11
	0x03B00EE0 B.LE 0x3B0147C
	0x03B00EE4 MOVZ W11, 0xABD7
	0x03B00EE8 CMP W10, W11
	0x03B00EEC B.LE 0x3B01DD0
	0x03B00EF0 MOVZ W11, 0xB1E9
	0x03B00EF4 CMP W10, W11
	0x03B00EF8 B.EQ 0x3B029A4
	0x03B00EFC MOVZ W9, 0x282E
	0x03B00F00 MOVK W9, 0x20000
	0x03B00F04 CMP W10, W9
	0x03B00F08 B.EQ 0x3B0380C
	0x03B00F0C MOVZ W8, 0x2EF4
	0x03B00F10 B 0x3B011E4
	0x03B00F14 MOVZ W11, 0xB2E3
	0x03B00F18 MOVK W11, 0x140000
	0x03B00F1C CMP W10, W11
	0x03B00F20 B.LE 0x3B01600
	0x03B00F24 MOVZ W11, 0x9E9E
	0x03B00F28 MOVK W11, 0x160000
	0x03B00F2C CMP W10, W11
	0x03B00F30 B.LE 0x3B01DEC
	0x03B00F34 MOVZ W11, 0x4369
	0x03B00F38 MOVK W11, 0x170000
	0x03B00F3C CMP W10, W11
	0x03B00F40 B.EQ 0x3B03024
	0x03B00F44 MOVZ W11, 0x6BFB
	0x03B00F48 MOVK W11, 0x180000
	0x03B00F4C CMP W10, W11
	0x03B00F50 B.EQ 0x3B01B14
	0x03B00F54 MOVZ W8, 0xB5DD
	0x03B00F58 MOVK W8, 0x180000
	0x03B00F5C CMP W10, W8
	0x03B00F60 B.NE 0x3B05A00
	0x03B00F64 LDR W8, [X0 + 0xE0]
	0x03B00F68 CBNZ W8, 0x3B00F88
	0x03B00F6C BL 0x1C16DFC
	0x03B00F70 ADRP X8, 0x658000
	0x03B00F74 LDR X8, [X8 + 0x3E8]
	0x03B00F78 LDR X0, [X8]
	0x03B00F7C LDR X8, [X0 + 0xB8]
	0x03B00F80 LDR X9, [X8 + 0x88]
	0x03B00F84 CBZ X9, 0x3B05924
	0x03B00F88 LDR W8, [X9 + 0x18]
	0x03B00F8C CBZ W8, 0x3B058BC
	0x03B00F90 LDR X10, [X31 + 0x20]
	0x03B00F94 MOVN W8, 0x0
	0x03B00F98 LDR W20, [X9 + 0x24]
	0x03B00F9C STR W8, [X10 + 0x6A4]
	0x03B00FA0 LDR W8, [X9 + 0x28]
	0x03B00FA4 CBZ W8, 0x3B00FE0
	0x03B00FA8 LDR W8, [X0 + 0xE0]
	0x03B00FAC CBNZ W8, 0x3B00FCC
	0x03B00FB0 BL 0x1C16DFC
	0x03B00FB4 ADRP X8, 0x658000
	0x03B00FB8 LDR X8, [X8 + 0x3E8]
	0x03B00FBC LDR X8, [X8]
	0x03B00FC0 LDR X8, [X8 + 0xB8]
	0x03B00FC4 LDR X9, [X8 + 0x88]
	0x03B00FC8 CBZ X9, 0x3B05924
	0x03B00FCC LDR W8, [X9 + 0x18]
	0x03B00FD0 CBZ W8, 0x3B058BC
	0x03B00FD4 LDR W8, [X9 + 0x28]
	0x03B00FD8 CMP W8, 0x1
	0x03B00FDC B.NE 0x3B04220
	0x03B00FE0 ADRP X19, 0x5F3000

ISIL:
	001 Move [X31-160], D15
	002 Move [X31-152], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X29
	010 Move [X31+72], X30
	011 Move [X31+80], X28
	012 Move [X31+88], X27
	013 Move [X31+96], X26
	014 Move [X31+104], X25
	015 Move [X31+112], X24
	016 Move [X31+120], X23
	017 Move [X31+128], X22
	018 Move [X31+136], X21
	019 Move [X31+144], X20
	020 Move [X31+152], X19
	021 Subtract X31, X31, 3072
	022 Move X23, 0x8E5000
	023 Move X21, 0x5F6000
	024 Move W8, [X23+1620]
	025 Move X21, [X21+1432]
	026 Move W22, W3
	027 Move W26, W2
	028 Move V8, V0
	029 Move X20, X1
	030 Move X19, X0
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {82}
	035 Move X0, 0x5F8000
	036 Move X0, [X0+368]
	037 Call 0x1C17CF4
	038 Move X0, 0x5F6000
	039 Move X0, [X0+2600]
	040 Call 0x1C17CF4
	041 Move X0, 0x65B000
	042 Move X0, [X0+792]
	043 Call 0x1C17CF4
	044 Move X0, 0x65B000
	045 Move X0, [X0+800]
	046 Call 0x1C17CF4
	047 Move X0, 0x65B000
	048 Move X0, [X0+808]
	049 Call 0x1C17CF4
	050 Move X0, 0x65B000
	051 Move X0, [X0+816]
	052 Call 0x1C17CF4
	053 Move X0, 0x5F6000
	054 Move X0, [X0+1448]
	055 Call 0x1C17CF4
	056 Move X0, 0x5F5000
	057 Move X0, [X0+1432]
	058 Call 0x1C17CF4
	059 Move X0, 0x65B000
	060 Move X0, [X0+544]
	061 Call 0x1C17CF4
	062 Move X0, 0x65A000
	063 Move X0, [X0+880]
	064 Call 0x1C17CF4
	065 Move X0, 0x65A000
	066 Move X0, [X0+928]
	067 Call 0x1C17CF4
	068 Move X0, 0x65A000
	069 Move X0, [X0+944]
	070 Call 0x1C17CF4
	071 Move X0, 0x65A000
	072 Move X0, [X0+976]
	073 Call 0x1C17CF4
	074 Move X0, 0x65A000
	075 Move X0, [X0+1000]
	076 Call 0x1C17CF4
	077 Move X0, 0x65A000
	078 Move X0, [X0+1016]
	079 Call 0x1C17CF4
	080 Move W8, 1
	081 Move [X23+1620], W8
	082 Add X0, X31, 2112
	083 Move W2, 888
	084 Move W1, W31
	085 Move [X31+3000], X31
	086 Call 0x3EB2B10
	087 Add X0, X31, 1224
	088 Move W2, 888
	089 Move W1, W31
	090 Call 0x3EB2B10
	091 Add X0, X31, 336
	092 Move W2, 888
	093 Move W1, W31
	094 Call 0x3EB2B10
	095 Move X0, [X21]
	096 NotImplemented "Instruction MOVI not yet implemented."
	097 Move [X31+332], W31
	098 Move [X31+192], X31
	099 Move [X31+200], X31
	100 Move [X31+208], W31
	101 Move [X31+188], W31
	102 Move [X31+288], V0
	103 Move [X31+296], V0
	104 Move [X31+256], V0
	105 Move [X31+264], V0
	106 Move [X31+224], V0
	107 Move [X31+232], V0
	108 Move [X31+160], X31
	109 Move [X31+168], X31
	110 Move [X31+176], W31
	111 Move [X31+152], X31
	112 Move W8, [X0+224]
	113 Move X23, [X19+248]
	114 Compare W8, 0
	115 JumpIfNotEqual {117}
	116 Call 0x1C17DFC
	117 Move X0, X23
	118 Move X1, X31
	119 Move X2, X31
	120 Call Object.op_Equality, X0, X1
	121 Move TEMP, X0
	122 And TEMP, TEMP, 1
	123 Compare TEMP, 1
	124 JumpIfEqual {192}
	125 Move X0, [X19+248]
	126 Compare X0, 0
	127 JumpIfEqual {2101}
	128 Move X1, X31
	129 Call TMP_FontAsset.get_characterLookupTable, X0
	130 Compare X0, 0
	131 JumpIfEqual {192}
	132 Move X8, [X19+1144]
	133 Compare X8, 0
	134 JumpIfEqual {218}
	135 Move X9, [X8+24]
	136 Compare X9, 0
	137 JumpIfEqual {218}
	138 Compare W9, 0
	139 JumpIfEqual {2242}
	140 Move W8, [X8+32]
	141 Compare W8, 0
	142 JumpIfEqual {218}
	143 Move X2, [X19+248]
	144 Move X4, [X19+272]
	145 Move [X19+288], W31
	146 Move X23, 0x65A000
	147 Move [X19+256], X2
	148 Move [X19+280], X4
	149 Move X23, [X23+1000]
	150 Move X0, [X23]
	151 Move W8, [X0+224]
	152 Compare W8, 0
	153 JumpIfNotEqual {157}
	154 Call 0x1C17DFC
	155 Move X2, [X19+256]
	156 Move X4, [X19+280]
	157 Move V0, [X19+1560]
	158 NotImplemented "Instruction MOVI not yet implemented."
	159 Add X0, X31, 96
	160 Move W1, W31
	161 Move X3, X31
	162 Move X5, X31
	163 Move [X31+144], X31
	164 Move [X31+112], V1
	165 Move [X31+120], V1
	166 Move [X31+6], V1
	167 Call MaterialReference..ctor, X0, X1, X2, X3, X4, V0
	168 Move X8, [X23]
	169 Move X9, 0x65A000
	170 Move X9, [X9+944]
	171 Move V0, [X31+96]
	172 Move V1, [X31+112]
	173 Move X8, [X8+184]
	174 Move V2, [X31+8]
	175 Move X10, [X31+144]
	176 Move X2, [X9]
	177 Add X0, X8, 16
	178 Add X1, X31, 3008
	179 Move [X31+188], V0
	180 Move [X31+189], V1
	181 Move [X31+190], V2
	182 Move [X31+3056], X10
	183 Call TMP_TextProcessingStack`1<MaterialReference>.SetDefault, X0, X1
	184 Move X8, [X19+1160]
	185 Move W24, [X19+1168]
	186 Compare X8, 0
	187 JumpIfEqual {190}
	188 Move W8, [X8+24]
	189 NotImplemented "Instruction CMP not yet implemented."
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Add W1, W24, 256
	192 Move X20, 0x65A000
	193 Move X21, 0x5F5000
	194 Move X20, [X20+1016]
	195 Move X21, [X21+2600]
	196 Move X0, X19
	197 Move X1, X31
	198 Call Object.GetInstanceID, X0
	199 Move [X31+332], W0
	200 Add X0, X31, 332
	201 Move X1, X31
	202 Call Int32.ToString, X0
	203 Move X8, [X20]
	204 Move X1, X0
	205 Move X2, X31
	206 Move X0, X8
	207 Call String.Concat, X0, X1
	208 Move X8, [X21]
	209 Move X20, X0
	210 Move W9, [X8+224]
	211 Compare W9, 0
	212 JumpIfNotEqual {215}
	213 Move X0, X8
	214 Call 0x1C17DFC
	215 Move X0, X20
	216 Move X1, X31
	217 Call Debug.LogWarning, X0
	218 Move W20, 1
	219 Move [X19+588], W20
	220 Move X19, 0x8DB000
	221 Move W8, [X19+1935]
	222 Compare W8, 0
	223 JumpIfNotEqual {228}
	224 Move X0, 0x5FD000
	225 Move X0, [X0+3848]
	226 Call 0x1C17CF4
	227 Move [X19+1935], W20
	228 Move X8, 0x5FD000
	229 Move X8, [X8+3848]
	230 Move X8, [X8]
	231 Move X8, [X8+184]
	232 Move S0, [X8]
	233 Move S1, [X8+4]
	234 Add X31, X31, 3072
	235 Move X20, [X31+144]
	236 Move X19, [X31+152]
	237 Move X22, [X31+128]
	238 Move X21, [X31+136]
	239 Move X24, [X31+112]
	240 Move X23, [X31+120]
	241 Move X26, [X31+96]
	242 Move X25, [X31+104]
	243 Move X28, [X31+80]
	244 Move X27, [X31+88]
	245 Move X29, [X31+64]
	246 Move X30, [X31+72]
	247 Move D9, [X31+48]
	248 Move D8, [X31+56]
	249 Move D11, [X31+32]
	250 Move D10, [X31+40]
	251 Move D13, [X31+16]
	252 Move D12, [X31+24]
	253 Move D15, [X31+160]
	254 Move D14, [X31+168]
	255 Return X0
	256 Move W0, W24
	257 Move X1, X31
	258 Call Mathf.NextPowerOfTwo, X0
	259 Move W1, W0
	260 Move X8, 0x65B000
	261 Move X8, [X8+544]
	262 Move X0, [X8]
	263 Call 0x1C17D6C
	264 Move [X19+1160], X0
	265 Move X8, [X19+248]
	266 Compare X8, 0
	267 JumpIfEqual {2101}
	268 Move V9, [X20]
	269 Add X1, X8, 80
	270 Add X0, X31, 224
	271 Move W2, 96
	272 Call 0x3EB2B30
	273 Add X0, X31, 224
	274 Move X1, X31
	275 Call FaceInfo.get_pointSize, X0
	276 Move X8, [X19+248]
	277 Compare X8, 0
	278 JumpIfEqual {2101}
	279 Move W25, W0
	280 Add X1, X8, 80
	281 Add X0, X31, 224
	282 Move W2, 96
	283 Call 0x3EB2B30
	284 Add X0, X31, 224
	285 Move X1, X31
	286 Call FaceInfo.get_scale, X0
	287 Move W9, 0x3F800000
	288 Move V12, [X20]
	289 Move [X19+1028], W9
	290 Move V14, V0
	291 Move V0, [X20]
	292 Move X21, 0x65A000
	293 Move W8, [X19+773]
	294 Move X9, -50413568
	295 Move [X19+488], S0
	296 Move X21, [X21+976]
	297 Move V2, [X9+188]
	298 NotImplemented "Instruction CMP not yet implemented."
	299 Move S1, 1
	300 Move X1, [X21]
	301 Add X0, X19, 496
	302 Move [X31+32], S2
	303 NotImplemented "Instruction FCSEL not yet implemented."
	304 Call TMP_TextProcessingStack`1<Single>.SetDefault, X0, V0
	305 Move W8, [X19+600]
	306 Move W1, [X19+620]
	307 Add X0, X19, 640
	308 Move [X19+604], W8
	309 Move [X19+632], W1
	310 Move X8, 0x65A000
	311 Move X8, [X8+928]
	312 Move X2, [X8]
	313 Call TMP_TextProcessingStack`1<Int32Enum>.SetDefault, X0, X1
	314 Move [X19+1564], W31
	315 Move X8, 0x65A000
	316 Move X8, [X8+880]
	317 Add X0, X19, 1568
	318 Move X1, [X8]
	319 Call TMP_TextProcessingStack`1<Single>.Clear, X0
	320 Move X8, [X19+256]
	321 Move W9, 0xFE00
	322 NotImplemented "Instruction MOVK not yet implemented."
	323 Move [X19+1240], W31
	324 Move [X19+704], W9
	325 Compare X8, 0
	326 JumpIfEqual {2101}
	327 Add X1, X8, 80
	328 Add X0, X31, 224
	329 Move W2, 96
	330 Call 0x3EB2B30
	331 Add X0, X31, 224
	332 Move X1, X31
	333 Call FaceInfo.get_lineHeight, X0
	334 Move X8, [X19+256]
	335 Compare X8, 0
	336 JumpIfEqual {2101}
	337 Add X1, X8, 80
	338 Add X0, X31, 224
	339 Move W2, 96
	340 Move V10, V0
	341 Move [X31+92], S12
	342 Call 0x3EB2B30
	343 Add X0, X31, 224
	344 Move X1, X31
	345 Call FaceInfo.get_ascentLine, X0
	346 Move X8, [X19+256]
	347 Compare X8, 0
	348 JumpIfEqual {2101}
	349 Add X1, X8, 80
	350 Add X0, X31, 224
	351 Move W2, 96
	352 Move V11, V0
	353 Add X28, X19, 684
	354 Call 0x3EB2B30
	355 Add X0, X31, 224
	356 Move X1, X31
	357 Call FaceInfo.get_descentLine, X0
	358 NotImplemented "Instruction MOVI not yet implemented."
	359 Move [X28], D13
	360 Move [X19+1600], W31
	361 Move [X19+1032], D13
	362 Move X1, [X21]
	363 Move V12, V0
	364 Add X0, X19, 1040
	365 Move S0, W31
	366 Call TMP_TextProcessingStack`1<Single>.SetDefault, X0, V0
	367 Move [X19+1072], W31
	368 Move [X28+488], X31
	369 Move X0, [X23]
	370 Move [X31+12], W26
	371 Move W8, [X0+224]
	372 Compare W8, 0
	373 JumpIfNotEqual {376}
	374 Call 0x1C17DFC
	375 Move X0, [X23]
	376 Move X8, [X0+184]
	377 Move W9, 0xBF800000
	378 Move W10, 1
	379 Add X0, X31, 3000
	380 Move V0, [X8+5544]
	381 Move TEMP, 0
	382 Not TEMP
	383 Move W1, TEMP
	384 Move W2, W31
	385 Move X3, X31
	386 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	387 Move [X19+1192], W31
	388 Move [X19+1232], W31
	389 Move [X19+708], W31
	390 Move [X19+848], D13
	391 Move [X19+864], W9
	392 Move [X19+1013], W10
	393 Move [X19+1208], D13
	394 Move [X19+1220], W31
	395 Move [X19+1224], D0
	396 Move [X19+730], W31
	397 Call CharacterSubstitution..ctor, X0, X1, X2
	398 Add X0, X31, 2112
	399 Move W2, 888
	400 Move W1, W31
	401 Call 0x3EB2B10
	402 Add X0, X31, 1224
	403 Move W2, 888
	404 Move W1, W31
	405 Call 0x3EB2B10
	406 Add X0, X31, 336
	407 Move W2, 888
	408 Move W1, W31
	409 Call 0x3EB2B10
	410 Move W8, [X19+580]
	411 Move X1, [X19+1144]
	412 Add W8, W8, 1
	413 Move [X19+580], W8
	414 Compare X1, 0
	415 JumpIfEqual {2101}
	416 Xor W10, W22, 1
	417 Move [X31+48], W10
	418 Move X10, -50413568
	419 Move V4, [X10+92]
	420 Subtract W9, W24, 1
	421 Move [X31+88], W9
	422 Move X9, -50417664
	423 Move [X31+8], S4
	424 Move S4, W31
	425 Move V2, [X9+3880]
	426 Move [X31+76], S4
	427 Move S4, W31
	428 Subtract S1, S11, S12
	429 Move [X31+56], S4
	430 Move S4, W31
	431 Move [X31+52], S4
	432 Subtract S4, S10, S1
	433 Move S1, W31
	434 NotImplemented "Instruction SCVTF not yet implemented."
	435 Move [X31+84], S1
	436 Move S1, W31
	437 NotImplemented "Instruction FDIV not yet implemented."
	438 Move [X31+40], S1
	439 Add S1, S8, S2
	440 Move X8, -50413568
	441 Multiply S0, S0, S14
	442 Move [X31+44], S1
	443 Move S1, W31
	444 Move V3, [X8+816]
	445 Move [X31+68], S1
	446 Multiply S1, S0, S15
	447 Move V0, [X31+92]
	448 Move W8, 1
	449 Move [X31+28], W31
	450 Move [X31+60], W31
	451 Multiply S0, S0, S3
	452 Multiply S0, S15, S0
	453 Move W23, W31
	454 Move S13, W31
	455 Move W29, 376
	456 Move [X31+16], S3
	457 Move [X31+64], S0
	458 Move [X31+20], S1
	459 Move [X31+28], S4
	460 Move V15, V1
	461 Move [X31+36], W8
	462 Move W8, [X1+24]
	463 NotImplemented "Instruction CMP not yet implemented."
	464 Move W8, 12
	465 NotImplemented "Instruction SMADDL not yet implemented."
	466 Move W24, [X8+32]
	467 Compare W24, 0
	468 JumpIfEqual {2102}
	469 NotImplemented "Instruction CMP not yet implemented."
	470 Move W8, [X19+770]
	471 Compare W8, 0
	472 JumpIfEqual {488}
	473 Move W8, 1
	474 Add W2, W23, 1
	475 Add X3, X31, 188
	476 Move X0, X19
	477 Move [X19+1073], W8
	478 Move [X19+1604], W31
	479 Call TMP_Text.ValidateHtmlTag, X0, X1, X2, X3
	480 Move TEMP, X0
	481 And TEMP, TEMP, 1
	482 Compare TEMP, 1
	483 JumpIfNotEqual {504}
	484 Move W8, [X19+1604]
	485 Move W23, [X31+188]
	486 Compare W8, 0
	487 JumpIfNotEqual {504}
	488 Move X8, [X19+872]
	489 Compare X8, 0
	490 JumpIfEqual {2101}
	491 Move X8, [X8+56]
	492 Compare X8, 0
	493 JumpIfEqual {2101}
	494 NotImplemented "Instruction LDRSW not yet implemented."
	495 Move W10, [X8+24]
	496 NotImplemented "Instruction CMP not yet implemented."
	497 NotImplemented "Instruction MADD not yet implemented."
	498 Move W9, [X8+44]
	499 Move [X19+1604], W9
	500 Move W9, [X8+88]
	501 Move [X19+288], W9
	502 Move X8, [X8+56]
	503 Move [X19+256], X8
	504 Move X8, [X19+872]
	505 Compare X8, 0
	506 JumpIfEqual {2101}
	507 Move X8, [X8+56]
	508 Compare X8, 0
	509 JumpIfEqual {2101}
	510 NotImplemented "Instruction LDRSW not yet implemented."
	511 Move W9, [X8+24]
	512 NotImplemented "Instruction CMP not yet implemented."
	513 NotImplemented "Instruction MADD not yet implemented."
	514 Move W27, [X8+92]
	515 Move [X19+1073], W31
	516 Move W8, [X31+3000]
	517 Move W21, [X19+288]
	518 NotImplemented "Instruction CMP not yet implemented."
	519 Move W24, [X31+3004]
	520 Move W8, 0x2026
	521 Move [X19+1604], W31
	522 NotImplemented "Instruction CMP not yet implemented."
	523 NotImplemented "Instruction CMP not yet implemented."
	524 Move X24, [X19+1160]
	525 Compare X24, 0
	526 JumpIfEqual {2101}
	527 Move X0, [X19+256]
	528 Compare X0, 0
	529 JumpIfEqual {2101}
	530 Move X1, X31
	531 Call TMP_FontAsset.get_characterLookupTable, X0
	532 Compare X0, 0
	533 JumpIfEqual {2101}
	534 Move X8, 0x65A000
	535 Move X8, [X8+808]
	536 Move W1, 3
	537 Move X2, [X8]
	538 Call Dictionary`2<UInt32, Object>.get_Item, X0, X1
	539 Move W8, [X24+24]
	540 NotImplemented "Instruction CMP not yet implemented."
	541 NotImplemented "Instruction MADD not yet implemented."
	542 Move W26, 1
	543 Move W24, 3
	544 Move [X8+48], X0
	545 Move [X19+760], W26
	546 Move W26, W31
	547 Move X8, [X19+1160]
	548 Compare X8, 0
	549 JumpIfEqual {2101}
	550 Move W9, [X8+24]
	551 NotImplemented "Instruction CMP not yet implemented."
	552 Move X9, [X19+1616]
	553 NotImplemented "Instruction NOP not yet implemented."
	554 NotImplemented "Instruction MADD not yet implemented."
	555 Move [X8+44], W31
	556 Move W26, 1
	557 Move [X8+48], X9
	558 Move X9, [X19+1624]
	559 Move W24, 0x2026
	560 Move [X8+56], X9
	561 Move X9, [X19+1632]
	562 Move [X8+80], X9
	563 Move W9, [X19+1640]
	564 Move [X8+88], W9
	565 Add W8, W25, 1
	566 Move [X19+760], W26
	567 Move [X31+3000], W8
	568 Move W8, 3
	569 Move [X31+3004], W8
	570 Move W26, 1
	571 NotImplemented "Instruction CMP not yet implemented."
	572 Move W8, [X19+804]
	573 NotImplemented "Instruction CMP not yet implemented."
	574 Move X8, [X19+1160]
	575 Compare X8, 0
	576 JumpIfEqual {2101}
	577 Move W9, [X8+24]
	578 NotImplemented "Instruction CMP not yet implemented."
	579 NotImplemented "Instruction MADD not yet implemented."
	580 Add W9, W25, 1
	581 Move W10, 0x200B
	582 Move [X8+404], W31
	583 NotImplemented "Instruction STRH not yet implemented."
	584 Move [X8+100], W31
	585 Move [X28+488], W9
	586 Move V14, V15
	587 Move W8, [X19+1604]
	588 Compare W8, 0
	589 JumpIfEqual {699}
	590 Move S14, 1
	591 Compare W8, 0
	592 JumpIfEqual {806}
	593 NotImplemented "Instruction CMP not yet implemented."
	594 Move X8, [X19+872]
	595 Compare X8, 0
	596 JumpIfEqual {2101}
	597 Move X8, [X8+56]
	598 Compare X8, 0
	599 JumpIfEqual {2101}
	600 NotImplemented "Instruction LDRSW not yet implemented."
	601 Move W10, [X8+24]
	602 NotImplemented "Instruction CMP not yet implemented."
	603 NotImplemented "Instruction MADD not yet implemented."
	604 Move X0, [X8+64]
	605 Move [X19+1688], X0
	606 Move W8, [X8+72]
	607 Move [X19+1700], W8
	608 Compare X0, 0
	609 JumpIfEqual {2101}
	610 Move X1, X31
	611 Call TMP_SpriteAsset.get_spriteCharacterTable, X0
	612 Compare X0, 0
	613 JumpIfEqual {2101}
	614 Move X8, 0x65A000
	615 Move W1, [X19+1700]
	616 Move X8, [X8+816]
	617 Move X2, [X8]
	618 Call List`1<Object>.get_Item, X0, X1
	619 Compare X0, 0
	620 JumpIfEqual {586}
	621 Move X25, X0
	622 NotImplemented "Instruction CMP not yet implemented."
	623 Move W8, [X19+1700]
	624 Add W24, W8, 0xE000
	625 Move X8, [X19+1688]
	626 Compare X8, 0
	627 JumpIfEqual {2101}
	628 Add X1, X8, 72
	629 Add X0, X31, 224
	630 Move W2, 96
	631 Call 0x3EB2B30
	632 Add X0, X31, 224
	633 Move X1, X31
	634 Call FaceInfo.get_pointSize, X0
	635 Move V15, [X19+488]
	636 NotImplemented "Instruction CMP not yet implemented."
	637 Move X8, [X19+1688]
	638 Compare X8, 0
	639 JumpIfEqual {2101}
	640 Add X1, X8, 72
	641 Add X0, X31, 224
	642 Move W2, 96
	643 Call 0x3EB2B30
	644 Add X0, X31, 224
	645 Move X1, X31
	646 Call FaceInfo.get_pointSize, X0
	647 Move X8, [X19+1688]
	648 Compare X8, 0
	649 JumpIfEqual {2101}
	650 Move W26, W0
	651 Add X1, X8, 72
	652 Add X0, X31, 224
	653 Move W2, 96
	654 Call 0x3EB2B30
	655 Add X0, X31, 224
	656 Move X1, X31
	657 Call FaceInfo.get_scale, X0
	658 Move X0, [X25+32]
	659 Compare X0, 0
	660 JumpIfEqual {2101}
	661 Move W8, [X19+773]
	662 Move V9, V0
	663 Move V0, [X31+32]
	664 Move V11, [X25+44]
	665 NotImplemented "Instruction CMP not yet implemented."
	666 Move S1, 1
	667 Move X1, X31
	668 NotImplemented "Instruction FCSEL not yet implemented."
	669 Call Glyph.get_scale, X0
	670 Move X8, [X19+1688]
	671 Compare X8, 0
	672 JumpIfEqual {2101}
	673 Add X1, X8, 72
	674 Add X0, X31, 224
	675 Move W2, 96
	676 Move V10, V0
	677 Call 0x3EB2B30
	678 Add X0, X31, 224
	679 Move X1, X31
	680 Call FaceInfo.get_ascentLine, X0
	681 Move X8, [X19+1688]
	682 Compare X8, 0
	683 JumpIfEqual {2101}
	684 Move V8, V0
	685 NotImplemented "Instruction SCVTF not yet implemented."
	686 NotImplemented "Instruction FDIV not yet implemented."
	687 Multiply S0, S0, S9
	688 Multiply S1, S11, S10
	689 Multiply S0, S0, S13
	690 Add X1, X8, 72
	691 Add X0, X31, 224
	692 Move W2, 96
	693 Multiply S15, S0, S1
	694 Call 0x3EB2B30
	695 Add X0, X31, 224
	696 Move X1, X31
	697 Call FaceInfo.get_descentLine, X0
	698 Move V9, V0
	699 Move W8, [X19+604]
	700 Move TEMP, X8
	701 And TEMP, TEMP, 16
	702 Compare TEMP, 16
	703 JumpIfEqual {752}
	704 Move TEMP, X8
	705 And TEMP, TEMP, 8
	706 Compare TEMP, 8
	707 JumpIfEqual {777}
	708 Move S14, 1
	709 Move TEMP, X8
	710 And TEMP, TEMP, 32
	711 Compare TEMP, 32
	712 JumpIfNotEqual {803}
	713 Move X8, 0x5F7000
	714 Move X8, [X8+368]
	715 Move X0, [X8]
	716 Move W8, [X0+224]
	717 Compare W8, 0
	718 JumpIfNotEqual {720}
	719 Call 0x1C17DFC
	720 Move W0, W24
	721 Move X1, X31
	722 Call Char.IsLower, X0
	723 Move TEMP, X0
	724 And TEMP, TEMP, 1
	725 Compare TEMP, 1
	726 JumpIfNotEqual {803}
	727 Move X8, 0x5F7000
	728 Move X8, [X8+368]
	729 Move X0, [X8]
	730 Move W8, [X0+224]
	731 Compare W8, 0
	732 JumpIfNotEqual {734}
	733 Call 0x1C17DFC
	734 Move W0, W24
	735 Move X1, X31
	736 Call Char.ToUpper, X0
	737 Move V14, [X31+8]
	738 NotImplemented "Instruction CMP not yet implemented."
	739 NotImplemented "Instruction CSET not yet implemented."
	740 NotImplemented "Instruction CMP not yet implemented."
	741 Move X8, [X19+1160]
	742 NotImplemented "Instruction CSET not yet implemented."
	743 Or W9, W25, W9
	744 NotImplemented "Instruction CMP not yet implemented."
	745 Move S8, W31
	746 Move [X31+80], S14
	747 NotImplemented "Instruction FCSEL not yet implemented."
	748 Compare X8, 0
	749 JumpIfEqual {2101}
	750 Move W9, [X19+1172]
	751 Move S9, W31
	752 Move X8, 0x5F7000
	753 Move X8, [X8+368]
	754 Move X0, [X8]
	755 Move W8, [X0+224]
	756 Compare W8, 0
	757 JumpIfNotEqual {759}
	758 Call 0x1C17DFC
	759 Move W0, W24
	760 Move X1, X31
	761 Call Char.IsLower, X0
	762 Move S14, 1
	763 Move TEMP, X0
	764 And TEMP, TEMP, 1
	765 Compare TEMP, 1
	766 JumpIfNotEqual {803}
	767 Move X8, 0x5F7000
	768 Move X8, [X8+368]
	769 Move X0, [X8]
	770 Move W8, [X0+224]
	771 Compare W8, 0
	772 JumpIfNotEqual {774}
	773 Call 0x1C17DFC
	774 Move W0, W24
	775 Move X1, X31
	776 Call Char.ToUpper, X0
	777 Move X8, 0x5F7000
	778 Move X8, [X8+368]
	779 Move X0, [X8]
	780 Move W8, [X0+224]
	781 Compare W8, 0
	782 JumpIfNotEqual {784}
	783 Call 0x1C17DFC
	784 Move W0, W24
	785 Move X1, X31
	786 Call Char.IsUpper, X0
	787 Move S14, 1
	788 Move TEMP, X0
	789 And TEMP, TEMP, 1
	790 Compare TEMP, 1
	791 JumpIfNotEqual {803}
	792 Move X8, 0x5F7000
	793 Move X8, [X8+368]
	794 Move X0, [X8]
	795 Move W8, [X0+224]
	796 Compare W8, 0
	797 JumpIfNotEqual {799}
	798 Call 0x1C17DFC
	799 Move W0, W24
	800 Move X1, X31
	801 Call Char.ToLower, X0
	802 And W24, W0, 0xFFFF
	803 Move W8, [X19+1604]
	804 Compare W8, 0
	805 JumpIfNotEqual {593}
	806 Move X8, [X19+872]
	807 Compare X8, 0
	808 JumpIfEqual {2101}
	809 Move X8, [X8+56]
	810 Compare X8, 0
	811 JumpIfEqual {2101}
	812 NotImplemented "Instruction LDRSW not yet implemented."
	813 Move W10, [X8+24]
	814 NotImplemented "Instruction CMP not yet implemented."
	815 NotImplemented "Instruction MADD not yet implemented."
	816 Move X11, [X11+48]
	817 Move [X19+1608], X11
	818 Compare X11, 0
	819 JumpIfEqual {586}
	820 NotImplemented "Instruction MADD not yet implemented."
	821 Move W11, [X11+88]
	822 Move [X19+288], W11
	823 Compare W26, 0
	824 JumpIfEqual {836}
	825 Move X11, [X19+1144]
	826 Compare X11, 0
	827 JumpIfEqual {2101}
	828 Move W12, [X11+24]
	829 NotImplemented "Instruction CMP not yet implemented."
	830 Move W12, 12
	831 NotImplemented "Instruction SMADDL not yet implemented."
	832 Move W11, [X11+32]
	833 NotImplemented "Instruction CMP not yet implemented."
	834 Move W11, [X19+1176]
	835 NotImplemented "Instruction CMP not yet implemented."
	836 Move X8, [X19+256]
	837 Compare X8, 0
	838 JumpIfEqual {2101}
	839 Move V11, [X19+488]
	840 Add X0, X8, 80
	841 Move X1, X31
	842 Call FaceInfo.get_pointSize, X0
	843 Move X8, [X19+256]
	844 Compare X8, 0
	845 JumpIfEqual {2101}
	846 Move W25, W0
	847 Add X0, X8, 80
	848 Move X1, X31
	849 Call FaceInfo.get_scale, X0
	850 Move W8, [X19+773]
	851 Move V10, V0
	852 Move V0, [X31+32]
	853 Move S1, 1
	854 NotImplemented "Instruction CMP not yet implemented."
	855 Move W8, 0x2026
	856 NotImplemented "Instruction FCSEL not yet implemented."
	857 NotImplemented "Instruction CMP not yet implemented."
	858 NotImplemented "Instruction CSET not yet implemented."
	859 And W8, W26, W8
	860 Move S9, W31
	861 Move S8, W31
	862 Move TEMP, X8
	863 And TEMP, TEMP, 1
	864 Compare TEMP, 1
	865 JumpIfEqual {880}
	866 Move X8, [X19+256]
	867 Compare X8, 0
	868 JumpIfEqual {2101}
	869 Add X0, X8, 80
	870 Move X1, X31
	871 Call FaceInfo.get_ascentLine, X0
	872 Move X8, [X19+256]
	873 Compare X8, 0
	874 JumpIfEqual {2101}
	875 Add X0, X8, 80
	876 Move X1, X31
	877 Move V8, V0
	878 Call FaceInfo.get_descentLine, X0
	879 Move V9, V0
	880 Move X10, [X19+1608]
	881 Compare X10, 0
	882 JumpIfEqual {2101}
	883 Move X8, [X19+1160]
	884 Compare X8, 0
	885 JumpIfEqual {2101}
	886 Move W9, [X19+1172]
	887 Move W11, [X8+24]
	888 NotImplemented "Instruction CMP not yet implemented."
	889 Multiply S0, S14, S11
	890 NotImplemented "Instruction SCVTF not yet implemented."
	891 Move V2, [X19+1028]
	892 Move V3, [X10+44]
	893 NotImplemented "Instruction FDIV not yet implemented."
	894 Multiply S0, S0, S10
	895 Multiply S0, S0, S12
	896 Move X10, W9
	897 Multiply S0, S0, S2
	898 NotImplemented "Instruction MADD not yet implemented."
	899 Multiply S15, S0, S3
	900 Move [X31+80], S14
	901 Move [X10+44], W31
	902 Move X8, [X19+256]
	903 Compare X8, 0
	904 JumpIfEqual {2101}
	905 Add X1, X8, 80
	906 Add X0, X31, 224
	907 Move W2, 96
	908 Call 0x3EB2B30
	909 Add X0, X31, 224
	910 Move X1, X31
	911 Call FaceInfo.get_pointSize, X0
	912 Move X8, [X19+256]
	913 Compare X8, 0
	914 JumpIfEqual {2101}
	915 Move W26, W0
	916 Add X1, X8, 80
	917 Add X0, X31, 224
	918 Move W2, 96
	919 Call 0x3EB2B30
	920 Add X0, X31, 224
	921 Move X1, X31
	922 Call FaceInfo.get_scale, X0
	923 Move W9, [X19+773]
	924 Move V8, V0
	925 Move V0, [X31+32]
	926 Move X8, [X19+256]
	927 NotImplemented "Instruction CMP not yet implemented."
	928 Move S1, 1
	929 NotImplemented "Instruction FCSEL not yet implemented."
	930 Compare X8, 0
	931 JumpIfEqual {2101}
	932 Add X1, X8, 80
	933 Add X0, X31, 224
	934 Move W2, 96
	935 Call 0x3EB2B30
	936 Add X0, X31, 224
	937 Move X1, X31
	938 Call FaceInfo.get_ascentLine, X0
	939 Move X0, [X25+32]
	940 Compare X0, 0
	941 JumpIfEqual {2101}
	942 Add X8, X31, 3008
	943 Move X1, X31
	944 Move V9, V0
	945 Move V12, V14
	946 Call Glyph.get_metrics, X0
	947 Move V0, [X31+188]
	948 Move W8, [X31+3024]
	949 Add X0, X31, 160
	950 Move X1, X31
	951 Move [X31+10], V0
	952 Move [X31+176], W8
	953 Call GlyphMetrics.get_height, X0
	954 Move X0, [X25+32]
	955 Compare X0, 0
	956 JumpIfEqual {2101}
	957 Move V14, [X25+44]
	958 Move X1, X31
	959 Move V10, V0
	960 Call Glyph.get_scale, X0
	961 Move X8, [X19+256]
	962 Compare X8, 0
	963 JumpIfEqual {2101}
	964 Add X1, X8, 80
	965 Add X0, X31, 224
	966 Move W2, 96
	967 Move V11, V0
	968 Call 0x3EB2B30
	969 Add X0, X31, 224
	970 Move X1, X31
	971 Call FaceInfo.get_ascentLine, X0
	972 Move X8, [X19+256]
	973 Compare X8, 0
	974 JumpIfEqual {2101}
	975 NotImplemented "Instruction SCVTF not yet implemented."
	976 NotImplemented "Instruction FDIV not yet implemented."
	977 NotImplemented "Instruction FDIV not yet implemented."
	978 Multiply S2, S2, S14
	979 Multiply S1, S1, S8
	980 Multiply S2, S2, S11
	981 Multiply S1, S1, S13
	982 Multiply S15, S1, S2
	983 NotImplemented "Instruction FDIV not yet implemented."
	984 Add X1, X8, 80
	985 Add X0, X31, 224
	986 Move W2, 96
	987 Multiply S8, S9, S0
	988 Call 0x3EB2B30
	989 Add X0, X31, 224
	990 Move X1, X31
	991 Call FaceInfo.get_descentLine, X0
	992 Multiply S9, S9, S0
	993 Move V14, V12
	994 Move X8, [X19+1160]
	995 Move S13, W31
	996 Move [X19+1608], X25
	997 Compare X8, 0
	998 JumpIfEqual {2101}
	999 Move W9, [X19+1172]
	1000 Move W10, [X8+24]
	1001 NotImplemented "Instruction CMP not yet implemented."
	1002 Move X10, W9
	1003 NotImplemented "Instruction MADD not yet implemented."
	1004 Move W11, 1
	1005 Move [X31+80], S14
	1006 Move [X10+44], W11
	1007 Move [X10+352], S15
	1008 Move [X19+288], W21
	1009 NotImplemented "Instruction CMP not yet implemented."
	1010 NotImplemented "Instruction CSET not yet implemented."
	1011 NotImplemented "Instruction CMP not yet implemented."
	1012 NotImplemented "Instruction CSET not yet implemented."
	1013 Or W10, W25, W10
	1014 NotImplemented "Instruction CMP not yet implemented."
	1015 NotImplemented "Instruction FCSEL not yet implemented."
	1016 Move W10, [X8+24]
	1017 NotImplemented "Instruction CMP not yet implemented."
	1018 NotImplemented "Instruction SMADDL not yet implemented."
	1019 NotImplemented "Instruction STRH not yet implemented."
	1020 Move X8, [X19+1608]
	1021 Compare X8, 0
	1022 JumpIfEqual {2101}
	1023 Move X0, [X8+32]
	1024 Compare X0, 0
	1025 JumpIfEqual {2101}
	1026 Add X8, X31, 3008
	1027 Move X1, X31
	1028 Call Glyph.get_metrics, X0
	1029 Move V0, [X31+188]
	1030 Move W8, [X31+3024]
	1031 NotImplemented "Instruction CMP not yet implemented."
	1032 Move [X31+12], V0
	1033 Move [X31+208], W8
	1034 Move W26, W31
	1035 Move X8, 0x5F7000
	1036 Move X8, [X8+368]
	1037 Move X0, [X8]
	1038 Move W8, [X0+224]
	1039 Compare W8, 0
	1040 JumpIfNotEqual {1042}
	1041 Call 0x1C17DFC
	1042 Move W0, W24
	1043 Move X1, X31
	1044 Call Char.IsWhiteSpace, X0
	1045 And W26, W0, 1
	1046 Move W8, [X19+761]
	1047 Move V10, [X19+680]
	1048 Move [X19+764], W31
	1049 Move [X31+92], S10
	1050 Compare W8, 0
	1051 JumpIfEqual {1108}
	1052 Move X9, [X19+1608]
	1053 Compare X9, 0
	1054 JumpIfEqual {2101}
	1055 Move W8, [X28+488]
	1056 Move W21, [X9+40]
	1057 Move W9, [X31+88]
	1058 NotImplemented "Instruction CMP not yet implemented."
	1059 Move X9, [X19+872]
	1060 Compare X9, 0
	1061 JumpIfEqual {2101}
	1062 Move X9, [X9+56]
	1063 Compare X9, 0
	1064 JumpIfEqual {2101}
	1065 Move W10, [X9+24]
	1066 Add W8, W8, 1
	1067 NotImplemented "Instruction CMP not yet implemented."
	1068 NotImplemented "Instruction SMADDL not yet implemented."
	1069 Move X8, [X8+48]
	1070 Compare X8, 0
	1071 JumpIfEqual {2101}
	1072 Move X9, [X19+256]
	1073 Compare X9, 0
	1074 JumpIfEqual {2101}
	1075 Move X9, [X9+296]
	1076 Compare X9, 0
	1077 JumpIfEqual {2101}
	1078 Move X0, [X9+24]
	1079 Compare X0, 0
	1080 JumpIfEqual {2101}
	1081 Move X9, 0x65A000
	1082 Move W8, [X8+40]
	1083 Move X9, [X9+800]
	1084 Add X2, X31, 152
	1085 Or W1, W21, W8
	1086 Move X3, [X9]
	1087 Call Dictionary`2<UInt32, Object>.TryGetValue, X0, X1, X2
	1088 Move S11, W31
	1089 Move S0, W31
	1090 Move TEMP, X0
	1091 And TEMP, TEMP, 1
	1092 Compare TEMP, 1
	1093 JumpIfNotEqual {1117}
	1094 Move X8, [X31+152]
	1095 Move [X31+72], S0
	1096 Move S0, W31
	1097 Compare X8, 0
	1098 JumpIfEqual {2101}
	1099 Move W9, [X8+57]
	1100 Move V1, [X31+92]
	1101 Move S11, [X8+20]
	1102 Move S12, [X8+24]
	1103 Move S10, [X8+28]
	1104 Move S13, [X8+32]
	1105 And W31, W9, 1
	1106 NotImplemented "Instruction FCSEL not yet implemented."
	1107 Move [X31+92], S1
	1108 Move S0, W31
	1109 Move [X31+72], S0
	1110 Move S10, W31
	1111 Move S0, W31
	1112 Move [X31+72], S0
	1113 Move S11, W31
	1114 Move S12, W31
	1115 Move S10, W31
	1116 Move S13, W31
	1117 Move [X31+72], S0
	1118 Move S12, W31
	1119 Move S10, W31
	1120 Move S13, W31
	1121 Move W8, [X28+488]
	1122 Subtract W8, W8, 1
	1123 Move X9, [X19+872]
	1124 Compare X9, 0
	1125 JumpIfEqual {2101}
	1126 Move X9, [X9+56]
	1127 Compare X9, 0
	1128 JumpIfEqual {2101}
	1129 Move W10, [X9+24]
	1130 NotImplemented "Instruction CMP not yet implemented."
	1131 NotImplemented "Instruction UMADDL not yet implemented."
	1132 Move X8, [X8+48]
	1133 Compare X8, 0
	1134 JumpIfEqual {2101}
	1135 Move X9, [X19+256]
	1136 Compare X9, 0
	1137 JumpIfEqual {2101}
	1138 Move X9, [X9+296]
	1139 Compare X9, 0
	1140 JumpIfEqual {2101}
	1141 Move X0, [X9+24]
	1142 Compare X0, 0
	1143 JumpIfEqual {2101}
	1144 Move X9, 0x65A000
	1145 Move W8, [X8+40]
	1146 Move X9, [X9+800]
	1147 Add X2, X31, 152
	1148 Or W1, W8, W21
	1149 Move X3, [X9]
	1150 Call Dictionary`2<UInt32, Object>.TryGetValue, X0, X1, X2
	1151 Move TEMP, X0
	1152 And TEMP, TEMP, 1
	1153 Compare TEMP, 1
	1154 JumpIfNotEqual {1178}
	1155 Move X8, [X31+152]
	1156 Compare X8, 0
	1157 JumpIfEqual {2101}
	1158 Move S4, [X8+40]
	1159 Move S5, [X8+44]
	1160 Move S6, [X8+48]
	1161 Move S7, [X8+52]
	1162 Move V0, V11
	1163 Move V1, V12
	1164 Move V2, V10
	1165 Move V3, V13
	1166 Move X0, X31
	1167 Call TMP_GlyphValueRecord.op_Addition, X0, X1
	1168 Move X8, [X31+152]
	1169 Compare X8, 0
	1170 JumpIfEqual {2101}
	1171 Move W8, [X8+57]
	1172 Move V0, [X31+92]
	1173 Move S13, W31
	1174 Move V10, V2
	1175 And W31, W8, 1
	1176 NotImplemented "Instruction FCSEL not yet implemented."
	1177 Move [X31+92], S0
	1178 Move S13, W31
	1179 Move [X19+764], S10
	1180 Move V12, [X19+688]
	1181 NotImplemented "Instruction FCMP not yet implemented."
	1182 Move X8, [X19+1608]
	1183 Compare X8, 0
	1184 JumpIfEqual {2101}
	1185 Move X0, [X8+32]
	1186 Compare X0, 0
	1187 JumpIfEqual {2101}
	1188 Add X8, X31, 3008
	1189 Move X1, X31
	1190 Call Glyph.get_metrics, X0
	1191 Move V0, [X31+188]
	1192 Move W8, [X31+3024]
	1193 Add X0, X31, 160
	1194 Move X1, X31
	1195 Move [X31+10], V0
	1196 Move [X31+176], W8
	1197 Call GlyphMetrics.get_width, X0
	1198 Move X8, [X19+1608]
	1199 Compare X8, 0
	1200 JumpIfEqual {2101}
	1201 Move X0, [X8+32]
	1202 Compare X0, 0
	1203 JumpIfEqual {2101}
	1204 Add X8, X31, 3008
	1205 Move X1, X31
	1206 Move V11, V0
	1207 Call Glyph.get_metrics, X0
	1208 Move V0, [X31+188]
	1209 Move W8, [X31+3024]
	1210 Add X0, X31, 160
	1211 Move X1, X31
	1212 Move [X31+10], V0
	1213 Move [X31+176], W8
	1214 Call GlyphMetrics.get_horizontalBearingX, X0
	1215 Move S3, 0.5
	1216 Move V1, [X19+724]
	1217 Multiply S2, S12, S3
	1218 Multiply S3, S11, S3
	1219 Add S0, S3, S0
	1220 Multiply S0, S14, S0
	1221 Move V3, [X19+1600]
	1222 Subtract S0, S2, S0
	1223 Move S2, 1
	1224 Subtract S1, S2, S1
	1225 Multiply S0, S1, S0
	1226 Move [X31+72], S0
	1227 Add S0, S3, S0
	1228 Move [X19+1600], S0
	1229 Move W10, [X19+1604]
	1230 Move S11, W31
	1231 Compare W27, 0
	1232 JumpIfNotEqual {1244}
	1233 Compare W10, 0
	1234 JumpIfNotEqual {1244}
	1235 Move W8, [X19+604]
	1236 Move TEMP, X8
	1237 And TEMP, TEMP, 1
	1238 Compare TEMP, 1
	1239 JumpIfNotEqual {1244}
	1240 Move X8, [X19+256]
	1241 Compare X8, 0
	1242 JumpIfEqual {2101}
	1243 Move V11, [X8+436]
	1244 Move X8, [X19+1160]
	1245 Compare X8, 0
	1246 JumpIfEqual {2101}
	1247 NotImplemented "Instruction LDRSW not yet implemented."
	1248 Move W11, [X8+24]
	1249 NotImplemented "Instruction CMP not yet implemented."
	1250 Move V0, [X19+1240]
	1251 Move V1, [X19+1564]
	1252 NotImplemented "Instruction NOP not yet implemented."
	1253 NotImplemented "Instruction MADD not yet implemented."
	1254 Multiply S3, S8, S14
	1255 Subtract S2, S13, S0
	1256 Add S2, S2, S1
	1257 Move [X11+332], S2
	1258 Compare W10, 0
	1259 JumpIfEqual {1261}
	1260 Multiply S2, S9, S14
	1261 Move V4, [X31+80]
	1262 Multiply S2, S9, S14
	1263 NotImplemented "Instruction FDIV not yet implemented."
	1264 NotImplemented "Instruction FDIV not yet implemented."
	1265 Add S8, S1, S3
	1266 Compare W26, 0
	1267 JumpIfEqual {1282}
	1268 Move W10, [X19+1176]
	1269 NotImplemented "Instruction CMP not yet implemented."
	1270 Move V1, [X19+1224]
	1271 NotImplemented "Instruction NOP not yet implemented."
	1272 NotImplemented "Instruction MADD not yet implemented."
	1273 Move [X8+340], S1
	1274 Move V2, [X19+1228]
	1275 Subtract S1, S1, S0
	1276 Move [X8+328], S1
	1277 Move [X8+344], S2
	1278 Move [X19+1216], S1
	1279 Subtract S1, S2, S0
	1280 Move [X8+336], S1
	1281 Move [X19+1220], S1
	1282 Add S2, S1, S2
	1283 NotImplemented "Instruction FCMP not yet implemented."
	1284 Move V3, V2
	1285 Move V4, V8
	1286 Move V3, [X19+1028]
	1287 Subtract S4, S8, S1
	1288 Subtract S1, S2, S1
	1289 NotImplemented "Instruction FDIV not yet implemented."
	1290 NotImplemented "Instruction FDIV not yet implemented."
	1291 NotImplemented "Instruction FCMP not yet implemented."
	1292 NotImplemented "Instruction FCSEL not yet implemented."
	1293 NotImplemented "Instruction FCMP not yet implemented."
	1294 NotImplemented "Instruction FCSEL not yet implemented."
	1295 Move V1, [X19+1224]
	1296 Move V5, [X19+1228]
	1297 NotImplemented "Instruction NOP not yet implemented."
	1298 NotImplemented "Instruction MADD not yet implemented."
	1299 Subtract S2, S2, S0
	1300 NotImplemented "Instruction FCMP not yet implemented."
	1301 NotImplemented "Instruction FCSEL not yet implemented."
	1302 NotImplemented "Instruction FCMP not yet implemented."
	1303 NotImplemented "Instruction FCSEL not yet implemented."
	1304 Move [X19+1228], S5
	1305 Subtract S5, S8, S0
	1306 Move [X19+1224], S1
	1307 Move [X8+340], S4
	1308 Move [X8+344], S3
	1309 Move [X8+328], S5
	1310 Move [X19+1216], S5
	1311 Move [X8+336], S2
	1312 Move W8, [X19+1192]
	1313 Move [X19+1220], S2
	1314 Compare W8, 0
	1315 JumpIfEqual {1319}
	1316 Move W8, [X19+828]
	1317 Compare W8, 0
	1318 JumpIfEqual {1334}
	1319 Move X8, [X19+256]
	1320 Move [X19+1208], S1
	1321 Compare X8, 0
	1322 JumpIfEqual {2101}
	1323 Move V9, [X19+1212]
	1324 Add X0, X8, 80
	1325 Move X1, X31
	1326 Call FaceInfo.get_capLine, X0
	1327 Move V1, [X31+80]
	1328 Multiply S0, S14, S0
	1329 NotImplemented "Instruction FDIV not yet implemented."
	1330 Move V0, [X19+1240]
	1331 NotImplemented "Instruction FCMP not yet implemented."
	1332 NotImplemented "Instruction FCSEL not yet implemented."
	1333 Move [X19+1212], S1
	1334 NotImplemented "Instruction FCMP not yet implemented."
	1335 Compare W26, 0
	1336 JumpIfEqual {1340}
	1337 Move W8, [X19+1172]
	1338 Move W9, [X19+1176]
	1339 NotImplemented "Instruction CMP not yet implemented."
	1340 Move V0, [X19+1204]
	1341 NotImplemented "Instruction FCMP not yet implemented."
	1342 NotImplemented "Instruction FCSEL not yet implemented."
	1343 Move [X19+1204], S0
	1344 Move W8, [X19+632]
	1345 And W31, W8, 24
	1346 NotImplemented "Instruction CSET not yet implemented."
	1347 NotImplemented "Instruction CMP not yet implemented."
	1348 Move W27, 1
	1349 Compare W26, 0
	1350 JumpIfNotEqual {1359}
	1351 NotImplemented "Instruction CMP not yet implemented."
	1352 Move W8, 0x200B
	1353 NotImplemented "Instruction CMP not yet implemented."
	1354 NotImplemented "Instruction CMP not yet implemented."
	1355 Move W8, [X19+632]
	1356 And W31, W8, 24
	1357 NotImplemented "Instruction CSET not yet implemented."
	1358 NotImplemented "Instruction CMP not yet implemented."
	1359 Move W8, [X31+60]
	1360 NotImplemented "Instruction ORN not yet implemented."
	1361 Move TEMP, X8
	1362 And TEMP, TEMP, 1
	1363 Compare TEMP, 1
	1364 JumpIfNotEqual {1367}
	1365 Move W8, [X19+1604]
	1366 NotImplemented "Instruction CMP not yet implemented."
	1367 Move W27, W31
	1368 Move V0, [X19+848]
	1369 Move V4, [X31+44]
	1370 Move V1, [X19+852]
	1371 Move V2, [X19+864]
	1372 Move V3, [X19+1600]
	1373 Subtract S0, S4, S0
	1374 Subtract S0, S0, S1
	1375 NotImplemented "Instruction FCMP not yet implemented."
	1376 Move S1, -1
	1377 NotImplemented "Instruction FCCMP not yet implemented."
	1378 Add X0, X31, 192
	1379 Move X1, X31
	1380 NotImplemented "Instruction FCSEL not yet implemented."
	1381 NotImplemented "Instruction FABS not yet implemented."
	1382 Call GlyphMetrics.get_horizontalAdvance, X0
	1383 Move V1, [X19+724]
	1384 Move X8, -50417664
	1385 Move V2, [X8+400]
	1386 Move S4, 1
	1387 NotImplemented "Instruction CMP not yet implemented."
	1388 Subtract S1, S4, S1
	1389 NotImplemented "Instruction FCSEL not yet implemented."
	1390 NotImplemented "Instruction CMP not yet implemented."
	1391 Multiply S0, S0, S1
	1392 NotImplemented "Instruction FCSEL not yet implemented."
	1393 Multiply S0, S3, S0
	1394 Move W9, [X31+48]
	1395 Add S12, S12, S0
	1396 Multiply S0, S9, S8
	1397 NotImplemented "Instruction FCMP not yet implemented."
	1398 NotImplemented "Instruction CSET not yet implemented."
	1399 Or W8, W8, W9
	1400 Move [X31+68], S12
	1401 Move TEMP, X8
	1402 And TEMP, TEMP, 1
	1403 Compare TEMP, 1
	1404 JumpIfEqual {1408}
	1405 Move W8, [X19+1172]
	1406 Move W9, [X19+1176]
	1407 NotImplemented "Instruction CMP not yet implemented."
	1408 Move V12, [X19+848]
	1409 Move V15, [X19+852]
	1410 Compare W27, 0
	1411 JumpIfEqual {1468}
	1412 Move X8, [X19+256]
	1413 Compare X8, 0
	1414 JumpIfEqual {2101}
	1415 Add X1, X8, 80
	1416 Add X0, X31, 224
	1417 Move W2, 96
	1418 Call 0x3EB2B30
	1419 Add X0, X31, 224
	1420 Move X1, X31
	1421 Call FaceInfo.get_tabWidth, X0
	1422 Move X8, [X19+256]
	1423 Compare X8, 0
	1424 JumpIfEqual {2101}
	1425 Move V1, [X8+441]
	1426 Move V2, [X19+1600]
	1427 NotImplemented "Instruction UCVTF not yet implemented."
	1428 Multiply S0, S0, S1
	1429 Multiply S0, S14, S0
	1430 NotImplemented "Instruction FDIV not yet implemented."
	1431 NotImplemented "Instruction FRINTP not yet implemented."
	1432 Multiply S1, S0, S1
	1433 Add S0, S2, S0
	1434 NotImplemented "Instruction FCMP not yet implemented."
	1435 NotImplemented "Instruction FCSEL not yet implemented."
	1436 Add X1, X31, 2112
	1437 Move X0, X19
	1438 Call TMP_Text.RestoreWordWrappingState, X0, X1
	1439 Move X8, [X19+1160]
	1440 Compare X8, 0
	1441 JumpIfEqual {2101}
	1442 NotImplemented "Instruction LDRSW not yet implemented."
	1443 Move W11, [X8+24]
	1444 Subtract W10, W9, 1
	1445 NotImplemented "Instruction CMP not yet implemented."
	1446 NotImplemented "Instruction SMADDL not yet implemented."
	1447 NotImplemented "Instruction LDRH not yet implemented."
	1448 Move W13, [X31+60]
	1449 Move W23, W0
	1450 NotImplemented "Instruction CMP not yet implemented."
	1451 NotImplemented "Instruction CSET not yet implemented."
	1452 Or W12, W13, W12
	1453 Move TEMP, X12
	1454 And TEMP, TEMP, 1
	1455 Compare TEMP, 1
	1456 JumpIfEqual {1460}
	1457 Move W12, [X19+736]
	1458 Compare W12, 0
	1459 JumpIfEqual {2019}
	1460 NotImplemented "Instruction CMP not yet implemented."
	1461 NotImplemented "Instruction MADD not yet implemented."
	1462 NotImplemented "Instruction LDRH not yet implemented."
	1463 NotImplemented "Instruction CMP not yet implemented."
	1464 Move W8, 1
	1465 Move [X31+60], W8
	1466 Move S15, [X31+52]
	1467 Move S12, [X31+56]
	1468 Move V0, [X19+688]
	1469 Move V8, [X19+1600]
	1470 NotImplemented "Instruction FCMP not yet implemented."
	1471 Add X0, X31, 192
	1472 Move X1, X31
	1473 Call GlyphMetrics.get_horizontalAdvance, X0
	1474 Move X8, [X19+256]
	1475 Compare X8, 0
	1476 JumpIfEqual {2101}
	1477 Move V1, [X8+428]
	1478 Move V4, [X31+92]
	1479 Move V3, [X19+724]
	1480 Move V2, [X19+684]
	1481 Add S0, S10, S0
	1482 Add S1, S4, S1
	1483 Move S4, 1
	1484 Subtract S3, S4, S3
	1485 Move V4, [X31+64]
	1486 Add S1, S11, S1
	1487 Multiply S0, S14, S0
	1488 Multiply S1, S4, S1
	1489 Add S0, S0, S1
	1490 Add S0, S2, S0
	1491 Multiply S0, S3, S0
	1492 Move X8, [X19+256]
	1493 Compare X8, 0
	1494 JumpIfEqual {2101}
	1495 Move V4, [X31+72]
	1496 Move V1, [X8+428]
	1497 Move V2, [X19+724]
	1498 Move V3, [X19+684]
	1499 Subtract S0, S0, S4
	1500 Move V4, [X31+92]
	1501 Add S1, S4, S1
	1502 Move S4, 1
	1503 Subtract S2, S4, S2
	1504 Move V4, [X31+64]
	1505 Multiply S1, S4, S1
	1506 Add S0, S0, S1
	1507 Add S0, S3, S0
	1508 Multiply S0, S2, S0
	1509 Move W8, 0x200B
	1510 Add S0, S8, S0
	1511 NotImplemented "Instruction CMP not yet implemented."
	1512 Move [X19+1600], S0
	1513 Compare W26, 0
	1514 JumpIfEqual {1520}
	1515 Move V1, [X19+692]
	1516 Move V2, [X31+64]
	1517 Multiply S1, S2, S1
	1518 Add S0, S0, S1
	1519 Move [X19+1600], S0
	1520 NotImplemented "Instruction CMP not yet implemented."
	1521 Move V1, [X31+84]
	1522 Move V3, [X31+76]
	1523 Move S2, W31
	1524 Add S0, S1, S0
	1525 Move V1, [X19+1036]
	1526 NotImplemented "Instruction FCMP not yet implemented."
	1527 NotImplemented "Instruction FCSEL not yet implemented."
	1528 Move S0, W31
	1529 Move [X31+84], S0
	1530 Add S0, S1, S2
	1531 Move [X31+76], S3
	1532 Move W21, W31
	1533 Move [X19+1600], S0
	1534 Move W3, [X28+488]
	1535 Move W8, [X31+88]
	1536 NotImplemented "Instruction CMP not yet implemented."
	1537 Move [X31+52], S15
	1538 Move [X31+60], S12
	1539 Move TEMP, X22
	1540 And TEMP, TEMP, 1
	1541 Compare TEMP, 1
	1542 JumpIfEqual {1546}
	1543 Move W8, [X19+736]
	1544 Or W8, W8, 2
	1545 NotImplemented "Instruction CMP not yet implemented."
	1546 Compare W26, 0
	1547 JumpIfEqual {1652}
	1548 Move W8, [X19+730]
	1549 Compare W8, 0
	1550 JumpIfEqual {1685}
	1551 Move W8, [X31+28]
	1552 Move TEMP, X8
	1553 And TEMP, TEMP, 1
	1554 Compare TEMP, 1
	1555 JumpIfNotEqual {1659}
	1556 Move X0, X31
	1557 Call TMP_Settings.get_linebreakingRules
	1558 Compare X0, 0
	1559 JumpIfEqual {2101}
	1560 Move X0, [X0+16]
	1561 Compare X0, 0
	1562 JumpIfEqual {2101}
	1563 Move X8, 0x659000
	1564 Move X8, [X8+792]
	1565 Move W1, W24
	1566 Move X2, [X8]
	1567 Call Dictionary`2<Int32, Char>.ContainsKey, X0, X1
	1568 Move TEMP, X0
	1569 And TEMP, TEMP, 1
	1570 Compare TEMP, 1
	1571 JumpIfEqual {1577}
	1572 Move W3, [X19+1172]
	1573 Add X1, X31, 2112
	1574 Move X0, X19
	1575 Move W2, W23
	1576 Call TMP_Text.SaveWordWrappingState, X0, X1, X2, X3
	1577 Move [X31+28], W31
	1578 NotImplemented "Instruction CMP not yet implemented."
	1579 NotImplemented "Instruction CSET not yet implemented."
	1580 NotImplemented "Instruction CMP not yet implemented."
	1581 Move W8, 1
	1582 NotImplemented "Instruction LSLV not yet implemented."
	1583 Move W9, 3080
	1584 And W31, W8, W9
	1585 Move TEMP, 0x2027
	1586 Not TEMP
	1587 Move W8, TEMP
	1588 Add W8, W24, W8
	1589 NotImplemented "Instruction CMP not yet implemented."
	1590 Move V0, [X19+1240]
	1591 NotImplemented "Instruction FCMP not yet implemented."
	1592 Move X8, 0x5F4000
	1593 Move X8, [X8+1448]
	1594 Move V8, [X19+1224]
	1595 Move V9, [X19+1232]
	1596 Move X0, [X8]
	1597 Move W8, [X0+224]
	1598 Compare W8, 0
	1599 JumpIfNotEqual {1601}
	1600 Call 0x1C17DFC
	1601 Move V2, [X31+16]
	1602 Subtract S0, S8, S9
	1603 NotImplemented "Instruction FABS not yet implemented."
	1604 NotImplemented "Instruction FCMP not yet implemented."
	1605 Move W8, [X19+708]
	1606 Compare W8, 0
	1607 JumpIfNotEqual {1617}
	1608 Move W8, [X19+828]
	1609 Compare W8, 0
	1610 JumpIfNotEqual {1617}
	1611 Move V1, [X19+1220]
	1612 Move V2, [X19+1240]
	1613 Subtract S1, S1, S0
	1614 Add S0, S0, S2
	1615 Move [X19+1220], S1
	1616 Move [X19+1240], S0
	1617 Move V0, [X19+1228]
	1618 Move V1, [X19+1240]
	1619 Move V2, [X31+84]
	1620 Move V3, [X31+68]
	1621 Move W3, [X19+1172]
	1622 Subtract S0, S0, S1
	1623 Move V1, [X19+1220]
	1624 Add S2, S2, S3
	1625 Move V3, [X31+76]
	1626 Move W8, [X31+88]
	1627 NotImplemented "Instruction FCMP not yet implemented."
	1628 NotImplemented "Instruction FCSEL not yet implemented."
	1629 Move V1, [X19+1208]
	1630 Add S2, S12, S2
	1631 Add S2, S15, S2
	1632 NotImplemented "Instruction FCMP not yet implemented."
	1633 NotImplemented "Instruction FCSEL not yet implemented."
	1634 NotImplemented "Instruction CMP not yet implemented."
	1635 Move [X19+1220], S0
	1636 NotImplemented "Instruction FCSEL not yet implemented."
	1637 NotImplemented "Instruction FCSEL not yet implemented."
	1638 Subtract S0, S1, S0
	1639 Move [X19+828], W31
	1640 Move [X31+76], S3
	1641 Move [X31+84], S2
	1642 Move [X31+40], S0
	1643 Move TEMP, X21
	1644 And TEMP, TEMP, 1
	1645 Compare TEMP, 1
	1646 JumpIfEqual {1811}
	1647 Move W8, 0x2027
	1648 NotImplemented "Instruction CMP not yet implemented."
	1649 NotImplemented "Instruction CMP not yet implemented."
	1650 NotImplemented "Instruction CMP not yet implemented."
	1651 NotImplemented "Instruction CMP not yet implemented."
	1652 NotImplemented "Instruction CMP not yet implemented."
	1653 Move W8, 0x200B
	1654 NotImplemented "Instruction CMP not yet implemented."
	1655 NotImplemented "Instruction CMP not yet implemented."
	1656 Move W8, [X19+730]
	1657 Compare W8, 0
	1658 JumpIfNotEqual {1551}
	1659 Move W8, [X31+36]
	1660 Move TEMP, X8
	1661 And TEMP, TEMP, 1
	1662 Compare TEMP, 1
	1663 JumpIfNotEqual {1977}
	1664 Move W8, [X31+60]
	1665 NotImplemented "Instruction ORN not yet implemented."
	1666 Move TEMP, X8
	1667 And TEMP, TEMP, 1
	1668 Compare TEMP, 1
	1669 JumpIfNotEqual {1672}
	1670 Compare W26, 0
	1671 JumpIfEqual {1677}
	1672 Move W3, [X19+1172]
	1673 Add X1, X31, 336
	1674 Move X0, X19
	1675 Move W2, W23
	1676 Call TMP_Text.SaveWordWrappingState, X0, X1, X2, X3
	1677 Move W3, [X19+1172]
	1678 Add X1, X31, 2112
	1679 Move X0, X19
	1680 Move W2, W23
	1681 Call TMP_Text.SaveWordWrappingState, X0, X1, X2, X3
	1682 Move [X31+28], W31
	1683 Move W8, 1
	1684 Move [X31+36], W8
	1685 Move TEMP, 0x2006
	1686 Not TEMP
	1687 Move W8, TEMP
	1688 Add W8, W24, W8
	1689 NotImplemented "Instruction CMP not yet implemented."
	1690 Move W9, 1
	1691 NotImplemented "Instruction LSLV not yet implemented."
	1692 Move X9, 1025
	1693 NotImplemented "Instruction MOVK not yet implemented."
	1694 And X31, X8, X9
	1695 NotImplemented "Instruction CMP not yet implemented."
	1696 Move W8, 0x2060
	1697 NotImplemented "Instruction CMP not yet implemented."
	1698 Move TEMP, 0xAC00
	1699 Not TEMP
	1700 Move W8, TEMP
	1701 Add W8, W24, W8
	1702 Move W9, 0x2BFE
	1703 NotImplemented "Instruction CMP not yet implemented."
	1704 Move TEMP, 0x1100
	1705 Not TEMP
	1706 Move W8, TEMP
	1707 Add W8, W24, W8
	1708 NotImplemented "Instruction CMP not yet implemented."
	1709 Move TEMP, 0xA960
	1710 Not TEMP
	1711 Move W8, TEMP
	1712 Add W8, W24, W8
	1713 NotImplemented "Instruction CMP not yet implemented."
	1714 Move X0, X31
	1715 Call TMP_Settings.get_useModernHangulLineBreakingRules
	1716 Move TEMP, X0
	1717 And TEMP, TEMP, 1
	1718 Compare TEMP, 1
	1719 JumpIfNotEqual {1741}
	1720 Move TEMP, 0xFF00
	1721 Not TEMP
	1722 Move W8, TEMP
	1723 Add W8, W24, W8
	1724 NotImplemented "Instruction CMP not yet implemented."
	1725 Move TEMP, 0xFE30
	1726 Not TEMP
	1727 Move W8, TEMP
	1728 Add W8, W24, W8
	1729 NotImplemented "Instruction CMP not yet implemented."
	1730 Move TEMP, 0x2E80
	1731 Not TEMP
	1732 Move W8, TEMP
	1733 Add W8, W24, W8
	1734 Move W9, 0x717E
	1735 NotImplemented "Instruction CMP not yet implemented."
	1736 Move TEMP, 0xF900
	1737 Not TEMP
	1738 Move W8, TEMP
	1739 Add W8, W24, W8
	1740 NotImplemented "Instruction CMP not yet implemented."
	1741 Move X0, X31
	1742 Call TMP_Settings.get_linebreakingRules
	1743 Compare X0, 0
	1744 JumpIfEqual {2101}
	1745 Move X0, [X0+16]
	1746 Compare X0, 0
	1747 JumpIfEqual {2101}
	1748 Move X8, 0x659000
	1749 Move X8, [X8+792]
	1750 Move W1, W24
	1751 Move X2, [X8]
	1752 Call Dictionary`2<Int32, Char>.ContainsKey, X0, X1
	1753 Move W8, [X28+488]
	1754 Move W9, [X31+88]
	1755 Move W24, W0
	1756 NotImplemented "Instruction CMP not yet implemented."
	1757 Move X0, X31
	1758 Call TMP_Settings.get_linebreakingRules
	1759 Compare X0, 0
	1760 JumpIfEqual {2101}
	1761 Move X8, [X19+1160]
	1762 Compare X8, 0
	1763 JumpIfEqual {2101}
	1764 Move W9, [X28+488]
	1765 Move W10, [X8+24]
	1766 Add W9, W9, 1
	1767 NotImplemented "Instruction CMP not yet implemented."
	1768 Move X0, [X0+24]
	1769 Compare X0, 0
	1770 JumpIfEqual {2101}
	1771 NotImplemented "Instruction SMADDL not yet implemented."
	1772 NotImplemented "Instruction LDRH not yet implemented."
	1773 Move X8, 0x659000
	1774 Move X8, [X8+792]
	1775 Move X2, [X8]
	1776 Call Dictionary`2<Int32, Char>.ContainsKey, X0, X1
	1777 Move W8, [X31+36]
	1778 NotImplemented "Instruction ORN not yet implemented."
	1779 Move TEMP, X8
	1780 And TEMP, TEMP, 1
	1781 Compare TEMP, 1
	1782 JumpIfNotEqual {2080}
	1783 Move TEMP, X0
	1784 And TEMP, TEMP, 1
	1785 Compare TEMP, 1
	1786 JumpIfNotEqual {2075}
	1787 Move W8, [X31+36]
	1788 Move TEMP, X8
	1789 And TEMP, TEMP, 1
	1790 Compare TEMP, 1
	1791 JumpIfNotEqual {2080}
	1792 Compare W26, 0
	1793 JumpIfEqual {1799}
	1794 Move W3, [X19+1172]
	1795 Add X1, X31, 336
	1796 Move X0, X19
	1797 Move W2, W23
	1798 Call TMP_Text.SaveWordWrappingState, X0, X1, X2, X3
	1799 Move W3, [X19+1172]
	1800 Add X1, X31, 2112
	1801 Move X0, X19
	1802 Move W2, W23
	1803 Call TMP_Text.SaveWordWrappingState, X0, X1, X2, X3
	1804 Move W8, 1
	1805 Move [X31+28], W8
	1806 Move TEMP, 0x2027
	1807 Not TEMP
	1808 Move W8, TEMP
	1809 Add W8, W24, W8
	1810 NotImplemented "Instruction CMP not yet implemented."
	1811 Add X1, X31, 1224
	1812 Move X0, X19
	1813 Move W2, W23
	1814 Call TMP_Text.SaveWordWrappingState, X0, X1, X2, X3
	1815 Move W3, [X19+1172]
	1816 Add X1, X31, 2112
	1817 Move X0, X19
	1818 Move W2, W23
	1819 Call TMP_Text.SaveWordWrappingState, X0, X1, X2, X3
	1820 Move W8, [X19+1192]
	1821 NotImplemented "Instruction LDRSW not yet implemented."
	1822 Move X10, [X19+1160]
	1823 Add W11, W8, 1
	1824 Add W8, W9, 1
	1825 Move [X19+1192], W11
	1826 Move [X19+1176], W8
	1827 Compare X10, 0
	1828 JumpIfEqual {2101}
	1829 Move W11, [X10+24]
	1830 NotImplemented "Instruction CMP not yet implemented."
	1831 Move X11, -50417664
	1832 Move V0, [X19+704]
	1833 Move V1, [X11+532]
	1834 NotImplemented "Instruction NOP not yet implemented."
	1835 NotImplemented "Instruction MADD not yet implemented."
	1836 Move V8, [X9+340]
	1837 NotImplemented "Instruction FCMP not yet implemented."
	1838 Move W9, 0x2029
	1839 NotImplemented "Instruction CMP not yet implemented."
	1840 NotImplemented "Instruction CSET not yet implemented."
	1841 Move S0, W31
	1842 NotImplemented "Instruction BIC not yet implemented."
	1843 Move S1, W31
	1844 Move TEMP, X9
	1845 And TEMP, TEMP, 1
	1846 Compare TEMP, 1
	1847 JumpIfEqual {1849}
	1848 Move V1, [X19+716]
	1849 Move V2, [X19+1228]
	1850 Move V3, [X19+700]
	1851 Move V4, [X19+696]
	1852 Move V5, [X19+1240]
	1853 Subtract S0, S0, S2
	1854 Move V2, [X31+24]
	1855 Add S0, S8, S0
	1856 Add S1, S4, S1
	1857 Move W9, W31
	1858 Add S2, S2, S3
	1859 Move V3, [X31+20]
	1860 Multiply S2, S3, S2
	1861 Add S0, S0, S2
	1862 Move V2, [X31+64]
	1863 Multiply S1, S2, S1
	1864 Add S0, S0, S1
	1865 Add S0, S0, S5
	1866 Move W9, 0x2029
	1867 NotImplemented "Instruction CMP not yet implemented."
	1868 NotImplemented "Instruction CSET not yet implemented."
	1869 NotImplemented "Instruction BIC not yet implemented."
	1870 Move S1, W31
	1871 Move TEMP, X9
	1872 And TEMP, TEMP, 1
	1873 Compare TEMP, 1
	1874 JumpIfEqual {1876}
	1875 Move V1, [X19+716]
	1876 Move V2, [X19+696]
	1877 Move V3, [X19+1240]
	1878 Move W9, 1
	1879 Add S1, S2, S1
	1880 Move V2, [X31+64]
	1881 Multiply S1, S2, S1
	1882 Add S0, S0, S1
	1883 Add S0, S3, S0
	1884 Move [X31+52], S15
	1885 Move [X31+60], S12
	1886 Move [X19+1240], S0
	1887 Move [X19+708], W9
	1888 Move X21, 0x659000
	1889 Move X21, [X21+1000]
	1890 Move X0, [X21]
	1891 Move W9, [X0+224]
	1892 Compare W9, 0
	1893 JumpIfNotEqual {1898}
	1894 Call 0x1C17DFC
	1895 Move W8, [X28+488]
	1896 Move X0, [X21]
	1897 Add W8, W8, 1
	1898 Move X9, [X0+184]
	1899 Move V0, [X19+1032]
	1900 Move V1, [X19+1036]
	1901 Move V2, [X9+5544]
	1902 Add S0, S0, S13
	1903 Add S0, S0, S1
	1904 Move [X19+1600], S0
	1905 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	1906 Move [X19+1232], S8
	1907 Move [X19+1224], D0
	1908 Move [X19+1172], W8
	1909 Move W8, [X31+12]
	1910 Move W9, [X31+36]
	1911 And W8, W9, W8
	1912 Move TEMP, X8
	1913 And TEMP, TEMP, 1
	1914 Compare TEMP, 1
	1915 JumpIfNotEqual {1931}
	1916 Move V0, [X19+720]
	1917 Move V1, [X19+724]
	1918 Move W8, 0x42C80000
	1919 Move S2, W8
	1920 NotImplemented "Instruction FDIV not yet implemented."
	1921 NotImplemented "Instruction FCMP not yet implemented."
	1922 Move W8, [X19+580]
	1923 Move W9, [X19+584]
	1924 NotImplemented "Instruction CMP not yet implemented."
	1925 Move V0, [X20]
	1926 Move V1, [X19+592]
	1927 NotImplemented "Instruction FCMP not yet implemented."
	1928 Move W8, [X19+580]
	1929 Move W9, [X19+584]
	1930 NotImplemented "Instruction CMP not yet implemented."
	1931 Move V0, [X19+1240]
	1932 NotImplemented "Instruction FCMP not yet implemented."
	1933 Move X8, 0x5F4000
	1934 Move X8, [X8+1448]
	1935 Move V8, [X19+1224]
	1936 Move V9, [X19+1232]
	1937 Move X0, [X8]
	1938 Move W8, [X0+224]
	1939 Compare W8, 0
	1940 JumpIfNotEqual {1942}
	1941 Call 0x1C17DFC
	1942 Move V2, [X31+16]
	1943 Subtract S0, S8, S9
	1944 NotImplemented "Instruction FABS not yet implemented."
	1945 NotImplemented "Instruction FCMP not yet implemented."
	1946 Move W8, [X19+708]
	1947 Compare W8, 0
	1948 JumpIfNotEqual {1958}
	1949 Move W8, [X19+828]
	1950 Compare W8, 0
	1951 JumpIfNotEqual {1958}
	1952 Move V1, [X19+1220]
	1953 Move V2, [X19+1240]
	1954 Subtract S1, S1, S0
	1955 Add S0, S0, S2
	1956 Move [X19+1220], S1
	1957 Move [X19+1240], S0
	1958 Move V1, [X19+1240]
	1959 Move V2, [X19+1228]
	1960 Move V3, [X19+1220]
	1961 Move V0, [X19+1224]
	1962 Move W8, [X19+1172]
	1963 Move V8, [X19+1600]
	1964 Subtract S2, S2, S1
	1965 NotImplemented "Instruction FCMP not yet implemented."
	1966 NotImplemented "Instruction FCSEL not yet implemented."
	1967 Move [X19+1176], W8
	1968 Move [X19+1220], S3
	1969 Move [X19+1196], W31
	1970 Move TEMP, X22
	1971 And TEMP, TEMP, 1
	1972 Compare TEMP, 1
	1973 JumpIfNotEqual {1979}
	1974 Move V0, [X19+1208]
	1975 Subtract S0, S0, S3
	1976 Move [X31+40], S0
	1977 Move [X31+28], W31
	1978 Move [X31+36], W31
	1979 Subtract S0, S0, S1
	1980 Move V1, [X31+40]
	1981 Subtract S0, S0, S2
	1982 NotImplemented "Instruction FCMP not yet implemented."
	1983 NotImplemented "Instruction FCSEL not yet implemented."
	1984 Move [X31+40], S1
	1985 Subtract W3, W8, 1
	1986 Add X1, X31, 1224
	1987 Move X0, X19
	1988 Move W2, W23
	1989 Call TMP_Text.SaveWordWrappingState, X0, X1, X2, X3
	1990 Move W9, [X19+1192]
	1991 Move X8, [X19+1160]
	1992 Add W9, W9, 1
	1993 Move [X19+1192], W9
	1994 Compare X8, 0
	1995 JumpIfEqual {2101}
	1996 NotImplemented "Instruction LDRSW not yet implemented."
	1997 Move W10, [X8+24]
	1998 NotImplemented "Instruction CMP not yet implemented."
	1999 Move X10, -50417664
	2000 Move V0, [X19+704]
	2001 Move V1, [X10+532]
	2002 NotImplemented "Instruction NOP not yet implemented."
	2003 NotImplemented "Instruction MADD not yet implemented."
	2004 Move V9, [X8+340]
	2005 NotImplemented "Instruction FCMP not yet implemented."
	2006 Move V1, [X19+700]
	2007 Move V3, [X31+24]
	2008 Move V0, [X19+1228]
	2009 Move V2, [X19+696]
	2010 Move W8, W31
	2011 Add S1, S3, S1
	2012 Move V3, [X31+20]
	2013 Subtract S0, S13, S0
	2014 Add S0, S9, S0
	2015 Multiply S1, S3, S1
	2016 Add S1, S0, S1
	2017 Move V0, [X31+64]
	2018 Multiply S0, S0, S2
	2019 Move W8, 45
	2020 Move [X31+60], W31
	2021 Move [X31+3000], W10
	2022 Move [X31+3004], W8
	2023 Subtract W23, W23, 1
	2024 Move [X28+488], W10
	2025 Move X8, [X19+1144]
	2026 Compare X8, 0
	2027 JumpIfEqual {2101}
	2028 Move W23, [X8+24]
	2029 Move W24, 3
	2030 Subtract W9, W9, 1
	2031 NotImplemented "Instruction CMP not yet implemented."
	2032 Move X10, [X19+256]
	2033 Compare X10, 0
	2034 JumpIfEqual {2101}
	2035 NotImplemented "Instruction SMADDL not yet implemented."
	2036 Move V11, [X8+96]
	2037 Add X0, X10, 80
	2038 Move V1, [X19+696]
	2039 Move V2, [X31+64]
	2040 Move W8, 1
	2041 Multiply S1, S2, S1
	2042 Move V2, [X19+1240]
	2043 Add S0, S0, S1
	2044 Move [X19+708], W8
	2045 Move X21, 0x659000
	2046 Add S0, S2, S0
	2047 Move [X19+1240], S0
	2048 Move X21, [X21+1000]
	2049 Move X0, [X21]
	2050 Move W8, [X0+224]
	2051 Compare W8, 0
	2052 JumpIfNotEqual {2055}
	2053 Call 0x1C17DFC
	2054 Move X0, [X21]
	2055 Move V1, [X31+84]
	2056 Move X8, [X0+184]
	2057 Move V0, [X19+1036]
	2058 Move [X31+60], W31
	2059 Add S1, S1, S8
	2060 Move [X31+84], S1
	2061 Move V1, [X8+5544]
	2062 Add S0, S0, S13
	2063 Move [X19+1600], S0
	2064 Move W8, 1
	2065 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	2066 Move [X19+1232], S9
	2067 Move [X19+1224], D0
	2068 Move [X31+36], W8
	2069 Move W8, [X31+36]
	2070 NotImplemented "Instruction ORN not yet implemented."
	2071 Move TEMP, X8
	2072 And TEMP, TEMP, 1
	2073 Compare TEMP, 1
	2074 JumpIfNotEqual {2080}
	2075 Move W3, [X19+1172]
	2076 Add X1, X31, 2112
	2077 Move X0, X19
	2078 Move W2, W23
	2079 Call TMP_Text.SaveWordWrappingState, X0, X1, X2, X3
	2080 Move W8, 1
	2081 Move [X31+36], W31
	2082 Move [X31+28], W8
	2083 Add X1, X31, 2112
	2084 Move X0, X19
	2085 Move W2, W23
	2086 Call TMP_Text.SaveWordWrappingState, X0, X1, X2, X3
	2087 Move TEMP, 0
	2088 Not TEMP
	2089 Move W8, TEMP
	2090 Move [X31+28], W31
	2091 Move [X31+36], W31
	2092 Move [X31+336], W8
	2093 Move W8, [X28+488]
	2094 Add W8, W8, 1
	2095 Move [X28+488], W8
	2096 Move X1, [X19+1144]
	2097 Add W23, W23, 1
	2098 Move V15, V14
	2099 Compare X1, 0
	2100 JumpIfNotEqual {462}
	2101 Call 0x1C17F20
	2102 Move V0, [X19+572]
	2103 Move V1, [X19+576]
	2104 Move X8, -50417664
	2105 Move V2, [X8+208]
	2106 Subtract S1, S0, S1
	2107 NotImplemented "Instruction FCMP not yet implemented."
	2108 Move W8, [X31+12]
	2109 Move TEMP, X8
	2110 And TEMP, TEMP, 1
	2111 Compare TEMP, 1
	2112 JumpIfNotEqual {2162}
	2113 Move V1, [X20]
	2114 Move V2, [X19+596]
	2115 NotImplemented "Instruction FCMP not yet implemented."
	2116 Move W8, [X19+580]
	2117 Move W9, [X19+584]
	2118 NotImplemented "Instruction CMP not yet implemented."
	2119 Move V2, [X19+720]
	2120 Move V3, [X19+724]
	2121 Move W8, 0x42C80000
	2122 Move S4, W8
	2123 NotImplemented "Instruction FDIV not yet implemented."
	2124 NotImplemented "Instruction FCMP not yet implemented."
	2125 Move [X19+724], W31
	2126 Move V1, [X20]
	2127 Move [X19+576], S1
	2128 Move V1, [X20]
	2129 Move X8, -50417664
	2130 Move V2, [X8+512]
	2131 Move S3, 0.5
	2132 Subtract S0, S0, S1
	2133 Multiply S0, S0, S3
	2134 NotImplemented "Instruction FMAXNM not yet implemented."
	2135 Move S2, 20
	2136 Move W8, 0x7F800000
	2137 Add S0, S1, S0
	2138 Move S1, W8
	2139 Move X8, -50417664
	2140 Move [X20], S0
	2141 Multiply S0, S0, S2
	2142 Add S0, S0, S3
	2143 Move V3, [X8+1056]
	2144 NotImplemented "Instruction FCMP not yet implemented."
	2145 Move V1, [X19+596]
	2146 NotImplemented "Instruction FCVTZS not yet implemented."
	2147 NotImplemented "Instruction SCVTF not yet implemented."
	2148 NotImplemented "Instruction FDIV not yet implemented."
	2149 NotImplemented "Instruction FCSEL not yet implemented."
	2150 NotImplemented "Instruction FCMP not yet implemented."
	2151 NotImplemented "Instruction FCSEL not yet implemented."
	2152 Move [X20], S0
	2153 Move X19, 0x8DA000
	2154 Move W8, [X19+1935]
	2155 Compare W8, 0
	2156 JumpIfNotEqual {228}
	2157 Move X0, 0x5FC000
	2158 Move X0, [X0+3848]
	2159 Call 0x1C17CF4
	2160 Move W8, 1
	2161 Move [X19+1935], W8
	2162 Move V0, [X19+832]
	2163 Move V2, [X19+840]
	2164 Move V3, [X19+836]
	2165 Move V4, [X19+844]
	2166 Move S1, W31
	2167 NotImplemented "Instruction FMAXNM not yet implemented."
	2168 NotImplemented "Instruction FMAXNM not yet implemented."
	2169 NotImplemented "Instruction FMAXNM not yet implemented."
	2170 NotImplemented "Instruction FMAXNM not yet implemented."
	2171 Move V4, [X31+84]
	2172 Move V5, [X31+40]
	2173 Move W8, 1
	2174 Move [X19+588], W8
	2175 Move W8, 0x42C80000
	2176 Add S0, S4, S0
	2177 Add S3, S5, S3
	2178 Move S5, W8
	2179 Add S0, S0, S2
	2180 Move S4, 1
	2181 Move X8, -50421760
	2182 Add S1, S3, S1
	2183 Multiply S0, S0, S5
	2184 Move W9, 0x7F800000
	2185 Move V3, [X8+3964]
	2186 Multiply S1, S1, S5
	2187 Add S0, S0, S4
	2188 Move S2, W9
	2189 Add S1, S1, S4
	2190 NotImplemented "Instruction FCVTZS not yet implemented."
	2191 NotImplemented "Instruction FCMP not yet implemented."
	2192 NotImplemented "Instruction FCVTZS not yet implemented."
	2193 NotImplemented "Instruction SCVTF not yet implemented."
	2194 NotImplemented "Instruction SCVTF not yet implemented."
	2195 NotImplemented "Instruction FDIV not yet implemented."
	2196 NotImplemented "Instruction FDIV not yet implemented."
	2197 NotImplemented "Instruction FCSEL not yet implemented."
	2198 NotImplemented "Instruction FCMP not yet implemented."
	2199 NotImplemented "Instruction FCSEL not yet implemented."
	2200 Move [X19+1013], W31
	2201 NotImplemented "Instruction FCMP not yet implemented."
	2202 Move V2, V12
	2203 Move S2, 1
	2204 Subtract S2, S2, S1
	2205 NotImplemented "Instruction FDIV not yet implemented."
	2206 Move X8, -50417664
	2207 Move V3, [X8+752]
	2208 Add S3, S8, S3
	2209 Multiply S3, S9, S3
	2210 Subtract S3, S12, S3
	2211 NotImplemented "Instruction FDIV not yet implemented."
	2212 Add S1, S1, S2
	2213 NotImplemented "Instruction FCMP not yet implemented."
	2214 NotImplemented "Instruction FCSEL not yet implemented."
	2215 Move [X19+724], S0
	2216 Move [X19+572], S0
	2217 Move V0, [X19+576]
	2218 Move V1, [X20]
	2219 Move X8, -50417664
	2220 Move V2, [X8+512]
	2221 Move S3, 0.5
	2222 Subtract S0, S1, S0
	2223 Multiply S0, S0, S3
	2224 NotImplemented "Instruction FMAXNM not yet implemented."
	2225 Move S2, 20
	2226 Move W8, 0x7F800000
	2227 Subtract S0, S1, S0
	2228 Move S1, W8
	2229 Move X8, -50417664
	2230 Move [X20], S0
	2231 Multiply S0, S0, S2
	2232 Add S0, S0, S3
	2233 Move V3, [X8+1056]
	2234 NotImplemented "Instruction FCMP not yet implemented."
	2235 Move V1, [X19+592]
	2236 NotImplemented "Instruction FCVTZS not yet implemented."
	2237 NotImplemented "Instruction SCVTF not yet implemented."
	2238 NotImplemented "Instruction FDIV not yet implemented."
	2239 NotImplemented "Instruction FCSEL not yet implemented."
	2240 NotImplemented "Instruction FCMP not yet implemented."
	2241 NotImplemented "Instruction FCSEL not yet implemented."
	2242 Call 0x1C17F28

Method: UnityEngine.Bounds GetCompoundBounds()

Disassembly:
	0x03B0706C FDIV S2, S6, S2
	0x03B07070 LDP S6, S7, [X8 + 0x54]
	0x03B07074 FMUL S0, S2, S0

ISIL:
	001 Move [X8], X31
	002 Move [X8+8], X31
	003 Move [X8+16], X31
	004 Return X0

Method: UnityEngine.Rect GetCanvasSpaceClippingRect()

Disassembly:
	0x03B07078 FMUL S1, S5, S1
	0x03B0707C MOV X0, X31

ISIL:
	001 Move X0, X31
	002 Call Rect.get_zero
	003 Return X0

Method: UnityEngine.Bounds GetTextBounds()

Disassembly:
	0x03AFA020 RET
	0x03AFA024 RET
	0x03AFA028 RET
	0x03AFA02C RET
	0x03AFA030 RET
	0x03AFA034 STR D12, [X31 - 0x50]!
	0x03AFA038 STP D11, D10, [X31 + 0x10]
	0x03AFA03C STP D9, D8, [X31 + 0x20]
	0x03AFA040 STP X30, X21, [X31 + 0x30]
	0x03AFA044 STP X20, X19, [X31 + 0x40]
	0x03AFA048 AND W20, W1, 0x1
	0x03AFA04C AND W21, W2, 0x1
	0x03AFA050 MOV W1, W20
	0x03AFA054 MOV W2, W21
	0x03AFA058 MOV X3, X31
	0x03AFA05C MOV V8.16B, V4.16B
	0x03AFA060 MOV V9.16B, V3.16B
	0x03AFA064 MOV V10.16B, V2.16B
	0x03AFA068 MOV V11.16B, V1.16B
	0x03AFA06C MOV V12.16B, V0.16B
	0x03AFA070 MOV X19, X0
	0x03AFA074 BL 0x3CDDAE0
	0x03AFA078 LDR X8, [X19]
	0x03AFA07C MOV X0, X19
	0x03AFA080 MOV V1.16B, V11.16B
	0x03AFA084 MOV V2.16B, V10.16B
	0x03AFA088 LDR X4, [X8 + 0x838]
	0x03AFA08C LDR X3, [X8 + 0x840]
	0x03AFA090 MOV V3.16B, V9.16B
	0x03AFA094 MOV V4.16B, V8.16B
	0x03AFA098 MOV W1, W20
	0x03AFA09C MOV W2, W21
	0x03AFA0A0 LDP X20, X19, [X31 + 0x40]
	0x03AFA0A4 LDP X30, X21, [X31 + 0x30]
	0x03AFA0A8 LDP D9, D8, [X31 + 0x20]
	0x03AFA0AC LDP D11, D10, [X31 + 0x10]
	0x03AFA0B0 MOV V0.16B, V12.16B
	0x03AFA0B4 LDR V12, [X31], #0x50
	0x03AFA0B8 BR X4
	0x03AFA0BC STP D9, D8, [X31 - 0x30]!
	0x03AFA0C0 STR X30, [X31 + 0x10]
	0x03AFA0C4 STP X20, X19, [X31 + 0x20]
	0x03AFA0C8 AND W20, W1, 0x1
	0x03AFA0CC MOV W1, W20
	0x03AFA0D0 MOV X2, X31
	0x03AFA0D4 MOV V8.16B, V1.16B
	0x03AFA0D8 MOV V9.16B, V0.16B
	0x03AFA0DC MOV X19, X0
	0x03AFA0E0 BL 0x3CDDD9C
	0x03AFA0E4 LDR X8, [X19]
	0x03AFA0E8 MOV X0, X19
	0x03AFA0EC MOV W1, W20
	0x03AFA0F0 LDP X20, X19, [X31 + 0x20]
	0x03AFA0F4 LDR X3, [X8 + 0x848]
	0x03AFA0F8 LDR X2, [X8 + 0x850]
	0x03AFA0FC LDR X30, [X31 + 0x10]
	0x03AFA100 MOV V0.16B, V9.16B
	0x03AFA104 MOV V1.16B, V8.16B
	0x03AFA108 LDP D9, D8, [X31], #0x30
	0x03AFA10C BR X3
	0x03AFA110 RET
	0x03AFA114 RET
	0x03AFA118 STR X30, [X31 - 0x30]!
	0x03AFA11C STP X22, X21, [X31 + 0x10]
	0x03AFA120 STP X20, X19, [X31 + 0x20]
	0x03AFA124 ADRP X20, 0x8E8000
	0x03AFA128 LDRB W8, [X20 + 0x642]
	0x03AFA12C MOV X19, X0
	0x03AFA130 TBNZ X8, 0x0, 0x3AFA148
	0x03AFA134 ADRP X0, 0x65F000
	0x03AFA138 LDR X0, [X0 + 0x1E8]
	0x03AFA13C BL 0x1C16CF4
	0x03AFA140 MOVZ W8, 0x1
	0x03AFA144 STRB W8, [X20 + 0x642]
	0x03AFA148 LDR W8, [X19 + 0x400]
	0x03AFA14C CMP W8, 0x3
	0x03AFA150 B.EQ 0x3AFA158
	0x03AFA154 CBNZ W8, 0x3AFA208
	0x03AFA158 LDR X22, [X19 + 0xE8]
	0x03AFA15C LDR X21, [X19 + 0xD8]
	0x03AFA160 CMP X22, 0x0
	0x03AFA164 CSEL X20, X31, X19, EQ
	0x03AFA168 CBZ X22, 0x3AFA1B4
	0x03AFA16C ADRP X10, 0x65F000
	0x03AFA170 LDR X8, [X22]
	0x03AFA174 LDR X10, [X10 + 0x1E8]
	0x03AFA178 LDRH W9, [X8 + 0x12E]
	0x03AFA17C LDR X1, [X10]
	0x03AFA180 CBZ X9, 0x3AFA1A4
	0x03AFA184 LDR X10, [X8 + 0xB0]
	0x03AFA188 ADD X10, X10, 0x8
	0x03AFA18C LDUR X11, [X10 - 0x8]
	0x03AFA190 CMP X11, X1
	0x03AFA194 B.EQ 0x3AFA1C4
	0x03AFA198 SUBS X9, X9, 0x1
	0x03AFA19C ADD X10, X10, 0x10
	0x03AFA1A0 B.NE 0x3AFA18C
	0x03AFA1A4 MOV X0, X22
	0x03AFA1A8 MOV W2, W31
	0x03AFA1AC BL 0x1C5C788
	0x03AFA1B0 B 0x3AFA1D0
	0x03AFA1B4 MOV X20, X19
	0x03AFA1B8 CBNZ X21, 0x3AFA1EC
	0x03AFA1BC MOV W3, W31
	0x03AFA1C0 B 0x3AFA1F0
	0x03AFA1C4 LDRSW X9, [X10]
	0x03AFA1C8 ADD X8, X8, X9, 0x4, LSL

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x8E9000
	011 Move W9, [X21+1621]
	012 Move X20, X0
	013 Move X19, X8
	014 Move TEMP, X9
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x65F000
	019 Move X0, [X0+2168]
	020 Call 0x1C17CF4
	021 Move X0, 0x65F000
	022 Move X0, [X0+1000]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+1621], W8
	026 Move [X31], X31
	027 Move [X31+8], X31
	028 Move X8, [X20+872]
	029 Compare X8, 0
	030 JumpIfEqual {37}
	031 Move X9, [X8+56]
	032 Compare X9, 0
	033 JumpIfEqual {122}
	034 Move W8, [X8+24]
	035 Move W9, [X9+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move [X19], X31
	038 Move [X19+8], X31
	039 Move [X19+16], X31
	040 Move X21, 0x65F000
	041 Move X21, [X21+1000]
	042 Move X0, [X21]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {48}
	046 Call 0x1C17DFC
	047 Move X0, [X21]
	048 Move X9, 0x65F000
	049 Move X8, [X0+184]
	050 Move X9, [X9+2168]
	051 Move V11, [X8+5528]
	052 Move X0, [X9]
	053 Move V10, [X8+5532]
	054 Move V8, [X8+5536]
	055 Move V9, [X8+5540]
	056 Move W9, [X0+224]
	057 Compare W9, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Add X0, X31, 0
	061 Move V0, V11
	062 Move V1, V10
	063 Move V2, V8
	064 Move V3, V9
	065 Move X1, X31
	066 Call Extents..ctor, X0, X1, X2
	067 Move X10, [X20+872]
	068 Compare X10, 0
	069 JumpIfEqual {122}
	070 NotImplemented "Instruction LDRSW not yet implemented."
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X10, [X10+56]
	073 Move X9, X31
	074 Add X11, X10, 320
	075 Compare X10, 0
	076 JumpIfEqual {122}
	077 Move W12, [X10+24]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move W12, [X11+84]
	081 Compare W12, 0
	082 JumpIfEqual {98}
	083 Move V0, [X11]
	084 Move S1, [X31]
	085 Move S2, [X31+4]
	086 NotImplemented "Instruction FCMP not yet implemented."
	087 NotImplemented "Instruction FCSEL not yet implemented."
	088 Move [X31], S0
	089 Move V0, [X11+16]
	090 NotImplemented "Instruction FCMP not yet implemented."
	091 NotImplemented "Instruction FCSEL not yet implemented."
	092 Move [X31+4], S0
	093 Move V0, [X31+8]
	094 NotImplemented "Instruction LDUR not yet implemented."
	095 NotImplemented "Instruction INVALID not yet implemented."
	096 NotImplemented "Instruction INVALID not yet implemented."
	097 Move [X31+8], D0
	098 Add X9, X9, 1
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Add X11, X11, 376
	101 Move D1, [X31]
	102 Move D0, [X31+8]
	103 NotImplemented "Instruction MOVI not yet implemented."
	104 Move [X19+8], W31
	105 Move [X19+20], W31
	106 Subtract V3, V0, V1
	107 Add V0, V0, V1
	108 NotImplemented "Instruction INVALID not yet implemented."
	109 NotImplemented "Instruction INVALID not yet implemented."
	110 Move [X19], D0
	111 Move [X19+12], D1
	112 Move X20, [X31+64]
	113 Move X19, [X31+72]
	114 Move X30, [X31+48]
	115 Move X21, [X31+56]
	116 Move D9, [X31+32]
	117 Move D8, [X31+40]
	118 Move D11, [X31+16]
	119 Move D10, [X31+24]
	120 Add X31, X31, 80
	121 Return X0
	122 Call 0x1C17F20
	123 Call 0x1C17F28

Method: UnityEngine.Bounds GetTextBounds(System.Boolean onlyVisibleCharacters)

Disassembly:
	0x03AFED00 ADD X0, X31, 0xE0
	0x03AFED04 MOV X1, X31
	0x03AFED08 BL 0x3C9BFB8
	0x03AFED0C LDR X8, [X19 + 0x100]
	0x03AFED10 CBZ X8, 0x3AFFD98
	0x03AFED14 SCVTF S1, W26
	0x03AFED18 FDIV S2, S9, S10
	0x03AFED1C FDIV S1, S15, S1
	0x03AFED20 FMUL S2, S2, S14
	0x03AFED24 FMUL S1, S1, S8
	0x03AFED28 FMUL S2, S2, S11
	0x03AFED2C FMUL S1, S1, S13
	0x03AFED30 FMUL S15, S1, S2
	0x03AFED34 FDIV S9, S1, S15
	0x03AFED38 ADD X1, X8, 0x50
	0x03AFED3C ADD X0, X31, 0xE0
	0x03AFED40 MOVZ W2, 0x60
	0x03AFED44 FMUL S8, S9, S0
	0x03AFED48 BL 0x3EB1B30
	0x03AFED4C ADD X0, X31, 0xE0
	0x03AFED50 MOV X1, X31
	0x03AFED54 BL 0x3C9BFF8
	0x03AFED58 FMUL S9, S9, S0
	0x03AFED5C MOV V14.16B, V12.16B
	0x03AFED60 LDR X8, [X19 + 0x488]
	0x03AFED64 FMOV S13, W31
	0x03AFED68 STR X25, [X19 + 0x648]
	0x03AFED6C CBZ X8, 0x3AFFD98
	0x03AFED70 LDR W9, [X19 + 0x494]
	0x03AFED74 LDR W10, [X8 + 0x18]
	0x03AFED78 CMP W9, W10
	0x03AFED7C B.CS 0x3AFFFE0
	0x03AFED80 SXTW X10, W9
	0x03AFED84 MADD X10, X10, X29, X8
	0x03AFED88 MOVZ W11, 0x1
	0x03AFED8C STR S14, [X31 + 0x50]
	0x03AFED90 STR W11, [X10 + 0x2C]
	0x03AFED94 STR S15, [X10 + 0x160]
	0x03AFED98 STR W21, [X19 + 0x120]
	0x03AFED9C CMP W24, 0xAD
	0x03AFEDA0 CSET W25, EQ
	0x03AFEDA4 CMP W24, 0x3
	0x03AFEDA8 CSET W10, EQ
	0x03AFEDAC ORR W10, W25, W10, 0x0
	0x03AFEDB0 CMP W10, 0x0
	0x03AFEDB4 FCSEL S14, S13, S15, NE
	0x03AFEDB8 LDR W10, [X8 + 0x18]
	0x03AFEDBC CMP W9, W10
	0x03AFEDC0 B.CS 0x3AFFFE0
	0x03AFEDC4 SMADDL X8, X9, X29, X8
	0x03AFEDC8 STRH W24, [X8 + 0x20]
	0x03AFEDCC LDR X8, [X19 + 0x648]
	0x03AFEDD0 CBZ X8, 0x3AFFD98
	0x03AFEDD4 LDR X0, [X8 + 0x20]
	0x03AFEDD8 CBZ X0, 0x3AFFD98
	0x03AFEDDC ADD X8, X31, 0xBC0
	0x03AFEDE0 MOV X1, X31
	0x03AFEDE4 BL 0x3C9C4A4
	0x03AFEDE8 LDR V0, [X31 + 0xBC]
	0x03AFEDEC LDR W8, [X31 + 0xBD0]
	0x03AFEDF0 CMP W24, 0x10000
	0x03AFEDF4 STR V0, [X31 + 0xC]
	0x03AFEDF8 STR W8, [X31 + 0xD0]
	0x03AFEDFC B.LT 0x3AFEE08
	0x03AFEE00 MOV W26, W31
	0x03AFEE04 B 0x3AFEE30
	0x03AFEE08 ADRP X8, 0x5F7000
	0x03AFEE0C LDR X8, [X8 + 0x170]
	0x03AFEE10 LDR X0, [X8]
	0x03AFEE14 LDR W8, [X0 + 0xE0]
	0x03AFEE18 CBNZ W8, 0x3AFEE20
	0x03AFEE1C BL 0x1C16DFC
	0x03AFEE20 MOV W0, W24
	0x03AFEE24 MOV X1, X31
	0x03AFEE28 BL 0x3317FCC
	0x03AFEE2C AND W26, W0, 0x1
	0x03AFEE30 LDRB W8, [X19 + 0x2F9]
	0x03AFEE34 LDR V10, [X19 + 0x2A8]
	0x03AFEE38 STR W31, [X19 + 0x2FC]
	0x03AFEE3C STR S10, [X31 + 0x5C]
	0x03AFEE40 CBZ W8, 0x3AFEEFC
	0x03AFEE44 LDR X9, [X19 + 0x648]
	0x03AFEE48 CBZ X9, 0x3AFFD98
	0x03AFEE4C LDR W8, [X28 + 0x1E8]
	0x03AFEE50 LDR W21, [X9 + 0x28]
	0x03AFEE54 LDR W9, [X31 + 0x58]
	0x03AFEE58 CMP W8, W9
	0x03AFEE5C B.GE 0x3AFEF0C
	0x03AFEE60 LDR X9, [X19 + 0x368]
	0x03AFEE64 CBZ X9, 0x3AFFD98
	0x03AFEE68 LDR X9, [X9 + 0x38]
	0x03AFEE6C CBZ X9, 0x3AFFD98
	0x03AFEE70 LDR W10, [X9 + 0x18]
	0x03AFEE74 ADD W8, W8, 0x1
	0x03AFEE78 CMP W8, W10
	0x03AFEE7C B.CS 0x3AFFFE0
	0x03AFEE80 SMADDL X8, X8, X29, X9
	0x03AFEE84 LDR X8, [X8 + 0x30]
	0x03AFEE88 CBZ X8, 0x3AFFD98
	0x03AFEE8C LDR X9, [X19 + 0x100]
	0x03AFEE90 CBZ X9, 0x3AFFD98
	0x03AFEE94 LDR X9, [X9 + 0x128]
	0x03AFEE98 CBZ X9, 0x3AFFD98
	0x03AFEE9C LDR X0, [X9 + 0x18]
	0x03AFEEA0 CBZ X0, 0x3AFFD98
	0x03AFEEA4 ADRP X9, 0x65A000
	0x03AFEEA8 LDR W8, [X8 + 0x28]
	0x03AFEEAC LDR X9, [X9 + 0x320]
	0x03AFEEB0 ADD X2, X31, 0x98
	0x03AFEEB4 ORR W1, W21, W8, 0x10
	0x03AFEEB8 LDR X3, [X9]
	0x03AFEEBC BL 0x2B10A7C
	0x03AFEEC0 FMOV S11, W31
	0x03AFEEC4 FMOV S0, W31
	0x03AFEEC8 TBZ X0, 0x0, 0x3AFEF28
	0x03AFEECC LDR X8, [X31 + 0x98]
	0x03AFEED0 STR S0, [X31 + 0x48]
	0x03AFEED4 FMOV S0, W31
	0x03AFEED8 CBZ X8, 0x3AFFD98
	0x03AFEEDC LDRB W9, [X8 + 0x39]
	0x03AFEEE0 LDR V1, [X31 + 0x5C]
	0x03AFEEE4 LDP S11, S12, [X8 + 0x14]
	0x03AFEEE8 LDP S10, S13, [X8 + 0x1C]
	0x03AFEEEC ANDS W31, W9, 0x1
	0x03AFEEF0 FCSEL S1, S1, S0, EQ
	0x03AFEEF4 STR S1, [X31 + 0x5C]
	0x03AFEEF8 B 0x3AFEF38
	0x03AFEEFC FMOV S0, W31
	0x03AFEF00 STR S0, [X31 + 0x48]
	0x03AFEF04 FMOV S10, W31

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x8E5000
	013 Move W9, [X22+1622]
	014 Move W20, W1
	015 Move X21, X0
	016 Move X19, X8
	017 Move TEMP, X9
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x65B000
	022 Move X0, [X0+2168]
	023 Call 0x1C17CF4
	024 Move X0, 0x65B000
	025 Move X0, [X0+1000]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+1622], W8
	029 Move [X31], X31
	030 Move [X31+8], X31
	031 Move X8, [X21+872]
	032 Compare X8, 0
	033 JumpIfEqual {131}
	034 Move X23, 0x65B000
	035 Move X23, [X23+1000]
	036 Move X22, 0x65B000
	037 Move X0, [X23]
	038 Move W8, [X0+224]
	039 Move X22, [X22+2168]
	040 Compare W8, 0
	041 JumpIfNotEqual {44}
	042 Call 0x1C17DFC
	043 Move X0, [X23]
	044 Move X8, [X0+184]
	045 Move X0, [X22]
	046 Move V11, [X8+5528]
	047 Move V10, [X8+5532]
	048 Move V8, [X8+5536]
	049 Move W9, [X0+224]
	050 Move V9, [X8+5540]
	051 Compare W9, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Add X0, X31, 0
	055 Move V0, V11
	056 Move V1, V10
	057 Move V2, V8
	058 Move V3, V9
	059 Move X1, X31
	060 Call Extents..ctor, X0, X1, X2
	061 Move X8, [X21+872]
	062 Compare X8, 0
	063 JumpIfEqual {147}
	064 NotImplemented "Instruction LDRSW not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 NotImplemented "Instruction LDRSW not yet implemented."
	067 Move X10, X31
	068 And W12, W20, 1
	069 Move W13, 404
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move W14, 1
	072 Move X14, [X8+56]
	073 Compare X14, 0
	074 JumpIfEqual {147}
	075 Move W15, [X14+24]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Add X14, X14, X13
	078 Subtract X14, X14, 304
	079 Move W14, [X14]
	080 Move W15, [X21+816]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction CSET not yet implemented."
	083 And W31, W14, W12
	084 Move TEMP, X20
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfNotEqual {96}
	088 Move X14, [X8+56]
	089 Compare X14, 0
	090 JumpIfEqual {147}
	091 Move W15, [X14+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move W15, [X14]
	094 Compare W15, 0
	095 JumpIfNotEqual {99}
	096 Move X14, [X8+56]
	097 Compare X14, 0
	098 JumpIfEqual {147}
	099 Move W15, [X14+24]
	100 Move V0, [X31]
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Add X14, X14, X13
	103 NotImplemented "Instruction LDUR not yet implemented."
	104 Move V2, [X31+4]
	105 NotImplemented "Instruction FCMP not yet implemented."
	106 NotImplemented "Instruction FCSEL not yet implemented."
	107 Move [X31], S0
	108 NotImplemented "Instruction LDUR not yet implemented."
	109 NotImplemented "Instruction FCMP not yet implemented."
	110 NotImplemented "Instruction FCSEL not yet implemented."
	111 Move [X31+4], S0
	112 Move V0, [X31+8]
	113 NotImplemented "Instruction LDUR not yet implemented."
	114 NotImplemented "Instruction INVALID not yet implemented."
	115 NotImplemented "Instruction INVALID not yet implemented."
	116 Move [X31+8], D0
	117 Add X10, X10, 1
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Add X13, X13, 376
	120 Move D1, [X31]
	121 Move D0, [X31+8]
	122 NotImplemented "Instruction MOVI not yet implemented."
	123 Move [X19+8], W31
	124 Move [X19+20], W31
	125 Subtract V3, V0, V1
	126 Add V0, V0, V1
	127 NotImplemented "Instruction INVALID not yet implemented."
	128 NotImplemented "Instruction INVALID not yet implemented."
	129 Move [X19], D0
	130 Move [X19+12], D1
	131 Move [X19], X31
	132 Move [X19+8], X31
	133 Move [X19+16], X31
	134 Move X20, [X31+80]
	135 Move X19, [X31+88]
	136 Move X22, [X31+64]
	137 Move X21, [X31+72]
	138 Move X30, [X31+48]
	139 Move X23, [X31+56]
	140 Move D9, [X31+32]
	141 Move D8, [X31+40]
	142 Move D11, [X31+16]
	143 Move D10, [X31+24]
	144 Add X31, X31, 96
	145 Return X0
	146 Call 0x1C17F28
	147 Call 0x1C17F20

Method: System.Void AdjustLineOffset(System.Int32 startIndex, System.Int32 endIndex, System.Single offset)

Disassembly:
	0x03B07080 FMUL S2, S4, S6
	0x03B07084 FMUL S3, S3, S7
	0x03B07088 ADD X20, X9, 0x10C
	0x03B0708C BL 0x1E43664
	0x03B07090 STR W0, [X20]
	0x03B07094 B 0x3B07220
	0x03B07098 LDR X8, [X19 + 0x580]
	0x03B0709C CBZ X8, 0x3B0742C
	0x03B070A0 LDP S0, S1, [X8 + 0x3C]
	0x03B070A4 LDP S2, S3, [X8 + 0x44]
	0x03B070A8 AND W8, W20, 0xFF
	0x03B070AC UCVTF S4, W8
	0x03B070B0 MOVZ W8, 0x437F0000
	0x03B070B4 UBFM W9, W20, 0x8, 0xF
	0x03B070B8 UBFM W10, W20, 0x10, 0x17
	0x03B070BC AND W11, W22, 0xFF
	0x03B070C0 FMOV S5, W8
	0x03B070C4 UCVTF S6, W9
	0x03B070C8 UCVTF S7, W10
	0x03B070CC FDIV S13, S4, S5
	0x03B070D0 UCVTF S4, W11
	0x03B070D4 FDIV S12, S6, S5
	0x03B070D8 FDIV S10, S7, S5
	0x03B070DC FDIV S11, S4, S5
	0x03B070E0 MOV V4.16B, V13.16B
	0x03B070E4 MOV V5.16B, V12.16B
	0x03B070E8 MOV V6.16B, V10.16B
	0x03B070EC MOV V7.16B, V11.16B
	0x03B070F0 MOV X0, X31
	0x03B070F4 BL 0x3ADAEDC
	0x03B070F8 MOV X0, X31
	0x03B070FC BL 0x1E43664
	0x03B07100 MOVZ W8, 0x178
	0x03B07104 MADD X8, X23, X8, X21
	0x03B07108 STR W0, [X8 + 0x94]
	0x03B0710C LDR X8, [X25]
	0x03B07110 CBZ X8, 0x3B0742C
	0x03B07114 LDR X20, [X8 + 0x38]
	0x03B07118 CBZ X20, 0x3B0742C
	0x03B0711C LDRSW X21, [X26]
	0x03B07120 LDR W8, [X20 + 0x18]
	0x03B07124 CMP W21, W8
	0x03B07128 B.CS 0x3B07430
	0x03B0712C LDR X8, [X19 + 0x580]
	0x03B07130 CBZ X8, 0x3B0742C
	0x03B07134 LDP S0, S1, [X8 + 0x1C]
	0x03B07138 LDP S2, S3, [X8 + 0x24]
	0x03B0713C MOV V4.16B, V13.16B
	0x03B07140 MOV V5.16B, V12.16B
	0x03B07144 MOV V6.16B, V10.16B
	0x03B07148 MOV V7.16B, V11.16B
	0x03B0714C MOV X0, X31
	0x03B07150 BL 0x3ADAEDC
	0x03B07154 MOV X0, X31
	0x03B07158 BL 0x1E43664
	0x03B0715C MOVZ W8, 0x178
	0x03B07160 MADD X8, X21, X8, X20
	0x03B07164 STR W0, [X8 + 0xBC]
	0x03B07168 LDR X8, [X25]
	0x03B0716C CBZ X8, 0x3B0742C
	0x03B07170 LDR X20, [X8 + 0x38]
	0x03B07174 CBZ X20, 0x3B0742C
	0x03B07178 LDRSW X21, [X26]
	0x03B0717C LDR W8, [X20 + 0x18]
	0x03B07180 CMP W21, W8
	0x03B07184 B.CS 0x3B07430
	0x03B07188 LDR X8, [X19 + 0x580]
	0x03B0718C CBZ X8, 0x3B0742C
	0x03B07190 LDP S0, S1, [X8 + 0x2C]
	0x03B07194 LDP S2, S3, [X8 + 0x34]
	0x03B07198 MOV V4.16B, V13.16B
	0x03B0719C MOV V5.16B, V12.16B
	0x03B071A0 MOV V6.16B, V10.16B
	0x03B071A4 MOV V7.16B, V11.16B
	0x03B071A8 MOV X0, X31
	0x03B071AC BL 0x3ADAEDC
	0x03B071B0 MOV X0, X31
	0x03B071B4 BL 0x1E43664
	0x03B071B8 MOVZ W8, 0x178
	0x03B071BC MADD X8, X21, X8, X20
	0x03B071C0 STR W0, [X8 + 0xE4]
	0x03B071C4 LDR X8, [X25]
	0x03B071C8 CBZ X8, 0x3B0742C
	0x03B071CC LDR X20, [X8 + 0x38]
	0x03B071D0 CBZ X20, 0x3B0742C
	0x03B071D4 LDRSW X21, [X26]
	0x03B071D8 LDR W8, [X20 + 0x18]
	0x03B071DC CMP W21, W8
	0x03B071E0 B.CS 0x3B07430
	0x03B071E4 LDR X8, [X19 + 0x580]
	0x03B071E8 CBZ X8, 0x3B0742C
	0x03B071EC LDP S0, S1, [X8 + 0x4C]
	0x03B071F0 LDP S2, S3, [X8 + 0x54]
	0x03B071F4 MOV V4.16B, V13.16B
	0x03B071F8 MOV V5.16B, V12.16B
	0x03B071FC MOV V6.16B, V10.16B
	0x03B07200 MOV V7.16B, V11.16B
	0x03B07204 MOV X0, X31
	0x03B07208 BL 0x3ADAEDC
	0x03B0720C MOV X0, X31
	0x03B07210 BL 0x1E43664
	0x03B07214 MOVZ W8, 0x178
	0x03B07218 MADD X8, X21, X8, X20
	0x03B0721C STR W0, [X8 + 0x10C]
	0x03B07220 LDRB W9, [X19 + 0x108]
	0x03B07224 LDR X8, [X19 + 0x648]
	0x03B07228 FMOV S0, W31
	0x03B0722C CMP W9, 0x0
	0x03B07230 FCSEL S9, S0, S9, EQ
	0x03B07234 CBZ X8, 0x3B0742C

ISIL:
	001 Move [X31-16], X30
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	004 Move W8, 376
	005 Move X9, [X0+872]
	006 Compare X9, 0
	007 JumpIfEqual {116}
	008 Move X10, [X9+56]
	009 Compare X10, 0
	010 JumpIfEqual {116}
	011 Move W9, [X10+24]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X9, W1
	014 NotImplemented "Instruction MADD not yet implemented."
	015 Move V2, [X10+288]
	016 Subtract S2, S2, S0
	017 Move [X10+288], S2
	018 Move X10, [X0+872]
	019 Compare X10, 0
	020 JumpIfEqual {116}
	021 Move X10, [X10+56]
	022 Compare X10, 0
	023 JumpIfEqual {116}
	024 Move W11, [X10+24]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction MADD not yet implemented."
	027 Move V2, [X10+276]
	028 Subtract S2, S2, S0
	029 Move [X10+276], S2
	030 Move X10, [X0+872]
	031 Compare X10, 0
	032 JumpIfEqual {116}
	033 Move X10, [X10+56]
	034 Compare X10, 0
	035 JumpIfEqual {116}
	036 Move W11, [X10+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction MADD not yet implemented."
	039 Move V2, [X10+300]
	040 Subtract S2, S2, S0
	041 Move [X10+300], S2
	042 Move X10, [X0+872]
	043 Compare X10, 0
	044 JumpIfEqual {116}
	045 Move X10, [X10+56]
	046 Compare X10, 0
	047 JumpIfEqual {116}
	048 Move W11, [X10+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction MADD not yet implemented."
	051 Move V2, [X10+312]
	052 Subtract S2, S2, S0
	053 Move [X10+312], S2
	054 Move X10, [X0+872]
	055 Compare X10, 0
	056 JumpIfEqual {116}
	057 Move X10, [X10+56]
	058 Compare X10, 0
	059 JumpIfEqual {116}
	060 Move W11, [X10+24]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 NotImplemented "Instruction MADD not yet implemented."
	063 Move V2, [X11+328]
	064 Move V3, [X11+336]
	065 Move W12, [X11+404]
	066 Subtract V2, V2, V1
	067 Subtract S3, S3, S0
	068 Move [X11+328], D2
	069 Move [X11+336], S3
	070 Compare W12, 0
	071 JumpIfEqual {112}
	072 NotImplemented "Instruction MADD not yet implemented."
	073 Move V2, [X10+116]
	074 Subtract S2, S2, S0
	075 Move [X10+116], S2
	076 Move X10, [X0+872]
	077 Compare X10, 0
	078 JumpIfEqual {116}
	079 Move X10, [X10+56]
	080 Compare X10, 0
	081 JumpIfEqual {116}
	082 Move W11, [X10+24]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 NotImplemented "Instruction MADD not yet implemented."
	085 Move V2, [X10+156]
	086 Subtract S2, S2, S0
	087 Move [X10+156], S2
	088 Move X10, [X0+872]
	089 Compare X10, 0
	090 JumpIfEqual {116}
	091 Move X10, [X10+56]
	092 Compare X10, 0
	093 JumpIfEqual {116}
	094 Move W11, [X10+24]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 NotImplemented "Instruction MADD not yet implemented."
	097 Move V2, [X10+196]
	098 Subtract S2, S2, S0
	099 Move [X10+196], S2
	100 Move X10, [X0+872]
	101 Compare X10, 0
	102 JumpIfEqual {116}
	103 Move X10, [X10+56]
	104 Compare X10, 0
	105 JumpIfEqual {116}
	106 Move W11, [X10+24]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 NotImplemented "Instruction MADD not yet implemented."
	109 Move V2, [X9+236]
	110 Subtract S2, S2, S0
	111 Move [X9+236], S2
	112 Add W1, W1, 1
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X30, [X31+16]
	115 Return 
	116 Call 0x1C17F20
	117 Call 0x1C17F28

Method: System.Void ResizeLineExtents(System.Int32 size)

Disassembly:
	0x03B07238 LDR X0, [X8 + 0x20]
	0x03B0723C CBZ X0, 0x3B0742C
	0x03B07240 ADRP X20, 0x614000
	0x03B07244 LDR X20, [X20 + 0x608]
	0x03B07248 MOV X1, X31
	0x03B0724C BL 0x3C9C4CC
	0x03B07250 MOV X8, X0
	0x03B07254 LDR X0, [X20]
	0x03B07258 STP X8, X1, [X31]
	0x03B0725C LDR W8, [X0 + 0xE0]
	0x03B07260 CBNZ W8, 0x3B07268
	0x03B07264 BL 0x1C16DFC
	0x03B07268 ADD X0, X31, 0x0
	0x03B0726C MOV X1, X31
	0x03B07270 BL 0x3C9C090
	0x03B07274 LDR X8, [X19 + 0x100]
	0x03B07278 CBZ X8, 0x3B0742C
	0x03B0727C LDR V11, [X8 + 0x108]
	0x03B07280 MOV W23, W0
	0x03B07284 ADD X0, X31, 0x0
	0x03B07288 MOV X1, X31
	0x03B0728C BL 0x3C9C098
	0x03B07290 LDR X8, [X19 + 0x100]
	0x03B07294 CBZ X8, 0x3B0742C
	0x03B07298 LDR V12, [X8 + 0x10C]
	0x03B0729C MOV W24, W0
	0x03B072A0 ADD X0, X31, 0x0
	0x03B072A4 MOV X1, X31
	0x03B072A8 BL 0x3C9C098
	0x03B072AC MOV W21, W0
	0x03B072B0 ADD X0, X31, 0x0
	0x03B072B4 MOV X1, X31
	0x03B072B8 BL 0x3C9C0A8
	0x03B072BC LDR X8, [X19 + 0x100]
	0x03B072C0 CBZ X8, 0x3B0742C
	0x03B072C4 LDR V10, [X8 + 0x10C]
	0x03B072C8 MOV W22, W0
	0x03B072CC ADD X0, X31, 0x0
	0x03B072D0 MOV X1, X31
	0x03B072D4 BL 0x3C9C090
	0x03B072D8 MOV W20, W0
	0x03B072DC ADD X0, X31, 0x0
	0x03B072E0 MOV X1, X31
	0x03B072E4 BL 0x3C9C0A0
	0x03B072E8 LDR X8, [X19 + 0x100]
	0x03B072EC CBZ X8, 0x3B0742C
	0x03B072F0 LDR X9, [X25]
	0x03B072F4 CBZ X9, 0x3B0742C
	0x03B072F8 LDR X9, [X9 + 0x38]
	0x03B072FC CBZ X9, 0x3B0742C
	0x03B07300 LDRSW X10, [X26]
	0x03B07304 LDR W11, [X9 + 0x18]
	0x03B07308 CMP W10, W11
	0x03B0730C B.CS 0x3B07430
	0x03B07310 SCVTF S0, W23
	0x03B07314 FSUB S0, S0, S8
	0x03B07318 SCVTF S1, S11
	0x03B0731C FSUB S0, S0, S9
	0x03B07320 FDIV S2, S0, S1
	0x03B07324 SCVTF S0, W24
	0x03B07328 FSUB S0, S0, S8
	0x03B0732C SCVTF S1, S12
	0x03B07330 FSUB S0, S0, S9
	0x03B07334 FDIV S0, S0, S1
	0x03B07338 LDR V1, [X8 + 0x108]
	0x03B0733C MOVZ W8, 0x178
	0x03B07340 MADD X8, X10, X8, X9
	0x03B07344 STP S2, S0, [X8 + 0x7C]
	0x03B07348 LDR X8, [X25]
	0x03B0734C CBZ X8, 0x3B0742C
	0x03B07350 LDR X8, [X8 + 0x38]
	0x03B07354 CBZ X8, 0x3B0742C
	0x03B07358 LDRSW X9, [X26]
	0x03B0735C LDR W10, [X8 + 0x18]
	0x03B07360 CMP W9, W10
	0x03B07364 B.CS 0x3B07430
	0x03B07368 SCVTF S3, W21
	0x03B0736C FADD S3, S3, S8
	0x03B07370 SCVTF S4, W22
	0x03B07374 FADD S3, S9, S3
	0x03B07378 SCVTF S5, S10
	0x03B0737C MOVZ W10, 0x178
	0x03B07380 FADD S3, S3, S4
	0x03B07384 MADD X8, X9, X10, X8
	0x03B07388 FDIV S3, S3, S5
	0x03B0738C STP S2, S3, [X8 + 0xA4]
	0x03B07390 LDR X8, [X25]
	0x03B07394 CBZ X8, 0x3B0742C
	0x03B07398 LDR X8, [X8 + 0x38]
	0x03B0739C CBZ X8, 0x3B0742C
	0x03B073A0 LDRSW X9, [X26]
	0x03B073A4 LDR W10, [X8 + 0x18]
	0x03B073A8 CMP W9, W10
	0x03B073AC B.CS 0x3B07430
	0x03B073B0 SCVTF S2, W20
	0x03B073B4 FADD S2, S2, S8
	0x03B073B8 SCVTF S4, W0
	0x03B073BC FADD S2, S9, S2
	0x03B073C0 SCVTF S1, S1
	0x03B073C4 MOVZ W10, 0x178
	0x03B073C8 FADD S2, S2, S4
	0x03B073CC MADD X8, X9, X10, X8
	0x03B073D0 FDIV S1, S2, S1
	0x03B073D4 STP S1, S3, [X8 + 0xCC]
	0x03B073D8 LDR X8, [X25]
	0x03B073DC CBZ X8, 0x3B0742C

ISIL:
	001 Subtract X31, X31, 256
	002 Move [X31+192], X30
	003 Move [X31+208], X24
	004 Move [X31+216], X23
	005 Move [X31+224], X22
	006 Move [X31+232], X21
	007 Move [X31+240], X20
	008 Move [X31+248], X19
	009 Move X21, 0x8DC000
	010 Move W8, [X21+1623]
	011 Move W20, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x653000
	018 Move X0, [X0+776]
	019 Call 0x1C17CF4
	020 Move X0, 0x652000
	021 Move X0, [X0+1000]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1623], W8
	025 Move X22, 0x653000
	026 Move X22, [X22+776]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Add W21, W20, 256
	029 Add W0, W20, 1
	030 Move X1, X31
	031 Call Mathf.NextPowerOfTwo, X0
	032 Move W21, W0
	033 Move X0, [X22]
	034 Move W1, W21
	035 Call 0x1C17D6C
	036 Move X8, [X19+872]
	037 Compare X8, 0
	038 JumpIfEqual {101}
	039 Move X24, 0x652000
	040 Move X24, [X24+1000]
	041 Move X20, X0
	042 Move X22, X31
	043 Move X23, X31
	044 NotImplemented "Instruction BIC not yet implemented."
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X8, [X8+80]
	047 Compare X8, 0
	048 JumpIfEqual {101}
	049 Move W9, [X8+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Add X8, X8, X22
	053 Add X1, X8, 32
	054 Add X0, X31, 96
	055 Move W2, 92
	056 Call 0x3EB2AC0
	057 Compare X20, 0
	058 JumpIfEqual {101}
	059 Add X0, X31, 0
	060 Add X1, X31, 96
	061 Move W2, 92
	062 Call 0x3EB2AC0
	063 Move W8, [X20+24]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Add X8, X20, X22
	066 Add X0, X8, 32
	067 Add X1, X31, 0
	068 Move W2, 92
	069 Call 0x3EB2AC0
	070 Compare X20, 0
	071 JumpIfEqual {101}
	072 Move W8, [X20+24]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X0, [X24]
	075 Move W9, [X0+224]
	076 Compare W9, 0
	077 JumpIfNotEqual {81}
	078 Call 0x1C17DFC
	079 Move X0, [X24]
	080 Move W8, [X20+24]
	081 Move X9, [X0+184]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X10, [X9+5528]
	084 Add X9, X20, X22
	085 Move [X9+108], X10
	086 Move X8, [X24]
	087 Move X8, [X8+184]
	088 Move X8, [X8+5536]
	089 Move [X9+116], X8
	090 Move X8, [X24]
	091 Move X8, [X8+184]
	092 Move V0, [X8+5548]
	093 Move [X9+76], S0
	094 Move V0, [X8+5544]
	095 Move [X9+84], S0
	096 Move X8, [X19+872]
	097 Add X23, X23, 1
	098 Add X22, X22, 92
	099 Compare X8, 0
	100 JumpIfNotEqual {45}
	101 Call 0x1C17F20
	102 Move [X8+80], X20
	103 Move X20, [X31+240]
	104 Move X19, [X31+248]
	105 Move X22, [X31+224]
	106 Move X21, [X31+232]
	107 Move X24, [X31+208]
	108 Move X23, [X31+216]
	109 Move X30, [X31+192]
	110 Add X31, X31, 256
	111 Return 
	112 Call 0x1C17F28

Method: TMPro.TMP_TextInfo GetTextInfo(System.String text)

Disassembly:
	0x03B073E0 LDR X8, [X8 + 0x38]
	0x03B073E4 CBZ X8, 0x3B0742C

ISIL:
	001 Move X0, X31
	002 Return X0

Method: System.Void ComputeMarginSize()

Disassembly:
	0x03B073E8 LDRSW X9, [X26]

ISIL:
	001 Return 

Method: System.Void InsertNewLine(System.Int32 i, System.Single baseScale, System.Single currentElementScale, System.Single currentEmScale, System.Single glyphAdjustment, System.Single boldSpacingAdjustment, System.Single characterSpacingAdjustment, System.Single width, System.Single lineGap, ref System.Boolean isMaxVisibleDescenderSet, ref System.Single maxVisibleDescender)

Disassembly:
	0x03B073EC LDR W10, [X8 + 0x18]
	0x03B073F0 CMP W9, W10
	0x03B073F4 B.CS 0x3B07430
	0x03B073F8 LDP X20, X19, [X31 + 0x80]
	0x03B073FC LDP X22, X21, [X31 + 0x70]
	0x03B07400 LDP X24, X23, [X31 + 0x60]
	0x03B07404 LDP X26, X25, [X31 + 0x50]
	0x03B07408 LDR X30, [X31 + 0x40]
	0x03B0740C LDP D9, D8, [X31 + 0x30]
	0x03B07410 LDP D11, D10, [X31 + 0x20]
	0x03B07414 LDP D13, D12, [X31 + 0x10]
	0x03B07418 MOVZ W10, 0x178
	0x03B0741C MADD X8, X9, X10, X8
	0x03B07420 STP S1, S0, [X8 + 0xF4]
	0x03B07424 ADD X31, X31, 0x90
	0x03B07428 RET
	0x03B0742C BL 0x1C16F20
	0x03B07430 BL 0x1C16F28
	0x03B07434 SUB X31, X31, 0x70
	0x03B07438 STR X30, [X31 + 0x10]
	0x03B0743C STP X28, X27, [X31 + 0x20]
	0x03B07440 STP X26, X25, [X31 + 0x30]
	0x03B07444 STP X24, X23, [X31 + 0x40]
	0x03B07448 STP X22, X21, [X31 + 0x50]
	0x03B0744C STP X20, X19, [X31 + 0x60]
	0x03B07450 ADRP X20, 0x8DB000
	0x03B07454 LDRB W8, [X20 + 0x65C]
	0x03B07458 MOV X21, X1
	0x03B0745C MOV X19, X0
	0x03B07460 TBNZ X8, 0x0, 0x3B07484
	0x03B07464 ADRP X0, 0x614000
	0x03B07468 LDR X0, [X0 + 0x608]
	0x03B0746C BL 0x1C16CF4
	0x03B07470 ADRP X0, 0x5EC000
	0x03B07474 LDR X0, [X0 + 0x598]
	0x03B07478 BL 0x1C16CF4
	0x03B0747C MOVZ W8, 0x1
	0x03B07480 STRB W8, [X20 + 0x65C]
	0x03B07484 STP X31, X31, [X31]
	0x03B07488 LDR X8, [X19 + 0x368]
	0x03B0748C CBZ X8, 0x3B07B8C
	0x03B07490 LDR X8, [X8 + 0x38]
	0x03B07494 CBZ X8, 0x3B07B8C
	0x03B07498 LDRSW X9, [X19 + 0x494]
	0x03B0749C LDR W10, [X8 + 0x18]
	0x03B074A0 CMP W9, W10
	0x03B074A4 B.CS 0x3B07B90
	0x03B074A8 MOVZ W10, 0x178
	0x03B074AC MADD X8, X9, X10, X8
	0x03B074B0 ADD X9, X8, 0x11C
	0x03B074B4 LDR X10, [X9]
	0x03B074B8 STR X10, [X8 + 0x70]
	0x03B074BC LDR W9, [X9 + 0x8]
	0x03B074C0 STR W9, [X8 + 0x78]
	0x03B074C4 LDR X8, [X19 + 0x368]
	0x03B074C8 CBZ X8, 0x3B07B8C
	0x03B074CC LDR X8, [X8 + 0x38]
	0x03B074D0 CBZ X8, 0x3B07B8C
	0x03B074D4 LDRSW X9, [X19 + 0x494]
	0x03B074D8 LDR W10, [X8 + 0x18]
	0x03B074DC CMP W9, W10
	0x03B074E0 B.CS 0x3B07B90
	0x03B074E4 MOVZ W10, 0x178
	0x03B074E8 MADD X8, X9, X10, X8
	0x03B074EC LDR X9, [X8 + 0x110]
	0x03B074F0 LDR W10, [X8 + 0x118]
	0x03B074F4 STR X9, [X8 + 0x98]
	0x03B074F8 STR W10, [X8 + 0xA0]
	0x03B074FC LDR X8, [X19 + 0x368]
	0x03B07500 CBZ X8, 0x3B07B8C
	0x03B07504 LDR X8, [X8 + 0x38]
	0x03B07508 CBZ X8, 0x3B07B8C
	0x03B0750C LDRSW X9, [X19 + 0x494]
	0x03B07510 LDR W10, [X8 + 0x18]
	0x03B07514 CMP W9, W10
	0x03B07518 B.CS 0x3B07B90
	0x03B0751C MOVZ W10, 0x178
	0x03B07520 MADD X8, X9, X10, X8
	0x03B07524 LDR X9, [X8 + 0x128]
	0x03B07528 LDR W10, [X8 + 0x130]
	0x03B0752C STR X9, [X8 + 0xC0]
	0x03B07530 STR W10, [X8 + 0xC8]
	0x03B07534 LDR X8, [X19 + 0x368]
	0x03B07538 CBZ X8, 0x3B07B8C
	0x03B0753C LDR X8, [X8 + 0x38]
	0x03B07540 CBZ X8, 0x3B07B8C
	0x03B07544 LDRSW X9, [X19 + 0x494]
	0x03B07548 LDR W10, [X8 + 0x18]
	0x03B0754C CMP W9, W10
	0x03B07550 B.CS 0x3B07B90
	0x03B07554 MOVZ W10, 0x178
	0x03B07558 MADD X8, X9, X10, X8
	0x03B0755C ADD X9, X8, 0x134
	0x03B07560 LDR X10, [X9]
	0x03B07564 STR X10, [X8 + 0xE8]
	0x03B07568 LDR W9, [X9 + 0x8]
	0x03B0756C STR W9, [X8 + 0xF0]
	0x03B07570 LDRB W8, [X19 + 0x1B8]
	0x03B07574 CBZ W8, 0x3B0758C
	0x03B07578 LDR W20, [X19 + 0x1BC]
	0x03B0757C MOVZ W8, 0x1
	0x03B07580 ADD X25, X19, 0x1B9
	0x03B07584 STRB W8, [X19 + 0x1B9]
	0x03B07588 B 0x3B0759C
	0x03B0758C LDRB W8, [X19 + 0x1B9]
	0x03B07590 LDR W20, [X19 + 0x1BC]
	0x03B07594 ADD X25, X19, 0x1B9
	0x03B07598 CBZ W8, 0x3B075B0
	0x03B0759C AND X1, X21, 0x0
	0x03B075A0 MOV W0, W20
	0x03B075A4 MOV X2, X31
	0x03B075A8 BL 0x3ADAC90
	0x03B075AC MOV X20, X0
	0x03B075B0 ADRP X26, 0x5EC000
	0x03B075B4 LDR X26, [X26 + 0x598]
	0x03B075B8 LDRB W10, [X19 + 0x147]
	0x03B075BC UBFM X8, X21, 0x18, 0x3F
	0x03B075C0 UBFM W9, W20, 0x18, 0x1F
	0x03B075C4 CMP W9, W8, UXTB
	0x03B075C8 LDRB W11, [X19 + 0x160]
	0x03B075CC CSEL W8, W9, W8, CC
	0x03B075D0 CMP W10, W20, LSR
	0x03B075D4 CSEL W8, W8, W10, HI
	0x03B075D8 BFM W20, W8, 0x8, 0x7
	0x03B075DC CBZ W11, 0x3B07798
	0x03B075E0 LDR X0, [X26]
	0x03B075E4 LDR X21, [X19 + 0x1A8]
	0x03B075E8 LDR W8, [X0 + 0xE0]
	0x03B075EC CBNZ W8, 0x3B075F4
	0x03B075F0 BL 0x1C16DFC
	0x03B075F4 MOV X0, X21
	0x03B075F8 MOV X1, X31
	0x03B075FC MOV X2, X31
	0x03B07600 BL 0x3C354F8
	0x03B07604 LDRB W8, [X25]
	0x03B07608 TBZ X0, 0x0, 0x3B076C4
	0x03B0760C CBZ W8, 0x3B07798
	0x03B07610 LDR X8, [X19 + 0x1A8]
	0x03B07614 CBZ X8, 0x3B07B8C
	0x03B07618 LDP S0, S1, [X8 + 0x3C]
	0x03B0761C LDP S2, S3, [X8 + 0x44]
	0x03B07620 MOV X0, X31
	0x03B07624 BL 0x1E43664
	0x03B07628 MOV W24, W20
	0x03B0762C AND X1, X0, 0x0
	0x03B07630 MOV X0, X24
	0x03B07634 MOV X2, X31
	0x03B07638 BL 0x3ADAC90
	0x03B0763C LDRB W8, [X25]
	0x03B07640 MOV X21, X0
	0x03B07644 CBZ W8, 0x3B07B78
	0x03B07648 LDR X8, [X19 + 0x1A8]
	0x03B0764C CBZ X8, 0x3B07B8C
	0x03B07650 LDP S0, S1, [X8 + 0x1C]
	0x03B07654 LDP S2, S3, [X8 + 0x24]
	0x03B07658 MOV X0, X31
	0x03B0765C BL 0x1E43664
	0x03B07660 AND X1, X0, 0x0
	0x03B07664 MOV X0, X24
	0x03B07668 MOV X2, X31
	0x03B0766C BL 0x3ADAC90
	0x03B07670 LDRB W8, [X25]
	0x03B07674 MOV X22, X0
	0x03B07678 CBZ W8, 0x3B07B84
	0x03B0767C LDR X8, [X19 + 0x1A8]
	0x03B07680 CBZ X8, 0x3B07B8C
	0x03B07684 LDP S0, S1, [X8 + 0x2C]
	0x03B07688 LDP S2, S3, [X8 + 0x34]
	0x03B0768C MOV X0, X31
	0x03B07690 BL 0x1E43664
	0x03B07694 AND X1, X0, 0x0
	0x03B07698 MOV X0, X24
	0x03B0769C MOV X2, X31
	0x03B076A0 BL 0x3ADAC90
	0x03B076A4 LDRB W8, [X25]
	0x03B076A8 MOV X23, X0
	0x03B076AC CBZ W8, 0x3B077A4
	0x03B076B0 LDR X8, [X19 + 0x1A8]
	0x03B076B4 CBZ X8, 0x3B07B8C
	0x03B076B8 LDP S0, S1, [X8 + 0x4C]
	0x03B076BC LDP S2, S3, [X8 + 0x54]
	0x03B076C0 B 0x3B07778
	0x03B076C4 CBZ W8, 0x3B07798
	0x03B076C8 LDR V0, [X19 + 0x188]
	0x03B076CC LDR V1, [X19 + 0x18C]
	0x03B076D0 LDR V2, [X19 + 0x190]
	0x03B076D4 LDR V3, [X19 + 0x194]
	0x03B076D8 MOV X0, X31
	0x03B076DC BL 0x1E43664
	0x03B076E0 MOV W24, W20
	0x03B076E4 AND X1, X0, 0x0
	0x03B076E8 MOV X0, X24
	0x03B076EC MOV X2, X31
	0x03B076F0 BL 0x3ADAC90
	0x03B076F4 LDRB W8, [X19 + 0x1B9]
	0x03B076F8 MOV W21, W0
	0x03B076FC CBZ W8, 0x3B07B78
	0x03B07700 LDR V0, [X19 + 0x168]
	0x03B07704 LDR V1, [X19 + 0x16C]
	0x03B07708 LDR V2, [X19 + 0x170]
	0x03B0770C LDR V3, [X19 + 0x174]
	0x03B07710 MOV X0, X31
	0x03B07714 BL 0x1E43664
	0x03B07718 AND X1, X0, 0x0
	0x03B0771C MOV X0, X24
	0x03B07720 MOV X2, X31
	0x03B07724 BL 0x3ADAC90
	0x03B07728 LDRB W8, [X19 + 0x1B9]
	0x03B0772C MOV W22, W0
	0x03B07730 CBZ W8, 0x3B07B84
	0x03B07734 LDR V0, [X19 + 0x178]
	0x03B07738 LDR V1, [X19 + 0x17C]
	0x03B0773C LDR V2, [X19 + 0x180]
	0x03B07740 LDR V3, [X19 + 0x184]
	0x03B07744 MOV X0, X31
	0x03B07748 BL 0x1E43664
	0x03B0774C AND X1, X0, 0x0
	0x03B07750 MOV X0, X24
	0x03B07754 MOV X2, X31
	0x03B07758 BL 0x3ADAC90
	0x03B0775C LDRB W8, [X19 + 0x1B9]
	0x03B07760 MOV W23, W0
	0x03B07764 CBZ W8, 0x3B077A4
	0x03B07768 LDR V0, [X19 + 0x198]
	0x03B0776C LDR V1, [X19 + 0x19C]
	0x03B07770 LDR V2, [X19 + 0x1A0]
	0x03B07774 LDR V3, [X19 + 0x1A4]
	0x03B07778 MOV X0, X31
	0x03B0777C BL 0x1E43664
	0x03B07780 AND X1, X0, 0x0
	0x03B07784 MOV X0, X24
	0x03B07788 MOV X2, X31
	0x03B0778C BL 0x3ADAC90
	0x03B07790 MOV W20, W0
	0x03B07794 B 0x3B077A4
	0x03B07798 MOV W23, W20
	0x03B0779C MOV W22, W20
	0x03B077A0 MOV W21, W20
	0x03B077A4 LDR X0, [X26]
	0x03B077A8 LDR X24, [X19 + 0x580]
	0x03B077AC LDR W8, [X0 + 0xE0]
	0x03B077B0 CBNZ W8, 0x3B077B8
	0x03B077B4 BL 0x1C16DFC
	0x03B077B8 MOV X0, X24
	0x03B077BC MOV X1, X31
	0x03B077C0 MOV X2, X31
	0x03B077C4 BL 0x3C354F8
	0x03B077C8 TBZ X0, 0x0, 0x3B078AC
	0x03B077CC LDRB W8, [X25]
	0x03B077D0 CBZ W8, 0x3B078AC
	0x03B077D4 LDR X8, [X19 + 0x580]
	0x03B077D8 CBZ X8, 0x3B07B8C
	0x03B077DC LDP S0, S1, [X8 + 0x3C]
	0x03B077E0 LDP S2, S3, [X8 + 0x44]
	0x03B077E4 MOV X0, X31
	0x03B077E8 BL 0x1E43664
	0x03B077EC MOV W8, W21
	0x03B077F0 AND X1, X0, 0x0
	0x03B077F4 MOV X0, X8
	0x03B077F8 MOV X2, X31
	0x03B077FC BL 0x3ADAC90
	0x03B07800 LDRB W8, [X25]
	0x03B07804 MOV W21, W0
	0x03B07808 CBZ W8, 0x3B078AC
	0x03B0780C LDR X8, [X19 + 0x580]
	0x03B07810 CBZ X8, 0x3B07B8C
	0x03B07814 LDP S0, S1, [X8 + 0x1C]
	0x03B07818 LDP S2, S3, [X8 + 0x24]
	0x03B0781C MOV X0, X31
	0x03B07820 BL 0x1E43664
	0x03B07824 MOV W8, W22
	0x03B07828 AND X1, X0, 0x0
	0x03B0782C MOV X0, X8
	0x03B07830 MOV X2, X31
	0x03B07834 BL 0x3ADAC90
	0x03B07838 LDRB W8, [X25]
	0x03B0783C MOV W22, W0
	0x03B07840 CBZ W8, 0x3B078AC
	0x03B07844 LDR X8, [X19 + 0x580]
	0x03B07848 CBZ X8, 0x3B07B8C
	0x03B0784C LDP S0, S1, [X8 + 0x2C]
	0x03B07850 LDP S2, S3, [X8 + 0x34]
	0x03B07854 MOV X0, X31
	0x03B07858 BL 0x1E43664
	0x03B0785C MOV W8, W23
	0x03B07860 AND X1, X0, 0x0
	0x03B07864 MOV X0, X8
	0x03B07868 MOV X2, X31
	0x03B0786C BL 0x3ADAC90
	0x03B07870 LDRB W8, [X25]
	0x03B07874 MOV W23, W0
	0x03B07878 CBZ W8, 0x3B078AC
	0x03B0787C LDR X8, [X19 + 0x580]
	0x03B07880 CBZ X8, 0x3B07B8C
	0x03B07884 LDP S0, S1, [X8 + 0x4C]
	0x03B07888 LDP S2, S3, [X8 + 0x54]
	0x03B0788C MOV X0, X31
	0x03B07890 BL 0x1E43664
	0x03B07894 MOV W8, W20
	0x03B07898 AND X1, X0, 0x0
	0x03B0789C MOV X0, X8
	0x03B078A0 MOV X2, X31
	0x03B078A4 BL 0x3ADAC90
	0x03B078A8 MOV W20, W0
	0x03B078AC LDR X8, [X19 + 0x368]
	0x03B078B0 CBZ X8, 0x3B07B8C
	0x03B078B4 LDR X8, [X8 + 0x38]
	0x03B078B8 CBZ X8, 0x3B07B8C

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X23, 0x8DC000
	017 Move W8, [X23+1624]
	018 Move X22, X3
	019 Move X21, X2
	020 Move V15, V6
	021 Move V12, V5
	022 Move V11, V4
	023 Move V13, V3
	024 Move V9, V2
	025 Move V14, V1
	026 Move V10, V0
	027 Move W20, W1
	028 Move X19, X0
	029 Move [X31+12], S7
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {42}
	034 Move X0, 0x5ED000
	035 Move X0, [X0+1448]
	036 Call 0x1C17CF4
	037 Move X0, 0x652000
	038 Move X0, [X0+1000]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X23+1624], W8
	042 Move V0, [X19+1240]
	043 NotImplemented "Instruction FCMP not yet implemented."
	044 Move X8, 0x5ED000
	045 Move X8, [X8+1448]
	046 Move V0, [X19+1224]
	047 Move V1, [X19+1232]
	048 Move X0, [X8]
	049 Subtract S8, S0, S1
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X8, -50446336
	055 Move V0, [X8+816]
	056 NotImplemented "Instruction FABS not yet implemented."
	057 NotImplemented "Instruction FCMP not yet implemented."
	058 Move W8, [X19+708]
	059 Compare W8, 0
	060 JumpIfNotEqual {75}
	061 Move W8, [X19+828]
	062 Compare W8, 0
	063 JumpIfNotEqual {75}
	064 Move W1, [X19+1176]
	065 Move W2, [X19+1172]
	066 Move X0, X19
	067 Move V0, V8
	068 Call TMP_Text.AdjustLineOffset, X0, X1, X2, V0
	069 Move V0, [X19+1220]
	070 Move V1, [X19+1240]
	071 Subtract S0, S0, S8
	072 Add S1, S8, S1
	073 Move [X19+1220], S0
	074 Move [X19+1240], S1
	075 Move V1, [X19+1240]
	076 Move V0, [X19+1228]
	077 Move V2, [X19+1220]
	078 Subtract S0, S0, S1
	079 NotImplemented "Instruction FCMP not yet implemented."
	080 NotImplemented "Instruction FCSEL not yet implemented."
	081 Move [X19+1220], S3
	082 Move W8, [X21]
	083 Move V2, [X19+1224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Move [X22], S3
	087 Move W8, [X19+820]
	088 Compare W8, 0
	089 JumpIfEqual {98}
	090 Move W8, [X19+1172]
	091 Move W9, [X19+808]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move W8, [X19+1192]
	094 Move W9, [X19+816]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move W8, 1
	097 Move [X21], W8
	098 Move X11, [X19+872]
	099 Compare X11, 0
	100 JumpIfEqual {332}
	101 Move X9, [X11+80]
	102 Compare X9, 0
	103 JumpIfEqual {332}
	104 NotImplemented "Instruction LDRSW not yet implemented."
	105 Move W8, [X9+24]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move W13, [X19+1176]
	108 Move W8, 92
	109 NotImplemented "Instruction MADD not yet implemented."
	110 Move W12, 1180
	111 Move [X14+52], W13
	112 Move W8, [X19+1180]
	113 Move W15, 1176
	114 NotImplemented "Instruction CMP not yet implemented."
	115 NotImplemented "Instruction CSEL not yet implemented."
	116 Move W8, [X19]
	117 Move [X19+1180], W8
	118 Move [X14+56], W8
	119 Move W8, [X19+1172]
	120 Subtract W8, W8, 1
	121 NotImplemented "Instruction BIC not yet implemented."
	122 Move [X19+1184], W8
	123 Move [X14+60], W8
	124 Move W15, [X19+1188]
	125 NotImplemented "Instruction LDRSW not yet implemented."
	126 Subtract W13, W8, W13
	127 Add W13, W13, 1
	128 NotImplemented "Instruction CMP not yet implemented."
	129 NotImplemented "Instruction CSEL not yet implemented."
	130 Move [X19+1188], W15
	131 Move [X14+64], W15
	132 Move [X14+36], W13
	133 Move W13, [X19+1196]
	134 Move [X14+40], W13
	135 Move X11, [X11+56]
	136 Compare X11, 0
	137 JumpIfEqual {332}
	138 Move W13, [X11+24]
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move W13, 376
	141 NotImplemented "Instruction MADD not yet implemented."
	142 Move W11, [X11+284]
	143 Move W12, 92
	144 NotImplemented "Instruction MADD not yet implemented."
	145 Move [X9+112], S0
	146 Move [X9+108], W11
	147 Move X11, [X19+872]
	148 Compare X11, 0
	149 JumpIfEqual {332}
	150 Move X9, [X11+80]
	151 Compare X9, 0
	152 JumpIfEqual {332}
	153 NotImplemented "Instruction LDRSW not yet implemented."
	154 Move W12, [X9+24]
	155 NotImplemented "Instruction CMP not yet implemented."
	156 Move X11, [X11+56]
	157 Compare X11, 0
	158 JumpIfEqual {332}
	159 NotImplemented "Instruction LDRSW not yet implemented."
	160 Move W13, [X11+24]
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move W13, 376
	163 NotImplemented "Instruction MADD not yet implemented."
	164 Move W11, [X11+296]
	165 Move W12, 92
	166 Subtract S1, S2, S1
	167 NotImplemented "Instruction MADD not yet implemented."
	168 Move [X9+116], W11
	169 Move [X9+120], S1
	170 Move X11, [X19+872]
	171 Compare X11, 0
	172 JumpIfEqual {332}
	173 Move X9, [X11+80]
	174 Compare X9, 0
	175 JumpIfEqual {332}
	176 NotImplemented "Instruction LDRSW not yet implemented."
	177 Move W12, [X9+24]
	178 NotImplemented "Instruction CMP not yet implemented."
	179 Move W12, 92
	180 NotImplemented "Instruction MADD not yet implemented."
	181 Move V2, [X12+116]
	182 Move [X12+92], S15
	183 Move [X12+68], S2
	184 Move X14, [X19+256]
	185 Compare X14, 0
	186 JumpIfEqual {332}
	187 Move X11, [X11+56]
	188 Compare X11, 0
	189 JumpIfEqual {332}
	190 NotImplemented "Instruction LDRSW not yet implemented."
	191 Move W12, [X11+24]
	192 NotImplemented "Instruction CMP not yet implemented."
	193 Move V2, [X14+428]
	194 Move V3, [X19+684]
	195 Move W14, 376
	196 Move V6, [X19+724]
	197 Add S2, S2, S12
	198 NotImplemented "Instruction MADD not yet implemented."
	199 Add S2, S2, S11
	200 Multiply S4, S14, S13
	201 Move V5, [X13+324]
	202 Move W13, [X19+240]
	203 Multiply S2, S2, S9
	204 Move S7, 1
	205 Add S2, S4, S2
	206 Subtract S6, S7, S6
	207 Subtract S2, S2, S3
	208 Multiply S2, S6, S2
	209 NotImplemented "Instruction CMP not yet implemented."
	210 NotImplemented "Instruction FNEG not yet implemented."
	211 Move W13, 92
	212 NotImplemented "Instruction FCSEL not yet implemented."
	213 NotImplemented "Instruction MADD not yet implemented."
	214 Add S2, S5, S2
	215 NotImplemented "Instruction CMP not yet implemented."
	216 Move [X13+88], S2
	217 Move V8, [X31+12]
	218 NotImplemented "Instruction NOP not yet implemented."
	219 NotImplemented "Instruction UMADDL not yet implemented."
	220 Subtract S4, S1, S0
	221 Move [X8+324], S2
	222 Multiply S2, S10, S8
	223 Add S2, S2, S4
	224 Move V4, [X19+1240]
	225 Move W11, 92
	226 Move S3, W31
	227 NotImplemented "Instruction MADD not yet implemented."
	228 Move [X8+72], S2
	229 Move [X8+80], S1
	230 Subtract S1, S3, S4
	231 Move [X8+80], S1
	232 Move [X8+88], S0
	233 Move W8, [X19+1172]
	234 Move X21, 0x652000
	235 Move X21, [X21+1000]
	236 Move [X19+1196], W31
	237 Move [X19+1176], W8
	238 Move X0, [X21]
	239 Move W9, [X0+224]
	240 Compare W9, 0
	241 JumpIfNotEqual {245}
	242 Call 0x1C17DFC
	243 Move W8, [X19+1172]
	244 Move X0, [X21]
	245 Move X9, [X0+184]
	246 Subtract W3, W8, 1
	247 Move X0, X19
	248 Move W2, W20
	249 Add X1, X9, 1040
	250 Call TMP_Text.SaveWordWrappingState, X0, X1, X2, X3
	251 Move W9, [X19+1192]
	252 Move X8, [X19+872]
	253 Add W1, W9, 1
	254 Move [X19+1192], W1
	255 Compare X8, 0
	256 JumpIfEqual {332}
	257 Move X8, [X8+80]
	258 Compare X8, 0
	259 JumpIfEqual {332}
	260 Move W8, [X8+24]
	261 NotImplemented "Instruction CMP not yet implemented."
	262 Move X0, X19
	263 Call TMP_Text.ResizeLineExtents, X0, X1
	264 Move X8, -50446336
	265 Move V0, [X19+704]
	266 Move V1, [X8+532]
	267 NotImplemented "Instruction FCMP not yet implemented."
	268 Move X8, [X19+872]
	269 Compare X8, 0
	270 JumpIfEqual {332}
	271 Move X8, [X8+56]
	272 Compare X8, 0
	273 JumpIfEqual {332}
	274 NotImplemented "Instruction LDRSW not yet implemented."
	275 Move W10, [X8+24]
	276 NotImplemented "Instruction CMP not yet implemented."
	277 Move V0, [X19+1228]
	278 Move W10, 376
	279 Move V1, [X19+700]
	280 Move S3, W31
	281 NotImplemented "Instruction NOP not yet implemented."
	282 NotImplemented "Instruction MADD not yet implemented."
	283 Subtract S0, S3, S0
	284 Move V3, [X8+340]
	285 Move V2, [X19+696]
	286 Move V4, [X19+1240]
	287 Add S1, S1, S8
	288 Multiply S1, S1, S10
	289 Add S0, S3, S0
	290 Multiply S2, S2, S9
	291 Add S0, S0, S1
	292 Add S0, S2, S0
	293 Add S0, S4, S0
	294 Move [X19+1240], S0
	295 Move [X19+1232], S3
	296 Move V1, [X19+696]
	297 Move V2, [X19+1240]
	298 Multiply S1, S1, S9
	299 Add S0, S0, S1
	300 Add S0, S2, S0
	301 Move [X19+1240], S0
	302 Move X0, [X21]
	303 Move W8, [X0+224]
	304 Compare W8, 0
	305 JumpIfNotEqual {308}
	306 Call 0x1C17DFC
	307 Move X0, [X21]
	308 Move X8, [X0+184]
	309 Move V0, [X19+1036]
	310 Move S2, W31
	311 Move X22, [X31+96]
	312 Move X21, [X31+104]
	313 Move V1, [X8+5544]
	314 Add S0, S0, S2
	315 Move [X19+1600], S0
	316 Move X30, [X31+80]
	317 Move X23, [X31+88]
	318 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	319 Move [X19+1224], D1
	320 Move X20, [X31+112]
	321 Move X19, [X31+120]
	322 Move D9, [X31+64]
	323 Move D8, [X31+72]
	324 Move D11, [X31+48]
	325 Move D10, [X31+56]
	326 Move D13, [X31+32]
	327 Move D12, [X31+40]
	328 Move D15, [X31+16]
	329 Move D14, [X31+24]
	330 Add X31, X31, 128
	331 Return 
	332 Call 0x1C17F20
	333 Call 0x1C17F28

Method: System.Void SaveWordWrappingState(ref TMPro.WordWrapState state, System.Int32 index, System.Int32 count)

Disassembly:
	0x03B06DB4 FMUL S3, S10, S3
	0x03B06DB8 MOV X0, X31
	0x03B06DBC BL 0x1E43664
	0x03B06DC0 MOVZ W8, 0x178
	0x03B06DC4 MADD X8, X24, X8, X21
	0x03B06DC8 STR W0, [X8 + 0xE4]
	0x03B06DCC LDR X8, [X19 + 0x368]
	0x03B06DD0 CBZ X8, 0x3B0742C
	0x03B06DD4 LDR X21, [X8 + 0x38]
	0x03B06DD8 CBZ X21, 0x3B0742C
	0x03B06DDC LDRSW X24, [X26]
	0x03B06DE0 LDR W8, [X21 + 0x18]
	0x03B06DE4 CMP W24, W8
	0x03B06DE8 B.CS 0x3B07430
	0x03B06DEC LDR V0, [X19 + 0x198]
	0x03B06DF0 LDR V1, [X19 + 0x19C]
	0x03B06DF4 LDR V2, [X19 + 0x1A0]
	0x03B06DF8 LDR V3, [X19 + 0x1A4]
	0x03B06DFC FMUL S0, S13, S0
	0x03B06E00 FMUL S1, S12, S1
	0x03B06E04 FMUL S2, S11, S2
	0x03B06E08 FMUL S3, S10, S3
	0x03B06E0C MOV X0, X31
	0x03B06E10 BL 0x1E43664
	0x03B06E14 MOVZ W8, 0x178
	0x03B06E18 MADD X8, X24, X8, X21
	0x03B06E1C STR W0, [X8 + 0x10C]
	0x03B06E20 LDR X0, [X23]
	0x03B06E24 LDR X21, [X19 + 0x580]
	0x03B06E28 LDR W8, [X0 + 0xE0]
	0x03B06E2C CBNZ W8, 0x3B06E34
	0x03B06E30 BL 0x1C16DFC
	0x03B06E34 MOV X0, X21
	0x03B06E38 MOV X1, X31
	0x03B06E3C MOV X2, X31
	0x03B06E40 BL 0x3C354F8
	0x03B06E44 TBZ X0, 0x0, 0x3B07220
	0x03B06E48 LDR X8, [X19 + 0x368]
	0x03B06E4C CBZ X8, 0x3B0742C
	0x03B06E50 LDR X21, [X8 + 0x38]
	0x03B06E54 CBZ X21, 0x3B0742C
	0x03B06E58 LDRSW X23, [X26]
	0x03B06E5C LDR W8, [X21 + 0x18]
	0x03B06E60 CMP W23, W8
	0x03B06E64 B.CS 0x3B07430
	0x03B06E68 LDRB W8, [X19 + 0x5B0]
	0x03B06E6C CBZ W8, 0x3B07098
	0x03B06E70 MOVZ W8, 0x178
	0x03B06E74 MADD X20, X23, X8, X21
	0x03B06E78 LDR W9, [X20 + 0x94]!
	0x03B06E7C LDR X8, [X19 + 0x580]
	0x03B06E80 CBZ X8, 0x3B0742C
	0x03B06E84 UBFM X10, X9, 0x18, 0x3F
	0x03B06E88 UCVTF S0, W10
	0x03B06E8C UBFM W10, W9, 0x10, 0x17
	0x03B06E90 MOVZ W11, 0x437F0000
	0x03B06E94 UCVTF S2, W10
	0x03B06E98 UBFM W10, W9, 0x8, 0xF
	0x03B06E9C AND W9, W9, 0xFF
	0x03B06EA0 FMOV S1, W11
	0x03B06EA4 UCVTF S6, W9
	0x03B06EA8 LDP S3, S4, [X8 + 0x3C]
	0x03B06EAC FDIV S7, S0, S1
	0x03B06EB0 FDIV S0, S6, S1
	0x03B06EB4 LDP S6, S16, [X8 + 0x44]
	0x03B06EB8 UCVTF S5, W10
	0x03B06EBC FDIV S2, S2, S1
	0x03B06EC0 FDIV S5, S5, S1
	0x03B06EC4 FMUL S0, S0, S3
	0x03B06EC8 FMUL S1, S5, S4
	0x03B06ECC FMUL S2, S2, S6
	0x03B06ED0 FMUL S3, S7, S16
	0x03B06ED4 MOV X0, X31
	0x03B06ED8 BL 0x1E43664
	0x03B06EDC STR W0, [X20]
	0x03B06EE0 LDR X8, [X25]
	0x03B06EE4 CBZ X8, 0x3B0742C
	0x03B06EE8 LDR X8, [X8 + 0x38]
	0x03B06EEC CBZ X8, 0x3B0742C
	0x03B06EF0 LDRSW X9, [X26]
	0x03B06EF4 LDR W10, [X8 + 0x18]
	0x03B06EF8 CMP W9, W10
	0x03B06EFC B.CS 0x3B07430
	0x03B06F00 MOVZ W10, 0x178
	0x03B06F04 MADD X20, X9, X10, X8
	0x03B06F08 LDR W9, [X20 + 0xBC]!
	0x03B06F0C LDR X8, [X19 + 0x580]
	0x03B06F10 CBZ X8, 0x3B0742C
	0x03B06F14 UBFM X10, X9, 0x18, 0x3F
	0x03B06F18 UCVTF S0, W10
	0x03B06F1C UBFM W10, W9, 0x10, 0x17
	0x03B06F20 MOVZ W11, 0x437F0000
	0x03B06F24 UCVTF S2, W10
	0x03B06F28 UBFM W10, W9, 0x8, 0xF
	0x03B06F2C AND W9, W9, 0xFF
	0x03B06F30 FMOV S1, W11
	0x03B06F34 UCVTF S6, W9
	0x03B06F38 LDP S3, S4, [X8 + 0x1C]
	0x03B06F3C FDIV S7, S0, S1
	0x03B06F40 FDIV S0, S6, S1
	0x03B06F44 LDP S6, S16, [X8 + 0x24]
	0x03B06F48 UCVTF S5, W10
	0x03B06F4C FDIV S2, S2, S1
	0x03B06F50 FDIV S5, S5, S1
	0x03B06F54 FMUL S0, S0, S3
	0x03B06F58 FMUL S1, S5, S4
	0x03B06F5C FMUL S2, S2, S6
	0x03B06F60 FMUL S3, S7, S16
	0x03B06F64 MOV X0, X31
	0x03B06F68 BL 0x1E43664
	0x03B06F6C STR W0, [X20]
	0x03B06F70 LDR X8, [X25]
	0x03B06F74 CBZ X8, 0x3B0742C
	0x03B06F78 LDR X8, [X8 + 0x38]
	0x03B06F7C CBZ X8, 0x3B0742C
	0x03B06F80 LDRSW X9, [X26]
	0x03B06F84 LDR W10, [X8 + 0x18]
	0x03B06F88 CMP W9, W10
	0x03B06F8C B.CS 0x3B07430
	0x03B06F90 MOVZ W10, 0x178
	0x03B06F94 MADD X20, X9, X10, X8
	0x03B06F98 LDR W9, [X20 + 0xE4]!
	0x03B06F9C LDR X8, [X19 + 0x580]
	0x03B06FA0 CBZ X8, 0x3B0742C
	0x03B06FA4 UBFM X10, X9, 0x18, 0x3F
	0x03B06FA8 UCVTF S0, W10
	0x03B06FAC UBFM W10, W9, 0x10, 0x17
	0x03B06FB0 MOVZ W11, 0x437F0000
	0x03B06FB4 UCVTF S2, W10
	0x03B06FB8 UBFM W10, W9, 0x8, 0xF
	0x03B06FBC AND W9, W9, 0xFF
	0x03B06FC0 FMOV S1, W11
	0x03B06FC4 UCVTF S6, W9
	0x03B06FC8 LDP S3, S4, [X8 + 0x2C]
	0x03B06FCC FDIV S7, S0, S1
	0x03B06FD0 FDIV S0, S6, S1
	0x03B06FD4 LDP S6, S16, [X8 + 0x34]
	0x03B06FD8 UCVTF S5, W10
	0x03B06FDC FDIV S2, S2, S1
	0x03B06FE0 FDIV S5, S5, S1
	0x03B06FE4 FMUL S0, S0, S3
	0x03B06FE8 FMUL S1, S5, S4
	0x03B06FEC FMUL S2, S2, S6
	0x03B06FF0 FMUL S3, S7, S16
	0x03B06FF4 MOV X0, X31
	0x03B06FF8 BL 0x1E43664
	0x03B06FFC STR W0, [X20]
	0x03B07000 LDR X8, [X25]
	0x03B07004 CBZ X8, 0x3B0742C
	0x03B07008 LDR X9, [X8 + 0x38]
	0x03B0700C CBZ X9, 0x3B0742C
	0x03B07010 LDRSW X10, [X26]
	0x03B07014 LDR W8, [X9 + 0x18]
	0x03B07018 CMP W10, W8
	0x03B0701C B.CS 0x3B07430
	0x03B07020 LDR X8, [X19 + 0x580]
	0x03B07024 CBZ X8, 0x3B0742C
	0x03B07028 MOVZ W11, 0x178
	0x03B0702C MADD X9, X10, X11, X9
	0x03B07030 LDR W10, [X9 + 0x10C]
	0x03B07034 MOVZ W11, 0x437F0000
	0x03B07038 FMOV S2, W11
	0x03B0703C LDP S0, S1, [X8 + 0x4C]
	0x03B07040 UBFM X11, X10, 0x18, 0x3F
	0x03B07044 UCVTF S3, W11
	0x03B07048 UBFM W11, W10, 0x10, 0x17
	0x03B0704C UCVTF S4, W11
	0x03B07050 UBFM W11, W10, 0x8, 0xF
	0x03B07054 AND W10, W10, 0xFF
	0x03B07058 UCVTF S5, W11
	0x03B0705C UCVTF S6, W10
	0x03B07060 FDIV S3, S3, S2
	0x03B07064 FDIV S4, S4, S2
	0x03B07068 FDIV S5, S5, S2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x8DD000
	008 Move W8, [X23+1625]
	009 Move W21, W3
	010 Move W22, W2
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x653000
	018 Move X0, [X0+1000]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+1625], W8
	022 Move X8, [X20+256]
	023 Move [X19+840], X8
	024 Move X8, [X20+1688]
	025 Move [X19+848], X8
	026 Move X8, [X20+280]
	027 Move [X19+856], X8
	028 Move W8, [X20+288]
	029 Move [X19], W22
	030 Move [X19+4], W21
	031 Move [X19+864], W8
	032 Move W8, [X20+1196]
	033 Move [X19+8], W8
	034 Move X8, [X20+872]
	035 Compare X8, 0
	036 JumpIfEqual {202}
	037 Move W8, [X8+40]
	038 Add X10, X19, 260
	039 Move X21, 0x653000
	040 Move [X19+16], W8
	041 Move V0, [X20+1176]
	042 Move [X19+20], D0
	043 Move W8, [X20+1188]
	044 Move [X19+32], W8
	045 Move W8, [X20+604]
	046 Move [X19+100], W8
	047 Move W8, [X20+1520]
	048 Move [X19+104], W8
	049 Move V0, [X20+1028]
	050 Add X8, X20, 684
	051 Add X9, X8, 536
	052 Move [X19+108], S0
	053 Move V0, [X20+488]
	054 Move [X19+112], S0
	055 Move V0, [X20+1600]
	056 Move [X19+80], S0
	057 Move V0, [X20+1208]
	058 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	059 Move [X19+40], D0
	060 Move V0, [X9]
	061 Add X9, X20, 1244
	062 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	063 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	064 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	065 Move [X19+3], V0
	066 Move V0, [X20+1204]
	067 Move [X19+64], S0
	068 Move V0, [X20+992]
	069 Move [X19+84], S0
	070 Move V0, [X20+1004]
	071 Move [X19+88], S0
	072 Move V0, [X9]
	073 Add X9, X19, 868
	074 Move [X9], V0
	075 Move W9, [X20+1192]
	076 Move [X19+36], W9
	077 Move V0, [X20+1240]
	078 Move [X19+120], S0
	079 Move V0, [X20+1564]
	080 Move [X19+116], S0
	081 Move W9, [X20+708]
	082 Move [X19+124], W9
	083 Move V0, [X20+764]
	084 Move [X19+128], S0
	085 Move V0, [X8]
	086 Move [X19+132], D0
	087 Move W8, [X20+632]
	088 Move [X19+68], W8
	089 Move V0, [X20+848]
	090 Move [X19+72], D0
	091 Move W8, [X20+1260]
	092 Move [X19+244], W8
	093 Move W8, [X20+344]
	094 Move [X19+248], W8
	095 Move W8, [X20+348]
	096 Move [X19+252], W8
	097 Move W8, [X20+730]
	098 Move [X19+885], W8
	099 Move W8, [X20+1072]
	100 Move [X19+884], W8
	101 NotImplemented "Instruction LDRH not yet implemented."
	102 Move X9, [X20+608]
	103 NotImplemented "Instruction STRH not yet implemented."
	104 Move [X10], X9
	105 Move V0, [X20+94]
	106 Move V1, [X20+93]
	107 Add X8, X20, 1416
	108 Move [X19+272], V1
	109 Move [X19+280], V0
	110 Move V0, [X20+80]
	111 Move V1, [X20+79]
	112 Move [X19+304], V1
	113 Move [X19+312], V0
	114 Move V0, [X20+82]
	115 Move V1, [X20+81]
	116 Move [X19+336], V1
	117 Move [X19+344], V0
	118 Move V0, [X20+84]
	119 Move V1, [X20+83]
	120 Move [X19+368], V1
	121 Move [X19+376], V0
	122 Move V0, [X20+87]
	123 Move V1, [X20+86]
	124 Move V2, [X20+85]
	125 Move [X19+448], V1
	126 Move [X19+456], V0
	127 Move [X19+27], V2
	128 Move X9, [X8+32]
	129 Move V1, [X8]
	130 Move V0, [X8+16]
	131 Add X8, X19, 520
	132 Move [X19+512], X9
	133 Move [X19+480], V1
	134 Move [X19+488], V0
	135 Move V1, [X20+496]
	136 Move V0, [X20+512]
	137 Add X9, X20, 536
	138 Move [X8], V1
	139 Move [X8+8], V0
	140 Move V0, [X20+66]
	141 Move V1, [X20+65]
	142 Add X8, X19, 552
	143 Move [X8], V1
	144 Move [X8+8], V0
	145 Move V1, [X9]
	146 Move V0, [X9+16]
	147 Add X8, X19, 584
	148 Add X9, X20, 1528
	149 Move [X8], V1
	150 Move [X8+8], V0
	151 Move V0, [X20+99]
	152 Move V1, [X20+98]
	153 Add X8, X19, 648
	154 Move [X8], V1
	155 Move [X8+8], V0
	156 Move V1, [X9]
	157 Move V0, [X9+16]
	158 Move X21, [X21+1000]
	159 Add X8, X19, 680
	160 Move [X8], V1
	161 Move [X8+8], V0
	162 Move X0, [X21]
	163 Move W8, [X0+224]
	164 Compare W8, 0
	165 JumpIfNotEqual {168}
	166 Call 0x1C17DFC
	167 Move X0, [X21]
	168 Move X8, [X0+184]
	169 Add X0, X19, 712
	170 Move W2, 88
	171 Add X1, X8, 16
	172 Call 0x3EB2B30
	173 Move V0, [X20+640]
	174 Move V1, [X20+656]
	175 Move [X19+800], V0
	176 Move [X19+808], V1
	177 Move W8, [X20+1704]
	178 Move [X19+832], W8
	179 Move X8, [X20+872]
	180 Compare X8, 0
	181 JumpIfEqual {202}
	182 Move X8, [X8+80]
	183 Compare X8, 0
	184 JumpIfEqual {202}
	185 NotImplemented "Instruction LDRSW not yet implemented."
	186 Move W10, [X8+24]
	187 NotImplemented "Instruction CMP not yet implemented."
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Move W10, 92
	190 NotImplemented "Instruction MADD not yet implemented."
	191 Add X1, X8, 32
	192 Add X0, X19, 152
	193 Move W2, 92
	194 Call 0x3EB2B30
	195 Move X20, [X31+32]
	196 Move X19, [X31+40]
	197 Move X22, [X31+16]
	198 Move X21, [X31+24]
	199 Move X30, [X31+48]
	200 Move X23, [X31+56]
	201 Return 
	202 Call 0x1C17F20
	203 Call 0x1C17F28

Method: System.Int32 RestoreWordWrappingState(ref TMPro.WordWrapState state)

Disassembly:
	0x03B06AD0 FDIV S13, S4, S5
	0x03B06AD4 FDIV S12, S6, S5
	0x03B06AD8 FDIV S11, S7, S5
	0x03B06ADC FDIV S10, S16, S5
	0x03B06AE0 FMUL S0, S0, S13
	0x03B06AE4 FMUL S1, S1, S12
	0x03B06AE8 FMUL S2, S2, S11
	0x03B06AEC FMUL S3, S3, S10
	0x03B06AF0 MOV X0, X31
	0x03B06AF4 BL 0x1E43664
	0x03B06AF8 MOVZ W8, 0x178
	0x03B06AFC MADD X8, X24, X8, X21
	0x03B06B00 STR W0, [X8 + 0x94]
	0x03B06B04 LDR X8, [X25]
	0x03B06B08 CBZ X8, 0x3B0742C
	0x03B06B0C LDR X21, [X8 + 0x38]
	0x03B06B10 CBZ X21, 0x3B0742C
	0x03B06B14 LDRSW X24, [X26]
	0x03B06B18 LDR W8, [X21 + 0x18]
	0x03B06B1C CMP W24, W8
	0x03B06B20 B.CS 0x3B07430
	0x03B06B24 LDR X8, [X19 + 0x1A8]
	0x03B06B28 CBZ X8, 0x3B0742C
	0x03B06B2C LDP S0, S1, [X8 + 0x1C]
	0x03B06B30 LDP S2, S3, [X8 + 0x24]
	0x03B06B34 MOV X0, X31
	0x03B06B38 FMUL S0, S13, S0
	0x03B06B3C FMUL S1, S12, S1
	0x03B06B40 FMUL S2, S11, S2
	0x03B06B44 FMUL S3, S10, S3
	0x03B06B48 BL 0x1E43664
	0x03B06B4C MOVZ W8, 0x178
	0x03B06B50 MADD X8, X24, X8, X21
	0x03B06B54 STR W0, [X8 + 0xBC]
	0x03B06B58 LDR X8, [X25]
	0x03B06B5C CBZ X8, 0x3B0742C
	0x03B06B60 LDR X21, [X8 + 0x38]
	0x03B06B64 CBZ X21, 0x3B0742C
	0x03B06B68 LDRSW X24, [X26]
	0x03B06B6C LDR W8, [X21 + 0x18]
	0x03B06B70 CMP W24, W8
	0x03B06B74 B.CS 0x3B07430
	0x03B06B78 LDR X8, [X19 + 0x1A8]
	0x03B06B7C CBZ X8, 0x3B0742C
	0x03B06B80 LDP S0, S1, [X8 + 0x2C]
	0x03B06B84 LDP S2, S3, [X8 + 0x34]
	0x03B06B88 MOV X0, X31
	0x03B06B8C FMUL S0, S13, S0
	0x03B06B90 FMUL S1, S12, S1
	0x03B06B94 FMUL S2, S11, S2
	0x03B06B98 FMUL S3, S10, S3
	0x03B06B9C BL 0x1E43664
	0x03B06BA0 MOVZ W8, 0x178
	0x03B06BA4 MADD X8, X24, X8, X21
	0x03B06BA8 STR W0, [X8 + 0xE4]
	0x03B06BAC LDR X8, [X25]
	0x03B06BB0 CBZ X8, 0x3B0742C
	0x03B06BB4 LDR X21, [X8 + 0x38]
	0x03B06BB8 CBZ X21, 0x3B0742C
	0x03B06BBC LDRSW X24, [X26]
	0x03B06BC0 LDR W8, [X21 + 0x18]
	0x03B06BC4 CMP W24, W8
	0x03B06BC8 B.CS 0x3B07430
	0x03B06BCC LDR X8, [X19 + 0x1A8]
	0x03B06BD0 CBZ X8, 0x3B0742C
	0x03B06BD4 LDP S0, S1, [X8 + 0x4C]
	0x03B06BD8 LDP S2, S3, [X8 + 0x54]
	0x03B06BDC B 0x3B06DFC
	0x03B06BE0 LDR X8, [X25]
	0x03B06BE4 CBZ X8, 0x3B0742C
	0x03B06BE8 LDR X9, [X8 + 0x38]
	0x03B06BEC CBZ X9, 0x3B0742C
	0x03B06BF0 LDRSW X10, [X26]
	0x03B06BF4 LDR W8, [X9 + 0x18]
	0x03B06BF8 CMP W10, W8
	0x03B06BFC B.CS 0x3B07430
	0x03B06C00 MOVZ W11, 0x178
	0x03B06C04 UBFM W8, W20, 0x10, 0x1F
	0x03B06C08 MADD X9, X10, X11, X9
	0x03B06C0C STRB W8, [X9 + 0x96]
	0x03B06C10 STRH W20, [X9 + 0x94]
	0x03B06C14 STRB W22, [X9 + 0x97]
	0x03B06C18 LDR X9, [X25]
	0x03B06C1C CBZ X9, 0x3B0742C
	0x03B06C20 LDR X9, [X9 + 0x38]
	0x03B06C24 CBZ X9, 0x3B0742C
	0x03B06C28 LDRSW X10, [X26]
	0x03B06C2C LDR W11, [X9 + 0x18]
	0x03B06C30 CMP W10, W11
	0x03B06C34 B.CS 0x3B07430
	0x03B06C38 MOVZ W11, 0x178
	0x03B06C3C MADD X9, X10, X11, X9
	0x03B06C40 STRB W8, [X9 + 0xBE]
	0x03B06C44 STRH W20, [X9 + 0xBC]
	0x03B06C48 STRB W22, [X9 + 0xBF]
	0x03B06C4C LDR X9, [X25]
	0x03B06C50 CBZ X9, 0x3B0742C
	0x03B06C54 LDR X9, [X9 + 0x38]
	0x03B06C58 CBZ X9, 0x3B0742C
	0x03B06C5C LDRSW X10, [X26]
	0x03B06C60 LDR W11, [X9 + 0x18]
	0x03B06C64 CMP W10, W11
	0x03B06C68 B.CS 0x3B07430
	0x03B06C6C MOVZ W11, 0x178
	0x03B06C70 MADD X9, X10, X11, X9
	0x03B06C74 STRB W8, [X9 + 0xE6]
	0x03B06C78 STRH W20, [X9 + 0xE4]
	0x03B06C7C STRB W22, [X9 + 0xE7]
	0x03B06C80 LDR X9, [X25]
	0x03B06C84 CBZ X9, 0x3B0742C
	0x03B06C88 LDR X9, [X9 + 0x38]
	0x03B06C8C CBZ X9, 0x3B0742C
	0x03B06C90 LDRSW X10, [X26]
	0x03B06C94 LDR W11, [X9 + 0x18]
	0x03B06C98 CMP W10, W11
	0x03B06C9C B.CS 0x3B07430
	0x03B06CA0 MOVZ W11, 0x178
	0x03B06CA4 MADD X9, X10, X11, X9
	0x03B06CA8 STRB W8, [X9 + 0x10E]
	0x03B06CAC STRH W20, [X9 + 0x10C]
	0x03B06CB0 STRB W22, [X9 + 0x10F]
	0x03B06CB4 B 0x3B06E20
	0x03B06CB8 LDR V0, [X19 + 0x188]
	0x03B06CBC LDR V1, [X19 + 0x18C]
	0x03B06CC0 LDR V2, [X19 + 0x190]
	0x03B06CC4 LDR V3, [X19 + 0x194]
	0x03B06CC8 AND W8, W20, 0xFF
	0x03B06CCC MOVZ W10, 0x437F0000
	0x03B06CD0 UBFM W9, W20, 0x8, 0xF
	0x03B06CD4 UCVTF S4, W8
	0x03B06CD8 UBFM W8, W20, 0x10, 0x17
	0x03B06CDC FMOV S5, W10
	0x03B06CE0 AND W10, W22, 0xFF
	0x03B06CE4 UCVTF S6, W9
	0x03B06CE8 UCVTF S7, W8
	0x03B06CEC UCVTF S16, W10
	0x03B06CF0 FDIV S13, S4, S5
	0x03B06CF4 FDIV S12, S6, S5
	0x03B06CF8 FDIV S11, S7, S5
	0x03B06CFC FDIV S10, S16, S5
	0x03B06D00 FMUL S0, S0, S13
	0x03B06D04 FMUL S1, S1, S12
	0x03B06D08 FMUL S2, S2, S11
	0x03B06D0C FMUL S3, S3, S10
	0x03B06D10 MOV X0, X31
	0x03B06D14 BL 0x1E43664
	0x03B06D18 MOVZ W8, 0x178
	0x03B06D1C MADD X8, X24, X8, X21
	0x03B06D20 STR W0, [X8 + 0x94]
	0x03B06D24 LDR X8, [X19 + 0x368]
	0x03B06D28 CBZ X8, 0x3B0742C
	0x03B06D2C LDR X21, [X8 + 0x38]
	0x03B06D30 CBZ X21, 0x3B0742C
	0x03B06D34 LDRSW X24, [X26]
	0x03B06D38 LDR W8, [X21 + 0x18]
	0x03B06D3C CMP W24, W8
	0x03B06D40 B.CS 0x3B07430
	0x03B06D44 LDR V0, [X19 + 0x168]
	0x03B06D48 LDR V1, [X19 + 0x16C]
	0x03B06D4C LDR V2, [X19 + 0x170]
	0x03B06D50 LDR V3, [X19 + 0x174]
	0x03B06D54 FMUL S0, S13, S0
	0x03B06D58 FMUL S1, S12, S1
	0x03B06D5C FMUL S2, S11, S2
	0x03B06D60 FMUL S3, S10, S3
	0x03B06D64 MOV X0, X31
	0x03B06D68 BL 0x1E43664
	0x03B06D6C MOVZ W8, 0x178
	0x03B06D70 MADD X8, X24, X8, X21
	0x03B06D74 STR W0, [X8 + 0xBC]
	0x03B06D78 LDR X8, [X19 + 0x368]
	0x03B06D7C CBZ X8, 0x3B0742C
	0x03B06D80 LDR X21, [X8 + 0x38]
	0x03B06D84 CBZ X21, 0x3B0742C
	0x03B06D88 LDRSW X24, [X26]
	0x03B06D8C LDR W8, [X21 + 0x18]
	0x03B06D90 CMP W24, W8
	0x03B06D94 B.CS 0x3B07430
	0x03B06D98 LDR V0, [X19 + 0x178]
	0x03B06D9C LDR V1, [X19 + 0x17C]
	0x03B06DA0 LDR V2, [X19 + 0x180]
	0x03B06DA4 LDR V3, [X19 + 0x184]
	0x03B06DA8 FMUL S0, S13, S0
	0x03B06DAC FMUL S1, S12, S1
	0x03B06DB0 FMUL S2, S11, S2

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+192], X30
	003 Move [X31+200], X23
	004 Move [X31+208], X22
	005 Move [X31+216], X21
	006 Move [X31+224], X20
	007 Move [X31+232], X19
	008 Move X19, 0x8DD000
	009 Move W8, [X19+1626]
	010 Move X20, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x653000
	017 Move X0, [X0+1000]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+1626], W8
	021 Move X8, [X20+840]
	022 Move W19, [X20]
	023 Move [X21+256], X8
	024 Move X8, [X20+848]
	025 Move [X21+1688], X8
	026 Move X8, [X20+856]
	027 Move [X21+280], X8
	028 Move W8, [X20+864]
	029 Move [X21+288], W8
	030 Move W8, [X20+4]
	031 Add W8, W8, 1
	032 Move [X21+1172], W8
	033 Move W9, [X20+8]
	034 Move X8, [X21+872]
	035 Move [X21+1196], W9
	036 Compare X8, 0
	037 JumpIfEqual {212}
	038 Move W9, [X20+16]
	039 Add X10, X20, 520
	040 Move X22, 0x653000
	041 Add X1, X20, 712
	042 Move [X8+40], W9
	043 NotImplemented "Instruction LDUR not yet implemented."
	044 Add X0, X31, 104
	045 Move W2, 88
	046 Move [X21+1176], D0
	047 Move W8, [X20+32]
	048 Move [X21+1188], W8
	049 Move W8, [X20+100]
	050 Move [X21+604], W8
	051 Move W8, [X20+104]
	052 Move [X21+1520], W8
	053 Move V0, [X20+108]
	054 Add X8, X21, 684
	055 Add X9, X8, 536
	056 Move [X21+1028], S0
	057 Move V0, [X20+112]
	058 Move [X21+488], S0
	059 Move V0, [X20+80]
	060 Move [X21+1600], S0
	061 Move V0, [X20+40]
	062 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	063 Move [X21+1208], D0
	064 Move V0, [X20+3]
	065 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	066 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	067 Move [X9], V0
	068 Move V0, [X20+64]
	069 Add X9, X20, 868
	070 Move [X21+1204], S0
	071 Move V0, [X20+84]
	072 Move [X21+992], S0
	073 Move V0, [X20+88]
	074 Move [X21+1004], S0
	075 Move V0, [X9]
	076 Add X9, X21, 1244
	077 Move [X9], V0
	078 Move W9, [X20+36]
	079 Move [X21+1192], W9
	080 Move V0, [X20+120]
	081 Move [X21+1240], S0
	082 Move V0, [X20+116]
	083 Move [X21+1564], S0
	084 Move W9, [X20+124]
	085 Move [X21+708], W9
	086 Move V0, [X20+128]
	087 Add X9, X20, 260
	088 Move [X21+764], S0
	089 NotImplemented "Instruction LDUR not yet implemented."
	090 Move [X8], D0
	091 Move W8, [X20+68]
	092 Move [X21+632], W8
	093 Move V0, [X20+72]
	094 Move [X21+848], D0
	095 Move W8, [X20+244]
	096 Move [X21+1260], W8
	097 Move W8, [X20+248]
	098 Move [X21+344], W8
	099 Move W8, [X20+252]
	100 Move [X21+348], W8
	101 Move W8, [X20+885]
	102 Move [X21+730], W8
	103 Move W8, [X20+884]
	104 Move [X21+1072], W8
	105 NotImplemented "Instruction LDRH not yet implemented."
	106 Move X9, [X9]
	107 NotImplemented "Instruction STRH not yet implemented."
	108 Move [X21+608], X9
	109 Move V1, [X20+272]
	110 Move V0, [X20+288]
	111 Add X9, X21, 1416
	112 Move [X21+94], V0
	113 Move [X21+93], V1
	114 Move V1, [X20+304]
	115 Move V0, [X20+320]
	116 Move [X21+80], V0
	117 Move [X21+79], V1
	118 Move V1, [X20+336]
	119 Move V0, [X20+352]
	120 Move [X21+82], V0
	121 Move [X21+81], V1
	122 Move V1, [X20+368]
	123 Move V0, [X20+384]
	124 Move [X21+84], V0
	125 Move [X21+83], V1
	126 Move V1, [X20+448]
	127 Move V0, [X20+464]
	128 Move V2, [X20+27]
	129 Move [X21+87], V0
	130 Move [X21+86], V1
	131 Move [X21+85], V2
	132 Move X8, [X20+512]
	133 Move V0, [X20+480]
	134 Move V1, [X20+496]
	135 Move [X9+32], X8
	136 Move [X9], V0
	137 Move [X9+8], V1
	138 Move V1, [X10]
	139 Move V0, [X10+16]
	140 Add X8, X20, 552
	141 Add X9, X20, 648
	142 Move [X21+496], V1
	143 Move [X21+504], V0
	144 Move V1, [X8]
	145 Move V0, [X8+16]
	146 Add X8, X20, 584
	147 Move [X21+66], V0
	148 Move [X21+65], V1
	149 Move V1, [X8]
	150 Move V0, [X8+16]
	151 Add X8, X21, 536
	152 Move [X8], V1
	153 Move [X8+8], V0
	154 Move V1, [X9]
	155 Move V0, [X9+16]
	156 Add X8, X20, 680
	157 Move [X21+99], V0
	158 Move [X21+98], V1
	159 Move V1, [X8]
	160 Move V0, [X8+16]
	161 Move X22, [X22+1000]
	162 Add X8, X21, 1528
	163 Move [X8], V1
	164 Move [X8+8], V0
	165 Call 0x3EB2AC0
	166 Move X0, [X22]
	167 Move W8, [X0+224]
	168 Compare W8, 0
	169 JumpIfNotEqual {172}
	170 Call 0x1C17DFC
	171 Move X0, [X22]
	172 Move X8, [X0+184]
	173 Add X1, X31, 104
	174 Move W2, 88
	175 Add X0, X8, 16
	176 Call 0x3EB2AC0
	177 Move V0, [X20+800]
	178 Move V1, [X20+816]
	179 Move X8, [X21+872]
	180 Move [X21+640], V0
	181 Move [X21+648], V1
	182 Move W9, [X20+832]
	183 Move [X21+1704], W9
	184 Compare X8, 0
	185 JumpIfEqual {212}
	186 Move X22, [X8+80]
	187 Compare X22, 0
	188 JumpIfEqual {212}
	189 NotImplemented "Instruction LDRSW not yet implemented."
	190 Move W23, [X22+24]
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Add X1, X20, 152
	193 Add X0, X31, 8
	194 Move W2, 92
	195 Call 0x3EB2AC0
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Move W8, 92
	198 NotImplemented "Instruction MADD not yet implemented."
	199 Add X0, X8, 32
	200 Add X1, X31, 8
	201 Move W2, 92
	202 Call 0x3EB2AC0
	203 Move W0, W19
	204 Move X20, [X31+224]
	205 Move X19, [X31+232]
	206 Move X22, [X31+208]
	207 Move X21, [X31+216]
	208 Move X30, [X31+192]
	209 Move X23, [X31+200]
	210 Add X31, X31, 240
	211 Return X0
	212 Call 0x1C17F20
	213 Call 0x1C17F28

Method: System.Void SaveGlyphVertexInfo(System.Single padding, System.Single style_padding, UnityEngine.Color32 vertexColor)

Disassembly:
	0x03B078BC LDRSW X9, [X19 + 0x494]
	0x03B078C0 LDR W10, [X8 + 0x18]
	0x03B078C4 CMP W9, W10
	0x03B078C8 B.CS 0x3B07B90
	0x03B078CC MOVZ W10, 0x178
	0x03B078D0 MADD X8, X9, X10, X8
	0x03B078D4 STR W21, [X8 + 0x94]
	0x03B078D8 LDR X8, [X19 + 0x368]
	0x03B078DC CBZ X8, 0x3B07B8C
	0x03B078E0 LDR X8, [X8 + 0x38]
	0x03B078E4 CBZ X8, 0x3B07B8C
	0x03B078E8 LDRSW X9, [X19 + 0x494]
	0x03B078EC LDR W10, [X8 + 0x18]
	0x03B078F0 CMP W9, W10
	0x03B078F4 B.CS 0x3B07B90
	0x03B078F8 MOVZ W10, 0x178
	0x03B078FC MADD X8, X9, X10, X8
	0x03B07900 STR W22, [X8 + 0xBC]
	0x03B07904 LDR X8, [X19 + 0x368]
	0x03B07908 CBZ X8, 0x3B07B8C
	0x03B0790C LDR X8, [X8 + 0x38]
	0x03B07910 CBZ X8, 0x3B07B8C
	0x03B07914 LDRSW X9, [X19 + 0x494]
	0x03B07918 LDR W10, [X8 + 0x18]
	0x03B0791C CMP W9, W10
	0x03B07920 B.CS 0x3B07B90
	0x03B07924 MOVZ W10, 0x178
	0x03B07928 MADD X8, X9, X10, X8
	0x03B0792C STR W23, [X8 + 0xE4]
	0x03B07930 LDR X8, [X19 + 0x368]
	0x03B07934 CBZ X8, 0x3B07B8C
	0x03B07938 LDR X8, [X8 + 0x38]
	0x03B0793C CBZ X8, 0x3B07B8C
	0x03B07940 LDRSW X9, [X19 + 0x494]
	0x03B07944 LDR W10, [X8 + 0x18]
	0x03B07948 CMP W9, W10
	0x03B0794C B.CS 0x3B07B90
	0x03B07950 MOVZ W10, 0x178
	0x03B07954 MADD X8, X9, X10, X8
	0x03B07958 STR W20, [X8 + 0x10C]
	0x03B0795C LDR X8, [X19 + 0x648]
	0x03B07960 CBZ X8, 0x3B07B8C
	0x03B07964 LDR X0, [X8 + 0x20]
	0x03B07968 CBZ X0, 0x3B07B8C
	0x03B0796C ADRP X20, 0x614000
	0x03B07970 LDR X20, [X20 + 0x608]
	0x03B07974 MOV X1, X31
	0x03B07978 BL 0x3C9C4CC
	0x03B0797C MOV X8, X0
	0x03B07980 LDR X0, [X20]
	0x03B07984 STP X8, X1, [X31]
	0x03B07988 LDR W8, [X0 + 0xE0]
	0x03B0798C CBNZ W8, 0x3B07994
	0x03B07990 BL 0x1C16DFC
	0x03B07994 ADD X0, X31, 0x0
	0x03B07998 MOV X1, X31
	0x03B0799C BL 0x3C9C090
	0x03B079A0 LDR X8, [X19 + 0x698]
	0x03B079A4 CBZ X8, 0x3B07B8C
	0x03B079A8 MOV W20, W0
	0x03B079AC LDR X0, [X8 + 0xA8]
	0x03B079B0 CBZ X0, 0x3B07B8C
	0x03B079B4 LDR X8, [X0]
	0x03B079B8 LDP X9, X1, [X8 + 0x188]
	0x03B079BC BLR X9
	0x03B079C0 MOV W21, W0
	0x03B079C4 ADD X0, X31, 0x0
	0x03B079C8 MOV X1, X31
	0x03B079CC BL 0x3C9C098
	0x03B079D0 LDR X8, [X19 + 0x698]
	0x03B079D4 CBZ X8, 0x3B07B8C
	0x03B079D8 MOV W23, W0
	0x03B079DC LDR X0, [X8 + 0xA8]
	0x03B079E0 CBZ X0, 0x3B07B8C
	0x03B079E4 LDR X8, [X0]
	0x03B079E8 LDP X9, X1, [X8 + 0x1A8]
	0x03B079EC BLR X9
	0x03B079F0 MOV W27, W0
	0x03B079F4 ADD X0, X31, 0x0
	0x03B079F8 MOV X1, X31
	0x03B079FC BL 0x3C9C098
	0x03B07A00 MOV W22, W0
	0x03B07A04 ADD X0, X31, 0x0
	0x03B07A08 MOV X1, X31
	0x03B07A0C BL 0x3C9C0A8
	0x03B07A10 LDR X8, [X19 + 0x698]
	0x03B07A14 CBZ X8, 0x3B07B8C
	0x03B07A18 MOV W25, W0
	0x03B07A1C LDR X0, [X8 + 0xA8]
	0x03B07A20 CBZ X0, 0x3B07B8C
	0x03B07A24 LDR X8, [X0]
	0x03B07A28 LDP X9, X1, [X8 + 0x1A8]
	0x03B07A2C BLR X9
	0x03B07A30 MOV W28, W0
	0x03B07A34 ADD X0, X31, 0x0
	0x03B07A38 MOV X1, X31
	0x03B07A3C BL 0x3C9C090
	0x03B07A40 MOV W24, W0
	0x03B07A44 ADD X0, X31, 0x0
	0x03B07A48 MOV X1, X31
	0x03B07A4C BL 0x3C9C0A0
	0x03B07A50 LDR X8, [X19 + 0x698]
	0x03B07A54 CBZ X8, 0x3B07B8C
	0x03B07A58 MOV W26, W0
	0x03B07A5C LDR X0, [X8 + 0xA8]
	0x03B07A60 CBZ X0, 0x3B07B8C
	0x03B07A64 LDR X8, [X0]
	0x03B07A68 LDP X9, X1, [X8 + 0x188]
	0x03B07A6C BLR X9
	0x03B07A70 LDR X8, [X19 + 0x368]
	0x03B07A74 CBZ X8, 0x3B07B8C
	0x03B07A78 LDR X8, [X8 + 0x38]
	0x03B07A7C CBZ X8, 0x3B07B8C
	0x03B07A80 LDRSW X9, [X19 + 0x494]
	0x03B07A84 LDR W10, [X8 + 0x18]
	0x03B07A88 CMP W9, W10
	0x03B07A8C B.CS 0x3B07B90
	0x03B07A90 SCVTF S0, W20
	0x03B07A94 SCVTF S1, W21
	0x03B07A98 SCVTF S2, W23
	0x03B07A9C SCVTF S3, W27
	0x03B07AA0 MOVZ W10, 0x178
	0x03B07AA4 FDIV S1, S0, S1
	0x03B07AA8 FDIV S0, S2, S3
	0x03B07AAC MADD X8, X9, X10, X8
	0x03B07AB0 STP S1, S0, [X8 + 0x7C]
	0x03B07AB4 LDR X8, [X19 + 0x368]
	0x03B07AB8 CBZ X8, 0x3B07B8C
	0x03B07ABC LDR X8, [X8 + 0x38]
	0x03B07AC0 CBZ X8, 0x3B07B8C
	0x03B07AC4 LDRSW X9, [X19 + 0x494]
	0x03B07AC8 LDR W10, [X8 + 0x18]
	0x03B07ACC CMP W9, W10
	0x03B07AD0 B.CS 0x3B07B90
	0x03B07AD4 ADD W10, W25, W22
	0x03B07AD8 SCVTF S2, W28
	0x03B07ADC MOVZ W11, 0x178
	0x03B07AE0 SCVTF S3, W10
	0x03B07AE4 MADD X8, X9, X11, X8
	0x03B07AE8 FDIV S2, S3, S2
	0x03B07AEC STP S1, S2, [X8 + 0xA4]
	0x03B07AF0 LDR X8, [X19 + 0x368]
	0x03B07AF4 CBZ X8, 0x3B07B8C
	0x03B07AF8 LDR X8, [X8 + 0x38]
	0x03B07AFC CBZ X8, 0x3B07B8C
	0x03B07B00 LDRSW X9, [X19 + 0x494]
	0x03B07B04 LDR W10, [X8 + 0x18]
	0x03B07B08 CMP W9, W10
	0x03B07B0C B.CS 0x3B07B90
	0x03B07B10 ADD W10, W26, W24
	0x03B07B14 SCVTF S1, W0
	0x03B07B18 MOVZ W11, 0x178
	0x03B07B1C SCVTF S3, W10
	0x03B07B20 MADD X8, X9, X11, X8
	0x03B07B24 FDIV S1, S3, S1
	0x03B07B28 STP S1, S2, [X8 + 0xCC]
	0x03B07B2C LDR X8, [X19 + 0x368]
	0x03B07B30 CBZ X8, 0x3B07B8C
	0x03B07B34 LDR X8, [X8 + 0x38]
	0x03B07B38 CBZ X8, 0x3B07B8C
	0x03B07B3C LDRSW X9, [X19 + 0x494]
	0x03B07B40 LDR W10, [X8 + 0x18]
	0x03B07B44 CMP W9, W10
	0x03B07B48 B.CS 0x3B07B90
	0x03B07B4C LDP X20, X19, [X31 + 0x60]
	0x03B07B50 LDP X22, X21, [X31 + 0x50]
	0x03B07B54 LDP X24, X23, [X31 + 0x40]
	0x03B07B58 LDP X26, X25, [X31 + 0x30]
	0x03B07B5C LDP X28, X27, [X31 + 0x20]
	0x03B07B60 LDR X30, [X31 + 0x10]
	0x03B07B64 MOVZ W10, 0x178
	0x03B07B68 MADD X8, X9, X10, X8
	0x03B07B6C STP S1, S0, [X8 + 0xF4]
	0x03B07B70 ADD X31, X31, 0x70
	0x03B07B74 RET
	0x03B07B78 MOV W23, W20
	0x03B07B7C MOV W22, W20
	0x03B07B80 B 0x3B077A4
	0x03B07B84 MOV W23, W20
	0x03B07B88 B 0x3B077A4
	0x03B07B8C BL 0x1C16F20
	0x03B07B90 BL 0x1C16F28
	0x03B07B94 STR X30, [X31 - 0x50]!
	0x03B07B98 STP X26, X25, [X31 + 0x10]
	0x03B07B9C STP X24, X23, [X31 + 0x20]
	0x03B07BA0 STP X22, X21, [X31 + 0x30]
	0x03B07BA4 STP X20, X19, [X31 + 0x40]
	0x03B07BA8 ADRP X21, 0x8DB000
	0x03B07BAC LDRB W8, [X21 + 0x65D]
	0x03B07BB0 MOV W20, W1
	0x03B07BB4 MOV X19, X0
	0x03B07BB8 TBNZ X8, 0x0, 0x3B07BD0
	0x03B07BBC ADRP X0, 0x651000
	0x03B07BC0 LDR X0, [X0 + 0x348]
	0x03B07BC4 BL 0x1C16CF4
	0x03B07BC8 MOVZ W8, 0x1
	0x03B07BCC STRB W8, [X21 + 0x65D]
	0x03B07BD0 LDR X9, [X19 + 0x368]
	0x03B07BD4 CBZ X9, 0x3B082AC
	0x03B07BD8 LDR X8, [X9 + 0x38]
	0x03B07BDC CBZ X8, 0x3B082AC
	0x03B07BE0 LDR W10, [X8 + 0x18]
	0x03B07BE4 CMP W10, W20
	0x03B07BE8 B.LS 0x3B082B0
	0x03B07BEC LDR X25, [X9 + 0x60]
	0x03B07BF0 CBZ X25, 0x3B082AC
	0x03B07BF4 SXTW X23, W20
	0x03B07BF8 MOVZ W10, 0x178
	0x03B07BFC MADD X8, X23, X10, X8
	0x03B07C00 LDRSW X22, [X8 + 0x58]
	0x03B07C04 LDR W8, [X25 + 0x18]
	0x03B07C08 CMP W22, W8
	0x03B07C0C B.CS 0x3B082B0
	0x03B07C10 MOVZ W8, 0x50
	0x03B07C14 MADD X26, X22, X8, X25
	0x03B07C18 LDR X8, [X26 + 0x30]
	0x03B07C1C CBZ X8, 0x3B082AC
	0x03B07C20 LDR W24, [X26 + 0x28]
	0x03B07C24 LDR W8, [X8 + 0x18]
	0x03B07C28 CMP W24, W8
	0x03B07C2C B.LT 0x3B07C90
	0x03B07C30 ADD W8, W24, 0x4
	0x03B07C34 ADD W9, W24, 0x7
	0x03B07C38 CMP W8, 0x0
	0x03B07C3C CSEL W8, W9, W8, LT
	0x03B07C40 SBFM W0, W8, 0x2, 0x1F
	0x03B07C44 MOV X1, X31
	0x03B07C48 BL 0x3C2B340
	0x03B07C4C ADRP X8, 0x651000
	0x03B07C50 LDR X8, [X8 + 0x348]
	0x03B07C54 MOV W21, W0
	0x03B07C58 LDR X8, [X8]
	0x03B07C5C LDR W9, [X8 + 0xE0]
	0x03B07C60 CBNZ W9, 0x3B07C6C
	0x03B07C64 MOV X0, X8
	0x03B07C68 BL 0x1C16DFC
	0x03B07C6C LDR W8, [X25 + 0x18]
	0x03B07C70 CMP W22, W8
	0x03B07C74 B.CS 0x3B082B0
	0x03B07C78 ADD X0, X26, 0x20
	0x03B07C7C MOV W1, W21
	0x03B07C80 MOV X2, X31
	0x03B07C84 BL 0x3B11BD0
	0x03B07C88 LDR X9, [X19 + 0x368]
	0x03B07C8C CBZ X9, 0x3B082AC
	0x03B07C90 LDR X8, [X9 + 0x38]
	0x03B07C94 CBZ X8, 0x3B082AC
	0x03B07C98 LDR W10, [X8 + 0x18]
	0x03B07C9C CMP W10, W20
	0x03B07CA0 B.LS 0x3B082B0
	0x03B07CA4 MOVZ W10, 0x178
	0x03B07CA8 MADD X10, X23, X10, X8
	0x03B07CAC STR W24, [X10 + 0x6C]
	0x03B07CB0 LDR X9, [X9 + 0x60]
	0x03B07CB4 CBZ X9, 0x3B082AC
	0x03B07CB8 LDR W10, [X9 + 0x18]
	0x03B07CBC CMP W22, W10
	0x03B07CC0 B.CS 0x3B082B0
	0x03B07CC4 MOVZ W10, 0x50
	0x03B07CC8 MADD X9, X22, X10, X9
	0x03B07CCC LDR X10, [X9 + 0x30]
	0x03B07CD0 CBZ X10, 0x3B082AC
	0x03B07CD4 LDR W9, [X10 + 0x18]
	0x03B07CD8 CMP W24, W9
	0x03B07CDC B.CS 0x3B082B0
	0x03B07CE0 MOVZ W11, 0x178
	0x03B07CE4 MADD X11, X23, X11, X8
	0x03B07CE8 LDR V0, [X11 + 0x70]
	0x03B07CEC LDR V1, [X11 + 0x78]
	0x03B07CF0 SXTW X9, W24
	0x03B07CF4 MOVZ W11, 0xC
	0x03B07CF8 MADD X10, X9, X11, X10
	0x03B07CFC STR D0, [X10 + 0x20]
	0x03B07D00 STR S1, [X10 + 0x28]
	0x03B07D04 LDR X10, [X19 + 0x368]
	0x03B07D08 CBZ X10, 0x3B082AC
	0x03B07D0C LDR X10, [X10 + 0x60]
	0x03B07D10 CBZ X10, 0x3B082AC
	0x03B07D14 LDR W11, [X10 + 0x18]
	0x03B07D18 CMP W22, W11
	0x03B07D1C B.CS 0x3B082B0
	0x03B07D20 LDR W11, [X8 + 0x18]
	0x03B07D24 CMP W11, W20
	0x03B07D28 B.LS 0x3B082B0
	0x03B07D2C MOVZ W11, 0x50
	0x03B07D30 MADD X10, X22, X11, X10
	0x03B07D34 LDR X11, [X10 + 0x30]
	0x03B07D38 CBZ X11, 0x3B082AC
	0x03B07D3C LDR W12, [X11 + 0x18]
	0x03B07D40 ADD W10, W24, 0x1
	0x03B07D44 CMP W10, W12
	0x03B07D48 B.CS 0x3B082B0
	0x03B07D4C MOVZ W12, 0x178
	0x03B07D50 MADD X12, X23, X12, X8
	0x03B07D54 LDR V0, [X12 + 0x98]
	0x03B07D58 LDR V1, [X12 + 0xA0]
	0x03B07D5C SXTW X10, W10
	0x03B07D60 MOVZ W12, 0xC
	0x03B07D64 MADD X11, X10, X12, X11
	0x03B07D68 STR D0, [X11 + 0x20]
	0x03B07D6C STR S1, [X11 + 0x28]
	0x03B07D70 LDR X11, [X19 + 0x368]
	0x03B07D74 CBZ X11, 0x3B082AC
	0x03B07D78 LDR X11, [X11 + 0x60]
	0x03B07D7C CBZ X11, 0x3B082AC
	0x03B07D80 LDR W12, [X11 + 0x18]
	0x03B07D84 CMP W22, W12
	0x03B07D88 B.CS 0x3B082B0
	0x03B07D8C LDR W12, [X8 + 0x18]
	0x03B07D90 CMP W12, W20
	0x03B07D94 B.LS 0x3B082B0
	0x03B07D98 MOVZ W12, 0x50
	0x03B07D9C MADD X11, X22, X12, X11
	0x03B07DA0 LDR X12, [X11 + 0x30]
	0x03B07DA4 CBZ X12, 0x3B082AC
	0x03B07DA8 LDR W13, [X12 + 0x18]
	0x03B07DAC ADD W11, W24, 0x2
	0x03B07DB0 CMP W11, W13
	0x03B07DB4 B.CS 0x3B082B0
	0x03B07DB8 MOVZ W13, 0x178
	0x03B07DBC MADD X13, X23, X13, X8
	0x03B07DC0 LDR V0, [X13 + 0xC0]
	0x03B07DC4 LDR V1, [X13 + 0xC8]
	0x03B07DC8 SXTW X11, W11
	0x03B07DCC MOVZ W13, 0xC
	0x03B07DD0 MADD X12, X11, X13, X12
	0x03B07DD4 STR D0, [X12 + 0x20]
	0x03B07DD8 STR S1, [X12 + 0x28]
	0x03B07DDC LDR X12, [X19 + 0x368]
	0x03B07DE0 CBZ X12, 0x3B082AC
	0x03B07DE4 LDR X12, [X12 + 0x60]
	0x03B07DE8 CBZ X12, 0x3B082AC
	0x03B07DEC LDR W13, [X12 + 0x18]
	0x03B07DF0 CMP W22, W13
	0x03B07DF4 B.CS 0x3B082B0
	0x03B07DF8 LDR W13, [X8 + 0x18]
	0x03B07DFC CMP W13, W20
	0x03B07E00 B.LS 0x3B082B0
	0x03B07E04 MOVZ W13, 0x50
	0x03B07E08 MADD X12, X22, X13, X12
	0x03B07E0C LDR X13, [X12 + 0x30]
	0x03B07E10 CBZ X13, 0x3B082AC
	0x03B07E14 LDR W14, [X13 + 0x18]
	0x03B07E18 ADD W12, W24, 0x3
	0x03B07E1C CMP W12, W14
	0x03B07E20 B.CS 0x3B082B0
	0x03B07E24 MOVZ W14, 0x178
	0x03B07E28 MADD X14, X23, X14, X8
	0x03B07E2C LDR V0, [X14 + 0xE8]
	0x03B07E30 LDR V1, [X14 + 0xF0]
	0x03B07E34 SXTW X12, W12
	0x03B07E38 MOVZ W14, 0xC
	0x03B07E3C MADD X13, X12, X14, X13
	0x03B07E40 STR D0, [X13 + 0x20]
	0x03B07E44 STR S1, [X13 + 0x28]
	0x03B07E48 LDR X13, [X19 + 0x368]
	0x03B07E4C CBZ X13, 0x3B082AC
	0x03B07E50 LDR X13, [X13 + 0x60]
	0x03B07E54 CBZ X13, 0x3B082AC
	0x03B07E58 LDR W14, [X13 + 0x18]
	0x03B07E5C CMP W22, W14
	0x03B07E60 B.CS 0x3B082B0
	0x03B07E64 LDR W14, [X8 + 0x18]
	0x03B07E68 CMP W14, W20
	0x03B07E6C B.LS 0x3B082B0
	0x03B07E70 MOVZ W14, 0x50
	0x03B07E74 MADD X13, X22, X14, X13
	0x03B07E78 LDR X13, [X13 + 0x48]
	0x03B07E7C CBZ X13, 0x3B082AC
	0x03B07E80 LDR W14, [X13 + 0x18]
	0x03B07E84 CMP W24, W14
	0x03B07E88 B.CS 0x3B082B0
	0x03B07E8C MOVZ W14, 0x178
	0x03B07E90 MADD X14, X23, X14, X8
	0x03B07E94 LDUR V0, [X14 + 0x7C]
	0x03B07E98 ADD X13, X13, X9, 0x3, LSL
	0x03B07E9C STR D0, [X13 + 0x20]
	0x03B07EA0 LDR X13, [X19 + 0x368]
	0x03B07EA4 CBZ X13, 0x3B082AC
	0x03B07EA8 LDR X13, [X13 + 0x60]
	0x03B07EAC CBZ X13, 0x3B082AC
	0x03B07EB0 LDR W14, [X13 + 0x18]
	0x03B07EB4 CMP W22, W14
	0x03B07EB8 B.CS 0x3B082B0
	0x03B07EBC LDR W14, [X8 + 0x18]
	0x03B07EC0 CMP W14, W20
	0x03B07EC4 B.LS 0x3B082B0
	0x03B07EC8 MOVZ W14, 0x50
	0x03B07ECC MADD X13, X22, X14, X13
	0x03B07ED0 LDR X13, [X13 + 0x48]
	0x03B07ED4 CBZ X13, 0x3B082AC
	0x03B07ED8 LDR W14, [X13 + 0x18]
	0x03B07EDC CMP W10, W14
	0x03B07EE0 B.CS 0x3B082B0
	0x03B07EE4 MOVZ W14, 0x178
	0x03B07EE8 MADD X14, X23, X14, X8
	0x03B07EEC LDUR V0, [X14 + 0xA4]
	0x03B07EF0 ADD X13, X13, X10, 0x3, LSL
	0x03B07EF4 STR D0, [X13 + 0x20]
	0x03B07EF8 LDR X13, [X19 + 0x368]
	0x03B07EFC CBZ X13, 0x3B082AC
	0x03B07F00 LDR X13, [X13 + 0x60]
	0x03B07F04 CBZ X13, 0x3B082AC
	0x03B07F08 LDR W14, [X13 + 0x18]
	0x03B07F0C CMP W22, W14
	0x03B07F10 B.CS 0x3B082B0
	0x03B07F14 LDR W14, [X8 + 0x18]
	0x03B07F18 CMP W14, W20
	0x03B07F1C B.LS 0x3B082B0
	0x03B07F20 MOVZ W14, 0x50
	0x03B07F24 MADD X13, X22, X14, X13
	0x03B07F28 LDR X13, [X13 + 0x48]
	0x03B07F2C CBZ X13, 0x3B082AC
	0x03B07F30 LDR W14, [X13 + 0x18]
	0x03B07F34 CMP W11, W14
	0x03B07F38 B.CS 0x3B082B0
	0x03B07F3C MOVZ W14, 0x178
	0x03B07F40 MADD X14, X23, X14, X8
	0x03B07F44 LDUR V0, [X14 + 0xCC]
	0x03B07F48 ADD X13, X13, X11, 0x3, LSL
	0x03B07F4C STR D0, [X13 + 0x20]
	0x03B07F50 LDR X13, [X19 + 0x368]
	0x03B07F54 CBZ X13, 0x3B082AC
	0x03B07F58 LDR X13, [X13 + 0x60]
	0x03B07F5C CBZ X13, 0x3B082AC
	0x03B07F60 LDR W14, [X13 + 0x18]
	0x03B07F64 CMP W22, W14
	0x03B07F68 B.CS 0x3B082B0
	0x03B07F6C LDR W14, [X8 + 0x18]
	0x03B07F70 CMP W14, W20
	0x03B07F74 B.LS 0x3B082B0
	0x03B07F78 MOVZ W14, 0x50
	0x03B07F7C MADD X13, X22, X14, X13
	0x03B07F80 LDR X13, [X13 + 0x48]
	0x03B07F84 CBZ X13, 0x3B082AC
	0x03B07F88 LDR W14, [X13 + 0x18]
	0x03B07F8C CMP W12, W14
	0x03B07F90 B.CS 0x3B082B0
	0x03B07F94 MOVZ W14, 0x178
	0x03B07F98 MADD X14, X23, X14, X8
	0x03B07F9C LDUR V0, [X14 + 0xF4]
	0x03B07FA0 ADD X13, X13, X12, 0x3, LSL
	0x03B07FA4 STR D0, [X13 + 0x20]
	0x03B07FA8 LDR X13, [X19 + 0x368]
	0x03B07FAC CBZ X13, 0x3B082AC
	0x03B07FB0 LDR X13, [X13 + 0x60]
	0x03B07FB4 CBZ X13, 0x3B082AC
	0x03B07FB8 LDR W14, [X13 + 0x18]
	0x03B07FBC CMP W22, W14
	0x03B07FC0 B.CS 0x3B082B0
	0x03B07FC4 LDR W14, [X8 + 0x18]
	0x03B07FC8 CMP W14, W20
	0x03B07FCC B.LS 0x3B082B0
	0x03B07FD0 MOVZ W14, 0x50
	0x03B07FD4 MADD X13, X22, X14, X13
	0x03B07FD8 LDR X13, [X13 + 0x50]
	0x03B07FDC CBZ X13, 0x3B082AC
	0x03B07FE0 LDR W14, [X13 + 0x18]
	0x03B07FE4 CMP W24, W14
	0x03B07FE8 B.CS 0x3B082B0
	0x03B07FEC MOVZ W14, 0x178
	0x03B07FF0 MADD X14, X23, X14, X8
	0x03B07FF4 LDUR V0, [X14 + 0x84]
	0x03B07FF8 ADD X13, X13, X9, 0x3, LSL
	0x03B07FFC STR D0, [X13 + 0x20]
	0x03B08000 LDR X13, [X19 + 0x368]
	0x03B08004 CBZ X13, 0x3B082AC
	0x03B08008 LDR X13, [X13 + 0x60]
	0x03B0800C CBZ X13, 0x3B082AC
	0x03B08010 LDR W14, [X13 + 0x18]
	0x03B08014 CMP W22, W14
	0x03B08018 B.CS 0x3B082B0
	0x03B0801C LDR W14, [X8 + 0x18]
	0x03B08020 CMP W14, W20
	0x03B08024 B.LS 0x3B082B0
	0x03B08028 MOVZ W14, 0x50
	0x03B0802C MADD X13, X22, X14, X13
	0x03B08030 LDR X13, [X13 + 0x50]
	0x03B08034 CBZ X13, 0x3B082AC
	0x03B08038 LDR W14, [X13 + 0x18]
	0x03B0803C CMP W10, W14
	0x03B08040 B.CS 0x3B082B0
	0x03B08044 MOVZ W14, 0x178
	0x03B08048 MADD X14, X23, X14, X8
	0x03B0804C LDUR V0, [X14 + 0xAC]
	0x03B08050 ADD X13, X13, X10, 0x3, LSL
	0x03B08054 STR D0, [X13 + 0x20]
	0x03B08058 LDR X13, [X19 + 0x368]
	0x03B0805C CBZ X13, 0x3B082AC
	0x03B08060 LDR X13, [X13 + 0x60]
	0x03B08064 CBZ X13, 0x3B082AC
	0x03B08068 LDR W14, [X13 + 0x18]
	0x03B0806C CMP W22, W14
	0x03B08070 B.CS 0x3B082B0
	0x03B08074 LDR W14, [X8 + 0x18]
	0x03B08078 CMP W14, W20
	0x03B0807C B.LS 0x3B082B0
	0x03B08080 MOVZ W14, 0x50
	0x03B08084 MADD X13, X22, X14, X13
	0x03B08088 LDR X13, [X13 + 0x50]
	0x03B0808C CBZ X13, 0x3B082AC
	0x03B08090 LDR W14, [X13 + 0x18]
	0x03B08094 CMP W11, W14
	0x03B08098 B.CS 0x3B082B0
	0x03B0809C MOVZ W14, 0x178
	0x03B080A0 MADD X14, X23, X14, X8
	0x03B080A4 LDUR V0, [X14 + 0xD4]
	0x03B080A8 ADD X13, X13, X11, 0x3, LSL
	0x03B080AC STR D0, [X13 + 0x20]
	0x03B080B0 LDR X13, [X19 + 0x368]
	0x03B080B4 CBZ X13, 0x3B082AC
	0x03B080B8 LDR X13, [X13 + 0x60]
	0x03B080BC CBZ X13, 0x3B082AC
	0x03B080C0 LDR W14, [X13 + 0x18]
	0x03B080C4 CMP W22, W14
	0x03B080C8 B.CS 0x3B082B0
	0x03B080CC LDR W14, [X8 + 0x18]
	0x03B080D0 CMP W14, W20
	0x03B080D4 B.LS 0x3B082B0
	0x03B080D8 MOVZ W14, 0x50
	0x03B080DC MADD X13, X22, X14, X13
	0x03B080E0 LDR X13, [X13 + 0x50]
	0x03B080E4 CBZ X13, 0x3B082AC
	0x03B080E8 LDR W14, [X13 + 0x18]
	0x03B080EC CMP W12, W14
	0x03B080F0 B.CS 0x3B082B0
	0x03B080F4 MOVZ W14, 0x178
	0x03B080F8 MADD X14, X23, X14, X8
	0x03B080FC LDUR V0, [X14 + 0xFC]
	0x03B08100 ADD X13, X13, X12, 0x3, LSL
	0x03B08104 STR D0, [X13 + 0x20]
	0x03B08108 LDR X13, [X19 + 0x368]
	0x03B0810C CBZ X13, 0x3B082AC
	0x03B08110 LDR X13, [X13 + 0x60]
	0x03B08114 CBZ X13, 0x3B082AC
	0x03B08118 LDR W14, [X13 + 0x18]
	0x03B0811C CMP W22, W14
	0x03B08120 B.CS 0x3B082B0
	0x03B08124 LDR W14, [X8 + 0x18]
	0x03B08128 CMP W14, W20
	0x03B0812C B.LS 0x3B082B0
	0x03B08130 MOVZ W14, 0x50
	0x03B08134 MADD X13, X22, X14, X13
	0x03B08138 LDR X13, [X13 + 0x58]
	0x03B0813C CBZ X13, 0x3B082AC
	0x03B08140 LDR W14, [X13 + 0x18]
	0x03B08144 CMP W24, W14
	0x03B08148 B.CS 0x3B082B0
	0x03B0814C MOVZ W14, 0x178
	0x03B08150 MADD X14, X23, X14, X8
	0x03B08154 LDR W14, [X14 + 0x94]
	0x03B08158 ADD X9, X13, X9, 0x2, LSL
	0x03B0815C STR W14, [X9 + 0x20]
	0x03B08160 LDR X9, [X19 + 0x368]
	0x03B08164 CBZ X9, 0x3B082AC
	0x03B08168 LDR X9, [X9 + 0x60]
	0x03B0816C CBZ X9, 0x3B082AC
	0x03B08170 LDR W13, [X9 + 0x18]
	0x03B08174 CMP W22, W13
	0x03B08178 B.CS 0x3B082B0
	0x03B0817C LDR W13, [X8 + 0x18]
	0x03B08180 CMP W13, W20
	0x03B08184 B.LS 0x3B082B0
	0x03B08188 MOVZ W13, 0x50
	0x03B0818C MADD X9, X22, X13, X9
	0x03B08190 LDR X9, [X9 + 0x58]
	0x03B08194 CBZ X9, 0x3B082AC
	0x03B08198 LDR W13, [X9 + 0x18]
	0x03B0819C CMP W10, W13
	0x03B081A0 B.CS 0x3B082B0
	0x03B081A4 MOVZ W13, 0x178
	0x03B081A8 MADD X13, X23, X13, X8
	0x03B081AC LDR W13, [X13 + 0xBC]
	0x03B081B0 ADD X9, X9, X10, 0x2, LSL
	0x03B081B4 STR W13, [X9 + 0x20]
	0x03B081B8 LDR X9, [X19 + 0x368]
	0x03B081BC CBZ X9, 0x3B082AC
	0x03B081C0 LDR X9, [X9 + 0x60]
	0x03B081C4 CBZ X9, 0x3B082AC
	0x03B081C8 LDR W10, [X9 + 0x18]
	0x03B081CC CMP W22, W10
	0x03B081D0 B.CS 0x3B082B0
	0x03B081D4 LDR W10, [X8 + 0x18]
	0x03B081D8 CMP W10, W20
	0x03B081DC B.LS 0x3B082B0
	0x03B081E0 MOVZ W10, 0x50
	0x03B081E4 MADD X9, X22, X10, X9
	0x03B081E8 LDR X9, [X9 + 0x58]
	0x03B081EC CBZ X9, 0x3B082AC
	0x03B081F0 LDR W10, [X9 + 0x18]
	0x03B081F4 CMP W11, W10
	0x03B081F8 B.CS 0x3B082B0
	0x03B081FC MOVZ W10, 0x178
	0x03B08200 MADD X10, X23, X10, X8
	0x03B08204 LDR W10, [X10 + 0xE4]
	0x03B08208 ADD X9, X9, X11, 0x2, LSL
	0x03B0820C STR W10, [X9 + 0x20]
	0x03B08210 LDR X9, [X19 + 0x368]
	0x03B08214 CBZ X9, 0x3B082AC
	0x03B08218 LDR X9, [X9 + 0x60]
	0x03B0821C CBZ X9, 0x3B082AC
	0x03B08220 LDR W10, [X9 + 0x18]
	0x03B08224 CMP W22, W10
	0x03B08228 B.CS 0x3B082B0
	0x03B0822C LDR W10, [X8 + 0x18]
	0x03B08230 CMP W10, W20
	0x03B08234 B.LS 0x3B082B0
	0x03B08238 MOVZ W10, 0x50
	0x03B0823C MADD X9, X22, X10, X9
	0x03B08240 LDR X9, [X9 + 0x58]
	0x03B08244 CBZ X9, 0x3B082AC
	0x03B08248 LDR W10, [X9 + 0x18]
	0x03B0824C CMP W12, W10
	0x03B08250 B.CS 0x3B082B0
	0x03B08254 MOVZ W10, 0x178
	0x03B08258 MADD X8, X23, X10, X8
	0x03B0825C LDR W8, [X8 + 0x10C]
	0x03B08260 ADD X9, X9, X12, 0x2, LSL
	0x03B08264 STR W8, [X9 + 0x20]
	0x03B08268 LDR X8, [X19 + 0x368]
	0x03B0826C CBZ X8, 0x3B082AC
	0x03B08270 LDR X8, [X8 + 0x60]
	0x03B08274 CBZ X8, 0x3B082AC
	0x03B08278 LDR W9, [X8 + 0x18]
	0x03B0827C CMP W22, W9
	0x03B08280 B.CS 0x3B082B0
	0x03B08284 MOVZ W10, 0x50
	0x03B08288 ADD W9, W24, 0x4
	0x03B0828C MADD X8, X22, X10, X8
	0x03B08290 LDP X20, X19, [X31 + 0x40]
	0x03B08294 LDP X22, X21, [X31 + 0x30]
	0x03B08298 LDP X24, X23, [X31 + 0x20]
	0x03B0829C LDP X26, X25, [X31 + 0x10]
	0x03B082A0 STR W9, [X8 + 0x28]
	0x03B082A4 LDR X30, [X31], #0x50
	0x03B082A8 RET
	0x03B082AC BL 0x1C16F20
	0x03B082B0 BL 0x1C16F28
	0x03B082B4 STR X30, [X31 - 0x50]!
	0x03B082B8 STP X26, X25, [X31 + 0x10]
	0x03B082BC STP X24, X23, [X31 + 0x20]
	0x03B082C0 STP X22, X21, [X31 + 0x30]
	0x03B082C4 STP X20, X19, [X31 + 0x40]
	0x03B082C8 ADRP X22, 0x8DA000
	0x03B082CC LDRB W8, [X22 + 0x65E]
	0x03B082D0 MOV W19, W3
	0x03B082D4 MOV W20, W1
	0x03B082D8 MOV X21, X0
	0x03B082DC TBNZ X8, 0x0, 0x3B082F4
	0x03B082E0 ADRP X0, 0x650000
	0x03B082E4 LDR X0, [X0 + 0x348]
	0x03B082E8 BL 0x1C16CF4
	0x03B082EC MOVZ W8, 0x1
	0x03B082F0 STRB W8, [X22 + 0x65E]
	0x03B082F4 LDR X10, [X21 + 0x368]
	0x03B082F8 CBZ X10, 0x3B08DDC
	0x03B082FC LDR X9, [X10 + 0x38]
	0x03B08300 CBZ X9, 0x3B08DDC
	0x03B08304 LDR W8, [X9 + 0x18]
	0x03B08308 CMP W8, W20
	0x03B0830C B.LS 0x3B08DE0
	0x03B08310 LDR X8, [X10 + 0x60]
	0x03B08314 CBZ X8, 0x3B08DDC
	0x03B08318 SXTW X26, W20
	0x03B0831C MOVZ W11, 0x178
	0x03B08320 MADD X9, X26, X11, X9
	0x03B08324 LDRSW X23, [X9 + 0x58]
	0x03B08328 LDR W9, [X8 + 0x18]
	0x03B0832C CMP W23, W9
	0x03B08330 B.CS 0x3B08DE0
	0x03B08334 MOVZ W9, 0x50
	0x03B08338 MADD X8, X23, X9, X8
	0x03B0833C LDR X9, [X8 + 0x30]
	0x03B08340 CBZ X9, 0x3B08DDC
	0x03B08344 LDR W24, [X8 + 0x28]
	0x03B08348 LDR W9, [X9 + 0x18]
	0x03B0834C ADD X25, X21, 0x368
	0x03B08350 CMP W24, W9
	0x03B08354 B.LT 0x3B083C0
	0x03B08358 ADD X21, X8, 0x20
	0x03B0835C ANDS W31, W19, 0x1
	0x03B08360 MOVZ W8, 0x4
	0x03B08364 MOVZ W9, 0x8
	0x03B08368 CSEL W8, W9, W8, NE
	0x03B0836C ADD W8, W24, W8
	0x03B08370 ADD W9, W8, 0x3
	0x03B08374 CMP W8, 0x0
	0x03B08378 CSEL W8, W9, W8, LT
	0x03B0837C SBFM W0, W8, 0x2, 0x1F
	0x03B08380 MOV X1, X31
	0x03B08384 BL 0x3C2B340
	0x03B08388 ADRP X8, 0x650000
	0x03B0838C LDR X8, [X8 + 0x348]
	0x03B08390 MOV W22, W0
	0x03B08394 LDR X8, [X8]
	0x03B08398 LDR W9, [X8 + 0xE0]
	0x03B0839C CBNZ W9, 0x3B083A8
	0x03B083A0 MOV X0, X8
	0x03B083A4 BL 0x1C16DFC
	0x03B083A8 MOV X0, X21
	0x03B083AC MOV W1, W22
	0x03B083B0 MOV X2, X31
	0x03B083B4 BL 0x3B11BD0
	0x03B083B8 LDR X10, [X25]
	0x03B083BC CBZ X10, 0x3B08DDC
	0x03B083C0 LDR X8, [X10 + 0x38]
	0x03B083C4 CBZ X8, 0x3B08DDC
	0x03B083C8 MOV X9, X8
	0x03B083CC LDR W11, [X9 + 0x18]!
	0x03B083D0 CMP W11, W20
	0x03B083D4 B.LS 0x3B08DE0
	0x03B083D8 MOVZ W11, 0x178
	0x03B083DC MADD X11, X26, X11, X8
	0x03B083E0 STR W24, [X11 + 0x6C]
	0x03B083E4 LDR X10, [X10 + 0x60]
	0x03B083E8 CBZ X10, 0x3B08DDC
	0x03B083EC LDR W11, [X10 + 0x18]
	0x03B083F0 CMP W23, W11
	0x03B083F4 B.CS 0x3B08DE0
	0x03B083F8 MOVZ W11, 0x50
	0x03B083FC MADD X10, X23, X11, X10
	0x03B08400 LDR X11, [X10 + 0x30]
	0x03B08404 CBZ X11, 0x3B08DDC
	0x03B08408 LDR W10, [X11 + 0x18]
	0x03B0840C CMP W24, W10
	0x03B08410 B.CS 0x3B08DE0
	0x03B08414 MOVZ W12, 0x178
	0x03B08418 MADD X12, X26, X12, X8
	0x03B0841C LDR V0, [X12 + 0x70]
	0x03B08420 LDR V1, [X12 + 0x78]
	0x03B08424 SXTW X10, W24
	0x03B08428 MOVZ W12, 0xC
	0x03B0842C MADD X11, X10, X12, X11
	0x03B08430 STR D0, [X11 + 0x20]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+80], X26
	010 Move [X31+88], X25
	011 Move [X31+96], X24
	012 Move [X31+104], X23
	013 Move [X31+112], X22
	014 Move [X31+120], X21
	015 Move [X31+128], X20
	016 Move [X31+136], X19
	017 Move X21, 0x8DC000
	018 Move W8, [X21+1627]
	019 Move X20, X1
	020 Move V9, V1
	021 Move V8, V0
	022 Move X19, X0
	023 Move X9, X1
	024 ShiftRight X9, 24
	025 And X9, X9, 0x7FFFFFFF
	026 Move [X31+76], W9
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {39}
	031 Move X0, 0x615000
	032 Move X0, [X0+1544]
	033 Call 0x1C17CF4
	034 Move X0, 0x5ED000
	035 Move X0, [X0+1432]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X21+1627], W8
	039 Move [X31], X31
	040 Move [X31+8], X31
	041 Move X8, [X19+872]
	042 Compare X8, 0
	043 JumpIfEqual {875}
	044 Move X8, [X8+56]
	045 Compare X8, 0
	046 JumpIfEqual {875}
	047 NotImplemented "Instruction LDRSW not yet implemented."
	048 Move W10, [X8+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move W10, 376
	051 NotImplemented "Instruction MADD not yet implemented."
	052 Add X9, X8, 284
	053 Move X10, [X9]
	054 Add X25, X19, 872
	055 Move [X8+112], X10
	056 Move W9, [X9+8]
	057 Move [X8+120], W9
	058 Move X8, [X25]
	059 Compare X8, 0
	060 JumpIfEqual {875}
	061 Move X8, [X8+56]
	062 Compare X8, 0
	063 JumpIfEqual {875}
	064 Add X26, X19, 1172
	065 NotImplemented "Instruction LDRSW not yet implemented."
	066 Move W10, [X8+24]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W10, 376
	069 NotImplemented "Instruction MADD not yet implemented."
	070 Move X9, [X8+272]
	071 Move W10, [X8+280]
	072 Move [X8+152], X9
	073 Move [X8+160], W10
	074 Move X8, [X25]
	075 Compare X8, 0
	076 JumpIfEqual {875}
	077 Move X8, [X8+56]
	078 Compare X8, 0
	079 JumpIfEqual {875}
	080 NotImplemented "Instruction LDRSW not yet implemented."
	081 Move W10, [X8+24]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move W10, 376
	084 NotImplemented "Instruction MADD not yet implemented."
	085 Move X9, [X8+296]
	086 Move W10, [X8+304]
	087 Move [X8+192], X9
	088 Move [X8+200], W10
	089 Move X8, [X25]
	090 Compare X8, 0
	091 JumpIfEqual {875}
	092 Move X8, [X8+56]
	093 Compare X8, 0
	094 JumpIfEqual {875}
	095 NotImplemented "Instruction LDRSW not yet implemented."
	096 Move W10, [X8+24]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move W10, 376
	099 NotImplemented "Instruction MADD not yet implemented."
	100 Add X9, X8, 308
	101 Move X10, [X9]
	102 Move X23, 0x5ED000
	103 Move [X8+232], X10
	104 Move W9, [X9+8]
	105 Move [X8+240], W9
	106 Move W8, [X19+327]
	107 Move W9, [X31+76]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 NotImplemented "Instruction CSEL not yet implemented."
	110 Move [X31+76], W22
	111 Move W8, [X19+352]
	112 Move X23, [X23+1432]
	113 Compare W8, 0
	114 JumpIfEqual {243}
	115 Move W8, [X19+468]
	116 Compare W8, 0
	117 JumpIfNotEqual {120}
	118 Move W8, [X19+1272]
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move X0, [X23]
	121 Move X21, [X19+424]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1C17DFC
	126 Move X0, X21
	127 Move X1, X31
	128 Move X2, X31
	129 Call Object.op_Inequality, X0, X1
	130 Move X8, [X25]
	131 Compare X8, 0
	132 JumpIfEqual {875}
	133 Move X21, [X8+56]
	134 Compare X21, 0
	135 JumpIfEqual {875}
	136 NotImplemented "Instruction LDRSW not yet implemented."
	137 Move W8, [X21+24]
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move TEMP, X0
	140 And TEMP, TEMP, 1
	141 Compare TEMP, 1
	142 JumpIfNotEqual {302}
	143 Move X8, [X19+424]
	144 Compare X8, 0
	145 JumpIfEqual {875}
	146 Move S0, [X8+60]
	147 Move S1, [X8+64]
	148 Move S2, [X8+68]
	149 Move S3, [X8+72]
	150 And W8, W20, 255
	151 Move W10, 0x437F0000
	152 Move W9, W20
	153 ShiftRight W9, 8
	154 And W9, W9, 0x7FFF
	155 NotImplemented "Instruction UCVTF not yet implemented."
	156 Move W8, W20
	157 ShiftRight W8, 16
	158 And W8, W8, 0x7FFFFF
	159 Move S5, W10
	160 And W10, W22, 255
	161 NotImplemented "Instruction UCVTF not yet implemented."
	162 NotImplemented "Instruction UCVTF not yet implemented."
	163 NotImplemented "Instruction UCVTF not yet implemented."
	164 NotImplemented "Instruction FDIV not yet implemented."
	165 NotImplemented "Instruction FDIV not yet implemented."
	166 NotImplemented "Instruction FDIV not yet implemented."
	167 NotImplemented "Instruction FDIV not yet implemented."
	168 Multiply S0, S0, S13
	169 Multiply S1, S1, S12
	170 Multiply S2, S2, S11
	171 Multiply S3, S3, S10
	172 Move X0, X31
	173 Call 0x1E44664
	174 Move W8, 376
	175 NotImplemented "Instruction MADD not yet implemented."
	176 Move [X8+148], W0
	177 Move X8, [X25]
	178 Compare X8, 0
	179 JumpIfEqual {875}
	180 Move X21, [X8+56]
	181 Compare X21, 0
	182 JumpIfEqual {875}
	183 NotImplemented "Instruction LDRSW not yet implemented."
	184 Move W8, [X21+24]
	185 NotImplemented "Instruction CMP not yet implemented."
	186 Move X8, [X19+424]
	187 Compare X8, 0
	188 JumpIfEqual {875}
	189 Move S0, [X8+28]
	190 Move S1, [X8+32]
	191 Move S2, [X8+36]
	192 Move S3, [X8+40]
	193 Move X0, X31
	194 Multiply S0, S13, S0
	195 Multiply S1, S12, S1
	196 Multiply S2, S11, S2
	197 Multiply S3, S10, S3
	198 Call 0x1E44664
	199 Move W8, 376
	200 NotImplemented "Instruction MADD not yet implemented."
	201 Move [X8+188], W0
	202 Move X8, [X25]
	203 Compare X8, 0
	204 JumpIfEqual {875}
	205 Move X21, [X8+56]
	206 Compare X21, 0
	207 JumpIfEqual {875}
	208 NotImplemented "Instruction LDRSW not yet implemented."
	209 Move W8, [X21+24]
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move X8, [X19+424]
	212 Compare X8, 0
	213 JumpIfEqual {875}
	214 Move S0, [X8+44]
	215 Move S1, [X8+48]
	216 Move S2, [X8+52]
	217 Move S3, [X8+56]
	218 Move X0, X31
	219 Multiply S0, S13, S0
	220 Multiply S1, S12, S1
	221 Multiply S2, S11, S2
	222 Multiply S3, S10, S3
	223 Call 0x1E44664
	224 Move W8, 376
	225 NotImplemented "Instruction MADD not yet implemented."
	226 Move [X8+228], W0
	227 Move X8, [X25]
	228 Compare X8, 0
	229 JumpIfEqual {875}
	230 Move X21, [X8+56]
	231 Compare X21, 0
	232 JumpIfEqual {875}
	233 NotImplemented "Instruction LDRSW not yet implemented."
	234 Move W8, [X21+24]
	235 NotImplemented "Instruction CMP not yet implemented."
	236 Move X8, [X19+424]
	237 Compare X8, 0
	238 JumpIfEqual {875}
	239 Move S0, [X8+76]
	240 Move S1, [X8+80]
	241 Move S2, [X8+84]
	242 Move S3, [X8+88]
	243 Move X8, [X25]
	244 Compare X8, 0
	245 JumpIfEqual {875}
	246 Move X9, [X8+56]
	247 Compare X9, 0
	248 JumpIfEqual {875}
	249 NotImplemented "Instruction LDRSW not yet implemented."
	250 Move W8, [X9+24]
	251 NotImplemented "Instruction CMP not yet implemented."
	252 Move W11, 376
	253 Move W8, W20
	254 ShiftRight W8, 16
	255 And W8, W8, 0x7FFFFFFF
	256 NotImplemented "Instruction MADD not yet implemented."
	257 Move [X9+150], W8
	258 NotImplemented "Instruction STRH not yet implemented."
	259 Move [X9+151], W22
	260 Move X9, [X25]
	261 Compare X9, 0
	262 JumpIfEqual {875}
	263 Move X9, [X9+56]
	264 Compare X9, 0
	265 JumpIfEqual {875}
	266 NotImplemented "Instruction LDRSW not yet implemented."
	267 Move W11, [X9+24]
	268 NotImplemented "Instruction CMP not yet implemented."
	269 Move W11, 376
	270 NotImplemented "Instruction MADD not yet implemented."
	271 Move [X9+190], W8
	272 NotImplemented "Instruction STRH not yet implemented."
	273 Move [X9+191], W22
	274 Move X9, [X25]
	275 Compare X9, 0
	276 JumpIfEqual {875}
	277 Move X9, [X9+56]
	278 Compare X9, 0
	279 JumpIfEqual {875}
	280 NotImplemented "Instruction LDRSW not yet implemented."
	281 Move W11, [X9+24]
	282 NotImplemented "Instruction CMP not yet implemented."
	283 Move W11, 376
	284 NotImplemented "Instruction MADD not yet implemented."
	285 Move [X9+230], W8
	286 NotImplemented "Instruction STRH not yet implemented."
	287 Move [X9+231], W22
	288 Move X9, [X25]
	289 Compare X9, 0
	290 JumpIfEqual {875}
	291 Move X9, [X9+56]
	292 Compare X9, 0
	293 JumpIfEqual {875}
	294 NotImplemented "Instruction LDRSW not yet implemented."
	295 Move W11, [X9+24]
	296 NotImplemented "Instruction CMP not yet implemented."
	297 Move W11, 376
	298 NotImplemented "Instruction MADD not yet implemented."
	299 Move [X9+270], W8
	300 NotImplemented "Instruction STRH not yet implemented."
	301 Move [X9+271], W22
	302 Move V0, [X19+392]
	303 Move V1, [X19+396]
	304 Move V2, [X19+400]
	305 Move V3, [X19+404]
	306 And W8, W20, 255
	307 Move W10, 0x437F0000
	308 Move W9, W20
	309 ShiftRight W9, 8
	310 And W9, W9, 0x7FFF
	311 NotImplemented "Instruction UCVTF not yet implemented."
	312 Move W8, W20
	313 ShiftRight W8, 16
	314 And W8, W8, 0x7FFFFF
	315 Move S5, W10
	316 And W10, W22, 255
	317 NotImplemented "Instruction UCVTF not yet implemented."
	318 NotImplemented "Instruction UCVTF not yet implemented."
	319 NotImplemented "Instruction UCVTF not yet implemented."
	320 NotImplemented "Instruction FDIV not yet implemented."
	321 NotImplemented "Instruction FDIV not yet implemented."
	322 NotImplemented "Instruction FDIV not yet implemented."
	323 NotImplemented "Instruction FDIV not yet implemented."
	324 Multiply S0, S0, S13
	325 Multiply S1, S1, S12
	326 Multiply S2, S2, S11
	327 Multiply S3, S3, S10
	328 Move X0, X31
	329 Call 0x1E44664
	330 Move W8, 376
	331 NotImplemented "Instruction MADD not yet implemented."
	332 Move [X8+148], W0
	333 Move X8, [X19+872]
	334 Compare X8, 0
	335 JumpIfEqual {875}
	336 Move X21, [X8+56]
	337 Compare X21, 0
	338 JumpIfEqual {875}
	339 NotImplemented "Instruction LDRSW not yet implemented."
	340 Move W8, [X21+24]
	341 NotImplemented "Instruction CMP not yet implemented."
	342 Move V0, [X19+360]
	343 Move V1, [X19+364]
	344 Move V2, [X19+368]
	345 Move V3, [X19+372]
	346 Multiply S0, S13, S0
	347 Multiply S1, S12, S1
	348 Multiply S2, S11, S2
	349 Multiply S3, S10, S3
	350 Move X0, X31
	351 Call 0x1E44664
	352 Move W8, 376
	353 NotImplemented "Instruction MADD not yet implemented."
	354 Move [X8+188], W0
	355 Move X8, [X19+872]
	356 Compare X8, 0
	357 JumpIfEqual {875}
	358 Move X21, [X8+56]
	359 Compare X21, 0
	360 JumpIfEqual {875}
	361 NotImplemented "Instruction LDRSW not yet implemented."
	362 Move W8, [X21+24]
	363 NotImplemented "Instruction CMP not yet implemented."
	364 Move V0, [X19+376]
	365 Move V1, [X19+380]
	366 Move V2, [X19+384]
	367 Move V3, [X19+388]
	368 Multiply S0, S13, S0
	369 Multiply S1, S12, S1
	370 Multiply S2, S11, S2
	371 Multiply S3, S10, S3
	372 Move X0, X31
	373 Call 0x1E44664
	374 Move W8, 376
	375 NotImplemented "Instruction MADD not yet implemented."
	376 Move [X8+228], W0
	377 Move X8, [X19+872]
	378 Compare X8, 0
	379 JumpIfEqual {875}
	380 Move X21, [X8+56]
	381 Compare X21, 0
	382 JumpIfEqual {875}
	383 NotImplemented "Instruction LDRSW not yet implemented."
	384 Move W8, [X21+24]
	385 NotImplemented "Instruction CMP not yet implemented."
	386 Move V0, [X19+408]
	387 Move V1, [X19+412]
	388 Move V2, [X19+416]
	389 Move V3, [X19+420]
	390 Multiply S0, S13, S0
	391 Multiply S1, S12, S1
	392 Multiply S2, S11, S2
	393 Multiply S3, S10, S3
	394 Move X0, X31
	395 Call 0x1E44664
	396 Move W8, 376
	397 NotImplemented "Instruction MADD not yet implemented."
	398 Move [X8+268], W0
	399 Move X0, [X23]
	400 Move X21, [X19+1408]
	401 Move W8, [X0+224]
	402 Compare W8, 0
	403 JumpIfNotEqual {405}
	404 Call 0x1C17DFC
	405 Move X0, X21
	406 Move X1, X31
	407 Move X2, X31
	408 Call Object.op_Inequality, X0, X1
	409 Move TEMP, X0
	410 And TEMP, TEMP, 1
	411 Compare TEMP, 1
	412 JumpIfNotEqual {721}
	413 Move X8, [X19+872]
	414 Compare X8, 0
	415 JumpIfEqual {875}
	416 Move X21, [X8+56]
	417 Compare X21, 0
	418 JumpIfEqual {875}
	419 NotImplemented "Instruction LDRSW not yet implemented."
	420 Move W8, [X21+24]
	421 NotImplemented "Instruction CMP not yet implemented."
	422 Move W8, [X19+1456]
	423 Compare W8, 0
	424 JumpIfEqual {604}
	425 Move W8, 376
	426 NotImplemented "Instruction MADD not yet implemented."
	427 Add X20, X20, 148
	428 Move W9, [X20]
	429 Move X8, [X19+1408]
	430 Compare X8, 0
	431 JumpIfEqual {875}
	432 Move X10, X9
	433 ShiftRight X10, 24
	434 And X10, X10, 0x7FFFFFFF
	435 NotImplemented "Instruction UCVTF not yet implemented."
	436 Move W10, W9
	437 ShiftRight W10, 16
	438 And W10, W10, 0x7FFFFF
	439 Move W11, 0x437F0000
	440 NotImplemented "Instruction UCVTF not yet implemented."
	441 Move W10, W9
	442 ShiftRight W10, 8
	443 And W10, W10, 0x7FFF
	444 And W9, W9, 255
	445 Move S1, W11
	446 NotImplemented "Instruction UCVTF not yet implemented."
	447 Move S3, [X8+60]
	448 Move S4, [X8+64]
	449 NotImplemented "Instruction FDIV not yet implemented."
	450 NotImplemented "Instruction FDIV not yet implemented."
	451 Move S6, [X8+68]
	452 Move S16, [X8+72]
	453 NotImplemented "Instruction UCVTF not yet implemented."
	454 NotImplemented "Instruction FDIV not yet implemented."
	455 NotImplemented "Instruction FDIV not yet implemented."
	456 Multiply S0, S0, S3
	457 Multiply S1, S5, S4
	458 Multiply S2, S2, S6
	459 Multiply S3, S7, S16
	460 Move X0, X31
	461 Call 0x1E44664
	462 Move [X20], W0
	463 Move X8, [X25]
	464 Compare X8, 0
	465 JumpIfEqual {875}
	466 Move X8, [X8+56]
	467 Compare X8, 0
	468 JumpIfEqual {875}
	469 NotImplemented "Instruction LDRSW not yet implemented."
	470 Move W10, [X8+24]
	471 NotImplemented "Instruction CMP not yet implemented."
	472 Move W10, 376
	473 NotImplemented "Instruction MADD not yet implemented."
	474 Add X20, X20, 188
	475 Move W9, [X20]
	476 Move X8, [X19+1408]
	477 Compare X8, 0
	478 JumpIfEqual {875}
	479 Move X10, X9
	480 ShiftRight X10, 24
	481 And X10, X10, 0x7FFFFFFF
	482 NotImplemented "Instruction UCVTF not yet implemented."
	483 Move W10, W9
	484 ShiftRight W10, 16
	485 And W10, W10, 0x7FFFFF
	486 Move W11, 0x437F0000
	487 NotImplemented "Instruction UCVTF not yet implemented."
	488 Move W10, W9
	489 ShiftRight W10, 8
	490 And W10, W10, 0x7FFF
	491 And W9, W9, 255
	492 Move S1, W11
	493 NotImplemented "Instruction UCVTF not yet implemented."
	494 Move S3, [X8+28]
	495 Move S4, [X8+32]
	496 NotImplemented "Instruction FDIV not yet implemented."
	497 NotImplemented "Instruction FDIV not yet implemented."
	498 Move S6, [X8+36]
	499 Move S16, [X8+40]
	500 NotImplemented "Instruction UCVTF not yet implemented."
	501 NotImplemented "Instruction FDIV not yet implemented."
	502 NotImplemented "Instruction FDIV not yet implemented."
	503 Multiply S0, S0, S3
	504 Multiply S1, S5, S4
	505 Multiply S2, S2, S6
	506 Multiply S3, S7, S16
	507 Move X0, X31
	508 Call 0x1E44664
	509 Move [X20], W0
	510 Move X8, [X25]
	511 Compare X8, 0
	512 JumpIfEqual {875}
	513 Move X8, [X8+56]
	514 Compare X8, 0
	515 JumpIfEqual {875}
	516 NotImplemented "Instruction LDRSW not yet implemented."
	517 Move W10, [X8+24]
	518 NotImplemented "Instruction CMP not yet implemented."
	519 Move W10, 376
	520 NotImplemented "Instruction MADD not yet implemented."
	521 Add X20, X20, 228
	522 Move W9, [X20]
	523 Move X8, [X19+1408]
	524 Compare X8, 0
	525 JumpIfEqual {875}
	526 Move X10, X9
	527 ShiftRight X10, 24
	528 And X10, X10, 0x7FFFFFFF
	529 NotImplemented "Instruction UCVTF not yet implemented."
	530 Move W10, W9
	531 ShiftRight W10, 16
	532 And W10, W10, 0x7FFFFF
	533 Move W11, 0x437F0000
	534 NotImplemented "Instruction UCVTF not yet implemented."
	535 Move W10, W9
	536 ShiftRight W10, 8
	537 And W10, W10, 0x7FFF
	538 And W9, W9, 255
	539 Move S1, W11
	540 NotImplemented "Instruction UCVTF not yet implemented."
	541 Move S3, [X8+44]
	542 Move S4, [X8+48]
	543 NotImplemented "Instruction FDIV not yet implemented."
	544 NotImplemented "Instruction FDIV not yet implemented."
	545 Move S6, [X8+52]
	546 Move S16, [X8+56]
	547 NotImplemented "Instruction UCVTF not yet implemented."
	548 NotImplemented "Instruction FDIV not yet implemented."
	549 NotImplemented "Instruction FDIV not yet implemented."
	550 Multiply S0, S0, S3
	551 Multiply S1, S5, S4
	552 Multiply S2, S2, S6
	553 Multiply S3, S7, S16
	554 Move X0, X31
	555 Call 0x1E44664
	556 Move [X20], W0
	557 Move X8, [X25]
	558 Compare X8, 0
	559 JumpIfEqual {875}
	560 Move X9, [X8+56]
	561 Compare X9, 0
	562 JumpIfEqual {875}
	563 NotImplemented "Instruction LDRSW not yet implemented."
	564 Move W8, [X9+24]
	565 NotImplemented "Instruction CMP not yet implemented."
	566 Move X8, [X19+1408]
	567 Compare X8, 0
	568 JumpIfEqual {875}
	569 Move W11, 376
	570 NotImplemented "Instruction MADD not yet implemented."
	571 Move W10, [X9+268]
	572 Move W11, 0x437F0000
	573 Move S2, W11
	574 Move S0, [X8+76]
	575 Move S1, [X8+80]
	576 Move X11, X10
	577 ShiftRight X11, 24
	578 And X11, X11, 0x7FFFFFFF
	579 NotImplemented "Instruction UCVTF not yet implemented."
	580 Move W11, W10
	581 ShiftRight W11, 16
	582 And W11, W11, 0x7FFFFF
	583 NotImplemented "Instruction UCVTF not yet implemented."
	584 Move W11, W10
	585 ShiftRight W11, 8
	586 And W11, W11, 0x7FFF
	587 And W10, W10, 255
	588 NotImplemented "Instruction UCVTF not yet implemented."
	589 NotImplemented "Instruction UCVTF not yet implemented."
	590 NotImplemented "Instruction FDIV not yet implemented."
	591 NotImplemented "Instruction FDIV not yet implemented."
	592 NotImplemented "Instruction FDIV not yet implemented."
	593 NotImplemented "Instruction FDIV not yet implemented."
	594 Move S6, [X8+84]
	595 Move S7, [X8+88]
	596 Multiply S0, S2, S0
	597 Multiply S1, S5, S1
	598 Move X0, X31
	599 Multiply S2, S4, S6
	600 Multiply S3, S3, S7
	601 Add X20, X9, 268
	602 Call 0x1E44664
	603 Move [X20], W0
	604 Move X8, [X19+1408]
	605 Compare X8, 0
	606 JumpIfEqual {875}
	607 Move S0, [X8+60]
	608 Move S1, [X8+64]
	609 Move S2, [X8+68]
	610 Move S3, [X8+72]
	611 And W8, W20, 255
	612 NotImplemented "Instruction UCVTF not yet implemented."
	613 Move W8, 0x437F0000
	614 Move W9, W20
	615 ShiftRight W9, 8
	616 And W9, W9, 0x7FFF
	617 Move W10, W20
	618 ShiftRight W10, 16
	619 And W10, W10, 0x7FFFFF
	620 And W11, W22, 255
	621 Move S5, W8
	622 NotImplemented "Instruction UCVTF not yet implemented."
	623 NotImplemented "Instruction UCVTF not yet implemented."
	624 NotImplemented "Instruction FDIV not yet implemented."
	625 NotImplemented "Instruction UCVTF not yet implemented."
	626 NotImplemented "Instruction FDIV not yet implemented."
	627 NotImplemented "Instruction FDIV not yet implemented."
	628 NotImplemented "Instruction FDIV not yet implemented."
	629 Move V4, V13
	630 Move V5, V12
	631 Move V6, V10
	632 Move V7, V11
	633 Move X0, X31
	634 Call TMPro_ExtensionMethods.MinAlpha, X0, X1
	635 Move X0, X31
	636 Call 0x1E44664
	637 Move W8, 376
	638 NotImplemented "Instruction MADD not yet implemented."
	639 Move [X8+148], W0
	640 Move X8, [X25]
	641 Compare X8, 0
	642 JumpIfEqual {875}
	643 Move X20, [X8+56]
	644 Compare X20, 0
	645 JumpIfEqual {875}
	646 NotImplemented "Instruction LDRSW not yet implemented."
	647 Move W8, [X20+24]
	648 NotImplemented "Instruction CMP not yet implemented."
	649 Move X8, [X19+1408]
	650 Compare X8, 0
	651 JumpIfEqual {875}
	652 Move S0, [X8+28]
	653 Move S1, [X8+32]
	654 Move S2, [X8+36]
	655 Move S3, [X8+40]
	656 Move V4, V13
	657 Move V5, V12
	658 Move V6, V10
	659 Move V7, V11
	660 Move X0, X31
	661 Call TMPro_ExtensionMethods.MinAlpha, X0, X1
	662 Move X0, X31
	663 Call 0x1E44664
	664 Move W8, 376
	665 NotImplemented "Instruction MADD not yet implemented."
	666 Move [X8+188], W0
	667 Move X8, [X25]
	668 Compare X8, 0
	669 JumpIfEqual {875}
	670 Move X20, [X8+56]
	671 Compare X20, 0
	672 JumpIfEqual {875}
	673 NotImplemented "Instruction LDRSW not yet implemented."
	674 Move W8, [X20+24]
	675 NotImplemented "Instruction CMP not yet implemented."
	676 Move X8, [X19+1408]
	677 Compare X8, 0
	678 JumpIfEqual {875}
	679 Move S0, [X8+44]
	680 Move S1, [X8+48]
	681 Move S2, [X8+52]
	682 Move S3, [X8+56]
	683 Move V4, V13
	684 Move V5, V12
	685 Move V6, V10
	686 Move V7, V11
	687 Move X0, X31
	688 Call TMPro_ExtensionMethods.MinAlpha, X0, X1
	689 Move X0, X31
	690 Call 0x1E44664
	691 Move W8, 376
	692 NotImplemented "Instruction MADD not yet implemented."
	693 Move [X8+228], W0
	694 Move X8, [X25]
	695 Compare X8, 0
	696 JumpIfEqual {875}
	697 Move X20, [X8+56]
	698 Compare X20, 0
	699 JumpIfEqual {875}
	700 NotImplemented "Instruction LDRSW not yet implemented."
	701 Move W8, [X20+24]
	702 NotImplemented "Instruction CMP not yet implemented."
	703 Move X8, [X19+1408]
	704 Compare X8, 0
	705 JumpIfEqual {875}
	706 Move S0, [X8+76]
	707 Move S1, [X8+80]
	708 Move S2, [X8+84]
	709 Move S3, [X8+88]
	710 Move V4, V13
	711 Move V5, V12
	712 Move V6, V10
	713 Move V7, V11
	714 Move X0, X31
	715 Call TMPro_ExtensionMethods.MinAlpha, X0, X1
	716 Move X0, X31
	717 Call 0x1E44664
	718 Move W8, 376
	719 NotImplemented "Instruction MADD not yet implemented."
	720 Move [X8+268], W0
	721 Move W9, [X19+264]
	722 Move X8, [X19+1608]
	723 Move S0, W31
	724 NotImplemented "Instruction CMP not yet implemented."
	725 NotImplemented "Instruction FCSEL not yet implemented."
	726 Compare X8, 0
	727 JumpIfEqual {875}
	728 Move X0, [X8+32]
	729 Compare X0, 0
	730 JumpIfEqual {875}
	731 Move X20, 0x614000
	732 Move X20, [X20+1544]
	733 Move X1, X31
	734 Call Glyph.get_glyphRect, X0
	735 Move X8, X0
	736 Move X0, [X20]
	737 Move [X31], X8
	738 Move [X31+8], X1
	739 Move W8, [X0+224]
	740 Compare W8, 0
	741 JumpIfNotEqual {743}
	742 Call 0x1C17DFC
	743 Add X0, X31, 0
	744 Move X1, X31
	745 Call GlyphRect.get_x, X0
	746 Move X8, [X19+256]
	747 Compare X8, 0
	748 JumpIfEqual {875}
	749 Move V11, [X8+264]
	750 Move W23, W0
	751 Add X0, X31, 0
	752 Move X1, X31
	753 Call GlyphRect.get_y, X0
	754 Move X8, [X19+256]
	755 Compare X8, 0
	756 JumpIfEqual {875}
	757 Move V12, [X8+268]
	758 Move W24, W0
	759 Add X0, X31, 0
	760 Move X1, X31
	761 Call GlyphRect.get_y, X0
	762 Move W21, W0
	763 Add X0, X31, 0
	764 Move X1, X31
	765 Call GlyphRect.get_height, X0
	766 Move X8, [X19+256]
	767 Compare X8, 0
	768 JumpIfEqual {875}
	769 Move V10, [X8+268]
	770 Move W22, W0
	771 Add X0, X31, 0
	772 Move X1, X31
	773 Call GlyphRect.get_x, X0
	774 Move W20, W0
	775 Add X0, X31, 0
	776 Move X1, X31
	777 Call GlyphRect.get_width, X0
	778 Move X8, [X19+256]
	779 Compare X8, 0
	780 JumpIfEqual {875}
	781 Move X9, [X25]
	782 Compare X9, 0
	783 JumpIfEqual {875}
	784 Move X9, [X9+56]
	785 Compare X9, 0
	786 JumpIfEqual {875}
	787 NotImplemented "Instruction LDRSW not yet implemented."
	788 Move W11, [X9+24]
	789 NotImplemented "Instruction CMP not yet implemented."
	790 NotImplemented "Instruction SCVTF not yet implemented."
	791 Subtract S0, S0, S8
	792 NotImplemented "Instruction SCVTF not yet implemented."
	793 Subtract S0, S0, S9
	794 NotImplemented "Instruction FDIV not yet implemented."
	795 NotImplemented "Instruction SCVTF not yet implemented."
	796 Subtract S0, S0, S8
	797 NotImplemented "Instruction SCVTF not yet implemented."
	798 Subtract S0, S0, S9
	799 NotImplemented "Instruction FDIV not yet implemented."
	800 Move V1, [X8+264]
	801 Move W8, 376
	802 NotImplemented "Instruction MADD not yet implemented."
	803 Move [X8+124], S2
	804 Move [X8+132], S0
	805 Move X8, [X25]
	806 Compare X8, 0
	807 JumpIfEqual {875}
	808 Move X8, [X8+56]
	809 Compare X8, 0
	810 JumpIfEqual {875}
	811 NotImplemented "Instruction LDRSW not yet implemented."
	812 Move W10, [X8+24]
	813 NotImplemented "Instruction CMP not yet implemented."
	814 NotImplemented "Instruction SCVTF not yet implemented."
	815 Add S3, S3, S8
	816 NotImplemented "Instruction SCVTF not yet implemented."
	817 Add S3, S9, S3
	818 NotImplemented "Instruction SCVTF not yet implemented."
	819 Move W10, 376
	820 Add S3, S3, S4
	821 NotImplemented "Instruction MADD not yet implemented."
	822 NotImplemented "Instruction FDIV not yet implemented."
	823 Move [X8+164], S2
	824 Move [X8+172], S3
	825 Move X8, [X25]
	826 Compare X8, 0
	827 JumpIfEqual {875}
	828 Move X8, [X8+56]
	829 Compare X8, 0
	830 JumpIfEqual {875}
	831 NotImplemented "Instruction LDRSW not yet implemented."
	832 Move W10, [X8+24]
	833 NotImplemented "Instruction CMP not yet implemented."
	834 NotImplemented "Instruction SCVTF not yet implemented."
	835 Add S2, S2, S8
	836 NotImplemented "Instruction SCVTF not yet implemented."
	837 Add S2, S9, S2
	838 NotImplemented "Instruction SCVTF not yet implemented."
	839 Move W10, 376
	840 Add S2, S2, S4
	841 NotImplemented "Instruction MADD not yet implemented."
	842 NotImplemented "Instruction FDIV not yet implemented."
	843 Move [X8+204], S1
	844 Move [X8+212], S3
	845 Move X8, [X25]
	846 Compare X8, 0
	847 JumpIfEqual {875}
	848 Move X8, [X8+56]
	849 Compare X8, 0
	850 JumpIfEqual {875}
	851 NotImplemented "Instruction LDRSW not yet implemented."
	852 Move W10, [X8+24]
	853 NotImplemented "Instruction CMP not yet implemented."
	854 Move X20, [X31+128]
	855 Move X19, [X31+136]
	856 Move X22, [X31+112]
	857 Move X21, [X31+120]
	858 Move X24, [X31+96]
	859 Move X23, [X31+104]
	860 Move X26, [X31+80]
	861 Move X25, [X31+88]
	862 Move X30, [X31+64]
	863 Move D9, [X31+48]
	864 Move D8, [X31+56]
	865 Move D11, [X31+32]
	866 Move D10, [X31+40]
	867 Move D13, [X31+16]
	868 Move D12, [X31+24]
	869 Move W10, 376
	870 NotImplemented "Instruction MADD not yet implemented."
	871 Move [X8+244], S1
	872 Move [X8+252], S0
	873 Add X31, X31, 144
	874 Return 
	875 Call 0x1C17F20
	876 Call 0x1C17F28

Method: System.Void SaveSpriteVertexInfo(UnityEngine.Color32 vertexColor)

Disassembly:
	0x03B08434 STR S1, [X11 + 0x28]
	0x03B08438 LDR X11, [X25]
	0x03B0843C CBZ X11, 0x3B08DDC
	0x03B08440 LDR X11, [X11 + 0x60]
	0x03B08444 CBZ X11, 0x3B08DDC
	0x03B08448 LDR W12, [X11 + 0x18]
	0x03B0844C CMP W23, W12
	0x03B08450 B.CS 0x3B08DE0
	0x03B08454 LDR W12, [X9]
	0x03B08458 CMP W12, W20
	0x03B0845C B.LS 0x3B08DE0
	0x03B08460 MOVZ W12, 0x50
	0x03B08464 MADD X11, X23, X12, X11
	0x03B08468 LDR X12, [X11 + 0x30]
	0x03B0846C CBZ X12, 0x3B08DDC
	0x03B08470 LDR W13, [X12 + 0x18]
	0x03B08474 ADD W11, W24, 0x1
	0x03B08478 CMP W11, W13
	0x03B0847C B.CS 0x3B08DE0
	0x03B08480 MOVZ W13, 0x178
	0x03B08484 MADD X13, X26, X13, X8
	0x03B08488 LDR V0, [X13 + 0x98]
	0x03B0848C LDR V1, [X13 + 0xA0]
	0x03B08490 SXTW X11, W11
	0x03B08494 MOVZ W13, 0xC
	0x03B08498 MADD X12, X11, X13, X12
	0x03B0849C STR D0, [X12 + 0x20]
	0x03B084A0 STR S1, [X12 + 0x28]
	0x03B084A4 LDR X12, [X25]
	0x03B084A8 CBZ X12, 0x3B08DDC
	0x03B084AC LDR X12, [X12 + 0x60]
	0x03B084B0 CBZ X12, 0x3B08DDC
	0x03B084B4 LDR W13, [X12 + 0x18]
	0x03B084B8 CMP W23, W13
	0x03B084BC B.CS 0x3B08DE0
	0x03B084C0 LDR W13, [X9]
	0x03B084C4 CMP W13, W20
	0x03B084C8 B.LS 0x3B08DE0
	0x03B084CC MOVZ W13, 0x50
	0x03B084D0 MADD X12, X23, X13, X12
	0x03B084D4 LDR X13, [X12 + 0x30]
	0x03B084D8 CBZ X13, 0x3B08DDC
	0x03B084DC LDR W14, [X13 + 0x18]
	0x03B084E0 ADD W12, W24, 0x2
	0x03B084E4 CMP W12, W14
	0x03B084E8 B.CS 0x3B08DE0
	0x03B084EC MOVZ W14, 0x178
	0x03B084F0 MADD X14, X26, X14, X8
	0x03B084F4 LDR V0, [X14 + 0xC0]
	0x03B084F8 LDR V1, [X14 + 0xC8]
	0x03B084FC SXTW X12, W12
	0x03B08500 MOVZ W14, 0xC
	0x03B08504 MADD X13, X12, X14, X13
	0x03B08508 STR D0, [X13 + 0x20]
	0x03B0850C STR S1, [X13 + 0x28]
	0x03B08510 LDR X13, [X25]
	0x03B08514 CBZ X13, 0x3B08DDC
	0x03B08518 LDR X13, [X13 + 0x60]
	0x03B0851C CBZ X13, 0x3B08DDC
	0x03B08520 LDR W14, [X13 + 0x18]
	0x03B08524 CMP W23, W14
	0x03B08528 B.CS 0x3B08DE0
	0x03B0852C LDR W14, [X9]
	0x03B08530 CMP W14, W20
	0x03B08534 B.LS 0x3B08DE0
	0x03B08538 MOVZ W14, 0x50
	0x03B0853C MADD X13, X23, X14, X13
	0x03B08540 LDR X14, [X13 + 0x30]
	0x03B08544 CBZ X14, 0x3B08DDC
	0x03B08548 LDR W15, [X14 + 0x18]
	0x03B0854C ADD W13, W24, 0x3
	0x03B08550 CMP W13, W15
	0x03B08554 B.CS 0x3B08DE0
	0x03B08558 MOVZ W15, 0x178
	0x03B0855C MADD X15, X26, X15, X8
	0x03B08560 LDR V0, [X15 + 0xE8]
	0x03B08564 LDR V1, [X15 + 0xF0]
	0x03B08568 SXTW X13, W13
	0x03B0856C MOVZ W15, 0xC
	0x03B08570 MADD X14, X13, X15, X14
	0x03B08574 STR D0, [X14 + 0x20]
	0x03B08578 STR S1, [X14 + 0x28]
	0x03B0857C LDR X14, [X25]
	0x03B08580 CBZ X14, 0x3B08DDC
	0x03B08584 LDR X14, [X14 + 0x60]
	0x03B08588 CBZ X14, 0x3B08DDC
	0x03B0858C LDR W15, [X14 + 0x18]
	0x03B08590 CMP W23, W15
	0x03B08594 B.CS 0x3B08DE0
	0x03B08598 LDR W15, [X9]
	0x03B0859C CMP W15, W20
	0x03B085A0 B.LS 0x3B08DE0
	0x03B085A4 MOVZ W15, 0x50
	0x03B085A8 MOVZ W16, 0x178
	0x03B085AC MADD X14, X23, X15, X14
	0x03B085B0 LDR X15, [X14 + 0x48]
	0x03B085B4 NOP
	0x03B085B8 MADD X14, X26, X16, X8
	0x03B085BC LDR V0, [X14 + 0x7C]!
	0x03B085C0 CBZ X15, 0x3B08DDC
	0x03B085C4 LDR W16, [X15 + 0x18]
	0x03B085C8 CMP W24, W16
	0x03B085CC B.CS 0x3B08DE0
	0x03B085D0 ADD X15, X15, X10, 0x3, LSL
	0x03B085D4 STR D0, [X15 + 0x20]
	0x03B085D8 LDR X15, [X25]
	0x03B085DC CBZ X15, 0x3B08DDC
	0x03B085E0 LDR X15, [X15 + 0x60]
	0x03B085E4 CBZ X15, 0x3B08DDC
	0x03B085E8 LDR W16, [X15 + 0x18]
	0x03B085EC CMP W23, W16
	0x03B085F0 B.CS 0x3B08DE0
	0x03B085F4 LDR W16, [X9]
	0x03B085F8 CMP W16, W20
	0x03B085FC B.LS 0x3B08DE0
	0x03B08600 MOVZ W16, 0x50
	0x03B08604 MOVZ W17, 0x178
	0x03B08608 MADD X15, X23, X16, X15
	0x03B0860C LDR X16, [X15 + 0x48]
	0x03B08610 NOP
	0x03B08614 MADD X15, X26, X17, X8
	0x03B08618 LDR V0, [X15 + 0xA4]!
	0x03B0861C CBZ X16, 0x3B08DDC
	0x03B08620 LDR W17, [X16 + 0x18]
	0x03B08624 CMP W11, W17
	0x03B08628 B.CS 0x3B08DE0
	0x03B0862C ADD X16, X16, X11, 0x3, LSL
	0x03B08630 STR D0, [X16 + 0x20]
	0x03B08634 LDR X16, [X25]
	0x03B08638 CBZ X16, 0x3B08DDC
	0x03B0863C LDR X16, [X16 + 0x60]
	0x03B08640 CBZ X16, 0x3B08DDC
	0x03B08644 LDR W17, [X16 + 0x18]
	0x03B08648 CMP W23, W17
	0x03B0864C B.CS 0x3B08DE0
	0x03B08650 LDR W17, [X9]
	0x03B08654 CMP W17, W20
	0x03B08658 B.LS 0x3B08DE0
	0x03B0865C MOVZ W17, 0x50
	0x03B08660 MOVZ W0, 0x178
	0x03B08664 MADD X16, X23, X17, X16
	0x03B08668 LDR X17, [X16 + 0x48]
	0x03B0866C NOP
	0x03B08670 MADD X16, X26, X0, X8
	0x03B08674 LDR V0, [X16 + 0xCC]!
	0x03B08678 CBZ X17, 0x3B08DDC
	0x03B0867C LDR W0, [X17 + 0x18]
	0x03B08680 CMP W12, W0
	0x03B08684 B.CS 0x3B08DE0
	0x03B08688 ADD X17, X17, X12, 0x3, LSL
	0x03B0868C STR D0, [X17 + 0x20]
	0x03B08690 LDR X17, [X25]
	0x03B08694 CBZ X17, 0x3B08DDC
	0x03B08698 LDR X17, [X17 + 0x60]
	0x03B0869C CBZ X17, 0x3B08DDC
	0x03B086A0 LDR W0, [X17 + 0x18]
	0x03B086A4 CMP W23, W0
	0x03B086A8 B.CS 0x3B08DE0
	0x03B086AC LDR W0, [X9]
	0x03B086B0 CMP W0, W20
	0x03B086B4 B.LS 0x3B08DE0
	0x03B086B8 MOVZ W0, 0x50
	0x03B086BC MOVZ W1, 0x178
	0x03B086C0 MADD X17, X23, X0, X17
	0x03B086C4 LDR X0, [X17 + 0x48]
	0x03B086C8 NOP
	0x03B086CC MADD X17, X26, X1, X8
	0x03B086D0 LDR V0, [X17 + 0xF4]!
	0x03B086D4 CBZ X0, 0x3B08DDC
	0x03B086D8 LDR W1, [X0 + 0x18]
	0x03B086DC CMP W13, W1
	0x03B086E0 B.CS 0x3B08DE0
	0x03B086E4 ADD X0, X0, X13, 0x3, LSL
	0x03B086E8 STR D0, [X0 + 0x20]
	0x03B086EC TBZ X19, 0x0, 0x3B08840
	0x03B086F0 LDR X0, [X25]
	0x03B086F4 CBZ X0, 0x3B08DDC
	0x03B086F8 LDR X0, [X0 + 0x60]
	0x03B086FC CBZ X0, 0x3B08DDC
	0x03B08700 LDR W1, [X0 + 0x18]
	0x03B08704 CMP W23, W1
	0x03B08708 B.CS 0x3B08DE0
	0x03B0870C LDR W1, [X9]
	0x03B08710 CMP W1, W20
	0x03B08714 B.LS 0x3B08DE0
	0x03B08718 MOVZ W1, 0x50
	0x03B0871C MADD X0, X23, X1, X0
	0x03B08720 LDR X0, [X0 + 0x48]
	0x03B08724 CBZ X0, 0x3B08DDC
	0x03B08728 LDR W2, [X0 + 0x18]
	0x03B0872C ADD W1, W24, 0x4
	0x03B08730 CMP W1, W2
	0x03B08734 B.CS 0x3B08DE0
	0x03B08738 LDR V0, [X14]
	0x03B0873C ADD X14, X0, W1, 0x3, SXTW
	0x03B08740 STR D0, [X14 + 0x20]
	0x03B08744 LDR X14, [X25]
	0x03B08748 CBZ X14, 0x3B08DDC
	0x03B0874C LDR X14, [X14 + 0x60]
	0x03B08750 CBZ X14, 0x3B08DDC
	0x03B08754 LDR W0, [X14 + 0x18]
	0x03B08758 CMP W23, W0
	0x03B0875C B.CS 0x3B08DE0
	0x03B08760 LDR W0, [X9]
	0x03B08764 CMP W0, W20
	0x03B08768 B.LS 0x3B08DE0
	0x03B0876C MOVZ W0, 0x50
	0x03B08770 MADD X14, X23, X0, X14
	0x03B08774 LDR X14, [X14 + 0x48]
	0x03B08778 CBZ X14, 0x3B08DDC
	0x03B0877C LDR W1, [X14 + 0x18]
	0x03B08780 ADD W0, W24, 0x5
	0x03B08784 CMP W0, W1
	0x03B08788 B.CS 0x3B08DE0
	0x03B0878C LDR V0, [X15]
	0x03B08790 ADD X14, X14, W0, 0x3, SXTW
	0x03B08794 STR D0, [X14 + 0x20]
	0x03B08798 LDR X14, [X25]
	0x03B0879C CBZ X14, 0x3B08DDC
	0x03B087A0 LDR X14, [X14 + 0x60]
	0x03B087A4 CBZ X14, 0x3B08DDC
	0x03B087A8 LDR W15, [X14 + 0x18]
	0x03B087AC CMP W23, W15
	0x03B087B0 B.CS 0x3B08DE0
	0x03B087B4 LDR W15, [X9]
	0x03B087B8 CMP W15, W20
	0x03B087BC B.LS 0x3B08DE0
	0x03B087C0 MOVZ W15, 0x50
	0x03B087C4 MADD X14, X23, X15, X14
	0x03B087C8 LDR X14, [X14 + 0x48]
	0x03B087CC CBZ X14, 0x3B08DDC
	0x03B087D0 LDR W0, [X14 + 0x18]
	0x03B087D4 ADD W15, W24, 0x6
	0x03B087D8 CMP W15, W0
	0x03B087DC B.CS 0x3B08DE0
	0x03B087E0 LDR V0, [X16]
	0x03B087E4 ADD X14, X14, W15, 0x3, SXTW
	0x03B087E8 STR D0, [X14 + 0x20]
	0x03B087EC LDR X14, [X25]
	0x03B087F0 CBZ X14, 0x3B08DDC
	0x03B087F4 LDR X14, [X14 + 0x60]
	0x03B087F8 CBZ X14, 0x3B08DDC
	0x03B087FC LDR W15, [X14 + 0x18]
	0x03B08800 CMP W23, W15
	0x03B08804 B.CS 0x3B08DE0
	0x03B08808 LDR W15, [X9]
	0x03B0880C CMP W15, W20
	0x03B08810 B.LS 0x3B08DE0
	0x03B08814 MOVZ W15, 0x50
	0x03B08818 MADD X14, X23, X15, X14
	0x03B0881C LDR X14, [X14 + 0x48]
	0x03B08820 CBZ X14, 0x3B08DDC
	0x03B08824 LDR W16, [X14 + 0x18]
	0x03B08828 ADD W15, W24, 0x7
	0x03B0882C CMP W15, W16
	0x03B08830 B.CS 0x3B08DE0
	0x03B08834 LDR V0, [X17]
	0x03B08838 ADD X14, X14, W15, 0x3, SXTW
	0x03B0883C STR D0, [X14 + 0x20]
	0x03B08840 LDR X14, [X25]
	0x03B08844 CBZ X14, 0x3B08DDC
	0x03B08848 LDR X14, [X14 + 0x60]
	0x03B0884C CBZ X14, 0x3B08DDC
	0x03B08850 LDR W15, [X14 + 0x18]
	0x03B08854 CMP W23, W15
	0x03B08858 B.CS 0x3B08DE0
	0x03B0885C LDR W15, [X9]
	0x03B08860 CMP W15, W20
	0x03B08864 B.LS 0x3B08DE0
	0x03B08868 MOVZ W15, 0x50
	0x03B0886C MOVZ W16, 0x178
	0x03B08870 MADD X14, X23, X15, X14
	0x03B08874 LDR X15, [X14 + 0x50]
	0x03B08878 NOP
	0x03B0887C MADD X14, X26, X16, X8
	0x03B08880 LDR V0, [X14 + 0x84]!
	0x03B08884 CBZ X15, 0x3B08DDC
	0x03B08888 LDR W16, [X15 + 0x18]
	0x03B0888C CMP W24, W16
	0x03B08890 B.CS 0x3B08DE0
	0x03B08894 ADD X15, X15, X10, 0x3, LSL
	0x03B08898 STR D0, [X15 + 0x20]
	0x03B0889C LDR X15, [X25]
	0x03B088A0 CBZ X15, 0x3B08DDC
	0x03B088A4 LDR X15, [X15 + 0x60]
	0x03B088A8 CBZ X15, 0x3B08DDC
	0x03B088AC LDR W16, [X15 + 0x18]
	0x03B088B0 CMP W23, W16
	0x03B088B4 B.CS 0x3B08DE0
	0x03B088B8 LDR W16, [X9]
	0x03B088BC CMP W16, W20
	0x03B088C0 B.LS 0x3B08DE0
	0x03B088C4 MOVZ W16, 0x50
	0x03B088C8 MOVZ W17, 0x178
	0x03B088CC MADD X15, X23, X16, X15
	0x03B088D0 LDR X16, [X15 + 0x50]
	0x03B088D4 NOP
	0x03B088D8 MADD X15, X26, X17, X8
	0x03B088DC LDR V0, [X15 + 0xAC]!
	0x03B088E0 CBZ X16, 0x3B08DDC
	0x03B088E4 LDR W17, [X16 + 0x18]
	0x03B088E8 CMP W11, W17
	0x03B088EC B.CS 0x3B08DE0
	0x03B088F0 ADD X16, X16, X11, 0x3, LSL
	0x03B088F4 STR D0, [X16 + 0x20]
	0x03B088F8 LDR X16, [X25]
	0x03B088FC CBZ X16, 0x3B08DDC
	0x03B08900 LDR X16, [X16 + 0x60]
	0x03B08904 CBZ X16, 0x3B08DDC
	0x03B08908 LDR W17, [X16 + 0x18]
	0x03B0890C CMP W23, W17
	0x03B08910 B.CS 0x3B08DE0
	0x03B08914 LDR W17, [X9]
	0x03B08918 CMP W17, W20
	0x03B0891C B.LS 0x3B08DE0
	0x03B08920 MOVZ W17, 0x50
	0x03B08924 MOVZ W0, 0x178
	0x03B08928 MADD X16, X23, X17, X16
	0x03B0892C LDR X17, [X16 + 0x50]
	0x03B08930 NOP
	0x03B08934 MADD X16, X26, X0, X8
	0x03B08938 LDR V0, [X16 + 0xD4]!
	0x03B0893C CBZ X17, 0x3B08DDC
	0x03B08940 LDR W0, [X17 + 0x18]
	0x03B08944 CMP W12, W0
	0x03B08948 B.CS 0x3B08DE0
	0x03B0894C ADD X17, X17, X12, 0x3, LSL
	0x03B08950 STR D0, [X17 + 0x20]
	0x03B08954 LDR X17, [X25]
	0x03B08958 CBZ X17, 0x3B08DDC
	0x03B0895C LDR X17, [X17 + 0x60]
	0x03B08960 CBZ X17, 0x3B08DDC
	0x03B08964 LDR W0, [X17 + 0x18]
	0x03B08968 CMP W23, W0
	0x03B0896C B.CS 0x3B08DE0
	0x03B08970 LDR W0, [X9]
	0x03B08974 CMP W0, W20
	0x03B08978 B.LS 0x3B08DE0
	0x03B0897C MOVZ W0, 0x50
	0x03B08980 MOVZ W1, 0x178
	0x03B08984 MADD X17, X23, X0, X17
	0x03B08988 LDR X0, [X17 + 0x50]
	0x03B0898C NOP
	0x03B08990 MADD X17, X26, X1, X8
	0x03B08994 LDR V0, [X17 + 0xFC]!
	0x03B08998 CBZ X0, 0x3B08DDC
	0x03B0899C LDR W1, [X0 + 0x18]
	0x03B089A0 CMP W13, W1
	0x03B089A4 B.CS 0x3B08DE0
	0x03B089A8 ADD X0, X0, X13, 0x3, LSL
	0x03B089AC STR D0, [X0 + 0x20]
	0x03B089B0 TBZ X19, 0x0, 0x3B08B04
	0x03B089B4 LDR X0, [X25]
	0x03B089B8 CBZ X0, 0x3B08DDC
	0x03B089BC LDR X0, [X0 + 0x60]
	0x03B089C0 CBZ X0, 0x3B08DDC
	0x03B089C4 LDR W1, [X0 + 0x18]
	0x03B089C8 CMP W23, W1
	0x03B089CC B.CS 0x3B08DE0
	0x03B089D0 LDR W1, [X9]
	0x03B089D4 CMP W1, W20
	0x03B089D8 B.LS 0x3B08DE0
	0x03B089DC MOVZ W1, 0x50
	0x03B089E0 MADD X0, X23, X1, X0
	0x03B089E4 LDR X0, [X0 + 0x50]
	0x03B089E8 CBZ X0, 0x3B08DDC
	0x03B089EC LDR W2, [X0 + 0x18]
	0x03B089F0 ADD W1, W24, 0x4
	0x03B089F4 CMP W1, W2
	0x03B089F8 B.CS 0x3B08DE0
	0x03B089FC LDR V0, [X14]
	0x03B08A00 ADD X14, X0, W1, 0x3, SXTW
	0x03B08A04 STR D0, [X14 + 0x20]
	0x03B08A08 LDR X14, [X25]
	0x03B08A0C CBZ X14, 0x3B08DDC
	0x03B08A10 LDR X14, [X14 + 0x60]
	0x03B08A14 CBZ X14, 0x3B08DDC
	0x03B08A18 LDR W0, [X14 + 0x18]
	0x03B08A1C CMP W23, W0
	0x03B08A20 B.CS 0x3B08DE0
	0x03B08A24 LDR W0, [X9]
	0x03B08A28 CMP W0, W20
	0x03B08A2C B.LS 0x3B08DE0
	0x03B08A30 MOVZ W0, 0x50
	0x03B08A34 MADD X14, X23, X0, X14
	0x03B08A38 LDR X14, [X14 + 0x50]
	0x03B08A3C CBZ X14, 0x3B08DDC
	0x03B08A40 LDR W1, [X14 + 0x18]
	0x03B08A44 ADD W0, W24, 0x5
	0x03B08A48 CMP W0, W1
	0x03B08A4C B.CS 0x3B08DE0
	0x03B08A50 LDR V0, [X15]
	0x03B08A54 ADD X14, X14, W0, 0x3, SXTW
	0x03B08A58 STR D0, [X14 + 0x20]
	0x03B08A5C LDR X14, [X25]
	0x03B08A60 CBZ X14, 0x3B08DDC
	0x03B08A64 LDR X14, [X14 + 0x60]
	0x03B08A68 CBZ X14, 0x3B08DDC
	0x03B08A6C LDR W15, [X14 + 0x18]
	0x03B08A70 CMP W23, W15
	0x03B08A74 B.CS 0x3B08DE0
	0x03B08A78 LDR W15, [X9]
	0x03B08A7C CMP W15, W20
	0x03B08A80 B.LS 0x3B08DE0
	0x03B08A84 MOVZ W15, 0x50
	0x03B08A88 MADD X14, X23, X15, X14
	0x03B08A8C LDR X14, [X14 + 0x50]
	0x03B08A90 CBZ X14, 0x3B08DDC
	0x03B08A94 LDR W0, [X14 + 0x18]
	0x03B08A98 ADD W15, W24, 0x6
	0x03B08A9C CMP W15, W0
	0x03B08AA0 B.CS 0x3B08DE0
	0x03B08AA4 LDR V0, [X16]
	0x03B08AA8 ADD X14, X14, W15, 0x3, SXTW
	0x03B08AAC STR D0, [X14 + 0x20]
	0x03B08AB0 LDR X14, [X25]
	0x03B08AB4 CBZ X14, 0x3B08DDC
	0x03B08AB8 LDR X14, [X14 + 0x60]
	0x03B08ABC CBZ X14, 0x3B08DDC
	0x03B08AC0 LDR W15, [X14 + 0x18]
	0x03B08AC4 CMP W23, W15
	0x03B08AC8 B.CS 0x3B08DE0
	0x03B08ACC LDR W15, [X9]
	0x03B08AD0 CMP W15, W20
	0x03B08AD4 B.LS 0x3B08DE0
	0x03B08AD8 MOVZ W15, 0x50
	0x03B08ADC MADD X14, X23, X15, X14
	0x03B08AE0 LDR X14, [X14 + 0x50]
	0x03B08AE4 CBZ X14, 0x3B08DDC
	0x03B08AE8 LDR W16, [X14 + 0x18]
	0x03B08AEC ADD W15, W24, 0x7
	0x03B08AF0 CMP W15, W16
	0x03B08AF4 B.CS 0x3B08DE0
	0x03B08AF8 LDR V0, [X17]
	0x03B08AFC ADD X14, X14, W15, 0x3, SXTW
	0x03B08B00 STR D0, [X14 + 0x20]
	0x03B08B04 LDR X14, [X25]
	0x03B08B08 CBZ X14, 0x3B08DDC
	0x03B08B0C LDR X14, [X14 + 0x60]
	0x03B08B10 CBZ X14, 0x3B08DDC
	0x03B08B14 LDR W15, [X14 + 0x18]
	0x03B08B18 CMP W23, W15
	0x03B08B1C B.CS 0x3B08DE0
	0x03B08B20 LDR W15, [X9]
	0x03B08B24 CMP W15, W20
	0x03B08B28 B.LS 0x3B08DE0
	0x03B08B2C MOVZ W15, 0x50
	0x03B08B30 MADD X14, X23, X15, X14
	0x03B08B34 LDR X14, [X14 + 0x58]
	0x03B08B38 CBZ X14, 0x3B08DDC
	0x03B08B3C LDR W15, [X14 + 0x18]
	0x03B08B40 CMP W24, W15
	0x03B08B44 B.CS 0x3B08DE0
	0x03B08B48 MOVZ W15, 0x178
	0x03B08B4C MADD X15, X26, X15, X8
	0x03B08B50 LDR W15, [X15 + 0x94]
	0x03B08B54 ADD X10, X14, X10, 0x2, LSL
	0x03B08B58 STR W15, [X10 + 0x20]
	0x03B08B5C LDR X10, [X25]
	0x03B08B60 CBZ X10, 0x3B08DDC
	0x03B08B64 LDR X10, [X10 + 0x60]
	0x03B08B68 CBZ X10, 0x3B08DDC
	0x03B08B6C LDR W14, [X10 + 0x18]
	0x03B08B70 CMP W23, W14
	0x03B08B74 B.CS 0x3B08DE0
	0x03B08B78 LDR W14, [X9]
	0x03B08B7C CMP W14, W20
	0x03B08B80 B.LS 0x3B08DE0
	0x03B08B84 MOVZ W14, 0x50
	0x03B08B88 MADD X10, X23, X14, X10
	0x03B08B8C LDR X10, [X10 + 0x58]
	0x03B08B90 CBZ X10, 0x3B08DDC

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X30
	003 Move [X31+32], X28
	004 Move [X31+40], X27
	005 Move [X31+48], X26
	006 Move [X31+56], X25
	007 Move [X31+64], X24
	008 Move [X31+72], X23
	009 Move [X31+80], X22
	010 Move [X31+88], X21
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move X20, 0x8DB000
	014 Move W8, [X20+1628]
	015 Move X21, X1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x614000
	022 Move X0, [X0+1544]
	023 Call 0x1C17CF4
	024 Move X0, 0x5EC000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+1628], W8
	029 Move [X31], X31
	030 Move [X31+8], X31
	031 Move X8, [X19+872]
	032 Compare X8, 0
	033 JumpIfEqual {563}
	034 Move X8, [X8+56]
	035 Compare X8, 0
	036 JumpIfEqual {563}
	037 NotImplemented "Instruction LDRSW not yet implemented."
	038 Move W10, [X8+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W10, 376
	041 NotImplemented "Instruction MADD not yet implemented."
	042 Add X9, X8, 284
	043 Move X10, [X9]
	044 Move [X8+112], X10
	045 Move W9, [X9+8]
	046 Move [X8+120], W9
	047 Move X8, [X19+872]
	048 Compare X8, 0
	049 JumpIfEqual {563}
	050 Move X8, [X8+56]
	051 Compare X8, 0
	052 JumpIfEqual {563}
	053 NotImplemented "Instruction LDRSW not yet implemented."
	054 Move W10, [X8+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move W10, 376
	057 NotImplemented "Instruction MADD not yet implemented."
	058 Move X9, [X8+272]
	059 Move W10, [X8+280]
	060 Move [X8+152], X9
	061 Move [X8+160], W10
	062 Move X8, [X19+872]
	063 Compare X8, 0
	064 JumpIfEqual {563}
	065 Move X8, [X8+56]
	066 Compare X8, 0
	067 JumpIfEqual {563}
	068 NotImplemented "Instruction LDRSW not yet implemented."
	069 Move W10, [X8+24]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move W10, 376
	072 NotImplemented "Instruction MADD not yet implemented."
	073 Move X9, [X8+296]
	074 Move W10, [X8+304]
	075 Move [X8+192], X9
	076 Move [X8+200], W10
	077 Move X8, [X19+872]
	078 Compare X8, 0
	079 JumpIfEqual {563}
	080 Move X8, [X8+56]
	081 Compare X8, 0
	082 JumpIfEqual {563}
	083 NotImplemented "Instruction LDRSW not yet implemented."
	084 Move W10, [X8+24]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move W10, 376
	087 NotImplemented "Instruction MADD not yet implemented."
	088 Add X9, X8, 308
	089 Move X10, [X9]
	090 Move [X8+232], X10
	091 Move W9, [X9+8]
	092 Move [X8+240], W9
	093 Move W8, [X19+440]
	094 Compare W8, 0
	095 JumpIfEqual {100}
	096 Move W20, [X19+444]
	097 Move W8, 1
	098 Add X25, X19, 441
	099 Move [X19+441], W8
	100 Move W8, [X19+441]
	101 Move W20, [X19+444]
	102 Add X25, X19, 441
	103 Compare W8, 0
	104 JumpIfEqual {110}
	105 And X1, X21, 0
	106 Move W0, W20
	107 Move X2, X31
	108 Call TMPro_ExtensionMethods.Multiply, X0, X1
	109 Move X20, X0
	110 Move X26, 0x5EC000
	111 Move X26, [X26+1432]
	112 Move W10, [X19+327]
	113 Move X8, X21
	114 ShiftRight X8, 24
	115 And X8, X8, 0x7FFFFFFF
	116 Move W9, W20
	117 ShiftRight W9, 24
	118 And W9, W9, 0x7FFFFFFF
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move W11, [X19+352]
	121 NotImplemented "Instruction CSEL not yet implemented."
	122 NotImplemented "Instruction CMP not yet implemented."
	123 NotImplemented "Instruction CSEL not yet implemented."
	124 NotImplemented "Instruction BFM not yet implemented."
	125 Compare W11, 0
	126 JumpIfEqual {259}
	127 Move X0, [X26]
	128 Move X21, [X19+424]
	129 Move W8, [X0+224]
	130 Compare W8, 0
	131 JumpIfNotEqual {133}
	132 Call 0x1C17DFC
	133 Move X0, X21
	134 Move X1, X31
	135 Move X2, X31
	136 Call Object.op_Inequality, X0, X1
	137 Move W8, [X25]
	138 Move TEMP, X0
	139 And TEMP, TEMP, 1
	140 Compare TEMP, 1
	141 JumpIfNotEqual {203}
	142 Compare W8, 0
	143 JumpIfEqual {259}
	144 Move X8, [X19+424]
	145 Compare X8, 0
	146 JumpIfEqual {563}
	147 Move S0, [X8+60]
	148 Move S1, [X8+64]
	149 Move S2, [X8+68]
	150 Move S3, [X8+72]
	151 Move X0, X31
	152 Call 0x1E44664
	153 Move W24, W20
	154 And X1, X0, 0
	155 Move X0, X24
	156 Move X2, X31
	157 Call TMPro_ExtensionMethods.Multiply, X0, X1
	158 Move W8, [X25]
	159 Move X21, X0
	160 Compare W8, 0
	161 JumpIfEqual {560}
	162 Move X8, [X19+424]
	163 Compare X8, 0
	164 JumpIfEqual {563}
	165 Move S0, [X8+28]
	166 Move S1, [X8+32]
	167 Move S2, [X8+36]
	168 Move S3, [X8+40]
	169 Move X0, X31
	170 Call 0x1E44664
	171 And X1, X0, 0
	172 Move X0, X24
	173 Move X2, X31
	174 Call TMPro_ExtensionMethods.Multiply, X0, X1
	175 Move W8, [X25]
	176 Move X22, X0
	177 Compare W8, 0
	178 JumpIfEqual {562}
	179 Move X8, [X19+424]
	180 Compare X8, 0
	181 JumpIfEqual {563}
	182 Move S0, [X8+44]
	183 Move S1, [X8+48]
	184 Move S2, [X8+52]
	185 Move S3, [X8+56]
	186 Move X0, X31
	187 Call 0x1E44664
	188 And X1, X0, 0
	189 Move X0, X24
	190 Move X2, X31
	191 Call TMPro_ExtensionMethods.Multiply, X0, X1
	192 Move W8, [X25]
	193 Move X23, X0
	194 Compare W8, 0
	195 JumpIfEqual {262}
	196 Move X8, [X19+424]
	197 Compare X8, 0
	198 JumpIfEqual {563}
	199 Move S0, [X8+76]
	200 Move S1, [X8+80]
	201 Move S2, [X8+84]
	202 Move S3, [X8+88]
	203 Compare W8, 0
	204 JumpIfEqual {259}
	205 Move V0, [X19+392]
	206 Move V1, [X19+396]
	207 Move V2, [X19+400]
	208 Move V3, [X19+404]
	209 Move X0, X31
	210 Call 0x1E44664
	211 Move W24, W20
	212 And X1, X0, 0
	213 Move X0, X24
	214 Move X2, X31
	215 Call TMPro_ExtensionMethods.Multiply, X0, X1
	216 Move W8, [X19+441]
	217 Move W21, W0
	218 Compare W8, 0
	219 JumpIfEqual {560}
	220 Move V0, [X19+360]
	221 Move V1, [X19+364]
	222 Move V2, [X19+368]
	223 Move V3, [X19+372]
	224 Move X0, X31
	225 Call 0x1E44664
	226 And X1, X0, 0
	227 Move X0, X24
	228 Move X2, X31
	229 Call TMPro_ExtensionMethods.Multiply, X0, X1
	230 Move W8, [X19+441]
	231 Move W22, W0
	232 Compare W8, 0
	233 JumpIfEqual {562}
	234 Move V0, [X19+376]
	235 Move V1, [X19+380]
	236 Move V2, [X19+384]
	237 Move V3, [X19+388]
	238 Move X0, X31
	239 Call 0x1E44664
	240 And X1, X0, 0
	241 Move X0, X24
	242 Move X2, X31
	243 Call TMPro_ExtensionMethods.Multiply, X0, X1
	244 Move W8, [X19+441]
	245 Move W23, W0
	246 Compare W8, 0
	247 JumpIfEqual {262}
	248 Move V0, [X19+408]
	249 Move V1, [X19+412]
	250 Move V2, [X19+416]
	251 Move V3, [X19+420]
	252 Move X0, X31
	253 Call 0x1E44664
	254 And X1, X0, 0
	255 Move X0, X24
	256 Move X2, X31
	257 Call TMPro_ExtensionMethods.Multiply, X0, X1
	258 Move W20, W0
	259 Move W23, W20
	260 Move W22, W20
	261 Move W21, W20
	262 Move X0, [X26]
	263 Move X24, [X19+1408]
	264 Move W8, [X0+224]
	265 Compare W8, 0
	266 JumpIfNotEqual {268}
	267 Call 0x1C17DFC
	268 Move X0, X24
	269 Move X1, X31
	270 Move X2, X31
	271 Call Object.op_Inequality, X0, X1
	272 Move TEMP, X0
	273 And TEMP, TEMP, 1
	274 Compare TEMP, 1
	275 JumpIfNotEqual {348}
	276 Move W8, [X25]
	277 Compare W8, 0
	278 JumpIfEqual {348}
	279 Move X8, [X19+1408]
	280 Compare X8, 0
	281 JumpIfEqual {563}
	282 Move S0, [X8+60]
	283 Move S1, [X8+64]
	284 Move S2, [X8+68]
	285 Move S3, [X8+72]
	286 Move X0, X31
	287 Call 0x1E44664
	288 Move W8, W21
	289 And X1, X0, 0
	290 Move X0, X8
	291 Move X2, X31
	292 Call TMPro_ExtensionMethods.Multiply, X0, X1
	293 Move W8, [X25]
	294 Move W21, W0
	295 Compare W8, 0
	296 JumpIfEqual {348}
	297 Move X8, [X19+1408]
	298 Compare X8, 0
	299 JumpIfEqual {563}
	300 Move S0, [X8+28]
	301 Move S1, [X8+32]
	302 Move S2, [X8+36]
	303 Move S3, [X8+40]
	304 Move X0, X31
	305 Call 0x1E44664
	306 Move W8, W22
	307 And X1, X0, 0
	308 Move X0, X8
	309 Move X2, X31
	310 Call TMPro_ExtensionMethods.Multiply, X0, X1
	311 Move W8, [X25]
	312 Move W22, W0
	313 Compare W8, 0
	314 JumpIfEqual {348}
	315 Move X8, [X19+1408]
	316 Compare X8, 0
	317 JumpIfEqual {563}
	318 Move S0, [X8+44]
	319 Move S1, [X8+48]
	320 Move S2, [X8+52]
	321 Move S3, [X8+56]
	322 Move X0, X31
	323 Call 0x1E44664
	324 Move W8, W23
	325 And X1, X0, 0
	326 Move X0, X8
	327 Move X2, X31
	328 Call TMPro_ExtensionMethods.Multiply, X0, X1
	329 Move W8, [X25]
	330 Move W23, W0
	331 Compare W8, 0
	332 JumpIfEqual {348}
	333 Move X8, [X19+1408]
	334 Compare X8, 0
	335 JumpIfEqual {563}
	336 Move S0, [X8+76]
	337 Move S1, [X8+80]
	338 Move S2, [X8+84]
	339 Move S3, [X8+88]
	340 Move X0, X31
	341 Call 0x1E44664
	342 Move W8, W20
	343 And X1, X0, 0
	344 Move X0, X8
	345 Move X2, X31
	346 Call TMPro_ExtensionMethods.Multiply, X0, X1
	347 Move W20, W0
	348 Move X8, [X19+872]
	349 Compare X8, 0
	350 JumpIfEqual {563}
	351 Move X8, [X8+56]
	352 Compare X8, 0
	353 JumpIfEqual {563}
	354 NotImplemented "Instruction LDRSW not yet implemented."
	355 Move W10, [X8+24]
	356 NotImplemented "Instruction CMP not yet implemented."
	357 Move W10, 376
	358 NotImplemented "Instruction MADD not yet implemented."
	359 Move [X8+148], W21
	360 Move X8, [X19+872]
	361 Compare X8, 0
	362 JumpIfEqual {563}
	363 Move X8, [X8+56]
	364 Compare X8, 0
	365 JumpIfEqual {563}
	366 NotImplemented "Instruction LDRSW not yet implemented."
	367 Move W10, [X8+24]
	368 NotImplemented "Instruction CMP not yet implemented."
	369 Move W10, 376
	370 NotImplemented "Instruction MADD not yet implemented."
	371 Move [X8+188], W22
	372 Move X8, [X19+872]
	373 Compare X8, 0
	374 JumpIfEqual {563}
	375 Move X8, [X8+56]
	376 Compare X8, 0
	377 JumpIfEqual {563}
	378 NotImplemented "Instruction LDRSW not yet implemented."
	379 Move W10, [X8+24]
	380 NotImplemented "Instruction CMP not yet implemented."
	381 Move W10, 376
	382 NotImplemented "Instruction MADD not yet implemented."
	383 Move [X8+228], W23
	384 Move X8, [X19+872]
	385 Compare X8, 0
	386 JumpIfEqual {563}
	387 Move X8, [X8+56]
	388 Compare X8, 0
	389 JumpIfEqual {563}
	390 NotImplemented "Instruction LDRSW not yet implemented."
	391 Move W10, [X8+24]
	392 NotImplemented "Instruction CMP not yet implemented."
	393 Move W10, 376
	394 NotImplemented "Instruction MADD not yet implemented."
	395 Move [X8+268], W20
	396 Move X8, [X19+1608]
	397 Compare X8, 0
	398 JumpIfEqual {563}
	399 Move X0, [X8+32]
	400 Compare X0, 0
	401 JumpIfEqual {563}
	402 Move X20, 0x614000
	403 Move X20, [X20+1544]
	404 Move X1, X31
	405 Call Glyph.get_glyphRect, X0
	406 Move X8, X0
	407 Move X0, [X20]
	408 Move [X31], X8
	409 Move [X31+8], X1
	410 Move W8, [X0+224]
	411 Compare W8, 0
	412 JumpIfNotEqual {414}
	413 Call 0x1C17DFC
	414 Add X0, X31, 0
	415 Move X1, X31
	416 Call GlyphRect.get_x, X0
	417 Move X8, [X19+1688]
	418 Compare X8, 0
	419 JumpIfEqual {563}
	420 Move W20, W0
	421 Move X0, [X8+168]
	422 Compare X0, 0
	423 JumpIfEqual {563}
	424 Move X8, [X0]
	425 Move X9, [X8+392]
	426 Move X1, [X8+400]
	427 NotImplemented "Instruction BLR not yet implemented."
	428 Move W21, W0
	429 Add X0, X31, 0
	430 Move X1, X31
	431 Call GlyphRect.get_y, X0
	432 Move X8, [X19+1688]
	433 Compare X8, 0
	434 JumpIfEqual {563}
	435 Move W23, W0
	436 Move X0, [X8+168]
	437 Compare X0, 0
	438 JumpIfEqual {563}
	439 Move X8, [X0]
	440 Move X9, [X8+424]
	441 Move X1, [X8+432]
	442 NotImplemented "Instruction BLR not yet implemented."
	443 Move W27, W0
	444 Add X0, X31, 0
	445 Move X1, X31
	446 Call GlyphRect.get_y, X0
	447 Move W22, W0
	448 Add X0, X31, 0
	449 Move X1, X31
	450 Call GlyphRect.get_height, X0
	451 Move X8, [X19+1688]
	452 Compare X8, 0
	453 JumpIfEqual {563}
	454 Move W25, W0
	455 Move X0, [X8+168]
	456 Compare X0, 0
	457 JumpIfEqual {563}
	458 Move X8, [X0]
	459 Move X9, [X8+424]
	460 Move X1, [X8+432]
	461 NotImplemented "Instruction BLR not yet implemented."
	462 Move W28, W0
	463 Add X0, X31, 0
	464 Move X1, X31
	465 Call GlyphRect.get_x, X0
	466 Move W24, W0
	467 Add X0, X31, 0
	468 Move X1, X31
	469 Call GlyphRect.get_width, X0
	470 Move X8, [X19+1688]
	471 Compare X8, 0
	472 JumpIfEqual {563}
	473 Move W26, W0
	474 Move X0, [X8+168]
	475 Compare X0, 0
	476 JumpIfEqual {563}
	477 Move X8, [X0]
	478 Move X9, [X8+392]
	479 Move X1, [X8+400]
	480 NotImplemented "Instruction BLR not yet implemented."
	481 Move X8, [X19+872]
	482 Compare X8, 0
	483 JumpIfEqual {563}
	484 Move X8, [X8+56]
	485 Compare X8, 0
	486 JumpIfEqual {563}
	487 NotImplemented "Instruction LDRSW not yet implemented."
	488 Move W10, [X8+24]
	489 NotImplemented "Instruction CMP not yet implemented."
	490 NotImplemented "Instruction SCVTF not yet implemented."
	491 NotImplemented "Instruction SCVTF not yet implemented."
	492 NotImplemented "Instruction SCVTF not yet implemented."
	493 NotImplemented "Instruction SCVTF not yet implemented."
	494 Move W10, 376
	495 NotImplemented "Instruction FDIV not yet implemented."
	496 NotImplemented "Instruction FDIV not yet implemented."
	497 NotImplemented "Instruction MADD not yet implemented."
	498 Move [X8+124], S1
	499 Move [X8+132], S0
	500 Move X8, [X19+872]
	501 Compare X8, 0
	502 JumpIfEqual {563}
	503 Move X8, [X8+56]
	504 Compare X8, 0
	505 JumpIfEqual {563}
	506 NotImplemented "Instruction LDRSW not yet implemented."
	507 Move W10, [X8+24]
	508 NotImplemented "Instruction CMP not yet implemented."
	509 Add W10, W25, W22
	510 NotImplemented "Instruction SCVTF not yet implemented."
	511 Move W11, 376
	512 NotImplemented "Instruction SCVTF not yet implemented."
	513 NotImplemented "Instruction MADD not yet implemented."
	514 NotImplemented "Instruction FDIV not yet implemented."
	515 Move [X8+164], S1
	516 Move [X8+172], S2
	517 Move X8, [X19+872]
	518 Compare X8, 0
	519 JumpIfEqual {563}
	520 Move X8, [X8+56]
	521 Compare X8, 0
	522 JumpIfEqual {563}
	523 NotImplemented "Instruction LDRSW not yet implemented."
	524 Move W10, [X8+24]
	525 NotImplemented "Instruction CMP not yet implemented."
	526 Add W10, W26, W24
	527 NotImplemented "Instruction SCVTF not yet implemented."
	528 Move W11, 376
	529 NotImplemented "Instruction SCVTF not yet implemented."
	530 NotImplemented "Instruction MADD not yet implemented."
	531 NotImplemented "Instruction FDIV not yet implemented."
	532 Move [X8+204], S1
	533 Move [X8+212], S2
	534 Move X8, [X19+872]
	535 Compare X8, 0
	536 JumpIfEqual {563}
	537 Move X8, [X8+56]
	538 Compare X8, 0
	539 JumpIfEqual {563}
	540 NotImplemented "Instruction LDRSW not yet implemented."
	541 Move W10, [X8+24]
	542 NotImplemented "Instruction CMP not yet implemented."
	543 Move X20, [X31+96]
	544 Move X19, [X31+104]
	545 Move X22, [X31+80]
	546 Move X21, [X31+88]
	547 Move X24, [X31+64]
	548 Move X23, [X31+72]
	549 Move X26, [X31+48]
	550 Move X25, [X31+56]
	551 Move X28, [X31+32]
	552 Move X27, [X31+40]
	553 Move X30, [X31+16]
	554 Move W10, 376
	555 NotImplemented "Instruction MADD not yet implemented."
	556 Move [X8+244], S1
	557 Move [X8+252], S0
	558 Add X31, X31, 112
	559 Return 
	560 Move W23, W20
	561 Move W22, W20
	562 Move W23, W20
	563 Call 0x1C17F20
	564 Call 0x1C17F28

Method: System.Void FillCharacterVertexBuffers(System.Int32 i, System.Int32 index_X4)

Disassembly:
	0x03B08B94 LDR W14, [X10 + 0x18]
	0x03B08B98 CMP W11, W14
	0x03B08B9C B.CS 0x3B08DE0
	0x03B08BA0 MOVZ W14, 0x178
	0x03B08BA4 MADD X14, X26, X14, X8
	0x03B08BA8 LDR W14, [X14 + 0xBC]
	0x03B08BAC ADD X10, X10, X11, 0x2, LSL
	0x03B08BB0 STR W14, [X10 + 0x20]
	0x03B08BB4 LDR X10, [X25]
	0x03B08BB8 CBZ X10, 0x3B08DDC
	0x03B08BBC LDR X10, [X10 + 0x60]
	0x03B08BC0 CBZ X10, 0x3B08DDC
	0x03B08BC4 LDR W11, [X10 + 0x18]
	0x03B08BC8 CMP W23, W11
	0x03B08BCC B.CS 0x3B08DE0
	0x03B08BD0 LDR W11, [X9]
	0x03B08BD4 CMP W11, W20
	0x03B08BD8 B.LS 0x3B08DE0
	0x03B08BDC MOVZ W11, 0x50
	0x03B08BE0 MADD X10, X23, X11, X10
	0x03B08BE4 LDR X10, [X10 + 0x58]
	0x03B08BE8 CBZ X10, 0x3B08DDC
	0x03B08BEC LDR W11, [X10 + 0x18]
	0x03B08BF0 CMP W12, W11
	0x03B08BF4 B.CS 0x3B08DE0
	0x03B08BF8 MOVZ W11, 0x178
	0x03B08BFC MADD X11, X26, X11, X8
	0x03B08C00 LDR W11, [X11 + 0xE4]
	0x03B08C04 ADD X10, X10, X12, 0x2, LSL
	0x03B08C08 STR W11, [X10 + 0x20]
	0x03B08C0C LDR X10, [X25]
	0x03B08C10 CBZ X10, 0x3B08DDC
	0x03B08C14 LDR X10, [X10 + 0x60]
	0x03B08C18 CBZ X10, 0x3B08DDC
	0x03B08C1C LDR W11, [X10 + 0x18]
	0x03B08C20 CMP W23, W11
	0x03B08C24 B.CS 0x3B08DE0
	0x03B08C28 LDR W9, [X9]
	0x03B08C2C CMP W9, W20
	0x03B08C30 B.LS 0x3B08DE0
	0x03B08C34 MOVZ W9, 0x50
	0x03B08C38 MADD X9, X23, X9, X10
	0x03B08C3C LDR X9, [X9 + 0x58]
	0x03B08C40 CBZ X9, 0x3B08DDC
	0x03B08C44 LDR W10, [X9 + 0x18]
	0x03B08C48 CMP W13, W10
	0x03B08C4C B.CS 0x3B08DE0
	0x03B08C50 MOVZ W10, 0x178
	0x03B08C54 MADD X8, X26, X10, X8
	0x03B08C58 LDR W8, [X8 + 0x10C]
	0x03B08C5C ADD X9, X9, X13, 0x2, LSL
	0x03B08C60 STR W8, [X9 + 0x20]
	0x03B08C64 TBZ X19, 0x0, 0x3B08D88
	0x03B08C68 LDR X8, [X25]
	0x03B08C6C CBZ X8, 0x3B08DDC
	0x03B08C70 LDR X8, [X8 + 0x60]
	0x03B08C74 CBZ X8, 0x3B08DDC
	0x03B08C78 LDR W9, [X8 + 0x18]
	0x03B08C7C CMP W23, W9
	0x03B08C80 B.CS 0x3B08DE0
	0x03B08C84 MOVZ W9, 0x50
	0x03B08C88 MADD X8, X23, X9, X8
	0x03B08C8C LDR X8, [X8 + 0x58]
	0x03B08C90 CBZ X8, 0x3B08DDC
	0x03B08C94 LDR W10, [X8 + 0x18]
	0x03B08C98 ADD W9, W24, 0x4
	0x03B08C9C CMP W9, W10
	0x03B08CA0 B.CS 0x3B08DE0
	0x03B08CA4 ADD X8, X8, W9, 0x2, SXTW
	0x03B08CA8 MOVN W9, 0x7F0000
	0x03B08CAC STR W9, [X8 + 0x20]
	0x03B08CB0 LDR X8, [X25]
	0x03B08CB4 CBZ X8, 0x3B08DDC
	0x03B08CB8 LDR X8, [X8 + 0x60]
	0x03B08CBC CBZ X8, 0x3B08DDC
	0x03B08CC0 LDR W9, [X8 + 0x18]
	0x03B08CC4 CMP W23, W9
	0x03B08CC8 B.CS 0x3B08DE0
	0x03B08CCC MOVZ W9, 0x50
	0x03B08CD0 MADD X8, X23, X9, X8
	0x03B08CD4 LDR X8, [X8 + 0x58]
	0x03B08CD8 CBZ X8, 0x3B08DDC
	0x03B08CDC LDR W10, [X8 + 0x18]
	0x03B08CE0 ADD W9, W24, 0x5
	0x03B08CE4 CMP W9, W10
	0x03B08CE8 B.CS 0x3B08DE0
	0x03B08CEC ADD X8, X8, W9, 0x2, SXTW
	0x03B08CF0 MOVN W9, 0x7F0000
	0x03B08CF4 STR W9, [X8 + 0x20]
	0x03B08CF8 LDR X8, [X25]
	0x03B08CFC CBZ X8, 0x3B08DDC
	0x03B08D00 LDR X8, [X8 + 0x60]
	0x03B08D04 CBZ X8, 0x3B08DDC
	0x03B08D08 LDR W9, [X8 + 0x18]
	0x03B08D0C CMP W23, W9
	0x03B08D10 B.CS 0x3B08DE0
	0x03B08D14 MOVZ W9, 0x50
	0x03B08D18 MADD X8, X23, X9, X8
	0x03B08D1C LDR X8, [X8 + 0x58]
	0x03B08D20 CBZ X8, 0x3B08DDC
	0x03B08D24 LDR W10, [X8 + 0x18]
	0x03B08D28 ADD W9, W24, 0x6
	0x03B08D2C CMP W9, W10
	0x03B08D30 B.CS 0x3B08DE0
	0x03B08D34 ADD X8, X8, W9, 0x2, SXTW
	0x03B08D38 MOVN W9, 0x7F0000
	0x03B08D3C STR W9, [X8 + 0x20]
	0x03B08D40 LDR X8, [X25]
	0x03B08D44 CBZ X8, 0x3B08DDC
	0x03B08D48 LDR X8, [X8 + 0x60]
	0x03B08D4C CBZ X8, 0x3B08DDC
	0x03B08D50 LDR W9, [X8 + 0x18]
	0x03B08D54 CMP W23, W9
	0x03B08D58 B.CS 0x3B08DE0
	0x03B08D5C MOVZ W9, 0x50
	0x03B08D60 MADD X8, X23, X9, X8
	0x03B08D64 LDR X8, [X8 + 0x58]
	0x03B08D68 CBZ X8, 0x3B08DDC
	0x03B08D6C LDR W10, [X8 + 0x18]
	0x03B08D70 ADD W9, W24, 0x7
	0x03B08D74 CMP W9, W10
	0x03B08D78 B.CS 0x3B08DE0
	0x03B08D7C ADD X8, X8, W9, 0x2, SXTW
	0x03B08D80 MOVN W9, 0x7F0000
	0x03B08D84 STR W9, [X8 + 0x20]
	0x03B08D88 LDR X8, [X25]
	0x03B08D8C CBZ X8, 0x3B08DDC
	0x03B08D90 LDR X8, [X8 + 0x60]
	0x03B08D94 CBZ X8, 0x3B08DDC
	0x03B08D98 LDR W9, [X8 + 0x18]
	0x03B08D9C CMP W23, W9
	0x03B08DA0 B.CS 0x3B08DE0
	0x03B08DA4 ANDS W31, W19, 0x1
	0x03B08DA8 MOVZ W9, 0x4
	0x03B08DAC MOVZ W10, 0x8
	0x03B08DB0 MOVZ W11, 0x50
	0x03B08DB4 CSEL W9, W10, W9, NE
	0x03B08DB8 ADD W9, W24, W9
	0x03B08DBC MADD X8, X23, X11, X8
	0x03B08DC0 LDP X20, X19, [X31 + 0x40]
	0x03B08DC4 LDP X22, X21, [X31 + 0x30]
	0x03B08DC8 LDP X24, X23, [X31 + 0x20]
	0x03B08DCC LDP X26, X25, [X31 + 0x10]
	0x03B08DD0 STR W9, [X8 + 0x28]
	0x03B08DD4 LDR X30, [X31], #0x50
	0x03B08DD8 RET
	0x03B08DDC BL 0x1C16F20
	0x03B08DE0 BL 0x1C16F28
	0x03B08DE4 STR X30, [X31 - 0x50]!
	0x03B08DE8 STP X26, X25, [X31 + 0x10]
	0x03B08DEC STP X24, X23, [X31 + 0x20]
	0x03B08DF0 STP X22, X21, [X31 + 0x30]
	0x03B08DF4 STP X20, X19, [X31 + 0x40]
	0x03B08DF8 ADRP X21, 0x8DA000
	0x03B08DFC LDRB W8, [X21 + 0x65F]
	0x03B08E00 MOV W20, W1
	0x03B08E04 MOV X19, X0
	0x03B08E08 TBNZ X8, 0x0, 0x3B08E20
	0x03B08E0C ADRP X0, 0x650000
	0x03B08E10 LDR X0, [X0 + 0x348]
	0x03B08E14 BL 0x1C16CF4
	0x03B08E18 MOVZ W8, 0x1
	0x03B08E1C STRB W8, [X21 + 0x65F]
	0x03B08E20 LDR X9, [X19 + 0x368]
	0x03B08E24 CBZ X9, 0x3B094FC
	0x03B08E28 LDR X8, [X9 + 0x38]
	0x03B08E2C CBZ X8, 0x3B094FC
	0x03B08E30 LDR W10, [X8 + 0x18]
	0x03B08E34 CMP W10, W20
	0x03B08E38 B.LS 0x3B09500
	0x03B08E3C LDR X25, [X9 + 0x60]
	0x03B08E40 CBZ X25, 0x3B094FC
	0x03B08E44 SXTW X23, W20
	0x03B08E48 MOVZ W10, 0x178
	0x03B08E4C MADD X8, X23, X10, X8
	0x03B08E50 LDRSW X22, [X8 + 0x58]
	0x03B08E54 LDR W8, [X25 + 0x18]
	0x03B08E58 CMP W22, W8
	0x03B08E5C B.CS 0x3B09500
	0x03B08E60 MOVZ W8, 0x50
	0x03B08E64 MADD X26, X22, X8, X25
	0x03B08E68 LDR X8, [X26 + 0x30]
	0x03B08E6C CBZ X8, 0x3B094FC
	0x03B08E70 LDR W24, [X26 + 0x28]
	0x03B08E74 LDR W8, [X8 + 0x18]
	0x03B08E78 CMP W24, W8
	0x03B08E7C B.LT 0x3B08EE0
	0x03B08E80 ADD W8, W24, 0x4
	0x03B08E84 ADD W9, W24, 0x7
	0x03B08E88 CMP W8, 0x0
	0x03B08E8C CSEL W8, W9, W8, LT
	0x03B08E90 SBFM W0, W8, 0x2, 0x1F
	0x03B08E94 MOV X1, X31
	0x03B08E98 BL 0x3C2B340
	0x03B08E9C ADRP X8, 0x650000
	0x03B08EA0 LDR X8, [X8 + 0x348]
	0x03B08EA4 MOV W21, W0
	0x03B08EA8 LDR X8, [X8]
	0x03B08EAC LDR W9, [X8 + 0xE0]
	0x03B08EB0 CBNZ W9, 0x3B08EBC
	0x03B08EB4 MOV X0, X8
	0x03B08EB8 BL 0x1C16DFC
	0x03B08EBC LDR W8, [X25 + 0x18]
	0x03B08EC0 CMP W22, W8
	0x03B08EC4 B.CS 0x3B09500
	0x03B08EC8 ADD X0, X26, 0x20
	0x03B08ECC MOV W1, W21
	0x03B08ED0 MOV X2, X31
	0x03B08ED4 BL 0x3B11BD0
	0x03B08ED8 LDR X9, [X19 + 0x368]
	0x03B08EDC CBZ X9, 0x3B094FC
	0x03B08EE0 LDR X8, [X9 + 0x38]
	0x03B08EE4 CBZ X8, 0x3B094FC
	0x03B08EE8 LDR W10, [X8 + 0x18]
	0x03B08EEC CMP W10, W20
	0x03B08EF0 B.LS 0x3B09500
	0x03B08EF4 MOVZ W10, 0x178
	0x03B08EF8 MADD X10, X23, X10, X8
	0x03B08EFC STR W24, [X10 + 0x6C]
	0x03B08F00 LDR X9, [X9 + 0x60]
	0x03B08F04 CBZ X9, 0x3B094FC
	0x03B08F08 LDR W10, [X9 + 0x18]
	0x03B08F0C CMP W22, W10
	0x03B08F10 B.CS 0x3B09500
	0x03B08F14 MOVZ W10, 0x50
	0x03B08F18 MADD X9, X22, X10, X9
	0x03B08F1C LDR X10, [X9 + 0x30]
	0x03B08F20 CBZ X10, 0x3B094FC
	0x03B08F24 LDR W9, [X10 + 0x18]
	0x03B08F28 CMP W24, W9
	0x03B08F2C B.CS 0x3B09500
	0x03B08F30 MOVZ W11, 0x178
	0x03B08F34 MADD X11, X23, X11, X8
	0x03B08F38 LDR V0, [X11 + 0x70]
	0x03B08F3C LDR V1, [X11 + 0x78]
	0x03B08F40 SXTW X9, W24
	0x03B08F44 MOVZ W11, 0xC
	0x03B08F48 MADD X10, X9, X11, X10
	0x03B08F4C STR D0, [X10 + 0x20]
	0x03B08F50 STR S1, [X10 + 0x28]
	0x03B08F54 LDR X10, [X19 + 0x368]
	0x03B08F58 CBZ X10, 0x3B094FC
	0x03B08F5C LDR X10, [X10 + 0x60]
	0x03B08F60 CBZ X10, 0x3B094FC
	0x03B08F64 LDR W11, [X10 + 0x18]
	0x03B08F68 CMP W22, W11
	0x03B08F6C B.CS 0x3B09500
	0x03B08F70 LDR W11, [X8 + 0x18]
	0x03B08F74 CMP W11, W20
	0x03B08F78 B.LS 0x3B09500
	0x03B08F7C MOVZ W11, 0x50
	0x03B08F80 MADD X10, X22, X11, X10
	0x03B08F84 LDR X11, [X10 + 0x30]
	0x03B08F88 CBZ X11, 0x3B094FC
	0x03B08F8C LDR W12, [X11 + 0x18]
	0x03B08F90 ADD W10, W24, 0x1
	0x03B08F94 CMP W10, W12
	0x03B08F98 B.CS 0x3B09500
	0x03B08F9C MOVZ W12, 0x178
	0x03B08FA0 MADD X12, X23, X12, X8
	0x03B08FA4 LDR V0, [X12 + 0x98]
	0x03B08FA8 LDR V1, [X12 + 0xA0]
	0x03B08FAC SXTW X10, W10
	0x03B08FB0 MOVZ W12, 0xC
	0x03B08FB4 MADD X11, X10, X12, X11
	0x03B08FB8 STR D0, [X11 + 0x20]
	0x03B08FBC STR S1, [X11 + 0x28]
	0x03B08FC0 LDR X11, [X19 + 0x368]
	0x03B08FC4 CBZ X11, 0x3B094FC
	0x03B08FC8 LDR X11, [X11 + 0x60]
	0x03B08FCC CBZ X11, 0x3B094FC
	0x03B08FD0 LDR W12, [X11 + 0x18]
	0x03B08FD4 CMP W22, W12
	0x03B08FD8 B.CS 0x3B09500
	0x03B08FDC LDR W12, [X8 + 0x18]
	0x03B08FE0 CMP W12, W20
	0x03B08FE4 B.LS 0x3B09500
	0x03B08FE8 MOVZ W12, 0x50
	0x03B08FEC MADD X11, X22, X12, X11
	0x03B08FF0 LDR X12, [X11 + 0x30]
	0x03B08FF4 CBZ X12, 0x3B094FC
	0x03B08FF8 LDR W13, [X12 + 0x18]
	0x03B08FFC ADD W11, W24, 0x2
	0x03B09000 CMP W11, W13
	0x03B09004 B.CS 0x3B09500
	0x03B09008 MOVZ W13, 0x178
	0x03B0900C MADD X13, X23, X13, X8
	0x03B09010 LDR V0, [X13 + 0xC0]
	0x03B09014 LDR V1, [X13 + 0xC8]
	0x03B09018 SXTW X11, W11
	0x03B0901C MOVZ W13, 0xC
	0x03B09020 MADD X12, X11, X13, X12
	0x03B09024 STR D0, [X12 + 0x20]
	0x03B09028 STR S1, [X12 + 0x28]
	0x03B0902C LDR X12, [X19 + 0x368]
	0x03B09030 CBZ X12, 0x3B094FC
	0x03B09034 LDR X12, [X12 + 0x60]
	0x03B09038 CBZ X12, 0x3B094FC
	0x03B0903C LDR W13, [X12 + 0x18]
	0x03B09040 CMP W22, W13
	0x03B09044 B.CS 0x3B09500
	0x03B09048 LDR W13, [X8 + 0x18]
	0x03B0904C CMP W13, W20
	0x03B09050 B.LS 0x3B09500
	0x03B09054 MOVZ W13, 0x50
	0x03B09058 MADD X12, X22, X13, X12
	0x03B0905C LDR X13, [X12 + 0x30]
	0x03B09060 CBZ X13, 0x3B094FC
	0x03B09064 LDR W14, [X13 + 0x18]
	0x03B09068 ADD W12, W24, 0x3
	0x03B0906C CMP W12, W14
	0x03B09070 B.CS 0x3B09500
	0x03B09074 MOVZ W14, 0x178
	0x03B09078 MADD X14, X23, X14, X8
	0x03B0907C LDR V0, [X14 + 0xE8]
	0x03B09080 LDR V1, [X14 + 0xF0]
	0x03B09084 SXTW X12, W12
	0x03B09088 MOVZ W14, 0xC
	0x03B0908C MADD X13, X12, X14, X13
	0x03B09090 STR D0, [X13 + 0x20]
	0x03B09094 STR S1, [X13 + 0x28]
	0x03B09098 LDR X13, [X19 + 0x368]
	0x03B0909C CBZ X13, 0x3B094FC
	0x03B090A0 LDR X13, [X13 + 0x60]
	0x03B090A4 CBZ X13, 0x3B094FC
	0x03B090A8 LDR W14, [X13 + 0x18]
	0x03B090AC CMP W22, W14
	0x03B090B0 B.CS 0x3B09500
	0x03B090B4 LDR W14, [X8 + 0x18]
	0x03B090B8 CMP W14, W20
	0x03B090BC B.LS 0x3B09500
	0x03B090C0 MOVZ W14, 0x50
	0x03B090C4 MADD X13, X22, X14, X13
	0x03B090C8 LDR X13, [X13 + 0x48]
	0x03B090CC CBZ X13, 0x3B094FC
	0x03B090D0 LDR W14, [X13 + 0x18]
	0x03B090D4 CMP W24, W14
	0x03B090D8 B.CS 0x3B09500
	0x03B090DC MOVZ W14, 0x178
	0x03B090E0 MADD X14, X23, X14, X8
	0x03B090E4 LDUR V0, [X14 + 0x7C]
	0x03B090E8 ADD X13, X13, X9, 0x3, LSL
	0x03B090EC STR D0, [X13 + 0x20]
	0x03B090F0 LDR X13, [X19 + 0x368]
	0x03B090F4 CBZ X13, 0x3B094FC
	0x03B090F8 LDR X13, [X13 + 0x60]
	0x03B090FC CBZ X13, 0x3B094FC
	0x03B09100 LDR W14, [X13 + 0x18]
	0x03B09104 CMP W22, W14
	0x03B09108 B.CS 0x3B09500
	0x03B0910C LDR W14, [X8 + 0x18]
	0x03B09110 CMP W14, W20
	0x03B09114 B.LS 0x3B09500
	0x03B09118 MOVZ W14, 0x50
	0x03B0911C MADD X13, X22, X14, X13
	0x03B09120 LDR X13, [X13 + 0x48]
	0x03B09124 CBZ X13, 0x3B094FC
	0x03B09128 LDR W14, [X13 + 0x18]
	0x03B0912C CMP W10, W14
	0x03B09130 B.CS 0x3B09500
	0x03B09134 MOVZ W14, 0x178
	0x03B09138 MADD X14, X23, X14, X8
	0x03B0913C LDUR V0, [X14 + 0xA4]
	0x03B09140 ADD X13, X13, X10, 0x3, LSL
	0x03B09144 STR D0, [X13 + 0x20]
	0x03B09148 LDR X13, [X19 + 0x368]
	0x03B0914C CBZ X13, 0x3B094FC
	0x03B09150 LDR X13, [X13 + 0x60]
	0x03B09154 CBZ X13, 0x3B094FC
	0x03B09158 LDR W14, [X13 + 0x18]
	0x03B0915C CMP W22, W14
	0x03B09160 B.CS 0x3B09500
	0x03B09164 LDR W14, [X8 + 0x18]
	0x03B09168 CMP W14, W20
	0x03B0916C B.LS 0x3B09500
	0x03B09170 MOVZ W14, 0x50
	0x03B09174 MADD X13, X22, X14, X13
	0x03B09178 LDR X13, [X13 + 0x48]
	0x03B0917C CBZ X13, 0x3B094FC
	0x03B09180 LDR W14, [X13 + 0x18]
	0x03B09184 CMP W11, W14
	0x03B09188 B.CS 0x3B09500
	0x03B0918C MOVZ W14, 0x178
	0x03B09190 MADD X14, X23, X14, X8
	0x03B09194 LDUR V0, [X14 + 0xCC]
	0x03B09198 ADD X13, X13, X11, 0x3, LSL
	0x03B0919C STR D0, [X13 + 0x20]
	0x03B091A0 LDR X13, [X19 + 0x368]
	0x03B091A4 CBZ X13, 0x3B094FC
	0x03B091A8 LDR X13, [X13 + 0x60]
	0x03B091AC CBZ X13, 0x3B094FC
	0x03B091B0 LDR W14, [X13 + 0x18]
	0x03B091B4 CMP W22, W14
	0x03B091B8 B.CS 0x3B09500
	0x03B091BC LDR W14, [X8 + 0x18]
	0x03B091C0 CMP W14, W20
	0x03B091C4 B.LS 0x3B09500
	0x03B091C8 MOVZ W14, 0x50
	0x03B091CC MADD X13, X22, X14, X13
	0x03B091D0 LDR X13, [X13 + 0x48]
	0x03B091D4 CBZ X13, 0x3B094FC
	0x03B091D8 LDR W14, [X13 + 0x18]
	0x03B091DC CMP W12, W14
	0x03B091E0 B.CS 0x3B09500
	0x03B091E4 MOVZ W14, 0x178
	0x03B091E8 MADD X14, X23, X14, X8
	0x03B091EC LDUR V0, [X14 + 0xF4]
	0x03B091F0 ADD X13, X13, X12, 0x3, LSL
	0x03B091F4 STR D0, [X13 + 0x20]
	0x03B091F8 LDR X13, [X19 + 0x368]
	0x03B091FC CBZ X13, 0x3B094FC
	0x03B09200 LDR X13, [X13 + 0x60]
	0x03B09204 CBZ X13, 0x3B094FC
	0x03B09208 LDR W14, [X13 + 0x18]
	0x03B0920C CMP W22, W14
	0x03B09210 B.CS 0x3B09500
	0x03B09214 LDR W14, [X8 + 0x18]
	0x03B09218 CMP W14, W20
	0x03B0921C B.LS 0x3B09500
	0x03B09220 MOVZ W14, 0x50
	0x03B09224 MADD X13, X22, X14, X13
	0x03B09228 LDR X13, [X13 + 0x50]
	0x03B0922C CBZ X13, 0x3B094FC
	0x03B09230 LDR W14, [X13 + 0x18]
	0x03B09234 CMP W24, W14
	0x03B09238 B.CS 0x3B09500
	0x03B0923C MOVZ W14, 0x178
	0x03B09240 MADD X14, X23, X14, X8
	0x03B09244 LDUR V0, [X14 + 0x84]
	0x03B09248 ADD X13, X13, X9, 0x3, LSL
	0x03B0924C STR D0, [X13 + 0x20]
	0x03B09250 LDR X13, [X19 + 0x368]
	0x03B09254 CBZ X13, 0x3B094FC
	0x03B09258 LDR X13, [X13 + 0x60]
	0x03B0925C CBZ X13, 0x3B094FC
	0x03B09260 LDR W14, [X13 + 0x18]
	0x03B09264 CMP W22, W14
	0x03B09268 B.CS 0x3B09500
	0x03B0926C LDR W14, [X8 + 0x18]
	0x03B09270 CMP W14, W20
	0x03B09274 B.LS 0x3B09500
	0x03B09278 MOVZ W14, 0x50
	0x03B0927C MADD X13, X22, X14, X13
	0x03B09280 LDR X13, [X13 + 0x50]
	0x03B09284 CBZ X13, 0x3B094FC
	0x03B09288 LDR W14, [X13 + 0x18]
	0x03B0928C CMP W10, W14
	0x03B09290 B.CS 0x3B09500
	0x03B09294 MOVZ W14, 0x178
	0x03B09298 MADD X14, X23, X14, X8
	0x03B0929C LDUR V0, [X14 + 0xAC]
	0x03B092A0 ADD X13, X13, X10, 0x3, LSL
	0x03B092A4 STR D0, [X13 + 0x20]
	0x03B092A8 LDR X13, [X19 + 0x368]
	0x03B092AC CBZ X13, 0x3B094FC
	0x03B092B0 LDR X13, [X13 + 0x60]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x8DB000
	011 Move W8, [X21+1629]
	012 Move W20, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x651000
	019 Move X0, [X0+840]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+1629], W8
	023 Move X9, [X19+872]
	024 Compare X9, 0
	025 JumpIfEqual {469}
	026 Move X8, [X9+56]
	027 Compare X8, 0
	028 JumpIfEqual {469}
	029 Move W10, [X8+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X25, [X9+96]
	032 Compare X25, 0
	033 JumpIfEqual {469}
	034 Move X23, W20
	035 Move W10, 376
	036 NotImplemented "Instruction MADD not yet implemented."
	037 NotImplemented "Instruction LDRSW not yet implemented."
	038 Move W8, [X25+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W8, 80
	041 NotImplemented "Instruction MADD not yet implemented."
	042 Move X8, [X26+48]
	043 Compare X8, 0
	044 JumpIfEqual {469}
	045 Move W24, [X26+40]
	046 Move W8, [X8+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Add W8, W24, 4
	049 Add W9, W24, 7
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CSEL not yet implemented."
	052 NotImplemented "Instruction SBFM not yet implemented."
	053 Move X1, X31
	054 Call Mathf.NextPowerOfTwo, X0
	055 Move X8, 0x651000
	056 Move X8, [X8+840]
	057 Move W21, W0
	058 Move X8, [X8]
	059 Move W9, [X8+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X8
	063 Call 0x1C17DFC
	064 Move W8, [X25+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Add X0, X26, 32
	067 Move W1, W21
	068 Move X2, X31
	069 Call TMP_MeshInfo.ResizeMeshInfo, X0, X1
	070 Move X9, [X19+872]
	071 Compare X9, 0
	072 JumpIfEqual {469}
	073 Move X8, [X9+56]
	074 Compare X8, 0
	075 JumpIfEqual {469}
	076 Move W10, [X8+24]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move W10, 376
	079 NotImplemented "Instruction MADD not yet implemented."
	080 Move [X10+108], W24
	081 Move X9, [X9+96]
	082 Compare X9, 0
	083 JumpIfEqual {469}
	084 Move W10, [X9+24]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move W10, 80
	087 NotImplemented "Instruction MADD not yet implemented."
	088 Move X10, [X9+48]
	089 Compare X10, 0
	090 JumpIfEqual {469}
	091 Move W9, [X10+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move W11, 376
	094 NotImplemented "Instruction MADD not yet implemented."
	095 Move V0, [X11+112]
	096 Move V1, [X11+120]
	097 Move X9, W24
	098 Move W11, 12
	099 NotImplemented "Instruction MADD not yet implemented."
	100 Move [X10+32], D0
	101 Move [X10+40], S1
	102 Move X10, [X19+872]
	103 Compare X10, 0
	104 JumpIfEqual {469}
	105 Move X10, [X10+96]
	106 Compare X10, 0
	107 JumpIfEqual {469}
	108 Move W11, [X10+24]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move W11, [X8+24]
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move W11, 80
	113 NotImplemented "Instruction MADD not yet implemented."
	114 Move X11, [X10+48]
	115 Compare X11, 0
	116 JumpIfEqual {469}
	117 Move W12, [X11+24]
	118 Add W10, W24, 1
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move W12, 376
	121 NotImplemented "Instruction MADD not yet implemented."
	122 Move V0, [X12+152]
	123 Move V1, [X12+160]
	124 Move X10, W10
	125 Move W12, 12
	126 NotImplemented "Instruction MADD not yet implemented."
	127 Move [X11+32], D0
	128 Move [X11+40], S1
	129 Move X11, [X19+872]
	130 Compare X11, 0
	131 JumpIfEqual {469}
	132 Move X11, [X11+96]
	133 Compare X11, 0
	134 JumpIfEqual {469}
	135 Move W12, [X11+24]
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move W12, [X8+24]
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move W12, 80
	140 NotImplemented "Instruction MADD not yet implemented."
	141 Move X12, [X11+48]
	142 Compare X12, 0
	143 JumpIfEqual {469}
	144 Move W13, [X12+24]
	145 Add W11, W24, 2
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move W13, 376
	148 NotImplemented "Instruction MADD not yet implemented."
	149 Move V0, [X13+192]
	150 Move V1, [X13+200]
	151 Move X11, W11
	152 Move W13, 12
	153 NotImplemented "Instruction MADD not yet implemented."
	154 Move [X12+32], D0
	155 Move [X12+40], S1
	156 Move X12, [X19+872]
	157 Compare X12, 0
	158 JumpIfEqual {469}
	159 Move X12, [X12+96]
	160 Compare X12, 0
	161 JumpIfEqual {469}
	162 Move W13, [X12+24]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move W13, [X8+24]
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move W13, 80
	167 NotImplemented "Instruction MADD not yet implemented."
	168 Move X13, [X12+48]
	169 Compare X13, 0
	170 JumpIfEqual {469}
	171 Move W14, [X13+24]
	172 Add W12, W24, 3
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Move W14, 376
	175 NotImplemented "Instruction MADD not yet implemented."
	176 Move V0, [X14+232]
	177 Move V1, [X14+240]
	178 Move X12, W12
	179 Move W14, 12
	180 NotImplemented "Instruction MADD not yet implemented."
	181 Move [X13+32], D0
	182 Move [X13+40], S1
	183 Move X13, [X19+872]
	184 Compare X13, 0
	185 JumpIfEqual {469}
	186 Move X13, [X13+96]
	187 Compare X13, 0
	188 JumpIfEqual {469}
	189 Move W14, [X13+24]
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Move W14, [X8+24]
	192 NotImplemented "Instruction CMP not yet implemented."
	193 Move W14, 80
	194 NotImplemented "Instruction MADD not yet implemented."
	195 Move X13, [X13+72]
	196 Compare X13, 0
	197 JumpIfEqual {469}
	198 Move W14, [X13+24]
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Move W14, 376
	201 NotImplemented "Instruction MADD not yet implemented."
	202 NotImplemented "Instruction LDUR not yet implemented."
	203 Add X13, X13, X9
	204 Move [X13+32], D0
	205 Move X13, [X19+872]
	206 Compare X13, 0
	207 JumpIfEqual {469}
	208 Move X13, [X13+96]
	209 Compare X13, 0
	210 JumpIfEqual {469}
	211 Move W14, [X13+24]
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Move W14, [X8+24]
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Move W14, 80
	216 NotImplemented "Instruction MADD not yet implemented."
	217 Move X13, [X13+72]
	218 Compare X13, 0
	219 JumpIfEqual {469}
	220 Move W14, [X13+24]
	221 NotImplemented "Instruction CMP not yet implemented."
	222 Move W14, 376
	223 NotImplemented "Instruction MADD not yet implemented."
	224 NotImplemented "Instruction LDUR not yet implemented."
	225 Add X13, X13, X10
	226 Move [X13+32], D0
	227 Move X13, [X19+872]
	228 Compare X13, 0
	229 JumpIfEqual {469}
	230 Move X13, [X13+96]
	231 Compare X13, 0
	232 JumpIfEqual {469}
	233 Move W14, [X13+24]
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Move W14, [X8+24]
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Move W14, 80
	238 NotImplemented "Instruction MADD not yet implemented."
	239 Move X13, [X13+72]
	240 Compare X13, 0
	241 JumpIfEqual {469}
	242 Move W14, [X13+24]
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Move W14, 376
	245 NotImplemented "Instruction MADD not yet implemented."
	246 NotImplemented "Instruction LDUR not yet implemented."
	247 Add X13, X13, X11
	248 Move [X13+32], D0
	249 Move X13, [X19+872]
	250 Compare X13, 0
	251 JumpIfEqual {469}
	252 Move X13, [X13+96]
	253 Compare X13, 0
	254 JumpIfEqual {469}
	255 Move W14, [X13+24]
	256 NotImplemented "Instruction CMP not yet implemented."
	257 Move W14, [X8+24]
	258 NotImplemented "Instruction CMP not yet implemented."
	259 Move W14, 80
	260 NotImplemented "Instruction MADD not yet implemented."
	261 Move X13, [X13+72]
	262 Compare X13, 0
	263 JumpIfEqual {469}
	264 Move W14, [X13+24]
	265 NotImplemented "Instruction CMP not yet implemented."
	266 Move W14, 376
	267 NotImplemented "Instruction MADD not yet implemented."
	268 NotImplemented "Instruction LDUR not yet implemented."
	269 Add X13, X13, X12
	270 Move [X13+32], D0
	271 Move X13, [X19+872]
	272 Compare X13, 0
	273 JumpIfEqual {469}
	274 Move X13, [X13+96]
	275 Compare X13, 0
	276 JumpIfEqual {469}
	277 Move W14, [X13+24]
	278 NotImplemented "Instruction CMP not yet implemented."
	279 Move W14, [X8+24]
	280 NotImplemented "Instruction CMP not yet implemented."
	281 Move W14, 80
	282 NotImplemented "Instruction MADD not yet implemented."
	283 Move X13, [X13+80]
	284 Compare X13, 0
	285 JumpIfEqual {469}
	286 Move W14, [X13+24]
	287 NotImplemented "Instruction CMP not yet implemented."
	288 Move W14, 376
	289 NotImplemented "Instruction MADD not yet implemented."
	290 NotImplemented "Instruction LDUR not yet implemented."
	291 Add X13, X13, X9
	292 Move [X13+32], D0
	293 Move X13, [X19+872]
	294 Compare X13, 0
	295 JumpIfEqual {469}
	296 Move X13, [X13+96]
	297 Compare X13, 0
	298 JumpIfEqual {469}
	299 Move W14, [X13+24]
	300 NotImplemented "Instruction CMP not yet implemented."
	301 Move W14, [X8+24]
	302 NotImplemented "Instruction CMP not yet implemented."
	303 Move W14, 80
	304 NotImplemented "Instruction MADD not yet implemented."
	305 Move X13, [X13+80]
	306 Compare X13, 0
	307 JumpIfEqual {469}
	308 Move W14, [X13+24]
	309 NotImplemented "Instruction CMP not yet implemented."
	310 Move W14, 376
	311 NotImplemented "Instruction MADD not yet implemented."
	312 NotImplemented "Instruction LDUR not yet implemented."
	313 Add X13, X13, X10
	314 Move [X13+32], D0
	315 Move X13, [X19+872]
	316 Compare X13, 0
	317 JumpIfEqual {469}
	318 Move X13, [X13+96]
	319 Compare X13, 0
	320 JumpIfEqual {469}
	321 Move W14, [X13+24]
	322 NotImplemented "Instruction CMP not yet implemented."
	323 Move W14, [X8+24]
	324 NotImplemented "Instruction CMP not yet implemented."
	325 Move W14, 80
	326 NotImplemented "Instruction MADD not yet implemented."
	327 Move X13, [X13+80]
	328 Compare X13, 0
	329 JumpIfEqual {469}
	330 Move W14, [X13+24]
	331 NotImplemented "Instruction CMP not yet implemented."
	332 Move W14, 376
	333 NotImplemented "Instruction MADD not yet implemented."
	334 NotImplemented "Instruction LDUR not yet implemented."
	335 Add X13, X13, X11
	336 Move [X13+32], D0
	337 Move X13, [X19+872]
	338 Compare X13, 0
	339 JumpIfEqual {469}
	340 Move X13, [X13+96]
	341 Compare X13, 0
	342 JumpIfEqual {469}
	343 Move W14, [X13+24]
	344 NotImplemented "Instruction CMP not yet implemented."
	345 Move W14, [X8+24]
	346 NotImplemented "Instruction CMP not yet implemented."
	347 Move W14, 80
	348 NotImplemented "Instruction MADD not yet implemented."
	349 Move X13, [X13+80]
	350 Compare X13, 0
	351 JumpIfEqual {469}
	352 Move W14, [X13+24]
	353 NotImplemented "Instruction CMP not yet implemented."
	354 Move W14, 376
	355 NotImplemented "Instruction MADD not yet implemented."
	356 NotImplemented "Instruction LDUR not yet implemented."
	357 Add X13, X13, X12
	358 Move [X13+32], D0
	359 Move X13, [X19+872]
	360 Compare X13, 0
	361 JumpIfEqual {469}
	362 Move X13, [X13+96]
	363 Compare X13, 0
	364 JumpIfEqual {469}
	365 Move W14, [X13+24]
	366 NotImplemented "Instruction CMP not yet implemented."
	367 Move W14, [X8+24]
	368 NotImplemented "Instruction CMP not yet implemented."
	369 Move W14, 80
	370 NotImplemented "Instruction MADD not yet implemented."
	371 Move X13, [X13+88]
	372 Compare X13, 0
	373 JumpIfEqual {469}
	374 Move W14, [X13+24]
	375 NotImplemented "Instruction CMP not yet implemented."
	376 Move W14, 376
	377 NotImplemented "Instruction MADD not yet implemented."
	378 Move W14, [X14+148]
	379 Add X9, X13, X9
	380 Move [X9+32], W14
	381 Move X9, [X19+872]
	382 Compare X9, 0
	383 JumpIfEqual {469}
	384 Move X9, [X9+96]
	385 Compare X9, 0
	386 JumpIfEqual {469}
	387 Move W13, [X9+24]
	388 NotImplemented "Instruction CMP not yet implemented."
	389 Move W13, [X8+24]
	390 NotImplemented "Instruction CMP not yet implemented."
	391 Move W13, 80
	392 NotImplemented "Instruction MADD not yet implemented."
	393 Move X9, [X9+88]
	394 Compare X9, 0
	395 JumpIfEqual {469}
	396 Move W13, [X9+24]
	397 NotImplemented "Instruction CMP not yet implemented."
	398 Move W13, 376
	399 NotImplemented "Instruction MADD not yet implemented."
	400 Move W13, [X13+188]
	401 Add X9, X9, X10
	402 Move [X9+32], W13
	403 Move X9, [X19+872]
	404 Compare X9, 0
	405 JumpIfEqual {469}
	406 Move X9, [X9+96]
	407 Compare X9, 0
	408 JumpIfEqual {469}
	409 Move W10, [X9+24]
	410 NotImplemented "Instruction CMP not yet implemented."
	411 Move W10, [X8+24]
	412 NotImplemented "Instruction CMP not yet implemented."
	413 Move W10, 80
	414 NotImplemented "Instruction MADD not yet implemented."
	415 Move X9, [X9+88]
	416 Compare X9, 0
	417 JumpIfEqual {469}
	418 Move W10, [X9+24]
	419 NotImplemented "Instruction CMP not yet implemented."
	420 Move W10, 376
	421 NotImplemented "Instruction MADD not yet implemented."
	422 Move W10, [X10+228]
	423 Add X9, X9, X11
	424 Move [X9+32], W10
	425 Move X9, [X19+872]
	426 Compare X9, 0
	427 JumpIfEqual {469}
	428 Move X9, [X9+96]
	429 Compare X9, 0
	430 JumpIfEqual {469}
	431 Move W10, [X9+24]
	432 NotImplemented "Instruction CMP not yet implemented."
	433 Move W10, [X8+24]
	434 NotImplemented "Instruction CMP not yet implemented."
	435 Move W10, 80
	436 NotImplemented "Instruction MADD not yet implemented."
	437 Move X9, [X9+88]
	438 Compare X9, 0
	439 JumpIfEqual {469}
	440 Move W10, [X9+24]
	441 NotImplemented "Instruction CMP not yet implemented."
	442 Move W10, 376
	443 NotImplemented "Instruction MADD not yet implemented."
	444 Move W8, [X8+268]
	445 Add X9, X9, X12
	446 Move [X9+32], W8
	447 Move X8, [X19+872]
	448 Compare X8, 0
	449 JumpIfEqual {469}
	450 Move X8, [X8+96]
	451 Compare X8, 0
	452 JumpIfEqual {469}
	453 Move W9, [X8+24]
	454 NotImplemented "Instruction CMP not yet implemented."
	455 Move W10, 80
	456 Add W9, W24, 4
	457 NotImplemented "Instruction MADD not yet implemented."
	458 Move X20, [X31+64]
	459 Move X19, [X31+72]
	460 Move X22, [X31+48]
	461 Move X21, [X31+56]
	462 Move X24, [X31+32]
	463 Move X23, [X31+40]
	464 Move X26, [X31+16]
	465 Move X25, [X31+24]
	466 Move [X8+40], W9
	467 Move X30, [X31+80]
	468 Return 
	469 Call 0x1C17F20
	470 Call 0x1C17F28

Method: System.Void FillCharacterVertexBuffers(System.Int32 i, System.Int32 index_X4, System.Boolean isVolumetric)

Disassembly:
	0x03B092B4 CBZ X13, 0x3B094FC
	0x03B092B8 LDR W14, [X13 + 0x18]
	0x03B092BC CMP W22, W14
	0x03B092C0 B.CS 0x3B09500
	0x03B092C4 LDR W14, [X8 + 0x18]
	0x03B092C8 CMP W14, W20
	0x03B092CC B.LS 0x3B09500
	0x03B092D0 MOVZ W14, 0x50
	0x03B092D4 MADD X13, X22, X14, X13
	0x03B092D8 LDR X13, [X13 + 0x50]
	0x03B092DC CBZ X13, 0x3B094FC
	0x03B092E0 LDR W14, [X13 + 0x18]
	0x03B092E4 CMP W11, W14
	0x03B092E8 B.CS 0x3B09500
	0x03B092EC MOVZ W14, 0x178
	0x03B092F0 MADD X14, X23, X14, X8
	0x03B092F4 LDUR V0, [X14 + 0xD4]
	0x03B092F8 ADD X13, X13, X11, 0x3, LSL
	0x03B092FC STR D0, [X13 + 0x20]
	0x03B09300 LDR X13, [X19 + 0x368]
	0x03B09304 CBZ X13, 0x3B094FC
	0x03B09308 LDR X13, [X13 + 0x60]
	0x03B0930C CBZ X13, 0x3B094FC
	0x03B09310 LDR W14, [X13 + 0x18]
	0x03B09314 CMP W22, W14
	0x03B09318 B.CS 0x3B09500
	0x03B0931C LDR W14, [X8 + 0x18]
	0x03B09320 CMP W14, W20
	0x03B09324 B.LS 0x3B09500
	0x03B09328 MOVZ W14, 0x50
	0x03B0932C MADD X13, X22, X14, X13
	0x03B09330 LDR X13, [X13 + 0x50]
	0x03B09334 CBZ X13, 0x3B094FC
	0x03B09338 LDR W14, [X13 + 0x18]
	0x03B0933C CMP W12, W14
	0x03B09340 B.CS 0x3B09500
	0x03B09344 MOVZ W14, 0x178
	0x03B09348 MADD X14, X23, X14, X8
	0x03B0934C LDUR V0, [X14 + 0xFC]
	0x03B09350 ADD X13, X13, X12, 0x3, LSL
	0x03B09354 STR D0, [X13 + 0x20]
	0x03B09358 LDR X13, [X19 + 0x368]
	0x03B0935C CBZ X13, 0x3B094FC
	0x03B09360 LDR X13, [X13 + 0x60]
	0x03B09364 CBZ X13, 0x3B094FC
	0x03B09368 LDR W14, [X13 + 0x18]
	0x03B0936C CMP W22, W14
	0x03B09370 B.CS 0x3B09500
	0x03B09374 LDR W14, [X8 + 0x18]
	0x03B09378 CMP W14, W20
	0x03B0937C B.LS 0x3B09500
	0x03B09380 MOVZ W14, 0x50
	0x03B09384 MADD X13, X22, X14, X13
	0x03B09388 LDR X13, [X13 + 0x58]
	0x03B0938C CBZ X13, 0x3B094FC
	0x03B09390 LDR W14, [X13 + 0x18]
	0x03B09394 CMP W24, W14
	0x03B09398 B.CS 0x3B09500
	0x03B0939C MOVZ W14, 0x178
	0x03B093A0 MADD X14, X23, X14, X8
	0x03B093A4 LDR W14, [X14 + 0x94]
	0x03B093A8 ADD X9, X13, X9, 0x2, LSL
	0x03B093AC STR W14, [X9 + 0x20]
	0x03B093B0 LDR X9, [X19 + 0x368]
	0x03B093B4 CBZ X9, 0x3B094FC
	0x03B093B8 LDR X9, [X9 + 0x60]
	0x03B093BC CBZ X9, 0x3B094FC
	0x03B093C0 LDR W13, [X9 + 0x18]
	0x03B093C4 CMP W22, W13
	0x03B093C8 B.CS 0x3B09500
	0x03B093CC LDR W13, [X8 + 0x18]
	0x03B093D0 CMP W13, W20
	0x03B093D4 B.LS 0x3B09500
	0x03B093D8 MOVZ W13, 0x50
	0x03B093DC MADD X9, X22, X13, X9
	0x03B093E0 LDR X9, [X9 + 0x58]
	0x03B093E4 CBZ X9, 0x3B094FC
	0x03B093E8 LDR W13, [X9 + 0x18]
	0x03B093EC CMP W10, W13
	0x03B093F0 B.CS 0x3B09500
	0x03B093F4 MOVZ W13, 0x178
	0x03B093F8 MADD X13, X23, X13, X8
	0x03B093FC LDR W13, [X13 + 0xBC]
	0x03B09400 ADD X9, X9, X10, 0x2, LSL
	0x03B09404 STR W13, [X9 + 0x20]
	0x03B09408 LDR X9, [X19 + 0x368]
	0x03B0940C CBZ X9, 0x3B094FC
	0x03B09410 LDR X9, [X9 + 0x60]
	0x03B09414 CBZ X9, 0x3B094FC
	0x03B09418 LDR W10, [X9 + 0x18]
	0x03B0941C CMP W22, W10
	0x03B09420 B.CS 0x3B09500
	0x03B09424 LDR W10, [X8 + 0x18]
	0x03B09428 CMP W10, W20
	0x03B0942C B.LS 0x3B09500
	0x03B09430 MOVZ W10, 0x50
	0x03B09434 MADD X9, X22, X10, X9
	0x03B09438 LDR X9, [X9 + 0x58]
	0x03B0943C CBZ X9, 0x3B094FC
	0x03B09440 LDR W10, [X9 + 0x18]
	0x03B09444 CMP W11, W10
	0x03B09448 B.CS 0x3B09500
	0x03B0944C MOVZ W10, 0x178
	0x03B09450 MADD X10, X23, X10, X8
	0x03B09454 LDR W10, [X10 + 0xE4]
	0x03B09458 ADD X9, X9, X11, 0x2, LSL
	0x03B0945C STR W10, [X9 + 0x20]
	0x03B09460 LDR X9, [X19 + 0x368]
	0x03B09464 CBZ X9, 0x3B094FC
	0x03B09468 LDR X9, [X9 + 0x60]
	0x03B0946C CBZ X9, 0x3B094FC
	0x03B09470 LDR W10, [X9 + 0x18]
	0x03B09474 CMP W22, W10
	0x03B09478 B.CS 0x3B09500
	0x03B0947C LDR W10, [X8 + 0x18]
	0x03B09480 CMP W10, W20
	0x03B09484 B.LS 0x3B09500
	0x03B09488 MOVZ W10, 0x50
	0x03B0948C MADD X9, X22, X10, X9
	0x03B09490 LDR X9, [X9 + 0x58]
	0x03B09494 CBZ X9, 0x3B094FC
	0x03B09498 LDR W10, [X9 + 0x18]
	0x03B0949C CMP W12, W10
	0x03B094A0 B.CS 0x3B09500
	0x03B094A4 MOVZ W10, 0x178
	0x03B094A8 MADD X8, X23, X10, X8
	0x03B094AC LDR W8, [X8 + 0x10C]
	0x03B094B0 ADD X9, X9, X12, 0x2, LSL
	0x03B094B4 STR W8, [X9 + 0x20]
	0x03B094B8 LDR X8, [X19 + 0x368]
	0x03B094BC CBZ X8, 0x3B094FC
	0x03B094C0 LDR X8, [X8 + 0x60]
	0x03B094C4 CBZ X8, 0x3B094FC
	0x03B094C8 LDR W9, [X8 + 0x18]
	0x03B094CC CMP W22, W9
	0x03B094D0 B.CS 0x3B09500
	0x03B094D4 MOVZ W10, 0x50
	0x03B094D8 ADD W9, W24, 0x4
	0x03B094DC MADD X8, X22, X10, X8
	0x03B094E0 LDP X20, X19, [X31 + 0x40]
	0x03B094E4 LDP X22, X21, [X31 + 0x30]
	0x03B094E8 LDP X24, X23, [X31 + 0x20]
	0x03B094EC LDP X26, X25, [X31 + 0x10]
	0x03B094F0 STR W9, [X8 + 0x28]
	0x03B094F4 LDR X30, [X31], #0x50
	0x03B094F8 RET
	0x03B094FC BL 0x1C16F20
	0x03B09500 BL 0x1C16F28
	0x03B09504 SUB X31, X31, 0x1A0
	0x03B09508 STP D15, D14, [X31 + 0x100]
	0x03B0950C STP D13, D12, [X31 + 0x110]
	0x03B09510 STP D11, D10, [X31 + 0x120]
	0x03B09514 STP D9, D8, [X31 + 0x130]
	0x03B09518 STP X29, X30, [X31 + 0x140]
	0x03B0951C STP X28, X27, [X31 + 0x150]
	0x03B09520 STP X26, X25, [X31 + 0x160]
	0x03B09524 STP X24, X23, [X31 + 0x170]
	0x03B09528 STP X22, X21, [X31 + 0x180]
	0x03B0952C STP X20, X19, [X31 + 0x190]
	0x03B09530 ADRP X20, 0x8D9000
	0x03B09534 LDRB W8, [X20 + 0x660]
	0x03B09538 MOV X24, X2
	0x03B0953C MOV V9.16B, V7.16B
	0x03B09540 MOV V10.16B, V6.16B
	0x03B09544 MOV X19, X1
	0x03B09548 MOV V12.16B, V5.16B
	0x03B0954C MOV V14.16B, V4.16B
	0x03B09550 MOV V11.16B, V3.16B
	0x03B09554 MOV V13.16B, V2.16B
	0x03B09558 MOV V15.16B, V1.16B
	0x03B0955C MOV V8.16B, V0.16B
	0x03B09560 MOV X21, X0
	0x03B09564 UBFM X9, X2, 0x18, 0x3F
	0x03B09568 STRB W9, [X31 + 0xFC]
	0x03B0956C TBNZ X8, 0x0, 0x3B095A8
	0x03B09570 ADRP X0, 0x5EA000
	0x03B09574 LDR X0, [X0 + 0xA28]
	0x03B09578 BL 0x1C16CF4
	0x03B0957C ADRP X0, 0x612000
	0x03B09580 LDR X0, [X0 + 0x608]
	0x03B09584 BL 0x1C16CF4
	0x03B09588 ADRP X0, 0x64F000
	0x03B0958C LDR X0, [X0 + 0x348]
	0x03B09590 BL 0x1C16CF4
	0x03B09594 ADRP X0, 0x650000
	0x03B09598 LDR X0, [X0 + 0x310]
	0x03B0959C BL 0x1C16CF4
	0x03B095A0 MOVZ W8, 0x1
	0x03B095A4 STRB W8, [X20 + 0x660]
	0x03B095A8 MOVI V0.2D, 0x0
	0x03B095AC STP X31, X31, [X31 + 0xE0]
	0x03B095B0 STR W31, [X31 + 0xF0]
	0x03B095B4 STP X31, X31, [X31 + 0xD0]
	0x03B095B8 STP V0, V0, [X31 + 0xB0]
	0x03B095BC STP V0, V0, [X31 + 0x90]
	0x03B095C0 STP V0, V0, [X31 + 0x70]
	0x03B095C4 LDR X1, [X21 + 0xF8]
	0x03B095C8 MOV X0, X21
	0x03B095CC BL 0x3B0A388
	0x03B095D0 LDR X8, [X21 + 0x670]
	0x03B095D4 CBZ X8, 0x3B09674
	0x03B095D8 LDR X9, [X21 + 0x368]
	0x03B095DC CBZ X9, 0x3B0A384
	0x03B095E0 LDR X20, [X9 + 0x60]
	0x03B095E4 CBZ X20, 0x3B0A384
	0x03B095E8 LDRSW X25, [X21 + 0x688]
	0x03B095EC LDR W9, [X20 + 0x18]
	0x03B095F0 CMP W25, W9
	0x03B095F4 B.CS 0x3B0A380
	0x03B095F8 MOVZ W10, 0x50
	0x03B095FC MADD X22, X25, X10, X20
	0x03B09600 LDR X10, [X22 + 0x30]
	0x03B09604 CBZ X10, 0x3B0A384
	0x03B09608 LDR W11, [X19]
	0x03B0960C LDR W10, [X10 + 0x18]
	0x03B09610 STR S10, [X31 + 0x3C]
	0x03B09614 ADD W23, W11, 0xC
	0x03B09618 CMP W23, W10
	0x03B0961C B.LE 0x3B096B4
	0x03B09620 ADRP X8, 0x64F000
	0x03B09624 LDR X8, [X8 + 0x348]
	0x03B09628 LDR X0, [X8]
	0x03B0962C LDR W8, [X0 + 0xE0]
	0x03B09630 CBNZ W8, 0x3B0963C
	0x03B09634 BL 0x1C16DFC
	0x03B09638 LDR W9, [X20 + 0x18]
	0x03B0963C CMP W25, W9
	0x03B09640 B.CS 0x3B0A380
	0x03B09644 ADD W8, W23, 0x3
	0x03B09648 CMP W23, 0x0
	0x03B0964C CSEL W8, W8, W23, LT
	0x03B09650 ADD X0, X22, 0x20
	0x03B09654 SBFM W1, W8, 0x2, 0x1F
	0x03B09658 MOV X2, X31
	0x03B0965C BL 0x3B11BD0
	0x03B09660 LDR X8, [X21 + 0x670]
	0x03B09664 FCMP S15, S14
	0x03B09668 FCSEL S10, S15, S14, MI
	0x03B0966C CBNZ X8, 0x3B096BC
	0x03B09670 B 0x3B0A384
	0x03B09674 MOV X0, X31
	0x03B09678 BL 0x3B13E38
	0x03B0967C TBNZ X0, 0x0, 0x3B0A350
	0x03B09680 ADRP X8, 0x5EA000
	0x03B09684 LDR X8, [X8 + 0xA28]
	0x03B09688 LDR X0, [X8]
	0x03B0968C LDR W8, [X0 + 0xE0]
	0x03B09690 CBNZ W8, 0x3B09698
	0x03B09694 BL 0x1C16DFC
	0x03B09698 ADRP X8, 0x650000
	0x03B0969C LDR X8, [X8 + 0x310]
	0x03B096A0 MOV X1, X21
	0x03B096A4 MOV X2, X31
	0x03B096A8 LDR X0, [X8]
	0x03B096AC BL 0x3C06B0C
	0x03B096B0 B 0x3B0A350
	0x03B096B4 FCMP S15, S14
	0x03B096B8 FCSEL S10, S15, S14, MI
	0x03B096BC LDR X0, [X8 + 0x20]
	0x03B096C0 CBZ X0, 0x3B0A384
	0x03B096C4 ADD X8, X31, 0x58
	0x03B096C8 MOV X1, X31
	0x03B096CC BL 0x3C9C4A4
	0x03B096D0 LDUR V0, [X31 + 0x58]
	0x03B096D4 LDR W8, [X31 + 0x68]
	0x03B096D8 STR V0, [X31 + 0xE]
	0x03B096DC STR W8, [X31 + 0xF0]
	0x03B096E0 LDR X8, [X21 + 0x670]
	0x03B096E4 CBZ X8, 0x3B0A384
	0x03B096E8 LDR X0, [X8 + 0x20]
	0x03B096EC STR S9, [X31 + 0x38]
	0x03B096F0 CBZ X0, 0x3B0A384
	0x03B096F4 LDR V15, [X31 + 0x1A0]
	0x03B096F8 MOV X1, X31
	0x03B096FC MOV V14.16B, V12.16B
	0x03B09700 BL 0x3C9C4CC
	0x03B09704 STP X0, X1, [X31 + 0xD0]
	0x03B09708 ADD X0, X31, 0xE0
	0x03B0970C MOV X1, X31
	0x03B09710 BL 0x3C9C2CC
	0x03B09714 FMOV S9, 0.5
	0x03B09718 FMUL S0, S0, S9
	0x03B0971C ADD X0, X31, 0xE0
	0x03B09720 MOV X1, X31
	0x03B09724 FMUL S12, S0, S15
	0x03B09728 BL 0x3C9C2CC
	0x03B0972C LDR X8, [X21 + 0x678]
	0x03B09730 FSUB S2, S11, S8
	0x03B09734 FMUL S0, S0, S15
	0x03B09738 FMUL S1, S2, S9
	0x03B0973C FCMP S2, S0
	0x03B09740 FCSEL S0, S1, S12, MI
	0x03B09744 STR S2, [X31 + 0x34]
	0x03B09748 STR V0, [X31 + 0x4]
	0x03B0974C CBZ X8, 0x3B0A384
	0x03B09750 LDR V9, [X21 + 0x618]
	0x03B09754 ADD X1, X8, 0x50
	0x03B09758 ADD X0, X31, 0x70
	0x03B0975C MOVZ W2, 0x60
	0x03B09760 BL 0x3EB1B30
	0x03B09764 ADD X0, X31, 0x70
	0x03B09768 MOV X1, X31
	0x03B0976C BL 0x3C9C058
	0x03B09770 LDR X8, [X21 + 0x368]
	0x03B09774 CBZ X8, 0x3B0A384
	0x03B09778 LDR X8, [X8 + 0x60]
	0x03B0977C CBZ X8, 0x3B0A384
	0x03B09780 LDR W9, [X8 + 0x18]
	0x03B09784 CMP W25, W9
	0x03B09788 B.CS 0x3B0A380
	0x03B0978C MOVZ W9, 0x50
	0x03B09790 MADD X8, X25, X9, X8
	0x03B09794 LDR X23, [X8 + 0x30]
	0x03B09798 CBZ X23, 0x3B0A384
	0x03B0979C LDRSW X8, [X19]
	0x03B097A0 LDR W9, [X23 + 0x18]
	0x03B097A4 CMP W8, W9
	0x03B097A8 B.CS 0x3B0A380
	0x03B097AC LDR V3, [X21 + 0x618]
	0x03B097B0 FMOV S4, W31
	0x03B097B4 MOVZ W9, 0xC
	0x03B097B8 FADD S2, S8, S4
	0x03B097BC FADD S3, S0, S3
	0x03B097C0 FMUL S3, S3, S15
	0x03B097C4 FSUB S3, S4, S3
	0x03B097C8 FADD S1, S13, S4
	0x03B097CC MADD X8, X8, X9, X23
	0x03B097D0 FADD S3, S10, S3
	0x03B097D4 STP S2, S3, [X8 + 0x20]
	0x03B097D8 STR S1, [X8 + 0x28]
	0x03B097DC LDR W8, [X19]
	0x03B097E0 LDR W9, [X23 + 0x18]
	0x03B097E4 ADD W8, W8, 0x1
	0x03B097E8 CMP W8, W9
	0x03B097EC B.CS 0x3B0A380
	0x03B097F0 LDR V3, [X21 + 0x618]
	0x03B097F4 SXTW X8, W8
	0x03B097F8 MOVZ W9, 0xC
	0x03B097FC MADD X8, X8, X9, X23
	0x03B09800 FMUL S3, S3, S15
	0x03B09804 FADD S3, S10, S3
	0x03B09808 STP S2, S3, [X8 + 0x20]
	0x03B0980C STR S1, [X8 + 0x28]
	0x03B09810 LDR W8, [X19]
	0x03B09814 LDR W10, [X23 + 0x18]
	0x03B09818 LDR V6, [X31 + 0x4]
	0x03B0981C ADD W9, W8, 0x1
	0x03B09820 CMP W9, W10
	0x03B09824 B.CS 0x3B0A380
	0x03B09828 ADD W8, W8, 0x2
	0x03B0982C CMP W8, W10
	0x03B09830 B.CS 0x3B0A380
	0x03B09834 SXTW X9, W9
	0x03B09838 MOVZ W10, 0xC
	0x03B0983C ADD X11, X23, 0x20
	0x03B09840 MADD X9, X9, X10, X11
	0x03B09844 LDR V1, [X9 + 0x8]
	0x03B09848 LDR V3, [X9]
	0x03B0984C FMOV S2, W31
	0x03B09850 SXTW X8, W8
	0x03B09854 FADD S2, S1, S2
	0x03B09858 MOVI D1, 0x0
	0x03B0985C MOV V1.S[0], V6.S[0]
	0x03B09860 MADD X8, X8, X10, X11
	0x03B09864 FADD V3.2S, V1.2S, V3.2S
	0x03B09868 STR D3, [X8]
	0x03B0986C STR S2, [X8 + 0x8]
	0x03B09870 LDRSW X8, [X19]
	0x03B09874 LDR W10, [X23 + 0x18]
	0x03B09878 CMP W8, W10
	0x03B0987C B.CS 0x3B0A380
	0x03B09880 ADD W9, W8, 0x3
	0x03B09884 CMP W9, W10
	0x03B09888 B.CS 0x3B0A380
	0x03B0988C MOVZ W10, 0xC
	0x03B09890 ADD X11, X23, 0x20
	0x03B09894 MADD X8, X8, X10, X11
	0x03B09898 LDR V2, [X8 + 0x8]
	0x03B0989C LDR V4, [X8]
	0x03B098A0 FMOV S3, W31
	0x03B098A4 SXTW X8, W9
	0x03B098A8 FADD S2, S2, S3
	0x03B098AC MADD X8, X8, X10, X11
	0x03B098B0 FADD V1.2S, V1.2S, V4.2S
	0x03B098B4 STR D1, [X8]
	0x03B098B8 STR S2, [X8 + 0x8]
	0x03B098BC LDR W8, [X19]
	0x03B098C0 LDR W10, [X23 + 0x18]
	0x03B098C4 ADD W9, W8, 0x3
	0x03B098C8 CMP W9, W10
	0x03B098CC B.CS 0x3B0A380
	0x03B098D0 ADD W8, W8, 0x4
	0x03B098D4 CMP W8, W10
	0x03B098D8 B.CS 0x3B0A380
	0x03B098DC SXTW X9, W9
	0x03B098E0 MOVZ W10, 0xC
	0x03B098E4 ADD X11, X23, 0x20
	0x03B098E8 MADD X9, X9, X10, X11
	0x03B098EC LDR V1, [X9]
	0x03B098F0 LDR V2, [X9 + 0x8]
	0x03B098F4 SXTW X8, W8
	0x03B098F8 MADD X8, X8, X10, X11
	0x03B098FC STR D1, [X8]
	0x03B09900 STR S2, [X8 + 0x8]
	0x03B09904 LDR W8, [X19]
	0x03B09908 LDR W10, [X23 + 0x18]
	0x03B0990C ADD W9, W8, 0x2
	0x03B09910 CMP W9, W10
	0x03B09914 B.CS 0x3B0A380
	0x03B09918 ADD W8, W8, 0x5
	0x03B0991C CMP W8, W10
	0x03B09920 B.CS 0x3B0A380
	0x03B09924 SXTW X9, W9
	0x03B09928 MOVZ W10, 0xC
	0x03B0992C ADD X11, X23, 0x20
	0x03B09930 MADD X9, X9, X10, X11
	0x03B09934 LDR V1, [X9]
	0x03B09938 LDR V2, [X9 + 0x8]
	0x03B0993C SXTW X8, W8
	0x03B09940 MADD X8, X8, X10, X11
	0x03B09944 STR D1, [X8]
	0x03B09948 STR S2, [X8 + 0x8]
	0x03B0994C LDR W8, [X19]
	0x03B09950 LDR W9, [X23 + 0x18]
	0x03B09954 ADD W8, W8, 0x6
	0x03B09958 CMP W8, W9
	0x03B0995C B.CS 0x3B0A380
	0x03B09960 LDR V3, [X21 + 0x618]
	0x03B09964 FMOV S1, W31
	0x03B09968 SXTW X8, W8
	0x03B0996C MOVZ W9, 0xC
	0x03B09970 FMUL S3, S3, S15
	0x03B09974 FSUB S2, S11, S6
	0x03B09978 FADD S1, S14, S1
	0x03B0997C MADD X8, X8, X9, X23
	0x03B09980 FADD S3, S10, S3
	0x03B09984 STP S2, S3, [X8 + 0x20]
	0x03B09988 STR S1, [X8 + 0x28]
	0x03B0998C LDR W8, [X19]
	0x03B09990 LDR W9, [X23 + 0x18]
	0x03B09994 ADD W8, W8, 0x7
	0x03B09998 CMP W8, W9
	0x03B0999C B.CS 0x3B0A380
	0x03B099A0 LDR V3, [X21 + 0x618]
	0x03B099A4 SXTW X8, W8
	0x03B099A8 MOVZ W9, 0xC
	0x03B099AC MADD X8, X8, X9, X23
	0x03B099B0 FADD S3, S0, S3
	0x03B099B4 FMUL S3, S3, S15
	0x03B099B8 FSUB S3, S10, S3
	0x03B099BC STP S2, S3, [X8 + 0x20]
	0x03B099C0 STR S1, [X8 + 0x28]
	0x03B099C4 LDR W8, [X19]
	0x03B099C8 LDR W10, [X23 + 0x18]
	0x03B099CC ADD W9, W8, 0x7
	0x03B099D0 CMP W9, W10
	0x03B099D4 B.CS 0x3B0A380
	0x03B099D8 ADD W8, W8, 0x8
	0x03B099DC CMP W8, W10
	0x03B099E0 B.CS 0x3B0A380
	0x03B099E4 SXTW X9, W9
	0x03B099E8 MOVZ W10, 0xC
	0x03B099EC ADD X11, X23, 0x20
	0x03B099F0 MADD X9, X9, X10, X11
	0x03B099F4 LDR V2, [X9]
	0x03B099F8 LDR V3, [X9 + 0x8]
	0x03B099FC SXTW X8, W8
	0x03B09A00 MADD X8, X8, X10, X11
	0x03B09A04 STR D2, [X8]
	0x03B09A08 STR S3, [X8 + 0x8]
	0x03B09A0C LDR W8, [X19]
	0x03B09A10 LDR W10, [X23 + 0x18]
	0x03B09A14 ADD W9, W8, 0x6
	0x03B09A18 CMP W9, W10
	0x03B09A1C B.CS 0x3B0A380
	0x03B09A20 ADD W8, W8, 0x9
	0x03B09A24 CMP W8, W10
	0x03B09A28 B.CS 0x3B0A380
	0x03B09A2C SXTW X9, W9
	0x03B09A30 MOVZ W10, 0xC
	0x03B09A34 ADD X11, X23, 0x20
	0x03B09A38 MADD X9, X9, X10, X11
	0x03B09A3C LDR V2, [X9]
	0x03B09A40 LDR V3, [X9 + 0x8]
	0x03B09A44 SXTW X8, W8
	0x03B09A48 MADD X8, X8, X10, X11
	0x03B09A4C STR D2, [X8]
	0x03B09A50 STR S3, [X8 + 0x8]
	0x03B09A54 LDR W8, [X19]
	0x03B09A58 LDR W9, [X23 + 0x18]
	0x03B09A5C ADD W8, W8, 0xA
	0x03B09A60 CMP W8, W9
	0x03B09A64 B.CS 0x3B0A380
	0x03B09A68 LDR V3, [X21 + 0x618]
	0x03B09A6C FMOV S2, W31
	0x03B09A70 SXTW X8, W8
	0x03B09A74 MOVZ W9, 0xC
	0x03B09A78 FMUL S3, S3, S15
	0x03B09A7C FADD S2, S11, S2
	0x03B09A80 MADD X8, X8, X9, X23
	0x03B09A84 FADD S3, S10, S3
	0x03B09A88 STP S2, S3, [X8 + 0x20]
	0x03B09A8C STR S1, [X8 + 0x28]
	0x03B09A90 LDR W8, [X19]
	0x03B09A94 LDR W9, [X23 + 0x18]
	0x03B09A98 ADD W8, W8, 0xB
	0x03B09A9C CMP W8, W9
	0x03B09AA0 B.CS 0x3B0A380
	0x03B09AA4 LDR V3, [X21 + 0x618]
	0x03B09AA8 SXTW X8, W8
	0x03B09AAC MOVZ W9, 0xC
	0x03B09AB0 MADD X8, X8, X9, X23
	0x03B09AB4 FADD S0, S0, S3
	0x03B09AB8 FMUL S0, S0, S15
	0x03B09ABC FSUB S0, S10, S0
	0x03B09AC0 STP S2, S0, [X8 + 0x20]
	0x03B09AC4 STR S1, [X8 + 0x28]
	0x03B09AC8 LDR X8, [X21 + 0x368]
	0x03B09ACC CBZ X8, 0x3B0A384
	0x03B09AD0 LDR X8, [X8 + 0x60]
	0x03B09AD4 CBZ X8, 0x3B0A384
	0x03B09AD8 LDR W9, [X8 + 0x18]
	0x03B09ADC CMP W25, W9
	0x03B09AE0 B.CS 0x3B0A380
	0x03B09AE4 LDR X9, [X21 + 0x678]
	0x03B09AE8 STR X24, [X31 + 0x10]
	0x03B09AEC CBZ X9, 0x3B0A384
	0x03B09AF0 ADRP X10, 0x612000
	0x03B09AF4 LDR X10, [X10 + 0x608]
	0x03B09AF8 MOVZ W11, 0x50
	0x03B09AFC MADD X8, X25, X11, X8
	0x03B09B00 LDR X24, [X8 + 0x48]
	0x03B09B04 LDR X0, [X10]
	0x03B09B08 LDR W20, [X9 + 0x108]
	0x03B09B0C LDR W9, [X9 + 0x10C]
	0x03B09B10 STR X25, [X31 + 0x28]
	0x03B09B14 LDR W8, [X0 + 0xE0]
	0x03B09B18 STR W9, [X31 + 0x40]
	0x03B09B1C CBNZ W8, 0x3B09B24
	0x03B09B20 BL 0x1C16DFC
	0x03B09B24 ADD X0, X31, 0xD0
	0x03B09B28 MOV X1, X31
	0x03B09B2C BL 0x3C9C090
	0x03B09B30 MOV W28, W0
	0x03B09B34 ADD X0, X31, 0xD0
	0x03B09B38 MOV X1, X31
	0x03B09B3C BL 0x3C9C098
	0x03B09B40 LDR V11, [X21 + 0x618]
	0x03B09B44 MOV W22, W0
	0x03B09B48 ADD X0, X31, 0xD0
	0x03B09B4C MOV X1, X31
	0x03B09B50 BL 0x3C9C098
	0x03B09B54 MOV W26, W0
	0x03B09B58 ADD X0, X31, 0xD0
	0x03B09B5C MOV X1, X31
	0x03B09B60 BL 0x3C9C0A8
	0x03B09B64 LDR V10, [X21 + 0x618]
	0x03B09B68 MOV W29, W0
	0x03B09B6C ADD X0, X31, 0xD0
	0x03B09B70 MOV X1, X31
	0x03B09B74 BL 0x3C9C090
	0x03B09B78 MOV W25, W0
	0x03B09B7C ADD X0, X31, 0xD0
	0x03B09B80 MOV X1, X31
	0x03B09B84 BL 0x3C9C0A0
	0x03B09B88 MOV W27, W0
	0x03B09B8C ADD X0, X31, 0xD0
	0x03B09B90 MOV X1, X31
	0x03B09B94 BL 0x3C9C090
	0x03B09B98 STR W0, [X31 + 0x24]
	0x03B09B9C ADD X0, X31, 0xD0
	0x03B09BA0 MOV X1, X31
	0x03B09BA4 BL 0x3C9C0A0
	0x03B09BA8 STR W0, [X31 + 0x20]
	0x03B09BAC ADD X0, X31, 0xD0
	0x03B09BB0 MOV X1, X31
	0x03B09BB4 BL 0x3C9C090
	0x03B09BB8 STR W0, [X31 + 0x1C]
	0x03B09BBC ADD X0, X31, 0xD0
	0x03B09BC0 MOV X1, X31
	0x03B09BC4 BL 0x3C9C0A0
	0x03B09BC8 CBZ X24, 0x3B0A384
	0x03B09BCC LDRSW X8, [X19]
	0x03B09BD0 LDR W9, [X24 + 0x18]
	0x03B09BD4 CMP W8, W9
	0x03B09BD8 B.CS 0x3B0A380
	0x03B09BDC LDR V0, [X31 + 0x3C]
	0x03B09BE0 LDR W9, [X31 + 0x40]
	0x03B09BE4 SCVTF S3, W28
	0x03B09BE8 SCVTF S2, W22
	0x03B09BEC FMUL S0, S9, S0
	0x03B09BF0 FDIV S4, S0, S15
	0x03B09BF4 SCVTF S1, W20
	0x03B09BF8 FSUB S5, S2, S11
	0x03B09BFC SCVTF S2, W9
	0x03B09C00 FSUB S3, S3, S4
	0x03B09C04 ADD X8, X24, X8, 0x3, LSL
	0x03B09C08 FDIV S0, S5, S2
	0x03B09C0C FDIV S3, S3, S1
	0x03B09C10 STP S3, S0, [X8 + 0x20]
	0x03B09C14 LDR W8, [X19]
	0x03B09C18 LDR W9, [X24 + 0x18]
	0x03B09C1C ADD W8, W8, 0x1
	0x03B09C20 CMP W8, W9
	0x03B09C24 B.CS 0x3B0A380
	0x03B09C28 ADD W9, W29, W26
	0x03B09C2C SCVTF S5, W9
	0x03B09C30 SXTW X8, W8
	0x03B09C34 FADD S5, S10, S5
	0x03B09C38 ADD X8, X24, X8, 0x3, LSL
	0x03B09C3C FDIV S2, S5, S2
	0x03B09C40 STP S3, S2, [X8 + 0x20]
	0x03B09C44 LDR W8, [X19]
	0x03B09C48 LDR W9, [X24 + 0x18]
	0x03B09C4C ADD W8, W8, 0x2
	0x03B09C50 CMP W8, W9
	0x03B09C54 B.CS 0x3B0A380
	0x03B09C58 SCVTF S5, W25
	0x03B09C5C SCVTF S6, W27
	0x03B09C60 FMOV S3, 0.5
	0x03B09C64 FSUB S4, S5, S4
	0x03B09C68 FMUL S5, S6, S3
	0x03B09C6C SXTW X8, W8
	0x03B09C70 FADD S4, S4, S5
	0x03B09C74 ADD X8, X24, X8, 0x3, LSL
	0x03B09C78 FDIV S4, S4, S1
	0x03B09C7C STP S4, S2, [X8 + 0x20]
	0x03B09C80 LDR W8, [X19]
	0x03B09C84 LDR W9, [X24 + 0x18]
	0x03B09C88 ADD W8, W8, 0x3
	0x03B09C8C CMP W8, W9
	0x03B09C90 B.CS 0x3B0A380
	0x03B09C94 SXTW X8, W8
	0x03B09C98 ADD X8, X24, X8, 0x3, LSL
	0x03B09C9C STP S4, S0, [X8 + 0x20]
	0x03B09CA0 LDR W8, [X19]
	0x03B09CA4 LDR W9, [X24 + 0x18]
	0x03B09CA8 LDR X16, [X31 + 0x28]
	0x03B09CAC ADD W8, W8, 0x4
	0x03B09CB0 CMP W8, W9
	0x03B09CB4 B.CS 0x3B0A380
	0x03B09CB8 ADRP X9, 0xFFFFFFFFFCFE1000
	0x03B09CBC LDR V5, [X9 + 0x410]
	0x03B09CC0 SXTW X8, W8
	0x03B09CC4 ADD X8, X24, X8, 0x3, LSL
	0x03B09CC8 FMUL S5, S4, S5
	0x03B09CCC FSUB S6, S4, S5
	0x03B09CD0 STP S6, S0, [X8 + 0x20]
	0x03B09CD4 LDR W8, [X19]
	0x03B09CD8 LDR W9, [X24 + 0x18]
	0x03B09CDC ADD W8, W8, 0x5
	0x03B09CE0 CMP W8, W9
	0x03B09CE4 B.CS 0x3B0A380
	0x03B09CE8 SXTW X8, W8
	0x03B09CEC ADD X8, X24, X8, 0x3, LSL
	0x03B09CF0 STP S6, S2, [X8 + 0x20]
	0x03B09CF4 LDR W8, [X19]
	0x03B09CF8 LDR W9, [X24 + 0x18]
	0x03B09CFC ADD W8, W8, 0x6
	0x03B09D00 CMP W8, W9
	0x03B09D04 B.CS 0x3B0A380
	0x03B09D08 SXTW X8, W8
	0x03B09D0C FADD S4, S4, S5
	0x03B09D10 ADD X8, X24, X8, 0x3, LSL
	0x03B09D14 STP S4, S2, [X8 + 0x20]
	0x03B09D18 LDR W8, [X19]
	0x03B09D1C LDR W9, [X24 + 0x18]
	0x03B09D20 ADD W8, W8, 0x7
	0x03B09D24 CMP W8, W9
	0x03B09D28 B.CS 0x3B0A380
	0x03B09D2C SXTW X8, W8
	0x03B09D30 ADD X8, X24, X8, 0x3, LSL
	0x03B09D34 STP S4, S0, [X8 + 0x20]
	0x03B09D38 LDR W8, [X19]
	0x03B09D3C LDR W9, [X24 + 0x18]
	0x03B09D40 ADD W8, W8, 0x8
	0x03B09D44 CMP W8, W9
	0x03B09D48 B.CS 0x3B0A380
	0x03B09D4C LDR W9, [X31 + 0x24]
	0x03B09D50 LDR V4, [X31 + 0x38]
	0x03B09D54 SXTW X8, W8
	0x03B09D58 ADD X8, X24, X8, 0x3, LSL
	0x03B09D5C SCVTF S5, W9
	0x03B09D60 LDR W9, [X31 + 0x20]
	0x03B09D64 FMUL S4, S9, S4
	0x03B09D68 FDIV S4, S4, S15
	0x03B09D6C FADD S5, S4, S5
	0x03B09D70 SCVTF S6, W9
	0x03B09D74 FMUL S3, S6, S3
	0x03B09D78 FADD S3, S5, S3
	0x03B09D7C FDIV S3, S3, S1
	0x03B09D80 STP S3, S0, [X8 + 0x20]
	0x03B09D84 LDR W8, [X19]
	0x03B09D88 LDR W9, [X24 + 0x18]
	0x03B09D8C ADD W8, W8, 0x9
	0x03B09D90 CMP W8, W9
	0x03B09D94 B.CS 0x3B0A380
	0x03B09D98 SXTW X8, W8
	0x03B09D9C ADD X8, X24, X8, 0x3, LSL
	0x03B09DA0 STP S3, S2, [X8 + 0x20]
	0x03B09DA4 LDR W8, [X19]
	0x03B09DA8 LDR W9, [X24 + 0x18]
	0x03B09DAC LDR V6, [X31 + 0x34]
	0x03B09DB0 ADD W8, W8, 0xA
	0x03B09DB4 CMP W8, W9
	0x03B09DB8 B.CS 0x3B0A380
	0x03B09DBC LDR W9, [X31 + 0x1C]
	0x03B09DC0 SCVTF S5, W0
	0x03B09DC4 SXTW X8, W8
	0x03B09DC8 ADD X8, X24, X8, 0x3, LSL
	0x03B09DCC SCVTF S3, W9
	0x03B09DD0 FADD S3, S4, S3
	0x03B09DD4 FADD S3, S3, S5
	0x03B09DD8 FDIV S1, S3, S1
	0x03B09DDC STP S1, S2, [X8 + 0x20]
	0x03B09DE0 LDR W8, [X19]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x8DA000
	011 Move W8, [X22+1630]
	012 Move W19, W3
	013 Move W20, W1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x650000
	020 Move X0, [X0+840]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+1630], W8
	024 Move X10, [X21+872]
	025 Compare X10, 0
	026 JumpIfEqual {760}
	027 Move X9, [X10+56]
	028 Compare X9, 0
	029 JumpIfEqual {760}
	030 Move W8, [X9+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X8, [X10+96]
	033 Compare X8, 0
	034 JumpIfEqual {760}
	035 Move X26, W20
	036 Move W11, 376
	037 NotImplemented "Instruction MADD not yet implemented."
	038 NotImplemented "Instruction LDRSW not yet implemented."
	039 Move W9, [X8+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W9, 80
	042 NotImplemented "Instruction MADD not yet implemented."
	043 Move X9, [X8+48]
	044 Compare X9, 0
	045 JumpIfEqual {760}
	046 Move W24, [X8+40]
	047 Move W9, [X9+24]
	048 Add X25, X21, 872
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Add X21, X8, 32
	051 And W31, W19, 1
	052 Move W8, 4
	053 Move W9, 8
	054 NotImplemented "Instruction CSEL not yet implemented."
	055 Add W8, W24, W8
	056 Add W9, W8, 3
	057 NotImplemented "Instruction CMP not yet implemented."
	058 NotImplemented "Instruction CSEL not yet implemented."
	059 NotImplemented "Instruction SBFM not yet implemented."
	060 Move X1, X31
	061 Call Mathf.NextPowerOfTwo, X0
	062 Move X8, 0x650000
	063 Move X8, [X8+840]
	064 Move W22, W0
	065 Move X8, [X8]
	066 Move W9, [X8+224]
	067 Compare W9, 0
	068 JumpIfNotEqual {71}
	069 Move X0, X8
	070 Call 0x1C17DFC
	071 Move X0, X21
	072 Move W1, W22
	073 Move X2, X31
	074 Call TMP_MeshInfo.ResizeMeshInfo, X0, X1
	075 Move X10, [X25]
	076 Compare X10, 0
	077 JumpIfEqual {760}
	078 Move X8, [X10+56]
	079 Compare X8, 0
	080 JumpIfEqual {760}
	081 Move X9, X8
	082 Add X9, X9, 24
	083 Move W11, [X9]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move W11, 376
	086 NotImplemented "Instruction MADD not yet implemented."
	087 Move [X11+108], W24
	088 Move X10, [X10+96]
	089 Compare X10, 0
	090 JumpIfEqual {760}
	091 Move W11, [X10+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move W11, 80
	094 NotImplemented "Instruction MADD not yet implemented."
	095 Move X11, [X10+48]
	096 Compare X11, 0
	097 JumpIfEqual {760}
	098 Move W10, [X11+24]
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move W12, 376
	101 NotImplemented "Instruction MADD not yet implemented."
	102 Move V0, [X12+112]
	103 Move V1, [X12+120]
	104 Move X10, W24
	105 Move W12, 12
	106 NotImplemented "Instruction MADD not yet implemented."
	107 Move [X11+32], D0
	108 Move [X11+40], S1
	109 Move X11, [X25]
	110 Compare X11, 0
	111 JumpIfEqual {760}
	112 Move X11, [X11+96]
	113 Compare X11, 0
	114 JumpIfEqual {760}
	115 Move W12, [X11+24]
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move W12, [X9]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move W12, 80
	120 NotImplemented "Instruction MADD not yet implemented."
	121 Move X12, [X11+48]
	122 Compare X12, 0
	123 JumpIfEqual {760}
	124 Move W13, [X12+24]
	125 Add W11, W24, 1
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move W13, 376
	128 NotImplemented "Instruction MADD not yet implemented."
	129 Move V0, [X13+152]
	130 Move V1, [X13+160]
	131 Move X11, W11
	132 Move W13, 12
	133 NotImplemented "Instruction MADD not yet implemented."
	134 Move [X12+32], D0
	135 Move [X12+40], S1
	136 Move X12, [X25]
	137 Compare X12, 0
	138 JumpIfEqual {760}
	139 Move X12, [X12+96]
	140 Compare X12, 0
	141 JumpIfEqual {760}
	142 Move W13, [X12+24]
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Move W13, [X9]
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move W13, 80
	147 NotImplemented "Instruction MADD not yet implemented."
	148 Move X13, [X12+48]
	149 Compare X13, 0
	150 JumpIfEqual {760}
	151 Move W14, [X13+24]
	152 Add W12, W24, 2
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Move W14, 376
	155 NotImplemented "Instruction MADD not yet implemented."
	156 Move V0, [X14+192]
	157 Move V1, [X14+200]
	158 Move X12, W12
	159 Move W14, 12
	160 NotImplemented "Instruction MADD not yet implemented."
	161 Move [X13+32], D0
	162 Move [X13+40], S1
	163 Move X13, [X25]
	164 Compare X13, 0
	165 JumpIfEqual {760}
	166 Move X13, [X13+96]
	167 Compare X13, 0
	168 JumpIfEqual {760}
	169 Move W14, [X13+24]
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Move W14, [X9]
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Move W14, 80
	174 NotImplemented "Instruction MADD not yet implemented."
	175 Move X14, [X13+48]
	176 Compare X14, 0
	177 JumpIfEqual {760}
	178 Move W15, [X14+24]
	179 Add W13, W24, 3
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move W15, 376
	182 NotImplemented "Instruction MADD not yet implemented."
	183 Move V0, [X15+232]
	184 Move V1, [X15+240]
	185 Move X13, W13
	186 Move W15, 12
	187 NotImplemented "Instruction MADD not yet implemented."
	188 Move [X14+32], D0
	189 Move [X14+40], S1
	190 Move X14, [X25]
	191 Compare X14, 0
	192 JumpIfEqual {760}
	193 Move X14, [X14+96]
	194 Compare X14, 0
	195 JumpIfEqual {760}
	196 Move W15, [X14+24]
	197 NotImplemented "Instruction CMP not yet implemented."
	198 Move W15, [X9]
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Move W15, 80
	201 Move W16, 376
	202 NotImplemented "Instruction MADD not yet implemented."
	203 Move X15, [X14+72]
	204 NotImplemented "Instruction NOP not yet implemented."
	205 NotImplemented "Instruction MADD not yet implemented."
	206 Add X14, X14, 124
	207 Move V0, [X14]
	208 Compare X15, 0
	209 JumpIfEqual {760}
	210 Move W16, [X15+24]
	211 NotImplemented "Instruction CMP not yet implemented."
	212 Add X15, X15, X10
	213 Move [X15+32], D0
	214 Move X15, [X25]
	215 Compare X15, 0
	216 JumpIfEqual {760}
	217 Move X15, [X15+96]
	218 Compare X15, 0
	219 JumpIfEqual {760}
	220 Move W16, [X15+24]
	221 NotImplemented "Instruction CMP not yet implemented."
	222 Move W16, [X9]
	223 NotImplemented "Instruction CMP not yet implemented."
	224 Move W16, 80
	225 Move W17, 376
	226 NotImplemented "Instruction MADD not yet implemented."
	227 Move X16, [X15+72]
	228 NotImplemented "Instruction NOP not yet implemented."
	229 NotImplemented "Instruction MADD not yet implemented."
	230 Add X15, X15, 164
	231 Move V0, [X15]
	232 Compare X16, 0
	233 JumpIfEqual {760}
	234 Move W17, [X16+24]
	235 NotImplemented "Instruction CMP not yet implemented."
	236 Add X16, X16, X11
	237 Move [X16+32], D0
	238 Move X16, [X25]
	239 Compare X16, 0
	240 JumpIfEqual {760}
	241 Move X16, [X16+96]
	242 Compare X16, 0
	243 JumpIfEqual {760}
	244 Move W17, [X16+24]
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Move W17, [X9]
	247 NotImplemented "Instruction CMP not yet implemented."
	248 Move W17, 80
	249 Move W0, 376
	250 NotImplemented "Instruction MADD not yet implemented."
	251 Move X17, [X16+72]
	252 NotImplemented "Instruction NOP not yet implemented."
	253 NotImplemented "Instruction MADD not yet implemented."
	254 Add X16, X16, 204
	255 Move V0, [X16]
	256 Compare X17, 0
	257 JumpIfEqual {760}
	258 Move W0, [X17+24]
	259 NotImplemented "Instruction CMP not yet implemented."
	260 Add X17, X17, X12
	261 Move [X17+32], D0
	262 Move X17, [X25]
	263 Compare X17, 0
	264 JumpIfEqual {760}
	265 Move X17, [X17+96]
	266 Compare X17, 0
	267 JumpIfEqual {760}
	268 Move W0, [X17+24]
	269 NotImplemented "Instruction CMP not yet implemented."
	270 Move W0, [X9]
	271 NotImplemented "Instruction CMP not yet implemented."
	272 Move W0, 80
	273 Move W1, 376
	274 NotImplemented "Instruction MADD not yet implemented."
	275 Move X0, [X17+72]
	276 NotImplemented "Instruction NOP not yet implemented."
	277 NotImplemented "Instruction MADD not yet implemented."
	278 Add X17, X17, 244
	279 Move V0, [X17]
	280 Compare X0, 0
	281 JumpIfEqual {760}
	282 Move W1, [X0+24]
	283 NotImplemented "Instruction CMP not yet implemented."
	284 Add X0, X0, X13
	285 Move [X0+32], D0
	286 Move TEMP, X19
	287 And TEMP, TEMP, 1
	288 Compare TEMP, 1
	289 JumpIfNotEqual {374}
	290 Move X0, [X25]
	291 Compare X0, 0
	292 JumpIfEqual {760}
	293 Move X0, [X0+96]
	294 Compare X0, 0
	295 JumpIfEqual {760}
	296 Move W1, [X0+24]
	297 NotImplemented "Instruction CMP not yet implemented."
	298 Move W1, [X9]
	299 NotImplemented "Instruction CMP not yet implemented."
	300 Move W1, 80
	301 NotImplemented "Instruction MADD not yet implemented."
	302 Move X0, [X0+72]
	303 Compare X0, 0
	304 JumpIfEqual {760}
	305 Move W2, [X0+24]
	306 Add W1, W24, 4
	307 NotImplemented "Instruction CMP not yet implemented."
	308 Move V0, [X14]
	309 Add X14, X0, W1
	310 Move [X14+32], D0
	311 Move X14, [X25]
	312 Compare X14, 0
	313 JumpIfEqual {760}
	314 Move X14, [X14+96]
	315 Compare X14, 0
	316 JumpIfEqual {760}
	317 Move W0, [X14+24]
	318 NotImplemented "Instruction CMP not yet implemented."
	319 Move W0, [X9]
	320 NotImplemented "Instruction CMP not yet implemented."
	321 Move W0, 80
	322 NotImplemented "Instruction MADD not yet implemented."
	323 Move X14, [X14+72]
	324 Compare X14, 0
	325 JumpIfEqual {760}
	326 Move W1, [X14+24]
	327 Add W0, W24, 5
	328 NotImplemented "Instruction CMP not yet implemented."
	329 Move V0, [X15]
	330 Add X14, X14, W0
	331 Move [X14+32], D0
	332 Move X14, [X25]
	333 Compare X14, 0
	334 JumpIfEqual {760}
	335 Move X14, [X14+96]
	336 Compare X14, 0
	337 JumpIfEqual {760}
	338 Move W15, [X14+24]
	339 NotImplemented "Instruction CMP not yet implemented."
	340 Move W15, [X9]
	341 NotImplemented "Instruction CMP not yet implemented."
	342 Move W15, 80
	343 NotImplemented "Instruction MADD not yet implemented."
	344 Move X14, [X14+72]
	345 Compare X14, 0
	346 JumpIfEqual {760}
	347 Move W0, [X14+24]
	348 Add W15, W24, 6
	349 NotImplemented "Instruction CMP not yet implemented."
	350 Move V0, [X16]
	351 Add X14, X14, W15
	352 Move [X14+32], D0
	353 Move X14, [X25]
	354 Compare X14, 0
	355 JumpIfEqual {760}
	356 Move X14, [X14+96]
	357 Compare X14, 0
	358 JumpIfEqual {760}
	359 Move W15, [X14+24]
	360 NotImplemented "Instruction CMP not yet implemented."
	361 Move W15, [X9]
	362 NotImplemented "Instruction CMP not yet implemented."
	363 Move W15, 80
	364 NotImplemented "Instruction MADD not yet implemented."
	365 Move X14, [X14+72]
	366 Compare X14, 0
	367 JumpIfEqual {760}
	368 Move W16, [X14+24]
	369 Add W15, W24, 7
	370 NotImplemented "Instruction CMP not yet implemented."
	371 Move V0, [X17]
	372 Add X14, X14, W15
	373 Move [X14+32], D0
	374 Move X14, [X25]
	375 Compare X14, 0
	376 JumpIfEqual {760}
	377 Move X14, [X14+96]
	378 Compare X14, 0
	379 JumpIfEqual {760}
	380 Move W15, [X14+24]
	381 NotImplemented "Instruction CMP not yet implemented."
	382 Move W15, [X9]
	383 NotImplemented "Instruction CMP not yet implemented."
	384 Move W15, 80
	385 Move W16, 376
	386 NotImplemented "Instruction MADD not yet implemented."
	387 Move X15, [X14+80]
	388 NotImplemented "Instruction NOP not yet implemented."
	389 NotImplemented "Instruction MADD not yet implemented."
	390 Add X14, X14, 132
	391 Move V0, [X14]
	392 Compare X15, 0
	393 JumpIfEqual {760}
	394 Move W16, [X15+24]
	395 NotImplemented "Instruction CMP not yet implemented."
	396 Add X15, X15, X10
	397 Move [X15+32], D0
	398 Move X15, [X25]
	399 Compare X15, 0
	400 JumpIfEqual {760}
	401 Move X15, [X15+96]
	402 Compare X15, 0
	403 JumpIfEqual {760}
	404 Move W16, [X15+24]
	405 NotImplemented "Instruction CMP not yet implemented."
	406 Move W16, [X9]
	407 NotImplemented "Instruction CMP not yet implemented."
	408 Move W16, 80
	409 Move W17, 376
	410 NotImplemented "Instruction MADD not yet implemented."
	411 Move X16, [X15+80]
	412 NotImplemented "Instruction NOP not yet implemented."
	413 NotImplemented "Instruction MADD not yet implemented."
	414 Add X15, X15, 172
	415 Move V0, [X15]
	416 Compare X16, 0
	417 JumpIfEqual {760}
	418 Move W17, [X16+24]
	419 NotImplemented "Instruction CMP not yet implemented."
	420 Add X16, X16, X11
	421 Move [X16+32], D0
	422 Move X16, [X25]
	423 Compare X16, 0
	424 JumpIfEqual {760}
	425 Move X16, [X16+96]
	426 Compare X16, 0
	427 JumpIfEqual {760}
	428 Move W17, [X16+24]
	429 NotImplemented "Instruction CMP not yet implemented."
	430 Move W17, [X9]
	431 NotImplemented "Instruction CMP not yet implemented."
	432 Move W17, 80
	433 Move W0, 376
	434 NotImplemented "Instruction MADD not yet implemented."
	435 Move X17, [X16+80]
	436 NotImplemented "Instruction NOP not yet implemented."
	437 NotImplemented "Instruction MADD not yet implemented."
	438 Add X16, X16, 212
	439 Move V0, [X16]
	440 Compare X17, 0
	441 JumpIfEqual {760}
	442 Move W0, [X17+24]
	443 NotImplemented "Instruction CMP not yet implemented."
	444 Add X17, X17, X12
	445 Move [X17+32], D0
	446 Move X17, [X25]
	447 Compare X17, 0
	448 JumpIfEqual {760}
	449 Move X17, [X17+96]
	450 Compare X17, 0
	451 JumpIfEqual {760}
	452 Move W0, [X17+24]
	453 NotImplemented "Instruction CMP not yet implemented."
	454 Move W0, [X9]
	455 NotImplemented "Instruction CMP not yet implemented."
	456 Move W0, 80
	457 Move W1, 376
	458 NotImplemented "Instruction MADD not yet implemented."
	459 Move X0, [X17+80]
	460 NotImplemented "Instruction NOP not yet implemented."
	461 NotImplemented "Instruction MADD not yet implemented."
	462 Add X17, X17, 252
	463 Move V0, [X17]
	464 Compare X0, 0
	465 JumpIfEqual {760}
	466 Move W1, [X0+24]
	467 NotImplemented "Instruction CMP not yet implemented."
	468 Add X0, X0, X13
	469 Move [X0+32], D0
	470 Move TEMP, X19
	471 And TEMP, TEMP, 1
	472 Compare TEMP, 1
	473 JumpIfNotEqual {558}
	474 Move X0, [X25]
	475 Compare X0, 0
	476 JumpIfEqual {760}
	477 Move X0, [X0+96]
	478 Compare X0, 0
	479 JumpIfEqual {760}
	480 Move W1, [X0+24]
	481 NotImplemented "Instruction CMP not yet implemented."
	482 Move W1, [X9]
	483 NotImplemented "Instruction CMP not yet implemented."
	484 Move W1, 80
	485 NotImplemented "Instruction MADD not yet implemented."
	486 Move X0, [X0+80]
	487 Compare X0, 0
	488 JumpIfEqual {760}
	489 Move W2, [X0+24]
	490 Add W1, W24, 4
	491 NotImplemented "Instruction CMP not yet implemented."
	492 Move V0, [X14]
	493 Add X14, X0, W1
	494 Move [X14+32], D0
	495 Move X14, [X25]
	496 Compare X14, 0
	497 JumpIfEqual {760}
	498 Move X14, [X14+96]
	499 Compare X14, 0
	500 JumpIfEqual {760}
	501 Move W0, [X14+24]
	502 NotImplemented "Instruction CMP not yet implemented."
	503 Move W0, [X9]
	504 NotImplemented "Instruction CMP not yet implemented."
	505 Move W0, 80
	506 NotImplemented "Instruction MADD not yet implemented."
	507 Move X14, [X14+80]
	508 Compare X14, 0
	509 JumpIfEqual {760}
	510 Move W1, [X14+24]
	511 Add W0, W24, 5
	512 NotImplemented "Instruction CMP not yet implemented."
	513 Move V0, [X15]
	514 Add X14, X14, W0
	515 Move [X14+32], D0
	516 Move X14, [X25]
	517 Compare X14, 0
	518 JumpIfEqual {760}
	519 Move X14, [X14+96]
	520 Compare X14, 0
	521 JumpIfEqual {760}
	522 Move W15, [X14+24]
	523 NotImplemented "Instruction CMP not yet implemented."
	524 Move W15, [X9]
	525 NotImplemented "Instruction CMP not yet implemented."
	526 Move W15, 80
	527 NotImplemented "Instruction MADD not yet implemented."
	528 Move X14, [X14+80]
	529 Compare X14, 0
	530 JumpIfEqual {760}
	531 Move W0, [X14+24]
	532 Add W15, W24, 6
	533 NotImplemented "Instruction CMP not yet implemented."
	534 Move V0, [X16]
	535 Add X14, X14, W15
	536 Move [X14+32], D0
	537 Move X14, [X25]
	538 Compare X14, 0
	539 JumpIfEqual {760}
	540 Move X14, [X14+96]
	541 Compare X14, 0
	542 JumpIfEqual {760}
	543 Move W15, [X14+24]
	544 NotImplemented "Instruction CMP not yet implemented."
	545 Move W15, [X9]
	546 NotImplemented "Instruction CMP not yet implemented."
	547 Move W15, 80
	548 NotImplemented "Instruction MADD not yet implemented."
	549 Move X14, [X14+80]
	550 Compare X14, 0
	551 JumpIfEqual {760}
	552 Move W16, [X14+24]
	553 Add W15, W24, 7
	554 NotImplemented "Instruction CMP not yet implemented."
	555 Move V0, [X17]
	556 Add X14, X14, W15
	557 Move [X14+32], D0
	558 Move X14, [X25]
	559 Compare X14, 0
	560 JumpIfEqual {760}
	561 Move X14, [X14+96]
	562 Compare X14, 0
	563 JumpIfEqual {760}
	564 Move W15, [X14+24]
	565 NotImplemented "Instruction CMP not yet implemented."
	566 Move W15, [X9]
	567 NotImplemented "Instruction CMP not yet implemented."
	568 Move W15, 80
	569 NotImplemented "Instruction MADD not yet implemented."
	570 Move X14, [X14+88]
	571 Compare X14, 0
	572 JumpIfEqual {760}
	573 Move W15, [X14+24]
	574 NotImplemented "Instruction CMP not yet implemented."
	575 Move W15, 376
	576 NotImplemented "Instruction MADD not yet implemented."
	577 Move W15, [X15+148]
	578 Add X10, X14, X10
	579 Move [X10+32], W15
	580 Move X10, [X25]
	581 Compare X10, 0
	582 JumpIfEqual {760}
	583 Move X10, [X10+96]
	584 Compare X10, 0
	585 JumpIfEqual {760}
	586 Move W14, [X10+24]
	587 NotImplemented "Instruction CMP not yet implemented."
	588 Move W14, [X9]
	589 NotImplemented "Instruction CMP not yet implemented."
	590 Move W14, 80
	591 NotImplemented "Instruction MADD not yet implemented."
	592 Move X10, [X10+88]
	593 Compare X10, 0
	594 JumpIfEqual {760}
	595 Move W14, [X10+24]
	596 NotImplemented "Instruction CMP not yet implemented."
	597 Move W14, 376
	598 NotImplemented "Instruction MADD not yet implemented."
	599 Move W14, [X14+188]
	600 Add X10, X10, X11
	601 Move [X10+32], W14
	602 Move X10, [X25]
	603 Compare X10, 0
	604 JumpIfEqual {760}
	605 Move X10, [X10+96]
	606 Compare X10, 0
	607 JumpIfEqual {760}
	608 Move W11, [X10+24]
	609 NotImplemented "Instruction CMP not yet implemented."
	610 Move W11, [X9]
	611 NotImplemented "Instruction CMP not yet implemented."
	612 Move W11, 80
	613 NotImplemented "Instruction MADD not yet implemented."
	614 Move X10, [X10+88]
	615 Compare X10, 0
	616 JumpIfEqual {760}
	617 Move W11, [X10+24]
	618 NotImplemented "Instruction CMP not yet implemented."
	619 Move W11, 376
	620 NotImplemented "Instruction MADD not yet implemented."
	621 Move W11, [X11+228]
	622 Add X10, X10, X12
	623 Move [X10+32], W11
	624 Move X10, [X25]
	625 Compare X10, 0
	626 JumpIfEqual {760}
	627 Move X10, [X10+96]
	628 Compare X10, 0
	629 JumpIfEqual {760}
	630 Move W11, [X10+24]
	631 NotImplemented "Instruction CMP not yet implemented."
	632 Move W9, [X9]
	633 NotImplemented "Instruction CMP not yet implemented."
	634 Move W9, 80
	635 NotImplemented "Instruction MADD not yet implemented."
	636 Move X9, [X9+88]
	637 Compare X9, 0
	638 JumpIfEqual {760}
	639 Move W10, [X9+24]
	640 NotImplemented "Instruction CMP not yet implemented."
	641 Move W10, 376
	642 NotImplemented "Instruction MADD not yet implemented."
	643 Move W8, [X8+268]
	644 Add X9, X9, X13
	645 Move [X9+32], W8
	646 Move TEMP, X19
	647 And TEMP, TEMP, 1
	648 Compare TEMP, 1
	649 JumpIfNotEqual {734}
	650 Move X8, [X25]
	651 Compare X8, 0
	652 JumpIfEqual {760}
	653 Move X8, [X8+96]
	654 Compare X8, 0
	655 JumpIfEqual {760}
	656 Move W9, [X8+24]
	657 NotImplemented "Instruction CMP not yet implemented."
	658 Move W9, 80
	659 NotImplemented "Instruction MADD not yet implemented."
	660 Move X8, [X8+88]
	661 Compare X8, 0
	662 JumpIfEqual {760}
	663 Move W10, [X8+24]
	664 Add W9, W24, 4
	665 NotImplemented "Instruction CMP not yet implemented."
	666 Add X8, X8, W9
	667 Move TEMP, 0x7F0000
	668 Not TEMP
	669 Move W9, TEMP
	670 Move [X8+32], W9
	671 Move X8, [X25]
	672 Compare X8, 0
	673 JumpIfEqual {760}
	674 Move X8, [X8+96]
	675 Compare X8, 0
	676 JumpIfEqual {760}
	677 Move W9, [X8+24]
	678 NotImplemented "Instruction CMP not yet implemented."
	679 Move W9, 80
	680 NotImplemented "Instruction MADD not yet implemented."
	681 Move X8, [X8+88]
	682 Compare X8, 0
	683 JumpIfEqual {760}
	684 Move W10, [X8+24]
	685 Add W9, W24, 5
	686 NotImplemented "Instruction CMP not yet implemented."
	687 Add X8, X8, W9
	688 Move TEMP, 0x7F0000
	689 Not TEMP
	690 Move W9, TEMP
	691 Move [X8+32], W9
	692 Move X8, [X25]
	693 Compare X8, 0
	694 JumpIfEqual {760}
	695 Move X8, [X8+96]
	696 Compare X8, 0
	697 JumpIfEqual {760}
	698 Move W9, [X8+24]
	699 NotImplemented "Instruction CMP not yet implemented."
	700 Move W9, 80
	701 NotImplemented "Instruction MADD not yet implemented."
	702 Move X8, [X8+88]
	703 Compare X8, 0
	704 JumpIfEqual {760}
	705 Move W10, [X8+24]
	706 Add W9, W24, 6
	707 NotImplemented "Instruction CMP not yet implemented."
	708 Add X8, X8, W9
	709 Move TEMP, 0x7F0000
	710 Not TEMP
	711 Move W9, TEMP
	712 Move [X8+32], W9
	713 Move X8, [X25]
	714 Compare X8, 0
	715 JumpIfEqual {760}
	716 Move X8, [X8+96]
	717 Compare X8, 0
	718 JumpIfEqual {760}
	719 Move W9, [X8+24]
	720 NotImplemented "Instruction CMP not yet implemented."
	721 Move W9, 80
	722 NotImplemented "Instruction MADD not yet implemented."
	723 Move X8, [X8+88]
	724 Compare X8, 0
	725 JumpIfEqual {760}
	726 Move W10, [X8+24]
	727 Add W9, W24, 7
	728 NotImplemented "Instruction CMP not yet implemented."
	729 Add X8, X8, W9
	730 Move TEMP, 0x7F0000
	731 Not TEMP
	732 Move W9, TEMP
	733 Move [X8+32], W9
	734 Move X8, [X25]
	735 Compare X8, 0
	736 JumpIfEqual {760}
	737 Move X8, [X8+96]
	738 Compare X8, 0
	739 JumpIfEqual {760}
	740 Move W9, [X8+24]
	741 NotImplemented "Instruction CMP not yet implemented."
	742 And W31, W19, 1
	743 Move W9, 4
	744 Move W10, 8
	745 Move W11, 80
	746 NotImplemented "Instruction CSEL not yet implemented."
	747 Add W9, W24, W9
	748 NotImplemented "Instruction MADD not yet implemented."
	749 Move X20, [X31+64]
	750 Move X19, [X31+72]
	751 Move X22, [X31+48]
	752 Move X21, [X31+56]
	753 Move X24, [X31+32]
	754 Move X23, [X31+40]
	755 Move X26, [X31+16]
	756 Move X25, [X31+24]
	757 Move [X8+40], W9
	758 Move X30, [X31+80]
	759 Return 
	760 Call 0x1C17F20
	761 Call 0x1C17F28

Method: System.Void FillSpriteVertexBuffers(System.Int32 i, System.Int32 index_X4)

Disassembly:
	0x03B09DE4 LDR W9, [X24 + 0x18]
	0x03B09DE8 ADD W8, W8, 0xB
	0x03B09DEC CMP W8, W9
	0x03B09DF0 B.CS 0x3B0A380
	0x03B09DF4 SXTW X8, W8
	0x03B09DF8 ADD X8, X24, X8, 0x3, LSL
	0x03B09DFC STP S1, S0, [X8 + 0x20]
	0x03B09E00 LDRSW X9, [X19]
	0x03B09E04 LDR W8, [X23 + 0x18]
	0x03B09E08 ADD W10, W9, 0x2
	0x03B09E0C CMP W10, W8
	0x03B09E10 B.CS 0x3B0A380
	0x03B09E14 LDR X8, [X21 + 0x368]
	0x03B09E18 LDR X15, [X31 + 0x10]
	0x03B09E1C CBZ X8, 0x3B0A384
	0x03B09E20 LDR X8, [X8 + 0x60]
	0x03B09E24 CBZ X8, 0x3B0A384
	0x03B09E28 LDR W11, [X8 + 0x18]
	0x03B09E2C CMP W16, W11
	0x03B09E30 B.CS 0x3B0A380
	0x03B09E34 MOVZ W11, 0x50
	0x03B09E38 MADD X8, X16, X11, X8
	0x03B09E3C LDR X8, [X8 + 0x50]
	0x03B09E40 CBZ X8, 0x3B0A384
	0x03B09E44 LDR W11, [X8 + 0x18]
	0x03B09E48 CMP W9, W11
	0x03B09E4C B.CS 0x3B0A380
	0x03B09E50 LDR V0, [X31 + 0x1A8]
	0x03B09E54 MOVZ W11, 0xC
	0x03B09E58 ADD X9, X8, X9, 0x3, LSL
	0x03B09E5C SMADDL X10, X10, X11, X23
	0x03B09E60 FABS S0, S0
	0x03B09E64 LDR V2, [X10 + 0x20]
	0x03B09E68 STR W31, [X9 + 0x20]
	0x03B09E6C STR S0, [X9 + 0x24]
	0x03B09E70 LDR W9, [X19]
	0x03B09E74 LDR W10, [X8 + 0x18]
	0x03B09E78 ADD W9, W9, 0x1
	0x03B09E7C CMP W9, W10
	0x03B09E80 B.CS 0x3B0A380
	0x03B09E84 ADRP X10, 0xFFFFFFFFFCFE1000
	0x03B09E88 LDR V1, [X10 + 0xC]
	0x03B09E8C MOVZ W10, 0x45800000
	0x03B09E90 FSUB S2, S2, S8
	0x03B09E94 FMOV S3, W10
	0x03B09E98 MOVZ W10, 0x7F800000
	0x03B09E9C FDIV S2, S2, S6
	0x03B09EA0 FMOV S4, W10
	0x03B09EA4 MOVZ W10, 0xD5000000
	0x03B09EA8 FMUL S2, S2, S1
	0x03B09EAC SXTW X9, W9
	0x03B09EB0 FCMP S2, S4
	0x03B09EB4 FMOV S4, W10
	0x03B09EB8 MOVZ W10, 0x8000
	0x03B09EBC MOVK W10, 0x43FF0000
	0x03B09EC0 ADD X9, X8, X9, 0x3, LSL
	0x03B09EC4 STR W10, [X9 + 0x20]
	0x03B09EC8 STR S0, [X9 + 0x24]
	0x03B09ECC LDR W9, [X19]
	0x03B09ED0 FCVTZS W10, S2
	0x03B09ED4 SCVTF S2, W10
	0x03B09ED8 LDR W10, [X8 + 0x18]
	0x03B09EDC ADD W9, W9, 0x2
	0x03B09EE0 FMUL S2, S2, S3
	0x03B09EE4 FCSEL S2, S4, S2, EQ
	0x03B09EE8 CMP W9, W10
	0x03B09EEC B.CS 0x3B0A380
	0x03B09EF0 SXTW X9, W9
	0x03B09EF4 FADD S3, S2, S1
	0x03B09EF8 ADD X9, X8, X9, 0x3, LSL
	0x03B09EFC STP S3, S0, [X9 + 0x20]
	0x03B09F00 LDR W9, [X19]
	0x03B09F04 LDR W10, [X8 + 0x18]
	0x03B09F08 ADD W9, W9, 0x3
	0x03B09F0C CMP W9, W10
	0x03B09F10 B.CS 0x3B0A380
	0x03B09F14 SXTW X9, W9
	0x03B09F18 FMOV S3, W31
	0x03B09F1C FADD S2, S2, S3
	0x03B09F20 ADD X9, X8, X9, 0x3, LSL
	0x03B09F24 STP S2, S0, [X9 + 0x20]
	0x03B09F28 LDR W9, [X19]
	0x03B09F2C LDR W11, [X23 + 0x18]
	0x03B09F30 ADD W10, W9, 0x4
	0x03B09F34 CMP W10, W11
	0x03B09F38 B.CS 0x3B0A380
	0x03B09F3C ADD W9, W9, 0x6
	0x03B09F40 CMP W9, W11
	0x03B09F44 B.CS 0x3B0A380
	0x03B09F48 SXTW X10, W10
	0x03B09F4C MOVZ W12, 0xC
	0x03B09F50 ADD X11, X23, 0x20
	0x03B09F54 MUL X14, X10, X12
	0x03B09F58 LDR V2, [X11, X14, LSL]
	0x03B09F5C MOVZ W13, 0x45800000
	0x03B09F60 MOVZ W14, 0x7F800000
	0x03B09F64 FMOV S3, W13
	0x03B09F68 FSUB S2, S2, S8
	0x03B09F6C FDIV S2, S2, S6
	0x03B09F70 MOVZ W13, 0xD5000000
	0x03B09F74 FMOV S4, W14
	0x03B09F78 LDR W14, [X8 + 0x18]
	0x03B09F7C FMUL S2, S2, S1
	0x03B09F80 FCMP S2, S4
	0x03B09F84 FMOV S4, W13
	0x03B09F88 FCVTZS W13, S2
	0x03B09F8C SCVTF S2, W13
	0x03B09F90 FMUL S2, S2, S3
	0x03B09F94 FCSEL S2, S4, S2, EQ
	0x03B09F98 CMP W10, W14
	0x03B09F9C B.CS 0x3B0A380
	0x03B09FA0 FMOV S4, W31
	0x03B09FA4 SMADDL X9, X9, X12, X31
	0x03B09FA8 ADD X10, X8, X10, 0x3, LSL
	0x03B09FAC FADD S4, S2, S4
	0x03B09FB0 LDR V3, [X11, X9, LSL]
	0x03B09FB4 STP S4, S0, [X10 + 0x20]
	0x03B09FB8 LDR W9, [X19]
	0x03B09FBC LDR W10, [X8 + 0x18]
	0x03B09FC0 ADD W9, W9, 0x5
	0x03B09FC4 CMP W9, W10
	0x03B09FC8 B.CS 0x3B0A380
	0x03B09FCC FSUB S3, S3, S8
	0x03B09FD0 MOVZ W10, 0x45800000
	0x03B09FD4 SXTW X9, W9
	0x03B09FD8 FMOV S4, W10
	0x03B09FDC MOVZ W10, 0x7F800000
	0x03B09FE0 FADD S2, S2, S1
	0x03B09FE4 FDIV S3, S3, S6
	0x03B09FE8 ADD X9, X8, X9, 0x3, LSL
	0x03B09FEC FMOV S5, W10
	0x03B09FF0 MOVZ W10, 0xD5000000
	0x03B09FF4 FMUL S3, S3, S1
	0x03B09FF8 STP S2, S0, [X9 + 0x20]
	0x03B09FFC FCMP S3, S5
	0x03B0A000 FMOV S5, W10
	0x03B0A004 LDR W9, [X19]
	0x03B0A008 FCVTZS W10, S3
	0x03B0A00C SCVTF S2, W10
	0x03B0A010 LDR W10, [X8 + 0x18]
	0x03B0A014 FMUL S2, S2, S4
	0x03B0A018 ADD W9, W9, 0x6
	0x03B0A01C FCSEL S2, S5, S2, EQ
	0x03B0A020 CMP W9, W10
	0x03B0A024 B.CS 0x3B0A380
	0x03B0A028 SXTW X9, W9
	0x03B0A02C FADD S3, S2, S1
	0x03B0A030 ADD X9, X8, X9, 0x3, LSL
	0x03B0A034 STP S3, S0, [X9 + 0x20]
	0x03B0A038 LDR W9, [X19]
	0x03B0A03C LDR W10, [X8 + 0x18]
	0x03B0A040 ADD W9, W9, 0x7
	0x03B0A044 CMP W9, W10
	0x03B0A048 B.CS 0x3B0A380
	0x03B0A04C SXTW X9, W9
	0x03B0A050 FMOV S3, W31
	0x03B0A054 FADD S2, S2, S3
	0x03B0A058 ADD X9, X8, X9, 0x3, LSL
	0x03B0A05C STP S2, S0, [X9 + 0x20]
	0x03B0A060 LDR W9, [X19]
	0x03B0A064 LDR W10, [X23 + 0x18]
	0x03B0A068 ADD W9, W9, 0x8
	0x03B0A06C CMP W9, W10
	0x03B0A070 B.CS 0x3B0A380
	0x03B0A074 SXTW X9, W9
	0x03B0A078 MOVZ W10, 0xC
	0x03B0A07C MADD X10, X9, X10, X23
	0x03B0A080 LDR V2, [X10 + 0x20]
	0x03B0A084 MOVZ W10, 0x45800000
	0x03B0A088 MOVZ W11, 0x7F800000
	0x03B0A08C FMOV S3, W10
	0x03B0A090 FSUB S2, S2, S8
	0x03B0A094 FDIV S2, S2, S6
	0x03B0A098 MOVZ W10, 0xD5000000
	0x03B0A09C FMOV S4, W11
	0x03B0A0A0 LDR W11, [X8 + 0x18]
	0x03B0A0A4 FMUL S2, S2, S1
	0x03B0A0A8 FCMP S2, S4
	0x03B0A0AC FMOV S4, W10
	0x03B0A0B0 FCVTZS W10, S2
	0x03B0A0B4 SCVTF S2, W10
	0x03B0A0B8 FMUL S2, S2, S3
	0x03B0A0BC FCSEL S2, S4, S2, EQ
	0x03B0A0C0 CMP W9, W11
	0x03B0A0C4 B.CS 0x3B0A380
	0x03B0A0C8 FMOV S3, W31
	0x03B0A0CC ADD X9, X8, X9, 0x3, LSL
	0x03B0A0D0 FADD S3, S2, S3
	0x03B0A0D4 STP S3, S0, [X9 + 0x20]
	0x03B0A0D8 LDR W9, [X19]
	0x03B0A0DC LDR W10, [X8 + 0x18]
	0x03B0A0E0 ADD W9, W9, 0x9
	0x03B0A0E4 CMP W9, W10
	0x03B0A0E8 B.CS 0x3B0A380
	0x03B0A0EC SXTW X9, W9
	0x03B0A0F0 FADD S1, S2, S1
	0x03B0A0F4 ADD X9, X8, X9, 0x3, LSL
	0x03B0A0F8 STP S1, S0, [X9 + 0x20]
	0x03B0A0FC LDR W9, [X19]
	0x03B0A100 LDR W10, [X8 + 0x18]
	0x03B0A104 ADD W9, W9, 0xA
	0x03B0A108 CMP W9, W10
	0x03B0A10C B.CS 0x3B0A380
	0x03B0A110 SXTW X9, W9
	0x03B0A114 MOVZ W10, 0x8FF8
	0x03B0A118 MOVK W10, 0x49FF0000
	0x03B0A11C ADD X9, X8, X9, 0x3, LSL
	0x03B0A120 STR W10, [X9 + 0x20]
	0x03B0A124 STR S0, [X9 + 0x24]
	0x03B0A128 LDR W9, [X19]
	0x03B0A12C LDR W10, [X8 + 0x18]
	0x03B0A130 ADD W9, W9, 0xB
	0x03B0A134 CMP W9, W10
	0x03B0A138 B.CS 0x3B0A380
	0x03B0A13C SXTW X9, W9
	0x03B0A140 MOVZ W10, 0x8000
	0x03B0A144 MOVK W10, 0x49FF0000
	0x03B0A148 ADD X8, X8, X9, 0x3, LSL
	0x03B0A14C STR W10, [X8 + 0x20]
	0x03B0A150 STR S0, [X8 + 0x24]
	0x03B0A154 LDRB W8, [X21 + 0x147]
	0x03B0A158 LDRB W9, [X31 + 0xFC]
	0x03B0A15C CMP W8, W15, LSR
	0x03B0A160 CSEL W8, W8, W9, CC
	0x03B0A164 STRB W8, [X31 + 0xFC]
	0x03B0A168 LDR X9, [X21 + 0x368]
	0x03B0A16C CBZ X9, 0x3B0A384
	0x03B0A170 LDR X9, [X9 + 0x60]
	0x03B0A174 CBZ X9, 0x3B0A384
	0x03B0A178 LDR W10, [X9 + 0x18]
	0x03B0A17C CMP W16, W10
	0x03B0A180 B.CS 0x3B0A380
	0x03B0A184 MOVZ W10, 0x50
	0x03B0A188 MADD X9, X16, X10, X9
	0x03B0A18C LDR X9, [X9 + 0x58]
	0x03B0A190 CBZ X9, 0x3B0A384
	0x03B0A194 LDRSW X10, [X19]
	0x03B0A198 LDR W11, [X9 + 0x18]
	0x03B0A19C CMP W10, W11
	0x03B0A1A0 B.CS 0x3B0A380
	0x03B0A1A4 ADD X11, X9, X10, 0x2, LSL
	0x03B0A1A8 UBFM W10, W15, 0x10, 0x1F
	0x03B0A1AC STRB W10, [X11 + 0x22]
	0x03B0A1B0 STRH W15, [X11 + 0x20]
	0x03B0A1B4 STRB W8, [X11 + 0x23]
	0x03B0A1B8 LDR W11, [X19]
	0x03B0A1BC LDR W12, [X9 + 0x18]
	0x03B0A1C0 ADD W11, W11, 0x1
	0x03B0A1C4 CMP W11, W12
	0x03B0A1C8 B.CS 0x3B0A380
	0x03B0A1CC ADD X11, X9, W11, 0x2, SXTW
	0x03B0A1D0 STRB W10, [X11 + 0x22]
	0x03B0A1D4 STRH W15, [X11 + 0x20]
	0x03B0A1D8 STRB W8, [X11 + 0x23]
	0x03B0A1DC LDR W11, [X19]
	0x03B0A1E0 LDR W12, [X9 + 0x18]
	0x03B0A1E4 ADD W11, W11, 0x2
	0x03B0A1E8 CMP W11, W12
	0x03B0A1EC B.CS 0x3B0A380
	0x03B0A1F0 ADD X11, X9, W11, 0x2, SXTW
	0x03B0A1F4 STRB W10, [X11 + 0x22]
	0x03B0A1F8 STRH W15, [X11 + 0x20]
	0x03B0A1FC STRB W8, [X11 + 0x23]
	0x03B0A200 LDR W11, [X19]
	0x03B0A204 LDR W12, [X9 + 0x18]
	0x03B0A208 ADD W11, W11, 0x3
	0x03B0A20C CMP W11, W12
	0x03B0A210 B.CS 0x3B0A380
	0x03B0A214 ADD X11, X9, W11, 0x2, SXTW
	0x03B0A218 STRB W10, [X11 + 0x22]
	0x03B0A21C STRH W15, [X11 + 0x20]
	0x03B0A220 STRB W8, [X11 + 0x23]
	0x03B0A224 LDR W11, [X19]
	0x03B0A228 LDR W12, [X9 + 0x18]
	0x03B0A22C ADD W11, W11, 0x4
	0x03B0A230 CMP W11, W12
	0x03B0A234 B.CS 0x3B0A380
	0x03B0A238 ADD X11, X9, W11, 0x2, SXTW
	0x03B0A23C STRB W10, [X11 + 0x22]
	0x03B0A240 STRH W15, [X11 + 0x20]
	0x03B0A244 STRB W8, [X11 + 0x23]
	0x03B0A248 LDR W11, [X19]
	0x03B0A24C LDR W12, [X9 + 0x18]
	0x03B0A250 ADD W11, W11, 0x5
	0x03B0A254 CMP W11, W12
	0x03B0A258 B.CS 0x3B0A380
	0x03B0A25C ADD X11, X9, W11, 0x2, SXTW
	0x03B0A260 STRB W10, [X11 + 0x22]
	0x03B0A264 STRH W15, [X11 + 0x20]
	0x03B0A268 STRB W8, [X11 + 0x23]
	0x03B0A26C LDR W11, [X19]
	0x03B0A270 LDR W12, [X9 + 0x18]
	0x03B0A274 ADD W11, W11, 0x6
	0x03B0A278 CMP W11, W12
	0x03B0A27C B.CS 0x3B0A380
	0x03B0A280 ADD X11, X9, W11, 0x2, SXTW
	0x03B0A284 STRB W10, [X11 + 0x22]
	0x03B0A288 STRH W15, [X11 + 0x20]
	0x03B0A28C STRB W8, [X11 + 0x23]
	0x03B0A290 LDR W11, [X19]
	0x03B0A294 LDR W12, [X9 + 0x18]
	0x03B0A298 ADD W11, W11, 0x7
	0x03B0A29C CMP W11, W12
	0x03B0A2A0 B.CS 0x3B0A380
	0x03B0A2A4 ADD X11, X9, W11, 0x2, SXTW
	0x03B0A2A8 STRB W10, [X11 + 0x22]
	0x03B0A2AC STRH W15, [X11 + 0x20]
	0x03B0A2B0 STRB W8, [X11 + 0x23]
	0x03B0A2B4 LDR W11, [X19]
	0x03B0A2B8 LDR W12, [X9 + 0x18]
	0x03B0A2BC ADD W11, W11, 0x8
	0x03B0A2C0 CMP W11, W12
	0x03B0A2C4 B.CS 0x3B0A380
	0x03B0A2C8 ADD X11, X9, W11, 0x2, SXTW
	0x03B0A2CC STRB W10, [X11 + 0x22]
	0x03B0A2D0 STRH W15, [X11 + 0x20]
	0x03B0A2D4 STRB W8, [X11 + 0x23]
	0x03B0A2D8 LDR W11, [X19]
	0x03B0A2DC LDR W12, [X9 + 0x18]
	0x03B0A2E0 ADD W11, W11, 0x9
	0x03B0A2E4 CMP W11, W12
	0x03B0A2E8 B.CS 0x3B0A380
	0x03B0A2EC ADD X11, X9, W11, 0x2, SXTW
	0x03B0A2F0 STRB W10, [X11 + 0x22]
	0x03B0A2F4 STRH W15, [X11 + 0x20]
	0x03B0A2F8 STRB W8, [X11 + 0x23]
	0x03B0A2FC LDR W11, [X19]
	0x03B0A300 LDR W12, [X9 + 0x18]
	0x03B0A304 ADD W11, W11, 0xA
	0x03B0A308 CMP W11, W12
	0x03B0A30C B.CS 0x3B0A380
	0x03B0A310 ADD X11, X9, W11, 0x2, SXTW
	0x03B0A314 STRB W10, [X11 + 0x22]
	0x03B0A318 STRH W15, [X11 + 0x20]
	0x03B0A31C STRB W8, [X11 + 0x23]
	0x03B0A320 LDR W11, [X19]
	0x03B0A324 LDR W12, [X9 + 0x18]
	0x03B0A328 ADD W11, W11, 0xB
	0x03B0A32C CMP W11, W12
	0x03B0A330 B.CS 0x3B0A380
	0x03B0A334 ADD X9, X9, W11, 0x2, SXTW
	0x03B0A338 STRB W10, [X9 + 0x22]
	0x03B0A33C STRH W15, [X9 + 0x20]
	0x03B0A340 STRB W8, [X9 + 0x23]
	0x03B0A344 LDR W8, [X19]
	0x03B0A348 ADD W8, W8, 0xC
	0x03B0A34C STR W8, [X19]
	0x03B0A350 LDP X20, X19, [X31 + 0x190]
	0x03B0A354 LDP X22, X21, [X31 + 0x180]
	0x03B0A358 LDP X24, X23, [X31 + 0x170]
	0x03B0A35C LDP X26, X25, [X31 + 0x160]
	0x03B0A360 LDP X28, X27, [X31 + 0x150]
	0x03B0A364 LDP X29, X30, [X31 + 0x140]
	0x03B0A368 LDP D9, D8, [X31 + 0x130]
	0x03B0A36C LDP D11, D10, [X31 + 0x120]
	0x03B0A370 LDP D13, D12, [X31 + 0x110]
	0x03B0A374 LDP D15, D14, [X31 + 0x100]
	0x03B0A378 ADD X31, X31, 0x1A0
	0x03B0A37C RET
	0x03B0A380 BL 0x1C16F28
	0x03B0A384 BL 0x1C16F20
	0x03B0A388 SUB X31, X31, 0x50
	0x03B0A38C STR X30, [X31 + 0x20]
	0x03B0A390 STP X22, X21, [X31 + 0x30]
	0x03B0A394 STP X20, X19, [X31 + 0x40]
	0x03B0A398 ADRP X22, 0x8D8000
	0x03B0A39C ADRP X21, 0x64E000
	0x03B0A3A0 LDRB W8, [X22 + 0x664]
	0x03B0A3A4 LDR X21, [X21 + 0x618]
	0x03B0A3A8 MOV X20, X1
	0x03B0A3AC MOV X19, X0
	0x03B0A3B0 TBNZ X8, 0x0, 0x3B0A3EC
	0x03B0A3B4 ADRP X0, 0x5E9000
	0x03B0A3B8 LDR X0, [X0 + 0xA28]
	0x03B0A3BC BL 0x1C16CF4
	0x03B0A3C0 ADRP X0, 0x64E000
	0x03B0A3C4 LDR X0, [X0 + 0x618]
	0x03B0A3C8 BL 0x1C16CF4
	0x03B0A3CC ADRP X0, 0x611000
	0x03B0A3D0 LDR X0, [X0 + 0x6F8]
	0x03B0A3D4 BL 0x1C16CF4
	0x03B0A3D8 ADRP X0, 0x64F000
	0x03B0A3DC LDR X0, [X0 + 0x318]
	0x03B0A3E0 BL 0x1C16CF4
	0x03B0A3E4 MOVZ W8, 0x1
	0x03B0A3E8 STRB W8, [X22 + 0x664]
	0x03B0A3EC LDR X0, [X21]
	0x03B0A3F0 STRB W31, [X31 + 0x2C]
	0x03B0A3F4 LDR W8, [X0 + 0xE0]
	0x03B0A3F8 CBNZ W8, 0x3B0A400
	0x03B0A3FC BL 0x1C16DFC
	0x03B0A400 ADD X5, X31, 0x2C
	0x03B0A404 MOVZ W0, 0x5F
	0x03B0A408 MOVZ W4, 0x190
	0x03B0A40C MOV X1, X20
	0x03B0A410 MOV W2, W31
	0x03B0A414 MOV W3, W31
	0x03B0A418 MOV X6, X31
	0x03B0A41C BL 0x3AEB240
	0x03B0A420 CBZ X0, 0x3B0A450
	0x03B0A424 MOV X1, X0
	0x03B0A428 MOVI V0.2D, 0x0
	0x03B0A42C ADD X0, X31, 0x0
	0x03B0A430 MOV W2, W31
	0x03B0A434 MOV X3, X31
	0x03B0A438 STP V0, V0, [X31]
	0x03B0A43C BL 0x3B1BAD8
	0x03B0A440 LDP V1, V0, [X31]
	0x03B0A444 STR V0, [X19 + 0x68]
	0x03B0A448 STR V1, [X19 + 0x67]
	0x03B0A44C B 0x3B0A4C0
	0x03B0A450 BL 0x3B13E38
	0x03B0A454 TBNZ X0, 0x0, 0x3B0A4C0
	0x03B0A458 CBZ X20, 0x3B0A4D4
	0x03B0A45C MOV X0, X20
	0x03B0A460 MOV X1, X31
	0x03B0A464 BL 0x3C389D4
	0x03B0A468 ADRP X8, 0x64F000
	0x03B0A46C LDR X8, [X8 + 0x318]
	0x03B0A470 ADRP X9, 0x611000
	0x03B0A474 LDR X9, [X9 + 0x6F8]
	0x03B0A478 MOV X1, X0
	0x03B0A47C LDR X8, [X8]
	0x03B0A480 MOV X3, X31
	0x03B0A484 LDR X2, [X9]
	0x03B0A488 MOV X0, X8
	0x03B0A48C BL 0x32274B8
	0x03B0A490 ADRP X8, 0x5E9000
	0x03B0A494 LDR X8, [X8 + 0xA28]
	0x03B0A498 MOV X20, X0
	0x03B0A49C LDR X8, [X8]
	0x03B0A4A0 LDR W9, [X8 + 0xE0]
	0x03B0A4A4 CBNZ W9, 0x3B0A4B0
	0x03B0A4A8 MOV X0, X8
	0x03B0A4AC BL 0x1C16DFC
	0x03B0A4B0 MOV X0, X20
	0x03B0A4B4 MOV X1, X19
	0x03B0A4B8 MOV X2, X31
	0x03B0A4BC BL 0x3C06B0C
	0x03B0A4C0 LDP X20, X19, [X31 + 0x40]
	0x03B0A4C4 LDP X22, X21, [X31 + 0x30]
	0x03B0A4C8 LDR X30, [X31 + 0x20]
	0x03B0A4CC ADD X31, X31, 0x50
	0x03B0A4D0 RET
	0x03B0A4D4 BL 0x1C16F20
	0x03B0A4D8 ADRP X8, 0xFFFFFFFFFCFE0000
	0x03B0A4DC LDR V3, [X8 + 0xC]
	0x03B0A4E0 MOVZ W8, 0xCF000000
	0x03B0A4E4 MOVZ W9, 0x7F800000
	0x03B0A4E8 FMOV S5, W8
	0x03B0A4EC MOVZ W8, 0x45800000
	0x03B0A4F0 FMUL S1, S1, S3
	0x03B0A4F4 FMOV S4, W9
	0x03B0A4F8 FMUL S0, S0, S3
	0x03B0A4FC FMOV S3, W8
	0x03B0A500 FCVTZS W8, S1

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x8DA000
	011 Move W8, [X21+1631]
	012 Move W20, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x650000
	019 Move X0, [X0+840]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+1631], W8
	023 Move X9, [X19+872]
	024 Compare X9, 0
	025 JumpIfEqual {469}
	026 Move X8, [X9+56]
	027 Compare X8, 0
	028 JumpIfEqual {469}
	029 Move W10, [X8+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X25, [X9+96]
	032 Compare X25, 0
	033 JumpIfEqual {469}
	034 Move X23, W20
	035 Move W10, 376
	036 NotImplemented "Instruction MADD not yet implemented."
	037 NotImplemented "Instruction LDRSW not yet implemented."
	038 Move W8, [X25+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W8, 80
	041 NotImplemented "Instruction MADD not yet implemented."
	042 Move X8, [X26+48]
	043 Compare X8, 0
	044 JumpIfEqual {469}
	045 Move W24, [X26+40]
	046 Move W8, [X8+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Add W8, W24, 4
	049 Add W9, W24, 7
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CSEL not yet implemented."
	052 NotImplemented "Instruction SBFM not yet implemented."
	053 Move X1, X31
	054 Call Mathf.NextPowerOfTwo, X0
	055 Move X8, 0x650000
	056 Move X8, [X8+840]
	057 Move W21, W0
	058 Move X8, [X8]
	059 Move W9, [X8+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X8
	063 Call 0x1C17DFC
	064 Move W8, [X25+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Add X0, X26, 32
	067 Move W1, W21
	068 Move X2, X31
	069 Call TMP_MeshInfo.ResizeMeshInfo, X0, X1
	070 Move X9, [X19+872]
	071 Compare X9, 0
	072 JumpIfEqual {469}
	073 Move X8, [X9+56]
	074 Compare X8, 0
	075 JumpIfEqual {469}
	076 Move W10, [X8+24]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move W10, 376
	079 NotImplemented "Instruction MADD not yet implemented."
	080 Move [X10+108], W24
	081 Move X9, [X9+96]
	082 Compare X9, 0
	083 JumpIfEqual {469}
	084 Move W10, [X9+24]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move W10, 80
	087 NotImplemented "Instruction MADD not yet implemented."
	088 Move X10, [X9+48]
	089 Compare X10, 0
	090 JumpIfEqual {469}
	091 Move W9, [X10+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move W11, 376
	094 NotImplemented "Instruction MADD not yet implemented."
	095 Move V0, [X11+112]
	096 Move V1, [X11+120]
	097 Move X9, W24
	098 Move W11, 12
	099 NotImplemented "Instruction MADD not yet implemented."
	100 Move [X10+32], D0
	101 Move [X10+40], S1
	102 Move X10, [X19+872]
	103 Compare X10, 0
	104 JumpIfEqual {469}
	105 Move X10, [X10+96]
	106 Compare X10, 0
	107 JumpIfEqual {469}
	108 Move W11, [X10+24]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move W11, [X8+24]
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move W11, 80
	113 NotImplemented "Instruction MADD not yet implemented."
	114 Move X11, [X10+48]
	115 Compare X11, 0
	116 JumpIfEqual {469}
	117 Move W12, [X11+24]
	118 Add W10, W24, 1
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move W12, 376
	121 NotImplemented "Instruction MADD not yet implemented."
	122 Move V0, [X12+152]
	123 Move V1, [X12+160]
	124 Move X10, W10
	125 Move W12, 12
	126 NotImplemented "Instruction MADD not yet implemented."
	127 Move [X11+32], D0
	128 Move [X11+40], S1
	129 Move X11, [X19+872]
	130 Compare X11, 0
	131 JumpIfEqual {469}
	132 Move X11, [X11+96]
	133 Compare X11, 0
	134 JumpIfEqual {469}
	135 Move W12, [X11+24]
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move W12, [X8+24]
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move W12, 80
	140 NotImplemented "Instruction MADD not yet implemented."
	141 Move X12, [X11+48]
	142 Compare X12, 0
	143 JumpIfEqual {469}
	144 Move W13, [X12+24]
	145 Add W11, W24, 2
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move W13, 376
	148 NotImplemented "Instruction MADD not yet implemented."
	149 Move V0, [X13+192]
	150 Move V1, [X13+200]
	151 Move X11, W11
	152 Move W13, 12
	153 NotImplemented "Instruction MADD not yet implemented."
	154 Move [X12+32], D0
	155 Move [X12+40], S1
	156 Move X12, [X19+872]
	157 Compare X12, 0
	158 JumpIfEqual {469}
	159 Move X12, [X12+96]
	160 Compare X12, 0
	161 JumpIfEqual {469}
	162 Move W13, [X12+24]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move W13, [X8+24]
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move W13, 80
	167 NotImplemented "Instruction MADD not yet implemented."
	168 Move X13, [X12+48]
	169 Compare X13, 0
	170 JumpIfEqual {469}
	171 Move W14, [X13+24]
	172 Add W12, W24, 3
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Move W14, 376
	175 NotImplemented "Instruction MADD not yet implemented."
	176 Move V0, [X14+232]
	177 Move V1, [X14+240]
	178 Move X12, W12
	179 Move W14, 12
	180 NotImplemented "Instruction MADD not yet implemented."
	181 Move [X13+32], D0
	182 Move [X13+40], S1
	183 Move X13, [X19+872]
	184 Compare X13, 0
	185 JumpIfEqual {469}
	186 Move X13, [X13+96]
	187 Compare X13, 0
	188 JumpIfEqual {469}
	189 Move W14, [X13+24]
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Move W14, [X8+24]
	192 NotImplemented "Instruction CMP not yet implemented."
	193 Move W14, 80
	194 NotImplemented "Instruction MADD not yet implemented."
	195 Move X13, [X13+72]
	196 Compare X13, 0
	197 JumpIfEqual {469}
	198 Move W14, [X13+24]
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Move W14, 376
	201 NotImplemented "Instruction MADD not yet implemented."
	202 NotImplemented "Instruction LDUR not yet implemented."
	203 Add X13, X13, X9
	204 Move [X13+32], D0
	205 Move X13, [X19+872]
	206 Compare X13, 0
	207 JumpIfEqual {469}
	208 Move X13, [X13+96]
	209 Compare X13, 0
	210 JumpIfEqual {469}
	211 Move W14, [X13+24]
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Move W14, [X8+24]
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Move W14, 80
	216 NotImplemented "Instruction MADD not yet implemented."
	217 Move X13, [X13+72]
	218 Compare X13, 0
	219 JumpIfEqual {469}
	220 Move W14, [X13+24]
	221 NotImplemented "Instruction CMP not yet implemented."
	222 Move W14, 376
	223 NotImplemented "Instruction MADD not yet implemented."
	224 NotImplemented "Instruction LDUR not yet implemented."
	225 Add X13, X13, X10
	226 Move [X13+32], D0
	227 Move X13, [X19+872]
	228 Compare X13, 0
	229 JumpIfEqual {469}
	230 Move X13, [X13+96]
	231 Compare X13, 0
	232 JumpIfEqual {469}
	233 Move W14, [X13+24]
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Move W14, [X8+24]
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Move W14, 80
	238 NotImplemented "Instruction MADD not yet implemented."
	239 Move X13, [X13+72]
	240 Compare X13, 0
	241 JumpIfEqual {469}
	242 Move W14, [X13+24]
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Move W14, 376
	245 NotImplemented "Instruction MADD not yet implemented."
	246 NotImplemented "Instruction LDUR not yet implemented."
	247 Add X13, X13, X11
	248 Move [X13+32], D0
	249 Move X13, [X19+872]
	250 Compare X13, 0
	251 JumpIfEqual {469}
	252 Move X13, [X13+96]
	253 Compare X13, 0
	254 JumpIfEqual {469}
	255 Move W14, [X13+24]
	256 NotImplemented "Instruction CMP not yet implemented."
	257 Move W14, [X8+24]
	258 NotImplemented "Instruction CMP not yet implemented."
	259 Move W14, 80
	260 NotImplemented "Instruction MADD not yet implemented."
	261 Move X13, [X13+72]
	262 Compare X13, 0
	263 JumpIfEqual {469}
	264 Move W14, [X13+24]
	265 NotImplemented "Instruction CMP not yet implemented."
	266 Move W14, 376
	267 NotImplemented "Instruction MADD not yet implemented."
	268 NotImplemented "Instruction LDUR not yet implemented."
	269 Add X13, X13, X12
	270 Move [X13+32], D0
	271 Move X13, [X19+872]
	272 Compare X13, 0
	273 JumpIfEqual {469}
	274 Move X13, [X13+96]
	275 Compare X13, 0
	276 JumpIfEqual {469}
	277 Move W14, [X13+24]
	278 NotImplemented "Instruction CMP not yet implemented."
	279 Move W14, [X8+24]
	280 NotImplemented "Instruction CMP not yet implemented."
	281 Move W14, 80
	282 NotImplemented "Instruction MADD not yet implemented."
	283 Move X13, [X13+80]
	284 Compare X13, 0
	285 JumpIfEqual {469}
	286 Move W14, [X13+24]
	287 NotImplemented "Instruction CMP not yet implemented."
	288 Move W14, 376
	289 NotImplemented "Instruction MADD not yet implemented."
	290 NotImplemented "Instruction LDUR not yet implemented."
	291 Add X13, X13, X9
	292 Move [X13+32], D0
	293 Move X13, [X19+872]
	294 Compare X13, 0
	295 JumpIfEqual {469}
	296 Move X13, [X13+96]
	297 Compare X13, 0
	298 JumpIfEqual {469}
	299 Move W14, [X13+24]
	300 NotImplemented "Instruction CMP not yet implemented."
	301 Move W14, [X8+24]
	302 NotImplemented "Instruction CMP not yet implemented."
	303 Move W14, 80
	304 NotImplemented "Instruction MADD not yet implemented."
	305 Move X13, [X13+80]
	306 Compare X13, 0
	307 JumpIfEqual {469}
	308 Move W14, [X13+24]
	309 NotImplemented "Instruction CMP not yet implemented."
	310 Move W14, 376
	311 NotImplemented "Instruction MADD not yet implemented."
	312 NotImplemented "Instruction LDUR not yet implemented."
	313 Add X13, X13, X10
	314 Move [X13+32], D0
	315 Move X13, [X19+872]
	316 Compare X13, 0
	317 JumpIfEqual {469}
	318 Move X13, [X13+96]
	319 Compare X13, 0
	320 JumpIfEqual {469}
	321 Move W14, [X13+24]
	322 NotImplemented "Instruction CMP not yet implemented."
	323 Move W14, [X8+24]
	324 NotImplemented "Instruction CMP not yet implemented."
	325 Move W14, 80
	326 NotImplemented "Instruction MADD not yet implemented."
	327 Move X13, [X13+80]
	328 Compare X13, 0
	329 JumpIfEqual {469}
	330 Move W14, [X13+24]
	331 NotImplemented "Instruction CMP not yet implemented."
	332 Move W14, 376
	333 NotImplemented "Instruction MADD not yet implemented."
	334 NotImplemented "Instruction LDUR not yet implemented."
	335 Add X13, X13, X11
	336 Move [X13+32], D0
	337 Move X13, [X19+872]
	338 Compare X13, 0
	339 JumpIfEqual {469}
	340 Move X13, [X13+96]
	341 Compare X13, 0
	342 JumpIfEqual {469}
	343 Move W14, [X13+24]
	344 NotImplemented "Instruction CMP not yet implemented."
	345 Move W14, [X8+24]
	346 NotImplemented "Instruction CMP not yet implemented."
	347 Move W14, 80
	348 NotImplemented "Instruction MADD not yet implemented."
	349 Move X13, [X13+80]
	350 Compare X13, 0
	351 JumpIfEqual {469}
	352 Move W14, [X13+24]
	353 NotImplemented "Instruction CMP not yet implemented."
	354 Move W14, 376
	355 NotImplemented "Instruction MADD not yet implemented."
	356 NotImplemented "Instruction LDUR not yet implemented."
	357 Add X13, X13, X12
	358 Move [X13+32], D0
	359 Move X13, [X19+872]
	360 Compare X13, 0
	361 JumpIfEqual {469}
	362 Move X13, [X13+96]
	363 Compare X13, 0
	364 JumpIfEqual {469}
	365 Move W14, [X13+24]
	366 NotImplemented "Instruction CMP not yet implemented."
	367 Move W14, [X8+24]
	368 NotImplemented "Instruction CMP not yet implemented."
	369 Move W14, 80
	370 NotImplemented "Instruction MADD not yet implemented."
	371 Move X13, [X13+88]
	372 Compare X13, 0
	373 JumpIfEqual {469}
	374 Move W14, [X13+24]
	375 NotImplemented "Instruction CMP not yet implemented."
	376 Move W14, 376
	377 NotImplemented "Instruction MADD not yet implemented."
	378 Move W14, [X14+148]
	379 Add X9, X13, X9
	380 Move [X9+32], W14
	381 Move X9, [X19+872]
	382 Compare X9, 0
	383 JumpIfEqual {469}
	384 Move X9, [X9+96]
	385 Compare X9, 0
	386 JumpIfEqual {469}
	387 Move W13, [X9+24]
	388 NotImplemented "Instruction CMP not yet implemented."
	389 Move W13, [X8+24]
	390 NotImplemented "Instruction CMP not yet implemented."
	391 Move W13, 80
	392 NotImplemented "Instruction MADD not yet implemented."
	393 Move X9, [X9+88]
	394 Compare X9, 0
	395 JumpIfEqual {469}
	396 Move W13, [X9+24]
	397 NotImplemented "Instruction CMP not yet implemented."
	398 Move W13, 376
	399 NotImplemented "Instruction MADD not yet implemented."
	400 Move W13, [X13+188]
	401 Add X9, X9, X10
	402 Move [X9+32], W13
	403 Move X9, [X19+872]
	404 Compare X9, 0
	405 JumpIfEqual {469}
	406 Move X9, [X9+96]
	407 Compare X9, 0
	408 JumpIfEqual {469}
	409 Move W10, [X9+24]
	410 NotImplemented "Instruction CMP not yet implemented."
	411 Move W10, [X8+24]
	412 NotImplemented "Instruction CMP not yet implemented."
	413 Move W10, 80
	414 NotImplemented "Instruction MADD not yet implemented."
	415 Move X9, [X9+88]
	416 Compare X9, 0
	417 JumpIfEqual {469}
	418 Move W10, [X9+24]
	419 NotImplemented "Instruction CMP not yet implemented."
	420 Move W10, 376
	421 NotImplemented "Instruction MADD not yet implemented."
	422 Move W10, [X10+228]
	423 Add X9, X9, X11
	424 Move [X9+32], W10
	425 Move X9, [X19+872]
	426 Compare X9, 0
	427 JumpIfEqual {469}
	428 Move X9, [X9+96]
	429 Compare X9, 0
	430 JumpIfEqual {469}
	431 Move W10, [X9+24]
	432 NotImplemented "Instruction CMP not yet implemented."
	433 Move W10, [X8+24]
	434 NotImplemented "Instruction CMP not yet implemented."
	435 Move W10, 80
	436 NotImplemented "Instruction MADD not yet implemented."
	437 Move X9, [X9+88]
	438 Compare X9, 0
	439 JumpIfEqual {469}
	440 Move W10, [X9+24]
	441 NotImplemented "Instruction CMP not yet implemented."
	442 Move W10, 376
	443 NotImplemented "Instruction MADD not yet implemented."
	444 Move W8, [X8+268]
	445 Add X9, X9, X12
	446 Move [X9+32], W8
	447 Move X8, [X19+872]
	448 Compare X8, 0
	449 JumpIfEqual {469}
	450 Move X8, [X8+96]
	451 Compare X8, 0
	452 JumpIfEqual {469}
	453 Move W9, [X8+24]
	454 NotImplemented "Instruction CMP not yet implemented."
	455 Move W10, 80
	456 Add W9, W24, 4
	457 NotImplemented "Instruction MADD not yet implemented."
	458 Move X20, [X31+64]
	459 Move X19, [X31+72]
	460 Move X22, [X31+48]
	461 Move X21, [X31+56]
	462 Move X24, [X31+32]
	463 Move X23, [X31+40]
	464 Move X26, [X31+16]
	465 Move X25, [X31+24]
	466 Move [X8+40], W9
	467 Move X30, [X31+80]
	468 Return 
	469 Call 0x1C17F20
	470 Call 0x1C17F28

Method: System.Void DrawUnderlineMesh(UnityEngine.Vector3 start, UnityEngine.Vector3 end, ref System.Int32 index, System.Single startScale, System.Single endScale, System.Single maxScale, System.Single sdfScale, UnityEngine.Color32 underlineColor)

Disassembly:
	0x03B0A504 FCMP S1, S4
	0x03B0A508 SCVTF S1, W8
	0x03B0A50C FCVTZS W8, S0
	0x03B0A510 FCSEL S1, S5, S1, EQ
	0x03B0A514 SCVTF S5, W8
	0x03B0A518 MOVZ W8, 0xD5000000
	0x03B0A51C FMUL S3, S5, S3
	0x03B0A520 FCMP S0, S4
	0x03B0A524 FMOV S0, W8
	0x03B0A528 FCSEL S0, S0, S3, EQ
	0x03B0A52C FADD S0, S0, S1
	0x03B0A530 MOV V1.16B, V2.16B
	0x03B0A534 RET
	0x03B0A538 SUB X31, X31, 0xA0
	0x03B0A53C STP D13, D12, [X31 + 0x10]
	0x03B0A540 STP D11, D10, [X31 + 0x20]
	0x03B0A544 STP D9, D8, [X31 + 0x30]
	0x03B0A548 STR X30, [X31 + 0x40]
	0x03B0A54C STP X28, X27, [X31 + 0x50]
	0x03B0A550 STP X26, X25, [X31 + 0x60]
	0x03B0A554 STP X24, X23, [X31 + 0x70]
	0x03B0A558 STP X22, X21, [X31 + 0x80]
	0x03B0A55C STP X20, X19, [X31 + 0x90]
	0x03B0A560 ADRP X22, 0x8D8000
	0x03B0A564 LDRB W8, [X22 + 0x661]
	0x03B0A568 MOV X20, X2
	0x03B0A56C MOV X19, X1
	0x03B0A570 MOV V10.16B, V5.16B
	0x03B0A574 MOV V11.16B, V4.16B
	0x03B0A578 MOV V8.16B, V3.16B
	0x03B0A57C MOV V13.16B, V2.16B
	0x03B0A580 MOV V9.16B, V1.16B
	0x03B0A584 MOV V12.16B, V0.16B
	0x03B0A588 MOV X21, X0
	0x03B0A58C TBNZ X8, 0x0, 0x3B0A5C8
	0x03B0A590 ADRP X0, 0x5E9000
	0x03B0A594 LDR X0, [X0 + 0xA28]
	0x03B0A598 BL 0x1C16CF4
	0x03B0A59C ADRP X0, 0x611000
	0x03B0A5A0 LDR X0, [X0 + 0x608]
	0x03B0A5A4 BL 0x1C16CF4
	0x03B0A5A8 ADRP X0, 0x64E000
	0x03B0A5AC LDR X0, [X0 + 0x348]
	0x03B0A5B0 BL 0x1C16CF4
	0x03B0A5B4 ADRP X0, 0x64F000
	0x03B0A5B8 LDR X0, [X0 + 0x320]
	0x03B0A5BC BL 0x1C16CF4
	0x03B0A5C0 MOVZ W8, 0x1
	0x03B0A5C4 STRB W8, [X22 + 0x661]
	0x03B0A5C8 STP X31, X31, [X31]
	0x03B0A5CC LDR X8, [X21 + 0x670]
	0x03B0A5D0 CBNZ X8, 0x3B0A5E8
	0x03B0A5D4 LDR X1, [X21 + 0xF8]
	0x03B0A5D8 MOV X0, X21
	0x03B0A5DC BL 0x3B0A388
	0x03B0A5E0 LDR X8, [X21 + 0x670]
	0x03B0A5E4 CBZ X8, 0x3B0AA18
	0x03B0A5E8 LDR X8, [X21 + 0x368]
	0x03B0A5EC CBZ X8, 0x3B0AA5C
	0x03B0A5F0 LDR X22, [X8 + 0x60]
	0x03B0A5F4 CBZ X22, 0x3B0AA5C
	0x03B0A5F8 LDRSW X25, [X21 + 0x688]
	0x03B0A5FC LDR W9, [X22 + 0x18]
	0x03B0A600 CMP W25, W9
	0x03B0A604 B.CS 0x3B0AA58
	0x03B0A608 MOVZ W10, 0x50
	0x03B0A60C MADD X23, X25, X10, X22
	0x03B0A610 LDR X10, [X23 + 0x30]
	0x03B0A614 CBZ X10, 0x3B0AA5C
	0x03B0A618 LDR W11, [X19]
	0x03B0A61C LDR W10, [X10 + 0x18]
	0x03B0A620 ADD W24, W11, 0x4
	0x03B0A624 CMP W24, W10
	0x03B0A628 B.LE 0x3B0A674
	0x03B0A62C ADRP X8, 0x64E000
	0x03B0A630 LDR X8, [X8 + 0x348]
	0x03B0A634 LDR X0, [X8]
	0x03B0A638 LDR W8, [X0 + 0xE0]
	0x03B0A63C CBNZ W8, 0x3B0A648
	0x03B0A640 BL 0x1C16DFC
	0x03B0A644 LDR W9, [X22 + 0x18]
	0x03B0A648 CMP W25, W9
	0x03B0A64C B.CS 0x3B0AA58
	0x03B0A650 ADD W8, W24, 0x3
	0x03B0A654 CMP W24, 0x0
	0x03B0A658 CSEL W8, W8, W24, LT
	0x03B0A65C ADD X0, X23, 0x20
	0x03B0A660 SBFM W1, W8, 0x2, 0x1F
	0x03B0A664 MOV X2, X31
	0x03B0A668 BL 0x3B11BD0
	0x03B0A66C LDR X8, [X21 + 0x368]
	0x03B0A670 CBZ X8, 0x3B0AA5C
	0x03B0A674 LDR X8, [X8 + 0x60]
	0x03B0A678 CBZ X8, 0x3B0AA5C
	0x03B0A67C LDR W9, [X8 + 0x18]
	0x03B0A680 CMP W25, W9
	0x03B0A684 B.CS 0x3B0AA58
	0x03B0A688 MOVZ W9, 0x50
	0x03B0A68C MADD X8, X25, X9, X8
	0x03B0A690 LDR X8, [X8 + 0x30]
	0x03B0A694 CBZ X8, 0x3B0AA5C
	0x03B0A698 LDRSW X9, [X19]
	0x03B0A69C LDR W10, [X8 + 0x18]
	0x03B0A6A0 CMP W9, W10
	0x03B0A6A4 B.CS 0x3B0AA58
	0x03B0A6A8 MOVZ W10, 0xC
	0x03B0A6AC MADD X9, X9, X10, X8
	0x03B0A6B0 STP S12, S9, [X9 + 0x20]
	0x03B0A6B4 STR S13, [X9 + 0x28]
	0x03B0A6B8 LDR W9, [X19]
	0x03B0A6BC LDR W10, [X8 + 0x18]
	0x03B0A6C0 ADD W9, W9, 0x1
	0x03B0A6C4 CMP W9, W10
	0x03B0A6C8 B.CS 0x3B0AA58
	0x03B0A6CC SXTW X9, W9
	0x03B0A6D0 MOVZ W10, 0xC
	0x03B0A6D4 MADD X9, X9, X10, X8
	0x03B0A6D8 STP S12, S11, [X9 + 0x20]
	0x03B0A6DC STR W31, [X9 + 0x28]
	0x03B0A6E0 LDR W9, [X19]
	0x03B0A6E4 LDR W10, [X8 + 0x18]
	0x03B0A6E8 ADD W9, W9, 0x2
	0x03B0A6EC CMP W9, W10
	0x03B0A6F0 B.CS 0x3B0AA58
	0x03B0A6F4 SXTW X9, W9
	0x03B0A6F8 MOVZ W10, 0xC
	0x03B0A6FC MADD X9, X9, X10, X8
	0x03B0A700 STP S8, S11, [X9 + 0x20]
	0x03B0A704 STR S10, [X9 + 0x28]
	0x03B0A708 LDR W9, [X19]
	0x03B0A70C LDR W10, [X8 + 0x18]
	0x03B0A710 ADD W9, W9, 0x3
	0x03B0A714 CMP W9, W10
	0x03B0A718 B.CS 0x3B0AA58
	0x03B0A71C SXTW X9, W9
	0x03B0A720 MOVZ W10, 0xC
	0x03B0A724 MADD X8, X9, X10, X8
	0x03B0A728 STP S8, S9, [X8 + 0x20]
	0x03B0A72C STR W31, [X8 + 0x28]
	0x03B0A730 LDR X8, [X21 + 0x368]
	0x03B0A734 CBZ X8, 0x3B0AA5C
	0x03B0A738 LDR X8, [X8 + 0x60]
	0x03B0A73C CBZ X8, 0x3B0AA5C
	0x03B0A740 LDR W9, [X8 + 0x18]
	0x03B0A744 CMP W25, W9
	0x03B0A748 B.CS 0x3B0AA58
	0x03B0A74C LDR X9, [X21 + 0x678]
	0x03B0A750 CBZ X9, 0x3B0AA5C
	0x03B0A754 LDR X10, [X21 + 0x670]
	0x03B0A758 CBZ X10, 0x3B0AA5C
	0x03B0A75C LDR X0, [X10 + 0x20]
	0x03B0A760 CBZ X0, 0x3B0AA5C
	0x03B0A764 MOVZ W10, 0x50
	0x03B0A768 MADD X8, X25, X10, X8
	0x03B0A76C ADRP X22, 0x611000
	0x03B0A770 LDR W28, [X9 + 0x108]
	0x03B0A774 LDR X26, [X8 + 0x48]
	0x03B0A778 LDR W27, [X9 + 0x10C]
	0x03B0A77C LDR X22, [X22 + 0x608]
	0x03B0A780 MOV X1, X31
	0x03B0A784 BL 0x3C9C4CC
	0x03B0A788 MOV X8, X0
	0x03B0A78C LDR X0, [X22]
	0x03B0A790 STP X8, X1, [X31]
	0x03B0A794 LDR W8, [X0 + 0xE0]
	0x03B0A798 CBNZ W8, 0x3B0A7A0
	0x03B0A79C BL 0x1C16DFC
	0x03B0A7A0 ADD X0, X31, 0x0
	0x03B0A7A4 MOV X1, X31
	0x03B0A7A8 BL 0x3C9C090
	0x03B0A7AC MOV W22, W0
	0x03B0A7B0 ADD X0, X31, 0x0
	0x03B0A7B4 MOV X1, X31
	0x03B0A7B8 BL 0x3C9C0A0
	0x03B0A7BC MOV W24, W0
	0x03B0A7C0 ADD X0, X31, 0x0
	0x03B0A7C4 MOV X1, X31
	0x03B0A7C8 BL 0x3C9C098
	0x03B0A7CC MOV W23, W0
	0x03B0A7D0 ADD X0, X31, 0x0
	0x03B0A7D4 MOV X1, X31
	0x03B0A7D8 BL 0x3C9C0A8
	0x03B0A7DC CMP W24, 0x0
	0x03B0A7E0 CINC W9, W24, LT
	0x03B0A7E4 CBZ X26, 0x3B0AA5C
	0x03B0A7E8 LDRSW X8, [X19]
	0x03B0A7EC LDR W10, [X26 + 0x18]
	0x03B0A7F0 CMP W8, W10
	0x03B0A7F4 B.CS 0x3B0AA58
	0x03B0A7F8 SBFM W9, W9, 0x1, 0x1F
	0x03B0A7FC SCVTF S2, W0
	0x03B0A800 FMOV S3, 0.5
	0x03B0A804 SCVTF S0, W22
	0x03B0A808 FMUL S2, S2, S3
	0x03B0A80C SCVTF S3, W9
	0x03B0A810 FADD S0, S0, S3
	0x03B0A814 SCVTF S3, W23
	0x03B0A818 SCVTF S1, W28
	0x03B0A81C FADD S2, S2, S3
	0x03B0A820 SCVTF S3, W27
	0x03B0A824 ADD X8, X26, X8, 0x3, LSL
	0x03B0A828 FDIV S1, S0, S1
	0x03B0A82C FDIV S0, S2, S3
	0x03B0A830 STP S1, S0, [X8 + 0x20]
	0x03B0A834 LDR W8, [X19]
	0x03B0A838 LDR W9, [X26 + 0x18]
	0x03B0A83C ADD W8, W8, 0x1
	0x03B0A840 CMP W8, W9
	0x03B0A844 B.CS 0x3B0AA58
	0x03B0A848 SXTW X8, W8
	0x03B0A84C ADD X8, X26, X8, 0x3, LSL
	0x03B0A850 STP S1, S0, [X8 + 0x20]
	0x03B0A854 LDR W8, [X19]
	0x03B0A858 LDR W9, [X26 + 0x18]
	0x03B0A85C ADD W8, W8, 0x2
	0x03B0A860 CMP W8, W9
	0x03B0A864 B.CS 0x3B0AA58
	0x03B0A868 SXTW X8, W8
	0x03B0A86C ADD X8, X26, X8, 0x3, LSL
	0x03B0A870 STP S1, S0, [X8 + 0x20]
	0x03B0A874 LDR W8, [X19]
	0x03B0A878 LDR W9, [X26 + 0x18]
	0x03B0A87C ADD W8, W8, 0x3
	0x03B0A880 CMP W8, W9
	0x03B0A884 B.CS 0x3B0AA58
	0x03B0A888 SXTW X8, W8
	0x03B0A88C ADD X8, X26, X8, 0x3, LSL
	0x03B0A890 STP S1, S0, [X8 + 0x20]
	0x03B0A894 LDR X8, [X21 + 0x368]
	0x03B0A898 CBZ X8, 0x3B0AA5C
	0x03B0A89C LDR X8, [X8 + 0x60]
	0x03B0A8A0 CBZ X8, 0x3B0AA5C
	0x03B0A8A4 LDR W9, [X8 + 0x18]
	0x03B0A8A8 CMP W25, W9
	0x03B0A8AC B.CS 0x3B0AA58
	0x03B0A8B0 MOVZ W9, 0x50
	0x03B0A8B4 MADD X8, X25, X9, X8
	0x03B0A8B8 LDR X8, [X8 + 0x50]
	0x03B0A8BC CBZ X8, 0x3B0AA5C
	0x03B0A8C0 LDRSW X9, [X19]
	0x03B0A8C4 LDR W10, [X8 + 0x18]
	0x03B0A8C8 CMP W9, W10
	0x03B0A8CC B.CS 0x3B0AA58
	0x03B0A8D0 ADRP X10, 0xFFFFFFFFFCFE4000
	0x03B0A8D4 LDR V0, [X10]
	0x03B0A8D8 ADD X9, X8, X9, 0x3, LSL
	0x03B0A8DC STR D0, [X9 + 0x20]
	0x03B0A8E0 LDR W9, [X19]
	0x03B0A8E4 LDR W10, [X8 + 0x18]
	0x03B0A8E8 ADD W9, W9, 0x1
	0x03B0A8EC CMP W9, W10
	0x03B0A8F0 B.CS 0x3B0AA58
	0x03B0A8F4 ADD X9, X8, W9, 0x3, SXTW
	0x03B0A8F8 STR D0, [X9 + 0x20]
	0x03B0A8FC LDR W9, [X19]
	0x03B0A900 LDR W10, [X8 + 0x18]
	0x03B0A904 ADD W9, W9, 0x2
	0x03B0A908 CMP W9, W10
	0x03B0A90C B.CS 0x3B0AA58
	0x03B0A910 ADD X9, X8, W9, 0x3, SXTW
	0x03B0A914 STR D0, [X9 + 0x20]
	0x03B0A918 LDR W9, [X19]
	0x03B0A91C LDR W10, [X8 + 0x18]
	0x03B0A920 ADD W9, W9, 0x3
	0x03B0A924 CMP W9, W10
	0x03B0A928 B.CS 0x3B0AA58
	0x03B0A92C ADD X8, X8, W9, 0x3, SXTW
	0x03B0A930 STR D0, [X8 + 0x20]
	0x03B0A934 LDRB W9, [X21 + 0x147]
	0x03B0A938 LDR X8, [X21 + 0x368]
	0x03B0A93C UBFM X10, X20, 0x18, 0x3F
	0x03B0A940 CMP W9, W10, UXTB
	0x03B0A944 CSEL W9, W9, W10, CC
	0x03B0A948 CBZ X8, 0x3B0AA5C
	0x03B0A94C LDR X8, [X8 + 0x60]
	0x03B0A950 CBZ X8, 0x3B0AA5C
	0x03B0A954 LDR W10, [X8 + 0x18]
	0x03B0A958 CMP W25, W10
	0x03B0A95C B.CS 0x3B0AA58
	0x03B0A960 MOVZ W10, 0x50
	0x03B0A964 MADD X8, X25, X10, X8
	0x03B0A968 LDR X8, [X8 + 0x58]
	0x03B0A96C CBZ X8, 0x3B0AA5C
	0x03B0A970 LDRSW X10, [X19]
	0x03B0A974 LDR W11, [X8 + 0x18]
	0x03B0A978 CMP W10, W11
	0x03B0A97C B.CS 0x3B0AA58
	0x03B0A980 BFM W20, W9, 0x8, 0x7
	0x03B0A984 ADD X9, X8, X10, 0x2, LSL
	0x03B0A988 STR W20, [X9 + 0x20]
	0x03B0A98C LDR W9, [X19]
	0x03B0A990 LDR W10, [X8 + 0x18]
	0x03B0A994 ADD W9, W9, 0x1
	0x03B0A998 CMP W9, W10
	0x03B0A99C B.CS 0x3B0AA58
	0x03B0A9A0 ADD X9, X8, W9, 0x2, SXTW
	0x03B0A9A4 STR W20, [X9 + 0x20]
	0x03B0A9A8 LDR W9, [X19]
	0x03B0A9AC LDR W10, [X8 + 0x18]
	0x03B0A9B0 ADD W9, W9, 0x2
	0x03B0A9B4 CMP W9, W10
	0x03B0A9B8 B.CS 0x3B0AA58
	0x03B0A9BC ADD X9, X8, W9, 0x2, SXTW
	0x03B0A9C0 STR W20, [X9 + 0x20]
	0x03B0A9C4 LDR W9, [X19]
	0x03B0A9C8 LDR W10, [X8 + 0x18]
	0x03B0A9CC ADD W9, W9, 0x3
	0x03B0A9D0 CMP W9, W10
	0x03B0A9D4 B.CS 0x3B0AA58
	0x03B0A9D8 ADD X8, X8, W9, 0x2, SXTW
	0x03B0A9DC STR W20, [X8 + 0x20]
	0x03B0A9E0 LDR W8, [X19]
	0x03B0A9E4 ADD W8, W8, 0x4
	0x03B0A9E8 STR W8, [X19]
	0x03B0A9EC LDP X20, X19, [X31 + 0x90]
	0x03B0A9F0 LDP X22, X21, [X31 + 0x80]
	0x03B0A9F4 LDP X24, X23, [X31 + 0x70]
	0x03B0A9F8 LDP X26, X25, [X31 + 0x60]
	0x03B0A9FC LDP X28, X27, [X31 + 0x50]
	0x03B0AA00 LDR X30, [X31 + 0x40]
	0x03B0AA04 LDP D9, D8, [X31 + 0x30]
	0x03B0AA08 LDP D11, D10, [X31 + 0x20]
	0x03B0AA0C LDP D13, D12, [X31 + 0x10]
	0x03B0AA10 ADD X31, X31, 0xA0
	0x03B0AA14 RET
	0x03B0AA18 MOV X0, X31
	0x03B0AA1C BL 0x3B13E38
	0x03B0AA20 TBNZ X0, 0x0, 0x3B0A9EC
	0x03B0AA24 ADRP X8, 0x5E9000
	0x03B0AA28 LDR X8, [X8 + 0xA28]
	0x03B0AA2C LDR X0, [X8]
	0x03B0AA30 LDR W8, [X0 + 0xE0]
	0x03B0AA34 CBNZ W8, 0x3B0AA3C
	0x03B0AA38 BL 0x1C16DFC
	0x03B0AA3C ADRP X8, 0x64F000
	0x03B0AA40 LDR X8, [X8 + 0x320]
	0x03B0AA44 MOV X1, X21
	0x03B0AA48 MOV X2, X31
	0x03B0AA4C LDR X0, [X8]
	0x03B0AA50 BL 0x3C06B0C
	0x03B0AA54 B 0x3B0A9EC
	0x03B0AA58 BL 0x1C16F28
	0x03B0AA5C BL 0x1C16F20
	0x03B0AA60 STP D9, D8, [X31 - 0x30]!
	0x03B0AA64 STP X30, X21, [X31 + 0x10]
	0x03B0AA68 STP X20, X19, [X31 + 0x20]
	0x03B0AA6C ADRP X20, 0x8D8000
	0x03B0AA70 LDRB W8, [X20 + 0x662]
	0x03B0AA74 MOV X19, X0
	0x03B0AA78 TBNZ X8, 0x0, 0x3B0AA9C
	0x03B0AA7C ADRP X0, 0x64F000
	0x03B0AA80 LDR X0, [X0 + 0x328]
	0x03B0AA84 BL 0x1C16CF4
	0x03B0AA88 ADRP X0, 0x5E9000
	0x03B0AA8C LDR X0, [X0 + 0x6C0]
	0x03B0AA90 BL 0x1C16CF4
	0x03B0AA94 MOVZ W8, 0x1
	0x03B0AA98 STRB W8, [X20 + 0x662]
	0x03B0AA9C LDR V0, [X19 + 0x1E4]
	0x03B0AAA0 MOVZ W8, 0xC2C60000
	0x03B0AAA4 FMOV S1, W8
	0x03B0AAA8 FCMP S0, S1
	0x03B0AAAC B.EQ 0x3B0AAB8
	0x03B0AAB0 LDRB W8, [X19 + 0x3FE]
	0x03B0AAB4 CBZ W8, 0x3B0ACB0
	0x03B0AAB8 MOV X0, X19
	0x03B0AABC BL 0x3AF8E0C
	0x03B0AAC0 STR X0, [X19 + 0x380]
	0x03B0AAC4 MOV X0, X31
	0x03B0AAC8 BL 0x3B13F18
	0x03B0AACC TBZ X0, 0x0, 0x3B0AAEC
	0x03B0AAD0 LDR X8, [X19]
	0x03B0AAD4 MOVZ W1, 0x1
	0x03B0AAD8 MOV X0, X19
	0x03B0AADC LDR X9, [X8 + 0x5F8]
	0x03B0AAE0 LDR X2, [X8 + 0x600]
	0x03B0AAE4 BLR X9
	0x03B0AAE8 B 0x3B0ABBC
	0x03B0AAEC MOV X0, X19
	0x03B0AAF0 MOV X1, X31
	0x03B0AAF4 BL 0x33BE520
	0x03B0AAF8 ADRP X8, 0x5E9000
	0x03B0AAFC LDR X8, [X8 + 0x6C0]
	0x03B0AB00 ADRP X9, 0x64F000
	0x03B0AB04 MOV X20, X0
	0x03B0AB08 LDR X8, [X8]
	0x03B0AB0C LDR X9, [X9 + 0x328]
	0x03B0AB10 LDR W10, [X8 + 0xE0]
	0x03B0AB14 LDR X21, [X9]
	0x03B0AB18 CBNZ W10, 0x3B0AB24
	0x03B0AB1C MOV X0, X8
	0x03B0AB20 BL 0x1C16DFC
	0x03B0AB24 MOV X0, X21
	0x03B0AB28 MOV X1, X31
	0x03B0AB2C BL 0x338C698
	0x03B0AB30 MOV X1, X0
	0x03B0AB34 MOV X0, X20
	0x03B0AB38 MOV X2, X31
	0x03B0AB3C BL 0x3395194
	0x03B0AB40 LDR X8, [X19 + 0x380]
	0x03B0AB44 CBZ X8, 0x3B0AB98
	0x03B0AB48 MOV W20, W0
	0x03B0AB4C MOV X0, X8
	0x03B0AB50 MOV X1, X31
	0x03B0AB54 BL 0x3C3E90C
	0x03B0AB58 MOVZ W8, 0xC2C80000
	0x03B0AB5C FMOV S2, W8
	0x03B0AB60 FADD S0, S0, S2
	0x03B0AB64 FADD S1, S1, S2
	0x03B0AB68 FMUL S0, S0, S0
	0x03B0AB6C FMUL S1, S1, S1
	0x03B0AB70 ADRP X8, 0xFFFFFFFFFCFDF000
	0x03B0AB74 FADD S0, S0, S1
	0x03B0AB78 LDR V1, [X8 + 0xF20]
	0x03B0AB7C FCMP S0, S1
	0x03B0AB80 TBZ X20, 0x0, 0x3B0AB9C
	0x03B0AB84 B.PL 0x3B0ABBC
	0x03B0AB88 LDR X20, [X19 + 0x380]
	0x03B0AB8C MOV X0, X31
	0x03B0AB90 BL 0x3B13EE0
	0x03B0AB94 CBNZ X20, 0x3B0ABB0
	0x03B0AB98 BL 0x1C16F20
	0x03B0AB9C B.PL 0x3B0ABBC
	0x03B0ABA0 LDR X20, [X19 + 0x380]
	0x03B0ABA4 MOV X0, X31
	0x03B0ABA8 BL 0x3B13EFC
	0x03B0ABAC CBZ X20, 0x3B0AB98
	0x03B0ABB0 MOV X0, X20
	0x03B0ABB4 MOV X1, X31
	0x03B0ABB8 BL 0x3C3E99C
	0x03B0ABBC MOV X0, X31
	0x03B0ABC0 BL 0x3B13C6C
	0x03B0ABC4 AND W8, W0, 0x1
	0x03B0ABC8 MOV X0, X31
	0x03B0ABCC STRB W8, [X19 + 0x2D8]
	0x03B0ABD0 BL 0x3B13D54
	0x03B0ABD4 AND W8, W0, 0x1
	0x03B0ABD8 MOV X0, X31
	0x03B0ABDC STRB W8, [X19 + 0x2F9]
	0x03B0ABE0 BL 0x3B13D70
	0x03B0ABE4 AND W8, W0, 0x1
	0x03B0ABE8 MOV X0, X31
	0x03B0ABEC STRB W8, [X19 + 0x300]
	0x03B0ABF0 BL 0x3B13D8C
	0x03B0ABF4 AND W8, W0, 0x1
	0x03B0ABF8 MOV X0, X31
	0x03B0ABFC STRB W8, [X19 + 0x1B8]
	0x03B0AC00 BL 0x3B13DA8
	0x03B0AC04 AND W8, W0, 0x1
	0x03B0AC08 MOV X0, X31
	0x03B0AC0C STRB W8, [X19 + 0x303]
	0x03B0AC10 BL 0x3B13E8C
	0x03B0AC14 MOV X0, X31
	0x03B0AC18 MOV V8.16B, V0.16B
	0x03B0AC1C STR S0, [X19 + 0x1EC]
	0x03B0AC20 STR S0, [X19 + 0x1E4]
	0x03B0AC24 BL 0x3B13EA8
	0x03B0AC28 LDR V9, [X19 + 0x1E4]
	0x03B0AC2C FMUL S0, S8, S0
	0x03B0AC30 MOV X0, X31
	0x03B0AC34 STR S0, [X19 + 0x250]
	0x03B0AC38 BL 0x3B13EC4
	0x03B0AC3C FMUL S0, S9, S0
	0x03B0AC40 MOV X0, X31
	0x03B0AC44 STR S0, [X19 + 0x254]
	0x03B0AC48 STRB W31, [X19 + 0x3FE]
	0x03B0AC4C BL 0x3B13DC4
	0x03B0AC50 LDR X8, [X19]
	0x03B0AC54 AND W1, W0, 0x1
	0x03B0AC58 MOV X0, X19
	0x03B0AC5C LDR X9, [X8 + 0x2C8]
	0x03B0AC60 LDR X2, [X8 + 0x2D0]
	0x03B0AC64 BLR X9
	0x03B0AC68 MOV X0, X31
	0x03B0AC6C BL 0x3B13F34
	0x03B0AC70 LDR W8, [X19 + 0x274]
	0x03B0AC74 AND W9, W0, 0x1
	0x03B0AC78 STRB W9, [X19 + 0x320]
	0x03B0AC7C MOVZ W9, 0xFFFF
	0x03B0AC80 CMP W8, W9
	0x03B0AC84 B.EQ 0x3B0ACA0
	0x03B0AC88 UNIMPLEMENTED
	0x03B0AC8C MOVI D1, 0xFF00000000FF
	0x03B0AC90 ADD X10, X19, 0x26C
	0x03B0AC94 AND V0.8B, V0.8B, V1.8B
	0x03B0AC98 STR D0, [X10]
	0x03B0AC9C STR W9, [X19 + 0x274]
	0x03B0ACA0 LDP X20, X19, [X31 + 0x20]
	0x03B0ACA4 LDP X30, X21, [X31 + 0x10]
	0x03B0ACA8 LDP D9, D8, [X31], #0x30
	0x03B0ACAC RET
	0x03B0ACB0 LDR W8, [X19 + 0x274]
	0x03B0ACB4 CMP W8, 0xFE
	0x03B0ACB8 B.GT 0x3B0AC7C
	0x03B0ACBC MOV W0, W8
	0x03B0ACC0 MOV X1, X31
	0x03B0ACC4 BL 0x3ADC294
	0x03B0ACC8 MOV W8, W0
	0x03B0ACCC STR W0, [X19 + 0x274]
	0x03B0ACD0 B 0x3B0AC7C
	0x03B0ACD4 STR X30, [X31 - 0x20]!
	0x03B0ACD8 STP X20, X19, [X31 + 0x10]
	0x03B0ACDC MOV X19, X1
	0x03B0ACE0 MOV X20, X0
	0x03B0ACE4 BL 0x3B0ACFC
	0x03B0ACE8 MOV X0, X20
	0x03B0ACEC MOV X1, X19
	0x03B0ACF0 LDP X20, X19, [X31 + 0x10]
	0x03B0ACF4 LDR X30, [X31], #0x20
	0x03B0ACF8 B 0x3B0A388
	0x03B0ACFC SUB X31, X31, 0x60
	0x03B0AD00 STR X30, [X31 + 0x20]
	0x03B0AD04 STP X24, X23, [X31 + 0x30]
	0x03B0AD08 STP X22, X21, [X31 + 0x40]
	0x03B0AD0C STP X20, X19, [X31 + 0x50]
	0x03B0AD10 ADRP X21, 0x8D8000
	0x03B0AD14 ADRP X24, 0x64E000
	0x03B0AD18 LDRB W8, [X21 + 0x663]
	0x03B0AD1C LDR X24, [X24 + 0x618]
	0x03B0AD20 MOV X20, X1
	0x03B0AD24 MOV X19, X0
	0x03B0AD28 TBNZ X8, 0x0, 0x3B0AD58
	0x03B0AD2C ADRP X0, 0x64E000
	0x03B0AD30 LDR X0, [X0 + 0x610]
	0x03B0AD34 BL 0x1C16CF4
	0x03B0AD38 ADRP X0, 0x5E9000
	0x03B0AD3C LDR X0, [X0 + 0x598]
	0x03B0AD40 BL 0x1C16CF4
	0x03B0AD44 ADRP X0, 0x64E000
	0x03B0AD48 LDR X0, [X0 + 0x618]
	0x03B0AD4C BL 0x1C16CF4
	0x03B0AD50 MOVZ W8, 0x1
	0x03B0AD54 STRB W8, [X21 + 0x663]
	0x03B0AD58 LDR X0, [X24]
	0x03B0AD5C STRB W31, [X31 + 0x2C]
	0x03B0AD60 LDR W21, [X19 + 0x25C]
	0x03B0AD64 LDR W22, [X19 + 0x214]
	0x03B0AD68 LDR W8, [X0 + 0xE0]
	0x03B0AD6C CBNZ W8, 0x3B0AD74
	0x03B0AD70 BL 0x1C16DFC
	0x03B0AD74 ADD X5, X31, 0x2C
	0x03B0AD78 MOVZ W0, 0x2026
	0x03B0AD7C MOV X1, X20
	0x03B0AD80 MOV W2, W31
	0x03B0AD84 MOV W3, W21
	0x03B0AD88 MOV W4, W22
	0x03B0AD8C MOV X6, X31
	0x03B0AD90 BL 0x3AEB240
	0x03B0AD94 MOV X1, X0
	0x03B0AD98 CBZ X0, 0x3B0ADD8
	0x03B0AD9C MOVI V0.2D, 0x0
	0x03B0ADA0 ADD X0, X31, 0x0
	0x03B0ADA4 MOV W2, W31
	0x03B0ADA8 MOV X3, X31
	0x03B0ADAC STP V0, V0, [X31]
	0x03B0ADB0 BL 0x3B1BAD8
	0x03B0ADB4 LDP V1, V0, [X31]
	0x03B0ADB8 STR V0, [X19 + 0x66]
	0x03B0ADBC STR V1, [X19 + 0x65]
	0x03B0ADC0 LDP X20, X19, [X31 + 0x50]
	0x03B0ADC4 LDP X22, X21, [X31 + 0x40]
	0x03B0ADC8 LDP X24, X23, [X31 + 0x30]
	0x03B0ADCC LDR X30, [X31 + 0x20]
	0x03B0ADD0 ADD X31, X31, 0x60
	0x03B0ADD4 RET
	0x03B0ADD8 CBZ X20, 0x3B0AF3C
	0x03B0ADDC LDR X21, [X20 + 0x138]
	0x03B0ADE0 CBZ X21, 0x3B0AE34
	0x03B0ADE4 LDR W8, [X21 + 0x18]
	0x03B0ADE8 CMP W8, 0x1
	0x03B0ADEC B.LT 0x3B0AE34
	0x03B0ADF0 LDR X0, [X24]
	0x03B0ADF4 LDR W22, [X19 + 0x25C]
	0x03B0ADF8 LDR W23, [X19 + 0x214]
	0x03B0ADFC LDR W8, [X0 + 0xE0]
	0x03B0AE00 CBNZ W8, 0x3B0AE08
	0x03B0AE04 BL 0x1C16DFC
	0x03B0AE08 ADD X6, X31, 0x2C
	0x03B0AE0C MOVZ W0, 0x2026
	0x03B0AE10 MOVZ W3, 0x1
	0x03B0AE14 MOV X1, X20
	0x03B0AE18 MOV X2, X21
	0x03B0AE1C MOV W4, W22
	0x03B0AE20 MOV W5, W23
	0x03B0AE24 MOV X7, X31
	0x03B0AE28 BL 0x3AEB758
	0x03B0AE2C MOV X1, X0
	0x03B0AE30 CBNZ X0, 0x3B0AD9C
	0x03B0AE34 MOV X0, X31
	0x03B0AE38 BL 0x3B13F74
	0x03B0AE3C CBZ X0, 0x3B0AEAC
	0x03B0AE40 MOV X0, X31
	0x03B0AE44 BL 0x3B13F74
	0x03B0AE48 CBZ X0, 0x3B0AF3C
	0x03B0AE4C LDR W8, [X0 + 0x18]
	0x03B0AE50 CMP W8, 0x1
	0x03B0AE54 B.LT 0x3B0AEAC
	0x03B0AE58 MOV X0, X31
	0x03B0AE5C BL 0x3B13F74
	0x03B0AE60 LDR X8, [X24]
	0x03B0AE64 LDR W21, [X19 + 0x25C]
	0x03B0AE68 LDR W22, [X19 + 0x214]
	0x03B0AE6C MOV X23, X0
	0x03B0AE70 LDR W9, [X8 + 0xE0]
	0x03B0AE74 CBNZ W9, 0x3B0AE80
	0x03B0AE78 MOV X0, X8
	0x03B0AE7C BL 0x1C16DFC
	0x03B0AE80 ADD X6, X31, 0x2C
	0x03B0AE84 MOVZ W0, 0x2026
	0x03B0AE88 MOVZ W3, 0x1
	0x03B0AE8C MOV X1, X20
	0x03B0AE90 MOV X2, X23
	0x03B0AE94 MOV W4, W21
	0x03B0AE98 MOV W5, W22
	0x03B0AE9C MOV X7, X31
	0x03B0AEA0 BL 0x3AEB758
	0x03B0AEA4 MOV X1, X0
	0x03B0AEA8 CBNZ X0, 0x3B0AD9C
	0x03B0AEAC MOV X0, X31
	0x03B0AEB0 BL 0x3B13E54
	0x03B0AEB4 ADRP X8, 0x5E9000
	0x03B0AEB8 LDR X8, [X8 + 0x598]
	0x03B0AEBC MOV X20, X0
	0x03B0AEC0 LDR X8, [X8]
	0x03B0AEC4 LDR W9, [X8 + 0xE0]
	0x03B0AEC8 CBNZ W9, 0x3B0AED4
	0x03B0AECC MOV X0, X8
	0x03B0AED0 BL 0x1C16DFC
	0x03B0AED4 MOV X0, X20
	0x03B0AED8 MOV X1, X31
	0x03B0AEDC MOV X2, X31
	0x03B0AEE0 BL 0x3C354F8
	0x03B0AEE4 TBZ X0, 0x0, 0x3B0ADC0
	0x03B0AEE8 MOV X0, X31
	0x03B0AEEC BL 0x3B13E54
	0x03B0AEF0 LDR X8, [X24]
	0x03B0AEF4 LDR W20, [X19 + 0x25C]
	0x03B0AEF8 LDR W21, [X19 + 0x214]
	0x03B0AEFC MOV X22, X0
	0x03B0AF00 LDR W9, [X8 + 0xE0]
	0x03B0AF04 CBNZ W9, 0x3B0AF10
	0x03B0AF08 MOV X0, X8
	0x03B0AF0C BL 0x1C16DFC
	0x03B0AF10 ADD X5, X31, 0x2C
	0x03B0AF14 MOVZ W0, 0x2026
	0x03B0AF18 MOVZ W2, 0x1
	0x03B0AF1C MOV X1, X22
	0x03B0AF20 MOV W3, W20
	0x03B0AF24 MOV W4, W21
	0x03B0AF28 MOV X6, X31
	0x03B0AF2C BL 0x3AEB240
	0x03B0AF30 MOV X1, X0
	0x03B0AF34 CBNZ X0, 0x3B0AD9C
	0x03B0AF38 B 0x3B0ADC0
	0x03B0AF3C BL 0x1C16F20
	0x03B0AF40 STR X30, [X31 - 0x10]!
	0x03B0AF44 CBZ X1, 0x3B0AFB0
	0x03B0AF48 LDR X8, [X1 + 0x18]
	0x03B0AF4C CMP W8, W2
	0x03B0AF50 B.LS 0x3B0AFAC
	0x03B0AF54 ADD W9, W3, W2
	0x03B0AF58 AND W10, W4, 0xFFFF
	0x03B0AF5C ADD X11, X1, W2, 0x2, SXTW
	0x03B0AF60 CMP W9, W8
	0x03B0AF64 STR W10, [X11 + 0x20]
	0x03B0AF68 B.GE 0x3B0AFA4
	0x03B0AF6C SXTW X9, W9
	0x03B0AF70 SXTW X10, W8
	0x03B0AF74 ADD X11, X1, 0x20
	0x03B0AF78 CMP W9, W8
	0x03B0AF7C B.CS 0x3B0AFAC
	0x03B0AF80 SUB W12, W9, 0x3
	0x03B0AF84 CMP W12, W8
	0x03B0AF88 B.CS 0x3B0AFAC
	0x03B0AF8C LDR W13, [X11, X9, LSL #2]
	0x03B0AF90 ADD X9, X9, 0x1
	0x03B0AF94 ADD X12, X1, W12, 0x2, SXTW
	0x03B0AF98 CMP X9, X10
	0x03B0AF9C STR W13, [X12 + 0x20]
	0x03B0AFA0 B.LT 0x3B0AF78
	0x03B0AFA4 LDR X30, [X31], #0x10
	0x03B0AFA8 RET
	0x03B0AFAC BL 0x1C16F28
	0x03B0AFB0 BL 0x1C16F20
	0x03B0AFB4 STR X30, [X31 - 0x10]!
	0x03B0AFB8 LDRB W8, [X0 + 0x25C]
	0x03B0AFBC TBNZ X8, 0x1, 0x3B0AFD0
	0x03B0AFC0 LDRB W8, [X0 + 0x258]
	0x03B0AFC4 ANDS W31, W8, 0x2
	0x03B0AFC8 CSET W8, EQ
	0x03B0AFCC B 0x3B0AFD4
	0x03B0AFD0 MOV W8, W31
	0x03B0AFD4 LDR X9, [X0 + 0x100]
	0x03B0AFD8 CBZ X9, 0x3B0B028
	0x03B0AFDC LDR X9, [X9 + 0x198]
	0x03B0AFE0 CBZ X9, 0x3B0B028
	0x03B0AFE4 MOVZ W10, 0x851F
	0x03B0AFE8 MOVK W10, 0x51EB0000
	0x03B0AFEC LDR W11, [X9 + 0x18]
	0x03B0AFF0 SMADDL X10, X1, X10, X31
	0x03B0AFF4 UBFM X12, X10, 0x3F, 0x3F
	0x03B0AFF8 SBFM X10, X10, 0x25, 0x3F
	0x03B0AFFC ADD W10, W10, W12
	0x03B0B000 CMP W10, W11
	0x03B0B004 B.CS 0x3B0B02C
	0x03B0B008 ADD X9, X9, W10, 0x4, SXTW
	0x03B0B00C ADD X10, X9, 0x20
	0x03B0B010 ADD X9, X9, 0x28
	0x03B0B014 CMP W8, 0x0
	0x03B0B018 CSEL X8, X10, X9, NE
	0x03B0B01C LDR X0, [X8]
	0x03B0B020 LDR X30, [X31], #0x10
	0x03B0B024 RET
	0x03B0B028 BL 0x1C16F20
	0x03B0B02C BL 0x1C16F28
	0x03B0B030 STP X30, X27, [X31 - 0x50]!
	0x03B0B034 STP X26, X25, [X31 + 0x10]
	0x03B0B038 STP X24, X23, [X31 + 0x20]
	0x03B0B03C STP X22, X21, [X31 + 0x30]
	0x03B0B040 STP X20, X19, [X31 + 0x40]
	0x03B0B044 ADRP X25, 0x8D7000
	0x03B0B048 ADRP X26, 0x64D000
	0x03B0B04C LDRB W8, [X25 + 0x665]
	0x03B0B050 LDR X26, [X26 + 0x618]
	0x03B0B054 MOV X20, X5
	0x03B0B058 MOV W21, W4
	0x03B0B05C MOV W22, W3
	0x03B0B060 MOV X23, X2
	0x03B0B064 MOV W19, W1
	0x03B0B068 MOV X24, X0
	0x03B0B06C TBNZ X8, 0x0, 0x3B0B0A8
	0x03B0B070 ADRP X0, 0x64D000
	0x03B0B074 LDR X0, [X0 + 0x610]
	0x03B0B078 BL 0x1C16CF4
	0x03B0B07C ADRP X0, 0x5E8000
	0x03B0B080 LDR X0, [X0 + 0x598]
	0x03B0B084 BL 0x1C16CF4
	0x03B0B088 ADRP X0, 0x64D000
	0x03B0B08C LDR X0, [X0 + 0x618]
	0x03B0B090 BL 0x1C16CF4
	0x03B0B094 ADRP X0, 0x64D000
	0x03B0B098 LDR X0, [X0 + 0x3E8]
	0x03B0B09C BL 0x1C16CF4
	0x03B0B0A0 MOVZ W8, 0x1
	0x03B0B0A4 STRB W8, [X25 + 0x665]
	0x03B0B0A8 LDR X0, [X26]
	0x03B0B0AC LDR W8, [X0 + 0xE0]
	0x03B0B0B0 CBNZ W8, 0x3B0B0B8
	0x03B0B0B4 BL 0x1C16DFC
	0x03B0B0B8 MOV W0, W19
	0x03B0B0BC MOV X1, X23
	0x03B0B0C0 MOV W2, W31
	0x03B0B0C4 MOV W3, W22
	0x03B0B0C8 MOV W4, W21
	0x03B0B0CC MOV X5, X20
	0x03B0B0D0 MOV X6, X31
	0x03B0B0D4 BL 0x3AEB240
	0x03B0B0D8 CBZ X0, 0x3B0B0FC
	0x03B0B0DC MOV X25, X0
	0x03B0B0E0 MOV X0, X25
	0x03B0B0E4 LDP X20, X19, [X31 + 0x40]
	0x03B0B0E8 LDP X22, X21, [X31 + 0x30]
	0x03B0B0EC LDP X24, X23, [X31 + 0x20]
	0x03B0B0F0 LDP X26, X25, [X31 + 0x10]
	0x03B0B0F4 LDP X30, X27, [X31], #0x50
	0x03B0B0F8 RET
	0x03B0B0FC CBZ X23, 0x3B0B40C
	0x03B0B100 LDR X25, [X23 + 0x138]
	0x03B0B104 CBZ X25, 0x3B0B14C
	0x03B0B108 LDR W8, [X25 + 0x18]
	0x03B0B10C CMP W8, 0x1
	0x03B0B110 B.LT 0x3B0B14C
	0x03B0B114 LDR X0, [X26]
	0x03B0B118 LDR W8, [X0 + 0xE0]
	0x03B0B11C CBNZ W8, 0x3B0B124
	0x03B0B120 BL 0x1C16DFC
	0x03B0B124 MOVZ W3, 0x1
	0x03B0B128 MOV W0, W19
	0x03B0B12C MOV X1, X23
	0x03B0B130 MOV X2, X25
	0x03B0B134 MOV W4, W22
	0x03B0B138 MOV W5, W21
	0x03B0B13C MOV X6, X20
	0x03B0B140 MOV X7, X31
	0x03B0B144 BL 0x3AEB758
	0x03B0B148 CBNZ X0, 0x3B0B0DC
	0x03B0B14C MOV X0, X23
	0x03B0B150 MOV X1, X31
	0x03B0B154 BL 0x3ADB8A4
	0x03B0B158 LDR X8, [X24 + 0xF8]
	0x03B0B15C CBZ X8, 0x3B0B40C
	0x03B0B160 MOV W25, W0
	0x03B0B164 MOV X0, X8
	0x03B0B168 MOV X1, X31
	0x03B0B16C BL 0x3ADB8A4
	0x03B0B170 CMP W25, W0
	0x03B0B174 B.NE 0x3B0B338
	0x03B0B178 ADRP X27, 0x5E8000
	0x03B0B17C LDR X27, [X27 + 0x598]
	0x03B0B180 LDR X25, [X24 + 0x1B0]
	0x03B0B184 LDR X0, [X27]
	0x03B0B188 LDR W8, [X0 + 0xE0]
	0x03B0B18C CBNZ W8, 0x3B0B194
	0x03B0B190 BL 0x1C16DFC
	0x03B0B194 MOV X0, X25
	0x03B0B198 MOV X1, X31
	0x03B0B19C MOV X2, X31
	0x03B0B1A0 BL 0x3C354F8
	0x03B0B1A4 TBZ X0, 0x0, 0x3B0B1D4
	0x03B0B1A8 LDR X0, [X26]
	0x03B0B1AC LDR X24, [X24 + 0x1B0]
	0x03B0B1B0 LDR W8, [X0 + 0xE0]
	0x03B0B1B4 CBNZ W8, 0x3B0B1BC
	0x03B0B1B8 BL 0x1C16DFC
	0x03B0B1BC MOVZ W2, 0x1
	0x03B0B1C0 MOV W0, W19
	0x03B0B1C4 MOV X1, X24
	0x03B0B1C8 MOV X3, X31
	0x03B0B1CC BL 0x3AEB9B4
	0x03B0B1D0 CBNZ X0, 0x3B0B0DC
	0x03B0B1D4 MOV X0, X31
	0x03B0B1D8 BL 0x3B13F74
	0x03B0B1DC CBZ X0, 0x3B0B240
	0x03B0B1E0 MOV X0, X31
	0x03B0B1E4 BL 0x3B13F74
	0x03B0B1E8 CBZ X0, 0x3B0B40C
	0x03B0B1EC LDR W8, [X0 + 0x18]
	0x03B0B1F0 CMP W8, 0x1
	0x03B0B1F4 B.LT 0x3B0B240
	0x03B0B1F8 MOV X0, X31
	0x03B0B1FC BL 0x3B13F74
	0x03B0B200 LDR X8, [X26]
	0x03B0B204 MOV X24, X0
	0x03B0B208 LDR W9, [X8 + 0xE0]
	0x03B0B20C CBNZ W9, 0x3B0B218
	0x03B0B210 MOV X0, X8
	0x03B0B214 BL 0x1C16DFC
	0x03B0B218 MOVZ W3, 0x1
	0x03B0B21C MOV W0, W19
	0x03B0B220 MOV X1, X23
	0x03B0B224 MOV X2, X24
	0x03B0B228 MOV W4, W22
	0x03B0B22C MOV W5, W21
	0x03B0B230 MOV X6, X20
	0x03B0B234 MOV X7, X31
	0x03B0B238 BL 0x3AEB758
	0x03B0B23C CBNZ X0, 0x3B0B0DC
	0x03B0B240 MOV X0, X31
	0x03B0B244 BL 0x3B13E54
	0x03B0B248 LDR X8, [X27]
	0x03B0B24C MOV X23, X0
	0x03B0B250 LDR W9, [X8 + 0xE0]
	0x03B0B254 CBNZ W9, 0x3B0B260
	0x03B0B258 MOV X0, X8
	0x03B0B25C BL 0x1C16DFC
	0x03B0B260 MOV X0, X23
	0x03B0B264 MOV X1, X31
	0x03B0B268 MOV X2, X31
	0x03B0B26C BL 0x3C354F8
	0x03B0B270 TBZ X0, 0x0, 0x3B0B2B8
	0x03B0B274 MOV X0, X31
	0x03B0B278 BL 0x3B13E54
	0x03B0B27C LDR X8, [X26]
	0x03B0B280 MOV X23, X0
	0x03B0B284 LDR W9, [X8 + 0xE0]
	0x03B0B288 CBNZ W9, 0x3B0B294
	0x03B0B28C MOV X0, X8
	0x03B0B290 BL 0x1C16DFC
	0x03B0B294 MOVZ W2, 0x1
	0x03B0B298 MOV W0, W19
	0x03B0B29C MOV X1, X23
	0x03B0B2A0 MOV W3, W22
	0x03B0B2A4 MOV W4, W21
	0x03B0B2A8 MOV X5, X20
	0x03B0B2AC MOV X6, X31
	0x03B0B2B0 BL 0x3AEB240
	0x03B0B2B4 CBNZ X0, 0x3B0B0DC
	0x03B0B2B8 MOV X0, X31
	0x03B0B2BC BL 0x3B13FAC
	0x03B0B2C0 LDR X8, [X27]
	0x03B0B2C4 MOV X20, X0
	0x03B0B2C8 LDR W9, [X8 + 0xE0]
	0x03B0B2CC CBNZ W9, 0x3B0B2D8
	0x03B0B2D0 MOV X0, X8
	0x03B0B2D4 BL 0x1C16DFC
	0x03B0B2D8 MOV X0, X20
	0x03B0B2DC MOV X1, X31
	0x03B0B2E0 MOV X2, X31
	0x03B0B2E4 BL 0x3C354F8
	0x03B0B2E8 MOV X25, X31
	0x03B0B2EC TBZ X0, 0x0, 0x3B0B0E0
	0x03B0B2F0 MOV X0, X31
	0x03B0B2F4 BL 0x3B13FAC
	0x03B0B2F8 LDR X8, [X26]
	0x03B0B2FC MOV X20, X0
	0x03B0B300 LDR W9, [X8 + 0xE0]
	0x03B0B304 CBNZ W9, 0x3B0B310
	0x03B0B308 MOV X0, X8
	0x03B0B30C BL 0x1C16DFC
	0x03B0B310 MOV W0, W19
	0x03B0B314 MOV X1, X20
	0x03B0B318 LDP X20, X19, [X31 + 0x40]
	0x03B0B31C LDP X22, X21, [X31 + 0x30]
	0x03B0B320 LDP X24, X23, [X31 + 0x20]
	0x03B0B324 LDP X26, X25, [X31 + 0x10]
	0x03B0B328 MOVZ W2, 0x1
	0x03B0B32C MOV X3, X31
	0x03B0B330 LDP X30, X27, [X31], #0x50
	0x03B0B334 B 0x3AEB9B4
	0x03B0B338 LDR X0, [X26]
	0x03B0B33C LDR X25, [X24 + 0xF8]
	0x03B0B340 LDR W8, [X0 + 0xE0]
	0x03B0B344 CBNZ W8, 0x3B0B34C
	0x03B0B348 BL 0x1C16DFC
	0x03B0B34C MOV W0, W19
	0x03B0B350 MOV X1, X25
	0x03B0B354 MOV W2, W31
	0x03B0B358 MOV W3, W22
	0x03B0B35C MOV W4, W21
	0x03B0B360 MOV X5, X20
	0x03B0B364 MOV X6, X31
	0x03B0B368 BL 0x3AEB240
	0x03B0B36C CBZ X0, 0x3B0B3B4
	0x03B0B370 STR W31, [X24 + 0x120]
	0x03B0B374 ADRP X19, 0x64D000
	0x03B0B378 LDR X19, [X19 + 0x3E8]
	0x03B0B37C MOV X25, X0
	0x03B0B380 LDR X0, [X19]
	0x03B0B384 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 416
	002 Move [X31+256], D15
	003 Move [X31+264], D14
	004 Move [X31+272], D13
	005 Move [X31+280], D12
	006 Move [X31+288], D11
	007 Move [X31+296], D10
	008 Move [X31+304], D9
	009 Move [X31+312], D8
	010 Move [X31+320], X29
	011 Move [X31+328], X30
	012 Move [X31+336], X28
	013 Move [X31+344], X27
	014 Move [X31+352], X26
	015 Move [X31+360], X25
	016 Move [X31+368], X24
	017 Move [X31+376], X23
	018 Move [X31+384], X22
	019 Move [X31+392], X21
	020 Move [X31+400], X20
	021 Move [X31+408], X19
	022 Move X20, 0x8D9000
	023 Move W8, [X20+1632]
	024 Move X24, X2
	025 Move V9, V7
	026 Move V10, V6
	027 Move X19, X1
	028 Move V12, V5
	029 Move V14, V4
	030 Move V11, V3
	031 Move V13, V2
	032 Move V15, V1
	033 Move V8, V0
	034 Move X21, X0
	035 Move X9, X2
	036 ShiftRight X9, 24
	037 And X9, X9, 0x7FFFFFFF
	038 Move [X31+252], W9
	039 Move TEMP, X8
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {57}
	043 Move X0, 0x5EA000
	044 Move X0, [X0+2600]
	045 Call 0x1C17CF4
	046 Move X0, 0x612000
	047 Move X0, [X0+1544]
	048 Call 0x1C17CF4
	049 Move X0, 0x64F000
	050 Move X0, [X0+840]
	051 Call 0x1C17CF4
	052 Move X0, 0x650000
	053 Move X0, [X0+784]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X20+1632], W8
	057 NotImplemented "Instruction MOVI not yet implemented."
	058 Move [X31+224], X31
	059 Move [X31+232], X31
	060 Move [X31+240], W31
	061 Move [X31+208], X31
	062 Move [X31+216], X31
	063 Move [X31+176], V0
	064 Move [X31+184], V0
	065 Move [X31+144], V0
	066 Move [X31+152], V0
	067 Move [X31+112], V0
	068 Move [X31+120], V0
	069 Move X1, [X21+248]
	070 Move X0, X21
	071 Call TMP_Text.GetUnderlineSpecialCharacter, X0, X1
	072 Move X8, [X21+1648]
	073 Compare X8, 0
	074 JumpIfEqual {115}
	075 Move X9, [X21+872]
	076 Compare X9, 0
	077 JumpIfEqual {949}
	078 Move X20, [X9+96]
	079 Compare X20, 0
	080 JumpIfEqual {949}
	081 NotImplemented "Instruction LDRSW not yet implemented."
	082 Move W9, [X20+24]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move W10, 80
	085 NotImplemented "Instruction MADD not yet implemented."
	086 Move X10, [X22+48]
	087 Compare X10, 0
	088 JumpIfEqual {949}
	089 Move W11, [X19]
	090 Move W10, [X10+24]
	091 Move [X31+60], S10
	092 Add W23, W11, 12
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X8, 0x64F000
	095 Move X8, [X8+840]
	096 Move X0, [X8]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {102}
	100 Call 0x1C17DFC
	101 Move W9, [X20+24]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Add W8, W23, 3
	104 NotImplemented "Instruction CMP not yet implemented."
	105 NotImplemented "Instruction CSEL not yet implemented."
	106 Add X0, X22, 32
	107 NotImplemented "Instruction SBFM not yet implemented."
	108 Move X2, X31
	109 Call TMP_MeshInfo.ResizeMeshInfo, X0, X1
	110 Move X8, [X21+1648]
	111 NotImplemented "Instruction FCMP not yet implemented."
	112 NotImplemented "Instruction FCSEL not yet implemented."
	113 Compare X8, 0
	114 JumpIfNotEqual {136}
	115 Move X0, X31
	116 Call TMP_Settings.get_warningsDisabled
	117 Move TEMP, X0
	118 And TEMP, TEMP, 1
	119 Compare TEMP, 1
	120 JumpIfEqual {926}
	121 Move X8, 0x5EA000
	122 Move X8, [X8+2600]
	123 Move X0, [X8]
	124 Move W8, [X0+224]
	125 Compare W8, 0
	126 JumpIfNotEqual {128}
	127 Call 0x1C17DFC
	128 Move X8, 0x650000
	129 Move X8, [X8+784]
	130 Move X1, X21
	131 Move X2, X31
	132 Move X0, [X8]
	133 Call Debug.LogWarning, X0, X1
	134 NotImplemented "Instruction FCMP not yet implemented."
	135 NotImplemented "Instruction FCSEL not yet implemented."
	136 Move X0, [X8+32]
	137 Compare X0, 0
	138 JumpIfEqual {949}
	139 Add X8, X31, 88
	140 Move X1, X31
	141 Call Glyph.get_metrics, X0
	142 NotImplemented "Instruction LDUR not yet implemented."
	143 Move W8, [X31+104]
	144 Move [X31+14], V0
	145 Move [X31+240], W8
	146 Move X8, [X21+1648]
	147 Compare X8, 0
	148 JumpIfEqual {949}
	149 Move X0, [X8+32]
	150 Move [X31+56], S9
	151 Compare X0, 0
	152 JumpIfEqual {949}
	153 Move V15, [X31+416]
	154 Move X1, X31
	155 Move V14, V12
	156 Call Glyph.get_glyphRect, X0
	157 Move [X31+208], X0
	158 Move [X31+216], X1
	159 Add X0, X31, 224
	160 Move X1, X31
	161 Call GlyphMetrics.get_width, X0
	162 Move S9, 0.5
	163 Multiply S0, S0, S9
	164 Add X0, X31, 224
	165 Move X1, X31
	166 Multiply S12, S0, S15
	167 Call GlyphMetrics.get_width, X0
	168 Move X8, [X21+1656]
	169 Subtract S2, S11, S8
	170 Multiply S0, S0, S15
	171 Multiply S1, S2, S9
	172 NotImplemented "Instruction FCMP not yet implemented."
	173 NotImplemented "Instruction FCSEL not yet implemented."
	174 Move [X31+52], S2
	175 Move [X31+4], V0
	176 Compare X8, 0
	177 JumpIfEqual {949}
	178 Move V9, [X21+1560]
	179 Add X1, X8, 80
	180 Add X0, X31, 112
	181 Move W2, 96
	182 Call 0x3EB2B30
	183 Add X0, X31, 112
	184 Move X1, X31
	185 Call FaceInfo.get_underlineThickness, X0
	186 Move X8, [X21+872]
	187 Compare X8, 0
	188 JumpIfEqual {949}
	189 Move X8, [X8+96]
	190 Compare X8, 0
	191 JumpIfEqual {949}
	192 Move W9, [X8+24]
	193 NotImplemented "Instruction CMP not yet implemented."
	194 Move W9, 80
	195 NotImplemented "Instruction MADD not yet implemented."
	196 Move X23, [X8+48]
	197 Compare X23, 0
	198 JumpIfEqual {949}
	199 NotImplemented "Instruction LDRSW not yet implemented."
	200 Move W9, [X23+24]
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Move V3, [X21+1560]
	203 Move S4, W31
	204 Move W9, 12
	205 Add S2, S8, S4
	206 Add S3, S0, S3
	207 Multiply S3, S3, S15
	208 Subtract S3, S4, S3
	209 Add S1, S13, S4
	210 NotImplemented "Instruction MADD not yet implemented."
	211 Add S3, S10, S3
	212 Move [X8+32], S2
	213 Move [X8+40], S3
	214 Move [X8+40], S1
	215 Move W8, [X19]
	216 Move W9, [X23+24]
	217 Add W8, W8, 1
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Move V3, [X21+1560]
	220 Move X8, W8
	221 Move W9, 12
	222 NotImplemented "Instruction MADD not yet implemented."
	223 Multiply S3, S3, S15
	224 Add S3, S10, S3
	225 Move [X8+32], S2
	226 Move [X8+40], S3
	227 Move [X8+40], S1
	228 Move W8, [X19]
	229 Move W10, [X23+24]
	230 Move V6, [X31+4]
	231 Add W9, W8, 1
	232 NotImplemented "Instruction CMP not yet implemented."
	233 Add W8, W8, 2
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Move X9, W9
	236 Move W10, 12
	237 Add X11, X23, 32
	238 NotImplemented "Instruction MADD not yet implemented."
	239 Move V1, [X9+8]
	240 Move V3, [X9]
	241 Move S2, W31
	242 Move X8, W8
	243 Add S2, S1, S2
	244 NotImplemented "Instruction MOVI not yet implemented."
	245 Move V1.S[0], V6.S[0]
	246 NotImplemented "Instruction MADD not yet implemented."
	247 Add V3, V1, V3
	248 Move [X8], D3
	249 Move [X8+8], S2
	250 NotImplemented "Instruction LDRSW not yet implemented."
	251 Move W10, [X23+24]
	252 NotImplemented "Instruction CMP not yet implemented."
	253 Add W9, W8, 3
	254 NotImplemented "Instruction CMP not yet implemented."
	255 Move W10, 12
	256 Add X11, X23, 32
	257 NotImplemented "Instruction MADD not yet implemented."
	258 Move V2, [X8+8]
	259 Move V4, [X8]
	260 Move S3, W31
	261 Move X8, W9
	262 Add S2, S2, S3
	263 NotImplemented "Instruction MADD not yet implemented."
	264 Add V1, V1, V4
	265 Move [X8], D1
	266 Move [X8+8], S2
	267 Move W8, [X19]
	268 Move W10, [X23+24]
	269 Add W9, W8, 3
	270 NotImplemented "Instruction CMP not yet implemented."
	271 Add W8, W8, 4
	272 NotImplemented "Instruction CMP not yet implemented."
	273 Move X9, W9
	274 Move W10, 12
	275 Add X11, X23, 32
	276 NotImplemented "Instruction MADD not yet implemented."
	277 Move V1, [X9]
	278 Move V2, [X9+8]
	279 Move X8, W8
	280 NotImplemented "Instruction MADD not yet implemented."
	281 Move [X8], D1
	282 Move [X8+8], S2
	283 Move W8, [X19]
	284 Move W10, [X23+24]
	285 Add W9, W8, 2
	286 NotImplemented "Instruction CMP not yet implemented."
	287 Add W8, W8, 5
	288 NotImplemented "Instruction CMP not yet implemented."
	289 Move X9, W9
	290 Move W10, 12
	291 Add X11, X23, 32
	292 NotImplemented "Instruction MADD not yet implemented."
	293 Move V1, [X9]
	294 Move V2, [X9+8]
	295 Move X8, W8
	296 NotImplemented "Instruction MADD not yet implemented."
	297 Move [X8], D1
	298 Move [X8+8], S2
	299 Move W8, [X19]
	300 Move W9, [X23+24]
	301 Add W8, W8, 6
	302 NotImplemented "Instruction CMP not yet implemented."
	303 Move V3, [X21+1560]
	304 Move S1, W31
	305 Move X8, W8
	306 Move W9, 12
	307 Multiply S3, S3, S15
	308 Subtract S2, S11, S6
	309 Add S1, S14, S1
	310 NotImplemented "Instruction MADD not yet implemented."
	311 Add S3, S10, S3
	312 Move [X8+32], S2
	313 Move [X8+40], S3
	314 Move [X8+40], S1
	315 Move W8, [X19]
	316 Move W9, [X23+24]
	317 Add W8, W8, 7
	318 NotImplemented "Instruction CMP not yet implemented."
	319 Move V3, [X21+1560]
	320 Move X8, W8
	321 Move W9, 12
	322 NotImplemented "Instruction MADD not yet implemented."
	323 Add S3, S0, S3
	324 Multiply S3, S3, S15
	325 Subtract S3, S10, S3
	326 Move [X8+32], S2
	327 Move [X8+40], S3
	328 Move [X8+40], S1
	329 Move W8, [X19]
	330 Move W10, [X23+24]
	331 Add W9, W8, 7
	332 NotImplemented "Instruction CMP not yet implemented."
	333 Add W8, W8, 8
	334 NotImplemented "Instruction CMP not yet implemented."
	335 Move X9, W9
	336 Move W10, 12
	337 Add X11, X23, 32
	338 NotImplemented "Instruction MADD not yet implemented."
	339 Move V2, [X9]
	340 Move V3, [X9+8]
	341 Move X8, W8
	342 NotImplemented "Instruction MADD not yet implemented."
	343 Move [X8], D2
	344 Move [X8+8], S3
	345 Move W8, [X19]
	346 Move W10, [X23+24]
	347 Add W9, W8, 6
	348 NotImplemented "Instruction CMP not yet implemented."
	349 Add W8, W8, 9
	350 NotImplemented "Instruction CMP not yet implemented."
	351 Move X9, W9
	352 Move W10, 12
	353 Add X11, X23, 32
	354 NotImplemented "Instruction MADD not yet implemented."
	355 Move V2, [X9]
	356 Move V3, [X9+8]
	357 Move X8, W8
	358 NotImplemented "Instruction MADD not yet implemented."
	359 Move [X8], D2
	360 Move [X8+8], S3
	361 Move W8, [X19]
	362 Move W9, [X23+24]
	363 Add W8, W8, 10
	364 NotImplemented "Instruction CMP not yet implemented."
	365 Move V3, [X21+1560]
	366 Move S2, W31
	367 Move X8, W8
	368 Move W9, 12
	369 Multiply S3, S3, S15
	370 Add S2, S11, S2
	371 NotImplemented "Instruction MADD not yet implemented."
	372 Add S3, S10, S3
	373 Move [X8+32], S2
	374 Move [X8+40], S3
	375 Move [X8+40], S1
	376 Move W8, [X19]
	377 Move W9, [X23+24]
	378 Add W8, W8, 11
	379 NotImplemented "Instruction CMP not yet implemented."
	380 Move V3, [X21+1560]
	381 Move X8, W8
	382 Move W9, 12
	383 NotImplemented "Instruction MADD not yet implemented."
	384 Add S0, S0, S3
	385 Multiply S0, S0, S15
	386 Subtract S0, S10, S0
	387 Move [X8+32], S2
	388 Move [X8+40], S0
	389 Move [X8+40], S1
	390 Move X8, [X21+872]
	391 Compare X8, 0
	392 JumpIfEqual {949}
	393 Move X8, [X8+96]
	394 Compare X8, 0
	395 JumpIfEqual {949}
	396 Move W9, [X8+24]
	397 NotImplemented "Instruction CMP not yet implemented."
	398 Move X9, [X21+1656]
	399 Move [X31+16], X24
	400 Compare X9, 0
	401 JumpIfEqual {949}
	402 Move X10, 0x612000
	403 Move X10, [X10+1544]
	404 Move W11, 80
	405 NotImplemented "Instruction MADD not yet implemented."
	406 Move X24, [X8+72]
	407 Move X0, [X10]
	408 Move W20, [X9+264]
	409 Move W9, [X9+268]
	410 Move [X31+40], X25
	411 Move W8, [X0+224]
	412 Move [X31+64], W9
	413 Compare W8, 0
	414 JumpIfNotEqual {416}
	415 Call 0x1C17DFC
	416 Add X0, X31, 208
	417 Move X1, X31
	418 Call GlyphRect.get_x, X0
	419 Move W28, W0
	420 Add X0, X31, 208
	421 Move X1, X31
	422 Call GlyphRect.get_y, X0
	423 Move V11, [X21+1560]
	424 Move W22, W0
	425 Add X0, X31, 208
	426 Move X1, X31
	427 Call GlyphRect.get_y, X0
	428 Move W26, W0
	429 Add X0, X31, 208
	430 Move X1, X31
	431 Call GlyphRect.get_height, X0
	432 Move V10, [X21+1560]
	433 Move W29, W0
	434 Add X0, X31, 208
	435 Move X1, X31
	436 Call GlyphRect.get_x, X0
	437 Move W25, W0
	438 Add X0, X31, 208
	439 Move X1, X31
	440 Call GlyphRect.get_width, X0
	441 Move W27, W0
	442 Add X0, X31, 208
	443 Move X1, X31
	444 Call GlyphRect.get_x, X0
	445 Move [X31+36], W0
	446 Add X0, X31, 208
	447 Move X1, X31
	448 Call GlyphRect.get_width, X0
	449 Move [X31+32], W0
	450 Add X0, X31, 208
	451 Move X1, X31
	452 Call GlyphRect.get_x, X0
	453 Move [X31+28], W0
	454 Add X0, X31, 208
	455 Move X1, X31
	456 Call GlyphRect.get_width, X0
	457 Compare X24, 0
	458 JumpIfEqual {949}
	459 NotImplemented "Instruction LDRSW not yet implemented."
	460 Move W9, [X24+24]
	461 NotImplemented "Instruction CMP not yet implemented."
	462 Move V0, [X31+60]
	463 Move W9, [X31+64]
	464 NotImplemented "Instruction SCVTF not yet implemented."
	465 NotImplemented "Instruction SCVTF not yet implemented."
	466 Multiply S0, S9, S0
	467 NotImplemented "Instruction FDIV not yet implemented."
	468 NotImplemented "Instruction SCVTF not yet implemented."
	469 Subtract S5, S2, S11
	470 NotImplemented "Instruction SCVTF not yet implemented."
	471 Subtract S3, S3, S4
	472 Add X8, X24, X8
	473 NotImplemented "Instruction FDIV not yet implemented."
	474 NotImplemented "Instruction FDIV not yet implemented."
	475 Move [X8+32], S3
	476 Move [X8+40], S0
	477 Move W8, [X19]
	478 Move W9, [X24+24]
	479 Add W8, W8, 1
	480 NotImplemented "Instruction CMP not yet implemented."
	481 Add W9, W29, W26
	482 NotImplemented "Instruction SCVTF not yet implemented."
	483 Move X8, W8
	484 Add S5, S10, S5
	485 Add X8, X24, X8
	486 NotImplemented "Instruction FDIV not yet implemented."
	487 Move [X8+32], S3
	488 Move [X8+40], S2
	489 Move W8, [X19]
	490 Move W9, [X24+24]
	491 Add W8, W8, 2
	492 NotImplemented "Instruction CMP not yet implemented."
	493 NotImplemented "Instruction SCVTF not yet implemented."
	494 NotImplemented "Instruction SCVTF not yet implemented."
	495 Move S3, 0.5
	496 Subtract S4, S5, S4
	497 Multiply S5, S6, S3
	498 Move X8, W8
	499 Add S4, S4, S5
	500 Add X8, X24, X8
	501 NotImplemented "Instruction FDIV not yet implemented."
	502 Move [X8+32], S4
	503 Move [X8+40], S2
	504 Move W8, [X19]
	505 Move W9, [X24+24]
	506 Add W8, W8, 3
	507 NotImplemented "Instruction CMP not yet implemented."
	508 Move X8, W8
	509 Add X8, X24, X8
	510 Move [X8+32], S4
	511 Move [X8+40], S0
	512 Move W8, [X19]
	513 Move W9, [X24+24]
	514 Move X16, [X31+40]
	515 Add W8, W8, 4
	516 NotImplemented "Instruction CMP not yet implemented."
	517 Move X9, -50458624
	518 Move V5, [X9+1040]
	519 Move X8, W8
	520 Add X8, X24, X8
	521 Multiply S5, S4, S5
	522 Subtract S6, S4, S5
	523 Move [X8+32], S6
	524 Move [X8+40], S0
	525 Move W8, [X19]
	526 Move W9, [X24+24]
	527 Add W8, W8, 5
	528 NotImplemented "Instruction CMP not yet implemented."
	529 Move X8, W8
	530 Add X8, X24, X8
	531 Move [X8+32], S6
	532 Move [X8+40], S2
	533 Move W8, [X19]
	534 Move W9, [X24+24]
	535 Add W8, W8, 6
	536 NotImplemented "Instruction CMP not yet implemented."
	537 Move X8, W8
	538 Add S4, S4, S5
	539 Add X8, X24, X8
	540 Move [X8+32], S4
	541 Move [X8+40], S2
	542 Move W8, [X19]
	543 Move W9, [X24+24]
	544 Add W8, W8, 7
	545 NotImplemented "Instruction CMP not yet implemented."
	546 Move X8, W8
	547 Add X8, X24, X8
	548 Move [X8+32], S4
	549 Move [X8+40], S0
	550 Move W8, [X19]
	551 Move W9, [X24+24]
	552 Add W8, W8, 8
	553 NotImplemented "Instruction CMP not yet implemented."
	554 Move W9, [X31+36]
	555 Move V4, [X31+56]
	556 Move X8, W8
	557 Add X8, X24, X8
	558 NotImplemented "Instruction SCVTF not yet implemented."
	559 Move W9, [X31+32]
	560 Multiply S4, S9, S4
	561 NotImplemented "Instruction FDIV not yet implemented."
	562 Add S5, S4, S5
	563 NotImplemented "Instruction SCVTF not yet implemented."
	564 Multiply S3, S6, S3
	565 Add S3, S5, S3
	566 NotImplemented "Instruction FDIV not yet implemented."
	567 Move [X8+32], S3
	568 Move [X8+40], S0
	569 Move W8, [X19]
	570 Move W9, [X24+24]
	571 Add W8, W8, 9
	572 NotImplemented "Instruction CMP not yet implemented."
	573 Move X8, W8
	574 Add X8, X24, X8
	575 Move [X8+32], S3
	576 Move [X8+40], S2
	577 Move W8, [X19]
	578 Move W9, [X24+24]
	579 Move V6, [X31+52]
	580 Add W8, W8, 10
	581 NotImplemented "Instruction CMP not yet implemented."
	582 Move W9, [X31+28]
	583 NotImplemented "Instruction SCVTF not yet implemented."
	584 Move X8, W8
	585 Add X8, X24, X8
	586 NotImplemented "Instruction SCVTF not yet implemented."
	587 Add S3, S4, S3
	588 Add S3, S3, S5
	589 NotImplemented "Instruction FDIV not yet implemented."
	590 Move [X8+32], S1
	591 Move [X8+40], S2
	592 Move W8, [X19]
	593 Move W9, [X24+24]
	594 Add W8, W8, 11
	595 NotImplemented "Instruction CMP not yet implemented."
	596 Move X8, W8
	597 Add X8, X24, X8
	598 Move [X8+32], S1
	599 Move [X8+40], S0
	600 NotImplemented "Instruction LDRSW not yet implemented."
	601 Move W8, [X23+24]
	602 Add W10, W9, 2
	603 NotImplemented "Instruction CMP not yet implemented."
	604 Move X8, [X21+872]
	605 Move X15, [X31+16]
	606 Compare X8, 0
	607 JumpIfEqual {949}
	608 Move X8, [X8+96]
	609 Compare X8, 0
	610 JumpIfEqual {949}
	611 Move W11, [X8+24]
	612 NotImplemented "Instruction CMP not yet implemented."
	613 Move W11, 80
	614 NotImplemented "Instruction MADD not yet implemented."
	615 Move X8, [X8+80]
	616 Compare X8, 0
	617 JumpIfEqual {949}
	618 Move W11, [X8+24]
	619 NotImplemented "Instruction CMP not yet implemented."
	620 Move V0, [X31+424]
	621 Move W11, 12
	622 Add X9, X8, X9
	623 NotImplemented "Instruction SMADDL not yet implemented."
	624 NotImplemented "Instruction FABS not yet implemented."
	625 Move V2, [X10+32]
	626 Move [X9+32], W31
	627 Move [X9+36], S0
	628 Move W9, [X19]
	629 Move W10, [X8+24]
	630 Add W9, W9, 1
	631 NotImplemented "Instruction CMP not yet implemented."
	632 Move X10, -50458624
	633 Move V1, [X10+12]
	634 Move W10, 0x45800000
	635 Subtract S2, S2, S8
	636 Move S3, W10
	637 Move W10, 0x7F800000
	638 NotImplemented "Instruction FDIV not yet implemented."
	639 Move S4, W10
	640 Move W10, 0xD5000000
	641 Multiply S2, S2, S1
	642 Move X9, W9
	643 NotImplemented "Instruction FCMP not yet implemented."
	644 Move S4, W10
	645 Move W10, 0x8000
	646 NotImplemented "Instruction MOVK not yet implemented."
	647 Add X9, X8, X9
	648 Move [X9+32], W10
	649 Move [X9+36], S0
	650 Move W9, [X19]
	651 NotImplemented "Instruction FCVTZS not yet implemented."
	652 NotImplemented "Instruction SCVTF not yet implemented."
	653 Move W10, [X8+24]
	654 Add W9, W9, 2
	655 Multiply S2, S2, S3
	656 NotImplemented "Instruction FCSEL not yet implemented."
	657 NotImplemented "Instruction CMP not yet implemented."
	658 Move X9, W9
	659 Add S3, S2, S1
	660 Add X9, X8, X9
	661 Move [X9+32], S3
	662 Move [X9+40], S0
	663 Move W9, [X19]
	664 Move W10, [X8+24]
	665 Add W9, W9, 3
	666 NotImplemented "Instruction CMP not yet implemented."
	667 Move X9, W9
	668 Move S3, W31
	669 Add S2, S2, S3
	670 Add X9, X8, X9
	671 Move [X9+32], S2
	672 Move [X9+40], S0
	673 Move W9, [X19]
	674 Move W11, [X23+24]
	675 Add W10, W9, 4
	676 NotImplemented "Instruction CMP not yet implemented."
	677 Add W9, W9, 6
	678 NotImplemented "Instruction CMP not yet implemented."
	679 Move X10, W10
	680 Move W12, 12
	681 Add X11, X23, 32
	682 Multiply X14, X10, X12
	683 Move V2, [X11]
	684 Move W13, 0x45800000
	685 Move W14, 0x7F800000
	686 Move S3, W13
	687 Subtract S2, S2, S8
	688 NotImplemented "Instruction FDIV not yet implemented."
	689 Move W13, 0xD5000000
	690 Move S4, W14
	691 Move W14, [X8+24]
	692 Multiply S2, S2, S1
	693 NotImplemented "Instruction FCMP not yet implemented."
	694 Move S4, W13
	695 NotImplemented "Instruction FCVTZS not yet implemented."
	696 NotImplemented "Instruction SCVTF not yet implemented."
	697 Multiply S2, S2, S3
	698 NotImplemented "Instruction FCSEL not yet implemented."
	699 NotImplemented "Instruction CMP not yet implemented."
	700 Move S4, W31
	701 NotImplemented "Instruction SMADDL not yet implemented."
	702 Add X10, X8, X10
	703 Add S4, S2, S4
	704 Move V3, [X11]
	705 Move [X10+32], S4
	706 Move [X10+40], S0
	707 Move W9, [X19]
	708 Move W10, [X8+24]
	709 Add W9, W9, 5
	710 NotImplemented "Instruction CMP not yet implemented."
	711 Subtract S3, S3, S8
	712 Move W10, 0x45800000
	713 Move X9, W9
	714 Move S4, W10
	715 Move W10, 0x7F800000
	716 Add S2, S2, S1
	717 NotImplemented "Instruction FDIV not yet implemented."
	718 Add X9, X8, X9
	719 Move S5, W10
	720 Move W10, 0xD5000000
	721 Multiply S3, S3, S1
	722 Move [X9+32], S2
	723 Move [X9+40], S0
	724 NotImplemented "Instruction FCMP not yet implemented."
	725 Move S5, W10
	726 Move W9, [X19]
	727 NotImplemented "Instruction FCVTZS not yet implemented."
	728 NotImplemented "Instruction SCVTF not yet implemented."
	729 Move W10, [X8+24]
	730 Multiply S2, S2, S4
	731 Add W9, W9, 6
	732 NotImplemented "Instruction FCSEL not yet implemented."
	733 NotImplemented "Instruction CMP not yet implemented."
	734 Move X9, W9
	735 Add S3, S2, S1
	736 Add X9, X8, X9
	737 Move [X9+32], S3
	738 Move [X9+40], S0
	739 Move W9, [X19]
	740 Move W10, [X8+24]
	741 Add W9, W9, 7
	742 NotImplemented "Instruction CMP not yet implemented."
	743 Move X9, W9
	744 Move S3, W31
	745 Add S2, S2, S3
	746 Add X9, X8, X9
	747 Move [X9+32], S2
	748 Move [X9+40], S0
	749 Move W9, [X19]
	750 Move W10, [X23+24]
	751 Add W9, W9, 8
	752 NotImplemented "Instruction CMP not yet implemented."
	753 Move X9, W9
	754 Move W10, 12
	755 NotImplemented "Instruction MADD not yet implemented."
	756 Move V2, [X10+32]
	757 Move W10, 0x45800000
	758 Move W11, 0x7F800000
	759 Move S3, W10
	760 Subtract S2, S2, S8
	761 NotImplemented "Instruction FDIV not yet implemented."
	762 Move W10, 0xD5000000
	763 Move S4, W11
	764 Move W11, [X8+24]
	765 Multiply S2, S2, S1
	766 NotImplemented "Instruction FCMP not yet implemented."
	767 Move S4, W10
	768 NotImplemented "Instruction FCVTZS not yet implemented."
	769 NotImplemented "Instruction SCVTF not yet implemented."
	770 Multiply S2, S2, S3
	771 NotImplemented "Instruction FCSEL not yet implemented."
	772 NotImplemented "Instruction CMP not yet implemented."
	773 Move S3, W31
	774 Add X9, X8, X9
	775 Add S3, S2, S3
	776 Move [X9+32], S3
	777 Move [X9+40], S0
	778 Move W9, [X19]
	779 Move W10, [X8+24]
	780 Add W9, W9, 9
	781 NotImplemented "Instruction CMP not yet implemented."
	782 Move X9, W9
	783 Add S1, S2, S1
	784 Add X9, X8, X9
	785 Move [X9+32], S1
	786 Move [X9+40], S0
	787 Move W9, [X19]
	788 Move W10, [X8+24]
	789 Add W9, W9, 10
	790 NotImplemented "Instruction CMP not yet implemented."
	791 Move X9, W9
	792 Move W10, 0x8FF8
	793 NotImplemented "Instruction MOVK not yet implemented."
	794 Add X9, X8, X9
	795 Move [X9+32], W10
	796 Move [X9+36], S0
	797 Move W9, [X19]
	798 Move W10, [X8+24]
	799 Add W9, W9, 11
	800 NotImplemented "Instruction CMP not yet implemented."
	801 Move X9, W9
	802 Move W10, 0x8000
	803 NotImplemented "Instruction MOVK not yet implemented."
	804 Add X8, X8, X9
	805 Move [X8+32], W10
	806 Move [X8+36], S0
	807 Move W8, [X21+327]
	808 Move W9, [X31+252]
	809 NotImplemented "Instruction CMP not yet implemented."
	810 NotImplemented "Instruction CSEL not yet implemented."
	811 Move [X31+252], W8
	812 Move X9, [X21+872]
	813 Compare X9, 0
	814 JumpIfEqual {949}
	815 Move X9, [X9+96]
	816 Compare X9, 0
	817 JumpIfEqual {949}
	818 Move W10, [X9+24]
	819 NotImplemented "Instruction CMP not yet implemented."
	820 Move W10, 80
	821 NotImplemented "Instruction MADD not yet implemented."
	822 Move X9, [X9+88]
	823 Compare X9, 0
	824 JumpIfEqual {949}
	825 NotImplemented "Instruction LDRSW not yet implemented."
	826 Move W11, [X9+24]
	827 NotImplemented "Instruction CMP not yet implemented."
	828 Add X11, X9, X10
	829 Move W10, W15
	830 ShiftRight W10, 16
	831 And W10, W10, 0x7FFFFFFF
	832 Move [X11+34], W10
	833 NotImplemented "Instruction STRH not yet implemented."
	834 Move [X11+35], W8
	835 Move W11, [X19]
	836 Move W12, [X9+24]
	837 Add W11, W11, 1
	838 NotImplemented "Instruction CMP not yet implemented."
	839 Add X11, X9, W11
	840 Move [X11+34], W10
	841 NotImplemented "Instruction STRH not yet implemented."
	842 Move [X11+35], W8
	843 Move W11, [X19]
	844 Move W12, [X9+24]
	845 Add W11, W11, 2
	846 NotImplemented "Instruction CMP not yet implemented."
	847 Add X11, X9, W11
	848 Move [X11+34], W10
	849 NotImplemented "Instruction STRH not yet implemented."
	850 Move [X11+35], W8
	851 Move W11, [X19]
	852 Move W12, [X9+24]
	853 Add W11, W11, 3
	854 NotImplemented "Instruction CMP not yet implemented."
	855 Add X11, X9, W11
	856 Move [X11+34], W10
	857 NotImplemented "Instruction STRH not yet implemented."
	858 Move [X11+35], W8
	859 Move W11, [X19]
	860 Move W12, [X9+24]
	861 Add W11, W11, 4
	862 NotImplemented "Instruction CMP not yet implemented."
	863 Add X11, X9, W11
	864 Move [X11+34], W10
	865 NotImplemented "Instruction STRH not yet implemented."
	866 Move [X11+35], W8
	867 Move W11, [X19]
	868 Move W12, [X9+24]
	869 Add W11, W11, 5
	870 NotImplemented "Instruction CMP not yet implemented."
	871 Add X11, X9, W11
	872 Move [X11+34], W10
	873 NotImplemented "Instruction STRH not yet implemented."
	874 Move [X11+35], W8
	875 Move W11, [X19]
	876 Move W12, [X9+24]
	877 Add W11, W11, 6
	878 NotImplemented "Instruction CMP not yet implemented."
	879 Add X11, X9, W11
	880 Move [X11+34], W10
	881 NotImplemented "Instruction STRH not yet implemented."
	882 Move [X11+35], W8
	883 Move W11, [X19]
	884 Move W12, [X9+24]
	885 Add W11, W11, 7
	886 NotImplemented "Instruction CMP not yet implemented."
	887 Add X11, X9, W11
	888 Move [X11+34], W10
	889 NotImplemented "Instruction STRH not yet implemented."
	890 Move [X11+35], W8
	891 Move W11, [X19]
	892 Move W12, [X9+24]
	893 Add W11, W11, 8
	894 NotImplemented "Instruction CMP not yet implemented."
	895 Add X11, X9, W11
	896 Move [X11+34], W10
	897 NotImplemented "Instruction STRH not yet implemented."
	898 Move [X11+35], W8
	899 Move W11, [X19]
	900 Move W12, [X9+24]
	901 Add W11, W11, 9
	902 NotImplemented "Instruction CMP not yet implemented."
	903 Add X11, X9, W11
	904 Move [X11+34], W10
	905 NotImplemented "Instruction STRH not yet implemented."
	906 Move [X11+35], W8
	907 Move W11, [X19]
	908 Move W12, [X9+24]
	909 Add W11, W11, 10
	910 NotImplemented "Instruction CMP not yet implemented."
	911 Add X11, X9, W11
	912 Move [X11+34], W10
	913 NotImplemented "Instruction STRH not yet implemented."
	914 Move [X11+35], W8
	915 Move W11, [X19]
	916 Move W12, [X9+24]
	917 Add W11, W11, 11
	918 NotImplemented "Instruction CMP not yet implemented."
	919 Add X9, X9, W11
	920 Move [X9+34], W10
	921 NotImplemented "Instruction STRH not yet implemented."
	922 Move [X9+35], W8
	923 Move W8, [X19]
	924 Add W8, W8, 12
	925 Move [X19], W8
	926 Move X20, [X31+400]
	927 Move X19, [X31+408]
	928 Move X22, [X31+384]
	929 Move X21, [X31+392]
	930 Move X24, [X31+368]
	931 Move X23, [X31+376]
	932 Move X26, [X31+352]
	933 Move X25, [X31+360]
	934 Move X28, [X31+336]
	935 Move X27, [X31+344]
	936 Move X29, [X31+320]
	937 Move X30, [X31+328]
	938 Move D9, [X31+304]
	939 Move D8, [X31+312]
	940 Move D11, [X31+288]
	941 Move D10, [X31+296]
	942 Move D13, [X31+272]
	943 Move D12, [X31+280]
	944 Move D15, [X31+256]
	945 Move D14, [X31+264]
	946 Add X31, X31, 416
	947 Return 
	948 Call 0x1C17F28
	949 Call 0x1C17F20

Method: System.Void DrawTextHighlight(UnityEngine.Vector3 start, UnityEngine.Vector3 end, ref System.Int32 index, UnityEngine.Color32 highlightColor)

Disassembly:
	0x03B0B538 FMOV S3, W9
	0x03B0B53C FMUL S0, S0, S2
	0x03B0B540 FMOV D2, X8
	0x03B0B544 FCVTZS W8, S1
	0x03B0B548 FCMP S1, S3
	0x03B0B54C SCVTF D1, W8
	0x03B0B550 FCVTZS W8, S0
	0x03B0B554 FCSEL D1, D4, D1, EQ
	0x03B0B558 SCVTF D4, W8
	0x03B0B55C MOVZ X8, 0xC2A00000
	0x03B0B560 FMUL D2, D4, D2
	0x03B0B564 FCMP S0, S3
	0x03B0B568 FMOV D0, X8
	0x03B0B56C FCSEL D0, D0, D2, EQ
	0x03B0B570 FADD D0, D0, D1
	0x00000000 INVALID
	0x03B0B578 RET
	0x03B0B57C RET
	0x03B0B580 SUB W8, W1, 0x30
	0x03B0B584 AND W9, W8, 0xFFFF
	0x03B0B588 CMP W9, 0x36
	0x03B0B58C B.HI 0x3B0B5A4
	0x03B0B590 ADRP X9, 0xFFFFFFFFFD08C000
	0x03B0B594 SXTH X8, W8
	0x03B0B598 ADD X9, X9, 0xCA0
	0x03B0B59C LDR W0, [X9, X8, LSL #2]
	0x03B0B5A0 RET
	0x03B0B5A4 MOVZ W0, 0xF
	0x03B0B5A8 RET
	0x03B0B5AC STP X30, X23, [X31 - 0x30]!
	0x03B0B5B0 STP X22, X21, [X31 + 0x10]
	0x03B0B5B4 STP X20, X19, [X31 + 0x20]
	0x03B0B5B8 CBZ X1, 0x3B0B650
	0x03B0B5BC MOV W20, W2
	0x03B0B5C0 MOV X19, X1
	0x03B0B5C4 MOV X0, X1
	0x03B0B5C8 MOV W1, W2
	0x03B0B5CC MOV X2, X31
	0x03B0B5D0 BL 0x3222A1C
	0x03B0B5D4 MOV W1, W0
	0x03B0B5D8 BL 0x3B0B580
	0x03B0B5DC MOV W21, W0
	0x03B0B5E0 ADD W1, W20, 0x1
	0x03B0B5E4 MOV X0, X19
	0x03B0B5E8 MOV X2, X31
	0x03B0B5EC BL 0x3222A1C
	0x03B0B5F0 MOV W1, W0
	0x03B0B5F4 BL 0x3B0B580
	0x03B0B5F8 MOV W22, W0
	0x03B0B5FC ADD W1, W20, 0x2
	0x03B0B600 MOV X0, X19
	0x03B0B604 MOV X2, X31
	0x03B0B608 BL 0x3222A1C
	0x03B0B60C MOV W1, W0
	0x03B0B610 BL 0x3B0B580
	0x03B0B614 MOV W23, W0
	0x03B0B618 ADD W1, W20, 0x3
	0x03B0B61C MOV X0, X19
	0x03B0B620 MOV X2, X31
	0x03B0B624 BL 0x3222A1C
	0x03B0B628 MOV W1, W0
	0x03B0B62C BL 0x3B0B580
	0x03B0B630 UBFM W8, W22, 0x18, 0x17
	0x03B0B634 ADD W8, W8, W21, 0xC, LSL
	0x03B0B638 LDP X20, X19, [X31 + 0x20]
	0x03B0B63C LDP X22, X21, [X31 + 0x10]
	0x03B0B640 ADD W8, W8, W23, 0x4, LSL
	0x03B0B644 ADD W0, W8, W0
	0x03B0B648 LDP X30, X23, [X31], #0x30
	0x03B0B64C RET
	0x03B0B650 BL 0x1C16F20
	0x03B0B654 STP X30, X23, [X31 - 0x30]!
	0x03B0B658 STP X22, X21, [X31 + 0x10]
	0x03B0B65C STP X20, X19, [X31 + 0x20]
	0x03B0B660 CBZ X1, 0x3B0B6F8
	0x03B0B664 LDR W10, [X1 + 0x18]
	0x03B0B668 CMP W10, W2
	0x03B0B66C B.LS 0x3B0B6F4
	0x03B0B670 ADD W9, W2, 0x1
	0x03B0B674 CMP W9, W10
	0x03B0B678 B.CS 0x3B0B6F4
	0x03B0B67C ADD W8, W2, 0x2
	0x03B0B680 CMP W8, W10
	0x03B0B684 B.CS 0x3B0B6F4
	0x03B0B688 ADD W22, W2, 0x3
	0x03B0B68C CMP W22, W10
	0x03B0B690 B.CS 0x3B0B6F4
	0x03B0B694 ADD X23, X1, 0x20
	0x03B0B698 ADD X10, X1, W2, 0x2, SXTW
	0x03B0B69C ADD X9, X1, W9, 0x2, SXTW
	0x03B0B6A0 LDR W1, [X23, W8, SXTW]
	0x03B0B6A4 LDR W19, [X10 + 0x20]
	0x03B0B6A8 LDR W20, [X9 + 0x20]
	0x03B0B6AC BL 0x3B0B580
	0x03B0B6B0 MOV W1, W20
	0x03B0B6B4 MOV W21, W0
	0x03B0B6B8 BL 0x3B0B580
	0x03B0B6BC MOV W1, W19
	0x03B0B6C0 MOV W20, W0
	0x03B0B6C4 BL 0x3B0B580
	0x03B0B6C8 LDR W1, [X23, W22, SXTW]
	0x03B0B6CC MOV W19, W0
	0x03B0B6D0 BL 0x3B0B580
	0x03B0B6D4 UBFM W8, W20, 0x18, 0x17
	0x03B0B6D8 ADD W8, W8, W21, 0x4, LSL
	0x03B0B6DC ADD W8, W8, W19, 0xC, LSL
	0x03B0B6E0 LDP X20, X19, [X31 + 0x20]
	0x03B0B6E4 LDP X22, X21, [X31 + 0x10]
	0x03B0B6E8 ADD W0, W8, W0
	0x03B0B6EC LDP X30, X23, [X31], #0x30
	0x03B0B6F0 RET
	0x03B0B6F4 BL 0x1C16F28
	0x03B0B6F8 BL 0x1C16F20
	0x03B0B6FC STP X30, X23, [X31 - 0x30]!
	0x03B0B700 STP X22, X21, [X31 + 0x10]
	0x03B0B704 STP X20, X19, [X31 + 0x20]
	0x03B0B708 CBZ X1, 0x3B0B7A0
	0x03B0B70C MOV W20, W2
	0x03B0B710 MOV X19, X1
	0x03B0B714 MOV X0, X1
	0x03B0B718 MOV W1, W2
	0x03B0B71C MOV X2, X31
	0x03B0B720 BL 0x3232E88
	0x03B0B724 MOV W1, W0
	0x03B0B728 BL 0x3B0B580
	0x03B0B72C MOV W21, W0
	0x03B0B730 ADD W1, W20, 0x1
	0x03B0B734 MOV X0, X19
	0x03B0B738 MOV X2, X31
	0x03B0B73C BL 0x3232E88
	0x03B0B740 MOV W1, W0
	0x03B0B744 BL 0x3B0B580
	0x03B0B748 MOV W22, W0
	0x03B0B74C ADD W1, W20, 0x2
	0x03B0B750 MOV X0, X19
	0x03B0B754 MOV X2, X31
	0x03B0B758 BL 0x3232E88
	0x03B0B75C MOV W1, W0
	0x03B0B760 BL 0x3B0B580
	0x03B0B764 MOV W23, W0
	0x03B0B768 ADD W1, W20, 0x3
	0x03B0B76C MOV X0, X19
	0x03B0B770 MOV X2, X31
	0x03B0B774 BL 0x3232E88
	0x03B0B778 MOV W1, W0
	0x03B0B77C BL 0x3B0B580
	0x03B0B780 UBFM W8, W22, 0x18, 0x17
	0x03B0B784 ADD W8, W8, W21, 0xC, LSL
	0x03B0B788 LDP X20, X19, [X31 + 0x20]
	0x03B0B78C LDP X22, X21, [X31 + 0x10]
	0x03B0B790 ADD W8, W8, W23, 0x4, LSL
	0x03B0B794 ADD W0, W8, W0
	0x03B0B798 LDP X30, X23, [X31], #0x30
	0x03B0B79C RET
	0x03B0B7A0 BL 0x1C16F20
	0x03B0B7A4 STP X30, X27, [X31 - 0x50]!
	0x03B0B7A8 STP X26, X25, [X31 + 0x10]
	0x03B0B7AC STP X24, X23, [X31 + 0x20]
	0x03B0B7B0 STP X22, X21, [X31 + 0x30]
	0x03B0B7B4 STP X20, X19, [X31 + 0x40]
	0x03B0B7B8 CBZ X1, 0x3B0B8D8
	0x03B0B7BC MOV W20, W2
	0x03B0B7C0 MOV X19, X1
	0x03B0B7C4 MOV X0, X1
	0x03B0B7C8 MOV W1, W2
	0x03B0B7CC MOV X2, X31
	0x03B0B7D0 BL 0x3222A1C
	0x03B0B7D4 MOV W1, W0
	0x03B0B7D8 BL 0x3B0B580
	0x03B0B7DC MOV W21, W0
	0x03B0B7E0 ADD W1, W20, 0x1
	0x03B0B7E4 MOV X0, X19
	0x03B0B7E8 MOV X2, X31
	0x03B0B7EC BL 0x3222A1C
	0x03B0B7F0 MOV W1, W0
	0x03B0B7F4 BL 0x3B0B580
	0x03B0B7F8 MOV W22, W0
	0x03B0B7FC ADD W1, W20, 0x2
	0x03B0B800 MOV X0, X19
	0x03B0B804 MOV X2, X31
	0x03B0B808 BL 0x3222A1C
	0x03B0B80C MOV W1, W0
	0x03B0B810 BL 0x3B0B580
	0x03B0B814 MOV W23, W0
	0x03B0B818 ADD W1, W20, 0x3
	0x03B0B81C MOV X0, X19
	0x03B0B820 MOV X2, X31
	0x03B0B824 BL 0x3222A1C
	0x03B0B828 MOV W1, W0
	0x03B0B82C BL 0x3B0B580
	0x03B0B830 MOV W24, W0
	0x03B0B834 ADD W1, W20, 0x4
	0x03B0B838 MOV X0, X19
	0x03B0B83C MOV X2, X31
	0x03B0B840 BL 0x3222A1C
	0x03B0B844 MOV W1, W0
	0x03B0B848 BL 0x3B0B580
	0x03B0B84C MOV W25, W0
	0x03B0B850 ADD W1, W20, 0x5
	0x03B0B854 MOV X0, X19
	0x03B0B858 MOV X2, X31
	0x03B0B85C BL 0x3222A1C
	0x03B0B860 MOV W1, W0
	0x03B0B864 BL 0x3B0B580
	0x03B0B868 MOV W26, W0
	0x03B0B86C ADD W1, W20, 0x6
	0x03B0B870 MOV X0, X19
	0x03B0B874 MOV X2, X31
	0x03B0B878 BL 0x3222A1C
	0x03B0B87C MOV W1, W0
	0x03B0B880 BL 0x3B0B580
	0x03B0B884 MOV W27, W0
	0x03B0B888 ADD W1, W20, 0x7
	0x03B0B88C MOV X0, X19
	0x03B0B890 MOV X2, X31
	0x03B0B894 BL 0x3222A1C
	0x03B0B898 MOV W1, W0
	0x03B0B89C BL 0x3B0B580
	0x03B0B8A0 UBFM W8, W22, 0x8, 0x7
	0x03B0B8A4 ADD W8, W8, W21, 0x1C, LSL
	0x03B0B8A8 ADD W8, W8, W23, 0x14, LSL
	0x03B0B8AC ADD W8, W8, W24, 0x10, LSL
	0x03B0B8B0 ADD W8, W8, W25, 0xC, LSL
	0x03B0B8B4 ADD W8, W8, W26, 0x8, LSL
	0x03B0B8B8 LDP X20, X19, [X31 + 0x40]
	0x03B0B8BC LDP X22, X21, [X31 + 0x30]
	0x03B0B8C0 LDP X24, X23, [X31 + 0x20]
	0x03B0B8C4 LDP X26, X25, [X31 + 0x10]
	0x03B0B8C8 ADD W8, W8, W27, 0x4, LSL
	0x03B0B8CC ADD W0, W8, W0
	0x03B0B8D0 LDP X30, X27, [X31], #0x50
	0x03B0B8D4 RET
	0x03B0B8D8 BL 0x1C16F20
	0x03B0B8DC STP X30, X27, [X31 - 0x50]!
	0x03B0B8E0 STP X26, X25, [X31 + 0x10]
	0x03B0B8E4 STP X24, X23, [X31 + 0x20]
	0x03B0B8E8 STP X22, X21, [X31 + 0x30]
	0x03B0B8EC STP X20, X19, [X31 + 0x40]
	0x03B0B8F0 CBZ X1, 0x3B0BA20
	0x03B0B8F4 LDR W9, [X1 + 0x18]
	0x03B0B8F8 CMP W9, W2
	0x03B0B8FC B.LS 0x3B0BA1C
	0x03B0B900 ADD W8, W2, 0x1
	0x03B0B904 CMP W8, W9
	0x03B0B908 B.CS 0x3B0BA1C
	0x03B0B90C ADD W10, W2, 0x2
	0x03B0B910 CMP W10, W9
	0x03B0B914 B.CS 0x3B0BA1C
	0x03B0B918 ADD W11, W2, 0x3
	0x03B0B91C CMP W11, W9
	0x03B0B920 B.CS 0x3B0BA1C
	0x03B0B924 ADD W13, W2, 0x4
	0x03B0B928 CMP W13, W9
	0x03B0B92C B.CS 0x3B0BA1C
	0x03B0B930 ADD W14, W2, 0x5
	0x03B0B934 CMP W14, W9
	0x03B0B938 B.CS 0x3B0BA1C
	0x03B0B93C ADD W12, W2, 0x6
	0x03B0B940 CMP W12, W9
	0x03B0B944 B.CS 0x3B0BA1C
	0x03B0B948 ADD W26, W2, 0x7
	0x03B0B94C CMP W26, W9
	0x03B0B950 B.CS 0x3B0BA1C
	0x03B0B954 ADD X27, X1, 0x20
	0x03B0B958 ADD X9, X1, W2, 0x2, SXTW
	0x03B0B95C ADD X8, X1, W8, 0x2, SXTW
	0x03B0B960 ADD X10, X1, W10, 0x2, SXTW
	0x03B0B964 ADD X11, X1, W11, 0x2, SXTW
	0x03B0B968 ADD X13, X1, W13, 0x2, SXTW
	0x03B0B96C ADD X14, X1, W14, 0x2, SXTW
	0x03B0B970 LDR W1, [X27, W12, SXTW]
	0x03B0B974 LDR W19, [X9 + 0x20]
	0x03B0B978 LDR W20, [X8 + 0x20]
	0x03B0B97C LDR W21, [X10 + 0x20]
	0x03B0B980 LDR W22, [X11 + 0x20]
	0x03B0B984 LDR W23, [X13 + 0x20]
	0x03B0B988 LDR W24, [X14 + 0x20]
	0x03B0B98C BL 0x3B0B580
	0x03B0B990 MOV W1, W24
	0x03B0B994 MOV W25, W0
	0x03B0B998 BL 0x3B0B580
	0x03B0B99C MOV W1, W23
	0x03B0B9A0 MOV W24, W0
	0x03B0B9A4 BL 0x3B0B580
	0x03B0B9A8 MOV W1, W22
	0x03B0B9AC MOV W23, W0
	0x03B0B9B0 BL 0x3B0B580
	0x03B0B9B4 MOV W1, W21
	0x03B0B9B8 MOV W22, W0
	0x03B0B9BC BL 0x3B0B580
	0x03B0B9C0 MOV W1, W20
	0x03B0B9C4 MOV W21, W0
	0x03B0B9C8 BL 0x3B0B580
	0x03B0B9CC MOV W1, W19
	0x03B0B9D0 MOV W20, W0
	0x03B0B9D4 BL 0x3B0B580
	0x03B0B9D8 LDR W1, [X27, W26, SXTW]
	0x03B0B9DC MOV W19, W0
	0x03B0B9E0 BL 0x3B0B580
	0x03B0B9E4 UBFM W8, W24, 0x18, 0x17
	0x03B0B9E8 ADD W8, W8, W25, 0x4, LSL
	0x03B0B9EC ADD W8, W8, W23, 0xC, LSL
	0x03B0B9F0 ADD W8, W8, W22, 0x10, LSL
	0x03B0B9F4 ADD W8, W8, W21, 0x14, LSL
	0x03B0B9F8 ADD W8, W8, W20, 0x18, LSL
	0x03B0B9FC ADD W8, W8, W19, 0x1C, LSL
	0x03B0BA00 LDP X20, X19, [X31 + 0x40]
	0x03B0BA04 LDP X22, X21, [X31 + 0x30]
	0x03B0BA08 LDP X24, X23, [X31 + 0x20]
	0x03B0BA0C LDP X26, X25, [X31 + 0x10]
	0x03B0BA10 ADD W0, W8, W0
	0x03B0BA14 LDP X30, X27, [X31], #0x50
	0x03B0BA18 RET
	0x03B0BA1C BL 0x1C16F28
	0x03B0BA20 BL 0x1C16F20
	0x03B0BA24 STP X30, X27, [X31 - 0x50]!
	0x03B0BA28 STP X26, X25, [X31 + 0x10]
	0x03B0BA2C STP X24, X23, [X31 + 0x20]
	0x03B0BA30 STP X22, X21, [X31 + 0x30]
	0x03B0BA34 STP X20, X19, [X31 + 0x40]
	0x03B0BA38 CBZ X1, 0x3B0BB58
	0x03B0BA3C MOV W20, W2
	0x03B0BA40 MOV X19, X1
	0x03B0BA44 MOV X0, X1
	0x03B0BA48 MOV W1, W2
	0x03B0BA4C MOV X2, X31
	0x03B0BA50 BL 0x3232E88
	0x03B0BA54 MOV W1, W0
	0x03B0BA58 BL 0x3B0B580
	0x03B0BA5C MOV W21, W0

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+80], X28
	010 Move [X31+88], X27
	011 Move [X31+96], X26
	012 Move [X31+104], X25
	013 Move [X31+112], X24
	014 Move [X31+120], X23
	015 Move [X31+128], X22
	016 Move [X31+136], X21
	017 Move [X31+144], X20
	018 Move [X31+152], X19
	019 Move X22, 0x8D8000
	020 Move W8, [X22+1633]
	021 Move X20, X2
	022 Move X19, X1
	023 Move V10, V5
	024 Move V11, V4
	025 Move V8, V3
	026 Move V13, V2
	027 Move V9, V1
	028 Move V12, V0
	029 Move X21, X0
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {48}
	034 Move X0, 0x5E9000
	035 Move X0, [X0+2600]
	036 Call 0x1C17CF4
	037 Move X0, 0x611000
	038 Move X0, [X0+1544]
	039 Call 0x1C17CF4
	040 Move X0, 0x64E000
	041 Move X0, [X0+840]
	042 Call 0x1C17CF4
	043 Move X0, 0x64F000
	044 Move X0, [X0+800]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X22+1633], W8
	048 Move [X31], X31
	049 Move [X31+8], X31
	050 Move X8, [X21+1648]
	051 Compare X8, 0
	052 JumpIfNotEqual {59}
	053 Move X1, [X21+248]
	054 Move X0, X21
	055 Call TMP_Text.GetUnderlineSpecialCharacter, X0, X1
	056 Move X8, [X21+1648]
	057 Compare X8, 0
	058 JumpIfEqual {343}
	059 Move X8, [X21+872]
	060 Compare X8, 0
	061 JumpIfEqual {363}
	062 Move X22, [X8+96]
	063 Compare X22, 0
	064 JumpIfEqual {363}
	065 NotImplemented "Instruction LDRSW not yet implemented."
	066 Move W9, [X22+24]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W10, 80
	069 NotImplemented "Instruction MADD not yet implemented."
	070 Move X10, [X23+48]
	071 Compare X10, 0
	072 JumpIfEqual {363}
	073 Move W11, [X19]
	074 Move W10, [X10+24]
	075 Add W24, W11, 4
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X8, 0x64E000
	078 Move X8, [X8+840]
	079 Move X0, [X8]
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {85}
	083 Call 0x1C17DFC
	084 Move W9, [X22+24]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Add W8, W24, 3
	087 NotImplemented "Instruction CMP not yet implemented."
	088 NotImplemented "Instruction CSEL not yet implemented."
	089 Add X0, X23, 32
	090 NotImplemented "Instruction SBFM not yet implemented."
	091 Move X2, X31
	092 Call TMP_MeshInfo.ResizeMeshInfo, X0, X1
	093 Move X8, [X21+872]
	094 Compare X8, 0
	095 JumpIfEqual {363}
	096 Move X8, [X8+96]
	097 Compare X8, 0
	098 JumpIfEqual {363}
	099 Move W9, [X8+24]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move W9, 80
	102 NotImplemented "Instruction MADD not yet implemented."
	103 Move X8, [X8+48]
	104 Compare X8, 0
	105 JumpIfEqual {363}
	106 NotImplemented "Instruction LDRSW not yet implemented."
	107 Move W10, [X8+24]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move W10, 12
	110 NotImplemented "Instruction MADD not yet implemented."
	111 Move [X9+32], S12
	112 Move [X9+40], S9
	113 Move [X9+40], S13
	114 Move W9, [X19]
	115 Move W10, [X8+24]
	116 Add W9, W9, 1
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Move X9, W9
	119 Move W10, 12
	120 NotImplemented "Instruction MADD not yet implemented."
	121 Move [X9+32], S12
	122 Move [X9+40], S11
	123 Move [X9+40], W31
	124 Move W9, [X19]
	125 Move W10, [X8+24]
	126 Add W9, W9, 2
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X9, W9
	129 Move W10, 12
	130 NotImplemented "Instruction MADD not yet implemented."
	131 Move [X9+32], S8
	132 Move [X9+40], S11
	133 Move [X9+40], S10
	134 Move W9, [X19]
	135 Move W10, [X8+24]
	136 Add W9, W9, 3
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move X9, W9
	139 Move W10, 12
	140 NotImplemented "Instruction MADD not yet implemented."
	141 Move [X8+32], S8
	142 Move [X8+40], S9
	143 Move [X8+40], W31
	144 Move X8, [X21+872]
	145 Compare X8, 0
	146 JumpIfEqual {363}
	147 Move X8, [X8+96]
	148 Compare X8, 0
	149 JumpIfEqual {363}
	150 Move W9, [X8+24]
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move X9, [X21+1656]
	153 Compare X9, 0
	154 JumpIfEqual {363}
	155 Move X10, [X21+1648]
	156 Compare X10, 0
	157 JumpIfEqual {363}
	158 Move X0, [X10+32]
	159 Compare X0, 0
	160 JumpIfEqual {363}
	161 Move W10, 80
	162 NotImplemented "Instruction MADD not yet implemented."
	163 Move X22, 0x611000
	164 Move W28, [X9+264]
	165 Move X26, [X8+72]
	166 Move W27, [X9+268]
	167 Move X22, [X22+1544]
	168 Move X1, X31
	169 Call Glyph.get_glyphRect, X0
	170 Move X8, X0
	171 Move X0, [X22]
	172 Move [X31], X8
	173 Move [X31+8], X1
	174 Move W8, [X0+224]
	175 Compare W8, 0
	176 JumpIfNotEqual {178}
	177 Call 0x1C17DFC
	178 Add X0, X31, 0
	179 Move X1, X31
	180 Call GlyphRect.get_x, X0
	181 Move W22, W0
	182 Add X0, X31, 0
	183 Move X1, X31
	184 Call GlyphRect.get_width, X0
	185 Move W24, W0
	186 Add X0, X31, 0
	187 Move X1, X31
	188 Call GlyphRect.get_y, X0
	189 Move W23, W0
	190 Add X0, X31, 0
	191 Move X1, X31
	192 Call GlyphRect.get_height, X0
	193 NotImplemented "Instruction CMP not yet implemented."
	194 NotImplemented "Instruction CINC not yet implemented."
	195 Compare X26, 0
	196 JumpIfEqual {363}
	197 NotImplemented "Instruction LDRSW not yet implemented."
	198 Move W10, [X26+24]
	199 NotImplemented "Instruction CMP not yet implemented."
	200 NotImplemented "Instruction SBFM not yet implemented."
	201 NotImplemented "Instruction SCVTF not yet implemented."
	202 Move S3, 0.5
	203 NotImplemented "Instruction SCVTF not yet implemented."
	204 Multiply S2, S2, S3
	205 NotImplemented "Instruction SCVTF not yet implemented."
	206 Add S0, S0, S3
	207 NotImplemented "Instruction SCVTF not yet implemented."
	208 NotImplemented "Instruction SCVTF not yet implemented."
	209 Add S2, S2, S3
	210 NotImplemented "Instruction SCVTF not yet implemented."
	211 Add X8, X26, X8
	212 NotImplemented "Instruction FDIV not yet implemented."
	213 NotImplemented "Instruction FDIV not yet implemented."
	214 Move [X8+32], S1
	215 Move [X8+40], S0
	216 Move W8, [X19]
	217 Move W9, [X26+24]
	218 Add W8, W8, 1
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Move X8, W8
	221 Add X8, X26, X8
	222 Move [X8+32], S1
	223 Move [X8+40], S0
	224 Move W8, [X19]
	225 Move W9, [X26+24]
	226 Add W8, W8, 2
	227 NotImplemented "Instruction CMP not yet implemented."
	228 Move X8, W8
	229 Add X8, X26, X8
	230 Move [X8+32], S1
	231 Move [X8+40], S0
	232 Move W8, [X19]
	233 Move W9, [X26+24]
	234 Add W8, W8, 3
	235 NotImplemented "Instruction CMP not yet implemented."
	236 Move X8, W8
	237 Add X8, X26, X8
	238 Move [X8+32], S1
	239 Move [X8+40], S0
	240 Move X8, [X21+872]
	241 Compare X8, 0
	242 JumpIfEqual {363}
	243 Move X8, [X8+96]
	244 Compare X8, 0
	245 JumpIfEqual {363}
	246 Move W9, [X8+24]
	247 NotImplemented "Instruction CMP not yet implemented."
	248 Move W9, 80
	249 NotImplemented "Instruction MADD not yet implemented."
	250 Move X8, [X8+80]
	251 Compare X8, 0
	252 JumpIfEqual {363}
	253 NotImplemented "Instruction LDRSW not yet implemented."
	254 Move W10, [X8+24]
	255 NotImplemented "Instruction CMP not yet implemented."
	256 Move X10, -50446336
	257 Move V0, [X10]
	258 Add X9, X8, X9
	259 Move [X9+32], D0
	260 Move W9, [X19]
	261 Move W10, [X8+24]
	262 Add W9, W9, 1
	263 NotImplemented "Instruction CMP not yet implemented."
	264 Add X9, X8, W9
	265 Move [X9+32], D0
	266 Move W9, [X19]
	267 Move W10, [X8+24]
	268 Add W9, W9, 2
	269 NotImplemented "Instruction CMP not yet implemented."
	270 Add X9, X8, W9
	271 Move [X9+32], D0
	272 Move W9, [X19]
	273 Move W10, [X8+24]
	274 Add W9, W9, 3
	275 NotImplemented "Instruction CMP not yet implemented."
	276 Add X8, X8, W9
	277 Move [X8+32], D0
	278 Move W9, [X21+327]
	279 Move X8, [X21+872]
	280 Move X10, X20
	281 ShiftRight X10, 24
	282 And X10, X10, 0x7FFFFFFF
	283 NotImplemented "Instruction CMP not yet implemented."
	284 NotImplemented "Instruction CSEL not yet implemented."
	285 Compare X8, 0
	286 JumpIfEqual {363}
	287 Move X8, [X8+96]
	288 Compare X8, 0
	289 JumpIfEqual {363}
	290 Move W10, [X8+24]
	291 NotImplemented "Instruction CMP not yet implemented."
	292 Move W10, 80
	293 NotImplemented "Instruction MADD not yet implemented."
	294 Move X8, [X8+88]
	295 Compare X8, 0
	296 JumpIfEqual {363}
	297 NotImplemented "Instruction LDRSW not yet implemented."
	298 Move W11, [X8+24]
	299 NotImplemented "Instruction CMP not yet implemented."
	300 NotImplemented "Instruction BFM not yet implemented."
	301 Add X9, X8, X10
	302 Move [X9+32], W20
	303 Move W9, [X19]
	304 Move W10, [X8+24]
	305 Add W9, W9, 1
	306 NotImplemented "Instruction CMP not yet implemented."
	307 Add X9, X8, W9
	308 Move [X9+32], W20
	309 Move W9, [X19]
	310 Move W10, [X8+24]
	311 Add W9, W9, 2
	312 NotImplemented "Instruction CMP not yet implemented."
	313 Add X9, X8, W9
	314 Move [X9+32], W20
	315 Move W9, [X19]
	316 Move W10, [X8+24]
	317 Add W9, W9, 3
	318 NotImplemented "Instruction CMP not yet implemented."
	319 Add X8, X8, W9
	320 Move [X8+32], W20
	321 Move W8, [X19]
	322 Add W8, W8, 4
	323 Move [X19], W8
	324 Move X20, [X31+144]
	325 Move X19, [X31+152]
	326 Move X22, [X31+128]
	327 Move X21, [X31+136]
	328 Move X24, [X31+112]
	329 Move X23, [X31+120]
	330 Move X26, [X31+96]
	331 Move X25, [X31+104]
	332 Move X28, [X31+80]
	333 Move X27, [X31+88]
	334 Move X30, [X31+64]
	335 Move D9, [X31+48]
	336 Move D8, [X31+56]
	337 Move D11, [X31+32]
	338 Move D10, [X31+40]
	339 Move D13, [X31+16]
	340 Move D12, [X31+24]
	341 Add X31, X31, 160
	342 Return 
	343 Move X0, X31
	344 Call TMP_Settings.get_warningsDisabled
	345 Move TEMP, X0
	346 And TEMP, TEMP, 1
	347 Compare TEMP, 1
	348 JumpIfEqual {324}
	349 Move X8, 0x5E9000
	350 Move X8, [X8+2600]
	351 Move X0, [X8]
	352 Move W8, [X0+224]
	353 Compare W8, 0
	354 JumpIfNotEqual {356}
	355 Call 0x1C17DFC
	356 Move X8, 0x64F000
	357 Move X8, [X8+800]
	358 Move X1, X21
	359 Move X2, X31
	360 Move X0, [X8]
	361 Call Debug.LogWarning, X0, X1
	362 Call 0x1C17F28
	363 Call 0x1C17F20

Method: System.Void LoadDefaultSettings()

Disassembly:
	0x03B0BA60 ADD W1, W20, 0x1
	0x03B0BA64 MOV X0, X19
	0x03B0BA68 MOV X2, X31
	0x03B0BA6C BL 0x3232E88
	0x03B0BA70 MOV W1, W0
	0x03B0BA74 BL 0x3B0B580
	0x03B0BA78 MOV W22, W0
	0x03B0BA7C ADD W1, W20, 0x2
	0x03B0BA80 MOV X0, X19
	0x03B0BA84 MOV X2, X31
	0x03B0BA88 BL 0x3232E88
	0x03B0BA8C MOV W1, W0
	0x03B0BA90 BL 0x3B0B580
	0x03B0BA94 MOV W23, W0
	0x03B0BA98 ADD W1, W20, 0x3
	0x03B0BA9C MOV X0, X19
	0x03B0BAA0 MOV X2, X31
	0x03B0BAA4 BL 0x3232E88
	0x03B0BAA8 MOV W1, W0
	0x03B0BAAC BL 0x3B0B580
	0x03B0BAB0 MOV W24, W0
	0x03B0BAB4 ADD W1, W20, 0x4
	0x03B0BAB8 MOV X0, X19
	0x03B0BABC MOV X2, X31
	0x03B0BAC0 BL 0x3232E88
	0x03B0BAC4 MOV W1, W0
	0x03B0BAC8 BL 0x3B0B580
	0x03B0BACC MOV W25, W0
	0x03B0BAD0 ADD W1, W20, 0x5
	0x03B0BAD4 MOV X0, X19
	0x03B0BAD8 MOV X2, X31
	0x03B0BADC BL 0x3232E88
	0x03B0BAE0 MOV W1, W0
	0x03B0BAE4 BL 0x3B0B580
	0x03B0BAE8 MOV W26, W0
	0x03B0BAEC ADD W1, W20, 0x6
	0x03B0BAF0 MOV X0, X19
	0x03B0BAF4 MOV X2, X31
	0x03B0BAF8 BL 0x3232E88
	0x03B0BAFC MOV W1, W0
	0x03B0BB00 BL 0x3B0B580
	0x03B0BB04 MOV W27, W0
	0x03B0BB08 ADD W1, W20, 0x7
	0x03B0BB0C MOV X0, X19
	0x03B0BB10 MOV X2, X31
	0x03B0BB14 BL 0x3232E88
	0x03B0BB18 MOV W1, W0
	0x03B0BB1C BL 0x3B0B580
	0x03B0BB20 UBFM W8, W22, 0x8, 0x7
	0x03B0BB24 ADD W8, W8, W21, 0x1C, LSL
	0x03B0BB28 ADD W8, W8, W23, 0x14, LSL
	0x03B0BB2C ADD W8, W8, W24, 0x10, LSL
	0x03B0BB30 ADD W8, W8, W25, 0xC, LSL
	0x03B0BB34 ADD W8, W8, W26, 0x8, LSL
	0x03B0BB38 LDP X20, X19, [X31 + 0x40]
	0x03B0BB3C LDP X22, X21, [X31 + 0x30]
	0x03B0BB40 LDP X24, X23, [X31 + 0x20]
	0x03B0BB44 LDP X26, X25, [X31 + 0x10]
	0x03B0BB48 ADD W8, W8, W27, 0x4, LSL
	0x03B0BB4C ADD W0, W8, W0
	0x03B0BB50 LDP X30, X27, [X31], #0x50
	0x03B0BB54 RET
	0x03B0BB58 BL 0x1C16F20
	0x03B0BB5C STP X30, X25, [X31 - 0x40]!
	0x03B0BB60 STP X24, X23, [X31 + 0x10]
	0x03B0BB64 STP X22, X21, [X31 + 0x20]
	0x03B0BB68 STP X20, X19, [X31 + 0x30]
	0x03B0BB6C SUB W9, W2, 0x4
	0x03B0BB70 CMP W9, 0xB
	0x03B0BB74 MOVZ W8, 0xFF
	0x03B0BB78 B.HI 0x3B0BF58
	0x03B0BB7C ADRP X10, 0xFFFFFFFFFD08C000
	0x03B0BB80 ADD X10, X10, 0xC93
	0x03B0BB84 ADR X11, 0x20
	0x03B0BB88 LDRB W12, [X10, X9, LSL]
	0x03B0BB8C ADD X11, X11, X12, 0x2, LSL
	0x03B0BB90 MOV X19, X1
	0x03B0BB94 MOVZ W23, 0xFF
	0x03B0BB98 MOVZ W22, 0xFF
	0x03B0BB9C MOVZ W9, 0xFF
	0x03B0BBA0 BR X11
	0x03B0BBA4 CBZ X19, 0x3B0BF6C
	0x03B0BBA8 LDR W21, [X19 + 0x18]
	0x03B0BBAC CMP W21, 0x1
	0x03B0BBB0 B.LS 0x3B0BF68
	0x03B0BBB4 LDRH W1, [X19 + 0x22]
	0x03B0BBB8 BL 0x3B0B580
	0x03B0BBBC CMP W21, 0x2
	0x03B0BBC0 B.EQ 0x3B0BF68
	0x03B0BBC4 CMP W21, 0x3
	0x03B0BBC8 B.LS 0x3B0BF68
	0x03B0BBCC LDRH W1, [X19 + 0x24]
	0x03B0BBD0 MOV W20, W0
	0x03B0BBD4 BL 0x3B0B580
	0x03B0BBD8 LDRH W1, [X19 + 0x26]
	0x03B0BBDC B 0x3B0BF20
	0x03B0BBE0 CBZ X19, 0x3B0BF6C
	0x03B0BBE4 LDR W21, [X19 + 0x18]
	0x03B0BBE8 CMP W21, 0x1
	0x03B0BBEC B.LS 0x3B0BF68
	0x03B0BBF0 LDRH W1, [X19 + 0x22]
	0x03B0BBF4 BL 0x3B0B580
	0x03B0BBF8 CMP W21, 0x2
	0x03B0BBFC B.EQ 0x3B0BF68
	0x03B0BC00 LDRH W1, [X19 + 0x24]
	0x03B0BC04 MOV W20, W0
	0x03B0BC08 BL 0x3B0B580
	0x03B0BC0C CMP W21, 0x3
	0x03B0BC10 B.LS 0x3B0BF68
	0x03B0BC14 CMP W21, 0x4
	0x03B0BC18 B.EQ 0x3B0BF68
	0x03B0BC1C LDRH W1, [X19 + 0x26]
	0x03B0BC20 ADD W22, W0, W0, 0x4, LSL
	0x03B0BC24 BL 0x3B0B580
	0x03B0BC28 LDRH W1, [X19 + 0x28]
	0x03B0BC2C B 0x3B0BC7C
	0x03B0BC30 CBZ X19, 0x3B0BF6C
	0x03B0BC34 LDR W21, [X19 + 0x18]
	0x03B0BC38 CMP W21, 0x7
	0x03B0BC3C B.LS 0x3B0BF68
	0x03B0BC40 LDRH W1, [X19 + 0x2E]
	0x03B0BC44 BL 0x3B0B580
	0x03B0BC48 CMP W21, 0x8
	0x03B0BC4C B.EQ 0x3B0BF68
	0x03B0BC50 LDRH W1, [X19 + 0x30]
	0x03B0BC54 MOV W20, W0
	0x03B0BC58 BL 0x3B0B580
	0x03B0BC5C CMP W21, 0x9
	0x03B0BC60 B.LS 0x3B0BF68
	0x03B0BC64 CMP W21, 0xA
	0x03B0BC68 B.EQ 0x3B0BF68
	0x03B0BC6C LDRH W1, [X19 + 0x32]
	0x03B0BC70 ADD W22, W0, W0, 0x4, LSL
	0x03B0BC74 BL 0x3B0B580
	0x03B0BC78 LDRH W1, [X19 + 0x34]
	0x03B0BC7C ADD W23, W0, W0, 0x4, LSL
	0x03B0BC80 BL 0x3B0B580
	0x03B0BC84 ADD W8, W0, W0, 0x4, LSL
	0x03B0BC88 ADD W9, W20, W20, 0x4, LSL
	0x03B0BC8C B 0x3B0BF34
	0x03B0BC90 CBZ X19, 0x3B0BF6C
	0x03B0BC94 LDR W23, [X19 + 0x18]
	0x03B0BC98 CMP W23, 0x7
	0x03B0BC9C B.LS 0x3B0BF68
	0x03B0BCA0 LDRH W1, [X19 + 0x2E]
	0x03B0BCA4 BL 0x3B0B580
	0x03B0BCA8 CMP W23, 0x8
	0x03B0BCAC B.EQ 0x3B0BF68
	0x03B0BCB0 LDRH W1, [X19 + 0x30]
	0x03B0BCB4 MOV W20, W0
	0x03B0BCB8 BL 0x3B0B580
	0x03B0BCBC CMP W23, 0x9
	0x03B0BCC0 B.LS 0x3B0BF68
	0x03B0BCC4 CMP W23, 0xA
	0x03B0BCC8 B.EQ 0x3B0BF68
	0x03B0BCCC LDRH W1, [X19 + 0x32]
	0x03B0BCD0 MOV W21, W0

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x8D8000
	008 Move W8, [X20+1634]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x64F000
	015 Move X0, [X0+808]
	016 Call 0x1C17CF4
	017 Move X0, 0x5E9000
	018 Move X0, [X0+1728]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1634], W8
	022 Move V0, [X19+484]
	023 Move W8, 0xC2C60000
	024 Move S1, W8
	025 NotImplemented "Instruction FCMP not yet implemented."
	026 Move W8, [X19+1022]
	027 Compare W8, 0
	028 JumpIfEqual {164}
	029 Move X0, X19
	030 Call TMP_Text.get_rectTransform, X0
	031 Move [X19+896], X0
	032 Move X0, X31
	033 Call TMP_Settings.get_autoSizeTextContainer
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {44}
	038 Move X8, [X19]
	039 Move W1, 1
	040 Move X0, X19
	041 Move X9, [X8+1528]
	042 Move X2, [X8+1536]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move X0, X19
	045 Move X1, X31
	046 Call "il2cpp_vm_object_is_inst", X0
	047 Move X8, 0x5E9000
	048 Move X8, [X8+1728]
	049 Move X9, 0x64F000
	050 Move X20, X0
	051 Move X8, [X8]
	052 Move X9, [X9+808]
	053 Move W10, [X8+224]
	054 Move X21, [X9]
	055 Compare W10, 0
	056 JumpIfNotEqual {59}
	057 Move X0, X8
	058 Call 0x1C17DFC
	059 Move X0, X21
	060 Move X1, X31
	061 Call Type.GetTypeFromHandle, X0
	062 Move X1, X0
	063 Move X0, X20
	064 Move X2, X31
	065 Call Type.op_Equality, X0, X1
	066 Move X8, [X19+896]
	067 Compare X8, 0
	068 JumpIfEqual {92}
	069 Move W20, W0
	070 Move X0, X8
	071 Move X1, X31
	072 Call RectTransform.get_sizeDelta, X0
	073 Move W8, 0xC2C80000
	074 Move S2, W8
	075 Add S0, S0, S2
	076 Add S1, S1, S2
	077 Multiply S0, S0, S0
	078 Multiply S1, S1, S1
	079 Move X8, -50466816
	080 Add S0, S0, S1
	081 Move V1, [X8+3872]
	082 NotImplemented "Instruction FCMP not yet implemented."
	083 Move TEMP, X20
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 Invalid "Jump target not found in method."
	087 Move X20, [X19+896]
	088 Move X0, X31
	089 Call TMP_Settings.get_defaultTextMeshProTextContainerSize
	090 Compare X20, 0
	091 JumpIfNotEqual {98}
	092 Call 0x1C17F20
	093 Move X20, [X19+896]
	094 Move X0, X31
	095 Call TMP_Settings.get_defaultTextMeshProUITextContainerSize
	096 Compare X20, 0
	097 JumpIfEqual {92}
	098 Move X0, X20
	099 Move X1, X31
	100 Call RectTransform.set_sizeDelta, X0, X1
	101 Move X0, X31
	102 Call TMP_Settings.get_enableWordWrapping
	103 And W8, W0, 1
	104 Move X0, X31
	105 Move [X19+728], W8
	106 Call TMP_Settings.get_enableKerning
	107 And W8, W0, 1
	108 Move X0, X31
	109 Move [X19+761], W8
	110 Call TMP_Settings.get_enableExtraPadding
	111 And W8, W0, 1
	112 Move X0, X31
	113 Move [X19+768], W8
	114 Call TMP_Settings.get_enableTintAllSprites
	115 And W8, W0, 1
	116 Move X0, X31
	117 Move [X19+440], W8
	118 Call TMP_Settings.get_enableParseEscapeCharacters
	119 And W8, W0, 1
	120 Move X0, X31
	121 Move [X19+771], W8
	122 Call TMP_Settings.get_defaultFontSize
	123 Move X0, X31
	124 Move V8, V0
	125 Move [X19+492], S0
	126 Move [X19+484], S0
	127 Call TMP_Settings.get_defaultTextAutoSizingMinRatio
	128 Move V9, [X19+484]
	129 Multiply S0, S8, S0
	130 Move X0, X31
	131 Move [X19+592], S0
	132 Call TMP_Settings.get_defaultTextAutoSizingMaxRatio
	133 Multiply S0, S9, S0
	134 Move X0, X31
	135 Move [X19+596], S0
	136 Move [X19+1022], W31
	137 Call TMP_Settings.get_enableRaycastTarget
	138 Move X8, [X19]
	139 And W1, W0, 1
	140 Move X0, X19
	141 Move X9, [X8+712]
	142 Move X2, [X8+720]
	143 NotImplemented "Instruction BLR not yet implemented."
	144 Move X0, X31
	145 Call TMP_Settings.get_isTextObjectScaleStatic
	146 Move W8, [X19+628]
	147 And W9, W0, 1
	148 Move [X19+800], W9
	149 Move W9, 0xFFFF
	150 NotImplemented "Instruction CMP not yet implemented."
	151 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	152 NotImplemented "Instruction MOVI not yet implemented."
	153 Add X10, X19, 620
	154 And V0, V0, V1
	155 Move [X10], D0
	156 Move [X19+628], W9
	157 Move X20, [X31+32]
	158 Move X19, [X31+40]
	159 Move X30, [X31+16]
	160 Move X21, [X31+24]
	161 Move D9, [X31+48]
	162 Move D8, [X31+56]
	163 Return 
	164 Move W8, [X19+628]
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move W0, W8
	167 Move X1, X31
	168 Call TMP_Compatibility.ConvertTextAlignmentEnumValues, X0
	169 Move W8, W0
	170 Move [X19+628], W0

Method: System.Void GetSpecialCharacters(TMPro.TMP_FontAsset fontAsset)

Disassembly:
	0x03B0BCD4 BL 0x3B0B580
	0x03B0BCD8 LDRH W1, [X19 + 0x34]
	0x03B0BCDC MOV W22, W0
	0x03B0BCE0 BL 0x3B0B580
	0x03B0BCE4 CMP W23, 0xB
	0x03B0BCE8 B.LS 0x3B0BF68
	0x03B0BCEC CMP W23, 0xC
	0x03B0BCF0 B.EQ 0x3B0BF68
	0x03B0BCF4 LDRH W1, [X19 + 0x36]
	0x03B0BCF8 ADD W22, W0, W22, 0x4, LSL

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call TMP_Text.GetEllipsisSpecialCharacter, X0, X1
	007 Move X0, X20
	008 Move X1, X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call TMP_Text.GetUnderlineSpecialCharacter, X0, X1
	013 Return 

Method: System.Void GetEllipsisSpecialCharacter(TMPro.TMP_FontAsset fontAsset)

Disassembly:
	0x03B0BCFC BL 0x3B0B580
	0x03B0BD00 LDRH W1, [X19 + 0x38]
	0x03B0BD04 B 0x3B0BE20
	0x03B0BD08 CBZ X19, 0x3B0BF6C
	0x03B0BD0C LDR W25, [X19 + 0x18]
	0x03B0BD10 CMP W25, 0x7
	0x03B0BD14 B.LS 0x3B0BF68
	0x03B0BD18 LDRH W1, [X19 + 0x2E]
	0x03B0BD1C BL 0x3B0B580
	0x03B0BD20 CMP W25, 0x8
	0x03B0BD24 B.EQ 0x3B0BF68
	0x03B0BD28 LDRH W1, [X19 + 0x30]
	0x03B0BD2C MOV W20, W0
	0x03B0BD30 BL 0x3B0B580
	0x03B0BD34 CMP W25, 0x9
	0x03B0BD38 B.LS 0x3B0BF68
	0x03B0BD3C CMP W25, 0xA
	0x03B0BD40 B.EQ 0x3B0BF68
	0x03B0BD44 LDRH W1, [X19 + 0x32]
	0x03B0BD48 MOV W21, W0
	0x03B0BD4C BL 0x3B0B580
	0x03B0BD50 LDRH W1, [X19 + 0x34]
	0x03B0BD54 MOV W22, W0
	0x03B0BD58 BL 0x3B0B580
	0x03B0BD5C CMP W25, 0xB
	0x03B0BD60 B.LS 0x3B0BF68
	0x03B0BD64 CMP W25, 0xC
	0x03B0BD68 B.EQ 0x3B0BF68
	0x03B0BD6C LDRH W1, [X19 + 0x36]
	0x03B0BD70 MOV W23, W0
	0x03B0BD74 BL 0x3B0B580
	0x03B0BD78 LDRH W1, [X19 + 0x38]
	0x03B0BD7C MOV W24, W0
	0x03B0BD80 BL 0x3B0B580
	0x03B0BD84 CMP W25, 0xD
	0x03B0BD88 B.LS 0x3B0BF68
	0x03B0BD8C CMP W25, 0xE
	0x03B0BD90 B.EQ 0x3B0BF68
	0x03B0BD94 LDRH W1, [X19 + 0x3A]
	0x03B0BD98 ADD W22, W23, W22, 0x4, LSL
	0x03B0BD9C ADD W23, W0, W24, 0x4, LSL
	0x03B0BDA0 BL 0x3B0B580
	0x03B0BDA4 LDRH W1, [X19 + 0x3C]
	0x03B0BDA8 B 0x3B0BED4
	0x03B0BDAC CBZ X19, 0x3B0BF6C
	0x03B0BDB0 LDR W23, [X19 + 0x18]
	0x03B0BDB4 CMP W23, 0x1
	0x03B0BDB8 B.LS 0x3B0BF68
	0x03B0BDBC LDRH W1, [X19 + 0x22]
	0x03B0BDC0 BL 0x3B0B580
	0x03B0BDC4 CMP W23, 0x2
	0x03B0BDC8 B.EQ 0x3B0BF68
	0x03B0BDCC LDRH W1, [X19 + 0x24]
	0x03B0BDD0 MOV W20, W0
	0x03B0BDD4 BL 0x3B0B580
	0x03B0BDD8 CMP W23, 0x3
	0x03B0BDDC B.LS 0x3B0BF68
	0x03B0BDE0 CMP W23, 0x4
	0x03B0BDE4 B.EQ 0x3B0BF68
	0x03B0BDE8 LDRH W1, [X19 + 0x26]
	0x03B0BDEC MOV W21, W0
	0x03B0BDF0 BL 0x3B0B580
	0x03B0BDF4 LDRH W1, [X19 + 0x28]
	0x03B0BDF8 MOV W22, W0
	0x03B0BDFC BL 0x3B0B580
	0x03B0BE00 CMP W23, 0x5
	0x03B0BE04 B.LS 0x3B0BF68
	0x03B0BE08 CMP W23, 0x6
	0x03B0BE0C B.EQ 0x3B0BF68
	0x03B0BE10 LDRH W1, [X19 + 0x2A]
	0x03B0BE14 ADD W22, W0, W22, 0x4, LSL
	0x03B0BE18 BL 0x3B0B580
	0x03B0BE1C LDRH W1, [X19 + 0x2C]
	0x03B0BE20 MOV W19, W0
	0x03B0BE24 BL 0x3B0B580
	0x03B0BE28 ADD W23, W0, W19, 0x4, LSL
	0x03B0BE2C ADD W9, W21, W20, 0x4, LSL
	0x03B0BE30 B 0x3B0BF30
	0x03B0BE34 CBZ X19, 0x3B0BF6C
	0x03B0BE38 LDR W25, [X19 + 0x18]
	0x03B0BE3C CMP W25, 0x1
	0x03B0BE40 B.LS 0x3B0BF68
	0x03B0BE44 LDRH W1, [X19 + 0x22]
	0x03B0BE48 BL 0x3B0B580
	0x03B0BE4C CMP W25, 0x2
	0x03B0BE50 B.EQ 0x3B0BF68
	0x03B0BE54 LDRH W1, [X19 + 0x24]
	0x03B0BE58 MOV W20, W0
	0x03B0BE5C BL 0x3B0B580
	0x03B0BE60 CMP W25, 0x3
	0x03B0BE64 B.LS 0x3B0BF68
	0x03B0BE68 CMP W25, 0x4
	0x03B0BE6C B.EQ 0x3B0BF68
	0x03B0BE70 LDRH W1, [X19 + 0x26]
	0x03B0BE74 MOV W21, W0
	0x03B0BE78 BL 0x3B0B580
	0x03B0BE7C LDRH W1, [X19 + 0x28]
	0x03B0BE80 MOV W22, W0
	0x03B0BE84 BL 0x3B0B580
	0x03B0BE88 CMP W25, 0x5
	0x03B0BE8C B.LS 0x3B0BF68
	0x03B0BE90 CMP W25, 0x6
	0x03B0BE94 B.EQ 0x3B0BF68
	0x03B0BE98 LDRH W1, [X19 + 0x2A]
	0x03B0BE9C MOV W23, W0
	0x03B0BEA0 BL 0x3B0B580
	0x03B0BEA4 LDRH W1, [X19 + 0x2C]
	0x03B0BEA8 MOV W24, W0
	0x03B0BEAC BL 0x3B0B580
	0x03B0BEB0 CMP W25, 0x7
	0x03B0BEB4 B.LS 0x3B0BF68
	0x03B0BEB8 CMP W25, 0x8
	0x03B0BEBC B.EQ 0x3B0BF68
	0x03B0BEC0 LDRH W1, [X19 + 0x2E]
	0x03B0BEC4 ADD W22, W23, W22, 0x4, LSL
	0x03B0BEC8 ADD W23, W0, W24, 0x4, LSL
	0x03B0BECC BL 0x3B0B580
	0x03B0BED0 LDRH W1, [X19 + 0x30]
	0x03B0BED4 MOV W19, W0
	0x03B0BED8 BL 0x3B0B580
	0x03B0BEDC ADD W8, W0, W19, 0x4, LSL
	0x03B0BEE0 ADD W9, W21, W20, 0x4, LSL
	0x03B0BEE4 B 0x3B0BF34
	0x03B0BEE8 CBZ X19, 0x3B0BF6C
	0x03B0BEEC LDR W21, [X19 + 0x18]
	0x03B0BEF0 CMP W21, 0x7
	0x03B0BEF4 B.LS 0x3B0BF68
	0x03B0BEF8 LDRH W1, [X19 + 0x2E]
	0x03B0BEFC BL 0x3B0B580
	0x03B0BF00 CMP W21, 0x8
	0x03B0BF04 B.EQ 0x3B0BF68
	0x03B0BF08 CMP W21, 0x9
	0x03B0BF0C B.LS 0x3B0BF68
	0x03B0BF10 LDRH W1, [X19 + 0x30]
	0x03B0BF14 MOV W20, W0
	0x03B0BF18 BL 0x3B0B580
	0x03B0BF1C LDRH W1, [X19 + 0x32]
	0x03B0BF20 ADD W22, W0, W0, 0x4, LSL
	0x03B0BF24 BL 0x3B0B580
	0x03B0BF28 ADD W23, W0, W0, 0x4, LSL
	0x03B0BF2C ADD W9, W20, W20, 0x4, LSL
	0x03B0BF30 MOVZ W8, 0xFF
	0x03B0BF34 UBFM W0, W8, 0x8, 0x7
	0x03B0BF38 BFM W0, W23, 0x10, 0x7
	0x03B0BF3C BFM W0, W22, 0x18, 0x7

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+48], X24
	004 Move [X31+56], X23
	005 Move [X31+64], X22
	006 Move [X31+72], X21
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 Move X21, 0x8D8000
	010 Move X24, 0x64E000
	011 Move W8, [X21+1635]
	012 Move X24, [X24+1560]
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0x64E000
	020 Move X0, [X0+1552]
	021 Call 0x1C17CF4
	022 Move X0, 0x5E9000
	023 Move X0, [X0+1432]
	024 Call 0x1C17CF4
	025 Move X0, 0x64E000
	026 Move X0, [X0+1560]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+1635], W8
	030 Move X0, [X24]
	031 Move [X31+44], W31
	032 Move W21, [X19+604]
	033 Move W22, [X19+532]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Add X5, X31, 44
	039 Move W0, 0x2026
	040 Move X1, X20
	041 Move W2, W31
	042 Move W3, W21
	043 Move W4, W22
	044 Move X6, X31
	045 Call TMP_FontAssetUtilities.GetCharacterFromFontAsset, X0, X1, X2, X3, X4, X5
	046 Move X1, X0
	047 Compare X0, 0
	048 JumpIfEqual {69}
	049 NotImplemented "Instruction MOVI not yet implemented."
	050 Add X0, X31, 0
	051 Move W2, W31
	052 Move X3, X31
	053 Move [X31], V0
	054 Move [X31+8], V0
	055 Call SpecialCharacter..ctor, X0, X1, X2
	056 Move V1, [X31]
	057 Move V0, [X31+16]
	058 Move [X19+102], V0
	059 Move [X19+101], V1
	060 Move X20, [X31+80]
	061 Move X19, [X31+88]
	062 Move X22, [X31+64]
	063 Move X21, [X31+72]
	064 Move X24, [X31+48]
	065 Move X23, [X31+56]
	066 Move X30, [X31+32]
	067 Add X31, X31, 96
	068 Return 
	069 Compare X20, 0
	070 JumpIfEqual {169}
	071 Move X21, [X20+312]
	072 Compare X21, 0
	073 JumpIfEqual {95}
	074 Move W8, [X21+24]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X0, [X24]
	077 Move W22, [X19+604]
	078 Move W23, [X19+532]
	079 Move W8, [X0+224]
	080 Compare W8, 0
	081 JumpIfNotEqual {83}
	082 Call 0x1C17DFC
	083 Add X6, X31, 44
	084 Move W0, 0x2026
	085 Move W3, 1
	086 Move X1, X20
	087 Move X2, X21
	088 Move W4, W22
	089 Move W5, W23
	090 Move X7, X31
	091 Call TMP_FontAssetUtilities.GetCharacterFromFontAssets, X0, X1, X2, X3, X4, X5, X6
	092 Move X1, X0
	093 Compare X0, 0
	094 JumpIfNotEqual {49}
	095 Move X0, X31
	096 Call TMP_Settings.get_fallbackFontAssets
	097 Compare X0, 0
	098 JumpIfEqual {128}
	099 Move X0, X31
	100 Call TMP_Settings.get_fallbackFontAssets
	101 Compare X0, 0
	102 JumpIfEqual {169}
	103 Move W8, [X0+24]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X0, X31
	106 Call TMP_Settings.get_fallbackFontAssets
	107 Move X8, [X24]
	108 Move W21, [X19+604]
	109 Move W22, [X19+532]
	110 Move X23, X0
	111 Move W9, [X8+224]
	112 Compare W9, 0
	113 JumpIfNotEqual {116}
	114 Move X0, X8
	115 Call 0x1C17DFC
	116 Add X6, X31, 44
	117 Move W0, 0x2026
	118 Move W3, 1
	119 Move X1, X20
	120 Move X2, X23
	121 Move W4, W21
	122 Move W5, W22
	123 Move X7, X31
	124 Call TMP_FontAssetUtilities.GetCharacterFromFontAssets, X0, X1, X2, X3, X4, X5, X6
	125 Move X1, X0
	126 Compare X0, 0
	127 JumpIfNotEqual {49}
	128 Move X0, X31
	129 Call TMP_Settings.get_defaultFontAsset
	130 Move X8, 0x5E9000
	131 Move X8, [X8+1432]
	132 Move X20, X0
	133 Move X8, [X8]
	134 Move W9, [X8+224]
	135 Compare W9, 0
	136 JumpIfNotEqual {139}
	137 Move X0, X8
	138 Call 0x1C17DFC
	139 Move X0, X20
	140 Move X1, X31
	141 Move X2, X31
	142 Call Object.op_Inequality, X0, X1
	143 Move TEMP, X0
	144 And TEMP, TEMP, 1
	145 Compare TEMP, 1
	146 JumpIfNotEqual {60}
	147 Move X0, X31
	148 Call TMP_Settings.get_defaultFontAsset
	149 Move X8, [X24]
	150 Move W20, [X19+604]
	151 Move W21, [X19+532]
	152 Move X22, X0
	153 Move W9, [X8+224]
	154 Compare W9, 0
	155 JumpIfNotEqual {158}
	156 Move X0, X8
	157 Call 0x1C17DFC
	158 Add X5, X31, 44
	159 Move W0, 0x2026
	160 Move W2, 1
	161 Move X1, X22
	162 Move W3, W20
	163 Move W4, W21
	164 Move X6, X31
	165 Call TMP_FontAssetUtilities.GetCharacterFromFontAsset, X0, X1, X2, X3, X4, X5
	166 Move X1, X0
	167 Compare X0, 0
	168 JumpIfNotEqual {49}
	169 Call 0x1C17F20

Method: System.Void GetUnderlineSpecialCharacter(TMPro.TMP_FontAsset fontAsset)

Disassembly:
	0x03B0B388 CBNZ W8, 0x3B0B394
	0x03B0B38C BL 0x1C16DFC
	0x03B0B390 LDR X0, [X19]
	0x03B0B394 LDR X8, [X0 + 0xB8]
	0x03B0B398 LDR X8, [X8]
	0x03B0B39C CBZ X8, 0x3B0B40C
	0x03B0B3A0 LDR W9, [X8 + 0x18]
	0x03B0B3A4 CBZ W9, 0x3B0B410
	0x03B0B3A8 LDR X8, [X8 + 0x38]
	0x03B0B3AC STR X8, [X24 + 0x118]
	0x03B0B3B0 B 0x3B0B0E0
	0x03B0B3B4 LDR X8, [X24 + 0xF8]
	0x03B0B3B8 CBZ X8, 0x3B0B40C
	0x03B0B3BC LDR X25, [X8 + 0x138]
	0x03B0B3C0 CBZ X25, 0x3B0B178
	0x03B0B3C4 LDR W8, [X25 + 0x18]
	0x03B0B3C8 CMP W8, 0x1
	0x03B0B3CC B.LT 0x3B0B178
	0x03B0B3D0 LDR X0, [X26]
	0x03B0B3D4 LDR W8, [X0 + 0xE0]
	0x03B0B3D8 CBNZ W8, 0x3B0B3E0
	0x03B0B3DC BL 0x1C16DFC
	0x03B0B3E0 MOVZ W3, 0x1
	0x03B0B3E4 MOV W0, W19
	0x03B0B3E8 MOV X1, X23
	0x03B0B3EC MOV X2, X25
	0x03B0B3F0 MOV W4, W22
	0x03B0B3F4 MOV W5, W21
	0x03B0B3F8 MOV X6, X20
	0x03B0B3FC MOV X7, X31
	0x03B0B400 BL 0x3AEB758
	0x03B0B404 CBNZ X0, 0x3B0B0DC
	0x03B0B408 B 0x3B0B178
	0x03B0B40C BL 0x1C16F20
	0x03B0B410 BL 0x1C16F28
	0x03B0B414 RET
	0x03B0B418 RET
	0x03B0B41C RET
	0x03B0B420 RET
	0x03B0B424 STR X30, [X31 - 0x20]!
	0x03B0B428 STP X20, X19, [X31 + 0x10]
	0x03B0B42C ADRP X19, 0x8D7000
	0x03B0B430 LDRB W8, [X19 + 0x666]
	0x03B0B434 MOV X20, X0
	0x03B0B438 TBNZ X8, 0x0, 0x3B0B45C
	0x03B0B43C ADRP X0, 0x5F1000
	0x03B0B440 LDR X0, [X0 + 0x8D8]
	0x03B0B444 BL 0x1C16CF4
	0x03B0B448 ADRP X0, 0x5EA000
	0x03B0B44C LDR X0, [X0 + 0x278]
	0x03B0B450 BL 0x1C16CF4
	0x03B0B454 MOVZ W8, 0x1
	0x03B0B458 STRB W8, [X19 + 0x666]
	0x03B0B45C LDR X8, [X20 + 0x368]
	0x03B0B460 CBZ X8, 0x3B0B4F4
	0x03B0B464 ADRP X9, 0x5F1000
	0x03B0B468 LDR X9, [X9 + 0x8D8]
	0x03B0B46C LDR W19, [X8 + 0x18]
	0x03B0B470 LDR X0, [X9]
	0x03B0B474 MOV W1, W19
	0x03B0B478 BL 0x1C16D6C
	0x03B0B47C CMP W19, 0x1
	0x03B0B480 MOV X1, X0
	0x03B0B484 B.LT 0x3B0B4E0
	0x03B0B488 LDR X9, [X20 + 0x368]
	0x03B0B48C CBZ X9, 0x3B0B514
	0x03B0B490 LDR X9, [X9 + 0x38]
	0x03B0B494 MOV X8, X31
	0x03B0B498 ADD X10, X1, 0x20
	0x03B0B49C ADD X11, X9, 0x20
	0x03B0B4A0 CBZ X9, 0x3B0B514
	0x03B0B4A4 LDR W12, [X9 + 0x18]
	0x03B0B4A8 CMP X8, W12, SXTW
	0x03B0B4AC B.GE 0x3B0B4E0
	0x03B0B4B0 CMP X8, X12
	0x03B0B4B4 B.CS 0x3B0B518
	0x03B0B4B8 CBZ X1, 0x3B0B514
	0x03B0B4BC LDR W12, [X1 + 0x18]
	0x03B0B4C0 CMP X8, X12
	0x03B0B4C4 B.CS 0x3B0B518
	0x03B0B4C8 LDRH W12, [X11]
	0x03B0B4CC ADD X11, X11, 0x178
	0x03B0B4D0 STRH W12, [X10, X8, LSL #1]
	0x03B0B4D4 ADD X8, X8, 0x1

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X22, 0x8D8000
	008 Move X21, 0x64E000
	009 Move W8, [X22+1636]
	010 Move X21, [X21+1560]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0x5E9000
	018 Move X0, [X0+2600]
	019 Call 0x1C17CF4
	020 Move X0, 0x64E000
	021 Move X0, [X0+1560]
	022 Call 0x1C17CF4
	023 Move X0, 0x611000
	024 Move X0, [X0+1784]
	025 Call 0x1C17CF4
	026 Move X0, 0x64F000
	027 Move X0, [X0+792]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+1636], W8
	031 Move X0, [X21]
	032 Move [X31+44], W31
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Add X5, X31, 44
	038 Move W0, 95
	039 Move W4, 400
	040 Move X1, X20
	041 Move W2, W31
	042 Move W3, W31
	043 Move X6, X31
	044 Call TMP_FontAssetUtilities.GetCharacterFromFontAsset, X0, X1, X2, X3, X4, X5
	045 Compare X0, 0
	046 JumpIfEqual {59}
	047 Move X1, X0
	048 NotImplemented "Instruction MOVI not yet implemented."
	049 Add X0, X31, 0
	050 Move W2, W31
	051 Move X3, X31
	052 Move [X31], V0
	053 Move [X31+8], V0
	054 Call SpecialCharacter..ctor, X0, X1, X2
	055 Move V1, [X31]
	056 Move V0, [X31+16]
	057 Move [X19+104], V0
	058 Move [X19+103], V1
	059 Call TMP_Settings.get_warningsDisabled
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {92}
	064 Compare X20, 0
	065 JumpIfEqual {99}
	066 Move X0, X20
	067 Move X1, X31
	068 Call Object.get_name, X0
	069 Move X8, 0x64F000
	070 Move X8, [X8+792]
	071 Move X9, 0x611000
	072 Move X9, [X9+1784]
	073 Move X1, X0
	074 Move X8, [X8]
	075 Move X3, X31
	076 Move X2, [X9]
	077 Move X0, X8
	078 Call String.Concat, X0, X1, X2
	079 Move X8, 0x5E9000
	080 Move X8, [X8+2600]
	081 Move X20, X0
	082 Move X8, [X8]
	083 Move W9, [X8+224]
	084 Compare W9, 0
	085 JumpIfNotEqual {88}
	086 Move X0, X8
	087 Call 0x1C17DFC
	088 Move X0, X20
	089 Move X1, X19
	090 Move X2, X31
	091 Call Debug.LogWarning, X0, X1
	092 Move X20, [X31+64]
	093 Move X19, [X31+72]
	094 Move X22, [X31+48]
	095 Move X21, [X31+56]
	096 Move X30, [X31+32]
	097 Add X31, X31, 80
	098 Return 
	099 Call 0x1C17F20

Method: System.Void ReplaceTagWithCharacter(System.Int32[] chars, System.Int32 insertionIndex, System.Int32 tagLength, System.Char c)

Disassembly:
	0x03B0BF40 LDP X20, X19, [X31 + 0x30]
	0x03B0BF44 LDP X22, X21, [X31 + 0x20]
	0x03B0BF48 LDP X24, X23, [X31 + 0x10]
	0x03B0BF4C BFM W0, W9, 0x0, 0x7
	0x03B0BF50 LDP X30, X25, [X31], #0x40
	0x03B0BF54 RET
	0x03B0BF58 MOVZ W23, 0xFF
	0x03B0BF5C MOVZ W22, 0xFF
	0x03B0BF60 MOVZ W9, 0xFF
	0x03B0BF64 B 0x3B0BF34
	0x03B0BF68 BL 0x1C16F28
	0x03B0BF6C BL 0x1C16F20
	0x03B0BF70 STP X30, X27, [X31 - 0x50]!
	0x03B0BF74 STP X26, X25, [X31 + 0x10]
	0x03B0BF78 STP X24, X23, [X31 + 0x20]
	0x03B0BF7C STP X22, X21, [X31 + 0x30]
	0x03B0BF80 STP X20, X19, [X31 + 0x40]
	0x03B0BF84 ADRP X22, 0x8D7000
	0x03B0BF88 LDRB W8, [X22 + 0x669]
	0x03B0BF8C MOV W21, W3
	0x03B0BF90 MOV W20, W2
	0x03B0BF94 MOV X19, X1
	0x03B0BF98 TBNZ X8, 0x0, 0x3B0BFB0
	0x03B0BF9C ADRP X0, 0x64D000
	0x03B0BFA0 LDR X0, [X0 + 0x3E8]
	0x03B0BFA4 BL 0x1C16CF4
	0x03B0BFA8 MOVZ W8, 0x1
	0x03B0BFAC STRB W8, [X22 + 0x669]
	0x03B0BFB0 CMP W21, 0x9

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {25}
	004 Move X8, [X1+24]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Add W9, W3, W2
	007 And W10, W4, 0xFFFF
	008 Add X11, X1, W2
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move [X11+32], W10
	011 Move X9, W9
	012 Move X10, W8
	013 Add X11, X1, 32
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Subtract W12, W9, 3
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W13, [X11]
	018 Add X9, X9, 1
	019 Add X12, X1, W12
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move [X12+32], W13
	022 Move X30, [X31+16]
	023 Return 
	024 Call 0x1C17F28
	025 Call 0x1C17F20

Method: TMPro.TMP_FontAsset GetFontAssetForWeight(System.Int32 fontWeight)

Disassembly:
	0x03B0BFB4 B.EQ 0x3B0C074
	0x03B0BFB8 CMP W21, 0x7
	0x03B0BFBC B.NE 0x3B0C15C
	0x03B0BFC0 CBZ X19, 0x3B0C1B8
	0x03B0BFC4 LDR W24, [X19 + 0x18]
	0x03B0BFC8 ADD W8, W20, 0x1
	0x03B0BFCC CMP W8, W24
	0x03B0BFD0 B.CS 0x3B0C1B4
	0x03B0BFD4 ADD X8, X19, W8, 0x1, SXTW
	0x03B0BFD8 LDRH W1, [X8 + 0x20]
	0x03B0BFDC BL 0x3B0B580
	0x03B0BFE0 ADD W8, W20, 0x2
	0x03B0BFE4 CMP W8, W24
	0x03B0BFE8 B.CS 0x3B0C1B4
	0x03B0BFEC ADD X8, X19, W8, 0x1, SXTW
	0x03B0BFF0 LDRH W1, [X8 + 0x20]
	0x03B0BFF4 MOV W21, W0
	0x03B0BFF8 BL 0x3B0B580
	0x03B0BFFC ADD W8, W20, 0x3
	0x03B0C000 CMP W8, W24
	0x03B0C004 B.CS 0x3B0C1B4
	0x03B0C008 ADD W23, W20, 0x4
	0x03B0C00C CMP W23, W24
	0x03B0C010 B.CS 0x3B0C1B4
	0x03B0C014 ADD X25, X19, 0x20
	0x03B0C018 LDRH W1, [X25, W8, SXTW]
	0x03B0C01C MOV W22, W0
	0x03B0C020 BL 0x3B0B580
	0x03B0C024 LDRH W1, [X25, W23, SXTW]
	0x03B0C028 MOV W23, W0
	0x03B0C02C BL 0x3B0B580

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+604]
	003 Move TEMP, X8
	004 And TEMP, TEMP, 2
	005 Compare TEMP, 2
	006 JumpIfEqual {10}
	007 Move W8, [X0+600]
	008 And W31, W8, 2
	009 NotImplemented "Instruction CSET not yet implemented."
	010 Move W8, W31
	011 Move X9, [X0+256]
	012 Compare X9, 0
	013 JumpIfEqual {35}
	014 Move X9, [X9+408]
	015 Compare X9, 0
	016 JumpIfEqual {35}
	017 Move W10, 0x851F
	018 NotImplemented "Instruction MOVK not yet implemented."
	019 Move W11, [X9+24]
	020 NotImplemented "Instruction SMADDL not yet implemented."
	021 Move X12, X10
	022 ShiftRight X12, 63
	023 And X12, X12, 0x7FFFFFFF
	024 NotImplemented "Instruction SBFM not yet implemented."
	025 Add W10, W10, W12
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Add X9, X9, W10
	028 Add X10, X9, 32
	029 Add X9, X9, 40
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSEL not yet implemented."
	032 Move X0, [X8]
	033 Move X30, [X31+16]
	034 Return X0
	035 Call 0x1C17F20
	036 Call 0x1C17F28

Method: TMPro.TMP_TextElement GetTextElement(System.UInt32 unicode, TMPro.TMP_FontAsset fontAsset, TMPro.FontStyles fontStyle, TMPro.FontWeight fontWeight, out System.Boolean isUsingAlternativeTypeface)

Disassembly:
	0x03B0C030 ADD W8, W20, 0x5
	0x03B0C034 CMP W8, W24
	0x03B0C038 B.CS 0x3B0C1B4
	0x03B0C03C ADD W25, W20, 0x6
	0x03B0C040 CMP W25, W24
	0x03B0C044 B.CS 0x3B0C1B4
	0x03B0C048 ADD X19, X19, 0x20
	0x03B0C04C LDRH W1, [X19, W8, SXTW]
	0x03B0C050 ADD W20, W0, W23, 0x4, LSL
	0x03B0C054 BL 0x3B0B580
	0x03B0C058 LDRH W1, [X19, W25, SXTW]
	0x03B0C05C MOV W19, W0
	0x03B0C060 BL 0x3B0B580
	0x03B0C064 ADD W23, W0, W19, 0x4, LSL
	0x03B0C068 ADD W8, W22, W21, 0x4, LSL
	0x03B0C06C MOVZ W9, 0xFF
	0x03B0C070 B 0x3B0C18C
	0x03B0C074 CBZ X19, 0x3B0C1B8
	0x03B0C078 LDR W26, [X19 + 0x18]
	0x03B0C07C ADD W8, W20, 0x1
	0x03B0C080 CMP W8, W26
	0x03B0C084 B.CS 0x3B0C1B4
	0x03B0C088 ADD X8, X19, W8, 0x1, SXTW
	0x03B0C08C LDRH W1, [X8 + 0x20]
	0x03B0C090 BL 0x3B0B580
	0x03B0C094 ADD W8, W20, 0x2
	0x03B0C098 CMP W8, W26
	0x03B0C09C B.CS 0x3B0C1B4
	0x03B0C0A0 ADD X8, X19, W8, 0x1, SXTW
	0x03B0C0A4 LDRH W1, [X8 + 0x20]
	0x03B0C0A8 MOV W21, W0
	0x03B0C0AC BL 0x3B0B580
	0x03B0C0B0 ADD W8, W20, 0x3
	0x03B0C0B4 CMP W8, W26
	0x03B0C0B8 B.CS 0x3B0C1B4
	0x03B0C0BC ADD W23, W20, 0x4
	0x03B0C0C0 CMP W23, W26
	0x03B0C0C4 B.CS 0x3B0C1B4
	0x03B0C0C8 ADD X24, X19, 0x20
	0x03B0C0CC LDRH W1, [X24, W8, SXTW]
	0x03B0C0D0 MOV W22, W0
	0x03B0C0D4 BL 0x3B0B580
	0x03B0C0D8 LDRH W1, [X24, W23, SXTW]
	0x03B0C0DC MOV W23, W0
	0x03B0C0E0 BL 0x3B0B580
	0x03B0C0E4 ADD W8, W20, 0x5
	0x03B0C0E8 CMP W8, W26
	0x03B0C0EC B.CS 0x3B0C1B4
	0x03B0C0F0 ADD W25, W20, 0x6
	0x03B0C0F4 CMP W25, W26
	0x03B0C0F8 B.CS 0x3B0C1B4
	0x03B0C0FC ADD X27, X19, 0x20
	0x03B0C100 LDRH W1, [X27, W8, SXTW]
	0x03B0C104 MOV W24, W0
	0x03B0C108 BL 0x3B0B580
	0x03B0C10C LDRH W1, [X27, W25, SXTW]
	0x03B0C110 MOV W25, W0
	0x03B0C114 BL 0x3B0B580
	0x03B0C118 ADD W8, W20, 0x7
	0x03B0C11C CMP W8, W26
	0x03B0C120 B.CS 0x3B0C1B4
	0x03B0C124 ADD W27, W20, 0x8
	0x03B0C128 CMP W27, W26
	0x03B0C12C B.CS 0x3B0C1B4
	0x03B0C130 ADD X19, X19, 0x20
	0x03B0C134 LDRH W1, [X19, W8, SXTW]
	0x03B0C138 ADD W20, W24, W23, 0x4, LSL
	0x03B0C13C ADD W23, W0, W25, 0x4, LSL
	0x03B0C140 BL 0x3B0B580
	0x03B0C144 LDRH W1, [X19, W27, SXTW]
	0x03B0C148 MOV W19, W0
	0x03B0C14C BL 0x3B0B580
	0x03B0C150 ADD W9, W0, W19, 0x4, LSL
	0x03B0C154 ADD W8, W22, W21, 0x4, LSL
	0x03B0C158 B 0x3B0C18C
	0x03B0C15C ADRP X19, 0x64C000
	0x03B0C160 LDR X19, [X19 + 0x3E8]
	0x03B0C164 LDR X0, [X19]
	0x03B0C168 LDR W8, [X0 + 0xE0]
	0x03B0C16C CBNZ W8, 0x3B0C178
	0x03B0C170 BL 0x1C16DFC
	0x03B0C174 LDR X0, [X19]
	0x03B0C178 LDR X8, [X0 + 0xB8]
	0x03B0C17C LDR W8, [X8 + 0x68]
	0x03B0C180 UBFM W20, W8, 0x8, 0x1F
	0x03B0C184 UBFM W23, W8, 0x10, 0x1F
	0x03B0C188 UBFM W9, W8, 0x18, 0x1F
	0x03B0C18C UBFM W0, W9, 0x8, 0x7
	0x03B0C190 BFM W0, W23, 0x10, 0x7
	0x03B0C194 BFM W0, W20, 0x18, 0x7
	0x03B0C198 LDP X20, X19, [X31 + 0x40]
	0x03B0C19C LDP X22, X21, [X31 + 0x30]
	0x03B0C1A0 LDP X24, X23, [X31 + 0x20]
	0x03B0C1A4 LDP X26, X25, [X31 + 0x10]
	0x03B0C1A8 BFM W0, W8, 0x0, 0x7
	0x03B0C1AC LDP X30, X27, [X31], #0x50
	0x03B0C1B0 RET
	0x03B0C1B4 BL 0x1C16F28
	0x03B0C1B8 BL 0x1C16F20
	0x03B0C1BC STR X30, [X31 - 0x40]!
	0x03B0C1C0 STP X24, X23, [X31 + 0x10]
	0x03B0C1C4 STP X22, X21, [X31 + 0x20]
	0x03B0C1C8 STP X20, X19, [X31 + 0x30]
	0x03B0C1CC ADD W8, W2, W3
	0x03B0C1D0 CMP W8, W2
	0x03B0C1D4 STR W2, [X31 + 0xC]
	0x03B0C1D8 B.LE 0x3B0C244
	0x03B0C1DC MOV X19, X4
	0x03B0C1E0 MOV W22, W3
	0x03B0C1E4 MOV W21, W2
	0x03B0C1E8 MOV X20, X1
	0x03B0C1EC MOV W23, W31
	0x03B0C1F0 LDR X24, [X19]
	0x03B0C1F4 ADD X4, X31, 0xC
	0x03B0C1F8 MOV X1, X20
	0x03B0C1FC MOV W2, W21
	0x03B0C200 MOV W3, W22
	0x03B0C204 BL 0x3B0C268
	0x03B0C208 CBZ X24, 0x3B0C260
	0x03B0C20C LDR W8, [X24 + 0x18]
	0x03B0C210 CMP W23, W8
	0x03B0C214 B.CS 0x3B0C264
	0x03B0C218 ADD X8, X24, W23, 0x2, SXTW
	0x03B0C21C STR S0, [X8 + 0x20]
	0x03B0C220 LDR W8, [X31 + 0xC]
	0x03B0C224 ADD W9, W21, W22
	0x03B0C228 ADD W23, W23, 0x1
	0x03B0C22C ORN W10, W31, W8, 0x0
	0x03B0C230 ADD W21, W8, 0x1
	0x03B0C234 CMP W8, W9
	0x03B0C238 ADD W22, W9, W10
	0x03B0C23C B.LT 0x3B0C1F0
	0x03B0C240 B 0x3B0C248
	0x03B0C244 MOV W23, W31
	0x03B0C248 MOV W0, W23
	0x03B0C24C LDP X20, X19, [X31 + 0x30]
	0x03B0C250 LDP X22, X21, [X31 + 0x20]
	0x03B0C254 LDP X24, X23, [X31 + 0x10]
	0x03B0C258 LDR X30, [X31], #0x40
	0x03B0C25C RET
	0x03B0C260 BL 0x1C16F20
	0x03B0C264 BL 0x1C16F28
	0x03B0C268 STR X30, [X31 - 0x10]!
	0x03B0C26C CBZ W2, 0x3B0C2A8
	0x03B0C270 CBZ X1, 0x3B0C3E4
	0x03B0C274 LDR W8, [X1 + 0x18]
	0x03B0C278 CMP W8, W2
	0x03B0C27C B.LS 0x3B0C3E0
	0x03B0C280 ADD X9, X1, W2, 0x1, SXTW
	0x03B0C284 LDRH W10, [X9 + 0x20]
	0x03B0C288 ADD W9, W3, W2
	0x03B0C28C CMP W10, 0x2D
	0x03B0C290 B.EQ 0x3B0C2B8
	0x03B0C294 CMP W10, 0x2B
	0x03B0C298 B.NE 0x3B0C2A0
	0x03B0C29C ADD W2, W2, 0x1
	0x03B0C2A0 MOVZ W10, 0x1
	0x03B0C2A4 B 0x3B0C2C0
	0x03B0C2A8 MOVZ W8, 0xC7000000
	0x03B0C2AC STR W31, [X4]
	0x03B0C2B0 FMOV S0, W8
	0x03B0C2B4 B 0x3B0C3A0
	0x03B0C2B8 ADD W2, W2, 0x1
	0x03B0C2BC MOVN W10, 0x0
	0x03B0C2C0 CMP W2, W9
	0x03B0C2C4 FMOV S0, W31
	0x03B0C2C8 B.GE 0x3B0C384
	0x03B0C2CC ADRP X13, 0xFFFFFFFFFCFDE000
	0x03B0C2D0 LDR V3, [X13 + 0xBC]
	0x03B0C2D4 SXTW X12, W9
	0x03B0C2D8 ADD X11, X1, W2, 0x1, SXTW
	0x03B0C2DC SCVTF S1, W10
	0x03B0C2E0 SXTW X10, W10
	0x03B0C2E4 FMOV S2, W31
	0x03B0C2E8 ADD X11, X11, 0x20
	0x03B0C2EC SUB X12, X12, W2, SXTW
	0x03B0C2F0 MOVZ W13, 0x1
	0x03B0C2F4 FMOV S4, 10
	0x03B0C2F8 FMOV S0, W31
	0x03B0C2FC CMP W2, W8
	0x03B0C300 B.CS 0x3B0C3E0
	0x03B0C304 LDRH W15, [X11]
	0x03B0C308 CMP W15, 0x2E
	0x03B0C30C SUB W14, W15, 0x30
	0x03B0C310 B.EQ 0x3B0C32C
	0x03B0C314 AND W16, W14, 0xFFFF
	0x03B0C318 CMP W16, 0x9
	0x03B0C31C B.LS 0x3B0C32C
	0x03B0C320 CMP W15, 0x2C
	0x03B0C324 B.NE 0x3B0C374
	0x03B0C328 B 0x3B0C3A8
	0x03B0C32C CMP W15, 0x2E
	0x03B0C330 B.NE 0x3B0C340
	0x03B0C334 MOV W13, W31
	0x03B0C338 MOV V2.16B, V3.16B
	0x03B0C33C B 0x3B0C374
	0x03B0C340 TBZ X13, 0x0, 0x3B0C35C
	0x03B0C344 MUL X13, X14, X10
	0x03B0C348 FMUL S0, S0, S4
	0x03B0C34C SCVTF S5, X13
	0x03B0C350 FADD S0, S0, S5
	0x03B0C354 MOVZ W13, 0x1
	0x03B0C358 B 0x3B0C374
	0x03B0C35C UCVTF S5, W14
	0x03B0C360 FMUL S5, S2, S5
	0x03B0C364 FMUL S5, S5, S1
	0x03B0C368 MOV W13, W31
	0x03B0C36C FADD S0, S0, S5
	0x03B0C370 FMUL S2, S2, S3
	0x03B0C374 ADD W2, W2, 0x1
	0x03B0C378 SUBS X12, X12, 0x1
	0x03B0C37C ADD X11, X11, 0x2
	0x03B0C380 B.NE 0x3B0C2FC
	0x03B0C384 ADRP X8, 0xFFFFFFFFFCFDE000
	0x03B0C388 LDR V1, [X8 + 0x374]
	0x03B0C38C MOVZ W8, 0xC7000000
	0x03B0C390 STR W9, [X4]
	0x03B0C394 FCMP S0, S1
	0x03B0C398 FMOV S1, W8
	0x03B0C39C FCSEL S0, S0, S1, LE
	0x03B0C3A0 LDR X30, [X31], #0x10
	0x03B0C3A4 RET
	0x03B0C3A8 ADD W10, W2, 0x1
	0x03B0C3AC CMP W10, W9
	0x03B0C3B0 B.GE 0x3B0C3CC
	0x03B0C3B4 CMP W10, W8
	0x03B0C3B8 B.CS 0x3B0C3E0
	0x03B0C3BC ADD X8, X1, W10, 0x1, SXTW
	0x03B0C3C0 LDRH W8, [X8 + 0x20]
	0x03B0C3C4 CMP W8, 0x20
	0x03B0C3C8 CSEL W2, W10, W2, EQ
	0x03B0C3CC ADRP X8, 0xFFFFFFFFFCFDE000
	0x03B0C3D0 LDR V1, [X8 + 0x374]
	0x03B0C3D4 MOVZ W8, 0xC7000000
	0x03B0C3D8 STR W2, [X4]
	0x03B0C3DC B 0x3B0C394
	0x03B0C3E0 BL 0x1C16F28
	0x03B0C3E4 BL 0x1C16F20
	0x03B0C3E8 STR X30, [X31 - 0x10]!
	0x03B0C3EC ADD X4, X31, 0xC
	0x03B0C3F0 STR W31, [X31 + 0xC]
	0x03B0C3F4 BL 0x3B0C268
	0x03B0C3F8 LDR X30, [X31], #0x10
	0x03B0C3FC RET
	0x03B0C400 STP X29, X30, [X31 - 0x60]!
	0x03B0C404 STP X28, X27, [X31 + 0x10]
	0x03B0C408 STP X26, X25, [X31 + 0x20]
	0x03B0C40C STP X24, X23, [X31 + 0x30]
	0x03B0C410 STP X22, X21, [X31 + 0x40]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X25, 0x8D7000
	012 Move X26, 0x64D000
	013 Move W8, [X25+1637]
	014 Move X26, [X26+1560]
	015 Move X20, X5
	016 Move W21, W4
	017 Move W22, W3
	018 Move X23, X2
	019 Move W19, W1
	020 Move X24, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {39}
	025 Move X0, 0x64D000
	026 Move X0, [X0+1552]
	027 Call 0x1C17CF4
	028 Move X0, 0x5E8000
	029 Move X0, [X0+1432]
	030 Call 0x1C17CF4
	031 Move X0, 0x64D000
	032 Move X0, [X0+1560]
	033 Call 0x1C17CF4
	034 Move X0, 0x64D000
	035 Move X0, [X0+1000]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X25+1637], W8
	039 Move X0, [X26]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move W0, W19
	045 Move X1, X23
	046 Move W2, W31
	047 Move W3, W22
	048 Move W4, W21
	049 Move X5, X20
	050 Move X6, X31
	051 Call TMP_FontAssetUtilities.GetCharacterFromFontAsset, X0, X1, X2, X3, X4, X5
	052 Compare X0, 0
	053 JumpIfEqual {67}
	054 Move X25, X0
	055 Move X0, X25
	056 Move X20, [X31+64]
	057 Move X19, [X31+72]
	058 Move X22, [X31+48]
	059 Move X21, [X31+56]
	060 Move X24, [X31+32]
	061 Move X23, [X31+40]
	062 Move X26, [X31+16]
	063 Move X25, [X31+24]
	064 Move X30, [X31+80]
	065 Move X27, [X31+88]
	066 Return X0
	067 Compare X23, 0
	068 JumpIfEqual {298}
	069 Move X25, [X23+312]
	070 Compare X25, 0
	071 JumpIfEqual {90}
	072 Move W8, [X25+24]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X0, [X26]
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {79}
	078 Call 0x1C17DFC
	079 Move W3, 1
	080 Move W0, W19
	081 Move X1, X23
	082 Move X2, X25
	083 Move W4, W22
	084 Move W5, W21
	085 Move X6, X20
	086 Move X7, X31
	087 Call TMP_FontAssetUtilities.GetCharacterFromFontAssets, X0, X1, X2, X3, X4, X5, X6
	088 Compare X0, 0
	089 JumpIfNotEqual {54}
	090 Move X0, X23
	091 Move X1, X31
	092 Call TMP_Asset.get_instanceID, X0
	093 Move X8, [X24+248]
	094 Compare X8, 0
	095 JumpIfEqual {298}
	096 Move W25, W0
	097 Move X0, X8
	098 Move X1, X31
	099 Call TMP_Asset.get_instanceID, X0
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X27, 0x5E8000
	102 Move X27, [X27+1432]
	103 Move X25, [X24+432]
	104 Move X0, [X27]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 Move X0, X25
	110 Move X1, X31
	111 Move X2, X31
	112 Call Object.op_Inequality, X0, X1
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfNotEqual {130}
	117 Move X0, [X26]
	118 Move X24, [X24+432]
	119 Move W8, [X0+224]
	120 Compare W8, 0
	121 JumpIfNotEqual {123}
	122 Call 0x1C17DFC
	123 Move W2, 1
	124 Move W0, W19
	125 Move X1, X24
	126 Move X3, X31
	127 Call TMP_FontAssetUtilities.GetSpriteCharacterFromSpriteAsset, X0, X1, X2
	128 Compare X0, 0
	129 JumpIfNotEqual {54}
	130 Move X0, X31
	131 Call TMP_Settings.get_fallbackFontAssets
	132 Compare X0, 0
	133 JumpIfEqual {160}
	134 Move X0, X31
	135 Call TMP_Settings.get_fallbackFontAssets
	136 Compare X0, 0
	137 JumpIfEqual {298}
	138 Move W8, [X0+24]
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move X0, X31
	141 Call TMP_Settings.get_fallbackFontAssets
	142 Move X8, [X26]
	143 Move X24, X0
	144 Move W9, [X8+224]
	145 Compare W9, 0
	146 JumpIfNotEqual {149}
	147 Move X0, X8
	148 Call 0x1C17DFC
	149 Move W3, 1
	150 Move W0, W19
	151 Move X1, X23
	152 Move X2, X24
	153 Move W4, W22
	154 Move W5, W21
	155 Move X6, X20
	156 Move X7, X31
	157 Call TMP_FontAssetUtilities.GetCharacterFromFontAssets, X0, X1, X2, X3, X4, X5, X6
	158 Compare X0, 0
	159 JumpIfNotEqual {54}
	160 Move X0, X31
	161 Call TMP_Settings.get_defaultFontAsset
	162 Move X8, [X27]
	163 Move X23, X0
	164 Move W9, [X8+224]
	165 Compare W9, 0
	166 JumpIfNotEqual {169}
	167 Move X0, X8
	168 Call 0x1C17DFC
	169 Move X0, X23
	170 Move X1, X31
	171 Move X2, X31
	172 Call Object.op_Inequality, X0, X1
	173 Move TEMP, X0
	174 And TEMP, TEMP, 1
	175 Compare TEMP, 1
	176 JumpIfNotEqual {196}
	177 Move X0, X31
	178 Call TMP_Settings.get_defaultFontAsset
	179 Move X8, [X26]
	180 Move X23, X0
	181 Move W9, [X8+224]
	182 Compare W9, 0
	183 JumpIfNotEqual {186}
	184 Move X0, X8
	185 Call 0x1C17DFC
	186 Move W2, 1
	187 Move W0, W19
	188 Move X1, X23
	189 Move W3, W22
	190 Move W4, W21
	191 Move X5, X20
	192 Move X6, X31
	193 Call TMP_FontAssetUtilities.GetCharacterFromFontAsset, X0, X1, X2, X3, X4, X5
	194 Compare X0, 0
	195 JumpIfNotEqual {54}
	196 Move X0, X31
	197 Call TMP_Settings.get_defaultSpriteAsset
	198 Move X8, [X27]
	199 Move X20, X0
	200 Move W9, [X8+224]
	201 Compare W9, 0
	202 JumpIfNotEqual {205}
	203 Move X0, X8
	204 Call 0x1C17DFC
	205 Move X0, X20
	206 Move X1, X31
	207 Move X2, X31
	208 Call Object.op_Inequality, X0, X1
	209 Move X25, X31
	210 Move TEMP, X0
	211 And TEMP, TEMP, 1
	212 Compare TEMP, 1
	213 JumpIfNotEqual {55}
	214 Move X0, X31
	215 Call TMP_Settings.get_defaultSpriteAsset
	216 Move X8, [X26]
	217 Move X20, X0
	218 Move W9, [X8+224]
	219 Compare W9, 0
	220 JumpIfNotEqual {223}
	221 Move X0, X8
	222 Call 0x1C17DFC
	223 Move W0, W19
	224 Move X1, X20
	225 Move X20, [X31+64]
	226 Move X19, [X31+72]
	227 Move X22, [X31+48]
	228 Move X21, [X31+56]
	229 Move X24, [X31+32]
	230 Move X23, [X31+40]
	231 Move X26, [X31+16]
	232 Move X25, [X31+24]
	233 Move W2, 1
	234 Move X3, X31
	235 Move X30, [X31+80]
	236 Move X27, [X31+88]
	237 Call TMP_FontAssetUtilities.GetSpriteCharacterFromSpriteAsset, X0, X1, X2
	238 Return X0
	239 Move X0, [X26]
	240 Move X25, [X24+248]
	241 Move W8, [X0+224]
	242 Compare W8, 0
	243 JumpIfNotEqual {245}
	244 Call 0x1C17DFC
	245 Move W0, W19
	246 Move X1, X25
	247 Move W2, W31
	248 Move W3, W22
	249 Move W4, W21
	250 Move X5, X20
	251 Move X6, X31
	252 Call TMP_FontAssetUtilities.GetCharacterFromFontAsset, X0, X1, X2, X3, X4, X5
	253 Compare X0, 0
	254 JumpIfEqual {274}
	255 Move [X24+288], W31
	256 Move X19, 0x64D000
	257 Move X19, [X19+1000]
	258 Move X25, X0
	259 Move X0, [X19]
	260 Move W8, [X0+224]
	261 Compare W8, 0
	262 JumpIfNotEqual {265}
	263 Call 0x1C17DFC
	264 Move X0, [X19]
	265 Move X8, [X0+184]
	266 Move X8, [X8]
	267 Compare X8, 0
	268 JumpIfEqual {298}
	269 Move W9, [X8+24]
	270 Compare W9, 0
	271 JumpIfEqual {299}
	272 Move X8, [X8+56]
	273 Move [X24+280], X8
	274 Move X8, [X24+248]
	275 Compare X8, 0
	276 JumpIfEqual {298}
	277 Move X25, [X8+312]
	278 Compare X25, 0
	279 JumpIfEqual {101}
	280 Move W8, [X25+24]
	281 NotImplemented "Instruction CMP not yet implemented."
	282 Move X0, [X26]
	283 Move W8, [X0+224]
	284 Compare W8, 0
	285 JumpIfNotEqual {287}
	286 Call 0x1C17DFC
	287 Move W3, 1
	288 Move W0, W19
	289 Move X1, X23
	290 Move X2, X25
	291 Move W4, W22
	292 Move W5, W21
	293 Move X6, X20
	294 Move X7, X31
	295 Call TMP_FontAssetUtilities.GetCharacterFromFontAssets, X0, X1, X2, X3, X4, X5, X6
	296 Compare X0, 0
	297 JumpIfNotEqual {54}
	298 Call 0x1C17F20
	299 Call 0x1C17F28

Method: System.Void SetActiveSubMeshes(System.Boolean state)

Disassembly:
	0x03B0C414 STP X20, X19, [X31 + 0x50]

ISIL:
	001 Return 

Method: System.Void DestroySubMeshObjects()

Disassembly:
	0x03B0C418 SUB X31, X31, 0x210

ISIL:
	001 Return 

Method: System.Void ClearMesh()

Disassembly:
	0x03B0C41C ADRP X21, 0x8D6000

ISIL:
	001 Return 

Method: System.Void ClearMesh(System.Boolean uploadGeometry)

Disassembly:
	0x03B0C420 ADRP X22, 0x64C000

ISIL:
	001 Return 

Method: System.String GetParsedText()

Disassembly:
	0x03B0C424 LDRB W8, [X21 + 0x66B]
	0x03B0C428 LDR X22, [X22 + 0x3E8]
	0x03B0C42C MOV X19, X0
	0x03B0C430 ADD X20, X0, 0x148
	0x03B0C434 TBNZ X8, 0x0, 0x3B0C548
	0x03B0C438 ADRP X0, 0x64C000
	0x03B0C43C LDR X0, [X0 + 0x590]
	0x03B0C440 BL 0x1C16CF4
	0x03B0C444 ADRP X0, 0x613000
	0x03B0C448 LDR X0, [X0 + 0xAF8]
	0x03B0C44C BL 0x1C16CF4
	0x03B0C450 ADRP X0, 0x618000
	0x03B0C454 LDR X0, [X0 + 0x828]
	0x03B0C458 BL 0x1C16CF4
	0x03B0C45C ADRP X0, 0x64D000
	0x03B0C460 LDR X0, [X0 + 0x330]
	0x03B0C464 BL 0x1C16CF4
	0x03B0C468 ADRP X0, 0x64D000
	0x03B0C46C LDR X0, [X0 + 0x338]
	0x03B0C470 BL 0x1C16CF4
	0x03B0C474 ADRP X0, 0x5E8000
	0x03B0C478 LDR X0, [X0 + 0xE58]
	0x03B0C47C BL 0x1C16CF4
	0x03B0C480 ADRP X0, 0x5E7000
	0x03B0C484 LDR X0, [X0 + 0x638]
	0x03B0C488 BL 0x1C16CF4
	0x03B0C48C ADRP X0, 0x64D000
	0x03B0C490 LDR X0, [X0 + 0x340]
	0x03B0C494 BL 0x1C16CF4
	0x03B0C498 ADRP X0, 0x64D000
	0x03B0C49C LDR X0, [X0 + 0x348]
	0x03B0C4A0 BL 0x1C16CF4
	0x03B0C4A4 ADRP X0, 0x64D000
	0x03B0C4A8 LDR X0, [X0 + 0x350]
	0x03B0C4AC BL 0x1C16CF4
	0x03B0C4B0 ADRP X0, 0x64D000
	0x03B0C4B4 LDR X0, [X0 + 0x358]
	0x03B0C4B8 BL 0x1C16CF4
	0x03B0C4BC ADRP X0, 0x64D000
	0x03B0C4C0 LDR X0, [X0 + 0x360]
	0x03B0C4C4 BL 0x1C16CF4
	0x03B0C4C8 ADRP X0, 0x64D000
	0x03B0C4CC LDR X0, [X0 + 0x368]
	0x03B0C4D0 BL 0x1C16CF4
	0x03B0C4D4 ADRP X0, 0x64D000
	0x03B0C4D8 LDR X0, [X0 + 0x370]
	0x03B0C4DC BL 0x1C16CF4
	0x03B0C4E0 ADRP X0, 0x64D000
	0x03B0C4E4 LDR X0, [X0 + 0x378]
	0x03B0C4E8 BL 0x1C16CF4
	0x03B0C4EC ADRP X0, 0x64D000
	0x03B0C4F0 LDR X0, [X0 + 0x380]
	0x03B0C4F4 BL 0x1C16CF4
	0x03B0C4F8 ADRP X0, 0x64D000
	0x03B0C4FC LDR X0, [X0 + 0x388]
	0x03B0C500 BL 0x1C16CF4
	0x03B0C504 ADRP X0, 0x64C000
	0x03B0C508 LDR X0, [X0 + 0x3E8]
	0x03B0C50C BL 0x1C16CF4
	0x03B0C510 ADRP X0, 0x64D000
	0x03B0C514 LDR X0, [X0 + 0x390]
	0x03B0C518 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x8D7000
	005 Move W8, [X19+1638]
	006 Move X20, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x5F1000
	012 Move X0, [X0+2264]
	013 Call 0x1C17CF4
	014 Move X0, 0x5EA000
	015 Move X0, [X0+632]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+1638], W8
	019 Move X8, [X20+872]
	020 Compare X8, 0
	021 JumpIfEqual {58}
	022 Move X9, 0x5F1000
	023 Move X9, [X9+2264]
	024 Move W19, [X8+24]
	025 Move X0, [X9]
	026 Move W1, W19
	027 Call 0x1C17D6C
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X1, X0
	030 Move X9, [X20+872]
	031 Compare X9, 0
	032 JumpIfEqual {67}
	033 Move X9, [X9+56]
	034 Move X8, X31
	035 Add X10, X1, 32
	036 Add X11, X9, 32
	037 Compare X9, 0
	038 JumpIfEqual {67}
	039 Move W12, [X9+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Compare X1, 0
	043 JumpIfEqual {67}
	044 Move W12, [X1+24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction LDRH not yet implemented."
	047 Add X11, X11, 376
	048 NotImplemented "Instruction STRH not yet implemented."
	049 Add X8, X8, 1
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X0, X31
	054 Move X2, X31
	055 Move X30, [X31+32]
	056 Call String.CreateString, X0, X1
	057 Return X0
	058 Move X8, 0x5EA000
	059 Move X8, [X8+632]
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X8, [X8]
	063 Move X8, [X8+184]
	064 Move X0, [X8]
	065 Move X30, [X31+32]
	066 Return X0
	067 Call 0x1C17F20
	068 Call 0x1C17F28

Method: System.Boolean IsSelfOrLinkedAncestor(TMPro.TMP_Text targetTextComponent)

Disassembly:
	0x03AF9654 STP X24, X23, [X31 + 0x10]
	0x03AF9658 STP X22, X21, [X31 + 0x20]
	0x03AF965C STP X20, X19, [X31 + 0x30]
	0x03AF9660 ADRP X21, 0x8E9000
	0x03AF9664 LDRB W8, [X21 + 0x63B]
	0x03AF9668 MOV X19, X1
	0x03AF966C MOV X20, X0
	0x03AF9670 TBNZ X8, 0x0, 0x3AF9688
	0x03AF9674 ADRP X0, 0x65F000
	0x03AF9678 LDR X0, [X0 + 0x590]
	0x03AF967C BL 0x1C16CF4
	0x03AF9680 MOVZ W8, 0x1
	0x03AF9684 STRB W8, [X21 + 0x63B]
	0x03AF9688 ADRP X24, 0x65F000
	0x03AF968C LDR X21, [X20 + 0x3B0]
	0x03AF9690 LDR X24, [X24 + 0x590]
	0x03AF9694 ADD X20, X20, 0x3B0
	0x03AF9698 MOV X0, X21
	0x03AF969C MOV X1, X19
	0x03AF96A0 MOV X2, X31
	0x03AF96A4 BL 0x33C0FDC
	0x03AF96A8 CBZ X0, 0x3AF96C8
	0x03AF96AC LDR X23, [X24]
	0x03AF96B0 MOV X22, X0
	0x03AF96B4 MOV X1, X23
	0x03AF96B8 BL 0x1C16E00
	0x03AF96BC MOV X1, X0
	0x03AF96C0 CBNZ X0, 0x3AF96CC
	0x03AF96C4 B 0x3AF96F8
	0x03AF96C8 MOV X1, X31
	0x03AF96CC MOV X0, X20
	0x03AF96D0 MOV X2, X21
	0x03AF96D4 BL 0x1C24138
	0x03AF96D8 CMP X21, X0
	0x03AF96DC MOV X21, X0
	0x03AF96E0 B.NE 0x3AF9698
	0x03AF96E4 LDP X20, X19, [X31 + 0x30]
	0x03AF96E8 LDP X22, X21, [X31 + 0x20]
	0x03AF96EC LDP X24, X23, [X31 + 0x10]
	0x03AF96F0 LDR X30, [X31], #0x40
	0x03AF96F4 RET
	0x03AF96F8 MOV X0, X22
	0x03AF96FC MOV X1, X23
	0x03AF9700 BL 0x1C171E0
	0x03AF9704 STP X30, X21, [X31 - 0x20]!
	0x03AF9708 STP X20, X19, [X31 + 0x10]
	0x03AF970C ADRP X20, 0x8E9000
	0x03AF9710 ADRP X21, 0x5FA000
	0x03AF9714 LDRB W8, [X20 + 0x63C]
	0x03AF9718 LDR X21, [X21 + 0x598]
	0x03AF971C MOV X19, X0
	0x03AF9720 TBNZ X8, 0x0, 0x3AF9750
	0x03AF9724 ADRP X0, 0x660000
	0x03AF9728 LDR X0, [X0 + 0x1C8]
	0x03AF972C BL 0x1C16CF4
	0x03AF9730 ADRP X0, 0x660000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8EA000
	007 Move X21, 0x5FB000
	008 Move W8, [X22+1639]
	009 Move X21, [X21+1432]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5FB000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1639], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X19
	027 Move X1, X31
	028 Move X2, X31
	029 Call Object.op_Equality, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {35}
	034 Move W0, 1
	035 Move X0, [X21]
	036 Move X21, [X20+752]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X21
	042 Move X1, X31
	043 Move X2, X31
	044 Call Object.op_Inequality, X0, X1
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {58}
	049 Move X0, [X20+752]
	050 Compare X0, 0
	051 JumpIfEqual {75}
	052 Move X1, X19
	053 Call TMP_Text.IsSelfOrLinkedAncestor, X0, X1
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfEqual {34}
	058 Move X0, X20
	059 Move X1, X31
	060 Call Object.GetInstanceID, X0
	061 Compare X19, 0
	062 JumpIfEqual {75}
	063 Move W20, W0
	064 Move X0, X19
	065 Move X1, X31
	066 Call Object.GetInstanceID, X0
	067 NotImplemented "Instruction CMP not yet implemented."
	068 NotImplemented "Instruction CSET not yet implemented."
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move X30, [X31+48]
	074 Return X0
	075 Call 0x1C17F20

Method: System.Void ReleaseLinkedTextComponent(TMPro.TMP_Text targetTextComponent)

Disassembly:
	0x03AF953C CBNZ X0, 0x3AF9548
	0x03AF9540 B 0x3AF9590
	0x03AF9544 MOV X21, X31
	0x03AF9548 LDR X0, [X24]
	0x03AF954C LDR W8, [X0 + 0xE0]
	0x03AF9550 CBNZ W8, 0x3AF955C
	0x03AF9554 BL 0x1C16DFC
	0x03AF9558 LDR X0, [X24]
	0x03AF955C LDR X8, [X0 + 0xB8]
	0x03AF9560 MOV X1, X21
	0x03AF9564 MOV X2, X20
	0x03AF9568 ADD X0, X8, 0x78
	0x03AF956C BL 0x1C24138
	0x03AF9570 CMP X20, X0
	0x03AF9574 MOV X20, X0
	0x03AF9578 B.NE 0x3AF9514
	0x03AF957C LDP X20, X19, [X31 + 0x30]
	0x03AF9580 LDP X22, X21, [X31 + 0x20]
	0x03AF9584 LDP X24, X23, [X31 + 0x10]
	0x03AF9588 LDP X30, X25, [X31], #0x40
	0x03AF958C RET
	0x03AF9590 MOV X0, X22
	0x03AF9594 MOV X1, X23
	0x03AF9598 BL 0x1C171E0
	0x03AF959C STR X30, [X31 - 0x40]!
	0x03AF95A0 STP X24, X23, [X31 + 0x10]
	0x03AF95A4 STP X22, X21, [X31 + 0x20]
	0x03AF95A8 STP X20, X19, [X31 + 0x30]
	0x03AF95AC ADRP X21, 0x8E9000
	0x03AF95B0 LDRB W8, [X21 + 0x63A]
	0x03AF95B4 MOV X19, X1
	0x03AF95B8 MOV X20, X0
	0x03AF95BC TBNZ X8, 0x0, 0x3AF95D4
	0x03AF95C0 ADRP X0, 0x65F000
	0x03AF95C4 LDR X0, [X0 + 0x590]
	0x03AF95C8 BL 0x1C16CF4
	0x03AF95CC MOVZ W8, 0x1
	0x03AF95D0 STRB W8, [X21 + 0x63A]
	0x03AF95D4 ADRP X24, 0x65F000
	0x03AF95D8 LDR X21, [X20 + 0x3B0]
	0x03AF95DC LDR X24, [X24 + 0x590]
	0x03AF95E0 ADD X20, X20, 0x3B0
	0x03AF95E4 MOV X0, X21
	0x03AF95E8 MOV X1, X19
	0x03AF95EC MOV X2, X31
	0x03AF95F0 BL 0x33C0DE4
	0x03AF95F4 CBZ X0, 0x3AF9614
	0x03AF95F8 LDR X23, [X24]
	0x03AF95FC MOV X22, X0
	0x03AF9600 MOV X1, X23
	0x03AF9604 BL 0x1C16E00
	0x03AF9608 MOV X1, X0
	0x03AF960C CBNZ X0, 0x3AF9618
	0x03AF9610 B 0x3AF9644
	0x03AF9614 MOV X1, X31
	0x03AF9618 MOV X0, X20
	0x03AF961C MOV X2, X21
	0x03AF9620 BL 0x1C24138
	0x03AF9624 CMP X21, X0
	0x03AF9628 MOV X21, X0
	0x03AF962C B.NE 0x3AF95E4
	0x03AF9630 LDP X20, X19, [X31 + 0x30]
	0x03AF9634 LDP X22, X21, [X31 + 0x20]
	0x03AF9638 LDP X24, X23, [X31 + 0x10]
	0x03AF963C LDR X30, [X31], #0x40
	0x03AF9640 RET
	0x03AF9644 MOV X0, X22
	0x03AF9648 MOV X1, X23
	0x03AF964C BL 0x1C171E0
	0x03AF9650 STR X30, [X31 - 0x40]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8EA000
	007 Move X21, 0x5FB000
	008 Move W8, [X22+1640]
	009 Move X21, [X21+1432]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x5FB000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move X0, 0x5FD000
	020 Move X0, [X0+632]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+1640], W8
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X19
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {81}
	037 Compare X19, 0
	038 JumpIfEqual {87}
	039 Move X0, [X21]
	040 Move X21, [X19+744]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X21
	046 Move X1, X31
	047 Move X2, X31
	048 Call Object.op_Inequality, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {56}
	053 Move X0, X20
	054 Move X1, X21
	055 Call TMP_Text.ReleaseLinkedTextComponent, X0, X1
	056 Move X8, 0x5FD000
	057 Move X8, [X8+632]
	058 Move X9, [X19]
	059 Move X0, X19
	060 Move X8, [X8]
	061 Move X10, [X9+1368]
	062 Move X2, [X9+1376]
	063 Move X8, [X8+184]
	064 Move X1, [X8]
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Move W8, [X19+804]
	067 Compare W8, 0
	068 JumpIfEqual {77}
	069 Move X8, [X19]
	070 Move W9, 1
	071 Move [X19+804], W31
	072 Move [X19+880], W9
	073 Move X9, [X8+760]
	074 Move X1, [X8+768]
	075 Move X0, X19
	076 NotImplemented "Instruction BLR not yet implemented."
	077 Move X0, X19
	078 Move X1, X31
	079 Call TMP_Text.set_linkedTextComponent, X0, X1
	080 Move [X19+752], X31
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move X30, [X31+48]
	086 Return 
	087 Call 0x1C17F20

Method: UnityEngine.Vector2 PackUV(System.Single x, System.Single y, System.Single scale)

Disassembly:
	0x03B0B4D8 CMP X19, X8
	0x03B0B4DC B.NE 0x3B0B4A0
	0x03B0B4E0 LDP X20, X19, [X31 + 0x10]
	0x03B0B4E4 MOV X0, X31
	0x03B0B4E8 MOV X2, X31
	0x03B0B4EC LDR X30, [X31], #0x20
	0x03B0B4F0 B 0x32256D4
	0x03B0B4F4 ADRP X8, 0x5EA000
	0x03B0B4F8 LDR X8, [X8 + 0x278]
	0x03B0B4FC LDP X20, X19, [X31 + 0x10]
	0x03B0B500 LDR X8, [X8]
	0x03B0B504 LDR X8, [X8 + 0xB8]
	0x03B0B508 LDR X0, [X8]
	0x03B0B50C LDR X30, [X31], #0x20
	0x03B0B510 RET
	0x03B0B514 BL 0x1C16F20
	0x03B0B518 BL 0x1C16F28
	0x03B0B51C ADRP X8, 0xFFFFFFFFFCFDF000
	0x03B0B520 LDR V2, [X8 + 0xC]
	0x03B0B524 MOVZ X8, 0xC1E00000
	0x03B0B528 MOVZ W9, 0x7F800000
	0x03B0B52C FMOV D4, X8
	0x03B0B530 MOVZ X8, 0x40B00000
	0x03B0B534 FMUL S1, S1, S2

ISIL:
	001 Move X8, -50462720
	002 Move V3, [X8+12]
	003 Move W8, 0xCF000000
	004 Move W9, 0x7F800000
	005 Move S5, W8
	006 Move W8, 0x45800000
	007 Multiply S1, S1, S3
	008 Move S4, W9
	009 Multiply S0, S0, S3
	010 Move S3, W8
	011 NotImplemented "Instruction FCVTZS not yet implemented."
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 NotImplemented "Instruction SCVTF not yet implemented."
	014 NotImplemented "Instruction FCVTZS not yet implemented."
	015 NotImplemented "Instruction FCSEL not yet implemented."
	016 NotImplemented "Instruction SCVTF not yet implemented."
	017 Move W8, 0xD5000000
	018 Multiply S3, S5, S3
	019 NotImplemented "Instruction FCMP not yet implemented."
	020 Move S0, W8
	021 NotImplemented "Instruction FCSEL not yet implemented."
	022 Add S0, S0, S1
	023 Move V1, V2
	024 Return X0

Method: System.Single PackUV(System.Single x, System.Single y)

Disassembly:
	0x03B0C51C ADRP X0, 0x64D000
	0x03B0C520 LDR X0, [X0 + 0x398]
	0x03B0C524 BL 0x1C16CF4
	0x03B0C528 ADRP X0, 0x64C000
	0x03B0C52C LDR X0, [X0 + 0x5B8]
	0x03B0C530 BL 0x1C16CF4
	0x03B0C534 ADRP X0, 0x5E9000
	0x03B0C538 LDR X0, [X0 + 0x9B0]
	0x03B0C53C BL 0x1C16CF4
	0x03B0C540 MOVZ W8, 0x1
	0x03B0C544 STRB W8, [X21 + 0x66B]
	0x03B0C548 ADRP X27, 0x64D000
	0x03B0C54C ADRP X26, 0x64D000
	0x03B0C550 ADRP X24, 0x64D000
	0x03B0C554 ADRP X23, 0x64D000
	0x03B0C558 ADRP X21, 0x5E9000
	0x03B0C55C ADRP X25, 0x64D000
	0x03B0C560 LDR X27, [X27 + 0x360]
	0x03B0C564 LDR X26, [X26 + 0x358]
	0x03B0C568 LDR X24, [X24 + 0x338]
	0x03B0C56C LDR X23, [X23 + 0x380]
	0x03B0C570 LDR X21, [X21 + 0x9B0]
	0x03B0C574 LDR X25, [X25 + 0x398]
	0x03B0C578 FMOV S0, 1

ISIL:
	001 Move X8, -50466816
	002 Move V2, [X8+12]
	003 Move X8, 0xC1E00000
	004 Move W9, 0x7F800000
	005 Move D4, X8
	006 Move X8, 0x40B00000
	007 Multiply S1, S1, S2
	008 Move S3, W9
	009 Multiply S0, S0, S2
	010 Move D2, X8
	011 NotImplemented "Instruction FCVTZS not yet implemented."
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 NotImplemented "Instruction SCVTF not yet implemented."
	014 NotImplemented "Instruction FCVTZS not yet implemented."
	015 NotImplemented "Instruction FCSEL not yet implemented."
	016 NotImplemented "Instruction SCVTF not yet implemented."
	017 Move X8, 0xC2A00000
	018 Multiply D2, D4, D2
	019 NotImplemented "Instruction FCMP not yet implemented."
	020 Move D0, X8
	021 NotImplemented "Instruction FCSEL not yet implemented."
	022 Add D0, D0, D1
	023 NotImplemented "Instruction INVALID not yet implemented."
	024 Return V0

Method: System.Void InternalUpdate()

Disassembly:
	0x03B0C57C FMOV S1, 1

ISIL:
	001 Return 

Method: System.Int32 HexToInt(System.Char hex)

Disassembly:
	0x03B0C580 FMOV S2, 1
	0x03B0C584 FMOV S3, 1
	0x03B0C588 MOV X0, X31
	0x03B0C58C BL 0x1E43664
	0x03B0C590 FMOV V0.4S, 0x0
	0x03B0C594 STR W0, [X19 + 0x144]
	0x03B0C598 STR V0, [X20]
	0x03B0C59C LDR X0, [X22]
	0x03B0C5A0 LDR W8, [X0 + 0xE0]
	0x03B0C5A4 CBNZ W8, 0x3B0C5B0
	0x03B0C5A8 BL 0x1C16DFC

ISIL:
	001 Subtract W8, W1, 48
	002 And W9, W8, 0xFFFF
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move X9, -49758208
	005 NotImplemented "Instruction SXTH not yet implemented."
	006 Add X9, X9, 3232
	007 Move W0, [X9]
	008 Return X0
	009 Move W0, 15
	010 Return X0

Method: System.Int32 GetUTF16(System.String text, System.Int32 i)

Disassembly:
	0x03B0C5AC LDR X0, [X22]
	0x03B0C5B0 LDR X8, [X0 + 0xB8]
	0x03B0C5B4 MOVZ W9, 0x3
	0x03B0C5B8 MOVI V0.2D, 0x0
	0x03B0C5BC FMOV S1, 1
	0x03B0C5C0 LDR W8, [X8 + 0x68]
	0x03B0C5C4 FMOV S2, 1
	0x03B0C5C8 FMOV S3, 1
	0x03B0C5CC MOV X1, X31
	0x03B0C5D0 STR W8, [X19 + 0x158]
	0x03B0C5D4 LDR X8, [X0 + 0xB8]
	0x03B0C5D8 ADD X0, X31, 0x1D0
	0x03B0C5DC LDR W8, [X8 + 0x68]
	0x03B0C5E0 STR W9, [X19 + 0x164]
	0x03B0C5E4 STR W8, [X19 + 0x15C]
	0x03B0C5E8 STP V0, V0, [X31 + 0x1F0]
	0x03B0C5EC STP V0, V0, [X31 + 0x1D0]
	0x03B0C5F0 FMOV S0, 1
	0x03B0C5F4 BL 0x3ADB0EC
	0x03B0C5F8 LDP V0, V1, [X31 + 0x1F0]
	0x03B0C5FC LDP V2, V3, [X31 + 0x1D0]
	0x03B0C600 ADD X8, X19, 0x168
	0x03B0C604 MOV X0, X31
	0x03B0C608 STP V0, V1, [X8 + 0x20]
	0x03B0C60C STP V2, V3, [X8]
	0x03B0C610 FMOV S0, 1
	0x03B0C614 FMOV S1, 1
	0x03B0C618 FMOV S2, 1
	0x03B0C61C FMOV S3, 1
	0x03B0C620 BL 0x1E43664
	0x03B0C624 STR W0, [X19 + 0x1D8]
	0x03B0C628 FMOV S0, W31
	0x03B0C62C FMOV S1, W31
	0x03B0C630 FMOV S2, W31
	0x03B0C634 FMOV S3, 1
	0x03B0C638 MOV X0, X31
	0x03B0C63C BL 0x1E43664
	0x03B0C640 MOVZ W8, 0xC2C60000
	0x03B0C644 MOVZ W9, 0x42100000
	0x03B0C648 STR W0, [X19 + 0x1DC]
	0x03B0C64C STR W8, [X19 + 0x1E4]
	0x03B0C650 STR W9, [X19 + 0x1EC]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare X1, 0
	008 JumpIfEqual {51}
	009 Move W20, W2
	010 Move X19, X1
	011 Move X0, X1
	012 Move W1, W2
	013 Move X2, X31
	014 Call String.get_Chars, X0, X1
	015 Move W1, W0
	016 Call TMP_Text.HexToInt, X0, X1
	017 Move W21, W0
	018 Add W1, W20, 1
	019 Move X0, X19
	020 Move X2, X31
	021 Call String.get_Chars, X0, X1
	022 Move W1, W0
	023 Call TMP_Text.HexToInt, X0, X1
	024 Move W22, W0
	025 Add W1, W20, 2
	026 Move X0, X19
	027 Move X2, X31
	028 Call String.get_Chars, X0, X1
	029 Move W1, W0
	030 Call TMP_Text.HexToInt, X0, X1
	031 Move W23, W0
	032 Add W1, W20, 3
	033 Move X0, X19
	034 Move X2, X31
	035 Call String.get_Chars, X0, X1
	036 Move W1, W0
	037 Call TMP_Text.HexToInt, X0, X1
	038 Move W8, W22
	039 ShiftRight W8, 24
	040 And W8, W8, 0x7FFFFF
	041 Add W8, W8, W21
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Add W8, W8, W23
	047 Add W0, W8, W0
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Return X0
	051 Call 0x1C17F20

Method: System.Int32 GetUTF16(System.Int32[] text, System.Int32 i)

Disassembly:
	0x03AFDB98 STR W31, [X19 + 0x244]
	0x03AFDB9C MOV V0.16B, V8.16B
	0x03AFDBA0 LDR X9, [X8 + 0x868]
	0x03AFDBA4 LDR X4, [X8 + 0x870]
	0x03AFDBA8 MOV W3, W31
	0x03AFDBAC BLR X9
	0x03AFDBB0 MOV V10.16B, V0.16B
	0x03AFDBB4 MOV X0, X19
	0x03AFDBB8 MOV V0.16B, V8.16B
	0x03AFDBBC MOV V1.16B, V9.16B
	0x03AFDBC0 BL 0x3AFDA14
	0x03AFDBC4 MOV V1.16B, V0.16B
	0x03AFDBC8 MOV V0.16B, V10.16B
	0x03AFDBCC LDP X20, X19, [X31 + 0x40]
	0x03AFDBD0 LDP X22, X21, [X31 + 0x30]
	0x03AFDBD4 LDR X30, [X31 + 0x28]
	0x03AFDBD8 LDP D9, D8, [X31 + 0x18]
	0x03AFDBDC LDR V10, [X31 + 0x10]
	0x03AFDBE0 ADD X31, X31, 0x50
	0x03AFDBE4 RET
	0x03AFDBE8 STR D10, [X31 - 0x30]!
	0x03AFDBEC STP D9, D8, [X31 + 0x10]
	0x03AFDBF0 STP X30, X19, [X31 + 0x20]
	0x03AFDBF4 MOVZ W8, 0x1
	0x03AFDBF8 MOV V8.16B, V1.16B
	0x03AFDBFC MOV V9.16B, V0.16B
	0x03AFDC00 MOV X19, X0
	0x03AFDC04 STRB W8, [X0 + 0x3F5]
	0x03AFDC08 BL 0x3AFC26C
	0x03AFDC0C LDR X8, [X19]
	0x03AFDC10 LDR X1, [X19 + 0x478]
	0x03AFDC14 MOV X0, X19
	0x03AFDC18 LDR X9, [X8 + 0x858]
	0x03AFDC1C LDR X2, [X8 + 0x860]
	0x03AFDC20 BLR X9
	0x03AFDC24 LDRB W8, [X19 + 0x238]
	0x03AFDC28 MOVZ W9, 0x254
	0x03AFDC2C ADD X1, X31, 0xC
	0x03AFDC30 MOV X0, X19
	0x03AFDC34 CMP W8, 0x0
	0x03AFDC38 MOVZ W8, 0x1E4
	0x03AFDC3C CSEL X8, X8, X9, EQ

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare X1, 0
	008 JumpIfEqual {47}
	009 Move W10, [X1+24]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add W9, W2, 1
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Add W8, W2, 2
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Add W22, W2, 3
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Add X23, X1, 32
	018 Add X10, X1, W2
	019 Add X9, X1, W9
	020 Move W1, [X23]
	021 Move W19, [X10+32]
	022 Move W20, [X9+32]
	023 Call TMP_Text.HexToInt, X0, X1
	024 Move W1, W20
	025 Move W21, W0
	026 Call TMP_Text.HexToInt, X0, X1
	027 Move W1, W19
	028 Move W20, W0
	029 Call TMP_Text.HexToInt, X0, X1
	030 Move W1, [X23]
	031 Move W19, W0
	032 Call TMP_Text.HexToInt, X0, X1
	033 Move W8, W20
	034 ShiftRight W8, 24
	035 And W8, W8, 0x7FFFFF
	036 Add W8, W8, W21
	037 Add W8, W8, W19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Add W0, W8, W0
	043 Move X30, [X31+48]
	044 Move X23, [X31+56]
	045 Return X0
	046 Call 0x1C17F28
	047 Call 0x1C17F20

Method: System.Int32 GetUTF16(System.UInt32[] text, System.Int32 i)

Disassembly:
	0x03B0C654 LDR X2, [X27]
	0x03B0C658 MOVI V0.2D, 0x0
	0x03B0C65C ADD X0, X31, 0x120
	0x03B0C660 MOVZ W1, 0x10
	0x03B0C664 STP V0, V0, [X31 + 0x120]
	0x03B0C668 BL 0x2673218
	0x03B0C66C LDP V1, V0, [X31 + 0x120]
	0x03B0C670 MOVZ W8, 0x190
	0x03B0C674 UNIMPLEMENTED
	0x03B0C678 STR D2, [X19 + 0x210]
	0x03B0C67C STP V1, V0, [X19 + 0x1F0]
	0x03B0C680 LDR X2, [X26]
	0x03B0C684 MOVI V0.2D, 0x0
	0x03B0C688 ADD X0, X31, 0x1B0
	0x03B0C68C MOVZ W1, 0x8
	0x03B0C690 STP V0, V0, [X31 + 0x1B0]
	0x03B0C694 BL 0x2671F90
	0x03B0C698 ADRP X11, 0xFFFFFFFFFCFE1000
	0x03B0C69C LDP V0, V1, [X31 + 0x1B0]
	0x03B0C6A0 LDR V2, [X11 + 0x7F0]
	0x03B0C6A4 ADD X8, X19, 0x218
	0x03B0C6A8 MOVZ W9, 0x64
	0x03B0C6AC ADD X10, X20, 0x124
	0x03B0C6B0 MOVZ W12, 0xFFFF
	0x03B0C6B4 STP V0, V1, [X8]
	0x03B0C6B8 STR W9, [X19 + 0x248]
	0x03B0C6BC STR D2, [X10]
	0x03B0C6C0 STR W12, [X19 + 0x274]
	0x03B0C6C4 LDR X0, [X24]
	0x03B0C6C8 MOVZ W1, 0x10
	0x03B0C6CC BL 0x1C16D6C
	0x03B0C6D0 LDR X2, [X23]
	0x03B0C6D4 MOV X1, X0
	0x03B0C6D8 MOVI V0.2D, 0x0
	0x03B0C6DC ADD X0, X31, 0x190
	0x03B0C6E0 STP V0, V0, [X31 + 0x190]
	0x03B0C6E4 BL 0x2671F64
	0x03B0C6E8 LDP V1, V0, [X31 + 0x190]
	0x03B0C6EC MOVZ W1, 0x4
	0x03B0C6F0 STP V1, V0, [X19 + 0x280]
	0x03B0C6F4 LDR X0, [X21]
	0x03B0C6F8 BL 0x1C16D6C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare X1, 0
	008 JumpIfEqual {47}
	009 Move W10, [X1+24]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add W9, W2, 1
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Add W8, W2, 2
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Add W22, W2, 3
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Add X23, X1, 32
	018 Add X10, X1, W2
	019 Add X9, X1, W9
	020 Move W1, [X23]
	021 Move W19, [X10+32]
	022 Move W20, [X9+32]
	023 Call TMP_Text.HexToInt, X0, X1
	024 Move W1, W20
	025 Move W21, W0
	026 Call TMP_Text.HexToInt, X0, X1
	027 Move W1, W19
	028 Move W20, W0
	029 Call TMP_Text.HexToInt, X0, X1
	030 Move W1, [X23]
	031 Move W19, W0
	032 Call TMP_Text.HexToInt, X0, X1
	033 Move W8, W20
	034 ShiftRight W8, 24
	035 And W8, W8, 0x7FFFFF
	036 Add W8, W8, W21
	037 Add W8, W8, W19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Add W0, W8, W0
	043 Move X30, [X31+48]
	044 Move X23, [X31+56]
	045 Return X0
	046 Call 0x1C17F28
	047 Call 0x1C17F20

Method: System.Int32 GetUTF16(System.Text.StringBuilder text, System.Int32 i)

Disassembly:
	0x03B0C6FC MOVZ W9, 0xCCCD
	0x03B0C700 MOVK W9, 0x3ECC0000
	0x03B0C704 STR W9, [X19 + 0x2DC]
	0x03B0C708 MOVZ W9, 0x101
	0x03B0C70C MOVZ W8, 0xFE00
	0x03B0C710 STRH W9, [X19 + 0x302]
	0x03B0C714 MOVZ W9, 0xFF
	0x03B0C718 MOVK W8, 0xC6FF0000
	0x03B0C71C STR W9, [X19 + 0x318]
	0x03B0C720 MOVZ W9, 0x869F
	0x03B0C724 STR W8, [X19 + 0x2C0]
	0x03B0C728 MOVN W8, 0x0
	0x03B0C72C MOVK W9, 0x10000
	0x03B0C730 MOVI V0.2D, 0x0
	0x03B0C734 STR W8, [X19 + 0x2E4]
	0x03B0C738 MOVZ W8, 0x1
	0x03B0C73C STR V0, [X19 + 0x34]
	0x03B0C740 UNIMPLEMENTED
	0x03B0C744 STR W9, [X19 + 0x330]
	0x03B0C748 MOVZ W9, 0xBF800000
	0x03B0C74C STR X0, [X19 + 0x2A0]
	0x03B0C750 STRB W8, [X19 + 0x309]
	0x03B0C754 STRB W8, [X19 + 0x334]
	0x03B0C758 STR W8, [X19 + 0x338]
	0x03B0C75C STR D0, [X19 + 0x328]
	0x03B0C760 STR W9, [X19 + 0x360]
	0x03B0C764 LDR X0, [X25]
	0x03B0C768 LDR W8, [X0 + 0xE0]
	0x03B0C76C CBNZ W8, 0x3B0C778
	0x03B0C770 BL 0x1C16DFC
	0x03B0C774 LDR X0, [X25]
	0x03B0C778 MOV X9, X25
	0x03B0C77C ADRP X11, 0x5E7000
	0x03B0C780 ADRP X10, 0x64D000
	0x03B0C784 ADRP X25, 0x64C000
	0x03B0C788 ADRP X29, 0x613000
	0x03B0C78C ADRP X28, 0x64D000
	0x03B0C790 ADRP X23, 0x64D000
	0x03B0C794 LDR X11, [X11 + 0x638]
	0x03B0C798 LDR X10, [X10 + 0x368]
	0x03B0C79C LDR X25, [X25 + 0x5B8]
	0x03B0C7A0 LDR X29, [X29 + 0xAF8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare X1, 0
	008 JumpIfEqual {51}
	009 Move W20, W2
	010 Move X19, X1
	011 Move X0, X1
	012 Move W1, W2
	013 Move X2, X31
	014 Call StringBuilder.get_Chars, X0, X1
	015 Move W1, W0
	016 Call TMP_Text.HexToInt, X0, X1
	017 Move W21, W0
	018 Add W1, W20, 1
	019 Move X0, X19
	020 Move X2, X31
	021 Call StringBuilder.get_Chars, X0, X1
	022 Move W1, W0
	023 Call TMP_Text.HexToInt, X0, X1
	024 Move W22, W0
	025 Add W1, W20, 2
	026 Move X0, X19
	027 Move X2, X31
	028 Call StringBuilder.get_Chars, X0, X1
	029 Move W1, W0
	030 Call TMP_Text.HexToInt, X0, X1
	031 Move W23, W0
	032 Add W1, W20, 3
	033 Move X0, X19
	034 Move X2, X31
	035 Call StringBuilder.get_Chars, X0, X1
	036 Move W1, W0
	037 Call TMP_Text.HexToInt, X0, X1
	038 Move W8, W22
	039 ShiftRight W8, 24
	040 And W8, W8, 0x7FFFFF
	041 Add W8, W8, W21
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Add W8, W8, W23
	047 Add W0, W8, W0
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Return X0
	051 Call 0x1C17F20

Method: System.Int32 GetUTF16(TMPro.TMP_Text/TextBackingContainer text, System.Int32 i)

Disassembly:
	0x03AFC3B4 MOV V13.16B, V2.16B
	0x03AFC3B8 MOV V14.16B, V1.16B
	0x03AFC3BC MOV V15.16B, V0.16B
	0x03AFC3C0 MOV W22, W31
	0x03AFC3C4 MOV W27, W31
	0x03AFC3C8 MOV W23, W31
	0x03AFC3CC MOV W24, W31
	0x03AFC3D0 MOV W28, W31
	0x03AFC3D4 ADD X26, X26, 0xC86
	0x03AFC3D8 MOV X0, X20
	0x03AFC3DC MOV W1, W22
	0x03AFC3E0 MOV X2, X31
	0x03AFC3E4 BL 0x3222A1C
	0x03AFC3E8 AND W2, W0, 0xFFFF
	0x03AFC3EC CMP W2, 0x7B
	0x03AFC3F0 B.EQ 0x3AFC428
	0x03AFC3F4 CMP W2, 0x7D
	0x03AFC3F8 B.NE 0x3AFC430
	0x03AFC3FC CMP W28, 0x7
	0x03AFC400 B.HI 0x3AFC518
	0x03AFC404 MOV W8, W28
	0x03AFC408 ADR X9, 0x10
	0x03AFC40C LDRB W10, [X26, X8, LSL]
	0x03AFC410 ADD X9, X9, X10, 0x2, LSL
	0x03AFC414 BR X9
	0x03AFC418 ADD X3, X31, 0x4C
	0x03AFC41C MOV X0, X19
	0x03AFC420 MOV V0.16B, V15.16B
	0x03AFC424 B 0x3AFC50C
	0x03AFC428 MOVZ W27, 0x1
	0x03AFC42C B 0x3AFC56C
	0x03AFC430 CMP W27, 0x1
	0x03AFC434 SUB W8, W2, 0x30
	0x03AFC438 B.NE 0x3AFC454
	0x03AFC43C AND W9, W8, 0xFFFF
	0x03AFC440 CMP W9, 0x8
	0x03AFC444 B.HI 0x3AFC454
	0x03AFC448 MOVZ W27, 0x2
	0x03AFC44C MOV W28, W8
	0x03AFC450 B 0x3AFC56C
	0x03AFC454 CMP W27, 0x3
	0x03AFC458 B.EQ 0x3AFC48C

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X2
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move [X31], X1
	009 Add X0, X31, 0
	010 Move W1, W3
	011 Move X2, X31
	012 Move W19, W3
	013 Call TextBackingContainer.get_Item, X0, X1
	014 Move W1, W0
	015 Call TMP_Text.HexToInt, X0, X1
	016 Move W20, W0
	017 Add W1, W19, 1
	018 Add X0, X31, 0
	019 Move X2, X31
	020 Call TextBackingContainer.get_Item, X0, X1
	021 Move W1, W0
	022 Call TMP_Text.HexToInt, X0, X1
	023 Move W21, W0
	024 Add W1, W19, 2
	025 Add X0, X31, 0
	026 Move X2, X31
	027 Call TextBackingContainer.get_Item, X0, X1
	028 Move W1, W0
	029 Call TMP_Text.HexToInt, X0, X1
	030 Move W22, W0
	031 Add W1, W19, 3
	032 Add X0, X31, 0
	033 Move X2, X31
	034 Call TextBackingContainer.get_Item, X0, X1
	035 Move W1, W0
	036 Call TMP_Text.HexToInt, X0, X1
	037 Move W8, W21
	038 ShiftRight W8, 24
	039 And W8, W8, 0x7FFFFF
	040 Add W8, W8, W20
	041 Add W8, W8, W22
	042 Move X20, [X31+48]
	043 Move X19, [X31+56]
	044 Move X22, [X31+32]
	045 Move X21, [X31+40]
	046 Move X30, [X31+16]
	047 Add W0, W8, W0
	048 Add X31, X31, 64
	049 Return X0

Method: System.Int32 GetUTF32(System.String text, System.Int32 i)

Disassembly:
	0x03B0C7A4 LDR X28, [X28 + 0x388]
	0x03B0C7A8 LDR X23, [X23 + 0x330]
	0x03B0C7AC LDR X8, [X0 + 0xB8]
	0x03B0C7B0 ADRP X22, 0x64D000
	0x03B0C7B4 ADRP X21, 0x64D000
	0x03B0C7B8 ADRP X24, 0x64D000
	0x03B0C7BC ADRP X27, 0x5E8000
	0x03B0C7C0 ADRP X26, 0x64D000
	0x03B0C7C4 LDR X22, [X22 + 0x370]
	0x03B0C7C8 LDR X21, [X21 + 0x340]
	0x03B0C7CC LDR X24, [X24 + 0x350]
	0x03B0C7D0 LDR X20, [X8 + 0x8]
	0x03B0C7D4 LDR X27, [X27 + 0xE58]
	0x03B0C7D8 LDR X26, [X26 + 0x378]
	0x03B0C7DC CBNZ X20, 0x3B0C86C
	0x03B0C7E0 LDR W8, [X0 + 0xE0]
	0x03B0C7E4 MOV X27, X26
	0x03B0C7E8 MOV X26, X9
	0x03B0C7EC MOV X29, X11
	0x03B0C7F0 MOV X25, X10
	0x03B0C7F4 CBNZ W8, 0x3B0C800
	0x03B0C7F8 BL 0x1C16DFC
	0x03B0C7FC LDR X0, [X26]
	0x03B0C800 ADRP X9, 0x64C000
	0x03B0C804 LDR X8, [X0 + 0xB8]
	0x03B0C808 LDR X9, [X9 + 0x590]
	0x03B0C80C LDR X21, [X8]
	0x03B0C810 LDR X0, [X9]
	0x03B0C814 BL 0x1C16F10
	0x03B0C818 ADRP X8, 0x64D000
	0x03B0C81C LDR X8, [X8 + 0x390]
	0x03B0C820 MOV X1, X21
	0x03B0C824 MOV X3, X31
	0x03B0C828 MOV X20, X0
	0x03B0C82C LDR X2, [X8]
	0x03B0C830 BL 0x2A6B948
	0x03B0C834 LDR X8, [X26]
	0x03B0C838 MOV X10, X25
	0x03B0C83C MOV X11, X29
	0x03B0C840 MOV X26, X27
	0x03B0C844 LDR X8, [X8 + 0xB8]
	0x03B0C848 ADRP X27, 0x5E8000
	0x03B0C84C ADRP X21, 0x64D000
	0x03B0C850 ADRP X29, 0x613000
	0x03B0C854 STR X20, [X8 + 0x8]
	0x03B0C858 ADRP X25, 0x64C000
	0x03B0C85C LDR X27, [X27 + 0xE58]
	0x03B0C860 LDR X21, [X21 + 0x340]
	0x03B0C864 LDR X29, [X29 + 0xAF8]
	0x03B0C868 LDR X25, [X25 + 0x5B8]
	0x03B0C86C FMOV V0.2S, 0x0
	0x03B0C870 STR X20, [X19 + 0x3B0]
	0x03B0C874 STR D0, [X19 + 0x3C0]
	0x03B0C878 LDR X0, [X11]
	0x03B0C87C MOVZ W1, 0x10
	0x03B0C880 MOV X20, X10
	0x03B0C884 BL 0x1C16D6C
	0x03B0C888 LDR X2, [X20]
	0x03B0C88C MOV X1, X0
	0x03B0C890 MOVI V0.2D, 0x0
	0x03B0C894 ADD X0, X31, 0x1B0
	0x03B0C898 STP V0, V0, [X31 + 0x1B0]
	0x03B0C89C BL 0x26731EC
	0x03B0C8A0 LDP V1, V0, [X31 + 0x1B0]
	0x03B0C8A4 MOVZ W1, 0x8
	0x03B0C8A8 STR V0, [X19 + 0x42]
	0x03B0C8AC STR V1, [X19 + 0x41]
	0x03B0C8B0 LDR X0, [X25]
	0x03B0C8B4 BL 0x1C16D6C
	0x03B0C8B8 MOVZ W8, 0x437F0000
	0x03B0C8BC MOVZ W9, 0x43000000
	0x03B0C8C0 FMOV S0, W8
	0x03B0C8C4 STR X0, [X19 + 0x478]
	0x03B0C8C8 FMOV S3, W9
	0x03B0C8CC MOV V1.16B, V0.16B
	0x03B0C8D0 MOV V2.16B, V0.16B
	0x03B0C8D4 MOV X0, X31
	0x03B0C8D8 BL 0x1E43664

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Compare X1, 0
	012 JumpIfEqual {91}
	013 Move W20, W2
	014 Move X19, X1
	015 Move X0, X1
	016 Move W1, W2
	017 Move X2, X31
	018 Call String.get_Chars, X0, X1
	019 Move W1, W0
	020 Call TMP_Text.HexToInt, X0, X1
	021 Move W21, W0
	022 Add W1, W20, 1
	023 Move X0, X19
	024 Move X2, X31
	025 Call String.get_Chars, X0, X1
	026 Move W1, W0
	027 Call TMP_Text.HexToInt, X0, X1
	028 Move W22, W0
	029 Add W1, W20, 2
	030 Move X0, X19
	031 Move X2, X31
	032 Call String.get_Chars, X0, X1
	033 Move W1, W0
	034 Call TMP_Text.HexToInt, X0, X1
	035 Move W23, W0
	036 Add W1, W20, 3
	037 Move X0, X19
	038 Move X2, X31
	039 Call String.get_Chars, X0, X1
	040 Move W1, W0
	041 Call TMP_Text.HexToInt, X0, X1
	042 Move W24, W0
	043 Add W1, W20, 4
	044 Move X0, X19
	045 Move X2, X31
	046 Call String.get_Chars, X0, X1
	047 Move W1, W0
	048 Call TMP_Text.HexToInt, X0, X1
	049 Move W25, W0
	050 Add W1, W20, 5
	051 Move X0, X19
	052 Move X2, X31
	053 Call String.get_Chars, X0, X1
	054 Move W1, W0
	055 Call TMP_Text.HexToInt, X0, X1
	056 Move W26, W0
	057 Add W1, W20, 6
	058 Move X0, X19
	059 Move X2, X31
	060 Call String.get_Chars, X0, X1
	061 Move W1, W0
	062 Call TMP_Text.HexToInt, X0, X1
	063 Move W27, W0
	064 Add W1, W20, 7
	065 Move X0, X19
	066 Move X2, X31
	067 Call String.get_Chars, X0, X1
	068 Move W1, W0
	069 Call TMP_Text.HexToInt, X0, X1
	070 Move W8, W22
	071 ShiftRight W8, 8
	072 And W8, W8, 127
	073 Add W8, W8, W21
	074 Add W8, W8, W23
	075 Add W8, W8, W24
	076 Add W8, W8, W25
	077 Add W8, W8, W26
	078 Move X20, [X31+64]
	079 Move X19, [X31+72]
	080 Move X22, [X31+48]
	081 Move X21, [X31+56]
	082 Move X24, [X31+32]
	083 Move X23, [X31+40]
	084 Move X26, [X31+16]
	085 Move X25, [X31+24]
	086 Add W8, W8, W27
	087 Add W0, W8, W0
	088 Move X30, [X31+80]
	089 Move X27, [X31+88]
	090 Return X0
	091 Call 0x1C17F20

Method: System.Int32 GetUTF32(System.Int32[] text, System.Int32 i)

Disassembly:
	0x03AFDC40 LDR V0, [X19, X8, LSL]
	0x03AFDC44 ADD X8, X19, 0x23C
	0x03AFDC48 MOV V1.16B, V8.16B
	0x03AFDC4C MOV W2, W31
	0x03AFDC50 STR S0, [X31 + 0xC]
	0x03AFDC54 LDR V0, [X19 + 0x250]
	0x03AFDC58 MOV W3, W31
	0x03AFDC5C UNIMPLEMENTED
	0x03AFDC60 STR D0, [X8]
	0x03AFDC64 LDR X8, [X19]
	0x03AFDC68 STR W31, [X19 + 0x2D4]
	0x03AFDC6C STR W31, [X19 + 0x244]
	0x03AFDC70 MOV V0.16B, V9.16B
	0x03AFDC74 LDR X9, [X8 + 0x868]
	0x03AFDC78 LDR X4, [X8 + 0x870]
	0x03AFDC7C BLR X9
	0x03AFDC80 MOV V10.16B, V0.16B
	0x03AFDC84 MOV X0, X19
	0x03AFDC88 MOV V0.16B, V9.16B
	0x03AFDC8C MOV V1.16B, V8.16B
	0x03AFDC90 BL 0x3AFDA14
	0x03AFDC94 LDP X30, X19, [X31 + 0x20]
	0x03AFDC98 LDP D9, D8, [X31 + 0x10]
	0x03AFDC9C MOV V1.16B, V0.16B
	0x03AFDCA0 MOV V0.16B, V10.16B
	0x03AFDCA4 LDR V10, [X31], #0x30
	0x03AFDCA8 RET
	0x03AFDCAC SUB X31, X31, 0x30
	0x03AFDCB0 STR X30, [X31 + 0x20]
	0x03AFDCB4 ADD X8, X31, 0x8
	0x03AFDCB8 BL 0x3AF9020
	0x03AFDCBC LDP S0, S1, [X31 + 0x14]
	0x03AFDCC0 LDR X30, [X31 + 0x20]
	0x03AFDCC4 FADD S0, S0, S0
	0x03AFDCC8 FADD S1, S1, S1
	0x03AFDCCC ADD X31, X31, 0x30
	0x03AFDCD0 RET
	0x03AFDCD4 SUB X31, X31, 0x30
	0x03AFDCD8 STR X30, [X31 + 0x20]
	0x03AFDCDC AND W1, W1, 0x1
	0x03AFDCE0 ADD X8, X31, 0x8
	0x03AFDCE4 BL 0x3AFDD00
	0x03AFDCE8 LDP S0, S1, [X31 + 0x14]
	0x03AFDCEC LDR X30, [X31 + 0x20]
	0x03AFDCF0 FADD S0, S0, S0
	0x03AFDCF4 FADD S1, S1, S1
	0x03AFDCF8 ADD X31, X31, 0x30
	0x03AFDCFC RET
	0x03AFDD00 SUB X31, X31, 0x60
	0x03AFDD04 STP D11, D10, [X31 + 0x10]
	0x03AFDD08 STP D9, D8, [X31 + 0x20]
	0x03AFDD0C STP X30, X23, [X31 + 0x30]
	0x03AFDD10 STP X22, X21, [X31 + 0x40]
	0x03AFDD14 STP X20, X19, [X31 + 0x50]
	0x03AFDD18 ADRP X22, 0x8E5000
	0x03AFDD1C LDRB W9, [X22 + 0x656]
	0x03AFDD20 MOV W20, W1
	0x03AFDD24 MOV X21, X0
	0x03AFDD28 MOV X19, X8
	0x03AFDD2C TBNZ X9, 0x0, 0x3AFDD50
	0x03AFDD30 ADRP X0, 0x65B000
	0x03AFDD34 LDR X0, [X0 + 0x878]
	0x03AFDD38 BL 0x1C16CF4
	0x03AFDD3C ADRP X0, 0x65B000
	0x03AFDD40 LDR X0, [X0 + 0x3E8]
	0x03AFDD44 BL 0x1C16CF4
	0x03AFDD48 MOVZ W8, 0x1
	0x03AFDD4C STRB W8, [X22 + 0x656]
	0x03AFDD50 STP X31, X31, [X31]
	0x03AFDD54 LDR X8, [X21 + 0x368]
	0x03AFDD58 CBZ X8, 0x3AFDEDC
	0x03AFDD5C ADRP X23, 0x65B000
	0x03AFDD60 LDR X23, [X23 + 0x3E8]
	0x03AFDD64 ADRP X22, 0x65B000
	0x03AFDD68 LDR X0, [X23]
	0x03AFDD6C LDR W8, [X0 + 0xE0]
	0x03AFDD70 LDR X22, [X22 + 0x878]
	0x03AFDD74 CBNZ W8, 0x3AFDD80
	0x03AFDD78 BL 0x1C16DFC
	0x03AFDD7C LDR X0, [X23]
	0x03AFDD80 LDR X8, [X0 + 0xB8]
	0x03AFDD84 LDR X0, [X22]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Compare X1, 0
	012 JumpIfEqual {87}
	013 Move W9, [X1+24]
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Add W8, W2, 1
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Add W10, W2, 2
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Add W11, W2, 3
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Add W13, W2, 4
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Add W14, W2, 5
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Add W12, W2, 6
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Add W26, W2, 7
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Add X27, X1, 32
	030 Add X9, X1, W2
	031 Add X8, X1, W8
	032 Add X10, X1, W10
	033 Add X11, X1, W11
	034 Add X13, X1, W13
	035 Add X14, X1, W14
	036 Move W1, [X27]
	037 Move W19, [X9+32]
	038 Move W20, [X8+32]
	039 Move W21, [X10+32]
	040 Move W22, [X11+32]
	041 Move W23, [X13+32]
	042 Move W24, [X14+32]
	043 Call TMP_Text.HexToInt, X0, X1
	044 Move W1, W24
	045 Move W25, W0
	046 Call TMP_Text.HexToInt, X0, X1
	047 Move W1, W23
	048 Move W24, W0
	049 Call TMP_Text.HexToInt, X0, X1
	050 Move W1, W22
	051 Move W23, W0
	052 Call TMP_Text.HexToInt, X0, X1
	053 Move W1, W21
	054 Move W22, W0
	055 Call TMP_Text.HexToInt, X0, X1
	056 Move W1, W20
	057 Move W21, W0
	058 Call TMP_Text.HexToInt, X0, X1
	059 Move W1, W19
	060 Move W20, W0
	061 Call TMP_Text.HexToInt, X0, X1
	062 Move W1, [X27]
	063 Move W19, W0
	064 Call TMP_Text.HexToInt, X0, X1
	065 Move W8, W24
	066 ShiftRight W8, 24
	067 And W8, W8, 0x7FFFFF
	068 Add W8, W8, W25
	069 Add W8, W8, W23
	070 Add W8, W8, W22
	071 Add W8, W8, W21
	072 Add W8, W8, W20
	073 Add W8, W8, W19
	074 Move X20, [X31+64]
	075 Move X19, [X31+72]
	076 Move X22, [X31+48]
	077 Move X21, [X31+56]
	078 Move X24, [X31+32]
	079 Move X23, [X31+40]
	080 Move X26, [X31+16]
	081 Move X25, [X31+24]
	082 Add W0, W8, W0
	083 Move X30, [X31+80]
	084 Move X27, [X31+88]
	085 Return X0
	086 Call 0x1C17F28
	087 Call 0x1C17F20

Method: System.Int32 GetUTF32(System.UInt32[] text, System.Int32 i)

Disassembly:
	0x03B0C8DC STR W0, [X19 + 0x4EC]
	0x03B0C8E0 LDR X0, [X29]
	0x03B0C8E4 MOVZ W1, 0x10
	0x03B0C8E8 BL 0x1C16D6C
	0x03B0C8EC LDR X2, [X28]
	0x03B0C8F0 MOV X1, X0
	0x03B0C8F4 MOVI V0.2D, 0x0
	0x03B0C8F8 ADD X0, X31, 0x190
	0x03B0C8FC STP V0, V0, [X31 + 0x190]
	0x03B0C900 BL 0x2670DC0
	0x03B0C904 LDP V1, V0, [X31 + 0x190]
	0x03B0C908 MOVZ W1, 0x10
	0x03B0C90C STR V0, [X19 + 0x50]
	0x03B0C910 STR V1, [X19 + 0x4F]
	0x03B0C914 LDR X0, [X29]
	0x03B0C918 BL 0x1C16D6C
	0x03B0C91C LDR X2, [X28]
	0x03B0C920 MOV X1, X0
	0x03B0C924 MOVI V0.2D, 0x0
	0x03B0C928 ADD X0, X31, 0x170
	0x03B0C92C STP V0, V0, [X31 + 0x170]
	0x03B0C930 BL 0x2670DC0
	0x03B0C934 LDP V1, V0, [X31 + 0x170]
	0x03B0C938 MOVZ W1, 0x10
	0x03B0C93C STR V0, [X19 + 0x52]
	0x03B0C940 STR V1, [X19 + 0x51]
	0x03B0C944 LDR X0, [X29]
	0x03B0C948 BL 0x1C16D6C
	0x03B0C94C LDR X2, [X28]
	0x03B0C950 MOV X1, X0
	0x03B0C954 MOVI V0.2D, 0x0
	0x03B0C958 ADD X0, X31, 0x150
	0x03B0C95C STP V0, V0, [X31 + 0x150]
	0x03B0C960 BL 0x2670DC0
	0x03B0C964 LDP V1, V0, [X31 + 0x150]
	0x03B0C968 MOVZ W1, 0x10
	0x03B0C96C STR V0, [X19 + 0x54]
	0x03B0C970 STR V1, [X19 + 0x53]
	0x03B0C974 LDR X0, [X23]
	0x03B0C978 BL 0x1C16D6C
	0x03B0C97C LDR X2, [X22]
	0x03B0C980 MOV X1, X0
	0x03B0C984 MOVI V0.2D, 0x0
	0x03B0C988 ADD X0, X31, 0x1D0
	0x03B0C98C STP V0, V0, [X31 + 0x1E0]
	0x03B0C990 STR V0, [X31 + 0x1D]
	0x03B0C994 BL 0x267130C
	0x03B0C998 LDP V1, V0, [X31 + 0x1E0]
	0x03B0C99C LDR V2, [X31 + 0x1D]
	0x03B0C9A0 MOVZ W1, 0x10
	0x03B0C9A4 STR V0, [X19 + 0x57]
	0x03B0C9A8 STR V1, [X19 + 0x56]
	0x03B0C9AC STR V2, [X19 + 0x55]
	0x03B0C9B0 LDR X0, [X21]
	0x03B0C9B4 BL 0x1C16D6C
	0x03B0C9B8 LDR X2, [X24]
	0x03B0C9BC MOV X1, X0
	0x03B0C9C0 MOVI V0.2D, 0x0
	0x03B0C9C4 ADD X0, X31, 0x120
	0x03B0C9C8 STR X31, [X31 + 0x140]
	0x03B0C9CC STP V0, V0, [X31 + 0x120]
	0x03B0C9D0 BL 0x2672CA0
	0x03B0C9D4 LDR X8, [X31 + 0x140]
	0x03B0C9D8 LDP V1, V0, [X31 + 0x120]
	0x03B0C9DC ADD X9, X19, 0x588
	0x03B0C9E0 MOVZ W1, 0x8
	0x03B0C9E4 STR X8, [X9 + 0x20]
	0x03B0C9E8 STP V1, V0, [X9]
	0x03B0C9EC ADRP X8, 0x64D000
	0x03B0C9F0 LDR X8, [X8 + 0x348]
	0x03B0C9F4 LDR X0, [X8]
	0x03B0C9F8 BL 0x1C16D6C
	0x03B0C9FC STR X0, [X19 + 0x5C0]
	0x03B0CA00 LDR X0, [X27]
	0x03B0CA04 MOVZ W1, 0x10
	0x03B0CA08 BL 0x1C16D6C
	0x03B0CA0C LDR X2, [X26]
	0x03B0CA10 MOV X1, X0
	0x03B0CA14 MOVI V0.2D, 0x0
	0x03B0CA18 ADD X0, X31, 0x100
	0x03B0CA1C STP V0, V0, [X31 + 0x100]
	0x03B0CA20 BL 0x2671A18

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Compare X1, 0
	012 JumpIfEqual {87}
	013 Move W9, [X1+24]
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Add W8, W2, 1
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Add W10, W2, 2
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Add W11, W2, 3
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Add W13, W2, 4
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Add W14, W2, 5
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Add W12, W2, 6
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Add W26, W2, 7
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Add X27, X1, 32
	030 Add X9, X1, W2
	031 Add X8, X1, W8
	032 Add X10, X1, W10
	033 Add X11, X1, W11
	034 Add X13, X1, W13
	035 Add X14, X1, W14
	036 Move W1, [X27]
	037 Move W19, [X9+32]
	038 Move W20, [X8+32]
	039 Move W21, [X10+32]
	040 Move W22, [X11+32]
	041 Move W23, [X13+32]
	042 Move W24, [X14+32]
	043 Call TMP_Text.HexToInt, X0, X1
	044 Move W1, W24
	045 Move W25, W0
	046 Call TMP_Text.HexToInt, X0, X1
	047 Move W1, W23
	048 Move W24, W0
	049 Call TMP_Text.HexToInt, X0, X1
	050 Move W1, W22
	051 Move W23, W0
	052 Call TMP_Text.HexToInt, X0, X1
	053 Move W1, W21
	054 Move W22, W0
	055 Call TMP_Text.HexToInt, X0, X1
	056 Move W1, W20
	057 Move W21, W0
	058 Call TMP_Text.HexToInt, X0, X1
	059 Move W1, W19
	060 Move W20, W0
	061 Call TMP_Text.HexToInt, X0, X1
	062 Move W1, [X27]
	063 Move W19, W0
	064 Call TMP_Text.HexToInt, X0, X1
	065 Move W8, W24
	066 ShiftRight W8, 24
	067 And W8, W8, 0x7FFFFF
	068 Add W8, W8, W25
	069 Add W8, W8, W23
	070 Add W8, W8, W22
	071 Add W8, W8, W21
	072 Add W8, W8, W20
	073 Add W8, W8, W19
	074 Move X20, [X31+64]
	075 Move X19, [X31+72]
	076 Move X22, [X31+48]
	077 Move X21, [X31+56]
	078 Move X24, [X31+32]
	079 Move X23, [X31+40]
	080 Move X26, [X31+16]
	081 Move X25, [X31+24]
	082 Add W0, W8, W0
	083 Move X30, [X31+80]
	084 Move X27, [X31+88]
	085 Return X0
	086 Call 0x1C17F28
	087 Call 0x1C17F20

Method: System.Int32 GetUTF32(System.Text.StringBuilder text, System.Int32 i)

Disassembly:
	0x03B0CA24 LDP V1, V0, [X31 + 0x100]
	0x03B0CA28 MOVZ W1, 0x10
	0x03B0CA2C STR V0, [X19 + 0x5E]
	0x03B0CA30 STR V1, [X19 + 0x5D]
	0x03B0CA34 LDR X0, [X27]
	0x03B0CA38 BL 0x1C16D6C
	0x03B0CA3C LDR X2, [X26]
	0x03B0CA40 MOV X1, X0
	0x03B0CA44 MOVI V0.2D, 0x0
	0x03B0CA48 ADD X0, X31, 0xE0
	0x03B0CA4C STP V0, V0, [X31 + 0xE0]
	0x03B0CA50 BL 0x2671A18
	0x03B0CA54 LDP V1, V0, [X31 + 0xE0]
	0x03B0CA58 ADD X8, X19, 0x5F8
	0x03B0CA5C MOVZ W1, 0x10
	0x03B0CA60 STP V1, V0, [X8]
	0x03B0CA64 ADRP X8, 0x5E7000
	0x03B0CA68 LDR X8, [X8 + 0x638]
	0x03B0CA6C LDR X0, [X8]
	0x03B0CA70 BL 0x1C16D6C
	0x03B0CA74 LDR X2, [X20]
	0x03B0CA78 MOV X1, X0
	0x03B0CA7C MOVI V0.2D, 0x0
	0x03B0CA80 ADD X0, X31, 0xC0
	0x03B0CA84 STP V0, V0, [X31 + 0xC0]
	0x03B0CA88 BL 0x26731EC
	0x03B0CA8C LDP V1, V0, [X31 + 0xC0]
	0x03B0CA90 ADD X0, X31, 0xB0
	0x03B0CA94 MOVZ W1, 0x4
	0x03B0CA98 MOV X2, X31
	0x03B0CA9C STR V0, [X19 + 0x63]
	0x03B0CAA0 STR V1, [X19 + 0x62]
	0x03B0CAA4 STP X31, X31, [X31 + 0xB0]
	0x03B0CAA8 BL 0x3B1BCE4
	0x03B0CAAC LDR V0, [X31 + 0xB]
	0x03B0CAB0 ADRP X8, 0x618000
	0x03B0CAB4 MOVZ W1, 0xA
	0x03B0CAB8 STR V0, [X19 + 0x6B]
	0x03B0CABC LDR X8, [X8 + 0x828]
	0x03B0CAC0 LDR X0, [X8]
	0x03B0CAC4 BL 0x1C16D6C
	0x03B0CAC8 MOV X20, X0
	0x03B0CACC ADD X0, X31, 0xA0
	0x03B0CAD0 MOVZ W1, 0x5
	0x03B0CAD4 MOVZ W5, 0x1
	0x03B0CAD8 MOV W2, W31
	0x03B0CADC MOV W3, W31
	0x03B0CAE0 MOV W4, W31
	0x03B0CAE4 MOV X6, X31
	0x03B0CAE8 STP X31, X31, [X31 + 0xA0]
	0x03B0CAEC BL 0x33D6CEC
	0x03B0CAF0 CBZ X20, 0x3B0CD30
	0x03B0CAF4 LDR W8, [X20 + 0x18]
	0x03B0CAF8 CBZ W8, 0x3B0CD2C
	0x03B0CAFC LDR V0, [X31 + 0xA]
	0x03B0CB00 ADD X0, X31, 0x90
	0x03B0CB04 MOVZ W1, 0x5
	0x03B0CB08 MOVZ W5, 0x2
	0x03B0CB0C MOV W2, W31
	0x03B0CB10 MOV W3, W31
	0x03B0CB14 MOV W4, W31
	0x03B0CB18 MOV X6, X31
	0x03B0CB1C STR V0, [X20 + 0x2]
	0x03B0CB20 STP X31, X31, [X31 + 0x90]
	0x03B0CB24 BL 0x33D6CEC
	0x03B0CB28 LDR W8, [X20 + 0x18]
	0x03B0CB2C CMP W8, 0x1
	0x03B0CB30 B.LS 0x3B0CD2C
	0x03B0CB34 LDR V0, [X31 + 0x9]
	0x03B0CB38 ADD X0, X31, 0x80
	0x03B0CB3C MOVZ W1, 0x5
	0x03B0CB40 MOVZ W5, 0x3
	0x03B0CB44 MOV W2, W31
	0x03B0CB48 MOV W3, W31
	0x03B0CB4C MOV W4, W31
	0x03B0CB50 MOV X6, X31
	0x03B0CB54 STR V0, [X20 + 0x3]
	0x03B0CB58 STP X31, X31, [X31 + 0x80]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Compare X1, 0
	012 JumpIfEqual {91}
	013 Move W20, W2
	014 Move X19, X1
	015 Move X0, X1
	016 Move W1, W2
	017 Move X2, X31
	018 Call StringBuilder.get_Chars, X0, X1
	019 Move W1, W0
	020 Call TMP_Text.HexToInt, X0, X1
	021 Move W21, W0
	022 Add W1, W20, 1
	023 Move X0, X19
	024 Move X2, X31
	025 Call StringBuilder.get_Chars, X0, X1
	026 Move W1, W0
	027 Call TMP_Text.HexToInt, X0, X1
	028 Move W22, W0
	029 Add W1, W20, 2
	030 Move X0, X19
	031 Move X2, X31
	032 Call StringBuilder.get_Chars, X0, X1
	033 Move W1, W0
	034 Call TMP_Text.HexToInt, X0, X1
	035 Move W23, W0
	036 Add W1, W20, 3
	037 Move X0, X19
	038 Move X2, X31
	039 Call StringBuilder.get_Chars, X0, X1
	040 Move W1, W0
	041 Call TMP_Text.HexToInt, X0, X1
	042 Move W24, W0
	043 Add W1, W20, 4
	044 Move X0, X19
	045 Move X2, X31
	046 Call StringBuilder.get_Chars, X0, X1
	047 Move W1, W0
	048 Call TMP_Text.HexToInt, X0, X1
	049 Move W25, W0
	050 Add W1, W20, 5
	051 Move X0, X19
	052 Move X2, X31
	053 Call StringBuilder.get_Chars, X0, X1
	054 Move W1, W0
	055 Call TMP_Text.HexToInt, X0, X1
	056 Move W26, W0
	057 Add W1, W20, 6
	058 Move X0, X19
	059 Move X2, X31
	060 Call StringBuilder.get_Chars, X0, X1
	061 Move W1, W0
	062 Call TMP_Text.HexToInt, X0, X1
	063 Move W27, W0
	064 Add W1, W20, 7
	065 Move X0, X19
	066 Move X2, X31
	067 Call StringBuilder.get_Chars, X0, X1
	068 Move W1, W0
	069 Call TMP_Text.HexToInt, X0, X1
	070 Move W8, W22
	071 ShiftRight W8, 8
	072 And W8, W8, 127
	073 Add W8, W8, W21
	074 Add W8, W8, W23
	075 Add W8, W8, W24
	076 Add W8, W8, W25
	077 Add W8, W8, W26
	078 Move X20, [X31+64]
	079 Move X19, [X31+72]
	080 Move X22, [X31+48]
	081 Move X21, [X31+56]
	082 Move X24, [X31+32]
	083 Move X23, [X31+40]
	084 Move X26, [X31+16]
	085 Move X25, [X31+24]
	086 Add W8, W8, W27
	087 Add W0, W8, W0
	088 Move X30, [X31+80]
	089 Move X27, [X31+88]
	090 Return X0
	091 Call 0x1C17F20

Method: System.Int32 GetUTF32(TMPro.TMP_Text/TextBackingContainer text, System.Int32 i)

Disassembly:
	0x03AFC45C CMP W27, 0x2
	0x03AFC460 B.NE 0x3AFC550
	0x03AFC464 CMP W2, 0x2D
	0x03AFC468 B.LE 0x3AFC52C
	0x03AFC46C CMP W2, 0x2E
	0x03AFC470 B.EQ 0x3AFC498
	0x03AFC474 CMP W2, 0x3A
	0x03AFC478 B.EQ 0x3AFC53C
	0x03AFC47C CMP W2, 0x30
	0x03AFC480 B.NE 0x3AFC544
	0x03AFC484 ADD W24, W24, 0x1
	0x03AFC488 B 0x3AFC53C
	0x03AFC48C CMP W2, 0x30
	0x03AFC490 B.NE 0x3AFC550
	0x03AFC494 ADD W23, W23, 0x1
	0x03AFC498 MOVZ W27, 0x3
	0x03AFC49C B 0x3AFC56C
	0x03AFC4A0 ADD X3, X31, 0x4C
	0x03AFC4A4 MOV X0, X19
	0x03AFC4A8 MOV V0.16B, V14.16B
	0x03AFC4AC B 0x3AFC50C
	0x03AFC4B0 ADD X3, X31, 0x4C
	0x03AFC4B4 MOV X0, X19
	0x03AFC4B8 MOV V0.16B, V13.16B
	0x03AFC4BC B 0x3AFC50C
	0x03AFC4C0 ADD X3, X31, 0x4C
	0x03AFC4C4 MOV X0, X19
	0x03AFC4C8 MOV V0.16B, V12.16B
	0x03AFC4CC B 0x3AFC50C
	0x03AFC4D0 ADD X3, X31, 0x4C
	0x03AFC4D4 MOV X0, X19
	0x03AFC4D8 MOV V0.16B, V11.16B
	0x03AFC4DC B 0x3AFC50C
	0x03AFC4E0 ADD X3, X31, 0x4C
	0x03AFC4E4 MOV X0, X19
	0x03AFC4E8 MOV V0.16B, V10.16B
	0x03AFC4EC B 0x3AFC50C
	0x03AFC4F0 ADD X3, X31, 0x4C
	0x03AFC4F4 MOV X0, X19
	0x03AFC4F8 MOV V0.16B, V9.16B
	0x03AFC4FC B 0x3AFC50C
	0x03AFC500 ADD X3, X31, 0x4C
	0x03AFC504 MOV X0, X19
	0x03AFC508 MOV V0.16B, V8.16B
	0x03AFC50C MOV W1, W24
	0x03AFC510 MOV W2, W23
	0x03AFC514 BL 0x3AFC680
	0x03AFC518 MOV W27, W31
	0x03AFC51C MOV W23, W31
	0x03AFC520 MOV W24, W31
	0x03AFC524 MOV W28, W31
	0x03AFC528 B 0x3AFC56C
	0x03AFC52C CMP W2, 0x23
	0x03AFC530 B.EQ 0x3AFC53C
	0x03AFC534 CMP W2, 0x2C
	0x03AFC538 B.NE 0x3AFC544
	0x03AFC53C MOVZ W27, 0x2
	0x03AFC540 B 0x3AFC56C
	0x03AFC544 SUB W9, W2, 0x31
	0x03AFC548 CMP W9, 0x8
	0x03AFC54C B.LS 0x3AFC580
	0x03AFC550 LDR W25, [X31 + 0x4C]
	0x03AFC554 MOV X0, X21
	0x03AFC558 MOV X3, X31
	0x03AFC55C MOV W1, W25
	0x03AFC560 BL 0x3B1BC20
	0x03AFC564 ADD W8, W25, 0x1
	0x03AFC568 STR W8, [X31 + 0x4C]
	0x03AFC56C LDR W8, [X20 + 0x10]
	0x03AFC570 ADD W22, W22, 0x1
	0x03AFC574 CMP W22, W8
	0x03AFC578 B.LT 0x3AFC3D8
	0x03AFC57C B 0x3AFC58C
	0x03AFC580 MOVZ W27, 0x2
	0x03AFC584 MOV W23, W8
	0x03AFC588 B 0x3AFC56C
	0x03AFC58C LDR W20, [X31 + 0x4C]
	0x03AFC590 MOV X0, X21

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+8], X2
	003 Move [X31+16], X30
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move [X31], X1
	013 Add X0, X31, 0
	014 Move W1, W3
	015 Move X2, X31
	016 Move W19, W3
	017 Call TextBackingContainer.get_Item, X0, X1
	018 Move W1, W0
	019 Call TMP_Text.HexToInt, X0, X1
	020 Move W20, W0
	021 Add W1, W19, 1
	022 Add X0, X31, 0
	023 Move X2, X31
	024 Call TextBackingContainer.get_Item, X0, X1
	025 Move W1, W0
	026 Call TMP_Text.HexToInt, X0, X1
	027 Move W21, W0
	028 Add W1, W19, 2
	029 Add X0, X31, 0
	030 Move X2, X31
	031 Call TextBackingContainer.get_Item, X0, X1
	032 Move W1, W0
	033 Call TMP_Text.HexToInt, X0, X1
	034 Move W22, W0
	035 Add W1, W19, 3
	036 Add X0, X31, 0
	037 Move X2, X31
	038 Call TextBackingContainer.get_Item, X0, X1
	039 Move W1, W0
	040 Call TMP_Text.HexToInt, X0, X1
	041 Move W23, W0
	042 Add W1, W19, 4
	043 Add X0, X31, 0
	044 Move X2, X31
	045 Call TextBackingContainer.get_Item, X0, X1
	046 Move W1, W0
	047 Call TMP_Text.HexToInt, X0, X1
	048 Move W24, W0
	049 Add W1, W19, 5
	050 Add X0, X31, 0
	051 Move X2, X31
	052 Call TextBackingContainer.get_Item, X0, X1
	053 Move W1, W0
	054 Call TMP_Text.HexToInt, X0, X1
	055 Move W25, W0
	056 Add W1, W19, 6
	057 Add X0, X31, 0
	058 Move X2, X31
	059 Call TextBackingContainer.get_Item, X0, X1
	060 Move W1, W0
	061 Call TMP_Text.HexToInt, X0, X1
	062 Move W26, W0
	063 Add W1, W19, 7
	064 Add X0, X31, 0
	065 Move X2, X31
	066 Call TextBackingContainer.get_Item, X0, X1
	067 Move W1, W0
	068 Call TMP_Text.HexToInt, X0, X1
	069 Move W8, W21
	070 ShiftRight W8, 8
	071 And W8, W8, 127
	072 Add W8, W8, W20
	073 Add W8, W8, W22
	074 Add W8, W8, W23
	075 Add W8, W8, W24
	076 Add W8, W8, W25
	077 Add W8, W8, W26
	078 Move X20, [X31+80]
	079 Move X19, [X31+88]
	080 Move X22, [X31+64]
	081 Move X21, [X31+72]
	082 Move X24, [X31+48]
	083 Move X23, [X31+56]
	084 Move X26, [X31+32]
	085 Move X25, [X31+40]
	086 Move X30, [X31+16]
	087 Add W0, W8, W0
	088 Add X31, X31, 96
	089 Return X0

Method: UnityEngine.Color32 HexCharsToColor(System.Char[] hexChars, System.Int32 tagCount)

Disassembly:
	0x03B0CB5C BL 0x33D6CEC
	0x03B0CB60 LDR W8, [X20 + 0x18]
	0x03B0CB64 CMP W8, 0x2
	0x03B0CB68 B.LS 0x3B0CD2C
	0x03B0CB6C LDR V0, [X31 + 0x8]
	0x03B0CB70 ADD X0, X31, 0x70
	0x03B0CB74 MOVZ W1, 0x5
	0x03B0CB78 MOVZ W5, 0x4
	0x03B0CB7C MOV W2, W31
	0x03B0CB80 MOV W3, W31
	0x03B0CB84 MOV W4, W31
	0x03B0CB88 MOV X6, X31
	0x03B0CB8C STR V0, [X20 + 0x4]
	0x03B0CB90 STP X31, X31, [X31 + 0x70]
	0x03B0CB94 BL 0x33D6CEC
	0x03B0CB98 LDR W8, [X20 + 0x18]
	0x03B0CB9C CMP W8, 0x3
	0x03B0CBA0 B.LS 0x3B0CD2C
	0x03B0CBA4 LDR V0, [X31 + 0x7]
	0x03B0CBA8 ADD X0, X31, 0x60
	0x03B0CBAC MOVZ W1, 0x5
	0x03B0CBB0 MOVZ W5, 0x5
	0x03B0CBB4 MOV W2, W31
	0x03B0CBB8 MOV W3, W31
	0x03B0CBBC MOV W4, W31
	0x03B0CBC0 MOV X6, X31
	0x03B0CBC4 STR V0, [X20 + 0x5]
	0x03B0CBC8 STP X31, X31, [X31 + 0x60]
	0x03B0CBCC BL 0x33D6CEC
	0x03B0CBD0 LDR W8, [X20 + 0x18]
	0x03B0CBD4 CMP W8, 0x4
	0x03B0CBD8 B.LS 0x3B0CD2C
	0x03B0CBDC LDR V0, [X31 + 0x6]
	0x03B0CBE0 ADD X0, X31, 0x50
	0x03B0CBE4 MOVZ W1, 0x5
	0x03B0CBE8 MOVZ W5, 0x6
	0x03B0CBEC MOV W2, W31
	0x03B0CBF0 MOV W3, W31
	0x03B0CBF4 MOV W4, W31
	0x03B0CBF8 MOV X6, X31
	0x03B0CBFC STR V0, [X20 + 0x6]
	0x03B0CC00 STP X31, X31, [X31 + 0x50]
	0x03B0CC04 BL 0x33D6CEC
	0x03B0CC08 LDR W8, [X20 + 0x18]
	0x03B0CC0C CMP W8, 0x5
	0x03B0CC10 B.LS 0x3B0CD2C
	0x03B0CC14 LDR V0, [X31 + 0x5]
	0x03B0CC18 ADD X0, X31, 0x40
	0x03B0CC1C MOVZ W1, 0x5
	0x03B0CC20 MOVZ W5, 0x7
	0x03B0CC24 MOV W2, W31
	0x03B0CC28 MOV W3, W31
	0x03B0CC2C MOV W4, W31
	0x03B0CC30 MOV X6, X31
	0x03B0CC34 STR V0, [X20 + 0x7]
	0x03B0CC38 STP X31, X31, [X31 + 0x40]
	0x03B0CC3C BL 0x33D6CEC
	0x03B0CC40 LDR W8, [X20 + 0x18]
	0x03B0CC44 CMP W8, 0x6
	0x03B0CC48 B.LS 0x3B0CD2C
	0x03B0CC4C LDR V0, [X31 + 0x4]
	0x03B0CC50 ADD X0, X31, 0x30
	0x03B0CC54 MOVZ W1, 0x5
	0x03B0CC58 MOVZ W5, 0x8
	0x03B0CC5C MOV W2, W31
	0x03B0CC60 MOV W3, W31
	0x03B0CC64 MOV W4, W31
	0x03B0CC68 MOV X6, X31
	0x03B0CC6C STR V0, [X20 + 0x8]
	0x03B0CC70 STP X31, X31, [X31 + 0x30]
	0x03B0CC74 BL 0x33D6CEC
	0x03B0CC78 LDR W8, [X20 + 0x18]
	0x03B0CC7C CMP W8, 0x7
	0x03B0CC80 B.LS 0x3B0CD2C
	0x03B0CC84 LDR V0, [X31 + 0x3]
	0x03B0CC88 ADD X0, X31, 0x20
	0x03B0CC8C MOVZ W1, 0x5
	0x03B0CC90 MOVZ W5, 0x9
	0x03B0CC94 MOV W2, W31
	0x03B0CC98 MOV W3, W31
	0x03B0CC9C MOV W4, W31
	0x03B0CCA0 MOV X6, X31
	0x03B0CCA4 STR V0, [X20 + 0x9]
	0x03B0CCA8 STP X31, X31, [X31 + 0x20]
	0x03B0CCAC BL 0x33D6CEC
	0x03B0CCB0 LDR W8, [X20 + 0x18]
	0x03B0CCB4 CMP W8, 0x8
	0x03B0CCB8 B.LS 0x3B0CD2C
	0x03B0CCBC LDR V0, [X31 + 0x2]
	0x03B0CCC0 ADD X0, X31, 0x10
	0x03B0CCC4 MOVZ W1, 0x5
	0x03B0CCC8 MOVZ W5, 0xA
	0x03B0CCCC MOV W2, W31
	0x03B0CCD0 MOV W3, W31
	0x03B0CCD4 MOV W4, W31
	0x03B0CCD8 MOV X6, X31
	0x03B0CCDC STR V0, [X20 + 0xA]
	0x03B0CCE0 STP X31, X31, [X31 + 0x10]
	0x03B0CCE4 BL 0x33D6CEC
	0x03B0CCE8 LDR W8, [X20 + 0x18]
	0x03B0CCEC CMP W8, 0x9
	0x03B0CCF0 B.LS 0x3B0CD2C
	0x03B0CCF4 LDR V0, [X31 + 0x1]
	0x03B0CCF8 MOV X0, X19
	0x03B0CCFC MOV X1, X31
	0x03B0CD00 STR V0, [X20 + 0xB]
	0x03B0CD04 STR X20, [X19 + 0x6C0]
	0x03B0CD08 BL 0x3E37FD0
	0x03B0CD0C ADD X31, X31, 0x210
	0x03B0CD10 LDP X20, X19, [X31 + 0x50]
	0x03B0CD14 LDP X22, X21, [X31 + 0x40]
	0x03B0CD18 LDP X24, X23, [X31 + 0x30]
	0x03B0CD1C LDP X26, X25, [X31 + 0x20]
	0x03B0CD20 LDP X28, X27, [X31 + 0x10]
	0x03B0CD24 LDP X29, X30, [X31], #0x60
	0x03B0CD28 RET
	0x03B0CD2C BL 0x1C16F28
	0x03B0CD30 BL 0x1C16F20
	0x03B0CD34 STP X29, X30, [X31 - 0x60]!
	0x03B0CD38 STP X28, X27, [X31 + 0x10]
	0x03B0CD3C STP X26, X25, [X31 + 0x20]
	0x03B0CD40 STP X24, X23, [X31 + 0x30]
	0x03B0CD44 STP X22, X21, [X31 + 0x40]
	0x03B0CD48 STP X20, X19, [X31 + 0x50]
	0x03B0CD4C SUB X31, X31, 0x400
	0x03B0CD50 ADRP X22, 0x8D6000
	0x03B0CD54 ADRP X29, 0x64D000
	0x03B0CD58 ADRP X20, 0x64C000
	0x03B0CD5C ADRP X21, 0x5F1000
	0x03B0CD60 ADRP X19, 0x5F1000
	0x03B0CD64 ADRP X28, 0x64D000
	0x03B0CD68 ADRP X26, 0x5F0000
	0x03B0CD6C ADRP X25, 0x64D000
	0x03B0CD70 ADRP X24, 0x5E7000
	0x03B0CD74 ADRP X23, 0x64D000
	0x03B0CD78 LDR X29, [X29 + 0x3A0]
	0x03B0CD7C LDR X20, [X20 + 0x3E8]
	0x03B0CD80 LDR X21, [X21 + 0x888]
	0x03B0CD84 LDR X19, [X19 + 0x890]
	0x03B0CD88 LDR X28, [X28 + 0x3A8]
	0x03B0CD8C LDR X26, [X26 + 0x8D8]
	0x03B0CD90 LDRB W8, [X22 + 0x66C]
	0x03B0CD94 LDR X25, [X25 + 0x3B0]
	0x03B0CD98 LDR X24, [X24 + 0x638]
	0x03B0CD9C LDR X23, [X23 + 0x3B8]
	0x03B0CDA0 ADD X27, X31, 0x3A0
	0x03B0CDA4 TBNZ X8, 0x0, 0x3B0CE34
	0x03B0CDA8 ADRP X0, 0x5F0000
	0x03B0CDAC LDR X0, [X0 + 0x8D8]
	0x03B0CDB0 BL 0x1C16CF4
	0x03B0CDB4 ADRP X0, 0x5F1000
	0x03B0CDB8 LDR X0, [X0 + 0x890]
	0x03B0CDBC BL 0x1C16CF4
	0x03B0CDC0 ADRP X0, 0x5F1000
	0x03B0CDC4 LDR X0, [X0 + 0x888]
	0x03B0CDC8 BL 0x1C16CF4
	0x03B0CDCC ADRP X0, 0x64D000
	0x03B0CDD0 LDR X0, [X0 + 0x3A0]
	0x03B0CDD4 BL 0x1C16CF4
	0x03B0CDD8 ADRP X0, 0x64D000
	0x03B0CDDC LDR X0, [X0 + 0x3B0]
	0x03B0CDE0 BL 0x1C16CF4
	0x03B0CDE4 ADRP X0, 0x5E7000
	0x03B0CDE8 LDR X0, [X0 + 0x638]
	0x03B0CDEC BL 0x1C16CF4
	0x03B0CDF0 ADRP X0, 0x64D000
	0x03B0CDF4 LDR X0, [X0 + 0x3A8]
	0x03B0CDF8 BL 0x1C16CF4
	0x03B0CDFC ADRP X0, 0x64D000
	0x03B0CE00 LDR X0, [X0 + 0x3B8]
	0x03B0CE04 BL 0x1C16CF4
	0x03B0CE08 ADRP X0, 0x64C000
	0x03B0CE0C LDR X0, [X0 + 0x3E8]
	0x03B0CE10 BL 0x1C16CF4
	0x03B0CE14 ADRP X0, 0x64D000
	0x03B0CE18 LDR X0, [X0 + 0x3C0]
	0x03B0CE1C BL 0x1C16CF4
	0x03B0CE20 ADRP X0, 0x64D000
	0x03B0CE24 LDR X0, [X0 + 0x3C8]
	0x03B0CE28 BL 0x1C16CF4
	0x03B0CE2C MOVZ W8, 0x1
	0x03B0CE30 STRB W8, [X22 + 0x66C]
	0x03B0CE34 LDR X0, [X29]
	0x03B0CE38 MOVZ W1, 0x4
	0x03B0CE3C BL 0x1C16D6C
	0x03B0CE40 LDR X8, [X20]
	0x03B0CE44 LDR X8, [X8 + 0xB8]
	0x03B0CE48 STR X0, [X8]
	0x03B0CE4C LDR X0, [X21]
	0x03B0CE50 BL 0x1C16F10
	0x03B0CE54 LDR X1, [X19]
	0x03B0CE58 MOV X19, X0
	0x03B0CE5C BL 0x2A09A9C
	0x03B0CE60 LDR X8, [X20]
	0x03B0CE64 MOVZ W1, 0x10
	0x03B0CE68 LDR X8, [X8 + 0xB8]
	0x03B0CE6C STR X19, [X8 + 0x8]
	0x03B0CE70 LDR X0, [X29]
	0x03B0CE74 BL 0x1C16D6C
	0x03B0CE78 LDR X2, [X28]
	0x03B0CE7C MOV X1, X0
	0x03B0CE80 MOVI V0.2D, 0x0
	0x03B0CE84 ADD X0, X31, 0x3A0
	0x03B0CE88 STR X31, [X31 + 0x3F0]
	0x03B0CE8C STP V0, V0, [X27 + 0x30]
	0x03B0CE90 STP V0, V0, [X27 + 0x10]
	0x03B0CE94 STR V0, [X27]
	0x03B0CE98 BL 0x26724B0
	0x03B0CE9C LDR X19, [X20]
	0x03B0CEA0 ADD X1, X31, 0x3A0
	0x03B0CEA4 MOVZ W2, 0x58
	0x03B0CEA8 LDR X8, [X19 + 0xB8]
	0x03B0CEAC ADD X0, X8, 0x10
	0x03B0CEB0 BL 0x3EB1AC0
	0x03B0CEB4 LDR X8, [X19 + 0xB8]
	0x03B0CEB8 MOVN W9, 0x0
	0x03B0CEBC MOVZ W1, 0x80
	0x03B0CEC0 STR W9, [X8 + 0x68]
	0x03B0CEC4 LDR X0, [X26]
	0x03B0CEC8 BL 0x1C16D6C
	0x03B0CECC LDR X8, [X20]
	0x03B0CED0 MOVZ W1, 0x8
	0x03B0CED4 LDR X8, [X8 + 0xB8]
	0x03B0CED8 STR X0, [X8 + 0x80]
	0x03B0CEDC LDR X0, [X25]
	0x03B0CEE0 BL 0x1C16D6C
	0x03B0CEE4 LDR X8, [X20]
	0x03B0CEE8 MOVZ W1, 0x10
	0x03B0CEEC LDR X8, [X8 + 0xB8]
	0x03B0CEF0 STR X0, [X8 + 0x88]
	0x03B0CEF4 LDR X0, [X24]
	0x03B0CEF8 BL 0x1C16D6C
	0x03B0CEFC LDR X19, [X20]
	0x03B0CF00 MOVZ W2, 0x378
	0x03B0CF04 MOV W1, W31
	0x03B0CF08 LDR X8, [X19 + 0xB8]
	0x03B0CF0C STR X0, [X8 + 0x90]
	0x03B0CF10 ADD X0, X8, 0x98
	0x03B0CF14 BL 0x3EB1B10
	0x03B0CF18 LDR X8, [X19 + 0xB8]
	0x03B0CF1C MOVZ W2, 0x378
	0x03B0CF20 MOV W1, W31
	0x03B0CF24 ADD X0, X8, 0x410
	0x03B0CF28 BL 0x3EB1B10
	0x03B0CF2C LDR X8, [X19 + 0xB8]
	0x03B0CF30 MOVZ W2, 0x378
	0x03B0CF34 MOV W1, W31
	0x03B0CF38 ADD X0, X8, 0x788
	0x03B0CF3C BL 0x3EB1B10
	0x03B0CF40 LDR X8, [X19 + 0xB8]
	0x03B0CF44 MOVZ W2, 0x378
	0x03B0CF48 MOV W1, W31
	0x03B0CF4C ADD X0, X8, 0xB00
	0x03B0CF50 BL 0x3EB1B10
	0x03B0CF54 LDR X8, [X19 + 0xB8]
	0x03B0CF58 MOVZ W2, 0x378
	0x03B0CF5C MOV W1, W31
	0x03B0CF60 ADD X0, X8, 0xE78
	0x03B0CF64 BL 0x3EB1B10
	0x03B0CF68 ADD X0, X31, 0x8
	0x03B0CF6C MOVZ W2, 0x398

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Subtract W9, W2, 4
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move W8, 255
	012 Move X10, -49758208
	013 Add X10, X10, 3219
	014 NotImplemented "Instruction ADR not yet implemented."
	015 Move W12, [X10]
	016 Add X11, X11, X12
	017 Move X19, X1
	018 Move W23, 255
	019 Move W22, 255
	020 Move W9, 255
	021 CallNoReturn X11
	022 Compare X19, 0
	023 JumpIfEqual {228}
	024 Move W21, [X19+24]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction LDRH not yet implemented."
	027 Call TMP_Text.HexToInt, X0, X1
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction LDRH not yet implemented."
	031 Move W20, W0
	032 Call TMP_Text.HexToInt, X0, X1
	033 NotImplemented "Instruction LDRH not yet implemented."
	034 Compare X19, 0
	035 JumpIfEqual {228}
	036 Move W21, [X19+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction LDRH not yet implemented."
	039 Call TMP_Text.HexToInt, X0, X1
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction LDRH not yet implemented."
	042 Move W20, W0
	043 Call TMP_Text.HexToInt, X0, X1
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction LDRH not yet implemented."
	047 Add W22, W0, W0
	048 Call TMP_Text.HexToInt, X0, X1
	049 NotImplemented "Instruction LDRH not yet implemented."
	050 Compare X19, 0
	051 JumpIfEqual {228}
	052 Move W21, [X19+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction LDRH not yet implemented."
	055 Call TMP_Text.HexToInt, X0, X1
	056 NotImplemented "Instruction CMP not yet implemented."
	057 NotImplemented "Instruction LDRH not yet implemented."
	058 Move W20, W0
	059 Call TMP_Text.HexToInt, X0, X1
	060 NotImplemented "Instruction CMP not yet implemented."
	061 NotImplemented "Instruction CMP not yet implemented."
	062 NotImplemented "Instruction LDRH not yet implemented."
	063 Add W22, W0, W0
	064 Call TMP_Text.HexToInt, X0, X1
	065 NotImplemented "Instruction LDRH not yet implemented."
	066 Add W23, W0, W0
	067 Call TMP_Text.HexToInt, X0, X1
	068 Add W8, W0, W0
	069 Add W9, W20, W20
	070 Compare X19, 0
	071 JumpIfEqual {228}
	072 Move W23, [X19+24]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction LDRH not yet implemented."
	075 Call TMP_Text.HexToInt, X0, X1
	076 NotImplemented "Instruction CMP not yet implemented."
	077 NotImplemented "Instruction LDRH not yet implemented."
	078 Move W20, W0
	079 Call TMP_Text.HexToInt, X0, X1
	080 NotImplemented "Instruction CMP not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction LDRH not yet implemented."
	083 Move W21, W0
	084 Call TMP_Text.HexToInt, X0, X1
	085 NotImplemented "Instruction LDRH not yet implemented."
	086 Move W22, W0
	087 Call TMP_Text.HexToInt, X0, X1
	088 NotImplemented "Instruction CMP not yet implemented."
	089 NotImplemented "Instruction CMP not yet implemented."
	090 NotImplemented "Instruction LDRH not yet implemented."
	091 Add W22, W0, W22
	092 Call TMP_Text.HexToInt, X0, X1
	093 NotImplemented "Instruction LDRH not yet implemented."
	094 Compare X19, 0
	095 JumpIfEqual {228}
	096 Move W25, [X19+24]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 NotImplemented "Instruction LDRH not yet implemented."
	099 Call TMP_Text.HexToInt, X0, X1
	100 NotImplemented "Instruction CMP not yet implemented."
	101 NotImplemented "Instruction LDRH not yet implemented."
	102 Move W20, W0
	103 Call TMP_Text.HexToInt, X0, X1
	104 NotImplemented "Instruction CMP not yet implemented."
	105 NotImplemented "Instruction CMP not yet implemented."
	106 NotImplemented "Instruction LDRH not yet implemented."
	107 Move W21, W0
	108 Call TMP_Text.HexToInt, X0, X1
	109 NotImplemented "Instruction LDRH not yet implemented."
	110 Move W22, W0
	111 Call TMP_Text.HexToInt, X0, X1
	112 NotImplemented "Instruction CMP not yet implemented."
	113 NotImplemented "Instruction CMP not yet implemented."
	114 NotImplemented "Instruction LDRH not yet implemented."
	115 Move W23, W0
	116 Call TMP_Text.HexToInt, X0, X1
	117 NotImplemented "Instruction LDRH not yet implemented."
	118 Move W24, W0
	119 Call TMP_Text.HexToInt, X0, X1
	120 NotImplemented "Instruction CMP not yet implemented."
	121 NotImplemented "Instruction CMP not yet implemented."
	122 NotImplemented "Instruction LDRH not yet implemented."
	123 Add W22, W23, W22
	124 Add W23, W0, W24
	125 Call TMP_Text.HexToInt, X0, X1
	126 NotImplemented "Instruction LDRH not yet implemented."
	127 Compare X19, 0
	128 JumpIfEqual {228}
	129 Move W23, [X19+24]
	130 NotImplemented "Instruction CMP not yet implemented."
	131 NotImplemented "Instruction LDRH not yet implemented."
	132 Call TMP_Text.HexToInt, X0, X1
	133 NotImplemented "Instruction CMP not yet implemented."
	134 NotImplemented "Instruction LDRH not yet implemented."
	135 Move W20, W0
	136 Call TMP_Text.HexToInt, X0, X1
	137 NotImplemented "Instruction CMP not yet implemented."
	138 NotImplemented "Instruction CMP not yet implemented."
	139 NotImplemented "Instruction LDRH not yet implemented."
	140 Move W21, W0
	141 Call TMP_Text.HexToInt, X0, X1
	142 NotImplemented "Instruction LDRH not yet implemented."
	143 Move W22, W0
	144 Call TMP_Text.HexToInt, X0, X1
	145 NotImplemented "Instruction CMP not yet implemented."
	146 NotImplemented "Instruction CMP not yet implemented."
	147 NotImplemented "Instruction LDRH not yet implemented."
	148 Add W22, W0, W22
	149 Call TMP_Text.HexToInt, X0, X1
	150 NotImplemented "Instruction LDRH not yet implemented."
	151 Move W19, W0
	152 Call TMP_Text.HexToInt, X0, X1
	153 Add W23, W0, W19
	154 Add W9, W21, W20
	155 Compare X19, 0
	156 JumpIfEqual {228}
	157 Move W25, [X19+24]
	158 NotImplemented "Instruction CMP not yet implemented."
	159 NotImplemented "Instruction LDRH not yet implemented."
	160 Call TMP_Text.HexToInt, X0, X1
	161 NotImplemented "Instruction CMP not yet implemented."
	162 NotImplemented "Instruction LDRH not yet implemented."
	163 Move W20, W0
	164 Call TMP_Text.HexToInt, X0, X1
	165 NotImplemented "Instruction CMP not yet implemented."
	166 NotImplemented "Instruction CMP not yet implemented."
	167 NotImplemented "Instruction LDRH not yet implemented."
	168 Move W21, W0
	169 Call TMP_Text.HexToInt, X0, X1
	170 NotImplemented "Instruction LDRH not yet implemented."
	171 Move W22, W0
	172 Call TMP_Text.HexToInt, X0, X1
	173 NotImplemented "Instruction CMP not yet implemented."
	174 NotImplemented "Instruction CMP not yet implemented."
	175 NotImplemented "Instruction LDRH not yet implemented."
	176 Move W23, W0
	177 Call TMP_Text.HexToInt, X0, X1
	178 NotImplemented "Instruction LDRH not yet implemented."
	179 Move W24, W0
	180 Call TMP_Text.HexToInt, X0, X1
	181 NotImplemented "Instruction CMP not yet implemented."
	182 NotImplemented "Instruction CMP not yet implemented."
	183 NotImplemented "Instruction LDRH not yet implemented."
	184 Add W22, W23, W22
	185 Add W23, W0, W24
	186 Call TMP_Text.HexToInt, X0, X1
	187 NotImplemented "Instruction LDRH not yet implemented."
	188 Move W19, W0
	189 Call TMP_Text.HexToInt, X0, X1
	190 Add W8, W0, W19
	191 Add W9, W21, W20
	192 Compare X19, 0
	193 JumpIfEqual {228}
	194 Move W21, [X19+24]
	195 NotImplemented "Instruction CMP not yet implemented."
	196 NotImplemented "Instruction LDRH not yet implemented."
	197 Call TMP_Text.HexToInt, X0, X1
	198 NotImplemented "Instruction CMP not yet implemented."
	199 NotImplemented "Instruction CMP not yet implemented."
	200 NotImplemented "Instruction LDRH not yet implemented."
	201 Move W20, W0
	202 Call TMP_Text.HexToInt, X0, X1
	203 NotImplemented "Instruction LDRH not yet implemented."
	204 Add W22, W0, W0
	205 Call TMP_Text.HexToInt, X0, X1
	206 Add W23, W0, W0
	207 Add W9, W20, W20
	208 Move W8, 255
	209 Move W0, W8
	210 ShiftRight W0, 8
	211 And W0, W0, 127
	212 NotImplemented "Instruction BFM not yet implemented."
	213 NotImplemented "Instruction BFM not yet implemented."
	214 Move X20, [X31+48]
	215 Move X19, [X31+56]
	216 Move X22, [X31+32]
	217 Move X21, [X31+40]
	218 Move X24, [X31+16]
	219 Move X23, [X31+24]
	220 NotImplemented "Instruction BFM not yet implemented."
	221 Move X30, [X31+64]
	222 Move X25, [X31+72]
	223 Return X0
	224 Move W23, 255
	225 Move W22, 255
	226 Move W9, 255
	227 Call 0x1C17F28
	228 Call 0x1C17F20

Method: UnityEngine.Color32 HexCharsToColor(System.Char[] hexChars, System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x03B0CF70 MOV W1, W31
	0x03B0CF74 BL 0x3EB1B10
	0x03B0CF78 LDR X3, [X23]
	0x03B0CF7C ADD X0, X31, 0x8
	0x03B0CF80 MOVZ W1, 0x8
	0x03B0CF84 MOVZ W2, 0x8
	0x03B0CF88 BL 0x26737F0
	0x03B0CF8C LDR X8, [X20]
	0x03B0CF90 MOVZ W9, 0x11F0
	0x03B0CF94 ADD X1, X31, 0x8
	0x03B0CF98 MOVZ W2, 0x398
	0x03B0CF9C LDR X8, [X8 + 0xB8]
	0x03B0CFA0 ADD X0, X8, X9
	0x03B0CFA4 BL 0x3EB1AC0
	0x03B0CFA8 ADRP X8, 0x64D000
	0x03B0CFAC LDR X8, [X8 + 0x3C0]
	0x03B0CFB0 MOVZ W1, 0x1
	0x03B0CFB4 MOV W2, W31
	0x03B0CFB8 MOV W3, W31
	0x03B0CFBC LDR X0, [X8]
	0x03B0CFC0 MOV X4, X31
	0x03B0CFC4 BL 0x3BFE7FC
	0x03B0CFC8 LDR X8, [X20]
	0x03B0CFCC MOVZ W1, 0x1
	0x03B0CFD0 MOV W2, W31
	0x03B0CFD4 MOV W3, W31
	0x03B0CFD8 LDR X8, [X8 + 0xB8]
	0x03B0CFDC MOV X4, X31
	0x03B0CFE0 STR X0, [X8 + 0x1588]
	0x03B0CFE4 ADRP X8, 0x64D000
	0x03B0CFE8 LDR X8, [X8 + 0x3C8]
	0x03B0CFEC LDR X0, [X8]
	0x03B0CFF0 BL 0x3BFE7FC
	0x03B0CFF4 LDR X8, [X20]
	0x03B0CFF8 MOVI V0.2S, 0x4F, 0x18
	0x03B0CFFC MOVI V1.2S, 0xCF, 0x18
	0x03B0D000 ADRP X10, 0xFFFFFFFFFCFE0000
	0x03B0D004 LDR X9, [X8 + 0xB8]
	0x03B0D008 STR X0, [X9 + 0x1590]
	0x03B0D00C STR D0, [X9 + 0x1598]
	0x03B0D010 LDR X9, [X8 + 0xB8]
	0x03B0D014 LDR V0, [X10 + 0xB10]
	0x03B0D018 ADRP X10, 0xFFFFFFFFFCFE0000
	0x03B0D01C STR D1, [X9 + 0x15A0]
	0x03B0D020 LDR X8, [X8 + 0xB8]
	0x03B0D024 LDR V1, [X10 + 0x628]
	0x03B0D028 STR D0, [X8 + 0x15A8]
	0x03B0D02C STR D1, [X8 + 0x15B0]
	0x03B0D030 ADD X31, X31, 0x400
	0x03B0D034 LDP X20, X19, [X31 + 0x50]
	0x03B0D038 LDP X22, X21, [X31 + 0x40]
	0x03B0D03C LDP X24, X23, [X31 + 0x30]
	0x03B0D040 LDP X26, X25, [X31 + 0x20]
	0x03B0D044 LDP X28, X27, [X31 + 0x10]
	0x03B0D048 LDP X29, X30, [X31], #0x60
	0x03B0D04C RET
	0x03B0D050 STP X30, X21, [X31 - 0x20]!
	0x03B0D054 STP X20, X19, [X31 + 0x10]
	0x03B0D058 LDR X8, [X2 + 0x8]
	0x03B0D05C STP X1, X2, [X0 + 0x20]
	0x03B0D060 MOV X19, X0
	0x03B0D064 MOV X20, X1
	0x03B0D068 STR X8, [X0 + 0x10]
	0x03B0D06C LDRB W21, [X2 + 0x52]
	0x03B0D070 STR X0, [X0 + 0x40]
	0x03B0D074 MOV X0, X2
	0x03B0D078 BL 0x1C16D84
	0x03B0D07C TBZ X0, 0x0, 0x3B0D094
	0x03B0D080 CMP W21, 0x3
	0x03B0D084 B.NE 0x3B0D0B0
	0x03B0D088 ADRP X8, 0xFFFFFFFFFE0EF000
	0x03B0D08C ADD X8, X8, 0xB5C
	0x03B0D090 B 0x3B0D0A4
	0x03B0D094 CMP W21, 0x2
	0x03B0D098 B.NE 0x3B0D0AC
	0x03B0D09C ADRP X8, 0xFFFFFFFFFE0EF000
	0x03B0D0A0 ADD X8, X8, 0xB34
	0x03B0D0A4 STR X8, [X19 + 0x18]
	0x03B0D0A8 B 0x3B0D0C0
	0x03B0D0AC CBZ X20, 0x3B0D0D8
	0x03B0D0B0 LDR X8, [X19 + 0x10]
	0x03B0D0B4 LDR X9, [X19 + 0x20]
	0x03B0D0B8 STR X8, [X19 + 0x18]
	0x03B0D0BC STR X9, [X19 + 0x40]
	0x03B0D0C0 ADRP X8, 0xFFFFFFFFFE0EF000
	0x03B0D0C4 ADD X8, X8, 0xACC
	0x03B0D0C8 STR X8, [X19 + 0x38]
	0x03B0D0CC LDP X20, X19, [X31 + 0x10]
	0x03B0D0D0 LDP X30, X21, [X31], #0x20
	0x03B0D0D4 RET
	0x03B0D0D8 ADRP X1, 0xFFFFFFFFFD00E000
	0x03B0D0DC ADD X1, X1, 0xEE3
	0x03B0D0E0 MOV X0, X31
	0x03B0D0E4 BL 0x1C16F3C
	0x03B0D0E8 MOV X1, X31
	0x03B0D0EC BL 0x1C16DEC
	0x03B0D0F0 LDR X8, [X0 + 0x40]
	0x03B0D0F4 LDR X5, [X0 + 0x18]
	0x03B0D0F8 LDR X4, [X0 + 0x28]
	0x03B0D0FC MOV X0, X8
	0x03B0D100 BR X5
	0x03B0D104 SUB X31, X31, 0x70
	0x03B0D108 STP X30, X25, [X31 + 0x30]
	0x03B0D10C STP X24, X23, [X31 + 0x40]
	0x03B0D110 STP X22, X21, [X31 + 0x50]
	0x03B0D114 STP X20, X19, [X31 + 0x60]
	0x03B0D118 ADRP X25, 0x8D5000
	0x03B0D11C STR W2, [X31 + 0x2C]
	0x03B0D120 STRH W3, [X31 + 0x28]
	0x03B0D124 ADRP X24, 0x5E6000
	0x03B0D128 ADRP X23, 0x5E8000
	0x03B0D12C LDRB W8, [X25 + 0x66D]
	0x03B0D130 LDR X24, [X24 + 0x758]
	0x03B0D134 LDR X23, [X23 + 0x170]
	0x03B0D138 MOV X19, X5
	0x03B0D13C MOV X20, X4
	0x03B0D140 MOV X22, X1
	0x03B0D144 MOV X21, X0
	0x03B0D148 TBNZ X8, 0x0, 0x3B0D16C
	0x03B0D14C ADRP X0, 0x5E8000
	0x03B0D150 LDR X0, [X0 + 0x170]
	0x03B0D154 BL 0x1C16CF4
	0x03B0D158 ADRP X0, 0x5E6000
	0x03B0D15C LDR X0, [X0 + 0x758]
	0x03B0D160 BL 0x1C16CF4
	0x03B0D164 MOVZ W8, 0x1
	0x03B0D168 STRB W8, [X25 + 0x66D]
	0x03B0D16C LDR X0, [X24]
	0x03B0D170 ADD X1, X31, 0x2C
	0x03B0D174 STP X31, X31, [X31 + 0x18]
	0x03B0D178 STP X22, X31, [X31 + 0x8]
	0x03B0D17C BL 0x1C16E04
	0x03B0D180 LDR X8, [X23]
	0x03B0D184 STR X0, [X31 + 0x10]
	0x03B0D188 ADD X1, X31, 0x28
	0x03B0D18C MOV X0, X8
	0x03B0D190 BL 0x1C16E04
	0x03B0D194 STR X0, [X31 + 0x18]
	0x03B0D198 ADD X1, X31, 0x8
	0x03B0D19C MOV X0, X21
	0x03B0D1A0 MOV X2, X20
	0x03B0D1A4 MOV X3, X19
	0x03B0D1A8 BL 0x1C16CB0
	0x03B0D1AC LDP X20, X19, [X31 + 0x60]
	0x03B0D1B0 LDP X22, X21, [X31 + 0x50]
	0x03B0D1B4 LDP X24, X23, [X31 + 0x40]
	0x03B0D1B8 LDP X30, X25, [X31 + 0x30]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X22, 0x8D7000
	012 Move W8, [X22+1641]
	013 Move W21, W3
	014 Move W20, W2
	015 Move X19, X1
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x64D000
	021 Move X0, [X0+1000]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+1641], W8
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Compare X19, 0
	028 JumpIfEqual {153}
	029 Move W24, [X19+24]
	030 Add W8, W20, 1
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Add X8, X19, W8
	033 NotImplemented "Instruction LDRH not yet implemented."
	034 Call TMP_Text.HexToInt, X0, X1
	035 Add W8, W20, 2
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Add X8, X19, W8
	038 NotImplemented "Instruction LDRH not yet implemented."
	039 Move W21, W0
	040 Call TMP_Text.HexToInt, X0, X1
	041 Add W8, W20, 3
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Add W23, W20, 4
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Add X25, X19, 32
	046 NotImplemented "Instruction LDRH not yet implemented."
	047 Move W22, W0
	048 Call TMP_Text.HexToInt, X0, X1
	049 NotImplemented "Instruction LDRH not yet implemented."
	050 Move W23, W0
	051 Call TMP_Text.HexToInt, X0, X1
	052 Add W8, W20, 5
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add W25, W20, 6
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Add X19, X19, 32
	057 NotImplemented "Instruction LDRH not yet implemented."
	058 Add W20, W0, W23
	059 Call TMP_Text.HexToInt, X0, X1
	060 NotImplemented "Instruction LDRH not yet implemented."
	061 Move W19, W0
	062 Call TMP_Text.HexToInt, X0, X1
	063 Add W23, W0, W19
	064 Add W8, W22, W21
	065 Move W9, 255
	066 Compare X19, 0
	067 JumpIfEqual {153}
	068 Move W26, [X19+24]
	069 Add W8, W20, 1
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Add X8, X19, W8
	072 NotImplemented "Instruction LDRH not yet implemented."
	073 Call TMP_Text.HexToInt, X0, X1
	074 Add W8, W20, 2
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Add X8, X19, W8
	077 NotImplemented "Instruction LDRH not yet implemented."
	078 Move W21, W0
	079 Call TMP_Text.HexToInt, X0, X1
	080 Add W8, W20, 3
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Add W23, W20, 4
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Add X24, X19, 32
	085 NotImplemented "Instruction LDRH not yet implemented."
	086 Move W22, W0
	087 Call TMP_Text.HexToInt, X0, X1
	088 NotImplemented "Instruction LDRH not yet implemented."
	089 Move W23, W0
	090 Call TMP_Text.HexToInt, X0, X1
	091 Add W8, W20, 5
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Add W25, W20, 6
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Add X27, X19, 32
	096 NotImplemented "Instruction LDRH not yet implemented."
	097 Move W24, W0
	098 Call TMP_Text.HexToInt, X0, X1
	099 NotImplemented "Instruction LDRH not yet implemented."
	100 Move W25, W0
	101 Call TMP_Text.HexToInt, X0, X1
	102 Add W8, W20, 7
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Add W27, W20, 8
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Add X19, X19, 32
	107 NotImplemented "Instruction LDRH not yet implemented."
	108 Add W20, W24, W23
	109 Add W23, W0, W25
	110 Call TMP_Text.HexToInt, X0, X1
	111 NotImplemented "Instruction LDRH not yet implemented."
	112 Move W19, W0
	113 Call TMP_Text.HexToInt, X0, X1
	114 Add W9, W0, W19
	115 Add W8, W22, W21
	116 Move X19, 0x64C000
	117 Move X19, [X19+1000]
	118 Move X0, [X19]
	119 Move W8, [X0+224]
	120 Compare W8, 0
	121 JumpIfNotEqual {124}
	122 Call 0x1C17DFC
	123 Move X0, [X19]
	124 Move X8, [X0+184]
	125 Move W8, [X8+104]
	126 Move W20, W8
	127 ShiftRight W20, 8
	128 And W20, W20, 0x7FFFFFFF
	129 Move W23, W8
	130 ShiftRight W23, 16
	131 And W23, W23, 0x7FFFFFFF
	132 Move W9, W8
	133 ShiftRight W9, 24
	134 And W9, W9, 0x7FFFFFFF
	135 Move W0, W9
	136 ShiftRight W0, 8
	137 And W0, W0, 127
	138 NotImplemented "Instruction BFM not yet implemented."
	139 NotImplemented "Instruction BFM not yet implemented."
	140 Move X20, [X31+64]
	141 Move X19, [X31+72]
	142 Move X22, [X31+48]
	143 Move X21, [X31+56]
	144 Move X24, [X31+32]
	145 Move X23, [X31+40]
	146 Move X26, [X31+16]
	147 Move X25, [X31+24]
	148 NotImplemented "Instruction BFM not yet implemented."
	149 Move X30, [X31+80]
	150 Move X27, [X31+88]
	151 Return X0
	152 Call 0x1C17F28
	153 Call 0x1C17F20

Method: System.Int32 GetAttributeParameters(System.Char[] chars, System.Int32 startIndex, System.Int32 length, ref System.Single[] parameters)

Disassembly:
	0x03B0D1BC ADD X31, X31, 0x70
	0x03B0D1C0 RET
	0x03B0D1C4 STR X30, [X31 - 0x10]!
	0x03B0D1C8 MOV X0, X1
	0x03B0D1CC MOV X1, X31
	0x03B0D1D0 BL 0x1C16CB4
	0x03B0D1D4 CBZ X0, 0x3B0D1E8
	0x03B0D1D8 BL 0x1C16E08
	0x03B0D1DC LDRH W0, [X0]
	0x03B0D1E0 LDR X30, [X31], #0x10
	0x03B0D1E4 RET
	0x03B0D1E8 BL 0x1C16F20
	0x03B0D1EC STP X30, X21, [X31 - 0x20]!
	0x03B0D1F0 STP X20, X19, [X31 + 0x10]
	0x03B0D1F4 ADRP X20, 0x8D5000
	0x03B0D1F8 ADRP X21, 0x612000
	0x03B0D1FC LDRB W8, [X20 + 0x66E]
	0x03B0D200 LDR X21, [X21 + 0xCA0]
	0x03B0D204 MOV X19, X0
	0x03B0D208 TBNZ X8, 0x0, 0x3B0D220
	0x03B0D20C ADRP X0, 0x612000
	0x03B0D210 LDR X0, [X0 + 0xCA0]
	0x03B0D214 BL 0x1C16CF4
	0x03B0D218 MOVZ W8, 0x1
	0x03B0D21C STRB W8, [X20 + 0x66E]
	0x03B0D220 LDR X1, [X21]
	0x03B0D224 MOV X0, X19
	0x03B0D228 LDP X20, X19, [X31 + 0x10]
	0x03B0D22C LDP X30, X21, [X31], #0x20
	0x03B0D230 B 0x2729B5C
	0x03B0D234 STP X30, X21, [X31 - 0x20]!
	0x03B0D238 STP X20, X19, [X31 + 0x10]
	0x03B0D23C ADRP X20, 0x8D5000
	0x03B0D240 ADRP X21, 0x612000
	0x03B0D244 LDRB W8, [X20 + 0x66F]
	0x03B0D248 LDR X21, [X21 + 0xCA0]
	0x03B0D24C MOV X19, X0
	0x03B0D250 TBNZ X8, 0x0, 0x3B0D268
	0x03B0D254 ADRP X0, 0x612000
	0x03B0D258 LDR X0, [X0 + 0xCA0]
	0x03B0D25C BL 0x1C16CF4
	0x03B0D260 MOVZ W8, 0x1
	0x03B0D264 STRB W8, [X20 + 0x66F]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Add W8, W2, W3
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move [X31+12], W2
	011 Move X19, X4
	012 Move W22, W3
	013 Move W21, W2
	014 Move X20, X1
	015 Move W23, W31
	016 Move X24, [X19]
	017 Add X4, X31, 12
	018 Move X1, X20
	019 Move W2, W21
	020 Move W3, W22
	021 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	022 Compare X24, 0
	023 JumpIfEqual {45}
	024 Move W8, [X24+24]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Add X8, X24, W23
	027 Move [X8+32], S0
	028 Move W8, [X31+12]
	029 Add W9, W21, W22
	030 Add W23, W23, 1
	031 NotImplemented "Instruction ORN not yet implemented."
	032 Add W21, W8, 1
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Add W22, W9, W10
	035 Move W23, W31
	036 Move W0, W23
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X22, [X31+32]
	040 Move X21, [X31+40]
	041 Move X24, [X31+16]
	042 Move X23, [X31+24]
	043 Move X30, [X31+64]
	044 Return X0
	045 Call 0x1C17F20
	046 Call 0x1C17F28

Method: System.Single ConvertToFloat(System.Char[] chars, System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x03B0D3E8 BL 0x3EB1BA0
	0x03B0D3EC FMOV S1, 0.5
	0x03B0D3F0 LDRB W9, [X20 + 0x274]
	0x03B0D3F4 FMUL S1, S8, S1
	0x03B0D3F8 FCMP S0, S1
	0x03B0D3FC CSET W8, MI

ISIL:
	001 Move [X31-16], X30
	002 Add X4, X31, 12
	003 Move [X31+12], W31
	004 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	005 Move X30, [X31+16]
	006 Return V0

Method: System.Single ConvertToFloat(System.Char[] chars, System.Int32 startIndex, System.Int32 length, out System.Int32 lastIndex)

Disassembly:
	0x03B0D268 LDR X1, [X21]
	0x03B0D26C MOV X0, X19
	0x03B0D270 LDP X20, X19, [X31 + 0x10]
	0x03B0D274 LDP X30, X21, [X31], #0x20
	0x03B0D278 B 0x2729B5C
	0x03B0D27C STP X30, X21, [X31 - 0x20]!
	0x03B0D280 STP X20, X19, [X31 + 0x10]
	0x03B0D284 ADRP X20, 0x8D5000
	0x03B0D288 ADRP X21, 0x612000
	0x03B0D28C LDRB W8, [X20 + 0x670]
	0x03B0D290 LDR X21, [X21 + 0xCA0]
	0x03B0D294 MOV X19, X0
	0x03B0D298 TBNZ X8, 0x0, 0x3B0D2B0
	0x03B0D29C ADRP X0, 0x612000
	0x03B0D2A0 LDR X0, [X0 + 0xCA0]
	0x03B0D2A4 BL 0x1C16CF4
	0x03B0D2A8 MOVZ W8, 0x1
	0x03B0D2AC STRB W8, [X20 + 0x670]
	0x03B0D2B0 LDR X1, [X21]
	0x03B0D2B4 MOV X0, X19
	0x03B0D2B8 LDP X20, X19, [X31 + 0x10]
	0x03B0D2BC LDP X30, X21, [X31], #0x20
	0x03B0D2C0 B 0x2729B5C
	0x03B0D2C4 STP X30, X21, [X31 - 0x20]!
	0x03B0D2C8 STP X20, X19, [X31 + 0x10]
	0x03B0D2CC ADRP X20, 0x8D5000
	0x03B0D2D0 ADRP X21, 0x64C000
	0x03B0D2D4 LDRB W8, [X20 + 0x671]
	0x03B0D2D8 LDR X21, [X21 + 0x3D0]
	0x03B0D2DC MOV X19, X0
	0x03B0D2E0 TBNZ X8, 0x0, 0x3B0D2F8
	0x03B0D2E4 ADRP X0, 0x64C000
	0x03B0D2E8 LDR X0, [X0 + 0x3D0]
	0x03B0D2EC BL 0x1C16CF4
	0x03B0D2F0 MOVZ W8, 0x1
	0x03B0D2F4 STRB W8, [X20 + 0x671]
	0x03B0D2F8 LDR X1, [X21]
	0x03B0D2FC MOV X0, X19
	0x03B0D300 LDP X20, X19, [X31 + 0x10]
	0x03B0D304 LDP X30, X21, [X31], #0x20
	0x03B0D308 B 0x272EA34
	0x03B0D30C STP X30, X21, [X31 - 0x20]!
	0x03B0D310 STP X20, X19, [X31 + 0x10]
	0x03B0D314 ADRP X20, 0x8D5000
	0x03B0D318 ADRP X21, 0x64C000
	0x03B0D31C LDRB W8, [X20 + 0x672]
	0x03B0D320 LDR X21, [X21 + 0x3D8]
	0x03B0D324 MOV X19, X0
	0x03B0D328 TBNZ X8, 0x0, 0x3B0D340
	0x03B0D32C ADRP X0, 0x64C000
	0x03B0D330 LDR X0, [X0 + 0x3D8]
	0x03B0D334 BL 0x1C16CF4
	0x03B0D338 MOVZ W8, 0x1
	0x03B0D33C STRB W8, [X20 + 0x672]
	0x03B0D340 LDR X1, [X21]
	0x03B0D344 MOV X0, X19
	0x03B0D348 LDP X20, X19, [X31 + 0x10]
	0x03B0D34C LDP X30, X21, [X31], #0x20
	0x03B0D350 B 0x27296BC
	0x03B0D354 STR X30, [X31 - 0x20]!
	0x03B0D358 STP X20, X19, [X31 + 0x10]
	0x03B0D35C MOV W19, W1
	0x03B0D360 MOV X1, X31
	0x03B0D364 MOV X20, X0
	0x03B0D368 BL 0x33BDD8C
	0x03B0D36C STR W19, [X20 + 0x10]
	0x03B0D370 LDP X20, X19, [X31 + 0x10]
	0x03B0D374 LDR X30, [X31], #0x20
	0x03B0D378 RET
	0x03B0D37C RET
	0x03B0D380 STR D8, [X31 - 0x20]!
	0x03B0D384 STR X30, [X31 + 0x8]
	0x03B0D388 STP X20, X19, [X31 + 0x10]
	0x03B0D38C LDR W8, [X0 + 0x10]
	0x03B0D390 LDR X20, [X0 + 0x20]
	0x03B0D394 MOV X19, X0
	0x03B0D398 SUB W9, W8, 0x1
	0x03B0D39C CMP W9, 0x2
	0x03B0D3A0 B.CS 0x3B0D43C
	0x03B0D3A4 MOVN W8, 0x0
	0x03B0D3A8 STR W8, [X19 + 0x10]
	0x03B0D3AC CBZ X20, 0x3B0D480
	0x03B0D3B0 LDRB W8, [X20 + 0x270]
	0x03B0D3B4 CBNZ W8, 0x3B0D3C0
	0x03B0D3B8 LDRB W8, [X20 + 0x2CB]
	0x03B0D3BC CBZ W8, 0x3B0D460
	0x03B0D3C0 LDR V0, [X20 + 0x228]
	0x03B0D3C4 FCMP S0, 0x0
	0x03B0D3C8 B.LE 0x3B0D460
	0x03B0D3CC FMOV S1, 1
	0x03B0D3D0 MOV X0, X31
	0x03B0D3D4 FDIV S8, S1, S0
	0x03B0D3D8 BL 0x3C3C764
	0x03B0D3DC LDR V1, [X20 + 0x280]
	0x03B0D3E0 FSUB S0, S0, S1
	0x03B0D3E4 MOV V1.16B, V8.16B

ISIL:
	001 Move [X31-16], X30
	002 Compare W2, 0
	003 JumpIfEqual {15}
	004 Compare X1, 0
	005 JumpIfEqual {85}
	006 Move W8, [X1+24]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Add X9, X1, W2
	009 NotImplemented "Instruction LDRH not yet implemented."
	010 Add W9, W3, W2
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Add W2, W2, 1
	014 Move W10, 1
	015 Move W8, 0xC7000000
	016 Move [X4], W31
	017 Move S0, W8
	018 Add W2, W2, 1
	019 Move TEMP, 0
	020 Not TEMP
	021 Move W10, TEMP
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move S0, W31
	024 Move X13, -50470912
	025 Move V3, [X13+188]
	026 Move X12, W9
	027 Add X11, X1, W2
	028 NotImplemented "Instruction SCVTF not yet implemented."
	029 Move X10, W10
	030 Move S2, W31
	031 Add X11, X11, 32
	032 Subtract X12, X12, W2
	033 Move W13, 1
	034 Move S4, 10
	035 Move S0, W31
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction LDRH not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Subtract W14, W15, 48
	040 And W16, W14, 0xFFFF
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move W13, W31
	045 Move V2, V3
	046 Move TEMP, X13
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {55}
	050 Multiply X13, X14, X10
	051 Multiply S0, S0, S4
	052 NotImplemented "Instruction SCVTF not yet implemented."
	053 Add S0, S0, S5
	054 Move W13, 1
	055 NotImplemented "Instruction UCVTF not yet implemented."
	056 Multiply S5, S2, S5
	057 Multiply S5, S5, S1
	058 Move W13, W31
	059 Add S0, S0, S5
	060 Multiply S2, S2, S3
	061 Add W2, W2, 1
	062 Subtract X12, X12, 1
	063 Add X11, X11, 2
	064 Move X8, -50470912
	065 Move V1, [X8+884]
	066 Move W8, 0xC7000000
	067 Move [X4], W9
	068 NotImplemented "Instruction FCMP not yet implemented."
	069 Move S1, W8
	070 NotImplemented "Instruction FCSEL not yet implemented."
	071 Move X30, [X31+16]
	072 Return V0
	073 Add W10, W2, 1
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Add X8, X1, W10
	077 NotImplemented "Instruction LDRH not yet implemented."
	078 NotImplemented "Instruction CMP not yet implemented."
	079 NotImplemented "Instruction CSEL not yet implemented."
	080 Move X8, -50470912
	081 Move V1, [X8+884]
	082 Move W8, 0xC7000000
	083 Move [X4], W2
	084 Call 0x1C17F28
	085 Call 0x1C17F20

Method: System.Boolean ValidateHtmlTag(TMPro.TMP_Text/UnicodeChar[] chars, System.Int32 startIndex, out System.Int32 endIndex)

Disassembly:
	0x03B00FE4 LDR X19, [X19 + 0x598]
	0x03B00FE8 LDR X9, [X31 + 0x20]
	0x03B00FEC LDR X0, [X19]
	0x03B00FF0 LDR X20, [X9 + 0x1B0]
	0x03B00FF4 LDR W8, [X0 + 0xE0]
	0x03B00FF8 CBNZ W8, 0x3B01000
	0x03B00FFC BL 0x1C16DFC
	0x03B01000 MOV X0, X20
	0x03B01004 MOV X1, X31
	0x03B01008 MOV X2, X31
	0x03B0100C BL 0x3C354F8
	0x03B01010 TBZ X0, 0x0, 0x3B041B4
	0x03B01014 LDR X8, [X31 + 0x20]
	0x03B01018 LDR X20, [X8 + 0x1B0]
	0x03B0101C B 0x3B052DC
	0x03B01020 CMP W10, 0x192
	0x03B01024 B.LE 0x3B016D0
	0x03B01028 CMP W10, 0x19E
	0x03B0102C B.LE 0x3B0218C
	0x03B01030 CMP W10, 0x1AA
	0x03B01034 B.EQ 0x3B00B64
	0x03B01038 CMP W10, 0x1AB
	0x03B0103C B.EQ 0x3B03D5C
	0x03B01040 CMP W10, 0x1B2
	0x03B01044 B.NE 0x3B05A00
	0x03B01048 B 0x3B016F0
	0x03B0104C MOVZ W8, 0x9365
	0x03B01050 MOVK W8, 0x710000
	0x03B01054 CMP W10, W8
	0x03B01058 B.LE 0x3B01740
	0x03B0105C MOVZ W8, 0xF193
	0x03B01060 MOVK W8, 0x730000
	0x03B01064 CMP W10, W8
	0x03B01068 B.LE 0x3B021A0
	0x03B0106C MOVZ W8, 0x913D
	0x03B01070 MOVK W8, 0x740000
	0x03B01074 CMP W10, W8
	0x03B01078 B.EQ 0x3B02C24
	0x03B0107C MOVZ W8, 0x3608
	0x03B01080 MOVK W8, 0x750000
	0x03B01084 CMP W10, W8
	0x03B01088 B.EQ 0x3B03DB4
	0x03B0108C MOVZ W8, 0x5E9A
	0x03B01090 MOVK W8, 0x760000
	0x03B01094 CMP W10, W8
	0x03B01098 B.NE 0x3B05A00
	0x03B0109C B 0x3B02AD0
	0x03B010A0 MOVZ W11, 0x11CC
	0x03B010A4 CMP W10, W11
	0x03B010A8 B.LE 0x3B01844
	0x03B010AC MOVZ W11, 0x1286
	0x03B010B0 CMP W10, W11
	0x03B010B4 B.LE 0x3B021C4
	0x03B010B8 MOVZ W11, 0x18EC
	0x03B010BC CMP W10, W11
	0x03B010C0 B.EQ 0x3B0186C
	0x03B010C4 MOVZ W8, 0x1998
	0x03B010C8 CMP W10, W8
	0x03B010CC B.EQ 0x3B03378
	0x03B010D0 MOVZ W8, 0x19A6
	0x03B010D4 B 0x3B021D4
	0x03B010D8 MOVZ W11, 0xA15E
	0x03B010DC MOVK W11, 0x30000
	0x03B010E0 CMP W10, W11
	0x03B010E4 B.LE 0x3B018FC
	0x03B010E8 MOVZ W11, 0x371E
	0x03B010EC MOVK W11, 0x40000
	0x03B010F0 CMP W10, W11
	0x03B010F4 B.LE 0x3B02340
	0x03B010F8 MOVZ W11, 0x4760
	0x03B010FC MOVK W11, 0x40000
	0x03B01100 CMP W10, W11
	0x03B01104 B.EQ 0x3B05A00
	0x03B01108 MOVZ W11, 0x4D63
	0x03B0110C MOVK W11, 0x40000
	0x03B01110 CMP W10, W11
	0x03B01114 B.EQ 0x3B0371C
	0x03B01118 MOVZ W11, 0xD122
	0x03B0111C MOVK W11, 0x40000
	0x03B01120 B 0x3B02C58
	0x03B01124 MOVZ W11, 0x1E9D
	0x03B01128 MOVK W11, 0x9B440000
	0x03B0112C CMP W10, W11
	0x03B01130 B.LE 0x3B019CC
	0x03B01134 MOVZ W11, 0x13F1
	0x03B01138 MOVK W11, 0x9EB80000
	0x03B0113C CMP W10, W11
	0x03B01140 B.LE 0x3B023F4
	0x03B01144 MOVZ W11, 0xE93
	0x03B01148 MOVK W11, 0x9FA70000
	0x03B0114C CMP W10, W11
	0x03B01150 B.EQ 0x3B01C48
	0x03B01154 MOVZ W11, 0xBFBD
	0x03B01158 MOVK W11, 0xCB420000
	0x03B0115C CMP W10, W11
	0x03B01160 B.EQ 0x3B01A0C
	0x03B01164 MOVZ W11, 0xB266
	0x03B01168 MOVK W11, 0xCD090000
	0x03B0116C CMP W10, W11
	0x03B01170 B.NE 0x3B05A00
	0x03B01174 B 0x3B03DC0
	0x03B01178 MOVZ W8, 0xF46A
	0x03B0117C MOVK W8, 0x21C60000
	0x03B01180 CMP W10, W8
	0x03B01184 B.LE 0x3B0244C
	0x03B01188 MOVZ W8, 0x43C1
	0x03B0118C MOVK W8, 0x2B830000
	0x03B01190 CMP W10, W8
	0x03B01194 B.EQ 0x3B037C8
	0x03B01198 MOVZ W8, 0xF5E8
	0x03B0119C MOVK W8, 0x2DAB0000
	0x03B011A0 CMP W10, W8
	0x03B011A4 B.EQ 0x3B03564
	0x03B011A8 MOVZ W8, 0xF08A
	0x03B011AC MOVK W8, 0x2E9A0000
	0x03B011B0 B 0x3B02464
	0x03B011B4 ADD W9, W11, 0x39C
	0x03B011B8 CMP W10, W9
	0x03B011BC B.LE 0x3B02470
	0x03B011C0 MOVZ W9, 0x38B8
	0x03B011C4 MOVK W9, 0x20000
	0x03B011C8 CMP W10, W9
	0x03B011CC B.EQ 0x3B037EC
	0x03B011D0 MOVZ W9, 0x5A2E
	0x03B011D4 MOVK W9, 0x20000
	0x03B011D8 CMP W10, W9
	0x03B011DC B.EQ 0x3B0380C
	0x03B011E0 MOVZ W8, 0x60F4
	0x03B011E4 MOVK W8, 0x20000
	0x03B011E8 CMP W10, W8
	0x03B011EC B.NE 0x3B05A00
	0x03B011F0 LDR X8, [X31 + 0x20]
	0x03B011F4 LDRB W8, [X8 + 0x259]
	0x03B011F8 TBNZ X8, 0x1, 0x3B00B64
	0x03B011FC ADRP X8, 0x658000
	0x03B01200 LDR X8, [X8 + 0x2D0]
	0x03B01204 LDR X19, [X31 + 0x20]
	0x03B01208 LDR X1, [X8]
	0x03B0120C ADD X0, X19, 0x550
	0x03B01210 ADD X8, X31, 0x70
	0x03B01214 BL 0x2671694
	0x03B01218 ADD X0, X19, 0x260
	0x03B0121C MOVZ W1, 0x200
	0x03B01220 MOV X2, X31
	0x03B01224 BL 0x3B1D034
	0x03B01228 ANDS W31, W0, 0xFF
	0x03B0122C B.NE 0x3B00B64
	0x03B01230 LDR X9, [X31 + 0x20]
	0x03B01234 LDR W8, [X9 + 0x25C]
	0x03B01238 AND W8, W8, 0xFFFFFDFF
	0x03B0123C B 0x3B031F0
	0x03B01240 MOVZ W11, 0x33C6
	0x03B01244 MOVK W11, 0x1D0000
	0x03B01248 CMP W10, W11
	0x03B0124C B.LE 0x3B0249C
	0x03B01250 MOVZ W11, 0x45E3
	0x03B01254 MOVK W11, 0x1E0000
	0x03B01258 CMP W10, W11
	0x03B0125C B.EQ 0x3B01640
	0x03B01260 MOVZ W11, 0x91F4
	0x03B01264 MOVK W11, 0x1F0000
	0x03B01268 CMP W10, W11
	0x03B0126C B.EQ 0x3B03284
	0x03B01270 MOVZ W11, 0x319E
	0x03B01274 MOVK W11, 0x200000
	0x03B01278 B 0x3B01E04
	0x03B0127C CMP W10, 0x1BE
	0x03B01280 B.LE 0x3B0258C
	0x03B01284 SUB W8, W10, 0x290
	0x03B01288 CMP W8, 0xF
	0x03B0128C B.CS 0x3B05A00
	0x03B01290 MOVZ W9, 0x4010
	0x03B01294 LSRV W8, W9, W8
	0x03B01298 AND W20, W8, 0x1
	0x03B0129C B 0x3B05A04
	0x03B012A0 MOVZ W11, 0xA05A
	0x03B012A4 MOVK W11, 0xA30000
	0x03B012A8 CMP W10, W11
	0x03B012AC B.LE 0x3B0260C
	0x03B012B0 MOVZ W11, 0xA5A9
	0x03B012B4 MOVK W11, 0xB10000
	0x03B012B8 CMP W10, W11
	0x03B012BC B.EQ 0x3B03098
	0x03B012C0 MOVZ W8, 0x640A
	0x03B012C4 MOVK W8, 0xCE0000
	0x03B012C8 CMP W10, W8
	0x03B012CC B.EQ 0x3B0263C
	0x03B012D0 MOVZ W8, 0xA57A
	0x03B012D4 MOVK W8, 0xE60000
	0x03B012D8 B 0x3B02624
	0x03B012DC MOVZ W8, 0x5171
	0x03B012E0 CMP W10, W8
	0x03B012E4 B.LE 0x3B02654
	0x03B012E8 MOVZ W8, 0x517F
	0x03B012EC CMP W10, W8
	0x03B012F0 B.EQ 0x3B03120
	0x03B012F4 MOVZ W8, 0x57E5
	0x03B012F8 CMP W10, W8
	0x03B012FC B.EQ 0x3B0357C
	0x03B01300 MOVZ W8, 0x5891
	0x03B01304 B 0x3B02664
	0x03B01308 MOVZ W11, 0xE24E
	0x03B0130C MOVK W11, 0x40000
	0x03B01310 CMP W10, W11
	0x03B01314 B.LE 0x3B02740
	0x03B01318 MOVZ W11, 0xFF7E
	0x03B0131C MOVK W11, 0x40000
	0x03B01320 CMP W10, W11
	0x03B01324 B.EQ 0x3B0193C
	0x03B01328 MOVZ W8, 0xE556
	0x03B0132C MOVK W8, 0xE0000
	0x03B01330 CMP W10, W8
	0x03B01334 B.EQ 0x3B0385C
	0x03B01338 MOVZ W8, 0xFCEC
	0x03B0133C MOVK W8, 0xE0000
	0x03B01340 CMP W10, W8
	0x03B01344 B.NE 0x3B05A00
	0x03B01348 ADRP X8, 0x658000
	0x03B0134C LDR X8, [X8 + 0x2B8]
	0x03B01350 LDR X19, [X31 + 0x20]
	0x03B01354 LDR X1, [X8]
	0x03B01358 ADD X0, X19, 0x4F0
	0x03B0135C BL 0x2671074
	0x03B01360 STR W0, [X19 + 0x4EC]
	0x03B01364 B 0x3B00B64
	0x03B01368 MOVZ W11, 0x139D
	0x03B0136C MOVK W11, 0xCDC60000
	0x03B01370 CMP W10, W11
	0x03B01374 B.LE 0x3B027F0
	0x03B01378 MOVZ W11, 0x1531
	0x03B0137C MOVK W11, 0xE5710000
	0x03B01380 CMP W10, W11
	0x03B01384 B.EQ 0x3B0387C
	0x03B01388 MOVZ W11, 0xA456
	0x03B0138C MOVK W11, 0xE5710000
	0x03B01390 CMP W10, W11
	0x03B01394 B.EQ 0x3B03890
	0x03B01398 MOVZ W11, 0xC6BE
	0x03B0139C MOVK W11, 0xEC480000
	0x03B013A0 CMP W10, W11
	0x03B013A4 B.NE 0x3B05A00
	0x03B013A8 LDR W10, [X0 + 0xE0]
	0x03B013AC CBNZ W10, 0x3B013CC
	0x03B013B0 BL 0x1C16DFC
	0x03B013B4 ADRP X8, 0x657000
	0x03B013B8 LDR X8, [X8 + 0x3E8]
	0x03B013BC LDR X8, [X8]
	0x03B013C0 LDR X8, [X8 + 0xB8]
	0x03B013C4 LDR X9, [X8 + 0x88]
	0x03B013C8 CBZ X9, 0x3B05924
	0x03B013CC LDR W10, [X9 + 0x18]
	0x03B013D0 CBZ W10, 0x3B058BC
	0x03B013D4 LDR X1, [X8 + 0x80]
	0x03B013D8 LDP W2, W3, [X9 + 0x2C]
	0x03B013DC ADD X4, X31, 0x70
	0x03B013E0 STR W31, [X31 + 0x70]
	0x03B013E4 BL 0x3B0C268
	0x03B013E8 MOVZ W8, 0xC7000000
	0x03B013EC FMOV S1, W8
	0x03B013F0 FCMP S0, S1
	0x03B013F4 B.EQ 0x3B05A00
	0x03B013F8 MOVZ W8, 0x7F800000
	0x03B013FC FMOV S1, W8
	0x03B01400 FCVTZS W9, S0
	0x03B01404 FCMP S0, S1
	0x03B01408 MOVZ W8, 0x80000000
	0x03B0140C CSEL W8, W8, W9, EQ
	0x03B01410 CMP W8, 0x190
	0x03B01414 STR W8, [X31 + 0x26C]
	0x03B01418 B.LE 0x3B043E4
	0x03B0141C CMP W8, 0x258
	0x03B01420 B.LE 0x3B04B24
	0x03B01424 CMP W8, 0x2BC
	0x03B01428 B.EQ 0x3B04CC4
	0x03B0142C CMP W8, 0x320
	0x03B01430 B.EQ 0x3B04CC4
	0x03B01434 CMP W8, 0x384
	0x03B01438 B.EQ 0x3B04CC4
	0x03B0143C B 0x3B04CCC
	0x03B01440 MOVZ W11, 0xD9F7
	0x03B01444 MOVK W11, 0x4540000
	0x03B01448 CMP W10, W11
	0x03B0144C B.LE 0x3B028A0
	0x03B01450 MOVZ W11, 0x2798
	0x03B01454 MOVK W11, 0x5F80000
	0x03B01458 CMP W10, W11
	0x03B0145C B.EQ 0x3B03620
	0x03B01460 MOVZ W11, 0xFDF7
	0x03B01464 MOVK W11, 0x6290000
	0x03B01468 CMP W10, W11
	0x03B0146C B.EQ 0x3B028C0
	0x03B01470 MOVZ W8, 0x5107
	0x03B01474 MOVK W8, 0x14490000
	0x03B01478 B 0x3B01DA8
	0x03B0147C MOVZ W11, 0x7FE9
	0x03B01480 CMP W10, W11
	0x03B01484 B.LE 0x3B0298C
	0x03B01488 MOVZ W11, 0xA15F
	0x03B0148C CMP W10, W11
	0x03B01490 B.EQ 0x3B01C98
	0x03B01494 MOVZ W8, 0xA825
	0x03B01498 CMP W10, W8
	0x03B0149C B.EQ 0x3B0389C
	0x03B014A0 MOVZ W8, 0xA83A
	0x03B014A4 CMP W10, W8
	0x03B014A8 B.NE 0x3B05A00
	0x03B014AC LDR X8, [X31 + 0x20]
	0x03B014B0 LDRB W8, [X8 + 0x431]
	0x03B014B4 CBZ W8, 0x3B00B64
	0x03B014B8 LDR X8, [X31 + 0x20]
	0x03B014BC LDRB W8, [X8 + 0x3F5]
	0x03B014C0 CBNZ W8, 0x3B00B64
	0x03B014C4 LDR X8, [X31 + 0x20]
	0x03B014C8 LDR X8, [X8 + 0x368]
	0x03B014CC CBZ X8, 0x3B05924
	0x03B014D0 MOV X21, X8
	0x03B014D4 LDR X9, [X21 + 0x48]!
	0x03B014D8 CBZ X9, 0x3B05924
	0x03B014DC LDURSW X19, [X21 - 0x20]
	0x03B014E0 LDR W9, [X9 + 0x18]
	0x03B014E4 ADD W22, W19, 0x1
	0x03B014E8 CMP W22, W9
	0x03B014EC B.LE 0x3B0152C
	0x03B014F0 ADRP X8, 0x657000
	0x03B014F4 LDR X8, [X8 + 0x368]
	0x03B014F8 LDR X0, [X8]
	0x03B014FC LDR W8, [X0 + 0xE0]
	0x03B01500 CBNZ W8, 0x3B01508
	0x03B01504 BL 0x1C16DFC
	0x03B01508 ADRP X8, 0x658000
	0x03B0150C LDR X8, [X8 + 0x240]
	0x03B01510 MOV X0, X21
	0x03B01514 MOV W1, W22
	0x03B01518 LDR X2, [X8]
	0x03B0151C BL 0x22990B8
	0x03B01520 LDR X8, [X31 + 0x20]
	0x03B01524 LDR X8, [X8 + 0x368]
	0x03B01528 CBZ X8, 0x3B05924
	0x03B0152C LDR X21, [X8 + 0x48]
	0x03B01530 CBZ X21, 0x3B05924
	0x03B01534 LDR W8, [X21 + 0x18]
	0x03B01538 CMP W19, W8
	0x03B0153C B.CS 0x3B058BC
	0x03B01540 LDR X9, [X31 + 0x20]
	0x03B01544 MOVZ W8, 0x28
	0x03B01548 MADD X8, X19, X8, X21
	0x03B0154C STR X9, [X8 + 0x20]
	0x03B01550 ADRP X8, 0x657000
	0x03B01554 LDR X8, [X8 + 0x3E8]
	0x03B01558 LDR X0, [X8]
	0x03B0155C LDR W8, [X0 + 0xE0]
	0x03B01560 CBNZ W8, 0x3B01574
	0x03B01564 BL 0x1C16DFC
	0x03B01568 ADRP X8, 0x657000
	0x03B0156C LDR X8, [X8 + 0x3E8]
	0x03B01570 LDR X0, [X8]
	0x03B01574 LDR X8, [X0 + 0xB8]
	0x03B01578 LDR X9, [X8 + 0x88]
	0x03B0157C CBZ X9, 0x3B05924
	0x03B01580 LDR W10, [X9 + 0x18]
	0x03B01584 CBZ W10, 0x3B058BC
	0x03B01588 LDR W10, [X21 + 0x18]
	0x03B0158C CMP W19, W10
	0x03B01590 B.CS 0x3B058BC
	0x03B01594 LDR W10, [X9 + 0x24]
	0x03B01598 MOVZ W11, 0x28
	0x03B0159C MADD X11, X19, X11, X21
	0x03B015A0 STR W10, [X11 + 0x28]
	0x03B015A4 LDR X10, [X31 + 0x20]
	0x03B015A8 LDR X10, [X10 + 0x368]
	0x03B015AC CBZ X10, 0x3B05924
	0x03B015B0 LDR X10, [X10 + 0x48]
	0x03B015B4 CBZ X10, 0x3B05924
	0x03B015B8 LDR W11, [X10 + 0x18]
	0x03B015BC CMP W19, W11
	0x03B015C0 B.CS 0x3B058BC
	0x03B015C4 LDR X11, [X31 + 0x20]
	0x03B015C8 MOVZ W12, 0x28
	0x03B015CC MADD X10, X19, X12, X10
	0x03B015D0 ADD X0, X10, 0x20
	0x03B015D4 LDR W11, [X11 + 0x494]
	0x03B015D8 MOV X4, X31
	0x03B015DC STR W11, [X10 + 0x34]
	0x03B015E0 LDR W2, [X9 + 0x2C]
	0x03B015E4 ADD W11, W2, W20
	0x03B015E8 STR W11, [X10 + 0x2C]
	0x03B015EC LDR W3, [X9 + 0x30]
	0x03B015F0 STR W3, [X10 + 0x30]
	0x03B015F4 LDR X1, [X8 + 0x80]
	0x03B015F8 BL 0x3ADB12C
	0x03B015FC B 0x3B00B64
	0x03B01600 MOVZ W11, 0xE5AF
	0x03B01604 MOVK W11, 0x100000
	0x03B01608 CMP W10, W11
	0x03B0160C B.LE 0x3B02AAC
	0x03B01610 MOVZ W11, 0xD27
	0x03B01614 MOVK W11, 0x110000
	0x03B01618 CMP W10, W11
	0x03B0161C B.EQ 0x3B03C34
	0x03B01620 MOVZ W11, 0xA0C6
	0x03B01624 MOVK W11, 0x130000
	0x03B01628 CMP W10, W11
	0x03B0162C B.EQ 0x3B024BC
	0x03B01630 MOVZ W11, 0xB2E3
	0x03B01634 MOVK W11, 0x140000
	0x03B01638 CMP W10, W11
	0x03B0163C B.NE 0x3B05A00
	0x03B01640 LDR W10, [X0 + 0xE0]
	0x03B01644 CBNZ W10, 0x3B01664
	0x03B01648 BL 0x1C16DFC
	0x03B0164C ADRP X8, 0x657000
	0x03B01650 LDR X8, [X8 + 0x3E8]
	0x03B01654 LDR X8, [X8]
	0x03B01658 LDR X8, [X8 + 0xB8]
	0x03B0165C LDR X9, [X8 + 0x88]
	0x03B01660 CBZ X9, 0x3B05924
	0x03B01664 LDR W10, [X9 + 0x18]
	0x03B01668 CBZ W10, 0x3B058BC
	0x03B0166C LDR X1, [X8 + 0x80]
	0x03B01670 LDP W2, W3, [X9 + 0x2C]
	0x03B01674 ADD X4, X31, 0x70
	0x03B01678 STR W31, [X31 + 0x70]
	0x03B0167C BL 0x3B0C268
	0x03B01680 MOVZ W8, 0xC7000000
	0x03B01684 FMOV S1, W8
	0x03B01688 FCMP S0, S1
	0x03B0168C B.EQ 0x3B05A00
	0x03B01690 LDR W8, [X31 + 0x2C]
	0x03B01694 CBZ W8, 0x3B04B38
	0x03B01698 LDR W8, [X31 + 0x2C]
	0x03B0169C CMP W8, 0x1
	0x03B016A0 B.NE 0x3B03088
	0x03B016A4 LDR X10, [X31 + 0x20]
	0x03B016A8 ADRP X9, 0xFFFFFFFFFCFE9000
	0x03B016AC LDR V1, [X9 + 0xBC]
	0x03B016B0 FMOV S3, 1
	0x03B016B4 LDRB W8, [X10 + 0x305]
	0x03B016B8 LDR V2, [X10 + 0x1E8]
	0x03B016BC CMP W8, 0x0
	0x03B016C0 FCSEL S1, S1, S3, EQ
	0x03B016C4 FMUL S0, S0, S1
	0x03B016C8 FMUL S0, S2, S0
	0x03B016CC B 0x3B04B58
	0x03B016D0 CMP W10, 0x73
	0x03B016D4 B.LE 0x3B02ADC
	0x03B016D8 CMP W10, 0x75
	0x03B016DC B.EQ 0x3B03C44
	0x03B016E0 CMP W10, 0x18B
	0x03B016E4 B.EQ 0x3B03D5C
	0x03B016E8 CMP W10, 0x192
	0x03B016EC B.NE 0x3B05A00
	0x03B016F0 LDR X8, [X31 + 0x20]
	0x03B016F4 LDRB W8, [X8 + 0x258]
	0x03B016F8 TBNZ X8, 0x1, 0x3B00B64
	0x03B016FC ADRP X8, 0x658000
	0x03B01700 LDR X8, [X8 + 0x2B0]
	0x03B01704 LDR X19, [X31 + 0x20]
	0x03B01708 LDR X1, [X8]
	0x03B0170C ADD X0, X19, 0x5D0
	0x03B01710 BL 0x2671CCC
	0x03B01714 STR W0, [X19 + 0x5F0]
	0x03B01718 ADD X0, X19, 0x260
	0x03B0171C MOVZ W1, 0x2
	0x03B01720 MOV X2, X31
	0x03B01724 BL 0x3B1D034
	0x03B01728 ANDS W31, W0, 0xFF
	0x03B0172C B.NE 0x3B00B64
	0x03B01730 LDR X9, [X31 + 0x20]
	0x03B01734 LDR W8, [X9 + 0x25C]
	0x03B01738 AND W8, W8, 0xFFFFFFFD
	0x03B0173C B 0x3B031F0
	0x03B01740 MOVZ W8, 0xFE3D
	0x03B01744 MOVK W8, 0x6A0000
	0x03B01748 CMP W10, W8
	0x03B0174C B.LE 0x3B02C04
	0x03B01750 MOVZ W8, 0xA308
	0x03B01754 MOVK W8, 0x6B0000
	0x03B01758 CMP W10, W8
	0x03B0175C B.EQ 0x3B03DB4
	0x03B01760 MOVZ W8, 0xCB9A
	0x03B01764 MOVK W8, 0x6C0000
	0x03B01768 CMP W10, W8
	0x03B0176C B.EQ 0x3B02AD0
	0x03B01770 MOVZ W8, 0x9365
	0x03B01774 MOVK W8, 0x710000
	0x03B01778 CMP W10, W8
	0x03B0177C B.NE 0x3B05A00
	0x03B01780 LDR X8, [X31 + 0x20]
	0x03B01784 LDRB W8, [X8 + 0x431]
	0x03B01788 CBZ W8, 0x3B01828
	0x03B0178C ADRP X8, 0x658000
	0x03B01790 LDR X8, [X8 + 0x280]
	0x03B01794 LDR X19, [X31 + 0x20]
	0x03B01798 LDR X1, [X8]
	0x03B0179C ADD X0, X19, 0x5F8
	0x03B017A0 BL 0x2671ECC
	0x03B017A4 STR W0, [X31 + 0x26C]
	0x03B017A8 ADD X0, X31, 0x26C
	0x03B017AC MOV X1, X31
	0x03B017B0 BL 0x337B6E0
	0x03B017B4 LDR W8, [X19 + 0x494]
	0x03B017B8 MOV X20, X0
	0x03B017BC ADD X0, X31, 0x26C
	0x03B017C0 MOV X1, X31
	0x03B017C4 SUB W8, W8, 0x1
	0x03B017C8 STR W8, [X31 + 0x26C]
	0x03B017CC BL 0x337B6E0
	0x03B017D0 ADRP X8, 0x658000
	0x03B017D4 LDR X8, [X8 + 0x2E8]
	0x03B017D8 ADRP X9, 0x658000
	0x03B017DC LDR X9, [X9 + 0x300]
	0x03B017E0 MOV X3, X0
	0x03B017E4 LDR X8, [X8]
	0x03B017E8 MOV X1, X20
	0x03B017EC LDR X2, [X9]
	0x03B017F0 MOV X4, X31
	0x03B017F4 MOV X0, X8
	0x03B017F8 BL 0x32277C4
	0x03B017FC ADRP X8, 0x5F2000
	0x03B01800 LDR X8, [X8 + 0xA28]
	0x03B01804 MOV X20, X0
	0x03B01808 LDR X8, [X8]
	0x03B0180C LDR W9, [X8 + 0xE0]
	0x03B01810 CBNZ W9, 0x3B0181C
	0x03B01814 MOV X0, X8
	0x03B01818 BL 0x1C16DFC
	0x03B0181C MOV X0, X20
	0x03B01820 MOV X1, X31
	0x03B01824 BL 0x3C06048
	0x03B01828 ADRP X8, 0x658000
	0x03B0182C LDR X8, [X8 + 0x2B0]
	0x03B01830 LDR X1, [X8]
	0x03B01834 LDR X8, [X31 + 0x20]
	0x03B01838 ADD X0, X8, 0x5F8
	0x03B0183C BL 0x2671CCC
	0x03B01840 B 0x3B00B64
	0x03B01844 CMP W10, 0xC8F
	0x03B01848 B.LE 0x3B02C34
	0x03B0184C CMP W10, 0xC93
	0x03B01850 MOVZ W20, 0x1
	0x03B01854 B.EQ 0x3B05A04
	0x03B01858 CMP W10, 0xC9D
	0x03B0185C B.EQ 0x3B05A04
	0x03B01860 MOVZ W11, 0x11CC
	0x03B01864 CMP W10, W11
	0x03B01868 B.NE 0x3B05A00
	0x03B0186C LDR W10, [X0 + 0xE0]
	0x03B01870 CBNZ W10, 0x3B01890
	0x03B01874 BL 0x1C16DFC
	0x03B01878 ADRP X8, 0x657000
	0x03B0187C LDR X8, [X8 + 0x3E8]
	0x03B01880 LDR X8, [X8]
	0x03B01884 LDR X8, [X8 + 0xB8]
	0x03B01888 LDR X9, [X8 + 0x88]
	0x03B0188C CBZ X9, 0x3B05924
	0x03B01890 LDR W10, [X9 + 0x18]
	0x03B01894 CBZ W10, 0x3B058BC
	0x03B01898 LDR X1, [X8 + 0x80]
	0x03B0189C LDP W2, W3, [X9 + 0x2C]
	0x03B018A0 ADD X4, X31, 0x70
	0x03B018A4 STR W31, [X31 + 0x70]
	0x03B018A8 BL 0x3B0C268
	0x03B018AC MOVZ W8, 0xC7000000
	0x03B018B0 FMOV S1, W8
	0x03B018B4 FCMP S0, S1
	0x03B018B8 B.EQ 0x3B05A00
	0x03B018BC LDR W8, [X31 + 0x2C]
	0x03B018C0 CMP W8, 0x2
	0x03B018C4 B.EQ 0x3B04B60
	0x03B018C8 LDR W8, [X31 + 0x2C]
	0x03B018CC CMP W8, 0x1
	0x03B018D0 B.EQ 0x3B04B80
	0x03B018D4 LDR W8, [X31 + 0x2C]
	0x03B018D8 CBNZ W8, 0x3B05A00
	0x03B018DC LDR X10, [X31 + 0x20]
	0x03B018E0 ADRP X9, 0xFFFFFFFFFCFE9000
	0x03B018E4 LDR V1, [X9 + 0xBC]
	0x03B018E8 FMOV S2, 1
	0x03B018EC LDRB W8, [X10 + 0x305]
	0x03B018F0 CMP W8, 0x0
	0x03B018F4 FCSEL S1, S1, S2, EQ
	0x03B018F8 B 0x3B04BA4
	0x03B018FC MOVZ W11, 0x7302
	0x03B01900 MOVK W11, 0x30000
	0x03B01904 CMP W10, W11
	0x03B01908 B.LE 0x3B02C40
	0x03B0190C MOVZ W11, 0x79E6
	0x03B01910 MOVK W11, 0x30000
	0x03B01914 CMP W10, W11
	0x03B01918 B.EQ 0x3B05A00
	0x03B0191C MOVZ W11, 0x842E
	0x03B01920 MOVK W11, 0x30000
	0x03B01924 CMP W10, W11
	0x03B01928 B.EQ 0x3B02760
	0x03B0192C MOVZ W11, 0xA15E
	0x03B01930 MOVK W11, 0x30000
	0x03B01934 CMP W10, W11
	0x03B01938 B.NE 0x3B05A00
	0x03B0193C LDR W10, [X0 + 0xE0]
	0x03B01940 CBNZ W10, 0x3B01960
	0x03B01944 BL 0x1C16DFC
	0x03B01948 ADRP X8, 0x657000
	0x03B0194C LDR X8, [X8 + 0x3E8]
	0x03B01950 LDR X8, [X8]
	0x03B01954 LDR X8, [X8 + 0xB8]
	0x03B01958 LDR X9, [X8 + 0x88]
	0x03B0195C CBZ X9, 0x3B05924
	0x03B01960 LDR W10, [X9 + 0x18]
	0x03B01964 CBZ W10, 0x3B058BC
	0x03B01968 LDR X1, [X8 + 0x80]
	0x03B0196C LDP W2, W3, [X9 + 0x2C]
	0x03B01970 ADD X4, X31, 0x70
	0x03B01974 STR W31, [X31 + 0x70]
	0x03B01978 BL 0x3B0C268
	0x03B0197C MOVZ W8, 0xC7000000
	0x03B01980 FMOV S1, W8
	0x03B01984 FCMP S0, S1
	0x03B01988 B.EQ 0x3B05A00
	0x03B0198C LDR W8, [X31 + 0x2C]
	0x03B01990 CBZ W8, 0x3B04BB0
	0x03B01994 LDR W8, [X31 + 0x2C]
	0x03B01998 CMP W8, 0x1
	0x03B0199C B.EQ 0x3B05A00
	0x03B019A0 LDR W8, [X31 + 0x2C]
	0x03B019A4 CMP W8, 0x2
	0x03B019A8 B.NE 0x3B00B64
	0x03B019AC LDR X9, [X31 + 0x20]
	0x03B019B0 MOVZ W8, 0x42C80000
	0x03B019B4 FMOV S2, W8
	0x03B019B8 LDR V1, [X9 + 0x358]
	0x03B019BC FMUL S0, S0, S1
	0x03B019C0 FDIV S0, S0, S2
	0x03B019C4 STR S0, [X9 + 0x360]
	0x03B019C8 B 0x3B00B64
	0x03B019CC MOVZ W11, 0x65AA
	0x03B019D0 MOVK W11, 0x8FBB0000
	0x03B019D4 CMP W10, W11
	0x03B019D8 B.LE 0x3B02D74
	0x03B019DC MOVZ W11, 0x17D1
	0x03B019E0 MOVK W11, 0x91E40000
	0x03B019E4 CMP W10, W11
	0x03B019E8 B.EQ 0x3B02414
	0x03B019EC MOVZ W11, 0x1273
	0x03B019F0 MOVK W11, 0x92D30000
	0x03B019F4 CMP W10, W11
	0x03B019F8 B.EQ 0x3B01C48
	0x03B019FC MOVZ W11, 0x1E9D
	0x03B01A00 MOVK W11, 0x9B440000
	0x03B01A04 CMP W10, W11
	0x03B01A08 B.NE 0x3B05A00
	0x03B01A0C LDR W10, [X0 + 0xE0]
	0x03B01A10 CBNZ W10, 0x3B01A30
	0x03B01A14 BL 0x1C16DFC
	0x03B01A18 ADRP X8, 0x657000
	0x03B01A1C LDR X8, [X8 + 0x3E8]
	0x03B01A20 LDR X8, [X8]
	0x03B01A24 LDR X8, [X8 + 0xB8]
	0x03B01A28 LDR X9, [X8 + 0x88]
	0x03B01A2C CBZ X9, 0x3B05924
	0x03B01A30 LDR W10, [X9 + 0x18]
	0x03B01A34 CBZ W10, 0x3B058BC
	0x03B01A38 LDR X1, [X8 + 0x80]
	0x03B01A3C LDP W2, W3, [X9 + 0x2C]
	0x03B01A40 ADD X4, X31, 0x70
	0x03B01A44 STR W31, [X31 + 0x70]
	0x03B01A48 BL 0x3B0C268
	0x03B01A4C MOVZ W8, 0xC7000000
	0x03B01A50 FMOV S1, W8
	0x03B01A54 FCMP S0, S1
	0x03B01A58 B.EQ 0x3B05A00
	0x03B01A5C LDR W8, [X31 + 0x2C]
	0x03B01A60 CBZ W8, 0x3B04BD8
	0x03B01A64 LDR W8, [X31 + 0x2C]
	0x03B01A68 CMP W8, 0x1
	0x03B01A6C B.EQ 0x3B04BFC
	0x03B01A70 LDR W8, [X31 + 0x2C]
	0x03B01A74 CMP W8, 0x2
	0x03B01A78 B.NE 0x3B04C28
	0x03B01A7C LDR X8, [X31 + 0x20]
	0x03B01A80 FMOV S2, -1
	0x03B01A84 FMOV S4, W31
	0x03B01A88 LDR V1, [X8 + 0x360]
	0x03B01A8C LDR V3, [X8 + 0x358]
	0x03B01A90 MOVZ W8, 0x42C80000
	0x03B01A94 FCMP S1, S2
	0x03B01A98 FCSEL S1, S4, S1, EQ
	0x03B01A9C FSUB S1, S3, S1
	0x03B01AA0 FMUL S0, S0, S1
	0x03B01AA4 FMOV S1, W8
	0x03B01AA8 FDIV S0, S0, S1
	0x03B01AAC B 0x3B04C30
	0x03B01AB0 MOVZ W11, 0xC966
	0x03B01AB4 MOVK W11, 0x419B0000
	0x03B01AB8 CMP W10, W11
	0x03B01ABC B.EQ 0x3B03DC0
	0x03B01AC0 MOVZ W11, 0x5578
	0x03B01AC4 MOVK W11, 0x421F0000
	0x03B01AC8 CMP W10, W11
	0x03B01ACC B.EQ 0x3B03588
	0x03B01AD0 MOVZ W11, 0xE49D
	0x03B01AD4 MOVK W11, 0x421F0000
	0x03B01AD8 B 0x3B02808
	0x03B01ADC MOVZ W8, 0x6109
	0x03B01AE0 MOVK W8, 0x20000
	0x03B01AE4 CMP W10, W8
	0x03B01AE8 B.EQ 0x3B02DCC
	0x03B01AEC MOVZ W8, 0x6490
	0x03B01AF0 B 0x3B02484
	0x03B01AF4 MOVZ W11, 0xD669
	0x03B01AF8 MOVK W11, 0x200000
	0x03B01AFC CMP W10, W11
	0x03B01B00 B.EQ 0x3B03024
	0x03B01B04 MOVZ W11, 0xFEFB
	0x03B01B08 MOVK W11, 0x210000
	0x03B01B0C CMP W10, W11
	0x03B01B10 B.NE 0x3B05A00
	0x03B01B14 LDR W10, [X0 + 0xE0]
	0x03B01B18 CBNZ W10, 0x3B01B38
	0x03B01B1C BL 0x1C16DFC
	0x03B01B20 ADRP X8, 0x657000
	0x03B01B24 LDR X8, [X8 + 0x3E8]
	0x03B01B28 LDR X8, [X8]
	0x03B01B2C LDR X8, [X8 + 0xB8]
	0x03B01B30 LDR X9, [X8 + 0x88]
	0x03B01B34 CBZ X9, 0x3B05924
	0x03B01B38 LDR W10, [X9 + 0x18]
	0x03B01B3C CBZ W10, 0x3B058BC
	0x03B01B40 LDR X1, [X8 + 0x80]
	0x03B01B44 LDP W2, W3, [X9 + 0x2C]
	0x03B01B48 ADD X4, X31, 0x70
	0x03B01B4C STR W31, [X31 + 0x70]
	0x03B01B50 BL 0x3B0C268
	0x03B01B54 MOVZ W8, 0xC7000000
	0x03B01B58 MOV V11.16B, V0.16B
	0x03B01B5C FMOV S0, W8
	0x03B01B60 FCMP S11, S0
	0x03B01B64 B.EQ 0x3B05A00
	0x03B01B68 ADRP X19, 0x8D7000
	0x03B01B6C LDRB W8, [X19 + 0x783]
	0x03B01B70 CBNZ W8, 0x3B01B88
	0x03B01B74 ADRP X0, 0x5F2000
	0x03B01B78 LDR X0, [X0 + 0x5A0]
	0x03B01B7C BL 0x1C16CF4
	0x03B01B80 MOVZ W8, 0x1
	0x03B01B84 STRB W8, [X19 + 0x783]
	0x03B01B88 ADRP X19, 0x5F2000
	0x03B01B8C LDR X19, [X19 + 0x5A0]
	0x03B01B90 ADRP X9, 0xFFFFFFFFFCFE9000
	0x03B01B94 LDR V0, [X9 + 0x104]
	0x03B01B98 FMOV S1, W31
	0x03B01B9C LDR X8, [X19]
	0x03B01BA0 MOV X0, X31
	0x03B01BA4 FMUL S2, S11, S0
	0x03B01BA8 FMOV S0, W31
	0x03B01BAC LDR X8, [X8 + 0xB8]
	0x03B01BB0 LDP S10, S9, [X8]
	0x03B01BB4 LDR V8, [X8 + 0x8]
	0x03B01BB8 BL 0x3C2A574
	0x03B01BBC ADRP X20, 0x8D7000
	0x03B01BC0 LDRB W8, [X20 + 0x85B]
	0x03B01BC4 MOV V11.16B, V0.16B
	0x03B01BC8 MOV V12.16B, V1.16B
	0x03B01BCC MOV V13.16B, V2.16B
	0x03B01BD0 MOV V14.16B, V3.16B
	0x03B01BD4 CBNZ W8, 0x3B01BEC
	0x03B01BD8 ADRP X0, 0x5F2000
	0x03B01BDC LDR X0, [X0 + 0x5A0]
	0x03B01BE0 BL 0x1C16CF4
	0x03B01BE4 MOVZ W8, 0x1
	0x03B01BE8 STRB W8, [X20 + 0x85B]
	0x03B01BEC LDR X8, [X19]
	0x03B01BF0 MOV V1.16B, V9.16B
	0x03B01BF4 MOV V2.16B, V8.16B
	0x03B01BF8 MOV V3.16B, V11.16B
	0x03B01BFC LDR X8, [X8 + 0xB8]
	0x03B01C00 MOV V4.16B, V12.16B
	0x03B01C04 MOV V5.16B, V13.16B
	0x03B01C08 MOV V6.16B, V14.16B
	0x03B01C0C LDR V0, [X8 + 0x14]
	0x03B01C10 LDUR X9, [X8 + 0xC]
	0x03B01C14 ADD X8, X31, 0x30
	0x03B01C18 STR S0, [X31 + 0x8]
	0x03B01C1C MOV V0.16B, V10.16B
	0x03B01C20 STR X9, [X31]
	0x03B01C24 B 0x3B02D40
	0x03B01C28 MOVZ W11, 0xAAC9
	0x03B01C2C MOVK W11, 0xF40000
	0x03B01C30 CMP W10, W11
	0x03B01C34 B.EQ 0x3B03098
	0x03B01C38 MOVZ W8, 0xFC43
	0x03B01C3C MOVK W8, 0x2D90000
	0x03B01C40 CMP W10, W8
	0x03B01C44 B.NE 0x3B05A00
	0x03B01C48 LDR X8, [X31 + 0x20]
	0x03B01C4C LDRB W8, [X8 + 0x258]
	0x03B01C50 TBNZ X8, 0x4, 0x3B00B64
	0x03B01C54 LDR X8, [X31 + 0x20]
	0x03B01C58 MOVZ W1, 0x10
	0x03B01C5C MOV X2, X31
	0x03B01C60 ADD X0, X8, 0x260
	0x03B01C64 BL 0x3B1D034
	0x03B01C68 ANDS W31, W0, 0xFF
	0x03B01C6C B.NE 0x3B00B64
	0x03B01C70 LDR X9, [X31 + 0x20]
	0x03B01C74 LDR W8, [X9 + 0x25C]
	0x03B01C78 AND W8, W8, 0xFFFFFFEF
	0x03B01C7C B 0x3B031F0
	0x03B01C80 MOVZ W11, 0x589F
	0x03B01C84 CMP W10, W11
	0x03B01C88 B.EQ 0x3B03120
	0x03B01C8C MOVZ W11, 0x6F5F
	0x03B01C90 CMP W10, W11
	0x03B01C94 B.NE 0x3B05A00
	0x03B01C98 LDR W10, [X0 + 0xE0]
	0x03B01C9C CBNZ W10, 0x3B01CBC
	0x03B01CA0 BL 0x1C16DFC
	0x03B01CA4 ADRP X8, 0x657000
	0x03B01CA8 LDR X8, [X8 + 0x3E8]
	0x03B01CAC LDR X0, [X8]
	0x03B01CB0 LDR X8, [X0 + 0xB8]
	0x03B01CB4 LDR X9, [X8 + 0x88]
	0x03B01CB8 CBZ X9, 0x3B05924
	0x03B01CBC LDR W10, [X9 + 0x18]
	0x03B01CC0 CBZ W10, 0x3B058BC
	0x03B01CC4 CMP W10, 0x1
	0x03B01CC8 B.EQ 0x3B058BC
	0x03B01CCC LDR W21, [X9 + 0x24]
	0x03B01CD0 MOVZ W10, 0x756B
	0x03B01CD4 MOVK W10, 0x2D930000
	0x03B01CD8 CMP W21, W10
	0x03B01CDC B.EQ 0x3B01CF0
	0x03B01CE0 MOVZ W10, 0xF54B
	0x03B01CE4 MOVK W10, 0x1F310000
	0x03B01CE8 CMP W21, W10
	0x03B01CEC B.NE 0x3B03F78
	0x03B01CF0 LDR W9, [X0 + 0xE0]
	0x03B01CF4 CBNZ W9, 0x3B01D0C
	0x03B01CF8 BL 0x1C16DFC
	0x03B01CFC ADRP X8, 0x657000
	0x03B01D00 LDR X8, [X8 + 0x3E8]
	0x03B01D04 LDR X8, [X8]
	0x03B01D08 LDR X8, [X8 + 0xB8]
	0x03B01D0C LDR X9, [X8]
	0x03B01D10 CBZ X9, 0x3B05924
	0x03B01D14 LDR W10, [X9 + 0x18]
	0x03B01D18 CBZ W10, 0x3B058BC
	0x03B01D1C LDR X10, [X9 + 0x28]
	0x03B01D20 LDR X11, [X31 + 0x20]
	0x03B01D24 ADD X0, X8, 0x10
	0x03B01D28 ADRP X8, 0x658000
	0x03B01D2C STR X10, [X11 + 0x100]
	0x03B01D30 LDR X10, [X9 + 0x38]
	0x03B01D34 STR X10, [X11 + 0x118]
	0x03B01D38 LDR X8, [X8 + 0x270]
	0x03B01D3C STR W31, [X11 + 0x120]
	0x03B01D40 LDP V2, V0, [X9 + 0x30]
	0x03B01D44 LDR X10, [X9 + 0x50]
	0x03B01D48 LDR V1, [X9 + 0x2]
	0x03B01D4C LDR X2, [X8]
	0x03B01D50 STP V2, V0, [X31 + 0x240]
	0x03B01D54 STR X10, [X31 + 0x260]
	0x03B01D58 STR V1, [X31 + 0x23]
	0x03B01D5C B 0x3B02974
	0x03B01D60 MOVZ W8, 0x80AB
	0x03B01D64 MOVK W8, 0xF0000
	0x03B01D68 CMP W10, W8
	0x03B01D6C B.EQ 0x3B02AD0
	0x03B01D70 MOVZ W8, 0x878F
	0x03B01D74 MOVK W8, 0xF0000
	0x03B01D78 B 0x3B02AC4
	0x03B01D7C CMP W10, 0x42
	0x03B01D80 B.EQ 0x3B031F8
	0x03B01D84 CMP W10, 0x49
	0x03B01D88 B.EQ 0x3B02ED8
	0x03B01D8C B 0x3B05A00
	0x03B01D90 MOVZ W9, 0x2766
	0x03B01D94 MOVK W9, 0x147B0000
	0x03B01D98 CMP W10, W9
	0x03B01D9C B.EQ 0x3B03228
	0x03B01DA0 MOVZ W8, 0x7507
	0x03B01DA4 MOVK W8, 0x161E0000
	0x03B01DA8 CMP W10, W8
	0x03B01DAC B.NE 0x3B05A00
	0x03B01DB0 ADRP X8, 0x658000
	0x03B01DB4 LDR X8, [X8 + 0x2A8]
	0x03B01DB8 LDR X19, [X31 + 0x20]
	0x03B01DBC LDR X1, [X8]
	0x03B01DC0 ADD X0, X19, 0x588
	0x03B01DC4 BL 0x2672F58
	0x03B01DC8 STR X0, [X19 + 0x580]
	0x03B01DCC B 0x3B00B64
	0x03B01DD0 MOVZ W8, 0xABC1
	0x03B01DD4 CMP W10, W8
	0x03B01DD8 B.EQ 0x3B03274
	0x03B01DDC MOVZ W8, 0xABD7
	0x03B01DE0 CMP W10, W8
	0x03B01DE4 B.EQ 0x3B02E90
	0x03B01DE8 B 0x3B05A00
	0x03B01DEC MOVZ W11, 0xFEF4
	0x03B01DF0 MOVK W11, 0x150000
	0x03B01DF4 CMP W10, W11
	0x03B01DF8 B.EQ 0x3B03284
	0x03B01DFC MOVZ W11, 0x9E9E
	0x03B01E00 MOVK W11, 0x160000
	0x03B01E04 CMP W10, W11
	0x03B01E08 B.NE 0x3B05A00
	0x03B01E0C LDR W10, [X0 + 0xE0]
	0x03B01E10 CBNZ W10, 0x3B01E30
	0x03B01E14 BL 0x1C16DFC
	0x03B01E18 ADRP X8, 0x657000
	0x03B01E1C LDR X8, [X8 + 0x3E8]
	0x03B01E20 LDR X0, [X8]
	0x03B01E24 LDR X8, [X0 + 0xB8]
	0x03B01E28 LDR X9, [X8 + 0x88]
	0x03B01E2C CBZ X9, 0x3B05924
	0x03B01E30 LDR W10, [X9 + 0x18]
	0x03B01E34 CBZ W10, 0x3B058BC
	0x03B01E38 LDR W10, [X9 + 0x28]
	0x03B01E3C CMP W10, 0x1
	0x03B01E40 B.EQ 0x3B04050
	0x03B01E44 CBNZ W10, 0x3B05A00
	0x03B01E48 ADRP X8, 0xFFFFFFFFFCFE9000
	0x03B01E4C LDR V10, [X8 + 0xBC]
	0x03B01E50 MOVZ W21, 0xD0E4
	0x03B01E54 MOVZ W19, 0x1
	0x03B01E58 MOVZ W20, 0x18
	0x03B01E5C MOVK W21, 0x40000
	0x03B01E60 MOVZ W22, 0xC7000000
	0x03B01E64 FMOV S9, 1
	0x03B01E68 FMOV S11, W31
	0x03B01E6C FMOV S12, -1
	0x03B01E70 MOVZ W23, 0x42C80000
	0x03B01E74 MOVZ W24, 0xA747
	0x03B01E78 LDR W8, [X0 + 0xE0]
	0x03B01E7C CBNZ W8, 0x3B01E90
	0x03B01E80 BL 0x1C16DFC
	0x03B01E84 ADRP X8, 0x657000
	0x03B01E88 LDR X8, [X8 + 0x3E8]
	0x03B01E8C LDR X0, [X8]
	0x03B01E90 LDR X8, [X0 + 0xB8]
	0x03B01E94 LDR X8, [X8 + 0x88]
	0x03B01E98 CBZ X8, 0x3B05924
	0x03B01E9C LDR W9, [X8 + 0x18]
	0x03B01EA0 CMP W19, W9
	0x03B01EA4 B.GE 0x3B00B64
	0x03B01EA8 LDR W9, [X0 + 0xE0]
	0x03B01EAC CBNZ W9, 0x3B01ECC
	0x03B01EB0 BL 0x1C16DFC
	0x03B01EB4 ADRP X8, 0x657000
	0x03B01EB8 LDR X8, [X8 + 0x3E8]
	0x03B01EBC LDR X0, [X8]
	0x03B01EC0 LDR X8, [X0 + 0xB8]
	0x03B01EC4 LDR X8, [X8 + 0x88]
	0x03B01EC8 CBZ X8, 0x3B05924
	0x03B01ECC LDR W9, [X8 + 0x18]
	0x03B01ED0 CMP W19, W9
	0x03B01ED4 B.CS 0x3B058BC
	0x03B01ED8 SXTW X25, W19
	0x03B01EDC MADD X8, X25, X20, X8
	0x03B01EE0 LDR W8, [X8 + 0x20]
	0x03B01EE4 CBZ W8, 0x3B00B64
	0x03B01EE8 LDR W8, [X0 + 0xE0]
	0x03B01EEC CBNZ W8, 0x3B01F00
	0x03B01EF0 BL 0x1C16DFC
	0x03B01EF4 ADRP X8, 0x657000
	0x03B01EF8 LDR X8, [X8 + 0x3E8]
	0x03B01EFC LDR X0, [X8]
	0x03B01F00 LDR X9, [X0 + 0xB8]
	0x03B01F04 LDR X8, [X9 + 0x88]
	0x03B01F08 CBZ X8, 0x3B05924
	0x03B01F0C LDR W10, [X8 + 0x18]
	0x03B01F10 CMP W19, W10
	0x03B01F14 B.CS 0x3B058BC
	0x03B01F18 MADD X10, X25, X20, X8
	0x03B01F1C LDR W10, [X10 + 0x20]
	0x03B01F20 CMP W10, W21
	0x03B01F24 B.EQ 0x3B02008
	0x03B01F28 CMP W10, W24
	0x03B01F2C B.NE 0x3B02184
	0x03B01F30 LDR W10, [X0 + 0xE0]
	0x03B01F34 CBNZ W10, 0x3B01F54
	0x03B01F38 BL 0x1C16DFC
	0x03B01F3C ADRP X8, 0x657000
	0x03B01F40 LDR X8, [X8 + 0x3E8]
	0x03B01F44 LDR X8, [X8]
	0x03B01F48 LDR X9, [X8 + 0xB8]
	0x03B01F4C LDR X8, [X9 + 0x88]
	0x03B01F50 CBZ X8, 0x3B05924
	0x03B01F54 LDR W10, [X8 + 0x18]
	0x03B01F58 CMP W19, W10
	0x03B01F5C B.CS 0x3B058BC
	0x03B01F60 MADD X8, X25, X20, X8
	0x03B01F64 LDR X1, [X9 + 0x80]
	0x03B01F68 LDP W2, W3, [X8 + 0x2C]
	0x03B01F6C ADD X4, X31, 0x70
	0x03B01F70 STR W31, [X31 + 0x70]
	0x03B01F74 BL 0x3B0C268
	0x03B01F78 MOV V8.16B, V0.16B
	0x03B01F7C FMOV S0, W22
	0x03B01F80 FCMP S8, S0
	0x03B01F84 B.EQ 0x3B05A00
	0x03B01F88 ADRP X8, 0x657000
	0x03B01F8C LDR X8, [X8 + 0x3E8]
	0x03B01F90 LDR X0, [X8]
	0x03B01F94 LDR W8, [X0 + 0xE0]
	0x03B01F98 CBNZ W8, 0x3B01FAC
	0x03B01F9C BL 0x1C16DFC
	0x03B01FA0 ADRP X8, 0x657000
	0x03B01FA4 LDR X8, [X8 + 0x3E8]
	0x03B01FA8 LDR X0, [X8]
	0x03B01FAC LDR X8, [X0 + 0xB8]
	0x03B01FB0 LDR X8, [X8 + 0x88]
	0x03B01FB4 CBZ X8, 0x3B05924
	0x03B01FB8 LDR W9, [X8 + 0x18]
	0x03B01FBC CMP W19, W9
	0x03B01FC0 B.CS 0x3B058BC
	0x03B01FC4 MADD X8, X25, X20, X8
	0x03B01FC8 LDR W8, [X8 + 0x34]
	0x03B01FCC CBZ W8, 0x3B020E0
	0x03B01FD0 CMP W8, 0x1
	0x03B01FD4 B.EQ 0x3B020F8
	0x03B01FD8 CMP W8, 0x2
	0x03B01FDC B.NE 0x3B02118
	0x03B01FE0 LDR X8, [X31 + 0x20]
	0x03B01FE4 LDR V0, [X8 + 0x360]
	0x03B01FE8 LDR V1, [X8 + 0x358]
	0x03B01FEC FCMP S0, S12
	0x03B01FF0 FCSEL S0, S11, S0, EQ
	0x03B01FF4 FSUB S0, S1, S0
	0x03B01FF8 FMUL S0, S8, S0
	0x03B01FFC FMOV S1, W23
	0x03B02000 FDIV S0, S0, S1
	0x03B02004 B 0x3B02120
	0x03B02008 LDR W10, [X0 + 0xE0]
	0x03B0200C CBNZ W10, 0x3B0202C
	0x03B02010 BL 0x1C16DFC
	0x03B02014 ADRP X8, 0x656000
	0x03B02018 LDR X8, [X8 + 0x3E8]
	0x03B0201C LDR X8, [X8]
	0x03B02020 LDR X9, [X8 + 0xB8]
	0x03B02024 LDR X8, [X9 + 0x88]
	0x03B02028 CBZ X8, 0x3B05924
	0x03B0202C LDR W10, [X8 + 0x18]
	0x03B02030 CMP W19, W10
	0x03B02034 B.CS 0x3B058BC
	0x03B02038 MADD X8, X25, X20, X8
	0x03B0203C LDR X1, [X9 + 0x80]
	0x03B02040 LDP W2, W3, [X8 + 0x2C]
	0x03B02044 ADD X4, X31, 0x70
	0x03B02048 STR W31, [X31 + 0x70]
	0x03B0204C BL 0x3B0C268
	0x03B02050 MOV V8.16B, V0.16B
	0x03B02054 FMOV S0, W22
	0x03B02058 FCMP S8, S0
	0x03B0205C B.EQ 0x3B05A00
	0x03B02060 ADRP X8, 0x656000
	0x03B02064 LDR X8, [X8 + 0x3E8]
	0x03B02068 LDR X0, [X8]
	0x03B0206C LDR W8, [X0 + 0xE0]
	0x03B02070 CBNZ W8, 0x3B02084
	0x03B02074 BL 0x1C16DFC
	0x03B02078 ADRP X8, 0x656000
	0x03B0207C LDR X8, [X8 + 0x3E8]
	0x03B02080 LDR X0, [X8]
	0x03B02084 LDR X8, [X0 + 0xB8]
	0x03B02088 LDR X8, [X8 + 0x88]
	0x03B0208C CBZ X8, 0x3B05924
	0x03B02090 LDR W9, [X8 + 0x18]
	0x03B02094 CMP W19, W9
	0x03B02098 B.CS 0x3B058BC
	0x03B0209C MADD X8, X25, X20, X8
	0x03B020A0 LDR W8, [X8 + 0x34]
	0x03B020A4 CBZ W8, 0x3B02134
	0x03B020A8 CMP W8, 0x1
	0x03B020AC B.EQ 0x3B0214C
	0x03B020B0 CMP W8, 0x2
	0x03B020B4 B.NE 0x3B0216C
	0x03B020B8 LDR X8, [X31 + 0x20]
	0x03B020BC LDR V0, [X8 + 0x360]
	0x03B020C0 LDR V1, [X8 + 0x358]
	0x03B020C4 FCMP S0, S12
	0x03B020C8 FCSEL S0, S11, S0, EQ
	0x03B020CC FSUB S0, S1, S0
	0x03B020D0 FMUL S0, S8, S0
	0x03B020D4 FMOV S1, W23
	0x03B020D8 FDIV S0, S0, S1
	0x03B020DC B 0x3B02174
	0x03B020E0 LDR X8, [X31 + 0x20]
	0x03B020E4 LDRB W8, [X8 + 0x305]
	0x03B020E8 CMP W8, 0x0
	0x03B020EC FCSEL S0, S10, S9, EQ
	0x03B020F0 FMUL S0, S8, S0
	0x03B020F4 B 0x3B02120
	0x03B020F8 LDR X9, [X31 + 0x20]
	0x03B020FC LDRB W8, [X9 + 0x305]
	0x03B02100 LDR V0, [X9 + 0x1E8]
	0x03B02104 CMP W8, 0x0
	0x03B02108 FCSEL S1, S10, S9, EQ
	0x03B0210C FMUL S1, S8, S1
	0x03B02110 FMUL S0, S1, S0
	0x03B02114 B 0x3B02120
	0x03B02118 LDR X8, [X31 + 0x20]
	0x03B0211C LDR V0, [X8 + 0x350]
	0x03B02120 LDR X8, [X31 + 0x20]
	0x03B02124 FCMP S0, 0x0
	0x03B02128 FCSEL S0, S0, S11, GE
	0x03B0212C STR S0, [X8 + 0x350]
	0x03B02130 B 0x3B02184
	0x03B02134 LDR X8, [X31 + 0x20]
	0x03B02138 LDRB W8, [X8 + 0x305]
	0x03B0213C CMP W8, 0x0
	0x03B02140 FCSEL S0, S10, S9, EQ
	0x03B02144 FMUL S0, S8, S0
	0x03B02148 B 0x3B02174
	0x03B0214C LDR X9, [X31 + 0x20]
	0x03B02150 LDRB W8, [X9 + 0x305]
	0x03B02154 LDR V0, [X9 + 0x1E8]
	0x03B02158 CMP W8, 0x0
	0x03B0215C FCSEL S1, S10, S9, EQ
	0x03B02160 FMUL S1, S8, S1
	0x03B02164 FMUL S0, S1, S0
	0x03B02168 B 0x3B02174
	0x03B0216C LDR X8, [X31 + 0x20]
	0x03B02170 LDR V0, [X8 + 0x354]
	0x03B02174 LDR X8, [X31 + 0x20]
	0x03B02178 FCMP S0, 0x0
	0x03B0217C FCSEL S0, S0, S11, GE
	0x03B02180 STR S0, [X8 + 0x354]
	0x03B02184 ADD W19, W19, 0x1
	0x03B02188 B 0x3B01E78
	0x03B0218C CMP W10, 0x19C
	0x03B02190 B.EQ 0x3B02E38
	0x03B02194 CMP W10, 0x19E
	0x03B02198 B.EQ 0x3B0259C
	0x03B0219C B 0x3B05A00
	0x03B021A0 MOVZ W8, 0xA582
	0x03B021A4 MOVK W8, 0x720000
	0x03B021A8 CMP W10, W8
	0x03B021AC B.EQ 0x3B03314
	0x03B021B0 MOVZ W8, 0xF193
	0x03B021B4 MOVK W8, 0x730000
	0x03B021B8 CMP W10, W8
	0x03B021BC B.EQ 0x3B03004
	0x03B021C0 B 0x3B05A00
	0x03B021C4 MOVZ W8, 0x1278
	0x03B021C8 CMP W10, W8
	0x03B021CC B.EQ 0x3B03378
	0x03B021D0 MOVZ W8, 0x1286
	0x03B021D4 CMP W10, W8
	0x03B021D8 B.NE 0x3B05A00
	0x03B021DC LDR X8, [X31 + 0x20]
	0x03B021E0 LDR X8, [X8 + 0x100]
	0x03B021E4 CBZ X8, 0x3B05924
	0x03B021E8 LDR X9, [X31 + 0x20]
	0x03B021EC ADD X1, X8, 0x50
	0x03B021F0 ADD X0, X31, 0x270
	0x03B021F4 MOVZ W2, 0x60
	0x03B021F8 LDR V8, [X9 + 0x404]
	0x03B021FC BL 0x3EB1B30
	0x03B02200 ADD X0, X31, 0x270
	0x03B02204 MOV X1, X31
	0x03B02208 BL 0x3C9C018
	0x03B0220C FCMP S0, 0x0
	0x03B02210 FMOV S0, 1
	0x03B02214 B.LE 0x3B02240
	0x03B02218 LDR X8, [X31 + 0x20]
	0x03B0221C LDR X8, [X8 + 0x100]
	0x03B02220 CBZ X8, 0x3B05924
	0x03B02224 ADD X1, X8, 0x50
	0x03B02228 ADD X0, X31, 0x270
	0x03B0222C MOVZ W2, 0x60
	0x03B02230 BL 0x3EB1B30
	0x03B02234 ADD X0, X31, 0x270
	0x03B02238 MOV X1, X31
	0x03B0223C BL 0x3C9C018
	0x03B02240 LDR X19, [X31 + 0x20]
	0x03B02244 FMUL S1, S8, S0
	0x03B02248 ADRP X8, 0x657000
	0x03B0224C STR S1, [X19 + 0x404]
	0x03B02250 LDR V0, [X19 + 0x61C]
	0x03B02254 LDR X8, [X8 + 0x2A0]
	0x03B02258 ADD X0, X19, 0x620
	0x03B0225C LDR X1, [X8]
	0x03B02260 BL 0x2673508
	0x03B02264 LDR X8, [X19 + 0x100]
	0x03B02268 CBZ X8, 0x3B05924
	0x03B0226C LDR X19, [X31 + 0x20]
	0x03B02270 ADD X1, X8, 0x50
	0x03B02274 ADD X0, X31, 0x270
	0x03B02278 MOVZ W2, 0x60
	0x03B0227C LDR V8, [X19 + 0x1E8]
	0x03B02280 BL 0x3EB1B30
	0x03B02284 ADD X0, X31, 0x270
	0x03B02288 MOV X1, X31
	0x03B0228C BL 0x3C9BF88
	0x03B02290 LDR X8, [X19 + 0x100]
	0x03B02294 CBZ X8, 0x3B05924
	0x03B02298 MOV W20, W0
	0x03B0229C ADD X1, X8, 0x50
	0x03B022A0 ADD X0, X31, 0x270
	0x03B022A4 MOVZ W2, 0x60
	0x03B022A8 BL 0x3EB1B30
	0x03B022AC ADD X0, X31, 0x270
	0x03B022B0 MOV X1, X31
	0x03B022B4 BL 0x3C9BF98
	0x03B022B8 LDR X8, [X31 + 0x20]
	0x03B022BC LDR X8, [X8 + 0x100]
	0x03B022C0 CBZ X8, 0x3B05924
	0x03B022C4 LDR X19, [X31 + 0x20]
	0x03B022C8 ADRP X10, 0xFFFFFFFFFCFE8000
	0x03B022CC LDR V3, [X10 + 0xBC]
	0x03B022D0 SCVTF S1, W20
	0x03B022D4 LDRB W9, [X19 + 0x305]
	0x03B022D8 LDR V9, [X19 + 0x61C]
	0x03B022DC FMOV S2, 1
	0x03B022E0 FDIV S1, S8, S1
	0x03B022E4 CMP W9, 0x0
	0x03B022E8 FMUL S0, S1, S0
	0x03B022EC FCSEL S1, S3, S2, EQ
	0x03B022F0 ADD X1, X8, 0x50
	0x03B022F4 ADD X0, X31, 0x270
	0x03B022F8 MOVZ W2, 0x60
	0x03B022FC FMUL S8, S0, S1
	0x03B02300 BL 0x3EB1B30
	0x03B02304 ADD X0, X31, 0x270
	0x03B02308 MOV X1, X31
	0x03B0230C BL 0x3C9C008
	0x03B02310 LDR V1, [X19 + 0x404]
	0x03B02314 FMUL S0, S8, S0
	0x03B02318 ADD X0, X19, 0x260
	0x03B0231C MOVZ W1, 0x80
	0x03B02320 FMUL S0, S0, S1
	0x03B02324 FADD S0, S9, S0
	0x03B02328 MOV X2, X31
	0x03B0232C STR S0, [X19 + 0x61C]
	0x03B02330 BL 0x3B1CF38
	0x03B02334 LDR W8, [X19 + 0x25C]
	0x03B02338 ORR W8, W8, 0x80
	0x03B0233C B 0x3B034D8
	0x03B02340 MOVZ W11, 0x35CD
	0x03B02344 MOVK W11, 0x40000
	0x03B02348 CMP W10, W11
	0x03B0234C B.EQ 0x3B034E0
	0x03B02350 MOVZ W11, 0x371E
	0x03B02354 MOVK W11, 0x40000
	0x03B02358 CMP W10, W11
	0x03B0235C B.NE 0x3B05A00
	0x03B02360 LDR W10, [X0 + 0xE0]
	0x03B02364 CBNZ W10, 0x3B02384
	0x03B02368 BL 0x1C16DFC
	0x03B0236C ADRP X8, 0x656000
	0x03B02370 LDR X8, [X8 + 0x3E8]
	0x03B02374 LDR X0, [X8]
	0x03B02378 LDR X8, [X0 + 0xB8]
	0x03B0237C LDR X9, [X8 + 0x88]
	0x03B02380 CBZ X9, 0x3B05924
	0x03B02384 LDR W10, [X9 + 0x18]
	0x03B02388 CBZ W10, 0x3B058BC
	0x03B0238C LDR W9, [X9 + 0x30]
	0x03B02390 CMP W9, 0x3
	0x03B02394 B.NE 0x3B05A00
	0x03B02398 LDR W9, [X0 + 0xE0]
	0x03B0239C CBNZ W9, 0x3B023B4
	0x03B023A0 BL 0x1C16DFC
	0x03B023A4 ADRP X8, 0x656000
	0x03B023A8 LDR X8, [X8 + 0x3E8]
	0x03B023AC LDR X8, [X8]
	0x03B023B0 LDR X8, [X8 + 0xB8]
	0x03B023B4 LDR X19, [X8 + 0x80]
	0x03B023B8 CBZ X19, 0x3B05924
	0x03B023BC LDR W8, [X19 + 0x18]
	0x03B023C0 CMP W8, 0x7
	0x03B023C4 B.LS 0x3B058BC
	0x03B023C8 CMP W8, 0x8
	0x03B023CC B.EQ 0x3B058BC
	0x03B023D0 LDRH W1, [X19 + 0x2E]
	0x03B023D4 BL 0x3B0B580
	0x03B023D8 LDRH W1, [X19 + 0x30]
	0x03B023DC MOV W20, W0
	0x03B023E0 BL 0x3B0B580
	0x03B023E4 LDR X9, [X31 + 0x20]
	0x03B023E8 ADD W8, W0, W20, 0x4, LSL
	0x03B023EC STRB W8, [X9 + 0x4EF]
	0x03B023F0 B 0x3B00B64
	0x03B023F4 MOVZ W8, 0x61CA
	0x03B023F8 MOVK W8, 0x9C8F0000
	0x03B023FC CMP W10, W8
	0x03B02400 B.EQ 0x3B02D94
	0x03B02404 MOVZ W8, 0x13F1
	0x03B02408 MOVK W8, 0x9EB80000
	0x03B0240C CMP W10, W8
	0x03B02410 B.NE 0x3B05A00
	0x03B02414 LDR X8, [X31 + 0x20]
	0x03B02418 LDRB W8, [X8 + 0x258]
	0x03B0241C TBNZ X8, 0x5, 0x3B00B64
	0x03B02420 LDR X8, [X31 + 0x20]
	0x03B02424 MOVZ W1, 0x20
	0x03B02428 MOV X2, X31
	0x03B0242C ADD X0, X8, 0x260
	0x03B02430 BL 0x3B1D034
	0x03B02434 ANDS W31, W0, 0xFF
	0x03B02438 B.NE 0x3B00B64
	0x03B0243C LDR X9, [X31 + 0x20]
	0x03B02440 LDR W8, [X9 + 0x25C]
	0x03B02444 AND W8, W8, 0xFFFFFFDF
	0x03B02448 B 0x3B031F0
	0x03B0244C MOVZ W8, 0xF9C8
	0x03B02450 MOVK W8, 0x20D70000
	0x03B02454 CMP W10, W8
	0x03B02458 B.EQ 0x3B03564
	0x03B0245C MOVZ W8, 0xF46A
	0x03B02460 MOVK W8, 0x21C60000
	0x03B02464 CMP W10, W8
	0x03B02468 B.NE 0x3B05A00
	0x03B0246C B 0x3B0263C
	0x03B02470 MOVZ W8, 0x2F09
	0x03B02474 MOVK W8, 0x20000
	0x03B02478 CMP W10, W8
	0x03B0247C B.EQ 0x3B02DCC
	0x03B02480 MOVZ W8, 0x3290
	0x03B02484 MOVK W8, 0x20000
	0x03B02488 CMP W10, W8
	0x03B0248C B.NE 0x3B05A00
	0x03B02490 LDR X8, [X31 + 0x20]
	0x03B02494 STRB W31, [X8 + 0x2DA]
	0x03B02498 B 0x3B00B64
	0x03B0249C MOVZ W8, 0xB5BA
	0x03B024A0 MOVK W8, 0x1A0000
	0x03B024A4 CMP W10, W8
	0x03B024A8 B.EQ 0x3B05A00
	0x03B024AC MOVZ W8, 0x33C6
	0x03B024B0 MOVK W8, 0x1D0000
	0x03B024B4 CMP W10, W8
	0x03B024B8 B.NE 0x3B05A00
	0x03B024BC LDR W8, [X0 + 0xE0]
	0x03B024C0 CBNZ W8, 0x3B024E0
	0x03B024C4 BL 0x1C16DFC
	0x03B024C8 ADRP X8, 0x656000
	0x03B024CC LDR X8, [X8 + 0x3E8]
	0x03B024D0 LDR X8, [X8]
	0x03B024D4 LDR X8, [X8 + 0xB8]
	0x03B024D8 LDR X9, [X8 + 0x88]
	0x03B024DC CBZ X9, 0x3B05924
	0x03B024E0 LDR W8, [X9 + 0x18]
	0x03B024E4 CBZ W8, 0x3B058BC
	0x03B024E8 LDR W1, [X9 + 0x24]
	0x03B024EC LDR X8, [X31 + 0x20]
	0x03B024F0 STR W1, [X31 + 0x2D4]
	0x03B024F4 LDRB W8, [X8 + 0x431]
	0x03B024F8 CBZ W8, 0x3B00B64
	0x03B024FC ADRP X8, 0x657000
	0x03B02500 LDR X8, [X8 + 0x250]
	0x03B02504 LDR X19, [X31 + 0x20]
	0x03B02508 LDR X2, [X8]
	0x03B0250C ADD X0, X19, 0x5F8
	0x03B02510 BL 0x2671C84
	0x03B02514 ADD X0, X31, 0x2D4
	0x03B02518 MOV X1, X31
	0x03B0251C BL 0x337B6E0
	0x03B02520 MOV X20, X0
	0x03B02524 ADD X0, X19, 0x494
	0x03B02528 MOV X1, X31
	0x03B0252C BL 0x337B6E0
	0x03B02530 ADRP X8, 0x657000
	0x03B02534 LDR X8, [X8 + 0x2E8]
	0x03B02538 ADRP X9, 0x657000
	0x03B0253C LDR X9, [X9 + 0x2F0]
	0x03B02540 MOV X3, X0
	0x03B02544 LDR X8, [X8]
	0x03B02548 MOV X1, X20
	0x03B0254C LDR X2, [X9]
	0x03B02550 MOV X4, X31
	0x03B02554 MOV X0, X8
	0x03B02558 BL 0x32277C4
	0x03B0255C ADRP X8, 0x5F1000
	0x03B02560 LDR X8, [X8 + 0xA28]
	0x03B02564 MOV X19, X0
	0x03B02568 LDR X8, [X8]
	0x03B0256C LDR W9, [X8 + 0xE0]
	0x03B02570 CBNZ W9, 0x3B0257C
	0x03B02574 MOV X0, X8
	0x03B02578 BL 0x1C16DFC
	0x03B0257C MOV X0, X19
	0x03B02580 MOV X1, X31
	0x03B02584 BL 0x3C06048
	0x03B02588 B 0x3B00B64
	0x03B0258C CMP W10, 0x1BC
	0x03B02590 B.EQ 0x3B02E38
	0x03B02594 CMP W10, 0x1BE
	0x03B02598 B.NE 0x3B05A00
	0x03B0259C LDR X8, [X31 + 0x20]
	0x03B025A0 LDRB W8, [X8 + 0x258]
	0x03B025A4 TBNZ X8, 0x2, 0x3B025EC
	0x03B025A8 ADRP X8, 0x657000
	0x03B025AC LDR X8, [X8 + 0x2B8]
	0x03B025B0 LDR X19, [X31 + 0x20]
	0x03B025B4 LDR X1, [X8]
	0x03B025B8 ADD X0, X19, 0x510
	0x03B025BC BL 0x2671074
	0x03B025C0 STR W0, [X19 + 0x158]
	0x03B025C4 ADD X0, X19, 0x260
	0x03B025C8 MOVZ W1, 0x4
	0x03B025CC MOV X2, X31
	0x03B025D0 BL 0x3B1D034
	0x03B025D4 ANDS W31, W0, 0xFF
	0x03B025D8 B.NE 0x3B025EC
	0x03B025DC LDR X9, [X31 + 0x20]
	0x03B025E0 LDR W8, [X9 + 0x25C]
	0x03B025E4 AND W8, W8, 0xFFFFFFFB
	0x03B025E8 STR W8, [X9 + 0x25C]
	0x03B025EC ADRP X8, 0x657000
	0x03B025F0 LDR X8, [X8 + 0x2B8]
	0x03B025F4 LDR X19, [X31 + 0x20]
	0x03B025F8 LDR X1, [X8]
	0x03B025FC ADD X0, X19, 0x510
	0x03B02600 BL 0x2671074
	0x03B02604 STR W0, [X19 + 0x158]
	0x03B02608 B 0x3B00B64
	0x03B0260C MOVZ W8, 0x5EEA
	0x03B02610 MOVK W8, 0x8B0000
	0x03B02614 CMP W10, W8
	0x03B02618 B.EQ 0x3B0263C
	0x03B0261C MOVZ W8, 0xA05A
	0x03B02620 MOVK W8, 0xA30000
	0x03B02624 CMP W10, W8
	0x03B02628 B.NE 0x3B05A00
	0x03B0262C LDR X8, [X31 + 0x20]
	0x03B02630 MOVZ W20, 0x1
	0x03B02634 STRB W20, [X8 + 0x430]
	0x03B02638 B 0x3B05A04
	0x03B0263C LDR X9, [X31 + 0x20]
	0x03B02640 MOVZ W1, 0x10
	0x03B02644 LDR W8, [X9 + 0x25C]
	0x03B02648 ADD X0, X9, 0x260
	0x03B0264C ORR W8, W8, 0x10
	0x03B02650 B 0x3B037DC
	0x03B02654 MOVZ W8, 0x50C5
	0x03B02658 CMP W10, W8
	0x03B0265C B.EQ 0x3B0357C
	0x03B02660 MOVZ W8, 0x5171
	0x03B02664 CMP W10, W8
	0x03B02668 B.NE 0x3B05A00
	0x03B0266C LDR X8, [X31 + 0x20]
	0x03B02670 LDRB W8, [X8 + 0x25D]
	0x03B02674 TBZ X8, 0x0, 0x3B00B64
	0x03B02678 LDR X8, [X31 + 0x20]
	0x03B0267C FMOV S1, 1
	0x03B02680 LDR V0, [X8 + 0x404]
	0x03B02684 FCMP S0, S1
	0x03B02688 B.PL 0x3B02714
	0x03B0268C ADRP X8, 0x657000
	0x03B02690 LDR X8, [X8 + 0x290]
	0x03B02694 LDR X19, [X31 + 0x20]
	0x03B02698 LDR X1, [X8]
	0x03B0269C ADD X0, X19, 0x620
	0x03B026A0 BL 0x26735D4
	0x03B026A4 LDR X8, [X19 + 0x100]
	0x03B026A8 STR S0, [X19 + 0x61C]
	0x03B026AC CBZ X8, 0x3B05924
	0x03B026B0 LDR X9, [X31 + 0x20]
	0x03B026B4 ADD X1, X8, 0x50
	0x03B026B8 ADD X0, X31, 0x270
	0x03B026BC MOVZ W2, 0x60
	0x03B026C0 LDR V8, [X9 + 0x404]
	0x03B026C4 BL 0x3EB1B30
	0x03B026C8 ADD X0, X31, 0x270
	0x03B026CC MOV X1, X31
	0x03B026D0 BL 0x3C9C038
	0x03B026D4 FCMP S0, 0x0
	0x03B026D8 FMOV S0, 1
	0x03B026DC B.LE 0x3B02708
	0x03B026E0 LDR X8, [X31 + 0x20]
	0x03B026E4 LDR X8, [X8 + 0x100]
	0x03B026E8 CBZ X8, 0x3B05924
	0x03B026EC ADD X1, X8, 0x50
	0x03B026F0 ADD X0, X31, 0x270
	0x03B026F4 MOVZ W2, 0x60
	0x03B026F8 BL 0x3EB1B30
	0x03B026FC ADD X0, X31, 0x270
	0x03B02700 MOV X1, X31
	0x03B02704 BL 0x3C9C038
	0x03B02708 LDR X8, [X31 + 0x20]
	0x03B0270C FDIV S0, S8, S0
	0x03B02710 STR S0, [X8 + 0x404]
	0x03B02714 LDR X8, [X31 + 0x20]
	0x03B02718 MOVZ W1, 0x100
	0x03B0271C MOV X2, X31
	0x03B02720 ADD X0, X8, 0x260
	0x03B02724 BL 0x3B1D034
	0x03B02728 ANDS W31, W0, 0xFF
	0x03B0272C B.NE 0x3B00B64
	0x03B02730 LDR X9, [X31 + 0x20]
	0x03B02734 LDR W8, [X9 + 0x25C]
	0x03B02738 AND W8, W8, 0xFFFFFEFF
	0x03B0273C B 0x3B031F0
	0x03B02740 MOVZ W11, 0xD806
	0x03B02744 MOVK W11, 0x40000
	0x03B02748 CMP W10, W11
	0x03B0274C B.EQ 0x3B05A00
	0x03B02750 MOVZ W11, 0xE24E
	0x03B02754 MOVK W11, 0x40000
	0x03B02758 CMP W10, W11
	0x03B0275C B.NE 0x3B05A00
	0x03B02760 LDR W10, [X0 + 0xE0]
	0x03B02764 CBNZ W10, 0x3B02784
	0x03B02768 BL 0x1C16DFC
	0x03B0276C ADRP X8, 0x656000
	0x03B02770 LDR X8, [X8 + 0x3E8]
	0x03B02774 LDR X8, [X8]
	0x03B02778 LDR X8, [X8 + 0xB8]
	0x03B0277C LDR X9, [X8 + 0x88]
	0x03B02780 CBZ X9, 0x3B05924
	0x03B02784 LDR W10, [X9 + 0x18]
	0x03B02788 CBZ W10, 0x3B058BC
	0x03B0278C LDR X1, [X8 + 0x80]
	0x03B02790 LDP W2, W3, [X9 + 0x2C]
	0x03B02794 ADD X4, X31, 0x70
	0x03B02798 STR W31, [X31 + 0x70]
	0x03B0279C BL 0x3B0C268
	0x03B027A0 MOVZ W8, 0xC7000000
	0x03B027A4 FMOV S1, W8
	0x03B027A8 FCMP S0, S1
	0x03B027AC B.EQ 0x3B05A00
	0x03B027B0 LDR W8, [X31 + 0x2C]
	0x03B027B4 CMP W8, 0x1
	0x03B027B8 B.EQ 0x3B04640
	0x03B027BC LDR W8, [X31 + 0x2C]
	0x03B027C0 CBNZ W8, 0x3B05A00
	0x03B027C4 LDR X10, [X31 + 0x20]
	0x03B027C8 ADRP X9, 0xFFFFFFFFFCFE8000
	0x03B027CC LDR V1, [X9 + 0xBC]
	0x03B027D0 FMOV S2, 1
	0x03B027D4 LDRB W8, [X10 + 0x305]
	0x03B027D8 LDR V3, [X10 + 0x640]
	0x03B027DC CMP W8, 0x0
	0x03B027E0 FCSEL S1, S1, S2, EQ
	0x03B027E4 FMUL S0, S0, S1
	0x03B027E8 FADD S0, S3, S0
	0x03B027EC B 0x3B04BA8
	0x03B027F0 MOVZ W11, 0x8478
	0x03B027F4 MOVK W11, 0xCDC50000
	0x03B027F8 CMP W10, W11
	0x03B027FC B.EQ 0x3B03588
	0x03B02800 MOVZ W11, 0x139D
	0x03B02804 MOVK W11, 0xCDC60000
	0x03B02808 CMP W10, W11
	0x03B0280C B.NE 0x3B05A00
	0x03B02810 LDR W10, [X0 + 0xE0]
	0x03B02814 CBNZ W10, 0x3B02834
	0x03B02818 BL 0x1C16DFC
	0x03B0281C ADRP X8, 0x656000
	0x03B02820 LDR X8, [X8 + 0x3E8]
	0x03B02824 LDR X8, [X8]
	0x03B02828 LDR X8, [X8 + 0xB8]
	0x03B0282C LDR X9, [X8 + 0x88]
	0x03B02830 CBZ X9, 0x3B05924
	0x03B02834 LDR W10, [X9 + 0x18]
	0x03B02838 CBZ W10, 0x3B058BC
	0x03B0283C LDR X1, [X8 + 0x80]
	0x03B02840 LDP W2, W3, [X9 + 0x2C]
	0x03B02844 ADD X4, X31, 0x70
	0x03B02848 STR W31, [X31 + 0x70]
	0x03B0284C BL 0x3B0C268
	0x03B02850 MOVZ W8, 0xC7000000
	0x03B02854 FMOV S1, W8
	0x03B02858 FCMP S0, S1
	0x03B0285C B.EQ 0x3B05A00
	0x03B02860 LDR W8, [X31 + 0x2C]
	0x03B02864 CBZ W8, 0x3B04838
	0x03B02868 LDR W8, [X31 + 0x2C]
	0x03B0286C CMP W8, 0x1
	0x03B02870 B.EQ 0x3B0485C
	0x03B02874 LDR W8, [X31 + 0x2C]
	0x03B02878 CMP W8, 0x2
	0x03B0287C B.NE 0x3B0488C
	0x03B02880 LDR X9, [X31 + 0x20]
	0x03B02884 MOVZ W8, 0x42C80000
	0x03B02888 LDR V1, [X9 + 0x358]
	0x03B0288C FMUL S0, S0, S1
	0x03B02890 FMOV S1, W8
	0x03B02894 FDIV S0, S0, S1
	0x03B02898 STR S0, [X9 + 0x408]
	0x03B0289C B 0x3B04894
	0x03B028A0 MOVZ W11, 0x398
	0x03B028A4 MOVK W11, 0x4230000
	0x03B028A8 CMP W10, W11
	0x03B028AC B.EQ 0x3B03620
	0x03B028B0 MOVZ W11, 0xD9F7
	0x03B028B4 MOVK W11, 0x4540000
	0x03B028B8 CMP W10, W11
	0x03B028BC B.NE 0x3B05A00
	0x03B028C0 LDR W10, [X0 + 0xE0]
	0x03B028C4 CBNZ W10, 0x3B028E4
	0x03B028C8 BL 0x1C16DFC
	0x03B028CC ADRP X8, 0x656000
	0x03B028D0 LDR X8, [X8 + 0x3E8]
	0x03B028D4 LDR X0, [X8]
	0x03B028D8 LDR X8, [X0 + 0xB8]
	0x03B028DC LDR X9, [X8 + 0x88]
	0x03B028E0 CBZ X9, 0x3B05924
	0x03B028E4 LDR W10, [X9 + 0x18]
	0x03B028E8 CBZ W10, 0x3B058BC
	0x03B028EC LDR W20, [X9 + 0x24]
	0x03B028F0 MOVZ W9, 0x756B
	0x03B028F4 MOVK W9, 0x2D930000
	0x03B028F8 CMP W20, W9
	0x03B028FC B.EQ 0x3B02910
	0x03B02900 MOVZ W9, 0xF54B
	0x03B02904 MOVK W9, 0x1F310000
	0x03B02908 CMP W20, W9
	0x03B0290C B.NE 0x3B040F4
	0x03B02910 LDR W9, [X0 + 0xE0]
	0x03B02914 CBNZ W9, 0x3B0292C
	0x03B02918 BL 0x1C16DFC
	0x03B0291C ADRP X8, 0x656000
	0x03B02920 LDR X8, [X8 + 0x3E8]
	0x03B02924 LDR X8, [X8]
	0x03B02928 LDR X8, [X8 + 0xB8]
	0x03B0292C LDR X9, [X8]
	0x03B02930 CBZ X9, 0x3B05924
	0x03B02934 LDR W10, [X9 + 0x18]
	0x03B02938 CBZ W10, 0x3B058BC
	0x03B0293C LDR X10, [X9 + 0x38]
	0x03B02940 LDR X11, [X31 + 0x20]
	0x03B02944 ADD X0, X8, 0x10
	0x03B02948 ADRP X8, 0x657000
	0x03B0294C STR W31, [X11 + 0x120]
	0x03B02950 STR X10, [X11 + 0x118]
	0x03B02954 LDR X8, [X8 + 0x270]
	0x03B02958 LDP V2, V0, [X9 + 0x30]
	0x03B0295C LDR X10, [X9 + 0x50]
	0x03B02960 LDR V1, [X9 + 0x2]
	0x03B02964 LDR X2, [X8]
	0x03B02968 STP V2, V0, [X31 + 0x140]
	0x03B0296C STR X10, [X31 + 0x160]
	0x03B02970 STR V1, [X31 + 0x13]
	0x03B02974 ADD X1, X31, 0x70
	0x03B02978 STP V1, V2, [X31 + 0x70]
	0x03B0297C STR V0, [X31 + 0x9]
	0x03B02980 STR X10, [X31 + 0xA0]
	0x03B02984 BL 0x2672830
	0x03B02988 B 0x3B00B64
	0x03B0298C MOVZ W11, 0x79D7
	0x03B02990 CMP W10, W11
	0x03B02994 B.EQ 0x3B02E90
	0x03B02998 MOVZ W11, 0x7FE9
	0x03B0299C CMP W10, W11
	0x03B029A0 B.NE 0x3B05A00
	0x03B029A4 LDR W10, [X0 + 0xE0]
	0x03B029A8 CBNZ W10, 0x3B029C8
	0x03B029AC BL 0x1C16DFC
	0x03B029B0 ADRP X8, 0x656000
	0x03B029B4 LDR X8, [X8 + 0x3E8]
	0x03B029B8 LDR X8, [X8]
	0x03B029BC LDR X8, [X8 + 0xB8]
	0x03B029C0 LDR X9, [X8 + 0x88]
	0x03B029C4 CBZ X9, 0x3B05924
	0x03B029C8 LDR W10, [X9 + 0x18]
	0x03B029CC CBZ W10, 0x3B058BC
	0x03B029D0 LDR X1, [X8 + 0x80]
	0x03B029D4 LDP W2, W3, [X9 + 0x2C]
	0x03B029D8 ADD X4, X31, 0x70
	0x03B029DC STR W31, [X31 + 0x70]
	0x03B029E0 BL 0x3B0C268
	0x03B029E4 MOVZ W8, 0xC7000000
	0x03B029E8 MOV V8.16B, V0.16B
	0x03B029EC FMOV S0, W8
	0x03B029F0 FCMP S8, S0
	0x03B029F4 B.EQ 0x3B05A00
	0x03B029F8 LDR W8, [X31 + 0x2C]
	0x03B029FC CMP W8, 0x2
	0x03B02A00 B.EQ 0x3B048A8
	0x03B02A04 LDR W8, [X31 + 0x2C]
	0x03B02A08 CMP W8, 0x1
	0x03B02A0C B.EQ 0x3B048C4
	0x03B02A10 LDR W8, [X31 + 0x2C]
	0x03B02A14 CBNZ W8, 0x3B05A00
	0x03B02A18 ADRP X8, 0x656000
	0x03B02A1C LDR X8, [X8 + 0x3E8]
	0x03B02A20 LDR X0, [X8]
	0x03B02A24 LDR W8, [X0 + 0xE0]
	0x03B02A28 CBNZ W8, 0x3B02A3C
	0x03B02A2C BL 0x1C16DFC
	0x03B02A30 ADRP X8, 0x656000
	0x03B02A34 LDR X8, [X8 + 0x3E8]
	0x03B02A38 LDR X0, [X8]
	0x03B02A3C LDR X8, [X0 + 0xB8]
	0x03B02A40 LDR X8, [X8 + 0x80]
	0x03B02A44 CBZ X8, 0x3B05924
	0x03B02A48 LDR W9, [X8 + 0x18]
	0x03B02A4C CMP W9, 0x5
	0x03B02A50 B.LS 0x3B058BC
	0x03B02A54 LDRH W9, [X8 + 0x2A]
	0x03B02A58 CMP W9, 0x2B
	0x03B02A5C B.EQ 0x3B02A9C
	0x03B02A60 LDR W9, [X0 + 0xE0]
	0x03B02A64 CBNZ W9, 0x3B02A84
	0x03B02A68 BL 0x1C16DFC
	0x03B02A6C ADRP X8, 0x656000
	0x03B02A70 LDR X8, [X8 + 0x3E8]
	0x03B02A74 LDR X8, [X8]
	0x03B02A78 LDR X8, [X8 + 0xB8]
	0x03B02A7C LDR X8, [X8 + 0x80]
	0x03B02A80 CBZ X8, 0x3B05924
	0x03B02A84 LDR W9, [X8 + 0x18]
	0x03B02A88 CMP W9, 0x5
	0x03B02A8C B.LS 0x3B058BC
	0x03B02A90 LDRH W8, [X8 + 0x2A]
	0x03B02A94 CMP W8, 0x2D
	0x03B02A98 B.NE 0x3B0529C
	0x03B02A9C LDR X9, [X31 + 0x20]
	0x03B02AA0 LDR V0, [X9 + 0x1E4]
	0x03B02AA4 FADD S0, S8, S0
	0x03B02AA8 B 0x3B048D0
	0x03B02AAC MOVZ W8, 0xDECB
	0x03B02AB0 MOVK W8, 0x100000
	0x03B02AB4 CMP W10, W8
	0x03B02AB8 B.EQ 0x3B02AD0
	0x03B02ABC MOVZ W8, 0xE5AF
	0x03B02AC0 MOVK W8, 0x100000
	0x03B02AC4 CMP W10, W8
	0x03B02AC8 B.NE 0x3B05A00
	0x03B02ACC B 0x3B00B64
	0x03B02AD0 LDR X8, [X31 + 0x20]
	0x03B02AD4 STRB W31, [X8 + 0x474]
	0x03B02AD8 B 0x3B00B64
	0x03B02ADC CMP W10, 0x69
	0x03B02AE0 B.EQ 0x3B02ED8
	0x03B02AE4 CMP W10, 0x73
	0x03B02AE8 B.NE 0x3B05A00
	0x03B02AEC LDR X9, [X31 + 0x20]
	0x03B02AF0 MOVZ W1, 0x40
	0x03B02AF4 MOV X2, X31
	0x03B02AF8 LDR W8, [X9 + 0x25C]
	0x03B02AFC ADD X0, X9, 0x260
	0x03B02B00 ORR W8, W8, 0x40
	0x03B02B04 STR W8, [X9 + 0x25C]
	0x03B02B08 BL 0x3B1CF38
	0x03B02B0C ADRP X8, 0x656000
	0x03B02B10 LDR X8, [X8 + 0x3E8]
	0x03B02B14 LDR X0, [X8]
	0x03B02B18 LDR W8, [X0 + 0xE0]
	0x03B02B1C CBNZ W8, 0x3B02B30
	0x03B02B20 BL 0x1C16DFC
	0x03B02B24 ADRP X8, 0x656000
	0x03B02B28 LDR X8, [X8 + 0x3E8]
	0x03B02B2C LDR X0, [X8]
	0x03B02B30 LDR X8, [X0 + 0xB8]
	0x03B02B34 LDR X8, [X8 + 0x88]
	0x03B02B38 CBZ X8, 0x3B05924
	0x03B02B3C LDR W9, [X8 + 0x18]
	0x03B02B40 CMP W9, 0x1
	0x03B02B44 B.LS 0x3B058BC
	0x03B02B48 LDR W9, [X8 + 0x38]
	0x03B02B4C MOVZ W10, 0x4D63
	0x03B02B50 MOVK W10, 0x40000
	0x03B02B54 CMP W9, W10
	0x03B02B58 B.EQ 0x3B02BA0
	0x03B02B5C LDR W9, [X0 + 0xE0]
	0x03B02B60 CBNZ W9, 0x3B02B80
	0x03B02B64 BL 0x1C16DFC
	0x03B02B68 ADRP X8, 0x656000
	0x03B02B6C LDR X8, [X8 + 0x3E8]
	0x03B02B70 LDR X0, [X8]
	0x03B02B74 LDR X8, [X0 + 0xB8]
	0x03B02B78 LDR X8, [X8 + 0x88]
	0x03B02B7C CBZ X8, 0x3B05924
	0x03B02B80 LDR W9, [X8 + 0x18]
	0x03B02B84 CMP W9, 0x1
	0x03B02B88 B.LS 0x3B058BC
	0x03B02B8C LDR W8, [X8 + 0x38]
	0x03B02B90 MOVZ W9, 0xEF43
	0x03B02B94 MOVK W9, 0x20000
	0x03B02B98 CMP W8, W9
	0x03B02B9C B.NE 0x3B04400
	0x03B02BA0 LDR W8, [X0 + 0xE0]
	0x03B02BA4 CBNZ W8, 0x3B02BB8
	0x03B02BA8 BL 0x1C16DFC
	0x03B02BAC ADRP X8, 0x656000
	0x03B02BB0 LDR X8, [X8 + 0x3E8]
	0x03B02BB4 LDR X0, [X8]
	0x03B02BB8 LDR X9, [X0 + 0xB8]
	0x03B02BBC LDR X8, [X9 + 0x88]
	0x03B02BC0 CBZ X8, 0x3B05924
	0x03B02BC4 LDR W10, [X8 + 0x18]
	0x03B02BC8 CMP W10, 0x1
	0x03B02BCC B.LS 0x3B058BC
	0x03B02BD0 LDR X1, [X9 + 0x80]
	0x03B02BD4 LDP W2, W3, [X8 + 0x44]
	0x03B02BD8 BL 0x3B0BF70
	0x03B02BDC LDR X11, [X31 + 0x20]
	0x03B02BE0 UBFM X10, X0, 0x18, 0x3F
	0x03B02BE4 LDRB W8, [X11 + 0x4EF]
	0x03B02BE8 ADD X9, X11, 0x15C
	0x03B02BEC STR W0, [X11 + 0x15C]
	0x03B02BF0 CMP W8, W10, UXTB
	0x03B02BF4 CSEL W8, W8, W10, CC
	0x03B02BF8 STRB W8, [X9 + 0x3]
	0x03B02BFC LDR W8, [X11 + 0x15C]
	0x03B02C00 B 0x3B0440C
	0x03B02C04 MOVZ W8, 0x5E93
	0x03B02C08 MOVK W8, 0x6A0000
	0x03B02C0C CMP W10, W8
	0x03B02C10 B.EQ 0x3B03004
	0x03B02C14 MOVZ W8, 0xFE3D
	0x03B02C18 MOVK W8, 0x6A0000
	0x03B02C1C CMP W10, W8
	0x03B02C20 B.NE 0x3B05A00
	0x03B02C24 LDR X8, [X31 + 0x20]
	0x03B02C28 MOVI D0, 0x0
	0x03B02C2C STR D0, [X8 + 0x350]
	0x03B02C30 B 0x3B00B64
	0x03B02C34 CMP W10, 0xB9D
	0x03B02C38 CSET W20, EQ
	0x03B02C3C B 0x3B05A04
	0x03B02C40 MOVZ W11, 0xEF43
	0x03B02C44 MOVK W11, 0x20000
	0x03B02C48 CMP W10, W11
	0x03B02C4C B.EQ 0x3B0371C
	0x03B02C50 MOVZ W11, 0x7302
	0x03B02C54 MOVK W11, 0x30000
	0x03B02C58 CMP W10, W11
	0x03B02C5C B.NE 0x3B05A00
	0x03B02C60 LDR W10, [X0 + 0xE0]
	0x03B02C64 CBNZ W10, 0x3B02C84
	0x03B02C68 BL 0x1C16DFC
	0x03B02C6C ADRP X8, 0x656000
	0x03B02C70 LDR X8, [X8 + 0x3E8]
	0x03B02C74 LDR X8, [X8]
	0x03B02C78 LDR X8, [X8 + 0xB8]
	0x03B02C7C LDR X9, [X8 + 0x88]
	0x03B02C80 CBZ X9, 0x3B05924
	0x03B02C84 LDR W10, [X9 + 0x18]
	0x03B02C88 CBZ W10, 0x3B058BC
	0x03B02C8C LDR X1, [X8 + 0x80]
	0x03B02C90 LDP W2, W3, [X9 + 0x2C]
	0x03B02C94 ADD X4, X31, 0x70
	0x03B02C98 STR W31, [X31 + 0x70]
	0x03B02C9C BL 0x3B0C268
	0x03B02CA0 MOVZ W8, 0xC7000000
	0x03B02CA4 MOV V8.16B, V0.16B
	0x03B02CA8 FMOV S0, W8
	0x03B02CAC FCMP S8, S0
	0x03B02CB0 B.EQ 0x3B05A00
	0x03B02CB4 ADRP X19, 0x8D6000
	0x03B02CB8 LDRB W8, [X19 + 0x783]
	0x03B02CBC CBNZ W8, 0x3B02CD4
	0x03B02CC0 ADRP X0, 0x5F1000
	0x03B02CC4 LDR X0, [X0 + 0x5A0]
	0x03B02CC8 BL 0x1C16CF4
	0x03B02CCC MOVZ W8, 0x1
	0x03B02CD0 STRB W8, [X19 + 0x783]
	0x03B02CD4 ADRP X8, 0x5F1000
	0x03B02CD8 LDR X8, [X8 + 0x5A0]
	0x03B02CDC ADRP X19, 0x8D6000
	0x03B02CE0 LDRB W9, [X19 + 0x793]
	0x03B02CE4 LDR X8, [X8]
	0x03B02CE8 LDR X8, [X8 + 0xB8]
	0x03B02CEC LDP S11, S10, [X8]
	0x03B02CF0 LDR V9, [X8 + 0x8]
	0x03B02CF4 CBNZ W9, 0x3B02D0C
	0x03B02CF8 ADRP X0, 0x5F2000
	0x03B02CFC LDR X0, [X0 + 0x5A8]
	0x03B02D00 BL 0x1C16CF4
	0x03B02D04 MOVZ W8, 0x1
	0x03B02D08 STRB W8, [X19 + 0x793]
	0x03B02D0C ADRP X8, 0x5F2000
	0x03B02D10 LDR X8, [X8 + 0x5A8]
	0x03B02D14 ORR X9, X31, 0x3F8000003F800000
	0x03B02D18 MOV V0.16B, V11.16B
	0x03B02D1C MOV V1.16B, V10.16B
	0x03B02D20 LDR X8, [X8]
	0x03B02D24 MOV V2.16B, V9.16B
	0x03B02D28 LDR X8, [X8 + 0xB8]
	0x03B02D2C LDP S3, S4, [X8]
	0x03B02D30 LDP S5, S6, [X8 + 0x8]
	0x03B02D34 ADD X8, X31, 0x30
	0x03B02D38 STUR X9, [X31 + 0x4]
	0x03B02D3C STR S8, [X31]
	0x03B02D40 MOV X0, X31
	0x03B02D44 BL 0x3C26FA8
	0x03B02D48 LDR X9, [X31 + 0x20]
	0x03B02D4C LDP V1, V0, [X31 + 0x50]
	0x03B02D50 LDP V3, V2, [X31 + 0x30]
	0x03B02D54 MOVZ W20, 0x1
	0x03B02D58 ADD X8, X9, 0x434
	0x03B02D5C STP V1, V0, [X31 + 0x90]
	0x03B02D60 STP V3, V2, [X31 + 0x70]
	0x03B02D64 STP V1, V0, [X8 + 0x20]
	0x03B02D68 STP V3, V2, [X8]
	0x03B02D6C STRB W20, [X9 + 0x474]
	0x03B02D70 B 0x3B05A04
	0x03B02D74 MOVZ W8, 0x8677
	0x03B02D78 MOVK W8, 0x8F9A0000
	0x03B02D7C CMP W10, W8
	0x03B02D80 B.EQ 0x3B03790
	0x03B02D84 MOVZ W8, 0x65AA
	0x03B02D88 MOVK W8, 0x8FBB0000
	0x03B02D8C CMP W10, W8
	0x03B02D90 B.NE 0x3B05A00
	0x03B02D94 LDR X8, [X31 + 0x20]
	0x03B02D98 LDRB W8, [X8 + 0x258]
	0x03B02D9C TBNZ X8, 0x3, 0x3B00B64
	0x03B02DA0 LDR X8, [X31 + 0x20]
	0x03B02DA4 MOVZ W1, 0x8
	0x03B02DA8 MOV X2, X31
	0x03B02DAC ADD X0, X8, 0x260
	0x03B02DB0 BL 0x3B1D034
	0x03B02DB4 ANDS W31, W0, 0xFF
	0x03B02DB8 B.NE 0x3B00B64
	0x03B02DBC LDR X9, [X31 + 0x20]
	0x03B02DC0 LDR W8, [X9 + 0x25C]
	0x03B02DC4 AND W8, W8, 0xFFFFFFF7
	0x03B02DC8 B 0x3B031F0
	0x03B02DCC LDR X8, [X31 + 0x20]
	0x03B02DD0 LDRB W8, [X8 + 0x431]
	0x03B02DD4 CBZ W8, 0x3B00B64
	0x03B02DD8 LDR X8, [X31 + 0x20]
	0x03B02DDC LDRB W8, [X8 + 0x3F5]
	0x03B02DE0 CBNZ W8, 0x3B00B64
	0x03B02DE4 LDR X8, [X31 + 0x20]
	0x03B02DE8 LDR X8, [X8 + 0x368]
	0x03B02DEC CBZ X8, 0x3B05924
	0x03B02DF0 LDR X10, [X8 + 0x48]
	0x03B02DF4 CBZ X10, 0x3B05924
	0x03B02DF8 LDRSW X9, [X8 + 0x28]
	0x03B02DFC LDR W11, [X10 + 0x18]
	0x03B02E00 CMP W9, W11
	0x03B02E04 B.GE 0x3B00B64
	0x03B02E08 CMP W9, W11
	0x03B02E0C B.CS 0x3B058BC
	0x03B02E10 LDR X11, [X31 + 0x20]
	0x03B02E14 MOVZ W12, 0x28
	0x03B02E18 MADD X10, X9, X12, X10
	0x03B02E1C LDR W12, [X10 + 0x34]
	0x03B02E20 LDR W11, [X11 + 0x494]
	0x03B02E24 ADD W9, W9, 0x1
	0x03B02E28 SUB W11, W11, W12
	0x03B02E2C STR W11, [X10 + 0x38]
	0x03B02E30 STR W9, [X8 + 0x28]
	0x03B02E34 B 0x3B00B64
	0x03B02E38 LDR X8, [X31 + 0x20]
	0x03B02E3C LDRB W8, [X8 + 0x258]
	0x03B02E40 TBNZ X8, 0x6, 0x3B02E70
	0x03B02E44 LDR X8, [X31 + 0x20]
	0x03B02E48 MOVZ W1, 0x40
	0x03B02E4C MOV X2, X31
	0x03B02E50 ADD X0, X8, 0x260
	0x03B02E54 BL 0x3B1D034
	0x03B02E58 ANDS W31, W0, 0xFF
	0x03B02E5C B.NE 0x3B02E70
	0x03B02E60 LDR X9, [X31 + 0x20]
	0x03B02E64 LDR W8, [X9 + 0x25C]
	0x03B02E68 AND W8, W8, 0xFFFFFFBF
	0x03B02E6C STR W8, [X9 + 0x25C]
	0x03B02E70 ADRP X8, 0x657000
	0x03B02E74 LDR X8, [X8 + 0x2B8]
	0x03B02E78 LDR X19, [X31 + 0x20]
	0x03B02E7C LDR X1, [X8]
	0x03B02E80 ADD X0, X19, 0x530
	0x03B02E84 BL 0x2671074
	0x03B02E88 STR W0, [X19 + 0x15C]
	0x03B02E8C B 0x3B00B64
	0x03B02E90 LDR X8, [X31 + 0x20]
	0x03B02E94 MOVZ W20, 0x1
	0x03B02E98 LDR W8, [X8 + 0x2E0]
	0x03B02E9C CMP W8, 0x5
	0x03B02EA0 B.NE 0x3B05A04
	0x03B02EA4 LDR X9, [X31 + 0x20]
	0x03B02EA8 FMOV S2, W31
	0x03B02EAC LDR V0, [X9 + 0x408]
	0x03B02EB0 LDR V1, [X9 + 0x40C]
	0x03B02EB4 LDR W8, [X9 + 0x4B0]
	0x03B02EB8 STR W31, [X9 + 0x4D8]
	0x03B02EBC FADD S0, S0, S2
	0x03B02EC0 FADD S0, S0, S1
	0x03B02EC4 ADD W8, W8, 0x1
	0x03B02EC8 STR W8, [X9 + 0x4B0]
	0x03B02ECC STR S0, [X9 + 0x640]
	0x03B02ED0 STRB W20, [X9 + 0x33C]
	0x03B02ED4 B 0x3B05A04
	0x03B02ED8 LDR X9, [X31 + 0x20]
	0x03B02EDC MOVZ W1, 0x2
	0x03B02EE0 MOV X2, X31
	0x03B02EE4 LDR W8, [X9 + 0x25C]
	0x03B02EE8 ADD X0, X9, 0x260
	0x03B02EEC ORR W8, W8, 0x2
	0x03B02EF0 STR W8, [X9 + 0x25C]
	0x03B02EF4 BL 0x3B1CF38
	0x03B02EF8 ADRP X8, 0x656000
	0x03B02EFC LDR X8, [X8 + 0x3E8]
	0x03B02F00 LDR X0, [X8]
	0x03B02F04 LDR W8, [X0 + 0xE0]
	0x03B02F08 CBNZ W8, 0x3B02F1C
	0x03B02F0C BL 0x1C16DFC
	0x03B02F10 ADRP X8, 0x656000
	0x03B02F14 LDR X8, [X8 + 0x3E8]
	0x03B02F18 LDR X0, [X8]
	0x03B02F1C LDR X8, [X0 + 0xB8]
	0x03B02F20 LDR X8, [X8 + 0x88]
	0x03B02F24 CBZ X8, 0x3B05924
	0x03B02F28 LDR W9, [X8 + 0x18]
	0x03B02F2C CMP W9, 0x1
	0x03B02F30 B.LS 0x3B058BC
	0x03B02F34 LDR W9, [X8 + 0x38]
	0x03B02F38 MOVZ W10, 0x371E
	0x03B02F3C MOVK W10, 0x40000
	0x03B02F40 ADD W10, W10, 0x115
	0x03B02F44 CMP W9, W10
	0x03B02F48 B.EQ 0x3B02F8C
	0x03B02F4C LDR W9, [X0 + 0xE0]
	0x03B02F50 CBNZ W9, 0x3B02F70
	0x03B02F54 BL 0x1C16DFC
	0x03B02F58 ADRP X8, 0x656000
	0x03B02F5C LDR X8, [X8 + 0x3E8]
	0x03B02F60 LDR X0, [X8]
	0x03B02F64 LDR X8, [X0 + 0xB8]
	0x03B02F68 LDR X8, [X8 + 0x88]
	0x03B02F6C CBZ X8, 0x3B05924
	0x03B02F70 LDR W9, [X8 + 0x18]
	0x03B02F74 CMP W9, 0x1
	0x03B02F78 B.LS 0x3B058BC
	0x03B02F7C LDR W8, [X8 + 0x38]
	0x03B02F80 ADD W9, W19, 0x115
	0x03B02F84 CMP W8, W9
	0x03B02F88 B.NE 0x3B041EC
	0x03B02F8C LDR W8, [X0 + 0xE0]
	0x03B02F90 CBNZ W8, 0x3B02FA4
	0x03B02F94 BL 0x1C16DFC
	0x03B02F98 ADRP X8, 0x656000
	0x03B02F9C LDR X8, [X8 + 0x3E8]
	0x03B02FA0 LDR X0, [X8]
	0x03B02FA4 LDR X9, [X0 + 0xB8]
	0x03B02FA8 LDR X8, [X9 + 0x88]
	0x03B02FAC CBZ X8, 0x3B05924
	0x03B02FB0 LDR W10, [X8 + 0x18]
	0x03B02FB4 CMP W10, 0x1
	0x03B02FB8 B.LS 0x3B058BC
	0x03B02FBC LDR X1, [X9 + 0x80]
	0x03B02FC0 LDP W2, W3, [X8 + 0x44]
	0x03B02FC4 ADD X4, X31, 0x70
	0x03B02FC8 STR W31, [X31 + 0x70]
	0x03B02FCC BL 0x3B0C268
	0x03B02FD0 MOVZ W8, 0x7F800000
	0x03B02FD4 FMOV S1, W8
	0x03B02FD8 FCVTZS W9, S0
	0x03B02FDC FCMP S0, S1
	0x03B02FE0 MOVZ W8, 0x80000000
	0x03B02FE4 CSEL W1, W8, W9, EQ
	0x03B02FE8 ADD W8, W1, 0xB4
	0x03B02FEC CMP W8, 0x169
	0x03B02FF0 LDR X8, [X31 + 0x20]
	0x03B02FF4 MOV W20, W31
	0x03B02FF8 STR W1, [X8 + 0x5F0]
	0x03B02FFC B.CS 0x3B05A04
	0x03B03000 B 0x3B04204
	0x03B03004 ADRP X8, 0x656000
	0x03B03008 LDR X8, [X8 + 0x2C8]
	0x03B0300C LDR X19, [X31 + 0x20]
	0x03B03010 LDR X1, [X8]
	0x03B03014 ADD X0, X19, 0x410
	0x03B03018 BL 0x26734A4
	0x03B0301C STR S0, [X19 + 0x40C]
	0x03B03020 B 0x3B00B64
	0x03B03024 LDR W10, [X0 + 0xE0]
	0x03B03028 CBNZ W10, 0x3B03048
	0x03B0302C BL 0x1C16DFC
	0x03B03030 ADRP X8, 0x655000
	0x03B03034 LDR X8, [X8 + 0x3E8]
	0x03B03038 LDR X8, [X8]
	0x03B0303C LDR X8, [X8 + 0xB8]
	0x03B03040 LDR X9, [X8 + 0x88]
	0x03B03044 CBZ X9, 0x3B05924
	0x03B03048 LDR W10, [X9 + 0x18]
	0x03B0304C CBZ W10, 0x3B058BC
	0x03B03050 LDR X1, [X8 + 0x80]
	0x03B03054 LDP W2, W3, [X9 + 0x2C]
	0x03B03058 ADD X4, X31, 0x70
	0x03B0305C STR W31, [X31 + 0x70]
	0x03B03060 BL 0x3B0C268
	0x03B03064 MOVZ W8, 0xC7000000
	0x03B03068 FMOV S1, W8
	0x03B0306C FCMP S0, S1
	0x03B03070 B.EQ 0x3B05A00
	0x03B03074 LDR W8, [X31 + 0x2C]
	0x03B03078 CBZ W8, 0x3B048EC
	0x03B0307C LDR W8, [X31 + 0x2C]
	0x03B03080 CMP W8, 0x1
	0x03B03084 B.EQ 0x3B04910
	0x03B03088 LDR W8, [X31 + 0x2C]
	0x03B0308C CMP W8, 0x2
	0x03B03090 B.EQ 0x3B05A00
	0x03B03094 B 0x3B00B64
	0x03B03098 LDR W10, [X0 + 0xE0]
	0x03B0309C CBNZ W10, 0x3B030BC
	0x03B030A0 BL 0x1C16DFC
	0x03B030A4 ADRP X8, 0x655000
	0x03B030A8 LDR X8, [X8 + 0x3E8]
	0x03B030AC LDR X8, [X8]
	0x03B030B0 LDR X8, [X8 + 0xB8]
	0x03B030B4 LDR X9, [X8 + 0x88]
	0x03B030B8 CBZ X9, 0x3B05924
	0x03B030BC LDR W10, [X9 + 0x18]
	0x03B030C0 CBZ W10, 0x3B058BC
	0x03B030C4 LDR X1, [X8 + 0x80]
	0x03B030C8 LDP W2, W3, [X9 + 0x2C]
	0x03B030CC ADD X4, X31, 0x70
	0x03B030D0 STR W31, [X31 + 0x70]
	0x03B030D4 BL 0x3B0C268
	0x03B030D8 MOVZ W8, 0xC7000000
	0x03B030DC FMOV S1, W8
	0x03B030E0 FCMP S0, S1
	0x03B030E4 B.EQ 0x3B05A00
	0x03B030E8 LDR W8, [X31 + 0x2C]
	0x03B030EC CMP W8, 0x1
	0x03B030F0 B.EQ 0x3B04674
	0x03B030F4 LDR W8, [X31 + 0x2C]
	0x03B030F8 CBNZ W8, 0x3B05A00
	0x03B030FC LDR X10, [X31 + 0x20]
	0x03B03100 ADRP X9, 0xFFFFFFFFFCFE7000
	0x03B03104 LDR V1, [X9 + 0xBC]
	0x03B03108 FMOV S2, 1
	0x03B0310C LDRB W8, [X10 + 0x305]
	0x03B03110 CMP W8, 0x0
	0x03B03114 FCSEL S1, S1, S2, EQ
	0x03B03118 FMUL S0, S0, S1
	0x03B0311C B 0x3B0469C
	0x03B03120 LDR X8, [X31 + 0x20]
	0x03B03124 LDRB W8, [X8 + 0x25C]
	0x03B03128 TBZ X8, 0x7, 0x3B00B64
	0x03B0312C LDR X8, [X31 + 0x20]
	0x03B03130 FMOV S1, 1
	0x03B03134 LDR V0, [X8 + 0x404]
	0x03B03138 FCMP S0, S1
	0x03B0313C B.PL 0x3B031C8
	0x03B03140 ADRP X8, 0x656000
	0x03B03144 LDR X8, [X8 + 0x290]
	0x03B03148 LDR X19, [X31 + 0x20]
	0x03B0314C LDR X1, [X8]
	0x03B03150 ADD X0, X19, 0x620
	0x03B03154 BL 0x26735D4
	0x03B03158 LDR X8, [X19 + 0x100]
	0x03B0315C STR S0, [X19 + 0x61C]
	0x03B03160 CBZ X8, 0x3B05924
	0x03B03164 LDR X9, [X31 + 0x20]
	0x03B03168 ADD X1, X8, 0x50
	0x03B0316C ADD X0, X31, 0x270
	0x03B03170 MOVZ W2, 0x60
	0x03B03174 LDR V8, [X9 + 0x404]
	0x03B03178 BL 0x3EB1B30
	0x03B0317C ADD X0, X31, 0x270
	0x03B03180 MOV X1, X31
	0x03B03184 BL 0x3C9C018
	0x03B03188 FCMP S0, 0x0
	0x03B0318C FMOV S0, 1
	0x03B03190 B.LE 0x3B031BC
	0x03B03194 LDR X8, [X31 + 0x20]
	0x03B03198 LDR X8, [X8 + 0x100]
	0x03B0319C CBZ X8, 0x3B05924
	0x03B031A0 ADD X1, X8, 0x50
	0x03B031A4 ADD X0, X31, 0x270
	0x03B031A8 MOVZ W2, 0x60
	0x03B031AC BL 0x3EB1B30
	0x03B031B0 ADD X0, X31, 0x270
	0x03B031B4 MOV X1, X31
	0x03B031B8 BL 0x3C9C018
	0x03B031BC LDR X8, [X31 + 0x20]
	0x03B031C0 FDIV S0, S8, S0
	0x03B031C4 STR S0, [X8 + 0x404]
	0x03B031C8 LDR X8, [X31 + 0x20]
	0x03B031CC MOVZ W1, 0x80
	0x03B031D0 MOV X2, X31
	0x03B031D4 ADD X0, X8, 0x260
	0x03B031D8 BL 0x3B1D034
	0x03B031DC ANDS W31, W0, 0xFF
	0x03B031E0 B.NE 0x3B00B64
	0x03B031E4 LDR X9, [X31 + 0x20]
	0x03B031E8 LDR W8, [X9 + 0x25C]
	0x03B031EC AND W8, W8, 0xFFFFFF7F
	0x03B031F0 STR W8, [X9 + 0x25C]
	0x03B031F4 B 0x3B00B64
	0x03B031F8 LDR X19, [X31 + 0x20]
	0x03B031FC MOVZ W1, 0x1
	0x03B03200 MOV X2, X31
	0x03B03204 MOVZ W20, 0x1
	0x03B03208 LDR W8, [X19 + 0x25C]
	0x03B0320C ADD X0, X19, 0x260
	0x03B03210 ORR W8, W8, 0x1
	0x03B03214 STR W8, [X19 + 0x25C]
	0x03B03218 BL 0x3B1CF38
	0x03B0321C MOVZ W8, 0x2BC
	0x03B03220 STR W8, [X19 + 0x214]
	0x03B03224 B 0x3B05A04
	0x03B03228 LDR W9, [X0 + 0xE0]
	0x03B0322C CBNZ W9, 0x3B03244
	0x03B03230 BL 0x1C16DFC
	0x03B03234 ADRP X8, 0x655000
	0x03B03238 LDR X8, [X8 + 0x3E8]
	0x03B0323C LDR X8, [X8]
	0x03B03240 LDR X8, [X8 + 0xB8]
	0x03B03244 ADRP X9, 0x656000
	0x03B03248 LDR X9, [X9 + 0x2D8]
	0x03B0324C ADD X0, X8, 0x10
	0x03B03250 ADD X8, X31, 0x70
	0x03B03254 LDR X1, [X9]
	0x03B03258 BL 0x26728B0
	0x03B0325C LDR X8, [X31 + 0x88]
	0x03B03260 LDR W9, [X31 + 0x70]
	0x03B03264 LDR X10, [X31 + 0x20]
	0x03B03268 STR X8, [X10 + 0x118]
	0x03B0326C STR W9, [X10 + 0x120]
	0x03B03270 B 0x3B00B64
	0x03B03274 LDR X8, [X31 + 0x20]
	0x03B03278 MOVZ W20, 0x1
	0x03B0327C STRB W20, [X8 + 0x2DA]
	0x03B03280 B 0x3B05A04
	0x03B03284 LDR W10, [X0 + 0xE0]
	0x03B03288 CBNZ W10, 0x3B032A8
	0x03B0328C BL 0x1C16DFC
	0x03B03290 ADRP X8, 0x655000
	0x03B03294 LDR X8, [X8 + 0x3E8]
	0x03B03298 LDR X8, [X8]
	0x03B0329C LDR X8, [X8 + 0xB8]
	0x03B032A0 LDR X9, [X8 + 0x88]
	0x03B032A4 CBZ X9, 0x3B05924
	0x03B032A8 LDR W10, [X9 + 0x18]
	0x03B032AC CBZ W10, 0x3B058BC
	0x03B032B0 LDR X1, [X8 + 0x80]
	0x03B032B4 LDP W2, W3, [X9 + 0x2C]
	0x03B032B8 ADD X4, X31, 0x70
	0x03B032BC STR W31, [X31 + 0x70]
	0x03B032C0 BL 0x3B0C268
	0x03B032C4 MOVZ W8, 0xC7000000
	0x03B032C8 FMOV S1, W8
	0x03B032CC FCMP S0, S1
	0x03B032D0 B.EQ 0x3B05A00
	0x03B032D4 LDR W8, [X31 + 0x2C]
	0x03B032D8 CBZ W8, 0x3B04940
	0x03B032DC LDR W8, [X31 + 0x2C]
	0x03B032E0 CMP W8, 0x1
	0x03B032E4 B.EQ 0x3B04964
	0x03B032E8 LDR W8, [X31 + 0x2C]
	0x03B032EC CMP W8, 0x2
	0x03B032F0 B.NE 0x3B04994
	0x03B032F4 LDR X9, [X31 + 0x20]
	0x03B032F8 MOVZ W8, 0x42C80000
	0x03B032FC LDR V1, [X9 + 0x358]
	0x03B03300 FMUL S0, S0, S1
	0x03B03304 FMOV S1, W8
	0x03B03308 FDIV S0, S0, S1
	0x03B0330C STR S0, [X9 + 0x40C]
	0x03B03310 B 0x3B0499C
	0x03B03314 LDR X8, [X31 + 0x20]
	0x03B03318 LDRB W8, [X8 + 0x431]
	0x03B0331C CBZ W8, 0x3B00B64
	0x03B03320 LDR X8, [X31 + 0x20]
	0x03B03324 LDR W8, [X8 + 0x494]
	0x03B03328 SUBS W8, W8, 0x1
	0x03B0332C B.LT 0x3B0336C
	0x03B03330 LDR X10, [X31 + 0x20]
	0x03B03334 LDR V0, [X10 + 0x640]
	0x03B03338 LDR V1, [X10 + 0x2AC]
	0x03B0333C LDR X9, [X10 + 0x368]
	0x03B03340 FSUB S0, S0, S1
	0x03B03344 STR S0, [X10 + 0x640]
	0x03B03348 CBZ X9, 0x3B05924
	0x03B0334C LDR X9, [X9 + 0x38]
	0x03B03350 CBZ X9, 0x3B05924
	0x03B03354 LDR W10, [X9 + 0x18]
	0x03B03358 CMP W8, W10
	0x03B0335C B.CS 0x3B058BC
	0x03B03360 MOVZ W10, 0x178
	0x03B03364 UMADDL X8, X8, X10, X9
	0x03B03368 STR S0, [X8 + 0x144]
	0x03B0336C LDR X8, [X31 + 0x20]
	0x03B03370 STR W31, [X8 + 0x2AC]
	0x03B03374 B 0x3B00B64
	0x03B03378 LDR X8, [X31 + 0x20]
	0x03B0337C LDR X8, [X8 + 0x100]
	0x03B03380 CBZ X8, 0x3B05924
	0x03B03384 LDR X9, [X31 + 0x20]
	0x03B03388 ADD X1, X8, 0x50
	0x03B0338C ADD X0, X31, 0x270
	0x03B03390 MOVZ W2, 0x60
	0x03B03394 LDR V8, [X9 + 0x404]
	0x03B03398 BL 0x3EB1B30
	0x03B0339C ADD X0, X31, 0x270
	0x03B033A0 MOV X1, X31
	0x03B033A4 BL 0x3C9C038
	0x03B033A8 FCMP S0, 0x0
	0x03B033AC FMOV S0, 1
	0x03B033B0 B.LE 0x3B033DC
	0x03B033B4 LDR X8, [X31 + 0x20]
	0x03B033B8 LDR X8, [X8 + 0x100]
	0x03B033BC CBZ X8, 0x3B05924
	0x03B033C0 ADD X1, X8, 0x50
	0x03B033C4 ADD X0, X31, 0x270
	0x03B033C8 MOVZ W2, 0x60
	0x03B033CC BL 0x3EB1B30
	0x03B033D0 ADD X0, X31, 0x270
	0x03B033D4 MOV X1, X31
	0x03B033D8 BL 0x3C9C038
	0x03B033DC LDR X19, [X31 + 0x20]
	0x03B033E0 FMUL S1, S8, S0
	0x03B033E4 ADRP X8, 0x656000
	0x03B033E8 STR S1, [X19 + 0x404]
	0x03B033EC LDR V0, [X19 + 0x61C]
	0x03B033F0 LDR X8, [X8 + 0x2A0]
	0x03B033F4 ADD X0, X19, 0x620
	0x03B033F8 LDR X1, [X8]
	0x03B033FC BL 0x2673508
	0x03B03400 LDR X8, [X19 + 0x100]
	0x03B03404 CBZ X8, 0x3B05924
	0x03B03408 LDR X19, [X31 + 0x20]
	0x03B0340C ADD X1, X8, 0x50
	0x03B03410 ADD X0, X31, 0x270
	0x03B03414 MOVZ W2, 0x60
	0x03B03418 LDR V8, [X19 + 0x1E8]
	0x03B0341C BL 0x3EB1B30
	0x03B03420 ADD X0, X31, 0x270
	0x03B03424 MOV X1, X31
	0x03B03428 BL 0x3C9BF88
	0x03B0342C LDR X8, [X19 + 0x100]
	0x03B03430 CBZ X8, 0x3B05924
	0x03B03434 MOV W20, W0
	0x03B03438 ADD X1, X8, 0x50
	0x03B0343C ADD X0, X31, 0x270
	0x03B03440 MOVZ W2, 0x60
	0x03B03444 BL 0x3EB1B30
	0x03B03448 ADD X0, X31, 0x270
	0x03B0344C MOV X1, X31
	0x03B03450 BL 0x3C9BF98
	0x03B03454 LDR X8, [X31 + 0x20]
	0x03B03458 LDR X8, [X8 + 0x100]
	0x03B0345C CBZ X8, 0x3B05924
	0x03B03460 LDR X19, [X31 + 0x20]
	0x03B03464 ADRP X10, 0xFFFFFFFFFCFE7000
	0x03B03468 LDR V3, [X10 + 0xBC]
	0x03B0346C SCVTF S1, W20
	0x03B03470 LDRB W9, [X19 + 0x305]
	0x03B03474 LDR V9, [X19 + 0x61C]
	0x03B03478 FMOV S2, 1
	0x03B0347C FDIV S1, S8, S1
	0x03B03480 CMP W9, 0x0
	0x03B03484 FMUL S0, S1, S0
	0x03B03488 FCSEL S1, S3, S2, EQ
	0x03B0348C ADD X1, X8, 0x50
	0x03B03490 ADD X0, X31, 0x270
	0x03B03494 MOVZ W2, 0x60
	0x03B03498 FMUL S8, S0, S1
	0x03B0349C BL 0x3EB1B30
	0x03B034A0 ADD X0, X31, 0x270
	0x03B034A4 MOV X1, X31
	0x03B034A8 BL 0x3C9C028
	0x03B034AC LDR V1, [X19 + 0x404]
	0x03B034B0 FMUL S0, S8, S0
	0x03B034B4 ADD X0, X19, 0x260
	0x03B034B8 MOVZ W1, 0x100
	0x03B034BC FMUL S0, S0, S1
	0x03B034C0 FADD S0, S9, S0
	0x03B034C4 MOV X2, X31
	0x03B034C8 STR S0, [X19 + 0x61C]
	0x03B034CC BL 0x3B1CF38
	0x03B034D0 LDR W8, [X19 + 0x25C]
	0x03B034D4 ORR W8, W8, 0x100
	0x03B034D8 STR W8, [X19 + 0x25C]
	0x03B034DC B 0x3B00B64
	0x03B034E0 LDR W8, [X0 + 0xE0]
	0x03B034E4 CBNZ W8, 0x3B03504
	0x03B034E8 BL 0x1C16DFC
	0x03B034EC ADRP X8, 0x655000
	0x03B034F0 LDR X8, [X8 + 0x3E8]
	0x03B034F4 LDR X8, [X8]
	0x03B034F8 LDR X8, [X8 + 0xB8]
	0x03B034FC LDR X9, [X8 + 0x88]
	0x03B03500 CBZ X9, 0x3B05924
	0x03B03504 LDR W8, [X9 + 0x18]
	0x03B03508 CBZ W8, 0x3B058BC
	0x03B0350C LDR W8, [X9 + 0x24]
	0x03B03510 MOVZ W9, 0x44CB
	0x03B03514 MOVK W9, 0xE4B00000
	0x03B03518 CMP W8, W9
	0x03B0351C STR W8, [X31 + 0x26C]
	0x03B03520 B.LE 0x3B03EF4
	0x03B03524 MOVZ W9, 0xEC40
	0x03B03528 MOVK W9, 0x8250000
	0x03B0352C CMP W8, W9
	0x03B03530 B.EQ 0x3B04CE4
	0x03B03534 MOVZ W9, 0x6C44
	0x03B03538 MOVK W9, 0x74B0000
	0x03B0353C CMP W8, W9
	0x03B03540 B.EQ 0x3B04CF4
	0x03B03544 MOVZ W9, 0x98DB
	0x03B03548 MOVK W9, 0x390000
	0x03B0354C CMP W8, W9
	0x03B03550 B.NE 0x3B05A00
	0x03B03554 LDR X9, [X31 + 0x20]
	0x03B03558 MOVZ W8, 0x1
	0x03B0355C MOVZ W1, 0x1
	0x03B03560 B 0x3B04D00
	0x03B03564 LDR X9, [X31 + 0x20]
	0x03B03568 MOVZ W1, 0x20
	0x03B0356C LDR W8, [X9 + 0x25C]
	0x03B03570 ADD X0, X9, 0x260
	0x03B03574 ORR W8, W8, 0x20
	0x03B03578 B 0x3B037DC
	0x03B0357C LDR X8, [X31 + 0x20]
	0x03B03580 STRB W31, [X8 + 0x2DB]
	0x03B03584 B 0x3B00B64
	0x03B03588 LDR W10, [X0 + 0xE0]
	0x03B0358C CBNZ W10, 0x3B035AC
	0x03B03590 BL 0x1C16DFC
	0x03B03594 ADRP X8, 0x655000
	0x03B03598 LDR X8, [X8 + 0x3E8]
	0x03B0359C LDR X8, [X8]
	0x03B035A0 LDR X8, [X8 + 0xB8]
	0x03B035A4 LDR X9, [X8 + 0x88]
	0x03B035A8 CBZ X9, 0x3B05924
	0x03B035AC LDR W10, [X9 + 0x18]
	0x03B035B0 CBZ W10, 0x3B058BC
	0x03B035B4 LDR X1, [X8 + 0x80]
	0x03B035B8 LDP W2, W3, [X9 + 0x2C]
	0x03B035BC ADD X4, X31, 0x70
	0x03B035C0 STR W31, [X31 + 0x70]
	0x03B035C4 BL 0x3B0C268
	0x03B035C8 MOVZ W8, 0xC7000000
	0x03B035CC MOV V8.16B, V0.16B
	0x03B035D0 FMOV S0, W8
	0x03B035D4 FCMP S8, S0
	0x03B035D8 B.EQ 0x3B05A00
	0x03B035DC LDR W8, [X31 + 0x2C]
	0x03B035E0 CMP W8, 0x2
	0x03B035E4 B.EQ 0x3B049C0
	0x03B035E8 LDR W8, [X31 + 0x2C]
	0x03B035EC CMP W8, 0x1
	0x03B035F0 B.EQ 0x3B04A88
	0x03B035F4 LDR W8, [X31 + 0x2C]
	0x03B035F8 CBNZ W8, 0x3B00B64
	0x03B035FC LDR X10, [X31 + 0x20]
	0x03B03600 ADRP X9, 0xFFFFFFFFFCFE7000
	0x03B03604 LDR V0, [X9 + 0xBC]
	0x03B03608 FMOV S1, 1
	0x03B0360C LDRB W8, [X10 + 0x305]
	0x03B03610 CMP W8, 0x0
	0x03B03614 FCSEL S0, S0, S1, EQ
	0x03B03618 FMUL S0, S8, S0
	0x03B0361C B 0x3B04AB0
	0x03B03620 LDR W8, [X0 + 0xE0]
	0x03B03624 CBNZ W8, 0x3B03644
	0x03B03628 BL 0x1C16DFC
	0x03B0362C ADRP X8, 0x655000
	0x03B03630 LDR X8, [X8 + 0x3E8]
	0x03B03634 LDR X8, [X8]
	0x03B03638 LDR X8, [X8 + 0xB8]
	0x03B0363C LDR X9, [X8 + 0x88]
	0x03B03640 CBZ X9, 0x3B05924
	0x03B03644 LDR W8, [X9 + 0x18]
	0x03B03648 CBZ W8, 0x3B058BC
	0x03B0364C LDR W20, [X9 + 0x24]
	0x03B03650 ADD X1, X31, 0x2E0
	0x03B03654 MOV X2, X31
	0x03B03658 MOV W0, W20
	0x03B0365C BL 0x3ACB350
	0x03B03660 TBNZ X0, 0x0, 0x3B0445C
	0x03B03664 ADRP X19, 0x5F0000
	0x03B03668 LDR X19, [X19 + 0x598]
	0x03B0366C LDR X21, [X31 + 0x2E0]
	0x03B03670 LDR X0, [X19]
	0x03B03674 LDR W8, [X0 + 0xE0]
	0x03B03678 CBNZ W8, 0x3B03680
	0x03B0367C BL 0x1C16DFC
	0x03B03680 MOV X0, X21
	0x03B03684 MOV X1, X31
	0x03B03688 MOV X2, X31
	0x03B0368C BL 0x3C3883C
	0x03B03690 TBZ X0, 0x0, 0x3B04424
	0x03B03694 MOV X0, X31
	0x03B03698 BL 0x3B14060
	0x03B0369C ADRP X8, 0x655000
	0x03B036A0 LDR X8, [X8 + 0x3E8]
	0x03B036A4 MOV X21, X0
	0x03B036A8 LDR X8, [X8]
	0x03B036AC LDR W9, [X8 + 0xE0]
	0x03B036B0 CBNZ W9, 0x3B036C8
	0x03B036B4 MOV X0, X8
	0x03B036B8 BL 0x1C16DFC
	0x03B036BC ADRP X8, 0x655000
	0x03B036C0 LDR X8, [X8 + 0x3E8]
	0x03B036C4 LDR X8, [X8]
	0x03B036C8 LDR X9, [X8 + 0xB8]
	0x03B036CC LDR X8, [X9 + 0x88]
	0x03B036D0 CBZ X8, 0x3B05924
	0x03B036D4 LDR W10, [X8 + 0x18]
	0x03B036D8 CBZ W10, 0x3B058BC
	0x03B036DC LDR X1, [X9 + 0x80]
	0x03B036E0 LDP W2, W3, [X8 + 0x2C]
	0x03B036E4 MOV X0, X31
	0x03B036E8 MOV X4, X31
	0x03B036EC BL 0x322EAE4
	0x03B036F0 MOV X1, X0
	0x03B036F4 MOV X0, X21
	0x03B036F8 MOV X2, X31
	0x03B036FC BL 0x321B938
	0x03B03700 ADRP X8, 0x656000
	0x03B03704 LDR X8, [X8 + 0x230]
	0x03B03708 LDR X1, [X8]
	0x03B0370C BL 0x2241FB8
	0x03B03710 MOV X21, X0
	0x03B03714 STR X0, [X31 + 0x2E0]
	0x03B03718 B 0x3B04428
	0x03B0371C LDR W9, [X0 + 0xE0]
	0x03B03720 CBNZ W9, 0x3B03738
	0x03B03724 BL 0x1C16DFC
	0x03B03728 ADRP X8, 0x655000
	0x03B0372C LDR X8, [X8 + 0x3E8]
	0x03B03730 LDR X0, [X8]
	0x03B03734 LDR X8, [X0 + 0xB8]
	0x03B03738 LDR X1, [X8 + 0x80]
	0x03B0373C CBZ X1, 0x3B05924
	0x03B03740 LDR W9, [X1 + 0x18]
	0x03B03744 CMP W9, 0x6
	0x03B03748 B.LS 0x3B058BC
	0x03B0374C LDRH W9, [X1 + 0x2C]
	0x03B03750 LDR W10, [X0 + 0xE0]
	0x03B03754 CMP W9, 0x23
	0x03B03758 CSET W9, EQ
	0x03B0375C CMP W25, 0xA
	0x03B03760 CSET W11, EQ
	0x03B03764 AND W19, W11, W9, 0x0
	0x03B03768 CBNZ W10, 0x3B03784
	0x03B0376C BL 0x1C16DFC
	0x03B03770 ADRP X8, 0x655000
	0x03B03774 LDR X8, [X8 + 0x3E8]
	0x03B03778 LDR X0, [X8]
	0x03B0377C LDR X8, [X0 + 0xB8]
	0x03B03780 LDR X1, [X8 + 0x80]
	0x03B03784 CBZ W19, 0x3B03F24
	0x03B03788 MOVZ W2, 0xA
	0x03B0378C B 0x3B04D6C
	0x03B03790 ADRP X8, 0x656000
	0x03B03794 LDR X8, [X8 + 0x2E0]
	0x03B03798 LDR X19, [X31 + 0x20]
	0x03B0379C LDR X1, [X8]
	0x03B037A0 ADD X20, X19, 0x218
	0x03B037A4 MOV X0, X20
	0x03B037A8 BL 0x2672218
	0x03B037AC LDR W8, [X19 + 0x25C]
	0x03B037B0 CMP W8, 0x1
	0x03B037B4 B.NE 0x3B03ED4
	0x03B037B8 LDR X9, [X31 + 0x20]
	0x03B037BC MOVZ W8, 0x2BC
	0x03B037C0 STR W8, [X9 + 0x214]
	0x03B037C4 B 0x3B00B64
	0x03B037C8 LDR X9, [X31 + 0x20]
	0x03B037CC MOVZ W1, 0x8
	0x03B037D0 LDR W8, [X9 + 0x25C]
	0x03B037D4 ADD X0, X9, 0x260
	0x03B037D8 ORR W8, W8, 0x8
	0x03B037DC STR W8, [X9 + 0x25C]
	0x03B037E0 MOV X2, X31
	0x03B037E4 BL 0x3B1CF38
	0x03B037E8 B 0x3B00B64
	0x03B037EC ADRP X8, 0x656000
	0x03B037F0 LDR X8, [X8 + 0x2C8]
	0x03B037F4 LDR X19, [X31 + 0x20]
	0x03B037F8 LDR X1, [X8]
	0x03B037FC ADD X0, X19, 0x1F0
	0x03B03800 BL 0x26734A4
	0x03B03804 STR S0, [X19 + 0x1E8]
	0x03B03808 B 0x3B00B64
	0x03B0380C LDR W9, [X0 + 0xE0]
	0x03B03810 CBNZ W9, 0x3B03828
	0x03B03814 BL 0x1C16DFC
	0x03B03818 ADRP X8, 0x655000
	0x03B0381C LDR X8, [X8 + 0x3E8]
	0x03B03820 LDR X8, [X8]
	0x03B03824 LDR X8, [X8 + 0xB8]
	0x03B03828 ADRP X9, 0x656000
	0x03B0382C LDR X9, [X9 + 0x2D8]
	0x03B03830 ADD X0, X8, 0x10
	0x03B03834 ADD X8, X31, 0x70
	0x03B03838 LDR X1, [X9]
	0x03B0383C BL 0x26728B0
	0x03B03840 LDP X10, X8, [X31 + 0x70]
	0x03B03844 LDR X9, [X31 + 0x88]
	0x03B03848 LDR X11, [X31 + 0x20]
	0x03B0384C STR X8, [X11 + 0x100]
	0x03B03850 STR X9, [X11 + 0x118]
	0x03B03854 STR W10, [X11 + 0x120]
	0x03B03858 B 0x3B00B64
	0x03B0385C ADRP X8, 0x656000
	0x03B03860 LDR X8, [X8 + 0x2C0]
	0x03B03864 LDR X19, [X31 + 0x20]
	0x03B03868 LDR X1, [X8]
	0x03B0386C ADD X0, X19, 0x280
	0x03B03870 BL 0x2672218
	0x03B03874 STR W0, [X19 + 0x278]
	0x03B03878 B 0x3B00B64
	0x03B0387C LDR X9, [X31 + 0x20]
	0x03B03880 MOVZ W8, 0xFE00
	0x03B03884 MOVK W8, 0xC6FF0000
	0x03B03888 STR W8, [X9 + 0x2C0]
	0x03B0388C B 0x3B00B64
	0x03B03890 LDR X8, [X31 + 0x20]
	0x03B03894 STR W31, [X8 + 0x408]
	0x03B03898 B 0x3B00B64
	0x03B0389C LDR X9, [X31 + 0x20]
	0x03B038A0 MOVZ W1, 0x200
	0x03B038A4 MOV X2, X31
	0x03B038A8 LDR W8, [X9 + 0x25C]
	0x03B038AC ADD X0, X9, 0x260
	0x03B038B0 ORR W8, W8, 0x200
	0x03B038B4 STR W8, [X9 + 0x25C]
	0x03B038B8 BL 0x3B1CF38
	0x03B038BC ADRP X19, 0x655000
	0x03B038C0 LDR X19, [X19 + 0x350]
	0x03B038C4 LDR X0, [X19]
	0x03B038C8 LDR W8, [X0 + 0xE0]
	0x03B038CC CBNZ W8, 0x3B038D4
	0x03B038D0 BL 0x1C16DFC
	0x03B038D4 ADRP X20, 0x8DF000
	0x03B038D8 LDRB W8, [X20 + 0x4A6]
	0x03B038DC CBNZ W8, 0x3B038F4
	0x03B038E0 ADRP X0, 0x655000
	0x03B038E4 LDR X0, [X0 + 0x350]
	0x03B038E8 BL 0x1C16CF4
	0x03B038EC MOVZ W8, 0x1
	0x03B038F0 STRB W8, [X20 + 0x4A6]
	0x03B038F4 LDR X0, [X19]
	0x03B038F8 LDR W8, [X0 + 0xE0]
	0x03B038FC CBNZ W8, 0x3B03908
	0x03B03900 BL 0x1C16DFC
	0x03B03904 LDR X0, [X19]
	0x03B03908 LDR X8, [X0 + 0xB8]
	0x03B0390C ADRP X9, 0xFFFFFFFFFCFE7000
	0x03B03910 ADRP X10, 0xFFFFFFFFFCFE7000
	0x03B03914 ADRP X28, 0x655000
	0x03B03918 LDR V0, [X8]
	0x03B0391C LDR V12, [X9 + 0x330]
	0x03B03920 LDR V13, [X10 + 0xBC]
	0x03B03924 MOVZ W24, 0x4D63
	0x03B03928 STR V0, [X31 + 0x31]
	0x03B0392C LDR X28, [X28 + 0x3E8]
	0x03B03930 MOVZ W25, 0x3719
	0x03B03934 MOV W21, W31
	0x03B03938 MOVN W20, 0xBFFF0000
	0x03B0393C MOVZ W22, 0x18
	0x03B03940 MOVZ W23, 0xA825
	0x03B03944 MOVK W24, 0x40000
	0x03B03948 MOVK W25, 0xE60000
	0x03B0394C MOVZ W26, 0x7625
	0x03B03950 LDR X0, [X28]
	0x03B03954 LDR W8, [X0 + 0xE0]
	0x03B03958 CBNZ W8, 0x3B03964
	0x03B0395C BL 0x1C16DFC
	0x03B03960 LDR X0, [X28]
	0x03B03964 LDR X8, [X0 + 0xB8]
	0x03B03968 LDR X9, [X8 + 0x88]
	0x03B0396C CBZ X9, 0x3B05924
	0x03B03970 LDR W10, [X9 + 0x18]
	0x03B03974 CMP W21, W10
	0x03B03978 B.GE 0x3B03E64
	0x03B0397C LDR W10, [X0 + 0xE0]
	0x03B03980 CBNZ W10, 0x3B039A0
	0x03B03984 BL 0x1C16DFC
	0x03B03988 LDR X0, [X28]
	0x03B0398C LDR X8, [X0 + 0xB8]
	0x03B03990 LDR X9, [X8 + 0x88]
	0x03B03994 CBZ X9, 0x3B05924
	0x03B03998 ADRP X28, 0x655000
	0x03B0399C LDR X28, [X28 + 0x3E8]
	0x03B039A0 LDR W10, [X9 + 0x18]
	0x03B039A4 CMP W21, W10
	0x03B039A8 B.CS 0x3B058BC
	0x03B039AC SXTW X27, W21
	0x03B039B0 MADD X10, X27, X22, X9
	0x03B039B4 LDR W10, [X10 + 0x20]
	0x03B039B8 CBZ W10, 0x3B03E64
	0x03B039BC LDR W10, [X0 + 0xE0]
	0x03B039C0 CBNZ W10, 0x3B039D8
	0x03B039C4 BL 0x1C16DFC
	0x03B039C8 LDR X0, [X28]
	0x03B039CC LDR X8, [X0 + 0xB8]
	0x03B039D0 LDR X9, [X8 + 0x88]
	0x03B039D4 CBZ X9, 0x3B05924
	0x03B039D8 LDR W10, [X9 + 0x18]
	0x03B039DC CMP W21, W10
	0x03B039E0 B.CS 0x3B058BC
	0x03B039E4 MADD X10, X27, X22, X9
	0x03B039E8 LDR W10, [X10 + 0x20]
	0x03B039EC CMP W10, W23
	0x03B039F0 B.LE 0x3B03B44
	0x03B039F4 CMP W10, W24
	0x03B039F8 B.EQ 0x3B03BDC
	0x03B039FC CMP W10, W25
	0x03B03A00 B.NE 0x3B03C24
	0x03B03A04 LDR W10, [X0 + 0xE0]
	0x03B03A08 CBNZ W10, 0x3B03A28
	0x03B03A0C BL 0x1C16DFC
	0x03B03A10 ADRP X8, 0x655000
	0x03B03A14 LDR X8, [X8 + 0x3E8]
	0x03B03A18 LDR X8, [X8]
	0x03B03A1C LDR X8, [X8 + 0xB8]
	0x03B03A20 LDR X9, [X8 + 0x88]
	0x03B03A24 CBZ X9, 0x3B05924
	0x03B03A28 LDR W10, [X9 + 0x18]
	0x03B03A2C CMP W21, W10
	0x03B03A30 B.CS 0x3B058BC
	0x03B03A34 MADD X9, X27, X22, X9
	0x03B03A38 LDR X1, [X8 + 0x80]
	0x03B03A3C LDP W2, W3, [X9 + 0x2C]
	0x03B03A40 LDR X0, [X31 + 0x20]
	0x03B03A44 ADD X4, X8, 0x90
	0x03B03A48 BL 0x3B0C1BC
	0x03B03A4C CMP W0, 0x4
	0x03B03A50 B.NE 0x3B05A00
	0x03B03A54 ADRP X8, 0x655000
	0x03B03A58 LDR X8, [X8 + 0x3E8]
	0x03B03A5C LDR X0, [X8]
	0x03B03A60 LDR W8, [X0 + 0xE0]
	0x03B03A64 CBNZ W8, 0x3B03A78
	0x03B03A68 BL 0x1C16DFC
	0x03B03A6C ADRP X8, 0x655000
	0x03B03A70 LDR X8, [X8 + 0x3E8]
	0x03B03A74 LDR X0, [X8]
	0x03B03A78 LDR X8, [X0 + 0xB8]
	0x03B03A7C LDR X8, [X8 + 0x90]
	0x03B03A80 CBZ X8, 0x3B05924
	0x03B03A84 LDR W9, [X8 + 0x18]
	0x03B03A88 CBZ W9, 0x3B058BC
	0x03B03A8C CMP W9, 0x1
	0x03B03A90 B.EQ 0x3B058BC
	0x03B03A94 CMP W9, 0x2
	0x03B03A98 B.LS 0x3B058BC
	0x03B03A9C CMP W9, 0x3
	0x03B03AA0 B.EQ 0x3B058BC
	0x03B03AA4 LDR X0, [X19]
	0x03B03AA8 LDP S11, S10, [X8 + 0x20]
	0x03B03AAC LDP S9, S8, [X8 + 0x28]
	0x03B03AB0 LDR W9, [X0 + 0xE0]
	0x03B03AB4 CBNZ W9, 0x3B03ABC
	0x03B03AB8 BL 0x1C16DFC
	0x03B03ABC ADD X0, X31, 0x310
	0x03B03AC0 MOV V0.16B, V11.16B
	0x03B03AC4 MOV V1.16B, V10.16B
	0x03B03AC8 MOV V2.16B, V9.16B
	0x03B03ACC MOV V3.16B, V8.16B
	0x03B03AD0 MOV X1, X31
	0x03B03AD4 BL 0x3ADBB18
	0x03B03AD8 LDR X10, [X31 + 0x20]
	0x03B03ADC LDR X0, [X19]
	0x03B03AE0 LDR V8, [X31 + 0x310]
	0x03B03AE4 LDR V9, [X31 + 0x314]
	0x03B03AE8 LDRB W8, [X10 + 0x305]
	0x03B03AEC LDR V11, [X31 + 0x318]
	0x03B03AF0 LDR V10, [X31 + 0x31C]
	0x03B03AF4 LDR W9, [X0 + 0xE0]
	0x03B03AF8 LDR V14, [X10 + 0x1E4]
	0x03B03AFC CMP W8, 0x0
	0x03B03B00 FMOV S0, 1
	0x03B03B04 FCSEL S15, S13, S0, EQ
	0x03B03B08 CBNZ W9, 0x3B03B10
	0x03B03B0C BL 0x1C16DFC
	0x03B03B10 FMUL S0, S14, S12
	0x03B03B14 FMUL S4, S0, S15
	0x03B03B18 MOV V0.16B, V8.16B
	0x03B03B1C MOV V1.16B, V9.16B
	0x03B03B20 MOV V2.16B, V11.16B
	0x03B03B24 MOV V3.16B, V10.16B
	0x03B03B28 MOV X0, X31
	0x03B03B2C BL 0x3ADBC08
	0x03B03B30 STR S0, [X31 + 0x310]
	0x03B03B34 STR S1, [X31 + 0x314]
	0x03B03B38 STR S2, [X31 + 0x318]
	0x03B03B3C STR S3, [X31 + 0x31C]
	0x03B03B40 B 0x3B03C24
	0x03B03B44 CMP W10, W26
	0x03B03B48 B.EQ 0x3B03B54
	0x03B03B4C CMP W10, W23
	0x03B03B50 B.NE 0x3B03C24
	0x03B03B54 LDR W10, [X0 + 0xE0]
	0x03B03B58 CBNZ W10, 0x3B03B78
	0x03B03B5C BL 0x1C16DFC
	0x03B03B60 ADRP X8, 0x655000
	0x03B03B64 LDR X8, [X8 + 0x3E8]
	0x03B03B68 LDR X0, [X8]
	0x03B03B6C LDR X8, [X0 + 0xB8]
	0x03B03B70 LDR X9, [X8 + 0x88]
	0x03B03B74 CBZ X9, 0x3B05924
	0x03B03B78 LDR W10, [X9 + 0x18]
	0x03B03B7C CMP W21, W10
	0x03B03B80 B.CS 0x3B058BC
	0x03B03B84 MADD X10, X27, X22, X9
	0x03B03B88 LDR W10, [X10 + 0x28]
	0x03B03B8C ADRP X28, 0x655000
	0x03B03B90 LDR X28, [X28 + 0x3E8]
	0x03B03B94 CMP W10, 0x4
	0x03B03B98 B.NE 0x3B03C2C
	0x03B03B9C LDR W10, [X0 + 0xE0]
	0x03B03BA0 CBNZ W10, 0x3B03BC0
	0x03B03BA4 BL 0x1C16DFC
	0x03B03BA8 ADRP X8, 0x655000
	0x03B03BAC LDR X8, [X8 + 0x3E8]
	0x03B03BB0 LDR X8, [X8]
	0x03B03BB4 LDR X8, [X8 + 0xB8]
	0x03B03BB8 LDR X9, [X8 + 0x88]
	0x03B03BBC CBZ X9, 0x3B05924
	0x03B03BC0 LDR W10, [X9 + 0x18]
	0x03B03BC4 CBZ W10, 0x3B058BC
	0x03B03BC8 LDR X1, [X8 + 0x80]
	0x03B03BCC LDP W2, W3, [X9 + 0x2C]
	0x03B03BD0 BL 0x3B0BF70
	0x03B03BD4 MOV X20, X0
	0x03B03BD8 B 0x3B03C24
	0x03B03BDC LDR W10, [X0 + 0xE0]
	0x03B03BE0 CBNZ W10, 0x3B03C00
	0x03B03BE4 BL 0x1C16DFC
	0x03B03BE8 ADRP X8, 0x655000
	0x03B03BEC LDR X8, [X8 + 0x3E8]
	0x03B03BF0 LDR X8, [X8]
	0x03B03BF4 LDR X8, [X8 + 0xB8]
	0x03B03BF8 LDR X9, [X8 + 0x88]
	0x03B03BFC CBZ X9, 0x3B05924
	0x03B03C00 LDR W10, [X9 + 0x18]
	0x03B03C04 CMP W21, W10
	0x03B03C08 B.CS 0x3B058BC
	0x03B03C0C LDR X1, [X8 + 0x80]
	0x03B03C10 NOP
	0x03B03C14 MADD X8, X27, X22, X9
	0x03B03C18 LDP W2, W3, [X8 + 0x2C]
	0x03B03C1C BL 0x3B0BF70
	0x03B03C20 MOV W20, W0
	0x03B03C24 ADRP X28, 0x655000
	0x03B03C28 LDR X28, [X28 + 0x3E8]
	0x03B03C2C ADD W21, W21, 0x1
	0x03B03C30 B 0x3B03950
	0x03B03C34 LDR X9, [X31 + 0x20]
	0x03B03C38 MOVZ W8, 0xBF800000
	0x03B03C3C STR W8, [X9 + 0x360]
	0x03B03C40 B 0x3B00B64
	0x03B03C44 LDR X9, [X31 + 0x20]
	0x03B03C48 MOVZ W1, 0x4
	0x03B03C4C MOV X2, X31
	0x03B03C50 LDR W8, [X9 + 0x25C]
	0x03B03C54 ADD X0, X9, 0x260
	0x03B03C58 ORR W8, W8, 0x4
	0x03B03C5C STR W8, [X9 + 0x25C]
	0x03B03C60 BL 0x3B1CF38
	0x03B03C64 ADRP X8, 0x655000
	0x03B03C68 LDR X8, [X8 + 0x3E8]
	0x03B03C6C LDR X0, [X8]
	0x03B03C70 LDR W8, [X0 + 0xE0]
	0x03B03C74 CBNZ W8, 0x3B03C88
	0x03B03C78 BL 0x1C16DFC
	0x03B03C7C ADRP X8, 0x655000
	0x03B03C80 LDR X8, [X8 + 0x3E8]
	0x03B03C84 LDR X0, [X8]
	0x03B03C88 LDR X8, [X0 + 0xB8]
	0x03B03C8C LDR X8, [X8 + 0x88]
	0x03B03C90 CBZ X8, 0x3B05924
	0x03B03C94 LDR W9, [X8 + 0x18]
	0x03B03C98 CMP W9, 0x1
	0x03B03C9C B.LS 0x3B058BC
	0x03B03CA0 LDR W9, [X8 + 0x38]
	0x03B03CA4 MOVZ W10, 0x4D63
	0x03B03CA8 MOVK W10, 0x40000
	0x03B03CAC CMP W9, W10
	0x03B03CB0 B.EQ 0x3B03CF8
	0x03B03CB4 LDR W9, [X0 + 0xE0]
	0x03B03CB8 CBNZ W9, 0x3B03CD8
	0x03B03CBC BL 0x1C16DFC
	0x03B03CC0 ADRP X8, 0x655000
	0x03B03CC4 LDR X8, [X8 + 0x3E8]
	0x03B03CC8 LDR X0, [X8]
	0x03B03CCC LDR X8, [X0 + 0xB8]
	0x03B03CD0 LDR X8, [X8 + 0x88]
	0x03B03CD4 CBZ X8, 0x3B05924
	0x03B03CD8 LDR W9, [X8 + 0x18]
	0x03B03CDC CMP W9, 0x1
	0x03B03CE0 B.LS 0x3B058BC
	0x03B03CE4 LDR W8, [X8 + 0x38]
	0x03B03CE8 MOVZ W9, 0xEF43
	0x03B03CEC MOVK W9, 0x20000
	0x03B03CF0 CMP W8, W9
	0x03B03CF4 B.NE 0x3B04618
	0x03B03CF8 LDR W8, [X0 + 0xE0]
	0x03B03CFC CBNZ W8, 0x3B03D10
	0x03B03D00 BL 0x1C16DFC
	0x03B03D04 ADRP X8, 0x655000
	0x03B03D08 LDR X8, [X8 + 0x3E8]
	0x03B03D0C LDR X0, [X8]
	0x03B03D10 LDR X9, [X0 + 0xB8]
	0x03B03D14 LDR X8, [X9 + 0x88]
	0x03B03D18 CBZ X8, 0x3B05924
	0x03B03D1C LDR W10, [X8 + 0x18]
	0x03B03D20 CMP W10, 0x1
	0x03B03D24 B.LS 0x3B058BC
	0x03B03D28 LDR X1, [X9 + 0x80]
	0x03B03D2C LDP W2, W3, [X8 + 0x44]
	0x03B03D30 BL 0x3B0BF70
	0x03B03D34 LDR X11, [X31 + 0x20]
	0x03B03D38 UBFM X10, X0, 0x18, 0x3F
	0x03B03D3C LDRB W8, [X11 + 0x4EF]
	0x03B03D40 ADD X9, X11, 0x158
	0x03B03D44 STR W0, [X11 + 0x158]
	0x03B03D48 CMP W8, W10, UXTB
	0x03B03D4C CSEL W8, W8, W10, CC
	0x03B03D50 STRB W8, [X9 + 0x3]
	0x03B03D54 LDR W8, [X11 + 0x158]
	0x03B03D58 B 0x3B04624
	0x03B03D5C LDR X8, [X31 + 0x20]
	0x03B03D60 LDRB W8, [X8 + 0x258]
	0x03B03D64 TBNZ X8, 0x0, 0x3B00B64
	0x03B03D68 LDR X8, [X31 + 0x20]
	0x03B03D6C MOVZ W1, 0x1
	0x03B03D70 MOV X2, X31
	0x03B03D74 MOVZ W20, 0x1
	0x03B03D78 ADD X0, X8, 0x260
	0x03B03D7C BL 0x3B1D034
	0x03B03D80 ANDS W31, W0, 0xFF
	0x03B03D84 B.NE 0x3B05A04
	0x03B03D88 LDR X19, [X31 + 0x20]
	0x03B03D8C LDR W8, [X19 + 0x25C]
	0x03B03D90 ADD X0, X19, 0x218
	0x03B03D94 AND W8, W8, 0xFFFFFFFE
	0x03B03D98 STR W8, [X19 + 0x25C]
	0x03B03D9C ADRP X8, 0x656000
	0x03B03DA0 LDR X8, [X8 + 0x288]
	0x03B03DA4 LDR X1, [X8]
	0x03B03DA8 BL 0x26723D0
	0x03B03DAC STR W0, [X19 + 0x214]
	0x03B03DB0 B 0x3B00B64
	0x03B03DB4 LDR X8, [X31 + 0x20]
	0x03B03DB8 STR W31, [X8 + 0x2B0]
	0x03B03DBC B 0x3B00B64
	0x03B03DC0 LDR W10, [X0 + 0xE0]
	0x03B03DC4 CBNZ W10, 0x3B03DE4
	0x03B03DC8 BL 0x1C16DFC
	0x03B03DCC ADRP X8, 0x655000
	0x03B03DD0 LDR X8, [X8 + 0x3E8]
	0x03B03DD4 LDR X8, [X8]
	0x03B03DD8 LDR X8, [X8 + 0xB8]
	0x03B03DDC LDR X9, [X8 + 0x88]
	0x03B03DE0 CBZ X9, 0x3B05924
	0x03B03DE4 LDR W10, [X9 + 0x18]
	0x03B03DE8 CBZ W10, 0x3B058BC
	0x03B03DEC LDR X1, [X8 + 0x80]
	0x03B03DF0 LDP W2, W3, [X9 + 0x2C]
	0x03B03DF4 ADD X4, X31, 0x70
	0x03B03DF8 STR W31, [X31 + 0x70]
	0x03B03DFC BL 0x3B0C268
	0x03B03E00 MOVZ W8, 0xC7000000
	0x03B03E04 FMOV S1, W8
	0x03B03E08 FCMP S0, S1
	0x03B03E0C B.EQ 0x3B05A00
	0x03B03E10 LDR W8, [X31 + 0x2C]
	0x03B03E14 CBZ W8, 0x3B04C44
	0x03B03E18 LDR W8, [X31 + 0x2C]
	0x03B03E1C CMP W8, 0x1
	0x03B03E20 B.EQ 0x3B04C68
	0x03B03E24 LDR W8, [X31 + 0x2C]
	0x03B03E28 CMP W8, 0x2
	0x03B03E2C B.NE 0x3B04C94
	0x03B03E30 LDR X8, [X31 + 0x20]
	0x03B03E34 FMOV S2, -1
	0x03B03E38 FMOV S4, W31
	0x03B03E3C LDR V1, [X8 + 0x360]
	0x03B03E40 LDR V3, [X8 + 0x358]
	0x03B03E44 MOVZ W8, 0x42C80000
	0x03B03E48 FCMP S1, S2
	0x03B03E4C FCSEL S1, S4, S1, EQ
	0x03B03E50 FSUB S1, S3, S1
	0x03B03E54 FMUL S0, S0, S1
	0x03B03E58 FMOV S1, W8
	0x03B03E5C FDIV S0, S0, S1
	0x03B03E60 B 0x3B04C9C
	0x03B03E64 LDR X19, [X31 + 0x20]
	0x03B03E68 UBFM W8, W20, 0x18, 0x1F
	0x03B03E6C AND W1, W20, 0xFF0000
	0x03B03E70 LDR V0, [X31 + 0x310]
	0x03B03E74 LDRB W9, [X19 + 0x4EF]
	0x03B03E78 LDR V1, [X31 + 0x314]
	0x03B03E7C LDR V2, [X31 + 0x318]
	0x03B03E80 LDR V3, [X31 + 0x31C]
	0x03B03E84 CMP W9, W20, LSR
	0x03B03E88 CSEL W8, W9, W8, CC
	0x03B03E8C BFM W1, W8, 0x8, 0x7
	0x03B03E90 BFM W1, W20, 0x0, 0xF
	0x03B03E94 BFM W1, W20, 0x0, 0x7
	0x03B03E98 ADD X0, X31, 0x2F8
	0x03B03E9C MOV X2, X31
	0x03B03EA0 BL 0x3ADBDE8
	0x03B03EA4 ADRP X8, 0x656000
	0x03B03EA8 LDR X8, [X8 + 0x298]
	0x03B03EAC ADD X9, X31, 0x1F9
	0x03B03EB0 LDUR V0, [X9 + 0xFF]
	0x03B03EB4 LDR W9, [X31 + 0x308]
	0x03B03EB8 LDR X2, [X8]
	0x03B03EBC ADD X0, X19, 0x550
	0x03B03EC0 ADD X1, X31, 0x70
	0x03B03EC4 STR V0, [X31 + 0x7]
	0x03B03EC8 STR W9, [X31 + 0x80]
	0x03B03ECC BL 0x267170C
	0x03B03ED0 B 0x3B00B64
	0x03B03ED4 ADRP X8, 0x656000
	0x03B03ED8 LDR X8, [X8 + 0x288]
	0x03B03EDC MOV X0, X20
	0x03B03EE0 LDR X1, [X8]
	0x03B03EE4 BL 0x26723D0
	0x03B03EE8 LDR X8, [X31 + 0x20]
	0x03B03EEC STR W0, [X8 + 0x214]
	0x03B03EF0 B 0x3B00B64
	0x03B03EF4 MOVZ W9, 0x51FF
	0x03B03EF8 MOVK W9, 0xE0C70000
	0x03B03EFC CMP W8, W9
	0x03B03F00 B.EQ 0x3B046A4
	0x03B03F04 MOVZ W9, 0x44CB
	0x03B03F08 MOVK W9, 0xE4B00000
	0x03B03F0C CMP W8, W9
	0x03B03F10 B.NE 0x3B05A00
	0x03B03F14 LDR X9, [X31 + 0x20]
	0x03B03F18 MOVZ W8, 0x2
	0x03B03F1C MOVZ W1, 0x2
	0x03B03F20 B 0x3B04D00
	0x03B03F24 CBZ X1, 0x3B05924
	0x03B03F28 LDR W9, [X1 + 0x18]
	0x03B03F2C CMP W9, 0x6
	0x03B03F30 B.LS 0x3B058BC
	0x03B03F34 LDRH W9, [X1 + 0x2C]
	0x03B03F38 LDR W10, [X0 + 0xE0]
	0x03B03F3C CMP W9, 0x23
	0x03B03F40 CSET W9, EQ
	0x03B03F44 CMP W25, 0xB
	0x03B03F48 CSET W11, EQ
	0x03B03F4C AND W19, W11, W9, 0x0
	0x03B03F50 CBNZ W10, 0x3B03F6C
	0x03B03F54 BL 0x1C16DFC
	0x03B03F58 ADRP X8, 0x655000
	0x03B03F5C LDR X8, [X8 + 0x3E8]
	0x03B03F60 LDR X0, [X8]
	0x03B03F64 LDR X8, [X0 + 0xB8]
	0x03B03F68 LDR X1, [X8 + 0x80]
	0x03B03F6C CBZ W19, 0x3B045C4
	0x03B03F70 MOVZ W2, 0xB
	0x03B03F74 B 0x3B04D6C
	0x03B03F78 LDP W23, W20, [X9 + 0x38]
	0x03B03F7C ADD X1, X31, 0x2F0
	0x03B03F80 MOV W0, W21
	0x03B03F84 MOV X2, X31
	0x03B03F88 BL 0x3ACB218
	0x03B03F8C ADRP X19, 0x5F0000
	0x03B03F90 LDR X19, [X19 + 0x598]
	0x03B03F94 LDR X22, [X31 + 0x2F0]
	0x03B03F98 LDR X0, [X19]
	0x03B03F9C LDR W8, [X0 + 0xE0]
	0x03B03FA0 CBNZ W8, 0x3B03FA8
	0x03B03FA4 BL 0x1C16DFC
	0x03B03FA8 MOV X0, X22
	0x03B03FAC MOV X1, X31
	0x03B03FB0 MOV X2, X31
	0x03B03FB4 BL 0x3C3883C
	0x03B03FB8 TBZ X0, 0x0, 0x3B04E80
	0x03B03FBC ADRP X8, 0x655000
	0x03B03FC0 LDR X8, [X8 + 0x3E8]
	0x03B03FC4 LDR X0, [X8]
	0x03B03FC8 LDR W8, [X0 + 0xE0]
	0x03B03FCC CBNZ W8, 0x3B03FE0
	0x03B03FD0 BL 0x1C16DFC
	0x03B03FD4 ADRP X8, 0x655000
	0x03B03FD8 LDR X8, [X8 + 0x3E8]
	0x03B03FDC LDR X0, [X8]
	0x03B03FE0 LDR X8, [X0 + 0xB8]
	0x03B03FE4 LDR X22, [X8 + 0x70]
	0x03B03FE8 CBZ X22, 0x3B04D98
	0x03B03FEC LDR W9, [X0 + 0xE0]
	0x03B03FF0 CBNZ W9, 0x3B04008
	0x03B03FF4 BL 0x1C16DFC
	0x03B03FF8 ADRP X8, 0x655000
	0x03B03FFC LDR X8, [X8 + 0x3E8]
	0x03B04000 LDR X8, [X8]
	0x03B04004 LDR X8, [X8 + 0xB8]
	0x03B04008 LDR X9, [X8 + 0x88]
	0x03B0400C CBZ X9, 0x3B05924
	0x03B04010 LDR W10, [X9 + 0x18]
	0x03B04014 CBZ W10, 0x3B058BC
	0x03B04018 LDR X1, [X8 + 0x80]
	0x03B0401C LDP W2, W3, [X9 + 0x2C]
	0x03B04020 MOV X0, X31
	0x03B04024 MOV X4, X31
	0x03B04028 BL 0x322EAE4
	0x03B0402C LDR X8, [X22 + 0x40]
	0x03B04030 LDR X9, [X22 + 0x18]
	0x03B04034 LDR X3, [X22 + 0x28]
	0x03B04038 MOV X2, X0
	0x03B0403C MOV X0, X8
	0x03B04040 MOV W1, W21
	0x03B04044 BLR X9
	0x03B04048 MOV X21, X0
	0x03B0404C B 0x3B04D9C
	0x03B04050 LDR W10, [X0 + 0xE0]
	0x03B04054 CBNZ W10, 0x3B04074
	0x03B04058 BL 0x1C16DFC
	0x03B0405C ADRP X8, 0x654000
	0x03B04060 LDR X8, [X8 + 0x3E8]
	0x03B04064 LDR X8, [X8]
	0x03B04068 LDR X8, [X8 + 0xB8]
	0x03B0406C LDR X9, [X8 + 0x88]
	0x03B04070 CBZ X9, 0x3B05924
	0x03B04074 LDR W10, [X9 + 0x18]
	0x03B04078 CBZ W10, 0x3B058BC
	0x03B0407C LDR X1, [X8 + 0x80]
	0x03B04080 LDP W2, W3, [X9 + 0x2C]
	0x03B04084 ADD X4, X31, 0x70
	0x03B04088 STR W31, [X31 + 0x70]
	0x03B0408C BL 0x3B0C268
	0x03B04090 MOVZ W8, 0xC7000000
	0x03B04094 FMOV S1, W8
	0x03B04098 FCMP S0, S1
	0x03B0409C B.EQ 0x3B05A00
	0x03B040A0 LDR W8, [X31 + 0x2C]
	0x03B040A4 CBZ W8, 0x3B05098
	0x03B040A8 LDR W8, [X31 + 0x2C]
	0x03B040AC CMP W8, 0x1
	0x03B040B0 B.EQ 0x3B050BC
	0x03B040B4 LDR W8, [X31 + 0x2C]
	0x03B040B8 CMP W8, 0x2
	0x03B040BC B.NE 0x3B050E8
	0x03B040C0 LDR X8, [X31 + 0x20]
	0x03B040C4 FMOV S2, -1
	0x03B040C8 FMOV S4, W31
	0x03B040CC LDR V1, [X8 + 0x360]
	0x03B040D0 LDR V3, [X8 + 0x358]
	0x03B040D4 MOVZ W8, 0x42C80000
	0x03B040D8 FCMP S1, S2
	0x03B040DC FCSEL S1, S4, S1, EQ
	0x03B040E0 FSUB S1, S3, S1
	0x03B040E4 FMUL S0, S0, S1
	0x03B040E8 FMOV S1, W8
	0x03B040EC FDIV S0, S0, S1
	0x03B040F0 B 0x3B050F0
	0x03B040F4 ADD X1, X31, 0x2E8
	0x03B040F8 MOV W0, W20
	0x03B040FC MOV X2, X31
	0x03B04100 BL 0x3ACB3EC
	0x03B04104 TBZ X0, 0x0, 0x3B046B4
	0x03B04108 LDR X20, [X31 + 0x2E8]
	0x03B0410C LDR X9, [X31 + 0x20]
	0x03B04110 ADRP X8, 0x654000
	0x03B04114 STR X20, [X9 + 0x118]
	0x03B04118 LDR X8, [X8 + 0x3E8]
	0x03B0411C LDR X21, [X9 + 0x100]
	0x03B04120 LDR X0, [X8]
	0x03B04124 LDR W8, [X0 + 0xE0]
	0x03B04128 CBNZ W8, 0x3B0413C
	0x03B0412C BL 0x1C16DFC
	0x03B04130 ADRP X8, 0x654000
	0x03B04134 LDR X8, [X8 + 0x3E8]
	0x03B04138 LDR X0, [X8]
	0x03B0413C LDR X2, [X0 + 0xB8]
	0x03B04140 MOV X0, X20
	0x03B04144 MOV X1, X21
	0x03B04148 MOV X4, X31
	0x03B0414C LDR X3, [X2 + 0x8]
	0x03B04150 BL 0x3ACB600
	0x03B04154 LDR X8, [X31 + 0x20]
	0x03B04158 STR W0, [X8 + 0x120]
	0x03B0415C ADRP X8, 0x654000
	0x03B04160 LDR X8, [X8 + 0x3E8]
	0x03B04164 LDR X8, [X8]
	0x03B04168 LDR X8, [X8 + 0xB8]
	0x03B0416C LDR X9, [X8]
	0x03B04170 CBZ X9, 0x3B05924
	0x03B04174 LDR W10, [X9 + 0x18]
	0x03B04178 CMP W0, W10
	0x03B0417C B.CS 0x3B058BC
	0x03B04180 MOVZ W10, 0x38
	0x03B04184 SMADDL X9, X0, X10, X9
	0x03B04188 ADRP X10, 0x655000
	0x03B0418C LDR X10, [X10 + 0x270]
	0x03B04190 LDP V2, V0, [X9 + 0x30]
	0x03B04194 LDR X11, [X9 + 0x50]
	0x03B04198 LDR V1, [X9 + 0x2]
	0x03B0419C LDR X2, [X10]
	0x03B041A0 ADD X8, X8, 0x10
	0x03B041A4 STR X11, [X31 + 0x120]
	0x03B041A8 STP V2, V0, [X31 + 0x100]
	0x03B041AC STR V1, [X31 + 0xF]
	0x03B041B0 B 0x3B04820
	0x03B041B4 LDR X0, [X19]
	0x03B041B8 LDR X9, [X31 + 0x20]
	0x03B041BC LDR W8, [X0 + 0xE0]
	0x03B041C0 LDR X20, [X9 + 0x690]
	0x03B041C4 CBNZ W8, 0x3B041CC
	0x03B041C8 BL 0x1C16DFC
	0x03B041CC MOV X0, X20
	0x03B041D0 MOV X1, X31
	0x03B041D4 MOV X2, X31
	0x03B041D8 BL 0x3C354F8
	0x03B041DC TBZ X0, 0x0, 0x3B04AB8
	0x03B041E0 LDR X8, [X31 + 0x20]
	0x03B041E4 LDR X20, [X8 + 0x690]
	0x03B041E8 B 0x3B052DC
	0x03B041EC LDR X8, [X31 + 0x20]
	0x03B041F0 LDR X8, [X8 + 0x100]
	0x03B041F4 CBZ X8, 0x3B05924
	0x03B041F8 LDRB W1, [X8 + 0x1B8]
	0x03B041FC LDR X8, [X31 + 0x20]
	0x03B04200 STR W1, [X8 + 0x5F0]
	0x03B04204 ADRP X8, 0x655000
	0x03B04208 LDR X8, [X8 + 0x250]
	0x03B0420C LDR X2, [X8]
	0x03B04210 LDR X8, [X31 + 0x20]
	0x03B04214 ADD X0, X8, 0x5D0
	0x03B04218 BL 0x2671C84
	0x03B0421C B 0x3B00B64
	0x03B04220 ADD X1, X31, 0x2D8
	0x03B04224 MOV W0, W20
	0x03B04228 MOV X2, X31
	0x03B0422C BL 0x3ACB2B4
	0x03B04230 TBNZ X0, 0x0, 0x3B043D4
	0x03B04234 ADRP X19, 0x5EF000
	0x03B04238 LDR X19, [X19 + 0x598]
	0x03B0423C LDR X21, [X31 + 0x2D8]
	0x03B04240 LDR X0, [X19]
	0x03B04244 LDR W8, [X0 + 0xE0]
	0x03B04248 CBNZ W8, 0x3B04250
	0x03B0424C BL 0x1C16DFC
	0x03B04250 MOV X0, X21
	0x03B04254 MOV X1, X31
	0x03B04258 MOV X2, X31
	0x03B0425C BL 0x3C3883C
	0x03B04260 TBZ X0, 0x0, 0x3B0439C
	0x03B04264 ADRP X8, 0x654000
	0x03B04268 LDR X8, [X8 + 0x3E8]
	0x03B0426C LDR X0, [X8]
	0x03B04270 LDR W8, [X0 + 0xE0]
	0x03B04274 CBNZ W8, 0x3B04288
	0x03B04278 BL 0x1C16DFC
	0x03B0427C ADRP X8, 0x654000
	0x03B04280 LDR X8, [X8 + 0x3E8]
	0x03B04284 LDR X0, [X8]
	0x03B04288 LDR X8, [X0 + 0xB8]
	0x03B0428C LDR X21, [X8 + 0x78]
	0x03B04290 CBZ X21, 0x3B042F4
	0x03B04294 LDR W9, [X0 + 0xE0]
	0x03B04298 CBNZ W9, 0x3B042B0
	0x03B0429C BL 0x1C16DFC
	0x03B042A0 ADRP X8, 0x654000
	0x03B042A4 LDR X8, [X8 + 0x3E8]
	0x03B042A8 LDR X8, [X8]
	0x03B042AC LDR X8, [X8 + 0xB8]
	0x03B042B0 LDR X9, [X8 + 0x88]
	0x03B042B4 CBZ X9, 0x3B05924
	0x03B042B8 LDR W10, [X9 + 0x18]
	0x03B042BC CBZ W10, 0x3B058BC
	0x03B042C0 LDR X1, [X8 + 0x80]
	0x03B042C4 LDP W2, W3, [X9 + 0x2C]
	0x03B042C8 MOV X0, X31
	0x03B042CC MOV X4, X31
	0x03B042D0 BL 0x322EAE4
	0x03B042D4 LDR X8, [X21 + 0x40]
	0x03B042D8 LDR X9, [X21 + 0x18]
	0x03B042DC LDR X3, [X21 + 0x28]
	0x03B042E0 MOV X2, X0
	0x03B042E4 MOV X0, X8
	0x03B042E8 MOV W1, W20
	0x03B042EC BLR X9
	0x03B042F0 MOV X21, X0
	0x03B042F4 LDR X0, [X19]
	0x03B042F8 STR X21, [X31 + 0x2D8]
	0x03B042FC LDR W8, [X0 + 0xE0]
	0x03B04300 CBNZ W8, 0x3B04308
	0x03B04304 BL 0x1C16DFC
	0x03B04308 MOV X0, X21
	0x03B0430C MOV X1, X31
	0x03B04310 MOV X2, X31
	0x03B04314 BL 0x3C3883C
	0x03B04318 TBZ X0, 0x0, 0x3B0439C
	0x03B0431C MOV X0, X31
	0x03B04320 BL 0x3B13FC8
	0x03B04324 ADRP X8, 0x654000
	0x03B04328 LDR X8, [X8 + 0x3E8]
	0x03B0432C MOV X21, X0
	0x03B04330 LDR X8, [X8]
	0x03B04334 LDR W9, [X8 + 0xE0]
	0x03B04338 CBNZ W9, 0x3B04350
	0x03B0433C MOV X0, X8
	0x03B04340 BL 0x1C16DFC
	0x03B04344 ADRP X8, 0x654000
	0x03B04348 LDR X8, [X8 + 0x3E8]
	0x03B0434C LDR X8, [X8]
	0x03B04350 LDR X9, [X8 + 0xB8]
	0x03B04354 LDR X8, [X9 + 0x88]
	0x03B04358 CBZ X8, 0x3B05924
	0x03B0435C LDR W10, [X8 + 0x18]
	0x03B04360 CBZ W10, 0x3B058BC
	0x03B04364 LDR X1, [X9 + 0x80]
	0x03B04368 LDP W2, W3, [X8 + 0x2C]
	0x03B0436C MOV X0, X31
	0x03B04370 MOV X4, X31
	0x03B04374 BL 0x322EAE4
	0x03B04378 MOV X1, X0
	0x03B0437C MOV X0, X21
	0x03B04380 MOV X2, X31
	0x03B04384 BL 0x321B938
	0x03B04388 ADRP X8, 0x655000
	0x03B0438C LDR X8, [X8 + 0x238]
	0x03B04390 LDR X1, [X8]
	0x03B04394 BL 0x2241FB8
	0x03B04398 STR X0, [X31 + 0x2D8]
	0x03B0439C LDR X0, [X19]
	0x03B043A0 LDR X21, [X31 + 0x2D8]
	0x03B043A4 LDR W8, [X0 + 0xE0]
	0x03B043A8 CBNZ W8, 0x3B043B0
	0x03B043AC BL 0x1C16DFC
	0x03B043B0 MOV X0, X21
	0x03B043B4 MOV X1, X31
	0x03B043B8 MOV X2, X31
	0x03B043BC BL 0x3C3883C
	0x03B043C0 TBNZ X0, 0x0, 0x3B05A00
	0x03B043C4 LDR X1, [X31 + 0x2D8]
	0x03B043C8 MOV W0, W20
	0x03B043CC MOV X2, X31
	0x03B043D0 BL 0x3ACAEF0
	0x03B043D4 LDR X8, [X31 + 0x2D8]
	0x03B043D8 LDR X9, [X31 + 0x20]
	0x03B043DC STR X8, [X9 + 0x698]
	0x03B043E0 B 0x3B05304
	0x03B043E4 CMP W8, 0xC8
	0x03B043E8 B.LE 0x3B04CB4
	0x03B043EC CMP W8, 0x12C
	0x03B043F0 B.EQ 0x3B04CC4
	0x03B043F4 CMP W8, 0x190
	0x03B043F8 B.EQ 0x3B04CC4
	0x03B043FC B 0x3B04CCC
	0x03B04400 LDR X9, [X31 + 0x20]
	0x03B04404 LDR W8, [X9 + 0x4EC]
	0x03B04408 STR W8, [X9 + 0x15C]
	0x03B0440C ADRP X9, 0x655000
	0x03B04410 LDR X9, [X9 + 0x268]
	0x03B04414 LDR X2, [X9]
	0x03B04418 LDR X9, [X31 + 0x20]
	0x03B0441C ADD X0, X9, 0x530
	0x03B04420 B 0x3B04638
	0x03B04424 LDR X21, [X31 + 0x2E0]
	0x03B04428 LDR X0, [X19]
	0x03B0442C LDR W8, [X0 + 0xE0]
	0x03B04430 CBNZ W8, 0x3B04438
	0x03B04434 BL 0x1C16DFC
	0x03B04438 MOV X0, X21
	0x03B0443C MOV X1, X31
	0x03B04440 MOV X2, X31
	0x03B04444 BL 0x3C3883C
	0x03B04448 TBNZ X0, 0x0, 0x3B05A00
	0x03B0444C LDR X1, [X31 + 0x2E0]
	0x03B04450 MOV W0, W20
	0x03B04454 MOV X2, X31
	0x03B04458 BL 0x3ACB08C
	0x03B0445C LDR X8, [X31 + 0x2E0]
	0x03B04460 LDR X9, [X31 + 0x20]
	0x03B04464 ADRP X24, 0x654000
	0x03B04468 MOVZ W19, 0x1
	0x03B0446C MOVZ W20, 0x18
	0x03B04470 STRB W31, [X9 + 0x5B0]
	0x03B04474 STR X8, [X9 + 0x580]
	0x03B04478 LDR X24, [X24 + 0x3E8]
	0x03B0447C MOVZ W21, 0xB2FB
	0x03B04480 MOVZ W22, 0x80FB
	0x03B04484 LDR X0, [X24]
	0x03B04488 LDR W8, [X0 + 0xE0]
	0x03B0448C CBNZ W8, 0x3B04498
	0x03B04490 BL 0x1C16DFC
	0x03B04494 LDR X0, [X24]
	0x03B04498 LDR X8, [X0 + 0xB8]
	0x03B0449C LDR X9, [X8 + 0x88]
	0x03B044A0 CBZ X9, 0x3B05924
	0x03B044A4 LDR W10, [X9 + 0x18]
	0x03B044A8 CMP W19, W10
	0x03B044AC B.GE 0x3B045A4
	0x03B044B0 LDR W10, [X0 + 0xE0]
	0x03B044B4 CBNZ W10, 0x3B044D4
	0x03B044B8 BL 0x1C16DFC
	0x03B044BC LDR X0, [X24]
	0x03B044C0 LDR X8, [X0 + 0xB8]
	0x03B044C4 LDR X9, [X8 + 0x88]
	0x03B044C8 CBZ X9, 0x3B05924
	0x03B044CC ADRP X24, 0x654000
	0x03B044D0 LDR X24, [X24 + 0x3E8]
	0x03B044D4 LDR W10, [X9 + 0x18]
	0x03B044D8 CMP W19, W10
	0x03B044DC B.CS 0x3B058BC
	0x03B044E0 SXTW X23, W19
	0x03B044E4 MADD X10, X23, X20, X9
	0x03B044E8 LDR W10, [X10 + 0x20]
	0x03B044EC CBZ W10, 0x3B045A4
	0x03B044F0 LDR W10, [X0 + 0xE0]
	0x03B044F4 CBNZ W10, 0x3B04514
	0x03B044F8 BL 0x1C16DFC
	0x03B044FC LDR X0, [X24]
	0x03B04500 LDR X8, [X0 + 0xB8]
	0x03B04504 LDR X9, [X8 + 0x88]
	0x03B04508 CBZ X9, 0x3B05924
	0x03B0450C ADRP X24, 0x654000
	0x03B04510 LDR X24, [X24 + 0x3E8]
	0x03B04514 LDR W10, [X9 + 0x18]
	0x03B04518 CMP W19, W10
	0x03B0451C B.CS 0x3B058BC
	0x03B04520 MADD X10, X23, X20, X9
	0x03B04524 LDR W10, [X10 + 0x20]
	0x03B04528 CMP W10, W21
	0x03B0452C B.EQ 0x3B04538
	0x03B04530 CMP W10, W22
	0x03B04534 B.NE 0x3B0459C
	0x03B04538 LDR W10, [X0 + 0xE0]
	0x03B0453C CBNZ W10, 0x3B0455C
	0x03B04540 BL 0x1C16DFC
	0x03B04544 ADRP X8, 0x654000
	0x03B04548 LDR X8, [X8 + 0x3E8]
	0x03B0454C LDR X8, [X8]
	0x03B04550 LDR X8, [X8 + 0xB8]
	0x03B04554 LDR X9, [X8 + 0x88]
	0x03B04558 CBZ X9, 0x3B05924
	0x03B0455C LDR W10, [X9 + 0x18]
	0x03B04560 CMP W19, W10
	0x03B04564 B.CS 0x3B058BC
	0x03B04568 LDR X1, [X8 + 0x80]
	0x03B0456C NOP
	0x03B04570 MADD X8, X23, X20, X9
	0x03B04574 LDP W2, W3, [X8 + 0x2C]
	0x03B04578 ADD X4, X31, 0x70
	0x03B0457C STR W31, [X31 + 0x70]
	0x03B04580 BL 0x3B0C268
	0x03B04584 LDR X9, [X31 + 0x20]
	0x03B04588 FCMP S0, 0x0
	0x03B0458C CSET W8, NE
	0x03B04590 ADRP X24, 0x654000
	0x03B04594 STRB W8, [X9 + 0x5B0]
	0x03B04598 LDR X24, [X24 + 0x3E8]
	0x03B0459C ADD W19, W19, 0x1
	0x03B045A0 B 0x3B04484
	0x03B045A4 LDR X9, [X31 + 0x20]
	0x03B045A8 ADRP X8, 0x655000
	0x03B045AC LDR X1, [X9 + 0x580]
	0x03B045B0 LDR X8, [X8 + 0x258]
	0x03B045B4 ADD X0, X9, 0x588
	0x03B045B8 LDR X2, [X8]
	0x03B045BC BL 0x2672F14
	0x03B045C0 B 0x3B00B64
	0x03B045C4 CBZ X1, 0x3B05924
	0x03B045C8 LDR W9, [X1 + 0x18]
	0x03B045CC CMP W9, 0x6
	0x03B045D0 B.LS 0x3B058BC
	0x03B045D4 LDRH W9, [X1 + 0x2C]
	0x03B045D8 LDR W10, [X0 + 0xE0]
	0x03B045DC CMP W9, 0x23
	0x03B045E0 CSET W9, EQ
	0x03B045E4 CMP W25, 0xD
	0x03B045E8 CSET W11, EQ
	0x03B045EC AND W19, W11, W9, 0x0
	0x03B045F0 CBNZ W10, 0x3B0460C
	0x03B045F4 BL 0x1C16DFC
	0x03B045F8 ADRP X8, 0x654000
	0x03B045FC LDR X8, [X8 + 0x3E8]
	0x03B04600 LDR X0, [X8]
	0x03B04604 LDR X8, [X0 + 0xB8]
	0x03B04608 LDR X1, [X8 + 0x80]
	0x03B0460C CBZ W19, 0x3B04D1C
	0x03B04610 MOVZ W2, 0xD
	0x03B04614 B 0x3B04D6C
	0x03B04618 LDR X9, [X31 + 0x20]
	0x03B0461C LDR W8, [X9 + 0x4EC]
	0x03B04620 STR W8, [X9 + 0x158]
	0x03B04624 ADRP X9, 0x655000
	0x03B04628 LDR X9, [X9 + 0x268]
	0x03B0462C LDR X2, [X9]
	0x03B04630 LDR X9, [X31 + 0x20]
	0x03B04634 ADD X0, X9, 0x510
	0x03B04638 MOV W1, W8
	0x03B0463C B 0x3B00B60
	0x03B04640 LDR X10, [X31 + 0x20]
	0x03B04644 ADRP X9, 0xFFFFFFFFFCFE6000
	0x03B04648 LDR V2, [X9 + 0xBC]
	0x03B0464C FMOV S3, 1
	0x03B04650 LDRB W8, [X10 + 0x305]
	0x03B04654 LDR V1, [X10 + 0x1E8]
	0x03B04658 LDR V4, [X10 + 0x640]
	0x03B0465C CMP W8, 0x0
	0x03B04660 FCSEL S2, S2, S3, EQ
	0x03B04664 FMUL S0, S0, S2
	0x03B04668 FMUL S0, S1, S0
	0x03B0466C FADD S0, S4, S0
	0x03B04670 B 0x3B04BA8
	0x03B04674 LDR X10, [X31 + 0x20]
	0x03B04678 ADRP X9, 0xFFFFFFFFFCFE6000
	0x03B0467C LDR V1, [X9 + 0xBC]
	0x03B04680 FMOV S3, 1
	0x03B04684 LDRB W8, [X10 + 0x305]
	0x03B04688 LDR V2, [X10 + 0x1E8]
	0x03B0468C CMP W8, 0x0
	0x03B04690 FCSEL S1, S1, S3, EQ
	0x03B04694 FMUL S0, S0, S1
	0x03B04698 FMUL S0, S2, S0
	0x03B0469C STR S0, [X10 + 0x61C]
	0x03B046A0 B 0x3B00B64
	0x03B046A4 LDR X9, [X31 + 0x20]
	0x03B046A8 MOVZ W8, 0x8
	0x03B046AC MOVZ W1, 0x8
	0x03B046B0 B 0x3B04D00
	0x03B046B4 MOV X0, X31
	0x03B046B8 BL 0x3B13E70
	0x03B046BC ADRP X8, 0x654000
	0x03B046C0 LDR X8, [X8 + 0x3E8]
	0x03B046C4 MOV X21, X0
	0x03B046C8 LDR X8, [X8]
	0x03B046CC LDR W9, [X8 + 0xE0]
	0x03B046D0 CBNZ W9, 0x3B046E8
	0x03B046D4 MOV X0, X8
	0x03B046D8 BL 0x1C16DFC
	0x03B046DC ADRP X8, 0x654000
	0x03B046E0 LDR X8, [X8 + 0x3E8]
	0x03B046E4 LDR X8, [X8]
	0x03B046E8 LDR X9, [X8 + 0xB8]
	0x03B046EC LDR X8, [X9 + 0x88]
	0x03B046F0 CBZ X8, 0x3B05924
	0x03B046F4 LDR W10, [X8 + 0x18]
	0x03B046F8 CBZ W10, 0x3B058BC
	0x03B046FC LDR X1, [X9 + 0x80]
	0x03B04700 LDP W2, W3, [X8 + 0x2C]
	0x03B04704 MOV X0, X31
	0x03B04708 MOV X4, X31
	0x03B0470C BL 0x322EAE4
	0x03B04710 MOV X1, X0
	0x03B04714 MOV X0, X21
	0x03B04718 MOV X2, X31
	0x03B0471C BL 0x321B938
	0x03B04720 ADRP X8, 0x649000
	0x03B04724 LDR X8, [X8 + 0xAD8]
	0x03B04728 LDR X1, [X8]
	0x03B0472C BL 0x2241FB8
	0x03B04730 ADRP X8, 0x5EF000
	0x03B04734 LDR X8, [X8 + 0x598]
	0x03B04738 STR X0, [X31 + 0x2E8]
	0x03B0473C MOV X21, X0
	0x03B04740 LDR X8, [X8]
	0x03B04744 LDR W9, [X8 + 0xE0]
	0x03B04748 CBNZ W9, 0x3B04754
	0x03B0474C MOV X0, X8
	0x03B04750 BL 0x1C16DFC
	0x03B04754 MOV X0, X21
	0x03B04758 MOV X1, X31
	0x03B0475C MOV X2, X31
	0x03B04760 BL 0x3C3883C
	0x03B04764 TBNZ X0, 0x0, 0x3B05A00
	0x03B04768 LDR X1, [X31 + 0x2E8]
	0x03B0476C MOV W0, W20
	0x03B04770 MOV X2, X31
	0x03B04774 BL 0x3ACAFF4
	0x03B04778 LDR X20, [X31 + 0x2E8]
	0x03B0477C LDR X9, [X31 + 0x20]
	0x03B04780 ADRP X8, 0x654000
	0x03B04784 STR X20, [X9 + 0x118]
	0x03B04788 LDR X8, [X8 + 0x3E8]
	0x03B0478C LDR X21, [X9 + 0x100]
	0x03B04790 LDR X0, [X8]
	0x03B04794 LDR W8, [X0 + 0xE0]
	0x03B04798 CBNZ W8, 0x3B047AC
	0x03B0479C BL 0x1C16DFC
	0x03B047A0 ADRP X8, 0x654000
	0x03B047A4 LDR X8, [X8 + 0x3E8]
	0x03B047A8 LDR X0, [X8]
	0x03B047AC LDR X2, [X0 + 0xB8]
	0x03B047B0 MOV X0, X20
	0x03B047B4 MOV X1, X21
	0x03B047B8 MOV X4, X31
	0x03B047BC LDR X3, [X2 + 0x8]
	0x03B047C0 BL 0x3ACB600
	0x03B047C4 LDR X8, [X31 + 0x20]
	0x03B047C8 STR W0, [X8 + 0x120]
	0x03B047CC ADRP X8, 0x654000
	0x03B047D0 LDR X8, [X8 + 0x3E8]
	0x03B047D4 LDR X8, [X8]
	0x03B047D8 LDR X8, [X8 + 0xB8]
	0x03B047DC LDR X9, [X8]
	0x03B047E0 CBZ X9, 0x3B05924
	0x03B047E4 LDR W10, [X9 + 0x18]
	0x03B047E8 CMP W0, W10
	0x03B047EC B.CS 0x3B058BC
	0x03B047F0 MOVZ W10, 0x38
	0x03B047F4 SMADDL X9, X0, X10, X9
	0x03B047F8 ADRP X10, 0x655000
	0x03B047FC LDR X10, [X10 + 0x270]
	0x03B04800 LDP V2, V0, [X9 + 0x30]
	0x03B04804 LDR X11, [X9 + 0x50]
	0x03B04808 LDR V1, [X9 + 0x2]
	0x03B0480C LDR X2, [X10]
	0x03B04810 ADD X8, X8, 0x10
	0x03B04814 STR X11, [X31 + 0xE0]
	0x03B04818 STP V2, V0, [X31 + 0xC0]
	0x03B0481C STR V1, [X31 + 0xB]
	0x03B04820 STP V1, V2, [X31 + 0x70]
	0x03B04824 STR V0, [X31 + 0x9]
	0x03B04828 STR X11, [X31 + 0xA0]
	0x03B0482C ADD X1, X31, 0x70
	0x03B04830 MOV X0, X8
	0x03B04834 B 0x3B02984
	0x03B04838 LDR X10, [X31 + 0x20]
	0x03B0483C ADRP X9, 0xFFFFFFFFFCFE6000
	0x03B04840 LDR V1, [X9 + 0xBC]
	0x03B04844 FMOV S2, 1
	0x03B04848 LDRB W8, [X10 + 0x305]
	0x03B0484C CMP W8, 0x0
	0x03B04850 FCSEL S1, S1, S2, EQ
	0x03B04854 FMUL S0, S0, S1
	0x03B04858 B 0x3B04884
	0x03B0485C LDR X10, [X31 + 0x20]
	0x03B04860 ADRP X9, 0xFFFFFFFFFCFE6000
	0x03B04864 LDR V1, [X9 + 0xBC]
	0x03B04868 FMOV S3, 1
	0x03B0486C LDRB W8, [X10 + 0x305]
	0x03B04870 LDR V2, [X10 + 0x1E8]
	0x03B04874 CMP W8, 0x0
	0x03B04878 FCSEL S1, S1, S3, EQ
	0x03B0487C FMUL S0, S0, S1
	0x03B04880 FMUL S0, S2, S0
	0x03B04884 STR S0, [X10 + 0x408]
	0x03B04888 B 0x3B04894
	0x03B0488C LDR X8, [X31 + 0x20]
	0x03B04890 LDR V0, [X8 + 0x408]
	0x03B04894 LDR X8, [X31 + 0x20]
	0x03B04898 LDR V1, [X8 + 0x640]
	0x03B0489C FADD S0, S1, S0
	0x03B048A0 STR S0, [X8 + 0x640]
	0x03B048A4 B 0x3B00B64
	0x03B048A8 LDR X9, [X31 + 0x20]
	0x03B048AC MOVZ W8, 0x42C80000
	0x03B048B0 FMOV S1, W8
	0x03B048B4 LDR V0, [X9 + 0x1E4]
	0x03B048B8 FMUL S0, S8, S0
	0x03B048BC FDIV S0, S0, S1
	0x03B048C0 B 0x3B048D0
	0x03B048C4 LDR X9, [X31 + 0x20]
	0x03B048C8 LDR V0, [X9 + 0x1E4]
	0x03B048CC FMUL S0, S8, S0
	0x03B048D0 STR S0, [X9 + 0x1E8]
	0x03B048D4 ADRP X8, 0x655000
	0x03B048D8 LDR X8, [X8 + 0x260]
	0x03B048DC ADD X0, X9, 0x1F0
	0x03B048E0 LDR X1, [X8]
	0x03B048E4 BL 0x2673460
	0x03B048E8 B 0x3B00B64
	0x03B048EC LDR X10, [X31 + 0x20]
	0x03B048F0 ADRP X9, 0xFFFFFFFFFCFE6000
	0x03B048F4 LDR V1, [X9 + 0xBC]
	0x03B048F8 FMOV S2, 1
	0x03B048FC LDRB W8, [X10 + 0x305]
	0x03B04900 CMP W8, 0x0
	0x03B04904 FCSEL S1, S1, S2, EQ
	0x03B04908 FMUL S0, S0, S1
	0x03B0490C B 0x3B04938
	0x03B04910 LDR X10, [X31 + 0x20]
	0x03B04914 ADRP X9, 0xFFFFFFFFFCFE6000
	0x03B04918 LDR V1, [X9 + 0xBC]
	0x03B0491C FMOV S3, 1
	0x03B04920 LDRB W8, [X10 + 0x305]
	0x03B04924 LDR V2, [X10 + 0x1E8]
	0x03B04928 CMP W8, 0x0
	0x03B0492C FCSEL S1, S1, S3, EQ
	0x03B04930 FMUL S0, S0, S1
	0x03B04934 FMUL S0, S2, S0
	0x03B04938 STR S0, [X10 + 0x2B0]
	0x03B0493C B 0x3B00B64
	0x03B04940 LDR X10, [X31 + 0x20]
	0x03B04944 ADRP X9, 0xFFFFFFFFFCFE6000
	0x03B04948 LDR V1, [X9 + 0xBC]
	0x03B0494C FMOV S2, 1
	0x03B04950 LDRB W8, [X10 + 0x305]
	0x03B04954 CMP W8, 0x0
	0x03B04958 FCSEL S1, S1, S2, EQ
	0x03B0495C FMUL S0, S0, S1
	0x03B04960 B 0x3B0498C
	0x03B04964 LDR X10, [X31 + 0x20]
	0x03B04968 ADRP X9, 0xFFFFFFFFFCFE6000
	0x03B0496C LDR V1, [X9 + 0xBC]
	0x03B04970 FMOV S3, 1
	0x03B04974 LDRB W8, [X10 + 0x305]
	0x03B04978 LDR V2, [X10 + 0x1E8]
	0x03B0497C CMP W8, 0x0
	0x03B04980 FCSEL S1, S1, S3, EQ
	0x03B04984 FMUL S0, S0, S1
	0x03B04988 FMUL S0, S2, S0
	0x03B0498C STR S0, [X10 + 0x40C]
	0x03B04990 B 0x3B0499C
	0x03B04994 LDR X8, [X31 + 0x20]
	0x03B04998 LDR V0, [X8 + 0x40C]
	0x03B0499C ADRP X8, 0x655000
	0x03B049A0 LDR X8, [X8 + 0x260]
	0x03B049A4 LDR X19, [X31 + 0x20]
	0x03B049A8 LDR X1, [X8]
	0x03B049AC ADD X0, X19, 0x410
	0x03B049B0 BL 0x2673460
	0x03B049B4 LDR V0, [X19 + 0x40C]
	0x03B049B8 STR S0, [X19 + 0x640]
	0x03B049BC B 0x3B00B64
	0x03B049C0 LDR X8, [X31 + 0x20]
	0x03B049C4 LDR X8, [X8 + 0x100]
	0x03B049C8 CBZ X8, 0x3B05924
	0x03B049CC LDR X19, [X31 + 0x20]
	0x03B049D0 ADD X1, X8, 0x50
	0x03B049D4 ADD X0, X31, 0x270
	0x03B049D8 MOVZ W2, 0x60
	0x03B049DC LDR V9, [X19 + 0x1E8]
	0x03B049E0 BL 0x3EB1B30
	0x03B049E4 ADD X0, X31, 0x270
	0x03B049E8 MOV X1, X31
	0x03B049EC BL 0x3C9BF88
	0x03B049F0 LDR X8, [X19 + 0x100]
	0x03B049F4 CBZ X8, 0x3B05924
	0x03B049F8 MOV W20, W0
	0x03B049FC ADD X1, X8, 0x50
	0x03B04A00 ADD X0, X31, 0x270
	0x03B04A04 MOVZ W2, 0x60
	0x03B04A08 BL 0x3EB1B30
	0x03B04A0C ADD X0, X31, 0x270
	0x03B04A10 MOV X1, X31
	0x03B04A14 BL 0x3C9BF98
	0x03B04A18 LDR X8, [X31 + 0x20]
	0x03B04A1C LDR X8, [X8 + 0xF8]
	0x03B04A20 CBZ X8, 0x3B05924
	0x03B04A24 LDR X19, [X31 + 0x20]
	0x03B04A28 ADRP X10, 0xFFFFFFFFFCFE6000
	0x03B04A2C LDR V3, [X10 + 0xBC]
	0x03B04A30 SCVTF S1, W20
	0x03B04A34 LDRB W9, [X19 + 0x305]
	0x03B04A38 FMOV S2, 1
	0x03B04A3C FDIV S1, S9, S1
	0x03B04A40 FMUL S0, S1, S0
	0x03B04A44 CMP W9, 0x0
	0x03B04A48 FCSEL S1, S3, S2, EQ
	0x03B04A4C ADD X1, X8, 0x50
	0x03B04A50 ADD X0, X31, 0x270
	0x03B04A54 MOVZ W2, 0x60
	0x03B04A58 FMUL S9, S0, S1
	0x03B04A5C BL 0x3EB1B30
	0x03B04A60 ADD X0, X31, 0x270
	0x03B04A64 MOV X1, X31
	0x03B04A68 BL 0x3C9BFA8
	0x03B04A6C MOVZ W8, 0x42C80000
	0x03B04A70 FMUL S0, S8, S0
	0x03B04A74 FMOV S1, W8
	0x03B04A78 FDIV S0, S0, S1
	0x03B04A7C FMUL S0, S9, S0
	0x03B04A80 STR S0, [X19 + 0x2C0]
	0x03B04A84 B 0x3B00B64
	0x03B04A88 LDR X10, [X31 + 0x20]
	0x03B04A8C ADRP X9, 0xFFFFFFFFFCFE6000
	0x03B04A90 LDR V0, [X9 + 0xBC]
	0x03B04A94 FMOV S2, 1
	0x03B04A98 LDRB W8, [X10 + 0x305]
	0x03B04A9C LDR V1, [X10 + 0x1E8]
	0x03B04AA0 CMP W8, 0x0
	0x03B04AA4 FCSEL S0, S0, S2, EQ
	0x03B04AA8 FMUL S0, S8, S0
	0x03B04AAC FMUL S0, S1, S0
	0x03B04AB0 STR S0, [X10 + 0x2C0]
	0x03B04AB4 B 0x3B00B64
	0x03B04AB8 LDR X0, [X19]
	0x03B04ABC LDR X9, [X31 + 0x20]
	0x03B04AC0 LDR W8, [X0 + 0xE0]
	0x03B04AC4 LDR X20, [X9 + 0x690]
	0x03B04AC8 CBNZ W8, 0x3B04AD0
	0x03B04ACC BL 0x1C16DFC
	0x03B04AD0 MOV X0, X20
	0x03B04AD4 MOV X1, X31
	0x03B04AD8 MOV X2, X31
	0x03B04ADC BL 0x3C3883C
	0x03B04AE0 TBZ X0, 0x0, 0x3B04D8C
	0x03B04AE4 MOV X0, X31
	0x03B04AE8 BL 0x3B13FAC
	0x03B04AEC LDR X8, [X19]
	0x03B04AF0 MOV X20, X0
	0x03B04AF4 LDR W9, [X8 + 0xE0]
	0x03B04AF8 CBNZ W9, 0x3B04B04
	0x03B04AFC MOV X0, X8
	0x03B04B00 BL 0x1C16DFC
	0x03B04B04 MOV X0, X20
	0x03B04B08 MOV X1, X31
	0x03B04B0C MOV X2, X31
	0x03B04B10 BL 0x3C354F8
	0x03B04B14 TBZ X0, 0x0, 0x3B052B0
	0x03B04B18 MOV X0, X31
	0x03B04B1C BL 0x3B13FAC
	0x03B04B20 B 0x3B052CC
	0x03B04B24 CMP W8, 0x1F4
	0x03B04B28 B.EQ 0x3B04CC4
	0x03B04B2C CMP W8, 0x258
	0x03B04B30 B.EQ 0x3B04CC4
	0x03B04B34 B 0x3B04CCC
	0x03B04B38 LDR X10, [X31 + 0x20]
	0x03B04B3C ADRP X9, 0xFFFFFFFFFCFE6000
	0x03B04B40 LDR V1, [X9 + 0xBC]
	0x03B04B44 FMOV S2, 1
	0x03B04B48 LDRB W8, [X10 + 0x305]
	0x03B04B4C CMP W8, 0x0
	0x03B04B50 FCSEL S1, S1, S2, EQ
	0x03B04B54 FMUL S0, S0, S1
	0x03B04B58 STR S0, [X10 + 0x2AC]
	0x03B04B5C B 0x3B00B64
	0x03B04B60 LDR X9, [X31 + 0x20]
	0x03B04B64 MOVZ W8, 0x42C80000
	0x03B04B68 FMOV S2, W8
	0x03B04B6C LDR V1, [X9 + 0x358]
	0x03B04B70 FMUL S0, S0, S1
	0x03B04B74 FDIV S0, S0, S2
	0x03B04B78 STR S0, [X9 + 0x640]
	0x03B04B7C B 0x3B00B64
	0x03B04B80 LDR X10, [X31 + 0x20]
	0x03B04B84 ADRP X9, 0xFFFFFFFFFCFE6000
	0x03B04B88 LDR V2, [X9 + 0xBC]
	0x03B04B8C FMOV S3, 1
	0x03B04B90 LDRB W8, [X10 + 0x305]
	0x03B04B94 LDR V1, [X10 + 0x1E8]
	0x03B04B98 CMP W8, 0x0
	0x03B04B9C FMUL S0, S0, S1
	0x03B04BA0 FCSEL S1, S2, S3, EQ
	0x03B04BA4 FMUL S0, S0, S1
	0x03B04BA8 STR S0, [X10 + 0x640]
	0x03B04BAC B 0x3B00B64
	0x03B04BB0 LDR X10, [X31 + 0x20]
	0x03B04BB4 ADRP X9, 0xFFFFFFFFFCFE6000
	0x03B04BB8 LDR V1, [X9 + 0xBC]
	0x03B04BBC FMOV S2, 1
	0x03B04BC0 LDRB W8, [X10 + 0x305]
	0x03B04BC4 CMP W8, 0x0
	0x03B04BC8 FCSEL S1, S1, S2, EQ
	0x03B04BCC FMUL S0, S0, S1
	0x03B04BD0 STR S0, [X10 + 0x360]
	0x03B04BD4 B 0x3B00B64
	0x03B04BD8 LDR X8, [X31 + 0x20]
	0x03B04BDC ADRP X9, 0xFFFFFFFFFCFE6000
	0x03B04BE0 LDR V1, [X9 + 0xBC]
	0x03B04BE4 FMOV S2, 1
	0x03B04BE8 LDRB W8, [X8 + 0x305]
	0x03B04BEC CMP W8, 0x0
	0x03B04BF0 FCSEL S1, S1, S2, EQ
	0x03B04BF4 FMUL S0, S0, S1
	0x03B04BF8 B 0x3B04C30
	0x03B04BFC LDR X10, [X31 + 0x20]
	0x03B04C00 ADRP X9, 0xFFFFFFFFFCFE6000
	0x03B04C04 LDR V1, [X9 + 0xBC]
	0x03B04C08 FMOV S3, 1
	0x03B04C0C LDRB W8, [X10 + 0x305]
	0x03B04C10 LDR V2, [X10 + 0x1E8]
	0x03B04C14 CMP W8, 0x0
	0x03B04C18 FCSEL S1, S1, S3, EQ
	0x03B04C1C FMUL S0, S0, S1
	0x03B04C20 FMUL S0, S2, S0
	0x03B04C24 B 0x3B04C30
	0x03B04C28 LDR X8, [X31 + 0x20]
	0x03B04C2C LDR V0, [X8 + 0x354]
	0x03B04C30 LDR X8, [X31 + 0x20]
	0x03B04C34 FCMP S0, 0x0
	0x03B04C38 FMOV S1, W31
	0x03B04C3C FCSEL S0, S0, S1, GE
	0x03B04C40 B 0x3B05104
	0x03B04C44 LDR X8, [X31 + 0x20]
	0x03B04C48 ADRP X9, 0xFFFFFFFFFCFE6000
	0x03B04C4C LDR V1, [X9 + 0xBC]
	0x03B04C50 FMOV S2, 1
	0x03B04C54 LDRB W8, [X8 + 0x305]
	0x03B04C58 CMP W8, 0x0
	0x03B04C5C FCSEL S1, S1, S2, EQ
	0x03B04C60 FMUL S0, S0, S1
	0x03B04C64 B 0x3B04C9C
	0x03B04C68 LDR X10, [X31 + 0x20]
	0x03B04C6C ADRP X9, 0xFFFFFFFFFCFE6000
	0x03B04C70 LDR V1, [X9 + 0xBC]
	0x03B04C74 FMOV S3, 1
	0x03B04C78 LDRB W8, [X10 + 0x305]
	0x03B04C7C LDR V2, [X10 + 0x1E8]
	0x03B04C80 CMP W8, 0x0
	0x03B04C84 FCSEL S1, S1, S3, EQ
	0x03B04C88 FMUL S0, S0, S1
	0x03B04C8C FMUL S0, S2, S0
	0x03B04C90 B 0x3B04C9C
	0x03B04C94 LDR X8, [X31 + 0x20]
	0x03B04C98 LDR V0, [X8 + 0x350]
	0x03B04C9C LDR X8, [X31 + 0x20]
	0x03B04CA0 FCMP S0, 0x0
	0x03B04CA4 FMOV S1, W31
	0x03B04CA8 FCSEL S0, S0, S1, GE
	0x03B04CAC STR S0, [X8 + 0x350]
	0x03B04CB0 B 0x3B00B64
	0x03B04CB4 CMP W8, 0x64
	0x03B04CB8 B.EQ 0x3B04CC4
	0x03B04CBC CMP W8, 0xC8
	0x03B04CC0 B.NE 0x3B04CCC
	0x03B04CC4 LDR X9, [X31 + 0x20]
	0x03B04CC8 STR W8, [X9 + 0x214]
	0x03B04CCC LDR X9, [X31 + 0x20]
	0x03B04CD0 ADRP X8, 0x655000
	0x03B04CD4 LDR W1, [X9 + 0x214]
	0x03B04CD8 LDR X8, [X8 + 0x278]
	0x03B04CDC ADD X0, X9, 0x218
	0x03B04CE0 B 0x3B04D10
	0x03B04CE4 LDR X9, [X31 + 0x20]
	0x03B04CE8 MOVZ W8, 0x4
	0x03B04CEC MOVZ W1, 0x4
	0x03B04CF0 B 0x3B04D00
	0x03B04CF4 LDR X9, [X31 + 0x20]
	0x03B04CF8 MOVZ W8, 0x10
	0x03B04CFC MOVZ W1, 0x10
	0x03B04D00 STR W8, [X9 + 0x278]
	0x03B04D04 ADRP X8, 0x655000
	0x03B04D08 LDR X8, [X8 + 0x248]
	0x03B04D0C ADD X0, X9, 0x280
	0x03B04D10 LDR X2, [X8]
	0x03B04D14 BL 0x26721D0
	0x03B04D18 B 0x3B00B64
	0x03B04D1C CBZ X1, 0x3B05924
	0x03B04D20 LDR W9, [X1 + 0x18]
	0x03B04D24 CMP W9, 0x6
	0x03B04D28 B.LS 0x3B058BC
	0x03B04D2C LDRH W9, [X1 + 0x2C]
	0x03B04D30 LDR W10, [X0 + 0xE0]
	0x03B04D34 CMP W9, 0x23
	0x03B04D38 CSET W9, EQ
	0x03B04D3C CMP W25, 0xF
	0x03B04D40 CSET W11, EQ
	0x03B04D44 AND W19, W11, W9, 0x0
	0x03B04D48 CBNZ W10, 0x3B04D60
	0x03B04D4C BL 0x1C16DFC
	0x03B04D50 ADRP X8, 0x654000
	0x03B04D54 LDR X8, [X8 + 0x3E8]
	0x03B04D58 LDR X8, [X8]
	0x03B04D5C LDR X8, [X8 + 0xB8]
	0x03B04D60 CBZ W19, 0x3B05018
	0x03B04D64 LDR X1, [X8 + 0x80]
	0x03B04D68 MOVZ W2, 0xF
	0x03B04D6C BL 0x3B0BB5C
	0x03B04D70 LDR X9, [X31 + 0x20]
	0x03B04D74 ADRP X8, 0x655000
	0x03B04D78 STR W0, [X9 + 0x4EC]
	0x03B04D7C LDR X8, [X8 + 0x268]
	0x03B04D80 LDR X2, [X8]
	0x03B04D84 ADD X8, X9, 0x4F0
	0x03B04D88 B 0x3B00B58
	0x03B04D8C LDR X8, [X31 + 0x20]
	0x03B04D90 LDR X20, [X8 + 0x698]
	0x03B04D94 B 0x3B052E0
	0x03B04D98 MOV X21, X31
	0x03B04D9C LDR X0, [X19]
	0x03B04DA0 STR X21, [X31 + 0x2F0]
	0x03B04DA4 LDR W8, [X0 + 0xE0]
	0x03B04DA8 CBNZ W8, 0x3B04DB0
	0x03B04DAC BL 0x1C16DFC
	0x03B04DB0 MOV X0, X21
	0x03B04DB4 MOV X1, X31
	0x03B04DB8 MOV X2, X31
	0x03B04DBC BL 0x3C3883C
	0x03B04DC0 TBZ X0, 0x0, 0x3B04E4C
	0x03B04DC4 MOV X0, X31
	0x03B04DC8 BL 0x3B13E70
	0x03B04DCC ADRP X8, 0x654000
	0x03B04DD0 LDR X8, [X8 + 0x3E8]
	0x03B04DD4 MOV X21, X0
	0x03B04DD8 LDR X8, [X8]
	0x03B04DDC LDR W9, [X8 + 0xE0]
	0x03B04DE0 CBNZ W9, 0x3B04DF8
	0x03B04DE4 MOV X0, X8
	0x03B04DE8 BL 0x1C16DFC
	0x03B04DEC ADRP X8, 0x654000
	0x03B04DF0 LDR X8, [X8 + 0x3E8]
	0x03B04DF4 LDR X8, [X8]
	0x03B04DF8 LDR X9, [X8 + 0xB8]
	0x03B04DFC LDR X8, [X9 + 0x88]
	0x03B04E00 CBZ X8, 0x3B05924
	0x03B04E04 LDR W10, [X8 + 0x18]
	0x03B04E08 CBZ W10, 0x3B058BC
	0x03B04E0C LDR X1, [X9 + 0x80]
	0x03B04E10 LDP W2, W3, [X8 + 0x2C]
	0x03B04E14 MOV X0, X31
	0x03B04E18 MOV X4, X31
	0x03B04E1C BL 0x322EAE4
	0x03B04E20 MOV X1, X0
	0x03B04E24 MOV X0, X21
	0x03B04E28 MOV X2, X31
	0x03B04E2C BL 0x321B938
	0x03B04E30 ADRP X8, 0x654000
	0x03B04E34 LDR X8, [X8 + 0x5C0]
	0x03B04E38 LDR X1, [X8]
	0x03B04E3C BL 0x2241FB8
	0x03B04E40 MOV X21, X0
	0x03B04E44 STR X0, [X31 + 0x2F0]
	0x03B04E48 B 0x3B04E50
	0x03B04E4C LDR X21, [X31 + 0x2F0]
	0x03B04E50 LDR X0, [X19]
	0x03B04E54 LDR W8, [X0 + 0xE0]
	0x03B04E58 CBNZ W8, 0x3B04E60
	0x03B04E5C BL 0x1C16DFC
	0x03B04E60 MOV X0, X21
	0x03B04E64 MOV X1, X31
	0x03B04E68 MOV X2, X31
	0x03B04E6C BL 0x3C3883C
	0x03B04E70 TBNZ X0, 0x0, 0x3B05A00
	0x03B04E74 LDR X0, [X31 + 0x2F0]
	0x03B04E78 MOV X1, X31
	0x03B04E7C BL 0x3ACAD28
	0x03B04E80 ORR W8, W20, W23, 0x0
	0x03B04E84 CBZ W8, 0x3B04F68
	0x03B04E88 MOVZ W8, 0xFDF7
	0x03B04E8C MOVK W8, 0x6290000
	0x03B04E90 CMP W23, W8
	0x03B04E94 B.EQ 0x3B04EA8
	0x03B04E98 MOVZ W8, 0xD9F7
	0x03B04E9C MOVK W8, 0x4540000
	0x03B04EA0 CMP W23, W8
	0x03B04EA4 B.NE 0x3B05A00
	0x03B04EA8 ADD X1, X31, 0x2E8
	0x03B04EAC MOV W0, W20
	0x03B04EB0 MOV X2, X31
	0x03B04EB4 BL 0x3ACB3EC
	0x03B04EB8 TBZ X0, 0x0, 0x3B0510C
	0x03B04EBC LDR X20, [X31 + 0x2E8]
	0x03B04EC0 LDR X8, [X31 + 0x20]
	0x03B04EC4 STR X20, [X8 + 0x118]
	0x03B04EC8 ADRP X8, 0x654000
	0x03B04ECC LDR X8, [X8 + 0x3E8]
	0x03B04ED0 LDR X21, [X31 + 0x2F0]
	0x03B04ED4 LDR X0, [X8]
	0x03B04ED8 LDR W8, [X0 + 0xE0]
	0x03B04EDC CBNZ W8, 0x3B04EF0
	0x03B04EE0 BL 0x1C16DFC
	0x03B04EE4 ADRP X8, 0x654000
	0x03B04EE8 LDR X8, [X8 + 0x3E8]
	0x03B04EEC LDR X0, [X8]
	0x03B04EF0 LDR X2, [X0 + 0xB8]
	0x03B04EF4 MOV X0, X20
	0x03B04EF8 MOV X1, X21
	0x03B04EFC MOV X4, X31
	0x03B04F00 LDR X3, [X2 + 0x8]
	0x03B04F04 BL 0x3ACB600
	0x03B04F08 LDR X8, [X31 + 0x20]
	0x03B04F0C STR W0, [X8 + 0x120]
	0x03B04F10 ADRP X8, 0x654000
	0x03B04F14 LDR X8, [X8 + 0x3E8]
	0x03B04F18 LDR X8, [X8]
	0x03B04F1C LDR X8, [X8 + 0xB8]
	0x03B04F20 LDR X9, [X8]
	0x03B04F24 CBZ X9, 0x3B05924
	0x03B04F28 LDR W10, [X9 + 0x18]
	0x03B04F2C CMP W0, W10
	0x03B04F30 B.CS 0x3B058BC
	0x03B04F34 MOVZ W10, 0x38
	0x03B04F38 SMADDL X9, X0, X10, X9
	0x03B04F3C ADRP X10, 0x655000
	0x03B04F40 LDR X10, [X10 + 0x270]
	0x03B04F44 LDP V2, V0, [X9 + 0x30]
	0x03B04F48 LDR X11, [X9 + 0x50]
	0x03B04F4C LDR V1, [X9 + 0x2]
	0x03B04F50 LDR X2, [X10]
	0x03B04F54 ADD X8, X8, 0x10
	0x03B04F58 STR X11, [X31 + 0x1E0]
	0x03B04F5C STP V2, V0, [X31 + 0x1C0]
	0x03B04F60 STR V1, [X31 + 0x1B]
	0x03B04F64 B 0x3B05274
	0x03B04F68 LDR X20, [X31 + 0x2F0]
	0x03B04F6C CBZ X20, 0x3B05924
	0x03B04F70 LDR X21, [X20 + 0x20]
	0x03B04F74 LDR X8, [X31 + 0x20]
	0x03B04F78 STR X21, [X8 + 0x118]
	0x03B04F7C ADRP X8, 0x654000
	0x03B04F80 LDR X8, [X8 + 0x3E8]
	0x03B04F84 LDR X0, [X8]
	0x03B04F88 LDR W8, [X0 + 0xE0]
	0x03B04F8C CBNZ W8, 0x3B04FA0
	0x03B04F90 BL 0x1C16DFC
	0x03B04F94 ADRP X8, 0x654000
	0x03B04F98 LDR X8, [X8 + 0x3E8]
	0x03B04F9C LDR X0, [X8]
	0x03B04FA0 LDR X2, [X0 + 0xB8]
	0x03B04FA4 MOV X0, X21
	0x03B04FA8 MOV X1, X20
	0x03B04FAC MOV X4, X31
	0x03B04FB0 LDR X3, [X2 + 0x8]
	0x03B04FB4 BL 0x3ACB600
	0x03B04FB8 LDR X8, [X31 + 0x20]
	0x03B04FBC STR W0, [X8 + 0x120]
	0x03B04FC0 ADRP X8, 0x654000
	0x03B04FC4 LDR X8, [X8 + 0x3E8]
	0x03B04FC8 LDR X8, [X8]
	0x03B04FCC LDR X8, [X8 + 0xB8]
	0x03B04FD0 LDR X9, [X8]
	0x03B04FD4 CBZ X9, 0x3B05924
	0x03B04FD8 LDR W10, [X9 + 0x18]
	0x03B04FDC CMP W0, W10
	0x03B04FE0 B.CS 0x3B058BC
	0x03B04FE4 MOVZ W10, 0x38
	0x03B04FE8 SMADDL X9, X0, X10, X9
	0x03B04FEC ADRP X10, 0x655000
	0x03B04FF0 LDR X10, [X10 + 0x270]
	0x03B04FF4 LDP V2, V0, [X9 + 0x30]
	0x03B04FF8 LDR X11, [X9 + 0x50]
	0x03B04FFC LDR V1, [X9 + 0x2]
	0x03B05000 LDR X2, [X10]
	0x03B05004 ADD X8, X8, 0x10
	0x03B05008 STR X11, [X31 + 0x220]
	0x03B0500C STP V2, V0, [X31 + 0x200]
	0x03B05010 STR V1, [X31 + 0x1F]
	0x03B05014 B 0x3B05274
	0x03B05018 LDR X8, [X8 + 0x88]
	0x03B0501C CBZ X8, 0x3B05924
	0x03B05020 LDR W9, [X8 + 0x18]
	0x03B05024 CBZ W9, 0x3B058BC
	0x03B05028 LDR W8, [X8 + 0x24]
	0x03B0502C MOVZ W9, 0x29C9
	0x03B05030 MOVK W9, 0x380000
	0x03B05034 CMP W8, W9
	0x03B05038 STR W8, [X31 + 0x26C]
	0x03B0503C B.LE 0x3B05928
	0x03B05040 MOVZ W9, 0x1A47
	0x03B05044 MOVK W9, 0x7070000
	0x03B05048 CMP W8, W9
	0x03B0504C B.LE 0x3B05990
	0x03B05050 MOVZ W9, 0x641B
	0x03B05054 MOVK W9, 0x73D0000
	0x03B05058 CMP W8, W9
	0x03B0505C B.EQ 0x3B05A8C
	0x03B05060 MOVZ W9, 0xAEE7
	0x03B05064 MOVK W9, 0x85D0000
	0x03B05068 CMP W8, W9
	0x03B0506C B.EQ 0x3B05A98
	0x03B05070 MOVZ W9, 0x3284
	0x03B05074 MOVK W9, 0x21060000
	0x03B05078 CMP W8, W9
	0x03B0507C B.NE 0x3B05A00
	0x03B05080 ADRP X8, 0xFFFFFFFFFCFE4000
	0x03B05084 ADRP X9, 0xFFFFFFFFFCFE5000
	0x03B05088 LDR V1, [X8 + 0xF90]
	0x03B0508C LDR V2, [X9 + 0x30]
	0x03B05090 FMOV S0, 1
	0x03B05094 B 0x3B05AC0
	0x03B05098 LDR X8, [X31 + 0x20]
	0x03B0509C ADRP X9, 0xFFFFFFFFFCFE5000
	0x03B050A0 LDR V1, [X9 + 0xBC]
	0x03B050A4 FMOV S2, 1
	0x03B050A8 LDRB W8, [X8 + 0x305]
	0x03B050AC CMP W8, 0x0
	0x03B050B0 FCSEL S1, S1, S2, EQ
	0x03B050B4 FMUL S0, S0, S1
	0x03B050B8 B 0x3B050F0
	0x03B050BC LDR X10, [X31 + 0x20]
	0x03B050C0 ADRP X9, 0xFFFFFFFFFCFE5000
	0x03B050C4 LDR V1, [X9 + 0xBC]
	0x03B050C8 FMOV S3, 1
	0x03B050CC LDRB W8, [X10 + 0x305]
	0x03B050D0 LDR V2, [X10 + 0x1E8]
	0x03B050D4 CMP W8, 0x0
	0x03B050D8 FCSEL S1, S1, S3, EQ
	0x03B050DC FMUL S0, S0, S1
	0x03B050E0 FMUL S0, S2, S0
	0x03B050E4 B 0x3B050F0
	0x03B050E8 LDR X8, [X31 + 0x20]
	0x03B050EC LDR V0, [X8 + 0x350]
	0x03B050F0 LDR X8, [X31 + 0x20]
	0x03B050F4 FCMP S0, 0x0
	0x03B050F8 FMOV S1, W31
	0x03B050FC FCSEL S0, S0, S1, GE
	0x03B05100 STR S0, [X8 + 0x350]
	0x03B05104 STR S0, [X8 + 0x354]
	0x03B05108 B 0x3B00B64
	0x03B0510C MOV X0, X31
	0x03B05110 BL 0x3B13E70
	0x03B05114 ADRP X8, 0x653000
	0x03B05118 LDR X8, [X8 + 0x3E8]
	0x03B0511C MOV X21, X0
	0x03B05120 LDR X8, [X8]
	0x03B05124 LDR W9, [X8 + 0xE0]
	0x03B05128 CBNZ W9, 0x3B05140
	0x03B0512C MOV X0, X8
	0x03B05130 BL 0x1C16DFC
	0x03B05134 ADRP X8, 0x653000
	0x03B05138 LDR X8, [X8 + 0x3E8]
	0x03B0513C LDR X8, [X8]
	0x03B05140 LDR X9, [X8 + 0xB8]
	0x03B05144 LDR X8, [X9 + 0x88]
	0x03B05148 CBZ X8, 0x3B05924
	0x03B0514C LDR W10, [X8 + 0x18]
	0x03B05150 CMP W10, 0x1
	0x03B05154 B.LS 0x3B058BC
	0x03B05158 LDR X1, [X9 + 0x80]
	0x03B0515C LDP W2, W3, [X8 + 0x44]
	0x03B05160 MOV X0, X31
	0x03B05164 MOV X4, X31
	0x03B05168 BL 0x322EAE4
	0x03B0516C MOV X1, X0
	0x03B05170 MOV X0, X21
	0x03B05174 MOV X2, X31
	0x03B05178 BL 0x321B938
	0x03B0517C ADRP X8, 0x648000
	0x03B05180 LDR X8, [X8 + 0xAD8]
	0x03B05184 LDR X1, [X8]
	0x03B05188 BL 0x2241FB8
	0x03B0518C LDR X8, [X19]
	0x03B05190 STR X0, [X31 + 0x2E8]
	0x03B05194 MOV X21, X0
	0x03B05198 LDR W9, [X8 + 0xE0]
	0x03B0519C CBNZ W9, 0x3B051A8
	0x03B051A0 MOV X0, X8
	0x03B051A4 BL 0x1C16DFC
	0x03B051A8 MOV X0, X21
	0x03B051AC MOV X1, X31
	0x03B051B0 MOV X2, X31
	0x03B051B4 BL 0x3C3883C
	0x03B051B8 TBNZ X0, 0x0, 0x3B05A00
	0x03B051BC LDR X1, [X31 + 0x2E8]
	0x03B051C0 MOV W0, W20
	0x03B051C4 MOV X2, X31
	0x03B051C8 BL 0x3ACAFF4
	0x03B051CC LDR X20, [X31 + 0x2E8]
	0x03B051D0 LDR X8, [X31 + 0x20]
	0x03B051D4 STR X20, [X8 + 0x118]
	0x03B051D8 ADRP X8, 0x653000
	0x03B051DC LDR X8, [X8 + 0x3E8]
	0x03B051E0 LDR X21, [X31 + 0x2F0]
	0x03B051E4 LDR X0, [X8]
	0x03B051E8 LDR W8, [X0 + 0xE0]
	0x03B051EC CBNZ W8, 0x3B05200
	0x03B051F0 BL 0x1C16DFC
	0x03B051F4 ADRP X8, 0x653000
	0x03B051F8 LDR X8, [X8 + 0x3E8]
	0x03B051FC LDR X0, [X8]
	0x03B05200 LDR X2, [X0 + 0xB8]
	0x03B05204 MOV X0, X20
	0x03B05208 MOV X1, X21
	0x03B0520C MOV X4, X31
	0x03B05210 LDR X3, [X2 + 0x8]
	0x03B05214 BL 0x3ACB600
	0x03B05218 LDR X8, [X31 + 0x20]
	0x03B0521C STR W0, [X8 + 0x120]
	0x03B05220 ADRP X8, 0x653000
	0x03B05224 LDR X8, [X8 + 0x3E8]
	0x03B05228 LDR X8, [X8]
	0x03B0522C LDR X8, [X8 + 0xB8]
	0x03B05230 LDR X9, [X8]
	0x03B05234 CBZ X9, 0x3B05924
	0x03B05238 LDR W10, [X9 + 0x18]
	0x03B0523C CMP W0, W10
	0x03B05240 B.CS 0x3B058BC
	0x03B05244 MOVZ W10, 0x38
	0x03B05248 SMADDL X9, X0, X10, X9
	0x03B0524C ADRP X10, 0x654000
	0x03B05250 LDR X10, [X10 + 0x270]
	0x03B05254 LDP V2, V0, [X9 + 0x30]
	0x03B05258 LDR X11, [X9 + 0x50]
	0x03B0525C LDR V1, [X9 + 0x2]
	0x03B05260 LDR X2, [X10]
	0x03B05264 ADD X8, X8, 0x10
	0x03B05268 STR X11, [X31 + 0x1A0]
	0x03B0526C STP V2, V0, [X31 + 0x180]
	0x03B05270 STR V1, [X31 + 0x17]
	0x03B05274 ADD X1, X31, 0x70
	0x03B05278 MOV X0, X8
	0x03B0527C STP V1, V2, [X31 + 0x70]
	0x03B05280 STR V0, [X31 + 0x9]
	0x03B05284 STR X11, [X31 + 0xA0]
	0x03B05288 BL 0x2672830
	0x03B0528C LDR X8, [X31 + 0x2F0]
	0x03B05290 LDR X9, [X31 + 0x20]
	0x03B05294 STR X8, [X9 + 0x100]
	0x03B05298 B 0x3B00B64
	0x03B0529C LDR X9, [X31 + 0x20]
	0x03B052A0 ADRP X8, 0x654000
	0x03B052A4 MOV V0.16B, V8.16B
	0x03B052A8 STR S8, [X9 + 0x1E8]
	0x03B052AC B 0x3B048D8
	0x03B052B0 ADRP X8, 0x654000
	0x03B052B4 ADRP X9, 0x654000
	0x03B052B8 LDR X8, [X8 + 0x2F8]
	0x03B052BC LDR X9, [X9 + 0x238]
	0x03B052C0 LDR X0, [X8]
	0x03B052C4 LDR X1, [X9]
	0x03B052C8 BL 0x2241FB8
	0x03B052CC LDR X8, [X31 + 0x20]
	0x03B052D0 MOV X20, X0
	0x03B052D4 STR X0, [X8 + 0x690]
	0x03B052D8 LDR X8, [X31 + 0x20]
	0x03B052DC STR X20, [X8 + 0x698]
	0x03B052E0 LDR X0, [X19]
	0x03B052E4 LDR W8, [X0 + 0xE0]
	0x03B052E8 CBNZ W8, 0x3B052F0
	0x03B052EC BL 0x1C16DFC
	0x03B052F0 MOV X0, X20
	0x03B052F4 MOV X1, X31
	0x03B052F8 MOV X2, X31
	0x03B052FC BL 0x3C3883C
	0x03B05300 TBNZ X0, 0x0, 0x3B05A00
	0x03B05304 ADRP X8, 0x653000
	0x03B05308 LDR X8, [X8 + 0x3E8]
	0x03B0530C LDR X0, [X8]
	0x03B05310 LDR W8, [X0 + 0xE0]
	0x03B05314 CBNZ W8, 0x3B05328
	0x03B05318 BL 0x1C16DFC
	0x03B0531C ADRP X8, 0x653000
	0x03B05320 LDR X8, [X8 + 0x3E8]
	0x03B05324 LDR X0, [X8]
	0x03B05328 LDR X8, [X0 + 0xB8]
	0x03B0532C LDR X9, [X8 + 0x88]
	0x03B05330 CBZ X9, 0x3B05924
	0x03B05334 LDR W10, [X9 + 0x18]
	0x03B05338 CBZ W10, 0x3B058BC
	0x03B0533C LDR W10, [X9 + 0x28]
	0x03B05340 CMP W10, 0x1
	0x03B05344 B.NE 0x3B053E8
	0x03B05348 LDR W10, [X0 + 0xE0]
	0x03B0534C CBNZ W10, 0x3B0536C
	0x03B05350 BL 0x1C16DFC
	0x03B05354 ADRP X8, 0x653000
	0x03B05358 LDR X8, [X8 + 0x3E8]
	0x03B0535C LDR X8, [X8]
	0x03B05360 LDR X8, [X8 + 0xB8]
	0x03B05364 LDR X9, [X8 + 0x88]
	0x03B05368 CBZ X9, 0x3B05924
	0x03B0536C LDR W10, [X9 + 0x18]
	0x03B05370 CBZ W10, 0x3B058BC
	0x03B05374 LDR X1, [X8 + 0x80]
	0x03B05378 LDP W2, W3, [X9 + 0x2C]
	0x03B0537C ADD X4, X31, 0x70
	0x03B05380 STR W31, [X31 + 0x70]
	0x03B05384 BL 0x3B0C268
	0x03B05388 MOVZ W8, 0x7F800000
	0x03B0538C FMOV S1, W8
	0x03B05390 FCVTZS W9, S0
	0x03B05394 FCMP S0, S1
	0x03B05398 MOVZ W8, 0x80000000
	0x03B0539C CSEL W19, W8, W9, EQ
	0x03B053A0 ADDS W31, W19, 0x8000
	0x03B053A4 MOV W20, W31
	0x03B053A8 B.EQ 0x3B05A04
	0x03B053AC LDR X8, [X31 + 0x20]
	0x03B053B0 LDR X0, [X8 + 0x698]
	0x03B053B4 CBZ X0, 0x3B05924
	0x03B053B8 MOV X1, X31
	0x03B053BC BL 0x3B16BEC
	0x03B053C0 CBZ X0, 0x3B05924
	0x03B053C4 LDR W8, [X0 + 0x18]
	0x03B053C8 SUB W8, W8, 0x1
	0x03B053CC CMP W19, W8
	0x03B053D0 B.GT 0x3B05A00
	0x03B053D4 LDR X8, [X31 + 0x20]
	0x03B053D8 STR W19, [X8 + 0x6A4]
	0x03B053DC ADRP X8, 0x653000
	0x03B053E0 LDR X8, [X8 + 0x3E8]
	0x03B053E4 LDR X0, [X8]
	0x03B053E8 LDR W8, [X0 + 0xE0]
	0x03B053EC CBNZ W8, 0x3B05400
	0x03B053F0 BL 0x1C16DFC
	0x03B053F4 ADRP X8, 0x653000
	0x03B053F8 LDR X8, [X8 + 0x3E8]
	0x03B053FC LDR X0, [X8]
	0x03B05400 LDR X8, [X0 + 0xB8]
	0x03B05404 LDR X9, [X31 + 0x20]
	0x03B05408 MOVZ W24, 0xEF43
	0x03B0540C MOV W19, W31
	0x03B05410 LDR W8, [X8 + 0x68]
	0x03B05414 MOVK W24, 0x20000
	0x03B05418 MOVZ W25, 0x18
	0x03B0541C MOVZ W26, 0xA953
	0x03B05420 MOVZ W29, 0x7F800000
	0x03B05424 MOVZ W28, 0x80000000
	0x03B05428 MOVZ W27, 0x7753
	0x03B0542C STRB W31, [X9 + 0x1B9]
	0x03B05430 STR W8, [X9 + 0x1BC]
	0x03B05434 LDR W8, [X0 + 0xE0]
	0x03B05438 CBNZ W8, 0x3B0544C
	0x03B0543C BL 0x1C16DFC
	0x03B05440 ADRP X8, 0x653000
	0x03B05444 LDR X8, [X8 + 0x3E8]
	0x03B05448 LDR X0, [X8]
	0x03B0544C LDR X9, [X0 + 0xB8]
	0x03B05450 LDR X8, [X9 + 0x88]
	0x03B05454 CBZ X8, 0x3B05924
	0x03B05458 LDR W10, [X8 + 0x18]
	0x03B0545C CMP W19, W10
	0x03B05460 B.GE 0x3B058C0
	0x03B05464 LDR W10, [X0 + 0xE0]
	0x03B05468 CBNZ W10, 0x3B05488
	0x03B0546C BL 0x1C16DFC
	0x03B05470 ADRP X8, 0x653000
	0x03B05474 LDR X8, [X8 + 0x3E8]
	0x03B05478 LDR X0, [X8]
	0x03B0547C LDR X9, [X0 + 0xB8]
	0x03B05480 LDR X8, [X9 + 0x88]
	0x03B05484 CBZ X8, 0x3B05924
	0x03B05488 LDR W10, [X8 + 0x18]
	0x03B0548C CMP W19, W10
	0x03B05490 B.CS 0x3B058BC
	0x03B05494 SXTW X21, W19
	0x03B05498 MADD X10, X21, X25, X8
	0x03B0549C LDR W10, [X10 + 0x20]
	0x03B054A0 CBZ W10, 0x3B058C0
	0x03B054A4 LDR W10, [X0 + 0xE0]
	0x03B054A8 CBNZ W10, 0x3B054C8
	0x03B054AC BL 0x1C16DFC
	0x03B054B0 ADRP X8, 0x653000
	0x03B054B4 LDR X8, [X8 + 0x3E8]
	0x03B054B8 LDR X0, [X8]
	0x03B054BC LDR X9, [X0 + 0xB8]
	0x03B054C0 LDR X8, [X9 + 0x88]
	0x03B054C4 CBZ X8, 0x3B05924
	0x03B054C8 LDR W10, [X8 + 0x18]
	0x03B054CC CMP W19, W10
	0x03B054D0 B.CS 0x3B058BC
	0x03B054D4 MADD X10, X21, X25, X8
	0x03B054D8 LDR W10, [X10 + 0x20]
	0x03B054DC STR W31, [X31 + 0x268]
	0x03B054E0 CMP W10, W26
	0x03B054E4 B.LE 0x3B05538
	0x03B054E8 CMP W10, W24
	0x03B054EC B.LE 0x3B05564
	0x03B054F0 MOVZ W11, 0x8289
	0x03B054F4 MOVK W11, 0x40000
	0x03B054F8 CMP W10, W11
	0x03B054FC MOV W20, W31
	0x03B05500 B.LE 0x3B057A8
	0x03B05504 MOVZ W11, 0x828A
	0x03B05508 MOVK W11, 0x40000
	0x03B0550C CMP W10, W11
	0x03B05510 B.EQ 0x3B05814
	0x03B05514 MOVZ W8, 0xB5DD
	0x03B05518 MOVK W8, 0x180000
	0x03B0551C CMP W10, W8
	0x03B05520 B.EQ 0x3B058A8
	0x03B05524 MOVZ W8, 0x48DD
	0x03B05528 MOVK W8, 0x220000
	0x03B0552C CMP W10, W8
	0x03B05530 B.EQ 0x3B058A8
	0x03B05534 B 0x3B05A04
	0x03B05538 CMP W10, W27
	0x03B0553C B.LE 0x3B0557C
	0x03B05540 MOVZ W11, 0x80FB
	0x03B05544 CMP W10, W11
	0x03B05548 B.EQ 0x3B055FC
	0x03B0554C MOVZ W11, 0x9A51
	0x03B05550 CMP W10, W11
	0x03B05554 B.EQ 0x3B05658
	0x03B05558 CMP W10, W26
	0x03B0555C B.EQ 0x3B05590
	0x03B05560 B 0x3B05A00
	0x03B05564 MOVZ W11, 0xB2FB
	0x03B05568 CMP W10, W11
	0x03B0556C B.EQ 0x3B055FC
	0x03B05570 CMP W10, W24
	0x03B05574 B.EQ 0x3B057C8
	0x03B05578 B 0x3B05A00
	0x03B0557C MOVZ W11, 0x6851
	0x03B05580 CMP W10, W11
	0x03B05584 B.EQ 0x3B05658
	0x03B05588 CMP W10, W27
	0x03B0558C B.NE 0x3B05A00
	0x03B05590 LDR X10, [X31 + 0x20]
	0x03B05594 LDR W9, [X0 + 0xE0]
	0x03B05598 LDR X20, [X10 + 0x698]
	0x03B0559C CBNZ W9, 0x3B055BC
	0x03B055A0 BL 0x1C16DFC
	0x03B055A4 ADRP X8, 0x653000
	0x03B055A8 LDR X8, [X8 + 0x3E8]
	0x03B055AC LDR X8, [X8]
	0x03B055B0 LDR X8, [X8 + 0xB8]
	0x03B055B4 LDR X8, [X8 + 0x88]
	0x03B055B8 CBZ X8, 0x3B05924
	0x03B055BC LDR W9, [X8 + 0x18]
	0x03B055C0 CMP W19, W9
	0x03B055C4 B.CS 0x3B058BC
	0x03B055C8 MADD X8, X21, X25, X8
	0x03B055CC LDR W1, [X8 + 0x24]
	0x03B055D0 ADD X3, X31, 0x268
	0x03B055D4 MOVZ W2, 0x1
	0x03B055D8 MOV X0, X20
	0x03B055DC MOV X4, X31
	0x03B055E0 BL 0x3B17E40
	0x03B055E4 LDR X8, [X31 + 0x20]
	0x03B055E8 STR X0, [X8 + 0x698]
	0x03B055EC LDR W8, [X31 + 0x268]
	0x03B055F0 ADDS W31, W8, 0x1
	0x03B055F4 B.NE 0x3B058A0
	0x03B055F8 B 0x3B05A00
	0x03B055FC LDR W10, [X0 + 0xE0]
	0x03B05600 CBNZ W10, 0x3B05620
	0x03B05604 BL 0x1C16DFC
	0x03B05608 ADRP X8, 0x653000
	0x03B0560C LDR X8, [X8 + 0x3E8]
	0x03B05610 LDR X8, [X8]
	0x03B05614 LDR X9, [X8 + 0xB8]
	0x03B05618 LDR X8, [X9 + 0x88]
	0x03B0561C CBZ X8, 0x3B05924
	0x03B05620 LDR W10, [X8 + 0x18]
	0x03B05624 CMP W19, W10
	0x03B05628 B.CS 0x3B058BC
	0x03B0562C MADD X8, X21, X25, X8
	0x03B05630 LDR X1, [X9 + 0x80]
	0x03B05634 LDP W2, W3, [X8 + 0x2C]
	0x03B05638 ADD X4, X31, 0x70
	0x03B0563C STR W31, [X31 + 0x70]
	0x03B05640 BL 0x3B0C268
	0x03B05644 LDR X9, [X31 + 0x20]
	0x03B05648 FCMP S0, 0x0
	0x03B0564C CSET W8, NE
	0x03B05650 STRB W8, [X9 + 0x1B9]
	0x03B05654 B 0x3B058A8
	0x03B05658 LDR W10, [X0 + 0xE0]
	0x03B0565C CBNZ W10, 0x3B0567C
	0x03B05660 BL 0x1C16DFC
	0x03B05664 ADRP X8, 0x653000
	0x03B05668 LDR X8, [X8 + 0x3E8]
	0x03B0566C LDR X8, [X8]
	0x03B05670 LDR X9, [X8 + 0xB8]
	0x03B05674 LDR X8, [X9 + 0x88]
	0x03B05678 CBZ X8, 0x3B05924
	0x03B0567C LDR W10, [X8 + 0x18]
	0x03B05680 CMP W19, W10
	0x03B05684 B.CS 0x3B058BC
	0x03B05688 MADD X8, X21, X25, X8
	0x03B0568C LDR X1, [X9 + 0x80]
	0x03B05690 LDP W2, W3, [X8 + 0x2C]
	0x03B05694 LDR X0, [X31 + 0x20]
	0x03B05698 ADD X4, X9, 0x90
	0x03B0569C BL 0x3B0C1BC
	0x03B056A0 CMP W0, 0x3
	0x03B056A4 B.NE 0x3B05A00
	0x03B056A8 ADRP X8, 0x653000
	0x03B056AC LDR X8, [X8 + 0x3E8]
	0x03B056B0 LDR X0, [X8]
	0x03B056B4 LDR W8, [X0 + 0xE0]
	0x03B056B8 CBNZ W8, 0x3B056CC
	0x03B056BC BL 0x1C16DFC
	0x03B056C0 ADRP X8, 0x653000
	0x03B056C4 LDR X8, [X8 + 0x3E8]
	0x03B056C8 LDR X0, [X8]
	0x03B056CC LDR X8, [X0 + 0xB8]
	0x03B056D0 LDR X8, [X8 + 0x90]
	0x03B056D4 CBZ X8, 0x3B05924
	0x03B056D8 LDR W9, [X8 + 0x18]
	0x03B056DC CBZ W9, 0x3B058BC
	0x03B056E0 LDR X10, [X31 + 0x20]
	0x03B056E4 LDR V0, [X8 + 0x20]
	0x03B056E8 FMOV S1, W29
	0x03B056EC LDRB W8, [X10 + 0x431]
	0x03B056F0 FCVTZS W9, S0
	0x03B056F4 FCMP S0, S1
	0x03B056F8 CSEL W9, W28, W9, EQ
	0x03B056FC STR W9, [X10 + 0x6A4]
	0x03B05700 CBZ W8, 0x3B058A8
	0x03B05704 LDR X22, [X31 + 0x20]
	0x03B05708 MOV X0, X22
	0x03B0570C BL 0x3AF9704
	0x03B05710 ADRP X8, 0x653000
	0x03B05714 LDR X8, [X8 + 0x3E8]
	0x03B05718 LDR W21, [X22 + 0x494]
	0x03B0571C LDR X20, [X22 + 0x698]
	0x03B05720 LDR W22, [X22 + 0x6A4]
	0x03B05724 LDR X8, [X8]
	0x03B05728 MOV X23, X0
	0x03B0572C LDR W9, [X8 + 0xE0]
	0x03B05730 CBNZ W9, 0x3B05748
	0x03B05734 MOV X0, X8
	0x03B05738 BL 0x1C16DFC
	0x03B0573C ADRP X8, 0x653000
	0x03B05740 LDR X8, [X8 + 0x3E8]
	0x03B05744 LDR X8, [X8]
	0x03B05748 LDR X8, [X8 + 0xB8]
	0x03B0574C LDR X8, [X8 + 0x90]
	0x03B05750 CBZ X8, 0x3B05924
	0x03B05754 LDR W9, [X8 + 0x18]
	0x03B05758 CMP W9, 0x1
	0x03B0575C B.LS 0x3B058BC
	0x03B05760 CMP W9, 0x2
	0x03B05764 B.EQ 0x3B058BC
	0x03B05768 CBZ X23, 0x3B05924
	0x03B0576C LDP S0, S1, [X8 + 0x24]
	0x03B05770 FMOV S2, W29
	0x03B05774 MOV X0, X23
	0x03B05778 MOV W1, W21
	0x03B0577C FCVTZS W8, S0
	0x03B05780 FCMP S0, S2
	0x03B05784 FCVTZS W9, S1
	0x03B05788 CSEL W4, W28, W8, EQ
	0x03B0578C FCMP S1, S2
	0x03B05790 CSEL W5, W28, W9, EQ
	0x03B05794 MOV X2, X20
	0x03B05798 MOV W3, W22
	0x03B0579C MOV X6, X31
	0x03B057A0 BL 0x3B160B0
	0x03B057A4 B 0x3B058A8
	0x03B057A8 MOVZ W11, 0x246A
	0x03B057AC MOVK W11, 0x30000
	0x03B057B0 CMP W10, W11
	0x03B057B4 B.EQ 0x3B05814
	0x03B057B8 MOVZ W11, 0x4D63
	0x03B057BC MOVK W11, 0x40000
	0x03B057C0 CMP W10, W11
	0x03B057C4 B.NE 0x3B05A04
	0x03B057C8 LDR W10, [X0 + 0xE0]
	0x03B057CC CBNZ W10, 0x3B057EC
	0x03B057D0 BL 0x1C16DFC
	0x03B057D4 ADRP X8, 0x653000
	0x03B057D8 LDR X8, [X8 + 0x3E8]
	0x03B057DC LDR X8, [X8]
	0x03B057E0 LDR X9, [X8 + 0xB8]
	0x03B057E4 LDR X8, [X9 + 0x88]
	0x03B057E8 CBZ X8, 0x3B05924
	0x03B057EC LDR W10, [X8 + 0x18]
	0x03B057F0 CMP W19, W10
	0x03B057F4 B.CS 0x3B058BC
	0x03B057F8 MADD X8, X21, X25, X8
	0x03B057FC LDR X1, [X9 + 0x80]
	0x03B05800 LDP W2, W3, [X8 + 0x2C]
	0x03B05804 BL 0x3B0BF70
	0x03B05808 LDR X8, [X31 + 0x20]
	0x03B0580C STR W0, [X8 + 0x1BC]
	0x03B05810 B 0x3B058A8
	0x03B05814 LDR W10, [X0 + 0xE0]
	0x03B05818 CBNZ W10, 0x3B05838
	0x03B0581C BL 0x1C16DFC
	0x03B05820 ADRP X8, 0x653000
	0x03B05824 LDR X8, [X8 + 0x3E8]
	0x03B05828 LDR X8, [X8]
	0x03B0582C LDR X9, [X8 + 0xB8]
	0x03B05830 LDR X8, [X9 + 0x88]
	0x03B05834 CBZ X8, 0x3B05924
	0x03B05838 LDR W10, [X8 + 0x18]
	0x03B0583C CMP W10, 0x1
	0x03B05840 B.LS 0x3B058BC
	0x03B05844 LDR X1, [X9 + 0x80]
	0x03B05848 LDP W2, W3, [X8 + 0x44]
	0x03B0584C ADD X4, X31, 0x70
	0x03B05850 STR W31, [X31 + 0x70]
	0x03B05854 BL 0x3B0C268
	0x03B05858 FMOV S1, W29
	0x03B0585C FCVTZS W8, S0
	0x03B05860 FCMP S0, S1
	0x03B05864 CSEL W20, W28, W8, EQ
	0x03B05868 ADDS W31, W20, 0x8000
	0x03B0586C STR W20, [X31 + 0x268]
	0x03B05870 B.EQ 0x3B05A00
	0x03B05874 LDR X8, [X31 + 0x20]
	0x03B05878 LDR X0, [X8 + 0x698]
	0x03B0587C CBZ X0, 0x3B05924
	0x03B05880 MOV X1, X31
	0x03B05884 BL 0x3B16BEC
	0x03B05888 CBZ X0, 0x3B05924
	0x03B0588C LDR W8, [X0 + 0x18]
	0x03B05890 SUB W8, W8, 0x1
	0x03B05894 CMP W20, W8
	0x03B05898 B.GT 0x3B05A00
	0x03B0589C LDR W8, [X31 + 0x268]
	0x03B058A0 LDR X9, [X31 + 0x20]
	0x03B058A4 STR W8, [X9 + 0x6A4]
	0x03B058A8 ADRP X8, 0x653000
	0x03B058AC LDR X8, [X8 + 0x3E8]
	0x03B058B0 ADD W19, W19, 0x1
	0x03B058B4 LDR X0, [X8]
	0x03B058B8 B 0x3B05434
	0x03B058BC BL 0x1C16F28
	0x03B058C0 LDR X8, [X31 + 0x20]
	0x03B058C4 LDR W8, [X8 + 0x6A4]
	0x03B058C8 ADDS W31, W8, 0x1
	0x03B058CC B.EQ 0x3B05A00
	0x03B058D0 LDR X8, [X31 + 0x20]
	0x03B058D4 LDR X20, [X8 + 0x698]
	0x03B058D8 CBZ X20, 0x3B05924
	0x03B058DC LDR W8, [X0 + 0xE0]
	0x03B058E0 LDR X21, [X20 + 0x20]
	0x03B058E4 CBNZ W8, 0x3B058F8
	0x03B058E8 BL 0x1C16DFC
	0x03B058EC ADRP X8, 0x653000
	0x03B058F0 LDR X8, [X8 + 0x3E8]
	0x03B058F4 LDR X0, [X8]
	0x03B058F8 LDR X2, [X0 + 0xB8]
	0x03B058FC MOV X0, X21
	0x03B05900 MOV X1, X20
	0x03B05904 MOV X4, X31
	0x03B05908 LDR X3, [X2 + 0x8]
	0x03B0590C BL 0x3ACB80C
	0x03B05910 LDR X8, [X31 + 0x20]
	0x03B05914 MOVZ W20, 0x1
	0x03B05918 STR W0, [X8 + 0x120]
	0x03B0591C STR W20, [X8 + 0x644]
	0x03B05920 B 0x3B05A04
	0x03B05924 BL 0x1C16F20
	0x03B05928 MOVZ W9, 0x3C4E
	0x03B0592C MOVK W9, 0xFDCD0000
	0x03B05930 CMP W8, W9
	0x03B05934 B.LE 0x3B059B8
	0x03B05938 MOVZ W9, 0xE9D3
	0x03B0593C MOVK W9, 0x10000
	0x03B05940 CMP W8, W9
	0x03B05944 B.EQ 0x3B05AA4
	0x03B05948 MOVZ W9, 0x863E
	0x03B0594C MOVK W9, 0x360000
	0x03B05950 CMP W8, W9
	0x03B05954 B.EQ 0x3B05AB4
	0x03B05958 MOVZ W9, 0x29C9
	0x03B0595C MOVK W9, 0x380000
	0x03B05960 CMP W8, W9
	0x03B05964 B.NE 0x3B05A00
	0x03B05968 LDR X9, [X31 + 0x20]
	0x03B0596C MOVZ W8, 0x8080
	0x03B05970 MOVK W8, 0xFF800000
	0x03B05974 MOVZ W1, 0x8080
	0x03B05978 STR W8, [X9 + 0x4EC]
	0x03B0597C ADRP X8, 0x654000
	0x03B05980 LDR X8, [X8 + 0x268]
	0x03B05984 ADD X0, X9, 0x4F0
	0x03B05988 MOVK W1, 0xFF800000
	0x03B0598C B 0x3B05A84
	0x03B05990 MOVZ W9, 0x36F0
	0x03B05994 MOVK W9, 0x1950000
	0x03B05998 CMP W8, W9
	0x03B0599C B.EQ 0x3B05A38
	0x03B059A0 MOVZ W9, 0x1A47
	0x03B059A4 MOVK W9, 0x7070000
	0x03B059A8 CMP W8, W9
	0x03B059AC B.NE 0x3B05A00
	0x03B059B0 FMOV S0, W31
	0x03B059B4 B 0x3B05AA8
	0x03B059B8 MOVZ W9, 0x2EE0
	0x03B059BC MOVK W9, 0xC4D30000
	0x03B059C0 CMP W8, W9
	0x03B059C4 B.EQ 0x3B05A60
	0x03B059C8 MOVZ W9, 0x3C4E
	0x03B059CC MOVK W9, 0xFDCD0000
	0x03B059D0 CMP W8, W9
	0x03B059D4 B.NE 0x3B05A00
	0x03B059D8 LDR X9, [X31 + 0x20]
	0x03B059DC MOVZ W8, 0x20A0
	0x03B059E0 MOVK W8, 0xFFF00000
	0x03B059E4 MOVZ W1, 0x20A0
	0x03B059E8 STR W8, [X9 + 0x4EC]
	0x03B059EC ADRP X8, 0x654000
	0x03B059F0 LDR X8, [X8 + 0x268]
	0x03B059F4 ADD X0, X9, 0x4F0
	0x03B059F8 MOVK W1, 0xFFF00000
	0x03B059FC B 0x3B05A84
	0x03B05A00 MOV W20, W31
	0x03B05A04 MOV W0, W20
	0x03B05A08 ADD X31, X31, 0x320
	0x03B05A0C LDP X20, X19, [X31 + 0x90]
	0x03B05A10 LDP X22, X21, [X31 + 0x80]
	0x03B05A14 LDP X24, X23, [X31 + 0x70]
	0x03B05A18 LDP X26, X25, [X31 + 0x60]
	0x03B05A1C LDP X28, X27, [X31 + 0x50]
	0x03B05A20 LDP X29, X30, [X31 + 0x40]
	0x03B05A24 LDP D9, D8, [X31 + 0x30]
	0x03B05A28 LDP D11, D10, [X31 + 0x20]
	0x03B05A2C LDP D13, D12, [X31 + 0x10]
	0x03B05A30 LDP D15, D14, [X31], #0xA0
	0x03B05A34 RET
	0x03B05A38 LDR X9, [X31 + 0x20]
	0x03B05A3C MOVZ W8, 0x80FF
	0x03B05A40 MOVK W8, 0xFF000000
	0x03B05A44 MOVZ W1, 0x80FF
	0x03B05A48 STR W8, [X9 + 0x4EC]
	0x03B05A4C ADRP X8, 0x654000
	0x03B05A50 LDR X8, [X8 + 0x268]
	0x03B05A54 ADD X0, X9, 0x4F0
	0x03B05A58 MOVK W1, 0xFF000000
	0x03B05A5C B 0x3B05A84
	0x03B05A60 LDR X9, [X31 + 0x20]
	0x03B05A64 MOVZ W8, 0xD8AD
	0x03B05A68 MOVK W8, 0xFFE60000
	0x03B05A6C MOVZ W1, 0xD8AD
	0x03B05A70 STR W8, [X9 + 0x4EC]
	0x03B05A74 ADRP X8, 0x654000
	0x03B05A78 LDR X8, [X8 + 0x268]
	0x03B05A7C ADD X0, X9, 0x4F0
	0x03B05A80 MOVK W1, 0xFFE60000
	0x03B05A84 LDR X2, [X8]
	0x03B05A88 B 0x3B00B60
	0x03B05A8C FMOV S0, W31
	0x03B05A90 FMOV S1, 1
	0x03B05A94 B 0x3B05AAC
	0x03B05A98 FMOV S0, 1
	0x03B05A9C FMOV S1, 1
	0x03B05AA0 B 0x3B05ABC
	0x03B05AA4 FMOV S0, 1
	0x03B05AA8 FMOV S1, W31
	0x03B05AAC FMOV S2, W31
	0x03B05AB0 B 0x3B05AC0
	0x03B05AB4 FMOV S0, W31
	0x03B05AB8 FMOV S1, W31
	0x03B05ABC FMOV S2, 1
	0x03B05AC0 FMOV S3, 1
	0x03B05AC4 MOV X0, X31
	0x03B05AC8 BL 0x1E43664
	0x03B05ACC B 0x3B04D70
	0x03B05AD0 SUB X31, X31, 0xF0
	0x03B05AD4 STP X30, X23, [X31 + 0xC0]
	0x03B05AD8 STP X22, X21, [X31 + 0xD0]
	0x03B05ADC STP X20, X19, [X31 + 0xE0]
	0x03B05AE0 ADRP X19, 0x8DD000
	0x03B05AE4 LDRB W8, [X19 + 0x65A]
	0x03B05AE8 MOV X20, X1
	0x03B05AEC MOV X21, X0
	0x03B05AF0 TBNZ X8, 0x0, 0x3B05B08
	0x03B05AF4 ADRP X0, 0x653000
	0x03B05AF8 LDR X0, [X0 + 0x3E8]
	0x03B05AFC BL 0x1C16CF4
	0x03B05B00 MOVZ W8, 0x1
	0x03B05B04 STRB W8, [X19 + 0x65A]
	0x03B05B08 LDR X8, [X20 + 0x348]
	0x03B05B0C LDR W19, [X20]
	0x03B05B10 STR X8, [X21 + 0x100]
	0x03B05B14 LDR X8, [X20 + 0x350]
	0x03B05B18 STR X8, [X21 + 0x698]
	0x03B05B1C LDR X8, [X20 + 0x358]
	0x03B05B20 STR X8, [X21 + 0x118]
	0x03B05B24 LDR W8, [X20 + 0x360]
	0x03B05B28 STR W8, [X21 + 0x120]
	0x03B05B2C LDR W8, [X20 + 0x4]
	0x03B05B30 ADD W8, W8, 0x1
	0x03B05B34 STR W8, [X21 + 0x494]
	0x03B05B38 LDR W9, [X20 + 0x8]
	0x03B05B3C LDR X8, [X21 + 0x368]
	0x03B05B40 STR W9, [X21 + 0x4AC]
	0x03B05B44 CBZ X8, 0x3B05DAC
	0x03B05B48 LDR W9, [X20 + 0x10]
	0x03B05B4C ADD X10, X20, 0x208
	0x03B05B50 ADRP X22, 0x653000
	0x03B05B54 ADD X1, X20, 0x2C8
	0x03B05B58 STR W9, [X8 + 0x28]
	0x03B05B5C LDUR V0, [X20 + 0x14]
	0x03B05B60 ADD X0, X31, 0x68
	0x03B05B64 MOVZ W2, 0x58
	0x03B05B68 STR D0, [X21 + 0x498]
	0x03B05B6C LDR W8, [X20 + 0x20]
	0x03B05B70 STR W8, [X21 + 0x4A4]
	0x03B05B74 LDR W8, [X20 + 0x64]
	0x03B05B78 STR W8, [X21 + 0x25C]
	0x03B05B7C LDR W8, [X20 + 0x68]
	0x03B05B80 STR W8, [X21 + 0x5F0]
	0x03B05B84 LDR V0, [X20 + 0x6C]
	0x03B05B88 ADD X8, X21, 0x2AC
	0x03B05B8C ADD X9, X8, 0x218
	0x03B05B90 STR S0, [X21 + 0x404]
	0x03B05B94 LDR V0, [X20 + 0x70]
	0x03B05B98 STR S0, [X21 + 0x1E8]
	0x03B05B9C LDR V0, [X20 + 0x50]
	0x03B05BA0 STR S0, [X21 + 0x640]
	0x03B05BA4 LDR V0, [X20 + 0x28]
	0x03B05BA8 UNIMPLEMENTED
	0x03B05BAC STR D0, [X21 + 0x4B8]
	0x03B05BB0 LDR V0, [X20 + 0x3]
	0x03B05BB4 UNIMPLEMENTED
	0x03B05BB8 UNIMPLEMENTED
	0x03B05BBC STR V0, [X9]
	0x03B05BC0 LDR V0, [X20 + 0x40]
	0x03B05BC4 ADD X9, X20, 0x364
	0x03B05BC8 STR S0, [X21 + 0x4B4]
	0x03B05BCC LDR V0, [X20 + 0x54]
	0x03B05BD0 STR S0, [X21 + 0x3E0]
	0x03B05BD4 LDR V0, [X20 + 0x58]
	0x03B05BD8 STR S0, [X21 + 0x3EC]
	0x03B05BDC LDR V0, [X9]
	0x03B05BE0 ADD X9, X21, 0x4DC
	0x03B05BE4 STR V0, [X9]
	0x03B05BE8 LDR W9, [X20 + 0x24]
	0x03B05BEC STR W9, [X21 + 0x4A8]
	0x03B05BF0 LDR V0, [X20 + 0x78]
	0x03B05BF4 STR S0, [X21 + 0x4D8]
	0x03B05BF8 LDR V0, [X20 + 0x74]
	0x03B05BFC STR S0, [X21 + 0x61C]
	0x03B05C00 LDRB W9, [X20 + 0x7C]
	0x03B05C04 STRB W9, [X21 + 0x2C4]
	0x03B05C08 LDR V0, [X20 + 0x80]
	0x03B05C0C ADD X9, X20, 0x104
	0x03B05C10 STR S0, [X21 + 0x2FC]
	0x03B05C14 LDUR V0, [X20 + 0x84]
	0x03B05C18 STR D0, [X8]
	0x03B05C1C LDR W8, [X20 + 0x44]
	0x03B05C20 STR W8, [X21 + 0x278]
	0x03B05C24 LDR V0, [X20 + 0x48]
	0x03B05C28 STR D0, [X21 + 0x350]
	0x03B05C2C LDR W8, [X20 + 0xF4]
	0x03B05C30 STR W8, [X21 + 0x4EC]
	0x03B05C34 LDR W8, [X20 + 0xF8]
	0x03B05C38 STR W8, [X21 + 0x158]
	0x03B05C3C LDR W8, [X20 + 0xFC]
	0x03B05C40 STR W8, [X21 + 0x15C]
	0x03B05C44 LDRB W8, [X20 + 0x375]
	0x03B05C48 STRB W8, [X21 + 0x2DA]
	0x03B05C4C LDRB W8, [X20 + 0x374]
	0x03B05C50 STRB W8, [X21 + 0x430]
	0x03B05C54 LDRH W8, [X9 + 0x8]
	0x03B05C58 LDR X9, [X9]
	0x03B05C5C STRH W8, [X21 + 0x268]
	0x03B05C60 STR X9, [X21 + 0x260]
	0x03B05C64 LDP V1, V0, [X20 + 0x110]
	0x03B05C68 ADD X9, X21, 0x588
	0x03B05C6C STR V0, [X21 + 0x5E]
	0x03B05C70 STR V1, [X21 + 0x5D]
	0x03B05C74 LDP V1, V0, [X20 + 0x130]
	0x03B05C78 STR V0, [X21 + 0x50]
	0x03B05C7C STR V1, [X21 + 0x4F]
	0x03B05C80 LDP V1, V0, [X20 + 0x150]
	0x03B05C84 STR V0, [X21 + 0x52]
	0x03B05C88 STR V1, [X21 + 0x51]
	0x03B05C8C LDP V1, V0, [X20 + 0x170]
	0x03B05C90 STR V0, [X21 + 0x54]
	0x03B05C94 STR V1, [X21 + 0x53]
	0x03B05C98 LDP V1, V0, [X20 + 0x1C0]
	0x03B05C9C LDR V2, [X20 + 0x1B]
	0x03B05CA0 STR V0, [X21 + 0x57]
	0x03B05CA4 STR V1, [X21 + 0x56]
	0x03B05CA8 STR V2, [X21 + 0x55]
	0x03B05CAC LDR X8, [X20 + 0x200]
	0x03B05CB0 LDP V0, V1, [X20 + 0x1E0]
	0x03B05CB4 STR X8, [X9 + 0x20]
	0x03B05CB8 STP V0, V1, [X9]
	0x03B05CBC LDP V1, V0, [X10]
	0x03B05CC0 ADD X8, X20, 0x228
	0x03B05CC4 ADD X9, X20, 0x288
	0x03B05CC8 STP V1, V0, [X21 + 0x1F0]
	0x03B05CCC LDP V1, V0, [X8]
	0x03B05CD0 ADD X8, X20, 0x248
	0x03B05CD4 STR V0, [X21 + 0x42]
	0x03B05CD8 STR V1, [X21 + 0x41]
	0x03B05CDC LDP V1, V0, [X8]
	0x03B05CE0 ADD X8, X21, 0x218
	0x03B05CE4 STP V1, V0, [X8]
	0x03B05CE8 LDP V1, V0, [X9]
	0x03B05CEC ADD X8, X20, 0x2A8
	0x03B05CF0 STR V0, [X21 + 0x63]
	0x03B05CF4 STR V1, [X21 + 0x62]
	0x03B05CF8 LDP V1, V0, [X8]
	0x03B05CFC LDR X22, [X22 + 0x3E8]
	0x03B05D00 ADD X8, X21, 0x5F8
	0x03B05D04 STP V1, V0, [X8]
	0x03B05D08 BL 0x3EB1AC0
	0x03B05D0C LDR X0, [X22]
	0x03B05D10 LDR W8, [X0 + 0xE0]
	0x03B05D14 CBNZ W8, 0x3B05D20
	0x03B05D18 BL 0x1C16DFC
	0x03B05D1C LDR X0, [X22]
	0x03B05D20 LDR X8, [X0 + 0xB8]
	0x03B05D24 ADD X1, X31, 0x68
	0x03B05D28 MOVZ W2, 0x58
	0x03B05D2C ADD X0, X8, 0x10
	0x03B05D30 BL 0x3EB1AC0
	0x03B05D34 LDP V0, V1, [X20 + 0x320]
	0x03B05D38 LDR X8, [X21 + 0x368]
	0x03B05D3C STP V0, V1, [X21 + 0x280]
	0x03B05D40 LDR W9, [X20 + 0x340]
	0x03B05D44 STR W9, [X21 + 0x6A8]
	0x03B05D48 CBZ X8, 0x3B05DAC
	0x03B05D4C LDR X22, [X8 + 0x50]
	0x03B05D50 CBZ X22, 0x3B05DAC
	0x03B05D54 LDRSW X21, [X21 + 0x4A8]
	0x03B05D58 LDR W23, [X22 + 0x18]
	0x03B05D5C CMP W21, W23
	0x03B05D60 B.GE 0x3B05D94
	0x03B05D64 ADD X1, X20, 0x98
	0x03B05D68 ADD X0, X31, 0x8
	0x03B05D6C MOVZ W2, 0x5C
	0x03B05D70 BL 0x3EB1AC0
	0x03B05D74 CMP W21, W23
	0x03B05D78 B.CS 0x3B05DB0
	0x03B05D7C MOVZ W8, 0x5C
	0x03B05D80 MADD X8, X21, X8, X22
	0x03B05D84 ADD X0, X8, 0x20
	0x03B05D88 ADD X1, X31, 0x8
	0x03B05D8C MOVZ W2, 0x5C
	0x03B05D90 BL 0x3EB1AC0
	0x03B05D94 MOV W0, W19
	0x03B05D98 LDP X20, X19, [X31 + 0xE0]
	0x03B05D9C LDP X22, X21, [X31 + 0xD0]
	0x03B05DA0 LDP X30, X23, [X31 + 0xC0]
	0x03B05DA4 ADD X31, X31, 0xF0
	0x03B05DA8 RET
	0x03B05DAC BL 0x1C16F20
	0x03B05DB0 BL 0x1C16F28
	0x03B05DB4 STP X30, X23, [X31 - 0x30]!
	0x03B05DB8 STP X22, X21, [X31 + 0x10]
	0x03B05DBC STP X20, X19, [X31 + 0x20]
	0x03B05DC0 ADRP X23, 0x8DD000
	0x03B05DC4 LDRB W8, [X23 + 0x659]
	0x03B05DC8 MOV W21, W3
	0x03B05DCC MOV W22, W2
	0x03B05DD0 MOV X19, X1
	0x03B05DD4 MOV X20, X0
	0x03B05DD8 TBNZ X8, 0x0, 0x3B05DF0
	0x03B05DDC ADRP X0, 0x653000
	0x03B05DE0 LDR X0, [X0 + 0x3E8]
	0x03B05DE4 BL 0x1C16CF4
	0x03B05DE8 MOVZ W8, 0x1
	0x03B05DEC STRB W8, [X23 + 0x659]
	0x03B05DF0 LDR X8, [X20 + 0x100]
	0x03B05DF4 STR X8, [X19 + 0x348]
	0x03B05DF8 LDR X8, [X20 + 0x698]
	0x03B05DFC STR X8, [X19 + 0x350]
	0x03B05E00 LDR X8, [X20 + 0x118]
	0x03B05E04 STR X8, [X19 + 0x358]
	0x03B05E08 LDR W8, [X20 + 0x120]
	0x03B05E0C STP W22, W21, [X19]
	0x03B05E10 STR W8, [X19 + 0x360]
	0x03B05E14 LDR W8, [X20 + 0x4AC]
	0x03B05E18 STR W8, [X19 + 0x8]
	0x03B05E1C LDR X8, [X20 + 0x368]
	0x03B05E20 CBZ X8, 0x3B06064
	0x03B05E24 LDR W8, [X8 + 0x28]
	0x03B05E28 ADD X10, X19, 0x104
	0x03B05E2C ADRP X21, 0x653000
	0x03B05E30 STR W8, [X19 + 0x10]
	0x03B05E34 LDR V0, [X20 + 0x498]
	0x03B05E38 STUR D0, [X19 + 0x14]
	0x03B05E3C LDR W8, [X20 + 0x4A4]
	0x03B05E40 STR W8, [X19 + 0x20]
	0x03B05E44 LDR W8, [X20 + 0x25C]
	0x03B05E48 STR W8, [X19 + 0x64]
	0x03B05E4C LDR W8, [X20 + 0x5F0]
	0x03B05E50 STR W8, [X19 + 0x68]
	0x03B05E54 LDR V0, [X20 + 0x404]
	0x03B05E58 ADD X8, X20, 0x2AC
	0x03B05E5C ADD X9, X8, 0x218
	0x03B05E60 STR S0, [X19 + 0x6C]
	0x03B05E64 LDR V0, [X20 + 0x1E8]
	0x03B05E68 STR S0, [X19 + 0x70]
	0x03B05E6C LDR V0, [X20 + 0x640]
	0x03B05E70 STR S0, [X19 + 0x50]
	0x03B05E74 LDR V0, [X20 + 0x4B8]
	0x03B05E78 UNIMPLEMENTED
	0x03B05E7C STR D0, [X19 + 0x28]
	0x03B05E80 LDR V0, [X9]
	0x03B05E84 ADD X9, X20, 0x4DC
	0x03B05E88 UNIMPLEMENTED
	0x03B05E8C UNIMPLEMENTED
	0x03B05E90 UNIMPLEMENTED
	0x03B05E94 STR V0, [X19 + 0x3]
	0x03B05E98 LDR V0, [X20 + 0x4B4]
	0x03B05E9C STR S0, [X19 + 0x40]
	0x03B05EA0 LDR V0, [X20 + 0x3E0]
	0x03B05EA4 STR S0, [X19 + 0x54]
	0x03B05EA8 LDR V0, [X20 + 0x3EC]
	0x03B05EAC STR S0, [X19 + 0x58]
	0x03B05EB0 LDR V0, [X9]
	0x03B05EB4 ADD X9, X19, 0x364
	0x03B05EB8 STR V0, [X9]
	0x03B05EBC LDR W9, [X20 + 0x4A8]
	0x03B05EC0 STR W9, [X19 + 0x24]
	0x03B05EC4 LDR V0, [X20 + 0x4D8]
	0x03B05EC8 STR S0, [X19 + 0x78]
	0x03B05ECC LDR V0, [X20 + 0x61C]
	0x03B05ED0 STR S0, [X19 + 0x74]
	0x03B05ED4 LDRB W9, [X20 + 0x2C4]
	0x03B05ED8 STRB W9, [X19 + 0x7C]
	0x03B05EDC LDR V0, [X20 + 0x2FC]
	0x03B05EE0 STR S0, [X19 + 0x80]
	0x03B05EE4 LDR V0, [X8]
	0x03B05EE8 STUR D0, [X19 + 0x84]
	0x03B05EEC LDR W8, [X20 + 0x278]
	0x03B05EF0 STR W8, [X19 + 0x44]
	0x03B05EF4 LDR V0, [X20 + 0x350]
	0x03B05EF8 STR D0, [X19 + 0x48]
	0x03B05EFC LDR W8, [X20 + 0x4EC]
	0x03B05F00 STR W8, [X19 + 0xF4]
	0x03B05F04 LDR W8, [X20 + 0x158]
	0x03B05F08 STR W8, [X19 + 0xF8]
	0x03B05F0C LDR W8, [X20 + 0x15C]
	0x03B05F10 STR W8, [X19 + 0xFC]
	0x03B05F14 LDRB W8, [X20 + 0x2DA]
	0x03B05F18 STRB W8, [X19 + 0x375]
	0x03B05F1C LDRB W8, [X20 + 0x430]
	0x03B05F20 STRB W8, [X19 + 0x374]
	0x03B05F24 LDRH W8, [X20 + 0x268]
	0x03B05F28 LDR X9, [X20 + 0x260]
	0x03B05F2C STRH W8, [X10 + 0x8]
	0x03B05F30 STR X9, [X10]
	0x03B05F34 LDR V0, [X20 + 0x5E]
	0x03B05F38 LDR V1, [X20 + 0x5D]
	0x03B05F3C ADD X8, X20, 0x588
	0x03B05F40 STP V1, V0, [X19 + 0x110]
	0x03B05F44 LDR V0, [X20 + 0x50]
	0x03B05F48 LDR V1, [X20 + 0x4F]
	0x03B05F4C STP V1, V0, [X19 + 0x130]
	0x03B05F50 LDR V0, [X20 + 0x52]
	0x03B05F54 LDR V1, [X20 + 0x51]
	0x03B05F58 STP V1, V0, [X19 + 0x150]
	0x03B05F5C LDR V0, [X20 + 0x54]
	0x03B05F60 LDR V1, [X20 + 0x53]
	0x03B05F64 STP V1, V0, [X19 + 0x170]
	0x03B05F68 LDR V0, [X20 + 0x57]
	0x03B05F6C LDR V1, [X20 + 0x56]
	0x03B05F70 LDR V2, [X20 + 0x55]
	0x03B05F74 STP V1, V0, [X19 + 0x1C0]
	0x03B05F78 STR V2, [X19 + 0x1B]
	0x03B05F7C LDR X9, [X8 + 0x20]
	0x03B05F80 LDP V1, V0, [X8]
	0x03B05F84 ADD X8, X19, 0x208
	0x03B05F88 STR X9, [X19 + 0x200]
	0x03B05F8C STP V1, V0, [X19 + 0x1E0]
	0x03B05F90 LDP V1, V0, [X20 + 0x1F0]
	0x03B05F94 ADD X9, X20, 0x218
	0x03B05F98 STP V1, V0, [X8]
	0x03B05F9C LDR V0, [X20 + 0x42]
	0x03B05FA0 LDR V1, [X20 + 0x41]
	0x03B05FA4 ADD X8, X19, 0x228
	0x03B05FA8 STP V1, V0, [X8]
	0x03B05FAC LDP V1, V0, [X9]
	0x03B05FB0 ADD X8, X19, 0x248
	0x03B05FB4 ADD X9, X20, 0x5F8
	0x03B05FB8 STP V1, V0, [X8]
	0x03B05FBC LDR V0, [X20 + 0x63]
	0x03B05FC0 LDR V1, [X20 + 0x62]
	0x03B05FC4 ADD X8, X19, 0x288
	0x03B05FC8 STP V1, V0, [X8]
	0x03B05FCC LDP V1, V0, [X9]
	0x03B05FD0 LDR X21, [X21 + 0x3E8]
	0x03B05FD4 ADD X8, X19, 0x2A8
	0x03B05FD8 STP V1, V0, [X8]
	0x03B05FDC LDR X0, [X21]
	0x03B05FE0 LDR W8, [X0 + 0xE0]
	0x03B05FE4 CBNZ W8, 0x3B05FF0
	0x03B05FE8 BL 0x1C16DFC
	0x03B05FEC LDR X0, [X21]
	0x03B05FF0 LDR X8, [X0 + 0xB8]
	0x03B05FF4 ADD X0, X19, 0x2C8
	0x03B05FF8 MOVZ W2, 0x58
	0x03B05FFC ADD X1, X8, 0x10
	0x03B06000 BL 0x3EB1B30
	0x03B06004 LDP V0, V1, [X20 + 0x280]
	0x03B06008 STP V0, V1, [X19 + 0x320]
	0x03B0600C LDR W8, [X20 + 0x6A8]
	0x03B06010 STR W8, [X19 + 0x340]
	0x03B06014 LDR X8, [X20 + 0x368]
	0x03B06018 CBZ X8, 0x3B06064
	0x03B0601C LDR X8, [X8 + 0x50]
	0x03B06020 CBZ X8, 0x3B06064
	0x03B06024 LDRSW X9, [X20 + 0x4A8]
	0x03B06028 LDR W10, [X8 + 0x18]
	0x03B0602C CMP W9, W10
	0x03B06030 B.GE 0x3B06054
	0x03B06034 CMP W9, W10
	0x03B06038 B.CS 0x3B06068
	0x03B0603C MOVZ W10, 0x5C
	0x03B06040 MADD X8, X9, X10, X8
	0x03B06044 ADD X1, X8, 0x20
	0x03B06048 ADD X0, X19, 0x98
	0x03B0604C MOVZ W2, 0x5C
	0x03B06050 BL 0x3EB1B30
	0x03B06054 LDP X20, X19, [X31 + 0x20]
	0x03B06058 LDP X22, X21, [X31 + 0x10]
	0x03B0605C LDP X30, X23, [X31], #0x30
	0x03B06060 RET
	0x03B06064 BL 0x1C16F20
	0x03B06068 BL 0x1C16F28
	0x03B0606C STP X31, X31, [X8]
	0x03B06070 STR X31, [X8 + 0x10]
	0x03B06074 RET
	0x03B06078 MOV X0, X31
	0x03B0607C B 0x3C0B398
	0x03B06080 STR X30, [X31 - 0x10]!
	0x03B06084 CMP W1, W2
	0x03B06088 B.GT 0x3B06228
	0x03B0608C UNIMPLEMENTED
	0x03B06090 MOVZ W8, 0x178
	0x03B06094 LDR X9, [X0 + 0x368]
	0x03B06098 CBZ X9, 0x3B06230
	0x03B0609C LDR X10, [X9 + 0x38]
	0x03B060A0 CBZ X10, 0x3B06230
	0x03B060A4 LDR W9, [X10 + 0x18]
	0x03B060A8 CMP W1, W9
	0x03B060AC B.CS 0x3B06234
	0x03B060B0 SXTW X9, W1
	0x03B060B4 MADD X10, X9, X8, X10
	0x03B060B8 LDR V2, [X10 + 0x120]
	0x03B060BC FSUB S2, S2, S0
	0x03B060C0 STR S2, [X10 + 0x120]
	0x03B060C4 LDR X10, [X0 + 0x368]
	0x03B060C8 CBZ X10, 0x3B06230
	0x03B060CC LDR X10, [X10 + 0x38]
	0x03B060D0 CBZ X10, 0x3B06230
	0x03B060D4 LDR W11, [X10 + 0x18]
	0x03B060D8 CMP W1, W11
	0x03B060DC B.CS 0x3B06234
	0x03B060E0 MADD X10, X9, X8, X10
	0x03B060E4 LDR V2, [X10 + 0x114]
	0x03B060E8 FSUB S2, S2, S0
	0x03B060EC STR S2, [X10 + 0x114]
	0x03B060F0 LDR X10, [X0 + 0x368]
	0x03B060F4 CBZ X10, 0x3B06230
	0x03B060F8 LDR X10, [X10 + 0x38]
	0x03B060FC CBZ X10, 0x3B06230
	0x03B06100 LDR W11, [X10 + 0x18]
	0x03B06104 CMP W1, W11
	0x03B06108 B.CS 0x3B06234
	0x03B0610C MADD X10, X9, X8, X10
	0x03B06110 LDR V2, [X10 + 0x12C]
	0x03B06114 FSUB S2, S2, S0
	0x03B06118 STR S2, [X10 + 0x12C]
	0x03B0611C LDR X10, [X0 + 0x368]
	0x03B06120 CBZ X10, 0x3B06230
	0x03B06124 LDR X10, [X10 + 0x38]
	0x03B06128 CBZ X10, 0x3B06230
	0x03B0612C LDR W11, [X10 + 0x18]
	0x03B06130 CMP W1, W11
	0x03B06134 B.CS 0x3B06234
	0x03B06138 MADD X10, X9, X8, X10
	0x03B0613C LDR V2, [X10 + 0x138]
	0x03B06140 FSUB S2, S2, S0
	0x03B06144 STR S2, [X10 + 0x138]
	0x03B06148 LDR X10, [X0 + 0x368]
	0x03B0614C CBZ X10, 0x3B06230
	0x03B06150 LDR X10, [X10 + 0x38]
	0x03B06154 CBZ X10, 0x3B06230
	0x03B06158 LDR W11, [X10 + 0x18]
	0x03B0615C CMP W1, W11
	0x03B06160 B.CS 0x3B06234
	0x03B06164 MADD X11, X9, X8, X10
	0x03B06168 LDR V2, [X11 + 0x148]
	0x03B0616C LDR V3, [X11 + 0x150]
	0x03B06170 LDRB W12, [X11 + 0x194]
	0x03B06174 FSUB V2.2S, V2.2S, V1.2S
	0x03B06178 FSUB S3, S3, S0
	0x03B0617C STR D2, [X11 + 0x148]
	0x03B06180 STR S3, [X11 + 0x150]
	0x03B06184 CBZ W12, 0x3B0621C
	0x03B06188 MADD X10, X9, X8, X10
	0x03B0618C LDR V2, [X10 + 0x74]
	0x03B06190 FSUB S2, S2, S0
	0x03B06194 STR S2, [X10 + 0x74]
	0x03B06198 LDR X10, [X0 + 0x368]
	0x03B0619C CBZ X10, 0x3B06230
	0x03B061A0 LDR X10, [X10 + 0x38]
	0x03B061A4 CBZ X10, 0x3B06230
	0x03B061A8 LDR W11, [X10 + 0x18]
	0x03B061AC CMP W1, W11
	0x03B061B0 B.CS 0x3B06234
	0x03B061B4 MADD X10, X9, X8, X10
	0x03B061B8 LDR V2, [X10 + 0x9C]
	0x03B061BC FSUB S2, S2, S0
	0x03B061C0 STR S2, [X10 + 0x9C]
	0x03B061C4 LDR X10, [X0 + 0x368]
	0x03B061C8 CBZ X10, 0x3B06230
	0x03B061CC LDR X10, [X10 + 0x38]
	0x03B061D0 CBZ X10, 0x3B06230
	0x03B061D4 LDR W11, [X10 + 0x18]
	0x03B061D8 CMP W1, W11
	0x03B061DC B.CS 0x3B06234
	0x03B061E0 MADD X10, X9, X8, X10
	0x03B061E4 LDR V2, [X10 + 0xC4]
	0x03B061E8 FSUB S2, S2, S0
	0x03B061EC STR S2, [X10 + 0xC4]
	0x03B061F0 LDR X10, [X0 + 0x368]
	0x03B061F4 CBZ X10, 0x3B06230
	0x03B061F8 LDR X10, [X10 + 0x38]
	0x03B061FC CBZ X10, 0x3B06230
	0x03B06200 LDR W11, [X10 + 0x18]
	0x03B06204 CMP W1, W11
	0x03B06208 B.CS 0x3B06234
	0x03B0620C MADD X9, X9, X8, X10
	0x03B06210 LDR V2, [X9 + 0xEC]
	0x03B06214 FSUB S2, S2, S0
	0x03B06218 STR S2, [X9 + 0xEC]
	0x03B0621C ADD W1, W1, 0x1
	0x03B06220 CMP W1, W2
	0x03B06224 B.LE 0x3B06094
	0x03B06228 LDR X30, [X31], #0x10
	0x03B0622C RET
	0x03B06230 BL 0x1C16F20
	0x03B06234 BL 0x1C16F28
	0x03B06238 SUB X31, X31, 0x100
	0x03B0623C STR X30, [X31 + 0xC0]
	0x03B06240 STP X24, X23, [X31 + 0xD0]
	0x03B06244 STP X22, X21, [X31 + 0xE0]
	0x03B06248 STP X20, X19, [X31 + 0xF0]
	0x03B0624C ADRP X21, 0x8DC000
	0x03B06250 LDRB W8, [X21 + 0x657]
	0x03B06254 MOV W20, W1
	0x03B06258 MOV X19, X0
	0x03B0625C TBNZ X8, 0x0, 0x3B06280
	0x03B06260 ADRP X0, 0x653000
	0x03B06264 LDR X0, [X0 + 0x308]
	0x03B06268 BL 0x1C16CF4
	0x03B0626C ADRP X0, 0x652000
	0x03B06270 LDR X0, [X0 + 0x3E8]
	0x03B06274 BL 0x1C16CF4
	0x03B06278 MOVZ W8, 0x1
	0x03B0627C STRB W8, [X21 + 0x657]
	0x03B06280 ADRP X22, 0x653000
	0x03B06284 LDR X22, [X22 + 0x308]
	0x03B06288 CMP W20, 0x400
	0x03B0628C B.LE 0x3B06298
	0x03B06290 ADD W21, W20, 0x100
	0x03B06294 B 0x3B062A8
	0x03B06298 ADD W0, W20, 0x1
	0x03B0629C MOV X1, X31
	0x03B062A0 BL 0x3C2B340
	0x03B062A4 MOV W21, W0
	0x03B062A8 LDR X0, [X22]
	0x03B062AC MOV W1, W21
	0x03B062B0 BL 0x1C16D6C
	0x03B062B4 LDR X8, [X19 + 0x368]
	0x03B062B8 CBZ X8, 0x3B063BC
	0x03B062BC ADRP X24, 0x652000
	0x03B062C0 LDR X24, [X24 + 0x3E8]
	0x03B062C4 MOV X20, X0
	0x03B062C8 MOV X22, X31
	0x03B062CC MOV X23, X31
	0x03B062D0 BIC W21, W21, W21, 0x1F
	0x03B062D4 CMP X21, X23
	0x03B062D8 B.EQ 0x3B063C0
	0x03B062DC LDR X8, [X8 + 0x50]
	0x03B062E0 CBZ X8, 0x3B063BC
	0x03B062E4 LDR W9, [X8 + 0x18]
	0x03B062E8 CMP X23, W9, SXTW
	0x03B062EC B.GE 0x3B06344
	0x03B062F0 CMP X23, X9
	0x03B062F4 B.CS 0x3B063DC
	0x03B062F8 ADD X8, X8, X22
	0x03B062FC ADD X1, X8, 0x20
	0x03B06300 ADD X0, X31, 0x60
	0x03B06304 MOVZ W2, 0x5C
	0x03B06308 BL 0x3EB1AC0
	0x03B0630C CBZ X20, 0x3B063BC
	0x03B06310 ADD X0, X31, 0x0
	0x03B06314 ADD X1, X31, 0x60
	0x03B06318 MOVZ W2, 0x5C
	0x03B0631C BL 0x3EB1AC0
	0x03B06320 LDR W8, [X20 + 0x18]
	0x03B06324 CMP X23, X8
	0x03B06328 B.CS 0x3B063DC
	0x03B0632C ADD X8, X20, X22
	0x03B06330 ADD X0, X8, 0x20
	0x03B06334 ADD X1, X31, 0x0
	0x03B06338 MOVZ W2, 0x5C
	0x03B0633C BL 0x3EB1AC0
	0x03B06340 B 0x3B063AC
	0x03B06344 CBZ X20, 0x3B063BC
	0x03B06348 LDR W8, [X20 + 0x18]
	0x03B0634C CMP X23, X8
	0x03B06350 B.CS 0x3B063DC
	0x03B06354 LDR X0, [X24]
	0x03B06358 LDR W9, [X0 + 0xE0]
	0x03B0635C CBNZ W9, 0x3B0636C
	0x03B06360 BL 0x1C16DFC
	0x03B06364 LDR X0, [X24]
	0x03B06368 LDR W8, [X20 + 0x18]
	0x03B0636C LDR X9, [X0 + 0xB8]
	0x03B06370 CMP X23, X8
	0x03B06374 LDR X10, [X9 + 0x1598]
	0x03B06378 ADD X9, X20, X22
	0x03B0637C STUR X10, [X9 + 0x6C]
	0x03B06380 B.CS 0x3B063DC
	0x03B06384 LDR X8, [X24]
	0x03B06388 LDR X8, [X8 + 0xB8]
	0x03B0638C LDR X8, [X8 + 0x15A0]
	0x03B06390 STUR X8, [X9 + 0x74]
	0x03B06394 LDR X8, [X24]
	0x03B06398 LDR X8, [X8 + 0xB8]
	0x03B0639C LDR V0, [X8 + 0x15AC]
	0x03B063A0 STR S0, [X9 + 0x4C]
	0x03B063A4 LDR V0, [X8 + 0x15A8]
	0x03B063A8 STR S0, [X9 + 0x54]
	0x03B063AC LDR X8, [X19 + 0x368]
	0x03B063B0 ADD X23, X23, 0x1
	0x03B063B4 ADD X22, X22, 0x5C
	0x03B063B8 CBNZ X8, 0x3B062D4
	0x03B063BC BL 0x1C16F20
	0x03B063C0 STR X20, [X8 + 0x50]
	0x03B063C4 LDP X20, X19, [X31 + 0xF0]
	0x03B063C8 LDP X22, X21, [X31 + 0xE0]
	0x03B063CC LDP X24, X23, [X31 + 0xD0]
	0x03B063D0 LDR X30, [X31 + 0xC0]
	0x03B063D4 ADD X31, X31, 0x100
	0x03B063D8 RET
	0x03B063DC BL 0x1C16F28
	0x03B063E0 MOV X0, X31
	0x03B063E4 RET
	0x03B063E8 RET
	0x03B063EC SUB X31, X31, 0x80
	0x03B063F0 STP D15, D14, [X31 + 0x10]
	0x03B063F4 STP D13, D12, [X31 + 0x20]
	0x03B063F8 STP D11, D10, [X31 + 0x30]
	0x03B063FC STP D9, D8, [X31 + 0x40]
	0x03B06400 STP X30, X23, [X31 + 0x50]
	0x03B06404 STP X22, X21, [X31 + 0x60]
	0x03B06408 STP X20, X19, [X31 + 0x70]
	0x03B0640C ADRP X23, 0x8DC000
	0x03B06410 LDRB W8, [X23 + 0x658]
	0x03B06414 MOV X22, X3
	0x03B06418 MOV X21, X2
	0x03B0641C MOV V15.16B, V6.16B
	0x03B06420 MOV V12.16B, V5.16B
	0x03B06424 MOV V11.16B, V4.16B
	0x03B06428 MOV V13.16B, V3.16B
	0x03B0642C MOV V9.16B, V2.16B
	0x03B06430 MOV V14.16B, V1.16B
	0x03B06434 MOV V10.16B, V0.16B
	0x03B06438 MOV W20, W1
	0x03B0643C MOV X19, X0
	0x03B06440 STR S7, [X31 + 0xC]
	0x03B06444 TBNZ X8, 0x0, 0x3B06468
	0x03B06448 ADRP X0, 0x5ED000
	0x03B0644C LDR X0, [X0 + 0x5A8]
	0x03B06450 BL 0x1C16CF4
	0x03B06454 ADRP X0, 0x652000
	0x03B06458 LDR X0, [X0 + 0x3E8]
	0x03B0645C BL 0x1C16CF4
	0x03B06460 MOVZ W8, 0x1
	0x03B06464 STRB W8, [X23 + 0x658]
	0x03B06468 LDR V0, [X19 + 0x4D8]
	0x03B0646C FCMP S0, 0x0
	0x03B06470 B.LE 0x3B064E8
	0x03B06474 ADRP X8, 0x5ED000
	0x03B06478 LDR X8, [X8 + 0x5A8]
	0x03B0647C LDR V0, [X19 + 0x4C8]
	0x03B06480 LDR V1, [X19 + 0x4D0]
	0x03B06484 LDR X0, [X8]
	0x03B06488 FSUB S8, S0, S1
	0x03B0648C LDR W8, [X0 + 0xE0]
	0x03B06490 CBNZ W8, 0x3B06498
	0x03B06494 BL 0x1C16DFC
	0x03B06498 ADRP X8, 0xFFFFFFFFFCFE4000
	0x03B0649C LDR V0, [X8 + 0x330]
	0x03B064A0 FABS S1, S8
	0x03B064A4 FCMP S1, S0
	0x03B064A8 B.LE 0x3B064E8
	0x03B064AC LDRB W8, [X19 + 0x2C4]
	0x03B064B0 CBNZ W8, 0x3B064E8
	0x03B064B4 LDRB W8, [X19 + 0x33C]
	0x03B064B8 CBNZ W8, 0x3B064E8
	0x03B064BC LDR W1, [X19 + 0x498]
	0x03B064C0 LDR W2, [X19 + 0x494]
	0x03B064C4 MOV X0, X19
	0x03B064C8 MOV V0.16B, V8.16B
	0x03B064CC BL 0x3B06080
	0x03B064D0 LDR V0, [X19 + 0x4C4]
	0x03B064D4 LDR V1, [X19 + 0x4D8]
	0x03B064D8 FSUB S0, S0, S8
	0x03B064DC FADD S1, S8, S1
	0x03B064E0 STR S0, [X19 + 0x4C4]
	0x03B064E4 STR S1, [X19 + 0x4D8]
	0x03B064E8 LDR V1, [X19 + 0x4D8]
	0x03B064EC LDR V0, [X19 + 0x4CC]
	0x03B064F0 LDR V2, [X19 + 0x4C4]
	0x03B064F4 FSUB S0, S0, S1
	0x03B064F8 FCMP S2, S0
	0x03B064FC FCSEL S3, S2, S0, MI
	0x03B06500 STR S3, [X19 + 0x4C4]
	0x03B06504 LDRB W8, [X21]
	0x03B06508 LDR V2, [X19 + 0x4C8]
	0x03B0650C CBNZ W8, 0x3B06514
	0x03B06510 STR S3, [X22]
	0x03B06514 LDRB W8, [X19 + 0x334]
	0x03B06518 CBZ W8, 0x3B06544
	0x03B0651C LDR W8, [X19 + 0x494]
	0x03B06520 LDR W9, [X19 + 0x328]
	0x03B06524 CMP W8, W9
	0x03B06528 B.GE 0x3B0653C
	0x03B0652C LDR W8, [X19 + 0x4A8]
	0x03B06530 LDR W9, [X19 + 0x330]
	0x03B06534 CMP W8, W9
	0x03B06538 B.LT 0x3B06544
	0x03B0653C MOVZ W8, 0x1
	0x03B06540 STRB W8, [X21]
	0x03B06544 LDR X11, [X19 + 0x368]
	0x03B06548 CBZ X11, 0x3B068B4
	0x03B0654C LDR X9, [X11 + 0x50]
	0x03B06550 CBZ X9, 0x3B068B4
	0x03B06554 LDRSW X10, [X19 + 0x4A8]
	0x03B06558 LDR W8, [X9 + 0x18]
	0x03B0655C CMP W10, W8
	0x03B06560 B.CS 0x3B068B8
	0x03B06564 LDR W13, [X19 + 0x498]
	0x03B06568 MOVZ W8, 0x5C
	0x03B0656C MADD X14, X10, X8, X9
	0x03B06570 MOVZ W12, 0x49C
	0x03B06574 STR W13, [X14 + 0x34]
	0x03B06578 LDR W8, [X19 + 0x49C]
	0x03B0657C MOVZ W15, 0x498
	0x03B06580 CMP W13, W8
	0x03B06584 CSEL X8, X15, X12, GT
	0x03B06588 LDR W8, [X19, X8, LSL]
	0x03B0658C STR W8, [X19 + 0x49C]
	0x03B06590 STR W8, [X14 + 0x38]
	0x03B06594 LDR W8, [X19 + 0x494]
	0x03B06598 SUB W8, W8, 0x1
	0x03B0659C BIC W8, W8, W8, 0x1F
	0x03B065A0 STR W8, [X19 + 0x4A0]
	0x03B065A4 STR W8, [X14 + 0x3C]
	0x03B065A8 LDR W15, [X19 + 0x4A4]
	0x03B065AC LDRSW X12, [X19 + 0x49C]
	0x03B065B0 SUB W13, W8, W13
	0x03B065B4 ADD W13, W13, 0x1
	0x03B065B8 CMP W15, W12
	0x03B065BC CSEL W15, W12, W15, LT
	0x03B065C0 STR W15, [X19 + 0x4A4]
	0x03B065C4 STR W15, [X14 + 0x40]
	0x03B065C8 STR W13, [X14 + 0x24]
	0x03B065CC LDR W13, [X19 + 0x4AC]
	0x03B065D0 STR W13, [X14 + 0x28]
	0x03B065D4 LDR X11, [X11 + 0x38]
	0x03B065D8 CBZ X11, 0x3B068B4
	0x03B065DC LDR W13, [X11 + 0x18]
	0x03B065E0 CMP W12, W13
	0x03B065E4 B.CS 0x3B068B8
	0x03B065E8 MOVZ W13, 0x178
	0x03B065EC MADD X11, X12, X13, X11
	0x03B065F0 LDR W11, [X11 + 0x11C]
	0x03B065F4 MOVZ W12, 0x5C
	0x03B065F8 MADD X9, X10, X12, X9
	0x03B065FC STR S0, [X9 + 0x70]
	0x03B06600 STR W11, [X9 + 0x6C]
	0x03B06604 LDR X11, [X19 + 0x368]
	0x03B06608 CBZ X11, 0x3B068B4
	0x03B0660C LDR X9, [X11 + 0x50]
	0x03B06610 CBZ X9, 0x3B068B4
	0x03B06614 LDRSW X10, [X19 + 0x4A8]
	0x03B06618 LDR W12, [X9 + 0x18]
	0x03B0661C CMP W10, W12
	0x03B06620 B.CS 0x3B068B8
	0x03B06624 LDR X11, [X11 + 0x38]
	0x03B06628 CBZ X11, 0x3B068B4
	0x03B0662C LDRSW X12, [X19 + 0x4A4]
	0x03B06630 LDR W13, [X11 + 0x18]
	0x03B06634 CMP W12, W13
	0x03B06638 B.CS 0x3B068B8
	0x03B0663C MOVZ W13, 0x178
	0x03B06640 MADD X11, X12, X13, X11
	0x03B06644 LDR W11, [X11 + 0x128]
	0x03B06648 MOVZ W12, 0x5C
	0x03B0664C FSUB S1, S2, S1
	0x03B06650 MADD X9, X10, X12, X9
	0x03B06654 STR W11, [X9 + 0x74]
	0x03B06658 STR S1, [X9 + 0x78]
	0x03B0665C LDR X11, [X19 + 0x368]
	0x03B06660 CBZ X11, 0x3B068B4
	0x03B06664 LDR X9, [X11 + 0x50]
	0x03B06668 CBZ X9, 0x3B068B4
	0x03B0666C LDRSW X10, [X19 + 0x4A8]
	0x03B06670 LDR W12, [X9 + 0x18]
	0x03B06674 CMP W10, W12
	0x03B06678 B.CS 0x3B068B8
	0x03B0667C MOVZ W12, 0x5C
	0x03B06680 MADD X12, X10, X12, X9
	0x03B06684 LDR V2, [X12 + 0x74]
	0x03B06688 STR S15, [X12 + 0x5C]
	0x03B0668C STR S2, [X12 + 0x44]
	0x03B06690 LDR X14, [X19 + 0x100]
	0x03B06694 CBZ X14, 0x3B068B4
	0x03B06698 LDR X11, [X11 + 0x38]
	0x03B0669C CBZ X11, 0x3B068B4
	0x03B066A0 LDRSW X13, [X19 + 0x4A4]
	0x03B066A4 LDR W12, [X11 + 0x18]
	0x03B066A8 CMP W13, W12
	0x03B066AC B.CS 0x3B068B8
	0x03B066B0 LDR V2, [X14 + 0x1AC]
	0x03B066B4 LDR V3, [X19 + 0x2AC]
	0x03B066B8 MOVZ W14, 0x178
	0x03B066BC LDR V6, [X19 + 0x2D4]
	0x03B066C0 FADD S2, S2, S12
	0x03B066C4 MADD X13, X13, X14, X11
	0x03B066C8 FADD S2, S2, S11
	0x03B066CC FMUL S4, S14, S13
	0x03B066D0 LDR V5, [X13 + 0x144]
	0x03B066D4 LDRB W13, [X19 + 0xF0]
	0x03B066D8 FMUL S2, S2, S9
	0x03B066DC FMOV S7, 1
	0x03B066E0 FADD S2, S4, S2
	0x03B066E4 FSUB S6, S7, S6
	0x03B066E8 FSUB S2, S2, S3
	0x03B066EC FMUL S2, S6, S2
	0x03B066F0 CMP W13, 0x0
	0x03B066F4 FNEG S3, S2
	0x03B066F8 MOVZ W13, 0x5C
	0x03B066FC FCSEL S2, S3, S2, EQ
	0x03B06700 MADD X13, X10, X13, X9
	0x03B06704 FADD S2, S5, S2
	0x03B06708 CMP W8, W12
	0x03B0670C STR S2, [X13 + 0x58]
	0x03B06710 B.CS 0x3B068B8
	0x03B06714 LDR V8, [X31 + 0xC]
	0x03B06718 NOP
	0x03B0671C UMADDL X8, X8, X14, X11
	0x03B06720 FSUB S4, S1, S0
	0x03B06724 STR S2, [X8 + 0x144]
	0x03B06728 FMUL S2, S10, S8
	0x03B0672C FADD S2, S2, S4
	0x03B06730 LDR V4, [X19 + 0x4D8]
	0x03B06734 MOVZ W11, 0x5C
	0x03B06738 FMOV S3, W31
	0x03B0673C MADD X8, X10, X11, X9
	0x03B06740 STP S2, S1, [X8 + 0x48]
	0x03B06744 FSUB S1, S3, S4
	0x03B06748 STP S1, S0, [X8 + 0x50]
	0x03B0674C LDR W8, [X19 + 0x494]
	0x03B06750 ADRP X21, 0x652000
	0x03B06754 LDR X21, [X21 + 0x3E8]
	0x03B06758 STR W31, [X19 + 0x4AC]
	0x03B0675C STR W8, [X19 + 0x498]
	0x03B06760 LDR X0, [X21]
	0x03B06764 LDR W9, [X0 + 0xE0]
	0x03B06768 CBNZ W9, 0x3B06778
	0x03B0676C BL 0x1C16DFC
	0x03B06770 LDR W8, [X19 + 0x494]
	0x03B06774 LDR X0, [X21]
	0x03B06778 LDR X9, [X0 + 0xB8]
	0x03B0677C SUB W3, W8, 0x1
	0x03B06780 MOV X0, X19
	0x03B06784 MOV W2, W20
	0x03B06788 ADD X1, X9, 0x410
	0x03B0678C BL 0x3B05DB4
	0x03B06790 LDR W9, [X19 + 0x4A8]
	0x03B06794 LDR X8, [X19 + 0x368]
	0x03B06798 ADD W1, W9, 0x1
	0x03B0679C STR W1, [X19 + 0x4A8]
	0x03B067A0 CBZ X8, 0x3B068B4
	0x03B067A4 LDR X8, [X8 + 0x50]
	0x03B067A8 CBZ X8, 0x3B068B4
	0x03B067AC LDR W8, [X8 + 0x18]
	0x03B067B0 CMP W1, W8
	0x03B067B4 B.LT 0x3B067C0
	0x03B067B8 MOV X0, X19
	0x03B067BC BL 0x3B06238
	0x03B067C0 ADRP X8, 0xFFFFFFFFFCFE4000
	0x03B067C4 LDR V0, [X19 + 0x2C0]
	0x03B067C8 LDR V1, [X8 + 0x214]
	0x03B067CC FCMP S0, S1
	0x03B067D0 B.NE 0x3B06844
	0x03B067D4 LDR X8, [X19 + 0x368]
	0x03B067D8 CBZ X8, 0x3B068B4
	0x03B067DC LDR X8, [X8 + 0x38]
	0x03B067E0 CBZ X8, 0x3B068B4
	0x03B067E4 LDRSW X9, [X19 + 0x494]
	0x03B067E8 LDR W10, [X8 + 0x18]
	0x03B067EC CMP W9, W10
	0x03B067F0 B.CS 0x3B068B8
	0x03B067F4 LDR V0, [X19 + 0x4CC]
	0x03B067F8 MOVZ W10, 0x178
	0x03B067FC LDR V1, [X19 + 0x2BC]
	0x03B06800 FMOV S3, W31
	0x03B06804 NOP
	0x03B06808 MADD X8, X9, X10, X8
	0x03B0680C FSUB S0, S3, S0
	0x03B06810 LDR V3, [X8 + 0x154]
	0x03B06814 LDR V2, [X19 + 0x2B8]
	0x03B06818 LDR V4, [X19 + 0x4D8]
	0x03B0681C FADD S1, S1, S8
	0x03B06820 FMUL S1, S1, S10
	0x03B06824 FADD S0, S3, S0
	0x03B06828 FMUL S2, S2, S9
	0x03B0682C FADD S0, S0, S1
	0x03B06830 FADD S0, S2, S0
	0x03B06834 FADD S0, S4, S0
	0x03B06838 STR S0, [X19 + 0x4D8]
	0x03B0683C STR S3, [X19 + 0x4D0]
	0x03B06840 B 0x3B0685C
	0x03B06844 LDR V1, [X19 + 0x2B8]
	0x03B06848 LDR V2, [X19 + 0x4D8]
	0x03B0684C FMUL S1, S1, S9
	0x03B06850 FADD S0, S0, S1
	0x03B06854 FADD S0, S2, S0
	0x03B06858 STR S0, [X19 + 0x4D8]
	0x03B0685C LDR X0, [X21]
	0x03B06860 LDR W8, [X0 + 0xE0]
	0x03B06864 CBNZ W8, 0x3B06870
	0x03B06868 BL 0x1C16DFC
	0x03B0686C LDR X0, [X21]
	0x03B06870 LDR X8, [X0 + 0xB8]
	0x03B06874 LDR V0, [X19 + 0x40C]
	0x03B06878 FMOV S2, W31
	0x03B0687C LDP X22, X21, [X31 + 0x60]
	0x03B06880 LDR V1, [X8 + 0x15A8]
	0x03B06884 FADD S0, S0, S2
	0x03B06888 STR S0, [X19 + 0x640]
	0x03B0688C LDP X30, X23, [X31 + 0x50]
	0x03B06890 UNIMPLEMENTED
	0x03B06894 STR D1, [X19 + 0x4C8]
	0x03B06898 LDP X20, X19, [X31 + 0x70]
	0x03B0689C LDP D9, D8, [X31 + 0x40]
	0x03B068A0 LDP D11, D10, [X31 + 0x30]
	0x03B068A4 LDP D13, D12, [X31 + 0x20]
	0x03B068A8 LDP D15, D14, [X31 + 0x10]
	0x03B068AC ADD X31, X31, 0x80
	0x03B068B0 RET
	0x03B068B4 BL 0x1C16F20
	0x03B068B8 BL 0x1C16F28
	0x03B068BC SUB X31, X31, 0x90
	0x03B068C0 STP D13, D12, [X31 + 0x10]
	0x03B068C4 STP D11, D10, [X31 + 0x20]
	0x03B068C8 STP D9, D8, [X31 + 0x30]
	0x03B068CC STR X30, [X31 + 0x40]
	0x03B068D0 STP X26, X25, [X31 + 0x50]
	0x03B068D4 STP X24, X23, [X31 + 0x60]
	0x03B068D8 STP X22, X21, [X31 + 0x70]
	0x03B068DC STP X20, X19, [X31 + 0x80]
	0x03B068E0 ADRP X21, 0x8DC000
	0x03B068E4 LDRB W8, [X21 + 0x65B]
	0x03B068E8 MOV X20, X1
	0x03B068EC MOV V9.16B, V1.16B
	0x03B068F0 MOV V8.16B, V0.16B
	0x03B068F4 MOV X19, X0
	0x03B068F8 UBFM X9, X1, 0x18, 0x3F
	0x03B068FC STRB W9, [X31 + 0x4C]
	0x03B06900 TBNZ X8, 0x0, 0x3B06924
	0x03B06904 ADRP X0, 0x615000
	0x03B06908 LDR X0, [X0 + 0x608]
	0x03B0690C BL 0x1C16CF4
	0x03B06910 ADRP X0, 0x5ED000
	0x03B06914 LDR X0, [X0 + 0x598]
	0x03B06918 BL 0x1C16CF4
	0x03B0691C MOVZ W8, 0x1
	0x03B06920 STRB W8, [X21 + 0x65B]
	0x03B06924 STP X31, X31, [X31]
	0x03B06928 LDR X8, [X19 + 0x368]
	0x03B0692C CBZ X8, 0x3B0742C
	0x03B06930 LDR X8, [X8 + 0x38]
	0x03B06934 CBZ X8, 0x3B0742C
	0x03B06938 LDRSW X9, [X19 + 0x494]
	0x03B0693C LDR W10, [X8 + 0x18]
	0x03B06940 CMP W9, W10
	0x03B06944 B.CS 0x3B07430
	0x03B06948 MOVZ W10, 0x178
	0x03B0694C MADD X8, X9, X10, X8
	0x03B06950 ADD X9, X8, 0x11C
	0x03B06954 LDR X10, [X9]
	0x03B06958 ADD X25, X19, 0x368
	0x03B0695C STR X10, [X8 + 0x70]
	0x03B06960 LDR W9, [X9 + 0x8]
	0x03B06964 STR W9, [X8 + 0x78]
	0x03B06968 LDR X8, [X25]
	0x03B0696C CBZ X8, 0x3B0742C
	0x03B06970 LDR X8, [X8 + 0x38]
	0x03B06974 CBZ X8, 0x3B0742C
	0x03B06978 ADD X26, X19, 0x494
	0x03B0697C LDRSW X9, [X26]
	0x03B06980 LDR W10, [X8 + 0x18]
	0x03B06984 CMP W9, W10
	0x03B06988 B.CS 0x3B07430
	0x03B0698C MOVZ W10, 0x178
	0x03B06990 MADD X8, X9, X10, X8
	0x03B06994 LDR X9, [X8 + 0x110]
	0x03B06998 LDR W10, [X8 + 0x118]
	0x03B0699C STR X9, [X8 + 0x98]
	0x03B069A0 STR W10, [X8 + 0xA0]
	0x03B069A4 LDR X8, [X25]
	0x03B069A8 CBZ X8, 0x3B0742C
	0x03B069AC LDR X8, [X8 + 0x38]
	0x03B069B0 CBZ X8, 0x3B0742C
	0x03B069B4 LDRSW X9, [X26]
	0x03B069B8 LDR W10, [X8 + 0x18]
	0x03B069BC CMP W9, W10
	0x03B069C0 B.CS 0x3B07430
	0x03B069C4 MOVZ W10, 0x178
	0x03B069C8 MADD X8, X9, X10, X8
	0x03B069CC LDR X9, [X8 + 0x128]
	0x03B069D0 LDR W10, [X8 + 0x130]
	0x03B069D4 STR X9, [X8 + 0xC0]
	0x03B069D8 STR W10, [X8 + 0xC8]
	0x03B069DC LDR X8, [X25]
	0x03B069E0 CBZ X8, 0x3B0742C
	0x03B069E4 LDR X8, [X8 + 0x38]
	0x03B069E8 CBZ X8, 0x3B0742C
	0x03B069EC LDRSW X9, [X26]
	0x03B069F0 LDR W10, [X8 + 0x18]
	0x03B069F4 CMP W9, W10
	0x03B069F8 B.CS 0x3B07430
	0x03B069FC MOVZ W10, 0x178
	0x03B06A00 MADD X8, X9, X10, X8
	0x03B06A04 ADD X9, X8, 0x134
	0x03B06A08 LDR X10, [X9]
	0x03B06A0C ADRP X23, 0x5ED000
	0x03B06A10 STR X10, [X8 + 0xE8]
	0x03B06A14 LDR W9, [X9 + 0x8]
	0x03B06A18 STR W9, [X8 + 0xF0]
	0x03B06A1C LDRB W8, [X19 + 0x147]
	0x03B06A20 LDRB W9, [X31 + 0x4C]
	0x03B06A24 CMP W8, W20, LSR
	0x03B06A28 CSEL W22, W8, W9, CC
	0x03B06A2C STRB W22, [X31 + 0x4C]
	0x03B06A30 LDRB W8, [X19 + 0x160]
	0x03B06A34 LDR X23, [X23 + 0x598]
	0x03B06A38 CBZ W8, 0x3B06BE0
	0x03B06A3C LDRB W8, [X19 + 0x1D4]
	0x03B06A40 CBNZ W8, 0x3B06A50
	0x03B06A44 LDR W8, [X19 + 0x4F8]
	0x03B06A48 CMP W8, 0x2
	0x03B06A4C B.GE 0x3B06BE0
	0x03B06A50 LDR X0, [X23]
	0x03B06A54 LDR X21, [X19 + 0x1A8]
	0x03B06A58 LDR W8, [X0 + 0xE0]
	0x03B06A5C CBNZ W8, 0x3B06A64
	0x03B06A60 BL 0x1C16DFC
	0x03B06A64 MOV X0, X21
	0x03B06A68 MOV X1, X31
	0x03B06A6C MOV X2, X31
	0x03B06A70 BL 0x3C354F8
	0x03B06A74 LDR X8, [X25]
	0x03B06A78 CBZ X8, 0x3B0742C
	0x03B06A7C LDR X21, [X8 + 0x38]
	0x03B06A80 CBZ X21, 0x3B0742C
	0x03B06A84 LDRSW X24, [X26]
	0x03B06A88 LDR W8, [X21 + 0x18]
	0x03B06A8C CMP W24, W8
	0x03B06A90 B.CS 0x3B07430
	0x03B06A94 TBZ X0, 0x0, 0x3B06CB8
	0x03B06A98 LDR X8, [X19 + 0x1A8]
	0x03B06A9C CBZ X8, 0x3B0742C
	0x03B06AA0 LDP S0, S1, [X8 + 0x3C]
	0x03B06AA4 LDP S2, S3, [X8 + 0x44]
	0x03B06AA8 AND W8, W20, 0xFF
	0x03B06AAC MOVZ W10, 0x437F0000
	0x03B06AB0 UBFM W9, W20, 0x8, 0xF
	0x03B06AB4 UCVTF S4, W8
	0x03B06AB8 UBFM W8, W20, 0x10, 0x17
	0x03B06ABC FMOV S5, W10
	0x03B06AC0 AND W10, W22, 0xFF
	0x03B06AC4 UCVTF S6, W9
	0x03B06AC8 UCVTF S7, W8
	0x03B06ACC UCVTF S16, W10

ISIL:
	001 Move [X31-160], D15
	002 Move [X31-152], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X29
	010 Move [X31+72], X30
	011 Move [X31+80], X28
	012 Move [X31+88], X27
	013 Move [X31+96], X26
	014 Move [X31+104], X25
	015 Move [X31+112], X24
	016 Move [X31+120], X23
	017 Move [X31+128], X22
	018 Move [X31+136], X21
	019 Move [X31+144], X20
	020 Move [X31+152], X19
	021 Subtract X31, X31, 800
	022 Move X19, 0x8E2000
	023 Move X23, 0x658000
	024 Move W8, [X19+1642]
	025 Move X23, [X23+1000]
	026 Move X24, X3
	027 Move W20, W2
	028 Move X22, X1
	029 Move X21, X0
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {141}
	034 Move X0, 0x5F3000
	035 Move X0, [X0+2600]
	036 Call 0x1C17CF4
	037 Move X0, 0x659000
	038 Move X0, [X0+552]
	039 Call 0x1C17CF4
	040 Move X0, 0x5F3000
	041 Move X0, [X0+1432]
	042 Call 0x1C17CF4
	043 Move X0, 0x64D000
	044 Move X0, [X0+2776]
	045 Call 0x1C17CF4
	046 Move X0, 0x659000
	047 Move X0, [X0+560]
	048 Call 0x1C17CF4
	049 Move X0, 0x658000
	050 Move X0, [X0+1472]
	051 Call 0x1C17CF4
	052 Move X0, 0x659000
	053 Move X0, [X0+568]
	054 Call 0x1C17CF4
	055 Move X0, 0x658000
	056 Move X0, [X0+848]
	057 Call 0x1C17CF4
	058 Move X0, 0x659000
	059 Move X0, [X0+576]
	060 Call 0x1C17CF4
	061 Move X0, 0x658000
	062 Move X0, [X0+872]
	063 Call 0x1C17CF4
	064 Move X0, 0x659000
	065 Move X0, [X0+584]
	066 Call 0x1C17CF4
	067 Move X0, 0x659000
	068 Move X0, [X0+592]
	069 Call 0x1C17CF4
	070 Move X0, 0x659000
	071 Move X0, [X0+600]
	072 Call 0x1C17CF4
	073 Move X0, 0x659000
	074 Move X0, [X0+608]
	075 Call 0x1C17CF4
	076 Move X0, 0x659000
	077 Move X0, [X0+616]
	078 Call 0x1C17CF4
	079 Move X0, 0x659000
	080 Move X0, [X0+624]
	081 Call 0x1C17CF4
	082 Move X0, 0x659000
	083 Move X0, [X0+632]
	084 Call 0x1C17CF4
	085 Move X0, 0x659000
	086 Move X0, [X0+640]
	087 Call 0x1C17CF4
	088 Move X0, 0x659000
	089 Move X0, [X0+648]
	090 Call 0x1C17CF4
	091 Move X0, 0x659000
	092 Move X0, [X0+656]
	093 Call 0x1C17CF4
	094 Move X0, 0x659000
	095 Move X0, [X0+664]
	096 Call 0x1C17CF4
	097 Move X0, 0x659000
	098 Move X0, [X0+672]
	099 Call 0x1C17CF4
	100 Move X0, 0x659000
	101 Move X0, [X0+680]
	102 Call 0x1C17CF4
	103 Move X0, 0x659000
	104 Move X0, [X0+688]
	105 Call 0x1C17CF4
	106 Move X0, 0x659000
	107 Move X0, [X0+696]
	108 Call 0x1C17CF4
	109 Move X0, 0x659000
	110 Move X0, [X0+704]
	111 Call 0x1C17CF4
	112 Move X0, 0x659000
	113 Move X0, [X0+712]
	114 Call 0x1C17CF4
	115 Move X0, 0x659000
	116 Move X0, [X0+720]
	117 Call 0x1C17CF4
	118 Move X0, 0x659000
	119 Move X0, [X0+728]
	120 Call 0x1C17CF4
	121 Move X0, 0x659000
	122 Move X0, [X0+736]
	123 Call 0x1C17CF4
	124 Move X0, 0x658000
	125 Move X0, [X0+1000]
	126 Call 0x1C17CF4
	127 Move X0, 0x659000
	128 Move X0, [X0+744]
	129 Call 0x1C17CF4
	130 Move X0, 0x659000
	131 Move X0, [X0+752]
	132 Call 0x1C17CF4
	133 Move X0, 0x659000
	134 Move X0, [X0+760]
	135 Call 0x1C17CF4
	136 Move X0, 0x659000
	137 Move X0, [X0+768]
	138 Call 0x1C17CF4
	139 Move W8, 1
	140 Move [X19+1642], W8
	141 Move X0, [X23]
	142 NotImplemented "Instruction MOVI not yet implemented."
	143 Move [X31+792], X31
	144 Move [X31+784], X31
	145 Move [X31+768], X31
	146 Move [X31+760], X31
	147 Move [X31+776], W31
	148 Move [X31+752], X31
	149 Move [X31+744], X31
	150 Move [X31+736], X31
	151 Move [X31+728], X31
	152 Move [X31+724], W31
	153 Move [X31+688], V0
	154 Move [X31+696], V0
	155 Move [X31+656], V0
	156 Move [X31+664], V0
	157 Move [X31+624], V0
	158 Move [X31+632], V0
	159 Move [X31+616], X31
	160 Move W8, [X0+224]
	161 Compare W8, 0
	162 JumpIfNotEqual {165}
	163 Call 0x1C17DFC
	164 Move X0, [X23]
	165 Move X8, [X0+184]
	166 Move X8, [X8+136]
	167 Compare X8, 0
	168 JumpIfEqual {5656}
	169 Move W9, [X8+24]
	170 Compare W9, 0
	171 JumpIfEqual {5630}
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Move [X8+32], X31
	174 Move [X8+40], X31
	175 Move [X8+48], X31
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move [X8+56], W31
	178 NotImplemented "Instruction CMP not yet implemented."
	179 Move [X8+80], W31
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move [X8+104], W31
	182 Move [X8+128], W31
	183 Move [X24], W20
	184 Compare X22, 0
	185 JumpIfEqual {5656}
	186 Move W8, [X22+24]
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Move [X31+24], X24
	189 Move [X31+32], X21
	190 Move W24, W31
	191 Move W23, W31
	192 Move W26, W31
	193 Move W19, W31
	194 Move X25, X31
	195 Move W27, W20
	196 Move W28, 12
	197 Move [X31+44], W31
	198 Add X29, X27, X25
	199 NotImplemented "Instruction CMP not yet implemented."
	200 NotImplemented "Instruction SMADDL not yet implemented."
	201 Add X21, X21, 32
	202 Move W8, [X21]
	203 Compare W8, 0
	204 JumpIfEqual {5700}
	205 Move W8, [X0+224]
	206 Compare W8, 0
	207 JumpIfNotEqual {212}
	208 Call 0x1C17DFC
	209 Move X8, 0x658000
	210 Move X8, [X8+1000]
	211 Move X0, [X8]
	212 Move X8, [X0+184]
	213 Move X9, [X8+128]
	214 Compare X9, 0
	215 JumpIfEqual {5656}
	216 NotImplemented "Instruction LDRSW not yet implemented."
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Move W10, [X22+24]
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Move W29, [X21]
	221 NotImplemented "Instruction CMP not yet implemented."
	222 NotImplemented "Instruction CMP not yet implemented."
	223 Move W8, [X0+224]
	224 Compare W8, 0
	225 JumpIfNotEqual {230}
	226 Call 0x1C17DFC
	227 Move X8, 0x658000
	228 Move X8, [X8+1000]
	229 Move X0, [X8]
	230 Move X8, [X0+184]
	231 Move X8, [X8+128]
	232 Compare X8, 0
	233 JumpIfEqual {5656}
	234 Move W9, [X8+24]
	235 NotImplemented "Instruction CMP not yet implemented."
	236 And W9, W19, 255
	237 Add X8, X8, X25
	238 NotImplemented "Instruction CMP not yet implemented."
	239 NotImplemented "Instruction STRH not yet implemented."
	240 NotImplemented "Instruction CMP not yet implemented."
	241 Move W19, 1
	242 Move X11, -49713152
	243 Move W8, W23
	244 Add X11, X11, 3214
	245 NotImplemented "Instruction ADR not yet implemented."
	246 Move W10, [X11]
	247 Add X9, X9, X10
	248 CallNoReturn X9
	249 NotImplemented "Instruction CMP not yet implemented."
	250 Move W8, W29
	251 Move W9, 1
	252 NotImplemented "Instruction LSLV not yet implemented."
	253 Move X9, 0x6800
	254 And X31, X8, X9
	255 Move W8, [X0+224]
	256 Compare W8, 0
	257 JumpIfNotEqual {262}
	258 Call 0x1C17DFC
	259 Move X8, 0x658000
	260 Move X8, [X8+1000]
	261 Move X0, [X8]
	262 Move X8, [X0+184]
	263 Move X8, [X8+136]
	264 Compare X8, 0
	265 JumpIfEqual {5656}
	266 Move W9, [X8+24]
	267 NotImplemented "Instruction CMP not yet implemented."
	268 Move W9, 24
	269 NotImplemented "Instruction SMADDL not yet implemented."
	270 Move W9, [X8+48]
	271 Move W23, 1
	272 Move [X31+44], W31
	273 Add W9, W9, 1
	274 Move [X8+40], W23
	275 Move [X8+44], W25
	276 Move [X8+48], W9
	277 Move W19, 1
	278 NotImplemented "Instruction CMP not yet implemented."
	279 Move W8, [X0+224]
	280 Compare W8, 0
	281 JumpIfNotEqual {286}
	282 Call 0x1C17DFC
	283 Move X8, 0x658000
	284 Move X8, [X8+1000]
	285 Move X0, [X8]
	286 Move X8, [X0+184]
	287 Move X8, [X8+136]
	288 Compare X8, 0
	289 JumpIfEqual {5656}
	290 Move W9, [X8+24]
	291 Add W26, W26, 1
	292 NotImplemented "Instruction CMP not yet implemented."
	293 Move W9, 24
	294 NotImplemented "Instruction SMADDL not yet implemented."
	295 Move W23, W31
	296 Move [X31+44], W31
	297 Move [X8+32], X31
	298 Move [X8+40], X31
	299 Move [X8+48], X31
	300 NotImplemented "Instruction CMP not yet implemented."
	301 NotImplemented "Instruction CMP not yet implemented."
	302 NotImplemented "Instruction CMP not yet implemented."
	303 Move W8, [X0+224]
	304 Compare W8, 0
	305 JumpIfNotEqual {310}
	306 Call 0x1C17DFC
	307 Move X8, 0x658000
	308 Move X8, [X8+1000]
	309 Move X0, [X8]
	310 Move X8, [X0+184]
	311 Move X8, [X8+136]
	312 Compare X8, 0
	313 JumpIfEqual {5656}
	314 Move W9, [X8+24]
	315 NotImplemented "Instruction CMP not yet implemented."
	316 Move W19, 2
	317 NotImplemented "Instruction CMP not yet implemented."
	318 Move W8, [X0+224]
	319 Compare W8, 0
	320 JumpIfNotEqual {325}
	321 Call 0x1C17DFC
	322 Move X8, 0x658000
	323 Move X8, [X8+1000]
	324 Move X0, [X8]
	325 Move X8, [X0+184]
	326 Move X8, [X8+136]
	327 Compare X8, 0
	328 JumpIfEqual {5656}
	329 Move W9, [X8+24]
	330 Add W26, W26, 1
	331 NotImplemented "Instruction CMP not yet implemented."
	332 Move [X31+44], W31
	333 Move W8, [X0+224]
	334 Compare W8, 0
	335 JumpIfNotEqual {340}
	336 Call 0x1C17DFC
	337 Move X8, 0x658000
	338 Move X8, [X8+1000]
	339 Move X0, [X8]
	340 Move X8, [X0+184]
	341 Move X8, [X8+136]
	342 Compare X8, 0
	343 JumpIfEqual {5656}
	344 Move W9, [X8+24]
	345 NotImplemented "Instruction CMP not yet implemented."
	346 Move W9, 24
	347 NotImplemented "Instruction SMADDL not yet implemented."
	348 Move W9, [X8+36]
	349 Move W10, [X8+48]
	350 Move W19, 1
	351 Move W23, 2
	352 Add W9, W9, W9
	353 Add W10, W10, 1
	354 Xor W9, W9, W29
	355 Move [X8+48], W10
	356 Move [X8+36], W9
	357 NotImplemented "Instruction CMP not yet implemented."
	358 NotImplemented "Instruction CMP not yet implemented."
	359 Move W8, [X0+224]
	360 Compare W8, 0
	361 JumpIfNotEqual {366}
	362 Call 0x1C17DFC
	363 Move X8, 0x658000
	364 Move X8, [X8+1000]
	365 Move X0, [X8]
	366 Move X8, [X0+184]
	367 Move X8, [X8+136]
	368 Compare X8, 0
	369 JumpIfEqual {5656}
	370 Move W9, [X8+24]
	371 NotImplemented "Instruction CMP not yet implemented."
	372 Move W19, 1
	373 Move W8, [X0+224]
	374 Compare W8, 0
	375 JumpIfNotEqual {380}
	376 Call 0x1C17DFC
	377 Move X8, 0x658000
	378 Move X8, [X8+1000]
	379 Move X0, [X8]
	380 Move X8, [X0+184]
	381 Move X8, [X8+136]
	382 Compare X8, 0
	383 JumpIfEqual {5656}
	384 Move W9, [X8+24]
	385 NotImplemented "Instruction CMP not yet implemented."
	386 Move W9, 24
	387 NotImplemented "Instruction SMADDL not yet implemented."
	388 Move W9, [X8+48]
	389 Move W19, 1
	390 Move W23, 4
	391 Move W8, [X0+224]
	392 Compare W8, 0
	393 JumpIfNotEqual {398}
	394 Call 0x1C17DFC
	395 Move X8, 0x658000
	396 Move X8, [X8+1000]
	397 Move X0, [X8]
	398 Move X8, [X0+184]
	399 Move X8, [X8+136]
	400 Compare X8, 0
	401 JumpIfEqual {5656}
	402 Move W9, [X8+24]
	403 NotImplemented "Instruction CMP not yet implemented."
	404 Move W19, W31
	405 Move W9, 24
	406 NotImplemented "Instruction SMADDL not yet implemented."
	407 Move [X8+52], W19
	408 Move W8, [X0+224]
	409 Compare W8, 0
	410 JumpIfNotEqual {415}
	411 Call 0x1C17DFC
	412 Move X8, 0x658000
	413 Move X8, [X8+1000]
	414 Move X0, [X8]
	415 Move X8, [X0+184]
	416 Move X8, [X8+136]
	417 Compare X8, 0
	418 JumpIfEqual {5656}
	419 Move W9, [X8+24]
	420 Add W26, W26, 1
	421 Move [X31+44], W19
	422 NotImplemented "Instruction CMP not yet implemented."
	423 Move W9, 24
	424 NotImplemented "Instruction SMADDL not yet implemented."
	425 Move W23, W31
	426 Move [X8+32], X31
	427 Move [X8+40], X31
	428 Move [X8+48], X31
	429 Move W19, 2
	430 Subtract W8, W29, 48
	431 NotImplemented "Instruction CMP not yet implemented."
	432 NotImplemented "Instruction CMP not yet implemented."
	433 NotImplemented "Instruction CMP not yet implemented."
	434 Move W8, [X0+224]
	435 Compare W8, 0
	436 JumpIfNotEqual {441}
	437 Call 0x1C17DFC
	438 Move X8, 0x658000
	439 Move X8, [X8+1000]
	440 Move X0, [X8]
	441 Move X8, [X0+184]
	442 Move X8, [X8+136]
	443 Compare X8, 0
	444 JumpIfEqual {5656}
	445 Move W9, [X8+24]
	446 NotImplemented "Instruction CMP not yet implemented."
	447 Move W9, 24
	448 NotImplemented "Instruction SMADDL not yet implemented."
	449 Move W9, [X8+48]
	450 Move [X31+44], W31
	451 Move W23, 4
	452 Move W8, [X0+224]
	453 Compare W8, 0
	454 JumpIfNotEqual {459}
	455 Call 0x1C17DFC
	456 Move X8, 0x658000
	457 Move X8, [X8+1000]
	458 Move X0, [X8]
	459 Move X8, [X0+184]
	460 Move X8, [X8+136]
	461 Compare X8, 0
	462 JumpIfEqual {5656}
	463 Move W9, [X8+24]
	464 NotImplemented "Instruction CMP not yet implemented."
	465 Move W9, 24
	466 NotImplemented "Instruction SMADDL not yet implemented."
	467 Move W9, [X8+48]
	468 Move W23, 1
	469 Move W19, 1
	470 Add W9, W9, 1
	471 Move [X8+48], W9
	472 NotImplemented "Instruction CMP not yet implemented."
	473 NotImplemented "Instruction CSINC not yet implemented."
	474 NotImplemented "Instruction CMP not yet implemented."
	475 And W31, W19, 255
	476 Move TEMP, X24
	477 And TEMP, TEMP, 1
	478 Compare TEMP, 1
	479 JumpIfEqual {5700}
	480 Move W8, [X0+224]
	481 Compare W8, 0
	482 JumpIfNotEqual {487}
	483 Call 0x1C17DFC
	484 Move X8, 0x658000
	485 Move X8, [X8+1000]
	486 Move X0, [X8]
	487 Move X8, [X0+184]
	488 Move X8, [X8+136]
	489 Compare X8, 0
	490 JumpIfEqual {5656}
	491 Move W9, [X8+24]
	492 Add W26, W26, 1
	493 NotImplemented "Instruction CMP not yet implemented."
	494 Move W9, 24
	495 Move W23, W31
	496 NotImplemented "Instruction SMADDL not yet implemented."
	497 Move W24, 1
	498 Move [X31+44], W31
	499 Move [X8+32], X31
	500 Move [X8+40], X31
	501 Move [X8+48], X31
	502 Move W19, W31
	503 And W8, W19, 255
	504 NotImplemented "Instruction CMP not yet implemented."
	505 Compare W8, 0
	506 JumpIfNotEqual {532}
	507 Move W8, [X0+224]
	508 Compare W8, 0
	509 JumpIfNotEqual {514}
	510 Call 0x1C17DFC
	511 Move X8, 0x658000
	512 Move X8, [X8+1000]
	513 Move X0, [X8]
	514 Move X8, [X0+184]
	515 Move X8, [X8+136]
	516 Compare X8, 0
	517 JumpIfEqual {5656}
	518 Move W9, [X8+24]
	519 NotImplemented "Instruction CMP not yet implemented."
	520 Move W9, 24
	521 NotImplemented "Instruction SMADDL not yet implemented."
	522 Move W9, [X8+32]
	523 Move W19, W31
	524 Move W10, W9
	525 ShiftRight W10, 29
	526 And W10, W10, 0xFFFFFFF
	527 Subtract W9, W10, W9
	528 Add W9, W9, W29
	529 Move [X8+32], W9
	530 NotImplemented "Instruction CMP not yet implemented."
	531 Move W19, 2
	532 Move W8, [X22+24]
	533 Add X25, X25, 1
	534 Add W9, W27, W25
	535 NotImplemented "Instruction CMP not yet implemented."
	536 Move W8, [X0+224]
	537 Compare W8, 0
	538 JumpIfNotEqual {543}
	539 Call 0x1C17DFC
	540 Move X8, 0x658000
	541 Move X8, [X8+1000]
	542 Move X0, [X8]
	543 Move X8, [X0+184]
	544 Move X8, [X8+136]
	545 Compare X8, 0
	546 JumpIfEqual {5656}
	547 Move W9, [X8+24]
	548 NotImplemented "Instruction CMP not yet implemented."
	549 Move W9, 24
	550 NotImplemented "Instruction SMADDL not yet implemented."
	551 Move W23, 2
	552 Add W9, W25, 1
	553 Move [X31+44], W31
	554 Move [X8+40], W23
	555 Move [X8+44], W9
	556 Move W8, [X0+224]
	557 Compare W8, 0
	558 JumpIfNotEqual {563}
	559 Call 0x1C17DFC
	560 Move X8, 0x658000
	561 Move X8, [X8+1000]
	562 Move X0, [X8]
	563 Move X8, [X0+184]
	564 Move X8, [X8+136]
	565 Compare X8, 0
	566 JumpIfEqual {5656}
	567 Move W9, [X8+24]
	568 NotImplemented "Instruction CMP not yet implemented."
	569 Move W9, 24
	570 NotImplemented "Instruction SMADDL not yet implemented."
	571 Move W9, [X8+36]
	572 Move W10, [X8+48]
	573 Move W23, 2
	574 Move [X31+44], W31
	575 Add W9, W9, W9
	576 Add W10, W10, 1
	577 Xor W9, W9, W29
	578 Move [X8+44], W25
	579 Move [X8+48], W10
	580 Move [X8+36], W9
	581 Move [X8+40], W23
	582 Move W19, 1
	583 Move X11, [X31+24]
	584 Add W10, W20, W25
	585 Move [X11], W10
	586 Move W10, [X0+224]
	587 Compare W10, 0
	588 JumpIfEqual {592}
	589 Move X22, 0x658000
	590 Move X21, [X31+32]
	591 Move X22, [X22+1000]
	592 Call 0x1C17DFC
	593 Move X22, 0x658000
	594 Move X22, [X22+1000]
	595 Move X21, [X31+32]
	596 Move X0, [X22]
	597 Move X8, [X0+184]
	598 Move X9, [X8+128]
	599 Compare X9, 0
	600 JumpIfEqual {5656}
	601 Move W10, [X9+24]
	602 NotImplemented "Instruction CMP not yet implemented."
	603 Add X9, X9, X25
	604 NotImplemented "Instruction STRH not yet implemented."
	605 Move W9, [X21+1072]
	606 Move W19, 0x42D3
	607 NotImplemented "Instruction MOVK not yet implemented."
	608 Compare W9, 0
	609 JumpIfEqual {640}
	610 Move W9, [X0+224]
	611 Compare W9, 0
	612 JumpIfNotEqual {616}
	613 Call 0x1C17DFC
	614 Move X0, [X22]
	615 Move X8, [X0+184]
	616 Move X8, [X8+136]
	617 Compare X8, 0
	618 JumpIfEqual {5656}
	619 Move W9, [X8+24]
	620 Compare W9, 0
	621 JumpIfEqual {5630}
	622 Move W9, [X8+32]
	623 NotImplemented "Instruction CMP not yet implemented."
	624 Move W9, [X0+224]
	625 Compare W9, 0
	626 JumpIfNotEqual {633}
	627 Call 0x1C17DFC
	628 Move X0, [X22]
	629 Move X8, [X0+184]
	630 Move X8, [X8+136]
	631 Compare X8, 0
	632 JumpIfEqual {5656}
	633 Move W9, [X8+24]
	634 Compare W9, 0
	635 JumpIfEqual {5630}
	636 Move W8, [X8+32]
	637 Move W9, 0x3DB3
	638 NotImplemented "Instruction MOVK not yet implemented."
	639 NotImplemented "Instruction CMP not yet implemented."
	640 Move W8, [X0+224]
	641 Compare W8, 0
	642 JumpIfNotEqual {645}
	643 Call 0x1C17DFC
	644 Move X0, [X22]
	645 Move X8, [X0+184]
	646 Move X9, [X8+136]
	647 Compare X9, 0
	648 JumpIfEqual {5656}
	649 Move W10, [X9+24]
	650 Compare W10, 0
	651 JumpIfEqual {5630}
	652 Move W10, [X9+32]
	653 NotImplemented "Instruction CMP not yet implemented."
	654 Move W10, [X0+224]
	655 Compare W10, 0
	656 JumpIfNotEqual {663}
	657 Call 0x1C17DFC
	658 Move X0, [X22]
	659 Move X8, [X0+184]
	660 Move X9, [X8+136]
	661 Compare X9, 0
	662 JumpIfEqual {5656}
	663 Move W10, [X9+24]
	664 Compare W10, 0
	665 JumpIfEqual {5630}
	666 Move W9, [X9+32]
	667 Move W10, 0x3DB3
	668 NotImplemented "Instruction MOVK not yet implemented."
	669 NotImplemented "Instruction CMP not yet implemented."
	670 Move [X21+1072], W31
	671 Move W9, [X0+224]
	672 Compare W9, 0
	673 JumpIfNotEqual {677}
	674 Call 0x1C17DFC
	675 Move X0, [X22]
	676 Move X8, [X0+184]
	677 Move X1, [X8+128]
	678 Compare X1, 0
	679 JumpIfEqual {5656}
	680 Move W9, [X1+24]
	681 Compare W9, 0
	682 JumpIfEqual {5630}
	683 NotImplemented "Instruction LDRH not yet implemented."
	684 Move W10, [X0+224]
	685 NotImplemented "Instruction CMP not yet implemented."
	686 NotImplemented "Instruction CSET not yet implemented."
	687 NotImplemented "Instruction CMP not yet implemented."
	688 NotImplemented "Instruction CSET not yet implemented."
	689 And W19, W11, W9
	690 Compare W10, 0
	691 JumpIfNotEqual {696}
	692 Call 0x1C17DFC
	693 Move X0, [X22]
	694 Move X8, [X0+184]
	695 Move X1, [X8+128]
	696 Compare W19, 0
	697 JumpIfEqual {699}
	698 Move W2, 4
	699 Compare X1, 0
	700 JumpIfEqual {5656}
	701 Move W9, [X1+24]
	702 Compare W9, 0
	703 JumpIfEqual {5630}
	704 NotImplemented "Instruction LDRH not yet implemented."
	705 Move W10, [X0+224]
	706 NotImplemented "Instruction CMP not yet implemented."
	707 NotImplemented "Instruction CSET not yet implemented."
	708 NotImplemented "Instruction CMP not yet implemented."
	709 NotImplemented "Instruction CSET not yet implemented."
	710 And W19, W11, W9
	711 Compare W10, 0
	712 JumpIfNotEqual {717}
	713 Call 0x1C17DFC
	714 Move X0, [X22]
	715 Move X8, [X0+184]
	716 Move X1, [X8+128]
	717 Compare W19, 0
	718 JumpIfEqual {720}
	719 Move W2, 5
	720 Compare X1, 0
	721 JumpIfEqual {5656}
	722 Move W9, [X1+24]
	723 Compare W9, 0
	724 JumpIfEqual {5630}
	725 NotImplemented "Instruction LDRH not yet implemented."
	726 Move W10, [X0+224]
	727 NotImplemented "Instruction CMP not yet implemented."
	728 NotImplemented "Instruction CSET not yet implemented."
	729 NotImplemented "Instruction CMP not yet implemented."
	730 NotImplemented "Instruction CSET not yet implemented."
	731 And W19, W11, W9
	732 Compare W10, 0
	733 JumpIfNotEqual {738}
	734 Call 0x1C17DFC
	735 Move X0, [X22]
	736 Move X8, [X0+184]
	737 Move X1, [X8+128]
	738 Compare W19, 0
	739 JumpIfEqual {741}
	740 Move W2, 7
	741 Compare X1, 0
	742 JumpIfEqual {5656}
	743 Move W9, [X1+24]
	744 Compare W9, 0
	745 JumpIfEqual {5630}
	746 NotImplemented "Instruction LDRH not yet implemented."
	747 Move W10, [X0+224]
	748 NotImplemented "Instruction CMP not yet implemented."
	749 NotImplemented "Instruction CSET not yet implemented."
	750 NotImplemented "Instruction CMP not yet implemented."
	751 NotImplemented "Instruction CSET not yet implemented."
	752 And W19, W11, W9
	753 Compare W10, 0
	754 JumpIfNotEqual {758}
	755 Call 0x1C17DFC
	756 Move X0, [X22]
	757 Move X8, [X0+184]
	758 Compare W19, 0
	759 JumpIfEqual {772}
	760 Move X1, [X8+128]
	761 Move W2, 9
	762 Call TMP_Text.HexCharsToColor, X0, X1, X2
	763 Move [X21+1260], W0
	764 Move X8, 0x659000
	765 Move X8, [X8+616]
	766 Move X2, [X8]
	767 Add X8, X21, 1264
	768 And X1, X0, 0
	769 Move X0, X8
	770 Call 0x267202C, X0, X1
	771 Move W20, 1
	772 Move X9, [X8+136]
	773 Compare X9, 0
	774 JumpIfEqual {5656}
	775 Move W10, [X9+24]
	776 Compare W10, 0
	777 JumpIfEqual {5630}
	778 Move W10, [X9+32]
	779 Move W19, 0xD8FE
	780 NotImplemented "Instruction MOVK not yet implemented."
	781 NotImplemented "Instruction CMP not yet implemented."
	782 Move W11, 0x1282
	783 NotImplemented "Instruction MOVK not yet implemented."
	784 NotImplemented "Instruction CMP not yet implemented."
	785 Move W11, 0x4822
	786 NotImplemented "Instruction MOVK not yet implemented."
	787 NotImplemented "Instruction CMP not yet implemented."
	788 Move W11, 0x47A1
	789 NotImplemented "Instruction MOVK not yet implemented."
	790 NotImplemented "Instruction CMP not yet implemented."
	791 Move W11, 0xF08A
	792 NotImplemented "Instruction MOVK not yet implemented."
	793 NotImplemented "Instruction CMP not yet implemented."
	794 Move W11, 0xE49D
	795 NotImplemented "Instruction MOVK not yet implemented."
	796 NotImplemented "Instruction CMP not yet implemented."
	797 Move W11, 0x4431
	798 NotImplemented "Instruction MOVK not yet implemented."
	799 NotImplemented "Instruction CMP not yet implemented."
	800 Move W11, 0xD356
	801 NotImplemented "Instruction MOVK not yet implemented."
	802 NotImplemented "Instruction CMP not yet implemented."
	803 Move W11, 0xF5BE
	804 NotImplemented "Instruction MOVK not yet implemented."
	805 NotImplemented "Instruction CMP not yet implemented."
	806 Move W11, 0x79C1
	807 NotImplemented "Instruction CMP not yet implemented."
	808 Move W11, 0x2EF4
	809 NotImplemented "Instruction MOVK not yet implemented."
	810 NotImplemented "Instruction CMP not yet implemented."
	811 Move W12, 0x60F4
	812 NotImplemented "Instruction MOVK not yet implemented."
	813 NotImplemented "Instruction CMP not yet implemented."
	814 Add W11, W12, 924
	815 NotImplemented "Instruction CMP not yet implemented."
	816 Move W11, 0x6AB8
	817 NotImplemented "Instruction MOVK not yet implemented."
	818 NotImplemented "Instruction CMP not yet implemented."
	819 Move W11, 0xD7AD
	820 NotImplemented "Instruction MOVK not yet implemented."
	821 NotImplemented "Instruction CMP not yet implemented."
	822 Move W11, 0xD8FE
	823 NotImplemented "Instruction MOVK not yet implemented."
	824 Move W11, 0x5B0C
	825 NotImplemented "Instruction MOVK not yet implemented."
	826 NotImplemented "Instruction CMP not yet implemented."
	827 Move W11, 0xB5DD
	828 NotImplemented "Instruction MOVK not yet implemented."
	829 NotImplemented "Instruction CMP not yet implemented."
	830 Move W11, 0x319E
	831 NotImplemented "Instruction MOVK not yet implemented."
	832 NotImplemented "Instruction CMP not yet implemented."
	833 Move W11, 0xFEFB
	834 NotImplemented "Instruction MOVK not yet implemented."
	835 NotImplemented "Instruction CMP not yet implemented."
	836 Move W8, 0x48DD
	837 NotImplemented "Instruction MOVK not yet implemented."
	838 NotImplemented "Instruction CMP not yet implemented."
	839 Move W8, 101
	840 NotImplemented "Instruction MOVK not yet implemented."
	841 NotImplemented "Instruction CMP not yet implemented."
	842 Move W8, 0x1282
	843 NotImplemented "Instruction MOVK not yet implemented."
	844 NotImplemented "Instruction CMP not yet implemented."
	845 NotImplemented "Instruction CMP not yet implemented."
	846 NotImplemented "Instruction CMP not yet implemented."
	847 NotImplemented "Instruction CMP not yet implemented."
	848 NotImplemented "Instruction CMP not yet implemented."
	849 NotImplemented "Instruction CMP not yet implemented."
	850 Move W20, 1
	851 NotImplemented "Instruction CMP not yet implemented."
	852 NotImplemented "Instruction CMP not yet implemented."
	853 Move W11, 0x5E9A
	854 NotImplemented "Instruction MOVK not yet implemented."
	855 NotImplemented "Instruction CMP not yet implemented."
	856 Move W11, 0xA57A
	857 NotImplemented "Instruction MOVK not yet implemented."
	858 NotImplemented "Instruction CMP not yet implemented."
	859 Move W11, 0xFC43
	860 NotImplemented "Instruction MOVK not yet implemented."
	861 NotImplemented "Instruction CMP not yet implemented."
	862 Move W8, 0x4302
	863 NotImplemented "Instruction MOVK not yet implemented."
	864 NotImplemented "Instruction CMP not yet implemented."
	865 Move W8, 355
	866 NotImplemented "Instruction MOVK not yet implemented."
	867 NotImplemented "Instruction CMP not yet implemented."
	868 Move W8, 0x4822
	869 NotImplemented "Instruction MOVK not yet implemented."
	870 NotImplemented "Instruction CMP not yet implemented."
	871 Move X8, [X31+32]
	872 Move [X8+1564], W31
	873 Move W11, 0x19A6
	874 NotImplemented "Instruction CMP not yet implemented."
	875 Move W11, 0x5891
	876 NotImplemented "Instruction CMP not yet implemented."
	877 Move W11, 0x6F5F
	878 NotImplemented "Instruction CMP not yet implemented."
	879 Move W8, 0x7625
	880 NotImplemented "Instruction CMP not yet implemented."
	881 Move W8, 0x763A
	882 NotImplemented "Instruction CMP not yet implemented."
	883 Move W8, 0x79C1
	884 NotImplemented "Instruction CMP not yet implemented."
	885 Move W11, 0xD122
	886 NotImplemented "Instruction MOVK not yet implemented."
	887 NotImplemented "Instruction CMP not yet implemented."
	888 Move W11, 0xFCEC
	889 NotImplemented "Instruction MOVK not yet implemented."
	890 NotImplemented "Instruction CMP not yet implemented."
	891 Move W8, 0x878F
	892 NotImplemented "Instruction MOVK not yet implemented."
	893 NotImplemented "Instruction CMP not yet implemented."
	894 Move W8, 0xAF07
	895 NotImplemented "Instruction MOVK not yet implemented."
	896 NotImplemented "Instruction CMP not yet implemented."
	897 Move W8, 0x4376
	898 NotImplemented "Instruction MOVK not yet implemented."
	899 NotImplemented "Instruction CMP not yet implemented."
	900 Move W8, 0x5B0C
	901 NotImplemented "Instruction MOVK not yet implemented."
	902 Move W11, 0xB266
	903 NotImplemented "Instruction MOVK not yet implemented."
	904 NotImplemented "Instruction CMP not yet implemented."
	905 Move W11, 0xC6BE
	906 NotImplemented "Instruction MOVK not yet implemented."
	907 NotImplemented "Instruction CMP not yet implemented."
	908 NotImplemented "Instruction CMP not yet implemented."
	909 NotImplemented "Instruction CMP not yet implemented."
	910 NotImplemented "Instruction CMP not yet implemented."
	911 NotImplemented "Instruction CMP not yet implemented."
	912 Move W11, 0x5107
	913 NotImplemented "Instruction MOVK not yet implemented."
	914 NotImplemented "Instruction CMP not yet implemented."
	915 Move W9, 0x7507
	916 NotImplemented "Instruction MOVK not yet implemented."
	917 NotImplemented "Instruction CMP not yet implemented."
	918 Move W9, 0x4B66
	919 NotImplemented "Instruction MOVK not yet implemented."
	920 NotImplemented "Instruction CMP not yet implemented."
	921 Move W8, 0xB577
	922 NotImplemented "Instruction MOVK not yet implemented."
	923 NotImplemented "Instruction CMP not yet implemented."
	924 Move W8, 0x47A1
	925 NotImplemented "Instruction MOVK not yet implemented."
	926 NotImplemented "Instruction CMP not yet implemented."
	927 Move W11, 0xA83A
	928 NotImplemented "Instruction CMP not yet implemented."
	929 Move W11, 0xABD7
	930 NotImplemented "Instruction CMP not yet implemented."
	931 Move W11, 0xB1E9
	932 NotImplemented "Instruction CMP not yet implemented."
	933 Move W9, 0x282E
	934 NotImplemented "Instruction MOVK not yet implemented."
	935 NotImplemented "Instruction CMP not yet implemented."
	936 Move W8, 0x2EF4
	937 Move W11, 0xB2E3
	938 NotImplemented "Instruction MOVK not yet implemented."
	939 NotImplemented "Instruction CMP not yet implemented."
	940 Move W11, 0x9E9E
	941 NotImplemented "Instruction MOVK not yet implemented."
	942 NotImplemented "Instruction CMP not yet implemented."
	943 Move W11, 0x4369
	944 NotImplemented "Instruction MOVK not yet implemented."
	945 NotImplemented "Instruction CMP not yet implemented."
	946 Move W11, 0x6BFB
	947 NotImplemented "Instruction MOVK not yet implemented."
	948 NotImplemented "Instruction CMP not yet implemented."
	949 Move W8, 0xB5DD
	950 NotImplemented "Instruction MOVK not yet implemented."
	951 NotImplemented "Instruction CMP not yet implemented."
	952 Move W8, [X0+224]
	953 Compare W8, 0
	954 JumpIfNotEqual {963}
	955 Call 0x1C17DFC
	956 Move X8, 0x658000
	957 Move X8, [X8+1000]
	958 Move X0, [X8]
	959 Move X8, [X0+184]
	960 Move X9, [X8+136]
	961 Compare X9, 0
	962 JumpIfEqual {5656}
	963 Move W8, [X9+24]
	964 Compare W8, 0
	965 JumpIfEqual {5630}
	966 Move X10, [X31+32]
	967 Move TEMP, 0
	968 Not TEMP
	969 Move W8, TEMP
	970 Move W20, [X9+36]
	971 Move [X10+1700], W8
	972 Move W8, [X9+40]
	973 Compare W8, 0
	974 JumpIfEqual {991}
	975 Move W8, [X0+224]
	976 Compare W8, 0
	977 JumpIfNotEqual {986}
	978 Call 0x1C17DFC
	979 Move X8, 0x658000
	980 Move X8, [X8+1000]
	981 Move X8, [X8]
	982 Move X8, [X8+184]
	983 Move X9, [X8+136]
	984 Compare X9, 0
	985 JumpIfEqual {5656}
	986 Move W8, [X9+24]
	987 Compare W8, 0
	988 JumpIfEqual {5630}
	989 Move W8, [X9+40]
	990 NotImplemented "Instruction CMP not yet implemented."
	991 Move X19, 0x5F3000
	992 Move X19, [X19+1432]
	993 Move X9, [X31+32]
	994 Move X0, [X19]
	995 Move X20, [X9+432]
	996 Move W8, [X0+224]
	997 Compare W8, 0
	998 JumpIfNotEqual {1000}
	999 Call 0x1C17DFC
	1000 Move X0, X20
	1001 Move X1, X31
	1002 Move X2, X31
	1003 Call Object.op_Inequality, X0, X1
	1004 Move TEMP, X0
	1005 And TEMP, TEMP, 1
	1006 Compare TEMP, 1
	1007 JumpIfNotEqual {4117}
	1008 Move X8, [X31+32]
	1009 Move X20, [X8+432]
	1010 NotImplemented "Instruction CMP not yet implemented."
	1011 NotImplemented "Instruction CMP not yet implemented."
	1012 NotImplemented "Instruction CMP not yet implemented."
	1013 NotImplemented "Instruction CMP not yet implemented."
	1014 NotImplemented "Instruction CMP not yet implemented."
	1015 Move W8, 0x9365
	1016 NotImplemented "Instruction MOVK not yet implemented."
	1017 NotImplemented "Instruction CMP not yet implemented."
	1018 Move W8, 0xF193
	1019 NotImplemented "Instruction MOVK not yet implemented."
	1020 NotImplemented "Instruction CMP not yet implemented."
	1021 Move W8, 0x913D
	1022 NotImplemented "Instruction MOVK not yet implemented."
	1023 NotImplemented "Instruction CMP not yet implemented."
	1024 Move W8, 0x3608
	1025 NotImplemented "Instruction MOVK not yet implemented."
	1026 NotImplemented "Instruction CMP not yet implemented."
	1027 Move W8, 0x5E9A
	1028 NotImplemented "Instruction MOVK not yet implemented."
	1029 NotImplemented "Instruction CMP not yet implemented."
	1030 Move W11, 0x11CC
	1031 NotImplemented "Instruction CMP not yet implemented."
	1032 Move W11, 0x1286
	1033 NotImplemented "Instruction CMP not yet implemented."
	1034 Move W11, 0x18EC
	1035 NotImplemented "Instruction CMP not yet implemented."
	1036 Move W8, 0x1998
	1037 NotImplemented "Instruction CMP not yet implemented."
	1038 Move W8, 0x19A6
	1039 Move W11, 0xA15E
	1040 NotImplemented "Instruction MOVK not yet implemented."
	1041 NotImplemented "Instruction CMP not yet implemented."
	1042 Move W11, 0x371E
	1043 NotImplemented "Instruction MOVK not yet implemented."
	1044 NotImplemented "Instruction CMP not yet implemented."
	1045 Move W11, 0x4760
	1046 NotImplemented "Instruction MOVK not yet implemented."
	1047 NotImplemented "Instruction CMP not yet implemented."
	1048 Move W11, 0x4D63
	1049 NotImplemented "Instruction MOVK not yet implemented."
	1050 NotImplemented "Instruction CMP not yet implemented."
	1051 Move W11, 0xD122
	1052 NotImplemented "Instruction MOVK not yet implemented."
	1053 Move W11, 0x1E9D
	1054 NotImplemented "Instruction MOVK not yet implemented."
	1055 NotImplemented "Instruction CMP not yet implemented."
	1056 Move W11, 0x13F1
	1057 NotImplemented "Instruction MOVK not yet implemented."
	1058 NotImplemented "Instruction CMP not yet implemented."
	1059 Move W11, 3731
	1060 NotImplemented "Instruction MOVK not yet implemented."
	1061 NotImplemented "Instruction CMP not yet implemented."
	1062 Move W11, 0xBFBD
	1063 NotImplemented "Instruction MOVK not yet implemented."
	1064 NotImplemented "Instruction CMP not yet implemented."
	1065 Move W11, 0xB266
	1066 NotImplemented "Instruction MOVK not yet implemented."
	1067 NotImplemented "Instruction CMP not yet implemented."
	1068 Move W8, 0xF46A
	1069 NotImplemented "Instruction MOVK not yet implemented."
	1070 NotImplemented "Instruction CMP not yet implemented."
	1071 Move W8, 0x43C1
	1072 NotImplemented "Instruction MOVK not yet implemented."
	1073 NotImplemented "Instruction CMP not yet implemented."
	1074 Move W8, 0xF5E8
	1075 NotImplemented "Instruction MOVK not yet implemented."
	1076 NotImplemented "Instruction CMP not yet implemented."
	1077 Move W8, 0xF08A
	1078 NotImplemented "Instruction MOVK not yet implemented."
	1079 Add W9, W11, 924
	1080 NotImplemented "Instruction CMP not yet implemented."
	1081 Move W9, 0x38B8
	1082 NotImplemented "Instruction MOVK not yet implemented."
	1083 NotImplemented "Instruction CMP not yet implemented."
	1084 Move W9, 0x5A2E
	1085 NotImplemented "Instruction MOVK not yet implemented."
	1086 NotImplemented "Instruction CMP not yet implemented."
	1087 Move W8, 0x60F4
	1088 NotImplemented "Instruction MOVK not yet implemented."
	1089 NotImplemented "Instruction CMP not yet implemented."
	1090 Move X8, [X31+32]
	1091 Move W8, [X8+601]
	1092 Move TEMP, X8
	1093 And TEMP, TEMP, 2
	1094 Compare TEMP, 2
	1095 JumpIfEqual {771}
	1096 Move X8, 0x658000
	1097 Move X8, [X8+720]
	1098 Move X19, [X31+32]
	1099 Move X1, [X8]
	1100 Add X0, X19, 1360
	1101 Add X8, X31, 112
	1102 Call TMP_TextProcessingStack`1<HighlightState>.Remove, X0
	1103 Add X0, X19, 608
	1104 Move W1, 512
	1105 Move X2, X31
	1106 Call TMP_FontStyleStack.Remove, X0, X1
	1107 And W31, W0, 255
	1108 Move X9, [X31+32]
	1109 Move W8, [X9+604]
	1110 And W8, W8, 0xFFFFFDFF
	1111 Move W11, 0x33C6
	1112 NotImplemented "Instruction MOVK not yet implemented."
	1113 NotImplemented "Instruction CMP not yet implemented."
	1114 Move W11, 0x45E3
	1115 NotImplemented "Instruction MOVK not yet implemented."
	1116 NotImplemented "Instruction CMP not yet implemented."
	1117 Move W11, 0x91F4
	1118 NotImplemented "Instruction MOVK not yet implemented."
	1119 NotImplemented "Instruction CMP not yet implemented."
	1120 Move W11, 0x319E
	1121 NotImplemented "Instruction MOVK not yet implemented."
	1122 NotImplemented "Instruction CMP not yet implemented."
	1123 Subtract W8, W10, 656
	1124 NotImplemented "Instruction CMP not yet implemented."
	1125 Move W9, 0x4010
	1126 NotImplemented "Instruction LSRV not yet implemented."
	1127 And W20, W8, 1
	1128 Move W11, 0xA05A
	1129 NotImplemented "Instruction MOVK not yet implemented."
	1130 NotImplemented "Instruction CMP not yet implemented."
	1131 Move W11, 0xA5A9
	1132 NotImplemented "Instruction MOVK not yet implemented."
	1133 NotImplemented "Instruction CMP not yet implemented."
	1134 Move W8, 0x640A
	1135 NotImplemented "Instruction MOVK not yet implemented."
	1136 NotImplemented "Instruction CMP not yet implemented."
	1137 Move W8, 0xA57A
	1138 NotImplemented "Instruction MOVK not yet implemented."
	1139 Move W8, 0x5171
	1140 NotImplemented "Instruction CMP not yet implemented."
	1141 Move W8, 0x517F
	1142 NotImplemented "Instruction CMP not yet implemented."
	1143 Move W8, 0x57E5
	1144 NotImplemented "Instruction CMP not yet implemented."
	1145 Move W8, 0x5891
	1146 Move W11, 0xE24E
	1147 NotImplemented "Instruction MOVK not yet implemented."
	1148 NotImplemented "Instruction CMP not yet implemented."
	1149 Move W11, 0xFF7E
	1150 NotImplemented "Instruction MOVK not yet implemented."
	1151 NotImplemented "Instruction CMP not yet implemented."
	1152 Move W8, 0xE556
	1153 NotImplemented "Instruction MOVK not yet implemented."
	1154 NotImplemented "Instruction CMP not yet implemented."
	1155 Move W8, 0xFCEC
	1156 NotImplemented "Instruction MOVK not yet implemented."
	1157 NotImplemented "Instruction CMP not yet implemented."
	1158 Move X8, 0x658000
	1159 Move X8, [X8+696]
	1160 Move X19, [X31+32]
	1161 Move X1, [X8]
	1162 Add X0, X19, 1264
	1163 Call 0x2672074, X0
	1164 Move [X19+1260], W0
	1165 Move W11, 0x139D
	1166 NotImplemented "Instruction MOVK not yet implemented."
	1167 NotImplemented "Instruction CMP not yet implemented."
	1168 Move W11, 0x1531
	1169 NotImplemented "Instruction MOVK not yet implemented."
	1170 NotImplemented "Instruction CMP not yet implemented."
	1171 Move W11, 0xA456
	1172 NotImplemented "Instruction MOVK not yet implemented."
	1173 NotImplemented "Instruction CMP not yet implemented."
	1174 Move W11, 0xC6BE
	1175 NotImplemented "Instruction MOVK not yet implemented."
	1176 NotImplemented "Instruction CMP not yet implemented."
	1177 Move W10, [X0+224]
	1178 Compare W10, 0
	1179 JumpIfNotEqual {1188}
	1180 Call 0x1C17DFC
	1181 Move X8, 0x657000
	1182 Move X8, [X8+1000]
	1183 Move X8, [X8]
	1184 Move X8, [X8+184]
	1185 Move X9, [X8+136]
	1186 Compare X9, 0
	1187 JumpIfEqual {5656}
	1188 Move W10, [X9+24]
	1189 Compare W10, 0
	1190 JumpIfEqual {5630}
	1191 Move X1, [X8+128]
	1192 Move W2, [X9+44]
	1193 Move W3, [X9+48]
	1194 Add X4, X31, 112
	1195 Move [X31+112], W31
	1196 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	1197 Move W8, 0xC7000000
	1198 Move S1, W8
	1199 NotImplemented "Instruction FCMP not yet implemented."
	1200 Move W8, 0x7F800000
	1201 Move S1, W8
	1202 NotImplemented "Instruction FCVTZS not yet implemented."
	1203 NotImplemented "Instruction FCMP not yet implemented."
	1204 Move W8, 0x80000000
	1205 NotImplemented "Instruction CSEL not yet implemented."
	1206 NotImplemented "Instruction CMP not yet implemented."
	1207 Move [X31+620], W8
	1208 NotImplemented "Instruction CMP not yet implemented."
	1209 NotImplemented "Instruction CMP not yet implemented."
	1210 NotImplemented "Instruction CMP not yet implemented."
	1211 NotImplemented "Instruction CMP not yet implemented."
	1212 Move W11, 0xD9F7
	1213 NotImplemented "Instruction MOVK not yet implemented."
	1214 NotImplemented "Instruction CMP not yet implemented."
	1215 Move W11, 0x2798
	1216 NotImplemented "Instruction MOVK not yet implemented."
	1217 NotImplemented "Instruction CMP not yet implemented."
	1218 Move W11, 0xFDF7
	1219 NotImplemented "Instruction MOVK not yet implemented."
	1220 NotImplemented "Instruction CMP not yet implemented."
	1221 Move W8, 0x5107
	1222 NotImplemented "Instruction MOVK not yet implemented."
	1223 Move W11, 0x7FE9
	1224 NotImplemented "Instruction CMP not yet implemented."
	1225 Move W11, 0xA15F
	1226 NotImplemented "Instruction CMP not yet implemented."
	1227 Move W8, 0xA825
	1228 NotImplemented "Instruction CMP not yet implemented."
	1229 Move W8, 0xA83A
	1230 NotImplemented "Instruction CMP not yet implemented."
	1231 Move X8, [X31+32]
	1232 Move W8, [X8+1073]
	1233 Compare W8, 0
	1234 JumpIfEqual {771}
	1235 Move X8, [X31+32]
	1236 Move W8, [X8+1013]
	1237 Compare W8, 0
	1238 JumpIfNotEqual {771}
	1239 Move X8, [X31+32]
	1240 Move X8, [X8+872]
	1241 Compare X8, 0
	1242 JumpIfEqual {5656}
	1243 Move X21, X8
	1244 Add X21, X21, 72
	1245 Move X9, [X21]
	1246 Compare X9, 0
	1247 JumpIfEqual {5656}
	1248 NotImplemented "Instruction LDURSW not yet implemented."
	1249 Move W9, [X9+24]
	1250 Add W22, W19, 1
	1251 NotImplemented "Instruction CMP not yet implemented."
	1252 Move X8, 0x657000
	1253 Move X8, [X8+872]
	1254 Move X0, [X8]
	1255 Move W8, [X0+224]
	1256 Compare W8, 0
	1257 JumpIfNotEqual {1259}
	1258 Call 0x1C17DFC
	1259 Move X8, 0x658000
	1260 Move X8, [X8+576]
	1261 Move X0, X21
	1262 Move W1, W22
	1263 Move X2, [X8]
	1264 Call TMP_TextInfo.Resize, X0, X1
	1265 Move X8, [X31+32]
	1266 Move X8, [X8+872]
	1267 Compare X8, 0
	1268 JumpIfEqual {5656}
	1269 Move X21, [X8+72]
	1270 Compare X21, 0
	1271 JumpIfEqual {5656}
	1272 Move W8, [X21+24]
	1273 NotImplemented "Instruction CMP not yet implemented."
	1274 Move X9, [X31+32]
	1275 Move W8, 40
	1276 NotImplemented "Instruction MADD not yet implemented."
	1277 Move [X8+32], X9
	1278 Move X8, 0x657000
	1279 Move X8, [X8+1000]
	1280 Move X0, [X8]
	1281 Move W8, [X0+224]
	1282 Compare W8, 0
	1283 JumpIfNotEqual {1288}
	1284 Call 0x1C17DFC
	1285 Move X8, 0x657000
	1286 Move X8, [X8+1000]
	1287 Move X0, [X8]
	1288 Move X8, [X0+184]
	1289 Move X9, [X8+136]
	1290 Compare X9, 0
	1291 JumpIfEqual {5656}
	1292 Move W10, [X9+24]
	1293 Compare W10, 0
	1294 JumpIfEqual {5630}
	1295 Move W10, [X21+24]
	1296 NotImplemented "Instruction CMP not yet implemented."
	1297 Move W10, [X9+36]
	1298 Move W11, 40
	1299 NotImplemented "Instruction MADD not yet implemented."
	1300 Move [X11+40], W10
	1301 Move X10, [X31+32]
	1302 Move X10, [X10+872]
	1303 Compare X10, 0
	1304 JumpIfEqual {5656}
	1305 Move X10, [X10+72]
	1306 Compare X10, 0
	1307 JumpIfEqual {5656}
	1308 Move W11, [X10+24]
	1309 NotImplemented "Instruction CMP not yet implemented."
	1310 Move X11, [X31+32]
	1311 Move W12, 40
	1312 NotImplemented "Instruction MADD not yet implemented."
	1313 Add X0, X10, 32
	1314 Move W11, [X11+1172]
	1315 Move X4, X31
	1316 Move [X10+52], W11
	1317 Move W2, [X9+44]
	1318 Add W11, W2, W20
	1319 Move [X10+44], W11
	1320 Move W3, [X9+48]
	1321 Move [X10+48], W3
	1322 Move X1, [X8+128]
	1323 Call TMP_LinkInfo.SetLinkID, X0, X1, X2, X3
	1324 Move W11, 0xE5AF
	1325 NotImplemented "Instruction MOVK not yet implemented."
	1326 NotImplemented "Instruction CMP not yet implemented."
	1327 Move W11, 3367
	1328 NotImplemented "Instruction MOVK not yet implemented."
	1329 NotImplemented "Instruction CMP not yet implemented."
	1330 Move W11, 0xA0C6
	1331 NotImplemented "Instruction MOVK not yet implemented."
	1332 NotImplemented "Instruction CMP not yet implemented."
	1333 Move W11, 0xB2E3
	1334 NotImplemented "Instruction MOVK not yet implemented."
	1335 NotImplemented "Instruction CMP not yet implemented."
	1336 Move W10, [X0+224]
	1337 Compare W10, 0
	1338 JumpIfNotEqual {1347}
	1339 Call 0x1C17DFC
	1340 Move X8, 0x657000
	1341 Move X8, [X8+1000]
	1342 Move X8, [X8]
	1343 Move X8, [X8+184]
	1344 Move X9, [X8+136]
	1345 Compare X9, 0
	1346 JumpIfEqual {5656}
	1347 Move W10, [X9+24]
	1348 Compare W10, 0
	1349 JumpIfEqual {5630}
	1350 Move X1, [X8+128]
	1351 Move W2, [X9+44]
	1352 Move W3, [X9+48]
	1353 Add X4, X31, 112
	1354 Move [X31+112], W31
	1355 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	1356 Move W8, 0xC7000000
	1357 Move S1, W8
	1358 NotImplemented "Instruction FCMP not yet implemented."
	1359 Move W8, [X31+44]
	1360 Compare W8, 0
	1361 JumpIfEqual {4757}
	1362 Move W8, [X31+44]
	1363 NotImplemented "Instruction CMP not yet implemented."
	1364 Move X10, [X31+32]
	1365 Move X9, -50425856
	1366 Move V1, [X9+188]
	1367 Move S3, 1
	1368 Move W8, [X10+773]
	1369 Move V2, [X10+488]
	1370 NotImplemented "Instruction CMP not yet implemented."
	1371 NotImplemented "Instruction FCSEL not yet implemented."
	1372 Multiply S0, S0, S1
	1373 Multiply S0, S2, S0
	1374 NotImplemented "Instruction CMP not yet implemented."
	1375 NotImplemented "Instruction CMP not yet implemented."
	1376 NotImplemented "Instruction CMP not yet implemented."
	1377 NotImplemented "Instruction CMP not yet implemented."
	1378 Move X8, [X31+32]
	1379 Move W8, [X8+600]
	1380 Move TEMP, X8
	1381 And TEMP, TEMP, 2
	1382 Compare TEMP, 2
	1383 JumpIfEqual {771}
	1384 Move X8, 0x658000
	1385 Move X8, [X8+688]
	1386 Move X19, [X31+32]
	1387 Move X1, [X8]
	1388 Add X0, X19, 1488
	1389 Call TMP_TextProcessingStack`1<Int32>.Remove, X0
	1390 Move [X19+1520], W0
	1391 Add X0, X19, 608
	1392 Move W1, 2
	1393 Move X2, X31
	1394 Call TMP_FontStyleStack.Remove, X0, X1
	1395 And W31, W0, 255
	1396 Move X9, [X31+32]
	1397 Move W8, [X9+604]
	1398 And W8, W8, 0xFFFFFFFD
	1399 Move W8, 0xFE3D
	1400 NotImplemented "Instruction MOVK not yet implemented."
	1401 NotImplemented "Instruction CMP not yet implemented."
	1402 Move W8, 0xA308
	1403 NotImplemented "Instruction MOVK not yet implemented."
	1404 NotImplemented "Instruction CMP not yet implemented."
	1405 Move W8, 0xCB9A
	1406 NotImplemented "Instruction MOVK not yet implemented."
	1407 NotImplemented "Instruction CMP not yet implemented."
	1408 Move W8, 0x9365
	1409 NotImplemented "Instruction MOVK not yet implemented."
	1410 NotImplemented "Instruction CMP not yet implemented."
	1411 Move X8, [X31+32]
	1412 Move W8, [X8+1073]
	1413 Compare W8, 0
	1414 JumpIfEqual {1455}
	1415 Move X8, 0x658000
	1416 Move X8, [X8+640]
	1417 Move X19, [X31+32]
	1418 Move X1, [X8]
	1419 Add X0, X19, 1528
	1420 Call TMP_TextProcessingStack`1<Int32>.CurrentItem, X0
	1421 Move [X31+620], W0
	1422 Add X0, X31, 620
	1423 Move X1, X31
	1424 Call Int32.ToString, X0
	1425 Move W8, [X19+1172]
	1426 Move X20, X0
	1427 Add X0, X31, 620
	1428 Move X1, X31
	1429 Subtract W8, W8, 1
	1430 Move [X31+620], W8
	1431 Call Int32.ToString, X0
	1432 Move X8, 0x658000
	1433 Move X8, [X8+744]
	1434 Move X9, 0x658000
	1435 Move X9, [X9+768]
	1436 Move X3, X0
	1437 Move X8, [X8]
	1438 Move X1, X20
	1439 Move X2, [X9]
	1440 Move X4, X31
	1441 Move X0, X8
	1442 Call String.Concat, X0, X1, X2, X3
	1443 Move X8, 0x5F2000
	1444 Move X8, [X8+2600]
	1445 Move X20, X0
	1446 Move X8, [X8]
	1447 Move W9, [X8+224]
	1448 Compare W9, 0
	1449 JumpIfNotEqual {1452}
	1450 Move X0, X8
	1451 Call 0x1C17DFC
	1452 Move X0, X20
	1453 Move X1, X31
	1454 Call Debug.Log, X0
	1455 Move X8, 0x658000
	1456 Move X8, [X8+688]
	1457 Move X1, [X8]
	1458 Move X8, [X31+32]
	1459 Add X0, X8, 1528
	1460 Call TMP_TextProcessingStack`1<Int32>.Remove, X0
	1461 NotImplemented "Instruction CMP not yet implemented."
	1462 NotImplemented "Instruction CMP not yet implemented."
	1463 Move W20, 1
	1464 NotImplemented "Instruction CMP not yet implemented."
	1465 Move W11, 0x11CC
	1466 NotImplemented "Instruction CMP not yet implemented."
	1467 Move W10, [X0+224]
	1468 Compare W10, 0
	1469 JumpIfNotEqual {1478}
	1470 Call 0x1C17DFC
	1471 Move X8, 0x657000
	1472 Move X8, [X8+1000]
	1473 Move X8, [X8]
	1474 Move X8, [X8+184]
	1475 Move X9, [X8+136]
	1476 Compare X9, 0
	1477 JumpIfEqual {5656}
	1478 Move W10, [X9+24]
	1479 Compare W10, 0
	1480 JumpIfEqual {5630}
	1481 Move X1, [X8+128]
	1482 Move W2, [X9+44]
	1483 Move W3, [X9+48]
	1484 Add X4, X31, 112
	1485 Move [X31+112], W31
	1486 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	1487 Move W8, 0xC7000000
	1488 Move S1, W8
	1489 NotImplemented "Instruction FCMP not yet implemented."
	1490 Move W8, [X31+44]
	1491 NotImplemented "Instruction CMP not yet implemented."
	1492 Move W8, [X31+44]
	1493 NotImplemented "Instruction CMP not yet implemented."
	1494 Move W8, [X31+44]
	1495 Compare W8, 0
	1496 JumpIfNotEqual {5700}
	1497 Move X10, [X31+32]
	1498 Move X9, -50425856
	1499 Move V1, [X9+188]
	1500 Move S2, 1
	1501 Move W8, [X10+773]
	1502 NotImplemented "Instruction CMP not yet implemented."
	1503 NotImplemented "Instruction FCSEL not yet implemented."
	1504 Move W11, 0x7302
	1505 NotImplemented "Instruction MOVK not yet implemented."
	1506 NotImplemented "Instruction CMP not yet implemented."
	1507 Move W11, 0x79E6
	1508 NotImplemented "Instruction MOVK not yet implemented."
	1509 NotImplemented "Instruction CMP not yet implemented."
	1510 Move W11, 0x842E
	1511 NotImplemented "Instruction MOVK not yet implemented."
	1512 NotImplemented "Instruction CMP not yet implemented."
	1513 Move W11, 0xA15E
	1514 NotImplemented "Instruction MOVK not yet implemented."
	1515 NotImplemented "Instruction CMP not yet implemented."
	1516 Move W10, [X0+224]
	1517 Compare W10, 0
	1518 JumpIfNotEqual {1527}
	1519 Call 0x1C17DFC
	1520 Move X8, 0x657000
	1521 Move X8, [X8+1000]
	1522 Move X8, [X8]
	1523 Move X8, [X8+184]
	1524 Move X9, [X8+136]
	1525 Compare X9, 0
	1526 JumpIfEqual {5656}
	1527 Move W10, [X9+24]
	1528 Compare W10, 0
	1529 JumpIfEqual {5630}
	1530 Move X1, [X8+128]
	1531 Move W2, [X9+44]
	1532 Move W3, [X9+48]
	1533 Add X4, X31, 112
	1534 Move [X31+112], W31
	1535 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	1536 Move W8, 0xC7000000
	1537 Move S1, W8
	1538 NotImplemented "Instruction FCMP not yet implemented."
	1539 Move W8, [X31+44]
	1540 Compare W8, 0
	1541 JumpIfEqual {4784}
	1542 Move W8, [X31+44]
	1543 NotImplemented "Instruction CMP not yet implemented."
	1544 Move W8, [X31+44]
	1545 NotImplemented "Instruction CMP not yet implemented."
	1546 Move X9, [X31+32]
	1547 Move W8, 0x42C80000
	1548 Move S2, W8
	1549 Move V1, [X9+856]
	1550 Multiply S0, S0, S1
	1551 NotImplemented "Instruction FDIV not yet implemented."
	1552 Move [X9+864], S0
	1553 Move W11, 0x65AA
	1554 NotImplemented "Instruction MOVK not yet implemented."
	1555 NotImplemented "Instruction CMP not yet implemented."
	1556 Move W11, 0x17D1
	1557 NotImplemented "Instruction MOVK not yet implemented."
	1558 NotImplemented "Instruction CMP not yet implemented."
	1559 Move W11, 0x1273
	1560 NotImplemented "Instruction MOVK not yet implemented."
	1561 NotImplemented "Instruction CMP not yet implemented."
	1562 Move W11, 0x1E9D
	1563 NotImplemented "Instruction MOVK not yet implemented."
	1564 NotImplemented "Instruction CMP not yet implemented."
	1565 Move W10, [X0+224]
	1566 Compare W10, 0
	1567 JumpIfNotEqual {1576}
	1568 Call 0x1C17DFC
	1569 Move X8, 0x657000
	1570 Move X8, [X8+1000]
	1571 Move X8, [X8]
	1572 Move X8, [X8+184]
	1573 Move X9, [X8+136]
	1574 Compare X9, 0
	1575 JumpIfEqual {5656}
	1576 Move W10, [X9+24]
	1577 Compare W10, 0
	1578 JumpIfEqual {5630}
	1579 Move X1, [X8+128]
	1580 Move W2, [X9+44]
	1581 Move W3, [X9+48]
	1582 Add X4, X31, 112
	1583 Move [X31+112], W31
	1584 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	1585 Move W8, 0xC7000000
	1586 Move S1, W8
	1587 NotImplemented "Instruction FCMP not yet implemented."
	1588 Move W8, [X31+44]
	1589 Compare W8, 0
	1590 JumpIfEqual {4793}
	1591 Move W8, [X31+44]
	1592 NotImplemented "Instruction CMP not yet implemented."
	1593 Move W8, [X31+44]
	1594 NotImplemented "Instruction CMP not yet implemented."
	1595 Move X8, [X31+32]
	1596 Move S2, -1
	1597 Move S4, W31
	1598 Move V1, [X8+864]
	1599 Move V3, [X8+856]
	1600 Move W8, 0x42C80000
	1601 NotImplemented "Instruction FCMP not yet implemented."
	1602 NotImplemented "Instruction FCSEL not yet implemented."
	1603 Subtract S1, S3, S1
	1604 Multiply S0, S0, S1
	1605 Move S1, W8
	1606 NotImplemented "Instruction FDIV not yet implemented."
	1607 Move W11, 0xC966
	1608 NotImplemented "Instruction MOVK not yet implemented."
	1609 NotImplemented "Instruction CMP not yet implemented."
	1610 Move W11, 0x5578
	1611 NotImplemented "Instruction MOVK not yet implemented."
	1612 NotImplemented "Instruction CMP not yet implemented."
	1613 Move W11, 0xE49D
	1614 NotImplemented "Instruction MOVK not yet implemented."
	1615 Move W8, 0x6109
	1616 NotImplemented "Instruction MOVK not yet implemented."
	1617 NotImplemented "Instruction CMP not yet implemented."
	1618 Move W8, 0x6490
	1619 Move W11, 0xD669
	1620 NotImplemented "Instruction MOVK not yet implemented."
	1621 NotImplemented "Instruction CMP not yet implemented."
	1622 Move W11, 0xFEFB
	1623 NotImplemented "Instruction MOVK not yet implemented."
	1624 NotImplemented "Instruction CMP not yet implemented."
	1625 Move W10, [X0+224]
	1626 Compare W10, 0
	1627 JumpIfNotEqual {1636}
	1628 Call 0x1C17DFC
	1629 Move X8, 0x657000
	1630 Move X8, [X8+1000]
	1631 Move X8, [X8]
	1632 Move X8, [X8+184]
	1633 Move X9, [X8+136]
	1634 Compare X9, 0
	1635 JumpIfEqual {5656}
	1636 Move W10, [X9+24]
	1637 Compare W10, 0
	1638 JumpIfEqual {5630}
	1639 Move X1, [X8+128]
	1640 Move W2, [X9+44]
	1641 Move W3, [X9+48]
	1642 Add X4, X31, 112
	1643 Move [X31+112], W31
	1644 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	1645 Move W8, 0xC7000000
	1646 Move V11, V0
	1647 Move S0, W8
	1648 NotImplemented "Instruction FCMP not yet implemented."
	1649 Move X19, 0x8D7000
	1650 Move W8, [X19+1923]
	1651 Compare W8, 0
	1652 JumpIfNotEqual {1658}
	1653 Move X0, 0x5F2000
	1654 Move X0, [X0+1440]
	1655 Call 0x1C17CF4
	1656 Move W8, 1
	1657 Move [X19+1923], W8
	1658 Move X19, 0x5F2000
	1659 Move X19, [X19+1440]
	1660 Move X9, -50425856
	1661 Move V0, [X9+260]
	1662 Move S1, W31
	1663 Move X8, [X19]
	1664 Move X0, X31
	1665 Multiply S2, S11, S0
	1666 Move S0, W31
	1667 Move X8, [X8+184]
	1668 Move S10, [X8]
	1669 Move S9, [X8+4]
	1670 Move V8, [X8+8]
	1671 Call Quaternion.Internal_FromEulerRad, X0
	1672 Move X20, 0x8D7000
	1673 Move W8, [X20+2139]
	1674 Move V11, V0
	1675 Move V12, V1
	1676 Move V13, V2
	1677 Move V14, V3
	1678 Compare W8, 0
	1679 JumpIfNotEqual {1685}
	1680 Move X0, 0x5F2000
	1681 Move X0, [X0+1440]
	1682 Call 0x1C17CF4
	1683 Move W8, 1
	1684 Move [X20+2139], W8
	1685 Move X8, [X19]
	1686 Move V1, V9
	1687 Move V2, V8
	1688 Move V3, V11
	1689 Move X8, [X8+184]
	1690 Move V4, V12
	1691 Move V5, V13
	1692 Move V6, V14
	1693 Move V0, [X8+20]
	1694 NotImplemented "Instruction LDUR not yet implemented."
	1695 Add X8, X31, 48
	1696 Move [X31+8], S0
	1697 Move V0, V10
	1698 Move [X31], X9
	1699 Move W11, 0xAAC9
	1700 NotImplemented "Instruction MOVK not yet implemented."
	1701 NotImplemented "Instruction CMP not yet implemented."
	1702 Move W8, 0xFC43
	1703 NotImplemented "Instruction MOVK not yet implemented."
	1704 NotImplemented "Instruction CMP not yet implemented."
	1705 Move X8, [X31+32]
	1706 Move W8, [X8+600]
	1707 Move TEMP, X8
	1708 And TEMP, TEMP, 16
	1709 Compare TEMP, 16
	1710 JumpIfEqual {771}
	1711 Move X8, [X31+32]
	1712 Move W1, 16
	1713 Move X2, X31
	1714 Add X0, X8, 608
	1715 Call TMP_FontStyleStack.Remove, X0, X1
	1716 And W31, W0, 255
	1717 Move X9, [X31+32]
	1718 Move W8, [X9+604]
	1719 And W8, W8, 0xFFFFFFEF
	1720 Move W11, 0x589F
	1721 NotImplemented "Instruction CMP not yet implemented."
	1722 Move W11, 0x6F5F
	1723 NotImplemented "Instruction CMP not yet implemented."
	1724 Move W10, [X0+224]
	1725 Compare W10, 0
	1726 JumpIfNotEqual {1735}
	1727 Call 0x1C17DFC
	1728 Move X8, 0x657000
	1729 Move X8, [X8+1000]
	1730 Move X0, [X8]
	1731 Move X8, [X0+184]
	1732 Move X9, [X8+136]
	1733 Compare X9, 0
	1734 JumpIfEqual {5656}
	1735 Move W10, [X9+24]
	1736 Compare W10, 0
	1737 JumpIfEqual {5630}
	1738 NotImplemented "Instruction CMP not yet implemented."
	1739 Move W21, [X9+36]
	1740 Move W10, 0x756B
	1741 NotImplemented "Instruction MOVK not yet implemented."
	1742 NotImplemented "Instruction CMP not yet implemented."
	1743 Move W10, 0xF54B
	1744 NotImplemented "Instruction MOVK not yet implemented."
	1745 NotImplemented "Instruction CMP not yet implemented."
	1746 Move W9, [X0+224]
	1747 Compare W9, 0
	1748 JumpIfNotEqual {1754}
	1749 Call 0x1C17DFC
	1750 Move X8, 0x657000
	1751 Move X8, [X8+1000]
	1752 Move X8, [X8]
	1753 Move X8, [X8+184]
	1754 Move X9, [X8]
	1755 Compare X9, 0
	1756 JumpIfEqual {5656}
	1757 Move W10, [X9+24]
	1758 Compare W10, 0
	1759 JumpIfEqual {5630}
	1760 Move X10, [X9+40]
	1761 Move X11, [X31+32]
	1762 Add X0, X8, 16
	1763 Move X8, 0x658000
	1764 Move [X11+256], X10
	1765 Move X10, [X9+56]
	1766 Move [X11+280], X10
	1767 Move X8, [X8+624]
	1768 Move [X11+288], W31
	1769 Move V2, [X9+48]
	1770 Move V0, [X9+64]
	1771 Move X10, [X9+80]
	1772 Move V1, [X9+2]
	1773 Move X2, [X8]
	1774 Move [X31+576], V2
	1775 Move [X31+584], V0
	1776 Move [X31+608], X10
	1777 Move [X31+35], V1
	1778 Move W8, 0x80AB
	1779 NotImplemented "Instruction MOVK not yet implemented."
	1780 NotImplemented "Instruction CMP not yet implemented."
	1781 Move W8, 0x878F
	1782 NotImplemented "Instruction MOVK not yet implemented."
	1783 NotImplemented "Instruction CMP not yet implemented."
	1784 NotImplemented "Instruction CMP not yet implemented."
	1785 Move W9, 0x2766
	1786 NotImplemented "Instruction MOVK not yet implemented."
	1787 NotImplemented "Instruction CMP not yet implemented."
	1788 Move W8, 0x7507
	1789 NotImplemented "Instruction MOVK not yet implemented."
	1790 NotImplemented "Instruction CMP not yet implemented."
	1791 Move X8, 0x658000
	1792 Move X8, [X8+680]
	1793 Move X19, [X31+32]
	1794 Move X1, [X8]
	1795 Add X0, X19, 1416
	1796 Call TMP_TextProcessingStack`1<Object>.Remove, X0
	1797 Move [X19+1408], X0
	1798 Move W8, 0xABC1
	1799 NotImplemented "Instruction CMP not yet implemented."
	1800 Move W8, 0xABD7
	1801 NotImplemented "Instruction CMP not yet implemented."
	1802 Move W11, 0xFEF4
	1803 NotImplemented "Instruction MOVK not yet implemented."
	1804 NotImplemented "Instruction CMP not yet implemented."
	1805 Move W11, 0x9E9E
	1806 NotImplemented "Instruction MOVK not yet implemented."
	1807 NotImplemented "Instruction CMP not yet implemented."
	1808 Move W10, [X0+224]
	1809 Compare W10, 0
	1810 JumpIfNotEqual {1819}
	1811 Call 0x1C17DFC
	1812 Move X8, 0x657000
	1813 Move X8, [X8+1000]
	1814 Move X0, [X8]
	1815 Move X8, [X0+184]
	1816 Move X9, [X8+136]
	1817 Compare X9, 0
	1818 JumpIfEqual {5656}
	1819 Move W10, [X9+24]
	1820 Compare W10, 0
	1821 JumpIfEqual {5630}
	1822 Move W10, [X9+40]
	1823 NotImplemented "Instruction CMP not yet implemented."
	1824 Compare W10, 0
	1825 JumpIfNotEqual {5700}
	1826 Move X8, -50425856
	1827 Move V10, [X8+188]
	1828 Move W21, 0xD0E4
	1829 Move W19, 1
	1830 Move W20, 24
	1831 NotImplemented "Instruction MOVK not yet implemented."
	1832 Move W22, 0xC7000000
	1833 Move S9, 1
	1834 Move S11, W31
	1835 Move S12, -1
	1836 Move W23, 0x42C80000
	1837 Move W24, 0xA747
	1838 Move W8, [X0+224]
	1839 Compare W8, 0
	1840 JumpIfNotEqual {1845}
	1841 Call 0x1C17DFC
	1842 Move X8, 0x657000
	1843 Move X8, [X8+1000]
	1844 Move X0, [X8]
	1845 Move X8, [X0+184]
	1846 Move X8, [X8+136]
	1847 Compare X8, 0
	1848 JumpIfEqual {5656}
	1849 Move W9, [X8+24]
	1850 NotImplemented "Instruction CMP not yet implemented."
	1851 Move W9, [X0+224]
	1852 Compare W9, 0
	1853 JumpIfNotEqual {1862}
	1854 Call 0x1C17DFC
	1855 Move X8, 0x657000
	1856 Move X8, [X8+1000]
	1857 Move X0, [X8]
	1858 Move X8, [X0+184]
	1859 Move X8, [X8+136]
	1860 Compare X8, 0
	1861 JumpIfEqual {5656}
	1862 Move W9, [X8+24]
	1863 NotImplemented "Instruction CMP not yet implemented."
	1864 Move X25, W19
	1865 NotImplemented "Instruction MADD not yet implemented."
	1866 Move W8, [X8+32]
	1867 Compare W8, 0
	1868 JumpIfEqual {771}
	1869 Move W8, [X0+224]
	1870 Compare W8, 0
	1871 JumpIfNotEqual {1876}
	1872 Call 0x1C17DFC
	1873 Move X8, 0x657000
	1874 Move X8, [X8+1000]
	1875 Move X0, [X8]
	1876 Move X9, [X0+184]
	1877 Move X8, [X9+136]
	1878 Compare X8, 0
	1879 JumpIfEqual {5656}
	1880 Move W10, [X8+24]
	1881 NotImplemented "Instruction CMP not yet implemented."
	1882 NotImplemented "Instruction MADD not yet implemented."
	1883 Move W10, [X10+32]
	1884 NotImplemented "Instruction CMP not yet implemented."
	1885 NotImplemented "Instruction CMP not yet implemented."
	1886 Move W10, [X0+224]
	1887 Compare W10, 0
	1888 JumpIfNotEqual {1897}
	1889 Call 0x1C17DFC
	1890 Move X8, 0x657000
	1891 Move X8, [X8+1000]
	1892 Move X8, [X8]
	1893 Move X9, [X8+184]
	1894 Move X8, [X9+136]
	1895 Compare X8, 0
	1896 JumpIfEqual {5656}
	1897 Move W10, [X8+24]
	1898 NotImplemented "Instruction CMP not yet implemented."
	1899 NotImplemented "Instruction MADD not yet implemented."
	1900 Move X1, [X9+128]
	1901 Move W2, [X8+44]
	1902 Move W3, [X8+48]
	1903 Add X4, X31, 112
	1904 Move [X31+112], W31
	1905 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	1906 Move V8, V0
	1907 Move S0, W22
	1908 NotImplemented "Instruction FCMP not yet implemented."
	1909 Move X8, 0x657000
	1910 Move X8, [X8+1000]
	1911 Move X0, [X8]
	1912 Move W8, [X0+224]
	1913 Compare W8, 0
	1914 JumpIfNotEqual {1919}
	1915 Call 0x1C17DFC
	1916 Move X8, 0x657000
	1917 Move X8, [X8+1000]
	1918 Move X0, [X8]
	1919 Move X8, [X0+184]
	1920 Move X8, [X8+136]
	1921 Compare X8, 0
	1922 JumpIfEqual {5656}
	1923 Move W9, [X8+24]
	1924 NotImplemented "Instruction CMP not yet implemented."
	1925 NotImplemented "Instruction MADD not yet implemented."
	1926 Move W8, [X8+52]
	1927 Compare W8, 0
	1928 JumpIfEqual {1994}
	1929 NotImplemented "Instruction CMP not yet implemented."
	1930 NotImplemented "Instruction CMP not yet implemented."
	1931 Move X8, [X31+32]
	1932 Move V0, [X8+864]
	1933 Move V1, [X8+856]
	1934 NotImplemented "Instruction FCMP not yet implemented."
	1935 NotImplemented "Instruction FCSEL not yet implemented."
	1936 Subtract S0, S1, S0
	1937 Multiply S0, S8, S0
	1938 Move S1, W23
	1939 NotImplemented "Instruction FDIV not yet implemented."
	1940 Move W10, [X0+224]
	1941 Compare W10, 0
	1942 JumpIfNotEqual {1951}
	1943 Call 0x1C17DFC
	1944 Move X8, 0x656000
	1945 Move X8, [X8+1000]
	1946 Move X8, [X8]
	1947 Move X9, [X8+184]
	1948 Move X8, [X9+136]
	1949 Compare X8, 0
	1950 JumpIfEqual {5656}
	1951 Move W10, [X8+24]
	1952 NotImplemented "Instruction CMP not yet implemented."
	1953 NotImplemented "Instruction MADD not yet implemented."
	1954 Move X1, [X9+128]
	1955 Move W2, [X8+44]
	1956 Move W3, [X8+48]
	1957 Add X4, X31, 112
	1958 Move [X31+112], W31
	1959 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	1960 Move V8, V0
	1961 Move S0, W22
	1962 NotImplemented "Instruction FCMP not yet implemented."
	1963 Move X8, 0x656000
	1964 Move X8, [X8+1000]
	1965 Move X0, [X8]
	1966 Move W8, [X0+224]
	1967 Compare W8, 0
	1968 JumpIfNotEqual {1973}
	1969 Call 0x1C17DFC
	1970 Move X8, 0x656000
	1971 Move X8, [X8+1000]
	1972 Move X0, [X8]
	1973 Move X8, [X0+184]
	1974 Move X8, [X8+136]
	1975 Compare X8, 0
	1976 JumpIfEqual {5656}
	1977 Move W9, [X8+24]
	1978 NotImplemented "Instruction CMP not yet implemented."
	1979 NotImplemented "Instruction MADD not yet implemented."
	1980 Move W8, [X8+52]
	1981 Compare W8, 0
	1982 JumpIfEqual {2012}
	1983 NotImplemented "Instruction CMP not yet implemented."
	1984 NotImplemented "Instruction CMP not yet implemented."
	1985 Move X8, [X31+32]
	1986 Move V0, [X8+864]
	1987 Move V1, [X8+856]
	1988 NotImplemented "Instruction FCMP not yet implemented."
	1989 NotImplemented "Instruction FCSEL not yet implemented."
	1990 Subtract S0, S1, S0
	1991 Multiply S0, S8, S0
	1992 Move S1, W23
	1993 NotImplemented "Instruction FDIV not yet implemented."
	1994 Move X8, [X31+32]
	1995 Move W8, [X8+773]
	1996 NotImplemented "Instruction CMP not yet implemented."
	1997 NotImplemented "Instruction FCSEL not yet implemented."
	1998 Multiply S0, S8, S0
	1999 Move X9, [X31+32]
	2000 Move W8, [X9+773]
	2001 Move V0, [X9+488]
	2002 NotImplemented "Instruction CMP not yet implemented."
	2003 NotImplemented "Instruction FCSEL not yet implemented."
	2004 Multiply S1, S8, S1
	2005 Multiply S0, S1, S0
	2006 Move X8, [X31+32]
	2007 Move V0, [X8+848]
	2008 Move X8, [X31+32]
	2009 NotImplemented "Instruction FCMP not yet implemented."
	2010 NotImplemented "Instruction FCSEL not yet implemented."
	2011 Move [X8+848], S0
	2012 Move X8, [X31+32]
	2013 Move W8, [X8+773]
	2014 NotImplemented "Instruction CMP not yet implemented."
	2015 NotImplemented "Instruction FCSEL not yet implemented."
	2016 Multiply S0, S8, S0
	2017 Move X9, [X31+32]
	2018 Move W8, [X9+773]
	2019 Move V0, [X9+488]
	2020 NotImplemented "Instruction CMP not yet implemented."
	2021 NotImplemented "Instruction FCSEL not yet implemented."
	2022 Multiply S1, S8, S1
	2023 Multiply S0, S1, S0
	2024 Move X8, [X31+32]
	2025 Move V0, [X8+852]
	2026 Move X8, [X31+32]
	2027 NotImplemented "Instruction FCMP not yet implemented."
	2028 NotImplemented "Instruction FCSEL not yet implemented."
	2029 Move [X8+852], S0
	2030 Add W19, W19, 1
	2031 NotImplemented "Instruction CMP not yet implemented."
	2032 NotImplemented "Instruction CMP not yet implemented."
	2033 Move W8, 0xA582
	2034 NotImplemented "Instruction MOVK not yet implemented."
	2035 NotImplemented "Instruction CMP not yet implemented."
	2036 Move W8, 0xF193
	2037 NotImplemented "Instruction MOVK not yet implemented."
	2038 NotImplemented "Instruction CMP not yet implemented."
	2039 Move W8, 0x1278
	2040 NotImplemented "Instruction CMP not yet implemented."
	2041 Move W8, 0x1286
	2042 NotImplemented "Instruction CMP not yet implemented."
	2043 Move X8, [X31+32]
	2044 Move X8, [X8+256]
	2045 Compare X8, 0
	2046 JumpIfEqual {5656}
	2047 Move X9, [X31+32]
	2048 Add X1, X8, 80
	2049 Add X0, X31, 624
	2050 Move W2, 96
	2051 Move V8, [X9+1028]
	2052 Call 0x3EB2B30
	2053 Add X0, X31, 624
	2054 Move X1, X31
	2055 Call FaceInfo.get_superscriptSize, X0
	2056 NotImplemented "Instruction FCMP not yet implemented."
	2057 Move S0, 1
	2058 Move X8, [X31+32]
	2059 Move X8, [X8+256]
	2060 Compare X8, 0
	2061 JumpIfEqual {5656}
	2062 Add X1, X8, 80
	2063 Add X0, X31, 624
	2064 Move W2, 96
	2065 Call 0x3EB2B30
	2066 Add X0, X31, 624
	2067 Move X1, X31
	2068 Call FaceInfo.get_superscriptSize, X0
	2069 Move X19, [X31+32]
	2070 Multiply S1, S8, S0
	2071 Move X8, 0x657000
	2072 Move [X19+1028], S1
	2073 Move V0, [X19+1564]
	2074 Move X8, [X8+672]
	2075 Add X0, X19, 1568
	2076 Move X1, [X8]
	2077 Call TMP_TextProcessingStack`1<Single>.Push, X0, V0
	2078 Move X8, [X19+256]
	2079 Compare X8, 0
	2080 JumpIfEqual {5656}
	2081 Move X19, [X31+32]
	2082 Add X1, X8, 80
	2083 Add X0, X31, 624
	2084 Move W2, 96
	2085 Move V8, [X19+488]
	2086 Call 0x3EB2B30
	2087 Add X0, X31, 624
	2088 Move X1, X31
	2089 Call FaceInfo.get_pointSize, X0
	2090 Move X8, [X19+256]
	2091 Compare X8, 0
	2092 JumpIfEqual {5656}
	2093 Move W20, W0
	2094 Add X1, X8, 80
	2095 Add X0, X31, 624
	2096 Move W2, 96
	2097 Call 0x3EB2B30
	2098 Add X0, X31, 624
	2099 Move X1, X31
	2100 Call FaceInfo.get_scale, X0
	2101 Move X8, [X31+32]
	2102 Move X8, [X8+256]
	2103 Compare X8, 0
	2104 JumpIfEqual {5656}
	2105 Move X19, [X31+32]
	2106 Move X10, -50429952
	2107 Move V3, [X10+188]
	2108 NotImplemented "Instruction SCVTF not yet implemented."
	2109 Move W9, [X19+773]
	2110 Move V9, [X19+1564]
	2111 Move S2, 1
	2112 NotImplemented "Instruction FDIV not yet implemented."
	2113 NotImplemented "Instruction CMP not yet implemented."
	2114 Multiply S0, S1, S0
	2115 NotImplemented "Instruction FCSEL not yet implemented."
	2116 Add X1, X8, 80
	2117 Add X0, X31, 624
	2118 Move W2, 96
	2119 Multiply S8, S0, S1
	2120 Call 0x3EB2B30
	2121 Add X0, X31, 624
	2122 Move X1, X31
	2123 Call FaceInfo.get_superscriptOffset, X0
	2124 Move V1, [X19+1028]
	2125 Multiply S0, S8, S0
	2126 Add X0, X19, 608
	2127 Move W1, 128
	2128 Multiply S0, S0, S1
	2129 Add S0, S9, S0
	2130 Move X2, X31
	2131 Move [X19+1564], S0
	2132 Call TMP_FontStyleStack.Add, X0, X1
	2133 Move W8, [X19+604]
	2134 Or W8, W8, 128
	2135 Move W11, 0x35CD
	2136 NotImplemented "Instruction MOVK not yet implemented."
	2137 NotImplemented "Instruction CMP not yet implemented."
	2138 Move W11, 0x371E
	2139 NotImplemented "Instruction MOVK not yet implemented."
	2140 NotImplemented "Instruction CMP not yet implemented."
	2141 Move W10, [X0+224]
	2142 Compare W10, 0
	2143 JumpIfNotEqual {2152}
	2144 Call 0x1C17DFC
	2145 Move X8, 0x656000
	2146 Move X8, [X8+1000]
	2147 Move X0, [X8]
	2148 Move X8, [X0+184]
	2149 Move X9, [X8+136]
	2150 Compare X9, 0
	2151 JumpIfEqual {5656}
	2152 Move W10, [X9+24]
	2153 Compare W10, 0
	2154 JumpIfEqual {5630}
	2155 Move W9, [X9+48]
	2156 NotImplemented "Instruction CMP not yet implemented."
	2157 Move W9, [X0+224]
	2158 Compare W9, 0
	2159 JumpIfNotEqual {2165}
	2160 Call 0x1C17DFC
	2161 Move X8, 0x656000
	2162 Move X8, [X8+1000]
	2163 Move X8, [X8]
	2164 Move X8, [X8+184]
	2165 Move X19, [X8+128]
	2166 Compare X19, 0
	2167 JumpIfEqual {5656}
	2168 Move W8, [X19+24]
	2169 NotImplemented "Instruction CMP not yet implemented."
	2170 NotImplemented "Instruction CMP not yet implemented."
	2171 NotImplemented "Instruction LDRH not yet implemented."
	2172 Call TMP_Text.HexToInt, X0, X1
	2173 NotImplemented "Instruction LDRH not yet implemented."
	2174 Move W20, W0
	2175 Call TMP_Text.HexToInt, X0, X1
	2176 Move X9, [X31+32]
	2177 Add W8, W0, W20
	2178 Move [X9+1263], W8
	2179 Move W8, 0x61CA
	2180 NotImplemented "Instruction MOVK not yet implemented."
	2181 NotImplemented "Instruction CMP not yet implemented."
	2182 Move W8, 0x13F1
	2183 NotImplemented "Instruction MOVK not yet implemented."
	2184 NotImplemented "Instruction CMP not yet implemented."
	2185 Move X8, [X31+32]
	2186 Move W8, [X8+600]
	2187 Move TEMP, X8
	2188 And TEMP, TEMP, 32
	2189 Compare TEMP, 32
	2190 JumpIfEqual {771}
	2191 Move X8, [X31+32]
	2192 Move W1, 32
	2193 Move X2, X31
	2194 Add X0, X8, 608
	2195 Call TMP_FontStyleStack.Remove, X0, X1
	2196 And W31, W0, 255
	2197 Move X9, [X31+32]
	2198 Move W8, [X9+604]
	2199 And W8, W8, 0xFFFFFFDF
	2200 Move W8, 0xF9C8
	2201 NotImplemented "Instruction MOVK not yet implemented."
	2202 NotImplemented "Instruction CMP not yet implemented."
	2203 Move W8, 0xF46A
	2204 NotImplemented "Instruction MOVK not yet implemented."
	2205 NotImplemented "Instruction CMP not yet implemented."
	2206 Move W8, 0x2F09
	2207 NotImplemented "Instruction MOVK not yet implemented."
	2208 NotImplemented "Instruction CMP not yet implemented."
	2209 Move W8, 0x3290
	2210 NotImplemented "Instruction MOVK not yet implemented."
	2211 NotImplemented "Instruction CMP not yet implemented."
	2212 Move X8, [X31+32]
	2213 Move [X8+730], W31
	2214 Move W8, 0xB5BA
	2215 NotImplemented "Instruction MOVK not yet implemented."
	2216 NotImplemented "Instruction CMP not yet implemented."
	2217 Move W8, 0x33C6
	2218 NotImplemented "Instruction MOVK not yet implemented."
	2219 NotImplemented "Instruction CMP not yet implemented."
	2220 Move W8, [X0+224]
	2221 Compare W8, 0
	2222 JumpIfNotEqual {2231}
	2223 Call 0x1C17DFC
	2224 Move X8, 0x656000
	2225 Move X8, [X8+1000]
	2226 Move X8, [X8]
	2227 Move X8, [X8+184]
	2228 Move X9, [X8+136]
	2229 Compare X9, 0
	2230 JumpIfEqual {5656}
	2231 Move W8, [X9+24]
	2232 Compare W8, 0
	2233 JumpIfEqual {5630}
	2234 Move W1, [X9+36]
	2235 Move X8, [X31+32]
	2236 Move [X31+724], W1
	2237 Move W8, [X8+1073]
	2238 Compare W8, 0
	2239 JumpIfEqual {771}
	2240 Move X8, 0x657000
	2241 Move X8, [X8+592]
	2242 Move X19, [X31+32]
	2243 Move X2, [X8]
	2244 Add X0, X19, 1528
	2245 Call TMP_TextProcessingStack`1<Int32>.Add, X0, X1
	2246 Add X0, X31, 724
	2247 Move X1, X31
	2248 Call Int32.ToString, X0
	2249 Move X20, X0
	2250 Add X0, X19, 1172
	2251 Move X1, X31
	2252 Call Int32.ToString, X0
	2253 Move X8, 0x657000
	2254 Move X8, [X8+744]
	2255 Move X9, 0x657000
	2256 Move X9, [X9+752]
	2257 Move X3, X0
	2258 Move X8, [X8]
	2259 Move X1, X20
	2260 Move X2, [X9]
	2261 Move X4, X31
	2262 Move X0, X8
	2263 Call String.Concat, X0, X1, X2, X3
	2264 Move X8, 0x5F1000
	2265 Move X8, [X8+2600]
	2266 Move X19, X0
	2267 Move X8, [X8]
	2268 Move W9, [X8+224]
	2269 Compare W9, 0
	2270 JumpIfNotEqual {2273}
	2271 Move X0, X8
	2272 Call 0x1C17DFC
	2273 Move X0, X19
	2274 Move X1, X31
	2275 Call Debug.Log, X0
	2276 NotImplemented "Instruction CMP not yet implemented."
	2277 NotImplemented "Instruction CMP not yet implemented."
	2278 Move X8, [X31+32]
	2279 Move W8, [X8+600]
	2280 Move TEMP, X8
	2281 And TEMP, TEMP, 4
	2282 Compare TEMP, 4
	2283 JumpIfEqual {2300}
	2284 Move X8, 0x657000
	2285 Move X8, [X8+696]
	2286 Move X19, [X31+32]
	2287 Move X1, [X8]
	2288 Add X0, X19, 1296
	2289 Call 0x2672074, X0
	2290 Move [X19+344], W0
	2291 Add X0, X19, 608
	2292 Move W1, 4
	2293 Move X2, X31
	2294 Call TMP_FontStyleStack.Remove, X0, X1
	2295 And W31, W0, 255
	2296 Move X9, [X31+32]
	2297 Move W8, [X9+604]
	2298 And W8, W8, 0xFFFFFFFB
	2299 Move [X9+604], W8
	2300 Move X8, 0x657000
	2301 Move X8, [X8+696]
	2302 Move X19, [X31+32]
	2303 Move X1, [X8]
	2304 Add X0, X19, 1296
	2305 Call 0x2672074, X0
	2306 Move [X19+344], W0
	2307 Move W8, 0x5EEA
	2308 NotImplemented "Instruction MOVK not yet implemented."
	2309 NotImplemented "Instruction CMP not yet implemented."
	2310 Move W8, 0xA05A
	2311 NotImplemented "Instruction MOVK not yet implemented."
	2312 NotImplemented "Instruction CMP not yet implemented."
	2313 Move X8, [X31+32]
	2314 Move W20, 1
	2315 Move [X8+1072], W20
	2316 Move X9, [X31+32]
	2317 Move W1, 16
	2318 Move W8, [X9+604]
	2319 Add X0, X9, 608
	2320 Or W8, W8, 16
	2321 Move W8, 0x50C5
	2322 NotImplemented "Instruction CMP not yet implemented."
	2323 Move W8, 0x5171
	2324 NotImplemented "Instruction CMP not yet implemented."
	2325 Move X8, [X31+32]
	2326 Move W8, [X8+605]
	2327 Move TEMP, X8
	2328 And TEMP, TEMP, 1
	2329 Compare TEMP, 1
	2330 JumpIfNotEqual {771}
	2331 Move X8, [X31+32]
	2332 Move S1, 1
	2333 Move V0, [X8+1028]
	2334 NotImplemented "Instruction FCMP not yet implemented."
	2335 Move X8, 0x657000
	2336 Move X8, [X8+656]
	2337 Move X19, [X31+32]
	2338 Move X1, [X8]
	2339 Add X0, X19, 1568
	2340 Call TMP_TextProcessingStack`1<Single>.Pop, X0
	2341 Move X8, [X19+256]
	2342 Move [X19+1564], S0
	2343 Compare X8, 0
	2344 JumpIfEqual {5656}
	2345 Move X9, [X31+32]
	2346 Add X1, X8, 80
	2347 Add X0, X31, 624
	2348 Move W2, 96
	2349 Move V8, [X9+1028]
	2350 Call 0x3EB2B30
	2351 Add X0, X31, 624
	2352 Move X1, X31
	2353 Call FaceInfo.get_subscriptSize, X0
	2354 NotImplemented "Instruction FCMP not yet implemented."
	2355 Move S0, 1
	2356 Move X8, [X31+32]
	2357 Move X8, [X8+256]
	2358 Compare X8, 0
	2359 JumpIfEqual {5656}
	2360 Add X1, X8, 80
	2361 Add X0, X31, 624
	2362 Move W2, 96
	2363 Call 0x3EB2B30
	2364 Add X0, X31, 624
	2365 Move X1, X31
	2366 Call FaceInfo.get_subscriptSize, X0
	2367 Move X8, [X31+32]
	2368 NotImplemented "Instruction FDIV not yet implemented."
	2369 Move [X8+1028], S0
	2370 Move X8, [X31+32]
	2371 Move W1, 256
	2372 Move X2, X31
	2373 Add X0, X8, 608
	2374 Call TMP_FontStyleStack.Remove, X0, X1
	2375 And W31, W0, 255
	2376 Move X9, [X31+32]
	2377 Move W8, [X9+604]
	2378 And W8, W8, 0xFFFFFEFF
	2379 Move W11, 0xD806
	2380 NotImplemented "Instruction MOVK not yet implemented."
	2381 NotImplemented "Instruction CMP not yet implemented."
	2382 Move W11, 0xE24E
	2383 NotImplemented "Instruction MOVK not yet implemented."
	2384 NotImplemented "Instruction CMP not yet implemented."
	2385 Move W10, [X0+224]
	2386 Compare W10, 0
	2387 JumpIfNotEqual {2396}
	2388 Call 0x1C17DFC
	2389 Move X8, 0x656000
	2390 Move X8, [X8+1000]
	2391 Move X8, [X8]
	2392 Move X8, [X8+184]
	2393 Move X9, [X8+136]
	2394 Compare X9, 0
	2395 JumpIfEqual {5656}
	2396 Move W10, [X9+24]
	2397 Compare W10, 0
	2398 JumpIfEqual {5630}
	2399 Move X1, [X8+128]
	2400 Move W2, [X9+44]
	2401 Move W3, [X9+48]
	2402 Add X4, X31, 112
	2403 Move [X31+112], W31
	2404 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	2405 Move W8, 0xC7000000
	2406 Move S1, W8
	2407 NotImplemented "Instruction FCMP not yet implemented."
	2408 Move W8, [X31+44]
	2409 NotImplemented "Instruction CMP not yet implemented."
	2410 Move W8, [X31+44]
	2411 Compare W8, 0
	2412 JumpIfNotEqual {5700}
	2413 Move X10, [X31+32]
	2414 Move X9, -50429952
	2415 Move V1, [X9+188]
	2416 Move S2, 1
	2417 Move W8, [X10+773]
	2418 Move V3, [X10+1600]
	2419 NotImplemented "Instruction CMP not yet implemented."
	2420 NotImplemented "Instruction FCSEL not yet implemented."
	2421 Multiply S0, S0, S1
	2422 Add S0, S3, S0
	2423 Move W11, 0x8478
	2424 NotImplemented "Instruction MOVK not yet implemented."
	2425 NotImplemented "Instruction CMP not yet implemented."
	2426 Move W11, 0x139D
	2427 NotImplemented "Instruction MOVK not yet implemented."
	2428 NotImplemented "Instruction CMP not yet implemented."
	2429 Move W10, [X0+224]
	2430 Compare W10, 0
	2431 JumpIfNotEqual {2440}
	2432 Call 0x1C17DFC
	2433 Move X8, 0x656000
	2434 Move X8, [X8+1000]
	2435 Move X8, [X8]
	2436 Move X8, [X8+184]
	2437 Move X9, [X8+136]
	2438 Compare X9, 0
	2439 JumpIfEqual {5656}
	2440 Move W10, [X9+24]
	2441 Compare W10, 0
	2442 JumpIfEqual {5630}
	2443 Move X1, [X8+128]
	2444 Move W2, [X9+44]
	2445 Move W3, [X9+48]
	2446 Add X4, X31, 112
	2447 Move [X31+112], W31
	2448 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	2449 Move W8, 0xC7000000
	2450 Move S1, W8
	2451 NotImplemented "Instruction FCMP not yet implemented."
	2452 Move W8, [X31+44]
	2453 Compare W8, 0
	2454 JumpIfEqual {4570}
	2455 Move W8, [X31+44]
	2456 NotImplemented "Instruction CMP not yet implemented."
	2457 Move W8, [X31+44]
	2458 NotImplemented "Instruction CMP not yet implemented."
	2459 Move X9, [X31+32]
	2460 Move W8, 0x42C80000
	2461 Move V1, [X9+856]
	2462 Multiply S0, S0, S1
	2463 Move S1, W8
	2464 NotImplemented "Instruction FDIV not yet implemented."
	2465 Move [X9+1032], S0
	2466 Move W11, 920
	2467 NotImplemented "Instruction MOVK not yet implemented."
	2468 NotImplemented "Instruction CMP not yet implemented."
	2469 Move W11, 0xD9F7
	2470 NotImplemented "Instruction MOVK not yet implemented."
	2471 NotImplemented "Instruction CMP not yet implemented."
	2472 Move W10, [X0+224]
	2473 Compare W10, 0
	2474 JumpIfNotEqual {2483}
	2475 Call 0x1C17DFC
	2476 Move X8, 0x656000
	2477 Move X8, [X8+1000]
	2478 Move X0, [X8]
	2479 Move X8, [X0+184]
	2480 Move X9, [X8+136]
	2481 Compare X9, 0
	2482 JumpIfEqual {5656}
	2483 Move W10, [X9+24]
	2484 Compare W10, 0
	2485 JumpIfEqual {5630}
	2486 Move W20, [X9+36]
	2487 Move W9, 0x756B
	2488 NotImplemented "Instruction MOVK not yet implemented."
	2489 NotImplemented "Instruction CMP not yet implemented."
	2490 Move W9, 0xF54B
	2491 NotImplemented "Instruction MOVK not yet implemented."
	2492 NotImplemented "Instruction CMP not yet implemented."
	2493 Move W9, [X0+224]
	2494 Compare W9, 0
	2495 JumpIfNotEqual {2501}
	2496 Call 0x1C17DFC
	2497 Move X8, 0x656000
	2498 Move X8, [X8+1000]
	2499 Move X8, [X8]
	2500 Move X8, [X8+184]
	2501 Move X9, [X8]
	2502 Compare X9, 0
	2503 JumpIfEqual {5656}
	2504 Move W10, [X9+24]
	2505 Compare W10, 0
	2506 JumpIfEqual {5630}
	2507 Move X10, [X9+56]
	2508 Move X11, [X31+32]
	2509 Add X0, X8, 16
	2510 Move X8, 0x657000
	2511 Move [X11+288], W31
	2512 Move [X11+280], X10
	2513 Move X8, [X8+624]
	2514 Move V2, [X9+48]
	2515 Move V0, [X9+64]
	2516 Move X10, [X9+80]
	2517 Move V1, [X9+2]
	2518 Move X2, [X8]
	2519 Move [X31+320], V2
	2520 Move [X31+328], V0
	2521 Move [X31+352], X10
	2522 Move [X31+19], V1
	2523 Add X1, X31, 112
	2524 Move [X31+112], V1
	2525 Move [X31+120], V2
	2526 Move [X31+9], V0
	2527 Move [X31+160], X10
	2528 Call TMP_TextProcessingStack`1<MaterialReference>.Add, X0, X1
	2529 Move W11, 0x79D7
	2530 NotImplemented "Instruction CMP not yet implemented."
	2531 Move W11, 0x7FE9
	2532 NotImplemented "Instruction CMP not yet implemented."
	2533 Move W10, [X0+224]
	2534 Compare W10, 0
	2535 JumpIfNotEqual {2544}
	2536 Call 0x1C17DFC
	2537 Move X8, 0x656000
	2538 Move X8, [X8+1000]
	2539 Move X8, [X8]
	2540 Move X8, [X8+184]
	2541 Move X9, [X8+136]
	2542 Compare X9, 0
	2543 JumpIfEqual {5656}
	2544 Move W10, [X9+24]
	2545 Compare W10, 0
	2546 JumpIfEqual {5630}
	2547 Move X1, [X8+128]
	2548 Move W2, [X9+44]
	2549 Move W3, [X9+48]
	2550 Add X4, X31, 112
	2551 Move [X31+112], W31
	2552 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	2553 Move W8, 0xC7000000
	2554 Move V8, V0
	2555 Move S0, W8
	2556 NotImplemented "Instruction FCMP not yet implemented."
	2557 Move W8, [X31+44]
	2558 NotImplemented "Instruction CMP not yet implemented."
	2559 Move W8, [X31+44]
	2560 NotImplemented "Instruction CMP not yet implemented."
	2561 Move W8, [X31+44]
	2562 Compare W8, 0
	2563 JumpIfNotEqual {5700}
	2564 Move X8, 0x656000
	2565 Move X8, [X8+1000]
	2566 Move X0, [X8]
	2567 Move W8, [X0+224]
	2568 Compare W8, 0
	2569 JumpIfNotEqual {2574}
	2570 Call 0x1C17DFC
	2571 Move X8, 0x656000
	2572 Move X8, [X8+1000]
	2573 Move X0, [X8]
	2574 Move X8, [X0+184]
	2575 Move X8, [X8+128]
	2576 Compare X8, 0
	2577 JumpIfEqual {5656}
	2578 Move W9, [X8+24]
	2579 NotImplemented "Instruction CMP not yet implemented."
	2580 NotImplemented "Instruction LDRH not yet implemented."
	2581 NotImplemented "Instruction CMP not yet implemented."
	2582 Move W9, [X0+224]
	2583 Compare W9, 0
	2584 JumpIfNotEqual {2593}
	2585 Call 0x1C17DFC
	2586 Move X8, 0x656000
	2587 Move X8, [X8+1000]
	2588 Move X8, [X8]
	2589 Move X8, [X8+184]
	2590 Move X8, [X8+128]
	2591 Compare X8, 0
	2592 JumpIfEqual {5656}
	2593 Move W9, [X8+24]
	2594 NotImplemented "Instruction CMP not yet implemented."
	2595 NotImplemented "Instruction LDRH not yet implemented."
	2596 NotImplemented "Instruction CMP not yet implemented."
	2597 Move X9, [X31+32]
	2598 Move V0, [X9+484]
	2599 Add S0, S8, S0
	2600 Move W8, 0xDECB
	2601 NotImplemented "Instruction MOVK not yet implemented."
	2602 NotImplemented "Instruction CMP not yet implemented."
	2603 Move W8, 0xE5AF
	2604 NotImplemented "Instruction MOVK not yet implemented."
	2605 NotImplemented "Instruction CMP not yet implemented."
	2606 Move X8, [X31+32]
	2607 Move [X8+1140], W31
	2608 NotImplemented "Instruction CMP not yet implemented."
	2609 NotImplemented "Instruction CMP not yet implemented."
	2610 Move X9, [X31+32]
	2611 Move W1, 64
	2612 Move X2, X31
	2613 Move W8, [X9+604]
	2614 Add X0, X9, 608
	2615 Or W8, W8, 64
	2616 Move [X9+604], W8
	2617 Call TMP_FontStyleStack.Add, X0, X1
	2618 Move X8, 0x656000
	2619 Move X8, [X8+1000]
	2620 Move X0, [X8]
	2621 Move W8, [X0+224]
	2622 Compare W8, 0
	2623 JumpIfNotEqual {2628}
	2624 Call 0x1C17DFC
	2625 Move X8, 0x656000
	2626 Move X8, [X8+1000]
	2627 Move X0, [X8]
	2628 Move X8, [X0+184]
	2629 Move X8, [X8+136]
	2630 Compare X8, 0
	2631 JumpIfEqual {5656}
	2632 Move W9, [X8+24]
	2633 NotImplemented "Instruction CMP not yet implemented."
	2634 Move W9, [X8+56]
	2635 Move W10, 0x4D63
	2636 NotImplemented "Instruction MOVK not yet implemented."
	2637 NotImplemented "Instruction CMP not yet implemented."
	2638 Move W9, [X0+224]
	2639 Compare W9, 0
	2640 JumpIfNotEqual {2649}
	2641 Call 0x1C17DFC
	2642 Move X8, 0x656000
	2643 Move X8, [X8+1000]
	2644 Move X0, [X8]
	2645 Move X8, [X0+184]
	2646 Move X8, [X8+136]
	2647 Compare X8, 0
	2648 JumpIfEqual {5656}
	2649 Move W9, [X8+24]
	2650 NotImplemented "Instruction CMP not yet implemented."
	2651 Move W8, [X8+56]
	2652 Move W9, 0xEF43
	2653 NotImplemented "Instruction MOVK not yet implemented."
	2654 NotImplemented "Instruction CMP not yet implemented."
	2655 Move W8, [X0+224]
	2656 Compare W8, 0
	2657 JumpIfNotEqual {2662}
	2658 Call 0x1C17DFC
	2659 Move X8, 0x656000
	2660 Move X8, [X8+1000]
	2661 Move X0, [X8]
	2662 Move X9, [X0+184]
	2663 Move X8, [X9+136]
	2664 Compare X8, 0
	2665 JumpIfEqual {5656}
	2666 Move W10, [X8+24]
	2667 NotImplemented "Instruction CMP not yet implemented."
	2668 Move X1, [X9+128]
	2669 Move W2, [X8+68]
	2670 Move W3, [X8+72]
	2671 Call TMP_Text.HexCharsToColor, X0, X1, X2, X3
	2672 Move X11, [X31+32]
	2673 Move X10, X0
	2674 ShiftRight X10, 24
	2675 And X10, X10, 0x7FFFFFFF
	2676 Move W8, [X11+1263]
	2677 Add X9, X11, 348
	2678 Move [X11+348], W0
	2679 NotImplemented "Instruction CMP not yet implemented."
	2680 NotImplemented "Instruction CSEL not yet implemented."
	2681 Move [X9+3], W8
	2682 Move W8, [X11+348]
	2683 Move W8, 0x5E93
	2684 NotImplemented "Instruction MOVK not yet implemented."
	2685 NotImplemented "Instruction CMP not yet implemented."
	2686 Move W8, 0xFE3D
	2687 NotImplemented "Instruction MOVK not yet implemented."
	2688 NotImplemented "Instruction CMP not yet implemented."
	2689 Move X8, [X31+32]
	2690 NotImplemented "Instruction MOVI not yet implemented."
	2691 Move [X8+848], D0
	2692 NotImplemented "Instruction CMP not yet implemented."
	2693 NotImplemented "Instruction CSET not yet implemented."
	2694 Move W11, 0xEF43
	2695 NotImplemented "Instruction MOVK not yet implemented."
	2696 NotImplemented "Instruction CMP not yet implemented."
	2697 Move W11, 0x7302
	2698 NotImplemented "Instruction MOVK not yet implemented."
	2699 NotImplemented "Instruction CMP not yet implemented."
	2700 Move W10, [X0+224]
	2701 Compare W10, 0
	2702 JumpIfNotEqual {2711}
	2703 Call 0x1C17DFC
	2704 Move X8, 0x656000
	2705 Move X8, [X8+1000]
	2706 Move X8, [X8]
	2707 Move X8, [X8+184]
	2708 Move X9, [X8+136]
	2709 Compare X9, 0
	2710 JumpIfEqual {5656}
	2711 Move W10, [X9+24]
	2712 Compare W10, 0
	2713 JumpIfEqual {5630}
	2714 Move X1, [X8+128]
	2715 Move W2, [X9+44]
	2716 Move W3, [X9+48]
	2717 Add X4, X31, 112
	2718 Move [X31+112], W31
	2719 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	2720 Move W8, 0xC7000000
	2721 Move V8, V0
	2722 Move S0, W8
	2723 NotImplemented "Instruction FCMP not yet implemented."
	2724 Move X19, 0x8D6000
	2725 Move W8, [X19+1923]
	2726 Compare W8, 0
	2727 JumpIfNotEqual {2733}
	2728 Move X0, 0x5F1000
	2729 Move X0, [X0+1440]
	2730 Call 0x1C17CF4
	2731 Move W8, 1
	2732 Move [X19+1923], W8
	2733 Move X8, 0x5F1000
	2734 Move X8, [X8+1440]
	2735 Move X19, 0x8D6000
	2736 Move W9, [X19+1939]
	2737 Move X8, [X8]
	2738 Move X8, [X8+184]
	2739 Move S11, [X8]
	2740 Move S10, [X8+4]
	2741 Move V9, [X8+8]
	2742 Compare W9, 0
	2743 JumpIfNotEqual {2749}
	2744 Move X0, 0x5F2000
	2745 Move X0, [X0+1448]
	2746 Call 0x1C17CF4
	2747 Move W8, 1
	2748 Move [X19+1939], W8
	2749 Move X8, 0x5F2000
	2750 Move X8, [X8+1448]
	2751 Or X9, X31, 0x3F8000003F800000
	2752 Move V0, V11
	2753 Move V1, V10
	2754 Move X8, [X8]
	2755 Move V2, V9
	2756 Move X8, [X8+184]
	2757 Move S3, [X8]
	2758 Move S4, [X8+4]
	2759 Move S5, [X8+8]
	2760 Move S6, [X8+12]
	2761 Add X8, X31, 48
	2762 Move [X31+4], X9
	2763 Move [X31], S8
	2764 Move X0, X31
	2765 Call Matrix4x4.TRS, X0, X1, X2
	2766 Move X9, [X31+32]
	2767 Move V1, [X31+80]
	2768 Move V0, [X31+96]
	2769 Move V3, [X31+48]
	2770 Move V2, [X31+64]
	2771 Move W20, 1
	2772 Add X8, X9, 1076
	2773 Move [X31+144], V1
	2774 Move [X31+152], V0
	2775 Move [X31+112], V3
	2776 Move [X31+120], V2
	2777 Move [X8+32], V1
	2778 Move [X8+40], V0
	2779 Move [X8], V3
	2780 Move [X8+8], V2
	2781 Move [X9+1140], W20
	2782 Move W8, 0x8677
	2783 NotImplemented "Instruction MOVK not yet implemented."
	2784 NotImplemented "Instruction CMP not yet implemented."
	2785 Move W8, 0x65AA
	2786 NotImplemented "Instruction MOVK not yet implemented."
	2787 NotImplemented "Instruction CMP not yet implemented."
	2788 Move X8, [X31+32]
	2789 Move W8, [X8+600]
	2790 Move TEMP, X8
	2791 And TEMP, TEMP, 8
	2792 Compare TEMP, 8
	2793 JumpIfEqual {771}
	2794 Move X8, [X31+32]
	2795 Move W1, 8
	2796 Move X2, X31
	2797 Add X0, X8, 608
	2798 Call TMP_FontStyleStack.Remove, X0, X1
	2799 And W31, W0, 255
	2800 Move X9, [X31+32]
	2801 Move W8, [X9+604]
	2802 And W8, W8, 0xFFFFFFF7
	2803 Move X8, [X31+32]
	2804 Move W8, [X8+1073]
	2805 Compare W8, 0
	2806 JumpIfEqual {771}
	2807 Move X8, [X31+32]
	2808 Move W8, [X8+1013]
	2809 Compare W8, 0
	2810 JumpIfNotEqual {771}
	2811 Move X8, [X31+32]
	2812 Move X8, [X8+872]
	2813 Compare X8, 0
	2814 JumpIfEqual {5656}
	2815 Move X10, [X8+72]
	2816 Compare X10, 0
	2817 JumpIfEqual {5656}
	2818 NotImplemented "Instruction LDRSW not yet implemented."
	2819 Move W11, [X10+24]
	2820 NotImplemented "Instruction CMP not yet implemented."
	2821 NotImplemented "Instruction CMP not yet implemented."
	2822 Move X11, [X31+32]
	2823 Move W12, 40
	2824 NotImplemented "Instruction MADD not yet implemented."
	2825 Move W12, [X10+52]
	2826 Move W11, [X11+1172]
	2827 Add W9, W9, 1
	2828 Subtract W11, W11, W12
	2829 Move [X10+56], W11
	2830 Move [X8+40], W9
	2831 Move X8, [X31+32]
	2832 Move W8, [X8+600]
	2833 Move TEMP, X8
	2834 And TEMP, TEMP, 64
	2835 Compare TEMP, 64
	2836 JumpIfEqual {2847}
	2837 Move X8, [X31+32]
	2838 Move W1, 64
	2839 Move X2, X31
	2840 Add X0, X8, 608
	2841 Call TMP_FontStyleStack.Remove, X0, X1
	2842 And W31, W0, 255
	2843 Move X9, [X31+32]
	2844 Move W8, [X9+604]
	2845 And W8, W8, 0xFFFFFFBF
	2846 Move [X9+604], W8
	2847 Move X8, 0x657000
	2848 Move X8, [X8+696]
	2849 Move X19, [X31+32]
	2850 Move X1, [X8]
	2851 Add X0, X19, 1328
	2852 Call 0x2672074, X0
	2853 Move [X19+348], W0
	2854 Move X8, [X31+32]
	2855 Move W20, 1
	2856 Move W8, [X8+736]
	2857 NotImplemented "Instruction CMP not yet implemented."
	2858 Move X9, [X31+32]
	2859 Move S2, W31
	2860 Move V0, [X9+1032]
	2861 Move V1, [X9+1036]
	2862 Move W8, [X9+1200]
	2863 Move [X9+1240], W31
	2864 Add S0, S0, S2
	2865 Add S0, S0, S1
	2866 Add W8, W8, 1
	2867 Move [X9+1200], W8
	2868 Move [X9+1600], S0
	2869 Move [X9+828], W20
	2870 Move X9, [X31+32]
	2871 Move W1, 2
	2872 Move X2, X31
	2873 Move W8, [X9+604]
	2874 Add X0, X9, 608
	2875 Or W8, W8, 2
	2876 Move [X9+604], W8
	2877 Call TMP_FontStyleStack.Add, X0, X1
	2878 Move X8, 0x656000
	2879 Move X8, [X8+1000]
	2880 Move X0, [X8]
	2881 Move W8, [X0+224]
	2882 Compare W8, 0
	2883 JumpIfNotEqual {2888}
	2884 Call 0x1C17DFC
	2885 Move X8, 0x656000
	2886 Move X8, [X8+1000]
	2887 Move X0, [X8]
	2888 Move X8, [X0+184]
	2889 Move X8, [X8+136]
	2890 Compare X8, 0
	2891 JumpIfEqual {5656}
	2892 Move W9, [X8+24]
	2893 NotImplemented "Instruction CMP not yet implemented."
	2894 Move W9, [X8+56]
	2895 Move W10, 0x371E
	2896 NotImplemented "Instruction MOVK not yet implemented."
	2897 Add W10, W10, 277
	2898 NotImplemented "Instruction CMP not yet implemented."
	2899 Move W9, [X0+224]
	2900 Compare W9, 0
	2901 JumpIfNotEqual {2910}
	2902 Call 0x1C17DFC
	2903 Move X8, 0x656000
	2904 Move X8, [X8+1000]
	2905 Move X0, [X8]
	2906 Move X8, [X0+184]
	2907 Move X8, [X8+136]
	2908 Compare X8, 0
	2909 JumpIfEqual {5656}
	2910 Move W9, [X8+24]
	2911 NotImplemented "Instruction CMP not yet implemented."
	2912 Move W8, [X8+56]
	2913 Add W9, W19, 277
	2914 NotImplemented "Instruction CMP not yet implemented."
	2915 Move W8, [X0+224]
	2916 Compare W8, 0
	2917 JumpIfNotEqual {2922}
	2918 Call 0x1C17DFC
	2919 Move X8, 0x656000
	2920 Move X8, [X8+1000]
	2921 Move X0, [X8]
	2922 Move X9, [X0+184]
	2923 Move X8, [X9+136]
	2924 Compare X8, 0
	2925 JumpIfEqual {5656}
	2926 Move W10, [X8+24]
	2927 NotImplemented "Instruction CMP not yet implemented."
	2928 Move X1, [X9+128]
	2929 Move W2, [X8+68]
	2930 Move W3, [X8+72]
	2931 Add X4, X31, 112
	2932 Move [X31+112], W31
	2933 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	2934 Move W8, 0x7F800000
	2935 Move S1, W8
	2936 NotImplemented "Instruction FCVTZS not yet implemented."
	2937 NotImplemented "Instruction FCMP not yet implemented."
	2938 Move W8, 0x80000000
	2939 NotImplemented "Instruction CSEL not yet implemented."
	2940 Add W8, W1, 180
	2941 NotImplemented "Instruction CMP not yet implemented."
	2942 Move X8, [X31+32]
	2943 Move W20, W31
	2944 Move [X8+1520], W1
	2945 Move X8, 0x656000
	2946 Move X8, [X8+712]
	2947 Move X19, [X31+32]
	2948 Move X1, [X8]
	2949 Add X0, X19, 1040
	2950 Call TMP_TextProcessingStack`1<Single>.Remove, X0
	2951 Move [X19+1036], S0
	2952 Move W10, [X0+224]
	2953 Compare W10, 0
	2954 JumpIfNotEqual {2963}
	2955 Call 0x1C17DFC
	2956 Move X8, 0x655000
	2957 Move X8, [X8+1000]
	2958 Move X8, [X8]
	2959 Move X8, [X8+184]
	2960 Move X9, [X8+136]
	2961 Compare X9, 0
	2962 JumpIfEqual {5656}
	2963 Move W10, [X9+24]
	2964 Compare W10, 0
	2965 JumpIfEqual {5630}
	2966 Move X1, [X8+128]
	2967 Move W2, [X9+44]
	2968 Move W3, [X9+48]
	2969 Add X4, X31, 112
	2970 Move [X31+112], W31
	2971 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	2972 Move W8, 0xC7000000
	2973 Move S1, W8
	2974 NotImplemented "Instruction FCMP not yet implemented."
	2975 Move W8, [X31+44]
	2976 Compare W8, 0
	2977 JumpIfEqual {4610}
	2978 Move W8, [X31+44]
	2979 NotImplemented "Instruction CMP not yet implemented."
	2980 Move W8, [X31+44]
	2981 NotImplemented "Instruction CMP not yet implemented."
	2982 Move W10, [X0+224]
	2983 Compare W10, 0
	2984 JumpIfNotEqual {2993}
	2985 Call 0x1C17DFC
	2986 Move X8, 0x655000
	2987 Move X8, [X8+1000]
	2988 Move X8, [X8]
	2989 Move X8, [X8+184]
	2990 Move X9, [X8+136]
	2991 Compare X9, 0
	2992 JumpIfEqual {5656}
	2993 Move W10, [X9+24]
	2994 Compare W10, 0
	2995 JumpIfEqual {5630}
	2996 Move X1, [X8+128]
	2997 Move W2, [X9+44]
	2998 Move W3, [X9+48]
	2999 Add X4, X31, 112
	3000 Move [X31+112], W31
	3001 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	3002 Move W8, 0xC7000000
	3003 Move S1, W8
	3004 NotImplemented "Instruction FCMP not yet implemented."
	3005 Move W8, [X31+44]
	3006 NotImplemented "Instruction CMP not yet implemented."
	3007 Move W8, [X31+44]
	3008 Compare W8, 0
	3009 JumpIfNotEqual {5700}
	3010 Move X10, [X31+32]
	3011 Move X9, -50434048
	3012 Move V1, [X9+188]
	3013 Move S2, 1
	3014 Move W8, [X10+773]
	3015 NotImplemented "Instruction CMP not yet implemented."
	3016 NotImplemented "Instruction FCSEL not yet implemented."
	3017 Multiply S0, S0, S1
	3018 Move X8, [X31+32]
	3019 Move W8, [X8+604]
	3020 Move TEMP, X8
	3021 And TEMP, TEMP, 128
	3022 Compare TEMP, 128
	3023 JumpIfNotEqual {771}
	3024 Move X8, [X31+32]
	3025 Move S1, 1
	3026 Move V0, [X8+1028]
	3027 NotImplemented "Instruction FCMP not yet implemented."
	3028 Move X8, 0x656000
	3029 Move X8, [X8+656]
	3030 Move X19, [X31+32]
	3031 Move X1, [X8]
	3032 Add X0, X19, 1568
	3033 Call TMP_TextProcessingStack`1<Single>.Pop, X0
	3034 Move X8, [X19+256]
	3035 Move [X19+1564], S0
	3036 Compare X8, 0
	3037 JumpIfEqual {5656}
	3038 Move X9, [X31+32]
	3039 Add X1, X8, 80
	3040 Add X0, X31, 624
	3041 Move W2, 96
	3042 Move V8, [X9+1028]
	3043 Call 0x3EB2B30
	3044 Add X0, X31, 624
	3045 Move X1, X31
	3046 Call FaceInfo.get_superscriptSize, X0
	3047 NotImplemented "Instruction FCMP not yet implemented."
	3048 Move S0, 1
	3049 Move X8, [X31+32]
	3050 Move X8, [X8+256]
	3051 Compare X8, 0
	3052 JumpIfEqual {5656}
	3053 Add X1, X8, 80
	3054 Add X0, X31, 624
	3055 Move W2, 96
	3056 Call 0x3EB2B30
	3057 Add X0, X31, 624
	3058 Move X1, X31
	3059 Call FaceInfo.get_superscriptSize, X0
	3060 Move X8, [X31+32]
	3061 NotImplemented "Instruction FDIV not yet implemented."
	3062 Move [X8+1028], S0
	3063 Move X8, [X31+32]
	3064 Move W1, 128
	3065 Move X2, X31
	3066 Add X0, X8, 608
	3067 Call TMP_FontStyleStack.Remove, X0, X1
	3068 And W31, W0, 255
	3069 Move X9, [X31+32]
	3070 Move W8, [X9+604]
	3071 And W8, W8, 0xFFFFFF7F
	3072 Move [X9+604], W8
	3073 Move X19, [X31+32]
	3074 Move W1, 1
	3075 Move X2, X31
	3076 Move W20, 1
	3077 Move W8, [X19+604]
	3078 Add X0, X19, 608
	3079 Or W8, W8, 1
	3080 Move [X19+604], W8
	3081 Call TMP_FontStyleStack.Add, X0, X1
	3082 Move W8, 700
	3083 Move [X19+532], W8
	3084 Move W9, [X0+224]
	3085 Compare W9, 0
	3086 JumpIfNotEqual {3092}
	3087 Call 0x1C17DFC
	3088 Move X8, 0x655000
	3089 Move X8, [X8+1000]
	3090 Move X8, [X8]
	3091 Move X8, [X8+184]
	3092 Move X9, 0x656000
	3093 Move X9, [X9+728]
	3094 Add X0, X8, 16
	3095 Add X8, X31, 112
	3096 Move X1, [X9]
	3097 Call TMP_TextProcessingStack`1<MaterialReference>.Remove, X0
	3098 Move X8, [X31+136]
	3099 Move W9, [X31+112]
	3100 Move X10, [X31+32]
	3101 Move [X10+280], X8
	3102 Move [X10+288], W9
	3103 Move X8, [X31+32]
	3104 Move W20, 1
	3105 Move [X8+730], W20
	3106 Move W10, [X0+224]
	3107 Compare W10, 0
	3108 JumpIfNotEqual {3117}
	3109 Call 0x1C17DFC
	3110 Move X8, 0x655000
	3111 Move X8, [X8+1000]
	3112 Move X8, [X8]
	3113 Move X8, [X8+184]
	3114 Move X9, [X8+136]
	3115 Compare X9, 0
	3116 JumpIfEqual {5656}
	3117 Move W10, [X9+24]
	3118 Compare W10, 0
	3119 JumpIfEqual {5630}
	3120 Move X1, [X8+128]
	3121 Move W2, [X9+44]
	3122 Move W3, [X9+48]
	3123 Add X4, X31, 112
	3124 Move [X31+112], W31
	3125 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	3126 Move W8, 0xC7000000
	3127 Move S1, W8
	3128 NotImplemented "Instruction FCMP not yet implemented."
	3129 Move W8, [X31+44]
	3130 Compare W8, 0
	3131 JumpIfEqual {4629}
	3132 Move W8, [X31+44]
	3133 NotImplemented "Instruction CMP not yet implemented."
	3134 Move W8, [X31+44]
	3135 NotImplemented "Instruction CMP not yet implemented."
	3136 Move X9, [X31+32]
	3137 Move W8, 0x42C80000
	3138 Move V1, [X9+856]
	3139 Multiply S0, S0, S1
	3140 Move S1, W8
	3141 NotImplemented "Instruction FDIV not yet implemented."
	3142 Move [X9+1036], S0
	3143 Move X8, [X31+32]
	3144 Move W8, [X8+1073]
	3145 Compare W8, 0
	3146 JumpIfEqual {771}
	3147 Move X8, [X31+32]
	3148 Move W8, [X8+1172]
	3149 Subtract W8, W8, 1
	3150 Move X10, [X31+32]
	3151 Move V0, [X10+1600]
	3152 Move V1, [X10+684]
	3153 Move X9, [X10+872]
	3154 Subtract S0, S0, S1
	3155 Move [X10+1600], S0
	3156 Compare X9, 0
	3157 JumpIfEqual {5656}
	3158 Move X9, [X9+56]
	3159 Compare X9, 0
	3160 JumpIfEqual {5656}
	3161 Move W10, [X9+24]
	3162 NotImplemented "Instruction CMP not yet implemented."
	3163 Move W10, 376
	3164 NotImplemented "Instruction UMADDL not yet implemented."
	3165 Move [X8+324], S0
	3166 Move X8, [X31+32]
	3167 Move [X8+684], W31
	3168 Move X8, [X31+32]
	3169 Move X8, [X8+256]
	3170 Compare X8, 0
	3171 JumpIfEqual {5656}
	3172 Move X9, [X31+32]
	3173 Add X1, X8, 80
	3174 Add X0, X31, 624
	3175 Move W2, 96
	3176 Move V8, [X9+1028]
	3177 Call 0x3EB2B30
	3178 Add X0, X31, 624
	3179 Move X1, X31
	3180 Call FaceInfo.get_subscriptSize, X0
	3181 NotImplemented "Instruction FCMP not yet implemented."
	3182 Move S0, 1
	3183 Move X8, [X31+32]
	3184 Move X8, [X8+256]
	3185 Compare X8, 0
	3186 JumpIfEqual {5656}
	3187 Add X1, X8, 80
	3188 Add X0, X31, 624
	3189 Move W2, 96
	3190 Call 0x3EB2B30
	3191 Add X0, X31, 624
	3192 Move X1, X31
	3193 Call FaceInfo.get_subscriptSize, X0
	3194 Move X19, [X31+32]
	3195 Multiply S1, S8, S0
	3196 Move X8, 0x656000
	3197 Move [X19+1028], S1
	3198 Move V0, [X19+1564]
	3199 Move X8, [X8+672]
	3200 Add X0, X19, 1568
	3201 Move X1, [X8]
	3202 Call TMP_TextProcessingStack`1<Single>.Push, X0, V0
	3203 Move X8, [X19+256]
	3204 Compare X8, 0
	3205 JumpIfEqual {5656}
	3206 Move X19, [X31+32]
	3207 Add X1, X8, 80
	3208 Add X0, X31, 624
	3209 Move W2, 96
	3210 Move V8, [X19+488]
	3211 Call 0x3EB2B30
	3212 Add X0, X31, 624
	3213 Move X1, X31
	3214 Call FaceInfo.get_pointSize, X0
	3215 Move X8, [X19+256]
	3216 Compare X8, 0
	3217 JumpIfEqual {5656}
	3218 Move W20, W0
	3219 Add X1, X8, 80
	3220 Add X0, X31, 624
	3221 Move W2, 96
	3222 Call 0x3EB2B30
	3223 Add X0, X31, 624
	3224 Move X1, X31
	3225 Call FaceInfo.get_scale, X0
	3226 Move X8, [X31+32]
	3227 Move X8, [X8+256]
	3228 Compare X8, 0
	3229 JumpIfEqual {5656}
	3230 Move X19, [X31+32]
	3231 Move X10, -50434048
	3232 Move V3, [X10+188]
	3233 NotImplemented "Instruction SCVTF not yet implemented."
	3234 Move W9, [X19+773]
	3235 Move V9, [X19+1564]
	3236 Move S2, 1
	3237 NotImplemented "Instruction FDIV not yet implemented."
	3238 NotImplemented "Instruction CMP not yet implemented."
	3239 Multiply S0, S1, S0
	3240 NotImplemented "Instruction FCSEL not yet implemented."
	3241 Add X1, X8, 80
	3242 Add X0, X31, 624
	3243 Move W2, 96
	3244 Multiply S8, S0, S1
	3245 Call 0x3EB2B30
	3246 Add X0, X31, 624
	3247 Move X1, X31
	3248 Call FaceInfo.get_subscriptOffset, X0
	3249 Move V1, [X19+1028]
	3250 Multiply S0, S8, S0
	3251 Add X0, X19, 608
	3252 Move W1, 256
	3253 Multiply S0, S0, S1
	3254 Add S0, S9, S0
	3255 Move X2, X31
	3256 Move [X19+1564], S0
	3257 Call TMP_FontStyleStack.Add, X0, X1
	3258 Move W8, [X19+604]
	3259 Or W8, W8, 256
	3260 Move [X19+604], W8
	3261 Move W8, [X0+224]
	3262 Compare W8, 0
	3263 JumpIfNotEqual {3272}
	3264 Call 0x1C17DFC
	3265 Move X8, 0x655000
	3266 Move X8, [X8+1000]
	3267 Move X8, [X8]
	3268 Move X8, [X8+184]
	3269 Move X9, [X8+136]
	3270 Compare X9, 0
	3271 JumpIfEqual {5656}
	3272 Move W8, [X9+24]
	3273 Compare W8, 0
	3274 JumpIfEqual {5630}
	3275 Move W8, [X9+36]
	3276 Move W9, 0x44CB
	3277 NotImplemented "Instruction MOVK not yet implemented."
	3278 NotImplemented "Instruction CMP not yet implemented."
	3279 Move [X31+620], W8
	3280 Move W9, 0xEC40
	3281 NotImplemented "Instruction MOVK not yet implemented."
	3282 NotImplemented "Instruction CMP not yet implemented."
	3283 Move W9, 0x6C44
	3284 NotImplemented "Instruction MOVK not yet implemented."
	3285 NotImplemented "Instruction CMP not yet implemented."
	3286 Move W9, 0x98DB
	3287 NotImplemented "Instruction MOVK not yet implemented."
	3288 NotImplemented "Instruction CMP not yet implemented."
	3289 Move X9, [X31+32]
	3290 Move W8, 1
	3291 Move W1, 1
	3292 Move X9, [X31+32]
	3293 Move W1, 32
	3294 Move W8, [X9+604]
	3295 Add X0, X9, 608
	3296 Or W8, W8, 32
	3297 Move X8, [X31+32]
	3298 Move [X8+731], W31
	3299 Move W10, [X0+224]
	3300 Compare W10, 0
	3301 JumpIfNotEqual {3310}
	3302 Call 0x1C17DFC
	3303 Move X8, 0x655000
	3304 Move X8, [X8+1000]
	3305 Move X8, [X8]
	3306 Move X8, [X8+184]
	3307 Move X9, [X8+136]
	3308 Compare X9, 0
	3309 JumpIfEqual {5656}
	3310 Move W10, [X9+24]
	3311 Compare W10, 0
	3312 JumpIfEqual {5630}
	3313 Move X1, [X8+128]
	3314 Move W2, [X9+44]
	3315 Move W3, [X9+48]
	3316 Add X4, X31, 112
	3317 Move [X31+112], W31
	3318 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	3319 Move W8, 0xC7000000
	3320 Move V8, V0
	3321 Move S0, W8
	3322 NotImplemented "Instruction FCMP not yet implemented."
	3323 Move W8, [X31+44]
	3324 NotImplemented "Instruction CMP not yet implemented."
	3325 Move W8, [X31+44]
	3326 NotImplemented "Instruction CMP not yet implemented."
	3327 Move W8, [X31+44]
	3328 Compare W8, 0
	3329 JumpIfNotEqual {771}
	3330 Move X10, [X31+32]
	3331 Move X9, -50434048
	3332 Move V0, [X9+188]
	3333 Move S1, 1
	3334 Move W8, [X10+773]
	3335 NotImplemented "Instruction CMP not yet implemented."
	3336 NotImplemented "Instruction FCSEL not yet implemented."
	3337 Multiply S0, S8, S0
	3338 Move W8, [X0+224]
	3339 Compare W8, 0
	3340 JumpIfNotEqual {3349}
	3341 Call 0x1C17DFC
	3342 Move X8, 0x655000
	3343 Move X8, [X8+1000]
	3344 Move X8, [X8]
	3345 Move X8, [X8+184]
	3346 Move X9, [X8+136]
	3347 Compare X9, 0
	3348 JumpIfEqual {5656}
	3349 Move W8, [X9+24]
	3350 Compare W8, 0
	3351 JumpIfEqual {5630}
	3352 Move W20, [X9+36]
	3353 Add X1, X31, 736
	3354 Move X2, X31
	3355 Move W0, W20
	3356 Call MaterialReferenceManager.TryGetColorGradientPreset, X0, X1
	3357 Move TEMP, X0
	3358 And TEMP, TEMP, 1
	3359 Compare TEMP, 1
	3360 JumpIfEqual {4313}
	3361 Move X19, 0x5F0000
	3362 Move X19, [X19+1432]
	3363 Move X21, [X31+736]
	3364 Move X0, [X19]
	3365 Move W8, [X0+224]
	3366 Compare W8, 0
	3367 JumpIfNotEqual {3369}
	3368 Call 0x1C17DFC
	3369 Move X0, X21
	3370 Move X1, X31
	3371 Move X2, X31
	3372 Call Object.op_Equality, X0, X1
	3373 Move TEMP, X0
	3374 And TEMP, TEMP, 1
	3375 Compare TEMP, 1
	3376 JumpIfNotEqual {4295}
	3377 Move X0, X31
	3378 Call TMP_Settings.get_defaultColorGradientPresetsPath
	3379 Move X8, 0x655000
	3380 Move X8, [X8+1000]
	3381 Move X21, X0
	3382 Move X8, [X8]
	3383 Move W9, [X8+224]
	3384 Compare W9, 0
	3385 JumpIfNotEqual {3391}
	3386 Move X0, X8
	3387 Call 0x1C17DFC
	3388 Move X8, 0x655000
	3389 Move X8, [X8+1000]
	3390 Move X8, [X8]
	3391 Move X9, [X8+184]
	3392 Move X8, [X9+136]
	3393 Compare X8, 0
	3394 JumpIfEqual {5656}
	3395 Move W10, [X8+24]
	3396 Compare W10, 0
	3397 JumpIfEqual {5630}
	3398 Move X1, [X9+128]
	3399 Move W2, [X8+44]
	3400 Move W3, [X8+48]
	3401 Move X0, X31
	3402 Move X4, X31
	3403 Call String.CreateString, X0, X1, X2, X3
	3404 Move X1, X0
	3405 Move X0, X21
	3406 Move X2, X31
	3407 Call String.Concat, X0, X1
	3408 Move X8, 0x656000
	3409 Move X8, [X8+560]
	3410 Move X1, [X8]
	3411 Call 0x2242FB8, X0
	3412 Move X21, X0
	3413 Move [X31+736], X0
	3414 Move W9, [X0+224]
	3415 Compare W9, 0
	3416 JumpIfNotEqual {3422}
	3417 Call 0x1C17DFC
	3418 Move X8, 0x655000
	3419 Move X8, [X8+1000]
	3420 Move X0, [X8]
	3421 Move X8, [X0+184]
	3422 Move X1, [X8+128]
	3423 Compare X1, 0
	3424 JumpIfEqual {5656}
	3425 Move W9, [X1+24]
	3426 NotImplemented "Instruction CMP not yet implemented."
	3427 NotImplemented "Instruction LDRH not yet implemented."
	3428 Move W10, [X0+224]
	3429 NotImplemented "Instruction CMP not yet implemented."
	3430 NotImplemented "Instruction CSET not yet implemented."
	3431 NotImplemented "Instruction CMP not yet implemented."
	3432 NotImplemented "Instruction CSET not yet implemented."
	3433 And W19, W11, W9
	3434 Compare W10, 0
	3435 JumpIfNotEqual {3442}
	3436 Call 0x1C17DFC
	3437 Move X8, 0x655000
	3438 Move X8, [X8+1000]
	3439 Move X0, [X8]
	3440 Move X8, [X0+184]
	3441 Move X1, [X8+128]
	3442 Compare W19, 0
	3443 JumpIfEqual {3936}
	3444 Move W2, 10
	3445 Move X8, 0x656000
	3446 Move X8, [X8+736]
	3447 Move X19, [X31+32]
	3448 Move X1, [X8]
	3449 Add X20, X19, 536
	3450 Move X0, X20
	3451 Call TMP_TextProcessingStack`1<Int32Enum>.Remove, X0
	3452 Move W8, [X19+604]
	3453 NotImplemented "Instruction CMP not yet implemented."
	3454 Move X9, [X31+32]
	3455 Move W8, 700
	3456 Move [X9+532], W8
	3457 Move X9, [X31+32]
	3458 Move W1, 8
	3459 Move W8, [X9+604]
	3460 Add X0, X9, 608
	3461 Or W8, W8, 8
	3462 Move [X9+604], W8
	3463 Move X2, X31
	3464 Call TMP_FontStyleStack.Add, X0, X1
	3465 Move X8, 0x656000
	3466 Move X8, [X8+712]
	3467 Move X19, [X31+32]
	3468 Move X1, [X8]
	3469 Add X0, X19, 496
	3470 Call TMP_TextProcessingStack`1<Single>.Remove, X0
	3471 Move [X19+488], S0
	3472 Move W9, [X0+224]
	3473 Compare W9, 0
	3474 JumpIfNotEqual {3480}
	3475 Call 0x1C17DFC
	3476 Move X8, 0x655000
	3477 Move X8, [X8+1000]
	3478 Move X8, [X8]
	3479 Move X8, [X8+184]
	3480 Move X9, 0x656000
	3481 Move X9, [X9+728]
	3482 Add X0, X8, 16
	3483 Add X8, X31, 112
	3484 Move X1, [X9]
	3485 Call TMP_TextProcessingStack`1<MaterialReference>.Remove, X0
	3486 Move X10, [X31+112]
	3487 Move X8, [X31+120]
	3488 Move X9, [X31+136]
	3489 Move X11, [X31+32]
	3490 Move [X11+256], X8
	3491 Move [X11+280], X9
	3492 Move [X11+288], W10
	3493 Move X8, 0x656000
	3494 Move X8, [X8+704]
	3495 Move X19, [X31+32]
	3496 Move X1, [X8]
	3497 Add X0, X19, 640
	3498 Call TMP_TextProcessingStack`1<Int32Enum>.Remove, X0
	3499 Move [X19+632], W0
	3500 Move X9, [X31+32]
	3501 Move W8, 0xFE00
	3502 NotImplemented "Instruction MOVK not yet implemented."
	3503 Move [X9+704], W8
	3504 Move X8, [X31+32]
	3505 Move [X8+1032], W31
	3506 Move X9, [X31+32]
	3507 Move W1, 512
	3508 Move X2, X31
	3509 Move W8, [X9+604]
	3510 Add X0, X9, 608
	3511 Or W8, W8, 512
	3512 Move [X9+604], W8
	3513 Call TMP_FontStyleStack.Add, X0, X1
	3514 Move X19, 0x655000
	3515 Move X19, [X19+848]
	3516 Move X0, [X19]
	3517 Move W8, [X0+224]
	3518 Compare W8, 0
	3519 JumpIfNotEqual {3521}
	3520 Call 0x1C17DFC
	3521 Move X20, 0x8DF000
	3522 Move W8, [X20+1190]
	3523 Compare W8, 0
	3524 JumpIfNotEqual {3530}
	3525 Move X0, 0x655000
	3526 Move X0, [X0+848]
	3527 Call 0x1C17CF4
	3528 Move W8, 1
	3529 Move [X20+1190], W8
	3530 Move X0, [X19]
	3531 Move W8, [X0+224]
	3532 Compare W8, 0
	3533 JumpIfNotEqual {3536}
	3534 Call 0x1C17DFC
	3535 Move X0, [X19]
	3536 Move X8, [X0+184]
	3537 Move X9, -50434048
	3538 Move X10, -50434048
	3539 Move X28, 0x655000
	3540 Move V0, [X8]
	3541 Move V12, [X9+816]
	3542 Move V13, [X10+188]
	3543 Move W24, 0x4D63
	3544 Move [X31+49], V0
	3545 Move X28, [X28+1000]
	3546 Move W25, 0x3719
	3547 Move W21, W31
	3548 Move TEMP, 0xBFFF0000
	3549 Not TEMP
	3550 Move W20, TEMP
	3551 Move W22, 24
	3552 Move W23, 0xA825
	3553 NotImplemented "Instruction MOVK not yet implemented."
	3554 NotImplemented "Instruction MOVK not yet implemented."
	3555 Move W26, 0x7625
	3556 Move X0, [X28]
	3557 Move W8, [X0+224]
	3558 Compare W8, 0
	3559 JumpIfNotEqual {3562}
	3560 Call 0x1C17DFC
	3561 Move X0, [X28]
	3562 Move X8, [X0+184]
	3563 Move X9, [X8+136]
	3564 Compare X9, 0
	3565 JumpIfEqual {5656}
	3566 Move W10, [X9+24]
	3567 NotImplemented "Instruction CMP not yet implemented."
	3568 Move W10, [X0+224]
	3569 Compare W10, 0
	3570 JumpIfNotEqual {3579}
	3571 Call 0x1C17DFC
	3572 Move X0, [X28]
	3573 Move X8, [X0+184]
	3574 Move X9, [X8+136]
	3575 Compare X9, 0
	3576 JumpIfEqual {5656}
	3577 Move X28, 0x655000
	3578 Move X28, [X28+1000]
	3579 Move W10, [X9+24]
	3580 NotImplemented "Instruction CMP not yet implemented."
	3581 Move X27, W21
	3582 NotImplemented "Instruction MADD not yet implemented."
	3583 Move W10, [X10+32]
	3584 Compare W10, 0
	3585 JumpIfEqual {3891}
	3586 Move W10, [X0+224]
	3587 Compare W10, 0
	3588 JumpIfNotEqual {3595}
	3589 Call 0x1C17DFC
	3590 Move X0, [X28]
	3591 Move X8, [X0+184]
	3592 Move X9, [X8+136]
	3593 Compare X9, 0
	3594 JumpIfEqual {5656}
	3595 Move W10, [X9+24]
	3596 NotImplemented "Instruction CMP not yet implemented."
	3597 NotImplemented "Instruction MADD not yet implemented."
	3598 Move W10, [X10+32]
	3599 NotImplemented "Instruction CMP not yet implemented."
	3600 NotImplemented "Instruction CMP not yet implemented."
	3601 NotImplemented "Instruction CMP not yet implemented."
	3602 Move W10, [X0+224]
	3603 Compare W10, 0
	3604 JumpIfNotEqual {3613}
	3605 Call 0x1C17DFC
	3606 Move X8, 0x655000
	3607 Move X8, [X8+1000]
	3608 Move X8, [X8]
	3609 Move X8, [X8+184]
	3610 Move X9, [X8+136]
	3611 Compare X9, 0
	3612 JumpIfEqual {5656}
	3613 Move W10, [X9+24]
	3614 NotImplemented "Instruction CMP not yet implemented."
	3615 NotImplemented "Instruction MADD not yet implemented."
	3616 Move X1, [X8+128]
	3617 Move W2, [X9+44]
	3618 Move W3, [X9+48]
	3619 Move X0, [X31+32]
	3620 Add X4, X8, 144
	3621 Call TMP_Text.GetAttributeParameters, X0, X1, X2, X3, X4
	3622 NotImplemented "Instruction CMP not yet implemented."
	3623 Move X8, 0x655000
	3624 Move X8, [X8+1000]
	3625 Move X0, [X8]
	3626 Move W8, [X0+224]
	3627 Compare W8, 0
	3628 JumpIfNotEqual {3633}
	3629 Call 0x1C17DFC
	3630 Move X8, 0x655000
	3631 Move X8, [X8+1000]
	3632 Move X0, [X8]
	3633 Move X8, [X0+184]
	3634 Move X8, [X8+144]
	3635 Compare X8, 0
	3636 JumpIfEqual {5656}
	3637 Move W9, [X8+24]
	3638 Compare W9, 0
	3639 JumpIfEqual {5630}
	3640 NotImplemented "Instruction CMP not yet implemented."
	3641 NotImplemented "Instruction CMP not yet implemented."
	3642 NotImplemented "Instruction CMP not yet implemented."
	3643 Move X0, [X19]
	3644 Move S11, [X8+32]
	3645 Move S10, [X8+36]
	3646 Move S9, [X8+40]
	3647 Move S8, [X8+44]
	3648 Move W9, [X0+224]
	3649 Compare W9, 0
	3650 JumpIfNotEqual {3652}
	3651 Call 0x1C17DFC
	3652 Add X0, X31, 784
	3653 Move V0, V11
	3654 Move V1, V10
	3655 Move V2, V9
	3656 Move V3, V8
	3657 Move X1, X31
	3658 Call TMP_Offset..ctor, X0, V0, V1, V2, V3
	3659 Move X10, [X31+32]
	3660 Move X0, [X19]
	3661 Move V8, [X31+784]
	3662 Move V9, [X31+788]
	3663 Move W8, [X10+773]
	3664 Move V11, [X31+792]
	3665 Move V10, [X31+796]
	3666 Move W9, [X0+224]
	3667 Move V14, [X10+484]
	3668 NotImplemented "Instruction CMP not yet implemented."
	3669 Move S0, 1
	3670 NotImplemented "Instruction FCSEL not yet implemented."
	3671 Compare W9, 0
	3672 JumpIfNotEqual {3674}
	3673 Call 0x1C17DFC
	3674 Multiply S0, S14, S12
	3675 Multiply S4, S0, S15
	3676 Move V0, V8
	3677 Move V1, V9
	3678 Move V2, V11
	3679 Move V3, V10
	3680 Move X0, X31
	3681 Call TMP_Offset.op_Multiply, X0, V0
	3682 Move [X31+784], S0
	3683 Move [X31+788], S1
	3684 Move [X31+792], S2
	3685 Move [X31+796], S3
	3686 NotImplemented "Instruction CMP not yet implemented."
	3687 NotImplemented "Instruction CMP not yet implemented."
	3688 Move W10, [X0+224]
	3689 Compare W10, 0
	3690 JumpIfNotEqual {3699}
	3691 Call 0x1C17DFC
	3692 Move X8, 0x655000
	3693 Move X8, [X8+1000]
	3694 Move X0, [X8]
	3695 Move X8, [X0+184]
	3696 Move X9, [X8+136]
	3697 Compare X9, 0
	3698 JumpIfEqual {5656}
	3699 Move W10, [X9+24]
	3700 NotImplemented "Instruction CMP not yet implemented."
	3701 NotImplemented "Instruction MADD not yet implemented."
	3702 Move W10, [X10+40]
	3703 Move X28, 0x655000
	3704 Move X28, [X28+1000]
	3705 NotImplemented "Instruction CMP not yet implemented."
	3706 Move W10, [X0+224]
	3707 Compare W10, 0
	3708 JumpIfNotEqual {3717}
	3709 Call 0x1C17DFC
	3710 Move X8, 0x655000
	3711 Move X8, [X8+1000]
	3712 Move X8, [X8]
	3713 Move X8, [X8+184]
	3714 Move X9, [X8+136]
	3715 Compare X9, 0
	3716 JumpIfEqual {5656}
	3717 Move W10, [X9+24]
	3718 Compare W10, 0
	3719 JumpIfEqual {5630}
	3720 Move X1, [X8+128]
	3721 Move W2, [X9+44]
	3722 Move W3, [X9+48]
	3723 Call TMP_Text.HexCharsToColor, X0, X1, X2, X3
	3724 Move X20, X0
	3725 Move W10, [X0+224]
	3726 Compare W10, 0
	3727 JumpIfNotEqual {3736}
	3728 Call 0x1C17DFC
	3729 Move X8, 0x655000
	3730 Move X8, [X8+1000]
	3731 Move X8, [X8]
	3732 Move X8, [X8+184]
	3733 Move X9, [X8+136]
	3734 Compare X9, 0
	3735 JumpIfEqual {5656}
	3736 Move W10, [X9+24]
	3737 NotImplemented "Instruction CMP not yet implemented."
	3738 Move X1, [X8+128]
	3739 NotImplemented "Instruction NOP not yet implemented."
	3740 NotImplemented "Instruction MADD not yet implemented."
	3741 Move W2, [X8+44]
	3742 Move W3, [X8+48]
	3743 Call TMP_Text.HexCharsToColor, X0, X1, X2, X3
	3744 Move W20, W0
	3745 Move X28, 0x655000
	3746 Move X28, [X28+1000]
	3747 Add W21, W21, 1
	3748 Move X9, [X31+32]
	3749 Move W8, 0xBF800000
	3750 Move [X9+864], W8
	3751 Move X9, [X31+32]
	3752 Move W1, 4
	3753 Move X2, X31
	3754 Move W8, [X9+604]
	3755 Add X0, X9, 608
	3756 Or W8, W8, 4
	3757 Move [X9+604], W8
	3758 Call TMP_FontStyleStack.Add, X0, X1
	3759 Move X8, 0x655000
	3760 Move X8, [X8+1000]
	3761 Move X0, [X8]
	3762 Move W8, [X0+224]
	3763 Compare W8, 0
	3764 JumpIfNotEqual {3769}
	3765 Call 0x1C17DFC
	3766 Move X8, 0x655000
	3767 Move X8, [X8+1000]
	3768 Move X0, [X8]
	3769 Move X8, [X0+184]
	3770 Move X8, [X8+136]
	3771 Compare X8, 0
	3772 JumpIfEqual {5656}
	3773 Move W9, [X8+24]
	3774 NotImplemented "Instruction CMP not yet implemented."
	3775 Move W9, [X8+56]
	3776 Move W10, 0x4D63
	3777 NotImplemented "Instruction MOVK not yet implemented."
	3778 NotImplemented "Instruction CMP not yet implemented."
	3779 Move W9, [X0+224]
	3780 Compare W9, 0
	3781 JumpIfNotEqual {3790}
	3782 Call 0x1C17DFC
	3783 Move X8, 0x655000
	3784 Move X8, [X8+1000]
	3785 Move X0, [X8]
	3786 Move X8, [X0+184]
	3787 Move X8, [X8+136]
	3788 Compare X8, 0
	3789 JumpIfEqual {5656}
	3790 Move W9, [X8+24]
	3791 NotImplemented "Instruction CMP not yet implemented."
	3792 Move W8, [X8+56]
	3793 Move W9, 0xEF43
	3794 NotImplemented "Instruction MOVK not yet implemented."
	3795 NotImplemented "Instruction CMP not yet implemented."
	3796 Move W8, [X0+224]
	3797 Compare W8, 0
	3798 JumpIfNotEqual {3803}
	3799 Call 0x1C17DFC
	3800 Move X8, 0x655000
	3801 Move X8, [X8+1000]
	3802 Move X0, [X8]
	3803 Move X9, [X0+184]
	3804 Move X8, [X9+136]
	3805 Compare X8, 0
	3806 JumpIfEqual {5656}
	3807 Move W10, [X8+24]
	3808 NotImplemented "Instruction CMP not yet implemented."
	3809 Move X1, [X9+128]
	3810 Move W2, [X8+68]
	3811 Move W3, [X8+72]
	3812 Call TMP_Text.HexCharsToColor, X0, X1, X2, X3
	3813 Move X11, [X31+32]
	3814 Move X10, X0
	3815 ShiftRight X10, 24
	3816 And X10, X10, 0x7FFFFFFF
	3817 Move W8, [X11+1263]
	3818 Add X9, X11, 344
	3819 Move [X11+344], W0
	3820 NotImplemented "Instruction CMP not yet implemented."
	3821 NotImplemented "Instruction CSEL not yet implemented."
	3822 Move [X9+3], W8
	3823 Move W8, [X11+344]
	3824 Move X8, [X31+32]
	3825 Move W8, [X8+600]
	3826 Move TEMP, X8
	3827 And TEMP, TEMP, 1
	3828 Compare TEMP, 1
	3829 JumpIfEqual {771}
	3830 Move X8, [X31+32]
	3831 Move W1, 1
	3832 Move X2, X31
	3833 Move W20, 1
	3834 Add X0, X8, 608
	3835 Call TMP_FontStyleStack.Remove, X0, X1
	3836 And W31, W0, 255
	3837 Move X19, [X31+32]
	3838 Move W8, [X19+604]
	3839 Add X0, X19, 536
	3840 And W8, W8, 0xFFFFFFFE
	3841 Move [X19+604], W8
	3842 Move X8, 0x656000
	3843 Move X8, [X8+648]
	3844 Move X1, [X8]
	3845 Call TMP_TextProcessingStack`1<Int32Enum>.Peek, X0
	3846 Move [X19+532], W0
	3847 Move X8, [X31+32]
	3848 Move [X8+688], W31
	3849 Move W10, [X0+224]
	3850 Compare W10, 0
	3851 JumpIfNotEqual {3860}
	3852 Call 0x1C17DFC
	3853 Move X8, 0x655000
	3854 Move X8, [X8+1000]
	3855 Move X8, [X8]
	3856 Move X8, [X8+184]
	3857 Move X9, [X8+136]
	3858 Compare X9, 0
	3859 JumpIfEqual {5656}
	3860 Move W10, [X9+24]
	3861 Compare W10, 0
	3862 JumpIfEqual {5630}
	3863 Move X1, [X8+128]
	3864 Move W2, [X9+44]
	3865 Move W3, [X9+48]
	3866 Add X4, X31, 112
	3867 Move [X31+112], W31
	3868 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	3869 Move W8, 0xC7000000
	3870 Move S1, W8
	3871 NotImplemented "Instruction FCMP not yet implemented."
	3872 Move W8, [X31+44]
	3873 Compare W8, 0
	3874 JumpIfEqual {4817}
	3875 Move W8, [X31+44]
	3876 NotImplemented "Instruction CMP not yet implemented."
	3877 Move W8, [X31+44]
	3878 NotImplemented "Instruction CMP not yet implemented."
	3879 Move X8, [X31+32]
	3880 Move S2, -1
	3881 Move S4, W31
	3882 Move V1, [X8+864]
	3883 Move V3, [X8+856]
	3884 Move W8, 0x42C80000
	3885 NotImplemented "Instruction FCMP not yet implemented."
	3886 NotImplemented "Instruction FCSEL not yet implemented."
	3887 Subtract S1, S3, S1
	3888 Multiply S0, S0, S1
	3889 Move S1, W8
	3890 NotImplemented "Instruction FDIV not yet implemented."
	3891 Move X19, [X31+32]
	3892 Move W8, W20
	3893 ShiftRight W8, 24
	3894 And W8, W8, 0x7FFFFFFF
	3895 And W1, W20, 0xFF0000
	3896 Move V0, [X31+784]
	3897 Move W9, [X19+1263]
	3898 Move V1, [X31+788]
	3899 Move V2, [X31+792]
	3900 Move V3, [X31+796]
	3901 NotImplemented "Instruction CMP not yet implemented."
	3902 NotImplemented "Instruction CSEL not yet implemented."
	3903 NotImplemented "Instruction BFM not yet implemented."
	3904 NotImplemented "Instruction BFM not yet implemented."
	3905 NotImplemented "Instruction BFM not yet implemented."
	3906 Add X0, X31, 760
	3907 Move X2, X31
	3908 Call HighlightState..ctor, X0, X1, X2
	3909 Move X8, 0x656000
	3910 Move X8, [X8+664]
	3911 Add X9, X31, 505
	3912 NotImplemented "Instruction LDUR not yet implemented."
	3913 Move W9, [X31+776]
	3914 Move X2, [X8]
	3915 Add X0, X19, 1360
	3916 Add X1, X31, 112
	3917 Move [X31+7], V0
	3918 Move [X31+128], W9
	3919 Call TMP_TextProcessingStack`1<HighlightState>.Push, X0, X1
	3920 Move X8, 0x656000
	3921 Move X8, [X8+648]
	3922 Move X0, X20
	3923 Move X1, [X8]
	3924 Call TMP_TextProcessingStack`1<Int32Enum>.Peek, X0
	3925 Move X8, [X31+32]
	3926 Move [X8+532], W0
	3927 Move W9, 0x51FF
	3928 NotImplemented "Instruction MOVK not yet implemented."
	3929 NotImplemented "Instruction CMP not yet implemented."
	3930 Move W9, 0x44CB
	3931 NotImplemented "Instruction MOVK not yet implemented."
	3932 NotImplemented "Instruction CMP not yet implemented."
	3933 Move X9, [X31+32]
	3934 Move W8, 2
	3935 Move W1, 2
	3936 Compare X1, 0
	3937 JumpIfEqual {5656}
	3938 Move W9, [X1+24]
	3939 NotImplemented "Instruction CMP not yet implemented."
	3940 NotImplemented "Instruction LDRH not yet implemented."
	3941 Move W10, [X0+224]
	3942 NotImplemented "Instruction CMP not yet implemented."
	3943 NotImplemented "Instruction CSET not yet implemented."
	3944 NotImplemented "Instruction CMP not yet implemented."
	3945 NotImplemented "Instruction CSET not yet implemented."
	3946 And W19, W11, W9
	3947 Compare W10, 0
	3948 JumpIfNotEqual {3955}
	3949 Call 0x1C17DFC
	3950 Move X8, 0x655000
	3951 Move X8, [X8+1000]
	3952 Move X0, [X8]
	3953 Move X8, [X0+184]
	3954 Move X1, [X8+128]
	3955 Compare W19, 0
	3956 JumpIfEqual {4405}
	3957 Move W2, 11
	3958 Move W23, [X9+56]
	3959 Move W20, [X9+60]
	3960 Add X1, X31, 752
	3961 Move W0, W21
	3962 Move X2, X31
	3963 Call MaterialReferenceManager.TryGetFontAsset, X0, X1
	3964 Move X19, 0x5F0000
	3965 Move X19, [X19+1432]
	3966 Move X22, [X31+752]
	3967 Move X0, [X19]
	3968 Move W8, [X0+224]
	3969 Compare W8, 0
	3970 JumpIfNotEqual {3972}
	3971 Call 0x1C17DFC
	3972 Move X0, X22
	3973 Move X1, X31
	3974 Move X2, X31
	3975 Call Object.op_Equality, X0, X1
	3976 Move TEMP, X0
	3977 And TEMP, TEMP, 1
	3978 Compare TEMP, 1
	3979 JumpIfNotEqual {4963}
	3980 Move X8, 0x655000
	3981 Move X8, [X8+1000]
	3982 Move X0, [X8]
	3983 Move W8, [X0+224]
	3984 Compare W8, 0
	3985 JumpIfNotEqual {3990}
	3986 Call 0x1C17DFC
	3987 Move X8, 0x655000
	3988 Move X8, [X8+1000]
	3989 Move X0, [X8]
	3990 Move X8, [X0+184]
	3991 Move X22, [X8+112]
	3992 Compare X22, 0
	3993 JumpIfEqual {4894}
	3994 Move W9, [X0+224]
	3995 Compare W9, 0
	3996 JumpIfNotEqual {4002}
	3997 Call 0x1C17DFC
	3998 Move X8, 0x655000
	3999 Move X8, [X8+1000]
	4000 Move X8, [X8]
	4001 Move X8, [X8+184]
	4002 Move X9, [X8+136]
	4003 Compare X9, 0
	4004 JumpIfEqual {5656}
	4005 Move W10, [X9+24]
	4006 Compare W10, 0
	4007 JumpIfEqual {5630}
	4008 Move X1, [X8+128]
	4009 Move W2, [X9+44]
	4010 Move W3, [X9+48]
	4011 Move X0, X31
	4012 Move X4, X31
	4013 Call String.CreateString, X0, X1, X2, X3
	4014 Move X8, [X22+64]
	4015 Move X9, [X22+24]
	4016 Move X3, [X22+40]
	4017 Move X2, X0
	4018 Move X0, X8
	4019 Move W1, W21
	4020 NotImplemented "Instruction BLR not yet implemented."
	4021 Move X21, X0
	4022 Move W10, [X0+224]
	4023 Compare W10, 0
	4024 JumpIfNotEqual {4033}
	4025 Call 0x1C17DFC
	4026 Move X8, 0x654000
	4027 Move X8, [X8+1000]
	4028 Move X8, [X8]
	4029 Move X8, [X8+184]
	4030 Move X9, [X8+136]
	4031 Compare X9, 0
	4032 JumpIfEqual {5656}
	4033 Move W10, [X9+24]
	4034 Compare W10, 0
	4035 JumpIfEqual {5630}
	4036 Move X1, [X8+128]
	4037 Move W2, [X9+44]
	4038 Move W3, [X9+48]
	4039 Add X4, X31, 112
	4040 Move [X31+112], W31
	4041 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	4042 Move W8, 0xC7000000
	4043 Move S1, W8
	4044 NotImplemented "Instruction FCMP not yet implemented."
	4045 Move W8, [X31+44]
	4046 Compare W8, 0
	4047 JumpIfEqual {5100}
	4048 Move W8, [X31+44]
	4049 NotImplemented "Instruction CMP not yet implemented."
	4050 Move W8, [X31+44]
	4051 NotImplemented "Instruction CMP not yet implemented."
	4052 Move X8, [X31+32]
	4053 Move S2, -1
	4054 Move S4, W31
	4055 Move V1, [X8+864]
	4056 Move V3, [X8+856]
	4057 Move W8, 0x42C80000
	4058 NotImplemented "Instruction FCMP not yet implemented."
	4059 NotImplemented "Instruction FCSEL not yet implemented."
	4060 Subtract S1, S3, S1
	4061 Multiply S0, S0, S1
	4062 Move S1, W8
	4063 NotImplemented "Instruction FDIV not yet implemented."
	4064 Add X1, X31, 744
	4065 Move W0, W20
	4066 Move X2, X31
	4067 Call MaterialReferenceManager.TryGetMaterial, X0, X1
	4068 Move TEMP, X0
	4069 And TEMP, TEMP, 1
	4070 Compare TEMP, 1
	4071 JumpIfNotEqual {4462}
	4072 Move X20, [X31+744]
	4073 Move X9, [X31+32]
	4074 Move X8, 0x654000
	4075 Move [X9+280], X20
	4076 Move X8, [X8+1000]
	4077 Move X21, [X9+256]
	4078 Move X0, [X8]
	4079 Move W8, [X0+224]
	4080 Compare W8, 0
	4081 JumpIfNotEqual {4086}
	4082 Call 0x1C17DFC
	4083 Move X8, 0x654000
	4084 Move X8, [X8+1000]
	4085 Move X0, [X8]
	4086 Move X2, [X0+184]
	4087 Move X0, X20
	4088 Move X1, X21
	4089 Move X4, X31
	4090 Move X3, [X2+8]
	4091 Call MaterialReference.AddMaterialReference, X0, X1, X2, X3
	4092 Move X8, [X31+32]
	4093 Move [X8+288], W0
	4094 Move X8, 0x654000
	4095 Move X8, [X8+1000]
	4096 Move X8, [X8]
	4097 Move X8, [X8+184]
	4098 Move X9, [X8]
	4099 Compare X9, 0
	4100 JumpIfEqual {5656}
	4101 Move W10, [X9+24]
	4102 NotImplemented "Instruction CMP not yet implemented."
	4103 Move W10, 56
	4104 NotImplemented "Instruction SMADDL not yet implemented."
	4105 Move X10, 0x655000
	4106 Move X10, [X10+624]
	4107 Move V2, [X9+48]
	4108 Move V0, [X9+64]
	4109 Move X11, [X9+80]
	4110 Move V1, [X9+2]
	4111 Move X2, [X10]
	4112 Add X8, X8, 16
	4113 Move [X31+288], X11
	4114 Move [X31+256], V2
	4115 Move [X31+264], V0
	4116 Move [X31+15], V1
	4117 Move X0, [X19]
	4118 Move X9, [X31+32]
	4119 Move W8, [X0+224]
	4120 Move X20, [X9+1680]
	4121 Compare W8, 0
	4122 JumpIfNotEqual {4124}
	4123 Call 0x1C17DFC
	4124 Move X0, X20
	4125 Move X1, X31
	4126 Move X2, X31
	4127 Call Object.op_Inequality, X0, X1
	4128 Move TEMP, X0
	4129 And TEMP, TEMP, 1
	4130 Compare TEMP, 1
	4131 JumpIfNotEqual {4721}
	4132 Move X8, [X31+32]
	4133 Move X20, [X8+1680]
	4134 Move X8, [X31+32]
	4135 Move X8, [X8+256]
	4136 Compare X8, 0
	4137 JumpIfEqual {5656}
	4138 Move W1, [X8+440]
	4139 Move X8, [X31+32]
	4140 Move [X8+1520], W1
	4141 Move X8, 0x655000
	4142 Move X8, [X8+592]
	4143 Move X2, [X8]
	4144 Move X8, [X31+32]
	4145 Add X0, X8, 1488
	4146 Call TMP_TextProcessingStack`1<Int32>.Add, X0, X1
	4147 Add X1, X31, 728
	4148 Move W0, W20
	4149 Move X2, X31
	4150 Call MaterialReferenceManager.TryGetSpriteAsset, X0, X1
	4151 Move TEMP, X0
	4152 And TEMP, TEMP, 1
	4153 Compare TEMP, 1
	4154 JumpIfEqual {4281}
	4155 Move X19, 0x5EF000
	4156 Move X19, [X19+1432]
	4157 Move X21, [X31+728]
	4158 Move X0, [X19]
	4159 Move W8, [X0+224]
	4160 Compare W8, 0
	4161 JumpIfNotEqual {4163}
	4162 Call 0x1C17DFC
	4163 Move X0, X21
	4164 Move X1, X31
	4165 Move X2, X31
	4166 Call Object.op_Equality, X0, X1
	4167 Move TEMP, X0
	4168 And TEMP, TEMP, 1
	4169 Compare TEMP, 1
	4170 JumpIfNotEqual {4263}
	4171 Move X8, 0x654000
	4172 Move X8, [X8+1000]
	4173 Move X0, [X8]
	4174 Move W8, [X0+224]
	4175 Compare W8, 0
	4176 JumpIfNotEqual {4181}
	4177 Call 0x1C17DFC
	4178 Move X8, 0x654000
	4179 Move X8, [X8+1000]
	4180 Move X0, [X8]
	4181 Move X8, [X0+184]
	4182 Move X21, [X8+120]
	4183 Compare X21, 0
	4184 JumpIfEqual {4213}
	4185 Move W9, [X0+224]
	4186 Compare W9, 0
	4187 JumpIfNotEqual {4193}
	4188 Call 0x1C17DFC
	4189 Move X8, 0x654000
	4190 Move X8, [X8+1000]
	4191 Move X8, [X8]
	4192 Move X8, [X8+184]
	4193 Move X9, [X8+136]
	4194 Compare X9, 0
	4195 JumpIfEqual {5656}
	4196 Move W10, [X9+24]
	4197 Compare W10, 0
	4198 JumpIfEqual {5630}
	4199 Move X1, [X8+128]
	4200 Move W2, [X9+44]
	4201 Move W3, [X9+48]
	4202 Move X0, X31
	4203 Move X4, X31
	4204 Call String.CreateString, X0, X1, X2, X3
	4205 Move X8, [X21+64]
	4206 Move X9, [X21+24]
	4207 Move X3, [X21+40]
	4208 Move X2, X0
	4209 Move X0, X8
	4210 Move W1, W20
	4211 NotImplemented "Instruction BLR not yet implemented."
	4212 Move X21, X0
	4213 Move X0, [X19]
	4214 Move [X31+728], X21
	4215 Move W8, [X0+224]
	4216 Compare W8, 0
	4217 JumpIfNotEqual {4219}
	4218 Call 0x1C17DFC
	4219 Move X0, X21
	4220 Move X1, X31
	4221 Move X2, X31
	4222 Call Object.op_Equality, X0, X1
	4223 Move TEMP, X0
	4224 And TEMP, TEMP, 1
	4225 Compare TEMP, 1
	4226 JumpIfNotEqual {4263}
	4227 Move X0, X31
	4228 Call TMP_Settings.get_defaultSpriteAssetPath
	4229 Move X8, 0x654000
	4230 Move X8, [X8+1000]
	4231 Move X21, X0
	4232 Move X8, [X8]
	4233 Move W9, [X8+224]
	4234 Compare W9, 0
	4235 JumpIfNotEqual {4241}
	4236 Move X0, X8
	4237 Call 0x1C17DFC
	4238 Move X8, 0x654000
	4239 Move X8, [X8+1000]
	4240 Move X8, [X8]
	4241 Move X9, [X8+184]
	4242 Move X8, [X9+136]
	4243 Compare X8, 0
	4244 JumpIfEqual {5656}
	4245 Move W10, [X8+24]
	4246 Compare W10, 0
	4247 JumpIfEqual {5630}
	4248 Move X1, [X9+128]
	4249 Move W2, [X8+44]
	4250 Move W3, [X8+48]
	4251 Move X0, X31
	4252 Move X4, X31
	4253 Call String.CreateString, X0, X1, X2, X3
	4254 Move X1, X0
	4255 Move X0, X21
	4256 Move X2, X31
	4257 Call String.Concat, X0, X1
	4258 Move X8, 0x655000
	4259 Move X8, [X8+568]
	4260 Move X1, [X8]
	4261 Call 0x2242FB8, X0
	4262 Move [X31+728], X0
	4263 Move X0, [X19]
	4264 Move X21, [X31+728]
	4265 Move W8, [X0+224]
	4266 Compare W8, 0
	4267 JumpIfNotEqual {4269}
	4268 Call 0x1C17DFC
	4269 Move X0, X21
	4270 Move X1, X31
	4271 Move X2, X31
	4272 Call Object.op_Equality, X0, X1
	4273 Move TEMP, X0
	4274 And TEMP, TEMP, 1
	4275 Compare TEMP, 1
	4276 JumpIfEqual {5700}
	4277 Move X1, [X31+728]
	4278 Move W0, W20
	4279 Move X2, X31
	4280 Call MaterialReferenceManager.AddSpriteAsset, X0, X1
	4281 Move X8, [X31+728]
	4282 Move X9, [X31+32]
	4283 Move [X9+1688], X8
	4284 NotImplemented "Instruction CMP not yet implemented."
	4285 NotImplemented "Instruction CMP not yet implemented."
	4286 NotImplemented "Instruction CMP not yet implemented."
	4287 Move X9, [X31+32]
	4288 Move W8, [X9+1260]
	4289 Move [X9+348], W8
	4290 Move X9, 0x655000
	4291 Move X9, [X9+616]
	4292 Move X2, [X9]
	4293 Move X9, [X31+32]
	4294 Add X0, X9, 1328
	4295 Move X21, [X31+736]
	4296 Move X0, [X19]
	4297 Move W8, [X0+224]
	4298 Compare W8, 0
	4299 JumpIfNotEqual {4301}
	4300 Call 0x1C17DFC
	4301 Move X0, X21
	4302 Move X1, X31
	4303 Move X2, X31
	4304 Call Object.op_Equality, X0, X1
	4305 Move TEMP, X0
	4306 And TEMP, TEMP, 1
	4307 Compare TEMP, 1
	4308 JumpIfEqual {5700}
	4309 Move X1, [X31+736]
	4310 Move W0, W20
	4311 Move X2, X31
	4312 Call MaterialReferenceManager.AddColorGradientPreset, X0, X1
	4313 Move X8, [X31+736]
	4314 Move X9, [X31+32]
	4315 Move X24, 0x654000
	4316 Move W19, 1
	4317 Move W20, 24
	4318 Move [X9+1456], W31
	4319 Move [X9+1408], X8
	4320 Move X24, [X24+1000]
	4321 Move W21, 0xB2FB
	4322 Move W22, 0x80FB
	4323 Move X0, [X24]
	4324 Move W8, [X0+224]
	4325 Compare W8, 0
	4326 JumpIfNotEqual {4329}
	4327 Call 0x1C17DFC
	4328 Move X0, [X24]
	4329 Move X8, [X0+184]
	4330 Move X9, [X8+136]
	4331 Compare X9, 0
	4332 JumpIfEqual {5656}
	4333 Move W10, [X9+24]
	4334 NotImplemented "Instruction CMP not yet implemented."
	4335 Move W10, [X0+224]
	4336 Compare W10, 0
	4337 JumpIfNotEqual {4346}
	4338 Call 0x1C17DFC
	4339 Move X0, [X24]
	4340 Move X8, [X0+184]
	4341 Move X9, [X8+136]
	4342 Compare X9, 0
	4343 JumpIfEqual {5656}
	4344 Move X24, 0x654000
	4345 Move X24, [X24+1000]
	4346 Move W10, [X9+24]
	4347 NotImplemented "Instruction CMP not yet implemented."
	4348 Move X23, W19
	4349 NotImplemented "Instruction MADD not yet implemented."
	4350 Move W10, [X10+32]
	4351 Compare W10, 0
	4352 JumpIfEqual {4398}
	4353 Move W10, [X0+224]
	4354 Compare W10, 0
	4355 JumpIfNotEqual {4364}
	4356 Call 0x1C17DFC
	4357 Move X0, [X24]
	4358 Move X8, [X0+184]
	4359 Move X9, [X8+136]
	4360 Compare X9, 0
	4361 JumpIfEqual {5656}
	4362 Move X24, 0x654000
	4363 Move X24, [X24+1000]
	4364 Move W10, [X9+24]
	4365 NotImplemented "Instruction CMP not yet implemented."
	4366 NotImplemented "Instruction MADD not yet implemented."
	4367 Move W10, [X10+32]
	4368 NotImplemented "Instruction CMP not yet implemented."
	4369 NotImplemented "Instruction CMP not yet implemented."
	4370 Move W10, [X0+224]
	4371 Compare W10, 0
	4372 JumpIfNotEqual {4381}
	4373 Call 0x1C17DFC
	4374 Move X8, 0x654000
	4375 Move X8, [X8+1000]
	4376 Move X8, [X8]
	4377 Move X8, [X8+184]
	4378 Move X9, [X8+136]
	4379 Compare X9, 0
	4380 JumpIfEqual {5656}
	4381 Move W10, [X9+24]
	4382 NotImplemented "Instruction CMP not yet implemented."
	4383 Move X1, [X8+128]
	4384 NotImplemented "Instruction NOP not yet implemented."
	4385 NotImplemented "Instruction MADD not yet implemented."
	4386 Move W2, [X8+44]
	4387 Move W3, [X8+48]
	4388 Add X4, X31, 112
	4389 Move [X31+112], W31
	4390 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	4391 Move X9, [X31+32]
	4392 NotImplemented "Instruction FCMP not yet implemented."
	4393 NotImplemented "Instruction CSET not yet implemented."
	4394 Move X24, 0x654000
	4395 Move [X9+1456], W8
	4396 Move X24, [X24+1000]
	4397 Add W19, W19, 1
	4398 Move X9, [X31+32]
	4399 Move X8, 0x655000
	4400 Move X1, [X9+1408]
	4401 Move X8, [X8+600]
	4402 Add X0, X9, 1416
	4403 Move X2, [X8]
	4404 Call TMP_TextProcessingStack`1<Object>.Add, X0, X1
	4405 Compare X1, 0
	4406 JumpIfEqual {5656}
	4407 Move W9, [X1+24]
	4408 NotImplemented "Instruction CMP not yet implemented."
	4409 NotImplemented "Instruction LDRH not yet implemented."
	4410 Move W10, [X0+224]
	4411 NotImplemented "Instruction CMP not yet implemented."
	4412 NotImplemented "Instruction CSET not yet implemented."
	4413 NotImplemented "Instruction CMP not yet implemented."
	4414 NotImplemented "Instruction CSET not yet implemented."
	4415 And W19, W11, W9
	4416 Compare W10, 0
	4417 JumpIfNotEqual {4424}
	4418 Call 0x1C17DFC
	4419 Move X8, 0x654000
	4420 Move X8, [X8+1000]
	4421 Move X0, [X8]
	4422 Move X8, [X0+184]
	4423 Move X1, [X8+128]
	4424 Compare W19, 0
	4425 JumpIfEqual {4863}
	4426 Move W2, 13
	4427 Move X9, [X31+32]
	4428 Move W8, [X9+1260]
	4429 Move [X9+344], W8
	4430 Move X9, 0x655000
	4431 Move X9, [X9+616]
	4432 Move X2, [X9]
	4433 Move X9, [X31+32]
	4434 Add X0, X9, 1296
	4435 Move W1, W8
	4436 Move X10, [X31+32]
	4437 Move X9, -50438144
	4438 Move V2, [X9+188]
	4439 Move S3, 1
	4440 Move W8, [X10+773]
	4441 Move V1, [X10+488]
	4442 Move V4, [X10+1600]
	4443 NotImplemented "Instruction CMP not yet implemented."
	4444 NotImplemented "Instruction FCSEL not yet implemented."
	4445 Multiply S0, S0, S2
	4446 Multiply S0, S1, S0
	4447 Add S0, S4, S0
	4448 Move X10, [X31+32]
	4449 Move X9, -50438144
	4450 Move V1, [X9+188]
	4451 Move S3, 1
	4452 Move W8, [X10+773]
	4453 Move V2, [X10+488]
	4454 NotImplemented "Instruction CMP not yet implemented."
	4455 NotImplemented "Instruction FCSEL not yet implemented."
	4456 Multiply S0, S0, S1
	4457 Multiply S0, S2, S0
	4458 Move [X10+1564], S0
	4459 Move X9, [X31+32]
	4460 Move W8, 8
	4461 Move W1, 8
	4462 Move X0, X31
	4463 Call TMP_Settings.get_defaultFontAssetPath
	4464 Move X8, 0x654000
	4465 Move X8, [X8+1000]
	4466 Move X21, X0
	4467 Move X8, [X8]
	4468 Move W9, [X8+224]
	4469 Compare W9, 0
	4470 JumpIfNotEqual {4476}
	4471 Move X0, X8
	4472 Call 0x1C17DFC
	4473 Move X8, 0x654000
	4474 Move X8, [X8+1000]
	4475 Move X8, [X8]
	4476 Move X9, [X8+184]
	4477 Move X8, [X9+136]
	4478 Compare X8, 0
	4479 JumpIfEqual {5656}
	4480 Move W10, [X8+24]
	4481 Compare W10, 0
	4482 JumpIfEqual {5630}
	4483 Move X1, [X9+128]
	4484 Move W2, [X8+44]
	4485 Move W3, [X8+48]
	4486 Move X0, X31
	4487 Move X4, X31
	4488 Call String.CreateString, X0, X1, X2, X3
	4489 Move X1, X0
	4490 Move X0, X21
	4491 Move X2, X31
	4492 Call String.Concat, X0, X1
	4493 Move X8, 0x649000
	4494 Move X8, [X8+2776]
	4495 Move X1, [X8]
	4496 Call 0x2242FB8, X0
	4497 Move X8, 0x5EF000
	4498 Move X8, [X8+1432]
	4499 Move [X31+744], X0
	4500 Move X21, X0
	4501 Move X8, [X8]
	4502 Move W9, [X8+224]
	4503 Compare W9, 0
	4504 JumpIfNotEqual {4507}
	4505 Move X0, X8
	4506 Call 0x1C17DFC
	4507 Move X0, X21
	4508 Move X1, X31
	4509 Move X2, X31
	4510 Call Object.op_Equality, X0, X1
	4511 Move TEMP, X0
	4512 And TEMP, TEMP, 1
	4513 Compare TEMP, 1
	4514 JumpIfEqual {5700}
	4515 Move X1, [X31+744]
	4516 Move W0, W20
	4517 Move X2, X31
	4518 Call MaterialReferenceManager.AddFontMaterial, X0, X1
	4519 Move X20, [X31+744]
	4520 Move X9, [X31+32]
	4521 Move X8, 0x654000
	4522 Move [X9+280], X20
	4523 Move X8, [X8+1000]
	4524 Move X21, [X9+256]
	4525 Move X0, [X8]
	4526 Move W8, [X0+224]
	4527 Compare W8, 0
	4528 JumpIfNotEqual {4533}
	4529 Call 0x1C17DFC
	4530 Move X8, 0x654000
	4531 Move X8, [X8+1000]
	4532 Move X0, [X8]
	4533 Move X2, [X0+184]
	4534 Move X0, X20
	4535 Move X1, X21
	4536 Move X4, X31
	4537 Move X3, [X2+8]
	4538 Call MaterialReference.AddMaterialReference, X0, X1, X2, X3
	4539 Move X8, [X31+32]
	4540 Move [X8+288], W0
	4541 Move X8, 0x654000
	4542 Move X8, [X8+1000]
	4543 Move X8, [X8]
	4544 Move X8, [X8+184]
	4545 Move X9, [X8]
	4546 Compare X9, 0
	4547 JumpIfEqual {5656}
	4548 Move W10, [X9+24]
	4549 NotImplemented "Instruction CMP not yet implemented."
	4550 Move W10, 56
	4551 NotImplemented "Instruction SMADDL not yet implemented."
	4552 Move X10, 0x655000
	4553 Move X10, [X10+624]
	4554 Move V2, [X9+48]
	4555 Move V0, [X9+64]
	4556 Move X11, [X9+80]
	4557 Move V1, [X9+2]
	4558 Move X2, [X10]
	4559 Add X8, X8, 16
	4560 Move [X31+224], X11
	4561 Move [X31+192], V2
	4562 Move [X31+200], V0
	4563 Move [X31+11], V1
	4564 Move [X31+112], V1
	4565 Move [X31+120], V2
	4566 Move [X31+9], V0
	4567 Move [X31+160], X11
	4568 Add X1, X31, 112
	4569 Move X0, X8
	4570 Move X10, [X31+32]
	4571 Move X9, -50438144
	4572 Move V1, [X9+188]
	4573 Move S2, 1
	4574 Move W8, [X10+773]
	4575 NotImplemented "Instruction CMP not yet implemented."
	4576 NotImplemented "Instruction FCSEL not yet implemented."
	4577 Multiply S0, S0, S1
	4578 Move X10, [X31+32]
	4579 Move X9, -50438144
	4580 Move V1, [X9+188]
	4581 Move S3, 1
	4582 Move W8, [X10+773]
	4583 Move V2, [X10+488]
	4584 NotImplemented "Instruction CMP not yet implemented."
	4585 NotImplemented "Instruction FCSEL not yet implemented."
	4586 Multiply S0, S0, S1
	4587 Multiply S0, S2, S0
	4588 Move [X10+1032], S0
	4589 Move X8, [X31+32]
	4590 Move V0, [X8+1032]
	4591 Move X8, [X31+32]
	4592 Move V1, [X8+1600]
	4593 Add S0, S1, S0
	4594 Move [X8+1600], S0
	4595 Move X9, [X31+32]
	4596 Move W8, 0x42C80000
	4597 Move S1, W8
	4598 Move V0, [X9+484]
	4599 Multiply S0, S8, S0
	4600 NotImplemented "Instruction FDIV not yet implemented."
	4601 Move X9, [X31+32]
	4602 Move V0, [X9+484]
	4603 Multiply S0, S8, S0
	4604 Move [X9+488], S0
	4605 Move X8, 0x655000
	4606 Move X8, [X8+608]
	4607 Add X0, X9, 496
	4608 Move X1, [X8]
	4609 Call TMP_TextProcessingStack`1<Single>.Add, X0, V0
	4610 Move X10, [X31+32]
	4611 Move X9, -50438144
	4612 Move V1, [X9+188]
	4613 Move S2, 1
	4614 Move W8, [X10+773]
	4615 NotImplemented "Instruction CMP not yet implemented."
	4616 NotImplemented "Instruction FCSEL not yet implemented."
	4617 Multiply S0, S0, S1
	4618 Move X10, [X31+32]
	4619 Move X9, -50438144
	4620 Move V1, [X9+188]
	4621 Move S3, 1
	4622 Move W8, [X10+773]
	4623 Move V2, [X10+488]
	4624 NotImplemented "Instruction CMP not yet implemented."
	4625 NotImplemented "Instruction FCSEL not yet implemented."
	4626 Multiply S0, S0, S1
	4627 Multiply S0, S2, S0
	4628 Move [X10+688], S0
	4629 Move X10, [X31+32]
	4630 Move X9, -50438144
	4631 Move V1, [X9+188]
	4632 Move S2, 1
	4633 Move W8, [X10+773]
	4634 NotImplemented "Instruction CMP not yet implemented."
	4635 NotImplemented "Instruction FCSEL not yet implemented."
	4636 Multiply S0, S0, S1
	4637 Move X10, [X31+32]
	4638 Move X9, -50438144
	4639 Move V1, [X9+188]
	4640 Move S3, 1
	4641 Move W8, [X10+773]
	4642 Move V2, [X10+488]
	4643 NotImplemented "Instruction CMP not yet implemented."
	4644 NotImplemented "Instruction FCSEL not yet implemented."
	4645 Multiply S0, S0, S1
	4646 Multiply S0, S2, S0
	4647 Move [X10+1036], S0
	4648 Move X8, [X31+32]
	4649 Move V0, [X8+1036]
	4650 Move X8, 0x655000
	4651 Move X8, [X8+608]
	4652 Move X19, [X31+32]
	4653 Move X1, [X8]
	4654 Add X0, X19, 1040
	4655 Call TMP_TextProcessingStack`1<Single>.Add, X0, V0
	4656 Move V0, [X19+1036]
	4657 Move [X19+1600], S0
	4658 Move X8, [X31+32]
	4659 Move X8, [X8+256]
	4660 Compare X8, 0
	4661 JumpIfEqual {5656}
	4662 Move X19, [X31+32]
	4663 Add X1, X8, 80
	4664 Add X0, X31, 624
	4665 Move W2, 96
	4666 Move V9, [X19+488]
	4667 Call 0x3EB2B30
	4668 Add X0, X31, 624
	4669 Move X1, X31
	4670 Call FaceInfo.get_pointSize, X0
	4671 Move X8, [X19+256]
	4672 Compare X8, 0
	4673 JumpIfEqual {5656}
	4674 Move W20, W0
	4675 Add X1, X8, 80
	4676 Add X0, X31, 624
	4677 Move W2, 96
	4678 Call 0x3EB2B30
	4679 Add X0, X31, 624
	4680 Move X1, X31
	4681 Call FaceInfo.get_scale, X0
	4682 Move X8, [X31+32]
	4683 Move X8, [X8+248]
	4684 Compare X8, 0
	4685 JumpIfEqual {5656}
	4686 Move X19, [X31+32]
	4687 Move X10, -50438144
	4688 Move V3, [X10+188]
	4689 NotImplemented "Instruction SCVTF not yet implemented."
	4690 Move W9, [X19+773]
	4691 Move S2, 1
	4692 NotImplemented "Instruction FDIV not yet implemented."
	4693 Multiply S0, S1, S0
	4694 NotImplemented "Instruction CMP not yet implemented."
	4695 NotImplemented "Instruction FCSEL not yet implemented."
	4696 Add X1, X8, 80
	4697 Add X0, X31, 624
	4698 Move W2, 96
	4699 Multiply S9, S0, S1
	4700 Call 0x3EB2B30
	4701 Add X0, X31, 624
	4702 Move X1, X31
	4703 Call FaceInfo.get_lineHeight, X0
	4704 Move W8, 0x42C80000
	4705 Multiply S0, S8, S0
	4706 Move S1, W8
	4707 NotImplemented "Instruction FDIV not yet implemented."
	4708 Multiply S0, S9, S0
	4709 Move [X19+704], S0
	4710 Move X10, [X31+32]
	4711 Move X9, -50438144
	4712 Move V0, [X9+188]
	4713 Move S2, 1
	4714 Move W8, [X10+773]
	4715 Move V1, [X10+488]
	4716 NotImplemented "Instruction CMP not yet implemented."
	4717 NotImplemented "Instruction FCSEL not yet implemented."
	4718 Multiply S0, S8, S0
	4719 Multiply S0, S1, S0
	4720 Move [X10+704], S0
	4721 Move X0, [X19]
	4722 Move X9, [X31+32]
	4723 Move W8, [X0+224]
	4724 Move X20, [X9+1680]
	4725 Compare W8, 0
	4726 JumpIfNotEqual {4728}
	4727 Call 0x1C17DFC
	4728 Move X0, X20
	4729 Move X1, X31
	4730 Move X2, X31
	4731 Call Object.op_Equality, X0, X1
	4732 Move TEMP, X0
	4733 And TEMP, TEMP, 1
	4734 Compare TEMP, 1
	4735 JumpIfNotEqual {4892}
	4736 Move X0, X31
	4737 Call TMP_Settings.get_defaultSpriteAsset
	4738 Move X8, [X19]
	4739 Move X20, X0
	4740 Move W9, [X8+224]
	4741 Compare W9, 0
	4742 JumpIfNotEqual {4745}
	4743 Move X0, X8
	4744 Call 0x1C17DFC
	4745 Move X0, X20
	4746 Move X1, X31
	4747 Move X2, X31
	4748 Call Object.op_Inequality, X0, X1
	4749 Move TEMP, X0
	4750 And TEMP, TEMP, 1
	4751 Compare TEMP, 1
	4752 JumpIfNotEqual {5239}
	4753 Move X0, X31
	4754 Call TMP_Settings.get_defaultSpriteAsset
	4755 NotImplemented "Instruction CMP not yet implemented."
	4756 NotImplemented "Instruction CMP not yet implemented."
	4757 Move X10, [X31+32]
	4758 Move X9, -50438144
	4759 Move V1, [X9+188]
	4760 Move S2, 1
	4761 Move W8, [X10+773]
	4762 NotImplemented "Instruction CMP not yet implemented."
	4763 NotImplemented "Instruction FCSEL not yet implemented."
	4764 Multiply S0, S0, S1
	4765 Move [X10+684], S0
	4766 Move X9, [X31+32]
	4767 Move W8, 0x42C80000
	4768 Move S2, W8
	4769 Move V1, [X9+856]
	4770 Multiply S0, S0, S1
	4771 NotImplemented "Instruction FDIV not yet implemented."
	4772 Move [X9+1600], S0
	4773 Move X10, [X31+32]
	4774 Move X9, -50438144
	4775 Move V2, [X9+188]
	4776 Move S3, 1
	4777 Move W8, [X10+773]
	4778 Move V1, [X10+488]
	4779 NotImplemented "Instruction CMP not yet implemented."
	4780 Multiply S0, S0, S1
	4781 NotImplemented "Instruction FCSEL not yet implemented."
	4782 Multiply S0, S0, S1
	4783 Move [X10+1600], S0
	4784 Move X10, [X31+32]
	4785 Move X9, -50438144
	4786 Move V1, [X9+188]
	4787 Move S2, 1
	4788 Move W8, [X10+773]
	4789 NotImplemented "Instruction CMP not yet implemented."
	4790 NotImplemented "Instruction FCSEL not yet implemented."
	4791 Multiply S0, S0, S1
	4792 Move [X10+864], S0
	4793 Move X8, [X31+32]
	4794 Move X9, -50438144
	4795 Move V1, [X9+188]
	4796 Move S2, 1
	4797 Move W8, [X8+773]
	4798 NotImplemented "Instruction CMP not yet implemented."
	4799 NotImplemented "Instruction FCSEL not yet implemented."
	4800 Multiply S0, S0, S1
	4801 Move X10, [X31+32]
	4802 Move X9, -50438144
	4803 Move V1, [X9+188]
	4804 Move S3, 1
	4805 Move W8, [X10+773]
	4806 Move V2, [X10+488]
	4807 NotImplemented "Instruction CMP not yet implemented."
	4808 NotImplemented "Instruction FCSEL not yet implemented."
	4809 Multiply S0, S0, S1
	4810 Multiply S0, S2, S0
	4811 Move X8, [X31+32]
	4812 Move V0, [X8+852]
	4813 Move X8, [X31+32]
	4814 NotImplemented "Instruction FCMP not yet implemented."
	4815 Move S1, W31
	4816 NotImplemented "Instruction FCSEL not yet implemented."
	4817 Move X8, [X31+32]
	4818 Move X9, -50438144
	4819 Move V1, [X9+188]
	4820 Move S2, 1
	4821 Move W8, [X8+773]
	4822 NotImplemented "Instruction CMP not yet implemented."
	4823 NotImplemented "Instruction FCSEL not yet implemented."
	4824 Multiply S0, S0, S1
	4825 Move X10, [X31+32]
	4826 Move X9, -50438144
	4827 Move V1, [X9+188]
	4828 Move S3, 1
	4829 Move W8, [X10+773]
	4830 Move V2, [X10+488]
	4831 NotImplemented "Instruction CMP not yet implemented."
	4832 NotImplemented "Instruction FCSEL not yet implemented."
	4833 Multiply S0, S0, S1
	4834 Multiply S0, S2, S0
	4835 Move X8, [X31+32]
	4836 Move V0, [X8+848]
	4837 Move X8, [X31+32]
	4838 NotImplemented "Instruction FCMP not yet implemented."
	4839 Move S1, W31
	4840 NotImplemented "Instruction FCSEL not yet implemented."
	4841 Move [X8+848], S0
	4842 NotImplemented "Instruction CMP not yet implemented."
	4843 NotImplemented "Instruction CMP not yet implemented."
	4844 Move X9, [X31+32]
	4845 Move [X9+532], W8
	4846 Move X9, [X31+32]
	4847 Move X8, 0x655000
	4848 Move W1, [X9+532]
	4849 Move X8, [X8+632]
	4850 Add X0, X9, 536
	4851 Move X9, [X31+32]
	4852 Move W8, 4
	4853 Move W1, 4
	4854 Move X9, [X31+32]
	4855 Move W8, 16
	4856 Move W1, 16
	4857 Move [X9+632], W8
	4858 Move X8, 0x655000
	4859 Move X8, [X8+584]
	4860 Add X0, X9, 640
	4861 Move X2, [X8]
	4862 Call TMP_TextProcessingStack`1<Int32Enum>.Add, X0, X1
	4863 Compare X1, 0
	4864 JumpIfEqual {5656}
	4865 Move W9, [X1+24]
	4866 NotImplemented "Instruction CMP not yet implemented."
	4867 NotImplemented "Instruction LDRH not yet implemented."
	4868 Move W10, [X0+224]
	4869 NotImplemented "Instruction CMP not yet implemented."
	4870 NotImplemented "Instruction CSET not yet implemented."
	4871 NotImplemented "Instruction CMP not yet implemented."
	4872 NotImplemented "Instruction CSET not yet implemented."
	4873 And W19, W11, W9
	4874 Compare W10, 0
	4875 JumpIfNotEqual {4881}
	4876 Call 0x1C17DFC
	4877 Move X8, 0x654000
	4878 Move X8, [X8+1000]
	4879 Move X8, [X8]
	4880 Move X8, [X8+184]
	4881 Compare W19, 0
	4882 JumpIfEqual {5072}
	4883 Move X1, [X8+128]
	4884 Move W2, 15
	4885 Call TMP_Text.HexCharsToColor, X0, X1, X2
	4886 Move X9, [X31+32]
	4887 Move X8, 0x655000
	4888 Move [X9+1260], W0
	4889 Move X8, [X8+616]
	4890 Move X2, [X8]
	4891 Add X8, X9, 1264
	4892 Move X8, [X31+32]
	4893 Move X20, [X8+1688]
	4894 Move X21, X31
	4895 Move X0, [X19]
	4896 Move [X31+752], X21
	4897 Move W8, [X0+224]
	4898 Compare W8, 0
	4899 JumpIfNotEqual {4901}
	4900 Call 0x1C17DFC
	4901 Move X0, X21
	4902 Move X1, X31
	4903 Move X2, X31
	4904 Call Object.op_Equality, X0, X1
	4905 Move TEMP, X0
	4906 And TEMP, TEMP, 1
	4907 Compare TEMP, 1
	4908 JumpIfNotEqual {4946}
	4909 Move X0, X31
	4910 Call TMP_Settings.get_defaultFontAssetPath
	4911 Move X8, 0x654000
	4912 Move X8, [X8+1000]
	4913 Move X21, X0
	4914 Move X8, [X8]
	4915 Move W9, [X8+224]
	4916 Compare W9, 0
	4917 JumpIfNotEqual {4923}
	4918 Move X0, X8
	4919 Call 0x1C17DFC
	4920 Move X8, 0x654000
	4921 Move X8, [X8+1000]
	4922 Move X8, [X8]
	4923 Move X9, [X8+184]
	4924 Move X8, [X9+136]
	4925 Compare X8, 0
	4926 JumpIfEqual {5656}
	4927 Move W10, [X8+24]
	4928 Compare W10, 0
	4929 JumpIfEqual {5630}
	4930 Move X1, [X9+128]
	4931 Move W2, [X8+44]
	4932 Move W3, [X8+48]
	4933 Move X0, X31
	4934 Move X4, X31
	4935 Call String.CreateString, X0, X1, X2, X3
	4936 Move X1, X0
	4937 Move X0, X21
	4938 Move X2, X31
	4939 Call String.Concat, X0, X1
	4940 Move X8, 0x654000
	4941 Move X8, [X8+1472]
	4942 Move X1, [X8]
	4943 Call 0x2242FB8, X0
	4944 Move X21, X0
	4945 Move [X31+752], X0
	4946 Move X21, [X31+752]
	4947 Move X0, [X19]
	4948 Move W8, [X0+224]
	4949 Compare W8, 0
	4950 JumpIfNotEqual {4952}
	4951 Call 0x1C17DFC
	4952 Move X0, X21
	4953 Move X1, X31
	4954 Move X2, X31
	4955 Call Object.op_Equality, X0, X1
	4956 Move TEMP, X0
	4957 And TEMP, TEMP, 1
	4958 Compare TEMP, 1
	4959 JumpIfEqual {5700}
	4960 Move X0, [X31+752]
	4961 Move X1, X31
	4962 Call MaterialReferenceManager.AddFontAsset, X0
	4963 Or W8, W20, W23
	4964 Compare W8, 0
	4965 JumpIfEqual {5025}
	4966 Move W8, 0xFDF7
	4967 NotImplemented "Instruction MOVK not yet implemented."
	4968 NotImplemented "Instruction CMP not yet implemented."
	4969 Move W8, 0xD9F7
	4970 NotImplemented "Instruction MOVK not yet implemented."
	4971 NotImplemented "Instruction CMP not yet implemented."
	4972 Add X1, X31, 744
	4973 Move W0, W20
	4974 Move X2, X31
	4975 Call MaterialReferenceManager.TryGetMaterial, X0, X1
	4976 Move TEMP, X0
	4977 And TEMP, TEMP, 1
	4978 Compare TEMP, 1
	4979 JumpIfNotEqual {5126}
	4980 Move X20, [X31+744]
	4981 Move X8, [X31+32]
	4982 Move [X8+280], X20
	4983 Move X8, 0x654000
	4984 Move X8, [X8+1000]
	4985 Move X21, [X31+752]
	4986 Move X0, [X8]
	4987 Move W8, [X0+224]
	4988 Compare W8, 0
	4989 JumpIfNotEqual {4994}
	4990 Call 0x1C17DFC
	4991 Move X8, 0x654000
	4992 Move X8, [X8+1000]
	4993 Move X0, [X8]
	4994 Move X2, [X0+184]
	4995 Move X0, X20
	4996 Move X1, X21
	4997 Move X4, X31
	4998 Move X3, [X2+8]
	4999 Call MaterialReference.AddMaterialReference, X0, X1, X2, X3
	5000 Move X8, [X31+32]
	5001 Move [X8+288], W0
	5002 Move X8, 0x654000
	5003 Move X8, [X8+1000]
	5004 Move X8, [X8]
	5005 Move X8, [X8+184]
	5006 Move X9, [X8]
	5007 Compare X9, 0
	5008 JumpIfEqual {5656}
	5009 Move W10, [X9+24]
	5010 NotImplemented "Instruction CMP not yet implemented."
	5011 Move W10, 56
	5012 NotImplemented "Instruction SMADDL not yet implemented."
	5013 Move X10, 0x655000
	5014 Move X10, [X10+624]
	5015 Move V2, [X9+48]
	5016 Move V0, [X9+64]
	5017 Move X11, [X9+80]
	5018 Move V1, [X9+2]
	5019 Move X2, [X10]
	5020 Add X8, X8, 16
	5021 Move [X31+480], X11
	5022 Move [X31+448], V2
	5023 Move [X31+456], V0
	5024 Move [X31+27], V1
	5025 Move X20, [X31+752]
	5026 Compare X20, 0
	5027 JumpIfEqual {5656}
	5028 Move X21, [X20+32]
	5029 Move X8, [X31+32]
	5030 Move [X8+280], X21
	5031 Move X8, 0x654000
	5032 Move X8, [X8+1000]
	5033 Move X0, [X8]
	5034 Move W8, [X0+224]
	5035 Compare W8, 0
	5036 JumpIfNotEqual {5041}
	5037 Call 0x1C17DFC
	5038 Move X8, 0x654000
	5039 Move X8, [X8+1000]
	5040 Move X0, [X8]
	5041 Move X2, [X0+184]
	5042 Move X0, X21
	5043 Move X1, X20
	5044 Move X4, X31
	5045 Move X3, [X2+8]
	5046 Call MaterialReference.AddMaterialReference, X0, X1, X2, X3
	5047 Move X8, [X31+32]
	5048 Move [X8+288], W0
	5049 Move X8, 0x654000
	5050 Move X8, [X8+1000]
	5051 Move X8, [X8]
	5052 Move X8, [X8+184]
	5053 Move X9, [X8]
	5054 Compare X9, 0
	5055 JumpIfEqual {5656}
	5056 Move W10, [X9+24]
	5057 NotImplemented "Instruction CMP not yet implemented."
	5058 Move W10, 56
	5059 NotImplemented "Instruction SMADDL not yet implemented."
	5060 Move X10, 0x655000
	5061 Move X10, [X10+624]
	5062 Move V2, [X9+48]
	5063 Move V0, [X9+64]
	5064 Move X11, [X9+80]
	5065 Move V1, [X9+2]
	5066 Move X2, [X10]
	5067 Add X8, X8, 16
	5068 Move [X31+544], X11
	5069 Move [X31+512], V2
	5070 Move [X31+520], V0
	5071 Move [X31+31], V1
	5072 Move X8, [X8+136]
	5073 Compare X8, 0
	5074 JumpIfEqual {5656}
	5075 Move W9, [X8+24]
	5076 Compare W9, 0
	5077 JumpIfEqual {5630}
	5078 Move W8, [X8+36]
	5079 Move W9, 0x29C9
	5080 NotImplemented "Instruction MOVK not yet implemented."
	5081 NotImplemented "Instruction CMP not yet implemented."
	5082 Move [X31+620], W8
	5083 Move W9, 0x1A47
	5084 NotImplemented "Instruction MOVK not yet implemented."
	5085 NotImplemented "Instruction CMP not yet implemented."
	5086 Move W9, 0x641B
	5087 NotImplemented "Instruction MOVK not yet implemented."
	5088 NotImplemented "Instruction CMP not yet implemented."
	5089 Move W9, 0xAEE7
	5090 NotImplemented "Instruction MOVK not yet implemented."
	5091 NotImplemented "Instruction CMP not yet implemented."
	5092 Move W9, 0x3284
	5093 NotImplemented "Instruction MOVK not yet implemented."
	5094 NotImplemented "Instruction CMP not yet implemented."
	5095 Move X8, -50446336
	5096 Move X9, -50442240
	5097 Move V1, [X8+3984]
	5098 Move V2, [X9+48]
	5099 Move S0, 1
	5100 Move X8, [X31+32]
	5101 Move X9, -50442240
	5102 Move V1, [X9+188]
	5103 Move S2, 1
	5104 Move W8, [X8+773]
	5105 NotImplemented "Instruction CMP not yet implemented."
	5106 NotImplemented "Instruction FCSEL not yet implemented."
	5107 Multiply S0, S0, S1
	5108 Move X10, [X31+32]
	5109 Move X9, -50442240
	5110 Move V1, [X9+188]
	5111 Move S3, 1
	5112 Move W8, [X10+773]
	5113 Move V2, [X10+488]
	5114 NotImplemented "Instruction CMP not yet implemented."
	5115 NotImplemented "Instruction FCSEL not yet implemented."
	5116 Multiply S0, S0, S1
	5117 Multiply S0, S2, S0
	5118 Move X8, [X31+32]
	5119 Move V0, [X8+848]
	5120 Move X8, [X31+32]
	5121 NotImplemented "Instruction FCMP not yet implemented."
	5122 Move S1, W31
	5123 NotImplemented "Instruction FCSEL not yet implemented."
	5124 Move [X8+848], S0
	5125 Move [X8+852], S0
	5126 Move X0, X31
	5127 Call TMP_Settings.get_defaultFontAssetPath
	5128 Move X8, 0x653000
	5129 Move X8, [X8+1000]
	5130 Move X21, X0
	5131 Move X8, [X8]
	5132 Move W9, [X8+224]
	5133 Compare W9, 0
	5134 JumpIfNotEqual {5140}
	5135 Move X0, X8
	5136 Call 0x1C17DFC
	5137 Move X8, 0x653000
	5138 Move X8, [X8+1000]
	5139 Move X8, [X8]
	5140 Move X9, [X8+184]
	5141 Move X8, [X9+136]
	5142 Compare X8, 0
	5143 JumpIfEqual {5656}
	5144 Move W10, [X8+24]
	5145 NotImplemented "Instruction CMP not yet implemented."
	5146 Move X1, [X9+128]
	5147 Move W2, [X8+68]
	5148 Move W3, [X8+72]
	5149 Move X0, X31
	5150 Move X4, X31
	5151 Call String.CreateString, X0, X1, X2, X3
	5152 Move X1, X0
	5153 Move X0, X21
	5154 Move X2, X31
	5155 Call String.Concat, X0, X1
	5156 Move X8, 0x648000
	5157 Move X8, [X8+2776]
	5158 Move X1, [X8]
	5159 Call 0x2242FB8, X0
	5160 Move X8, [X19]
	5161 Move [X31+744], X0
	5162 Move X21, X0
	5163 Move W9, [X8+224]
	5164 Compare W9, 0
	5165 JumpIfNotEqual {5168}
	5166 Move X0, X8
	5167 Call 0x1C17DFC
	5168 Move X0, X21
	5169 Move X1, X31
	5170 Move X2, X31
	5171 Call Object.op_Equality, X0, X1
	5172 Move TEMP, X0
	5173 And TEMP, TEMP, 1
	5174 Compare TEMP, 1
	5175 JumpIfEqual {5700}
	5176 Move X1, [X31+744]
	5177 Move W0, W20
	5178 Move X2, X31
	5179 Call MaterialReferenceManager.AddFontMaterial, X0, X1
	5180 Move X20, [X31+744]
	5181 Move X8, [X31+32]
	5182 Move [X8+280], X20
	5183 Move X8, 0x653000
	5184 Move X8, [X8+1000]
	5185 Move X21, [X31+752]
	5186 Move X0, [X8]
	5187 Move W8, [X0+224]
	5188 Compare W8, 0
	5189 JumpIfNotEqual {5194}
	5190 Call 0x1C17DFC
	5191 Move X8, 0x653000
	5192 Move X8, [X8+1000]
	5193 Move X0, [X8]
	5194 Move X2, [X0+184]
	5195 Move X0, X20
	5196 Move X1, X21
	5197 Move X4, X31
	5198 Move X3, [X2+8]
	5199 Call MaterialReference.AddMaterialReference, X0, X1, X2, X3
	5200 Move X8, [X31+32]
	5201 Move [X8+288], W0
	5202 Move X8, 0x653000
	5203 Move X8, [X8+1000]
	5204 Move X8, [X8]
	5205 Move X8, [X8+184]
	5206 Move X9, [X8]
	5207 Compare X9, 0
	5208 JumpIfEqual {5656}
	5209 Move W10, [X9+24]
	5210 NotImplemented "Instruction CMP not yet implemented."
	5211 Move W10, 56
	5212 NotImplemented "Instruction SMADDL not yet implemented."
	5213 Move X10, 0x654000
	5214 Move X10, [X10+624]
	5215 Move V2, [X9+48]
	5216 Move V0, [X9+64]
	5217 Move X11, [X9+80]
	5218 Move V1, [X9+2]
	5219 Move X2, [X10]
	5220 Add X8, X8, 16
	5221 Move [X31+416], X11
	5222 Move [X31+384], V2
	5223 Move [X31+392], V0
	5224 Move [X31+23], V1
	5225 Add X1, X31, 112
	5226 Move X0, X8
	5227 Move [X31+112], V1
	5228 Move [X31+120], V2
	5229 Move [X31+9], V0
	5230 Move [X31+160], X11
	5231 Call TMP_TextProcessingStack`1<MaterialReference>.Add, X0, X1
	5232 Move X8, [X31+752]
	5233 Move X9, [X31+32]
	5234 Move [X9+256], X8
	5235 Move X9, [X31+32]
	5236 Move X8, 0x654000
	5237 Move V0, V8
	5238 Move [X9+488], S8
	5239 Move X8, 0x654000
	5240 Move X9, 0x654000
	5241 Move X8, [X8+760]
	5242 Move X9, [X9+568]
	5243 Move X0, [X8]
	5244 Move X1, [X9]
	5245 Call 0x2242FB8, X0
	5246 Move X8, [X31+32]
	5247 Move X20, X0
	5248 Move [X8+1680], X0
	5249 Move X8, [X31+32]
	5250 Move [X8+1688], X20
	5251 Move X0, [X19]
	5252 Move W8, [X0+224]
	5253 Compare W8, 0
	5254 JumpIfNotEqual {5256}
	5255 Call 0x1C17DFC
	5256 Move X0, X20
	5257 Move X1, X31
	5258 Move X2, X31
	5259 Call Object.op_Equality, X0, X1
	5260 Move TEMP, X0
	5261 And TEMP, TEMP, 1
	5262 Compare TEMP, 1
	5263 JumpIfEqual {5700}
	5264 Move X8, 0x653000
	5265 Move X8, [X8+1000]
	5266 Move X0, [X8]
	5267 Move W8, [X0+224]
	5268 Compare W8, 0
	5269 JumpIfNotEqual {5274}
	5270 Call 0x1C17DFC
	5271 Move X8, 0x653000
	5272 Move X8, [X8+1000]
	5273 Move X0, [X8]
	5274 Move X8, [X0+184]
	5275 Move X9, [X8+136]
	5276 Compare X9, 0
	5277 JumpIfEqual {5656}
	5278 Move W10, [X9+24]
	5279 Compare W10, 0
	5280 JumpIfEqual {5630}
	5281 Move W10, [X9+40]
	5282 NotImplemented "Instruction CMP not yet implemented."
	5283 Move W10, [X0+224]
	5284 Compare W10, 0
	5285 JumpIfNotEqual {5294}
	5286 Call 0x1C17DFC
	5287 Move X8, 0x653000
	5288 Move X8, [X8+1000]
	5289 Move X8, [X8]
	5290 Move X8, [X8+184]
	5291 Move X9, [X8+136]
	5292 Compare X9, 0
	5293 JumpIfEqual {5656}
	5294 Move W10, [X9+24]
	5295 Compare W10, 0
	5296 JumpIfEqual {5630}
	5297 Move X1, [X8+128]
	5298 Move W2, [X9+44]
	5299 Move W3, [X9+48]
	5300 Add X4, X31, 112
	5301 Move [X31+112], W31
	5302 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	5303 Move W8, 0x7F800000
	5304 Move S1, W8
	5305 NotImplemented "Instruction FCVTZS not yet implemented."
	5306 NotImplemented "Instruction FCMP not yet implemented."
	5307 Move W8, 0x80000000
	5308 NotImplemented "Instruction CSEL not yet implemented."
	5309 Add W31, W19, 0x8000
	5310 Move W20, W31
	5311 Move X8, [X31+32]
	5312 Move X0, [X8+1688]
	5313 Compare X0, 0
	5314 JumpIfEqual {5656}
	5315 Move X1, X31
	5316 Call TMP_SpriteAsset.get_spriteCharacterTable, X0
	5317 Compare X0, 0
	5318 JumpIfEqual {5656}
	5319 Move W8, [X0+24]
	5320 Subtract W8, W8, 1
	5321 NotImplemented "Instruction CMP not yet implemented."
	5322 Move X8, [X31+32]
	5323 Move [X8+1700], W19
	5324 Move X8, 0x653000
	5325 Move X8, [X8+1000]
	5326 Move X0, [X8]
	5327 Move W8, [X0+224]
	5328 Compare W8, 0
	5329 JumpIfNotEqual {5334}
	5330 Call 0x1C17DFC
	5331 Move X8, 0x653000
	5332 Move X8, [X8+1000]
	5333 Move X0, [X8]
	5334 Move X8, [X0+184]
	5335 Move X9, [X31+32]
	5336 Move W24, 0xEF43
	5337 Move W19, W31
	5338 Move W8, [X8+104]
	5339 NotImplemented "Instruction MOVK not yet implemented."
	5340 Move W25, 24
	5341 Move W26, 0xA953
	5342 Move W29, 0x7F800000
	5343 Move W28, 0x80000000
	5344 Move W27, 0x7753
	5345 Move [X9+441], W31
	5346 Move [X9+444], W8
	5347 Move W8, [X0+224]
	5348 Compare W8, 0
	5349 JumpIfNotEqual {5354}
	5350 Call 0x1C17DFC
	5351 Move X8, 0x653000
	5352 Move X8, [X8+1000]
	5353 Move X0, [X8]
	5354 Move X9, [X0+184]
	5355 Move X8, [X9+136]
	5356 Compare X8, 0
	5357 JumpIfEqual {5656}
	5358 Move W10, [X8+24]
	5359 NotImplemented "Instruction CMP not yet implemented."
	5360 Move W10, [X0+224]
	5361 Compare W10, 0
	5362 JumpIfNotEqual {5371}
	5363 Call 0x1C17DFC
	5364 Move X8, 0x653000
	5365 Move X8, [X8+1000]
	5366 Move X0, [X8]
	5367 Move X9, [X0+184]
	5368 Move X8, [X9+136]
	5369 Compare X8, 0
	5370 JumpIfEqual {5656}
	5371 Move W10, [X8+24]
	5372 NotImplemented "Instruction CMP not yet implemented."
	5373 Move X21, W19
	5374 NotImplemented "Instruction MADD not yet implemented."
	5375 Move W10, [X10+32]
	5376 Compare W10, 0
	5377 JumpIfEqual {5631}
	5378 Move W10, [X0+224]
	5379 Compare W10, 0
	5380 JumpIfNotEqual {5389}
	5381 Call 0x1C17DFC
	5382 Move X8, 0x653000
	5383 Move X8, [X8+1000]
	5384 Move X0, [X8]
	5385 Move X9, [X0+184]
	5386 Move X8, [X9+136]
	5387 Compare X8, 0
	5388 JumpIfEqual {5656}
	5389 Move W10, [X8+24]
	5390 NotImplemented "Instruction CMP not yet implemented."
	5391 NotImplemented "Instruction MADD not yet implemented."
	5392 Move W10, [X10+32]
	5393 Move [X31+616], W31
	5394 NotImplemented "Instruction CMP not yet implemented."
	5395 NotImplemented "Instruction CMP not yet implemented."
	5396 Move W11, 0x8289
	5397 NotImplemented "Instruction MOVK not yet implemented."
	5398 NotImplemented "Instruction CMP not yet implemented."
	5399 Move W20, W31
	5400 Move W11, 0x828A
	5401 NotImplemented "Instruction MOVK not yet implemented."
	5402 NotImplemented "Instruction CMP not yet implemented."
	5403 Move W8, 0xB5DD
	5404 NotImplemented "Instruction MOVK not yet implemented."
	5405 NotImplemented "Instruction CMP not yet implemented."
	5406 Move W8, 0x48DD
	5407 NotImplemented "Instruction MOVK not yet implemented."
	5408 NotImplemented "Instruction CMP not yet implemented."
	5409 NotImplemented "Instruction CMP not yet implemented."
	5410 Move W11, 0x80FB
	5411 NotImplemented "Instruction CMP not yet implemented."
	5412 Move W11, 0x9A51
	5413 NotImplemented "Instruction CMP not yet implemented."
	5414 NotImplemented "Instruction CMP not yet implemented."
	5415 Move W11, 0xB2FB
	5416 NotImplemented "Instruction CMP not yet implemented."
	5417 NotImplemented "Instruction CMP not yet implemented."
	5418 Move W11, 0x6851
	5419 NotImplemented "Instruction CMP not yet implemented."
	5420 NotImplemented "Instruction CMP not yet implemented."
	5421 Move X10, [X31+32]
	5422 Move W9, [X0+224]
	5423 Move X20, [X10+1688]
	5424 Compare W9, 0
	5425 JumpIfNotEqual {5434}
	5426 Call 0x1C17DFC
	5427 Move X8, 0x653000
	5428 Move X8, [X8+1000]
	5429 Move X8, [X8]
	5430 Move X8, [X8+184]
	5431 Move X8, [X8+136]
	5432 Compare X8, 0
	5433 JumpIfEqual {5656}
	5434 Move W9, [X8+24]
	5435 NotImplemented "Instruction CMP not yet implemented."
	5436 NotImplemented "Instruction MADD not yet implemented."
	5437 Move W1, [X8+36]
	5438 Add X3, X31, 616
	5439 Move W2, 1
	5440 Move X0, X20
	5441 Move X4, X31
	5442 Call TMP_SpriteAsset.SearchForSpriteByHashCode, X0, X1, X2, X3
	5443 Move X8, [X31+32]
	5444 Move [X8+1688], X0
	5445 Move W8, [X31+616]
	5446 Add W31, W8, 1
	5447 Move W10, [X0+224]
	5448 Compare W10, 0
	5449 JumpIfNotEqual {5458}
	5450 Call 0x1C17DFC
	5451 Move X8, 0x653000
	5452 Move X8, [X8+1000]
	5453 Move X8, [X8]
	5454 Move X9, [X8+184]
	5455 Move X8, [X9+136]
	5456 Compare X8, 0
	5457 JumpIfEqual {5656}
	5458 Move W10, [X8+24]
	5459 NotImplemented "Instruction CMP not yet implemented."
	5460 NotImplemented "Instruction MADD not yet implemented."
	5461 Move X1, [X9+128]
	5462 Move W2, [X8+44]
	5463 Move W3, [X8+48]
	5464 Add X4, X31, 112
	5465 Move [X31+112], W31
	5466 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	5467 Move X9, [X31+32]
	5468 NotImplemented "Instruction FCMP not yet implemented."
	5469 NotImplemented "Instruction CSET not yet implemented."
	5470 Move [X9+441], W8
	5471 Move W10, [X0+224]
	5472 Compare W10, 0
	5473 JumpIfNotEqual {5482}
	5474 Call 0x1C17DFC
	5475 Move X8, 0x653000
	5476 Move X8, [X8+1000]
	5477 Move X8, [X8]
	5478 Move X9, [X8+184]
	5479 Move X8, [X9+136]
	5480 Compare X8, 0
	5481 JumpIfEqual {5656}
	5482 Move W10, [X8+24]
	5483 NotImplemented "Instruction CMP not yet implemented."
	5484 NotImplemented "Instruction MADD not yet implemented."
	5485 Move X1, [X9+128]
	5486 Move W2, [X8+44]
	5487 Move W3, [X8+48]
	5488 Move X0, [X31+32]
	5489 Add X4, X9, 144
	5490 Call TMP_Text.GetAttributeParameters, X0, X1, X2, X3, X4
	5491 NotImplemented "Instruction CMP not yet implemented."
	5492 Move X8, 0x653000
	5493 Move X8, [X8+1000]
	5494 Move X0, [X8]
	5495 Move W8, [X0+224]
	5496 Compare W8, 0
	5497 JumpIfNotEqual {5502}
	5498 Call 0x1C17DFC
	5499 Move X8, 0x653000
	5500 Move X8, [X8+1000]
	5501 Move X0, [X8]
	5502 Move X8, [X0+184]
	5503 Move X8, [X8+144]
	5504 Compare X8, 0
	5505 JumpIfEqual {5656}
	5506 Move W9, [X8+24]
	5507 Compare W9, 0
	5508 JumpIfEqual {5630}
	5509 Move X10, [X31+32]
	5510 Move V0, [X8+32]
	5511 Move S1, W29
	5512 Move W8, [X10+1073]
	5513 NotImplemented "Instruction FCVTZS not yet implemented."
	5514 NotImplemented "Instruction FCMP not yet implemented."
	5515 NotImplemented "Instruction CSEL not yet implemented."
	5516 Move [X10+1700], W9
	5517 Compare W8, 0
	5518 JumpIfEqual {5626}
	5519 Move X22, [X31+32]
	5520 Move X0, X22
	5521 Call TMP_Text.get_spriteAnimator, X0
	5522 Move X8, 0x653000
	5523 Move X8, [X8+1000]
	5524 Move W21, [X22+1172]
	5525 Move X20, [X22+1688]
	5526 Move W22, [X22+1700]
	5527 Move X8, [X8]
	5528 Move X23, X0
	5529 Move W9, [X8+224]
	5530 Compare W9, 0
	5531 JumpIfNotEqual {5537}
	5532 Move X0, X8
	5533 Call 0x1C17DFC
	5534 Move X8, 0x653000
	5535 Move X8, [X8+1000]
	5536 Move X8, [X8]
	5537 Move X8, [X8+184]
	5538 Move X8, [X8+144]
	5539 Compare X8, 0
	5540 JumpIfEqual {5656}
	5541 Move W9, [X8+24]
	5542 NotImplemented "Instruction CMP not yet implemented."
	5543 NotImplemented "Instruction CMP not yet implemented."
	5544 Compare X23, 0
	5545 JumpIfEqual {5656}
	5546 Move S0, [X8+36]
	5547 Move S1, [X8+40]
	5548 Move S2, W29
	5549 Move X0, X23
	5550 Move W1, W21
	5551 NotImplemented "Instruction FCVTZS not yet implemented."
	5552 NotImplemented "Instruction FCMP not yet implemented."
	5553 NotImplemented "Instruction FCVTZS not yet implemented."
	5554 NotImplemented "Instruction CSEL not yet implemented."
	5555 NotImplemented "Instruction FCMP not yet implemented."
	5556 NotImplemented "Instruction CSEL not yet implemented."
	5557 Move X2, X20
	5558 Move W3, W22
	5559 Move X6, X31
	5560 Call TMP_SpriteAnimator.DoSpriteAnimation, X0, X1, X2, X3, X4, X5
	5561 Move W11, 0x246A
	5562 NotImplemented "Instruction MOVK not yet implemented."
	5563 NotImplemented "Instruction CMP not yet implemented."
	5564 Move W11, 0x4D63
	5565 NotImplemented "Instruction MOVK not yet implemented."
	5566 NotImplemented "Instruction CMP not yet implemented."
	5567 Move W10, [X0+224]
	5568 Compare W10, 0
	5569 JumpIfNotEqual {5578}
	5570 Call 0x1C17DFC
	5571 Move X8, 0x653000
	5572 Move X8, [X8+1000]
	5573 Move X8, [X8]
	5574 Move X9, [X8+184]
	5575 Move X8, [X9+136]
	5576 Compare X8, 0
	5577 JumpIfEqual {5656}
	5578 Move W10, [X8+24]
	5579 NotImplemented "Instruction CMP not yet implemented."
	5580 NotImplemented "Instruction MADD not yet implemented."
	5581 Move X1, [X9+128]
	5582 Move W2, [X8+44]
	5583 Move W3, [X8+48]
	5584 Call TMP_Text.HexCharsToColor, X0, X1, X2, X3
	5585 Move X8, [X31+32]
	5586 Move [X8+444], W0
	5587 Move W10, [X0+224]
	5588 Compare W10, 0
	5589 JumpIfNotEqual {5598}
	5590 Call 0x1C17DFC
	5591 Move X8, 0x653000
	5592 Move X8, [X8+1000]
	5593 Move X8, [X8]
	5594 Move X9, [X8+184]
	5595 Move X8, [X9+136]
	5596 Compare X8, 0
	5597 JumpIfEqual {5656}
	5598 Move W10, [X8+24]
	5599 NotImplemented "Instruction CMP not yet implemented."
	5600 Move X1, [X9+128]
	5601 Move W2, [X8+68]
	5602 Move W3, [X8+72]
	5603 Add X4, X31, 112
	5604 Move [X31+112], W31
	5605 Call TMP_Text.ConvertToFloat, X0, X1, X2, X3, X4
	5606 Move S1, W29
	5607 NotImplemented "Instruction FCVTZS not yet implemented."
	5608 NotImplemented "Instruction FCMP not yet implemented."
	5609 NotImplemented "Instruction CSEL not yet implemented."
	5610 Add W31, W20, 0x8000
	5611 Move [X31+616], W20
	5612 Move X8, [X31+32]
	5613 Move X0, [X8+1688]
	5614 Compare X0, 0
	5615 JumpIfEqual {5656}
	5616 Move X1, X31
	5617 Call TMP_SpriteAsset.get_spriteCharacterTable, X0
	5618 Compare X0, 0
	5619 JumpIfEqual {5656}
	5620 Move W8, [X0+24]
	5621 Subtract W8, W8, 1
	5622 NotImplemented "Instruction CMP not yet implemented."
	5623 Move W8, [X31+616]
	5624 Move X9, [X31+32]
	5625 Move [X9+1700], W8
	5626 Move X8, 0x653000
	5627 Move X8, [X8+1000]
	5628 Add W19, W19, 1
	5629 Move X0, [X8]
	5630 Call 0x1C17F28
	5631 Move X8, [X31+32]
	5632 Move W8, [X8+1700]
	5633 Add W31, W8, 1
	5634 Move X8, [X31+32]
	5635 Move X20, [X8+1688]
	5636 Compare X20, 0
	5637 JumpIfEqual {5656}
	5638 Move W8, [X0+224]
	5639 Move X21, [X20+32]
	5640 Compare W8, 0
	5641 JumpIfNotEqual {5646}
	5642 Call 0x1C17DFC
	5643 Move X8, 0x653000
	5644 Move X8, [X8+1000]
	5645 Move X0, [X8]
	5646 Move X2, [X0+184]
	5647 Move X0, X21
	5648 Move X1, X20
	5649 Move X4, X31
	5650 Move X3, [X2+8]
	5651 Call MaterialReference.AddMaterialReference, X0, X1, X2, X3
	5652 Move X8, [X31+32]
	5653 Move W20, 1
	5654 Move [X8+288], W0
	5655 Move [X8+1604], W20
	5656 Call 0x1C17F20
	5657 Move W9, 0x3C4E
	5658 NotImplemented "Instruction MOVK not yet implemented."
	5659 NotImplemented "Instruction CMP not yet implemented."
	5660 Move W9, 0xE9D3
	5661 NotImplemented "Instruction MOVK not yet implemented."
	5662 NotImplemented "Instruction CMP not yet implemented."
	5663 Move W9, 0x863E
	5664 NotImplemented "Instruction MOVK not yet implemented."
	5665 NotImplemented "Instruction CMP not yet implemented."
	5666 Move W9, 0x29C9
	5667 NotImplemented "Instruction MOVK not yet implemented."
	5668 NotImplemented "Instruction CMP not yet implemented."
	5669 Move X9, [X31+32]
	5670 Move W8, 0x8080
	5671 NotImplemented "Instruction MOVK not yet implemented."
	5672 Move W1, 0x8080
	5673 Move [X9+1260], W8
	5674 Move X8, 0x654000
	5675 Move X8, [X8+616]
	5676 Add X0, X9, 1264
	5677 NotImplemented "Instruction MOVK not yet implemented."
	5678 Move W9, 0x36F0
	5679 NotImplemented "Instruction MOVK not yet implemented."
	5680 NotImplemented "Instruction CMP not yet implemented."
	5681 Move W9, 0x1A47
	5682 NotImplemented "Instruction MOVK not yet implemented."
	5683 NotImplemented "Instruction CMP not yet implemented."
	5684 Move S0, W31
	5685 Move W9, 0x2EE0
	5686 NotImplemented "Instruction MOVK not yet implemented."
	5687 NotImplemented "Instruction CMP not yet implemented."
	5688 Move W9, 0x3C4E
	5689 NotImplemented "Instruction MOVK not yet implemented."
	5690 NotImplemented "Instruction CMP not yet implemented."
	5691 Move X9, [X31+32]
	5692 Move W8, 0x20A0
	5693 NotImplemented "Instruction MOVK not yet implemented."
	5694 Move W1, 0x20A0
	5695 Move [X9+1260], W8
	5696 Move X8, 0x654000
	5697 Move X8, [X8+616]
	5698 Add X0, X9, 1264
	5699 NotImplemented "Instruction MOVK not yet implemented."
	5700 Move W20, W31
	5701 Move W0, W20
	5702 Add X31, X31, 800
	5703 Move X20, [X31+144]
	5704 Move X19, [X31+152]
	5705 Move X22, [X31+128]
	5706 Move X21, [X31+136]
	5707 Move X24, [X31+112]
	5708 Move X23, [X31+120]
	5709 Move X26, [X31+96]
	5710 Move X25, [X31+104]
	5711 Move X28, [X31+80]
	5712 Move X27, [X31+88]
	5713 Move X29, [X31+64]
	5714 Move X30, [X31+72]
	5715 Move D9, [X31+48]
	5716 Move D8, [X31+56]
	5717 Move D11, [X31+32]
	5718 Move D10, [X31+40]
	5719 Move D13, [X31+16]
	5720 Move D12, [X31+24]
	5721 Move D15, [X31+160]
	5722 Move D14, [X31+168]
	5723 Return X0
	5724 Move X9, [X31+32]
	5725 Move W8, 0x80FF
	5726 NotImplemented "Instruction MOVK not yet implemented."
	5727 Move W1, 0x80FF
	5728 Move [X9+1260], W8
	5729 Move X8, 0x654000
	5730 Move X8, [X8+616]
	5731 Add X0, X9, 1264
	5732 NotImplemented "Instruction MOVK not yet implemented."
	5733 Move X9, [X31+32]
	5734 Move W8, 0xD8AD
	5735 NotImplemented "Instruction MOVK not yet implemented."
	5736 Move W1, 0xD8AD
	5737 Move [X9+1260], W8
	5738 Move X8, 0x654000
	5739 Move X8, [X8+616]
	5740 Add X0, X9, 1264
	5741 NotImplemented "Instruction MOVK not yet implemented."
	5742 Move X2, [X8]
	5743 Move S0, W31
	5744 Move S1, 1
	5745 Move S0, 1
	5746 Move S1, 1
	5747 Move S0, 1
	5748 Move S1, W31
	5749 Move S2, W31
	5750 Move S0, W31
	5751 Move S1, W31
	5752 Move S2, 1
	5753 Move S3, 1
	5754 Move X0, X31
	5755 Call 0x1E44664

Method: System.Void .ctor()

Disassembly:
	0x03B0D400 CMP W9, W8
	0x03B0D404 B.EQ 0x3B0D428
	0x03B0D408 MOV X0, X20
	0x03B0D40C MOV X1, X31
	0x03B0D410 STRB W8, [X20 + 0x274]
	0x03B0D414 BL 0x3AEE44C
	0x03B0D418 TBNZ X0, 0x0, 0x3B0D428
	0x03B0D41C MOV X0, X20
	0x03B0D420 MOV X1, X31
	0x03B0D424 BL 0x3AED1E0
	0x03B0D428 MOVZ W8, 0x2
	0x03B0D42C STR X31, [X19 + 0x18]
	0x03B0D430 STR W8, [X19 + 0x10]
	0x03B0D434 MOVZ W0, 0x1
	0x03B0D438 B 0x3B0D470
	0x03B0D43C CBNZ W8, 0x3B0D46C
	0x03B0D440 MOVN W8, 0x0
	0x03B0D444 STR W8, [X19 + 0x10]
	0x03B0D448 CBZ X20, 0x3B0D480
	0x03B0D44C MOVZ W0, 0x1
	0x03B0D450 STRB W0, [X20 + 0x274]
	0x03B0D454 STR X31, [X19 + 0x18]
	0x03B0D458 STR W0, [X19 + 0x10]
	0x03B0D45C B 0x3B0D470
	0x03B0D460 MOV W0, W31
	0x03B0D464 STR X31, [X20 + 0x278]
	0x03B0D468 B 0x3B0D470
	0x03B0D46C MOV W0, W31
	0x03B0D470 LDP X20, X19, [X31 + 0x10]
	0x03B0D474 LDR X30, [X31 + 0x8]
	0x03B0D478 LDR V8, [X31], #0x20
	0x03B0D47C RET
	0x03B0D480 BL 0x1C16F20
	0x03B0D484 LDR X0, [X0 + 0x18]
	0x03B0D488 RET
	0x03B0D48C STP X30, X19, [X31 - 0x10]!
	0x03B0D490 ADRP X0, 0x5E6000
	0x03B0D494 LDR X0, [X0 + 0xB40]
	0x03B0D498 BL 0x1C16D08
	0x03B0D49C BL 0x1C16F10
	0x03B0D4A0 MOV X1, X31
	0x03B0D4A4 MOV X19, X0
	0x03B0D4A8 BL 0x3380310
	0x03B0D4AC ADRP X0, 0x64C000
	0x03B0D4B0 LDR X0, [X0 + 0x3E0]
	0x03B0D4B4 BL 0x1C16D08
	0x03B0D4B8 MOV X1, X0
	0x03B0D4BC MOV X0, X19
	0x03B0D4C0 BL 0x1C16DEC
	0x03B0D4C4 LDR X0, [X0 + 0x18]
	0x03B0D4C8 RET
	0x03B0D4CC STR X30, [X31 - 0x20]!
	0x03B0D4D0 STP X20, X19, [X31 + 0x10]
	0x03B0D4D4 MOV W19, W1
	0x03B0D4D8 MOV X1, X31
	0x03B0D4DC MOV X20, X0
	0x03B0D4E0 BL 0x33BDD8C
	0x03B0D4E4 STR W19, [X20 + 0x10]
	0x03B0D4E8 LDP X20, X19, [X31 + 0x10]
	0x03B0D4EC LDR X30, [X31], #0x20
	0x03B0D4F0 RET
	0x03B0D4F4 RET
	0x03B0D4F8 STP D11, D10, [X31 - 0x50]!
	0x03B0D4FC STP D9, D8, [X31 + 0x10]
	0x03B0D500 STR X30, [X31 + 0x20]
	0x03B0D504 STP X22, X21, [X31 + 0x30]
	0x03B0D508 STP X20, X19, [X31 + 0x40]
	0x03B0D50C ADRP X20, 0x8D5000
	0x03B0D510 LDRB W8, [X20 + 0x673]
	0x03B0D514 MOV X19, X0
	0x03B0D518 TBNZ X8, 0x0, 0x3B0D53C
	0x03B0D51C ADRP X0, 0x63C000
	0x03B0D520 LDR X0, [X0 + 0x6B8]
	0x03B0D524 BL 0x1C16CF4
	0x03B0D528 ADRP X0, 0x5EF000
	0x03B0D52C LDR X0, [X0 + 0x9A0]
	0x03B0D530 BL 0x1C16CF4
	0x03B0D534 MOVZ W8, 0x1
	0x03B0D538 STRB W8, [X20 + 0x673]
	0x03B0D53C STR X31, [X31 + 0x28]
	0x03B0D540 LDR W8, [X19 + 0x10]
	0x03B0D544 CMP W8, 0x2
	0x03B0D548 B.CS 0x3B0D61C
	0x03B0D54C LDR X20, [X19 + 0x20]
	0x03B0D550 MOVN W8, 0x0
	0x03B0D554 STR W8, [X19 + 0x10]
	0x03B0D558 CBZ X20, 0x3B0D71C
	0x03B0D55C LDRB W8, [X20 + 0x272]
	0x03B0D560 CBZ W8, 0x3B0D624
	0x03B0D564 LDRB W8, [X20 + 0x273]
	0x03B0D568 CBZ W8, 0x3B0D624
	0x03B0D56C LDR X0, [X19 + 0x28]
	0x03B0D570 CBZ X0, 0x3B0D71C
	0x03B0D574 LDR X21, [X20 + 0x110]
	0x03B0D578 LDR V8, [X0 + 0x104]
	0x03B0D57C LDR V9, [X0 + 0x108]
	0x03B0D580 MOV X1, X31
	0x03B0D584 BL 0x3E4F314
	0x03B0D588 ADRP X8, 0x63C000
	0x03B0D58C LDR X8, [X8 + 0x6B8]
	0x03B0D590 MOV X22, X0
	0x03B0D594 LDR X8, [X8]
	0x03B0D598 LDR W9, [X8 + 0xE0]
	0x03B0D59C CBNZ W9, 0x3B0D5A8
	0x03B0D5A0 MOV X0, X8
	0x03B0D5A4 BL 0x1C16DFC
	0x03B0D5A8 ADD X2, X31, 0x28
	0x03B0D5AC MOV X0, X21
	0x03B0D5B0 MOV V0.16B, V8.16B
	0x03B0D5B4 MOV V1.16B, V9.16B
	0x03B0D5B8 MOV X1, X22
	0x03B0D5BC MOV X3, X31
	0x03B0D5C0 BL 0x3E23A98
	0x03B0D5C4 LDR X0, [X20 + 0x110]
	0x03B0D5C8 CBZ X0, 0x3B0D71C
	0x03B0D5CC MOV X1, X31
	0x03B0D5D0 BL 0x3C3E51C
	0x03B0D5D4 MOV X0, X20
	0x03B0D5D8 MOV X1, X31
	0x03B0D5DC MOV V8.16B, V0.16B
	0x03B0D5E0 MOV V9.16B, V1.16B
	0x03B0D5E4 MOV V10.16B, V2.16B
	0x03B0D5E8 MOV V11.16B, V3.16B
	0x03B0D5EC BL 0x3AEE248
	0x03B0D5F0 TBZ X0, 0x0, 0x3B0D630
	0x03B0D5F4 LDR V0, [X31 + 0x2C]
	0x03B0D5F8 FADD S1, S11, S9
	0x03B0D5FC FCMP S0, S1
	0x03B0D600 B.LE 0x3B0D654
	0x03B0D604 MOVZ W1, 0x1
	0x03B0D608 MOVZ W2, 0x1
	0x03B0D60C MOV X0, X20
	0x03B0D610 MOV X3, X31
	0x03B0D614 BL 0x3AF4680
	0x03B0D618 B 0x3B0D694
	0x03B0D61C MOV W0, W31
	0x03B0D620 B 0x3B0D704
	0x03B0D624 MOV W0, W31
	0x03B0D628 STR X31, [X20 + 0x288]
	0x03B0D62C B 0x3B0D704
	0x03B0D630 LDR V0, [X31 + 0x28]
	0x03B0D634 FCMP S0, S8
	0x03B0D638 B.PL 0x3B0D674
	0x03B0D63C MOVZ W1, 0x1
	0x03B0D640 MOV X0, X20
	0x03B0D644 MOV W2, W31
	0x03B0D648 MOV X3, X31
	0x03B0D64C BL 0x3AF2E98
	0x03B0D650 B 0x3B0D694
	0x03B0D654 FCMP S0, S9
	0x03B0D658 B.PL 0x3B0D694
	0x03B0D65C MOVZ W1, 0x1
	0x03B0D660 MOVZ W2, 0x1
	0x03B0D664 MOV X0, X20
	0x03B0D668 MOV X3, X31
	0x03B0D66C BL 0x3AF44BC
	0x03B0D670 B 0x3B0D694
	0x03B0D674 FADD S1, S10, S8
	0x03B0D678 FCMP S0, S1
	0x03B0D67C B.LE 0x3B0D694
	0x03B0D680 MOVZ W1, 0x1
	0x03B0D684 MOV X0, X20
	0x03B0D688 MOV W2, W31
	0x03B0D68C MOV X3, X31
	0x03B0D690 BL 0x3AF3248
	0x03B0D694 MOV X0, X20
	0x03B0D698 MOV X1, X31
	0x03B0D69C BL 0x3AECBA4
	0x03B0D6A0 MOV X0, X20
	0x03B0D6A4 MOV X1, X31
	0x03B0D6A8 BL 0x3AEE248
	0x03B0D6AC ADRP X8, 0xFFFFFFFFFCFDD000
	0x03B0D6B0 ADRP X9, 0xFFFFFFFFFCFDD000
	0x03B0D6B4 LDR V0, [X8 + 0x200]
	0x03B0D6B8 LDR V1, [X9 + 0xBC]
	0x03B0D6BC LDR X21, [X20 + 0x2A0]
	0x03B0D6C0 ANDS W31, W0, 0x1
	0x03B0D6C4 FCSEL S8, S1, S0, NE
	0x03B0D6C8 CBZ X21, 0x3B0D6D4
	0x03B0D6CC STR S8, [X21 + 0x10]
	0x03B0D6D0 B 0x3B0D6F8
	0x03B0D6D4 ADRP X8, 0x5EF000
	0x03B0D6D8 LDR X8, [X8 + 0x9A0]
	0x03B0D6DC LDR X0, [X8]
	0x03B0D6E0 BL 0x1C16F10
	0x03B0D6E4 MOV V0.16B, V8.16B
	0x03B0D6E8 MOV X1, X31
	0x03B0D6EC MOV X21, X0
	0x03B0D6F0 BL 0x3C3A730
	0x03B0D6F4 STR X21, [X20 + 0x2A0]
	0x03B0D6F8 MOVZ W0, 0x1
	0x03B0D6FC STR X21, [X19 + 0x18]
	0x03B0D700 STR W0, [X19 + 0x10]
	0x03B0D704 LDP X20, X19, [X31 + 0x40]
	0x03B0D708 LDP X22, X21, [X31 + 0x30]
	0x03B0D70C LDR X30, [X31 + 0x20]
	0x03B0D710 LDP D9, D8, [X31 + 0x10]
	0x03B0D714 LDP D11, D10, [X31], #0x50
	0x03B0D718 RET
	0x03B0D71C BL 0x1C16F20
	0x03B0D720 LDR X0, [X0 + 0x18]
	0x03B0D724 RET
	0x03B0D728 STP X30, X19, [X31 - 0x10]!
	0x03B0D72C ADRP X0, 0x5E6000
	0x03B0D730 LDR X0, [X0 + 0xB40]
	0x03B0D734 BL 0x1C16D08
	0x03B0D738 BL 0x1C16F10
	0x03B0D73C MOV X1, X31
	0x03B0D740 MOV X19, X0
	0x03B0D744 BL 0x3380310
	0x03B0D748 ADRP X0, 0x64C000
	0x03B0D74C LDR X0, [X0 + 0x3E8]
	0x03B0D750 BL 0x1C16D08
	0x03B0D754 MOV X1, X0
	0x03B0D758 MOV X0, X19
	0x03B0D75C BL 0x1C16DEC
	0x03B0D760 LDR X0, [X0 + 0x18]
	0x03B0D764 RET
	0x03B0D768 LDR V4, [X0]
	0x03B0D76C FCMP S4, S0
	0x03B0D770 B.NE 0x3B0D7A0
	0x03B0D774 LDR V4, [X0 + 0x4]
	0x03B0D778 FCMP S4, S1
	0x03B0D77C B.NE 0x3B0D7A0
	0x03B0D780 LDR V4, [X0 + 0x8]
	0x03B0D784 FCMP S4, S2
	0x03B0D788 B.NE 0x3B0D7A0
	0x03B0D78C LDR V4, [X0 + 0xC]
	0x03B0D790 FCMP S4, S3
	0x03B0D794 B.NE 0x3B0D7A0
	0x03B0D798 MOV W0, W31
	0x03B0D79C RET
	0x03B0D7A0 STP S0, S1, [X0]
	0x03B0D7A4 STP S2, S3, [X0 + 0x8]
	0x03B0D7A8 MOVZ W0, 0x1
	0x03B0D7AC RET
	0x03B0D7B0 MOV X1, X31
	0x03B0D7B4 B 0x3C36D2C
	0x03B0D7B8 STP X29, X30, [X31 - 0x60]!
	0x03B0D7BC STP X28, X27, [X31 + 0x10]
	0x03B0D7C0 STP X26, X25, [X31 + 0x20]
	0x03B0D7C4 STP X24, X23, [X31 + 0x30]
	0x03B0D7C8 STP X22, X21, [X31 + 0x40]
	0x03B0D7CC STP X20, X19, [X31 + 0x50]
	0x03B0D7D0 ADRP X29, 0x8D5000
	0x03B0D7D4 ADRP X20, 0x64C000
	0x03B0D7D8 ADRP X19, 0x64C000
	0x03B0D7DC ADRP X21, 0x64B000
	0x03B0D7E0 ADRP X28, 0x64C000
	0x03B0D7E4 ADRP X27, 0x64C000
	0x03B0D7E8 ADRP X26, 0x64C000
	0x03B0D7EC ADRP X25, 0x64C000
	0x03B0D7F0 ADRP X24, 0x64C000
	0x03B0D7F4 ADRP X23, 0x64C000
	0x03B0D7F8 ADRP X22, 0x64C000
	0x03B0D7FC LDR X20, [X20 + 0x3F0]
	0x03B0D800 LDR X19, [X19 + 0x3F8]
	0x03B0D804 LDR X21, [X21 + 0x620]
	0x03B0D808 LDR X28, [X28 + 0x400]
	0x03B0D80C LDR X27, [X27 + 0x408]
	0x03B0D810 LDR X26, [X26 + 0x410]
	0x03B0D814 LDRB W8, [X29 + 0x674]
	0x03B0D818 LDR X25, [X25 + 0x418]
	0x03B0D81C LDR X24, [X24 + 0x420]
	0x03B0D820 LDR X23, [X23 + 0x428]
	0x03B0D824 LDR X22, [X22 + 0x430]
	0x03B0D828 TBNZ X8, 0x0, 0x3B0D8B8
	0x03B0D82C ADRP X0, 0x64C000
	0x03B0D830 LDR X0, [X0 + 0x418]
	0x03B0D834 BL 0x1C16CF4
	0x03B0D838 ADRP X0, 0x64C000
	0x03B0D83C LDR X0, [X0 + 0x408]
	0x03B0D840 BL 0x1C16CF4
	0x03B0D844 ADRP X0, 0x64C000
	0x03B0D848 LDR X0, [X0 + 0x410]
	0x03B0D84C BL 0x1C16CF4
	0x03B0D850 ADRP X0, 0x64C000
	0x03B0D854 LDR X0, [X0 + 0x400]
	0x03B0D858 BL 0x1C16CF4
	0x03B0D85C ADRP X0, 0x64C000
	0x03B0D860 LDR X0, [X0 + 0x3F8]
	0x03B0D864 BL 0x1C16CF4
	0x03B0D868 ADRP X0, 0x64C000
	0x03B0D86C LDR X0, [X0 + 0x428]
	0x03B0D870 BL 0x1C16CF4
	0x03B0D874 ADRP X0, 0x64C000
	0x03B0D878 LDR X0, [X0 + 0x3F0]
	0x03B0D87C BL 0x1C16CF4
	0x03B0D880 ADRP X0, 0x64C000
	0x03B0D884 LDR X0, [X0 + 0x420]
	0x03B0D888 BL 0x1C16CF4
	0x03B0D88C ADRP X0, 0x64C000
	0x03B0D890 LDR X0, [X0 + 0x438]
	0x03B0D894 BL 0x1C16CF4
	0x03B0D898 ADRP X0, 0x64B000
	0x03B0D89C LDR X0, [X0 + 0x620]
	0x03B0D8A0 BL 0x1C16CF4
	0x03B0D8A4 ADRP X0, 0x64C000
	0x03B0D8A8 LDR X0, [X0 + 0x430]
	0x03B0D8AC BL 0x1C16CF4
	0x03B0D8B0 MOVZ W8, 0x1
	0x03B0D8B4 STRB W8, [X29 + 0x674]
	0x03B0D8B8 LDR X0, [X20]
	0x03B0D8BC BL 0x1C16F10
	0x03B0D8C0 LDR X1, [X19]
	0x03B0D8C4 MOV X19, X0
	0x03B0D8C8 BL 0x301B7C4
	0x03B0D8CC LDR X8, [X21]
	0x03B0D8D0 LDR X8, [X8 + 0xB8]
	0x03B0D8D4 STR X19, [X8]
	0x03B0D8D8 LDR X0, [X28]
	0x03B0D8DC BL 0x1C16F10
	0x03B0D8E0 LDR X1, [X27]
	0x03B0D8E4 MOV X19, X0
	0x03B0D8E8 BL 0x2A4DA7C
	0x03B0D8EC LDR X8, [X21]
	0x03B0D8F0 LDR X8, [X8 + 0xB8]
	0x03B0D8F4 STR X19, [X8 + 0x8]
	0x03B0D8F8 LDR X0, [X26]
	0x03B0D8FC BL 0x1C16F10
	0x03B0D900 LDR X1, [X25]
	0x03B0D904 MOV X19, X0
	0x03B0D908 BL 0x2A0C9E4
	0x03B0D90C LDR X8, [X21]
	0x03B0D910 LDR X8, [X8 + 0xB8]
	0x03B0D914 STR X19, [X8 + 0x10]
	0x03B0D918 LDR X0, [X24]
	0x03B0D91C BL 0x1C16F10
	0x03B0D920 LDR X1, [X23]
	0x03B0D924 MOV X19, X0
	0x03B0D928 BL 0x301B7C4
	0x03B0D92C LDR X8, [X21]
	0x03B0D930 LDR X8, [X8 + 0xB8]
	0x03B0D934 STR X19, [X8 + 0x18]
	0x03B0D938 LDR X0, [X22]
	0x03B0D93C BL 0x1C16F10
	0x03B0D940 ADRP X8, 0x64C000
	0x03B0D944 LDR X8, [X8 + 0x438]
	0x03B0D948 MOV X1, X31
	0x03B0D94C MOV X3, X31
	0x03B0D950 MOV X19, X0
	0x03B0D954 LDR X2, [X8]
	0x03B0D958 BL 0x3E251A8
	0x03B0D95C MOV X0, X19
	0x03B0D960 LDP X20, X19, [X31 + 0x50]
	0x03B0D964 LDP X22, X21, [X31 + 0x40]
	0x03B0D968 LDP X24, X23, [X31 + 0x30]
	0x03B0D96C LDP X26, X25, [X31 + 0x20]
	0x03B0D970 LDP X28, X27, [X31 + 0x10]
	0x03B0D974 MOV X1, X31
	0x03B0D978 LDP X29, X30, [X31], #0x60
	0x03B0D97C B 0x3E24344
	0x03B0D980 STR X30, [X31 - 0x20]!
	0x03B0D984 STP X20, X19, [X31 + 0x10]
	0x03B0D988 ADRP X20, 0x8D5000
	0x03B0D98C ADRP X19, 0x64B000
	0x03B0D990 LDRB W8, [X20 + 0x675]
	0x03B0D994 LDR X19, [X19 + 0x620]
	0x03B0D998 TBNZ X8, 0x0, 0x3B0D9B0
	0x03B0D99C ADRP X0, 0x64B000
	0x03B0D9A0 LDR X0, [X0 + 0x620]
	0x03B0D9A4 BL 0x1C16CF4
	0x03B0D9A8 MOVZ W8, 0x1
	0x03B0D9AC STRB W8, [X20 + 0x675]
	0x03B0D9B0 LDR X0, [X19]
	0x03B0D9B4 LDR W8, [X0 + 0xE0]
	0x03B0D9B8 CBNZ W8, 0x3B0D9C4
	0x03B0D9BC BL 0x1C16DFC
	0x03B0D9C0 LDR X0, [X19]
	0x03B0D9C4 LDR X8, [X0 + 0xB8]
	0x03B0D9C8 LDRB W8, [X8 + 0x20]
	0x03B0D9CC CBZ W8, 0x3B0D9EC
	0x03B0D9D0 LDR W8, [X0 + 0xE0]
	0x03B0D9D4 CBNZ W8, 0x3B0D9DC
	0x03B0D9D8 BL 0x1C16DFC
	0x03B0D9DC BL 0x3B0D9F8
	0x03B0D9E0 LDR X8, [X19]
	0x03B0D9E4 LDR X8, [X8 + 0xB8]
	0x03B0D9E8 STRB W31, [X8 + 0x20]
	0x03B0D9EC LDP X20, X19, [X31 + 0x10]
	0x03B0D9F0 LDR X30, [X31], #0x20
	0x03B0D9F4 RET
	0x03B0D9F8 STR X30, [X31 - 0x50]!
	0x03B0D9FC STP X26, X25, [X31 + 0x10]
	0x03B0DA00 STP X24, X23, [X31 + 0x20]
	0x03B0DA04 STP X22, X21, [X31 + 0x30]
	0x03B0DA08 STP X20, X19, [X31 + 0x40]
	0x03B0DA0C ADRP X19, 0x8D5000
	0x03B0DA10 ADRP X22, 0x64B000
	0x03B0DA14 LDRB W8, [X19 + 0x685]
	0x03B0DA18 LDR X22, [X22 + 0x620]
	0x03B0DA1C TBNZ X8, 0x0, 0x3B0DA7C
	0x03B0DA20 ADRP X0, 0x64C000
	0x03B0DA24 LDR X0, [X0 + 0x440]
	0x03B0DA28 BL 0x1C16CF4
	0x03B0DA2C ADRP X0, 0x64C000
	0x03B0DA30 LDR X0, [X0 + 0x448]
	0x03B0DA34 BL 0x1C16CF4
	0x03B0DA38 ADRP X0, 0x64C000
	0x03B0DA3C LDR X0, [X0 + 0x450]
	0x03B0DA40 BL 0x1C16CF4
	0x03B0DA44 ADRP X0, 0x64C000
	0x03B0DA48 LDR X0, [X0 + 0x458]
	0x03B0DA4C BL 0x1C16CF4
	0x03B0DA50 ADRP X0, 0x64C000
	0x03B0DA54 LDR X0, [X0 + 0x460]
	0x03B0DA58 BL 0x1C16CF4
	0x03B0DA5C ADRP X0, 0x5E6000
	0x03B0DA60 LDR X0, [X0 + 0x598]
	0x03B0DA64 BL 0x1C16CF4
	0x03B0DA68 ADRP X0, 0x64B000
	0x03B0DA6C LDR X0, [X0 + 0x620]
	0x03B0DA70 BL 0x1C16CF4
	0x03B0DA74 MOVZ W8, 0x1
	0x03B0DA78 STRB W8, [X19 + 0x685]
	0x03B0DA7C LDR X0, [X22]
	0x03B0DA80 LDR W8, [X0 + 0xE0]
	0x03B0DA84 CBNZ W8, 0x3B0DA90
	0x03B0DA88 BL 0x1C16DFC
	0x03B0DA8C LDR X0, [X22]
	0x03B0DA90 LDR X8, [X0 + 0xB8]
	0x03B0DA94 LDR X8, [X8 + 0x18]
	0x03B0DA98 CBZ X8, 0x3B0DC08
	0x03B0DA9C LDR W8, [X8 + 0x18]
	0x03B0DAA0 CBZ W8, 0x3B0DBF0
	0x03B0DAA4 ADRP X23, 0x64C000
	0x03B0DAA8 ADRP X24, 0x64C000
	0x03B0DAAC ADRP X25, 0x64C000
	0x03B0DAB0 ADRP X26, 0x5E6000
	0x03B0DAB4 LDR X23, [X23 + 0x460]
	0x03B0DAB8 LDR X24, [X24 + 0x440]
	0x03B0DABC LDR X25, [X25 + 0x448]
	0x03B0DAC0 LDR X26, [X26 + 0x598]
	0x03B0DAC4 MOV W19, W31
	0x03B0DAC8 LDR W8, [X0 + 0xE0]
	0x03B0DACC CBNZ W8, 0x3B0DAD8
	0x03B0DAD0 BL 0x1C16DFC
	0x03B0DAD4 LDR X0, [X22]
	0x03B0DAD8 LDR X8, [X0 + 0xB8]
	0x03B0DADC LDR X8, [X8 + 0x18]
	0x03B0DAE0 CBZ X8, 0x3B0DC08
	0x03B0DAE4 LDR W9, [X0 + 0xE0]
	0x03B0DAE8 LDR W20, [X8 + 0x18]
	0x03B0DAEC CBNZ W9, 0x3B0DB04
	0x03B0DAF0 BL 0x1C16DFC
	0x03B0DAF4 LDR X8, [X22]
	0x03B0DAF8 LDR X8, [X8 + 0xB8]
	0x03B0DAFC LDR X8, [X8 + 0x18]
	0x03B0DB00 CBZ X8, 0x3B0DC08
	0x03B0DB04 CMP W19, W20
	0x03B0DB08 B.GE 0x3B0DBB8
	0x03B0DB0C LDR X2, [X23]
	0x03B0DB10 MOV X0, X8
	0x03B0DB14 MOV W1, W19
	0x03B0DB18 BL 0x301BCCC
	0x03B0DB1C CBZ X0, 0x3B0DC08
	0x03B0DB20 LDR W8, [X0 + 0x30]
	0x03B0DB24 MOV X21, X0
	0x03B0DB28 CMP W8, 0x0
	0x03B0DB2C B.GT 0x3B0DBAC
	0x03B0DB30 LDR X0, [X22]
	0x03B0DB34 LDR X20, [X21 + 0x28]
	0x03B0DB38 LDR W8, [X0 + 0xE0]
	0x03B0DB3C CBNZ W8, 0x3B0DB48
	0x03B0DB40 BL 0x1C16DFC
	0x03B0DB44 LDR X0, [X22]
	0x03B0DB48 LDR X8, [X0 + 0xB8]
	0x03B0DB4C LDR X0, [X8 + 0x8]
	0x03B0DB50 CBZ X0, 0x3B0DC08
	0x03B0DB54 LDR X1, [X21 + 0x10]
	0x03B0DB58 LDR X2, [X24]
	0x03B0DB5C BL 0x2A4F714
	0x03B0DB60 CBZ X20, 0x3B0DC08
	0x03B0DB64 LDR X8, [X22]
	0x03B0DB68 MOV X0, X20
	0x03B0DB6C MOV X1, X31
	0x03B0DB70 LDR X8, [X8 + 0xB8]
	0x03B0DB74 LDR X21, [X8 + 0x10]
	0x03B0DB78 BL 0x3C385F8
	0x03B0DB7C CBZ X21, 0x3B0DC08
	0x03B0DB80 LDR X2, [X25]
	0x03B0DB84 MOV W1, W0
	0x03B0DB88 MOV X0, X21
	0x03B0DB8C BL 0x2A0E654
	0x03B0DB90 LDR X0, [X26]
	0x03B0DB94 LDR W8, [X0 + 0xE0]
	0x03B0DB98 CBNZ W8, 0x3B0DBA0
	0x03B0DB9C BL 0x1C16DFC
	0x03B0DBA0 MOV X0, X20
	0x03B0DBA4 MOV X1, X31
	0x03B0DBA8 BL 0x3C39564
	0x03B0DBAC LDR X0, [X22]
	0x03B0DBB0 ADD W19, W19, 0x1
	0x03B0DBB4 B 0x3B0DAC8
	0x03B0DBB8 LDP W2, W9, [X8 + 0x18]
	0x03B0DBBC ADD W9, W9, 0x1
	0x03B0DBC0 CMP W2, 0x1
	0x03B0DBC4 STP W31, W9, [X8 + 0x18]
	0x03B0DBC8 B.LT 0x3B0DBF0
	0x03B0DBCC LDR X0, [X8 + 0x10]
	0x03B0DBD0 LDP X20, X19, [X31 + 0x40]
	0x03B0DBD4 LDP X22, X21, [X31 + 0x30]
	0x03B0DBD8 LDP X24, X23, [X31 + 0x20]
	0x03B0DBDC LDP X26, X25, [X31 + 0x10]
	0x03B0DBE0 MOV W1, W31
	0x03B0DBE4 MOV X3, X31
	0x03B0DBE8 LDR X30, [X31], #0x50
	0x03B0DBEC B 0x339FA34
	0x03B0DBF0 LDP X20, X19, [X31 + 0x40]
	0x03B0DBF4 LDP X22, X21, [X31 + 0x30]
	0x03B0DBF8 LDP X24, X23, [X31 + 0x20]
	0x03B0DBFC LDP X26, X25, [X31 + 0x10]
	0x03B0DC00 LDR X30, [X31], #0x50
	0x03B0DC04 RET
	0x03B0DC08 BL 0x1C16F20
	0x03B0DC0C STP X30, X25, [X31 - 0x40]!
	0x03B0DC10 STP X24, X23, [X31 + 0x10]
	0x03B0DC14 STP X22, X21, [X31 + 0x20]
	0x03B0DC18 STP X20, X19, [X31 + 0x30]
	0x03B0DC1C ADRP X21, 0x8D5000
	0x03B0DC20 ADRP X23, 0x64B000
	0x03B0DC24 LDRB W8, [X21 + 0x676]
	0x03B0DC28 LDR X23, [X23 + 0x338]
	0x03B0DC2C MOV W20, W1
	0x03B0DC30 MOV X19, X0
	0x03B0DC34 TBNZ X8, 0x0, 0x3B0DCAC
	0x03B0DC38 ADRP X0, 0x5E6000
	0x03B0DC3C LDR X0, [X0 + 0xA28]
	0x03B0DC40 BL 0x1C16CF4
	0x03B0DC44 ADRP X0, 0x64C000
	0x03B0DC48 LDR X0, [X0 + 0x468]
	0x03B0DC4C BL 0x1C16CF4
	0x03B0DC50 ADRP X0, 0x64C000
	0x03B0DC54 LDR X0, [X0 + 0x470]
	0x03B0DC58 BL 0x1C16CF4
	0x03B0DC5C ADRP X0, 0x64C000
	0x03B0DC60 LDR X0, [X0 + 0x478]
	0x03B0DC64 BL 0x1C16CF4
	0x03B0DC68 ADRP X0, 0x64C000
	0x03B0DC6C LDR X0, [X0 + 0x480]
	0x03B0DC70 BL 0x1C16CF4
	0x03B0DC74 ADRP X0, 0x5EA000
	0x03B0DC78 LDR X0, [X0 + 0xCA0]
	0x03B0DC7C BL 0x1C16CF4
	0x03B0DC80 ADRP X0, 0x64B000
	0x03B0DC84 LDR X0, [X0 + 0x338]
	0x03B0DC88 BL 0x1C16CF4
	0x03B0DC8C ADRP X0, 0x64B000
	0x03B0DC90 LDR X0, [X0 + 0x620]
	0x03B0DC94 BL 0x1C16CF4
	0x03B0DC98 ADRP X0, 0x64C000
	0x03B0DC9C LDR X0, [X0 + 0x488]
	0x03B0DCA0 BL 0x1C16CF4
	0x03B0DCA4 MOVZ W8, 0x1
	0x03B0DCA8 STRB W8, [X21 + 0x676]
	0x03B0DCAC LDR X0, [X23]
	0x03B0DCB0 LDR W8, [X0 + 0xE0]
	0x03B0DCB4 CBNZ W8, 0x3B0DCBC
	0x03B0DCB8 BL 0x1C16DFC
	0x03B0DCBC CBZ X19, 0x3B0DFA8
	0x03B0DCC0 LDR X8, [X23]
	0x03B0DCC4 MOV X0, X19
	0x03B0DCC8 MOV X2, X31
	0x03B0DCCC LDR X8, [X8 + 0xB8]
	0x03B0DCD0 LDR W1, [X8 + 0xB4]
	0x03B0DCD4 BL 0x3C14D08
	0x03B0DCD8 TBZ X0, 0x0, 0x3B0DDB8
	0x03B0DCDC MOV X0, X19
	0x03B0DCE0 MOV X1, X31
	0x03B0DCE4 BL 0x3C385F8
	0x03B0DCE8 ADRP X24, 0x64B000
	0x03B0DCEC ADRP X25, 0x64C000
	0x03B0DCF0 LDR X24, [X24 + 0x620]
	0x03B0DCF4 LDR X25, [X25 + 0x478]
	0x03B0DCF8 MOV W22, W0
	0x03B0DCFC MOV W21, W31
	0x03B0DD00 LDR X0, [X24]
	0x03B0DD04 LDR W8, [X0 + 0xE0]
	0x03B0DD08 CBNZ W8, 0x3B0DD14
	0x03B0DD0C BL 0x1C16DFC
	0x03B0DD10 LDR X0, [X24]
	0x03B0DD14 LDR X8, [X0 + 0xB8]
	0x03B0DD18 LDR X8, [X8]
	0x03B0DD1C CBZ X8, 0x3B0DFA8
	0x03B0DD20 LDR W9, [X8 + 0x18]
	0x03B0DD24 CMP W21, W9
	0x03B0DD28 B.GE 0x3B0DDE8
	0x03B0DD2C LDR W9, [X0 + 0xE0]
	0x03B0DD30 CBNZ W9, 0x3B0DD48

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Subtract X31, X31, 528
	014 Move X21, 0x8D6000
	015 Move X22, 0x64C000
	016 Move W8, [X21+1643]
	017 Move X22, [X22+1000]
	018 Move X19, X0
	019 Add X20, X0, 328
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {92}
	024 Move X0, 0x64C000
	025 Move X0, [X0+1424]
	026 Call 0x1C17CF4
	027 Move X0, 0x613000
	028 Move X0, [X0+2808]
	029 Call 0x1C17CF4
	030 Move X0, 0x618000
	031 Move X0, [X0+2088]
	032 Call 0x1C17CF4
	033 Move X0, 0x64D000
	034 Move X0, [X0+816]
	035 Call 0x1C17CF4
	036 Move X0, 0x64D000
	037 Move X0, [X0+824]
	038 Call 0x1C17CF4
	039 Move X0, 0x5E8000
	040 Move X0, [X0+3672]
	041 Call 0x1C17CF4
	042 Move X0, 0x5E7000
	043 Move X0, [X0+1592]
	044 Call 0x1C17CF4
	045 Move X0, 0x64D000
	046 Move X0, [X0+832]
	047 Call 0x1C17CF4
	048 Move X0, 0x64D000
	049 Move X0, [X0+840]
	050 Call 0x1C17CF4
	051 Move X0, 0x64D000
	052 Move X0, [X0+848]
	053 Call 0x1C17CF4
	054 Move X0, 0x64D000
	055 Move X0, [X0+856]
	056 Call 0x1C17CF4
	057 Move X0, 0x64D000
	058 Move X0, [X0+864]
	059 Call 0x1C17CF4
	060 Move X0, 0x64D000
	061 Move X0, [X0+872]
	062 Call 0x1C17CF4
	063 Move X0, 0x64D000
	064 Move X0, [X0+880]
	065 Call 0x1C17CF4
	066 Move X0, 0x64D000
	067 Move X0, [X0+888]
	068 Call 0x1C17CF4
	069 Move X0, 0x64D000
	070 Move X0, [X0+896]
	071 Call 0x1C17CF4
	072 Move X0, 0x64D000
	073 Move X0, [X0+904]
	074 Call 0x1C17CF4
	075 Move X0, 0x64C000
	076 Move X0, [X0+1000]
	077 Call 0x1C17CF4
	078 Move X0, 0x64D000
	079 Move X0, [X0+912]
	080 Call 0x1C17CF4
	081 Move X0, 0x64D000
	082 Move X0, [X0+920]
	083 Call 0x1C17CF4
	084 Move X0, 0x64C000
	085 Move X0, [X0+1464]
	086 Call 0x1C17CF4
	087 Move X0, 0x5E9000
	088 Move X0, [X0+2480]
	089 Call 0x1C17CF4
	090 Move W8, 1
	091 Move [X21+1643], W8
	092 Move X27, 0x64D000
	093 Move X26, 0x64D000
	094 Move X24, 0x64D000
	095 Move X23, 0x64D000
	096 Move X21, 0x5E9000
	097 Move X25, 0x64D000
	098 Move X27, [X27+864]
	099 Move X26, [X26+856]
	100 Move X24, [X24+824]
	101 Move X23, [X23+896]
	102 Move X21, [X21+2480]
	103 Move X25, [X25+920]
	104 Move S0, 1
	105 Move S1, 1
	106 Move S2, 1
	107 Move S3, 1
	108 Move X0, X31
	109 Call 0x1E44664
	110 Move V0, 0
	111 Move [X19+324], W0
	112 Move [X20], V0
	113 Move X0, [X22]
	114 Move W8, [X0+224]
	115 Compare W8, 0
	116 JumpIfNotEqual {119}
	117 Call 0x1C17DFC
	118 Move X0, [X22]
	119 Move X8, [X0+184]
	120 Move W9, 3
	121 NotImplemented "Instruction MOVI not yet implemented."
	122 Move S1, 1
	123 Move W8, [X8+104]
	124 Move S2, 1
	125 Move S3, 1
	126 Move X1, X31
	127 Move [X19+344], W8
	128 Move X8, [X0+184]
	129 Add X0, X31, 464
	130 Move W8, [X8+104]
	131 Move [X19+356], W9
	132 Move [X19+348], W8
	133 Move [X31+496], V0
	134 Move [X31+504], V0
	135 Move [X31+464], V0
	136 Move [X31+472], V0
	137 Move S0, 1
	138 Call VertexGradient..ctor, X0, X1
	139 Move V0, [X31+496]
	140 Move V1, [X31+512]
	141 Move V2, [X31+464]
	142 Move V3, [X31+480]
	143 Add X8, X19, 360
	144 Move X0, X31
	145 Move [X8+32], V0
	146 Move [X8+40], V1
	147 Move [X8], V2
	148 Move [X8+8], V3
	149 Move S0, 1
	150 Move S1, 1
	151 Move S2, 1
	152 Move S3, 1
	153 Call 0x1E44664
	154 Move [X19+472], W0
	155 Move S0, W31
	156 Move S1, W31
	157 Move S2, W31
	158 Move S3, 1
	159 Move X0, X31
	160 Call 0x1E44664
	161 Move W8, 0xC2C60000
	162 Move W9, 0x42100000
	163 Move [X19+476], W0
	164 Move [X19+484], W8
	165 Move [X19+492], W9
	166 Move X2, [X27]
	167 NotImplemented "Instruction MOVI not yet implemented."
	168 Add X0, X31, 288
	169 Move W1, 16
	170 Move [X31+288], V0
	171 Move [X31+296], V0
	172 Call TMP_TextProcessingStack`1<Single>..ctor, X0, X1
	173 Move V1, [X31+288]
	174 Move V0, [X31+304]
	175 Move W8, 400
	176 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	177 Move [X19+528], D2
	178 Move [X19+496], V1
	179 Move [X19+504], V0
	180 Move X2, [X26]
	181 NotImplemented "Instruction MOVI not yet implemented."
	182 Add X0, X31, 432
	183 Move W1, 8
	184 Move [X31+432], V0
	185 Move [X31+440], V0
	186 Call TMP_TextProcessingStack`1<Int32Enum>..ctor, X0, X1
	187 Move X11, -50458624
	188 Move V0, [X31+432]
	189 Move V1, [X31+448]
	190 Move V2, [X11+2032]
	191 Add X8, X19, 536
	192 Move W9, 100
	193 Add X10, X20, 292
	194 Move W12, 0xFFFF
	195 Move [X8], V0
	196 Move [X8+8], V1
	197 Move [X19+584], W9
	198 Move [X10], D2
	199 Move [X19+628], W12
	200 Move X0, [X24]
	201 Move W1, 16
	202 Call 0x1C17D6C
	203 Move X2, [X23]
	204 Move X1, X0
	205 NotImplemented "Instruction MOVI not yet implemented."
	206 Add X0, X31, 400
	207 Move [X31+400], V0
	208 Move [X31+408], V0
	209 Call TMP_TextProcessingStack`1<Int32Enum>..ctor, X0, X1
	210 Move V1, [X31+400]
	211 Move V0, [X31+416]
	212 Move W1, 4
	213 Move [X19+640], V1
	214 Move [X19+648], V0
	215 Move X0, [X21]
	216 Call 0x1C17D6C
	217 Move W9, 0xCCCD
	218 NotImplemented "Instruction MOVK not yet implemented."
	219 Move [X19+732], W9
	220 Move W9, 257
	221 Move W8, 0xFE00
	222 NotImplemented "Instruction STRH not yet implemented."
	223 Move W9, 255
	224 NotImplemented "Instruction MOVK not yet implemented."
	225 Move [X19+792], W9
	226 Move W9, 0x869F
	227 Move [X19+704], W8
	228 Move TEMP, 0
	229 Not TEMP
	230 Move W8, TEMP
	231 NotImplemented "Instruction MOVK not yet implemented."
	232 NotImplemented "Instruction MOVI not yet implemented."
	233 Move [X19+740], W8
	234 Move W8, 1
	235 Move [X19+52], V0
	236 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	237 Move [X19+816], W9
	238 Move W9, 0xBF800000
	239 Move [X19+672], X0
	240 Move [X19+777], W8
	241 Move [X19+820], W8
	242 Move [X19+824], W8
	243 Move [X19+808], D0
	244 Move [X19+864], W9
	245 Move X0, [X25]
	246 Move W8, [X0+224]
	247 Compare W8, 0
	248 JumpIfNotEqual {251}
	249 Call 0x1C17DFC
	250 Move X0, [X25]
	251 Move X9, X25
	252 Move X11, 0x5E7000
	253 Move X10, 0x64D000
	254 Move X25, 0x64C000
	255 Move X29, 0x613000
	256 Move X28, 0x64D000
	257 Move X23, 0x64D000
	258 Move X11, [X11+1592]
	259 Move X10, [X10+872]
	260 Move X25, [X25+1464]
	261 Move X29, [X29+2808]
	262 Move X28, [X28+904]
	263 Move X23, [X23+816]
	264 Move X8, [X0+184]
	265 Move X22, 0x64D000
	266 Move X21, 0x64D000
	267 Move X24, 0x64D000
	268 Move X27, 0x5E8000
	269 Move X26, 0x64D000
	270 Move X22, [X22+880]
	271 Move X21, [X21+832]
	272 Move X24, [X24+848]
	273 Move X20, [X8+8]
	274 Move X27, [X27+3672]
	275 Move X26, [X26+888]
	276 Compare X20, 0
	277 JumpIfNotEqual {314}
	278 Move W8, [X0+224]
	279 Move X27, X26
	280 Move X26, X9
	281 Move X29, X11
	282 Move X25, X10
	283 Compare W8, 0
	284 JumpIfNotEqual {287}
	285 Call 0x1C17DFC
	286 Move X0, [X26]
	287 Move X9, 0x64C000
	288 Move X8, [X0+184]
	289 Move X9, [X9+1424]
	290 Move X21, [X8]
	291 Move X0, [X9]
	292 Call 0x1C17F10
	293 Move X8, 0x64D000
	294 Move X8, [X8+912]
	295 Move X1, X21
	296 Move X3, X31
	297 Move X20, X0
	298 Move X2, [X8]
	299 Call Action`1<Object>..ctor, X0, X1, X2
	300 Move X8, [X26]
	301 Move X10, X25
	302 Move X11, X29
	303 Move X26, X27
	304 Move X8, [X8+184]
	305 Move X27, 0x5E8000
	306 Move X21, 0x64D000
	307 Move X29, 0x613000
	308 Move [X8+8], X20
	309 Move X25, 0x64C000
	310 Move X27, [X27+3672]
	311 Move X21, [X21+832]
	312 Move X29, [X29+2808]
	313 Move X25, [X25+1464]
	314 Move V0, 0
	315 Move [X19+944], X20
	316 Move [X19+960], D0
	317 Move X0, [X11]
	318 Move W1, 16
	319 Move X20, X10
	320 Call 0x1C17D6C
	321 Move X2, [X20]
	322 Move X1, X0
	323 NotImplemented "Instruction MOVI not yet implemented."
	324 Add X0, X31, 432
	325 Move [X31+432], V0
	326 Move [X31+440], V0
	327 Call TMP_TextProcessingStack`1<Single>..ctor, X0, X1
	328 Move V1, [X31+432]
	329 Move V0, [X31+448]
	330 Move W1, 8
	331 Move [X19+66], V0
	332 Move [X19+65], V1
	333 Move X0, [X25]
	334 Call 0x1C17D6C
	335 Move W8, 0x437F0000
	336 Move W9, 0x43000000
	337 Move S0, W8
	338 Move [X19+1144], X0
	339 Move S3, W9
	340 Move V1, V0
	341 Move V2, V0
	342 Move X0, X31
	343 Call 0x1E44664
	344 Move [X19+1260], W0
	345 Move X0, [X29]
	346 Move W1, 16
	347 Call 0x1C17D6C
	348 Move X2, [X28]
	349 Move X1, X0
	350 NotImplemented "Instruction MOVI not yet implemented."
	351 Add X0, X31, 400
	352 Move [X31+400], V0
	353 Move [X31+408], V0
	354 Call 0x2671DC0, X0, X1
	355 Move V1, [X31+400]
	356 Move V0, [X31+416]
	357 Move W1, 16
	358 Move [X19+80], V0
	359 Move [X19+79], V1
	360 Move X0, [X29]
	361 Call 0x1C17D6C
	362 Move X2, [X28]
	363 Move X1, X0
	364 NotImplemented "Instruction MOVI not yet implemented."
	365 Add X0, X31, 368
	366 Move [X31+368], V0
	367 Move [X31+376], V0
	368 Call 0x2671DC0, X0, X1
	369 Move V1, [X31+368]
	370 Move V0, [X31+384]
	371 Move W1, 16
	372 Move [X19+82], V0
	373 Move [X19+81], V1
	374 Move X0, [X29]
	375 Call 0x1C17D6C
	376 Move X2, [X28]
	377 Move X1, X0
	378 NotImplemented "Instruction MOVI not yet implemented."
	379 Add X0, X31, 336
	380 Move [X31+336], V0
	381 Move [X31+344], V0
	382 Call 0x2671DC0, X0, X1
	383 Move V1, [X31+336]
	384 Move V0, [X31+352]
	385 Move W1, 16
	386 Move [X19+84], V0
	387 Move [X19+83], V1
	388 Move X0, [X23]
	389 Call 0x1C17D6C
	390 Move X2, [X22]
	391 Move X1, X0
	392 NotImplemented "Instruction MOVI not yet implemented."
	393 Add X0, X31, 464
	394 Move [X31+480], V0
	395 Move [X31+488], V0
	396 Move [X31+29], V0
	397 Call TMP_TextProcessingStack`1<HighlightState>..ctor, X0, X1
	398 Move V1, [X31+480]
	399 Move V0, [X31+496]
	400 Move V2, [X31+29]
	401 Move W1, 16
	402 Move [X19+87], V0
	403 Move [X19+86], V1
	404 Move [X19+85], V2
	405 Move X0, [X21]
	406 Call 0x1C17D6C
	407 Move X2, [X24]
	408 Move X1, X0
	409 NotImplemented "Instruction MOVI not yet implemented."
	410 Add X0, X31, 288
	411 Move [X31+320], X31
	412 Move [X31+288], V0
	413 Move [X31+296], V0
	414 Call TMP_TextProcessingStack`1<Object>..ctor, X0, X1
	415 Move X8, [X31+320]
	416 Move V1, [X31+288]
	417 Move V0, [X31+304]
	418 Add X9, X19, 1416
	419 Move W1, 8
	420 Move [X9+32], X8
	421 Move [X9], V1
	422 Move [X9+8], V0
	423 Move X8, 0x64D000
	424 Move X8, [X8+840]
	425 Move X0, [X8]
	426 Call 0x1C17D6C
	427 Move [X19+1472], X0
	428 Move X0, [X27]
	429 Move W1, 16
	430 Call 0x1C17D6C
	431 Move X2, [X26]
	432 Move X1, X0
	433 NotImplemented "Instruction MOVI not yet implemented."
	434 Add X0, X31, 256
	435 Move [X31+256], V0
	436 Move [X31+264], V0
	437 Call TMP_TextProcessingStack`1<Int32>..ctor, X0, X1
	438 Move V1, [X31+256]
	439 Move V0, [X31+272]
	440 Move W1, 16
	441 Move [X19+94], V0
	442 Move [X19+93], V1
	443 Move X0, [X27]
	444 Call 0x1C17D6C
	445 Move X2, [X26]
	446 Move X1, X0
	447 NotImplemented "Instruction MOVI not yet implemented."
	448 Add X0, X31, 224
	449 Move [X31+224], V0
	450 Move [X31+232], V0
	451 Call TMP_TextProcessingStack`1<Int32>..ctor, X0, X1
	452 Move V1, [X31+224]
	453 Move V0, [X31+240]
	454 Add X8, X19, 1528
	455 Move W1, 16
	456 Move [X8], V1
	457 Move [X8+8], V0
	458 Move X8, 0x5E7000
	459 Move X8, [X8+1592]
	460 Move X0, [X8]
	461 Call 0x1C17D6C
	462 Move X2, [X20]
	463 Move X1, X0
	464 NotImplemented "Instruction MOVI not yet implemented."
	465 Add X0, X31, 192
	466 Move [X31+192], V0
	467 Move [X31+200], V0
	468 Call TMP_TextProcessingStack`1<Single>..ctor, X0, X1
	469 Move V1, [X31+192]
	470 Move V0, [X31+208]
	471 Add X0, X31, 176
	472 Move W1, 4
	473 Move X2, X31
	474 Move [X19+99], V0
	475 Move [X19+98], V1
	476 Move [X31+176], X31
	477 Move [X31+184], X31
	478 Call TextBackingContainer..ctor, X0, X1
	479 Move V0, [X31+11]
	480 Move X8, 0x618000
	481 Move W1, 10
	482 Move [X19+107], V0
	483 Move X8, [X8+2088]
	484 Move X0, [X8]
	485 Call 0x1C17D6C
	486 Move X20, X0
	487 Add X0, X31, 160
	488 Move W1, 5
	489 Move W5, 1
	490 Move W2, W31
	491 Move W3, W31
	492 Move W4, W31
	493 Move X6, X31
	494 Move [X31+160], X31
	495 Move [X31+168], X31
	496 Call Decimal..ctor, X0, X1, X2, X3, X4, X5
	497 Compare X20, 0
	498 JumpIfEqual {649}
	499 Move W8, [X20+24]
	500 Compare W8, 0
	501 JumpIfEqual {648}
	502 Move V0, [X31+10]
	503 Add X0, X31, 144
	504 Move W1, 5
	505 Move W5, 2
	506 Move W2, W31
	507 Move W3, W31
	508 Move W4, W31
	509 Move X6, X31
	510 Move [X20+2], V0
	511 Move [X31+144], X31
	512 Move [X31+152], X31
	513 Call Decimal..ctor, X0, X1, X2, X3, X4, X5
	514 Move W8, [X20+24]
	515 NotImplemented "Instruction CMP not yet implemented."
	516 Move V0, [X31+9]
	517 Add X0, X31, 128
	518 Move W1, 5
	519 Move W5, 3
	520 Move W2, W31
	521 Move W3, W31
	522 Move W4, W31
	523 Move X6, X31
	524 Move [X20+3], V0
	525 Move [X31+128], X31
	526 Move [X31+136], X31
	527 Call Decimal..ctor, X0, X1, X2, X3, X4, X5
	528 Move W8, [X20+24]
	529 NotImplemented "Instruction CMP not yet implemented."
	530 Move V0, [X31+8]
	531 Add X0, X31, 112
	532 Move W1, 5
	533 Move W5, 4
	534 Move W2, W31
	535 Move W3, W31
	536 Move W4, W31
	537 Move X6, X31
	538 Move [X20+4], V0
	539 Move [X31+112], X31
	540 Move [X31+120], X31
	541 Call Decimal..ctor, X0, X1, X2, X3, X4, X5
	542 Move W8, [X20+24]
	543 NotImplemented "Instruction CMP not yet implemented."
	544 Move V0, [X31+7]
	545 Add X0, X31, 96
	546 Move W1, 5
	547 Move W5, 5
	548 Move W2, W31
	549 Move W3, W31
	550 Move W4, W31
	551 Move X6, X31
	552 Move [X20+5], V0
	553 Move [X31+96], X31
	554 Move [X31+104], X31
	555 Call Decimal..ctor, X0, X1, X2, X3, X4, X5
	556 Move W8, [X20+24]
	557 NotImplemented "Instruction CMP not yet implemented."
	558 Move V0, [X31+6]
	559 Add X0, X31, 80
	560 Move W1, 5
	561 Move W5, 6
	562 Move W2, W31
	563 Move W3, W31
	564 Move W4, W31
	565 Move X6, X31
	566 Move [X20+6], V0
	567 Move [X31+80], X31
	568 Move [X31+88], X31
	569 Call Decimal..ctor, X0, X1, X2, X3, X4, X5
	570 Move W8, [X20+24]
	571 NotImplemented "Instruction CMP not yet implemented."
	572 Move V0, [X31+5]
	573 Add X0, X31, 64
	574 Move W1, 5
	575 Move W5, 7
	576 Move W2, W31
	577 Move W3, W31
	578 Move W4, W31
	579 Move X6, X31
	580 Move [X20+7], V0
	581 Move [X31+64], X31
	582 Move [X31+72], X31
	583 Call Decimal..ctor, X0, X1, X2, X3, X4, X5
	584 Move W8, [X20+24]
	585 NotImplemented "Instruction CMP not yet implemented."
	586 Move V0, [X31+4]
	587 Add X0, X31, 48
	588 Move W1, 5
	589 Move W5, 8
	590 Move W2, W31
	591 Move W3, W31
	592 Move W4, W31
	593 Move X6, X31
	594 Move [X20+8], V0
	595 Move [X31+48], X31
	596 Move [X31+56], X31
	597 Call Decimal..ctor, X0, X1, X2, X3, X4, X5
	598 Move W8, [X20+24]
	599 NotImplemented "Instruction CMP not yet implemented."
	600 Move V0, [X31+3]
	601 Add X0, X31, 32
	602 Move W1, 5
	603 Move W5, 9
	604 Move W2, W31
	605 Move W3, W31
	606 Move W4, W31
	607 Move X6, X31
	608 Move [X20+9], V0
	609 Move [X31+32], X31
	610 Move [X31+40], X31
	611 Call Decimal..ctor, X0, X1, X2, X3, X4, X5
	612 Move W8, [X20+24]
	613 NotImplemented "Instruction CMP not yet implemented."
	614 Move V0, [X31+2]
	615 Add X0, X31, 16
	616 Move W1, 5
	617 Move W5, 10
	618 Move W2, W31
	619 Move W3, W31
	620 Move W4, W31
	621 Move X6, X31
	622 Move [X20+10], V0
	623 Move [X31+16], X31
	624 Move [X31+24], X31
	625 Call Decimal..ctor, X0, X1, X2, X3, X4, X5
	626 Move W8, [X20+24]
	627 NotImplemented "Instruction CMP not yet implemented."
	628 Move V0, [X31+1]
	629 Move X0, X19
	630 Move X1, X31
	631 Move [X20+11], V0
	632 Move [X19+1728], X20
	633 Call MaskableGraphic..ctor, X0
	634 Add X31, X31, 528
	635 Move X20, [X31+80]
	636 Move X19, [X31+88]
	637 Move X22, [X31+64]
	638 Move X21, [X31+72]
	639 Move X24, [X31+48]
	640 Move X23, [X31+56]
	641 Move X26, [X31+32]
	642 Move X25, [X31+40]
	643 Move X28, [X31+16]
	644 Move X27, [X31+24]
	645 Move X29, [X31+96]
	646 Move X30, [X31+104]
	647 Return 
	648 Call 0x1C17F28
	649 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03B0DD34 BL 0x1C16DFC
	0x03B0DD38 LDR X8, [X24]
	0x03B0DD3C LDR X8, [X8 + 0xB8]
	0x03B0DD40 LDR X8, [X8]
	0x03B0DD44 CBZ X8, 0x3B0DFA8
	0x03B0DD48 LDR X2, [X25]
	0x03B0DD4C MOV X0, X8
	0x03B0DD50 MOV W1, W21
	0x03B0DD54 BL 0x301BCCC
	0x03B0DD58 CBZ X0, 0x3B0DFA8
	0x03B0DD5C LDR X0, [X0 + 0x10]
	0x03B0DD60 CBZ X0, 0x3B0DFA8
	0x03B0DD64 MOV X1, X31
	0x03B0DD68 BL 0x3C385F8
	0x03B0DD6C CMP W0, W22
	0x03B0DD70 B.NE 0x3B0DDB0
	0x03B0DD74 LDR X0, [X24]
	0x03B0DD78 LDR W8, [X0 + 0xE0]
	0x03B0DD7C CBNZ W8, 0x3B0DD88
	0x03B0DD80 BL 0x1C16DFC
	0x03B0DD84 LDR X0, [X24]
	0x03B0DD88 LDR X8, [X0 + 0xB8]
	0x03B0DD8C LDR X0, [X8]
	0x03B0DD90 CBZ X0, 0x3B0DFA8
	0x03B0DD94 LDR X2, [X25]
	0x03B0DD98 MOV W1, W21
	0x03B0DD9C BL 0x301BCCC
	0x03B0DDA0 CBZ X0, 0x3B0DFA8
	0x03B0DDA4 LDR W8, [X0 + 0x24]
	0x03B0DDA8 CMP W8, W20
	0x03B0DDAC B.EQ 0x3B0DF30
	0x03B0DDB0 ADD W21, W21, 0x1
	0x03B0DDB4 B 0x3B0DD00
	0x03B0DDB8 ADRP X8, 0x5E6000
	0x03B0DDBC LDR X8, [X8 + 0xA28]
	0x03B0DDC0 LDR X0, [X8]
	0x03B0DDC4 LDR W8, [X0 + 0xE0]
	0x03B0DDC8 CBNZ W8, 0x3B0DDD0
	0x03B0DDCC BL 0x1C16DFC
	0x03B0DDD0 ADRP X8, 0x64C000
	0x03B0DDD4 LDR X8, [X8 + 0x488]
	0x03B0DDD8 MOV X1, X31
	0x03B0DDDC LDR X0, [X8]
	0x03B0DDE0 BL 0x3C06A04
	0x03B0DDE4 B 0x3B0DF90
	0x03B0DDE8 ADRP X8, 0x5EA000
	0x03B0DDEC LDR X8, [X8 + 0xCA0]
	0x03B0DDF0 LDR X0, [X8]
	0x03B0DDF4 BL 0x1C16F10
	0x03B0DDF8 MOV X1, X19
	0x03B0DDFC MOV X2, X31
	0x03B0DE00 MOV X21, X0
	0x03B0DE04 BL 0x3C145DC
	0x03B0DE08 CBZ X21, 0x3B0DFA8
	0x03B0DE0C MOVZ W1, 0x3D
	0x03B0DE10 MOV X0, X21
	0x03B0DE14 MOV X2, X31
	0x03B0DE18 BL 0x3C396EC
	0x03B0DE1C MOV X0, X19
	0x03B0DE20 MOV X1, X31
	0x03B0DE24 BL 0x3C15294
	0x03B0DE28 MOV X1, X0
	0x03B0DE2C MOV X0, X21
	0x03B0DE30 MOV X2, X31
	0x03B0DE34 BL 0x3C152D0
	0x03B0DE38 LDR X0, [X23]
	0x03B0DE3C LDR W8, [X0 + 0xE0]
	0x03B0DE40 CBNZ W8, 0x3B0DE48
	0x03B0DE44 BL 0x1C16DFC
	0x03B0DE48 BL 0x3B0DFAC
	0x03B0DE4C LDR X8, [X23]
	0x03B0DE50 SCVTF S0, W20
	0x03B0DE54 MOV X0, X21
	0x03B0DE58 MOV X2, X31
	0x03B0DE5C LDR X8, [X8 + 0xB8]
	0x03B0DE60 LDR W1, [X8 + 0xB4]
	0x03B0DE64 BL 0x3C15CD8
	0x03B0DE68 LDR X8, [X23]
	0x03B0DE6C FMOV S0, 4
	0x03B0DE70 MOV X0, X21
	0x03B0DE74 MOV X2, X31
	0x03B0DE78 LDR X8, [X8 + 0xB8]
	0x03B0DE7C LDR W1, [X8 + 0xBC]
	0x03B0DE80 BL 0x3C15CD8
	0x03B0DE84 ADRP X8, 0x64C000
	0x03B0DE88 LDR X8, [X8 + 0x480]
	0x03B0DE8C LDR X0, [X8]
	0x03B0DE90 BL 0x1C16F10
	0x03B0DE94 MOV X1, X31
	0x03B0DE98 MOV X22, X0
	0x03B0DE9C BL 0x33BDD8C
	0x03B0DEA0 CBZ X22, 0x3B0DFA8
	0x03B0DEA4 MOVZ W8, 0x1
	0x03B0DEA8 STP X19, X21, [X22 + 0x10]
	0x03B0DEAC STP W8, W20, [X22 + 0x20]
	0x03B0DEB0 LDR X0, [X24]
	0x03B0DEB4 LDR W8, [X0 + 0xE0]
	0x03B0DEB8 CBNZ W8, 0x3B0DEC4
	0x03B0DEBC BL 0x1C16DFC
	0x03B0DEC0 LDR X0, [X24]
	0x03B0DEC4 LDR X8, [X0 + 0xB8]
	0x03B0DEC8 LDR X0, [X8]
	0x03B0DECC CBZ X0, 0x3B0DFA8
	0x03B0DED0 ADRP X9, 0x64C000
	0x03B0DED4 LDR X9, [X9 + 0x468]
	0x03B0DED8 LDR W10, [X0 + 0x1C]
	0x03B0DEDC LDR X8, [X0 + 0x10]
	0x03B0DEE0 LDR X9, [X9]
	0x03B0DEE4 ADD W10, W10, 0x1
	0x03B0DEE8 STR W10, [X0 + 0x1C]
	0x03B0DEEC CBZ X8, 0x3B0DFA8
	0x03B0DEF0 LDRSW X10, [X0 + 0x18]
	0x03B0DEF4 LDR W11, [X8 + 0x18]
	0x03B0DEF8 CMP W10, W11
	0x03B0DEFC B.CS 0x3B0DF14
	0x03B0DF00 ADD W9, W10, 0x1
	0x03B0DF04 ADD X8, X8, X10, 0x3, LSL
	0x03B0DF08 STR W9, [X0 + 0x18]
	0x03B0DF0C STR X22, [X8 + 0x20]
	0x03B0DF10 B 0x3B0DF28
	0x03B0DF14 LDR X8, [X9 + 0x20]
	0x03B0DF18 MOV X1, X22
	0x03B0DF1C LDR X8, [X8 + 0xC0]
	0x03B0DF20 LDR X2, [X8 + 0x70]
	0x03B0DF24 BL 0x301BF90
	0x03B0DF28 MOV X19, X21
	0x03B0DF2C B 0x3B0DF90
	0x03B0DF30 LDR X0, [X24]
	0x03B0DF34 LDR W8, [X0 + 0xE0]
	0x03B0DF38 CBNZ W8, 0x3B0DF44
	0x03B0DF3C BL 0x1C16DFC
	0x03B0DF40 LDR X0, [X24]
	0x03B0DF44 LDR X8, [X0 + 0xB8]
	0x03B0DF48 LDR X0, [X8]
	0x03B0DF4C CBZ X0, 0x3B0DFA8
	0x03B0DF50 LDR X2, [X25]
	0x03B0DF54 MOV W1, W21
	0x03B0DF58 BL 0x301BCCC
	0x03B0DF5C CBZ X0, 0x3B0DFA8
	0x03B0DF60 LDR W8, [X0 + 0x20]
	0x03B0DF64 ADD W8, W8, 0x1
	0x03B0DF68 STR W8, [X0 + 0x20]
	0x03B0DF6C LDR X8, [X24]
	0x03B0DF70 LDR X8, [X8 + 0xB8]
	0x03B0DF74 LDR X0, [X8]
	0x03B0DF78 CBZ X0, 0x3B0DFA8
	0x03B0DF7C LDR X2, [X25]
	0x03B0DF80 MOV W1, W21
	0x03B0DF84 BL 0x301BCCC
	0x03B0DF88 CBZ X0, 0x3B0DFA8
	0x03B0DF8C LDR X19, [X0 + 0x18]
	0x03B0DF90 MOV X0, X19
	0x03B0DF94 LDP X20, X19, [X31 + 0x30]
	0x03B0DF98 LDP X22, X21, [X31 + 0x20]
	0x03B0DF9C LDP X24, X23, [X31 + 0x10]
	0x03B0DFA0 LDP X30, X25, [X31], #0x40
	0x03B0DFA4 RET
	0x03B0DFA8 BL 0x1C16F20
	0x03B0DFAC STP X30, X21, [X31 - 0x20]!
	0x03B0DFB0 STP X20, X19, [X31 + 0x10]
	0x03B0DFB4 ADRP X19, 0x8D5000
	0x03B0DFB8 ADRP X20, 0x64B000
	0x03B0DFBC LDRB W8, [X19 + 0x6AB]
	0x03B0DFC0 LDR X20, [X20 + 0x338]
	0x03B0DFC4 TBNZ X8, 0x0, 0x3B0E288
	0x03B0DFC8 ADRP X0, 0x5E6000
	0x03B0DFCC LDR X0, [X0 + 0x598]
	0x03B0DFD0 BL 0x1C16CF4
	0x03B0DFD4 ADRP X0, 0x64B000
	0x03B0DFD8 LDR X0, [X0 + 0x338]
	0x03B0DFDC BL 0x1C16CF4
	0x03B0DFE0 ADRP X0, 0x64C000
	0x03B0DFE4 LDR X0, [X0 + 0x490]
	0x03B0DFE8 BL 0x1C16CF4
	0x03B0DFEC ADRP X0, 0x64C000
	0x03B0DFF0 LDR X0, [X0 + 0x498]
	0x03B0DFF4 BL 0x1C16CF4
	0x03B0DFF8 ADRP X0, 0x64C000
	0x03B0DFFC LDR X0, [X0 + 0x4A0]
	0x03B0E000 BL 0x1C16CF4
	0x03B0E004 ADRP X0, 0x64B000
	0x03B0E008 LDR X0, [X0 + 0x4A8]
	0x03B0E00C BL 0x1C16CF4
	0x03B0E010 ADRP X0, 0x64B000
	0x03B0E014 LDR X0, [X0 + 0x4B0]
	0x03B0E018 BL 0x1C16CF4
	0x03B0E01C ADRP X0, 0x64B000
	0x03B0E020 LDR X0, [X0 + 0x4B8]
	0x03B0E024 BL 0x1C16CF4
	0x03B0E028 ADRP X0, 0x649000
	0x03B0E02C LDR X0, [X0 + 0x888]
	0x03B0E030 BL 0x1C16CF4
	0x03B0E034 ADRP X0, 0x64B000
	0x03B0E038 LDR X0, [X0 + 0x4C0]
	0x03B0E03C BL 0x1C16CF4
	0x03B0E040 ADRP X0, 0x64B000
	0x03B0E044 LDR X0, [X0 + 0x4C8]
	0x03B0E048 BL 0x1C16CF4
	0x03B0E04C ADRP X0, 0x64B000

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Subtract X31, X31, 1024
	014 Move X22, 0x8D6000
	015 Move X29, 0x64D000
	016 Move X20, 0x64C000
	017 Move X21, 0x5F1000
	018 Move X19, 0x5F1000
	019 Move X28, 0x64D000
	020 Move X26, 0x5F0000
	021 Move X25, 0x64D000
	022 Move X24, 0x5E7000
	023 Move X23, 0x64D000
	024 Move X29, [X29+928]
	025 Move X20, [X20+1000]
	026 Move X21, [X21+2184]
	027 Move X19, [X19+2192]
	028 Move X28, [X28+936]
	029 Move X26, [X26+2264]
	030 Move W8, [X22+1644]
	031 Move X25, [X25+944]
	032 Move X24, [X24+1592]
	033 Move X23, [X23+952]
	034 Add X27, X31, 928
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {74}
	039 Move X0, 0x5F0000
	040 Move X0, [X0+2264]
	041 Call 0x1C17CF4
	042 Move X0, 0x5F1000
	043 Move X0, [X0+2192]
	044 Call 0x1C17CF4
	045 Move X0, 0x5F1000
	046 Move X0, [X0+2184]
	047 Call 0x1C17CF4
	048 Move X0, 0x64D000
	049 Move X0, [X0+928]
	050 Call 0x1C17CF4
	051 Move X0, 0x64D000
	052 Move X0, [X0+944]
	053 Call 0x1C17CF4
	054 Move X0, 0x5E7000
	055 Move X0, [X0+1592]
	056 Call 0x1C17CF4
	057 Move X0, 0x64D000
	058 Move X0, [X0+936]
	059 Call 0x1C17CF4
	060 Move X0, 0x64D000
	061 Move X0, [X0+952]
	062 Call 0x1C17CF4
	063 Move X0, 0x64C000
	064 Move X0, [X0+1000]
	065 Call 0x1C17CF4
	066 Move X0, 0x64D000
	067 Move X0, [X0+960]
	068 Call 0x1C17CF4
	069 Move X0, 0x64D000
	070 Move X0, [X0+968]
	071 Call 0x1C17CF4
	072 Move W8, 1
	073 Move [X22+1644], W8
	074 Move X0, [X29]
	075 Move W1, 4
	076 Call 0x1C17D6C
	077 Move X8, [X20]
	078 Move X8, [X8+184]
	079 Move [X8], X0
	080 Move X0, [X21]
	081 Call 0x1C17F10
	082 Move X1, [X19]
	083 Move X19, X0
	084 Call Dictionary`2<Int32, Int32>..ctor, X0
	085 Move X8, [X20]
	086 Move W1, 16
	087 Move X8, [X8+184]
	088 Move [X8+8], X19
	089 Move X0, [X29]
	090 Call 0x1C17D6C
	091 Move X2, [X28]
	092 Move X1, X0
	093 NotImplemented "Instruction MOVI not yet implemented."
	094 Add X0, X31, 928
	095 Move [X31+1008], X31
	096 Move [X27+48], V0
	097 Move [X27+56], V0
	098 Move [X27+16], V0
	099 Move [X27+24], V0
	100 Move [X27], V0
	101 Call TMP_TextProcessingStack`1<MaterialReference>..ctor, X0, X1
	102 Move X19, [X20]
	103 Add X1, X31, 928
	104 Move W2, 88
	105 Move X8, [X19+184]
	106 Add X0, X8, 16
	107 Call 0x3EB2AC0
	108 Move X8, [X19+184]
	109 Move TEMP, 0
	110 Not TEMP
	111 Move W9, TEMP
	112 Move W1, 128
	113 Move [X8+104], W9
	114 Move X0, [X26]
	115 Call 0x1C17D6C
	116 Move X8, [X20]
	117 Move W1, 8
	118 Move X8, [X8+184]
	119 Move [X8+128], X0
	120 Move X0, [X25]
	121 Call 0x1C17D6C
	122 Move X8, [X20]
	123 Move W1, 16
	124 Move X8, [X8+184]
	125 Move [X8+136], X0
	126 Move X0, [X24]
	127 Call 0x1C17D6C
	128 Move X19, [X20]
	129 Move W2, 888
	130 Move W1, W31
	131 Move X8, [X19+184]
	132 Move [X8+144], X0
	133 Add X0, X8, 152
	134 Call 0x3EB2B10
	135 Move X8, [X19+184]
	136 Move W2, 888
	137 Move W1, W31
	138 Add X0, X8, 1040
	139 Call 0x3EB2B10
	140 Move X8, [X19+184]
	141 Move W2, 888
	142 Move W1, W31
	143 Add X0, X8, 1928
	144 Call 0x3EB2B10
	145 Move X8, [X19+184]
	146 Move W2, 888
	147 Move W1, W31
	148 Add X0, X8, 2816
	149 Call 0x3EB2B10
	150 Move X8, [X19+184]
	151 Move W2, 888
	152 Move W1, W31
	153 Add X0, X8, 3704
	154 Call 0x3EB2B10
	155 Add X0, X31, 8
	156 Move W2, 920
	157 Move W1, W31
	158 Call 0x3EB2B10
	159 Move X3, [X23]
	160 Add X0, X31, 8
	161 Move W1, 8
	162 Move W2, 8
	163 Call TMP_TextProcessingStack`1<WordWrapState>..ctor, X0, X1, X2
	164 Move X8, [X20]
	165 Move W9, 0x11F0
	166 Add X1, X31, 8
	167 Move W2, 920
	168 Move X8, [X8+184]
	169 Add X0, X8, X9
	170 Call 0x3EB2AC0
	171 Move X8, 0x64D000
	172 Move X8, [X8+960]
	173 Move W1, 1
	174 Move W2, W31
	175 Move W3, W31
	176 Move X0, [X8]
	177 Move X4, X31
	178 Call ProfilerUnsafeUtility.CreateMarker, X0, X1, X2, X3
	179 Move X8, [X20]
	180 Move W1, 1
	181 Move W2, W31
	182 Move W3, W31
	183 Move X8, [X8+184]
	184 Move X4, X31
	185 Move [X8+5512], X0
	186 Move X8, 0x64D000
	187 Move X8, [X8+968]
	188 Move X0, [X8]
	189 Call ProfilerUnsafeUtility.CreateMarker, X0, X1, X2, X3
	190 Move X8, [X20]
	191 NotImplemented "Instruction MOVI not yet implemented."
	192 NotImplemented "Instruction MOVI not yet implemented."
	193 Move X10, -50462720
	194 Move X9, [X8+184]
	195 Move [X9+5520], X0
	196 Move [X9+5528], D0
	197 Move X9, [X8+184]
	198 Move V0, [X10+2832]
	199 Move X10, -50462720
	200 Move [X9+5536], D1
	201 Move X8, [X8+184]
	202 Move V1, [X10+1576]
	203 Move [X8+5544], D0
	204 Move [X8+5552], D1
	205 Add X31, X31, 1024
	206 Move X20, [X31+80]
	207 Move X19, [X31+88]
	208 Move X22, [X31+64]
	209 Move X21, [X31+72]
	210 Move X24, [X31+48]
	211 Move X23, [X31+56]
	212 Move X26, [X31+32]
	213 Move X25, [X31+40]
	214 Move X28, [X31+16]
	215 Move X27, [X31+24]
	216 Move X29, [X31+96]
	217 Move X30, [X31+104]
	218 Return 

