Type: TMPro.FastAction`2

Method: System.Void Add(System.Action`2<A, B> rhs)

Disassembly:
	0x02D12BDC MOV X3, X31
	0x02D12BE0 MOV X23, X0
	0x02D12BE4 LDR X8, [X8 + 0xC0]
	0x02D12BE8 LDR X2, [X8 + 0x20]
	0x02D12BEC BL 0x2D0E824
	0x02D12BF0 LDR X3, [X27]
	0x02D12BF4 MOV X0, X22
	0x02D12BF8 MOV X1, X23
	0x02D12BFC MOV W2, W31
	0x02D12C00 BL 0x21A18B4
	0x02D12C04 LDR X0, [X25]
	0x02D12C08 LDR X22, [X20 + 0x18]
	0x02D12C0C BL 0x1C16F10
	0x02D12C10 LDR X8, [X19 + 0x20]
	0x02D12C14 MOV X1, X20
	0x02D12C18 MOV X3, X31
	0x02D12C1C MOV X23, X0
	0x02D12C20 LDR X8, [X8 + 0xC0]
	0x02D12C24 LDR X2, [X8 + 0x28]
	0x02D12C28 BL 0x2D0E824
	0x02D12C2C CBZ X22, 0x2D12DB4
	0x02D12C30 ADRP X8, 0x140B000
	0x02D12C34 LDR X8, [X8 + 0x798]
	0x02D12C38 MOV X0, X22
	0x02D12C3C MOV X1, X23
	0x02D12C40 MOV W2, W31
	0x02D12C44 LDR X3, [X8]
	0x02D12C48 BL 0x21A18B4
	0x02D12C4C LDR X0, [X24]
	0x02D12C50 LDR X22, [X20 + 0x18]
	0x02D12C54 BL 0x1C16F10
	0x02D12C58 LDR X8, [X19 + 0x20]
	0x02D12C5C MOV X1, X20
	0x02D12C60 MOV X3, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, X0
	006 Move X0, [X0+24]
	007 Compare X0, 0
	008 JumpIfEqual {47}
	009 Move X8, [X2+32]
	010 Move X20, X2
	011 Move X19, X1
	012 Move X8, [X8+192]
	013 Move X2, [X8+24]
	014 Call Dictionary`2<Object, Object>.ContainsKey, X0, X1
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {24}
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]
	023 Return 
	024 Move X0, [X21+16]
	025 Compare X0, 0
	026 JumpIfEqual {47}
	027 Move X8, [X20+32]
	028 Move X21, [X21+24]
	029 Move X1, X19
	030 Move X8, [X8+192]
	031 Move X2, [X8+40]
	032 Call LinkedList`1<Object>.AddLast, X0, X1
	033 Compare X21, 0
	034 JumpIfEqual {47}
	035 Move X8, [X20+32]
	036 Move X1, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X2, X0
	040 Move X8, [X8+192]
	041 Move X0, X21
	042 Move X3, [X8+56]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Call Dictionary`2<Object, Object>.set_Item, X0, X1, X2
	046 Return 
	047 Call 0x1C17F20

Method: System.Void Remove(System.Action`2<A, B> rhs)

Disassembly:
	0x02D12C64 MOV X23, X0
	0x02D12C68 LDR X8, [X8 + 0xC0]
	0x02D12C6C LDR X2, [X8 + 0x30]
	0x02D12C70 BL 0x2D0E824
	0x02D12C74 CBZ X22, 0x2D12DB4
	0x02D12C78 ADRP X8, 0x140C000
	0x02D12C7C LDR X8, [X8 + 0xCE0]
	0x02D12C80 MOV X0, X22
	0x02D12C84 MOV X1, X23
	0x02D12C88 MOV W2, W31
	0x02D12C8C LDR X3, [X8]
	0x02D12C90 BL 0x21A18B4
	0x02D12C94 STR X21, [X20 + 0x18]
	0x02D12C98 STP S11, S10, [X20 + 0x20]
	0x02D12C9C STP S9, S8, [X20 + 0x28]
	0x02D12CA0 CBZ X21, 0x2D12D94
	0x02D12CA4 STRB W31, [X20 + 0x30]
	0x02D12CA8 LDR X0, [X26]
	0x02D12CAC ADRP X23, 0x140B000
	0x02D12CB0 LDR X23, [X23 + 0x770]
	0x02D12CB4 BL 0x1C16F10
	0x02D12CB8 LDR X8, [X19 + 0x20]
	0x02D12CBC MOV X1, X20
	0x02D12CC0 MOV X3, X31
	0x02D12CC4 MOV X22, X0
	0x02D12CC8 LDR X8, [X8 + 0xC0]
	0x02D12CCC LDR X2, [X8 + 0x20]
	0x02D12CD0 BL 0x2D0E824
	0x02D12CD4 LDR X3, [X23]
	0x02D12CD8 MOV X0, X21
	0x02D12CDC MOV X1, X22
	0x02D12CE0 MOV W2, W31
	0x02D12CE4 BL 0x21A1534
	0x02D12CE8 LDR X0, [X25]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move [X31+8], X31
	007 Move X20, X0
	008 Move X0, [X0+24]
	009 Compare X0, 0
	010 JumpIfEqual {44}
	011 Move X8, [X2+32]
	012 Move X19, X2
	013 Add X2, X31, 8
	014 Move X21, X1
	015 Move X8, [X8+192]
	016 Move X3, [X8+64]
	017 Call Dictionary`2<Object, Object>.TryGetValue, X0, X1, X2
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {38}
	022 Move X0, [X20+24]
	023 Compare X0, 0
	024 JumpIfEqual {44}
	025 Move X8, [X19+32]
	026 Move X1, X21
	027 Move X8, [X8+192]
	028 Move X2, [X8+80]
	029 Call Dictionary`2<Object, Object>.Remove, X0, X1
	030 Move X0, [X20+16]
	031 Compare X0, 0
	032 JumpIfEqual {44}
	033 Move X8, [X19+32]
	034 Move X1, [X31+8]
	035 Move X8, [X8+192]
	036 Move X2, [X8+88]
	037 Call LinkedList`1<Object>.Remove, X0, X1
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X30, [X31+16]
	041 Move X21, [X31+24]
	042 Add X31, X31, 48
	043 Return 
	044 Call 0x1C17F20

Method: System.Void Call(A a, B b)

Disassembly:
	0x02D12CEC LDR X21, [X20 + 0x18]
	0x02D12CF0 BL 0x1C16F10
	0x02D12CF4 LDR X8, [X19 + 0x20]
	0x02D12CF8 MOV X1, X20
	0x02D12CFC MOV X3, X31
	0x02D12D00 MOV X22, X0
	0x02D12D04 LDR X8, [X8 + 0xC0]
	0x02D12D08 LDR X2, [X8 + 0x28]
	0x02D12D0C BL 0x2D0E824
	0x02D12D10 CBZ X21, 0x2D12DB4
	0x02D12D14 ADRP X8, 0x140B000
	0x02D12D18 LDR X8, [X8 + 0x778]
	0x02D12D1C MOV X0, X21
	0x02D12D20 MOV X1, X22
	0x02D12D24 MOV W2, W31
	0x02D12D28 LDR X3, [X8]
	0x02D12D2C BL 0x21A1534
	0x02D12D30 LDR X0, [X24]
	0x02D12D34 LDR X21, [X20 + 0x18]
	0x02D12D38 BL 0x1C16F10
	0x02D12D3C LDR X8, [X19 + 0x20]
	0x02D12D40 MOV X1, X20
	0x02D12D44 MOV X3, X31
	0x02D12D48 MOV X19, X0
	0x02D12D4C LDR X8, [X8 + 0xC0]
	0x02D12D50 LDR X2, [X8 + 0x30]
	0x02D12D54 BL 0x2D0E824
	0x02D12D58 CBZ X21, 0x2D12DB4
	0x02D12D5C ADRP X8, 0x140C000
	0x02D12D60 LDR X8, [X8 + 0xF0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X0+16]
	007 Compare X8, 0
	008 JumpIfEqual {38}
	009 Move X21, [X8+16]
	010 Compare X21, 0
	011 JumpIfEqual {32}
	012 Move X19, X3
	013 Move X20, X2
	014 And W22, W1, 1
	015 Move X8, [X21+40]
	016 Compare X8, 0
	017 JumpIfEqual {38}
	018 Move X9, [X8+24]
	019 Move X0, [X8+64]
	020 Move X3, [X8+40]
	021 Move W1, W22
	022 Move X2, X20
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move X8, [X19+32]
	025 Move X0, X21
	026 Move X8, [X8+192]
	027 Move X1, [X8+136]
	028 Call LinkedListNode`1<Object>.get_Next, X0
	029 Move X21, X0
	030 Compare X0, 0
	031 JumpIfNotEqual {15}
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X30, [X31+48]
	037 Return 
	038 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x02D12D64 MOV X0, X21
	0x02D12D68 MOV X1, X19
	0x02D12D6C LDP X20, X19, [X31 + 0x60]
	0x02D12D70 LDR X3, [X8]
	0x02D12D74 LDP X22, X21, [X31 + 0x50]
	0x02D12D78 LDP X24, X23, [X31 + 0x40]
	0x02D12D7C LDP X26, X25, [X31 + 0x30]
	0x02D12D80 LDP X30, X27, [X31 + 0x20]
	0x02D12D84 LDP D9, D8, [X31 + 0x10]
	0x02D12D88 MOV W2, W31
	0x02D12D8C LDP D11, D10, [X31], #0x70
	0x02D12D90 B 0x21A1534
	0x02D12D94 LDP X20, X19, [X31 + 0x60]
	0x02D12D98 LDP X22, X21, [X31 + 0x50]
	0x02D12D9C LDP X24, X23, [X31 + 0x40]
	0x02D12DA0 LDP X26, X25, [X31 + 0x30]
	0x02D12DA4 LDP X30, X27, [X31 + 0x20]
	0x02D12DA8 LDP D9, D8, [X31 + 0x10]
	0x02D12DAC LDP D11, D10, [X31], #0x70
	0x02D12DB0 RET
	0x02D12DB4 BL 0x1C16F20
	0x02D12DB8 STP X30, X19, [X31 - 0x10]!
	0x02D12DBC CBZ W1, 0x2D12DC8
	0x02D12DC0 MOV W0, W31
	0x02D12DC4 B 0x2D12DE8
	0x02D12DC8 LDR V2, [X0 + 0x28]
	0x02D12DCC MOV X19, X0
	0x02D12DD0 FCMP S2, 0x0
	0x02D12DD4 B.MI 0x2D12DE4
	0x02D12DD8 LDR V2, [X19 + 0x2C]
	0x02D12DDC FCMP S2, 0x0
	0x02D12DE0 B.PL 0x2D12DF0
	0x02D12DE4 MOVZ W0, 0x1
	0x02D12DE8 LDP X30, X19, [X31], #0x10
	0x02D12DEC RET
	0x02D12DF0 LDR X0, [X19 + 0x18]
	0x02D12DF4 MOV X1, X31
	0x02D12DF8 BL 0x3D16BD4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+32]
	006 Move X20, X1
	007 Move X19, X0
	008 Move X8, [X8+192]
	009 Move X8, [X8+32]
	010 Move W9, [X8+309]
	011 Move TEMP, X9
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {18}
	015 Move X0, X8
	016 Call 0x1C5D684
	017 Move X8, X0
	018 Move X0, X8
	019 Call 0x1C17F10
	020 Move X8, [X20+32]
	021 Move X21, X0
	022 Move X8, [X8+192]
	023 Move X1, [X8+144]
	024 Call LinkedList`1<Object>..ctor, X0
	025 Move [X19+16], X21
	026 Move X8, [X20+32]
	027 Move X8, [X8+192]
	028 Move X0, [X8+8]
	029 Move W8, [X0+309]
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {35}
	034 Call 0x1C5D684
	035 Call 0x1C17F10
	036 Move X8, [X20+32]
	037 Move X20, X0
	038 Move X8, [X8+192]
	039 Move X1, [X8+152]
	040 Call Dictionary`2<Object, Object>..ctor, X0
	041 Move [X19+24], X20
	042 Move X0, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X1, X31
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Call Object..ctor, X0
	049 Return 

