Type: TMPro.TMP_Offset

Method: System.Single get_left()

Disassembly:
	0x03ADCA5C CMP W0, 0x1
	0x03ADCA60 B.LT 0x3ADCAC8

ISIL:
	001 Move V0, [X0]
	002 Return V0

Method: System.Void set_left(System.Single value)

Disassembly:
	0x03ADCA64 ADRP X23, 0x67C000
	0x03ADCA68 LDR X23, [X23 + 0x8D8]

ISIL:
	001 Move [X0], S0
	002 Return 

Method: System.Single get_right()

Disassembly:
	0x03ADCA6C MOV W21, W31
	0x03ADCA70 MOV X0, X20

ISIL:
	001 Move V0, [X0+4]
	002 Return V0

Method: System.Void set_right(System.Single value)

Disassembly:
	0x03ADCA74 MOV W1, W21
	0x03ADCA78 MOV X2, X31

ISIL:
	001 Move [X0+4], S0
	002 Return 

Method: System.Single get_top()

Disassembly:
	0x03ADCA7C BL 0x3C410A0
	0x03ADCA80 CBZ X0, 0x3ADCAD8

ISIL:
	001 Move V0, [X0+8]
	002 Return V0

Method: System.Void set_top(System.Single value)

Disassembly:
	0x03ADCA84 MOV X1, X31
	0x03ADCA88 BL 0x3C32ECC

ISIL:
	001 Move [X0+8], S0
	002 Return 

Method: System.Single get_bottom()

Disassembly:
	0x03ADCA8C LDR X8, [X23]
	0x03ADCA90 MOV X22, X0

ISIL:
	001 Move V0, [X0+12]
	002 Return V0

Method: System.Void set_bottom(System.Single value)

Disassembly:
	0x03ADCA94 LDR W9, [X8 + 0xE0]
	0x03ADCA98 CBNZ W9, 0x3ADCAA4

ISIL:
	001 Move [X0+12], S0
	002 Return 

Method: System.Single get_horizontal()

Disassembly:
	0x03ADCA9C MOV X0, X8
	0x03ADCAA0 BL 0x1C16DFC

ISIL:
	001 Move V0, [X0]
	002 Return V0

Method: System.Void set_horizontal(System.Single value)

Disassembly:
	0x03ADCAA4 MOV X0, X22
	0x03ADCAA8 MOV W1, W19

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S0
	003 Return 

Method: System.Single get_vertical()

Disassembly:
	0x03ADCAAC BL 0x3ADC9F8
	0x03ADCAB0 MOV X0, X20

ISIL:
	001 Move V0, [X0+8]
	002 Return V0

Method: System.Void set_vertical(System.Single value)

Disassembly:
	0x03ADCAB4 MOV X1, X31
	0x03ADCAB8 ADD W21, W21, 0x1

ISIL:
	001 Move [X0+8], S0
	002 Move [X0+16], S0
	003 Return 

Method: TMPro.TMP_Offset get_zero()

Disassembly:
	0x03ADCABC BL 0x3C40C8C
	0x03ADCAC0 CMP W21, W0
	0x03ADCAC4 B.LT 0x3ADCA70
	0x03ADCAC8 LDP X20, X19, [X31 + 0x20]
	0x03ADCACC LDP X22, X21, [X31 + 0x10]
	0x03ADCAD0 LDP X30, X23, [X31], #0x30
	0x03ADCAD4 RET
	0x03ADCAD8 BL 0x1C16F20
	0x03ADCADC STP X30, X25, [X31 - 0x40]!
	0x03ADCAE0 STP X24, X23, [X31 + 0x10]
	0x03ADCAE4 STP X22, X21, [X31 + 0x20]
	0x03ADCAE8 STP X20, X19, [X31 + 0x30]
	0x03ADCAEC ADRP X19, 0x906000
	0x03ADCAF0 ADRP X24, 0x67C000
	0x03ADCAF4 LDRB W8, [X19 + 0x567]
	0x03ADCAF8 LDR X24, [X24 + 0x8D8]
	0x03ADCAFC MOV X22, X0
	0x03ADCB00 TBNZ X8, 0x0, 0x3ADCB60
	0x03ADCB04 ADRP X0, 0x67C000
	0x03ADCB08 LDR X0, [X0 + 0x8E0]
	0x03ADCB0C BL 0x1C16CF4
	0x03ADCB10 ADRP X0, 0x67C000
	0x03ADCB14 LDR X0, [X0 + 0x8E8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x907000
	005 Move X19, 0x67D000
	006 Move W8, [X20+1359]
	007 Move X19, [X19+848]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x67D000
	013 Move X0, [X0+848]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1359], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move S0, [X8]
	027 Move S1, [X8+4]
	028 Move S2, [X8+8]
	029 Move S3, [X8+12]
	030 Move X30, [X31+32]
	031 Return X0

Method: System.Void .ctor(System.Single left, System.Single right, System.Single top, System.Single bottom)

Disassembly:
	0x03ADCB18 BL 0x1C16CF4
	0x03ADCB1C ADRP X0, 0x677000
	0x03ADCB20 LDR X0, [X0 + 0xB40]

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Move [X0+8], S2
	004 Move [X0+16], S3
	005 Return 

Method: System.Void .ctor(System.Single horizontal, System.Single vertical)

Disassembly:
	0x03ADCB24 BL 0x1C16CF4
	0x03ADCB28 ADRP X0, 0x67C000
	0x03ADCB2C LDR X0, [X0 + 0x8D8]

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S0
	003 Move [X0+8], S1
	004 Move [X0+16], S1
	005 Return 

Method: System.Boolean op_Equality(TMPro.TMP_Offset lhs, TMPro.TMP_Offset rhs)

Disassembly:
	0x03ADCB30 BL 0x1C16CF4
	0x03ADCB34 ADRP X0, 0x67C000
	0x03ADCB38 LDR X0, [X0 + 0x8F0]
	0x03ADCB3C BL 0x1C16CF4
	0x03ADCB40 ADRP X0, 0x67C000
	0x03ADCB44 LDR X0, [X0 + 0x8F8]
	0x03ADCB48 BL 0x1C16CF4
	0x03ADCB4C ADRP X0, 0x67C000
	0x03ADCB50 LDR X0, [X0 + 0x900]
	0x03ADCB54 BL 0x1C16CF4

ISIL:
	001 NotImplemented "Instruction FCMP not yet implemented."
	002 Move W0, W31
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Return X0

Method: System.Boolean op_Inequality(TMPro.TMP_Offset lhs, TMPro.TMP_Offset rhs)

Disassembly:
	0x03ADCB58 MOVZ W8, 0x1
	0x03ADCB5C STRB W8, [X19 + 0x567]
	0x03ADCB60 LDR X0, [X24]
	0x03ADCB64 ADRP X21, 0x67C000
	0x03ADCB68 ADRP X19, 0x67C000
	0x03ADCB6C ADRP X20, 0x67C000
	0x03ADCB70 LDR W8, [X0 + 0xE0]
	0x03ADCB74 LDR X21, [X21 + 0x8F8]
	0x03ADCB78 LDR X19, [X19 + 0x900]
	0x03ADCB7C LDR X20, [X20 + 0x8F0]
	0x03ADCB80 CBNZ W8, 0x3ADCB8C
	0x03ADCB84 BL 0x1C16DFC
	0x03ADCB88 LDR X0, [X24]
	0x03ADCB8C LDR X8, [X0 + 0xB8]
	0x03ADCB90 LDR X0, [X21]
	0x03ADCB94 LDP S0, S1, [X8 + 0x10]
	0x03ADCB98 BL 0x3ADC6A8
	0x03ADCB9C LDR X8, [X19]
	0x03ADCBA0 MOV X19, X0
	0x03ADCBA4 MOV X1, X19
	0x03ADCBA8 MOV X0, X8
	0x03ADCBAC BL 0x3ADC750
	0x03ADCBB0 LDR X8, [X20]
	0x03ADCBB4 MOV X23, X0
	0x03ADCBB8 MOV X1, X23
	0x03ADCBBC MOV X0, X8
	0x03ADCBC0 BL 0x3ADC750
	0x03ADCBC4 CBZ X19, 0x3ADCDA4
	0x03ADCBC8 ADRP X25, 0x67C000
	0x03ADCBCC LDR X25, [X25 + 0x8E0]
	0x03ADCBD0 MOV X20, X0
	0x03ADCBD4 MOV X0, X19
	0x03ADCBD8 LDR X1, [X25]
	0x03ADCBDC BL 0x21E51FC
	0x03ADCBE0 CBZ X0, 0x3ADCDA4
	0x03ADCBE4 LDR X1, [X22 + 0x8]
	0x03ADCBE8 MOV X2, X31
	0x03ADCBEC MOV X21, X0
	0x03ADCBF0 BL 0x3CD3398
	0x03ADCBF4 MOVZ W1, 0x1
	0x03ADCBF8 MOV X0, X21
	0x03ADCBFC MOV X2, X31
	0x03ADCC00 BL 0x3CD364C
	0x03ADCC04 LDR X8, [X24]

ISIL:
	001 Move [X31-96], D15
	002 Move [X31-88], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X19, 0x907000
	013 Move X20, 0x67D000
	014 Move W8, [X19+1360]
	015 Move X20, [X20+848]
	016 Move V8, V7
	017 Move V13, V6
	018 Move V10, V5
	019 Move V12, V4
	020 Move V9, V3
	021 Move V15, V2
	022 Move V11, V1
	023 Move V14, V0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {33}
	028 Move X0, 0x67D000
	029 Move X0, [X0+848]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X19+1360], W8
	033 Move X0, [X20]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 Move W0, 1
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 NotImplemented "Instruction FCMP not yet implemented."
	042 NotImplemented "Instruction FCMP not yet implemented."
	043 NotImplemented "Instruction CSET not yet implemented."
	044 Move X20, [X31+80]
	045 Move X19, [X31+88]
	046 Move X30, [X31+64]
	047 Move D9, [X31+48]
	048 Move D8, [X31+56]
	049 Move D11, [X31+32]
	050 Move D10, [X31+40]
	051 Move D13, [X31+16]
	052 Move D12, [X31+24]
	053 Move D15, [X31+96]
	054 Move D14, [X31+104]
	055 Return X0

Method: TMPro.TMP_Offset op_Multiply(TMPro.TMP_Offset a, System.Single b)

Disassembly:
	0x03ADCC08 LDR X9, [X21]
	0x03ADCC0C MOV X0, X21
	0x03ADCC10 LDR X8, [X8 + 0xB8]
	0x03ADCC14 LDR X10, [X9 + 0x2A8]
	0x03ADCC18 LDR X1, [X9 + 0x2B0]

ISIL:
	001 Multiply S0, S0, S4
	002 Multiply S1, S1, S4
	003 Multiply S2, S2, S4
	004 Multiply S3, S3, S4
	005 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03ADCC1C LDP S0, S1, [X8 + 0x18]
	0x03ADCC20 LDP S2, S3, [X8 + 0x20]
	0x03ADCC24 BLR X10
	0x03ADCC28 CBZ X20, 0x3ADCDA4
	0x03ADCC2C LDR X1, [X25]
	0x03ADCC30 MOV X0, X20
	0x03ADCC34 BL 0x21E51FC
	0x03ADCC38 CBZ X0, 0x3ADCDA4
	0x03ADCC3C LDR X1, [X22]
	0x03ADCC40 MOV X2, X31
	0x03ADCC44 MOV X21, X0
	0x03ADCC48 BL 0x3CD3398
	0x03ADCC4C MOVZ W1, 0x1
	0x03ADCC50 MOV X0, X21
	0x03ADCC54 MOV X2, X31
	0x03ADCC58 BL 0x3CD364C
	0x03ADCC5C LDR X8, [X24]
	0x03ADCC60 LDR X9, [X21]
	0x03ADCC64 MOV X0, X21
	0x03ADCC68 LDR X8, [X8 + 0xB8]
	0x03ADCC6C LDR X10, [X9 + 0x2A8]
	0x03ADCC70 LDR X1, [X9 + 0x2B0]
	0x03ADCC74 LDP S0, S1, [X8 + 0x18]
	0x03ADCC78 LDP S2, S3, [X8 + 0x20]
	0x03ADCC7C BLR X10

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x907000
	007 Move X20, 0x67D000
	008 Move W8, [X21+1361]
	009 Move X20, [X20+848]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x67D000
	016 Move X0, [X0+848]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1361], W8
	020 Move V0, [X19]
	021 Move X0, [X20]
	022 Add X1, X31, 0
	023 Move [X31], V0
	024 Call 0x1C17E04
	025 Move X1, X31
	026 Call ValueType.GetHashCode, X0
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X30, [X31+16]
	030 Move X21, [X31+24]
	031 Add X31, X31, 48
	032 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03ADCC80 CBZ X23, 0x3ADCDA4
	0x03ADCC84 ADRP X24, 0x677000
	0x03ADCC88 LDR X24, [X24 + 0xB40]
	0x03ADCC8C MOV X0, X23
	0x03ADCC90 LDR X1, [X24]
	0x03ADCC94 BL 0x21E52E4
	0x03ADCC98 CBZ X0, 0x3ADCDA4
	0x03ADCC9C FMOV S0, -20
	0x03ADCCA0 FMOV S1, -20
	0x03ADCCA4 MOV X1, X31
	0x03ADCCA8 MOV X22, X0
	0x03ADCCAC BL 0x3C3E99C
	0x03ADCCB0 ADRP X23, 0x8FD000
	0x03ADCCB4 LDRB W8, [X23 + 0x78F]
	0x03ADCCB8 CBNZ W8, 0x3ADCCD0
	0x03ADCCBC ADRP X0, 0x61F000
	0x03ADCCC0 LDR X0, [X0 + 0xF08]
	0x03ADCCC4 BL 0x1C16CF4
	0x03ADCCC8 MOVZ W8, 0x1
	0x03ADCCCC STRB W8, [X23 + 0x78F]
	0x03ADCCD0 ADRP X23, 0x61F000
	0x03ADCCD4 LDR X23, [X23 + 0xF08]
	0x03ADCCD8 MOV X0, X22
	0x03ADCCDC MOV X1, X31
	0x03ADCCE0 LDR X8, [X23]
	0x03ADCCE4 LDR X8, [X8 + 0xB8]
	0x03ADCCE8 LDP S0, S1, [X8]
	0x03ADCCEC BL 0x3C3E648
	0x03ADCCF0 ADRP X25, 0x905000
	0x03ADCCF4 LDRB W8, [X25 + 0xA48]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0x907000
	008 Move X21, 0x67D000
	009 Move W8, [X22+1362]
	010 Move X21, [X21+848]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x67D000
	018 Move X0, [X0+848]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+1362], W8
	022 Move V0, [X20]
	023 Move X0, [X21]
	024 Add X1, X31, 0
	025 Move [X31], V0
	026 Call 0x1C17E04
	027 Move X1, X19
	028 Move X2, X31
	029 Call ValueType.Equals, X0, X1
	030 Move X20, [X31+48]
	031 Move X19, [X31+56]
	032 Move X22, [X31+32]
	033 Move X21, [X31+40]
	034 Move X30, [X31+16]
	035 And W0, W0, 1
	036 Add X31, X31, 64
	037 Return X0

Method: System.Boolean Equals(TMPro.TMP_Offset other)

Disassembly:
	0x03ADCCF8 CBNZ W8, 0x3ADCD10
	0x03ADCCFC ADRP X0, 0x61F000
	0x03ADCD00 LDR X0, [X0 + 0xF08]
	0x03ADCD04 BL 0x1C16CF4
	0x03ADCD08 MOVZ W8, 0x1
	0x03ADCD0C STRB W8, [X25 + 0xA48]
	0x03ADCD10 LDR X8, [X23]
	0x03ADCD14 MOV X0, X22
	0x03ADCD18 MOV X1, X31
	0x03ADCD1C LDR X8, [X8 + 0xB8]
	0x03ADCD20 LDP S0, S1, [X8 + 0x8]
	0x03ADCD24 BL 0x3C3E764
	0x03ADCD28 LDR X1, [X24]
	0x03ADCD2C MOV X0, X20
	0x03ADCD30 BL 0x21E52E4
	0x03ADCD34 CBZ X0, 0x3ADCDA4
	0x03ADCD38 ADRP X22, 0x67C000
	0x03ADCD3C LDR X22, [X22 + 0x8E8]
	0x03ADCD40 FMOV S0, 20
	0x03ADCD44 FMOV S1, 20
	0x03ADCD48 MOV X1, X31
	0x03ADCD4C MOV X20, X0
	0x03ADCD50 BL 0x3C3E99C
	0x03ADCD54 LDR X1, [X22]
	0x03ADCD58 MOV X0, X19
	0x03ADCD5C BL 0x21E51FC
	0x03ADCD60 CBZ X0, 0x3ADCDA4
	0x03ADCD64 MOV X1, X20
	0x03ADCD68 MOV X2, X31
	0x03ADCD6C MOV X22, X0
	0x03ADCD70 BL 0x3E3B1E0
	0x03ADCD74 MOV X0, X22
	0x03ADCD78 MOV X1, X21
	0x03ADCD7C MOV X2, X31
	0x03ADCD80 BL 0x3E40EB4
	0x03ADCD84 MOV X0, X22
	0x03ADCD88 BL 0x3ADC998
	0x03ADCD8C MOV X0, X19
	0x03ADCD90 LDP X20, X19, [X31 + 0x30]
	0x03ADCD94 LDP X22, X21, [X31 + 0x20]
	0x03ADCD98 LDP X24, X23, [X31 + 0x10]
	0x03ADCD9C LDP X30, X25, [X31], #0x40

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], D11
	003 Move [X31+40], D10
	004 Move [X31+48], D9
	005 Move [X31+56], D8
	006 Move [X31+64], X30
	007 Move [X31+72], X21
	008 Move [X31+80], X20
	009 Move [X31+88], X19
	010 Move X21, 0x907000
	011 Move X20, 0x67D000
	012 Move W8, [X21+1363]
	013 Move X20, [X20+848]
	014 Move V8, V3
	015 Move V9, V2
	016 Move V10, V1
	017 Move V11, V0
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x67D000
	024 Move X0, [X0+848]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+1363], W8
	028 Move V0, [X19]
	029 Move X0, [X20]
	030 Add X1, X31, 16
	031 Move [X31+1], V0
	032 Call 0x1C17E04
	033 Move X19, X0
	034 Move X0, [X20]
	035 Add X1, X31, 0
	036 Move [X31], S11
	037 Move [X31+8], S10
	038 Move [X31+8], S9
	039 Move [X31+16], S8
	040 Call 0x1C17E04
	041 Move X1, X0
	042 Move X0, X19
	043 Move X2, X31
	044 Call ValueType.Equals, X0, X1
	045 Move X20, [X31+80]
	046 Move X19, [X31+88]
	047 Move X30, [X31+64]
	048 Move X21, [X31+72]
	049 Move D9, [X31+48]
	050 Move D8, [X31+56]
	051 Move D11, [X31+32]
	052 Move D10, [X31+40]
	053 And W0, W0, 1
	054 Add X31, X31, 96
	055 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03ADCDA0 RET
	0x03ADCDA4 BL 0x1C16F20
	0x03ADCDA8 STP X30, X25, [X31 - 0x40]!
	0x03ADCDAC STP X24, X23, [X31 + 0x10]
	0x03ADCDB0 STP X22, X21, [X31 + 0x20]
	0x03ADCDB4 STP X20, X19, [X31 + 0x30]
	0x03ADCDB8 ADRP X19, 0x906000
	0x03ADCDBC ADRP X23, 0x67C000
	0x03ADCDC0 LDRB W8, [X19 + 0x568]
	0x03ADCDC4 LDR X23, [X23 + 0x8D8]
	0x03ADCDC8 MOV X20, X0
	0x03ADCDCC TBNZ X8, 0x0, 0x3ADCE44
	0x03ADCDD0 ADRP X0, 0x67C000
	0x03ADCDD4 LDR X0, [X0 + 0x908]
	0x03ADCDD8 BL 0x1C16CF4
	0x03ADCDDC ADRP X0, 0x67C000
	0x03ADCDE0 LDR X0, [X0 + 0x8E0]
	0x03ADCDE4 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x907000
	005 Move X20, 0x67D000
	006 Move W8, [X19+1364]
	007 Move X20, [X20+848]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x67D000
	013 Move X0, [X0+848]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1364], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move [X8], X31
	022 Move [X8+8], X31
	023 Move X30, [X31+32]
	024 Return 

