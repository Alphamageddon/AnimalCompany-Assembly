Type: TMPro.TMP_SpriteAsset

Method: System.String get_version()

Disassembly:
	0x03B17C58 LDR X0, [X0 + 0x628]
	0x03B17C5C BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_version(System.String value)

Disassembly:
	0x03B17C60 MOVZ W8, 0x1
	0x03B17C64 STRB W8, [X22 + 0x6BD]

ISIL:
	001 Move [X0+64], X1
	002 Return 

Method: UnityEngine.TextCore.FaceInfo get_faceInfo()

Disassembly:
	0x03B17C68 CBZ X21, 0x3B17D8C
	0x03B17C6C LDR W8, [X21 + 0x18]
	0x03B17C70 CMP W8, 0x1
	0x03B17C74 B.LT 0x3B17D60

ISIL:
	001 Add X1, X0, 72
	002 Move W2, 96
	003 Move X0, X8
	004 Call 0x3EB2AC0
	005 Return X0

Method: System.Void set_faceInfo(UnityEngine.TextCore.FaceInfo value)

Disassembly:
	0x03B17C78 ADRP X25, 0x641000
	0x03B17C7C ADRP X26, 0x5DC000
	0x03B17C80 ADRP X27, 0x641000
	0x03B17C84 ADRP X28, 0x5DE000
	0x03B17C88 LDR X25, [X25 + 0xFF0]
	0x03B17C8C LDR X26, [X26 + 0x598]

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X0, 72
	003 Move W2, 96
	004 Call 0x3EB2B30
	005 Move X30, [X31+16]
	006 Return 

Method: System.Collections.Generic.List`1<TMPro.TMP_SpriteCharacter> get_spriteCharacterTable()

Disassembly:
	0x03B17BEC BL 0x1C16F20
	0x03B17BF0 STR X30, [X31 - 0x60]!
	0x03B17BF4 STP X28, X27, [X31 + 0x10]
	0x03B17BF8 STP X26, X25, [X31 + 0x20]
	0x03B17BFC STP X24, X23, [X31 + 0x30]
	0x03B17C00 STP X22, X21, [X31 + 0x40]
	0x03B17C04 STP X20, X19, [X31 + 0x50]
	0x03B17C08 ADRP X22, 0x8CB000
	0x03B17C0C LDRB W8, [X22 + 0x6BD]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+56]
	004 Move X19, X0
	005 Compare X8, 0
	006 JumpIfNotEqual {9}
	007 Move X0, X19
	008 Call TMP_SpriteAsset.UpdateLookupTables, X0
	009 Move X0, [X19+176]
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0

Method: System.Void set_spriteCharacterTable(System.Collections.Generic.List`1<TMPro.TMP_SpriteCharacter> value)

Disassembly:
	0x03B1818C TBNZ X8, 0x0, 0x3B181D4
	0x03B18190 ADRP X0, 0x5DD000

ISIL:
	001 Move [X0+176], X1
	002 Return 

Method: System.Collections.Generic.Dictionary`2<System.UInt32, TMPro.TMP_SpriteCharacter> get_spriteCharacterLookupTable()

Disassembly:
	0x03B18194 LDR X0, [X0 + 0x9D8]
	0x03B18198 BL 0x1C16CF4
	0x03B1819C ADRP X0, 0x640000
	0x03B181A0 LDR X0, [X0 + 0xFE8]
	0x03B181A4 BL 0x1C16CF4
	0x03B181A8 ADRP X0, 0x640000
	0x03B181AC LDR X0, [X0 + 0xFF0]
	0x03B181B0 BL 0x1C16CF4
	0x03B181B4 ADRP X0, 0x5DB000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+184]
	005 Compare X0, 0
	006 JumpIfNotEqual {10}
	007 Move X0, X19
	008 Call TMP_SpriteAsset.UpdateLookupTables, X0
	009 Move X0, [X19+184]
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0

Method: System.Void set_spriteCharacterLookupTable(System.Collections.Generic.Dictionary`2<System.UInt32, TMPro.TMP_SpriteCharacter> value)

Disassembly:
	0x03B181B8 LDR X0, [X0 + 0x598]
	0x03B181BC BL 0x1C16CF4

ISIL:
	001 Move [X0+184], X1
	002 Return 

Method: System.Collections.Generic.List`1<TMPro.TMP_SpriteGlyph> get_spriteGlyphTable()

Disassembly:
	0x03B181C0 ADRP X0, 0x640000
	0x03B181C4 LDR X0, [X0 + 0x628]

ISIL:
	001 Move X0, [X0+192]
	002 Return X0

Method: System.Void set_spriteGlyphTable(System.Collections.Generic.List`1<TMPro.TMP_SpriteGlyph> value)

Disassembly:
	0x03B181C8 BL 0x1C16CF4
	0x03B181CC MOVZ W8, 0x1

ISIL:
	001 Move [X0+192], X1
	002 Return 

Method: System.Void Awake()

Disassembly:
	0x03B181D0 STRB W8, [X22 + 0x6C0]
	0x03B181D4 CBZ X21, 0x3B182F8
	0x03B181D8 LDR W8, [X21 + 0x18]
	0x03B181DC CMP W8, 0x1
	0x03B181E0 B.LT 0x3B182CC
	0x03B181E4 ADRP X25, 0x640000
	0x03B181E8 ADRP X26, 0x5DB000
	0x03B181EC ADRP X27, 0x640000
	0x03B181F0 ADRP X28, 0x5DD000
	0x03B181F4 LDR X25, [X25 + 0xFF0]
	0x03B181F8 LDR X26, [X26 + 0x598]
	0x03B181FC LDR X27, [X27 + 0x628]
	0x03B18200 LDR X28, [X28 + 0x9D8]
	0x03B18204 MOV W22, W31
	0x03B18208 AND W23, W23, 0x1
	0x03B1820C LDR X2, [X25]
	0x03B18210 MOV X0, X21
	0x03B18214 MOV W1, W22
	0x03B18218 BL 0x301BCCC
	0x03B1821C LDR X8, [X26]
	0x03B18220 MOV X24, X0
	0x03B18224 LDR W9, [X8 + 0xE0]
	0x03B18228 CBNZ W9, 0x3B18234
	0x03B1822C MOV X0, X8
	0x03B18230 BL 0x1C16DFC
	0x03B18234 MOV X0, X24
	0x03B18238 MOV X1, X31
	0x03B1823C MOV X2, X31
	0x03B18240 BL 0x3C3883C
	0x03B18244 TBNZ X0, 0x0, 0x3B182BC
	0x03B18248 CBZ X24, 0x3B182F8
	0x03B1824C MOV X0, X24
	0x03B18250 MOV X1, X31
	0x03B18254 BL 0x3ADB8A4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8CB000
	006 Move X20, 0x5DC000
	007 Move W8, [X21+1718]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5DC000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1718], W8
	019 Move X0, [X20]
	020 Move X20, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {45}
	033 Move X0, [X19+64]
	034 Move X1, X31
	035 Call String.IsNullOrEmpty, X0
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {45}
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Return 

Method: UnityEngine.Material GetDefaultSpriteMaterial()

Disassembly:
	0x03B186E8 ADRP X21, 0x641000
	0x03B186EC LDRB W8, [X23 + 0x6C5]
	0x03B186F0 LDR X24, [X24 + 0x990]
	0x03B186F4 LDR X20, [X20 + 0x998]
	0x03B186F8 LDR X22, [X22 + 0x9A0]
	0x03B186FC LDR X21, [X21 + 0x9A8]
	0x03B18700 MOV X19, X0
	0x03B18704 TBNZ X8, 0x0, 0x3B18740
	0x03B18708 ADRP X0, 0x641000
	0x03B1870C LDR X0, [X0 + 0x9A8]
	0x03B18710 BL 0x1C16CF4
	0x03B18714 ADRP X0, 0x641000
	0x03B18718 LDR X0, [X0 + 0x998]
	0x03B1871C BL 0x1C16CF4
	0x03B18720 ADRP X0, 0x641000
	0x03B18724 LDR X0, [X0 + 0x9A0]
	0x03B18728 BL 0x1C16CF4
	0x03B1872C ADRP X0, 0x641000
	0x03B18730 LDR X0, [X0 + 0x990]
	0x03B18734 BL 0x1C16CF4
	0x03B18738 MOVZ W8, 0x1
	0x03B1873C STRB W8, [X23 + 0x6C5]
	0x03B18740 LDR X0, [X24]
	0x03B18744 BL 0x1C16F10
	0x03B18748 LDR X1, [X20]
	0x03B1874C MOV X20, X0
	0x03B18750 BL 0x301B7C4
	0x03B18754 STR X20, [X19 + 0xB0]
	0x03B18758 LDR X0, [X22]
	0x03B1875C BL 0x1C16F10
	0x03B18760 LDR X1, [X21]
	0x03B18764 MOV X20, X0
	0x03B18768 BL 0x301B7C4
	0x03B1876C STR X20, [X19 + 0xC0]
	0x03B18770 MOV X0, X19
	0x03B18774 LDP X20, X19, [X31 + 0x30]
	0x03B18778 LDP X22, X21, [X31 + 0x20]
	0x03B1877C LDP X24, X23, [X31 + 0x10]
	0x03B18780 MOV X1, X31
	0x03B18784 LDR X30, [X31], #0x40
	0x03B18788 B 0x3ADB8CC
	0x03B1878C STR X30, [X31 - 0x20]!
	0x03B18790 STP X20, X19, [X31 + 0x10]
	0x03B18794 ADRP X19, 0x8CA000
	0x03B18798 ADRP X20, 0x641000
	0x03B1879C LDRB W8, [X19 + 0x6C6]
	0x03B187A0 LDR X20, [X20 + 0x968]
	0x03B187A4 TBNZ X8, 0x0, 0x3B187BC
	0x03B187A8 ADRP X0, 0x641000
	0x03B187AC LDR X0, [X0 + 0x968]
	0x03B187B0 BL 0x1C16CF4
	0x03B187B4 MOVZ W8, 0x1
	0x03B187B8 STRB W8, [X19 + 0x6C6]
	0x03B187BC LDR X0, [X20]
	0x03B187C0 BL 0x1C16F10
	0x03B187C4 MOV X1, X31
	0x03B187C8 MOV X19, X0
	0x03B187CC BL 0x33BDD8C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x8CB000
	007 Move X22, 0x641000
	008 Move W8, [X20+1719]
	009 Move X22, [X22+824]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x5E0000
	016 Move X0, [X0+3232]
	017 Call 0x1C17CF4
	018 Move X0, 0x641000
	019 Move X0, [X0+824]
	020 Call 0x1C17CF4
	021 Move X0, 0x642000
	022 Move X0, [X0+2368]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+1719], W8
	026 Move X0, [X22]
	027 Move X21, 0x642000
	028 Move X20, 0x5E0000
	029 Move W8, [X0+224]
	030 Move X21, [X21+2368]
	031 Move X20, [X20+3232]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Call ShaderUtilities.GetShaderPropertyIDs
	036 Move X0, [X21]
	037 Move X1, X31
	038 Call Shader.Find, X0
	039 Move X8, [X20]
	040 Move X21, X0
	041 Move X0, X8
	042 Call 0x1C17F10
	043 Move X1, X21
	044 Move X2, X31
	045 Move X20, X0
	046 Call Material..ctor, X0, X1
	047 Compare X20, 0
	048 JumpIfEqual {67}
	049 Move X8, [X22]
	050 Move X2, [X19+168]
	051 Move X0, X20
	052 Move X3, X31
	053 Move X8, [X8+184]
	054 Move W1, [X8]
	055 Call Material.SetTexture, X0, X1, X2
	056 Move W1, 1
	057 Move X0, X20
	058 Move X2, X31
	059 Call Object.set_hideFlags, X0, X1
	060 Move X0, X20
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X22, [X31+16]
	064 Move X21, [X31+24]
	065 Move X30, [X31+48]
	066 Return X0
	067 Call 0x1C17F20

Method: System.Void UpdateLookupTables()

Disassembly:
	0x03B17C90 LDR X27, [X27 + 0x628]
	0x03B17C94 LDR X28, [X28 + 0x9D8]
	0x03B17C98 MOV W22, W31
	0x03B17C9C AND W23, W23, 0x1
	0x03B17CA0 LDR X2, [X25]
	0x03B17CA4 MOV X0, X21
	0x03B17CA8 MOV W1, W22
	0x03B17CAC BL 0x301BCCC
	0x03B17CB0 LDR X8, [X26]
	0x03B17CB4 MOV X24, X0
	0x03B17CB8 LDR W9, [X8 + 0xE0]
	0x03B17CBC CBNZ W9, 0x3B17CC8
	0x03B17CC0 MOV X0, X8
	0x03B17CC4 BL 0x1C16DFC
	0x03B17CC8 MOV X0, X24
	0x03B17CCC MOV X1, X31
	0x03B17CD0 MOV X2, X31
	0x03B17CD4 BL 0x3C3883C
	0x03B17CD8 TBNZ X0, 0x0, 0x3B17D50
	0x03B17CDC CBZ X24, 0x3B17D8C
	0x03B17CE0 MOV X0, X24
	0x03B17CE4 MOV X1, X31
	0x03B17CE8 BL 0x3C385F8
	0x03B17CEC LDR X8, [X27]
	0x03B17CF0 LDR X8, [X8 + 0xB8]
	0x03B17CF4 LDR X8, [X8]
	0x03B17CF8 CBZ X8, 0x3B17D8C
	0x03B17CFC LDR X2, [X28]
	0x03B17D00 MOV W1, W0
	0x03B17D04 MOV X0, X8
	0x03B17D08 BL 0x2DAB03C
	0x03B17D0C TBZ X0, 0x0, 0x3B17D50
	0x03B17D10 MOV X0, X24
	0x03B17D14 MOV W1, W20
	0x03B17D18 MOV W2, W23
	0x03B17D1C MOV X3, X19
	0x03B17D20 BL 0x3B17D90
	0x03B17D24 LDR X8, [X26]
	0x03B17D28 MOV X24, X0
	0x03B17D2C LDR W9, [X8 + 0xE0]
	0x03B17D30 CBNZ W9, 0x3B17D3C
	0x03B17D34 MOV X0, X8
	0x03B17D38 BL 0x1C16DFC
	0x03B17D3C MOV X0, X24
	0x03B17D40 MOV X1, X31
	0x03B17D44 MOV X2, X31
	0x03B17D48 BL 0x3C354F8
	0x03B17D4C TBNZ X0, 0x0, 0x3B17D6C
	0x03B17D50 LDR W8, [X21 + 0x18]
	0x03B17D54 ADD W22, W22, 0x1
	0x03B17D58 CMP W22, W8
	0x03B17D5C B.LT 0x3B17CA0
	0x03B17D60 MOV X24, X31
	0x03B17D64 MOVN W8, 0x0
	0x03B17D68 STR W8, [X19]
	0x03B17D6C MOV X0, X24
	0x03B17D70 LDP X20, X19, [X31 + 0x50]
	0x03B17D74 LDP X22, X21, [X31 + 0x40]
	0x03B17D78 LDP X24, X23, [X31 + 0x30]
	0x03B17D7C LDP X26, X25, [X31 + 0x20]
	0x03B17D80 LDP X28, X27, [X31 + 0x10]
	0x03B17D84 LDR X30, [X31], #0x60
	0x03B17D88 RET
	0x03B17D8C BL 0x1C16F20
	0x03B17D90 STP X30, X23, [X31 - 0x30]!
	0x03B17D94 STP X22, X21, [X31 + 0x10]
	0x03B17D98 STP X20, X19, [X31 + 0x20]
	0x03B17D9C ADRP X23, 0x8CB000
	0x03B17DA0 LDRB W8, [X23 + 0x6BE]
	0x03B17DA4 MOV X19, X3
	0x03B17DA8 MOV W22, W2
	0x03B17DAC MOV W20, W1
	0x03B17DB0 MOV X21, X0
	0x03B17DB4 TBNZ X8, 0x0, 0x3B17DCC
	0x03B17DB8 ADRP X0, 0x641000
	0x03B17DBC LDR X0, [X0 + 0xFE8]
	0x03B17DC0 BL 0x1C16CF4
	0x03B17DC4 MOVZ W8, 0x1
	0x03B17DC8 STRB W8, [X23 + 0x6BE]
	0x03B17DCC CBZ X21, 0x3B17E3C
	0x03B17DD0 MOV X0, X21
	0x03B17DD4 MOV W1, W20
	0x03B17DD8 BL 0x3B17858
	0x03B17DDC ADDS W31, W0, 0x1
	0x03B17DE0 STR W0, [X19]
	0x03B17DE4 B.NE 0x3B17E28
	0x03B17DE8 TBZ X22, 0x0, 0x3B17E1C
	0x03B17DEC LDR X0, [X21 + 0xD8]
	0x03B17DF0 CBZ X0, 0x3B17E1C
	0x03B17DF4 LDR W8, [X0 + 0x18]
	0x03B17DF8 CMP W8, 0x1
	0x03B17DFC B.LT 0x3B17E1C
	0x03B17E00 MOV W1, W20
	0x03B17E04 MOV X3, X19
	0x03B17E08 LDP X20, X19, [X31 + 0x20]
	0x03B17E0C LDP X22, X21, [X31 + 0x10]
	0x03B17E10 MOVZ W2, 0x1
	0x03B17E14 LDP X30, X23, [X31], #0x30
	0x03B17E18 B 0x3B17BF0
	0x03B17E1C MOV X21, X31
	0x03B17E20 MOVN W8, 0x0
	0x03B17E24 STR W8, [X19]
	0x03B17E28 MOV X0, X21
	0x03B17E2C LDP X20, X19, [X31 + 0x20]
	0x03B17E30 LDP X22, X21, [X31 + 0x10]
	0x03B17E34 LDP X30, X23, [X31], #0x30
	0x03B17E38 RET
	0x03B17E3C BL 0x1C16F20
	0x03B17E40 STP X30, X27, [X31 - 0x50]!
	0x03B17E44 STP X26, X25, [X31 + 0x10]
	0x03B17E48 STP X24, X23, [X31 + 0x20]
	0x03B17E4C STP X22, X21, [X31 + 0x30]
	0x03B17E50 STP X20, X19, [X31 + 0x40]
	0x03B17E54 ADRP X23, 0x8CB000
	0x03B17E58 ADRP X25, 0x5DC000
	0x03B17E5C LDRB W8, [X23 + 0x6BF]
	0x03B17E60 LDR X25, [X25 + 0x598]
	0x03B17E64 MOV X19, X3
	0x03B17E68 MOV W21, W2
	0x03B17E6C MOV W22, W1
	0x03B17E70 MOV X20, X0
	0x03B17E74 TBNZ X8, 0x0, 0x3B17ED4
	0x03B17E78 ADRP X0, 0x5DE000
	0x03B17E7C LDR X0, [X0 + 0x9D8]
	0x03B17E80 BL 0x1C16CF4
	0x03B17E84 ADRP X0, 0x5E3000
	0x03B17E88 LDR X0, [X0 + 0x678]
	0x03B17E8C BL 0x1C16CF4
	0x03B17E90 ADRP X0, 0x5E3000
	0x03B17E94 LDR X0, [X0 + 0x688]
	0x03B17E98 BL 0x1C16CF4
	0x03B17E9C ADRP X0, 0x5DD000
	0x03B17EA0 LDR X0, [X0 + 0xE08]
	0x03B17EA4 BL 0x1C16CF4
	0x03B17EA8 ADRP X0, 0x641000
	0x03B17EAC LDR X0, [X0 + 0xFE8]
	0x03B17EB0 BL 0x1C16CF4
	0x03B17EB4 ADRP X0, 0x5DC000
	0x03B17EB8 LDR X0, [X0 + 0x598]
	0x03B17EBC BL 0x1C16CF4
	0x03B17EC0 ADRP X0, 0x641000
	0x03B17EC4 LDR X0, [X0 + 0x628]
	0x03B17EC8 BL 0x1C16CF4
	0x03B17ECC MOVZ W8, 0x1
	0x03B17ED0 STRB W8, [X23 + 0x6BF]
	0x03B17ED4 LDR X0, [X25]
	0x03B17ED8 LDR W8, [X0 + 0xE0]
	0x03B17EDC CBNZ W8, 0x3B17EE4
	0x03B17EE0 BL 0x1C16DFC
	0x03B17EE4 MOV X0, X20
	0x03B17EE8 MOV X1, X31
	0x03B17EEC MOV X2, X31
	0x03B17EF0 BL 0x3C3883C
	0x03B17EF4 TBZ X0, 0x0, 0x3B17F08
	0x03B17EF8 MOV X20, X31
	0x03B17EFC MOVN W8, 0x0
	0x03B17F00 STR W8, [X19]
	0x03B17F04 B 0x3B1813C
	0x03B17F08 CBZ X20, 0x3B18158
	0x03B17F0C MOV X0, X20
	0x03B17F10 MOV W1, W22
	0x03B17F14 BL 0x3B177D0
	0x03B17F18 ADDS W31, W0, 0x1
	0x03B17F1C STR W0, [X19]
	0x03B17F20 B.NE 0x3B1813C
	0x03B17F24 ADRP X26, 0x641000
	0x03B17F28 LDR X26, [X26 + 0x628]
	0x03B17F2C LDR X8, [X26]
	0x03B17F30 LDR X8, [X8 + 0xB8]
	0x03B17F34 LDR X0, [X8]
	0x03B17F38 CBZ X0, 0x3B17F50
	0x03B17F3C ADRP X8, 0x5E3000
	0x03B17F40 LDR X8, [X8 + 0x678]
	0x03B17F44 LDR X1, [X8]
	0x03B17F48 BL 0x2DAA53C
	0x03B17F4C B 0x3B17F80
	0x03B17F50 ADRP X8, 0x5DD000
	0x03B17F54 LDR X8, [X8 + 0xE08]
	0x03B17F58 LDR X0, [X8]
	0x03B17F5C BL 0x1C16F10
	0x03B17F60 ADRP X8, 0x5E3000
	0x03B17F64 LDR X8, [X8 + 0x688]
	0x03B17F68 MOV X23, X0
	0x03B17F6C LDR X1, [X8]
	0x03B17F70 BL 0x2DA9EF4
	0x03B17F74 LDR X8, [X26]
	0x03B17F78 LDR X8, [X8 + 0xB8]
	0x03B17F7C STR X23, [X8]
	0x03B17F80 MOV X0, X20
	0x03B17F84 MOV X1, X31
	0x03B17F88 BL 0x3ADB8A4
	0x03B17F8C LDR X8, [X26]
	0x03B17F90 LDR X8, [X8 + 0xB8]
	0x03B17F94 LDR X8, [X8]
	0x03B17F98 CBZ X8, 0x3B18158
	0x03B17F9C ADRP X27, 0x5DE000
	0x03B17FA0 LDR X27, [X27 + 0x9D8]
	0x03B17FA4 MOV W23, W0
	0x03B17FA8 MOV X0, X8
	0x03B17FAC MOV W1, W23
	0x03B17FB0 LDR X2, [X27]
	0x03B17FB4 BL 0x2DAB03C
	0x03B17FB8 TBZ X21, 0x0, 0x3B18048
	0x03B17FBC LDR X0, [X20 + 0xD8]
	0x03B17FC0 CBZ X0, 0x3B17FEC
	0x03B17FC4 LDR W8, [X0 + 0x18]
	0x03B17FC8 CMP W8, 0x1
	0x03B17FCC B.LT 0x3B17FEC
	0x03B17FD0 MOVZ W2, 0x1
	0x03B17FD4 MOV W1, W22
	0x03B17FD8 MOV X3, X19
	0x03B17FDC BL 0x3B1815C
	0x03B17FE0 LDR W8, [X19]
	0x03B17FE4 ADDS W31, W8, 0x1
	0x03B17FE8 B.NE 0x3B18138
	0x03B17FEC BL 0x3B13C88
	0x03B17FF0 CBZ X0, 0x3B18158
	0x03B17FF4 LDR X8, [X25]
	0x03B17FF8 LDR X24, [X0 + 0x68]
	0x03B17FFC LDR W9, [X8 + 0xE0]
	0x03B18000 CBNZ W9, 0x3B1800C
	0x03B18004 MOV X0, X8
	0x03B18008 BL 0x1C16DFC
	0x03B1800C MOV X0, X24
	0x03B18010 MOV X1, X31
	0x03B18014 MOV X2, X31
	0x03B18018 BL 0x3C354F8
	0x03B1801C TBZ X0, 0x0, 0x3B18048
	0x03B18020 BL 0x3B13C88
	0x03B18024 CBZ X0, 0x3B18158
	0x03B18028 LDR X0, [X0 + 0x68]
	0x03B1802C MOVZ W2, 0x1
	0x03B18030 MOV W1, W22
	0x03B18034 MOV X3, X19
	0x03B18038 BL 0x3B182FC
	0x03B1803C LDR W8, [X19]
	0x03B18040 ADDS W31, W8, 0x1
	0x03B18044 B.NE 0x3B18138
	0x03B18048 LDR X8, [X26]
	0x03B1804C LDR X8, [X8 + 0xB8]
	0x03B18050 LDR X0, [X8]
	0x03B18054 CBZ X0, 0x3B18158
	0x03B18058 ADRP X8, 0x5E2000
	0x03B1805C LDR X8, [X8 + 0x678]
	0x03B18060 LDR X1, [X8]
	0x03B18064 BL 0x2DAA53C
	0x03B18068 BL 0x3B13C88
	0x03B1806C CBZ X0, 0x3B18158
	0x03B18070 LDR W22, [X0 + 0x7C]
	0x03B18074 MOV X0, X20
	0x03B18078 MOV W1, W22
	0x03B1807C BL 0x3B17858
	0x03B18080 ADDS W31, W0, 0x1
	0x03B18084 STR W0, [X19]
	0x03B18088 B.NE 0x3B1813C
	0x03B1808C LDR X8, [X26]
	0x03B18090 LDR X8, [X8 + 0xB8]
	0x03B18094 LDR X0, [X8]
	0x03B18098 CBZ X0, 0x3B18158
	0x03B1809C LDR X2, [X27]
	0x03B180A0 MOV W1, W23
	0x03B180A4 BL 0x2DAB03C
	0x03B180A8 TBZ X21, 0x0, 0x3B17EF8
	0x03B180AC LDR X0, [X20 + 0xD8]
	0x03B180B0 CBZ X0, 0x3B180DC
	0x03B180B4 LDR W8, [X0 + 0x18]
	0x03B180B8 CMP W8, 0x1
	0x03B180BC B.LT 0x3B180DC
	0x03B180C0 MOVZ W2, 0x1
	0x03B180C4 MOV W1, W22
	0x03B180C8 MOV X3, X19
	0x03B180CC BL 0x3B17BF0
	0x03B180D0 LDR W8, [X19]
	0x03B180D4 ADDS W31, W8, 0x1
	0x03B180D8 B.NE 0x3B18138
	0x03B180DC BL 0x3B13C88
	0x03B180E0 CBZ X0, 0x3B18158
	0x03B180E4 LDR X8, [X25]
	0x03B180E8 LDR X20, [X0 + 0x68]
	0x03B180EC LDR W9, [X8 + 0xE0]
	0x03B180F0 CBNZ W9, 0x3B180FC
	0x03B180F4 MOV X0, X8
	0x03B180F8 BL 0x1C16DFC
	0x03B180FC MOV X0, X20
	0x03B18100 MOV X1, X31
	0x03B18104 MOV X2, X31
	0x03B18108 BL 0x3C354F8
	0x03B1810C TBZ X0, 0x0, 0x3B17EF8
	0x03B18110 BL 0x3B13C88
	0x03B18114 CBZ X0, 0x3B18158
	0x03B18118 LDR X0, [X0 + 0x68]
	0x03B1811C MOVZ W2, 0x1
	0x03B18120 MOV W1, W22
	0x03B18124 MOV X3, X19
	0x03B18128 BL 0x3B17D90
	0x03B1812C LDR W8, [X19]
	0x03B18130 ADDS W31, W8, 0x1
	0x03B18134 B.EQ 0x3B17EF8
	0x03B18138 MOV X20, X0
	0x03B1813C MOV X0, X20
	0x03B18140 LDP X20, X19, [X31 + 0x40]
	0x03B18144 LDP X22, X21, [X31 + 0x30]
	0x03B18148 LDP X24, X23, [X31 + 0x20]
	0x03B1814C LDP X26, X25, [X31 + 0x10]
	0x03B18150 LDP X30, X27, [X31], #0x50
	0x03B18154 RET
	0x03B18158 BL 0x1C16F20
	0x03B1815C STR X30, [X31 - 0x60]!
	0x03B18160 STP X28, X27, [X31 + 0x10]
	0x03B18164 STP X26, X25, [X31 + 0x20]
	0x03B18168 STP X24, X23, [X31 + 0x30]
	0x03B1816C STP X22, X21, [X31 + 0x40]
	0x03B18170 STP X20, X19, [X31 + 0x50]
	0x03B18174 ADRP X22, 0x8CA000
	0x03B18178 LDRB W8, [X22 + 0x6C0]
	0x03B1817C MOV X19, X3
	0x03B18180 MOV W23, W2
	0x03B18184 MOV W20, W1
	0x03B18188 MOV X21, X0

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X21, 0x8CC000
	014 Move X20, 0x5DD000
	015 Move W8, [X21+1720]
	016 Move X20, [X20+1432]
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {102}
	022 Move X0, 0x643000
	023 Move X0, [X0+2152]
	024 Call 0x1C17CF4
	025 Move X0, 0x643000
	026 Move X0, [X0+2160]
	027 Call 0x1C17CF4
	028 Move X0, 0x5E7000
	029 Move X0, [X0+2136]
	030 Call 0x1C17CF4
	031 Move X0, 0x643000
	032 Move X0, [X0+2168]
	033 Call 0x1C17CF4
	034 Move X0, 0x607000
	035 Move X0, [X0+2256]
	036 Call 0x1C17CF4
	037 Move X0, 0x643000
	038 Move X0, [X0+2176]
	039 Call 0x1C17CF4
	040 Move X0, 0x643000
	041 Move X0, [X0+2184]
	042 Call 0x1C17CF4
	043 Move X0, 0x643000
	044 Move X0, [X0+2192]
	045 Call 0x1C17CF4
	046 Move X0, 0x638000
	047 Move X0, [X0+3336]
	048 Call 0x1C17CF4
	049 Move X0, 0x643000
	050 Move X0, [X0+2200]
	051 Call 0x1C17CF4
	052 Move X0, 0x643000
	053 Move X0, [X0+2208]
	054 Call 0x1C17CF4
	055 Move X0, 0x643000
	056 Move X0, [X0+2216]
	057 Call 0x1C17CF4
	058 Move X0, 0x643000
	059 Move X0, [X0+2224]
	060 Call 0x1C17CF4
	061 Move X0, 0x643000
	062 Move X0, [X0+2232]
	063 Call 0x1C17CF4
	064 Move X0, 0x643000
	065 Move X0, [X0+2240]
	066 Call 0x1C17CF4
	067 Move X0, 0x5E7000
	068 Move X0, [X0+2192]
	069 Call 0x1C17CF4
	070 Move X0, 0x643000
	071 Move X0, [X0+2248]
	072 Call 0x1C17CF4
	073 Move X0, 0x643000
	074 Move X0, [X0+2256]
	075 Call 0x1C17CF4
	076 Move X0, 0x643000
	077 Move X0, [X0+2264]
	078 Call 0x1C17CF4
	079 Move X0, 0x5E7000
	080 Move X0, [X0+2184]
	081 Call 0x1C17CF4
	082 Move X0, 0x643000
	083 Move X0, [X0+2272]
	084 Call 0x1C17CF4
	085 Move X0, 0x643000
	086 Move X0, [X0+552]
	087 Call 0x1C17CF4
	088 Move X0, 0x643000
	089 Move X0, [X0+2280]
	090 Call 0x1C17CF4
	091 Move X0, 0x642000
	092 Move X0, [X0+816]
	093 Call 0x1C17CF4
	094 Move X0, 0x643000
	095 Move X0, [X0+2288]
	096 Call 0x1C17CF4
	097 Move X0, 0x5DD000
	098 Move X0, [X0+1432]
	099 Call 0x1C17CF4
	100 Move W8, 1
	101 Move [X21+1720], W8
	102 Move X0, [X20]
	103 Move X20, [X19+32]
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {108}
	107 Call 0x1C17DFC
	108 Move X0, X20
	109 Move X1, X31
	110 Move X2, X31
	111 Call Object.op_Inequality, X0, X1
	112 Move TEMP, X0
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfNotEqual {125}
	116 Move X0, [X19+64]
	117 Move X1, X31
	118 Call String.IsNullOrEmpty, X0
	119 Move TEMP, X0
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfNotEqual {125}
	123 Move X0, X19
	124 Call TMP_SpriteAsset.UpgradeSpriteAsset, X0
	125 Move X0, [X19+56]
	126 Compare X0, 0
	127 JumpIfEqual {132}
	128 Move X8, 0x643000
	129 Move X8, [X8+2192]
	130 Move X1, [X8]
	131 Call Dictionary`2<UInt32, Int32>.Clear, X0
	132 Move X8, 0x643000
	133 Move X8, [X8+2256]
	134 Move X0, [X8]
	135 Call 0x1C17F10
	136 Move X8, 0x643000
	137 Move X8, [X8+2224]
	138 Move X20, X0
	139 Move X1, [X8]
	140 Call Dictionary`2<UInt32, Int32>..ctor, X0
	141 Move [X19+56], X20
	142 Move X0, [X19+200]
	143 Compare X0, 0
	144 JumpIfEqual {149}
	145 Move X8, 0x643000
	146 Move X8, [X8+2176]
	147 Move X1, [X8]
	148 Call Dictionary`2<UInt32, Object>.Clear, X0
	149 Move X8, 0x643000
	150 Move X8, [X8+2272]
	151 Move X0, [X8]
	152 Call 0x1C17F10
	153 Move X8, 0x643000
	154 Move X8, [X8+2232]
	155 Move X20, X0
	156 Move X1, [X8]
	157 Call Dictionary`2<UInt32, Object>..ctor, X0
	158 Move [X19+200], X20
	159 Move X0, [X19+192]
	160 Compare X0, 0
	161 JumpIfEqual {360}
	162 Move X28, 0x643000
	163 Move X27, 0x643000
	164 Move X23, 0x643000
	165 Move X29, 0x643000
	166 Move X25, 0x643000
	167 Move X24, 0x642000
	168 Move X26, 0x638000
	169 Move X28, [X28+2288]
	170 Move X27, [X27+2200]
	171 Move X23, [X23+2216]
	172 Move X29, [X29+2152]
	173 Move X25, [X25+2168]
	174 Move X24, [X24+816]
	175 Move X26, [X26+3336]
	176 Move W20, W31
	177 Move W8, [X0+24]
	178 NotImplemented "Instruction CMP not yet implemented."
	179 Move X2, [X28]
	180 Move W1, W20
	181 Call List`1<Object>.get_Item, X0, X1
	182 Compare X0, 0
	183 JumpIfEqual {360}
	184 Move X1, X31
	185 Move X21, X0
	186 Call Glyph.get_index, X0
	187 Move X8, [X19+56]
	188 Compare X8, 0
	189 JumpIfEqual {360}
	190 Move X2, [X27]
	191 Move W22, W0
	192 Move X0, X8
	193 Move W1, W22
	194 Call Dictionary`2<UInt32, Int32>.ContainsKey, X0, X1
	195 Move TEMP, X0
	196 And TEMP, TEMP, 1
	197 Compare TEMP, 1
	198 JumpIfEqual {206}
	199 Move X0, [X19+56]
	200 Compare X0, 0
	201 JumpIfEqual {360}
	202 Move X3, [X25]
	203 Move W1, W22
	204 Move W2, W20
	205 Call Dictionary`2<UInt32, Int32>.Add, X0, X1, X2
	206 Move X0, [X19+200]
	207 Compare X0, 0
	208 JumpIfEqual {360}
	209 Move X2, [X23]
	210 Move W1, W22
	211 Call Dictionary`2<UInt32, Object>.ContainsKey, X0, X1
	212 Move TEMP, X0
	213 And TEMP, TEMP, 1
	214 Compare TEMP, 1
	215 JumpIfEqual {223}
	216 Move X0, [X19+200]
	217 Compare X0, 0
	218 JumpIfEqual {360}
	219 Move X3, [X29]
	220 Move W1, W22
	221 Move X2, X21
	222 Call Dictionary`2<UInt32, Object>.Add, X0, X1, X2
	223 Move X0, [X19+192]
	224 Add W20, W20, 1
	225 Compare X0, 0
	226 JumpIfNotEqual {177}
	227 Move X0, [X19+48]
	228 Compare X0, 0
	229 JumpIfEqual {234}
	230 Move X8, 0x607000
	231 Move X8, [X8+2256]
	232 Move X1, [X8]
	233 Call Dictionary`2<Int32, Int32>.Clear, X0
	234 Move X8, 0x5E7000
	235 Move X8, [X8+2184]
	236 Move X0, [X8]
	237 Call 0x1C17F10
	238 Move X8, 0x5E7000
	239 Move X8, [X8+2192]
	240 Move X20, X0
	241 Move X1, [X8]
	242 Call Dictionary`2<Int32, Int32>..ctor, X0
	243 Move [X19+48], X20
	244 Move X25, 0x643000
	245 Move X27, 0x643000
	246 Move X29, 0x643000
	247 Move X25, [X25+2248]
	248 Move X27, [X27+2208]
	249 Call 0x3EB2984
	250 Return 
	251 Move X0, [X19+184]
	252 Compare X0, 0
	253 JumpIfEqual {258}
	254 Move X8, 0x642000
	255 Move X8, [X8+2184]
	256 Move X1, [X8]
	257 Call Dictionary`2<UInt32, Object>.Clear, X0
	258 Move X8, 0x642000
	259 Move X8, [X8+2264]
	260 Move X0, [X8]
	261 Call 0x1C17F10
	262 Move X8, 0x642000
	263 Move X8, [X8+2240]
	264 Move X20, X0
	265 Move X1, [X8]
	266 Call Dictionary`2<UInt32, Object>..ctor, X0
	267 Move [X19+184], X20
	268 Move X0, [X19+176]
	269 Compare X0, 0
	270 JumpIfEqual {360}
	271 Move W20, W31
	272 Move W28, 0xFFFE
	273 Move W8, [X0+24]
	274 NotImplemented "Instruction CMP not yet implemented."
	275 Move X2, [X24]
	276 Move W1, W20
	277 Call List`1<Object>.get_Item, X0, X1
	278 Compare X0, 0
	279 JumpIfEqual {356}
	280 Move X21, X0
	281 Move X0, [X19+200]
	282 Compare X0, 0
	283 JumpIfEqual {360}
	284 Move W22, [X21+40]
	285 Move X2, [X23]
	286 Move W1, W22
	287 Call Dictionary`2<UInt32, Object>.ContainsKey, X0, X1
	288 Move TEMP, X0
	289 And TEMP, TEMP, 1
	290 Compare TEMP, 1
	291 JumpIfNotEqual {356}
	292 Move X0, [X19+200]
	293 Compare X0, 0
	294 JumpIfEqual {360}
	295 Move X2, [X25]
	296 Move W1, W22
	297 Call Dictionary`2<UInt32, Object>.get_Item, X0, X1
	298 Move [X21+24], X19
	299 Move [X21+32], X0
	300 Move X0, [X19+176]
	301 Compare X0, 0
	302 JumpIfEqual {360}
	303 Move X2, [X24]
	304 Move W1, W20
	305 Call List`1<Object>.get_Item, X0, X1
	306 Compare X0, 0
	307 JumpIfEqual {360}
	308 Move X8, X0
	309 Move X0, [X19+48]
	310 Compare X0, 0
	311 JumpIfEqual {360}
	312 Move W22, [X8+56]
	313 Move X2, [X26]
	314 Move W1, W22
	315 Call Dictionary`2<Int32, Int32>.ContainsKey, X0, X1
	316 Move TEMP, X0
	317 And TEMP, TEMP, 1
	318 Compare TEMP, 1
	319 JumpIfEqual {329}
	320 Move X0, [X19+48]
	321 Compare X0, 0
	322 JumpIfEqual {360}
	323 Move X8, 0x5E6000
	324 Move X8, [X8+2136]
	325 Move W1, W22
	326 Move W2, W20
	327 Move X3, [X8]
	328 Call Dictionary`2<Int32, Int32>.Add, X0, X1, X2
	329 Move X0, [X19+176]
	330 Compare X0, 0
	331 JumpIfEqual {360}
	332 Move X2, [X24]
	333 Move W1, W20
	334 Call List`1<Object>.get_Item, X0, X1
	335 Compare X0, 0
	336 JumpIfEqual {360}
	337 Move W22, [X0+20]
	338 NotImplemented "Instruction CMP not yet implemented."
	339 Move X0, [X19+184]
	340 Compare X0, 0
	341 JumpIfEqual {360}
	342 Move X2, [X27]
	343 Move W1, W22
	344 Call Dictionary`2<UInt32, Object>.ContainsKey, X0, X1
	345 Move TEMP, X0
	346 And TEMP, TEMP, 1
	347 Compare TEMP, 1
	348 JumpIfEqual {356}
	349 Move X0, [X19+184]
	350 Compare X0, 0
	351 JumpIfEqual {360}
	352 Move X3, [X29]
	353 Move W1, W22
	354 Move X2, X21
	355 Call Dictionary`2<UInt32, Object>.Add, X0, X1, X2
	356 Move X0, [X19+176]
	357 Add W20, W20, 1
	358 Compare X0, 0
	359 JumpIfNotEqual {273}
	360 Call 0x1C17F20
	361 Move [X19+224], W31
	362 Move X20, [X31+80]
	363 Move X19, [X31+88]
	364 Move X22, [X31+64]
	365 Move X21, [X31+72]
	366 Move X24, [X31+48]
	367 Move X23, [X31+56]
	368 Move X26, [X31+32]
	369 Move X25, [X31+40]
	370 Move X28, [X31+16]
	371 Move X27, [X31+24]
	372 Move X29, [X31+96]
	373 Move X30, [X31+104]
	374 Return 

Method: System.Int32 GetSpriteIndexFromHashcode(System.Int32 hashCode)

Disassembly:
	0x03B187D0 LDR X8, [X20]
	0x03B187D4 LDR X8, [X8 + 0xB8]
	0x03B187D8 STR X19, [X8]
	0x03B187DC LDP X20, X19, [X31 + 0x10]
	0x03B187E0 LDR X30, [X31], #0x20
	0x03B187E4 RET
	0x03B187E8 MOV X1, X31
	0x03B187EC B 0x33BDD8C
	0x03B187F0 CBZ X1, 0x3B18800
	0x03B187F4 MOV X0, X1
	0x03B187F8 MOV X1, X31
	0x03B187FC B 0x3C9C494
	0x03B18800 STR X30, [X31 - 0x10]!
	0x03B18804 BL 0x1C16F20
	0x03B18808 STR X30, [X31 - 0x10]!
	0x03B1880C CBZ X1, 0x3B1881C
	0x03B18810 LDR W0, [X1 + 0x14]
	0x03B18814 LDR X30, [X31], #0x10
	0x03B18818 RET
	0x03B1881C BL 0x1C16F20
	0x03B18820 LDR X0, [X0 + 0x30]
	0x03B18824 RET
	0x03B18828 STP X30, X21, [X31 - 0x20]!
	0x03B1882C STP X20, X19, [X31 + 0x10]
	0x03B18830 CBZ X0, 0x3B18890
	0x03B18834 LDR W8, [X0 + 0x10]
	0x03B18838 MOV X19, X0
	0x03B1883C CMP W8, 0x1
	0x03B18840 B.LT 0x3B1887C
	0x03B18844 MOV W21, W31
	0x03B18848 MOV W20, W31
	0x03B1884C MOV X0, X19
	0x03B18850 MOV W1, W21
	0x03B18854 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8CB000
	007 Move W8, [X21+1721]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5E6000
	015 Move X0, [X0+2160]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1721], W8
	019 Move [X31+12], W31
	020 Move X0, [X20+48]
	021 Compare X0, 0
	022 JumpIfNotEqual {28}
	023 Move X0, X20
	024 Call TMP_SpriteAsset.UpdateLookupTables, X0
	025 Move X0, [X20+48]
	026 Compare X0, 0
	027 JumpIfEqual {43}
	028 Move X8, 0x5E6000
	029 Move X8, [X8+2160]
	030 Add X2, X31, 12
	031 Move W1, W19
	032 Move X3, [X8]
	033 Call Dictionary`2<Int32, Int32>.TryGetValue, X0, X1, X2
	034 Move W8, [X31+12]
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 And W31, W0, 1
	040 NotImplemented "Instruction CSINV not yet implemented."
	041 Add X31, X31, 48
	042 Return X0
	043 Call 0x1C17F20

Method: System.Int32 GetSpriteIndexFromUnicode(System.UInt32 unicode)

Disassembly:
	0x03B18858 BL 0x3222A1C
	0x03B1885C LDR W8, [X19 + 0x10]
	0x03B18860 ADD W9, W20, W20, 0x5, LSL
	0x03B18864 AND W10, W0, 0xFFFF
	0x03B18868 ADD W21, W21, 0x1
	0x03B1886C CMP W21, W8
	0x03B18870 EOR W20, W9, W10, 0x0
	0x03B18874 B.LT 0x3B1884C
	0x03B18878 B 0x3B18880
	0x03B1887C MOV W20, W31
	0x03B18880 MOV W0, W20
	0x03B18884 LDP X20, X19, [X31 + 0x10]
	0x03B18888 LDP X30, X21, [X31], #0x20
	0x03B1888C RET
	0x03B18890 BL 0x1C16F20
	0x03B18894 LDR W0, [X0 + 0x38]
	0x03B18898 RET
	0x03B1889C MOV X1, X31
	0x03B188A0 B 0x33BDD8C
	0x03B188A4 STP X30, X21, [X31 - 0x20]!
	0x03B188A8 STP X20, X19, [X31 + 0x10]
	0x03B188AC MOV W21, W1
	0x03B188B0 MOV X1, X31
	0x03B188B4 MOV X20, X2
	0x03B188B8 MOV X19, X0
	0x03B188BC BL 0x33BDD8C
	0x03B188C0 MOVZ W8, 0x2
	0x03B188C4 STRB W8, [X19 + 0x10]
	0x03B188C8 STR W21, [X19 + 0x14]
	0x03B188CC CBZ X20, 0x3B188F4
	0x03B188D0 MOV X0, X20
	0x03B188D4 MOV X1, X31
	0x03B188D8 BL 0x3C9C494
	0x03B188DC MOVZ W8, 0x3F800000
	0x03B188E0 STR X20, [X19 + 0x20]
	0x03B188E4 STP W0, W8, [X19 + 0x28]
	0x03B188E8 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8CB000
	007 Move W8, [X21+1722]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x641000
	015 Move X0, [X0+4064]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1722], W8
	019 Move [X31+8], X31
	020 Move X0, [X20+184]
	021 Compare X0, 0
	022 JumpIfNotEqual {28}
	023 Move X0, X20
	024 Call TMP_SpriteAsset.UpdateLookupTables, X0
	025 Move X0, [X20+184]
	026 Compare X0, 0
	027 JumpIfEqual {51}
	028 Move X8, 0x641000
	029 Move X8, [X8+4064]
	030 Add X2, X31, 8
	031 Move W1, W19
	032 Move X3, [X8]
	033 Call Dictionary`2<UInt32, Object>.TryGetValue, X0, X1, X2
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {42}
	038 Move X8, [X31+8]
	039 Compare X8, 0
	040 JumpIfEqual {51}
	041 Move W0, [X8+40]
	042 Move TEMP, 0
	043 Not TEMP
	044 Move W0, TEMP
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X30, [X31+16]
	048 Move X21, [X31+24]
	049 Add X31, X31, 48
	050 Return X0
	051 Call 0x1C17F20

Method: System.Int32 GetSpriteIndexFromName(System.String name)

Disassembly:
	0x03B188EC LDP X30, X21, [X31], #0x20
	0x03B188F0 RET
	0x03B188F4 BL 0x1C16F20
	0x03B188F8 STR X30, [X31 - 0x30]!
	0x03B188FC STP X22, X21, [X31 + 0x10]
	0x03B18900 STP X20, X19, [X31 + 0x20]
	0x03B18904 MOV W22, W1
	0x03B18908 MOV X1, X31
	0x03B1890C MOV X20, X3
	0x03B18910 MOV X21, X2
	0x03B18914 MOV X19, X0
	0x03B18918 BL 0x33BDD8C
	0x03B1891C MOVZ W8, 0x2
	0x03B18920 STR W22, [X19 + 0x14]
	0x03B18924 STRB W8, [X19 + 0x10]
	0x03B18928 STP X21, X20, [X19 + 0x18]
	0x03B1892C CBZ X20, 0x3B18954
	0x03B18930 MOV X0, X20
	0x03B18934 MOV X1, X31
	0x03B18938 BL 0x3C9C494
	0x03B1893C MOVZ W8, 0x3F800000
	0x03B18940 STP W0, W8, [X19 + 0x28]
	0x03B18944 LDP X20, X19, [X31 + 0x20]
	0x03B18948 LDP X22, X21, [X31 + 0x10]
	0x03B1894C LDR X30, [X31], #0x30
	0x03B18950 RET
	0x03B18954 BL 0x1C16F20
	0x03B18958 STP X30, X21, [X31 - 0x20]!
	0x03B1895C STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8CB000
	006 Move W8, [X21+1723]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x641000
	014 Move X0, [X0+3000]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1723], W8
	018 Move X21, 0x641000
	019 Move X8, [X19+48]
	020 Move X21, [X21+3000]
	021 Compare X8, 0
	022 JumpIfNotEqual {25}
	023 Move X0, X19
	024 Call TMP_SpriteAsset.UpdateLookupTables, X0
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Call TMP_TextUtilities.GetSimpleHashCode, X0
	032 Move W1, W0
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Call TMP_SpriteAsset.GetSpriteIndexFromHashcode, X0, X1
	039 Return X0

Method: TMPro.TMP_SpriteAsset SearchForSpriteByUnicode(TMPro.TMP_SpriteAsset spriteAsset, System.UInt32 unicode, System.Boolean includeFallbacks, out System.Int32 spriteIndex)

Disassembly:
	0x03B189CC MOV X24, X0
	0x03B189D0 BL 0x3C9C500
	0x03B189D4 MOV X0, X24
	0x03B189D8 MOV W1, W23
	0x03B189DC MOV X2, X31
	0x03B189E0 BL 0x3C9C49C
	0x03B189E4 LDR W8, [X22 + 0x10]
	0x03B189E8 LDR V0, [X22]
	0x03B189EC ADD X1, X31, 0x0
	0x03B189F0 MOV X0, X24
	0x03B189F4 MOV X2, X31
	0x03B189F8 STR W8, [X31 + 0x10]
	0x03B189FC STR V0, [X31]
	0x03B18A00 BL 0x3C9C4B8
	0x03B18A04 MOV X0, X24
	0x03B18A08 MOV X1, X21
	0x03B18A0C MOV X2, X20
	0x03B18A10 MOV X3, X31
	0x03B18A14 BL 0x3C9C4D8
	0x03B18A18 MOV X0, X24
	0x03B18A1C MOV V0.16B, V8.16B
	0x03B18A20 MOV X1, X31
	0x03B18A24 BL 0x3C9C4E8
	0x03B18A28 MOV X0, X24
	0x03B18A2C MOV W1, W19
	0x03B18A30 MOV X2, X31
	0x03B18A34 BL 0x3C9C4F8
	0x03B18A38 LDP X20, X19, [X31 + 0x50]
	0x03B18A3C LDP X22, X21, [X31 + 0x40]
	0x03B18A40 LDP X24, X23, [X31 + 0x30]
	0x03B18A44 LDR X30, [X31 + 0x28]
	0x03B18A48 LDR V8, [X31 + 0x20]
	0x03B18A4C ADD X31, X31, 0x60
	0x03B18A50 RET
	0x03B18A54 SUB X31, X31, 0x70
	0x03B18A58 STR D8, [X31 + 0x20]
	0x03B18A5C STP X30, X25, [X31 + 0x30]
	0x03B18A60 STP X24, X23, [X31 + 0x40]
	0x03B18A64 STP X22, X21, [X31 + 0x50]
	0x03B18A68 STP X20, X19, [X31 + 0x60]
	0x03B18A6C MOV W24, W1
	0x03B18A70 MOV X1, X31
	0x03B18A74 MOV X19, X6
	0x03B18A78 MOV W20, W5
	0x03B18A7C MOV V8.16B, V0.16B
	0x03B18A80 MOV X21, X4
	0x03B18A84 MOV X22, X3
	0x03B18A88 MOV X23, X2
	0x03B18A8C MOV X25, X0
	0x03B18A90 BL 0x3C9C500
	0x03B18A94 MOV X0, X25
	0x03B18A98 MOV W1, W24
	0x03B18A9C MOV X2, X31
	0x03B18AA0 BL 0x3C9C49C
	0x03B18AA4 LDR W8, [X23 + 0x10]
	0x03B18AA8 LDR V0, [X23]
	0x03B18AAC ADD X1, X31, 0x0
	0x03B18AB0 MOV X0, X25
	0x03B18AB4 MOV X2, X31
	0x03B18AB8 STR W8, [X31 + 0x10]
	0x03B18ABC STR V0, [X31]
	0x03B18AC0 BL 0x3C9C4B8
	0x03B18AC4 MOV X0, X25
	0x03B18AC8 MOV X1, X22
	0x03B18ACC MOV X2, X21
	0x03B18AD0 MOV X3, X31
	0x03B18AD4 BL 0x3C9C4D8
	0x03B18AD8 MOV X0, X25
	0x03B18ADC MOV V0.16B, V8.16B
	0x03B18AE0 MOV X1, X31
	0x03B18AE4 BL 0x3C9C4E8
	0x03B18AE8 MOV X0, X25
	0x03B18AEC MOV W1, W20
	0x03B18AF0 MOV X2, X31
	0x03B18AF4 BL 0x3C9C4F8
	0x03B18AF8 STR X19, [X25 + 0x48]
	0x03B18AFC LDP X20, X19, [X31 + 0x60]
	0x03B18B00 LDP X22, X21, [X31 + 0x50]
	0x03B18B04 LDP X24, X23, [X31 + 0x40]
	0x03B18B08 LDP X30, X25, [X31 + 0x30]
	0x03B18B0C LDR V8, [X31 + 0x20]
	0x03B18B10 ADD X31, X31, 0x70
	0x03B18B14 RET
	0x03B18B18 STP X30, X21, [X31 - 0x20]!
	0x03B18B1C STP X20, X19, [X31 + 0x10]
	0x03B18B20 ADRP X19, 0x8CA000
	0x03B18B24 ADRP X21, 0x641000
	0x03B18B28 LDRB W8, [X19 + 0x6C8]
	0x03B18B2C LDR X21, [X21 + 0x9B0]
	0x03B18B30 TBNZ X8, 0x0, 0x3B18B60
	0x03B18B34 ADRP X0, 0x5DD000
	0x03B18B38 LDR X0, [X0 + 0x278]
	0x03B18B3C BL 0x1C16CF4
	0x03B18B40 ADRP X0, 0x641000
	0x03B18B44 LDR X0, [X0 + 0x9B0]
	0x03B18B48 BL 0x1C16CF4
	0x03B18B4C ADRP X0, 0x641000
	0x03B18B50 LDR X0, [X0 + 0x9B8]
	0x03B18B54 BL 0x1C16CF4
	0x03B18B58 MOVZ W8, 0x1
	0x03B18B5C STRB W8, [X19 + 0x6C8]
	0x03B18B60 LDR X0, [X21]
	0x03B18B64 LDR X8, [X0 + 0xB8]
	0x03B18B68 LDR X8, [X8]
	0x03B18B6C CBNZ X8, 0x3B18BBC
	0x03B18B70 ADRP X8, 0x5DD000
	0x03B18B74 LDR X8, [X8 + 0x278]
	0x03B18B78 LDR X8, [X8]
	0x03B18B7C LDR X8, [X8 + 0xB8]
	0x03B18B80 LDR X19, [X8]
	0x03B18B84 BL 0x1C16F10
	0x03B18B88 ADRP X8, 0x641000
	0x03B18B8C LDR X8, [X8 + 0x9B8]
	0x03B18B90 MOV X2, X19
	0x03B18B94 MOV X3, X19
	0x03B18B98 MOV X20, X0
	0x03B18B9C LDR X1, [X8]
	0x03B18BA0 BL 0x3B18BCC
	0x03B18BA4 LDR X8, [X21]
	0x03B18BA8 LDR X8, [X8 + 0xB8]
	0x03B18BAC STR X20, [X8]
	0x03B18BB0 LDR X8, [X21]
	0x03B18BB4 LDR X8, [X8 + 0xB8]
	0x03B18BB8 LDR X8, [X8]
	0x03B18BBC LDP X20, X19, [X31 + 0x10]
	0x03B18BC0 MOV X0, X8
	0x03B18BC4 LDP X30, X21, [X31], #0x20
	0x03B18BC8 RET
	0x03B18BCC STR X30, [X31 - 0x40]!
	0x03B18BD0 STP X24, X23, [X31 + 0x10]
	0x03B18BD4 STP X22, X21, [X31 + 0x20]
	0x03B18BD8 STP X20, X19, [X31 + 0x30]
	0x03B18BDC ADRP X24, 0x8CA000
	0x03B18BE0 ADRP X23, 0x641000
	0x03B18BE4 LDRB W8, [X24 + 0x6C9]
	0x03B18BE8 LDR X23, [X23 + 0x1F0]
	0x03B18BEC MOV X19, X3

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X23, 0x8CB000
	010 Move X24, 0x5DC000
	011 Move W8, [X23+1724]
	012 Move X24, [X24+1432]
	013 Move X19, X3
	014 Move W22, W2
	015 Move W20, W1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {44}
	021 Move X0, 0x5DE000
	022 Move X0, [X0+2520]
	023 Call 0x1C17CF4
	024 Move X0, 0x5E3000
	025 Move X0, [X0+1656]
	026 Call 0x1C17CF4
	027 Move X0, 0x5E3000
	028 Move X0, [X0+1672]
	029 Call 0x1C17CF4
	030 Move X0, 0x5DD000
	031 Move X0, [X0+3592]
	032 Call 0x1C17CF4
	033 Move X0, 0x641000
	034 Move X0, [X0+4072]
	035 Call 0x1C17CF4
	036 Move X0, 0x5DC000
	037 Move X0, [X0+1432]
	038 Call 0x1C17CF4
	039 Move X0, 0x641000
	040 Move X0, [X0+1576]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X23+1724], W8
	044 Move X0, [X24]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X21
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Equality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {62}
	057 Move X21, X31
	058 Move TEMP, 0
	059 Not TEMP
	060 Move W8, TEMP
	061 Move [X19], W8
	062 Compare X21, 0
	063 JumpIfEqual {171}
	064 Move X0, X21
	065 Move W1, W20
	066 Call TMP_SpriteAsset.GetSpriteIndexFromUnicode, X0, X1
	067 Add W31, W0, 1
	068 Move [X19], W0
	069 Move X0, X21
	070 Move X20, [X31+48]
	071 Move X19, [X31+56]
	072 Move X22, [X31+32]
	073 Move X21, [X31+40]
	074 Move X24, [X31+16]
	075 Move X23, [X31+24]
	076 Move X30, [X31+64]
	077 Move X25, [X31+72]
	078 Return X0
	079 Move X25, 0x641000
	080 Move X25, [X25+1576]
	081 Move X8, [X25]
	082 Move X8, [X8+184]
	083 Move X0, [X8]
	084 Compare X0, 0
	085 JumpIfEqual {90}
	086 Move X8, 0x5E3000
	087 Move X8, [X8+1656]
	088 Move X1, [X8]
	089 Call HashSet`1<Int32>.Clear, X0
	090 Move X8, 0x5DD000
	091 Move X8, [X8+3592]
	092 Move X0, [X8]
	093 Call 0x1C17F10
	094 Move X8, 0x5E3000
	095 Move X8, [X8+1672]
	096 Move X23, X0
	097 Move X1, [X8]
	098 Call HashSet`1<Int32>..ctor, X0
	099 Move X8, [X25]
	100 Move X8, [X8+184]
	101 Move [X8], X23
	102 Move X0, X21
	103 Move X1, X31
	104 Call Object.GetInstanceID, X0
	105 Move X8, [X25]
	106 Move X8, [X8+184]
	107 Move X8, [X8]
	108 Compare X8, 0
	109 JumpIfEqual {171}
	110 Move X9, 0x5DE000
	111 Move X9, [X9+2520]
	112 Move W1, W0
	113 Move X0, X8
	114 Move X2, [X9]
	115 Call HashSet`1<Int32>.Add, X0, X1
	116 Move TEMP, X22
	117 And TEMP, TEMP, 1
	118 Compare TEMP, 1
	119 JumpIfNotEqual {57}
	120 Move X0, [X21+216]
	121 Compare X0, 0
	122 JumpIfEqual {136}
	123 Move W8, [X0+24]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move W1, W20
	126 Move X3, X19
	127 Move X20, [X31+48]
	128 Move X19, [X31+56]
	129 Move X22, [X31+32]
	130 Move X21, [X31+40]
	131 Move X24, [X31+16]
	132 Move X23, [X31+24]
	133 Move W2, 1
	134 Move X30, [X31+64]
	135 Move X25, [X31+72]
	136 Call TMP_Settings.get_instance
	137 Compare X0, 0
	138 JumpIfEqual {171}
	139 Move X8, [X24]
	140 Move X21, [X0+104]
	141 Move W9, [X8+224]
	142 Compare W9, 0
	143 JumpIfNotEqual {146}
	144 Move X0, X8
	145 Call 0x1C17DFC
	146 Move X0, X21
	147 Move X1, X31
	148 Move X2, X31
	149 Call Object.op_Inequality, X0, X1
	150 Move TEMP, X0
	151 And TEMP, TEMP, 1
	152 Compare TEMP, 1
	153 JumpIfNotEqual {57}
	154 Call TMP_Settings.get_instance
	155 Compare X0, 0
	156 JumpIfEqual {171}
	157 Move X0, [X0+104]
	158 Move W1, W20
	159 Move X3, X19
	160 Move X20, [X31+48]
	161 Move X19, [X31+56]
	162 Move X22, [X31+32]
	163 Move X21, [X31+40]
	164 Move X24, [X31+16]
	165 Move X23, [X31+24]
	166 Move W2, 1
	167 Move X30, [X31+64]
	168 Move X25, [X31+72]
	169 Call TMP_SpriteAsset.SearchForSpriteByUnicodeInternal, X0, X1, X2, X3
	170 Return X0
	171 Call 0x1C17F20

Method: TMPro.TMP_SpriteAsset SearchForSpriteByUnicodeInternal(System.Collections.Generic.List`1<TMPro.TMP_SpriteAsset> spriteAssets, System.UInt32 unicode, System.Boolean includeFallbacks, out System.Int32 spriteIndex)

Disassembly:
	0x03B18BF0 MOV X21, X2
	0x03B18BF4 MOV X22, X1
	0x03B18BF8 MOV X20, X0
	0x03B18BFC TBNZ X8, 0x0, 0x3B18C14
	0x03B18C00 ADRP X0, 0x641000
	0x03B18C04 LDR X0, [X0 + 0x1F0]
	0x03B18C08 BL 0x1C16CF4
	0x03B18C0C MOVZ W8, 0x1
	0x03B18C10 STRB W8, [X24 + 0x6C9]
	0x03B18C14 MOV X0, X20
	0x03B18C18 MOV X1, X31
	0x03B18C1C BL 0x33BDD8C
	0x03B18C20 STR X22, [X20 + 0x10]
	0x03B18C24 LDR X0, [X23]
	0x03B18C28 LDR W8, [X0 + 0xE0]
	0x03B18C2C CBNZ W8, 0x3B18C34
	0x03B18C30 BL 0x1C16DFC
	0x03B18C34 MOV X0, X22
	0x03B18C38 BL 0x3B18CD8
	0x03B18C3C STR W0, [X20 + 0x18]
	0x03B18C40 STP X21, X19, [X20 + 0x20]
	0x03B18C44 MOV X0, X20
	0x03B18C48 LDP X20, X19, [X31 + 0x30]
	0x03B18C4C LDP X22, X21, [X31 + 0x20]
	0x03B18C50 LDP X24, X23, [X31 + 0x10]
	0x03B18C54 LDR X30, [X31], #0x40
	0x03B18C58 B 0x3B18D94
	0x03B18C5C LDR X0, [X0 + 0x10]
	0x03B18C60 RET
	0x03B18C64 STR X30, [X31 - 0x20]!
	0x03B18C68 STP X20, X19, [X31 + 0x10]
	0x03B18C6C LDR X8, [X0 + 0x10]
	0x03B18C70 MOV X19, X0
	0x03B18C74 MOV X20, X1
	0x03B18C78 MOV X0, X1
	0x03B18C7C MOV X1, X8
	0x03B18C80 MOV X2, X31
	0x03B18C84 BL 0x3226EF8
	0x03B18C88 TBZ X0, 0x0, 0x3B18C90
	0x03B18C8C STR X20, [X19 + 0x10]
	0x03B18C90 LDP X20, X19, [X31 + 0x10]
	0x03B18C94 LDR X30, [X31], #0x20
	0x03B18C98 RET
	0x03B18C9C LDR W0, [X0 + 0x18]
	0x03B18CA0 RET
	0x03B18CA4 LDR W8, [X0 + 0x18]
	0x03B18CA8 CMP W8, W1
	0x03B18CAC B.EQ 0x3B18CB4
	0x03B18CB0 STR W1, [X0 + 0x18]
	0x03B18CB4 RET
	0x03B18CB8 LDR X0, [X0 + 0x20]
	0x03B18CBC RET
	0x03B18CC0 LDR X0, [X0 + 0x28]
	0x03B18CC4 RET
	0x03B18CC8 LDR X0, [X0 + 0x30]
	0x03B18CCC RET
	0x03B18CD0 LDR X0, [X0 + 0x38]
	0x03B18CD4 RET
	0x03B18CD8 STP X30, X23, [X31 - 0x30]!
	0x03B18CDC STP X22, X21, [X31 + 0x10]
	0x03B18CE0 STP X20, X19, [X31 + 0x20]
	0x03B18CE4 ADRP X20, 0x8CA000
	0x03B18CE8 LDRB W8, [X20 + 0x705]
	0x03B18CEC MOV X19, X0
	0x03B18CF0 TBNZ X8, 0x0, 0x3B18D08
	0x03B18CF4 ADRP X0, 0x641000
	0x03B18CF8 LDR X0, [X0 + 0x1F0]
	0x03B18CFC BL 0x1C16CF4
	0x03B18D00 MOVZ W8, 0x1
	0x03B18D04 STRB W8, [X20 + 0x705]
	0x03B18D08 CBZ X19, 0x3B18D90
	0x03B18D0C LDR W8, [X19 + 0x10]
	0x03B18D10 CMP W8, 0x1
	0x03B18D14 B.LT 0x3B18D78
	0x03B18D18 ADRP X23, 0x641000
	0x03B18D1C LDR X23, [X23 + 0x1F0]
	0x03B18D20 MOV W21, W31
	0x03B18D24 MOV W20, W31
	0x03B18D28 MOV X0, X19
	0x03B18D2C MOV W1, W21
	0x03B18D30 MOV X2, X31
	0x03B18D34 BL 0x3222A1C
	0x03B18D38 LDR X8, [X23]
	0x03B18D3C MOV W22, W0
	0x03B18D40 LDR W9, [X8 + 0xE0]
	0x03B18D44 CBNZ W9, 0x3B18D50
	0x03B18D48 MOV X0, X8
	0x03B18D4C BL 0x1C16DFC
	0x03B18D50 MOV W0, W22
	0x03B18D54 BL 0x3B1CD20
	0x03B18D58 LDR W8, [X19 + 0x10]
	0x03B18D5C ADD W9, W20, W20, 0x5, LSL
	0x03B18D60 AND W10, W0, 0xFFFF
	0x03B18D64 ADD W21, W21, 0x1
	0x03B18D68 CMP W21, W8
	0x03B18D6C EOR W20, W9, W10, 0x0
	0x03B18D70 B.LT 0x3B18D28
	0x03B18D74 B 0x3B18D7C
	0x03B18D78 MOV W20, W31
	0x03B18D7C MOV W0, W20
	0x03B18D80 LDP X20, X19, [X31 + 0x20]
	0x03B18D84 LDP X22, X21, [X31 + 0x10]
	0x03B18D88 LDP X30, X23, [X31], #0x30
	0x03B18D8C RET

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x8CB000
	013 Move W8, [X22+1725]
	014 Move X19, X3
	015 Move W23, W2
	016 Move W20, W1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {39}
	022 Move X0, 0x5DE000
	023 Move X0, [X0+2520]
	024 Call 0x1C17CF4
	025 Move X0, 0x641000
	026 Move X0, [X0+4072]
	027 Call 0x1C17CF4
	028 Move X0, 0x641000
	029 Move X0, [X0+4080]
	030 Call 0x1C17CF4
	031 Move X0, 0x5DC000
	032 Move X0, [X0+1432]
	033 Call 0x1C17CF4
	034 Move X0, 0x641000
	035 Move X0, [X0+1576]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X22+1725], W8
	039 Compare X21, 0
	040 JumpIfEqual {131}
	041 Move W8, [X21+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X25, 0x641000
	044 Move X26, 0x5DC000
	045 Move X27, 0x641000
	046 Move X28, 0x5DE000
	047 Move X25, [X25+4080]
	048 Move X26, [X26+1432]
	049 Move X27, [X27+1576]
	050 Move X28, [X28+2520]
	051 Move W22, W31
	052 And W23, W23, 1
	053 Move X2, [X25]
	054 Move X0, X21
	055 Move W1, W22
	056 Call List`1<Object>.get_Item, X0, X1
	057 Move X8, [X26]
	058 Move X24, X0
	059 Move W9, [X8+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X8
	063 Call 0x1C17DFC
	064 Move X0, X24
	065 Move X1, X31
	066 Move X2, X31
	067 Call Object.op_Equality, X0, X1
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfEqual {110}
	072 Compare X24, 0
	073 JumpIfEqual {131}
	074 Move X0, X24
	075 Move X1, X31
	076 Call Object.GetInstanceID, X0
	077 Move X8, [X27]
	078 Move X8, [X8+184]
	079 Move X8, [X8]
	080 Compare X8, 0
	081 JumpIfEqual {131}
	082 Move X2, [X28]
	083 Move W1, W0
	084 Move X0, X8
	085 Call HashSet`1<Int32>.Add, X0, X1
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {110}
	090 Move X0, X24
	091 Move W1, W20
	092 Move W2, W23
	093 Move X3, X19
	094 Call TMP_SpriteAsset.SearchForSpriteByUnicodeInternal, X0, X1, X2, X3
	095 Move X8, [X26]
	096 Move X24, X0
	097 Move W9, [X8+224]
	098 Compare W9, 0
	099 JumpIfNotEqual {102}
	100 Move X0, X8
	101 Call 0x1C17DFC
	102 Move X0, X24
	103 Move X1, X31
	104 Move X2, X31
	105 Call Object.op_Inequality, X0, X1
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfEqual {118}
	110 Move W8, [X21+24]
	111 Add W22, W22, 1
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X24, X31
	114 Move TEMP, 0
	115 Not TEMP
	116 Move W8, TEMP
	117 Move [X19], W8
	118 Move X0, X24
	119 Move X20, [X31+80]
	120 Move X19, [X31+88]
	121 Move X22, [X31+64]
	122 Move X21, [X31+72]
	123 Move X24, [X31+48]
	124 Move X23, [X31+56]
	125 Move X26, [X31+32]
	126 Move X25, [X31+40]
	127 Move X28, [X31+16]
	128 Move X27, [X31+24]
	129 Move X30, [X31+96]
	130 Return X0
	131 Call 0x1C17F20

Method: TMPro.TMP_SpriteAsset SearchForSpriteByUnicodeInternal(TMPro.TMP_SpriteAsset spriteAsset, System.UInt32 unicode, System.Boolean includeFallbacks, out System.Int32 spriteIndex)

Disassembly:
	0x03B18D90 BL 0x1C16F20
	0x03B18D94 STR X30, [X31 - 0x40]!
	0x03B18D98 STP X24, X23, [X31 + 0x10]
	0x03B18D9C STP X22, X21, [X31 + 0x20]
	0x03B18DA0 STP X20, X19, [X31 + 0x30]
	0x03B18DA4 ADRP X21, 0x8CA000
	0x03B18DA8 ADRP X20, 0x641000
	0x03B18DAC LDRB W8, [X21 + 0x6CA]
	0x03B18DB0 LDR X20, [X20 + 0x1F0]
	0x03B18DB4 MOV X19, X0
	0x03B18DB8 TBNZ X8, 0x0, 0x3B18DE8
	0x03B18DBC ADRP X0, 0x5DC000
	0x03B18DC0 LDR X0, [X0 + 0xE58]
	0x03B18DC4 BL 0x1C16CF4
	0x03B18DC8 ADRP X0, 0x641000
	0x03B18DCC LDR X0, [X0 + 0x1F0]
	0x03B18DD0 BL 0x1C16CF4
	0x03B18DD4 ADRP X0, 0x604000
	0x03B18DD8 LDR X0, [X0 + 0xD08]
	0x03B18DDC BL 0x1C16CF4
	0x03B18DE0 MOVZ W8, 0x1
	0x03B18DE4 STRB W8, [X21 + 0x6CA]
	0x03B18DE8 LDR X0, [X20]
	0x03B18DEC LDR X20, [X19 + 0x10]
	0x03B18DF0 LDR W8, [X0 + 0xE0]
	0x03B18DF4 CBNZ W8, 0x3B18DFC
	0x03B18DF8 BL 0x1C16DFC
	0x03B18DFC MOV X0, X20
	0x03B18E00 BL 0x3B18CD8
	0x03B18E04 LDR X8, [X19 + 0x20]
	0x03B18E08 STR W0, [X19 + 0x18]
	0x03B18E0C CBZ X8, 0x3B18F84
	0x03B18E10 ADRP X23, 0x5DC000
	0x03B18E14 LDR X23, [X23 + 0xE58]
	0x03B18E18 LDR W20, [X8 + 0x10]
	0x03B18E1C ADRP X22, 0x604000
	0x03B18E20 LDR X0, [X23]
	0x03B18E24 LDR X22, [X22 + 0xD08]
	0x03B18E28 MOV W1, W20
	0x03B18E2C BL 0x1C16D6C
	0x03B18E30 STR X0, [X19 + 0x30]
	0x03B18E34 LDR X0, [X22]
	0x03B18E38 MOV W1, W20
	0x03B18E3C BL 0x1C16D6C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x8CB000
	008 Move W8, [X23+1726]
	009 Move X19, X3
	010 Move W22, W2
	011 Move W20, W1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x641000
	018 Move X0, [X0+4072]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+1726], W8
	022 Compare X21, 0
	023 JumpIfEqual {62}
	024 Move X0, X21
	025 Move W1, W20
	026 Call TMP_SpriteAsset.GetSpriteIndexFromUnicode, X0, X1
	027 Add W31, W0, 1
	028 Move [X19], W0
	029 Move TEMP, X22
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {49}
	033 Move X0, [X21+216]
	034 Compare X0, 0
	035 JumpIfEqual {49}
	036 Move W8, [X0+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move W1, W20
	039 Move X3, X19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move W2, 1
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Call TMP_SpriteAsset.SearchForSpriteByUnicodeInternal, X0, X1, X2, X3
	048 Return X0
	049 Move X21, X31
	050 Move TEMP, 0
	051 Not TEMP
	052 Move W8, TEMP
	053 Move [X19], W8
	054 Move X0, X21
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return X0
	062 Call 0x1C17F20

Method: TMPro.TMP_SpriteAsset SearchForSpriteByHashCode(TMPro.TMP_SpriteAsset spriteAsset, System.Int32 hashCode, System.Boolean includeFallbacks, out System.Int32 spriteIndex)

Disassembly:
	0x03B18E40 CMP W20, 0x1
	0x03B18E44 STR X0, [X19 + 0x40]
	0x03B18E48 B.LT 0x3B18EC4
	0x03B18E4C MOV X21, X31
	0x03B18E50 LDR X0, [X19 + 0x20]
	0x03B18E54 CBZ X0, 0x3B18F84
	0x03B18E58 LDR X24, [X19 + 0x30]
	0x03B18E5C MOV W1, W21
	0x03B18E60 MOV X2, X31
	0x03B18E64 BL 0x3222A1C
	0x03B18E68 CBZ X24, 0x3B18F84
	0x03B18E6C LDR W8, [X24 + 0x18]
	0x03B18E70 CMP X21, X8
	0x03B18E74 B.CS 0x3B18F88
	0x03B18E78 AND W8, W0, 0xFFFF
	0x03B18E7C ADD X9, X24, X21, 0x2, LSL
	0x03B18E80 STR W8, [X9 + 0x20]
	0x03B18E84 LDR X0, [X19 + 0x20]
	0x03B18E88 CBZ X0, 0x3B18F84
	0x03B18E8C LDR X24, [X19 + 0x40]
	0x03B18E90 MOV W1, W21
	0x03B18E94 MOV X2, X31
	0x03B18E98 BL 0x3222A1C
	0x03B18E9C CBZ X24, 0x3B18F84
	0x03B18EA0 LDR W8, [X24 + 0x18]
	0x03B18EA4 CMP X21, X8
	0x03B18EA8 B.CS 0x3B18F88
	0x03B18EAC ADD X9, X24, X21, 0x2, LSL
	0x03B18EB0 ADD X21, X21, 0x1
	0x03B18EB4 AND W8, W0, 0xFFFF
	0x03B18EB8 CMP X20, X21
	0x03B18EBC STR W8, [X9 + 0x20]
	0x03B18EC0 B.NE 0x3B18E50
	0x03B18EC4 LDR X8, [X19 + 0x28]
	0x03B18EC8 CBZ X8, 0x3B18F84
	0x03B18ECC LDR W20, [X8 + 0x10]
	0x03B18ED0 LDR X0, [X23]
	0x03B18ED4 MOV W1, W20
	0x03B18ED8 BL 0x1C16D6C
	0x03B18EDC STR X0, [X19 + 0x38]
	0x03B18EE0 LDR X0, [X22]
	0x03B18EE4 MOV W1, W20
	0x03B18EE8 BL 0x1C16D6C
	0x03B18EEC CMP W20, 0x1
	0x03B18EF0 STR X0, [X19 + 0x48]
	0x03B18EF4 B.LT 0x3B18F70
	0x03B18EF8 MOV X21, X31
	0x03B18EFC LDR X0, [X19 + 0x28]
	0x03B18F00 CBZ X0, 0x3B18F84
	0x03B18F04 LDR X22, [X19 + 0x38]
	0x03B18F08 MOV W1, W21
	0x03B18F0C MOV X2, X31
	0x03B18F10 BL 0x3222A1C
	0x03B18F14 CBZ X22, 0x3B18F84
	0x03B18F18 LDR W8, [X22 + 0x18]
	0x03B18F1C CMP X21, X8
	0x03B18F20 B.CS 0x3B18F88
	0x03B18F24 AND W8, W0, 0xFFFF
	0x03B18F28 ADD X9, X22, X21, 0x2, LSL
	0x03B18F2C STR W8, [X9 + 0x20]
	0x03B18F30 LDR X0, [X19 + 0x28]
	0x03B18F34 CBZ X0, 0x3B18F84
	0x03B18F38 LDR X22, [X19 + 0x48]
	0x03B18F3C MOV W1, W21
	0x03B18F40 MOV X2, X31
	0x03B18F44 BL 0x3222A1C
	0x03B18F48 CBZ X22, 0x3B18F84
	0x03B18F4C LDR W8, [X22 + 0x18]
	0x03B18F50 CMP X21, X8
	0x03B18F54 B.CS 0x3B18F88
	0x03B18F58 ADD X9, X22, X21, 0x2, LSL
	0x03B18F5C ADD X21, X21, 0x1
	0x03B18F60 AND W8, W0, 0xFFFF
	0x03B18F64 CMP X20, X21
	0x03B18F68 STR W8, [X9 + 0x20]
	0x03B18F6C B.NE 0x3B18EFC
	0x03B18F70 LDP X20, X19, [X31 + 0x30]
	0x03B18F74 LDP X22, X21, [X31 + 0x20]
	0x03B18F78 LDP X24, X23, [X31 + 0x10]
	0x03B18F7C LDR X30, [X31], #0x40
	0x03B18F80 RET
	0x03B18F84 BL 0x1C16F20
	0x03B18F88 BL 0x1C16F28
	0x03B18F8C LDR X0, [X0 + 0x18]
	0x03B18F90 RET
	0x03B18F94 B 0x3B18F98
	0x03B18F98 STP X30, X27, [X31 - 0x50]!
	0x03B18F9C STP X26, X25, [X31 + 0x10]
	0x03B18FA0 STP X24, X23, [X31 + 0x20]
	0x03B18FA4 STP X22, X21, [X31 + 0x30]
	0x03B18FA8 STP X20, X19, [X31 + 0x40]
	0x03B18FAC ADRP X20, 0x8CA000
	0x03B18FB0 LDRB W8, [X20 + 0x6CD]
	0x03B18FB4 MOV X19, X0
	0x03B18FB8 TBNZ X8, 0x0, 0x3B19054
	0x03B18FBC ADRP X0, 0x641000
	0x03B18FC0 LDR X0, [X0 + 0x9C0]
	0x03B18FC4 BL 0x1C16CF4
	0x03B18FC8 ADRP X0, 0x641000
	0x03B18FCC LDR X0, [X0 + 0x9C8]
	0x03B18FD0 BL 0x1C16CF4
	0x03B18FD4 ADRP X0, 0x641000
	0x03B18FD8 LDR X0, [X0 + 0x9D0]
	0x03B18FDC BL 0x1C16CF4
	0x03B18FE0 ADRP X0, 0x641000
	0x03B18FE4 LDR X0, [X0 + 0x9D8]
	0x03B18FE8 BL 0x1C16CF4
	0x03B18FEC ADRP X0, 0x641000
	0x03B18FF0 LDR X0, [X0 + 0x9E0]
	0x03B18FF4 BL 0x1C16CF4
	0x03B18FF8 ADRP X0, 0x641000
	0x03B18FFC LDR X0, [X0 + 0x9E8]
	0x03B19000 BL 0x1C16CF4
	0x03B19004 ADRP X0, 0x640000
	0x03B19008 LDR X0, [X0 + 0x9F0]
	0x03B1900C BL 0x1C16CF4
	0x03B19010 ADRP X0, 0x640000
	0x03B19014 LDR X0, [X0 + 0x9F8]
	0x03B19018 BL 0x1C16CF4
	0x03B1901C ADRP X0, 0x5DC000
	0x03B19020 LDR X0, [X0 + 0x278]
	0x03B19024 BL 0x1C16CF4
	0x03B19028 ADRP X0, 0x640000
	0x03B1902C LDR X0, [X0 + 0x9B0]
	0x03B19030 BL 0x1C16CF4
	0x03B19034 ADRP X0, 0x640000
	0x03B19038 LDR X0, [X0 + 0x1F0]
	0x03B1903C BL 0x1C16CF4
	0x03B19040 ADRP X0, 0x640000
	0x03B19044 LDR X0, [X0 + 0x9B8]
	0x03B19048 BL 0x1C16CF4
	0x03B1904C MOVZ W8, 0x1
	0x03B19050 STRB W8, [X20 + 0x6CD]
	0x03B19054 LDR X0, [X19 + 0x20]
	0x03B19058 CBZ X0, 0x3B19070
	0x03B1905C ADRP X8, 0x640000
	0x03B19060 LDR X8, [X8 + 0x9C8]
	0x03B19064 LDR X1, [X8]
	0x03B19068 BL 0x2A13814
	0x03B1906C B 0x3B19098
	0x03B19070 ADRP X8, 0x640000
	0x03B19074 LDR X8, [X8 + 0x9E0]
	0x03B19078 LDR X0, [X8]
	0x03B1907C BL 0x1C16F10
	0x03B19080 ADRP X8, 0x640000
	0x03B19084 LDR X8, [X8 + 0x9D8]
	0x03B19088 MOV X20, X0
	0x03B1908C LDR X1, [X8]
	0x03B19090 BL 0x2A12DD4
	0x03B19094 STR X20, [X19 + 0x20]
	0x03B19098 LDR X0, [X19 + 0x18]
	0x03B1909C CBZ X0, 0x3B19294
	0x03B190A0 ADRP X26, 0x640000
	0x03B190A4 ADRP X25, 0x640000
	0x03B190A8 ADRP X23, 0x640000
	0x03B190AC ADRP X27, 0x640000
	0x03B190B0 ADRP X24, 0x640000
	0x03B190B4 LDR X26, [X26 + 0x9F8]
	0x03B190B8 LDR X25, [X25 + 0x9D0]
	0x03B190BC LDR X23, [X23 + 0x9C0]
	0x03B190C0 LDR X27, [X27 + 0x1F0]
	0x03B190C4 LDR X24, [X24 + 0x9B8]
	0x03B190C8 MOV W20, W31
	0x03B190CC LDR W8, [X0 + 0x18]
	0x03B190D0 CMP W20, W8
	0x03B190D4 B.GE 0x3B19180
	0x03B190D8 LDR X2, [X26]
	0x03B190DC MOV W1, W20
	0x03B190E0 BL 0x301BCCC
	0x03B190E4 CBZ X0, 0x3B19294
	0x03B190E8 BL 0x3B18D94
	0x03B190EC LDR X0, [X19 + 0x18]
	0x03B190F0 CBZ X0, 0x3B19294
	0x03B190F4 LDR X2, [X26]
	0x03B190F8 LDR X21, [X19 + 0x20]
	0x03B190FC MOV W1, W20
	0x03B19100 BL 0x301BCCC
	0x03B19104 CBZ X0, 0x3B19294
	0x03B19108 CBZ X21, 0x3B19294
	0x03B1910C LDR W1, [X0 + 0x18]
	0x03B19110 LDR X2, [X25]
	0x03B19114 MOV X0, X21
	0x03B19118 BL 0x2A13880
	0x03B1911C TBNZ X0, 0x0, 0x3B19170
	0x03B19120 LDR X0, [X19 + 0x18]
	0x03B19124 CBZ X0, 0x3B19294
	0x03B19128 LDR X2, [X26]
	0x03B1912C LDR X21, [X19 + 0x20]
	0x03B19130 MOV W1, W20
	0x03B19134 BL 0x301BCCC
	0x03B19138 CBZ X0, 0x3B19294
	0x03B1913C LDR X8, [X19 + 0x18]
	0x03B19140 CBZ X8, 0x3B19294
	0x03B19144 LDR X2, [X26]
	0x03B19148 LDR W22, [X0 + 0x18]
	0x03B1914C MOV X0, X8
	0x03B19150 MOV W1, W20
	0x03B19154 BL 0x301BCCC
	0x03B19158 CBZ X21, 0x3B19294

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X23, 0x8CB000
	012 Move X25, 0x5DC000
	013 Move W8, [X23+1727]
	014 Move X25, [X25+1432]
	015 Move X19, X3
	016 Move W21, W2
	017 Move W22, W1
	018 Move X20, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {46}
	023 Move X0, 0x5DE000
	024 Move X0, [X0+2520]
	025 Call 0x1C17CF4
	026 Move X0, 0x5E3000
	027 Move X0, [X0+1656]
	028 Call 0x1C17CF4
	029 Move X0, 0x5E3000
	030 Move X0, [X0+1672]
	031 Call 0x1C17CF4
	032 Move X0, 0x5DD000
	033 Move X0, [X0+3592]
	034 Call 0x1C17CF4
	035 Move X0, 0x641000
	036 Move X0, [X0+4072]
	037 Call 0x1C17CF4
	038 Move X0, 0x5DC000
	039 Move X0, [X0+1432]
	040 Call 0x1C17CF4
	041 Move X0, 0x641000
	042 Move X0, [X0+1576]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X23+1727], W8
	046 Move X0, [X25]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, X20
	052 Move X1, X31
	053 Move X2, X31
	054 Call Object.op_Equality, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {64}
	059 Move X20, X31
	060 Move TEMP, 0
	061 Not TEMP
	062 Move W8, TEMP
	063 Move [X19], W8
	064 Compare X20, 0
	065 JumpIfEqual {234}
	066 Move X0, X20
	067 Move W1, W22
	068 Call TMP_SpriteAsset.GetSpriteIndexFromHashcode, X0, X1
	069 Add W31, W0, 1
	070 Move [X19], W0
	071 Move X26, 0x641000
	072 Move X26, [X26+1576]
	073 Move X8, [X26]
	074 Move X8, [X8+184]
	075 Move X0, [X8]
	076 Compare X0, 0
	077 JumpIfEqual {82}
	078 Move X8, 0x5E3000
	079 Move X8, [X8+1656]
	080 Move X1, [X8]
	081 Call HashSet`1<Int32>.Clear, X0
	082 Move X8, 0x5DD000
	083 Move X8, [X8+3592]
	084 Move X0, [X8]
	085 Call 0x1C17F10
	086 Move X8, 0x5E3000
	087 Move X8, [X8+1672]
	088 Move X23, X0
	089 Move X1, [X8]
	090 Call HashSet`1<Int32>..ctor, X0
	091 Move X8, [X26]
	092 Move X8, [X8+184]
	093 Move [X8], X23
	094 Move X0, X20
	095 Move X1, X31
	096 Call TMP_Asset.get_instanceID, X0
	097 Move X8, [X26]
	098 Move X8, [X8+184]
	099 Move X8, [X8]
	100 Compare X8, 0
	101 JumpIfEqual {234}
	102 Move X27, 0x5DE000
	103 Move X27, [X27+2520]
	104 Move W23, W0
	105 Move X0, X8
	106 Move W1, W23
	107 Move X2, [X27]
	108 Call HashSet`1<Int32>.Add, X0, X1
	109 Move TEMP, X21
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {152}
	113 Move X0, [X20+216]
	114 Compare X0, 0
	115 JumpIfEqual {124}
	116 Move W8, [X0+24]
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Move W2, 1
	119 Move W1, W22
	120 Move X3, X19
	121 Call TMP_SpriteAsset.SearchForSpriteByHashCodeInternal, X0, X1, X2, X3
	122 Move W8, [X19]
	123 Add W31, W8, 1
	124 Call TMP_Settings.get_instance
	125 Compare X0, 0
	126 JumpIfEqual {234}
	127 Move X8, [X25]
	128 Move X24, [X0+104]
	129 Move W9, [X8+224]
	130 Compare W9, 0
	131 JumpIfNotEqual {134}
	132 Move X0, X8
	133 Call 0x1C17DFC
	134 Move X0, X24
	135 Move X1, X31
	136 Move X2, X31
	137 Call Object.op_Inequality, X0, X1
	138 Move TEMP, X0
	139 And TEMP, TEMP, 1
	140 Compare TEMP, 1
	141 JumpIfNotEqual {152}
	142 Call TMP_Settings.get_instance
	143 Compare X0, 0
	144 JumpIfEqual {234}
	145 Move X0, [X0+104]
	146 Move W2, 1
	147 Move W1, W22
	148 Move X3, X19
	149 Call TMP_SpriteAsset.SearchForSpriteByHashCodeInternal, X0, X1, X2, X3
	150 Move W8, [X19]
	151 Add W31, W8, 1
	152 Move X8, [X26]
	153 Move X8, [X8+184]
	154 Move X0, [X8]
	155 Compare X0, 0
	156 JumpIfEqual {234}
	157 Move X8, 0x5E2000
	158 Move X8, [X8+1656]
	159 Move X1, [X8]
	160 Call HashSet`1<Int32>.Clear, X0
	161 Call TMP_Settings.get_instance
	162 Compare X0, 0
	163 JumpIfEqual {234}
	164 Move W22, [X0+124]
	165 Move X0, X20
	166 Move W1, W22
	167 Call TMP_SpriteAsset.GetSpriteIndexFromUnicode, X0, X1
	168 Add W31, W0, 1
	169 Move [X19], W0
	170 Move X8, [X26]
	171 Move X8, [X8+184]
	172 Move X0, [X8]
	173 Compare X0, 0
	174 JumpIfEqual {234}
	175 Move X2, [X27]
	176 Move W1, W23
	177 Call HashSet`1<Int32>.Add, X0, X1
	178 Move TEMP, X21
	179 And TEMP, TEMP, 1
	180 Compare TEMP, 1
	181 JumpIfNotEqual {59}
	182 Move X0, [X20+216]
	183 Compare X0, 0
	184 JumpIfEqual {193}
	185 Move W8, [X0+24]
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Move W2, 1
	188 Move W1, W22
	189 Move X3, X19
	190 Call TMP_SpriteAsset.SearchForSpriteByUnicodeInternal, X0, X1, X2, X3
	191 Move W8, [X19]
	192 Add W31, W8, 1
	193 Call TMP_Settings.get_instance
	194 Compare X0, 0
	195 JumpIfEqual {234}
	196 Move X8, [X25]
	197 Move X20, [X0+104]
	198 Move W9, [X8+224]
	199 Compare W9, 0
	200 JumpIfNotEqual {203}
	201 Move X0, X8
	202 Call 0x1C17DFC
	203 Move X0, X20
	204 Move X1, X31
	205 Move X2, X31
	206 Call Object.op_Inequality, X0, X1
	207 Move TEMP, X0
	208 And TEMP, TEMP, 1
	209 Compare TEMP, 1
	210 JumpIfNotEqual {59}
	211 Call TMP_Settings.get_instance
	212 Compare X0, 0
	213 JumpIfEqual {234}
	214 Move X0, [X0+104]
	215 Move W2, 1
	216 Move W1, W22
	217 Move X3, X19
	218 Call TMP_SpriteAsset.SearchForSpriteByUnicodeInternal, X0, X1, X2, X3
	219 Move W8, [X19]
	220 Add W31, W8, 1
	221 Move X20, X0
	222 Move X0, X20
	223 Move X20, [X31+64]
	224 Move X19, [X31+72]
	225 Move X22, [X31+48]
	226 Move X21, [X31+56]
	227 Move X24, [X31+32]
	228 Move X23, [X31+40]
	229 Move X26, [X31+16]
	230 Move X25, [X31+24]
	231 Move X30, [X31+80]
	232 Move X27, [X31+88]
	233 Return X0
	234 Call 0x1C17F20

Method: TMPro.TMP_SpriteAsset SearchForSpriteByHashCodeInternal(System.Collections.Generic.List`1<TMPro.TMP_SpriteAsset> spriteAssets, System.Int32 hashCode, System.Boolean searchFallbacks, out System.Int32 spriteIndex)

Disassembly:
	0x03B1915C LDR X3, [X23]
	0x03B19160 MOV X2, X0
	0x03B19164 MOV X0, X21
	0x03B19168 MOV W1, W22
	0x03B1916C BL 0x2A1368C
	0x03B19170 LDR X0, [X19 + 0x18]
	0x03B19174 ADD W20, W20, 0x1
	0x03B19178 CBNZ X0, 0x3B190CC
	0x03B1917C B 0x3B19294
	0x03B19180 LDR X0, [X27]
	0x03B19184 LDR W8, [X0 + 0xE0]
	0x03B19188 CBNZ W8, 0x3B19190
	0x03B1918C BL 0x1C16DFC
	0x03B19190 LDR X0, [X24]
	0x03B19194 BL 0x3B18CD8
	0x03B19198 LDR X8, [X19 + 0x20]
	0x03B1919C CBZ X8, 0x3B19294
	0x03B191A0 LDR X2, [X25]
	0x03B191A4 MOV W20, W0
	0x03B191A8 MOV X0, X8
	0x03B191AC MOV W1, W20
	0x03B191B0 BL 0x2A13880
	0x03B191B4 TBZ X0, 0x0, 0x3B191D0
	0x03B191B8 LDP X20, X19, [X31 + 0x40]
	0x03B191BC LDP X22, X21, [X31 + 0x30]
	0x03B191C0 LDP X24, X23, [X31 + 0x20]
	0x03B191C4 LDP X26, X25, [X31 + 0x10]
	0x03B191C8 LDP X30, X27, [X31], #0x50
	0x03B191CC RET
	0x03B191D0 ADRP X8, 0x5DC000
	0x03B191D4 LDR X8, [X8 + 0x278]
	0x03B191D8 ADRP X9, 0x640000
	0x03B191DC LDR X8, [X8]
	0x03B191E0 LDR X8, [X8 + 0xB8]
	0x03B191E4 LDR X9, [X9 + 0x9B0]
	0x03B191E8 LDR X22, [X8]
	0x03B191EC LDR X0, [X9]
	0x03B191F0 BL 0x1C16F10
	0x03B191F4 LDR X1, [X24]
	0x03B191F8 MOV X2, X22
	0x03B191FC MOV X3, X22
	0x03B19200 MOV X21, X0
	0x03B19204 BL 0x3B18BCC
	0x03B19208 LDR X0, [X19 + 0x18]
	0x03B1920C CBZ X0, 0x3B19294
	0x03B19210 ADRP X9, 0x640000
	0x03B19214 LDR X9, [X9 + 0x9E8]
	0x03B19218 LDR W10, [X0 + 0x1C]
	0x03B1921C LDR X8, [X0 + 0x10]
	0x03B19220 LDR X9, [X9]
	0x03B19224 ADD W10, W10, 0x1
	0x03B19228 STR W10, [X0 + 0x1C]
	0x03B1922C CBZ X8, 0x3B19294
	0x03B19230 LDRSW X10, [X0 + 0x18]
	0x03B19234 LDR W11, [X8 + 0x18]
	0x03B19238 CMP W10, W11
	0x03B1923C B.CS 0x3B19254
	0x03B19240 ADD W9, W10, 0x1
	0x03B19244 ADD X8, X8, X10, 0x3, LSL
	0x03B19248 STR W9, [X0 + 0x18]
	0x03B1924C STR X21, [X8 + 0x20]
	0x03B19250 B 0x3B19268
	0x03B19254 LDR X8, [X9 + 0x20]
	0x03B19258 MOV X1, X21
	0x03B1925C LDR X8, [X8 + 0xC0]
	0x03B19260 LDR X2, [X8 + 0x70]
	0x03B19264 BL 0x301BF90
	0x03B19268 LDR X0, [X19 + 0x20]
	0x03B1926C CBZ X0, 0x3B19294
	0x03B19270 LDR X3, [X23]
	0x03B19274 MOV W1, W20
	0x03B19278 MOV X2, X21
	0x03B1927C LDP X20, X19, [X31 + 0x40]
	0x03B19280 LDP X22, X21, [X31 + 0x30]
	0x03B19284 LDP X24, X23, [X31 + 0x20]
	0x03B19288 LDP X26, X25, [X31 + 0x10]
	0x03B1928C LDP X30, X27, [X31], #0x50
	0x03B19290 B 0x2A1368C
	0x03B19294 BL 0x1C16F20
	0x03B19298 SUB X31, X31, 0x30
	0x03B1929C STP X30, X21, [X31 + 0x10]
	0x03B192A0 STP X20, X19, [X31 + 0x20]
	0x03B192A4 ADRP X21, 0x8C9000
	0x03B192A8 LDRB W8, [X21 + 0x6CB]
	0x03B192AC MOV W19, W1
	0x03B192B0 MOV X20, X0
	0x03B192B4 TBNZ X8, 0x0, 0x3B192CC
	0x03B192B8 ADRP X0, 0x640000
	0x03B192BC LDR X0, [X0 + 0xA00]
	0x03B192C0 BL 0x1C16CF4
	0x03B192C4 MOVZ W8, 0x1
	0x03B192C8 STRB W8, [X21 + 0x6CB]
	0x03B192CC STR X31, [X31 + 0x8]
	0x03B192D0 LDR X0, [X20 + 0x20]
	0x03B192D4 CBNZ X0, 0x3B192E8
	0x03B192D8 MOV X0, X20
	0x03B192DC BL 0x3B18F98
	0x03B192E0 LDR X0, [X20 + 0x20]
	0x03B192E4 CBZ X0, 0x3B1931C
	0x03B192E8 ADRP X8, 0x640000
	0x03B192EC LDR X8, [X8 + 0xA00]
	0x03B192F0 ADD X2, X31, 0x8
	0x03B192F4 MOV W1, W19
	0x03B192F8 LDR X3, [X8]

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x8CA000
	013 Move W8, [X22+1728]
	014 Move X19, X3
	015 Move W23, W2
	016 Move W20, W1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {39}
	022 Move X0, 0x5DD000
	023 Move X0, [X0+2520]
	024 Call 0x1C17CF4
	025 Move X0, 0x640000
	026 Move X0, [X0+4072]
	027 Call 0x1C17CF4
	028 Move X0, 0x640000
	029 Move X0, [X0+4080]
	030 Call 0x1C17CF4
	031 Move X0, 0x5DB000
	032 Move X0, [X0+1432]
	033 Call 0x1C17CF4
	034 Move X0, 0x640000
	035 Move X0, [X0+1576]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X22+1728], W8
	039 Compare X21, 0
	040 JumpIfEqual {131}
	041 Move W8, [X21+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X25, 0x640000
	044 Move X26, 0x5DB000
	045 Move X27, 0x640000
	046 Move X28, 0x5DD000
	047 Move X25, [X25+4080]
	048 Move X26, [X26+1432]
	049 Move X27, [X27+1576]
	050 Move X28, [X28+2520]
	051 Move W22, W31
	052 And W23, W23, 1
	053 Move X2, [X25]
	054 Move X0, X21
	055 Move W1, W22
	056 Call List`1<Object>.get_Item, X0, X1
	057 Move X8, [X26]
	058 Move X24, X0
	059 Move W9, [X8+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X8
	063 Call 0x1C17DFC
	064 Move X0, X24
	065 Move X1, X31
	066 Move X2, X31
	067 Call Object.op_Equality, X0, X1
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfEqual {110}
	072 Compare X24, 0
	073 JumpIfEqual {131}
	074 Move X0, X24
	075 Move X1, X31
	076 Call TMP_Asset.get_instanceID, X0
	077 Move X8, [X27]
	078 Move X8, [X8+184]
	079 Move X8, [X8]
	080 Compare X8, 0
	081 JumpIfEqual {131}
	082 Move X2, [X28]
	083 Move W1, W0
	084 Move X0, X8
	085 Call HashSet`1<Int32>.Add, X0, X1
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {110}
	090 Move X0, X24
	091 Move W1, W20
	092 Move W2, W23
	093 Move X3, X19
	094 Call TMP_SpriteAsset.SearchForSpriteByHashCodeInternal, X0, X1, X2, X3
	095 Move X8, [X26]
	096 Move X24, X0
	097 Move W9, [X8+224]
	098 Compare W9, 0
	099 JumpIfNotEqual {102}
	100 Move X0, X8
	101 Call 0x1C17DFC
	102 Move X0, X24
	103 Move X1, X31
	104 Move X2, X31
	105 Call Object.op_Inequality, X0, X1
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfEqual {118}
	110 Move W8, [X21+24]
	111 Add W22, W22, 1
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X24, X31
	114 Move TEMP, 0
	115 Not TEMP
	116 Move W8, TEMP
	117 Move [X19], W8
	118 Move X0, X24
	119 Move X20, [X31+80]
	120 Move X19, [X31+88]
	121 Move X22, [X31+64]
	122 Move X21, [X31+72]
	123 Move X24, [X31+48]
	124 Move X23, [X31+56]
	125 Move X26, [X31+32]
	126 Move X25, [X31+40]
	127 Move X28, [X31+16]
	128 Move X27, [X31+24]
	129 Move X30, [X31+96]
	130 Return X0
	131 Call 0x1C17F20

Method: TMPro.TMP_SpriteAsset SearchForSpriteByHashCodeInternal(TMPro.TMP_SpriteAsset spriteAsset, System.Int32 hashCode, System.Boolean searchFallbacks, out System.Int32 spriteIndex)

Disassembly:
	0x03B192FC BL 0x2A150AC
	0x03B19300 LDR X8, [X31 + 0x8]
	0x03B19304 LDP X20, X19, [X31 + 0x20]
	0x03B19308 LDP X30, X21, [X31 + 0x10]
	0x03B1930C ANDS W31, W0, 0x1
	0x03B19310 CSEL X0, X8, X31, NE
	0x03B19314 ADD X31, X31, 0x30
	0x03B19318 RET
	0x03B1931C BL 0x1C16F20
	0x03B19320 SUB X31, X31, 0x30
	0x03B19324 STP X30, X21, [X31 + 0x10]
	0x03B19328 STP X20, X19, [X31 + 0x20]
	0x03B1932C ADRP X21, 0x8C9000
	0x03B19330 LDRB W8, [X21 + 0x6CC]
	0x03B19334 MOV X20, X1
	0x03B19338 MOV X19, X0
	0x03B1933C TBNZ X8, 0x0, 0x3B19360
	0x03B19340 ADRP X0, 0x640000
	0x03B19344 LDR X0, [X0 + 0xA00]
	0x03B19348 BL 0x1C16CF4
	0x03B1934C ADRP X0, 0x640000
	0x03B19350 LDR X0, [X0 + 0x1F0]
	0x03B19354 BL 0x1C16CF4
	0x03B19358 MOVZ W8, 0x1
	0x03B1935C STRB W8, [X21 + 0x6CC]
	0x03B19360 STR X31, [X31 + 0x8]
	0x03B19364 ADRP X21, 0x640000
	0x03B19368 LDR X8, [X19 + 0x20]
	0x03B1936C LDR X21, [X21 + 0x1F0]
	0x03B19370 CBNZ X8, 0x3B1937C
	0x03B19374 MOV X0, X19
	0x03B19378 BL 0x3B18F98
	0x03B1937C LDR X0, [X21]
	0x03B19380 LDR W8, [X0 + 0xE0]
	0x03B19384 CBNZ W8, 0x3B1938C
	0x03B19388 BL 0x1C16DFC
	0x03B1938C MOV X0, X20
	0x03B19390 BL 0x3B18CD8
	0x03B19394 LDR X8, [X19 + 0x20]
	0x03B19398 CBZ X8, 0x3B193D4
	0x03B1939C ADRP X9, 0x640000
	0x03B193A0 LDR X9, [X9 + 0xA00]
	0x03B193A4 MOV W1, W0
	0x03B193A8 ADD X2, X31, 0x8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x8CA000
	008 Move W8, [X23+1729]
	009 Move X19, X3
	010 Move W22, W2
	011 Move W20, W1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x640000
	018 Move X0, [X0+4072]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+1729], W8
	022 Compare X21, 0
	023 JumpIfEqual {62}
	024 Move X0, X21
	025 Move W1, W20
	026 Call TMP_SpriteAsset.GetSpriteIndexFromHashcode, X0, X1
	027 Add W31, W0, 1
	028 Move [X19], W0
	029 Move TEMP, X22
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {49}
	033 Move X0, [X21+216]
	034 Compare X0, 0
	035 JumpIfEqual {49}
	036 Move W8, [X0+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move W1, W20
	039 Move X3, X19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move W2, 1
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Call TMP_SpriteAsset.SearchForSpriteByHashCodeInternal, X0, X1, X2, X3
	048 Return X0
	049 Move X21, X31
	050 Move TEMP, 0
	051 Not TEMP
	052 Move W8, TEMP
	053 Move [X19], W8
	054 Move X0, X21
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return X0
	062 Call 0x1C17F20

Method: System.Void SortGlyphTable()

Disassembly:
	0x03B193AC MOV X0, X8
	0x03B193B0 LDR X3, [X9]
	0x03B193B4 BL 0x2A150AC
	0x03B193B8 LDR X8, [X31 + 0x8]
	0x03B193BC LDP X20, X19, [X31 + 0x20]
	0x03B193C0 LDP X30, X21, [X31 + 0x10]
	0x03B193C4 ANDS W31, W0, 0x1
	0x03B193C8 CSEL X0, X8, X31, NE
	0x03B193CC ADD X31, X31, 0x30
	0x03B193D0 RET
	0x03B193D4 BL 0x1C16F20
	0x03B193D8 B 0x3B18F98
	0x03B193DC STR X30, [X31 - 0x30]!
	0x03B193E0 STP X22, X21, [X31 + 0x10]
	0x03B193E4 STP X20, X19, [X31 + 0x20]
	0x03B193E8 ADRP X21, 0x8C9000
	0x03B193EC ADRP X22, 0x640000
	0x03B193F0 ADRP X20, 0x640000
	0x03B193F4 LDRB W8, [X21 + 0x6CE]
	0x03B193F8 LDR X22, [X22 + 0xA08]
	0x03B193FC LDR X20, [X20 + 0xA10]
	0x03B19400 MOV X19, X0
	0x03B19404 TBNZ X8, 0x0, 0x3B19428
	0x03B19408 ADRP X0, 0x640000
	0x03B1940C LDR X0, [X0 + 0xA10]
	0x03B19410 BL 0x1C16CF4
	0x03B19414 ADRP X0, 0x640000
	0x03B19418 LDR X0, [X0 + 0xA08]
	0x03B1941C BL 0x1C16CF4
	0x03B19420 MOVZ W8, 0x1
	0x03B19424 STRB W8, [X21 + 0x6CE]
	0x03B19428 LDR X0, [X22]
	0x03B1942C BL 0x1C16F10
	0x03B19430 LDR X2, [X20]
	0x03B19434 MOVZ W1, 0x1
	0x03B19438 MOV X20, X0
	0x03B1943C BL 0x301B830
	0x03B19440 STR X20, [X19 + 0x18]
	0x03B19444 MOV X0, X19
	0x03B19448 LDP X20, X19, [X31 + 0x20]
	0x03B1944C LDP X22, X21, [X31 + 0x10]
	0x03B19450 MOV X1, X31
	0x03B19454 LDR X30, [X31], #0x30
	0x03B19458 B 0x3C36D2C
	0x03B1945C LDR X0, [X0 + 0x20]
	0x03B19460 RET
	0x03B19464 STR X1, [X0 + 0x20]
	0x03B19468 RET
	0x03B1946C LDR X0, [X0 + 0x28]
	0x03B19470 RET
	0x03B19474 STR X1, [X0 + 0x28]
	0x03B19478 RET
	0x03B1947C LDR X1, [X0 + 0x38]
	0x03B19480 B 0x3B19484
	0x03B19484 STR X30, [X31 - 0x30]!
	0x03B19488 STP X22, X21, [X31 + 0x10]
	0x03B1948C STP X20, X19, [X31 + 0x20]
	0x03B19490 ADRP X21, 0x8C9000
	0x03B19494 ADRP X22, 0x5DA000
	0x03B19498 LDRB W8, [X21 + 0x6D9]
	0x03B1949C LDR X22, [X22 + 0x598]
	0x03B194A0 MOV X20, X1
	0x03B194A4 MOV X19, X0
	0x03B194A8 TBNZ X8, 0x0, 0x3B194CC
	0x03B194AC ADRP X0, 0x606000
	0x03B194B0 LDR X0, [X0 + 0x5A0]
	0x03B194B4 BL 0x1C16CF4
	0x03B194B8 ADRP X0, 0x5DA000
	0x03B194BC LDR X0, [X0 + 0x598]
	0x03B194C0 BL 0x1C16CF4
	0x03B194C4 MOVZ W8, 0x1
	0x03B194C8 STRB W8, [X21 + 0x6D9]
	0x03B194CC LDR X0, [X22]
	0x03B194D0 LDR X21, [X19 + 0x58]
	0x03B194D4 LDR W8, [X0 + 0xE0]
	0x03B194D8 CBNZ W8, 0x3B194E0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x8CA000
	008 Move W8, [X20+1730]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {34}
	014 Move X0, 0x641000
	015 Move X0, [X0+2376]
	016 Call 0x1C17CF4
	017 Move X0, 0x641000
	018 Move X0, [X0+2384]
	019 Call 0x1C17CF4
	020 Move X0, 0x641000
	021 Move X0, [X0+2392]
	022 Call 0x1C17CF4
	023 Move X0, 0x641000
	024 Move X0, [X0+2280]
	025 Call 0x1C17CF4
	026 Move X0, 0x641000
	027 Move X0, [X0+2400]
	028 Call 0x1C17CF4
	029 Move X0, 0x641000
	030 Move X0, [X0+2408]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+1730], W8
	034 Move X20, [X19+192]
	035 Compare X20, 0
	036 JumpIfEqual {84}
	037 Move W8, [X20+24]
	038 Compare W8, 0
	039 JumpIfEqual {84}
	040 Move X23, 0x641000
	041 Move X23, [X23+2408]
	042 Move X0, [X23]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {48}
	046 Call 0x1C17DFC
	047 Move X0, [X23]
	048 Move X8, [X0+184]
	049 Move X21, [X8+8]
	050 Compare X21, 0
	051 JumpIfNotEqual {73}
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {57}
	055 Call 0x1C17DFC
	056 Move X0, [X23]
	057 Move X9, 0x641000
	058 Move X8, [X0+184]
	059 Move X9, [X9+2392]
	060 Move X22, [X8]
	061 Move X0, [X9]
	062 Call 0x1C17F10
	063 Move X8, 0x641000
	064 Move X8, [X8+2400]
	065 Move X1, X22
	066 Move X3, X31
	067 Move X21, X0
	068 Move X2, [X8]
	069 Call Func`2<Object, UInt32>..ctor, X0, X1, X2
	070 Move X8, [X23]
	071 Move X8, [X8+184]
	072 Move [X8+8], X21
	073 Move X8, 0x641000
	074 Move X8, [X8+2376]
	075 Move X0, X20
	076 Move X1, X21
	077 Move X2, [X8]
	078 Call Enumerable.OrderBy, X0, X1
	079 Move X8, 0x641000
	080 Move X8, [X8+2384]
	081 Move X1, [X8]
	082 Call Enumerable.ToList, X0
	083 Move [X19+192], X0
	084 Move X20, [X31+32]
	085 Move X19, [X31+40]
	086 Move X22, [X31+16]
	087 Move X21, [X31+24]
	088 Move X30, [X31+48]
	089 Move X23, [X31+56]
	090 Return 

Method: System.Void SortCharacterTable()

Disassembly:
	0x03B194DC BL 0x1C16DFC
	0x03B194E0 MOV X0, X21
	0x03B194E4 MOV X1, X31
	0x03B194E8 MOV X2, X31
	0x03B194EC BL 0x3C3883C
	0x03B194F0 TBZ X0, 0x0, 0x3B1950C
	0x03B194F4 ADRP X8, 0x606000
	0x03B194F8 LDR X8, [X8 + 0x5A0]
	0x03B194FC MOV X0, X19
	0x03B19500 LDR X1, [X8]
	0x03B19504 BL 0x21A3894
	0x03B19508 STR X0, [X19 + 0x58]
	0x03B1950C LDR X0, [X22]
	0x03B19510 LDR X21, [X19 + 0x30]
	0x03B19514 LDR W8, [X0 + 0xE0]
	0x03B19518 CBNZ W8, 0x3B19520
	0x03B1951C BL 0x1C16DFC
	0x03B19520 MOV X0, X21
	0x03B19524 MOV X1, X31
	0x03B19528 MOV X2, X31
	0x03B1952C BL 0x3C3883C
	0x03B19530 TBNZ X0, 0x0, 0x3B19568
	0x03B19534 LDR X0, [X19 + 0x30]
	0x03B19538 CBZ X0, 0x3B195A8
	0x03B1953C MOV X1, X31
	0x03B19540 BL 0x3C385F8
	0x03B19544 CBZ X20, 0x3B195A8
	0x03B19548 MOV W21, W0
	0x03B1954C MOV X0, X20
	0x03B19550 MOV X1, X31
	0x03B19554 BL 0x3C385F8
	0x03B19558 CMP W21, W0
	0x03B1955C B.NE 0x3B19568
	0x03B19560 LDR X0, [X19 + 0x30]
	0x03B19564 B 0x3B19574
	0x03B19568 MOV X1, X20
	0x03B1956C BL 0x3B1A33C
	0x03B19570 STR X0, [X19 + 0x30]
	0x03B19574 STR X0, [X19 + 0x38]
	0x03B19578 MOV X0, X19
	0x03B1957C BL 0x3B19620
	0x03B19580 MOV X0, X19
	0x03B19584 STR S0, [X19 + 0x54]
	0x03B19588 BL 0x3B19694
	0x03B1958C MOV X0, X19
	0x03B19590 BL 0x3B1A510
	0x03B19594 LDR X0, [X19 + 0x38]
	0x03B19598 LDP X20, X19, [X31 + 0x20]
	0x03B1959C LDP X22, X21, [X31 + 0x10]
	0x03B195A0 LDR X30, [X31], #0x30
	0x03B195A4 RET
	0x03B195A8 BL 0x1C16F20
	0x03B195AC STP X30, X21, [X31 - 0x20]!
	0x03B195B0 STP X20, X19, [X31 + 0x10]
	0x03B195B4 MOV X19, X0
	0x03B195B8 LDR X0, [X0 + 0x38]
	0x03B195BC CBZ X0, 0x3B1961C
	0x03B195C0 MOV X20, X1
	0x03B195C4 MOV X1, X31
	0x03B195C8 BL 0x3C385F8
	0x03B195CC CBZ X20, 0x3B1961C
	0x03B195D0 MOV W21, W0
	0x03B195D4 MOV X0, X20
	0x03B195D8 MOV X1, X31
	0x03B195DC BL 0x3C385F8
	0x03B195E0 CMP W21, W0
	0x03B195E4 B.NE 0x3B195F4
	0x03B195E8 LDP X20, X19, [X31 + 0x10]
	0x03B195EC LDP X30, X21, [X31], #0x20
	0x03B195F0 RET
	0x03B195F4 MOV X0, X19
	0x03B195F8 STP X20, X20, [X19 + 0x30]
	0x03B195FC BL 0x3B19620
	0x03B19600 MOV X0, X19
	0x03B19604 STR S0, [X19 + 0x54]
	0x03B19608 BL 0x3B19694
	0x03B1960C MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x8CA000
	008 Move W8, [X20+1731]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {34}
	014 Move X0, 0x641000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move X0, 0x641000
	018 Move X0, [X0+2424]
	019 Call 0x1C17CF4
	020 Move X0, 0x641000
	021 Move X0, [X0+2432]
	022 Call 0x1C17CF4
	023 Move X0, 0x641000
	024 Move X0, [X0+552]
	025 Call 0x1C17CF4
	026 Move X0, 0x641000
	027 Move X0, [X0+2440]
	028 Call 0x1C17CF4
	029 Move X0, 0x641000
	030 Move X0, [X0+2408]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+1731], W8
	034 Move X20, [X19+176]
	035 Compare X20, 0
	036 JumpIfEqual {83}
	037 Move W8, [X20+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X23, 0x641000
	040 Move X23, [X23+2408]
	041 Move X0, [X23]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X23]
	047 Move X8, [X0+184]
	048 Move X21, [X8+16]
	049 Compare X21, 0
	050 JumpIfNotEqual {72}
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X23]
	056 Move X9, 0x641000
	057 Move X8, [X0+184]
	058 Move X9, [X9+2432]
	059 Move X22, [X8]
	060 Move X0, [X9]
	061 Call 0x1C17F10
	062 Move X8, 0x641000
	063 Move X8, [X8+2440]
	064 Move X1, X22
	065 Move X3, X31
	066 Move X21, X0
	067 Move X2, [X8]
	068 Call Func`2<Object, UInt32>..ctor, X0, X1, X2
	069 Move X8, [X23]
	070 Move X8, [X8+184]
	071 Move [X8+16], X21
	072 Move X8, 0x641000
	073 Move X8, [X8+2416]
	074 Move X0, X20
	075 Move X1, X21
	076 Move X2, [X8]
	077 Call Enumerable.OrderBy, X0, X1
	078 Move X8, 0x641000
	079 Move X8, [X8+2424]
	080 Move X1, [X8]
	081 Call Enumerable.ToList, X0
	082 Move [X19+176], X0
	083 Move X20, [X31+32]
	084 Move X19, [X31+40]
	085 Move X22, [X31+16]
	086 Move X21, [X31+24]
	087 Move X30, [X31+48]
	088 Move X23, [X31+56]
	089 Return 

Method: System.Void SortGlyphAndCharacterTables()

Disassembly:
	0x03B19610 LDP X20, X19, [X31 + 0x10]
	0x03B19614 LDP X30, X21, [X31], #0x20
	0x03B19618 B 0x3B1A510
	0x03B1961C BL 0x1C16F20
	0x03B19620 STR X30, [X31 - 0x20]!
	0x03B19624 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call TMP_SpriteAsset.SortGlyphTable, X0
	005 Move X0, X19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Call TMP_SpriteAsset.SortCharacterTable, X0
	009 Return 

Method: System.Void UpgradeSpriteAsset()

Disassembly:
	0x03B18258 LDR X8, [X27]
	0x03B1825C LDR X8, [X8 + 0xB8]
	0x03B18260 LDR X8, [X8]
	0x03B18264 CBZ X8, 0x3B182F8
	0x03B18268 LDR X2, [X28]
	0x03B1826C MOV W1, W0
	0x03B18270 MOV X0, X8
	0x03B18274 BL 0x2DAB03C
	0x03B18278 TBZ X0, 0x0, 0x3B182BC
	0x03B1827C MOV X0, X24
	0x03B18280 MOV W1, W20
	0x03B18284 MOV W2, W23
	0x03B18288 MOV X3, X19
	0x03B1828C BL 0x3B182FC
	0x03B18290 LDR X8, [X26]
	0x03B18294 MOV X24, X0
	0x03B18298 LDR W9, [X8 + 0xE0]
	0x03B1829C CBNZ W9, 0x3B182A8
	0x03B182A0 MOV X0, X8
	0x03B182A4 BL 0x1C16DFC
	0x03B182A8 MOV X0, X24
	0x03B182AC MOV X1, X31
	0x03B182B0 MOV X2, X31
	0x03B182B4 BL 0x3C354F8
	0x03B182B8 TBNZ X0, 0x0, 0x3B182D8
	0x03B182BC LDR W8, [X21 + 0x18]
	0x03B182C0 ADD W22, W22, 0x1
	0x03B182C4 CMP W22, W8
	0x03B182C8 B.LT 0x3B1820C
	0x03B182CC MOV X24, X31
	0x03B182D0 MOVN W8, 0x0
	0x03B182D4 STR W8, [X19]
	0x03B182D8 MOV X0, X24
	0x03B182DC LDP X20, X19, [X31 + 0x50]
	0x03B182E0 LDP X22, X21, [X31 + 0x40]
	0x03B182E4 LDP X24, X23, [X31 + 0x30]
	0x03B182E8 LDP X26, X25, [X31 + 0x20]
	0x03B182EC LDP X28, X27, [X31 + 0x10]
	0x03B182F0 LDR X30, [X31], #0x60
	0x03B182F4 RET
	0x03B182F8 BL 0x1C16F20
	0x03B182FC STP X30, X23, [X31 - 0x30]!
	0x03B18300 STP X22, X21, [X31 + 0x10]
	0x03B18304 STP X20, X19, [X31 + 0x20]
	0x03B18308 ADRP X23, 0x8CA000
	0x03B1830C LDRB W8, [X23 + 0x6C1]
	0x03B18310 MOV X19, X3
	0x03B18314 MOV W22, W2
	0x03B18318 MOV W20, W1
	0x03B1831C MOV X21, X0
	0x03B18320 TBNZ X8, 0x0, 0x3B18338
	0x03B18324 ADRP X0, 0x640000
	0x03B18328 LDR X0, [X0 + 0xFE8]
	0x03B1832C BL 0x1C16CF4
	0x03B18330 MOVZ W8, 0x1
	0x03B18334 STRB W8, [X23 + 0x6C1]
	0x03B18338 CBZ X21, 0x3B183A8
	0x03B1833C MOV X0, X21
	0x03B18340 MOV W1, W20
	0x03B18344 BL 0x3B177D0
	0x03B18348 ADDS W31, W0, 0x1
	0x03B1834C STR W0, [X19]
	0x03B18350 B.NE 0x3B18394
	0x03B18354 TBZ X22, 0x0, 0x3B18388
	0x03B18358 LDR X0, [X21 + 0xD8]
	0x03B1835C CBZ X0, 0x3B18388
	0x03B18360 LDR W8, [X0 + 0x18]
	0x03B18364 CMP W8, 0x1
	0x03B18368 B.LT 0x3B18388
	0x03B1836C MOV W1, W20
	0x03B18370 MOV X3, X19
	0x03B18374 LDP X20, X19, [X31 + 0x20]
	0x03B18378 LDP X22, X21, [X31 + 0x10]
	0x03B1837C MOVZ W2, 0x1
	0x03B18380 LDP X30, X23, [X31], #0x30
	0x03B18384 B 0x3B1815C
	0x03B18388 MOV X21, X31
	0x03B1838C MOVN W8, 0x0
	0x03B18390 STR W8, [X19]
	0x03B18394 MOV X0, X21
	0x03B18398 LDP X20, X19, [X31 + 0x20]
	0x03B1839C LDP X22, X21, [X31 + 0x10]
	0x03B183A0 LDP X30, X23, [X31], #0x30
	0x03B183A4 RET
	0x03B183A8 BL 0x1C16F20
	0x03B183AC STP X30, X23, [X31 - 0x30]!
	0x03B183B0 STP X22, X21, [X31 + 0x10]
	0x03B183B4 STP X20, X19, [X31 + 0x20]
	0x03B183B8 ADRP X20, 0x8CA000
	0x03B183BC LDRB W8, [X20 + 0x6C2]
	0x03B183C0 MOV X19, X0
	0x03B183C4 TBNZ X8, 0x0, 0x3B18418
	0x03B183C8 ADRP X0, 0x641000
	0x03B183CC LDR X0, [X0 + 0x948]
	0x03B183D0 BL 0x1C16CF4
	0x03B183D4 ADRP X0, 0x641000
	0x03B183D8 LDR X0, [X0 + 0x950]
	0x03B183DC BL 0x1C16CF4
	0x03B183E0 ADRP X0, 0x641000
	0x03B183E4 LDR X0, [X0 + 0x958]
	0x03B183E8 BL 0x1C16CF4
	0x03B183EC ADRP X0, 0x641000
	0x03B183F0 LDR X0, [X0 + 0x8E8]
	0x03B183F4 BL 0x1C16CF4
	0x03B183F8 ADRP X0, 0x641000
	0x03B183FC LDR X0, [X0 + 0x960]
	0x03B18400 BL 0x1C16CF4
	0x03B18404 ADRP X0, 0x641000
	0x03B18408 LDR X0, [X0 + 0x968]
	0x03B1840C BL 0x1C16CF4
	0x03B18410 MOVZ W8, 0x1
	0x03B18414 STRB W8, [X20 + 0x6C2]
	0x03B18418 LDR X20, [X19 + 0xC0]
	0x03B1841C CBZ X20, 0x3B184CC
	0x03B18420 LDR W8, [X20 + 0x18]
	0x03B18424 CBZ W8, 0x3B184CC
	0x03B18428 ADRP X23, 0x641000
	0x03B1842C LDR X23, [X23 + 0x968]
	0x03B18430 LDR X0, [X23]
	0x03B18434 LDR W8, [X0 + 0xE0]
	0x03B18438 CBNZ W8, 0x3B18444
	0x03B1843C BL 0x1C16DFC
	0x03B18440 LDR X0, [X23]
	0x03B18444 LDR X8, [X0 + 0xB8]
	0x03B18448 LDR X21, [X8 + 0x8]
	0x03B1844C CBNZ X21, 0x3B184A0
	0x03B18450 LDR W8, [X0 + 0xE0]
	0x03B18454 CBNZ W8, 0x3B18460
	0x03B18458 BL 0x1C16DFC
	0x03B1845C LDR X0, [X23]
	0x03B18460 ADRP X9, 0x641000
	0x03B18464 LDR X8, [X0 + 0xB8]
	0x03B18468 LDR X9, [X9 + 0x958]
	0x03B1846C LDR X22, [X8]
	0x03B18470 LDR X0, [X9]
	0x03B18474 BL 0x1C16F10
	0x03B18478 ADRP X8, 0x641000
	0x03B1847C LDR X8, [X8 + 0x960]
	0x03B18480 MOV X1, X22
	0x03B18484 MOV X3, X31
	0x03B18488 MOV X21, X0
	0x03B1848C LDR X2, [X8]
	0x03B18490 BL 0x2D30E18
	0x03B18494 LDR X8, [X23]
	0x03B18498 LDR X8, [X8 + 0xB8]
	0x03B1849C STR X21, [X8 + 0x8]
	0x03B184A0 ADRP X8, 0x641000
	0x03B184A4 LDR X8, [X8 + 0x948]
	0x03B184A8 MOV X0, X20
	0x03B184AC MOV X1, X21
	0x03B184B0 LDR X2, [X8]
	0x03B184B4 BL 0x21C9CA0
	0x03B184B8 ADRP X8, 0x641000
	0x03B184BC LDR X8, [X8 + 0x950]
	0x03B184C0 LDR X1, [X8]
	0x03B184C4 BL 0x21D79F4
	0x03B184C8 STR X0, [X19 + 0xC0]
	0x03B184CC LDP X20, X19, [X31 + 0x20]
	0x03B184D0 LDP X22, X21, [X31 + 0x10]
	0x03B184D4 LDP X30, X23, [X31], #0x30
	0x03B184D8 RET
	0x03B184DC STP X30, X23, [X31 - 0x30]!
	0x03B184E0 STP X22, X21, [X31 + 0x10]
	0x03B184E4 STP X20, X19, [X31 + 0x20]
	0x03B184E8 ADRP X20, 0x8CA000
	0x03B184EC LDRB W8, [X20 + 0x6C3]
	0x03B184F0 MOV X19, X0
	0x03B184F4 TBNZ X8, 0x0, 0x3B18548
	0x03B184F8 ADRP X0, 0x641000
	0x03B184FC LDR X0, [X0 + 0x970]
	0x03B18500 BL 0x1C16CF4
	0x03B18504 ADRP X0, 0x641000
	0x03B18508 LDR X0, [X0 + 0x978]
	0x03B1850C BL 0x1C16CF4
	0x03B18510 ADRP X0, 0x641000
	0x03B18514 LDR X0, [X0 + 0x980]
	0x03B18518 BL 0x1C16CF4
	0x03B1851C ADRP X0, 0x641000
	0x03B18520 LDR X0, [X0 + 0x228]
	0x03B18524 BL 0x1C16CF4
	0x03B18528 ADRP X0, 0x641000
	0x03B1852C LDR X0, [X0 + 0x988]
	0x03B18530 BL 0x1C16CF4
	0x03B18534 ADRP X0, 0x641000
	0x03B18538 LDR X0, [X0 + 0x968]
	0x03B1853C BL 0x1C16CF4
	0x03B18540 MOVZ W8, 0x1
	0x03B18544 STRB W8, [X20 + 0x6C3]
	0x03B18548 LDR X20, [X19 + 0xB0]
	0x03B1854C CBZ X20, 0x3B18600
	0x03B18550 LDR W8, [X20 + 0x18]
	0x03B18554 CMP W8, 0x1
	0x03B18558 B.LT 0x3B18600
	0x03B1855C ADRP X23, 0x641000
	0x03B18560 LDR X23, [X23 + 0x968]
	0x03B18564 LDR X0, [X23]
	0x03B18568 LDR W8, [X0 + 0xE0]
	0x03B1856C CBNZ W8, 0x3B18578
	0x03B18570 BL 0x1C16DFC
	0x03B18574 LDR X0, [X23]
	0x03B18578 LDR X8, [X0 + 0xB8]
	0x03B1857C LDR X21, [X8 + 0x10]
	0x03B18580 CBNZ X21, 0x3B185D4
	0x03B18584 LDR W8, [X0 + 0xE0]
	0x03B18588 CBNZ W8, 0x3B18594
	0x03B1858C BL 0x1C16DFC
	0x03B18590 LDR X0, [X23]
	0x03B18594 ADRP X9, 0x641000
	0x03B18598 LDR X8, [X0 + 0xB8]
	0x03B1859C LDR X9, [X9 + 0x980]
	0x03B185A0 LDR X22, [X8]
	0x03B185A4 LDR X0, [X9]
	0x03B185A8 BL 0x1C16F10
	0x03B185AC ADRP X8, 0x641000
	0x03B185B0 LDR X8, [X8 + 0x988]
	0x03B185B4 MOV X1, X22
	0x03B185B8 MOV X3, X31
	0x03B185BC MOV X21, X0
	0x03B185C0 LDR X2, [X8]
	0x03B185C4 BL 0x2D30E18
	0x03B185C8 LDR X8, [X23]
	0x03B185CC LDR X8, [X8 + 0xB8]
	0x03B185D0 STR X21, [X8 + 0x10]
	0x03B185D4 ADRP X8, 0x641000
	0x03B185D8 LDR X8, [X8 + 0x970]
	0x03B185DC MOV X0, X20
	0x03B185E0 MOV X1, X21
	0x03B185E4 LDR X2, [X8]
	0x03B185E8 BL 0x21C9CA0
	0x03B185EC ADRP X8, 0x641000
	0x03B185F0 LDR X8, [X8 + 0x978]
	0x03B185F4 LDR X1, [X8]
	0x03B185F8 BL 0x21D79F4
	0x03B185FC STR X0, [X19 + 0xB0]
	0x03B18600 LDP X20, X19, [X31 + 0x20]
	0x03B18604 LDP X22, X21, [X31 + 0x10]
	0x03B18608 LDP X30, X23, [X31], #0x30
	0x03B1860C RET
	0x03B18610 STP X30, X19, [X31 - 0x10]!
	0x03B18614 MOV X19, X0
	0x03B18618 BL 0x3B183AC
	0x03B1861C MOV X0, X19
	0x03B18620 LDP X30, X19, [X31], #0x10
	0x03B18624 B 0x3B184DC
	0x03B18628 MOV X1, X31
	0x03B1862C B 0x3C9C500
	0x03B18630 STP X30, X19, [X31 - 0x10]!
	0x03B18634 MOV X1, X31
	0x03B18638 MOV X19, X0
	0x03B1863C BL 0x33BDD8C
	0x03B18640 MOVZ W8, 0x2
	0x03B18644 STRB W8, [X19 + 0x10]
	0x03B18648 LDP X30, X19, [X31], #0x10
	0x03B1864C RET
	0x03B18650 STP X30, X21, [X31 - 0x20]!
	0x03B18654 STP X20, X19, [X31 + 0x10]
	0x03B18658 ADRP X21, 0x8CA000
	0x03B1865C LDRB W8, [X21 + 0x6C7]
	0x03B18660 MOV X20, X1
	0x03B18664 MOV X19, X0
	0x03B18668 TBNZ X8, 0x0, 0x3B18680
	0x03B1866C ADRP X0, 0x641000
	0x03B18670 LDR X0, [X0 + 0x1F0]
	0x03B18674 BL 0x1C16CF4
	0x03B18678 MOVZ W8, 0x1
	0x03B1867C STRB W8, [X21 + 0x6C7]
	0x03B18680 LDR X1, [X19 + 0x30]
	0x03B18684 MOV X0, X20
	0x03B18688 MOV X2, X31
	0x03B1868C BL 0x321BA08
	0x03B18690 TBNZ X0, 0x0, 0x3B186BC
	0x03B18694 ADRP X8, 0x641000
	0x03B18698 LDR X8, [X8 + 0x1F0]
	0x03B1869C STR X20, [X19 + 0x30]
	0x03B186A0 LDR X0, [X8]
	0x03B186A4 LDR W8, [X0 + 0xE0]
	0x03B186A8 CBNZ W8, 0x3B186B0
	0x03B186AC BL 0x1C16DFC
	0x03B186B0 MOV X0, X20
	0x03B186B4 BL 0x3B18828
	0x03B186B8 STR W0, [X19 + 0x38]
	0x03B186BC LDP X20, X19, [X31 + 0x10]
	0x03B186C0 LDP X30, X21, [X31], #0x20
	0x03B186C4 RET
	0x03B186C8 STR X30, [X31 - 0x40]!
	0x03B186CC STP X24, X23, [X31 + 0x10]
	0x03B186D0 STP X22, X21, [X31 + 0x20]
	0x03B186D4 STP X20, X19, [X31 + 0x30]
	0x03B186D8 ADRP X23, 0x8CA000
	0x03B186DC ADRP X24, 0x641000
	0x03B186E0 ADRP X20, 0x641000
	0x03B186E4 ADRP X22, 0x641000

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], X29
	003 Move [X31+72], X30
	004 Move [X31+80], X28
	005 Move [X31+88], X27
	006 Move [X31+96], X26
	007 Move [X31+104], X25
	008 Move [X31+112], X24
	009 Move [X31+120], X23
	010 Move [X31+128], X22
	011 Move [X31+136], X21
	012 Move [X31+144], X20
	013 Move [X31+152], X19
	014 Move X21, 0x8CB000
	015 Move X22, 0x641000
	016 Move X20, 0x5DC000
	017 Move W8, [X21+1732]
	018 Move X22, [X22+3056]
	019 Move X20, [X20+2760]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {69}
	025 Move X0, 0x5DC000
	026 Move X0, [X0+2600]
	027 Call 0x1C17CF4
	028 Move X0, 0x642000
	029 Move X0, [X0+2296]
	030 Call 0x1C17CF4
	031 Move X0, 0x642000
	032 Move X0, [X0+2304]
	033 Call 0x1C17CF4
	034 Move X0, 0x642000
	035 Move X0, [X0+2312]
	036 Call 0x1C17CF4
	037 Move X0, 0x642000
	038 Move X0, [X0+2320]
	039 Call 0x1C17CF4
	040 Move X0, 0x642000
	041 Move X0, [X0+2328]
	042 Call 0x1C17CF4
	043 Move X0, 0x642000
	044 Move X0, [X0+2336]
	045 Call 0x1C17CF4
	046 Move X0, 0x5DC000
	047 Move X0, [X0+2760]
	048 Call 0x1C17CF4
	049 Move X0, 0x642000
	050 Move X0, [X0+2344]
	051 Call 0x1C17CF4
	052 Move X0, 0x642000
	053 Move X0, [X0+2352]
	054 Call 0x1C17CF4
	055 Move X0, 0x641000
	056 Move X0, [X0+3056]
	057 Call 0x1C17CF4
	058 Move X0, 0x641000
	059 Move X0, [X0+3184]
	060 Call 0x1C17CF4
	061 Move X0, 0x642000
	062 Move X0, [X0+2360]
	063 Call 0x1C17CF4
	064 Move X0, 0x5E5000
	065 Move X0, [X0+1936]
	066 Call 0x1C17CF4
	067 Move W8, 1
	068 Move [X21+1732], W8
	069 Move X8, [X22]
	070 Move W1, 5
	071 Move [X19+64], X8
	072 Move X0, [X20]
	073 Call 0x1C17D6C
	074 Compare X0, 0
	075 JumpIfEqual {303}
	076 Move W8, [X0+24]
	077 Move X20, X0
	078 Compare W8, 0
	079 JumpIfEqual {320}
	080 Move X8, 0x642000
	081 Move X8, [X8+2360]
	082 Move X0, X19
	083 Move X1, X31
	084 Move X8, [X8]
	085 Move [X20+32], X8
	086 Call Object.get_name, X0
	087 Move W8, [X20+24]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move [X20+40], X0
	091 Move X9, 0x641000
	092 Move X9, [X9+3184]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X9, [X9]
	095 Move [X20+48], X9
	096 Move X9, [X19+64]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move [X20+56], X9
	099 Move X8, 0x5E5000
	100 Move X8, [X8+1936]
	101 Move X21, 0x5DC000
	102 Move X0, X20
	103 Move X1, X31
	104 Move X8, [X8]
	105 Move X21, [X21+2600]
	106 Move [X20+64], X8
	107 Call String.Concat, X0
	108 Move X8, [X21]
	109 Move X20, X0
	110 Move W9, [X8+224]
	111 Compare W9, 0
	112 JumpIfNotEqual {115}
	113 Move X0, X8
	114 Call 0x1C17DFC
	115 Move X0, X20
	116 Move X1, X19
	117 Move X2, X31
	118 Call Debug.Log, X0, X1
	119 Move X8, [X19+176]
	120 Compare X8, 0
	121 JumpIfEqual {303}
	122 Move W2, [X8+24]
	123 Move W9, [X8+28]
	124 Add W9, W9, 1
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move [X8+24], W31
	127 Move [X8+28], W9
	128 Move X0, [X8+16]
	129 Move W1, W31
	130 Move X3, X31
	131 Call Array.Clear, X0, X1, X2
	132 Move X8, [X19+192]
	133 Compare X8, 0
	134 JumpIfEqual {303}
	135 Move W2, [X8+24]
	136 Move W9, [X8+28]
	137 Add W9, W9, 1
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move [X8+24], W31
	140 Move [X8+28], W9
	141 Move X0, [X8+16]
	142 Move W1, W31
	143 Move X3, X31
	144 Call Array.Clear, X0, X1, X2
	145 Move X0, [X19+208]
	146 Compare X0, 0
	147 JumpIfEqual {303}
	148 Move X27, 0x642000
	149 Move X28, 0x642000
	150 Move X27, [X27+2344]
	151 Move X28, [X28+2296]
	152 Move W20, W31
	153 Move W29, 0x7F800000
	154 Move W24, 0x80000000
	155 Move W25, 2
	156 Move W26, 0xFFFE
	157 Move W8, [X0+24]
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Move X8, 0x642000
	160 Move X8, [X8+2336]
	161 Move W1, W20
	162 Move X2, [X8]
	163 Call List`1<Object>.get_Item, X0, X1
	164 Move X8, 0x642000
	165 Move X8, [X8+2352]
	166 Move X21, X0
	167 Move X8, [X8]
	168 Move X0, X8
	169 Call 0x1C17F10
	170 Move X1, X31
	171 Move X22, X0
	172 Call Glyph..ctor, X0
	173 Compare X22, 0
	174 JumpIfEqual {303}
	175 Move X0, X22
	176 Move W1, W20
	177 Move X2, X31
	178 Call Glyph.set_index, X0, X1
	179 Compare X21, 0
	180 JumpIfEqual {303}
	181 Move X8, [X21+80]
	182 Add X0, X31, 40
	183 Move X1, X31
	184 Move [X22+72], X8
	185 Move S0, [X21+28]
	186 Move S1, [X21+32]
	187 Move S2, [X21+36]
	188 Move S3, [X21+40]
	189 Move V4, [X21+44]
	190 Move [X31+40], X31
	191 Move [X31+48], X31
	192 Move [X31+56], W31
	193 Call GlyphMetrics..ctor, X0, V0, V1, V2, V3, V4
	194 NotImplemented "Instruction LDUR not yet implemented."
	195 Move W8, [X31+56]
	196 Add X1, X31, 16
	197 Move X0, X22
	198 Move X2, X31
	199 Move [X31+1], V0
	200 Move [X31+32], W8
	201 Call Glyph.set_metrics, X0, X1
	202 Move S0, [X21+20]
	203 Move S1, [X21+24]
	204 Move S2, [X21+28]
	205 Move S3, [X21+32]
	206 Move S4, W29
	207 Add X0, X31, 0
	208 NotImplemented "Instruction FCVTZS not yet implemented."
	209 NotImplemented "Instruction FCMP not yet implemented."
	210 NotImplemented "Instruction FCVTZS not yet implemented."
	211 NotImplemented "Instruction CSEL not yet implemented."
	212 NotImplemented "Instruction FCMP not yet implemented."
	213 NotImplemented "Instruction FCVTZS not yet implemented."
	214 NotImplemented "Instruction CSEL not yet implemented."
	215 NotImplemented "Instruction FCMP not yet implemented."
	216 NotImplemented "Instruction FCVTZS not yet implemented."
	217 NotImplemented "Instruction CSEL not yet implemented."
	218 NotImplemented "Instruction FCMP not yet implemented."
	219 NotImplemented "Instruction CSEL not yet implemented."
	220 Move X5, X31
	221 Move [X31], X31
	222 Move [X31+8], X31
	223 Call GlyphRect..ctor, X0, X1, X2, X3, X4
	224 Move X1, [X31]
	225 Move X2, [X31+8]
	226 Move X0, X22
	227 Move X3, X31
	228 Call Glyph.set_glyphRect, X0, X1
	229 Move S0, 1
	230 Move X0, X22
	231 Move X1, X31
	232 Call Glyph.set_scale, X0, V0
	233 Move X0, X22
	234 Move W1, W31
	235 Move X2, X31
	236 Call Glyph.set_atlasIndex, X0, X1
	237 Move X0, [X19+192]
	238 Compare X0, 0
	239 JumpIfEqual {303}
	240 Move X9, 0x642000
	241 Move W10, [X0+28]
	242 Move X8, [X0+16]
	243 Move X9, [X9+2304]
	244 Add W10, W10, 1
	245 Move X9, [X9]
	246 Move [X0+28], W10
	247 Compare X8, 0
	248 JumpIfEqual {303}
	249 NotImplemented "Instruction LDRSW not yet implemented."
	250 Move W11, [X8+24]
	251 NotImplemented "Instruction CMP not yet implemented."
	252 Add W9, W10, 1
	253 Add X8, X8, X10
	254 Move [X0+24], W9
	255 Move [X8+32], X22
	256 Move X8, [X9+32]
	257 Move X1, X22
	258 Move X8, [X8+192]
	259 Move X2, [X8+112]
	260 Call List`1<Object>.AddWithResize, X0, X1
	261 Move X0, [X27]
	262 Call 0x1C17F10
	263 Move X1, X31
	264 Move X23, X0
	265 Call Object..ctor, X0
	266 Move [X23+16], W25
	267 Move [X23+32], X22
	268 Move W8, [X21+68]
	269 Move X0, X23
	270 NotImplemented "Instruction CMP not yet implemented."
	271 NotImplemented "Instruction CSEL not yet implemented."
	272 Move [X23+20], W8
	273 Move X1, [X21+56]
	274 Call TMP_SpriteCharacter.set_name, X0, X1
	275 Move V0, [X21+48]
	276 Move [X23+44], S0
	277 Move X0, [X19+176]
	278 Compare X0, 0
	279 JumpIfEqual {303}
	280 Move W10, [X0+28]
	281 Move X8, [X0+16]
	282 Move X9, [X28]
	283 Add W10, W10, 1
	284 Move [X0+28], W10
	285 Compare X8, 0
	286 JumpIfEqual {303}
	287 NotImplemented "Instruction LDRSW not yet implemented."
	288 Move W11, [X8+24]
	289 NotImplemented "Instruction CMP not yet implemented."
	290 Add W9, W10, 1
	291 Add X8, X8, X10
	292 Move [X0+24], W9
	293 Move [X8+32], X23
	294 Move X8, [X9+32]
	295 Move X1, X23
	296 Move X8, [X8+192]
	297 Move X2, [X8+112]
	298 Call List`1<Object>.AddWithResize, X0, X1
	299 Move X0, [X19+208]
	300 Add W20, W20, 1
	301 Compare X0, 0
	302 JumpIfNotEqual {157}
	303 Call 0x1C17F20
	304 Move X0, X19
	305 Call TMP_SpriteAsset.UpdateLookupTables, X0
	306 Move X20, [X31+144]
	307 Move X19, [X31+152]
	308 Move X22, [X31+128]
	309 Move X21, [X31+136]
	310 Move X24, [X31+112]
	311 Move X23, [X31+120]
	312 Move X26, [X31+96]
	313 Move X25, [X31+104]
	314 Move X28, [X31+80]
	315 Move X27, [X31+88]
	316 Move X29, [X31+64]
	317 Move X30, [X31+72]
	318 Add X31, X31, 160
	319 Return 
	320 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x03B196C8 BL 0x3C323D4
	0x03B196CC TBZ X0, 0x0, 0x3B19734
	0x03B196D0 ADRP X8, 0x5DA000
	0x03B196D4 LDR X8, [X8 + 0x598]
	0x03B196D8 LDR X20, [X19 + 0x70]
	0x03B196DC LDR X0, [X8]
	0x03B196E0 LDR W8, [X0 + 0xE0]
	0x03B196E4 CBNZ W8, 0x3B196EC
	0x03B196E8 BL 0x1C16DFC
	0x03B196EC MOV X0, X20
	0x03B196F0 MOV X1, X31
	0x03B196F4 MOV X2, X31
	0x03B196F8 BL 0x3C354F8
	0x03B196FC TBZ X0, 0x0, 0x3B19734
	0x03B19700 LDR X0, [X19 + 0x70]
	0x03B19704 CBZ X0, 0x3B19740
	0x03B19708 MOVZ W1, 0x1
	0x03B1970C MOV X2, X31
	0x03B19710 BL 0x3AF8D3C
	0x03B19714 LDR X0, [X19 + 0x70]
	0x03B19718 CBZ X0, 0x3B19740
	0x03B1971C LDR X8, [X0]
	0x03B19720 LDP X20, X19, [X31 + 0x10]
	0x03B19724 LDR X2, [X8 + 0x2F8]
	0x03B19728 LDR X1, [X8 + 0x300]
	0x03B1972C LDR X30, [X31], #0x20
	0x03B19730 BR X2
	0x03B19734 LDP X20, X19, [X31 + 0x10]
	0x03B19738 LDR X30, [X31], #0x20
	0x03B1973C RET
	0x03B19740 BL 0x1C16F20
	0x03B19744 B 0x3B1A510
	0x03B19748 LDR X0, [X0 + 0x38]
	0x03B1974C RET
	0x03B19750 STP X30, X19, [X31 - 0x10]!
	0x03B19754 MOV X19, X0
	0x03B19758 STR X1, [X0 + 0x38]
	0x03B1975C BL 0x3B19620
	0x03B19760 STR S0, [X19 + 0x54]
	0x03B19764 MOV X0, X19
	0x03B19768 LDP X30, X19, [X31], #0x10
	0x03B1976C B 0x3B1A510
	0x03B19770 STP X30, X19, [X31 - 0x10]!
	0x03B19774 MOV X19, X0
	0x03B19778 STR X1, [X0 + 0x38]
	0x03B1977C BL 0x3B19620
	0x03B19780 STR S0, [X19 + 0x54]
	0x03B19784 MOV X0, X19
	0x03B19788 LDP X30, X19, [X31], #0x10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x8CA000
	009 Move X24, 0x641000
	010 Move X20, 0x641000
	011 Move X22, 0x641000
	012 Move X21, 0x641000
	013 Move W8, [X23+1733]
	014 Move X24, [X24+2448]
	015 Move X20, [X20+2456]
	016 Move X22, [X22+2464]
	017 Move X21, [X21+2472]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x641000
	024 Move X0, [X0+2472]
	025 Call 0x1C17CF4
	026 Move X0, 0x641000
	027 Move X0, [X0+2456]
	028 Call 0x1C17CF4
	029 Move X0, 0x641000
	030 Move X0, [X0+2464]
	031 Call 0x1C17CF4
	032 Move X0, 0x641000
	033 Move X0, [X0+2448]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X23+1733], W8
	037 Move X0, [X24]
	038 Call 0x1C17F10
	039 Move X1, [X20]
	040 Move X20, X0
	041 Call List`1<Object>..ctor, X0
	042 Move [X19+176], X20
	043 Move X0, [X22]
	044 Call 0x1C17F10
	045 Move X1, [X21]
	046 Move X20, X0
	047 Call List`1<Object>..ctor, X0
	048 Move [X19+192], X20
	049 Move X0, X19
	050 Move X20, [X31+48]
	051 Move X19, [X31+56]
	052 Move X22, [X31+32]
	053 Move X21, [X31+40]
	054 Move X24, [X31+16]
	055 Move X23, [X31+24]
	056 Move X1, X31
	057 Move X30, [X31+64]
	058 Call TMP_Asset..ctor, X0
	059 Return 

