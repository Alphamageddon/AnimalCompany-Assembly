Type: TMPro.TMP_InputField

Method: UnityEngine.EventSystems.BaseInput get_inputSystem()

Disassembly:
	0x03AED0E8 CBZ W8, 0x3AED100
	0x03AED0EC MOV X0, X19
	0x03AED0F0 LDP X20, X19, [X31 + 0x20]
	0x03AED0F4 LDP X30, X21, [X31 + 0x10]
	0x03AED0F8 LDR V8, [X31], #0x30
	0x03AED0FC B 0x3AED110
	0x03AED100 LDP X20, X19, [X31 + 0x20]
	0x03AED104 LDP X30, X21, [X31 + 0x10]
	0x03AED108 LDR V8, [X31], #0x30
	0x03AED10C RET
	0x03AED110 STP X30, X19, [X31 - 0x10]!
	0x03AED114 LDRB W8, [X0 + 0x270]
	0x03AED118 CBZ W8, 0x3AED15C
	0x03AED11C LDR V0, [X0 + 0x228]
	0x03AED120 MOV X19, X0
	0x03AED124 FCMP S0, 0x0
	0x03AED128 B.LE 0x3AED154
	0x03AED12C LDR X8, [X19 + 0x278]
	0x03AED130 CBNZ X8, 0x3AED15C
	0x03AED134 MOV X0, X19
	0x03AED138 BL 0x3AEFA3C
	0x03AED13C MOV X1, X0
	0x03AED140 MOV X0, X19
	0x03AED144 MOV X2, X31
	0x03AED148 BL 0x3C366FC
	0x03AED14C STR X0, [X19 + 0x278]
	0x03AED150 B 0x3AED15C
	0x03AED154 MOVZ W8, 0x1
	0x03AED158 STRB W8, [X19 + 0x274]
	0x03AED15C LDP X30, X19, [X31], #0x10
	0x03AED160 RET
	0x03AED164 LDR W0, [X0 + 0x22C]
	0x03AED168 RET
	0x03AED16C STR X30, [X31 - 0x30]!
	0x03AED170 STP X22, X21, [X31 + 0x10]
	0x03AED174 STP X20, X19, [X31 + 0x20]
	0x03AED178 ADRP X22, 0x8F5000
	0x03AED17C ADRP X21, 0x66C000
	0x03AED180 LDRB W8, [X22 + 0x5DB]
	0x03AED184 LDR X21, [X21 + 0x58]
	0x03AED188 MOV W20, W1
	0x03AED18C MOV X19, X0
	0x03AED190 TBNZ X8, 0x0, 0x3AED1A8
	0x03AED194 ADRP X0, 0x66C000
	0x03AED198 LDR X0, [X0 + 0x58]
	0x03AED19C BL 0x1C16CF4
	0x03AED1A0 MOVZ W8, 0x1
	0x03AED1A4 STRB W8, [X22 + 0x5DB]
	0x03AED1A8 LDR X2, [X21]
	0x03AED1AC ADD X0, X19, 0x22C
	0x03AED1B0 MOV W1, W20
	0x03AED1B4 BL 0x2253EA0
	0x03AED1B8 TBZ X0, 0x0, 0x3AED1D0
	0x03AED1BC MOV X0, X19
	0x03AED1C0 LDP X20, X19, [X31 + 0x20]
	0x03AED1C4 LDP X22, X21, [X31 + 0x10]
	0x03AED1C8 LDR X30, [X31], #0x30
	0x03AED1CC B 0x3AED1E0
	0x03AED1D0 LDP X20, X19, [X31 + 0x20]
	0x03AED1D4 LDP X22, X21, [X31 + 0x10]
	0x03AED1D8 LDR X30, [X31], #0x30
	0x03AED1DC RET
	0x03AED1E0 STP X30, X21, [X31 - 0x20]!
	0x03AED1E4 STP X20, X19, [X31 + 0x10]
	0x03AED1E8 ADRP X20, 0x8F5000
	0x03AED1EC ADRP X21, 0x66B000
	0x03AED1F0 LDRB W8, [X20 + 0x617]
	0x03AED1F4 LDR X21, [X21 + 0x718]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x8F6000
	006 Move X20, 0x62E000
	007 Move W8, [X19+1488]
	008 Move X20, [X20+3576]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x62E000
	014 Move X0, [X0+3576]
	015 Call 0x1C17CF4
	016 Move X0, 0x607000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+1488], W8
	021 Move X0, [X20]
	022 Move X21, 0x607000
	023 Move W8, [X0+224]
	024 Move X21, [X21+1432]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X31
	029 Call EventSystem.get_current
	030 Move X8, [X21]
	031 Move X19, X0
	032 Move W9, [X8+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {37}
	035 Move X0, X8
	036 Call 0x1C17DFC
	037 Move X0, X19
	038 Move X1, X31
	039 Call Object.op_Implicit, X0
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {86}
	044 Move X0, [X20]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X31
	050 Call EventSystem.get_current
	051 Compare X0, 0
	052 JumpIfEqual {92}
	053 Move X8, [X21]
	054 Move X19, [X0+40]
	055 Move W9, [X8+224]
	056 Compare W9, 0
	057 JumpIfNotEqual {60}
	058 Move X0, X8
	059 Call 0x1C17DFC
	060 Move X0, X19
	061 Move X1, X31
	062 Call Object.op_Implicit, X0
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {86}
	067 Move X0, [X20]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X0, X31
	073 Call EventSystem.get_current
	074 Compare X0, 0
	075 JumpIfEqual {92}
	076 Move X0, [X0+40]
	077 Compare X0, 0
	078 JumpIfEqual {92}
	079 Move X20, [X31+16]
	080 Move X19, [X31+24]
	081 Move X1, X31
	082 Move X30, [X31+32]
	083 Move X21, [X31+40]
	084 Call BaseInputModule.get_input, X0
	085 Return X0
	086 Move X20, [X31+16]
	087 Move X19, [X31+24]
	088 Move X0, X31
	089 Move X30, [X31+32]
	090 Move X21, [X31+40]
	091 Return X0
	092 Call 0x1C17F20

Method: System.String get_compositionString()

Disassembly:
	0x03AED1F8 MOV X19, X0
	0x03AED1FC TBNZ X8, 0x0, 0x3AED214
	0x03AED200 ADRP X0, 0x66B000
	0x03AED204 LDR X0, [X0 + 0x718]
	0x03AED208 BL 0x1C16CF4
	0x03AED20C MOVZ W8, 0x1
	0x03AED210 STRB W8, [X20 + 0x617]
	0x03AED214 LDR X0, [X21]
	0x03AED218 LDR W8, [X0 + 0xE0]
	0x03AED21C CBNZ W8, 0x3AED224
	0x03AED220 BL 0x1C16DFC
	0x03AED224 MOV X0, X19
	0x03AED228 LDP X20, X19, [X31 + 0x10]
	0x03AED22C MOV X1, X31
	0x03AED230 LDP X30, X21, [X31], #0x20
	0x03AED234 B 0x3CD16F4
	0x03AED238 LDR X0, [X0 + 0x110]
	0x03AED23C RET
	0x03AED240 LDR X0, [X0 + 0x138]
	0x03AED244 RET
	0x03AED248 LDR X0, [X0 + 0x148]
	0x03AED24C RET
	0x03AED250 LDR X0, [X0 + 0x150]
	0x03AED254 RET
	0x03AED258 STR X30, [X31 - 0x40]!
	0x03AED25C STP X24, X23, [X31 + 0x10]
	0x03AED260 STP X22, X21, [X31 + 0x20]
	0x03AED264 STP X20, X19, [X31 + 0x30]
	0x03AED268 ADRP X21, 0x8F5000
	0x03AED26C ADRP X24, 0x606000
	0x03AED270 LDRB W8, [X21 + 0x5DF]
	0x03AED274 LDR X24, [X24 + 0x598]
	0x03AED278 MOV X20, X1
	0x03AED27C MOV X19, X0
	0x03AED280 TBNZ X8, 0x0, 0x3AED2D4
	0x03AED284 ADRP X0, 0x606000
	0x03AED288 LDR X0, [X0 + 0x598]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8F6000
	005 Move X19, 0x607000
	006 Move W8, [X20+1489]
	007 Move X19, [X19+1432]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x607000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1489], W8
	017 Call TMP_InputField.get_inputSystem, X0
	018 Move X8, [X19]
	019 Move X19, X0
	020 Move W9, [X8+224]
	021 Compare W9, 0
	022 JumpIfNotEqual {25}
	023 Move X0, X8
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {43}
	033 Call TMP_InputField.get_inputSystem, X0
	034 Compare X0, 0
	035 JumpIfEqual {49}
	036 Move X8, [X0]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X2, [X8+584]
	040 Move X1, [X8+592]
	041 Move X30, [X31+32]
	042 CallNoReturn X2
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X0, X31
	046 Move X30, [X31+32]
	047 Call Input.get_compositionString
	048 Return X0
	049 Call 0x1C17F20

Method: System.Int32 get_compositionLength()

Disassembly:
	0x03AED28C BL 0x1C16CF4
	0x03AED290 ADRP X0, 0x66C000
	0x03AED294 LDR X0, [X0 + 0x60]
	0x03AED298 BL 0x1C16CF4
	0x03AED29C ADRP X0, 0x66C000
	0x03AED2A0 LDR X0, [X0 + 0x68]
	0x03AED2A4 BL 0x1C16CF4
	0x03AED2A8 ADRP X0, 0x66B000
	0x03AED2AC LDR X0, [X0 + 0xB68]
	0x03AED2B0 BL 0x1C16CF4
	0x03AED2B4 ADRP X0, 0x66B000

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+560]
	003 Compare W8, 0
	004 JumpIfEqual {6}
	005 Move W0, W31
	006 Call TMP_InputField.get_compositionString, X0
	007 Compare X0, 0
	008 JumpIfEqual {12}
	009 Move W0, [X0+16]
	010 Move X30, [X31+16]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03AED2B8 LDR X0, [X0 + 0x8C8]
	0x03AED2BC BL 0x1C16CF4
	0x03AED2C0 ADRP X0, 0x66C000
	0x03AED2C4 LDR X0, [X0 + 0x70]
	0x03AED2C8 BL 0x1C16CF4
	0x03AED2CC MOVZ W8, 0x1
	0x03AED2D0 STRB W8, [X21 + 0x5DF]
	0x03AED2D4 LDR X0, [X24]
	0x03AED2D8 LDR X22, [X19 + 0x150]
	0x03AED2DC LDR W8, [X0 + 0xE0]
	0x03AED2E0 CBNZ W8, 0x3AED2E8
	0x03AED2E4 BL 0x1C16DFC
	0x03AED2E8 MOV X0, X22
	0x03AED2EC MOV X1, X31
	0x03AED2F0 MOV X2, X31
	0x03AED2F4 ADD X21, X19, 0x150
	0x03AED2F8 BL 0x3C354F8
	0x03AED2FC TBZ X0, 0x0, 0x3AED354
	0x03AED300 LDR X8, [X21]
	0x03AED304 CBZ X8, 0x3AED408
	0x03AED308 LDR X22, [X8 + 0x118]
	0x03AED30C ADRP X8, 0x66B000
	0x03AED310 LDR X8, [X8 + 0xB68]
	0x03AED314 LDR X0, [X8]
	0x03AED318 BL 0x1C16F10
	0x03AED31C ADRP X8, 0x66C000
	0x03AED320 LDR X8, [X8 + 0x68]
	0x03AED324 MOV X1, X19
	0x03AED328 MOV X3, X31
	0x03AED32C MOV X23, X0
	0x03AED330 LDR X2, [X8]
	0x03AED334 BL 0x2725EC4
	0x03AED338 CBZ X22, 0x3AED408
	0x03AED33C ADRP X8, 0x66C000
	0x03AED340 LDR X8, [X8 + 0x70]
	0x03AED344 MOV X0, X22
	0x03AED348 MOV X1, X23
	0x03AED34C LDR X2, [X8]
	0x03AED350 BL 0x272A4EC
	0x03AED354 ADRP X8, 0x66C000
	0x03AED358 LDR X8, [X8 + 0x60]
	0x03AED35C MOV X0, X21
	0x03AED360 MOV X1, X20
	0x03AED364 LDR X2, [X8]
	0x03AED368 BL 0x2253B70
	0x03AED36C LDR X0, [X24]
	0x03AED370 LDR X20, [X21]
	0x03AED374 LDR W8, [X0 + 0xE0]
	0x03AED378 CBNZ W8, 0x3AED380
	0x03AED37C BL 0x1C16DFC
	0x03AED380 MOV X0, X20
	0x03AED384 MOV X1, X31
	0x03AED388 BL 0x3C38948
	0x03AED38C TBZ X0, 0x0, 0x3AED3F4
	0x03AED390 LDR X8, [X21]
	0x03AED394 CBZ X8, 0x3AED408
	0x03AED398 LDR X20, [X8 + 0x118]
	0x03AED39C ADRP X8, 0x66B000
	0x03AED3A0 LDR X8, [X8 + 0xB68]
	0x03AED3A4 LDR X0, [X8]
	0x03AED3A8 BL 0x1C16F10
	0x03AED3AC ADRP X8, 0x66C000
	0x03AED3B0 LDR X8, [X8 + 0x68]
	0x03AED3B4 MOV X1, X19
	0x03AED3B8 MOV X3, X31
	0x03AED3BC MOV X21, X0
	0x03AED3C0 LDR X2, [X8]
	0x03AED3C4 BL 0x2725EC4
	0x03AED3C8 CBZ X20, 0x3AED408
	0x03AED3CC ADRP X8, 0x66B000
	0x03AED3D0 LDR X8, [X8 + 0x8C8]
	0x03AED3D4 MOV X0, X20
	0x03AED3D8 MOV X1, X21
	0x03AED3DC LDP X20, X19, [X31 + 0x30]
	0x03AED3E0 LDR X2, [X8]
	0x03AED3E4 LDP X22, X21, [X31 + 0x20]
	0x03AED3E8 LDP X24, X23, [X31 + 0x10]
	0x03AED3EC LDR X30, [X31], #0x40
	0x03AED3F0 B 0x272A4B0
	0x03AED3F4 LDP X20, X19, [X31 + 0x30]
	0x03AED3F8 LDP X22, X21, [X31 + 0x20]
	0x03AED3FC LDP X24, X23, [X31 + 0x10]
	0x03AED400 LDR X30, [X31], #0x40
	0x03AED404 RET
	0x03AED408 BL 0x1C16F20
	0x03AED40C LDR V0, [X0 + 0x17C]
	0x03AED410 RET
	0x03AED414 STR D8, [X31 - 0x30]!
	0x03AED418 STP X30, X21, [X31 + 0x10]
	0x03AED41C STP X20, X19, [X31 + 0x20]
	0x03AED420 ADRP X21, 0x8F5000
	0x03AED424 ADRP X20, 0x66C000
	0x03AED428 LDRB W8, [X21 + 0x5E0]
	0x03AED42C LDR X20, [X20 + 0x50]
	0x03AED430 MOV V8.16B, V0.16B
	0x03AED434 MOV X19, X0
	0x03AED438 TBNZ X8, 0x0, 0x3AED450
	0x03AED43C ADRP X0, 0x66C000
	0x03AED440 LDR X0, [X0 + 0x50]
	0x03AED444 BL 0x1C16CF4
	0x03AED448 MOVZ W8, 0x1
	0x03AED44C STRB W8, [X21 + 0x5E0]
	0x03AED450 LDR X1, [X20]
	0x03AED454 ADD X0, X19, 0x17C
	0x03AED458 MOV V0.16B, V8.16B
	0x03AED45C BL 0x2253FAC
	0x03AED460 TBZ X0, 0x0, 0x3AED478
	0x03AED464 MOV X0, X19
	0x03AED468 LDP X20, X19, [X31 + 0x20]
	0x03AED46C LDP X30, X21, [X31 + 0x10]
	0x03AED470 LDR V8, [X31], #0x30
	0x03AED474 B 0x3AED1E0
	0x03AED478 LDP X20, X19, [X31 + 0x20]
	0x03AED47C LDP X30, X21, [X31 + 0x10]
	0x03AED480 LDR V8, [X31], #0x30
	0x03AED484 RET
	0x03AED488 STR X30, [X31 - 0x10]!
	0x03AED48C LDRB W8, [X0 + 0x208]
	0x03AED490 CBZ W8, 0x3AED4A8
	0x03AED494 LDR V0, [X0 + 0x1F8]
	0x03AED498 LDR V1, [X0 + 0x1FC]
	0x03AED49C LDR V2, [X0 + 0x200]
	0x03AED4A0 LDR V3, [X0 + 0x204]
	0x03AED4A4 B 0x3AED4C0
	0x03AED4A8 LDR X0, [X0 + 0x138]
	0x03AED4AC CBZ X0, 0x3AED4C8
	0x03AED4B0 LDR X8, [X0]
	0x03AED4B4 LDR X9, [X8 + 0x298]
	0x03AED4B8 LDR X1, [X8 + 0x2A0]
	0x03AED4BC BLR X9
	0x03AED4C0 LDR X30, [X31], #0x10
	0x03AED4C4 RET
	0x03AED4C8 BL 0x1C16F20
	0x03AED4CC STP X30, X19, [X31 - 0x10]!
	0x03AED4D0 MOV X19, X0
	0x03AED4D4 ADD X0, X0, 0x1F8
	0x03AED4D8 MOV X1, X31
	0x03AED4DC BL 0x3B0D768
	0x03AED4E0 TBZ X0, 0x0, 0x3AED4F0
	0x03AED4E4 MOV X0, X19
	0x03AED4E8 LDP X30, X19, [X31], #0x10
	0x03AED4EC B 0x3AED1E0
	0x03AED4F0 LDP X30, X19, [X31], #0x10
	0x03AED4F4 RET
	0x03AED4F8 LDRB W0, [X0 + 0x208]
	0x03AED4FC RET
	0x03AED500 LDRB W9, [X0 + 0x208]
	0x03AED504 AND W8, W1, 0x1
	0x03AED508 CMP W9, W8
	0x03AED50C B.NE 0x3AED514
	0x03AED510 RET
	0x03AED514 STRB W8, [X0 + 0x208]
	0x03AED518 B 0x3AED1E0
	0x03AED51C LDR V0, [X0 + 0x20C]
	0x03AED520 LDR V1, [X0 + 0x210]
	0x03AED524 LDR V2, [X0 + 0x214]
	0x03AED528 LDR V3, [X0 + 0x218]
	0x03AED52C RET
	0x03AED530 STP X30, X19, [X31 - 0x10]!
	0x03AED534 MOV X19, X0

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0x8F6000
	014 Move X25, 0x609000
	015 Move X21, 0x66C000
	016 Move X29, 0x66D000
	017 Move X28, 0x66D000
	018 Move X27, 0x66D000
	019 Move X26, 0x66D000
	020 Move X23, 0x607000
	021 Move X22, 0x66D000
	022 Move X25, [X25+632]
	023 Move X21, [X21+4088]
	024 Move X29, [X29]
	025 Move X28, [X28+8]
	026 Move W8, [X20+1490]
	027 Move X27, [X27+16]
	028 Move X26, [X26+24]
	029 Move X23, [X23+2440]
	030 Move X22, [X22+32]
	031 Move X19, X0
	032 Add X24, X0, 504
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {66}
	037 Move X0, 0x66D000
	038 Move X0, [X0+32]
	039 Call 0x1C17CF4
	040 Move X0, 0x66D000
	041 Move X0, [X0+16]
	042 Call 0x1C17CF4
	043 Move X0, 0x66C000
	044 Move X0, [X0+2648]
	045 Call 0x1C17CF4
	046 Move X0, 0x66D000
	047 Move X0, [X0]
	048 Call 0x1C17CF4
	049 Move X0, 0x609000
	050 Move X0, [X0+632]
	051 Call 0x1C17CF4
	052 Move X0, 0x66C000
	053 Move X0, [X0+4088]
	054 Call 0x1C17CF4
	055 Move X0, 0x66D000
	056 Move X0, [X0+8]
	057 Call 0x1C17CF4
	058 Move X0, 0x66D000
	059 Move X0, [X0+24]
	060 Call 0x1C17CF4
	061 Move X0, 0x607000
	062 Move X0, [X0+2440]
	063 Call 0x1C17CF4
	064 Move W8, 1
	065 Move [X20+1490], W8
	066 Move W8, 0x3F800000
	067 Move W9, 42
	068 Move [X19+380], W8
	069 NotImplemented "Instruction STRH not yet implemented."
	070 Move X8, [X25]
	071 Move W9, 0x41600000
	072 Move X8, [X8+184]
	073 Move X8, [X8]
	074 Move [X19+424], W9
	075 Move [X19+416], X8
	076 Move X0, [X21]
	077 Call 0x1C17F10
	078 Move X1, X31
	079 Move X20, X0
	080 Call SubmitEvent..ctor, X0
	081 Move [X19+432], X20
	082 Move X0, [X21]
	083 Call 0x1C17F10
	084 Move X1, X31
	085 Move X20, X0
	086 Call SubmitEvent..ctor, X0
	087 Move [X19+440], X20
	088 Move X0, [X29]
	089 Call 0x1C17F10
	090 Move X1, X31
	091 Move X20, X0
	092 Call SelectionEvent..ctor, X0
	093 Move [X19+448], X20
	094 Move X0, [X29]
	095 Call 0x1C17F10
	096 Move X1, X31
	097 Move X20, X0
	098 Call SelectionEvent..ctor, X0
	099 Move [X19+456], X20
	100 Move X0, [X28]
	101 Call 0x1C17F10
	102 Move X1, X31
	103 Move X20, X0
	104 Call TextSelectionEvent..ctor, X0
	105 Move [X19+464], X20
	106 Move X0, [X28]
	107 Call 0x1C17F10
	108 Move X1, X31
	109 Move X20, X0
	110 Call TextSelectionEvent..ctor, X0
	111 Move [X19+472], X20
	112 Move X0, [X27]
	113 Call 0x1C17F10
	114 Move X1, X31
	115 Move X20, X0
	116 Call OnChangeEvent..ctor, X0
	117 Move [X19+480], X20
	118 Move X0, [X26]
	119 Call 0x1C17F10
	120 Move X1, X31
	121 Move X20, X0
	122 Call TouchScreenKeyboardEvent..ctor, X0
	123 Move X8, -50331648
	124 Move V0, [X8+145]
	125 Move X8, -50331648
	126 Move V1, [X8+238]
	127 Move [X19+488], X20
	128 Move [X24], V0
	129 Move X9, 0x999A
	130 Move [X24+20], V1
	131 Move X8, [X25]
	132 NotImplemented "Instruction MOVK not yet implemented."
	133 NotImplemented "Instruction MOVK not yet implemented."
	134 Move W10, 1
	135 Move X8, [X8+184]
	136 Move X8, [X8]
	137 Move [X19+552], X9
	138 Move [X19+561], W10
	139 Move W9, 0x3F000000
	140 Move [X19+544], X8
	141 Move X8, [X23]
	142 Move [X19+692], W9
	143 Move [X19+712], W10
	144 Move [X19+714], W10
	145 Move [X19+656], X8
	146 Move [X19+728], W10
	147 Move X0, [X22]
	148 Call 0x1C17F10
	149 Move X1, X31
	150 Move X20, X0
	151 Call Event..ctor, X0
	152 Move [X19+752], X20
	153 Move X8, 0x66C000
	154 Move X8, [X8+2648]
	155 Move X0, [X8]
	156 Move W8, [X0+224]
	157 Compare W8, 0
	158 JumpIfNotEqual {160}
	159 Call 0x1C17DFC
	160 Move X0, X19
	161 Move X1, X31
	162 Call Selectable..ctor, X0
	163 Move X0, X19
	164 Move X20, [X31+80]
	165 Move X19, [X31+88]
	166 Move X22, [X31+64]
	167 Move X21, [X31+72]
	168 Move X24, [X31+48]
	169 Move X23, [X31+56]
	170 Move X26, [X31+32]
	171 Move X25, [X31+40]
	172 Move X28, [X31+16]
	173 Move X27, [X31+24]
	174 Move X29, [X31+96]
	175 Move X30, [X31+104]

Method: UnityEngine.Mesh get_mesh()

Disassembly:
	0x03AED5CC STP X20, X19, [X31 + 0x20]
	0x03AED5D0 ADRP X22, 0x8F5000
	0x03AED5D4 ADRP X21, 0x66C000
	0x03AED5D8 LDRB W8, [X22 + 0x5E2]
	0x03AED5DC LDR X21, [X21 + 0x78]
	0x03AED5E0 MOV X19, X1
	0x03AED5E4 MOV X20, X0
	0x03AED5E8 TBNZ X8, 0x0, 0x3AED600
	0x03AED5EC ADRP X0, 0x66C000
	0x03AED5F0 LDR X0, [X0 + 0x78]
	0x03AED5F4 BL 0x1C16CF4
	0x03AED5F8 MOVZ W8, 0x1
	0x03AED5FC STRB W8, [X22 + 0x5E2]
	0x03AED600 LDR X2, [X21]
	0x03AED604 ADD X0, X20, 0x1B8
	0x03AED608 MOV X1, X19
	0x03AED60C LDP X20, X19, [X31 + 0x20]
	0x03AED610 LDP X22, X21, [X31 + 0x10]
	0x03AED614 LDR X30, [X31], #0x30
	0x03AED618 B 0x2253B70
	0x03AED61C LDR X0, [X0 + 0x1C0]
	0x03AED620 RET
	0x03AED624 STR X30, [X31 - 0x30]!
	0x03AED628 STP X22, X21, [X31 + 0x10]
	0x03AED62C STP X20, X19, [X31 + 0x20]
	0x03AED630 ADRP X22, 0x8F5000
	0x03AED634 ADRP X21, 0x66C000
	0x03AED638 LDRB W8, [X22 + 0x5E3]
	0x03AED63C LDR X21, [X21 + 0x80]
	0x03AED640 MOV X19, X1
	0x03AED644 MOV X20, X0
	0x03AED648 TBNZ X8, 0x0, 0x3AED660
	0x03AED64C ADRP X0, 0x66C000
	0x03AED650 LDR X0, [X0 + 0x80]
	0x03AED654 BL 0x1C16CF4
	0x03AED658 MOVZ W8, 0x1
	0x03AED65C STRB W8, [X22 + 0x5E3]
	0x03AED660 LDR X2, [X21]
	0x03AED664 ADD X0, X20, 0x1C0
	0x03AED668 MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8F6000
	006 Move X20, 0x607000
	007 Move W8, [X21+1491]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x60E000
	015 Move X0, [X0+1792]
	016 Call 0x1C17CF4
	017 Move X0, 0x607000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1491], W8
	022 Move X0, [X20]
	023 Move X20, [X19+616]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {44}
	036 Move X8, 0x60E000
	037 Move X8, [X8+1792]
	038 Move X0, [X8]
	039 Call 0x1C17F10
	040 Move X1, X31
	041 Move X20, X0
	042 Call Mesh..ctor, X0
	043 Move [X19+616], X20
	044 Move X20, [X19+616]
	045 Move X0, X20
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Return X0

Method: System.Boolean get_shouldHideMobileInput()

Disassembly:
	0x03AED66C LDP X20, X19, [X31 + 0x20]
	0x03AED670 LDP X22, X21, [X31 + 0x10]
	0x03AED674 LDR X30, [X31], #0x30
	0x03AED678 B 0x2253B70
	0x03AED67C LDR X0, [X0 + 0x1C8]
	0x03AED680 RET
	0x03AED684 STR X30, [X31 - 0x30]!
	0x03AED688 STP X22, X21, [X31 + 0x10]
	0x03AED68C STP X20, X19, [X31 + 0x20]
	0x03AED690 ADRP X22, 0x8F5000
	0x03AED694 ADRP X21, 0x66C000
	0x03AED698 LDRB W8, [X22 + 0x5E4]
	0x03AED69C LDR X21, [X21 + 0x80]
	0x03AED6A0 MOV X19, X1
	0x03AED6A4 MOV X20, X0
	0x03AED6A8 TBNZ X8, 0x0, 0x3AED6C0
	0x03AED6AC ADRP X0, 0x66C000
	0x03AED6B0 LDR X0, [X0 + 0x80]
	0x03AED6B4 BL 0x1C16CF4
	0x03AED6B8 MOVZ W8, 0x1
	0x03AED6BC STRB W8, [X22 + 0x5E4]
	0x03AED6C0 LDR X2, [X21]
	0x03AED6C4 ADD X0, X20, 0x1C8
	0x03AED6C8 MOV X1, X19
	0x03AED6CC LDP X20, X19, [X31 + 0x20]
	0x03AED6D0 LDP X22, X21, [X31 + 0x10]
	0x03AED6D4 LDR X30, [X31], #0x30
	0x03AED6D8 B 0x2253B70
	0x03AED6DC LDR X0, [X0 + 0x1D0]
	0x03AED6E0 RET
	0x03AED6E4 STR X30, [X31 - 0x30]!
	0x03AED6E8 STP X22, X21, [X31 + 0x10]
	0x03AED6EC STP X20, X19, [X31 + 0x20]
	0x03AED6F0 ADRP X22, 0x8F5000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8F6000
	006 Move X21, 0x607000
	007 Move W8, [X20+1492]
	008 Move X21, [X21+2416]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x607000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1492], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call Application.get_platform
	026 Move W8, W0
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W0, 1
	029 Move W9, 2304
	030 NotImplemented "Instruction LSLV not yet implemented."
	031 NotImplemented "Instruction MOVK not yet implemented."
	032 And W31, W8, W9
	033 Move W8, [X19+404]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CSET not yet implemented."
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return X0

Method: System.Void set_shouldHideMobileInput(System.Boolean value)

Disassembly:
	0x03AED6F4 ADRP X21, 0x66C000
	0x03AED6F8 LDRB W8, [X22 + 0x5E5]
	0x03AED6FC LDR X21, [X21 + 0x88]
	0x03AED700 MOV X19, X1
	0x03AED704 MOV X20, X0
	0x03AED708 TBNZ X8, 0x0, 0x3AED720
	0x03AED70C ADRP X0, 0x66C000
	0x03AED710 LDR X0, [X0 + 0x88]
	0x03AED714 BL 0x1C16CF4
	0x03AED718 MOVZ W8, 0x1
	0x03AED71C STRB W8, [X22 + 0x5E5]
	0x03AED720 LDR X2, [X21]
	0x03AED724 ADD X0, X20, 0x1D0
	0x03AED728 MOV X1, X19
	0x03AED72C LDP X20, X19, [X31 + 0x20]
	0x03AED730 LDP X22, X21, [X31 + 0x10]
	0x03AED734 LDR X30, [X31], #0x30
	0x03AED738 B 0x2253B70
	0x03AED73C LDR X0, [X0 + 0x1D8]
	0x03AED740 RET
	0x03AED744 STR X30, [X31 - 0x30]!
	0x03AED748 STP X22, X21, [X31 + 0x10]
	0x03AED74C STP X20, X19, [X31 + 0x20]
	0x03AED750 ADRP X22, 0x8F5000
	0x03AED754 ADRP X21, 0x66C000
	0x03AED758 LDRB W8, [X22 + 0x5E6]
	0x03AED75C LDR X21, [X21 + 0x88]
	0x03AED760 MOV X19, X1
	0x03AED764 MOV X20, X0
	0x03AED768 TBNZ X8, 0x0, 0x3AED780
	0x03AED76C ADRP X0, 0x66C000
	0x03AED770 LDR X0, [X0 + 0x88]
	0x03AED774 BL 0x1C16CF4
	0x03AED778 MOVZ W8, 0x1
	0x03AED77C STRB W8, [X22 + 0x5E6]
	0x03AED780 LDR X2, [X21]
	0x03AED784 ADD X0, X20, 0x1D8
	0x03AED788 MOV X1, X19
	0x03AED78C LDP X20, X19, [X31 + 0x20]
	0x03AED790 LDP X22, X21, [X31 + 0x10]
	0x03AED794 LDR X30, [X31], #0x30
	0x03AED798 B 0x2253B70
	0x03AED79C LDR X0, [X0 + 0x1E0]
	0x03AED7A0 RET
	0x03AED7A4 STR X30, [X31 - 0x30]!
	0x03AED7A8 STP X22, X21, [X31 + 0x10]
	0x03AED7AC STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8F6000
	007 Move X22, 0x607000
	008 Move W8, [X21+1493]
	009 Move X22, [X22+2416]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x607000
	017 Move X0, [X0+2416]
	018 Call 0x1C17CF4
	019 Move X0, 0x66D000
	020 Move X0, [X0+40]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1493], W8
	024 Move X0, [X22]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X31
	030 Call Application.get_platform
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move W8, 1
	033 Move W9, 2304
	034 NotImplemented "Instruction LSLV not yet implemented."
	035 NotImplemented "Instruction MOVK not yet implemented."
	036 And W31, W8, W9
	037 Move X8, 0x66D000
	038 Move X8, [X8+40]
	039 Add X0, X19, 404
	040 And W1, W20, 1
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X2, [X8]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Call 0x2254D58, X0, X1
	048 Return 
	049 Move W8, 1
	050 Move [X19+404], W8
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Return 

Method: System.Boolean get_shouldHideSoftKeyboard()

Disassembly:
	0x03AED7B0 ADRP X22, 0x8F5000
	0x03AED7B4 ADRP X21, 0x66C000
	0x03AED7B8 LDRB W8, [X22 + 0x5E7]
	0x03AED7BC LDR X21, [X21 + 0x90]
	0x03AED7C0 MOV X19, X1
	0x03AED7C4 MOV X20, X0
	0x03AED7C8 TBNZ X8, 0x0, 0x3AED7E0
	0x03AED7CC ADRP X0, 0x66C000
	0x03AED7D0 LDR X0, [X0 + 0x90]
	0x03AED7D4 BL 0x1C16CF4
	0x03AED7D8 MOVZ W8, 0x1
	0x03AED7DC STRB W8, [X22 + 0x5E7]
	0x03AED7E0 LDR X2, [X21]
	0x03AED7E4 ADD X0, X20, 0x1E0
	0x03AED7E8 MOV X1, X19
	0x03AED7EC LDP X20, X19, [X31 + 0x20]
	0x03AED7F0 LDP X22, X21, [X31 + 0x10]
	0x03AED7F4 LDR X30, [X31], #0x30
	0x03AED7F8 B 0x2253B70
	0x03AED7FC LDR X0, [X0 + 0x1E8]
	0x03AED800 RET
	0x03AED804 STR X30, [X31 - 0x30]!
	0x03AED808 STP X22, X21, [X31 + 0x10]
	0x03AED80C STP X20, X19, [X31 + 0x20]
	0x03AED810 ADRP X22, 0x8F5000
	0x03AED814 ADRP X21, 0x66C000
	0x03AED818 LDRB W8, [X22 + 0x5E8]
	0x03AED81C LDR X21, [X21 + 0x98]
	0x03AED820 MOV X19, X1
	0x03AED824 MOV X20, X0
	0x03AED828 TBNZ X8, 0x0, 0x3AED840
	0x03AED82C ADRP X0, 0x66C000
	0x03AED830 LDR X0, [X0 + 0x98]
	0x03AED834 BL 0x1C16CF4
	0x03AED838 MOVZ W8, 0x1
	0x03AED83C STRB W8, [X22 + 0x5E8]
	0x03AED840 LDR X2, [X21]
	0x03AED844 ADD X0, X20, 0x1E8
	0x03AED848 MOV X1, X19
	0x03AED84C LDP X20, X19, [X31 + 0x20]
	0x03AED850 LDP X22, X21, [X31 + 0x10]
	0x03AED854 LDR X30, [X31], #0x30
	0x03AED858 B 0x2253B70
	0x03AED85C LDR X0, [X0 + 0x1F0]
	0x03AED860 RET
	0x03AED864 STR X30, [X31 - 0x30]!
	0x03AED868 STP X22, X21, [X31 + 0x10]
	0x03AED86C STP X20, X19, [X31 + 0x20]
	0x03AED870 ADRP X22, 0x8F5000
	0x03AED874 ADRP X21, 0x66C000
	0x03AED878 LDRB W8, [X22 + 0x5E9]
	0x03AED87C LDR X21, [X21 + 0xA0]
	0x03AED880 MOV X19, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8F6000
	006 Move X21, 0x607000
	007 Move W8, [X20+1494]
	008 Move X21, [X21+2416]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x607000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1494], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call Application.get_platform
	026 Move W8, W0
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Or W8, W8, 4
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Subtract W8, W8, 18
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move W0, 1
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move W0, 1
	038 Move W8, W8
	039 Move W9, 1
	040 NotImplemented "Instruction LSLV not yet implemented."
	041 Move X9, 0x82000000
	042 NotImplemented "Instruction MOVK not yet implemented."
	043 And X31, X8, X9
	044 Move W8, [X19+405]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CSET not yet implemented."
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0

Method: System.Void set_shouldHideSoftKeyboard(System.Boolean value)

Disassembly:
	0x03AED884 MOV X20, X0
	0x03AED888 TBNZ X8, 0x0, 0x3AED8A0
	0x03AED88C ADRP X0, 0x66C000
	0x03AED890 LDR X0, [X0 + 0xA0]
	0x03AED894 BL 0x1C16CF4
	0x03AED898 MOVZ W8, 0x1
	0x03AED89C STRB W8, [X22 + 0x5E9]
	0x03AED8A0 LDR X2, [X21]
	0x03AED8A4 ADD X0, X20, 0x1F0
	0x03AED8A8 MOV X1, X19
	0x03AED8AC LDP X20, X19, [X31 + 0x20]
	0x03AED8B0 LDP X22, X21, [X31 + 0x10]
	0x03AED8B4 LDR X30, [X31], #0x30
	0x03AED8B8 B 0x2253B70
	0x03AED8BC LDR W0, [X0 + 0x1AC]
	0x03AED8C0 RET
	0x03AED8C4 STR X30, [X31 - 0x30]!
	0x03AED8C8 STP X22, X21, [X31 + 0x10]
	0x03AED8CC STP X20, X19, [X31 + 0x20]
	0x03AED8D0 ADRP X22, 0x8F5000
	0x03AED8D4 ADRP X21, 0x606000
	0x03AED8D8 LDRB W8, [X22 + 0x5EA]
	0x03AED8DC LDR X21, [X21 + 0x5A8]
	0x03AED8E0 MOV W19, W1
	0x03AED8E4 MOV X20, X0
	0x03AED8E8 TBNZ X8, 0x0, 0x3AED90C
	0x03AED8EC ADRP X0, 0x606000
	0x03AED8F0 LDR X0, [X0 + 0x5A8]
	0x03AED8F4 BL 0x1C16CF4
	0x03AED8F8 ADRP X0, 0x66C000
	0x03AED8FC LDR X0, [X0 + 0x58]
	0x03AED900 BL 0x1C16CF4
	0x03AED904 MOVZ W8, 0x1
	0x03AED908 STRB W8, [X22 + 0x5EA]
	0x03AED90C LDR X0, [X21]
	0x03AED910 ADRP X22, 0x66C000
	0x03AED914 ADD X21, X20, 0x1AC
	0x03AED918 LDR W8, [X0 + 0xE0]
	0x03AED91C LDR X22, [X22 + 0x58]
	0x03AED920 CBNZ W8, 0x3AED928
	0x03AED924 BL 0x1C16DFC
	0x03AED928 MOV W0, W31
	0x03AED92C MOV W1, W19
	0x03AED930 MOV X2, X31
	0x03AED934 BL 0x337EDF0
	0x03AED938 LDR X2, [X22]
	0x03AED93C MOV W1, W0
	0x03AED940 MOV X0, X21
	0x03AED944 BL 0x2253EA0
	0x03AED948 TBZ X0, 0x0, 0x3AED974
	0x03AED94C MOV X0, X20
	0x03AED950 BL 0x3AECBA4
	0x03AED954 LDR X0, [X20 + 0x100]
	0x03AED958 CBZ X0, 0x3AED974
	0x03AED95C MOV W1, W19
	0x03AED960 LDP X20, X19, [X31 + 0x20]
	0x03AED964 LDP X22, X21, [X31 + 0x10]
	0x03AED968 MOV X2, X31
	0x03AED96C LDR X30, [X31], #0x30
	0x03AED970 B 0x3C3D094
	0x03AED974 LDP X20, X19, [X31 + 0x20]
	0x03AED978 LDP X22, X21, [X31 + 0x10]
	0x03AED97C LDR X30, [X31], #0x30
	0x03AED980 RET
	0x03AED984 LDR V0, [X0 + 0x1A8]
	0x03AED988 RET
	0x03AED98C STR D8, [X31 - 0x30]!
	0x03AED990 STP X30, X21, [X31 + 0x10]
	0x03AED994 STP X20, X19, [X31 + 0x20]
	0x03AED998 ADRP X21, 0x8F5000
	0x03AED99C ADRP X20, 0x606000
	0x03AED9A0 LDRB W8, [X21 + 0x5EB]
	0x03AED9A4 LDR X20, [X20 + 0x5A8]
	0x03AED9A8 MOV V8.16B, V0.16B
	0x03AED9AC MOV X19, X0
	0x03AED9B0 TBNZ X8, 0x0, 0x3AED9D4
	0x03AED9B4 ADRP X0, 0x606000
	0x03AED9B8 LDR X0, [X0 + 0x5A8]
	0x03AED9BC BL 0x1C16CF4
	0x03AED9C0 ADRP X0, 0x66C000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8F6000
	007 Move X22, 0x607000
	008 Move W8, [X21+1495]
	009 Move X22, [X22+2416]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x607000
	017 Move X0, [X0+2416]
	018 Call 0x1C17CF4
	019 Move X0, 0x66D000
	020 Move X0, [X0+40]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1495], W8
	024 Move X0, [X22]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X31
	030 Call Application.get_platform
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Or W8, W0, 4
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Subtract W8, W0, 18
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move W8, W0
	040 Move W9, 1
	041 NotImplemented "Instruction LSLV not yet implemented."
	042 Move X9, 0x82000000
	043 NotImplemented "Instruction MOVK not yet implemented."
	044 And X31, X8, X9
	045 Move X8, 0x66D000
	046 Move X8, [X8+40]
	047 Add X0, X19, 405
	048 And W1, W20, 1
	049 Move X2, [X8]
	050 Call 0x2254D58, X0, X1
	051 Move W8, [X19+405]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Move W8, 1
	055 Move [X19+405], W8
	056 Move X8, [X19+256]
	057 Compare X8, 0
	058 JumpIfEqual {81}
	059 Move X0, X31
	060 Call TouchScreenKeyboard.get_isSupported
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {81}
	065 Move X0, [X19+256]
	066 Compare X0, 0
	067 JumpIfEqual {87}
	068 Move X1, X31
	069 Call TouchScreenKeyboard.get_active, X0
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {81}
	074 Move X0, [X19+256]
	075 Compare X0, 0
	076 JumpIfEqual {87}
	077 Move W1, W31
	078 Move X2, X31
	079 Call TouchScreenKeyboard.set_active, X0, X1
	080 Move [X19+256], X31
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move X30, [X31+48]
	086 Return 
	087 Call 0x1C17F20

Method: System.Boolean isKeyboardUsingEvents()

Disassembly:
	0x03AED9C4 LDR X0, [X0 + 0x50]
	0x03AED9C8 BL 0x1C16CF4
	0x03AED9CC MOVZ W8, 0x1
	0x03AED9D0 STRB W8, [X21 + 0x5EB]
	0x03AED9D4 LDR X0, [X20]
	0x03AED9D8 ADRP X21, 0x66C000
	0x03AED9DC ADD X20, X19, 0x1A8
	0x03AED9E0 LDR W8, [X0 + 0xE0]
	0x03AED9E4 LDR X21, [X21 + 0x50]
	0x03AED9E8 CBNZ W8, 0x3AED9F0
	0x03AED9EC BL 0x1C16DFC
	0x03AED9F0 FMOV S0, W31
	0x03AED9F4 MOV V1.16B, V8.16B
	0x03AED9F8 MOV X0, X31
	0x03AED9FC BL 0x337EE18
	0x03AEDA00 LDR X1, [X21]
	0x03AEDA04 MOV X0, X20
	0x03AEDA08 BL 0x2253FAC
	0x03AEDA0C TBZ X0, 0x0, 0x3AEDA30
	0x03AEDA10 LDR V0, [X19 + 0x1A8]
	0x03AEDA14 MOV X0, X19
	0x03AEDA18 BL 0x3AEDA40
	0x03AEDA1C MOV X0, X19
	0x03AEDA20 LDP X20, X19, [X31 + 0x20]
	0x03AEDA24 LDP X30, X21, [X31 + 0x10]
	0x03AEDA28 LDR V8, [X31], #0x30
	0x03AEDA2C B 0x3AECBA4
	0x03AEDA30 LDP X20, X19, [X31 + 0x20]
	0x03AEDA34 LDP X30, X21, [X31 + 0x10]
	0x03AEDA38 LDR V8, [X31], #0x30
	0x03AEDA3C RET
	0x03AEDA40 STR D8, [X31 - 0x20]!
	0x03AEDA44 STR X30, [X31 + 0x8]
	0x03AEDA48 STP X20, X19, [X31 + 0x10]
	0x03AEDA4C ADRP X20, 0x8F5000
	0x03AEDA50 LDRB W8, [X20 + 0x627]
	0x03AEDA54 MOV V8.16B, V0.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x8F6000
	005 Move X20, 0x607000
	006 Move W8, [X19+1496]
	007 Move X20, [X20+2416]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x607000
	013 Move X0, [X0+2416]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1496], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X0, X31
	023 Call Application.get_platform
	024 Move W8, W0
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Subtract W8, W8, 25
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W9, 0x1F3E
	029 NotImplemented "Instruction LSRV not yet implemented."
	030 And W0, W8, 1
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move W0, W31
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W0, 1
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return X0

Method: System.String get_text()

Disassembly:
	0x03AEDA58 MOV X19, X0
	0x03AEDA5C TBNZ X8, 0x0, 0x3AEDA80

ISIL:
	001 Move X0, [X0+544]
	002 Return X0

Method: System.Void set_text(System.String value)

Disassembly:
	0x03AEDA60 ADRP X0, 0x606000
	0x03AEDA64 LDR X0, [X0 + 0x598]

ISIL:
	001 Move W2, 1

Method: System.Void SetTextWithoutNotify(System.String input)

Disassembly:
	0x03AEDB9C MOV X21, X31
	0x03AEDBA0 B 0x3AEDBB8

ISIL:
	001 Move W2, W31
	002 Call TMP_InputField.SetText, X0, X1, X2
	003 Return 

Method: System.Void SetText(System.String value, System.Boolean sendCallback = True)

Disassembly:
	0x03AEDA68 BL 0x1C16CF4
	0x03AEDA6C ADRP X0, 0x66B000
	0x03AEDA70 LDR X0, [X0 + 0x3E8]
	0x03AEDA74 BL 0x1C16CF4
	0x03AEDA78 MOVZ W8, 0x1
	0x03AEDA7C STRB W8, [X20 + 0x627]
	0x03AEDA80 ADRP X8, 0x606000
	0x03AEDA84 LDR X9, [X19 + 0x148]
	0x03AEDA88 LDR X8, [X8 + 0x598]
	0x03AEDA8C CBZ X9, 0x3AEDAB0
	0x03AEDA90 ADRP X10, 0x66B000
	0x03AEDA94 LDR X10, [X10 + 0x3E8]
	0x03AEDA98 LDR X11, [X9]
	0x03AEDA9C LDR X10, [X10]
	0x03AEDAA0 LDRB W13, [X11 + 0x130]
	0x03AEDAA4 LDRB W12, [X10 + 0x130]
	0x03AEDAA8 CMP W13, W12
	0x03AEDAAC B.CS 0x3AEDAB8
	0x03AEDAB0 MOV X20, X31
	0x03AEDAB4 B 0x3AEDACC
	0x03AEDAB8 LDR X11, [X11 + 0xC8]
	0x03AEDABC ADD X11, X11, X12, 0x3, LSL
	0x03AEDAC0 LDUR X11, [X11 - 0x8]
	0x03AEDAC4 CMP X11, X10
	0x03AEDAC8 CSEL X20, X9, X31, EQ
	0x03AEDACC LDR X0, [X8]
	0x03AEDAD0 LDR W8, [X0 + 0xE0]
	0x03AEDAD4 CBNZ W8, 0x3AEDADC
	0x03AEDAD8 BL 0x1C16DFC
	0x03AEDADC MOV X0, X20
	0x03AEDAE0 MOV X1, X31
	0x03AEDAE4 MOV X2, X31
	0x03AEDAE8 BL 0x3C354F8
	0x03AEDAEC TBZ X0, 0x0, 0x3AEDB04
	0x03AEDAF0 CBZ X20, 0x3AEDB24
	0x03AEDAF4 MOV X0, X20
	0x03AEDAF8 MOV V0.16B, V8.16B
	0x03AEDAFC MOV X1, X31
	0x03AEDB00 BL 0x3AF7CDC
	0x03AEDB04 LDR X0, [X19 + 0x138]
	0x03AEDB08 CBZ X0, 0x3AEDB24
	0x03AEDB0C LDP X20, X19, [X31 + 0x10]
	0x03AEDB10 LDR X30, [X31 + 0x8]
	0x03AEDB14 MOV V0.16B, V8.16B
	0x03AEDB18 MOV X1, X31
	0x03AEDB1C LDR V8, [X31], #0x20
	0x03AEDB20 B 0x3AF7CDC
	0x03AEDB24 BL 0x1C16F20
	0x03AEDB28 LDR X0, [X0 + 0x2C0]
	0x03AEDB2C RET
	0x03AEDB30 STP X30, X21, [X31 - 0x20]!
	0x03AEDB34 STP X20, X19, [X31 + 0x10]
	0x03AEDB38 ADRP X21, 0x8F5000
	0x03AEDB3C LDRB W8, [X21 + 0x628]
	0x03AEDB40 MOV X19, X1
	0x03AEDB44 MOV X20, X0
	0x03AEDB48 TBNZ X8, 0x0, 0x3AEDB6C
	0x03AEDB4C ADRP X0, 0x606000
	0x03AEDB50 LDR X0, [X0 + 0x598]
	0x03AEDB54 BL 0x1C16CF4
	0x03AEDB58 ADRP X0, 0x66B000
	0x03AEDB5C LDR X0, [X0 + 0x3E8]
	0x03AEDB60 BL 0x1C16CF4
	0x03AEDB64 MOVZ W8, 0x1
	0x03AEDB68 STRB W8, [X21 + 0x628]
	0x03AEDB6C ADRP X8, 0x606000
	0x03AEDB70 LDR X9, [X20 + 0x148]
	0x03AEDB74 LDR X8, [X8 + 0x598]
	0x03AEDB78 CBZ X9, 0x3AEDB9C
	0x03AEDB7C ADRP X10, 0x66B000
	0x03AEDB80 LDR X10, [X10 + 0x3E8]
	0x03AEDB84 LDR X11, [X9]
	0x03AEDB88 LDR X10, [X10]
	0x03AEDB8C LDRB W13, [X11 + 0x130]
	0x03AEDB90 LDRB W12, [X10 + 0x130]
	0x03AEDB94 CMP W13, W12
	0x03AEDB98 B.CS 0x3AEDBA4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F6000
	007 Move W8, [X22+1497]
	008 Move W19, W2
	009 Move X21, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x609000
	016 Move X0, [X0+632]
	017 Call 0x1C17CF4
	018 Move X0, 0x64F000
	019 Move X0, [X0+2304]
	020 Call 0x1C17CF4
	021 Move X0, 0x607000
	022 Move X0, [X0+2440]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+1497], W8
	026 Move X0, [X20+544]
	027 Move X1, X21
	028 Move X2, X31
	029 Call String.op_Equality, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {87}
	034 Move X8, 0x607000
	035 Move X8, [X8+2440]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X8, [X8]
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 Compare X0, 0
	040 JumpIfEqual {93}
	041 Move X8, 0x609000
	042 Move X8, [X8+632]
	043 Move X9, 0x64F000
	044 Move X3, X31
	045 Move X8, [X8]
	046 Move X8, [X8+184]
	047 Move X9, [X9+2304]
	048 Move X2, [X8]
	049 Move X1, [X9]
	050 Call String.Replace, X0, X1, X2
	051 Move X8, [X20+256]
	052 Move X1, X0
	053 Move [X20+544], X0
	054 Compare X8, 0
	055 JumpIfEqual {60}
	056 Move X0, X8
	057 Move X2, X31
	058 Call TouchScreenKeyboard.set_text, X0, X1
	059 Move X1, [X20+544]
	060 Compare X1, 0
	061 JumpIfEqual {93}
	062 Move W9, [X20+564]
	063 Move W8, [X1+16]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move [X20+568], W8
	066 Move [X20+564], W8
	067 Move W9, [X20+568]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move [X20+568], W8
	070 Move W8, 1
	071 Move X0, X20
	072 Move [X20+747], W8
	073 Move [X20+682], W8
	074 Call TMP_InputField.UpdateLabel, X0
	075 Move TEMP, X19
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfNotEqual {87}
	079 Move X0, X20
	080 Move X20, [X31+32]
	081 Move X19, [X31+40]
	082 Move X22, [X31+16]
	083 Move X21, [X31+24]
	084 Move X30, [X31+48]
	085 Call TMP_InputField.SendOnValueChanged, X0
	086 Return 
	087 Move X20, [X31+32]
	088 Move X19, [X31+40]
	089 Move X22, [X31+16]
	090 Move X21, [X31+24]
	091 Move X30, [X31+48]
	092 Return 
	093 Call 0x1C17F20

Method: System.Boolean get_isFocused()

Disassembly:
	0x03AEE084 LDRB W8, [X22 + 0x5F2]
	0x03AEE088 LDR X21, [X21 + 0xD0]

ISIL:
	001 Move W0, [X0+624]
	002 Return X0

Method: System.Single get_caretBlinkRate()

Disassembly:
	0x03AEE08C MOV W20, W1
	0x03AEE090 MOV X19, X0

ISIL:
	001 Move V0, [X0+552]
	002 Return V0

Method: System.Void set_caretBlinkRate(System.Single value)

Disassembly:
	0x03AEE094 TBNZ X8, 0x0, 0x3AEE0AC
	0x03AEE098 ADRP X0, 0x66B000
	0x03AEE09C LDR X0, [X0 + 0xD0]
	0x03AEE0A0 BL 0x1C16CF4
	0x03AEE0A4 MOVZ W8, 0x1
	0x03AEE0A8 STRB W8, [X22 + 0x5F2]
	0x03AEE0AC LDR X2, [X21]
	0x03AEE0B0 ADD X0, X19, 0x198
	0x03AEE0B4 MOV W1, W20
	0x03AEE0B8 BL 0x2253F10
	0x03AEE0BC TBZ X0, 0x0, 0x3AEE0CC
	0x03AEE0C0 LDR W8, [X19 + 0x180]
	0x03AEE0C4 CMP W8, 0x9
	0x03AEE0C8 B.NE 0x3AEE0DC
	0x03AEE0CC LDP X20, X19, [X31 + 0x20]
	0x03AEE0D0 LDP X22, X21, [X31 + 0x10]
	0x03AEE0D4 LDR X30, [X31], #0x30
	0x03AEE0D8 RET
	0x03AEE0DC MOV X0, X19
	0x03AEE0E0 LDP X20, X19, [X31 + 0x20]
	0x03AEE0E4 LDP X22, X21, [X31 + 0x10]
	0x03AEE0E8 MOVZ W1, 0x9
	0x03AEE0EC LDR X30, [X31], #0x30
	0x03AEE0F0 B 0x3AEDC68
	0x03AEE0F4 LDR X0, [X0 + 0x2E0]
	0x03AEE0F8 RET
	0x03AEE0FC STR X30, [X31 - 0x30]!
	0x03AEE100 STP X22, X21, [X31 + 0x10]
	0x03AEE104 STP X20, X19, [X31 + 0x20]
	0x03AEE108 ADRP X22, 0x8F4000
	0x03AEE10C ADRP X21, 0x66B000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8F5000
	007 Move X20, 0x66C000
	008 Move W8, [X21+1498]
	009 Move X20, [X20+80]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66C000
	017 Move X0, [X0+80]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1498], W8
	021 Move X1, [X20]
	022 Add X0, X19, 552
	023 Move V0, V8
	024 Call SetPropertyUtility.SetStruct, X0, V0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {38}
	029 Move W8, [X19+624]
	030 Compare W8, 0
	031 JumpIfEqual {38}
	032 Move X0, X19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X30, [X31+16]
	036 Move X21, [X31+24]
	037 Move V8, [X31+48]
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X30, [X31+16]
	041 Move X21, [X31+24]
	042 Move V8, [X31+48]
	043 Return 

Method: System.Int32 get_caretWidth()

Disassembly:
	0x03AEE164 RET
	0x03AEE168 MOV X0, X19

ISIL:
	001 Move W0, [X0+556]
	002 Return X0

Method: System.Void set_caretWidth(System.Int32 value)

Disassembly:
	0x03AEE16C LDP X20, X19, [X31 + 0x20]
	0x03AEE170 LDP X22, X21, [X31 + 0x10]
	0x03AEE174 MOVZ W1, 0x9
	0x03AEE178 LDR X30, [X31], #0x30
	0x03AEE17C B 0x3AEDC68
	0x03AEE180 LDR W8, [X0 + 0x180]
	0x03AEE184 CMP W8, 0x9
	0x03AEE188 B.NE 0x3AEE190
	0x03AEE18C RET
	0x03AEE190 MOVZ W1, 0x9
	0x03AEE194 B 0x3AEDC68
	0x03AEE198 LDRB W0, [X0 + 0x230]
	0x03AEE19C RET
	0x03AEE1A0 AND W8, W1, 0x1
	0x03AEE1A4 STRB W8, [X0 + 0x230]
	0x03AEE1A8 RET
	0x03AEE1AC LDRB W0, [X0 + 0x231]
	0x03AEE1B0 RET
	0x03AEE1B4 AND W8, W1, 0x1
	0x03AEE1B8 STRB W8, [X0 + 0x231]
	0x03AEE1BC B 0x3AEE1C0
	0x03AEE1C0 STP X30, X21, [X31 - 0x20]!
	0x03AEE1C4 STP X20, X19, [X31 + 0x10]
	0x03AEE1C8 ADRP X21, 0x8F4000
	0x03AEE1CC ADRP X20, 0x605000
	0x03AEE1D0 LDRB W8, [X21 + 0x624]
	0x03AEE1D4 LDR X20, [X20 + 0x598]
	0x03AEE1D8 MOV X19, X0
	0x03AEE1DC TBNZ X8, 0x0, 0x3AEE1F4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F5000
	007 Move X21, 0x66C000
	008 Move W8, [X22+1499]
	009 Move X21, [X21+88]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66C000
	017 Move X0, [X0+88]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1499], W8
	021 Move X2, [X21]
	022 Add X0, X19, 556
	023 Move W1, W20
	024 Call SetPropertyUtility.SetStruct, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {35}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return 

Method: UnityEngine.RectTransform get_textViewport()

Disassembly:
	0x03AEE238 MOV X2, X31
	0x03AEE23C LDP X30, X21, [X31], #0x20

ISIL:
	001 Move X0, [X0+272]
	002 Return X0

Method: System.Void set_textViewport(UnityEngine.RectTransform value)

Disassembly:
	0x03ADE768 LDR X0, [X0 + 0x598]
	0x03ADE76C BL 0x1C16CF4
	0x03ADE770 ADRP X0, 0x67A000
	0x03ADE774 LDR X0, [X0 + 0xA10]
	0x03ADE778 BL 0x1C16CF4
	0x03ADE77C ADRP X0, 0x615000
	0x03ADE780 LDR X0, [X0 + 0x988]
	0x03ADE784 BL 0x1C16CF4
	0x03ADE788 MOVZ W8, 0x1
	0x03ADE78C STRB W8, [X21 + 0x573]
	0x03ADE790 LDR X0, [X20]
	0x03ADE794 LDR W8, [X0 + 0xE0]
	0x03ADE798 CBNZ W8, 0x3ADE7A4
	0x03ADE79C BL 0x1C16DFC
	0x03ADE7A0 LDR X0, [X20]
	0x03ADE7A4 LDR X8, [X19 + 0x138]
	0x03ADE7A8 CBZ X8, 0x3ADE95C
	0x03ADE7AC LDR X8, [X8 + 0x10]
	0x03ADE7B0 CBZ X8, 0x3ADE95C
	0x03ADE7B4 LDR X10, [X0 + 0xB8]
	0x03ADE7B8 LDR W9, [X8 + 0x18]
	0x03ADE7BC ADRP X22, 0x615000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x905000
	007 Move X21, 0x67B000
	008 Move W8, [X22+1500]
	009 Move X21, [X21+2384]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x67B000
	017 Move X0, [X0+2384]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1500], W8
	021 Move X2, [X21]
	022 Add X0, X20, 272
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x2254B70, X0, X1
	030 Return 

Method: TMPro.TMP_Text get_textComponent()

Disassembly:
	0x03AEE240 B 0x3AF87FC
	0x03AEE244 BL 0x1C16F20

ISIL:
	001 Move X0, [X0+312]
	002 Return X0

Method: System.Void set_textComponent(TMPro.TMP_Text value)

Disassembly:
	0x03ADE7C0 LDR X20, [X10]
	0x03ADE7C4 LDR X22, [X22 + 0x598]
	0x03ADE7C8 SUBS W10, W9, 0x1
	0x03ADE7CC B.LT 0x3ADE7F8
	0x03ADE7D0 LDR W11, [X19 + 0x130]
	0x03ADE7D4 TBNZ X11, 0x1F, 0x3ADE7F8
	0x03ADE7D8 ADRP X12, 0x67A000
	0x03ADE7DC LDR X12, [X12 + 0xA20]
	0x03ADE7E0 CMP W11, W9
	0x03ADE7E4 CSEL W1, W11, W10, LT
	0x03ADE7E8 MOV X0, X8
	0x03ADE7EC LDR X2, [X12]
	0x03ADE7F0 BL 0x301BCCC
	0x03ADE7F4 MOV X20, X0
	0x03ADE7F8 LDR X0, [X22]
	0x03ADE7FC LDR X21, [X19 + 0x108]
	0x03ADE800 LDR W8, [X0 + 0xE0]
	0x03ADE804 CBNZ W8, 0x3ADE80C
	0x03ADE808 BL 0x1C16DFC
	0x03ADE80C MOV X0, X21
	0x03ADE810 MOV X1, X31
	0x03ADE814 BL 0x3C38948
	0x03ADE818 TBZ X0, 0x0, 0x3ADE85C
	0x03ADE81C CBZ X20, 0x3ADE838
	0x03ADE820 LDR X1, [X20 + 0x10]
	0x03ADE824 CBZ X1, 0x3ADE838
	0x03ADE828 LDR X0, [X19 + 0x108]
	0x03ADE82C CBZ X0, 0x3ADE95C
	0x03ADE830 LDR X8, [X0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x905000
	007 Move X21, 0x67B000
	008 Move W8, [X22+1501]
	009 Move X21, [X21+2392]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x67B000
	017 Move X0, [X0+2392]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1501], W8
	021 Move X2, [X21]
	022 Add X0, X19, 312
	023 Move X1, X20
	024 Call 0x2254B70, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {37}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Call TMP_InputField.SetTextComponentWrapMode, X0
	036 Return 
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Return 

Method: UnityEngine.UI.Graphic get_placeholder()

Disassembly:
	0x03AEE248 LDR W8, [X0 + 0x190]
	0x03AEE24C SUB W8, W8, 0x1

ISIL:
	001 Move X0, [X0+328]
	002 Return X0

Method: System.Void set_placeholder(UnityEngine.UI.Graphic value)

Disassembly:
	0x03ADE834 B 0x3ADE850
	0x03ADE838 LDR X0, [X19 + 0x108]
	0x03ADE83C CBZ X0, 0x3ADE95C
	0x03ADE840 ADRP X9, 0x615000
	0x03ADE844 LDR X8, [X0]
	0x03ADE848 LDR X9, [X9 + 0x988]
	0x03ADE84C LDR X1, [X9]
	0x03ADE850 LDR X9, [X8 + 0x558]
	0x03ADE854 LDR X2, [X8 + 0x560]
	0x03ADE858 BLR X9
	0x03ADE85C LDR X0, [X22]
	0x03ADE860 LDR X21, [X19 + 0x110]
	0x03ADE864 LDR W8, [X0 + 0xE0]
	0x03ADE868 CBNZ W8, 0x3ADE870
	0x03ADE86C BL 0x1C16DFC
	0x03ADE870 MOV X0, X21
	0x03ADE874 MOV X1, X31
	0x03ADE878 BL 0x3C38948
	0x03ADE87C TBZ X0, 0x0, 0x3ADE8E0
	0x03ADE880 LDR X0, [X19 + 0x110]
	0x03ADE884 CBZ X20, 0x3ADE894
	0x03ADE888 CBZ X0, 0x3ADE95C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x905000
	007 Move X21, 0x67B000
	008 Move W8, [X22+1502]
	009 Move X21, [X21+2400]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x67B000
	017 Move X0, [X0+2400]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1502], W8
	021 Move X2, [X21]
	022 Add X0, X20, 328
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x2254B70, X0, X1
	030 Return 

Method: UnityEngine.UI.Scrollbar get_verticalScrollbar()

Disassembly:
	0x03AEE250 CMP W8, 0x2
	0x03AEE254 CSET W0, CC

ISIL:
	001 Move X0, [X0+336]
	002 Return X0

Method: System.Void set_verticalScrollbar(UnityEngine.UI.Scrollbar value)

Disassembly:
	0x03AEE258 RET
	0x03AEE25C LDRH W0, [X0 + 0x188]
	0x03AEE260 RET
	0x03AEE264 STR X30, [X31 - 0x30]!
	0x03AEE268 STP X22, X21, [X31 + 0x10]
	0x03AEE26C STP X20, X19, [X31 + 0x20]
	0x03AEE270 ADRP X22, 0x8F4000
	0x03AEE274 ADRP X21, 0x66B000
	0x03AEE278 LDRB W8, [X22 + 0x5F4]
	0x03AEE27C LDR X21, [X21 + 0xE0]
	0x03AEE280 MOV W20, W1
	0x03AEE284 MOV X19, X0
	0x03AEE288 TBNZ X8, 0x0, 0x3AEE2A0
	0x03AEE28C ADRP X0, 0x66B000
	0x03AEE290 LDR X0, [X0 + 0xE0]
	0x03AEE294 BL 0x1C16CF4
	0x03AEE298 MOVZ W8, 0x1
	0x03AEE29C STRB W8, [X22 + 0x5F4]
	0x03AEE2A0 LDR X2, [X21]
	0x03AEE2A4 ADD X0, X19, 0x188
	0x03AEE2A8 MOV W1, W20
	0x03AEE2AC BL 0x2253DFC
	0x03AEE2B0 TBZ X0, 0x0, 0x3AEE2C8
	0x03AEE2B4 MOV X0, X19
	0x03AEE2B8 LDP X20, X19, [X31 + 0x20]
	0x03AEE2BC LDP X22, X21, [X31 + 0x10]
	0x03AEE2C0 LDR X30, [X31], #0x30
	0x03AEE2C4 B 0x3AECBA4
	0x03AEE2C8 LDP X20, X19, [X31 + 0x20]
	0x03AEE2CC LDP X22, X21, [X31 + 0x10]
	0x03AEE2D0 LDR X30, [X31], #0x30
	0x03AEE2D4 RET
	0x03AEE2D8 LDRB W0, [X0 + 0x298]
	0x03AEE2DC RET
	0x03AEE2E0 STR X30, [X31 - 0x10]!
	0x03AEE2E4 LDR W8, [X1]
	0x03AEE2E8 TBNZ X8, 0x1F, 0x3AEE304
	0x03AEE2EC LDR X9, [X0 + 0x220]
	0x03AEE2F0 CBZ X9, 0x3AEE314
	0x03AEE2F4 LDR W9, [X9 + 0x10]
	0x03AEE2F8 CMP W8, W9
	0x03AEE2FC B.GT 0x3AEE308
	0x03AEE300 B 0x3AEE30C
	0x03AEE304 MOV W9, W31
	0x03AEE308 STR W9, [X1]
	0x03AEE30C LDR X30, [X31], #0x10
	0x03AEE310 RET
	0x03AEE314 BL 0x1C16F20
	0x03AEE318 STR X30, [X31 - 0x10]!
	0x03AEE31C LDR W8, [X1]
	0x03AEE320 TBNZ X8, 0x1F, 0x3AEE348
	0x03AEE324 LDR X9, [X0 + 0x138]
	0x03AEE328 CBZ X9, 0x3AEE358
	0x03AEE32C LDR X9, [X9 + 0x368]
	0x03AEE330 CBZ X9, 0x3AEE358
	0x03AEE334 LDR W9, [X9 + 0x18]
	0x03AEE338 SUB W9, W9, 0x1
	0x03AEE33C CMP W8, W9
	0x03AEE340 B.GT 0x3AEE34C
	0x03AEE344 B 0x3AEE350
	0x03AEE348 MOV W9, W31
	0x03AEE34C STR W9, [X1]
	0x03AEE350 LDR X30, [X31], #0x10
	0x03AEE354 RET
	0x03AEE358 BL 0x1C16F20
	0x03AEE35C STP X30, X19, [X31 - 0x10]!
	0x03AEE360 LDR W19, [X0 + 0x23C]
	0x03AEE364 BL 0x3AEC28C
	0x03AEE368 ADD W0, W0, W19
	0x03AEE36C LDP X30, X19, [X31], #0x10
	0x03AEE370 RET
	0x03AEE374 ADD X8, X0, 0x23C
	0x03AEE378 STR W1, [X0 + 0x23C]
	0x03AEE37C MOV X1, X8
	0x03AEE380 B 0x3AEE318
	0x03AEE384 STP X30, X19, [X31 - 0x10]!
	0x03AEE388 LDR W19, [X0 + 0x234]
	0x03AEE38C BL 0x3AEC28C
	0x03AEE390 ADD W0, W0, W19
	0x03AEE394 LDP X30, X19, [X31], #0x10
	0x03AEE398 RET
	0x03AEE39C STR X30, [X31 - 0x10]!
	0x03AEE3A0 STR W1, [X0 + 0x234]
	0x03AEE3A4 TBNZ X1, 0x1F, 0x3AEE3C0
	0x03AEE3A8 LDR X8, [X0 + 0x220]
	0x03AEE3AC CBZ X8, 0x3AEE3D0
	0x03AEE3B0 LDR W8, [X8 + 0x10]
	0x03AEE3B4 CMP W8, W1
	0x03AEE3B8 B.LT 0x3AEE3C4
	0x03AEE3BC B 0x3AEE3C8
	0x03AEE3C0 MOV W8, W31
	0x03AEE3C4 STR W8, [X0 + 0x234]
	0x03AEE3C8 LDR X30, [X31], #0x10
	0x03AEE3CC RET
	0x03AEE3D0 BL 0x1C16F20
	0x03AEE3D4 STP X30, X19, [X31 - 0x10]!
	0x03AEE3D8 LDR W19, [X0 + 0x240]
	0x03AEE3DC BL 0x3AEC28C
	0x03AEE3E0 ADD W0, W0, W19
	0x03AEE3E4 LDP X30, X19, [X31], #0x10
	0x03AEE3E8 RET
	0x03AEE3EC ADD X8, X0, 0x240
	0x03AEE3F0 STR W1, [X0 + 0x240]
	0x03AEE3F4 MOV X1, X8
	0x03AEE3F8 B 0x3AEE318
	0x03AEE3FC STP X30, X19, [X31 - 0x10]!
	0x03AEE400 LDR W19, [X0 + 0x238]
	0x03AEE404 BL 0x3AEC28C
	0x03AEE408 ADD W0, W0, W19

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x8F5000
	009 Move X24, 0x606000
	010 Move W8, [X21+1503]
	011 Move X24, [X24+1432]
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {38}
	018 Move X0, 0x606000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move X0, 0x66C000
	022 Move X0, [X0+96]
	023 Call 0x1C17CF4
	024 Move X0, 0x66C000
	025 Move X0, [X0+104]
	026 Call 0x1C17CF4
	027 Move X0, 0x66B000
	028 Move X0, [X0+2920]
	029 Call 0x1C17CF4
	030 Move X0, 0x66B000
	031 Move X0, [X0+2248]
	032 Call 0x1C17CF4
	033 Move X0, 0x66C000
	034 Move X0, [X0+112]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+1503], W8
	038 Move X0, [X24]
	039 Move X22, [X19+336]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X22
	045 Move X1, X31
	046 Move X2, X31
	047 Add X21, X19, 336
	048 Call Object.op_Inequality, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {76}
	053 Move X8, [X21]
	054 Compare X8, 0
	055 JumpIfEqual {134}
	056 Move X22, [X8+280]
	057 Move X8, 0x66B000
	058 Move X8, [X8+2920]
	059 Move X0, [X8]
	060 Call 0x1C17F10
	061 Move X8, 0x66C000
	062 Move X8, [X8+104]
	063 Move X1, X19
	064 Move X3, X31
	065 Move X23, X0
	066 Move X2, [X8]
	067 Call UnityAction`1<Single>..ctor, X0, X1, X2
	068 Compare X22, 0
	069 JumpIfEqual {134}
	070 Move X8, 0x66C000
	071 Move X8, [X8+112]
	072 Move X0, X22
	073 Move X1, X23
	074 Move X2, [X8]
	075 Call UnityEvent`1<Single>.RemoveListener, X0, X1
	076 Move X8, 0x66C000
	077 Move X8, [X8+96]
	078 Move X0, X21
	079 Move X1, X20
	080 Move X2, [X8]
	081 Call 0x2254B70, X0, X1
	082 Move X0, [X24]
	083 Move X20, [X21]
	084 Move W8, [X0+224]
	085 Compare W8, 0
	086 JumpIfNotEqual {88}
	087 Call 0x1C17DFC
	088 Move X0, X20
	089 Move X1, X31
	090 Call Object.op_Implicit, X0
	091 Move TEMP, X0
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfNotEqual {126}
	095 Move X8, [X21]
	096 Compare X8, 0
	097 JumpIfEqual {134}
	098 Move X20, [X8+280]
	099 Move X8, 0x66B000
	100 Move X8, [X8+2920]
	101 Move X0, [X8]
	102 Call 0x1C17F10
	103 Move X8, 0x66C000
	104 Move X8, [X8+104]
	105 Move X1, X19
	106 Move X3, X31
	107 Move X21, X0
	108 Move X2, [X8]
	109 Call UnityAction`1<Single>..ctor, X0, X1, X2
	110 Compare X20, 0
	111 JumpIfEqual {134}
	112 Move X8, 0x66B000
	113 Move X8, [X8+2248]
	114 Move X0, X20
	115 Move X1, X21
	116 Move X20, [X31+48]
	117 Move X19, [X31+56]
	118 Move X2, [X8]
	119 Move X22, [X31+32]
	120 Move X21, [X31+40]
	121 Move X24, [X31+16]
	122 Move X23, [X31+24]
	123 Move X30, [X31+64]
	124 Call UnityEvent`1<Single>.AddListener, X0, X1
	125 Return 
	126 Move X20, [X31+48]
	127 Move X19, [X31+56]
	128 Move X22, [X31+32]
	129 Move X21, [X31+40]
	130 Move X24, [X31+16]
	131 Move X23, [X31+24]
	132 Move X30, [X31+64]
	133 Return 
	134 Call 0x1C17F20

Method: System.Single get_scrollSensitivity()

Disassembly:
	0x03AEE40C LDP X30, X19, [X31], #0x10
	0x03AEE410 RET

ISIL:
	001 Move V0, [X0+380]
	002 Return V0

Method: System.Void set_scrollSensitivity(System.Single value)

Disassembly:
	0x03AEE414 STR X30, [X31 - 0x10]!
	0x03AEE418 STR W1, [X0 + 0x238]
	0x03AEE41C TBNZ X1, 0x1F, 0x3AEE438
	0x03AEE420 LDR X8, [X0 + 0x220]
	0x03AEE424 CBZ X8, 0x3AEE448
	0x03AEE428 LDR W8, [X8 + 0x10]
	0x03AEE42C CMP W8, W1
	0x03AEE430 B.LT 0x3AEE43C
	0x03AEE434 B 0x3AEE440
	0x03AEE438 MOV W8, W31
	0x03AEE43C STR W8, [X0 + 0x238]
	0x03AEE440 LDR X30, [X31], #0x10
	0x03AEE444 RET
	0x03AEE448 BL 0x1C16F20
	0x03AEE44C STP X30, X21, [X31 - 0x20]!
	0x03AEE450 STP X20, X19, [X31 + 0x10]
	0x03AEE454 LDR W20, [X0 + 0x234]
	0x03AEE458 MOV X19, X0
	0x03AEE45C BL 0x3AEC28C
	0x03AEE460 LDR W21, [X19 + 0x238]
	0x03AEE464 ADD W20, W0, W20
	0x03AEE468 MOV X0, X19
	0x03AEE46C BL 0x3AEC28C
	0x03AEE470 ADD W8, W0, W21
	0x03AEE474 CMP W20, W8
	0x03AEE478 LDP X20, X19, [X31 + 0x10]
	0x03AEE47C CSET W0, NE
	0x03AEE480 LDP X30, X21, [X31], #0x20
	0x03AEE484 RET

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8F5000
	007 Move X20, 0x66C000
	008 Move W8, [X21+1504]
	009 Move X20, [X20+80]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66C000
	017 Move X0, [X0+80]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1504], W8
	021 Move X1, [X20]
	022 Add X0, X19, 380
	023 Move V0, V8
	024 Call SetPropertyUtility.SetStruct, X0, V0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {37}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Move V8, [X31+48]
	035 Call TMP_InputField.MarkGeometryAsDirty, X0
	036 Return 
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Move V8, [X31+48]
	042 Return 

Method: UnityEngine.Color get_caretColor()

Disassembly:
	0x03AEE488 STP X30, X19, [X31 - 0x10]!
	0x03AEE48C LDR W19, [X0 + 0x240]
	0x03AEE490 BL 0x3AEC28C
	0x03AEE494 ADD W0, W0, W19
	0x03AEE498 LDP X30, X19, [X31], #0x10
	0x03AEE49C RET
	0x03AEE4A0 STR X30, [X31 - 0x20]!
	0x03AEE4A4 STP X20, X19, [X31 + 0x10]
	0x03AEE4A8 MOV W19, W1
	0x03AEE4AC MOV X20, X0
	0x03AEE4B0 BL 0x3AEE4D4
	0x03AEE4B4 MOV X0, X20
	0x03AEE4B8 MOV W1, W19
	0x03AEE4BC BL 0x3AEE510
	0x03AEE4C0 MOVZ W8, 0x1
	0x03AEE4C4 STRB W8, [X20 + 0x2E9]
	0x03AEE4C8 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+520]
	003 Compare W8, 0
	004 JumpIfEqual {9}
	005 Move V0, [X0+504]
	006 Move V1, [X0+508]
	007 Move V2, [X0+512]
	008 Move V3, [X0+516]
	009 Move X0, [X0+312]
	010 Compare X0, 0
	011 JumpIfEqual {18}
	012 Move X8, [X0]
	013 Move X9, [X8+664]
	014 Move X1, [X8+672]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X30, [X31+16]
	017 Return X0
	018 Call 0x1C17F20

Method: System.Void set_caretColor(UnityEngine.Color value)

Disassembly:
	0x03AEE4CC LDR X30, [X31], #0x20
	0x03AEE4D0 RET
	0x03AEE4D4 STR X30, [X31 - 0x20]!
	0x03AEE4D8 STP X20, X19, [X31 + 0x10]
	0x03AEE4DC MOV W20, W1
	0x03AEE4E0 MOV X19, X0
	0x03AEE4E4 BL 0x3AEC28C
	0x03AEE4E8 CBNZ W0, 0x3AEE504
	0x03AEE4EC ADD X1, X19, 0x23C
	0x03AEE4F0 MOV X0, X19
	0x03AEE4F4 STR W20, [X19 + 0x23C]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Add X0, X0, 504
	005 Move X1, X31
	006 Call SetPropertyUtility.SetColor, X0, X1
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {16}
	011 Move X0, X19
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call TMP_InputField.MarkGeometryAsDirty, X0
	015 Return 
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return 

Method: System.Boolean get_customCaretColor()

Disassembly:
	0x03AEE4F8 BL 0x3AEE318
	0x03AEE4FC MOVZ W8, 0x1

ISIL:
	001 Move W0, [X0+520]
	002 Return X0

Method: System.Void set_customCaretColor(System.Boolean value)

Disassembly:
	0x03AEE500 STRB W8, [X19 + 0x2E9]
	0x03AEE504 LDP X20, X19, [X31 + 0x10]
	0x03AEE508 LDR X30, [X31], #0x20
	0x03AEE50C RET
	0x03AEE510 STR X30, [X31 - 0x20]!
	0x03AEE514 STP X20, X19, [X31 + 0x10]
	0x03AEE518 MOV W20, W1

ISIL:
	001 Move W9, [X0+520]
	002 And W8, W1, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Return 
	005 Move [X0+520], W8
	006 Call TMP_InputField.MarkGeometryAsDirty, X0
	007 Return 

Method: UnityEngine.Color get_selectionColor()

Disassembly:
	0x03AEE51C MOV X19, X0
	0x03AEE520 BL 0x3AEC28C
	0x03AEE524 CBNZ W0, 0x3AEE540
	0x03AEE528 ADD X1, X19, 0x240
	0x03AEE52C MOV X0, X19

ISIL:
	001 Move V0, [X0+524]
	002 Move V1, [X0+528]
	003 Move V2, [X0+532]
	004 Move V3, [X0+536]
	005 Return X0

Method: System.Void set_selectionColor(UnityEngine.Color value)

Disassembly:
	0x03AEE530 STR W20, [X19 + 0x240]
	0x03AEE534 BL 0x3AEE318
	0x03AEE538 MOVZ W8, 0x1
	0x03AEE53C STRB W8, [X19 + 0x2E9]
	0x03AEE540 LDP X20, X19, [X31 + 0x10]
	0x03AEE544 LDR X30, [X31], #0x20
	0x03AEE548 RET
	0x03AEE54C STP X30, X19, [X31 - 0x10]!
	0x03AEE550 LDR W19, [X0 + 0x23C]
	0x03AEE554 BL 0x3AEC28C
	0x03AEE558 ADD W0, W0, W19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Add X0, X0, 524
	005 Move X1, X31
	006 Call SetPropertyUtility.SetColor, X0, X1
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {16}
	011 Move X0, X19
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call TMP_InputField.MarkGeometryAsDirty, X0
	015 Return 
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return 

Method: TMPro.TMP_InputField/SubmitEvent get_onEndEdit()

Disassembly:
	0x03AEE55C LDP X30, X19, [X31], #0x10
	0x03AEE560 RET

ISIL:
	001 Move X0, [X0+432]
	002 Return X0

Method: System.Void set_onEndEdit(TMPro.TMP_InputField/SubmitEvent value)

Disassembly:
	0x03AEE564 STP X30, X19, [X31 - 0x10]!
	0x03AEE568 LDR W19, [X0 + 0x240]
	0x03AEE56C BL 0x3AEC28C
	0x03AEE570 ADD W0, W0, W19
	0x03AEE574 LDP X30, X19, [X31], #0x10
	0x03AEE578 RET
	0x03AEE57C STP X30, X19, [X31 - 0x10]!
	0x03AEE580 LDR W19, [X0 + 0x238]
	0x03AEE584 BL 0x3AEC28C
	0x03AEE588 ADD W0, W0, W19
	0x03AEE58C LDP X30, X19, [X31], #0x10
	0x03AEE590 RET
	0x03AEE594 STR X30, [X31 - 0x20]!
	0x03AEE598 STP X20, X19, [X31 + 0x10]
	0x03AEE59C MOV W19, W1
	0x03AEE5A0 MOV X20, X0
	0x03AEE5A4 BL 0x3AEE5C8
	0x03AEE5A8 MOV X0, X20
	0x03AEE5AC MOV W1, W19
	0x03AEE5B0 BL 0x3AEE620
	0x03AEE5B4 MOVZ W8, 0x1
	0x03AEE5B8 STRB W8, [X20 + 0x2EA]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F5000
	007 Move X21, 0x66C000
	008 Move W8, [X22+1505]
	009 Move X21, [X21+120]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66C000
	017 Move X0, [X0+120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1505], W8
	021 Move X2, [X21]
	022 Add X0, X20, 432
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x2254B70, X0, X1
	030 Return 

Method: TMPro.TMP_InputField/SubmitEvent get_onSubmit()

Disassembly:
	0x03AEE5BC LDP X20, X19, [X31 + 0x10]
	0x03AEE5C0 LDR X30, [X31], #0x20

ISIL:
	001 Move X0, [X0+440]
	002 Return X0

Method: System.Void set_onSubmit(TMPro.TMP_InputField/SubmitEvent value)

Disassembly:
	0x03AEE5C4 RET
	0x03AEE5C8 STR X30, [X31 - 0x20]!
	0x03AEE5CC STP X20, X19, [X31 + 0x10]
	0x03AEE5D0 MOV W20, W1
	0x03AEE5D4 MOV X19, X0
	0x03AEE5D8 BL 0x3AEC28C
	0x03AEE5DC CBNZ W0, 0x3AEE610
	0x03AEE5E0 STR W20, [X19 + 0x234]
	0x03AEE5E4 TBNZ X20, 0x1F, 0x3AEE600
	0x03AEE5E8 LDR X8, [X19 + 0x220]
	0x03AEE5EC CBZ X8, 0x3AEE61C
	0x03AEE5F0 LDR W8, [X8 + 0x10]
	0x03AEE5F4 CMP W8, W20
	0x03AEE5F8 B.LT 0x3AEE604
	0x03AEE5FC B 0x3AEE608
	0x03AEE600 MOV W8, W31
	0x03AEE604 STR W8, [X19 + 0x234]
	0x03AEE608 MOVZ W8, 0x1
	0x03AEE60C STRB W8, [X19 + 0x2EA]
	0x03AEE610 LDP X20, X19, [X31 + 0x10]
	0x03AEE614 LDR X30, [X31], #0x20
	0x03AEE618 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F5000
	007 Move X21, 0x66C000
	008 Move W8, [X22+1506]
	009 Move X21, [X21+120]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66C000
	017 Move X0, [X0+120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1506], W8
	021 Move X2, [X21]
	022 Add X0, X20, 440
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x2254B70, X0, X1
	030 Return 

Method: TMPro.TMP_InputField/SelectionEvent get_onSelect()

Disassembly:
	0x03AEE61C BL 0x1C16F20
	0x03AEE620 STR X30, [X31 - 0x20]!

ISIL:
	001 Move X0, [X0+448]
	002 Return X0

Method: System.Void set_onSelect(TMPro.TMP_InputField/SelectionEvent value)

Disassembly:
	0x03AEE624 STP X20, X19, [X31 + 0x10]
	0x03AEE628 MOV W20, W1
	0x03AEE62C MOV X19, X0
	0x03AEE630 BL 0x3AEC28C
	0x03AEE634 CBNZ W0, 0x3AEE668
	0x03AEE638 STR W20, [X19 + 0x238]
	0x03AEE63C TBNZ X20, 0x1F, 0x3AEE658
	0x03AEE640 LDR X8, [X19 + 0x220]
	0x03AEE644 CBZ X8, 0x3AEE674
	0x03AEE648 LDR W8, [X8 + 0x10]
	0x03AEE64C CMP W8, W20
	0x03AEE650 B.LT 0x3AEE65C
	0x03AEE654 B 0x3AEE660
	0x03AEE658 MOV W8, W31
	0x03AEE65C STR W8, [X19 + 0x238]
	0x03AEE660 MOVZ W8, 0x1
	0x03AEE664 STRB W8, [X19 + 0x2EA]
	0x03AEE668 LDP X20, X19, [X31 + 0x10]
	0x03AEE66C LDR X30, [X31], #0x20
	0x03AEE670 RET
	0x03AEE674 BL 0x1C16F20
	0x03AEE678 STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F5000
	007 Move X21, 0x66C000
	008 Move W8, [X22+1507]
	009 Move X21, [X21+128]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66C000
	017 Move X0, [X0+128]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1507], W8
	021 Move X2, [X21]
	022 Add X0, X20, 448
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x2254B70, X0, X1
	030 Return 

Method: TMPro.TMP_InputField/SelectionEvent get_onDeselect()

Disassembly:
	0x03AEE67C LDR W19, [X0 + 0x234]
	0x03AEE680 BL 0x3AEC28C

ISIL:
	001 Move X0, [X0+456]
	002 Return X0

Method: System.Void set_onDeselect(TMPro.TMP_InputField/SelectionEvent value)

Disassembly:
	0x03AEE684 ADD W0, W0, W19
	0x03AEE688 LDP X30, X19, [X31], #0x10
	0x03AEE68C RET
	0x03AEE690 STP X30, X19, [X31 - 0x10]!
	0x03AEE694 LDR W19, [X0 + 0x238]
	0x03AEE698 BL 0x3AEC28C
	0x03AEE69C ADD W0, W0, W19
	0x03AEE6A0 LDP X30, X19, [X31], #0x10
	0x03AEE6A4 RET
	0x03AEE6A8 STP X30, X23, [X31 - 0x30]!
	0x03AEE6AC STP X22, X21, [X31 + 0x10]
	0x03AEE6B0 STP X20, X19, [X31 + 0x20]
	0x03AEE6B4 ADRP X20, 0x8F4000
	0x03AEE6B8 LDRB W8, [X20 + 0x5F5]
	0x03AEE6BC MOV X19, X0
	0x03AEE6C0 TBNZ X8, 0x0, 0x3AEE81C
	0x03AEE6C4 ADRP X0, 0x663000
	0x03AEE6C8 LDR X0, [X0 + 0x530]
	0x03AEE6CC BL 0x1C16CF4
	0x03AEE6D0 ADRP X0, 0x605000
	0x03AEE6D4 LDR X0, [X0 + 0x970]
	0x03AEE6D8 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F5000
	007 Move X21, 0x66C000
	008 Move W8, [X22+1508]
	009 Move X21, [X21+128]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66C000
	017 Move X0, [X0+128]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1508], W8
	021 Move X2, [X21]
	022 Add X0, X20, 456
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x2254B70, X0, X1
	030 Return 

Method: TMPro.TMP_InputField/TextSelectionEvent get_onTextSelection()

Disassembly:
	0x03AEE6DC ADRP X0, 0x66B000
	0x03AEE6E0 LDR X0, [X0 + 0xE8]

ISIL:
	001 Move X0, [X0+464]
	002 Return X0

Method: System.Void set_onTextSelection(TMPro.TMP_InputField/TextSelectionEvent value)

Disassembly:
	0x03AEE6E4 BL 0x1C16CF4
	0x03AEE6E8 ADRP X0, 0x66B000
	0x03AEE6EC LDR X0, [X0 + 0xF0]
	0x03AEE6F0 BL 0x1C16CF4
	0x03AEE6F4 ADRP X0, 0x66B000
	0x03AEE6F8 LDR X0, [X0 + 0xF8]
	0x03AEE6FC BL 0x1C16CF4
	0x03AEE700 ADRP X0, 0x607000
	0x03AEE704 LDR X0, [X0 + 0x6B8]
	0x03AEE708 BL 0x1C16CF4
	0x03AEE70C ADRP X0, 0x66B000
	0x03AEE710 LDR X0, [X0 + 0x100]
	0x03AEE714 BL 0x1C16CF4
	0x03AEE718 ADRP X0, 0x66B000
	0x03AEE71C LDR X0, [X0 + 0x108]
	0x03AEE720 BL 0x1C16CF4
	0x03AEE724 ADRP X0, 0x665000
	0x03AEE728 LDR X0, [X0 + 0xCC0]
	0x03AEE72C BL 0x1C16CF4
	0x03AEE730 ADRP X0, 0x66B000
	0x03AEE734 LDR X0, [X0 + 0x110]
	0x03AEE738 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F5000
	007 Move X21, 0x66C000
	008 Move W8, [X22+1509]
	009 Move X21, [X21+136]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66C000
	017 Move X0, [X0+136]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1509], W8
	021 Move X2, [X21]
	022 Add X0, X20, 464
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x2254B70, X0, X1
	030 Return 

Method: TMPro.TMP_InputField/TextSelectionEvent get_onEndTextSelection()

Disassembly:
	0x03AEE73C ADRP X0, 0x665000
	0x03AEE740 LDR X0, [X0 + 0xB40]

ISIL:
	001 Move X0, [X0+472]
	002 Return X0

Method: System.Void set_onEndTextSelection(TMPro.TMP_InputField/TextSelectionEvent value)

Disassembly:
	0x03AEE744 BL 0x1C16CF4
	0x03AEE748 ADRP X0, 0x605000
	0x03AEE74C LDR X0, [X0 + 0xA58]
	0x03AEE750 BL 0x1C16CF4
	0x03AEE754 ADRP X0, 0x66B000
	0x03AEE758 LDR X0, [X0 + 0x118]
	0x03AEE75C BL 0x1C16CF4
	0x03AEE760 ADRP X0, 0x605000
	0x03AEE764 LDR X0, [X0 + 0x598]
	0x03AEE768 BL 0x1C16CF4
	0x03AEE76C ADRP X0, 0x66B000
	0x03AEE770 LDR X0, [X0 + 0x120]
	0x03AEE774 BL 0x1C16CF4
	0x03AEE778 ADRP X0, 0x607000
	0x03AEE77C LDR X0, [X0 + 0x278]
	0x03AEE780 BL 0x1C16CF4
	0x03AEE784 ADRP X0, 0x66B000
	0x03AEE788 LDR X0, [X0 + 0x128]
	0x03AEE78C BL 0x1C16CF4
	0x03AEE790 ADRP X0, 0x66B000
	0x03AEE794 LDR X0, [X0 + 0x130]
	0x03AEE798 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F5000
	007 Move X21, 0x66C000
	008 Move W8, [X22+1510]
	009 Move X21, [X21+136]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66C000
	017 Move X0, [X0+136]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1510], W8
	021 Move X2, [X21]
	022 Add X0, X20, 472
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x2254B70, X0, X1
	030 Return 

Method: TMPro.TMP_InputField/OnChangeEvent get_onValueChanged()

Disassembly:
	0x03AEE79C ADRP X0, 0x66B000
	0x03AEE7A0 LDR X0, [X0 + 0x68]

ISIL:
	001 Move X0, [X0+480]
	002 Return X0

Method: System.Void set_onValueChanged(TMPro.TMP_InputField/OnChangeEvent value)

Disassembly:
	0x03AEE7A4 BL 0x1C16CF4
	0x03AEE7A8 ADRP X0, 0x66B000
	0x03AEE7AC LDR X0, [X0 + 0x138]
	0x03AEE7B0 BL 0x1C16CF4
	0x03AEE7B4 ADRP X0, 0x66B000
	0x03AEE7B8 LDR X0, [X0 + 0x140]
	0x03AEE7BC BL 0x1C16CF4
	0x03AEE7C0 ADRP X0, 0x66A000
	0x03AEE7C4 LDR X0, [X0 + 0x3F0]
	0x03AEE7C8 BL 0x1C16CF4
	0x03AEE7CC ADRP X0, 0x60D000
	0x03AEE7D0 LDR X0, [X0 + 0xC60]
	0x03AEE7D4 BL 0x1C16CF4
	0x03AEE7D8 ADRP X0, 0x605000
	0x03AEE7DC LDR X0, [X0 + 0x6C0]
	0x03AEE7E0 BL 0x1C16CF4
	0x03AEE7E4 ADRP X0, 0x66A000
	0x03AEE7E8 LDR X0, [X0 + 0xB68]
	0x03AEE7EC BL 0x1C16CF4
	0x03AEE7F0 ADRP X0, 0x62C000
	0x03AEE7F4 LDR X0, [X0 + 0xE30]
	0x03AEE7F8 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F5000
	007 Move X21, 0x66C000
	008 Move W8, [X22+1511]
	009 Move X21, [X21+144]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66C000
	017 Move X0, [X0+144]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1511], W8
	021 Move X2, [X21]
	022 Add X0, X20, 480
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x2254B70, X0, X1
	030 Return 

Method: TMPro.TMP_InputField/TouchScreenKeyboardEvent get_onTouchScreenKeyboardStatusChanged()

Disassembly:
	0x03AEE7FC ADRP X0, 0x66A000
	0x03AEE800 LDR X0, [X0 + 0x8C8]

ISIL:
	001 Move X0, [X0+488]
	002 Return X0

Method: System.Void set_onTouchScreenKeyboardStatusChanged(TMPro.TMP_InputField/TouchScreenKeyboardEvent value)

Disassembly:
	0x03AEE804 BL 0x1C16CF4
	0x03AEE808 ADRP X0, 0x66B000
	0x03AEE80C LDR X0, [X0 + 0x148]
	0x03AEE810 BL 0x1C16CF4
	0x03AEE814 MOVZ W8, 0x1
	0x03AEE818 STRB W8, [X20 + 0x5F5]
	0x03AEE81C ADRP X20, 0x66B000
	0x03AEE820 LDR X20, [X20 + 0xE8]
	0x03AEE824 MOV X0, X19
	0x03AEE828 MOV X1, X31
	0x03AEE82C BL 0x3E3BAA8
	0x03AEE830 LDR X8, [X19 + 0x220]
	0x03AEE834 CBNZ X8, 0x3AEE850
	0x03AEE838 ADRP X8, 0x607000
	0x03AEE83C LDR X8, [X8 + 0x278]
	0x03AEE840 LDR X8, [X8]
	0x03AEE844 LDR X8, [X8 + 0xB8]
	0x03AEE848 LDR X8, [X8]
	0x03AEE84C STR X8, [X19 + 0x220]
	0x03AEE850 LDR X1, [X20]
	0x03AEE854 ADRP X20, 0x605000
	0x03AEE858 LDR X20, [X20 + 0x970]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F5000
	007 Move X21, 0x66C000
	008 Move W8, [X22+1512]
	009 Move X21, [X21+152]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66C000
	017 Move X0, [X0+152]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1512], W8
	021 Move X2, [X21]
	022 Add X0, X20, 488
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x2254B70, X0, X1
	030 Return 

Method: TMPro.TMP_InputField/OnValidateInput get_onValidateInput()

Disassembly:
	0x03AEE85C MOV X0, X19
	0x03AEE860 BL 0x21A3894

ISIL:
	001 Move X0, [X0+496]
	002 Return X0

Method: System.Void set_onValidateInput(TMPro.TMP_InputField/OnValidateInput value)

Disassembly:
	0x03AEE864 CBZ X0, 0x3AEE88C
	0x03AEE868 ADRP X8, 0x66B000
	0x03AEE86C LDR X8, [X8 + 0xF0]
	0x03AEE870 MOVZ W9, 0x1
	0x03AEE874 STRB W9, [X19 + 0x160]
	0x03AEE878 MOV X0, X19
	0x03AEE87C LDR X1, [X8]
	0x03AEE880 BL 0x21A3894
	0x03AEE884 STR X0, [X19 + 0x168]
	0x03AEE888 B 0x3AEE890
	0x03AEE88C STRB W31, [X19 + 0x160]
	0x03AEE890 LDR X0, [X20]
	0x03AEE894 LDR W8, [X0 + 0xE0]
	0x03AEE898 CBNZ W8, 0x3AEE8A0
	0x03AEE89C BL 0x1C16DFC
	0x03AEE8A0 ADRP X23, 0x605000
	0x03AEE8A4 LDR X23, [X23 + 0x598]
	0x03AEE8A8 MOV X0, X31
	0x03AEE8AC BL 0x3C018E4
	0x03AEE8B0 TBZ X0, 0x0, 0x3AEEAEC
	0x03AEE8B4 LDR X0, [X23]
	0x03AEE8B8 LDR X20, [X19 + 0x258]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F5000
	007 Move X21, 0x66C000
	008 Move W8, [X22+1513]
	009 Move X21, [X21+160]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66C000
	017 Move X0, [X0+160]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1513], W8
	021 Move X2, [X21]
	022 Add X0, X20, 496
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x2254B70, X0, X1
	030 Return 

Method: System.Int32 get_characterLimit()

Disassembly:
	0x03AEE8BC LDR W8, [X0 + 0xE0]
	0x03AEE8C0 CBNZ W8, 0x3AEE8C8

ISIL:
	001 Move W0, [X0+428]
	002 Return X0

Method: System.Void set_characterLimit(System.Int32 value)

Disassembly:
	0x03AEE8C4 BL 0x1C16DFC
	0x03AEE8C8 MOV X0, X20
	0x03AEE8CC MOV X1, X31
	0x03AEE8D0 MOV X2, X31
	0x03AEE8D4 BL 0x3C3883C
	0x03AEE8D8 TBZ X0, 0x0, 0x3AEEAEC
	0x03AEE8DC LDR X0, [X23]
	0x03AEE8E0 LDR X20, [X19 + 0x138]
	0x03AEE8E4 LDR W8, [X0 + 0xE0]
	0x03AEE8E8 CBNZ W8, 0x3AEE8F0
	0x03AEE8EC BL 0x1C16DFC
	0x03AEE8F0 MOV X0, X20
	0x03AEE8F4 MOV X1, X31
	0x03AEE8F8 MOV X2, X31
	0x03AEE8FC BL 0x3C354F8
	0x03AEE900 TBZ X0, 0x0, 0x3AEEAEC
	0x03AEE904 ADRP X8, 0x60D000
	0x03AEE908 LDR X8, [X8 + 0xC60]
	0x03AEE90C MOVZ W1, 0x1
	0x03AEE910 LDR X0, [X8]
	0x03AEE914 BL 0x1C16D6C
	0x03AEE918 ADRP X8, 0x605000
	0x03AEE91C LDR X8, [X8 + 0x6C0]
	0x03AEE920 ADRP X9, 0x66B000
	0x03AEE924 MOV X21, X0
	0x03AEE928 LDR X8, [X8]
	0x03AEE92C LDR X9, [X9 + 0x140]
	0x03AEE930 LDR W10, [X8 + 0xE0]
	0x03AEE934 LDR X20, [X9]
	0x03AEE938 CBNZ W10, 0x3AEE944
	0x03AEE93C MOV X0, X8
	0x03AEE940 BL 0x1C16DFC
	0x03AEE944 MOV X0, X20
	0x03AEE948 MOV X1, X31
	0x03AEE94C BL 0x338C698
	0x03AEE950 CBZ X21, 0x3AEEDC8
	0x03AEE954 MOV X20, X0
	0x03AEE958 CBZ X0, 0x3AEE970
	0x03AEE95C LDR X8, [X21]
	0x03AEE960 MOV X0, X20
	0x03AEE964 LDR X1, [X8 + 0x40]
	0x03AEE968 BL 0x1C16E00
	0x03AEE96C CBZ X0, 0x3AEEDD0
	0x03AEE970 LDR W8, [X21 + 0x18]
	0x03AEE974 CBZ W8, 0x3AEEDCC
	0x03AEE978 STR X20, [X21 + 0x20]
	0x03AEE97C ADRP X8, 0x605000
	0x03AEE980 LDR X8, [X8 + 0xA58]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F5000
	007 Move X21, 0x606000
	008 Move W8, [X22+1514]
	009 Move X21, [X21+1448]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x606000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move X0, 0x66C000
	020 Move X0, [X0+88]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+1514], W8
	024 Move X0, [X21]
	025 Move X22, 0x66C000
	026 Add X21, X20, 428
	027 Move W8, [X0+224]
	028 Move X22, [X22+88]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move W0, W31
	033 Move W1, W19
	034 Move X2, X31
	035 Call Math.Max, X0, X1
	036 Move X2, [X22]
	037 Move W1, W0
	038 Move X0, X21
	039 Call SetPropertyUtility.SetStruct, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {58}
	044 Move X0, X20
	045 Call TMP_InputField.UpdateLabel, X0
	046 Move X0, [X20+256]
	047 Compare X0, 0
	048 JumpIfEqual {58}
	049 Move W1, W19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X2, X31
	055 Move X30, [X31+48]
	056 Call TouchScreenKeyboard.set_characterLimit, X0, X1
	057 Return 
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X30, [X31+48]
	063 Return 

Method: System.Single get_pointSize()

Disassembly:
	0x03AEE984 LDR X0, [X8]
	0x03AEE988 BL 0x1C16F10

ISIL:
	001 Move V0, [X0+424]
	002 Return V0

Method: System.Void set_pointSize(System.Single value)

Disassembly:
	0x03AEE98C ADRP X8, 0x66B000
	0x03AEE990 LDR X8, [X8 + 0x148]
	0x03AEE994 MOV X2, X21
	0x03AEE998 MOV X3, X31
	0x03AEE99C MOV X20, X0
	0x03AEE9A0 LDR X1, [X8]
	0x03AEE9A4 BL 0x3C35A8C
	0x03AEE9A8 CBZ X20, 0x3AEEDC8
	0x03AEE9AC MOVZ W1, 0x34
	0x03AEE9B0 MOV X0, X20
	0x03AEE9B4 MOV X2, X31
	0x03AEE9B8 BL 0x3C396EC
	0x03AEE9BC MOV X0, X20
	0x03AEE9C0 MOV X1, X31
	0x03AEE9C4 BL 0x3C356F8
	0x03AEE9C8 LDR X8, [X19 + 0x138]
	0x03AEE9CC CBZ X8, 0x3AEEDC8
	0x03AEE9D0 MOV X21, X0
	0x03AEE9D4 MOV X0, X8
	0x03AEE9D8 MOV X1, X31
	0x03AEE9DC BL 0x3AF8D78
	0x03AEE9E0 CBZ X0, 0x3AEEDC8
	0x03AEE9E4 MOV X1, X31
	0x03AEE9E8 BL 0x3C3F49C
	0x03AEE9EC CBZ X21, 0x3AEEDC8
	0x03AEE9F0 MOV X1, X0
	0x03AEE9F4 MOV X0, X21
	0x03AEE9F8 MOV X2, X31
	0x03AEE9FC BL 0x3C3FE70
	0x03AEEA00 MOV X0, X20
	0x03AEEA04 MOV X1, X31
	0x03AEEA08 BL 0x3C356F8
	0x03AEEA0C CBZ X0, 0x3AEEDC8
	0x03AEEA10 MOV X1, X31
	0x03AEEA14 BL 0x3C40CC8
	0x03AEEA18 MOV X0, X19
	0x03AEEA1C MOV X1, X31
	0x03AEEA20 BL 0x3C32ECC
	0x03AEEA24 CBZ X0, 0x3AEEDC8
	0x03AEEA28 MOV X1, X31
	0x03AEEA2C BL 0x3C35734
	0x03AEEA30 MOV W1, W0
	0x03AEEA34 MOV X0, X20
	0x03AEEA38 MOV X2, X31
	0x03AEEA3C BL 0x3C35770

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8F5000
	007 Move X20, 0x606000
	008 Move W8, [X21+1515]
	009 Move X20, [X20+1448]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x606000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move X0, 0x66C000
	020 Move X0, [X0+80]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1515], W8
	024 Move X0, [X20]
	025 Move X21, 0x66C000
	026 Add X20, X19, 424
	027 Move W8, [X0+224]
	028 Move X21, [X21+80]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move S0, W31
	033 Move V1, V8
	034 Move X0, X31
	035 Call Math.Max, V0, V1
	036 Move X1, [X21]
	037 Move X0, X20
	038 Call SetPropertyUtility.SetStruct, X0, V0
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {54}
	043 Move V0, [X19+424]
	044 Move X0, X19
	045 Call TMP_InputField.SetGlobalPointSize, X0, V0
	046 Move X0, X19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+16]
	050 Move X21, [X31+24]
	051 Move V8, [X31+48]
	052 Call TMP_InputField.UpdateLabel, X0
	053 Return 
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X30, [X31+16]
	057 Move X21, [X31+24]
	058 Move V8, [X31+48]
	059 Return 

Method: TMPro.TMP_FontAsset get_fontAsset()

Disassembly:
	0x03AEEB28 LDR X8, [X0 + 0x28]
	0x03AEEB2C CBZ X8, 0x3AEEB6C

ISIL:
	001 Move X0, [X0+704]
	002 Return X0

Method: System.Void set_fontAsset(TMPro.TMP_FontAsset value)

Disassembly:
	0x03ADE88C LDR X1, [X20 + 0x18]
	0x03ADE890 B 0x3ADE89C
	0x03ADE894 CBZ X0, 0x3ADE95C
	0x03ADE898 MOV X1, X31
	0x03ADE89C MOV X2, X31
	0x03ADE8A0 BL 0x3CD3398
	0x03ADE8A4 LDR X20, [X19 + 0x110]
	0x03ADE8A8 CBZ X20, 0x3ADE95C
	0x03ADE8AC LDR X0, [X22]
	0x03ADE8B0 LDR X21, [X20 + 0xD8]
	0x03ADE8B4 LDR W8, [X0 + 0xE0]
	0x03ADE8B8 CBNZ W8, 0x3ADE8C0
	0x03ADE8BC BL 0x1C16DFC
	0x03ADE8C0 MOV X0, X21
	0x03ADE8C4 MOV X1, X31
	0x03ADE8C8 MOV X2, X31
	0x03ADE8CC BL 0x3C354F8
	0x03ADE8D0 AND W1, W0, 0x1
	0x03ADE8D4 MOV X0, X20
	0x03ADE8D8 MOV X2, X31
	0x03ADE8DC BL 0x3C32410
	0x03ADE8E0 LDR X0, [X22]
	0x03ADE8E4 LDR X20, [X19 + 0x118]
	0x03ADE8E8 LDR W8, [X0 + 0xE0]
	0x03ADE8EC CBNZ W8, 0x3ADE8F4
	0x03ADE8F0 BL 0x1C16DFC
	0x03ADE8F4 MOV X0, X20
	0x03ADE8F8 MOV X1, X31
	0x03ADE8FC BL 0x3C38948
	0x03ADE900 TBZ X0, 0x0, 0x3ADE944
	0x03ADE904 LDR X8, [X19 + 0x138]
	0x03ADE908 CBZ X8, 0x3ADE95C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x905000
	007 Move X21, 0x67B000
	008 Move W8, [X22+1516]
	009 Move X21, [X21+2408]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x67B000
	017 Move X0, [X0+2408]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1516], W8
	021 Move X2, [X21]
	022 Add X0, X19, 704
	023 Move X1, X20
	024 Call 0x2254B70, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {40}
	029 Move X1, [X19+704]
	030 Move X0, X19
	031 Call TMP_InputField.SetGlobalFontAsset, X0, X1
	032 Move X0, X19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Call TMP_InputField.UpdateLabel, X0
	039 Return 
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 Return 

Method: System.Boolean get_onFocusSelectAll()

Disassembly:
	0x03AEEC10 MOV X2, X0
	0x03AEEC14 MOV X0, X20

ISIL:
	001 Move W0, [X0+712]
	002 Return X0

Method: System.Void set_onFocusSelectAll(System.Boolean value)

Disassembly:
	0x03AEEC18 MOV X1, X21
	0x03AEEC1C MOV X3, X31
	0x03AEEC20 BL 0x3E22B58

ISIL:
	001 And W8, W1, 1
	002 Move [X0+712], W8
	003 Return 

Method: System.Boolean get_resetOnDeActivation()

Disassembly:
	0x03AEEC24 LDR X0, [X23]
	0x03AEEC28 LDR X20, [X19 + 0x138]

ISIL:
	001 Move W0, [X0+714]
	002 Return X0

Method: System.Void set_resetOnDeActivation(System.Boolean value)

Disassembly:
	0x03AEEC2C LDR W8, [X0 + 0xE0]
	0x03AEEC30 CBNZ W8, 0x3AEEC38
	0x03AEEC34 BL 0x1C16DFC

ISIL:
	001 And W8, W1, 1
	002 Move [X0+714], W8
	003 Return 

Method: System.Boolean get_restoreOriginalTextOnEscape()

Disassembly:
	0x03AEEC38 MOV X0, X20
	0x03AEEC3C MOV X1, X31

ISIL:
	001 Move W0, [X0+728]
	002 Return X0

Method: System.Void set_restoreOriginalTextOnEscape(System.Boolean value)

Disassembly:
	0x03AEEC40 MOV X2, X31
	0x03AEEC44 BL 0x3C354F8
	0x03AEEC48 TBZ X0, 0x0, 0x3AEED50

ISIL:
	001 And W8, W1, 1
	002 Move [X0+728], W8
	003 Return 

Method: System.Boolean get_isRichTextEditingAllowed()

Disassembly:
	0x03AEEC4C ADRP X22, 0x62C000
	0x03AEEC50 LDR X20, [X19 + 0x138]

ISIL:
	001 Move W0, [X0+729]
	002 Return X0

Method: System.Void set_isRichTextEditingAllowed(System.Boolean value)

Disassembly:
	0x03AEEC54 LDR X22, [X22 + 0xE30]
	0x03AEEC58 LDR X0, [X22]
	0x03AEEC5C BL 0x1C16F10

ISIL:
	001 And W8, W1, 1
	002 Move [X0+729], W8
	003 Return 

Method: TMPro.TMP_InputField/ContentType get_contentType()

Disassembly:
	0x03AEEC60 ADRP X8, 0x66B000
	0x03AEEC64 LDR X8, [X8 + 0x128]

ISIL:
	001 Move W0, [X0+384]
	002 Return X0

Method: System.Void set_contentType(TMPro.TMP_InputField/ContentType value)

Disassembly:
	0x03AEEC68 MOV X1, X19
	0x03AEEC6C MOV X3, X31
	0x03AEEC70 MOV X21, X0
	0x03AEEC74 LDR X2, [X8]
	0x03AEEC78 BL 0x3C45BE8
	0x03AEEC7C CBZ X20, 0x3AEEDC8
	0x03AEEC80 MOV X0, X20
	0x03AEEC84 MOV X1, X21
	0x03AEEC88 MOV X2, X31
	0x03AEEC8C BL 0x3CDDF38
	0x03AEEC90 LDR X0, [X22]
	0x03AEEC94 LDR X20, [X19 + 0x138]
	0x03AEEC98 BL 0x1C16F10
	0x03AEEC9C ADRP X8, 0x66B000
	0x03AEECA0 LDR X8, [X8 + 0x138]
	0x03AEECA4 MOV X1, X19
	0x03AEECA8 MOV X3, X31
	0x03AEECAC MOV X21, X0
	0x03AEECB0 LDR X2, [X8]
	0x03AEECB4 BL 0x3C45BE8
	0x03AEECB8 CBZ X20, 0x3AEEDC8
	0x03AEECBC MOV X0, X20
	0x03AEECC0 MOV X1, X21
	0x03AEECC4 MOV X2, X31
	0x03AEECC8 BL 0x3CDDF38
	0x03AEECCC LDR X0, [X23]
	0x03AEECD0 LDR X20, [X19 + 0x150]
	0x03AEECD4 LDR W8, [X0 + 0xE0]
	0x03AEECD8 CBNZ W8, 0x3AEECE0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F5000
	007 Move X21, 0x66C000
	008 Move W8, [X22+1517]
	009 Move X21, [X21+168]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66C000
	017 Move X0, [X0+168]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1517], W8
	021 Move X2, [X21]
	022 Add X0, X19, 384
	023 Move W1, W20
	024 Call SetPropertyUtility.SetStruct, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {35}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return 

Method: TMPro.TMP_InputField/LineType get_lineType()

Disassembly:
	0x03AEED98 MOV X21, X0
	0x03AEED9C BL 0x2A6B948

ISIL:
	001 Move W0, [X0+400]
	002 Return X0

Method: System.Void set_lineType(TMPro.TMP_InputField/LineType value)

Disassembly:
	0x03AEEDA0 CBZ X20, 0x3AEEDC8
	0x03AEEDA4 ADRP X8, 0x66B000
	0x03AEEDA8 LDR X8, [X8 + 0x108]
	0x03AEEDAC MOV X0, X20
	0x03AEEDB0 MOV X1, X21
	0x03AEEDB4 LDP X20, X19, [X31 + 0x20]
	0x03AEEDB8 LDR X2, [X8]
	0x03AEEDBC LDP X22, X21, [X31 + 0x10]
	0x03AEEDC0 LDP X30, X23, [X31], #0x30
	0x03AEEDC4 B 0x2D11664
	0x03AEEDC8 BL 0x1C16F20
	0x03AEEDCC BL 0x1C16F28
	0x03AEEDD0 BL 0x1C16F44
	0x03AEEDD4 MOV X1, X31
	0x03AEEDD8 BL 0x1C16DEC
	0x03AEEDDC STR D12, [X31 - 0x50]!
	0x03AEEDE0 STP D11, D10, [X31 + 0x10]
	0x03AEEDE4 STP D9, D8, [X31 + 0x20]
	0x03AEEDE8 STP X30, X21, [X31 + 0x30]
	0x03AEEDEC STP X20, X19, [X31 + 0x40]
	0x03AEEDF0 ADRP X20, 0x8F4000
	0x03AEEDF4 ADRP X21, 0x605000
	0x03AEEDF8 LDRB W8, [X20 + 0x619]
	0x03AEEDFC LDR X21, [X21 + 0x598]
	0x03AEEE00 MOV X19, X0
	0x03AEEE04 TBNZ X8, 0x0, 0x3AEEE1C
	0x03AEEE08 ADRP X0, 0x605000
	0x03AEEE0C LDR X0, [X0 + 0x598]
	0x03AEEE10 BL 0x1C16CF4
	0x03AEEE14 MOVZ W8, 0x1
	0x03AEEE18 STRB W8, [X20 + 0x619]
	0x03AEEE1C LDR X0, [X21]
	0x03AEEE20 LDR X20, [X19 + 0x138]
	0x03AEEE24 LDR W8, [X0 + 0xE0]
	0x03AEEE28 CBNZ W8, 0x3AEEE30
	0x03AEEE2C BL 0x1C16DFC
	0x03AEEE30 MOV X0, X20
	0x03AEEE34 MOV X1, X31
	0x03AEEE38 MOV X2, X31
	0x03AEEE3C BL 0x3C354F8
	0x03AEEE40 TBZ X0, 0x0, 0x3AEF2C0
	0x03AEEE44 LDR X0, [X21]
	0x03AEEE48 LDR X20, [X19 + 0x248]
	0x03AEEE4C LDR W8, [X0 + 0xE0]
	0x03AEEE50 CBNZ W8, 0x3AEEE58
	0x03AEEE54 BL 0x1C16DFC
	0x03AEEE58 MOV X0, X20
	0x03AEEE5C MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F5000
	007 Move X21, 0x66C000
	008 Move W8, [X22+1518]
	009 Move X21, [X21+176]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x66C000
	017 Move X0, [X0+184]
	018 Call 0x1C17CF4
	019 Move X0, 0x66C000
	020 Move X0, [X0+176]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+1518], W8
	024 Move X2, [X21]
	025 Add X0, X19, 400
	026 Move W1, W20
	027 Call SetPropertyUtility.SetStruct, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {54}
	032 Move X8, 0x66C000
	033 Move X8, [X8+184]
	034 Move W1, 2
	035 Move X0, [X8]
	036 Call 0x1C17D6C
	037 Compare X0, 0
	038 JumpIfEqual {60}
	039 Move W8, [X0+24]
	040 Move X1, X0
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move W8, 1
	043 Move X0, X19
	044 Move [X1+36], W8
	045 Call TMP_InputField.SetToCustomIfContentTypeIsNot, X0, X1
	046 Move X0, X19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Call TMP_InputField.SetTextComponentWrapMode, X0
	053 Return 
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Return 
	060 Call 0x1C17F20
	061 Call 0x1C17F28

Method: System.Int32 get_lineLimit()

Disassembly:
	0x03AEEEC4 FMUL S1, S2, S2
	0x03AEEEC8 FADD S0, S1, S0

ISIL:
	001 Move W0, [X0+732]
	002 Return X0

Method: System.Void set_lineLimit(System.Int32 value)

Disassembly:
	0x03AEEECC FCMP S0, S12
	0x03AEEED0 B.PL 0x3AEF12C
	0x03AEEED4 LDR X0, [X19 + 0x248]
	0x03AEEED8 CBZ X0, 0x3AEF2D8
	0x03AEEEDC MOV X1, X31
	0x03AEEEE0 BL 0x3C3F830
	0x03AEEEE4 LDR X0, [X19 + 0x138]
	0x03AEEEE8 CBZ X0, 0x3AEF2D8
	0x03AEEEEC MOV X1, X31
	0x03AEEEF0 MOV V10.16B, V0.16B
	0x03AEEEF4 MOV V11.16B, V1.16B
	0x03AEEEF8 MOV V9.16B, V2.16B
	0x03AEEEFC MOV V8.16B, V3.16B
	0x03AEEF00 BL 0x3AF8E0C
	0x03AEEF04 CBZ X0, 0x3AEF2D8
	0x03AEEF08 MOV X1, X31
	0x03AEEF0C BL 0x3C3F830
	0x03AEEF10 FMUL S0, S10, S0
	0x03AEEF14 FMUL S1, S11, S1
	0x03AEEF18 ADRP X8, 0xFFFFFFFFFCFFC000
	0x03AEEF1C FADD S0, S0, S1
	0x03AEEF20 LDR V1, [X8 + 0x1B4]
	0x03AEEF24 FMUL S2, S9, S2
	0x03AEEF28 FADD S0, S2, S0
	0x03AEEF2C FMUL S2, S8, S3
	0x03AEEF30 FADD S0, S2, S0
	0x03AEEF34 FCMP S0, S1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8F5000
	006 Move W8, [X21+1519]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x66C000
	014 Move X0, [X0+88]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1519], W8
	018 Move W8, [X20+400]
	019 Add X0, X20, 732
	020 Compare W8, 0
	021 JumpIfEqual {32}
	022 Move X8, 0x66C000
	023 Move X8, [X8+88]
	024 Move W1, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X2, [X8]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call SetPropertyUtility.SetStruct, X0, X1
	031 Return 
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move W8, 1
	035 Move [X0], W8
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 

Method: TMPro.TMP_InputField/InputType get_inputType()

Disassembly:
	0x03AEEF38 B.LE 0x3AEF12C
	0x03AEEF3C LDR X0, [X19 + 0x248]

ISIL:
	001 Move W0, [X0+388]
	002 Return X0

Method: System.Void set_inputType(TMPro.TMP_InputField/InputType value)

Disassembly:
	0x03AEEF40 CBZ X0, 0x3AEF2D8
	0x03AEEF44 MOV X1, X31
	0x03AEEF48 BL 0x3C3FBAC
	0x03AEEF4C LDR X0, [X19 + 0x138]
	0x03AEEF50 CBZ X0, 0x3AEF2D8
	0x03AEEF54 MOV X1, X31
	0x03AEEF58 MOV V8.16B, V0.16B
	0x03AEEF5C MOV V9.16B, V1.16B
	0x03AEEF60 MOV V10.16B, V2.16B
	0x03AEEF64 BL 0x3AF8E0C
	0x03AEEF68 CBZ X0, 0x3AEF2D8
	0x03AEEF6C MOV X1, X31
	0x03AEEF70 BL 0x3C3FBAC
	0x03AEEF74 FSUB S0, S8, S0
	0x03AEEF78 FSUB S1, S9, S1
	0x03AEEF7C FSUB S2, S10, S2
	0x03AEEF80 FMUL S0, S0, S0
	0x03AEEF84 FMUL S1, S1, S1
	0x03AEEF88 FADD S0, S0, S1
	0x03AEEF8C FMUL S1, S2, S2
	0x03AEEF90 FADD S0, S1, S0
	0x03AEEF94 FCMP S0, S12
	0x03AEEF98 B.PL 0x3AEF12C
	0x03AEEF9C LDR X0, [X19 + 0x248]
	0x03AEEFA0 CBZ X0, 0x3AEF2D8
	0x03AEEFA4 MOV X1, X31
	0x03AEEFA8 BL 0x3C3E5B8
	0x03AEEFAC LDR X0, [X19 + 0x138]
	0x03AEEFB0 CBZ X0, 0x3AEF2D8
	0x03AEEFB4 MOV X1, X31
	0x03AEEFB8 MOV V8.16B, V0.16B
	0x03AEEFBC MOV V9.16B, V1.16B
	0x03AEEFC0 BL 0x3AF8E0C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F5000
	007 Move X21, 0x66C000
	008 Move W8, [X22+1520]
	009 Move X21, [X21+192]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66C000
	017 Move X0, [X0+192]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1520], W8
	021 Move X2, [X21]
	022 Add X0, X19, 388
	023 Move W1, W20
	024 Call SetPropertyUtility.SetStruct, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {31}
	029 Move W8, [X19+384]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Return 
	037 Move X0, X19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move W1, 9
	043 Move X30, [X31+48]
	044 Call TMP_InputField.set_contentType, X0, X1
	045 Return 

Method: UnityEngine.TouchScreenKeyboardType get_keyboardType()

Disassembly:
	0x03AEEFDC FMUL S1, S1, S1
	0x03AEEFE0 FADD S0, S0, S1

ISIL:
	001 Move W0, [X0+396]
	002 Return X0

Method: System.Void set_keyboardType(UnityEngine.TouchScreenKeyboardType value)

Disassembly:
	0x03AEEFE4 FCMP S0, S12
	0x03AEEFE8 B.PL 0x3AEF12C
	0x03AEEFEC LDR X0, [X19 + 0x248]
	0x03AEEFF0 CBZ X0, 0x3AEF2D8
	0x03AEEFF4 MOV X1, X31
	0x03AEEFF8 BL 0x3C3E6D4
	0x03AEEFFC LDR X0, [X19 + 0x138]
	0x03AEF000 CBZ X0, 0x3AEF2D8
	0x03AEF004 MOV X1, X31
	0x03AEF008 MOV V8.16B, V0.16B
	0x03AEF00C MOV V9.16B, V1.16B
	0x03AEF010 BL 0x3AF8E0C
	0x03AEF014 CBZ X0, 0x3AEF2D8
	0x03AEF018 MOV X1, X31
	0x03AEF01C BL 0x3C3E6D4
	0x03AEF020 FSUB S0, S8, S0
	0x03AEF024 FSUB S1, S9, S1
	0x03AEF028 FMUL S0, S0, S0
	0x03AEF02C FMUL S1, S1, S1
	0x03AEF030 FADD S0, S0, S1
	0x03AEF034 FCMP S0, S12
	0x03AEF038 B.PL 0x3AEF12C
	0x03AEF03C LDR X0, [X19 + 0x248]
	0x03AEF040 CBZ X0, 0x3AEF2D8
	0x03AEF044 MOV X1, X31
	0x03AEF048 BL 0x3C3E7F0
	0x03AEF04C LDR X0, [X19 + 0x138]
	0x03AEF050 CBZ X0, 0x3AEF2D8
	0x03AEF054 MOV X1, X31
	0x03AEF058 MOV V8.16B, V0.16B
	0x03AEF05C MOV V9.16B, V1.16B
	0x03AEF060 BL 0x3AF8E0C
	0x03AEF064 CBZ X0, 0x3AEF2D8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F5000
	007 Move X21, 0x66C000
	008 Move W8, [X22+1521]
	009 Move X21, [X21+200]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66B000
	017 Move X0, [X0+200]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1521], W8
	021 Move X2, [X21]
	022 Add X0, X19, 396
	023 Move W1, W20
	024 Call SetPropertyUtility.SetStruct, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {31}
	029 Move W8, [X19+384]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Return 
	037 Move X0, X19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move W1, 9
	043 Move X30, [X31+48]
	044 Call TMP_InputField.set_contentType, X0, X1
	045 Return 

Method: TMPro.TMP_InputField/CharacterValidation get_characterValidation()

Disassembly:
	0x03AEF068 MOV X1, X31
	0x03AEF06C BL 0x3C3E7F0

ISIL:
	001 Move W0, [X0+408]
	002 Return X0

Method: System.Void set_characterValidation(TMPro.TMP_InputField/CharacterValidation value)

Disassembly:
	0x03AEF070 FSUB S0, S8, S0
	0x03AEF074 FSUB S1, S9, S1
	0x03AEF078 FMUL S0, S0, S0
	0x03AEF07C FMUL S1, S1, S1
	0x03AEF080 FADD S0, S0, S1
	0x03AEF084 FCMP S0, S12
	0x03AEF088 B.PL 0x3AEF12C
	0x03AEF08C LDR X0, [X19 + 0x248]
	0x03AEF090 CBZ X0, 0x3AEF2D8
	0x03AEF094 MOV X1, X31
	0x03AEF098 BL 0x3C3E90C
	0x03AEF09C LDR X0, [X19 + 0x138]
	0x03AEF0A0 CBZ X0, 0x3AEF2D8
	0x03AEF0A4 MOV X1, X31
	0x03AEF0A8 MOV V8.16B, V0.16B
	0x03AEF0AC MOV V9.16B, V1.16B
	0x03AEF0B0 BL 0x3AF8E0C
	0x03AEF0B4 CBZ X0, 0x3AEF2D8
	0x03AEF0B8 MOV X1, X31
	0x03AEF0BC BL 0x3C3E90C
	0x03AEF0C0 FSUB S0, S8, S0
	0x03AEF0C4 FSUB S1, S9, S1
	0x03AEF0C8 FMUL S0, S0, S0
	0x03AEF0CC FMUL S1, S1, S1
	0x03AEF0D0 FADD S0, S0, S1
	0x03AEF0D4 FCMP S0, S12
	0x03AEF0D8 B.PL 0x3AEF12C
	0x03AEF0DC LDR X0, [X19 + 0x248]
	0x03AEF0E0 CBZ X0, 0x3AEF2D8
	0x03AEF0E4 MOV X1, X31
	0x03AEF0E8 BL 0x3C3EA28
	0x03AEF0EC LDR X0, [X19 + 0x138]
	0x03AEF0F0 CBZ X0, 0x3AEF2D8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F4000
	007 Move X21, 0x66B000
	008 Move W8, [X22+1522]
	009 Move X21, [X21+208]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66B000
	017 Move X0, [X0+208]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1522], W8
	021 Move X2, [X21]
	022 Add X0, X19, 408
	023 Move W1, W20
	024 Call SetPropertyUtility.SetStruct, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {31}
	029 Move W8, [X19+384]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Return 
	037 Move X0, X19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move W1, 9
	043 Move X30, [X31+48]
	044 Call TMP_InputField.set_contentType, X0, X1
	045 Return 

Method: TMPro.TMP_InputValidator get_inputValidator()

Disassembly:
	0x03AEF0F4 MOV X1, X31
	0x03AEF0F8 MOV V8.16B, V0.16B

ISIL:
	001 Move X0, [X0+736]
	002 Return X0

Method: System.Void set_inputValidator(TMPro.TMP_InputValidator value)

Disassembly:
	0x03AEF0FC MOV V9.16B, V1.16B
	0x03AEF100 BL 0x3AF8E0C
	0x03AEF104 CBZ X0, 0x3AEF2D8
	0x03AEF108 MOV X1, X31
	0x03AEF10C BL 0x3C3EA28
	0x03AEF110 FSUB S0, S8, S0
	0x03AEF114 FSUB S1, S9, S1
	0x03AEF118 FMUL S0, S0, S0
	0x03AEF11C FMUL S1, S1, S1
	0x03AEF120 FADD S0, S0, S1
	0x03AEF124 FCMP S0, S12
	0x03AEF128 B.MI 0x3AEF2C0
	0x03AEF12C LDR X0, [X19 + 0x138]
	0x03AEF130 CBZ X0, 0x3AEF2D8
	0x03AEF134 LDR X20, [X19 + 0x248]
	0x03AEF138 MOV X1, X31
	0x03AEF13C BL 0x3AF8E0C
	0x03AEF140 CBZ X0, 0x3AEF2D8
	0x03AEF144 MOV X1, X31
	0x03AEF148 BL 0x3C3EB78
	0x03AEF14C CBZ X20, 0x3AEF2D8
	0x03AEF150 MOV X0, X20
	0x03AEF154 MOV X1, X31
	0x03AEF158 BL 0x3C3EC04
	0x03AEF15C LDR X0, [X19 + 0x138]
	0x03AEF160 CBZ X0, 0x3AEF2D8
	0x03AEF164 LDR X20, [X19 + 0x248]
	0x03AEF168 MOV X1, X31
	0x03AEF16C BL 0x3AF8E0C
	0x03AEF170 CBZ X0, 0x3AEF2D8
	0x03AEF174 MOV X1, X31
	0x03AEF178 BL 0x3C3F830
	0x03AEF17C CBZ X20, 0x3AEF2D8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F4000
	007 Move X21, 0x66B000
	008 Move W8, [X22+1523]
	009 Move X21, [X21+216]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66B000
	017 Move X0, [X0+216]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1523], W8
	021 Move X2, [X21]
	022 Add X0, X19, 736
	023 Move X1, X20
	024 Call 0x2254B70, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {31}
	029 Move W8, [X19+384]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Return 
	037 Move X0, X19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move W1, 9
	043 Move X30, [X31+48]
	044 Call TMP_InputField.set_contentType, X0, X1
	045 Return 

Method: System.Boolean get_readOnly()

Disassembly:
	0x03AEF198 MOV X1, X31
	0x03AEF19C BL 0x3AF8E0C

ISIL:
	001 Move W0, [X0+560]
	002 Return X0

Method: System.Void set_readOnly(System.Boolean value)

Disassembly:
	0x03AEF1A0 CBZ X0, 0x3AEF2D8
	0x03AEF1A4 MOV X1, X31
	0x03AEF1A8 BL 0x3C3FBAC

ISIL:
	001 And W8, W1, 1
	002 Move [X0+560], W8
	003 Return 

Method: System.Boolean get_richText()

Disassembly:
	0x03AEF1AC CBZ X20, 0x3AEF2D8
	0x03AEF1B0 MOV X0, X20

ISIL:
	001 Move W0, [X0+561]
	002 Return X0

Method: System.Void set_richText(System.Boolean value)

Disassembly:
	0x03AEF1B4 MOV X1, X31
	0x03AEF1B8 BL 0x3C3FC4C
	0x03AEF1BC LDR X0, [X19 + 0x138]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+561], W8

Method: System.Boolean get_multiLine()

Disassembly:
	0x03AEF248 BL 0x3C3E880
	0x03AEF24C LDR X0, [X19 + 0x138]
	0x03AEF250 CBZ X0, 0x3AEF2D8
	0x03AEF254 LDR X20, [X19 + 0x248]
	0x03AEF258 MOV X1, X31

ISIL:
	001 Move W8, [X0+400]
	002 Subtract W8, W8, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Return X0

Method: System.Char get_asteriskChar()

Disassembly:
	0x03AEF25C BL 0x3AF8E0C
	0x03AEF260 CBZ X0, 0x3AEF2D8

ISIL:
	001 NotImplemented "Instruction LDRH not yet implemented."
	002 Return X0

Method: System.Void set_asteriskChar(System.Char value)

Disassembly:
	0x03AEF264 MOV X1, X31
	0x03AEF268 BL 0x3C3E90C
	0x03AEF26C CBZ X20, 0x3AEF2D8
	0x03AEF270 MOV X0, X20
	0x03AEF274 MOV X1, X31
	0x03AEF278 BL 0x3C3E99C
	0x03AEF27C LDR X0, [X19 + 0x138]
	0x03AEF280 CBZ X0, 0x3AEF2D8
	0x03AEF284 LDR X19, [X19 + 0x248]
	0x03AEF288 MOV X1, X31
	0x03AEF28C BL 0x3AF8E0C
	0x03AEF290 CBZ X0, 0x3AEF2D8
	0x03AEF294 MOV X1, X31
	0x03AEF298 BL 0x3C3EA28
	0x03AEF29C CBZ X19, 0x3AEF2D8
	0x03AEF2A0 MOV X0, X19
	0x03AEF2A4 LDP X20, X19, [X31 + 0x40]
	0x03AEF2A8 LDP X30, X21, [X31 + 0x30]
	0x03AEF2AC LDP D9, D8, [X31 + 0x20]
	0x03AEF2B0 LDP D11, D10, [X31 + 0x10]
	0x03AEF2B4 MOV X1, X31
	0x03AEF2B8 LDR V12, [X31], #0x50
	0x03AEF2BC B 0x3C3EAB8
	0x03AEF2C0 LDP X20, X19, [X31 + 0x40]
	0x03AEF2C4 LDP X30, X21, [X31 + 0x30]
	0x03AEF2C8 LDP D9, D8, [X31 + 0x20]
	0x03AEF2CC LDP D11, D10, [X31 + 0x10]
	0x03AEF2D0 LDR V12, [X31], #0x50
	0x03AEF2D4 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8F4000
	007 Move X21, 0x66B000
	008 Move W8, [X22+1524]
	009 Move X21, [X21+224]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x66B000
	017 Move X0, [X0+224]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1524], W8
	021 Move X2, [X21]
	022 Add X0, X19, 392
	023 Move W1, W20
	024 Call SetPropertyUtility.SetStruct, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {37}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Call TMP_InputField.UpdateLabel, X0
	036 Return 
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Return 

Method: System.Boolean get_wasCanceled()

Disassembly:
	0x03AEF2D8 BL 0x1C16F20
	0x03AEF2DC RET

ISIL:
	001 Move W0, [X0+664]
	002 Return X0

Method: System.Void ClampStringPos(ref System.Int32 pos)

Disassembly:
	0x03AEF2E0 STP X30, X23, [X31 - 0x30]!
	0x03AEF2E4 STP X22, X21, [X31 + 0x10]
	0x03AEF2E8 STP X20, X19, [X31 + 0x20]
	0x03AEF2EC ADRP X20, 0x8F3000
	0x03AEF2F0 ADRP X22, 0x604000
	0x03AEF2F4 LDRB W8, [X20 + 0x5F6]
	0x03AEF2F8 LDR X22, [X22 + 0x598]
	0x03AEF2FC MOV X19, X0
	0x03AEF300 TBNZ X8, 0x0, 0x3AEF39C
	0x03AEF304 ADRP X0, 0x662000
	0x03AEF308 LDR X0, [X0 + 0x530]
	0x03AEF30C BL 0x1C16CF4
	0x03AEF310 ADRP X0, 0x669000
	0x03AEF314 LDR X0, [X0 + 0x718]

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X1]
	003 Move TEMP, X8
	004 And TEMP, TEMP, -2147483648
	005 Compare TEMP, -2147483648
	006 JumpIfEqual {12}
	007 Move X9, [X0+544]
	008 Compare X9, 0
	009 JumpIfEqual {16}
	010 Move W9, [X9+16]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W9, W31
	013 Move [X1], W9
	014 Move X30, [X31+16]
	015 Return 
	016 Call 0x1C17F20

Method: System.Void ClampCaretPos(ref System.Int32 pos)

Disassembly:
	0x03AEF318 BL 0x1C16CF4
	0x03AEF31C ADRP X0, 0x66A000
	0x03AEF320 LDR X0, [X0 + 0x150]
	0x03AEF324 BL 0x1C16CF4
	0x03AEF328 ADRP X0, 0x604000
	0x03AEF32C LDR X0, [X0 + 0x598]
	0x03AEF330 BL 0x1C16CF4
	0x03AEF334 ADRP X0, 0x66A000
	0x03AEF338 LDR X0, [X0 + 0x128]
	0x03AEF33C BL 0x1C16CF4
	0x03AEF340 ADRP X0, 0x66A000
	0x03AEF344 LDR X0, [X0 + 0x130]
	0x03AEF348 BL 0x1C16CF4
	0x03AEF34C ADRP X0, 0x66A000
	0x03AEF350 LDR X0, [X0 + 0x68]
	0x03AEF354 BL 0x1C16CF4
	0x03AEF358 ADRP X0, 0x66A000

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X1]
	003 Move TEMP, X8
	004 And TEMP, TEMP, -2147483648
	005 Compare TEMP, -2147483648
	006 JumpIfEqual {16}
	007 Move X9, [X0+312]
	008 Compare X9, 0
	009 JumpIfEqual {20}
	010 Move X9, [X9+872]
	011 Compare X9, 0
	012 JumpIfEqual {20}
	013 Move W9, [X9+24]
	014 Subtract W9, W9, 1
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move W9, W31
	017 Move [X1], W9
	018 Move X30, [X31+16]
	019 Return 
	020 Call 0x1C17F20

Method: System.Int32 get_caretPositionInternal()

Disassembly:
	0x03AEF35C LDR X0, [X0 + 0x138]
	0x03AEF360 BL 0x1C16CF4
	0x03AEF364 ADRP X0, 0x669000
	0x03AEF368 LDR X0, [X0 + 0x3F0]
	0x03AEF36C BL 0x1C16CF4
	0x03AEF370 ADRP X0, 0x669000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+572]
	004 Call TMP_InputField.get_compositionLength, X0
	005 Add W0, W0, W19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Void set_caretPositionInternal(System.Int32 value)

Disassembly:
	0x03AEF374 LDR X0, [X0 + 0xB68]
	0x03AEF378 BL 0x1C16CF4
	0x03AEF37C ADRP X0, 0x62B000
	0x03AEF380 LDR X0, [X0 + 0xE30]

ISIL:
	001 Add X8, X0, 572
	002 Move [X0+572], W1
	003 Move X1, X8
	004 Call TMP_InputField.ClampCaretPos, X0, X1
	005 Return 

Method: System.Int32 get_stringPositionInternal()

Disassembly:
	0x03AEF384 BL 0x1C16CF4
	0x03AEF388 ADRP X0, 0x66A000
	0x03AEF38C LDR X0, [X0 + 0x70]
	0x03AEF390 BL 0x1C16CF4
	0x03AEF394 MOVZ W8, 0x1
	0x03AEF398 STRB W8, [X20 + 0x5F6]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+564]
	004 Call TMP_InputField.get_compositionLength, X0
	005 Add W0, W0, W19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Void set_stringPositionInternal(System.Int32 value)

Disassembly:
	0x03AEF39C MOV X0, X19
	0x03AEF3A0 MOV W1, W31
	0x03AEF3A4 STR X31, [X19 + 0x278]
	0x03AEF3A8 BL 0x3AEF600
	0x03AEF3AC LDR X0, [X22]
	0x03AEF3B0 LDR X20, [X19 + 0x138]
	0x03AEF3B4 LDR W8, [X0 + 0xE0]
	0x03AEF3B8 CBNZ W8, 0x3AEF3C0
	0x03AEF3BC BL 0x1C16DFC
	0x03AEF3C0 MOV X0, X20
	0x03AEF3C4 MOV X1, X31
	0x03AEF3C8 MOV X2, X31
	0x03AEF3CC BL 0x3C354F8
	0x03AEF3D0 TBZ X0, 0x0, 0x3AEF4D0

ISIL:
	001 Move [X31-16], X30
	002 Move [X0+564], W1
	003 Move TEMP, X1
	004 And TEMP, TEMP, -2147483648
	005 Compare TEMP, -2147483648
	006 JumpIfEqual {12}
	007 Move X8, [X0+544]
	008 Compare X8, 0
	009 JumpIfEqual {16}
	010 Move W8, [X8+16]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W8, W31
	013 Move [X0+564], W8
	014 Move X30, [X31+16]
	015 Return 
	016 Call 0x1C17F20

Method: System.Int32 get_caretSelectPositionInternal()

Disassembly:
	0x03AEF3D4 ADRP X23, 0x62B000
	0x03AEF3D8 LDR X23, [X23 + 0xE30]
	0x03AEF3DC ADRP X21, 0x66A000
	0x03AEF3E0 LDR X20, [X19 + 0x138]
	0x03AEF3E4 LDR X0, [X23]
	0x03AEF3E8 LDR X21, [X21 + 0x128]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+576]
	004 Call TMP_InputField.get_compositionLength, X0
	005 Add W0, W0, W19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Void set_caretSelectPositionInternal(System.Int32 value)

Disassembly:
	0x03AEF3EC BL 0x1C16F10
	0x03AEF3F0 LDR X2, [X21]
	0x03AEF3F4 MOV X1, X19
	0x03AEF3F8 MOV X3, X31

ISIL:
	001 Add X8, X0, 576
	002 Move [X0+576], W1
	003 Move X1, X8
	004 Call TMP_InputField.ClampCaretPos, X0, X1
	005 Return 

Method: System.Int32 get_stringSelectPositionInternal()

Disassembly:
	0x03AEF3FC MOV X21, X0
	0x03AEF400 BL 0x3C45BE8
	0x03AEF404 CBZ X20, 0x3AEF5FC
	0x03AEF408 MOV X0, X20
	0x03AEF40C MOV X1, X21
	0x03AEF410 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+568]
	004 Call TMP_InputField.get_compositionLength, X0
	005 Add W0, W0, W19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Void set_stringSelectPositionInternal(System.Int32 value)

Disassembly:
	0x03AEF414 BL 0x3CDDFB8
	0x03AEF418 LDR X0, [X23]
	0x03AEF41C LDR X20, [X19 + 0x138]
	0x03AEF420 BL 0x1C16F10
	0x03AEF424 ADRP X8, 0x66A000
	0x03AEF428 LDR X8, [X8 + 0x138]
	0x03AEF42C MOV X1, X19
	0x03AEF430 MOV X3, X31
	0x03AEF434 MOV X21, X0
	0x03AEF438 LDR X2, [X8]
	0x03AEF43C BL 0x3C45BE8
	0x03AEF440 CBZ X20, 0x3AEF5FC
	0x03AEF444 MOV X0, X20
	0x03AEF448 MOV X1, X21

ISIL:
	001 Move [X31-16], X30
	002 Move [X0+568], W1
	003 Move TEMP, X1
	004 And TEMP, TEMP, -2147483648
	005 Compare TEMP, -2147483648
	006 JumpIfEqual {12}
	007 Move X8, [X0+544]
	008 Compare X8, 0
	009 JumpIfEqual {16}
	010 Move W8, [X8+16]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W8, W31
	013 Move [X0+568], W8
	014 Move X30, [X31+16]
	015 Return 
	016 Call 0x1C17F20

Method: System.Boolean get_hasSelection()

Disassembly:
	0x03AEF44C MOV X2, X31
	0x03AEF450 BL 0x3CDDFB8
	0x03AEF454 LDR X0, [X22]
	0x03AEF458 LDR X20, [X19 + 0x150]
	0x03AEF45C LDR W8, [X0 + 0xE0]
	0x03AEF460 CBNZ W8, 0x3AEF468
	0x03AEF464 BL 0x1C16DFC
	0x03AEF468 MOV X0, X20
	0x03AEF46C MOV X1, X31
	0x03AEF470 MOV X2, X31
	0x03AEF474 BL 0x3C354F8
	0x03AEF478 TBZ X0, 0x0, 0x3AEF4D0
	0x03AEF47C LDR X8, [X19 + 0x150]
	0x03AEF480 CBZ X8, 0x3AEF5FC
	0x03AEF484 LDR X20, [X8 + 0x118]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W20, [X0+564]
	006 Move X19, X0
	007 Call TMP_InputField.get_compositionLength, X0
	008 Move W21, [X19+568]
	009 Add W20, W0, W20
	010 Move X0, X19
	011 Call TMP_InputField.get_compositionLength, X0
	012 Add W8, W0, W21
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 NotImplemented "Instruction CSET not yet implemented."
	017 Move X30, [X31+32]
	018 Move X21, [X31+40]
	019 Return X0

Method: System.Int32 get_caretPosition()

Disassembly:
	0x03AEF488 ADRP X8, 0x669000
	0x03AEF48C LDR X8, [X8 + 0xB68]
	0x03AEF490 LDR X0, [X8]
	0x03AEF494 BL 0x1C16F10
	0x03AEF498 ADRP X8, 0x66A000
	0x03AEF49C LDR X8, [X8 + 0x68]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+576]
	004 Call TMP_InputField.get_compositionLength, X0
	005 Add W0, W0, W19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Void set_caretPosition(System.Int32 value)

Disassembly:
	0x03AEF4A0 MOV X1, X19
	0x03AEF4A4 MOV X3, X31
	0x03AEF4A8 MOV X21, X0
	0x03AEF4AC LDR X2, [X8]
	0x03AEF4B0 BL 0x2725EC4
	0x03AEF4B4 CBZ X20, 0x3AEF5FC
	0x03AEF4B8 ADRP X8, 0x66A000
	0x03AEF4BC LDR X8, [X8 + 0x70]
	0x03AEF4C0 MOV X0, X20
	0x03AEF4C4 MOV X1, X21
	0x03AEF4C8 LDR X2, [X8]
	0x03AEF4CC BL 0x272A4EC
	0x03AEF4D0 ADRP X8, 0x669000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X20, X0
	006 Call TMP_InputField.set_selectionAnchorPosition, X0, X1
	007 Move X0, X20
	008 Move W1, W19
	009 Call TMP_InputField.set_selectionFocusPosition, X0, X1
	010 Move W8, 1
	011 Move [X20+745], W8
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Return 

Method: System.Int32 get_selectionAnchorPosition()

Disassembly:
	0x03AEF54C MOV X1, X31
	0x03AEF550 MOV X2, X31
	0x03AEF554 BL 0x3C354F8
	0x03AEF558 TBZ X0, 0x0, 0x3AEF57C
	0x03AEF55C LDR X0, [X22]
	0x03AEF560 LDR X20, [X19 + 0x268]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+572]
	004 Call TMP_InputField.get_compositionLength, X0
	005 Add W0, W0, W19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Void set_selectionAnchorPosition(System.Int32 value)

Disassembly:
	0x03AEF4D4 LDR X8, [X8 + 0x718]
	0x03AEF4D8 LDR X0, [X8]
	0x03AEF4DC LDR W8, [X0 + 0xE0]
	0x03AEF4E0 CBNZ W8, 0x3AEF4E8
	0x03AEF4E4 BL 0x1C16DFC
	0x03AEF4E8 MOV X0, X19
	0x03AEF4EC MOV X1, X31
	0x03AEF4F0 BL 0x3CD1884
	0x03AEF4F4 LDR X0, [X22]
	0x03AEF4F8 LDR X20, [X19 + 0x258]
	0x03AEF4FC LDR W8, [X0 + 0xE0]
	0x03AEF500 CBNZ W8, 0x3AEF508
	0x03AEF504 BL 0x1C16DFC
	0x03AEF508 MOV X0, X20
	0x03AEF50C MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 Move X19, X0
	006 Call TMP_InputField.get_compositionLength, X0
	007 Compare W0, 0
	008 JumpIfNotEqual {15}
	009 Add X1, X19, 572
	010 Move X0, X19
	011 Move [X19+572], W20
	012 Call TMP_InputField.ClampCaretPos, X0, X1
	013 Move W8, 1
	014 Move [X19+745], W8
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Return 

Method: System.Int32 get_selectionFocusPosition()

Disassembly:
	0x03AEF564 LDR W8, [X0 + 0xE0]
	0x03AEF568 CBNZ W8, 0x3AEF570
	0x03AEF56C BL 0x1C16DFC
	0x03AEF570 MOV X0, X20
	0x03AEF574 MOV X1, X31
	0x03AEF578 BL 0x3C39564

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+576]
	004 Call TMP_InputField.get_compositionLength, X0
	005 Add W0, W0, W19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Void set_selectionFocusPosition(System.Int32 value)

Disassembly:
	0x03AEF510 MOV X2, X31
	0x03AEF514 BL 0x3C354F8
	0x03AEF518 TBZ X0, 0x0, 0x3AEF52C
	0x03AEF51C LDR X0, [X19 + 0x258]
	0x03AEF520 CBZ X0, 0x3AEF5FC
	0x03AEF524 MOV X1, X31
	0x03AEF528 BL 0x3E22AF4
	0x03AEF52C LDR X0, [X22]
	0x03AEF530 LDR X20, [X19 + 0x268]
	0x03AEF534 LDR W8, [X0 + 0xE0]
	0x03AEF538 CBNZ W8, 0x3AEF540
	0x03AEF53C BL 0x1C16DFC
	0x03AEF540 ADRP X21, 0x669000
	0x03AEF544 LDR X21, [X21 + 0x3F0]
	0x03AEF548 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 Move X19, X0
	006 Call TMP_InputField.get_compositionLength, X0
	007 Compare W0, 0
	008 JumpIfNotEqual {15}
	009 Add X1, X19, 576
	010 Move X0, X19
	011 Move [X19+576], W20
	012 Call TMP_InputField.ClampCaretPos, X0, X1
	013 Move W8, 1
	014 Move [X19+745], W8
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Return 

Method: System.Int32 get_stringPosition()

Disassembly:
	0x03AEF57C STR X31, [X19 + 0x268]
	0x03AEF580 LDR X0, [X21]
	0x03AEF584 ADRP X23, 0x662000
	0x03AEF588 ADRP X22, 0x66A000
	0x03AEF58C LDR W8, [X0 + 0xE0]
	0x03AEF590 LDR X23, [X23 + 0x530]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+568]
	004 Call TMP_InputField.get_compositionLength, X0
	005 Add W0, W0, W19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Void set_stringPosition(System.Int32 value)

Disassembly:
	0x03AEF594 LDR X22, [X22 + 0x130]
	0x03AEF598 CBNZ W8, 0x3AEF5A4
	0x03AEF59C BL 0x1C16DFC
	0x03AEF5A0 LDR X0, [X21]
	0x03AEF5A4 LDR X8, [X0 + 0xB8]
	0x03AEF5A8 LDR X0, [X23]
	0x03AEF5AC LDR X20, [X8 + 0x58]
	0x03AEF5B0 BL 0x1C16F10
	0x03AEF5B4 LDR X2, [X22]
	0x03AEF5B8 MOV X1, X19
	0x03AEF5BC MOV X3, X31
	0x03AEF5C0 MOV X21, X0
	0x03AEF5C4 BL 0x2A6B948

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X20, X0
	006 Call TMP_InputField.set_selectionStringAnchorPosition, X0, X1
	007 Move X0, X20
	008 Move W1, W19
	009 Call TMP_InputField.set_selectionStringFocusPosition, X0, X1
	010 Move W8, 1
	011 Move [X20+746], W8
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Return 

Method: System.Int32 get_selectionStringAnchorPosition()

Disassembly:
	0x03AEF678 BL 0x32277A8
	0x03AEF67C CBZ X20, 0x3AEF7B8
	0x03AEF680 AND W1, W0, 0x1
	0x03AEF684 MOV X0, X20
	0x03AEF688 MOV X2, X31
	0x03AEF68C BL 0x3C32410

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+564]
	004 Call TMP_InputField.get_compositionLength, X0
	005 Add W0, W0, W19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Void set_selectionStringAnchorPosition(System.Int32 value)

Disassembly:
	0x03AEF5C8 CBZ X20, 0x3AEF5FC
	0x03AEF5CC ADRP X8, 0x66A000
	0x03AEF5D0 LDR X8, [X8 + 0x150]
	0x03AEF5D4 MOV X0, X20
	0x03AEF5D8 MOV X1, X21
	0x03AEF5DC LDR X2, [X8]
	0x03AEF5E0 BL 0x2D116EC
	0x03AEF5E4 MOV X0, X19
	0x03AEF5E8 LDP X20, X19, [X31 + 0x20]
	0x03AEF5EC LDP X22, X21, [X31 + 0x10]
	0x03AEF5F0 MOV X1, X31
	0x03AEF5F4 LDP X30, X23, [X31], #0x30
	0x03AEF5F8 B 0x3E3BD80
	0x03AEF5FC BL 0x1C16F20
	0x03AEF600 STP X30, X21, [X31 - 0x20]!
	0x03AEF604 STP X20, X19, [X31 + 0x10]
	0x03AEF608 ADRP X20, 0x8F3000
	0x03AEF60C LDRB W8, [X20 + 0x622]
	0x03AEF610 MOV X19, X0
	0x03AEF614 TBNZ X8, 0x0, 0x3AEF62C
	0x03AEF618 ADRP X0, 0x604000
	0x03AEF61C LDR X0, [X0 + 0x598]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 Move X19, X0
	006 Call TMP_InputField.get_compositionLength, X0
	007 Compare W0, 0
	008 JumpIfNotEqual {23}
	009 Move [X19+564], W20
	010 Move TEMP, X20
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {19}
	014 Move X8, [X19+544]
	015 Compare X8, 0
	016 JumpIfEqual {27}
	017 Move W8, [X8+16]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move W8, W31
	020 Move [X19+564], W8
	021 Move W8, 1
	022 Move [X19+746], W8
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return 
	027 Call 0x1C17F20

Method: System.Int32 get_selectionStringFocusPosition()

Disassembly:
	0x03AEF690 LDR X0, [X21]
	0x03AEF694 LDR X20, [X19 + 0x138]
	0x03AEF698 LDR W8, [X0 + 0xE0]
	0x03AEF69C CBNZ W8, 0x3AEF6A4
	0x03AEF6A0 BL 0x1C16DFC
	0x03AEF6A4 MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+568]
	004 Call TMP_InputField.get_compositionLength, X0
	005 Add W0, W0, W19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Void set_selectionStringFocusPosition(System.Int32 value)

Disassembly:
	0x03AEF620 BL 0x1C16CF4
	0x03AEF624 MOVZ W8, 0x1
	0x03AEF628 STRB W8, [X20 + 0x622]
	0x03AEF62C LDRB W8, [X19 + 0x270]
	0x03AEF630 CBZ W8, 0x3AEF7AC
	0x03AEF634 ADRP X21, 0x604000
	0x03AEF638 LDR X21, [X21 + 0x598]
	0x03AEF63C STRB W31, [X19 + 0x299]
	0x03AEF640 STRB W31, [X19 + 0x270]
	0x03AEF644 LDR X20, [X19 + 0x148]
	0x03AEF648 LDR X0, [X21]
	0x03AEF64C LDR W8, [X0 + 0xE0]
	0x03AEF650 CBNZ W8, 0x3AEF658
	0x03AEF654 BL 0x1C16DFC
	0x03AEF658 MOV X0, X20
	0x03AEF65C MOV X1, X31
	0x03AEF660 MOV X2, X31
	0x03AEF664 BL 0x3C354F8
	0x03AEF668 TBZ X0, 0x0, 0x3AEF690
	0x03AEF66C LDR X0, [X19 + 0x220]
	0x03AEF670 LDR X20, [X19 + 0x148]
	0x03AEF674 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 Move X19, X0
	006 Call TMP_InputField.get_compositionLength, X0
	007 Compare W0, 0
	008 JumpIfNotEqual {23}
	009 Move [X19+568], W20
	010 Move TEMP, X20
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {19}
	014 Move X8, [X19+544]
	015 Compare X8, 0
	016 JumpIfEqual {27}
	017 Move W8, [X8+16]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move W8, W31
	020 Move [X19+568], W8
	021 Move W8, 1
	022 Move [X19+746], W8
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return 
	027 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x03AEF6A8 MOV X1, X31
	0x03AEF6AC MOV X2, X31
	0x03AEF6B0 BL 0x3C354F8
	0x03AEF6B4 TBZ X0, 0x0, 0x3AEF79C
	0x03AEF6B8 LDR X8, [X19]
	0x03AEF6BC MOV X0, X19
	0x03AEF6C0 LDR X9, [X8 + 0x2B8]
	0x03AEF6C4 LDR X1, [X8 + 0x2C0]
	0x03AEF6C8 BLR X9
	0x03AEF6CC TBZ X0, 0x0, 0x3AEF79C
	0x03AEF6D0 LDRB W8, [X19 + 0x298]
	0x03AEF6D4 CBZ W8, 0x3AEF6F0
	0x03AEF6D8 LDRB W8, [X19 + 0x2D8]
	0x03AEF6DC CBZ W8, 0x3AEF6F0
	0x03AEF6E0 LDR X1, [X19 + 0x290]
	0x03AEF6E4 MOVZ W2, 0x1
	0x03AEF6E8 MOV X0, X19
	0x03AEF6EC BL 0x3AECA68
	0x03AEF6F0 LDR X0, [X19 + 0x100]
	0x03AEF6F4 CBZ X0, 0x3AEF708
	0x03AEF6F8 MOV W1, W31
	0x03AEF6FC MOV X2, X31
	0x03AEF700 BL 0x3C3D014
	0x03AEF704 STR X31, [X19 + 0x100]
	0x03AEF708 LDRB W8, [X19 + 0x2CA]
	0x03AEF70C MOVZ W9, 0x1
	0x03AEF710 STRB W9, [X19 + 0x2CB]
	0x03AEF714 CBNZ W8, 0x3AEF720
	0x03AEF718 LDRB W8, [X19 + 0x2CC]
	0x03AEF71C CBZ W8, 0x3AEF750
	0x03AEF720 LDR X0, [X21]
	0x03AEF724 LDR X20, [X19 + 0x150]
	0x03AEF728 LDR W8, [X0 + 0xE0]
	0x03AEF72C CBNZ W8, 0x3AEF734
	0x03AEF730 BL 0x1C16DFC
	0x03AEF734 MOV X0, X20
	0x03AEF738 MOV X1, X31
	0x03AEF73C MOV X2, X31
	0x03AEF740 BL 0x3C3883C
	0x03AEF744 TBZ X0, 0x0, 0x3AEF750
	0x03AEF748 MOV X0, X19
	0x03AEF74C BL 0x3AF0E3C
	0x03AEF750 BL 0x3AEC0E8
	0x03AEF754 LDR X8, [X21]
	0x03AEF758 MOV X20, X0
	0x03AEF75C LDR W9, [X8 + 0xE0]
	0x03AEF760 CBNZ W9, 0x3AEF76C
	0x03AEF764 MOV X0, X8
	0x03AEF768 BL 0x1C16DFC
	0x03AEF76C MOV X0, X20
	0x03AEF770 MOV X1, X31
	0x03AEF774 MOV X2, X31
	0x03AEF778 BL 0x3C354F8
	0x03AEF77C TBZ X0, 0x0, 0x3AEF79C
	0x03AEF780 BL 0x3AEC0E8
	0x03AEF784 CBZ X0, 0x3AEF7B8
	0x03AEF788 LDR X8, [X0]
	0x03AEF78C MOV W1, W31
	0x03AEF790 LDR X9, [X8 + 0x268]
	0x03AEF794 LDR X2, [X8 + 0x270]
	0x03AEF798 BLR X9
	0x03AEF79C MOV X0, X19
	0x03AEF7A0 LDP X20, X19, [X31 + 0x10]
	0x03AEF7A4 LDP X30, X21, [X31], #0x20
	0x03AEF7A8 B 0x3AED1E0
	0x03AEF7AC LDP X20, X19, [X31 + 0x10]
	0x03AEF7B0 LDP X30, X21, [X31], #0x20
	0x03AEF7B4 RET
	0x03AEF7B8 BL 0x1C16F20
	0x03AEF7BC STR X30, [X31 - 0x30]!
	0x03AEF7C0 STP X22, X21, [X31 + 0x10]
	0x03AEF7C4 STP X20, X19, [X31 + 0x20]
	0x03AEF7C8 ADRP X21, 0x8F3000
	0x03AEF7CC ADRP X22, 0x604000
	0x03AEF7D0 LDRB W8, [X21 + 0x5F7]
	0x03AEF7D4 LDR X22, [X22 + 0x598]
	0x03AEF7D8 MOV X20, X1
	0x03AEF7DC MOV X19, X0
	0x03AEF7E0 TBNZ X8, 0x0, 0x3AEF804
	0x03AEF7E4 ADRP X0, 0x604000
	0x03AEF7E8 LDR X0, [X0 + 0x970]
	0x03AEF7EC BL 0x1C16CF4
	0x03AEF7F0 ADRP X0, 0x604000
	0x03AEF7F4 LDR X0, [X0 + 0x598]
	0x03AEF7F8 BL 0x1C16CF4
	0x03AEF7FC MOVZ W8, 0x1
	0x03AEF800 STRB W8, [X21 + 0x5F7]
	0x03AEF804 LDR X0, [X22]
	0x03AEF808 LDR X21, [X19 + 0x138]
	0x03AEF80C LDR W8, [X0 + 0xE0]
	0x03AEF810 CBNZ W8, 0x3AEF818
	0x03AEF814 BL 0x1C16DFC
	0x03AEF818 MOV X0, X20
	0x03AEF81C MOV X1, X21
	0x03AEF820 MOV X2, X31
	0x03AEF824 BL 0x3C3883C
	0x03AEF828 TBZ X0, 0x0, 0x3AEF8E4
	0x03AEF82C ADRP X8, 0x604000
	0x03AEF830 LDR X8, [X8 + 0x970]
	0x03AEF834 LDR X0, [X8]
	0x03AEF838 LDR W8, [X0 + 0xE0]
	0x03AEF83C CBNZ W8, 0x3AEF844
	0x03AEF840 BL 0x1C16DFC
	0x03AEF844 MOV X0, X31
	0x03AEF848 BL 0x3C018E4
	0x03AEF84C TBZ X0, 0x0, 0x3AEF8AC
	0x03AEF850 MOV X0, X19
	0x03AEF854 BL 0x3AEC28C
	0x03AEF858 CBNZ W0, 0x3AEF8AC
	0x03AEF85C LDR W20, [X19 + 0x234]
	0x03AEF860 MOV X0, X19
	0x03AEF864 BL 0x3AEC28C
	0x03AEF868 ADD W1, W0, W20
	0x03AEF86C MOV X0, X19
	0x03AEF870 BL 0x3AEF8F4
	0x03AEF874 ADD X1, X19, 0x23C
	0x03AEF878 STR W0, [X19 + 0x23C]
	0x03AEF87C MOV X0, X19
	0x03AEF880 BL 0x3AEE318
	0x03AEF884 LDR W20, [X19 + 0x238]
	0x03AEF888 MOV X0, X19
	0x03AEF88C BL 0x3AEC28C
	0x03AEF890 ADD W1, W0, W20
	0x03AEF894 MOV X0, X19
	0x03AEF898 BL 0x3AEF8F4
	0x03AEF89C ADD X1, X19, 0x240
	0x03AEF8A0 STR W0, [X19 + 0x240]
	0x03AEF8A4 MOV X0, X19
	0x03AEF8A8 BL 0x3AEE318
	0x03AEF8AC LDR X0, [X22]
	0x03AEF8B0 LDR X20, [X19 + 0x150]
	0x03AEF8B4 LDR W8, [X0 + 0xE0]
	0x03AEF8B8 CBNZ W8, 0x3AEF8C0
	0x03AEF8BC BL 0x1C16DFC
	0x03AEF8C0 MOV X0, X20
	0x03AEF8C4 MOV X1, X31
	0x03AEF8C8 BL 0x3C38948
	0x03AEF8CC TBZ X0, 0x0, 0x3AEF8E4
	0x03AEF8D0 MOV X0, X19
	0x03AEF8D4 LDP X20, X19, [X31 + 0x20]
	0x03AEF8D8 LDP X22, X21, [X31 + 0x10]
	0x03AEF8DC LDR X30, [X31], #0x30
	0x03AEF8E0 B 0x3AEF964
	0x03AEF8E4 LDP X20, X19, [X31 + 0x20]
	0x03AEF8E8 LDP X22, X21, [X31 + 0x10]
	0x03AEF8EC LDR X30, [X31], #0x30
	0x03AEF8F0 RET
	0x03AEF8F4 STR X30, [X31 - 0x10]!
	0x03AEF8F8 LDR X8, [X0 + 0x138]
	0x03AEF8FC CBZ X8, 0x3AEF960
	0x03AEF900 LDR X8, [X8 + 0x368]
	0x03AEF904 CBZ X8, 0x3AEF960
	0x03AEF908 LDR W0, [X8 + 0x18]
	0x03AEF90C CMP W0, 0x1
	0x03AEF910 B.LT 0x3AEF954
	0x03AEF914 LDR X8, [X8 + 0x38]
	0x03AEF918 CBZ X8, 0x3AEF960
	0x03AEF91C LDR W10, [X8 + 0x18]
	0x03AEF920 MOV W9, W31
	0x03AEF924 MOVZ W11, 0x178
	0x03AEF928 CMP W9, W10
	0x03AEF92C B.CS 0x3AEF95C
	0x03AEF930 SMADDL X12, X9, X11, X8
	0x03AEF934 LDR W12, [X12 + 0x24]
	0x03AEF938 CMP W12, W1
	0x03AEF93C B.GE 0x3AEF950
	0x03AEF940 ADD W9, W9, 0x1
	0x03AEF944 CMP W0, W9
	0x03AEF948 B.NE 0x3AEF928
	0x03AEF94C B 0x3AEF954
	0x03AEF950 MOV W0, W9
	0x03AEF954 LDR X30, [X31], #0x10
	0x03AEF958 RET
	0x03AEF95C BL 0x1C16F28
	0x03AEF960 BL 0x1C16F20
	0x03AEF964 STR D8, [X31 - 0x30]!
	0x03AEF968 STP X30, X21, [X31 + 0x10]
	0x03AEF96C STP X20, X19, [X31 + 0x20]
	0x03AEF970 ADRP X21, 0x8F3000
	0x03AEF974 ADRP X20, 0x604000
	0x03AEF978 LDRB W8, [X21 + 0x615]
	0x03AEF97C LDR X20, [X20 + 0x598]
	0x03AEF980 MOV X19, X0
	0x03AEF984 TBNZ X8, 0x0, 0x3AEF99C
	0x03AEF988 ADRP X0, 0x604000
	0x03AEF98C LDR X0, [X0 + 0x598]
	0x03AEF990 BL 0x1C16CF4
	0x03AEF994 MOVZ W8, 0x1
	0x03AEF998 STRB W8, [X21 + 0x615]
	0x03AEF99C LDR X0, [X20]
	0x03AEF9A0 LDR X20, [X19 + 0x150]
	0x03AEF9A4 LDR W8, [X0 + 0xE0]
	0x03AEF9A8 CBNZ W8, 0x3AEF9B0
	0x03AEF9AC BL 0x1C16DFC
	0x03AEF9B0 MOV X0, X20
	0x03AEF9B4 MOV X1, X31
	0x03AEF9B8 BL 0x3C38948
	0x03AEF9BC TBZ X0, 0x0, 0x3AEFA28
	0x03AEF9C0 LDR X0, [X19 + 0x110]
	0x03AEF9C4 CBZ X0, 0x3AEFA38
	0x03AEF9C8 MOV X1, X31
	0x03AEF9CC BL 0x3C3E51C
	0x03AEF9D0 LDR X0, [X19 + 0x138]
	0x03AEF9D4 CBZ X0, 0x3AEFA38
	0x03AEF9D8 LDR X8, [X0]
	0x03AEF9DC MOV V8.16B, V3.16B
	0x03AEF9E0 LDR X9, [X8 + 0x688]
	0x03AEF9E4 LDR X1, [X8 + 0x690]
	0x03AEF9E8 BLR X9
	0x03AEF9EC LDR X0, [X19 + 0x150]
	0x03AEF9F0 CBZ X0, 0x3AEFA38
	0x03AEF9F4 FDIV S0, S8, S0
	0x03AEF9F8 MOV X1, X31
	0x03AEF9FC BL 0x3E3B920
	0x03AEFA00 LDR X20, [X19 + 0x150]
	0x03AEFA04 MOV X0, X19
	0x03AEFA08 BL 0x3AF3A4C
	0x03AEFA0C CBZ X20, 0x3AEFA38
	0x03AEFA10 MOV X0, X20
	0x03AEFA14 LDP X20, X19, [X31 + 0x20]
	0x03AEFA18 LDP X30, X21, [X31 + 0x10]
	0x03AEFA1C MOV X1, X31
	0x03AEFA20 LDR V8, [X31], #0x30
	0x03AEFA24 B 0x3E3B844
	0x03AEFA28 LDP X20, X19, [X31 + 0x20]
	0x03AEFA2C LDP X30, X21, [X31 + 0x10]
	0x03AEFA30 LDR V8, [X31], #0x30
	0x03AEFA34 RET
	0x03AEFA38 BL 0x1C16F20
	0x03AEFA3C STP X30, X21, [X31 - 0x20]!
	0x03AEFA40 STP X20, X19, [X31 + 0x10]
	0x03AEFA44 ADRP X20, 0x8F3000
	0x03AEFA48 ADRP X21, 0x66A000
	0x03AEFA4C LDRB W8, [X20 + 0x5F8]
	0x03AEFA50 LDR X21, [X21 + 0x158]
	0x03AEFA54 MOV X19, X0
	0x03AEFA58 TBNZ X8, 0x0, 0x3AEFA70
	0x03AEFA5C ADRP X0, 0x66A000
	0x03AEFA60 LDR X0, [X0 + 0x158]
	0x03AEFA64 BL 0x1C16CF4
	0x03AEFA68 MOVZ W8, 0x1
	0x03AEFA6C STRB W8, [X20 + 0x5F8]
	0x03AEFA70 LDR X0, [X21]
	0x03AEFA74 BL 0x1C16F10
	0x03AEFA78 MOV W1, W31
	0x03AEFA7C MOV X2, X31
	0x03AEFA80 MOV X20, X0
	0x03AEFA84 BL 0x3B0D354
	0x03AEFA88 CBZ X20, 0x3AEFAA0
	0x03AEFA8C STR X19, [X20 + 0x20]
	0x03AEFA90 MOV X0, X20
	0x03AEFA94 LDP X20, X19, [X31 + 0x10]
	0x03AEFA98 LDP X30, X21, [X31], #0x20
	0x03AEFA9C RET
	0x03AEFAA0 BL 0x1C16F20
	0x03AEFAA4 STP X30, X19, [X31 - 0x10]!
	0x03AEFAA8 LDRB W8, [X0 + 0x270]
	0x03AEFAAC CBZ W8, 0x3AEFAD4
	0x03AEFAB0 MOVZ W8, 0x1
	0x03AEFAB4 MOV X19, X0
	0x03AEFAB8 STRB W8, [X0 + 0x274]
	0x03AEFABC MOV X0, X31
	0x03AEFAC0 BL 0x3C3C764
	0x03AEFAC4 STR S0, [X19 + 0x280]
	0x03AEFAC8 MOV X0, X19
	0x03AEFACC LDP X30, X19, [X31], #0x10
	0x03AEFAD0 B 0x3AED110
	0x03AEFAD4 LDP X30, X19, [X31], #0x10
	0x03AEFAD8 RET
	0x03AEFADC LDRB W8, [X0 + 0x2C8]
	0x03AEFAE0 CBZ W8, 0x3AEFAE8
	0x03AEFAE4 B 0x3AEFAEC
	0x03AEFAE8 RET
	0x03AEFAEC STR X30, [X31 - 0x10]!
	0x03AEFAF0 LDR X8, [X0 + 0x220]
	0x03AEFAF4 MOVZ W9, 0x1
	0x03AEFAF8 STRB W9, [X0 + 0x2C9]
	0x03AEFAFC CBZ X8, 0x3AEFB20
	0x03AEFB00 LDR W9, [X8 + 0x10]
	0x03AEFB04 BIC W9, W9, W9, 0x1F
	0x03AEFB08 STR W9, [X0 + 0x234]
	0x03AEFB0C LDR W8, [X8 + 0x10]
	0x03AEFB10 AND W8, W8, W8, 0x1F
	0x03AEFB14 STR W8, [X0 + 0x238]
	0x03AEFB18 LDR X30, [X31], #0x10
	0x03AEFB1C RET
	0x03AEFB20 BL 0x1C16F20
	0x03AEFB24 STP X30, X21, [X31 - 0x20]!
	0x03AEFB28 STP X20, X19, [X31 + 0x10]
	0x03AEFB2C LDRB W8, [X0 + 0x2D9]
	0x03AEFB30 MOV X19, X0
	0x03AEFB34 MOV W20, W1
	0x03AEFB38 CBZ W8, 0x3AEFB54
	0x03AEFB3C LDR X8, [X19 + 0x220]
	0x03AEFB40 CBZ X8, 0x3AEFC58
	0x03AEFB44 LDR W8, [X8 + 0x10]
	0x03AEFB48 TBZ X20, 0x0, 0x3AEFBAC
	0x03AEFB4C BIC W8, W8, W8, 0x1F
	0x03AEFB50 B 0x3AEFC3C
	0x03AEFB54 LDR X8, [X19 + 0x138]
	0x03AEFB58 CBZ X8, 0x3AEFC58
	0x03AEFB5C LDR X8, [X8 + 0x368]
	0x03AEFB60 CBZ X8, 0x3AEFC58
	0x03AEFB64 LDR W8, [X8 + 0x18]
	0x03AEFB68 ADD X1, X19, 0x240
	0x03AEFB6C MOV X0, X19
	0x03AEFB70 SUB W21, W8, 0x1
	0x03AEFB74 STR W21, [X19 + 0x240]
	0x03AEFB78 BL 0x3AEE318
	0x03AEFB7C TBZ X20, 0x0, 0x3AEFBEC
	0x03AEFB80 MOV X0, X19
	0x03AEFB84 MOV W1, W21
	0x03AEFB88 BL 0x3AEFC5C
	0x03AEFB8C STR W0, [X19 + 0x238]
	0x03AEFB90 TBNZ X0, 0x1F, 0x3AEFBE4
	0x03AEFB94 LDR X8, [X19 + 0x220]
	0x03AEFB98 CBZ X8, 0x3AEFC58
	0x03AEFB9C LDR W8, [X8 + 0x10]
	0x03AEFBA0 CMP W8, W0
	0x03AEFBA4 B.LT 0x3AEFC3C
	0x03AEFBA8 B 0x3AEFC40
	0x03AEFBAC BIC W20, W8, W8, 0x1F
	0x03AEFBB0 MOV X0, X19
	0x03AEFBB4 STR W20, [X19 + 0x234]
	0x03AEFBB8 BL 0x3AEC28C
	0x03AEFBBC ADDS W8, W0, W20
	0x03AEFBC0 STR W8, [X19 + 0x238]
	0x03AEFBC4 B.MI 0x3AEFBE4
	0x03AEFBC8 LDR X9, [X19 + 0x220]
	0x03AEFBCC CBZ X9, 0x3AEFC58
	0x03AEFBD0 LDR W9, [X9 + 0x10]
	0x03AEFBD4 CMP W9, W8
	0x03AEFBD8 B.GE 0x3AEFC40
	0x03AEFBDC STR W9, [X19 + 0x238]
	0x03AEFBE0 B 0x3AEFC40
	0x03AEFBE4 STR W31, [X19 + 0x238]
	0x03AEFBE8 B 0x3AEFC40
	0x03AEFBEC ADD X1, X19, 0x23C
	0x03AEFBF0 MOV X0, X19
	0x03AEFBF4 STR W21, [X19 + 0x23C]
	0x03AEFBF8 BL 0x3AEE318
	0x03AEFBFC MOV X0, X19
	0x03AEFC00 MOV W1, W21
	0x03AEFC04 BL 0x3AEFC5C
	0x03AEFC08 ADD X8, X19, 0x234
	0x03AEFC0C STR W0, [X19 + 0x234]
	0x03AEFC10 TBNZ X0, 0x1F, 0x3AEFC50
	0x03AEFC14 LDR X9, [X19 + 0x220]
	0x03AEFC18 CBZ X9, 0x3AEFC58
	0x03AEFC1C LDR W10, [X9 + 0x10]
	0x03AEFC20 CMP W10, W0
	0x03AEFC24 B.GE 0x3AEFC2C
	0x03AEFC28 STR W10, [X8]
	0x03AEFC2C STR W0, [X19 + 0x238]
	0x03AEFC30 LDR W8, [X9 + 0x10]
	0x03AEFC34 CMP W8, W0
	0x03AEFC38 CSEL W8, W8, W0, LT
	0x03AEFC3C STR W8, [X19 + 0x238]
	0x03AEFC40 MOV X0, X19
	0x03AEFC44 LDP X20, X19, [X31 + 0x10]
	0x03AEFC48 LDP X30, X21, [X31], #0x20
	0x03AEFC4C B 0x3AECBA4
	0x03AEFC50 STR X31, [X8]
	0x03AEFC54 B 0x3AEFC40
	0x03AEFC58 BL 0x1C16F20
	0x03AEFC5C SUB X31, X31, 0x20
	0x03AEFC60 STP X30, X19, [X31 + 0x10]
	0x03AEFC64 STR W1, [X31 + 0xC]
	0x03AEFC68 ADD X1, X31, 0xC
	0x03AEFC6C MOV X19, X0
	0x03AEFC70 BL 0x3AEE318
	0x03AEFC74 LDR X8, [X19 + 0x138]
	0x03AEFC78 CBZ X8, 0x3AEFCB4
	0x03AEFC7C LDR X8, [X8 + 0x368]
	0x03AEFC80 CBZ X8, 0x3AEFCB4
	0x03AEFC84 LDR X8, [X8 + 0x38]
	0x03AEFC88 CBZ X8, 0x3AEFCB4
	0x03AEFC8C LDRSW X9, [X31 + 0xC]
	0x03AEFC90 LDR W10, [X8 + 0x18]
	0x03AEFC94 CMP W9, W10
	0x03AEFC98 B.CS 0x3AEFCB8
	0x03AEFC9C MOVZ W10, 0x178
	0x03AEFCA0 MADD X8, X9, X10, X8
	0x03AEFCA4 LDR W0, [X8 + 0x24]
	0x03AEFCA8 LDP X30, X19, [X31 + 0x10]
	0x03AEFCAC ADD X31, X31, 0x20
	0x03AEFCB0 RET
	0x03AEFCB4 BL 0x1C16F20
	0x03AEFCB8 BL 0x1C16F28
	0x03AEFCBC STR X30, [X31 - 0x20]!
	0x03AEFCC0 STP X20, X19, [X31 + 0x10]
	0x03AEFCC4 LDRB W8, [X0 + 0x2D9]
	0x03AEFCC8 MOV X19, X0
	0x03AEFCCC MOV W20, W1
	0x03AEFCD0 CBZ W8, 0x3AEFCF0
	0x03AEFCD4 TBZ X20, 0x0, 0x3AEFD30
	0x03AEFCD8 LDR X8, [X19 + 0x220]
	0x03AEFCDC STR W31, [X19 + 0x238]
	0x03AEFCE0 CBZ X8, 0x3AEFDF4
	0x03AEFCE4 LDR W8, [X8 + 0x10]
	0x03AEFCE8 TBZ X8, 0x1F, 0x3AEFDE4
	0x03AEFCEC B 0x3AEFD9C
	0x03AEFCF0 ADD X1, X19, 0x240
	0x03AEFCF4 MOV X0, X19
	0x03AEFCF8 STR W31, [X19 + 0x240]
	0x03AEFCFC BL 0x3AEE318
	0x03AEFD00 TBZ X20, 0x0, 0x3AEFD4C
	0x03AEFD04 MOV X0, X19
	0x03AEFD08 MOV W1, W31
	0x03AEFD0C BL 0x3AEFC5C
	0x03AEFD10 STR W0, [X19 + 0x238]
	0x03AEFD14 TBNZ X0, 0x1F, 0x3AEFDD8
	0x03AEFD18 LDR X8, [X19 + 0x220]
	0x03AEFD1C CBZ X8, 0x3AEFDF4
	0x03AEFD20 LDR W8, [X8 + 0x10]
	0x03AEFD24 CMP W8, W0
	0x03AEFD28 B.LT 0x3AEFD9C
	0x03AEFD2C B 0x3AEFDE4
	0x03AEFD30 LDR X8, [X19 + 0x220]
	0x03AEFD34 STR W31, [X19 + 0x234]
	0x03AEFD38 CBZ X8, 0x3AEFDF4
	0x03AEFD3C LDR W20, [X8 + 0x10]
	0x03AEFD40 TBNZ X20, 0x1F, 0x3AEFDA4
	0x03AEFD44 MOV W20, W31
	0x03AEFD48 B 0x3AEFDA8
	0x03AEFD4C ADD X1, X19, 0x23C
	0x03AEFD50 MOV X0, X19
	0x03AEFD54 STR W31, [X19 + 0x23C]
	0x03AEFD58 BL 0x3AEE318
	0x03AEFD5C MOV X0, X19
	0x03AEFD60 MOV W1, W31
	0x03AEFD64 BL 0x3AEFC5C
	0x03AEFD68 ADD X8, X19, 0x234
	0x03AEFD6C STR W0, [X19 + 0x234]
	0x03AEFD70 TBNZ X0, 0x1F, 0x3AEFDE0
	0x03AEFD74 LDR X9, [X19 + 0x220]
	0x03AEFD78 CBZ X9, 0x3AEFDF4
	0x03AEFD7C LDR W10, [X9 + 0x10]
	0x03AEFD80 CMP W10, W0
	0x03AEFD84 B.GE 0x3AEFD8C
	0x03AEFD88 STR W10, [X8]
	0x03AEFD8C STR W0, [X19 + 0x238]
	0x03AEFD90 LDR W8, [X9 + 0x10]
	0x03AEFD94 CMP W8, W0
	0x03AEFD98 CSEL W8, W8, W0, LT
	0x03AEFD9C STR W8, [X19 + 0x238]
	0x03AEFDA0 B 0x3AEFDE4
	0x03AEFDA4 STR W20, [X19 + 0x234]
	0x03AEFDA8 MOV X0, X19
	0x03AEFDAC BL 0x3AEC28C
	0x03AEFDB0 ADDS W8, W0, W20
	0x03AEFDB4 STR W8, [X19 + 0x238]
	0x03AEFDB8 B.MI 0x3AEFDD8
	0x03AEFDBC LDR X9, [X19 + 0x220]
	0x03AEFDC0 CBZ X9, 0x3AEFDF4
	0x03AEFDC4 LDR W9, [X9 + 0x10]
	0x03AEFDC8 CMP W9, W8
	0x03AEFDCC B.GE 0x3AEFDE4
	0x03AEFDD0 STR W9, [X19 + 0x238]
	0x03AEFDD4 B 0x3AEFDE4
	0x03AEFDD8 STR W31, [X19 + 0x238]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x8F4000
	008 Move W8, [X20+1525]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {100}
	014 Move X0, 0x663000
	015 Move X0, [X0+1328]
	016 Call 0x1C17CF4
	017 Move X0, 0x605000
	018 Move X0, [X0+2416]
	019 Call 0x1C17CF4
	020 Move X0, 0x66B000
	021 Move X0, [X0+232]
	022 Call 0x1C17CF4
	023 Move X0, 0x66B000
	024 Move X0, [X0+240]
	025 Call 0x1C17CF4
	026 Move X0, 0x66B000
	027 Move X0, [X0+248]
	028 Call 0x1C17CF4
	029 Move X0, 0x607000
	030 Move X0, [X0+1720]
	031 Call 0x1C17CF4
	032 Move X0, 0x66B000
	033 Move X0, [X0+256]
	034 Call 0x1C17CF4
	035 Move X0, 0x66B000
	036 Move X0, [X0+264]
	037 Call 0x1C17CF4
	038 Move X0, 0x665000
	039 Move X0, [X0+3264]
	040 Call 0x1C17CF4
	041 Move X0, 0x66B000
	042 Move X0, [X0+272]
	043 Call 0x1C17CF4
	044 Move X0, 0x665000
	045 Move X0, [X0+2880]
	046 Call 0x1C17CF4
	047 Move X0, 0x605000
	048 Move X0, [X0+2648]
	049 Call 0x1C17CF4
	050 Move X0, 0x66B000
	051 Move X0, [X0+280]
	052 Call 0x1C17CF4
	053 Move X0, 0x605000
	054 Move X0, [X0+1432]
	055 Call 0x1C17CF4
	056 Move X0, 0x66B000
	057 Move X0, [X0+288]
	058 Call 0x1C17CF4
	059 Move X0, 0x607000
	060 Move X0, [X0+632]
	061 Call 0x1C17CF4
	062 Move X0, 0x66B000
	063 Move X0, [X0+296]
	064 Call 0x1C17CF4
	065 Move X0, 0x66B000
	066 Move X0, [X0+304]
	067 Call 0x1C17CF4
	068 Move X0, 0x66B000
	069 Move X0, [X0+104]
	070 Call 0x1C17CF4
	071 Move X0, 0x66B000
	072 Move X0, [X0+312]
	073 Call 0x1C17CF4
	074 Move X0, 0x66B000
	075 Move X0, [X0+320]
	076 Call 0x1C17CF4
	077 Move X0, 0x66A000
	078 Move X0, [X0+1008]
	079 Call 0x1C17CF4
	080 Move X0, 0x60D000
	081 Move X0, [X0+3168]
	082 Call 0x1C17CF4
	083 Move X0, 0x605000
	084 Move X0, [X0+1728]
	085 Call 0x1C17CF4
	086 Move X0, 0x66A000
	087 Move X0, [X0+2920]
	088 Call 0x1C17CF4
	089 Move X0, 0x62C000
	090 Move X0, [X0+3632]
	091 Call 0x1C17CF4
	092 Move X0, 0x66A000
	093 Move X0, [X0+2248]
	094 Call 0x1C17CF4
	095 Move X0, 0x66B000
	096 Move X0, [X0+328]
	097 Call 0x1C17CF4
	098 Move W8, 1
	099 Move [X20+1525], W8
	100 Move X20, 0x66B000
	101 Move X20, [X20+232]
	102 Move X0, X19
	103 Move X1, X31
	104 Call Selectable.OnEnable, X0
	105 Move X8, [X19+544]
	106 Compare X8, 0
	107 JumpIfNotEqual {114}
	108 Move X8, 0x607000
	109 Move X8, [X8+632]
	110 Move X8, [X8]
	111 Move X8, [X8+184]
	112 Move X8, [X8]
	113 Move [X19+544], X8
	114 Move X1, [X20]
	115 Move X20, 0x605000
	116 Move X20, [X20+2416]
	117 Move X0, X19
	118 Call 0x21A4894, X0
	119 Compare X0, 0
	120 JumpIfEqual {129}
	121 Move X8, 0x66B000
	122 Move X8, [X8+240]
	123 Move W9, 1
	124 Move [X19+352], W9
	125 Move X0, X19
	126 Move X1, [X8]
	127 Call 0x21A4894, X0
	128 Move [X19+360], X0
	129 Move [X19+352], W31
	130 Move X0, [X20]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {135}
	134 Call 0x1C17DFC
	135 Move X23, 0x605000
	136 Move X23, [X23+1432]
	137 Move X0, X31
	138 Call Application.get_isPlaying
	139 Move TEMP, X0
	140 And TEMP, TEMP, 1
	141 Compare TEMP, 1
	142 JumpIfNotEqual {307}
	143 Move X0, [X23]
	144 Move X20, [X19+600]
	145 Move W8, [X0+224]
	146 Compare W8, 0
	147 JumpIfNotEqual {149}
	148 Call 0x1C17DFC
	149 Move X0, X20
	150 Move X1, X31
	151 Move X2, X31
	152 Call Object.op_Equality, X0, X1
	153 Move TEMP, X0
	154 And TEMP, TEMP, 1
	155 Compare TEMP, 1
	156 JumpIfNotEqual {307}
	157 Move X0, [X23]
	158 Move X20, [X19+312]
	159 Move W8, [X0+224]
	160 Compare W8, 0
	161 JumpIfNotEqual {163}
	162 Call 0x1C17DFC
	163 Move X0, X20
	164 Move X1, X31
	165 Move X2, X31
	166 Call Object.op_Inequality, X0, X1
	167 Move TEMP, X0
	168 And TEMP, TEMP, 1
	169 Compare TEMP, 1
	170 JumpIfNotEqual {307}
	171 Move X8, 0x60D000
	172 Move X8, [X8+3168]
	173 Move W1, 1
	174 Move X0, [X8]
	175 Call 0x1C17D6C
	176 Move X8, 0x605000
	177 Move X8, [X8+1728]
	178 Move X9, 0x66B000
	179 Move X21, X0
	180 Move X8, [X8]
	181 Move X9, [X9+320]
	182 Move W10, [X8+224]
	183 Move X20, [X9]
	184 Compare W10, 0
	185 JumpIfNotEqual {188}
	186 Move X0, X8
	187 Call 0x1C17DFC
	188 Move X0, X20
	189 Move X1, X31
	190 Call Type.GetTypeFromHandle, X0
	191 Compare X21, 0
	192 JumpIfEqual {518}
	193 Move X20, X0
	194 Compare X0, 0
	195 JumpIfEqual {202}
	196 Move X8, [X21]
	197 Move X0, X20
	198 Move X1, [X8+64]
	199 Call 0x1C17E00
	200 Compare X0, 0
	201 JumpIfEqual {520}
	202 Move W8, [X21+24]
	203 Compare W8, 0
	204 JumpIfEqual {519}
	205 Move [X21+32], X20
	206 Move X8, 0x605000
	207 Move X8, [X8+2648]
	208 Move X0, [X8]
	209 Call 0x1C17F10
	210 Move X8, 0x66B000
	211 Move X8, [X8+328]
	212 Move X2, X21
	213 Move X3, X31
	214 Move X20, X0
	215 Move X1, [X8]
	216 Call GameObject..ctor, X0, X1, X2
	217 Compare X20, 0
	218 JumpIfEqual {518}
	219 Move W1, 52
	220 Move X0, X20
	221 Move X2, X31
	222 Call Object.set_hideFlags, X0, X1
	223 Move X0, X20
	224 Move X1, X31
	225 Call GameObject.get_transform, X0
	226 Move X8, [X19+312]
	227 Compare X8, 0
	228 JumpIfEqual {518}
	229 Move X21, X0
	230 Move X0, X8
	231 Move X1, X31
	232 Call TMP_Text.get_transform, X0
	233 Compare X0, 0
	234 JumpIfEqual {518}
	235 Move X1, X31
	236 Call Transform.get_parent, X0
	237 Compare X21, 0
	238 JumpIfEqual {518}
	239 Move X1, X0
	240 Move X0, X21
	241 Move X2, X31
	242 Call Transform.SetParent, X0, X1
	243 Move X0, X20
	244 Move X1, X31
	245 Call GameObject.get_transform, X0
	246 Compare X0, 0
	247 JumpIfEqual {518}
	248 Move X1, X31
	249 Call Transform.SetAsFirstSibling, X0
	250 Move X0, X19
	251 Move X1, X31
	252 Call Component.get_gameObject, X0
	253 Compare X0, 0
	254 JumpIfEqual {518}
	255 Move X1, X31
	256 Call GameObject.get_layer, X0
	257 Move W1, W0
	258 Move X0, X20
	259 Move X2, X31
	260 Call GameObject.set_layer, X0, X1
	261 Move X8, 0x665000
	262 Move X8, [X8+2880]
	263 Move X0, X20
	264 Move X1, [X8]
	265 Call 0x21E62E4, X0
	266 Move [X19+584], X0
	267 Move X8, 0x66B000
	268 Move X8, [X8+272]
	269 Move X0, X20
	270 Move X1, [X8]
	271 Call 0x21E62E4, X0
	272 Move [X19+600], X0
	273 Move X8, 0x66B000
	274 Move X8, [X8+280]
	275 Move X21, X0
	276 Move X0, [X8]
	277 Move W8, [X0+224]
	278 Compare W8, 0
	279 JumpIfNotEqual {281}
	280 Call 0x1C17DFC
	281 Move X0, X31
	282 Call Graphic.get_defaultGraphicMaterial
	283 Move X22, X0
	284 Move X0, X31
	285 Call Texture2D.get_whiteTexture
	286 Compare X21, 0
	287 JumpIfEqual {518}
	288 Move X2, X0
	289 Move X0, X21
	290 Move X1, X22
	291 Move X3, X31
	292 Call CanvasRenderer.SetMaterial, X0, X1, X2
	293 Move X8, 0x665000
	294 Move X8, [X8+3264]
	295 Move X0, X20
	296 Move X1, [X8]
	297 Call 0x21E61FC, X0
	298 Compare X0, 0
	299 JumpIfEqual {518}
	300 Move X8, [X0]
	301 Move W1, 1
	302 Move X9, [X8+760]
	303 Move X2, [X8+768]
	304 NotImplemented "Instruction BLR not yet implemented."
	305 Move X0, X19
	306 Call TMP_InputField.AssignPositioningIfNeeded, X0
	307 Move X8, 0x607000
	308 Move X8, [X8+1720]
	309 Move X20, 0x66B000
	310 Move X0, X19
	311 Move X1, [X8]
	312 Move X20, [X20+256]
	313 Call 0x21A4894, X0
	314 Move [X19+264], X0
	315 Move X1, [X20]
	316 Move X0, X19
	317 Call 0x21A57AC, X0
	318 Compare X0, 0
	319 JumpIfEqual {518}
	320 Move W8, [X0+24]
	321 NotImplemented "Instruction CMP not yet implemented."
	322 Move X8, [X0+40]
	323 Compare X8, 0
	324 JumpIfEqual {338}
	325 Move X9, 0x66B000
	326 Move X9, [X9+288]
	327 Move X10, [X8]
	328 Move X9, [X9]
	329 Move W12, [X10+304]
	330 Move W11, [X9+304]
	331 NotImplemented "Instruction CMP not yet implemented."
	332 Move X8, X31
	333 Move X10, [X10+200]
	334 Add X10, X10, X11
	335 NotImplemented "Instruction LDUR not yet implemented."
	336 NotImplemented "Instruction CMP not yet implemented."
	337 NotImplemented "Instruction CSEL not yet implemented."
	338 Move [X19+368], X8
	339 Move X0, [X23]
	340 Move X20, [X19+272]
	341 Move W8, [X0+224]
	342 Compare W8, 0
	343 JumpIfNotEqual {345}
	344 Call 0x1C17DFC
	345 Move X0, X20
	346 Move X1, X31
	347 Move X2, X31
	348 Call Object.op_Inequality, X0, X1
	349 Move TEMP, X0
	350 And TEMP, TEMP, 1
	351 Compare TEMP, 1
	352 JumpIfNotEqual {361}
	353 Move X0, [X19+272]
	354 Compare X0, 0
	355 JumpIfEqual {518}
	356 Move X8, 0x66B000
	357 Move X8, [X8+248]
	358 Move X1, [X8]
	359 Call 0x21A4894, X0
	360 Move [X19+288], X0
	361 Move X0, [X23]
	362 Move X20, [X19+600]
	363 Move W8, [X0+224]
	364 Compare W8, 0
	365 JumpIfNotEqual {367}
	366 Call 0x1C17DFC
	367 Move X0, X20
	368 Move X1, X31
	369 Move X2, X31
	370 Call Object.op_Inequality, X0, X1
	371 Move TEMP, X0
	372 And TEMP, TEMP, 1
	373 Compare TEMP, 1
	374 JumpIfNotEqual {395}
	375 Move X8, 0x66B000
	376 Move X8, [X8+280]
	377 Move X20, [X19+600]
	378 Move X0, [X8]
	379 Move W8, [X0+224]
	380 Compare W8, 0
	381 JumpIfNotEqual {383}
	382 Call 0x1C17DFC
	383 Move X0, X31
	384 Call Graphic.get_defaultGraphicMaterial
	385 Move X21, X0
	386 Move X0, X31
	387 Call Texture2D.get_whiteTexture
	388 Compare X20, 0
	389 JumpIfEqual {518}
	390 Move X2, X0
	391 Move X0, X20
	392 Move X1, X21
	393 Move X3, X31
	394 Call CanvasRenderer.SetMaterial, X0, X1, X2
	395 Move X0, [X23]
	396 Move X20, [X19+312]
	397 Move W8, [X0+224]
	398 Compare W8, 0
	399 JumpIfNotEqual {401}
	400 Call 0x1C17DFC
	401 Move X0, X20
	402 Move X1, X31
	403 Move X2, X31
	404 Call Object.op_Inequality, X0, X1
	405 Move TEMP, X0
	406 And TEMP, TEMP, 1
	407 Compare TEMP, 1
	408 JumpIfNotEqual {482}
	409 Move X22, 0x62C000
	410 Move X20, [X19+312]
	411 Move X22, [X22+3632]
	412 Move X0, [X22]
	413 Call 0x1C17F10
	414 Move X8, 0x66B000
	415 Move X8, [X8+296]
	416 Move X1, X19
	417 Move X3, X31
	418 Move X21, X0
	419 Move X2, [X8]
	420 Call UnityAction..ctor, X0, X1, X2
	421 Compare X20, 0
	422 JumpIfEqual {518}
	423 Move X0, X20
	424 Move X1, X21
	425 Move X2, X31
	426 Call Graphic.RegisterDirtyVerticesCallback, X0, X1
	427 Move X0, [X22]
	428 Move X20, [X19+312]
	429 Call 0x1C17F10
	430 Move X8, 0x66B000
	431 Move X8, [X8+312]
	432 Move X1, X19
	433 Move X3, X31
	434 Move X21, X0
	435 Move X2, [X8]
	436 Call UnityAction..ctor, X0, X1, X2
	437 Compare X20, 0
	438 JumpIfEqual {518}
	439 Move X0, X20
	440 Move X1, X21
	441 Move X2, X31
	442 Call Graphic.RegisterDirtyVerticesCallback, X0, X1
	443 Move X0, [X23]
	444 Move X20, [X19+336]
	445 Move W8, [X0+224]
	446 Compare W8, 0
	447 JumpIfNotEqual {449}
	448 Call 0x1C17DFC
	449 Move X0, X20
	450 Move X1, X31
	451 Move X2, X31
	452 Call Object.op_Inequality, X0, X1
	453 Move TEMP, X0
	454 And TEMP, TEMP, 1
	455 Compare TEMP, 1
	456 JumpIfNotEqual {480}
	457 Move X8, [X19+336]
	458 Compare X8, 0
	459 JumpIfEqual {518}
	460 Move X20, [X8+280]
	461 Move X8, 0x66A000
	462 Move X8, [X8+2920]
	463 Move X0, [X8]
	464 Call 0x1C17F10
	465 Move X8, 0x66B000
	466 Move X8, [X8+104]
	467 Move X1, X19
	468 Move X3, X31
	469 Move X21, X0
	470 Move X2, [X8]
	471 Call UnityAction`1<Single>..ctor, X0, X1, X2
	472 Compare X20, 0
	473 JumpIfEqual {518}
	474 Move X8, 0x66A000
	475 Move X8, [X8+2248]
	476 Move X0, X20
	477 Move X1, X21
	478 Move X2, [X8]
	479 Call UnityEvent`1<Single>.AddListener, X0, X1
	480 Move X0, X19
	481 Call TMP_InputField.UpdateLabel, X0
	482 Move X20, 0x66A000
	483 Move X20, [X20+1008]
	484 Move X22, 0x663000
	485 Move X21, 0x66B000
	486 Move X0, [X20]
	487 Move W8, [X0+224]
	488 Move X22, [X22+1328]
	489 Move X21, [X21+304]
	490 Compare W8, 0
	491 JumpIfNotEqual {494}
	492 Call 0x1C17DFC
	493 Move X0, [X20]
	494 Move X8, [X0+184]
	495 Move X0, [X22]
	496 Move X20, [X8+88]
	497 Call 0x1C17F10
	498 Move X2, [X21]
	499 Move X1, X19
	500 Move X3, X31
	501 Move X21, X0
	502 Call Action`1<Object>..ctor, X0, X1, X2
	503 Compare X20, 0
	504 JumpIfEqual {518}
	505 Move X8, 0x66B000
	506 Move X8, [X8+264]
	507 Move X0, X20
	508 Move X1, X21
	509 Move X20, [X31+32]
	510 Move X19, [X31+40]
	511 Move X2, [X8]
	512 Move X22, [X31+16]
	513 Move X21, [X31+24]
	514 Move X30, [X31+48]
	515 Move X23, [X31+56]
	516 Call FastAction`1<Object>.Add, X0, X1
	517 Return 
	518 Call 0x1C17F20
	519 Call 0x1C17F28
	520 Call 0x1C17F44
	521 Move X1, X31
	522 Call 0x1C17DEC

Method: System.Void OnDisable()

Disassembly:
	0x03AF02E0 ADD X0, X31, 0x8
	0x03AF02E4 MOV X1, X31
	0x03AF02E8 BL 0x3C36CC4
	0x03AF02EC LDR W22, [X19 + 0x234]
	0x03AF02F0 MOV W20, W0
	0x03AF02F4 MOV X0, X19
	0x03AF02F8 BL 0x3AEC28C
	0x03AF02FC ADD W22, W0, W22
	0x03AF0300 CMP W22, W21
	0x03AF0304 B.EQ 0x3AF035C
	0x03AF0308 STR W21, [X19 + 0x234]
	0x03AF030C TBNZ X21, 0x1F, 0x3AF032C
	0x03AF0310 LDR X8, [X19 + 0x220]
	0x03AF0314 CBZ X8, 0x3AF03F8
	0x03AF0318 LDR W8, [X8 + 0x10]
	0x03AF031C MOV W23, W21
	0x03AF0320 CMP W8, W21
	0x03AF0324 B.LT 0x3AF0330
	0x03AF0328 B 0x3AF0338
	0x03AF032C MOV W8, W31
	0x03AF0330 MOV W23, W8
	0x03AF0334 STR W8, [X19 + 0x234]
	0x03AF0338 MOV X0, X19
	0x03AF033C BL 0x3AEC28C
	0x03AF0340 ADD W1, W0, W23
	0x03AF0344 MOV X0, X19
	0x03AF0348 BL 0x3AEF8F4
	0x03AF034C ADD X1, X19, 0x23C
	0x03AF0350 STR W0, [X19 + 0x23C]
	0x03AF0354 MOV X0, X19
	0x03AF0358 BL 0x3AEE318
	0x03AF035C LDR W23, [X19 + 0x238]
	0x03AF0360 MOV X0, X19
	0x03AF0364 BL 0x3AEC28C
	0x03AF0368 ADD W8, W0, W23
	0x03AF036C CMP W8, W20
	0x03AF0370 B.NE 0x3AF0380
	0x03AF0374 CMP W22, W21
	0x03AF0378 B.NE 0x3AF03D0
	0x03AF037C B 0x3AF03E4
	0x03AF0380 STR W20, [X19 + 0x238]
	0x03AF0384 TBNZ X20, 0x1F, 0x3AF03A0
	0x03AF0388 LDR X8, [X19 + 0x220]
	0x03AF038C CBZ X8, 0x3AF03F8
	0x03AF0390 LDR W8, [X8 + 0x10]
	0x03AF0394 CMP W8, W20
	0x03AF0398 B.LT 0x3AF03A4
	0x03AF039C B 0x3AF03AC
	0x03AF03A0 MOV W8, W31
	0x03AF03A4 MOV W20, W8
	0x03AF03A8 STR W8, [X19 + 0x238]
	0x03AF03AC MOV X0, X19
	0x03AF03B0 BL 0x3AEC28C
	0x03AF03B4 ADD W1, W0, W20
	0x03AF03B8 MOV X0, X19
	0x03AF03BC BL 0x3AEF8F4
	0x03AF03C0 ADD X1, X19, 0x240
	0x03AF03C4 STR W0, [X19 + 0x240]
	0x03AF03C8 MOV X0, X19
	0x03AF03CC BL 0x3AEE318
	0x03AF03D0 MOV X0, X31
	0x03AF03D4 BL 0x3C3C764
	0x03AF03D8 MOV X0, X19
	0x03AF03DC STR S0, [X19 + 0x280]
	0x03AF03E0 BL 0x3AECBA4
	0x03AF03E4 LDP X20, X19, [X31 + 0x30]
	0x03AF03E8 LDP X22, X21, [X31 + 0x20]
	0x03AF03EC LDP X30, X23, [X31 + 0x10]
	0x03AF03F0 ADD X31, X31, 0x40
	0x03AF03F4 RET
	0x03AF03F8 BL 0x1C16F20
	0x03AF03FC STR X30, [X31 - 0x40]!
	0x03AF0400 STP X24, X23, [X31 + 0x10]
	0x03AF0404 STP X22, X21, [X31 + 0x20]
	0x03AF0408 STP X20, X19, [X31 + 0x30]
	0x03AF040C ADRP X20, 0x8F2000
	0x03AF0410 LDRB W8, [X20 + 0x5FC]
	0x03AF0414 MOV X19, X0
	0x03AF0418 TBNZ X8, 0x0, 0x3AF046C
	0x03AF041C ADRP X0, 0x603000
	0x03AF0420 LDR X0, [X0 + 0x970]
	0x03AF0424 BL 0x1C16CF4
	0x03AF0428 ADRP X0, 0x605000
	0x03AF042C LDR X0, [X0 + 0x170]
	0x03AF0430 BL 0x1C16CF4
	0x03AF0434 ADRP X0, 0x62A000
	0x03AF0438 LDR X0, [X0 + 0xDF8]
	0x03AF043C BL 0x1C16CF4
	0x03AF0440 ADRP X0, 0x669000
	0x03AF0444 LDR X0, [X0 + 0x160]
	0x03AF0448 BL 0x1C16CF4
	0x03AF044C ADRP X0, 0x603000
	0x03AF0450 LDR X0, [X0 + 0x598]
	0x03AF0454 BL 0x1C16CF4
	0x03AF0458 ADRP X0, 0x603000
	0x03AF045C LDR X0, [X0 + 0x988]
	0x03AF0460 BL 0x1C16CF4
	0x03AF0464 MOVZ W8, 0x1
	0x03AF0468 STRB W8, [X20 + 0x5FC]
	0x03AF046C STRH W31, [X31 + 0xC]
	0x03AF0470 LDRB W9, [X19 + 0x271]
	0x03AF0474 LDRB W8, [X19 + 0x270]
	0x03AF0478 CBZ W9, 0x3AF0488
	0x03AF047C CBZ W8, 0x3AF0584
	0x03AF0480 STRB W31, [X19 + 0x271]
	0x03AF0484 B 0x3AF048C
	0x03AF0488 CBZ W8, 0x3AF0594
	0x03AF048C MOV X0, X19
	0x03AF0490 BL 0x3AF01B0
	0x03AF0494 TBZ X0, 0x0, 0x3AF04A0
	0x03AF0498 BL 0x3AEC9C4
	0x03AF049C TBNZ X0, 0x0, 0x3AF0A48
	0x03AF04A0 LDRB W8, [X19 + 0x270]
	0x03AF04A4 CBZ W8, 0x3AF0A48
	0x03AF04A8 MOV X0, X19
	0x03AF04AC BL 0x3AEEDDC
	0x03AF04B0 LDR X0, [X19 + 0x100]
	0x03AF04B4 CBZ X0, 0x3AF0A30
	0x03AF04B8 MOV X1, X31
	0x03AF04BC BL 0x3C3D058
	0x03AF04C0 LDR X8, [X19 + 0x100]
	0x03AF04C4 CBZ W0, 0x3AF064C
	0x03AF04C8 CBZ X8, 0x3AF0A30
	0x03AF04CC LDRB W9, [X19 + 0x230]
	0x03AF04D0 CBNZ W9, 0x3AF04F8
	0x03AF04D4 MOV X0, X8
	0x03AF04D8 MOV X1, X31
	0x03AF04DC BL 0x3C3CF1C
	0x03AF04E0 MOV X1, X0
	0x03AF04E4 MOVZ W2, 0x1
	0x03AF04E8 MOV X0, X19
	0x03AF04EC BL 0x3AECA68
	0x03AF04F0 LDR X8, [X19 + 0x100]
	0x03AF04F4 CBZ X8, 0x3AF0A5C
	0x03AF04F8 MOV X0, X8
	0x03AF04FC MOV X1, X31
	0x03AF0500 BL 0x3C3D058
	0x03AF0504 CMP W0, 0x3
	0x03AF0508 B.NE 0x3AF0514
	0x03AF050C MOV X0, X19
	0x03AF0510 BL 0x3AF0E68
	0x03AF0514 LDR X0, [X19 + 0x100]
	0x03AF0518 CBZ X0, 0x3AF0A5C
	0x03AF051C MOV X1, X31
	0x03AF0520 BL 0x3C3D058
	0x03AF0524 CMP W0, 0x2
	0x03AF0528 B.NE 0x3AF0540
	0x03AF052C MOVZ W8, 0x1
	0x03AF0530 MOV X0, X19
	0x03AF0534 STRB W8, [X19 + 0x2CC]
	0x03AF0538 STRB W8, [X19 + 0x298]
	0x03AF053C BL 0x3AF0E68
	0x03AF0540 LDR X0, [X19 + 0x100]
	0x03AF0544 CBZ X0, 0x3AF0A5C
	0x03AF0548 MOV X1, X31
	0x03AF054C BL 0x3C3D058
	0x03AF0550 CMP W0, 0x1
	0x03AF0554 B.NE 0x3AF0A30
	0x03AF0558 LDR X8, [X19]
	0x03AF055C MOVZ W9, 0x1
	0x03AF0560 STRB W9, [X19 + 0x2CC]
	0x03AF0564 MOV X0, X19
	0x03AF0568 LDR X9, [X8 + 0x5C8]
	0x03AF056C LDR X2, [X8 + 0x5D0]
	0x03AF0570 MOV X1, X31
	0x03AF0574 BLR X9
	0x03AF0578 MOV X0, X19
	0x03AF057C BL 0x3AF0E68
	0x03AF0580 B 0x3AF0A30
	0x03AF0584 MOV X0, X19
	0x03AF0588 BL 0x3AF0A60
	0x03AF058C STRB W31, [X19 + 0x271]
	0x03AF0590 B 0x3AF0A48
	0x03AF0594 LDRB W8, [X19 + 0x2CB]
	0x03AF0598 CBZ W8, 0x3AF048C
	0x03AF059C ADRP X21, 0x62A000
	0x03AF05A0 LDR X21, [X21 + 0xDF8]
	0x03AF05A4 LDR X0, [X21]
	0x03AF05A8 LDR W8, [X0 + 0xE0]
	0x03AF05AC CBNZ W8, 0x3AF05B4
	0x03AF05B0 BL 0x1C16DFC
	0x03AF05B4 MOV X0, X31
	0x03AF05B8 BL 0x3E4FF90
	0x03AF05BC ADRP X22, 0x603000
	0x03AF05C0 LDR X22, [X22 + 0x598]
	0x03AF05C4 MOV X20, X0
	0x03AF05C8 LDR X8, [X22]
	0x03AF05CC LDR W9, [X8 + 0xE0]
	0x03AF05D0 CBNZ W9, 0x3AF05DC
	0x03AF05D4 MOV X0, X8
	0x03AF05D8 BL 0x1C16DFC
	0x03AF05DC MOV X0, X20
	0x03AF05E0 MOV X1, X31
	0x03AF05E4 MOV X2, X31
	0x03AF05E8 BL 0x3C354F8
	0x03AF05EC MOV X20, X31
	0x03AF05F0 TBZ X0, 0x0, 0x3AF0614
	0x03AF05F4 LDR X0, [X21]
	0x03AF05F8 LDR W8, [X0 + 0xE0]
	0x03AF05FC CBNZ W8, 0x3AF0604

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x8F3000
	008 Move X22, 0x604000
	009 Move W8, [X20+1526]
	010 Move X22, [X22+1432]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {54}
	016 Move X0, 0x662000
	017 Move X0, [X0+1328]
	018 Call 0x1C17CF4
	019 Move X0, 0x669000
	020 Move X0, [X0+1816]
	021 Call 0x1C17CF4
	022 Move X0, 0x66A000
	023 Move X0, [X0+336]
	024 Call 0x1C17CF4
	025 Move X0, 0x604000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move X0, 0x66A000
	029 Move X0, [X0+296]
	030 Call 0x1C17CF4
	031 Move X0, 0x66A000
	032 Move X0, [X0+304]
	033 Call 0x1C17CF4
	034 Move X0, 0x66A000
	035 Move X0, [X0+104]
	036 Call 0x1C17CF4
	037 Move X0, 0x66A000
	038 Move X0, [X0+312]
	039 Call 0x1C17CF4
	040 Move X0, 0x669000
	041 Move X0, [X0+1008]
	042 Call 0x1C17CF4
	043 Move X0, 0x669000
	044 Move X0, [X0+2920]
	045 Call 0x1C17CF4
	046 Move X0, 0x62B000
	047 Move X0, [X0+3632]
	048 Call 0x1C17CF4
	049 Move X0, 0x66A000
	050 Move X0, [X0+112]
	051 Call 0x1C17CF4
	052 Move W8, 1
	053 Move [X20+1526], W8
	054 Move X0, X19
	055 Move W1, W31
	056 Move [X19+632], X31
	057 Call TMP_InputField.DeactivateInputField, X0, X1
	058 Move X0, [X22]
	059 Move X20, [X19+312]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X20
	065 Move X1, X31
	066 Move X2, X31
	067 Call Object.op_Inequality, X0, X1
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfNotEqual {143}
	072 Move X23, 0x62B000
	073 Move X23, [X23+3632]
	074 Move X21, 0x66A000
	075 Move X20, [X19+312]
	076 Move X0, [X23]
	077 Move X21, [X21+296]
	078 Call 0x1C17F10
	079 Move X2, [X21]
	080 Move X1, X19
	081 Move X3, X31
	082 Move X21, X0
	083 Call UnityAction..ctor, X0, X1, X2
	084 Compare X20, 0
	085 JumpIfEqual {235}
	086 Move X0, X20
	087 Move X1, X21
	088 Move X2, X31
	089 Call Graphic.UnregisterDirtyVerticesCallback, X0, X1
	090 Move X0, [X23]
	091 Move X20, [X19+312]
	092 Call 0x1C17F10
	093 Move X8, 0x66A000
	094 Move X8, [X8+312]
	095 Move X1, X19
	096 Move X3, X31
	097 Move X21, X0
	098 Move X2, [X8]
	099 Call UnityAction..ctor, X0, X1, X2
	100 Compare X20, 0
	101 JumpIfEqual {235}
	102 Move X0, X20
	103 Move X1, X21
	104 Move X2, X31
	105 Call Graphic.UnregisterDirtyVerticesCallback, X0, X1
	106 Move X0, [X22]
	107 Move X20, [X19+336]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Move X0, X20
	113 Move X1, X31
	114 Move X2, X31
	115 Call Object.op_Inequality, X0, X1
	116 Move TEMP, X0
	117 And TEMP, TEMP, 1
	118 Compare TEMP, 1
	119 JumpIfNotEqual {143}
	120 Move X8, [X19+336]
	121 Compare X8, 0
	122 JumpIfEqual {235}
	123 Move X20, [X8+280]
	124 Move X8, 0x669000
	125 Move X8, [X8+2920]
	126 Move X0, [X8]
	127 Call 0x1C17F10
	128 Move X8, 0x66A000
	129 Move X8, [X8+104]
	130 Move X1, X19
	131 Move X3, X31
	132 Move X21, X0
	133 Move X2, [X8]
	134 Call UnityAction`1<Single>..ctor, X0, X1, X2
	135 Compare X20, 0
	136 JumpIfEqual {235}
	137 Move X8, 0x66A000
	138 Move X8, [X8+112]
	139 Move X0, X20
	140 Move X1, X21
	141 Move X2, [X8]
	142 Call UnityEvent`1<Single>.RemoveListener, X0, X1
	143 Move X8, 0x669000
	144 Move X8, [X8+1816]
	145 Move X0, [X8]
	146 Move W8, [X0+224]
	147 Compare W8, 0
	148 JumpIfNotEqual {150}
	149 Call 0x1C17DFC
	150 Move X0, X19
	151 Move X1, X31
	152 Call CanvasUpdateRegistry.UnRegisterCanvasElementForRebuild, X0
	153 Move X0, [X22]
	154 Move X20, [X19+600]
	155 Move W8, [X0+224]
	156 Compare W8, 0
	157 JumpIfNotEqual {159}
	158 Call 0x1C17DFC
	159 Move X0, X20
	160 Move X1, X31
	161 Move X2, X31
	162 Call Object.op_Inequality, X0, X1
	163 Move TEMP, X0
	164 And TEMP, TEMP, 1
	165 Compare TEMP, 1
	166 JumpIfNotEqual {172}
	167 Move X0, [X19+600]
	168 Compare X0, 0
	169 JumpIfEqual {235}
	170 Move X1, X31
	171 Call CanvasRenderer.Clear, X0
	172 Move X0, [X22]
	173 Move X20, [X19+616]
	174 Move W8, [X0+224]
	175 Compare W8, 0
	176 JumpIfNotEqual {178}
	177 Call 0x1C17DFC
	178 Move X21, 0x669000
	179 Move X21, [X21+1008]
	180 Move X0, X20
	181 Move X1, X31
	182 Move X2, X31
	183 Call Object.op_Inequality, X0, X1
	184 Move TEMP, X0
	185 And TEMP, TEMP, 1
	186 Compare TEMP, 1
	187 JumpIfNotEqual {197}
	188 Move X0, [X22]
	189 Move X20, [X19+616]
	190 Move W8, [X0+224]
	191 Compare W8, 0
	192 JumpIfNotEqual {194}
	193 Call 0x1C17DFC
	194 Move X0, X20
	195 Move X1, X31
	196 Call Object.DestroyImmediate, X0
	197 Move [X19+616], X31
	198 Move X0, [X21]
	199 Move X23, 0x662000
	200 Move X22, 0x66A000
	201 Move W8, [X0+224]
	202 Move X23, [X23+1328]
	203 Move X22, [X22+304]
	204 Compare W8, 0
	205 JumpIfNotEqual {208}
	206 Call 0x1C17DFC
	207 Move X0, [X21]
	208 Move X8, [X0+184]
	209 Move X0, [X23]
	210 Move X20, [X8+88]
	211 Call 0x1C17F10
	212 Move X2, [X22]
	213 Move X1, X19
	214 Move X3, X31
	215 Move X21, X0
	216 Call Action`1<Object>..ctor, X0, X1, X2
	217 Compare X20, 0
	218 JumpIfEqual {235}
	219 Move X8, 0x66A000
	220 Move X8, [X8+336]
	221 Move X0, X20
	222 Move X1, X21
	223 Move X2, [X8]
	224 Call FastAction`1<Object>.Remove, X0, X1
	225 Move X0, X19
	226 Move X20, [X31+32]
	227 Move X19, [X31+40]
	228 Move X22, [X31+16]
	229 Move X21, [X31+24]
	230 Move X1, X31
	231 Move X30, [X31+48]
	232 Move X23, [X31+56]
	233 Call Selectable.OnDisable, X0
	234 Return 
	235 Call 0x1C17F20

Method: System.Void ON_TEXT_CHANGED(UnityEngine.Object obj)

Disassembly:
	0x03AF07BC MOV X1, X31
	0x03AF07C0 MOV X2, X31
	0x03AF07C4 BL 0x3C354F8
	0x03AF07C8 TBNZ X0, 0x0, 0x3AF0640
	0x03AF07CC B 0x3AF0A48
	0x03AF07D0 LDR X0, [X19 + 0x2F0]
	0x03AF07D4 CBZ X0, 0x3AF048C
	0x03AF07D8 MOV X1, X31
	0x03AF07DC BL 0x3C62C04
	0x03AF07E0 CBNZ W0, 0x3AF048C
	0x03AF07E4 LDR X0, [X19 + 0x2F0]
	0x03AF07E8 CBZ X0, 0x3AF0A5C
	0x03AF07EC MOV X1, X31
	0x03AF07F0 BL 0x3C62EB4
	0x03AF07F4 CBNZ W0, 0x3AF048C
	0x03AF07F8 MOV X0, X31
	0x03AF07FC BL 0x3C3C764
	0x03AF0800 LDR V1, [X19 + 0x2B0]
	0x03AF0804 LDR V2, [X19 + 0x2B4]
	0x03AF0808 STR S0, [X19 + 0x2B0]
	0x03AF080C FADD S1, S1, S2
	0x03AF0810 FCMP S1, S0
	0x03AF0814 B.LE 0x3AF048C
	0x03AF0818 B 0x3AF0640
	0x03AF081C LDRB W8, [X19 + 0x194]
	0x03AF0820 CBZ W8, 0x3AF09CC
	0x03AF0824 ADRP X8, 0x603000
	0x03AF0828 LDR X8, [X8 + 0x970]
	0x03AF082C LDR X0, [X8]
	0x03AF0830 LDR W8, [X0 + 0xE0]
	0x03AF0834 CBNZ W8, 0x3AF083C
	0x03AF0838 BL 0x1C16DFC
	0x03AF083C MOV X0, X31
	0x03AF0840 BL 0x3C01AB0
	0x03AF0844 CMP W0, 0xB
	0x03AF0848 B.NE 0x3AF09CC
	0x03AF084C MOV X0, X19
	0x03AF0850 BL 0x3AF02B4
	0x03AF0854 B 0x3AF09CC
	0x03AF0858 ADRP X8, 0x603000
	0x03AF085C LDR X8, [X8 + 0x988]
	0x03AF0860 LDR X8, [X8]
	0x03AF0864 STR X8, [X19 + 0x220]
	0x03AF0868 CBZ X20, 0x3AF0A5C
	0x03AF086C LDR W8, [X20 + 0x10]
	0x03AF0870 CMP W8, 0x1
	0x03AF0874 B.LT 0x3AF095C
	0x03AF0878 ADRP X24, 0x605000
	0x03AF087C LDR X24, [X24 + 0x170]
	0x03AF0880 MOV W21, W31
	0x03AF0884 MOVZ W23, 0xA
	0x03AF0888 MOV X0, X20
	0x03AF088C MOV W1, W21
	0x03AF0890 MOV X2, X31
	0x03AF0894 BL 0x3222A1C
	0x03AF0898 AND W8, W0, 0xFFFF
	0x03AF089C CMP W8, 0x3
	0x03AF08A0 CCMP W8, 0xD, 0x4, NE
	0x03AF08A4 CSEL W3, W23, W0, EQ
	0x03AF08A8 STRH W3, [X31 + 0xC]
	0x03AF08AC LDR X8, [X19 + 0x1F0]
	0x03AF08B0 CBZ X8, 0x3AF08D4
	0x03AF08B4 LDR X1, [X19 + 0x220]
	0x03AF08B8 CBZ X1, 0x3AF0A5C
	0x03AF08BC LDR W2, [X1 + 0x10]
	0x03AF08C0 LDR X9, [X8 + 0x18]
	0x03AF08C4 LDR X0, [X8 + 0x40]
	0x03AF08C8 LDR X4, [X8 + 0x28]
	0x03AF08CC BLR X9
	0x03AF08D0 B 0x3AF08F0
	0x03AF08D4 LDR W8, [X19 + 0x198]
	0x03AF08D8 CBZ W8, 0x3AF08F8
	0x03AF08DC LDR X1, [X19 + 0x220]
	0x03AF08E0 CBZ X1, 0x3AF0A5C
	0x03AF08E4 LDR W2, [X1 + 0x10]
	0x03AF08E8 MOV X0, X19
	0x03AF08EC BL 0x3AF0EDC
	0x03AF08F0 MOV W3, W0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8F3000
	007 Move X22, 0x604000
	008 Move W8, [X21+1527]
	009 Move X22, [X22+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x604000
	017 Move X0, [X0+2416]
	018 Call 0x1C17CF4
	019 Move X0, 0x604000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1527], W8
	024 Move X0, [X22]
	025 Move X21, [X19+312]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X21
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {96}
	038 Move X8, 0x604000
	039 Move X8, [X8+2416]
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X31
	046 Call Application.get_isPlaying
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {75}
	051 Move X0, X19
	052 Call TMP_InputField.get_compositionLength, X0
	053 Compare W0, 0
	054 JumpIfNotEqual {75}
	055 Move W20, [X19+564]
	056 Move X0, X19
	057 Call TMP_InputField.get_compositionLength, X0
	058 Add W1, W0, W20
	059 Move X0, X19
	060 Call TMP_InputField.GetCaretPositionFromStringIndex, X0, X1
	061 Add X1, X19, 572
	062 Move [X19+572], W0
	063 Move X0, X19
	064 Call TMP_InputField.ClampCaretPos, X0, X1
	065 Move W20, [X19+568]
	066 Move X0, X19
	067 Call TMP_InputField.get_compositionLength, X0
	068 Add W1, W0, W20
	069 Move X0, X19
	070 Call TMP_InputField.GetCaretPositionFromStringIndex, X0, X1
	071 Add X1, X19, 576
	072 Move [X19+576], W0
	073 Move X0, X19
	074 Call TMP_InputField.ClampCaretPos, X0, X1
	075 Move X0, [X22]
	076 Move X20, [X19+336]
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {81}
	080 Call 0x1C17DFC
	081 Move X0, X20
	082 Move X1, X31
	083 Call Object.op_Implicit, X0
	084 Move TEMP, X0
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfNotEqual {96}
	088 Move X0, X19
	089 Move X20, [X31+32]
	090 Move X19, [X31+40]
	091 Move X22, [X31+16]
	092 Move X21, [X31+24]
	093 Move X30, [X31+48]
	094 Call TMP_InputField.UpdateScrollbar, X0
	095 Return 
	096 Move X20, [X31+32]
	097 Move X19, [X31+40]
	098 Move X22, [X31+16]
	099 Move X21, [X31+24]
	100 Move X30, [X31+48]
	101 Return 

Method: System.Collections.IEnumerator CaretBlink()

Disassembly:
	0x03AF0A3C LDR X9, [X8 + 0x388]
	0x03AF0A40 LDR X2, [X8 + 0x390]
	0x03AF0A44 BLR X9
	0x03AF0A48 LDP X20, X19, [X31 + 0x30]
	0x03AF0A4C LDP X22, X21, [X31 + 0x20]
	0x03AF0A50 LDP X24, X23, [X31 + 0x10]
	0x03AF0A54 LDR X30, [X31], #0x40
	0x03AF0A58 RET
	0x03AF0A5C BL 0x1C16F20
	0x03AF0A60 SUB X31, X31, 0x40
	0x03AF0A64 STP X30, X23, [X31 + 0x10]
	0x03AF0A68 STP X22, X21, [X31 + 0x20]
	0x03AF0A6C STP X20, X19, [X31 + 0x30]
	0x03AF0A70 ADRP X20, 0x8F2000
	0x03AF0A74 ADRP X23, 0x62A000
	0x03AF0A78 LDRB W8, [X20 + 0x621]
	0x03AF0A7C LDR X23, [X23 + 0xDF8]
	0x03AF0A80 MOV X19, X0
	0x03AF0A84 TBNZ X8, 0x0, 0x3AF0AB4
	0x03AF0A88 ADRP X0, 0x62A000
	0x03AF0A8C LDR X0, [X0 + 0xDF8]
	0x03AF0A90 BL 0x1C16CF4
	0x03AF0A94 ADRP X0, 0x603000
	0x03AF0A98 LDR X0, [X0 + 0x598]
	0x03AF0A9C BL 0x1C16CF4
	0x03AF0AA0 ADRP X0, 0x603000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8F3000
	006 Move X21, 0x66A000
	007 Move W8, [X20+1528]
	008 Move X21, [X21+344]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x66A000
	015 Move X0, [X0+344]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1528], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move W1, W31
	022 Move X2, X31
	023 Move X20, X0
	024 Call <CaretBlink>d__276..ctor, X0, X1
	025 Compare X20, 0
	026 JumpIfEqual {34}
	027 Move [X20+32], X19
	028 Move X0, X20
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return X0
	034 Call 0x1C17F20

Method: System.Void SetCaretVisible()

Disassembly:
	0x03AF0AA4 LDR X0, [X0 + 0x988]
	0x03AF0AA8 BL 0x1C16CF4
	0x03AF0AAC MOVZ W8, 0x1
	0x03AF0AB0 STRB W8, [X20 + 0x621]
	0x03AF0AB4 LDR X0, [X23]
	0x03AF0AB8 ADRP X22, 0x603000
	0x03AF0ABC LDR W8, [X0 + 0xE0]
	0x03AF0AC0 LDR X22, [X22 + 0x598]
	0x03AF0AC4 CBNZ W8, 0x3AF0ACC
	0x03AF0AC8 BL 0x1C16DFC
	0x03AF0ACC MOV X0, X31
	0x03AF0AD0 BL 0x3E4FF90
	0x03AF0AD4 LDR X8, [X22]
	0x03AF0AD8 MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+624]
	004 Compare W8, 0
	005 JumpIfEqual {17}
	006 Move W8, 1
	007 Move X19, X0
	008 Move [X0+628], W8
	009 Move X0, X31
	010 Call Time.get_unscaledTime
	011 Move [X19+640], S0
	012 Move X0, X19
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call TMP_InputField.SetCaretActive, X0
	016 Return 
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return 

Method: System.Void SetCaretActive()

Disassembly:
	0x03AEE110 LDRB W8, [X22 + 0x5F3]
	0x03AEE114 LDR X21, [X21 + 0xD8]
	0x03AEE118 MOV X20, X1
	0x03AEE11C MOV X19, X0
	0x03AEE120 TBNZ X8, 0x0, 0x3AEE138
	0x03AEE124 ADRP X0, 0x66B000
	0x03AEE128 LDR X0, [X0 + 0xD8]
	0x03AEE12C BL 0x1C16CF4
	0x03AEE130 MOVZ W8, 0x1
	0x03AEE134 STRB W8, [X22 + 0x5F3]
	0x03AEE138 LDR X2, [X21]
	0x03AEE13C ADD X0, X19, 0x2E0
	0x03AEE140 MOV X1, X20
	0x03AEE144 BL 0x2253B70
	0x03AEE148 TBZ X0, 0x0, 0x3AEE158
	0x03AEE14C LDR W8, [X19 + 0x180]
	0x03AEE150 CMP W8, 0x9
	0x03AEE154 B.NE 0x3AEE168
	0x03AEE158 LDP X20, X19, [X31 + 0x20]
	0x03AEE15C LDP X22, X21, [X31 + 0x10]
	0x03AEE160 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+624]
	004 Compare W8, 0
	005 JumpIfEqual {21}
	006 Move V0, [X0+552]
	007 Move X19, X0
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 Move X8, [X19+632]
	010 Compare X8, 0
	011 JumpIfNotEqual {21}
	012 Move X0, X19
	013 Call TMP_InputField.CaretBlink, X0
	014 Move X1, X0
	015 Move X0, X19
	016 Move X2, X31
	017 Call MonoBehaviour.StartCoroutine, X0, X1
	018 Move [X19+632], X0
	019 Move W8, 1
	020 Move [X19+628], W8
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return 

Method: System.Void OnFocus()

Disassembly:
	0x03AF0ADC LDR W9, [X8 + 0xE0]
	0x03AF0AE0 CBNZ W9, 0x3AF0AEC
	0x03AF0AE4 MOV X0, X8
	0x03AF0AE8 BL 0x1C16DFC

ISIL:
	001 Move W8, [X0+712]
	002 Compare W8, 0
	003 JumpIfEqual {4}
	004 Return 

Method: System.Void SelectAll()

Disassembly:
	0x03AF0AEC MOV X0, X20
	0x03AF0AF0 MOV X1, X31
	0x03AF0AF4 MOV X2, X31
	0x03AF0AF8 BL 0x3C3883C
	0x03AF0AFC TBNZ X0, 0x0, 0x3AF0E24
	0x03AF0B00 LDR X0, [X23]
	0x03AF0B04 LDR W8, [X0 + 0xE0]
	0x03AF0B08 CBNZ W8, 0x3AF0B10
	0x03AF0B0C BL 0x1C16DFC
	0x03AF0B10 MOV X0, X31
	0x03AF0B14 BL 0x3E4FF90
	0x03AF0B18 CBZ X0, 0x3AF0E38
	0x03AF0B1C LDR X20, [X0 + 0x40]
	0x03AF0B20 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+544]
	003 Move W9, 1
	004 Move [X0+713], W9
	005 Compare X8, 0
	006 JumpIfEqual {15}
	007 Move W9, [X8+16]
	008 NotImplemented "Instruction BIC not yet implemented."
	009 Move [X0+564], W9
	010 Move W8, [X8+16]
	011 And W8, W8, W8
	012 Move [X0+568], W8
	013 Move X30, [X31+16]
	014 Return 
	015 Call 0x1C17F20

Method: System.Void MoveTextEnd(System.Boolean shift)

Disassembly:
	0x03AF0B24 MOV X1, X31
	0x03AF0B28 BL 0x3C32ECC
	0x03AF0B2C LDR X8, [X22]
	0x03AF0B30 MOV X21, X0
	0x03AF0B34 LDR W9, [X8 + 0xE0]
	0x03AF0B38 CBNZ W9, 0x3AF0B44
	0x03AF0B3C MOV X0, X8
	0x03AF0B40 BL 0x1C16DFC
	0x03AF0B44 MOV X0, X20
	0x03AF0B48 MOV X1, X21
	0x03AF0B4C MOV X2, X31
	0x03AF0B50 BL 0x3C354F8
	0x03AF0B54 TBZ X0, 0x0, 0x3AF0B94
	0x03AF0B58 LDR X0, [X23]
	0x03AF0B5C LDR W8, [X0 + 0xE0]
	0x03AF0B60 CBNZ W8, 0x3AF0B68
	0x03AF0B64 BL 0x1C16DFC
	0x03AF0B68 MOV X0, X31
	0x03AF0B6C BL 0x3E4FF90
	0x03AF0B70 MOV X20, X0
	0x03AF0B74 MOV X0, X19
	0x03AF0B78 MOV X1, X31
	0x03AF0B7C BL 0x3C32ECC
	0x03AF0B80 CBZ X20, 0x3AF0E38
	0x03AF0B84 MOV X1, X0
	0x03AF0B88 MOV X0, X20
	0x03AF0B8C MOV X2, X31
	0x03AF0B90 BL 0x3E4BE8C
	0x03AF0B94 MOV X0, X31
	0x03AF0B98 BL 0x3C3CC00
	0x03AF0B9C TBZ X0, 0x0, 0x3AF0BAC
	0x03AF0BA0 MOV X0, X19
	0x03AF0BA4 BL 0x3AEC7B0
	0x03AF0BA8 TBZ X0, 0x0, 0x3AF0C20
	0x03AF0BAC MOV X0, X31
	0x03AF0BB0 BL 0x3C3CC00
	0x03AF0BB4 TBNZ X0, 0x0, 0x3AF0C0C
	0x03AF0BB8 LDRB W8, [X19 + 0x230]
	0x03AF0BBC CBNZ W8, 0x3AF0C0C
	0x03AF0BC0 BL 0x3AEC0E8
	0x03AF0BC4 LDR X8, [X22]
	0x03AF0BC8 MOV X20, X0
	0x03AF0BCC LDR W9, [X8 + 0xE0]
	0x03AF0BD0 CBNZ W9, 0x3AF0BDC
	0x03AF0BD4 MOV X0, X8
	0x03AF0BD8 BL 0x1C16DFC
	0x03AF0BDC MOV X0, X20
	0x03AF0BE0 MOV X1, X31
	0x03AF0BE4 MOV X2, X31
	0x03AF0BE8 BL 0x3C354F8
	0x03AF0BEC TBZ X0, 0x0, 0x3AF0C0C
	0x03AF0BF0 BL 0x3AEC0E8
	0x03AF0BF4 CBZ X0, 0x3AF0E38
	0x03AF0BF8 LDR X8, [X0]
	0x03AF0BFC MOVZ W1, 0x1
	0x03AF0C00 LDR X9, [X8 + 0x268]
	0x03AF0C04 LDR X2, [X8 + 0x270]
	0x03AF0C08 BLR X9
	0x03AF0C0C LDRB W8, [X19 + 0x2C8]
	0x03AF0C10 CBZ W8, 0x3AF0E00
	0x03AF0C14 MOV X0, X19
	0x03AF0C18 BL 0x3AEFAEC
	0x03AF0C1C B 0x3AF0E00
	0x03AF0C20 BL 0x3AEC0E8
	0x03AF0C24 LDR X8, [X22]
	0x03AF0C28 MOV X20, X0
	0x03AF0C2C LDR W9, [X8 + 0xE0]
	0x03AF0C30 CBNZ W9, 0x3AF0C3C
	0x03AF0C34 MOV X0, X8
	0x03AF0C38 BL 0x1C16DFC
	0x03AF0C3C MOV X0, X20
	0x03AF0C40 MOV X1, X31
	0x03AF0C44 MOV X2, X31
	0x03AF0C48 BL 0x3C354F8
	0x03AF0C4C TBZ X0, 0x0, 0x3AF0C80
	0x03AF0C50 BL 0x3AEC0E8
	0x03AF0C54 CBZ X0, 0x3AF0E38
	0x03AF0C58 LDR X8, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+729]
	006 Move X19, X0
	007 Move W20, W1
	008 Compare W8, 0
	009 JumpIfEqual {19}
	010 Move X8, [X19+544]
	011 Compare X8, 0
	012 JumpIfEqual {93}
	013 Move W8, [X8+16]
	014 Move TEMP, X20
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {48}
	018 NotImplemented "Instruction BIC not yet implemented."
	019 Move X8, [X19+312]
	020 Compare X8, 0
	021 JumpIfEqual {93}
	022 Move X8, [X8+872]
	023 Compare X8, 0
	024 JumpIfEqual {93}
	025 Move W8, [X8+24]
	026 Add X1, X19, 576
	027 Move X0, X19
	028 Subtract W21, W8, 1
	029 Move [X19+576], W21
	030 Call TMP_InputField.ClampCaretPos, X0, X1
	031 Move TEMP, X20
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {61}
	035 Move X0, X19
	036 Move W1, W21
	037 Call TMP_InputField.GetStringIndexFromCaretPosition, X0, X1
	038 Move [X19+568], W0
	039 Move TEMP, X0
	040 And TEMP, TEMP, -2147483648
	041 Compare TEMP, -2147483648
	042 JumpIfEqual {60}
	043 Move X8, [X19+544]
	044 Compare X8, 0
	045 JumpIfEqual {93}
	046 Move W8, [X8+16]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction BIC not yet implemented."
	049 Move X0, X19
	050 Move [X19+564], W20
	051 Call TMP_InputField.get_compositionLength, X0
	052 Add W8, W0, W20
	053 Move [X19+568], W8
	054 Move X9, [X19+544]
	055 Compare X9, 0
	056 JumpIfEqual {93}
	057 Move W9, [X9+16]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move [X19+568], W9
	060 Move [X19+568], W31
	061 Add X1, X19, 572
	062 Move X0, X19
	063 Move [X19+572], W21
	064 Call TMP_InputField.ClampCaretPos, X0, X1
	065 Move X0, X19
	066 Move W1, W21
	067 Call TMP_InputField.GetStringIndexFromCaretPosition, X0, X1
	068 Add X8, X19, 564
	069 Move [X19+564], W0
	070 Move TEMP, X0
	071 And TEMP, TEMP, -2147483648
	072 Compare TEMP, -2147483648
	073 JumpIfEqual {92}
	074 Move X9, [X19+544]
	075 Compare X9, 0
	076 JumpIfEqual {93}
	077 Move W10, [X9+16]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move [X8], W10
	080 Move [X19+568], W0
	081 Move W8, [X9+16]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 NotImplemented "Instruction CSEL not yet implemented."
	084 Move [X19+568], W8
	085 Move X0, X19
	086 Move X20, [X31+16]
	087 Move X19, [X31+24]
	088 Move X30, [X31+32]
	089 Move X21, [X31+40]
	090 Call TMP_InputField.UpdateLabel, X0
	091 Return 
	092 Move [X8], X31
	093 Call 0x1C17F20

Method: System.Void MoveTextStart(System.Boolean shift)

Disassembly:
	0x03AF0CBC CMP W9, 0x2
	0x03AF0CC0 CSET W3, CC
	0x03AF0CC4 MOVZ W4, 0x1
	0x03AF0CC8 LDR X6, [X8]
	0x03AF0CCC MOV W2, W31
	0x03AF0CD0 STR X31, [X31]
	0x03AF0CD4 B 0x3AF0CFC
	0x03AF0CD8 CMP W9, 0x2
	0x03AF0CDC ADRP X9, 0x603000
	0x03AF0CE0 LDR X9, [X9 + 0x988]
	0x03AF0CE4 CSET W3, CC
	0x03AF0CE8 CMP W8, 0x1
	0x03AF0CEC CSET W2, EQ
	0x03AF0CF0 LDR X6, [X9]
	0x03AF0CF4 STR X31, [X31]
	0x03AF0CF8 MOV W4, W31
	0x03AF0CFC MOV W5, W31
	0x03AF0D00 BL 0x3C3CDD8
	0x03AF0D04 LDRB W8, [X19 + 0x2C8]
	0x03AF0D08 STR X0, [X19 + 0x100]
	0x03AF0D0C CBZ W8, 0x3AF0D1C
	0x03AF0D10 MOV X0, X19
	0x03AF0D14 BL 0x3AEFAEC
	0x03AF0D18 LDR X0, [X19 + 0x100]
	0x03AF0D1C CBZ X0, 0x3AF0DF0
	0x03AF0D20 LDR W20, [X19 + 0x234]
	0x03AF0D24 MOV X0, X19
	0x03AF0D28 BL 0x3AEC28C
	0x03AF0D2C LDR W21, [X19 + 0x238]
	0x03AF0D30 ADD W20, W0, W20
	0x03AF0D34 MOV X0, X19
	0x03AF0D38 BL 0x3AEC28C
	0x03AF0D3C ADD W8, W0, W21
	0x03AF0D40 CMP W20, W8
	0x03AF0D44 B.GE 0x3AF0D5C
	0x03AF0D48 LDR W22, [X19 + 0x238]
	0x03AF0D4C MOV X0, X19
	0x03AF0D50 BL 0x3AEC28C
	0x03AF0D54 LDR W21, [X19 + 0x234]
	0x03AF0D58 B 0x3AF0D6C
	0x03AF0D5C LDR W22, [X19 + 0x234]
	0x03AF0D60 MOV X0, X19
	0x03AF0D64 BL 0x3AEC28C
	0x03AF0D68 LDR W21, [X19 + 0x238]
	0x03AF0D6C MOV W20, W0
	0x03AF0D70 MOV X0, X19
	0x03AF0D74 BL 0x3AEC28C
	0x03AF0D78 ADD W8, W20, W22
	0x03AF0D7C LDR X20, [X19 + 0x100]
	0x03AF0D80 LDR W22, [X19 + 0x234]
	0x03AF0D84 SUB W8, W8, W21
	0x03AF0D88 SUB W21, W8, W0
	0x03AF0D8C MOV X0, X19
	0x03AF0D90 BL 0x3AEC28C
	0x03AF0D94 LDR W23, [X19 + 0x238]
	0x03AF0D98 ADD W22, W0, W22
	0x03AF0D9C MOV X0, X19
	0x03AF0DA0 BL 0x3AEC28C
	0x03AF0DA4 ADD W8, W0, W23
	0x03AF0DA8 MOVZ W9, 0x238
	0x03AF0DAC CMP W22, W8
	0x03AF0DB0 MOVZ W8, 0x234
	0x03AF0DB4 CSEL X8, X8, X9, LT
	0x03AF0DB8 LDR W22, [X19, X8, LSL]
	0x03AF0DBC MOV X0, X19
	0x03AF0DC0 BL 0x3AEC28C
	0x03AF0DC4 ADD W1, W0, W22
	0x03AF0DC8 ADD X0, X31, 0x8
	0x03AF0DCC MOV W2, W21
	0x03AF0DD0 MOV X3, X31
	0x03AF0DD4 STR X31, [X31 + 0x8]
	0x03AF0DD8 BL 0x3C36CD0
	0x03AF0DDC CBZ X20, 0x3AF0E38
	0x03AF0DE0 LDR X1, [X31 + 0x8]
	0x03AF0DE4 MOV X0, X20
	0x03AF0DE8 MOV X2, X31
	0x03AF0DEC BL 0x3C3D1E0
	0x03AF0DF0 MOV X0, X31
	0x03AF0DF4 BL 0x3C3CCF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+729]
	005 Move X19, X0
	006 Move W20, W1
	007 Compare W8, 0
	008 JumpIfEqual {22}
	009 Move TEMP, X20
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {43}
	013 Move X8, [X19+544]
	014 Move [X19+568], W31
	015 Compare X8, 0
	016 JumpIfEqual {96}
	017 Move W8, [X8+16]
	018 Move TEMP, X8
	019 And TEMP, TEMP, -2147483648
	020 Compare TEMP, -2147483648
	021 JumpIfNotEqual {90}
	022 Add X1, X19, 576
	023 Move X0, X19
	024 Move [X19+576], W31
	025 Call TMP_InputField.ClampCaretPos, X0, X1
	026 Move TEMP, X20
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {53}
	030 Move X0, X19
	031 Move W1, W31
	032 Call TMP_InputField.GetStringIndexFromCaretPosition, X0, X1
	033 Move [X19+568], W0
	034 Move TEMP, X0
	035 And TEMP, TEMP, -2147483648
	036 Compare TEMP, -2147483648
	037 JumpIfEqual {88}
	038 Move X8, [X19+544]
	039 Compare X8, 0
	040 JumpIfEqual {96}
	041 Move W8, [X8+16]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X8, [X19+544]
	044 Move [X19+564], W31
	045 Compare X8, 0
	046 JumpIfEqual {96}
	047 Move W20, [X8+16]
	048 Move TEMP, X20
	049 And TEMP, TEMP, -2147483648
	050 Compare TEMP, -2147483648
	051 JumpIfEqual {77}
	052 Move W20, W31
	053 Add X1, X19, 572
	054 Move X0, X19
	055 Move [X19+572], W31
	056 Call TMP_InputField.ClampCaretPos, X0, X1
	057 Move X0, X19
	058 Move W1, W31
	059 Call TMP_InputField.GetStringIndexFromCaretPosition, X0, X1
	060 Add X8, X19, 564
	061 Move [X19+564], W0
	062 Move TEMP, X0
	063 And TEMP, TEMP, -2147483648
	064 Compare TEMP, -2147483648
	065 JumpIfEqual {89}
	066 Move X9, [X19+544]
	067 Compare X9, 0
	068 JumpIfEqual {96}
	069 Move W10, [X9+16]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move [X8], W10
	072 Move [X19+568], W0
	073 Move W8, [X9+16]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction CSEL not yet implemented."
	076 Move [X19+568], W8
	077 Move [X19+564], W20
	078 Move X0, X19
	079 Call TMP_InputField.get_compositionLength, X0
	080 Add W8, W0, W20
	081 Move [X19+568], W8
	082 Move X9, [X19+544]
	083 Compare X9, 0
	084 JumpIfEqual {96}
	085 Move W9, [X9+16]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move [X19+568], W9
	088 Move [X19+568], W31
	089 Move [X8], X31
	090 Move X0, X19
	091 Move X20, [X31+16]
	092 Move X19, [X31+24]
	093 Move X30, [X31+32]
	094 Call TMP_InputField.UpdateLabel, X0
	095 Return 
	096 Call 0x1C17F20

Method: System.Void MoveToEndOfLine(System.Boolean shift, System.Boolean ctrl)

Disassembly:
	0x03AF0DF8 AND W8, W0, 0x1
	0x03AF0DFC STRB W8, [X19 + 0x2A9]
	0x03AF0E00 LDR X8, [X19 + 0x220]
	0x03AF0E04 MOVZ W9, 0x1
	0x03AF0E08 MOV X0, X19
	0x03AF0E0C STRB W9, [X19 + 0x270]
	0x03AF0E10 STR X8, [X19 + 0x290]
	0x03AF0E14 STRB W31, [X19 + 0x298]
	0x03AF0E18 BL 0x3AEFAA4
	0x03AF0E1C MOV X0, X19
	0x03AF0E20 BL 0x3AECBA4
	0x03AF0E24 LDP X20, X19, [X31 + 0x30]
	0x03AF0E28 LDP X22, X21, [X31 + 0x20]
	0x03AF0E2C LDP X30, X23, [X31 + 0x10]
	0x03AF0E30 ADD X31, X31, 0x40
	0x03AF0E34 RET
	0x03AF0E38 BL 0x1C16F20
	0x03AF0E3C STP X30, X19, [X31 - 0x10]!
	0x03AF0E40 ADD X8, X0, 0x2CB
	0x03AF0E44 MOV X19, X0
	0x03AF0E48 STRH W31, [X8]
	0x03AF0E4C STR X31, [X0 + 0x2D0]
	0x03AF0E50 BL 0x3AED1E0
	0x03AF0E54 MOV X0, X19
	0x03AF0E58 BL 0x3AF5194
	0x03AF0E5C MOV X0, X19
	0x03AF0E60 LDP X30, X19, [X31], #0x10
	0x03AF0E64 B 0x3AF5350
	0x03AF0E68 STR X30, [X31 - 0x20]!
	0x03AF0E6C STP X20, X19, [X31 + 0x10]
	0x03AF0E70 ADRP X19, 0x8F2000
	0x03AF0E74 LDRB W8, [X19 + 0x613]
	0x03AF0E78 MOV X20, X0
	0x03AF0E7C TBNZ X8, 0x0, 0x3AF0E94
	0x03AF0E80 ADRP X0, 0x669000
	0x03AF0E84 LDR X0, [X0 + 0x168]
	0x03AF0E88 BL 0x1C16CF4
	0x03AF0E8C MOVZ W8, 0x1
	0x03AF0E90 STRB W8, [X19 + 0x613]
	0x03AF0E94 LDR X19, [X20 + 0x1E8]
	0x03AF0E98 CBZ X19, 0x3AF0ECC
	0x03AF0E9C LDR X0, [X20 + 0x100]
	0x03AF0EA0 CBZ X0, 0x3AF0ED8
	0x03AF0EA4 ADRP X20, 0x669000
	0x03AF0EA8 LDR X20, [X20 + 0x168]
	0x03AF0EAC MOV X1, X31
	0x03AF0EB0 BL 0x3C3D058
	0x03AF0EB4 LDR X2, [X20]
	0x03AF0EB8 MOV W1, W0
	0x03AF0EBC MOV X0, X19
	0x03AF0EC0 LDP X20, X19, [X31 + 0x10]
	0x03AF0EC4 LDR X30, [X31], #0x20
	0x03AF0EC8 B 0x272991C
	0x03AF0ECC LDP X20, X19, [X31 + 0x10]
	0x03AF0ED0 LDR X30, [X31], #0x20
	0x03AF0ED4 RET
	0x03AF0ED8 BL 0x1C16F20
	0x03AF0EDC SUB X31, X31, 0x50
	0x03AF0EE0 STP X30, X25, [X31 + 0x10]
	0x03AF0EE4 STP X24, X23, [X31 + 0x20]
	0x03AF0EE8 STP X22, X21, [X31 + 0x30]
	0x03AF0EEC STP X20, X19, [X31 + 0x40]
	0x03AF0EF0 ADRP X23, 0x8F2000
	0x03AF0EF4 LDRB W8, [X23 + 0x61F]
	0x03AF0EF8 MOV W19, W3
	0x03AF0EFC MOV W20, W2
	0x03AF0F00 MOV X21, X1
	0x03AF0F04 MOV X22, X0
	0x03AF0F08 STR X1, [X31 + 0x8]
	0x03AF0F0C STR W2, [X31 + 0x4]
	0x03AF0F10 STRH W3, [X31]
	0x03AF0F14 TBNZ X8, 0x0, 0x3AF0F68
	0x03AF0F18 ADRP X0, 0x605000
	0x03AF0F1C LDR X0, [X0 + 0x170]
	0x03AF0F20 BL 0x1C16CF4
	0x03AF0F24 ADRP X0, 0x60C000
	0x03AF0F28 LDR X0, [X0 + 0x9E8]
	0x03AF0F2C BL 0x1C16CF4
	0x03AF0F30 ADRP X0, 0x603000
	0x03AF0F34 LDR X0, [X0 + 0x598]
	0x03AF0F38 BL 0x1C16CF4
	0x03AF0F3C ADRP X0, 0x60B000
	0x03AF0F40 LDR X0, [X0 + 0x600]
	0x03AF0F44 BL 0x1C16CF4
	0x03AF0F48 ADRP X0, 0x60B000
	0x03AF0F4C LDR X0, [X0 + 0x9B0]
	0x03AF0F50 BL 0x1C16CF4
	0x03AF0F54 ADRP X0, 0x669000
	0x03AF0F58 LDR X0, [X0 + 0x170]
	0x03AF0F5C BL 0x1C16CF4
	0x03AF0F60 MOVZ W8, 0x1
	0x03AF0F64 STRB W8, [X23 + 0x61F]
	0x03AF0F68 LDR W8, [X22 + 0x198]
	0x03AF0F6C CBZ W8, 0x3AF1644
	0x03AF0F70 MOV X0, X22
	0x03AF0F74 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X0+312]
	008 Compare X8, 0
	009 JumpIfEqual {112}
	010 Move X8, [X8+872]
	011 Compare X8, 0
	012 JumpIfEqual {112}
	013 Move X22, [X8+56]
	014 Move W23, [X0+572]
	015 Move W21, W2
	016 Move X19, X0
	017 Move W20, W1
	018 Call TMP_InputField.get_compositionLength, X0
	019 Compare X22, 0
	020 JumpIfEqual {112}
	021 Move W8, [X22+24]
	022 Add W9, W0, W23
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X8, [X19+312]
	025 Compare X8, 0
	026 JumpIfEqual {112}
	027 Move X8, [X8+872]
	028 Compare X8, 0
	029 JumpIfEqual {112}
	030 Move TEMP, X21
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {36}
	034 Move W9, [X8+24]
	035 Subtract W21, W9, 1
	036 Move X10, [X8+80]
	037 Compare X10, 0
	038 JumpIfEqual {112}
	039 Move W11, 376
	040 NotImplemented "Instruction SMADDL not yet implemented."
	041 NotImplemented "Instruction LDRSW not yet implemented."
	042 Move W11, [X10+24]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move W11, 92
	045 NotImplemented "Instruction MADD not yet implemented."
	046 Move W21, [X9+60]
	047 Move X8, [X8+56]
	048 Compare X8, 0
	049 JumpIfEqual {112}
	050 Move W9, [X8+24]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move W9, 376
	053 NotImplemented "Instruction SMADDL not yet implemented."
	054 Move W22, [X8+36]
	055 Move TEMP, X20
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {69}
	059 Move [X19+568], W22
	060 Move TEMP, X22
	061 And TEMP, TEMP, -2147483648
	062 Compare TEMP, -2147483648
	063 JumpIfEqual {79}
	064 Move X8, [X19+544]
	065 Compare X8, 0
	066 JumpIfEqual {112}
	067 Move W8, [X8+16]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move [X19+564], W22
	070 Move TEMP, X22
	071 And TEMP, TEMP, -2147483648
	072 Compare TEMP, -2147483648
	073 JumpIfEqual {81}
	074 Move X8, [X19+544]
	075 Compare X8, 0
	076 JumpIfEqual {112}
	077 Move W8, [X8+16]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move W8, W31
	080 Move [X19+568], W8
	081 Move W8, W31
	082 Move W22, W8
	083 Move [X19+564], W8
	084 Move X0, X19
	085 Call TMP_InputField.get_compositionLength, X0
	086 Add W8, W0, W22
	087 Move [X19+568], W8
	088 Move X9, [X19+544]
	089 Compare X9, 0
	090 JumpIfEqual {112}
	091 Move W9, [X9+16]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move W9, W31
	094 Move [X19+568], W9
	095 Add X1, X19, 572
	096 Move X0, X19
	097 Move [X19+572], W21
	098 Call TMP_InputField.ClampCaretPos, X0, X1
	099 Add X1, X19, 576
	100 Move X0, X19
	101 Move [X19+576], W21
	102 Call TMP_InputField.ClampCaretPos, X0, X1
	103 Move X0, X19
	104 Move X20, [X31+32]
	105 Move X19, [X31+40]
	106 Move X22, [X31+16]
	107 Move X21, [X31+24]
	108 Move X30, [X31+48]
	109 Move X23, [X31+56]
	110 Call TMP_InputField.UpdateLabel, X0
	111 Return 
	112 Call 0x1C17F20
	113 Call 0x1C17F28

Method: System.Void MoveToStartOfLine(System.Boolean shift, System.Boolean ctrl)

Disassembly:
	0x03AF0F78 BL 0x3C323D4
	0x03AF0F7C TBZ X0, 0x0, 0x3AF1644
	0x03AF0F80 LDR W8, [X22 + 0x198]
	0x03AF0F84 SUB W8, W8, 0x1
	0x03AF0F88 CMP W8, 0x7
	0x03AF0F8C B.HI 0x3AF12D8
	0x03AF0F90 ADRP X9, 0xFFFFFFFFFD0A7000
	0x03AF0F94 ADD X9, X9, 0xC05
	0x03AF0F98 ADR X10, 0x10
	0x03AF0F9C LDRB W11, [X9, X8, LSL]
	0x03AF0FA0 ADD X10, X10, X11, 0x2, LSL
	0x03AF0FA4 BR X10
	0x03AF0FA8 CBZ W20, 0x3AF1274
	0x03AF0FAC MOV W23, W31
	0x03AF0FB0 B 0x3AF12A0
	0x03AF0FB4 SUB W8, W19, 0x41
	0x03AF0FB8 AND W8, W8, 0xFFFF
	0x03AF0FBC CMP W8, 0x1A
	0x03AF0FC0 B.CC 0x3AF1644
	0x03AF0FC4 SUB W8, W19, 0x61
	0x03AF0FC8 AND W8, W8, 0xFFFF
	0x03AF0FCC CMP W8, 0x1A
	0x03AF0FD0 MOV W24, W19
	0x03AF0FD4 B.CC 0x3AF1648
	0x03AF0FD8 AND W8, W19, 0xFFFF
	0x03AF0FDC CMP W8, 0x30
	0x03AF0FE0 B.CC 0x3AF12D8
	0x03AF0FE4 CMP W8, 0x3A
	0x03AF0FE8 CSEL W24, W19, W31, CC
	0x03AF0FEC B 0x3AF1648
	0x03AF0FF0 CBZ X21, 0x3AF16C4
	0x03AF0FF4 LDR W8, [X21 + 0x10]
	0x03AF0FF8 SUBS W9, W8, 0x1
	0x03AF0FFC B.LT 0x3AF1318
	0x03AF1000 SUB W10, W20, 0x1
	0x03AF1004 CMP W10, W8
	0x03AF1008 CSEL W8, W10, W9, LT
	0x03AF100C CMP W10, 0x0
	0x03AF1010 CSEL W1, W31, W8, LT
	0x03AF1014 MOV X0, X21
	0x03AF1018 MOV X2, X31
	0x03AF101C BL 0x3222A1C
	0x03AF1020 LDR W8, [X21 + 0x10]
	0x03AF1024 MOV W23, W0
	0x03AF1028 SUBS W9, W8, 0x1
	0x03AF102C B.LT 0x3AF13B8
	0x03AF1030 CMP W8, W20
	0x03AF1034 CSEL W8, W20, W9, GT
	0x03AF1038 CMP W20, 0x0
	0x03AF103C CSEL W1, W31, W8, LT
	0x03AF1040 MOV X0, X21
	0x03AF1044 MOV X2, X31
	0x03AF1048 BL 0x3222A1C
	0x03AF104C LDR W8, [X21 + 0x10]
	0x03AF1050 MOV W22, W0
	0x03AF1054 SUBS W9, W8, 0x1
	0x03AF1058 B.LT 0x3AF13CC
	0x03AF105C ADD W10, W20, 0x1
	0x03AF1060 CMP W10, W8
	0x03AF1064 CSINC W8, W9, W20, GE
	0x03AF1068 CMP W10, 0x0
	0x03AF106C CSEL W1, W31, W8, LT
	0x03AF1070 MOV X0, X21
	0x03AF1074 MOV X2, X31
	0x03AF1078 BL 0x3222A1C
	0x03AF107C AND W25, W0, 0xFFFF
	0x03AF1080 B 0x3AF13D0
	0x03AF1084 ADRP X8, 0x604000
	0x03AF1088 LDR X8, [X8 + 0x170]
	0x03AF108C LDR X0, [X8]
	0x03AF1090 LDR W8, [X0 + 0xE0]
	0x03AF1094 CBNZ W8, 0x3AF109C
	0x03AF1098 BL 0x1C16DFC
	0x03AF109C ADD X0, X31, 0x0
	0x03AF10A0 MOV X1, X31
	0x03AF10A4 BL 0x330A76C
	0x03AF10A8 ADRP X8, 0x60A000
	0x03AF10AC LDR X8, [X8 + 0x600]
	0x03AF10B0 LDR X19, [X22 + 0x1A0]
	0x03AF10B4 MOV X20, X0
	0x03AF10B8 LDR X8, [X8]
	0x03AF10BC LDR W9, [X8 + 0xE0]
	0x03AF10C0 CBNZ W9, 0x3AF10CC
	0x03AF10C4 MOV X0, X8
	0x03AF10C8 BL 0x1C16DFC
	0x03AF10CC MOV X0, X20
	0x03AF10D0 MOV X1, X19
	0x03AF10D4 MOV X2, X31
	0x03AF10D8 BL 0x36325B8
	0x03AF10DC LDRH W8, [X31]
	0x03AF10E0 ANDS W31, W0, 0x1
	0x03AF10E4 CSEL W24, W8, W31, NE
	0x03AF10E8 B 0x3AF1648
	0x03AF10EC SUB W8, W19, 0x30
	0x03AF10F0 AND W8, W8, 0xFFFF
	0x03AF10F4 CMP W8, 0xA
	0x03AF10F8 B.CC 0x3AF1644
	0x03AF10FC SUB W8, W19, 0x41
	0x03AF1100 AND W8, W8, 0xFFFF
	0x03AF1104 CMP W8, 0x1A

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X0+312]
	008 Compare X8, 0
	009 JumpIfEqual {119}
	010 Move X8, [X8+872]
	011 Compare X8, 0
	012 JumpIfEqual {119}
	013 Move X22, [X8+56]
	014 Move W23, [X0+572]
	015 Move W21, W2
	016 Move X19, X0
	017 Move W20, W1
	018 Call TMP_InputField.get_compositionLength, X0
	019 Compare X22, 0
	020 JumpIfEqual {119}
	021 Move W8, [X22+24]
	022 Add W9, W0, W23
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move TEMP, X21
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {29}
	028 Move W21, W31
	029 Move X8, [X19+312]
	030 Compare X8, 0
	031 JumpIfEqual {119}
	032 Move X8, [X8+872]
	033 Compare X8, 0
	034 JumpIfEqual {119}
	035 Move X10, [X8+80]
	036 Compare X10, 0
	037 JumpIfEqual {119}
	038 Move W11, 376
	039 NotImplemented "Instruction SMADDL not yet implemented."
	040 NotImplemented "Instruction LDRSW not yet implemented."
	041 Move W11, [X10+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move W11, 92
	044 NotImplemented "Instruction MADD not yet implemented."
	045 Move W21, [X9+52]
	046 Subtract W9, W21, 1
	047 Move X8, [X8+56]
	048 Compare X8, 0
	049 JumpIfEqual {119}
	050 Move W10, [X8+24]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move W10, 376
	053 NotImplemented "Instruction UMADDL not yet implemented."
	054 Move W9, [X8+36]
	055 Move W8, [X8+40]
	056 Add W22, W8, W9
	057 Move TEMP, X20
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfEqual {76}
	061 Move [X19+564], W22
	062 Move TEMP, X22
	063 And TEMP, TEMP, -2147483648
	064 Compare TEMP, -2147483648
	065 JumpIfEqual {86}
	066 Move X8, [X19+544]
	067 Compare X8, 0
	068 JumpIfEqual {119}
	069 Move W8, [X8+16]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move W22, W31
	072 Move TEMP, X20
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {61}
	076 Move [X19+568], W22
	077 Move TEMP, X22
	078 And TEMP, TEMP, -2147483648
	079 Compare TEMP, -2147483648
	080 JumpIfEqual {98}
	081 Move X8, [X19+544]
	082 Compare X8, 0
	083 JumpIfEqual {119}
	084 Move W8, [X8+16]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move W8, W31
	087 Move W22, W8
	088 Move [X19+564], W8
	089 Move X0, X19
	090 Call TMP_InputField.get_compositionLength, X0
	091 Add W8, W0, W22
	092 Move [X19+568], W8
	093 Move X9, [X19+544]
	094 Compare X9, 0
	095 JumpIfEqual {119}
	096 Move W9, [X9+16]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move W8, W31
	099 Move [X19+568], W8
	100 Move W9, W31
	101 Move [X19+568], W9
	102 Add X1, X19, 572
	103 Move X0, X19
	104 Move [X19+572], W21
	105 Call TMP_InputField.ClampCaretPos, X0, X1
	106 Add X1, X19, 576
	107 Move X0, X19
	108 Move [X19+576], W21
	109 Call TMP_InputField.ClampCaretPos, X0, X1
	110 Move X0, X19
	111 Move X20, [X31+32]
	112 Move X19, [X31+40]
	113 Move X22, [X31+16]
	114 Move X21, [X31+24]
	115 Move X30, [X31+48]
	116 Move X23, [X31+56]
	117 Call TMP_InputField.UpdateLabel, X0
	118 Return 
	119 Call 0x1C17F20
	120 Call 0x1C17F28

Method: System.String get_clipboard()

Disassembly:
	0x03AF1108 B.CC 0x3AF1644
	0x03AF110C SUB W8, W19, 0x61
	0x03AF1110 AND W8, W8, 0xFFFF
	0x03AF1114 CMP W8, 0x1A
	0x03AF1118 B.CC 0x3AF1644
	0x03AF111C AND W8, W19, 0xFFFF
	0x03AF1120 CMP W8, 0x40
	0x03AF1124 B.NE 0x3AF1148
	0x03AF1128 CBZ X21, 0x3AF16C4
	0x03AF112C MOVZ W1, 0x40
	0x03AF1130 MOV X0, X21
	0x03AF1134 MOV X2, X31
	0x03AF1138 MOVZ W24, 0x40
	0x03AF113C BL 0x322BD98
	0x03AF1140 ADDS W31, W0, 0x1
	0x03AF1144 B.EQ 0x3AF1648
	0x03AF1148 ADRP X8, 0x668000
	0x03AF114C LDR X8, [X8 + 0x170]
	0x03AF1150 LDR X0, [X8]
	0x03AF1154 CBZ X0, 0x3AF16C4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x8F2000
	005 Move X20, 0x62F000
	006 Move W8, [X19+1529]
	007 Move X20, [X20+1480]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x62F000
	013 Move X0, [X0+1480]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1529], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X0, X31
	025 Move X30, [X31+32]
	026 Call GUIUtility.get_systemCopyBuffer
	027 Return X0

Method: System.Void set_clipboard(System.String value)

Disassembly:
	0x03AF1158 MOV W1, W19
	0x03AF115C MOV X2, X31
	0x03AF1160 BL 0x322BD98
	0x03AF1164 ADDS W31, W0, 0x1
	0x03AF1168 MOV W24, W19
	0x03AF116C B.NE 0x3AF1648
	0x03AF1170 AND W8, W19, 0xFFFF
	0x03AF1174 CMP W8, 0x2E
	0x03AF1178 B.NE 0x3AF12D8
	0x03AF117C CBZ X21, 0x3AF16C4
	0x03AF1180 LDR W8, [X21 + 0x10]
	0x03AF1184 SUBS W9, W8, 0x1
	0x03AF1188 B.LT 0x3AF169C
	0x03AF118C CMP W8, W20
	0x03AF1190 CSEL W8, W20, W9, GT
	0x03AF1194 CMP W20, 0x0
	0x03AF1198 CSEL W1, W31, W8, LT
	0x03AF119C MOV X0, X21
	0x03AF11A0 MOV X2, X31
	0x03AF11A4 BL 0x3222A1C
	0x03AF11A8 LDR W8, [X21 + 0x10]
	0x03AF11AC MOV W19, W0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8F2000
	006 Move X21, 0x62F000
	007 Move W8, [X20+1530]
	008 Move X21, [X21+1480]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x62F000
	015 Move X0, [X0+1480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1530], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call GUIUtility.set_systemCopyBuffer, X0
	031 Return 

Method: System.Boolean InPlaceEditing()

Disassembly:
	0x03AF11B0 SUBS W9, W8, 0x1
	0x03AF11B4 B.LT 0x3AF16A4
	0x03AF11B8 ADD W10, W20, 0x1
	0x03AF11BC CMP W10, W8
	0x03AF11C0 CSINC W8, W9, W20, GE
	0x03AF11C4 CMP W10, 0x0
	0x03AF11C8 CSEL W1, W31, W8, LT
	0x03AF11CC MOV X0, X21
	0x03AF11D0 MOV X2, X31
	0x03AF11D4 BL 0x3222A1C
	0x03AF11D8 AND W8, W0, 0xFFFF
	0x03AF11DC B 0x3AF16A8
	0x03AF11E0 ADRP X8, 0x602000
	0x03AF11E4 LDR X8, [X8 + 0x598]
	0x03AF11E8 LDR X20, [X22 + 0x2E0]
	0x03AF11EC LDR X0, [X8]
	0x03AF11F0 LDR W8, [X0 + 0xE0]
	0x03AF11F4 CBNZ W8, 0x3AF11FC
	0x03AF11F8 BL 0x1C16DFC
	0x03AF11FC MOV X0, X20
	0x03AF1200 MOV X1, X31
	0x03AF1204 MOV X2, X31
	0x03AF1208 BL 0x3C354F8
	0x03AF120C TBZ X0, 0x0, 0x3AF12D8
	0x03AF1210 LDR X0, [X22 + 0x2E0]
	0x03AF1214 CBZ X0, 0x3AF16C4
	0x03AF1218 LDR X8, [X0]
	0x03AF121C ADD X1, X31, 0x8
	0x03AF1220 ADD X2, X31, 0x4
	0x03AF1224 MOV W3, W19
	0x03AF1228 LDP X9, X4, [X8 + 0x178]
	0x03AF122C BLR X9
	0x03AF1230 LDR X9, [X31 + 0x8]
	0x03AF1234 MOV W24, W0
	0x03AF1238 ADD X10, X22, 0x234
	0x03AF123C STR X9, [X22 + 0x220]
	0x03AF1240 LDR W8, [X31 + 0x4]
	0x03AF1244 STR W8, [X22 + 0x234]
	0x03AF1248 TBNZ X8, 0x1F, 0x3AF13C4
	0x03AF124C CBZ X9, 0x3AF16C4
	0x03AF1250 LDR W11, [X9 + 0x10]
	0x03AF1254 CMP W11, W8
	0x03AF1258 B.GE 0x3AF1264
	0x03AF125C STR W11, [X10]
	0x03AF1260 LDR W11, [X9 + 0x10]
	0x03AF1264 CMP W11, W8
	0x03AF1268 CSEL W8, W11, W8, LT
	0x03AF126C STR W8, [X22 + 0x238]
	0x03AF1270 B 0x3AF1648
	0x03AF1274 CBZ X21, 0x3AF16C4
	0x03AF1278 LDR W8, [X21 + 0x10]
	0x03AF127C CMP W8, 0x1
	0x03AF1280 B.LT 0x3AF0FAC
	0x03AF1284 MOV X0, X21
	0x03AF1288 MOV W1, W31
	0x03AF128C MOV X2, X31
	0x03AF1290 BL 0x3222A1C
	0x03AF1294 AND W8, W0, 0xFFFF
	0x03AF1298 CMP W8, 0x2D
	0x03AF129C CSET W23, EQ
	0x03AF12A0 LDR W24, [X22 + 0x234]
	0x03AF12A4 MOV X0, X22
	0x03AF12A8 BL 0x3AEC28C
	0x03AF12AC ADDS W31, W0, W24
	0x03AF12B0 B.NE 0x3AF12C0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8F2000
	006 Move X20, 0x603000
	007 Move W8, [X21+1531]
	008 Move X20, [X20+2416]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x603000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1531], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call Application.get_platform
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X31
	033 Call Application.get_platform
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X0, [X20]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X31
	041 Call Application.get_platform
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X0, X31
	044 Call TouchScreenKeyboard.get_isSupported
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {82}
	049 Move W8, [X19+681]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CSET not yet implemented."
	052 Move X0, X31
	053 Call TouchScreenKeyboard.get_isSupported
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {64}
	058 Move X0, X19
	059 Call TMP_InputField.get_shouldHideSoftKeyboard, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {82}
	064 Move X0, X31
	065 Call TouchScreenKeyboard.get_isSupported
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {82}
	070 Move X0, X19
	071 Call TMP_InputField.get_shouldHideSoftKeyboard, X0
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {82}
	076 Move X0, X19
	077 Call TMP_InputField.get_shouldHideMobileInput, X0
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {88}
	082 Move W0, 1
	083 Move X20, [X31+16]
	084 Move X19, [X31+24]
	085 Move X30, [X31+32]
	086 Move X21, [X31+40]
	087 Return X0
	088 Move W0, W31

Method: System.Void UpdateStringPositionFromKeyboard()

Disassembly:
	0x03AF12B4 MOVZ W8, 0x1
	0x03AF12B8 CBNZ W23, 0x3AF12D8
	0x03AF12BC B 0x3AF12E0
	0x03AF12C0 LDR W24, [X22 + 0x238]
	0x03AF12C4 MOV X0, X22
	0x03AF12C8 BL 0x3AEC28C
	0x03AF12CC ADDS W31, W0, W24
	0x03AF12D0 CSET W8, EQ
	0x03AF12D4 CBZ W23, 0x3AF12E0
	0x03AF12D8 MOV W24, W31
	0x03AF12DC B 0x3AF1648
	0x03AF12E0 SUB W9, W19, 0x30
	0x03AF12E4 AND W9, W9, 0xFFFF
	0x03AF12E8 CMP W9, 0xA
	0x03AF12EC MOV W24, W19
	0x03AF12F0 B.CC 0x3AF1648
	0x03AF12F4 AND W9, W19, 0xFFFF
	0x03AF12F8 CMP W9, 0x2D
	0x03AF12FC B.NE 0x3AF1328
	0x03AF1300 CMP W20, 0x0
	0x03AF1304 CSET W9, EQ
	0x03AF1308 ORR W8, W8, W9, 0x0
	0x03AF130C CBZ W8, 0x3AF1328
	0x03AF1310 MOVZ W24, 0x2D
	0x03AF1314 B 0x3AF1648
	0x03AF1318 MOVZ W25, 0xA
	0x03AF131C MOVZ W22, 0x20
	0x03AF1320 MOVZ W23, 0x20
	0x03AF1324 B 0x3AF13D0
	0x03AF1328 MOV X0, X31
	0x03AF132C BL 0x33E3C68
	0x03AF1330 CBZ X0, 0x3AF16C4
	0x03AF1334 MOV X1, X31
	0x03AF1338 BL 0x33E6EAC
	0x03AF133C CBZ X0, 0x3AF16C4
	0x03AF1340 LDR X8, [X0]
	0x03AF1344 LDR X9, [X8 + 0x218]
	0x03AF1348 LDR X1, [X8 + 0x220]
	0x03AF134C BLR X9
	0x03AF1350 CBZ X0, 0x3AF16C4
	0x03AF1354 ADRP X8, 0x60B000
	0x03AF1358 LDR X8, [X8 + 0x9E8]
	0x03AF135C LDR X20, [X0 + 0x38]
	0x03AF1360 LDR X8, [X8]
	0x03AF1364 LDR W9, [X8 + 0xE0]
	0x03AF1368 CBNZ W9, 0x3AF1374
	0x03AF136C MOV X0, X8
	0x03AF1370 BL 0x1C16DFC
	0x03AF1374 MOV X0, X20
	0x03AF1378 MOV X1, X31
	0x03AF137C BL 0x331E9EC
	0x03AF1380 AND W8, W0, 0xFFFF
	0x03AF1384 CMP W8, W19, UXTH
	0x03AF1388 B.NE 0x3AF12D8
	0x03AF138C LDR W8, [X22 + 0x198]
	0x03AF1390 CMP W8, 0x3
	0x03AF1394 B.NE 0x3AF12D8
	0x03AF1398 CBZ X21, 0x3AF16C4
	0x03AF139C MOV X0, X21
	0x03AF13A0 MOV X1, X20
	0x03AF13A4 MOV X2, X31
	0x03AF13A8 BL 0x322BD1C
	0x03AF13AC ANDS W31, W0, 0x1
	0x03AF13B0 CSEL W0, W31, W19, NE
	0x03AF13B4 B 0x3AF164C
	0x03AF13B8 MOVZ W25, 0xA
	0x03AF13BC MOVZ W22, 0x20
	0x03AF13C0 B 0x3AF13D0
	0x03AF13C4 STR X31, [X10]
	0x03AF13C8 B 0x3AF1648
	0x03AF13CC MOVZ W25, 0xA
	0x03AF13D0 ADRP X24, 0x604000
	0x03AF13D4 LDR X24, [X24 + 0x170]
	0x03AF13D8 LDR X0, [X24]
	0x03AF13DC LDR W8, [X0 + 0xE0]
	0x03AF13E0 CBNZ W8, 0x3AF13E8
	0x03AF13E4 BL 0x1C16DFC
	0x03AF13E8 MOV W0, W19
	0x03AF13EC MOV X1, X31
	0x03AF13F0 BL 0x331A888
	0x03AF13F4 TBZ X0, 0x0, 0x3AF1458
	0x03AF13F8 LDR X0, [X24]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, X0
	009 Move X0, [X0+256]
	010 Compare X0, 0
	011 JumpIfEqual {89}
	012 Move X1, X31
	013 Call TouchScreenKeyboard.get_selection, X0
	014 Move X21, X0
	015 Move [X31+8], X0
	016 Add X0, X31, 8
	017 Move X1, X31
	018 Call RangeInt.get_end, X0
	019 Move W22, [X19+564]
	020 Move W20, W0
	021 Move X0, X19
	022 Call TMP_InputField.get_compositionLength, X0
	023 Add W22, W0, W22
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move [X19+564], W21
	026 Move TEMP, X21
	027 And TEMP, TEMP, -2147483648
	028 Compare TEMP, -2147483648
	029 JumpIfEqual {36}
	030 Move X8, [X19+544]
	031 Compare X8, 0
	032 JumpIfEqual {89}
	033 Move W8, [X8+16]
	034 Move W23, W21
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W8, W31
	037 Move W23, W8
	038 Move [X19+564], W8
	039 Move X0, X19
	040 Call TMP_InputField.get_compositionLength, X0
	041 Add W1, W0, W23
	042 Move X0, X19
	043 Call TMP_InputField.GetCaretPositionFromStringIndex, X0, X1
	044 Add X1, X19, 572
	045 Move [X19+572], W0
	046 Move X0, X19
	047 Call TMP_InputField.ClampCaretPos, X0, X1
	048 Move W23, [X19+568]
	049 Move X0, X19
	050 Call TMP_InputField.get_compositionLength, X0
	051 Add W8, W0, W23
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move [X19+568], W20
	055 Move TEMP, X20
	056 And TEMP, TEMP, -2147483648
	057 Compare TEMP, -2147483648
	058 JumpIfEqual {64}
	059 Move X8, [X19+544]
	060 Compare X8, 0
	061 JumpIfEqual {89}
	062 Move W8, [X8+16]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move W8, W31
	065 Move W20, W8
	066 Move [X19+568], W8
	067 Move X0, X19
	068 Call TMP_InputField.get_compositionLength, X0
	069 Add W1, W0, W20
	070 Move X0, X19
	071 Call TMP_InputField.GetCaretPositionFromStringIndex, X0, X1
	072 Add X1, X19, 576
	073 Move [X19+576], W0
	074 Move X0, X19
	075 Call TMP_InputField.ClampCaretPos, X0, X1
	076 Move X0, X31
	077 Call Time.get_unscaledTime
	078 Move X0, X19
	079 Move [X19+640], S0
	080 Call TMP_InputField.UpdateLabel, X0
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X30, [X31+16]
	086 Move X23, [X31+24]
	087 Add X31, X31, 64
	088 Return 
	089 Call 0x1C17F20

Method: System.Void LateUpdate()

Disassembly:
	0x03AF13FC LDR W8, [X0 + 0xE0]
	0x03AF1400 CBNZ W8, 0x3AF1408
	0x03AF1404 BL 0x1C16DFC
	0x03AF1408 MOV W0, W19
	0x03AF140C MOV X1, X31
	0x03AF1410 BL 0x331AA58
	0x03AF1414 MOV W8, W0
	0x03AF1418 LDR X0, [X24]
	0x03AF141C CMP W20, 0x0
	0x03AF1420 CSET W10, EQ
	0x03AF1424 AND W21, W8, W10, 0x0
	0x03AF1428 LDR W9, [X0 + 0xE0]
	0x03AF142C CBNZ W9, 0x3AF1434
	0x03AF1430 BL 0x1C16DFC
	0x03AF1434 CBZ W21, 0x3AF1564
	0x03AF1438 MOV W0, W19
	0x03AF143C LDP X20, X19, [X31 + 0x40]
	0x03AF1440 LDP X22, X21, [X31 + 0x30]
	0x03AF1444 LDP X24, X23, [X31 + 0x20]
	0x03AF1448 LDP X30, X25, [X31 + 0x10]
	0x03AF144C MOV X1, X31
	0x03AF1450 ADD X31, X31, 0x50
	0x03AF1454 B 0x331ACB8
	0x03AF1458 CMP W25, 0x27
	0x03AF145C B.EQ 0x3AF149C
	0x03AF1460 AND W8, W22, 0xFFFF
	0x03AF1464 CMP W8, 0x27
	0x03AF1468 B.EQ 0x3AF149C
	0x03AF146C CMP W8, 0x20
	0x03AF1470 B.EQ 0x3AF149C
	0x03AF1474 AND W8, W19, 0xFFFF
	0x03AF1478 CMP W8, 0x27
	0x03AF147C B.NE 0x3AF149C
	0x03AF1480 ADRP X8, 0x60A000
	0x03AF1484 LDR X8, [X8 + 0x9B0]
	0x03AF1488 MOV X0, X21
	0x03AF148C MOV X2, X31
	0x03AF1490 LDR X1, [X8]
	0x03AF1494 BL 0x322BD1C
	0x03AF1498 TBZ X0, 0x0, 0x3AF1664
	0x03AF149C LDR X0, [X24]
	0x03AF14A0 LDR W8, [X0 + 0xE0]
	0x03AF14A4 CBNZ W8, 0x3AF14AC
	0x03AF14A8 BL 0x1C16DFC
	0x03AF14AC MOV W0, W23
	0x03AF14B0 MOV X1, X31
	0x03AF14B4 BL 0x331A888
	0x03AF14B8 AND W8, W22, 0xFFFF
	0x03AF14BC CMP W8, 0x2D
	0x03AF14C0 B.EQ 0x3AF14D8
	0x03AF14C4 TBZ X0, 0x0, 0x3AF14D8
	0x03AF14C8 AND W8, W19, 0xFFFF
	0x03AF14CC CMP W8, 0x2D
	0x03AF14D0 MOV W24, W19
	0x03AF14D4 B.EQ 0x3AF1648
	0x03AF14D8 AND W9, W19, 0xFFFF
	0x03AF14DC CMP W9, 0x2D
	0x03AF14E0 AND W10, W23, 0xFFFF
	0x03AF14E4 CSET W8, EQ
	0x03AF14E8 CMP W9, 0x20
	0x03AF14EC CSET W9, EQ
	0x03AF14F0 CMP W10, 0x27
	0x03AF14F4 MOV W24, W31
	0x03AF14F8 B.EQ 0x3AF1648
	0x03AF14FC CMP W10, 0x20
	0x03AF1500 B.EQ 0x3AF1648
	0x03AF1504 CBZ W20, 0x3AF1648
	0x03AF1508 ORR W8, W9, W8, 0x0
	0x03AF150C CBZ W8, 0x3AF1648
	0x03AF1510 CMP W25, 0x27
	0x03AF1514 AND W10, W23, 0xFFFF
	0x03AF1518 CSET W8, EQ
	0x03AF151C CMP W25, 0x20
	0x03AF1520 CSET W9, NE
	0x03AF1524 CMP W10, 0x2D
	0x03AF1528 MOV W24, W31
	0x03AF152C B.EQ 0x3AF1648
	0x03AF1530 AND W10, W22, 0xFFFF
	0x03AF1534 CMP W10, 0x20
	0x03AF1538 B.EQ 0x3AF1648
	0x03AF153C CMP W10, 0x27
	0x03AF1540 B.EQ 0x3AF1648
	0x03AF1544 AND W10, W22, 0xFFFF
	0x03AF1548 CMP W10, 0x2D
	0x03AF154C B.EQ 0x3AF1648
	0x03AF1550 EOR W8, W8, W9, 0x0
	0x03AF1554 CBZ W8, 0x3AF1648
	0x03AF1558 CMP W25, 0x2D
	0x03AF155C CSEL W24, W31, W19, EQ
	0x03AF1560 B 0x3AF1648
	0x03AF1564 MOV W0, W19
	0x03AF1568 MOV X1, X31
	0x03AF156C BL 0x331AA58
	0x03AF1570 TBZ X0, 0x0, 0x3AF159C
	0x03AF1574 AND W8, W23, 0xFFFF
	0x03AF1578 CMP W8, 0x2D
	0x03AF157C B.EQ 0x3AF1588
	0x03AF1580 CMP W8, 0x20
	0x03AF1584 B.NE 0x3AF159C
	0x03AF1588 LDR X0, [X24]
	0x03AF158C LDR W8, [X0 + 0xE0]
	0x03AF1590 CBNZ W8, 0x3AF1438
	0x03AF1594 BL 0x1C16DFC
	0x03AF1598 B 0x3AF1438
	0x03AF159C LDR X0, [X24]
	0x03AF15A0 LDR W8, [X0 + 0xE0]
	0x03AF15A4 CBNZ W8, 0x3AF15AC
	0x03AF15A8 BL 0x1C16DFC
	0x03AF15AC MOV W0, W19
	0x03AF15B0 MOV X1, X31
	0x03AF15B4 BL 0x331A99C
	0x03AF15B8 AND W8, W23, 0xFFFF
	0x03AF15BC CMP W8, 0x2D
	0x03AF15C0 B.EQ 0x3AF1604
	0x03AF15C4 CMP W8, 0x27
	0x03AF15C8 B.EQ 0x3AF1604
	0x03AF15CC AND W8, W23, 0xFFFF
	0x03AF15D0 CMP W8, 0x20
	0x03AF15D4 B.EQ 0x3AF1604
	0x03AF15D8 CMP W20, 0x1
	0x03AF15DC B.LT 0x3AF1604
	0x03AF15E0 TBZ X0, 0x0, 0x3AF1604
	0x03AF15E4 LDR X0, [X24]
	0x03AF15E8 LDR W8, [X0 + 0xE0]
	0x03AF15EC CBNZ W8, 0x3AF15F4
	0x03AF15F0 BL 0x1C16DFC
	0x03AF15F4 MOV W0, W23
	0x03AF15F8 MOV X1, X31
	0x03AF15FC BL 0x331AA58
	0x03AF1600 TBZ X0, 0x0, 0x3AF166C
	0x03AF1604 LDR X0, [X24]
	0x03AF1608 LDR W8, [X0 + 0xE0]
	0x03AF160C CBNZ W8, 0x3AF1614
	0x03AF1610 BL 0x1C16DFC
	0x03AF1614 MOV W0, W19
	0x03AF1618 MOV X1, X31
	0x03AF161C BL 0x331A99C
	0x03AF1620 TBZ X0, 0x0, 0x3AF1644
	0x03AF1624 LDR X0, [X24]
	0x03AF1628 LDR W8, [X0 + 0xE0]
	0x03AF162C CBNZ W8, 0x3AF1634
	0x03AF1630 BL 0x1C16DFC
	0x03AF1634 MOV W0, W22
	0x03AF1638 MOV X1, X31
	0x03AF163C BL 0x331A99C
	0x03AF1640 TBNZ X0, 0x0, 0x3AF12D8
	0x03AF1644 MOV W24, W19
	0x03AF1648 MOV W0, W24
	0x03AF164C LDP X20, X19, [X31 + 0x40]
	0x03AF1650 LDP X22, X21, [X31 + 0x30]
	0x03AF1654 LDP X24, X23, [X31 + 0x20]
	0x03AF1658 LDP X30, X25, [X31 + 0x10]
	0x03AF165C ADD X31, X31, 0x50
	0x03AF1660 RET
	0x03AF1664 MOVZ W24, 0x27
	0x03AF1668 B 0x3AF1648
	0x03AF166C LDR X0, [X24]
	0x03AF1670 LDR W8, [X0 + 0xE0]
	0x03AF1674 CBNZ W8, 0x3AF167C
	0x03AF1678 BL 0x1C16DFC
	0x03AF167C MOV W0, W19
	0x03AF1680 LDP X20, X19, [X31 + 0x40]
	0x03AF1684 LDP X22, X21, [X31 + 0x30]
	0x03AF1688 LDP X24, X23, [X31 + 0x20]
	0x03AF168C LDP X30, X25, [X31 + 0x10]
	0x03AF1690 MOV X1, X31
	0x03AF1694 ADD X31, X31, 0x50
	0x03AF1698 B 0x331AE30
	0x03AF169C MOVZ W24, 0x2E
	0x03AF16A0 B 0x3AF1648
	0x03AF16A4 MOVZ W8, 0xA
	0x03AF16A8 AND W9, W19, 0xFFFF
	0x03AF16AC CMP W9, 0x2E
	0x03AF16B0 B.EQ 0x3AF12D8
	0x03AF16B4 CMP W8, 0x2E
	0x03AF16B8 MOVZ W8, 0x2E
	0x03AF16BC CSEL W0, W31, W8, EQ
	0x03AF16C0 B 0x3AF164C
	0x03AF16C4 BL 0x1C16F20
	0x03AF16C8 STP X30, X19, [X31 - 0x10]!
	0x03AF16CC MOV X19, X0
	0x03AF16D0 BL 0x3AECBA4
	0x03AF16D4 MOV X0, X19
	0x03AF16D8 LDP X30, X19, [X31], #0x10
	0x03AF16DC B 0x3AED028
	0x03AF16E0 STP X30, X21, [X31 - 0x20]!
	0x03AF16E4 STP X20, X19, [X31 + 0x10]
	0x03AF16E8 ADRP X21, 0x8F1000
	0x03AF16EC LDRB W8, [X21 + 0x5FD]
	0x03AF16F0 MOV X20, X1
	0x03AF16F4 MOV X19, X0
	0x03AF16F8 TBNZ X8, 0x0, 0x3AF1710
	0x03AF16FC ADRP X0, 0x602000
	0x03AF1700 LDR X0, [X0 + 0x598]
	0x03AF1704 BL 0x1C16CF4
	0x03AF1708 MOVZ W8, 0x1
	0x03AF170C STRB W8, [X21 + 0x5FD]
	0x03AF1710 LDR X8, [X19]
	0x03AF1714 MOV X0, X19
	0x03AF1718 LDP X9, X1, [X8 + 0x1C8]
	0x03AF171C BLR X9
	0x03AF1720 TBZ X0, 0x0, 0x3AF1794
	0x03AF1724 LDR X8, [X19]
	0x03AF1728 MOV X0, X19
	0x03AF172C LDR X9, [X8 + 0x2B8]
	0x03AF1730 LDR X1, [X8 + 0x2C0]
	0x03AF1734 BLR X9
	0x03AF1738 TBZ X0, 0x0, 0x3AF1794
	0x03AF173C CBZ X20, 0x3AF17B4
	0x03AF1740 LDR W8, [X20 + 0x148]
	0x03AF1744 CBNZ W8, 0x3AF1794
	0x03AF1748 ADRP X8, 0x602000
	0x03AF174C LDR X8, [X8 + 0x598]
	0x03AF1750 LDR X20, [X19 + 0x138]
	0x03AF1754 LDR X0, [X8]
	0x03AF1758 LDR W8, [X0 + 0xE0]
	0x03AF175C CBNZ W8, 0x3AF1764
	0x03AF1760 BL 0x1C16DFC
	0x03AF1764 MOV X0, X20
	0x03AF1768 MOV X1, X31
	0x03AF176C MOV X2, X31
	0x03AF1770 BL 0x3C354F8
	0x03AF1774 TBZ X0, 0x0, 0x3AF1794
	0x03AF1778 LDR X8, [X19 + 0x100]
	0x03AF177C CBZ X8, 0x3AF178C
	0x03AF1780 MOV X0, X19
	0x03AF1784 BL 0x3AEC7B0
	0x03AF1788 TBZ X0, 0x0, 0x3AF17A4
	0x03AF178C MOVZ W0, 0x1
	0x03AF1790 B 0x3AF1798
	0x03AF1794 MOV W0, W31
	0x03AF1798 LDP X20, X19, [X31 + 0x10]
	0x03AF179C LDP X30, X21, [X31], #0x20
	0x03AF17A0 RET
	0x03AF17A4 MOV X0, X19
	0x03AF17A8 LDP X20, X19, [X31 + 0x10]
	0x03AF17AC LDP X30, X21, [X31], #0x20
	0x03AF17B0 B 0x3AEC66C
	0x03AF17B4 BL 0x1C16F20
	0x03AF17B8 STP X30, X19, [X31 - 0x10]!
	0x03AF17BC MOV X19, X0
	0x03AF17C0 BL 0x3AF16E0
	0x03AF17C4 TBZ X0, 0x0, 0x3AF17D0
	0x03AF17C8 MOVZ W8, 0x1
	0x03AF17CC STRB W8, [X19 + 0x272]
	0x03AF17D0 LDP X30, X19, [X31], #0x10
	0x03AF17D4 RET
	0x03AF17D8 STP D9, D8, [X31 - 0x40]!
	0x03AF17DC STR X30, [X31 + 0x10]
	0x03AF17E0 STP X22, X21, [X31 + 0x20]
	0x03AF17E4 STP X20, X19, [X31 + 0x30]
	0x03AF17E8 ADRP X21, 0x8F1000
	0x03AF17EC LDRB W8, [X21 + 0x5FE]
	0x03AF17F0 MOV X19, X1
	0x03AF17F4 MOV X20, X0
	0x03AF17F8 TBNZ X8, 0x0, 0x3AF181C
	0x03AF17FC ADRP X0, 0x658000
	0x03AF1800 LDR X0, [X0 + 0x6B8]
	0x03AF1804 BL 0x1C16CF4
	0x03AF1808 ADRP X0, 0x667000
	0x03AF180C LDR X0, [X0 + 0xBB8]
	0x03AF1810 BL 0x1C16CF4
	0x03AF1814 MOVZ W8, 0x1
	0x03AF1818 STRB W8, [X21 + 0x5FE]
	0x03AF181C MOV X0, X20
	0x03AF1820 MOV X1, X19
	0x03AF1824 STR W31, [X31 + 0x1C]
	0x03AF1828 BL 0x3AF16E0
	0x03AF182C TBZ X0, 0x0, 0x3AF1A48
	0x03AF1830 CBZ X19, 0x3AF1A68
	0x03AF1834 LDR X21, [X20 + 0x138]
	0x03AF1838 LDR V8, [X19 + 0x104]
	0x03AF183C LDR V9, [X19 + 0x108]
	0x03AF1840 MOV X0, X19
	0x03AF1844 MOV X1, X31
	0x03AF1848 BL 0x3E4F314
	0x03AF184C ADRP X8, 0x667000
	0x03AF1850 LDR X8, [X8 + 0xBB8]
	0x03AF1854 MOV X22, X0
	0x03AF1858 LDR X8, [X8]
	0x03AF185C LDR W9, [X8 + 0xE0]
	0x03AF1860 CBNZ W9, 0x3AF186C
	0x03AF1864 MOV X0, X8
	0x03AF1868 BL 0x1C16DFC
	0x03AF186C FMOV S2, W31
	0x03AF1870 ADD X2, X31, 0x1C
	0x03AF1874 MOV X0, X21
	0x03AF1878 MOV V0.16B, V8.16B
	0x03AF187C MOV V1.16B, V9.16B
	0x03AF1880 MOV X1, X22
	0x03AF1884 MOV X3, X31
	0x03AF1888 BL 0x3B1D930
	0x03AF188C LDR W8, [X31 + 0x1C]
	0x03AF1890 LDRB W9, [X20 + 0x2D9]
	0x03AF1894 CMP W8, 0x1
	0x03AF1898 CBZ W9, 0x3AF18D4
	0x03AF189C B.NE 0x3AF1938
	0x03AF18A0 LDR X8, [X20 + 0x138]
	0x03AF18A4 CBZ X8, 0x3AF1A68
	0x03AF18A8 LDR X8, [X8 + 0x368]
	0x03AF18AC CBZ X8, 0x3AF1A68
	0x03AF18B0 LDR X8, [X8 + 0x38]
	0x03AF18B4 CBZ X8, 0x3AF1A68
	0x03AF18B8 LDR W9, [X8 + 0x18]
	0x03AF18BC CMP W0, W9
	0x03AF18C0 B.CS 0x3AF1A64
	0x03AF18C4 MOVZ W9, 0x178
	0x03AF18C8 SMADDL X8, X0, X9, X8
	0x03AF18CC LDR W8, [X8 + 0x24]
	0x03AF18D0 B 0x3AF1914
	0x03AF18D4 B.NE 0x3AF1938
	0x03AF18D8 LDR X8, [X20 + 0x138]
	0x03AF18DC CBZ X8, 0x3AF1A68
	0x03AF18E0 LDR X8, [X8 + 0x368]
	0x03AF18E4 CBZ X8, 0x3AF1A68
	0x03AF18E8 LDR X8, [X8 + 0x38]
	0x03AF18EC CBZ X8, 0x3AF1A68
	0x03AF18F0 CBZ W0, 0x3AF1A5C
	0x03AF18F4 LDR W10, [X8 + 0x18]
	0x03AF18F8 SUB W9, W0, 0x1
	0x03AF18FC CMP W9, W10
	0x03AF1900 B.CS 0x3AF1A64
	0x03AF1904 MOVZ W10, 0x178
	0x03AF1908 SMADDL X8, X9, X10, X8
	0x03AF190C LDP W9, W8, [X8 + 0x24]
	0x03AF1910 ADD W8, W8, W9
	0x03AF1914 STR W8, [X20 + 0x238]
	0x03AF1918 TBNZ X8, 0x1F, 0x3AF197C
	0x03AF191C LDR X9, [X20 + 0x220]
	0x03AF1920 CBZ X9, 0x3AF1A68
	0x03AF1924 LDR W9, [X9 + 0x10]
	0x03AF1928 CMP W9, W8
	0x03AF192C B.GE 0x3AF1980
	0x03AF1930 STR W9, [X20 + 0x238]
	0x03AF1934 B 0x3AF1980
	0x03AF1938 CMP W8, 0x2
	0x03AF193C B.NE 0x3AF1980
	0x03AF1940 LDR X8, [X20 + 0x138]
	0x03AF1944 CBZ X8, 0x3AF1A68
	0x03AF1948 LDR X8, [X8 + 0x368]
	0x03AF194C CBZ X8, 0x3AF1A68
	0x03AF1950 LDR X8, [X8 + 0x38]
	0x03AF1954 CBZ X8, 0x3AF1A68
	0x03AF1958 LDR W9, [X8 + 0x18]
	0x03AF195C CMP W0, W9
	0x03AF1960 B.CS 0x3AF1A64
	0x03AF1964 MOVZ W9, 0x178
	0x03AF1968 SMADDL X8, X0, X9, X8
	0x03AF196C LDP W9, W8, [X8 + 0x24]
	0x03AF1970 ADDS W8, W8, W9
	0x03AF1974 STR W8, [X20 + 0x238]
	0x03AF1978 B.PL 0x3AF191C
	0x03AF197C STR W31, [X20 + 0x238]
	0x03AF1980 LDR W21, [X20 + 0x238]
	0x03AF1984 MOV X0, X20
	0x03AF1988 BL 0x3AEC28C
	0x03AF198C ADD W1, W0, W21
	0x03AF1990 MOV X0, X20
	0x03AF1994 BL 0x3AEF8F4
	0x03AF1998 ADD X1, X20, 0x240
	0x03AF199C STR W0, [X20 + 0x240]
	0x03AF19A0 MOV X0, X20
	0x03AF19A4 BL 0x3AEE318
	0x03AF19A8 MOV X0, X20
	0x03AF19AC BL 0x3AED1E0
	0x03AF19B0 LDR X21, [X20 + 0x110]
	0x03AF19B4 LDR V8, [X19 + 0x104]
	0x03AF19B8 LDR V9, [X19 + 0x108]
	0x03AF19BC MOV X0, X19
	0x03AF19C0 MOV X1, X31
	0x03AF19C4 BL 0x3E4F314
	0x03AF19C8 ADRP X8, 0x658000
	0x03AF19CC LDR X8, [X8 + 0x6B8]
	0x03AF19D0 MOV X22, X0
	0x03AF19D4 LDR X8, [X8]
	0x03AF19D8 LDR W9, [X8 + 0xE0]
	0x03AF19DC CBNZ W9, 0x3AF19E8
	0x03AF19E0 MOV X0, X8
	0x03AF19E4 BL 0x1C16DFC
	0x03AF19E8 MOV X0, X21
	0x03AF19EC MOV V0.16B, V8.16B
	0x03AF19F0 MOV V1.16B, V9.16B
	0x03AF19F4 MOV X1, X22
	0x03AF19F8 MOV X2, X31
	0x03AF19FC BL 0x3E2333C
	0x03AF1A00 ORN W8, W31, W0, 0x0
	0x03AF1A04 AND W8, W8, 0x1
	0x03AF1A08 STRB W8, [X20 + 0x273]
	0x03AF1A0C TBNZ X0, 0x0, 0x3AF1A38
	0x03AF1A10 LDR X8, [X20 + 0x288]
	0x03AF1A14 CBNZ X8, 0x3AF1A38
	0x03AF1A18 MOV X0, X20
	0x03AF1A1C MOV X1, X19
	0x03AF1A20 BL 0x3AF1A6C
	0x03AF1A24 MOV X1, X0
	0x03AF1A28 MOV X0, X20
	0x03AF1A2C MOV X2, X31
	0x03AF1A30 BL 0x3C366FC
	0x03AF1A34 STR X0, [X20 + 0x288]
	0x03AF1A38 LDR X8, [X19]
	0x03AF1A3C MOV X0, X19
	0x03AF1A40 LDP X9, X1, [X8 + 0x188]
	0x03AF1A44 BLR X9
	0x03AF1A48 LDP X20, X19, [X31 + 0x30]
	0x03AF1A4C LDP X22, X21, [X31 + 0x20]
	0x03AF1A50 LDR X30, [X31 + 0x10]
	0x03AF1A54 LDP D9, D8, [X31], #0x40
	0x03AF1A58 RET
	0x03AF1A5C LDR W9, [X8 + 0x18]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x8F2000
	009 Move W8, [X20+1532]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0x603000
	016 Move X0, [X0+2416]
	017 Call 0x1C17CF4
	018 Move X0, 0x605000
	019 Move X0, [X0+368]
	020 Call 0x1C17CF4
	021 Move X0, 0x62A000
	022 Move X0, [X0+3576]
	023 Call 0x1C17CF4
	024 Move X0, 0x669000
	025 Move X0, [X0+352]
	026 Call 0x1C17CF4
	027 Move X0, 0x603000
	028 Move X0, [X0+1432]
	029 Call 0x1C17CF4
	030 Move X0, 0x603000
	031 Move X0, [X0+2440]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+1532], W8
	035 NotImplemented "Instruction STRH not yet implemented."
	036 Move W9, [X19+625]
	037 Move W8, [X19+624]
	038 Compare W9, 0
	039 JumpIfEqual {43}
	040 Compare W8, 0
	041 JumpIfEqual {117}
	042 Move [X19+625], W31
	043 Compare W8, 0
	044 JumpIfEqual {120}
	045 Move X0, X19
	046 Call TMP_InputField.InPlaceEditing, X0
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {56}
	051 Call TMP_InputField.isKeyboardUsingEvents, X0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {471}
	056 Move W8, [X19+624]
	057 Compare W8, 0
	058 JumpIfEqual {471}
	059 Move X0, X19
	060 Call TMP_InputField.AssignPositioningIfNeeded, X0
	061 Move X0, [X19+256]
	062 Compare X0, 0
	063 JumpIfEqual {465}
	064 Move X1, X31
	065 Call TouchScreenKeyboard.get_status, X0
	066 Move X8, [X19+256]
	067 Compare W0, 0
	068 JumpIfEqual {178}
	069 Compare X8, 0
	070 JumpIfEqual {465}
	071 Move W9, [X19+560]
	072 Compare W9, 0
	073 JumpIfNotEqual {84}
	074 Move X0, X8
	075 Move X1, X31
	076 Call TouchScreenKeyboard.get_text, X0
	077 Move X1, X0
	078 Move W2, 1
	079 Move X0, X19
	080 Call TMP_InputField.SetText, X0, X1, X2
	081 Move X8, [X19+256]
	082 Compare X8, 0
	083 JumpIfEqual {479}
	084 Move X0, X8
	085 Move X1, X31
	086 Call TouchScreenKeyboard.get_status, X0
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X0, X19
	089 Call TMP_InputField.SendTouchScreenKeyboardStatusChanged, X0
	090 Move X0, [X19+256]
	091 Compare X0, 0
	092 JumpIfEqual {479}
	093 Move X1, X31
	094 Call TouchScreenKeyboard.get_status, X0
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move W8, 1
	097 Move X0, X19
	098 Move [X19+716], W8
	099 Move [X19+664], W8
	100 Call TMP_InputField.SendTouchScreenKeyboardStatusChanged, X0
	101 Move X0, [X19+256]
	102 Compare X0, 0
	103 JumpIfEqual {479}
	104 Move X1, X31
	105 Call TouchScreenKeyboard.get_status, X0
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move X8, [X19]
	108 Move W9, 1
	109 Move [X19+716], W9
	110 Move X0, X19
	111 Move X9, [X8+1480]
	112 Move X2, [X8+1488]
	113 Move X1, X31
	114 NotImplemented "Instruction BLR not yet implemented."
	115 Move X0, X19
	116 Call TMP_InputField.SendTouchScreenKeyboardStatusChanged, X0
	117 Move X0, X19
	118 Call TMP_InputField.ActivateInputFieldInternal, X0
	119 Move [X19+625], W31
	120 Move W8, [X19+715]
	121 Compare W8, 0
	122 JumpIfEqual {45}
	123 Move X21, 0x62A000
	124 Move X21, [X21+3576]
	125 Move X0, [X21]
	126 Move W8, [X0+224]
	127 Compare W8, 0
	128 JumpIfNotEqual {130}
	129 Call 0x1C17DFC
	130 Move X0, X31
	131 Call EventSystem.get_current
	132 Move X22, 0x603000
	133 Move X22, [X22+1432]
	134 Move X20, X0
	135 Move X8, [X22]
	136 Move W9, [X8+224]
	137 Compare W9, 0
	138 JumpIfNotEqual {141}
	139 Move X0, X8
	140 Call 0x1C17DFC
	141 Move X0, X20
	142 Move X1, X31
	143 Move X2, X31
	144 Call Object.op_Inequality, X0, X1
	145 Move X20, X31
	146 Move TEMP, X0
	147 And TEMP, TEMP, 1
	148 Compare TEMP, 1
	149 JumpIfNotEqual {160}
	150 Move X0, [X21]
	151 Move W8, [X0+224]
	152 Compare W8, 0
	153 JumpIfNotEqual {155}
	154 Call 0x1C17DFC
	155 Move X0, X31
	156 Call EventSystem.get_current
	157 Compare X0, 0
	158 JumpIfEqual {479}
	159 Move X20, [X0+64]
	160 Move X0, [X22]
	161 Move W8, [X0+224]
	162 Compare W8, 0
	163 JumpIfNotEqual {165}
	164 Call 0x1C17DFC
	165 Move X0, X20
	166 Move X1, X31
	167 Move X2, X31
	168 Call Object.op_Equality, X0, X1
	169 Move TEMP, X0
	170 And TEMP, TEMP, 1
	171 Compare TEMP, 1
	172 JumpIfNotEqual {202}
	173 Move W8, [X19+714]
	174 Compare W8, 0
	175 JumpIfEqual {202}
	176 Move X0, X19
	177 Call TMP_InputField.ReleaseSelection, X0
	178 Compare X8, 0
	179 JumpIfEqual {479}
	180 Move X0, X8
	181 Move X1, X31
	182 Call TouchScreenKeyboard.get_text, X0
	183 Move X8, [X19+544]
	184 Move X20, X0
	185 Move X1, X20
	186 Move X2, X31
	187 Move X0, X8
	188 Call String.op_Inequality, X0, X1
	189 Move TEMP, X0
	190 And TEMP, TEMP, 1
	191 Compare TEMP, 1
	192 JumpIfNotEqual {327}
	193 Move W8, [X19+560]
	194 Compare W8, 0
	195 JumpIfEqual {342}
	196 Move X0, [X19+256]
	197 Compare X0, 0
	198 JumpIfEqual {479}
	199 Move X1, [X19+544]
	200 Move X2, X31
	201 Call TouchScreenKeyboard.set_text, X0, X1
	202 Move X0, [X22]
	203 Move W8, [X0+224]
	204 Compare W8, 0
	205 JumpIfNotEqual {207}
	206 Call 0x1C17DFC
	207 Move X0, X20
	208 Move X1, X31
	209 Move X2, X31
	210 Call Object.op_Inequality, X0, X1
	211 Move TEMP, X0
	212 And TEMP, TEMP, 1
	213 Compare TEMP, 1
	214 JumpIfNotEqual {306}
	215 Move X0, X19
	216 Move X1, X31
	217 Call Component.get_gameObject, X0
	218 Move X8, [X22]
	219 Move X21, X0
	220 Move W9, [X8+224]
	221 Compare W9, 0
	222 JumpIfNotEqual {225}
	223 Move X0, X8
	224 Call 0x1C17DFC
	225 Move X0, X20
	226 Move X1, X21
	227 Move X2, X31
	228 Call Object.op_Inequality, X0, X1
	229 Move TEMP, X0
	230 And TEMP, TEMP, 1
	231 Compare TEMP, 1
	232 JumpIfNotEqual {306}
	233 Move X0, [X22]
	234 Move X21, [X19+720]
	235 Move W8, [X0+224]
	236 Compare W8, 0
	237 JumpIfNotEqual {239}
	238 Call 0x1C17DFC
	239 Move X0, X20
	240 Move X1, X21
	241 Move X2, X31
	242 Call Object.op_Equality, X0, X1
	243 Move TEMP, X0
	244 And TEMP, TEMP, 1
	245 Compare TEMP, 1
	246 JumpIfEqual {471}
	247 Move [X19+720], X20
	248 Move X0, [X22]
	249 Move X21, [X19+336]
	250 Move W8, [X0+224]
	251 Compare W8, 0
	252 JumpIfNotEqual {254}
	253 Call 0x1C17DFC
	254 Move X0, X21
	255 Move X1, X31
	256 Call Object.op_Implicit, X0
	257 Move TEMP, X0
	258 And TEMP, TEMP, 1
	259 Compare TEMP, 1
	260 JumpIfNotEqual {281}
	261 Move X0, [X19+336]
	262 Compare X0, 0
	263 JumpIfEqual {479}
	264 Move X1, X31
	265 Call Component.get_gameObject, X0
	266 Move X8, [X22]
	267 Move X21, X0
	268 Move W9, [X8+224]
	269 Compare W9, 0
	270 JumpIfNotEqual {273}
	271 Move X0, X8
	272 Call 0x1C17DFC
	273 Move X0, X20
	274 Move X1, X21
	275 Move X2, X31
	276 Call Object.op_Equality, X0, X1
	277 Move TEMP, X0
	278 And TEMP, TEMP, 1
	279 Compare TEMP, 1
	280 JumpIfEqual {471}
	281 Move W8, [X19+714]
	282 Compare W8, 0
	283 JumpIfNotEqual {176}
	284 Compare X20, 0
	285 JumpIfEqual {479}
	286 Move X8, 0x669000
	287 Move X8, [X8+352]
	288 Move X0, X20
	289 Move X1, [X8]
	290 Call 0x21E62E4, X0
	291 Move X8, [X22]
	292 Move X20, X0
	293 Move W9, [X8+224]
	294 Compare W9, 0
	295 JumpIfNotEqual {298}
	296 Move X0, X8
	297 Call 0x1C17DFC
	298 Move X0, X20
	299 Move X1, X31
	300 Move X2, X31
	301 Call Object.op_Inequality, X0, X1
	302 Move TEMP, X0
	303 And TEMP, TEMP, 1
	304 Compare TEMP, 1
	305 JumpIfEqual {176}
	306 Move X0, [X19+752]
	307 Compare X0, 0
	308 JumpIfEqual {45}
	309 Move X1, X31
	310 Call Event.get_rawType, X0
	311 Compare W0, 0
	312 JumpIfNotEqual {45}
	313 Move X0, [X19+752]
	314 Compare X0, 0
	315 JumpIfEqual {479}
	316 Move X1, X31
	317 Call Event.get_button, X0
	318 Compare W0, 0
	319 JumpIfNotEqual {45}
	320 Move X0, X31
	321 Call Time.get_unscaledTime
	322 Move V1, [X19+688]
	323 Move V2, [X19+692]
	324 Move [X19+688], S0
	325 Add S1, S1, S2
	326 NotImplemented "Instruction FCMP not yet implemented."
	327 Move W8, [X19+404]
	328 Compare W8, 0
	329 JumpIfEqual {438}
	330 Move X8, 0x603000
	331 Move X8, [X8+2416]
	332 Move X0, [X8]
	333 Move W8, [X0+224]
	334 Compare W8, 0
	335 JumpIfNotEqual {337}
	336 Call 0x1C17DFC
	337 Move X0, X31
	338 Call Application.get_platform
	339 NotImplemented "Instruction CMP not yet implemented."
	340 Move X0, X19
	341 Call TMP_InputField.UpdateStringPositionFromKeyboard, X0
	342 Move X8, 0x603000
	343 Move X8, [X8+2440]
	344 Move X8, [X8]
	345 Move [X19+544], X8
	346 Compare X20, 0
	347 JumpIfEqual {479}
	348 Move W8, [X20+16]
	349 NotImplemented "Instruction CMP not yet implemented."
	350 Move X24, 0x605000
	351 Move X24, [X24+368]
	352 Move W21, W31
	353 Move W23, 10
	354 Move X0, X20
	355 Move W1, W21
	356 Move X2, X31
	357 Call String.get_Chars, X0, X1
	358 And W8, W0, 0xFFFF
	359 NotImplemented "Instruction CMP not yet implemented."
	360 NotImplemented "Instruction CCMP not yet implemented."
	361 NotImplemented "Instruction CSEL not yet implemented."
	362 NotImplemented "Instruction STRH not yet implemented."
	363 Move X8, [X19+496]
	364 Compare X8, 0
	365 JumpIfEqual {374}
	366 Move X1, [X19+544]
	367 Compare X1, 0
	368 JumpIfEqual {479}
	369 Move W2, [X1+16]
	370 Move X9, [X8+24]
	371 Move X0, [X8+64]
	372 Move X4, [X8+40]
	373 NotImplemented "Instruction BLR not yet implemented."
	374 Move W8, [X19+408]
	375 Compare W8, 0
	376 JumpIfEqual {385}
	377 Move X1, [X19+544]
	378 Compare X1, 0
	379 JumpIfEqual {479}
	380 Move W2, [X1+16]
	381 Move X0, X19
	382 Call TMP_InputField.Validate, X0, X1, X2, X3
	383 Move W3, W0
	384 NotImplemented "Instruction STRH not yet implemented."
	385 And W8, W3, 0xFFFF
	386 NotImplemented "Instruction CMP not yet implemented."
	387 Move W8, [X19+400]
	388 NotImplemented "Instruction CMP not yet implemented."
	389 And W31, W3, 0xFFFF
	390 Move X0, [X24]
	391 Move X22, [X19+544]
	392 Move W8, [X0+224]
	393 Compare W8, 0
	394 JumpIfNotEqual {396}
	395 Call 0x1C17DFC
	396 Add X0, X31, 12
	397 Move X1, X31
	398 Call Char.ToString, X0
	399 Move X1, X0
	400 Move X0, X22
	401 Move X2, X31
	402 Call String.Concat, X0, X1
	403 Move [X19+544], X0
	404 Move W8, [X20+16]
	405 Add W21, W21, 1
	406 NotImplemented "Instruction CMP not yet implemented."
	407 Move W2, [X19+428]
	408 NotImplemented "Instruction CMP not yet implemented."
	409 Move X0, [X19+544]
	410 Compare X0, 0
	411 JumpIfEqual {479}
	412 Move W8, [X0+16]
	413 NotImplemented "Instruction CMP not yet implemented."
	414 Move W1, W31
	415 Move X3, X31
	416 Call String.Substring, X0, X1, X2
	417 Move [X19+544], X0
	418 Move X0, X19
	419 Call TMP_InputField.UpdateStringPositionFromKeyboard, X0
	420 Move X0, [X19+544]
	421 Move X1, X20
	422 Move X2, X31
	423 Call String.op_Inequality, X0, X1
	424 Move TEMP, X0
	425 And TEMP, TEMP, 1
	426 Compare TEMP, 1
	427 JumpIfNotEqual {434}
	428 Move X0, [X19+256]
	429 Compare X0, 0
	430 JumpIfEqual {479}
	431 Move X1, [X19+544]
	432 Move X2, X31
	433 Call TouchScreenKeyboard.set_text, X0, X1
	434 Move X0, X19
	435 Call TMP_InputField.UpdateLabel, X0
	436 Move X0, X19
	437 Call TMP_InputField.SendOnValueChanged, X0
	438 Move X0, [X19+256]
	439 Compare X0, 0
	440 JumpIfEqual {471}
	441 Move X1, X31
	442 Call TouchScreenKeyboard.get_status, X0
	443 Compare W0, 0
	444 JumpIfEqual {471}
	445 Move X0, [X19+256]
	446 Compare X0, 0
	447 JumpIfEqual {479}
	448 Move X1, X31
	449 Call TouchScreenKeyboard.get_status, X0
	450 NotImplemented "Instruction CMP not yet implemented."
	451 Move W8, 1
	452 Move [X19+664], W8
	453 Move X0, [X19+256]
	454 Compare X0, 0
	455 JumpIfEqual {479}
	456 Move X1, [X19+544]
	457 Move X2, X31
	458 Call TouchScreenKeyboard.set_text, X0, X1
	459 Move X8, [X19]
	460 Move X0, X19
	461 Move X1, X31
	462 Move X9, [X8+1480]
	463 Move X2, [X8+1488]
	464 NotImplemented "Instruction BLR not yet implemented."
	465 Move X8, [X19]
	466 Move X0, X19
	467 Move X1, X31
	468 Move X9, [X8+904]
	469 Move X2, [X8+912]
	470 NotImplemented "Instruction BLR not yet implemented."
	471 Move X20, [X31+48]
	472 Move X19, [X31+56]
	473 Move X22, [X31+32]
	474 Move X21, [X31+40]
	475 Move X24, [X31+16]
	476 Move X23, [X31+24]
	477 Move X30, [X31+64]
	478 Return 
	479 Call 0x1C17F20

Method: System.Boolean MayDrag(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03AF26E0 MOV X0, X19
	0x03AF26E4 BL 0x3AEC28C
	0x03AF26E8 ADD W8, W0, W20
	0x03AF26EC CMP W8, 0x1
	0x03AF26F0 B.LT 0x3AF2694
	0x03AF26F4 LDR X20, [X19 + 0x220]
	0x03AF26F8 LDR W21, [X19 + 0x234]
	0x03AF26FC MOV X0, X19
	0x03AF2700 BL 0x3AEC28C
	0x03AF2704 CBZ X20, 0x3AF29D8
	0x03AF2708 ADD W8, W21, W0
	0x03AF270C SUB W1, W8, 0x1
	0x03AF2710 MOV X0, X20
	0x03AF2714 MOV X2, X31
	0x03AF2718 BL 0x3222A1C
	0x03AF271C ADRP X8, 0x603000
	0x03AF2720 LDR X8, [X8 + 0x170]
	0x03AF2724 MOV W20, W0
	0x03AF2728 LDR X8, [X8]
	0x03AF272C LDR W9, [X8 + 0xE0]
	0x03AF2730 CBNZ W9, 0x3AF273C
	0x03AF2734 MOV X0, X8
	0x03AF2738 BL 0x1C16DFC
	0x03AF273C MOV W0, W20
	0x03AF2740 MOV X1, X31
	0x03AF2744 BL 0x331C0FC
	0x03AF2748 LDR W21, [X19 + 0x234]
	0x03AF274C ANDS W31, W0, 0x1
	0x03AF2750 MOVZ W8, 0x1
	0x03AF2754 MOV X0, X19
	0x03AF2758 CINC W20, W8, NE
	0x03AF275C BL 0x3AEC28C
	0x03AF2760 SUB W8, W21, W20
	0x03AF2764 ADDS W8, W8, W0
	0x03AF2768 STR W8, [X19 + 0x234]
	0x03AF276C B.MI 0x3AF28D8
	0x03AF2770 LDR X21, [X19 + 0x220]
	0x03AF2774 CBZ X21, 0x3AF29D8
	0x03AF2778 LDR W9, [X21 + 0x10]
	0x03AF277C MOV W23, W8
	0x03AF2780 CMP W9, W8
	0x03AF2784 B.GE 0x3AF2790
	0x03AF2788 MOV W23, W9
	0x03AF278C STR W9, [X22]
	0x03AF2790 STR W8, [X19 + 0x238]
	0x03AF2794 LDR W9, [X21 + 0x10]
	0x03AF2798 MOV X0, X19
	0x03AF279C CMP W9, W8
	0x03AF27A0 CSEL W8, W9, W8, LT
	0x03AF27A4 STR W8, [X19 + 0x238]
	0x03AF27A8 BL 0x3AEC28C
	0x03AF27AC B 0x3AF28F0
	0x03AF27B0 MOVZ W8, 0x1
	0x03AF27B4 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8F1000
	006 Move W8, [X21+1533]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x602000
	014 Move X0, [X0+1432]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1533], W8
	018 Move X8, [X19]
	019 Move X0, X19
	020 Move X9, [X8+456]
	021 Move X1, [X8+464]
	022 NotImplemented "Instruction BLR not yet implemented."
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {67}
	027 Move X8, [X19]
	028 Move X0, X19
	029 Move X9, [X8+696]
	030 Move X1, [X8+704]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {67}
	036 Compare X20, 0
	037 JumpIfEqual {80}
	038 Move W8, [X20+328]
	039 Compare W8, 0
	040 JumpIfNotEqual {67}
	041 Move X8, 0x602000
	042 Move X8, [X8+1432]
	043 Move X20, [X19+312]
	044 Move X0, [X8]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Inequality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {67}
	057 Move X8, [X19+256]
	058 Compare X8, 0
	059 JumpIfEqual {66}
	060 Move X0, X19
	061 Call TMP_InputField.get_shouldHideSoftKeyboard, X0
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {73}
	066 Move W0, 1
	067 Move W0, W31
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+32]
	071 Move X21, [X31+40]
	072 Return X0
	073 Move X0, X19
	074 Move X20, [X31+16]
	075 Move X19, [X31+24]
	076 Move X30, [X31+32]
	077 Move X21, [X31+40]
	078 Call TMP_InputField.get_shouldHideMobileInput, X0
	079 Return X0
	080 Call 0x1C17F20

Method: System.Void OnBeginDrag(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03AF27B8 STRB W8, [X19 + 0x2AB]
	0x03AF27BC BL 0x3AF2CC4
	0x03AF27C0 B 0x3AF29B0
	0x03AF27C4 LDR W20, [X19 + 0x23C]
	0x03AF27C8 MOV X0, X19
	0x03AF27CC BL 0x3AEC28C
	0x03AF27D0 ADD W8, W0, W20
	0x03AF27D4 CMP W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call TMP_InputField.MayDrag, X0, X1
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {11}
	009 Move W8, 1
	010 Move [X19+626], W8
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Return 

Method: System.Void OnDrag(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03AF27D8 B.LT 0x3AF29A8
	0x03AF27DC LDR X8, [X19 + 0x138]
	0x03AF27E0 CBZ X8, 0x3AF29D8
	0x03AF27E4 LDR X8, [X8 + 0x368]
	0x03AF27E8 CBZ X8, 0x3AF29D8
	0x03AF27EC LDR X21, [X8 + 0x38]
	0x03AF27F0 LDR W20, [X19 + 0x23C]
	0x03AF27F4 MOV X0, X19
	0x03AF27F8 BL 0x3AEC28C
	0x03AF27FC CBZ X21, 0x3AF29D8
	0x03AF2800 LDR W9, [X21 + 0x18]
	0x03AF2804 ADD W8, W20, W0
	0x03AF2808 SUB W8, W8, 0x1
	0x03AF280C CMP W8, W9
	0x03AF2810 B.CS 0x3AF29DC
	0x03AF2814 LDR X9, [X19 + 0x138]
	0x03AF2818 CBZ X9, 0x3AF29D8
	0x03AF281C LDR X9, [X9 + 0x368]
	0x03AF2820 CBZ X9, 0x3AF29D8
	0x03AF2824 MOVZ W10, 0x178
	0x03AF2828 SMADDL X8, X8, X10, X21
	0x03AF282C LDR X20, [X19 + 0x220]
	0x03AF2830 LDR X23, [X9 + 0x38]
	0x03AF2834 LDR W21, [X8 + 0x28]
	0x03AF2838 LDR W24, [X19 + 0x23C]
	0x03AF283C MOV X0, X19
	0x03AF2840 BL 0x3AEC28C
	0x03AF2844 CBZ X23, 0x3AF29D8
	0x03AF2848 LDR W9, [X23 + 0x18]
	0x03AF284C ADD W8, W24, W0
	0x03AF2850 SUB W8, W8, 0x1
	0x03AF2854 CMP W8, W9
	0x03AF2858 B.CS 0x3AF29DC
	0x03AF285C CBZ X20, 0x3AF29D8
	0x03AF2860 MOVZ W9, 0x178
	0x03AF2864 SMADDL X8, X8, X9, X23
	0x03AF2868 LDR W1, [X8 + 0x24]
	0x03AF286C MOV X0, X20
	0x03AF2870 MOV W2, W21
	0x03AF2874 MOV X3, X31
	0x03AF2878 BL 0x3228B90
	0x03AF287C LDR W21, [X19 + 0x23C]
	0x03AF2880 STR X0, [X19 + 0x220]
	0x03AF2884 MOV X0, X19
	0x03AF2888 BL 0x3AEC28C
	0x03AF288C LDR X8, [X19 + 0x138]
	0x03AF2890 CBZ X8, 0x3AF29D8
	0x03AF2894 LDR X8, [X8 + 0x368]
	0x03AF2898 CBZ X8, 0x3AF29D8
	0x03AF289C LDR X20, [X8 + 0x38]
	0x03AF28A0 ADD W8, W0, W21
	0x03AF28A4 CMP W8, 0x1
	0x03AF28A8 B.LT 0x3AF2914
	0x03AF28AC LDR W21, [X19 + 0x23C]
	0x03AF28B0 MOV X0, X19
	0x03AF28B4 BL 0x3AEC28C
	0x03AF28B8 CBZ X20, 0x3AF29D8
	0x03AF28BC LDR W9, [X20 + 0x18]
	0x03AF28C0 ADD W8, W21, W0
	0x03AF28C4 SUB W8, W8, 0x1
	0x03AF28C8 CMP W8, W9
	0x03AF28CC B.CS 0x3AF29DC
	0x03AF28D0 SXTW X8, W8
	0x03AF28D4 B 0x3AF2924
	0x03AF28D8 STR X31, [X22]
	0x03AF28DC LDR X21, [X19 + 0x220]
	0x03AF28E0 MOV X0, X19
	0x03AF28E4 BL 0x3AEC28C
	0x03AF28E8 CBZ X21, 0x3AF29D8
	0x03AF28EC MOV W23, W31
	0x03AF28F0 ADD W1, W0, W23
	0x03AF28F4 MOV X0, X21
	0x03AF28F8 MOV W2, W20
	0x03AF28FC MOV X3, X31
	0x03AF2900 BL 0x3228B90
	0x03AF2904 LDR W21, [X19 + 0x23C]
	0x03AF2908 STR X0, [X19 + 0x220]
	0x03AF290C ADD X20, X19, 0x23C
	0x03AF2910 B 0x3AF2978
	0x03AF2914 CBZ X20, 0x3AF29D8
	0x03AF2918 LDR W8, [X20 + 0x18]
	0x03AF291C CBZ W8, 0x3AF29DC
	0x03AF2920 MOV X8, X31
	0x03AF2924 MOVZ W9, 0x178
	0x03AF2928 MADD X8, X8, X9, X20
	0x03AF292C LDR W8, [X8 + 0x24]
	0x03AF2930 STR W8, [X22]
	0x03AF2934 TBNZ X8, 0x1F, 0x3AF2964
	0x03AF2938 LDR X9, [X19 + 0x220]
	0x03AF293C CBZ X9, 0x3AF29D8
	0x03AF2940 LDR W10, [X9 + 0x10]
	0x03AF2944 CMP W10, W8
	0x03AF2948 B.GE 0x3AF2950
	0x03AF294C STR W10, [X22]
	0x03AF2950 STR W8, [X19 + 0x238]
	0x03AF2954 LDR W9, [X9 + 0x10]
	0x03AF2958 CMP W9, W8
	0x03AF295C CSEL W8, W9, W8, LT
	0x03AF2960 B 0x3AF296C
	0x03AF2964 MOV W8, W31
	0x03AF2968 STR W31, [X22]
	0x03AF296C LDR W21, [X19 + 0x23C]
	0x03AF2970 ADD X20, X19, 0x23C
	0x03AF2974 STR W8, [X19 + 0x238]
	0x03AF2978 MOV X0, X19
	0x03AF297C BL 0x3AEC28C
	0x03AF2980 ADD W8, W21, W0
	0x03AF2984 SUB W21, W8, 0x1
	0x03AF2988 MOV X0, X19
	0x03AF298C MOV X1, X20
	0x03AF2990 STR W21, [X19 + 0x23C]
	0x03AF2994 BL 0x3AEE318
	0x03AF2998 ADD X1, X19, 0x240
	0x03AF299C MOV X0, X19
	0x03AF29A0 STR W21, [X19 + 0x240]
	0x03AF29A4 BL 0x3AEE318
	0x03AF29A8 MOVZ W8, 0x1
	0x03AF29AC STRB W8, [X19 + 0x2AB]
	0x03AF29B0 MOV X0, X19
	0x03AF29B4 BL 0x3AF2E5C
	0x03AF29B8 MOV X0, X19
	0x03AF29BC BL 0x3AECBA4
	0x03AF29C0 MOV X0, X19
	0x03AF29C4 LDP X20, X19, [X31 + 0x30]
	0x03AF29C8 LDP X22, X21, [X31 + 0x20]
	0x03AF29CC LDP X24, X23, [X31 + 0x10]
	0x03AF29D0 LDR X30, [X31], #0x40
	0x03AF29D4 B 0x3AED028
	0x03AF29D8 BL 0x1C16F20
	0x03AF29DC BL 0x1C16F28
	0x03AF29E0 STR X30, [X31 - 0x30]!
	0x03AF29E4 STP X22, X21, [X31 + 0x10]
	0x03AF29E8 STP X20, X19, [X31 + 0x20]
	0x03AF29EC ADRP X20, 0x8F0000
	0x03AF29F0 LDRB W8, [X20 + 0x609]
	0x03AF29F4 MOV X19, X0
	0x03AF29F8 TBNZ X8, 0x0, 0x3AF2A10
	0x03AF29FC ADRP X0, 0x603000
	0x03AF2A00 LDR X0, [X0 + 0x170]
	0x03AF2A04 BL 0x1C16CF4
	0x03AF2A08 MOVZ W8, 0x1
	0x03AF2A0C STRB W8, [X20 + 0x609]
	0x03AF2A10 LDRB W8, [X19 + 0x230]
	0x03AF2A14 CBZ W8, 0x3AF2A28
	0x03AF2A18 LDP X20, X19, [X31 + 0x20]
	0x03AF2A1C LDP X22, X21, [X31 + 0x10]
	0x03AF2A20 LDR X30, [X31], #0x30
	0x03AF2A24 RET
	0x03AF2A28 LDR W20, [X19 + 0x234]
	0x03AF2A2C MOV X0, X19
	0x03AF2A30 BL 0x3AEC28C
	0x03AF2A34 LDR W21, [X19 + 0x238]
	0x03AF2A38 ADD W20, W0, W20
	0x03AF2A3C MOV X0, X19
	0x03AF2A40 BL 0x3AEC28C
	0x03AF2A44 ADD W8, W0, W21
	0x03AF2A48 CMP W20, W8
	0x03AF2A4C B.NE 0x3AF2B04
	0x03AF2A50 LDRB W8, [X19 + 0x2D9]
	0x03AF2A54 CBZ W8, 0x3AF2B38
	0x03AF2A58 LDR W21, [X19 + 0x234]
	0x03AF2A5C MOV X0, X19
	0x03AF2A60 BL 0x3AEC28C
	0x03AF2A64 LDR X20, [X19 + 0x220]
	0x03AF2A68 CBZ X20, 0x3AF2BFC

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x8F1000
	009 Move W8, [X21+1534]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x658000
	017 Move X0, [X0+1720]
	018 Call 0x1C17CF4
	019 Move X0, 0x667000
	020 Move X0, [X0+3000]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1534], W8
	024 Move X0, X20
	025 Move X1, X19
	026 Move [X31+28], W31
	027 Call TMP_InputField.MayDrag, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {181}
	032 Compare X19, 0
	033 JumpIfEqual {193}
	034 Move X21, [X20+312]
	035 Move V8, [X19+260]
	036 Move V9, [X19+264]
	037 Move X0, X19
	038 Move X1, X31
	039 Call PointerEventData.get_pressEventCamera, X0
	040 Move X8, 0x667000
	041 Move X8, [X8+3000]
	042 Move X22, X0
	043 Move X8, [X8]
	044 Move W9, [X8+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {49}
	047 Move X0, X8
	048 Call 0x1C17DFC
	049 Move S2, W31
	050 Add X2, X31, 28
	051 Move X0, X21
	052 Move V0, V8
	053 Move V1, V9
	054 Move X1, X22
	055 Move X3, X31
	056 Call TMP_TextUtilities.GetCursorIndexFromPosition, X0, X1, X2, X3
	057 Move W8, [X31+28]
	058 Move W9, [X20+729]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Compare W9, 0
	061 Invalid "Jump target not found in method."
	062 Move X8, [X20+312]
	063 Compare X8, 0
	064 JumpIfEqual {193}
	065 Move X8, [X8+872]
	066 Compare X8, 0
	067 JumpIfEqual {193}
	068 Move X8, [X8+56]
	069 Compare X8, 0
	070 JumpIfEqual {193}
	071 Move W9, [X8+24]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move W9, 376
	074 NotImplemented "Instruction SMADDL not yet implemented."
	075 Move W8, [X8+36]
	076 Move X8, [X20+312]
	077 Compare X8, 0
	078 JumpIfEqual {193}
	079 Move X8, [X8+872]
	080 Compare X8, 0
	081 JumpIfEqual {193}
	082 Move X8, [X8+56]
	083 Compare X8, 0
	084 JumpIfEqual {193}
	085 Compare W0, 0
	086 JumpIfEqual {189}
	087 Move W10, [X8+24]
	088 Subtract W9, W0, 1
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move W10, 376
	091 NotImplemented "Instruction SMADDL not yet implemented."
	092 Move W9, [X8+36]
	093 Move W8, [X8+40]
	094 Add W8, W8, W9
	095 Move [X20+568], W8
	096 Move TEMP, X8
	097 And TEMP, TEMP, -2147483648
	098 Compare TEMP, -2147483648
	099 JumpIfEqual {124}
	100 Move X9, [X20+544]
	101 Compare X9, 0
	102 JumpIfEqual {193}
	103 Move W9, [X9+16]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move [X20+568], W9
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move X8, [X20+312]
	108 Compare X8, 0
	109 JumpIfEqual {193}
	110 Move X8, [X8+872]
	111 Compare X8, 0
	112 JumpIfEqual {193}
	113 Move X8, [X8+56]
	114 Compare X8, 0
	115 JumpIfEqual {193}
	116 Move W9, [X8+24]
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Move W9, 376
	119 NotImplemented "Instruction SMADDL not yet implemented."
	120 Move W9, [X8+36]
	121 Move W8, [X8+40]
	122 Add W8, W8, W9
	123 Move [X20+568], W8
	124 Move [X20+568], W31
	125 Move W21, [X20+568]
	126 Move X0, X20
	127 Call TMP_InputField.get_compositionLength, X0
	128 Add W1, W0, W21
	129 Move X0, X20
	130 Call TMP_InputField.GetCaretPositionFromStringIndex, X0, X1
	131 Add X1, X20, 576
	132 Move [X20+576], W0
	133 Move X0, X20
	134 Call TMP_InputField.ClampCaretPos, X0, X1
	135 Move X0, X20
	136 Call TMP_InputField.MarkGeometryAsDirty, X0
	137 Move X21, [X20+272]
	138 Move V8, [X19+260]
	139 Move V9, [X19+264]
	140 Move X0, X19
	141 Move X1, X31
	142 Call PointerEventData.get_pressEventCamera, X0
	143 Move X8, 0x658000
	144 Move X8, [X8+1720]
	145 Move X22, X0
	146 Move X8, [X8]
	147 Move W9, [X8+224]
	148 Compare W9, 0
	149 JumpIfNotEqual {152}
	150 Move X0, X8
	151 Call 0x1C17DFC
	152 Move X0, X21
	153 Move V0, V8
	154 Move V1, V9
	155 Move X1, X22
	156 Move X2, X31
	157 Call RectTransformUtility.RectangleContainsScreenPoint, X0, X1, X2
	158 NotImplemented "Instruction ORN not yet implemented."
	159 And W8, W8, 1
	160 Move [X20+627], W8
	161 Move TEMP, X0
	162 And TEMP, TEMP, 1
	163 Compare TEMP, 1
	164 JumpIfEqual {176}
	165 Move X8, [X20+648]
	166 Compare X8, 0
	167 JumpIfNotEqual {176}
	168 Move X0, X20
	169 Move X1, X19
	170 Call TMP_InputField.MouseDragOutsideRect, X0, X1
	171 Move X1, X0
	172 Move X0, X20
	173 Move X2, X31
	174 Call MonoBehaviour.StartCoroutine, X0, X1
	175 Move [X20+648], X0
	176 Move X8, [X19]
	177 Move X0, X19
	178 Move X9, [X8+392]
	179 Move X1, [X8+400]
	180 NotImplemented "Instruction BLR not yet implemented."
	181 Move X20, [X31+48]
	182 Move X19, [X31+56]
	183 Move X22, [X31+32]
	184 Move X21, [X31+40]
	185 Move X30, [X31+16]
	186 Move D9, [X31+64]
	187 Move D8, [X31+72]
	188 Return 
	189 Move W9, [X8+24]
	190 Compare W9, 0
	191 JumpIfNotEqual {75}
	192 Call 0x1C17F28
	193 Call 0x1C17F20

Method: System.Collections.IEnumerator MouseDragOutsideRect(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03AF2A6C LDR W8, [X20 + 0x10]
	0x03AF2A70 ADD W9, W0, W21
	0x03AF2A74 CMP W9, W8
	0x03AF2A78 B.GE 0x3AF2A18
	0x03AF2A7C LDR W21, [X19 + 0x234]
	0x03AF2A80 MOV X0, X19
	0x03AF2A84 BL 0x3AEC28C
	0x03AF2A88 ADD W1, W0, W21
	0x03AF2A8C MOV X0, X20
	0x03AF2A90 MOV X2, X31
	0x03AF2A94 BL 0x3222A1C
	0x03AF2A98 ADRP X8, 0x603000
	0x03AF2A9C LDR X8, [X8 + 0x170]
	0x03AF2AA0 MOV W20, W0
	0x03AF2AA4 LDR X8, [X8]
	0x03AF2AA8 LDR W9, [X8 + 0xE0]
	0x03AF2AAC CBNZ W9, 0x3AF2AB8
	0x03AF2AB0 MOV X0, X8
	0x03AF2AB4 BL 0x1C16DFC
	0x03AF2AB8 MOV W0, W20
	0x03AF2ABC MOV X1, X31
	0x03AF2AC0 BL 0x331BFEC
	0x03AF2AC4 LDR X20, [X19 + 0x220]
	0x03AF2AC8 LDR W22, [X19 + 0x234]
	0x03AF2ACC MOV W21, W0
	0x03AF2AD0 MOV X0, X19
	0x03AF2AD4 BL 0x3AEC28C
	0x03AF2AD8 CBZ X20, 0x3AF2BFC
	0x03AF2ADC ANDS W31, W21, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8F1000
	007 Move X22, 0x668000
	008 Move W8, [X21+1535]
	009 Move X22, [X22+376]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x668000
	017 Move X0, [X0+376]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1535], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move W1, W31
	024 Move X2, X31
	025 Move X21, X0
	026 Call <MouseDragOutsideRect>d__294..ctor, X0, X1
	027 Compare X21, 0
	028 JumpIfEqual {38}
	029 Move [X21+32], X20
	030 Move [X21+40], X19
	031 Move X0, X21
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X30, [X31+48]
	037 Return X0
	038 Call 0x1C17F20

Method: System.Void OnEndDrag(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03AF2AE0 MOVZ W21, 0x1
	0x03AF2AE4 ADD W1, W0, W22
	0x03AF2AE8 CINC W2, W21, NE
	0x03AF2AEC MOV X0, X20
	0x03AF2AF0 MOV X3, X31
	0x03AF2AF4 BL 0x3228B90
	0x03AF2AF8 STR X0, [X19 + 0x220]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call TMP_InputField.MayDrag, X0, X1
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {10}
	009 Move [X19+626], W31
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 

Method: System.Void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03AF2AFC STRB W21, [X19 + 0x2AB]
	0x03AF2B00 B 0x3AF2B14
	0x03AF2B04 MOVZ W8, 0x1
	0x03AF2B08 MOV X0, X19
	0x03AF2B0C STRB W8, [X19 + 0x2AB]
	0x03AF2B10 BL 0x3AF2CC4
	0x03AF2B14 MOV X0, X19
	0x03AF2B18 BL 0x3AF2E5C
	0x03AF2B1C MOV X0, X19
	0x03AF2B20 BL 0x3AECBA4
	0x03AF2B24 MOV X0, X19
	0x03AF2B28 LDP X20, X19, [X31 + 0x20]
	0x03AF2B2C LDP X22, X21, [X31 + 0x10]
	0x03AF2B30 LDR X30, [X31], #0x30
	0x03AF2B34 B 0x3AED028
	0x03AF2B38 LDR W20, [X19 + 0x23C]
	0x03AF2B3C MOV X0, X19
	0x03AF2B40 BL 0x3AEC28C
	0x03AF2B44 LDR X8, [X19 + 0x138]
	0x03AF2B48 CBZ X8, 0x3AF2BFC
	0x03AF2B4C LDR X8, [X8 + 0x368]
	0x03AF2B50 CBZ X8, 0x3AF2BFC
	0x03AF2B54 LDR W9, [X8 + 0x18]
	0x03AF2B58 ADD W10, W0, W20
	0x03AF2B5C SUB W9, W9, 0x1
	0x03AF2B60 CMP W10, W9
	0x03AF2B64 B.GE 0x3AF2A18
	0x03AF2B68 LDR X20, [X8 + 0x38]
	0x03AF2B6C LDR W21, [X19 + 0x23C]
	0x03AF2B70 MOV X0, X19
	0x03AF2B74 BL 0x3AEC28C
	0x03AF2B78 CBZ X20, 0x3AF2BFC
	0x03AF2B7C LDR W9, [X20 + 0x18]
	0x03AF2B80 ADD W8, W0, W21
	0x03AF2B84 CMP W8, W9
	0x03AF2B88 B.CS 0x3AF2C00
	0x03AF2B8C LDR X9, [X19 + 0x138]
	0x03AF2B90 CBZ X9, 0x3AF2BFC
	0x03AF2B94 LDR X9, [X9 + 0x368]
	0x03AF2B98 CBZ X9, 0x3AF2BFC
	0x03AF2B9C MOVZ W10, 0x178
	0x03AF2BA0 SMADDL X8, X8, X10, X20
	0x03AF2BA4 LDR X21, [X9 + 0x38]
	0x03AF2BA8 LDR W20, [X8 + 0x28]
	0x03AF2BAC LDR W22, [X19 + 0x23C]
	0x03AF2BB0 MOV X0, X19
	0x03AF2BB4 BL 0x3AEC28C
	0x03AF2BB8 CBZ X21, 0x3AF2BFC
	0x03AF2BBC LDR W9, [X21 + 0x18]
	0x03AF2BC0 ADD W8, W0, W22
	0x03AF2BC4 CMP W8, W9
	0x03AF2BC8 B.CS 0x3AF2C00
	0x03AF2BCC LDR X0, [X19 + 0x220]
	0x03AF2BD0 CBZ X0, 0x3AF2BFC
	0x03AF2BD4 MOVZ W9, 0x178
	0x03AF2BD8 SMADDL X8, X8, X9, X21
	0x03AF2BDC LDR W1, [X8 + 0x24]
	0x03AF2BE0 MOV W2, W20
	0x03AF2BE4 MOV X3, X31
	0x03AF2BE8 BL 0x3228B90
	0x03AF2BEC MOVZ W8, 0x1
	0x03AF2BF0 STR X0, [X19 + 0x220]
	0x03AF2BF4 STRB W8, [X19 + 0x2AB]
	0x03AF2BF8 B 0x3AF2B1C
	0x03AF2BFC BL 0x1C16F20
	0x03AF2C00 BL 0x1C16F28
	0x03AF2C04 STP X30, X21, [X31 - 0x20]!
	0x03AF2C08 STP X20, X19, [X31 + 0x10]
	0x03AF2C0C ADRP X20, 0x8F0000
	0x03AF2C10 LDRB W8, [X20 + 0x604]
	0x03AF2C14 MOV X19, X0
	0x03AF2C18 TBNZ X8, 0x0, 0x3AF2C30
	0x03AF2C1C ADRP X0, 0x601000
	0x03AF2C20 LDR X0, [X0 + 0x988]
	0x03AF2C24 BL 0x1C16CF4
	0x03AF2C28 MOVZ W8, 0x1
	0x03AF2C2C STRB W8, [X20 + 0x604]
	0x03AF2C30 LDR W20, [X19 + 0x234]
	0x03AF2C34 MOV X0, X19
	0x03AF2C38 BL 0x3AEC28C
	0x03AF2C3C LDR W21, [X19 + 0x238]
	0x03AF2C40 ADD W20, W0, W20
	0x03AF2C44 MOV X0, X19
	0x03AF2C48 BL 0x3AEC28C
	0x03AF2C4C ADD W8, W0, W21
	0x03AF2C50 CMP W20, W8
	0x03AF2C54 B.NE 0x3AF2C70
	0x03AF2C58 ADRP X8, 0x601000
	0x03AF2C5C LDR X8, [X8 + 0x988]
	0x03AF2C60 LDP X20, X19, [X31 + 0x10]
	0x03AF2C64 LDR X0, [X8]
	0x03AF2C68 LDP X30, X21, [X31], #0x20
	0x03AF2C6C RET
	0x03AF2C70 LDR W20, [X19 + 0x234]
	0x03AF2C74 MOV X0, X19
	0x03AF2C78 BL 0x3AEC28C
	0x03AF2C7C LDR W21, [X19 + 0x238]
	0x03AF2C80 ADD W20, W0, W20
	0x03AF2C84 MOV X0, X19
	0x03AF2C88 BL 0x3AEC28C
	0x03AF2C8C LDR X8, [X19 + 0x220]
	0x03AF2C90 ADD W9, W0, W21
	0x03AF2C94 CMP W20, W9
	0x03AF2C98 CSEL W1, W9, W20, GT
	0x03AF2C9C CBZ X8, 0x3AF2CC0
	0x03AF2CA0 CMP W20, W9
	0x03AF2CA4 CSEL W9, W20, W9, GT
	0x03AF2CA8 LDP X20, X19, [X31 + 0x10]
	0x03AF2CAC SUB W2, W9, W1
	0x03AF2CB0 MOV X0, X8
	0x03AF2CB4 MOV X3, X31
	0x03AF2CB8 LDP X30, X21, [X31], #0x20
	0x03AF2CBC B 0x3228DE4
	0x03AF2CC0 BL 0x1C16F20
	0x03AF2CC4 STP X30, X19, [X31 - 0x10]!
	0x03AF2CC8 LDRB W8, [X0 + 0x230]
	0x03AF2CCC CBNZ W8, 0x3AF2D54
	0x03AF2CD0 LDR W8, [X0 + 0x234]
	0x03AF2CD4 LDR W1, [X0 + 0x238]
	0x03AF2CD8 MOV X19, X0
	0x03AF2CDC CMP W8, W1
	0x03AF2CE0 B.EQ 0x3AF2D54
	0x03AF2CE4 LDRB W9, [X19 + 0x2D9]
	0x03AF2CE8 CBNZ W9, 0x3AF2CF4
	0x03AF2CEC LDRB W9, [X19 + 0x2C9]
	0x03AF2CF0 CBZ W9, 0x3AF2D5C
	0x03AF2CF4 LDR X0, [X19 + 0x220]
	0x03AF2CF8 SUBS W2, W8, W1
	0x03AF2CFC B.GE 0x3AF2D24
	0x03AF2D00 CBZ X0, 0x3AF2E54
	0x03AF2D04 SUB W2, W1, W8
	0x03AF2D08 MOV W1, W8
	0x03AF2D0C MOV X3, X31
	0x03AF2D10 BL 0x3228B90
	0x03AF2D14 LDR W8, [X19 + 0x234]
	0x03AF2D18 STR X0, [X19 + 0x220]
	0x03AF2D1C STR W8, [X19 + 0x238]
	0x03AF2D20 B 0x3AF2D3C
	0x03AF2D24 CBZ X0, 0x3AF2E54
	0x03AF2D28 MOV X3, X31
	0x03AF2D2C BL 0x3228B90
	0x03AF2D30 LDR W8, [X19 + 0x238]
	0x03AF2D34 STR X0, [X19 + 0x220]
	0x03AF2D38 STR W8, [X19 + 0x234]
	0x03AF2D3C LDRB W8, [X19 + 0x2C9]
	0x03AF2D40 CBZ W8, 0x3AF2D54
	0x03AF2D44 ADD X8, X19, 0x23C
	0x03AF2D48 MOVI V0.2D, 0x0
	0x03AF2D4C STR D0, [X8]
	0x03AF2D50 STRB W31, [X19 + 0x2C9]
	0x03AF2D54 LDP X30, X19, [X31], #0x10
	0x03AF2D58 RET
	0x03AF2D5C LDR X8, [X19 + 0x138]
	0x03AF2D60 CBZ X8, 0x3AF2E54
	0x03AF2D64 LDR X8, [X8 + 0x368]
	0x03AF2D68 CBZ X8, 0x3AF2E54
	0x03AF2D6C LDR X8, [X8 + 0x38]
	0x03AF2D70 CBZ X8, 0x3AF2E54
	0x03AF2D74 LDRSW X10, [X19 + 0x23C]
	0x03AF2D78 LDRSW X9, [X19 + 0x240]
	0x03AF2D7C CMP W10, W9
	0x03AF2D80 B.GE 0x3AF2DEC
	0x03AF2D84 LDR W11, [X8 + 0x18]
	0x03AF2D88 CMP W10, W11
	0x03AF2D8C B.CS 0x3AF2E58
	0x03AF2D90 MOVZ W12, 0x178
	0x03AF2D94 MADD X10, X10, X12, X8
	0x03AF2D98 LDR W1, [X10 + 0x24]
	0x03AF2D9C SUB X9, X9, 0x1
	0x03AF2DA0 CMP W9, W11
	0x03AF2DA4 STR W1, [X19 + 0x234]
	0x03AF2DA8 B.CS 0x3AF2E58
	0x03AF2DAC MOVZ W10, 0x178
	0x03AF2DB0 MADD X8, X9, X10, X8
	0x03AF2DB4 LDP W9, W8, [X8 + 0x24]
	0x03AF2DB8 LDR X0, [X19 + 0x220]
	0x03AF2DBC ADD W8, W8, W9
	0x03AF2DC0 STR W8, [X19 + 0x238]
	0x03AF2DC4 CBZ X0, 0x3AF2E54
	0x03AF2DC8 SUB W2, W8, W1
	0x03AF2DCC MOV X3, X31
	0x03AF2DD0 BL 0x3228B90
	0x03AF2DD4 LDR W8, [X19 + 0x234]
	0x03AF2DD8 LDR W9, [X19 + 0x23C]
	0x03AF2DDC STR X0, [X19 + 0x220]
	0x03AF2DE0 STR W8, [X19 + 0x238]
	0x03AF2DE4 STR W9, [X19 + 0x240]
	0x03AF2DE8 B 0x3AF2D54
	0x03AF2DEC LDR W11, [X8 + 0x18]
	0x03AF2DF0 SUB W10, W10, 0x1
	0x03AF2DF4 CMP W10, W11
	0x03AF2DF8 B.CS 0x3AF2E58
	0x03AF2DFC MOVZ W12, 0x178
	0x03AF2E00 SMADDL X10, X10, X12, X8
	0x03AF2E04 LDP W12, W10, [X10 + 0x24]
	0x03AF2E08 CMP W9, W11
	0x03AF2E0C ADD W10, W10, W12
	0x03AF2E10 STR W10, [X19 + 0x234]
	0x03AF2E14 B.CS 0x3AF2E58
	0x03AF2E18 MOVZ W11, 0x178
	0x03AF2E1C MADD X8, X9, X11, X8
	0x03AF2E20 LDR W1, [X8 + 0x24]
	0x03AF2E24 LDR X0, [X19 + 0x220]
	0x03AF2E28 STR W1, [X19 + 0x238]
	0x03AF2E2C CBZ X0, 0x3AF2E54
	0x03AF2E30 SUB W2, W10, W1
	0x03AF2E34 MOV X3, X31
	0x03AF2E38 BL 0x3228B90
	0x03AF2E3C LDR W8, [X19 + 0x238]
	0x03AF2E40 LDR W9, [X19 + 0x240]
	0x03AF2E44 STR X0, [X19 + 0x220]
	0x03AF2E48 STR W8, [X19 + 0x234]
	0x03AF2E4C STR W9, [X19 + 0x23C]
	0x03AF2E50 B 0x3AF2D54
	0x03AF2E54 BL 0x1C16F20
	0x03AF2E58 BL 0x1C16F28
	0x03AF2E5C STP X30, X19, [X31 - 0x10]!
	0x03AF2E60 LDR X8, [X0 + 0x100]
	0x03AF2E64 CBZ X8, 0x3AF2E8C
	0x03AF2E68 MOV X19, X0
	0x03AF2E6C BL 0x3AF01B0
	0x03AF2E70 TBZ X0, 0x0, 0x3AF2E8C
	0x03AF2E74 LDR X0, [X19 + 0x100]
	0x03AF2E78 CBZ X0, 0x3AF2E94
	0x03AF2E7C LDR X1, [X19 + 0x220]
	0x03AF2E80 MOV X2, X31
	0x03AF2E84 LDP X30, X19, [X31], #0x10
	0x03AF2E88 B 0x3C3CF58
	0x03AF2E8C LDP X30, X19, [X31], #0x10
	0x03AF2E90 RET
	0x03AF2E94 BL 0x1C16F20
	0x03AF2E98 STP X30, X23, [X31 - 0x30]!
	0x03AF2E9C STP X22, X21, [X31 + 0x10]
	0x03AF2EA0 STP X20, X19, [X31 + 0x20]
	0x03AF2EA4 ADRP X22, 0x8F0000
	0x03AF2EA8 LDRB W8, [X22 + 0x608]
	0x03AF2EAC MOV W21, W2
	0x03AF2EB0 MOV W20, W1
	0x03AF2EB4 MOV X19, X0
	0x03AF2EB8 TBNZ X8, 0x0, 0x3AF2ED0
	0x03AF2EBC ADRP X0, 0x603000
	0x03AF2EC0 LDR X0, [X0 + 0x170]
	0x03AF2EC4 BL 0x1C16CF4
	0x03AF2EC8 MOVZ W8, 0x1
	0x03AF2ECC STRB W8, [X22 + 0x608]
	0x03AF2ED0 LDR W22, [X19 + 0x234]
	0x03AF2ED4 MOV X0, X19
	0x03AF2ED8 BL 0x3AEC28C
	0x03AF2EDC LDR W23, [X19 + 0x238]
	0x03AF2EE0 ADD W22, W0, W22
	0x03AF2EE4 MOV X0, X19
	0x03AF2EE8 BL 0x3AEC28C
	0x03AF2EEC ADD W8, W0, W23
	0x03AF2EF0 CMP W22, W8
	0x03AF2EF4 B.EQ 0x3AF2F60
	0x03AF2EF8 TBNZ X20, 0x0, 0x3AF2F60
	0x03AF2EFC LDR W20, [X19 + 0x234]
	0x03AF2F00 MOV X0, X19
	0x03AF2F04 BL 0x3AEC28C
	0x03AF2F08 LDR W21, [X19 + 0x238]
	0x03AF2F0C ADD W20, W0, W20
	0x03AF2F10 MOV X0, X19
	0x03AF2F14 BL 0x3AEC28C
	0x03AF2F18 ADD W8, W0, W21
	0x03AF2F1C CMP W20, W8
	0x03AF2F20 CSEL W8, W20, W8, LT
	0x03AF2F24 STR W8, [X19 + 0x238]
	0x03AF2F28 TBNZ X8, 0x1F, 0x3AF300C
	0x03AF2F2C LDR X9, [X19 + 0x220]
	0x03AF2F30 CBZ X9, 0x3AF3240
	0x03AF2F34 LDR W10, [X9 + 0x10]
	0x03AF2F38 MOV W20, W8
	0x03AF2F3C CMP W10, W8
	0x03AF2F40 B.GE 0x3AF2F4C
	0x03AF2F44 MOV W20, W10
	0x03AF2F48 STR W10, [X19 + 0x238]
	0x03AF2F4C STR W8, [X19 + 0x234]
	0x03AF2F50 LDR W9, [X9 + 0x10]
	0x03AF2F54 CMP W9, W8
	0x03AF2F58 CSEL W8, W9, W8, LT
	0x03AF2F5C B 0x3AF3018
	0x03AF2F60 TBZ X21, 0x0, 0x3AF2F78
	0x03AF2F64 MOV X0, X19
	0x03AF2F68 BL 0x3AF3D98
	0x03AF2F6C MOV W21, W0
	0x03AF2F70 TBNZ X20, 0x0, 0x3AF3068
	0x03AF2F74 B 0x3AF312C
	0x03AF2F78 LDRB W8, [X19 + 0x2D9]
	0x03AF2F7C CBZ W8, 0x3AF3088
	0x03AF2F80 LDR W21, [X19 + 0x238]
	0x03AF2F84 MOV X0, X19
	0x03AF2F88 BL 0x3AEC28C
	0x03AF2F8C ADD W8, W0, W21
	0x03AF2F90 CMP W8, 0x1
	0x03AF2F94 B.LT 0x3AF3050
	0x03AF2F98 LDR X21, [X19 + 0x220]
	0x03AF2F9C LDR W22, [X19 + 0x238]
	0x03AF2FA0 MOV X0, X19
	0x03AF2FA4 BL 0x3AEC28C
	0x03AF2FA8 CBZ X21, 0x3AF3240
	0x03AF2FAC ADD W8, W22, W0
	0x03AF2FB0 SUB W1, W8, 0x1
	0x03AF2FB4 MOV X0, X21
	0x03AF2FB8 MOV X2, X31
	0x03AF2FBC BL 0x3222A1C
	0x03AF2FC0 ADRP X8, 0x603000
	0x03AF2FC4 LDR X8, [X8 + 0x170]
	0x03AF2FC8 MOV W21, W0
	0x03AF2FCC LDR X8, [X8]
	0x03AF2FD0 LDR W9, [X8 + 0xE0]
	0x03AF2FD4 CBNZ W9, 0x3AF2FE0
	0x03AF2FD8 MOV X0, X8
	0x03AF2FDC BL 0x1C16DFC
	0x03AF2FE0 MOV W0, W21
	0x03AF2FE4 MOV X1, X31
	0x03AF2FE8 BL 0x331C0FC
	0x03AF2FEC TBZ X0, 0x0, 0x3AF3050
	0x03AF2FF0 LDR W21, [X19 + 0x238]
	0x03AF2FF4 MOV X0, X19
	0x03AF2FF8 BL 0x3AEC28C
	0x03AF2FFC ADD W8, W21, W0
	0x03AF3000 SUB W21, W8, 0x2
	0x03AF3004 TBNZ X20, 0x0, 0x3AF3068
	0x03AF3008 B 0x3AF312C
	0x03AF300C MOV W8, W31
	0x03AF3010 MOV W20, W31
	0x03AF3014 STR W31, [X19 + 0x238]
	0x03AF3018 MOV X0, X19
	0x03AF301C STR W8, [X19 + 0x234]
	0x03AF3020 BL 0x3AEC28C
	0x03AF3024 ADD W1, W0, W20
	0x03AF3028 MOV X0, X19
	0x03AF302C BL 0x3AEF8F4
	0x03AF3030 MOV W20, W0
	0x03AF3034 ADD X1, X19, 0x240
	0x03AF3038 STR W0, [X19 + 0x240]
	0x03AF303C MOV X0, X19
	0x03AF3040 BL 0x3AEE318
	0x03AF3044 ADD X1, X19, 0x23C
	0x03AF3048 STR W20, [X19 + 0x23C]
	0x03AF304C B 0x3AF322C
	0x03AF3050 LDR W21, [X19 + 0x238]
	0x03AF3054 MOV X0, X19
	0x03AF3058 BL 0x3AEC28C
	0x03AF305C ADD W8, W21, W0
	0x03AF3060 SUB W21, W8, 0x1
	0x03AF3064 TBZ X20, 0x0, 0x3AF312C
	0x03AF3068 STR W21, [X19 + 0x238]
	0x03AF306C TBNZ X21, 0x1F, 0x3AF30E0
	0x03AF3070 LDR X8, [X19 + 0x220]
	0x03AF3074 CBZ X8, 0x3AF3240
	0x03AF3078 LDR W8, [X8 + 0x10]
	0x03AF307C CMP W8, W21
	0x03AF3080 B.LT 0x3AF30E4
	0x03AF3084 B 0x3AF30EC
	0x03AF3088 LDR W22, [X19 + 0x240]
	0x03AF308C MOV X0, X19
	0x03AF3090 BL 0x3AEC28C
	0x03AF3094 LDR X8, [X19 + 0x138]
	0x03AF3098 CBZ X8, 0x3AF3240
	0x03AF309C LDR X8, [X8 + 0x368]
	0x03AF30A0 CBZ X8, 0x3AF3240
	0x03AF30A4 LDR X21, [X8 + 0x38]
	0x03AF30A8 ADD W8, W0, W22
	0x03AF30AC CMP W8, 0x1
	0x03AF30B0 B.LT 0x3AF310C
	0x03AF30B4 LDR W22, [X19 + 0x240]
	0x03AF30B8 MOV X0, X19
	0x03AF30BC BL 0x3AEC28C
	0x03AF30C0 CBZ X21, 0x3AF3240
	0x03AF30C4 LDR W9, [X21 + 0x18]
	0x03AF30C8 ADD W8, W22, W0
	0x03AF30CC SUB W8, W8, 0x1
	0x03AF30D0 CMP W8, W9
	0x03AF30D4 B.CS 0x3AF3244
	0x03AF30D8 SXTW X8, W8
	0x03AF30DC B 0x3AF311C
	0x03AF30E0 MOV W8, W31
	0x03AF30E4 MOV W21, W8
	0x03AF30E8 STR W8, [X19 + 0x238]
	0x03AF30EC MOV X0, X19
	0x03AF30F0 BL 0x3AEC28C
	0x03AF30F4 ADD W1, W0, W21
	0x03AF30F8 MOV X0, X19
	0x03AF30FC BL 0x3AEF8F4
	0x03AF3100 ADD X1, X19, 0x240
	0x03AF3104 STR W0, [X19 + 0x240]
	0x03AF3108 B 0x3AF322C
	0x03AF310C CBZ X21, 0x3AF3240
	0x03AF3110 LDR W8, [X21 + 0x18]
	0x03AF3114 CBZ W8, 0x3AF3244
	0x03AF3118 MOV X8, X31
	0x03AF311C MOVZ W9, 0x178
	0x03AF3120 MADD X8, X8, X9, X21
	0x03AF3124 LDR W21, [X8 + 0x24]
	0x03AF3128 TBNZ X20, 0x0, 0x3AF3068
	0x03AF312C STR W21, [X19 + 0x234]
	0x03AF3130 TBNZ X21, 0x1F, 0x3AF3160
	0x03AF3134 LDR X8, [X19 + 0x220]
	0x03AF3138 CBZ X8, 0x3AF3240
	0x03AF313C LDR W9, [X8 + 0x10]
	0x03AF3140 CMP W9, W21
	0x03AF3144 B.GE 0x3AF314C
	0x03AF3148 STR W9, [X19 + 0x234]
	0x03AF314C STR W21, [X19 + 0x238]
	0x03AF3150 LDR W8, [X8 + 0x10]
	0x03AF3154 CMP W8, W21
	0x03AF3158 CSEL W8, W8, W21, LT
	0x03AF315C B 0x3AF3168
	0x03AF3160 MOV W8, W31
	0x03AF3164 STR W31, [X19 + 0x234]
	0x03AF3168 LDR W20, [X19 + 0x23C]
	0x03AF316C MOV X0, X19
	0x03AF3170 STR W8, [X19 + 0x238]
	0x03AF3174 BL 0x3AEC28C
	0x03AF3178 ADD W8, W0, W20
	0x03AF317C CMP W8, 0x1
	0x03AF3180 B.LT 0x3AF31E4
	0x03AF3184 LDR W21, [X19 + 0x234]
	0x03AF3188 MOV X0, X19
	0x03AF318C BL 0x3AEC28C
	0x03AF3190 LDR X8, [X19 + 0x138]
	0x03AF3194 CBZ X8, 0x3AF3240
	0x03AF3198 LDR X8, [X8 + 0x368]
	0x03AF319C CBZ X8, 0x3AF3240
	0x03AF31A0 LDR X22, [X8 + 0x38]
	0x03AF31A4 LDR W23, [X19 + 0x23C]
	0x03AF31A8 MOV W20, W0
	0x03AF31AC MOV X0, X19
	0x03AF31B0 BL 0x3AEC28C
	0x03AF31B4 CBZ X22, 0x3AF3240
	0x03AF31B8 LDR W9, [X22 + 0x18]
	0x03AF31BC ADD W8, W23, W0
	0x03AF31C0 SUB W8, W8, 0x1
	0x03AF31C4 CMP W8, W9
	0x03AF31C8 B.CS 0x3AF3244
	0x03AF31CC MOVZ W9, 0x178
	0x03AF31D0 SMADDL X8, X8, X9, X22
	0x03AF31D4 LDR W8, [X8 + 0x24]
	0x03AF31D8 ADD W9, W20, W21
	0x03AF31DC CMP W9, W8
	0x03AF31E0 B.LE 0x3AF31F4
	0x03AF31E4 LDP X20, X19, [X31 + 0x20]
	0x03AF31E8 LDP X22, X21, [X31 + 0x10]
	0x03AF31EC LDP X30, X23, [X31], #0x30
	0x03AF31F0 RET
	0x03AF31F4 LDR W21, [X19 + 0x238]
	0x03AF31F8 MOV X0, X19
	0x03AF31FC ADD X20, X19, 0x23C
	0x03AF3200 BL 0x3AEC28C
	0x03AF3204 ADD W1, W0, W21
	0x03AF3208 MOV X0, X19
	0x03AF320C BL 0x3AEF8F4
	0x03AF3210 MOV W21, W0
	0x03AF3214 STR W0, [X19 + 0x23C]
	0x03AF3218 MOV X0, X19
	0x03AF321C MOV X1, X20
	0x03AF3220 BL 0x3AEE318
	0x03AF3224 ADD X1, X19, 0x240
	0x03AF3228 STR W21, [X19 + 0x240]
	0x03AF322C MOV X0, X19
	0x03AF3230 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D12
	003 Move [X31+24], D11
	004 Move [X31+32], D10
	005 Move [X31+40], D9
	006 Move [X31+48], D8
	007 Move [X31+56], X30
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0x8F1000
	015 Move W8, [X21+1536]
	016 Move X19, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0x629000
	023 Move X0, [X0+3576]
	024 Call 0x1C17CF4
	025 Move X0, 0x667000
	026 Move X0, [X0+3000]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+1536], W8
	030 Move X0, X20
	031 Move X1, X19
	032 Move [X31+12], W31
	033 Call TMP_InputField.MayDrag, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {498}
	038 Move X8, 0x629000
	039 Move X8, [X8+3576]
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X31
	046 Call EventSystem.get_current
	047 Move X21, X0
	048 Move X0, X20
	049 Move X1, X31
	050 Call Component.get_gameObject, X0
	051 Compare X21, 0
	052 JumpIfEqual {519}
	053 Move X1, X0
	054 Move X0, X21
	055 Move X2, X19
	056 Move X3, X31
	057 Call EventSystem.SetSelectedGameObject, X0, X1, X2
	058 Move W21, [X20+624]
	059 Move X0, X20
	060 Move X1, X19
	061 Move X2, X31
	062 Call Selectable.OnPointerDown, X0, X1
	063 Move X0, X20
	064 Call TMP_InputField.InPlaceEditing, X0
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfEqual {78}
	069 Move X0, [X20+256]
	070 Compare X0, 0
	071 JumpIfEqual {87}
	072 Move X1, X31
	073 Call TouchScreenKeyboard.get_active, X0
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {87}
	078 Move X0, [X20+752]
	079 Move X1, X31
	080 Call Event.PopEvent, X0
	081 Move X0, [X20+752]
	082 Compare X0, 0
	083 JumpIfEqual {93}
	084 Move X1, X31
	085 Call Event.get_modifiers, X0
	086 And W24, W0, 1
	087 Move X8, [X20]
	088 Move X0, X20
	089 Move X1, X19
	090 Move X9, [X8+888]
	091 Move X2, [X8+896]
	092 NotImplemented "Instruction BLR not yet implemented."
	093 Move W24, W31
	094 Move X0, X31
	095 Call Time.get_unscaledTime
	096 Move V11, [X20+684]
	097 Move V12, [X20+692]
	098 Move V8, V0
	099 Move [X20+684], S0
	100 Compare W21, 0
	101 JumpIfEqual {149}
	102 Compare X19, 0
	103 JumpIfEqual {519}
	104 Move X21, [X20+312]
	105 Move V9, [X19+260]
	106 Move V10, [X19+264]
	107 Move X0, X19
	108 Move X1, X31
	109 Call PointerEventData.get_pressEventCamera, X0
	110 Move X23, 0x667000
	111 Move X23, [X23+3000]
	112 Move X22, X0
	113 Move X8, [X23]
	114 Move W9, [X8+224]
	115 Compare W9, 0
	116 JumpIfNotEqual {119}
	117 Move X0, X8
	118 Call 0x1C17DFC
	119 Move S2, W31
	120 Add X2, X31, 12
	121 Move X0, X21
	122 Move V0, V9
	123 Move V1, V10
	124 Move X1, X22
	125 Move X3, X31
	126 Call TMP_TextUtilities.GetCursorIndexFromPosition, X0, X1, X2, X3
	127 Move W8, [X31+12]
	128 Move W9, [X20+729]
	129 Move W21, W0
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Compare W24, 0
	132 JumpIfEqual {156}
	133 Compare W9, 0
	134 Invalid "Jump target not found in method."
	135 Move X8, [X20+312]
	136 Compare X8, 0
	137 JumpIfEqual {519}
	138 Move X8, [X8+872]
	139 Compare X8, 0
	140 JumpIfEqual {519}
	141 Move X8, [X8+56]
	142 Compare X8, 0
	143 JumpIfEqual {519}
	144 Move W9, [X8+24]
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move W9, 376
	147 NotImplemented "Instruction SMADDL not yet implemented."
	148 Move W8, [X8+36]
	149 Move W8, [X20+712]
	150 Compare W8, 0
	151 JumpIfEqual {102}
	152 Move X0, X20
	153 Call TMP_InputField.UpdateLabel, X0
	154 Compare X19, 0
	155 JumpIfNotEqual {493}
	156 Compare W9, 0
	157 Invalid "Jump target not found in method."
	158 Move X8, [X20+312]
	159 Compare X8, 0
	160 JumpIfEqual {519}
	161 Move X8, [X8+872]
	162 Compare X8, 0
	163 JumpIfEqual {519}
	164 Move X8, [X8+56]
	165 Compare X8, 0
	166 JumpIfEqual {519}
	167 Move W9, [X8+24]
	168 NotImplemented "Instruction CMP not yet implemented."
	169 Move W9, 376
	170 NotImplemented "Instruction SMADDL not yet implemented."
	171 Move W8, [X8+36]
	172 Move X8, [X20+312]
	173 Compare X8, 0
	174 JumpIfEqual {519}
	175 Move X8, [X8+872]
	176 Compare X8, 0
	177 JumpIfEqual {519}
	178 Move X8, [X8+56]
	179 Compare X8, 0
	180 JumpIfEqual {519}
	181 Compare W21, 0
	182 JumpIfEqual {512}
	183 Move W10, [X8+24]
	184 Subtract W9, W21, 1
	185 NotImplemented "Instruction CMP not yet implemented."
	186 Move W10, 376
	187 NotImplemented "Instruction SMADDL not yet implemented."
	188 Move W9, [X8+36]
	189 Move W8, [X8+40]
	190 Add W8, W8, W9
	191 Move [X20+568], W8
	192 Move TEMP, X8
	193 And TEMP, TEMP, -2147483648
	194 Compare TEMP, -2147483648
	195 JumpIfEqual {220}
	196 Move X9, [X20+544]
	197 Compare X9, 0
	198 JumpIfEqual {519}
	199 Move W9, [X9+16]
	200 NotImplemented "Instruction CMP not yet implemented."
	201 Move [X20+568], W9
	202 NotImplemented "Instruction CMP not yet implemented."
	203 Move X8, [X20+312]
	204 Compare X8, 0
	205 JumpIfEqual {519}
	206 Move X8, [X8+872]
	207 Compare X8, 0
	208 JumpIfEqual {519}
	209 Move X8, [X8+56]
	210 Compare X8, 0
	211 JumpIfEqual {519}
	212 Move W9, [X8+24]
	213 NotImplemented "Instruction CMP not yet implemented."
	214 Move W9, 376
	215 NotImplemented "Instruction SMADDL not yet implemented."
	216 Move W9, [X8+36]
	217 Move W8, [X8+40]
	218 Add W8, W8, W9
	219 Move [X20+568], W8
	220 Move [X20+568], W31
	221 Move X8, [X20+312]
	222 Compare X8, 0
	223 JumpIfEqual {519}
	224 Move X8, [X8+872]
	225 Compare X8, 0
	226 JumpIfEqual {519}
	227 Move X8, [X8+56]
	228 Compare X8, 0
	229 JumpIfEqual {519}
	230 Compare W21, 0
	231 JumpIfEqual {515}
	232 Move W10, [X8+24]
	233 Subtract W9, W21, 1
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Move W10, 376
	236 NotImplemented "Instruction SMADDL not yet implemented."
	237 Move W9, [X8+36]
	238 Move W8, [X8+40]
	239 Add W8, W8, W9
	240 Move [X20+568], W8
	241 Move TEMP, X8
	242 And TEMP, TEMP, -2147483648
	243 Compare TEMP, -2147483648
	244 JumpIfEqual {274}
	245 Move X9, [X20+544]
	246 Compare X9, 0
	247 JumpIfEqual {519}
	248 Move W10, [X9+16]
	249 NotImplemented "Instruction CMP not yet implemented."
	250 Move [X20+568], W10
	251 Move [X20+564], W8
	252 Move W9, [X9+16]
	253 NotImplemented "Instruction CMP not yet implemented."
	254 NotImplemented "Instruction CSEL not yet implemented."
	255 Move [X20+564], W8
	256 NotImplemented "Instruction CMP not yet implemented."
	257 Move X8, [X20+312]
	258 Compare X8, 0
	259 JumpIfEqual {519}
	260 Move X8, [X8+872]
	261 Compare X8, 0
	262 JumpIfEqual {519}
	263 Move X8, [X8+56]
	264 Compare X8, 0
	265 JumpIfEqual {519}
	266 Move W9, [X8+24]
	267 NotImplemented "Instruction CMP not yet implemented."
	268 Move W9, 376
	269 NotImplemented "Instruction SMADDL not yet implemented."
	270 Move W9, [X8+36]
	271 Move W8, [X8+40]
	272 Add W8, W8, W9
	273 Move [X20+568], W8
	274 Add X8, X20, 564
	275 NotImplemented "Instruction MOVI not yet implemented."
	276 Move [X8], D0
	277 Add S0, S11, S12
	278 NotImplemented "Instruction FCMP not yet implemented."
	279 Move X22, [X20+312]
	280 Move V8, [X19+260]
	281 Move V9, [X19+264]
	282 Move X0, X19
	283 Move X1, X31
	284 Call PointerEventData.get_pressEventCamera, X0
	285 Move X8, [X23]
	286 Move X23, X0
	287 Move W9, [X8+224]
	288 Compare W9, 0
	289 JumpIfNotEqual {292}
	290 Move X0, X8
	291 Call 0x1C17DFC
	292 Move S2, W31
	293 Move X0, X22
	294 Move V0, V8
	295 Move V1, V9
	296 Move X1, X23
	297 Move X2, X31
	298 Call TMP_TextUtilities.FindIntersectingWord, X0, X1, X2
	299 Add W31, W0, 1
	300 Move X8, [X20+312]
	301 Compare X8, 0
	302 JumpIfEqual {519}
	303 Move X8, [X8+872]
	304 Compare X8, 0
	305 JumpIfEqual {519}
	306 Move X8, [X8+64]
	307 Compare X8, 0
	308 JumpIfEqual {519}
	309 Move W9, [X8+24]
	310 Move W22, W0
	311 NotImplemented "Instruction CMP not yet implemented."
	312 Move X21, W22
	313 Move W9, 24
	314 NotImplemented "Instruction MADD not yet implemented."
	315 Move W8, [X8+40]
	316 Add X1, X20, 572
	317 Move X0, X20
	318 Move [X20+572], W8
	319 Call TMP_InputField.ClampCaretPos, X0, X1
	320 Move X8, [X20+312]
	321 Compare X8, 0
	322 JumpIfEqual {519}
	323 Move X8, [X8+872]
	324 Compare X8, 0
	325 JumpIfEqual {519}
	326 Move X8, [X8+64]
	327 Compare X8, 0
	328 JumpIfEqual {519}
	329 Move W9, [X8+24]
	330 NotImplemented "Instruction CMP not yet implemented."
	331 Move W9, 24
	332 NotImplemented "Instruction MADD not yet implemented."
	333 Move W8, [X8+44]
	334 Add X1, X20, 576
	335 Move X0, X20
	336 Add W8, W8, 1
	337 Move [X20+576], W8
	338 Call TMP_InputField.ClampCaretPos, X0, X1
	339 Move X8, [X20+312]
	340 Compare X8, 0
	341 JumpIfEqual {519}
	342 Move X8, [X8+872]
	343 Compare X8, 0
	344 JumpIfEqual {519}
	345 Move X21, [X8+56]
	346 Move W22, [X20+572]
	347 Move X0, X20
	348 Call TMP_InputField.get_compositionLength, X0
	349 Compare X21, 0
	350 JumpIfEqual {519}
	351 Move W9, [X21+24]
	352 Add W8, W0, W22
	353 NotImplemented "Instruction CMP not yet implemented."
	354 Move W9, 376
	355 NotImplemented "Instruction SMADDL not yet implemented."
	356 Move W8, [X8+36]
	357 Move [X20+564], W8
	358 Move TEMP, X8
	359 And TEMP, TEMP, -2147483648
	360 Compare TEMP, -2147483648
	361 JumpIfEqual {420}
	362 Move X9, [X20+544]
	363 Compare X9, 0
	364 JumpIfEqual {519}
	365 Move W9, [X9+16]
	366 NotImplemented "Instruction CMP not yet implemented."
	367 Move W21, [X20+564]
	368 Move X0, X20
	369 Call TMP_InputField.get_compositionLength, X0
	370 Add W1, W0, W21
	371 Move X0, X20
	372 Call TMP_InputField.GetCaretPositionFromStringIndex, X0, X1
	373 Move W21, W0
	374 Add X1, X20, 576
	375 Move [X20+576], W0
	376 Move X0, X20
	377 Call TMP_InputField.ClampCaretPos, X0, X1
	378 Add X1, X20, 572
	379 Move X0, X20
	380 Move [X20+572], W21
	381 Call TMP_InputField.ClampCaretPos, X0, X1
	382 Add X1, X20, 572
	383 Move X0, X20
	384 Move [X20+572], W21
	385 Call TMP_InputField.ClampCaretPos, X0, X1
	386 Move W22, [X20+572]
	387 Move X0, X20
	388 Call TMP_InputField.get_compositionLength, X0
	389 Add W8, W22, W0
	390 Add W8, W8, 1
	391 Add X1, X20, 576
	392 Move X0, X20
	393 Move [X20+576], W8
	394 Call TMP_InputField.ClampCaretPos, X0, X1
	395 Move X8, [X20+312]
	396 Compare X8, 0
	397 JumpIfEqual {519}
	398 Move X8, [X8+872]
	399 Compare X8, 0
	400 JumpIfEqual {519}
	401 Move X8, [X8+56]
	402 Compare X8, 0
	403 JumpIfEqual {519}
	404 Move W9, [X8+24]
	405 NotImplemented "Instruction CMP not yet implemented."
	406 Move X22, W21
	407 Move W9, 376
	408 NotImplemented "Instruction MADD not yet implemented."
	409 Move W23, [X8+36]
	410 Move [X20+564], W23
	411 Move TEMP, X23
	412 And TEMP, TEMP, -2147483648
	413 Compare TEMP, -2147483648
	414 JumpIfEqual {461}
	415 Move X8, [X20+544]
	416 Compare X8, 0
	417 JumpIfEqual {519}
	418 Move W8, [X8+16]
	419 NotImplemented "Instruction CMP not yet implemented."
	420 Move W9, W31
	421 Move [X20+564], W9
	422 Move X8, [X20+312]
	423 Compare X8, 0
	424 JumpIfEqual {519}
	425 Move X8, [X8+872]
	426 Compare X8, 0
	427 JumpIfEqual {519}
	428 Move X21, [X8+56]
	429 Move W22, [X20+576]
	430 Move X0, X20
	431 Call TMP_InputField.get_compositionLength, X0
	432 Compare X21, 0
	433 JumpIfEqual {519}
	434 Move W9, [X21+24]
	435 Add W8, W22, W0
	436 Subtract W8, W8, 1
	437 NotImplemented "Instruction CMP not yet implemented."
	438 Move X9, [X20+312]
	439 Compare X9, 0
	440 JumpIfEqual {519}
	441 Move X9, [X9+872]
	442 Compare X9, 0
	443 JumpIfEqual {519}
	444 Move W10, 376
	445 NotImplemented "Instruction SMADDL not yet implemented."
	446 Move X22, [X9+56]
	447 Move W21, [X8+36]
	448 Move W23, [X20+576]
	449 Move X0, X20
	450 Call TMP_InputField.get_compositionLength, X0
	451 Compare X22, 0
	452 JumpIfEqual {519}
	453 Move W9, [X22+24]
	454 Add W8, W23, W0
	455 Subtract W8, W8, 1
	456 NotImplemented "Instruction CMP not yet implemented."
	457 Move W9, 376
	458 NotImplemented "Instruction SMADDL not yet implemented."
	459 Move W8, [X8+40]
	460 Add W8, W8, W21
	461 Move W8, W31
	462 Move W23, W8
	463 Move [X20+564], W8
	464 Move X0, X20
	465 Call TMP_InputField.get_compositionLength, X0
	466 Move X8, [X20+312]
	467 Compare X8, 0
	468 JumpIfEqual {519}
	469 Move X8, [X8+872]
	470 Compare X8, 0
	471 JumpIfEqual {519}
	472 Move X8, [X8+56]
	473 Compare X8, 0
	474 JumpIfEqual {519}
	475 Move W9, [X8+24]
	476 NotImplemented "Instruction CMP not yet implemented."
	477 Move W9, 376
	478 NotImplemented "Instruction MADD not yet implemented."
	479 Move W8, [X8+40]
	480 Add W9, W0, W23
	481 Add W8, W9, W8
	482 Move [X20+568], W8
	483 Move X9, [X20+544]
	484 Compare X9, 0
	485 JumpIfEqual {519}
	486 Move W9, [X9+16]
	487 NotImplemented "Instruction CMP not yet implemented."
	488 Move [X20+568], W9
	489 Move [X20+568], W31
	490 Move X0, X20
	491 Move [X20+713], W31
	492 Call TMP_InputField.UpdateLabel, X0
	493 Move X8, [X19]
	494 Move X0, X19
	495 Move X9, [X8+392]
	496 Move X1, [X8+400]
	497 NotImplemented "Instruction BLR not yet implemented."
	498 Move X20, [X31+96]
	499 Move X19, [X31+104]
	500 Move X22, [X31+80]
	501 Move X21, [X31+88]
	502 Move X24, [X31+64]
	503 Move X23, [X31+72]
	504 Move X30, [X31+56]
	505 Move D9, [X31+40]
	506 Move D8, [X31+48]
	507 Move D11, [X31+24]
	508 Move D10, [X31+32]
	509 Move V12, [X31+16]
	510 Add X31, X31, 112
	511 Return 
	512 Move W9, [X8+24]
	513 Compare W9, 0
	514 JumpIfNotEqual {148}
	515 Move W9, [X8+24]
	516 Compare W9, 0
	517 JumpIfNotEqual {171}
	518 Call 0x1C17F28
	519 Call 0x1C17F20

Method: TMPro.TMP_InputField/EditState KeyPressed(UnityEngine.Event evt)

Disassembly:
	0x03AF3234 LDP X22, X21, [X31 + 0x10]
	0x03AF3238 LDP X30, X23, [X31], #0x30
	0x03AF323C B 0x3AEE318
	0x03AF3240 BL 0x1C16F20
	0x03AF3244 BL 0x1C16F28
	0x03AF3248 STR X30, [X31 - 0x40]!
	0x03AF324C STP X24, X23, [X31 + 0x10]
	0x03AF3250 STP X22, X21, [X31 + 0x20]
	0x03AF3254 STP X20, X19, [X31 + 0x30]
	0x03AF3258 ADRP X22, 0x8EF000
	0x03AF325C LDRB W8, [X22 + 0x606]
	0x03AF3260 MOV W21, W2
	0x03AF3264 MOV W20, W1
	0x03AF3268 MOV X19, X0
	0x03AF326C TBNZ X8, 0x0, 0x3AF3284
	0x03AF3270 ADRP X0, 0x602000
	0x03AF3274 LDR X0, [X0 + 0x170]
	0x03AF3278 BL 0x1C16CF4
	0x03AF327C MOVZ W8, 0x1
	0x03AF3280 STRB W8, [X22 + 0x606]
	0x03AF3284 LDR W22, [X19 + 0x234]
	0x03AF3288 MOV X0, X19
	0x03AF328C BL 0x3AEC28C
	0x03AF3290 LDR W23, [X19 + 0x238]
	0x03AF3294 ADD W22, W0, W22
	0x03AF3298 MOV X0, X19
	0x03AF329C BL 0x3AEC28C
	0x03AF32A0 ADD W8, W0, W23
	0x03AF32A4 CMP W22, W8
	0x03AF32A8 B.EQ 0x3AF3314
	0x03AF32AC TBNZ X20, 0x0, 0x3AF3314
	0x03AF32B0 LDR W20, [X19 + 0x234]
	0x03AF32B4 MOV X0, X19
	0x03AF32B8 BL 0x3AEC28C
	0x03AF32BC LDR W21, [X19 + 0x238]
	0x03AF32C0 ADD W20, W0, W20
	0x03AF32C4 MOV X0, X19
	0x03AF32C8 BL 0x3AEC28C
	0x03AF32CC ADD W8, W0, W21
	0x03AF32D0 CMP W20, W8
	0x03AF32D4 CSEL W8, W20, W8, GT
	0x03AF32D8 STR W8, [X19 + 0x238]
	0x03AF32DC TBNZ X8, 0x1F, 0x3AF33C0
	0x03AF32E0 LDR X9, [X19 + 0x220]
	0x03AF32E4 CBZ X9, 0x3AF363C
	0x03AF32E8 LDR W10, [X9 + 0x10]
	0x03AF32EC MOV W20, W8
	0x03AF32F0 CMP W10, W8
	0x03AF32F4 B.GE 0x3AF3300
	0x03AF32F8 MOV W20, W10
	0x03AF32FC STR W10, [X19 + 0x238]
	0x03AF3300 STR W8, [X19 + 0x234]
	0x03AF3304 LDR W9, [X9 + 0x10]
	0x03AF3308 CMP W9, W8
	0x03AF330C CSEL W8, W9, W8, LT
	0x03AF3310 B 0x3AF33CC
	0x03AF3314 TBZ X21, 0x0, 0x3AF332C
	0x03AF3318 MOV X0, X19
	0x03AF331C BL 0x3AF3CC4
	0x03AF3320 MOV W21, W0
	0x03AF3324 TBNZ X20, 0x0, 0x3AF341C
	0x03AF3328 B 0x3AF34C4
	0x03AF332C LDRB W8, [X19 + 0x2D9]
	0x03AF3330 CBZ W8, 0x3AF343C
	0x03AF3334 LDR W22, [X19 + 0x238]
	0x03AF3338 MOV X0, X19
	0x03AF333C BL 0x3AEC28C
	0x03AF3340 LDR X21, [X19 + 0x220]
	0x03AF3344 CBZ X21, 0x3AF363C
	0x03AF3348 LDR W8, [X21 + 0x10]
	0x03AF334C ADD W9, W0, W22
	0x03AF3350 CMP W9, W8
	0x03AF3354 B.GE 0x3AF3404
	0x03AF3358 LDR W22, [X19 + 0x238]
	0x03AF335C MOV X0, X19
	0x03AF3360 BL 0x3AEC28C
	0x03AF3364 ADD W1, W0, W22
	0x03AF3368 MOV X0, X21
	0x03AF336C MOV X2, X31
	0x03AF3370 BL 0x3222A1C
	0x03AF3374 ADRP X8, 0x602000
	0x03AF3378 LDR X8, [X8 + 0x170]
	0x03AF337C MOV W21, W0
	0x03AF3380 LDR X8, [X8]
	0x03AF3384 LDR W9, [X8 + 0xE0]
	0x03AF3388 CBNZ W9, 0x3AF3394
	0x03AF338C MOV X0, X8
	0x03AF3390 BL 0x1C16DFC
	0x03AF3394 MOV W0, W21
	0x03AF3398 MOV X1, X31
	0x03AF339C BL 0x331BFEC
	0x03AF33A0 TBZ X0, 0x0, 0x3AF3404
	0x03AF33A4 LDR W21, [X19 + 0x238]
	0x03AF33A8 MOV X0, X19
	0x03AF33AC BL 0x3AEC28C
	0x03AF33B0 ADD W8, W21, W0
	0x03AF33B4 ADD W21, W8, 0x2
	0x03AF33B8 TBNZ X20, 0x0, 0x3AF341C
	0x03AF33BC B 0x3AF34C4
	0x03AF33C0 MOV W8, W31
	0x03AF33C4 MOV W20, W31
	0x03AF33C8 STR W31, [X19 + 0x238]
	0x03AF33CC MOV X0, X19
	0x03AF33D0 STR W8, [X19 + 0x234]
	0x03AF33D4 BL 0x3AEC28C
	0x03AF33D8 ADD W1, W0, W20
	0x03AF33DC MOV X0, X19
	0x03AF33E0 BL 0x3AEF8F4
	0x03AF33E4 MOV W20, W0
	0x03AF33E8 ADD X1, X19, 0x240
	0x03AF33EC STR W0, [X19 + 0x240]
	0x03AF33F0 MOV X0, X19
	0x03AF33F4 BL 0x3AEE318
	0x03AF33F8 ADD X1, X19, 0x23C
	0x03AF33FC STR W20, [X19 + 0x23C]
	0x03AF3400 B 0x3AF3624
	0x03AF3404 LDR W21, [X19 + 0x238]
	0x03AF3408 MOV X0, X19
	0x03AF340C BL 0x3AEC28C
	0x03AF3410 ADD W8, W21, W0
	0x03AF3414 ADD W21, W8, 0x1
	0x03AF3418 TBZ X20, 0x0, 0x3AF34C4
	0x03AF341C STR W21, [X19 + 0x238]
	0x03AF3420 TBNZ X21, 0x1F, 0x3AF3500
	0x03AF3424 LDR X8, [X19 + 0x220]
	0x03AF3428 CBZ X8, 0x3AF363C
	0x03AF342C LDR W8, [X8 + 0x10]
	0x03AF3430 CMP W8, W21
	0x03AF3434 B.LT 0x3AF3504
	0x03AF3438 B 0x3AF350C
	0x03AF343C LDR X8, [X19 + 0x138]
	0x03AF3440 CBZ X8, 0x3AF363C
	0x03AF3444 LDR X8, [X8 + 0x368]
	0x03AF3448 CBZ X8, 0x3AF363C
	0x03AF344C LDR X21, [X8 + 0x38]
	0x03AF3450 LDR W22, [X19 + 0x240]
	0x03AF3454 MOV X0, X19
	0x03AF3458 BL 0x3AEC28C
	0x03AF345C CBZ X21, 0x3AF363C
	0x03AF3460 LDR W9, [X21 + 0x18]
	0x03AF3464 ADD W8, W0, W22
	0x03AF3468 CMP W8, W9
	0x03AF346C B.CS 0x3AF3640
	0x03AF3470 LDR X9, [X19 + 0x138]
	0x03AF3474 CBZ X9, 0x3AF363C
	0x03AF3478 LDR X9, [X9 + 0x368]
	0x03AF347C CBZ X9, 0x3AF363C
	0x03AF3480 MOVZ W10, 0x178
	0x03AF3484 SMADDL X8, X8, X10, X21
	0x03AF3488 LDR X22, [X9 + 0x38]
	0x03AF348C LDR W21, [X8 + 0x24]
	0x03AF3490 LDR W23, [X19 + 0x240]
	0x03AF3494 MOV X0, X19
	0x03AF3498 BL 0x3AEC28C
	0x03AF349C CBZ X22, 0x3AF363C
	0x03AF34A0 LDR W9, [X22 + 0x18]
	0x03AF34A4 ADD W8, W0, W23
	0x03AF34A8 CMP W8, W9
	0x03AF34AC B.CS 0x3AF3640
	0x03AF34B0 MOVZ W9, 0x178
	0x03AF34B4 SMADDL X8, X8, X9, X22
	0x03AF34B8 LDR W8, [X8 + 0x28]
	0x03AF34BC ADD W21, W8, W21
	0x03AF34C0 TBNZ X20, 0x0, 0x3AF341C
	0x03AF34C4 STR W21, [X19 + 0x234]
	0x03AF34C8 TBNZ X21, 0x1F, 0x3AF352C
	0x03AF34CC LDR X8, [X19 + 0x220]
	0x03AF34D0 CBZ X8, 0x3AF363C
	0x03AF34D4 LDR W9, [X8 + 0x10]
	0x03AF34D8 MOV W22, W21
	0x03AF34DC CMP W9, W21
	0x03AF34E0 B.GE 0x3AF34EC
	0x03AF34E4 MOV W22, W9
	0x03AF34E8 STR W9, [X19 + 0x234]
	0x03AF34EC STR W21, [X19 + 0x238]
	0x03AF34F0 LDR W8, [X8 + 0x10]
	0x03AF34F4 CMP W8, W21
	0x03AF34F8 CSEL W8, W8, W21, LT
	0x03AF34FC B 0x3AF3538
	0x03AF3500 MOV W8, W31
	0x03AF3504 MOV W21, W8
	0x03AF3508 STR W8, [X19 + 0x238]
	0x03AF350C MOV X0, X19
	0x03AF3510 BL 0x3AEC28C
	0x03AF3514 ADD W1, W0, W21
	0x03AF3518 MOV X0, X19
	0x03AF351C BL 0x3AEF8F4
	0x03AF3520 ADD X1, X19, 0x240
	0x03AF3524 STR W0, [X19 + 0x240]
	0x03AF3528 B 0x3AF3624
	0x03AF352C MOV W8, W31
	0x03AF3530 MOV W22, W31
	0x03AF3534 STR W31, [X19 + 0x234]
	0x03AF3538 MOV X0, X19
	0x03AF353C STR W8, [X19 + 0x238]
	0x03AF3540 BL 0x3AEC28C
	0x03AF3544 LDR X8, [X19 + 0x138]
	0x03AF3548 CBZ X8, 0x3AF363C
	0x03AF354C LDR X8, [X8 + 0x368]
	0x03AF3550 CBZ X8, 0x3AF363C
	0x03AF3554 LDR X21, [X8 + 0x38]
	0x03AF3558 LDR W23, [X19 + 0x23C]
	0x03AF355C MOV W20, W0
	0x03AF3560 MOV X0, X19
	0x03AF3564 BL 0x3AEC28C
	0x03AF3568 CBZ X21, 0x3AF363C
	0x03AF356C LDR W9, [X21 + 0x18]
	0x03AF3570 ADD W8, W0, W23
	0x03AF3574 CMP W8, W9
	0x03AF3578 B.CS 0x3AF3640
	0x03AF357C LDR X9, [X19 + 0x138]
	0x03AF3580 CBZ X9, 0x3AF363C
	0x03AF3584 LDR X9, [X9 + 0x368]
	0x03AF3588 CBZ X9, 0x3AF363C
	0x03AF358C MOVZ W10, 0x178
	0x03AF3590 SMADDL X8, X8, X10, X21
	0x03AF3594 LDR X23, [X9 + 0x38]
	0x03AF3598 LDR W21, [X8 + 0x24]
	0x03AF359C LDR W24, [X19 + 0x23C]
	0x03AF35A0 MOV X0, X19
	0x03AF35A4 BL 0x3AEC28C
	0x03AF35A8 CBZ X23, 0x3AF363C
	0x03AF35AC LDR W9, [X23 + 0x18]
	0x03AF35B0 ADD W8, W0, W24
	0x03AF35B4 CMP W8, W9
	0x03AF35B8 B.CS 0x3AF3640
	0x03AF35BC MOVZ W9, 0x178
	0x03AF35C0 SMADDL X8, X8, X9, X23
	0x03AF35C4 LDR W8, [X8 + 0x28]
	0x03AF35C8 ADD W9, W20, W22
	0x03AF35CC ADD W8, W8, W21
	0x03AF35D0 CMP W9, W8
	0x03AF35D4 B.GE 0x3AF35EC
	0x03AF35D8 LDP X20, X19, [X31 + 0x30]
	0x03AF35DC LDP X22, X21, [X31 + 0x20]
	0x03AF35E0 LDP X24, X23, [X31 + 0x10]
	0x03AF35E4 LDR X30, [X31], #0x40
	0x03AF35E8 RET
	0x03AF35EC LDR W21, [X19 + 0x238]
	0x03AF35F0 MOV X0, X19
	0x03AF35F4 ADD X20, X19, 0x23C
	0x03AF35F8 BL 0x3AEC28C
	0x03AF35FC ADD W1, W0, W21
	0x03AF3600 MOV X0, X19
	0x03AF3604 BL 0x3AEF8F4
	0x03AF3608 MOV W21, W0
	0x03AF360C STR W0, [X19 + 0x23C]
	0x03AF3610 MOV X0, X19
	0x03AF3614 MOV X1, X20
	0x03AF3618 BL 0x3AEE318
	0x03AF361C ADD X1, X19, 0x240
	0x03AF3620 STR W21, [X19 + 0x240]
	0x03AF3624 MOV X0, X19
	0x03AF3628 LDP X20, X19, [X31 + 0x30]
	0x03AF362C LDP X22, X21, [X31 + 0x20]
	0x03AF3630 LDP X24, X23, [X31 + 0x10]
	0x03AF3634 LDR X30, [X31], #0x40
	0x03AF3638 B 0x3AEE318
	0x03AF363C BL 0x1C16F20
	0x03AF3640 BL 0x1C16F28
	0x03AF3644 AND W1, W1, 0x1
	0x03AF3648 MOVZ W2, 0x1
	0x03AF364C B 0x3AF4680
	0x03AF3650 AND W1, W1, 0x1
	0x03AF3654 MOVZ W2, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x8F0000
	008 Move W8, [X20+1537]
	009 Move X21, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x667000
	016 Move X0, [X0+384]
	017 Call 0x1C17CF4
	018 Move X0, 0x601000
	019 Move X0, [X0+2440]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1537], W8
	023 Compare X21, 0
	024 JumpIfEqual {252}
	025 Move X0, X21
	026 Move X1, X31
	027 Call Event.get_modifiers, X0
	028 Move W20, W0
	029 Move X0, X31
	030 Call SystemInfo.get_operatingSystemFamily
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move W8, 2
	033 Move W9, 8
	034 NotImplemented "Instruction CSEL not yet implemented."
	035 And W23, W8, W20
	036 NotImplemented "Instruction CSET not yet implemented."
	037 And W9, W20, 4
	038 And W10, W20, 1
	039 Or W8, W8, W9
	040 Move X0, X21
	041 Move X1, X31
	042 Or W22, W10, W8
	043 Call Event.get_keyCode, X0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Subtract W8, W0, 271
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X9, -49655808
	049 Add X9, X9, 3085
	050 NotImplemented "Instruction ADR not yet implemented."
	051 Move W11, [X9]
	052 Add X10, X10, X11
	053 CallNoReturn X10
	054 And W1, W20, 1
	055 Move W2, 1
	056 Move X0, X19
	057 Call TMP_InputField.MoveUp, X0, X1, X2
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction CMP not yet implemented."
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move TEMP, X22
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {167}
	065 Move X0, X19
	066 Call TMP_InputField.SelectAll, X0
	067 NotImplemented "Instruction CMP not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move TEMP, X22
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfEqual {167}
	073 Move X8, 0x667000
	074 Move X8, [X8+384]
	075 Move X0, [X8]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Call TMP_InputField.get_clipboard
	081 Move X8, [X19]
	082 Move X1, X0
	083 Move X0, X19
	084 Move X9, [X8+1384]
	085 Move X2, [X8+1392]
	086 NotImplemented "Instruction BLR not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move W8, [X19+400]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move W0, 1
	092 Move [X19+716], W0
	093 Move W0, 1
	094 Move [X19+716], W0
	095 Move [X19+664], W0
	096 Move TEMP, X22
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfEqual {167}
	100 Move W8, [X19+388]
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X8, 0x667000
	103 Move X8, [X8+384]
	104 Move X0, [X8]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 Move X8, 0x601000
	110 Move X8, [X8+2440]
	111 Move X0, [X8]
	112 Move X0, X19
	113 Call TMP_InputField.Backspace, X0
	114 NotImplemented "Instruction CMP not yet implemented."
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X0, X19
	117 Call TMP_InputField.DeleteKey, X0
	118 And W1, W20, 1
	119 Move W2, 1
	120 Move X0, X19
	121 Call TMP_InputField.MoveDown, X0, X1, X2
	122 NotImplemented "Instruction CMP not yet implemented."
	123 And W1, W20, 1
	124 NotImplemented "Instruction CSET not yet implemented."
	125 Move X0, X19
	126 Call TMP_InputField.MoveRight, X0, X1, X2
	127 NotImplemented "Instruction CMP not yet implemented."
	128 And W1, W20, 1
	129 NotImplemented "Instruction CSET not yet implemented."
	130 Move X0, X19
	131 Call TMP_InputField.MoveLeft, X0, X1, X2
	132 NotImplemented "Instruction CMP not yet implemented."
	133 And W1, W20, 1
	134 NotImplemented "Instruction CSET not yet implemented."
	135 Move X0, X19
	136 Call TMP_InputField.MoveToStartOfLine, X0, X1, X2
	137 NotImplemented "Instruction CMP not yet implemented."
	138 And W1, W20, 1
	139 NotImplemented "Instruction CSET not yet implemented."
	140 Move X0, X19
	141 Call TMP_InputField.MoveToEndOfLine, X0, X1, X2
	142 And W1, W20, 1
	143 Move W2, 1
	144 Move X0, X19
	145 Call TMP_InputField.MovePageUp, X0, X1, X2
	146 And W1, W20, 1
	147 Move W2, 1
	148 Move X0, X19
	149 Call TMP_InputField.MovePageDown, X0, X1, X2
	150 Move X0, X19
	151 Call TMP_InputField.GetSelectedString, X0
	152 Move X8, 0x667000
	153 Move X8, [X8+384]
	154 Move X19, X0
	155 Move X8, [X8]
	156 Move W9, [X8+224]
	157 Compare W9, 0
	158 JumpIfNotEqual {161}
	159 Move X0, X8
	160 Call 0x1C17DFC
	161 Move X0, X19
	162 Call TMP_InputField.set_clipboard, X0
	163 Move TEMP, X22
	164 And TEMP, TEMP, 1
	165 Compare TEMP, 1
	166 JumpIfNotEqual {219}
	167 Move X0, X21
	168 Move X1, X31
	169 Call Event.get_character, X0
	170 Move W8, [X19+400]
	171 And W9, W0, 0xFFFF
	172 Subtract W8, W8, 1
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Move W8, W0
	175 NotImplemented "Instruction CMP not yet implemented."
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Subtract W10, W9, 9
	178 NotImplemented "Instruction CMP not yet implemented."
	179 Move W0, W31
	180 NotImplemented "Instruction CMP not yet implemented."
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Move W8, 10
	183 Move X9, [X19]
	184 And W10, W8, 0xFFFF
	185 NotImplemented "Instruction CMP not yet implemented."
	186 NotImplemented "Instruction CSET not yet implemented."
	187 Move X11, [X9+1336]
	188 Move X2, [X9+1344]
	189 And W31, W20, W10
	190 Move W9, 11
	191 NotImplemented "Instruction CSEL not yet implemented."
	192 Move X0, X19
	193 Move W1, W20
	194 NotImplemented "Instruction BLR not yet implemented."
	195 Move TEMP, X0
	196 And TEMP, TEMP, 1
	197 Compare TEMP, 1
	198 JumpIfNotEqual {205}
	199 Move X8, [X19]
	200 Move X0, X19
	201 Move W1, W20
	202 Move X9, [X8+1400]
	203 Move X2, [X8+1408]
	204 NotImplemented "Instruction BLR not yet implemented."
	205 And W31, W20, 0xFFFF
	206 Move X0, X19
	207 Call TMP_InputField.get_compositionLength, X0
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Move X0, X19
	210 Call TMP_InputField.UpdateLabel, X0
	211 Move W0, W31
	212 Move X20, [X31+32]
	213 Move X19, [X31+40]
	214 Move X22, [X31+16]
	215 Move X21, [X31+24]
	216 Move X30, [X31+48]
	217 Move X23, [X31+56]
	218 Return X0
	219 Move W8, [X19+388]
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Move X8, 0x667000
	222 Move X8, [X8+384]
	223 Move X0, [X8]
	224 Move W8, [X0+224]
	225 Compare W8, 0
	226 JumpIfNotEqual {228}
	227 Call 0x1C17DFC
	228 Move X8, 0x601000
	229 Move X8, [X8+2440]
	230 Move X20, [X8]
	231 Move X0, X19
	232 Call TMP_InputField.GetSelectedString, X0
	233 Move X8, 0x667000
	234 Move X8, [X8+384]
	235 Move X20, X0
	236 Move X8, [X8]
	237 Move W9, [X8+224]
	238 Compare W9, 0
	239 JumpIfNotEqual {242}
	240 Move X0, X8
	241 Call 0x1C17DFC
	242 Move X0, X20
	243 Call TMP_InputField.set_clipboard, X0
	244 Move X0, X19
	245 Call TMP_InputField.Delete, X0
	246 Move X0, X19
	247 Call TMP_InputField.UpdateTouchKeyboardFromEditChanges, X0
	248 Move X0, X19
	249 Call TMP_InputField.UpdateLabel, X0
	250 Move X0, X19
	251 Call TMP_InputField.SendOnValueChanged, X0
	252 Call 0x1C17F20

Method: System.Boolean IsValidChar(System.Char c)

Disassembly:
	0x03AF4674 LDP X30, X25, [X31], #0x40
	0x03AF4678 RET
	0x03AF467C BL 0x1C16F20
	0x03AF4680 STP X30, X25, [X31 - 0x40]!
	0x03AF4684 STP X24, X23, [X31 + 0x10]
	0x03AF4688 STP X22, X21, [X31 + 0x20]
	0x03AF468C STP X20, X19, [X31 + 0x30]
	0x03AF4690 LDR W22, [X0 + 0x234]

ISIL:
	001 And W8, W1, 0xFFFF
	002 Move W0, W31
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Return X0
	005 Move W0, 1
	006 Return X0

Method: System.Void ProcessEvent(UnityEngine.Event e)

Disassembly:
	0x03AF4694 MOV W21, W2

ISIL:
	001 Call TMP_InputField.KeyPressed, X0, X1
	002 Return 

Method: System.Void OnUpdateSelected(UnityEngine.EventSystems.BaseEventData eventData)

Disassembly:
	0x03AF4698 MOV X19, X0
	0x03AF469C MOV W20, W1
	0x03AF46A0 BL 0x3AEC28C
	0x03AF46A4 LDR W23, [X19 + 0x238]
	0x03AF46A8 ADD W22, W0, W22
	0x03AF46AC MOV X0, X19
	0x03AF46B0 BL 0x3AEC28C
	0x03AF46B4 ADD W8, W0, W23
	0x03AF46B8 CMP W22, W8
	0x03AF46BC B.EQ 0x3AF4714
	0x03AF46C0 TBNZ X20, 0x0, 0x3AF4714
	0x03AF46C4 LDR W23, [X19 + 0x23C]
	0x03AF46C8 MOV X0, X19
	0x03AF46CC ADD X22, X19, 0x23C
	0x03AF46D0 BL 0x3AEC28C
	0x03AF46D4 LDR W24, [X19 + 0x240]
	0x03AF46D8 ADD W25, W0, W23
	0x03AF46DC MOV X0, X19
	0x03AF46E0 ADD X23, X19, 0x240
	0x03AF46E4 BL 0x3AEC28C
	0x03AF46E8 ADD W8, W0, W24
	0x03AF46EC CMP W25, W8
	0x03AF46F0 CSEL W24, W25, W8, LT
	0x03AF46F4 MOV X0, X19
	0x03AF46F8 MOV X1, X23
	0x03AF46FC STR W24, [X19 + 0x240]
	0x03AF4700 BL 0x3AEE318
	0x03AF4704 MOV X0, X19
	0x03AF4708 MOV X1, X22
	0x03AF470C STR W24, [X19 + 0x23C]
	0x03AF4710 BL 0x3AEE318
	0x03AF4714 LDR W8, [X19 + 0x190]
	0x03AF4718 SUB W8, W8, 0x1
	0x03AF471C CMP W8, 0x1
	0x03AF4720 B.HI 0x3AF47B4
	0x03AF4724 LDR W22, [X19 + 0x240]
	0x03AF4728 MOV X0, X19
	0x03AF472C BL 0x3AEC28C
	0x03AF4730 ADD W1, W0, W22
	0x03AF4734 AND W2, W21, 0x1
	0x03AF4738 MOV X0, X19
	0x03AF473C BL 0x3AF3E50
	0x03AF4740 MOV W21, W0
	0x03AF4744 TBNZ X20, 0x0, 0x3AF47BC
	0x03AF4748 ADD X1, X19, 0x23C
	0x03AF474C MOV X0, X19
	0x03AF4750 STR W21, [X19 + 0x23C]
	0x03AF4754 BL 0x3AEE318
	0x03AF4758 ADD X1, X19, 0x240
	0x03AF475C MOV X0, X19
	0x03AF4760 STR W21, [X19 + 0x240]
	0x03AF4764 BL 0x3AEE318
	0x03AF4768 LDR W20, [X19 + 0x240]
	0x03AF476C MOV X0, X19
	0x03AF4770 BL 0x3AEC28C
	0x03AF4774 ADD W1, W0, W20
	0x03AF4778 MOV X0, X19
	0x03AF477C BL 0x3AEFC5C
	0x03AF4780 STR W0, [X19 + 0x234]
	0x03AF4784 TBNZ X0, 0x1F, 0x3AF4804
	0x03AF4788 LDR X8, [X19 + 0x220]
	0x03AF478C CBZ X8, 0x3AF482C
	0x03AF4790 LDR W9, [X8 + 0x10]
	0x03AF4794 CMP W9, W0
	0x03AF4798 B.GE 0x3AF47A0
	0x03AF479C STR W9, [X19 + 0x234]
	0x03AF47A0 STR W0, [X19 + 0x238]
	0x03AF47A4 LDR W8, [X8 + 0x10]
	0x03AF47A8 CMP W8, W0
	0x03AF47AC CSEL W8, W8, W0, LT
	0x03AF47B0 B 0x3AF4814
	0x03AF47B4 MOV W21, W31
	0x03AF47B8 TBZ X20, 0x0, 0x3AF4748
	0x03AF47BC ADD X1, X19, 0x240
	0x03AF47C0 MOV X0, X19
	0x03AF47C4 STR W21, [X19 + 0x240]
	0x03AF47C8 BL 0x3AEE318
	0x03AF47CC LDR W20, [X19 + 0x240]
	0x03AF47D0 MOV X0, X19
	0x03AF47D4 BL 0x3AEC28C
	0x03AF47D8 ADD W1, W0, W20
	0x03AF47DC MOV X0, X19
	0x03AF47E0 BL 0x3AEFC5C
	0x03AF47E4 STR W0, [X19 + 0x238]
	0x03AF47E8 TBNZ X0, 0x1F, 0x3AF4810
	0x03AF47EC LDR X8, [X19 + 0x220]
	0x03AF47F0 CBZ X8, 0x3AF482C
	0x03AF47F4 LDR W8, [X8 + 0x10]
	0x03AF47F8 CMP W8, W0
	0x03AF47FC B.LT 0x3AF4814
	0x03AF4800 B 0x3AF4818
	0x03AF4804 MOV W8, W31
	0x03AF4808 STR W31, [X19 + 0x234]
	0x03AF480C B 0x3AF4814
	0x03AF4810 MOV W8, W31
	0x03AF4814 STR W8, [X19 + 0x238]
	0x03AF4818 LDP X20, X19, [X31 + 0x30]
	0x03AF481C LDP X22, X21, [X31 + 0x20]
	0x03AF4820 LDP X24, X23, [X31 + 0x10]
	0x03AF4824 LDP X30, X25, [X31], #0x40
	0x03AF4828 RET
	0x03AF482C BL 0x1C16F20
	0x03AF4830 SUB X31, X31, 0x90
	0x03AF4834 STR D12, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x8EF000
	008 Move W8, [X21+1538]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x666000
	016 Move X0, [X0+392]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1538], W8
	020 Move W8, [X20+624]
	021 Compare W8, 0
	022 JumpIfEqual {107}
	023 Move X0, [X20+752]
	024 Move X1, X31
	025 Call Event.PopEvent, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {120}
	030 Move X22, 0x666000
	031 Move X22, [X22+392]
	032 Move W23, W31
	033 Move W21, 1
	034 Move X0, [X20+752]
	035 Compare X0, 0
	036 JumpIfEqual {133}
	037 Move X1, X31
	038 Call Event.get_rawType, X0
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Subtract W8, W0, 13
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X0, [X20+752]
	044 Compare X0, 0
	045 JumpIfEqual {133}
	046 Move X1, X31
	047 Call Event.get_commandName, X0
	048 Move X1, [X22]
	049 Move X2, X31
	050 Call String.op_Equality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {94}
	055 Move X0, [X20+752]
	056 Move X1, X31
	057 Call Event.PopEvent, X0
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {34}
	062 Move W8, [X20+696]
	063 Compare W8, 0
	064 JumpIfEqual {82}
	065 Move X0, X20
	066 Call TMP_InputField.get_compositionLength, X0
	067 Compare W0, 0
	068 JumpIfNotEqual {82}
	069 Move X0, [X20+752]
	070 Compare X0, 0
	071 JumpIfEqual {133}
	072 Move X1, X31
	073 Call Event.get_character, X0
	074 And W31, W0, 0xFFFF
	075 Move X0, [X20+752]
	076 Compare X0, 0
	077 JumpIfEqual {133}
	078 Move X1, X31
	079 Call Event.get_modifiers, X0
	080 Compare W0, 0
	081 JumpIfEqual {99}
	082 Move X1, [X20+752]
	083 Move X0, X20
	084 Call TMP_InputField.KeyPressed, X0, X1
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move W8, [X20+664]
	087 Compare W8, 0
	088 JumpIfNotEqual {91}
	089 Move X0, X20
	090 Call TMP_InputField.SendOnSubmit, X0
	091 Move X0, X20
	092 Move W1, W31
	093 Call TMP_InputField.DeactivateInputField, X0, X1
	094 Move X0, X20
	095 Call TMP_InputField.SelectAll, X0
	096 Move X0, X20
	097 Move [X20+682], W21
	098 Call TMP_InputField.UpdateLabel, X0
	099 Move X0, [X20+752]
	100 Move X1, X31
	101 Call Event.PopEvent, X0
	102 Move W23, 1
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfEqual {34}
	107 Move X20, [X31+32]
	108 Move X19, [X31+40]
	109 Move X22, [X31+16]
	110 Move X21, [X31+24]
	111 Move X30, [X31+48]
	112 Move X23, [X31+56]
	113 Return 
	114 Move TEMP, X23
	115 And TEMP, TEMP, 1
	116 Compare TEMP, 1
	117 JumpIfNotEqual {120}
	118 Move X0, X20
	119 Call TMP_InputField.UpdateLabel, X0
	120 Compare X19, 0
	121 JumpIfEqual {133}
	122 Move X8, [X19]
	123 Move X0, X19
	124 Move X20, [X31+32]
	125 Move X19, [X31+40]
	126 Move X22, [X31+16]
	127 Move X21, [X31+24]
	128 Move X2, [X8+392]
	129 Move X1, [X8+400]
	130 Move X30, [X31+48]
	131 Move X23, [X31+56]
	132 CallNoReturn X2
	133 Call 0x1C17F20

Method: System.Void OnScroll(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03AF4894 LDR W24, [X19 + 0x240]
	0x03AF4898 ADD W25, W0, W23
	0x03AF489C MOV X0, X19
	0x03AF48A0 ADD X23, X19, 0x240
	0x03AF48A4 BL 0x3AEC28C
	0x03AF48A8 ADD W8, W0, W24
	0x03AF48AC CMP W25, W8
	0x03AF48B0 CSEL W24, W25, W8, LT
	0x03AF48B4 MOV X0, X19
	0x03AF48B8 MOV X1, X23
	0x03AF48BC STR W24, [X19 + 0x240]
	0x03AF48C0 BL 0x3AEE318
	0x03AF48C4 MOV X0, X19
	0x03AF48C8 MOV X1, X22
	0x03AF48CC STR W24, [X19 + 0x23C]
	0x03AF48D0 BL 0x3AEE318
	0x03AF48D4 LDR W8, [X19 + 0x190]
	0x03AF48D8 SUB W8, W8, 0x1
	0x03AF48DC CMP W8, 0x1
	0x03AF48E0 B.HI 0x3AF4974
	0x03AF48E4 LDR W22, [X19 + 0x240]
	0x03AF48E8 MOV X0, X19
	0x03AF48EC BL 0x3AEC28C
	0x03AF48F0 ADD W1, W0, W22
	0x03AF48F4 AND W2, W21, 0x1
	0x03AF48F8 MOV X0, X19
	0x03AF48FC BL 0x3AF40EC
	0x03AF4900 MOV W21, W0
	0x03AF4904 TBNZ X20, 0x0, 0x3AF497C
	0x03AF4908 ADD X1, X19, 0x23C
	0x03AF490C MOV X0, X19
	0x03AF4910 STR W21, [X19 + 0x23C]
	0x03AF4914 BL 0x3AEE318
	0x03AF4918 ADD X1, X19, 0x240
	0x03AF491C MOV X0, X19
	0x03AF4920 STR W21, [X19 + 0x240]
	0x03AF4924 BL 0x3AEE318
	0x03AF4928 LDR W20, [X19 + 0x240]
	0x03AF492C MOV X0, X19
	0x03AF4930 BL 0x3AEC28C
	0x03AF4934 ADD W1, W0, W20
	0x03AF4938 MOV X0, X19
	0x03AF493C BL 0x3AEFC5C
	0x03AF4940 STR W0, [X19 + 0x234]
	0x03AF4944 TBNZ X0, 0x1F, 0x3AF49C4
	0x03AF4948 LDR X8, [X19 + 0x220]
	0x03AF494C CBZ X8, 0x3AF4AD8
	0x03AF4950 LDR W9, [X8 + 0x10]
	0x03AF4954 CMP W9, W0
	0x03AF4958 B.GE 0x3AF4960
	0x03AF495C STR W9, [X19 + 0x234]
	0x03AF4960 STR W0, [X19 + 0x238]
	0x03AF4964 LDR W8, [X8 + 0x10]
	0x03AF4968 CMP W8, W0
	0x03AF496C CSEL W8, W8, W0, LT
	0x03AF4970 B 0x3AF49D4
	0x03AF4974 MOV W21, W31
	0x03AF4978 TBZ X20, 0x0, 0x3AF4908
	0x03AF497C ADD X1, X19, 0x240
	0x03AF4980 MOV X0, X19
	0x03AF4984 STR W21, [X19 + 0x240]
	0x03AF4988 BL 0x3AEE318
	0x03AF498C LDR W20, [X19 + 0x240]
	0x03AF4990 MOV X0, X19
	0x03AF4994 BL 0x3AEC28C
	0x03AF4998 ADD W1, W0, W20
	0x03AF499C MOV X0, X19
	0x03AF49A0 BL 0x3AEFC5C
	0x03AF49A4 STR W0, [X19 + 0x238]
	0x03AF49A8 TBNZ X0, 0x1F, 0x3AF49D0
	0x03AF49AC LDR X8, [X19 + 0x220]
	0x03AF49B0 CBZ X8, 0x3AF4AD8
	0x03AF49B4 LDR W8, [X8 + 0x10]
	0x03AF49B8 CMP W8, W0
	0x03AF49BC B.LT 0x3AF49D4
	0x03AF49C0 B 0x3AF49D8
	0x03AF49C4 MOV W8, W31
	0x03AF49C8 STR W31, [X19 + 0x234]
	0x03AF49CC B 0x3AF49D4
	0x03AF49D0 MOV W8, W31
	0x03AF49D4 STR W8, [X19 + 0x238]
	0x03AF49D8 LDR W8, [X19 + 0x190]
	0x03AF49DC CBZ W8, 0x3AF4AB4
	0x03AF49E0 LDR X0, [X19 + 0x110]
	0x03AF49E4 CBZ X0, 0x3AF4AD8
	0x03AF49E8 MOV X1, X31
	0x03AF49EC BL 0x3C3E51C
	0x03AF49F0 LDR X0, [X19 + 0x138]
	0x03AF49F4 CBZ X0, 0x3AF4AD8
	0x03AF49F8 MOV X1, X31
	0x03AF49FC MOV V8.16B, V3.16B
	0x03AF4A00 BL 0x3AF8E0C
	0x03AF4A04 CBZ X0, 0x3AF4AD8
	0x03AF4A08 MOV X1, X31
	0x03AF4A0C BL 0x3C3F58C
	0x03AF4A10 LDR X0, [X19 + 0x138]
	0x03AF4A14 CBZ X0, 0x3AF4AD8
	0x03AF4A18 ADD X8, X31, 0x8
	0x03AF4A1C MOV X1, X31
	0x03AF4A20 MOV V9.16B, V1.16B
	0x03AF4A24 BL 0x3AF8FDC
	0x03AF4A28 LDR X0, [X19 + 0x110]
	0x03AF4A2C CBZ X0, 0x3AF4AD8
	0x03AF4A30 LDR V11, [X31 + 0xC]
	0x03AF4A34 LDR V12, [X31 + 0x18]
	0x03AF4A38 MOV X1, X31
	0x03AF4A3C BL 0x3C3F58C
	0x03AF4A40 LDR X0, [X19 + 0x110]
	0x03AF4A44 CBZ X0, 0x3AF4AD8
	0x03AF4A48 FADD S0, S11, S12

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8EF000
	007 Move W8, [X21+1539]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x666000
	015 Move X0, [X0+400]
	016 Call 0x1C17CF4
	017 Move X0, 0x600000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1539], W8
	022 Move W8, [X19+400]
	023 Compare W8, 0
	024 JumpIfEqual {94}
	025 Move X0, [X19+312]
	026 Compare X0, 0
	027 JumpIfEqual {132}
	028 Move X8, [X0]
	029 Move X9, [X8+1672]
	030 Move X1, [X8+1680]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move X0, [X19+272]
	033 Compare X0, 0
	034 JumpIfEqual {132}
	035 Move X1, X31
	036 Move V8, V0
	037 Call RectTransform.get_rect, X0
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 Compare X20, 0
	040 JumpIfEqual {132}
	041 Move V8, [X20+320]
	042 Move X0, X19
	043 Call TMP_InputField.GetScrollPositionRelativeToViewport, X0
	044 Move X8, [X19+312]
	045 Move [X19+376], S0
	046 Compare X8, 0
	047 JumpIfEqual {132}
	048 Move X8, [X8+872]
	049 Compare X8, 0
	050 JumpIfEqual {132}
	051 Move V1, [X8+44]
	052 Move V3, [X19+380]
	053 Move S4, 1
	054 NotImplemented "Instruction FNEG not yet implemented."
	055 NotImplemented "Instruction SCVTF not yet implemented."
	056 NotImplemented "Instruction FDIV not yet implemented."
	057 Multiply S1, S1, S2
	058 Multiply S1, S3, S1
	059 Add S0, S0, S1
	060 NotImplemented "Instruction FMIN not yet implemented."
	061 NotImplemented "Instruction FCMP not yet implemented."
	062 Move S0, W31
	063 NotImplemented "Instruction FCSEL not yet implemented."
	064 Move X0, X19
	065 Move [X19+376], S0
	066 Call TMP_InputField.AdjustTextPositionRelativeToViewport, X0, V0
	067 Move X8, 0x600000
	068 Move X8, [X8+1432]
	069 Move X20, [X19+336]
	070 Move X0, [X8]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X0, X20
	076 Move X1, X31
	077 Call Object.op_Implicit, X0
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {113}
	082 Move X0, [X19+336]
	083 Compare X0, 0
	084 JumpIfEqual {132}
	085 Move V0, [X19+376]
	086 Move X20, [X31+32]
	087 Move X19, [X31+40]
	088 Move X30, [X31+16]
	089 Move X21, [X31+24]
	090 Move X1, X31
	091 Move V8, [X31+48]
	092 Call Scrollbar.set_value, X0, V0
	093 Return 
	094 Move X19, [X19+368]
	095 Compare X19, 0
	096 JumpIfEqual {113}
	097 Move X10, 0x666000
	098 Move X8, [X19]
	099 Move X10, [X10+400]
	100 NotImplemented "Instruction LDRH not yet implemented."
	101 Move X1, [X10]
	102 Compare X9, 0
	103 JumpIfEqual {110}
	104 Move X10, [X8+176]
	105 Add X10, X10, 8
	106 NotImplemented "Instruction LDUR not yet implemented."
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Subtract X9, X9, 1
	109 Add X10, X10, 16
	110 Move X0, X19
	111 Move W2, W31
	112 Call 0x1C5D788
	113 Move X20, [X31+32]
	114 Move X19, [X31+40]
	115 Move X30, [X31+16]
	116 Move X21, [X31+24]
	117 Move V8, [X31+48]
	118 Return 
	119 NotImplemented "Instruction LDRSW not yet implemented."
	120 Add X8, X8, X9
	121 Add X0, X8, 312
	122 Move X3, [X0]
	123 Move X2, [X0+8]
	124 Move X0, X19
	125 Move X1, X20
	126 Move X20, [X31+32]
	127 Move X19, [X31+40]
	128 Move X30, [X31+16]
	129 Move X21, [X31+24]
	130 Move V8, [X31+48]
	131 CallNoReturn X3
	132 Call 0x1C17F20

Method: System.Single GetScrollPositionRelativeToViewport()

Disassembly:
	0x03AF4A4C MOV X1, X31
	0x03AF4A50 MOV V10.16B, V1.16B
	0x03AF4A54 FADD S9, S9, S0
	0x03AF4A58 BL 0x3C3E51C
	0x03AF4A5C FADD S0, S3, S1
	0x03AF4A60 LDR X0, [X19 + 0x138]
	0x03AF4A64 FADD S0, S10, S0
	0x03AF4A68 FADD S1, S8, S9
	0x03AF4A6C FSUB S2, S0, S9
	0x03AF4A70 FCMP S0, S1
	0x03AF4A74 FCSEL S8, S8, S2, GT
	0x03AF4A78 CBZ X0, 0x3AF4AD8
	0x03AF4A7C MOV X1, X31
	0x03AF4A80 BL 0x3AF8E0C
	0x03AF4A84 CBZ X0, 0x3AF4AD8
	0x03AF4A88 MOV X1, X31
	0x03AF4A8C MOV X20, X0
	0x03AF4A90 BL 0x3C3E7F0
	0x03AF4A94 FMOV S2, W31
	0x03AF4A98 FADD S0, S0, S2
	0x03AF4A9C FADD S1, S8, S1
	0x03AF4AA0 MOV X0, X20
	0x03AF4AA4 MOV X1, X31
	0x03AF4AA8 BL 0x3C3E880
	0x03AF4AAC MOV X0, X19
	0x03AF4AB0 BL 0x3AEEDDC
	0x03AF4AB4 LDP X20, X19, [X31 + 0x80]
	0x03AF4AB8 LDP X22, X21, [X31 + 0x70]
	0x03AF4ABC LDP X24, X23, [X31 + 0x60]
	0x03AF4AC0 LDP X30, X25, [X31 + 0x50]
	0x03AF4AC4 LDP D9, D8, [X31 + 0x40]
	0x03AF4AC8 LDP D11, D10, [X31 + 0x30]
	0x03AF4ACC LDR V12, [X31 + 0x20]
	0x03AF4AD0 ADD X31, X31, 0x90
	0x03AF4AD4 RET
	0x03AF4AD8 BL 0x1C16F20
	0x03AF4ADC SUB X31, X31, 0x90
	0x03AF4AE0 STR D12, [X31 + 0x20]
	0x03AF4AE4 STP D11, D10, [X31 + 0x30]
	0x03AF4AE8 STP D9, D8, [X31 + 0x40]
	0x03AF4AEC STP X30, X25, [X31 + 0x50]
	0x03AF4AF0 STP X24, X23, [X31 + 0x60]
	0x03AF4AF4 STP X22, X21, [X31 + 0x70]
	0x03AF4AF8 STP X20, X19, [X31 + 0x80]
	0x03AF4AFC LDR W22, [X0 + 0x234]
	0x03AF4B00 MOV W21, W2
	0x03AF4B04 MOV X19, X0
	0x03AF4B08 MOV W20, W1
	0x03AF4B0C BL 0x3AEC28C
	0x03AF4B10 LDR W23, [X19 + 0x238]
	0x03AF4B14 ADD W22, W0, W22
	0x03AF4B18 MOV X0, X19
	0x03AF4B1C BL 0x3AEC28C
	0x03AF4B20 ADD W8, W0, W23
	0x03AF4B24 CMP W22, W8
	0x03AF4B28 B.EQ 0x3AF4B80

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Move X0, [X0+272]
	009 Compare X0, 0
	010 JumpIfEqual {68}
	011 Move X1, X31
	012 Call RectTransform.get_rect, X0
	013 Move X0, [X19+312]
	014 Compare X0, 0
	015 JumpIfEqual {68}
	016 Move X8, [X0+872]
	017 Compare X8, 0
	018 JumpIfEqual {68}
	019 Move X8, [X8+80]
	020 Compare X8, 0
	021 JumpIfEqual {68}
	022 Move W9, [X8+24]
	023 Compare W9, 0
	024 JumpIfEqual {69}
	025 Move V11, [X8+76]
	026 Move X1, X31
	027 Move V9, V1
	028 Move V8, V3
	029 Call TMP_Text.get_rectTransform, X0
	030 Compare X0, 0
	031 JumpIfEqual {68}
	032 Move X1, X31
	033 Call RectTransform.get_anchoredPosition, X0
	034 Move X0, [X19+312]
	035 Compare X0, 0
	036 JumpIfEqual {68}
	037 Move X8, [X0]
	038 Move V10, V1
	039 Add S9, S8, S9
	040 Move X9, [X8+1672]
	041 Move X1, [X8+1680]
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Subtract S1, S11, S9
	044 Subtract S0, S0, S8
	045 Move W8, 0x447A0000
	046 Add S1, S1, S10
	047 Move S3, W8
	048 Move W8, 0x7F800000
	049 NotImplemented "Instruction FDIV not yet implemented."
	050 Move S2, 0.5
	051 Move S4, W8
	052 Move X8, -50368512
	053 Multiply S0, S0, S3
	054 Move V1, [X8+372]
	055 Add S0, S0, S2
	056 NotImplemented "Instruction FCVTZS not yet implemented."
	057 Move X30, [X31+32]
	058 Move X19, [X31+40]
	059 Move D9, [X31+16]
	060 Move D8, [X31+24]
	061 NotImplemented "Instruction SCVTF not yet implemented."
	062 NotImplemented "Instruction FDIV not yet implemented."
	063 NotImplemented "Instruction FCMP not yet implemented."
	064 NotImplemented "Instruction FCSEL not yet implemented."
	065 Move D11, [X31+48]
	066 Move D10, [X31+56]
	067 Return V0
	068 Call 0x1C17F20
	069 Call 0x1C17F28

Method: System.String GetSelectedString()

Disassembly:
	0x03AF3C04 CMP W8, 0x200
	0x03AF3C08 B.EQ 0x3AF3C3C
	0x03AF3C0C CMP W8, 0x400
	0x03AF3C10 FMOV S11, W31
	0x03AF3C14 B.NE 0x3AF3C40
	0x03AF3C18 FMOV S11, 1
	0x03AF3C1C B 0x3AF3C40
	0x03AF3C20 ADD X8, X31, 0x8
	0x03AF3C24 MOV X1, X31
	0x03AF3C28 BL 0x3AF8F2C
	0x03AF3C2C LDR X0, [X19 + 0x138]
	0x03AF3C30 CBZ X0, 0x3AF3CC0
	0x03AF3C34 LDR V0, [X31 + 0x18]
	0x03AF3C38 FADD S9, S0, S0
	0x03AF3C3C FMOV S11, 0.5
	0x03AF3C40 MOV X1, X31
	0x03AF3C44 BL 0x3AF8E0C
	0x03AF3C48 LDR X8, [X19 + 0x138]
	0x03AF3C4C CBZ X8, 0x3AF3CC0
	0x03AF3C50 MOV X20, X0
	0x03AF3C54 MOV X0, X8
	0x03AF3C58 MOV X1, X31
	0x03AF3C5C BL 0x3AF8E0C
	0x03AF3C60 CBZ X0, 0x3AF3CC0
	0x03AF3C64 MOV X1, X31
	0x03AF3C68 BL 0x3C3E7F0
	0x03AF3C6C LDR X0, [X19 + 0x110]
	0x03AF3C70 CBZ X0, 0x3AF3CC0
	0x03AF3C74 MOV X1, X31
	0x03AF3C78 MOV V10.16B, V0.16B
	0x03AF3C7C BL 0x3C3E51C
	0x03AF3C80 CBZ X20, 0x3AF3CC0
	0x03AF3C84 FSUB S0, S9, S3
	0x03AF3C88 FSUB S1, S8, S11
	0x03AF3C8C FMUL S1, S1, S0
	0x03AF3C90 MOV X0, X20
	0x03AF3C94 MOV V0.16B, V10.16B
	0x03AF3C98 MOV X1, X31
	0x03AF3C9C BL 0x3C3E880
	0x03AF3CA0 MOV X0, X19
	0x03AF3CA4 BL 0x3AEEDDC
	0x03AF3CA8 LDP X20, X19, [X31 + 0x50]
	0x03AF3CAC LDP X30, X21, [X31 + 0x40]
	0x03AF3CB0 LDP D9, D8, [X31 + 0x30]
	0x03AF3CB4 LDP D11, D10, [X31 + 0x20]
	0x03AF3CB8 ADD X31, X31, 0x60
	0x03AF3CBC RET
	0x03AF3CC0 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8F0000
	006 Move W8, [X20+1540]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x601000
	013 Move X0, [X0+2440]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1540], W8
	017 Move W20, [X19+564]
	018 Move X0, X19
	019 Call TMP_InputField.get_compositionLength, X0
	020 Move W21, [X19+568]
	021 Add W20, W0, W20
	022 Move X0, X19
	023 Call TMP_InputField.get_compositionLength, X0
	024 Add W8, W0, W21
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X8, 0x601000
	027 Move X8, [X8+2440]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X0, [X8]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return X0
	034 Move W20, [X19+564]
	035 Move X0, X19
	036 Call TMP_InputField.get_compositionLength, X0
	037 Move W21, [X19+568]
	038 Add W20, W0, W20
	039 Move X0, X19
	040 Call TMP_InputField.get_compositionLength, X0
	041 Move X8, [X19+544]
	042 Add W9, W0, W21
	043 NotImplemented "Instruction CMP not yet implemented."
	044 NotImplemented "Instruction CSEL not yet implemented."
	045 Compare X8, 0
	046 JumpIfEqual {58}
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CSEL not yet implemented."
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Subtract W2, W9, W1
	052 Move X0, X8
	053 Move X3, X31
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Call String.Substring, X0, X1, X2
	057 Return X0
	058 Call 0x1C17F20

Method: System.Int32 FindNextWordBegin()

Disassembly:
	0x03AF4CC4 CBZ X0, 0x3AF4D94
	0x03AF4CC8 MOV X1, X31
	0x03AF4CCC BL 0x3C3F58C
	0x03AF4CD0 LDR X0, [X19 + 0x138]
	0x03AF4CD4 CBZ X0, 0x3AF4D94
	0x03AF4CD8 ADD X8, X31, 0x8
	0x03AF4CDC MOV X1, X31
	0x03AF4CE0 MOV V9.16B, V1.16B
	0x03AF4CE4 BL 0x3AF8FDC
	0x03AF4CE8 LDR X0, [X19 + 0x110]
	0x03AF4CEC CBZ X0, 0x3AF4D94
	0x03AF4CF0 LDR V11, [X31 + 0xC]
	0x03AF4CF4 LDR V12, [X31 + 0x18]
	0x03AF4CF8 MOV X1, X31
	0x03AF4CFC BL 0x3C3F58C
	0x03AF4D00 LDR X0, [X19 + 0x110]
	0x03AF4D04 CBZ X0, 0x3AF4D94
	0x03AF4D08 FSUB S0, S11, S12
	0x03AF4D0C MOV X1, X31
	0x03AF4D10 MOV V10.16B, V1.16B
	0x03AF4D14 FADD S9, S9, S0
	0x03AF4D18 BL 0x3C3E51C
	0x03AF4D1C LDR X0, [X19 + 0x138]
	0x03AF4D20 FADD S0, S10, S1
	0x03AF4D24 FADD S1, S8, S9
	0x03AF4D28 FSUB S2, S0, S9
	0x03AF4D2C FCMP S0, S1
	0x03AF4D30 FCSEL S8, S8, S2, GT
	0x03AF4D34 CBZ X0, 0x3AF4D94
	0x03AF4D38 MOV X1, X31
	0x03AF4D3C BL 0x3AF8E0C
	0x03AF4D40 CBZ X0, 0x3AF4D94
	0x03AF4D44 MOV X1, X31
	0x03AF4D48 MOV X20, X0
	0x03AF4D4C BL 0x3C3E7F0
	0x03AF4D50 FMOV S2, W31
	0x03AF4D54 FADD S0, S0, S2
	0x03AF4D58 FADD S1, S8, S1
	0x03AF4D5C MOV X0, X20
	0x03AF4D60 MOV X1, X31
	0x03AF4D64 BL 0x3C3E880
	0x03AF4D68 MOV X0, X19
	0x03AF4D6C BL 0x3AEEDDC
	0x03AF4D70 LDP X20, X19, [X31 + 0x80]
	0x03AF4D74 LDP X22, X21, [X31 + 0x70]
	0x03AF4D78 LDP X24, X23, [X31 + 0x60]
	0x03AF4D7C LDP X30, X25, [X31 + 0x50]
	0x03AF4D80 LDP D9, D8, [X31 + 0x40]
	0x03AF4D84 LDP D11, D10, [X31 + 0x30]
	0x03AF4D88 LDR V12, [X31 + 0x20]
	0x03AF4D8C ADD X31, X31, 0x90
	0x03AF4D90 RET
	0x03AF4D94 BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x8EF000
	007 Move W8, [X20+1541]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x666000
	014 Move X0, [X0+384]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+1541], W8
	018 Move W21, [X19+568]
	019 Move X0, X19
	020 Call TMP_InputField.get_compositionLength, X0
	021 Move X20, [X19+544]
	022 Compare X20, 0
	023 JumpIfEqual {60}
	024 Move W8, W0
	025 Move W0, [X20+16]
	026 Add W8, W21, W8
	027 Add W8, W8, 1
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X21, 0x666000
	030 Move X21, [X21+384]
	031 Move X0, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X21]
	037 Move X8, [X0+184]
	038 Move W22, [X19+568]
	039 Move X0, X19
	040 Move X21, [X8]
	041 Call TMP_InputField.get_compositionLength, X0
	042 Add W8, W22, W0
	043 Add W2, W8, 1
	044 Move X0, X20
	045 Move X1, X21
	046 Move X3, X31
	047 Call String.IndexOfAny, X0, X1, X2
	048 Add W31, W0, 1
	049 Add W0, W0, 1
	050 Move X8, [X19+544]
	051 Compare X8, 0
	052 JumpIfEqual {60}
	053 Move W0, [X8+16]
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Return X0
	060 Call 0x1C17F20

Method: System.Void MoveRight(System.Boolean shift, System.Boolean ctrl)

Disassembly:
	0x03AF4248 FDIV S3, S4, S3
	0x03AF424C FCMP S3, 0x0
	0x03AF4250 B.LT 0x3AF425C
	0x03AF4254 FCMP S3, S2
	0x03AF4258 B.LS 0x3AF42B4
	0x03AF425C FABS S4, S4
	0x03AF4260 FCMP S4, S1
	0x03AF4264 FCSEL S0, S3, S0, MI
	0x03AF4268 FCSEL S1, S4, S1, MI
	0x03AF426C CSEL W10, W8, W10, MI
	0x03AF4270 ADD W8, W8, 0x1
	0x03AF4274 SUBS X11, X11, 0x1
	0x03AF4278 ADD X12, X12, 0x178
	0x03AF427C B.NE 0x3AF4234
	0x03AF4280 ADDS W31, W10, 0x1
	0x03AF4284 B.EQ 0x3AF42A4
	0x03AF4288 FMOV S1, 0.5
	0x03AF428C FCMP S0, S1
	0x03AF4290 CSET W8, PL
	0x03AF4294 ADD W0, W10, W8
	0x03AF4298 B 0x3AF42A4
	0x03AF429C ANDS W31, W2, 0x1
	0x03AF42A0 CSEL W0, W31, W8, NE
	0x03AF42A4 LDP X20, X19, [X31 + 0x20]
	0x03AF42A8 LDP X30, X21, [X31 + 0x10]
	0x03AF42AC LDR V8, [X31], #0x30
	0x03AF42B0 RET
	0x03AF42B4 FMOV S0, 0.5
	0x03AF42B8 FCMP S3, S0
	0x03AF42BC CSET W9, PL
	0x03AF42C0 ADD W0, W9, W8
	0x03AF42C4 B 0x3AF42A4
	0x03AF42C8 BL 0x1C16F20
	0x03AF42CC BL 0x1C16F28
	0x03AF42D0 STR D8, [X31 - 0x30]!
	0x03AF42D4 STP X30, X21, [X31 + 0x10]
	0x03AF42D8 STP X20, X19, [X31 + 0x20]
	0x03AF42DC LDR X8, [X0 + 0x138]
	0x03AF42E0 CBZ X8, 0x3AF44B4
	0x03AF42E4 LDR X9, [X8 + 0x368]
	0x03AF42E8 CBZ X9, 0x3AF44B4
	0x03AF42EC LDR W8, [X9 + 0x18]
	0x03AF42F0 CMP W8, W1
	0x03AF42F4 B.LE 0x3AF43B4
	0x03AF42F8 LDR X10, [X9 + 0x38]
	0x03AF42FC CBZ X10, 0x3AF44B4
	0x03AF4300 LDR W11, [X10 + 0x18]
	0x03AF4304 CMP W11, W1
	0x03AF4308 B.LS 0x3AF44B8
	0x03AF430C MOVZ W11, 0x178
	0x03AF4310 SMADDL X10, X1, X11, X10
	0x03AF4314 LDRSW X21, [X10 + 0x64]
	0x03AF4318 LDR W9, [X9 + 0x2C]
	0x03AF431C ADD W20, W21, 0x1
	0x03AF4320 CMP W20, W9
	0x03AF4324 B.GE 0x3AF43BC
	0x03AF4328 MOV X19, X0
	0x03AF432C LDR X0, [X0 + 0x110]
	0x03AF4330 CBZ X0, 0x3AF44B4
	0x03AF4334 LDR V8, [X10 + 0x140]
	0x03AF4338 MOV X1, X31
	0x03AF433C BL 0x3C3E51C
	0x03AF4340 LDR X8, [X19 + 0x138]
	0x03AF4344 CBZ X8, 0x3AF44B4
	0x03AF4348 LDR X9, [X8 + 0x368]
	0x03AF434C CBZ X9, 0x3AF44B4
	0x03AF4350 LDR W8, [X9 + 0x2C]
	0x03AF4354 MOVZ W10, 0x5C
	0x03AF4358 SUB W11, W8, 0x1
	0x03AF435C SMADDL X8, X20, X10, X31
	0x03AF4360 CMP W20, W11
	0x03AF4364 B.GE 0x3AF43D8
	0x03AF4368 LDR X12, [X9 + 0x50]
	0x03AF436C CBZ X12, 0x3AF44B4
	0x03AF4370 LDR W13, [X12 + 0x18]
	0x03AF4374 CMP W20, W13
	0x03AF4378 B.CS 0x3AF44B8
	0x03AF437C CMP W21, W13
	0x03AF4380 B.CS 0x3AF44B8
	0x03AF4384 ADD X13, X12, 0x20
	0x03AF4388 SMADDL X14, X20, X10, X13
	0x03AF438C MADD X13, X21, X10, X13
	0x03AF4390 LDR V0, [X13 + 0x30]
	0x03AF4394 LDR V1, [X14 + 0x30]
	0x03AF4398 FSUB S0, S0, S3
	0x03AF439C FCMP S1, S0
	0x03AF43A0 B.MI 0x3AF43E0
	0x03AF43A4 ADD W20, W20, 0x1
	0x03AF43A8 ADD X8, X8, 0x5C
	0x03AF43AC CBNZ X9, 0x3AF4360
	0x03AF43B0 B 0x3AF44B4
	0x03AF43B4 SUB W0, W8, 0x1
	0x03AF43B8 B 0x3AF43C8
	0x03AF43BC SUB W8, W8, 0x1
	0x03AF43C0 ANDS W31, W2, 0x1
	0x03AF43C4 CSEL W0, W8, W1, NE
	0x03AF43C8 LDP X20, X19, [X31 + 0x20]
	0x03AF43CC LDP X30, X21, [X31 + 0x10]
	0x03AF43D0 LDR V8, [X31], #0x30
	0x03AF43D4 RET
	0x03AF43D8 LDR X12, [X9 + 0x50]
	0x03AF43DC CBZ X12, 0x3AF44B4
	0x03AF43E0 LDR W10, [X12 + 0x18]
	0x03AF43E4 CMP W20, W10
	0x03AF43E8 B.CS 0x3AF44B8
	0x03AF43EC ADD X8, X12, X8
	0x03AF43F0 LDR W0, [X8 + 0x3C]
	0x03AF43F4 LDR W8, [X8 + 0x34]
	0x03AF43F8 CMP W8, W0
	0x03AF43FC B.GE 0x3AF43B8
	0x03AF4400 LDR X10, [X9 + 0x38]
	0x03AF4404 CBZ X10, 0x3AF44B4
	0x03AF4408 ADRP X14, 0xFFFFFFFFFCFF6000
	0x03AF440C LDR W9, [X10 + 0x18]
	0x03AF4410 LDR V1, [X14 + 0x374]
	0x03AF4414 SXTW X12, W8
	0x03AF4418 MOVZ W13, 0x178
	0x03AF441C SXTW X11, W0
	0x03AF4420 MADD X10, X12, X13, X10
	0x03AF4424 SUB X11, X11, X12
	0x03AF4428 ADD X12, X10, 0x144
	0x03AF442C FMOV S0, W31
	0x03AF4430 MOVN W10, 0x0
	0x03AF4434 FMOV S2, 1
	0x03AF4438 CMP W8, W9
	0x03AF443C B.CS 0x3AF44B8
	0x03AF4440 LDP S3, S5, [X12 - 0x4]
	0x03AF4444 FSUB S4, S8, S3
	0x03AF4448 FSUB S3, S5, S3
	0x03AF444C FDIV S3, S4, S3
	0x03AF4450 FCMP S3, 0x0
	0x03AF4454 B.LT 0x3AF4460
	0x03AF4458 FCMP S3, S2
	0x03AF445C B.LS 0x3AF44A0
	0x03AF4460 FABS S4, S4
	0x03AF4464 FCMP S4, S1
	0x03AF4468 FCSEL S0, S3, S0, MI
	0x03AF446C FCSEL S1, S4, S1, MI
	0x03AF4470 CSEL W10, W8, W10, MI
	0x03AF4474 ADD W8, W8, 0x1
	0x03AF4478 SUBS X11, X11, 0x1
	0x03AF447C ADD X12, X12, 0x178
	0x03AF4480 B.NE 0x3AF4438
	0x03AF4484 ADDS W31, W10, 0x1
	0x03AF4488 B.EQ 0x3AF43B8
	0x03AF448C FMOV S1, 0.5
	0x03AF4490 FCMP S0, S1
	0x03AF4494 CSET W8, PL
	0x03AF4498 ADD W0, W10, W8
	0x03AF449C B 0x3AF43B8
	0x03AF44A0 FMOV S0, 0.5
	0x03AF44A4 FCMP S3, S0
	0x03AF44A8 CSET W9, PL
	0x03AF44AC ADD W0, W9, W8
	0x03AF44B0 B 0x3AF43B8
	0x03AF44B4 BL 0x1C16F20
	0x03AF44B8 BL 0x1C16F28
	0x03AF44BC STP X30, X25, [X31 - 0x40]!
	0x03AF44C0 STP X24, X23, [X31 + 0x10]
	0x03AF44C4 STP X22, X21, [X31 + 0x20]
	0x03AF44C8 STP X20, X19, [X31 + 0x30]
	0x03AF44CC LDR W22, [X0 + 0x234]
	0x03AF44D0 MOV W21, W2
	0x03AF44D4 MOV X19, X0
	0x03AF44D8 MOV W20, W1
	0x03AF44DC BL 0x3AEC28C
	0x03AF44E0 LDR W23, [X19 + 0x238]
	0x03AF44E4 ADD W22, W0, W22
	0x03AF44E8 MOV X0, X19
	0x03AF44EC BL 0x3AEC28C
	0x03AF44F0 ADD W8, W0, W23
	0x03AF44F4 CMP W22, W8
	0x03AF44F8 B.EQ 0x3AF4550
	0x03AF44FC TBNZ X20, 0x0, 0x3AF4550
	0x03AF4500 LDR W23, [X19 + 0x23C]
	0x03AF4504 MOV X0, X19
	0x03AF4508 ADD X22, X19, 0x23C
	0x03AF450C BL 0x3AEC28C
	0x03AF4510 LDR W24, [X19 + 0x240]
	0x03AF4514 ADD W25, W0, W23
	0x03AF4518 MOV X0, X19
	0x03AF451C ADD X23, X19, 0x240
	0x03AF4520 BL 0x3AEC28C
	0x03AF4524 ADD W8, W0, W24
	0x03AF4528 CMP W25, W8
	0x03AF452C CSEL W24, W25, W8, GT
	0x03AF4530 MOV X0, X19
	0x03AF4534 MOV X1, X23
	0x03AF4538 STR W24, [X19 + 0x240]
	0x03AF453C BL 0x3AEE318
	0x03AF4540 MOV X0, X19
	0x03AF4544 MOV X1, X22
	0x03AF4548 STR W24, [X19 + 0x23C]
	0x03AF454C BL 0x3AEE318
	0x03AF4550 LDR W8, [X19 + 0x190]
	0x03AF4554 SUB W8, W8, 0x1
	0x03AF4558 CMP W8, 0x2
	0x03AF455C B.CS 0x3AF45CC
	0x03AF4560 LDR W22, [X19 + 0x240]
	0x03AF4564 MOV X0, X19
	0x03AF4568 BL 0x3AEC28C
	0x03AF456C ADD W1, W0, W22
	0x03AF4570 AND W2, W21, 0x1
	0x03AF4574 MOV X0, X19
	0x03AF4578 BL 0x3AF3FA0
	0x03AF457C MOV W21, W0
	0x03AF4580 TBZ X20, 0x0, 0x3AF45E8
	0x03AF4584 ADD X1, X19, 0x240
	0x03AF4588 MOV X0, X19
	0x03AF458C STR W21, [X19 + 0x240]
	0x03AF4590 BL 0x3AEE318
	0x03AF4594 LDR W20, [X19 + 0x240]
	0x03AF4598 MOV X0, X19
	0x03AF459C BL 0x3AEC28C
	0x03AF45A0 ADD W1, W0, W20
	0x03AF45A4 MOV X0, X19
	0x03AF45A8 BL 0x3AEFC5C
	0x03AF45AC STR W0, [X19 + 0x238]
	0x03AF45B0 TBNZ X0, 0x1F, 0x3AF4654
	0x03AF45B4 LDR X8, [X19 + 0x220]
	0x03AF45B8 CBZ X8, 0x3AF467C
	0x03AF45BC LDR W8, [X8 + 0x10]
	0x03AF45C0 CMP W8, W0
	0x03AF45C4 B.LT 0x3AF4664
	0x03AF45C8 B 0x3AF4668
	0x03AF45CC LDR X8, [X19 + 0x138]
	0x03AF45D0 CBZ X8, 0x3AF467C
	0x03AF45D4 LDR X8, [X8 + 0x368]
	0x03AF45D8 CBZ X8, 0x3AF467C
	0x03AF45DC LDR W8, [X8 + 0x18]
	0x03AF45E0 SUB W21, W8, 0x1
	0x03AF45E4 TBNZ X20, 0x0, 0x3AF4584
	0x03AF45E8 ADD X1, X19, 0x23C
	0x03AF45EC MOV X0, X19
	0x03AF45F0 STR W21, [X19 + 0x23C]
	0x03AF45F4 BL 0x3AEE318
	0x03AF45F8 ADD X1, X19, 0x240
	0x03AF45FC MOV X0, X19
	0x03AF4600 STR W21, [X19 + 0x240]
	0x03AF4604 BL 0x3AEE318
	0x03AF4608 LDR W20, [X19 + 0x240]
	0x03AF460C MOV X0, X19
	0x03AF4610 BL 0x3AEC28C
	0x03AF4614 ADD W1, W0, W20
	0x03AF4618 MOV X0, X19
	0x03AF461C BL 0x3AEFC5C
	0x03AF4620 STR W0, [X19 + 0x234]
	0x03AF4624 TBNZ X0, 0x1F, 0x3AF465C
	0x03AF4628 LDR X8, [X19 + 0x220]
	0x03AF462C CBZ X8, 0x3AF467C
	0x03AF4630 LDR W9, [X8 + 0x10]
	0x03AF4634 CMP W9, W0
	0x03AF4638 B.GE 0x3AF4640
	0x03AF463C STR W9, [X19 + 0x234]
	0x03AF4640 STR W0, [X19 + 0x238]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x8EF000
	009 Move W8, [X22+1542]
	010 Move W21, W2
	011 Move W20, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x602000
	018 Move X0, [X0+368]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+1542], W8
	022 Move W22, [X19+564]
	023 Move X0, X19
	024 Call TMP_InputField.get_compositionLength, X0
	025 Move W23, [X19+568]
	026 Add W22, W0, W22
	027 Move X0, X19
	028 Call TMP_InputField.get_compositionLength, X0
	029 Add W8, W0, W23
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move TEMP, X20
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {62}
	035 Move W20, [X19+564]
	036 Move X0, X19
	037 Call TMP_InputField.get_compositionLength, X0
	038 Move W21, [X19+568]
	039 Add W20, W0, W20
	040 Move X0, X19
	041 Call TMP_InputField.get_compositionLength, X0
	042 Add W8, W0, W21
	043 NotImplemented "Instruction CMP not yet implemented."
	044 NotImplemented "Instruction CSEL not yet implemented."
	045 Move [X19+568], W8
	046 Move TEMP, X8
	047 And TEMP, TEMP, -2147483648
	048 Compare TEMP, -2147483648
	049 JumpIfEqual {117}
	050 Move X9, [X19+544]
	051 Compare X9, 0
	052 JumpIfEqual {298}
	053 Move W10, [X9+16]
	054 Move W20, W8
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move W20, W10
	057 Move [X19+568], W10
	058 Move [X19+564], W8
	059 Move W9, [X9+16]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 NotImplemented "Instruction CSEL not yet implemented."
	062 Move TEMP, X21
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {73}
	066 Move X0, X19
	067 Call TMP_InputField.FindNextWordBegin, X0
	068 Move W21, W0
	069 Move TEMP, X20
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfEqual {142}
	073 Move W8, [X19+729]
	074 Compare W8, 0
	075 JumpIfEqual {152}
	076 Move W22, [X19+568]
	077 Move X0, X19
	078 Call TMP_InputField.get_compositionLength, X0
	079 Move X21, [X19+544]
	080 Compare X21, 0
	081 JumpIfEqual {298}
	082 Move W8, [X21+16]
	083 Add W9, W0, W22
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move W22, [X19+568]
	086 Move X0, X19
	087 Call TMP_InputField.get_compositionLength, X0
	088 Add W1, W0, W22
	089 Move X0, X21
	090 Move X2, X31
	091 Call String.get_Chars, X0, X1
	092 Move X8, 0x602000
	093 Move X8, [X8+368]
	094 Move W21, W0
	095 Move X8, [X8]
	096 Move W9, [X8+224]
	097 Compare W9, 0
	098 JumpIfNotEqual {101}
	099 Move X0, X8
	100 Call 0x1C17DFC
	101 Move W0, W21
	102 Move X1, X31
	103 Call Char.IsHighSurrogate, X0
	104 Move TEMP, X0
	105 And TEMP, TEMP, 1
	106 Compare TEMP, 1
	107 JumpIfNotEqual {133}
	108 Move W21, [X19+568]
	109 Move X0, X19
	110 Call TMP_InputField.get_compositionLength, X0
	111 Add W8, W21, W0
	112 Add W21, W8, 2
	113 Move TEMP, X20
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfEqual {142}
	117 Move W8, W31
	118 Move W20, W31
	119 Move [X19+568], W31
	120 Move X0, X19
	121 Move [X19+564], W8
	122 Call TMP_InputField.get_compositionLength, X0
	123 Add W1, W0, W20
	124 Move X0, X19
	125 Call TMP_InputField.GetCaretPositionFromStringIndex, X0, X1
	126 Move W20, W0
	127 Add X1, X19, 576
	128 Move [X19+576], W0
	129 Move X0, X19
	130 Call TMP_InputField.ClampCaretPos, X0, X1
	131 Add X1, X19, 572
	132 Move [X19+572], W20
	133 Move W21, [X19+568]
	134 Move X0, X19
	135 Call TMP_InputField.get_compositionLength, X0
	136 Add W8, W21, W0
	137 Add W21, W8, 1
	138 Move TEMP, X20
	139 And TEMP, TEMP, 1
	140 Compare TEMP, 1
	141 JumpIfNotEqual {193}
	142 Move [X19+568], W21
	143 Move TEMP, X21
	144 And TEMP, TEMP, -2147483648
	145 Compare TEMP, -2147483648
	146 JumpIfEqual {210}
	147 Move X8, [X19+544]
	148 Compare X8, 0
	149 JumpIfEqual {298}
	150 Move W8, [X8+16]
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move X8, [X19+312]
	153 Compare X8, 0
	154 JumpIfEqual {298}
	155 Move X8, [X8+872]
	156 Compare X8, 0
	157 JumpIfEqual {298}
	158 Move X21, [X8+56]
	159 Move W22, [X19+576]
	160 Move X0, X19
	161 Call TMP_InputField.get_compositionLength, X0
	162 Compare X21, 0
	163 JumpIfEqual {298}
	164 Move W9, [X21+24]
	165 Add W8, W0, W22
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Move X9, [X19+312]
	168 Compare X9, 0
	169 JumpIfEqual {298}
	170 Move X9, [X9+872]
	171 Compare X9, 0
	172 JumpIfEqual {298}
	173 Move W10, 376
	174 NotImplemented "Instruction SMADDL not yet implemented."
	175 Move X22, [X9+56]
	176 Move W21, [X8+36]
	177 Move W23, [X19+576]
	178 Move X0, X19
	179 Call TMP_InputField.get_compositionLength, X0
	180 Compare X22, 0
	181 JumpIfEqual {298}
	182 Move W9, [X22+24]
	183 Add W8, W0, W23
	184 NotImplemented "Instruction CMP not yet implemented."
	185 Move W9, 376
	186 NotImplemented "Instruction SMADDL not yet implemented."
	187 Move W8, [X8+40]
	188 Add W21, W8, W21
	189 Move TEMP, X20
	190 And TEMP, TEMP, 1
	191 Compare TEMP, 1
	192 JumpIfEqual {142}
	193 Move [X19+564], W21
	194 Move TEMP, X21
	195 And TEMP, TEMP, -2147483648
	196 Compare TEMP, -2147483648
	197 JumpIfEqual {220}
	198 Move X8, [X19+544]
	199 Compare X8, 0
	200 JumpIfEqual {298}
	201 Move W9, [X8+16]
	202 Move W22, W21
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Move W22, W9
	205 Move [X19+564], W9
	206 Move [X19+568], W21
	207 Move W8, [X8+16]
	208 NotImplemented "Instruction CMP not yet implemented."
	209 NotImplemented "Instruction CSEL not yet implemented."
	210 Move W8, W31
	211 Move W21, W8
	212 Move [X19+568], W8
	213 Move X0, X19
	214 Call TMP_InputField.get_compositionLength, X0
	215 Add W1, W0, W21
	216 Move X0, X19
	217 Call TMP_InputField.GetCaretPositionFromStringIndex, X0, X1
	218 Add X1, X19, 576
	219 Move [X19+576], W0
	220 Move W8, W31
	221 Move W22, W31
	222 Move [X19+564], W31
	223 Move X0, X19
	224 Move [X19+568], W8
	225 Call TMP_InputField.get_compositionLength, X0
	226 Move X8, [X19+312]
	227 Compare X8, 0
	228 JumpIfEqual {298}
	229 Move X8, [X8+872]
	230 Compare X8, 0
	231 JumpIfEqual {298}
	232 Move X21, [X8+56]
	233 Move W23, [X19+572]
	234 Move W20, W0
	235 Move X0, X19
	236 Call TMP_InputField.get_compositionLength, X0
	237 Compare X21, 0
	238 JumpIfEqual {298}
	239 Move W9, [X21+24]
	240 Add W8, W0, W23
	241 NotImplemented "Instruction CMP not yet implemented."
	242 Move X9, [X19+312]
	243 Compare X9, 0
	244 JumpIfEqual {298}
	245 Move X9, [X9+872]
	246 Compare X9, 0
	247 JumpIfEqual {298}
	248 Move W10, 376
	249 NotImplemented "Instruction SMADDL not yet implemented."
	250 Move X23, [X9+56]
	251 Move W21, [X8+36]
	252 Move W24, [X19+572]
	253 Move X0, X19
	254 Call TMP_InputField.get_compositionLength, X0
	255 Compare X23, 0
	256 JumpIfEqual {298}
	257 Move W9, [X23+24]
	258 Add W8, W0, W24
	259 NotImplemented "Instruction CMP not yet implemented."
	260 Move W9, 376
	261 NotImplemented "Instruction SMADDL not yet implemented."
	262 Move W8, [X8+40]
	263 Add W9, W20, W22
	264 Add W8, W8, W21
	265 NotImplemented "Instruction CMP not yet implemented."
	266 Move X20, [X31+48]
	267 Move X19, [X31+56]
	268 Move X22, [X31+32]
	269 Move X21, [X31+40]
	270 Move X24, [X31+16]
	271 Move X23, [X31+24]
	272 Move X30, [X31+64]
	273 Return 
	274 Move W21, [X19+568]
	275 Move X0, X19
	276 Add X20, X19, 572
	277 Call TMP_InputField.get_compositionLength, X0
	278 Add W1, W0, W21
	279 Move X0, X19
	280 Call TMP_InputField.GetCaretPositionFromStringIndex, X0, X1
	281 Move W21, W0
	282 Move [X19+572], W0
	283 Move X0, X19
	284 Move X1, X20
	285 Call TMP_InputField.ClampCaretPos, X0, X1
	286 Add X1, X19, 576
	287 Move [X19+576], W21
	288 Move X0, X19
	289 Move X20, [X31+48]
	290 Move X19, [X31+56]
	291 Move X22, [X31+32]
	292 Move X21, [X31+40]
	293 Move X24, [X31+16]
	294 Move X23, [X31+24]
	295 Move X30, [X31+64]
	296 Call TMP_InputField.ClampCaretPos, X0, X1
	297 Return 
	298 Call 0x1C17F20
	299 Call 0x1C17F28

Method: System.Int32 FindPrevWordBegin()

Disassembly:
	0x03AF4D98 STR X30, [X31 - 0x40]!
	0x03AF4D9C STP X24, X23, [X31 + 0x10]
	0x03AF4DA0 STP X22, X21, [X31 + 0x20]
	0x03AF4DA4 STP X20, X19, [X31 + 0x30]
	0x03AF4DA8 LDRB W8, [X0 + 0x230]
	0x03AF4DAC CBNZ W8, 0x3AF4E30
	0x03AF4DB0 MOV X19, X0
	0x03AF4DB4 MOV X20, X1
	0x03AF4DB8 BL 0x3AF01B0
	0x03AF4DBC TBZ X0, 0x0, 0x3AF4E30
	0x03AF4DC0 CBZ X20, 0x3AF4E44
	0x03AF4DC4 LDR W22, [X20 + 0x10]
	0x03AF4DC8 CMP W22, 0x1
	0x03AF4DCC B.LT 0x3AF4E30
	0x03AF4DD0 MOV W21, W31
	0x03AF4DD4 MOVZ W23, 0x1
	0x03AF4DD8 MOVZ W24, 0x2600
	0x03AF4DDC MOV X0, X20
	0x03AF4DE0 MOV W1, W21
	0x03AF4DE4 MOV X2, X31
	0x03AF4DE8 BL 0x3222A1C
	0x03AF4DEC AND W8, W0, 0xFFFF
	0x03AF4DF0 MOV W1, W0
	0x03AF4DF4 CMP W8, 0x1F
	0x03AF4DF8 B.HI 0x3AF4E10
	0x03AF4DFC CMP W8, 0xD
	0x03AF4E00 B.HI 0x3AF4E24
	0x03AF4E04 LSLV W8, W23, W8
	0x03AF4E08 ANDS W31, W8, W24, 0x0
	0x03AF4E0C B.EQ 0x3AF4E24
	0x03AF4E10 LDR X8, [X19]
	0x03AF4E14 MOV X0, X19
	0x03AF4E18 LDR X9, [X8 + 0x578]
	0x03AF4E1C LDR X2, [X8 + 0x580]
	0x03AF4E20 BLR X9
	0x03AF4E24 ADD W21, W21, 0x1
	0x03AF4E28 CMP W22, W21
	0x03AF4E2C B.NE 0x3AF4DDC
	0x03AF4E30 LDP X20, X19, [X31 + 0x30]
	0x03AF4E34 LDP X22, X21, [X31 + 0x20]
	0x03AF4E38 LDP X24, X23, [X31 + 0x10]
	0x03AF4E3C LDR X30, [X31], #0x40
	0x03AF4E40 RET
	0x03AF4E44 BL 0x1C16F20
	0x03AF4E48 STR X30, [X31 - 0x40]!
	0x03AF4E4C STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x8EF000
	007 Move W8, [X20+1543]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x666000
	014 Move X0, [X0+384]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+1543], W8
	018 Move W20, [X19+568]
	019 Move X0, X19
	020 Call TMP_InputField.get_compositionLength, X0
	021 Add W8, W20, W0
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X21, 0x666000
	024 Move X21, [X21+384]
	025 Move X20, [X19+544]
	026 Move X0, [X21]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X21]
	032 Move X8, [X0+184]
	033 Move W22, [X19+568]
	034 Move X0, X19
	035 Move X21, [X8]
	036 Call TMP_InputField.get_compositionLength, X0
	037 Compare X20, 0
	038 JumpIfEqual {53}
	039 Add W8, W22, W0
	040 Subtract W2, W8, 2
	041 Move X0, X20
	042 Move X1, X21
	043 Move X3, X31
	044 Call String.LastIndexOfAny, X0, X1, X2
	045 Add W0, W0, 1
	046 Move W0, W31
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Return X0
	053 Call 0x1C17F20

Method: System.Void MoveLeft(System.Boolean shift, System.Boolean ctrl)

Disassembly:
	0x03AF3E98 B.MI 0x3AF3F74
	0x03AF3E9C LDR X9, [X9 + 0x50]
	0x03AF3EA0 CBZ X9, 0x3AF3F9C
	0x03AF3EA4 LDR W14, [X9 + 0x18]
	0x03AF3EA8 CMP W13, W14
	0x03AF3EAC B.CS 0x3AF3F98
	0x03AF3EB0 CMP W12, W14
	0x03AF3EB4 B.CS 0x3AF3F98
	0x03AF3EB8 MOVZ W14, 0x5C
	0x03AF3EBC MADD X13, X13, X14, X9
	0x03AF3EC0 LDR W13, [X13 + 0x34]
	0x03AF3EC4 NOP
	0x03AF3EC8 UMADDL X9, X12, X14, X9
	0x03AF3ECC LDR W9, [X9 + 0x34]
	0x03AF3ED0 SUB W0, W13, 0x1
	0x03AF3ED4 CMP W9, W0
	0x03AF3ED8 B.GE 0x3AF3F70
	0x03AF3EDC ADRP X14, 0xFFFFFFFFFCFF7000
	0x03AF3EE0 LDR V0, [X11 + 0x140]
	0x03AF3EE4 LDR V2, [X14 + 0x374]
	0x03AF3EE8 SXTW X11, W9
	0x03AF3EEC MOVZ W13, 0x178
	0x03AF3EF0 SXTW X12, W0
	0x03AF3EF4 MADD X10, X11, X13, X10
	0x03AF3EF8 SUB X11, X12, X11
	0x03AF3EFC ADD X12, X10, 0x144
	0x03AF3F00 FMOV S1, W31
	0x03AF3F04 MOVN W10, 0x0
	0x03AF3F08 FMOV S3, 1
	0x03AF3F0C CMP W9, W8
	0x03AF3F10 B.CS 0x3AF3F98
	0x03AF3F14 LDP S4, S6, [X12 - 0x4]
	0x03AF3F18 FSUB S5, S0, S4
	0x03AF3F1C FSUB S4, S6, S4
	0x03AF3F20 FDIV S4, S5, S4
	0x03AF3F24 FCMP S4, 0x0
	0x03AF3F28 B.LT 0x3AF3F34
	0x03AF3F2C FCMP S4, S3
	0x03AF3F30 B.LS 0x3AF3F80
	0x03AF3F34 FABS S5, S5
	0x03AF3F38 FCMP S5, S2
	0x03AF3F3C FCSEL S1, S4, S1, MI
	0x03AF3F40 FCSEL S2, S5, S2, MI
	0x03AF3F44 CSEL W10, W9, W10, MI
	0x03AF3F48 ADD W9, W9, 0x1
	0x03AF3F4C SUBS X11, X11, 0x1
	0x03AF3F50 ADD X12, X12, 0x178
	0x03AF3F54 B.NE 0x3AF3F0C
	0x03AF3F58 FMOV S0, 0.5
	0x03AF3F5C FCMP S1, S0
	0x03AF3F60 CSET W8, PL
	0x03AF3F64 ADDS W31, W10, 0x1
	0x03AF3F68 B.EQ 0x3AF3F70
	0x03AF3F6C ADD W0, W10, W8
	0x03AF3F70 B 0x3AF3F90
	0x03AF3F74 ANDS W31, W2, 0x1
	0x03AF3F78 CSEL W0, W31, W14, NE
	0x03AF3F7C B 0x3AF3F90
	0x03AF3F80 FMOV S0, 0.5
	0x03AF3F84 FCMP S4, S0
	0x03AF3F88 CSET W8, PL
	0x03AF3F8C ADD W0, W8, W9
	0x03AF3F90 LDR X30, [X31], #0x10
	0x03AF3F94 RET
	0x03AF3F98 BL 0x1C16F28
	0x03AF3F9C BL 0x1C16F20
	0x03AF3FA0 STR X30, [X31 - 0x10]!
	0x03AF3FA4 LDR X8, [X0 + 0x138]
	0x03AF3FA8 CBZ X8, 0x3AF40E4
	0x03AF3FAC LDR X9, [X8 + 0x368]
	0x03AF3FB0 CBZ X9, 0x3AF40E4
	0x03AF3FB4 LDR W12, [X9 + 0x18]
	0x03AF3FB8 CMP W12, W1
	0x03AF3FBC B.LE 0x3AF40B4
	0x03AF3FC0 LDR X10, [X9 + 0x38]
	0x03AF3FC4 CBZ X10, 0x3AF40E4
	0x03AF3FC8 LDR W8, [X10 + 0x18]
	0x03AF3FCC CMP W8, W1
	0x03AF3FD0 B.LS 0x3AF40E8
	0x03AF3FD4 MOVZ W11, 0x178
	0x03AF3FD8 SMADDL X11, X1, X11, X10
	0x03AF3FDC LDR W13, [X11 + 0x64]
	0x03AF3FE0 LDR W14, [X9 + 0x2C]
	0x03AF3FE4 ADD W13, W13, 0x1
	0x03AF3FE8 CMP W13, W14
	0x03AF3FEC B.GE 0x3AF40BC
	0x03AF3FF0 LDR X9, [X9 + 0x50]
	0x03AF3FF4 CBZ X9, 0x3AF40E4
	0x03AF3FF8 LDR W12, [X9 + 0x18]
	0x03AF3FFC CMP W13, W12
	0x03AF4000 B.CS 0x3AF40E8
	0x03AF4004 MOVZ W12, 0x5C
	0x03AF4008 SMADDL X9, X13, X12, X9
	0x03AF400C LDR W0, [X9 + 0x3C]
	0x03AF4010 LDR W9, [X9 + 0x34]
	0x03AF4014 CMP W9, W0
	0x03AF4018 B.GE 0x3AF40B8
	0x03AF401C ADRP X14, 0xFFFFFFFFFCFF6000
	0x03AF4020 LDR V0, [X11 + 0x140]
	0x03AF4024 LDR V2, [X14 + 0x374]
	0x03AF4028 SXTW X12, W9
	0x03AF402C MOVZ W13, 0x178
	0x03AF4030 SXTW X11, W0
	0x03AF4034 MADD X10, X12, X13, X10
	0x03AF4038 SUB X11, X11, X12
	0x03AF403C ADD X12, X10, 0x144
	0x03AF4040 FMOV S1, W31
	0x03AF4044 MOVN W10, 0x0
	0x03AF4048 FMOV S3, 1
	0x03AF404C CMP W9, W8
	0x03AF4050 B.CS 0x3AF40E8
	0x03AF4054 LDP S4, S6, [X12 - 0x4]
	0x03AF4058 FSUB S5, S0, S4
	0x03AF405C FSUB S4, S6, S4
	0x03AF4060 FDIV S4, S5, S4
	0x03AF4064 FCMP S4, 0x0
	0x03AF4068 B.LT 0x3AF4074
	0x03AF406C FCMP S4, S3
	0x03AF4070 B.LS 0x3AF40D0
	0x03AF4074 FABS S5, S5
	0x03AF4078 FCMP S5, S2
	0x03AF407C FCSEL S1, S4, S1, MI
	0x03AF4080 FCSEL S2, S5, S2, MI
	0x03AF4084 CSEL W10, W9, W10, MI
	0x03AF4088 ADD W9, W9, 0x1
	0x03AF408C SUBS X11, X11, 0x1
	0x03AF4090 ADD X12, X12, 0x178
	0x03AF4094 B.NE 0x3AF404C
	0x03AF4098 ADDS W31, W10, 0x1
	0x03AF409C B.EQ 0x3AF40B8
	0x03AF40A0 FMOV S0, 0.5
	0x03AF40A4 FCMP S1, S0
	0x03AF40A8 CSET W8, PL
	0x03AF40AC ADD W0, W10, W8
	0x03AF40B0 B 0x3AF40B8
	0x03AF40B4 SUB W0, W12, 0x1
	0x03AF40B8 B 0x3AF40C8
	0x03AF40BC SUB W8, W12, 0x1
	0x03AF40C0 ANDS W31, W2, 0x1
	0x03AF40C4 CSEL W0, W8, W1, NE
	0x03AF40C8 LDR X30, [X31], #0x10
	0x03AF40CC RET
	0x03AF40D0 FMOV S0, 0.5
	0x03AF40D4 FCMP S4, S0
	0x03AF40D8 CSET W8, PL
	0x03AF40DC ADD W0, W8, W9
	0x03AF40E0 B 0x3AF40B8
	0x03AF40E4 BL 0x1C16F20
	0x03AF40E8 BL 0x1C16F28
	0x03AF40EC STR D8, [X31 - 0x30]!
	0x03AF40F0 STP X30, X21, [X31 + 0x10]
	0x03AF40F4 STP X20, X19, [X31 + 0x20]
	0x03AF40F8 LDR X8, [X0 + 0x138]
	0x03AF40FC CBZ X8, 0x3AF42C8
	0x03AF4100 LDR X8, [X8 + 0x368]
	0x03AF4104 CBZ X8, 0x3AF42C8
	0x03AF4108 LDR W10, [X8 + 0x18]
	0x03AF410C LDR X9, [X8 + 0x38]
	0x03AF4110 CMP W10, W1
	0x03AF4114 CSET W8, LE
	0x03AF4118 CBZ X9, 0x3AF42C8
	0x03AF411C LDR W10, [X9 + 0x18]
	0x03AF4120 SUB W8, W1, W8
	0x03AF4124 CMP W8, W10
	0x03AF4128 B.CS 0x3AF42CC
	0x03AF412C MOVZ W10, 0x178
	0x03AF4130 SMADDL X9, X8, X10, X9
	0x03AF4134 LDRSW X20, [X9 + 0x64]
	0x03AF4138 SUBS W21, W20, 0x1
	0x03AF413C B.MI 0x3AF429C
	0x03AF4140 MOV X19, X0
	0x03AF4144 LDR X0, [X0 + 0x110]
	0x03AF4148 CBZ X0, 0x3AF42C8
	0x03AF414C LDR V8, [X9 + 0x140]
	0x03AF4150 MOV X1, X31
	0x03AF4154 BL 0x3C3E51C
	0x03AF4158 LDR X9, [X19 + 0x138]
	0x03AF415C CMP W21, 0x1
	0x03AF4160 B.LT 0x3AF41C0
	0x03AF4164 CBZ X9, 0x3AF42C8
	0x03AF4168 LDR X10, [X9 + 0x368]
	0x03AF416C MOVZ W11, 0x5C
	0x03AF4170 UMADDL X12, X21, X11, X31
	0x03AF4174 MOV W8, W21
	0x03AF4178 ADD X12, X12, 0x50
	0x03AF417C CBZ X10, 0x3AF42C8
	0x03AF4180 LDR X13, [X10 + 0x50]
	0x03AF4184 CBZ X13, 0x3AF42C8
	0x03AF4188 LDR W14, [X13 + 0x18]
	0x03AF418C CMP X8, X14
	0x03AF4190 B.CS 0x3AF42CC
	0x03AF4194 CMP W20, W14
	0x03AF4198 B.CS 0x3AF42CC
	0x03AF419C MADD X14, X20, X11, X13
	0x03AF41A0 LDR V0, [X14 + 0x50]
	0x03AF41A4 LDR V1, [X13, X12, LSL]
	0x03AF41A8 FADD S0, S3, S0
	0x03AF41AC FCMP S1, S0
	0x03AF41B0 B.GT 0x3AF41C4
	0x03AF41B4 SUBS X8, X8, 0x1
	0x03AF41B8 SUB X12, X12, 0x5C
	0x03AF41BC B.GT 0x3AF417C
	0x03AF41C0 MOV W8, W31
	0x03AF41C4 CBZ X9, 0x3AF42C8
	0x03AF41C8 LDR X9, [X9 + 0x368]
	0x03AF41CC CBZ X9, 0x3AF42C8
	0x03AF41D0 LDR X10, [X9 + 0x50]
	0x03AF41D4 CBZ X10, 0x3AF42C8
	0x03AF41D8 LDR W11, [X10 + 0x18]
	0x03AF41DC CMP W8, W11
	0x03AF41E0 B.CS 0x3AF42CC
	0x03AF41E4 MOVZ W11, 0x5C
	0x03AF41E8 SMADDL X8, X8, X11, X10
	0x03AF41EC LDR W0, [X8 + 0x3C]
	0x03AF41F0 LDR W8, [X8 + 0x34]
	0x03AF41F4 CMP W8, W0
	0x03AF41F8 B.GE 0x3AF42A4
	0x03AF41FC LDR X10, [X9 + 0x38]
	0x03AF4200 CBZ X10, 0x3AF42C8
	0x03AF4204 ADRP X14, 0xFFFFFFFFFCFF6000
	0x03AF4208 LDR W9, [X10 + 0x18]
	0x03AF420C LDR V1, [X14 + 0x374]
	0x03AF4210 SXTW X12, W8
	0x03AF4214 MOVZ W13, 0x178
	0x03AF4218 SXTW X11, W0
	0x03AF421C MADD X10, X12, X13, X10
	0x03AF4220 SUB X11, X11, X12
	0x03AF4224 ADD X12, X10, 0x144
	0x03AF4228 FMOV S0, W31
	0x03AF422C MOVN W10, 0x0
	0x03AF4230 FMOV S2, 1
	0x03AF4234 CMP W8, W9
	0x03AF4238 B.CS 0x3AF42CC
	0x03AF423C LDP S3, S5, [X12 - 0x4]
	0x03AF4240 FSUB S4, S8, S3
	0x03AF4244 FSUB S3, S5, S3

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x8F0000
	008 Move W8, [X22+1544]
	009 Move W21, W2
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x603000
	017 Move X0, [X0+368]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1544], W8
	021 Move W22, [X19+564]
	022 Move X0, X19
	023 Call TMP_InputField.get_compositionLength, X0
	024 Move W23, [X19+568]
	025 Add W22, W0, W22
	026 Move X0, X19
	027 Call TMP_InputField.get_compositionLength, X0
	028 Add W8, W0, W23
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move TEMP, X20
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {61}
	034 Move W20, [X19+564]
	035 Move X0, X19
	036 Call TMP_InputField.get_compositionLength, X0
	037 Move W21, [X19+568]
	038 Add W20, W0, W20
	039 Move X0, X19
	040 Call TMP_InputField.get_compositionLength, X0
	041 Add W8, W0, W21
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CSEL not yet implemented."
	044 Move [X19+568], W8
	045 Move TEMP, X8
	046 And TEMP, TEMP, -2147483648
	047 Compare TEMP, -2147483648
	048 JumpIfEqual {116}
	049 Move X9, [X19+544]
	050 Compare X9, 0
	051 JumpIfEqual {274}
	052 Move W10, [X9+16]
	053 Move W20, W8
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W20, W10
	056 Move [X19+568], W10
	057 Move [X19+564], W8
	058 Move W9, [X9+16]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 NotImplemented "Instruction CSEL not yet implemented."
	061 Move TEMP, X21
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {72}
	065 Move X0, X19
	066 Call TMP_InputField.FindPrevWordBegin, X0
	067 Move W21, W0
	068 Move TEMP, X20
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfEqual {141}
	072 Move W8, [X19+729]
	073 Compare W8, 0
	074 JumpIfEqual {151}
	075 Move W21, [X19+568]
	076 Move X0, X19
	077 Call TMP_InputField.get_compositionLength, X0
	078 Add W8, W0, W21
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X21, [X19+544]
	081 Move W22, [X19+568]
	082 Move X0, X19
	083 Call TMP_InputField.get_compositionLength, X0
	084 Compare X21, 0
	085 JumpIfEqual {274}
	086 Add W8, W22, W0
	087 Subtract W1, W8, 1
	088 Move X0, X21
	089 Move X2, X31
	090 Call String.get_Chars, X0, X1
	091 Move X8, 0x603000
	092 Move X8, [X8+368]
	093 Move W21, W0
	094 Move X8, [X8]
	095 Move W9, [X8+224]
	096 Compare W9, 0
	097 JumpIfNotEqual {100}
	098 Move X0, X8
	099 Call 0x1C17DFC
	100 Move W0, W21
	101 Move X1, X31
	102 Call Char.IsLowSurrogate, X0
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {132}
	107 Move W21, [X19+568]
	108 Move X0, X19
	109 Call TMP_InputField.get_compositionLength, X0
	110 Add W8, W21, W0
	111 Subtract W21, W8, 2
	112 Move TEMP, X20
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfEqual {141}
	116 Move W8, W31
	117 Move W20, W31
	118 Move [X19+568], W31
	119 Move X0, X19
	120 Move [X19+564], W8
	121 Call TMP_InputField.get_compositionLength, X0
	122 Add W1, W0, W20
	123 Move X0, X19
	124 Call TMP_InputField.GetCaretPositionFromStringIndex, X0, X1
	125 Move W20, W0
	126 Add X1, X19, 576
	127 Move [X19+576], W0
	128 Move X0, X19
	129 Call TMP_InputField.ClampCaretPos, X0, X1
	130 Add X1, X19, 572
	131 Move [X19+572], W20
	132 Move W21, [X19+568]
	133 Move X0, X19
	134 Call TMP_InputField.get_compositionLength, X0
	135 Add W8, W21, W0
	136 Subtract W21, W8, 1
	137 Move TEMP, X20
	138 And TEMP, TEMP, 1
	139 Compare TEMP, 1
	140 JumpIfNotEqual {196}
	141 Move [X19+568], W21
	142 Move TEMP, X21
	143 And TEMP, TEMP, -2147483648
	144 Compare TEMP, -2147483648
	145 JumpIfEqual {173}
	146 Move X8, [X19+544]
	147 Compare X8, 0
	148 JumpIfEqual {274}
	149 Move W8, [X8+16]
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move W22, [X19+576]
	152 Move X0, X19
	153 Call TMP_InputField.get_compositionLength, X0
	154 Move X8, [X19+312]
	155 Compare X8, 0
	156 JumpIfEqual {274}
	157 Move X8, [X8+872]
	158 Compare X8, 0
	159 JumpIfEqual {274}
	160 Move X21, [X8+56]
	161 Add W8, W0, W22
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move W22, [X19+576]
	164 Move X0, X19
	165 Call TMP_InputField.get_compositionLength, X0
	166 Compare X21, 0
	167 JumpIfEqual {274}
	168 Move W9, [X21+24]
	169 Add W8, W22, W0
	170 Subtract W8, W8, 1
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Move X8, W8
	173 Move W8, W31
	174 Move W21, W8
	175 Move [X19+568], W8
	176 Move X0, X19
	177 Call TMP_InputField.get_compositionLength, X0
	178 Add W1, W0, W21
	179 Move X0, X19
	180 Call TMP_InputField.GetCaretPositionFromStringIndex, X0, X1
	181 Add X1, X19, 576
	182 Move [X19+576], W0
	183 Compare X21, 0
	184 JumpIfEqual {274}
	185 Move W8, [X21+24]
	186 Compare W8, 0
	187 JumpIfEqual {275}
	188 Move X8, X31
	189 Move W9, 376
	190 NotImplemented "Instruction MADD not yet implemented."
	191 Move W21, [X8+36]
	192 Move TEMP, X20
	193 And TEMP, TEMP, 1
	194 Compare TEMP, 1
	195 JumpIfEqual {141}
	196 Move [X19+564], W21
	197 Move TEMP, X21
	198 And TEMP, TEMP, -2147483648
	199 Compare TEMP, -2147483648
	200 JumpIfEqual {211}
	201 Move X8, [X19+544]
	202 Compare X8, 0
	203 JumpIfEqual {274}
	204 Move W9, [X8+16]
	205 NotImplemented "Instruction CMP not yet implemented."
	206 Move [X19+564], W9
	207 Move [X19+568], W21
	208 Move W8, [X8+16]
	209 NotImplemented "Instruction CMP not yet implemented."
	210 NotImplemented "Instruction CSEL not yet implemented."
	211 Move W8, W31
	212 Move [X19+564], W31
	213 Move W20, [X19+572]
	214 Move X0, X19
	215 Move [X19+568], W8
	216 Call TMP_InputField.get_compositionLength, X0
	217 Add W8, W0, W20
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Move W21, [X19+564]
	220 Move X0, X19
	221 Call TMP_InputField.get_compositionLength, X0
	222 Move X8, [X19+312]
	223 Compare X8, 0
	224 JumpIfEqual {274}
	225 Move X8, [X8+872]
	226 Compare X8, 0
	227 JumpIfEqual {274}
	228 Move X22, [X8+56]
	229 Move W23, [X19+572]
	230 Move W20, W0
	231 Move X0, X19
	232 Call TMP_InputField.get_compositionLength, X0
	233 Compare X22, 0
	234 JumpIfEqual {274}
	235 Move W9, [X22+24]
	236 Add W8, W23, W0
	237 Subtract W8, W8, 1
	238 NotImplemented "Instruction CMP not yet implemented."
	239 Move W9, 376
	240 NotImplemented "Instruction SMADDL not yet implemented."
	241 Move W8, [X8+36]
	242 Add W9, W20, W21
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Move X20, [X31+32]
	245 Move X19, [X31+40]
	246 Move X22, [X31+16]
	247 Move X21, [X31+24]
	248 Move X30, [X31+48]
	249 Move X23, [X31+56]
	250 Return 
	251 Move W21, [X19+568]
	252 Move X0, X19
	253 Add X20, X19, 572
	254 Call TMP_InputField.get_compositionLength, X0
	255 Add W1, W0, W21
	256 Move X0, X19
	257 Call TMP_InputField.GetCaretPositionFromStringIndex, X0, X1
	258 Move W21, W0
	259 Move [X19+572], W0
	260 Move X0, X19
	261 Move X1, X20
	262 Call TMP_InputField.ClampCaretPos, X0, X1
	263 Add X1, X19, 576
	264 Move [X19+576], W21
	265 Move X0, X19
	266 Move X20, [X31+32]
	267 Move X19, [X31+40]
	268 Move X22, [X31+16]
	269 Move X21, [X31+24]
	270 Move X30, [X31+48]
	271 Move X23, [X31+56]
	272 Call TMP_InputField.ClampCaretPos, X0, X1
	273 Return 
	274 Call 0x1C17F20
	275 Call 0x1C17F28

Method: System.Int32 LineUpCharacterPosition(System.Int32 originalPos, System.Boolean goToFirstChar)

Disassembly:
	0x03AF4E50 STP X22, X21, [X31 + 0x20]
	0x03AF4E54 STP X20, X19, [X31 + 0x30]
	0x03AF4E58 LDRB W8, [X0 + 0x230]
	0x03AF4E5C CBNZ W8, 0x3AF4FA0
	0x03AF4E60 MOV X19, X0
	0x03AF4E64 MOV W20, W1
	0x03AF4E68 BL 0x3AF01B0
	0x03AF4E6C TBZ X0, 0x0, 0x3AF4FA0
	0x03AF4E70 LDR W21, [X19 + 0x234]
	0x03AF4E74 MOV X0, X19
	0x03AF4E78 BL 0x3AEC28C
	0x03AF4E7C LDR W23, [X19 + 0x238]
	0x03AF4E80 ADD W21, W0, W21
	0x03AF4E84 MOV X0, X19
	0x03AF4E88 BL 0x3AEC28C
	0x03AF4E8C LDR X22, [X19 + 0x220]
	0x03AF4E90 LDR W24, [X19 + 0x240]
	0x03AF4E94 ADD W8, W0, W23
	0x03AF4E98 CMP W21, W8
	0x03AF4E9C MOV X0, X19
	0x03AF4EA0 CSEL W21, W21, W8, LT
	0x03AF4EA4 BL 0x3AEC28C
	0x03AF4EA8 LDR W23, [X19 + 0x23C]
	0x03AF4EAC ADD W24, W0, W24
	0x03AF4EB0 MOV X0, X19
	0x03AF4EB4 BL 0x3AEC28C
	0x03AF4EB8 ADD W8, W0, W23
	0x03AF4EBC CMP W24, W8
	0x03AF4EC0 B.EQ 0x3AF4F08
	0x03AF4EC4 LDRB W8, [X19 + 0x2D9]
	0x03AF4EC8 CBNZ W8, 0x3AF4ED4
	0x03AF4ECC LDRB W8, [X19 + 0x2C9]
	0x03AF4ED0 CBZ W8, 0x3AF4FBC
	0x03AF4ED4 LDR W8, [X19 + 0x234]
	0x03AF4ED8 LDR W1, [X19 + 0x238]
	0x03AF4EDC LDR X0, [X19 + 0x220]
	0x03AF4EE0 SUBS W2, W8, W1
	0x03AF4EE4 B.GE 0x3AF4EF8
	0x03AF4EE8 CBZ X0, 0x3AF507C
	0x03AF4EEC SUB W2, W1, W8
	0x03AF4EF0 MOV W1, W8
	0x03AF4EF4 B 0x3AF4EFC
	0x03AF4EF8 CBZ X0, 0x3AF507C
	0x03AF4EFC MOV X3, X31
	0x03AF4F00 BL 0x3228B90
	0x03AF4F04 MOV X22, X0
	0x03AF4F08 LDR X8, [X19 + 0x1F0]
	0x03AF4F0C CBZ X8, 0x3AF4F54
	0x03AF4F10 LDR X9, [X8 + 0x18]
	0x03AF4F14 LDR X0, [X8 + 0x40]
	0x03AF4F18 LDR X4, [X8 + 0x28]
	0x03AF4F1C MOV X1, X22
	0x03AF4F20 MOV W2, W21
	0x03AF4F24 MOV W3, W20
	0x03AF4F28 BLR X9
	0x03AF4F2C MOV W20, W0
	0x03AF4F30 ANDS W31, W20, 0xFFFF
	0x03AF4F34 B.EQ 0x3AF4FA0
	0x03AF4F38 MOV X0, X19
	0x03AF4F3C MOV W1, W20
	0x03AF4F40 LDP X20, X19, [X31 + 0x30]
	0x03AF4F44 LDP X22, X21, [X31 + 0x20]
	0x03AF4F48 LDP X24, X23, [X31 + 0x10]
	0x03AF4F4C LDR X30, [X31], #0x40
	0x03AF4F50 B 0x3AF5084
	0x03AF4F54 LDR W8, [X19 + 0x198]
	0x03AF4F58 CBZ W8, 0x3AF4F30
	0x03AF4F5C MOV X0, X19
	0x03AF4F60 MOV X1, X22
	0x03AF4F64 MOV W2, W21
	0x03AF4F68 MOV W3, W20
	0x03AF4F6C CMP W8, 0x8
	0x03AF4F70 B.NE 0x3AF4FB4
	0x03AF4F74 BL 0x3AF0EDC
	0x03AF4F78 ANDS W31, W0, 0xFFFF
	0x03AF4F7C B.EQ 0x3AF4FA0
	0x03AF4F80 MOV X0, X19
	0x03AF4F84 BL 0x3AED028
	0x03AF4F88 MOV X0, X19
	0x03AF4F8C LDP X20, X19, [X31 + 0x30]
	0x03AF4F90 LDP X22, X21, [X31 + 0x20]
	0x03AF4F94 LDP X24, X23, [X31 + 0x10]
	0x03AF4F98 LDR X30, [X31], #0x40
	0x03AF4F9C B 0x3AECBA4

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+312]
	003 Compare X8, 0
	004 JumpIfEqual {79}
	005 Move X9, [X8+872]
	006 Compare X9, 0
	007 JumpIfEqual {79}
	008 Move W8, [X9+24]
	009 Move X10, [X9+56]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 NotImplemented "Instruction CSET not yet implemented."
	012 Compare X10, 0
	013 JumpIfEqual {79}
	014 Move W8, [X10+24]
	015 Subtract W14, W1, W11
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W11, 376
	018 NotImplemented "Instruction SMADDL not yet implemented."
	019 NotImplemented "Instruction LDRSW not yet implemented."
	020 Subtract W12, W13, 1
	021 Move X9, [X9+80]
	022 Compare X9, 0
	023 JumpIfEqual {79}
	024 Move W14, [X9+24]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move W14, 92
	028 NotImplemented "Instruction MADD not yet implemented."
	029 Move W13, [X13+52]
	030 NotImplemented "Instruction NOP not yet implemented."
	031 NotImplemented "Instruction UMADDL not yet implemented."
	032 Move W9, [X9+52]
	033 Subtract W0, W13, 1
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X14, -50368512
	036 Move V0, [X11+320]
	037 Move V2, [X14+884]
	038 Move X11, W9
	039 Move W13, 376
	040 Move X12, W0
	041 NotImplemented "Instruction MADD not yet implemented."
	042 Subtract X11, X12, X11
	043 Add X12, X10, 324
	044 Move S1, W31
	045 Move TEMP, 0
	046 Not TEMP
	047 Move W10, TEMP
	048 Move S3, 1
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move S4, [X12-4]
	051 Move S6, [X12]
	052 Subtract S5, S0, S4
	053 Subtract S4, S6, S4
	054 NotImplemented "Instruction FDIV not yet implemented."
	055 NotImplemented "Instruction FCMP not yet implemented."
	056 NotImplemented "Instruction FCMP not yet implemented."
	057 NotImplemented "Instruction FABS not yet implemented."
	058 NotImplemented "Instruction FCMP not yet implemented."
	059 NotImplemented "Instruction FCSEL not yet implemented."
	060 NotImplemented "Instruction FCSEL not yet implemented."
	061 NotImplemented "Instruction CSEL not yet implemented."
	062 Add W9, W9, 1
	063 Subtract X11, X11, 1
	064 Add X12, X12, 376
	065 Move S0, 0.5
	066 NotImplemented "Instruction FCMP not yet implemented."
	067 NotImplemented "Instruction CSET not yet implemented."
	068 Add W31, W10, 1
	069 Add W0, W10, W8
	070 And W31, W2, 1
	071 NotImplemented "Instruction CSEL not yet implemented."
	072 Move S0, 0.5
	073 NotImplemented "Instruction FCMP not yet implemented."
	074 NotImplemented "Instruction CSET not yet implemented."
	075 Add W0, W8, W9
	076 Move X30, [X31+16]
	077 Return X0
	078 Call 0x1C17F28
	079 Call 0x1C17F20

Method: System.Int32 LineDownCharacterPosition(System.Int32 originalPos, System.Boolean goToLastChar)

Disassembly:
	0x03AF4FA0 LDP X20, X19, [X31 + 0x30]
	0x03AF4FA4 LDP X22, X21, [X31 + 0x20]
	0x03AF4FA8 LDP X24, X23, [X31 + 0x10]
	0x03AF4FAC LDR X30, [X31], #0x40
	0x03AF4FB0 RET
	0x03AF4FB4 BL 0x3AF0EDC
	0x03AF4FB8 B 0x3AF4F2C
	0x03AF4FBC LDR X8, [X19 + 0x138]
	0x03AF4FC0 CBZ X8, 0x3AF507C
	0x03AF4FC4 LDR X8, [X8 + 0x368]
	0x03AF4FC8 CBZ X8, 0x3AF507C
	0x03AF4FCC LDR X8, [X8 + 0x38]
	0x03AF4FD0 CBZ X8, 0x3AF507C
	0x03AF4FD4 LDRSW X10, [X19 + 0x23C]
	0x03AF4FD8 LDRSW X9, [X19 + 0x240]
	0x03AF4FDC CMP W10, W9
	0x03AF4FE0 B.GE 0x3AF5030
	0x03AF4FE4 LDR W11, [X8 + 0x18]
	0x03AF4FE8 CMP W10, W11
	0x03AF4FEC B.CS 0x3AF5080
	0x03AF4FF0 MOVZ W12, 0x178
	0x03AF4FF4 MADD X10, X10, X12, X8
	0x03AF4FF8 LDR W1, [X10 + 0x24]
	0x03AF4FFC SUB X9, X9, 0x1
	0x03AF5000 CMP W9, W11
	0x03AF5004 STR W1, [X19 + 0x234]
	0x03AF5008 B.CS 0x3AF5080
	0x03AF500C MOVZ W10, 0x178
	0x03AF5010 MADD X8, X9, X10, X8
	0x03AF5014 LDP W9, W8, [X8 + 0x24]
	0x03AF5018 LDR X0, [X19 + 0x220]
	0x03AF501C ADD W8, W8, W9
	0x03AF5020 STR W8, [X19 + 0x238]
	0x03AF5024 CBZ X0, 0x3AF507C
	0x03AF5028 SUB W2, W8, W1
	0x03AF502C B 0x3AF4EFC
	0x03AF5030 LDR W11, [X8 + 0x18]
	0x03AF5034 SUB W10, W10, 0x1
	0x03AF5038 CMP W10, W11
	0x03AF503C B.CS 0x3AF5080
	0x03AF5040 MOVZ W12, 0x178
	0x03AF5044 SMADDL X10, X10, X12, X8
	0x03AF5048 LDP W12, W10, [X10 + 0x24]
	0x03AF504C CMP W9, W11
	0x03AF5050 ADD W10, W10, W12
	0x03AF5054 STR W10, [X19 + 0x234]
	0x03AF5058 B.CS 0x3AF5080
	0x03AF505C MOVZ W11, 0x178
	0x03AF5060 MADD X8, X9, X11, X8
	0x03AF5064 LDR W1, [X8 + 0x24]
	0x03AF5068 LDR X0, [X19 + 0x220]
	0x03AF506C STR W1, [X19 + 0x238]
	0x03AF5070 CBZ X0, 0x3AF507C
	0x03AF5074 SUB W2, W10, W1
	0x03AF5078 B 0x3AF4EFC
	0x03AF507C BL 0x1C16F20
	0x03AF5080 BL 0x1C16F28
	0x03AF5084 SUB X31, X31, 0x30
	0x03AF5088 STP X30, X21, [X31 + 0x10]
	0x03AF508C STP X20, X19, [X31 + 0x20]
	0x03AF5090 ADRP X20, 0x8ED000
	0x03AF5094 LDRB W8, [X20 + 0x60B]
	0x03AF5098 MOV X19, X0
	0x03AF509C STRH W1, [X31 + 0xC]
	0x03AF50A0 TBNZ X8, 0x0, 0x3AF50B8
	0x03AF50A4 ADRP X0, 0x600000
	0x03AF50A8 LDR X0, [X0 + 0x170]
	0x03AF50AC BL 0x1C16CF4
	0x03AF50B0 MOVZ W8, 0x1
	0x03AF50B4 STRB W8, [X20 + 0x60B]
	0x03AF50B8 LDRB W8, [X19 + 0x230]
	0x03AF50BC CBNZ W8, 0x3AF5180
	0x03AF50C0 ADRP X21, 0x600000
	0x03AF50C4 LDR X21, [X21 + 0x170]
	0x03AF50C8 LDR X0, [X21]
	0x03AF50CC LDR W8, [X0 + 0xE0]
	0x03AF50D0 CBNZ W8, 0x3AF50D8
	0x03AF50D4 BL 0x1C16DFC
	0x03AF50D8 ADD X0, X31, 0xC
	0x03AF50DC MOV X1, X31
	0x03AF50E0 BL 0x330A76C
	0x03AF50E4 MOV X20, X0
	0x03AF50E8 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+312]
	003 Compare X8, 0
	004 JumpIfEqual {76}
	005 Move X9, [X8+872]
	006 Compare X9, 0
	007 JumpIfEqual {76}
	008 Move W12, [X9+24]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X10, [X9+56]
	011 Compare X10, 0
	012 JumpIfEqual {76}
	013 Move W8, [X10+24]
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move W11, 376
	016 NotImplemented "Instruction SMADDL not yet implemented."
	017 Move W13, [X11+100]
	018 Move W14, [X9+44]
	019 Add W13, W13, 1
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X9, [X9+80]
	022 Compare X9, 0
	023 JumpIfEqual {76}
	024 Move W12, [X9+24]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W12, 92
	027 NotImplemented "Instruction SMADDL not yet implemented."
	028 Move W0, [X9+60]
	029 Move W9, [X9+52]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X14, -50372608
	032 Move V0, [X11+320]
	033 Move V2, [X14+884]
	034 Move X12, W9
	035 Move W13, 376
	036 Move X11, W0
	037 NotImplemented "Instruction MADD not yet implemented."
	038 Subtract X11, X11, X12
	039 Add X12, X10, 324
	040 Move S1, W31
	041 Move TEMP, 0
	042 Not TEMP
	043 Move W10, TEMP
	044 Move S3, 1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move S4, [X12-4]
	047 Move S6, [X12]
	048 Subtract S5, S0, S4
	049 Subtract S4, S6, S4
	050 NotImplemented "Instruction FDIV not yet implemented."
	051 NotImplemented "Instruction FCMP not yet implemented."
	052 NotImplemented "Instruction FCMP not yet implemented."
	053 NotImplemented "Instruction FABS not yet implemented."
	054 NotImplemented "Instruction FCMP not yet implemented."
	055 NotImplemented "Instruction FCSEL not yet implemented."
	056 NotImplemented "Instruction FCSEL not yet implemented."
	057 NotImplemented "Instruction CSEL not yet implemented."
	058 Add W9, W9, 1
	059 Subtract X11, X11, 1
	060 Add X12, X12, 376
	061 Add W31, W10, 1
	062 Move S0, 0.5
	063 NotImplemented "Instruction FCMP not yet implemented."
	064 NotImplemented "Instruction CSET not yet implemented."
	065 Add W0, W10, W8
	066 Subtract W0, W12, 1
	067 Subtract W8, W12, 1
	068 And W31, W2, 1
	069 NotImplemented "Instruction CSEL not yet implemented."
	070 Move X30, [X31+16]
	071 Return X0
	072 Move S0, 0.5
	073 NotImplemented "Instruction FCMP not yet implemented."
	074 NotImplemented "Instruction CSET not yet implemented."
	075 Add W0, W8, W9
	076 Call 0x1C17F20
	077 Call 0x1C17F28

Method: System.Int32 PageUpCharacterPosition(System.Int32 originalPos, System.Boolean goToFirstChar)

Disassembly:
	0x03AF50EC BL 0x3AF2CC4
	0x03AF50F0 LDR W8, [X19 + 0x1AC]
	0x03AF50F4 LDR X0, [X19 + 0x220]
	0x03AF50F8 CMP W8, 0x1
	0x03AF50FC B.LT 0x3AF5114
	0x03AF5100 CBZ X0, 0x3AF5190
	0x03AF5104 LDR W9, [X0 + 0x10]
	0x03AF5108 CMP W9, W8
	0x03AF510C B.LT 0x3AF5118
	0x03AF5110 B 0x3AF5180
	0x03AF5114 CBZ X0, 0x3AF5190
	0x03AF5118 LDR W1, [X19 + 0x234]
	0x03AF511C MOV X2, X20
	0x03AF5120 MOV X3, X31
	0x03AF5124 BL 0x3227EBC
	0x03AF5128 STR X0, [X19 + 0x220]
	0x03AF512C LDR X0, [X21]
	0x03AF5130 LDRH W20, [X31 + 0xC]
	0x03AF5134 LDR W8, [X0 + 0xE0]
	0x03AF5138 CBNZ W8, 0x3AF5140
	0x03AF513C BL 0x1C16DFC
	0x03AF5140 MOV W0, W20
	0x03AF5144 MOV X1, X31
	0x03AF5148 BL 0x331BFEC
	0x03AF514C TBNZ X0, 0x0, 0x3AF5160
	0x03AF5150 LDR W8, [X19 + 0x23C]
	0x03AF5154 ADD W8, W8, 0x1
	0x03AF5158 STR W8, [X19 + 0x23C]
	0x03AF515C STR W8, [X19 + 0x240]
	0x03AF5160 LDR W8, [X19 + 0x234]
	0x03AF5164 MOV X0, X19
	0x03AF5168 ADD W8, W8, 0x1
	0x03AF516C STR W8, [X19 + 0x234]
	0x03AF5170 STR W8, [X19 + 0x238]
	0x03AF5174 BL 0x3AF2E5C
	0x03AF5178 MOV X0, X19
	0x03AF517C BL 0x3AED028
	0x03AF5180 LDP X20, X19, [X31 + 0x20]
	0x03AF5184 LDP X30, X21, [X31 + 0x10]
	0x03AF5188 ADD X31, X31, 0x30
	0x03AF518C RET
	0x03AF5190 BL 0x1C16F20
	0x03AF5194 STR X30, [X31 - 0x20]!
	0x03AF5198 STP X20, X19, [X31 + 0x10]
	0x03AF519C ADRP X20, 0x8ED000
	0x03AF51A0 LDRB W8, [X20 + 0x60D]
	0x03AF51A4 MOV X19, X0
	0x03AF51A8 TBNZ X8, 0x0, 0x3AF51C0
	0x03AF51AC ADRP X0, 0x664000
	0x03AF51B0 LDR X0, [X0 + 0x48]
	0x03AF51B4 BL 0x1C16CF4
	0x03AF51B8 MOVZ W8, 0x1
	0x03AF51BC STRB W8, [X20 + 0x60D]
	0x03AF51C0 LDR X0, [X19 + 0x1B0]
	0x03AF51C4 CBZ X0, 0x3AF51E4
	0x03AF51C8 ADRP X8, 0x664000
	0x03AF51CC LDR X8, [X8 + 0x48]
	0x03AF51D0 LDR X1, [X19 + 0x220]
	0x03AF51D4 LDP X20, X19, [X31 + 0x10]
	0x03AF51D8 LDR X2, [X8]
	0x03AF51DC LDR X30, [X31], #0x20
	0x03AF51E0 B 0x2729DBC
	0x03AF51E4 LDP X20, X19, [X31 + 0x10]
	0x03AF51E8 LDR X30, [X31], #0x20
	0x03AF51EC RET
	0x03AF51F0 STR X30, [X31 - 0x20]!
	0x03AF51F4 STP X20, X19, [X31 + 0x10]
	0x03AF51F8 ADRP X20, 0x8ED000
	0x03AF51FC LDRB W8, [X20 + 0x60F]
	0x03AF5200 MOV X19, X0
	0x03AF5204 TBNZ X8, 0x0, 0x3AF521C
	0x03AF5208 ADRP X0, 0x664000
	0x03AF520C LDR X0, [X0 + 0x48]
	0x03AF5210 BL 0x1C16CF4
	0x03AF5214 MOVZ W8, 0x1
	0x03AF5218 STRB W8, [X20 + 0x60F]
	0x03AF521C LDR X0, [X19 + 0x1C0]
	0x03AF5220 CBZ X0, 0x3AF5240
	0x03AF5224 ADRP X8, 0x664000
	0x03AF5228 LDR X8, [X8 + 0x48]
	0x03AF522C LDR X1, [X19 + 0x220]
	0x03AF5230 LDP X20, X19, [X31 + 0x10]
	0x03AF5234 LDR X2, [X8]
	0x03AF5238 LDR X30, [X31], #0x20
	0x03AF523C B 0x2729DBC
	0x03AF5240 LDP X20, X19, [X31 + 0x10]
	0x03AF5244 LDR X30, [X31], #0x20
	0x03AF5248 RET
	0x03AF524C STR X30, [X31 - 0x20]!
	0x03AF5250 STP X20, X19, [X31 + 0x10]
	0x03AF5254 ADRP X20, 0x8ED000
	0x03AF5258 LDRB W8, [X20 + 0x610]
	0x03AF525C MOV X19, X0
	0x03AF5260 TBNZ X8, 0x0, 0x3AF5278
	0x03AF5264 ADRP X0, 0x664000
	0x03AF5268 LDR X0, [X0 + 0x48]
	0x03AF526C BL 0x1C16CF4
	0x03AF5270 MOVZ W8, 0x1
	0x03AF5274 STRB W8, [X20 + 0x610]
	0x03AF5278 LDR X0, [X19 + 0x1C8]
	0x03AF527C CBZ X0, 0x3AF529C
	0x03AF5280 ADRP X8, 0x664000
	0x03AF5284 LDR X8, [X8 + 0x48]
	0x03AF5288 LDR X1, [X19 + 0x220]
	0x03AF528C LDP X20, X19, [X31 + 0x10]
	0x03AF5290 LDR X2, [X8]
	0x03AF5294 LDR X30, [X31], #0x20
	0x03AF5298 B 0x2729DBC
	0x03AF529C LDP X20, X19, [X31 + 0x10]
	0x03AF52A0 LDR X30, [X31], #0x20
	0x03AF52A4 RET
	0x03AF52A8 STR X30, [X31 - 0x40]!
	0x03AF52AC STP X24, X23, [X31 + 0x10]
	0x03AF52B0 STP X22, X21, [X31 + 0x20]
	0x03AF52B4 STP X20, X19, [X31 + 0x30]
	0x03AF52B8 ADRP X20, 0x8ED000
	0x03AF52BC LDRB W8, [X20 + 0x611]
	0x03AF52C0 MOV X19, X0
	0x03AF52C4 TBNZ X8, 0x0, 0x3AF52DC
	0x03AF52C8 ADRP X0, 0x664000
	0x03AF52CC LDR X0, [X0 + 0x198]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X0+312]
	007 Compare X8, 0
	008 JumpIfEqual {122}
	009 Move X8, [X8+872]
	010 Compare X8, 0
	011 JumpIfEqual {122}
	012 Move W10, [X8+24]
	013 Move X9, [X8+56]
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CSET not yet implemented."
	016 Compare X9, 0
	017 JumpIfEqual {122}
	018 Move W10, [X9+24]
	019 Subtract W8, W1, W8
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move W10, 376
	022 NotImplemented "Instruction SMADDL not yet implemented."
	023 NotImplemented "Instruction LDRSW not yet implemented."
	024 Subtract W21, W20, 1
	025 Move X19, X0
	026 Move X0, [X0+272]
	027 Compare X0, 0
	028 JumpIfEqual {122}
	029 Move V8, [X9+320]
	030 Move X1, X31
	031 Call RectTransform.get_rect, X0
	032 Move X9, [X19+312]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Compare X9, 0
	035 JumpIfEqual {122}
	036 Move X10, [X9+872]
	037 Move W11, 92
	038 NotImplemented "Instruction UMADDL not yet implemented."
	039 Move W8, W21
	040 Add X12, X12, 80
	041 Compare X10, 0
	042 JumpIfEqual {122}
	043 Move X13, [X10+80]
	044 Compare X13, 0
	045 JumpIfEqual {122}
	046 Move W14, [X13+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CMP not yet implemented."
	049 NotImplemented "Instruction MADD not yet implemented."
	050 Move V0, [X14+80]
	051 Move V1, [X13]
	052 Add S0, S3, S0
	053 NotImplemented "Instruction FCMP not yet implemented."
	054 Subtract X8, X8, 1
	055 Subtract X12, X12, 92
	056 Move W8, W31
	057 Compare X9, 0
	058 JumpIfEqual {122}
	059 Move X9, [X9+872]
	060 Compare X9, 0
	061 JumpIfEqual {122}
	062 Move X10, [X9+80]
	063 Compare X10, 0
	064 JumpIfEqual {122}
	065 Move W11, [X10+24]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move W11, 92
	068 NotImplemented "Instruction SMADDL not yet implemented."
	069 Move W0, [X8+60]
	070 Move W8, [X8+52]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X10, [X9+56]
	073 Compare X10, 0
	074 JumpIfEqual {122}
	075 Move X14, -50372608
	076 Move W9, [X10+24]
	077 Move V1, [X14+884]
	078 Move X12, W8
	079 Move W13, 376
	080 Move X11, W0
	081 NotImplemented "Instruction MADD not yet implemented."
	082 Subtract X11, X11, X12
	083 Add X12, X10, 324
	084 Move S0, W31
	085 Move TEMP, 0
	086 Not TEMP
	087 Move W10, TEMP
	088 Move S2, 1
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move S3, [X12-4]
	091 Move S5, [X12]
	092 Subtract S4, S8, S3
	093 Subtract S3, S5, S3
	094 NotImplemented "Instruction FDIV not yet implemented."
	095 NotImplemented "Instruction FCMP not yet implemented."
	096 NotImplemented "Instruction FCMP not yet implemented."
	097 NotImplemented "Instruction FABS not yet implemented."
	098 NotImplemented "Instruction FCMP not yet implemented."
	099 NotImplemented "Instruction FCSEL not yet implemented."
	100 NotImplemented "Instruction FCSEL not yet implemented."
	101 NotImplemented "Instruction CSEL not yet implemented."
	102 Add W8, W8, 1
	103 Subtract X11, X11, 1
	104 Add X12, X12, 376
	105 Add W31, W10, 1
	106 Move S1, 0.5
	107 NotImplemented "Instruction FCMP not yet implemented."
	108 NotImplemented "Instruction CSET not yet implemented."
	109 Add W0, W10, W8
	110 And W31, W2, 1
	111 NotImplemented "Instruction CSEL not yet implemented."
	112 Move X20, [X31+32]
	113 Move X19, [X31+40]
	114 Move X30, [X31+16]
	115 Move X21, [X31+24]
	116 Move V8, [X31+48]
	117 Return X0
	118 Move S0, 0.5
	119 NotImplemented "Instruction FCMP not yet implemented."
	120 NotImplemented "Instruction CSET not yet implemented."
	121 Add W0, W9, W8
	122 Call 0x1C17F20
	123 Call 0x1C17F28

Method: System.Int32 PageDownCharacterPosition(System.Int32 originalPos, System.Boolean goToLastChar)

Disassembly:
	0x03AF52D0 BL 0x1C16CF4
	0x03AF52D4 MOVZ W8, 0x1
	0x03AF52D8 STRB W8, [X20 + 0x611]
	0x03AF52DC LDR X20, [X19 + 0x1D0]
	0x03AF52E0 MOVZ W8, 0x1
	0x03AF52E4 STRB W8, [X19 + 0x2E8]
	0x03AF52E8 CBZ X20, 0x3AF533C
	0x03AF52EC ADRP X23, 0x664000
	0x03AF52F0 LDR X21, [X19 + 0x220]
	0x03AF52F4 LDR W22, [X19 + 0x234]
	0x03AF52F8 LDR X23, [X23 + 0x198]
	0x03AF52FC MOV X0, X19
	0x03AF5300 BL 0x3AEC28C
	0x03AF5304 LDR W24, [X19 + 0x238]
	0x03AF5308 ADD W22, W0, W22
	0x03AF530C MOV X0, X19
	0x03AF5310 BL 0x3AEC28C
	0x03AF5314 LDR X4, [X23]
	0x03AF5318 ADD W3, W0, W24
	0x03AF531C MOV X0, X20
	0x03AF5320 MOV X1, X21
	0x03AF5324 MOV W2, W22
	0x03AF5328 LDP X20, X19, [X31 + 0x30]
	0x03AF532C LDP X22, X21, [X31 + 0x20]
	0x03AF5330 LDP X24, X23, [X31 + 0x10]
	0x03AF5334 LDR X30, [X31], #0x40
	0x03AF5338 B 0x272EC14
	0x03AF533C LDP X20, X19, [X31 + 0x30]
	0x03AF5340 LDP X22, X21, [X31 + 0x20]
	0x03AF5344 LDP X24, X23, [X31 + 0x10]
	0x03AF5348 LDR X30, [X31], #0x40
	0x03AF534C RET
	0x03AF5350 STP X30, X23, [X31 - 0x30]!
	0x03AF5354 STP X22, X21, [X31 + 0x10]
	0x03AF5358 STP X20, X19, [X31 + 0x20]
	0x03AF535C ADRP X20, 0x8ED000
	0x03AF5360 LDRB W8, [X20 + 0x612]
	0x03AF5364 MOV X19, X0
	0x03AF5368 TBNZ X8, 0x0, 0x3AF5380
	0x03AF536C ADRP X0, 0x664000
	0x03AF5370 LDR X0, [X0 + 0x198]
	0x03AF5374 BL 0x1C16CF4
	0x03AF5378 MOVZ W8, 0x1
	0x03AF537C STRB W8, [X20 + 0x612]
	0x03AF5380 LDRB W8, [X19 + 0x2E8]
	0x03AF5384 CBZ W8, 0x3AF53D4
	0x03AF5388 LDR X20, [X19 + 0x1D8]
	0x03AF538C CBZ X20, 0x3AF53D0
	0x03AF5390 LDR X21, [X19 + 0x220]
	0x03AF5394 LDR W22, [X19 + 0x234]
	0x03AF5398 MOV X0, X19
	0x03AF539C BL 0x3AEC28C
	0x03AF53A0 LDR W23, [X19 + 0x238]
	0x03AF53A4 ADD W22, W0, W22
	0x03AF53A8 MOV X0, X19
	0x03AF53AC BL 0x3AEC28C
	0x03AF53B0 ADRP X8, 0x664000
	0x03AF53B4 LDR X8, [X8 + 0x198]
	0x03AF53B8 ADD W3, W0, W23
	0x03AF53BC MOV X0, X20
	0x03AF53C0 MOV X1, X21
	0x03AF53C4 LDR X4, [X8]
	0x03AF53C8 MOV W2, W22
	0x03AF53CC BL 0x272EC14
	0x03AF53D0 STRB W31, [X19 + 0x2E8]
	0x03AF53D4 LDP X20, X19, [X31 + 0x20]
	0x03AF53D8 LDP X22, X21, [X31 + 0x10]
	0x03AF53DC LDP X30, X23, [X31], #0x30
	0x03AF53E0 RET
	0x03AF53E4 STR D8, [X31 - 0x20]!
	0x03AF53E8 STP X30, X19, [X31 + 0x10]
	0x03AF53EC FCMP S0, 0x0
	0x03AF53F0 B.MI 0x3AF5414
	0x03AF53F4 MOV V8.16B, V0.16B
	0x03AF53F8 FMOV S0, 1
	0x03AF53FC FCMP S8, S0
	0x03AF5400 B.GT 0x3AF5414
	0x03AF5404 MOV V0.16B, V8.16B
	0x03AF5408 MOV X19, X0
	0x03AF540C BL 0x3AF3B2C
	0x03AF5410 STR S8, [X19 + 0x178]
	0x03AF5414 LDP X30, X19, [X31 + 0x10]
	0x03AF5418 LDR V8, [X31], #0x20
	0x03AF541C RET
	0x03AF5420 STR X30, [X31 - 0x10]!
	0x03AF5424 LDR X8, [X0 + 0x138]
	0x03AF5428 CBZ X8, 0x3AF5490
	0x03AF542C LDR X8, [X8 + 0x368]
	0x03AF5430 CBZ X8, 0x3AF5490
	0x03AF5434 LDR W0, [X8 + 0x18]
	0x03AF5438 CMP W0, 0x1
	0x03AF543C B.LT 0x3AF5484
	0x03AF5440 LDR X8, [X8 + 0x38]
	0x03AF5444 CBZ X8, 0x3AF5490
	0x03AF5448 LDR W10, [X8 + 0x18]
	0x03AF544C MOV W9, W31
	0x03AF5450 MOVZ W11, 0x178
	0x03AF5454 CMP W9, W10
	0x03AF5458 B.CS 0x3AF548C
	0x03AF545C SMADDL X12, X9, X11, X8
	0x03AF5460 LDP W13, W12, [X12 + 0x24]
	0x03AF5464 ADD W12, W12, W13
	0x03AF5468 CMP W12, W1
	0x03AF546C B.GT 0x3AF5480
	0x03AF5470 ADD W9, W9, 0x1
	0x03AF5474 CMP W0, W9
	0x03AF5478 B.NE 0x3AF5454
	0x03AF547C B 0x3AF5484
	0x03AF5480 MOV W0, W9
	0x03AF5484 LDR X30, [X31], #0x10
	0x03AF5488 RET
	0x03AF548C BL 0x1C16F28
	0x03AF5490 BL 0x1C16F20
	0x03AF5494 STR X30, [X31 - 0x10]!
	0x03AF5498 LDR X8, [X0 + 0x138]
	0x03AF549C CBZ X8, 0x3AF5500
	0x03AF54A0 LDR X8, [X8 + 0x368]
	0x03AF54A4 CBZ X8, 0x3AF5500
	0x03AF54A8 LDR W0, [X8 + 0x18]
	0x03AF54AC CMP W0, 0x1
	0x03AF54B0 B.LT 0x3AF54F4
	0x03AF54B4 LDR X8, [X8 + 0x38]
	0x03AF54B8 CBZ X8, 0x3AF5500

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X0+312]
	007 Compare X8, 0
	008 JumpIfEqual {121}
	009 Move X9, [X8+872]
	010 Compare X9, 0
	011 JumpIfEqual {121}
	012 Move W8, [X9+24]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X10, [X9+56]
	015 Compare X10, 0
	016 JumpIfEqual {121}
	017 Move W11, [X10+24]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move W11, 376
	020 NotImplemented "Instruction SMADDL not yet implemented."
	021 NotImplemented "Instruction LDRSW not yet implemented."
	022 Move W9, [X9+44]
	023 Add W20, W21, 1
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X19, X0
	026 Move X0, [X0+272]
	027 Compare X0, 0
	028 JumpIfEqual {121}
	029 Move V8, [X10+320]
	030 Move X1, X31
	031 Call RectTransform.get_rect, X0
	032 Move X8, [X19+312]
	033 Compare X8, 0
	034 JumpIfEqual {121}
	035 Move X9, [X8+872]
	036 Compare X9, 0
	037 JumpIfEqual {121}
	038 Move W8, [X9+44]
	039 Move W10, 92
	040 Subtract W11, W8, 1
	041 NotImplemented "Instruction SMADDL not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X12, [X9+80]
	044 Compare X12, 0
	045 JumpIfEqual {121}
	046 Move W13, [X12+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Add X13, X12, 32
	050 NotImplemented "Instruction SMADDL not yet implemented."
	051 NotImplemented "Instruction MADD not yet implemented."
	052 Move V0, [X13+48]
	053 Move V1, [X14+48]
	054 Subtract S0, S0, S3
	055 NotImplemented "Instruction FCMP not yet implemented."
	056 Add W20, W20, 1
	057 Add X8, X8, 92
	058 Compare X9, 0
	059 JumpIfNotEqual {42}
	060 Subtract W0, W8, 1
	061 Subtract W8, W8, 1
	062 And W31, W2, 1
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X30, [X31+16]
	067 Move X21, [X31+24]
	068 Move V8, [X31+48]
	069 Return X0
	070 Move X12, [X9+80]
	071 Compare X12, 0
	072 JumpIfEqual {121}
	073 Move W10, [X12+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Add X8, X12, X8
	076 Move W0, [X8+60]
	077 Move W8, [X8+52]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X10, [X9+56]
	080 Compare X10, 0
	081 JumpIfEqual {121}
	082 Move X14, -50372608
	083 Move W9, [X10+24]
	084 Move V1, [X14+884]
	085 Move X12, W8
	086 Move W13, 376
	087 Move X11, W0
	088 NotImplemented "Instruction MADD not yet implemented."
	089 Subtract X11, X11, X12
	090 Add X12, X10, 324
	091 Move S0, W31
	092 Move TEMP, 0
	093 Not TEMP
	094 Move W10, TEMP
	095 Move S2, 1
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move S3, [X12-4]
	098 Move S5, [X12]
	099 Subtract S4, S8, S3
	100 Subtract S3, S5, S3
	101 NotImplemented "Instruction FDIV not yet implemented."
	102 NotImplemented "Instruction FCMP not yet implemented."
	103 NotImplemented "Instruction FCMP not yet implemented."
	104 NotImplemented "Instruction FABS not yet implemented."
	105 NotImplemented "Instruction FCMP not yet implemented."
	106 NotImplemented "Instruction FCSEL not yet implemented."
	107 NotImplemented "Instruction FCSEL not yet implemented."
	108 NotImplemented "Instruction CSEL not yet implemented."
	109 Add W8, W8, 1
	110 Subtract X11, X11, 1
	111 Add X12, X12, 376
	112 Add W31, W10, 1
	113 Move S1, 0.5
	114 NotImplemented "Instruction FCMP not yet implemented."
	115 NotImplemented "Instruction CSET not yet implemented."
	116 Add W0, W10, W8
	117 Move S0, 0.5
	118 NotImplemented "Instruction FCMP not yet implemented."
	119 NotImplemented "Instruction CSET not yet implemented."
	120 Add W0, W9, W8
	121 Call 0x1C17F20
	122 Call 0x1C17F28

Method: System.Void MoveDown(System.Boolean shift)

Disassembly:
	0x03AF4650 B 0x3AF4664
	0x03AF4654 MOV W8, W31
	0x03AF4658 B 0x3AF4664

ISIL:
	001 And W1, W1, 1
	002 Move W2, 1
	003 Call TMP_InputField.MoveDown, X0, X1, X2
	004 Return 

Method: System.Void MoveDown(System.Boolean shift, System.Boolean goToLastChar)

Disassembly:
	0x03AF54BC LDR W10, [X8 + 0x18]
	0x03AF54C0 MOV W9, W31
	0x03AF54C4 MOVZ W11, 0x178
	0x03AF54C8 CMP W9, W10
	0x03AF54CC B.CS 0x3AF54FC
	0x03AF54D0 SMADDL X12, X9, X11, X8
	0x03AF54D4 LDR W12, [X12 + 0x24]
	0x03AF54D8 CMP W12, W1
	0x03AF54DC B.GE 0x3AF54F0
	0x03AF54E0 ADD W9, W9, 0x1
	0x03AF54E4 CMP W0, W9
	0x03AF54E8 B.NE 0x3AF54C8
	0x03AF54EC B 0x3AF54F4
	0x03AF54F0 MOV W0, W9
	0x03AF54F4 LDR X30, [X31], #0x10
	0x03AF54F8 RET
	0x03AF54FC BL 0x1C16F28
	0x03AF5500 BL 0x1C16F20
	0x03AF5504 B 0x3AECBA4
	0x03AF5508 CMP W1, 0x4
	0x03AF550C B.NE 0x3AF5514
	0x03AF5510 B 0x3AF5518
	0x03AF5514 RET
	0x03AF5518 STR X30, [X31 - 0x20]!
	0x03AF551C STP X20, X19, [X31 + 0x10]
	0x03AF5520 ADRP X20, 0x8ED000
	0x03AF5524 LDRB W8, [X20 + 0x618]
	0x03AF5528 MOV X19, X0
	0x03AF552C TBNZ X8, 0x0, 0x3AF5544
	0x03AF5530 ADRP X0, 0x5FE000
	0x03AF5534 LDR X0, [X0 + 0x598]
	0x03AF5538 BL 0x1C16CF4
	0x03AF553C MOVZ W8, 0x1
	0x03AF5540 STRB W8, [X20 + 0x618]
	0x03AF5544 MOV X0, X19
	0x03AF5548 BL 0x3AF01B0
	0x03AF554C TBZ X0, 0x0, 0x3AF5580
	0x03AF5550 ADRP X8, 0x5FE000
	0x03AF5554 LDR X8, [X8 + 0x598]
	0x03AF5558 LDR X20, [X19 + 0x258]
	0x03AF555C LDR X0, [X8]
	0x03AF5560 LDR W8, [X0 + 0xE0]
	0x03AF5564 CBNZ W8, 0x3AF556C
	0x03AF5568 BL 0x1C16DFC
	0x03AF556C MOV X0, X20
	0x03AF5570 MOV X1, X31
	0x03AF5574 MOV X2, X31
	0x03AF5578 BL 0x3C3883C
	0x03AF557C TBZ X0, 0x0, 0x3AF558C
	0x03AF5580 LDP X20, X19, [X31 + 0x10]
	0x03AF5584 LDR X30, [X31], #0x20
	0x03AF5588 RET
	0x03AF558C MOV X0, X19
	0x03AF5590 BL 0x3AEC5CC
	0x03AF5594 MOV X1, X0
	0x03AF5598 MOV X0, X19
	0x03AF559C BL 0x3AF55D4
	0x03AF55A0 LDR X20, [X19 + 0x258]
	0x03AF55A4 MOV X0, X19
	0x03AF55A8 BL 0x3AEC5CC
	0x03AF55AC CBZ X20, 0x3AF55C8
	0x03AF55B0 MOV X1, X0
	0x03AF55B4 MOV X0, X20
	0x03AF55B8 LDP X20, X19, [X31 + 0x10]
	0x03AF55BC MOV X2, X31
	0x03AF55C0 LDR X30, [X31], #0x20
	0x03AF55C4 B 0x3E22AB0
	0x03AF55C8 BL 0x1C16F20
	0x03AF55CC RET
	0x03AF55D0 RET
	0x03AF55D4 STP X30, X25, [X31 - 0x40]!
	0x03AF55D8 STP X24, X23, [X31 + 0x10]
	0x03AF55DC STP X22, X21, [X31 + 0x20]
	0x03AF55E0 STP X20, X19, [X31 + 0x30]
	0x03AF55E4 ADRP X22, 0x8ED000
	0x03AF55E8 ADRP X19, 0x664000
	0x03AF55EC LDRB W8, [X22 + 0x61A]
	0x03AF55F0 LDR X19, [X19 + 0x1A0]
	0x03AF55F4 MOV X20, X1
	0x03AF55F8 MOV X21, X0
	0x03AF55FC TBNZ X8, 0x0, 0x3AF5620
	0x03AF5600 ADRP X0, 0x5FE000
	0x03AF5604 LDR X0, [X0 + 0xE00]
	0x03AF5608 BL 0x1C16CF4
	0x03AF560C ADRP X0, 0x664000
	0x03AF5610 LDR X0, [X0 + 0x1A0]
	0x03AF5614 BL 0x1C16CF4
	0x03AF5618 MOVZ W8, 0x1
	0x03AF561C STRB W8, [X22 + 0x61A]
	0x03AF5620 LDR X0, [X19]
	0x03AF5624 ADRP X23, 0x5FE000
	0x03AF5628 LDR X23, [X23 + 0xE00]
	0x03AF562C BL 0x1C16F10
	0x03AF5630 MOV X1, X31
	0x03AF5634 MOV X19, X0
	0x03AF5638 BL 0x3E49354
	0x03AF563C LDRB W8, [X21 + 0x270]
	0x03AF5640 CBNZ W8, 0x3AF564C
	0x03AF5644 LDRB W8, [X21 + 0x2CB]
	0x03AF5648 CBZ W8, 0x3AF5834
	0x03AF564C LDRB W8, [X21 + 0x2E9]
	0x03AF5650 CBZ W8, 0x3AF56C0
	0x03AF5654 LDR W1, [X21 + 0x23C]
	0x03AF5658 MOV X0, X21
	0x03AF565C BL 0x3AEFC5C
	0x03AF5660 STR W0, [X21 + 0x234]
	0x03AF5664 TBNZ X0, 0x1F, 0x3AF5680
	0x03AF5668 LDR X8, [X21 + 0x220]
	0x03AF566C CBZ X8, 0x3AF585C
	0x03AF5670 LDR W8, [X8 + 0x10]
	0x03AF5674 CMP W8, W0
	0x03AF5678 B.LT 0x3AF5684
	0x03AF567C B 0x3AF5688

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move W22, [X0+564]
	010 Move W21, W2
	011 Move X19, X0
	012 Move W20, W1
	013 Call TMP_InputField.get_compositionLength, X0
	014 Move W23, [X19+568]
	015 Add W22, W0, W22
	016 Move X0, X19
	017 Call TMP_InputField.get_compositionLength, X0
	018 Add W8, W0, W23
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move TEMP, X20
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {44}
	024 Move W23, [X19+572]
	025 Move X0, X19
	026 Add X22, X19, 572
	027 Call TMP_InputField.get_compositionLength, X0
	028 Move W24, [X19+576]
	029 Add W25, W0, W23
	030 Move X0, X19
	031 Add X23, X19, 576
	032 Call TMP_InputField.get_compositionLength, X0
	033 Add W8, W0, W24
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CSEL not yet implemented."
	036 Move X0, X19
	037 Move X1, X23
	038 Move [X19+576], W24
	039 Call TMP_InputField.ClampCaretPos, X0, X1
	040 Move X0, X19
	041 Move X1, X22
	042 Move [X19+572], W24
	043 Call TMP_InputField.ClampCaretPos, X0, X1
	044 Move W8, [X19+400]
	045 Subtract W8, W8, 1
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move W22, [X19+576]
	048 Move X0, X19
	049 Call TMP_InputField.get_compositionLength, X0
	050 Add W1, W0, W22
	051 And W2, W21, 1
	052 Move X0, X19
	053 Call TMP_InputField.LineDownCharacterPosition, X0, X1, X2
	054 Move W21, W0
	055 Move TEMP, X20
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {91}
	059 Add X1, X19, 576
	060 Move X0, X19
	061 Move [X19+576], W21
	062 Call TMP_InputField.ClampCaretPos, X0, X1
	063 Move W20, [X19+576]
	064 Move X0, X19
	065 Call TMP_InputField.get_compositionLength, X0
	066 Add W1, W0, W20
	067 Move X0, X19
	068 Call TMP_InputField.GetStringIndexFromCaretPosition, X0, X1
	069 Move [X19+568], W0
	070 Move TEMP, X0
	071 And TEMP, TEMP, -2147483648
	072 Compare TEMP, -2147483648
	073 JumpIfEqual {120}
	074 Move X8, [X19+544]
	075 Compare X8, 0
	076 JumpIfEqual {133}
	077 Move W8, [X8+16]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X8, [X19+312]
	080 Compare X8, 0
	081 JumpIfEqual {133}
	082 Move X8, [X8+872]
	083 Compare X8, 0
	084 JumpIfEqual {133}
	085 Move W8, [X8+24]
	086 Subtract W21, W8, 1
	087 Move TEMP, X20
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfEqual {59}
	091 Add X1, X19, 572
	092 Move X0, X19
	093 Move [X19+572], W21
	094 Call TMP_InputField.ClampCaretPos, X0, X1
	095 Add X1, X19, 576
	096 Move X0, X19
	097 Move [X19+576], W21
	098 Call TMP_InputField.ClampCaretPos, X0, X1
	099 Move W20, [X19+576]
	100 Move X0, X19
	101 Call TMP_InputField.get_compositionLength, X0
	102 Add W1, W0, W20
	103 Move X0, X19
	104 Call TMP_InputField.GetStringIndexFromCaretPosition, X0, X1
	105 Move [X19+564], W0
	106 Move TEMP, X0
	107 And TEMP, TEMP, -2147483648
	108 Compare TEMP, -2147483648
	109 JumpIfEqual {121}
	110 Move X8, [X19+544]
	111 Compare X8, 0
	112 JumpIfEqual {133}
	113 Move W9, [X8+16]
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move [X19+564], W9
	116 Move [X19+568], W0
	117 Move W8, [X8+16]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 NotImplemented "Instruction CSEL not yet implemented."
	120 Move W8, W31
	121 Move W8, W31
	122 Move [X19+564], W31
	123 Move [X19+568], W8
	124 Move X20, [X31+48]
	125 Move X19, [X31+56]
	126 Move X22, [X31+32]
	127 Move X21, [X31+40]
	128 Move X24, [X31+16]
	129 Move X23, [X31+24]
	130 Move X30, [X31+64]
	131 Move X25, [X31+72]
	132 Return 
	133 Call 0x1C17F20

Method: System.Void MoveUp(System.Boolean shift)

Disassembly:
	0x03AF4644 LDR W8, [X8 + 0x10]
	0x03AF4648 CMP W8, W0
	0x03AF464C CSEL W8, W8, W0, LT

ISIL:
	001 And W1, W1, 1
	002 Move W2, 1
	003 Call TMP_InputField.MoveUp, X0, X1, X2
	004 Return 

Method: System.Void MoveUp(System.Boolean shift, System.Boolean goToFirstChar)

Disassembly:
	0x03AF5680 MOV W8, W31
	0x03AF5684 STR W8, [X21 + 0x234]
	0x03AF5688 LDR W1, [X21 + 0x240]
	0x03AF568C MOV X0, X21
	0x03AF5690 BL 0x3AEFC5C
	0x03AF5694 STR W0, [X21 + 0x238]
	0x03AF5698 TBNZ X0, 0x1F, 0x3AF56B4
	0x03AF569C LDR X8, [X21 + 0x220]
	0x03AF56A0 CBZ X8, 0x3AF5860
	0x03AF56A4 LDR W8, [X8 + 0x10]
	0x03AF56A8 CMP W8, W0
	0x03AF56AC B.LT 0x3AF56B8
	0x03AF56B0 B 0x3AF56BC
	0x03AF56B4 MOV W8, W31
	0x03AF56B8 STR W8, [X21 + 0x238]
	0x03AF56BC STRB W31, [X21 + 0x2E9]
	0x03AF56C0 LDRB W8, [X21 + 0x2EA]
	0x03AF56C4 CBZ W8, 0x3AF571C
	0x03AF56C8 LDR W22, [X21 + 0x234]
	0x03AF56CC MOV X0, X21
	0x03AF56D0 BL 0x3AEC28C
	0x03AF56D4 ADD W1, W0, W22
	0x03AF56D8 MOV X0, X21
	0x03AF56DC BL 0x3AEF8F4
	0x03AF56E0 ADD X1, X21, 0x23C
	0x03AF56E4 STR W0, [X21 + 0x23C]
	0x03AF56E8 MOV X0, X21
	0x03AF56EC BL 0x3AEE318
	0x03AF56F0 LDR W22, [X21 + 0x238]
	0x03AF56F4 MOV X0, X21
	0x03AF56F8 BL 0x3AEC28C
	0x03AF56FC ADD W1, W0, W22
	0x03AF5700 MOV X0, X21
	0x03AF5704 BL 0x3AEF8F4
	0x03AF5708 ADD X1, X21, 0x240
	0x03AF570C STR W0, [X21 + 0x240]
	0x03AF5710 MOV X0, X21
	0x03AF5714 BL 0x3AEE318
	0x03AF5718 STRB W31, [X21 + 0x2EA]
	0x03AF571C LDR W24, [X21 + 0x234]
	0x03AF5720 MOV X0, X21
	0x03AF5724 BL 0x3AEC28C
	0x03AF5728 LDR W25, [X21 + 0x238]
	0x03AF572C MOV W22, W0
	0x03AF5730 MOV X0, X21
	0x03AF5734 BL 0x3AEC28C
	0x03AF5738 ADD W9, W22, W24
	0x03AF573C ADRP X22, 0x8E4000
	0x03AF5740 LDRB W8, [X22 + 0x78F]
	0x03AF5744 ADD W10, W0, W25
	0x03AF5748 CMP W9, W10
	0x03AF574C B.NE 0x3AF5780
	0x03AF5750 CBNZ W8, 0x3AF5768
	0x03AF5754 ADRP X0, 0x606000
	0x03AF5758 LDR X0, [X0 + 0xF08]
	0x03AF575C BL 0x1C16CF4
	0x03AF5760 MOVZ W8, 0x1
	0x03AF5764 STRB W8, [X22 + 0x78F]
	0x03AF5768 MOV X0, X21
	0x03AF576C MOV X1, X19
	0x03AF5770 BL 0x3AF593C
	0x03AF5774 MOV X0, X21
	0x03AF5778 BL 0x3AF5350
	0x03AF577C B 0x3AF57AC
	0x03AF5780 CBNZ W8, 0x3AF5798
	0x03AF5784 ADRP X0, 0x606000
	0x03AF5788 LDR X0, [X0 + 0xF08]
	0x03AF578C BL 0x1C16CF4
	0x03AF5790 MOVZ W8, 0x1
	0x03AF5794 STRB W8, [X22 + 0x78F]
	0x03AF5798 MOV X0, X21
	0x03AF579C MOV X1, X19
	0x03AF57A0 BL 0x3AF5F20
	0x03AF57A4 MOV X0, X21
	0x03AF57A8 BL 0x3AF52A8
	0x03AF57AC CBZ X19, 0x3AF5858
	0x03AF57B0 MOV X0, X19
	0x03AF57B4 MOV X1, X20
	0x03AF57B8 MOV X2, X31
	0x03AF57BC BL 0x3E49C28
	0x03AF57C0 MOV X20, X31
	0x03AF57C4 LDR X8, [X19]
	0x03AF57C8 LDR X1, [X23]
	0x03AF57CC LDRH W9, [X8 + 0x12E]
	0x03AF57D0 CBZ X9, 0x3AF57F4
	0x03AF57D4 LDR X10, [X8 + 0xB0]
	0x03AF57D8 ADD X10, X10, 0x8
	0x03AF57DC LDUR X11, [X10 - 0x8]
	0x03AF57E0 CMP X11, X1
	0x03AF57E4 B.EQ 0x3AF5804
	0x03AF57E8 SUBS X9, X9, 0x1
	0x03AF57EC ADD X10, X10, 0x10
	0x03AF57F0 B.NE 0x3AF57DC
	0x03AF57F4 MOV X0, X19
	0x03AF57F8 MOV W2, W31
	0x03AF57FC BL 0x1C5C788
	0x03AF5800 B 0x3AF5810
	0x03AF5804 LDRSW X9, [X10]
	0x03AF5808 ADD X8, X8, X9, 0x4, LSL
	0x03AF580C ADD X0, X8, 0x138
	0x03AF5810 LDP X8, X1, [X0]
	0x03AF5814 MOV X0, X19
	0x03AF5818 BLR X8
	0x03AF581C CBNZ X20, 0x3AF5850
	0x03AF5820 LDP X20, X19, [X31 + 0x30]
	0x03AF5824 LDP X22, X21, [X31 + 0x20]
	0x03AF5828 LDP X24, X23, [X31 + 0x10]
	0x03AF582C LDP X30, X25, [X31], #0x40

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move W22, [X0+564]
	010 Move W21, W2
	011 Move X19, X0
	012 Move W20, W1
	013 Call TMP_InputField.get_compositionLength, X0
	014 Move W23, [X19+568]
	015 Add W22, W0, W22
	016 Move X0, X19
	017 Call TMP_InputField.get_compositionLength, X0
	018 Add W8, W0, W23
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move TEMP, X20
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {44}
	024 Move W23, [X19+572]
	025 Move X0, X19
	026 Add X22, X19, 572
	027 Call TMP_InputField.get_compositionLength, X0
	028 Move W24, [X19+576]
	029 Add W25, W0, W23
	030 Move X0, X19
	031 Add X23, X19, 576
	032 Call TMP_InputField.get_compositionLength, X0
	033 Add W8, W0, W24
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CSEL not yet implemented."
	036 Move X0, X19
	037 Move X1, X23
	038 Move [X19+576], W24
	039 Call TMP_InputField.ClampCaretPos, X0, X1
	040 Move X0, X19
	041 Move X1, X22
	042 Move [X19+572], W24
	043 Call TMP_InputField.ClampCaretPos, X0, X1
	044 Move W8, [X19+400]
	045 Subtract W8, W8, 1
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move W22, [X19+576]
	048 Move X0, X19
	049 Call TMP_InputField.get_compositionLength, X0
	050 Add W1, W0, W22
	051 And W2, W21, 1
	052 Move X0, X19
	053 Call TMP_InputField.LineUpCharacterPosition, X0, X1, X2
	054 Move W21, W0
	055 Move TEMP, X20
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {93}
	059 Add X1, X19, 572
	060 Move X0, X19
	061 Move [X19+572], W21
	062 Call TMP_InputField.ClampCaretPos, X0, X1
	063 Add X1, X19, 576
	064 Move X0, X19
	065 Move [X19+576], W21
	066 Call TMP_InputField.ClampCaretPos, X0, X1
	067 Move W20, [X19+576]
	068 Move X0, X19
	069 Call TMP_InputField.get_compositionLength, X0
	070 Add W1, W0, W20
	071 Move X0, X19
	072 Call TMP_InputField.GetStringIndexFromCaretPosition, X0, X1
	073 Move [X19+564], W0
	074 Move TEMP, X0
	075 And TEMP, TEMP, -2147483648
	076 Compare TEMP, -2147483648
	077 JumpIfEqual {113}
	078 Move X8, [X19+544]
	079 Compare X8, 0
	080 JumpIfEqual {126}
	081 Move W9, [X8+16]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move [X19+564], W9
	084 Move [X19+568], W0
	085 Move W8, [X8+16]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CSEL not yet implemented."
	088 Move W21, W31
	089 Move TEMP, X20
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfNotEqual {59}
	093 Add X1, X19, 576
	094 Move X0, X19
	095 Move [X19+576], W21
	096 Call TMP_InputField.ClampCaretPos, X0, X1
	097 Move W20, [X19+576]
	098 Move X0, X19
	099 Call TMP_InputField.get_compositionLength, X0
	100 Add W1, W0, W20
	101 Move X0, X19
	102 Call TMP_InputField.GetStringIndexFromCaretPosition, X0, X1
	103 Move [X19+568], W0
	104 Move TEMP, X0
	105 And TEMP, TEMP, -2147483648
	106 Compare TEMP, -2147483648
	107 JumpIfEqual {115}
	108 Move X8, [X19+544]
	109 Compare X8, 0
	110 JumpIfEqual {126}
	111 Move W8, [X8+16]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move W8, W31
	114 Move [X19+564], W31
	115 Move W8, W31
	116 Move [X19+568], W8
	117 Move X20, [X31+48]
	118 Move X19, [X31+56]
	119 Move X22, [X31+32]
	120 Move X21, [X31+40]
	121 Move X24, [X31+16]
	122 Move X23, [X31+24]
	123 Move X30, [X31+64]
	124 Move X25, [X31+72]
	125 Return 
	126 Call 0x1C17F20

Method: System.Void MovePageUp(System.Boolean shift)

Disassembly:
	0x03AF465C MOV W8, W31
	0x03AF4660 STR W31, [X19 + 0x234]
	0x03AF4664 STR W8, [X19 + 0x238]

ISIL:
	001 And W1, W1, 1
	002 Move W2, 1
	003 Call TMP_InputField.MovePageUp, X0, X1, X2
	004 Return 

Method: System.Void MovePageUp(System.Boolean shift, System.Boolean goToFirstChar)

Disassembly:
	0x03AF5830 RET
	0x03AF5834 CBZ X19, 0x3AF5864
	0x03AF5838 MOV X0, X19
	0x03AF583C MOV X1, X20
	0x03AF5840 MOV X2, X31
	0x03AF5844 BL 0x3E49C28
	0x03AF5848 MOV X20, X31
	0x03AF584C B 0x3AF57C4
	0x03AF5850 MOV X0, X20
	0x03AF5854 BL 0x1C16F18
	0x03AF5858 BL 0x1C16F20
	0x03AF585C BL 0x1C16F20
	0x03AF5860 BL 0x1C16F20
	0x03AF5864 BL 0x1C16F20
	0x03AF5868 B 0x3AF5898
	0x03AF586C B 0x3AF5898
	0x03AF5870 B 0x3AF5898
	0x03AF5874 B 0x3AF5898
	0x03AF5878 B 0x3AF5898
	0x03AF587C B 0x3AF5898
	0x03AF5880 B 0x3AF5898
	0x03AF5884 B 0x3AF5898
	0x03AF5888 B 0x3AF5898
	0x03AF588C B 0x3AF5898
	0x03AF5890 B 0x3AF5898
	0x03AF5894 B 0x3AF5898
	0x03AF5898 MOV X21, X0
	0x03AF589C CMP W1, 0x1
	0x03AF58A0 B.NE 0x3AF58BC
	0x03AF58A4 MOV X0, X21
	0x03AF58A8 BL 0x3EB1AD0
	0x03AF58AC LDR X20, [X0]
	0x03AF58B0 BL 0x3EB1AE0
	0x03AF58B4 CBNZ X19, 0x3AF57C4
	0x03AF58B8 B 0x3AF581C
	0x03AF58BC MOV X20, X31
	0x03AF58C0 B 0x3AF58C8
	0x03AF58C4 MOV X21, X0
	0x03AF58C8 CBZ X19, 0x3AF5924
	0x03AF58CC LDR X8, [X19]
	0x03AF58D0 LDR X1, [X23]
	0x03AF58D4 LDRH W9, [X8 + 0x12E]
	0x03AF58D8 CBZ X9, 0x3AF58FC
	0x03AF58DC LDR X10, [X8 + 0xB0]
	0x03AF58E0 ADD X10, X10, 0x8
	0x03AF58E4 LDUR X11, [X10 - 0x8]
	0x03AF58E8 CMP X11, X1
	0x03AF58EC B.EQ 0x3AF590C
	0x03AF58F0 SUBS X9, X9, 0x1
	0x03AF58F4 ADD X10, X10, 0x10
	0x03AF58F8 B.NE 0x3AF58E4
	0x03AF58FC MOV X0, X19
	0x03AF5900 MOV W2, W31
	0x03AF5904 BL 0x1C5C788
	0x03AF5908 B 0x3AF5918
	0x03AF590C LDRSW X9, [X10]
	0x03AF5910 ADD X8, X8, X9, 0x4, LSL
	0x03AF5914 ADD X0, X8, 0x138
	0x03AF5918 LDP X8, X1, [X0]
	0x03AF591C MOV X0, X19
	0x03AF5920 BLR X8
	0x03AF5924 CBNZ X20, 0x3AF5930
	0x03AF5928 MOV X0, X21
	0x03AF592C BL 0x1D2C690
	0x03AF5930 MOV X0, X20
	0x03AF5934 BL 0x1C16F18
	0x03AF5938 BL 0x1990590
	0x03AF593C SUB X31, X31, 0x80
	0x03AF5940 STP D11, D10, [X31 + 0x10]
	0x03AF5944 STP D9, D8, [X31 + 0x20]
	0x03AF5948 STP X30, X27, [X31 + 0x30]
	0x03AF594C STP X26, X25, [X31 + 0x40]
	0x03AF5950 STP X24, X23, [X31 + 0x50]
	0x03AF5954 STP X22, X21, [X31 + 0x60]
	0x03AF5958 STP X20, X19, [X31 + 0x70]
	0x03AF595C ADRP X21, 0x8ED000
	0x03AF5960 LDRB W8, [X21 + 0x61B]
	0x03AF5964 MOV X20, X1
	0x03AF5968 MOV X19, X0
	0x03AF596C TBNZ X8, 0x0, 0x3AF5990
	0x03AF5970 ADRP X0, 0x5FE000
	0x03AF5974 LDR X0, [X0 + 0x598]
	0x03AF5978 BL 0x1C16CF4
	0x03AF597C ADRP X0, 0x654000
	0x03AF5980 LDR X0, [X0 + 0x6B8]
	0x03AF5984 BL 0x1C16CF4
	0x03AF5988 MOVZ W8, 0x1
	0x03AF598C STRB W8, [X21 + 0x61B]
	0x03AF5990 LDRB W8, [X19 + 0x274]
	0x03AF5994 CBZ W8, 0x3AF5EF4
	0x03AF5998 LDR X0, [X19 + 0x138]
	0x03AF599C CBZ X0, 0x3AF5F18
	0x03AF59A0 ADRP X22, 0x5FE000
	0x03AF59A4 LDR X22, [X22 + 0x598]
	0x03AF59A8 MOV X1, X31
	0x03AF59AC BL 0x3CDADE8
	0x03AF59B0 LDR X8, [X22]
	0x03AF59B4 MOV X21, X0
	0x03AF59B8 LDR W9, [X8 + 0xE0]
	0x03AF59BC CBNZ W9, 0x3AF59C8
	0x03AF59C0 MOV X0, X8
	0x03AF59C4 BL 0x1C16DFC
	0x03AF59C8 MOV X0, X21
	0x03AF59CC MOV X1, X31
	0x03AF59D0 MOV X2, X31
	0x03AF59D4 BL 0x3C3883C
	0x03AF59D8 TBNZ X0, 0x0, 0x3AF5EF4
	0x03AF59DC LDRB W8, [X19 + 0x230]
	0x03AF59E0 CBNZ W8, 0x3AF5EF4
	0x03AF59E4 LDR X8, [X19 + 0x250]
	0x03AF59E8 CBNZ X8, 0x3AF59F4
	0x03AF59EC MOV X0, X19
	0x03AF59F0 BL 0x3AF64F4
	0x03AF59F4 ADRP X21, 0x8E4000
	0x03AF59F8 LDRB W8, [X21 + 0x78F]
	0x03AF59FC LDR V11, [X19 + 0x22C]
	0x03AF5A00 CBNZ W8, 0x3AF5A18
	0x03AF5A04 ADRP X0, 0x606000
	0x03AF5A08 LDR X0, [X0 + 0xF08]
	0x03AF5A0C BL 0x1C16CF4
	0x03AF5A10 MOVZ W8, 0x1
	0x03AF5A14 STRB W8, [X21 + 0x78F]
	0x03AF5A18 LDR W23, [X19 + 0x23C]
	0x03AF5A1C MOV X0, X19
	0x03AF5A20 BL 0x3AEC28C
	0x03AF5A24 LDR X8, [X19 + 0x138]
	0x03AF5A28 CBZ X8, 0x3AF5F18
	0x03AF5A2C LDR X8, [X8 + 0x368]
	0x03AF5A30 CBZ X8, 0x3AF5F18
	0x03AF5A34 LDR X21, [X8 + 0x38]
	0x03AF5A38 CBZ X21, 0x3AF5F18
	0x03AF5A3C LDR W8, [X21 + 0x18]
	0x03AF5A40 ADD W9, W0, W23
	0x03AF5A44 CMP W9, W8
	0x03AF5A48 B.GE 0x3AF5EF4
	0x03AF5A4C LDR W23, [X19 + 0x23C]
	0x03AF5A50 MOV X0, X19
	0x03AF5A54 BL 0x3AEC28C
	0x03AF5A58 LDR W9, [X21 + 0x18]
	0x03AF5A5C ADD W8, W0, W23
	0x03AF5A60 CMP W8, W9
	0x03AF5A64 B.CS 0x3AF5F1C
	0x03AF5A68 MOVZ W9, 0x178
	0x03AF5A6C SMADDL X8, X8, X9, X21
	0x03AF5A70 LDR W23, [X8 + 0x64]
	0x03AF5A74 LDR W25, [X19 + 0x23C]
	0x03AF5A78 MOV X0, X19
	0x03AF5A7C BL 0x3AEC28C
	0x03AF5A80 LDR X8, [X19 + 0x138]
	0x03AF5A84 CBZ X8, 0x3AF5F18
	0x03AF5A88 LDR X8, [X8 + 0x368]
	0x03AF5A8C CBZ X8, 0x3AF5F18
	0x03AF5A90 LDR X9, [X8 + 0x50]
	0x03AF5A94 CBZ X9, 0x3AF5F18
	0x03AF5A98 LDR W10, [X9 + 0x18]
	0x03AF5A9C CMP W23, W10
	0x03AF5AA0 B.CS 0x3AF5F1C
	0x03AF5AA4 SXTW X10, W23
	0x03AF5AA8 MOVZ W11, 0x5C
	0x03AF5AAC LDR X24, [X8 + 0x38]
	0x03AF5AB0 NOP
	0x03AF5AB4 MADD X8, X10, X11, X9
	0x03AF5AB8 LDR W26, [X8 + 0x34]
	0x03AF5ABC LDR W27, [X19 + 0x23C]
	0x03AF5AC0 MOV W21, W0
	0x03AF5AC4 MOV X0, X19
	0x03AF5AC8 BL 0x3AEC28C
	0x03AF5ACC CBZ X24, 0x3AF5F18
	0x03AF5AD0 ADD W8, W21, W25
	0x03AF5AD4 CMP W8, W26
	0x03AF5AD8 ADD W8, W0, W27

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+32], D12
	003 Move [X31+48], D11
	004 Move [X31+56], D10
	005 Move [X31+64], D9
	006 Move [X31+72], D8
	007 Move [X31+80], X30
	008 Move [X31+88], X25
	009 Move [X31+96], X24
	010 Move [X31+104], X23
	011 Move [X31+112], X22
	012 Move [X31+120], X21
	013 Move [X31+128], X20
	014 Move [X31+136], X19
	015 Move W22, [X0+564]
	016 Move W21, W2
	017 Move X19, X0
	018 Move W20, W1
	019 Call TMP_InputField.get_compositionLength, X0
	020 Move W23, [X19+568]
	021 Add W22, W0, W22
	022 Move X0, X19
	023 Call TMP_InputField.get_compositionLength, X0
	024 Add W8, W0, W23
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move TEMP, X20
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {50}
	030 Move W23, [X19+572]
	031 Move X0, X19
	032 Add X22, X19, 572
	033 Call TMP_InputField.get_compositionLength, X0
	034 Move W24, [X19+576]
	035 Add W25, W0, W23
	036 Move X0, X19
	037 Add X23, X19, 576
	038 Call TMP_InputField.get_compositionLength, X0
	039 Add W8, W0, W24
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction CSEL not yet implemented."
	042 Move X0, X19
	043 Move X1, X23
	044 Move [X19+576], W24
	045 Call TMP_InputField.ClampCaretPos, X0, X1
	046 Move X0, X19
	047 Move X1, X22
	048 Move [X19+572], W24
	049 Call TMP_InputField.ClampCaretPos, X0, X1
	050 Move W8, [X19+400]
	051 Subtract W8, W8, 1
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W22, [X19+576]
	054 Move X0, X19
	055 Call TMP_InputField.get_compositionLength, X0
	056 Add W1, W0, W22
	057 And W2, W21, 1
	058 Move X0, X19
	059 Call TMP_InputField.PageUpCharacterPosition, X0, X1, X2
	060 Move W21, W0
	061 Move TEMP, X20
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {99}
	065 Add X1, X19, 572
	066 Move X0, X19
	067 Move [X19+572], W21
	068 Call TMP_InputField.ClampCaretPos, X0, X1
	069 Add X1, X19, 576
	070 Move X0, X19
	071 Move [X19+576], W21
	072 Call TMP_InputField.ClampCaretPos, X0, X1
	073 Move W20, [X19+576]
	074 Move X0, X19
	075 Call TMP_InputField.get_compositionLength, X0
	076 Add W1, W0, W20
	077 Move X0, X19
	078 Call TMP_InputField.GetStringIndexFromCaretPosition, X0, X1
	079 Move [X19+564], W0
	080 Move TEMP, X0
	081 And TEMP, TEMP, -2147483648
	082 Compare TEMP, -2147483648
	083 JumpIfEqual {119}
	084 Move X8, [X19+544]
	085 Compare X8, 0
	086 JumpIfEqual {202}
	087 Move W9, [X8+16]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move [X19+564], W9
	090 Move [X19+568], W0
	091 Move W8, [X8+16]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 NotImplemented "Instruction CSEL not yet implemented."
	094 Move W21, W31
	095 Move TEMP, X20
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfNotEqual {65}
	099 Add X1, X19, 576
	100 Move X0, X19
	101 Move [X19+576], W21
	102 Call TMP_InputField.ClampCaretPos, X0, X1
	103 Move W20, [X19+576]
	104 Move X0, X19
	105 Call TMP_InputField.get_compositionLength, X0
	106 Add W1, W0, W20
	107 Move X0, X19
	108 Call TMP_InputField.GetStringIndexFromCaretPosition, X0, X1
	109 Move [X19+568], W0
	110 Move TEMP, X0
	111 And TEMP, TEMP, -2147483648
	112 Compare TEMP, -2147483648
	113 JumpIfEqual {121}
	114 Move X8, [X19+544]
	115 Compare X8, 0
	116 JumpIfEqual {202}
	117 Move W8, [X8+16]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move W8, W31
	120 Move [X19+564], W31
	121 Move W8, W31
	122 Move [X19+568], W8
	123 Move W8, [X19+400]
	124 Compare W8, 0
	125 JumpIfEqual {187}
	126 Move X0, [X19+272]
	127 Compare X0, 0
	128 JumpIfEqual {202}
	129 Move X1, X31
	130 Call RectTransform.get_rect, X0
	131 Move X0, [X19+312]
	132 Compare X0, 0
	133 JumpIfEqual {202}
	134 Move X1, X31
	135 Move V8, V3
	136 Call TMP_Text.get_rectTransform, X0
	137 Compare X0, 0
	138 JumpIfEqual {202}
	139 Move X1, X31
	140 Call Transform.get_position, X0
	141 Move X0, [X19+312]
	142 Compare X0, 0
	143 JumpIfEqual {202}
	144 Add X8, X31, 8
	145 Move X1, X31
	146 Move V9, V1
	147 Call TMP_Text.get_textBounds, X0
	148 Move X0, [X19+272]
	149 Compare X0, 0
	150 JumpIfEqual {202}
	151 Move V11, [X31+12]
	152 Move V12, [X31+24]
	153 Move X1, X31
	154 Call Transform.get_position, X0
	155 Move X0, [X19+272]
	156 Compare X0, 0
	157 JumpIfEqual {202}
	158 Add S0, S11, S12
	159 Move X1, X31
	160 Move V10, V1
	161 Add S9, S9, S0
	162 Call RectTransform.get_rect, X0
	163 Add S0, S3, S1
	164 Move X0, [X19+312]
	165 Add S0, S10, S0
	166 Add S1, S8, S9
	167 Subtract S2, S0, S9
	168 NotImplemented "Instruction FCMP not yet implemented."
	169 NotImplemented "Instruction FCSEL not yet implemented."
	170 Compare X0, 0
	171 JumpIfEqual {202}
	172 Move X1, X31
	173 Call TMP_Text.get_rectTransform, X0
	174 Compare X0, 0
	175 JumpIfEqual {202}
	176 Move X1, X31
	177 Move X20, X0
	178 Call RectTransform.get_anchoredPosition, X0
	179 Move S2, W31
	180 Add S0, S0, S2
	181 Add S1, S8, S1
	182 Move X0, X20
	183 Move X1, X31
	184 Call RectTransform.set_anchoredPosition, X0, X1
	185 Move X0, X19
	186 Call TMP_InputField.AssignPositioningIfNeeded, X0
	187 Move X20, [X31+128]
	188 Move X19, [X31+136]
	189 Move X22, [X31+112]
	190 Move X21, [X31+120]
	191 Move X24, [X31+96]
	192 Move X23, [X31+104]
	193 Move X30, [X31+80]
	194 Move X25, [X31+88]
	195 Move D9, [X31+64]
	196 Move D8, [X31+72]
	197 Move D11, [X31+48]
	198 Move D10, [X31+56]
	199 Move V12, [X31+32]
	200 Add X31, X31, 144
	201 Return 
	202 Call 0x1C17F20

Method: System.Void MovePageDown(System.Boolean shift)

Disassembly:
	0x03AF4668 LDP X20, X19, [X31 + 0x30]
	0x03AF466C LDP X22, X21, [X31 + 0x20]
	0x03AF4670 LDP X24, X23, [X31 + 0x10]

ISIL:
	001 And W1, W1, 1
	002 Move W2, 1
	003 Call TMP_InputField.MovePageDown, X0, X1, X2
	004 Return 

Method: System.Void MovePageDown(System.Boolean shift, System.Boolean goToLastChar)

Disassembly:
	0x03AF5ADC B.NE 0x3AF5B08
	0x03AF5AE0 LDR W9, [X24 + 0x18]
	0x03AF5AE4 CMP W8, W9
	0x03AF5AE8 B.CS 0x3AF5F1C
	0x03AF5AEC LDR X9, [X19 + 0x138]
	0x03AF5AF0 CBZ X9, 0x3AF5F18
	0x03AF5AF4 MOVZ W10, 0x178
	0x03AF5AF8 SMADDL X8, X8, X10, X24
	0x03AF5AFC LDR W9, [X9 + 0x270]
	0x03AF5B00 LDR V8, [X8 + 0x140]
	0x03AF5B04 B 0x3AF5B30
	0x03AF5B08 LDR W9, [X24 + 0x18]
	0x03AF5B0C SUB W8, W8, 0x1
	0x03AF5B10 CMP W8, W9
	0x03AF5B14 B.CS 0x3AF5F1C
	0x03AF5B18 LDR X9, [X19 + 0x138]
	0x03AF5B1C CBZ X9, 0x3AF5F18
	0x03AF5B20 MOVZ W10, 0x178
	0x03AF5B24 SMADDL X8, X8, X10, X24
	0x03AF5B28 LDR W9, [X9 + 0x270]
	0x03AF5B2C LDR V8, [X8 + 0x144]
	0x03AF5B30 LDR V0, [X8 + 0x148]
	0x03AF5B34 LDR V10, [X8 + 0x150]
	0x03AF5B38 LDRB W24, [X8 + 0x194]
	0x03AF5B3C CMP W9, 0x1000
	0x03AF5B40 FSUB S9, S0, S10
	0x03AF5B44 B.NE 0x3AF5B58
	0x03AF5B48 FMOV S0, -0.5
	0x03AF5B4C FMUL S0, S9, S0
	0x03AF5B50 FMOV S1, W31
	0x03AF5B54 FADD S10, S0, S1
	0x03AF5B58 LDR X0, [X19 + 0x100]
	0x03AF5B5C CBZ X0, 0x3AF5BC8
	0x03AF5B60 LDR W21, [X19 + 0x234]
	0x03AF5B64 MOV X1, X31
	0x03AF5B68 BL 0x3C3CF1C
	0x03AF5B6C CBZ X0, 0x3AF5B8C
	0x03AF5B70 LDR X0, [X19 + 0x100]
	0x03AF5B74 CBZ X0, 0x3AF5F18
	0x03AF5B78 MOV X1, X31
	0x03AF5B7C BL 0x3C3CF1C
	0x03AF5B80 CBZ X0, 0x3AF5F18
	0x03AF5B84 LDR W8, [X0 + 0x10]
	0x03AF5B88 B 0x3AF5B90
	0x03AF5B8C MOV W8, W31
	0x03AF5B90 BIC W9, W21, W21, 0x1F
	0x03AF5B94 LDR X21, [X19 + 0x100]
	0x03AF5B98 CMP W9, W8
	0x03AF5B9C CSEL W1, W8, W9, GT
	0x03AF5BA0 ADD X0, X31, 0x8
	0x03AF5BA4 MOV W2, W31
	0x03AF5BA8 MOV X3, X31
	0x03AF5BAC STR X31, [X31 + 0x8]
	0x03AF5BB0 BL 0x3C36CD0
	0x03AF5BB4 CBZ X21, 0x3AF5F18
	0x03AF5BB8 LDR X1, [X31 + 0x8]
	0x03AF5BBC MOV X0, X21
	0x03AF5BC0 MOV X2, X31
	0x03AF5BC4 BL 0x3C3D1E0
	0x03AF5BC8 LDRB W8, [X19 + 0x270]
	0x03AF5BCC CBZ W8, 0x3AF5BFC
	0x03AF5BD0 LDR V0, [X19 + 0x260]
	0x03AF5BD4 LDR V1, [X19 + 0x264]
	0x03AF5BD8 ADRP X8, 0xFFFFFFFFFCFF4000
	0x03AF5BDC LDR V2, [X8 + 0xF20]
	0x03AF5BE0 FSUB S0, S8, S0
	0x03AF5BE4 FSUB S1, S10, S1
	0x03AF5BE8 FMUL S0, S0, S0
	0x03AF5BEC FMUL S1, S1, S1
	0x03AF5BF0 FADD S0, S0, S1
	0x03AF5BF4 FCMP S0, S2
	0x03AF5BF8 B.PL 0x3AF5C0C
	0x03AF5BFC LDRB W8, [X19 + 0x2EB]
	0x03AF5C00 CBNZ W8, 0x3AF5C0C
	0x03AF5C04 LDRB W8, [X19 + 0x2AB]
	0x03AF5C08 CBZ W8, 0x3AF5C24
	0x03AF5C0C AND W1, W24, 0x1
	0x03AF5C10 MOV X0, X19
	0x03AF5C14 MOV V0.16B, V8.16B
	0x03AF5C18 MOV V1.16B, V10.16B
	0x03AF5C1C MOV V2.16B, V9.16B
	0x03AF5C20 BL 0x3AF6644
	0x03AF5C24 LDR X0, [X19 + 0x138]
	0x03AF5C28 STR S8, [X19 + 0x260]
	0x03AF5C2C STR S10, [X19 + 0x264]
	0x03AF5C30 CBZ X0, 0x3AF5F18
	0x03AF5C34 MOV X1, X31
	0x03AF5C38 BL 0x3CDADE8
	0x03AF5C3C CBZ X0, 0x3AF5F18
	0x03AF5C40 MOV X1, X31
	0x03AF5C44 BL 0x3E24614
	0x03AF5C48 LDR X8, [X19 + 0x250]
	0x03AF5C4C CBZ X8, 0x3AF5F18
	0x03AF5C50 LDR W9, [X8 + 0x18]
	0x03AF5C54 CBZ W9, 0x3AF5F1C
	0x03AF5C58 FADD S1, S10, S9
	0x03AF5C5C FSUB S0, S1, S9
	0x03AF5C60 STP S8, S0, [X8 + 0x20]
	0x03AF5C64 STR W31, [X8 + 0x28]
	0x03AF5C68 LDR X8, [X19 + 0x250]
	0x03AF5C6C CBZ X8, 0x3AF5F18
	0x03AF5C70 LDR W9, [X8 + 0x18]
	0x03AF5C74 CMP W9, 0x1
	0x03AF5C78 B.LS 0x3AF5F1C
	0x03AF5C7C STP S8, S1, [X8 + 0x8C]
	0x03AF5C80 STR W31, [X8 + 0x94]
	0x03AF5C84 LDR X8, [X19 + 0x250]
	0x03AF5C88 CBZ X8, 0x3AF5F18
	0x03AF5C8C LDR W9, [X8 + 0x18]
	0x03AF5C90 CMP W9, 0x2
	0x03AF5C94 B.LS 0x3AF5F1C
	0x03AF5C98 SCVTF S2, S11
	0x03AF5C9C FADD S2, S8, S2
	0x03AF5CA0 STP S2, S1, [X8 + 0xF8]
	0x03AF5CA4 STR W31, [X8 + 0x100]
	0x03AF5CA8 LDR X8, [X19 + 0x250]
	0x03AF5CAC CBZ X8, 0x3AF5F18
	0x03AF5CB0 LDR W9, [X8 + 0x18]
	0x03AF5CB4 CMP W9, 0x3
	0x03AF5CB8 B.LS 0x3AF5F1C
	0x03AF5CBC STR S2, [X8 + 0x164]
	0x03AF5CC0 STR S0, [X8 + 0x168]
	0x03AF5CC4 STR W31, [X8 + 0x16C]
	0x03AF5CC8 LDR X21, [X19 + 0x250]
	0x03AF5CCC CBZ X21, 0x3AF5F18
	0x03AF5CD0 MOV X0, X19
	0x03AF5CD4 BL 0x3AED488
	0x03AF5CD8 MOV X0, X31
	0x03AF5CDC BL 0x1E43664
	0x03AF5CE0 LDR W8, [X21 + 0x18]
	0x03AF5CE4 CBZ W8, 0x3AF5F1C
	0x03AF5CE8 STR W0, [X21 + 0x48]
	0x03AF5CEC LDR X21, [X19 + 0x250]
	0x03AF5CF0 CBZ X21, 0x3AF5F18
	0x03AF5CF4 MOV X0, X19
	0x03AF5CF8 BL 0x3AED488
	0x03AF5CFC MOV X0, X31
	0x03AF5D00 BL 0x1E43664
	0x03AF5D04 LDR W8, [X21 + 0x18]
	0x03AF5D08 CMP W8, 0x1
	0x03AF5D0C B.LS 0x3AF5F1C
	0x03AF5D10 STR W0, [X21 + 0xB4]
	0x03AF5D14 LDR X21, [X19 + 0x250]
	0x03AF5D18 CBZ X21, 0x3AF5F18
	0x03AF5D1C MOV X0, X19
	0x03AF5D20 BL 0x3AED488
	0x03AF5D24 MOV X0, X31
	0x03AF5D28 BL 0x1E43664
	0x03AF5D2C LDR W8, [X21 + 0x18]
	0x03AF5D30 CMP W8, 0x2
	0x03AF5D34 B.LS 0x3AF5F1C
	0x03AF5D38 STR W0, [X21 + 0x120]
	0x03AF5D3C LDR X21, [X19 + 0x250]
	0x03AF5D40 CBZ X21, 0x3AF5F18
	0x03AF5D44 MOV X0, X19
	0x03AF5D48 BL 0x3AED488
	0x03AF5D4C MOV X0, X31
	0x03AF5D50 BL 0x1E43664
	0x03AF5D54 LDR W8, [X21 + 0x18]
	0x03AF5D58 CMP W8, 0x3
	0x03AF5D5C B.LS 0x3AF5F1C
	0x03AF5D60 STR W0, [X21 + 0x18C]
	0x03AF5D64 CBZ X20, 0x3AF5F18
	0x03AF5D68 LDR X1, [X19 + 0x250]
	0x03AF5D6C MOV X0, X20
	0x03AF5D70 MOV X2, X31
	0x03AF5D74 BL 0x3E464E4
	0x03AF5D78 LDRB W8, [X19 + 0x2B9]
	0x03AF5D7C CBNZ W8, 0x3AF5D8C
	0x03AF5D80 LDR W8, [X19 + 0x2BC]
	0x03AF5D84 CMP W23, W8
	0x03AF5D88 B.EQ 0x3AF5EF4
	0x03AF5D8C LDR X0, [X19 + 0x138]
	0x03AF5D90 STRB W31, [X19 + 0x2B9]
	0x03AF5D94 STR W23, [X19 + 0x2BC]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+32], D12
	003 Move [X31+48], D11
	004 Move [X31+56], D10
	005 Move [X31+64], D9
	006 Move [X31+72], D8
	007 Move [X31+80], X30
	008 Move [X31+88], X25
	009 Move [X31+96], X24
	010 Move [X31+104], X23
	011 Move [X31+112], X22
	012 Move [X31+120], X21
	013 Move [X31+128], X20
	014 Move [X31+136], X19
	015 Move W22, [X0+564]
	016 Move W21, W2
	017 Move X19, X0
	018 Move W20, W1
	019 Call TMP_InputField.get_compositionLength, X0
	020 Move W23, [X19+568]
	021 Add W22, W0, W22
	022 Move X0, X19
	023 Call TMP_InputField.get_compositionLength, X0
	024 Add W8, W0, W23
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move TEMP, X20
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {50}
	030 Move W23, [X19+572]
	031 Move X0, X19
	032 Add X22, X19, 572
	033 Call TMP_InputField.get_compositionLength, X0
	034 Move W24, [X19+576]
	035 Add W25, W0, W23
	036 Move X0, X19
	037 Add X23, X19, 576
	038 Call TMP_InputField.get_compositionLength, X0
	039 Add W8, W0, W24
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction CSEL not yet implemented."
	042 Move X0, X19
	043 Move X1, X23
	044 Move [X19+576], W24
	045 Call TMP_InputField.ClampCaretPos, X0, X1
	046 Move X0, X19
	047 Move X1, X22
	048 Move [X19+572], W24
	049 Call TMP_InputField.ClampCaretPos, X0, X1
	050 Move W8, [X19+400]
	051 Subtract W8, W8, 1
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W22, [X19+576]
	054 Move X0, X19
	055 Call TMP_InputField.get_compositionLength, X0
	056 Add W1, W0, W22
	057 And W2, W21, 1
	058 Move X0, X19
	059 Call TMP_InputField.PageDownCharacterPosition, X0, X1, X2
	060 Move W21, W0
	061 Move TEMP, X20
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {97}
	065 Add X1, X19, 576
	066 Move X0, X19
	067 Move [X19+576], W21
	068 Call TMP_InputField.ClampCaretPos, X0, X1
	069 Move W20, [X19+576]
	070 Move X0, X19
	071 Call TMP_InputField.get_compositionLength, X0
	072 Add W1, W0, W20
	073 Move X0, X19
	074 Call TMP_InputField.GetStringIndexFromCaretPosition, X0, X1
	075 Move [X19+568], W0
	076 Move TEMP, X0
	077 And TEMP, TEMP, -2147483648
	078 Compare TEMP, -2147483648
	079 JumpIfEqual {126}
	080 Move X8, [X19+544]
	081 Compare X8, 0
	082 JumpIfEqual {208}
	083 Move W8, [X8+16]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X8, [X19+312]
	086 Compare X8, 0
	087 JumpIfEqual {208}
	088 Move X8, [X8+872]
	089 Compare X8, 0
	090 JumpIfEqual {208}
	091 Move W8, [X8+24]
	092 Subtract W21, W8, 1
	093 Move TEMP, X20
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfEqual {65}
	097 Add X1, X19, 572
	098 Move X0, X19
	099 Move [X19+572], W21
	100 Call TMP_InputField.ClampCaretPos, X0, X1
	101 Add X1, X19, 576
	102 Move X0, X19
	103 Move [X19+576], W21
	104 Call TMP_InputField.ClampCaretPos, X0, X1
	105 Move W20, [X19+576]
	106 Move X0, X19
	107 Call TMP_InputField.get_compositionLength, X0
	108 Add W1, W0, W20
	109 Move X0, X19
	110 Call TMP_InputField.GetStringIndexFromCaretPosition, X0, X1
	111 Move [X19+564], W0
	112 Move TEMP, X0
	113 And TEMP, TEMP, -2147483648
	114 Compare TEMP, -2147483648
	115 JumpIfEqual {127}
	116 Move X8, [X19+544]
	117 Compare X8, 0
	118 JumpIfEqual {208}
	119 Move W9, [X8+16]
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move [X19+564], W9
	122 Move [X19+568], W0
	123 Move W8, [X8+16]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 NotImplemented "Instruction CSEL not yet implemented."
	126 Move W8, W31
	127 Move W8, W31
	128 Move [X19+564], W31
	129 Move [X19+568], W8
	130 Move W8, [X19+400]
	131 Compare W8, 0
	132 JumpIfEqual {193}
	133 Move X0, [X19+272]
	134 Compare X0, 0
	135 JumpIfEqual {208}
	136 Move X1, X31
	137 Call RectTransform.get_rect, X0
	138 Move X0, [X19+312]
	139 Compare X0, 0
	140 JumpIfEqual {208}
	141 Move X1, X31
	142 Move V8, V3
	143 Call TMP_Text.get_rectTransform, X0
	144 Compare X0, 0
	145 JumpIfEqual {208}
	146 Move X1, X31
	147 Call Transform.get_position, X0
	148 Move X0, [X19+312]
	149 Compare X0, 0
	150 JumpIfEqual {208}
	151 Add X8, X31, 8
	152 Move X1, X31
	153 Move V9, V1
	154 Call TMP_Text.get_textBounds, X0
	155 Move X0, [X19+272]
	156 Compare X0, 0
	157 JumpIfEqual {208}
	158 Move V11, [X31+12]
	159 Move V12, [X31+24]
	160 Move X1, X31
	161 Call Transform.get_position, X0
	162 Move X0, [X19+272]
	163 Compare X0, 0
	164 JumpIfEqual {208}
	165 Subtract S0, S11, S12
	166 Move X1, X31
	167 Move V10, V1
	168 Add S9, S9, S0
	169 Call RectTransform.get_rect, X0
	170 Move X0, [X19+312]
	171 Add S0, S10, S1
	172 Add S1, S8, S9
	173 Subtract S2, S0, S9
	174 NotImplemented "Instruction FCMP not yet implemented."
	175 NotImplemented "Instruction FCSEL not yet implemented."
	176 Compare X0, 0
	177 JumpIfEqual {208}
	178 Move X1, X31
	179 Call TMP_Text.get_rectTransform, X0
	180 Compare X0, 0
	181 JumpIfEqual {208}
	182 Move X1, X31
	183 Move X20, X0
	184 Call RectTransform.get_anchoredPosition, X0
	185 Move S2, W31
	186 Add S0, S0, S2
	187 Add S1, S8, S1
	188 Move X0, X20
	189 Move X1, X31
	190 Call RectTransform.set_anchoredPosition, X0, X1
	191 Move X0, X19
	192 Call TMP_InputField.AssignPositioningIfNeeded, X0
	193 Move X20, [X31+128]
	194 Move X19, [X31+136]
	195 Move X22, [X31+112]
	196 Move X21, [X31+120]
	197 Move X24, [X31+96]
	198 Move X23, [X31+104]
	199 Move X30, [X31+80]
	200 Move X25, [X31+88]
	201 Move D9, [X31+64]
	202 Move D8, [X31+72]
	203 Move D11, [X31+48]
	204 Move D10, [X31+56]
	205 Move V12, [X31+32]
	206 Add X31, X31, 144
	207 Return 
	208 Call 0x1C17F20

Method: System.Void Delete()

Disassembly:
	0x03AF3CC4 STR X30, [X31 - 0x30]!
	0x03AF3CC8 STP X22, X21, [X31 + 0x10]
	0x03AF3CCC STP X20, X19, [X31 + 0x20]
	0x03AF3CD0 ADRP X20, 0x8EF000
	0x03AF3CD4 LDRB W8, [X20 + 0x605]
	0x03AF3CD8 MOV X19, X0
	0x03AF3CDC TBNZ X8, 0x0, 0x3AF3CF4
	0x03AF3CE0 ADRP X0, 0x666000
	0x03AF3CE4 LDR X0, [X0 + 0x180]
	0x03AF3CE8 BL 0x1C16CF4
	0x03AF3CEC MOVZ W8, 0x1
	0x03AF3CF0 STRB W8, [X20 + 0x605]
	0x03AF3CF4 LDR W21, [X19 + 0x238]
	0x03AF3CF8 MOV X0, X19
	0x03AF3CFC BL 0x3AEC28C
	0x03AF3D00 LDR X20, [X19 + 0x220]
	0x03AF3D04 CBZ X20, 0x3AF3D94
	0x03AF3D08 MOV W8, W0
	0x03AF3D0C LDR W0, [X20 + 0x10]
	0x03AF3D10 ADD W8, W21, W8
	0x03AF3D14 ADD W8, W8, 0x1
	0x03AF3D18 CMP W8, W0
	0x03AF3D1C B.GE 0x3AF3D84
	0x03AF3D20 ADRP X21, 0x666000
	0x03AF3D24 LDR X21, [X21 + 0x180]
	0x03AF3D28 LDR X0, [X21]
	0x03AF3D2C LDR W8, [X0 + 0xE0]
	0x03AF3D30 CBNZ W8, 0x3AF3D3C
	0x03AF3D34 BL 0x1C16DFC
	0x03AF3D38 LDR X0, [X21]
	0x03AF3D3C LDR X8, [X0 + 0xB8]
	0x03AF3D40 LDR W22, [X19 + 0x238]
	0x03AF3D44 MOV X0, X19
	0x03AF3D48 LDR X21, [X8]
	0x03AF3D4C BL 0x3AEC28C
	0x03AF3D50 ADD W8, W22, W0
	0x03AF3D54 ADD W2, W8, 0x1
	0x03AF3D58 MOV X0, X20
	0x03AF3D5C MOV X1, X21
	0x03AF3D60 MOV X3, X31
	0x03AF3D64 BL 0x322C054
	0x03AF3D68 ADDS W31, W0, 0x1
	0x03AF3D6C B.EQ 0x3AF3D78
	0x03AF3D70 ADD W0, W0, 0x1
	0x03AF3D74 B 0x3AF3D84
	0x03AF3D78 LDR X8, [X19 + 0x220]
	0x03AF3D7C CBZ X8, 0x3AF3D94
	0x03AF3D80 LDR W0, [X8 + 0x10]
	0x03AF3D84 LDP X20, X19, [X31 + 0x20]
	0x03AF3D88 LDP X22, X21, [X31 + 0x10]
	0x03AF3D8C LDR X30, [X31], #0x30
	0x03AF3D90 RET
	0x03AF3D94 BL 0x1C16F20
	0x03AF3D98 STR X30, [X31 - 0x30]!
	0x03AF3D9C STP X22, X21, [X31 + 0x10]
	0x03AF3DA0 STP X20, X19, [X31 + 0x20]
	0x03AF3DA4 ADRP X20, 0x8EF000
	0x03AF3DA8 LDRB W8, [X20 + 0x607]
	0x03AF3DAC MOV X19, X0
	0x03AF3DB0 TBNZ X8, 0x0, 0x3AF3DC8
	0x03AF3DB4 ADRP X0, 0x666000
	0x03AF3DB8 LDR X0, [X0 + 0x180]
	0x03AF3DBC BL 0x1C16CF4
	0x03AF3DC0 MOVZ W8, 0x1
	0x03AF3DC4 STRB W8, [X20 + 0x607]
	0x03AF3DC8 LDR W20, [X19 + 0x238]
	0x03AF3DCC MOV X0, X19
	0x03AF3DD0 BL 0x3AEC28C
	0x03AF3DD4 ADD W8, W20, W0
	0x03AF3DD8 CMP W8, 0x2
	0x03AF3DDC B.MI 0x3AF3E38
	0x03AF3DE0 ADRP X21, 0x666000
	0x03AF3DE4 LDR X21, [X21 + 0x180]
	0x03AF3DE8 LDR X20, [X19 + 0x220]
	0x03AF3DEC LDR X0, [X21]
	0x03AF3DF0 LDR W8, [X0 + 0xE0]
	0x03AF3DF4 CBNZ W8, 0x3AF3E00
	0x03AF3DF8 BL 0x1C16DFC
	0x03AF3DFC LDR X0, [X21]
	0x03AF3E00 LDR X8, [X0 + 0xB8]
	0x03AF3E04 LDR W22, [X19 + 0x238]
	0x03AF3E08 MOV X0, X19
	0x03AF3E0C LDR X21, [X8]
	0x03AF3E10 BL 0x3AEC28C
	0x03AF3E14 CBZ X20, 0x3AF3E4C
	0x03AF3E18 ADD W8, W22, W0
	0x03AF3E1C SUB W2, W8, 0x2
	0x03AF3E20 MOV X0, X20
	0x03AF3E24 MOV X1, X21
	0x03AF3E28 MOV X3, X31
	0x03AF3E2C BL 0x322C89C
	0x03AF3E30 ADD W0, W0, 0x1
	0x03AF3E34 B 0x3AF3E3C
	0x03AF3E38 MOV W0, W31
	0x03AF3E3C LDP X20, X19, [X31 + 0x20]
	0x03AF3E40 LDP X22, X21, [X31 + 0x10]
	0x03AF3E44 LDR X30, [X31], #0x30
	0x03AF3E48 RET
	0x03AF3E4C BL 0x1C16F20
	0x03AF3E50 STR X30, [X31 - 0x10]!
	0x03AF3E54 LDR X8, [X0 + 0x138]
	0x03AF3E58 CBZ X8, 0x3AF3F9C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+560]
	004 Compare W8, 0
	005 JumpIfNotEqual {41}
	006 Move W8, [X0+564]
	007 Move W1, [X0+568]
	008 Move X19, X0
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W9, [X19+729]
	011 Compare W9, 0
	012 JumpIfNotEqual {16}
	013 Move W9, [X19+713]
	014 Compare W9, 0
	015 JumpIfEqual {44}
	016 Move X0, [X19+544]
	017 Subtract W2, W8, W1
	018 Compare X0, 0
	019 JumpIfEqual {106}
	020 Subtract W2, W1, W8
	021 Move W1, W8
	022 Move X3, X31
	023 Call String.Remove, X0, X1, X2
	024 Move W8, [X19+564]
	025 Move [X19+544], X0
	026 Move [X19+568], W8
	027 Compare X0, 0
	028 JumpIfEqual {106}
	029 Move X3, X31
	030 Call String.Remove, X0, X1, X2
	031 Move W8, [X19+568]
	032 Move [X19+544], X0
	033 Move [X19+564], W8
	034 Move W8, [X19+713]
	035 Compare W8, 0
	036 JumpIfEqual {41}
	037 Add X8, X19, 572
	038 NotImplemented "Instruction MOVI not yet implemented."
	039 Move [X8], D0
	040 Move [X19+713], W31
	041 Move X30, [X31+16]
	042 Move X19, [X31+24]
	043 Return 
	044 Move X8, [X19+312]
	045 Compare X8, 0
	046 JumpIfEqual {106}
	047 Move X8, [X8+872]
	048 Compare X8, 0
	049 JumpIfEqual {106}
	050 Move X8, [X8+56]
	051 Compare X8, 0
	052 JumpIfEqual {106}
	053 NotImplemented "Instruction LDRSW not yet implemented."
	054 NotImplemented "Instruction LDRSW not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move W11, [X8+24]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move W12, 376
	059 NotImplemented "Instruction MADD not yet implemented."
	060 Move W1, [X10+36]
	061 Subtract X9, X9, 1
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move [X19+564], W1
	064 Move W10, 376
	065 NotImplemented "Instruction MADD not yet implemented."
	066 Move W9, [X8+36]
	067 Move W8, [X8+40]
	068 Move X0, [X19+544]
	069 Add W8, W8, W9
	070 Move [X19+568], W8
	071 Compare X0, 0
	072 JumpIfEqual {106}
	073 Subtract W2, W8, W1
	074 Move X3, X31
	075 Call String.Remove, X0, X1, X2
	076 Move W8, [X19+564]
	077 Move W9, [X19+572]
	078 Move [X19+544], X0
	079 Move [X19+568], W8
	080 Move [X19+576], W9
	081 Move W11, [X8+24]
	082 Subtract W10, W10, 1
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move W12, 376
	085 NotImplemented "Instruction SMADDL not yet implemented."
	086 Move W12, [X10+36]
	087 Move W10, [X10+40]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Add W10, W10, W12
	090 Move [X19+564], W10
	091 Move W11, 376
	092 NotImplemented "Instruction MADD not yet implemented."
	093 Move W1, [X8+36]
	094 Move X0, [X19+544]
	095 Move [X19+568], W1
	096 Compare X0, 0
	097 JumpIfEqual {106}
	098 Subtract W2, W10, W1
	099 Move X3, X31
	100 Call String.Remove, X0, X1, X2
	101 Move W8, [X19+568]
	102 Move W9, [X19+576]
	103 Move [X19+544], X0
	104 Move [X19+564], W8
	105 Move [X19+572], W9
	106 Call 0x1C17F20
	107 Call 0x1C17F28

Method: System.Void DeleteKey()

Disassembly:
	0x03AF39E0 LDR X10, [X8 + 0xB0]
	0x03AF39E4 ADD X10, X10, 0x8
	0x03AF39E8 LDUR X11, [X10 - 0x8]
	0x03AF39EC CMP X11, X1
	0x03AF39F0 B.EQ 0x3AF3A20
	0x03AF39F4 SUBS X9, X9, 0x1
	0x03AF39F8 ADD X10, X10, 0x10
	0x03AF39FC B.NE 0x3AF39E8
	0x03AF3A00 MOV X0, X19
	0x03AF3A04 MOV W2, W31
	0x03AF3A08 BL 0x1C5C788
	0x03AF3A0C B 0x3AF3A2C
	0x03AF3A10 LDP X20, X19, [X31 + 0x20]
	0x03AF3A14 LDP X30, X21, [X31 + 0x10]
	0x03AF3A18 LDR V8, [X31], #0x30
	0x03AF3A1C RET
	0x03AF3A20 LDRSW X9, [X10]
	0x03AF3A24 ADD X8, X8, X9, 0x4, LSL
	0x03AF3A28 ADD X0, X8, 0x138
	0x03AF3A2C LDP X3, X2, [X0]
	0x03AF3A30 MOV X0, X19
	0x03AF3A34 MOV X1, X20
	0x03AF3A38 LDP X20, X19, [X31 + 0x20]
	0x03AF3A3C LDP X30, X21, [X31 + 0x10]
	0x03AF3A40 LDR V8, [X31], #0x30
	0x03AF3A44 BR X3
	0x03AF3A48 BL 0x1C16F20
	0x03AF3A4C STP D11, D10, [X31 - 0x30]!
	0x03AF3A50 STP D9, D8, [X31 + 0x10]
	0x03AF3A54 STP X30, X19, [X31 + 0x20]
	0x03AF3A58 MOV X19, X0
	0x03AF3A5C LDR X0, [X0 + 0x110]
	0x03AF3A60 CBZ X0, 0x3AF3B24
	0x03AF3A64 MOV X1, X31
	0x03AF3A68 BL 0x3C3E51C
	0x03AF3A6C LDR X0, [X19 + 0x138]
	0x03AF3A70 CBZ X0, 0x3AF3B24
	0x03AF3A74 LDR X8, [X0 + 0x368]
	0x03AF3A78 CBZ X8, 0x3AF3B24
	0x03AF3A7C LDR X8, [X8 + 0x50]
	0x03AF3A80 CBZ X8, 0x3AF3B24
	0x03AF3A84 LDR W9, [X8 + 0x18]
	0x03AF3A88 CBZ W9, 0x3AF3B28
	0x03AF3A8C LDR V11, [X8 + 0x4C]
	0x03AF3A90 MOV X1, X31
	0x03AF3A94 MOV V9.16B, V1.16B
	0x03AF3A98 MOV V8.16B, V3.16B
	0x03AF3A9C BL 0x3AF8E0C
	0x03AF3AA0 CBZ X0, 0x3AF3B24
	0x03AF3AA4 MOV X1, X31
	0x03AF3AA8 BL 0x3C3E7F0
	0x03AF3AAC LDR X0, [X19 + 0x138]
	0x03AF3AB0 CBZ X0, 0x3AF3B24
	0x03AF3AB4 LDR X8, [X0]
	0x03AF3AB8 MOV V10.16B, V1.16B
	0x03AF3ABC FADD S9, S8, S9
	0x03AF3AC0 LDR X9, [X8 + 0x688]
	0x03AF3AC4 LDR X1, [X8 + 0x690]
	0x03AF3AC8 BLR X9
	0x03AF3ACC FSUB S1, S11, S9
	0x03AF3AD0 FSUB S0, S0, S8
	0x03AF3AD4 MOVZ W8, 0x447A0000
	0x03AF3AD8 FADD S1, S1, S10
	0x03AF3ADC FMOV S3, W8
	0x03AF3AE0 MOVZ W8, 0x7F800000
	0x03AF3AE4 FDIV S0, S1, S0
	0x03AF3AE8 FMOV S2, 0.5
	0x03AF3AEC FMOV S4, W8
	0x03AF3AF0 ADRP X8, 0xFFFFFFFFFCFF7000
	0x03AF3AF4 FMUL S0, S0, S3
	0x03AF3AF8 LDR V1, [X8 + 0x174]
	0x03AF3AFC FADD S0, S0, S2
	0x03AF3B00 FCVTZS W8, S0
	0x03AF3B04 LDP X30, X19, [X31 + 0x20]
	0x03AF3B08 LDP D9, D8, [X31 + 0x10]
	0x03AF3B0C SCVTF S2, W8
	0x03AF3B10 FDIV S2, S2, S3
	0x03AF3B14 FCMP S0, S4
	0x03AF3B18 FCSEL S0, S1, S2, EQ
	0x03AF3B1C LDP D11, D10, [X31], #0x30
	0x03AF3B20 RET
	0x03AF3B24 BL 0x1C16F20
	0x03AF3B28 BL 0x1C16F28
	0x03AF3B2C SUB X31, X31, 0x60
	0x03AF3B30 STP D11, D10, [X31 + 0x20]
	0x03AF3B34 STP D9, D8, [X31 + 0x30]
	0x03AF3B38 STP X30, X21, [X31 + 0x40]
	0x03AF3B3C STP X20, X19, [X31 + 0x50]
	0x03AF3B40 ADRP X21, 0x8EF000
	0x03AF3B44 ADRP X20, 0x600000
	0x03AF3B48 LDRB W8, [X21 + 0x616]
	0x03AF3B4C LDR X20, [X20 + 0x598]
	0x03AF3B50 MOV V8.16B, V0.16B
	0x03AF3B54 MOV X19, X0
	0x03AF3B58 TBNZ X8, 0x0, 0x3AF3B70
	0x03AF3B5C ADRP X0, 0x600000
	0x03AF3B60 LDR X0, [X0 + 0x598]
	0x03AF3B64 BL 0x1C16CF4
	0x03AF3B68 MOVZ W8, 0x1
	0x03AF3B6C STRB W8, [X21 + 0x616]
	0x03AF3B70 LDR X0, [X20]
	0x03AF3B74 LDR X20, [X19 + 0x110]
	0x03AF3B78 LDR W8, [X0 + 0xE0]
	0x03AF3B7C CBNZ W8, 0x3AF3B84
	0x03AF3B80 BL 0x1C16DFC
	0x03AF3B84 MOV X0, X20
	0x03AF3B88 MOV X1, X31
	0x03AF3B8C MOV X2, X31
	0x03AF3B90 BL 0x3C3883C
	0x03AF3B94 TBNZ X0, 0x0, 0x3AF3CA8
	0x03AF3B98 LDR X0, [X19 + 0x138]
	0x03AF3B9C CBZ X0, 0x3AF3CC0
	0x03AF3BA0 LDR X8, [X0 + 0x368]
	0x03AF3BA4 CBZ X8, 0x3AF3CA8
	0x03AF3BA8 LDR X9, [X8 + 0x50]
	0x03AF3BAC CBZ X9, 0x3AF3CA8
	0x03AF3BB0 LDR W8, [X8 + 0x2C]
	0x03AF3BB4 CBZ W8, 0x3AF3CA8
	0x03AF3BB8 LDR W9, [X9 + 0x18]
	0x03AF3BBC CMP W8, W9
	0x03AF3BC0 B.GT 0x3AF3CA8
	0x03AF3BC4 LDR X8, [X0]
	0x03AF3BC8 LDR X9, [X8 + 0x688]
	0x03AF3BCC LDR X1, [X8 + 0x690]
	0x03AF3BD0 BLR X9
	0x03AF3BD4 LDR X0, [X19 + 0x138]
	0x03AF3BD8 CBZ X0, 0x3AF3CC0
	0x03AF3BDC LDR W8, [X0 + 0x270]
	0x03AF3BE0 MOV V9.16B, V0.16B
	0x03AF3BE4 CMP W8, 0x400
	0x03AF3BE8 B.LE 0x3AF3C04
	0x03AF3BEC CMP W8, 0x1000
	0x03AF3BF0 B.EQ 0x3AF3C20
	0x03AF3BF4 CMP W8, 0x2000
	0x03AF3BF8 FMOV S11, W31
	0x03AF3BFC B.EQ 0x3AF3C3C
	0x03AF3C00 B 0x3AF3C40

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x8F0000
	007 Move W8, [X20+1545]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x603000
	014 Move X0, [X0+368]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+1545], W8
	018 Move W8, [X19+560]
	019 Compare W8, 0
	020 JumpIfEqual {27}
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 Return 
	027 Move W20, [X19+564]
	028 Move X0, X19
	029 Call TMP_InputField.get_compositionLength, X0
	030 Move W21, [X19+568]
	031 Add W20, W0, W20
	032 Move X0, X19
	033 Call TMP_InputField.get_compositionLength, X0
	034 Add W8, W0, W21
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W8, [X19+729]
	037 Compare W8, 0
	038 JumpIfEqual {99}
	039 Move W21, [X19+564]
	040 Move X0, X19
	041 Call TMP_InputField.get_compositionLength, X0
	042 Move X20, [X19+544]
	043 Compare X20, 0
	044 JumpIfEqual {151}
	045 Move W8, [X20+16]
	046 Add W9, W0, W21
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move W21, [X19+564]
	049 Move X0, X19
	050 Call TMP_InputField.get_compositionLength, X0
	051 Add W1, W0, W21
	052 Move X0, X20
	053 Move X2, X31
	054 Call String.get_Chars, X0, X1
	055 Move X8, 0x603000
	056 Move X8, [X8+368]
	057 Move W20, W0
	058 Move X8, [X8]
	059 Move W9, [X8+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X8
	063 Call 0x1C17DFC
	064 Move W0, W20
	065 Move X1, X31
	066 Call Char.IsHighSurrogate, X0
	067 Move X20, [X19+544]
	068 Move W22, [X19+564]
	069 Move W21, W0
	070 Move X0, X19
	071 Call TMP_InputField.get_compositionLength, X0
	072 Compare X20, 0
	073 JumpIfEqual {151}
	074 And W31, W21, 1
	075 Move W21, 1
	076 Add W1, W0, W22
	077 NotImplemented "Instruction CINC not yet implemented."
	078 Move X0, X20
	079 Move X3, X31
	080 Call String.Remove, X0, X1, X2
	081 Move [X19+544], X0
	082 Move [X19+683], W21
	083 Move W8, 1
	084 Move X0, X19
	085 Move [X19+683], W8
	086 Call TMP_InputField.Delete, X0
	087 Move X0, X19
	088 Call TMP_InputField.UpdateTouchKeyboardFromEditChanges, X0
	089 Move X0, X19
	090 Call TMP_InputField.UpdateLabel, X0
	091 Move X0, X19
	092 Move X20, [X31+32]
	093 Move X19, [X31+40]
	094 Move X22, [X31+16]
	095 Move X21, [X31+24]
	096 Move X30, [X31+48]
	097 Call TMP_InputField.SendOnValueChanged, X0
	098 Return 
	099 Move W20, [X19+572]
	100 Move X0, X19
	101 Call TMP_InputField.get_compositionLength, X0
	102 Move X8, [X19+312]
	103 Compare X8, 0
	104 JumpIfEqual {151}
	105 Move X8, [X8+872]
	106 Compare X8, 0
	107 JumpIfEqual {151}
	108 Move W9, [X8+24]
	109 Add W10, W0, W20
	110 Subtract W9, W9, 1
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move X20, [X8+56]
	113 Move W21, [X19+572]
	114 Move X0, X19
	115 Call TMP_InputField.get_compositionLength, X0
	116 Compare X20, 0
	117 JumpIfEqual {151}
	118 Move W9, [X20+24]
	119 Add W8, W0, W21
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move X9, [X19+312]
	122 Compare X9, 0
	123 JumpIfEqual {151}
	124 Move X9, [X9+872]
	125 Compare X9, 0
	126 JumpIfEqual {151}
	127 Move W10, 376
	128 NotImplemented "Instruction SMADDL not yet implemented."
	129 Move X21, [X9+56]
	130 Move W20, [X8+40]
	131 Move W22, [X19+572]
	132 Move X0, X19
	133 Call TMP_InputField.get_compositionLength, X0
	134 Compare X21, 0
	135 JumpIfEqual {151}
	136 Move W9, [X21+24]
	137 Add W8, W0, W22
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move X0, [X19+544]
	140 Compare X0, 0
	141 JumpIfEqual {151}
	142 Move W9, 376
	143 NotImplemented "Instruction SMADDL not yet implemented."
	144 Move W1, [X8+36]
	145 Move W2, W20
	146 Move X3, X31
	147 Call String.Remove, X0, X1, X2
	148 Move W8, 1
	149 Move [X19+544], X0
	150 Move [X19+683], W8
	151 Call 0x1C17F20
	152 Call 0x1C17F28

Method: System.Void Backspace()

Disassembly:
	0x03AF3658 B 0x3AF44BC
	0x03AF365C AND W1, W1, 0x1
	0x03AF3660 MOVZ W2, 0x1
	0x03AF3664 B 0x3AF4830
	0x03AF3668 AND W1, W1, 0x1
	0x03AF366C MOVZ W2, 0x1
	0x03AF3670 B 0x3AF4ADC
	0x03AF3674 ANDS W8, W1, 0xFFFF
	0x03AF3678 MOV W0, W31
	0x03AF367C B.EQ 0x3AF3688
	0x03AF3680 CMP W8, 0x7F
	0x03AF3684 B.NE 0x3AF368C
	0x03AF3688 RET
	0x03AF368C MOVZ W0, 0x1
	0x03AF3690 RET
	0x03AF3694 B 0x3AF2234
	0x03AF3698 STP X30, X23, [X31 - 0x30]!
	0x03AF369C STP X22, X21, [X31 + 0x10]
	0x03AF36A0 STP X20, X19, [X31 + 0x20]
	0x03AF36A4 ADRP X21, 0x8EF000
	0x03AF36A8 LDRB W8, [X21 + 0x602]
	0x03AF36AC MOV X19, X1
	0x03AF36B0 MOV X20, X0
	0x03AF36B4 TBNZ X8, 0x0, 0x3AF36CC
	0x03AF36B8 ADRP X0, 0x666000
	0x03AF36BC LDR X0, [X0 + 0x188]
	0x03AF36C0 BL 0x1C16CF4
	0x03AF36C4 MOVZ W8, 0x1
	0x03AF36C8 STRB W8, [X21 + 0x602]
	0x03AF36CC LDRB W8, [X20 + 0x270]
	0x03AF36D0 CBZ W8, 0x3AF37F8
	0x03AF36D4 LDR X0, [X20 + 0x2F0]
	0x03AF36D8 MOV X1, X31
	0x03AF36DC BL 0x3C634AC
	0x03AF36E0 TBZ X0, 0x0, 0x3AF3814
	0x03AF36E4 ADRP X22, 0x666000
	0x03AF36E8 LDR X22, [X22 + 0x188]
	0x03AF36EC MOV W23, W31
	0x03AF36F0 MOVZ W21, 0x1
	0x03AF36F4 LDR X0, [X20 + 0x2F0]
	0x03AF36F8 CBZ X0, 0x3AF3834
	0x03AF36FC MOV X1, X31
	0x03AF3700 BL 0x3C62C04
	0x03AF3704 CMP W0, 0x5
	0x03AF3708 B.EQ 0x3AF3740
	0x03AF370C CMP W0, 0x4
	0x03AF3710 B.EQ 0x3AF3754
	0x03AF3714 SUB W8, W0, 0xD
	0x03AF3718 CMP W8, 0x1
	0x03AF371C B.HI 0x3AF3740
	0x03AF3720 LDR X0, [X20 + 0x2F0]
	0x03AF3724 CBZ X0, 0x3AF3834
	0x03AF3728 MOV X1, X31
	0x03AF372C BL 0x3C632F0
	0x03AF3730 LDR X1, [X22]
	0x03AF3734 MOV X2, X31
	0x03AF3738 BL 0x321BA08
	0x03AF373C TBNZ X0, 0x0, 0x3AF37C8
	0x03AF3740 LDR X0, [X20 + 0x2F0]
	0x03AF3744 MOV X1, X31
	0x03AF3748 BL 0x3C634AC
	0x03AF374C TBNZ X0, 0x0, 0x3AF36F4
	0x03AF3750 B 0x3AF3808
	0x03AF3754 LDRB W8, [X20 + 0x2B8]
	0x03AF3758 CBZ W8, 0x3AF3794
	0x03AF375C MOV X0, X20
	0x03AF3760 BL 0x3AEC28C
	0x03AF3764 CBNZ W0, 0x3AF3794
	0x03AF3768 LDR X0, [X20 + 0x2F0]
	0x03AF376C CBZ X0, 0x3AF3834
	0x03AF3770 MOV X1, X31
	0x03AF3774 BL 0x3C630F0
	0x03AF3778 ANDS W31, W0, 0xFFFF
	0x03AF377C B.NE 0x3AF3794
	0x03AF3780 LDR X0, [X20 + 0x2F0]
	0x03AF3784 CBZ X0, 0x3AF3834
	0x03AF3788 MOV X1, X31
	0x03AF378C BL 0x3C62EF0
	0x03AF3790 CBZ W0, 0x3AF37E0
	0x03AF3794 LDR X1, [X20 + 0x2F0]
	0x03AF3798 MOV X0, X20
	0x03AF379C BL 0x3AF2234
	0x03AF37A0 CMP W0, 0x1
	0x03AF37A4 B.NE 0x3AF37D4
	0x03AF37A8 LDRB W8, [X20 + 0x298]
	0x03AF37AC CBNZ W8, 0x3AF37B8
	0x03AF37B0 MOV X0, X20
	0x03AF37B4 BL 0x3AF3838
	0x03AF37B8 MOV X0, X20
	0x03AF37BC MOV W1, W31
	0x03AF37C0 BL 0x3AEF600
	0x03AF37C4 B 0x3AF37E0
	0x03AF37C8 MOV X0, X20
	0x03AF37CC BL 0x3AEFAEC
	0x03AF37D0 B 0x3AF37E0
	0x03AF37D4 MOV X0, X20
	0x03AF37D8 STRB W21, [X20 + 0x2AA]
	0x03AF37DC BL 0x3AECBA4
	0x03AF37E0 LDR X0, [X20 + 0x2F0]
	0x03AF37E4 MOV X1, X31
	0x03AF37E8 BL 0x3C634AC
	0x03AF37EC MOVZ W23, 0x1
	0x03AF37F0 TBNZ X0, 0x0, 0x3AF36F4
	0x03AF37F4 B 0x3AF380C
	0x03AF37F8 LDP X20, X19, [X31 + 0x20]
	0x03AF37FC LDP X22, X21, [X31 + 0x10]
	0x03AF3800 LDP X30, X23, [X31], #0x30
	0x03AF3804 RET
	0x03AF3808 TBZ X23, 0x0, 0x3AF3814
	0x03AF380C MOV X0, X20
	0x03AF3810 BL 0x3AECBA4
	0x03AF3814 CBZ X19, 0x3AF3834
	0x03AF3818 LDR X8, [X19]
	0x03AF381C MOV X0, X19
	0x03AF3820 LDP X20, X19, [X31 + 0x20]
	0x03AF3824 LDP X22, X21, [X31 + 0x10]
	0x03AF3828 LDP X2, X1, [X8 + 0x188]
	0x03AF382C LDP X30, X23, [X31], #0x30
	0x03AF3830 BR X2
	0x03AF3834 BL 0x1C16F20
	0x03AF3838 STR X30, [X31 - 0x20]!
	0x03AF383C STP X20, X19, [X31 + 0x10]
	0x03AF3840 ADRP X20, 0x8EF000
	0x03AF3844 LDRB W8, [X20 + 0x60E]
	0x03AF3848 MOV X19, X0
	0x03AF384C TBNZ X8, 0x0, 0x3AF3864
	0x03AF3850 ADRP X0, 0x666000
	0x03AF3854 LDR X0, [X0 + 0x48]
	0x03AF3858 BL 0x1C16CF4
	0x03AF385C MOVZ W8, 0x1
	0x03AF3860 STRB W8, [X20 + 0x60E]
	0x03AF3864 LDR X0, [X19 + 0x1B8]
	0x03AF3868 CBZ X0, 0x3AF3888
	0x03AF386C ADRP X8, 0x666000
	0x03AF3870 LDR X8, [X8 + 0x48]
	0x03AF3874 LDR X1, [X19 + 0x220]
	0x03AF3878 LDP X20, X19, [X31 + 0x10]
	0x03AF387C LDR X2, [X8]
	0x03AF3880 LDR X30, [X31], #0x20
	0x03AF3884 B 0x2729DBC
	0x03AF3888 LDP X20, X19, [X31 + 0x10]
	0x03AF388C LDR X30, [X31], #0x20
	0x03AF3890 RET
	0x03AF3894 STR D8, [X31 - 0x30]!
	0x03AF3898 STP X30, X21, [X31 + 0x10]
	0x03AF389C STP X20, X19, [X31 + 0x20]
	0x03AF38A0 ADRP X21, 0x8EF000
	0x03AF38A4 LDRB W8, [X21 + 0x603]
	0x03AF38A8 MOV X20, X1
	0x03AF38AC MOV X19, X0
	0x03AF38B0 TBNZ X8, 0x0, 0x3AF38D4
	0x03AF38B4 ADRP X0, 0x666000
	0x03AF38B8 LDR X0, [X0 + 0x190]
	0x03AF38BC BL 0x1C16CF4
	0x03AF38C0 ADRP X0, 0x600000
	0x03AF38C4 LDR X0, [X0 + 0x598]
	0x03AF38C8 BL 0x1C16CF4
	0x03AF38CC MOVZ W8, 0x1
	0x03AF38D0 STRB W8, [X21 + 0x603]
	0x03AF38D4 LDR W8, [X19 + 0x190]
	0x03AF38D8 CBZ W8, 0x3AF39C0
	0x03AF38DC LDR X0, [X19 + 0x138]
	0x03AF38E0 CBZ X0, 0x3AF3A48
	0x03AF38E4 LDR X8, [X0]
	0x03AF38E8 LDR X9, [X8 + 0x688]
	0x03AF38EC LDR X1, [X8 + 0x690]
	0x03AF38F0 BLR X9
	0x03AF38F4 LDR X0, [X19 + 0x110]
	0x03AF38F8 CBZ X0, 0x3AF3A48
	0x03AF38FC MOV X1, X31
	0x03AF3900 MOV V8.16B, V0.16B
	0x03AF3904 BL 0x3C3E51C
	0x03AF3908 FCMP S8, S3
	0x03AF390C B.MI 0x3AF3A10
	0x03AF3910 CBZ X20, 0x3AF3A48
	0x03AF3914 LDR V8, [X20 + 0x140]
	0x03AF3918 MOV X0, X19
	0x03AF391C BL 0x3AF3A4C
	0x03AF3920 LDR X8, [X19 + 0x138]
	0x03AF3924 STR S0, [X19 + 0x178]
	0x03AF3928 CBZ X8, 0x3AF3A48
	0x03AF392C LDR X8, [X8 + 0x368]
	0x03AF3930 CBZ X8, 0x3AF3A48
	0x03AF3934 LDR V1, [X8 + 0x2C]
	0x03AF3938 LDR V3, [X19 + 0x17C]
	0x03AF393C FMOV S4, 1
	0x03AF3940 FNEG S2, S8
	0x03AF3944 SCVTF S1, S1
	0x03AF3948 FDIV S1, S4, S1
	0x03AF394C FMUL S1, S1, S2
	0x03AF3950 FMUL S1, S3, S1
	0x03AF3954 FADD S0, S0, S1
	0x03AF3958 FMIN S1, S0, S4
	0x03AF395C FCMP S0, 0x0
	0x03AF3960 FMOV S0, W31
	0x03AF3964 FCSEL S0, S1, S0, PL
	0x03AF3968 MOV X0, X19
	0x03AF396C STR S0, [X19 + 0x178]
	0x03AF3970 BL 0x3AF3B2C
	0x03AF3974 ADRP X8, 0x600000
	0x03AF3978 LDR X8, [X8 + 0x598]
	0x03AF397C LDR X20, [X19 + 0x150]
	0x03AF3980 LDR X0, [X8]
	0x03AF3984 LDR W8, [X0 + 0xE0]
	0x03AF3988 CBNZ W8, 0x3AF3990
	0x03AF398C BL 0x1C16DFC
	0x03AF3990 MOV X0, X20
	0x03AF3994 MOV X1, X31
	0x03AF3998 BL 0x3C38948
	0x03AF399C TBZ X0, 0x0, 0x3AF3A10
	0x03AF39A0 LDR X0, [X19 + 0x150]
	0x03AF39A4 CBZ X0, 0x3AF3A48
	0x03AF39A8 LDR V0, [X19 + 0x178]
	0x03AF39AC LDP X20, X19, [X31 + 0x20]
	0x03AF39B0 LDP X30, X21, [X31 + 0x10]
	0x03AF39B4 MOV X1, X31
	0x03AF39B8 LDR V8, [X31], #0x30
	0x03AF39BC B 0x3E3B844
	0x03AF39C0 LDR X19, [X19 + 0x170]
	0x03AF39C4 CBZ X19, 0x3AF3A10
	0x03AF39C8 ADRP X10, 0x666000
	0x03AF39CC LDR X8, [X19]
	0x03AF39D0 LDR X10, [X10 + 0x190]
	0x03AF39D4 LDRH W9, [X8 + 0x12E]
	0x03AF39D8 LDR X1, [X10]
	0x03AF39DC CBZ X9, 0x3AF3A00

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x8F0000
	009 Move W8, [X20+1546]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x603000
	016 Move X0, [X0+368]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1546], W8
	020 Move W8, [X19+560]
	021 Compare W8, 0
	022 JumpIfEqual {31}
	023 Move X20, [X31+48]
	024 Move X19, [X31+56]
	025 Move X22, [X31+32]
	026 Move X21, [X31+40]
	027 Move X24, [X31+16]
	028 Move X23, [X31+24]
	029 Move X30, [X31+64]
	030 Return 
	031 Move W20, [X19+564]
	032 Move X0, X19
	033 Call TMP_InputField.get_compositionLength, X0
	034 Move W21, [X19+568]
	035 Add W20, W0, W20
	036 Move X0, X19
	037 Call TMP_InputField.get_compositionLength, X0
	038 Add W8, W0, W21
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W8, [X19+729]
	041 Add X22, X19, 564
	042 Compare W8, 0
	043 JumpIfEqual {100}
	044 Move W20, [X19+564]
	045 Move X0, X19
	046 Call TMP_InputField.get_compositionLength, X0
	047 Add W8, W0, W20
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X20, [X19+544]
	050 Move W21, [X19+564]
	051 Move X0, X19
	052 Call TMP_InputField.get_compositionLength, X0
	053 Compare X20, 0
	054 JumpIfEqual {245}
	055 Add W8, W21, W0
	056 Subtract W1, W8, 1
	057 Move X0, X20
	058 Move X2, X31
	059 Call String.get_Chars, X0, X1
	060 Move X8, 0x603000
	061 Move X8, [X8+368]
	062 Move W20, W0
	063 Move X8, [X8]
	064 Move W9, [X8+224]
	065 Compare W9, 0
	066 JumpIfNotEqual {69}
	067 Move X0, X8
	068 Call 0x1C17DFC
	069 Move W0, W20
	070 Move X1, X31
	071 Call Char.IsLowSurrogate, X0
	072 Move W21, [X19+564]
	073 And W31, W0, 1
	074 Move W8, 1
	075 Move X0, X19
	076 NotImplemented "Instruction CINC not yet implemented."
	077 Call TMP_InputField.get_compositionLength, X0
	078 Subtract W8, W21, W20
	079 Add W8, W8, W0
	080 Move [X19+564], W8
	081 Move X21, [X19+544]
	082 Compare X21, 0
	083 JumpIfEqual {245}
	084 Move W9, [X21+16]
	085 Move W23, W8
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move W23, W9
	088 Move [X22], W9
	089 Move [X19+568], W8
	090 Move W9, [X21+16]
	091 Move X0, X19
	092 NotImplemented "Instruction CMP not yet implemented."
	093 NotImplemented "Instruction CSEL not yet implemented."
	094 Move [X19+568], W8
	095 Call TMP_InputField.get_compositionLength, X0
	096 Move W8, 1
	097 Move X0, X19
	098 Move [X19+683], W8
	099 Call TMP_InputField.Delete, X0
	100 Move W20, [X19+572]
	101 Move X0, X19
	102 Call TMP_InputField.get_compositionLength, X0
	103 Add W8, W0, W20
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X8, [X19+312]
	106 Compare X8, 0
	107 JumpIfEqual {245}
	108 Move X8, [X8+872]
	109 Compare X8, 0
	110 JumpIfEqual {245}
	111 Move X21, [X8+56]
	112 Move W20, [X19+572]
	113 Move X0, X19
	114 Call TMP_InputField.get_compositionLength, X0
	115 Compare X21, 0
	116 JumpIfEqual {245}
	117 Move W9, [X21+24]
	118 Add W8, W20, W0
	119 Subtract W8, W8, 1
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move X9, [X19+312]
	122 Compare X9, 0
	123 JumpIfEqual {245}
	124 Move X9, [X9+872]
	125 Compare X9, 0
	126 JumpIfEqual {245}
	127 Move W10, 376
	128 NotImplemented "Instruction SMADDL not yet implemented."
	129 Move X20, [X19+544]
	130 Move X23, [X9+56]
	131 Move W21, [X8+40]
	132 Move W24, [X19+572]
	133 Move X0, X19
	134 Call TMP_InputField.get_compositionLength, X0
	135 Compare X23, 0
	136 JumpIfEqual {245}
	137 Move W9, [X23+24]
	138 Add W8, W24, W0
	139 Subtract W8, W8, 1
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Compare X20, 0
	142 JumpIfEqual {245}
	143 Move W9, 376
	144 NotImplemented "Instruction SMADDL not yet implemented."
	145 Move W1, [X8+36]
	146 Move X0, X20
	147 Move W2, W21
	148 Move X3, X31
	149 Call String.Remove, X0, X1, X2
	150 Move W21, [X19+572]
	151 Move [X19+544], X0
	152 Move X0, X19
	153 Call TMP_InputField.get_compositionLength, X0
	154 Move X8, [X19+312]
	155 Compare X8, 0
	156 JumpIfEqual {245}
	157 Move X8, [X8+872]
	158 Compare X8, 0
	159 JumpIfEqual {245}
	160 Move X20, [X8+56]
	161 Add W8, W0, W21
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move W21, [X19+572]
	164 Move X0, X19
	165 Call TMP_InputField.get_compositionLength, X0
	166 Compare X20, 0
	167 JumpIfEqual {245}
	168 Move W9, [X20+24]
	169 Add W8, W21, W0
	170 Subtract W8, W8, 1
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Move X8, W8
	173 Move [X22], X31
	174 Move X21, [X19+544]
	175 Move X0, X19
	176 Call TMP_InputField.get_compositionLength, X0
	177 Compare X21, 0
	178 JumpIfEqual {245}
	179 Move W23, W31
	180 Add W1, W0, W23
	181 Move X0, X21
	182 Move W2, W20
	183 Move X3, X31
	184 Call String.Remove, X0, X1, X2
	185 Move W21, [X19+572]
	186 Move [X19+544], X0
	187 Add X20, X19, 572
	188 Compare X20, 0
	189 JumpIfEqual {245}
	190 Move W8, [X20+24]
	191 Compare W8, 0
	192 JumpIfEqual {246}
	193 Move X8, X31
	194 Move W9, 376
	195 NotImplemented "Instruction MADD not yet implemented."
	196 Move W8, [X8+36]
	197 Move [X22], W8
	198 Move TEMP, X8
	199 And TEMP, TEMP, -2147483648
	200 Compare TEMP, -2147483648
	201 JumpIfEqual {212}
	202 Move X9, [X19+544]
	203 Compare X9, 0
	204 JumpIfEqual {245}
	205 Move W10, [X9+16]
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Move [X22], W10
	208 Move [X19+568], W8
	209 Move W9, [X9+16]
	210 NotImplemented "Instruction CMP not yet implemented."
	211 NotImplemented "Instruction CSEL not yet implemented."
	212 Move W8, W31
	213 Move [X22], W31
	214 Move W21, [X19+572]
	215 Add X20, X19, 572
	216 Move [X19+568], W8
	217 Move X0, X19
	218 Call TMP_InputField.get_compositionLength, X0
	219 Add W8, W21, W0
	220 Subtract W21, W8, 1
	221 Move X0, X19
	222 Move X1, X20
	223 Move [X19+572], W21
	224 Call TMP_InputField.ClampCaretPos, X0, X1
	225 Add X1, X19, 576
	226 Move X0, X19
	227 Move [X19+576], W21
	228 Call TMP_InputField.ClampCaretPos, X0, X1
	229 Move W8, 1
	230 Move [X19+683], W8
	231 Move X0, X19
	232 Call TMP_InputField.UpdateTouchKeyboardFromEditChanges, X0
	233 Move X0, X19
	234 Call TMP_InputField.UpdateLabel, X0
	235 Move X0, X19
	236 Move X20, [X31+48]
	237 Move X19, [X31+56]
	238 Move X22, [X31+32]
	239 Move X21, [X31+40]
	240 Move X24, [X31+16]
	241 Move X23, [X31+24]
	242 Move X30, [X31+64]
	243 Call TMP_InputField.SendOnValueChanged, X0
	244 Return 
	245 Call 0x1C17F20
	246 Call 0x1C17F28

Method: System.Void Append(System.String input)

Disassembly:
	0x03AF5D98 CBZ X0, 0x3AF5F18
	0x03AF5D9C MOV X1, X31
	0x03AF5DA0 BL 0x3CDADE8
	0x03AF5DA4 CBZ X0, 0x3AF5F18
	0x03AF5DA8 MOV X1, X31
	0x03AF5DAC BL 0x3E244BC
	0x03AF5DB0 CBZ W0, 0x3AF5E0C
	0x03AF5DB4 LDR X0, [X19 + 0x138]
	0x03AF5DB8 CBZ X0, 0x3AF5F18
	0x03AF5DBC MOV X1, X31
	0x03AF5DC0 BL 0x3CDADE8
	0x03AF5DC4 CBZ X0, 0x3AF5F18
	0x03AF5DC8 MOV X1, X31
	0x03AF5DCC BL 0x3E24E68
	0x03AF5DD0 LDR X8, [X22]
	0x03AF5DD4 MOV X20, X0
	0x03AF5DD8 LDR W9, [X8 + 0xE0]
	0x03AF5DDC CBNZ W9, 0x3AF5DE8
	0x03AF5DE0 MOV X0, X8
	0x03AF5DE4 BL 0x1C16DFC
	0x03AF5DE8 MOV X0, X20
	0x03AF5DEC MOV X1, X31
	0x03AF5DF0 MOV X2, X31
	0x03AF5DF4 BL 0x3C3883C
	0x03AF5DF8 TBZ X0, 0x0, 0x3AF5E10
	0x03AF5DFC MOV X0, X31
	0x03AF5E00 BL 0x3C04820
	0x03AF5E04 MOV X20, X0
	0x03AF5E08 B 0x3AF5E10
	0x03AF5E0C MOV X20, X31
	0x03AF5E10 LDR X0, [X19 + 0x258]
	0x03AF5E14 CBZ X0, 0x3AF5F18
	0x03AF5E18 MOV X1, X31
	0x03AF5E1C BL 0x3C32ECC
	0x03AF5E20 CBZ X0, 0x3AF5F18
	0x03AF5E24 MOV X1, X31
	0x03AF5E28 BL 0x3C356F8
	0x03AF5E2C LDR X8, [X19 + 0x250]
	0x03AF5E30 CBZ X8, 0x3AF5F18
	0x03AF5E34 LDR W9, [X8 + 0x18]
	0x03AF5E38 CBZ W9, 0x3AF5F1C
	0x03AF5E3C CBZ X0, 0x3AF5F18
	0x03AF5E40 LDP S1, S2, [X8 + 0x24]
	0x03AF5E44 LDR V0, [X8 + 0x20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move W8, [X0+560]
	009 Compare W8, 0
	010 JumpIfNotEqual {42}
	011 Move X19, X0
	012 Move X20, X1
	013 Call TMP_InputField.InPlaceEditing, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {42}
	018 Compare X20, 0
	019 JumpIfEqual {50}
	020 Move W22, [X20+16]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W21, W31
	023 Move W23, 1
	024 Move W24, 0x2600
	025 Move X0, X20
	026 Move W1, W21
	027 Move X2, X31
	028 Call String.get_Chars, X0, X1
	029 And W8, W0, 0xFFFF
	030 Move W1, W0
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 NotImplemented "Instruction LSLV not yet implemented."
	034 And W31, W8, W24
	035 Move X8, [X19]
	036 Move X0, X19
	037 Move X9, [X8+1400]
	038 Move X2, [X8+1408]
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Add W21, W21, 1
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X20, [X31+48]
	043 Move X19, [X31+56]
	044 Move X22, [X31+32]
	045 Move X21, [X31+40]
	046 Move X24, [X31+16]
	047 Move X23, [X31+24]
	048 Move X30, [X31+64]
	049 Return 
	050 Call 0x1C17F20

Method: System.Void Append(System.Char input)

Disassembly:
	0x03AF5E48 MOV X1, X31
	0x03AF5E4C BL 0x3C3DE4C
	0x03AF5E50 ADRP X8, 0x654000
	0x03AF5E54 LDR X8, [X8 + 0x6B8]
	0x03AF5E58 MOV V8.16B, V0.16B
	0x03AF5E5C MOV V9.16B, V1.16B
	0x03AF5E60 MOV V10.16B, V2.16B
	0x03AF5E64 LDR X0, [X8]
	0x03AF5E68 LDR W8, [X0 + 0xE0]
	0x03AF5E6C CBNZ W8, 0x3AF5E74
	0x03AF5E70 BL 0x1C16DFC
	0x03AF5E74 MOV X0, X20
	0x03AF5E78 MOV V0.16B, V8.16B
	0x03AF5E7C MOV V1.16B, V9.16B
	0x03AF5E80 MOV V2.16B, V10.16B
	0x03AF5E84 MOV X1, X31
	0x03AF5E88 BL 0x3E23B94
	0x03AF5E8C MOV X0, X31
	0x03AF5E90 MOV V8.16B, V0.16B
	0x03AF5E94 MOV V9.16B, V1.16B
	0x03AF5E98 BL 0x3C0E0D8
	0x03AF5E9C MOV W19, W0
	0x03AF5EA0 BL 0x3AEC0E8
	0x03AF5EA4 LDR X8, [X22]
	0x03AF5EA8 MOV X20, X0
	0x03AF5EAC LDR W9, [X8 + 0xE0]
	0x03AF5EB0 CBNZ W9, 0x3AF5EBC
	0x03AF5EB4 MOV X0, X8
	0x03AF5EB8 BL 0x1C16DFC
	0x03AF5EBC MOV X0, X20
	0x03AF5EC0 MOV X1, X31
	0x03AF5EC4 MOV X2, X31
	0x03AF5EC8 BL 0x3C354F8
	0x03AF5ECC TBZ X0, 0x0, 0x3AF5EF4
	0x03AF5ED0 BL 0x3AEC0E8
	0x03AF5ED4 CBZ X0, 0x3AF5F18
	0x03AF5ED8 LDR X8, [X0]
	0x03AF5EDC SCVTF S0, W19
	0x03AF5EE0 FSUB S1, S0, S9
	0x03AF5EE4 MOV V0.16B, V8.16B
	0x03AF5EE8 LDR X9, [X8 + 0x288]
	0x03AF5EEC LDR X1, [X8 + 0x290]
	0x03AF5EF0 BLR X9
	0x03AF5EF4 LDP X20, X19, [X31 + 0x70]
	0x03AF5EF8 LDP X22, X21, [X31 + 0x60]
	0x03AF5EFC LDP X24, X23, [X31 + 0x50]
	0x03AF5F00 LDP X26, X25, [X31 + 0x40]
	0x03AF5F04 LDP X30, X27, [X31 + 0x30]
	0x03AF5F08 LDP D9, D8, [X31 + 0x20]
	0x03AF5F0C LDP D11, D10, [X31 + 0x10]
	0x03AF5F10 ADD X31, X31, 0x80
	0x03AF5F14 RET
	0x03AF5F18 BL 0x1C16F20
	0x03AF5F1C BL 0x1C16F28
	0x03AF5F20 STR D14, [X31 - 0xA0]!
	0x03AF5F24 STP D13, D12, [X31 + 0x10]
	0x03AF5F28 STP D11, D10, [X31 + 0x20]
	0x03AF5F2C STP D9, D8, [X31 + 0x30]
	0x03AF5F30 STP X29, X30, [X31 + 0x40]
	0x03AF5F34 STP X28, X27, [X31 + 0x50]
	0x03AF5F38 STP X26, X25, [X31 + 0x60]
	0x03AF5F3C STP X24, X23, [X31 + 0x70]
	0x03AF5F40 STP X22, X21, [X31 + 0x80]
	0x03AF5F44 STP X20, X19, [X31 + 0x90]
	0x03AF5F48 SUB X31, X31, 0x250
	0x03AF5F4C ADRP X21, 0x8ED000
	0x03AF5F50 LDRB W8, [X21 + 0x61D]
	0x03AF5F54 MOV X19, X1
	0x03AF5F58 MOV X20, X0
	0x03AF5F5C TBNZ X8, 0x0, 0x3AF5F74
	0x03AF5F60 ADRP X0, 0x629000
	0x03AF5F64 LDR X0, [X0 + 0x7E8]
	0x03AF5F68 BL 0x1C16CF4
	0x03AF5F6C MOVZ W8, 0x1
	0x03AF5F70 STRB W8, [X21 + 0x61D]
	0x03AF5F74 LDR X8, [X20 + 0x138]
	0x03AF5F78 CBZ X8, 0x3AF64EC
	0x03AF5F7C LDR X23, [X8 + 0x368]
	0x03AF5F80 LDR W21, [X20 + 0x234]
	0x03AF5F84 MOV X0, X20
	0x03AF5F88 BL 0x3AEC28C
	0x03AF5F8C ADD W1, W0, W21
	0x03AF5F90 MOV X0, X20
	0x03AF5F94 BL 0x3AEF8F4
	0x03AF5F98 LDR W21, [X20 + 0x238]
	0x03AF5F9C STR W0, [X20 + 0x23C]
	0x03AF5FA0 MOV X0, X20
	0x03AF5FA4 ADD X24, X20, 0x23C
	0x03AF5FA8 BL 0x3AEC28C
	0x03AF5FAC ADD W1, W0, W21
	0x03AF5FB0 MOV X0, X20
	0x03AF5FB4 BL 0x3AEF8F4
	0x03AF5FB8 LDR X8, [X20 + 0x100]
	0x03AF5FBC STR W0, [X20 + 0x240]
	0x03AF5FC0 CBZ X8, 0x3AF5FFC
	0x03AF5FC4 CBZ X23, 0x3AF64EC
	0x03AF5FC8 LDRSW X9, [X24]
	0x03AF5FCC LDR X8, [X23 + 0x38]
	0x03AF5FD0 CMP W9, W0
	0x03AF5FD4 B.GE 0x3AF6004
	0x03AF5FD8 CBZ X8, 0x3AF64EC
	0x03AF5FDC LDR W10, [X8 + 0x18]
	0x03AF5FE0 CMP W9, W10
	0x03AF5FE4 B.CS 0x3AF64F0
	0x03AF5FE8 MOVZ W10, 0x178
	0x03AF5FEC MADD X8, X9, X10, X8
	0x03AF5FF0 LDR W21, [X8 + 0x24]
	0x03AF5FF4 LDR W22, [X20 + 0x238]
	0x03AF5FF8 B 0x3AF6024
	0x03AF5FFC CBNZ X23, 0x3AF6064
	0x03AF6000 B 0x3AF64EC
	0x03AF6004 CBZ X8, 0x3AF64EC
	0x03AF6008 LDR W9, [X8 + 0x18]
	0x03AF600C CMP W0, W9
	0x03AF6010 B.CS 0x3AF64F0
	0x03AF6014 MOVZ W9, 0x178
	0x03AF6018 SMADDL X8, X0, X9, X8
	0x03AF601C LDR W21, [X8 + 0x24]
	0x03AF6020 LDR W22, [X20 + 0x234]
	0x03AF6024 MOV X0, X20
	0x03AF6028 BL 0x3AEC28C
	0x03AF602C SUB W8, W22, W21
	0x03AF6030 LDR X22, [X20 + 0x100]
	0x03AF6034 ADD W2, W8, W0
	0x03AF6038 ADD X0, X31, 0x200
	0x03AF603C MOV W1, W21
	0x03AF6040 MOV X3, X31
	0x03AF6044 STR X31, [X31 + 0x200]
	0x03AF6048 BL 0x3C36CD0
	0x03AF604C CBZ X22, 0x3AF64EC
	0x03AF6050 LDR X1, [X31 + 0x200]
	0x03AF6054 MOV X0, X22
	0x03AF6058 MOV X2, X31
	0x03AF605C BL 0x3C3D1E0
	0x03AF6060 LDR W0, [X20 + 0x240]
	0x03AF6064 LDR X8, [X23 + 0x38]
	0x03AF6068 CBZ X8, 0x3AF64EC
	0x03AF606C LDR W9, [X23 + 0x18]
	0x03AF6070 CMP W0, W9
	0x03AF6074 B.GE 0x3AF6098
	0x03AF6078 LDR W9, [X8 + 0x18]
	0x03AF607C CMP W0, W9
	0x03AF6080 B.CS 0x3AF64F0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move W8, [X0+560]
	009 Compare W8, 0
	010 JumpIfNotEqual {100}
	011 Move X19, X0
	012 Move W20, W1
	013 Call TMP_InputField.InPlaceEditing, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {100}
	018 Move W21, [X19+564]
	019 Move X0, X19
	020 Call TMP_InputField.get_compositionLength, X0
	021 Move W23, [X19+568]
	022 Add W21, W0, W21
	023 Move X0, X19
	024 Call TMP_InputField.get_compositionLength, X0
	025 Move X22, [X19+544]
	026 Move W24, [X19+576]
	027 Add W8, W0, W23
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X0, X19
	030 NotImplemented "Instruction CSEL not yet implemented."
	031 Call TMP_InputField.get_compositionLength, X0
	032 Move W23, [X19+572]
	033 Add W24, W0, W24
	034 Move X0, X19
	035 Call TMP_InputField.get_compositionLength, X0
	036 Add W8, W0, W23
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move W8, [X19+729]
	039 Compare W8, 0
	040 JumpIfNotEqual {44}
	041 Move W8, [X19+713]
	042 Compare W8, 0
	043 JumpIfEqual {109}
	044 Move W8, [X19+564]
	045 Move W1, [X19+568]
	046 Move X0, [X19+544]
	047 Subtract W2, W8, W1
	048 Compare X0, 0
	049 JumpIfEqual {157}
	050 Subtract W2, W1, W8
	051 Move W1, W8
	052 Compare X0, 0
	053 JumpIfEqual {157}
	054 Move X3, X31
	055 Call String.Remove, X0, X1, X2
	056 Move X22, X0
	057 Move X8, [X19+496]
	058 Compare X8, 0
	059 JumpIfEqual {78}
	060 Move X9, [X8+24]
	061 Move X0, [X8+64]
	062 Move X4, [X8+40]
	063 Move X1, X22
	064 Move W2, W21
	065 Move W3, W20
	066 NotImplemented "Instruction BLR not yet implemented."
	067 Move W20, W0
	068 And W31, W20, 0xFFFF
	069 Move X0, X19
	070 Move W1, W20
	071 Move X20, [X31+48]
	072 Move X19, [X31+56]
	073 Move X22, [X31+32]
	074 Move X21, [X31+40]
	075 Move X24, [X31+16]
	076 Move X23, [X31+24]
	077 Move X30, [X31+64]
	078 Move W8, [X19+408]
	079 Compare W8, 0
	080 JumpIfEqual {68}
	081 Move X0, X19
	082 Move X1, X22
	083 Move W2, W21
	084 Move W3, W20
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Call TMP_InputField.Validate, X0, X1, X2, X3
	087 And W31, W0, 0xFFFF
	088 Move X0, X19
	089 Call TMP_InputField.SendOnValueChanged, X0
	090 Move X0, X19
	091 Move X20, [X31+48]
	092 Move X19, [X31+56]
	093 Move X22, [X31+32]
	094 Move X21, [X31+40]
	095 Move X24, [X31+16]
	096 Move X23, [X31+24]
	097 Move X30, [X31+64]
	098 Call TMP_InputField.UpdateLabel, X0
	099 Return 
	100 Move X20, [X31+48]
	101 Move X19, [X31+56]
	102 Move X22, [X31+32]
	103 Move X21, [X31+40]
	104 Move X24, [X31+16]
	105 Move X23, [X31+24]
	106 Move X30, [X31+64]
	107 Return 
	108 Call TMP_InputField.Validate, X0, X1, X2, X3
	109 Move X8, [X19+312]
	110 Compare X8, 0
	111 JumpIfEqual {157}
	112 Move X8, [X8+872]
	113 Compare X8, 0
	114 JumpIfEqual {157}
	115 Move X8, [X8+56]
	116 Compare X8, 0
	117 JumpIfEqual {157}
	118 NotImplemented "Instruction LDRSW not yet implemented."
	119 NotImplemented "Instruction LDRSW not yet implemented."
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move W11, [X8+24]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move W12, 376
	124 NotImplemented "Instruction MADD not yet implemented."
	125 Move W1, [X10+36]
	126 Subtract X9, X9, 1
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move [X19+564], W1
	129 Move W10, 376
	130 NotImplemented "Instruction MADD not yet implemented."
	131 Move W9, [X8+36]
	132 Move W8, [X8+40]
	133 Move X0, [X19+544]
	134 Add W8, W8, W9
	135 Move [X19+568], W8
	136 Compare X0, 0
	137 JumpIfEqual {157}
	138 Subtract W2, W8, W1
	139 Move W11, [X8+24]
	140 Subtract W10, W10, 1
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move W12, 376
	143 NotImplemented "Instruction SMADDL not yet implemented."
	144 Move W12, [X10+36]
	145 Move W10, [X10+40]
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Add W10, W10, W12
	148 Move [X19+564], W10
	149 Move W11, 376
	150 NotImplemented "Instruction MADD not yet implemented."
	151 Move W1, [X8+36]
	152 Move X0, [X19+544]
	153 Move [X19+568], W1
	154 Compare X0, 0
	155 JumpIfEqual {157}
	156 Subtract W2, W10, W1
	157 Call 0x1C17F20
	158 Call 0x1C17F28

Method: System.Void Insert(System.Char c)

Disassembly:
	0x03AF6084 MOVZ W10, 0x178
	0x03AF6088 SMADDL X10, X0, X10, X8
	0x03AF608C SXTW X9, W0
	0x03AF6090 ADD X10, X10, 0x140
	0x03AF6094 B 0x3AF60B8
	0x03AF6098 LDR W9, [X8 + 0x18]
	0x03AF609C SUB W10, W0, 0x1
	0x03AF60A0 CMP W10, W9
	0x03AF60A4 B.CS 0x3AF64F0
	0x03AF60A8 MOVZ W11, 0x178
	0x03AF60AC SXTW X9, W10
	0x03AF60B0 SMADDL X10, X10, X11, X8
	0x03AF60B4 ADD X10, X10, 0x144
	0x03AF60B8 MOVZ W11, 0x178
	0x03AF60BC MADD X8, X9, X11, X8
	0x03AF60C0 LDR V1, [X8 + 0x150]
	0x03AF60C4 LDR V2, [X8 + 0x148]
	0x03AF60C8 LDR V0, [X10]
	0x03AF60CC MOVZ W1, 0x1
	0x03AF60D0 MOV X0, X20
	0x03AF60D4 FSUB S2, S2, S1
	0x03AF60D8 BL 0x3AF6644
	0x03AF60DC LDR V0, [X24]
	0x03AF60E0 MOVI V1.2D, 0x0
	0x03AF60E4 LDR X9, [X23 + 0x38]
	0x03AF60E8 SMAX S0.2S, S0.2S, S1.2S
	0x03AF60EC UNIMPLEMENTED
	0x03AF60F0 FMOV W10, S0
	0x03AF60F4 CMP W10, W8
	0x03AF60F8 CSEL W22, W10, W8, HI
	0x03AF60FC CSEL W21, W8, W10, HI
	0x03AF6100 CBZ X9, 0x3AF64EC
	0x03AF6104 LDR W8, [X9 + 0x18]
	0x03AF6108 CMP W21, W8
	0x03AF610C B.CS 0x3AF64F0
	0x03AF6110 LDR X8, [X23 + 0x50]
	0x03AF6114 CBZ X8, 0x3AF64EC
	0x03AF6118 MOVZ W10, 0x178
	0x03AF611C UMADDL X9, X21, X10, X9
	0x03AF6120 LDR W24, [X9 + 0x64]
	0x03AF6124 LDR W9, [X8 + 0x18]
	0x03AF6128 CMP W24, W9
	0x03AF612C B.CS 0x3AF64F0
	0x03AF6130 ADRP X25, 0x628000
	0x03AF6134 LDR X25, [X25 + 0x7E8]
	0x03AF6138 SXTW X9, W24
	0x03AF613C MOVZ W10, 0x5C
	0x03AF6140 MADD X8, X9, X10, X8
	0x03AF6144 LDR X0, [X25]
	0x03AF6148 LDR W27, [X8 + 0x3C]
	0x03AF614C ADD X26, X31, 0x190
	0x03AF6150 LDR W9, [X0 + 0xE0]
	0x03AF6154 CBNZ W9, 0x3AF6160
	0x03AF6158 BL 0x1C16DFC
	0x03AF615C LDR X0, [X25]
	0x03AF6160 LDR X8, [X0 + 0xB8]
	0x03AF6164 ADRP X25, 0x8E3000
	0x03AF6168 LDUR V0, [X8 + 0x2C]
	0x03AF616C LDR V3, [X8 + 0x2]
	0x03AF6170 STUR V0, [X26 + 0xAC]
	0x03AF6174 LDP V2, V0, [X8 + 0x60]
	0x03AF6178 LDR V1, [X8 + 0x5]
	0x03AF617C LDRB W8, [X25 + 0x78F]
	0x03AF6180 STP V0, V3, [X31 + 0x220]
	0x03AF6184 STP V1, V2, [X31 + 0x200]
	0x03AF6188 CBNZ W8, 0x3AF61A0
	0x03AF618C ADRP X0, 0x605000
	0x03AF6190 LDR X0, [X0 + 0xF08]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x8ED000
	007 Move W8, [X20+1547]
	008 Move X19, X0
	009 NotImplemented "Instruction STRH not yet implemented."
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x600000
	015 Move X0, [X0+368]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1547], W8
	019 Move W8, [X19+560]
	020 Compare W8, 0
	021 JumpIfNotEqual {74}
	022 Move X21, 0x600000
	023 Move X21, [X21+368]
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Add X0, X31, 12
	030 Move X1, X31
	031 Call Char.ToString, X0
	032 Move X20, X0
	033 Move X0, X19
	034 Call TMP_InputField.Delete, X0
	035 Move W8, [X19+428]
	036 Move X0, [X19+544]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Compare X0, 0
	039 JumpIfEqual {80}
	040 Move W9, [X0+16]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Compare X0, 0
	043 JumpIfEqual {80}
	044 Move W1, [X19+564]
	045 Move X2, X20
	046 Move X3, X31
	047 Call String.Insert, X0, X1, X2
	048 Move [X19+544], X0
	049 Move X0, [X21]
	050 NotImplemented "Instruction LDRH not yet implemented."
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move W0, W20
	056 Move X1, X31
	057 Call Char.IsHighSurrogate, X0
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {66}
	062 Move W8, [X19+572]
	063 Add W8, W8, 1
	064 Move [X19+572], W8
	065 Move [X19+576], W8
	066 Move W8, [X19+564]
	067 Move X0, X19
	068 Add W8, W8, 1
	069 Move [X19+564], W8
	070 Move [X19+568], W8
	071 Call TMP_InputField.UpdateTouchKeyboardFromEditChanges, X0
	072 Move X0, X19
	073 Call TMP_InputField.SendOnValueChanged, X0
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X30, [X31+16]
	077 Move X21, [X31+24]
	078 Add X31, X31, 48
	079 Return 
	080 Call 0x1C17F20

Method: System.Void UpdateTouchKeyboardFromEditChanges()

Disassembly:
	0x03AF3E5C LDR X9, [X8 + 0x368]
	0x03AF3E60 CBZ X9, 0x3AF3F9C
	0x03AF3E64 LDR W8, [X9 + 0x18]
	0x03AF3E68 LDR X10, [X9 + 0x38]
	0x03AF3E6C CMP W8, W1
	0x03AF3E70 CSET W11, LE
	0x03AF3E74 CBZ X10, 0x3AF3F9C
	0x03AF3E78 LDR W8, [X10 + 0x18]
	0x03AF3E7C SUB W14, W1, W11
	0x03AF3E80 CMP W14, W8
	0x03AF3E84 B.CS 0x3AF3F98
	0x03AF3E88 MOVZ W11, 0x178
	0x03AF3E8C SMADDL X11, X14, X11, X10
	0x03AF3E90 LDRSW X13, [X11 + 0x64]
	0x03AF3E94 SUBS W12, W13, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+256]
	004 Compare X8, 0
	005 JumpIfEqual {21}
	006 Move X19, X0
	007 Call TMP_InputField.InPlaceEditing, X0
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {21}
	012 Move X0, [X19+256]
	013 Compare X0, 0
	014 JumpIfEqual {24}
	015 Move X1, [X19+544]
	016 Move X2, X31
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Call TouchScreenKeyboard.set_text, X0, X1
	020 Return 
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return 
	024 Call 0x1C17F20

Method: System.Void SendOnValueChangedAndUpdateLabel()

Disassembly:
	0x03AF26C8 CMP W20, W8
	0x03AF26CC B.NE 0x3AF27B0
	0x03AF26D0 LDRB W8, [X19 + 0x2D9]
	0x03AF26D4 ADD X22, X19, 0x234
	0x03AF26D8 CBZ W8, 0x3AF27C4
	0x03AF26DC LDR W20, [X19 + 0x234]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call TMP_InputField.UpdateLabel, X0
	005 Move X0, X19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Call TMP_InputField.SendOnValueChanged, X0
	009 Return 

Method: System.Void SendOnValueChanged()

Disassembly:
	0x03AEE028 MOV W1, W20
	0x03AEE02C BL 0x2253F10
	0x03AEE030 TBZ X0, 0x0, 0x3AEE040
	0x03AEE034 LDR W8, [X19 + 0x180]
	0x03AEE038 CMP W8, 0x9
	0x03AEE03C B.NE 0x3AEE050
	0x03AEE040 LDP X20, X19, [X31 + 0x20]
	0x03AEE044 LDP X22, X21, [X31 + 0x10]
	0x03AEE048 LDR X30, [X31], #0x30
	0x03AEE04C RET
	0x03AEE050 MOV X0, X19
	0x03AEE054 LDP X20, X19, [X31 + 0x20]
	0x03AEE058 LDP X22, X21, [X31 + 0x10]
	0x03AEE05C MOVZ W1, 0x9
	0x03AEE060 LDR X30, [X31], #0x30
	0x03AEE064 B 0x3AEDC68
	0x03AEE068 LDR W0, [X0 + 0x198]
	0x03AEE06C RET
	0x03AEE070 STR X30, [X31 - 0x30]!
	0x03AEE074 STP X22, X21, [X31 + 0x10]
	0x03AEE078 STP X20, X19, [X31 + 0x20]
	0x03AEE07C ADRP X22, 0x8F4000
	0x03AEE080 ADRP X21, 0x66B000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8F5000
	005 Move W8, [X20+1548]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x66C000
	012 Move X0, [X0+72]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1548], W8
	016 Move X0, [X19+480]
	017 Compare X0, 0
	018 JumpIfEqual {28}
	019 Move X8, 0x66C000
	020 Move X8, [X8+72]
	021 Move X1, [X19+544]
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X2, [X8]
	025 Move X30, [X31+32]
	026 Call UnityEvent`1<Object>.Invoke, X0, X1
	027 Return 
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return 

Method: System.Void SendOnEndEdit()

Disassembly:
	0x03AF6194 BL 0x1C16CF4
	0x03AF6198 MOVZ W8, 0x1
	0x03AF619C STRB W8, [X25 + 0x78F]
	0x03AF61A0 ADRP X8, 0x605000
	0x03AF61A4 LDR X8, [X8 + 0xF08]
	0x03AF61A8 LDR V0, [X20 + 0x20C]
	0x03AF61AC LDR V1, [X20 + 0x210]
	0x03AF61B0 LDR V2, [X20 + 0x214]
	0x03AF61B4 LDR X8, [X8]
	0x03AF61B8 LDR V3, [X20 + 0x218]
	0x03AF61BC MOV X0, X31
	0x03AF61C0 LDR X8, [X8 + 0xB8]
	0x03AF61C4 LDP S8, S9, [X8]
	0x03AF61C8 BL 0x1E43664
	0x03AF61CC CMP W21, W22
	0x03AF61D0 B.GE 0x3AF64BC
	0x03AF61D4 ADD X9, X31, 0x190
	0x03AF61D8 ADD X10, X31, 0x120
	0x03AF61DC ADD X11, X31, 0xB0
	0x03AF61E0 ADD X14, X9, 0xC
	0x03AF61E4 ADD X13, X9, 0x3C
	0x03AF61E8 ADD X9, X10, 0xC
	0x03AF61EC ADD X12, X31, 0x40

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8ED000
	005 Move W8, [X20+1549]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x664000
	012 Move X0, [X0+72]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1549], W8
	016 Move X0, [X19+432]
	017 Compare X0, 0
	018 JumpIfEqual {28}
	019 Move X8, 0x664000
	020 Move X8, [X8+72]
	021 Move X1, [X19+544]
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X2, [X8]
	025 Move X30, [X31+32]
	026 Call UnityEvent`1<Object>.Invoke, X0, X1
	027 Return 
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return 

Method: System.Void SendOnSubmit()

Disassembly:
	0x03AF4838 STP D11, D10, [X31 + 0x30]
	0x03AF483C STP D9, D8, [X31 + 0x40]
	0x03AF4840 STP X30, X25, [X31 + 0x50]
	0x03AF4844 STP X24, X23, [X31 + 0x60]
	0x03AF4848 STP X22, X21, [X31 + 0x70]
	0x03AF484C STP X20, X19, [X31 + 0x80]
	0x03AF4850 LDR W22, [X0 + 0x234]
	0x03AF4854 MOV W21, W2
	0x03AF4858 MOV X19, X0
	0x03AF485C MOV W20, W1
	0x03AF4860 BL 0x3AEC28C
	0x03AF4864 LDR W23, [X19 + 0x238]
	0x03AF4868 ADD W22, W0, W22
	0x03AF486C MOV X0, X19
	0x03AF4870 BL 0x3AEC28C
	0x03AF4874 ADD W8, W0, W23
	0x03AF4878 CMP W22, W8
	0x03AF487C B.EQ 0x3AF48D4
	0x03AF4880 TBNZ X20, 0x0, 0x3AF48D4
	0x03AF4884 LDR W23, [X19 + 0x23C]
	0x03AF4888 MOV X0, X19
	0x03AF488C ADD X22, X19, 0x23C
	0x03AF4890 BL 0x3AEC28C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8EF000
	005 Move W8, [X20+1550]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x666000
	012 Move X0, [X0+72]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1550], W8
	016 Move X0, [X19+440]
	017 Compare X0, 0
	018 JumpIfEqual {28}
	019 Move X8, 0x666000
	020 Move X8, [X8+72]
	021 Move X1, [X19+544]
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X2, [X8]
	025 Move X30, [X31+32]
	026 Call UnityEvent`1<Object>.Invoke, X0, X1
	027 Return 
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return 

Method: System.Void SendOnFocus()

Disassembly:
	0x03AF61F0 STP X9, X13, [X31 + 0x30]
	0x03AF61F4 ADD X13, X10, 0x3C
	0x03AF61F8 ADD X9, X11, 0xC
	0x03AF61FC STP X9, X13, [X31 + 0x20]
	0x03AF6200 ADD X10, X11, 0x3C
	0x03AF6204 ADD X9, X12, 0xC
	0x03AF6208 SUB W8, W22, 0x1
	0x03AF620C STP X9, X10, [X31 + 0x10]
	0x03AF6210 ADD X9, X12, 0x3C
	0x03AF6214 MOV X20, X0
	0x03AF6218 MOV W26, W27
	0x03AF621C MOV W27, W21
	0x03AF6220 MOV W25, W22
	0x03AF6224 STR X14, [X31 + 0x258]
	0x03AF6228 STR X9, [X31 + 0x8]
	0x03AF622C MOV W28, W8
	0x03AF6230 MOVI D10, 0x0
	0x03AF6234 LDRSW X8, [X23 + 0x18]
	0x03AF6238 CMP X27, X8
	0x03AF623C B.GE 0x3AF64BC
	0x03AF6240 CMP X27, X28
	0x03AF6244 B.EQ 0x3AF625C
	0x03AF6248 MOV W8, W26

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8ED000
	005 Move W8, [X20+1551]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x664000
	012 Move X0, [X0+72]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1551], W8
	016 Move X0, [X19+448]
	017 Compare X0, 0
	018 JumpIfEqual {28}
	019 Move X8, 0x664000
	020 Move X8, [X8+72]
	021 Move X1, [X19+544]
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X2, [X8]
	025 Move X30, [X31+32]
	026 Call UnityEvent`1<Object>.Invoke, X0, X1
	027 Return 
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return 

Method: System.Void SendOnFocusLost()

Disassembly:
	0x03AF624C CMP X27, X8
	0x03AF6250 B.EQ 0x3AF625C
	0x03AF6254 ADD X27, X27, 0x1
	0x03AF6258 B 0x3AF64B4
	0x03AF625C LDR X8, [X23 + 0x38]
	0x03AF6260 CBZ X8, 0x3AF64EC
	0x03AF6264 LDR X9, [X8 + 0x18]
	0x03AF6268 CMP W21, W9
	0x03AF626C B.CS 0x3AF64F0
	0x03AF6270 AND X10, X9, 0x0
	0x03AF6274 CMP X27, X10
	0x03AF6278 B.CS 0x3AF64F0
	0x03AF627C MOVZ W10, 0x178
	0x03AF6280 SMADDL X11, X21, X10, X8
	0x03AF6284 MADD X10, X27, X10, X8
	0x03AF6288 LDR V11, [X11 + 0x140]
	0x03AF628C LDR V12, [X10 + 0x144]
	0x03AF6290 MOVZ W12, 0x178
	0x03AF6294 CBZ X27, 0x3AF62C8
	0x03AF6298 LDRH W10, [X10 + 0x20]
	0x03AF629C CMP W10, 0xA
	0x03AF62A0 B.NE 0x3AF62C8
	0x03AF62A4 SUB X10, X27, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8ED000
	005 Move W8, [X20+1552]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x664000
	012 Move X0, [X0+72]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1552], W8
	016 Move X0, [X19+456]
	017 Compare X0, 0
	018 JumpIfEqual {28}
	019 Move X8, 0x664000
	020 Move X8, [X8+72]
	021 Move X1, [X19+544]
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X2, [X8]
	025 Move X30, [X31+32]
	026 Call UnityEvent`1<Object>.Invoke, X0, X1
	027 Return 
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return 

Method: System.Void SendOnTextSelection()

Disassembly:
	0x03AF62A8 CMP W10, W9
	0x03AF62AC B.CS 0x3AF64F0
	0x03AF62B0 MADD X9, X10, X12, X8
	0x03AF62B4 LDRH W9, [X9 + 0x20]
	0x03AF62B8 CMP W9, 0xD
	0x03AF62BC B.NE 0x3AF62C8
	0x03AF62C0 MADD X8, X10, X12, X8
	0x03AF62C4 LDR V12, [X8 + 0x144]
	0x03AF62C8 LDR X8, [X23 + 0x50]
	0x03AF62CC CBZ X8, 0x3AF64EC
	0x03AF62D0 LDR W9, [X8 + 0x18]
	0x03AF62D4 CMP W24, W9
	0x03AF62D8 B.CS 0x3AF64F0
	0x03AF62DC CBZ X19, 0x3AF64EC
	0x03AF62E0 MOVZ W9, 0x5C
	0x03AF62E4 SMADDL X8, X24, X9, X8
	0x03AF62E8 LDR V13, [X8 + 0x4C]
	0x03AF62EC LDR V14, [X8 + 0x54]
	0x03AF62F0 MOV X0, X19
	0x03AF62F4 MOV X1, X31
	0x03AF62F8 BL 0x3E498D4
	0x03AF62FC ADD X22, X31, 0x190
	0x03AF6300 LDR V0, [X31 + 0x23]
	0x03AF6304 LDUR V1, [X22 + 0xAC]
	0x03AF6308 LDR X8, [X31 + 0x258]
	0x03AF630C STR S11, [X31 + 0x190]
	0x03AF6310 STR S14, [X31 + 0x194]
	0x03AF6314 STR W31, [X31 + 0x198]
	0x03AF6318 STR V0, [X8]
	0x03AF631C LDP V0, V2, [X31 + 0x200]
	0x03AF6320 STUR V1, [X8 + 0xC]
	0x03AF6324 LDR V1, [X31 + 0x22]
	0x03AF6328 LDR X8, [X31 + 0x38]
	0x03AF632C MOV W21, W0
	0x03AF6330 ADD X1, X31, 0x190
	0x03AF6334 MOV X0, X19
	0x03AF6338 MOV X2, X31
	0x03AF633C STR W20, [X31 + 0x1B8]
	0x03AF6340 STR S8, [X31 + 0x1BC]
	0x03AF6344 STR S9, [X31 + 0x1C0]
	0x03AF6348 STUR D10, [X22 + 0x34]
	0x03AF634C STP V2, V1, [X8 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x8ED000
	009 Move W8, [X20+1553]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x664000
	016 Move X0, [X0+408]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1553], W8
	020 Move X20, [X19+464]
	021 Move W8, 1
	022 Move [X19+744], W8
	023 Compare X20, 0
	024 JumpIfEqual {49}
	025 Move X23, 0x664000
	026 Move X21, [X19+544]
	027 Move W22, [X19+564]
	028 Move X23, [X23+408]
	029 Move X0, X19
	030 Call TMP_InputField.get_compositionLength, X0
	031 Move W24, [X19+568]
	032 Add W22, W0, W22
	033 Move X0, X19
	034 Call TMP_InputField.get_compositionLength, X0
	035 Move X4, [X23]
	036 Add W3, W0, W24
	037 Move X0, X20
	038 Move X1, X21
	039 Move W2, W22
	040 Move X20, [X31+48]
	041 Move X19, [X31+56]
	042 Move X22, [X31+32]
	043 Move X21, [X31+40]
	044 Move X24, [X31+16]
	045 Move X23, [X31+24]
	046 Move X30, [X31+64]
	047 Call 0x272FC14, X0, X1, X2, X3
	048 Return 
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X22, [X31+32]
	052 Move X21, [X31+40]
	053 Move X24, [X31+16]
	054 Move X23, [X31+24]
	055 Move X30, [X31+64]
	056 Return 

Method: System.Void SendOnEndTextSelection()

Disassembly:
	0x03AF6350 STR V0, [X8]
	0x03AF6354 BL 0x3E4A31C
	0x03AF6358 LDUR V0, [X22 + 0xAC]
	0x03AF635C LDR V1, [X31 + 0x23]
	0x03AF6360 LDR X8, [X31 + 0x30]
	0x03AF6364 STR S12, [X31 + 0x120]
	0x03AF6368 STR S14, [X31 + 0x124]
	0x03AF636C STR W31, [X31 + 0x128]
	0x03AF6370 STUR V0, [X8 + 0xC]
	0x03AF6374 LDP V0, V2, [X31 + 0x200]
	0x03AF6378 STR V1, [X8]
	0x03AF637C LDR V1, [X31 + 0x22]
	0x03AF6380 LDR X8, [X31 + 0x28]
	0x03AF6384 ADD X29, X31, 0xB0
	0x03AF6388 ADD X1, X31, 0x120
	0x03AF638C MOV X0, X19
	0x03AF6390 MOV X2, X31
	0x03AF6394 STR W20, [X31 + 0x148]
	0x03AF6398 STR S8, [X31 + 0x14C]
	0x03AF639C STR S9, [X31 + 0x150]
	0x03AF63A0 STUR D10, [X29 + 0xA4]
	0x03AF63A4 STP V2, V1, [X8 + 0x10]
	0x03AF63A8 STR V0, [X8]
	0x03AF63AC BL 0x3E4A31C
	0x03AF63B0 LDUR V0, [X22 + 0xAC]
	0x03AF63B4 LDR V1, [X31 + 0x23]
	0x03AF63B8 LDR X8, [X31 + 0x20]
	0x03AF63BC STP S12, S13, [X31 + 0xB0]
	0x03AF63C0 STR W31, [X31 + 0xB8]
	0x03AF63C4 ADD X1, X31, 0xB0
	0x03AF63C8 STUR V0, [X8 + 0xC]
	0x03AF63CC LDP V0, V2, [X31 + 0x200]
	0x03AF63D0 STR V1, [X8]
	0x03AF63D4 LDR V1, [X31 + 0x22]
	0x03AF63D8 LDR X8, [X31 + 0x18]
	0x03AF63DC MOV X0, X19
	0x03AF63E0 MOV X2, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x8ED000
	008 Move W8, [X20+1554]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x664000
	015 Move X0, [X0+408]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1554], W8
	019 Move W8, [X19+744]
	020 Compare W8, 0
	021 JumpIfEqual {42}
	022 Move X20, [X19+472]
	023 Compare X20, 0
	024 JumpIfEqual {41}
	025 Move X21, [X19+544]
	026 Move W22, [X19+564]
	027 Move X0, X19
	028 Call TMP_InputField.get_compositionLength, X0
	029 Move W23, [X19+568]
	030 Add W22, W0, W22
	031 Move X0, X19
	032 Call TMP_InputField.get_compositionLength, X0
	033 Move X8, 0x664000
	034 Move X8, [X8+408]
	035 Add W3, W0, W23
	036 Move X0, X20
	037 Move X1, X21
	038 Move X4, [X8]
	039 Move W2, W22
	040 Call 0x272FC14, X0, X1, X2, X3
	041 Move [X19+744], W31
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Move X23, [X31+56]
	048 Return 

Method: System.Void SendTouchScreenKeyboardStatusChanged()

Disassembly:
	0x03AF1E68 CMP W8, 0x2
	0x03AF1E6C B.NE 0x3AF1EB8
	0x03AF1E70 LDR X8, [X20 + 0x138]
	0x03AF1E74 CBZ X8, 0x3AF2230
	0x03AF1E78 LDR X8, [X8 + 0x368]
	0x03AF1E7C CBZ X8, 0x3AF2230
	0x03AF1E80 LDR X8, [X8 + 0x38]
	0x03AF1E84 CBZ X8, 0x3AF2230
	0x03AF1E88 LDR W9, [X8 + 0x18]
	0x03AF1E8C CMP W21, W9
	0x03AF1E90 B.CS 0x3AF222C
	0x03AF1E94 MOVZ W9, 0x178
	0x03AF1E98 SMADDL X8, X21, X9, X8
	0x03AF1E9C LDP W9, W8, [X8 + 0x24]
	0x03AF1EA0 ADDS W8, W8, W9
	0x03AF1EA4 STR W8, [X20 + 0x238]
	0x03AF1EA8 B.PL 0x3AF1E38
	0x03AF1EAC ADD X8, X20, 0x234
	0x03AF1EB0 MOVI V0.2D, 0x0
	0x03AF1EB4 STR D0, [X8]
	0x03AF1EB8 FADD S0, S11, S12
	0x03AF1EBC FCMP S0, S8
	0x03AF1EC0 B.LE 0x3AF2004
	0x03AF1EC4 LDR X22, [X20 + 0x138]
	0x03AF1EC8 LDR V8, [X19 + 0x104]
	0x03AF1ECC LDR V9, [X19 + 0x108]
	0x03AF1ED0 MOV X0, X19
	0x03AF1ED4 MOV X1, X31
	0x03AF1ED8 BL 0x3E4F314

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x8F2000
	005 Move W8, [X19+1555]
	006 Move X20, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x669000
	012 Move X0, [X0+360]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X19+1555], W8
	016 Move X19, [X20+488]
	017 Compare X19, 0
	018 JumpIfEqual {34}
	019 Move X0, [X20+256]
	020 Compare X0, 0
	021 JumpIfEqual {38}
	022 Move X20, 0x669000
	023 Move X20, [X20+360]
	024 Move X1, X31
	025 Call TouchScreenKeyboard.get_status, X0
	026 Move X2, [X20]
	027 Move W1, W0
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Call UnityEvent`1<Int32Enum>.Invoke, X0, X1
	033 Return 
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return 
	038 Call 0x1C17F20

Method: System.Void UpdateLabel()

Disassembly:
	0x03AEDBA4 LDR X11, [X11 + 0xC8]
	0x03AEDBA8 ADD X11, X11, X12, 0x3, LSL
	0x03AEDBAC LDUR X11, [X11 - 0x8]
	0x03AEDBB0 CMP X11, X10
	0x03AEDBB4 CSEL X21, X9, X31, EQ
	0x03AEDBB8 LDR X0, [X8]
	0x03AEDBBC LDR W8, [X0 + 0xE0]
	0x03AEDBC0 CBNZ W8, 0x3AEDBC8
	0x03AEDBC4 BL 0x1C16DFC
	0x03AEDBC8 MOV X0, X21
	0x03AEDBCC MOV X1, X31
	0x03AEDBD0 MOV X2, X31
	0x03AEDBD4 BL 0x3C354F8
	0x03AEDBD8 TBZ X0, 0x0, 0x3AEDBF0
	0x03AEDBDC CBZ X21, 0x3AEDC0C
	0x03AEDBE0 MOV X0, X21
	0x03AEDBE4 MOV X1, X19
	0x03AEDBE8 MOV X2, X31
	0x03AEDBEC BL 0x3AF71FC
	0x03AEDBF0 LDR X0, [X20 + 0x138]
	0x03AEDBF4 CBZ X0, 0x3AEDC0C
	0x03AEDBF8 MOV X1, X19
	0x03AEDBFC LDP X20, X19, [X31 + 0x10]
	0x03AEDC00 MOV X2, X31
	0x03AEDC04 LDP X30, X21, [X31], #0x20
	0x03AEDC08 B 0x3AF71FC
	0x03AEDC0C BL 0x1C16F20
	0x03AEDC10 LDRB W0, [X0 + 0x2C8]
	0x03AEDC14 RET
	0x03AEDC18 AND W8, W1, 0x1
	0x03AEDC1C STRB W8, [X0 + 0x2C8]
	0x03AEDC20 RET
	0x03AEDC24 LDRB W0, [X0 + 0x2CA]
	0x03AEDC28 RET
	0x03AEDC2C AND W8, W1, 0x1
	0x03AEDC30 STRB W8, [X0 + 0x2CA]
	0x03AEDC34 RET
	0x03AEDC38 LDRB W0, [X0 + 0x2D8]
	0x03AEDC3C RET
	0x03AEDC40 AND W8, W1, 0x1
	0x03AEDC44 STRB W8, [X0 + 0x2D8]
	0x03AEDC48 RET
	0x03AEDC4C LDRB W0, [X0 + 0x2D9]
	0x03AEDC50 RET
	0x03AEDC54 AND W8, W1, 0x1
	0x03AEDC58 STRB W8, [X0 + 0x2D9]
	0x03AEDC5C RET
	0x03AEDC60 LDR W0, [X0 + 0x180]
	0x03AEDC64 RET
	0x03AEDC68 STR X30, [X31 - 0x30]!
	0x03AEDC6C STP X22, X21, [X31 + 0x10]
	0x03AEDC70 STP X20, X19, [X31 + 0x20]
	0x03AEDC74 ADRP X22, 0x8F5000
	0x03AEDC78 ADRP X21, 0x66C000
	0x03AEDC7C LDRB W8, [X22 + 0x5ED]
	0x03AEDC80 LDR X21, [X21 + 0xA8]
	0x03AEDC84 MOV W20, W1
	0x03AEDC88 MOV X19, X0
	0x03AEDC8C TBNZ X8, 0x0, 0x3AEDCA4
	0x03AEDC90 ADRP X0, 0x66C000
	0x03AEDC94 LDR X0, [X0 + 0xA8]
	0x03AEDC98 BL 0x1C16CF4
	0x03AEDC9C MOVZ W8, 0x1
	0x03AEDCA0 STRB W8, [X22 + 0x5ED]
	0x03AEDCA4 LDR X2, [X21]
	0x03AEDCA8 ADD X0, X19, 0x180
	0x03AEDCAC MOV W1, W20
	0x03AEDCB0 BL 0x2253F10
	0x03AEDCB4 TBZ X0, 0x0, 0x3AEDCCC
	0x03AEDCB8 MOV X0, X19
	0x03AEDCBC LDP X20, X19, [X31 + 0x20]
	0x03AEDCC0 LDP X22, X21, [X31 + 0x10]
	0x03AEDCC4 LDR X30, [X31], #0x30
	0x03AEDCC8 B 0x3AEDCDC
	0x03AEDCCC LDP X20, X19, [X31 + 0x20]
	0x03AEDCD0 LDP X22, X21, [X31 + 0x10]
	0x03AEDCD4 LDR X30, [X31], #0x30
	0x03AEDCD8 RET
	0x03AEDCDC LDR W8, [X0 + 0x180]
	0x03AEDCE0 CMP W8, 0x8
	0x03AEDCE4 B.HI 0x3AEDD94
	0x03AEDCE8 ADRP X10, 0xFFFFFFFFFD0AA000
	0x03AEDCEC ADD X10, X10, 0xBFC
	0x03AEDCF0 ADR X11, 0x18
	0x03AEDCF4 LDRB W12, [X10, X8, LSL]
	0x03AEDCF8 ADD X11, X11, X12, 0x2, LSL
	0x03AEDCFC MOV W9, W31
	0x03AEDD00 MOV W10, W31
	0x03AEDD04 BR X11
	0x03AEDD08 MOV W8, W31
	0x03AEDD0C STR W31, [X0 + 0x190]
	0x03AEDD10 MOVZ W10, 0x2
	0x03AEDD14 MOVZ W9, 0x4
	0x03AEDD18 B 0x3AEDD88
	0x03AEDD1C MOV W8, W31
	0x03AEDD20 STR W31, [X0 + 0x190]
	0x03AEDD24 MOVZ W10, 0x3
	0x03AEDD28 MOVZ W9, 0x2
	0x03AEDD2C B 0x3AEDD88
	0x03AEDD30 MOV W8, W31
	0x03AEDD34 STR W31, [X0 + 0x190]
	0x03AEDD38 MOVZ W10, 0x4
	0x03AEDD3C MOVZ W9, 0x1
	0x03AEDD40 B 0x3AEDD88
	0x03AEDD44 MOV W8, W31
	0x03AEDD48 MOV W9, W31
	0x03AEDD4C STR W31, [X0 + 0x190]
	0x03AEDD50 MOVZ W10, 0x5
	0x03AEDD54 B 0x3AEDD88
	0x03AEDD58 MOV W8, W31
	0x03AEDD5C STR W31, [X0 + 0x190]
	0x03AEDD60 MOVZ W9, 0x7
	0x03AEDD64 MOVZ W10, 0x7
	0x03AEDD68 B 0x3AEDD88
	0x03AEDD6C MOV W9, W31
	0x03AEDD70 MOV W10, W31
	0x03AEDD74 B 0x3AEDD80
	0x03AEDD78 MOVZ W10, 0x1
	0x03AEDD7C MOVZ W9, 0x4
	0x03AEDD80 STR W31, [X0 + 0x190]
	0x03AEDD84 MOVZ W8, 0x2
	0x03AEDD88 STR W8, [X0 + 0x184]
	0x03AEDD8C STR W9, [X0 + 0x18C]
	0x03AEDD90 STR W10, [X0 + 0x198]
	0x03AEDD94 B 0x3AEC538
	0x03AEDD98 LDR W0, [X0 + 0x190]
	0x03AEDD9C RET
	0x03AEDDA0 STR X30, [X31 - 0x30]!
	0x03AEDDA4 STP X22, X21, [X31 + 0x10]
	0x03AEDDA8 STP X20, X19, [X31 + 0x20]
	0x03AEDDAC ADRP X22, 0x8F5000
	0x03AEDDB0 ADRP X21, 0x66C000
	0x03AEDDB4 LDRB W8, [X22 + 0x5EE]
	0x03AEDDB8 LDR X21, [X21 + 0xB0]
	0x03AEDDBC MOV W20, W1
	0x03AEDDC0 MOV X19, X0
	0x03AEDDC4 TBNZ X8, 0x0, 0x3AEDDE8
	0x03AEDDC8 ADRP X0, 0x66C000
	0x03AEDDCC LDR X0, [X0 + 0xB8]
	0x03AEDDD0 BL 0x1C16CF4
	0x03AEDDD4 ADRP X0, 0x66C000
	0x03AEDDD8 LDR X0, [X0 + 0xB0]
	0x03AEDDDC BL 0x1C16CF4
	0x03AEDDE0 MOVZ W8, 0x1
	0x03AEDDE4 STRB W8, [X22 + 0x5EE]
	0x03AEDDE8 LDR X2, [X21]
	0x03AEDDEC ADD X0, X19, 0x190
	0x03AEDDF0 MOV W1, W20
	0x03AEDDF4 BL 0x2253F10
	0x03AEDDF8 TBZ X0, 0x0, 0x3AEDE48
	0x03AEDDFC ADRP X8, 0x66C000
	0x03AEDE00 LDR X8, [X8 + 0xB8]
	0x03AEDE04 MOVZ W1, 0x2
	0x03AEDE08 LDR X0, [X8]
	0x03AEDE0C BL 0x1C16D6C
	0x03AEDE10 CBZ X0, 0x3AEDE58
	0x03AEDE14 LDR W8, [X0 + 0x18]
	0x03AEDE18 MOV X1, X0
	0x03AEDE1C CMP W8, 0x1
	0x03AEDE20 B.LS 0x3AEDE5C
	0x03AEDE24 MOVZ W8, 0x1
	0x03AEDE28 MOV X0, X19
	0x03AEDE2C STR W8, [X1 + 0x24]
	0x03AEDE30 BL 0x3AEDE60
	0x03AEDE34 MOV X0, X19
	0x03AEDE38 LDP X20, X19, [X31 + 0x20]
	0x03AEDE3C LDP X22, X21, [X31 + 0x10]
	0x03AEDE40 LDR X30, [X31], #0x30
	0x03AEDE44 B 0x3AEC538
	0x03AEDE48 LDP X20, X19, [X31 + 0x20]
	0x03AEDE4C LDP X22, X21, [X31 + 0x10]
	0x03AEDE50 LDR X30, [X31], #0x30
	0x03AEDE54 RET
	0x03AEDE58 BL 0x1C16F20
	0x03AEDE5C BL 0x1C16F28
	0x03AEDE60 STR X30, [X31 - 0x10]!
	0x03AEDE64 LDR W8, [X0 + 0x180]
	0x03AEDE68 CMP W8, 0x9
	0x03AEDE6C B.NE 0x3AEDE78
	0x03AEDE70 LDR X30, [X31], #0x10
	0x03AEDE74 RET
	0x03AEDE78 CBZ X1, 0x3AEDEC0
	0x03AEDE7C LDR W9, [X1 + 0x18]
	0x03AEDE80 CMP W9, 0x1
	0x03AEDE84 B.LT 0x3AEDEB0
	0x03AEDE88 MOV W10, W31
	0x03AEDE8C CMP W9, W10
	0x03AEDE90 B.EQ 0x3AEDEBC
	0x03AEDE94 ADD X11, X1, W10, 0x2, SXTW
	0x03AEDE98 LDR W11, [X11 + 0x20]
	0x03AEDE9C CMP W8, W11
	0x03AEDEA0 B.EQ 0x3AEDE70
	0x03AEDEA4 ADD W10, W10, 0x1
	0x03AEDEA8 CMP W9, W10
	0x03AEDEAC B.NE 0x3AEDE8C
	0x03AEDEB0 MOVZ W1, 0x9
	0x03AEDEB4 LDR X30, [X31], #0x10
	0x03AEDEB8 B 0x3AEDC68
	0x03AEDEBC BL 0x1C16F28
	0x03AEDEC0 BL 0x1C16F20
	0x03AEDEC4 LDR W0, [X0 + 0x2DC]
	0x03AEDEC8 RET
	0x03AEDECC STP X30, X21, [X31 - 0x20]!
	0x03AEDED0 STP X20, X19, [X31 + 0x10]
	0x03AEDED4 ADRP X21, 0x8F5000
	0x03AEDED8 LDRB W8, [X21 + 0x5EF]
	0x03AEDEDC MOV W19, W1
	0x03AEDEE0 MOV X20, X0
	0x03AEDEE4 TBNZ X8, 0x0, 0x3AEDEFC
	0x03AEDEE8 ADRP X0, 0x66C000
	0x03AEDEEC LDR X0, [X0 + 0x58]
	0x03AEDEF0 BL 0x1C16CF4
	0x03AEDEF4 MOVZ W8, 0x1
	0x03AEDEF8 STRB W8, [X21 + 0x5EF]
	0x03AEDEFC LDR W8, [X20 + 0x190]
	0x03AEDF00 ADD X0, X20, 0x2DC
	0x03AEDF04 CBZ W8, 0x3AEDF24
	0x03AEDF08 ADRP X8, 0x66C000
	0x03AEDF0C LDR X8, [X8 + 0x58]
	0x03AEDF10 MOV W1, W19
	0x03AEDF14 LDP X20, X19, [X31 + 0x10]
	0x03AEDF18 LDR X2, [X8]
	0x03AEDF1C LDP X30, X21, [X31], #0x20
	0x03AEDF20 B 0x2253EA0
	0x03AEDF24 LDP X20, X19, [X31 + 0x10]
	0x03AEDF28 MOVZ W8, 0x1
	0x03AEDF2C STR W8, [X0]
	0x03AEDF30 LDP X30, X21, [X31], #0x20
	0x03AEDF34 RET
	0x03AEDF38 LDR W0, [X0 + 0x184]
	0x03AEDF3C RET
	0x03AEDF40 STR X30, [X31 - 0x30]!
	0x03AEDF44 STP X22, X21, [X31 + 0x10]
	0x03AEDF48 STP X20, X19, [X31 + 0x20]
	0x03AEDF4C ADRP X22, 0x8F5000
	0x03AEDF50 ADRP X21, 0x66C000
	0x03AEDF54 LDRB W8, [X22 + 0x5F0]
	0x03AEDF58 LDR X21, [X21 + 0xC0]
	0x03AEDF5C MOV W20, W1
	0x03AEDF60 MOV X19, X0
	0x03AEDF64 TBNZ X8, 0x0, 0x3AEDF7C
	0x03AEDF68 ADRP X0, 0x66C000
	0x03AEDF6C LDR X0, [X0 + 0xC0]
	0x03AEDF70 BL 0x1C16CF4
	0x03AEDF74 MOVZ W8, 0x1
	0x03AEDF78 STRB W8, [X22 + 0x5F0]
	0x03AEDF7C LDR X2, [X21]
	0x03AEDF80 ADD X0, X19, 0x184
	0x03AEDF84 MOV W1, W20
	0x03AEDF88 BL 0x2253F10
	0x03AEDF8C TBZ X0, 0x0, 0x3AEDF9C
	0x03AEDF90 LDR W8, [X19 + 0x180]
	0x03AEDF94 CMP W8, 0x9
	0x03AEDF98 B.NE 0x3AEDFAC
	0x03AEDF9C LDP X20, X19, [X31 + 0x20]
	0x03AEDFA0 LDP X22, X21, [X31 + 0x10]
	0x03AEDFA4 LDR X30, [X31], #0x30
	0x03AEDFA8 RET
	0x03AEDFAC MOV X0, X19
	0x03AEDFB0 LDP X20, X19, [X31 + 0x20]
	0x03AEDFB4 LDP X22, X21, [X31 + 0x10]
	0x03AEDFB8 MOVZ W1, 0x9
	0x03AEDFBC LDR X30, [X31], #0x30
	0x03AEDFC0 B 0x3AEDC68
	0x03AEDFC4 LDR W8, [X0 + 0x180]
	0x03AEDFC8 CMP W8, 0x9
	0x03AEDFCC B.NE 0x3AEDFD4
	0x03AEDFD0 RET
	0x03AEDFD4 MOVZ W1, 0x9
	0x03AEDFD8 B 0x3AEDC68
	0x03AEDFDC LDR W0, [X0 + 0x18C]
	0x03AEDFE0 RET
	0x03AEDFE4 STR X30, [X31 - 0x30]!
	0x03AEDFE8 STP X22, X21, [X31 + 0x10]
	0x03AEDFEC STP X20, X19, [X31 + 0x20]
	0x03AEDFF0 ADRP X22, 0x8F5000
	0x03AEDFF4 ADRP X21, 0x66C000
	0x03AEDFF8 LDRB W8, [X22 + 0x5F1]
	0x03AEDFFC LDR X21, [X21 + 0xC8]
	0x03AEE000 MOV W20, W1
	0x03AEE004 MOV X19, X0
	0x03AEE008 TBNZ X8, 0x0, 0x3AEE020
	0x03AEE00C ADRP X0, 0x66B000
	0x03AEE010 LDR X0, [X0 + 0xC8]
	0x03AEE014 BL 0x1C16CF4
	0x03AEE018 MOVZ W8, 0x1
	0x03AEE01C STRB W8, [X22 + 0x5F1]
	0x03AEE020 LDR X2, [X21]
	0x03AEE024 ADD X0, X19, 0x18C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x8F6000
	008 Move X23, 0x607000
	009 Move W8, [X20+1556]
	010 Move X23, [X23+1432]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0x60A000
	017 Move X0, [X0+2336]
	018 Call 0x1C17CF4
	019 Move X0, 0x607000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move X0, 0x607000
	023 Move X0, [X0+2760]
	024 Call 0x1C17CF4
	025 Move X0, 0x66D000
	026 Move X0, [X0+48]
	027 Call 0x1C17CF4
	028 Move X0, 0x66D000
	029 Move X0, [X0+56]
	030 Call 0x1C17CF4
	031 Move X0, 0x66D000
	032 Move X0, [X0+64]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+1556], W8
	036 Move X0, [X23]
	037 Move X20, [X19+312]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Inequality, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {323}
	050 Move X8, [X19+312]
	051 Compare X8, 0
	052 JumpIfEqual {330}
	053 Move X0, [X23]
	054 Move X20, [X8+248]
	055 Move W9, [X0+224]
	056 Compare W9, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, X20
	060 Move X1, X31
	061 Move X2, X31
	062 Call Object.op_Inequality, X0, X1
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {323}
	067 Move W8, [X19+680]
	068 Compare W8, 0
	069 JumpIfNotEqual {323}
	070 Move W8, 1
	071 Move X0, X19
	072 Move [X19+680], W8
	073 Call TMP_InputField.get_compositionLength, X0
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move W8, [X19+560]
	076 Compare W8, 0
	077 JumpIfEqual {81}
	078 Move X21, [X19+544]
	079 Move W8, 256
	080 NotImplemented "Instruction STRH not yet implemented."
	081 Move X0, X19
	082 Call TMP_InputField.Delete, X0
	083 Move W8, [X19+561]
	084 Compare W8, 0
	085 JumpIfEqual {132}
	086 Move X8, 0x607000
	087 Move X8, [X8+2760]
	088 Move W1, 5
	089 Move X0, [X8]
	090 Call 0x1C17D6C
	091 Move X8, [X19+544]
	092 Compare X8, 0
	093 JumpIfEqual {330}
	094 Move W2, [X19+564]
	095 Move X20, X0
	096 Move X0, X8
	097 Move W1, W31
	098 Move X3, X31
	099 Call String.Substring, X0, X1, X2
	100 Compare X20, 0
	101 JumpIfEqual {330}
	102 Move W8, [X20+24]
	103 Compare W8, 0
	104 JumpIfEqual {331}
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move [X20+32], X0
	107 Move X8, 0x66D000
	108 Move X8, [X8+56]
	109 Move X8, [X8]
	110 Move [X20+40], X8
	111 Call TMP_InputField.get_compositionString, X0
	112 Move W8, [X20+24]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move [X20+48], X0
	116 Move X8, 0x66D000
	117 Move X8, [X8+64]
	118 Move X8, [X8]
	119 Move [X20+56], X8
	120 Move X0, [X19+544]
	121 Compare X0, 0
	122 JumpIfEqual {330}
	123 Move W1, [X19+564]
	124 Move X2, X31
	125 Call String.Substring, X0, X1
	126 Move W8, [X20+24]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move [X20+64], X0
	129 Move X0, X20
	130 Move X1, X31
	131 Call String.Concat, X0
	132 Move X0, [X19+544]
	133 Compare X0, 0
	134 JumpIfEqual {330}
	135 Move W2, [X19+564]
	136 Move W1, W31
	137 Move X3, X31
	138 Call String.Substring, X0, X1, X2
	139 Move X20, X0
	140 Call TMP_InputField.get_compositionString, X0
	141 Move X8, [X19+544]
	142 Compare X8, 0
	143 JumpIfEqual {330}
	144 Move W1, [X19+564]
	145 Move X21, X0
	146 Move X0, X8
	147 Move X2, X31
	148 Call String.Substring, X0, X1
	149 Move X2, X0
	150 Move X0, X20
	151 Move X1, X21
	152 Move X3, X31
	153 Call String.Concat, X0, X1, X2
	154 Move W8, 1
	155 Move X21, X0
	156 Move [X19+696], W8
	157 Move W8, [X19+388]
	158 Move X20, X21
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Compare X21, 0
	161 JumpIfEqual {330}
	162 Move W2, [X21+16]
	163 NotImplemented "Instruction LDRH not yet implemented."
	164 Move X0, X31
	165 Move X3, X31
	166 Call String.CreateString, X0, X1, X2
	167 Move X20, X0
	168 Move X0, X21
	169 Move X1, X31
	170 Call String.IsNullOrEmpty, X0
	171 Move X8, [X23]
	172 Move X22, [X19+328]
	173 Move W21, W0
	174 Move W9, [X8+224]
	175 Compare W9, 0
	176 JumpIfNotEqual {179}
	177 Move X0, X8
	178 Call 0x1C17DFC
	179 Move X0, X22
	180 Move X1, X31
	181 Move X2, X31
	182 Call Object.op_Inequality, X0, X1
	183 Move TEMP, X0
	184 And TEMP, TEMP, 1
	185 Compare TEMP, 1
	186 JumpIfNotEqual {193}
	187 Move X0, [X19+328]
	188 Compare X0, 0
	189 JumpIfEqual {330}
	190 And W1, W21, 1
	191 Move X2, X31
	192 Call Behaviour.set_enabled, X0, X1
	193 Move TEMP, X21
	194 And TEMP, TEMP, 1
	195 Compare TEMP, 1
	196 JumpIfEqual {202}
	197 Move W8, [X19+560]
	198 Compare W8, 0
	199 JumpIfNotEqual {202}
	200 Move X0, X19
	201 Call TMP_InputField.SetCaretVisible, X0
	202 Move X22, 0x66D000
	203 Move X21, [X19+312]
	204 Move X22, [X22+48]
	205 Move X0, X20
	206 Move X2, X31
	207 Move X1, [X22]
	208 Call String.Concat, X0, X1
	209 Compare X21, 0
	210 JumpIfEqual {330}
	211 Move X8, [X21]
	212 Move X1, X0
	213 Move X0, X21
	214 Move X9, [X8+1368]
	215 Move X2, [X8+1376]
	216 NotImplemented "Instruction BLR not yet implemented."
	217 Move W8, [X19+352]
	218 Compare W8, 0
	219 JumpIfEqual {231}
	220 Move X8, 0x60A000
	221 Move X8, [X8+2336]
	222 Move X21, [X19+264]
	223 Move X0, [X8]
	224 Move W8, [X0+224]
	225 Compare W8, 0
	226 JumpIfNotEqual {228}
	227 Call 0x1C17DFC
	228 Move X0, X21
	229 Move X1, X31
	230 Call LayoutRebuilder.MarkLayoutForRebuild, X0
	231 Move W8, [X19+732]
	232 NotImplemented "Instruction CMP not yet implemented."
	233 Move X0, [X19+312]
	234 Compare X0, 0
	235 JumpIfEqual {330}
	236 Move X8, [X0]
	237 Move W1, W31
	238 Move W2, W31
	239 Move X9, [X8+2008]
	240 Move X3, [X8+2016]
	241 NotImplemented "Instruction BLR not yet implemented."
	242 Move X8, [X19+312]
	243 Compare X8, 0
	244 JumpIfEqual {330}
	245 Move X8, [X8+872]
	246 Compare X8, 0
	247 JumpIfEqual {294}
	248 Move W9, [X8+44]
	249 Move W10, [X19+732]
	250 NotImplemented "Instruction CMP not yet implemented."
	251 Move X9, [X8+80]
	252 Compare X9, 0
	253 JumpIfEqual {330}
	254 Move W11, [X9+24]
	255 Subtract W10, W10, 1
	256 NotImplemented "Instruction CMP not yet implemented."
	257 Move X8, [X8+56]
	258 Compare X8, 0
	259 JumpIfEqual {330}
	260 Move W11, 92
	261 NotImplemented "Instruction SMADDL not yet implemented."
	262 NotImplemented "Instruction LDRSW not yet implemented."
	263 Move W10, [X8+24]
	264 NotImplemented "Instruction CMP not yet implemented."
	265 Compare X20, 0
	266 JumpIfEqual {330}
	267 Move W10, 376
	268 NotImplemented "Instruction MADD not yet implemented."
	269 Move W9, [X8+36]
	270 Move W8, [X8+40]
	271 Move W10, [X20+16]
	272 Move X0, X20
	273 Move X3, X31
	274 Add W1, W8, W9
	275 Subtract W2, W10, W1
	276 Call String.Remove, X0, X1, X2
	277 Move X1, X0
	278 Move W2, 1
	279 Move X0, X19
	280 Call TMP_InputField.SetText, X0, X1, X2
	281 Move X0, [X19+544]
	282 Move X1, [X22]
	283 Move X20, [X19+312]
	284 Move X2, X31
	285 Call String.Concat, X0, X1
	286 Compare X20, 0
	287 JumpIfEqual {330}
	288 Move X8, [X20]
	289 Move X1, X0
	290 Move X0, X20
	291 Move X9, [X8+1368]
	292 Move X2, [X8+1376]
	293 NotImplemented "Instruction BLR not yet implemented."
	294 Move W8, [X19+682]
	295 Compare W8, 0
	296 JumpIfNotEqual {310}
	297 Move X0, [X23]
	298 Move X20, [X19+336]
	299 Move W8, [X0+224]
	300 Compare W8, 0
	301 JumpIfNotEqual {303}
	302 Call 0x1C17DFC
	303 Move X0, X20
	304 Move X1, X31
	305 Call Object.op_Implicit, X0
	306 Move TEMP, X0
	307 And TEMP, TEMP, 1
	308 Compare TEMP, 1
	309 JumpIfNotEqual {320}
	310 Move X0, [X19+312]
	311 Move [X19+682], W31
	312 Compare X0, 0
	313 JumpIfEqual {330}
	314 Move X8, [X0]
	315 Move W1, W31
	316 Move W2, W31
	317 Move X9, [X8+2008]
	318 Move X3, [X8+2016]
	319 NotImplemented "Instruction BLR not yet implemented."
	320 Move X0, X19
	321 Call TMP_InputField.MarkGeometryAsDirty, X0
	322 Move [X19+680], W31
	323 Move X20, [X31+32]
	324 Move X19, [X31+40]
	325 Move X22, [X31+16]
	326 Move X21, [X31+24]
	327 Move X30, [X31+48]
	328 Move X23, [X31+56]
	329 Return 
	330 Call 0x1C17F20
	331 Call 0x1C17F28

Method: System.Void UpdateScrollbar()

Disassembly:
	0x03AF0964 B.LT 0x3AF098C
	0x03AF0968 LDR X0, [X19 + 0x220]
	0x03AF096C CBZ X0, 0x3AF0A5C
	0x03AF0970 LDR W8, [X0 + 0x10]
	0x03AF0974 CMP W8, W2
	0x03AF0978 B.LE 0x3AF098C
	0x03AF097C MOV W1, W31
	0x03AF0980 MOV X3, X31
	0x03AF0984 BL 0x3228DE4
	0x03AF0988 STR X0, [X19 + 0x220]
	0x03AF098C MOV X0, X19
	0x03AF0990 BL 0x3AF02B4
	0x03AF0994 LDR X0, [X19 + 0x220]
	0x03AF0998 MOV X1, X20
	0x03AF099C MOV X2, X31
	0x03AF09A0 BL 0x3226EF8
	0x03AF09A4 TBZ X0, 0x0, 0x3AF09BC
	0x03AF09A8 LDR X0, [X19 + 0x100]
	0x03AF09AC CBZ X0, 0x3AF0A5C
	0x03AF09B0 LDR X1, [X19 + 0x220]
	0x03AF09B4 MOV X2, X31
	0x03AF09B8 BL 0x3C3CF58
	0x03AF09BC MOV X0, X19
	0x03AF09C0 BL 0x3AECBA4
	0x03AF09C4 MOV X0, X19
	0x03AF09C8 BL 0x3AED028
	0x03AF09CC LDR X0, [X19 + 0x100]
	0x03AF09D0 CBZ X0, 0x3AF0A48
	0x03AF09D4 MOV X1, X31
	0x03AF09D8 BL 0x3C3D058
	0x03AF09DC CBZ W0, 0x3AF0A48
	0x03AF09E0 LDR X0, [X19 + 0x100]
	0x03AF09E4 CBZ X0, 0x3AF0A5C
	0x03AF09E8 MOV X1, X31
	0x03AF09EC BL 0x3C3D058
	0x03AF09F0 CMP W0, 0x2
	0x03AF09F4 B.NE 0x3AF0A30
	0x03AF09F8 MOVZ W8, 0x1
	0x03AF09FC STRB W8, [X19 + 0x298]
	0x03AF0A00 B 0x3AF0A30
	0x03AF0A04 LDR X0, [X19 + 0x100]
	0x03AF0A08 CBZ X0, 0x3AF0A5C
	0x03AF0A0C LDR X1, [X19 + 0x220]
	0x03AF0A10 MOV X2, X31
	0x03AF0A14 BL 0x3C3CF58
	0x03AF0A18 LDR X8, [X19]
	0x03AF0A1C MOV X0, X19
	0x03AF0A20 MOV X1, X31
	0x03AF0A24 LDR X9, [X8 + 0x5C8]
	0x03AF0A28 LDR X2, [X8 + 0x5D0]
	0x03AF0A2C BLR X9
	0x03AF0A30 LDR X8, [X19]
	0x03AF0A34 MOV X0, X19
	0x03AF0A38 MOV X1, X31

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8F3000
	007 Move X20, 0x604000
	008 Move W8, [X21+1557]
	009 Move X20, [X20+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x604000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1557], W8
	020 Move X0, [X20]
	021 Move X20, [X19+336]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Call Object.op_Implicit, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {66}
	033 Move X0, [X19+272]
	034 Compare X0, 0
	035 JumpIfEqual {72}
	036 Move X1, X31
	037 Call RectTransform.get_rect, X0
	038 Move X0, [X19+312]
	039 Compare X0, 0
	040 JumpIfEqual {72}
	041 Move X8, [X0]
	042 Move V8, V3
	043 Move X9, [X8+1672]
	044 Move X1, [X8+1680]
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move X0, [X19+336]
	047 Compare X0, 0
	048 JumpIfEqual {72}
	049 NotImplemented "Instruction FDIV not yet implemented."
	050 Move X1, X31
	051 Call Scrollbar.set_size, X0, V0
	052 Move X20, [X19+336]
	053 Move X0, X19
	054 Call TMP_InputField.GetScrollPositionRelativeToViewport, X0
	055 Compare X20, 0
	056 JumpIfEqual {72}
	057 Move X0, X20
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X30, [X31+16]
	061 Move X21, [X31+24]
	062 Move X1, X31
	063 Move V8, [X31+48]
	064 Call Scrollbar.set_value, X0, V0
	065 Return 
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X30, [X31+16]
	069 Move X21, [X31+24]
	070 Move V8, [X31+48]
	071 Return 
	072 Call 0x1C17F20

Method: System.Void OnScrollbarValueChange(System.Single value)

Disassembly:
	0x03AF63E4 STR W20, [X31 + 0xD8]
	0x03AF63E8 STP S8, S9, [X31 + 0xDC]
	0x03AF63EC STUR D10, [X29 + 0x34]
	0x03AF63F0 STP V2, V1, [X8 + 0x10]
	0x03AF63F4 STR V0, [X8]
	0x03AF63F8 BL 0x3E4A31C
	0x03AF63FC LDUR V0, [X22 + 0xAC]
	0x03AF6400 LDR V1, [X31 + 0x23]
	0x03AF6404 LDR X8, [X31 + 0x10]
	0x03AF6408 STP S11, S13, [X31 + 0x40]
	0x03AF640C STR W31, [X31 + 0x48]
	0x03AF6410 ADD X1, X31, 0x40
	0x03AF6414 STUR V0, [X8 + 0xC]
	0x03AF6418 LDP V0, V2, [X31 + 0x200]
	0x03AF641C STR V1, [X8]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move V8, V0
	006 Move S0, 1
	007 NotImplemented "Instruction FCMP not yet implemented."
	008 Move V0, V8
	009 Move X19, X0
	010 Call TMP_InputField.AdjustTextPositionRelativeToViewport, X0, V0
	011 Move [X19+376], S8
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Move V8, [X31+32]
	015 Return 

Method: System.Void UpdateMaskRegions()

Disassembly:
	0x03AF02DC STR X0, [X31 + 0x8]

ISIL:
	001 Return 

Method: System.Void AdjustTextPositionRelativeToViewport(System.Single relativePosition)

Disassembly:
	0x03AF4B2C TBNZ X20, 0x0, 0x3AF4B80
	0x03AF4B30 LDR W23, [X19 + 0x23C]
	0x03AF4B34 MOV X0, X19
	0x03AF4B38 ADD X22, X19, 0x23C
	0x03AF4B3C BL 0x3AEC28C
	0x03AF4B40 LDR W24, [X19 + 0x240]
	0x03AF4B44 ADD W25, W0, W23
	0x03AF4B48 MOV X0, X19
	0x03AF4B4C ADD X23, X19, 0x240
	0x03AF4B50 BL 0x3AEC28C
	0x03AF4B54 ADD W8, W0, W24
	0x03AF4B58 CMP W25, W8
	0x03AF4B5C CSEL W24, W25, W8, GT
	0x03AF4B60 MOV X0, X19
	0x03AF4B64 MOV X1, X23
	0x03AF4B68 STR W24, [X19 + 0x240]
	0x03AF4B6C BL 0x3AEE318
	0x03AF4B70 MOV X0, X19
	0x03AF4B74 MOV X1, X22
	0x03AF4B78 STR W24, [X19 + 0x23C]
	0x03AF4B7C BL 0x3AEE318
	0x03AF4B80 LDR W8, [X19 + 0x190]
	0x03AF4B84 SUB W8, W8, 0x1
	0x03AF4B88 CMP W8, 0x2
	0x03AF4B8C B.CS 0x3AF4BFC
	0x03AF4B90 LDR W22, [X19 + 0x240]
	0x03AF4B94 MOV X0, X19
	0x03AF4B98 BL 0x3AEC28C
	0x03AF4B9C ADD W1, W0, W22
	0x03AF4BA0 AND W2, W21, 0x1
	0x03AF4BA4 MOV X0, X19
	0x03AF4BA8 BL 0x3AF42D0
	0x03AF4BAC MOV W21, W0
	0x03AF4BB0 TBZ X20, 0x0, 0x3AF4C18
	0x03AF4BB4 ADD X1, X19, 0x240
	0x03AF4BB8 MOV X0, X19
	0x03AF4BBC STR W21, [X19 + 0x240]
	0x03AF4BC0 BL 0x3AEE318
	0x03AF4BC4 LDR W20, [X19 + 0x240]
	0x03AF4BC8 MOV X0, X19
	0x03AF4BCC BL 0x3AEC28C
	0x03AF4BD0 ADD W1, W0, W20
	0x03AF4BD4 MOV X0, X19
	0x03AF4BD8 BL 0x3AEFC5C
	0x03AF4BDC STR W0, [X19 + 0x238]
	0x03AF4BE0 TBNZ X0, 0x1F, 0x3AF4C84
	0x03AF4BE4 LDR X8, [X19 + 0x220]
	0x03AF4BE8 CBZ X8, 0x3AF4D94
	0x03AF4BEC LDR W8, [X8 + 0x10]
	0x03AF4BF0 CMP W8, W0
	0x03AF4BF4 B.LT 0x3AF4C94
	0x03AF4BF8 B 0x3AF4C98
	0x03AF4BFC LDR X8, [X19 + 0x138]
	0x03AF4C00 CBZ X8, 0x3AF4D94
	0x03AF4C04 LDR X8, [X8 + 0x368]
	0x03AF4C08 CBZ X8, 0x3AF4D94
	0x03AF4C0C LDR W8, [X8 + 0x18]
	0x03AF4C10 SUB W21, W8, 0x1
	0x03AF4C14 TBNZ X20, 0x0, 0x3AF4BB4
	0x03AF4C18 ADD X1, X19, 0x23C
	0x03AF4C1C MOV X0, X19
	0x03AF4C20 STR W21, [X19 + 0x23C]
	0x03AF4C24 BL 0x3AEE318
	0x03AF4C28 ADD X1, X19, 0x240
	0x03AF4C2C MOV X0, X19
	0x03AF4C30 STR W21, [X19 + 0x240]
	0x03AF4C34 BL 0x3AEE318
	0x03AF4C38 LDR W20, [X19 + 0x240]
	0x03AF4C3C MOV X0, X19
	0x03AF4C40 BL 0x3AEC28C
	0x03AF4C44 ADD W1, W0, W20
	0x03AF4C48 MOV X0, X19
	0x03AF4C4C BL 0x3AEFC5C
	0x03AF4C50 STR W0, [X19 + 0x234]
	0x03AF4C54 TBNZ X0, 0x1F, 0x3AF4C8C
	0x03AF4C58 LDR X8, [X19 + 0x220]
	0x03AF4C5C CBZ X8, 0x3AF4D94
	0x03AF4C60 LDR W9, [X8 + 0x10]
	0x03AF4C64 CMP W9, W0
	0x03AF4C68 B.GE 0x3AF4C70
	0x03AF4C6C STR W9, [X19 + 0x234]
	0x03AF4C70 STR W0, [X19 + 0x238]
	0x03AF4C74 LDR W8, [X8 + 0x10]
	0x03AF4C78 CMP W8, W0
	0x03AF4C7C CSEL W8, W8, W0, LT
	0x03AF4C80 B 0x3AF4C94
	0x03AF4C84 MOV W8, W31
	0x03AF4C88 B 0x3AF4C94
	0x03AF4C8C MOV W8, W31
	0x03AF4C90 STR W31, [X19 + 0x234]
	0x03AF4C94 STR W8, [X19 + 0x238]
	0x03AF4C98 LDR W8, [X19 + 0x190]
	0x03AF4C9C CBZ W8, 0x3AF4D70
	0x03AF4CA0 LDR X0, [X19 + 0x110]
	0x03AF4CA4 CBZ X0, 0x3AF4D94
	0x03AF4CA8 MOV X1, X31
	0x03AF4CAC BL 0x3C3E51C
	0x03AF4CB0 LDR X0, [X19 + 0x138]
	0x03AF4CB4 CBZ X0, 0x3AF4D94
	0x03AF4CB8 MOV X1, X31
	0x03AF4CBC MOV V8.16B, V3.16B
	0x03AF4CC0 BL 0x3AF8E0C

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], D11
	003 Move [X31+40], D10
	004 Move [X31+48], D9
	005 Move [X31+56], D8
	006 Move [X31+64], X30
	007 Move [X31+72], X21
	008 Move [X31+80], X20
	009 Move [X31+88], X19
	010 Move X21, 0x8EF000
	011 Move X20, 0x600000
	012 Move W8, [X21+1558]
	013 Move X20, [X20+1432]
	014 Move V8, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x600000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1558], W8
	025 Move X0, [X20]
	026 Move X20, [X19+272]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {109}
	039 Move X0, [X19+312]
	040 Compare X0, 0
	041 JumpIfEqual {119}
	042 Move X8, [X0+872]
	043 Compare X8, 0
	044 JumpIfEqual {109}
	045 Move X9, [X8+80]
	046 Compare X9, 0
	047 JumpIfEqual {109}
	048 Move W8, [X8+44]
	049 Compare W8, 0
	050 JumpIfEqual {109}
	051 Move W9, [X9+24]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X8, [X0]
	054 Move X9, [X8+1672]
	055 Move X1, [X8+1680]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Move X0, [X19+312]
	058 Compare X0, 0
	059 JumpIfEqual {119}
	060 Move W8, [X0+624]
	061 Move V9, V0
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move S11, W31
	066 NotImplemented "Instruction CMP not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move S11, W31
	069 Move S11, 1
	070 Add X8, X31, 8
	071 Move X1, X31
	072 Call TMP_Text.get_bounds, X0
	073 Move X0, [X19+312]
	074 Compare X0, 0
	075 JumpIfEqual {119}
	076 Move V0, [X31+24]
	077 Add S9, S0, S0
	078 Move S11, 0.5
	079 Move X1, X31
	080 Call TMP_Text.get_rectTransform, X0
	081 Move X8, [X19+312]
	082 Compare X8, 0
	083 JumpIfEqual {119}
	084 Move X20, X0
	085 Move X0, X8
	086 Move X1, X31
	087 Call TMP_Text.get_rectTransform, X0
	088 Compare X0, 0
	089 JumpIfEqual {119}
	090 Move X1, X31
	091 Call RectTransform.get_anchoredPosition, X0
	092 Move X0, [X19+272]
	093 Compare X0, 0
	094 JumpIfEqual {119}
	095 Move X1, X31
	096 Move V10, V0
	097 Call RectTransform.get_rect, X0
	098 Compare X20, 0
	099 JumpIfEqual {119}
	100 Subtract S0, S9, S3
	101 Subtract S1, S8, S11
	102 Multiply S1, S1, S0
	103 Move X0, X20
	104 Move V0, V10
	105 Move X1, X31
	106 Call RectTransform.set_anchoredPosition, X0, X1
	107 Move X0, X19
	108 Call TMP_InputField.AssignPositioningIfNeeded, X0
	109 Move X20, [X31+80]
	110 Move X19, [X31+88]
	111 Move X30, [X31+64]
	112 Move X21, [X31+72]
	113 Move D9, [X31+48]
	114 Move D8, [X31+56]
	115 Move D11, [X31+32]
	116 Move D10, [X31+40]
	117 Add X31, X31, 96
	118 Return 
	119 Call 0x1C17F20

Method: System.Int32 GetCaretPositionFromStringIndex(System.Int32 stringIndex)

Disassembly:
	0x03AF08F4 STRH W0, [X31 + 0xC]
	0x03AF08F8 AND W8, W3, 0xFFFF
	0x03AF08FC CMP W8, 0xA
	0x03AF0900 B.NE 0x3AF0910
	0x03AF0904 LDR W8, [X19 + 0x190]
	0x03AF0908 CMP W8, 0x1
	0x03AF090C B.EQ 0x3AF0A04
	0x03AF0910 ANDS W31, W3, 0xFFFF
	0x03AF0914 B.EQ 0x3AF094C
	0x03AF0918 LDR X0, [X24]
	0x03AF091C LDR X22, [X19 + 0x220]
	0x03AF0920 LDR W8, [X0 + 0xE0]
	0x03AF0924 CBNZ W8, 0x3AF092C
	0x03AF0928 BL 0x1C16DFC
	0x03AF092C ADD X0, X31, 0xC
	0x03AF0930 MOV X1, X31
	0x03AF0934 BL 0x330A76C
	0x03AF0938 MOV X1, X0
	0x03AF093C MOV X0, X22
	0x03AF0940 MOV X2, X31
	0x03AF0944 BL 0x321B938
	0x03AF0948 STR X0, [X19 + 0x220]
	0x03AF094C LDR W8, [X20 + 0x10]
	0x03AF0950 ADD W21, W21, 0x1
	0x03AF0954 CMP W21, W8
	0x03AF0958 B.LT 0x3AF0888
	0x03AF095C LDR W2, [X19 + 0x1AC]
	0x03AF0960 CMP W2, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+312]
	003 Compare X8, 0
	004 JumpIfEqual {26}
	005 Move X8, [X8+872]
	006 Compare X8, 0
	007 JumpIfEqual {26}
	008 Move W0, [X8+24]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X8, [X8+56]
	011 Compare X8, 0
	012 JumpIfEqual {26}
	013 Move W10, [X8+24]
	014 Move W9, W31
	015 Move W11, 376
	016 NotImplemented "Instruction CMP not yet implemented."
	017 NotImplemented "Instruction SMADDL not yet implemented."
	018 Move W12, [X12+36]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Add W9, W9, 1
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W0, W9
	023 Move X30, [X31+16]
	024 Return X0
	025 Call 0x1C17F28
	026 Call 0x1C17F20

Method: System.Int32 GetMinCaretPositionFromStringIndex(System.Int32 stringIndex)

Disassembly:
	0x03AF6420 LDR V1, [X31 + 0x22]
	0x03AF6424 LDR X8, [X31 + 0x8]
	0x03AF6428 MOV X0, X19
	0x03AF642C MOV X2, X31
	0x03AF6430 STR W20, [X31 + 0x68]
	0x03AF6434 STP S8, S9, [X31 + 0x6C]
	0x03AF6438 STUR D10, [X31 + 0x74]
	0x03AF643C STP V2, V1, [X8 + 0x10]
	0x03AF6440 STR V0, [X8]
	0x03AF6444 BL 0x3E4A31C
	0x03AF6448 ADD W22, W21, 0x2
	0x03AF644C ADD W2, W21, 0x1
	0x03AF6450 MOV X0, X19
	0x03AF6454 MOV W1, W21
	0x03AF6458 MOV W3, W22
	0x03AF645C MOV X4, X31
	0x03AF6460 BL 0x3E39B84
	0x03AF6464 ADD W2, W21, 0x3
	0x03AF6468 MOV X0, X19
	0x03AF646C MOV W1, W22
	0x03AF6470 MOV W3, W21
	0x03AF6474 MOV X4, X31
	0x03AF6478 BL 0x3E39B84
	0x03AF647C LDR W8, [X23 + 0x2C]
	0x03AF6480 ADD X27, X27, 0x1
	0x03AF6484 ADD W24, W24, 0x1
	0x03AF6488 MOV W21, W27
	0x03AF648C CMP W24, W8
	0x03AF6490 B.GE 0x3AF64B4

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+312]
	003 Compare X8, 0
	004 JumpIfEqual {28}
	005 Move X8, [X8+872]
	006 Compare X8, 0
	007 JumpIfEqual {28}
	008 Move W0, [X8+24]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X8, [X8+56]
	011 Compare X8, 0
	012 JumpIfEqual {28}
	013 Move W10, [X8+24]
	014 Move W9, W31
	015 Move W11, 376
	016 NotImplemented "Instruction CMP not yet implemented."
	017 NotImplemented "Instruction SMADDL not yet implemented."
	018 Move W13, [X12+36]
	019 Move W12, [X12+40]
	020 Add W12, W12, W13
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Add W9, W9, 1
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W0, W9
	025 Move X30, [X31+16]
	026 Return X0
	027 Call 0x1C17F28
	028 Call 0x1C17F20

Method: System.Int32 GetMaxCaretPositionFromStringIndex(System.Int32 stringIndex)

Disassembly:
	0x03AF6494 LDR X8, [X23 + 0x50]
	0x03AF6498 CBZ X8, 0x3AF64EC
	0x03AF649C LDR W9, [X8 + 0x18]
	0x03AF64A0 CMP W24, W9
	0x03AF64A4 B.CS 0x3AF64F0
	0x03AF64A8 MOVZ W9, 0x5C
	0x03AF64AC SMADDL X8, X24, X9, X8
	0x03AF64B0 LDR W26, [X8 + 0x3C]
	0x03AF64B4 CMP X27, X25
	0x03AF64B8 B.NE 0x3AF6234
	0x03AF64BC ADD X31, X31, 0x250
	0x03AF64C0 LDP X20, X19, [X31 + 0x90]
	0x03AF64C4 LDP X22, X21, [X31 + 0x80]
	0x03AF64C8 LDP X24, X23, [X31 + 0x70]
	0x03AF64CC LDP X26, X25, [X31 + 0x60]
	0x03AF64D0 LDP X28, X27, [X31 + 0x50]
	0x03AF64D4 LDP X29, X30, [X31 + 0x40]
	0x03AF64D8 LDP D9, D8, [X31 + 0x30]
	0x03AF64DC LDP D11, D10, [X31 + 0x20]
	0x03AF64E0 LDP D13, D12, [X31 + 0x10]
	0x03AF64E4 LDR V14, [X31], #0xA0
	0x03AF64E8 RET
	0x03AF64EC BL 0x1C16F20
	0x03AF64F0 BL 0x1C16F28
	0x03AF64F4 SUB X31, X31, 0xC0
	0x03AF64F8 STP X30, X27, [X31 + 0x70]
	0x03AF64FC STP X26, X25, [X31 + 0x80]
	0x03AF6500 STP X24, X23, [X31 + 0x90]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+312]
	003 Compare X8, 0
	004 JumpIfEqual {26}
	005 Move X8, [X8+872]
	006 Compare X8, 0
	007 JumpIfEqual {26}
	008 Move W0, [X8+24]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X8, [X8+56]
	011 Compare X8, 0
	012 JumpIfEqual {26}
	013 Move W10, [X8+24]
	014 Move W9, W31
	015 Move W11, 376
	016 NotImplemented "Instruction CMP not yet implemented."
	017 NotImplemented "Instruction SMADDL not yet implemented."
	018 Move W12, [X12+36]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Add W9, W9, 1
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W0, W9
	023 Move X30, [X31+16]
	024 Return X0
	025 Call 0x1C17F28
	026 Call 0x1C17F20

Method: System.Int32 GetStringIndexFromCaretPosition(System.Int32 caretPosition)

Disassembly:
	0x03AF0C5C LDR X9, [X8 + 0x2F8]
	0x03AF0C60 LDR X1, [X8 + 0x300]
	0x03AF0C64 BLR X9
	0x03AF0C68 TBZ X0, 0x0, 0x3AF0C80
	0x03AF0C6C MOV X0, X19
	0x03AF0C70 BL 0x3AEC66C
	0x03AF0C74 AND W0, W0, 0x1
	0x03AF0C78 MOV X1, X31
	0x03AF0C7C BL 0x3C3CF9C
	0x03AF0C80 MOV X0, X19
	0x03AF0C84 BL 0x3AEC7B0
	0x03AF0C88 TBNZ X0, 0x0, 0x3AF0DF0
	0x03AF0C8C LDRB W8, [X19 + 0x230]
	0x03AF0C90 CBNZ W8, 0x3AF0DF0
	0x03AF0C94 LDR W8, [X19 + 0x184]
	0x03AF0C98 LDR W9, [X19 + 0x190]
	0x03AF0C9C LDR X0, [X19 + 0x220]
	0x03AF0CA0 LDR W1, [X19 + 0x18C]
	0x03AF0CA4 LDR W7, [X19 + 0x1AC]
	0x03AF0CA8 CMP W8, 0x2
	0x03AF0CAC SUB W9, W9, 0x1
	0x03AF0CB0 B.NE 0x3AF0CD8
	0x03AF0CB4 ADRP X8, 0x603000
	0x03AF0CB8 LDR X8, [X8 + 0x988]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move [X31+12], W1
	005 Add X1, X31, 12
	006 Move X19, X0
	007 Call TMP_InputField.ClampCaretPos, X0, X1
	008 Move X8, [X19+312]
	009 Compare X8, 0
	010 JumpIfEqual {27}
	011 Move X8, [X8+872]
	012 Compare X8, 0
	013 JumpIfEqual {27}
	014 Move X8, [X8+56]
	015 Compare X8, 0
	016 JumpIfEqual {27}
	017 NotImplemented "Instruction LDRSW not yet implemented."
	018 Move W10, [X8+24]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move W10, 376
	021 NotImplemented "Instruction MADD not yet implemented."
	022 Move W0, [X8+36]
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Add X31, X31, 32
	026 Return X0
	027 Call 0x1C17F20
	028 Call 0x1C17F28

Method: System.Void ForceLabelUpdate()

Disassembly:
	0x03AF6504 STP X22, X21, [X31 + 0xA0]

ISIL:
	001 Call TMP_InputField.UpdateLabel, X0
	002 Return 

Method: System.Void MarkGeometryAsDirty()

Disassembly:
	0x03AEE1E0 ADRP X0, 0x605000
	0x03AEE1E4 LDR X0, [X0 + 0x598]
	0x03AEE1E8 BL 0x1C16CF4
	0x03AEE1EC MOVZ W8, 0x1
	0x03AEE1F0 STRB W8, [X21 + 0x624]
	0x03AEE1F4 LDR X0, [X20]
	0x03AEE1F8 LDR X20, [X19 + 0x138]
	0x03AEE1FC LDR W8, [X0 + 0xE0]
	0x03AEE200 CBNZ W8, 0x3AEE208
	0x03AEE204 BL 0x1C16DFC
	0x03AEE208 MOV X0, X20
	0x03AEE20C MOV X1, X31
	0x03AEE210 MOV X2, X31
	0x03AEE214 BL 0x3C3883C
	0x03AEE218 TBZ X0, 0x0, 0x3AEE228
	0x03AEE21C LDP X20, X19, [X31 + 0x10]
	0x03AEE220 LDP X30, X21, [X31], #0x20
	0x03AEE224 RET
	0x03AEE228 LDR X0, [X19 + 0x138]
	0x03AEE22C CBZ X0, 0x3AEE244
	0x03AEE230 LDRB W1, [X19 + 0x231]
	0x03AEE234 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8F5000
	006 Move X21, 0x66B000
	007 Move W8, [X20+1559]
	008 Move X21, [X21+1816]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x66B000
	015 Move X0, [X0+1816]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1559], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call CanvasUpdateRegistry.RegisterCanvasElementForGraphicRebuild, X0
	031 Return 

Method: System.Void Rebuild(UnityEngine.UI.CanvasUpdate update)

Disassembly:
	0x03AF6508 STP X20, X19, [X31 + 0xB0]
	0x03AF650C ADRP X20, 0x8EC000
	0x03AF6510 ADRP X21, 0x663000
	0x03AF6514 LDRB W8, [X20 + 0x61C]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Return 

Method: System.Void LayoutComplete()

Disassembly:
	0x03AF65CC BL 0x3EB1AC0

ISIL:
	001 Return 

Method: System.Void GraphicUpdateComplete()

Disassembly:
	0x03AF65D0 LDR X21, [X19 + 0x250]

ISIL:
	001 Return 

Method: System.Void UpdateGeometry()

Disassembly:
	0x03AF6518 LDR X21, [X21 + 0x1A8]
	0x03AF651C MOV X19, X0
	0x03AF6520 TBNZ X8, 0x0, 0x3AF6544
	0x03AF6524 ADRP X0, 0x663000
	0x03AF6528 LDR X0, [X0 + 0x1A8]
	0x03AF652C BL 0x1C16CF4
	0x03AF6530 ADRP X0, 0x628000
	0x03AF6534 LDR X0, [X0 + 0x7E8]
	0x03AF6538 BL 0x1C16CF4
	0x03AF653C MOVZ W8, 0x1
	0x03AF6540 STRB W8, [X20 + 0x61C]
	0x03AF6544 LDR X0, [X21]
	0x03AF6548 MOVZ W1, 0x4
	0x03AF654C BL 0x1C16D6C
	0x03AF6550 STR X0, [X19 + 0x250]
	0x03AF6554 CBZ X0, 0x3AF6620
	0x03AF6558 ADRP X23, 0x628000
	0x03AF655C ADRP X20, 0x605000
	0x03AF6560 LDR X23, [X23 + 0x7E8]
	0x03AF6564 LDR X20, [X20 + 0xF08]
	0x03AF6568 MOV X21, X0
	0x03AF656C MOV X24, X31
	0x03AF6570 MOV X22, X31
	0x03AF6574 ADRP X25, 0x8E3000
	0x03AF6578 MOVZ W26, 0x1
	0x03AF657C LDR W27, [X21 + 0x18]
	0x03AF6580 CMP X22, W27, SXTW
	0x03AF6584 B.GE 0x3AF6624
	0x03AF6588 LDR X0, [X23]
	0x03AF658C LDR W8, [X0 + 0xE0]
	0x03AF6590 CBNZ W8, 0x3AF65A0
	0x03AF6594 BL 0x1C16DFC
	0x03AF6598 LDR X0, [X23]
	0x03AF659C LDR W27, [X21 + 0x18]
	0x03AF65A0 LDR X8, [X0 + 0xB8]
	0x03AF65A4 ADD X0, X31, 0x0
	0x03AF65A8 MOVZ W2, 0x6C
	0x03AF65AC ADD X1, X8, 0x14
	0x03AF65B0 BL 0x3EB1AC0
	0x03AF65B4 CMP X22, X27
	0x03AF65B8 B.CS 0x3AF6640
	0x03AF65BC ADD X8, X21, X24
	0x03AF65C0 ADD X0, X8, 0x20
	0x03AF65C4 ADD X1, X31, 0x0
	0x03AF65C8 MOVZ W2, 0x6C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8ED000
	005 Move W8, [X20+1560]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x5FE000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1560], W8
	016 Move X0, X19
	017 Call TMP_InputField.InPlaceEditing, X0
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {38}
	022 Move X8, 0x5FE000
	023 Move X8, [X8+1432]
	024 Move X20, [X19+600]
	025 Move X0, [X8]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {42}
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Return 
	042 Move X0, X19
	043 Call TMP_InputField.get_mesh, X0
	044 Move X1, X0
	045 Move X0, X19
	046 Call TMP_InputField.OnFillVBO, X0, X1
	047 Move X20, [X19+600]
	048 Move X0, X19
	049 Call TMP_InputField.get_mesh, X0
	050 Compare X20, 0
	051 JumpIfEqual {60}
	052 Move X1, X0
	053 Move X0, X20
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X2, X31
	057 Move X30, [X31+32]
	058 Call CanvasRenderer.SetMesh, X0, X1
	059 Return 
	060 Call 0x1C17F20

Method: System.Void AssignPositioningIfNeeded()

Disassembly:
	0x03AEFDDC B 0x3AEFDE4
	0x03AEFDE0 STR X31, [X8]
	0x03AEFDE4 MOV X0, X19
	0x03AEFDE8 LDP X20, X19, [X31 + 0x10]
	0x03AEFDEC LDR X30, [X31], #0x20
	0x03AEFDF0 B 0x3AECBA4
	0x03AEFDF4 BL 0x1C16F20
	0x03AEFDF8 STP X30, X23, [X31 - 0x30]!
	0x03AEFDFC STP X22, X21, [X31 + 0x10]
	0x03AEFE00 STP X20, X19, [X31 + 0x20]
	0x03AEFE04 LDR X8, [X0 + 0x138]
	0x03AEFE08 CBZ X8, 0x3AEFF70
	0x03AEFE0C LDR X8, [X8 + 0x368]
	0x03AEFE10 CBZ X8, 0x3AEFF70
	0x03AEFE14 LDR X22, [X8 + 0x38]
	0x03AEFE18 LDR W23, [X0 + 0x23C]
	0x03AEFE1C MOV W21, W2
	0x03AEFE20 MOV X19, X0
	0x03AEFE24 MOV W20, W1
	0x03AEFE28 BL 0x3AEC28C
	0x03AEFE2C CBZ X22, 0x3AEFF70
	0x03AEFE30 LDR W8, [X22 + 0x18]
	0x03AEFE34 ADD W9, W0, W23
	0x03AEFE38 CMP W9, W8
	0x03AEFE3C B.CS 0x3AEFF74
	0x03AEFE40 LDR X8, [X19 + 0x138]
	0x03AEFE44 CBZ X8, 0x3AEFF70
	0x03AEFE48 LDR X8, [X8 + 0x368]
	0x03AEFE4C CBZ X8, 0x3AEFF70
	0x03AEFE50 TBZ X21, 0x0, 0x3AEFE60
	0x03AEFE54 LDR W9, [X8 + 0x18]
	0x03AEFE58 SUB W21, W9, 0x1
	0x03AEFE5C B 0x3AEFE8C
	0x03AEFE60 LDR X10, [X8 + 0x50]
	0x03AEFE64 CBZ X10, 0x3AEFF70
	0x03AEFE68 MOVZ W11, 0x178
	0x03AEFE6C SMADDL X9, X9, X11, X22
	0x03AEFE70 LDRSW X9, [X9 + 0x64]
	0x03AEFE74 LDR W11, [X10 + 0x18]
	0x03AEFE78 CMP W9, W11
	0x03AEFE7C B.CS 0x3AEFF74
	0x03AEFE80 MOVZ W11, 0x5C
	0x03AEFE84 MADD X9, X9, X11, X10
	0x03AEFE88 LDR W21, [X9 + 0x3C]
	0x03AEFE8C LDR X8, [X8 + 0x38]
	0x03AEFE90 CBZ X8, 0x3AEFF70
	0x03AEFE94 LDR W9, [X8 + 0x18]
	0x03AEFE98 CMP W21, W9
	0x03AEFE9C B.CS 0x3AEFF74
	0x03AEFEA0 MOVZ W9, 0x178
	0x03AEFEA4 SMADDL X8, X21, X9, X8
	0x03AEFEA8 LDR W22, [X8 + 0x24]
	0x03AEFEAC TBZ X20, 0x0, 0x3AEFED0
	0x03AEFEB0 STR W22, [X19 + 0x238]
	0x03AEFEB4 TBNZ X22, 0x1F, 0x3AEFEF0
	0x03AEFEB8 LDR X8, [X19 + 0x220]
	0x03AEFEBC CBZ X8, 0x3AEFF70
	0x03AEFEC0 LDR W8, [X8 + 0x10]
	0x03AEFEC4 CMP W8, W22
	0x03AEFEC8 B.LT 0x3AEFEF4
	0x03AEFECC B 0x3AEFF4C
	0x03AEFED0 STR W22, [X19 + 0x234]
	0x03AEFED4 TBNZ X22, 0x1F, 0x3AEFEFC
	0x03AEFED8 LDR X8, [X19 + 0x220]
	0x03AEFEDC CBZ X8, 0x3AEFF70
	0x03AEFEE0 LDR W8, [X8 + 0x10]
	0x03AEFEE4 CMP W8, W22
	0x03AEFEE8 B.LT 0x3AEFF00
	0x03AEFEEC B 0x3AEFF08
	0x03AEFEF0 MOV W8, W31
	0x03AEFEF4 STR W8, [X19 + 0x238]
	0x03AEFEF8 B 0x3AEFF4C
	0x03AEFEFC MOV W8, W31
	0x03AEFF00 MOV W22, W8
	0x03AEFF04 STR W8, [X19 + 0x234]
	0x03AEFF08 MOV X0, X19
	0x03AEFF0C BL 0x3AEC28C
	0x03AEFF10 ADDS W8, W0, W22
	0x03AEFF14 STR W8, [X19 + 0x238]
	0x03AEFF18 B.MI 0x3AEFF34
	0x03AEFF1C LDR X9, [X19 + 0x220]
	0x03AEFF20 CBZ X9, 0x3AEFF70
	0x03AEFF24 LDR W9, [X9 + 0x10]
	0x03AEFF28 CMP W9, W8
	0x03AEFF2C B.LT 0x3AEFF38
	0x03AEFF30 B 0x3AEFF3C
	0x03AEFF34 MOV W9, W31
	0x03AEFF38 STR W9, [X19 + 0x238]
	0x03AEFF3C ADD X1, X19, 0x23C
	0x03AEFF40 MOV X0, X19
	0x03AEFF44 STR W21, [X19 + 0x23C]
	0x03AEFF48 BL 0x3AEE318
	0x03AEFF4C ADD X1, X19, 0x240
	0x03AEFF50 MOV X0, X19
	0x03AEFF54 STR W21, [X19 + 0x240]
	0x03AEFF58 BL 0x3AEE318
	0x03AEFF5C MOV X0, X19
	0x03AEFF60 LDP X20, X19, [X31 + 0x20]
	0x03AEFF64 LDP X22, X21, [X31 + 0x10]
	0x03AEFF68 LDP X30, X23, [X31], #0x30
	0x03AEFF6C B 0x3AECBA4
	0x03AEFF70 BL 0x1C16F20
	0x03AEFF74 BL 0x1C16F28
	0x03AEFF78 STP X30, X23, [X31 - 0x30]!
	0x03AEFF7C STP X22, X21, [X31 + 0x10]
	0x03AEFF80 STP X20, X19, [X31 + 0x20]
	0x03AEFF84 LDR X8, [X0 + 0x138]
	0x03AEFF88 CBZ X8, 0x3AF0100
	0x03AEFF8C LDR X8, [X8 + 0x368]
	0x03AEFF90 CBZ X8, 0x3AF0100
	0x03AEFF94 LDR X22, [X8 + 0x38]
	0x03AEFF98 LDR W23, [X0 + 0x23C]
	0x03AEFF9C MOV W21, W2
	0x03AEFFA0 MOV X19, X0
	0x03AEFFA4 MOV W20, W1
	0x03AEFFA8 BL 0x3AEC28C
	0x03AEFFAC CBZ X22, 0x3AF0100
	0x03AEFFB0 LDR W8, [X22 + 0x18]
	0x03AEFFB4 ADD W9, W0, W23
	0x03AEFFB8 CMP W9, W8
	0x03AEFFBC B.CS 0x3AF0104
	0x03AEFFC0 TBZ X21, 0x0, 0x3AEFFCC
	0x03AEFFC4 MOV W21, W31
	0x03AEFFC8 B 0x3AF0058
	0x03AEFFCC LDR X8, [X19 + 0x138]
	0x03AEFFD0 CBZ X8, 0x3AF0100
	0x03AEFFD4 LDR X8, [X8 + 0x368]
	0x03AEFFD8 CBZ X8, 0x3AF0100
	0x03AEFFDC LDR X10, [X8 + 0x50]
	0x03AEFFE0 CBZ X10, 0x3AF0100
	0x03AEFFE4 MOVZ W11, 0x178
	0x03AEFFE8 SMADDL X9, X9, X11, X22
	0x03AEFFEC LDRSW X9, [X9 + 0x64]
	0x03AEFFF0 LDR W11, [X10 + 0x18]
	0x03AEFFF4 CMP W9, W11
	0x03AEFFF8 B.CS 0x3AF0104
	0x03AEFFFC MOVZ W11, 0x5C
	0x03AF0000 MADD X9, X9, X11, X10
	0x03AF0004 LDR W21, [X9 + 0x34]
	0x03AF0008 SUBS W9, W21, 0x1
	0x03AF000C B.LT 0x3AF0058
	0x03AF0010 LDR X8, [X8 + 0x38]
	0x03AF0014 CBZ X8, 0x3AF0100
	0x03AF0018 LDR W10, [X8 + 0x18]
	0x03AF001C CMP W9, W10
	0x03AF0020 B.CS 0x3AF0104
	0x03AF0024 MOVZ W10, 0x178
	0x03AF0028 UMADDL X8, X9, X10, X8
	0x03AF002C LDP W9, W8, [X8 + 0x24]
	0x03AF0030 ADD W22, W8, W9
	0x03AF0034 TBNZ X20, 0x0, 0x3AF0060
	0x03AF0038 STR W22, [X19 + 0x234]
	0x03AF003C TBNZ X22, 0x1F, 0x3AF0080
	0x03AF0040 LDR X8, [X19 + 0x220]
	0x03AF0044 CBZ X8, 0x3AF0100
	0x03AF0048 LDR W8, [X8 + 0x10]
	0x03AF004C CMP W8, W22
	0x03AF0050 B.LT 0x3AF0084
	0x03AF0054 B 0x3AF008C
	0x03AF0058 MOV W22, W31
	0x03AF005C TBZ X20, 0x0, 0x3AF0038
	0x03AF0060 STR W22, [X19 + 0x238]
	0x03AF0064 TBNZ X22, 0x1F, 0x3AF00B8
	0x03AF0068 LDR X8, [X19 + 0x220]
	0x03AF006C CBZ X8, 0x3AF0100
	0x03AF0070 LDR W8, [X8 + 0x10]
	0x03AF0074 CMP W8, W22
	0x03AF0078 B.LT 0x3AF00BC
	0x03AF007C B 0x3AF00DC
	0x03AF0080 MOV W8, W31
	0x03AF0084 MOV W22, W8
	0x03AF0088 STR W8, [X19 + 0x234]
	0x03AF008C MOV X0, X19
	0x03AF0090 BL 0x3AEC28C
	0x03AF0094 ADDS W8, W0, W22
	0x03AF0098 STR W8, [X19 + 0x238]
	0x03AF009C B.MI 0x3AF00C4
	0x03AF00A0 LDR X9, [X19 + 0x220]
	0x03AF00A4 CBZ X9, 0x3AF0100
	0x03AF00A8 LDR W9, [X9 + 0x10]
	0x03AF00AC CMP W9, W8
	0x03AF00B0 B.LT 0x3AF00C8
	0x03AF00B4 B 0x3AF00CC
	0x03AF00B8 MOV W8, W31
	0x03AF00BC STR W8, [X19 + 0x238]
	0x03AF00C0 B 0x3AF00DC
	0x03AF00C4 MOV W9, W31
	0x03AF00C8 STR W9, [X19 + 0x238]
	0x03AF00CC ADD X1, X19, 0x23C
	0x03AF00D0 MOV X0, X19
	0x03AF00D4 STR W21, [X19 + 0x23C]
	0x03AF00D8 BL 0x3AEE318
	0x03AF00DC ADD X1, X19, 0x240
	0x03AF00E0 MOV X0, X19
	0x03AF00E4 STR W21, [X19 + 0x240]
	0x03AF00E8 BL 0x3AEE318
	0x03AF00EC MOV X0, X19
	0x03AF00F0 LDP X20, X19, [X31 + 0x20]
	0x03AF00F4 LDP X22, X21, [X31 + 0x10]
	0x03AF00F8 LDP X30, X23, [X31], #0x30
	0x03AF00FC B 0x3AECBA4
	0x03AF0100 BL 0x1C16F20
	0x03AF0104 BL 0x1C16F28
	0x03AF0108 STR X30, [X31 - 0x20]!
	0x03AF010C STP X20, X19, [X31 + 0x10]
	0x03AF0110 ADRP X19, 0x8F2000
	0x03AF0114 ADRP X20, 0x62F000
	0x03AF0118 LDRB W8, [X19 + 0x5F9]
	0x03AF011C LDR X20, [X20 + 0x5C8]
	0x03AF0120 TBNZ X8, 0x0, 0x3AF0138
	0x03AF0124 ADRP X0, 0x62F000
	0x03AF0128 LDR X0, [X0 + 0x5C8]
	0x03AF012C BL 0x1C16CF4
	0x03AF0130 MOVZ W8, 0x1
	0x03AF0134 STRB W8, [X19 + 0x5F9]
	0x03AF0138 LDR X0, [X20]
	0x03AF013C LDR W8, [X0 + 0xE0]
	0x03AF0140 CBNZ W8, 0x3AF0148
	0x03AF0144 BL 0x1C16DFC
	0x03AF0148 LDP X20, X19, [X31 + 0x10]
	0x03AF014C MOV X0, X31
	0x03AF0150 LDR X30, [X31], #0x20
	0x03AF0154 B 0x3C753A0
	0x03AF0158 STP X30, X21, [X31 - 0x20]!
	0x03AF015C STP X20, X19, [X31 + 0x10]
	0x03AF0160 ADRP X20, 0x8F2000
	0x03AF0164 ADRP X21, 0x62F000
	0x03AF0168 LDRB W8, [X20 + 0x5FA]
	0x03AF016C LDR X21, [X21 + 0x5C8]
	0x03AF0170 MOV X19, X0
	0x03AF0174 TBNZ X8, 0x0, 0x3AF018C
	0x03AF0178 ADRP X0, 0x62F000
	0x03AF017C LDR X0, [X0 + 0x5C8]
	0x03AF0180 BL 0x1C16CF4
	0x03AF0184 MOVZ W8, 0x1
	0x03AF0188 STRB W8, [X20 + 0x5FA]
	0x03AF018C LDR X0, [X21]
	0x03AF0190 LDR W8, [X0 + 0xE0]
	0x03AF0194 CBNZ W8, 0x3AF019C
	0x03AF0198 BL 0x1C16DFC
	0x03AF019C MOV X0, X19
	0x03AF01A0 LDP X20, X19, [X31 + 0x10]
	0x03AF01A4 MOV X1, X31
	0x03AF01A8 LDP X30, X21, [X31], #0x20
	0x03AF01AC B 0x3C753C8
	0x03AF01B0 STP X30, X21, [X31 - 0x20]!
	0x03AF01B4 STP X20, X19, [X31 + 0x10]
	0x03AF01B8 ADRP X21, 0x8F2000
	0x03AF01BC ADRP X20, 0x603000
	0x03AF01C0 LDRB W8, [X21 + 0x5FB]
	0x03AF01C4 LDR X20, [X20 + 0x970]
	0x03AF01C8 MOV X19, X0
	0x03AF01CC TBNZ X8, 0x0, 0x3AF01E4
	0x03AF01D0 ADRP X0, 0x603000
	0x03AF01D4 LDR X0, [X0 + 0x970]
	0x03AF01D8 BL 0x1C16CF4
	0x03AF01DC MOVZ W8, 0x1
	0x03AF01E0 STRB W8, [X21 + 0x5FB]
	0x03AF01E4 LDR X0, [X20]
	0x03AF01E8 LDR W8, [X0 + 0xE0]
	0x03AF01EC CBNZ W8, 0x3AF01F4
	0x03AF01F0 BL 0x1C16DFC
	0x03AF01F4 MOV X0, X31
	0x03AF01F8 BL 0x3C01AB0
	0x03AF01FC CMP W0, 0x12
	0x03AF0200 B.EQ 0x3AF0244
	0x03AF0204 LDR X0, [X20]
	0x03AF0208 LDR W8, [X0 + 0xE0]
	0x03AF020C CBNZ W8, 0x3AF0214
	0x03AF0210 BL 0x1C16DFC
	0x03AF0214 MOV X0, X31
	0x03AF0218 BL 0x3C01AB0
	0x03AF021C CMP W0, 0x13
	0x03AF0220 B.EQ 0x3AF0244
	0x03AF0224 LDR X0, [X20]
	0x03AF0228 LDR W8, [X0 + 0xE0]
	0x03AF022C CBNZ W8, 0x3AF0234
	0x03AF0230 BL 0x1C16DFC
	0x03AF0234 MOV X0, X31
	0x03AF0238 BL 0x3C01AB0
	0x03AF023C CMP W0, 0x14
	0x03AF0240 B.NE 0x3AF0260
	0x03AF0244 MOV X0, X31
	0x03AF0248 BL 0x3C3CC00
	0x03AF024C TBZ X0, 0x0, 0x3AF029C
	0x03AF0250 LDRB W8, [X19 + 0x2A9]
	0x03AF0254 CMP W8, 0x0
	0x03AF0258 CSET W0, NE
	0x03AF025C B 0x3AF02A0
	0x03AF0260 MOV X0, X31
	0x03AF0264 BL 0x3C3CC00
	0x03AF0268 TBZ X0, 0x0, 0x3AF0278
	0x03AF026C MOV X0, X19
	0x03AF0270 BL 0x3AEC7B0
	0x03AF0274 TBNZ X0, 0x0, 0x3AF029C
	0x03AF0278 MOV X0, X31
	0x03AF027C BL 0x3C3CC00
	0x03AF0280 TBZ X0, 0x0, 0x3AF029C
	0x03AF0284 MOV X0, X19
	0x03AF0288 BL 0x3AEC7B0
	0x03AF028C TBNZ X0, 0x0, 0x3AF029C
	0x03AF0290 MOV X0, X19
	0x03AF0294 BL 0x3AEC66C
	0x03AF0298 TBZ X0, 0x0, 0x3AF02AC
	0x03AF029C MOVZ W0, 0x1
	0x03AF02A0 LDP X20, X19, [X31 + 0x10]
	0x03AF02A4 LDP X30, X21, [X31], #0x20
	0x03AF02A8 RET
	0x03AF02AC MOV W0, W31
	0x03AF02B0 B 0x3AF02A0
	0x03AF02B4 SUB X31, X31, 0x40
	0x03AF02B8 STP X30, X23, [X31 + 0x10]
	0x03AF02BC STP X22, X21, [X31 + 0x20]
	0x03AF02C0 STP X20, X19, [X31 + 0x30]
	0x03AF02C4 MOV X19, X0
	0x03AF02C8 LDR X0, [X0 + 0x100]
	0x03AF02CC CBZ X0, 0x3AF03F8
	0x03AF02D0 MOV X1, X31
	0x03AF02D4 BL 0x3C3D150
	0x03AF02D8 MOV X21, X0

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x8F4000
	011 Move X21, 0x605000
	012 Move W8, [X20+1561]
	013 Move X21, [X21+1432]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x605000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+1561], W8
	024 Move X0, [X21]
	025 Move X20, [X19+312]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Inequality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {374}
	038 Move X0, [X21]
	039 Move X20, [X19+584]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X31
	046 Move X2, X31
	047 Call Object.op_Inequality, X0, X1
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {374}
	052 Move X0, [X19+584]
	053 Compare X0, 0
	054 JumpIfEqual {384}
	055 Move X1, X31
	056 Call Transform.get_localPosition, X0
	057 Move X0, [X19+312]
	058 Compare X0, 0
	059 JumpIfEqual {384}
	060 Move X1, X31
	061 Move V8, V0
	062 Move V9, V1
	063 Move V10, V2
	064 Call TMP_Text.get_rectTransform, X0
	065 Compare X0, 0
	066 JumpIfEqual {384}
	067 Move X1, X31
	068 Call Transform.get_localPosition, X0
	069 Move X8, -50352128
	070 Subtract S0, S8, S0
	071 Subtract S1, S9, S1
	072 Move V12, [X8+3872]
	073 Subtract S2, S10, S2
	074 Multiply S0, S0, S0
	075 Multiply S1, S1, S1
	076 Add S0, S0, S1
	077 Multiply S1, S2, S2
	078 Add S0, S1, S0
	079 NotImplemented "Instruction FCMP not yet implemented."
	080 Move X0, [X19+584]
	081 Compare X0, 0
	082 JumpIfEqual {384}
	083 Move X1, X31
	084 Call Transform.get_localRotation, X0
	085 Move X0, [X19+312]
	086 Compare X0, 0
	087 JumpIfEqual {384}
	088 Move X1, X31
	089 Move V10, V0
	090 Move V11, V1
	091 Move V9, V2
	092 Move V8, V3
	093 Call TMP_Text.get_rectTransform, X0
	094 Compare X0, 0
	095 JumpIfEqual {384}
	096 Move X1, X31
	097 Call Transform.get_localRotation, X0
	098 Multiply S0, S10, S0
	099 Multiply S1, S11, S1
	100 Move X8, -50348032
	101 Add S0, S0, S1
	102 Move V1, [X8+436]
	103 Multiply S2, S9, S2
	104 Add S0, S2, S0
	105 Multiply S2, S8, S3
	106 Add S0, S2, S0
	107 NotImplemented "Instruction FCMP not yet implemented."
	108 Move X0, [X19+584]
	109 Compare X0, 0
	110 JumpIfEqual {384}
	111 Move X1, X31
	112 Call Transform.get_localScale, X0
	113 Move X0, [X19+312]
	114 Compare X0, 0
	115 JumpIfEqual {384}
	116 Move X1, X31
	117 Move V8, V0
	118 Move V9, V1
	119 Move V10, V2
	120 Call TMP_Text.get_rectTransform, X0
	121 Compare X0, 0
	122 JumpIfEqual {384}
	123 Move X1, X31
	124 Call Transform.get_localScale, X0
	125 Subtract S0, S8, S0
	126 Subtract S1, S9, S1
	127 Subtract S2, S10, S2
	128 Multiply S0, S0, S0
	129 Multiply S1, S1, S1
	130 Add S0, S0, S1
	131 Multiply S1, S2, S2
	132 Add S0, S1, S0
	133 NotImplemented "Instruction FCMP not yet implemented."
	134 Move X0, [X19+584]
	135 Compare X0, 0
	136 JumpIfEqual {384}
	137 Move X1, X31
	138 Call RectTransform.get_anchorMin, X0
	139 Move X0, [X19+312]
	140 Compare X0, 0
	141 JumpIfEqual {384}
	142 Move X1, X31
	143 Move V8, V0
	144 Move V9, V1
	145 Call TMP_Text.get_rectTransform, X0
	146 Compare X0, 0
	147 JumpIfEqual {384}
	148 Move X1, X31
	149 Call RectTransform.get_anchorMin, X0
	150 Subtract S0, S8, S0
	151 Subtract S1, S9, S1
	152 Multiply S0, S0, S0
	153 Multiply S1, S1, S1
	154 Add S0, S0, S1
	155 NotImplemented "Instruction FCMP not yet implemented."
	156 Move X0, [X19+584]
	157 Compare X0, 0
	158 JumpIfEqual {384}
	159 Move X1, X31
	160 Call RectTransform.get_anchorMax, X0
	161 Move X0, [X19+312]
	162 Compare X0, 0
	163 JumpIfEqual {384}
	164 Move X1, X31
	165 Move V8, V0
	166 Move V9, V1
	167 Call TMP_Text.get_rectTransform, X0
	168 Compare X0, 0
	169 JumpIfEqual {384}
	170 Move X1, X31
	171 Call RectTransform.get_anchorMax, X0
	172 Subtract S0, S8, S0
	173 Subtract S1, S9, S1
	174 Multiply S0, S0, S0
	175 Multiply S1, S1, S1
	176 Add S0, S0, S1
	177 NotImplemented "Instruction FCMP not yet implemented."
	178 Move X0, [X19+584]
	179 Compare X0, 0
	180 JumpIfEqual {384}
	181 Move X1, X31
	182 Call RectTransform.get_anchoredPosition, X0
	183 Move X0, [X19+312]
	184 Compare X0, 0
	185 JumpIfEqual {384}
	186 Move X1, X31
	187 Move V8, V0
	188 Move V9, V1
	189 Call TMP_Text.get_rectTransform, X0
	190 Compare X0, 0
	191 JumpIfEqual {384}
	192 Move X1, X31
	193 Call RectTransform.get_anchoredPosition, X0
	194 Subtract S0, S8, S0
	195 Subtract S1, S9, S1
	196 Multiply S0, S0, S0
	197 Multiply S1, S1, S1
	198 Add S0, S0, S1
	199 NotImplemented "Instruction FCMP not yet implemented."
	200 Move X0, [X19+584]
	201 Compare X0, 0
	202 JumpIfEqual {384}
	203 Move X1, X31
	204 Call RectTransform.get_sizeDelta, X0
	205 Move X0, [X19+312]
	206 Compare X0, 0
	207 JumpIfEqual {384}
	208 Move X1, X31
	209 Move V8, V0
	210 Move V9, V1
	211 Call TMP_Text.get_rectTransform, X0
	212 Compare X0, 0
	213 JumpIfEqual {384}
	214 Move X1, X31
	215 Call RectTransform.get_sizeDelta, X0
	216 Subtract S0, S8, S0
	217 Subtract S1, S9, S1
	218 Multiply S0, S0, S0
	219 Multiply S1, S1, S1
	220 Add S0, S0, S1
	221 NotImplemented "Instruction FCMP not yet implemented."
	222 Move X0, [X19+584]
	223 Compare X0, 0
	224 JumpIfEqual {384}
	225 Move X1, X31
	226 Call RectTransform.get_pivot, X0
	227 Move X0, [X19+312]
	228 Compare X0, 0
	229 JumpIfEqual {384}
	230 Move X1, X31
	231 Move V8, V0
	232 Move V9, V1
	233 Call TMP_Text.get_rectTransform, X0
	234 Compare X0, 0
	235 JumpIfEqual {384}
	236 Move X1, X31
	237 Call RectTransform.get_pivot, X0
	238 Subtract S0, S8, S0
	239 Subtract S1, S9, S1
	240 Multiply S0, S0, S0
	241 Multiply S1, S1, S1
	242 Add S0, S0, S1
	243 NotImplemented "Instruction FCMP not yet implemented."
	244 Move X0, [X19+312]
	245 Compare X0, 0
	246 JumpIfEqual {384}
	247 Move X20, [X19+584]
	248 Move X1, X31
	249 Call TMP_Text.get_rectTransform, X0
	250 Compare X0, 0
	251 JumpIfEqual {384}
	252 Move X1, X31
	253 Call Transform.get_localPosition, X0
	254 Compare X20, 0
	255 JumpIfEqual {384}
	256 Move X0, X20
	257 Move X1, X31
	258 Call Transform.set_localPosition, X0, X1
	259 Move X0, [X19+312]
	260 Compare X0, 0
	261 JumpIfEqual {384}
	262 Move X20, [X19+584]
	263 Move X1, X31
	264 Call TMP_Text.get_rectTransform, X0
	265 Compare X0, 0
	266 JumpIfEqual {384}
	267 Move X1, X31
	268 Call Transform.get_localRotation, X0
	269 Compare X20, 0
	270 JumpIfEqual {384}
	271 Move X0, X20
	272 Move X1, X31
	273 Call Transform.set_localRotation, X0, X1
	274 Move X0, [X19+312]
	275 Compare X0, 0
	276 JumpIfEqual {384}
	277 Move X20, [X19+584]
	278 Move X1, X31
	279 Call TMP_Text.get_rectTransform, X0
	280 Compare X0, 0
	281 JumpIfEqual {384}
	282 Move X1, X31
	283 Call Transform.get_localScale, X0
	284 Compare X20, 0
	285 JumpIfEqual {384}
	286 Move X0, X20
	287 Move X1, X31
	288 Call Transform.set_localScale, X0, X1
	289 Move X0, [X19+312]
	290 Compare X0, 0
	291 JumpIfEqual {384}
	292 Move X20, [X19+584]
	293 Move X1, X31
	294 Call TMP_Text.get_rectTransform, X0
	295 Compare X0, 0
	296 JumpIfEqual {384}
	297 Move X1, X31
	298 Call RectTransform.get_anchorMin, X0
	299 Compare X20, 0
	300 JumpIfEqual {384}
	301 Move X0, X20
	302 Move X1, X31
	303 Call RectTransform.set_anchorMin, X0, X1
	304 Move X0, [X19+312]
	305 Compare X0, 0
	306 JumpIfEqual {384}
	307 Move X20, [X19+584]
	308 Move X1, X31
	309 Call TMP_Text.get_rectTransform, X0
	310 Compare X0, 0
	311 JumpIfEqual {384}
	312 Move X1, X31
	313 Call RectTransform.get_anchorMax, X0
	314 Compare X20, 0
	315 JumpIfEqual {384}
	316 Move X0, X20
	317 Move X1, X31
	318 Call RectTransform.set_anchorMax, X0, X1
	319 Move X0, [X19+312]
	320 Compare X0, 0
	321 JumpIfEqual {384}
	322 Move X20, [X19+584]
	323 Move X1, X31
	324 Call TMP_Text.get_rectTransform, X0
	325 Compare X0, 0
	326 JumpIfEqual {384}
	327 Move X1, X31
	328 Call RectTransform.get_anchoredPosition, X0
	329 Compare X20, 0
	330 JumpIfEqual {384}
	331 Move X0, X20
	332 Move X1, X31
	333 Call RectTransform.set_anchoredPosition, X0, X1
	334 Move X0, [X19+312]
	335 Compare X0, 0
	336 JumpIfEqual {384}
	337 Move X20, [X19+584]
	338 Move X1, X31
	339 Call TMP_Text.get_rectTransform, X0
	340 Compare X0, 0
	341 JumpIfEqual {384}
	342 Move X1, X31
	343 Call RectTransform.get_sizeDelta, X0
	344 Compare X20, 0
	345 JumpIfEqual {384}
	346 Move X0, X20
	347 Move X1, X31
	348 Call RectTransform.set_sizeDelta, X0, X1
	349 Move X0, [X19+312]
	350 Compare X0, 0
	351 JumpIfEqual {384}
	352 Move X19, [X19+584]
	353 Move X1, X31
	354 Call TMP_Text.get_rectTransform, X0
	355 Compare X0, 0
	356 JumpIfEqual {384}
	357 Move X1, X31
	358 Call RectTransform.get_pivot, X0
	359 Compare X19, 0
	360 JumpIfEqual {384}
	361 Move X0, X19
	362 Move X20, [X31+64]
	363 Move X19, [X31+72]
	364 Move X30, [X31+48]
	365 Move X21, [X31+56]
	366 Move D9, [X31+32]
	367 Move D8, [X31+40]
	368 Move D11, [X31+16]
	369 Move D10, [X31+24]
	370 Move X1, X31
	371 Move V12, [X31+80]
	372 Call RectTransform.set_pivot, X0, X1
	373 Return 
	374 Move X20, [X31+64]
	375 Move X19, [X31+72]
	376 Move X30, [X31+48]
	377 Move X21, [X31+56]
	378 Move D9, [X31+32]
	379 Move D8, [X31+40]
	380 Move D11, [X31+16]
	381 Move D10, [X31+24]
	382 Move V12, [X31+80]
	383 Return 
	384 Call 0x1C17F20

Method: System.Void OnFillVBO(UnityEngine.Mesh vbo)

Disassembly:
	0x03AF65D4 CBZ X21, 0x3AF6620
	0x03AF65D8 LDRB W8, [X25 + 0x78F]
	0x03AF65DC CBNZ W8, 0x3AF65EC
	0x03AF65E0 MOV X0, X20
	0x03AF65E4 BL 0x1C16CF4
	0x03AF65E8 STRB W26, [X25 + 0x78F]
	0x03AF65EC LDR W8, [X21 + 0x18]
	0x03AF65F0 CMP X22, X8
	0x03AF65F4 B.CS 0x3AF6640
	0x03AF65F8 LDR X8, [X20]
	0x03AF65FC ADD X22, X22, 0x1
	0x03AF6600 LDR X8, [X8 + 0xB8]
	0x03AF6604 LDR V0, [X8]
	0x03AF6608 ADD X8, X21, X24
	0x03AF660C STP W31, W31, [X8 + 0x54]
	0x03AF6610 ADD X24, X24, 0x6C
	0x03AF6614 STUR D0, [X8 + 0x4C]
	0x03AF6618 LDR X21, [X19 + 0x250]
	0x03AF661C CBNZ X21, 0x3AF657C
	0x03AF6620 BL 0x1C16F20
	0x03AF6624 LDP X20, X19, [X31 + 0xB0]
	0x03AF6628 LDP X22, X21, [X31 + 0xA0]
	0x03AF662C LDP X24, X23, [X31 + 0x90]
	0x03AF6630 LDP X26, X25, [X31 + 0x80]
	0x03AF6634 LDP X30, X27, [X31 + 0x70]
	0x03AF6638 ADD X31, X31, 0xC0
	0x03AF663C RET
	0x03AF6640 BL 0x1C16F28
	0x03AF6644 SUB X31, X31, 0x80
	0x03AF6648 STP D15, D14, [X31 + 0x10]
	0x03AF664C STP D13, D12, [X31 + 0x20]
	0x03AF6650 STP D11, D10, [X31 + 0x30]
	0x03AF6654 STP D9, D8, [X31 + 0x40]
	0x03AF6658 STR X30, [X31 + 0x50]
	0x03AF665C STP X22, X21, [X31 + 0x60]
	0x03AF6660 STP X20, X19, [X31 + 0x70]
	0x03AF6664 ADRP X22, 0x8EC000
	0x03AF6668 ADRP X21, 0x5FD000
	0x03AF666C LDRB W8, [X22 + 0x61E]
	0x03AF6670 LDR X21, [X21 + 0x598]
	0x03AF6674 MOV W20, W1
	0x03AF6678 MOV V9.16B, V2.16B
	0x03AF667C MOV V10.16B, V1.16B
	0x03AF6680 MOV V8.16B, V0.16B
	0x03AF6684 MOV X19, X0
	0x03AF6688 TBNZ X8, 0x0, 0x3AF66A0
	0x03AF668C ADRP X0, 0x5FD000
	0x03AF6690 LDR X0, [X0 + 0x598]
	0x03AF6694 BL 0x1C16CF4
	0x03AF6698 MOVZ W8, 0x1
	0x03AF669C STRB W8, [X22 + 0x61E]
	0x03AF66A0 LDR X0, [X21]
	0x03AF66A4 LDR X21, [X19 + 0x110]
	0x03AF66A8 LDR W8, [X0 + 0xE0]
	0x03AF66AC CBNZ W8, 0x3AF66B4
	0x03AF66B0 BL 0x1C16DFC
	0x03AF66B4 MOV X0, X21
	0x03AF66B8 MOV X1, X31
	0x03AF66BC MOV X2, X31
	0x03AF66C0 BL 0x3C3883C
	0x03AF66C4 TBNZ X0, 0x0, 0x3AF6A98
	0x03AF66C8 MOV X0, X19
	0x03AF66CC MOV X1, X31
	0x03AF66D0 BL 0x3C32E90
	0x03AF66D4 CBZ X0, 0x3AF6ABC
	0x03AF66D8 MOV X1, X31
	0x03AF66DC BL 0x3C3EB78
	0x03AF66E0 LDR X0, [X19 + 0x138]
	0x03AF66E4 CBZ X0, 0x3AF6ABC
	0x03AF66E8 MOV X1, X31
	0x03AF66EC MOV V12.16B, V0.16B
	0x03AF66F0 MOV V11.16B, V1.16B
	0x03AF66F4 BL 0x3AF8E0C
	0x03AF66F8 CBZ X0, 0x3AF6ABC
	0x03AF66FC MOV X1, X31
	0x03AF6700 BL 0x3C3EB78
	0x03AF6704 LDR X0, [X19 + 0x110]
	0x03AF6708 STR S0, [X31 + 0x5C]
	0x03AF670C CBZ X0, 0x3AF6ABC
	0x03AF6710 MOV X1, X31
	0x03AF6714 STR S1, [X31 + 0xC]
	0x03AF6718 STR S9, [X31 + 0x58]
	0x03AF671C BL 0x3C3EB78
	0x03AF6720 LDR X0, [X19 + 0x110]
	0x03AF6724 CBZ X0, 0x3AF6ABC
	0x03AF6728 MOV X1, X31
	0x03AF672C MOV V9.16B, V0.16B
	0x03AF6730 MOV V13.16B, V1.16B
	0x03AF6734 BL 0x3C3E51C
	0x03AF6738 LDR X0, [X19 + 0x138]
	0x03AF673C CBZ X0, 0x3AF6ABC
	0x03AF6740 MOV V14.16B, V1.16B
	0x03AF6744 LDR X8, [X0]
	0x03AF6748 LDR V1, [X31 + 0x5C]
	0x03AF674C MOV V15.16B, V3.16B
	0x03AF6750 LDR X9, [X8 + 0x5C8]
	0x03AF6754 FADD S1, S8, S1
	0x03AF6758 LDR X1, [X8 + 0x5D0]
	0x03AF675C FADD S1, S1, S9
	0x03AF6760 FADD S8, S12, S1
	0x03AF6764 FADD S1, S12, S9
	0x03AF6768 FADD S12, S1, S0
	0x03AF676C STR S1, [X31 + 0x8]
	0x03AF6770 FADD S9, S2, S12
	0x03AF6774 BLR X9
	0x03AF6778 LDR V0, [X19 + 0x22C]
	0x03AF677C FADD S1, S8, S2
	0x03AF6780 STR S9, [X31 + 0x4]
	0x03AF6784 SCVTF S0, S0
	0x03AF6788 FADD S0, S1, S0
	0x03AF678C FSUB S9, S9, S0
	0x03AF6790 FCMP S9, 0x0
	0x03AF6794 B.PL 0x3AF67EC
	0x03AF6798 LDR W8, [X19 + 0x190]
	0x03AF679C SUB W8, W8, 0x1
	0x03AF67A0 CMP W8, 0x1
	0x03AF67A4 B.HI 0x3AF67AC
	0x03AF67A8 TBZ X20, 0x0, 0x3AF67EC
	0x03AF67AC LDR X0, [X19 + 0x138]
	0x03AF67B0 CBZ X0, 0x3AF6ABC
	0x03AF67B4 MOV X1, X31
	0x03AF67B8 BL 0x3AF8E0C
	0x03AF67BC CBZ X0, 0x3AF6ABC
	0x03AF67C0 MOV X1, X31
	0x03AF67C4 MOV X20, X0
	0x03AF67C8 BL 0x3C3E7F0
	0x03AF67CC FMOV S2, W31
	0x03AF67D0 FADD S0, S9, S0
	0x03AF67D4 FADD S1, S1, S2
	0x03AF67D8 MOV X0, X20
	0x03AF67DC MOV X1, X31
	0x03AF67E0 BL 0x3C3E880
	0x03AF67E4 MOV X0, X19
	0x03AF67E8 BL 0x3AEEDDC
	0x03AF67EC LDR X0, [X19 + 0x138]
	0x03AF67F0 CBZ X0, 0x3AF6ABC
	0x03AF67F4 LDR X8, [X0]
	0x03AF67F8 LDR X9, [X8 + 0x5C8]
	0x03AF67FC LDR X1, [X8 + 0x5D0]
	0x03AF6800 BLR X9
	0x03AF6804 FSUB S0, S8, S0
	0x03AF6808 FSUB S8, S0, S12
	0x03AF680C FCMP S8, 0x0
	0x03AF6810 B.PL 0x3AF6854
	0x03AF6814 LDR X0, [X19 + 0x138]
	0x03AF6818 CBZ X0, 0x3AF6ABC
	0x03AF681C MOV X1, X31
	0x03AF6820 BL 0x3AF8E0C
	0x03AF6824 CBZ X0, 0x3AF6ABC
	0x03AF6828 MOV X1, X31
	0x03AF682C MOV X20, X0
	0x03AF6830 BL 0x3C3E7F0
	0x03AF6834 FMOV S2, W31
	0x03AF6838 FSUB S0, S0, S8
	0x03AF683C FADD S1, S1, S2
	0x03AF6840 MOV X0, X20
	0x03AF6844 MOV X1, X31
	0x03AF6848 BL 0x3C3E880
	0x03AF684C MOV X0, X19
	0x03AF6850 BL 0x3AEEDDC
	0x03AF6854 LDR W8, [X19 + 0x190]
	0x03AF6858 CBZ W8, 0x3AF6918
	0x03AF685C LDR V0, [X31 + 0xC]
	0x03AF6860 LDR V2, [X31 + 0x58]
	0x03AF6864 FADD S1, S11, S13
	0x03AF6868 ADRP X8, 0xFFFFFFFFFCFF4000
	0x03AF686C FADD S0, S10, S0
	0x03AF6870 FADD S0, S0, S13
	0x03AF6874 FADD S8, S1, S14
	0x03AF6878 LDR V1, [X8 + 0x2F0]
	0x03AF687C FADD S9, S11, S0
	0x03AF6880 FADD S0, S15, S8
	0x03AF6884 FADD S2, S9, S2
	0x03AF6888 FSUB S10, S0, S2
	0x03AF688C FCMP S10, S1
	0x03AF6890 B.PL 0x3AF68D4
	0x03AF6894 LDR X0, [X19 + 0x138]
	0x03AF6898 CBZ X0, 0x3AF6ABC
	0x03AF689C MOV X1, X31
	0x03AF68A0 BL 0x3AF8E0C
	0x03AF68A4 CBZ X0, 0x3AF6ABC
	0x03AF68A8 MOV X1, X31
	0x03AF68AC MOV X20, X0
	0x03AF68B0 BL 0x3C3E7F0
	0x03AF68B4 FMOV S2, W31
	0x03AF68B8 FADD S0, S0, S2
	0x03AF68BC FADD S1, S10, S1
	0x03AF68C0 MOV X0, X20
	0x03AF68C4 MOV X1, X31
	0x03AF68C8 BL 0x3C3E880
	0x03AF68CC MOV X0, X19
	0x03AF68D0 BL 0x3AEEDDC
	0x03AF68D4 FSUB S8, S9, S8
	0x03AF68D8 FCMP S8, 0x0
	0x03AF68DC B.PL 0x3AF6918
	0x03AF68E0 LDR X0, [X19 + 0x138]
	0x03AF68E4 CBZ X0, 0x3AF6ABC
	0x03AF68E8 MOV X1, X31
	0x03AF68EC BL 0x3AF8E0C
	0x03AF68F0 CBZ X0, 0x3AF6ABC
	0x03AF68F4 MOV X1, X31
	0x03AF68F8 MOV X20, X0
	0x03AF68FC BL 0x3C3E7F0
	0x03AF6900 FSUB S1, S1, S8
	0x03AF6904 MOV X0, X20
	0x03AF6908 MOV X1, X31
	0x03AF690C BL 0x3C3E880
	0x03AF6910 MOV X0, X19
	0x03AF6914 BL 0x3AEEDDC
	0x03AF6918 LDRB W8, [X19 + 0x2AB]
	0x03AF691C CBZ W8, 0x3AF6A94
	0x03AF6920 LDR X0, [X19 + 0x138]
	0x03AF6924 CBZ X0, 0x3AF6ABC
	0x03AF6928 MOV X1, X31
	0x03AF692C BL 0x3AF8E0C
	0x03AF6930 CBZ X0, 0x3AF6ABC
	0x03AF6934 MOV X1, X31
	0x03AF6938 BL 0x3C3E7F0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x8ED000
	010 Move X19, 0x664000
	011 Move W8, [X22+1562]
	012 Move X19, [X19+416]
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x5FE000
	020 Move X0, [X0+3584]
	021 Call 0x1C17CF4
	022 Move X0, 0x664000
	023 Move X0, [X0+416]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+1562], W8
	027 Move X0, [X19]
	028 Move X23, 0x5FE000
	029 Move X23, [X23+3584]
	030 Call 0x1C17F10
	031 Move X1, X31
	032 Move X19, X0
	033 Call VertexHelper..ctor, X0
	034 Move W8, [X21+624]
	035 Compare W8, 0
	036 JumpIfNotEqual {40}
	037 Move W8, [X21+715]
	038 Compare W8, 0
	039 JumpIfEqual {173}
	040 Move W8, [X21+745]
	041 Compare W8, 0
	042 JumpIfEqual {74}
	043 Move W1, [X21+572]
	044 Move X0, X21
	045 Call TMP_InputField.GetStringIndexFromCaretPosition, X0, X1
	046 Move [X21+564], W0
	047 Move TEMP, X0
	048 And TEMP, TEMP, -2147483648
	049 Compare TEMP, -2147483648
	050 JumpIfEqual {56}
	051 Move X8, [X21+544]
	052 Compare X8, 0
	053 JumpIfEqual {183}
	054 Move W8, [X8+16]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move W8, W31
	057 Move [X21+564], W8
	058 Move W1, [X21+576]
	059 Move X0, X21
	060 Call TMP_InputField.GetStringIndexFromCaretPosition, X0, X1
	061 Move [X21+568], W0
	062 Move TEMP, X0
	063 And TEMP, TEMP, -2147483648
	064 Compare TEMP, -2147483648
	065 JumpIfEqual {71}
	066 Move X8, [X21+544]
	067 Compare X8, 0
	068 JumpIfEqual {184}
	069 Move W8, [X8+16]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move W8, W31
	072 Move [X21+568], W8
	073 Move [X21+745], W31
	074 Move W8, [X21+746]
	075 Compare W8, 0
	076 JumpIfEqual {98}
	077 Move W22, [X21+564]
	078 Move X0, X21
	079 Call TMP_InputField.get_compositionLength, X0
	080 Add W1, W0, W22
	081 Move X0, X21
	082 Call TMP_InputField.GetCaretPositionFromStringIndex, X0, X1
	083 Add X1, X21, 572
	084 Move [X21+572], W0
	085 Move X0, X21
	086 Call TMP_InputField.ClampCaretPos, X0, X1
	087 Move W22, [X21+568]
	088 Move X0, X21
	089 Call TMP_InputField.get_compositionLength, X0
	090 Add W1, W0, W22
	091 Move X0, X21
	092 Call TMP_InputField.GetCaretPositionFromStringIndex, X0, X1
	093 Add X1, X21, 576
	094 Move [X21+576], W0
	095 Move X0, X21
	096 Call TMP_InputField.ClampCaretPos, X0, X1
	097 Move [X21+746], W31
	098 Move W24, [X21+564]
	099 Move X0, X21
	100 Call TMP_InputField.get_compositionLength, X0
	101 Move W25, [X21+568]
	102 Move W22, W0
	103 Move X0, X21
	104 Call TMP_InputField.get_compositionLength, X0
	105 Add W9, W22, W24
	106 Move X22, 0x8E4000
	107 Move W8, [X22+1935]
	108 Add W10, W0, W25
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Compare W8, 0
	111 JumpIfNotEqual {117}
	112 Move X0, 0x606000
	113 Move X0, [X0+3848]
	114 Call 0x1C17CF4
	115 Move W8, 1
	116 Move [X22+1935], W8
	117 Move X0, X21
	118 Move X1, X19
	119 Call TMP_InputField.GenerateCaret, X0, X1, X2
	120 Move X0, X21
	121 Call TMP_InputField.SendOnEndTextSelection, X0
	122 Compare W8, 0
	123 JumpIfNotEqual {129}
	124 Move X0, 0x606000
	125 Move X0, [X0+3848]
	126 Call 0x1C17CF4
	127 Move W8, 1
	128 Move [X22+1935], W8
	129 Move X0, X21
	130 Move X1, X19
	131 Call TMP_InputField.GenerateHightlight, X0, X1, X2
	132 Move X0, X21
	133 Call TMP_InputField.SendOnTextSelection, X0
	134 Compare X19, 0
	135 JumpIfEqual {182}
	136 Move X0, X19
	137 Move X1, X20
	138 Move X2, X31
	139 Call VertexHelper.FillMesh, X0, X1
	140 Move X20, X31
	141 Move X8, [X19]
	142 Move X1, [X23]
	143 NotImplemented "Instruction LDRH not yet implemented."
	144 Compare X9, 0
	145 JumpIfEqual {152}
	146 Move X10, [X8+176]
	147 Add X10, X10, 8
	148 NotImplemented "Instruction LDUR not yet implemented."
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Subtract X9, X9, 1
	151 Add X10, X10, 16
	152 Move X0, X19
	153 Move W2, W31
	154 Call 0x1C5D788
	155 NotImplemented "Instruction LDRSW not yet implemented."
	156 Add X8, X8, X9
	157 Add X0, X8, 312
	158 Move X8, [X0]
	159 Move X1, [X0+8]
	160 Move X0, X19
	161 NotImplemented "Instruction BLR not yet implemented."
	162 Compare X20, 0
	163 JumpIfNotEqual {180}
	164 Move X20, [X31+48]
	165 Move X19, [X31+56]
	166 Move X22, [X31+32]
	167 Move X21, [X31+40]
	168 Move X24, [X31+16]
	169 Move X23, [X31+24]
	170 Move X30, [X31+64]
	171 Move X25, [X31+72]
	172 Return 
	173 Compare X19, 0
	174 JumpIfEqual {185}
	175 Move X0, X19
	176 Move X1, X20
	177 Move X2, X31
	178 Call VertexHelper.FillMesh, X0, X1
	179 Move X20, X31
	180 Move X0, X20
	181 Call 0x1C17F18
	182 Call 0x1C17F20
	183 Call 0x1C17F20
	184 Call 0x1C17F20
	185 Call 0x1C17F20
	186 Move X21, X0
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Move X0, X21
	189 Call 0x3EB2AD0
	190 Move X20, [X0]
	191 Call 0x3EB2AE0
	192 Compare X19, 0
	193 JumpIfNotEqual {141}
	194 Move X20, X31
	195 Move X21, X0
	196 Compare X19, 0
	197 JumpIfEqual {219}
	198 Move X8, [X19]
	199 Move X1, [X23]
	200 NotImplemented "Instruction LDRH not yet implemented."
	201 Compare X9, 0
	202 JumpIfEqual {209}
	203 Move X10, [X8+176]
	204 Add X10, X10, 8
	205 NotImplemented "Instruction LDUR not yet implemented."
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Subtract X9, X9, 1
	208 Add X10, X10, 16
	209 Move X0, X19
	210 Move W2, W31
	211 Call 0x1C5D788
	212 NotImplemented "Instruction LDRSW not yet implemented."
	213 Add X8, X8, X9
	214 Add X0, X8, 312
	215 Move X8, [X0]
	216 Move X1, [X0+8]
	217 Move X0, X19
	218 NotImplemented "Instruction BLR not yet implemented."
	219 Compare X20, 0
	220 JumpIfNotEqual {223}
	221 Move X0, X21
	222 Call 0x1D2D690
	223 Move X0, X20
	224 Call 0x1C17F18
	225 Call 0x1991590

Method: System.Void GenerateCaret(UnityEngine.UI.VertexHelper vbo, UnityEngine.Vector2 roundingOffset)

Disassembly:
	0x03AF693C LDR X0, [X19 + 0x138]
	0x03AF6940 CBZ X0, 0x3AF6ABC
	0x03AF6944 LDR X8, [X0 + 0x368]
	0x03AF6948 CBZ X8, 0x3AF6ABC
	0x03AF694C LDR X8, [X8 + 0x38]
	0x03AF6950 CBZ X8, 0x3AF6ABC
	0x03AF6954 LDR W9, [X8 + 0x18]
	0x03AF6958 CBZ W9, 0x3AF6AC0
	0x03AF695C LDR X9, [X0]
	0x03AF6960 LDR V10, [X8 + 0x140]
	0x03AF6964 MOV V8.16B, V0.16B
	0x03AF6968 LDR X8, [X9 + 0x5C8]
	0x03AF696C LDR X1, [X9 + 0x5D0]
	0x03AF6970 BLR X8
	0x03AF6974 LDR X0, [X19 + 0x138]
	0x03AF6978 CBZ X0, 0x3AF6ABC
	0x03AF697C LDR X9, [X0 + 0x368]
	0x03AF6980 CBZ X9, 0x3AF6ABC
	0x03AF6984 LDR X8, [X9 + 0x38]
	0x03AF6988 CBZ X8, 0x3AF6ABC
	0x03AF698C LDR W9, [X9 + 0x18]
	0x03AF6990 LDR W10, [X8 + 0x18]
	0x03AF6994 SUB W9, W9, 0x1
	0x03AF6998 CMP W9, W10
	0x03AF699C B.CS 0x3AF6AC0
	0x03AF69A0 LDR X10, [X0]
	0x03AF69A4 MOVZ W11, 0x178
	0x03AF69A8 SMADDL X8, X9, X11, X8
	0x03AF69AC MOV V9.16B, V0.16B
	0x03AF69B0 LDR V11, [X8 + 0x140]
	0x03AF69B4 LDR X8, [X10 + 0x5C8]
	0x03AF69B8 LDR X1, [X10 + 0x5D0]
	0x03AF69BC LDR V0, [X31 + 0x5C]
	0x03AF69C0 LDR V1, [X31 + 0x8]
	0x03AF69C4 FADD S13, S0, S1
	0x03AF69C8 BLR X8
	0x03AF69CC ADRP X8, 0xFFFFFFFFFCFF3000
	0x03AF69D0 LDR V1, [X8 + 0xF28]
	0x03AF69D4 LDR V0, [X19 + 0x22C]
	0x03AF69D8 FCMP S8, S1
	0x03AF69DC B.LE 0x3AF6A10
	0x03AF69E0 FADD S1, S13, S10
	0x03AF69E4 FSUB S1, S1, S9
	0x03AF69E8 FCMP S1, S12
	0x03AF69EC B.LE 0x3AF6A10
	0x03AF69F0 LDR X0, [X19 + 0x138]
	0x03AF69F4 CBZ X0, 0x3AF6ABC
	0x03AF69F8 FSUB S0, S12, S1
	0x03AF69FC FNEG S1, S0
	0x03AF6A00 FNEG S2, S8
	0x03AF6A04 FCMP S8, S1
	0x03AF6A08 FCSEL S8, S2, S0, MI
	0x03AF6A0C B 0x3AF6A54
	0x03AF6A10 ADRP X8, 0xFFFFFFFFFCFF4000
	0x03AF6A14 LDR V1, [X8 + 0x2F0]
	0x03AF6A18 LDR V3, [X31 + 0x4]
	0x03AF6A1C FCMP S8, S1
	0x03AF6A20 B.PL 0x3AF6A90
	0x03AF6A24 FADD S1, S13, S11
	0x03AF6A28 FADD S1, S1, S2
	0x03AF6A2C SCVTF S0, S0
	0x03AF6A30 FADD S0, S1, S0
	0x03AF6A34 FCMP S0, S3
	0x03AF6A38 B.PL 0x3AF6A90
	0x03AF6A3C LDR X0, [X19 + 0x138]
	0x03AF6A40 CBZ X0, 0x3AF6ABC
	0x03AF6A44 FSUB S0, S3, S0
	0x03AF6A48 FNEG S1, S8
	0x03AF6A4C FCMP S0, S1
	0x03AF6A50 FCSEL S8, S1, S0, GT
	0x03AF6A54 MOV X1, X31
	0x03AF6A58 BL 0x3AF8E0C
	0x03AF6A5C MOV X20, X0
	0x03AF6A60 CBZ X0, 0x3AF6ABC
	0x03AF6A64 MOV X0, X20
	0x03AF6A68 MOV X1, X31
	0x03AF6A6C BL 0x3C3E7F0
	0x03AF6A70 FMOV S2, W31
	0x03AF6A74 FADD S0, S8, S0
	0x03AF6A78 FADD S1, S1, S2
	0x03AF6A7C MOV X0, X20
	0x03AF6A80 MOV X1, X31
	0x03AF6A84 BL 0x3C3E880
	0x03AF6A88 MOV X0, X19
	0x03AF6A8C BL 0x3AEEDDC
	0x03AF6A90 STRB W31, [X19 + 0x2AB]
	0x03AF6A94 STRB W31, [X19 + 0x2EB]
	0x03AF6A98 LDP X20, X19, [X31 + 0x70]
	0x03AF6A9C LDP X22, X21, [X31 + 0x60]
	0x03AF6AA0 LDR X30, [X31 + 0x50]
	0x03AF6AA4 LDP D9, D8, [X31 + 0x40]
	0x03AF6AA8 LDP D11, D10, [X31 + 0x30]
	0x03AF6AAC LDP D13, D12, [X31 + 0x20]
	0x03AF6AB0 LDP D15, D14, [X31 + 0x10]
	0x03AF6AB4 ADD X31, X31, 0x80
	0x03AF6AB8 RET
	0x03AF6ABC BL 0x1C16F20
	0x03AF6AC0 BL 0x1C16F28
	0x03AF6AC4 STP X30, X21, [X31 - 0x20]!
	0x03AF6AC8 STP X20, X19, [X31 + 0x10]
	0x03AF6ACC ADRP X20, 0x8EC000
	0x03AF6AD0 ADRP X21, 0x5FD000
	0x03AF6AD4 LDRB W8, [X20 + 0x620]
	0x03AF6AD8 LDR X21, [X21 + 0x598]
	0x03AF6ADC MOV X19, X0
	0x03AF6AE0 TBNZ X8, 0x0, 0x3AF6AF8
	0x03AF6AE4 ADRP X0, 0x5FD000
	0x03AF6AE8 LDR X0, [X0 + 0x598]
	0x03AF6AEC BL 0x1C16CF4
	0x03AF6AF0 MOVZ W8, 0x1
	0x03AF6AF4 STRB W8, [X20 + 0x620]
	0x03AF6AF8 LDR X0, [X21]
	0x03AF6AFC LDR X20, [X19 + 0x138]
	0x03AF6B00 LDR W8, [X0 + 0xE0]
	0x03AF6B04 CBNZ W8, 0x3AF6B0C
	0x03AF6B08 BL 0x1C16DFC
	0x03AF6B0C MOV X0, X20
	0x03AF6B10 MOV X1, X31
	0x03AF6B14 MOV X2, X31
	0x03AF6B18 BL 0x3C3883C
	0x03AF6B1C TBNZ X0, 0x0, 0x3AF6BC8
	0x03AF6B20 LDR X8, [X19 + 0x138]
	0x03AF6B24 CBZ X8, 0x3AF6BD4
	0x03AF6B28 LDR X0, [X21]
	0x03AF6B2C LDR X20, [X8 + 0xF8]
	0x03AF6B30 LDR W9, [X0 + 0xE0]
	0x03AF6B34 CBNZ W9, 0x3AF6B3C
	0x03AF6B38 BL 0x1C16DFC
	0x03AF6B3C MOV X0, X20
	0x03AF6B40 MOV X1, X31
	0x03AF6B44 MOV X2, X31
	0x03AF6B48 BL 0x3C3883C
	0x03AF6B4C TBNZ X0, 0x0, 0x3AF6BC8
	0x03AF6B50 LDR X8, [X19]
	0x03AF6B54 MOV X0, X19
	0x03AF6B58 LDP X9, X1, [X8 + 0x1C8]
	0x03AF6B5C BLR X9
	0x03AF6B60 TBZ X0, 0x0, 0x3AF6BC8
	0x03AF6B64 LDR X8, [X19]
	0x03AF6B68 MOV X0, X19
	0x03AF6B6C LDR X9, [X8 + 0x2B8]
	0x03AF6B70 LDR X1, [X8 + 0x2C0]
	0x03AF6B74 BLR X9
	0x03AF6B78 TBZ X0, 0x0, 0x3AF6BC8
	0x03AF6B7C LDRB W8, [X19 + 0x270]
	0x03AF6B80 CBZ W8, 0x3AF6BC0
	0x03AF6B84 LDR X0, [X19 + 0x100]
	0x03AF6B88 CBZ X0, 0x3AF6BC0
	0x03AF6B8C MOV X1, X31
	0x03AF6B90 BL 0x3C3CFD8
	0x03AF6B94 TBNZ X0, 0x0, 0x3AF6BC0
	0x03AF6B98 LDR X0, [X19 + 0x100]
	0x03AF6B9C CBZ X0, 0x3AF6BD4
	0x03AF6BA0 MOVZ W1, 0x1
	0x03AF6BA4 MOV X2, X31
	0x03AF6BA8 BL 0x3C3D014
	0x03AF6BAC LDR X0, [X19 + 0x100]
	0x03AF6BB0 CBZ X0, 0x3AF6BD4
	0x03AF6BB4 LDR X1, [X19 + 0x220]
	0x03AF6BB8 MOV X2, X31
	0x03AF6BBC BL 0x3C3CF58
	0x03AF6BC0 MOVZ W8, 0x1
	0x03AF6BC4 STRB W8, [X19 + 0x271]
	0x03AF6BC8 LDP X20, X19, [X31 + 0x10]
	0x03AF6BCC LDP X30, X21, [X31], #0x20
	0x03AF6BD0 RET
	0x03AF6BD4 BL 0x1C16F20
	0x03AF6BD8 STP X30, X19, [X31 - 0x10]!
	0x03AF6BDC MOV X2, X31
	0x03AF6BE0 MOV X19, X0
	0x03AF6BE4 BL 0x3E4233C
	0x03AF6BE8 MOV X0, X19
	0x03AF6BEC BL 0x3AF51F0
	0x03AF6BF0 MOV X0, X19
	0x03AF6BF4 LDP X30, X19, [X31], #0x10
	0x03AF6BF8 B 0x3AF6AC4
	0x03AF6BFC STR X30, [X31 - 0x10]!
	0x03AF6C00 CBZ X1, 0x3AF6C1C
	0x03AF6C04 LDR W8, [X1 + 0x148]
	0x03AF6C08 CBZ W8, 0x3AF6C14
	0x03AF6C0C LDR X30, [X31], #0x10
	0x03AF6C10 RET
	0x03AF6C14 LDR X30, [X31], #0x10
	0x03AF6C18 B 0x3AF6AC4
	0x03AF6C1C BL 0x1C16F20
	0x03AF6C20 RET
	0x03AF6C24 STR X30, [X31 - 0x20]!
	0x03AF6C28 STP X20, X19, [X31 + 0x10]
	0x03AF6C2C MOV X19, X1
	0x03AF6C30 MOV W1, W31
	0x03AF6C34 MOV X20, X0
	0x03AF6C38 BL 0x3AEF600
	0x03AF6C3C MOV X0, X20
	0x03AF6C40 MOV X1, X19
	0x03AF6C44 MOV X2, X31
	0x03AF6C48 BL 0x3E42348
	0x03AF6C4C MOV X0, X20
	0x03AF6C50 LDP X20, X19, [X31 + 0x10]
	0x03AF6C54 LDR X30, [X31], #0x20
	0x03AF6C58 B 0x3AF524C
	0x03AF6C5C STP X30, X19, [X31 - 0x10]!
	0x03AF6C60 LDR X8, [X0]
	0x03AF6C64 MOV X19, X0
	0x03AF6C68 LDP X9, X1, [X8 + 0x1C8]
	0x03AF6C6C BLR X9
	0x03AF6C70 TBZ X0, 0x0, 0x3AF6CA8
	0x03AF6C74 LDR X8, [X19]
	0x03AF6C78 MOV X0, X19
	0x03AF6C7C LDR X9, [X8 + 0x2B8]
	0x03AF6C80 LDR X1, [X8 + 0x2C0]
	0x03AF6C84 BLR X9
	0x03AF6C88 TBZ X0, 0x0, 0x3AF6CA8
	0x03AF6C8C LDRB W8, [X19 + 0x270]
	0x03AF6C90 CBNZ W8, 0x3AF6C9C
	0x03AF6C94 MOVZ W8, 0x1
	0x03AF6C98 STRB W8, [X19 + 0x271]
	0x03AF6C9C MOV X0, X19
	0x03AF6CA0 LDP X30, X19, [X31], #0x10
	0x03AF6CA4 B 0x3AF3838
	0x03AF6CA8 LDP X30, X19, [X31], #0x10
	0x03AF6CAC RET
	0x03AF6CB0 LDRB W8, [X0 + 0x299]
	0x03AF6CB4 CBZ W8, 0x3AF6CC0
	0x03AF6CB8 MOVZ W1, 0x3
	0x03AF6CBC B 0x3AF6CD0
	0x03AF6CC0 CMP W1, 0x2
	0x03AF6CC4 B.NE 0x3AF6CD0
	0x03AF6CC8 MOVZ W8, 0x1
	0x03AF6CCC STRB W8, [X0 + 0x299]
	0x03AF6CD0 AND W2, W2, 0x1
	0x03AF6CD4 MOV X3, X31
	0x03AF6CD8 B 0x3E418D4
	0x03AF6CDC RET
	0x03AF6CE0 RET
	0x03AF6CE4 FMOV S0, W31
	0x03AF6CE8 RET
	0x03AF6CEC STP D9, D8, [X31 - 0x30]!
	0x03AF6CF0 STP X30, X21, [X31 + 0x10]
	0x03AF6CF4 STP X20, X19, [X31 + 0x20]
	0x03AF6CF8 ADRP X20, 0x8EC000
	0x03AF6CFC ADRP X21, 0x5FD000
	0x03AF6D00 LDRB W8, [X20 + 0x625]
	0x03AF6D04 LDR X21, [X21 + 0x598]
	0x03AF6D08 MOV X19, X0
	0x03AF6D0C TBNZ X8, 0x0, 0x3AF6D24
	0x03AF6D10 ADRP X0, 0x5FD000
	0x03AF6D14 LDR X0, [X0 + 0x598]
	0x03AF6D18 BL 0x1C16CF4
	0x03AF6D1C MOVZ W8, 0x1
	0x03AF6D20 STRB W8, [X20 + 0x625]
	0x03AF6D24 LDR X0, [X21]
	0x03AF6D28 LDR X20, [X19 + 0x138]
	0x03AF6D2C LDR W8, [X0 + 0xE0]
	0x03AF6D30 CBNZ W8, 0x3AF6D38
	0x03AF6D34 BL 0x1C16DFC
	0x03AF6D38 MOV X0, X20
	0x03AF6D3C MOV X1, X31
	0x03AF6D40 MOV X2, X31
	0x03AF6D44 BL 0x3C3883C
	0x03AF6D48 FMOV S0, W31
	0x03AF6D4C TBNZ X0, 0x0, 0x3AF6E08
	0x03AF6D50 LDR X0, [X21]
	0x03AF6D54 LDR X20, [X19 + 0x168]
	0x03AF6D58 LDR W8, [X0 + 0xE0]
	0x03AF6D5C CBNZ W8, 0x3AF6D64
	0x03AF6D60 BL 0x1C16DFC
	0x03AF6D64 MOV X0, X20
	0x03AF6D68 MOV X1, X31
	0x03AF6D6C MOV X2, X31
	0x03AF6D70 BL 0x3C354F8
	0x03AF6D74 FMOV S9, W31
	0x03AF6D78 TBZ X0, 0x0, 0x3AF6D98
	0x03AF6D7C LDR X8, [X19 + 0x168]
	0x03AF6D80 CBZ X8, 0x3AF6E18
	0x03AF6D84 LDR X0, [X8 + 0x20]
	0x03AF6D88 CBZ X0, 0x3AF6E18
	0x03AF6D8C MOV X1, X31
	0x03AF6D90 BL 0x3C0C9D4
	0x03AF6D94 SCVTF S9, W0
	0x03AF6D98 LDR X0, [X21]
	0x03AF6D9C LDR X20, [X19 + 0x110]
	0x03AF6DA0 LDR W8, [X0 + 0xE0]
	0x03AF6DA4 CBNZ W8, 0x3AF6DAC
	0x03AF6DA8 BL 0x1C16DFC
	0x03AF6DAC MOV X0, X20
	0x03AF6DB0 MOV X1, X31
	0x03AF6DB4 MOV X2, X31
	0x03AF6DB8 BL 0x3C354F8
	0x03AF6DBC TBZ X0, 0x0, 0x3AF6DEC
	0x03AF6DC0 LDR X0, [X19 + 0x110]
	0x03AF6DC4 CBZ X0, 0x3AF6E18
	0x03AF6DC8 MOV X1, X31
	0x03AF6DCC BL 0x3C3EC58
	0x03AF6DD0 LDR X0, [X19 + 0x110]
	0x03AF6DD4 CBZ X0, 0x3AF6E18
	0x03AF6DD8 MOV X1, X31
	0x03AF6DDC MOV V8.16B, V0.16B
	0x03AF6DE0 BL 0x3C3EDA0
	0x03AF6DE4 FSUB S0, S8, S0
	0x03AF6DE8 FADD S9, S9, S0
	0x03AF6DEC LDR X0, [X19 + 0x138]
	0x03AF6DF0 CBZ X0, 0x3AF6E18
	0x03AF6DF4 LDR X8, [X0]
	0x03AF6DF8 LDR X9, [X8 + 0x678]
	0x03AF6DFC LDR X1, [X8 + 0x680]
	0x03AF6E00 BLR X9
	0x03AF6E04 FADD S0, S9, S0
	0x03AF6E08 LDP X20, X19, [X31 + 0x20]
	0x03AF6E0C LDP X30, X21, [X31 + 0x10]
	0x03AF6E10 LDP D9, D8, [X31], #0x30
	0x03AF6E14 RET
	0x03AF6E18 BL 0x1C16F20
	0x03AF6E1C FMOV S0, -1
	0x03AF6E20 RET
	0x03AF6E24 FMOV S0, W31
	0x03AF6E28 RET
	0x03AF6E2C STP D9, D8, [X31 - 0x30]!
	0x03AF6E30 STP X30, X21, [X31 + 0x10]
	0x03AF6E34 STP X20, X19, [X31 + 0x20]
	0x03AF6E38 ADRP X20, 0x8EC000
	0x03AF6E3C ADRP X21, 0x5FD000
	0x03AF6E40 LDRB W8, [X20 + 0x626]
	0x03AF6E44 LDR X21, [X21 + 0x598]
	0x03AF6E48 MOV X19, X0
	0x03AF6E4C TBNZ X8, 0x0, 0x3AF6E64
	0x03AF6E50 ADRP X0, 0x5FD000
	0x03AF6E54 LDR X0, [X0 + 0x598]
	0x03AF6E58 BL 0x1C16CF4
	0x03AF6E5C MOVZ W8, 0x1
	0x03AF6E60 STRB W8, [X20 + 0x626]
	0x03AF6E64 LDR X0, [X21]
	0x03AF6E68 LDR X20, [X19 + 0x138]
	0x03AF6E6C LDR W8, [X0 + 0xE0]
	0x03AF6E70 CBNZ W8, 0x3AF6E78
	0x03AF6E74 BL 0x1C16DFC
	0x03AF6E78 MOV X0, X20
	0x03AF6E7C MOV X1, X31
	0x03AF6E80 MOV X2, X31
	0x03AF6E84 BL 0x3C3883C
	0x03AF6E88 FMOV S0, W31
	0x03AF6E8C TBNZ X0, 0x0, 0x3AF6F48
	0x03AF6E90 LDR X0, [X21]
	0x03AF6E94 LDR X20, [X19 + 0x168]
	0x03AF6E98 LDR W8, [X0 + 0xE0]
	0x03AF6E9C CBNZ W8, 0x3AF6EA4
	0x03AF6EA0 BL 0x1C16DFC
	0x03AF6EA4 MOV X0, X20
	0x03AF6EA8 MOV X1, X31
	0x03AF6EAC MOV X2, X31
	0x03AF6EB0 BL 0x3C354F8
	0x03AF6EB4 FMOV S9, W31
	0x03AF6EB8 TBZ X0, 0x0, 0x3AF6ED8
	0x03AF6EBC LDR X8, [X19 + 0x168]
	0x03AF6EC0 CBZ X8, 0x3AF6F58
	0x03AF6EC4 LDR X0, [X8 + 0x20]
	0x03AF6EC8 CBZ X0, 0x3AF6F58
	0x03AF6ECC MOV X1, X31
	0x03AF6ED0 BL 0x3C0CA10
	0x03AF6ED4 SCVTF S9, W0
	0x03AF6ED8 LDR X0, [X21]
	0x03AF6EDC LDR X20, [X19 + 0x110]
	0x03AF6EE0 LDR W8, [X0 + 0xE0]
	0x03AF6EE4 CBNZ W8, 0x3AF6EEC
	0x03AF6EE8 BL 0x1C16DFC
	0x03AF6EEC MOV X0, X20
	0x03AF6EF0 MOV X1, X31
	0x03AF6EF4 MOV X2, X31
	0x03AF6EF8 BL 0x3C354F8
	0x03AF6EFC TBZ X0, 0x0, 0x3AF6F2C
	0x03AF6F00 LDR X0, [X19 + 0x110]
	0x03AF6F04 CBZ X0, 0x3AF6F58
	0x03AF6F08 MOV X1, X31
	0x03AF6F0C BL 0x3C3EC58
	0x03AF6F10 LDR X0, [X19 + 0x110]
	0x03AF6F14 CBZ X0, 0x3AF6F58
	0x03AF6F18 MOV X1, X31
	0x03AF6F1C MOV V8.16B, V1.16B

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X27
	008 Move [X31+64], X26
	009 Move [X31+72], X25
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X21, 0x8ED000
	017 Move W8, [X21+1563]
	018 Move X20, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0x5FE000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0x654000
	028 Move X0, [X0+1720]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+1563], W8
	032 Move W8, [X19+628]
	033 Compare W8, 0
	034 JumpIfEqual {423}
	035 Move X0, [X19+312]
	036 Compare X0, 0
	037 JumpIfEqual {439}
	038 Move X22, 0x5FE000
	039 Move X22, [X22+1432]
	040 Move X1, X31
	041 Call Graphic.get_canvas, X0
	042 Move X8, [X22]
	043 Move X21, X0
	044 Move W9, [X8+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {49}
	047 Move X0, X8
	048 Call 0x1C17DFC
	049 Move X0, X21
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Equality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {423}
	057 Move W8, [X19+560]
	058 Compare W8, 0
	059 JumpIfNotEqual {423}
	060 Move X8, [X19+592]
	061 Compare X8, 0
	062 JumpIfNotEqual {65}
	063 Move X0, X19
	064 Call TMP_InputField.CreateCursorVerts, X0
	065 Move X21, 0x8E4000
	066 Move W8, [X21+1935]
	067 Move V11, [X19+556]
	068 Compare W8, 0
	069 JumpIfNotEqual {75}
	070 Move X0, 0x606000
	071 Move X0, [X0+3848]
	072 Call 0x1C17CF4
	073 Move W8, 1
	074 Move [X21+1935], W8
	075 Move W23, [X19+572]
	076 Move X0, X19
	077 Call TMP_InputField.get_compositionLength, X0
	078 Move X8, [X19+312]
	079 Compare X8, 0
	080 JumpIfEqual {439}
	081 Move X8, [X8+872]
	082 Compare X8, 0
	083 JumpIfEqual {439}
	084 Move X21, [X8+56]
	085 Compare X21, 0
	086 JumpIfEqual {439}
	087 Move W8, [X21+24]
	088 Add W9, W0, W23
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move W23, [X19+572]
	091 Move X0, X19
	092 Call TMP_InputField.get_compositionLength, X0
	093 Move W9, [X21+24]
	094 Add W8, W0, W23
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move W9, 376
	097 NotImplemented "Instruction SMADDL not yet implemented."
	098 Move W23, [X8+100]
	099 Move W25, [X19+572]
	100 Move X0, X19
	101 Call TMP_InputField.get_compositionLength, X0
	102 Move X8, [X19+312]
	103 Compare X8, 0
	104 JumpIfEqual {439}
	105 Move X8, [X8+872]
	106 Compare X8, 0
	107 JumpIfEqual {439}
	108 Move X9, [X8+80]
	109 Compare X9, 0
	110 JumpIfEqual {439}
	111 Move W10, [X9+24]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X10, W23
	114 Move W11, 92
	115 Move X24, [X8+56]
	116 NotImplemented "Instruction NOP not yet implemented."
	117 NotImplemented "Instruction MADD not yet implemented."
	118 Move W26, [X8+52]
	119 Move W27, [X19+572]
	120 Move W21, W0
	121 Move X0, X19
	122 Call TMP_InputField.get_compositionLength, X0
	123 Compare X24, 0
	124 JumpIfEqual {439}
	125 Add W8, W21, W25
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Add W8, W0, W27
	128 Move W9, [X24+24]
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move X9, [X19+312]
	131 Compare X9, 0
	132 JumpIfEqual {439}
	133 Move W10, 376
	134 NotImplemented "Instruction SMADDL not yet implemented."
	135 Move W9, [X9+624]
	136 Move V8, [X8+320]
	137 Move W9, [X24+24]
	138 Subtract W8, W8, 1
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move X9, [X19+312]
	141 Compare X9, 0
	142 JumpIfEqual {439}
	143 Move W10, 376
	144 NotImplemented "Instruction SMADDL not yet implemented."
	145 Move W9, [X9+624]
	146 Move V8, [X8+324]
	147 Move V0, [X8+328]
	148 Move V10, [X8+336]
	149 Move W24, [X8+404]
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Subtract S9, S0, S10
	152 Move S0, -0.5
	153 Multiply S0, S9, S0
	154 Move S1, W31
	155 Add S10, S0, S1
	156 Move X0, [X19+256]
	157 Compare X0, 0
	158 JumpIfEqual {188}
	159 Move W21, [X19+564]
	160 Move X1, X31
	161 Call TouchScreenKeyboard.get_text, X0
	162 Compare X0, 0
	163 JumpIfEqual {172}
	164 Move X0, [X19+256]
	165 Compare X0, 0
	166 JumpIfEqual {439}
	167 Move X1, X31
	168 Call TouchScreenKeyboard.get_text, X0
	169 Compare X0, 0
	170 JumpIfEqual {439}
	171 Move W8, [X0+16]
	172 Move W8, W31
	173 NotImplemented "Instruction BIC not yet implemented."
	174 Move X21, [X19+256]
	175 NotImplemented "Instruction CMP not yet implemented."
	176 NotImplemented "Instruction CSEL not yet implemented."
	177 Add X0, X31, 8
	178 Move W2, W31
	179 Move X3, X31
	180 Move [X31+8], X31
	181 Call RangeInt..ctor, X0, X1, X2
	182 Compare X21, 0
	183 JumpIfEqual {439}
	184 Move X1, [X31+8]
	185 Move X0, X21
	186 Move X2, X31
	187 Call TouchScreenKeyboard.set_selection, X0, X1
	188 Move W8, [X19+624]
	189 Compare W8, 0
	190 JumpIfEqual {201}
	191 Move V0, [X19+608]
	192 Move V1, [X19+612]
	193 Move X8, -50380800
	194 Move V2, [X8+3872]
	195 Subtract S0, S8, S0
	196 Subtract S1, S10, S1
	197 Multiply S0, S0, S0
	198 Multiply S1, S1, S1
	199 Add S0, S0, S1
	200 NotImplemented "Instruction FCMP not yet implemented."
	201 Move W8, [X19+747]
	202 Compare W8, 0
	203 JumpIfNotEqual {207}
	204 Move W8, [X19+683]
	205 Compare W8, 0
	206 JumpIfEqual {213}
	207 And W1, W24, 1
	208 Move X0, X19
	209 Move V0, V8
	210 Move V1, V10
	211 Move V2, V9
	212 Call TMP_InputField.AdjustRectTransformRelativeToViewport, X0, X1, V0, X2
	213 Move X0, [X19+312]
	214 Move [X19+608], S8
	215 Move [X19+612], S10
	216 Compare X0, 0
	217 JumpIfEqual {439}
	218 Move X1, X31
	219 Call Graphic.get_canvas, X0
	220 Compare X0, 0
	221 JumpIfEqual {439}
	222 Move X1, X31
	223 Call Canvas.get_scaleFactor, X0
	224 Move X8, [X19+592]
	225 Compare X8, 0
	226 JumpIfEqual {439}
	227 Move W9, [X8+24]
	228 Compare W9, 0
	229 JumpIfEqual {440}
	230 Add S1, S10, S9
	231 Subtract S0, S1, S9
	232 Move [X8+32], S8
	233 Move [X8+40], S0
	234 Move [X8+40], W31
	235 Move X8, [X19+592]
	236 Compare X8, 0
	237 JumpIfEqual {439}
	238 Move W9, [X8+24]
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Move [X8+140], S8
	241 Move [X8+148], S1
	242 Move [X8+148], W31
	243 Move X8, [X19+592]
	244 Compare X8, 0
	245 JumpIfEqual {439}
	246 Move W9, [X8+24]
	247 NotImplemented "Instruction CMP not yet implemented."
	248 NotImplemented "Instruction SCVTF not yet implemented."
	249 Add S2, S8, S2
	250 Move [X8+248], S2
	251 Move [X8+256], S1
	252 Move [X8+256], W31
	253 Move X8, [X19+592]
	254 Compare X8, 0
	255 JumpIfEqual {439}
	256 Move W9, [X8+24]
	257 NotImplemented "Instruction CMP not yet implemented."
	258 Move [X8+356], S2
	259 Move [X8+360], S0
	260 Move [X8+364], W31
	261 Move X21, [X19+592]
	262 Compare X21, 0
	263 JumpIfEqual {439}
	264 Move X0, X19
	265 Call TMP_InputField.get_caretColor, X0
	266 Move X0, X31
	267 Call 0x1E44664
	268 Move W8, [X21+24]
	269 Compare W8, 0
	270 JumpIfEqual {440}
	271 Move [X21+72], W0
	272 Move X21, [X19+592]
	273 Compare X21, 0
	274 JumpIfEqual {439}
	275 Move X0, X19
	276 Call TMP_InputField.get_caretColor, X0
	277 Move X0, X31
	278 Call 0x1E44664
	279 Move W8, [X21+24]
	280 NotImplemented "Instruction CMP not yet implemented."
	281 Move [X21+180], W0
	282 Move X21, [X19+592]
	283 Compare X21, 0
	284 JumpIfEqual {439}
	285 Move X0, X19
	286 Call TMP_InputField.get_caretColor, X0
	287 Move X0, X31
	288 Call 0x1E44664
	289 Move W8, [X21+24]
	290 NotImplemented "Instruction CMP not yet implemented."
	291 Move [X21+288], W0
	292 Move X21, [X19+592]
	293 Compare X21, 0
	294 JumpIfEqual {439}
	295 Move X0, X19
	296 Call TMP_InputField.get_caretColor, X0
	297 Move X0, X31
	298 Call 0x1E44664
	299 Move W8, [X21+24]
	300 NotImplemented "Instruction CMP not yet implemented."
	301 Move [X21+396], W0
	302 Compare X20, 0
	303 JumpIfEqual {439}
	304 Move X1, [X19+592]
	305 Move X0, X20
	306 Move X2, X31
	307 Call VertexHelper.AddUIVertexQuad, X0, X1
	308 Move W8, [X19+697]
	309 Compare W8, 0
	310 JumpIfNotEqual {313}
	311 Move W8, [X19+700]
	312 NotImplemented "Instruction CMP not yet implemented."
	313 Move X0, [X19+312]
	314 Move [X19+697], W31
	315 Move [X19+700], W23
	316 Compare X0, 0
	317 JumpIfEqual {439}
	318 Move X1, X31
	319 Call Graphic.get_canvas, X0
	320 Compare X0, 0
	321 JumpIfEqual {439}
	322 Move X1, X31
	323 Call Canvas.get_renderMode, X0
	324 Compare W0, 0
	325 JumpIfEqual {353}
	326 Move X0, [X19+312]
	327 Compare X0, 0
	328 JumpIfEqual {439}
	329 Move X1, X31
	330 Call Graphic.get_canvas, X0
	331 Compare X0, 0
	332 JumpIfEqual {439}
	333 Move X1, X31
	334 Call Canvas.get_worldCamera, X0
	335 Move X8, [X22]
	336 Move X20, X0
	337 Move W9, [X8+224]
	338 Compare W9, 0
	339 JumpIfNotEqual {342}
	340 Move X0, X8
	341 Call 0x1C17DFC
	342 Move X0, X20
	343 Move X1, X31
	344 Move X2, X31
	345 Call Object.op_Equality, X0, X1
	346 Move TEMP, X0
	347 And TEMP, TEMP, 1
	348 Compare TEMP, 1
	349 JumpIfNotEqual {354}
	350 Move X0, X31
	351 Call Camera.get_current
	352 Move X20, X0
	353 Move X20, X31
	354 Move X0, [X19+600]
	355 Compare X0, 0
	356 JumpIfEqual {439}
	357 Move X1, X31
	358 Call Component.get_gameObject, X0
	359 Compare X0, 0
	360 JumpIfEqual {439}
	361 Move X1, X31
	362 Call GameObject.get_transform, X0
	363 Move X8, [X19+592]
	364 Compare X8, 0
	365 JumpIfEqual {439}
	366 Move W9, [X8+24]
	367 Compare W9, 0
	368 JumpIfEqual {440}
	369 Compare X0, 0
	370 JumpIfEqual {439}
	371 Move S1, [X8+36]
	372 Move S2, [X8+40]
	373 Move V0, [X8+32]
	374 Move X1, X31
	375 Call Transform.TransformPoint, X0, X1
	376 Move X8, 0x654000
	377 Move X8, [X8+1720]
	378 Move V8, V0
	379 Move V9, V1
	380 Move V10, V2
	381 Move X0, [X8]
	382 Move W8, [X0+224]
	383 Compare W8, 0
	384 JumpIfNotEqual {386}
	385 Call 0x1C17DFC
	386 Move X0, X20
	387 Move V0, V8
	388 Move V1, V9
	389 Move V2, V10
	390 Move X1, X31
	391 Call RectTransformUtility.WorldToScreenPoint, X0, X1
	392 Move X0, X31
	393 Move V8, V0
	394 Move V9, V1
	395 Call Screen.get_height
	396 Move W19, W0
	397 Call TMP_InputField.get_inputSystem, X0
	398 Move X8, [X22]
	399 Move X20, X0
	400 Move W9, [X8+224]
	401 Compare W9, 0
	402 JumpIfNotEqual {405}
	403 Move X0, X8
	404 Call 0x1C17DFC
	405 Move X0, X20
	406 Move X1, X31
	407 Move X2, X31
	408 Call Object.op_Inequality, X0, X1
	409 Move TEMP, X0
	410 And TEMP, TEMP, 1
	411 Compare TEMP, 1
	412 JumpIfNotEqual {423}
	413 Call TMP_InputField.get_inputSystem, X0
	414 Compare X0, 0
	415 JumpIfEqual {439}
	416 Move X8, [X0]
	417 NotImplemented "Instruction SCVTF not yet implemented."
	418 Subtract S1, S0, S9
	419 Move V0, V8
	420 Move X9, [X8+648]
	421 Move X1, [X8+656]
	422 NotImplemented "Instruction BLR not yet implemented."
	423 Move X20, [X31+112]
	424 Move X19, [X31+120]
	425 Move X22, [X31+96]
	426 Move X21, [X31+104]
	427 Move X24, [X31+80]
	428 Move X23, [X31+88]
	429 Move X26, [X31+64]
	430 Move X25, [X31+72]
	431 Move X30, [X31+48]
	432 Move X27, [X31+56]
	433 Move D9, [X31+32]
	434 Move D8, [X31+40]
	435 Move D11, [X31+16]
	436 Move D10, [X31+24]
	437 Add X31, X31, 128
	438 Return 
	439 Call 0x1C17F20
	440 Call 0x1C17F28

Method: System.Void CreateCursorVerts()

Disassembly:
	0x03AF74F4 LDR X30, [X31], #0x30
	0x03AF74F8 BR X2
	0x03AF74FC BL 0x1C16F20
	0x03AF7500 LDR X8, [X0]
	0x03AF7504 LDR X1, [X0 + 0x128]
	0x03AF7508 LDR X3, [X8 + 0x728]
	0x03AF750C LDR X2, [X8 + 0x730]
	0x03AF7510 BR X3
	0x03AF7514 STP X30, X19, [X31 - 0x10]!
	0x03AF7518 LDR X8, [X0]
	0x03AF751C MOV X19, X0
	0x03AF7520 LDR X9, [X8 + 0x718]
	0x03AF7524 LDR X2, [X8 + 0x720]
	0x03AF7528 BLR X9
	0x03AF752C LDR X8, [X19]
	0x03AF7530 MOVZ W9, 0x1
	0x03AF7534 STRB W9, [X19 + 0x370]
	0x03AF7538 MOV X0, X19
	0x03AF753C LDR X9, [X8 + 0x2F8]
	0x03AF7540 LDR X1, [X8 + 0x300]
	0x03AF7544 BLR X9
	0x03AF7548 LDR X8, [X19]
	0x03AF754C MOV X0, X19
	0x03AF7550 LDR X2, [X8 + 0x308]
	0x03AF7554 LDR X1, [X8 + 0x310]
	0x03AF7558 LDP X30, X19, [X31], #0x10
	0x03AF755C BR X2
	0x03AF7560 LDR V0, [X0 + 0x148]
	0x03AF7564 LDR V1, [X0 + 0x14C]
	0x03AF7568 LDR V2, [X0 + 0x150]
	0x03AF756C LDR V3, [X0 + 0x154]
	0x03AF7570 RET
	0x03AF7574 LDR V4, [X0 + 0x148]
	0x03AF7578 LDR V5, [X0 + 0x14C]
	0x03AF757C LDR V6, [X0 + 0x150]
	0x03AF7580 LDR V7, [X0 + 0x154]
	0x03AF7584 FSUB S4, S4, S0
	0x03AF7588 FSUB S5, S5, S1
	0x03AF758C ADRP X8, 0xFFFFFFFFFCFF2000
	0x03AF7590 FMUL S4, S4, S4
	0x03AF7594 FMUL S5, S5, S5
	0x03AF7598 FADD S4, S4, S5
	0x03AF759C LDR V5, [X8 + 0xF20]
	0x03AF75A0 FSUB S6, S6, S2
	0x03AF75A4 FSUB S7, S7, S3
	0x03AF75A8 FMUL S6, S6, S6
	0x03AF75AC FADD S4, S6, S4
	0x03AF75B0 FMUL S6, S7, S7
	0x03AF75B4 FADD S4, S6, S4
	0x03AF75B8 FCMP S4, S5
	0x03AF75BC B.PL 0x3AF75C4
	0x03AF75C0 RET
	0x03AF75C4 LDR X9, [X0]
	0x03AF75C8 MOVZ W8, 0x1
	0x03AF75CC STR S0, [X0 + 0x148]
	0x03AF75D0 STR S1, [X0 + 0x14C]
	0x03AF75D4 STR S2, [X0 + 0x150]
	0x03AF75D8 STR S3, [X0 + 0x154]
	0x03AF75DC STRB W8, [X0 + 0x370]
	0x03AF75E0 LDR X2, [X9 + 0x2F8]
	0x03AF75E4 LDR X1, [X9 + 0x300]
	0x03AF75E8 BR X2
	0x03AF75EC LDR V0, [X0 + 0x154]
	0x03AF75F0 RET
	0x03AF75F4 LDR V1, [X0 + 0x154]
	0x03AF75F8 FCMP S1, S0
	0x03AF75FC B.NE 0x3AF7604
	0x03AF7600 RET
	0x03AF7604 LDR X8, [X0]
	0x03AF7608 MOVZ W9, 0x1
	0x03AF760C STR S0, [X0 + 0x154]
	0x03AF7610 STRB W9, [X0 + 0x370]
	0x03AF7614 LDR X2, [X8 + 0x2F8]
	0x03AF7618 LDR X1, [X8 + 0x300]
	0x03AF761C BR X2
	0x03AF7620 LDRB W0, [X0 + 0x160]
	0x03AF7624 RET
	0x03AF7628 LDRB W9, [X0 + 0x160]
	0x03AF762C AND W8, W1, 0x1
	0x03AF7630 CMP W9, W8
	0x03AF7634 B.NE 0x3AF763C
	0x03AF7638 RET
	0x03AF763C LDR X9, [X0]
	0x03AF7640 MOVZ W10, 0x1

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+112], X30
	003 Move [X31+120], X27
	004 Move [X31+128], X26
	005 Move [X31+136], X25
	006 Move [X31+144], X24
	007 Move [X31+152], X23
	008 Move [X31+160], X22
	009 Move [X31+168], X21
	010 Move [X31+176], X20
	011 Move [X31+184], X19
	012 Move X20, 0x8EC000
	013 Move X21, 0x663000
	014 Move W8, [X20+1564]
	015 Move X21, [X21+424]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x663000
	022 Move X0, [X0+424]
	023 Call 0x1C17CF4
	024 Move X0, 0x628000
	025 Move X0, [X0+2024]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+1564], W8
	029 Move X0, [X21]
	030 Move W1, 4
	031 Call 0x1C17D6C
	032 Move [X19+592], X0
	033 Compare X0, 0
	034 JumpIfEqual {87}
	035 Move X23, 0x628000
	036 Move X20, 0x605000
	037 Move X23, [X23+2024]
	038 Move X20, [X20+3848]
	039 Move X21, X0
	040 Move X24, X31
	041 Move X22, X31
	042 Move X25, 0x8E3000
	043 Move W26, 1
	044 Move W27, [X21+24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X0, [X23]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {53}
	050 Call 0x1C17DFC
	051 Move X0, [X23]
	052 Move W27, [X21+24]
	053 Move X8, [X0+184]
	054 Add X0, X31, 0
	055 Move W2, 108
	056 Add X1, X8, 20
	057 Call 0x3EB2AC0
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Add X8, X21, X24
	060 Add X0, X8, 32
	061 Add X1, X31, 0
	062 Move W2, 108
	063 Call 0x3EB2AC0
	064 Move X21, [X19+592]
	065 Compare X21, 0
	066 JumpIfEqual {87}
	067 Move W8, [X25+1935]
	068 Compare W8, 0
	069 JumpIfNotEqual {73}
	070 Move X0, X20
	071 Call 0x1C17CF4
	072 Move [X25+1935], W26
	073 Move W8, [X21+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X8, [X20]
	076 Add X22, X22, 1
	077 Move X8, [X8+184]
	078 Move V0, [X8]
	079 Add X8, X21, X24
	080 Move [X8+84], W31
	081 Move [X8+88], W31
	082 Add X24, X24, 108
	083 Move [X8+76], D0
	084 Move X21, [X19+592]
	085 Compare X21, 0
	086 JumpIfNotEqual {44}
	087 Call 0x1C17F20
	088 Move X20, [X31+176]
	089 Move X19, [X31+184]
	090 Move X22, [X31+160]
	091 Move X21, [X31+168]
	092 Move X24, [X31+144]
	093 Move X23, [X31+152]
	094 Move X26, [X31+128]
	095 Move X25, [X31+136]
	096 Move X30, [X31+112]
	097 Move X27, [X31+120]
	098 Add X31, X31, 192
	099 Return 
	100 Call 0x1C17F28

Method: System.Void GenerateHightlight(UnityEngine.UI.VertexHelper vbo, UnityEngine.Vector2 roundingOffset)

Disassembly:
	0x03AF6F20 BL 0x3C3EDA0
	0x03AF6F24 FSUB S0, S8, S1
	0x03AF6F28 FADD S9, S9, S0
	0x03AF6F2C LDR X0, [X19 + 0x138]
	0x03AF6F30 CBZ X0, 0x3AF6F58
	0x03AF6F34 LDR X8, [X0]
	0x03AF6F38 LDR X9, [X8 + 0x688]
	0x03AF6F3C LDR X1, [X8 + 0x690]
	0x03AF6F40 BLR X9
	0x03AF6F44 FADD S0, S9, S0
	0x03AF6F48 LDP X20, X19, [X31 + 0x20]
	0x03AF6F4C LDP X30, X21, [X31 + 0x10]
	0x03AF6F50 LDP D9, D8, [X31], #0x30
	0x03AF6F54 RET
	0x03AF6F58 BL 0x1C16F20
	0x03AF6F5C FMOV S0, -1
	0x03AF6F60 RET
	0x03AF6F64 MOVZ W0, 0x1
	0x03AF6F68 RET
	0x03AF6F6C STR X30, [X31 - 0x30]!
	0x03AF6F70 STP X22, X21, [X31 + 0x10]
	0x03AF6F74 STP X20, X19, [X31 + 0x20]
	0x03AF6F78 ADRP X21, 0x8EC000
	0x03AF6F7C ADRP X22, 0x606000
	0x03AF6F80 ADRP X19, 0x663000
	0x03AF6F84 ADRP X20, 0x663000
	0x03AF6F88 LDRB W8, [X21 + 0x629]
	0x03AF6F8C LDR X22, [X22 + 0x8D8]
	0x03AF6F90 LDR X19, [X19 + 0x1B0]
	0x03AF6F94 LDR X20, [X20 + 0x180]
	0x03AF6F98 TBNZ X8, 0x0, 0x3AF6FC8
	0x03AF6F9C ADRP X0, 0x606000
	0x03AF6FA0 LDR X0, [X0 + 0x8D8]
	0x03AF6FA4 BL 0x1C16CF4
	0x03AF6FA8 ADRP X0, 0x663000
	0x03AF6FAC LDR X0, [X0 + 0x180]
	0x03AF6FB0 BL 0x1C16CF4
	0x03AF6FB4 ADRP X0, 0x663000
	0x03AF6FB8 LDR X0, [X0 + 0x1B0]
	0x03AF6FBC BL 0x1C16CF4
	0x03AF6FC0 MOVZ W8, 0x1
	0x03AF6FC4 STRB W8, [X21 + 0x629]
	0x03AF6FC8 LDR X0, [X22]
	0x03AF6FCC MOVZ W1, 0x6
	0x03AF6FD0 BL 0x1C16D6C
	0x03AF6FD4 LDR X1, [X19]
	0x03AF6FD8 MOV X2, X31
	0x03AF6FDC MOV X19, X0
	0x03AF6FE0 BL 0x32C5BD8
	0x03AF6FE4 LDR X8, [X20]
	0x03AF6FE8 LDP X22, X21, [X31 + 0x10]
	0x03AF6FEC LDR X8, [X8 + 0xB8]
	0x03AF6FF0 STR X19, [X8]
	0x03AF6FF4 LDP X20, X19, [X31 + 0x20]
	0x03AF6FF8 LDR X30, [X31], #0x30
	0x03AF6FFC RET
	0x03AF7000 MOV X1, X31
	0x03AF7004 B 0x3C32E90
	0x03AF7008 LDRB W8, [X0 + 0xE0]
	0x03AF700C CBZ W8, 0x3AF7014
	0x03AF7010 B 0x3AF701C
	0x03AF7014 LDR X0, [X0 + 0xD8]
	0x03AF7018 RET
	0x03AF701C STP X30, X23, [X31 - 0x30]!
	0x03AF7020 STP X22, X21, [X31 + 0x10]
	0x03AF7024 STP X20, X19, [X31 + 0x20]
	0x03AF7028 ADRP X21, 0x8EB000
	0x03AF702C ADRP X20, 0x605000
	0x03AF7030 LDRB W8, [X21 + 0x650]
	0x03AF7034 LDR X20, [X20 + 0x8D8]
	0x03AF7038 MOV X19, X0
	0x03AF703C TBNZ X8, 0x0, 0x3AF7054
	0x03AF7040 ADRP X0, 0x605000
	0x03AF7044 LDR X0, [X0 + 0x8D8]
	0x03AF7048 BL 0x1C16CF4
	0x03AF704C MOVZ W8, 0x1
	0x03AF7050 STRB W8, [X21 + 0x650]
	0x03AF7054 LDR W1, [X19 + 0x6B8]
	0x03AF7058 LDR X0, [X20]
	0x03AF705C ADD X20, X19, 0x6B0
	0x03AF7060 BL 0x1C16D6C
	0x03AF7064 MOV X21, X0
	0x03AF7068 MOV X0, X20
	0x03AF706C MOV X1, X31
	0x03AF7070 BL 0x3B1BBC4
	0x03AF7074 CMP W0, 0x1
	0x03AF7078 B.LT 0x3AF70C8
	0x03AF707C MOV X22, X31
	0x03AF7080 ADD X23, X21, 0x20
	0x03AF7084 MOV X0, X20
	0x03AF7088 MOV W1, W22
	0x03AF708C MOV X2, X31
	0x03AF7090 BL 0x3B1BBF0
	0x03AF7094 ANDS W31, W0, 0xFFFF
	0x03AF7098 B.EQ 0x3AF70C8
	0x03AF709C CBZ X21, 0x3AF70EC
	0x03AF70A0 LDR W8, [X21 + 0x18]
	0x03AF70A4 CMP X22, X8
	0x03AF70A8 B.CS 0x3AF70E8
	0x03AF70AC STRH W0, [X23, X22, LSL #1]
	0x03AF70B0 MOV X0, X20
	0x03AF70B4 MOV X1, X31
	0x03AF70B8 ADD X22, X22, 0x1
	0x03AF70BC BL 0x3B1BBC4
	0x03AF70C0 CMP X22, W0, SXTW
	0x03AF70C4 B.LT 0x3AF7084
	0x03AF70C8 STRB W31, [X19 + 0xE0]
	0x03AF70CC MOV X1, X21
	0x03AF70D0 LDP X20, X19, [X31 + 0x20]
	0x03AF70D4 LDP X22, X21, [X31 + 0x10]
	0x03AF70D8 MOV X0, X31
	0x03AF70DC MOV X2, X31
	0x03AF70E0 LDP X30, X23, [X31], #0x30
	0x03AF70E4 B 0x32256D4
	0x03AF70E8 BL 0x1C16F28
	0x03AF70EC BL 0x1C16F20
	0x03AF70F0 STR X30, [X31 - 0x20]!
	0x03AF70F4 STP X20, X19, [X31 + 0x10]
	0x03AF70F8 LDRB W8, [X0 + 0xE0]
	0x03AF70FC MOV X19, X0
	0x03AF7100 MOV X20, X1
	0x03AF7104 CBZ W8, 0x3AF7150
	0x03AF7108 LDR X9, [X19]
	0x03AF710C MOVZ W8, 0x3
	0x03AF7110 MOVZ W10, 0x1
	0x03AF7114 STRB W31, [X19 + 0xE0]
	0x03AF7118 STR X20, [X19 + 0xD8]
	0x03AF711C STR W8, [X19 + 0x400]
	0x03AF7120 STRB W10, [X19 + 0x370]
	0x03AF7124 LDR X8, [X9 + 0x2F8]
	0x03AF7128 LDR X1, [X9 + 0x300]
	0x03AF712C MOV X0, X19
	0x03AF7130 BLR X8
	0x03AF7134 LDR X8, [X19]
	0x03AF7138 MOV X0, X19
	0x03AF713C LDP X20, X19, [X31 + 0x10]
	0x03AF7140 LDR X2, [X8 + 0x2E8]
	0x03AF7144 LDR X1, [X8 + 0x2F0]
	0x03AF7148 LDR X30, [X31], #0x20
	0x03AF714C BR X2
	0x03AF7150 CBZ X20, 0x3AF7108
	0x03AF7154 LDR X0, [X19 + 0xD8]
	0x03AF7158 CBZ X0, 0x3AF7108
	0x03AF715C LDR W8, [X0 + 0x10]
	0x03AF7160 LDR W9, [X20 + 0x10]
	0x03AF7164 CMP W8, W9
	0x03AF7168 B.NE 0x3AF7108
	0x03AF716C MOV X1, X20
	0x03AF7170 MOV X2, X31
	0x03AF7174 BL 0x321BA08
	0x03AF7178 TBZ X0, 0x0, 0x3AF7108
	0x03AF717C LDP X20, X19, [X31 + 0x10]
	0x03AF7180 LDR X30, [X31], #0x20
	0x03AF7184 RET
	0x03AF7188 LDR X0, [X0 + 0xE8]
	0x03AF718C RET
	0x03AF7190 STR X1, [X0 + 0xE8]
	0x03AF7194 RET
	0x03AF7198 LDRB W0, [X0 + 0xF0]
	0x03AF719C RET
	0x03AF71A0 STP X30, X19, [X31 - 0x10]!
	0x03AF71A4 LDRB W9, [X0 + 0xF0]
	0x03AF71A8 AND W8, W1, 0x1
	0x03AF71AC CMP W9, W8
	0x03AF71B0 B.NE 0x3AF71BC
	0x03AF71B4 LDP X30, X19, [X31], #0x10
	0x03AF71B8 RET
	0x03AF71BC LDR X9, [X0]
	0x03AF71C0 STRB W8, [X0 + 0xF0]
	0x03AF71C4 MOVZ W8, 0x1
	0x03AF71C8 STRB W8, [X0 + 0x370]
	0x03AF71CC LDR X8, [X9 + 0x2F8]
	0x03AF71D0 LDR X1, [X9 + 0x300]
	0x03AF71D4 MOV X19, X0
	0x03AF71D8 BLR X8
	0x03AF71DC LDR X8, [X19]
	0x03AF71E0 MOV X0, X19
	0x03AF71E4 LDR X2, [X8 + 0x2E8]
	0x03AF71E8 LDR X1, [X8 + 0x2F0]
	0x03AF71EC LDP X30, X19, [X31], #0x10
	0x03AF71F0 BR X2
	0x03AF71F4 LDR X0, [X0 + 0xF8]
	0x03AF71F8 RET
	0x03AF71FC STR X30, [X31 - 0x30]!
	0x03AF7200 STP X22, X21, [X31 + 0x10]
	0x03AF7204 STP X20, X19, [X31 + 0x20]
	0x03AF7208 ADRP X22, 0x8EB000
	0x03AF720C ADRP X21, 0x5FC000
	0x03AF7210 LDRB W8, [X22 + 0x62A]
	0x03AF7214 LDR X21, [X21 + 0x598]
	0x03AF7218 MOV X20, X1
	0x03AF721C MOV X19, X0
	0x03AF7220 TBNZ X8, 0x0, 0x3AF7238
	0x03AF7224 ADRP X0, 0x5FC000
	0x03AF7228 LDR X0, [X0 + 0x598]
	0x03AF722C BL 0x1C16CF4
	0x03AF7230 MOVZ W8, 0x1
	0x03AF7234 STRB W8, [X22 + 0x62A]
	0x03AF7238 LDR X0, [X21]
	0x03AF723C LDR X21, [X19 + 0xF8]
	0x03AF7240 LDR W8, [X0 + 0xE0]
	0x03AF7244 CBNZ W8, 0x3AF724C
	0x03AF7248 BL 0x1C16DFC
	0x03AF724C MOV X0, X21
	0x03AF7250 MOV X1, X20
	0x03AF7254 MOV X2, X31
	0x03AF7258 BL 0x3C3883C
	0x03AF725C TBZ X0, 0x0, 0x3AF7270
	0x03AF7260 LDP X20, X19, [X31 + 0x20]
	0x03AF7264 LDP X22, X21, [X31 + 0x10]
	0x03AF7268 LDR X30, [X31], #0x30
	0x03AF726C RET
	0x03AF7270 LDR X8, [X19]
	0x03AF7274 STR X20, [X19 + 0xF8]
	0x03AF7278 MOV X0, X19
	0x03AF727C LDR X9, [X8 + 0x6C8]
	0x03AF7280 LDR X1, [X8 + 0x6D0]
	0x03AF7284 BLR X9
	0x03AF7288 LDR X8, [X19]
	0x03AF728C MOVZ W9, 0x1
	0x03AF7290 STRB W9, [X19 + 0x370]
	0x03AF7294 MOV X0, X19
	0x03AF7298 LDR X9, [X8 + 0x2F8]
	0x03AF729C LDR X1, [X8 + 0x300]
	0x03AF72A0 BLR X9
	0x03AF72A4 LDR X8, [X19]
	0x03AF72A8 MOV X0, X19
	0x03AF72AC LDP X20, X19, [X31 + 0x20]
	0x03AF72B0 LDP X22, X21, [X31 + 0x10]
	0x03AF72B4 LDR X2, [X8 + 0x2E8]
	0x03AF72B8 LDR X1, [X8 + 0x2F0]
	0x03AF72BC LDR X30, [X31], #0x30
	0x03AF72C0 BR X2
	0x03AF72C4 LDR X0, [X0 + 0x110]
	0x03AF72C8 RET
	0x03AF72CC STR X30, [X31 - 0x30]!
	0x03AF72D0 STP X22, X21, [X31 + 0x10]
	0x03AF72D4 STP X20, X19, [X31 + 0x20]
	0x03AF72D8 ADRP X22, 0x8EB000
	0x03AF72DC ADRP X21, 0x5FC000
	0x03AF72E0 LDRB W8, [X22 + 0x62B]
	0x03AF72E4 LDR X21, [X21 + 0x598]
	0x03AF72E8 MOV X20, X1
	0x03AF72EC MOV X19, X0
	0x03AF72F0 TBNZ X8, 0x0, 0x3AF7308
	0x03AF72F4 ADRP X0, 0x5FC000
	0x03AF72F8 LDR X0, [X0 + 0x598]
	0x03AF72FC BL 0x1C16CF4
	0x03AF7300 MOVZ W8, 0x1
	0x03AF7304 STRB W8, [X22 + 0x62B]
	0x03AF7308 LDR X0, [X21]
	0x03AF730C LDR X21, [X19 + 0x110]
	0x03AF7310 LDR W8, [X0 + 0xE0]
	0x03AF7314 CBNZ W8, 0x3AF731C
	0x03AF7318 BL 0x1C16DFC
	0x03AF731C MOV X0, X21
	0x03AF7320 MOV X1, X20
	0x03AF7324 MOV X2, X31
	0x03AF7328 BL 0x3C3883C
	0x03AF732C TBZ X0, 0x0, 0x3AF7340
	0x03AF7330 LDP X20, X19, [X31 + 0x20]
	0x03AF7334 LDP X22, X21, [X31 + 0x10]
	0x03AF7338 LDR X30, [X31], #0x30
	0x03AF733C RET
	0x03AF7340 LDR X8, [X19]
	0x03AF7344 MOV X0, X19
	0x03AF7348 MOV X1, X20
	0x03AF734C LDR X9, [X8 + 0x6D8]
	0x03AF7350 LDR X2, [X8 + 0x6E0]
	0x03AF7354 BLR X9
	0x03AF7358 LDR X8, [X19]
	0x03AF735C MOVZ W9, 0x1
	0x03AF7360 STRB W9, [X19 + 0x370]
	0x03AF7364 MOV X0, X19
	0x03AF7368 LDR X9, [X8 + 0x2F8]
	0x03AF736C LDR X1, [X8 + 0x300]
	0x03AF7370 BLR X9
	0x03AF7374 LDR X8, [X19]
	0x03AF7378 MOV X0, X19
	0x03AF737C LDP X20, X19, [X31 + 0x20]
	0x03AF7380 LDP X22, X21, [X31 + 0x10]
	0x03AF7384 LDR X2, [X8 + 0x308]
	0x03AF7388 LDR X1, [X8 + 0x310]
	0x03AF738C LDR X30, [X31], #0x30
	0x03AF7390 BR X2
	0x03AF7394 LDR X8, [X0]
	0x03AF7398 LDR X2, [X8 + 0x708]
	0x03AF739C LDR X1, [X8 + 0x710]
	0x03AF73A0 BR X2
	0x03AF73A4 STP X30, X19, [X31 - 0x10]!
	0x03AF73A8 LDR X8, [X0]
	0x03AF73AC MOV X19, X0
	0x03AF73B0 LDR X9, [X8 + 0x718]
	0x03AF73B4 LDR X2, [X8 + 0x720]
	0x03AF73B8 BLR X9
	0x03AF73BC LDR X8, [X19]
	0x03AF73C0 MOVZ W9, 0x1
	0x03AF73C4 STRB W9, [X19 + 0x370]
	0x03AF73C8 MOV X0, X19
	0x03AF73CC LDR X9, [X8 + 0x2F8]
	0x03AF73D0 LDR X1, [X8 + 0x300]
	0x03AF73D4 BLR X9
	0x03AF73D8 LDR X8, [X19]
	0x03AF73DC MOV X0, X19
	0x03AF73E0 LDR X2, [X8 + 0x308]
	0x03AF73E4 LDR X1, [X8 + 0x310]
	0x03AF73E8 LDP X30, X19, [X31], #0x10
	0x03AF73EC BR X2
	0x03AF73F0 LDR X8, [X0]
	0x03AF73F4 LDR X1, [X0 + 0x110]
	0x03AF73F8 LDR X3, [X8 + 0x6E8]
	0x03AF73FC LDR X2, [X8 + 0x6F0]
	0x03AF7400 BR X3
	0x03AF7404 STR X30, [X31 - 0x30]!
	0x03AF7408 STP X22, X21, [X31 + 0x10]
	0x03AF740C STP X20, X19, [X31 + 0x20]
	0x03AF7410 ADRP X22, 0x8EB000
	0x03AF7414 ADRP X21, 0x5FC000
	0x03AF7418 LDRB W8, [X22 + 0x62C]
	0x03AF741C LDR X21, [X21 + 0x598]
	0x03AF7420 MOV X20, X1
	0x03AF7424 MOV X19, X0
	0x03AF7428 TBNZ X8, 0x0, 0x3AF7440
	0x03AF742C ADRP X0, 0x5FC000
	0x03AF7430 LDR X0, [X0 + 0x598]
	0x03AF7434 BL 0x1C16CF4
	0x03AF7438 MOVZ W8, 0x1
	0x03AF743C STRB W8, [X22 + 0x62C]
	0x03AF7440 LDR X0, [X21]
	0x03AF7444 LDR X21, [X19 + 0x110]
	0x03AF7448 LDR W8, [X0 + 0xE0]
	0x03AF744C CBNZ W8, 0x3AF7454
	0x03AF7450 BL 0x1C16DFC
	0x03AF7454 MOV X0, X21
	0x03AF7458 MOV X1, X31
	0x03AF745C MOV X2, X31
	0x03AF7460 BL 0x3C354F8
	0x03AF7464 TBZ X0, 0x0, 0x3AF74A4
	0x03AF7468 LDR X0, [X19 + 0x110]
	0x03AF746C CBZ X0, 0x3AF74FC
	0x03AF7470 MOV X1, X31
	0x03AF7474 BL 0x3C385F8
	0x03AF7478 CBZ X20, 0x3AF74FC
	0x03AF747C MOV W21, W0
	0x03AF7480 MOV X0, X20
	0x03AF7484 MOV X1, X31
	0x03AF7488 BL 0x3C385F8
	0x03AF748C CMP W21, W0
	0x03AF7490 B.NE 0x3AF74A4
	0x03AF7494 LDP X20, X19, [X31 + 0x20]
	0x03AF7498 LDP X22, X21, [X31 + 0x10]
	0x03AF749C LDR X30, [X31], #0x30
	0x03AF74A0 RET
	0x03AF74A4 LDR X8, [X19]
	0x03AF74A8 STR X20, [X19 + 0x110]
	0x03AF74AC MOV X0, X19
	0x03AF74B0 LDR X9, [X8 + 0x7A8]
	0x03AF74B4 LDR X1, [X8 + 0x7B0]
	0x03AF74B8 BLR X9
	0x03AF74BC LDR X8, [X19]
	0x03AF74C0 MOVZ W9, 0x1
	0x03AF74C4 STR S0, [X19 + 0x618]
	0x03AF74C8 STRB W9, [X19 + 0x370]
	0x03AF74CC LDR X9, [X8 + 0x2F8]
	0x03AF74D0 LDR X1, [X8 + 0x300]
	0x03AF74D4 MOV X0, X19
	0x03AF74D8 BLR X9
	0x03AF74DC LDR X8, [X19]
	0x03AF74E0 MOV X0, X19
	0x03AF74E4 LDP X20, X19, [X31 + 0x20]
	0x03AF74E8 LDP X22, X21, [X31 + 0x10]
	0x03AF74EC LDR X2, [X8 + 0x308]
	0x03AF74F0 LDR X1, [X8 + 0x310]

ISIL:
	001 Move [X31-160], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X29
	009 Move [X31+72], X30
	010 Move [X31+80], X28
	011 Move [X31+88], X27
	012 Move [X31+96], X26
	013 Move [X31+104], X25
	014 Move [X31+112], X24
	015 Move [X31+120], X23
	016 Move [X31+128], X22
	017 Move [X31+136], X21
	018 Move [X31+144], X20
	019 Move [X31+152], X19
	020 Subtract X31, X31, 592
	021 Move X21, 0x8ED000
	022 Move W8, [X21+1565]
	023 Move X19, X1
	024 Move X20, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {34}
	029 Move X0, 0x629000
	030 Move X0, [X0+2024]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+1565], W8
	034 Move X8, [X20+312]
	035 Compare X8, 0
	036 JumpIfEqual {404}
	037 Move X23, [X8+872]
	038 Move W21, [X20+564]
	039 Move X0, X20
	040 Call TMP_InputField.get_compositionLength, X0
	041 Add W1, W0, W21
	042 Move X0, X20
	043 Call TMP_InputField.GetCaretPositionFromStringIndex, X0, X1
	044 Move W21, [X20+568]
	045 Move [X20+572], W0
	046 Move X0, X20
	047 Add X24, X20, 572
	048 Call TMP_InputField.get_compositionLength, X0
	049 Add W1, W0, W21
	050 Move X0, X20
	051 Call TMP_InputField.GetCaretPositionFromStringIndex, X0, X1
	052 Move X8, [X20+256]
	053 Move [X20+576], W0
	054 Compare X8, 0
	055 JumpIfEqual {69}
	056 Compare X23, 0
	057 JumpIfEqual {404}
	058 NotImplemented "Instruction LDRSW not yet implemented."
	059 Move X8, [X23+56]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Compare X8, 0
	062 JumpIfEqual {404}
	063 Move W10, [X8+24]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move W10, 376
	066 NotImplemented "Instruction MADD not yet implemented."
	067 Move W21, [X8+36]
	068 Move W22, [X20+568]
	069 Compare X23, 0
	070 JumpIfNotEqual {96}
	071 Compare X8, 0
	072 JumpIfEqual {404}
	073 Move W9, [X8+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move W9, 376
	076 NotImplemented "Instruction SMADDL not yet implemented."
	077 Move W21, [X8+36]
	078 Move W22, [X20+564]
	079 Move X0, X20
	080 Call TMP_InputField.get_compositionLength, X0
	081 Subtract W8, W22, W21
	082 Move X22, [X20+256]
	083 Add W2, W8, W0
	084 Add X0, X31, 512
	085 Move W1, W21
	086 Move X3, X31
	087 Move [X31+512], X31
	088 Call RangeInt..ctor, X0, X1, X2
	089 Compare X22, 0
	090 JumpIfEqual {404}
	091 Move X1, [X31+512]
	092 Move X0, X22
	093 Move X2, X31
	094 Call TouchScreenKeyboard.set_selection, X0, X1
	095 Move W0, [X20+576]
	096 Move X8, [X23+56]
	097 Compare X8, 0
	098 JumpIfEqual {404}
	099 Move W9, [X23+24]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move W9, [X8+24]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move W10, 376
	104 NotImplemented "Instruction SMADDL not yet implemented."
	105 Move X9, W0
	106 Add X10, X10, 320
	107 Move W9, [X8+24]
	108 Subtract W10, W0, 1
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move W11, 376
	111 Move X9, W10
	112 NotImplemented "Instruction SMADDL not yet implemented."
	113 Add X10, X10, 324
	114 Move W11, 376
	115 NotImplemented "Instruction MADD not yet implemented."
	116 Move V1, [X8+336]
	117 Move V2, [X8+328]
	118 Move V0, [X10]
	119 Move W1, 1
	120 Move X0, X20
	121 Subtract S2, S2, S1
	122 Call TMP_InputField.AdjustRectTransformRelativeToViewport, X0, X1, V0, X2
	123 Move V0, [X24]
	124 NotImplemented "Instruction MOVI not yet implemented."
	125 Move X9, [X23+56]
	126 NotImplemented "Instruction SMAX not yet implemented."
	127 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	128 Move W10, S0
	129 NotImplemented "Instruction CMP not yet implemented."
	130 NotImplemented "Instruction CSEL not yet implemented."
	131 NotImplemented "Instruction CSEL not yet implemented."
	132 Compare X9, 0
	133 JumpIfEqual {404}
	134 Move W8, [X9+24]
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move X8, [X23+80]
	137 Compare X8, 0
	138 JumpIfEqual {404}
	139 Move W10, 376
	140 NotImplemented "Instruction UMADDL not yet implemented."
	141 Move W24, [X9+100]
	142 Move W9, [X8+24]
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Move X25, 0x628000
	145 Move X25, [X25+2024]
	146 Move X9, W24
	147 Move W10, 92
	148 NotImplemented "Instruction MADD not yet implemented."
	149 Move X0, [X25]
	150 Move W27, [X8+60]
	151 Add X26, X31, 400
	152 Move W9, [X0+224]
	153 Compare W9, 0
	154 JumpIfNotEqual {157}
	155 Call 0x1C17DFC
	156 Move X0, [X25]
	157 Move X8, [X0+184]
	158 Move X25, 0x8E3000
	159 NotImplemented "Instruction LDUR not yet implemented."
	160 Move V3, [X8+2]
	161 Move [X26+172], V0
	162 Move V2, [X8+96]
	163 Move V0, [X8+112]
	164 Move V1, [X8+5]
	165 Move W8, [X25+1935]
	166 Move [X31+544], V0
	167 Move [X31+552], V3
	168 Move [X31+512], V1
	169 Move [X31+520], V2
	170 Compare W8, 0
	171 JumpIfNotEqual {177}
	172 Move X0, 0x605000
	173 Move X0, [X0+3848]
	174 Call 0x1C17CF4
	175 Move W8, 1
	176 Move [X25+1935], W8
	177 Move X8, 0x605000
	178 Move X8, [X8+3848]
	179 Move V0, [X20+524]
	180 Move V1, [X20+528]
	181 Move V2, [X20+532]
	182 Move X8, [X8]
	183 Move V3, [X20+536]
	184 Move X0, X31
	185 Move X8, [X8+184]
	186 Move S8, [X8]
	187 Move S9, [X8+4]
	188 Call 0x1E44664
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Add X9, X31, 400
	191 Add X10, X31, 288
	192 Add X11, X31, 176
	193 Add X14, X9, 12
	194 Add X13, X9, 60
	195 Add X9, X10, 12
	196 Add X12, X31, 64
	197 Move [X31+48], X9
	198 Move [X31+56], X13
	199 Add X13, X10, 60
	200 Add X9, X11, 12
	201 Move [X31+32], X9
	202 Move [X31+40], X13
	203 Add X10, X11, 60
	204 Add X9, X12, 12
	205 Subtract W8, W22, 1
	206 Move [X31+16], X9
	207 Move [X31+24], X10
	208 Add X9, X12, 60
	209 Move X20, X0
	210 Move W26, W27
	211 Move W27, W21
	212 Move W25, W22
	213 Move [X31+600], X14
	214 Move [X31+8], X9
	215 Move W28, W8
	216 NotImplemented "Instruction MOVI not yet implemented."
	217 NotImplemented "Instruction LDRSW not yet implemented."
	218 NotImplemented "Instruction CMP not yet implemented."
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Move W8, W26
	221 NotImplemented "Instruction CMP not yet implemented."
	222 Add X27, X27, 1
	223 Move X8, [X23+56]
	224 Compare X8, 0
	225 JumpIfEqual {404}
	226 Move X9, [X8+24]
	227 NotImplemented "Instruction CMP not yet implemented."
	228 And X10, X9, 0
	229 NotImplemented "Instruction CMP not yet implemented."
	230 Move W10, 376
	231 NotImplemented "Instruction SMADDL not yet implemented."
	232 NotImplemented "Instruction MADD not yet implemented."
	233 Move V11, [X11+320]
	234 Move V12, [X10+324]
	235 Move W12, 376
	236 Compare X27, 0
	237 JumpIfEqual {247}
	238 NotImplemented "Instruction LDRH not yet implemented."
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Subtract X10, X27, 1
	241 NotImplemented "Instruction CMP not yet implemented."
	242 NotImplemented "Instruction MADD not yet implemented."
	243 NotImplemented "Instruction LDRH not yet implemented."
	244 NotImplemented "Instruction CMP not yet implemented."
	245 NotImplemented "Instruction MADD not yet implemented."
	246 Move V12, [X8+324]
	247 Move X8, [X23+80]
	248 Compare X8, 0
	249 JumpIfEqual {404}
	250 Move W9, [X8+24]
	251 NotImplemented "Instruction CMP not yet implemented."
	252 Compare X19, 0
	253 JumpIfEqual {404}
	254 Move W9, 92
	255 NotImplemented "Instruction SMADDL not yet implemented."
	256 Move V13, [X8+76]
	257 Move V14, [X8+84]
	258 Move X0, X19
	259 Move X1, X31
	260 Call VertexHelper.get_currentVertCount, X0
	261 Add X22, X31, 400
	262 Move V0, [X31+35]
	263 NotImplemented "Instruction LDUR not yet implemented."
	264 Move X8, [X31+600]
	265 Move [X31+400], S11
	266 Move [X31+404], S14
	267 Move [X31+408], W31
	268 Move [X8], V0
	269 Move V0, [X31+512]
	270 Move V2, [X31+528]
	271 Move [X8+12], V1
	272 Move V1, [X31+34]
	273 Move X8, [X31+56]
	274 Move W21, W0
	275 Add X1, X31, 400
	276 Move X0, X19
	277 Move X2, X31
	278 Move [X31+440], W20
	279 Move [X31+444], S8
	280 Move [X31+448], S9
	281 Move [X22+52], D10
	282 Move [X8+16], V2
	283 Move [X8+24], V1
	284 Move [X8], V0
	285 Call VertexHelper.AddVert, X0, X1
	286 NotImplemented "Instruction LDUR not yet implemented."
	287 Move V1, [X31+35]
	288 Move X8, [X31+48]
	289 Move [X31+288], S12
	290 Move [X31+292], S14
	291 Move [X31+296], W31
	292 Move [X8+12], V0
	293 Move V0, [X31+512]
	294 Move V2, [X31+528]
	295 Move [X8], V1
	296 Move V1, [X31+34]
	297 Move X8, [X31+40]
	298 Add X29, X31, 176
	299 Add X1, X31, 288
	300 Move X0, X19
	301 Move X2, X31
	302 Move [X31+328], W20
	303 Move [X31+332], S8
	304 Move [X31+336], S9
	305 Move [X29+164], D10
	306 Move [X8+16], V2
	307 Move [X8+24], V1
	308 Move [X8], V0
	309 Call VertexHelper.AddVert, X0, X1
	310 NotImplemented "Instruction LDUR not yet implemented."
	311 Move V1, [X31+35]
	312 Move X8, [X31+32]
	313 Move [X31+176], S12
	314 Move [X31+184], S13
	315 Move [X31+184], W31
	316 Add X1, X31, 176
	317 Move [X8+12], V0
	318 Move V0, [X31+512]
	319 Move V2, [X31+528]
	320 Move [X8], V1
	321 Move V1, [X31+34]
	322 Move X8, [X31+24]
	323 Move X0, X19
	324 Move X2, X31
	325 Move [X31+216], W20
	326 Move [X31+220], S8
	327 Move [X31+228], S9
	328 Move [X29+52], D10
	329 Move [X8+16], V2
	330 Move [X8+24], V1
	331 Move [X8], V0
	332 Call VertexHelper.AddVert, X0, X1
	333 NotImplemented "Instruction LDUR not yet implemented."
	334 Move V1, [X31+35]
	335 Move X8, [X31+16]
	336 Move [X31+64], S11
	337 Move [X31+72], S13
	338 Move [X31+72], W31
	339 Add X1, X31, 64
	340 Move [X8+12], V0
	341 Move V0, [X31+512]
	342 Move V2, [X31+528]
	343 Move [X8], V1
	344 Move V1, [X31+34]
	345 Move X8, [X31+8]
	346 Move X0, X19
	347 Move X2, X31
	348 Move [X31+104], W20
	349 Move [X31+108], S8
	350 Move [X31+116], S9
	351 Move [X31+116], D10
	352 Move [X8+16], V2
	353 Move [X8+24], V1
	354 Move [X8], V0
	355 Call VertexHelper.AddVert, X0, X1
	356 Add W22, W21, 2
	357 Add W2, W21, 1
	358 Move X0, X19
	359 Move W1, W21
	360 Move W3, W22
	361 Move X4, X31
	362 Call VertexHelper.AddTriangle, X0, X1, X2, X3
	363 Add W2, W21, 3
	364 Move X0, X19
	365 Move W1, W22
	366 Move W3, W21
	367 Move X4, X31
	368 Call VertexHelper.AddTriangle, X0, X1, X2, X3
	369 Move W8, [X23+44]
	370 Add X27, X27, 1
	371 Add W24, W24, 1
	372 Move W21, W27
	373 NotImplemented "Instruction CMP not yet implemented."
	374 Move X8, [X23+80]
	375 Compare X8, 0
	376 JumpIfEqual {404}
	377 Move W9, [X8+24]
	378 NotImplemented "Instruction CMP not yet implemented."
	379 Move W9, 92
	380 NotImplemented "Instruction SMADDL not yet implemented."
	381 Move W26, [X8+60]
	382 NotImplemented "Instruction CMP not yet implemented."
	383 Add X31, X31, 592
	384 Move X20, [X31+144]
	385 Move X19, [X31+152]
	386 Move X22, [X31+128]
	387 Move X21, [X31+136]
	388 Move X24, [X31+112]
	389 Move X23, [X31+120]
	390 Move X26, [X31+96]
	391 Move X25, [X31+104]
	392 Move X28, [X31+80]
	393 Move X27, [X31+88]
	394 Move X29, [X31+64]
	395 Move X30, [X31+72]
	396 Move D9, [X31+48]
	397 Move D8, [X31+56]
	398 Move D11, [X31+32]
	399 Move D10, [X31+40]
	400 Move D13, [X31+16]
	401 Move D12, [X31+24]
	402 Move V14, [X31+160]
	403 Return 
	404 Call 0x1C17F20
	405 Call 0x1C17F28

Method: System.Void AdjustRectTransformRelativeToViewport(UnityEngine.Vector2 startPosition, System.Single height, System.Boolean isCharVisible)

Disassembly:
	0x03AF7644 STRB W8, [X0 + 0x160]
	0x03AF7648 STRB W10, [X0 + 0x370]
	0x03AF764C LDR X2, [X9 + 0x2F8]
	0x03AF7650 LDR X1, [X9 + 0x300]
	0x03AF7654 BR X2
	0x03AF7658 ADD X9, X0, 0x168
	0x03AF765C LDP V1, V0, [X9 + 0x20]
	0x03AF7660 LDP V3, V2, [X9]
	0x03AF7664 STP V1, V0, [X8 + 0x20]
	0x03AF7668 STP V3, V2, [X8]
	0x03AF766C RET
	0x03AF7670 MOVZ W8, 0x1
	0x03AF7674 STRB W8, [X0 + 0x370]
	0x03AF7678 LDP V0, V1, [X1 + 0x20]
	0x03AF767C LDP V2, V3, [X1]
	0x03AF7680 ADD X8, X0, 0x168
	0x03AF7684 STP V0, V1, [X8 + 0x20]
	0x03AF7688 STP V2, V3, [X8]
	0x03AF768C LDR X8, [X0]
	0x03AF7690 LDR X2, [X8 + 0x2F8]
	0x03AF7694 LDR X1, [X8 + 0x300]
	0x03AF7698 BR X2
	0x03AF769C LDR X0, [X0 + 0x1A8]
	0x03AF76A0 RET
	0x03AF76A4 LDR X8, [X0]
	0x03AF76A8 MOVZ W9, 0x1
	0x03AF76AC STR X1, [X0 + 0x1A8]
	0x03AF76B0 STRB W9, [X0 + 0x370]
	0x03AF76B4 LDR X2, [X8 + 0x2F8]
	0x03AF76B8 LDR X1, [X8 + 0x300]
	0x03AF76BC BR X2
	0x03AF76C0 LDR X0, [X0 + 0x1B0]
	0x03AF76C4 RET
	0x03AF76C8 STP X30, X19, [X31 - 0x10]!
	0x03AF76CC LDR X8, [X0]
	0x03AF76D0 MOVZ W9, 0x1
	0x03AF76D4 STR X1, [X0 + 0x1B0]
	0x03AF76D8 STRB W9, [X0 + 0x370]
	0x03AF76DC LDR X9, [X8 + 0x2F8]
	0x03AF76E0 LDR X1, [X8 + 0x300]
	0x03AF76E4 MOV X19, X0
	0x03AF76E8 BLR X9
	0x03AF76EC LDR X8, [X19]
	0x03AF76F0 MOV X0, X19
	0x03AF76F4 LDR X2, [X8 + 0x2E8]
	0x03AF76F8 LDR X1, [X8 + 0x2F0]
	0x03AF76FC LDP X30, X19, [X31], #0x10
	0x03AF7700 BR X2
	0x03AF7704 LDRB W0, [X0 + 0x1B8]
	0x03AF7708 RET
	0x03AF770C LDRB W9, [X0 + 0x1B8]
	0x03AF7710 AND W8, W1, 0x1
	0x03AF7714 CMP W9, W8
	0x03AF7718 B.NE 0x3AF7720
	0x03AF771C RET
	0x03AF7720 LDR X9, [X0]
	0x03AF7724 STRB W8, [X0 + 0x1B8]
	0x03AF7728 MOVZ W8, 0x1
	0x03AF772C STRB W8, [X0 + 0x370]
	0x03AF7730 LDR X2, [X9 + 0x2F8]
	0x03AF7734 LDR X1, [X9 + 0x300]
	0x03AF7738 BR X2
	0x03AF773C LDR X0, [X0 + 0x1C0]
	0x03AF7740 RET
	0x03AF7744 STP X30, X19, [X31 - 0x10]!
	0x03AF7748 LDR X8, [X0]
	0x03AF774C MOVZ W9, 0x1
	0x03AF7750 STR X1, [X0 + 0x1C0]
	0x03AF7754 STRB W9, [X0 + 0x370]
	0x03AF7758 LDR X9, [X8 + 0x2F8]
	0x03AF775C LDR X1, [X8 + 0x300]
	0x03AF7760 MOV X19, X0
	0x03AF7764 BLR X9
	0x03AF7768 LDR X8, [X19]
	0x03AF776C MOV X0, X19
	0x03AF7770 LDR X2, [X8 + 0x2E8]
	0x03AF7774 LDR X1, [X8 + 0x2F0]
	0x03AF7778 LDP X30, X19, [X31], #0x10
	0x03AF777C BR X2
	0x03AF7780 STP X30, X19, [X31 - 0x10]!
	0x03AF7784 LDR W1, [X0 + 0x1D0]
	0x03AF7788 MOV X19, X0
	0x03AF778C BL 0x3AF77B8
	0x03AF7790 STR X0, [X19 + 0x1C8]
	0x03AF7794 CBNZ X0, 0x3AF77AC
	0x03AF7798 BL 0x3B18B18
	0x03AF779C STR X0, [X19 + 0x1C8]
	0x03AF77A0 CBZ X0, 0x3AF77B4
	0x03AF77A4 LDR W8, [X0 + 0x18]
	0x03AF77A8 STR W8, [X19 + 0x1D0]
	0x03AF77AC LDP X30, X19, [X31], #0x10
	0x03AF77B0 RET
	0x03AF77B4 BL 0x1C16F20
	0x03AF77B8 STR X30, [X31 - 0x30]!
	0x03AF77BC STP X22, X21, [X31 + 0x10]
	0x03AF77C0 STP X20, X19, [X31 + 0x20]
	0x03AF77C4 ADRP X21, 0x8EB000
	0x03AF77C8 ADRP X22, 0x5FC000
	0x03AF77CC LDRB W8, [X21 + 0x644]
	0x03AF77D0 LDR X22, [X22 + 0x598]
	0x03AF77D4 MOV W19, W1
	0x03AF77D8 MOV X20, X0
	0x03AF77DC TBNZ X8, 0x0, 0x3AF77F4
	0x03AF77E0 ADRP X0, 0x5FC000
	0x03AF77E4 LDR X0, [X0 + 0x598]
	0x03AF77E8 BL 0x1C16CF4
	0x03AF77EC MOVZ W8, 0x1
	0x03AF77F0 STRB W8, [X21 + 0x644]
	0x03AF77F4 LDR X0, [X22]
	0x03AF77F8 LDR X21, [X20 + 0x1C0]
	0x03AF77FC LDR W8, [X0 + 0xE0]
	0x03AF7800 CBNZ W8, 0x3AF7808
	0x03AF7804 BL 0x1C16DFC
	0x03AF7808 MOV X0, X21
	0x03AF780C MOV X1, X31
	0x03AF7810 MOV X2, X31
	0x03AF7814 BL 0x3C354F8
	0x03AF7818 TBZ X0, 0x0, 0x3AF7834
	0x03AF781C LDR X0, [X20 + 0x1C0]
	0x03AF7820 CBZ X0, 0x3AF78A4
	0x03AF7824 MOV W1, W19
	0x03AF7828 MOV X2, X31
	0x03AF782C BL 0x3B19298
	0x03AF7830 CBNZ X0, 0x3AF7894
	0x03AF7834 MOV X0, X31
	0x03AF7838 BL 0x3B1407C
	0x03AF783C LDR X8, [X22]
	0x03AF7840 MOV X20, X0
	0x03AF7844 LDR W9, [X8 + 0xE0]
	0x03AF7848 CBNZ W9, 0x3AF7854
	0x03AF784C MOV X0, X8
	0x03AF7850 BL 0x1C16DFC
	0x03AF7854 MOV X0, X20
	0x03AF7858 MOV X1, X31
	0x03AF785C MOV X2, X31
	0x03AF7860 BL 0x3C354F8
	0x03AF7864 MOV W8, W0
	0x03AF7868 MOV X0, X31
	0x03AF786C TBZ X8, 0x0, 0x3AF7894
	0x03AF7870 MOV X0, X31
	0x03AF7874 BL 0x3B1407C
	0x03AF7878 CBZ X0, 0x3AF78A4
	0x03AF787C MOV W1, W19
	0x03AF7880 LDP X20, X19, [X31 + 0x20]
	0x03AF7884 LDP X22, X21, [X31 + 0x10]
	0x03AF7888 MOV X2, X31
	0x03AF788C LDR X30, [X31], #0x30
	0x03AF7890 B 0x3B19298
	0x03AF7894 LDP X20, X19, [X31 + 0x20]
	0x03AF7898 LDP X22, X21, [X31 + 0x10]
	0x03AF789C LDR X30, [X31], #0x30
	0x03AF78A0 RET
	0x03AF78A4 BL 0x1C16F20
	0x03AF78A8 STP X30, X19, [X31 - 0x10]!
	0x03AF78AC STR X1, [X0 + 0x1C8]
	0x03AF78B0 CBZ X1, 0x3AF78F0
	0x03AF78B4 LDR W8, [X1 + 0x18]
	0x03AF78B8 LDR X9, [X0]
	0x03AF78BC MOVZ W10, 0x1
	0x03AF78C0 STRB W10, [X0 + 0x370]
	0x03AF78C4 STR W8, [X0 + 0x1D0]
	0x03AF78C8 LDR X8, [X9 + 0x2F8]
	0x03AF78CC LDR X1, [X9 + 0x300]
	0x03AF78D0 MOV X19, X0
	0x03AF78D4 BLR X8
	0x03AF78D8 LDR X8, [X19]
	0x03AF78DC MOV X0, X19
	0x03AF78E0 LDR X2, [X8 + 0x2E8]
	0x03AF78E4 LDR X1, [X8 + 0x2F0]
	0x03AF78E8 LDP X30, X19, [X31], #0x10
	0x03AF78EC BR X2
	0x03AF78F0 BL 0x1C16F20
	0x03AF78F4 LDRB W0, [X0 + 0x1D4]
	0x03AF78F8 RET
	0x03AF78FC LDRB W9, [X0 + 0x1D4]
	0x03AF7900 AND W8, W1, 0x1
	0x03AF7904 CMP W9, W8
	0x03AF7908 B.NE 0x3AF7910
	0x03AF790C RET
	0x03AF7910 LDR X9, [X0]
	0x03AF7914 MOVZ W10, 0x1
	0x03AF7918 STRB W8, [X0 + 0x1D4]
	0x03AF791C STRB W10, [X0 + 0x370]
	0x03AF7920 LDR X2, [X9 + 0x2F8]
	0x03AF7924 LDR X1, [X9 + 0x300]
	0x03AF7928 BR X2
	0x03AF792C STP X30, X21, [X31 - 0x20]!
	0x03AF7930 STP X20, X19, [X31 + 0x10]
	0x03AF7934 ADRP X21, 0x8EB000
	0x03AF7938 ADRP X20, 0x5FC000
	0x03AF793C LDRB W8, [X21 + 0x62D]
	0x03AF7940 LDR X20, [X20 + 0x598]
	0x03AF7944 MOV X19, X0
	0x03AF7948 TBNZ X8, 0x0, 0x3AF796C
	0x03AF794C ADRP X0, 0x5FC000
	0x03AF7950 LDR X0, [X0 + 0x598]
	0x03AF7954 BL 0x1C16CF4
	0x03AF7958 ADRP X0, 0x661000
	0x03AF795C LDR X0, [X0 + 0x338]
	0x03AF7960 BL 0x1C16CF4
	0x03AF7964 MOVZ W8, 0x1
	0x03AF7968 STRB W8, [X21 + 0x62D]
	0x03AF796C LDR X0, [X20]
	0x03AF7970 LDR X20, [X19 + 0x110]
	0x03AF7974 LDR W8, [X0 + 0xE0]
	0x03AF7978 CBNZ W8, 0x3AF7980
	0x03AF797C BL 0x1C16DFC
	0x03AF7980 MOV X0, X20
	0x03AF7984 MOV X1, X31
	0x03AF7988 MOV X2, X31
	0x03AF798C BL 0x3C3883C
	0x03AF7990 TBZ X0, 0x0, 0x3AF799C
	0x03AF7994 LDR W0, [X19 + 0x1D8]
	0x03AF7998 B 0x3AF79E0
	0x03AF799C ADRP X21, 0x661000
	0x03AF79A0 LDR X21, [X21 + 0x338]
	0x03AF79A4 LDR X20, [X19 + 0x110]
	0x03AF79A8 LDR X0, [X21]
	0x03AF79AC LDR W8, [X0 + 0xE0]
	0x03AF79B0 CBNZ W8, 0x3AF79B8
	0x03AF79B4 BL 0x1C16DFC
	0x03AF79B8 CBZ X20, 0x3AF79F0
	0x03AF79BC LDR X8, [X21]
	0x03AF79C0 MOV X0, X20
	0x03AF79C4 MOV X2, X31
	0x03AF79C8 LDR X8, [X8 + 0xB8]
	0x03AF79CC LDR W1, [X8 + 0x8]
	0x03AF79D0 BL 0x3C14864
	0x03AF79D4 MOV X0, X31
	0x03AF79D8 BL 0x1E43664
	0x03AF79DC STR W0, [X19 + 0x1D8]
	0x03AF79E0 LDP X20, X19, [X31 + 0x10]
	0x03AF79E4 MOV W0, W0
	0x03AF79E8 LDP X30, X21, [X31], #0x20
	0x03AF79EC RET
	0x03AF79F0 BL 0x1C16F20
	0x03AF79F4 STP X30, X21, [X31 - 0x20]!
	0x03AF79F8 STP X20, X19, [X31 + 0x10]
	0x03AF79FC MOV X19, X0
	0x03AF7A00 LDR W0, [X0 + 0x1D8]
	0x03AF7A04 AND X21, X1, 0x0
	0x03AF7A08 MOV X20, X1
	0x03AF7A0C MOV X1, X21
	0x03AF7A10 MOV X2, X31
	0x03AF7A14 BL 0x3ADAC28
	0x03AF7A18 TBZ X0, 0x0, 0x3AF7A28
	0x03AF7A1C LDP X20, X19, [X31 + 0x10]
	0x03AF7A20 LDP X30, X21, [X31], #0x20
	0x03AF7A24 RET
	0x03AF7A28 LDR X8, [X19]
	0x03AF7A2C MOV X0, X19
	0x03AF7A30 MOV X1, X21
	0x03AF7A34 LDR X9, [X8 + 0x748]
	0x03AF7A38 LDR X2, [X8 + 0x750]
	0x03AF7A3C BLR X9
	0x03AF7A40 LDR X8, [X19]
	0x03AF7A44 MOVZ W9, 0x1
	0x03AF7A48 STR W20, [X19 + 0x1D8]
	0x03AF7A4C STRB W9, [X19 + 0x370]
	0x03AF7A50 LDR X9, [X8 + 0x2F8]
	0x03AF7A54 LDR X1, [X8 + 0x300]
	0x03AF7A58 MOV X0, X19
	0x03AF7A5C BLR X9
	0x03AF7A60 LDR X8, [X19]
	0x03AF7A64 MOV X0, X19
	0x03AF7A68 LDP X20, X19, [X31 + 0x10]
	0x03AF7A6C LDR X2, [X8 + 0x308]
	0x03AF7A70 LDR X1, [X8 + 0x310]
	0x03AF7A74 LDP X30, X21, [X31], #0x20
	0x03AF7A78 BR X2
	0x03AF7A7C STP X30, X21, [X31 - 0x20]!
	0x03AF7A80 STP X20, X19, [X31 + 0x10]
	0x03AF7A84 ADRP X21, 0x8EB000
	0x03AF7A88 ADRP X20, 0x5FC000
	0x03AF7A8C LDRB W8, [X21 + 0x62E]
	0x03AF7A90 LDR X20, [X20 + 0x598]
	0x03AF7A94 MOV X19, X0
	0x03AF7A98 TBNZ X8, 0x0, 0x3AF7ABC
	0x03AF7A9C ADRP X0, 0x5FC000
	0x03AF7AA0 LDR X0, [X0 + 0x598]
	0x03AF7AA4 BL 0x1C16CF4
	0x03AF7AA8 ADRP X0, 0x661000
	0x03AF7AAC LDR X0, [X0 + 0x338]
	0x03AF7AB0 BL 0x1C16CF4
	0x03AF7AB4 MOVZ W8, 0x1
	0x03AF7AB8 STRB W8, [X21 + 0x62E]
	0x03AF7ABC LDR X0, [X20]
	0x03AF7AC0 LDR X20, [X19 + 0x110]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X22
	012 Move [X31+104], X21
	013 Move [X31+112], X20
	014 Move [X31+120], X19
	015 Move X22, 0x8EC000
	016 Move X21, 0x5FD000
	017 Move W8, [X22+1566]
	018 Move X21, [X21+1432]
	019 Move W20, W1
	020 Move V9, V2
	021 Move V10, V1
	022 Move V8, V0
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {33}
	028 Move X0, 0x5FD000
	029 Move X0, [X0+1432]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X22+1566], W8
	033 Move X0, [X21]
	034 Move X21, [X19+272]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X21
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Equality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {312}
	047 Move X0, X19
	048 Move X1, X31
	049 Call Component.get_transform, X0
	050 Compare X0, 0
	051 JumpIfEqual {327}
	052 Move X1, X31
	053 Call Transform.get_localPosition, X0
	054 Move X0, [X19+312]
	055 Compare X0, 0
	056 JumpIfEqual {327}
	057 Move X1, X31
	058 Move V12, V0
	059 Move V11, V1
	060 Call TMP_Text.get_rectTransform, X0
	061 Compare X0, 0
	062 JumpIfEqual {327}
	063 Move X1, X31
	064 Call Transform.get_localPosition, X0
	065 Move X0, [X19+272]
	066 Move [X31+92], S0
	067 Compare X0, 0
	068 JumpIfEqual {327}
	069 Move X1, X31
	070 Move [X31+12], S1
	071 Move [X31+88], S9
	072 Call Transform.get_localPosition, X0
	073 Move X0, [X19+272]
	074 Compare X0, 0
	075 JumpIfEqual {327}
	076 Move X1, X31
	077 Move V9, V0
	078 Move V13, V1
	079 Call RectTransform.get_rect, X0
	080 Move X0, [X19+312]
	081 Compare X0, 0
	082 JumpIfEqual {327}
	083 Move V14, V1
	084 Move X8, [X0]
	085 Move V1, [X31+92]
	086 Move V15, V3
	087 Move X9, [X8+1480]
	088 Add S1, S8, S1
	089 Move X1, [X8+1488]
	090 Add S1, S1, S9
	091 Add S8, S12, S1
	092 Add S1, S12, S9
	093 Add S12, S1, S0
	094 Move [X31+8], S1
	095 Add S9, S2, S12
	096 NotImplemented "Instruction BLR not yet implemented."
	097 Move V0, [X19+556]
	098 Add S1, S8, S2
	099 Move [X31+4], S9
	100 NotImplemented "Instruction SCVTF not yet implemented."
	101 Add S0, S1, S0
	102 Subtract S9, S9, S0
	103 NotImplemented "Instruction FCMP not yet implemented."
	104 Move W8, [X19+400]
	105 Subtract W8, W8, 1
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move TEMP, X20
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {129}
	111 Move X0, [X19+312]
	112 Compare X0, 0
	113 JumpIfEqual {327}
	114 Move X1, X31
	115 Call TMP_Text.get_rectTransform, X0
	116 Compare X0, 0
	117 JumpIfEqual {327}
	118 Move X1, X31
	119 Move X20, X0
	120 Call RectTransform.get_anchoredPosition, X0
	121 Move S2, W31
	122 Add S0, S9, S0
	123 Add S1, S1, S2
	124 Move X0, X20
	125 Move X1, X31
	126 Call RectTransform.set_anchoredPosition, X0, X1
	127 Move X0, X19
	128 Call TMP_InputField.AssignPositioningIfNeeded, X0
	129 Move X0, [X19+312]
	130 Compare X0, 0
	131 JumpIfEqual {327}
	132 Move X8, [X0]
	133 Move X9, [X8+1480]
	134 Move X1, [X8+1488]
	135 NotImplemented "Instruction BLR not yet implemented."
	136 Subtract S0, S8, S0
	137 Subtract S8, S0, S12
	138 NotImplemented "Instruction FCMP not yet implemented."
	139 Move X0, [X19+312]
	140 Compare X0, 0
	141 JumpIfEqual {327}
	142 Move X1, X31
	143 Call TMP_Text.get_rectTransform, X0
	144 Compare X0, 0
	145 JumpIfEqual {327}
	146 Move X1, X31
	147 Move X20, X0
	148 Call RectTransform.get_anchoredPosition, X0
	149 Move S2, W31
	150 Subtract S0, S0, S8
	151 Add S1, S1, S2
	152 Move X0, X20
	153 Move X1, X31
	154 Call RectTransform.set_anchoredPosition, X0, X1
	155 Move X0, X19
	156 Call TMP_InputField.AssignPositioningIfNeeded, X0
	157 Move W8, [X19+400]
	158 Compare W8, 0
	159 JumpIfEqual {209}
	160 Move V0, [X31+12]
	161 Move V2, [X31+88]
	162 Add S1, S11, S13
	163 Move X8, -50380800
	164 Add S0, S10, S0
	165 Add S0, S0, S13
	166 Add S8, S1, S14
	167 Move V1, [X8+752]
	168 Add S9, S11, S0
	169 Add S0, S15, S8
	170 Add S2, S9, S2
	171 Subtract S10, S0, S2
	172 NotImplemented "Instruction FCMP not yet implemented."
	173 Move X0, [X19+312]
	174 Compare X0, 0
	175 JumpIfEqual {327}
	176 Move X1, X31
	177 Call TMP_Text.get_rectTransform, X0
	178 Compare X0, 0
	179 JumpIfEqual {327}
	180 Move X1, X31
	181 Move X20, X0
	182 Call RectTransform.get_anchoredPosition, X0
	183 Move S2, W31
	184 Add S0, S0, S2
	185 Add S1, S10, S1
	186 Move X0, X20
	187 Move X1, X31
	188 Call RectTransform.set_anchoredPosition, X0, X1
	189 Move X0, X19
	190 Call TMP_InputField.AssignPositioningIfNeeded, X0
	191 Subtract S8, S9, S8
	192 NotImplemented "Instruction FCMP not yet implemented."
	193 Move X0, [X19+312]
	194 Compare X0, 0
	195 JumpIfEqual {327}
	196 Move X1, X31
	197 Call TMP_Text.get_rectTransform, X0
	198 Compare X0, 0
	199 JumpIfEqual {327}
	200 Move X1, X31
	201 Move X20, X0
	202 Call RectTransform.get_anchoredPosition, X0
	203 Subtract S1, S1, S8
	204 Move X0, X20
	205 Move X1, X31
	206 Call RectTransform.set_anchoredPosition, X0, X1
	207 Move X0, X19
	208 Call TMP_InputField.AssignPositioningIfNeeded, X0
	209 Move W8, [X19+683]
	210 Compare W8, 0
	211 JumpIfEqual {311}
	212 Move X0, [X19+312]
	213 Compare X0, 0
	214 JumpIfEqual {327}
	215 Move X1, X31
	216 Call TMP_Text.get_rectTransform, X0
	217 Compare X0, 0
	218 JumpIfEqual {327}
	219 Move X1, X31
	220 Call RectTransform.get_anchoredPosition, X0
	221 Move X0, [X19+312]
	222 Compare X0, 0
	223 JumpIfEqual {327}
	224 Move X8, [X0+872]
	225 Compare X8, 0
	226 JumpIfEqual {327}
	227 Move X8, [X8+56]
	228 Compare X8, 0
	229 JumpIfEqual {327}
	230 Move W9, [X8+24]
	231 Compare W9, 0
	232 JumpIfEqual {328}
	233 Move X9, [X0]
	234 Move V10, [X8+320]
	235 Move V8, V0
	236 Move X8, [X9+1480]
	237 Move X1, [X9+1488]
	238 NotImplemented "Instruction BLR not yet implemented."
	239 Move X0, [X19+312]
	240 Compare X0, 0
	241 JumpIfEqual {327}
	242 Move X9, [X0+872]
	243 Compare X9, 0
	244 JumpIfEqual {327}
	245 Move X8, [X9+56]
	246 Compare X8, 0
	247 JumpIfEqual {327}
	248 Move W9, [X9+24]
	249 Move W10, [X8+24]
	250 Subtract W9, W9, 1
	251 NotImplemented "Instruction CMP not yet implemented."
	252 Move X10, [X0]
	253 Move W11, 376
	254 NotImplemented "Instruction SMADDL not yet implemented."
	255 Move V9, V0
	256 Move V11, [X8+320]
	257 Move X8, [X10+1480]
	258 Move X1, [X10+1488]
	259 Move V0, [X31+92]
	260 Move V1, [X31+8]
	261 Add S13, S0, S1
	262 NotImplemented "Instruction BLR not yet implemented."
	263 Move X8, -50384896
	264 Move V1, [X8+3880]
	265 Move V0, [X19+556]
	266 NotImplemented "Instruction FCMP not yet implemented."
	267 Add S1, S13, S10
	268 Subtract S1, S1, S9
	269 NotImplemented "Instruction FCMP not yet implemented."
	270 Move X0, [X19+312]
	271 Compare X0, 0
	272 JumpIfEqual {327}
	273 Subtract S0, S12, S1
	274 NotImplemented "Instruction FNEG not yet implemented."
	275 NotImplemented "Instruction FNEG not yet implemented."
	276 NotImplemented "Instruction FCMP not yet implemented."
	277 NotImplemented "Instruction FCSEL not yet implemented."
	278 Move X8, -50380800
	279 Move V1, [X8+752]
	280 Move V3, [X31+4]
	281 NotImplemented "Instruction FCMP not yet implemented."
	282 Add S1, S13, S11
	283 Add S1, S1, S2
	284 NotImplemented "Instruction SCVTF not yet implemented."
	285 Add S0, S1, S0
	286 NotImplemented "Instruction FCMP not yet implemented."
	287 Move X0, [X19+312]
	288 Compare X0, 0
	289 JumpIfEqual {327}
	290 Subtract S0, S3, S0
	291 NotImplemented "Instruction FNEG not yet implemented."
	292 NotImplemented "Instruction FCMP not yet implemented."
	293 NotImplemented "Instruction FCSEL not yet implemented."
	294 Move X1, X31
	295 Call TMP_Text.get_rectTransform, X0
	296 Move X20, X0
	297 Compare X0, 0
	298 JumpIfEqual {327}
	299 Move X0, X20
	300 Move X1, X31
	301 Call RectTransform.get_anchoredPosition, X0
	302 Move S2, W31
	303 Add S0, S8, S0
	304 Add S1, S1, S2
	305 Move X0, X20
	306 Move X1, X31
	307 Call RectTransform.set_anchoredPosition, X0, X1
	308 Move X0, X19
	309 Call TMP_InputField.AssignPositioningIfNeeded, X0
	310 Move [X19+683], W31
	311 Move [X19+747], W31
	312 Move X20, [X31+112]
	313 Move X19, [X31+120]
	314 Move X22, [X31+96]
	315 Move X21, [X31+104]
	316 Move X30, [X31+80]
	317 Move D9, [X31+64]
	318 Move D8, [X31+72]
	319 Move D11, [X31+48]
	320 Move D10, [X31+56]
	321 Move D13, [X31+32]
	322 Move D12, [X31+40]
	323 Move D15, [X31+16]
	324 Move D14, [X31+24]
	325 Add X31, X31, 128
	326 Return 
	327 Call 0x1C17F20
	328 Call 0x1C17F28

Method: System.Char Validate(System.String text, System.Int32 pos, System.Char ch)

Disassembly:
	0x03AF1EDC LDR X8, [X23]
	0x03AF1EE0 MOV X23, X0
	0x03AF1EE4 LDR W9, [X8 + 0xE0]
	0x03AF1EE8 CBNZ W9, 0x3AF1EF4
	0x03AF1EEC MOV X0, X8
	0x03AF1EF0 BL 0x1C16DFC
	0x03AF1EF4 FMOV S2, W31
	0x03AF1EF8 MOV X0, X22
	0x03AF1EFC MOV V0.16B, V8.16B
	0x03AF1F00 MOV V1.16B, V9.16B
	0x03AF1F04 MOV X1, X23
	0x03AF1F08 MOV X2, X31
	0x03AF1F0C BL 0x3B1E4A8
	0x03AF1F10 ADDS W31, W0, 0x1
	0x03AF1F14 B.EQ 0x3AF2044
	0x03AF1F18 LDR X8, [X20 + 0x138]
	0x03AF1F1C CBZ X8, 0x3AF2230
	0x03AF1F20 LDR X8, [X8 + 0x368]
	0x03AF1F24 CBZ X8, 0x3AF2230
	0x03AF1F28 LDR X8, [X8 + 0x40]
	0x03AF1F2C CBZ X8, 0x3AF2230
	0x03AF1F30 LDR W9, [X8 + 0x18]
	0x03AF1F34 MOV W22, W0
	0x03AF1F38 CMP W0, W9
	0x03AF1F3C B.CS 0x3AF222C
	0x03AF1F40 SXTW X21, W22
	0x03AF1F44 MOVZ W9, 0x18
	0x03AF1F48 MADD X8, X21, X9, X8
	0x03AF1F4C LDR W8, [X8 + 0x28]
	0x03AF1F50 ADD X1, X20, 0x23C
	0x03AF1F54 MOV X0, X20
	0x03AF1F58 STR W8, [X20 + 0x23C]
	0x03AF1F5C BL 0x3AEE318
	0x03AF1F60 LDR X8, [X20 + 0x138]
	0x03AF1F64 CBZ X8, 0x3AF2230
	0x03AF1F68 LDR X8, [X8 + 0x368]
	0x03AF1F6C CBZ X8, 0x3AF2230
	0x03AF1F70 LDR X8, [X8 + 0x40]
	0x03AF1F74 CBZ X8, 0x3AF2230
	0x03AF1F78 LDR W9, [X8 + 0x18]
	0x03AF1F7C CMP W22, W9
	0x03AF1F80 B.CS 0x3AF222C
	0x03AF1F84 MOVZ W9, 0x18
	0x03AF1F88 MADD X8, X21, X9, X8
	0x03AF1F8C LDR W8, [X8 + 0x2C]
	0x03AF1F90 ADD X1, X20, 0x240
	0x03AF1F94 MOV X0, X20
	0x03AF1F98 ADD W8, W8, 0x1
	0x03AF1F9C STR W8, [X20 + 0x240]
	0x03AF1FA0 BL 0x3AEE318
	0x03AF1FA4 LDR X8, [X20 + 0x138]
	0x03AF1FA8 CBZ X8, 0x3AF2230
	0x03AF1FAC LDR X8, [X8 + 0x368]
	0x03AF1FB0 CBZ X8, 0x3AF2230
	0x03AF1FB4 LDR X21, [X8 + 0x38]
	0x03AF1FB8 LDR W22, [X20 + 0x23C]
	0x03AF1FBC MOV X0, X20
	0x03AF1FC0 BL 0x3AEC28C
	0x03AF1FC4 CBZ X21, 0x3AF2230
	0x03AF1FC8 LDR W9, [X21 + 0x18]
	0x03AF1FCC ADD W8, W0, W22
	0x03AF1FD0 CMP W8, W9
	0x03AF1FD4 B.CS 0x3AF222C
	0x03AF1FD8 MOVZ W9, 0x178
	0x03AF1FDC SMADDL X8, X8, X9, X21
	0x03AF1FE0 LDR W8, [X8 + 0x24]
	0x03AF1FE4 STR W8, [X20 + 0x234]
	0x03AF1FE8 TBNZ X8, 0x1F, 0x3AF20CC
	0x03AF1FEC LDR X9, [X20 + 0x220]
	0x03AF1FF0 CBZ X9, 0x3AF2230
	0x03AF1FF4 LDR W9, [X9 + 0x10]
	0x03AF1FF8 CMP W9, W8
	0x03AF1FFC B.LT 0x3AF20D0
	0x03AF2000 B 0x3AF20D4
	0x03AF2004 LDR W21, [X20 + 0x234]
	0x03AF2008 MOV X0, X20
	0x03AF200C BL 0x3AEC28C
	0x03AF2010 ADD W1, W0, W21
	0x03AF2014 MOV X0, X20
	0x03AF2018 BL 0x3AEF8F4
	0x03AF201C MOV W21, W0
	0x03AF2020 ADD X1, X20, 0x240
	0x03AF2024 STR W0, [X20 + 0x240]
	0x03AF2028 MOV X0, X20
	0x03AF202C BL 0x3AEE318
	0x03AF2030 ADD X1, X20, 0x23C
	0x03AF2034 MOV X0, X20
	0x03AF2038 STR W21, [X20 + 0x23C]
	0x03AF203C BL 0x3AEE318
	0x03AF2040 B 0x3AF21D8
	0x03AF2044 ADD X1, X20, 0x23C
	0x03AF2048 MOV X0, X20
	0x03AF204C STR W21, [X20 + 0x23C]
	0x03AF2050 BL 0x3AEE318
	0x03AF2054 LDR W22, [X20 + 0x23C]
	0x03AF2058 MOV X0, X20
	0x03AF205C BL 0x3AEC28C
	0x03AF2060 ADD W8, W22, W0
	0x03AF2064 ADD W8, W8, 0x1
	0x03AF2068 ADD X1, X20, 0x240
	0x03AF206C MOV X0, X20
	0x03AF2070 STR W8, [X20 + 0x240]
	0x03AF2074 BL 0x3AEE318
	0x03AF2078 LDR X8, [X20 + 0x138]
	0x03AF207C CBZ X8, 0x3AF2230
	0x03AF2080 LDR X8, [X8 + 0x368]
	0x03AF2084 CBZ X8, 0x3AF2230
	0x03AF2088 LDR X8, [X8 + 0x38]
	0x03AF208C CBZ X8, 0x3AF2230
	0x03AF2090 LDR W9, [X8 + 0x18]
	0x03AF2094 CMP W21, W9
	0x03AF2098 B.CS 0x3AF222C
	0x03AF209C SXTW X22, W21
	0x03AF20A0 MOVZ W9, 0x178
	0x03AF20A4 MADD X8, X22, X9, X8
	0x03AF20A8 LDR W23, [X8 + 0x24]
	0x03AF20AC STR W23, [X20 + 0x234]
	0x03AF20B0 TBNZ X23, 0x1F, 0x3AF2164
	0x03AF20B4 LDR X8, [X20 + 0x220]
	0x03AF20B8 CBZ X8, 0x3AF2230
	0x03AF20BC LDR W8, [X8 + 0x10]
	0x03AF20C0 CMP W8, W23
	0x03AF20C4 B.LT 0x3AF2168
	0x03AF20C8 B 0x3AF2170
	0x03AF20CC MOV W9, W31
	0x03AF20D0 STR W9, [X20 + 0x234]
	0x03AF20D4 LDR X8, [X20 + 0x138]
	0x03AF20D8 CBZ X8, 0x3AF2230
	0x03AF20DC LDR X8, [X8 + 0x368]
	0x03AF20E0 CBZ X8, 0x3AF2230
	0x03AF20E4 LDR X21, [X8 + 0x38]
	0x03AF20E8 LDR W22, [X20 + 0x240]
	0x03AF20EC MOV X0, X20
	0x03AF20F0 BL 0x3AEC28C
	0x03AF20F4 CBZ X21, 0x3AF2230
	0x03AF20F8 LDR W9, [X21 + 0x18]
	0x03AF20FC ADD W8, W22, W0
	0x03AF2100 SUB W8, W8, 0x1
	0x03AF2104 CMP W8, W9
	0x03AF2108 B.CS 0x3AF222C
	0x03AF210C LDR X9, [X20 + 0x138]
	0x03AF2110 CBZ X9, 0x3AF2230
	0x03AF2114 LDR X9, [X9 + 0x368]
	0x03AF2118 CBZ X9, 0x3AF2230
	0x03AF211C MOVZ W10, 0x178
	0x03AF2120 SMADDL X8, X8, X10, X21
	0x03AF2124 LDR X22, [X9 + 0x38]
	0x03AF2128 LDR W21, [X8 + 0x24]
	0x03AF212C LDR W23, [X20 + 0x240]
	0x03AF2130 MOV X0, X20
	0x03AF2134 BL 0x3AEC28C
	0x03AF2138 CBZ X22, 0x3AF2230
	0x03AF213C LDR W9, [X22 + 0x18]
	0x03AF2140 ADD W8, W23, W0
	0x03AF2144 SUB W8, W8, 0x1
	0x03AF2148 CMP W8, W9
	0x03AF214C B.CS 0x3AF222C
	0x03AF2150 MOVZ W9, 0x178
	0x03AF2154 SMADDL X8, X8, X9, X22
	0x03AF2158 LDR W8, [X8 + 0x28]
	0x03AF215C ADDS W8, W8, W21
	0x03AF2160 B 0x3AF21B0
	0x03AF2164 MOV W8, W31
	0x03AF2168 MOV W23, W8
	0x03AF216C STR W8, [X20 + 0x234]
	0x03AF2170 MOV X0, X20
	0x03AF2174 BL 0x3AEC28C
	0x03AF2178 LDR X8, [X20 + 0x138]
	0x03AF217C CBZ X8, 0x3AF2230
	0x03AF2180 LDR X8, [X8 + 0x368]
	0x03AF2184 CBZ X8, 0x3AF2230
	0x03AF2188 LDR X8, [X8 + 0x38]
	0x03AF218C CBZ X8, 0x3AF2230
	0x03AF2190 LDR W9, [X8 + 0x18]
	0x03AF2194 CMP W21, W9
	0x03AF2198 B.CS 0x3AF222C
	0x03AF219C MOVZ W9, 0x178
	0x03AF21A0 MADD X8, X22, X9, X8
	0x03AF21A4 LDR W8, [X8 + 0x28]
	0x03AF21A8 ADD W9, W0, W23
	0x03AF21AC ADDS W8, W9, W8
	0x03AF21B0 STR W8, [X20 + 0x238]
	0x03AF21B4 B.MI 0x3AF21D4
	0x03AF21B8 LDR X9, [X20 + 0x220]
	0x03AF21BC CBZ X9, 0x3AF2230
	0x03AF21C0 LDR W9, [X9 + 0x10]
	0x03AF21C4 CMP W9, W8
	0x03AF21C8 B.GE 0x3AF21D8
	0x03AF21CC STR W9, [X20 + 0x238]
	0x03AF21D0 B 0x3AF21D8
	0x03AF21D4 STR W31, [X20 + 0x238]
	0x03AF21D8 MOV X0, X20
	0x03AF21DC STRB W31, [X20 + 0x2C9]
	0x03AF21E0 BL 0x3AECBA4
	0x03AF21E4 LDR X8, [X19]
	0x03AF21E8 MOV X0, X19
	0x03AF21EC LDP X9, X1, [X8 + 0x188]
	0x03AF21F0 BLR X9
	0x03AF21F4 LDP X20, X19, [X31 + 0x60]
	0x03AF21F8 LDP X22, X21, [X31 + 0x50]
	0x03AF21FC LDP X24, X23, [X31 + 0x40]
	0x03AF2200 LDR X30, [X31 + 0x38]
	0x03AF2204 LDP D9, D8, [X31 + 0x28]
	0x03AF2208 LDP D11, D10, [X31 + 0x18]
	0x03AF220C LDR V12, [X31 + 0x10]
	0x03AF2210 ADD X31, X31, 0x70
	0x03AF2214 RET
	0x03AF2218 LDR W9, [X8 + 0x18]
	0x03AF221C CBNZ W9, 0x3AF1CE4
	0x03AF2220 B 0x3AF222C
	0x03AF2224 LDR W9, [X8 + 0x18]
	0x03AF2228 CBNZ W9, 0x3AF1D38
	0x03AF222C BL 0x1C16F28
	0x03AF2230 BL 0x1C16F20
	0x03AF2234 STP X30, X23, [X31 - 0x30]!
	0x03AF2238 STP X22, X21, [X31 + 0x10]
	0x03AF223C STP X20, X19, [X31 + 0x20]
	0x03AF2240 ADRP X20, 0x8F0000
	0x03AF2244 LDRB W8, [X20 + 0x601]
	0x03AF2248 MOV X21, X1
	0x03AF224C MOV X19, X0
	0x03AF2250 TBNZ X8, 0x0, 0x3AF2274
	0x03AF2254 ADRP X0, 0x667000
	0x03AF2258 LDR X0, [X0 + 0x180]
	0x03AF225C BL 0x1C16CF4
	0x03AF2260 ADRP X0, 0x601000
	0x03AF2264 LDR X0, [X0 + 0x988]
	0x03AF2268 BL 0x1C16CF4
	0x03AF226C MOVZ W8, 0x1
	0x03AF2270 STRB W8, [X20 + 0x601]
	0x03AF2274 CBZ X21, 0x3AF2654
	0x03AF2278 MOV X0, X21
	0x03AF227C MOV X1, X31
	0x03AF2280 BL 0x3C62EF0
	0x03AF2284 MOV W20, W0
	0x03AF2288 MOV X0, X31
	0x03AF228C BL 0x3C3B89C
	0x03AF2290 CMP W0, 0x1
	0x03AF2294 MOVZ W8, 0x2
	0x03AF2298 MOVZ W9, 0x8
	0x03AF229C CSEL W8, W9, W8, EQ
	0x03AF22A0 ANDS W23, W8, W20, 0x0
	0x03AF22A4 CSET W8, EQ
	0x03AF22A8 AND W9, W20, 0x4
	0x03AF22AC AND W10, W20, 0x1
	0x03AF22B0 ORR W8, W8, W9, 0x2
	0x03AF22B4 MOV X0, X21
	0x03AF22B8 MOV X1, X31
	0x03AF22BC ORR W22, W10, W8, 0x0
	0x03AF22C0 BL 0x3C63170
	0x03AF22C4 CMP W0, 0x61
	0x03AF22C8 B.LE 0x3AF230C
	0x03AF22CC CMP W0, 0x76
	0x03AF22D0 B.LE 0x3AF2334
	0x03AF22D4 SUB W8, W0, 0x10F
	0x03AF22D8 CMP W8, 0xA
	0x03AF22DC B.HI 0x3AF23FC
	0x03AF22E0 ADRP X9, 0xFFFFFFFFFD0A5000
	0x03AF22E4 ADD X9, X9, 0xC0D
	0x03AF22E8 ADR X10, 0x10
	0x03AF22EC LDRB W11, [X9, X8, LSL]
	0x03AF22F0 ADD X10, X10, X11, 0x2, LSL
	0x03AF22F4 BR X10
	0x03AF22F8 AND W1, W20, 0x1
	0x03AF22FC MOVZ W2, 0x1
	0x03AF2300 MOV X0, X19
	0x03AF2304 BL 0x3AF4680
	0x03AF2308 B 0x3AF25B8
	0x03AF230C CMP W0, 0xD
	0x03AF2310 B.LE 0x3AF2380
	0x03AF2314 CMP W0, 0x1B
	0x03AF2318 B.EQ 0x3AF23A8
	0x03AF231C CMP W0, 0x61
	0x03AF2320 B.NE 0x3AF24EC
	0x03AF2324 TBNZ X22, 0x0, 0x3AF24EC
	0x03AF2328 MOV X0, X19
	0x03AF232C BL 0x3AEFAEC
	0x03AF2330 B 0x3AF25B8
	0x03AF2334 CMP W0, 0x63
	0x03AF2338 B.EQ 0x3AF23B8
	0x03AF233C CMP W0, 0x76
	0x03AF2340 B.NE 0x3AF24EC
	0x03AF2344 TBNZ X22, 0x0, 0x3AF24EC
	0x03AF2348 ADRP X8, 0x667000
	0x03AF234C LDR X8, [X8 + 0x180]
	0x03AF2350 LDR X0, [X8]
	0x03AF2354 LDR W8, [X0 + 0xE0]
	0x03AF2358 CBNZ W8, 0x3AF2360
	0x03AF235C BL 0x1C16DFC
	0x03AF2360 BL 0x3AF0108
	0x03AF2364 LDR X8, [X19]
	0x03AF2368 MOV X1, X0
	0x03AF236C MOV X0, X19
	0x03AF2370 LDR X9, [X8 + 0x568]
	0x03AF2374 LDR X2, [X8 + 0x570]
	0x03AF2378 BLR X9
	0x03AF237C B 0x3AF25B8
	0x03AF2380 CMP W0, 0x8
	0x03AF2384 B.EQ 0x3AF23F0
	0x03AF2388 CMP W0, 0xD
	0x03AF238C B.NE 0x3AF24EC
	0x03AF2390 LDR W8, [X19 + 0x190]
	0x03AF2394 CMP W8, 0x2
	0x03AF2398 B.EQ 0x3AF24EC
	0x03AF239C MOVZ W0, 0x1
	0x03AF23A0 STRB W0, [X19 + 0x2CC]
	0x03AF23A4 B 0x3AF25BC
	0x03AF23A8 MOVZ W0, 0x1
	0x03AF23AC STRB W0, [X19 + 0x2CC]
	0x03AF23B0 STRB W0, [X19 + 0x298]
	0x03AF23B4 B 0x3AF25BC
	0x03AF23B8 TBNZ X22, 0x0, 0x3AF24EC
	0x03AF23BC LDR W8, [X19 + 0x184]
	0x03AF23C0 CMP W8, 0x2
	0x03AF23C4 B.NE 0x3AF24B4
	0x03AF23C8 ADRP X8, 0x667000
	0x03AF23CC LDR X8, [X8 + 0x180]
	0x03AF23D0 LDR X0, [X8]
	0x03AF23D4 LDR W8, [X0 + 0xE0]
	0x03AF23D8 CBNZ W8, 0x3AF23E0
	0x03AF23DC BL 0x1C16DFC
	0x03AF23E0 ADRP X8, 0x601000
	0x03AF23E4 LDR X8, [X8 + 0x988]
	0x03AF23E8 LDR X0, [X8]
	0x03AF23EC B 0x3AF24E0
	0x03AF23F0 MOV X0, X19
	0x03AF23F4 BL 0x3AF2658
	0x03AF23F8 B 0x3AF25B8
	0x03AF23FC CMP W0, 0x78
	0x03AF2400 B.EQ 0x3AF24E8
	0x03AF2404 CMP W0, 0x7F
	0x03AF2408 B.NE 0x3AF24EC
	0x03AF240C MOV X0, X19
	0x03AF2410 BL 0x3AF29E0
	0x03AF2414 B 0x3AF25B8
	0x03AF2418 AND W1, W20, 0x1
	0x03AF241C MOVZ W2, 0x1
	0x03AF2420 MOV X0, X19
	0x03AF2424 BL 0x3AF44BC
	0x03AF2428 B 0x3AF25B8
	0x03AF242C CMP W23, 0x0
	0x03AF2430 AND W1, W20, 0x1
	0x03AF2434 CSET W2, NE
	0x03AF2438 MOV X0, X19
	0x03AF243C BL 0x3AF3248
	0x03AF2440 B 0x3AF25B8
	0x03AF2444 CMP W23, 0x0
	0x03AF2448 AND W1, W20, 0x1
	0x03AF244C CSET W2, NE
	0x03AF2450 MOV X0, X19
	0x03AF2454 BL 0x3AF2E98
	0x03AF2458 B 0x3AF25B8
	0x03AF245C CMP W23, 0x0
	0x03AF2460 AND W1, W20, 0x1
	0x03AF2464 CSET W2, NE
	0x03AF2468 MOV X0, X19
	0x03AF246C BL 0x3AEFF78
	0x03AF2470 B 0x3AF25B8
	0x03AF2474 CMP W23, 0x0
	0x03AF2478 AND W1, W20, 0x1
	0x03AF247C CSET W2, NE
	0x03AF2480 MOV X0, X19
	0x03AF2484 BL 0x3AEFDF8
	0x03AF2488 B 0x3AF25B8
	0x03AF248C AND W1, W20, 0x1
	0x03AF2490 MOVZ W2, 0x1
	0x03AF2494 MOV X0, X19
	0x03AF2498 BL 0x3AF4830
	0x03AF249C B 0x3AF25B8
	0x03AF24A0 AND W1, W20, 0x1
	0x03AF24A4 MOVZ W2, 0x1
	0x03AF24A8 MOV X0, X19
	0x03AF24AC BL 0x3AF4ADC
	0x03AF24B0 B 0x3AF25B8
	0x03AF24B4 MOV X0, X19
	0x03AF24B8 BL 0x3AF2C04
	0x03AF24BC ADRP X8, 0x667000
	0x03AF24C0 LDR X8, [X8 + 0x180]
	0x03AF24C4 MOV X19, X0
	0x03AF24C8 LDR X8, [X8]
	0x03AF24CC LDR W9, [X8 + 0xE0]
	0x03AF24D0 CBNZ W9, 0x3AF24DC
	0x03AF24D4 MOV X0, X8
	0x03AF24D8 BL 0x1C16DFC
	0x03AF24DC MOV X0, X19
	0x03AF24E0 BL 0x3AF0158
	0x03AF24E4 B 0x3AF25B8
	0x03AF24E8 TBZ X22, 0x0, 0x3AF25CC
	0x03AF24EC MOV X0, X21
	0x03AF24F0 MOV X1, X31
	0x03AF24F4 BL 0x3C630F0
	0x03AF24F8 LDR W8, [X19 + 0x190]
	0x03AF24FC AND W9, W0, 0xFFFF
	0x03AF2500 SUB W8, W8, 0x1
	0x03AF2504 CMP W8, 0x2
	0x03AF2508 MOV W8, W0
	0x03AF250C B.CS 0x3AF2524
	0x03AF2510 CMP W9, 0xD
	0x03AF2514 B.EQ 0x3AF2548
	0x03AF2518 CMP W9, 0x3
	0x03AF251C B.EQ 0x3AF2548
	0x03AF2520 B 0x3AF254C
	0x03AF2524 SUB W10, W9, 0x9
	0x03AF2528 CMP W10, 0x2
	0x03AF252C MOV W0, W31
	0x03AF2530 B.CC 0x3AF25BC
	0x03AF2534 CMP W9, 0x3
	0x03AF2538 B.EQ 0x3AF2548
	0x03AF253C CMP W9, 0xD
	0x03AF2540 B.EQ 0x3AF25BC
	0x03AF2544 B 0x3AF254C
	0x03AF2548 MOVZ W8, 0xA
	0x03AF254C LDR X9, [X19]
	0x03AF2550 AND W10, W8, 0xFFFF
	0x03AF2554 CMP W10, 0xA
	0x03AF2558 CSET W10, EQ
	0x03AF255C LDR X11, [X9 + 0x538]
	0x03AF2560 LDR X2, [X9 + 0x540]
	0x03AF2564 ANDS W31, W20, W10, 0x0
	0x03AF2568 MOVZ W9, 0xB
	0x03AF256C CSEL W20, W9, W8, NE
	0x03AF2570 MOV X0, X19
	0x03AF2574 MOV W1, W20
	0x03AF2578 BLR X11
	0x03AF257C TBZ X0, 0x0, 0x3AF2598
	0x03AF2580 LDR X8, [X19]
	0x03AF2584 MOV X0, X19
	0x03AF2588 MOV W1, W20
	0x03AF258C LDR X9, [X8 + 0x578]
	0x03AF2590 LDR X2, [X8 + 0x580]
	0x03AF2594 BLR X9
	0x03AF2598 ANDS W31, W20, 0xFFFF
	0x03AF259C B.NE 0x3AF25B8
	0x03AF25A0 MOV X0, X19
	0x03AF25A4 BL 0x3AEC28C
	0x03AF25A8 CMP W0, 0x1
	0x03AF25AC B.LT 0x3AF25B8
	0x03AF25B0 MOV X0, X19
	0x03AF25B4 BL 0x3AECBA4
	0x03AF25B8 MOV W0, W31
	0x03AF25BC LDP X20, X19, [X31 + 0x20]
	0x03AF25C0 LDP X22, X21, [X31 + 0x10]
	0x03AF25C4 LDP X30, X23, [X31], #0x30
	0x03AF25C8 RET
	0x03AF25CC LDR W8, [X19 + 0x184]
	0x03AF25D0 CMP W8, 0x2
	0x03AF25D4 B.NE 0x3AF2600
	0x03AF25D8 ADRP X8, 0x667000
	0x03AF25DC LDR X8, [X8 + 0x180]
	0x03AF25E0 LDR X0, [X8]
	0x03AF25E4 LDR W8, [X0 + 0xE0]
	0x03AF25E8 CBNZ W8, 0x3AF25F0
	0x03AF25EC BL 0x1C16DFC
	0x03AF25F0 ADRP X8, 0x601000
	0x03AF25F4 LDR X8, [X8 + 0x988]
	0x03AF25F8 LDR X20, [X8]
	0x03AF25FC B 0x3AF2628
	0x03AF2600 MOV X0, X19
	0x03AF2604 BL 0x3AF2C04
	0x03AF2608 ADRP X8, 0x667000
	0x03AF260C LDR X8, [X8 + 0x180]
	0x03AF2610 MOV X20, X0
	0x03AF2614 LDR X8, [X8]
	0x03AF2618 LDR W9, [X8 + 0xE0]
	0x03AF261C CBNZ W9, 0x3AF2628
	0x03AF2620 MOV X0, X8
	0x03AF2624 BL 0x1C16DFC
	0x03AF2628 MOV X0, X20
	0x03AF262C BL 0x3AF0158
	0x03AF2630 MOV X0, X19
	0x03AF2634 BL 0x3AF2CC4
	0x03AF2638 MOV X0, X19
	0x03AF263C BL 0x3AF2E5C
	0x03AF2640 MOV X0, X19
	0x03AF2644 BL 0x3AECBA4
	0x03AF2648 MOV X0, X19
	0x03AF264C BL 0x3AED028
	0x03AF2650 B 0x3AF25B8
	0x03AF2654 BL 0x1C16F20
	0x03AF2658 STR X30, [X31 - 0x40]!
	0x03AF265C STP X24, X23, [X31 + 0x10]
	0x03AF2660 STP X22, X21, [X31 + 0x20]
	0x03AF2664 STP X20, X19, [X31 + 0x30]
	0x03AF2668 ADRP X20, 0x8F0000
	0x03AF266C LDRB W8, [X20 + 0x60A]
	0x03AF2670 MOV X19, X0
	0x03AF2674 TBNZ X8, 0x0, 0x3AF268C
	0x03AF2678 ADRP X0, 0x603000
	0x03AF267C LDR X0, [X0 + 0x170]
	0x03AF2680 BL 0x1C16CF4
	0x03AF2684 MOVZ W8, 0x1
	0x03AF2688 STRB W8, [X20 + 0x60A]
	0x03AF268C LDRB W8, [X19 + 0x230]
	0x03AF2690 CBZ W8, 0x3AF26A8
	0x03AF2694 LDP X20, X19, [X31 + 0x30]
	0x03AF2698 LDP X22, X21, [X31 + 0x20]
	0x03AF269C LDP X24, X23, [X31 + 0x10]
	0x03AF26A0 LDR X30, [X31], #0x40
	0x03AF26A4 RET
	0x03AF26A8 LDR W20, [X19 + 0x234]
	0x03AF26AC MOV X0, X19
	0x03AF26B0 BL 0x3AEC28C
	0x03AF26B4 LDR W21, [X19 + 0x238]
	0x03AF26B8 ADD W20, W0, W20
	0x03AF26BC MOV X0, X19
	0x03AF26C0 BL 0x3AEC28C
	0x03AF26C4 ADD W8, W0, W21

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X23, 0x8F2000
	011 Move W8, [X23+1567]
	012 Move W19, W3
	013 Move W20, W2
	014 Move X21, X1
	015 Move X22, X0
	016 Move [X31+8], X1
	017 Move [X31+4], W2
	018 NotImplemented "Instruction STRH not yet implemented."
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {43}
	023 Move X0, 0x605000
	024 Move X0, [X0+368]
	025 Call 0x1C17CF4
	026 Move X0, 0x60C000
	027 Move X0, [X0+2536]
	028 Call 0x1C17CF4
	029 Move X0, 0x603000
	030 Move X0, [X0+1432]
	031 Call 0x1C17CF4
	032 Move X0, 0x60B000
	033 Move X0, [X0+1536]
	034 Call 0x1C17CF4
	035 Move X0, 0x60B000
	036 Move X0, [X0+2480]
	037 Call 0x1C17CF4
	038 Move X0, 0x669000
	039 Move X0, [X0+368]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X23+1567], W8
	043 Move W8, [X22+408]
	044 Compare W8, 0
	045 JumpIfEqual {498}
	046 Move X0, X22
	047 Move X1, X31
	048 Call Behaviour.get_enabled, X0
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {498}
	053 Move W8, [X22+408]
	054 Subtract W8, W8, 1
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X9, -49647616
	057 Add X9, X9, 3077
	058 NotImplemented "Instruction ADR not yet implemented."
	059 Move W11, [X9]
	060 Add X10, X10, X11
	061 CallNoReturn X10
	062 Compare W20, 0
	063 JumpIfEqual {236}
	064 Move W23, W31
	065 Subtract W8, W19, 65
	066 And W8, W8, 0xFFFF
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Subtract W8, W19, 97
	069 And W8, W8, 0xFFFF
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move W24, W19
	072 And W8, W19, 0xFFFF
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction CSEL not yet implemented."
	076 Compare X21, 0
	077 JumpIfEqual {536}
	078 Move W8, [X21+16]
	079 Subtract W9, W8, 1
	080 Subtract W10, W20, 1
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction CSEL not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 NotImplemented "Instruction CSEL not yet implemented."
	085 Move X0, X21
	086 Move X2, X31
	087 Call String.get_Chars, X0, X1
	088 Move W8, [X21+16]
	089 Move W23, W0
	090 Subtract W9, W8, 1
	091 NotImplemented "Instruction CMP not yet implemented."
	092 NotImplemented "Instruction CSEL not yet implemented."
	093 NotImplemented "Instruction CMP not yet implemented."
	094 NotImplemented "Instruction CSEL not yet implemented."
	095 Move X0, X21
	096 Move X2, X31
	097 Call String.get_Chars, X0, X1
	098 Move W8, [X21+16]
	099 Move W22, W0
	100 Subtract W9, W8, 1
	101 Add W10, W20, 1
	102 NotImplemented "Instruction CMP not yet implemented."
	103 NotImplemented "Instruction CSINC not yet implemented."
	104 NotImplemented "Instruction CMP not yet implemented."
	105 NotImplemented "Instruction CSEL not yet implemented."
	106 Move X0, X21
	107 Move X2, X31
	108 Call String.get_Chars, X0, X1
	109 And W25, W0, 0xFFFF
	110 Move X8, 0x604000
	111 Move X8, [X8+368]
	112 Move X0, [X8]
	113 Move W8, [X0+224]
	114 Compare W8, 0
	115 JumpIfNotEqual {117}
	116 Call 0x1C17DFC
	117 Add X0, X31, 0
	118 Move X1, X31
	119 Call Char.ToString, X0
	120 Move X8, 0x60A000
	121 Move X8, [X8+1536]
	122 Move X19, [X22+416]
	123 Move X20, X0
	124 Move X8, [X8]
	125 Move W9, [X8+224]
	126 Compare W9, 0
	127 JumpIfNotEqual {130}
	128 Move X0, X8
	129 Call 0x1C17DFC
	130 Move X0, X20
	131 Move X1, X19
	132 Move X2, X31
	133 Call Regex.IsMatch, X0, X1
	134 NotImplemented "Instruction LDRH not yet implemented."
	135 And W31, W0, 1
	136 NotImplemented "Instruction CSEL not yet implemented."
	137 Subtract W8, W19, 48
	138 And W8, W8, 0xFFFF
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Subtract W8, W19, 65
	141 And W8, W8, 0xFFFF
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Subtract W8, W19, 97
	144 And W8, W8, 0xFFFF
	145 NotImplemented "Instruction CMP not yet implemented."
	146 And W8, W19, 0xFFFF
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Compare X21, 0
	149 JumpIfEqual {536}
	150 Move W1, 64
	151 Move X0, X21
	152 Move X2, X31
	153 Move W24, 64
	154 Call String.IndexOf, X0, X1
	155 Add W31, W0, 1
	156 Move X8, 0x668000
	157 Move X8, [X8+368]
	158 Move X0, [X8]
	159 Compare X0, 0
	160 JumpIfEqual {536}
	161 Move W1, W19
	162 Move X2, X31
	163 Call String.IndexOf, X0, X1
	164 Add W31, W0, 1
	165 Move W24, W19
	166 And W8, W19, 0xFFFF
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Compare X21, 0
	169 JumpIfEqual {536}
	170 Move W8, [X21+16]
	171 Subtract W9, W8, 1
	172 NotImplemented "Instruction CMP not yet implemented."
	173 NotImplemented "Instruction CSEL not yet implemented."
	174 NotImplemented "Instruction CMP not yet implemented."
	175 NotImplemented "Instruction CSEL not yet implemented."
	176 Move X0, X21
	177 Move X2, X31
	178 Call String.get_Chars, X0, X1
	179 Move W8, [X21+16]
	180 Move W19, W0
	181 Subtract W9, W8, 1
	182 Add W10, W20, 1
	183 NotImplemented "Instruction CMP not yet implemented."
	184 NotImplemented "Instruction CSINC not yet implemented."
	185 NotImplemented "Instruction CMP not yet implemented."
	186 NotImplemented "Instruction CSEL not yet implemented."
	187 Move X0, X21
	188 Move X2, X31
	189 Call String.get_Chars, X0, X1
	190 And W8, W0, 0xFFFF
	191 Move X8, 0x602000
	192 Move X8, [X8+1432]
	193 Move X20, [X22+736]
	194 Move X0, [X8]
	195 Move W8, [X0+224]
	196 Compare W8, 0
	197 JumpIfNotEqual {199}
	198 Call 0x1C17DFC
	199 Move X0, X20
	200 Move X1, X31
	201 Move X2, X31
	202 Call Object.op_Inequality, X0, X1
	203 Move TEMP, X0
	204 And TEMP, TEMP, 1
	205 Compare TEMP, 1
	206 JumpIfNotEqual {261}
	207 Move X0, [X22+736]
	208 Compare X0, 0
	209 JumpIfEqual {536}
	210 Move X8, [X0]
	211 Add X1, X31, 8
	212 Add X2, X31, 4
	213 Move W3, W19
	214 Move X9, [X8+376]
	215 Move X4, [X8+384]
	216 NotImplemented "Instruction BLR not yet implemented."
	217 Move X9, [X31+8]
	218 Move W24, W0
	219 Add X10, X22, 564
	220 Move [X22+544], X9
	221 Move W8, [X31+4]
	222 Move [X22+564], W8
	223 Move TEMP, X8
	224 And TEMP, TEMP, -2147483648
	225 Compare TEMP, -2147483648
	226 JumpIfEqual {317}
	227 Compare X9, 0
	228 JumpIfEqual {536}
	229 Move W11, [X9+16]
	230 NotImplemented "Instruction CMP not yet implemented."
	231 Move [X10], W11
	232 Move W11, [X9+16]
	233 NotImplemented "Instruction CMP not yet implemented."
	234 NotImplemented "Instruction CSEL not yet implemented."
	235 Move [X22+568], W8
	236 Compare X21, 0
	237 JumpIfEqual {536}
	238 Move W8, [X21+16]
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Move X0, X21
	241 Move W1, W31
	242 Move X2, X31
	243 Call String.get_Chars, X0, X1
	244 And W8, W0, 0xFFFF
	245 NotImplemented "Instruction CMP not yet implemented."
	246 NotImplemented "Instruction CSET not yet implemented."
	247 Move W24, [X22+564]
	248 Move X0, X22
	249 Call TMP_InputField.get_compositionLength, X0
	250 Add W31, W0, W24
	251 Move W8, 1
	252 Compare W23, 0
	253 JumpIfNotEqual {261}
	254 Move W24, [X22+568]
	255 Move X0, X22
	256 Call TMP_InputField.get_compositionLength, X0
	257 Add W31, W0, W24
	258 NotImplemented "Instruction CSET not yet implemented."
	259 Compare W23, 0
	260 JumpIfEqual {262}
	261 Move W24, W31
	262 Subtract W9, W19, 48
	263 And W9, W9, 0xFFFF
	264 NotImplemented "Instruction CMP not yet implemented."
	265 Move W24, W19
	266 And W9, W19, 0xFFFF
	267 NotImplemented "Instruction CMP not yet implemented."
	268 NotImplemented "Instruction CMP not yet implemented."
	269 NotImplemented "Instruction CSET not yet implemented."
	270 Or W8, W8, W9
	271 Compare W8, 0
	272 JumpIfEqual {277}
	273 Move W24, 45
	274 Move W25, 10
	275 Move W22, 32
	276 Move W23, 32
	277 Move X0, X31
	278 Call Thread.get_CurrentThread
	279 Compare X0, 0
	280 JumpIfEqual {536}
	281 Move X1, X31
	282 Call Thread.get_CurrentCulture, X0
	283 Compare X0, 0
	284 JumpIfEqual {536}
	285 Move X8, [X0]
	286 Move X9, [X8+536]
	287 Move X1, [X8+544]
	288 NotImplemented "Instruction BLR not yet implemented."
	289 Compare X0, 0
	290 JumpIfEqual {536}
	291 Move X8, 0x60B000
	292 Move X8, [X8+2536]
	293 Move X20, [X0+56]
	294 Move X8, [X8]
	295 Move W9, [X8+224]
	296 Compare W9, 0
	297 JumpIfNotEqual {300}
	298 Move X0, X8
	299 Call 0x1C17DFC
	300 Move X0, X20
	301 Move X1, X31
	302 Call Convert.ToChar, X0
	303 And W8, W0, 0xFFFF
	304 NotImplemented "Instruction CMP not yet implemented."
	305 Move W8, [X22+408]
	306 NotImplemented "Instruction CMP not yet implemented."
	307 Compare X21, 0
	308 JumpIfEqual {536}
	309 Move X0, X21
	310 Move X1, X20
	311 Move X2, X31
	312 Call String.Contains, X0, X1
	313 And W31, W0, 1
	314 NotImplemented "Instruction CSEL not yet implemented."
	315 Move W25, 10
	316 Move W22, 32
	317 Move [X10], X31
	318 Move W25, 10
	319 Move X24, 0x604000
	320 Move X24, [X24+368]
	321 Move X0, [X24]
	322 Move W8, [X0+224]
	323 Compare W8, 0
	324 JumpIfNotEqual {326}
	325 Call 0x1C17DFC
	326 Move W0, W19
	327 Move X1, X31
	328 Call Char.IsLetter, X0
	329 Move TEMP, X0
	330 And TEMP, TEMP, 1
	331 Compare TEMP, 1
	332 JumpIfNotEqual {365}
	333 Move X0, [X24]
	334 Move W8, [X0+224]
	335 Compare W8, 0
	336 JumpIfNotEqual {338}
	337 Call 0x1C17DFC
	338 Move W0, W19
	339 Move X1, X31
	340 Call Char.IsLower, X0
	341 Move W8, W0
	342 Move X0, [X24]
	343 NotImplemented "Instruction CMP not yet implemented."
	344 NotImplemented "Instruction CSET not yet implemented."
	345 And W21, W8, W10
	346 Move W9, [X0+224]
	347 Compare W9, 0
	348 JumpIfNotEqual {350}
	349 Call 0x1C17DFC
	350 Compare W21, 0
	351 JumpIfEqual {429}
	352 Move W0, W19
	353 Move X20, [X31+64]
	354 Move X19, [X31+72]
	355 Move X22, [X31+48]
	356 Move X21, [X31+56]
	357 Move X24, [X31+32]
	358 Move X23, [X31+40]
	359 Move X30, [X31+16]
	360 Move X25, [X31+24]
	361 Move X1, X31
	362 Add X31, X31, 80
	363 Call Char.ToUpper, X0
	364 Return X0
	365 NotImplemented "Instruction CMP not yet implemented."
	366 And W8, W22, 0xFFFF
	367 NotImplemented "Instruction CMP not yet implemented."
	368 NotImplemented "Instruction CMP not yet implemented."
	369 And W8, W19, 0xFFFF
	370 NotImplemented "Instruction CMP not yet implemented."
	371 Move X8, 0x60A000
	372 Move X8, [X8+2480]
	373 Move X0, X21
	374 Move X2, X31
	375 Move X1, [X8]
	376 Call String.Contains, X0, X1
	377 Move TEMP, X0
	378 And TEMP, TEMP, 1
	379 Compare TEMP, 1
	380 JumpIfNotEqual {510}
	381 Move X0, [X24]
	382 Move W8, [X0+224]
	383 Compare W8, 0
	384 JumpIfNotEqual {386}
	385 Call 0x1C17DFC
	386 Move W0, W23
	387 Move X1, X31
	388 Call Char.IsLetter, X0
	389 And W8, W22, 0xFFFF
	390 NotImplemented "Instruction CMP not yet implemented."
	391 Move TEMP, X0
	392 And TEMP, TEMP, 1
	393 Compare TEMP, 1
	394 JumpIfNotEqual {398}
	395 And W8, W19, 0xFFFF
	396 NotImplemented "Instruction CMP not yet implemented."
	397 Move W24, W19
	398 And W9, W19, 0xFFFF
	399 NotImplemented "Instruction CMP not yet implemented."
	400 And W10, W23, 0xFFFF
	401 NotImplemented "Instruction CSET not yet implemented."
	402 NotImplemented "Instruction CMP not yet implemented."
	403 NotImplemented "Instruction CSET not yet implemented."
	404 NotImplemented "Instruction CMP not yet implemented."
	405 Move W24, W31
	406 NotImplemented "Instruction CMP not yet implemented."
	407 Compare W20, 0
	408 JumpIfEqual {499}
	409 Or W8, W9, W8
	410 Compare W8, 0
	411 JumpIfEqual {499}
	412 NotImplemented "Instruction CMP not yet implemented."
	413 And W10, W23, 0xFFFF
	414 NotImplemented "Instruction CSET not yet implemented."
	415 NotImplemented "Instruction CMP not yet implemented."
	416 NotImplemented "Instruction CSET not yet implemented."
	417 NotImplemented "Instruction CMP not yet implemented."
	418 Move W24, W31
	419 And W10, W22, 0xFFFF
	420 NotImplemented "Instruction CMP not yet implemented."
	421 NotImplemented "Instruction CMP not yet implemented."
	422 And W10, W22, 0xFFFF
	423 NotImplemented "Instruction CMP not yet implemented."
	424 Xor W8, W8, W9
	425 Compare W8, 0
	426 JumpIfEqual {499}
	427 NotImplemented "Instruction CMP not yet implemented."
	428 NotImplemented "Instruction CSEL not yet implemented."
	429 Move W0, W19
	430 Move X1, X31
	431 Call Char.IsLower, X0
	432 Move TEMP, X0
	433 And TEMP, TEMP, 1
	434 Compare TEMP, 1
	435 JumpIfNotEqual {444}
	436 And W8, W23, 0xFFFF
	437 NotImplemented "Instruction CMP not yet implemented."
	438 NotImplemented "Instruction CMP not yet implemented."
	439 Move X0, [X24]
	440 Move W8, [X0+224]
	441 Compare W8, 0
	442 JumpIfNotEqual {352}
	443 Call 0x1C17DFC
	444 Move X0, [X24]
	445 Move W8, [X0+224]
	446 Compare W8, 0
	447 JumpIfNotEqual {449}
	448 Call 0x1C17DFC
	449 Move W0, W19
	450 Move X1, X31
	451 Call Char.IsUpper, X0
	452 And W8, W23, 0xFFFF
	453 NotImplemented "Instruction CMP not yet implemented."
	454 NotImplemented "Instruction CMP not yet implemented."
	455 And W8, W23, 0xFFFF
	456 NotImplemented "Instruction CMP not yet implemented."
	457 NotImplemented "Instruction CMP not yet implemented."
	458 Move TEMP, X0
	459 And TEMP, TEMP, 1
	460 Compare TEMP, 1
	461 JumpIfNotEqual {474}
	462 Move X0, [X24]
	463 Move W8, [X0+224]
	464 Compare W8, 0
	465 JumpIfNotEqual {467}
	466 Call 0x1C17DFC
	467 Move W0, W23
	468 Move X1, X31
	469 Call Char.IsLower, X0
	470 Move TEMP, X0
	471 And TEMP, TEMP, 1
	472 Compare TEMP, 1
	473 JumpIfNotEqual {511}
	474 Move X0, [X24]
	475 Move W8, [X0+224]
	476 Compare W8, 0
	477 JumpIfNotEqual {479}
	478 Call 0x1C17DFC
	479 Move W0, W19
	480 Move X1, X31
	481 Call Char.IsUpper, X0
	482 Move TEMP, X0
	483 And TEMP, TEMP, 1
	484 Compare TEMP, 1
	485 JumpIfNotEqual {498}
	486 Move X0, [X24]
	487 Move W8, [X0+224]
	488 Compare W8, 0
	489 JumpIfNotEqual {491}
	490 Call 0x1C17DFC
	491 Move W0, W22
	492 Move X1, X31
	493 Call Char.IsUpper, X0
	494 Move TEMP, X0
	495 And TEMP, TEMP, 1
	496 Compare TEMP, 1
	497 JumpIfEqual {261}
	498 Move W24, W19
	499 Move W0, W24
	500 Move X20, [X31+64]
	501 Move X19, [X31+72]
	502 Move X22, [X31+48]
	503 Move X21, [X31+56]
	504 Move X24, [X31+32]
	505 Move X23, [X31+40]
	506 Move X30, [X31+16]
	507 Move X25, [X31+24]
	508 Add X31, X31, 80
	509 Return X0
	510 Move W24, 39
	511 Move X0, [X24]
	512 Move W8, [X0+224]
	513 Compare W8, 0
	514 JumpIfNotEqual {516}
	515 Call 0x1C17DFC
	516 Move W0, W19
	517 Move X20, [X31+64]
	518 Move X19, [X31+72]
	519 Move X22, [X31+48]
	520 Move X21, [X31+56]
	521 Move X24, [X31+32]
	522 Move X23, [X31+40]
	523 Move X30, [X31+16]
	524 Move X25, [X31+24]
	525 Move X1, X31
	526 Add X31, X31, 80
	527 Call Char.ToLower, X0
	528 Return X0
	529 Move W24, 46
	530 Move W8, 10
	531 And W9, W19, 0xFFFF
	532 NotImplemented "Instruction CMP not yet implemented."
	533 NotImplemented "Instruction CMP not yet implemented."
	534 Move W8, 46
	535 NotImplemented "Instruction CSEL not yet implemented."
	536 Call 0x1C17F20

Method: System.Void ActivateInputField()

Disassembly:
	0x03AF7AC4 LDR W8, [X0 + 0xE0]
	0x03AF7AC8 CBNZ W8, 0x3AF7AD0
	0x03AF7ACC BL 0x1C16DFC
	0x03AF7AD0 MOV X0, X20
	0x03AF7AD4 MOV X1, X31
	0x03AF7AD8 MOV X2, X31
	0x03AF7ADC BL 0x3C3883C
	0x03AF7AE0 TBZ X0, 0x0, 0x3AF7AEC
	0x03AF7AE4 LDR W0, [X19 + 0x1DC]
	0x03AF7AE8 B 0x3AF7B30
	0x03AF7AEC ADRP X21, 0x661000
	0x03AF7AF0 LDR X21, [X21 + 0x338]
	0x03AF7AF4 LDR X20, [X19 + 0x110]
	0x03AF7AF8 LDR X0, [X21]
	0x03AF7AFC LDR W8, [X0 + 0xE0]
	0x03AF7B00 CBNZ W8, 0x3AF7B08
	0x03AF7B04 BL 0x1C16DFC
	0x03AF7B08 CBZ X20, 0x3AF7B40
	0x03AF7B0C LDR X8, [X21]
	0x03AF7B10 MOV X0, X20
	0x03AF7B14 MOV X2, X31
	0x03AF7B18 LDR X8, [X8 + 0xB8]
	0x03AF7B1C LDR W1, [X8 + 0x44]
	0x03AF7B20 BL 0x3C14864
	0x03AF7B24 MOV X0, X31
	0x03AF7B28 BL 0x1E43664
	0x03AF7B2C STR W0, [X19 + 0x1DC]
	0x03AF7B30 LDP X20, X19, [X31 + 0x10]
	0x03AF7B34 MOV W0, W0
	0x03AF7B38 LDP X30, X21, [X31], #0x20
	0x03AF7B3C RET
	0x03AF7B40 BL 0x1C16F20
	0x03AF7B44 STP X30, X21, [X31 - 0x20]!
	0x03AF7B48 STP X20, X19, [X31 + 0x10]
	0x03AF7B4C MOV X19, X0
	0x03AF7B50 LDR W0, [X0 + 0x1DC]
	0x03AF7B54 AND X21, X1, 0x0
	0x03AF7B58 MOV X20, X1
	0x03AF7B5C MOV X1, X21
	0x03AF7B60 MOV X2, X31
	0x03AF7B64 BL 0x3ADAC28
	0x03AF7B68 TBZ X0, 0x0, 0x3AF7B78
	0x03AF7B6C LDP X20, X19, [X31 + 0x10]
	0x03AF7B70 LDP X30, X21, [X31], #0x20
	0x03AF7B74 RET
	0x03AF7B78 LDR X8, [X19]
	0x03AF7B7C MOV X0, X19
	0x03AF7B80 MOV X1, X21
	0x03AF7B84 LDR X9, [X8 + 0x758]
	0x03AF7B88 LDR X2, [X8 + 0x760]
	0x03AF7B8C BLR X9
	0x03AF7B90 LDR X8, [X19]
	0x03AF7B94 MOVZ W9, 0x1
	0x03AF7B98 STR W20, [X19 + 0x1DC]
	0x03AF7B9C STRB W9, [X19 + 0x370]
	0x03AF7BA0 LDR X2, [X8 + 0x2F8]
	0x03AF7BA4 LDR X1, [X8 + 0x300]
	0x03AF7BA8 MOV X0, X19
	0x03AF7BAC LDP X20, X19, [X31 + 0x10]
	0x03AF7BB0 LDP X30, X21, [X31], #0x20
	0x03AF7BB4 BR X2
	0x03AF7BB8 STP X30, X21, [X31 - 0x20]!
	0x03AF7BBC STP X20, X19, [X31 + 0x10]
	0x03AF7BC0 ADRP X21, 0x8EB000
	0x03AF7BC4 ADRP X20, 0x5FC000
	0x03AF7BC8 LDRB W8, [X21 + 0x62F]
	0x03AF7BCC LDR X20, [X20 + 0x598]
	0x03AF7BD0 MOV X19, X0
	0x03AF7BD4 TBNZ X8, 0x0, 0x3AF7BF8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8EC000
	006 Move X21, 0x5FD000
	007 Move W8, [X20+1568]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5FD000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1568], W8
	019 Move X0, [X21]
	020 Move X20, [X19+312]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {94}
	033 Move X8, [X19+312]
	034 Compare X8, 0
	035 JumpIfEqual {99}
	036 Move X0, [X21]
	037 Move X20, [X8+248]
	038 Move W9, [X0+224]
	039 Compare W9, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Equality, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {94}
	050 Move X8, [X19]
	051 Move X0, X19
	052 Move X9, [X8+456]
	053 Move X1, [X8+464]
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {94}
	059 Move X8, [X19]
	060 Move X0, X19
	061 Move X9, [X8+696]
	062 Move X1, [X8+704]
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {94}
	068 Move W8, [X19+624]
	069 Compare W8, 0
	070 JumpIfEqual {92}
	071 Move X0, [X19+256]
	072 Compare X0, 0
	073 JumpIfEqual {92}
	074 Move X1, X31
	075 Call TouchScreenKeyboard.get_active, X0
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfEqual {92}
	080 Move X0, [X19+256]
	081 Compare X0, 0
	082 JumpIfEqual {99}
	083 Move W1, 1
	084 Move X2, X31
	085 Call TouchScreenKeyboard.set_active, X0, X1
	086 Move X0, [X19+256]
	087 Compare X0, 0
	088 JumpIfEqual {99}
	089 Move X1, [X19+544]
	090 Move X2, X31
	091 Call TouchScreenKeyboard.set_text, X0, X1
	092 Move W8, 1
	093 Move [X19+625], W8
	094 Move X20, [X31+16]
	095 Move X19, [X31+24]
	096 Move X30, [X31+32]
	097 Move X21, [X31+40]
	098 Return 
	099 Call 0x1C17F20

Method: System.Void ActivateInputFieldInternal()

Disassembly:
	0x03AF1A60 CBNZ W9, 0x3AF18CC
	0x03AF1A64 BL 0x1C16F28
	0x03AF1A68 BL 0x1C16F20
	0x03AF1A6C STR X30, [X31 - 0x30]!
	0x03AF1A70 STP X22, X21, [X31 + 0x10]
	0x03AF1A74 STP X20, X19, [X31 + 0x20]
	0x03AF1A78 ADRP X21, 0x8F1000
	0x03AF1A7C ADRP X22, 0x668000
	0x03AF1A80 LDRB W8, [X21 + 0x5FF]
	0x03AF1A84 LDR X22, [X22 + 0x178]
	0x03AF1A88 MOV X19, X1
	0x03AF1A8C MOV X20, X0
	0x03AF1A90 TBNZ X8, 0x0, 0x3AF1AA8
	0x03AF1A94 ADRP X0, 0x668000
	0x03AF1A98 LDR X0, [X0 + 0x178]
	0x03AF1A9C BL 0x1C16CF4
	0x03AF1AA0 MOVZ W8, 0x1
	0x03AF1AA4 STRB W8, [X21 + 0x5FF]
	0x03AF1AA8 LDR X0, [X22]
	0x03AF1AAC BL 0x1C16F10
	0x03AF1AB0 MOV W1, W31
	0x03AF1AB4 MOV X2, X31
	0x03AF1AB8 MOV X21, X0
	0x03AF1ABC BL 0x3B0D4CC
	0x03AF1AC0 CBZ X21, 0x3AF1ADC
	0x03AF1AC4 STP X20, X19, [X21 + 0x20]
	0x03AF1AC8 MOV X0, X21
	0x03AF1ACC LDP X20, X19, [X31 + 0x20]
	0x03AF1AD0 LDP X22, X21, [X31 + 0x10]
	0x03AF1AD4 LDR X30, [X31], #0x30
	0x03AF1AD8 RET
	0x03AF1ADC BL 0x1C16F20
	0x03AF1AE0 STP X30, X19, [X31 - 0x10]!
	0x03AF1AE4 MOV X19, X0
	0x03AF1AE8 BL 0x3AF16E0
	0x03AF1AEC TBZ X0, 0x0, 0x3AF1AF4
	0x03AF1AF0 STRB W31, [X19 + 0x272]
	0x03AF1AF4 LDP X30, X19, [X31], #0x10
	0x03AF1AF8 RET
	0x03AF1AFC SUB X31, X31, 0x70
	0x03AF1B00 STR D12, [X31 + 0x10]
	0x03AF1B04 STP D11, D10, [X31 + 0x18]
	0x03AF1B08 STP D9, D8, [X31 + 0x28]
	0x03AF1B0C STR X30, [X31 + 0x38]
	0x03AF1B10 STP X24, X23, [X31 + 0x40]
	0x03AF1B14 STP X22, X21, [X31 + 0x50]
	0x03AF1B18 STP X20, X19, [X31 + 0x60]
	0x03AF1B1C ADRP X21, 0x8F1000
	0x03AF1B20 LDRB W8, [X21 + 0x600]
	0x03AF1B24 MOV X19, X1
	0x03AF1B28 MOV X20, X0
	0x03AF1B2C TBNZ X8, 0x0, 0x3AF1B50
	0x03AF1B30 ADRP X0, 0x629000
	0x03AF1B34 LDR X0, [X0 + 0xDF8]
	0x03AF1B38 BL 0x1C16CF4
	0x03AF1B3C ADRP X0, 0x667000
	0x03AF1B40 LDR X0, [X0 + 0xBB8]
	0x03AF1B44 BL 0x1C16CF4
	0x03AF1B48 MOVZ W8, 0x1
	0x03AF1B4C STRB W8, [X21 + 0x600]
	0x03AF1B50 MOV X0, X20
	0x03AF1B54 MOV X1, X19
	0x03AF1B58 STR W31, [X31 + 0xC]
	0x03AF1B5C BL 0x3AF16E0
	0x03AF1B60 TBZ X0, 0x0, 0x3AF21F4
	0x03AF1B64 ADRP X8, 0x629000
	0x03AF1B68 LDR X8, [X8 + 0xDF8]
	0x03AF1B6C LDR X0, [X8]
	0x03AF1B70 LDR W8, [X0 + 0xE0]
	0x03AF1B74 CBNZ W8, 0x3AF1B7C
	0x03AF1B78 BL 0x1C16DFC
	0x03AF1B7C MOV X0, X31
	0x03AF1B80 BL 0x3E4FF90
	0x03AF1B84 MOV X21, X0
	0x03AF1B88 MOV X0, X20
	0x03AF1B8C MOV X1, X31
	0x03AF1B90 BL 0x3C32ECC
	0x03AF1B94 CBZ X21, 0x3AF2230
	0x03AF1B98 MOV X1, X0
	0x03AF1B9C MOV X0, X21
	0x03AF1BA0 MOV X2, X19
	0x03AF1BA4 MOV X3, X31
	0x03AF1BA8 BL 0x3E4EC58
	0x03AF1BAC LDRB W21, [X20 + 0x270]
	0x03AF1BB0 MOV X0, X20
	0x03AF1BB4 MOV X1, X19
	0x03AF1BB8 MOV X2, X31
	0x03AF1BBC BL 0x3E3C4B8
	0x03AF1BC0 MOV X0, X20
	0x03AF1BC4 BL 0x3AF01B0
	0x03AF1BC8 TBNZ X0, 0x0, 0x3AF1BE0
	0x03AF1BCC LDR X0, [X20 + 0x100]
	0x03AF1BD0 CBZ X0, 0x3AF1C04
	0x03AF1BD4 MOV X1, X31
	0x03AF1BD8 BL 0x3C3CFD8
	0x03AF1BDC TBZ X0, 0x0, 0x3AF1C04
	0x03AF1BE0 LDR X0, [X20 + 0x2F0]
	0x03AF1BE4 MOV X1, X31
	0x03AF1BE8 BL 0x3C634AC
	0x03AF1BEC LDR X0, [X20 + 0x2F0]
	0x03AF1BF0 CBZ X0, 0x3AF1C20
	0x03AF1BF4 MOV X1, X31
	0x03AF1BF8 BL 0x3C62EF0
	0x03AF1BFC AND W24, W0, 0x1
	0x03AF1C00 B 0x3AF1C24
	0x03AF1C04 LDR X8, [X20]
	0x03AF1C08 MOV X0, X20
	0x03AF1C0C MOV X1, X19
	0x03AF1C10 LDR X9, [X8 + 0x378]
	0x03AF1C14 LDR X2, [X8 + 0x380]
	0x03AF1C18 BLR X9
	0x03AF1C1C B 0x3AF21F4
	0x03AF1C20 MOV W24, W31
	0x03AF1C24 MOV X0, X31
	0x03AF1C28 BL 0x3C3C764
	0x03AF1C2C LDR V11, [X20 + 0x2AC]
	0x03AF1C30 LDR V12, [X20 + 0x2B4]
	0x03AF1C34 MOV V8.16B, V0.16B
	0x03AF1C38 STR S0, [X20 + 0x2AC]
	0x03AF1C3C CBZ W21, 0x3AF1CEC
	0x03AF1C40 CBZ X19, 0x3AF2230
	0x03AF1C44 LDR X21, [X20 + 0x138]
	0x03AF1C48 LDR V9, [X19 + 0x104]
	0x03AF1C4C LDR V10, [X19 + 0x108]
	0x03AF1C50 MOV X0, X19
	0x03AF1C54 MOV X1, X31
	0x03AF1C58 BL 0x3E4F314
	0x03AF1C5C ADRP X23, 0x667000
	0x03AF1C60 LDR X23, [X23 + 0xBB8]
	0x03AF1C64 MOV X22, X0
	0x03AF1C68 LDR X8, [X23]
	0x03AF1C6C LDR W9, [X8 + 0xE0]
	0x03AF1C70 CBNZ W9, 0x3AF1C7C
	0x03AF1C74 MOV X0, X8
	0x03AF1C78 BL 0x1C16DFC
	0x03AF1C7C FMOV S2, W31
	0x03AF1C80 ADD X2, X31, 0xC
	0x03AF1C84 MOV X0, X21
	0x03AF1C88 MOV V0.16B, V9.16B
	0x03AF1C8C MOV V1.16B, V10.16B
	0x03AF1C90 MOV X1, X22
	0x03AF1C94 MOV X3, X31
	0x03AF1C98 BL 0x3B1D930
	0x03AF1C9C LDR W8, [X31 + 0xC]
	0x03AF1CA0 LDRB W9, [X20 + 0x2D9]
	0x03AF1CA4 MOV W21, W0
	0x03AF1CA8 CMP W8, 0x1
	0x03AF1CAC CBZ W24, 0x3AF1D04
	0x03AF1CB0 CBZ W9, 0x3AF1D40
	0x03AF1CB4 B.NE 0x3AF1DA4
	0x03AF1CB8 LDR X8, [X20 + 0x138]
	0x03AF1CBC CBZ X8, 0x3AF2230
	0x03AF1CC0 LDR X8, [X8 + 0x368]
	0x03AF1CC4 CBZ X8, 0x3AF2230
	0x03AF1CC8 LDR X8, [X8 + 0x38]
	0x03AF1CCC CBZ X8, 0x3AF2230
	0x03AF1CD0 LDR W9, [X8 + 0x18]
	0x03AF1CD4 CMP W21, W9
	0x03AF1CD8 B.CS 0x3AF222C
	0x03AF1CDC MOVZ W9, 0x178
	0x03AF1CE0 SMADDL X8, X21, X9, X8
	0x03AF1CE4 LDR W8, [X8 + 0x24]
	0x03AF1CE8 B 0x3AF1D80
	0x03AF1CEC LDRB W8, [X20 + 0x2C8]
	0x03AF1CF0 CBZ W8, 0x3AF1C40
	0x03AF1CF4 MOV X0, X20
	0x03AF1CF8 BL 0x3AECBA4
	0x03AF1CFC CBNZ X19, 0x3AF21E4
	0x03AF1D00 B 0x3AF2230
	0x03AF1D04 CBZ W9, 0x3AF1DF0
	0x03AF1D08 B.NE 0x3AF1E68
	0x03AF1D0C LDR X8, [X20 + 0x138]
	0x03AF1D10 CBZ X8, 0x3AF2230
	0x03AF1D14 LDR X8, [X8 + 0x368]
	0x03AF1D18 CBZ X8, 0x3AF2230
	0x03AF1D1C LDR X8, [X8 + 0x38]
	0x03AF1D20 CBZ X8, 0x3AF2230
	0x03AF1D24 LDR W9, [X8 + 0x18]
	0x03AF1D28 CMP W21, W9
	0x03AF1D2C B.CS 0x3AF222C
	0x03AF1D30 MOVZ W9, 0x178
	0x03AF1D34 SMADDL X8, X21, X9, X8
	0x03AF1D38 LDR W8, [X8 + 0x24]
	0x03AF1D3C B 0x3AF1E30
	0x03AF1D40 B.NE 0x3AF1DA4
	0x03AF1D44 LDR X8, [X20 + 0x138]
	0x03AF1D48 CBZ X8, 0x3AF2230
	0x03AF1D4C LDR X8, [X8 + 0x368]
	0x03AF1D50 CBZ X8, 0x3AF2230
	0x03AF1D54 LDR X8, [X8 + 0x38]
	0x03AF1D58 CBZ X8, 0x3AF2230
	0x03AF1D5C CBZ W21, 0x3AF2218
	0x03AF1D60 LDR W10, [X8 + 0x18]
	0x03AF1D64 SUB W9, W21, 0x1
	0x03AF1D68 CMP W9, W10
	0x03AF1D6C B.CS 0x3AF222C
	0x03AF1D70 MOVZ W10, 0x178
	0x03AF1D74 SMADDL X8, X9, X10, X8
	0x03AF1D78 LDP W9, W8, [X8 + 0x24]
	0x03AF1D7C ADD W8, W8, W9
	0x03AF1D80 STR W8, [X20 + 0x238]
	0x03AF1D84 TBNZ X8, 0x1F, 0x3AF1DE8
	0x03AF1D88 LDR X9, [X20 + 0x220]
	0x03AF1D8C CBZ X9, 0x3AF2230
	0x03AF1D90 LDR W9, [X9 + 0x10]
	0x03AF1D94 CMP W9, W8
	0x03AF1D98 B.GE 0x3AF1EB8
	0x03AF1D9C STR W9, [X20 + 0x238]
	0x03AF1DA0 B 0x3AF1EB8
	0x03AF1DA4 CMP W8, 0x2
	0x03AF1DA8 B.NE 0x3AF1EB8
	0x03AF1DAC LDR X8, [X20 + 0x138]
	0x03AF1DB0 CBZ X8, 0x3AF2230
	0x03AF1DB4 LDR X8, [X8 + 0x368]
	0x03AF1DB8 CBZ X8, 0x3AF2230
	0x03AF1DBC LDR X8, [X8 + 0x38]
	0x03AF1DC0 CBZ X8, 0x3AF2230
	0x03AF1DC4 LDR W9, [X8 + 0x18]
	0x03AF1DC8 CMP W21, W9
	0x03AF1DCC B.CS 0x3AF222C
	0x03AF1DD0 MOVZ W9, 0x178
	0x03AF1DD4 SMADDL X8, X21, X9, X8
	0x03AF1DD8 LDP W9, W8, [X8 + 0x24]
	0x03AF1DDC ADDS W8, W8, W9
	0x03AF1DE0 STR W8, [X20 + 0x238]
	0x03AF1DE4 B.PL 0x3AF1D88
	0x03AF1DE8 STR W31, [X20 + 0x238]
	0x03AF1DEC B 0x3AF1EB8
	0x03AF1DF0 B.NE 0x3AF1E68
	0x03AF1DF4 LDR X8, [X20 + 0x138]
	0x03AF1DF8 CBZ X8, 0x3AF2230
	0x03AF1DFC LDR X8, [X8 + 0x368]
	0x03AF1E00 CBZ X8, 0x3AF2230
	0x03AF1E04 LDR X8, [X8 + 0x38]
	0x03AF1E08 CBZ X8, 0x3AF2230
	0x03AF1E0C CBZ W21, 0x3AF2224
	0x03AF1E10 LDR W10, [X8 + 0x18]
	0x03AF1E14 SUB W9, W21, 0x1
	0x03AF1E18 CMP W9, W10
	0x03AF1E1C B.CS 0x3AF222C
	0x03AF1E20 MOVZ W10, 0x178
	0x03AF1E24 SMADDL X8, X9, X10, X8
	0x03AF1E28 LDP W9, W8, [X8 + 0x24]
	0x03AF1E2C ADD W8, W8, W9
	0x03AF1E30 STR W8, [X20 + 0x238]
	0x03AF1E34 TBNZ X8, 0x1F, 0x3AF1EAC
	0x03AF1E38 LDR X9, [X20 + 0x220]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x8F2000
	009 Move X23, 0x62A000
	010 Move W8, [X20+1569]
	011 Move X23, [X23+3576]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x62A000
	018 Move X0, [X0+3576]
	019 Call 0x1C17CF4
	020 Move X0, 0x603000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move X0, 0x603000
	024 Move X0, [X0+2440]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+1569], W8
	028 Move X0, [X23]
	029 Move X22, 0x603000
	030 Move W8, [X0+224]
	031 Move X22, [X22+1432]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X31
	036 Call EventSystem.get_current
	037 Move X8, [X22]
	038 Move X20, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X31
	046 Move X2, X31
	047 Call Object.op_Equality, X0, X1
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {287}
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X31
	058 Call EventSystem.get_current
	059 Compare X0, 0
	060 JumpIfEqual {295}
	061 Move X20, [X0+64]
	062 Move X0, X19
	063 Move X1, X31
	064 Call Component.get_gameObject, X0
	065 Move X8, [X22]
	066 Move X21, X0
	067 Move W9, [X8+224]
	068 Compare W9, 0
	069 JumpIfNotEqual {72}
	070 Move X0, X8
	071 Call 0x1C17DFC
	072 Move X0, X20
	073 Move X1, X21
	074 Move X2, X31
	075 Call Object.op_Inequality, X0, X1
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {97}
	080 Move X0, [X23]
	081 Move W8, [X0+224]
	082 Compare W8, 0
	083 JumpIfNotEqual {85}
	084 Call 0x1C17DFC
	085 Move X0, X31
	086 Call EventSystem.get_current
	087 Move X20, X0
	088 Move X0, X19
	089 Move X1, X31
	090 Call Component.get_gameObject, X0
	091 Compare X20, 0
	092 JumpIfEqual {295}
	093 Move X1, X0
	094 Move X0, X20
	095 Move X2, X31
	096 Call EventSystem.SetSelectedGameObject, X0, X1
	097 Move X0, X31
	098 Call TouchScreenKeyboard.get_isSupported
	099 Move TEMP, X0
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfNotEqual {109}
	103 Move X0, X19
	104 Call TMP_InputField.get_shouldHideSoftKeyboard, X0
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {147}
	109 Move X0, X31
	110 Call TouchScreenKeyboard.get_isSupported
	111 Move TEMP, X0
	112 And TEMP, TEMP, 1
	113 Compare TEMP, 1
	114 JumpIfEqual {142}
	115 Move W8, [X19+560]
	116 Compare W8, 0
	117 JumpIfNotEqual {142}
	118 Call TMP_InputField.get_inputSystem, X0
	119 Move X8, [X22]
	120 Move X20, X0
	121 Move W9, [X8+224]
	122 Compare W9, 0
	123 JumpIfNotEqual {126}
	124 Move X0, X8
	125 Call 0x1C17DFC
	126 Move X0, X20
	127 Move X1, X31
	128 Move X2, X31
	129 Call Object.op_Inequality, X0, X1
	130 Move TEMP, X0
	131 And TEMP, TEMP, 1
	132 Compare TEMP, 1
	133 JumpIfNotEqual {142}
	134 Call TMP_InputField.get_inputSystem, X0
	135 Compare X0, 0
	136 JumpIfEqual {295}
	137 Move X8, [X0]
	138 Move W1, 1
	139 Move X9, [X8+616]
	140 Move X2, [X8+624]
	141 NotImplemented "Instruction BLR not yet implemented."
	142 Move W8, [X19+712]
	143 Compare W8, 0
	144 JumpIfEqual {278}
	145 Move X0, X19
	146 Call TMP_InputField.SelectAll, X0
	147 Call TMP_InputField.get_inputSystem, X0
	148 Move X8, [X22]
	149 Move X20, X0
	150 Move W9, [X8+224]
	151 Compare W9, 0
	152 JumpIfNotEqual {155}
	153 Move X0, X8
	154 Call 0x1C17DFC
	155 Move X0, X20
	156 Move X1, X31
	157 Move X2, X31
	158 Call Object.op_Inequality, X0, X1
	159 Move TEMP, X0
	160 And TEMP, TEMP, 1
	161 Compare TEMP, 1
	162 JumpIfNotEqual {179}
	163 Call TMP_InputField.get_inputSystem, X0
	164 Compare X0, 0
	165 JumpIfEqual {295}
	166 Move X8, [X0]
	167 Move X9, [X8+760]
	168 Move X1, [X8+768]
	169 NotImplemented "Instruction BLR not yet implemented."
	170 Move TEMP, X0
	171 And TEMP, TEMP, 1
	172 Compare TEMP, 1
	173 JumpIfNotEqual {179}
	174 Move X0, X19
	175 Call TMP_InputField.get_shouldHideMobileInput, X0
	176 And W0, W0, 1
	177 Move X1, X31
	178 Call TouchScreenKeyboard.set_hideInput, X0
	179 Move X0, X19
	180 Call TMP_InputField.get_shouldHideSoftKeyboard, X0
	181 Move TEMP, X0
	182 And TEMP, TEMP, 1
	183 Compare TEMP, 1
	184 JumpIfEqual {274}
	185 Move W8, [X19+560]
	186 Compare W8, 0
	187 JumpIfNotEqual {274}
	188 Move W8, [X19+388]
	189 Move W9, [X19+400]
	190 Move X0, [X19+544]
	191 Move W1, [X19+396]
	192 Move W7, [X19+428]
	193 NotImplemented "Instruction CMP not yet implemented."
	194 Subtract W9, W9, 1
	195 Move X8, 0x603000
	196 Move X8, [X8+2440]
	197 NotImplemented "Instruction CMP not yet implemented."
	198 NotImplemented "Instruction CSET not yet implemented."
	199 Move W4, 1
	200 Move X6, [X8]
	201 Move W2, W31
	202 Move [X31], X31
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Move X9, 0x603000
	205 Move X9, [X9+2440]
	206 NotImplemented "Instruction CSET not yet implemented."
	207 NotImplemented "Instruction CMP not yet implemented."
	208 NotImplemented "Instruction CSET not yet implemented."
	209 Move X6, [X9]
	210 Move [X31], X31
	211 Move W4, W31
	212 Move W5, W31
	213 Call TouchScreenKeyboard.Open, X0, X1, X2, X3, X4, X5, X6, X7
	214 Move W8, [X19+712]
	215 Move [X19+256], X0
	216 Compare W8, 0
	217 JumpIfEqual {221}
	218 Move X0, X19
	219 Call TMP_InputField.SelectAll, X0
	220 Move X0, [X19+256]
	221 Compare X0, 0
	222 JumpIfEqual {274}
	223 Move W20, [X19+564]
	224 Move X0, X19
	225 Call TMP_InputField.get_compositionLength, X0
	226 Move W21, [X19+568]
	227 Add W20, W0, W20
	228 Move X0, X19
	229 Call TMP_InputField.get_compositionLength, X0
	230 Add W8, W0, W21
	231 NotImplemented "Instruction CMP not yet implemented."
	232 Move W22, [X19+568]
	233 Move X0, X19
	234 Call TMP_InputField.get_compositionLength, X0
	235 Move W21, [X19+564]
	236 Move W22, [X19+564]
	237 Move X0, X19
	238 Call TMP_InputField.get_compositionLength, X0
	239 Move W21, [X19+568]
	240 Move W20, W0
	241 Move X0, X19
	242 Call TMP_InputField.get_compositionLength, X0
	243 Add W8, W20, W22
	244 Move X20, [X19+256]
	245 Move W22, [X19+564]
	246 Subtract W8, W8, W21
	247 Subtract W21, W8, W0
	248 Move X0, X19
	249 Call TMP_InputField.get_compositionLength, X0
	250 Move W23, [X19+568]
	251 Add W22, W0, W22
	252 Move X0, X19
	253 Call TMP_InputField.get_compositionLength, X0
	254 Add W8, W0, W23
	255 Move W9, 568
	256 NotImplemented "Instruction CMP not yet implemented."
	257 Move W8, 564
	258 NotImplemented "Instruction CSEL not yet implemented."
	259 Move W22, [X19]
	260 Move X0, X19
	261 Call TMP_InputField.get_compositionLength, X0
	262 Add W1, W0, W22
	263 Add X0, X31, 8
	264 Move W2, W21
	265 Move X3, X31
	266 Move [X31+8], X31
	267 Call RangeInt..ctor, X0, X1, X2
	268 Compare X20, 0
	269 JumpIfEqual {295}
	270 Move X1, [X31+8]
	271 Move X0, X20
	272 Move X2, X31
	273 Call TouchScreenKeyboard.set_selection, X0, X1
	274 Move X0, X31
	275 Call TouchScreenKeyboard.get_isInPlaceEditingAllowed
	276 And W8, W0, 1
	277 Move [X19+681], W8
	278 Move X8, [X19+544]
	279 Move W9, 1
	280 Move X0, X19
	281 Move [X19+624], W9
	282 Move [X19+656], X8
	283 Move [X19+664], W31
	284 Call TMP_InputField.SetCaretVisible, X0
	285 Move X0, X19
	286 Call TMP_InputField.UpdateLabel, X0
	287 Move X20, [X31+48]
	288 Move X19, [X31+56]
	289 Move X22, [X31+32]
	290 Move X21, [X31+40]
	291 Move X30, [X31+16]
	292 Move X23, [X31+24]
	293 Add X31, X31, 64
	294 Return 
	295 Call 0x1C17F20

Method: System.Void OnSelect(UnityEngine.EventSystems.BaseEventData eventData)

Disassembly:
	0x03AF7BD8 ADRP X0, 0x5FC000
	0x03AF7BDC LDR X0, [X0 + 0x598]
	0x03AF7BE0 BL 0x1C16CF4
	0x03AF7BE4 ADRP X0, 0x661000
	0x03AF7BE8 LDR X0, [X0 + 0x338]
	0x03AF7BEC BL 0x1C16CF4
	0x03AF7BF0 MOVZ W8, 0x1
	0x03AF7BF4 STRB W8, [X21 + 0x62F]
	0x03AF7BF8 LDR X0, [X20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X2, X31
	004 Move X19, X0
	005 Call Selectable.OnSelect, X0, X1
	006 Move X0, X19
	007 Call TMP_InputField.SendOnFocus, X0
	008 Move X0, X19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call TMP_InputField.ActivateInputField, X0
	012 Return 

Method: System.Void OnPointerClick(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03AF7BFC LDR X20, [X19 + 0x110]
	0x03AF7C00 LDR W8, [X0 + 0xE0]
	0x03AF7C04 CBNZ W8, 0x3AF7C0C
	0x03AF7C08 BL 0x1C16DFC
	0x03AF7C0C MOV X0, X20
	0x03AF7C10 MOV X1, X31
	0x03AF7C14 MOV X2, X31
	0x03AF7C18 BL 0x3C3883C
	0x03AF7C1C TBZ X0, 0x0, 0x3AF7C28

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {12}
	004 Move W8, [X1+328]
	005 Compare W8, 0
	006 JumpIfEqual {9}
	007 Move X30, [X31+16]
	008 Return 
	009 Move X30, [X31+16]
	010 Call TMP_InputField.ActivateInputField, X0
	011 Return 
	012 Call 0x1C17F20

Method: System.Void OnControlClick()

Disassembly:
	0x03AF7C20 LDR V0, [X19 + 0x1E0]

ISIL:
	001 Return 

Method: System.Void ReleaseSelection()

Disassembly:
	0x03AF1E3C CBZ X9, 0x3AF2230
	0x03AF1E40 LDR W10, [X9 + 0x10]
	0x03AF1E44 CMP W10, W8
	0x03AF1E48 B.GE 0x3AF1E50
	0x03AF1E4C STR W10, [X20 + 0x238]
	0x03AF1E50 STR W8, [X20 + 0x234]
	0x03AF1E54 LDR W9, [X9 + 0x10]
	0x03AF1E58 CMP W9, W8
	0x03AF1E5C CSEL W8, W9, W8, LT
	0x03AF1E60 STR W8, [X20 + 0x234]
	0x03AF1E64 B 0x3AF1EB8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Add X8, X0, 715
	004 Move X19, X0
	005 NotImplemented "Instruction STRH not yet implemented."
	006 Move [X0+720], X31
	007 Call TMP_InputField.MarkGeometryAsDirty, X0
	008 Move X0, X19
	009 Call TMP_InputField.SendOnEndEdit, X0
	010 Move X0, X19
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call TMP_InputField.SendOnEndTextSelection, X0
	014 Return 

Method: System.Void DeactivateInputField(System.Boolean clearSelection = False)

Disassembly:
	0x03AF0600 BL 0x1C16DFC
	0x03AF0604 MOV X0, X31
	0x03AF0608 BL 0x3E4FF90
	0x03AF060C CBZ X0, 0x3AF0A5C
	0x03AF0610 LDR X20, [X0 + 0x40]
	0x03AF0614 LDR X0, [X22]
	0x03AF0618 LDR W8, [X0 + 0xE0]
	0x03AF061C CBNZ W8, 0x3AF0624
	0x03AF0620 BL 0x1C16DFC
	0x03AF0624 MOV X0, X20
	0x03AF0628 MOV X1, X31
	0x03AF062C MOV X2, X31
	0x03AF0630 BL 0x3C3883C
	0x03AF0634 TBZ X0, 0x0, 0x3AF0698
	0x03AF0638 LDRB W8, [X19 + 0x2CA]
	0x03AF063C CBZ W8, 0x3AF0698
	0x03AF0640 MOV X0, X19
	0x03AF0644 BL 0x3AF0E3C
	0x03AF0648 B 0x3AF0A48
	0x03AF064C CBZ X8, 0x3AF0A5C
	0x03AF0650 MOV X0, X8
	0x03AF0654 MOV X1, X31
	0x03AF0658 BL 0x3C3CF1C
	0x03AF065C LDR X8, [X19 + 0x220]
	0x03AF0660 MOV X20, X0
	0x03AF0664 MOV X1, X20
	0x03AF0668 MOV X2, X31
	0x03AF066C MOV X0, X8
	0x03AF0670 BL 0x3226EF8
	0x03AF0674 TBZ X0, 0x0, 0x3AF081C
	0x03AF0678 LDRB W8, [X19 + 0x230]
	0x03AF067C CBZ W8, 0x3AF0858
	0x03AF0680 LDR X0, [X19 + 0x100]
	0x03AF0684 CBZ X0, 0x3AF0A5C
	0x03AF0688 LDR X1, [X19 + 0x220]
	0x03AF068C MOV X2, X31
	0x03AF0690 BL 0x3C3CF58
	0x03AF0694 B 0x3AF09CC
	0x03AF0698 LDR X0, [X22]
	0x03AF069C LDR W8, [X0 + 0xE0]
	0x03AF06A0 CBNZ W8, 0x3AF06A8
	0x03AF06A4 BL 0x1C16DFC
	0x03AF06A8 MOV X0, X20
	0x03AF06AC MOV X1, X31
	0x03AF06B0 MOV X2, X31
	0x03AF06B4 BL 0x3C354F8
	0x03AF06B8 TBZ X0, 0x0, 0x3AF07D0
	0x03AF06BC MOV X0, X19
	0x03AF06C0 MOV X1, X31
	0x03AF06C4 BL 0x3C32ECC
	0x03AF06C8 LDR X8, [X22]
	0x03AF06CC MOV X21, X0
	0x03AF06D0 LDR W9, [X8 + 0xE0]
	0x03AF06D4 CBNZ W9, 0x3AF06E0
	0x03AF06D8 MOV X0, X8
	0x03AF06DC BL 0x1C16DFC
	0x03AF06E0 MOV X0, X20
	0x03AF06E4 MOV X1, X21
	0x03AF06E8 MOV X2, X31
	0x03AF06EC BL 0x3C354F8
	0x03AF06F0 TBZ X0, 0x0, 0x3AF07D0
	0x03AF06F4 LDR X0, [X22]
	0x03AF06F8 LDR X21, [X19 + 0x2D0]
	0x03AF06FC LDR W8, [X0 + 0xE0]
	0x03AF0700 CBNZ W8, 0x3AF0708
	0x03AF0704 BL 0x1C16DFC
	0x03AF0708 MOV X0, X20
	0x03AF070C MOV X1, X21
	0x03AF0710 MOV X2, X31
	0x03AF0714 BL 0x3C3883C
	0x03AF0718 TBNZ X0, 0x0, 0x3AF0A48
	0x03AF071C STR X20, [X19 + 0x2D0]
	0x03AF0720 LDR X0, [X22]
	0x03AF0724 LDR X21, [X19 + 0x150]
	0x03AF0728 LDR W8, [X0 + 0xE0]
	0x03AF072C CBNZ W8, 0x3AF0734
	0x03AF0730 BL 0x1C16DFC
	0x03AF0734 MOV X0, X21
	0x03AF0738 MOV X1, X31
	0x03AF073C BL 0x3C38948
	0x03AF0740 TBZ X0, 0x0, 0x3AF0780
	0x03AF0744 LDR X0, [X19 + 0x150]
	0x03AF0748 CBZ X0, 0x3AF0A5C
	0x03AF074C MOV X1, X31
	0x03AF0750 BL 0x3C32ECC
	0x03AF0754 LDR X8, [X22]
	0x03AF0758 MOV X21, X0
	0x03AF075C LDR W9, [X8 + 0xE0]
	0x03AF0760 CBNZ W9, 0x3AF076C
	0x03AF0764 MOV X0, X8
	0x03AF0768 BL 0x1C16DFC
	0x03AF076C MOV X0, X20
	0x03AF0770 MOV X1, X21
	0x03AF0774 MOV X2, X31
	0x03AF0778 BL 0x3C3883C
	0x03AF077C TBNZ X0, 0x0, 0x3AF0A48
	0x03AF0780 LDRB W8, [X19 + 0x2CA]
	0x03AF0784 CBNZ W8, 0x3AF0640
	0x03AF0788 CBZ X20, 0x3AF0A5C
	0x03AF078C ADRP X8, 0x669000
	0x03AF0790 LDR X8, [X8 + 0x160]
	0x03AF0794 MOV X0, X20
	0x03AF0798 LDR X1, [X8]
	0x03AF079C BL 0x21E52E4
	0x03AF07A0 LDR X8, [X22]
	0x03AF07A4 MOV X20, X0
	0x03AF07A8 LDR W9, [X8 + 0xE0]
	0x03AF07AC CBNZ W9, 0x3AF07B8
	0x03AF07B0 MOV X0, X8
	0x03AF07B4 BL 0x1C16DFC
	0x03AF07B8 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8F3000
	006 Move W8, [X20+1570]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x604000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1570], W8
	017 Move W8, [X19+624]
	018 Compare W8, 0
	019 JumpIfEqual {143}
	020 Move X21, 0x604000
	021 Move X21, [X21+1432]
	022 Move [X19+665], W31
	023 Move [X19+624], W31
	024 Move X20, [X19+328]
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Inequality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {48}
	038 Move X0, [X19+544]
	039 Move X20, [X19+328]
	040 Move X1, X31
	041 Call String.IsNullOrEmpty, X0
	042 Compare X20, 0
	043 JumpIfEqual {148}
	044 And W1, W0, 1
	045 Move X0, X20
	046 Move X2, X31
	047 Call Behaviour.set_enabled, X0, X1
	048 Move X0, [X21]
	049 Move X20, [X19+312]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X20
	055 Move X1, X31
	056 Move X2, X31
	057 Call Object.op_Inequality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {136}
	062 Move X8, [X19]
	063 Move X0, X19
	064 Move X9, [X8+696]
	065 Move X1, [X8+704]
	066 NotImplemented "Instruction BLR not yet implemented."
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {136}
	071 Move W8, [X19+664]
	072 Compare W8, 0
	073 JumpIfEqual {81}
	074 Move W8, [X19+728]
	075 Compare W8, 0
	076 JumpIfEqual {81}
	077 Move X1, [X19+656]
	078 Move W2, 1
	079 Move X0, X19
	080 Call TMP_InputField.SetText, X0, X1, X2
	081 Move X0, [X19+256]
	082 Compare X0, 0
	083 JumpIfEqual {88}
	084 Move W1, W31
	085 Move X2, X31
	086 Call TouchScreenKeyboard.set_active, X0, X1
	087 Move [X19+256], X31
	088 Move W8, [X19+714]
	089 Move W9, 1
	090 Move [X19+715], W9
	091 Compare W8, 0
	092 JumpIfNotEqual {96}
	093 Move W8, [X19+716]
	094 Compare W8, 0
	095 JumpIfEqual {112}
	096 Move X0, [X21]
	097 Move X20, [X19+336]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move X0, X20
	103 Move X1, X31
	104 Move X2, X31
	105 Call Object.op_Equality, X0, X1
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfNotEqual {112}
	110 Move X0, X19
	111 Call TMP_InputField.ReleaseSelection, X0
	112 Call TMP_InputField.get_inputSystem, X0
	113 Move X8, [X21]
	114 Move X20, X0
	115 Move W9, [X8+224]
	116 Compare W9, 0
	117 JumpIfNotEqual {120}
	118 Move X0, X8
	119 Call 0x1C17DFC
	120 Move X0, X20
	121 Move X1, X31
	122 Move X2, X31
	123 Call Object.op_Inequality, X0, X1
	124 Move TEMP, X0
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfNotEqual {136}
	128 Call TMP_InputField.get_inputSystem, X0
	129 Compare X0, 0
	130 JumpIfEqual {148}
	131 Move X8, [X0]
	132 Move W1, W31
	133 Move X9, [X8+616]
	134 Move X2, [X8+624]
	135 NotImplemented "Instruction BLR not yet implemented."
	136 Move X0, X19
	137 Move X20, [X31+16]
	138 Move X19, [X31+24]
	139 Move X30, [X31+32]
	140 Move X21, [X31+40]
	141 Call TMP_InputField.MarkGeometryAsDirty, X0
	142 Return 
	143 Move X20, [X31+16]
	144 Move X19, [X31+24]
	145 Move X30, [X31+32]
	146 Move X21, [X31+40]
	147 Return 
	148 Call 0x1C17F20

Method: System.Void OnDeselect(UnityEngine.EventSystems.BaseEventData eventData)

Disassembly:
	0x03AF7C24 B 0x3AF7C64
	0x03AF7C28 ADRP X21, 0x661000
	0x03AF7C2C LDR X21, [X21 + 0x338]
	0x03AF7C30 LDR X20, [X19 + 0x110]
	0x03AF7C34 LDR X0, [X21]
	0x03AF7C38 LDR W8, [X0 + 0xE0]
	0x03AF7C3C CBNZ W8, 0x3AF7C44
	0x03AF7C40 BL 0x1C16DFC
	0x03AF7C44 CBZ X20, 0x3AF7C70
	0x03AF7C48 LDR X8, [X21]
	0x03AF7C4C MOV X0, X20
	0x03AF7C50 MOV X2, X31
	0x03AF7C54 LDR X8, [X8 + 0xB8]
	0x03AF7C58 LDR W1, [X8 + 0x3C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move W1, W31
	006 Move X20, X0
	007 Call TMP_InputField.DeactivateInputField, X0, X1
	008 Move X0, X20
	009 Move X1, X19
	010 Move X2, X31
	011 Call Selectable.OnDeselect, X0, X1
	012 Move X0, X20
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+32]
	016 Call TMP_InputField.SendOnFocusLost, X0
	017 Return 

Method: System.Void OnSubmit(UnityEngine.EventSystems.BaseEventData eventData)

Disassembly:
	0x03AF7C5C BL 0x3C15F98
	0x03AF7C60 STR S0, [X19 + 0x1E0]
	0x03AF7C64 LDP X20, X19, [X31 + 0x10]
	0x03AF7C68 LDP X30, X21, [X31], #0x20
	0x03AF7C6C RET
	0x03AF7C70 BL 0x1C16F20
	0x03AF7C74 STR D8, [X31 - 0x20]!
	0x03AF7C78 STP X30, X19, [X31 + 0x10]
	0x03AF7C7C LDR V1, [X0 + 0x1E0]
	0x03AF7C80 FCMP S1, S0
	0x03AF7C84 B.NE 0x3AF7C94
	0x03AF7C88 LDP X30, X19, [X31 + 0x10]
	0x03AF7C8C LDR V8, [X31], #0x20
	0x03AF7C90 RET
	0x03AF7C94 LDR X8, [X0]
	0x03AF7C98 MOV X19, X0
	0x03AF7C9C MOV V8.16B, V0.16B
	0x03AF7CA0 LDR X9, [X8 + 0x768]
	0x03AF7CA4 LDR X1, [X8 + 0x770]
	0x03AF7CA8 BLR X9
	0x03AF7CAC LDR X8, [X19]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move X19, X0
	005 Move X9, [X8+456]
	006 Move X1, [X8+464]
	007 NotImplemented "Instruction BLR not yet implemented."
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {31}
	012 Move X8, [X19]
	013 Move X0, X19
	014 Move X9, [X8+696]
	015 Move X1, [X8+704]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {31}
	021 Move W8, [X19+624]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Move W8, 1
	025 Move [X19+625], W8
	026 Move X0, X19
	027 Move X30, [X31+16]
	028 Move X19, [X31+24]
	029 Call TMP_InputField.SendOnSubmit, X0
	030 Return 
	031 Move X30, [X31+16]
	032 Move X19, [X31+24]
	033 Return 

Method: System.Void EnforceContentType()

Disassembly:
	0x03AEECDC BL 0x1C16DFC
	0x03AEECE0 MOV X0, X20
	0x03AEECE4 MOV X1, X31
	0x03AEECE8 MOV X2, X31
	0x03AEECEC BL 0x3C354F8
	0x03AEECF0 TBZ X0, 0x0, 0x3AEED48
	0x03AEECF4 LDR X8, [X19 + 0x150]
	0x03AEECF8 CBZ X8, 0x3AEEDC8
	0x03AEECFC LDR X20, [X8 + 0x118]
	0x03AEED00 ADRP X8, 0x66A000
	0x03AEED04 LDR X8, [X8 + 0xB68]
	0x03AEED08 LDR X0, [X8]
	0x03AEED0C BL 0x1C16F10
	0x03AEED10 ADRP X8, 0x66B000
	0x03AEED14 LDR X8, [X8 + 0x68]
	0x03AEED18 MOV X1, X19
	0x03AEED1C MOV X3, X31
	0x03AEED20 MOV X21, X0
	0x03AEED24 LDR X2, [X8]
	0x03AEED28 BL 0x2725EC4
	0x03AEED2C CBZ X20, 0x3AEEDC8
	0x03AEED30 ADRP X8, 0x66A000
	0x03AEED34 LDR X8, [X8 + 0x8C8]
	0x03AEED38 MOV X0, X20
	0x03AEED3C MOV X1, X21
	0x03AEED40 LDR X2, [X8]
	0x03AEED44 BL 0x272A4B0
	0x03AEED48 MOV X0, X19
	0x03AEED4C BL 0x3AECBA4
	0x03AEED50 ADRP X20, 0x66A000
	0x03AEED54 LDR X20, [X20 + 0x3F0]
	0x03AEED58 ADRP X22, 0x663000
	0x03AEED5C ADRP X21, 0x66B000
	0x03AEED60 LDR X0, [X20]
	0x03AEED64 LDR W8, [X0 + 0xE0]
	0x03AEED68 LDR X22, [X22 + 0x530]
	0x03AEED6C LDR X21, [X21 + 0x130]
	0x03AEED70 CBNZ W8, 0x3AEED7C
	0x03AEED74 BL 0x1C16DFC
	0x03AEED78 LDR X0, [X20]
	0x03AEED7C LDR X8, [X0 + 0xB8]
	0x03AEED80 LDR X0, [X22]
	0x03AEED84 LDR X20, [X8 + 0x58]
	0x03AEED88 BL 0x1C16F10
	0x03AEED8C LDR X2, [X21]
	0x03AEED90 MOV X1, X19
	0x03AEED94 MOV X3, X31

ISIL:
	001 Move W8, [X0+384]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move X10, -49635328
	004 Add X10, X10, 3068
	005 NotImplemented "Instruction ADR not yet implemented."
	006 Move W12, [X10]
	007 Add X11, X11, X12
	008 Move W9, W31
	009 Move W10, W31
	010 CallNoReturn X11
	011 Move W8, W31
	012 Move [X0+400], W31
	013 Move W10, 2
	014 Move W9, 4
	015 Move W8, W31
	016 Move [X0+400], W31
	017 Move W10, 3
	018 Move W9, 2
	019 Move W8, W31
	020 Move [X0+400], W31
	021 Move W10, 4
	022 Move W9, 1
	023 Move W8, W31
	024 Move W9, W31
	025 Move [X0+400], W31
	026 Move W10, 5
	027 Move W8, W31
	028 Move [X0+400], W31
	029 Move W9, 7
	030 Move W10, 7
	031 Move W9, W31
	032 Move W10, W31
	033 Move W10, 1
	034 Move W9, 4
	035 Move [X0+400], W31
	036 Move W8, 2
	037 Move [X0+388], W8
	038 Move [X0+396], W9
	039 Move [X0+408], W10
	040 Call TMP_InputField.SetTextComponentWrapMode, X0
	041 Return 

Method: System.Void SetTextComponentWrapMode()

Disassembly:
	0x03AED538 ADD X0, X0, 0x20C
	0x03AED53C MOV X1, X31
	0x03AED540 BL 0x3B0D768
	0x03AED544 TBZ X0, 0x0, 0x3AED554
	0x03AED548 MOV X0, X19
	0x03AED54C LDP X30, X19, [X31], #0x10
	0x03AED550 B 0x3AED1E0
	0x03AED554 LDP X30, X19, [X31], #0x10
	0x03AED558 RET
	0x03AED55C LDR X0, [X0 + 0x1B0]
	0x03AED560 RET
	0x03AED564 STR X30, [X31 - 0x30]!
	0x03AED568 STP X22, X21, [X31 + 0x10]
	0x03AED56C STP X20, X19, [X31 + 0x20]
	0x03AED570 ADRP X22, 0x8F5000
	0x03AED574 ADRP X21, 0x66C000
	0x03AED578 LDRB W8, [X22 + 0x5E1]
	0x03AED57C LDR X21, [X21 + 0x78]
	0x03AED580 MOV X19, X1
	0x03AED584 MOV X20, X0
	0x03AED588 TBNZ X8, 0x0, 0x3AED5A0
	0x03AED58C ADRP X0, 0x66C000
	0x03AED590 LDR X0, [X0 + 0x78]
	0x03AED594 BL 0x1C16CF4
	0x03AED598 MOVZ W8, 0x1
	0x03AED59C STRB W8, [X22 + 0x5E1]
	0x03AED5A0 LDR X2, [X21]
	0x03AED5A4 ADD X0, X20, 0x1B0
	0x03AED5A8 MOV X1, X19
	0x03AED5AC LDP X20, X19, [X31 + 0x20]
	0x03AED5B0 LDP X22, X21, [X31 + 0x10]
	0x03AED5B4 LDR X30, [X31], #0x30
	0x03AED5B8 B 0x2253B70
	0x03AED5BC LDR X0, [X0 + 0x1B8]
	0x03AED5C0 RET
	0x03AED5C4 STR X30, [X31 - 0x30]!
	0x03AED5C8 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8F6000
	006 Move X20, 0x607000
	007 Move W8, [X21+1571]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x607000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1571], W8
	019 Move X0, [X20]
	020 Move X20, [X19+312]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {38}
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return 
	038 Move X0, [X19+312]
	039 Compare X0, 0
	040 JumpIfEqual {52}
	041 Move W8, [X19+400]
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X2, X31
	045 Subtract W8, W8, 1
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction CSET not yet implemented."
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Call TMP_Text.set_enableWordWrapping, X0, X1
	051 Return 
	052 Call 0x1C17F20

Method: System.Void SetTextComponentRichTextMode()

Disassembly:
	0x03AEF1C0 CBZ X0, 0x3AEF2D8
	0x03AEF1C4 LDR X20, [X19 + 0x248]
	0x03AEF1C8 MOV X1, X31
	0x03AEF1CC BL 0x3AF8E0C
	0x03AEF1D0 CBZ X0, 0x3AEF2D8
	0x03AEF1D4 MOV X1, X31
	0x03AEF1D8 BL 0x3C3E5B8
	0x03AEF1DC CBZ X20, 0x3AEF2D8
	0x03AEF1E0 MOV X0, X20
	0x03AEF1E4 MOV X1, X31
	0x03AEF1E8 BL 0x3C3E648
	0x03AEF1EC LDR X0, [X19 + 0x138]
	0x03AEF1F0 CBZ X0, 0x3AEF2D8
	0x03AEF1F4 LDR X20, [X19 + 0x248]
	0x03AEF1F8 MOV X1, X31
	0x03AEF1FC BL 0x3AF8E0C
	0x03AEF200 CBZ X0, 0x3AEF2D8
	0x03AEF204 MOV X1, X31
	0x03AEF208 BL 0x3C3E6D4
	0x03AEF20C CBZ X20, 0x3AEF2D8
	0x03AEF210 MOV X0, X20
	0x03AEF214 MOV X1, X31
	0x03AEF218 BL 0x3C3E764
	0x03AEF21C LDR X0, [X19 + 0x138]
	0x03AEF220 CBZ X0, 0x3AEF2D8
	0x03AEF224 LDR X20, [X19 + 0x248]
	0x03AEF228 MOV X1, X31
	0x03AEF22C BL 0x3AF8E0C
	0x03AEF230 CBZ X0, 0x3AEF2D8
	0x03AEF234 MOV X1, X31
	0x03AEF238 BL 0x3C3E7F0
	0x03AEF23C CBZ X20, 0x3AEF2D8
	0x03AEF240 MOV X0, X20
	0x03AEF244 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8F4000
	006 Move X20, 0x605000
	007 Move W8, [X21+1572]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x605000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1572], W8
	019 Move X0, [X20]
	020 Move X20, [X19+312]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {38}
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return 
	038 Move X0, [X19+312]
	039 Compare X0, 0
	040 JumpIfEqual {49}
	041 Move W1, [X19+561]
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X2, X31
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Call TMP_Text.set_richText, X0, X1
	048 Return 
	049 Call 0x1C17F20

Method: System.Void SetToCustomIfContentTypeIsNot(TMPro.TMP_InputField/ContentType[] allowedContentTypes)

Disassembly:
	0x03AEEE60 MOV X2, X31
	0x03AEEE64 BL 0x3C354F8
	0x03AEEE68 TBZ X0, 0x0, 0x3AEF2C0
	0x03AEEE6C LDR X0, [X19 + 0x248]
	0x03AEEE70 CBZ X0, 0x3AEF2D8
	0x03AEEE74 MOV X1, X31
	0x03AEEE78 BL 0x3C3EB78
	0x03AEEE7C LDR X0, [X19 + 0x138]
	0x03AEEE80 CBZ X0, 0x3AEF2D8
	0x03AEEE84 MOV X1, X31
	0x03AEEE88 MOV V8.16B, V0.16B
	0x03AEEE8C MOV V9.16B, V1.16B
	0x03AEEE90 MOV V10.16B, V2.16B
	0x03AEEE94 BL 0x3AF8E0C
	0x03AEEE98 CBZ X0, 0x3AEF2D8
	0x03AEEE9C MOV X1, X31
	0x03AEEEA0 BL 0x3C3EB78
	0x03AEEEA4 ADRP X8, 0xFFFFFFFFFCFFB000
	0x03AEEEA8 FSUB S0, S8, S0
	0x03AEEEAC FSUB S1, S9, S1
	0x03AEEEB0 LDR V12, [X8 + 0xF20]
	0x03AEEEB4 FSUB S2, S10, S2
	0x03AEEEB8 FMUL S0, S0, S0
	0x03AEEEBC FMUL S1, S1, S1
	0x03AEEEC0 FADD S0, S0, S1

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+384]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move X30, [X31+16]
	005 Return 
	006 Compare X1, 0
	007 JumpIfEqual {22}
	008 Move W9, [X1+24]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W10, W31
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add X11, X1, W10
	013 Move W11, [X11+32]
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Add W10, W10, 1
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W1, 9
	018 Move X30, [X31+16]
	019 Call TMP_InputField.set_contentType, X0, X1
	020 Return 
	021 Call 0x1C17F28
	022 Call 0x1C17F20

Method: System.Void SetToCustom()

Disassembly:
	0x03AEEFC4 CBZ X0, 0x3AEF2D8
	0x03AEEFC8 MOV X1, X31
	0x03AEEFCC BL 0x3C3E5B8
	0x03AEEFD0 FSUB S0, S8, S0
	0x03AEEFD4 FSUB S1, S9, S1
	0x03AEEFD8 FMUL S0, S0, S0

ISIL:
	001 Move W8, [X0+384]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 
	004 Move W1, 9
	005 Call TMP_InputField.set_contentType, X0, X1
	006 Return 

Method: System.Void SetToCustom(TMPro.TMP_InputField/CharacterValidation characterValidation)

Disassembly:
	0x03AEF180 MOV X0, X20
	0x03AEF184 MOV X1, X31
	0x03AEF188 BL 0x3C3F8B8
	0x03AEF18C LDR X0, [X19 + 0x138]
	0x03AEF190 CBZ X0, 0x3AEF2D8
	0x03AEF194 LDR X20, [X19 + 0x248]

ISIL:
	001 Move W8, [X0+384]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 
	004 Move W1, 9
	005 Call TMP_InputField.set_contentType, X0, X1
	006 Return 

Method: System.Void DoStateTransition(UnityEngine.UI.Selectable/SelectionState state, System.Boolean instant)

Disassembly:
	0x03AF7CB0 MOVZ W9, 0x1
	0x03AF7CB4 STR S8, [X19 + 0x1E0]
	0x03AF7CB8 STRB W9, [X19 + 0x370]
	0x03AF7CBC LDR X2, [X8 + 0x2F8]
	0x03AF7CC0 LDR X1, [X8 + 0x300]
	0x03AF7CC4 MOV X0, X19
	0x03AF7CC8 LDP X30, X19, [X31 + 0x10]
	0x03AF7CCC LDR V8, [X31], #0x20
	0x03AF7CD0 BR X2
	0x03AF7CD4 LDR V0, [X0 + 0x1E4]
	0x03AF7CD8 RET

ISIL:
	001 Move W8, [X0+665]
	002 Compare W8, 0
	003 JumpIfEqual {5}
	004 Move W1, 3
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W8, 1
	007 Move [X0+665], W8
	008 And W2, W2, 1
	009 Move X3, X31
	010 Call Selectable.DoStateTransition, X0, X1, X2
	011 Return 

Method: System.Void CalculateLayoutInputHorizontal()

Disassembly:
	0x03AF7CDC STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Return 

Method: System.Void CalculateLayoutInputVertical()

Disassembly:
	0x03AF7CE0 LDR V1, [X0 + 0x1E4]

ISIL:
	001 Return 

Method: System.Single get_minWidth()

Disassembly:
	0x03AF7CE4 FCMP S1, S0
	0x03AF7CE8 B.NE 0x3AF7CF4

ISIL:
	001 Move S0, W31
	002 Return V0

Method: System.Single get_preferredWidth()

Disassembly:
	0x03AF7CEC LDP X30, X19, [X31], #0x10
	0x03AF7CF0 RET
	0x03AF7CF4 LDRB W8, [X0 + 0x238]
	0x03AF7CF8 MOV X19, X0
	0x03AF7CFC MOVZ W9, 0x1
	0x03AF7D00 STRB W9, [X0 + 0x370]
	0x03AF7D04 STR S0, [X0 + 0x1E4]
	0x03AF7D08 CBNZ W8, 0x3AF7D10
	0x03AF7D0C STR S0, [X19 + 0x1EC]
	0x03AF7D10 LDR X8, [X19]
	0x03AF7D14 MOV X0, X19
	0x03AF7D18 LDR X9, [X8 + 0x2F8]
	0x03AF7D1C LDR X1, [X8 + 0x300]
	0x03AF7D20 BLR X9
	0x03AF7D24 LDR X8, [X19]
	0x03AF7D28 MOV X0, X19
	0x03AF7D2C LDR X2, [X8 + 0x2E8]
	0x03AF7D30 LDR X1, [X8 + 0x2F0]
	0x03AF7D34 LDP X30, X19, [X31], #0x10
	0x03AF7D38 BR X2
	0x03AF7D3C LDR W0, [X0 + 0x210]
	0x03AF7D40 RET
	0x03AF7D44 STP X30, X19, [X31 - 0x10]!
	0x03AF7D48 LDR W8, [X0 + 0x210]
	0x03AF7D4C CMP W8, W1
	0x03AF7D50 B.NE 0x3AF7D5C
	0x03AF7D54 LDP X30, X19, [X31], #0x10
	0x03AF7D58 RET
	0x03AF7D5C LDR X8, [X0]
	0x03AF7D60 MOVZ W9, 0x1
	0x03AF7D64 STR W1, [X0 + 0x210]
	0x03AF7D68 STRB W9, [X0 + 0x370]
	0x03AF7D6C LDR X9, [X8 + 0x2F8]
	0x03AF7D70 LDR X1, [X8 + 0x300]
	0x03AF7D74 MOV X19, X0
	0x03AF7D78 BLR X9
	0x03AF7D7C LDR X8, [X19]
	0x03AF7D80 MOV X0, X19
	0x03AF7D84 LDR X2, [X8 + 0x2E8]
	0x03AF7D88 LDR X1, [X8 + 0x2F0]
	0x03AF7D8C LDP X30, X19, [X31], #0x10
	0x03AF7D90 BR X2
	0x03AF7D94 SUB X31, X31, 0xA0
	0x03AF7D98 STP D9, D8, [X31 + 0x60]
	0x03AF7D9C STR X30, [X31 + 0x70]
	0x03AF7DA0 STP X22, X21, [X31 + 0x80]
	0x03AF7DA4 STP X20, X19, [X31 + 0x90]
	0x03AF7DA8 ADRP X20, 0x8EB000
	0x03AF7DAC ADRP X22, 0x5FC000
	0x03AF7DB0 LDRB W8, [X20 + 0x630]
	0x03AF7DB4 LDR X22, [X22 + 0x598]
	0x03AF7DB8 MOV X19, X0
	0x03AF7DBC TBNZ X8, 0x0, 0x3AF7DD4
	0x03AF7DC0 ADRP X0, 0x5FC000
	0x03AF7DC4 LDR X0, [X0 + 0x598]
	0x03AF7DC8 BL 0x1C16CF4
	0x03AF7DCC MOVZ W8, 0x1
	0x03AF7DD0 STRB W8, [X20 + 0x630]
	0x03AF7DD4 MOVI V0.2D, 0x0
	0x03AF7DD8 MOV X0, X19
	0x03AF7DDC MOV X1, X31
	0x03AF7DE0 STP V0, V0, [X31 + 0x40]
	0x03AF7DE4 STP V0, V0, [X31 + 0x20]
	0x03AF7DE8 STP V0, V0, [X31]
	0x03AF7DEC BL 0x3CDADE8
	0x03AF7DF0 LDR X8, [X22]
	0x03AF7DF4 MOV X20, X0
	0x03AF7DF8 LDR W9, [X8 + 0xE0]
	0x03AF7DFC CBNZ W9, 0x3AF7E08
	0x03AF7E00 MOV X0, X8
	0x03AF7E04 BL 0x1C16DFC
	0x03AF7E08 MOV X0, X20
	0x03AF7E0C MOV X1, X31
	0x03AF7E10 BL 0x3C38948
	0x03AF7E14 FMOV S8, 1
	0x03AF7E18 TBZ X0, 0x0, 0x3AF7EE4

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x8EC000
	008 Move X21, 0x5FD000
	009 Move W8, [X20+1573]
	010 Move X21, [X21+1432]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5FD000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+1573], W8
	021 Move X0, [X21]
	022 Move X20, [X19+312]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move S0, W31
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {95}
	036 Move X0, [X21]
	037 Move X20, [X19+360]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Inequality, X0, X1
	046 Move S9, W31
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {60}
	051 Move X8, [X19+360]
	052 Compare X8, 0
	053 JumpIfEqual {102}
	054 Move X0, [X8+32]
	055 Compare X0, 0
	056 JumpIfEqual {102}
	057 Move X1, X31
	058 Call RectOffset.get_horizontal, X0
	059 NotImplemented "Instruction SCVTF not yet implemented."
	060 Move X0, [X21]
	061 Move X20, [X19+272]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X20
	067 Move X1, X31
	068 Move X2, X31
	069 Call Object.op_Inequality, X0, X1
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {87}
	074 Move X0, [X19+272]
	075 Compare X0, 0
	076 JumpIfEqual {102}
	077 Move X1, X31
	078 Call RectTransform.get_offsetMin, X0
	079 Move X0, [X19+272]
	080 Compare X0, 0
	081 JumpIfEqual {102}
	082 Move X1, X31
	083 Move V8, V0
	084 Call RectTransform.get_offsetMax, X0
	085 Subtract S0, S8, S0
	086 Add S9, S9, S0
	087 Move X0, [X19+312]
	088 Compare X0, 0
	089 JumpIfEqual {102}
	090 Move X8, [X0]
	091 Move X9, [X8+1656]
	092 Move X1, [X8+1664]
	093 NotImplemented "Instruction BLR not yet implemented."
	094 Add S0, S9, S0
	095 Move X20, [X31+32]
	096 Move X19, [X31+40]
	097 Move X30, [X31+16]
	098 Move X21, [X31+24]
	099 Move D9, [X31+48]
	100 Move D8, [X31+56]
	101 Return V0
	102 Call 0x1C17F20

Method: System.Single get_flexibleWidth()

Disassembly:
	0x03AF7E1C LDR X0, [X22]
	0x03AF7E20 LDR X21, [X19 + 0xF8]

ISIL:
	001 Move S0, -1
	002 Return V0

Method: System.Single get_minHeight()

Disassembly:
	0x03AF7E24 LDR W8, [X0 + 0xE0]
	0x03AF7E28 CBNZ W8, 0x3AF7E30

ISIL:
	001 Move S0, W31
	002 Return V0

Method: System.Single get_preferredHeight()

Disassembly:
	0x03AF7E2C BL 0x1C16DFC
	0x03AF7E30 MOV X0, X21
	0x03AF7E34 MOV X1, X31
	0x03AF7E38 BL 0x3C38948
	0x03AF7E3C TBZ X0, 0x0, 0x3AF7ED0
	0x03AF7E40 LDR X0, [X22]
	0x03AF7E44 LDR X20, [X19 + 0x100]
	0x03AF7E48 LDR W8, [X0 + 0xE0]
	0x03AF7E4C CBNZ W8, 0x3AF7E54
	0x03AF7E50 BL 0x1C16DFC
	0x03AF7E54 MOV X0, X20
	0x03AF7E58 MOV X1, X31
	0x03AF7E5C MOV X2, X31
	0x03AF7E60 BL 0x3C3883C
	0x03AF7E64 TBNZ X0, 0x0, 0x3AF7EE4
	0x03AF7E68 LDR X8, [X19 + 0x100]
	0x03AF7E6C CBZ X8, 0x3AF7F00
	0x03AF7E70 ADD X1, X8, 0x50
	0x03AF7E74 ADD X0, X31, 0x0
	0x03AF7E78 MOVZ W2, 0x60
	0x03AF7E7C BL 0x3EB1B30
	0x03AF7E80 ADD X0, X31, 0x0
	0x03AF7E84 MOV X1, X31
	0x03AF7E88 BL 0x3C9BF88
	0x03AF7E8C CMP W0, 0x1
	0x03AF7E90 B.LT 0x3AF7EE4
	0x03AF7E94 LDR V9, [X19 + 0x1E4]
	0x03AF7E98 FCMP S9, 0x0
	0x03AF7E9C B.LS 0x3AF7EE4
	0x03AF7EA0 LDR X8, [X19 + 0x100]
	0x03AF7EA4 CBZ X8, 0x3AF7F00
	0x03AF7EA8 ADD X1, X8, 0x50
	0x03AF7EAC ADD X0, X31, 0x0
	0x03AF7EB0 MOVZ W2, 0x60
	0x03AF7EB4 BL 0x3EB1B30
	0x03AF7EB8 ADD X0, X31, 0x0
	0x03AF7EBC MOV X1, X31
	0x03AF7EC0 BL 0x3C9BF88
	0x03AF7EC4 SCVTF S0, W0
	0x03AF7EC8 FDIV S8, S9, S0
	0x03AF7ECC B 0x3AF7EE4
	0x03AF7ED0 CBZ X20, 0x3AF7F00
	0x03AF7ED4 MOV X0, X20
	0x03AF7ED8 MOV X1, X31
	0x03AF7EDC BL 0x3E24614
	0x03AF7EE0 MOV V8.16B, V0.16B
	0x03AF7EE4 MOV V0.16B, V8.16B
	0x03AF7EE8 LDP X20, X19, [X31 + 0x90]
	0x03AF7EEC LDP X22, X21, [X31 + 0x80]
	0x03AF7EF0 LDR X30, [X31 + 0x70]
	0x03AF7EF4 LDP D9, D8, [X31 + 0x60]
	0x03AF7EF8 ADD X31, X31, 0xA0
	0x03AF7EFC RET
	0x03AF7F00 BL 0x1C16F20
	0x03AF7F04 LDRB W0, [X0 + 0x238]
	0x03AF7F08 RET
	0x03AF7F0C STP X30, X19, [X31 - 0x10]!
	0x03AF7F10 LDRB W9, [X0 + 0x238]
	0x03AF7F14 AND W8, W1, 0x1
	0x03AF7F18 CMP W9, W8
	0x03AF7F1C B.NE 0x3AF7F28
	0x03AF7F20 LDP X30, X19, [X31], #0x10
	0x03AF7F24 RET
	0x03AF7F28 LDR X9, [X0]
	0x03AF7F2C STRB W8, [X0 + 0x238]
	0x03AF7F30 MOV X19, X0
	0x03AF7F34 LDR X8, [X9 + 0x2F8]
	0x03AF7F38 LDR X1, [X9 + 0x300]
	0x03AF7F3C BLR X8
	0x03AF7F40 LDR X8, [X19]
	0x03AF7F44 MOV X0, X19
	0x03AF7F48 LDR X2, [X8 + 0x2E8]
	0x03AF7F4C LDR X1, [X8 + 0x2F0]
	0x03AF7F50 LDP X30, X19, [X31], #0x10
	0x03AF7F54 BR X2
	0x03AF7F58 LDR V0, [X0 + 0x250]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x8EC000
	008 Move X21, 0x5FD000
	009 Move W8, [X20+1574]
	010 Move X21, [X21+1432]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5FD000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+1574], W8
	021 Move X0, [X21]
	022 Move X20, [X19+312]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move S0, W31
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {95}
	036 Move X0, [X21]
	037 Move X20, [X19+360]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Inequality, X0, X1
	046 Move S9, W31
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {60}
	051 Move X8, [X19+360]
	052 Compare X8, 0
	053 JumpIfEqual {102}
	054 Move X0, [X8+32]
	055 Compare X0, 0
	056 JumpIfEqual {102}
	057 Move X1, X31
	058 Call RectOffset.get_vertical, X0
	059 NotImplemented "Instruction SCVTF not yet implemented."
	060 Move X0, [X21]
	061 Move X20, [X19+272]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X20
	067 Move X1, X31
	068 Move X2, X31
	069 Call Object.op_Inequality, X0, X1
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {87}
	074 Move X0, [X19+272]
	075 Compare X0, 0
	076 JumpIfEqual {102}
	077 Move X1, X31
	078 Call RectTransform.get_offsetMin, X0
	079 Move X0, [X19+272]
	080 Compare X0, 0
	081 JumpIfEqual {102}
	082 Move X1, X31
	083 Move V8, V1
	084 Call RectTransform.get_offsetMax, X0
	085 Subtract S0, S8, S1
	086 Add S9, S9, S0
	087 Move X0, [X19+312]
	088 Compare X0, 0
	089 JumpIfEqual {102}
	090 Move X8, [X0]
	091 Move X9, [X8+1672]
	092 Move X1, [X8+1680]
	093 NotImplemented "Instruction BLR not yet implemented."
	094 Add S0, S9, S0
	095 Move X20, [X31+32]
	096 Move X19, [X31+40]
	097 Move X30, [X31+16]
	098 Move X21, [X31+24]
	099 Move D9, [X31+48]
	100 Move D8, [X31+56]
	101 Return V0
	102 Call 0x1C17F20

Method: System.Single get_flexibleHeight()

Disassembly:
	0x03AF7F5C RET
	0x03AF7F60 STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Move S0, -1
	002 Return V0

Method: System.Int32 get_layoutPriority()

Disassembly:
	0x03AF7F64 LDR V1, [X0 + 0x250]
	0x03AF7F68 FCMP S1, S0

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Void SetGlobalPointSize(System.Single pointSize)

Disassembly:
	0x03AEEA40 ADRP X8, 0x665000
	0x03AEEA44 LDR X8, [X8 + 0xB40]
	0x03AEEA48 MOV X0, X20
	0x03AEEA4C LDR X1, [X8]
	0x03AEEA50 BL 0x21E52E4
	0x03AEEA54 STR X0, [X19 + 0x248]
	0x03AEEA58 ADRP X8, 0x66B000
	0x03AEEA5C LDR X8, [X8 + 0x110]
	0x03AEEA60 MOV X0, X20
	0x03AEEA64 LDR X1, [X8]
	0x03AEEA68 BL 0x21E52E4
	0x03AEEA6C STR X0, [X19 + 0x258]
	0x03AEEA70 ADRP X8, 0x66B000
	0x03AEEA74 LDR X8, [X8 + 0x118]
	0x03AEEA78 MOV X21, X0
	0x03AEEA7C LDR X0, [X8]
	0x03AEEA80 LDR W8, [X0 + 0xE0]
	0x03AEEA84 CBNZ W8, 0x3AEEA8C
	0x03AEEA88 BL 0x1C16DFC
	0x03AEEA8C MOV X0, X31
	0x03AEEA90 BL 0x3CDABE4
	0x03AEEA94 MOV X22, X0
	0x03AEEA98 MOV X0, X31
	0x03AEEA9C BL 0x3C1B370
	0x03AEEAA0 CBZ X21, 0x3AEEDC8
	0x03AEEAA4 MOV X2, X0
	0x03AEEAA8 MOV X0, X21
	0x03AEEAAC MOV X1, X22
	0x03AEEAB0 MOV X3, X31
	0x03AEEAB4 BL 0x3E22B58
	0x03AEEAB8 ADRP X8, 0x665000
	0x03AEEABC LDR X8, [X8 + 0xCC0]
	0x03AEEAC0 MOV X0, X20
	0x03AEEAC4 LDR X1, [X8]
	0x03AEEAC8 BL 0x21E51FC
	0x03AEEACC CBZ X0, 0x3AEEDC8
	0x03AEEAD0 LDR X8, [X0]
	0x03AEEAD4 MOVZ W1, 0x1
	0x03AEEAD8 LDR X9, [X8 + 0x2F8]
	0x03AEEADC LDR X2, [X8 + 0x300]
	0x03AEEAE0 BLR X9
	0x03AEEAE4 MOV X0, X19
	0x03AEEAE8 BL 0x3AEEDDC
	0x03AEEAEC ADRP X8, 0x607000
	0x03AEEAF0 LDR X8, [X8 + 0x6B8]
	0x03AEEAF4 ADRP X20, 0x66B000
	0x03AEEAF8 MOV X0, X19
	0x03AEEAFC LDR X1, [X8]
	0x03AEEB00 LDR X20, [X20 + 0x100]
	0x03AEEB04 BL 0x21A3894
	0x03AEEB08 STR X0, [X19 + 0x108]
	0x03AEEB0C LDR X1, [X20]
	0x03AEEB10 MOV X0, X19
	0x03AEEB14 BL 0x21A47AC
	0x03AEEB18 CBZ X0, 0x3AEEDC8
	0x03AEEB1C LDR W8, [X0 + 0x18]
	0x03AEEB20 CMP W8, 0x2
	0x03AEEB24 B.LT 0x3AEEB70

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8F5000
	006 Move W8, [X20+1575]
	007 Move V8, V0
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x606000
	014 Move X0, [X0+1432]
	015 Call 0x1C17CF4
	016 Move X0, 0x66B000
	017 Move X0, [X0+1000]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+1575], W8
	021 Move X8, 0x606000
	022 Move X9, [X19+328]
	023 Move X8, [X8+1432]
	024 Compare X9, 0
	025 JumpIfEqual {33}
	026 Move X10, 0x66B000
	027 Move X10, [X10+1000]
	028 Move X11, [X9]
	029 Move X10, [X10]
	030 Move W13, [X11+304]
	031 Move W12, [X10+304]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X20, X31
	034 Move X11, [X11+200]
	035 Add X11, X11, X12
	036 NotImplemented "Instruction LDUR not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 Move X0, [X8]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X31
	046 Move X2, X31
	047 Call Object.op_Inequality, X0, X1
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {58}
	052 Compare X20, 0
	053 JumpIfEqual {69}
	054 Move X0, X20
	055 Move V0, V8
	056 Move X1, X31
	057 Call TMP_Text.set_fontSize, X0, V0
	058 Move X0, [X19+312]
	059 Compare X0, 0
	060 JumpIfEqual {69}
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X30, [X31+8]
	064 Move V0, V8
	065 Move X1, X31
	066 Move V8, [X31+32]
	067 Call TMP_Text.set_fontSize, X0, V0
	068 Return 
	069 Call 0x1C17F20

Method: System.Void SetGlobalFontAsset(TMPro.TMP_FontAsset fontAsset)

Disassembly:
	0x03AEEB30 ADRP X9, 0x66B000
	0x03AEEB34 LDR X9, [X9 + 0x120]
	0x03AEEB38 LDR X10, [X8]
	0x03AEEB3C LDR X9, [X9]
	0x03AEEB40 LDRB W12, [X10 + 0x130]
	0x03AEEB44 LDRB W11, [X9 + 0x130]
	0x03AEEB48 CMP W12, W11
	0x03AEEB4C B.CS 0x3AEEB58
	0x03AEEB50 MOV X8, X31
	0x03AEEB54 B 0x3AEEB6C
	0x03AEEB58 LDR X10, [X10 + 0xC8]
	0x03AEEB5C ADD X10, X10, X11, 0x3, LSL
	0x03AEEB60 LDUR X10, [X10 - 0x8]
	0x03AEEB64 CMP X10, X9
	0x03AEEB68 CSEL X8, X8, X31, EQ
	0x03AEEB6C STR X8, [X19 + 0x170]
	0x03AEEB70 LDR X0, [X23]
	0x03AEEB74 LDR X20, [X19 + 0x110]
	0x03AEEB78 LDR W8, [X0 + 0xE0]
	0x03AEEB7C CBNZ W8, 0x3AEEB84
	0x03AEEB80 BL 0x1C16DFC
	0x03AEEB84 MOV X0, X20
	0x03AEEB88 MOV X1, X31
	0x03AEEB8C MOV X2, X31
	0x03AEEB90 BL 0x3C354F8
	0x03AEEB94 TBZ X0, 0x0, 0x3AEEBB4
	0x03AEEB98 LDR X0, [X19 + 0x110]
	0x03AEEB9C CBZ X0, 0x3AEEDC8
	0x03AEEBA0 ADRP X8, 0x66B000
	0x03AEEBA4 LDR X8, [X8 + 0xF8]
	0x03AEEBA8 LDR X1, [X8]
	0x03AEEBAC BL 0x21A3894
	0x03AEEBB0 STR X0, [X19 + 0x120]
	0x03AEEBB4 LDR X0, [X23]
	0x03AEEBB8 LDR X20, [X19 + 0x258]
	0x03AEEBBC LDR W8, [X0 + 0xE0]
	0x03AEEBC0 CBNZ W8, 0x3AEEBC8
	0x03AEEBC4 BL 0x1C16DFC
	0x03AEEBC8 MOV X0, X20
	0x03AEEBCC MOV X1, X31
	0x03AEEBD0 MOV X2, X31
	0x03AEEBD4 BL 0x3C354F8
	0x03AEEBD8 TBZ X0, 0x0, 0x3AEEC24
	0x03AEEBDC ADRP X8, 0x66B000
	0x03AEEBE0 LDR X8, [X8 + 0x118]
	0x03AEEBE4 LDR X20, [X19 + 0x258]
	0x03AEEBE8 LDR X0, [X8]
	0x03AEEBEC LDR W8, [X0 + 0xE0]
	0x03AEEBF0 CBNZ W8, 0x3AEEBF8
	0x03AEEBF4 BL 0x1C16DFC
	0x03AEEBF8 MOV X0, X31
	0x03AEEBFC BL 0x3CDABE4
	0x03AEEC00 MOV X21, X0
	0x03AEEC04 MOV X0, X31
	0x03AEEC08 BL 0x3C1B370
	0x03AEEC0C CBZ X20, 0x3AEEDC8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8F5000
	006 Move W8, [X21+1576]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x606000
	014 Move X0, [X0+1432]
	015 Call 0x1C17CF4
	016 Move X0, 0x66B000
	017 Move X0, [X0+1000]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1576], W8
	021 Move X8, 0x606000
	022 Move X9, [X20+328]
	023 Move X8, [X8+1432]
	024 Compare X9, 0
	025 JumpIfEqual {33}
	026 Move X10, 0x66B000
	027 Move X10, [X10+1000]
	028 Move X11, [X9]
	029 Move X10, [X10]
	030 Move W13, [X11+304]
	031 Move W12, [X10+304]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X21, X31
	034 Move X11, [X11+200]
	035 Add X11, X11, X12
	036 NotImplemented "Instruction LDUR not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 Move X0, [X8]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X21
	045 Move X1, X31
	046 Move X2, X31
	047 Call Object.op_Inequality, X0, X1
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {58}
	052 Compare X21, 0
	053 JumpIfEqual {69}
	054 Move X0, X21
	055 Move X1, X19
	056 Move X2, X31
	057 Call TMP_Text.set_font, X0, X1
	058 Move X0, [X20+312]
	059 Compare X0, 0
	060 JumpIfEqual {69}
	061 Move X1, X19
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move X2, X31
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Call TMP_Text.set_font, X0, X1
	068 Return 
	069 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03AF7F6C B.NE 0x3AF7F78
	0x03AF7F70 LDP X30, X19, [X31], #0x10
	0x03AF7F74 RET
	0x03AF7F78 LDR X8, [X0]
	0x03AF7F7C STR S0, [X0 + 0x250]
	0x03AF7F80 MOV X19, X0
	0x03AF7F84 LDR X9, [X8 + 0x2F8]
	0x03AF7F88 LDR X1, [X8 + 0x300]
	0x03AF7F8C BLR X9
	0x03AF7F90 LDR X8, [X19]
	0x03AF7F94 MOV X0, X19
	0x03AF7F98 LDR X2, [X8 + 0x2E8]
	0x03AF7F9C LDR X1, [X8 + 0x2F0]
	0x03AF7FA0 LDP X30, X19, [X31], #0x10
	0x03AF7FA4 BR X2
	0x03AF7FA8 LDR V0, [X0 + 0x254]
	0x03AF7FAC RET
	0x03AF7FB0 STP X30, X19, [X31 - 0x10]!
	0x03AF7FB4 LDR V1, [X0 + 0x254]
	0x03AF7FB8 FCMP S1, S0
	0x03AF7FBC B.NE 0x3AF7FC8
	0x03AF7FC0 LDP X30, X19, [X31], #0x10
	0x03AF7FC4 RET
	0x03AF7FC8 LDR X8, [X0]
	0x03AF7FCC STR S0, [X0 + 0x254]
	0x03AF7FD0 MOV X19, X0
	0x03AF7FD4 LDR X9, [X8 + 0x2F8]
	0x03AF7FD8 LDR X1, [X8 + 0x300]
	0x03AF7FDC BLR X9
	0x03AF7FE0 LDR X8, [X19]
	0x03AF7FE4 MOV X0, X19
	0x03AF7FE8 LDR X2, [X8 + 0x2E8]
	0x03AF7FEC LDR X1, [X8 + 0x2F0]
	0x03AF7FF0 LDP X30, X19, [X31], #0x10
	0x03AF7FF4 BR X2
	0x03AF7FF8 LDR W0, [X0 + 0x258]
	0x03AF7FFC RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8EC000
	007 Move X22, 0x606000
	008 Move X19, 0x663000
	009 Move X20, 0x663000
	010 Move W8, [X21+1577]
	011 Move X22, [X22+2264]
	012 Move X19, [X19+432]
	013 Move X20, [X20+384]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x606000
	019 Move X0, [X0+2264]
	020 Call 0x1C17CF4
	021 Move X0, 0x663000
	022 Move X0, [X0+384]
	023 Call 0x1C17CF4
	024 Move X0, 0x663000
	025 Move X0, [X0+432]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1577], W8
	029 Move X0, [X22]
	030 Move W1, 6
	031 Call 0x1C17D6C
	032 Move X1, [X19]
	033 Move X2, X31
	034 Move X19, X0
	035 Call RuntimeHelpers.InitializeArray, X0, X1
	036 Move X8, [X20]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X8, [X8+184]
	040 Move [X8], X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+48]
	044 Return 

Method: UnityEngine.Transform UnityEngine.UI.ICanvasElement.get_transform()

Disassembly:
	0x03AF8000 STP X30, X19, [X31 - 0x10]!
	0x03AF8004 LDR W8, [X0 + 0x258]

ISIL:
	001 Move X1, X31
	002 Call Component.get_transform, X0
	003 Return X0

