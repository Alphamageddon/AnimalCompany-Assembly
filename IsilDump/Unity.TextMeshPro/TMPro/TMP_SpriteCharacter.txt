Type: TMPro.TMP_SpriteCharacter

Method: System.String get_name()

Disassembly:
	0x03B19820 LDR W8, [X0 + 0xE0]
	0x03B19824 CBNZ W8, 0x3B1982C

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_name(System.String value)

Disassembly:
	0x03B19650 CBZ X8, 0x3B19690
	0x03B19654 ADRP X9, 0x63F000
	0x03B19658 LDR X9, [X9 + 0x338]
	0x03B1965C LDR X19, [X19 + 0x38]
	0x03B19660 LDRB W20, [X8 + 0x300]
	0x03B19664 LDR X0, [X9]
	0x03B19668 LDR W9, [X0 + 0xE0]
	0x03B1966C CBNZ W9, 0x3B19674
	0x03B19670 BL 0x1C16DFC
	0x03B19674 CMP W20, 0x0
	0x03B19678 MOV X0, X19
	0x03B1967C LDP X20, X19, [X31 + 0x10]
	0x03B19680 CSET W1, NE
	0x03B19684 MOV W2, W31
	0x03B19688 LDR X30, [X31], #0x20
	0x03B1968C B 0x3B15054
	0x03B19690 BL 0x1C16F20
	0x03B19694 STR X30, [X31 - 0x20]!
	0x03B19698 STP X20, X19, [X31 + 0x10]
	0x03B1969C ADRP X20, 0x8C9000
	0x03B196A0 LDRB W8, [X20 + 0x6DE]
	0x03B196A4 MOV X19, X0
	0x03B196A8 TBNZ X8, 0x0, 0x3B196C0
	0x03B196AC ADRP X0, 0x5DA000
	0x03B196B0 LDR X0, [X0 + 0x598]
	0x03B196B4 BL 0x1C16CF4
	0x03B196B8 MOVZ W8, 0x1
	0x03B196BC STRB W8, [X20 + 0x6DE]
	0x03B196C0 MOV X0, X19
	0x03B196C4 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8CA000
	006 Move W8, [X21+1735]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x641000
	014 Move X0, [X0+496]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1735], W8
	018 Move X1, [X19+48]
	019 Move X0, X20
	020 Move X2, X31
	021 Call String.op_Equality, X0, X1
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {37}
	026 Move X8, 0x641000
	027 Move X8, [X8+496]
	028 Move [X19+48], X20
	029 Move X0, [X8]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Call TMP_TextParsingUtilities.GetHashCodeCaseSensitive, X0
	036 Move [X19+56], W0
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return 

Method: System.Int32 get_hashCode()

Disassembly:
	0x03B19894 LDR W8, [X0 + 0xE0]
	0x03B19898 CBNZ W8, 0x3B198A0

ISIL:
	001 Move W0, [X0+56]
	002 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03B19630 MOV X19, X0
	0x03B19634 TBNZ X8, 0x0, 0x3B1964C
	0x03B19638 ADRP X0, 0x63F000
	0x03B1963C LDR X0, [X0 + 0x338]
	0x03B19640 BL 0x1C16CF4
	0x03B19644 MOVZ W8, 0x1
	0x03B19648 STRB W8, [X20 + 0x6DC]
	0x03B1964C LDR X8, [X19 + 0x70]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Object..ctor, X0
	006 Move W8, 2
	007 Move [X19+16], W8
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 

Method: System.Void .ctor(System.UInt32 unicode, TMPro.TMP_SpriteGlyph glyph)

Disassembly:
	0x03B198A4 BL 0x3B10894
	0x03B198A8 LDR X8, [X19 + 0x40]
	0x03B198AC MOV X0, X19
	0x03B198B0 STR X8, [X19 + 0x38]
	0x03B198B4 BL 0x3B19620
	0x03B198B8 STR S0, [X19 + 0x54]
	0x03B198BC MOV X0, X19
	0x03B198C0 LDP X20, X19, [X31 + 0x20]
	0x03B198C4 LDP X22, X21, [X31 + 0x10]
	0x03B198C8 LDP X30, X23, [X31], #0x30
	0x03B198CC B 0x3B1A510
	0x03B198D0 LDR X0, [X0 + 0x48]
	0x03B198D4 RET
	0x03B198D8 STR X1, [X0 + 0x48]
	0x03B198DC RET
	0x03B198E0 LDRB W0, [X0 + 0x50]
	0x03B198E4 RET
	0x03B198E8 AND W8, W1, 0x1
	0x03B198EC STRB W8, [X0 + 0x50]
	0x03B198F0 RET
	0x03B198F4 LDR V0, [X0 + 0x54]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W21, W1
	006 Move X1, X31
	007 Move X20, X2
	008 Move X19, X0
	009 Call Object..ctor, X0
	010 Move W8, 2
	011 Move [X19+16], W8
	012 Move [X19+20], W21
	013 Compare X20, 0
	014 JumpIfEqual {27}
	015 Move X0, X20
	016 Move X1, X31
	017 Call Glyph.get_index, X0
	018 Move W8, 0x3F800000
	019 Move [X19+32], X20
	020 Move [X19+40], W0
	021 Move [X19+44], W8
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Return 
	027 Call 0x1C17F20

Method: System.Void .ctor(System.UInt32 unicode, TMPro.TMP_SpriteAsset spriteAsset, TMPro.TMP_SpriteGlyph glyph)

Disassembly:
	0x03B198F8 RET
	0x03B198FC STR S0, [X0 + 0x54]
	0x03B19900 RET
	0x03B19904 STP X30, X21, [X31 - 0x20]!
	0x03B19908 STP X20, X19, [X31 + 0x10]
	0x03B1990C ADRP X21, 0x8C9000
	0x03B19910 ADRP X20, 0x5DA000
	0x03B19914 LDRB W8, [X21 + 0x6D0]
	0x03B19918 LDR X20, [X20 + 0x598]
	0x03B1991C MOV X19, X0
	0x03B19920 TBNZ X8, 0x0, 0x3B19944
	0x03B19924 ADRP X0, 0x606000
	0x03B19928 LDR X0, [X0 + 0x5A0]
	0x03B1992C BL 0x1C16CF4
	0x03B19930 ADRP X0, 0x5DA000
	0x03B19934 LDR X0, [X0 + 0x598]
	0x03B19938 BL 0x1C16CF4
	0x03B1993C MOVZ W8, 0x1
	0x03B19940 STRB W8, [X21 + 0x6D0]
	0x03B19944 LDR X0, [X20]
	0x03B19948 LDR X20, [X19 + 0x58]
	0x03B1994C LDR W8, [X0 + 0xE0]
	0x03B19950 CBNZ W8, 0x3B19958
	0x03B19954 BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W22, W1
	007 Move X1, X31
	008 Move X20, X3
	009 Move X21, X2
	010 Move X19, X0
	011 Call Object..ctor, X0
	012 Move W8, 2
	013 Move [X19+20], W22
	014 Move [X19+16], W8
	015 Move [X19+24], X21
	016 Move [X19+32], X20
	017 Compare X20, 0
	018 JumpIfEqual {31}
	019 Move X0, X20
	020 Move X1, X31
	021 Call Glyph.get_index, X0
	022 Move W8, 0x3F800000
	023 Move [X19+40], W0
	024 Move [X19+44], W8
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 Return 
	031 Call 0x1C17F20

Method: System.Void .ctor(System.UInt32 unicode, System.UInt32 glyphIndex)

Disassembly:
	0x03B19958 MOV X0, X20
	0x03B1995C MOV X1, X31
	0x03B19960 MOV X2, X31
	0x03B19964 BL 0x3C3883C
	0x03B19968 TBZ X0, 0x0, 0x3B19988
	0x03B1996C ADRP X8, 0x606000
	0x03B19970 LDR X8, [X8 + 0x5A0]
	0x03B19974 MOV X0, X19
	0x03B19978 LDR X1, [X8]
	0x03B1997C BL 0x21A3894
	0x03B19980 STR X0, [X19 + 0x58]
	0x03B19984 B 0x3B1998C
	0x03B19988 LDR X0, [X19 + 0x58]
	0x03B1998C LDP X20, X19, [X31 + 0x10]
	0x03B19990 LDP X30, X21, [X31], #0x20
	0x03B19994 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W20, W1
	006 Move X1, X31
	007 Move W19, W2
	008 Move X21, X0
	009 Call Object..ctor, X0
	010 Move W9, 0x3F800000
	011 Move [X21+20], W20
	012 Move [X21+40], W19
	013 Move [X21+44], W9
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move W8, 2
	017 Move [X21+24], X31
	018 Move [X21+32], X31
	019 Move [X21+16], W8
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 Return 

