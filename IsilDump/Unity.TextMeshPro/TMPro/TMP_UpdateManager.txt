Type: TMPro.TMP_UpdateManager

Method: TMPro.TMP_UpdateManager get_instance()

Disassembly:
	0x03B21014 MOV X1, X19
	0x03B21018 MOV X3, X31
	0x03B2101C MOV X20, X0
	0x03B21020 BL 0x3E251A8
	0x03B21024 MOV X0, X20
	0x03B21028 LDP X20, X19, [X31 + 0x40]
	0x03B2102C LDP X22, X21, [X31 + 0x30]
	0x03B21030 LDP X24, X23, [X31 + 0x20]
	0x03B21034 LDP X26, X25, [X31 + 0x10]
	0x03B21038 MOV X1, X31
	0x03B2103C LDR X30, [X31], #0x50
	0x03B21040 B 0x3E24344
	0x03B21044 STP X30, X19, [X31 - 0x10]!
	0x03B21048 MOV X19, X0
	0x03B2104C BL 0x3B20E84
	0x03B21050 CBZ X0, 0x3B21060
	0x03B21054 MOV X1, X19
	0x03B21058 LDP X30, X19, [X31], #0x10
	0x03B2105C B 0x3B21064
	0x03B21060 BL 0x1C16F20
	0x03B21064 STP X30, X21, [X31 - 0x20]!
	0x03B21068 STP X20, X19, [X31 + 0x10]
	0x03B2106C ADRP X21, 0x8C1000
	0x03B21070 LDRB W8, [X21 + 0x732]
	0x03B21074 MOV X19, X1
	0x03B21078 MOV X20, X0
	0x03B2107C TBNZ X8, 0x0, 0x3B210B8
	0x03B21080 ADRP X0, 0x5D4000
	0x03B21084 LDR X0, [X0 + 0x9D8]
	0x03B21088 BL 0x1C16CF4
	0x03B2108C ADRP X0, 0x5D3000
	0x03B21090 LDR X0, [X0 + 0xDF8]
	0x03B21094 BL 0x1C16CF4
	0x03B21098 ADRP X0, 0x638000
	0x03B2109C LDR X0, [X0 + 0xB18]
	0x03B210A0 BL 0x1C16CF4
	0x03B210A4 ADRP X0, 0x5D2000
	0x03B210A8 LDR X0, [X0 + 0x598]
	0x03B210AC BL 0x1C16CF4
	0x03B210B0 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x8C2000
	005 Move X20, 0x638000
	006 Move W8, [X19+1823]
	007 Move X20, [X20+1384]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x638000
	013 Move X0, [X0+1384]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1823], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X20]
	023 Move X8, [X0+184]
	024 Move X8, [X8]
	025 Compare X8, 0
	026 JumpIfNotEqual {39}
	027 Call 0x1C17F10
	028 Move X19, X0
	029 Call TMP_UpdateManager..ctor, X0
	030 Move X0, [X20]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1C17DFC
	035 Move X0, [X20]
	036 Move X8, [X0+184]
	037 Move [X8], X19
	038 Move X0, [X20]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {44}
	042 Call 0x1C17DFC
	043 Move X0, [X20]
	044 Move X8, [X0+184]
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X0, [X8]
	048 Move X30, [X31+32]
	049 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03B210B4 STRB W8, [X21 + 0x732]
	0x03B210B8 CBZ X19, 0x3B211B8
	0x03B210BC ADRP X8, 0x5D2000
	0x03B210C0 LDR X8, [X8 + 0x598]
	0x03B210C4 LDR X9, [X19]
	0x03B210C8 LDR X8, [X8]
	0x03B210CC LDRB W11, [X9 + 0x130]
	0x03B210D0 LDRB W10, [X8 + 0x130]
	0x03B210D4 CMP W11, W10
	0x03B210D8 B.CC 0x3B211B8
	0x03B210DC LDR X9, [X9 + 0xC8]
	0x03B210E0 ADD X9, X9, X10, 0x3, LSL
	0x03B210E4 LDUR X9, [X9 - 0x8]
	0x03B210E8 CMP X9, X8
	0x03B210EC B.NE 0x3B211B8
	0x03B210F0 MOV X0, X19
	0x03B210F4 MOV X1, X31
	0x03B210F8 BL 0x3C385F8
	0x03B210FC LDR X8, [X20 + 0x18]
	0x03B21100 CBZ X8, 0x3B211B8
	0x03B21104 ADRP X9, 0x5D3000
	0x03B21108 LDR X9, [X9 + 0xDF8]
	0x03B2110C MOV W21, W0
	0x03B21110 MOV X0, X8
	0x03B21114 MOV W1, W21
	0x03B21118 LDR X2, [X9]
	0x03B2111C BL 0x2DAA59C
	0x03B21120 TBZ X0, 0x0, 0x3B2112C
	0x03B21124 MOV W0, W31
	0x03B21128 B 0x3B211AC
	0x03B2112C LDR X0, [X20 + 0x18]
	0x03B21130 CBZ X0, 0x3B211B8
	0x03B21134 ADRP X8, 0x5D4000
	0x03B21138 LDR X8, [X8 + 0x9D8]
	0x03B2113C MOV W1, W21
	0x03B21140 LDR X2, [X8]
	0x03B21144 BL 0x2DAB03C
	0x03B21148 LDR X0, [X20 + 0x10]
	0x03B2114C CBZ X0, 0x3B211B8
	0x03B21150 ADRP X9, 0x638000
	0x03B21154 LDR X9, [X9 + 0xB18]
	0x03B21158 LDR W10, [X0 + 0x1C]
	0x03B2115C LDR X8, [X0 + 0x10]
	0x03B21160 LDR X9, [X9]
	0x03B21164 ADD W10, W10, 0x1
	0x03B21168 STR W10, [X0 + 0x1C]
	0x03B2116C CBZ X8, 0x3B211B8
	0x03B21170 LDRSW X10, [X0 + 0x18]
	0x03B21174 LDR W11, [X8 + 0x18]
	0x03B21178 CMP W10, W11
	0x03B2117C B.CS 0x3B21194
	0x03B21180 ADD W9, W10, 0x1
	0x03B21184 ADD X8, X8, X10, 0x3, LSL
	0x03B21188 STR W9, [X0 + 0x18]
	0x03B2118C STR X19, [X8 + 0x20]
	0x03B21190 B 0x3B211A8
	0x03B21194 LDR X8, [X9 + 0x20]
	0x03B21198 MOV X1, X19
	0x03B2119C LDR X8, [X8 + 0xC0]
	0x03B211A0 LDR X2, [X8 + 0x70]
	0x03B211A4 BL 0x301BF90
	0x03B211A8 MOVZ W0, 0x1
	0x03B211AC LDP X20, X19, [X31 + 0x10]
	0x03B211B0 LDP X30, X21, [X31], #0x20
	0x03B211B4 RET
	0x03B211B8 BL 0x1C16F20
	0x03B211BC STP X30, X19, [X31 - 0x10]!
	0x03B211C0 MOV X19, X0
	0x03B211C4 BL 0x3B20E84
	0x03B211C8 CBZ X0, 0x3B211D8
	0x03B211CC MOV X1, X19
	0x03B211D0 LDP X30, X19, [X31], #0x10
	0x03B211D4 B 0x3B211DC
	0x03B211D8 BL 0x1C16F20
	0x03B211DC STP X30, X21, [X31 - 0x20]!
	0x03B211E0 STP X20, X19, [X31 + 0x10]
	0x03B211E4 ADRP X21, 0x8C1000
	0x03B211E8 LDRB W8, [X21 + 0x733]
	0x03B211EC MOV X19, X1
	0x03B211F0 MOV X20, X0
	0x03B211F4 TBNZ X8, 0x0, 0x3B21230
	0x03B211F8 ADRP X0, 0x5D4000
	0x03B211FC LDR X0, [X0 + 0x9D8]
	0x03B21200 BL 0x1C16CF4
	0x03B21204 ADRP X0, 0x5D3000
	0x03B21208 LDR X0, [X0 + 0xDF8]
	0x03B2120C BL 0x1C16CF4
	0x03B21210 ADRP X0, 0x638000
	0x03B21214 LDR X0, [X0 + 0xB18]
	0x03B21218 BL 0x1C16CF4
	0x03B2121C ADRP X0, 0x5D2000
	0x03B21220 LDR X0, [X0 + 0x598]
	0x03B21224 BL 0x1C16CF4
	0x03B21228 MOVZ W8, 0x1
	0x03B2122C STRB W8, [X21 + 0x733]
	0x03B21230 CBZ X19, 0x3B21330
	0x03B21234 ADRP X8, 0x5D2000
	0x03B21238 LDR X8, [X8 + 0x598]
	0x03B2123C LDR X9, [X19]
	0x03B21240 LDR X8, [X8]
	0x03B21244 LDRB W11, [X9 + 0x130]
	0x03B21248 LDRB W10, [X8 + 0x130]
	0x03B2124C CMP W11, W10
	0x03B21250 B.CC 0x3B21330
	0x03B21254 LDR X9, [X9 + 0xC8]
	0x03B21258 ADD X9, X9, X10, 0x3, LSL
	0x03B2125C LDUR X9, [X9 - 0x8]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x8C2000
	011 Move X26, 0x5D4000
	012 Move X25, 0x5DA000
	013 Move X24, 0x639000
	014 Move X23, 0x639000
	015 Move X22, 0x639000
	016 Move X21, 0x639000
	017 Move X26, [X26+3592]
	018 Move W8, [X20+1824]
	019 Move X25, [X25+1672]
	020 Move X24, [X24+2704]
	021 Move X23, [X23+2712]
	022 Move X22, [X22+1072]
	023 Move X21, [X21+2720]
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {49}
	029 Move X0, 0x5DA000
	030 Move X0, [X0+1672]
	031 Call 0x1C17CF4
	032 Move X0, 0x5D4000
	033 Move X0, [X0+3592]
	034 Call 0x1C17CF4
	035 Move X0, 0x639000
	036 Move X0, [X0+2712]
	037 Call 0x1C17CF4
	038 Move X0, 0x639000
	039 Move X0, [X0+2704]
	040 Call 0x1C17CF4
	041 Move X0, 0x639000
	042 Move X0, [X0+2720]
	043 Call 0x1C17CF4
	044 Move X0, 0x639000
	045 Move X0, [X0+1072]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X20+1824], W8
	049 Move X0, [X26]
	050 Call 0x1C17F10
	051 Move X1, [X25]
	052 Move X20, X0
	053 Call HashSet`1<Int32>..ctor, X0
	054 Move [X19+16], X20
	055 Move X0, [X24]
	056 Call 0x1C17F10
	057 Move X1, [X23]
	058 Move X20, X0
	059 Call List`1<Object>..ctor, X0
	060 Move [X19+24], X20
	061 Move X0, [X26]
	062 Call 0x1C17F10
	063 Move X1, [X25]
	064 Move X20, X0
	065 Call HashSet`1<Int32>..ctor, X0
	066 Move [X19+32], X20
	067 Move X0, [X24]
	068 Call 0x1C17F10
	069 Move X1, [X23]
	070 Move X20, X0
	071 Call List`1<Object>..ctor, X0
	072 Move [X19+40], X20
	073 Move X0, [X26]
	074 Call 0x1C17F10
	075 Move X1, [X25]
	076 Move X20, X0
	077 Call HashSet`1<Int32>..ctor, X0
	078 Move [X19+48], X20
	079 Move X0, [X24]
	080 Call 0x1C17F10
	081 Move X1, [X23]
	082 Move X20, X0
	083 Call List`1<Object>..ctor, X0
	084 Move [X19+56], X20
	085 Move X0, [X26]
	086 Call 0x1C17F10
	087 Move X1, [X25]
	088 Move X20, X0
	089 Call HashSet`1<Int32>..ctor, X0
	090 Move [X19+64], X20
	091 Move X0, [X24]
	092 Call 0x1C17F10
	093 Move X1, [X23]
	094 Move X20, X0
	095 Call List`1<Object>..ctor, X0
	096 Move X0, X19
	097 Move X1, X31
	098 Move [X19+72], X20
	099 Call Object..ctor, X0
	100 Move X0, [X22]
	101 Call 0x1C17F10
	102 Move X2, [X21]
	103 Move X1, X19
	104 Move X3, X31
	105 Move X20, X0
	106 Call WillRenderCanvases..ctor, X0, X1, X2
	107 Move X0, X20
	108 Move X20, [X31+64]
	109 Move X19, [X31+72]
	110 Move X22, [X31+48]
	111 Move X21, [X31+56]
	112 Move X24, [X31+32]
	113 Move X23, [X31+40]
	114 Move X26, [X31+16]
	115 Move X25, [X31+24]
	116 Move X1, X31
	117 Move X30, [X31+80]
	118 Call Canvas.add_willRenderCanvases, X0
	119 Return 

Method: System.Void RegisterTextObjectForUpdate(TMPro.TMP_Text textObject)

Disassembly:
	0x03B21260 CMP X9, X8
	0x03B21264 B.NE 0x3B21330
	0x03B21268 MOV X0, X19
	0x03B2126C MOV X1, X31
	0x03B21270 BL 0x3C385F8
	0x03B21274 LDR X8, [X20 + 0x28]
	0x03B21278 CBZ X8, 0x3B21330
	0x03B2127C ADRP X9, 0x5D3000
	0x03B21280 LDR X9, [X9 + 0xDF8]
	0x03B21284 MOV W21, W0
	0x03B21288 MOV X0, X8
	0x03B2128C MOV W1, W21
	0x03B21290 LDR X2, [X9]
	0x03B21294 BL 0x2DAA59C
	0x03B21298 TBZ X0, 0x0, 0x3B212A4
	0x03B2129C MOV W0, W31
	0x03B212A0 B 0x3B21324
	0x03B212A4 LDR X0, [X20 + 0x28]
	0x03B212A8 CBZ X0, 0x3B21330
	0x03B212AC ADRP X8, 0x5D4000
	0x03B212B0 LDR X8, [X8 + 0x9D8]
	0x03B212B4 MOV W1, W21
	0x03B212B8 LDR X2, [X8]
	0x03B212BC BL 0x2DAB03C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8C2000
	006 Move X21, 0x638000
	007 Move W8, [X20+1825]
	008 Move X21, [X21+1384]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x638000
	015 Move X0, [X0+1384]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1825], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Call TMP_UpdateManager.get_instance
	025 Compare X0, 0
	026 JumpIfEqual {32}
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call 0x1C17F20

Method: System.Void InternalRegisterTextObjectForUpdate(TMPro.TMP_Text textObject)

Disassembly:
	0x03B212C0 LDR X0, [X20 + 0x20]
	0x03B212C4 CBZ X0, 0x3B21330
	0x03B212C8 ADRP X9, 0x638000
	0x03B212CC LDR X9, [X9 + 0xB18]
	0x03B212D0 LDR W10, [X0 + 0x1C]
	0x03B212D4 LDR X8, [X0 + 0x10]
	0x03B212D8 LDR X9, [X9]
	0x03B212DC ADD W10, W10, 0x1
	0x03B212E0 STR W10, [X0 + 0x1C]
	0x03B212E4 CBZ X8, 0x3B21330
	0x03B212E8 LDRSW X10, [X0 + 0x18]
	0x03B212EC LDR W11, [X8 + 0x18]
	0x03B212F0 CMP W10, W11
	0x03B212F4 B.CS 0x3B2130C
	0x03B212F8 ADD W9, W10, 0x1
	0x03B212FC ADD X8, X8, X10, 0x3, LSL
	0x03B21300 STR W9, [X0 + 0x18]
	0x03B21304 STR X19, [X8 + 0x20]
	0x03B21308 B 0x3B21320
	0x03B2130C LDR X8, [X9 + 0x20]
	0x03B21310 MOV X1, X19
	0x03B21314 LDR X8, [X8 + 0xC0]
	0x03B21318 LDR X2, [X8 + 0x70]
	0x03B2131C BL 0x301BF90
	0x03B21320 MOVZ W0, 0x1
	0x03B21324 LDP X20, X19, [X31 + 0x10]
	0x03B21328 LDP X30, X21, [X31], #0x20
	0x03B2132C RET
	0x03B21330 BL 0x1C16F20
	0x03B21334 STR X30, [X31 - 0x40]!
	0x03B21338 STP X24, X23, [X31 + 0x10]
	0x03B2133C STP X22, X21, [X31 + 0x20]
	0x03B21340 STP X20, X19, [X31 + 0x30]
	0x03B21344 ADRP X20, 0x8C1000
	0x03B21348 LDRB W8, [X20 + 0x734]
	0x03B2134C MOV X19, X0
	0x03B21350 TBNZ X8, 0x0, 0x3B21398
	0x03B21354 ADRP X0, 0x5D9000
	0x03B21358 LDR X0, [X0 + 0x678]
	0x03B2135C BL 0x1C16CF4
	0x03B21360 ADRP X0, 0x638000
	0x03B21364 LDR X0, [X0 + 0xB20]
	0x03B21368 BL 0x1C16CF4
	0x03B2136C ADRP X0, 0x638000
	0x03B21370 LDR X0, [X0 + 0xB28]
	0x03B21374 BL 0x1C16CF4
	0x03B21378 ADRP X0, 0x638000
	0x03B2137C LDR X0, [X0 + 0xB30]
	0x03B21380 BL 0x1C16CF4
	0x03B21384 ADRP X0, 0x638000
	0x03B21388 LDR X0, [X0 + 0xB38]
	0x03B2138C BL 0x1C16CF4
	0x03B21390 MOVZ W8, 0x1
	0x03B21394 STRB W8, [X20 + 0x734]
	0x03B21398 LDR X8, [X19 + 0x10]
	0x03B2139C CBZ X8, 0x3B2158C
	0x03B213A0 ADRP X23, 0x638000
	0x03B213A4 ADRP X24, 0x638000
	0x03B213A8 ADRP X22, 0x5D9000
	0x03B213AC LDR X23, [X23 + 0xB38]
	0x03B213B0 LDR X24, [X24 + 0xB20]
	0x03B213B4 LDR X22, [X22 + 0x678]
	0x03B213B8 MOV W20, W31
	0x03B213BC LDR W2, [X8 + 0x18]
	0x03B213C0 CMP W20, W2
	0x03B213C4 B.GE 0x3B21458
	0x03B213C8 BL 0x3B20E84
	0x03B213CC CBZ X0, 0x3B2158C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8C2000
	006 Move W8, [X21+1826]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x5D5000
	014 Move X0, [X0+2520]
	015 Call 0x1C17CF4
	016 Move X0, 0x5D4000
	017 Move X0, [X0+3576]
	018 Call 0x1C17CF4
	019 Move X0, 0x639000
	020 Move X0, [X0+2728]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1826], W8
	024 Compare X19, 0
	025 JumpIfEqual {85}
	026 Move X0, X19
	027 Move X1, X31
	028 Call Object.GetInstanceID, X0
	029 Move X8, [X20+48]
	030 Compare X8, 0
	031 JumpIfEqual {85}
	032 Move X9, 0x5D4000
	033 Move X9, [X9+3576]
	034 Move W21, W0
	035 Move X0, X8
	036 Move W1, W21
	037 Move X2, [X9]
	038 Call HashSet`1<Int32>.Contains, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {70}
	043 Move X0, [X20+48]
	044 Compare X0, 0
	045 JumpIfEqual {85}
	046 Move X8, 0x5D5000
	047 Move X8, [X8+2520]
	048 Move W1, W21
	049 Move X2, [X8]
	050 Call HashSet`1<Int32>.Add, X0, X1
	051 Move X0, [X20+56]
	052 Compare X0, 0
	053 JumpIfEqual {85}
	054 Move X9, 0x639000
	055 Move X9, [X9+2728]
	056 Move W10, [X0+28]
	057 Move X8, [X0+16]
	058 Move X9, [X9]
	059 Add W10, W10, 1
	060 Move [X0+28], W10
	061 Compare X8, 0
	062 JumpIfEqual {85}
	063 NotImplemented "Instruction LDRSW not yet implemented."
	064 Move W11, [X8+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Add W9, W10, 1
	067 Add X8, X8, X10
	068 Move [X0+24], W9
	069 Move [X8+32], X19
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X30, [X31+32]
	073 Move X21, [X31+40]
	074 Return 
	075 Move X8, [X9+32]
	076 Move X1, X19
	077 Move X20, [X31+16]
	078 Move X19, [X31+24]
	079 Move X8, [X8+192]
	080 Move X2, [X8+112]
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 Call List`1<Object>.AddWithResize, X0, X1
	084 Return 
	085 Call 0x1C17F20

Method: System.Void RegisterTextElementForLayoutRebuild(TMPro.TMP_Text element)

Disassembly:
	0x03B213D0 LDR X0, [X0 + 0x10]
	0x03B213D4 CBZ X0, 0x3B2158C
	0x03B213D8 LDR X2, [X23]
	0x03B213DC MOV W1, W20
	0x03B213E0 BL 0x301BCCC
	0x03B213E4 CBZ X0, 0x3B2158C
	0x03B213E8 LDR X8, [X0]
	0x03B213EC LDR X1, [X24]
	0x03B213F0 MOV X21, X0
	0x03B213F4 LDRH W9, [X8 + 0x12E]
	0x03B213F8 CBZ X9, 0x3B2141C
	0x03B213FC LDR X10, [X8 + 0xB0]
	0x03B21400 ADD X10, X10, 0x8
	0x03B21404 LDUR X11, [X10 - 0x8]
	0x03B21408 CMP X11, X1
	0x03B2140C B.EQ 0x3B2142C
	0x03B21410 SUBS X9, X9, 0x1
	0x03B21414 ADD X10, X10, 0x10
	0x03B21418 B.NE 0x3B21404
	0x03B2141C MOV X0, X21
	0x03B21420 MOV W2, W31
	0x03B21424 BL 0x1C5C788
	0x03B21428 B 0x3B21438
	0x03B2142C LDRSW X9, [X10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8C2000
	006 Move X21, 0x638000
	007 Move W8, [X20+1827]
	008 Move X21, [X21+1384]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x638000
	015 Move X0, [X0+1384]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1827], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Call TMP_UpdateManager.get_instance
	025 Compare X0, 0
	026 JumpIfEqual {32}
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call 0x1C17F20

Method: System.Void InternalRegisterTextElementForLayoutRebuild(TMPro.TMP_Text element)

Disassembly:
	0x03B21430 ADD X8, X8, X9, 0x4, LSL
	0x03B21434 ADD X0, X8, 0x138
	0x03B21438 LDP X8, X2, [X0]
	0x03B2143C MOV X0, X21
	0x03B21440 MOV W1, W31
	0x03B21444 BLR X8
	0x03B21448 LDR X8, [X19 + 0x10]
	0x03B2144C ADD W20, W20, 0x1
	0x03B21450 CBNZ X8, 0x3B213BC
	0x03B21454 B 0x3B2158C
	0x03B21458 CMP W2, 0x1
	0x03B2145C B.LT 0x3B2148C
	0x03B21460 LDR W9, [X8 + 0x1C]
	0x03B21464 LDR X0, [X8 + 0x10]
	0x03B21468 MOV W1, W31
	0x03B2146C MOV X3, X31
	0x03B21470 ADD W9, W9, 0x1
	0x03B21474 STP W31, W9, [X8 + 0x18]
	0x03B21478 BL 0x339FA34
	0x03B2147C LDR X0, [X19 + 0x18]
	0x03B21480 CBZ X0, 0x3B2158C
	0x03B21484 LDR X1, [X22]
	0x03B21488 BL 0x2DAA53C
	0x03B2148C LDR X8, [X19 + 0x20]
	0x03B21490 CBZ X8, 0x3B2158C
	0x03B21494 MOV W20, W31
	0x03B21498 LDR W2, [X8 + 0x18]
	0x03B2149C CMP W20, W2
	0x03B214A0 B.GE 0x3B21534
	0x03B214A4 BL 0x3B20E84
	0x03B214A8 CBZ X0, 0x3B2158C
	0x03B214AC LDR X0, [X0 + 0x20]
	0x03B214B0 CBZ X0, 0x3B2158C
	0x03B214B4 LDR X2, [X23]
	0x03B214B8 MOV W1, W20
	0x03B214BC BL 0x301BCCC
	0x03B214C0 CBZ X0, 0x3B2158C
	0x03B214C4 LDR X8, [X0]
	0x03B214C8 LDR X1, [X24]
	0x03B214CC MOV X21, X0
	0x03B214D0 LDRH W9, [X8 + 0x12E]
	0x03B214D4 CBZ X9, 0x3B214F8
	0x03B214D8 LDR X10, [X8 + 0xB0]
	0x03B214DC ADD X10, X10, 0x8
	0x03B214E0 LDUR X11, [X10 - 0x8]
	0x03B214E4 CMP X11, X1
	0x03B214E8 B.EQ 0x3B21508
	0x03B214EC SUBS X9, X9, 0x1
	0x03B214F0 ADD X10, X10, 0x10
	0x03B214F4 B.NE 0x3B214E0
	0x03B214F8 MOV X0, X21
	0x03B214FC MOV W2, W31
	0x03B21500 BL 0x1C5C788
	0x03B21504 B 0x3B21514
	0x03B21508 LDRSW X9, [X10]
	0x03B2150C ADD X8, X8, X9, 0x4, LSL
	0x03B21510 ADD X0, X8, 0x138
	0x03B21514 LDP X8, X2, [X0]
	0x03B21518 MOVZ W1, 0x3
	0x03B2151C MOV X0, X21
	0x03B21520 BLR X8
	0x03B21524 LDR X8, [X19 + 0x20]
	0x03B21528 ADD W20, W20, 0x1
	0x03B2152C CBNZ X8, 0x3B21498
	0x03B21530 B 0x3B2158C
	0x03B21534 CMP W2, 0x1
	0x03B21538 B.LT 0x3B21578
	0x03B2153C LDR W9, [X8 + 0x1C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8C2000
	006 Move W8, [X21+1828]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x5D5000
	014 Move X0, [X0+2520]
	015 Call 0x1C17CF4
	016 Move X0, 0x5D4000
	017 Move X0, [X0+3576]
	018 Call 0x1C17CF4
	019 Move X0, 0x639000
	020 Move X0, [X0+2728]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1828], W8
	024 Compare X19, 0
	025 JumpIfEqual {85}
	026 Move X0, X19
	027 Move X1, X31
	028 Call Object.GetInstanceID, X0
	029 Move X8, [X20+16]
	030 Compare X8, 0
	031 JumpIfEqual {85}
	032 Move X9, 0x5D4000
	033 Move X9, [X9+3576]
	034 Move W21, W0
	035 Move X0, X8
	036 Move W1, W21
	037 Move X2, [X9]
	038 Call HashSet`1<Int32>.Contains, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {70}
	043 Move X0, [X20+16]
	044 Compare X0, 0
	045 JumpIfEqual {85}
	046 Move X8, 0x5D5000
	047 Move X8, [X8+2520]
	048 Move W1, W21
	049 Move X2, [X8]
	050 Call HashSet`1<Int32>.Add, X0, X1
	051 Move X0, [X20+24]
	052 Compare X0, 0
	053 JumpIfEqual {85}
	054 Move X9, 0x639000
	055 Move X9, [X9+2728]
	056 Move W10, [X0+28]
	057 Move X8, [X0+16]
	058 Move X9, [X9]
	059 Add W10, W10, 1
	060 Move [X0+28], W10
	061 Compare X8, 0
	062 JumpIfEqual {85}
	063 NotImplemented "Instruction LDRSW not yet implemented."
	064 Move W11, [X8+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Add W9, W10, 1
	067 Add X8, X8, X10
	068 Move [X0+24], W9
	069 Move [X8+32], X19
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X30, [X31+32]
	073 Move X21, [X31+40]
	074 Return 
	075 Move X8, [X9+32]
	076 Move X1, X19
	077 Move X20, [X31+16]
	078 Move X19, [X31+24]
	079 Move X8, [X8+192]
	080 Move X2, [X8+112]
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 Call List`1<Object>.AddWithResize, X0, X1
	084 Return 
	085 Call 0x1C17F20

Method: System.Void RegisterTextElementForGraphicRebuild(TMPro.TMP_Text element)

Disassembly:
	0x03B21540 LDR X0, [X8 + 0x10]
	0x03B21544 MOV W1, W31
	0x03B21548 MOV X3, X31
	0x03B2154C ADD W9, W9, 0x1
	0x03B21550 STP W31, W9, [X8 + 0x18]
	0x03B21554 BL 0x339FA34
	0x03B21558 LDR X0, [X19 + 0x28]
	0x03B2155C CBZ X0, 0x3B2158C
	0x03B21560 LDR X1, [X22]
	0x03B21564 LDP X20, X19, [X31 + 0x30]
	0x03B21568 LDP X22, X21, [X31 + 0x20]
	0x03B2156C LDP X24, X23, [X31 + 0x10]
	0x03B21570 LDR X30, [X31], #0x40
	0x03B21574 B 0x2DAA53C
	0x03B21578 LDP X20, X19, [X31 + 0x30]
	0x03B2157C LDP X22, X21, [X31 + 0x20]
	0x03B21580 LDP X24, X23, [X31 + 0x10]
	0x03B21584 LDR X30, [X31], #0x40
	0x03B21588 RET
	0x03B2158C BL 0x1C16F20
	0x03B21590 STR X30, [X31 - 0x20]!
	0x03B21594 STP X20, X19, [X31 + 0x10]
	0x03B21598 ADRP X20, 0x8C1000
	0x03B2159C ADRP X19, 0x5D2000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8C2000
	006 Move X21, 0x638000
	007 Move W8, [X20+1829]
	008 Move X21, [X21+1384]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x638000
	015 Move X0, [X0+1384]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1829], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Call TMP_UpdateManager.get_instance
	025 Compare X0, 0
	026 JumpIfEqual {32}
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call 0x1C17F20

Method: System.Void InternalRegisterTextElementForGraphicRebuild(TMPro.TMP_Text element)

Disassembly:
	0x03B215A0 LDRB W8, [X20 + 0x735]
	0x03B215A4 LDR X19, [X19 + 0xA28]
	0x03B215A8 TBNZ X8, 0x0, 0x3B215CC
	0x03B215AC ADRP X0, 0x5D2000
	0x03B215B0 LDR X0, [X0 + 0xA28]
	0x03B215B4 BL 0x1C16CF4
	0x03B215B8 ADRP X0, 0x638000
	0x03B215BC LDR X0, [X0 + 0xB40]
	0x03B215C0 BL 0x1C16CF4
	0x03B215C4 MOVZ W8, 0x1
	0x03B215C8 STRB W8, [X20 + 0x735]
	0x03B215CC LDR X0, [X19]
	0x03B215D0 ADRP X19, 0x638000
	0x03B215D4 LDR W8, [X0 + 0xE0]
	0x03B215D8 LDR X19, [X19 + 0xB40]
	0x03B215DC CBNZ W8, 0x3B215E4
	0x03B215E0 BL 0x1C16DFC
	0x03B215E4 LDR X0, [X19]
	0x03B215E8 LDP X20, X19, [X31 + 0x10]
	0x03B215EC MOV X1, X31
	0x03B215F0 LDR X30, [X31], #0x20
	0x03B215F4 B 0x3C06048
	0x03B215F8 STP X30, X19, [X31 - 0x10]!
	0x03B215FC MOV X19, X0
	0x03B21600 BL 0x3B20E84
	0x03B21604 CBZ X0, 0x3B21624
	0x03B21608 MOV X1, X19
	0x03B2160C BL 0x3B21628
	0x03B21610 BL 0x3B20E84
	0x03B21614 CBZ X0, 0x3B21624
	0x03B21618 MOV X1, X19
	0x03B2161C LDP X30, X19, [X31], #0x10
	0x03B21620 B 0x3B21704
	0x03B21624 BL 0x1C16F20
	0x03B21628 STP X30, X21, [X31 - 0x20]!
	0x03B2162C STP X20, X19, [X31 + 0x10]
	0x03B21630 ADRP X21, 0x8C1000
	0x03B21634 LDRB W8, [X21 + 0x736]
	0x03B21638 MOV X20, X1
	0x03B2163C MOV X19, X0
	0x03B21640 TBNZ X8, 0x0, 0x3B21670
	0x03B21644 ADRP X0, 0x5DF000
	0x03B21648 LDR X0, [X0 + 0x5A0]
	0x03B2164C BL 0x1C16CF4
	0x03B21650 ADRP X0, 0x638000
	0x03B21654 LDR X0, [X0 + 0xB48]
	0x03B21658 BL 0x1C16CF4
	0x03B2165C ADRP X0, 0x5D2000
	0x03B21660 LDR X0, [X0 + 0x598]
	0x03B21664 BL 0x1C16CF4
	0x03B21668 MOVZ W8, 0x1
	0x03B2166C STRB W8, [X21 + 0x736]
	0x03B21670 CBZ X20, 0x3B21700
	0x03B21674 ADRP X8, 0x5D2000
	0x03B21678 LDR X8, [X8 + 0x598]
	0x03B2167C LDR X9, [X20]
	0x03B21680 LDR X8, [X8]
	0x03B21684 LDRB W11, [X9 + 0x130]
	0x03B21688 LDRB W10, [X8 + 0x130]
	0x03B2168C CMP W11, W10
	0x03B21690 B.CC 0x3B21700
	0x03B21694 LDR X9, [X9 + 0xC8]
	0x03B21698 ADD X9, X9, X10, 0x3, LSL
	0x03B2169C LDUR X9, [X9 - 0x8]
	0x03B216A0 CMP X9, X8
	0x03B216A4 B.NE 0x3B21700
	0x03B216A8 MOV X0, X20
	0x03B216AC MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8C2000
	006 Move W8, [X21+1830]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x5D5000
	014 Move X0, [X0+2520]
	015 Call 0x1C17CF4
	016 Move X0, 0x5D4000
	017 Move X0, [X0+3576]
	018 Call 0x1C17CF4
	019 Move X0, 0x639000
	020 Move X0, [X0+2728]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1830], W8
	024 Compare X19, 0
	025 JumpIfEqual {85}
	026 Move X0, X19
	027 Move X1, X31
	028 Call Object.GetInstanceID, X0
	029 Move X8, [X20+32]
	030 Compare X8, 0
	031 JumpIfEqual {85}
	032 Move X9, 0x5D4000
	033 Move X9, [X9+3576]
	034 Move W21, W0
	035 Move X0, X8
	036 Move W1, W21
	037 Move X2, [X9]
	038 Call HashSet`1<Int32>.Contains, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {70}
	043 Move X0, [X20+32]
	044 Compare X0, 0
	045 JumpIfEqual {85}
	046 Move X8, 0x5D5000
	047 Move X8, [X8+2520]
	048 Move W1, W21
	049 Move X2, [X8]
	050 Call HashSet`1<Int32>.Add, X0, X1
	051 Move X0, [X20+40]
	052 Compare X0, 0
	053 JumpIfEqual {85}
	054 Move X9, 0x639000
	055 Move X9, [X9+2728]
	056 Move W10, [X0+28]
	057 Move X8, [X0+16]
	058 Move X9, [X9]
	059 Add W10, W10, 1
	060 Move [X0+28], W10
	061 Compare X8, 0
	062 JumpIfEqual {85}
	063 NotImplemented "Instruction LDRSW not yet implemented."
	064 Move W11, [X8+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Add W9, W10, 1
	067 Add X8, X8, X10
	068 Move [X0+24], W9
	069 Move [X8+32], X19
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X30, [X31+32]
	073 Move X21, [X31+40]
	074 Return 
	075 Move X8, [X9+32]
	076 Move X1, X19
	077 Move X20, [X31+16]
	078 Move X19, [X31+24]
	079 Move X8, [X8+192]
	080 Move X2, [X8+112]
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 Call List`1<Object>.AddWithResize, X0, X1
	084 Return 
	085 Call 0x1C17F20

Method: System.Void RegisterTextElementForCullingUpdate(TMPro.TMP_Text element)

Disassembly:
	0x03B216B0 BL 0x3C385F8
	0x03B216B4 MOV W21, W0
	0x03B216B8 BL 0x3B20E84
	0x03B216BC CBZ X0, 0x3B21700
	0x03B216C0 LDR X0, [X0 + 0x10]
	0x03B216C4 CBZ X0, 0x3B21700
	0x03B216C8 ADRP X8, 0x638000
	0x03B216CC LDR X8, [X8 + 0xB48]
	0x03B216D0 MOV X1, X20
	0x03B216D4 LDR X2, [X8]
	0x03B216D8 BL 0x301D7A8
	0x03B216DC LDR X0, [X19 + 0x28]
	0x03B216E0 CBZ X0, 0x3B21700
	0x03B216E4 ADRP X8, 0x5DF000
	0x03B216E8 LDR X8, [X8 + 0x5A0]
	0x03B216EC LDP X20, X19, [X31 + 0x10]
	0x03B216F0 MOV W1, W21
	0x03B216F4 LDR X2, [X8]
	0x03B216F8 LDP X30, X21, [X31], #0x20
	0x03B216FC B 0x2DAA770
	0x03B21700 BL 0x1C16F20
	0x03B21704 STP X30, X21, [X31 - 0x20]!
	0x03B21708 STP X20, X19, [X31 + 0x10]
	0x03B2170C ADRP X21, 0x8C1000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8C2000
	006 Move X21, 0x638000
	007 Move W8, [X20+1831]
	008 Move X21, [X21+1384]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x638000
	015 Move X0, [X0+1384]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1831], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Call TMP_UpdateManager.get_instance
	025 Compare X0, 0
	026 JumpIfEqual {32}
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call 0x1C17F20

Method: System.Void InternalRegisterTextElementForCullingUpdate(TMPro.TMP_Text element)

Disassembly:
	0x03B21710 LDRB W8, [X21 + 0x737]
	0x03B21714 MOV X20, X1
	0x03B21718 MOV X19, X0
	0x03B2171C TBNZ X8, 0x0, 0x3B2174C
	0x03B21720 ADRP X0, 0x5DF000
	0x03B21724 LDR X0, [X0 + 0x5A0]
	0x03B21728 BL 0x1C16CF4
	0x03B2172C ADRP X0, 0x638000
	0x03B21730 LDR X0, [X0 + 0xB48]
	0x03B21734 BL 0x1C16CF4
	0x03B21738 ADRP X0, 0x5D2000
	0x03B2173C LDR X0, [X0 + 0x598]
	0x03B21740 BL 0x1C16CF4
	0x03B21744 MOVZ W8, 0x1
	0x03B21748 STRB W8, [X21 + 0x737]
	0x03B2174C CBZ X20, 0x3B217DC
	0x03B21750 ADRP X8, 0x5D2000
	0x03B21754 LDR X8, [X8 + 0x598]
	0x03B21758 LDR X9, [X20]
	0x03B2175C LDR X8, [X8]
	0x03B21760 LDRB W11, [X9 + 0x130]
	0x03B21764 LDRB W10, [X8 + 0x130]
	0x03B21768 CMP W11, W10
	0x03B2176C B.CC 0x3B217DC
	0x03B21770 LDR X9, [X9 + 0xC8]
	0x03B21774 ADD X9, X9, X10, 0x3, LSL
	0x03B21778 LDUR X9, [X9 - 0x8]
	0x03B2177C CMP X9, X8
	0x03B21780 B.NE 0x3B217DC
	0x03B21784 MOV X0, X20
	0x03B21788 MOV X1, X31
	0x03B2178C BL 0x3C385F8
	0x03B21790 MOV W21, W0
	0x03B21794 BL 0x3B20E84
	0x03B21798 CBZ X0, 0x3B217DC
	0x03B2179C LDR X0, [X0 + 0x20]
	0x03B217A0 CBZ X0, 0x3B217DC
	0x03B217A4 ADRP X8, 0x638000
	0x03B217A8 LDR X8, [X8 + 0xB48]
	0x03B217AC MOV X1, X20
	0x03B217B0 LDR X2, [X8]
	0x03B217B4 BL 0x301D7A8
	0x03B217B8 LDR X0, [X19 + 0x18]
	0x03B217BC CBZ X0, 0x3B217DC
	0x03B217C0 ADRP X8, 0x5DF000
	0x03B217C4 LDR X8, [X8 + 0x5A0]
	0x03B217C8 LDP X20, X19, [X31 + 0x10]
	0x03B217CC MOV W1, W21
	0x03B217D0 LDR X2, [X8]
	0x03B217D4 LDP X30, X21, [X31], #0x20
	0x03B217D8 B 0x2DAA770
	0x03B217DC BL 0x1C16F20
	0x03B217E0 MOV X1, X31
	0x03B217E4 B 0x33BDD8C
	0x03B217E8 STP X30, X21, [X31 - 0x20]!
	0x03B217EC STP X20, X19, [X31 + 0x10]
	0x03B217F0 ADRP X20, 0x8C1000
	0x03B217F4 ADRP X21, 0x5D2000
	0x03B217F8 LDRB W8, [X20 + 0x738]
	0x03B217FC LDR X21, [X21 + 0xAC8]
	0x03B21800 MOV X19, X0
	0x03B21804 TBNZ X8, 0x0, 0x3B21858
	0x03B21808 ADRP X0, 0x5D2000
	0x03B2180C LDR X0, [X0 + 0xAC8]
	0x03B21810 BL 0x1C16CF4
	0x03B21814 ADRP X0, 0x638000
	0x03B21818 LDR X0, [X0 + 0xB50]
	0x03B2181C BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8C2000
	006 Move W8, [X21+1832]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x5D5000
	014 Move X0, [X0+2520]
	015 Call 0x1C17CF4
	016 Move X0, 0x5D4000
	017 Move X0, [X0+3576]
	018 Call 0x1C17CF4
	019 Move X0, 0x639000
	020 Move X0, [X0+2728]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1832], W8
	024 Compare X19, 0
	025 JumpIfEqual {85}
	026 Move X0, X19
	027 Move X1, X31
	028 Call Object.GetInstanceID, X0
	029 Move X8, [X20+64]
	030 Compare X8, 0
	031 JumpIfEqual {85}
	032 Move X9, 0x5D4000
	033 Move X9, [X9+3576]
	034 Move W21, W0
	035 Move X0, X8
	036 Move W1, W21
	037 Move X2, [X9]
	038 Call HashSet`1<Int32>.Contains, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {70}
	043 Move X0, [X20+64]
	044 Compare X0, 0
	045 JumpIfEqual {85}
	046 Move X8, 0x5D5000
	047 Move X8, [X8+2520]
	048 Move W1, W21
	049 Move X2, [X8]
	050 Call HashSet`1<Int32>.Add, X0, X1
	051 Move X0, [X20+72]
	052 Compare X0, 0
	053 JumpIfEqual {85}
	054 Move X9, 0x639000
	055 Move X9, [X9+2728]
	056 Move W10, [X0+28]
	057 Move X8, [X0+16]
	058 Move X9, [X9]
	059 Add W10, W10, 1
	060 Move [X0+28], W10
	061 Compare X8, 0
	062 JumpIfEqual {85}
	063 NotImplemented "Instruction LDRSW not yet implemented."
	064 Move W11, [X8+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Add W9, W10, 1
	067 Add X8, X8, X10
	068 Move [X0+24], W9
	069 Move [X8+32], X19
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X30, [X31+32]
	073 Move X21, [X31+40]
	074 Return 
	075 Move X8, [X9+32]
	076 Move X1, X19
	077 Move X20, [X31+16]
	078 Move X19, [X31+24]
	079 Move X8, [X8+192]
	080 Move X2, [X8+112]
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 Call List`1<Object>.AddWithResize, X0, X1
	084 Return 
	085 Call 0x1C17F20

Method: System.Void OnCameraPreCull()

Disassembly:
	0x03B21820 ADRP X0, 0x626000

ISIL:
No ISIL was generated
Method: System.Void DoRebuilds()

Disassembly:
	0x03B21824 LDR X0, [X0 + 0x180]
	0x03B21828 BL 0x1C16CF4
	0x03B2182C ADRP X0, 0x638000
	0x03B21830 LDR X0, [X0 + 0xB58]
	0x03B21834 BL 0x1C16CF4
	0x03B21838 ADRP X0, 0x638000
	0x03B2183C LDR X0, [X0 + 0xB60]
	0x03B21840 BL 0x1C16CF4
	0x03B21844 ADRP X0, 0x638000
	0x03B21848 LDR X0, [X0 + 0xB68]
	0x03B2184C BL 0x1C16CF4
	0x03B21850 MOVZ W8, 0x1
	0x03B21854 STRB W8, [X20 + 0x738]
	0x03B21858 LDR X0, [X21]
	0x03B2185C MOVZ W1, 0x8
	0x03B21860 BL 0x1C16D6C
	0x03B21864 CBZ X0, 0x3B2196C
	0x03B21868 LDR W8, [X0 + 0x18]
	0x03B2186C MOV X20, X0
	0x03B21870 CBZ W8, 0x3B21968
	0x03B21874 ADRP X8, 0x638000
	0x03B21878 LDR X8, [X8 + 0xB50]
	0x03B2187C ADRP X21, 0x626000
	0x03B21880 MOV X0, X19
	0x03B21884 MOV X2, X31
	0x03B21888 LDR X8, [X8]
	0x03B2188C LDR X21, [X21 + 0x180]
	0x03B21890 STR X8, [X20 + 0x20]
	0x03B21894 LDR X1, [X21]
	0x03B21898 BL 0x338FF2C
	0x03B2189C LDR W8, [X20 + 0x18]
	0x03B218A0 CMP W8, 0x1
	0x03B218A4 B.LS 0x3B21968
	0x03B218A8 CMP W8, 0x2
	0x03B218AC STR X0, [X20 + 0x28]
	0x03B218B0 B.EQ 0x3B21968
	0x03B218B4 ADRP X8, 0x638000
	0x03B218B8 LDR X8, [X8 + 0xB58]
	0x03B218BC ADD X0, X19, 0x4
	0x03B218C0 MOV X2, X31
	0x03B218C4 LDR X8, [X8]
	0x03B218C8 STR X8, [X20 + 0x30]
	0x03B218CC LDR X1, [X21]
	0x03B218D0 BL 0x338FF2C
	0x03B218D4 LDR W8, [X20 + 0x18]
	0x03B218D8 CMP W8, 0x3
	0x03B218DC B.LS 0x3B21968
	0x03B218E0 CMP W8, 0x4
	0x03B218E4 STR X0, [X20 + 0x38]
	0x03B218E8 B.EQ 0x3B21968
	0x03B218EC ADRP X8, 0x638000
	0x03B218F0 LDR X8, [X8 + 0xB60]
	0x03B218F4 ADD X0, X19, 0xC
	0x03B218F8 MOV X2, X31
	0x03B218FC LDR X8, [X8]
	0x03B21900 STR X8, [X20 + 0x40]
	0x03B21904 LDR X1, [X21]
	0x03B21908 BL 0x338FF2C
	0x03B2190C LDR W8, [X20 + 0x18]
	0x03B21910 CMP W8, 0x5
	0x03B21914 B.LS 0x3B21968
	0x03B21918 CMP W8, 0x6
	0x03B2191C STR X0, [X20 + 0x48]
	0x03B21920 B.EQ 0x3B21968
	0x03B21924 ADRP X8, 0x638000
	0x03B21928 LDR X8, [X8 + 0xB68]
	0x03B2192C ADD X0, X19, 0x8
	0x03B21930 MOV X2, X31
	0x03B21934 LDR X8, [X8]
	0x03B21938 STR X8, [X20 + 0x50]
	0x03B2193C LDR X1, [X21]
	0x03B21940 BL 0x338FF2C
	0x03B21944 LDR W8, [X20 + 0x18]
	0x03B21948 CMP W8, 0x7
	0x03B2194C B.LS 0x3B21968
	0x03B21950 STR X0, [X20 + 0x58]
	0x03B21954 MOV X0, X20
	0x03B21958 LDP X20, X19, [X31 + 0x10]
	0x03B2195C MOV X1, X31
	0x03B21960 LDP X30, X21, [X31], #0x20
	0x03B21964 B 0x32278CC
	0x03B21968 BL 0x1C16F28
	0x03B2196C BL 0x1C16F20
	0x03B21970 STP X30, X23, [X31 - 0x30]!
	0x03B21974 STP X22, X21, [X31 + 0x10]
	0x03B21978 STP X20, X19, [X31 + 0x20]
	0x03B2197C ADRP X20, 0x8C1000
	0x03B21980 ADRP X23, 0x626000
	0x03B21984 ADRP X21, 0x638000
	0x03B21988 ADRP X22, 0x638000
	0x03B2198C LDRB W8, [X20 + 0x739]
	0x03B21990 LDR X23, [X23 + 0x180]
	0x03B21994 LDR X21, [X21 + 0xB70]
	0x03B21998 LDR X22, [X22 + 0xB60]
	0x03B2199C MOV X19, X0
	0x03B219A0 TBNZ X8, 0x0, 0x3B219D0
	0x03B219A4 ADRP X0, 0x626000
	0x03B219A8 LDR X0, [X0 + 0x180]
	0x03B219AC BL 0x1C16CF4
	0x03B219B0 ADRP X0, 0x638000
	0x03B219B4 LDR X0, [X0 + 0xB60]
	0x03B219B8 BL 0x1C16CF4
	0x03B219BC ADRP X0, 0x638000
	0x03B219C0 LDR X0, [X0 + 0xB70]
	0x03B219C4 BL 0x1C16CF4
	0x03B219C8 MOVZ W8, 0x1
	0x03B219CC STRB W8, [X20 + 0x739]
	0x03B219D0 LDR X1, [X23]
	0x03B219D4 MOV X0, X19
	0x03B219D8 MOV X2, X31
	0x03B219DC BL 0x338FF2C
	0x03B219E0 LDR X1, [X23]
	0x03B219E4 MOV X20, X0
	0x03B219E8 ADD X0, X19, 0x4
	0x03B219EC MOV X2, X31
	0x03B219F0 BL 0x338FF2C
	0x03B219F4 LDR X8, [X21]
	0x03B219F8 LDR X2, [X22]
	0x03B219FC MOV X1, X20
	0x03B21A00 LDP X20, X19, [X31 + 0x20]
	0x03B21A04 LDP X22, X21, [X31 + 0x10]
	0x03B21A08 MOV X3, X0
	0x03B21A0C MOV X0, X8
	0x03B21A10 MOV X4, X31
	0x03B21A14 LDP X30, X23, [X31], #0x30
	0x03B21A18 B 0x32277C4
	0x03B21A1C MOV X1, X31
	0x03B21A20 B 0x33BDD8C
	0x03B21A24 STP X30, X23, [X31 - 0x30]!
	0x03B21A28 STP X22, X21, [X31 + 0x10]
	0x03B21A2C STP X20, X19, [X31 + 0x20]
	0x03B21A30 ADRP X23, 0x8C1000
	0x03B21A34 ADRP X22, 0x5D2000
	0x03B21A38 ADRP X20, 0x638000
	0x03B21A3C ADRP X21, 0x638000
	0x03B21A40 MOV X19, X8
	0x03B21A44 LDRB W8, [X23 + 0x73A]
	0x03B21A48 LDR X22, [X22 + 0x618]
	0x03B21A4C LDR X20, [X20 + 0xB78]
	0x03B21A50 LDR X21, [X21 + 0xB80]
	0x03B21A54 TBNZ X8, 0x0, 0x3B21A84
	0x03B21A58 ADRP X0, 0x5D2000
	0x03B21A5C LDR X0, [X0 + 0x618]
	0x03B21A60 BL 0x1C16CF4
	0x03B21A64 ADRP X0, 0x638000
	0x03B21A68 LDR X0, [X0 + 0xB78]
	0x03B21A6C BL 0x1C16CF4
	0x03B21A70 ADRP X0, 0x638000
	0x03B21A74 LDR X0, [X0 + 0xB80]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x8C2000
	007 Move W8, [X20+1833]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x5DA000
	014 Move X0, [X0+1656]
	015 Call 0x1C17CF4
	016 Move X0, 0x639000
	017 Move X0, [X0+2736]
	018 Call 0x1C17CF4
	019 Move X0, 0x639000
	020 Move X0, [X0+2744]
	021 Call 0x1C17CF4
	022 Move X0, 0x639000
	023 Move X0, [X0+2752]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+1833], W8
	027 Move X0, [X19+56]
	028 Compare X0, 0
	029 JumpIfEqual {166}
	030 Move X22, 0x639000
	031 Move X21, 0x5DA000
	032 Move X22, [X22+2752]
	033 Move X21, [X21+1656]
	034 Move W20, W31
	035 Move W8, [X0+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X2, [X22]
	038 Move W1, W20
	039 Call List`1<Object>.get_Item, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {166}
	042 Move X8, [X0]
	043 Move X9, [X8+2424]
	044 Move X1, [X8+2432]
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move X0, [X19+56]
	047 Add W20, W20, 1
	048 Compare X0, 0
	049 JumpIfNotEqual {35}
	050 Move X0, [X19+24]
	051 Compare X0, 0
	052 JumpIfEqual {166}
	053 Move W20, W31
	054 Move W2, [X0+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X2, [X22]
	057 Move W1, W20
	058 Call List`1<Object>.get_Item, X0, X1
	059 Compare X0, 0
	060 JumpIfEqual {166}
	061 Move X8, [X0]
	062 Move W1, W31
	063 Move X9, [X8+904]
	064 Move X2, [X8+912]
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Move X0, [X19+24]
	067 Add W20, W20, 1
	068 Compare X0, 0
	069 JumpIfNotEqual {54}
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move W9, [X0+28]
	072 Move X8, [X0+16]
	073 Move W1, W31
	074 Move X3, X31
	075 Add W9, W9, 1
	076 Move [X0+24], W31
	077 Move [X0+28], W9
	078 Move X0, X8
	079 Call Array.Clear, X0, X1, X2
	080 Move X0, [X19+16]
	081 Compare X0, 0
	082 JumpIfEqual {166}
	083 Move X1, [X21]
	084 Call HashSet`1<Int32>.Clear, X0
	085 Move X0, [X19+40]
	086 Compare X0, 0
	087 JumpIfEqual {166}
	088 Move W20, W31
	089 Move W2, [X0+24]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X2, [X22]
	092 Move W1, W20
	093 Call List`1<Object>.get_Item, X0, X1
	094 Compare X0, 0
	095 JumpIfEqual {166}
	096 Move X8, [X0]
	097 Move W1, 3
	098 Move X9, [X8+904]
	099 Move X2, [X8+912]
	100 NotImplemented "Instruction BLR not yet implemented."
	101 Move X0, [X19+40]
	102 Add W20, W20, 1
	103 Compare X0, 0
	104 JumpIfNotEqual {89}
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move W9, [X0+28]
	107 Move X8, [X0+16]
	108 Move W1, W31
	109 Move X3, X31
	110 Add W9, W9, 1
	111 Move [X0+24], W31
	112 Move [X0+28], W9
	113 Move X0, X8
	114 Call Array.Clear, X0, X1, X2
	115 Move X0, [X19+32]
	116 Compare X0, 0
	117 JumpIfEqual {166}
	118 Move X1, [X21]
	119 Call HashSet`1<Int32>.Clear, X0
	120 Move X0, [X19+72]
	121 Compare X0, 0
	122 JumpIfEqual {166}
	123 Move W20, W31
	124 Move W2, [X0+24]
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move X2, [X22]
	127 Move W1, W20
	128 Call List`1<Object>.get_Item, X0, X1
	129 Compare X0, 0
	130 JumpIfEqual {166}
	131 Move X8, [X0]
	132 Move X9, [X8+1944]
	133 Move X1, [X8+1952]
	134 NotImplemented "Instruction BLR not yet implemented."
	135 Move X0, [X19+72]
	136 Add W20, W20, 1
	137 Compare X0, 0
	138 JumpIfNotEqual {124}
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move W9, [X0+28]
	141 Move X8, [X0+16]
	142 Move W1, W31
	143 Move X3, X31
	144 Add W9, W9, 1
	145 Move [X0+24], W31
	146 Move [X0+28], W9
	147 Move X0, X8
	148 Call Array.Clear, X0, X1, X2
	149 Move X0, [X19+64]
	150 Compare X0, 0
	151 JumpIfEqual {166}
	152 Move X1, [X21]
	153 Move X20, [X31+32]
	154 Move X19, [X31+40]
	155 Move X22, [X31+16]
	156 Move X21, [X31+24]
	157 Move X30, [X31+48]
	158 Call HashSet`1<Int32>.Clear, X0
	159 Return 
	160 Move X20, [X31+32]
	161 Move X19, [X31+40]
	162 Move X22, [X31+16]
	163 Move X21, [X31+24]
	164 Move X30, [X31+48]
	165 Return 
	166 Call 0x1C17F20

Method: System.Void UnRegisterTextObjectForUpdate(TMPro.TMP_Text textObject)

Disassembly:
	0x03B21A78 BL 0x1C16CF4
	0x03B21A7C MOVZ W8, 0x1
	0x03B21A80 STRB W8, [X23 + 0x73A]
	0x03B21A84 LDR X0, [X22]
	0x03B21A88 MOVZ W1, 0x1C34
	0x03B21A8C BL 0x1C16D6C
	0x03B21A90 LDR X1, [X20]
	0x03B21A94 MOV X2, X31
	0x03B21A98 MOV X20, X0
	0x03B21A9C BL 0x32C5BD8
	0x03B21AA0 LDR X0, [X22]
	0x03B21AA4 MOVZ W1, 0xF6E
	0x03B21AA8 BL 0x1C16D6C
	0x03B21AAC LDR X1, [X21]
	0x03B21AB0 MOV X2, X31
	0x03B21AB4 MOV X21, X0
	0x03B21AB8 BL 0x32C5BD8
	0x03B21ABC ADRP X8, 0xFFFFFFFFFCFCC000
	0x03B21AC0 LDR V0, [X8 + 0xEA0]
	0x03B21AC4 STP X20, X21, [X19]
	0x03B21AC8 STRB W31, [X19 + 0x18]
	0x03B21ACC STUR W31, [X19 + 0x19]
	0x03B21AD0 STR D0, [X19 + 0x10]
	0x03B21AD4 STR W31, [X19 + 0x1C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8C2000
	006 Move X21, 0x638000
	007 Move W8, [X20+1834]
	008 Move X21, [X21+1384]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x638000
	015 Move X0, [X0+1384]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1834], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Call TMP_UpdateManager.get_instance
	025 Compare X0, 0
	026 JumpIfEqual {32}
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call 0x1C17F20

Method: System.Void UnRegisterTextElementForRebuild(TMPro.TMP_Text element)

Disassembly:
	0x03B21B70 BL 0x1C16DFC
	0x03B21B74 MOV X0, X19
	0x03B21B78 MOV X1, X31
	0x03B21B7C MOV X2, X31
	0x03B21B80 BL 0x3C3883C
	0x03B21B84 TBNZ X0, 0x0, 0x3B21BBC
	0x03B21B88 STP X21, X19, [X20]
	0x03B21B8C LDP X20, X19, [X31 + 0x20]
	0x03B21B90 LDP X22, X21, [X31 + 0x10]
	0x03B21B94 LDP X30, X23, [X31], #0x30
	0x03B21B98 RET
	0x03B21B9C ADRP X0, 0x5D7000
	0x03B21BA0 LDR X0, [X0 + 0x528]
	0x03B21BA4 BL 0x1C16D08
	0x03B21BA8 BL 0x1C16F10
	0x03B21BAC MOV X19, X0
	0x03B21BB0 ADRP X0, 0x606000
	0x03B21BB4 LDR X0, [X0 + 0x680]
	0x03B21BB8 B 0x3B21BD8
	0x03B21BBC ADRP X0, 0x5D7000
	0x03B21BC0 LDR X0, [X0 + 0x528]
	0x03B21BC4 BL 0x1C16D08
	0x03B21BC8 BL 0x1C16F10
	0x03B21BCC MOV X19, X0
	0x03B21BD0 ADRP X0, 0x638000
	0x03B21BD4 LDR X0, [X0 + 0xB88]
	0x03B21BD8 BL 0x1C16D08
	0x03B21BDC MOV X1, X0
	0x03B21BE0 MOV X0, X19
	0x03B21BE4 MOV X2, X31
	0x03B21BE8 BL 0x330E100
	0x03B21BEC ADRP X0, 0x638000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8C2000
	006 Move X21, 0x638000
	007 Move W8, [X20+1835]
	008 Move X21, [X21+1384]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x638000
	015 Move X0, [X0+1384]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1835], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Call TMP_UpdateManager.get_instance
	025 Compare X0, 0
	026 JumpIfEqual {44}
	027 Move X1, X19
	028 Call TMP_UpdateManager.InternalUnRegisterTextElementForGraphicRebuild, X0, X1
	029 Call TMP_UpdateManager.get_instance
	030 Compare X0, 0
	031 JumpIfEqual {44}
	032 Move X1, X19
	033 Call TMP_UpdateManager.InternalUnRegisterTextElementForLayoutRebuild, X0, X1
	034 Call TMP_UpdateManager.get_instance
	035 Compare X0, 0
	036 JumpIfEqual {44}
	037 Move X1, X19
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call TMP_UpdateManager.InternalUnRegisterTextObjectForUpdate, X0, X1
	043 Return 
	044 Call 0x1C17F20

Method: System.Void InternalUnRegisterTextElementForGraphicRebuild(TMPro.TMP_Text element)

Disassembly:
	0x03B21BF0 LDR X0, [X0 + 0xB90]
	0x03B21BF4 BL 0x1C16D08
	0x03B21BF8 MOV X1, X0
	0x03B21BFC MOV X0, X19
	0x03B21C00 BL 0x1C16DEC
	0x03B21C04 STP X30, X23, [X31 - 0x30]!
	0x03B21C08 STP X22, X21, [X31 + 0x10]
	0x03B21C0C STP X20, X19, [X31 + 0x20]
	0x03B21C10 ADRP X22, 0x8C1000
	0x03B21C14 ADRP X23, 0x5D2000
	0x03B21C18 LDRB W8, [X22 + 0x73D]
	0x03B21C1C LDR X23, [X23 + 0x598]
	0x03B21C20 MOV X19, X2
	0x03B21C24 MOV X21, X1
	0x03B21C28 MOV X20, X0
	0x03B21C2C TBNZ X8, 0x0, 0x3B21C44
	0x03B21C30 ADRP X0, 0x5D2000
	0x03B21C34 LDR X0, [X0 + 0x598]
	0x03B21C38 BL 0x1C16CF4
	0x03B21C3C MOVZ W8, 0x1
	0x03B21C40 STRB W8, [X22 + 0x73D]
	0x03B21C44 LDR X0, [X23]
	0x03B21C48 LDR X22, [X20]
	0x03B21C4C LDR W8, [X0 + 0xE0]
	0x03B21C50 CBNZ W8, 0x3B21C58
	0x03B21C54 BL 0x1C16DFC
	0x03B21C58 MOV X0, X22
	0x03B21C5C MOV X1, X21
	0x03B21C60 MOV X2, X31
	0x03B21C64 BL 0x3C3883C
	0x03B21C68 TBZ X0, 0x0, 0x3B21C9C
	0x03B21C6C LDR X0, [X23]
	0x03B21C70 LDR X20, [X20 + 0x8]
	0x03B21C74 LDR W8, [X0 + 0xE0]
	0x03B21C78 CBNZ W8, 0x3B21C80
	0x03B21C7C BL 0x1C16DFC
	0x03B21C80 MOV X0, X20
	0x03B21C84 MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8C2000
	006 Move W8, [X21+1836]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x5E0000
	014 Move X0, [X0+1440]
	015 Call 0x1C17CF4
	016 Move X0, 0x639000
	017 Move X0, [X0+2760]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1836], W8
	021 Compare X20, 0
	022 JumpIfEqual {49}
	023 Move X0, X20
	024 Move X1, X31
	025 Call Object.GetInstanceID, X0
	026 Move X8, [X19+40]
	027 Compare X8, 0
	028 JumpIfEqual {49}
	029 Move X9, 0x639000
	030 Move X9, [X9+2760]
	031 Move W21, W0
	032 Move X0, X8
	033 Move X1, X20
	034 Move X2, [X9]
	035 Call List`1<Object>.Remove, X0, X1
	036 Move X0, [X19+32]
	037 Compare X0, 0
	038 JumpIfEqual {49}
	039 Move X8, 0x5E0000
	040 Move X8, [X8+1440]
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move W1, W21
	044 Move X2, [X8]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Call HashSet`1<Int32>.Remove, X0, X1
	048 Return 
	049 Call 0x1C17F20

Method: System.Void InternalUnRegisterTextElementForLayoutRebuild(TMPro.TMP_Text element)

Disassembly:
	0x03B21C88 LDP X20, X19, [X31 + 0x20]
	0x03B21C8C LDP X22, X21, [X31 + 0x10]
	0x03B21C90 MOV X2, X31
	0x03B21C94 LDP X30, X23, [X31], #0x30
	0x03B21C98 B 0x3C3883C
	0x03B21C9C LDP X20, X19, [X31 + 0x20]
	0x03B21CA0 LDP X22, X21, [X31 + 0x10]
	0x03B21CA4 MOV W0, W31
	0x03B21CA8 LDP X30, X23, [X31], #0x30
	0x03B21CAC RET
	0x03B21CB0 STP X30, X21, [X31 - 0x20]!
	0x03B21CB4 STP X20, X19, [X31 + 0x10]
	0x03B21CB8 ADRP X21, 0x8C1000
	0x03B21CBC LDRB W8, [X21 + 0x73E]
	0x03B21CC0 MOV X20, X1
	0x03B21CC4 MOV X19, X0
	0x03B21CC8 TBNZ X8, 0x0, 0x3B21CE0
	0x03B21CCC ADRP X0, 0x5FD000
	0x03B21CD0 LDR X0, [X0 + 0x458]
	0x03B21CD4 BL 0x1C16CF4
	0x03B21CD8 MOVZ W8, 0x1
	0x03B21CDC STRB W8, [X21 + 0x73E]
	0x03B21CE0 CBZ X20, 0x3B21CFC
	0x03B21CE4 ADRP X8, 0x5FD000
	0x03B21CE8 LDR X8, [X8 + 0x458]
	0x03B21CEC LDR X9, [X20]
	0x03B21CF0 LDR X8, [X8]
	0x03B21CF4 CMP X9, X8
	0x03B21CF8 B.EQ 0x3B21D0C
	0x03B21CFC LDP X20, X19, [X31 + 0x10]
	0x03B21D00 MOV W0, W31
	0x03B21D04 LDP X30, X21, [X31], #0x20
	0x03B21D08 RET
	0x03B21D0C MOV X0, X20
	0x03B21D10 BL 0x1C16E08
	0x03B21D14 LDP X1, X2, [X0]
	0x03B21D18 MOV X0, X19
	0x03B21D1C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8C2000
	006 Move W8, [X21+1837]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x5E0000
	014 Move X0, [X0+1440]
	015 Call 0x1C17CF4
	016 Move X0, 0x639000
	017 Move X0, [X0+2760]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1837], W8
	021 Compare X20, 0
	022 JumpIfEqual {49}
	023 Move X0, X20
	024 Move X1, X31
	025 Call Object.GetInstanceID, X0
	026 Move X8, [X19+24]
	027 Compare X8, 0
	028 JumpIfEqual {49}
	029 Move X9, 0x639000
	030 Move X9, [X9+2760]
	031 Move W21, W0
	032 Move X0, X8
	033 Move X1, X20
	034 Move X2, [X9]
	035 Call List`1<Object>.Remove, X0, X1
	036 Move X0, [X19+16]
	037 Compare X0, 0
	038 JumpIfEqual {49}
	039 Move X8, 0x5E0000
	040 Move X8, [X8+1440]
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move W1, W21
	044 Move X2, [X8]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Call HashSet`1<Int32>.Remove, X0, X1
	048 Return 
	049 Call 0x1C17F20

Method: System.Void InternalUnRegisterTextObjectForUpdate(TMPro.TMP_Text textObject)

Disassembly:
	0x03B21AD8 LDP X20, X19, [X31 + 0x20]
	0x03B21ADC LDP X22, X21, [X31 + 0x10]
	0x03B21AE0 LDP X30, X23, [X31], #0x30
	0x03B21AE4 RET
	0x03B21AE8 MOV X1, X31
	0x03B21AEC B 0x33BDD8C
	0x03B21AF0 LDR X0, [X0]
	0x03B21AF4 RET
	0x03B21AF8 LDR X0, [X0 + 0x8]
	0x03B21AFC RET
	0x03B21B00 STP X30, X23, [X31 - 0x30]!
	0x03B21B04 STP X22, X21, [X31 + 0x10]
	0x03B21B08 STP X20, X19, [X31 + 0x20]
	0x03B21B0C ADRP X23, 0x8C1000
	0x03B21B10 ADRP X22, 0x5D2000
	0x03B21B14 LDRB W8, [X23 + 0x73C]
	0x03B21B18 LDR X22, [X22 + 0x598]
	0x03B21B1C MOV X19, X2
	0x03B21B20 MOV X21, X1
	0x03B21B24 MOV X20, X0
	0x03B21B28 TBNZ X8, 0x0, 0x3B21B40
	0x03B21B2C ADRP X0, 0x5D2000
	0x03B21B30 LDR X0, [X0 + 0x598]
	0x03B21B34 BL 0x1C16CF4
	0x03B21B38 MOVZ W8, 0x1
	0x03B21B3C STRB W8, [X23 + 0x73C]
	0x03B21B40 LDR X0, [X22]
	0x03B21B44 LDR W8, [X0 + 0xE0]
	0x03B21B48 CBNZ W8, 0x3B21B50
	0x03B21B4C BL 0x1C16DFC
	0x03B21B50 MOV X0, X21
	0x03B21B54 MOV X1, X31
	0x03B21B58 MOV X2, X31
	0x03B21B5C BL 0x3C3883C
	0x03B21B60 TBNZ X0, 0x0, 0x3B21B9C
	0x03B21B64 LDR X0, [X22]
	0x03B21B68 LDR W8, [X0 + 0xE0]
	0x03B21B6C CBNZ W8, 0x3B21B74

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8C2000
	006 Move W8, [X21+1838]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x5E0000
	014 Move X0, [X0+1440]
	015 Call 0x1C17CF4
	016 Move X0, 0x639000
	017 Move X0, [X0+2760]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1838], W8
	021 Compare X20, 0
	022 JumpIfEqual {49}
	023 Move X0, X20
	024 Move X1, X31
	025 Call Object.GetInstanceID, X0
	026 Move X8, [X19+56]
	027 Compare X8, 0
	028 JumpIfEqual {49}
	029 Move X9, 0x639000
	030 Move X9, [X9+2760]
	031 Move W21, W0
	032 Move X0, X8
	033 Move X1, X20
	034 Move X2, [X9]
	035 Call List`1<Object>.Remove, X0, X1
	036 Move X0, [X19+48]
	037 Compare X0, 0
	038 JumpIfEqual {49}
	039 Move X8, 0x5E0000
	040 Move X8, [X8+1440]
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move W1, W21
	044 Move X2, [X8]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Call HashSet`1<Int32>.Remove, X0, X1
	048 Return 
	049 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03B21D20 LDP X30, X21, [X31], #0x20
	0x03B21D24 B 0x3B21C04
	0x03B21D28 STR X30, [X31 - 0x20]!
	0x03B21D2C STP X20, X19, [X31 + 0x10]
	0x03B21D30 MOV X19, X0
	0x03B21D34 LDR X0, [X0]
	0x03B21D38 CBZ X0, 0x3B21D58
	0x03B21D3C LDR X8, [X0]
	0x03B21D40 LDP X9, X1, [X8 + 0x158]
	0x03B21D44 BLR X9
	0x03B21D48 MOVZ W8, 0xA2DB
	0x03B21D4C MOVK W8, 0x1CFA0000
	0x03B21D50 MUL W20, W0, W8
	0x03B21D54 B 0x3B21D5C
	0x03B21D58 MOV W20, W31
	0x03B21D5C LDR X0, [X19 + 0x8]
	0x03B21D60 CBZ X0, 0x3B21D70
	0x03B21D64 LDR X8, [X0]
	0x03B21D68 LDP X9, X1, [X8 + 0x158]
	0x03B21D6C BLR X9
	0x03B21D70 ADD W0, W0, W20
	0x03B21D74 LDP X20, X19, [X31 + 0x10]
	0x03B21D78 LDR X30, [X31], #0x20
	0x03B21D7C RET
	0x03B21D80 CBZ X0, 0x3B21D90
	0x03B21D84 LDR X8, [X0]
	0x03B21D88 LDP X2, X1, [X8 + 0x158]
	0x03B21D8C BR X2
	0x03B21D90 RET
	0x03B21D94 MOVZ W8, 0xA2DB
	0x03B21D98 MOVK W8, 0x1CFA0000
	0x03B21D9C MADD W0, W0, W8, W1
	0x03B21DA0 RET
	0x03B21DA4 SUB X31, X31, 0x20
	0x03B21DA8 STP X1, X30, [X31 + 0x8]
	0x03B21DAC STR X0, [X31]
	0x03B21DB0 ADD X0, X31, 0x0
	0x03B21DB4 MOV X1, X2
	0x03B21DB8 MOV X2, X3
	0x03B21DBC BL 0x3B21C04
	0x03B21DC0 LDR X30, [X31 + 0x10]
	0x03B21DC4 AND W0, W0, 0x1
	0x03B21DC8 ADD X31, X31, 0x20
	0x03B21DCC RET
	0x03B21DD0 SUB X31, X31, 0x20
	0x03B21DD4 STP X1, X30, [X31 + 0x8]
	0x03B21DD8 STR X0, [X31]
	0x03B21DDC ADD X0, X31, 0x0
	0x03B21DE0 MOV X1, X2
	0x03B21DE4 MOV X2, X3
	0x03B21DE8 BL 0x3B21C04
	0x03B21DEC LDR X30, [X31 + 0x10]
	0x03B21DF0 ORN W8, W31, W0, 0x0
	0x03B21DF4 AND W0, W8, 0x1
	0x03B21DF8 ADD X31, X31, 0x20
	0x03B21DFC RET
	0x03B21E00 MOV X1, X31
	0x03B21E04 B 0x3C303D4
	0x03B21E08 LDR X0, [X0 + 0x10]
	0x03B21E0C RET
	0x03B21E10 STR X30, [X31 - 0x20]!
	0x03B21E14 STP X20, X19, [X31 + 0x10]
	0x03B21E18 MOV X19, X1
	0x03B21E1C MOV X1, X31
	0x03B21E20 MOV X20, X0
	0x03B21E24 BL 0x33A51F0
	0x03B21E28 STR X19, [X20 + 0x10]
	0x03B21E2C LDP X20, X19, [X31 + 0x10]
	0x03B21E30 LDR X30, [X31], #0x20
	0x03B21E34 RET
	0x03B21E38 SUB X31, X31, 0xF0
	0x03B21E3C STP D13, D12, [X31 + 0x80]
	0x03B21E40 STP D11, D10, [X31 + 0x90]
	0x03B21E44 STP D9, D8, [X31 + 0xA0]
	0x03B21E48 STP X30, X25, [X31 + 0xB0]
	0x03B21E4C STP X24, X23, [X31 + 0xC0]
	0x03B21E50 STP X22, X21, [X31 + 0xD0]
	0x03B21E54 STP X20, X19, [X31 + 0xE0]
	0x03B21E58 ADRP X21, 0x8C1000
	0x03B21E5C LDRB W9, [X21 + 0x73F]
	0x03B21E60 MOV X20, X0
	0x03B21E64 MOV X19, X8
	0x03B21E68 TBNZ X9, 0x0, 0x3B21EE0
	0x03B21E6C ADRP X0, 0x638000
	0x03B21E70 LDR X0, [X0 + 0xB98]
	0x03B21E74 BL 0x1C16CF4
	0x03B21E78 ADRP X0, 0x5D8000
	0x03B21E7C LDR X0, [X0 + 0xDD0]
	0x03B21E80 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x8C2000
	010 Move X25, 0x639000
	011 Move X19, 0x638000
	012 Move X23, 0x639000
	013 Move X22, 0x639000
	014 Move X21, 0x639000
	015 Move X20, 0x639000
	016 Move X25, [X25+2768]
	017 Move W8, [X24+1839]
	018 Move X19, [X19+1384]
	019 Move X23, [X23+2776]
	020 Move X22, [X22+2784]
	021 Move X21, [X21+2792]
	022 Move X20, [X20+2800]
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {47}
	027 Move X0, 0x638000
	028 Move X0, [X0+1384]
	029 Call 0x1C17CF4
	030 Move X0, 0x639000
	031 Move X0, [X0+2776]
	032 Call 0x1C17CF4
	033 Move X0, 0x639000
	034 Move X0, [X0+2800]
	035 Call 0x1C17CF4
	036 Move X0, 0x639000
	037 Move X0, [X0+2792]
	038 Call 0x1C17CF4
	039 Move X0, 0x639000
	040 Move X0, [X0+2768]
	041 Call 0x1C17CF4
	042 Move X0, 0x639000
	043 Move X0, [X0+2784]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X24+1839], W8
	047 Move X0, [X25]
	048 Move W1, 1
	049 Move W2, W31
	050 Move W3, W31
	051 Move X4, X31
	052 Call ProfilerUnsafeUtility.CreateMarker, X0, X1, X2, X3
	053 Move X8, [X19]
	054 Move W1, 1
	055 Move W2, W31
	056 Move W3, W31
	057 Move X8, [X8+184]
	058 Move X4, X31
	059 Move [X8+8], X0
	060 Move X0, [X23]
	061 Call ProfilerUnsafeUtility.CreateMarker, X0, X1, X2, X3
	062 Move X8, [X19]
	063 Move W1, 1
	064 Move W2, W31
	065 Move W3, W31
	066 Move X8, [X8+184]
	067 Move X4, X31
	068 Move [X8+16], X0
	069 Move X0, [X22]
	070 Call ProfilerUnsafeUtility.CreateMarker, X0, X1, X2, X3
	071 Move X8, [X19]
	072 Move W1, 1
	073 Move W2, W31
	074 Move W3, W31
	075 Move X8, [X8+184]
	076 Move X4, X31
	077 Move [X8+24], X0
	078 Move X0, [X21]
	079 Call ProfilerUnsafeUtility.CreateMarker, X0, X1, X2, X3
	080 Move X8, [X19]
	081 Move W1, 1
	082 Move W2, W31
	083 Move W3, W31
	084 Move X8, [X8+184]
	085 Move X4, X31
	086 Move [X8+32], X0
	087 Move X0, [X20]
	088 Call ProfilerUnsafeUtility.CreateMarker, X0, X1, X2, X3
	089 Move X8, [X19]
	090 Move X20, [X31+48]
	091 Move X19, [X31+56]
	092 Move X22, [X31+32]
	093 Move X21, [X31+40]
	094 Move X24, [X31+16]
	095 Move X23, [X31+24]
	096 Move X8, [X8+184]
	097 Move [X8+40], X0
	098 Move X30, [X31+64]
	099 Move X25, [X31+72]
	100 Return 

