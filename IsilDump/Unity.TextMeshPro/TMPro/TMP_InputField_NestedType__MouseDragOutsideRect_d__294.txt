Type: TMPro.TMP_InputField/<MouseDragOutsideRect>d__294

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x03B0E4CC LDR X8, [X8 + 0x528]
	0x03B0E4D0 LDR X0, [X8]
	0x03B0E4D4 BL 0x3C124EC
	0x03B0E4D8 LDR X8, [X20]
	0x03B0E4DC MOV X1, X31
	0x03B0E4E0 LDR X8, [X8 + 0xB8]
	0x03B0E4E4 STR W0, [X8 + 0x40]
	0x03B0E4E8 ADRP X8, 0x64B000
	0x03B0E4EC LDR X8, [X8 + 0x5D0]
	0x03B0E4F0 LDR X0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x03B0E4F4 BL 0x3C124EC

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x03B0E4F8 LDR X8, [X20]
	0x03B0E4FC MOV X1, X31
	0x03B0E500 LDR X8, [X8 + 0xB8]
	0x03B0E504 STR W0, [X8 + 0x44]
	0x03B0E508 ADRP X8, 0x64B000
	0x03B0E50C LDR X8, [X8 + 0x4A0]
	0x03B0E510 LDR X0, [X8]
	0x03B0E514 BL 0x3C124EC
	0x03B0E518 LDR X8, [X20]
	0x03B0E51C MOV X1, X31
	0x03B0E520 LDR X8, [X8 + 0xB8]
	0x03B0E524 STR W0, [X8 + 0x48]
	0x03B0E528 ADRP X8, 0x64B000
	0x03B0E52C LDR X8, [X8 + 0x618]
	0x03B0E530 LDR X0, [X8]
	0x03B0E534 BL 0x3C124EC
	0x03B0E538 LDR X8, [X20]
	0x03B0E53C MOV X1, X31
	0x03B0E540 LDR X8, [X8 + 0xB8]
	0x03B0E544 STR W0, [X8 + 0x4C]
	0x03B0E548 ADRP X8, 0x64B000
	0x03B0E54C LDR X8, [X8 + 0x568]
	0x03B0E550 LDR X0, [X8]
	0x03B0E554 BL 0x3C124EC
	0x03B0E558 LDR X8, [X20]
	0x03B0E55C MOV X1, X31
	0x03B0E560 LDR X8, [X8 + 0xB8]
	0x03B0E564 STR W0, [X8 + 0x50]
	0x03B0E568 ADRP X8, 0x64B000
	0x03B0E56C LDR X8, [X8 + 0x530]
	0x03B0E570 LDR X0, [X8]
	0x03B0E574 BL 0x3C124EC
	0x03B0E578 LDR X8, [X20]
	0x03B0E57C MOV X1, X31
	0x03B0E580 LDR X8, [X8 + 0xB8]
	0x03B0E584 STR W0, [X8 + 0x54]
	0x03B0E588 ADRP X8, 0x64B000
	0x03B0E58C LDR X8, [X8 + 0x5C8]
	0x03B0E590 LDR X0, [X8]
	0x03B0E594 BL 0x3C124EC
	0x03B0E598 LDR X8, [X20]
	0x03B0E59C MOV X1, X31
	0x03B0E5A0 LDR X8, [X8 + 0xB8]
	0x03B0E5A4 STR W0, [X8 + 0x58]
	0x03B0E5A8 ADRP X8, 0x64B000
	0x03B0E5AC LDR X8, [X8 + 0x570]
	0x03B0E5B0 LDR X0, [X8]
	0x03B0E5B4 BL 0x3C124EC
	0x03B0E5B8 LDR X8, [X20]
	0x03B0E5BC MOV X1, X31
	0x03B0E5C0 LDR X8, [X8 + 0xB8]
	0x03B0E5C4 STR W0, [X8 + 0x5C]
	0x03B0E5C8 ADRP X8, 0x64B000
	0x03B0E5CC LDR X8, [X8 + 0x560]
	0x03B0E5D0 LDR X0, [X8]
	0x03B0E5D4 BL 0x3C124EC
	0x03B0E5D8 LDR X8, [X20]
	0x03B0E5DC MOV X1, X31
	0x03B0E5E0 LDR X8, [X8 + 0xB8]
	0x03B0E5E4 STR W0, [X8 + 0x60]
	0x03B0E5E8 ADRP X8, 0x64B000
	0x03B0E5EC LDR X8, [X8 + 0x5B0]
	0x03B0E5F0 LDR X0, [X8]
	0x03B0E5F4 BL 0x3C124EC
	0x03B0E5F8 LDR X8, [X20]
	0x03B0E5FC MOV X1, X31
	0x03B0E600 LDR X8, [X8 + 0xB8]
	0x03B0E604 STR W0, [X8 + 0x64]
	0x03B0E608 ADRP X8, 0x64B000
	0x03B0E60C LDR X8, [X8 + 0x4A8]
	0x03B0E610 LDR X0, [X8]
	0x03B0E614 BL 0x3C124EC
	0x03B0E618 LDR X8, [X20]
	0x03B0E61C MOV X1, X31
	0x03B0E620 LDR X8, [X8 + 0xB8]
	0x03B0E624 STR W0, [X8 + 0x68]
	0x03B0E628 ADRP X8, 0x64B000
	0x03B0E62C LDR X8, [X8 + 0x548]
	0x03B0E630 LDR X0, [X8]
	0x03B0E634 BL 0x3C124EC
	0x03B0E638 LDR X8, [X20]
	0x03B0E63C MOV X1, X31
	0x03B0E640 LDR X8, [X8 + 0xB8]
	0x03B0E644 STR W0, [X8 + 0x6C]
	0x03B0E648 ADRP X8, 0x64B000
	0x03B0E64C LDR X8, [X8 + 0x4D8]
	0x03B0E650 LDR X0, [X8]
	0x03B0E654 BL 0x3C124EC
	0x03B0E658 LDR X8, [X20]
	0x03B0E65C MOV X1, X31
	0x03B0E660 LDR X8, [X8 + 0xB8]
	0x03B0E664 STR W0, [X8 + 0x70]
	0x03B0E668 ADRP X8, 0x64B000
	0x03B0E66C LDR X8, [X8 + 0x558]
	0x03B0E670 LDR X0, [X8]
	0x03B0E674 BL 0x3C124EC
	0x03B0E678 LDR X8, [X20]
	0x03B0E67C MOV X1, X31
	0x03B0E680 LDR X8, [X8 + 0xB8]
	0x03B0E684 STR W0, [X8 + 0x88]
	0x03B0E688 ADRP X8, 0x64B000
	0x03B0E68C LDR X8, [X8 + 0x538]
	0x03B0E690 LDR X0, [X8]
	0x03B0E694 BL 0x3C124EC
	0x03B0E698 LDR X8, [X20]
	0x03B0E69C MOV X1, X31
	0x03B0E6A0 LDR X8, [X8 + 0xB8]
	0x03B0E6A4 STR W0, [X8 + 0x8C]
	0x03B0E6A8 ADRP X8, 0x64B000
	0x03B0E6AC LDR X8, [X8 + 0x5A0]
	0x03B0E6B0 LDR X0, [X8]
	0x03B0E6B4 BL 0x3C124EC
	0x03B0E6B8 LDR X8, [X20]
	0x03B0E6BC MOV X1, X31
	0x03B0E6C0 LDR X8, [X8 + 0xB8]
	0x03B0E6C4 STR W0, [X8 + 0x90]
	0x03B0E6C8 ADRP X8, 0x64B000
	0x03B0E6CC LDR X8, [X8 + 0x580]
	0x03B0E6D0 LDR X0, [X8]
	0x03B0E6D4 BL 0x3C124EC
	0x03B0E6D8 LDR X8, [X20]
	0x03B0E6DC MOV X1, X31
	0x03B0E6E0 LDR X8, [X8 + 0xB8]
	0x03B0E6E4 STR W0, [X8 + 0x94]
	0x03B0E6E8 ADRP X8, 0x64B000
	0x03B0E6EC LDR X8, [X8 + 0x5E8]
	0x03B0E6F0 LDR X0, [X8]
	0x03B0E6F4 BL 0x3C124EC
	0x03B0E6F8 LDR X8, [X20]
	0x03B0E6FC MOV X1, X31
	0x03B0E700 LDR X8, [X8 + 0xB8]
	0x03B0E704 STR W0, [X8 + 0x74]
	0x03B0E708 ADRP X8, 0x64B000
	0x03B0E70C LDR X8, [X8 + 0x4E0]
	0x03B0E710 LDR X0, [X8]
	0x03B0E714 BL 0x3C124EC
	0x03B0E718 LDR X8, [X20]
	0x03B0E71C MOV X1, X31

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x8D5000
	011 Move W8, [X20+1651]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x63C000
	018 Move X0, [X0+1720]
	019 Call 0x1C17CF4
	020 Move X0, 0x5EF000
	021 Move X0, [X0+2464]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+1651], W8
	025 Move [X31+40], X31
	026 Move W8, [X19+16]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X20, [X19+32]
	029 Move TEMP, 0
	030 Not TEMP
	031 Move W8, TEMP
	032 Move [X19+16], W8
	033 Compare X20, 0
	034 JumpIfEqual {150}
	035 Move W8, [X20+626]
	036 Compare W8, 0
	037 JumpIfEqual {90}
	038 Move W8, [X20+627]
	039 Compare W8, 0
	040 JumpIfEqual {90}
	041 Move X0, [X19+40]
	042 Compare X0, 0
	043 JumpIfEqual {150}
	044 Move X21, [X20+272]
	045 Move V8, [X0+260]
	046 Move V9, [X0+264]
	047 Move X1, X31
	048 Call PointerEventData.get_pressEventCamera, X0
	049 Move X8, 0x63C000
	050 Move X8, [X8+1720]
	051 Move X22, X0
	052 Move X8, [X8]
	053 Move W9, [X8+224]
	054 Compare W9, 0
	055 JumpIfNotEqual {58}
	056 Move X0, X8
	057 Call 0x1C17DFC
	058 Add X2, X31, 40
	059 Move X0, X21
	060 Move V0, V8
	061 Move V1, V9
	062 Move X1, X22
	063 Move X3, X31
	064 Call RectTransformUtility.ScreenPointToLocalPointInRectangle, X0, X1, X2, X3
	065 Move X0, [X20+272]
	066 Compare X0, 0
	067 JumpIfEqual {150}
	068 Move X1, X31
	069 Call RectTransform.get_rect, X0
	070 Move X0, X20
	071 Move X1, X31
	072 Move V8, V0
	073 Move V9, V1
	074 Move V10, V2
	075 Move V11, V3
	076 Call TMP_InputField.get_multiLine, X0
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {92}
	081 Move V0, [X31+44]
	082 Add S1, S11, S9
	083 NotImplemented "Instruction FCMP not yet implemented."
	084 Move W1, 1
	085 Move W2, 1
	086 Move X0, X20
	087 Move X3, X31
	088 Call TMP_InputField.MoveUp, X0, X1, X2
	089 Move W0, W31
	090 Move W0, W31
	091 Move [X20+648], X31
	092 Move V0, [X31+40]
	093 NotImplemented "Instruction FCMP not yet implemented."
	094 Move W1, 1
	095 Move X0, X20
	096 Move W2, W31
	097 Move X3, X31
	098 Call TMP_InputField.MoveLeft, X0, X1, X2
	099 NotImplemented "Instruction FCMP not yet implemented."
	100 Move W1, 1
	101 Move W2, 1
	102 Move X0, X20
	103 Move X3, X31
	104 Call TMP_InputField.MoveDown, X0, X1, X2
	105 Add S1, S10, S8
	106 NotImplemented "Instruction FCMP not yet implemented."
	107 Move W1, 1
	108 Move X0, X20
	109 Move W2, W31
	110 Move X3, X31
	111 Call TMP_InputField.MoveRight, X0, X1, X2
	112 Move X0, X20
	113 Move X1, X31
	114 Call TMP_InputField.UpdateLabel, X0
	115 Move X0, X20
	116 Move X1, X31
	117 Call TMP_InputField.get_multiLine, X0
	118 Move X8, -50475008
	119 Move X9, -50475008
	120 Move V0, [X8+512]
	121 Move V1, [X9+188]
	122 Move X21, [X20+672]
	123 And W31, W0, 1
	124 NotImplemented "Instruction FCSEL not yet implemented."
	125 Compare X21, 0
	126 JumpIfEqual {128}
	127 Move [X21+16], S8
	128 Move X8, 0x5EF000
	129 Move X8, [X8+2464]
	130 Move X0, [X8]
	131 Call 0x1C17F10
	132 Move V0, V8
	133 Move X1, X31
	134 Move X21, X0
	135 Call WaitForSecondsRealtime..ctor, X0, V0
	136 Move [X20+672], X21
	137 Move W0, 1
	138 Move [X19+24], X21
	139 Move [X19+16], W0
	140 Move X20, [X31+64]
	141 Move X19, [X31+72]
	142 Move X22, [X31+48]
	143 Move X21, [X31+56]
	144 Move X30, [X31+32]
	145 Move D9, [X31+16]
	146 Move D8, [X31+24]
	147 Move D11, [X31+80]
	148 Move D10, [X31+88]
	149 Return X0
	150 Call 0x1C17F20

Method: System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()

Disassembly:
	0x03B0E720 LDR X8, [X8 + 0xB8]
	0x03B0E724 STR W0, [X8 + 0x78]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x03B0E728 ADRP X8, 0x64B000
	0x03B0E72C LDR X8, [X8 + 0x578]
	0x03B0E730 LDR X0, [X8]
	0x03B0E734 BL 0x3C124EC
	0x03B0E738 LDR X8, [X20]
	0x03B0E73C MOV X1, X31
	0x03B0E740 LDR X8, [X8 + 0xB8]
	0x03B0E744 STR W0, [X8 + 0x7C]
	0x03B0E748 ADRP X8, 0x64B000
	0x03B0E74C LDR X8, [X8 + 0x500]
	0x03B0E750 LDR X0, [X8]
	0x03B0E754 BL 0x3C124EC
	0x03B0E758 LDR X8, [X20]
	0x03B0E75C MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x5E6000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0x64C000
	011 Move X0, [X0+1000]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x03B0E760 LDR X8, [X8 + 0xB8]
	0x03B0E764 STR W0, [X8 + 0x80]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

