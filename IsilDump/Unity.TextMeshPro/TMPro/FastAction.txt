Type: TMPro.FastAction

Method: System.Void Add(System.Action rhs)

Disassembly:
	0x03ACB884 CBZ X22, 0x3ACB9DC
	0x03ACB888 ADRP X8, 0x632000
	0x03ACB88C LDR X8, [X8 + 0x870]
	0x03ACB890 MOV W23, W0
	0x03ACB894 ADD X2, X31, 0xC
	0x03ACB898 MOV X0, X22
	0x03ACB89C LDR X3, [X8]
	0x03ACB8A0 MOV W1, W23
	0x03ACB8A4 BL 0x2A0BC68
	0x03ACB8A8 TBNZ X0, 0x0, 0x3ACB9C4
	0x03ACB8AC ADRP X8, 0x683000
	0x03ACB8B0 LDR X8, [X8 + 0xD78]
	0x03ACB8B4 MOV X0, X22
	0x03ACB8B8 LDR X1, [X8]
	0x03ACB8BC BL 0x2A0A118
	0x03ACB8C0 ADRP X8, 0x652000
	0x03ACB8C4 LDR X8, [X8 + 0x8B0]
	0x03ACB8C8 MOV W2, W0
	0x03ACB8CC STR W0, [X31 + 0xC]
	0x03ACB8D0 MOV X0, X22
	0x03ACB8D4 LDR X3, [X8]
	0x03ACB8D8 MOV W1, W23
	0x03ACB8DC BL 0x2A0A330
	0x03ACB8E0 LDR X9, [X19]
	0x03ACB8E4 CBZ X9, 0x3ACB9DC
	0x03ACB8E8 LDR W8, [X31 + 0xC]
	0x03ACB8EC LDR W10, [X9 + 0x18]
	0x03ACB8F0 CMP W8, W10
	0x03ACB8F4 B.LT 0x3ACB928
	0x03ACB8F8 ADD W0, W8, 0x1
	0x03ACB8FC MOV X1, X31
	0x03ACB900 BL 0x3C2B340
	0x03ACB904 ADRP X8, 0x68D000
	0x03ACB908 LDR X8, [X8 + 0x540]
	0x03ACB90C MOV W1, W0
	0x03ACB910 MOV X0, X19
	0x03ACB914 LDR X2, [X8]
	0x03ACB918 BL 0x21167D0
	0x03ACB91C LDR X9, [X19]
	0x03ACB920 CBZ X9, 0x3ACB9DC
	0x03ACB924 LDR W8, [X31 + 0xC]
	0x03ACB928 LDR W10, [X9 + 0x18]
	0x03ACB92C CMP W8, W10
	0x03ACB930 B.CS 0x3ACB9E0
	0x03ACB934 MOVZ W11, 0x38
	0x03ACB938 SMADDL X11, X8, X11, X9
	0x03ACB93C STR W8, [X11 + 0x20]
	0x03ACB940 LDRSW X8, [X31 + 0xC]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x918000
	006 Move W8, [X21+1194]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x68E000
	014 Move X0, [X0+1080]
	015 Call 0x1C17CF4
	016 Move X0, 0x68E000
	017 Move X0, [X0+1088]
	018 Call 0x1C17CF4
	019 Move X0, 0x68E000
	020 Move X0, [X0+1096]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1194], W8
	024 Move X0, [X20+24]
	025 Compare X0, 0
	026 JumpIfEqual {64}
	027 Move X8, 0x68E000
	028 Move X8, [X8+1080]
	029 Move X1, X19
	030 Move X2, [X8]
	031 Call Dictionary`2<Object, Object>.ContainsKey, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {41}
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return 
	041 Move X0, [X20+16]
	042 Compare X0, 0
	043 JumpIfEqual {64}
	044 Move X8, 0x68E000
	045 Move X20, [X20+24]
	046 Move X8, [X8+1096]
	047 Move X1, X19
	048 Move X2, [X8]
	049 Call LinkedList`1<Object>.AddLast, X0, X1
	050 Compare X20, 0
	051 JumpIfEqual {64}
	052 Move X8, 0x68E000
	053 Move X8, [X8+1088]
	054 Move X2, X0
	055 Move X0, X20
	056 Move X1, X19
	057 Move X3, [X8]
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Call Dictionary`2<Object, Object>.set_Item, X0, X1, X2
	063 Return 
	064 Call 0x1C17F20

Method: System.Void Remove(System.Action rhs)

Disassembly:
	0x03ACB944 CMP W8, W10
	0x03ACB948 B.CS 0x3ACB9E0
	0x03ACB94C LDR X10, [X9 + 0x28]
	0x03ACB950 MOVZ W11, 0x38
	0x03ACB954 MADD X9, X8, X11, X9
	0x03ACB958 STR X10, [X9 + 0x28]
	0x03ACB95C LDR X9, [X19]
	0x03ACB960 CBZ X9, 0x3ACB9DC
	0x03ACB964 LDR W10, [X9 + 0x18]
	0x03ACB968 CMP W8, W10
	0x03ACB96C B.CS 0x3ACB9E0
	0x03ACB970 MOVZ W10, 0x38
	0x03ACB974 MADD X9, X8, X10, X9
	0x03ACB978 STR X21, [X9 + 0x30]
	0x03ACB97C LDR X9, [X19]
	0x03ACB980 CBZ X9, 0x3ACB9DC
	0x03ACB984 LDR W10, [X9 + 0x18]
	0x03ACB988 CMP W8, W10
	0x03ACB98C B.CS 0x3ACB9E0
	0x03ACB990 MOVZ W10, 0x38
	0x03ACB994 MADD X9, X8, X10, X9
	0x03ACB998 STR X20, [X9 + 0x38]
	0x03ACB99C LDR X9, [X19]
	0x03ACB9A0 CBZ X9, 0x3ACB9DC
	0x03ACB9A4 LDR W10, [X9 + 0x18]
	0x03ACB9A8 CMP W8, W10
	0x03ACB9AC B.CS 0x3ACB9E0
	0x03ACB9B0 MOVZ W10, 0x38
	0x03ACB9B4 MOVZ W11, 0x1
	0x03ACB9B8 MADD X8, X8, X10, X9
	0x03ACB9BC STRB W11, [X8 + 0x40]
	0x03ACB9C0 STR W31, [X8 + 0x54]
	0x03ACB9C4 LDR W0, [X31 + 0xC]
	0x03ACB9C8 LDP X20, X19, [X31 + 0x30]
	0x03ACB9CC LDP X22, X21, [X31 + 0x20]
	0x03ACB9D0 LDP X30, X23, [X31 + 0x10]
	0x03ACB9D4 ADD X31, X31, 0x40
	0x03ACB9D8 RET
	0x03ACB9DC BL 0x1C16F20
	0x03ACB9E0 BL 0x1C16F28
	0x03ACB9E4 LDRB W0, [X0 + 0x20]
	0x03ACB9E8 RET
	0x03ACB9EC AND W8, W1, 0x1
	0x03ACB9F0 STRB W8, [X0 + 0x20]
	0x03ACB9F4 RET
	0x03ACB9F8 LDP S0, S1, [X0 + 0x24]
	0x03ACB9FC RET
	0x03ACBA00 STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x918000
	007 Move W8, [X21+1195]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x68E000
	015 Move X0, [X0+1104]
	016 Call 0x1C17CF4
	017 Move X0, 0x68E000
	018 Move X0, [X0+1112]
	019 Call 0x1C17CF4
	020 Move X0, 0x68E000
	021 Move X0, [X0+1120]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1195], W8
	025 Move [X31+8], X31
	026 Move X0, [X19+24]
	027 Compare X0, 0
	028 JumpIfEqual {61}
	029 Move X8, 0x68E000
	030 Move X8, [X8+1112]
	031 Add X2, X31, 8
	032 Move X1, X20
	033 Move X3, [X8]
	034 Call Dictionary`2<Object, Object>.TryGetValue, X0, X1, X2
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {55}
	039 Move X0, [X19+24]
	040 Compare X0, 0
	041 JumpIfEqual {61}
	042 Move X8, 0x68E000
	043 Move X8, [X8+1104]
	044 Move X1, X20
	045 Move X2, [X8]
	046 Call Dictionary`2<Object, Object>.Remove, X0, X1
	047 Move X0, [X19+16]
	048 Compare X0, 0
	049 JumpIfEqual {61}
	050 Move X8, 0x68E000
	051 Move X1, [X31+8]
	052 Move X8, [X8+1120]
	053 Move X2, [X8]
	054 Call LinkedList`1<Object>.Remove, X0, X1
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X30, [X31+16]
	058 Move X21, [X31+24]
	059 Add X31, X31, 48
	060 Return 
	061 Call 0x1C17F20

Method: System.Void Call()

Disassembly:
	0x03ACBA04 LDP S2, S3, [X0 + 0x24]
	0x03ACBA08 ADRP X8, 0xFFFFFFFFFD01E000
	0x03ACBA0C LDR V4, [X8 + 0xF20]
	0x03ACBA10 FSUB S2, S2, S0
	0x03ACBA14 FSUB S3, S3, S1
	0x03ACBA18 FMUL S2, S2, S2
	0x03ACBA1C FMUL S3, S3, S3
	0x03ACBA20 FADD S2, S2, S3
	0x03ACBA24 FCMP S2, S4
	0x03ACBA28 B.MI 0x3ACBA50
	0x03ACBA2C MOV X19, X0
	0x03ACBA30 STP S0, S1, [X0 + 0x24]
	0x03ACBA34 BL 0x3ACBA58
	0x03ACBA38 MOVZ W8, 0x1
	0x03ACBA3C STR W0, [X19 + 0x2C]
	0x03ACBA40 STRB W8, [X19 + 0x20]
	0x03ACBA44 MOV X0, X19
	0x03ACBA48 LDP X30, X19, [X31], #0x10
	0x03ACBA4C B 0x3ACBB50
	0x03ACBA50 LDP X30, X19, [X31], #0x10
	0x03ACBA54 RET
	0x03ACBA58 FMOV S2, -1
	0x03ACBA5C ADRP X8, 0xFFFFFFFFFD01E000
	0x03ACBA60 FADD S4, S1, S2
	0x03ACBA64 LDR V2, [X8 + 0xF20]
	0x03ACBA68 FMUL S3, S0, S0
	0x03ACBA6C FMUL S5, S4, S4
	0x03ACBA70 FADD S4, S3, S5
	0x03ACBA74 FCMP S4, S2
	0x03ACBA78 B.PL 0x3ACBA84
	0x03ACBA7C MOV W0, W31
	0x03ACBA80 RET
	0x03ACBA84 FMOV S4, -0.5
	0x03ACBA88 FADD S4, S0, S4
	0x03ACBA8C FMUL S4, S4, S4
	0x03ACBA90 FADD S6, S4, S5
	0x03ACBA94 FCMP S6, S2
	0x03ACBA98 B.PL 0x3ACBAA4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x918000
	005 Move W8, [X20+1196]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0x68E000
	012 Move X0, [X0+1128]
	013 Call 0x1C17CF4
	014 Move X0, 0x68E000
	015 Move X0, [X0+1136]
	016 Call 0x1C17CF4
	017 Move X0, 0x68E000
	018 Move X0, [X0+1144]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1196], W8
	022 Move X8, [X19+16]
	023 Compare X8, 0
	024 JumpIfEqual {47}
	025 Move X19, [X8+16]
	026 Compare X19, 0
	027 JumpIfEqual {43}
	028 Move X20, 0x68E000
	029 Move X20, [X20+1128]
	030 Move X8, [X19+40]
	031 Compare X8, 0
	032 JumpIfEqual {47}
	033 Move X9, [X8+24]
	034 Move X0, [X8+64]
	035 Move X1, [X8+40]
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Move X1, [X20]
	038 Move X0, X19
	039 Call LinkedListNode`1<Object>.get_Next, X0
	040 Move X19, X0
	041 Compare X0, 0
	042 JumpIfNotEqual {30}
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Return 
	047 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03ACBA9C MOVZ W0, 0x1
	0x03ACBAA0 RET
	0x03ACBAA4 FMOV S6, -1
	0x03ACBAA8 FADD S0, S0, S6
	0x03ACBAAC FMUL S0, S0, S0
	0x03ACBAB0 FADD S5, S0, S5
	0x03ACBAB4 FCMP S5, S2
	0x03ACBAB8 B.PL 0x3ACBAC4
	0x03ACBABC MOVZ W0, 0x2
	0x03ACBAC0 RET
	0x03ACBAC4 FMOV S5, -0.5
	0x03ACBAC8 FADD S5, S1, S5
	0x03ACBACC FMUL S5, S5, S5
	0x03ACBAD0 FADD S6, S3, S5
	0x03ACBAD4 FCMP S6, S2
	0x03ACBAD8 B.PL 0x3ACBAE4
	0x03ACBADC MOVZ W0, 0x3
	0x03ACBAE0 RET
	0x03ACBAE4 FADD S6, S4, S5
	0x03ACBAE8 FCMP S6, S2
	0x03ACBAEC B.PL 0x3ACBAF8
	0x03ACBAF0 MOVZ W0, 0x4
	0x03ACBAF4 RET
	0x03ACBAF8 FADD S5, S0, S5
	0x03ACBAFC FCMP S5, S2
	0x03ACBB00 B.PL 0x3ACBB0C
	0x03ACBB04 MOVZ W0, 0x5
	0x03ACBB08 RET
	0x03ACBB0C FMUL S1, S1, S1
	0x03ACBB10 FADD S3, S3, S1
	0x03ACBB14 FCMP S3, S2
	0x03ACBB18 B.PL 0x3ACBB24
	0x03ACBB1C MOVZ W0, 0x6
	0x03ACBB20 RET
	0x03ACBB24 FADD S3, S1, S4
	0x03ACBB28 FCMP S3, S2
	0x03ACBB2C B.PL 0x3ACBB38
	0x03ACBB30 MOVZ W0, 0x7
	0x03ACBB34 RET
	0x03ACBB38 FADD S0, S1, S0
	0x03ACBB3C MOVZ W8, 0x9
	0x03ACBB40 FCMP S0, S2
	0x03ACBB44 MOVZ W9, 0x8
	0x03ACBB48 CSEL W0, W9, W8, MI
	0x03ACBB4C RET
	0x03ACBB50 STP X30, X21, [X31 - 0x20]!
	0x03ACBB54 STP X20, X19, [X31 + 0x10]
	0x03ACBB58 ADRP X20, 0x917000
	0x03ACBB5C ADRP X21, 0x628000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x918000
	009 Move X24, 0x68E000
	010 Move X20, 0x68E000
	011 Move X22, 0x68E000
	012 Move X21, 0x68E000
	013 Move W8, [X23+1197]
	014 Move X24, [X24+1152]
	015 Move X20, [X20+1160]
	016 Move X22, [X22+1168]
	017 Move X21, [X21+1176]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x68E000
	024 Move X0, [X0+1176]
	025 Call 0x1C17CF4
	026 Move X0, 0x68E000
	027 Move X0, [X0+1168]
	028 Call 0x1C17CF4
	029 Move X0, 0x68E000
	030 Move X0, [X0+1160]
	031 Call 0x1C17CF4
	032 Move X0, 0x68E000
	033 Move X0, [X0+1152]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X23+1197], W8
	037 Move X0, [X24]
	038 Call 0x1C17F10
	039 Move X1, [X20]
	040 Move X20, X0
	041 Call LinkedList`1<Object>..ctor, X0
	042 Move [X19+16], X20
	043 Move X0, [X22]
	044 Call 0x1C17F10
	045 Move X1, [X21]
	046 Move X20, X0
	047 Call Dictionary`2<Object, Object>..ctor, X0
	048 Move [X19+24], X20
	049 Move X0, X19
	050 Move X20, [X31+48]
	051 Move X19, [X31+56]
	052 Move X22, [X31+32]
	053 Move X21, [X31+40]
	054 Move X24, [X31+16]
	055 Move X23, [X31+24]
	056 Move X1, X31
	057 Move X30, [X31+64]
	058 Call Object..ctor, X0
	059 Return 

