Type: TMPro.TMP_FontAssetUtilities

Method: System.Void .cctor()

Disassembly:
	0x03AEC184 CBZ X0, 0x3AEC1F4
	0x03AEC188 LDR X8, [X21]
	0x03AEC18C LDR X19, [X0 + 0x28]
	0x03AEC190 LDR W9, [X8 + 0xE0]
	0x03AEC194 CBNZ W9, 0x3AEC1A0
	0x03AEC198 MOV X0, X8
	0x03AEC19C BL 0x1C16DFC
	0x03AEC1A0 MOV X0, X19
	0x03AEC1A4 MOV X1, X31
	0x03AEC1A8 BL 0x3C38948
	0x03AEC1AC TBZ X0, 0x0, 0x3AEC1E4
	0x03AEC1B0 LDR X0, [X20]
	0x03AEC1B4 LDR W8, [X0 + 0xE0]
	0x03AEC1B8 CBNZ W8, 0x3AEC1C0
	0x03AEC1BC BL 0x1C16DFC
	0x03AEC1C0 MOV X0, X31
	0x03AEC1C4 BL 0x3E4FF90
	0x03AEC1C8 CBZ X0, 0x3AEC1F4
	0x03AEC1CC LDR X0, [X0 + 0x28]
	0x03AEC1D0 CBZ X0, 0x3AEC1F4
	0x03AEC1D4 LDP X20, X19, [X31 + 0x10]
	0x03AEC1D8 MOV X1, X31
	0x03AEC1DC LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x8F7000
	005 Move X20, 0x66D000
	006 Move W8, [X19+1478]
	007 Move X20, [X20+1560]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x66D000
	013 Move X0, [X0+1560]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1478], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call Object..ctor, X0
	022 Move X8, [X20]
	023 Move X8, [X8+184]
	024 Move [X8], X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 

Method: TMPro.TMP_FontAssetUtilities get_instance()

Disassembly:
	0x03AEC1E8 MOV X0, X31
	0x03AEC1EC LDP X30, X21, [X31], #0x20
	0x03AEC1F0 RET
	0x03AEC1F4 BL 0x1C16F20
	0x03AEC1F8 STR X30, [X31 - 0x20]!
	0x03AEC1FC STP X20, X19, [X31 + 0x10]
	0x03AEC200 ADRP X20, 0x8F6000
	0x03AEC204 ADRP X19, 0x607000
	0x03AEC208 LDRB W8, [X20 + 0x5D1]
	0x03AEC20C LDR X19, [X19 + 0x598]
	0x03AEC210 TBNZ X8, 0x0, 0x3AEC228
	0x03AEC214 ADRP X0, 0x607000
	0x03AEC218 LDR X0, [X0 + 0x598]
	0x03AEC21C BL 0x1C16CF4
	0x03AEC220 MOVZ W8, 0x1
	0x03AEC224 STRB W8, [X20 + 0x5D1]
	0x03AEC228 BL 0x3AEC0E8
	0x03AEC22C LDR X8, [X19]
	0x03AEC230 MOV X19, X0
	0x03AEC234 LDR W9, [X8 + 0xE0]
	0x03AEC238 CBNZ W9, 0x3AEC244
	0x03AEC23C MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8F7000
	005 Move X19, 0x66D000
	006 Move W8, [X20+1479]
	007 Move X19, [X19+1560]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x66D000
	013 Move X0, [X0+1560]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1479], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X30, [X31+32]
	028 Return X0

Method: TMPro.TMP_Character GetCharacterFromFontAsset(System.UInt32 unicode, TMPro.TMP_FontAsset sourceFontAsset, System.Boolean includeFallbacks, TMPro.FontStyles fontStyle, TMPro.FontWeight fontWeight, out System.Boolean isAlternativeTypeface)

Disassembly:
	0x03AEC240 BL 0x1C16DFC
	0x03AEC244 MOV X0, X19
	0x03AEC248 MOV X1, X31
	0x03AEC24C MOV X2, X31
	0x03AEC250 BL 0x3C354F8
	0x03AEC254 TBZ X0, 0x0, 0x3AEC278
	0x03AEC258 BL 0x3AEC0E8
	0x03AEC25C CBZ X0, 0x3AEC288
	0x03AEC260 LDR X8, [X0]
	0x03AEC264 LDP X20, X19, [X31 + 0x10]
	0x03AEC268 LDR X2, [X8 + 0x248]
	0x03AEC26C LDR X1, [X8 + 0x250]
	0x03AEC270 LDR X30, [X31], #0x20
	0x03AEC274 BR X2
	0x03AEC278 LDP X20, X19, [X31 + 0x10]
	0x03AEC27C MOV X0, X31
	0x03AEC280 LDR X30, [X31], #0x20
	0x03AEC284 B 0x3C84EF4
	0x03AEC288 BL 0x1C16F20
	0x03AEC28C STR X30, [X31 - 0x10]!
	0x03AEC290 LDRB W8, [X0 + 0x230]
	0x03AEC294 CBZ W8, 0x3AEC2A0
	0x03AEC298 MOV W0, W31
	0x03AEC29C B 0x3AEC2AC
	0x03AEC2A0 BL 0x3AEC1F8
	0x03AEC2A4 CBZ X0, 0x3AEC2B4
	0x03AEC2A8 LDR W0, [X0 + 0x10]
	0x03AEC2AC LDR X30, [X31], #0x10
	0x03AEC2B0 RET
	0x03AEC2B4 BL 0x1C16F20
	0x03AEC2B8 STP X29, X30, [X31 - 0x60]!
	0x03AEC2BC STP X28, X27, [X31 + 0x10]
	0x03AEC2C0 STP X26, X25, [X31 + 0x20]
	0x03AEC2C4 STP X24, X23, [X31 + 0x30]
	0x03AEC2C8 STP X22, X21, [X31 + 0x40]
	0x03AEC2CC STP X20, X19, [X31 + 0x50]
	0x03AEC2D0 ADRP X20, 0x8F6000
	0x03AEC2D4 ADRP X25, 0x609000
	0x03AEC2D8 ADRP X21, 0x66C000
	0x03AEC2DC ADRP X29, 0x66D000
	0x03AEC2E0 ADRP X28, 0x66D000
	0x03AEC2E4 ADRP X27, 0x66D000
	0x03AEC2E8 ADRP X26, 0x66D000
	0x03AEC2EC ADRP X23, 0x607000
	0x03AEC2F0 ADRP X22, 0x66D000
	0x03AEC2F4 LDR X25, [X25 + 0x278]
	0x03AEC2F8 LDR X21, [X21 + 0xFF8]
	0x03AEC2FC LDR X29, [X29]
	0x03AEC300 LDR X28, [X28 + 0x8]
	0x03AEC304 LDRB W8, [X20 + 0x5D2]
	0x03AEC308 LDR X27, [X27 + 0x10]
	0x03AEC30C LDR X26, [X26 + 0x18]
	0x03AEC310 LDR X23, [X23 + 0x988]
	0x03AEC314 LDR X22, [X22 + 0x20]
	0x03AEC318 MOV X19, X0
	0x03AEC31C ADD X24, X0, 0x1F8
	0x03AEC320 TBNZ X8, 0x0, 0x3AEC398
	0x03AEC324 ADRP X0, 0x66D000
	0x03AEC328 LDR X0, [X0 + 0x20]
	0x03AEC32C BL 0x1C16CF4
	0x03AEC330 ADRP X0, 0x66D000
	0x03AEC334 LDR X0, [X0 + 0x10]
	0x03AEC338 BL 0x1C16CF4
	0x03AEC33C ADRP X0, 0x66C000
	0x03AEC340 LDR X0, [X0 + 0xA58]
	0x03AEC344 BL 0x1C16CF4
	0x03AEC348 ADRP X0, 0x66D000
	0x03AEC34C LDR X0, [X0]
	0x03AEC350 BL 0x1C16CF4
	0x03AEC354 ADRP X0, 0x609000
	0x03AEC358 LDR X0, [X0 + 0x278]
	0x03AEC35C BL 0x1C16CF4
	0x03AEC360 ADRP X0, 0x66C000
	0x03AEC364 LDR X0, [X0 + 0xFF8]
	0x03AEC368 BL 0x1C16CF4
	0x03AEC36C ADRP X0, 0x66D000
	0x03AEC370 LDR X0, [X0 + 0x8]
	0x03AEC374 BL 0x1C16CF4
	0x03AEC378 ADRP X0, 0x66D000
	0x03AEC37C LDR X0, [X0 + 0x18]
	0x03AEC380 BL 0x1C16CF4
	0x03AEC384 ADRP X0, 0x607000
	0x03AEC388 LDR X0, [X0 + 0x988]
	0x03AEC38C BL 0x1C16CF4
	0x03AEC390 MOVZ W8, 0x1

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x8F7000
	011 Move W8, [X25+1480]
	012 Move X19, X5
	013 Move W20, W4
	014 Move W21, W3
	015 Move W23, W2
	016 Move X22, X1
	017 Move W24, W0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {36}
	022 Move X0, 0x60F000
	023 Move X0, [X0+1656]
	024 Call 0x1C17CF4
	025 Move X0, 0x60F000
	026 Move X0, [X0+1672]
	027 Call 0x1C17CF4
	028 Move X0, 0x609000
	029 Move X0, [X0+3592]
	030 Call 0x1C17CF4
	031 Move X0, 0x66D000
	032 Move X0, [X0+1560]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X25+1480], W8
	036 Move X26, 0x66D000
	037 Move X26, [X26+1560]
	038 Move TEMP, X23
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {83}
	042 Move X0, [X26]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {48}
	046 Call 0x1C17DFC
	047 Move X0, [X26]
	048 Move X8, [X0+184]
	049 Move X8, [X8+8]
	050 Compare X8, 0
	051 JumpIfEqual {66}
	052 Move W9, [X0+224]
	053 Compare W9, 0
	054 JumpIfNotEqual {61}
	055 Call 0x1C17DFC
	056 Move X8, [X26]
	057 Move X8, [X8+184]
	058 Move X8, [X8+8]
	059 Compare X8, 0
	060 JumpIfEqual {103}
	061 Move X9, 0x60F000
	062 Move X9, [X9+1656]
	063 Move X0, X8
	064 Move X1, [X9]
	065 Call HashSet`1<Int32>.Clear, X0
	066 Move X8, 0x609000
	067 Move X8, [X8+3592]
	068 Move X0, [X8]
	069 Call 0x1C17F10
	070 Move X8, 0x60F000
	071 Move X8, [X8+1672]
	072 Move X25, X0
	073 Move X1, [X8]
	074 Call HashSet`1<Int32>..ctor, X0
	075 Move X0, [X26]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {81}
	079 Call 0x1C17DFC
	080 Move X0, [X26]
	081 Move X8, [X0+184]
	082 Move [X8+8], X25
	083 Move X0, [X26]
	084 Move W8, [X0+224]
	085 Compare W8, 0
	086 JumpIfNotEqual {88}
	087 Call 0x1C17DFC
	088 And W2, W23, 1
	089 Move W0, W24
	090 Move X1, X22
	091 Move W3, W21
	092 Move W4, W20
	093 Move X5, X19
	094 Move X20, [X31+64]
	095 Move X19, [X31+72]
	096 Move X22, [X31+48]
	097 Move X21, [X31+56]
	098 Move X24, [X31+32]
	099 Move X23, [X31+40]
	100 Move X26, [X31+16]
	101 Move X25, [X31+24]
	102 Move X30, [X31+80]
	103 Call 0x1C17F20

Method: TMPro.TMP_Character GetCharacterFromFontAsset_Internal(System.UInt32 unicode, TMPro.TMP_FontAsset sourceFontAsset, System.Boolean includeFallbacks, TMPro.FontStyles fontStyle, TMPro.FontWeight fontWeight, out System.Boolean isAlternativeTypeface)

Disassembly:
	0x03AEC394 STRB W8, [X20 + 0x5D2]
	0x03AEC398 MOVZ W8, 0x3F800000
	0x03AEC39C MOVZ W9, 0x2A
	0x03AEC3A0 STR W8, [X19 + 0x17C]
	0x03AEC3A4 STRH W9, [X19 + 0x188]
	0x03AEC3A8 LDR X8, [X25]
	0x03AEC3AC MOVZ W9, 0x41600000
	0x03AEC3B0 LDR X8, [X8 + 0xB8]
	0x03AEC3B4 LDR X8, [X8]
	0x03AEC3B8 STR W9, [X19 + 0x1A8]
	0x03AEC3BC STR X8, [X19 + 0x1A0]
	0x03AEC3C0 LDR X0, [X21]
	0x03AEC3C4 BL 0x1C16F10
	0x03AEC3C8 MOV X1, X31
	0x03AEC3CC MOV X20, X0
	0x03AEC3D0 BL 0x3B0D1EC
	0x03AEC3D4 STR X20, [X19 + 0x1B0]
	0x03AEC3D8 LDR X0, [X21]
	0x03AEC3DC BL 0x1C16F10
	0x03AEC3E0 MOV X1, X31
	0x03AEC3E4 MOV X20, X0
	0x03AEC3E8 BL 0x3B0D1EC
	0x03AEC3EC STR X20, [X19 + 0x1B8]
	0x03AEC3F0 LDR X0, [X29]
	0x03AEC3F4 BL 0x1C16F10
	0x03AEC3F8 MOV X1, X31
	0x03AEC3FC MOV X20, X0
	0x03AEC400 BL 0x3B0D27C
	0x03AEC404 STR X20, [X19 + 0x1C0]
	0x03AEC408 LDR X0, [X29]
	0x03AEC40C BL 0x1C16F10
	0x03AEC410 MOV X1, X31
	0x03AEC414 MOV X20, X0
	0x03AEC418 BL 0x3B0D27C
	0x03AEC41C STR X20, [X19 + 0x1C8]
	0x03AEC420 LDR X0, [X28]
	0x03AEC424 BL 0x1C16F10
	0x03AEC428 MOV X1, X31
	0x03AEC42C MOV X20, X0
	0x03AEC430 BL 0x3B0D2C4
	0x03AEC434 STR X20, [X19 + 0x1D0]
	0x03AEC438 LDR X0, [X28]
	0x03AEC43C BL 0x1C16F10
	0x03AEC440 MOV X1, X31
	0x03AEC444 MOV X20, X0
	0x03AEC448 BL 0x3B0D2C4
	0x03AEC44C STR X20, [X19 + 0x1D8]
	0x03AEC450 LDR X0, [X27]
	0x03AEC454 BL 0x1C16F10
	0x03AEC458 MOV X1, X31
	0x03AEC45C MOV X20, X0
	0x03AEC460 BL 0x3B0D234
	0x03AEC464 STR X20, [X19 + 0x1E0]
	0x03AEC468 LDR X0, [X26]
	0x03AEC46C BL 0x1C16F10
	0x03AEC470 MOV X1, X31
	0x03AEC474 MOV X20, X0
	0x03AEC478 BL 0x3B0D30C
	0x03AEC47C ADRP X8, 0xFFFFFFFFFD000000
	0x03AEC480 LDR V0, [X8 + 0x91]
	0x03AEC484 ADRP X8, 0xFFFFFFFFFD000000
	0x03AEC488 LDR V1, [X8 + 0xEE]
	0x03AEC48C STR X20, [X19 + 0x1E8]
	0x03AEC490 STR V0, [X24]
	0x03AEC494 MOVZ X9, 0x999A
	0x03AEC498 STUR V1, [X24 + 0x14]
	0x03AEC49C LDR X8, [X25]
	0x03AEC4A0 MOVK X9, 0x3F590000
	0x03AEC4A4 MOVK X9, 0x1
	0x03AEC4A8 MOVZ W10, 0x1
	0x03AEC4AC LDR X8, [X8 + 0xB8]
	0x03AEC4B0 LDR X8, [X8]
	0x03AEC4B4 STR X9, [X19 + 0x228]
	0x03AEC4B8 STRB W10, [X19 + 0x231]
	0x03AEC4BC MOVZ W9, 0x3F000000
	0x03AEC4C0 STR X8, [X19 + 0x220]
	0x03AEC4C4 LDR X8, [X23]
	0x03AEC4C8 STR W9, [X19 + 0x2B4]
	0x03AEC4CC STRB W10, [X19 + 0x2C8]
	0x03AEC4D0 STRB W10, [X19 + 0x2CA]
	0x03AEC4D4 STR X8, [X19 + 0x290]
	0x03AEC4D8 STRB W10, [X19 + 0x2D8]
	0x03AEC4DC LDR X0, [X22]
	0x03AEC4E0 BL 0x1C16F10
	0x03AEC4E4 MOV X1, X31
	0x03AEC4E8 MOV X20, X0
	0x03AEC4EC BL 0x3C63690
	0x03AEC4F0 STR X20, [X19 + 0x2F0]
	0x03AEC4F4 ADRP X8, 0x66C000
	0x03AEC4F8 LDR X8, [X8 + 0xA58]
	0x03AEC4FC LDR X0, [X8]
	0x03AEC500 LDR W8, [X0 + 0xE0]
	0x03AEC504 CBNZ W8, 0x3AEC50C
	0x03AEC508 BL 0x1C16DFC
	0x03AEC50C MOV X0, X19
	0x03AEC510 MOV X1, X31
	0x03AEC514 BL 0x3E3B678
	0x03AEC518 MOV X0, X19
	0x03AEC51C LDP X20, X19, [X31 + 0x50]
	0x03AEC520 LDP X22, X21, [X31 + 0x40]
	0x03AEC524 LDP X24, X23, [X31 + 0x30]
	0x03AEC528 LDP X26, X25, [X31 + 0x20]
	0x03AEC52C LDP X28, X27, [X31 + 0x10]
	0x03AEC530 LDP X29, X30, [X31], #0x60
	0x03AEC534 B 0x3AEC538
	0x03AEC538 STP X30, X21, [X31 - 0x20]!
	0x03AEC53C STP X20, X19, [X31 + 0x10]
	0x03AEC540 ADRP X21, 0x8F6000
	0x03AEC544 ADRP X20, 0x607000
	0x03AEC548 LDRB W8, [X21 + 0x623]
	0x03AEC54C LDR X20, [X20 + 0x598]
	0x03AEC550 MOV X19, X0
	0x03AEC554 TBNZ X8, 0x0, 0x3AEC56C
	0x03AEC558 ADRP X0, 0x607000
	0x03AEC55C LDR X0, [X0 + 0x598]
	0x03AEC560 BL 0x1C16CF4
	0x03AEC564 MOVZ W8, 0x1
	0x03AEC568 STRB W8, [X21 + 0x623]
	0x03AEC56C LDR X0, [X20]
	0x03AEC570 LDR X20, [X19 + 0x138]
	0x03AEC574 LDR W8, [X0 + 0xE0]
	0x03AEC578 CBNZ W8, 0x3AEC580
	0x03AEC57C BL 0x1C16DFC
	0x03AEC580 MOV X0, X20
	0x03AEC584 MOV X1, X31
	0x03AEC588 MOV X2, X31
	0x03AEC58C BL 0x3C3883C
	0x03AEC590 TBZ X0, 0x0, 0x3AEC5A0
	0x03AEC594 LDP X20, X19, [X31 + 0x10]
	0x03AEC598 LDP X30, X21, [X31], #0x20
	0x03AEC59C RET
	0x03AEC5A0 LDR X0, [X19 + 0x138]
	0x03AEC5A4 CBZ X0, 0x3AEC5C8
	0x03AEC5A8 LDR W8, [X19 + 0x190]
	0x03AEC5AC LDP X20, X19, [X31 + 0x10]
	0x03AEC5B0 MOV X2, X31
	0x03AEC5B4 SUB W8, W8, 0x1
	0x03AEC5B8 CMP W8, 0x2
	0x03AEC5BC CSET W1, CC
	0x03AEC5C0 LDP X30, X21, [X31], #0x20
	0x03AEC5C4 B 0x3AF832C
	0x03AEC5C8 BL 0x1C16F20
	0x03AEC5CC STP X30, X21, [X31 - 0x20]!
	0x03AEC5D0 STP X20, X19, [X31 + 0x10]
	0x03AEC5D4 ADRP X21, 0x8F6000
	0x03AEC5D8 ADRP X20, 0x607000
	0x03AEC5DC LDRB W8, [X21 + 0x5D3]
	0x03AEC5E0 LDR X20, [X20 + 0x598]
	0x03AEC5E4 MOV X19, X0
	0x03AEC5E8 TBNZ X8, 0x0, 0x3AEC60C
	0x03AEC5EC ADRP X0, 0x60E000
	0x03AEC5F0 LDR X0, [X0 + 0x700]
	0x03AEC5F4 BL 0x1C16CF4
	0x03AEC5F8 ADRP X0, 0x607000
	0x03AEC5FC LDR X0, [X0 + 0x598]
	0x03AEC600 BL 0x1C16CF4
	0x03AEC604 MOVZ W8, 0x1
	0x03AEC608 STRB W8, [X21 + 0x5D3]
	0x03AEC60C LDR X0, [X20]
	0x03AEC610 LDR X20, [X19 + 0x268]
	0x03AEC614 LDR W8, [X0 + 0xE0]
	0x03AEC618 CBNZ W8, 0x3AEC620
	0x03AEC61C BL 0x1C16DFC
	0x03AEC620 MOV X0, X20
	0x03AEC624 MOV X1, X31
	0x03AEC628 MOV X2, X31
	0x03AEC62C BL 0x3C3883C
	0x03AEC630 TBZ X0, 0x0, 0x3AEC658
	0x03AEC634 ADRP X8, 0x60E000
	0x03AEC638 LDR X8, [X8 + 0x700]
	0x03AEC63C LDR X0, [X8]
	0x03AEC640 BL 0x1C16F10
	0x03AEC644 MOV X1, X31
	0x03AEC648 MOV X20, X0
	0x03AEC64C BL 0x3C17028
	0x03AEC650 STR X20, [X19 + 0x268]
	0x03AEC654 B 0x3AEC65C
	0x03AEC658 LDR X20, [X19 + 0x268]
	0x03AEC65C MOV X0, X20
	0x03AEC660 LDP X20, X19, [X31 + 0x10]
	0x03AEC664 LDP X30, X21, [X31], #0x20
	0x03AEC668 RET
	0x03AEC66C STP X30, X21, [X31 - 0x20]!
	0x03AEC670 STP X20, X19, [X31 + 0x10]
	0x03AEC674 ADRP X20, 0x8F6000
	0x03AEC678 ADRP X21, 0x607000
	0x03AEC67C LDRB W8, [X20 + 0x5D4]
	0x03AEC680 LDR X21, [X21 + 0x970]
	0x03AEC684 MOV X19, X0
	0x03AEC688 TBNZ X8, 0x0, 0x3AEC6A0
	0x03AEC68C ADRP X0, 0x607000
	0x03AEC690 LDR X0, [X0 + 0x970]
	0x03AEC694 BL 0x1C16CF4
	0x03AEC698 MOVZ W8, 0x1
	0x03AEC69C STRB W8, [X20 + 0x5D4]
	0x03AEC6A0 LDR X0, [X21]
	0x03AEC6A4 LDR W8, [X0 + 0xE0]
	0x03AEC6A8 CBNZ W8, 0x3AEC6B0
	0x03AEC6AC BL 0x1C16DFC
	0x03AEC6B0 MOV X0, X31
	0x03AEC6B4 BL 0x3C01AB0
	0x03AEC6B8 MOV W8, W0
	0x03AEC6BC CMP W0, 0x1F
	0x03AEC6C0 MOVZ W0, 0x1
	0x03AEC6C4 B.HI 0x3AEC6E8
	0x03AEC6C8 MOVZ W9, 0x900
	0x03AEC6CC LSLV W8, W0, W8
	0x03AEC6D0 MOVK W9, 0x80000000
	0x03AEC6D4 ANDS W31, W8, W9, 0x0
	0x03AEC6D8 B.EQ 0x3AEC6E8
	0x03AEC6DC LDRB W8, [X19 + 0x194]
	0x03AEC6E0 CMP W8, 0x0
	0x03AEC6E4 CSET W0, NE
	0x03AEC6E8 LDP X20, X19, [X31 + 0x10]
	0x03AEC6EC LDP X30, X21, [X31], #0x20
	0x03AEC6F0 RET
	0x03AEC6F4 STR X30, [X31 - 0x30]!
	0x03AEC6F8 STP X22, X21, [X31 + 0x10]
	0x03AEC6FC STP X20, X19, [X31 + 0x20]
	0x03AEC700 ADRP X21, 0x8F6000
	0x03AEC704 ADRP X22, 0x607000
	0x03AEC708 LDRB W8, [X21 + 0x5D5]
	0x03AEC70C LDR X22, [X22 + 0x970]
	0x03AEC710 MOV W20, W1
	0x03AEC714 MOV X19, X0
	0x03AEC718 TBNZ X8, 0x0, 0x3AEC73C
	0x03AEC71C ADRP X0, 0x607000
	0x03AEC720 LDR X0, [X0 + 0x970]
	0x03AEC724 BL 0x1C16CF4
	0x03AEC728 ADRP X0, 0x66D000
	0x03AEC72C LDR X0, [X0 + 0x28]
	0x03AEC730 BL 0x1C16CF4
	0x03AEC734 MOVZ W8, 0x1
	0x03AEC738 STRB W8, [X21 + 0x5D5]
	0x03AEC73C LDR X0, [X22]
	0x03AEC740 LDR W8, [X0 + 0xE0]
	0x03AEC744 CBNZ W8, 0x3AEC74C
	0x03AEC748 BL 0x1C16DFC
	0x03AEC74C MOV X0, X31
	0x03AEC750 BL 0x3C01AB0
	0x03AEC754 CMP W0, 0x1F

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X25, 0x8F7000
	015 Move W8, [X25+1481]
	016 Move X19, X5
	017 Move W20, W4
	018 Move W21, W3
	019 Move W24, W2
	020 Move X22, X1
	021 Move W23, W0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {46}
	026 Move X0, 0x66D000
	027 Move X0, [X0+3400]
	028 Call 0x1C17CF4
	029 Move X0, 0x60A000
	030 Move X0, [X0+2520]
	031 Call 0x1C17CF4
	032 Move X0, 0x66D000
	033 Move X0, [X0+1552]
	034 Call 0x1C17CF4
	035 Move X0, 0x66D000
	036 Move X0, [X0+3144]
	037 Call 0x1C17CF4
	038 Move X0, 0x608000
	039 Move X0, [X0+1432]
	040 Call 0x1C17CF4
	041 Move X0, 0x66D000
	042 Move X0, [X0+1560]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X25+1481], W8
	046 Move X26, 0x66D000
	047 Move X26, [X26+3400]
	048 Move [X19], W31
	049 Move [X31+8], X31
	050 Move TEMP, X21
	051 And TEMP, TEMP, 2
	052 Compare TEMP, 2
	053 JumpIfEqual {57}
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Compare X22, 0
	056 JumpIfNotEqual {139}
	057 Compare X22, 0
	058 JumpIfEqual {280}
	059 Move X8, [X22+408]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 NotImplemented "Instruction CMP not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move W9, 9
	066 NotImplemented "Instruction CMP not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W9, 3
	069 NotImplemented "Instruction CINC not yet implemented."
	070 Move W9, 4
	071 Move W10, 6
	072 NotImplemented "Instruction CSEL not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move W10, 5
	075 NotImplemented "Instruction CSEL not yet implemented."
	076 Move W9, 4
	077 Move W10, 2
	078 NotImplemented "Instruction CSEL not yet implemented."
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction CSINC not yet implemented."
	081 Move W9, 7
	082 Move W9, 8
	083 Move W9, 4
	084 Compare X8, 0
	085 JumpIfEqual {280}
	086 Move W10, [X8+24]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Add X8, X8, X9
	089 Move X9, 0x608000
	090 Move X9, [X9+1432]
	091 Add X10, X8, 40
	092 Add X8, X8, 32
	093 And W31, W21, 2
	094 Move X0, [X9]
	095 NotImplemented "Instruction CSEL not yet implemented."
	096 Move X25, [X8]
	097 Move W9, [X0+224]
	098 Compare W9, 0
	099 JumpIfNotEqual {101}
	100 Call 0x1C17DFC
	101 Move X0, X25
	102 Move X1, X31
	103 Move X2, X31
	104 Call Object.op_Inequality, X0, X1
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {139}
	109 Compare X25, 0
	110 JumpIfEqual {280}
	111 Move X0, [X25+200]
	112 Compare X0, 0
	113 JumpIfNotEqual {119}
	114 Move X0, X25
	115 Call TMP_FontAsset.ReadFontAssetDefinition, X0
	116 Move X0, [X25+200]
	117 Compare X0, 0
	118 JumpIfEqual {280}
	119 Move X3, [X26]
	120 Add X2, X31, 8
	121 Move W1, W23
	122 Call Dictionary`2<UInt32, Object>.TryGetValue, X0, X1, X2
	123 Move TEMP, X0
	124 And TEMP, TEMP, 1
	125 Compare TEMP, 1
	126 JumpIfNotEqual {129}
	127 Move W8, 1
	128 Move [X19], W8
	129 Move W8, [X25+72]
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Add X2, X31, 8
	132 Move X0, X25
	133 Move W1, W23
	134 Call TMP_FontAsset.TryAddCharacterInternal, X0, X1, X2
	135 Move TEMP, X0
	136 And TEMP, TEMP, 1
	137 Compare TEMP, 1
	138 JumpIfEqual {127}
	139 Move X0, [X22+200]
	140 Compare X0, 0
	141 JumpIfNotEqual {147}
	142 Move X0, X22
	143 Call TMP_FontAsset.ReadFontAssetDefinition, X0
	144 Move X0, [X22+200]
	145 Compare X0, 0
	146 JumpIfEqual {280}
	147 Move X3, [X26]
	148 Add X2, X31, 8
	149 Move W1, W23
	150 Call Dictionary`2<UInt32, Object>.TryGetValue, X0, X1, X2
	151 Move TEMP, X0
	152 And TEMP, TEMP, 1
	153 Compare TEMP, 1
	154 JumpIfNotEqual {170}
	155 Move X0, [X31+8]
	156 Move X20, [X31+96]
	157 Move X19, [X31+104]
	158 Move X22, [X31+80]
	159 Move X21, [X31+88]
	160 Move X24, [X31+64]
	161 Move X23, [X31+72]
	162 Move X26, [X31+48]
	163 Move X25, [X31+56]
	164 Move X28, [X31+32]
	165 Move X27, [X31+40]
	166 Move X29, [X31+16]
	167 Move X30, [X31+24]
	168 Add X31, X31, 112
	169 Return X0
	170 Move W8, [X22+72]
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Add X2, X31, 8
	173 Move X0, X22
	174 Move W1, W23
	175 Call TMP_FontAsset.TryAddCharacterInternal, X0, X1, X2
	176 Move TEMP, X0
	177 And TEMP, TEMP, 1
	178 Compare TEMP, 1
	179 JumpIfEqual {155}
	180 Move X8, [X31+8]
	181 Move X0, X31
	182 Compare X8, 0
	183 JumpIfNotEqual {156}
	184 Move TEMP, X24
	185 And TEMP, TEMP, 1
	186 Compare TEMP, 1
	187 JumpIfNotEqual {156}
	188 Move X24, [X22+312]
	189 Compare X24, 0
	190 JumpIfEqual {279}
	191 Move W28, [X24+24]
	192 NotImplemented "Instruction CMP not yet implemented."
	193 Move [X31], X19
	194 Move X19, 0x608000
	195 Move X19, [X19+1432]
	196 Move W25, W31
	197 Move X8, 0x66D000
	198 Move X8, [X8+3144]
	199 Move X0, X24
	200 Move W1, W25
	201 Move X2, [X8]
	202 Call List`1<Object>.get_Item, X0, X1
	203 Move X8, [X19]
	204 Move X26, X0
	205 Move W9, [X8+224]
	206 Compare W9, 0
	207 JumpIfNotEqual {210}
	208 Move X0, X8
	209 Call 0x1C17DFC
	210 Move X0, X26
	211 Move X1, X31
	212 Move X2, X31
	213 Call Object.op_Equality, X0, X1
	214 Move TEMP, X0
	215 And TEMP, TEMP, 1
	216 Compare TEMP, 1
	217 JumpIfEqual {277}
	218 Compare X26, 0
	219 JumpIfEqual {280}
	220 Move X8, 0x66D000
	221 Move W27, [X26+24]
	222 Move X8, [X8+1560]
	223 Compare W27, 0
	224 JumpIfNotEqual {232}
	225 Move X0, X26
	226 Move X1, X31
	227 Call Object.GetInstanceID, X0
	228 Move X8, 0x66D000
	229 Move X8, [X8+1560]
	230 Move W27, W0
	231 Move [X26+24], W0
	232 Move X0, [X8]
	233 Move X29, X8
	234 Move W8, [X0+224]
	235 Compare W8, 0
	236 JumpIfNotEqual {239}
	237 Call 0x1C17DFC
	238 Move X0, [X29]
	239 Move X8, [X0+184]
	240 Move X0, [X8+8]
	241 Compare X0, 0
	242 JumpIfEqual {280}
	243 Move X8, 0x60A000
	244 Move X8, [X8+2520]
	245 Move W1, W27
	246 Move X2, [X8]
	247 Call HashSet`1<Int32>.Add, X0, X1
	248 Move TEMP, X0
	249 And TEMP, TEMP, 1
	250 Compare TEMP, 1
	251 JumpIfNotEqual {277}
	252 Move X0, [X22+448]
	253 Compare X0, 0
	254 JumpIfEqual {280}
	255 Move X8, 0x60A000
	256 Move X8, [X8+2520]
	257 Move W1, W27
	258 Move X2, [X8]
	259 Call HashSet`1<Int32>.Add, X0, X1
	260 Move X8, 0x66D000
	261 Move X8, [X8+1560]
	262 Move X0, [X8]
	263 Move W8, [X0+224]
	264 Compare W8, 0
	265 JumpIfNotEqual {267}
	266 Call 0x1C17DFC
	267 Move X5, [X31]
	268 Move W2, 1
	269 Move W0, W23
	270 Move X1, X26
	271 Move W3, W21
	272 Move W4, W20
	273 Call TMP_FontAssetUtilities.GetCharacterFromFontAsset_Internal, X0, X1, X2, X3, X4, X5
	274 Move [X31+8], X0
	275 Compare X0, 0
	276 JumpIfNotEqual {156}
	277 Add W25, W25, 1
	278 NotImplemented "Instruction CMP not yet implemented."
	279 Move X0, X31
	280 Call 0x1C17F20
	281 Call 0x1C17F28

Method: TMPro.TMP_Character GetCharacterFromFontAssets(System.UInt32 unicode, TMPro.TMP_FontAsset sourceFontAsset, System.Collections.Generic.List`1<TMPro.TMP_FontAsset> fontAssets, System.Boolean includeFallbacks, TMPro.FontStyles fontStyle, TMPro.FontWeight fontWeight, out System.Boolean isAlternativeTypeface)

Disassembly:
	0x03AEC758 B.HI 0x3AEC798
	0x03AEC75C MOVZ W8, 0x1
	0x03AEC760 MOVZ W9, 0x900
	0x03AEC764 LSLV W8, W8, W0
	0x03AEC768 MOVK W9, 0x80000000
	0x03AEC76C ANDS W31, W8, W9, 0x0
	0x03AEC770 B.EQ 0x3AEC798
	0x03AEC774 ADRP X8, 0x66D000
	0x03AEC778 LDR X8, [X8 + 0x28]
	0x03AEC77C ADD X0, X19, 0x194
	0x03AEC780 AND W1, W20, 0x1
	0x03AEC784 LDP X20, X19, [X31 + 0x20]
	0x03AEC788 LDR X2, [X8]
	0x03AEC78C LDP X22, X21, [X31 + 0x10]
	0x03AEC790 LDR X30, [X31], #0x30
	0x03AEC794 B 0x2253D58
	0x03AEC798 MOVZ W8, 0x1
	0x03AEC79C STRB W8, [X19 + 0x194]
	0x03AEC7A0 LDP X20, X19, [X31 + 0x20]
	0x03AEC7A4 LDP X22, X21, [X31 + 0x10]
	0x03AEC7A8 LDR X30, [X31], #0x30
	0x03AEC7AC RET
	0x03AEC7B0 STP X30, X21, [X31 - 0x20]!
	0x03AEC7B4 STP X20, X19, [X31 + 0x10]
	0x03AEC7B8 ADRP X20, 0x8F6000
	0x03AEC7BC ADRP X21, 0x607000
	0x03AEC7C0 LDRB W8, [X20 + 0x5D6]
	0x03AEC7C4 LDR X21, [X21 + 0x970]
	0x03AEC7C8 MOV X19, X0
	0x03AEC7CC TBNZ X8, 0x0, 0x3AEC7E4
	0x03AEC7D0 ADRP X0, 0x607000
	0x03AEC7D4 LDR X0, [X0 + 0x970]
	0x03AEC7D8 BL 0x1C16CF4
	0x03AEC7DC MOVZ W8, 0x1
	0x03AEC7E0 STRB W8, [X20 + 0x5D6]
	0x03AEC7E4 LDR X0, [X21]
	0x03AEC7E8 LDR W8, [X0 + 0xE0]
	0x03AEC7EC CBNZ W8, 0x3AEC7F4
	0x03AEC7F0 BL 0x1C16DFC
	0x03AEC7F4 MOV X0, X31
	0x03AEC7F8 BL 0x3C01AB0
	0x03AEC7FC MOV W8, W0
	0x03AEC800 CMP W0, 0x14
	0x03AEC804 B.LE 0x3AEC820
	0x03AEC808 CMP W8, 0x20
	0x03AEC80C B.LE 0x3AEC844
	0x03AEC810 ORR W8, W8, 0x4
	0x03AEC814 CMP W8, 0x26
	0x03AEC818 B.EQ 0x3AEC86C
	0x03AEC81C B 0x3AEC83C
	0x03AEC820 CMP W8, 0x8
	0x03AEC824 B.EQ 0x3AEC86C
	0x03AEC828 CMP W8, 0xB
	0x03AEC82C B.EQ 0x3AEC86C
	0x03AEC830 SUB W8, W8, 0x12
	0x03AEC834 CMP W8, 0x3
	0x03AEC838 B.CC 0x3AEC86C
	0x03AEC83C MOVZ W0, 0x1
	0x03AEC840 B 0x3AEC878
	0x03AEC844 CMP W8, 0x20
	0x03AEC848 MOVZ W0, 0x1
	0x03AEC84C B.HI 0x3AEC878
	0x03AEC850 MOV W8, W8
	0x03AEC854 MOVZ W9, 0x1
	0x03AEC858 LSLV X8, X9, X8
	0x03AEC85C MOVZ X9, 0x82000000
	0x03AEC860 MOVK X9, 0x1
	0x03AEC864 ANDS X31, X8, X9, 0x0
	0x03AEC868 B.EQ 0x3AEC878
	0x03AEC86C LDRB W8, [X19 + 0x195]
	0x03AEC870 CMP W8, 0x0
	0x03AEC874 CSET W0, NE
	0x03AEC878 LDP X20, X19, [X31 + 0x10]
	0x03AEC87C LDP X30, X21, [X31], #0x20
	0x03AEC880 RET
	0x03AEC884 STR X30, [X31 - 0x30]!
	0x03AEC888 STP X22, X21, [X31 + 0x10]
	0x03AEC88C STP X20, X19, [X31 + 0x20]
	0x03AEC890 ADRP X21, 0x8F6000
	0x03AEC894 ADRP X22, 0x607000
	0x03AEC898 LDRB W8, [X21 + 0x5D7]
	0x03AEC89C LDR X22, [X22 + 0x970]
	0x03AEC8A0 MOV W20, W1
	0x03AEC8A4 MOV X19, X0
	0x03AEC8A8 TBNZ X8, 0x0, 0x3AEC8CC
	0x03AEC8AC ADRP X0, 0x607000
	0x03AEC8B0 LDR X0, [X0 + 0x970]
	0x03AEC8B4 BL 0x1C16CF4
	0x03AEC8B8 ADRP X0, 0x66D000
	0x03AEC8BC LDR X0, [X0 + 0x28]
	0x03AEC8C0 BL 0x1C16CF4
	0x03AEC8C4 MOVZ W8, 0x1
	0x03AEC8C8 STRB W8, [X21 + 0x5D7]
	0x03AEC8CC LDR X0, [X22]
	0x03AEC8D0 LDR W8, [X0 + 0xE0]
	0x03AEC8D4 CBNZ W8, 0x3AEC8DC
	0x03AEC8D8 BL 0x1C16DFC
	0x03AEC8DC MOV X0, X31
	0x03AEC8E0 BL 0x3C01AB0
	0x03AEC8E4 CMP W0, 0x14
	0x03AEC8E8 B.LE 0x3AEC904
	0x03AEC8EC CMP W0, 0x20
	0x03AEC8F0 B.LE 0x3AEC924
	0x03AEC8F4 ORR W8, W0, 0x4
	0x03AEC8F8 CMP W8, 0x26
	0x03AEC8FC B.EQ 0x3AEC944
	0x03AEC900 B 0x3AEC968
	0x03AEC904 CMP W0, 0x8
	0x03AEC908 B.EQ 0x3AEC944
	0x03AEC90C CMP W0, 0xB
	0x03AEC910 B.EQ 0x3AEC944
	0x03AEC914 SUB W8, W0, 0x12
	0x03AEC918 CMP W8, 0x2
	0x03AEC91C B.LS 0x3AEC944
	0x03AEC920 B 0x3AEC968
	0x03AEC924 B.HI 0x3AEC968
	0x03AEC928 MOV W8, W0
	0x03AEC92C MOVZ W9, 0x1
	0x03AEC930 LSLV X8, X9, X8
	0x03AEC934 MOVZ X9, 0x82000000
	0x03AEC938 MOVK X9, 0x1
	0x03AEC93C ANDS X31, X8, X9, 0x0
	0x03AEC940 B.EQ 0x3AEC968
	0x03AEC944 ADRP X8, 0x66D000
	0x03AEC948 LDR X8, [X8 + 0x28]
	0x03AEC94C ADD X0, X19, 0x195
	0x03AEC950 AND W1, W20, 0x1
	0x03AEC954 LDR X2, [X8]
	0x03AEC958 BL 0x2253D58
	0x03AEC95C LDRB W8, [X19 + 0x195]
	0x03AEC960 CBNZ W8, 0x3AEC970
	0x03AEC964 B 0x3AEC9B0
	0x03AEC968 MOVZ W8, 0x1
	0x03AEC96C STRB W8, [X19 + 0x195]
	0x03AEC970 LDR X8, [X19 + 0x100]
	0x03AEC974 CBZ X8, 0x3AEC9B0
	0x03AEC978 MOV X0, X31
	0x03AEC97C BL 0x3C3CC00
	0x03AEC980 TBZ X0, 0x0, 0x3AEC9B0
	0x03AEC984 LDR X0, [X19 + 0x100]
	0x03AEC988 CBZ X0, 0x3AEC9C0
	0x03AEC98C MOV X1, X31
	0x03AEC990 BL 0x3C3CFD8
	0x03AEC994 TBZ X0, 0x0, 0x3AEC9B0
	0x03AEC998 LDR X0, [X19 + 0x100]
	0x03AEC99C CBZ X0, 0x3AEC9C0
	0x03AEC9A0 MOV W1, W31
	0x03AEC9A4 MOV X2, X31
	0x03AEC9A8 BL 0x3C3D014
	0x03AEC9AC STR X31, [X19 + 0x100]
	0x03AEC9B0 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x8F7000
	015 Move W8, [X20+1482]
	016 Move X19, X6
	017 Move W22, W3
	018 Move X23, X2
	019 Move X24, X1
	020 Move W25, W0
	021 Move [X31+8], W4
	022 Move [X31+12], W5
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {53}
	027 Move X0, 0x60A000
	028 Move X0, [X0+2520]
	029 Call 0x1C17CF4
	030 Move X0, 0x60F000
	031 Move X0, [X0+1656]
	032 Call 0x1C17CF4
	033 Move X0, 0x60F000
	034 Move X0, [X0+1672]
	035 Call 0x1C17CF4
	036 Move X0, 0x609000
	037 Move X0, [X0+3592]
	038 Call 0x1C17CF4
	039 Move X0, 0x66D000
	040 Move X0, [X0+1552]
	041 Call 0x1C17CF4
	042 Move X0, 0x66D000
	043 Move X0, [X0+3144]
	044 Call 0x1C17CF4
	045 Move X0, 0x608000
	046 Move X0, [X0+1432]
	047 Call 0x1C17CF4
	048 Move X0, 0x66D000
	049 Move X0, [X0+1560]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X20+1482], W8
	053 Move [X19], W31
	054 Compare X23, 0
	055 JumpIfEqual {170}
	056 Move W29, [X23+24]
	057 Compare W29, 0
	058 JumpIfEqual {170}
	059 Move TEMP, X22
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {107}
	063 Move X20, 0x66D000
	064 Move X20, [X20+1560]
	065 Move X0, [X20]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {71}
	069 Call 0x1C17DFC
	070 Move X0, [X20]
	071 Move X8, [X0+184]
	072 Move X8, [X8+8]
	073 Compare X8, 0
	074 JumpIfEqual {89}
	075 Move W9, [X0+224]
	076 Compare W9, 0
	077 JumpIfNotEqual {84}
	078 Call 0x1C17DFC
	079 Move X8, [X20]
	080 Move X8, [X8+184]
	081 Move X8, [X8+8]
	082 Compare X8, 0
	083 JumpIfEqual {185}
	084 Move X9, 0x60F000
	085 Move X9, [X9+1656]
	086 Move X0, X8
	087 Move X1, [X9]
	088 Call HashSet`1<Int32>.Clear, X0
	089 Move X8, 0x609000
	090 Move X8, [X8+3592]
	091 Move X0, [X8]
	092 Call 0x1C17F10
	093 Move X8, 0x60F000
	094 Move X8, [X8+1672]
	095 Move X26, X0
	096 Move X1, [X8]
	097 Call HashSet`1<Int32>..ctor, X0
	098 Move X0, [X20]
	099 Move W8, [X0+224]
	100 Compare W8, 0
	101 JumpIfNotEqual {104}
	102 Call 0x1C17DFC
	103 Move X0, [X20]
	104 Move X8, [X0+184]
	105 Move [X8+8], X26
	106 Move W29, [X23+24]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X20, 0x66D000
	109 Move X21, 0x608000
	110 Move X20, [X20+3144]
	111 Move X21, [X21+1432]
	112 Move W26, W31
	113 Move X2, [X20]
	114 Move X0, X23
	115 Move W1, W26
	116 Call List`1<Object>.get_Item, X0, X1
	117 Move X8, [X21]
	118 Move X27, X0
	119 Move W9, [X8+224]
	120 Compare W9, 0
	121 JumpIfNotEqual {124}
	122 Move X0, X8
	123 Call 0x1C17DFC
	124 Move X0, X27
	125 Move X1, X31
	126 Move X2, X31
	127 Call Object.op_Equality, X0, X1
	128 Move TEMP, X0
	129 And TEMP, TEMP, 1
	130 Compare TEMP, 1
	131 JumpIfEqual {168}
	132 Compare X24, 0
	133 JumpIfEqual {185}
	134 Compare X27, 0
	135 JumpIfEqual {185}
	136 Move W1, [X27+24]
	137 Move X28, [X24+448]
	138 Compare W1, 0
	139 JumpIfNotEqual {145}
	140 Move X0, X27
	141 Move X1, X31
	142 Call Object.GetInstanceID, X0
	143 Move W1, W0
	144 Move [X27+24], W0
	145 Compare X28, 0
	146 JumpIfEqual {185}
	147 Move X8, 0x60A000
	148 Move X8, [X8+2520]
	149 Move X0, X28
	150 Move X2, [X8]
	151 Call HashSet`1<Int32>.Add, X0, X1
	152 Move X8, 0x66D000
	153 Move X8, [X8+1560]
	154 Move X0, [X8]
	155 Move W8, [X0+224]
	156 Compare W8, 0
	157 JumpIfNotEqual {159}
	158 Call 0x1C17DFC
	159 Move W3, [X31+8]
	160 Move W4, [X31+12]
	161 And W2, W22, 1
	162 Move W0, W25
	163 Move X1, X27
	164 Move X5, X19
	165 Call TMP_FontAssetUtilities.GetCharacterFromFontAsset_Internal, X0, X1, X2, X3, X4, X5
	166 Compare X0, 0
	167 JumpIfNotEqual {171}
	168 Add W26, W26, 1
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Move X0, X31
	171 Move X20, [X31+96]
	172 Move X19, [X31+104]
	173 Move X22, [X31+80]
	174 Move X21, [X31+88]
	175 Move X24, [X31+64]
	176 Move X23, [X31+72]
	177 Move X26, [X31+48]
	178 Move X25, [X31+56]
	179 Move X28, [X31+32]
	180 Move X27, [X31+40]
	181 Move X29, [X31+16]
	182 Move X30, [X31+24]
	183 Add X31, X31, 112
	184 Return X0
	185 Call 0x1C17F20

Method: TMPro.TMP_SpriteCharacter GetSpriteCharacterFromSpriteAsset(System.UInt32 unicode, TMPro.TMP_SpriteAsset spriteAsset, System.Boolean includeFallbacks)

Disassembly:
	0x03AEC9B4 LDP X22, X21, [X31 + 0x10]
	0x03AEC9B8 LDR X30, [X31], #0x30
	0x03AEC9BC RET
	0x03AEC9C0 BL 0x1C16F20
	0x03AEC9C4 STR X30, [X31 - 0x20]!
	0x03AEC9C8 STP X20, X19, [X31 + 0x10]
	0x03AEC9CC ADRP X19, 0x8F6000
	0x03AEC9D0 ADRP X20, 0x607000
	0x03AEC9D4 LDRB W8, [X19 + 0x5D8]
	0x03AEC9D8 LDR X20, [X20 + 0x970]
	0x03AEC9DC TBNZ X8, 0x0, 0x3AEC9F4
	0x03AEC9E0 ADRP X0, 0x607000
	0x03AEC9E4 LDR X0, [X0 + 0x970]
	0x03AEC9E8 BL 0x1C16CF4
	0x03AEC9EC MOVZ W8, 0x1
	0x03AEC9F0 STRB W8, [X19 + 0x5D8]
	0x03AEC9F4 LDR X0, [X20]
	0x03AEC9F8 LDR W8, [X0 + 0xE0]
	0x03AEC9FC CBNZ W8, 0x3AECA04
	0x03AECA00 BL 0x1C16DFC
	0x03AECA04 MOV X0, X31
	0x03AECA08 BL 0x3C01AB0
	0x03AECA0C MOV W8, W0
	0x03AECA10 CMP W0, 0xB
	0x03AECA14 B.LE 0x3AECA34
	0x03AECA18 SUB W8, W8, 0x19
	0x03AECA1C CMP W8, 0xE
	0x03AECA20 B.CS 0x3AECA48
	0x03AECA24 MOVZ W9, 0x1F3E
	0x03AECA28 LSRV W8, W9, W8
	0x03AECA2C AND W0, W8, 0x1
	0x03AECA30 B 0x3AECA4C
	0x03AECA34 CMP W8, 0x8
	0x03AECA38 MOV W0, W31
	0x03AECA3C B.EQ 0x3AECA4C
	0x03AECA40 CMP W8, 0xB
	0x03AECA44 B.EQ 0x3AECA4C
	0x03AECA48 MOVZ W0, 0x1
	0x03AECA4C LDP X20, X19, [X31 + 0x10]
	0x03AECA50 LDR X30, [X31], #0x20
	0x03AECA54 RET
	0x03AECA58 LDR X0, [X0 + 0x220]
	0x03AECA5C RET
	0x03AECA60 MOVZ W2, 0x1
	0x03AECA64 B 0x3AECA68
	0x03AECA68 STR X30, [X31 - 0x30]!
	0x03AECA6C STP X22, X21, [X31 + 0x10]
	0x03AECA70 STP X20, X19, [X31 + 0x20]
	0x03AECA74 ADRP X22, 0x8F6000
	0x03AECA78 LDRB W8, [X22 + 0x5D9]
	0x03AECA7C MOV W19, W2
	0x03AECA80 MOV X21, X1
	0x03AECA84 MOV X20, X0
	0x03AECA88 TBNZ X8, 0x0, 0x3AECAB8
	0x03AECA8C ADRP X0, 0x609000
	0x03AECA90 LDR X0, [X0 + 0x278]
	0x03AECA94 BL 0x1C16CF4
	0x03AECA98 ADRP X0, 0x64F000
	0x03AECA9C LDR X0, [X0 + 0x900]
	0x03AECAA0 BL 0x1C16CF4
	0x03AECAA4 ADRP X0, 0x607000
	0x03AECAA8 LDR X0, [X0 + 0x988]
	0x03AECAAC BL 0x1C16CF4
	0x03AECAB0 MOVZ W8, 0x1
	0x03AECAB4 STRB W8, [X22 + 0x5D9]
	0x03AECAB8 LDR X0, [X20 + 0x220]
	0x03AECABC MOV X1, X21
	0x03AECAC0 MOV X2, X31
	0x03AECAC4 BL 0x321BA08
	0x03AECAC8 TBNZ X0, 0x0, 0x3AECB88
	0x03AECACC ADRP X8, 0x607000
	0x03AECAD0 LDR X8, [X8 + 0x988]
	0x03AECAD4 CMP X21, 0x0
	0x03AECAD8 LDR X8, [X8]
	0x03AECADC CSEL X0, X8, X21, EQ
	0x03AECAE0 CBZ X0, 0x3AECB98
	0x03AECAE4 ADRP X8, 0x609000
	0x03AECAE8 LDR X8, [X8 + 0x278]
	0x03AECAEC ADRP X9, 0x64F000
	0x03AECAF0 MOV X3, X31
	0x03AECAF4 LDR X8, [X8]
	0x03AECAF8 LDR X8, [X8 + 0xB8]
	0x03AECAFC LDR X9, [X9 + 0x900]
	0x03AECB00 LDR X2, [X8]
	0x03AECB04 LDR X1, [X9]
	0x03AECB08 BL 0x32293BC
	0x03AECB0C LDR X8, [X20 + 0x100]
	0x03AECB10 MOV X1, X0
	0x03AECB14 STR X0, [X20 + 0x220]
	0x03AECB18 CBZ X8, 0x3AECB2C
	0x03AECB1C MOV X0, X8
	0x03AECB20 MOV X2, X31
	0x03AECB24 BL 0x3C3CF58
	0x03AECB28 LDR X1, [X20 + 0x220]
	0x03AECB2C CBZ X1, 0x3AECB98
	0x03AECB30 LDR W9, [X20 + 0x234]
	0x03AECB34 LDR W8, [X1 + 0x10]
	0x03AECB38 CMP W9, W8
	0x03AECB3C B.LE 0x3AECB4C
	0x03AECB40 STR W8, [X20 + 0x238]
	0x03AECB44 STR W8, [X20 + 0x234]
	0x03AECB48 B 0x3AECB5C
	0x03AECB4C LDR W9, [X20 + 0x238]
	0x03AECB50 CMP W9, W8
	0x03AECB54 B.LE 0x3AECB5C
	0x03AECB58 STR W8, [X20 + 0x238]
	0x03AECB5C MOVZ W8, 0x1
	0x03AECB60 MOV X0, X20
	0x03AECB64 STRB W8, [X20 + 0x2EB]
	0x03AECB68 STRB W8, [X20 + 0x2AA]
	0x03AECB6C BL 0x3AECBA4
	0x03AECB70 TBZ X19, 0x0, 0x3AECB88
	0x03AECB74 MOV X0, X20
	0x03AECB78 LDP X20, X19, [X31 + 0x20]
	0x03AECB7C LDP X22, X21, [X31 + 0x10]
	0x03AECB80 LDR X30, [X31], #0x30
	0x03AECB84 B 0x3AED028
	0x03AECB88 LDP X20, X19, [X31 + 0x20]
	0x03AECB8C LDP X22, X21, [X31 + 0x10]
	0x03AECB90 LDR X30, [X31], #0x30
	0x03AECB94 RET
	0x03AECB98 BL 0x1C16F20
	0x03AECB9C MOV W2, W31
	0x03AECBA0 B 0x3AECA68
	0x03AECBA4 STP X30, X23, [X31 - 0x30]!
	0x03AECBA8 STP X22, X21, [X31 + 0x10]
	0x03AECBAC STP X20, X19, [X31 + 0x20]
	0x03AECBB0 ADRP X20, 0x8F6000
	0x03AECBB4 ADRP X23, 0x607000
	0x03AECBB8 LDRB W8, [X20 + 0x614]
	0x03AECBBC LDR X23, [X23 + 0x598]
	0x03AECBC0 MOV X19, X0
	0x03AECBC4 TBNZ X8, 0x0, 0x3AECC18
	0x03AECBC8 ADRP X0, 0x60A000
	0x03AECBCC LDR X0, [X0 + 0x920]
	0x03AECBD0 BL 0x1C16CF4
	0x03AECBD4 ADRP X0, 0x607000
	0x03AECBD8 LDR X0, [X0 + 0x598]
	0x03AECBDC BL 0x1C16CF4
	0x03AECBE0 ADRP X0, 0x607000
	0x03AECBE4 LDR X0, [X0 + 0xAC8]
	0x03AECBE8 BL 0x1C16CF4
	0x03AECBEC ADRP X0, 0x66D000
	0x03AECBF0 LDR X0, [X0 + 0x30]
	0x03AECBF4 BL 0x1C16CF4
	0x03AECBF8 ADRP X0, 0x66D000
	0x03AECBFC LDR X0, [X0 + 0x38]
	0x03AECC00 BL 0x1C16CF4
	0x03AECC04 ADRP X0, 0x66D000
	0x03AECC08 LDR X0, [X0 + 0x40]
	0x03AECC0C BL 0x1C16CF4
	0x03AECC10 MOVZ W8, 0x1
	0x03AECC14 STRB W8, [X20 + 0x614]
	0x03AECC18 LDR X0, [X23]
	0x03AECC1C LDR X20, [X19 + 0x138]
	0x03AECC20 LDR W8, [X0 + 0xE0]
	0x03AECC24 CBNZ W8, 0x3AECC2C
	0x03AECC28 BL 0x1C16DFC
	0x03AECC2C MOV X0, X20
	0x03AECC30 MOV X1, X31
	0x03AECC34 MOV X2, X31
	0x03AECC38 BL 0x3C354F8
	0x03AECC3C TBZ X0, 0x0, 0x3AED010
	0x03AECC40 LDR X8, [X19 + 0x138]
	0x03AECC44 CBZ X8, 0x3AED020
	0x03AECC48 LDR X0, [X23]
	0x03AECC4C LDR X20, [X8 + 0xF8]
	0x03AECC50 LDR W9, [X0 + 0xE0]
	0x03AECC54 CBNZ W9, 0x3AECC5C
	0x03AECC58 BL 0x1C16DFC
	0x03AECC5C MOV X0, X20
	0x03AECC60 MOV X1, X31
	0x03AECC64 MOV X2, X31
	0x03AECC68 BL 0x3C354F8
	0x03AECC6C TBZ X0, 0x0, 0x3AED010
	0x03AECC70 LDRB W8, [X19 + 0x2A8]
	0x03AECC74 CBNZ W8, 0x3AED010
	0x03AECC78 MOVZ W8, 0x1
	0x03AECC7C MOV X0, X19
	0x03AECC80 STRB W8, [X19 + 0x2A8]
	0x03AECC84 BL 0x3AEC28C
	0x03AECC88 CMP W0, 0x1
	0x03AECC8C B.LT 0x3AECC98
	0x03AECC90 LDRB W8, [X19 + 0x230]
	0x03AECC94 CBZ W8, 0x3AECCA8
	0x03AECC98 LDR X21, [X19 + 0x220]
	0x03AECC9C MOVZ W8, 0x100
	0x03AECCA0 STRH W8, [X19 + 0x2B8]
	0x03AECCA4 B 0x3AECDD0
	0x03AECCA8 MOV X0, X19
	0x03AECCAC BL 0x3AF2CC4
	0x03AECCB0 LDRB W8, [X19 + 0x231]
	0x03AECCB4 CBZ W8, 0x3AECD74
	0x03AECCB8 ADRP X8, 0x607000

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x8F7000
	013 Move X24, 0x608000
	014 Move W8, [X22+1483]
	015 Move X24, [X24+1432]
	016 Move W21, W2
	017 Move X20, X1
	018 Move W19, W0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {52}
	023 Move X0, 0x66D000
	024 Move X0, [X0+4064]
	025 Call 0x1C17CF4
	026 Move X0, 0x60A000
	027 Move X0, [X0+2520]
	028 Call 0x1C17CF4
	029 Move X0, 0x60F000
	030 Move X0, [X0+1656]
	031 Call 0x1C17CF4
	032 Move X0, 0x60F000
	033 Move X0, [X0+1672]
	034 Call 0x1C17CF4
	035 Move X0, 0x609000
	036 Move X0, [X0+3592]
	037 Call 0x1C17CF4
	038 Move X0, 0x66D000
	039 Move X0, [X0+4072]
	040 Call 0x1C17CF4
	041 Move X0, 0x66D000
	042 Move X0, [X0+4080]
	043 Call 0x1C17CF4
	044 Move X0, 0x608000
	045 Move X0, [X0+1432]
	046 Call 0x1C17CF4
	047 Move X0, 0x66D000
	048 Move X0, [X0+1560]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X22+1483], W8
	052 Move X0, [X24]
	053 Move [X31+8], X31
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, X20
	059 Move X1, X31
	060 Move X2, X31
	061 Call Object.op_Equality, X0, X1
	062 Move W8, W0
	063 Move X0, X31
	064 Move TEMP, X8
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfEqual {225}
	068 Compare X20, 0
	069 JumpIfEqual {237}
	070 Move X0, X20
	071 Move X1, X31
	072 Call TMP_SpriteAsset.get_spriteCharacterLookupTable, X0
	073 Compare X0, 0
	074 JumpIfEqual {237}
	075 Move X8, 0x66D000
	076 Move X8, [X8+4064]
	077 Add X2, X31, 8
	078 Move W1, W19
	079 Move X3, [X8]
	080 Call Dictionary`2<UInt32, Object>.TryGetValue, X0, X1, X2
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {86}
	085 Move X0, [X31+8]
	086 Move TEMP, X21
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {224}
	090 Move X25, 0x66D000
	091 Move X25, [X25+1560]
	092 Move X0, [X25]
	093 Move W8, [X0+224]
	094 Compare W8, 0
	095 JumpIfNotEqual {98}
	096 Call 0x1C17DFC
	097 Move X0, [X25]
	098 Move X8, [X0+184]
	099 Move X8, [X8+8]
	100 Compare X8, 0
	101 JumpIfEqual {117}
	102 Move W9, [X0+224]
	103 Compare W9, 0
	104 JumpIfNotEqual {111}
	105 Call 0x1C17DFC
	106 Move X8, [X25]
	107 Move X8, [X8+184]
	108 Move X8, [X8+8]
	109 Compare X8, 0
	110 JumpIfEqual {237}
	111 Move X9, 0x60F000
	112 Move X9, [X9+1656]
	113 Move X0, X8
	114 Move X1, [X9]
	115 Call HashSet`1<Int32>.Clear, X0
	116 Move X0, [X25]
	117 Move X8, 0x609000
	118 Move X8, [X8+3592]
	119 Move X0, [X8]
	120 Call 0x1C17F10
	121 Move X8, 0x60F000
	122 Move X8, [X8+1672]
	123 Move X21, X0
	124 Move X1, [X8]
	125 Call HashSet`1<Int32>..ctor, X0
	126 Move X0, [X25]
	127 Move W8, [X0+224]
	128 Compare W8, 0
	129 JumpIfNotEqual {132}
	130 Call 0x1C17DFC
	131 Move X0, [X25]
	132 Move X8, [X0+184]
	133 Move [X8+8], X21
	134 Move W8, [X0+224]
	135 Compare W8, 0
	136 JumpIfNotEqual {139}
	137 Call 0x1C17DFC
	138 Move X0, [X25]
	139 Move X8, [X0+184]
	140 Move W1, [X20+24]
	141 Move X21, [X8+8]
	142 Compare W1, 0
	143 JumpIfNotEqual {149}
	144 Move X0, X20
	145 Move X1, X31
	146 Call Object.GetInstanceID, X0
	147 Move W1, W0
	148 Move [X20+24], W0
	149 Compare X21, 0
	150 JumpIfEqual {237}
	151 Move X26, 0x60A000
	152 Move X26, [X26+2520]
	153 Move X0, X21
	154 Move X2, [X26]
	155 Call HashSet`1<Int32>.Add, X0, X1
	156 Move X20, [X20+216]
	157 Compare X20, 0
	158 JumpIfEqual {224}
	159 Move W27, [X20+24]
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move X28, 0x66D000
	162 Move X28, [X28+4080]
	163 Move W21, W31
	164 Move X2, [X28]
	165 Move X0, X20
	166 Move W1, W21
	167 Call List`1<Object>.get_Item, X0, X1
	168 Move X8, [X24]
	169 Move X22, X0
	170 Move W9, [X8+224]
	171 Compare W9, 0
	172 JumpIfNotEqual {175}
	173 Move X0, X8
	174 Call 0x1C17DFC
	175 Move X0, X22
	176 Move X1, X31
	177 Move X2, X31
	178 Call Object.op_Equality, X0, X1
	179 Move TEMP, X0
	180 And TEMP, TEMP, 1
	181 Compare TEMP, 1
	182 JumpIfEqual {222}
	183 Compare X22, 0
	184 JumpIfEqual {237}
	185 Move W23, [X22+24]
	186 Compare W23, 0
	187 JumpIfNotEqual {193}
	188 Move X0, X22
	189 Move X1, X31
	190 Call Object.GetInstanceID, X0
	191 Move W23, W0
	192 Move [X22+24], W0
	193 Move X0, [X25]
	194 Move W8, [X0+224]
	195 Compare W8, 0
	196 JumpIfNotEqual {199}
	197 Call 0x1C17DFC
	198 Move X0, [X25]
	199 Move X8, [X0+184]
	200 Move X0, [X8+8]
	201 Compare X0, 0
	202 JumpIfEqual {237}
	203 Move X2, [X26]
	204 Move W1, W23
	205 Call HashSet`1<Int32>.Add, X0, X1
	206 Move TEMP, X0
	207 And TEMP, TEMP, 1
	208 Compare TEMP, 1
	209 JumpIfNotEqual {222}
	210 Move X0, [X25]
	211 Move W8, [X0+224]
	212 Compare W8, 0
	213 JumpIfNotEqual {215}
	214 Call 0x1C17DFC
	215 Move W2, 1
	216 Move W0, W19
	217 Move X1, X22
	218 Call TMP_FontAssetUtilities.GetSpriteCharacterFromSpriteAsset_Internal, X0, X1, X2
	219 Move [X31+8], X0
	220 Compare X0, 0
	221 JumpIfNotEqual {225}
	222 Add W21, W21, 1
	223 NotImplemented "Instruction CMP not yet implemented."
	224 Move X0, X31
	225 Move X20, [X31+80]
	226 Move X19, [X31+88]
	227 Move X22, [X31+64]
	228 Move X21, [X31+72]
	229 Move X24, [X31+48]
	230 Move X23, [X31+56]
	231 Move X26, [X31+32]
	232 Move X25, [X31+40]
	233 Move X28, [X31+16]
	234 Move X27, [X31+24]
	235 Move X30, [X31+96]
	236 Return X0
	237 Call 0x1C17F20

Method: TMPro.TMP_SpriteCharacter GetSpriteCharacterFromSpriteAsset_Internal(System.UInt32 unicode, TMPro.TMP_SpriteAsset spriteAsset, System.Boolean includeFallbacks)

Disassembly:
	0x03AECCBC LDR X8, [X8 + 0xAC8]
	0x03AECCC0 MOVZ W1, 0x5
	0x03AECCC4 LDR X0, [X8]
	0x03AECCC8 BL 0x1C16D6C
	0x03AECCCC LDR X8, [X19 + 0x220]
	0x03AECCD0 CBZ X8, 0x3AED020
	0x03AECCD4 LDR W2, [X19 + 0x234]
	0x03AECCD8 MOV X20, X0
	0x03AECCDC MOV X0, X8
	0x03AECCE0 MOV W1, W31
	0x03AECCE4 MOV X3, X31
	0x03AECCE8 BL 0x3228DE4
	0x03AECCEC CBZ X20, 0x3AED020
	0x03AECCF0 LDR W8, [X20 + 0x18]
	0x03AECCF4 CBZ W8, 0x3AED024
	0x03AECCF8 CMP W8, 0x1
	0x03AECCFC STR X0, [X20 + 0x20]
	0x03AECD00 B.EQ 0x3AED024
	0x03AECD04 ADRP X8, 0x66D000
	0x03AECD08 LDR X8, [X8 + 0x38]
	0x03AECD0C LDR X8, [X8]
	0x03AECD10 STR X8, [X20 + 0x28]
	0x03AECD14 BL 0x3AEC1F8
	0x03AECD18 LDR W8, [X20 + 0x18]
	0x03AECD1C CMP W8, 0x2
	0x03AECD20 B.LS 0x3AED024
	0x03AECD24 CMP W8, 0x3
	0x03AECD28 STR X0, [X20 + 0x30]
	0x03AECD2C B.EQ 0x3AED024
	0x03AECD30 ADRP X8, 0x66D000
	0x03AECD34 LDR X8, [X8 + 0x40]
	0x03AECD38 LDR X8, [X8]
	0x03AECD3C STR X8, [X20 + 0x38]
	0x03AECD40 LDR X0, [X19 + 0x220]
	0x03AECD44 CBZ X0, 0x3AED020
	0x03AECD48 LDR W1, [X19 + 0x234]
	0x03AECD4C MOV X2, X31
	0x03AECD50 BL 0x322B484
	0x03AECD54 LDR W8, [X20 + 0x18]
	0x03AECD58 CMP W8, 0x4
	0x03AECD5C B.LS 0x3AED024
	0x03AECD60 STR X0, [X20 + 0x40]
	0x03AECD64 MOV X0, X20
	0x03AECD68 MOV X1, X31
	0x03AECD6C BL 0x32278CC
	0x03AECD70 B 0x3AECDC4
	0x03AECD74 LDR X0, [X19 + 0x220]
	0x03AECD78 CBZ X0, 0x3AED020
	0x03AECD7C LDR W2, [X19 + 0x234]
	0x03AECD80 MOV W1, W31
	0x03AECD84 MOV X3, X31
	0x03AECD88 BL 0x3228DE4
	0x03AECD8C MOV X20, X0
	0x03AECD90 BL 0x3AEC1F8
	0x03AECD94 LDR X8, [X19 + 0x220]
	0x03AECD98 CBZ X8, 0x3AED020
	0x03AECD9C LDR W1, [X19 + 0x234]
	0x03AECDA0 MOV X21, X0
	0x03AECDA4 MOV X0, X8
	0x03AECDA8 MOV X2, X31
	0x03AECDAC BL 0x322B484
	0x03AECDB0 MOV X2, X0
	0x03AECDB4 MOV X0, X20
	0x03AECDB8 MOV X1, X21
	0x03AECDBC MOV X3, X31
	0x03AECDC0 BL 0x32274B8
	0x03AECDC4 MOVZ W8, 0x1
	0x03AECDC8 MOV X21, X0
	0x03AECDCC STRB W8, [X19 + 0x2B8]
	0x03AECDD0 LDR W8, [X19 + 0x184]
	0x03AECDD4 MOV X20, X21
	0x03AECDD8 CMP W8, 0x2
	0x03AECDDC B.NE 0x3AECDFC
	0x03AECDE0 CBZ X21, 0x3AED020
	0x03AECDE4 LDR W2, [X21 + 0x10]
	0x03AECDE8 LDRH W1, [X19 + 0x188]
	0x03AECDEC MOV X0, X31
	0x03AECDF0 MOV X3, X31
	0x03AECDF4 BL 0x322EAF4
	0x03AECDF8 MOV X20, X0
	0x03AECDFC MOV X0, X21
	0x03AECE00 MOV X1, X31
	0x03AECE04 BL 0x32277A8
	0x03AECE08 LDR X8, [X23]
	0x03AECE0C LDR X22, [X19 + 0x148]
	0x03AECE10 MOV W21, W0
	0x03AECE14 LDR W9, [X8 + 0xE0]
	0x03AECE18 CBNZ W9, 0x3AECE24
	0x03AECE1C MOV X0, X8
	0x03AECE20 BL 0x1C16DFC
	0x03AECE24 MOV X0, X22
	0x03AECE28 MOV X1, X31
	0x03AECE2C MOV X2, X31
	0x03AECE30 BL 0x3C354F8
	0x03AECE34 TBZ X0, 0x0, 0x3AECE4C
	0x03AECE38 LDR X0, [X19 + 0x148]
	0x03AECE3C CBZ X0, 0x3AED020
	0x03AECE40 AND W1, W21, 0x1
	0x03AECE44 MOV X2, X31
	0x03AECE48 BL 0x3C32410
	0x03AECE4C TBNZ X21, 0x0, 0x3AECE60
	0x03AECE50 LDRB W8, [X19 + 0x230]
	0x03AECE54 CBNZ W8, 0x3AECE60
	0x03AECE58 MOV X0, X19
	0x03AECE5C BL 0x3AEFAA4
	0x03AECE60 ADRP X22, 0x66D000
	0x03AECE64 LDR X21, [X19 + 0x138]
	0x03AECE68 LDR X22, [X22 + 0x30]
	0x03AECE6C MOV X0, X20
	0x03AECE70 MOV X2, X31
	0x03AECE74 LDR X1, [X22]
	0x03AECE78 BL 0x321B938
	0x03AECE7C CBZ X21, 0x3AED020
	0x03AECE80 LDR X8, [X21]
	0x03AECE84 MOV X1, X0
	0x03AECE88 MOV X0, X21
	0x03AECE8C LDR X9, [X8 + 0x558]
	0x03AECE90 LDR X2, [X8 + 0x560]
	0x03AECE94 BLR X9

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x8F7000
	013 Move W8, [X22+1484]
	014 Move W21, W2
	015 Move X20, X1
	016 Move W19, W0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {41}
	021 Move X0, 0x66D000
	022 Move X0, [X0+4064]
	023 Call 0x1C17CF4
	024 Move X0, 0x60A000
	025 Move X0, [X0+2520]
	026 Call 0x1C17CF4
	027 Move X0, 0x66D000
	028 Move X0, [X0+4072]
	029 Call 0x1C17CF4
	030 Move X0, 0x66D000
	031 Move X0, [X0+4080]
	032 Call 0x1C17CF4
	033 Move X0, 0x608000
	034 Move X0, [X0+1432]
	035 Call 0x1C17CF4
	036 Move X0, 0x66D000
	037 Move X0, [X0+1560]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X22+1484], W8
	041 Move [X31+8], X31
	042 Compare X20, 0
	043 JumpIfEqual {151}
	044 Move X0, X20
	045 Move X1, X31
	046 Call TMP_SpriteAsset.get_spriteCharacterLookupTable, X0
	047 Compare X0, 0
	048 JumpIfEqual {151}
	049 Move X8, 0x66D000
	050 Move X8, [X8+4064]
	051 Add X2, X31, 8
	052 Move W1, W19
	053 Move X3, [X8]
	054 Call Dictionary`2<UInt32, Object>.TryGetValue, X0, X1, X2
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {60}
	059 Move X0, [X31+8]
	060 Move TEMP, X21
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {138}
	064 Move X20, [X20+216]
	065 Compare X20, 0
	066 JumpIfEqual {138}
	067 Move W24, [X20+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X25, 0x66D000
	070 Move X26, 0x608000
	071 Move X27, 0x66D000
	072 Move X28, 0x60A000
	073 Move X25, [X25+4080]
	074 Move X26, [X26+1432]
	075 Move X27, [X27+1560]
	076 Move X28, [X28+2520]
	077 Move W21, W31
	078 Move X2, [X25]
	079 Move X0, X20
	080 Move W1, W21
	081 Call List`1<Object>.get_Item, X0, X1
	082 Move X8, [X26]
	083 Move X22, X0
	084 Move W9, [X8+224]
	085 Compare W9, 0
	086 JumpIfNotEqual {89}
	087 Move X0, X8
	088 Call 0x1C17DFC
	089 Move X0, X22
	090 Move X1, X31
	091 Move X2, X31
	092 Call Object.op_Equality, X0, X1
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfEqual {136}
	097 Compare X22, 0
	098 JumpIfEqual {151}
	099 Move W23, [X22+24]
	100 Compare W23, 0
	101 JumpIfNotEqual {107}
	102 Move X0, X22
	103 Move X1, X31
	104 Call Object.GetInstanceID, X0
	105 Move W23, W0
	106 Move [X22+24], W0
	107 Move X0, [X27]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {113}
	111 Call 0x1C17DFC
	112 Move X0, [X27]
	113 Move X8, [X0+184]
	114 Move X0, [X8+8]
	115 Compare X0, 0
	116 JumpIfEqual {151}
	117 Move X2, [X28]
	118 Move W1, W23
	119 Call HashSet`1<Int32>.Add, X0, X1
	120 Move TEMP, X0
	121 And TEMP, TEMP, 1
	122 Compare TEMP, 1
	123 JumpIfNotEqual {136}
	124 Move X0, [X27]
	125 Move W8, [X0+224]
	126 Compare W8, 0
	127 JumpIfNotEqual {129}
	128 Call 0x1C17DFC
	129 Move W2, 1
	130 Move W0, W19
	131 Move X1, X22
	132 Call TMP_FontAssetUtilities.GetSpriteCharacterFromSpriteAsset_Internal, X0, X1, X2
	133 Move [X31+8], X0
	134 Compare X0, 0
	135 JumpIfNotEqual {139}
	136 Add W21, W21, 1
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move X0, X31
	139 Move X20, [X31+80]
	140 Move X19, [X31+88]
	141 Move X22, [X31+64]
	142 Move X21, [X31+72]
	143 Move X24, [X31+48]
	144 Move X23, [X31+56]
	145 Move X26, [X31+32]
	146 Move X25, [X31+40]
	147 Move X28, [X31+16]
	148 Move X27, [X31+24]
	149 Move X30, [X31+96]
	150 Return X0
	151 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03AEC1E0 B 0x3E53F58
	0x03AEC1E4 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

