Type: TMPro.TMP_SubMeshUI

Method: TMPro.TMP_FontAsset get_fontAsset()

Disassembly:
	0x03B1B688 LDR X0, [X19 + 0x118]
	0x03B1B68C CBZ X0, 0x3B1B6B4

ISIL:
	001 Move X0, [X0+216]
	002 Return X0

Method: System.Void set_fontAsset(TMPro.TMP_FontAsset value)

Disassembly:
	0x03B1B690 LDR X8, [X0]
	0x03B1B694 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X0+216], X1
	002 Return 

Method: TMPro.TMP_SpriteAsset get_spriteAsset()

Disassembly:
	0x03B1B698 LDR X2, [X8 + 0x2F8]
	0x03B1B69C LDR X1, [X8 + 0x300]

ISIL:
	001 Move X0, [X0+224]
	002 Return X0

Method: System.Void set_spriteAsset(TMPro.TMP_SpriteAsset value)

Disassembly:
	0x03B1B6A0 LDR X30, [X31], #0x20
	0x03B1B6A4 BR X2

ISIL:
	001 Move [X0+224], X1
	002 Return 

Method: UnityEngine.Texture get_mainTexture()

Disassembly:
	0x03B1B6A8 LDP X20, X19, [X31 + 0x10]
	0x03B1B6AC LDR X30, [X31], #0x20
	0x03B1B6B0 RET
	0x03B1B6B4 BL 0x1C16F20
	0x03B1B6B8 RET
	0x03B1B6BC STP X30, X19, [X31 - 0x10]!
	0x03B1B6C0 LDR X8, [X0]
	0x03B1B6C4 MOVZ W9, 0x1
	0x03B1B6C8 STRB W9, [X0 + 0x121]
	0x03B1B6CC MOV X19, X0
	0x03B1B6D0 LDR X9, [X8 + 0x3B8]
	0x03B1B6D4 LDR X1, [X8 + 0x3C0]
	0x03B1B6D8 BLR X9
	0x03B1B6DC LDR X8, [X19 + 0x80]
	0x03B1B6E0 CBZ X8, 0x3B1B6F8
	0x03B1B6E4 LDR X2, [X8 + 0x18]
	0x03B1B6E8 LDR X0, [X8 + 0x40]
	0x03B1B6EC LDR X1, [X8 + 0x28]
	0x03B1B6F0 LDP X30, X19, [X31], #0x10
	0x03B1B6F4 BR X2
	0x03B1B6F8 LDP X30, X19, [X31], #0x10
	0x03B1B6FC RET
	0x03B1B700 STP X30, X19, [X31 - 0x10]!
	0x03B1B704 LDR X8, [X0]
	0x03B1B708 MOV X19, X0
	0x03B1B70C LDP X9, X1, [X8 + 0x1C8]
	0x03B1B710 BLR X9
	0x03B1B714 TBZ X0, 0x0, 0x3B1B75C
	0x03B1B718 MOV X0, X19
	0x03B1B71C MOV X1, X31
	0x03B1B720 BL 0x3CDB488
	0x03B1B724 LDR X8, [X19 + 0x118]
	0x03B1B728 CBZ X8, 0x3B1B764
	0x03B1B72C MOV X19, X0
	0x03B1B730 MOV X0, X8
	0x03B1B734 MOV X1, X31
	0x03B1B738 BL 0x3AF8E0C
	0x03B1B73C CBZ X0, 0x3B1B764
	0x03B1B740 MOV X1, X31
	0x03B1B744 BL 0x3C3EA28
	0x03B1B748 CBZ X19, 0x3B1B764
	0x03B1B74C MOV X0, X19
	0x03B1B750 MOV X1, X31
	0x03B1B754 LDP X30, X19, [X31], #0x10
	0x03B1B758 B 0x3C3EAB8
	0x03B1B75C LDP X30, X19, [X31], #0x10
	0x03B1B760 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8C8000
	006 Move X20, 0x5D9000
	007 Move W8, [X21+1760]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5D9000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move X0, 0x63E000
	018 Move X0, [X0+824]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1760], W8
	022 Move X0, [X20]
	023 Move X20, [X19+240]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {57}
	036 Move X20, 0x63E000
	037 Move X20, [X20+824]
	038 Move X19, [X19+240]
	039 Move X0, [X20]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Compare X19, 0
	045 JumpIfEqual {63}
	046 Move X8, [X20]
	047 Move X0, X19
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X2, X31
	051 Move X8, [X8+184]
	052 Move W1, [X8]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Call Material.GetTexture, X0, X1
	056 Return X0
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X0, X31
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Return X0
	063 Call 0x1C17F20

Method: UnityEngine.Material get_material()

Disassembly:
	0x03B1B764 BL 0x1C16F20
	0x03B1B768 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move X1, [X0+240]

Method: System.Void set_material(UnityEngine.Material value)

Disassembly:
	0x03B1B860 ADRP X21, 0x8C7000
	0x03B1B864 ADRP X20, 0x5D8000
	0x03B1B868 LDRB W8, [X21 + 0x6EF]
	0x03B1B86C LDR X20, [X20 + 0x598]
	0x03B1B870 MOV X19, X0
	0x03B1B874 TBNZ X8, 0x0, 0x3B1B898
	0x03B1B878 ADRP X0, 0x5D8000
	0x03B1B87C LDR X0, [X0 + 0x598]
	0x03B1B880 BL 0x1C16CF4
	0x03B1B884 ADRP X0, 0x63D000
	0x03B1B888 LDR X0, [X0 + 0x338]
	0x03B1B88C BL 0x1C16CF4
	0x03B1B890 MOVZ W8, 0x1
	0x03B1B894 STRB W8, [X21 + 0x6EF]
	0x03B1B898 LDR X0, [X20]
	0x03B1B89C LDR X20, [X19 + 0xF0]
	0x03B1B8A0 LDR W8, [X0 + 0xE0]
	0x03B1B8A4 CBNZ W8, 0x3B1B8AC
	0x03B1B8A8 BL 0x1C16DFC
	0x03B1B8AC MOV X0, X20
	0x03B1B8B0 MOV X1, X31
	0x03B1B8B4 MOV X2, X31
	0x03B1B8B8 BL 0x3C3883C
	0x03B1B8BC TBZ X0, 0x0, 0x3B1B8CC
	0x03B1B8C0 LDP X20, X19, [X31 + 0x10]
	0x03B1B8C4 LDP X30, X21, [X31], #0x20
	0x03B1B8C8 RET
	0x03B1B8CC ADRP X21, 0x63D000
	0x03B1B8D0 LDR X21, [X21 + 0x338]
	0x03B1B8D4 LDR X20, [X19 + 0xF0]
	0x03B1B8D8 LDR X0, [X21]
	0x03B1B8DC LDR W8, [X0 + 0xE0]
	0x03B1B8E0 CBNZ W8, 0x3B1B8E8
	0x03B1B8E4 BL 0x1C16DFC
	0x03B1B8E8 CBZ X20, 0x3B1B9D4
	0x03B1B8EC LDR X8, [X21]
	0x03B1B8F0 MOV X0, X20
	0x03B1B8F4 MOV X2, X31
	0x03B1B8F8 LDR X8, [X8 + 0xB8]
	0x03B1B8FC LDR X1, [X8 + 0x120]
	0x03B1B900 BL 0x3C14D4C
	0x03B1B904 TBZ X0, 0x0, 0x3B1B974
	0x03B1B908 MOV X0, X19
	0x03B1B90C BL 0x3B1ACBC
	0x03B1B910 CBZ X0, 0x3B1B9D4
	0x03B1B914 LDR X8, [X0]
	0x03B1B918 LDR X9, [X8 + 0x568]
	0x03B1B91C LDR X1, [X8 + 0x570]
	0x03B1B920 BLR X9
	0x03B1B924 LDR X8, [X21]
	0x03B1B928 MOV X20, X0
	0x03B1B92C LDR W9, [X8 + 0xE0]
	0x03B1B930 CBNZ W9, 0x3B1B93C
	0x03B1B934 MOV X0, X8
	0x03B1B938 BL 0x1C16DFC
	0x03B1B93C CBZ X20, 0x3B1B9D4
	0x03B1B940 LDR X8, [X21]
	0x03B1B944 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8C8000
	007 Move X21, 0x5D9000
	008 Move W8, [X22+1761]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5D9000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1761], W8
	021 Move X0, [X21]
	022 Move X21, [X19+240]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X21
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Inequality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {53}
	035 Move X0, [X19+240]
	036 Compare X0, 0
	037 JumpIfEqual {73}
	038 Move X1, X31
	039 Call Object.GetInstanceID, X0
	040 Compare X20, 0
	041 JumpIfEqual {73}
	042 Move W21, W0
	043 Move X0, X20
	044 Move X1, X31
	045 Call Object.GetInstanceID, X0
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Return 
	053 Move X0, X19
	054 Move [X19+232], X20
	055 Move [X19+240], X20
	056 Call TMP_SubMeshUI.GetPaddingForMaterial, X0
	057 Move X8, [X19]
	058 Move [X19+268], S0
	059 Move X0, X19
	060 Move X9, [X8+760]
	061 Move X1, [X8+768]
	062 NotImplemented "Instruction BLR not yet implemented."
	063 Move X8, [X19]
	064 Move X0, X19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X2, [X8+776]
	070 Move X1, [X8+784]
	071 Move X30, [X31+48]
	072 CallNoReturn X2
	073 Call 0x1C17F20

Method: UnityEngine.Material get_sharedMaterial()

Disassembly:
	0x03B1B9BC MOV X0, X20
	0x03B1B9C0 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+240]
	002 Return X0

Method: System.Void set_sharedMaterial(UnityEngine.Material value)

Disassembly:
	0x03B1B9C4 MOV W2, W31
	0x03B1B9C8 MOV X3, X31
	0x03B1B9CC LDP X30, X21, [X31], #0x20
	0x03B1B9D0 B 0x3E2293C
	0x03B1B9D4 BL 0x1C16F20
	0x03B1B9D8 MOV X1, X31
	0x03B1B9DC B 0x3E37F50
	0x03B1B9E0 LDR X0, [X0 + 0xF0]
	0x03B1B9E4 RET
	0x03B1B9E8 STP X30, X21, [X31 - 0x20]!
	0x03B1B9EC STP X20, X19, [X31 + 0x10]
	0x03B1B9F0 ADRP X19, 0x8C7000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move [X0+240], X1
	005 Move [X0+32], X1
	006 Call TMP_SubMeshUI.GetPaddingForMaterial, X0
	007 Move X8, [X19]
	008 Move [X19+268], S0
	009 Move X0, X19
	010 Move X2, [X8+776]
	011 Move X1, [X8+784]
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 CallNoReturn X2

Method: UnityEngine.Material get_fallbackMaterial()

Disassembly:
	0x03B1BA24 STRB W8, [X19 + 0x6F1]
	0x03B1BA28 LDR X0, [X21]

ISIL:
	001 Move X0, [X0+248]
	002 Return X0

Method: System.Void set_fallbackMaterial(UnityEngine.Material value)

Disassembly:
	0x03B1BA2C BL 0x1C16F10
	0x03B1BA30 MOV X1, X20
	0x03B1BA34 MOV X2, X31
	0x03B1BA38 MOV X19, X0
	0x03B1BA3C BL 0x3C145DC
	0x03B1BA40 CBZ X20, 0x3B1BAA4
	0x03B1BA44 MOV X0, X20
	0x03B1BA48 MOV X1, X31
	0x03B1BA4C BL 0x3C15294
	0x03B1BA50 CBZ X19, 0x3B1BAA4
	0x03B1BA54 ADRP X20, 0x63E000
	0x03B1BA58 LDR X20, [X20 + 0x1E0]
	0x03B1BA5C MOV X1, X0
	0x03B1BA60 MOV X0, X19
	0x03B1BA64 MOV X2, X31
	0x03B1BA68 BL 0x3C152D0
	0x03B1BA6C MOV X0, X19
	0x03B1BA70 MOV X1, X31
	0x03B1BA74 BL 0x3C389D4
	0x03B1BA78 LDR X1, [X20]
	0x03B1BA7C MOV X2, X31
	0x03B1BA80 BL 0x321B938
	0x03B1BA84 MOV X1, X0
	0x03B1BA88 MOV X0, X19
	0x03B1BA8C MOV X2, X31
	0x03B1BA90 BL 0x3C38A84
	0x03B1BA94 MOV X0, X19
	0x03B1BA98 LDP X20, X19, [X31 + 0x10]
	0x03B1BA9C LDP X30, X21, [X31], #0x20
	0x03B1BAA0 RET
	0x03B1BAA4 BL 0x1C16F20
	0x03B1BAA8 STR X30, [X31 - 0x10]!
	0x03B1BAAC MOV X1, X31
	0x03B1BAB0 BL 0x3CDBD2C
	0x03B1BAB4 CBZ X0, 0x3B1BAC4
	0x03B1BAB8 MOV X1, X31
	0x03B1BABC LDR X30, [X31], #0x10
	0x03B1BAC0 B 0x3E22C80
	0x03B1BAC4 BL 0x1C16F20
	0x03B1BAC8 MOV X1, X31
	0x03B1BACC B 0x3E37FD0
	0x03B1BAD0 STP W1, W2, [X0]
	0x03B1BAD4 RET
	0x03B1BAD8 STR X30, [X31 - 0x30]!
	0x03B1BADC STP X22, X21, [X31 + 0x10]
	0x03B1BAE0 STP X20, X19, [X31 + 0x20]
	0x03B1BAE4 ADRP X22, 0x8C7000
	0x03B1BAE8 LDRB W8, [X22 + 0x6F2]
	0x03B1BAEC MOV W19, W2
	0x03B1BAF0 MOV X21, X1
	0x03B1BAF4 MOV X20, X0
	0x03B1BAF8 TBNZ X8, 0x0, 0x3B1BB1C
	0x03B1BAFC ADRP X0, 0x5D8000
	0x03B1BB00 LDR X0, [X0 + 0x598]
	0x03B1BB04 BL 0x1C16CF4
	0x03B1BB08 ADRP X0, 0x63D000
	0x03B1BB0C LDR X0, [X0 + 0x578]
	0x03B1BB10 BL 0x1C16CF4
	0x03B1BB14 MOVZ W8, 0x1
	0x03B1BB18 STRB W8, [X22 + 0x6F2]
	0x03B1BB1C STR X21, [X20]
	0x03B1BB20 CBZ X21, 0x3B1BBC0
	0x03B1BB24 ADRP X8, 0x5D8000
	0x03B1BB28 LDR X9, [X21 + 0x18]
	0x03B1BB2C LDR X8, [X8 + 0x598]
	0x03B1BB30 CBZ X9, 0x3B1BB54
	0x03B1BB34 ADRP X10, 0x63D000
	0x03B1BB38 LDR X10, [X10 + 0x578]
	0x03B1BB3C LDR X11, [X9]
	0x03B1BB40 LDR X10, [X10]
	0x03B1BB44 LDRB W13, [X11 + 0x130]
	0x03B1BB48 LDRB W12, [X10 + 0x130]
	0x03B1BB4C CMP W13, W12
	0x03B1BB50 B.CS 0x3B1BB5C
	0x03B1BB54 MOV X21, X31
	0x03B1BB58 B 0x3B1BB70
	0x03B1BB5C LDR X11, [X11 + 0xC8]
	0x03B1BB60 ADD X11, X11, X12, 0x3, LSL
	0x03B1BB64 LDUR X11, [X11 - 0x8]
	0x03B1BB68 CMP X11, X10
	0x03B1BB6C CSEL X21, X9, X31, EQ
	0x03B1BB70 STR X21, [X20 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x8C8000
	008 Move X22, 0x5D9000
	009 Move W8, [X21+1762]
	010 Move X22, [X22+1432]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x5D9000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x63E000
	021 Move X0, [X0+1568]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1762], W8
	025 Move X0, [X22]
	026 Move X21, [X19+248]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X21
	032 Move X1, X20
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {46}
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Move X23, [X31+56]
	045 Return 
	046 Move X0, [X22]
	047 Move X21, [X19+248]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X23, 0x63E000
	053 Move X23, [X23+1568]
	054 Move X0, X21
	055 Move X1, X31
	056 Move X2, X31
	057 Call Object.op_Inequality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {84}
	062 Move X0, [X22]
	063 Move X21, [X19+248]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X0, X21
	069 Move X1, X20
	070 Move X2, X31
	071 Call Object.op_Inequality, X0, X1
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {84}
	076 Move X0, [X23]
	077 Move X21, [X19+248]
	078 Move W8, [X0+224]
	079 Compare W8, 0
	080 JumpIfNotEqual {82}
	081 Call 0x1C17DFC
	082 Move X0, X21
	083 Call TMP_MaterialManager.ReleaseFallbackMaterial, X0
	084 Move [X19+248], X20
	085 Move X0, [X23]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X0, X20
	091 Call TMP_MaterialManager.AddFallbackMaterialReference, X0
	092 Move X8, [X19+248]
	093 Move X0, X19
	094 Move [X19+240], X8
	095 Move [X19+32], X8
	096 Call TMP_SubMeshUI.GetPaddingForMaterial, X0
	097 Move X8, [X19]
	098 Move [X19+268], S0
	099 Move X0, X19
	100 Move X20, [X31+32]
	101 Move X19, [X31+40]
	102 Move X2, [X8+776]
	103 Move X1, [X8+784]
	104 Move X22, [X31+16]
	105 Move X21, [X31+24]
	106 Move X30, [X31+48]
	107 Move X23, [X31+56]
	108 CallNoReturn X2

Method: UnityEngine.Material get_fallbackSourceMaterial()

Disassembly:
	0x03B1BB74 LDR X0, [X8]
	0x03B1BB78 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move X0, [X0+256]
	002 Return X0

Method: System.Void set_fallbackSourceMaterial(UnityEngine.Material value)

Disassembly:
	0x03B1BB7C CBNZ W8, 0x3B1BB84
	0x03B1BB80 BL 0x1C16DFC

ISIL:
	001 Move [X0+256], X1
	002 Return 

Method: UnityEngine.Material get_materialForRendering()

Disassembly:
	0x03B1BB84 MOV X0, X21
	0x03B1BB88 MOV X1, X31
	0x03B1BB8C MOV X2, X31
	0x03B1BB90 BL 0x3C354F8
	0x03B1BB94 MOV X8, X31
	0x03B1BB98 TBZ X0, 0x0, 0x3B1BBA8
	0x03B1BB9C LDR X8, [X20 + 0x8]
	0x03B1BBA0 CBZ X8, 0x3B1BBC0
	0x03B1BBA4 LDR X8, [X8 + 0x20]
	0x03B1BBA8 STR X8, [X20 + 0x10]
	0x03B1BBAC STR W19, [X20 + 0x18]
	0x03B1BBB0 LDP X20, X19, [X31 + 0x20]
	0x03B1BBB4 LDP X22, X21, [X31 + 0x10]
	0x03B1BBB8 LDR X30, [X31], #0x30
	0x03B1BBBC RET
	0x03B1BBC0 BL 0x1C16F20
	0x03B1BBC4 STR X30, [X31 - 0x10]!
	0x03B1BBC8 LDR X8, [X0]
	0x03B1BBCC CBZ X8, 0x3B1BBDC
	0x03B1BBD0 LDR W0, [X8 + 0x18]
	0x03B1BBD4 LDR X30, [X31], #0x10
	0x03B1BBD8 RET
	0x03B1BBDC BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8C8000
	006 Move X20, 0x63E000
	007 Move W8, [X21+1763]
	008 Move X20, [X20+1568]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x63E000
	015 Move X0, [X0+1568]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1763], W8
	019 Move X0, [X20]
	020 Move X20, [X19+240]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X1, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call TMP_MaterialManager.GetMaterialForRendering, X0, X1
	032 Return X0

Method: System.Boolean get_isDefaultMaterial()

Disassembly:
	0x03B1BBE0 LDR W0, [X0 + 0x8]
	0x03B1BBE4 RET

ISIL:
	001 Move W0, [X0+264]
	002 Return X0

Method: System.Void set_isDefaultMaterial(System.Boolean value)

Disassembly:
	0x03B1BBE8 STR W1, [X0 + 0x8]
	0x03B1BBEC RET
	0x03B1BBF0 STR X30, [X31 - 0x10]!

ISIL:
	001 And W8, W1, 1
	002 Move [X0+264], W8
	003 Return 

Method: System.Single get_padding()

Disassembly:
	0x03B1BBF4 LDR X8, [X0]
	0x03B1BBF8 CBZ X8, 0x3B1BC18

ISIL:
	001 Move V0, [X0+268]
	002 Return V0

Method: System.Void set_padding(System.Single value)

Disassembly:
	0x03B1BBFC LDR W9, [X8 + 0x18]
	0x03B1BC00 CMP W9, W1

ISIL:
	001 Move [X0+268], S0
	002 Return 

Method: UnityEngine.Mesh get_mesh()

Disassembly:
	0x03B1BC04 B.LS 0x3B1BC1C
	0x03B1BC08 ADD X8, X8, W1, 0x2, SXTW
	0x03B1BC0C LDR W0, [X8 + 0x20]
	0x03B1BC10 LDR X30, [X31], #0x10
	0x03B1BC14 RET
	0x03B1BC18 BL 0x1C16F20
	0x03B1BC1C BL 0x1C16F28
	0x03B1BC20 STP X30, X21, [X31 - 0x20]!
	0x03B1BC24 STP X20, X19, [X31 + 0x10]
	0x03B1BC28 LDR X8, [X0]
	0x03B1BC2C CBZ X8, 0x3B1BC78
	0x03B1BC30 LDR W9, [X8 + 0x18]
	0x03B1BC34 MOV W19, W2
	0x03B1BC38 MOV W20, W1
	0x03B1BC3C CMP W9, W1
	0x03B1BC40 B.GT 0x3B1BC58
	0x03B1BC44 MOV W1, W20
	0x03B1BC48 MOV X21, X0
	0x03B1BC4C BL 0x3B1BC80
	0x03B1BC50 LDR X8, [X21]
	0x03B1BC54 CBZ X8, 0x3B1BC78
	0x03B1BC58 LDR W9, [X8 + 0x18]
	0x03B1BC5C CMP W9, W20
	0x03B1BC60 B.LS 0x3B1BC7C
	0x03B1BC64 ADD X8, X8, W20, 0x2, SXTW
	0x03B1BC68 STR W19, [X8 + 0x20]
	0x03B1BC6C LDP X20, X19, [X31 + 0x10]
	0x03B1BC70 LDP X30, X21, [X31], #0x20
	0x03B1BC74 RET
	0x03B1BC78 BL 0x1C16F20
	0x03B1BC7C BL 0x1C16F28
	0x03B1BC80 STR X30, [X31 - 0x30]!
	0x03B1BC84 STP X22, X21, [X31 + 0x10]
	0x03B1BC88 STP X20, X19, [X31 + 0x20]
	0x03B1BC8C ADRP X22, 0x8C7000
	0x03B1BC90 ADRP X21, 0x63E000
	0x03B1BC94 LDRB W8, [X22 + 0x6F5]
	0x03B1BC98 LDR X21, [X21 + 0xA58]
	0x03B1BC9C MOV W20, W1
	0x03B1BCA0 MOV X19, X0
	0x03B1BCA4 TBNZ X8, 0x0, 0x3B1BCBC
	0x03B1BCA8 ADRP X0, 0x63E000
	0x03B1BCAC LDR X0, [X0 + 0xA58]
	0x03B1BCB0 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8C8000
	006 Move X20, 0x5D9000
	007 Move W8, [X21+1764]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5E0000
	015 Move X0, [X0+1792]
	016 Call 0x1C17CF4
	017 Move X0, 0x5D9000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1764], W8
	022 Move X0, [X20]
	023 Move X20, [X19+272]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {50}
	036 Move X8, 0x5E0000
	037 Move X8, [X8+1792]
	038 Move X0, [X8]
	039 Call 0x1C17F10
	040 Move X1, X31
	041 Move X20, X0
	042 Call Mesh..ctor, X0
	043 Move [X19+272], X20
	044 Compare X20, 0
	045 JumpIfEqual {56}
	046 Move W1, 61
	047 Move X0, X20
	048 Move X2, X31
	049 Call Object.set_hideFlags, X0, X1
	050 Move X0, [X19+272]
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Return X0
	056 Call 0x1C17F20

Method: System.Void set_mesh(UnityEngine.Mesh value)

Disassembly:
	0x03B1BCB4 MOVZ W8, 0x1
	0x03B1BCB8 STRB W8, [X22 + 0x6F5]

ISIL:
	001 Move [X0+272], X1
	002 Return 

Method: TMPro.TMP_Text get_textComponent()

Disassembly:
	0x03B1BCBC ADD W0, W20, 0x1
	0x03B1BCC0 MOV X1, X31
	0x03B1BCC4 BL 0x3C2B340
	0x03B1BCC8 LDR X2, [X21]
	0x03B1BCCC MOV W1, W0
	0x03B1BCD0 MOV X0, X19
	0x03B1BCD4 LDP X20, X19, [X31 + 0x20]
	0x03B1BCD8 LDP X22, X21, [X31 + 0x10]
	0x03B1BCDC LDR X30, [X31], #0x30
	0x03B1BCE0 B 0x2144574
	0x03B1BCE4 STR X30, [X31 - 0x30]!
	0x03B1BCE8 STP X22, X21, [X31 + 0x10]
	0x03B1BCEC STP X20, X19, [X31 + 0x20]
	0x03B1BCF0 ADRP X21, 0x8C7000
	0x03B1BCF4 ADRP X22, 0x601000
	0x03B1BCF8 LDRB W8, [X21 + 0x6F4]
	0x03B1BCFC LDR X22, [X22 + 0xD08]
	0x03B1BD00 MOV W20, W1
	0x03B1BD04 MOV X19, X0
	0x03B1BD08 TBNZ X8, 0x0, 0x3B1BD20
	0x03B1BD0C ADRP X0, 0x601000
	0x03B1BD10 LDR X0, [X0 + 0xD08]
	0x03B1BD14 BL 0x1C16CF4
	0x03B1BD18 MOVZ W8, 0x1
	0x03B1BD1C STRB W8, [X21 + 0x6F4]
	0x03B1BD20 LDR X0, [X22]
	0x03B1BD24 MOV W1, W20
	0x03B1BD28 BL 0x1C16D6C
	0x03B1BD2C STR X0, [X19]
	0x03B1BD30 STR W31, [X19 + 0x8]
	0x03B1BD34 LDP X20, X19, [X31 + 0x20]
	0x03B1BD38 LDP X22, X21, [X31 + 0x10]
	0x03B1BD3C LDR X30, [X31], #0x30
	0x03B1BD40 RET
	0x03B1BD44 STR X30, [X31 - 0x20]!
	0x03B1BD48 STP X20, X19, [X31 + 0x10]
	0x03B1BD4C ADRP X19, 0x8C7000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8C8000
	006 Move X20, 0x5D9000
	007 Move W8, [X21+1765]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x63F000
	015 Move X0, [X0+2616]
	016 Call 0x1C17CF4
	017 Move X0, 0x5D9000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1765], W8
	022 Move X0, [X20]
	023 Move X20, [X19+280]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {42}
	036 Move X8, 0x63F000
	037 Move X8, [X8+2616]
	038 Move X0, X19
	039 Move X1, [X8]
	040 Call 0x21A4F50, X0
	041 Move [X19+280], X0
	042 Move X0, [X19+280]
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0

Method: TMPro.TMP_SubMeshUI AddSubTextObject(TMPro.TextMeshProUGUI textComponent, TMPro.MaterialReference materialReference)

Disassembly:
	0x03B1BD50 ADRP X20, 0x63E000
	0x03B1BD54 LDRB W8, [X19 + 0x6F6]
	0x03B1BD58 LDR X20, [X20 + 0x398]
	0x03B1BD5C TBNZ X8, 0x0, 0x3B1BD74
	0x03B1BD60 ADRP X0, 0x63E000
	0x03B1BD64 LDR X0, [X0 + 0x398]
	0x03B1BD68 BL 0x1C16CF4
	0x03B1BD6C MOVZ W8, 0x1
	0x03B1BD70 STRB W8, [X19 + 0x6F6]
	0x03B1BD74 LDR X0, [X20]
	0x03B1BD78 BL 0x1C16F10
	0x03B1BD7C MOV X1, X31
	0x03B1BD80 MOV X19, X0
	0x03B1BD84 BL 0x33BDD8C
	0x03B1BD88 LDR X8, [X20]
	0x03B1BD8C LDR X8, [X8 + 0xB8]
	0x03B1BD90 STR X19, [X8]
	0x03B1BD94 LDP X20, X19, [X31 + 0x10]
	0x03B1BD98 LDR X30, [X31], #0x20
	0x03B1BD9C RET
	0x03B1BDA0 MOV X1, X31
	0x03B1BDA4 B 0x33BDD8C
	0x03B1BDA8 RET
	0x03B1BDAC LDRB W0, [X0 + 0x10]
	0x03B1BDB0 RET
	0x03B1BDB4 LDR W0, [X0 + 0x14]
	0x03B1BDB8 RET
	0x03B1BDBC STR W1, [X0 + 0x14]
	0x03B1BDC0 RET
	0x03B1BDC4 LDR X0, [X0 + 0x18]
	0x03B1BDC8 RET
	0x03B1BDCC STR X1, [X0 + 0x18]
	0x03B1BDD0 RET
	0x03B1BDD4 LDR X0, [X0 + 0x20]
	0x03B1BDD8 RET
	0x03B1BDDC STR X1, [X0 + 0x20]
	0x03B1BDE0 RET
	0x03B1BDE4 LDR W0, [X0 + 0x28]
	0x03B1BDE8 RET
	0x03B1BDEC STR W1, [X0 + 0x28]
	0x03B1BDF0 RET
	0x03B1BDF4 LDR V0, [X0 + 0x2C]
	0x03B1BDF8 RET
	0x03B1BDFC STR S0, [X0 + 0x2C]
	0x03B1BE00 RET
	0x03B1BE04 STR X30, [X31 - 0x50]!
	0x03B1BE08 STP X26, X25, [X31 + 0x10]
	0x03B1BE0C STP X24, X23, [X31 + 0x20]
	0x03B1BE10 STP X22, X21, [X31 + 0x30]
	0x03B1BE14 STP X20, X19, [X31 + 0x40]
	0x03B1BE18 ADRP X26, 0x8C7000
	0x03B1BE1C ADRP X25, 0x63E000
	0x03B1BE20 ADRP X24, 0x63E000
	0x03B1BE24 ADRP X23, 0x63E000
	0x03B1BE28 ADRP X22, 0x63E000
	0x03B1BE2C ADRP X21, 0x63E000
	0x03B1BE30 ADRP X20, 0x63E000
	0x03B1BE34 LDR X25, [X25 + 0x220]
	0x03B1BE38 LDRB W8, [X26 + 0x6F7]
	0x03B1BE3C LDR X24, [X24 + 0xA60]
	0x03B1BE40 LDR X23, [X23 + 0xA68]
	0x03B1BE44 LDR X22, [X22 + 0x308]
	0x03B1BE48 LDR X21, [X21 + 0xA70]
	0x03B1BE4C LDR X20, [X20 + 0xA78]
	0x03B1BE50 MOV X19, X0
	0x03B1BE54 TBNZ X8, 0x0, 0x3B1BEA8
	0x03B1BE58 ADRP X0, 0x63E000
	0x03B1BE5C LDR X0, [X0 + 0x220]
	0x03B1BE60 BL 0x1C16CF4
	0x03B1BE64 ADRP X0, 0x63E000
	0x03B1BE68 LDR X0, [X0 + 0x308]
	0x03B1BE6C BL 0x1C16CF4
	0x03B1BE70 ADRP X0, 0x63E000
	0x03B1BE74 LDR X0, [X0 + 0xA68]
	0x03B1BE78 BL 0x1C16CF4
	0x03B1BE7C ADRP X0, 0x63E000
	0x03B1BE80 LDR X0, [X0 + 0xA78]
	0x03B1BE84 BL 0x1C16CF4
	0x03B1BE88 ADRP X0, 0x63E000
	0x03B1BE8C LDR X0, [X0 + 0xA70]
	0x03B1BE90 BL 0x1C16CF4
	0x03B1BE94 ADRP X0, 0x63E000
	0x03B1BE98 LDR X0, [X0 + 0xA60]
	0x03B1BE9C BL 0x1C16CF4
	0x03B1BEA0 MOVZ W8, 0x1
	0x03B1BEA4 STRB W8, [X26 + 0x6F7]
	0x03B1BEA8 MOV X0, X19
	0x03B1BEAC MOV X1, X31
	0x03B1BEB0 BL 0x33BDD8C
	0x03B1BEB4 LDR X0, [X25]
	0x03B1BEB8 MOVZ W1, 0x8
	0x03B1BEBC BL 0x1C16D6C
	0x03B1BEC0 STR X0, [X19 + 0x38]
	0x03B1BEC4 LDR X0, [X24]
	0x03B1BEC8 MOVZ W1, 0x10
	0x03B1BECC BL 0x1C16D6C
	0x03B1BED0 STR X0, [X19 + 0x40]
	0x03B1BED4 LDR X0, [X23]
	0x03B1BED8 MOV W1, W31
	0x03B1BEDC BL 0x1C16D6C
	0x03B1BEE0 STR X0, [X19 + 0x48]
	0x03B1BEE4 LDR X0, [X22]
	0x03B1BEE8 MOVZ W1, 0x2
	0x03B1BEEC BL 0x1C16D6C
	0x03B1BEF0 STR X0, [X19 + 0x50]
	0x03B1BEF4 LDR X0, [X21]
	0x03B1BEF8 MOVZ W1, 0x4
	0x03B1BEFC BL 0x1C16D6C
	0x03B1BF00 STR X0, [X19 + 0x58]
	0x03B1BF04 LDR X0, [X20]
	0x03B1BF08 MOVZ W1, 0x1
	0x03B1BF0C BL 0x1C16D6C
	0x03B1BF10 STR X0, [X19 + 0x60]
	0x03B1BF14 LDP X20, X19, [X31 + 0x40]
	0x03B1BF18 LDP X22, X21, [X31 + 0x30]
	0x03B1BF1C LDP X24, X23, [X31 + 0x20]
	0x03B1BF20 LDP X26, X25, [X31 + 0x10]
	0x03B1BF24 LDR X30, [X31], #0x50
	0x03B1BF28 RET
	0x03B1BF2C STP X30, X27, [X31 - 0x50]!
	0x03B1BF30 STP X26, X25, [X31 + 0x10]
	0x03B1BF34 STP X24, X23, [X31 + 0x20]
	0x03B1BF38 STP X22, X21, [X31 + 0x30]
	0x03B1BF3C STP X20, X19, [X31 + 0x40]
	0x03B1BF40 ADRP X27, 0x8C7000
	0x03B1BF44 ADRP X26, 0x63E000
	0x03B1BF48 ADRP X25, 0x63E000
	0x03B1BF4C ADRP X24, 0x63E000
	0x03B1BF50 ADRP X23, 0x63E000
	0x03B1BF54 ADRP X22, 0x63E000
	0x03B1BF58 ADRP X21, 0x63E000
	0x03B1BF5C LDR X26, [X26 + 0x220]
	0x03B1BF60 LDRB W8, [X27 + 0x6F8]
	0x03B1BF64 LDR X25, [X25 + 0xA60]
	0x03B1BF68 LDR X24, [X24 + 0xA68]
	0x03B1BF6C LDR X23, [X23 + 0x308]
	0x03B1BF70 LDR X22, [X22 + 0xA70]
	0x03B1BF74 LDR X21, [X21 + 0xA78]
	0x03B1BF78 MOV W20, W1
	0x03B1BF7C MOV X19, X0
	0x03B1BF80 TBNZ X8, 0x0, 0x3B1BFD4
	0x03B1BF84 ADRP X0, 0x63E000
	0x03B1BF88 LDR X0, [X0 + 0x220]
	0x03B1BF8C BL 0x1C16CF4
	0x03B1BF90 ADRP X0, 0x63E000
	0x03B1BF94 LDR X0, [X0 + 0x308]
	0x03B1BF98 BL 0x1C16CF4
	0x03B1BF9C ADRP X0, 0x63E000
	0x03B1BFA0 LDR X0, [X0 + 0xA68]
	0x03B1BFA4 BL 0x1C16CF4
	0x03B1BFA8 ADRP X0, 0x63E000
	0x03B1BFAC LDR X0, [X0 + 0xA78]
	0x03B1BFB0 BL 0x1C16CF4
	0x03B1BFB4 ADRP X0, 0x63E000
	0x03B1BFB8 LDR X0, [X0 + 0xA70]
	0x03B1BFBC BL 0x1C16CF4
	0x03B1BFC0 ADRP X0, 0x63E000
	0x03B1BFC4 LDR X0, [X0 + 0xA60]
	0x03B1BFC8 BL 0x1C16CF4
	0x03B1BFCC MOVZ W8, 0x1
	0x03B1BFD0 STRB W8, [X27 + 0x6F8]
	0x03B1BFD4 MOV X0, X19
	0x03B1BFD8 MOV X1, X31
	0x03B1BFDC BL 0x33BDD8C
	0x03B1BFE0 LDR X0, [X26]
	0x03B1BFE4 MOV W1, W20
	0x03B1BFE8 BL 0x1C16D6C
	0x03B1BFEC STR X0, [X19 + 0x38]
	0x03B1BFF0 LDR X0, [X25]
	0x03B1BFF4 MOVZ W1, 0x10
	0x03B1BFF8 BL 0x1C16D6C
	0x03B1BFFC STR X0, [X19 + 0x40]
	0x03B1C000 LDR X0, [X24]
	0x03B1C004 MOV W1, W31
	0x03B1C008 BL 0x1C16D6C
	0x03B1C00C STR X0, [X19 + 0x48]
	0x03B1C010 LDR X0, [X23]
	0x03B1C014 MOVZ W1, 0x2
	0x03B1C018 BL 0x1C16D6C
	0x03B1C01C STR X0, [X19 + 0x50]
	0x03B1C020 LDR X0, [X22]
	0x03B1C024 MOVZ W1, 0x4
	0x03B1C028 BL 0x1C16D6C
	0x03B1C02C STR X0, [X19 + 0x58]
	0x03B1C030 LDR X0, [X21]
	0x03B1C034 MOVZ W1, 0x1
	0x03B1C038 BL 0x1C16D6C
	0x03B1C03C STR X0, [X19 + 0x60]
	0x03B1C040 LDP X20, X19, [X31 + 0x40]
	0x03B1C044 LDP X22, X21, [X31 + 0x30]
	0x03B1C048 LDP X24, X23, [X31 + 0x20]
	0x03B1C04C LDP X26, X25, [X31 + 0x10]
	0x03B1C050 LDP X30, X27, [X31], #0x50
	0x03B1C054 RET
	0x03B1C058 STP X30, X27, [X31 - 0x50]!
	0x03B1C05C STP X26, X25, [X31 + 0x10]
	0x03B1C060 STP X24, X23, [X31 + 0x20]
	0x03B1C064 STP X22, X21, [X31 + 0x30]
	0x03B1C068 STP X20, X19, [X31 + 0x40]
	0x03B1C06C ADRP X27, 0x8C6000
	0x03B1C070 ADRP X26, 0x63D000
	0x03B1C074 ADRP X25, 0x63D000
	0x03B1C078 ADRP X24, 0x63D000
	0x03B1C07C ADRP X23, 0x63D000
	0x03B1C080 ADRP X22, 0x63D000
	0x03B1C084 ADRP X21, 0x63D000
	0x03B1C088 LDR X26, [X26 + 0x220]
	0x03B1C08C LDRB W8, [X27 + 0x6F9]
	0x03B1C090 LDR X25, [X25 + 0xA60]
	0x03B1C094 LDR X24, [X24 + 0xA68]
	0x03B1C098 LDR X23, [X23 + 0x308]
	0x03B1C09C LDR X22, [X22 + 0xA70]
	0x03B1C0A0 LDR X21, [X21 + 0xA78]
	0x03B1C0A4 MOV X20, X1
	0x03B1C0A8 MOV X19, X0
	0x03B1C0AC TBNZ X8, 0x0, 0x3B1C100
	0x03B1C0B0 ADRP X0, 0x63D000
	0x03B1C0B4 LDR X0, [X0 + 0x220]
	0x03B1C0B8 BL 0x1C16CF4
	0x03B1C0BC ADRP X0, 0x63D000
	0x03B1C0C0 LDR X0, [X0 + 0x308]
	0x03B1C0C4 BL 0x1C16CF4
	0x03B1C0C8 ADRP X0, 0x63D000
	0x03B1C0CC LDR X0, [X0 + 0xA68]
	0x03B1C0D0 BL 0x1C16CF4
	0x03B1C0D4 ADRP X0, 0x63D000
	0x03B1C0D8 LDR X0, [X0 + 0xA78]
	0x03B1C0DC BL 0x1C16CF4
	0x03B1C0E0 ADRP X0, 0x63D000
	0x03B1C0E4 LDR X0, [X0 + 0xA70]
	0x03B1C0E8 BL 0x1C16CF4
	0x03B1C0EC ADRP X0, 0x63D000
	0x03B1C0F0 LDR X0, [X0 + 0xA60]
	0x03B1C0F4 BL 0x1C16CF4
	0x03B1C0F8 MOVZ W8, 0x1
	0x03B1C0FC STRB W8, [X27 + 0x6F9]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x8C8000
	010 Move W8, [X21+1766]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {46}
	017 Move X0, 0x639000
	018 Move X0, [X0+3264]
	019 Call 0x1C17CF4
	020 Move X0, 0x63F000
	021 Move X0, [X0+2624]
	022 Call 0x1C17CF4
	023 Move X0, 0x639000
	024 Move X0, [X0+2880]
	025 Call 0x1C17CF4
	026 Move X0, 0x5D9000
	027 Move X0, [X0+2648]
	028 Call 0x1C17CF4
	029 Move X0, 0x63F000
	030 Move X0, [X0+2632]
	031 Call 0x1C17CF4
	032 Move X0, 0x5E1000
	033 Move X0, [X0+3168]
	034 Call 0x1C17CF4
	035 Move X0, 0x5D9000
	036 Move X0, [X0+1728]
	037 Call 0x1C17CF4
	038 Move X0, 0x63F000
	039 Move X0, [X0+2640]
	040 Call 0x1C17CF4
	041 Move X0, 0x5D9000
	042 Move X0, [X0+2120]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X21+1766], W8
	046 Move X0, [X19+24]
	047 Compare X0, 0
	048 JumpIfEqual {264}
	049 Move X21, 0x63F000
	050 Move X22, 0x5D9000
	051 Move X23, 0x5E1000
	052 Move X24, 0x63F000
	053 Move X25, 0x5D9000
	054 Move X21, [X21+2640]
	055 Move X22, [X22+2120]
	056 Move X23, [X23+3168]
	057 Move X24, [X24+2632]
	058 Move X25, [X25+1728]
	059 Move X1, X31
	060 Call Object.get_name, X0
	061 Move X8, [X21]
	062 Move X2, [X22]
	063 Move X1, X0
	064 Move X3, X31
	065 Move X0, X8
	066 Call String.Concat, X0, X1, X2
	067 Move X8, [X23]
	068 Move X22, X0
	069 Move W1, 1
	070 Move X0, X8
	071 Call 0x1C17D6C
	072 Move X8, [X25]
	073 Move X21, [X24]
	074 Move X23, X0
	075 Move W9, [X8+224]
	076 Compare W9, 0
	077 JumpIfNotEqual {80}
	078 Move X0, X8
	079 Call 0x1C17DFC
	080 Move X0, X21
	081 Move X1, X31
	082 Call Type.GetTypeFromHandle, X0
	083 Compare X23, 0
	084 JumpIfEqual {264}
	085 Move X21, X0
	086 Compare X0, 0
	087 JumpIfEqual {94}
	088 Move X8, [X23]
	089 Move X0, X21
	090 Move X1, [X8+64]
	091 Call 0x1C17E00
	092 Compare X0, 0
	093 JumpIfEqual {266}
	094 Move W8, [X23+24]
	095 Compare W8, 0
	096 JumpIfEqual {265}
	097 Move X8, 0x5D9000
	098 Move X8, [X8+2648]
	099 Move [X23+32], X21
	100 Move X0, [X8]
	101 Call 0x1C17F10
	102 Move X1, X22
	103 Move X2, X23
	104 Move X3, X31
	105 Move X21, X0
	106 Call GameObject..ctor, X0, X1, X2
	107 Compare X21, 0
	108 JumpIfEqual {264}
	109 Move W1, 52
	110 Move X0, X21
	111 Move X2, X31
	112 Call Object.set_hideFlags, X0, X1
	113 Move X0, X21
	114 Move X1, X31
	115 Call GameObject.get_transform, X0
	116 Compare X20, 0
	117 JumpIfEqual {264}
	118 Move X22, X0
	119 Move X0, X20
	120 Move X1, X31
	121 Call TMP_Text.get_transform, X0
	122 Compare X22, 0
	123 JumpIfEqual {264}
	124 Move X1, X0
	125 Move X0, X22
	126 Move W2, W31
	127 Move X3, X31
	128 Call Transform.SetParent, X0, X1, X2
	129 Move X0, X21
	130 Move X1, X31
	131 Call GameObject.get_transform, X0
	132 Compare X0, 0
	133 JumpIfEqual {264}
	134 Move X1, X31
	135 Call Transform.SetAsFirstSibling, X0
	136 Move X0, X20
	137 Move X1, X31
	138 Call Component.get_gameObject, X0
	139 Compare X0, 0
	140 JumpIfEqual {264}
	141 Move X22, 0x639000
	142 Move X22, [X22+2880]
	143 Move X1, X31
	144 Call GameObject.get_layer, X0
	145 Move W1, W0
	146 Move X0, X21
	147 Move X2, X31
	148 Call GameObject.set_layer, X0, X1
	149 Move X1, [X22]
	150 Move X0, X21
	151 Call 0x21E62E4, X0
	152 Move X23, 0x8BF000
	153 Move W8, [X23+1935]
	154 Move X22, X0
	155 Compare W8, 0
	156 JumpIfNotEqual {162}
	157 Move X0, 0x5E1000
	158 Move X0, [X0+3848]
	159 Call 0x1C17CF4
	160 Move W8, 1
	161 Move [X23+1935], W8
	162 Compare X22, 0
	163 JumpIfEqual {264}
	164 Move X24, 0x5E1000
	165 Move X24, [X24+3848]
	166 Move X0, X22
	167 Move X1, X31
	168 Move X8, [X24]
	169 Move X8, [X8+184]
	170 Move S0, [X8]
	171 Move S1, [X8+4]
	172 Call RectTransform.set_anchorMin, X0, X1
	173 Move X25, 0x8C7000
	174 Move W8, [X25+2632]
	175 Compare W8, 0
	176 JumpIfNotEqual {182}
	177 Move X0, 0x5E1000
	178 Move X0, [X0+3848]
	179 Call 0x1C17CF4
	180 Move W8, 1
	181 Move [X25+2632], W8
	182 Move X8, [X24]
	183 Move X0, X22
	184 Move X1, X31
	185 Move X8, [X8+184]
	186 Move S0, [X8+8]
	187 Move S1, [X8+12]
	188 Call RectTransform.set_anchorMax, X0, X1
	189 Move W8, [X23+1935]
	190 Compare W8, 0
	191 JumpIfNotEqual {197}
	192 Move X0, 0x5E1000
	193 Move X0, [X0+3848]
	194 Call 0x1C17CF4
	195 Move W8, 1
	196 Move [X23+1935], W8
	197 Move X8, [X24]
	198 Move X0, X22
	199 Move X1, X31
	200 Move X8, [X8+184]
	201 Move S0, [X8]
	202 Move S1, [X8+4]
	203 Call RectTransform.set_sizeDelta, X0, X1
	204 Move X0, X20
	205 Move X1, X31
	206 Call TMP_Text.get_rectTransform, X0
	207 Compare X0, 0
	208 JumpIfEqual {264}
	209 Move X23, 0x638000
	210 Move X23, [X23+3264]
	211 Move X1, X31
	212 Call RectTransform.get_pivot, X0
	213 Move X0, X22
	214 Move X1, X31
	215 Call RectTransform.set_pivot, X0, X1
	216 Move X1, [X23]
	217 Move X0, X21
	218 Call 0x21E61FC, X0
	219 Compare X0, 0
	220 JumpIfEqual {264}
	221 Move X8, [X0]
	222 Move X22, 0x63E000
	223 Move W1, 1
	224 Move X9, [X8+760]
	225 Move X2, [X8+768]
	226 Move X22, [X22+2624]
	227 NotImplemented "Instruction BLR not yet implemented."
	228 Move X1, [X22]
	229 Move X0, X21
	230 Call 0x21E61FC, X0
	231 Compare X0, 0
	232 JumpIfEqual {264}
	233 Move [X0+280], X20
	234 Move W8, [X19]
	235 Move X21, X0
	236 Move [X0+292], W8
	237 Move X8, [X19+8]
	238 Move [X0+216], X8
	239 Move X8, [X19+16]
	240 Move [X0+224], X8
	241 Move W8, [X19+32]
	242 And W8, W8, 1
	243 Move [X0+264], W8
	244 Move X8, [X19+24]
	245 Move [X0+240], X8
	246 Move [X0+32], X8
	247 Call TMP_SubMeshUI.GetPaddingForMaterial, X0
	248 Move X8, [X21]
	249 Move [X21+268], S0
	250 Move X0, X21
	251 Move X9, [X8+776]
	252 Move X1, [X8+784]
	253 NotImplemented "Instruction BLR not yet implemented."
	254 Move X0, X21
	255 Move X20, [X31+48]
	256 Move X19, [X31+56]
	257 Move X22, [X31+32]
	258 Move X21, [X31+40]
	259 Move X24, [X31+16]
	260 Move X23, [X31+24]
	261 Move X30, [X31+64]
	262 Move X25, [X31+72]
	263 Return X0
	264 Call 0x1C17F20
	265 Call 0x1C17F28
	266 Call 0x1C17F44
	267 Move X1, X31
	268 Call 0x1C17DEC

Method: System.Void OnEnable()

Disassembly:
	0x03B1C100 MOV X0, X19
	0x03B1C104 MOV X1, X31
	0x03B1C108 BL 0x33BDD8C
	0x03B1C10C STR X20, [X19 + 0x10]
	0x03B1C110 LDR X0, [X26]
	0x03B1C114 MOVZ W1, 0x8
	0x03B1C118 BL 0x1C16D6C
	0x03B1C11C STR X0, [X19 + 0x38]
	0x03B1C120 LDR X0, [X25]
	0x03B1C124 MOVZ W1, 0x4
	0x03B1C128 BL 0x1C16D6C
	0x03B1C12C STR X0, [X19 + 0x40]
	0x03B1C130 LDR X0, [X24]
	0x03B1C134 MOV W1, W31
	0x03B1C138 BL 0x1C16D6C
	0x03B1C13C STR X0, [X19 + 0x48]
	0x03B1C140 LDR X0, [X23]
	0x03B1C144 MOVZ W1, 0x2
	0x03B1C148 BL 0x1C16D6C
	0x03B1C14C STR X0, [X19 + 0x50]
	0x03B1C150 LDR X0, [X22]
	0x03B1C154 MOVZ W1, 0x4
	0x03B1C158 BL 0x1C16D6C
	0x03B1C15C STR X0, [X19 + 0x58]
	0x03B1C160 LDR X0, [X21]
	0x03B1C164 MOVZ W1, 0x1
	0x03B1C168 BL 0x1C16D6C
	0x03B1C16C STR X0, [X19 + 0x60]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+288]
	004 Move X19, X0
	005 Compare W8, 0
	006 JumpIfNotEqual {9}
	007 Move W8, 1
	008 Move [X19+288], W8
	009 Move X0, X19
	010 Move X1, X31
	011 Call Object.get_hideFlags, X0
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W1, 52
	014 Move X0, X19
	015 Move X2, X31
	016 Call Object.set_hideFlags, X0, X1
	017 Move X8, [X19]
	018 Move W9, 1
	019 Move [X19+161], W9
	020 Move X0, X19
	021 Move X9, [X8+1320]
	022 Move X1, [X8+1328]
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move X8, [X19]
	025 Move X0, X19
	026 Move X2, [X8+1336]
	027 Move X1, [X8+1344]
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 CallNoReturn X2

Method: System.Void OnDisable()

Disassembly:
	0x03B1C170 CBZ X0, 0x3B1C1BC
	0x03B1C174 CBZ X20, 0x3B1C1BC
	0x03B1C178 LDR X8, [X20]
	0x03B1C17C MOV X21, X0
	0x03B1C180 MOV X0, X20
	0x03B1C184 LDR X9, [X8 + 0x608]
	0x03B1C188 LDR X1, [X8 + 0x610]
	0x03B1C18C BLR X9
	0x03B1C190 LDR W8, [X21 + 0x18]
	0x03B1C194 CBZ W8, 0x3B1C1C0
	0x03B1C198 MOVZ W8, 0x1
	0x03B1C19C STR X0, [X21 + 0x20]
	0x03B1C1A0 STR W8, [X19 + 0x34]
	0x03B1C1A4 LDP X20, X19, [X31 + 0x40]
	0x03B1C1A8 LDP X22, X21, [X31 + 0x30]
	0x03B1C1AC LDP X24, X23, [X31 + 0x20]
	0x03B1C1B0 LDP X26, X25, [X31 + 0x10]
	0x03B1C1B4 LDP X30, X27, [X31], #0x50
	0x03B1C1B8 RET
	0x03B1C1BC BL 0x1C16F20
	0x03B1C1C0 BL 0x1C16F28
	0x03B1C1C4 STR X30, [X31 - 0x10]!
	0x03B1C1C8 LDR X11, [X0 + 0x60]
	0x03B1C1CC STP X31, X31, [X0 + 0x18]
	0x03B1C1D0 STR W31, [X0 + 0x30]
	0x03B1C1D4 STR X31, [X0 + 0x28]
	0x03B1C1D8 CBZ X11, 0x3B1C21C
	0x03B1C1DC LDR W8, [X11 + 0x18]
	0x03B1C1E0 UBFM X9, X8, 0x20, 0x1F
	0x03B1C1E4 CMP X9, 0x1
	0x03B1C1E8 B.LT 0x3B1C210
	0x03B1C1EC MOV X9, X31
	0x03B1C1F0 SXTW X10, W8
	0x03B1C1F4 ADD X11, X11, 0x28
	0x03B1C1F8 CMP X9, X8
	0x03B1C1FC B.CS 0x3B1C218
	0x03B1C200 ADD X9, X9, 0x1
	0x03B1C204 CMP X9, X10
	0x03B1C208 STR W31, [X11], #0x50
	0x03B1C20C B.LT 0x3B1C1F8
	0x03B1C210 LDR X30, [X31], #0x10
	0x03B1C214 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8C7000
	006 Move X20, 0x5D8000
	007 Move W8, [X21+1767]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5D8000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move X0, 0x63D000
	018 Move X0, [X0+1568]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1767], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call MaskableGraphic.OnDisable, X0
	025 Move X0, [X20]
	026 Move X20, [X19+248]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {50}
	039 Move X8, 0x63D000
	040 Move X8, [X8+1568]
	041 Move X20, [X19+248]
	042 Move X0, [X8]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X20
	048 Call TMP_MaterialManager.ReleaseFallbackMaterial, X0
	049 Move [X19+248], X31
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X30, [X31+32]
	053 Move X21, [X31+40]
	054 Return 

Method: System.Void OnDestroy()

Disassembly:
	0x03B1C218 BL 0x1C16F28
	0x03B1C21C BL 0x1C16F20
	0x03B1C220 STR X30, [X31 - 0x50]!
	0x03B1C224 STP X26, X25, [X31 + 0x10]
	0x03B1C228 STP X24, X23, [X31 + 0x20]
	0x03B1C22C STP X22, X21, [X31 + 0x30]
	0x03B1C230 STP X20, X19, [X31 + 0x40]
	0x03B1C234 ADRP X26, 0x8C6000
	0x03B1C238 ADRP X25, 0x63D000
	0x03B1C23C ADRP X24, 0x63D000
	0x03B1C240 ADRP X23, 0x63D000
	0x03B1C244 ADRP X22, 0x63D000
	0x03B1C248 ADRP X21, 0x63D000
	0x03B1C24C ADRP X20, 0x63D000
	0x03B1C250 LDR X25, [X25 + 0x220]
	0x03B1C254 LDRB W8, [X26 + 0x6FA]
	0x03B1C258 LDR X24, [X24 + 0xA60]
	0x03B1C25C LDR X23, [X23 + 0x308]
	0x03B1C260 LDR X22, [X22 + 0xA70]
	0x03B1C264 LDR X21, [X21 + 0xA68]
	0x03B1C268 LDR X20, [X20 + 0xA78]
	0x03B1C26C MOV X19, X0
	0x03B1C270 TBNZ X8, 0x0, 0x3B1C2C4
	0x03B1C274 ADRP X0, 0x63D000
	0x03B1C278 LDR X0, [X0 + 0x220]
	0x03B1C27C BL 0x1C16CF4
	0x03B1C280 ADRP X0, 0x63D000
	0x03B1C284 LDR X0, [X0 + 0x308]
	0x03B1C288 BL 0x1C16CF4
	0x03B1C28C ADRP X0, 0x63D000
	0x03B1C290 LDR X0, [X0 + 0xA68]
	0x03B1C294 BL 0x1C16CF4
	0x03B1C298 ADRP X0, 0x63D000
	0x03B1C29C LDR X0, [X0 + 0xA78]
	0x03B1C2A0 BL 0x1C16CF4
	0x03B1C2A4 ADRP X0, 0x63D000
	0x03B1C2A8 LDR X0, [X0 + 0xA70]
	0x03B1C2AC BL 0x1C16CF4
	0x03B1C2B0 ADRP X0, 0x63D000
	0x03B1C2B4 LDR X0, [X0 + 0xA60]
	0x03B1C2B8 BL 0x1C16CF4
	0x03B1C2BC MOVZ W8, 0x1
	0x03B1C2C0 STRB W8, [X26 + 0x6FA]
	0x03B1C2C4 STP X31, X31, [X19 + 0x18]
	0x03B1C2C8 STR W31, [X19 + 0x30]
	0x03B1C2CC STR X31, [X19 + 0x28]
	0x03B1C2D0 LDR X0, [X25]
	0x03B1C2D4 MOVZ W1, 0x4
	0x03B1C2D8 BL 0x1C16D6C
	0x03B1C2DC STR X0, [X19 + 0x38]
	0x03B1C2E0 LDR X0, [X24]
	0x03B1C2E4 MOVZ W1, 0x1
	0x03B1C2E8 BL 0x1C16D6C
	0x03B1C2EC STR X0, [X19 + 0x40]
	0x03B1C2F0 LDR X0, [X23]
	0x03B1C2F4 MOVZ W1, 0x1
	0x03B1C2F8 BL 0x1C16D6C
	0x03B1C2FC STR X0, [X19 + 0x50]
	0x03B1C300 LDR X0, [X22]
	0x03B1C304 MOVZ W1, 0x1
	0x03B1C308 BL 0x1C16D6C
	0x03B1C30C STR X0, [X19 + 0x58]
	0x03B1C310 LDR X0, [X21]
	0x03B1C314 MOV W1, W31
	0x03B1C318 BL 0x1C16D6C
	0x03B1C31C STR X0, [X19 + 0x48]
	0x03B1C320 STR W31, [X19 + 0x34]
	0x03B1C324 LDR X0, [X20]
	0x03B1C328 MOVZ W1, 0x1
	0x03B1C32C BL 0x1C16D6C
	0x03B1C330 STR X0, [X19 + 0x60]
	0x03B1C334 LDP X20, X19, [X31 + 0x40]
	0x03B1C338 LDP X22, X21, [X31 + 0x30]
	0x03B1C33C LDP X24, X23, [X31 + 0x20]
	0x03B1C340 LDP X26, X25, [X31 + 0x10]
	0x03B1C344 LDR X30, [X31], #0x50
	0x03B1C348 RET
	0x03B1C34C STP X30, X25, [X31 - 0x40]!
	0x03B1C350 STP X24, X23, [X31 + 0x10]
	0x03B1C354 STP X22, X21, [X31 + 0x20]
	0x03B1C358 STP X20, X19, [X31 + 0x30]
	0x03B1C35C ADRP X21, 0x8C6000
	0x03B1C360 LDRB W8, [X21 + 0x6FB]
	0x03B1C364 MOV W20, W1
	0x03B1C368 MOV X19, X0
	0x03B1C36C TBNZ X8, 0x0, 0x3B1C384
	0x03B1C370 ADRP X0, 0x63C000
	0x03B1C374 LDR X0, [X0 + 0x348]
	0x03B1C378 BL 0x1C16CF4
	0x03B1C37C MOVZ W8, 0x1
	0x03B1C380 STRB W8, [X21 + 0x6FB]
	0x03B1C384 LDR X23, [X19 + 0x60]
	0x03B1C388 CBZ X23, 0x3B1C3E8
	0x03B1C38C ADRP X22, 0x63C000
	0x03B1C390 LDR X22, [X22 + 0x348]
	0x03B1C394 MOV X21, X31
	0x03B1C398 MOVZ W24, 0x20
	0x03B1C39C AND W20, W20, 0x1
	0x03B1C3A0 LDR W8, [X23 + 0x18]
	0x03B1C3A4 CMP X21, W8, SXTW
	0x03B1C3A8 B.GE 0x3B1C3EC
	0x03B1C3AC LDR X0, [X22]
	0x03B1C3B0 LDR W9, [X0 + 0xE0]
	0x03B1C3B4 CBNZ W9, 0x3B1C3C0
	0x03B1C3B8 BL 0x1C16DFC
	0x03B1C3BC LDR W8, [X23 + 0x18]
	0x03B1C3C0 CMP X21, X8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x8C7000
	007 Move X21, 0x5D8000
	008 Move W8, [X20+1768]
	009 Move X21, [X21+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x5D8000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move X0, 0x63D000
	019 Move X0, [X0+1568]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1768], W8
	023 Move X0, [X21]
	024 Move X20, [X19+272]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Inequality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {46}
	037 Move X0, [X21]
	038 Move X20, [X19+272]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X1, X31
	045 Call Object.DestroyImmediate, X0
	046 Move X0, [X21]
	047 Move X20, [X19+168]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X22, 0x63D000
	053 Move X22, [X22+1568]
	054 Move X0, X20
	055 Move X1, X31
	056 Move X2, X31
	057 Call Object.op_Inequality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {70}
	062 Move X0, [X22]
	063 Move X20, [X19+168]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X0, X20
	069 Call TMP_MaterialManager.ReleaseStencilMaterial, X0
	070 Move X0, [X21]
	071 Move X20, [X19+248]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X0, X20
	077 Move X1, X31
	078 Move X2, X31
	079 Call Object.op_Inequality, X0, X1
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {93}
	084 Move X0, [X22]
	085 Move X20, [X19+248]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X0, X20
	091 Call TMP_MaterialManager.ReleaseFallbackMaterial, X0
	092 Move [X19+248], X31
	093 Move X8, [X19]
	094 Move [X19+288], W31
	095 Move X0, X19
	096 Move X9, [X8+1320]
	097 Move X1, [X8+1328]
	098 NotImplemented "Instruction BLR not yet implemented."
	099 Move X0, [X21]
	100 Move X20, [X19+280]
	101 Move W8, [X0+224]
	102 Compare W8, 0
	103 JumpIfNotEqual {105}
	104 Call 0x1C17DFC
	105 Move X0, X20
	106 Move X1, X31
	107 Move X2, X31
	108 Call Object.op_Inequality, X0, X1
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {131}
	113 Move X0, [X19+280]
	114 Compare X0, 0
	115 JumpIfEqual {137}
	116 Move W1, 1
	117 Move X2, X31
	118 Call TMP_Text.set_havePropertiesChanged, X0, X1
	119 Move X0, [X19+280]
	120 Compare X0, 0
	121 JumpIfEqual {137}
	122 Move X8, [X0]
	123 Move X20, [X31+32]
	124 Move X19, [X31+40]
	125 Move X22, [X31+16]
	126 Move X21, [X31+24]
	127 Move X2, [X8+728]
	128 Move X1, [X8+736]
	129 Move X30, [X31+48]
	130 CallNoReturn X2
	131 Move X20, [X31+32]
	132 Move X19, [X31+40]
	133 Move X22, [X31+16]
	134 Move X21, [X31+24]
	135 Move X30, [X31+48]
	136 Return 
	137 Call 0x1C17F20

Method: System.Void OnTransformParentChanged()

Disassembly:
	0x03B1C3C4 B.CS 0x3B1C400
	0x03B1C3C8 ADD X0, X23, X24
	0x03B1C3CC MOV W1, W20
	0x03B1C3D0 ADD X21, X21, 0x1
	0x03B1C3D4 ADD X25, X24, 0x50
	0x03B1C3D8 BL 0x3B129C0
	0x03B1C3DC LDR X23, [X19 + 0x60]
	0x03B1C3E0 MOV X24, X25
	0x03B1C3E4 CBNZ X23, 0x3B1C3A0
	0x03B1C3E8 BL 0x1C16F20
	0x03B1C3EC LDP X20, X19, [X31 + 0x30]
	0x03B1C3F0 LDP X22, X21, [X31 + 0x20]
	0x03B1C3F4 LDP X24, X23, [X31 + 0x10]
	0x03B1C3F8 LDP X30, X25, [X31], #0x40
	0x03B1C3FC RET
	0x03B1C400 BL 0x1C16F28
	0x03B1C404 STR X30, [X31 - 0x40]!
	0x03B1C408 STP X24, X23, [X31 + 0x10]
	0x03B1C40C STP X22, X21, [X31 + 0x20]
	0x03B1C410 STP X20, X19, [X31 + 0x30]
	0x03B1C414 ADRP X20, 0x8C6000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move X19, X0
	005 Move X9, [X8+456]
	006 Move X1, [X8+464]
	007 NotImplemented "Instruction BLR not yet implemented."
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {26}
	012 Move X8, [X19]
	013 Move W9, 1
	014 Move [X19+161], W9
	015 Move X0, X19
	016 Move X9, [X8+1320]
	017 Move X1, [X8+1328]
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move X8, [X19]
	020 Move X0, X19
	021 Move X2, [X8+1336]
	022 Move X1, [X8+1344]
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 CallNoReturn X2
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Return 

Method: UnityEngine.Material GetModifiedMaterial(UnityEngine.Material baseMaterial)

Disassembly:
	0x03B1C418 LDRB W8, [X20 + 0x6FC]
	0x03B1C41C MOV X19, X0
	0x03B1C420 TBNZ X8, 0x0, 0x3B1C438
	0x03B1C424 ADRP X0, 0x63C000
	0x03B1C428 LDR X0, [X0 + 0x348]
	0x03B1C42C BL 0x1C16CF4
	0x03B1C430 MOVZ W8, 0x1
	0x03B1C434 STRB W8, [X20 + 0x6FC]
	0x03B1C438 LDR X22, [X19 + 0x60]
	0x03B1C43C CBZ X22, 0x3B1C498
	0x03B1C440 ADRP X21, 0x63C000
	0x03B1C444 LDR X21, [X21 + 0x348]
	0x03B1C448 MOV X20, X31
	0x03B1C44C MOVZ W23, 0x20
	0x03B1C450 LDR W8, [X22 + 0x18]
	0x03B1C454 CMP X20, W8, SXTW
	0x03B1C458 B.GE 0x3B1C49C
	0x03B1C45C LDR X0, [X21]
	0x03B1C460 LDR W9, [X0 + 0xE0]
	0x03B1C464 CBNZ W9, 0x3B1C470
	0x03B1C468 BL 0x1C16DFC
	0x03B1C46C LDR W8, [X22 + 0x18]
	0x03B1C470 CMP X20, X8
	0x03B1C474 B.CS 0x3B1C4B0
	0x03B1C478 ADD X0, X22, X23
	0x03B1C47C MOVZ W1, 0x1
	0x03B1C480 ADD X20, X20, 0x1
	0x03B1C484 ADD X24, X23, 0x50
	0x03B1C488 BL 0x3B129C0
	0x03B1C48C LDR X22, [X19 + 0x60]
	0x03B1C490 MOV X23, X24
	0x03B1C494 CBNZ X22, 0x3B1C450
	0x03B1C498 BL 0x1C16F20
	0x03B1C49C LDP X20, X19, [X31 + 0x30]
	0x03B1C4A0 LDP X22, X21, [X31 + 0x20]
	0x03B1C4A4 LDP X24, X23, [X31 + 0x10]
	0x03B1C4A8 LDR X30, [X31], #0x40
	0x03B1C4AC RET
	0x03B1C4B0 BL 0x1C16F28
	0x03B1C4B4 STP X30, X25, [X31 - 0x40]!
	0x03B1C4B8 STP X24, X23, [X31 + 0x10]
	0x03B1C4BC STP X22, X21, [X31 + 0x20]
	0x03B1C4C0 STP X20, X19, [X31 + 0x30]
	0x03B1C4C4 ADRP X21, 0x8C6000
	0x03B1C4C8 LDRB W8, [X21 + 0x6FD]
	0x03B1C4CC MOV W20, W1
	0x03B1C4D0 MOV X19, X0
	0x03B1C4D4 TBNZ X8, 0x0, 0x3B1C4EC
	0x03B1C4D8 ADRP X0, 0x63C000
	0x03B1C4DC LDR X0, [X0 + 0x348]
	0x03B1C4E0 BL 0x1C16CF4
	0x03B1C4E4 MOVZ W8, 0x1
	0x03B1C4E8 STRB W8, [X21 + 0x6FD]
	0x03B1C4EC LDR X23, [X19 + 0x60]
	0x03B1C4F0 CBZ X23, 0x3B1C554
	0x03B1C4F4 ADRP X22, 0x63C000
	0x03B1C4F8 LDR X22, [X22 + 0x348]
	0x03B1C4FC MOV X21, X31
	0x03B1C500 MOVZ W24, 0x20
	0x03B1C504 AND W20, W20, 0x1
	0x03B1C508 LDR W8, [X23 + 0x18]
	0x03B1C50C CMP X21, W8, SXTW
	0x03B1C510 B.GE 0x3B1C558
	0x03B1C514 LDR X0, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8C7000
	006 Move W8, [X21+1769]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x63D000
	014 Move X0, [X0+1848]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1769], W8
	018 Move W8, [X20+161]
	019 Compare W8, 0
	020 JumpIfEqual {37}
	021 Move X0, X20
	022 Move X1, X31
	023 Call Component.get_transform, X0
	024 Move X1, X31
	025 Call MaskUtilities.FindRootSortOverrideCanvas, X0
	026 Move W8, [X20+184]
	027 Compare W8, 0
	028 JumpIfEqual {38}
	029 Move X21, X0
	030 Move X0, X20
	031 Move X1, X31
	032 Call Component.get_transform, X0
	033 Move X1, X21
	034 Move X2, X31
	035 Call MaskUtilities.GetStencilDepth, X0, X1
	036 Move W21, W0
	037 Move W21, [X20+204]
	038 Move W21, W31
	039 Move [X20+204], W21
	040 Move [X20+161], W31
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X8, 0x63D000
	043 Move X8, [X8+1848]
	044 Move X0, [X8]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move TEMP, 0
	050 Not TEMP
	051 Move W8, TEMP
	052 NotImplemented "Instruction LSLV not yet implemented."
	053 NotImplemented "Instruction ORN not yet implemented."
	054 Move W3, 3
	055 Move W4, 15
	056 Move X0, X19
	057 Move W2, W31
	058 Move W5, W1
	059 Move W6, W31
	060 Move X7, X31
	061 Call StencilMaterial.Add, X0, X1, X2, X3, X4, X5, X6
	062 Move X8, [X20+168]
	063 Move X19, X0
	064 Move X1, X31
	065 Move X0, X8
	066 Call StencilMaterial.Remove, X0
	067 Move [X20+168], X19
	068 Move X0, X19
	069 Move X20, [X31+16]
	070 Move X19, [X31+24]
	071 Move X30, [X31+32]
	072 Move X21, [X31+40]
	073 Return X0

Method: System.Single GetPaddingForMaterial()

Disassembly:
	0x03B1B948 MOV X2, X31
	0x03B1B94C LDR X8, [X8 + 0xB8]
	0x03B1B950 LDR X1, [X8 + 0x120]
	0x03B1B954 BL 0x3C15F28
	0x03B1B958 LDR X0, [X19 + 0xF0]
	0x03B1B95C CBZ X0, 0x3B1B9D4
	0x03B1B960 LDR X8, [X21]
	0x03B1B964 MOV X2, X31
	0x03B1B968 LDR X8, [X8 + 0xB8]
	0x03B1B96C LDR X1, [X8 + 0x120]
	0x03B1B970 BL 0x3C15C58
	0x03B1B974 MOV X0, X19
	0x03B1B978 MOV X1, X31
	0x03B1B97C BL 0x3CDBD2C
	0x03B1B980 CBZ X0, 0x3B1B9D4
	0x03B1B984 MOVZ W1, 0x1
	0x03B1B988 MOV X2, X31
	0x03B1B98C BL 0x3E224A8
	0x03B1B990 MOV X0, X19
	0x03B1B994 MOV X1, X31
	0x03B1B998 BL 0x3CDBD2C
	0x03B1B99C LDR X8, [X19]
	0x03B1B9A0 MOV X20, X0
	0x03B1B9A4 MOV X0, X19
	0x03B1B9A8 LDR X9, [X8 + 0x358]
	0x03B1B9AC LDR X1, [X8 + 0x360]
	0x03B1B9B0 BLR X9
	0x03B1B9B4 CBZ X20, 0x3B1B9D4
	0x03B1B9B8 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8C8000
	005 Move W8, [X20+1770]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x63E000
	012 Move X0, [X0+824]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1770], W8
	016 Move X8, [X19+280]
	017 Compare X8, 0
	018 JumpIfEqual {37}
	019 Move X9, 0x63E000
	020 Move X9, [X9+824]
	021 Move X19, [X19+240]
	022 Move W20, [X8+768]
	023 Move X0, [X9]
	024 Move W9, [X0+224]
	025 Compare W9, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 NotImplemented "Instruction CSET not yet implemented."
	033 Move W2, W31
	034 Move X30, [X31+32]
	035 Call ShaderUtilities.GetPadding, X0, X1, X2
	036 Return V0
	037 Call 0x1C17F20

Method: System.Single GetPaddingForMaterial(UnityEngine.Material mat)

Disassembly:
	0x03B1C518 LDR W9, [X0 + 0xE0]
	0x03B1C51C CBNZ W9, 0x3B1C528
	0x03B1C520 BL 0x1C16DFC
	0x03B1C524 LDR W8, [X23 + 0x18]
	0x03B1C528 CMP X21, X8
	0x03B1C52C B.CS 0x3B1C56C
	0x03B1C530 ADD X0, X23, X24
	0x03B1C534 MOV W1, W31
	0x03B1C538 MOV W2, W20
	0x03B1C53C ADD X21, X21, 0x1
	0x03B1C540 ADD X25, X24, 0x50
	0x03B1C544 BL 0x3B12044
	0x03B1C548 LDR X23, [X19 + 0x60]
	0x03B1C54C MOV X24, X25
	0x03B1C550 CBNZ X23, 0x3B1C508
	0x03B1C554 BL 0x1C16F20
	0x03B1C558 LDP X20, X19, [X31 + 0x30]
	0x03B1C55C LDP X22, X21, [X31 + 0x20]
	0x03B1C560 LDP X24, X23, [X31 + 0x10]
	0x03B1C564 LDP X30, X25, [X31], #0x40
	0x03B1C568 RET
	0x03B1C56C BL 0x1C16F28
	0x03B1C570 STR X30, [X31 - 0x40]!
	0x03B1C574 STP X24, X23, [X31 + 0x10]
	0x03B1C578 STP X22, X21, [X31 + 0x20]
	0x03B1C57C STP X20, X19, [X31 + 0x30]
	0x03B1C580 ADRP X20, 0x8C6000
	0x03B1C584 LDRB W8, [X20 + 0x6FE]
	0x03B1C588 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8C7000
	006 Move W8, [X21+1771]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x63D000
	014 Move X0, [X0+824]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1771], W8
	018 Move X8, [X20+280]
	019 Compare X8, 0
	020 JumpIfEqual {39}
	021 Move X9, 0x63D000
	022 Move X9, [X9+824]
	023 Move W20, [X8+768]
	024 Move X0, [X9]
	025 Move W9, [X0+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 NotImplemented "Instruction CSET not yet implemented."
	034 Move W2, W31
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call ShaderUtilities.GetPadding, X0, X1, X2
	038 Return V0
	039 Call 0x1C17F20

Method: System.Void UpdateMeshPadding(System.Boolean isExtraPadding, System.Boolean isUsingBold)

Disassembly:
	0x03B1C58C TBNZ X8, 0x0, 0x3B1C5A4
	0x03B1C590 ADRP X0, 0x63C000
	0x03B1C594 LDR X0, [X0 + 0x348]
	0x03B1C598 BL 0x1C16CF4
	0x03B1C59C MOVZ W8, 0x1
	0x03B1C5A0 STRB W8, [X20 + 0x6FE]
	0x03B1C5A4 LDR X22, [X19 + 0x60]
	0x03B1C5A8 CBZ X22, 0x3B1C604
	0x03B1C5AC ADRP X21, 0x63C000
	0x03B1C5B0 LDR X21, [X21 + 0x348]
	0x03B1C5B4 MOV X20, X31
	0x03B1C5B8 MOVZ W23, 0x20
	0x03B1C5BC LDR W8, [X22 + 0x18]
	0x03B1C5C0 CMP X20, W8, SXTW
	0x03B1C5C4 B.GE 0x3B1C608
	0x03B1C5C8 LDR X0, [X21]
	0x03B1C5CC LDR W9, [X0 + 0xE0]
	0x03B1C5D0 CBNZ W9, 0x3B1C5DC
	0x03B1C5D4 BL 0x1C16DFC
	0x03B1C5D8 LDR W8, [X22 + 0x18]
	0x03B1C5DC CMP X20, X8
	0x03B1C5E0 B.CS 0x3B1C61C
	0x03B1C5E4 ADD X0, X22, X23
	0x03B1C5E8 MOV W1, W31
	0x03B1C5EC ADD X20, X20, 0x1
	0x03B1C5F0 ADD X24, X23, 0x50
	0x03B1C5F4 BL 0x3B12B34
	0x03B1C5F8 LDR X22, [X19 + 0x60]
	0x03B1C5FC MOV X23, X24

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8C7000
	007 Move X21, 0x63D000
	008 Move W8, [X22+1772]
	009 Move X21, [X21+824]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x63D000
	017 Move X0, [X0+824]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1772], W8
	021 Move X0, [X21]
	022 Move X21, [X19+240]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 And W1, W20, 1
	028 Move X0, X21
	029 Move W2, W31
	030 Call ShaderUtilities.GetPadding, X0, X1, X2
	031 Move [X19+268], S0
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X30, [X31+48]
	037 Return 

Method: System.Void SetAllDirty()

Disassembly:
	0x03B1C600 CBNZ X22, 0x3B1C5BC

ISIL:
	001 Return 

Method: System.Void SetVerticesDirty()

Disassembly:
	0x03B1C604 BL 0x1C16F20
	0x03B1C608 LDP X20, X19, [X31 + 0x30]
	0x03B1C60C LDP X22, X21, [X31 + 0x20]
	0x03B1C610 LDP X24, X23, [X31 + 0x10]
	0x03B1C614 LDR X30, [X31], #0x40
	0x03B1C618 RET
	0x03B1C61C BL 0x1C16F28
	0x03B1C620 STR X30, [X31 - 0x40]!
	0x03B1C624 STP X24, X23, [X31 + 0x10]
	0x03B1C628 STP X22, X21, [X31 + 0x20]
	0x03B1C62C STP X20, X19, [X31 + 0x30]
	0x03B1C630 ADRP X20, 0x8C6000
	0x03B1C634 LDRB W8, [X20 + 0x6FF]
	0x03B1C638 MOV X19, X0
	0x03B1C63C TBNZ X8, 0x0, 0x3B1C660
	0x03B1C640 ADRP X0, 0x63D000
	0x03B1C644 LDR X0, [X0 + 0x308]
	0x03B1C648 BL 0x1C16CF4
	0x03B1C64C ADRP X0, 0x63C000
	0x03B1C650 LDR X0, [X0 + 0x368]
	0x03B1C654 BL 0x1C16CF4
	0x03B1C658 MOVZ W8, 0x1
	0x03B1C65C STRB W8, [X20 + 0x6FF]
	0x03B1C660 LDR X20, [X19 + 0x50]
	0x03B1C664 CBNZ X20, 0x3B1C688
	0x03B1C668 ADRP X8, 0x63D000
	0x03B1C66C LDR X8, [X8 + 0x308]
	0x03B1C670 MOVZ W1, 0x2
	0x03B1C674 LDR X0, [X8]
	0x03B1C678 BL 0x1C16D6C
	0x03B1C67C MOV X20, X0
	0x03B1C680 STR X0, [X19 + 0x50]
	0x03B1C684 CBZ X0, 0x3B1C79C
	0x03B1C688 LDR X8, [X20 + 0x18]
	0x03B1C68C CMP W8, 0x1
	0x03B1C690 B.LT 0x3B1C784
	0x03B1C694 ADRP X23, 0x63C000
	0x03B1C698 LDR X23, [X23 + 0x368]
	0x03B1C69C AND X8, X8, 0x0
	0x03B1C6A0 MOVZ W9, 0x5C
	0x03B1C6A4 MOV X21, X31
	0x03B1C6A8 MOV X22, X31
	0x03B1C6AC MUL X24, X8, X9
	0x03B1C6B0 MOVI V1.2D, 0x0
	0x03B1C6B4 LDR W8, [X20 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8C7000
	005 Move W8, [X20+1773]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x5D8000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1773], W8
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X9, [X8+456]
	019 Move X1, [X8+464]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {57}
	025 Move X8, 0x5D8000
	026 Move X8, [X8+1432]
	027 Move X20, [X19+280]
	028 Move X0, [X8]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Inequality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {57}
	041 Move X0, [X19+280]
	042 Compare X0, 0
	043 JumpIfEqual {61}
	044 Move W1, 1
	045 Move X2, X31
	046 Call TMP_Text.set_havePropertiesChanged, X0, X1
	047 Move X0, [X19+280]
	048 Compare X0, 0
	049 JumpIfEqual {61}
	050 Move X8, [X0]
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X2, [X8+760]
	054 Move X1, [X8+768]
	055 Move X30, [X31+32]
	056 CallNoReturn X2
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X30, [X31+32]
	060 Return 
	061 Call 0x1C17F20

Method: System.Void SetLayoutDirty()

Disassembly:
	0x03B1C6B8 CMP X22, X8

ISIL:
	001 Return 

Method: System.Void SetMaterialDirty()

Disassembly:
	0x03B1C6BC B.CS 0x3B1C798
	0x03B1C6C0 ADD X9, X20, X21
	0x03B1C6C4 STUR D1, [X9 + 0x2C]
	0x03B1C6C8 STR D1, [X9 + 0x20]
	0x03B1C6CC STR W31, [X9 + 0x5C]
	0x03B1C6D0 LDR X0, [X23]
	0x03B1C6D4 LDR W9, [X0 + 0xE0]
	0x03B1C6D8 CBNZ W9, 0x3B1C6EC
	0x03B1C6DC BL 0x1C16DFC
	0x03B1C6E0 LDR X0, [X23]
	0x03B1C6E4 LDR W8, [X20 + 0x18]
	0x03B1C6E8 MOVI V1.2D, 0x0
	0x03B1C6EC CMP X22, X8
	0x03B1C6F0 B.CS 0x3B1C798
	0x03B1C6F4 LDR X8, [X0 + 0xB8]
	0x03B1C6F8 ADD X9, X20, X21
	0x03B1C6FC LDR V0, [X8 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move W9, 1
	005 Move [X0+289], W9
	006 Move X19, X0
	007 Move X9, [X8+952]
	008 Move X1, [X8+960]
	009 NotImplemented "Instruction BLR not yet implemented."
	010 Move X8, [X19+128]
	011 Compare X8, 0
	012 JumpIfEqual {19}
	013 Move X2, [X8+24]
	014 Move X0, [X8+64]
	015 Move X1, [X8+40]
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 CallNoReturn X2
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Return 

Method: System.Void SetPivotDirty()

Disassembly:
	0x03B1C700 STR S0, [X9 + 0x4C]
	0x03B1C704 LDR X9, [X19 + 0x50]
	0x03B1C708 CBZ X9, 0x3B1C79C
	0x03B1C70C LDR W10, [X9 + 0x18]
	0x03B1C710 CMP X22, X10
	0x03B1C714 B.CS 0x3B1C798
	0x03B1C718 LDR V0, [X8]
	0x03B1C71C ADD X9, X9, X21
	0x03B1C720 STR X31, [X9 + 0x60]
	0x03B1C724 STR S0, [X9 + 0x54]
	0x03B1C728 LDR X8, [X8]
	0x03B1C72C STUR X8, [X9 + 0x6C]
	0x03B1C730 LDR X8, [X19 + 0x50]
	0x03B1C734 CBZ X8, 0x3B1C79C
	0x03B1C738 LDR W9, [X8 + 0x18]
	0x03B1C73C CMP X22, X9
	0x03B1C740 B.CS 0x3B1C798
	0x03B1C744 LDR X9, [X23]
	0x03B1C748 ADD X8, X8, X21
	0x03B1C74C LDR X9, [X9 + 0xB8]
	0x03B1C750 LDR X9, [X9 + 0x8]
	0x03B1C754 STUR X9, [X8 + 0x74]
	0x03B1C758 LDR X20, [X19 + 0x50]
	0x03B1C75C CBZ X20, 0x3B1C79C
	0x03B1C760 LDR W8, [X20 + 0x18]
	0x03B1C764 CMP X22, X8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move X19, X0
	005 Move X9, [X8+456]
	006 Move X1, [X8+464]
	007 NotImplemented "Instruction BLR not yet implemented."
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {34}
	012 Move X0, X19
	013 Move X1, X31
	014 Call Graphic.get_rectTransform, X0
	015 Move X8, [X19+280]
	016 Compare X8, 0
	017 JumpIfEqual {37}
	018 Move X19, X0
	019 Move X0, X8
	020 Move X1, X31
	021 Call TMP_Text.get_rectTransform, X0
	022 Compare X0, 0
	023 JumpIfEqual {37}
	024 Move X1, X31
	025 Call RectTransform.get_pivot, X0
	026 Compare X19, 0
	027 JumpIfEqual {37}
	028 Move X0, X19
	029 Move X1, X31
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Call RectTransform.set_pivot, X0, X1
	033 Return 
	034 Move X30, [X31+16]
	035 Move X19, [X31+24]
	036 Return 
	037 Call 0x1C17F20

Method: UnityEngine.Transform GetRootCanvasTransform()

Disassembly:
	0x03B1C768 B.CS 0x3B1C798
	0x03B1C76C ADD X8, X20, X21
	0x03B1C770 ADD X21, X21, 0x5C
	0x03B1C774 CMP X24, X21
	0x03B1C778 ADD X22, X22, 0x1
	0x03B1C77C STR W31, [X8 + 0x58]
	0x03B1C780 B.NE 0x3B1C6B4
	0x03B1C784 LDP X20, X19, [X31 + 0x30]
	0x03B1C788 LDP X22, X21, [X31 + 0x20]
	0x03B1C78C LDP X24, X23, [X31 + 0x10]
	0x03B1C790 LDR X30, [X31], #0x40
	0x03B1C794 RET
	0x03B1C798 BL 0x1C16F28
	0x03B1C79C BL 0x1C16F20
	0x03B1C7A0 STR X30, [X31 - 0x20]!
	0x03B1C7A4 STP X20, X19, [X31 + 0x10]
	0x03B1C7A8 ADRP X20, 0x8C6000
	0x03B1C7AC LDRB W8, [X20 + 0x700]
	0x03B1C7B0 MOV X19, X0
	0x03B1C7B4 TBNZ X8, 0x0, 0x3B1C7CC
	0x03B1C7B8 ADRP X0, 0x63D000
	0x03B1C7BC LDR X0, [X0 + 0xA70]
	0x03B1C7C0 BL 0x1C16CF4
	0x03B1C7C4 MOVZ W8, 0x1
	0x03B1C7C8 STRB W8, [X20 + 0x700]
	0x03B1C7CC LDR X0, [X19 + 0x58]
	0x03B1C7D0 CBNZ X0, 0x3B1C7F0
	0x03B1C7D4 ADRP X8, 0x63D000
	0x03B1C7D8 LDR X8, [X8 + 0xA70]
	0x03B1C7DC MOVZ W1, 0x2
	0x03B1C7E0 LDR X0, [X8]
	0x03B1C7E4 BL 0x1C16D6C
	0x03B1C7E8 STR X0, [X19 + 0x58]
	0x03B1C7EC CBZ X0, 0x3B1C834
	0x03B1C7F0 LDR X8, [X0 + 0x18]
	0x03B1C7F4 CMP W8, 0x1
	0x03B1C7F8 B.LT 0x3B1C828
	0x03B1C7FC ADRP X9, 0xFFFFFFFFFCFD2000
	0x03B1C800 LDR V0, [X9 + 0x348]
	0x03B1C804 MOVZ W10, 0xFE00

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8C7000
	006 Move X20, 0x5D8000
	007 Move W8, [X21+1774]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5D8000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1774], W8
	019 Move X0, [X20]
	020 Move X20, [X19+296]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {47}
	033 Move X0, [X19+280]
	034 Compare X0, 0
	035 JumpIfEqual {53}
	036 Move X1, X31
	037 Call Graphic.get_canvas, X0
	038 Compare X0, 0
	039 JumpIfEqual {53}
	040 Move X1, X31
	041 Call Canvas.get_rootCanvas, X0
	042 Compare X0, 0
	043 JumpIfEqual {53}
	044 Move X1, X31
	045 Call Component.get_transform, X0
	046 Move [X19+296], X0
	047 Move X0, [X19+296]
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return X0
	053 Call 0x1C17F20

Method: System.Void Cull(UnityEngine.Rect clipRect, System.Boolean validRect)

Disassembly:
	0x03B1C808 AND X8, X8, 0x0

ISIL:
	001 Return 

Method: System.Void UpdateGeometry()

Disassembly:
	0x03B1C80C ADD X9, X0, 0x30

ISIL:
	001 Return 

Method: System.Void Rebuild(UnityEngine.UI.CanvasUpdate update)

Disassembly:
	0x03B1C810 MOVK W10, 0x46FF0000
	0x03B1C814 STUR X31, [X9 - 0x10]
	0x03B1C818 STUR D0, [X9 - 0x8]
	0x03B1C81C STR W10, [X9], #0x14
	0x03B1C820 SUBS X8, X8, 0x1
	0x03B1C824 B.NE 0x3B1C814
	0x03B1C828 LDP X20, X19, [X31 + 0x10]
	0x03B1C82C LDR X30, [X31], #0x20
	0x03B1C830 RET
	0x03B1C834 BL 0x1C16F20
	0x03B1C838 STR X30, [X31 - 0x50]!
	0x03B1C83C STP X26, X25, [X31 + 0x10]
	0x03B1C840 STP X24, X23, [X31 + 0x20]
	0x03B1C844 STP X22, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W8, [X0+289]
	005 Move X19, X0
	006 Compare W8, 0
	007 JumpIfEqual {14}
	008 Move X8, [X19]
	009 Move X0, X19
	010 Move X9, [X8+952]
	011 Move X1, [X8+960]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move [X19+289], W31
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return 

Method: System.Void RefreshMaterial()

Disassembly:
	0x03B1C848 STP X20, X19, [X31 + 0x40]
	0x03B1C84C ADRP X20, 0x8C6000
	0x03B1C850 LDRB W8, [X20 + 0x701]
	0x03B1C854 MOV X19, X0

ISIL:
	001 Move X8, [X0]
	002 Move X2, [X8+952]
	003 Move X1, [X8+960]
	004 CallNoReturn X2

Method: System.Void UpdateMaterial()

Disassembly:
	0x03B1C858 TBNZ X8, 0x0, 0x3B1C894
	0x03B1C85C ADRP X0, 0x603000
	0x03B1C860 LDR X0, [X0 + 0xAF8]
	0x03B1C864 BL 0x1C16CF4
	0x03B1C868 ADRP X0, 0x63D000
	0x03B1C86C LDR X0, [X0 + 0xA78]
	0x03B1C870 BL 0x1C16CF4
	0x03B1C874 ADRP X0, 0x631000
	0x03B1C878 LDR X0, [X0 + 0xA88]
	0x03B1C87C BL 0x1C16CF4
	0x03B1C880 ADRP X0, 0x5D9000
	0x03B1C884 LDR X0, [X0 + 0x9B0]
	0x03B1C888 BL 0x1C16CF4
	0x03B1C88C MOVZ W8, 0x1
	0x03B1C890 STRB W8, [X20 + 0x701]
	0x03B1C894 ADRP X22, 0x5D9000
	0x03B1C898 ADRP X23, 0x631000
	0x03B1C89C ADRP X24, 0x603000
	0x03B1C8A0 LDP X8, X21, [X19 + 0x60]
	0x03B1C8A4 LDR X22, [X22 + 0x9B0]
	0x03B1C8A8 LDR X23, [X23 + 0xA88]
	0x03B1C8AC LDR X24, [X24 + 0xAF8]
	0x03B1C8B0 CBZ X21, 0x3B1CAEC
	0x03B1C8B4 CBZ X8, 0x3B1CBF0
	0x03B1C8B8 LDR W9, [X21 + 0x18]
	0x03B1C8BC LDR W10, [X8 + 0x18]
	0x03B1C8C0 CMP W9, W10
	0x03B1C8C4 B.NE 0x3B1CAF0
	0x03B1C8C8 MOV W25, W31
	0x03B1C8CC MOVZ W26, 0x58
	0x03B1C8D0 LDR W9, [X21 + 0x18]
	0x03B1C8D4 CMP W25, W9
	0x03B1C8D8 B.GE 0x3B1CAD0
	0x03B1C8DC LDR X8, [X19 + 0x60]
	0x03B1C8E0 CBZ X8, 0x3B1CBF0
	0x03B1C8E4 LDR W10, [X8 + 0x18]
	0x03B1C8E8 CMP W25, W10
	0x03B1C8EC B.CS 0x3B1CBF4
	0x03B1C8F0 ADD X10, X8, X26
	0x03B1C8F4 LDUR X10, [X10 - 0x28]
	0x03B1C8F8 CBZ X10, 0x3B1CBF0
	0x03B1C8FC CMP W25, W9
	0x03B1C900 B.CS 0x3B1CBF4
	0x03B1C904 ADD X9, X21, X26
	0x03B1C908 LDUR X9, [X9 - 0x28]
	0x03B1C90C CBZ X9, 0x3B1CBF0
	0x03B1C910 LDR W20, [X10 + 0x18]
	0x03B1C914 LDR W9, [X9 + 0x18]
	0x03B1C918 CMP W9, W20
	0x03B1C91C B.EQ 0x3B1C9BC
	0x03B1C920 LDR X0, [X22]
	0x03B1C924 MOV W1, W20
	0x03B1C928 BL 0x1C16D6C
	0x03B1C92C LDR W8, [X21 + 0x18]
	0x03B1C930 CMP W25, W8
	0x03B1C934 B.CS 0x3B1CBF4
	0x03B1C938 ADD X8, X21, X26
	0x03B1C93C STUR X0, [X8 - 0x28]
	0x03B1C940 LDR X21, [X19 + 0x68]
	0x03B1C944 CBZ X21, 0x3B1CBF0
	0x03B1C948 LDR X0, [X23]
	0x03B1C94C MOV W1, W20
	0x03B1C950 BL 0x1C16D6C
	0x03B1C954 LDR W8, [X21 + 0x18]
	0x03B1C958 CMP W25, W8
	0x03B1C95C B.CS 0x3B1CBF4
	0x03B1C960 ADD X8, X21, X26
	0x03B1C964 STUR X0, [X8 - 0x10]
	0x03B1C968 LDR X21, [X19 + 0x68]
	0x03B1C96C CBZ X21, 0x3B1CBF0
	0x03B1C970 LDR X0, [X23]
	0x03B1C974 MOV W1, W20
	0x03B1C978 BL 0x1C16D6C
	0x03B1C97C LDR W8, [X21 + 0x18]
	0x03B1C980 CMP W25, W8
	0x03B1C984 B.CS 0x3B1CBF4
	0x03B1C988 ADD X8, X21, X26
	0x03B1C98C STUR X0, [X8 - 0x8]
	0x03B1C990 LDR X21, [X19 + 0x68]
	0x03B1C994 CBZ X21, 0x3B1CBF0
	0x03B1C998 LDR X0, [X24]
	0x03B1C99C MOV W1, W20
	0x03B1C9A0 BL 0x1C16D6C
	0x03B1C9A4 LDR W8, [X21 + 0x18]
	0x03B1C9A8 CMP W25, W8
	0x03B1C9AC B.CS 0x3B1CBF4
	0x03B1C9B0 STR X0, [X21, X26, LSL]
	0x03B1C9B4 LDR X8, [X19 + 0x60]
	0x03B1C9B8 CBZ X8, 0x3B1CBF0
	0x03B1C9BC LDR W9, [X8 + 0x18]
	0x03B1C9C0 CMP W25, W9
	0x03B1C9C4 B.CS 0x3B1CBF4
	0x03B1C9C8 LDR X9, [X19 + 0x68]
	0x03B1C9CC CBZ X9, 0x3B1CBF0
	0x03B1C9D0 LDR W10, [X9 + 0x18]
	0x03B1C9D4 CMP W25, W10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8C7000
	006 Move X20, 0x5D8000
	007 Move W8, [X21+1775]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5D8000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move X0, 0x63D000
	018 Move X0, [X0+824]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1775], W8
	022 Move X0, [X20]
	023 Move X20, [X19+240]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {41}
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return 
	041 Move X21, 0x63D000
	042 Move X21, [X21+824]
	043 Move X20, [X19+240]
	044 Move X0, [X21]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Compare X20, 0
	050 JumpIfEqual {121}
	051 Move X8, [X21]
	052 Move X0, X20
	053 Move X2, X31
	054 Move X8, [X8+184]
	055 Move X1, [X8+288]
	056 Call Material.HasProperty, X0, X1
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {92}
	061 Move X0, X19
	062 Call TMP_SubMeshUI.get_textComponent, X0
	063 Compare X0, 0
	064 JumpIfEqual {121}
	065 Move X8, [X0]
	066 Move X9, [X8+1384]
	067 Move X1, [X8+1392]
	068 NotImplemented "Instruction BLR not yet implemented."
	069 Move X8, [X21]
	070 Move X20, X0
	071 Move W9, [X8+224]
	072 Compare W9, 0
	073 JumpIfNotEqual {76}
	074 Move X0, X8
	075 Call 0x1C17DFC
	076 Compare X20, 0
	077 JumpIfEqual {121}
	078 Move X8, [X21]
	079 Move X0, X20
	080 Move X2, X31
	081 Move X8, [X8+184]
	082 Move X1, [X8+288]
	083 Call Material.GetFloat, X0, X1
	084 Move X0, [X19+240]
	085 Compare X0, 0
	086 JumpIfEqual {121}
	087 Move X8, [X21]
	088 Move X2, X31
	089 Move X8, [X8+184]
	090 Move X1, [X8+288]
	091 Call Material.SetFloat, X0, X1, V0
	092 Move X0, X19
	093 Move X1, X31
	094 Call Graphic.get_canvasRenderer, X0
	095 Compare X0, 0
	096 JumpIfEqual {121}
	097 Move W1, 1
	098 Move X2, X31
	099 Call CanvasRenderer.set_materialCount, X0, X1
	100 Move X0, X19
	101 Move X1, X31
	102 Call Graphic.get_canvasRenderer, X0
	103 Move X8, [X19]
	104 Move X20, X0
	105 Move X0, X19
	106 Move X9, [X8+856]
	107 Move X1, [X8+864]
	108 NotImplemented "Instruction BLR not yet implemented."
	109 Compare X20, 0
	110 JumpIfEqual {121}
	111 Move X1, X0
	112 Move X0, X20
	113 Move X20, [X31+16]
	114 Move X19, [X31+24]
	115 Move W2, W31
	116 Move X3, X31
	117 Move X30, [X31+32]
	118 Move X21, [X31+40]
	119 Call CanvasRenderer.SetMaterial, X0, X1, X2
	120 Return 
	121 Call 0x1C17F20

Method: System.Void RecalculateClipping()

Disassembly:
	0x03B1C9D8 B.CS 0x3B1CBF4
	0x03B1C9DC ADD X8, X8, X26

ISIL:
	001 Move X1, X31
	002 Call MaskableGraphic.RecalculateClipping, X0
	003 Return 

Method: UnityEngine.Material GetMaterial()

Disassembly:
	0x03B1C9E0 ADD X9, X9, X26
	0x03B1C9E4 LDUR X0, [X8 - 0x28]

ISIL:
	001 Move X0, [X0+240]
	002 Return X0

Method: UnityEngine.Material GetMaterial(UnityEngine.Material mat)

Disassembly:
	0x03B1B76C STP X20, X19, [X31 + 0x10]
	0x03B1B770 ADRP X21, 0x8C7000
	0x03B1B774 ADRP X20, 0x5D8000
	0x03B1B778 LDRB W8, [X21 + 0x6EE]
	0x03B1B77C LDR X20, [X20 + 0x598]
	0x03B1B780 MOV X19, X0
	0x03B1B784 TBNZ X8, 0x0, 0x3B1B79C
	0x03B1B788 ADRP X0, 0x5D8000
	0x03B1B78C LDR X0, [X0 + 0x598]
	0x03B1B790 BL 0x1C16CF4
	0x03B1B794 MOVZ W8, 0x1
	0x03B1B798 STRB W8, [X21 + 0x6EE]
	0x03B1B79C LDR X0, [X20]
	0x03B1B7A0 LDR X20, [X19 + 0x128]
	0x03B1B7A4 LDR W8, [X0 + 0xE0]
	0x03B1B7A8 CBNZ W8, 0x3B1B7B0
	0x03B1B7AC BL 0x1C16DFC
	0x03B1B7B0 MOV X0, X20
	0x03B1B7B4 MOV X1, X31
	0x03B1B7B8 MOV X2, X31
	0x03B1B7BC BL 0x3C3883C
	0x03B1B7C0 TBZ X0, 0x0, 0x3B1B7F4
	0x03B1B7C4 LDR X0, [X19 + 0x118]
	0x03B1B7C8 CBZ X0, 0x3B1B804
	0x03B1B7CC MOV X1, X31
	0x03B1B7D0 BL 0x3CDADE8
	0x03B1B7D4 CBZ X0, 0x3B1B804
	0x03B1B7D8 MOV X1, X31
	0x03B1B7DC BL 0x3E24BA4
	0x03B1B7E0 CBZ X0, 0x3B1B804
	0x03B1B7E4 MOV X1, X31
	0x03B1B7E8 BL 0x3C32E90
	0x03B1B7EC STR X0, [X19 + 0x128]
	0x03B1B7F0 B 0x3B1B7F8
	0x03B1B7F4 LDR X0, [X19 + 0x128]
	0x03B1B7F8 LDP X20, X19, [X31 + 0x10]
	0x03B1B7FC LDP X30, X21, [X31], #0x20
	0x03B1B800 RET
	0x03B1B804 BL 0x1C16F20
	0x03B1B808 RET
	0x03B1B80C RET
	0x03B1B810 STP X30, X19, [X31 - 0x10]!
	0x03B1B814 CMP W1, 0x3
	0x03B1B818 B.NE 0x3B1B840
	0x03B1B81C LDRB W8, [X0 + 0x121]
	0x03B1B820 MOV X19, X0
	0x03B1B824 CBZ W8, 0x3B1B840
	0x03B1B828 LDR X8, [X19]
	0x03B1B82C MOV X0, X19
	0x03B1B830 LDR X9, [X8 + 0x3B8]
	0x03B1B834 LDR X1, [X8 + 0x3C0]
	0x03B1B838 BLR X9
	0x03B1B83C STRB W31, [X19 + 0x121]
	0x03B1B840 LDP X30, X19, [X31], #0x10
	0x03B1B844 RET
	0x03B1B848 LDR X8, [X0]
	0x03B1B84C LDR X2, [X8 + 0x3B8]
	0x03B1B850 LDR X1, [X8 + 0x3C0]
	0x03B1B854 BR X2
	0x03B1B858 STP X30, X21, [X31 - 0x20]!
	0x03B1B85C STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8C8000
	007 Move X21, 0x5D9000
	008 Move W8, [X22+1776]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5D9000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1776], W8
	021 Move X0, [X21]
	022 Move X21, [X19+232]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X21
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {48}
	035 Move X0, [X19+232]
	036 Compare X0, 0
	037 JumpIfEqual {72}
	038 Move X1, X31
	039 Call Object.GetInstanceID, X0
	040 Compare X20, 0
	041 JumpIfEqual {72}
	042 Move W21, W0
	043 Move X0, X20
	044 Move X1, X31
	045 Call Object.GetInstanceID, X0
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X0, [X19+232]
	048 Move X1, X20
	049 Call TMP_SubMeshUI.CreateMaterialInstance, X0, X1
	050 Move [X19+232], X0
	051 Move [X19+240], X0
	052 Move X0, X19
	053 Call TMP_SubMeshUI.GetPaddingForMaterial, X0
	054 Move X8, [X19]
	055 Move [X19+268], S0
	056 Move X0, X19
	057 Move X9, [X8+760]
	058 Move X1, [X8+768]
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move X8, [X19]
	061 Move X0, X19
	062 Move X9, [X8+776]
	063 Move X1, [X8+784]
	064 NotImplemented "Instruction BLR not yet implemented."
	065 Move X0, [X19+240]
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Return X0
	072 Call 0x1C17F20

Method: UnityEngine.Material CreateMaterialInstance(UnityEngine.Material source)

Disassembly:
	0x03B1C9E8 LDUR X1, [X9 - 0x28]
	0x03B1C9EC MOV W2, W20
	0x03B1C9F0 MOV X3, X31
	0x03B1C9F4 BL 0x33A0C7C
	0x03B1C9F8 LDR X8, [X19 + 0x60]
	0x03B1C9FC CBZ X8, 0x3B1CBF0
	0x03B1CA00 LDR W9, [X8 + 0x18]
	0x03B1CA04 CMP W25, W9
	0x03B1CA08 B.CS 0x3B1CBF4
	0x03B1CA0C LDR X9, [X19 + 0x68]
	0x03B1CA10 CBZ X9, 0x3B1CBF0
	0x03B1CA14 LDR W10, [X9 + 0x18]
	0x03B1CA18 CMP W25, W10
	0x03B1CA1C B.CS 0x3B1CBF4
	0x03B1CA20 ADD X8, X8, X26
	0x03B1CA24 ADD X9, X9, X26
	0x03B1CA28 LDUR X0, [X8 - 0x10]
	0x03B1CA2C LDUR X1, [X9 - 0x10]
	0x03B1CA30 MOV W2, W20
	0x03B1CA34 MOV X3, X31
	0x03B1CA38 BL 0x33A0C7C
	0x03B1CA3C LDR X8, [X19 + 0x60]
	0x03B1CA40 CBZ X8, 0x3B1CBF0
	0x03B1CA44 LDR W9, [X8 + 0x18]
	0x03B1CA48 CMP W25, W9
	0x03B1CA4C B.CS 0x3B1CBF4
	0x03B1CA50 LDR X9, [X19 + 0x68]
	0x03B1CA54 CBZ X9, 0x3B1CBF0
	0x03B1CA58 LDR W10, [X9 + 0x18]
	0x03B1CA5C CMP W25, W10
	0x03B1CA60 B.CS 0x3B1CBF4
	0x03B1CA64 ADD X8, X8, X26
	0x03B1CA68 ADD X9, X9, X26
	0x03B1CA6C LDUR X0, [X8 - 0x8]
	0x03B1CA70 LDUR X1, [X9 - 0x8]
	0x03B1CA74 MOV W2, W20
	0x03B1CA78 MOV X3, X31
	0x03B1CA7C BL 0x33A0C7C
	0x03B1CA80 LDR X8, [X19 + 0x60]
	0x03B1CA84 CBZ X8, 0x3B1CBF0
	0x03B1CA88 LDR W9, [X8 + 0x18]
	0x03B1CA8C CMP W25, W9
	0x03B1CA90 B.CS 0x3B1CBF4
	0x03B1CA94 LDR X9, [X19 + 0x68]
	0x03B1CA98 CBZ X9, 0x3B1CBF0
	0x03B1CA9C LDR W10, [X9 + 0x18]
	0x03B1CAA0 CMP W25, W10
	0x03B1CAA4 B.CS 0x3B1CBF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x8C7000
	006 Move X21, 0x5DC000
	007 Move W8, [X19+1777]
	008 Move X21, [X21+3232]
	009 Move X20, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5DC000
	015 Move X0, [X0+3232]
	016 Call 0x1C17CF4
	017 Move X0, 0x63E000
	018 Move X0, [X0+480]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X19+1777], W8
	022 Move X0, [X21]
	023 Call 0x1C17F10
	024 Move X1, X20
	025 Move X2, X31
	026 Move X19, X0
	027 Call Material..ctor, X0, X1
	028 Compare X20, 0
	029 JumpIfEqual {57}
	030 Move X0, X20
	031 Move X1, X31
	032 Call Material.get_shaderKeywords, X0
	033 Compare X19, 0
	034 JumpIfEqual {57}
	035 Move X20, 0x63E000
	036 Move X20, [X20+480]
	037 Move X1, X0
	038 Move X0, X19
	039 Move X2, X31
	040 Call Material.set_shaderKeywords, X0, X1
	041 Move X0, X19
	042 Move X1, X31
	043 Call Object.get_name, X0
	044 Move X1, [X20]
	045 Move X2, X31
	046 Call String.Concat, X0, X1
	047 Move X1, X0
	048 Move X0, X19
	049 Move X2, X31
	050 Call Object.set_name, X0, X1
	051 Move X0, X19
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return X0
	057 Call 0x1C17F20

Method: UnityEngine.Material GetSharedMaterial()

Disassembly:
	0x03B1CAA8 LDR X0, [X8, X26, LSL]
	0x03B1CAAC LDR X1, [X9, X26, LSL]
	0x03B1CAB0 MOV W2, W20
	0x03B1CAB4 MOV X3, X31
	0x03B1CAB8 BL 0x33A0C7C
	0x03B1CABC LDR X21, [X19 + 0x68]
	0x03B1CAC0 ADD W25, W25, 0x1
	0x03B1CAC4 ADD X26, X26, 0x50

ISIL:
	001 Move [X31-16], X30
	002 Move X1, X31
	003 Call Graphic.get_canvasRenderer, X0
	004 Compare X0, 0
	005 JumpIfEqual {10}
	006 Move X1, X31
	007 Move X30, [X31+16]
	008 Call CanvasRenderer.GetMaterial, X0
	009 Return X0
	010 Call 0x1C17F20

Method: System.Void SetSharedMaterial(UnityEngine.Material mat)

Disassembly:
	0x03B1B9F4 ADRP X21, 0x5DC000
	0x03B1B9F8 LDRB W8, [X19 + 0x6F1]
	0x03B1B9FC LDR X21, [X21 + 0xCA0]
	0x03B1BA00 MOV X20, X1
	0x03B1BA04 TBNZ X8, 0x0, 0x3B1BA28
	0x03B1BA08 ADRP X0, 0x5DC000
	0x03B1BA0C LDR X0, [X0 + 0xCA0]
	0x03B1BA10 BL 0x1C16CF4
	0x03B1BA14 ADRP X0, 0x63E000
	0x03B1BA18 LDR X0, [X0 + 0x1E0]
	0x03B1BA1C BL 0x1C16CF4
	0x03B1BA20 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move [X0+240], X1
	005 Move [X0+32], X1
	006 Call TMP_SubMeshUI.GetPaddingForMaterial, X0
	007 Move X8, [X19]
	008 Move [X19+268], S0
	009 Move X0, X19
	010 Move X2, [X8+776]
	011 Move X1, [X8+784]
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 CallNoReturn X2

Method: System.Void .ctor()

Disassembly:
	0x03B1CAC8 CBNZ X21, 0x3B1C8D0
	0x03B1CACC B 0x3B1CBF0

ISIL:
	001 Move X1, X31
	002 Call MaskableGraphic..ctor, X0
	003 Return 

