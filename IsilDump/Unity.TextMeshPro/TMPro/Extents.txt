Type: TMPro.Extents

Method: System.Void .ctor(UnityEngine.Vector2 min, UnityEngine.Vector2 max)

Disassembly:
	0x03ADC4B8 BL 0x1C16CF4
	0x03ADC4BC MOVZ W8, 0x1
	0x03ADC4C0 STRB W8, [X20 + 0x55D]

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Move [X0+8], S2
	004 Move [X0+16], S3
	005 Return 

Method: System.String ToString()

Disassembly:
	0x03ADC4C4 LDR X1, [X21]
	0x03ADC4C8 MOV X0, X19
	0x03ADC4CC LDP X20, X19, [X31 + 0x10]
	0x03ADC4D0 LDP X30, X21, [X31], #0x20
	0x03ADC4D4 B 0x2728D50
	0x03ADC4D8 LDRB W0, [X0 + 0x30]
	0x03ADC4DC RET
	0x03ADC4E0 LDR V0, [X0 + 0x2C]
	0x03ADC4E4 RET
	0x03ADC4E8 LDR V0, [X0 + 0x8]
	0x03ADC4EC RET
	0x03ADC4F0 STR S0, [X0 + 0x8]
	0x03ADC4F4 RET
	0x03ADC4F8 LDR V0, [X0 + 0xC]
	0x03ADC4FC RET
	0x03ADC500 STR S0, [X0 + 0xC]
	0x03ADC504 RET
	0x03ADC508 LDR V0, [X0 + 0x10]
	0x03ADC50C RET
	0x03ADC510 STR S0, [X0 + 0x10]
	0x03ADC514 RET
	0x03ADC518 LDRB W0, [X0 + 0x14]
	0x03ADC51C RET
	0x03ADC520 AND W8, W1, 0x1
	0x03ADC524 STRB W8, [X0 + 0x14]
	0x03ADC528 RET
	0x03ADC52C STR D8, [X31 - 0x20]!
	0x03ADC530 STR X30, [X31 + 0x8]
	0x03ADC534 STP X20, X19, [X31 + 0x10]
	0x03ADC538 ADRP X20, 0x906000
	0x03ADC53C LDRB W8, [X20 + 0x55E]
	0x03ADC540 MOV V8.16B, V0.16B
	0x03ADC544 MOV X19, X0
	0x03ADC548 TBNZ X8, 0x0, 0x3ADC560
	0x03ADC54C ADRP X0, 0x67C000
	0x03ADC550 LDR X0, [X0 + 0x8B8]
	0x03ADC554 BL 0x1C16CF4
	0x03ADC558 MOVZ W8, 0x1
	0x03ADC55C STRB W8, [X20 + 0x55E]
	0x03ADC560 LDR X0, [X19]
	0x03ADC564 CBZ X0, 0x3ADC5A8
	0x03ADC568 ADRP X8, 0x67C000
	0x03ADC56C LDR X8, [X8 + 0x8B8]
	0x03ADC570 LDP S0, S1, [X19 + 0x8]
	0x03ADC574 FMOV S2, 1
	0x03ADC578 FCMP S8, 0x0
	0x03ADC57C FMOV S3, W31
	0x03ADC580 FMIN S2, S8, S2
	0x03ADC584 LDR X1, [X8]
	0x03ADC588 LDP X20, X19, [X31 + 0x10]
	0x03ADC58C LDR X30, [X31 + 0x8]
	0x03ADC590 FSUB S1, S1, S0
	0x03ADC594 FCSEL S2, S2, S3, PL
	0x03ADC598 FMUL S1, S2, S1
	0x03ADC59C FADD S0, S0, S1
	0x03ADC5A0 LDR V8, [X31], #0x20
	0x03ADC5A4 B 0x272A704
	0x03ADC5A8 LDP X20, X19, [X31 + 0x10]
	0x03ADC5AC LDR X30, [X31 + 0x8]
	0x03ADC5B0 LDR V8, [X31], #0x20
	0x03ADC5B4 RET
	0x03ADC5B8 LDR X8, [X0]
	0x03ADC5BC CMP X8, 0x0
	0x03ADC5C0 CSET W0, NE
	0x03ADC5C4 RET
	0x03ADC5C8 STP X30, X21, [X31 - 0x20]!
	0x03ADC5CC STP X20, X19, [X31 + 0x10]
	0x03ADC5D0 ADRP X21, 0x906000
	0x03ADC5D4 LDRB W8, [X21 + 0x55F]
	0x03ADC5D8 MOV X19, X1
	0x03ADC5DC MOV X20, X0
	0x03ADC5E0 TBNZ X8, 0x0, 0x3ADC604
	0x03ADC5E4 ADRP X0, 0x67C000
	0x03ADC5E8 LDR X0, [X0 + 0x8C0]
	0x03ADC5EC BL 0x1C16CF4
	0x03ADC5F0 ADRP X0, 0x67C000
	0x03ADC5F4 LDR X0, [X0 + 0x8C8]
	0x03ADC5F8 BL 0x1C16CF4
	0x03ADC5FC MOVZ W8, 0x1
	0x03ADC600 STRB W8, [X21 + 0x55F]
	0x03ADC604 LDR X21, [X20]
	0x03ADC608 CBNZ X21, 0x3ADC62C
	0x03ADC60C ADRP X8, 0x67C000
	0x03ADC610 LDR X8, [X8 + 0x8C0]
	0x03ADC614 LDR X0, [X8]
	0x03ADC618 BL 0x1C16F10
	0x03ADC61C MOV X21, X0
	0x03ADC620 BL 0x3ADC650
	0x03ADC624 STR X21, [X20]
	0x03ADC628 CBZ X21, 0x3ADC64C
	0x03ADC62C ADRP X8, 0x67C000
	0x03ADC630 LDR X8, [X8 + 0x8C8]
	0x03ADC634 MOV X1, X19
	0x03ADC638 LDP X20, X19, [X31 + 0x10]
	0x03ADC63C MOV X0, X21
	0x03ADC640 LDR X2, [X8]
	0x03ADC644 LDP X30, X21, [X31], #0x20
	0x03ADC648 B 0x272A4B0
	0x03ADC64C BL 0x1C16F20
	0x03ADC650 STP X30, X21, [X31 - 0x20]!
	0x03ADC654 STP X20, X19, [X31 + 0x10]
	0x03ADC658 ADRP X20, 0x906000
	0x03ADC65C ADRP X21, 0x67C000
	0x03ADC660 LDRB W8, [X20 + 0x560]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x907000
	007 Move X21, 0x618000
	008 Move W8, [X20+1355]
	009 Move X21, [X21+2760]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0x618000
	016 Move X0, [X0+2760]
	017 Call 0x1C17CF4
	018 Move X0, 0x66C000
	019 Move X0, [X0+384]
	020 Call 0x1C17CF4
	021 Move X0, 0x67D000
	022 Move X0, [X0+2152]
	023 Call 0x1C17CF4
	024 Move X0, 0x618000
	025 Move X0, [X0+2104]
	026 Call 0x1C17CF4
	027 Move X0, 0x619000
	028 Move X0, [X0+1544]
	029 Call 0x1C17CF4
	030 Move X0, 0x67D000
	031 Move X0, [X0+2160]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+1355], W8
	035 Move X0, [X21]
	036 Move W1, 9
	037 Call 0x1C17D6C
	038 Compare X0, 0
	039 JumpIfEqual {106}
	040 Move W8, [X0+24]
	041 Move X20, X0
	042 Compare W8, 0
	043 JumpIfEqual {105}
	044 Move X8, 0x67D000
	045 Move X8, [X8+2152]
	046 Move X21, 0x66C000
	047 Move X0, X19
	048 Move X2, X31
	049 Move X8, [X8]
	050 Move X21, [X21+384]
	051 Move [X20+32], X8
	052 Move X1, [X21]
	053 Call Single.ToString, X0, X1
	054 Move W8, [X20+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move [X20+40], X0
	058 Move X22, 0x618000
	059 Move X22, [X22+2104]
	060 Add X0, X19, 4
	061 Move X2, X31
	062 Move X8, [X22]
	063 Move [X20+48], X8
	064 Move X1, [X21]
	065 Call Single.ToString, X0, X1
	066 Move W8, [X20+24]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move [X20+56], X0
	070 Move X8, 0x67D000
	071 Move X8, [X8+2160]
	072 Add X0, X19, 8
	073 Move X2, X31
	074 Move X8, [X8]
	075 Move [X20+64], X8
	076 Move X1, [X21]
	077 Call Single.ToString, X0, X1
	078 Move W8, [X20+24]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move [X20+72], X0
	082 Move X8, [X22]
	083 Add X0, X19, 12
	084 Move X2, X31
	085 Move [X20+80], X8
	086 Move X1, [X21]
	087 Call Single.ToString, X0, X1
	088 Move W8, [X20+24]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move [X20+88], X0
	092 Move X8, 0x619000
	093 Move X8, [X8+1544]
	094 Move X0, X20
	095 Move X22, [X31+16]
	096 Move X21, [X31+24]
	097 Move X1, X31
	098 Move X8, [X8]
	099 Move [X20+96], X8
	100 Move X20, [X31+32]
	101 Move X19, [X31+40]
	102 Move X30, [X31+48]
	103 Call String.Concat, X0
	104 Return X0
	105 Call 0x1C17F28
	106 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03ADC664 LDR X21, [X21 + 0x8D0]
	0x03ADC668 MOV X19, X0
	0x03ADC66C TBNZ X8, 0x0, 0x3ADC684
	0x03ADC670 ADRP X0, 0x67C000
	0x03ADC674 LDR X0, [X0 + 0x8D0]
	0x03ADC678 BL 0x1C16CF4
	0x03ADC67C MOVZ W8, 0x1
	0x03ADC680 STRB W8, [X20 + 0x560]
	0x03ADC684 LDR X1, [X21]
	0x03ADC688 MOV X0, X19
	0x03ADC68C LDP X20, X19, [X31 + 0x10]
	0x03ADC690 LDP X30, X21, [X31], #0x20
	0x03ADC694 B 0x272A4A4
	0x03ADC698 LDRB W0, [X0 + 0x14]
	0x03ADC69C RET
	0x03ADC6A0 LDR V0, [X0 + 0x10]
	0x03ADC6A4 RET
	0x03ADC6A8 STP D9, D8, [X31 - 0x30]!
	0x03ADC6AC STP X30, X21, [X31 + 0x10]
	0x03ADC6B0 STP X20, X19, [X31 + 0x20]
	0x03ADC6B4 ADRP X19, 0x906000
	0x03ADC6B8 ADRP X21, 0x617000
	0x03ADC6BC LDRB W8, [X19 + 0x561]
	0x03ADC6C0 LDR X21, [X21 + 0xA58]
	0x03ADC6C4 MOV V8.16B, V1.16B
	0x03ADC6C8 MOV V9.16B, V0.16B
	0x03ADC6CC MOV X20, X0
	0x03ADC6D0 TBNZ X8, 0x0, 0x3ADC6F4
	0x03ADC6D4 ADRP X0, 0x67C000
	0x03ADC6D8 LDR X0, [X0 + 0x558]
	0x03ADC6DC BL 0x1C16CF4
	0x03ADC6E0 ADRP X0, 0x617000
	0x03ADC6E4 LDR X0, [X0 + 0xA58]
	0x03ADC6E8 BL 0x1C16CF4
	0x03ADC6EC MOVZ W8, 0x1
	0x03ADC6F0 STRB W8, [X19 + 0x561]
	0x03ADC6F4 LDR X0, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x907000
	005 Move W8, [X19+1356]
	006 Move TEMP, X8
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfEqual {15}
	010 Move X0, 0x67D000
	011 Move X0, [X0+2168]
	012 Call 0x1C17CF4
	013 Move W8, 1
	014 Move [X19+1356], W8
	015 Move X20, 0x8FE000
	016 Move X19, 0x67D000
	017 Move W8, [X20+1935]
	018 Move X19, [X19+2168]
	019 Compare W8, 0
	020 JumpIfNotEqual {26}
	021 Move X0, 0x620000
	022 Move X0, [X0+3848]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+1935], W8
	026 Move X8, 0x620000
	027 Move X8, [X8+3848]
	028 Move X9, [X19]
	029 Move X8, [X8]
	030 Move X8, [X8+184]
	031 Move V0, [X8]
	032 Move X8, [X9+184]
	033 Move X9, -50266112
	034 Move V0.D[1], V0.D[0]
	035 Move [X8], V0
	036 Move X8, [X19]
	037 Move V0, [X9+251]
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X8, [X8+184]
	041 Move [X8+1], V0
	042 Move X30, [X31+32]
	043 Return 

