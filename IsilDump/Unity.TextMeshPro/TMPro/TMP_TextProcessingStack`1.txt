Type: TMPro.TMP_TextProcessingStack`1

Method: System.Void .ctor(T[] stack)

Disassembly:
	0x02671DC0 MSUB W8, W11, W9, W8
	0x02671DC4 STR W8, [X19 + 0x8]
	0x02671DC8 CMP W10, W9
	0x02671DCC CSINC W8, W9, W10, GE
	0x02671DD0 B 0x2671DE0
	0x02671DD4 LDR W9, [X19 + 0x18]
	0x02671DD8 STR W8, [X19 + 0x8]
	0x02671DDC ADD W8, W9, 0x1
	0x02671DE0 STR W8, [X19 + 0x18]
	0x02671DE4 LDP X20, X19, [X31 + 0x10]
	0x02671DE8 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-16], X30
	002 Move [X0], X1
	003 Compare X1, 0
	004 JumpIfEqual {12}
	005 Move X8, [X1+24]
	006 NotImplemented "Instruction MOVI not yet implemented."
	007 Move [X0+8], D0
	008 Move [X0+20], D0
	009 Move [X0+16], W8
	010 Move X30, [X31+16]
	011 Return 
	012 Call 0x1C17F20

Method: System.Void .ctor(System.Int32 capacity)

Disassembly:
	0x02671DEC RET
	0x02671DF0 BL 0x1C16F20
	0x02671DF4 BL 0x1C16F28
	0x02671DF8 STR X30, [X31 - 0x10]!
	0x02671DFC LDR W8, [X0 + 0x8]
	0x02671E00 LDR W9, [X0 + 0x14]
	0x02671E04 CBZ W8, 0x2671E14
	0x02671E08 SUB W8, W8, 0x1
	0x02671E0C CBNZ W9, 0x2671E1C
	0x02671E10 B 0x2671E2C
	0x02671E14 CBZ W9, 0x2671E74
	0x02671E18 MOVN W8, 0x0
	0x02671E1C SDIV W10, W8, W9
	0x02671E20 MSUB W8, W10, W9, W8
	0x02671E24 AND W9, W9, W8, 0x1F
	0x02671E28 ADD W8, W9, W8
	0x02671E2C LDR X9, [X0]
	0x02671E30 STR W8, [X0 + 0x8]
	0x02671E34 CBZ X9, 0x2671E7C
	0x02671E38 LDR W10, [X9 + 0x18]
	0x02671E3C CMP W8, W10
	0x02671E40 B.CS 0x2671E80
	0x02671E44 LDR W10, [X0 + 0xC]
	0x02671E48 ADD X9, X9, W8, 0x2, SXTW
	0x02671E4C LDR W8, [X9 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X2+32]
	005 Move W19, W1
	006 Move X20, X0
	007 Move W9, [X8+309]
	008 Move TEMP, X9
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {15}
	012 Move X0, X8
	013 Call 0x1C5D684
	014 Move X8, X0
	015 Move X8, [X8+192]
	016 Move X0, [X8+24]
	017 Move W8, [X0+309]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {23}
	022 Call 0x1C5D684
	023 Move W1, W19
	024 Call 0x1C17D6C
	025 NotImplemented "Instruction MOVI not yet implemented."
	026 Move [X20], X0
	027 Move [X20+16], W19
	028 Move [X20+8], D0
	029 Move [X20+20], D0
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Return 

Method: System.Void .ctor(System.Int32 capacity, System.Int32 rolloverSize)

Disassembly:
	0x02671E50 STR W10, [X9 + 0x20]
	0x02671E54 LDR W9, [X0 + 0x18]
	0x02671E58 SUB W10, W9, 0x1
	0x02671E5C CMP W9, 0x0
	0x02671E60 CSEL W9, W10, W31, GT
	0x02671E64 STR W9, [X0 + 0x18]
	0x02671E68 MOV W0, W8
	0x02671E6C LDR X30, [X31], #0x10
	0x02671E70 RET
	0x02671E74 MOV W8, W31
	0x02671E78 B 0x2671E68
	0x02671E7C BL 0x1C16F20
	0x02671E80 BL 0x1C16F28
	0x02671E84 STR X30, [X31 - 0x10]!
	0x02671E88 LDR W9, [X0 + 0x8]
	0x02671E8C CBZ W9, 0x2671EB4
	0x02671E90 LDR X8, [X0]
	0x02671E94 CBZ X8, 0x2671EC4
	0x02671E98 LDR W10, [X8 + 0x18]
	0x02671E9C SUB W9, W9, 0x1
	0x02671EA0 CMP W9, W10
	0x02671EA4 B.CS 0x2671EC8
	0x02671EA8 ADD X8, X8, W9, 0x2, SXTW
	0x02671EAC ADD X8, X8, 0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X3+32]
	006 Move W19, W2
	007 Move W21, W1
	008 Move X20, X0
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move X8, [X8+192]
	018 Move X0, [X8+24]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move W1, W21
	026 Call 0x1C17D6C
	027 Move [X20], X0
	028 Move [X20+8], X31
	029 Move [X20+16], W21
	030 Move [X20+20], W19
	031 Move [X20+24], W31
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return 

Method: System.Int32 get_Count()

Disassembly:
	0x02671EB0 B 0x2671EB8
	0x02671EB4 ADD X8, X0, 0xC

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: T get_current()

Disassembly:
	0x02671EB8 LDR W0, [X8]
	0x02671EBC LDR X30, [X31], #0x10
	0x02671EC0 RET
	0x02671EC4 BL 0x1C16F20
	0x02671EC8 BL 0x1C16F28
	0x02671ECC STR X30, [X31 - 0x10]!
	0x02671ED0 LDR W9, [X0 + 0x8]
	0x02671ED4 LDR X8, [X0]
	0x02671ED8 SUBS W9, W9, 0x1
	0x02671EDC B.LT 0x2671EF8
	0x02671EE0 CBZ X8, 0x2671F10
	0x02671EE4 LDR W10, [X8 + 0x18]
	0x02671EE8 CMP W9, W10
	0x02671EEC B.CS 0x2671F14
	0x02671EF0 ADD X8, X8, W9, 0x2, UXTW
	0x02671EF4 B 0x2671F04
	0x02671EF8 CBZ X8, 0x2671F10
	0x02671EFC LDR W9, [X8 + 0x18]
	0x02671F00 CBZ W9, 0x2671F14

ISIL:
	001 Move [X31-16], X30
	002 Move W9, [X0+8]
	003 Move X8, [X0]
	004 Subtract W9, W9, 1
	005 Compare X8, 0
	006 JumpIfEqual {19}
	007 Move W10, [X8+24]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Add X8, X8, W9
	010 Compare X8, 0
	011 JumpIfEqual {19}
	012 Move W9, [X8+24]
	013 Compare W9, 0
	014 JumpIfEqual {20}
	015 Add X8, X8, 32
	016 Move W0, [X8]
	017 Move X30, [X31+16]
	018 Return X0
	019 Call 0x1C17F20
	020 Call 0x1C17F28

Method: System.Int32 get_rolloverSize()

Disassembly:
	0x02671F04 LDR W0, [X8 + 0x20]!
	0x02671F08 LDR X30, [X31], #0x10

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: System.Void set_rolloverSize(System.Int32 value)

Disassembly:
	0x02671F0C RET
	0x02671F10 BL 0x1C16F20

ISIL:
	001 Move [X0+20], W1
	002 Return 

Method: System.Void SetDefault(TMPro.TMP_TextProcessingStack`1<T>[] stack, T item)

Disassembly:
	0x02671F14 BL 0x1C16F28
	0x02671F18 STR X30, [X31 - 0x10]!
	0x02671F1C LDR W9, [X0 + 0x8]
	0x02671F20 LDR X8, [X0]
	0x02671F24 SUBS W9, W9, 0x2
	0x02671F28 B.GE 0x2671F3C
	0x02671F2C CBZ X8, 0x2671F5C
	0x02671F30 LDR W9, [X8 + 0x18]
	0x02671F34 CBNZ W9, 0x2671F50
	0x02671F38 B 0x2671F60
	0x02671F3C CBZ X8, 0x2671F5C
	0x02671F40 LDR W10, [X8 + 0x18]
	0x02671F44 CMP W9, W10
	0x02671F48 B.CS 0x2671F60
	0x02671F4C ADD X8, X8, W9, 0x2, UXTW
	0x02671F50 LDR W0, [X8 + 0x20]!
	0x02671F54 LDR X30, [X31], #0x10
	0x02671F58 RET
	0x02671F5C BL 0x1C16F20
	0x02671F60 BL 0x1C16F28
	0x02671F64 STR X30, [X31 - 0x10]!
	0x02671F68 STR X1, [X0]
	0x02671F6C CBZ X1, 0x2671F8C
	0x02671F70 LDR X8, [X1 + 0x18]
	0x02671F74 MOVI V0.2D, 0x0
	0x02671F78 STR D0, [X0 + 0x8]
	0x02671F7C STUR D0, [X0 + 0x14]
	0x02671F80 STR W8, [X0 + 0x10]
	0x02671F84 LDR X30, [X31], #0x10
	0x02671F88 RET
	0x02671F8C BL 0x1C16F20
	0x02671F90 STR X30, [X31 - 0x20]!
	0x02671F94 STP X20, X19, [X31 + 0x10]
	0x02671F98 LDR X8, [X2 + 0x20]
	0x02671F9C MOV W19, W1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare X0, 0
	008 JumpIfEqual {42}
	009 Move X8, [X0+24]
	010 Move X20, X0
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X19, X2
	013 Move X23, X31
	014 And X21, X1, 0
	015 And X8, X8, 0
	016 Add X22, X20, 32
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X0, [X19+32]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move X8, [X0+192]
	026 Move X0, X22
	027 Move X1, X21
	028 Move X2, [X8+40]
	029 Call 0x2671FAC, X0, X1
	030 Move W8, [X20+24]
	031 Add X23, X23, 1
	032 Add X22, X22, 32
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Move X23, [X31+56]
	040 Return 
	041 Call 0x1C17F28
	042 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x02671FA0 MOV X20, X0
	0x02671FA4 LDRB W9, [X8 + 0x135]
	0x02671FA8 TBNZ X9, 0x0, 0x2671FB8

ISIL:
	001 Move [X0+8], W31
	002 Move [X0+24], W31
	003 Return 

Method: System.Void SetDefault(T item)

Disassembly:
	0x02671FAC MOV X0, X8
	0x02671FB0 BL 0x1C5C684
	0x02671FB4 MOV X8, X0
	0x02671FB8 LDR X8, [X8 + 0xC0]
	0x02671FBC LDR X0, [X8 + 0x18]
	0x02671FC0 LDRB W8, [X0 + 0x135]
	0x02671FC4 TBNZ X8, 0x0, 0x2671FCC
	0x02671FC8 BL 0x1C5C684
	0x02671FCC MOV W1, W19
	0x02671FD0 BL 0x1C16D6C
	0x02671FD4 MOVI V0.2D, 0x0
	0x02671FD8 STR X0, [X20]
	0x02671FDC STR W19, [X20 + 0x10]
	0x02671FE0 STR D0, [X20 + 0x8]
	0x02671FE4 STUR D0, [X20 + 0x14]
	0x02671FE8 LDP X20, X19, [X31 + 0x10]
	0x02671FEC LDR X30, [X31], #0x20
	0x02671FF0 RET
	0x02671FF4 STP X30, X21, [X31 - 0x20]!
	0x02671FF8 STP X20, X19, [X31 + 0x10]
	0x02671FFC LDR X8, [X3 + 0x20]
	0x02672000 MOV W19, W2
	0x02672004 MOV W21, W1
	0x02672008 MOV X20, X0
	0x0267200C LDRB W9, [X8 + 0x135]
	0x02672010 TBNZ X9, 0x0, 0x2672020
	0x02672014 MOV X0, X8
	0x02672018 BL 0x1C5C684
	0x0267201C MOV X8, X0
	0x02672020 LDR X8, [X8 + 0xC0]
	0x02672024 LDR X0, [X8 + 0x18]
	0x02672028 LDRB W8, [X0 + 0x135]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0]
	006 Move X20, X1
	007 Compare X0, 0
	008 JumpIfNotEqual {32}
	009 Move W8, 4
	010 Move [X19+16], W8
	011 Move X0, [X2+32]
	012 Move W8, [X0+309]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {18}
	017 Call 0x1C5D684
	018 Move X8, [X0+192]
	019 Move X0, [X8+24]
	020 Move W8, [X0+309]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {26}
	025 Call 0x1C5D684
	026 Move W1, 4
	027 Call 0x1C17D6C
	028 Move [X19], X0
	029 Move [X19+12], W31
	030 Compare X0, 0
	031 JumpIfEqual {43}
	032 Move W8, [X0+24]
	033 Compare W8, 0
	034 JumpIfEqual {42}
	035 Move W8, 1
	036 Move [X0+32], W20
	037 Move [X19+8], W8
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Return 
	042 Call 0x1C17F28
	043 Call 0x1C17F20

Method: System.Void Add(T item)

Disassembly:
	0x0267202C TBNZ X8, 0x0, 0x2672034
	0x02672030 BL 0x1C5C684
	0x02672034 MOV W1, W21
	0x02672038 BL 0x1C16D6C
	0x0267203C STP X0, X31, [X20]
	0x02672040 STP W21, W19, [X20 + 0x10]
	0x02672044 STR W31, [X20 + 0x18]
	0x02672048 LDP X20, X19, [X31 + 0x10]
	0x0267204C LDP X30, X21, [X31], #0x20
	0x02672050 RET
	0x02672054 LDR W0, [X0 + 0x18]
	0x02672058 RET
	0x0267205C STR X30, [X31 - 0x10]!
	0x02672060 LDR W9, [X0 + 0x8]
	0x02672064 LDR X8, [X0]
	0x02672068 SUBS W9, W9, 0x1
	0x0267206C B.LT 0x2672088
	0x02672070 CBZ X8, 0x26720A0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Compare X8, 0
	004 JumpIfEqual {16}
	005 NotImplemented "Instruction LDRSW not yet implemented."
	006 Move W10, [X8+24]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Add X8, X8, X9
	010 Move [X8+32], W1
	011 Move W8, [X0+8]
	012 Add W8, W8, 1
	013 Move [X0+8], W8
	014 Move X30, [X31+16]
	015 Return 
	016 Call 0x1C17F20
	017 Call 0x1C17F28

Method: T Remove()

Disassembly:
	0x02672074 LDR W10, [X8 + 0x18]
	0x02672078 CMP W9, W10
	0x0267207C B.CS 0x26720A4
	0x02672080 ADD X8, X8, W9, 0x2, UXTW
	0x02672084 B 0x2672094
	0x02672088 CBZ X8, 0x26720A0
	0x0267208C LDR W9, [X8 + 0x18]
	0x02672090 CBZ W9, 0x26720A4
	0x02672094 LDR W0, [X8 + 0x20]!
	0x02672098 LDR X30, [X31], #0x10
	0x0267209C RET
	0x026720A0 BL 0x1C16F20
	0x026720A4 BL 0x1C16F28
	0x026720A8 LDR W0, [X0 + 0x14]
	0x026720AC RET
	0x026720B0 STR W1, [X0 + 0x14]
	0x026720B4 RET
	0x026720B8 STP X30, X23, [X31 - 0x30]!
	0x026720BC STP X22, X21, [X31 + 0x10]
	0x026720C0 STP X20, X19, [X31 + 0x20]
	0x026720C4 CBZ X0, 0x2672140
	0x026720C8 LDR X8, [X0 + 0x18]
	0x026720CC MOV X21, X0
	0x026720D0 CMP W8, 0x1
	0x026720D4 B.LT 0x267212C

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+8]
	003 Subtract W9, W8, 1
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move [X0+8], W9
	006 Move X9, [X0]
	007 Compare X9, 0
	008 JumpIfEqual {25}
	009 Move W10, [X9+24]
	010 Subtract W8, W8, 2
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add X8, X9, W8
	013 Move X8, [X0]
	014 Move W9, 1
	015 Move [X0+8], W9
	016 Compare X8, 0
	017 JumpIfEqual {25}
	018 Move W9, [X8+24]
	019 Compare W9, 0
	020 JumpIfEqual {26}
	021 Add X8, X8, 32
	022 Move W0, [X8]
	023 Move X30, [X31+16]
	024 Return X0
	025 Call 0x1C17F20
	026 Call 0x1C17F28

Method: System.Void Push(T item)

Disassembly:
	0x026720D8 MOV X19, X2
	0x026720DC MOV W20, W1
	0x026720E0 MOV X23, X31
	0x026720E4 AND X8, X8, 0x0
	0x026720E8 ADD X22, X21, 0x20
	0x026720EC CMP X23, W8, UXTW
	0x026720F0 B.CS 0x267213C
	0x026720F4 LDR X0, [X19 + 0x20]
	0x026720F8 LDRB W8, [X0 + 0x135]
	0x026720FC TBNZ X8, 0x0, 0x2672104
	0x02672100 BL 0x1C5C684
	0x02672104 LDR X8, [X0 + 0xC0]
	0x02672108 MOV X0, X22
	0x0267210C MOV W1, W20
	0x02672110 LDR X2, [X8 + 0x28]
	0x02672114 BL 0x2672150
	0x02672118 LDR W8, [X21 + 0x18]
	0x0267211C ADD X23, X23, 0x1
	0x02672120 ADD X22, X22, 0x20
	0x02672124 CMP X23, W8, SXTW
	0x02672128 B.LT 0x26720EC
	0x0267212C LDP X20, X19, [X31 + 0x20]
	0x02672130 LDP X22, X21, [X31 + 0x10]
	0x02672134 LDP X30, X23, [X31], #0x30
	0x02672138 RET
	0x0267213C BL 0x1C16F28
	0x02672140 BL 0x1C16F20
	0x02672144 STR W31, [X0 + 0x8]
	0x02672148 STR W31, [X0 + 0x18]
	0x0267214C RET
	0x02672150 STR X30, [X31 - 0x20]!
	0x02672154 STP X20, X19, [X31 + 0x10]
	0x02672158 MOV X19, X0
	0x0267215C LDR X0, [X0]
	0x02672160 MOV W20, W1
	0x02672164 CBNZ X0, 0x26721A8
	0x02672168 MOVZ W8, 0x4
	0x0267216C STR W8, [X19 + 0x10]
	0x02672170 LDR X0, [X2 + 0x20]
	0x02672174 LDRB W8, [X0 + 0x135]
	0x02672178 TBNZ X8, 0x0, 0x2672180
	0x0267217C BL 0x1C5C684
	0x02672180 LDR X8, [X0 + 0xC0]
	0x02672184 LDR X0, [X8 + 0x18]
	0x02672188 LDRB W8, [X0 + 0x135]
	0x0267218C TBNZ X8, 0x0, 0x2672194
	0x02672190 BL 0x1C5C684
	0x02672194 MOVZ W1, 0x4
	0x02672198 BL 0x1C16D6C
	0x0267219C STR X0, [X19]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+8]
	006 Move W9, [X0+16]
	007 Move X19, X0
	008 Move X20, X1
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W8, W8
	011 ShiftRight W8, 31
	012 And W8, W8, 0x3FFFFFFF
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W9, 4
	015 NotImplemented "Instruction CSEL not yet implemented."
	016 Move [X19+16], W21
	017 Move X0, [X2+32]
	018 Move W8, [X0+309]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {24}
	023 Call 0x1C5D684
	024 Move X8, [X0+192]
	025 Move X0, X19
	026 Move W1, W21
	027 Move X2, [X8+56]
	028 Call Array.Resize, X0, X1
	029 Move W8, [X19+8]
	030 Move X9, [X19]
	031 Compare X9, 0
	032 JumpIfEqual {57}
	033 Move W10, [X9+24]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Add X8, X9, W8
	036 Move [X8+32], W20
	037 Move W8, [X19+8]
	038 Move W9, [X19+20]
	039 Add W8, W8, 1
	040 Compare W9, 0
	041 JumpIfEqual {48}
	042 Move W10, [X19+24]
	043 NotImplemented "Instruction SDIV not yet implemented."
	044 NotImplemented "Instruction MSUB not yet implemented."
	045 Move [X19+8], W8
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction CSINC not yet implemented."
	048 Move W9, [X19+24]
	049 Move [X19+8], W8
	050 Add W8, W9, 1
	051 Move [X19+24], W8
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return 
	057 Call 0x1C17F20
	058 Call 0x1C17F28

Method: T Pop()

Disassembly:
	0x026721A0 STR W31, [X19 + 0xC]
	0x026721A4 CBZ X0, 0x26721CC
	0x026721A8 LDR W8, [X0 + 0x18]
	0x026721AC CBZ W8, 0x26721C8
	0x026721B0 MOVZ W8, 0x1
	0x026721B4 STR W20, [X0 + 0x20]
	0x026721B8 STR W8, [X19 + 0x8]
	0x026721BC LDP X20, X19, [X31 + 0x10]
	0x026721C0 LDR X30, [X31], #0x20
	0x026721C4 RET
	0x026721C8 BL 0x1C16F28
	0x026721CC BL 0x1C16F20
	0x026721D0 STR X30, [X31 - 0x10]!
	0x026721D4 LDR X8, [X0]
	0x026721D8 CBZ X8, 0x2672210
	0x026721DC LDRSW X9, [X0 + 0x8]
	0x026721E0 LDR W10, [X8 + 0x18]
	0x026721E4 CMP W9, W10
	0x026721E8 B.GE 0x2672208
	0x026721EC CMP W9, W10
	0x026721F0 B.CS 0x2672214
	0x026721F4 ADD X8, X8, X9, 0x2, LSL
	0x026721F8 STR W1, [X8 + 0x20]
	0x026721FC LDR W8, [X0 + 0x8]
	0x02672200 ADD W8, W8, 0x1
	0x02672204 STR W8, [X0 + 0x8]
	0x02672208 LDR X30, [X31], #0x10
	0x0267220C RET
	0x02672210 BL 0x1C16F20
	0x02672214 BL 0x1C16F28
	0x02672218 STR X30, [X31 - 0x10]!
	0x0267221C LDR W8, [X0 + 0x8]
	0x02672220 SUB W9, W8, 0x1
	0x02672224 CMP W9, 0x0
	0x02672228 STR W9, [X0 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+8]
	003 Move W9, [X0+20]
	004 Compare W8, 0
	005 JumpIfEqual {9}
	006 Subtract W8, W8, 1
	007 Compare W9, 0
	008 JumpIfNotEqual {14}
	009 Compare W9, 0
	010 JumpIfEqual {36}
	011 Move TEMP, 0
	012 Not TEMP
	013 Move W8, TEMP
	014 NotImplemented "Instruction SDIV not yet implemented."
	015 NotImplemented "Instruction MSUB not yet implemented."
	016 And W9, W9, W8
	017 Add W8, W9, W8
	018 Move X9, [X0]
	019 Move [X0+8], W8
	020 Compare X9, 0
	021 JumpIfEqual {37}
	022 Move W10, [X9+24]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W10, [X0+12]
	025 Add X9, X9, W8
	026 Move W8, [X9+32]
	027 Move [X9+32], W10
	028 Move W9, [X0+24]
	029 Subtract W10, W9, 1
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSEL not yet implemented."
	032 Move [X0+24], W9
	033 Move X0, X8
	034 Move X30, [X31+16]
	035 Return X0
	036 Move X8, X31
	037 Call 0x1C17F20
	038 Call 0x1C17F28

Method: T Peek()

Disassembly:
	0x0267222C B.LE 0x2672250
	0x02672230 LDR X9, [X0]
	0x02672234 CBZ X9, 0x2672274
	0x02672238 LDR W10, [X9 + 0x18]
	0x0267223C SUB W8, W8, 0x2
	0x02672240 CMP W8, W10
	0x02672244 B.CS 0x2672278
	0x02672248 ADD X8, X9, W8, 0x2, UXTW
	0x0267224C B 0x2672268
	0x02672250 LDR X8, [X0]
	0x02672254 MOVZ W9, 0x1
	0x02672258 STR W9, [X0 + 0x8]
	0x0267225C CBZ X8, 0x2672274
	0x02672260 LDR W9, [X8 + 0x18]
	0x02672264 CBZ W9, 0x2672278
	0x02672268 LDR W0, [X8 + 0x20]!
	0x0267226C LDR X30, [X31], #0x10
	0x02672270 RET

ISIL:
	001 Move [X31-16], X30
	002 Move W9, [X0+8]
	003 Compare W9, 0
	004 JumpIfEqual {13}
	005 Move X8, [X0]
	006 Compare X8, 0
	007 JumpIfEqual {17}
	008 Move W10, [X8+24]
	009 Subtract W9, W9, 1
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add X8, X8, W9
	012 Add X8, X8, 32
	013 Add X8, X0, 12
	014 Move W0, [X8]
	015 Move X30, [X31+16]
	016 Return X0
	017 Call 0x1C17F20
	018 Call 0x1C17F28

Method: T CurrentItem()

Disassembly:
	0x02672274 BL 0x1C16F20
	0x02672278 BL 0x1C16F28
	0x0267227C STP X30, X21, [X31 - 0x20]!
	0x02672280 STP X20, X19, [X31 + 0x10]
	0x02672284 LDR W8, [X0 + 0x8]
	0x02672288 LDR W9, [X0 + 0x10]
	0x0267228C MOV X19, X0
	0x02672290 MOV W20, W1
	0x02672294 CMP W8, W9
	0x02672298 B.NE 0x26722D8
	0x0267229C UBFM W8, W8, 0x1F, 0x1E
	0x026722A0 CMP W8, 0x0
	0x026722A4 MOVZ W9, 0x4
	0x026722A8 CSEL W21, W9, W8, EQ
	0x026722AC STR W21, [X19 + 0x10]
	0x026722B0 LDR X0, [X2 + 0x20]
	0x026722B4 LDRB W8, [X0 + 0x135]
	0x026722B8 TBNZ X8, 0x0, 0x26722C0
	0x026722BC BL 0x1C5C684

ISIL:
	001 Move [X31-16], X30
	002 Move W9, [X0+8]
	003 Move X8, [X0]
	004 Subtract W9, W9, 1
	005 Compare X8, 0
	006 JumpIfEqual {19}
	007 Move W10, [X8+24]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Add X8, X8, W9
	010 Compare X8, 0
	011 JumpIfEqual {19}
	012 Move W9, [X8+24]
	013 Compare W9, 0
	014 JumpIfEqual {20}
	015 Add X8, X8, 32
	016 Move W0, [X8]
	017 Move X30, [X31+16]
	018 Return X0
	019 Call 0x1C17F20
	020 Call 0x1C17F28

Method: T PreviousItem()

Disassembly:
	0x026722C0 LDR X8, [X0 + 0xC0]
	0x026722C4 MOV X0, X19
	0x026722C8 MOV W1, W21
	0x026722CC LDR X2, [X8 + 0x38]
	0x026722D0 BL 0x21163A0
	0x026722D4 LDR W8, [X19 + 0x8]
	0x026722D8 LDR X9, [X19]
	0x026722DC CBZ X9, 0x267233C
	0x026722E0 LDR W10, [X9 + 0x18]
	0x026722E4 CMP W8, W10
	0x026722E8 B.CS 0x2672340
	0x026722EC ADD X8, X9, W8, 0x2, SXTW
	0x026722F0 STR W20, [X8 + 0x20]
	0x026722F4 LDR W8, [X19 + 0x8]
	0x026722F8 LDR W9, [X19 + 0x14]
	0x026722FC ADD W8, W8, 0x1
	0x02672300 CBZ W9, 0x2672320
	0x02672304 LDR W10, [X19 + 0x18]
	0x02672308 SDIV W11, W8, W9

ISIL:
	001 Move [X31-16], X30
	002 Move W9, [X0+8]
	003 Move X8, [X0]
	004 Subtract W9, W9, 2
	005 Compare X8, 0
	006 JumpIfEqual {19}
	007 Move W9, [X8+24]
	008 Compare W9, 0
	009 JumpIfNotEqual {15}
	010 Compare X8, 0
	011 JumpIfEqual {19}
	012 Move W10, [X8+24]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Add X8, X8, W9
	015 Add X8, X8, 32
	016 Move W0, [X8]
	017 Move X30, [X31+16]
	018 Return X0
	019 Call 0x1C17F20
	020 Call 0x1C17F28

