Type: TMPro.TMP_Settings

Method: System.String get_version()

Disassembly:
	0x03B14C2C MOV X0, X19
	0x03B14C30 MOV X2, X31
	0x03B14C34 LDR X8, [X8 + 0xB8]
	0x03B14C38 LDR W1, [X8 + 0x78]
	0x03B14C3C BL 0x3C14D08
	0x03B14C40 TBZ X0, 0x0, 0x3B14D04
	0x03B14C44 LDR X0, [X21]
	0x03B14C48 LDR W8, [X0 + 0xE0]
	0x03B14C4C CBNZ W8, 0x3B14C58
	0x03B14C50 BL 0x1C16DFC
	0x03B14C54 LDR X0, [X21]
	0x03B14C58 LDR X8, [X0 + 0xB8]
	0x03B14C5C MOV X0, X19
	0x03B14C60 MOV X2, X31
	0x03B14C64 LDR W1, [X8 + 0x78]
	0x03B14C68 BL 0x3C15F98

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x8CF000
	005 Move X20, 0x646000
	006 Move W8, [X19+1695]
	007 Move X20, [X20+1976]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x646000
	013 Move X0, [X0+1976]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1695], W8
	017 Move X0, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0

Method: System.Boolean get_enableWordWrapping()

Disassembly:
	0x03B14C6C LDR X8, [X21]
	0x03B14C70 MOV X0, X19
	0x03B14C74 MOV X2, X31
	0x03B14C78 MOV V10.16B, V0.16B
	0x03B14C7C LDR X8, [X8 + 0xB8]
	0x03B14C80 LDR W1, [X8 + 0x80]
	0x03B14C84 BL 0x3C15F98

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move W0, [X0+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Boolean get_enableKerning()

Disassembly:
	0x03B14D54 BL 0x3C15F98
	0x03B14D58 LDR X8, [X21]
	0x03B14D5C MOV X0, X19
	0x03B14D60 MOV X2, X31
	0x03B14D64 MOV V9.16B, V0.16B
	0x03B14D68 LDR X8, [X8 + 0xB8]
	0x03B14D6C LDR W1, [X8 + 0x1C]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move W0, [X0+25]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Boolean get_enableExtraPadding()

Disassembly:
	0x03B14D70 BL 0x3C15F98
	0x03B14D74 LDR X8, [X21]
	0x03B14D78 MOV X0, X19
	0x03B14D7C MOV X2, X31
	0x03B14D80 MOV V11.16B, V0.16B
	0x03B14D84 LDR X8, [X8 + 0xB8]
	0x03B14D88 LDR W1, [X8 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move W0, [X0+26]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Boolean get_enableTintAllSprites()

Disassembly:
	0x03B14D8C BL 0x3C15F98
	0x03B14D90 LDR X8, [X21]
	0x03B14D94 MOV X0, X19
	0x03B14D98 MOV X2, X31
	0x03B14D9C MOV V10.16B, V0.16B
	0x03B14DA0 LDR X8, [X8 + 0xB8]
	0x03B14DA4 LDR W1, [X8 + 0x24]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move W0, [X0+27]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Boolean get_enableParseEscapeCharacters()

Disassembly:
	0x03B14DA8 BL 0x3C15F98
	0x03B14DAC LDR X0, [X21]
	0x03B14DB0 FABS S1, S9
	0x03B14DB4 FABS S2, S11
	0x03B14DB8 FCMP S1, S2
	0x03B14DBC FCSEL S1, S1, S2, GT
	0x03B14DC0 FMOV S9, 1

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move W0, [X0+28]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Boolean get_enableRaycastTarget()

Disassembly:
	0x03B14DC4 TBNZ X20, 0x0, 0x3B14E14
	0x03B14DC8 LDR X8, [X0 + 0xB8]
	0x03B14DCC FADD S1, S1, S10
	0x03B14DD0 FADD S1, S1, S0
	0x03B14DD4 FMAX S9, S1, S9
	0x03B14DD8 LDR V2, [X8 + 0x128]
	0x03B14DDC LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move W0, [X0+29]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Boolean get_getFontFeaturesAtRuntime()

Disassembly:
	0x03B14DE0 FSUB S0, S8, S2
	0x03B14DE4 FMUL S10, S12, S0
	0x03B14DE8 CBNZ W8, 0x3B14E00
	0x03B14DEC BL 0x1C16DFC
	0x03B14DF0 LDR X0, [X21]
	0x03B14DF4 LDR X8, [X0 + 0xB8]
	0x03B14DF8 LDR V0, [X8 + 0x128]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move W0, [X0+30]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Int32 get_missingGlyphCharacter()

Disassembly:
	0x03B14DFC FSUB S0, S8, S0
	0x03B14E00 FSUB S0, S0, S10
	0x03B14E04 FMOV S1, W31
	0x03B14E08 FMAX S0, S0, S1
	0x03B14E0C FMUL S1, S8, S9
	0x03B14E10 FDIV S9, S0, S1
	0x03B14E14 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move W0, [X0+32]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_missingGlyphCharacter(System.Int32 value)

Disassembly:
	0x03B14E18 CBNZ W8, 0x3B14E24
	0x03B14E1C BL 0x1C16DFC
	0x03B14E20 LDR X0, [X21]
	0x03B14E24 LDR X8, [X0 + 0xB8]
	0x03B14E28 MOV X0, X19
	0x03B14E2C MOV V0.16B, V9.16B
	0x03B14E30 LDP X20, X19, [X31 + 0x40]
	0x03B14E34 LDR W1, [X8 + 0xD4]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, W0
	004 Call TMP_Settings.get_instance
	005 Compare X0, 0
	006 JumpIfEqual {11}
	007 Move [X0+32], W19
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Call 0x1C17F20

Method: System.Boolean get_warningsDisabled()

Disassembly:
	0x03B14E38 LDP X22, X21, [X31 + 0x30]
	0x03B14E3C LDR X30, [X31 + 0x28]
	0x03B14E40 LDP D9, D8, [X31 + 0x18]
	0x03B14E44 LDP D11, D10, [X31 + 0x8]
	0x03B14E48 MOV X2, X31
	0x03B14E4C LDR V12, [X31], #0x50
	0x03B14E50 B 0x3C15CD8

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move W0, [X0+36]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: TMPro.TMP_FontAsset get_defaultFontAsset()

Disassembly:
	0x03B14E54 LDP X20, X19, [X31 + 0x40]
	0x03B14E58 LDP X22, X21, [X31 + 0x30]
	0x03B14E5C LDR X30, [X31 + 0x28]
	0x03B14E60 LDP D9, D8, [X31 + 0x18]
	0x03B14E64 LDP D11, D10, [X31 + 0x8]
	0x03B14E68 LDR V12, [X31], #0x50
	0x03B14E6C RET

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+40]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String get_defaultFontAssetPath()

Disassembly:
	0x03B14E70 BL 0x1C16F20
	0x03B14E74 STP X30, X19, [X31 - 0x10]!
	0x03B14E78 ADRP X19, 0x8C4000
	0x03B14E7C LDRB W8, [X19 + 0xE5A]
	0x03B14E80 CBNZ W8, 0x3B14E98
	0x03B14E84 ADRP X0, 0x5E6000
	0x03B14E88 LDR X0, [X0 + 0x9A0]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+48]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Single get_defaultFontSize()

Disassembly:
	0x03B14E8C BL 0x1C16CF4
	0x03B14E90 MOVZ W8, 0x1
	0x03B14E94 STRB W8, [X19 + 0xE5A]
	0x03B14E98 ADRP X8, 0x5E6000
	0x03B14E9C LDR X8, [X8 + 0x9A0]
	0x03B14EA0 LDR X8, [X8]
	0x03B14EA4 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move V0, [X0+56]
	006 Move X30, [X31+16]
	007 Return V0
	008 Call 0x1C17F20

Method: System.Single get_defaultTextAutoSizingMinRatio()

Disassembly:
	0x03B14EA8 LDP S0, S1, [X8]
	0x03B14EAC LDP S2, S3, [X8 + 0x8]
	0x03B14EB0 LDP X30, X19, [X31], #0x10
	0x03B14EB4 RET
	0x03B14EB8 STR X30, [X31 - 0x30]!
	0x03B14EBC STP X22, X21, [X31 + 0x10]
	0x03B14EC0 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move V0, [X0+60]
	006 Move X30, [X31+16]
	007 Return V0
	008 Call 0x1C17F20

Method: System.Single get_defaultTextAutoSizingMaxRatio()

Disassembly:
	0x03B14EC4 ADRP X20, 0x8CE000
	0x03B14EC8 ADRP X21, 0x5DF000
	0x03B14ECC LDRB W8, [X20 + 0x6AD]
	0x03B14ED0 LDR X21, [X21 + 0x598]
	0x03B14ED4 MOV X19, X0
	0x03B14ED8 TBNZ X8, 0x0, 0x3B14F08
	0x03B14EDC ADRP X0, 0x5E0000

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move V0, [X0+64]
	006 Move X30, [X31+16]
	007 Return V0
	008 Call 0x1C17F20

Method: UnityEngine.Vector2 get_defaultTextMeshProTextContainerSize()

Disassembly:
	0x03B14EE0 LDR X0, [X0 + 0xC50]
	0x03B14EE4 BL 0x1C16CF4
	0x03B14EE8 ADRP X0, 0x5DF000
	0x03B14EEC LDR X0, [X0 + 0x598]
	0x03B14EF0 BL 0x1C16CF4
	0x03B14EF4 ADRP X0, 0x644000
	0x03B14EF8 LDR X0, [X0 + 0x338]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move S0, [X0+68]
	006 Move S1, [X0+72]
	007 Move X30, [X31+16]
	008 Return X0
	009 Call 0x1C17F20

Method: UnityEngine.Vector2 get_defaultTextMeshProUITextContainerSize()

Disassembly:
	0x03B14EFC BL 0x1C16CF4
	0x03B14F00 MOVZ W8, 0x1
	0x03B14F04 STRB W8, [X20 + 0x6AD]
	0x03B14F08 LDR X0, [X21]
	0x03B14F0C LDR W8, [X0 + 0xE0]
	0x03B14F10 CBNZ W8, 0x3B14F18
	0x03B14F14 BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move S0, [X0+76]
	006 Move S1, [X0+80]
	007 Move X30, [X31+16]
	008 Return X0
	009 Call 0x1C17F20

Method: System.Boolean get_autoSizeTextContainer()

Disassembly:
	0x03B14F18 MOV X0, X19
	0x03B14F1C MOV X1, X31
	0x03B14F20 MOV X2, X31
	0x03B14F24 BL 0x3C3883C
	0x03B14F28 TBNZ X0, 0x0, 0x3B14FF4
	0x03B14F2C ADRP X21, 0x644000
	0x03B14F30 LDR X21, [X21 + 0x338]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move W0, [X0+84]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Boolean get_isTextObjectScaleStatic()

Disassembly:
	0x03B14F34 LDR X0, [X21]
	0x03B14F38 LDR W8, [X0 + 0xE0]
	0x03B14F3C CBNZ W8, 0x3B14F44
	0x03B14F40 BL 0x1C16DFC
	0x03B14F44 CBZ X19, 0x3B15050
	0x03B14F48 LDR X8, [X21]
	0x03B14F4C MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move W0, [X0+85]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_isTextObjectScaleStatic(System.Boolean value)

Disassembly:
	0x03B14F50 MOV X2, X31
	0x03B14F54 LDR X8, [X8 + 0xB8]
	0x03B14F58 LDR W1, [X8 + 0x9C]
	0x03B14F5C BL 0x3C14D08
	0x03B14F60 TBZ X0, 0x0, 0x3B14FF4
	0x03B14F64 MOV X0, X19
	0x03B14F68 MOV X1, X31
	0x03B14F6C BL 0x3C15294
	0x03B14F70 LDR X8, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, W0
	004 Call TMP_Settings.get_instance
	005 Compare X0, 0
	006 JumpIfEqual {12}
	007 And W8, W19, 1
	008 Move [X0+85], W8
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 
	012 Call 0x1C17F20

Method: System.Collections.Generic.List`1<TMPro.TMP_FontAsset> get_fallbackFontAssets()

Disassembly:
	0x03B14F74 MOV X20, X0
	0x03B14F78 LDR W9, [X8 + 0xE0]
	0x03B14F7C CBNZ W9, 0x3B14F8C
	0x03B14F80 MOV X0, X8
	0x03B14F84 BL 0x1C16DFC
	0x03B14F88 LDR X8, [X21]
	0x03B14F8C ADRP X22, 0x5E0000

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+88]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Boolean get_matchMaterialPreset()

Disassembly:
	0x03B14F90 LDR X8, [X8 + 0xB8]
	0x03B14F94 LDR X22, [X22 + 0xC50]
	0x03B14F98 MOV X0, X20
	0x03B14F9C LDR X1, [X8 + 0xF8]
	0x03B14FA0 LDR X2, [X22]
	0x03B14FA4 BL 0x21BA5B0
	0x03B14FA8 TBNZ X0, 0x0, 0x3B14FEC

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move W0, [X0+96]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: TMPro.TMP_SpriteAsset get_defaultSpriteAsset()

Disassembly:
	0x03B14FAC MOV X0, X19
	0x03B14FB0 MOV X1, X31
	0x03B14FB4 BL 0x3C15294
	0x03B14FB8 LDR X8, [X21]
	0x03B14FBC MOV X20, X0
	0x03B14FC0 LDR W9, [X8 + 0xE0]
	0x03B14FC4 CBNZ W9, 0x3B14FD4

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+104]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String get_defaultSpriteAssetPath()

Disassembly:
	0x03B14FC8 MOV X0, X8
	0x03B14FCC BL 0x1C16DFC
	0x03B14FD0 LDR X8, [X21]
	0x03B14FD4 LDR X8, [X8 + 0xB8]
	0x03B14FD8 LDR X2, [X22]
	0x03B14FDC MOV X0, X20
	0x03B14FE0 LDR X1, [X8 + 0x100]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+112]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Boolean get_enableEmojiSupport()

Disassembly:
	0x03B14FE4 BL 0x21BA5B0
	0x03B14FE8 TBZ X0, 0x0, 0x3B15008
	0x03B14FEC MOVZ W0, 0x1
	0x03B14FF0 B 0x3B14FF8
	0x03B14FF4 MOV W0, W31
	0x03B14FF8 LDP X20, X19, [X31 + 0x20]
	0x03B14FFC LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move W0, [X0+120]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_enableEmojiSupport(System.Boolean value)

Disassembly:
	0x03B15000 LDR X30, [X31], #0x30
	0x03B15004 RET
	0x03B15008 MOV X0, X19
	0x03B1500C MOV X1, X31
	0x03B15010 BL 0x3C15294
	0x03B15014 LDR X8, [X21]
	0x03B15018 MOV X19, X0
	0x03B1501C LDR W9, [X8 + 0xE0]
	0x03B15020 CBNZ W9, 0x3B15030

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, W0
	004 Call TMP_Settings.get_instance
	005 Compare X0, 0
	006 JumpIfEqual {12}
	007 And W8, W19, 1
	008 Move [X0+120], W8
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 
	012 Call 0x1C17F20

Method: System.UInt32 get_missingCharacterSpriteUnicode()

Disassembly:
	0x03B15024 MOV X0, X8
	0x03B15028 BL 0x1C16DFC
	0x03B1502C LDR X8, [X21]
	0x03B15030 LDR X8, [X8 + 0xB8]
	0x03B15034 LDR X2, [X22]
	0x03B15038 MOV X0, X19
	0x03B1503C LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move W0, [X0+124]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_missingCharacterSpriteUnicode(System.UInt32 value)

Disassembly:
	0x03B15040 LDR X1, [X8 + 0x108]
	0x03B15044 LDP X22, X21, [X31 + 0x10]
	0x03B15048 LDR X30, [X31], #0x30
	0x03B1504C B 0x21BA5B0
	0x03B15050 BL 0x1C16F20
	0x03B15054 STP D15, D14, [X31 - 0x70]!
	0x03B15058 STP D13, D12, [X31 + 0x10]
	0x03B1505C STP D11, D10, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, W0
	004 Call TMP_Settings.get_instance
	005 Compare X0, 0
	006 JumpIfEqual {11}
	007 Move [X0+124], W19
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Call 0x1C17F20

Method: System.String get_defaultColorGradientPresetsPath()

Disassembly:
	0x03B15060 STP D9, D8, [X31 + 0x30]
	0x03B15064 STR X30, [X31 + 0x40]
	0x03B15068 STP X22, X21, [X31 + 0x50]
	0x03B1506C STP X20, X19, [X31 + 0x60]
	0x03B15070 ADRP X22, 0x8CD000
	0x03B15074 ADRP X21, 0x643000
	0x03B15078 LDRB W8, [X22 + 0x6AE]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+128]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: TMPro.TMP_StyleSheet get_defaultStyleSheet()

Disassembly:
	0x03B1507C LDR X21, [X21 + 0x338]
	0x03B15080 MOV W20, W1
	0x03B15084 MOV X19, X0
	0x03B15088 TBNZ X8, 0x0, 0x3B150B8
	0x03B1508C ADRP X0, 0x5DF000
	0x03B15090 LDR X0, [X0 + 0xC50]
	0x03B15094 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+136]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String get_styleSheetsResourcePath()

Disassembly:
	0x03B15098 ADRP X0, 0x5DE000
	0x03B1509C LDR X0, [X0 + 0x598]
	0x03B150A0 BL 0x1C16CF4
	0x03B150A4 ADRP X0, 0x643000
	0x03B150A8 LDR X0, [X0 + 0x338]
	0x03B150AC BL 0x1C16CF4
	0x03B150B0 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+144]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: UnityEngine.TextAsset get_leadingCharacters()

Disassembly:
	0x03B150B4 STRB W8, [X22 + 0x6AE]
	0x03B150B8 LDR X0, [X21]
	0x03B150BC LDR W8, [X0 + 0xE0]
	0x03B150C0 CBNZ W8, 0x3B150CC
	0x03B150C4 BL 0x1C16DFC
	0x03B150C8 LDR X0, [X21]
	0x03B150CC LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+152]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: UnityEngine.TextAsset get_followingCharacters()

Disassembly:
	0x03B150D0 ADRP X22, 0x5DE000
	0x03B150D4 LDRB W8, [X8 + 0x12C]
	0x03B150D8 LDR X22, [X22 + 0x598]
	0x03B150DC CBNZ W8, 0x3B150F0
	0x03B150E0 LDR W8, [X0 + 0xE0]
	0x03B150E4 CBNZ W8, 0x3B150EC
	0x03B150E8 BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move X0, [X0+160]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: TMPro.TMP_Settings/LineBreakingTable get_linebreakingRules()

Disassembly:
	0x03B150EC BL 0x3B0DFAC
	0x03B150F0 LDR X0, [X22]
	0x03B150F4 LDR W8, [X0 + 0xE0]
	0x03B150F8 CBNZ W8, 0x3B15100
	0x03B150FC BL 0x1C16DFC
	0x03B15100 MOV X0, X19
	0x03B15104 MOV X1, X31
	0x03B15108 MOV X2, X31
	0x03B1510C BL 0x3C3883C
	0x03B15110 FMOV S0, W31
	0x03B15114 TBNZ X0, 0x0, 0x3B156D8
	0x03B15118 LDR X0, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {15}
	005 Move X8, [X0+168]
	006 Compare X8, 0
	007 JumpIfNotEqual {9}
	008 Call TMP_Settings.LoadLinebreakingRules
	009 Call TMP_Settings.get_instance
	010 Compare X0, 0
	011 JumpIfEqual {15}
	012 Move X0, [X0+168]
	013 Move X30, [X31+16]
	014 Return X0
	015 Call 0x1C17F20

Method: System.Boolean get_useModernHangulLineBreakingRules()

Disassembly:
	0x03B15228 FMOV S13, W31
	0x03B1522C TBZ X0, 0x0, 0x3B1525C
	0x03B15230 LDR X0, [X21]
	0x03B15234 LDR W8, [X0 + 0xE0]
	0x03B15238 CBNZ W8, 0x3B15244
	0x03B1523C BL 0x1C16DFC
	0x03B15240 LDR X0, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Call TMP_Settings.get_instance
	003 Compare X0, 0
	004 JumpIfEqual {8}
	005 Move W0, [X0+176]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_useModernHangulLineBreakingRules(System.Boolean value)

Disassembly:
	0x03B15244 LDR X8, [X0 + 0xB8]
	0x03B15248 MOV X0, X19
	0x03B1524C MOV X2, X31
	0x03B15250 LDR W1, [X8 + 0xC]
	0x03B15254 BL 0x3C15F98
	0x03B15258 FMUL S13, S8, S0
	0x03B1525C LDR X0, [X21]
	0x03B15260 LDR W8, [X0 + 0xE0]
	0x03B15264 CBNZ W8, 0x3B15270

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, W0
	004 Call TMP_Settings.get_instance
	005 Compare X0, 0
	006 JumpIfEqual {12}
	007 And W8, W19, 1
	008 Move [X0+176], W8
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 
	012 Call 0x1C17F20

Method: TMPro.TMP_Settings get_instance()

Disassembly:
	0x03B14C88 LDR X0, [X21]
	0x03B14C8C FMOV S9, 1
	0x03B14C90 TBNZ X20, 0x0, 0x3B14CDC
	0x03B14C94 LDR X8, [X0 + 0xB8]
	0x03B14C98 FADD S2, S10, S0
	0x03B14C9C FMAX S9, S2, S9
	0x03B14CA0 LDR V1, [X8 + 0x128]
	0x03B14CA4 LDR W8, [X0 + 0xE0]
	0x03B14CA8 FSUB S0, S8, S1
	0x03B14CAC FMUL S10, S12, S0
	0x03B14CB0 CBNZ W8, 0x3B14CC8
	0x03B14CB4 BL 0x1C16DFC
	0x03B14CB8 LDR X0, [X21]
	0x03B14CBC LDR X8, [X0 + 0xB8]
	0x03B14CC0 LDR V0, [X8 + 0x128]
	0x03B14CC4 FSUB S0, S8, S0
	0x03B14CC8 FSUB S0, S0, S10
	0x03B14CCC FMOV S1, W31
	0x03B14CD0 FMAX S0, S0, S1
	0x03B14CD4 FMUL S1, S8, S9
	0x03B14CD8 FDIV S9, S0, S1
	0x03B14CDC LDR W8, [X0 + 0xE0]
	0x03B14CE0 CBNZ W8, 0x3B14CEC
	0x03B14CE4 BL 0x1C16DFC
	0x03B14CE8 LDR X0, [X21]
	0x03B14CEC LDR X8, [X0 + 0xB8]
	0x03B14CF0 MOV X0, X19
	0x03B14CF4 MOV V0.16B, V9.16B
	0x03B14CF8 MOV X2, X31
	0x03B14CFC LDR W1, [X8 + 0xD0]
	0x03B14D00 BL 0x3C15CD8
	0x03B14D04 LDR X0, [X21]
	0x03B14D08 LDR W8, [X0 + 0xE0]
	0x03B14D0C CBNZ W8, 0x3B14D18
	0x03B14D10 BL 0x1C16DFC
	0x03B14D14 LDR X0, [X21]
	0x03B14D18 LDR X8, [X0 + 0xB8]
	0x03B14D1C MOV X0, X19
	0x03B14D20 MOV X2, X31
	0x03B14D24 LDR W1, [X8 + 0x18]
	0x03B14D28 BL 0x3C14D08
	0x03B14D2C TBZ X0, 0x0, 0x3B14E54
	0x03B14D30 LDR X0, [X21]
	0x03B14D34 LDR W8, [X0 + 0xE0]
	0x03B14D38 CBNZ W8, 0x3B14D44
	0x03B14D3C BL 0x1C16DFC
	0x03B14D40 LDR X0, [X21]
	0x03B14D44 LDR X8, [X0 + 0xB8]
	0x03B14D48 MOV X0, X19
	0x03B14D4C MOV X2, X31
	0x03B14D50 LDR W1, [X8 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8CF000
	006 Move X20, 0x646000
	007 Move X19, 0x5E0000
	008 Move W8, [X21+1696]
	009 Move X20, [X20+1984]
	010 Move X19, [X19+1432]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x5E0000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move X0, 0x646000
	019 Move X0, [X0+1936]
	020 Call 0x1C17CF4
	021 Move X0, 0x646000
	022 Move X0, [X0+1984]
	023 Call 0x1C17CF4
	024 Move X0, 0x646000
	025 Move X0, [X0+1992]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1696], W8
	029 Move X8, [X20]
	030 Move X0, [X19]
	031 Move X8, [X8+184]
	032 Move W9, [X0+224]
	033 Move X19, [X8]
	034 Compare W9, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X19
	038 Move X1, X31
	039 Move X2, X31
	040 Call Object.op_Equality, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {55}
	045 Move X8, 0x646000
	046 Move X9, 0x646000
	047 Move X8, [X8+1992]
	048 Move X9, [X9+1936]
	049 Move X0, [X8]
	050 Move X1, [X9]
	051 Call 0x2242FB8, X0
	052 Move X8, [X20]
	053 Move X8, [X8+184]
	054 Move [X8], X0
	055 Move X8, [X20]
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X8, [X8+184]
	059 Move X0, [X8]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Return X0

Method: TMPro.TMP_Settings LoadDefaultSettings()

Disassembly:
	0x03B15268 BL 0x1C16DFC
	0x03B1526C LDR X0, [X21]
	0x03B15270 LDR X8, [X0 + 0xB8]
	0x03B15274 MOV X0, X19
	0x03B15278 MOV X2, X31
	0x03B1527C LDR W1, [X8 + 0x40]
	0x03B15280 BL 0x3C14D08
	0x03B15284 FMOV S14, W31
	0x03B15288 TBZ X0, 0x0, 0x3B152B8
	0x03B1528C LDR X0, [X21]
	0x03B15290 LDR W8, [X0 + 0xE0]
	0x03B15294 CBNZ W8, 0x3B152A0
	0x03B15298 BL 0x1C16DFC
	0x03B1529C LDR X0, [X21]
	0x03B152A0 LDR X8, [X0 + 0xB8]
	0x03B152A4 MOV X0, X19
	0x03B152A8 MOV X2, X31
	0x03B152AC LDR W1, [X8 + 0x40]
	0x03B152B0 BL 0x3C15F98
	0x03B152B4 FMUL S14, S8, S0
	0x03B152B8 LDR X0, [X21]
	0x03B152BC LDR W8, [X0 + 0xE0]
	0x03B152C0 CBNZ W8, 0x3B152CC
	0x03B152C4 BL 0x1C16DFC
	0x03B152C8 LDR X0, [X21]
	0x03B152CC LDR X8, [X0 + 0xB8]
	0x03B152D0 MOV X0, X19
	0x03B152D4 MOV X2, X31
	0x03B152D8 LDR W1, [X8 + 0x3C]
	0x03B152DC BL 0x3C14D08
	0x03B152E0 FMOV S0, W31
	0x03B152E4 TBZ X0, 0x0, 0x3B15314
	0x03B152E8 LDR X0, [X21]
	0x03B152EC LDR W8, [X0 + 0xE0]
	0x03B152F0 CBNZ W8, 0x3B152FC
	0x03B152F4 BL 0x1C16DFC
	0x03B152F8 LDR X0, [X21]
	0x03B152FC LDR X8, [X0 + 0xB8]
	0x03B15300 MOV X0, X19
	0x03B15304 MOV X2, X31
	0x03B15308 LDR W1, [X8 + 0x3C]
	0x03B1530C BL 0x3C15F98
	0x03B15310 FMUL S0, S8, S0
	0x03B15314 LDR X0, [X21]
	0x03B15318 FADD S8, S14, S0
	0x03B1531C LDR W8, [X0 + 0xE0]
	0x03B15320 CBNZ W8, 0x3B1532C
	0x03B15324 BL 0x1C16DFC
	0x03B15328 LDR X0, [X21]
	0x03B1532C LDR X8, [X0 + 0xB8]
	0x03B15330 MOV X0, X19
	0x03B15334 MOV X2, X31
	0x03B15338 FADD S14, S13, S8
	0x03B1533C LDR W1, [X8 + 0x78]
	0x03B15340 BL 0x3C14D08
	0x03B15344 FMOV S8, W31
	0x03B15348 TBZ X0, 0x0, 0x3B154A8
	0x03B1534C LDR X0, [X21]
	0x03B15350 LDR W8, [X0 + 0xE0]
	0x03B15354 CBNZ W8, 0x3B15360
	0x03B15358 BL 0x1C16DFC
	0x03B1535C LDR X0, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x8CE000
	006 Move X20, 0x645000
	007 Move X21, 0x5DF000
	008 Move W8, [X19+1697]
	009 Move X20, [X20+1984]
	010 Move X21, [X21+1432]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x5DF000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move X0, 0x645000
	019 Move X0, [X0+1936]
	020 Call 0x1C17CF4
	021 Move X0, 0x645000
	022 Move X0, [X0+1984]
	023 Call 0x1C17CF4
	024 Move X0, 0x645000
	025 Move X0, [X0+1992]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X19+1697], W8
	029 Move X8, [X20]
	030 Move X0, [X21]
	031 Move X8, [X8+184]
	032 Move W9, [X0+224]
	033 Move X19, [X8]
	034 Compare W9, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X19
	038 Move X1, X31
	039 Move X2, X31
	040 Call Object.op_Equality, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {70}
	045 Move X8, 0x645000
	046 Move X9, 0x645000
	047 Move X8, [X8+1992]
	048 Move X9, [X9+1936]
	049 Move X0, [X8]
	050 Move X1, [X9]
	051 Call 0x2242FB8, X0
	052 Move X8, [X21]
	053 Move X19, X0
	054 Move W9, [X8+224]
	055 Compare W9, 0
	056 JumpIfNotEqual {59}
	057 Move X0, X8
	058 Call 0x1C17DFC
	059 Move X0, X19
	060 Move X1, X31
	061 Move X2, X31
	062 Call Object.op_Inequality, X0, X1
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {70}
	067 Move X8, [X20]
	068 Move X8, [X8+184]
	069 Move [X8], X19
	070 Move X8, [X20]
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 Move X8, [X8+184]
	074 Move X0, [X8]
	075 Move X30, [X31+32]
	076 Move X21, [X31+40]
	077 Return X0

Method: TMPro.TMP_Settings GetSettings()

Disassembly:
	0x03B15360 ADRP X9, 0x5DF000
	0x03B15364 LDR X8, [X0 + 0xB8]
	0x03B15368 LDR X9, [X9 + 0xC50]
	0x03B1536C MOV X0, X20
	0x03B15370 LDR X1, [X8 + 0xE0]
	0x03B15374 LDR X2, [X9]
	0x03B15378 BL 0x21BA5B0
	0x03B1537C FMOV S15, W31
	0x03B15380 TBZ X0, 0x0, 0x3B154AC
	0x03B15384 LDR X0, [X21]
	0x03B15388 LDR W8, [X0 + 0xE0]
	0x03B1538C CBNZ W8, 0x3B15398
	0x03B15390 BL 0x1C16DFC
	0x03B15394 LDR X0, [X21]
	0x03B15398 LDR X8, [X0 + 0xB8]
	0x03B1539C MOV X0, X19
	0x03B153A0 MOV X2, X31
	0x03B153A4 LDR W1, [X8 + 0xD0]
	0x03B153A8 BL 0x3C14D08
	0x03B153AC FMOV S8, W31
	0x03B153B0 TBZ X0, 0x0, 0x3B153E0
	0x03B153B4 LDR X0, [X21]
	0x03B153B8 LDR W8, [X0 + 0xE0]
	0x03B153BC CBNZ W8, 0x3B153C8
	0x03B153C0 BL 0x1C16DFC
	0x03B153C4 LDR X0, [X21]
	0x03B153C8 LDR X8, [X0 + 0xB8]
	0x03B153CC MOV X0, X19
	0x03B153D0 MOV X2, X31
	0x03B153D4 LDR W1, [X8 + 0xD0]
	0x03B153D8 BL 0x3C15F98

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8CE000
	005 Move X19, 0x5DF000
	006 Move W8, [X20+1698]
	007 Move X19, [X19+1432]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5DF000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1698], W8
	017 Call TMP_Settings.get_instance
	018 Move X8, [X19]
	019 Move X19, X0
	020 Move W9, [X8+224]
	021 Compare W9, 0
	022 JumpIfNotEqual {25}
	023 Move X0, X8
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {38}
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X0, X31
	036 Move X30, [X31+32]
	037 Return X0
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Call TMP_Settings.get_instance
	042 Return X0

Method: TMPro.TMP_FontAsset GetFontAsset()

Disassembly:
	0x03B153DC MOV V8.16B, V0.16B
	0x03B153E0 LDR X0, [X21]
	0x03B153E4 LDR W8, [X0 + 0xE0]
	0x03B153E8 CBNZ W8, 0x3B153F4
	0x03B153EC BL 0x1C16DFC
	0x03B153F0 LDR X0, [X21]
	0x03B153F4 LDR X8, [X0 + 0xB8]
	0x03B153F8 MOV X0, X19
	0x03B153FC MOV X2, X31
	0x03B15400 LDR W1, [X8 + 0x78]
	0x03B15404 BL 0x3C15F98
	0x03B15408 LDR X8, [X21]
	0x03B1540C MOV X0, X19
	0x03B15410 MOV X2, X31
	0x03B15414 FMUL S15, S8, S0
	0x03B15418 LDR X8, [X8 + 0xB8]
	0x03B1541C LDR W1, [X8 + 0x80]
	0x03B15420 BL 0x3C15F98
	0x03B15424 FMUL S8, S8, S0
	0x03B15428 B 0x3B154AC
	0x03B1542C LDR X0, [X21]
	0x03B15430 LDR W8, [X0 + 0xE0]
	0x03B15434 CBNZ W8, 0x3B15440
	0x03B15438 BL 0x1C16DFC
	0x03B1543C LDR X0, [X21]
	0x03B15440 LDR X8, [X0 + 0xB8]
	0x03B15444 MOV X0, X19
	0x03B15448 MOV X2, X31
	0x03B1544C LDR W1, [X8 + 0x50]
	0x03B15450 BL 0x3C14D08
	0x03B15454 TBZ X0, 0x0, 0x3B1549C
	0x03B15458 LDR X0, [X21]
	0x03B1545C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8CE000
	005 Move X19, 0x5DF000
	006 Move W8, [X20+1699]
	007 Move X19, [X19+1432]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5DF000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1699], W8
	017 Call TMP_Settings.get_instance
	018 Move X8, [X19]
	019 Move X19, X0
	020 Move W9, [X8+224]
	021 Compare W9, 0
	022 JumpIfNotEqual {25}
	023 Move X0, X8
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move W8, W0
	030 Move X0, X31
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {39}
	035 Call TMP_Settings.get_instance
	036 Compare X0, 0
	037 JumpIfEqual {43}
	038 Move X0, [X0+40]
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return X0
	043 Call 0x1C17F20

Method: TMPro.TMP_SpriteAsset GetSpriteAsset()

Disassembly:
	0x03B15460 CBNZ W8, 0x3B1546C
	0x03B15464 BL 0x1C16DFC
	0x03B15468 LDR X0, [X21]
	0x03B1546C LDR X8, [X0 + 0xB8]
	0x03B15470 MOV X0, X19
	0x03B15474 MOV X2, X31
	0x03B15478 LDR W1, [X8 + 0x50]
	0x03B1547C BL 0x3C15F98
	0x03B15480 MOVZ W8, 0x7F800000
	0x03B15484 FMOV S1, W8
	0x03B15488 FCVTZS W9, S0
	0x03B1548C FCMP S0, S1
	0x03B15490 MOVZ W8, 0x80000000
	0x03B15494 CSEL W8, W8, W9, EQ
	0x03B15498 ADD W22, W8, W22
	0x03B1549C SCVTF S0, W22
	0x03B154A0 FMOV S1, 1
	0x03B154A4 B 0x3B156D4
	0x03B154A8 FMOV S15, W31
	0x03B154AC LDR X0, [X21]
	0x03B154B0 FADD S0, S13, S15
	0x03B154B4 FADD S0, S8, S0
	0x03B154B8 FCMP S14, S0
	0x03B154BC LDR W8, [X0 + 0xE0]
	0x03B154C0 FCSEL S14, S14, S0, GT
	0x03B154C4 CBNZ W8, 0x3B154D0
	0x03B154C8 BL 0x1C16DFC
	0x03B154CC LDR X0, [X21]
	0x03B154D0 LDR X8, [X0 + 0xB8]
	0x03B154D4 MOV X0, X19
	0x03B154D8 MOV X2, X31
	0x03B154DC LDR W1, [X8 + 0x24]
	0x03B154E0 BL 0x3C14D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8CE000
	005 Move X19, 0x5DF000
	006 Move W8, [X20+1700]
	007 Move X19, [X19+1432]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5DF000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1700], W8
	017 Call TMP_Settings.get_instance
	018 Move X8, [X19]
	019 Move X19, X0
	020 Move W9, [X8+224]
	021 Compare W9, 0
	022 JumpIfNotEqual {25}
	023 Move X0, X8
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move W8, W0
	030 Move X0, X31
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {39}
	035 Call TMP_Settings.get_instance
	036 Compare X0, 0
	037 JumpIfEqual {43}
	038 Move X0, [X0+104]
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return X0
	043 Call 0x1C17F20

Method: TMPro.TMP_StyleSheet GetStyleSheet()

Disassembly:
	0x03B154E4 TBZ X0, 0x0, 0x3B15638
	0x03B154E8 LDR X0, [X21]
	0x03B154EC LDR W8, [X0 + 0xE0]
	0x03B154F0 CBNZ W8, 0x3B154FC
	0x03B154F4 BL 0x1C16DFC
	0x03B154F8 LDR X0, [X21]
	0x03B154FC ADRP X9, 0x5DF000
	0x03B15500 LDR X8, [X0 + 0xB8]
	0x03B15504 LDR X9, [X9 + 0xC50]
	0x03B15508 MOV X0, X20
	0x03B1550C LDR X1, [X8 + 0xE8]
	0x03B15510 LDR X2, [X9]
	0x03B15514 BL 0x21BA5B0
	0x03B15518 TBZ X0, 0x0, 0x3B15638
	0x03B1551C LDR X0, [X21]
	0x03B15520 LDR W8, [X0 + 0xE0]
	0x03B15524 CBNZ W8, 0x3B15530
	0x03B15528 BL 0x1C16DFC
	0x03B1552C LDR X0, [X21]
	0x03B15530 LDR X8, [X0 + 0xB8]
	0x03B15534 MOV X0, X19
	0x03B15538 MOV X2, X31
	0x03B1553C LDR W1, [X8 + 0xD4]
	0x03B15540 BL 0x3C14D08
	0x03B15544 FMOV S8, W31
	0x03B15548 TBZ X0, 0x0, 0x3B15578
	0x03B1554C LDR X0, [X21]
	0x03B15550 LDR W8, [X0 + 0xE0]
	0x03B15554 CBNZ W8, 0x3B15560
	0x03B15558 BL 0x1C16DFC
	0x03B1555C LDR X0, [X21]
	0x03B15560 LDR X8, [X0 + 0xB8]
	0x03B15564 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8CE000
	005 Move X19, 0x5DF000
	006 Move W8, [X20+1701]
	007 Move X19, [X19+1432]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5DF000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1701], W8
	017 Call TMP_Settings.get_instance
	018 Move X8, [X19]
	019 Move X19, X0
	020 Move W9, [X8+224]
	021 Compare W9, 0
	022 JumpIfNotEqual {25}
	023 Move X0, X8
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move W8, W0
	030 Move X0, X31
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {39}
	035 Call TMP_Settings.get_instance
	036 Compare X0, 0
	037 JumpIfEqual {43}
	038 Move X0, [X0+136]
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return X0
	043 Call 0x1C17F20

Method: System.Void LoadLinebreakingRules()

Disassembly:
	0x03B1511C ANDS W31, W20, 0x1
	0x03B15120 MOVZ W9, 0x4
	0x03B15124 CSEL W22, W9, W31, NE
	0x03B15128 LDR W8, [X0 + 0xE0]
	0x03B1512C CBNZ W8, 0x3B15134
	0x03B15130 BL 0x1C16DFC
	0x03B15134 CBZ X19, 0x3B156F8
	0x03B15138 LDR X8, [X21]
	0x03B1513C MOV X0, X19
	0x03B15140 MOV X2, X31
	0x03B15144 LDR X8, [X8 + 0xB8]
	0x03B15148 LDR W1, [X8 + 0x54]
	0x03B1514C BL 0x3C14D08
	0x03B15150 TBZ X0, 0x0, 0x3B1542C
	0x03B15154 ADRP X20, 0x8C3000
	0x03B15158 LDRB W8, [X20 + 0xE5A]
	0x03B1515C CBNZ W8, 0x3B15174
	0x03B15160 ADRP X0, 0x5E5000
	0x03B15164 LDR X0, [X0 + 0x9A0]
	0x03B15168 BL 0x1C16CF4
	0x03B1516C MOVZ W8, 0x1
	0x03B15170 STRB W8, [X20 + 0xE5A]
	0x03B15174 ADRP X8, 0x5E5000
	0x03B15178 LDR X8, [X8 + 0x9A0]
	0x03B1517C LDR X0, [X21]
	0x03B15180 LDR X8, [X8]
	0x03B15184 LDR W9, [X0 + 0xE0]
	0x03B15188 LDR X8, [X8 + 0xB8]
	0x03B1518C LDP S12, S11, [X8]
	0x03B15190 LDP S10, S9, [X8 + 0x8]
	0x03B15194 CBNZ W9, 0x3B1519C
	0x03B15198 BL 0x1C16DFC
	0x03B1519C MOV X0, X19
	0x03B151A0 BL 0x3B14A18
	0x03B151A4 MOV X0, X19
	0x03B151A8 MOV X1, X31
	0x03B151AC BL 0x3C15294
	0x03B151B0 LDR X8, [X21]
	0x03B151B4 MOV X20, X0
	0x03B151B8 MOV X0, X19
	0x03B151BC MOV X2, X31
	0x03B151C0 LDR X8, [X8 + 0xB8]
	0x03B151C4 LDR W1, [X8 + 0xCC]
	0x03B151C8 BL 0x3C14D08
	0x03B151CC FMOV S8, W31
	0x03B151D0 TBZ X0, 0x0, 0x3B15200
	0x03B151D4 LDR X0, [X21]
	0x03B151D8 LDR W8, [X0 + 0xE0]
	0x03B151DC CBNZ W8, 0x3B151E8
	0x03B151E0 BL 0x1C16DFC
	0x03B151E4 LDR X0, [X21]
	0x03B151E8 LDR X8, [X0 + 0xB8]
	0x03B151EC MOV X0, X19
	0x03B151F0 MOV X2, X31
	0x03B151F4 LDR W1, [X8 + 0xCC]
	0x03B151F8 BL 0x3C15F98
	0x03B151FC MOV V8.16B, V0.16B
	0x03B15200 LDR X0, [X21]
	0x03B15204 LDR W8, [X0 + 0xE0]
	0x03B15208 CBNZ W8, 0x3B15214
	0x03B1520C BL 0x1C16DFC
	0x03B15210 LDR X0, [X21]
	0x03B15214 LDR X8, [X0 + 0xB8]
	0x03B15218 MOV X0, X19
	0x03B1521C MOV X2, X31
	0x03B15220 LDR W1, [X8 + 0xC]
	0x03B15224 BL 0x3C14D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8CE000
	006 Move X19, 0x5DF000
	007 Move W8, [X20+1702]
	008 Move X19, [X19+1432]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x645000
	014 Move X0, [X0+2000]
	015 Call 0x1C17CF4
	016 Move X0, 0x5DF000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move X0, 0x645000
	020 Move X0, [X0+1984]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+1702], W8
	024 Call TMP_Settings.get_instance
	025 Move X8, [X19]
	026 Move X19, X0
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move X1, X31
	034 Move X2, X31
	035 Call Object.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {80}
	040 Move X20, 0x645000
	041 Move X20, [X20+1984]
	042 Move X8, [X20]
	043 Move X8, [X8+184]
	044 Move X21, [X8]
	045 Compare X21, 0
	046 JumpIfEqual {85}
	047 Move X8, [X21+168]
	048 Compare X8, 0
	049 JumpIfNotEqual {63}
	050 Move X8, 0x645000
	051 Move X8, [X8+2000]
	052 Move X0, [X8]
	053 Call 0x1C17F10
	054 Move X1, X31
	055 Move X19, X0
	056 Call Object..ctor, X0
	057 Move [X21+168], X19
	058 Move X8, [X20]
	059 Move X8, [X8+184]
	060 Move X21, [X8]
	061 Compare X21, 0
	062 JumpIfEqual {85}
	063 Move X0, [X21+152]
	064 Move X19, [X21+168]
	065 Call TMP_Settings.GetCharacters, X0
	066 Compare X19, 0
	067 JumpIfEqual {85}
	068 Move [X19+16], X0
	069 Move X8, [X20]
	070 Move X8, [X8+184]
	071 Move X8, [X8]
	072 Compare X8, 0
	073 JumpIfEqual {85}
	074 Move X0, [X8+160]
	075 Move X19, [X8+168]
	076 Call TMP_Settings.GetCharacters, X0
	077 Compare X19, 0
	078 JumpIfEqual {85}
	079 Move [X19+24], X0
	080 Move X20, [X31+16]
	081 Move X19, [X31+24]
	082 Move X30, [X31+32]
	083 Move X21, [X31+40]
	084 Return 
	085 Call 0x1C17F20

Method: System.Collections.Generic.Dictionary`2<System.Int32, System.Char> GetCharacters(UnityEngine.TextAsset file)

Disassembly:
	0x03B15570 BL 0x3C15F98
	0x03B15574 MOV V8.16B, V0.16B
	0x03B15578 LDR X0, [X21]
	0x03B1557C STP S10, S9, [X31 + 0x48]
	0x03B15580 LDR W8, [X0 + 0xE0]
	0x03B15584 CBNZ W8, 0x3B15590
	0x03B15588 BL 0x1C16DFC
	0x03B1558C LDR X0, [X21]
	0x03B15590 LDR X8, [X0 + 0xB8]
	0x03B15594 MOV X0, X19
	0x03B15598 MOV X2, X31
	0x03B1559C LDR W1, [X8 + 0x18]
	0x03B155A0 BL 0x3C15F98
	0x03B155A4 LDR X8, [X21]
	0x03B155A8 MOV X0, X19
	0x03B155AC MOV X2, X31
	0x03B155B0 FMUL S15, S8, S0
	0x03B155B4 LDR X8, [X8 + 0xB8]
	0x03B155B8 LDR W1, [X8 + 0x1C]
	0x03B155BC BL 0x3C15F98
	0x03B155C0 LDR X8, [X21]
	0x03B155C4 MOV X0, X19
	0x03B155C8 MOV X2, X31
	0x03B155CC FMUL S9, S8, S0
	0x03B155D0 LDR X8, [X8 + 0xB8]
	0x03B155D4 LDR W1, [X8 + 0x20]
	0x03B155D8 BL 0x3C15F98
	0x03B155DC LDR X8, [X21]
	0x03B155E0 MOV X0, X19
	0x03B155E4 MOV X2, X31
	0x03B155E8 FMUL S10, S8, S0
	0x03B155EC LDR X8, [X8 + 0xB8]
	0x03B155F0 LDR W1, [X8 + 0x24]
	0x03B155F4 BL 0x3C15F98
	0x03B155F8 FMUL S0, S8, S0
	0x03B155FC FADD S1, S13, S10
	0x03B15600 FADD S0, S1, S0
	0x03B15604 FSUB S1, S0, S15
	0x03B15608 FSUB S2, S0, S9
	0x03B1560C FADD S3, S15, S0
	0x03B15610 FADD S0, S9, S0
	0x03B15614 LDP S10, S9, [X31 + 0x48]
	0x03B15618 FCMP S12, S1
	0x03B1561C FCSEL S12, S12, S1, GT
	0x03B15620 FCMP S11, S2
	0x03B15624 FCSEL S11, S11, S2, GT
	0x03B15628 FCMP S10, S3
	0x03B1562C FCSEL S10, S10, S3, GT
	0x03B15630 FCMP S9, S0
	0x03B15634 FCSEL S9, S9, S0, GT
	0x03B15638 LDR X0, [X21]
	0x03B1563C FCMP S12, S14
	0x03B15640 FCSEL S0, S12, S14, GT
	0x03B15644 FCMP S11, S14
	0x03B15648 FCSEL S1, S11, S14, GT
	0x03B1564C FCMP S10, S14
	0x03B15650 FCSEL S2, S10, S14, GT
	0x03B15654 FCMP S9, S14
	0x03B15658 LDR W8, [X0 + 0xE0]
	0x03B1565C FCSEL S3, S9, S14, GT
	0x03B15660 SCVTF S4, W22
	0x03B15664 FADD S0, S0, S4
	0x03B15668 FADD S1, S1, S4
	0x03B1566C FADD S2, S2, S4
	0x03B15670 FADD S3, S3, S4
	0x03B15674 FMOV S4, 1
	0x03B15678 FMINNM S11, S0, S4
	0x03B1567C FMINNM S10, S1, S4
	0x03B15680 FMINNM S9, S2, S4
	0x03B15684 FMINNM S8, S3, S4
	0x03B15688 CBNZ W8, 0x3B15694
	0x03B1568C BL 0x1C16DFC
	0x03B15690 LDR X0, [X21]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x8CE000
	010 Move X22, 0x645000
	011 Move X19, 0x645000
	012 Move W8, [X21+1703]
	013 Move X22, [X22+2008]
	014 Move X19, [X19+2016]
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {34}
	020 Move X0, 0x645000
	021 Move X0, [X0+2024]
	022 Call 0x1C17CF4
	023 Move X0, 0x644000
	024 Move X0, [X0+792]
	025 Call 0x1C17CF4
	026 Move X0, 0x645000
	027 Move X0, [X0+2016]
	028 Call 0x1C17CF4
	029 Move X0, 0x645000
	030 Move X0, [X0+2008]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+1703], W8
	034 Move X0, [X22]
	035 Call 0x1C17F10
	036 Move X1, [X19]
	037 Move X19, X0
	038 Call Dictionary`2<Int32, Char>..ctor, X0
	039 Compare X20, 0
	040 JumpIfEqual {88}
	041 Move X0, X20
	042 Move X1, X31
	043 Call TextAsset.get_text, X0
	044 Compare X0, 0
	045 JumpIfEqual {88}
	046 Move W8, [X0+16]
	047 Move X20, X0
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X24, 0x644000
	050 Move X25, 0x645000
	051 Move X24, [X24+792]
	052 Move X25, [X25+2024]
	053 Move W21, W31
	054 Move X0, X20
	055 Move W1, W21
	056 Move X2, X31
	057 Call String.get_Chars, X0, X1
	058 Compare X19, 0
	059 JumpIfEqual {88}
	060 Move X2, [X24]
	061 And W23, W0, 0xFFFF
	062 Move W22, W0
	063 Move X0, X19
	064 Move W1, W23
	065 Call Dictionary`2<Int32, Char>.ContainsKey, X0, X1
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {75}
	070 Move X3, [X25]
	071 Move X0, X19
	072 Move W1, W23
	073 Move W2, W22
	074 Call Dictionary`2<Int32, Char>.Add, X0, X1, X2
	075 Move W8, [X20+16]
	076 Add W21, W21, 1
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X0, X19
	079 Move X20, [X31+48]
	080 Move X19, [X31+56]
	081 Move X22, [X31+32]
	082 Move X21, [X31+40]
	083 Move X24, [X31+16]
	084 Move X23, [X31+24]
	085 Move X30, [X31+64]
	086 Move X25, [X31+72]
	087 Return X0
	088 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03B15694 LDR X8, [X0 + 0xB8]
	0x03B15698 MOV X0, X19
	0x03B1569C MOV X2, X31
	0x03B156A0 LDR W1, [X8 + 0x54]

ISIL:
	001 Move W8, 257
	002 Move X1, X31
	003 NotImplemented "Instruction STURH not yet implemented."
	004 Call ScriptableObject..ctor, X0
	005 Return 

