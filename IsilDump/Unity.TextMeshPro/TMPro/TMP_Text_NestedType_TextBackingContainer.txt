Type: TMPro.TMP_Text/TextBackingContainer

Method: System.Int32 get_Capacity()

Disassembly:
	0x03B1CBC4 MOV W1, W20
	0x03B1CBC8 BL 0x1C16D6C
	0x03B1CBCC LDR W8, [X21 + 0x18]
	0x03B1CBD0 CMP W26, W8
	0x03B1CBD4 B.CS 0x3B1CBF4
	0x03B1CBD8 ADD X8, X21, X25
	0x03B1CBDC STR X0, [X8 + 0x58]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Int32 get_Count()

Disassembly:
	0x03B1CBE0 LDR X21, [X19 + 0x68]
	0x03B1CBE4 ADD X25, X25, 0x50

ISIL:
	001 Move W0, [X0+8]
	002 Return X0

Method: System.Void set_Count(System.Int32 value)

Disassembly:
	0x03B1CBE8 ADD W26, W26, 0x1
	0x03B1CBEC CBNZ X21, 0x3B1CB18

ISIL:
	001 Move [X0+8], W1
	002 Return 

Method: System.UInt32 get_Item(System.Int32 index)

Disassembly:
	0x03B1CBF0 BL 0x1C16F20
	0x03B1CBF4 BL 0x1C16F28
	0x03B1CBF8 STR X30, [X31 - 0x20]!
	0x03B1CBFC STP X20, X19, [X31 + 0x10]
	0x03B1CC00 ADRP X20, 0x8C6000
	0x03B1CC04 ADRP X19, 0x63C000
	0x03B1CC08 LDRB W8, [X20 + 0x702]
	0x03B1CC0C LDR X19, [X19 + 0x368]
	0x03B1CC10 TBNZ X8, 0x0, 0x3B1CC28
	0x03B1CC14 ADRP X0, 0x63C000
	0x03B1CC18 LDR X0, [X0 + 0x368]
	0x03B1CC1C BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move W9, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Add X8, X8, W1
	008 Move W0, [X8+32]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20
	012 Call 0x1C17F28

Method: System.Void set_Item(System.Int32 index, System.UInt32 value)

Disassembly:
	0x03B1CC20 MOVZ W8, 0x1
	0x03B1CC24 STRB W8, [X20 + 0x702]
	0x03B1CC28 LDR X8, [X19]
	0x03B1CC2C MOVZ W9, 0xFE00
	0x03B1CC30 MOVK W9, 0x46FF0000
	0x03B1CC34 UNIMPLEMENTED
	0x03B1CC38 LDR X8, [X8 + 0xB8]
	0x03B1CC3C MOVZ W9, 0xFE00
	0x03B1CC40 MOVK W9, 0xC6FF0000
	0x03B1CC44 STR D0, [X8]
	0x03B1CC48 LDR X8, [X19]
	0x03B1CC4C LDP X20, X19, [X31 + 0x10]
	0x03B1CC50 UNIMPLEMENTED
	0x03B1CC54 LDR X8, [X8 + 0xB8]
	0x03B1CC58 STR D0, [X8 + 0x8]
	0x03B1CC5C LDR X30, [X31], #0x20
	0x03B1CC60 RET
	0x03B1CC64 STR X30, [X31 - 0x20]!
	0x03B1CC68 STP X20, X19, [X31 + 0x10]
	0x03B1CC6C ADRP X19, 0x8C6000
	0x03B1CC70 ADRP X20, 0x63D000
	0x03B1CC74 LDRB W8, [X19 + 0x703]
	0x03B1CC78 LDR X20, [X20 + 0x1F0]
	0x03B1CC7C TBNZ X8, 0x0, 0x3B1CC94

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0]
	006 Compare X8, 0
	007 JumpIfEqual {27}
	008 Move W9, [X8+24]
	009 Move W19, W2
	010 Move W20, W1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W1, W20
	013 Move X21, X0
	014 Call TextBackingContainer.Resize, X0, X1
	015 Move X8, [X21]
	016 Compare X8, 0
	017 JumpIfEqual {27}
	018 Move W9, [X8+24]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Add X8, X8, W20
	021 Move [X8+32], W19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Return 
	027 Call 0x1C17F20
	028 Call 0x1C17F28

Method: System.Void .ctor(System.Int32 size)

Disassembly:
	0x03B1CCE4 ADRP X0, 0x63D000
	0x03B1CCE8 LDR X0, [X0 + 0x1F0]
	0x03B1CCEC BL 0x1C16CF4
	0x03B1CCF0 MOVZ W8, 0x1
	0x03B1CCF4 STRB W8, [X20 + 0x704]
	0x03B1CCF8 LDR X0, [X19]
	0x03B1CCFC LDR W8, [X0 + 0xE0]
	0x03B1CD00 CBNZ W8, 0x3B1CD0C
	0x03B1CD04 BL 0x1C16DFC
	0x03B1CD08 LDR X0, [X19]
	0x03B1CD0C LDR X8, [X0 + 0xB8]
	0x03B1CD10 LDP X20, X19, [X31 + 0x10]
	0x03B1CD14 LDR X0, [X8]
	0x03B1CD18 LDR X30, [X31], #0x20
	0x03B1CD1C RET
	0x03B1CD20 STP X30, X21, [X31 - 0x20]!
	0x03B1CD24 STP X20, X19, [X31 + 0x10]
	0x03B1CD28 ADRP X20, 0x8C6000
	0x03B1CD2C ADRP X21, 0x63D000
	0x03B1CD30 LDRB W8, [X20 + 0x707]
	0x03B1CD34 LDR X21, [X21 + 0xA80]
	0x03B1CD38 MOV W19, W0
	0x03B1CD3C TBNZ X8, 0x0, 0x3B1CD54
	0x03B1CD40 ADRP X0, 0x63D000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8C7000
	007 Move X22, 0x601000
	008 Move W8, [X21+1780]
	009 Move X22, [X22+3336]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x601000
	017 Move X0, [X0+3336]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1780], W8
	021 Move X0, [X22]
	022 Move W1, W20
	023 Call 0x1C17D6C
	024 Move [X19], X0
	025 Move [X19+8], W31
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X22, [X31+16]
	029 Move X21, [X31+24]
	030 Move X30, [X31+48]
	031 Return 

Method: System.Void Resize(System.Int32 size)

Disassembly:
	0x03B1CC80 ADRP X0, 0x63D000
	0x03B1CC84 LDR X0, [X0 + 0x1F0]
	0x03B1CC88 BL 0x1C16CF4
	0x03B1CC8C MOVZ W8, 0x1
	0x03B1CC90 STRB W8, [X19 + 0x703]
	0x03B1CC94 LDR X0, [X20]
	0x03B1CC98 BL 0x1C16F10
	0x03B1CC9C MOV X1, X31
	0x03B1CCA0 MOV X19, X0
	0x03B1CCA4 BL 0x33BDD8C
	0x03B1CCA8 LDR X8, [X20]
	0x03B1CCAC LDR X8, [X8 + 0xB8]
	0x03B1CCB0 STR X19, [X8]
	0x03B1CCB4 LDP X20, X19, [X31 + 0x10]
	0x03B1CCB8 LDR X30, [X31], #0x20
	0x03B1CCBC RET
	0x03B1CCC0 MOV X1, X31
	0x03B1CCC4 B 0x33BDD8C
	0x03B1CCC8 STR X30, [X31 - 0x20]!
	0x03B1CCCC STP X20, X19, [X31 + 0x10]
	0x03B1CCD0 ADRP X20, 0x8C6000
	0x03B1CCD4 ADRP X19, 0x63D000
	0x03B1CCD8 LDRB W8, [X20 + 0x704]
	0x03B1CCDC LDR X19, [X19 + 0x1F0]
	0x03B1CCE0 TBNZ X8, 0x0, 0x3B1CCF8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8C7000
	007 Move X21, 0x63E000
	008 Move W8, [X22+1781]
	009 Move X21, [X21+2648]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x63E000
	017 Move X0, [X0+2648]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1781], W8
	021 Add W0, W20, 1
	022 Move X1, X31
	023 Call Mathf.NextPowerOfTwo, X0
	024 Move X2, [X21]
	025 Move W1, W0
	026 Move X0, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X22, [X31+16]
	030 Move X21, [X31+24]
	031 Move X30, [X31+48]
	032 Call Array.Resize, X0, X1
	033 Return 

