Type: TMPro.TMP_TextParsingUtilities

Method: System.Void .cctor()

Disassembly:
	0x03B1DC64 BL 0x1C16F20
	0x03B1DC68 MOV W21, W22
	0x03B1DC6C MOV W0, W21
	0x03B1DC70 LDP X20, X19, [X31 + 0x50]
	0x03B1DC74 LDP X22, X21, [X31 + 0x40]
	0x03B1DC78 LDP X30, X23, [X31 + 0x30]
	0x03B1DC7C LDP D9, D8, [X31 + 0x20]
	0x03B1DC80 LDP D11, D10, [X31 + 0x10]
	0x03B1DC84 ADD X31, X31, 0x60
	0x03B1DC88 RET
	0x03B1DC8C BL 0x1C16F28
	0x03B1DC90 SUB X31, X31, 0x100
	0x03B1DC94 STP D15, D14, [X31 + 0x70]
	0x03B1DC98 STP D13, D12, [X31 + 0x80]
	0x03B1DC9C STP D11, D10, [X31 + 0x90]
	0x03B1DCA0 STP D9, D8, [X31 + 0xA0]
	0x03B1DCA4 STR X30, [X31 + 0xB0]
	0x03B1DCA8 STP X26, X25, [X31 + 0xC0]
	0x03B1DCAC STP X24, X23, [X31 + 0xD0]
	0x03B1DCB0 STP X22, X21, [X31 + 0xE0]
	0x03B1DCB4 STP X20, X19, [X31 + 0xF0]
	0x03B1DCB8 ADRP X21, 0x8C5000
	0x03B1DCBC LDRB W8, [X21 + 0x70D]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x8C6000
	005 Move X20, 0x63D000
	006 Move W8, [X19+1795]
	007 Move X20, [X20+496]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x63D000
	013 Move X0, [X0+496]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1795], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call Object..ctor, X0
	022 Move X8, [X20]
	023 Move X8, [X8+184]
	024 Move [X8], X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 

Method: TMPro.TMP_TextParsingUtilities get_instance()

Disassembly:
	0x03B1DCC8 MOV W22, W1
	0x03B1DCCC MOV V8.16B, V1.16B
	0x03B1DCD0 MOV V9.16B, V0.16B
	0x03B1DCD4 MOV X20, X0
	0x03B1DCD8 STP S0, S1, [X31 + 0x60]
	0x03B1DCDC STR S2, [X31 + 0x68]
	0x03B1DCE0 TBNZ X8, 0x0, 0x3B1DCF8
	0x03B1DCE4 ADRP X0, 0x63B000
	0x03B1DCE8 LDR X0, [X0 + 0xBB8]
	0x03B1DCEC BL 0x1C16CF4
	0x03B1DCF0 MOVZ W8, 0x1
	0x03B1DCF4 STRB W8, [X21 + 0x70D]
	0x03B1DCF8 CBZ X20, 0x3B1DFC0
	0x03B1DCFC ADRP X24, 0x63B000
	0x03B1DD00 LDR X24, [X24 + 0xBB8]
	0x03B1DD04 MOV X0, X20
	0x03B1DD08 MOV X1, X31
	0x03B1DD0C BL 0x3AF8E0C
	0x03B1DD10 LDR X8, [X24]
	0x03B1DD14 MOV X21, X0
	0x03B1DD18 LDR W9, [X8 + 0xE0]
	0x03B1DD1C CBNZ W9, 0x3B1DD28

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8C6000
	005 Move X19, 0x63D000
	006 Move W8, [X20+1796]
	007 Move X19, [X19+496]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x63D000
	013 Move X0, [X0+496]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1796], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Int32 GetHashCode(System.String s)

Disassembly:
	0x03B19CD8 MOV X0, X8
	0x03B19CDC BL 0x1C16DFC
	0x03B19CE0 MOV X0, X22
	0x03B19CE4 MOV X1, X31
	0x03B19CE8 BL 0x338C698
	0x03B19CEC CBZ X23, 0x3B19F90
	0x03B19CF0 MOV X22, X0
	0x03B19CF4 CBZ X0, 0x3B19D0C
	0x03B19CF8 LDR X8, [X23]
	0x03B19CFC MOV X0, X22
	0x03B19D00 LDR X1, [X8 + 0x40]
	0x03B19D04 BL 0x1C16E00
	0x03B19D08 CBZ X0, 0x3B19F98
	0x03B19D0C LDR W8, [X23 + 0x18]
	0x03B19D10 CBZ W8, 0x3B19F94
	0x03B19D14 ADRP X8, 0x5DA000
	0x03B19D18 LDR X8, [X8 + 0xA58]
	0x03B19D1C STR X22, [X23 + 0x20]
	0x03B19D20 LDR X0, [X8]
	0x03B19D24 BL 0x1C16F10
	0x03B19D28 MOV X1, X21
	0x03B19D2C MOV X2, X23
	0x03B19D30 MOV X3, X31
	0x03B19D34 MOV X22, X0
	0x03B19D38 BL 0x3C35A8C
	0x03B19D3C CBZ X22, 0x3B19F90
	0x03B19D40 ADRP X21, 0x640000
	0x03B19D44 LDR X21, [X21 + 0xA20]
	0x03B19D48 MOVZ W1, 0x34
	0x03B19D4C MOV X0, X22
	0x03B19D50 MOV X2, X31
	0x03B19D54 BL 0x3C396EC
	0x03B19D58 LDR X1, [X21]
	0x03B19D5C MOV X0, X22
	0x03B19D60 BL 0x21E52E4
	0x03B19D64 MOV X21, X0
	0x03B19D68 MOV X0, X22
	0x03B19D6C MOV X1, X31
	0x03B19D70 BL 0x3C356F8
	0x03B19D74 CBZ X19, 0x3B19F90
	0x03B19D78 MOV X23, X0
	0x03B19D7C MOV X0, X19
	0x03B19D80 MOV X1, X31
	0x03B19D84 BL 0x3ACC9E8
	0x03B19D88 CBZ X23, 0x3B19F90
	0x03B19D8C MOV X1, X0
	0x03B19D90 MOV X0, X23

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x8CA000
	008 Move W8, [X20+1797]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x641000
	015 Move X0, [X0+496]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1797], W8
	019 Compare X19, 0
	020 JumpIfEqual {55}
	021 Move W8, [X19+16]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X23, 0x641000
	024 Move X23, [X23+496]
	025 Move W21, W31
	026 Move W20, W31
	027 Move X0, X19
	028 Move W1, W21
	029 Move X2, X31
	030 Call String.get_Chars, X0, X1
	031 Move X8, [X23]
	032 Move W22, W0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move W0, W22
	039 Call TMP_TextParsingUtilities.ToUpperASCIIFast, X0
	040 Move W8, [X19+16]
	041 Add W9, W20, W20
	042 And W10, W0, 0xFFFF
	043 Add W21, W21, 1
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Xor W20, W9, W10
	046 Move W20, W31
	047 Move W0, W20
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0
	055 Call 0x1C17F20

Method: System.Int32 GetHashCodeCaseSensitive(System.String s)

Disassembly:
	0x03B19828 BL 0x1C16DFC
	0x03B1982C ADRP X23, 0x63F000
	0x03B19830 LDR X23, [X23 + 0x620]
	0x03B19834 MOV X0, X21
	0x03B19838 MOV X1, X31
	0x03B1983C MOV X2, X31
	0x03B19840 BL 0x3C354F8
	0x03B19844 TBZ X0, 0x0, 0x3B1988C
	0x03B19848 LDR X0, [X22]
	0x03B1984C LDR X21, [X19 + 0x40]
	0x03B19850 LDR W8, [X0 + 0xE0]
	0x03B19854 CBNZ W8, 0x3B1985C
	0x03B19858 BL 0x1C16DFC
	0x03B1985C MOV X0, X21
	0x03B19860 MOV X1, X20
	0x03B19864 MOV X2, X31
	0x03B19868 BL 0x3C354F8
	0x03B1986C TBZ X0, 0x0, 0x3B1988C
	0x03B19870 LDR X0, [X23]
	0x03B19874 LDR X21, [X19 + 0x40]
	0x03B19878 LDR W8, [X0 + 0xE0]
	0x03B1987C CBNZ W8, 0x3B19884
	0x03B19880 BL 0x1C16DFC
	0x03B19884 MOV X0, X21
	0x03B19888 BL 0x3B10BA8
	0x03B1988C STR X20, [X19 + 0x40]
	0x03B19890 LDR X0, [X23]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {29}
	007 Move W8, [X0+16]
	008 Move X19, X0
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W21, W31
	011 Move W20, W31
	012 Move X0, X19
	013 Move W1, W21
	014 Move X2, X31
	015 Call String.get_Chars, X0, X1
	016 Move W8, [X19+16]
	017 Add W9, W20, W20
	018 And W10, W0, 0xFFFF
	019 Add W21, W21, 1
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Xor W20, W9, W10
	022 Move W20, W31
	023 Move W0, W20
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Move X21, [X31+40]
	028 Return X0
	029 Call 0x1C17F20

Method: System.Char ToLowerASCIIFast(System.Char c)

Disassembly:
	0x03B1DD94 MUL X9, X9, X11
	0x03B1DD98 ADD X25, X12, X10
	0x03B1DD9C MOVZ W10, 0x7F800000
	0x03B1DDA0 ADD X26, X9, 0x194
	0x03B1DDA4 STR S0, [X31 + 0x50]
	0x03B1DDA8 STR W10, [X31 + 0x38]
	0x03B1DDAC LDR X8, [X8 + 0x38]
	0x03B1DDB0 CBZ X8, 0x3B1DFC0
	0x03B1DDB4 LDR W9, [X8 + 0x18]
	0x03B1DDB8 CMP W23, W9
	0x03B1DDBC B.CS 0x3B1DFF8
	0x03B1DDC0 ADD X8, X8, X26
	0x03B1DDC4 LDP S8, S12, [X8 - 0x78]
	0x03B1DDC8 LDP S2, S13, [X8 - 0x70]
	0x03B1DDCC LDRB W9, [X8]
	0x03B1DDD0 LDP S10, S9, [X8 - 0x68]
	0x03B1DDD4 TBNZ X9, 0x0, 0x3B1DDDC
	0x03B1DDD8 TBNZ X19, 0x0, 0x3B1DFA8
	0x03B1DDDC CBZ X21, 0x3B1DFC0
	0x03B1DDE0 MOV X0, X21
	0x03B1DDE4 MOV V0.16B, V8.16B
	0x03B1DDE8 MOV V1.16B, V12.16B
	0x03B1DDEC MOV X1, X31
	0x03B1DDF0 BL 0x3C3DE4C
	0x03B1DDF4 STR S0, [X31 + 0x5C]
	0x03B1DDF8 STP S1, S2, [X31 + 0xB8]
	0x03B1DDFC FMOV S2, W31
	0x03B1DE00 MOV X0, X21
	0x03B1DE04 MOV V0.16B, V8.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8C6000
	006 Move X21, 0x63D000
	007 Move W8, [X20+1798]
	008 Move X21, [X21+2696]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x63D000
	015 Move X0, [X0+2696]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1798], W8
	019 Move X0, [X21]
	020 Compare X0, 0
	021 JumpIfEqual {39}
	022 Move W8, [X0+16]
	023 Subtract W8, W8, 1
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0
	031 And W1, W19, 0xFFFF
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X2, X31
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call String.get_Chars, X0, X1
	038 Return X0
	039 Call 0x1C17F20

Method: System.Char ToUpperASCIIFast(System.Char c)

Disassembly:
	0x03B1DD20 MOV X0, X8
	0x03B1DD24 BL 0x1C16DFC
	0x03B1DD28 ADD X2, X31, 0x60
	0x03B1DD2C MOV X0, X21
	0x03B1DD30 MOV V0.16B, V9.16B
	0x03B1DD34 MOV V1.16B, V8.16B
	0x03B1DD38 MOV X1, X23
	0x03B1DD3C BL 0x3B1D60C
	0x03B1DD40 LDR X8, [X20 + 0x368]
	0x03B1DD44 CBZ X8, 0x3B1DFC0
	0x03B1DD48 LDR X9, [X8 + 0x50]
	0x03B1DD4C CBZ X9, 0x3B1DFC0
	0x03B1DD50 LDR W10, [X9 + 0x18]
	0x03B1DD54 CMP W10, W22
	0x03B1DD58 B.LS 0x3B1DFF8
	0x03B1DD5C MOVZ W10, 0x5C
	0x03B1DD60 SMADDL X9, X22, X10, X9
	0x03B1DD64 LDR W23, [X9 + 0x34]
	0x03B1DD68 LDR W22, [X9 + 0x3C]
	0x03B1DD6C CMP W23, W22
	0x03B1DD70 B.GE 0x3B1DFC8
	0x03B1DD74 LDR V1, [X31 + 0x60]
	0x03B1DD78 LDR V0, [X31 + 0x64]
	0x03B1DD7C SXTW X9, W23
	0x03B1DD80 MOVZ W11, 0x178
	0x03B1DD84 SXTW X10, W22
	0x03B1DD88 STP S0, S1, [X31 + 0x54]
	0x03B1DD8C LDR V0, [X31 + 0x68]
	0x03B1DD90 ORN X12, X31, X9, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8C6000
	006 Move X21, 0x63D000
	007 Move W8, [X20+1799]
	008 Move X21, [X21+2688]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x63D000
	015 Move X0, [X0+2688]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1799], W8
	019 Move X0, [X21]
	020 Compare X0, 0
	021 JumpIfEqual {39}
	022 Move W8, [X0+16]
	023 Subtract W8, W8, 1
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0
	031 And W1, W19, 0xFFFF
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X2, X31
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call String.get_Chars, X0, X1
	038 Return X0
	039 Call 0x1C17F20

Method: System.UInt32 ToUpperASCIIFast(System.UInt32 c)

Disassembly:
	0x03B1DE08 MOV V1.16B, V10.16B
	0x03B1DE0C MOV X1, X31
	0x03B1DE10 BL 0x3C3DE4C
	0x03B1DE14 MOV V14.16B, V0.16B
	0x03B1DE18 MOV V11.16B, V1.16B
	0x03B1DE1C MOV V15.16B, V2.16B
	0x03B1DE20 MOV X0, X21
	0x03B1DE24 MOV V0.16B, V13.16B
	0x03B1DE28 MOV V1.16B, V10.16B
	0x03B1DE2C MOV V2.16B, V9.16B
	0x03B1DE30 MOV X1, X31
	0x03B1DE34 BL 0x3C3DE4C
	0x03B1DE38 MOV V10.16B, V0.16B
	0x03B1DE3C MOV V9.16B, V1.16B
	0x03B1DE40 MOV V8.16B, V2.16B
	0x03B1DE44 FMOV S2, W31
	0x03B1DE48 MOV X0, X21
	0x03B1DE4C MOV V0.16B, V13.16B
	0x03B1DE50 MOV V1.16B, V12.16B
	0x03B1DE54 MOV X1, X31
	0x03B1DE58 BL 0x3C3DE4C
	0x03B1DE5C LDR X0, [X24]
	0x03B1DE60 MOV V13.16B, V2.16B
	0x03B1DE64 STP S1, S0, [X31 + 0x48]
	0x03B1DE68 LDR W8, [X0 + 0xE0]
	0x03B1DE6C CBNZ W8, 0x3B1DE74
	0x03B1DE70 BL 0x1C16DFC
	0x03B1DE74 LDP S1, S0, [X31 + 0x54]
	0x03B1DE78 LDR V2, [X31 + 0x50]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8C6000
	006 Move X21, 0x63D000
	007 Move W8, [X20+1800]
	008 Move X21, [X21+2688]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x63D000
	015 Move X0, [X0+2688]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1800], W8
	019 Move X0, [X21]
	020 Compare X0, 0
	021 JumpIfEqual {36}
	022 Move W8, [X0+16]
	023 Move W9, W19
	024 Subtract W8, W8, 1
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W1, W19
	027 Move X2, X31
	028 Call String.get_Chars, X0, X1
	029 And W19, W0, 0xFFFF
	030 Move W0, W19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return X0
	036 Call 0x1C17F20

Method: System.UInt32 ToLowerASCIIFast(System.UInt32 c)

Disassembly:
	0x03B1DE7C LDR V3, [X31 + 0x5C]
	0x03B1DE80 LDP S4, S5, [X31 + 0xB8]
	0x03B1DE84 STR S8, [X31 + 0x44]
	0x03B1DE88 STP S9, S8, [X31 + 0x14]
	0x03B1DE8C MOV V8.16B, V9.16B
	0x03B1DE90 STR S10, [X31 + 0x10]
	0x03B1DE94 MOV V12.16B, V15.16B
	0x03B1DE98 STP S11, S15, [X31 + 0x4]
	0x03B1DE9C MOV V15.16B, V11.16B
	0x03B1DEA0 MOV V11.16B, V14.16B
	0x03B1DEA4 STR S14, [X31]
	0x03B1DEA8 BL 0x3B1DFFC
	0x03B1DEAC TBNZ X0, 0x0, 0x3B1DFC4
	0x03B1DEB0 LDR X0, [X24]
	0x03B1DEB4 MOV V9.16B, V10.16B
	0x03B1DEB8 STR S13, [X31 + 0x40]
	0x03B1DEBC LDR W8, [X0 + 0xE0]
	0x03B1DEC0 CBNZ W8, 0x3B1DEC8
	0x03B1DEC4 BL 0x1C16DFC
	0x03B1DEC8 LDP S10, S13, [X31 + 0x54]
	0x03B1DECC LDR V14, [X31 + 0x50]
	0x03B1DED0 LDR V0, [X31 + 0x5C]
	0x03B1DED4 LDP S1, S2, [X31 + 0xB8]
	0x03B1DED8 MOV V3.16B, V11.16B
	0x03B1DEDC MOV V4.16B, V15.16B
	0x03B1DEE0 MOV V5.16B, V12.16B
	0x03B1DEE4 STP S13, S10, [X31]
	0x03B1DEE8 STR S14, [X31 + 0x8]
	0x03B1DEEC BL 0x3B1E0BC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8C6000
	006 Move X21, 0x63D000
	007 Move W8, [X20+1801]
	008 Move X21, [X21+2696]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x63D000
	015 Move X0, [X0+2696]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1801], W8
	019 Move X0, [X21]
	020 Compare X0, 0
	021 JumpIfEqual {36}
	022 Move W8, [X0+16]
	023 Move W9, W19
	024 Subtract W8, W8, 1
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W1, W19
	027 Move X2, X31
	028 Call String.get_Chars, X0, X1
	029 And W19, W0, 0xFFFF
	030 Move W0, W19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return X0
	036 Call 0x1C17F20

Method: System.Boolean IsHighSurrogate(System.UInt32 c)

Disassembly:
	0x03B1DEF0 MOV V2.16B, V12.16B
	0x03B1DEF4 LDR V12, [X31 + 0x44]
	0x03B1DEF8 STR S0, [X31 + 0x3C]
	0x03B1DEFC MOV V0.16B, V11.16B
	0x03B1DF00 MOV V1.16B, V15.16B

ISIL:
	001 Move TEMP, 0xD800
	002 Not TEMP
	003 Move W8, TEMP
	004 Add W8, W0, W8
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Return X0

Method: System.Boolean IsLowSurrogate(System.UInt32 c)

Disassembly:
	0x03B1DF04 MOV V3.16B, V9.16B
	0x03B1DF08 MOV V4.16B, V8.16B
	0x03B1DF0C MOV V5.16B, V12.16B
	0x03B1DF10 STP S10, S14, [X31 + 0x4]
	0x03B1DF14 STR S13, [X31]

ISIL:
	001 Move TEMP, 0xDC00
	002 Not TEMP
	003 Move W8, TEMP
	004 Add W8, W0, W8
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Return X0

Method: System.UInt32 ConvertToUTF32(System.UInt32 highSurrogate, System.UInt32 lowSurrogate)

Disassembly:
	0x03B1DF18 MOV V11.16B, V9.16B
	0x03B1DF1C MOV V9.16B, V8.16B
	0x03B1DF20 BL 0x3B1E0BC
	0x03B1DF24 MOV V8.16B, V0.16B
	0x03B1DF28 MOV V0.16B, V11.16B

ISIL:
	001 Move W9, 0x2400
	002 Add W8, W1, W0
	003 NotImplemented "Instruction MOVK not yet implemented."
	004 Add W0, W8, W9
	005 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03B1DCC0 MOV W19, W3
	0x03B1DCC4 MOV X23, X2

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

