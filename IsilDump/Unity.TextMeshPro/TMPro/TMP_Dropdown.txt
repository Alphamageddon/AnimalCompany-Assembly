Type: TMPro.TMP_Dropdown

Method: UnityEngine.RectTransform get_template()

Disassembly:
	0x03ADF9F0 MOV X2, X31
	0x03ADF9F4 BL 0x3C354F8

ISIL:
	001 Move X0, [X0+256]
	002 Return X0

Method: System.Void set_template(UnityEngine.RectTransform value)

Disassembly:
	0x03ADF6EC LDR W8, [X0 + 0xE0]
	0x03ADF6F0 CBNZ W8, 0x3ADF6F8

ISIL:
	001 Move [X0+256], X1
	002 Call TMP_Dropdown.RefreshShownValue, X0
	003 Return 

Method: TMPro.TMP_Text get_captionText()

Disassembly:
	0x03ADF9F8 TBZ X0, 0x0, 0x3ADFAD0
	0x03ADF9FC CBZ X21, 0x3ADFC50

ISIL:
	001 Move X0, [X0+264]
	002 Return X0

Method: System.Void set_captionText(TMPro.TMP_Text value)

Disassembly:
	0x03ADF6F4 BL 0x1C16DFC
	0x03ADF6F8 ADRP X25, 0x614000

ISIL:
	001 Move [X0+264], X1
	002 Call TMP_Dropdown.RefreshShownValue, X0
	003 Return 

Method: UnityEngine.UI.Image get_captionImage()

Disassembly:
	0x03ADFA00 ADRP X8, 0x679000
	0x03ADFA04 LDR X8, [X8 + 0xAD8]

ISIL:
	001 Move X0, [X0+272]
	002 Return X0

Method: System.Void set_captionImage(UnityEngine.UI.Image value)

Disassembly:
	0x03ADFA08 MOV X0, X21
	0x03ADFA0C LDR X1, [X8]

ISIL:
	001 Move [X0+272], X1
	002 Call TMP_Dropdown.RefreshShownValue, X0
	003 Return 

Method: UnityEngine.UI.Graphic get_placeholder()

Disassembly:
	0x03ADFA10 BL 0x21A43A8
	0x03ADFA14 CBZ X0, 0x3ADFC50

ISIL:
	001 Move X0, [X0+280]
	002 Return X0

Method: System.Void set_placeholder(UnityEngine.UI.Graphic value)

Disassembly:
	0x03ADFA18 LDR W8, [X0 + 0x18]
	0x03ADFA1C MOV X21, X0

ISIL:
	001 Move [X0+280], X1
	002 Call TMP_Dropdown.RefreshShownValue, X0
	003 Return 

Method: TMPro.TMP_Text get_itemText()

Disassembly:
	0x03ADFA20 CMP W8, 0x1
	0x03ADFA24 B.LT 0x3ADFAF4

ISIL:
	001 Move X0, [X0+288]
	002 Return X0

Method: System.Void set_itemText(TMPro.TMP_Text value)

Disassembly:
	0x03ADF6FC LDR X25, [X25 + 0xA28]
	0x03ADF700 MOV X0, X20

ISIL:
	001 Move [X0+288], X1
	002 Call TMP_Dropdown.RefreshShownValue, X0
	003 Return 

Method: UnityEngine.UI.Image get_itemImage()

Disassembly:
	0x03ADFA28 MOV W26, W31
	0x03ADFA2C CMP W26, W8

ISIL:
	001 Move X0, [X0+296]
	002 Return X0

Method: System.Void set_itemImage(UnityEngine.UI.Image value)

Disassembly:
	0x03ADFA30 B.CS 0x3ADFC54
	0x03ADFA34 ADD X8, X21, W26, 0x3, SXTW

ISIL:
	001 Move [X0+296], X1
	002 Call TMP_Dropdown.RefreshShownValue, X0
	003 Return 

Method: System.Collections.Generic.List`1<TMPro.TMP_Dropdown/OptionData> get_options()

Disassembly:
	0x03ADF704 MOV X1, X31
	0x03ADF708 BL 0x3C38948
	0x03ADF70C TBZ X0, 0x0, 0x3ADF7E0
	0x03ADF710 LDR X0, [X19 + 0x100]
	0x03ADF714 CBZ X0, 0x3ADFC50
	0x03ADF718 MOV X1, X31
	0x03ADF71C BL 0x3C32ECC

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+312]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move X0, [X8+16]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_options(System.Collections.Generic.List`1<TMPro.TMP_Dropdown/OptionData> value)

Disassembly:
	0x03ADFA38 LDR X0, [X8 + 0x20]
	0x03ADFA3C CBZ X0, 0x3ADFC50
	0x03ADFA40 MOV X1, X31
	0x03ADFA44 BL 0x33BE520
	0x03ADFA48 MOV X22, X0
	0x03ADFA4C MOV X0, X20
	0x03ADFA50 MOV X1, X22

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+312]
	003 Compare X8, 0
	004 JumpIfEqual {9}
	005 Move [X8+16], X1
	006 Move X30, [X31+16]
	007 Call TMP_Dropdown.RefreshShownValue, X0
	008 Return 
	009 Call 0x1C17F20

Method: TMPro.TMP_Dropdown/DropdownEvent get_onValueChanged()

Disassembly:
	0x03ADFA54 MOV X2, X31
	0x03ADFA58 BL 0x3C32F80

ISIL:
	001 Move X0, [X0+320]
	002 Return X0

Method: System.Void set_onValueChanged(TMPro.TMP_Dropdown/DropdownEvent value)

Disassembly:
	0x03ADFA5C LDR X8, [X24]
	0x03ADFA60 MOV X23, X0

ISIL:
	001 Move [X0+320], X1
	002 Return 

Method: System.Single get_alphaFadeSpeed()

Disassembly:
	0x03ADFA64 LDR W9, [X8 + 0xE0]
	0x03ADFA68 CBNZ W9, 0x3ADFA74

ISIL:
	001 Move V0, [X0+328]
	002 Return V0

Method: System.Void set_alphaFadeSpeed(System.Single value)

Disassembly:
	0x03ADFA6C MOV X0, X8
	0x03ADFA70 BL 0x1C16DFC

ISIL:
	001 Move [X0+328], S0
	002 Return 

Method: System.Int32 get_value()

Disassembly:
	0x03ADFA74 MOV X0, X23
	0x03ADFA78 MOV X1, X31

ISIL:
	001 Move W0, [X0+304]
	002 Return X0

Method: System.Void set_value(System.Int32 value)

Disassembly:
	0x03ADFA7C MOV X2, X31
	0x03ADFA80 BL 0x3C3883C

ISIL:
	001 Move W2, 1

Method: System.Void SetValueWithoutNotify(System.Int32 input)

Disassembly:
	0x03ADFBEC BL 0x3C32E90
	0x03ADFBF0 CBZ X22, 0x3ADFC50

ISIL:
	001 Move W2, W31
	002 Call TMP_Dropdown.SetValue, X0, X1, X2
	003 Return 

Method: System.Void SetValue(System.Int32 value, System.Boolean sendCallback = True)

Disassembly:
	0x03ADFA84 TBZ X0, 0x0, 0x3ADFA98
	0x03ADFA88 MOV X0, X20
	0x03ADFA8C MOV X1, X22
	0x03ADFA90 MOV X2, X31
	0x03ADFA94 BL 0x3C356B4
	0x03ADFA98 LDR W8, [X21 + 0x18]
	0x03ADFA9C ADD W26, W26, 0x1
	0x03ADFAA0 CMP W26, W8
	0x03ADFAA4 B.LT 0x3ADFA2C
	0x03ADFAA8 B 0x3ADFAF4
	0x03ADFAAC MOV X0, X20
	0x03ADFAB0 LDP X20, X19, [X31 + 0x40]
	0x03ADFAB4 LDP X22, X21, [X31 + 0x30]
	0x03ADFAB8 LDP X24, X23, [X31 + 0x20]
	0x03ADFABC LDP X26, X25, [X31 + 0x10]
	0x03ADFAC0 MOV W1, W31
	0x03ADFAC4 MOV X2, X31
	0x03ADFAC8 LDR X30, [X31], #0x50
	0x03ADFACC B 0x3C357B4
	0x03ADFAD0 LDR X0, [X25]
	0x03ADFAD4 LDR W8, [X0 + 0xE0]
	0x03ADFAD8 CBNZ W8, 0x3ADFAE0
	0x03ADFADC BL 0x1C16DFC
	0x03ADFAE0 ADRP X8, 0x679000
	0x03ADFAE4 LDR X8, [X8 + 0xAF8]
	0x03ADFAE8 MOV X0, X20
	0x03ADFAEC LDR X1, [X8]
	0x03ADFAF0 BL 0x2298CC8
	0x03ADFAF4 LDR X0, [X25]
	0x03ADFAF8 LDR W8, [X0 + 0xE0]
	0x03ADFAFC CBNZ W8, 0x3ADFB04
	0x03ADFB00 BL 0x1C16DFC
	0x03ADFB04 ADRP X8, 0x679000
	0x03ADFB08 LDR X8, [X8 + 0xAE8]
	0x03ADFB0C MOV X0, X20
	0x03ADFB10 LDR X1, [X8]
	0x03ADFB14 BL 0x2298CC8
	0x03ADFB18 MOV X0, X20
	0x03ADFB1C MOV W1, W31
	0x03ADFB20 MOV X2, X31
	0x03ADFB24 BL 0x3C357B4
	0x03ADFB28 MOVZ W8, 0x1
	0x03ADFB2C STRB W8, [X19 + 0x170]
	0x03ADFB30 LDP X20, X19, [X31 + 0x40]
	0x03ADFB34 LDP X22, X21, [X31 + 0x30]
	0x03ADFB38 LDP X24, X23, [X31 + 0x20]
	0x03ADFB3C LDP X26, X25, [X31 + 0x10]
	0x03ADFB40 LDR X30, [X31], #0x50
	0x03ADFB44 RET
	0x03ADFB48 LDR X0, [X24]
	0x03ADFB4C LDR X22, [X19 + 0x120]
	0x03ADFB50 LDR W8, [X0 + 0xE0]
	0x03ADFB54 CBNZ W8, 0x3ADFB5C
	0x03ADFB58 BL 0x1C16DFC
	0x03ADFB5C MOV X0, X22
	0x03ADFB60 MOV X1, X31
	0x03ADFB64 MOV X2, X31
	0x03ADFB68 BL 0x3C354F8
	0x03ADFB6C TBZ X0, 0x0, 0x3ADFBA8
	0x03ADFB70 LDR X0, [X19 + 0x120]
	0x03ADFB74 CBZ X0, 0x3ADFC50
	0x03ADFB78 MOV X1, X31
	0x03ADFB7C BL 0x3AF8D78
	0x03ADFB80 MOV X22, X0
	0x03ADFB84 MOV X0, X21
	0x03ADFB88 MOV X1, X31
	0x03ADFB8C BL 0x3C32E90
	0x03ADFB90 CBZ X22, 0x3ADFC50
	0x03ADFB94 MOV X1, X0
	0x03ADFB98 MOV X0, X22
	0x03ADFB9C MOV X2, X31
	0x03ADFBA0 BL 0x3C40F48
	0x03ADFBA4 TBZ X0, 0x0, 0x3ADFC2C
	0x03ADFBA8 LDR X0, [X24]
	0x03ADFBAC LDR X22, [X19 + 0x128]
	0x03ADFBB0 LDR W8, [X0 + 0xE0]
	0x03ADFBB4 CBNZ W8, 0x3ADFBBC
	0x03ADFBB8 BL 0x1C16DFC
	0x03ADFBBC MOV X0, X22
	0x03ADFBC0 MOV X1, X31
	0x03ADFBC4 MOV X2, X31
	0x03ADFBC8 BL 0x3C354F8
	0x03ADFBCC TBZ X0, 0x0, 0x3ADF880
	0x03ADFBD0 LDR X0, [X19 + 0x128]
	0x03ADFBD4 CBZ X0, 0x3ADFC50
	0x03ADFBD8 MOV X1, X31
	0x03ADFBDC BL 0x3C32E90
	0x03ADFBE0 MOV X22, X0
	0x03ADFBE4 MOV X0, X21
	0x03ADFBE8 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x904000
	008 Move X23, 0x615000
	009 Move W8, [X22+1389]
	010 Move X23, [X23+2416]
	011 Move W20, W2
	012 Move W21, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0x615000
	019 Move X0, [X0+2416]
	020 Call 0x1C17CF4
	021 Move X0, 0x67A000
	022 Move X0, [X0+2584]
	023 Call 0x1C17CF4
	024 Move X0, 0x615000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0x67A000
	028 Move X0, [X0+2600]
	029 Call 0x1C17CF4
	030 Move X0, 0x67A000
	031 Move X0, [X0+2608]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+1389], W8
	035 Move X0, [X23]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X31
	041 Call Application.get_isPlaying
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {57}
	046 Move W8, [X19+304]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X8, [X19+312]
	049 Compare X8, 0
	050 JumpIfEqual {116}
	051 Move X8, [X8+16]
	052 Compare X8, 0
	053 JumpIfEqual {116}
	054 Move W8, [X8+24]
	055 Compare W8, 0
	056 JumpIfEqual {109}
	057 Move X8, 0x615000
	058 Move X8, [X8+1432]
	059 Move X22, [X19+280]
	060 Move X0, [X8]
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Move X0, X22
	066 Move X1, X31
	067 Call Object.op_Implicit, X0
	068 Move X8, [X19+312]
	069 Compare X8, 0
	070 JumpIfEqual {116}
	071 Move X8, [X8+16]
	072 Compare X8, 0
	073 JumpIfEqual {116}
	074 Move W8, [X8+24]
	075 NotImplemented "Instruction SBFM not yet implemented."
	076 Move X0, X19
	077 Subtract W8, W8, 1
	078 NotImplemented "Instruction CMP not yet implemented."
	079 NotImplemented "Instruction CSEL not yet implemented."
	080 NotImplemented "Instruction CMP not yet implemented."
	081 NotImplemented "Instruction CSEL not yet implemented."
	082 Move [X19+304], W8
	083 Call TMP_Dropdown.RefreshShownValue, X0
	084 Move TEMP, X20
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfNotEqual {109}
	088 Move X8, 0x67A000
	089 Move X8, [X8+2608]
	090 Move X1, X19
	091 Move X2, X31
	092 Move X0, [X8]
	093 Call UISystemProfilerApi.AddMarker, X0, X1
	094 Move X0, [X19+320]
	095 Compare X0, 0
	096 JumpIfEqual {116}
	097 Move X8, 0x67A000
	098 Move W1, [X19+304]
	099 Move X8, [X8+2600]
	100 Move X20, [X31+32]
	101 Move X19, [X31+40]
	102 Move X22, [X31+16]
	103 Move X21, [X31+24]
	104 Move X2, [X8]
	105 Move X30, [X31+48]
	106 Move X23, [X31+56]
	107 Call UnityEvent`1<Int32>.Invoke, X0, X1
	108 Return 
	109 Move X20, [X31+32]
	110 Move X19, [X31+40]
	111 Move X22, [X31+16]
	112 Move X21, [X31+24]
	113 Move X30, [X31+48]
	114 Move X23, [X31+56]
	115 Return 
	116 Call 0x1C17F20

Method: System.Boolean get_IsExpanded()

Disassembly:
	0x03ADFBF4 MOV X1, X0
	0x03ADFBF8 MOV X0, X22
	0x03ADFBFC MOV X2, X31
	0x03ADFC00 BL 0x3C40F48
	0x03ADFC04 TBNZ X0, 0x0, 0x3ADF880
	0x03ADFC08 STRB W31, [X19 + 0x170]
	0x03ADFC0C LDR X0, [X25]
	0x03ADFC10 LDR X22, [X19 + 0x100]
	0x03ADFC14 LDR W8, [X0 + 0xE0]
	0x03ADFC18 CBNZ W8, 0x3ADFC20
	0x03ADFC1C BL 0x1C16DFC
	0x03ADFC20 ADRP X8, 0x679000
	0x03ADFC24 LDR X8, [X8 + 0xB10]
	0x03ADFC28 B 0x3ADF870
	0x03ADFC2C STRB W31, [X19 + 0x170]
	0x03ADFC30 LDR X0, [X25]
	0x03ADFC34 LDR X22, [X19 + 0x100]
	0x03ADFC38 LDR W8, [X0 + 0xE0]
	0x03ADFC3C CBNZ W8, 0x3ADFC44
	0x03ADFC40 BL 0x1C16DFC
	0x03ADFC44 ADRP X8, 0x679000
	0x03ADFC48 LDR X8, [X8 + 0xB00]
	0x03ADFC4C B 0x3ADF870
	0x03ADFC50 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x904000
	006 Move X20, 0x615000
	007 Move W8, [X21+1390]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x615000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1390], W8
	019 Move X0, [X20]
	020 Move X19, [X19+336]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X2, X31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call Object.op_Inequality, X0, X1
	033 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03ADFC54 BL 0x1C16F28
	0x03ADFC58 BL 0x1C171E0
	0x03ADFC5C B 0x3ADFC60
	0x03ADFC60 SUB X31, X31, 0x160
	0x03ADFC64 STP D15, D14, [X31 + 0xC0]
	0x03ADFC68 STP D13, D12, [X31 + 0xD0]
	0x03ADFC6C STP D11, D10, [X31 + 0xE0]
	0x03ADFC70 STP D9, D8, [X31 + 0xF0]
	0x03ADFC74 STP X29, X30, [X31 + 0x100]
	0x03ADFC78 STP X28, X27, [X31 + 0x110]
	0x03ADFC7C STP X26, X25, [X31 + 0x120]
	0x03ADFC80 STP X24, X23, [X31 + 0x130]
	0x03ADFC84 STP X22, X21, [X31 + 0x140]
	0x03ADFC88 STP X20, X19, [X31 + 0x150]
	0x03ADFC8C MRS X25, 0xC000
	0x03ADFC90 LDR X8, [X25 + 0x28]
	0x03ADFC94 ADRP X20, 0x903000
	0x03ADFC98 MOV X19, X0
	0x03ADFC9C STR X8, [X31 + 0xB8]
	0x03ADFCA0 LDRB W8, [X20 + 0x579]
	0x03ADFCA4 TBNZ X8, 0x0, 0x3ADFDB8
	0x03ADFCA8 ADRP X0, 0x66A000
	0x03ADFCAC LDR X0, [X0 + 0x560]
	0x03ADFCB0 BL 0x1C16CF4
	0x03ADFCB4 ADRP X0, 0x679000
	0x03ADFCB8 LDR X0, [X0 + 0xB28]
	0x03ADFCBC BL 0x1C16CF4
	0x03ADFCC0 ADRP X0, 0x679000
	0x03ADFCC4 LDR X0, [X0 + 0x768]
	0x03ADFCC8 BL 0x1C16CF4
	0x03ADFCCC ADRP X0, 0x679000
	0x03ADFCD0 LDR X0, [X0 + 0xA90]
	0x03ADFCD4 BL 0x1C16CF4
	0x03ADFCD8 ADRP X0, 0x679000
	0x03ADFCDC LDR X0, [X0 + 0xA98]
	0x03ADFCE0 BL 0x1C16CF4
	0x03ADFCE4 ADRP X0, 0x679000
	0x03ADFCE8 LDR X0, [X0 + 0xA18]
	0x03ADFCEC BL 0x1C16CF4
	0x03ADFCF0 ADRP X0, 0x679000
	0x03ADFCF4 LDR X0, [X0 + 0x770]
	0x03ADFCF8 BL 0x1C16CF4
	0x03ADFCFC ADRP X0, 0x679000
	0x03ADFD00 LDR X0, [X0 + 0x778]
	0x03ADFD04 BL 0x1C16CF4
	0x03ADFD08 ADRP X0, 0x679000
	0x03ADFD0C LDR X0, [X0 + 0xAA0]
	0x03ADFD10 BL 0x1C16CF4
	0x03ADFD14 ADRP X0, 0x679000
	0x03ADFD18 LDR X0, [X0 + 0xA20]
	0x03ADFD1C BL 0x1C16CF4
	0x03ADFD20 ADRP X0, 0x614000
	0x03ADFD24 LDR X0, [X0 + 0x598]
	0x03ADFD28 BL 0x1C16CF4
	0x03ADFD2C ADRP X0, 0x66A000
	0x03ADFD30 LDR X0, [X0 + 0x6B8]
	0x03ADFD34 BL 0x1C16CF4
	0x03ADFD38 ADRP X0, 0x63B000
	0x03ADFD3C LDR X0, [X0 + 0xC70]
	0x03ADFD40 BL 0x1C16CF4
	0x03ADFD44 ADRP X0, 0x679000
	0x03ADFD48 LDR X0, [X0 + 0x780]
	0x03ADFD4C BL 0x1C16CF4
	0x03ADFD50 ADRP X0, 0x679000
	0x03ADFD54 LDR X0, [X0 + 0x788]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x904000
	010 Move X25, 0x67A000
	011 Move X24, 0x67A000
	012 Move X23, 0x67A000
	013 Move X22, 0x67A000
	014 Move X21, 0x67A000
	015 Move W8, [X20+1391]
	016 Move X25, [X25+2616]
	017 Move X24, [X24+2624]
	018 Move X23, [X23+2632]
	019 Move X22, [X22+2640]
	020 Move X21, [X21+2648]
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {43}
	026 Move X0, 0x67A000
	027 Move X0, [X0+2624]
	028 Call 0x1C17CF4
	029 Move X0, 0x67A000
	030 Move X0, [X0+2640]
	031 Call 0x1C17CF4
	032 Move X0, 0x67A000
	033 Move X0, [X0+2632]
	034 Call 0x1C17CF4
	035 Move X0, 0x67A000
	036 Move X0, [X0+2616]
	037 Call 0x1C17CF4
	038 Move X0, 0x67A000
	039 Move X0, [X0+2648]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X20+1391], W8
	043 Move X0, [X25]
	044 Call 0x1C17F10
	045 Move X20, X0
	046 Call OptionDataList..ctor, X0
	047 Move [X19+312], X20
	048 Move X0, [X24]
	049 Call 0x1C17F10
	050 Move X20, X0
	051 Call DropdownEvent..ctor, X0
	052 Move W8, 0x999A
	053 NotImplemented "Instruction MOVK not yet implemented."
	054 Move [X19+320], X20
	055 Move [X19+328], W8
	056 Move X0, [X23]
	057 Call 0x1C17F10
	058 Move X1, [X22]
	059 Move X20, X0
	060 Call List`1<Object>..ctor, X0
	061 Move [X19+352], X20
	062 Move X0, [X21]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X0, X19
	068 Move X20, [X31+48]
	069 Move X19, [X31+56]
	070 Move X22, [X31+32]
	071 Move X21, [X31+40]
	072 Move X24, [X31+16]
	073 Move X23, [X31+24]
	074 Move X1, X31
	075 Move X30, [X31+64]
	076 Move X25, [X31+72]
	077 Call Selectable..ctor, X0
	078 Return 

Method: System.Void Awake()

Disassembly:
	0x03ADFE20 BL 0x1C16DFC
	0x03ADFE24 MOV X0, X20
	0x03ADFE28 MOV X1, X31
	0x03ADFE2C MOV X2, X31
	0x03ADFE30 BL 0x3C354F8
	0x03ADFE34 TBNZ X0, 0x0, 0x3AE07E0
	0x03ADFE38 ADRP X20, 0x679000
	0x03ADFE3C LDR X20, [X20 + 0x760]
	0x03ADFE40 LDR X0, [X20]
	0x03ADFE44 LDR W8, [X0 + 0xE0]
	0x03ADFE48 CBNZ W8, 0x3ADFE50
	0x03ADFE4C BL 0x1C16DFC
	0x03ADFE50 ADRP X8, 0x679000
	0x03ADFE54 LDR X8, [X8 + 0x780]
	0x03ADFE58 LDR X0, [X8]
	0x03ADFE5C BL 0x266FF3C
	0x03ADFE60 MOV X21, X0
	0x03ADFE64 MOV X0, X19
	0x03ADFE68 MOV X1, X31
	0x03ADFE6C BL 0x3C32ECC
	0x03ADFE70 CBZ X0, 0x3AE076C
	0x03ADFE74 ADRP X8, 0x679000
	0x03ADFE78 LDR X8, [X8 + 0x768]
	0x03ADFE7C MOV W1, W31
	0x03ADFE80 MOV X2, X21
	0x03ADFE84 LDR X3, [X8]
	0x03ADFE88 BL 0x21E64C8
	0x03ADFE8C CBZ X21, 0x3AE076C
	0x03ADFE90 LDR W8, [X21 + 0x18]
	0x03ADFE94 CBZ W8, 0x3AE07E0
	0x03ADFE98 ADRP X24, 0x679000
	0x03ADFE9C LDR X24, [X24 + 0x778]
	0x03ADFEA0 SUB W1, W8, 0x1
	0x03ADFEA4 MOV X0, X21
	0x03ADFEA8 LDR X2, [X24]
	0x03ADFEAC BL 0x301BCCC
	0x03ADFEB0 LDR W8, [X21 + 0x18]
	0x03ADFEB4 MOV X26, X0
	0x03ADFEB8 CMP W8, 0x1
	0x03ADFEBC B.LT 0x3ADFF0C
	0x03ADFEC0 MOV W22, W31
	0x03ADFEC4 LDR X2, [X24]
	0x03ADFEC8 MOV X0, X21
	0x03ADFECC MOV W1, W22
	0x03ADFED0 BL 0x301BCCC
	0x03ADFED4 CBZ X0, 0x3AE076C
	0x03ADFED8 MOV X1, X31
	0x03ADFEDC BL 0x3E2453C
	0x03ADFEE0 TBNZ X0, 0x0, 0x3ADFEF8
	0x03ADFEE4 LDR W8, [X21 + 0x18]
	0x03ADFEE8 ADD W22, W22, 0x1
	0x03ADFEEC CMP W22, W8
	0x03ADFEF0 B.LT 0x3ADFEC4
	0x03ADFEF4 B 0x3ADFF0C
	0x03ADFEF8 LDR X2, [X24]
	0x03ADFEFC MOV X0, X21
	0x03ADFF00 MOV W1, W22
	0x03ADFF04 BL 0x301BCCC
	0x03ADFF08 MOV X26, X0
	0x03ADFF0C LDR X0, [X20]
	0x03ADFF10 LDR W8, [X0 + 0xE0]
	0x03ADFF14 CBNZ W8, 0x3ADFF1C
	0x03ADFF18 BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x904000
	007 Move X22, 0x615000
	008 Move W8, [X20+1392]
	009 Move X22, [X22+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x615000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1392], W8
	020 Move X0, [X22]
	021 Move X20, [X19+272]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Call Object.op_Implicit, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {50}
	033 Move X20, [X19+272]
	034 Compare X20, 0
	035 JumpIfEqual {85}
	036 Move X0, [X22]
	037 Move X21, [X20+216]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X21
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Inequality, X0, X1
	046 And W1, W0, 1
	047 Move X0, X20
	048 Move X2, X31
	049 Call Behaviour.set_enabled, X0, X1
	050 Move X0, [X22]
	051 Move X20, [X19+256]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move X0, X20
	057 Move X1, X31
	058 Call Object.op_Implicit, X0
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {79}
	063 Move X0, [X19+256]
	064 Compare X0, 0
	065 JumpIfEqual {85}
	066 Move X1, X31
	067 Call Component.get_gameObject, X0
	068 Compare X0, 0
	069 JumpIfEqual {85}
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move W1, W31
	075 Move X2, X31
	076 Move X30, [X31+48]
	077 Call GameObject.SetActive, X0, X1
	078 Return 
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X30, [X31+48]
	084 Return 
	085 Call 0x1C17F20

Method: System.Void Start()

Disassembly:
	0x03ADFF1C ADRP X8, 0x679000
	0x03ADFF20 LDR X8, [X8 + 0x788]
	0x03ADFF24 MOV X0, X21
	0x03ADFF28 LDR X1, [X8]
	0x03ADFF2C BL 0x266FFD4
	0x03ADFF30 LDRB W8, [X19 + 0x170]
	0x03ADFF34 CBNZ W8, 0x3ADFF48
	0x03ADFF38 MOV X0, X19
	0x03ADFF3C BL 0x3ADF5EC
	0x03ADFF40 LDRB W8, [X19 + 0x170]
	0x03ADFF44 CBZ W8, 0x3AE07E0
	0x03ADFF48 LDR X0, [X19 + 0x100]
	0x03ADFF4C CBZ X0, 0x3AE076C
	0x03ADFF50 MOV X1, X31
	0x03ADFF54 BL 0x3C32ECC
	0x03ADFF58 CBZ X0, 0x3AE076C
	0x03ADFF5C MOVZ W1, 0x1
	0x03ADFF60 MOV X2, X31
	0x03ADFF64 BL 0x3C357B4
	0x03ADFF68 LDR X0, [X19 + 0x100]
	0x03ADFF6C CBZ X0, 0x3AE076C
	0x03ADFF70 ADRP X8, 0x66A000
	0x03ADFF74 LDR X8, [X8 + 0x560]
	0x03ADFF78 LDR X1, [X8]
	0x03ADFF7C BL 0x21A3894
	0x03ADFF80 CBZ X26, 0x3AE076C
	0x03ADFF84 MOV X21, X0
	0x03ADFF88 MOV X0, X26
	0x03ADFF8C MOV X1, X31
	0x03ADFF90 BL 0x3E24A24
	0x03ADFF94 CBZ X21, 0x3AE076C
	0x03ADFF98 MOV W1, W0
	0x03ADFF9C MOV X0, X21
	0x03ADFFA0 MOV X2, X31
	0x03ADFFA4 BL 0x3E24A60
	0x03ADFFA8 LDR X0, [X19 + 0x100]
	0x03ADFFAC CBZ X0, 0x3AE076C
	0x03ADFFB0 MOV X1, X31
	0x03ADFFB4 BL 0x3C32ECC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x904000
	007 Move X22, 0x67A000
	008 Move X20, 0x67A000
	009 Move W8, [X21+1393]
	010 Move X22, [X22+2680]
	011 Move X20, [X20+2688]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x67A000
	018 Move X0, [X0+2696]
	019 Call 0x1C17CF4
	020 Move X0, 0x67A000
	021 Move X0, [X0+2688]
	022 Call 0x1C17CF4
	023 Move X0, 0x67A000
	024 Move X0, [X0+2680]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+1393], W8
	028 Move X0, [X22]
	029 Call 0x1C17F10
	030 Move X1, [X20]
	031 Move X20, X0
	032 Call 0x2709BE4, X0
	033 Move [X19+360], X20
	034 Compare X20, 0
	035 JumpIfEqual {48}
	036 Move X0, X19
	037 Move X1, X31
	038 Move [X20+16], X19
	039 Call UIBehaviour.Start, X0
	040 Move X0, X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Call TMP_Dropdown.RefreshShownValue, X0
	047 Return 
	048 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x03ADFFB8 LDR X8, [X19]
	0x03ADFFBC MOV X1, X0
	0x03ADFFC0 MOV X0, X19
	0x03ADFFC4 LDR X9, [X8 + 0x428]
	0x03ADFFC8 LDR X2, [X8 + 0x430]
	0x03ADFFCC BLR X9
	0x03ADFFD0 STR X0, [X19 + 0x150]
	0x03ADFFD4 CBZ X0, 0x3AE076C
	0x03ADFFD8 ADRP X8, 0x679000
	0x03ADFFDC LDR X8, [X8 + 0xB40]
	0x03ADFFE0 MOV X2, X31
	0x03ADFFE4 LDR X1, [X8]
	0x03ADFFE8 BL 0x3C38A84
	0x03ADFFEC LDR X0, [X19 + 0x150]
	0x03ADFFF0 CBZ X0, 0x3AE076C
	0x03ADFFF4 MOVZ W1, 0x1
	0x03ADFFF8 MOV X2, X31
	0x03ADFFFC BL 0x3C357B4
	0x03AE0000 LDR X0, [X19 + 0x150]
	0x03AE0004 CBZ X0, 0x3AE076C
	0x03AE0008 MOV X1, X31
	0x03AE000C BL 0x3C356F8
	0x03AE0010 CBZ X0, 0x3AE0030
	0x03AE0014 ADRP X8, 0x63A000
	0x03AE0018 LDR X8, [X8 + 0xC70]
	0x03AE001C LDR X9, [X0]
	0x03AE0020 LDR X8, [X8]
	0x03AE0024 CMP X9, X8
	0x03AE0028 CSEL X20, X0, X31, EQ
	0x03AE002C B 0x3AE0034
	0x03AE0030 MOV X20, X31
	0x03AE0034 LDR X0, [X19 + 0x100]
	0x03AE0038 CBZ X0, 0x3AE076C
	0x03AE003C MOV X1, X31
	0x03AE0040 BL 0x3C32E90
	0x03AE0044 CBZ X0, 0x3AE076C
	0x03AE0048 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x904000
	006 Move X20, 0x615000
	007 Move W8, [X21+1394]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x615000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1394], W8
	019 Move X0, X19
	020 Call TMP_Dropdown.ImmediateDestroyDropdownList, X0
	021 Move X0, [X20]
	022 Move X20, [X19+344]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Inequality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {41}
	035 Move X8, [X19]
	036 Move X1, [X19+344]
	037 Move X0, X19
	038 Move X9, [X8+1048]
	039 Move X2, [X8+1056]
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move [X19+344], X31
	042 Move X0, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X1, X31
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Call Selectable.OnDisable, X0
	049 Return 

Method: System.Void RefreshShownValue()

Disassembly:
	0x03ADF728 MOV X2, X31
	0x03ADF72C MOV X20, X0
	0x03ADF730 MOVZ W21, 0x1
	0x03ADF734 BL 0x3C357B4
	0x03ADF738 LDR X0, [X19 + 0x100]
	0x03ADF73C CBZ X0, 0x3ADFC50
	0x03ADF740 ADRP X8, 0x679000
	0x03ADF744 LDR X8, [X8 + 0xAD0]
	0x03ADF748 LDR X1, [X8]
	0x03ADF74C BL 0x21A3AF8
	0x03ADF750 STRB W21, [X19 + 0x170]
	0x03ADF754 LDR X8, [X24]
	0x03ADF758 MOV X21, X0
	0x03ADF75C LDR W9, [X8 + 0xE0]
	0x03ADF760 CBNZ W9, 0x3ADF76C
	0x03ADF764 MOV X0, X8
	0x03ADF768 BL 0x1C16DFC
	0x03ADF76C MOV X0, X21
	0x03ADF770 MOV X1, X31
	0x03ADF774 BL 0x3C38948
	0x03ADF778 TBZ X0, 0x0, 0x3ADF7BC
	0x03ADF77C CBZ X21, 0x3ADFC50
	0x03ADF780 MOV X0, X21
	0x03ADF784 MOV X1, X31
	0x03ADF788 BL 0x3C32E90
	0x03ADF78C LDR X8, [X24]
	0x03ADF790 LDR X22, [X19 + 0x100]
	0x03ADF794 MOV X23, X0
	0x03ADF798 LDR W9, [X8 + 0xE0]
	0x03ADF79C CBNZ W9, 0x3ADF7A8
	0x03ADF7A0 MOV X0, X8
	0x03ADF7A4 BL 0x1C16DFC
	0x03ADF7A8 MOV X0, X23
	0x03ADF7AC MOV X1, X22
	0x03ADF7B0 MOV X2, X31
	0x03ADF7B4 BL 0x3C3883C
	0x03ADF7B8 TBZ X0, 0x0, 0x3ADF81C
	0x03ADF7BC STRB W31, [X19 + 0x170]
	0x03ADF7C0 LDR X0, [X25]
	0x03ADF7C4 LDR X22, [X19 + 0x100]
	0x03ADF7C8 LDR W8, [X0 + 0xE0]
	0x03ADF7CC CBNZ W8, 0x3ADF7D4
	0x03ADF7D0 BL 0x1C16DFC
	0x03ADF7D4 ADRP X8, 0x679000
	0x03ADF7D8 LDR X8, [X8 + 0xB08]
	0x03ADF7DC B 0x3ADF870
	0x03ADF7E0 LDR X0, [X25]
	0x03ADF7E4 ADRP X20, 0x679000
	0x03ADF7E8 LDR W8, [X0 + 0xE0]
	0x03ADF7EC LDR X20, [X20 + 0xB20]
	0x03ADF7F0 CBNZ W8, 0x3ADF7F8
	0x03ADF7F4 BL 0x1C16DFC
	0x03ADF7F8 LDR X0, [X20]
	0x03ADF7FC MOV X1, X19
	0x03ADF800 LDP X20, X19, [X31 + 0x40]
	0x03ADF804 LDP X22, X21, [X31 + 0x30]
	0x03ADF808 LDP X24, X23, [X31 + 0x20]
	0x03ADF80C LDP X26, X25, [X31 + 0x10]
	0x03ADF810 MOV X2, X31
	0x03ADF814 LDR X30, [X31], #0x50
	0x03ADF818 B 0x3C065A4
	0x03ADF81C MOV X0, X21
	0x03ADF820 MOV X1, X31
	0x03ADF824 BL 0x3C32E90
	0x03ADF828 CBZ X0, 0x3ADFC50
	0x03ADF82C MOV X1, X31
	0x03ADF830 BL 0x3C3F49C
	0x03ADF834 CBZ X0, 0x3ADF850
	0x03ADF838 ADRP X8, 0x63B000
	0x03ADF83C LDR X8, [X8 + 0xC70]
	0x03ADF840 LDR X9, [X0]
	0x03ADF844 LDR X8, [X8]
	0x03ADF848 CMP X9, X8
	0x03ADF84C B.EQ 0x3ADFB48
	0x03ADF850 STRB W31, [X19 + 0x170]
	0x03ADF854 LDR X0, [X25]
	0x03ADF858 LDR X22, [X19 + 0x100]
	0x03ADF85C LDR W8, [X0 + 0xE0]
	0x03ADF860 CBNZ W8, 0x3ADF868
	0x03ADF864 BL 0x1C16DFC
	0x03ADF868 ADRP X8, 0x679000
	0x03ADF86C LDR X8, [X8 + 0xB18]
	0x03ADF870 LDR X0, [X8]
	0x03ADF874 MOV X1, X22
	0x03ADF878 MOV X2, X31
	0x03ADF87C BL 0x3C065A4
	0x03ADF880 LDRB W8, [X19 + 0x170]
	0x03ADF884 CBZ W8, 0x3ADFAAC
	0x03ADF888 CBZ X21, 0x3ADFC50
	0x03ADF88C MOV X0, X21
	0x03ADF890 MOV X1, X31
	0x03ADF894 BL 0x3C32ECC
	0x03ADF898 CBZ X0, 0x3ADFC50
	0x03ADF89C ADRP X8, 0x679000
	0x03ADF8A0 LDR X8, [X8 + 0xAE0]
	0x03ADF8A4 LDR X1, [X8]
	0x03ADF8A8 BL 0x21E51FC
	0x03ADF8AC CBZ X0, 0x3ADFC50
	0x03ADF8B0 LDR X8, [X19 + 0x120]
	0x03ADF8B4 MOV X22, X0
	0x03ADF8B8 MOV X1, X31
	0x03ADF8BC STR X8, [X0 + 0x20]
	0x03ADF8C0 LDR X8, [X19 + 0x128]
	0x03ADF8C4 STR X21, [X0 + 0x38]
	0x03ADF8C8 STR X8, [X0 + 0x28]
	0x03ADF8CC MOV X0, X21
	0x03ADF8D0 BL 0x3C32E90
	0x03ADF8D4 CBZ X0, 0x3ADF8F0
	0x03ADF8D8 ADRP X8, 0x63B000
	0x03ADF8DC LDR X8, [X8 + 0xC70]
	0x03ADF8E0 LDR X1, [X8]
	0x03ADF8E4 LDR X8, [X0]
	0x03ADF8E8 CMP X8, X1
	0x03ADF8EC B.NE 0x3ADFC58
	0x03ADF8F0 STR X0, [X22 + 0x30]
	0x03ADF8F4 LDR X0, [X19 + 0x100]
	0x03ADF8F8 CBZ X0, 0x3ADFC50
	0x03ADF8FC MOV X1, X31
	0x03ADF900 BL 0x3C3F49C
	0x03ADF904 ADRP X23, 0x66A000
	0x03ADF908 LDR X23, [X23 + 0x560]
	0x03ADF90C MOV X22, X0
	0x03ADF910 MOV X21, X31
	0x03ADF914 LDR X0, [X24]
	0x03ADF918 LDR W8, [X0 + 0xE0]
	0x03ADF91C CBNZ W8, 0x3ADF924
	0x03ADF920 BL 0x1C16DFC
	0x03ADF924 MOV X0, X22
	0x03ADF928 MOV X1, X31
	0x03ADF92C MOV X2, X31
	0x03ADF930 BL 0x3C354F8
	0x03ADF934 TBZ X0, 0x0, 0x3ADF988
	0x03ADF938 CBZ X22, 0x3ADFC50
	0x03ADF93C LDR X1, [X23]
	0x03ADF940 MOV X0, X22
	0x03ADF944 BL 0x21A3894
	0x03ADF948 LDR X8, [X24]
	0x03ADF94C MOV X21, X0
	0x03ADF950 LDR W9, [X8 + 0xE0]
	0x03ADF954 CBNZ W9, 0x3ADF960
	0x03ADF958 MOV X0, X8
	0x03ADF95C BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x904000
	007 Move X20, 0x67A000
	008 Move W8, [X21+1395]
	009 Move X20, [X20+2576]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0x67A000
	016 Move X0, [X0+2584]
	017 Call 0x1C17CF4
	018 Move X0, 0x67A000
	019 Move X0, [X0+2592]
	020 Call 0x1C17CF4
	021 Move X0, 0x615000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move X0, 0x67A000
	025 Move X0, [X0+2576]
	026 Call 0x1C17CF4
	027 Move X0, 0x615000
	028 Move X0, [X0+2440]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+1395], W8
	032 Move X0, [X20]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X20]
	038 Move X8, [X19+312]
	039 Compare X8, 0
	040 JumpIfEqual {181}
	041 Move X8, [X8+16]
	042 Compare X8, 0
	043 JumpIfEqual {181}
	044 Move X10, [X0+184]
	045 Move W9, [X8+24]
	046 Move X22, 0x615000
	047 Move X20, [X10]
	048 Move X22, [X22+1432]
	049 Subtract W10, W9, 1
	050 Move W11, [X19+304]
	051 Move TEMP, X11
	052 And TEMP, TEMP, -2147483648
	053 Compare TEMP, -2147483648
	054 JumpIfEqual {63}
	055 Move X12, 0x67A000
	056 Move X12, [X12+2592]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 NotImplemented "Instruction CSEL not yet implemented."
	059 Move X0, X8
	060 Move X2, [X12]
	061 Call List`1<Object>.get_Item, X0, X1
	062 Move X20, X0
	063 Move X0, [X22]
	064 Move X21, [X19+264]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X0, X21
	070 Move X1, X31
	071 Call Object.op_Implicit, X0
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {95}
	076 Compare X20, 0
	077 JumpIfEqual {85}
	078 Move X1, [X20+16]
	079 Compare X1, 0
	080 JumpIfEqual {85}
	081 Move X0, [X19+264]
	082 Compare X0, 0
	083 JumpIfEqual {181}
	084 Move X8, [X0]
	085 Move X0, [X19+264]
	086 Compare X0, 0
	087 JumpIfEqual {181}
	088 Move X9, 0x615000
	089 Move X8, [X0]
	090 Move X9, [X9+2440]
	091 Move X1, [X9]
	092 Move X9, [X8+1368]
	093 Move X2, [X8+1376]
	094 NotImplemented "Instruction BLR not yet implemented."
	095 Move X0, [X22]
	096 Move X21, [X19+272]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {101}
	100 Call 0x1C17DFC
	101 Move X0, X21
	102 Move X1, X31
	103 Call Object.op_Implicit, X0
	104 Move TEMP, X0
	105 And TEMP, TEMP, 1
	106 Compare TEMP, 1
	107 JumpIfNotEqual {136}
	108 Move X0, [X19+272]
	109 Compare X20, 0
	110 JumpIfEqual {114}
	111 Compare X0, 0
	112 JumpIfEqual {181}
	113 Move X1, [X20+24]
	114 Compare X0, 0
	115 JumpIfEqual {181}
	116 Move X1, X31
	117 Move X2, X31
	118 Call Image.set_sprite, X0, X1
	119 Move X20, [X19+272]
	120 Compare X20, 0
	121 JumpIfEqual {181}
	122 Move X0, [X22]
	123 Move X21, [X20+216]
	124 Move W8, [X0+224]
	125 Compare W8, 0
	126 JumpIfNotEqual {128}
	127 Call 0x1C17DFC
	128 Move X0, X21
	129 Move X1, X31
	130 Move X2, X31
	131 Call Object.op_Inequality, X0, X1
	132 And W1, W0, 1
	133 Move X0, X20
	134 Move X2, X31
	135 Call Behaviour.set_enabled, X0, X1
	136 Move X0, [X22]
	137 Move X20, [X19+280]
	138 Move W8, [X0+224]
	139 Compare W8, 0
	140 JumpIfNotEqual {142}
	141 Call 0x1C17DFC
	142 Move X0, X20
	143 Move X1, X31
	144 Call Object.op_Implicit, X0
	145 Move TEMP, X0
	146 And TEMP, TEMP, 1
	147 Compare TEMP, 1
	148 JumpIfNotEqual {172}
	149 Move X8, [X19+312]
	150 Compare X8, 0
	151 JumpIfEqual {181}
	152 Move X8, [X8+16]
	153 Compare X8, 0
	154 JumpIfEqual {181}
	155 Move W8, [X8+24]
	156 Move X0, [X19+280]
	157 Compare W8, 0
	158 JumpIfEqual {178}
	159 Move W8, [X19+304]
	160 Add W31, W8, 1
	161 NotImplemented "Instruction CSET not yet implemented."
	162 Compare X0, 0
	163 JumpIfEqual {181}
	164 Move X20, [X31+32]
	165 Move X19, [X31+40]
	166 Move X22, [X31+16]
	167 Move X21, [X31+24]
	168 Move X2, X31
	169 Move X30, [X31+48]
	170 Call Behaviour.set_enabled, X0, X1
	171 Return 
	172 Move X20, [X31+32]
	173 Move X19, [X31+40]
	174 Move X22, [X31+16]
	175 Move X21, [X31+24]
	176 Move X30, [X31+48]
	177 Return 
	178 Move W1, 1
	179 Compare X0, 0
	180 JumpIfNotEqual {164}
	181 Call 0x1C17F20

Method: System.Void AddOptions(System.Collections.Generic.List`1<TMPro.TMP_Dropdown/OptionData> options)

Disassembly:
	0x03AE01E4 MOV X1, X31
	0x03AE01E8 MOV X26, X0
	0x03AE01EC BL 0x33BDD8C
	0x03AE01F0 CBZ X26, 0x3AE076C
	0x03AE01F4 STR X19, [X26 + 0x18]
	0x03AE01F8 LDR X8, [X19 + 0x138]
	0x03AE01FC CBZ X8, 0x3AE076C
	0x03AE0200 LDR X0, [X8 + 0x10]
	0x03AE0204 CBZ X0, 0x3AE076C
	0x03AE0208 LDR X2, [X22]
	0x03AE020C MOV W1, W24
	0x03AE0210 BL 0x301BCCC
	0x03AE0214 LDR X4, [X19 + 0x160]
	0x03AE0218 MOV X1, X0
	0x03AE021C MOV X0, X19
	0x03AE0220 MOV W2, W31
	0x03AE0224 MOV X3, X21
	0x03AE0228 BL 0x3AE094C
	0x03AE022C STR X0, [X26 + 0x10]
	0x03AE0230 MOV X27, X0
	0x03AE0234 LDR X0, [X23]
	0x03AE0238 LDR W8, [X0 + 0xE0]
	0x03AE023C CBNZ W8, 0x3AE0244
	0x03AE0240 BL 0x1C16DFC
	0x03AE0244 MOV X0, X27
	0x03AE0248 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x903000
	006 Move W8, [X21+1396]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x679000
	014 Move X0, [X0+2736]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1396], W8
	018 Move X8, [X19+312]
	019 Compare X8, 0
	020 JumpIfEqual {36}
	021 Move X0, [X8+16]
	022 Compare X0, 0
	023 JumpIfEqual {36}
	024 Move X8, 0x679000
	025 Move X8, [X8+2736]
	026 Move X1, X20
	027 Move X2, [X8]
	028 Call List`1<Object>.AddRange, X0, X1
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Call TMP_Dropdown.RefreshShownValue, X0
	035 Return 
	036 Call 0x1C17F20

Method: System.Void AddOptions(System.Collections.Generic.List`1<System.String> options)

Disassembly:
	0x03AE024C MOV X2, X31
	0x03AE0250 BL 0x3C3883C
	0x03AE0254 TBNZ X0, 0x0, 0x3AE03C4
	0x03AE0258 LDR X8, [X26 + 0x10]
	0x03AE025C CBZ X8, 0x3AE076C
	0x03AE0260 LDR X0, [X8 + 0x38]
	0x03AE0264 CBZ X0, 0x3AE076C
	0x03AE0268 LDR W8, [X19 + 0x130]
	0x03AE026C MOV X2, X31
	0x03AE0270 CMP W24, W8
	0x03AE0274 CSET W1, EQ
	0x03AE0278 BL 0x3E47488
	0x03AE027C LDR X8, [X26 + 0x10]
	0x03AE0280 CBZ X8, 0x3AE076C
	0x03AE0284 LDR X8, [X8 + 0x38]
	0x03AE0288 CBZ X8, 0x3AE076C
	0x03AE028C LDR X27, [X8 + 0x118]
	0x03AE0290 ADRP X8, 0x673000
	0x03AE0294 LDR X8, [X8 + 0xA30]
	0x03AE0298 LDR X0, [X8]
	0x03AE029C BL 0x1C16F10
	0x03AE02A0 ADRP X8, 0x678000
	0x03AE02A4 LDR X8, [X8 + 0xB30]
	0x03AE02A8 MOV X1, X26
	0x03AE02AC MOV X3, X31
	0x03AE02B0 MOV X28, X0
	0x03AE02B4 LDR X2, [X8]
	0x03AE02B8 BL 0x27259E8
	0x03AE02BC CBZ X27, 0x3AE076C
	0x03AE02C0 ADRP X8, 0x673000
	0x03AE02C4 LDR X8, [X8 + 0xA38]
	0x03AE02C8 MOV X0, X27
	0x03AE02CC MOV X1, X28
	0x03AE02D0 LDR X2, [X8]
	0x03AE02D4 BL 0x27288B4
	0x03AE02D8 LDR X8, [X26 + 0x10]
	0x03AE02DC CBZ X8, 0x3AE076C
	0x03AE02E0 LDR X0, [X8 + 0x38]
	0x03AE02E4 CBZ X0, 0x3AE076C
	0x03AE02E8 LDRB W8, [X0 + 0x120]
	0x03AE02EC CBZ W8, 0x3AE0300
	0x03AE02F0 LDR X8, [X0]
	0x03AE02F4 LDR X9, [X8 + 0x398]
	0x03AE02F8 LDR X1, [X8 + 0x3A0]
	0x03AE02FC BLR X9
	0x03AE0300 LDR X0, [X23]
	0x03AE0304 LDR W8, [X0 + 0xE0]
	0x03AE0308 CBNZ W8, 0x3AE0310
	0x03AE030C BL 0x1C16DFC
	0x03AE0310 MOV X0, X25
	0x03AE0314 MOV X1, X31
	0x03AE0318 MOV X2, X31
	0x03AE031C BL 0x3C354F8
	0x03AE0320 TBZ X0, 0x0, 0x3AE03B8
	0x03AE0324 CBZ X25, 0x3AE076C
	0x03AE0328 LDR W8, [X25 + 0x34]
	0x03AE032C LDUR X9, [X25 + 0x2C]
	0x03AE0330 STR W8, [X31 + 0xB0]
	0x03AE0334 STR X9, [X31 + 0xA8]
	0x03AE0338 LDR X8, [X26 + 0x10]
	0x03AE033C CBZ X8, 0x3AE076C
	0x03AE0340 LDR X8, [X8 + 0x38]
	0x03AE0344 CBZ X8, 0x3AE076C
	0x03AE0348 LDR W10, [X31 + 0xB0]
	0x03AE034C LDR X9, [X25 + 0x40]
	0x03AE0350 LDR X11, [X31 + 0xA8]
	0x03AE0354 LDR W21, [X8 + 0x2C]
	0x03AE0358 LDR X28, [X8 + 0x38]
	0x03AE035C LDR X27, [X8 + 0x48]
	0x03AE0360 STR W10, [X29 + 0x8]
	0x03AE0364 MOVZ W10, 0x4
	0x03AE0368 ADD X1, X31, 0x80
	0x03AE036C MOV X0, X25
	0x03AE0370 MOV X2, X31
	0x03AE0374 STR X11, [X29]
	0x03AE0378 STR W10, [X31 + 0x80]
	0x03AE037C STP X8, X9, [X31 + 0x90]
	0x03AE0380 STR X8, [X31 + 0xA0]
	0x03AE0384 BL 0x3E40B98
	0x03AE0388 LDR X8, [X26 + 0x10]
	0x03AE038C CBZ X8, 0x3AE076C
	0x03AE0390 LDR X0, [X8 + 0x38]
	0x03AE0394 CBZ X0, 0x3AE076C
	0x03AE0398 MOVZ W8, 0x4

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x903000
	012 Move W8, [X21+1397]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {33}
	019 Move X0, 0x679000
	020 Move X0, [X0+2456]
	021 Call 0x1C17CF4
	022 Move X0, 0x615000
	023 Move X0, [X0+456]
	024 Call 0x1C17CF4
	025 Move X0, 0x63C000
	026 Move X0, [X0+2904]
	027 Call 0x1C17CF4
	028 Move X0, 0x679000
	029 Move X0, [X0+2464]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+1397], W8
	033 Compare X19, 0
	034 JumpIfEqual {98}
	035 Move W8, [X19+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X25, 0x63C000
	038 Move X26, 0x679000
	039 Move X27, 0x679000
	040 Move X25, [X25+2904]
	041 Move X26, [X26+2464]
	042 Move X27, [X27+2456]
	043 Move W21, W31
	044 Move X8, [X20+312]
	045 Compare X8, 0
	046 JumpIfEqual {98}
	047 Move X2, [X25]
	048 Move X22, [X8+16]
	049 Move X0, X19
	050 Move W1, W21
	051 Call List`1<Object>.get_Item, X0, X1
	052 Move X8, [X26]
	053 Move X24, X0
	054 Move X0, X8
	055 Call 0x1C17F10
	056 Move X1, X31
	057 Move X23, X0
	058 Call Object..ctor, X0
	059 Move [X23+16], X24
	060 Compare X22, 0
	061 JumpIfEqual {98}
	062 Move W10, [X22+28]
	063 Move X8, [X22+16]
	064 Move X9, [X27]
	065 Add W10, W10, 1
	066 Move [X22+28], W10
	067 Compare X8, 0
	068 JumpIfEqual {98}
	069 NotImplemented "Instruction LDRSW not yet implemented."
	070 Move W11, [X8+24]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Add W9, W10, 1
	073 Add X8, X8, X10
	074 Move [X22+24], W9
	075 Move [X8+32], X23
	076 Move X8, [X9+32]
	077 Move X0, X22
	078 Move X1, X23
	079 Move X8, [X8+192]
	080 Move X2, [X8+112]
	081 Call List`1<Object>.AddWithResize, X0, X1
	082 Move W8, [X19+24]
	083 Add W21, W21, 1
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X0, X20
	086 Move X20, [X31+64]
	087 Move X19, [X31+72]
	088 Move X22, [X31+48]
	089 Move X21, [X31+56]
	090 Move X24, [X31+32]
	091 Move X23, [X31+40]
	092 Move X26, [X31+16]
	093 Move X25, [X31+24]
	094 Move X30, [X31+80]
	095 Move X27, [X31+88]
	096 Call TMP_Dropdown.RefreshShownValue, X0
	097 Return 
	098 Call 0x1C17F20

Method: System.Void AddOptions(System.Collections.Generic.List`1<UnityEngine.Sprite> options)

Disassembly:
	0x03AE03C4 LDR X8, [X19 + 0x138]
	0x03AE03C8 ADD W24, W24, 0x1
	0x03AE03CC CBNZ X8, 0x3AE01C8
	0x03AE03D0 B 0x3AE076C
	0x03AE03D4 LDR X20, [X31 + 0x50]
	0x03AE03D8 MOV X1, X31
	0x03AE03DC MOV X0, X20
	0x03AE03E0 BL 0x3C3E90C
	0x03AE03E4 LDR X8, [X19 + 0x160]
	0x03AE03E8 CBZ X8, 0x3AE076C
	0x03AE03EC LDR V1, [X8 + 0x18]
	0x03AE03F0 MOV X0, X20
	0x03AE03F4 MOV X1, X31
	0x03AE03F8 SCVTF S1, S1
	0x03AE03FC FMUL S1, S14, S1
	0x03AE0400 FADD S1, S10, S1
	0x03AE0404 FSUB S1, S1, S9
	0x03AE0408 BL 0x3C3E99C
	0x03AE040C LDR X21, [X31 + 0x30]
	0x03AE0410 MOV X1, X31
	0x03AE0414 MOV X0, X21
	0x03AE0418 BL 0x3C3E51C
	0x03AE041C MOV X0, X20
	0x03AE0420 MOV X1, X31
	0x03AE0424 MOV V9.16B, V3.16B
	0x03AE0428 BL 0x3C3E51C
	0x03AE042C LDR X20, [X31 + 0x20]
	0x03AE0430 FSUB S8, S9, S3
	0x03AE0434 FCMP S8, 0x0
	0x03AE0438 B.LE 0x3AE046C
	0x03AE043C MOV X0, X21
	0x03AE0440 MOV X1, X31
	0x03AE0444 BL 0x3C3E90C
	0x03AE0448 MOV X0, X21
	0x03AE044C MOV X1, X31
	0x03AE0450 MOV V9.16B, V0.16B
	0x03AE0454 BL 0x3C3E90C
	0x03AE0458 FSUB S1, S1, S8
	0x03AE045C MOV X0, X21
	0x03AE0460 MOV V0.16B, V9.16B
	0x03AE0464 MOV X1, X31
	0x03AE0468 BL 0x3C3E99C
	0x03AE046C ADRP X8, 0x615000
	0x03AE0470 LDR X8, [X8 + 0x9B0]
	0x03AE0474 MOVZ W1, 0x4
	0x03AE0478 LDR X0, [X8]
	0x03AE047C BL 0x1C16D6C
	0x03AE0480 MOV X23, X0
	0x03AE0484 MOV X0, X21
	0x03AE0488 MOV X1, X23
	0x03AE048C MOV X2, X31
	0x03AE0490 BL 0x3C3F058
	0x03AE0494 MOV X0, X20
	0x03AE0498 MOV X1, X31
	0x03AE049C BL 0x3C32E90
	0x03AE04A0 CBZ X0, 0x3AE076C
	0x03AE04A4 ADRP X8, 0x63A000
	0x03AE04A8 LDR X8, [X8 + 0xC70]
	0x03AE04AC LDR X9, [X0]
	0x03AE04B0 MOV X24, X0
	0x03AE04B4 LDR X8, [X8]
	0x03AE04B8 CMP X9, X8
	0x03AE04BC B.NE 0x3AE076C
	0x03AE04C0 MOV X0, X24
	0x03AE04C4 MOV X1, X31
	0x03AE04C8 STP S10, S14, [X31 + 0x10]
	0x03AE04CC BL 0x3C3E51C
	0x03AE04D0 CBZ X23, 0x3AE076C
	0x03AE04D4 FADD S4, S2, S0
	0x03AE04D8 FADD S2, S3, S1
	0x03AE04DC ADD X8, X23, 0x28
	0x03AE04E0 STP S2, S4, [X31 + 0x4C]
	0x03AE04E4 STR X8, [X31 + 0x40]
	0x03AE04E8 ADRP X26, 0x61A000
	0x03AE04EC ADRP X8, 0xFFFFFFFFFD00A000
	0x03AE04F0 LDR X26, [X26 + 0x4B8]
	0x03AE04F4 LDR V14, [X8 + 0x240]
	0x03AE04F8 MOV W25, W31
	0x03AE04FC MOVZ W22, 0x1
	0x03AE0500 ADRP X27, 0x8F9000
	0x03AE0504 MOVZ W21, 0x1
	0x03AE0508 STP S1, S0, [X31 + 0x38]
	0x03AE050C ANDS W31, W21, 0x1
	0x03AE0510 FCSEL S13, S0, S1, NE

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x903000
	012 Move W8, [X21+1398]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {33}
	019 Move X0, 0x679000
	020 Move X0, [X0+2456]
	021 Call 0x1C17CF4
	022 Move X0, 0x679000
	023 Move X0, [X0+2744]
	024 Call 0x1C17CF4
	025 Move X0, 0x679000
	026 Move X0, [X0+2752]
	027 Call 0x1C17CF4
	028 Move X0, 0x679000
	029 Move X0, [X0+2464]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+1398], W8
	033 Compare X19, 0
	034 JumpIfEqual {98}
	035 Move W8, [X19+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X25, 0x679000
	038 Move X26, 0x679000
	039 Move X27, 0x679000
	040 Move X25, [X25+2752]
	041 Move X26, [X26+2464]
	042 Move X27, [X27+2456]
	043 Move W21, W31
	044 Move X8, [X20+312]
	045 Compare X8, 0
	046 JumpIfEqual {98}
	047 Move X2, [X25]
	048 Move X22, [X8+16]
	049 Move X0, X19
	050 Move W1, W21
	051 Call List`1<Object>.get_Item, X0, X1
	052 Move X8, [X26]
	053 Move X24, X0
	054 Move X0, X8
	055 Call 0x1C17F10
	056 Move X1, X31
	057 Move X23, X0
	058 Call Object..ctor, X0
	059 Move [X23+24], X24
	060 Compare X22, 0
	061 JumpIfEqual {98}
	062 Move W10, [X22+28]
	063 Move X8, [X22+16]
	064 Move X9, [X27]
	065 Add W10, W10, 1
	066 Move [X22+28], W10
	067 Compare X8, 0
	068 JumpIfEqual {98}
	069 NotImplemented "Instruction LDRSW not yet implemented."
	070 Move W11, [X8+24]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Add W9, W10, 1
	073 Add X8, X8, X10
	074 Move [X22+24], W9
	075 Move [X8+32], X23
	076 Move X8, [X9+32]
	077 Move X0, X22
	078 Move X1, X23
	079 Move X8, [X8+192]
	080 Move X2, [X8+112]
	081 Call List`1<Object>.AddWithResize, X0, X1
	082 Move W8, [X19+24]
	083 Add W21, W21, 1
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X0, X20
	086 Move X20, [X31+64]
	087 Move X19, [X31+72]
	088 Move X22, [X31+48]
	089 Move X21, [X31+56]
	090 Move X24, [X31+32]
	091 Move X23, [X31+40]
	092 Move X26, [X31+16]
	093 Move X25, [X31+24]
	094 Move X30, [X31+80]
	095 Move X27, [X31+88]
	096 Call TMP_Dropdown.RefreshShownValue, X0
	097 Return 
	098 Call 0x1C17F20

Method: System.Void ClearOptions()

Disassembly:
	0x03AE053C LDP S0, S1, [X20 - 0x8]
	0x03AE0540 LDR V2, [X20]
	0x03AE0544 MOV X0, X24
	0x03AE0548 MOV X1, X31
	0x03AE054C BL 0x3C40B58
	0x03AE0550 ANDS W31, W21, 0x1
	0x03AE0554 MOV V11.16B, V0.16B
	0x03AE0558 FCSEL S0, S0, S1, NE
	0x03AE055C MOV V12.16B, V1.16B
	0x03AE0560 FCMP S0, S13
	0x03AE0564 B.PL 0x3AE05BC
	0x03AE0568 LDRB W8, [X27 + 0x5AA]
	0x03AE056C ANDS W31, W21, 0x1
	0x03AE0570 FCSEL S8, S11, S12, NE
	0x03AE0574 CBNZ W8, 0x3AE0584
	0x03AE0578 MOV X0, X26
	0x03AE057C BL 0x1C16CF4
	0x03AE0580 STRB W22, [X27 + 0x5AA]
	0x03AE0584 LDR X8, [X26]
	0x03AE0588 FABS S0, S8
	0x03AE058C FCMP S0, S15
	0x03AE0590 FCSEL S0, S0, S15, GT
	0x03AE0594 LDR X8, [X8 + 0xB8]
	0x03AE0598 FMOV S2, 8
	0x03AE059C FMUL S0, S0, S14
	0x03AE05A0 LDR V1, [X8]
	0x03AE05A4 FMUL S1, S1, S2
	0x03AE05A8 FCMP S0, S1
	0x03AE05AC FCSEL S0, S0, S1, GT
	0x03AE05B0 FABD S1, S13, S13
	0x03AE05B4 FCMP S1, S0
	0x03AE05B8 B.PL 0x3AE0634
	0x03AE05BC ANDS W31, W21, 0x1
	0x03AE05C0 FCSEL S0, S11, S12, NE
	0x03AE05C4 FCMP S0, S9
	0x03AE05C8 B.LE 0x3AE0620
	0x03AE05CC LDRB W8, [X27 + 0x5AA]
	0x03AE05D0 ANDS W31, W21, 0x1
	0x03AE05D4 FCSEL S8, S11, S12, NE
	0x03AE05D8 CBNZ W8, 0x3AE05E8
	0x03AE05DC MOV X0, X26
	0x03AE05E0 BL 0x1C16CF4
	0x03AE05E4 STRB W22, [X27 + 0x5AA]
	0x03AE05E8 LDR X8, [X26]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x903000
	005 Move W8, [X20+1399]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x679000
	012 Move X0, [X0+2760]
	013 Call 0x1C17CF4
	014 Move X0, 0x614000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1399], W8
	019 Move X8, [X19+312]
	020 Compare X8, 0
	021 JumpIfEqual {54}
	022 Move X8, [X8+16]
	023 Compare X8, 0
	024 JumpIfEqual {54}
	025 Move W2, [X8+24]
	026 Move W9, [X8+28]
	027 Move X20, 0x614000
	028 Move X20, [X20+1432]
	029 Add W9, W9, 1
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move [X8+24], W31
	032 Move [X8+28], W9
	033 Move X0, [X8+16]
	034 Move W1, W31
	035 Move X3, X31
	036 Call Array.Clear, X0, X1, X2
	037 Move X0, [X20]
	038 Move X20, [X19+280]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X1, X31
	045 Call Object.op_Implicit, X0
	046 NotImplemented "Instruction SBFM not yet implemented."
	047 Move [X19+304], W8
	048 Move X0, X19
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Call TMP_Dropdown.RefreshShownValue, X0
	053 Return 
	054 Call 0x1C17F20

Method: System.Void SetupTemplate()

Disassembly:
	0x03AE05EC FABS S0, S8
	0x03AE05F0 FCMP S0, S10
	0x03AE05F4 FCSEL S0, S0, S10, GT
	0x03AE05F8 LDR X8, [X8 + 0xB8]
	0x03AE05FC FMOV S2, 8
	0x03AE0600 FMUL S0, S0, S14
	0x03AE0604 LDR V1, [X8]
	0x03AE0608 FMUL S1, S1, S2
	0x03AE060C FCMP S0, S1
	0x03AE0610 FCSEL S0, S0, S1, GT
	0x03AE0614 FABD S1, S9, S9
	0x03AE0618 FCMP S1, S0
	0x03AE061C B.PL 0x3AE0634
	0x03AE0620 ADD X28, X28, 0x1
	0x03AE0624 CMP X28, 0x4
	0x03AE0628 ADD X20, X20, 0xC
	0x03AE062C B.NE 0x3AE0530
	0x03AE0630 B 0x3AE0664
	0x03AE0634 ADRP X8, 0x669000
	0x03AE0638 LDR X8, [X8 + 0x6B8]
	0x03AE063C LDR X0, [X8]
	0x03AE0640 LDR W8, [X0 + 0xE0]
	0x03AE0644 CBNZ W8, 0x3AE064C
	0x03AE0648 BL 0x1C16DFC
	0x03AE064C LDR X0, [X31 + 0x30]
	0x03AE0650 MOV W1, W25
	0x03AE0654 MOV W2, W31
	0x03AE0658 MOV W3, W31
	0x03AE065C MOV X4, X31
	0x03AE0660 BL 0x3E23C44
	0x03AE0664 LDP S1, S0, [X31 + 0x38]
	0x03AE0668 MOV W21, W31
	0x03AE066C MOVZ W25, 0x1
	0x03AE0670 TBZ X29, 0x0, 0x3AE050C
	0x03AE0674 LDR X0, [X19 + 0x160]
	0x03AE0678 LDP X25, X26, [X31 + 0x18]
	0x03AE067C LDP S10, S8, [X31 + 0x10]
	0x03AE0680 CBZ X0, 0x3AE076C
	0x03AE0684 ADRP X21, 0x678000
	0x03AE0688 LDR X21, [X21 + 0xAA0]
	0x03AE068C MOV W22, W31
	0x03AE0690 MOVN W20, 0x0
	0x03AE0694 LDR W8, [X0 + 0x18]
	0x03AE0698 CMP W22, W8
	0x03AE069C B.GE 0x3AE0770
	0x03AE06A0 LDR X2, [X21]
	0x03AE06A4 MOV W1, W22
	0x03AE06A8 BL 0x301BCCC
	0x03AE06AC CBZ X0, 0x3AE076C
	0x03AE06B0 LDR X23, [X0 + 0x30]
	0x03AE06B4 CBZ X23, 0x3AE076C
	0x03AE06B8 MOV X0, X23
	0x03AE06BC MOV X1, X31
	0x03AE06C0 BL 0x3C3E5B8
	0x03AE06C4 FMOV S1, W31
	0x03AE06C8 MOV X0, X23
	0x03AE06CC MOV X1, X31
	0x03AE06D0 BL 0x3C3E648
	0x03AE06D4 MOV X0, X23
	0x03AE06D8 MOV X1, X31
	0x03AE06DC BL 0x3C3E6D4
	0x03AE06E0 FMOV S1, W31
	0x03AE06E4 MOV X0, X23
	0x03AE06E8 MOV X1, X31
	0x03AE06EC BL 0x3C3E764
	0x03AE06F0 MOV X0, X23
	0x03AE06F4 MOV X1, X31
	0x03AE06F8 BL 0x3C3E7F0
	0x03AE06FC LDR X8, [X19 + 0x160]
	0x03AE0700 CBZ X8, 0x3AE076C
	0x03AE0704 LDR W24, [X8 + 0x18]
	0x03AE0708 MOV X0, X23
	0x03AE070C MOV X1, X31
	0x03AE0710 MOV V9.16B, V0.16B
	0x03AE0714 BL 0x3C3EA28
	0x03AE0718 ADD W8, W20, W24
	0x03AE071C SCVTF S0, W8
	0x03AE0720 FMUL S0, S8, S0
	0x03AE0724 FADD S0, S10, S0
	0x03AE0728 FMUL S1, S8, S1
	0x03AE072C FADD S1, S1, S0
	0x03AE0730 MOV X0, X23
	0x03AE0734 MOV V0.16B, V9.16B
	0x03AE0738 MOV X1, X31
	0x03AE073C BL 0x3C3E880
	0x03AE0740 MOV X0, X23
	0x03AE0744 MOV X1, X31
	0x03AE0748 BL 0x3C3E90C
	0x03AE074C MOV X0, X23
	0x03AE0750 MOV V1.16B, V8.16B
	0x03AE0754 MOV X1, X31
	0x03AE0758 BL 0x3C3E99C
	0x03AE075C LDR X0, [X19 + 0x160]
	0x03AE0760 ADD W22, W22, 0x1
	0x03AE0764 SUB W20, W20, 0x1
	0x03AE0768 CBNZ X0, 0x3AE0694
	0x03AE076C BL 0x1C16F20
	0x03AE0770 LDR V0, [X19 + 0x148]
	0x03AE0774 FMOV S1, W31
	0x03AE0778 FMOV S2, 1
	0x03AE077C MOV X0, X19
	0x03AE0780 BL 0x3AE0C34
	0x03AE0784 LDR X0, [X19 + 0x100]
	0x03AE0788 CBZ X0, 0x3AE076C
	0x03AE078C MOV X1, X31
	0x03AE0790 BL 0x3C32ECC
	0x03AE0794 LDR X20, [X31 + 0x28]
	0x03AE0798 CBZ X0, 0x3AE076C
	0x03AE079C MOV W1, W31
	0x03AE07A0 MOV X2, X31
	0x03AE07A4 BL 0x3C357B4
	0x03AE07A8 MOV X0, X20
	0x03AE07AC MOV X1, X31
	0x03AE07B0 BL 0x3C32ECC
	0x03AE07B4 CBZ X0, 0x3AE076C
	0x03AE07B8 MOV W1, W31
	0x03AE07BC MOV X2, X31
	0x03AE07C0 BL 0x3C357B4
	0x03AE07C4 LDR X8, [X19]
	0x03AE07C8 MOV X0, X19
	0x03AE07CC MOV X1, X26
	0x03AE07D0 LDR X9, [X8 + 0x408]
	0x03AE07D4 LDR X2, [X8 + 0x410]
	0x03AE07D8 BLR X9
	0x03AE07DC STR X0, [X19 + 0x158]
	0x03AE07E0 LDR X8, [X25 + 0x28]
	0x03AE07E4 LDR X9, [X31 + 0xB8]
	0x03AE07E8 CMP X8, X9
	0x03AE07EC B.NE 0x3AE0824
	0x03AE07F0 LDP X20, X19, [X31 + 0x150]
	0x03AE07F4 LDP X22, X21, [X31 + 0x140]
	0x03AE07F8 LDP X24, X23, [X31 + 0x130]
	0x03AE07FC LDP X26, X25, [X31 + 0x120]
	0x03AE0800 LDP X28, X27, [X31 + 0x110]
	0x03AE0804 LDP X29, X30, [X31 + 0x100]
	0x03AE0808 LDP D9, D8, [X31 + 0xF0]
	0x03AE080C LDP D11, D10, [X31 + 0xE0]
	0x03AE0810 LDP D13, D12, [X31 + 0xD0]
	0x03AE0814 LDP D15, D14, [X31 + 0xC0]
	0x03AE0818 ADD X31, X31, 0x160
	0x03AE081C RET
	0x03AE0820 BL 0x1C16F28
	0x03AE0824 BL 0x3EB1B20
	0x03AE0828 B 0x3ADFC60
	0x03AE082C B 0x3AE0830
	0x03AE0830 STP X30, X21, [X31 - 0x20]!
	0x03AE0834 STP X20, X19, [X31 + 0x10]
	0x03AE0838 ADRP X20, 0x902000
	0x03AE083C LDRB W8, [X20 + 0x583]
	0x03AE0840 MOV X19, X0
	0x03AE0844 TBNZ X8, 0x0, 0x3AE085C
	0x03AE0848 ADRP X0, 0x613000
	0x03AE084C LDR X0, [X0 + 0x598]
	0x03AE0850 BL 0x1C16CF4
	0x03AE0854 MOVZ W8, 0x1
	0x03AE0858 STRB W8, [X20 + 0x583]
	0x03AE085C LDR X8, [X19 + 0x178]
	0x03AE0860 CBZ X8, 0x3AE0870
	0x03AE0864 LDP X20, X19, [X31 + 0x10]
	0x03AE0868 LDP X30, X21, [X31], #0x20
	0x03AE086C RET
	0x03AE0870 ADRP X21, 0x613000
	0x03AE0874 LDR X21, [X21 + 0x598]
	0x03AE0878 LDR X20, [X19 + 0x150]
	0x03AE087C LDR X0, [X21]
	0x03AE0880 LDR W8, [X0 + 0xE0]
	0x03AE0884 CBNZ W8, 0x3AE088C
	0x03AE0888 BL 0x1C16DFC
	0x03AE088C MOV X0, X20
	0x03AE0890 MOV X1, X31
	0x03AE0894 MOV X2, X31
	0x03AE0898 BL 0x3C354F8
	0x03AE089C TBZ X0, 0x0, 0x3AE08E4
	0x03AE08A0 LDR V0, [X19 + 0x148]
	0x03AE08A4 FMOV S1, W31
	0x03AE08A8 MOV X0, X19
	0x03AE08AC BL 0x3AE13A8
	0x03AE08B0 LDR X8, [X19]
	0x03AE08B4 MOV X0, X19
	0x03AE08B8 LDP X9, X1, [X8 + 0x1C8]
	0x03AE08BC BLR X9
	0x03AE08C0 TBZ X0, 0x0, 0x3AE08E4
	0x03AE08C4 LDR V0, [X19 + 0x148]
	0x03AE08C8 MOV X0, X19
	0x03AE08CC BL 0x3AE14DC
	0x03AE08D0 MOV X1, X0
	0x03AE08D4 MOV X0, X19
	0x03AE08D8 MOV X2, X31
	0x03AE08DC BL 0x3C366FC
	0x03AE08E0 STR X0, [X19 + 0x178]
	0x03AE08E4 LDR X0, [X21]
	0x03AE08E8 LDR X20, [X19 + 0x158]
	0x03AE08EC LDR W8, [X0 + 0xE0]
	0x03AE08F0 CBNZ W8, 0x3AE08F8
	0x03AE08F4 BL 0x1C16DFC
	0x03AE08F8 MOV X0, X20
	0x03AE08FC MOV X1, X31
	0x03AE0900 MOV X2, X31
	0x03AE0904 BL 0x3C354F8
	0x03AE0908 TBZ X0, 0x0, 0x3AE0924
	0x03AE090C LDR X8, [X19]
	0x03AE0910 LDR X1, [X19 + 0x158]
	0x03AE0914 MOV X0, X19
	0x03AE0918 LDR X9, [X8 + 0x418]
	0x03AE091C LDR X2, [X8 + 0x420]
	0x03AE0920 BLR X9
	0x03AE0924 LDR X8, [X19]
	0x03AE0928 STR X31, [X19 + 0x158]
	0x03AE092C MOV X0, X19
	0x03AE0930 LDP X20, X19, [X31 + 0x10]
	0x03AE0934 LDR X2, [X8 + 0x398]
	0x03AE0938 LDR X1, [X8 + 0x3A0]
	0x03AE093C LDP X30, X21, [X31], #0x20
	0x03AE0940 BR X2
	0x03AE0944 MOV X1, X31
	0x03AE0948 B 0x33BDD8C
	0x03AE094C STR X30, [X31 - 0x40]!
	0x03AE0950 STP X24, X23, [X31 + 0x10]
	0x03AE0954 STP X22, X21, [X31 + 0x20]
	0x03AE0958 STP X20, X19, [X31 + 0x30]
	0x03AE095C ADRP X23, 0x902000
	0x03AE0960 LDRB W8, [X23 + 0x57F]
	0x03AE0964 MOV X19, X4
	0x03AE0968 MOV X22, X3
	0x03AE096C MOV X21, X1
	0x03AE0970 MOV X20, X0
	0x03AE0974 TBNZ X8, 0x0, 0x3AE09C8
	0x03AE0978 ADRP X0, 0x678000
	0x03AE097C LDR X0, [X0 + 0xB48]
	0x03AE0980 BL 0x1C16CF4
	0x03AE0984 ADRP X0, 0x678000
	0x03AE0988 LDR X0, [X0 + 0xA98]
	0x03AE098C BL 0x1C16CF4
	0x03AE0990 ADRP X0, 0x613000
	0x03AE0994 LDR X0, [X0 + 0x598]
	0x03AE0998 BL 0x1C16CF4
	0x03AE099C ADRP X0, 0x617000
	0x03AE09A0 LDR X0, [X0 + 0x928]
	0x03AE09A4 BL 0x1C16CF4
	0x03AE09A8 ADRP X0, 0x678000
	0x03AE09AC LDR X0, [X0 + 0xB50]
	0x03AE09B0 BL 0x1C16CF4
	0x03AE09B4 ADRP X0, 0x613000
	0x03AE09B8 LDR X0, [X0 + 0x988]
	0x03AE09BC BL 0x1C16CF4
	0x03AE09C0 MOVZ W8, 0x1
	0x03AE09C4 STRB W8, [X23 + 0x57F]
	0x03AE09C8 LDR X8, [X20]
	0x03AE09CC MOV X0, X20
	0x03AE09D0 MOV X1, X22
	0x03AE09D4 LDR X9, [X8 + 0x448]
	0x03AE09D8 LDR X2, [X8 + 0x450]
	0x03AE09DC BLR X9
	0x03AE09E0 CBZ X0, 0x3AE0C30
	0x03AE09E4 CBZ X22, 0x3AE0C30
	0x03AE09E8 MOV X20, X0
	0x03AE09EC LDR X0, [X22 + 0x30]
	0x03AE09F0 CBZ X0, 0x3AE0C30
	0x03AE09F4 LDR X22, [X20 + 0x30]
	0x03AE09F8 MOV X1, X31
	0x03AE09FC BL 0x3C3F49C
	0x03AE0A00 CBZ X22, 0x3AE0C30
	0x03AE0A04 MOV X1, X0
	0x03AE0A08 MOV X0, X22
	0x03AE0A0C MOV W2, W31
	0x03AE0A10 MOV X3, X31
	0x03AE0A14 BL 0x3C3FEB8
	0x03AE0A18 MOV X0, X20
	0x03AE0A1C MOV X1, X31
	0x03AE0A20 BL 0x3C32ECC
	0x03AE0A24 CBZ X0, 0x3AE0C30
	0x03AE0A28 MOVZ W1, 0x1
	0x03AE0A2C MOV X2, X31
	0x03AE0A30 BL 0x3C357B4
	0x03AE0A34 MOV X0, X20
	0x03AE0A38 MOV X1, X31
	0x03AE0A3C BL 0x3C32ECC
	0x03AE0A40 CBZ X19, 0x3AE0C30
	0x03AE0A44 LDR W8, [X19 + 0x18]
	0x03AE0A48 MOV X22, X0
	0x03AE0A4C ADD X0, X31, 0xC
	0x03AE0A50 MOV X1, X31
	0x03AE0A54 STR W8, [X31 + 0xC]
	0x03AE0A58 BL 0x337B6E0
	0x03AE0A5C CBZ X21, 0x3AE0C30
	0x03AE0A60 ADRP X8, 0x678000
	0x03AE0A64 LDR X8, [X8 + 0xB50]
	0x03AE0A68 LDR X1, [X21 + 0x10]
	0x03AE0A6C MOV X23, X0
	0x03AE0A70 LDR X24, [X8]
	0x03AE0A74 CBZ X1, 0x3AE0A94
	0x03AE0A78 ADRP X8, 0x617000
	0x03AE0A7C LDR X8, [X8 + 0x928]
	0x03AE0A80 MOV X2, X31
	0x03AE0A84 LDR X0, [X8]
	0x03AE0A88 BL 0x321B938
	0x03AE0A8C MOV X2, X0
	0x03AE0A90 B 0x3AE0AA0
	0x03AE0A94 ADRP X8, 0x613000
	0x03AE0A98 LDR X8, [X8 + 0x988]
	0x03AE0A9C LDR X2, [X8]
	0x03AE0AA0 MOV X0, X24
	0x03AE0AA4 MOV X1, X23
	0x03AE0AA8 MOV X3, X31
	0x03AE0AAC BL 0x32274B8
	0x03AE0AB0 CBZ X22, 0x3AE0C30
	0x03AE0AB4 ADRP X23, 0x613000
	0x03AE0AB8 LDR X23, [X23 + 0x598]
	0x03AE0ABC MOV X1, X0
	0x03AE0AC0 MOV X0, X22
	0x03AE0AC4 MOV X2, X31
	0x03AE0AC8 BL 0x3C38A84
	0x03AE0ACC LDR X0, [X23]
	0x03AE0AD0 LDR X22, [X20 + 0x38]
	0x03AE0AD4 LDR W8, [X0 + 0xE0]
	0x03AE0AD8 CBNZ W8, 0x3AE0AE0
	0x03AE0ADC BL 0x1C16DFC
	0x03AE0AE0 MOV X0, X22
	0x03AE0AE4 MOV X1, X31
	0x03AE0AE8 MOV X2, X31
	0x03AE0AEC BL 0x3C354F8
	0x03AE0AF0 TBZ X0, 0x0, 0x3AE0B08
	0x03AE0AF4 LDR X0, [X20 + 0x38]
	0x03AE0AF8 CBZ X0, 0x3AE0C30
	0x03AE0AFC MOV W1, W31
	0x03AE0B00 MOV X2, X31
	0x03AE0B04 BL 0x3E47488
	0x03AE0B08 LDR X0, [X23]
	0x03AE0B0C LDR X22, [X20 + 0x20]
	0x03AE0B10 LDR W8, [X0 + 0xE0]
	0x03AE0B14 CBNZ W8, 0x3AE0B1C
	0x03AE0B18 BL 0x1C16DFC
	0x03AE0B1C MOV X0, X22
	0x03AE0B20 MOV X1, X31
	0x03AE0B24 BL 0x3C38948
	0x03AE0B28 TBZ X0, 0x0, 0x3AE0B48
	0x03AE0B2C LDR X0, [X20 + 0x20]
	0x03AE0B30 CBZ X0, 0x3AE0C30
	0x03AE0B34 LDR X8, [X0]
	0x03AE0B38 LDR X1, [X21 + 0x10]
	0x03AE0B3C LDR X9, [X8 + 0x558]
	0x03AE0B40 LDR X2, [X8 + 0x560]
	0x03AE0B44 BLR X9
	0x03AE0B48 LDR X0, [X23]
	0x03AE0B4C LDR X22, [X20 + 0x28]
	0x03AE0B50 LDR W8, [X0 + 0xE0]
	0x03AE0B54 CBNZ W8, 0x3AE0B5C
	0x03AE0B58 BL 0x1C16DFC
	0x03AE0B5C MOV X0, X22
	0x03AE0B60 MOV X1, X31
	0x03AE0B64 BL 0x3C38948
	0x03AE0B68 TBZ X0, 0x0, 0x3AE0BBC
	0x03AE0B6C LDR X0, [X20 + 0x28]
	0x03AE0B70 CBZ X0, 0x3AE0C30
	0x03AE0B74 LDR X1, [X21 + 0x18]
	0x03AE0B78 MOV X2, X31
	0x03AE0B7C BL 0x3CD3398
	0x03AE0B80 LDR X21, [X20 + 0x28]
	0x03AE0B84 CBZ X21, 0x3AE0C30
	0x03AE0B88 LDR X0, [X23]
	0x03AE0B8C LDR X22, [X21 + 0xD8]
	0x03AE0B90 LDR W8, [X0 + 0xE0]
	0x03AE0B94 CBNZ W8, 0x3AE0B9C
	0x03AE0B98 BL 0x1C16DFC
	0x03AE0B9C MOV X0, X22
	0x03AE0BA0 MOV X1, X31
	0x03AE0BA4 MOV X2, X31
	0x03AE0BA8 BL 0x3C354F8
	0x03AE0BAC AND W1, W0, 0x1
	0x03AE0BB0 MOV X0, X21
	0x03AE0BB4 MOV X2, X31
	0x03AE0BB8 BL 0x3C32410
	0x03AE0BBC ADRP X9, 0x678000
	0x03AE0BC0 LDR X9, [X9 + 0xB48]
	0x03AE0BC4 LDR W10, [X19 + 0x1C]
	0x03AE0BC8 LDR X8, [X19 + 0x10]
	0x03AE0BCC LDR X9, [X9]
	0x03AE0BD0 ADD W10, W10, 0x1
	0x03AE0BD4 STR W10, [X19 + 0x1C]
	0x03AE0BD8 CBZ X8, 0x3AE0C30
	0x03AE0BDC LDRSW X10, [X19 + 0x18]
	0x03AE0BE0 LDR W11, [X8 + 0x18]
	0x03AE0BE4 CMP W10, W11
	0x03AE0BE8 B.CS 0x3AE0C00
	0x03AE0BEC ADD W9, W10, 0x1
	0x03AE0BF0 ADD X8, X8, X10, 0x3, LSL
	0x03AE0BF4 STR W9, [X19 + 0x18]
	0x03AE0BF8 STR X20, [X8 + 0x20]
	0x03AE0BFC B 0x3AE0C18
	0x03AE0C00 LDR X8, [X9 + 0x20]
	0x03AE0C04 MOV X0, X19
	0x03AE0C08 MOV X1, X20
	0x03AE0C0C LDR X8, [X8 + 0xC0]
	0x03AE0C10 LDR X2, [X8 + 0x70]
	0x03AE0C14 BL 0x301BF90
	0x03AE0C18 MOV X0, X20
	0x03AE0C1C LDP X20, X19, [X31 + 0x30]
	0x03AE0C20 LDP X22, X21, [X31 + 0x20]
	0x03AE0C24 LDP X24, X23, [X31 + 0x10]
	0x03AE0C28 LDR X30, [X31], #0x40
	0x03AE0C2C RET
	0x03AE0C30 BL 0x1C16F20
	0x03AE0C34 SUB X31, X31, 0x80
	0x03AE0C38 STP D9, D8, [X31 + 0x50]
	0x03AE0C3C STR X30, [X31 + 0x60]
	0x03AE0C40 STP X20, X19, [X31 + 0x70]
	0x03AE0C44 ADRP X20, 0x902000
	0x03AE0C48 LDRB W8, [X20 + 0x581]
	0x03AE0C4C MOV V8.16B, V1.16B
	0x03AE0C50 MOV V9.16B, V0.16B
	0x03AE0C54 MOV X19, X0
	0x03AE0C58 STR S2, [X31 + 0x6C]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x903000
	011 Move X24, 0x614000
	012 Move W8, [X20+1400]
	013 Move X24, [X24+1432]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {69}
	019 Move X0, 0x679000
	020 Move X0, [X0+2768]
	021 Call 0x1C17CF4
	022 Move X0, 0x66A000
	023 Move X0, [X0+1376]
	024 Call 0x1C17CF4
	025 Move X0, 0x679000
	026 Move X0, [X0+2776]
	027 Call 0x1C17CF4
	028 Move X0, 0x614000
	029 Move X0, [X0+2600]
	030 Call 0x1C17CF4
	031 Move X0, 0x679000
	032 Move X0, [X0+2784]
	033 Call 0x1C17CF4
	034 Move X0, 0x614000
	035 Move X0, [X0+1432]
	036 Call 0x1C17CF4
	037 Move X0, 0x63B000
	038 Move X0, [X0+3184]
	039 Call 0x1C17CF4
	040 Move X0, 0x679000
	041 Move X0, [X0+2792]
	042 Call 0x1C17CF4
	043 Move X0, 0x679000
	044 Move X0, [X0+2800]
	045 Call 0x1C17CF4
	046 Move X0, 0x679000
	047 Move X0, [X0+2808]
	048 Call 0x1C17CF4
	049 Move X0, 0x679000
	050 Move X0, [X0+2576]
	051 Call 0x1C17CF4
	052 Move X0, 0x679000
	053 Move X0, [X0+2816]
	054 Call 0x1C17CF4
	055 Move X0, 0x679000
	056 Move X0, [X0+2824]
	057 Call 0x1C17CF4
	058 Move X0, 0x679000
	059 Move X0, [X0+2832]
	060 Call 0x1C17CF4
	061 Move X0, 0x679000
	062 Move X0, [X0+2840]
	063 Call 0x1C17CF4
	064 Move X0, 0x679000
	065 Move X0, [X0+2848]
	066 Call 0x1C17CF4
	067 Move W8, 1
	068 Move [X20+1400], W8
	069 Move [X19+368], W31
	070 Move X0, [X24]
	071 Move X20, [X19+256]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X25, 0x614000
	077 Move X25, [X25+2600]
	078 Move X0, X20
	079 Move X1, X31
	080 Call Object.op_Implicit, X0
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {149}
	085 Move X0, [X19+256]
	086 Compare X0, 0
	087 JumpIfEqual {492}
	088 Move X1, X31
	089 Call Component.get_gameObject, X0
	090 Compare X0, 0
	091 JumpIfEqual {492}
	092 Move W1, 1
	093 Move X2, X31
	094 Move X20, X0
	095 Move W21, 1
	096 Call GameObject.SetActive, X0, X1
	097 Move X0, [X19+256]
	098 Compare X0, 0
	099 JumpIfEqual {492}
	100 Move X8, 0x679000
	101 Move X8, [X8+2768]
	102 Move X1, [X8]
	103 Call 0x21A4AF8, X0
	104 Move [X19+368], W21
	105 Move X8, [X24]
	106 Move X21, X0
	107 Move W9, [X8+224]
	108 Compare W9, 0
	109 JumpIfNotEqual {112}
	110 Move X0, X8
	111 Call 0x1C17DFC
	112 Move X0, X21
	113 Move X1, X31
	114 Call Object.op_Implicit, X0
	115 Move TEMP, X0
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {140}
	119 Compare X21, 0
	120 JumpIfEqual {492}
	121 Move X0, X21
	122 Move X1, X31
	123 Call Component.get_transform, X0
	124 Move X8, [X24]
	125 Move X22, [X19+256]
	126 Move X23, X0
	127 Move W9, [X8+224]
	128 Compare W9, 0
	129 JumpIfNotEqual {132}
	130 Move X0, X8
	131 Call 0x1C17DFC
	132 Move X0, X23
	133 Move X1, X22
	134 Move X2, X31
	135 Call Object.op_Equality, X0, X1
	136 Move TEMP, X0
	137 And TEMP, TEMP, 1
	138 Compare TEMP, 1
	139 JumpIfNotEqual {170}
	140 Move [X19+368], W31
	141 Move X0, [X25]
	142 Move X22, [X19+256]
	143 Move W8, [X0+224]
	144 Compare W8, 0
	145 JumpIfNotEqual {147}
	146 Call 0x1C17DFC
	147 Move X8, 0x679000
	148 Move X8, [X8+2824]
	149 Move X0, [X25]
	150 Move X20, 0x679000
	151 Move W8, [X0+224]
	152 Move X20, [X20+2848]
	153 Compare W8, 0
	154 JumpIfNotEqual {156}
	155 Call 0x1C17DFC
	156 Move X0, [X20]
	157 Move X1, X19
	158 Move X20, [X31+64]
	159 Move X19, [X31+72]
	160 Move X22, [X31+48]
	161 Move X21, [X31+56]
	162 Move X24, [X31+32]
	163 Move X23, [X31+40]
	164 Move X26, [X31+16]
	165 Move X25, [X31+24]
	166 Move X2, X31
	167 Move X30, [X31+80]
	168 Call Debug.LogError, X0, X1
	169 Return 
	170 Move X0, X21
	171 Move X1, X31
	172 Call Component.get_transform, X0
	173 Compare X0, 0
	174 JumpIfEqual {492}
	175 Move X1, X31
	176 Call Transform.get_parent, X0
	177 Compare X0, 0
	178 JumpIfEqual {184}
	179 Move X8, 0x63B000
	180 Move X8, [X8+3184]
	181 Move X9, [X0]
	182 Move X8, [X8]
	183 NotImplemented "Instruction CMP not yet implemented."
	184 Move [X19+368], W31
	185 Move X0, [X25]
	186 Move X22, [X19+256]
	187 Move W8, [X0+224]
	188 Compare W8, 0
	189 JumpIfNotEqual {191}
	190 Call 0x1C17DFC
	191 Move X8, 0x679000
	192 Move X8, [X8+2840]
	193 Move X0, [X8]
	194 Move X1, X22
	195 Move X2, X31
	196 Call Debug.LogError, X0, X1
	197 Move W8, [X19+368]
	198 Compare W8, 0
	199 JumpIfEqual {358}
	200 Compare X21, 0
	201 JumpIfEqual {492}
	202 Move X0, X21
	203 Move X1, X31
	204 Call Component.get_gameObject, X0
	205 Compare X0, 0
	206 JumpIfEqual {492}
	207 Move X8, 0x679000
	208 Move X8, [X8+2784]
	209 Move X1, [X8]
	210 Call 0x21E61FC, X0
	211 Compare X0, 0
	212 JumpIfEqual {492}
	213 Move X8, [X19+288]
	214 Move X22, X0
	215 Move X1, X31
	216 Move [X0+32], X8
	217 Move X8, [X19+296]
	218 Move [X0+56], X21
	219 Move [X0+40], X8
	220 Move X0, X21
	221 Call Component.get_transform, X0
	222 Compare X0, 0
	223 JumpIfEqual {229}
	224 Move X8, 0x63B000
	225 Move X8, [X8+3184]
	226 Move X1, [X8]
	227 Move X8, [X0]
	228 NotImplemented "Instruction CMP not yet implemented."
	229 Move [X22+48], X0
	230 Move X0, [X19+256]
	231 Compare X0, 0
	232 JumpIfEqual {492}
	233 Move X1, X31
	234 Call Transform.get_parent, X0
	235 Move X23, 0x66A000
	236 Move X23, [X23+1376]
	237 Move X22, X0
	238 Move X21, X31
	239 Move X0, [X24]
	240 Move W8, [X0+224]
	241 Compare W8, 0
	242 JumpIfNotEqual {244}
	243 Call 0x1C17DFC
	244 Move X0, X22
	245 Move X1, X31
	246 Move X2, X31
	247 Call Object.op_Inequality, X0, X1
	248 Move TEMP, X0
	249 And TEMP, TEMP, 1
	250 Compare TEMP, 1
	251 JumpIfNotEqual {276}
	252 Compare X22, 0
	253 JumpIfEqual {492}
	254 Move X1, [X23]
	255 Move X0, X22
	256 Call 0x21A4894, X0
	257 Move X8, [X24]
	258 Move X21, X0
	259 Move W9, [X8+224]
	260 Compare W9, 0
	261 JumpIfNotEqual {264}
	262 Move X0, X8
	263 Call 0x1C17DFC
	264 Move X0, X21
	265 Move X1, X31
	266 Move X2, X31
	267 Call Object.op_Inequality, X0, X1
	268 Move TEMP, X0
	269 And TEMP, TEMP, 1
	270 Compare TEMP, 1
	271 JumpIfEqual {276}
	272 Move X0, X22
	273 Move X1, X31
	274 Call Transform.get_parent, X0
	275 Move X22, X0
	276 Move X25, 0x679000
	277 Move X25, [X25+2576]
	278 Move X0, [X25]
	279 Move W8, [X0+224]
	280 Compare W8, 0
	281 JumpIfNotEqual {283}
	282 Call 0x1C17DFC
	283 Move X8, 0x679000
	284 Move X8, [X8+2800]
	285 Move X0, X20
	286 Move X1, [X8]
	287 Call 0x2299CC8, X0
	288 Compare X0, 0
	289 JumpIfEqual {492}
	290 Move W1, 1
	291 Move X2, X31
	292 Move X22, X0
	293 Call Canvas.set_overrideSorting, X0, X1
	294 Move W1, 0x7530
	295 Move X0, X22
	296 Move X2, X31
	297 Call Canvas.set_sortingOrder, X0, X1
	298 Move X0, [X24]
	299 Move W8, [X0+224]
	300 Compare W8, 0
	301 JumpIfNotEqual {303}
	302 Call 0x1C17DFC
	303 Move X0, X21
	304 Move X1, X31
	305 Move X2, X31
	306 Call Object.op_Inequality, X0, X1
	307 Move TEMP, X0
	308 And TEMP, TEMP, 1
	309 Compare TEMP, 1
	310 JumpIfNotEqual {372}
	311 Compare X21, 0
	312 JumpIfEqual {492}
	313 Move X8, 0x679000
	314 Move X8, [X8+2776]
	315 Move X0, X21
	316 Move X1, [X8]
	317 Call 0x21A53A8, X0
	318 Compare X0, 0
	319 JumpIfEqual {492}
	320 Move W8, [X0+24]
	321 Move X21, X0
	322 NotImplemented "Instruction CMP not yet implemented."
	323 Move W26, W31
	324 NotImplemented "Instruction CMP not yet implemented."
	325 Add X8, X21, W26
	326 Move X0, [X8+32]
	327 Compare X0, 0
	328 JumpIfEqual {492}
	329 Move X1, X31
	330 Call "il2cpp_vm_object_is_inst", X0
	331 Move X22, X0
	332 Move X0, X20
	333 Move X1, X22
	334 Move X2, X31
	335 Call GameObject.GetComponent, X0, X1
	336 Move X8, [X24]
	337 Move X23, X0
	338 Move W9, [X8+224]
	339 Compare W9, 0
	340 JumpIfNotEqual {343}
	341 Move X0, X8
	342 Call 0x1C17DFC
	343 Move X0, X23
	344 Move X1, X31
	345 Move X2, X31
	346 Call Object.op_Equality, X0, X1
	347 Move TEMP, X0
	348 And TEMP, TEMP, 1
	349 Compare TEMP, 1
	350 JumpIfNotEqual {355}
	351 Move X0, X20
	352 Move X1, X22
	353 Move X2, X31
	354 Call GameObject.AddComponent, X0, X1
	355 Move W8, [X21+24]
	356 Add W26, W26, 1
	357 NotImplemented "Instruction CMP not yet implemented."
	358 Move X0, X20
	359 Move X20, [X31+64]
	360 Move X19, [X31+72]
	361 Move X22, [X31+48]
	362 Move X21, [X31+56]
	363 Move X24, [X31+32]
	364 Move X23, [X31+40]
	365 Move X26, [X31+16]
	366 Move X25, [X31+24]
	367 Move W1, W31
	368 Move X2, X31
	369 Move X30, [X31+80]
	370 Call GameObject.SetActive, X0, X1
	371 Return 
	372 Move X0, [X25]
	373 Move W8, [X0+224]
	374 Compare W8, 0
	375 JumpIfNotEqual {377}
	376 Call 0x1C17DFC
	377 Move X8, 0x679000
	378 Move X8, [X8+2808]
	379 Move X0, X20
	380 Move X1, [X8]
	381 Call 0x2299CC8, X0
	382 Move X0, [X25]
	383 Move W8, [X0+224]
	384 Compare W8, 0
	385 JumpIfNotEqual {387}
	386 Call 0x1C17DFC
	387 Move X8, 0x679000
	388 Move X8, [X8+2792]
	389 Move X0, X20
	390 Move X1, [X8]
	391 Call 0x2299CC8, X0
	392 Move X0, X20
	393 Move W1, W31
	394 Move X2, X31
	395 Call GameObject.SetActive, X0, X1
	396 Move W8, 1
	397 Move [X19+368], W8
	398 Move X20, [X31+64]
	399 Move X19, [X31+72]
	400 Move X22, [X31+48]
	401 Move X21, [X31+56]
	402 Move X24, [X31+32]
	403 Move X23, [X31+40]
	404 Move X26, [X31+16]
	405 Move X25, [X31+24]
	406 Move X30, [X31+80]
	407 Return 
	408 Move X0, [X24]
	409 Move X22, [X19+288]
	410 Move W8, [X0+224]
	411 Compare W8, 0
	412 JumpIfNotEqual {414}
	413 Call 0x1C17DFC
	414 Move X0, X22
	415 Move X1, X31
	416 Move X2, X31
	417 Call Object.op_Inequality, X0, X1
	418 Move TEMP, X0
	419 And TEMP, TEMP, 1
	420 Compare TEMP, 1
	421 JumpIfNotEqual {441}
	422 Move X0, [X19+288]
	423 Compare X0, 0
	424 JumpIfEqual {492}
	425 Move X1, X31
	426 Call TMP_Text.get_transform, X0
	427 Move X22, X0
	428 Move X0, X21
	429 Move X1, X31
	430 Call Component.get_transform, X0
	431 Compare X22, 0
	432 JumpIfEqual {492}
	433 Move X1, X0
	434 Move X0, X22
	435 Move X2, X31
	436 Call Transform.IsChildOf, X0, X1
	437 Move TEMP, X0
	438 And TEMP, TEMP, 1
	439 Compare TEMP, 1
	440 JumpIfNotEqual {483}
	441 Move X0, [X24]
	442 Move X22, [X19+296]
	443 Move W8, [X0+224]
	444 Compare W8, 0
	445 JumpIfNotEqual {447}
	446 Call 0x1C17DFC
	447 Move X0, X22
	448 Move X1, X31
	449 Move X2, X31
	450 Call Object.op_Inequality, X0, X1
	451 Move TEMP, X0
	452 And TEMP, TEMP, 1
	453 Compare TEMP, 1
	454 JumpIfNotEqual {197}
	455 Move X0, [X19+296]
	456 Compare X0, 0
	457 JumpIfEqual {492}
	458 Move X1, X31
	459 Call Component.get_transform, X0
	460 Move X22, X0
	461 Move X0, X21
	462 Move X1, X31
	463 Call Component.get_transform, X0
	464 Compare X22, 0
	465 JumpIfEqual {492}
	466 Move X1, X0
	467 Move X0, X22
	468 Move X2, X31
	469 Call Transform.IsChildOf, X0, X1
	470 Move TEMP, X0
	471 And TEMP, TEMP, 1
	472 Compare TEMP, 1
	473 JumpIfEqual {197}
	474 Move [X19+368], W31
	475 Move X0, [X25]
	476 Move X22, [X19+256]
	477 Move W8, [X0+224]
	478 Compare W8, 0
	479 JumpIfNotEqual {481}
	480 Call 0x1C17DFC
	481 Move X8, 0x679000
	482 Move X8, [X8+2832]
	483 Move [X19+368], W31
	484 Move X0, [X25]
	485 Move X22, [X19+256]
	486 Move W8, [X0+224]
	487 Compare W8, 0
	488 JumpIfNotEqual {490}
	489 Call 0x1C17DFC
	490 Move X8, 0x679000
	491 Move X8, [X8+2816]
	492 Call 0x1C17F20
	493 Call 0x1C17F28
	494 Call 0x1C181E0

Method: T GetOrAddComponent(UnityEngine.GameObject go)

Disassembly:
	0x02299CC8 BL 0x1C5C684
	0x02299CCC BL 0x1C16F10
	0x02299CD0 LDR X8, [X19 + 0x38]
	0x02299CD4 MOV X19, X0
	0x02299CD8 LDR X1, [X8 + 0x8]
	0x02299CDC LDR X8, [X1]
	0x02299CE0 BLR X8
	0x02299CE4 CBZ X19, 0x2299D48
	0x02299CE8 LDR X1, [X20 + 0x90]
	0x02299CEC MOV X0, X19
	0x02299CF0 MOV X2, X20
	0x02299CF4 MOV X3, X31
	0x02299CF8 BL 0x33EDA6C
	0x02299CFC MOV X0, X19
	0x02299D00 LDP X20, X19, [X31 + 0x10]
	0x02299D04 LDR X30, [X31], #0x20
	0x02299D08 RET
	0x02299D0C ADRP X0, 0x1E5F000
	0x02299D10 LDR X0, [X0 + 0x528]
	0x02299D14 BL 0x1C16D08
	0x02299D18 BL 0x1C16F10
	0x02299D1C MOV X20, X0
	0x02299D20 ADRP X0, 0x1E83000
	0x02299D24 LDR X0, [X0 + 0x778]
	0x02299D28 BL 0x1C16D08
	0x02299D2C MOV X1, X0
	0x02299D30 MOV X0, X20
	0x02299D34 MOV X2, X31
	0x02299D38 BL 0x330E100
	0x02299D3C MOV X0, X20
	0x02299D40 MOV X1, X19
	0x02299D44 BL 0x1C16DEC
	0x02299D48 BL 0x1C16F20
	0x02299D4C STR X30, [X31 - 0x20]!
	0x02299D50 STP X20, X19, [X31 + 0x10]
	0x02299D54 LDR X8, [X1 + 0x38]
	0x02299D58 MOV X19, X1
	0x02299D5C MOV X20, X0
	0x02299D60 CBNZ X8, 0x2299D6C
	0x02299D64 MOV X0, X19
	0x02299D68 BL 0x1C5C6E0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+56]
	006 Move X19, X1
	007 Move X20, X0
	008 Compare X8, 0
	009 JumpIfNotEqual {18}
	010 Move X0, 0x1E5B000
	011 Move X0, [X0+1432]
	012 Call 0x1C17CF4
	013 Move X8, [X19+56]
	014 Compare X8, 0
	015 JumpIfNotEqual {18}
	016 Move X0, X19
	017 Call 0x1C5D6E0
	018 Compare X20, 0
	019 JumpIfEqual {55}
	020 Move X8, [X19+56]
	021 Move X0, X20
	022 Move X1, [X8]
	023 Call 0x21E62E4, X0
	024 Move X8, 0x1E5B000
	025 Move X8, [X8+1432]
	026 Move X21, X0
	027 Move X8, [X8]
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X21
	034 Move X1, X31
	035 Call Object.op_Implicit, X0
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {46}
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X0, X21
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return X0
	046 Move X8, [X19+56]
	047 Move X0, X20
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X1, [X8+16]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Call 0x21E61FC, X0
	054 Return X0
	055 Call 0x1C17F20

Method: System.Void OnPointerClick(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03AE0C5C TBNZ X8, 0x0, 0x3AE0C8C

ISIL:
No ISIL was generated
Method: System.Void OnSubmit(UnityEngine.EventSystems.BaseEventData eventData)

Disassembly:
	0x03AE1828 BL 0x21A3F50

ISIL:
	001 Call TMP_Dropdown.Show, X0
	002 Return 

Method: System.Void OnCancel(UnityEngine.EventSystems.BaseEventData eventData)

Disassembly:
	0x03AE182C LDR X8, [X20]

ISIL:
No ISIL was generated
Method: System.Void Show()

Disassembly:
	0x03AE0C60 ADRP X0, 0x678000
	0x03AE0C64 LDR X0, [X0 + 0xB58]
	0x03AE0C68 BL 0x1C16CF4
	0x03AE0C6C ADRP X0, 0x678000
	0x03AE0C70 LDR X0, [X0 + 0xB60]
	0x03AE0C74 BL 0x1C16CF4
	0x03AE0C78 ADRP X0, 0x678000
	0x03AE0C7C LDR X0, [X0 + 0xB68]
	0x03AE0C80 BL 0x1C16CF4
	0x03AE0C84 MOVZ W8, 0x1
	0x03AE0C88 STRB W8, [X20 + 0x581]
	0x03AE0C8C ADD X0, X31, 0x6C
	0x03AE0C90 MOV V0.16B, V8.16B
	0x03AE0C94 MOV X1, X31
	0x03AE0C98 BL 0x338FDC0
	0x03AE0C9C TBNZ X0, 0x0, 0x3AE0D30
	0x03AE0CA0 STR X31, [X31 + 0x18]
	0x03AE0CA4 STR S9, [X31 + 0x28]
	0x03AE0CA8 ADRP X8, 0x678000
	0x03AE0CAC LDR V0, [X31 + 0x6C]
	0x03AE0CB0 LDR X8, [X8 + 0xB68]
	0x03AE0CB4 STR W31, [X31 + 0x2C]
	0x03AE0CB8 STP S8, S0, [X31 + 0x20]
	0x03AE0CBC LDR X0, [X8]
	0x03AE0CC0 BL 0x1C16F10
	0x03AE0CC4 ADRP X8, 0x678000
	0x03AE0CC8 LDR X8, [X8 + 0xB58]
	0x03AE0CCC MOV X1, X19
	0x03AE0CD0 MOV X3, X31
	0x03AE0CD4 MOV X20, X0
	0x03AE0CD8 LDR X2, [X8]
	0x03AE0CDC BL 0x2725EC4
	0x03AE0CE0 ADD X0, X31, 0x18
	0x03AE0CE4 MOV X1, X20
	0x03AE0CE8 BL 0x3ADC5C8
	0x03AE0CEC MOVZ W8, 0x1
	0x03AE0CF0 STRB W8, [X31 + 0x2C]
	0x03AE0CF4 LDUR V0, [X31 + 0x18]
	0x03AE0CF8 LDR X0, [X19 + 0x168]
	0x03AE0CFC LDR X8, [X31 + 0x28]
	0x03AE0D00 STR V0, [X31]
	0x03AE0D04 STR X8, [X31 + 0x10]
	0x03AE0D08 CBZ X0, 0x3AE0D44
	0x03AE0D0C ADRP X8, 0x678000
	0x03AE0D10 LDR X8, [X8 + 0xB60]
	0x03AE0D14 LDR V0, [X31]
	0x03AE0D18 LDR X9, [X31 + 0x10]
	0x03AE0D1C ADD X1, X31, 0x30
	0x03AE0D20 LDR X2, [X8]
	0x03AE0D24 STR V0, [X31 + 0x3]
	0x03AE0D28 STR X9, [X31 + 0x40]
	0x03AE0D2C BL 0x2708A48
	0x03AE0D30 LDP X20, X19, [X31 + 0x70]
	0x03AE0D34 LDR X30, [X31 + 0x60]
	0x03AE0D38 LDP D9, D8, [X31 + 0x50]
	0x03AE0D3C ADD X31, X31, 0x80
	0x03AE0D40 RET
	0x03AE0D44 BL 0x1C16F20
	0x03AE0D48 STP X29, X30, [X31 - 0x60]!
	0x03AE0D4C STP X28, X27, [X31 + 0x10]
	0x03AE0D50 STP X26, X25, [X31 + 0x20]
	0x03AE0D54 STP X24, X23, [X31 + 0x30]
	0x03AE0D58 STP X22, X21, [X31 + 0x40]
	0x03AE0D5C STP X20, X19, [X31 + 0x50]
	0x03AE0D60 ADRP X22, 0x902000
	0x03AE0D64 ADRP X23, 0x613000
	0x03AE0D68 ADRP X20, 0x678000
	0x03AE0D6C LDRB W8, [X22 + 0x57A]
	0x03AE0D70 LDR X23, [X23 + 0xA58]
	0x03AE0D74 LDR X20, [X20 + 0xB70]
	0x03AE0D78 MOV X21, X1
	0x03AE0D7C MOV X19, X0
	0x03AE0D80 TBNZ X8, 0x0, 0x3AE0E34
	0x03AE0D84 ADRP X0, 0x669000
	0x03AE0D88 LDR X0, [X0 + 0x560]
	0x03AE0D8C BL 0x1C16CF4
	0x03AE0D90 ADRP X0, 0x678000
	0x03AE0D94 LDR X0, [X0 + 0xAD8]
	0x03AE0D98 BL 0x1C16CF4
	0x03AE0D9C ADRP X0, 0x678000
	0x03AE0DA0 LDR X0, [X0 + 0x908]
	0x03AE0DA4 BL 0x1C16CF4
	0x03AE0DA8 ADRP X0, 0x678000
	0x03AE0DAC LDR X0, [X0 + 0xB78]
	0x03AE0DB0 BL 0x1C16CF4
	0x03AE0DB4 ADRP X0, 0x678000
	0x03AE0DB8 LDR X0, [X0 + 0x8E0]
	0x03AE0DBC BL 0x1C16CF4
	0x03AE0DC0 ADRP X0, 0x678000
	0x03AE0DC4 LDR X0, [X0 + 0x558]
	0x03AE0DC8 BL 0x1C16CF4
	0x03AE0DCC ADRP X0, 0x678000
	0x03AE0DD0 LDR X0, [X0 + 0xB80]
	0x03AE0DD4 BL 0x1C16CF4
	0x03AE0DD8 ADRP X0, 0x613000
	0x03AE0DDC LDR X0, [X0 + 0xA58]
	0x03AE0DE0 BL 0x1C16CF4
	0x03AE0DE4 ADRP X0, 0x613000
	0x03AE0DE8 LDR X0, [X0 + 0x598]
	0x03AE0DEC BL 0x1C16CF4
	0x03AE0DF0 ADRP X0, 0x678000
	0x03AE0DF4 LDR X0, [X0 + 0xAF8]
	0x03AE0DF8 BL 0x1C16CF4
	0x03AE0DFC ADRP X0, 0x678000
	0x03AE0E00 LDR X0, [X0 + 0xB88]
	0x03AE0E04 BL 0x1C16CF4
	0x03AE0E08 ADRP X0, 0x678000
	0x03AE0E0C LDR X0, [X0 + 0xA10]
	0x03AE0E10 BL 0x1C16CF4
	0x03AE0E14 ADRP X0, 0x63A000
	0x03AE0E18 LDR X0, [X0 + 0xE30]
	0x03AE0E1C BL 0x1C16CF4
	0x03AE0E20 ADRP X0, 0x678000
	0x03AE0E24 LDR X0, [X0 + 0xB70]
	0x03AE0E28 BL 0x1C16CF4
	0x03AE0E2C MOVZ W8, 0x1
	0x03AE0E30 STRB W8, [X22 + 0x57A]
	0x03AE0E34 LDR X0, [X23]
	0x03AE0E38 BL 0x1C16F10
	0x03AE0E3C LDR X1, [X20]
	0x03AE0E40 MOV X2, X31
	0x03AE0E44 MOV X20, X0
	0x03AE0E48 BL 0x3C35934
	0x03AE0E4C CBZ X20, 0x3AE1214
	0x03AE0E50 ADRP X8, 0x678000
	0x03AE0E54 LDR X8, [X8 + 0x558]
	0x03AE0E58 MOV X0, X20
	0x03AE0E5C LDR X1, [X8]
	0x03AE0E60 BL 0x21E51FC
	0x03AE0E64 CBZ X21, 0x3AE1214
	0x03AE0E68 MOV X22, X0
	0x03AE0E6C MOV X0, X21
	0x03AE0E70 MOV X1, X31
	0x03AE0E74 BL 0x3C32E90
	0x03AE0E78 CBZ X22, 0x3AE1214
	0x03AE0E7C MOV X1, X0
	0x03AE0E80 MOV X0, X22
	0x03AE0E84 MOV W2, W31
	0x03AE0E88 MOV X3, X31
	0x03AE0E8C BL 0x3C3FEB8
	0x03AE0E90 ADRP X21, 0x8F8000
	0x03AE0E94 LDRB W8, [X21 + 0x783]
	0x03AE0E98 CBNZ W8, 0x3AE0EB0
	0x03AE0E9C ADRP X0, 0x613000
	0x03AE0EA0 LDR X0, [X0 + 0x5A0]
	0x03AE0EA4 BL 0x1C16CF4
	0x03AE0EA8 MOVZ W8, 0x1
	0x03AE0EAC STRB W8, [X21 + 0x783]
	0x03AE0EB0 ADRP X21, 0x613000
	0x03AE0EB4 LDR X21, [X21 + 0x5A0]
	0x03AE0EB8 MOV X0, X22
	0x03AE0EBC MOV X1, X31
	0x03AE0EC0 LDR X8, [X21]
	0x03AE0EC4 LDR X8, [X8 + 0xB8]
	0x03AE0EC8 LDP S0, S1, [X8]
	0x03AE0ECC BL 0x3C3E648
	0x03AE0ED0 ADRP X23, 0x8F8000
	0x03AE0ED4 LDRB W8, [X23 + 0x85B]
	0x03AE0ED8 CBNZ W8, 0x3AE0EF0
	0x03AE0EDC ADRP X0, 0x613000
	0x03AE0EE0 LDR X0, [X0 + 0x5A0]
	0x03AE0EE4 BL 0x1C16CF4
	0x03AE0EE8 MOVZ W8, 0x1
	0x03AE0EEC STRB W8, [X23 + 0x85B]
	0x03AE0EF0 LDR X8, [X21]
	0x03AE0EF4 ADRP X21, 0x678000
	0x03AE0EF8 MOV X0, X22
	0x03AE0EFC MOV X1, X31
	0x03AE0F00 LDR X8, [X8 + 0xB8]
	0x03AE0F04 LDP S0, S1, [X8 + 0xC]
	0x03AE0F08 LDR X21, [X21 + 0xB78]
	0x03AE0F0C BL 0x3C3E764
	0x03AE0F10 ADRP X23, 0x8F9000
	0x03AE0F14 LDRB W8, [X23 + 0x78F]
	0x03AE0F18 CBNZ W8, 0x3AE0F30
	0x03AE0F1C ADRP X0, 0x61B000
	0x03AE0F20 LDR X0, [X0 + 0xF08]
	0x03AE0F24 BL 0x1C16CF4
	0x03AE0F28 MOVZ W8, 0x1
	0x03AE0F2C STRB W8, [X23 + 0x78F]
	0x03AE0F30 ADRP X8, 0x61B000
	0x03AE0F34 LDR X8, [X8 + 0xF08]
	0x03AE0F38 MOV X0, X22
	0x03AE0F3C MOV X1, X31
	0x03AE0F40 LDR X8, [X8]
	0x03AE0F44 LDR X8, [X8 + 0xB8]
	0x03AE0F48 LDP S0, S1, [X8]
	0x03AE0F4C BL 0x3C3E99C
	0x03AE0F50 LDR X1, [X21]
	0x03AE0F54 MOV X0, X20
	0x03AE0F58 BL 0x21E51FC
	0x03AE0F5C CBZ X0, 0x3AE1214
	0x03AE0F60 MOVZ W1, 0x1
	0x03AE0F64 MOV X2, X31
	0x03AE0F68 MOV X21, X0
	0x03AE0F6C BL 0x3E248E0
	0x03AE0F70 LDR X0, [X19 + 0x150]
	0x03AE0F74 CBZ X0, 0x3AE1214
	0x03AE0F78 ADRP X8, 0x678000
	0x03AE0F7C LDR X8, [X8 + 0xB80]
	0x03AE0F80 LDR X1, [X8]
	0x03AE0F84 BL 0x21E52E4
	0x03AE0F88 CBZ X0, 0x3AE1214
	0x03AE0F8C MOV X1, X31
	0x03AE0F90 MOV X22, X0
	0x03AE0F94 BL 0x3E24A24
	0x03AE0F98 MOV W1, W0
	0x03AE0F9C MOV X0, X21
	0x03AE0FA0 MOV X2, X31
	0x03AE0FA4 BL 0x3E24A60
	0x03AE0FA8 MOV X0, X22
	0x03AE0FAC MOV X1, X31
	0x03AE0FB0 BL 0x3E24924
	0x03AE0FB4 SUB W1, W0, 0x1
	0x03AE0FB8 MOV X0, X21
	0x03AE0FBC MOV X2, X31
	0x03AE0FC0 BL 0x3E24960
	0x03AE0FC4 LDR X0, [X19 + 0x100]
	0x03AE0FC8 CBZ X0, 0x3AE1214
	0x03AE0FCC ADRP X28, 0x613000
	0x03AE0FD0 ADRP X23, 0x669000
	0x03AE0FD4 ADRP X27, 0x678000
	0x03AE0FD8 ADRP X26, 0x678000
	0x03AE0FDC ADRP X25, 0x63A000
	0x03AE0FE0 ADRP X24, 0x678000
	0x03AE0FE4 LDR X28, [X28 + 0x598]
	0x03AE0FE8 LDR X23, [X23 + 0x560]
	0x03AE0FEC LDR X27, [X27 + 0x8E0]
	0x03AE0FF0 LDR X26, [X26 + 0x908]
	0x03AE0FF4 LDR X25, [X25 + 0xE30]
	0x03AE0FF8 LDR X24, [X24 + 0xB88]
	0x03AE0FFC MOV X1, X31
	0x03AE1000 BL 0x3C3F49C
	0x03AE1004 MOV X22, X0
	0x03AE1008 MOV X21, X31
	0x03AE100C LDR X0, [X28]
	0x03AE1010 LDR W8, [X0 + 0xE0]
	0x03AE1014 CBNZ W8, 0x3AE101C
	0x03AE1018 BL 0x1C16DFC
	0x03AE101C MOV X0, X22
	0x03AE1020 MOV X1, X31
	0x03AE1024 MOV X2, X31
	0x03AE1028 BL 0x3C354F8
	0x03AE102C TBZ X0, 0x0, 0x3AE1080
	0x03AE1030 CBZ X22, 0x3AE1214
	0x03AE1034 LDR X1, [X23]
	0x03AE1038 MOV X0, X22
	0x03AE103C BL 0x21A3894
	0x03AE1040 LDR X8, [X28]
	0x03AE1044 MOV X21, X0
	0x03AE1048 LDR W9, [X8 + 0xE0]
	0x03AE104C CBNZ W9, 0x3AE1058
	0x03AE1050 MOV X0, X8
	0x03AE1054 BL 0x1C16DFC
	0x03AE1058 MOV X0, X21
	0x03AE105C MOV X1, X31
	0x03AE1060 MOV X2, X31
	0x03AE1064 BL 0x3C354F8
	0x03AE1068 TBNZ X0, 0x0, 0x3AE1080
	0x03AE106C MOV X0, X22
	0x03AE1070 MOV X1, X31
	0x03AE1074 BL 0x3C3F49C
	0x03AE1078 MOV X22, X0
	0x03AE107C B 0x3AE100C
	0x03AE1080 LDR X0, [X28]
	0x03AE1084 LDR W8, [X0 + 0xE0]
	0x03AE1088 CBNZ W8, 0x3AE1090
	0x03AE108C BL 0x1C16DFC
	0x03AE1090 MOV X0, X21
	0x03AE1094 MOV X1, X31
	0x03AE1098 MOV X2, X31
	0x03AE109C BL 0x3C354F8
	0x03AE10A0 TBZ X0, 0x0, 0x3AE1154
	0x03AE10A4 CBZ X21, 0x3AE1214
	0x03AE10A8 ADRP X8, 0x677000
	0x03AE10AC LDR X8, [X8 + 0xAD8]
	0x03AE10B0 MOV X0, X21
	0x03AE10B4 LDR X1, [X8]
	0x03AE10B8 BL 0x21A43A8
	0x03AE10BC CBZ X0, 0x3AE1214
	0x03AE10C0 LDR W8, [X0 + 0x18]
	0x03AE10C4 MOV X21, X0
	0x03AE10C8 CMP W8, 0x1
	0x03AE10CC B.LT 0x3AE1180
	0x03AE10D0 MOV W29, W31
	0x03AE10D4 CMP W29, W8
	0x03AE10D8 B.CS 0x3AE1218
	0x03AE10DC ADD X8, X21, W29, 0x3, SXTW
	0x03AE10E0 LDR X0, [X8 + 0x20]
	0x03AE10E4 CBZ X0, 0x3AE1214
	0x03AE10E8 MOV X1, X31
	0x03AE10EC BL 0x33BE520
	0x03AE10F0 MOV X22, X0
	0x03AE10F4 MOV X0, X20
	0x03AE10F8 MOV X1, X22
	0x03AE10FC MOV X2, X31
	0x03AE1100 BL 0x3C32F80
	0x03AE1104 LDR X8, [X28]
	0x03AE1108 MOV X23, X0
	0x03AE110C LDR W9, [X8 + 0xE0]
	0x03AE1110 CBNZ W9, 0x3AE111C
	0x03AE1114 MOV X0, X8
	0x03AE1118 BL 0x1C16DFC
	0x03AE111C MOV X0, X23
	0x03AE1120 MOV X1, X31
	0x03AE1124 MOV X2, X31
	0x03AE1128 BL 0x3C3883C
	0x03AE112C TBZ X0, 0x0, 0x3AE1140
	0x03AE1130 MOV X0, X20
	0x03AE1134 MOV X1, X22
	0x03AE1138 MOV X2, X31
	0x03AE113C BL 0x3C356B4
	0x03AE1140 LDR W8, [X21 + 0x18]
	0x03AE1144 ADD W29, W29, 0x1
	0x03AE1148 CMP W29, W8
	0x03AE114C B.LT 0x3AE10D4
	0x03AE1150 B 0x3AE1180
	0x03AE1154 ADRP X8, 0x677000
	0x03AE1158 LDR X8, [X8 + 0xA10]
	0x03AE115C LDR X0, [X8]
	0x03AE1160 LDR W8, [X0 + 0xE0]
	0x03AE1164 CBNZ W8, 0x3AE116C
	0x03AE1168 BL 0x1C16DFC
	0x03AE116C ADRP X8, 0x677000
	0x03AE1170 LDR X8, [X8 + 0xAF8]
	0x03AE1174 MOV X0, X20
	0x03AE1178 LDR X1, [X8]
	0x03AE117C BL 0x2298CC8
	0x03AE1180 LDR X1, [X27]
	0x03AE1184 MOV X0, X20
	0x03AE1188 BL 0x21E51FC
	0x03AE118C CBZ X0, 0x3AE1214
	0x03AE1190 LDR X8, [X0]
	0x03AE1194 FMOV S0, W31
	0x03AE1198 FMOV S1, W31
	0x03AE119C FMOV S2, W31
	0x03AE11A0 LDR X9, [X8 + 0x2A8]
	0x03AE11A4 LDR X1, [X8 + 0x2B0]
	0x03AE11A8 FMOV S3, W31
	0x03AE11AC BLR X9
	0x03AE11B0 LDR X1, [X26]
	0x03AE11B4 MOV X0, X20
	0x03AE11B8 BL 0x21E51FC
	0x03AE11BC CBZ X0, 0x3AE1214
	0x03AE11C0 LDR X21, [X0 + 0x100]
	0x03AE11C4 LDR X0, [X25]
	0x03AE11C8 BL 0x1C16F10
	0x03AE11CC LDR X2, [X24]
	0x03AE11D0 MOV X1, X19
	0x03AE11D4 MOV X3, X31
	0x03AE11D8 MOV X22, X0
	0x03AE11DC BL 0x3C45BE8
	0x03AE11E0 CBZ X21, 0x3AE1214
	0x03AE11E4 MOV X0, X21
	0x03AE11E8 MOV X1, X22
	0x03AE11EC MOV X2, X31
	0x03AE11F0 BL 0x3C45C8C
	0x03AE11F4 MOV X0, X20
	0x03AE11F8 LDP X20, X19, [X31 + 0x50]
	0x03AE11FC LDP X22, X21, [X31 + 0x40]
	0x03AE1200 LDP X24, X23, [X31 + 0x30]
	0x03AE1204 LDP X26, X25, [X31 + 0x20]
	0x03AE1208 LDP X28, X27, [X31 + 0x10]
	0x03AE120C LDP X29, X30, [X31], #0x60
	0x03AE1210 RET
	0x03AE1214 BL 0x1C16F20
	0x03AE1218 BL 0x1C16F28
	0x03AE121C STP X30, X21, [X31 - 0x20]!
	0x03AE1220 STP X20, X19, [X31 + 0x10]
	0x03AE1224 ADRP X20, 0x901000
	0x03AE1228 ADRP X21, 0x612000
	0x03AE122C LDRB W8, [X20 + 0x57B]
	0x03AE1230 LDR X21, [X21 + 0x598]
	0x03AE1234 MOV X19, X1
	0x03AE1238 TBNZ X8, 0x0, 0x3AE1250
	0x03AE123C ADRP X0, 0x612000
	0x03AE1240 LDR X0, [X0 + 0x598]
	0x03AE1244 BL 0x1C16CF4
	0x03AE1248 MOVZ W8, 0x1
	0x03AE124C STRB W8, [X20 + 0x57B]
	0x03AE1250 LDR X0, [X21]
	0x03AE1254 LDR W8, [X0 + 0xE0]
	0x03AE1258 CBNZ W8, 0x3AE1260
	0x03AE125C BL 0x1C16DFC
	0x03AE1260 MOV X0, X19
	0x03AE1264 LDP X20, X19, [X31 + 0x10]
	0x03AE1268 MOV X1, X31
	0x03AE126C LDP X30, X21, [X31], #0x20
	0x03AE1270 B 0x3C394A8
	0x03AE1274 STP X30, X21, [X31 - 0x20]!
	0x03AE1278 STP X20, X19, [X31 + 0x10]
	0x03AE127C ADRP X21, 0x901000
	0x03AE1280 ADRP X20, 0x612000
	0x03AE1284 LDRB W8, [X21 + 0x57C]
	0x03AE1288 LDR X20, [X20 + 0x598]
	0x03AE128C MOV X19, X1
	0x03AE1290 TBNZ X8, 0x0, 0x3AE12B4
	0x03AE1294 ADRP X0, 0x612000
	0x03AE1298 LDR X0, [X0 + 0xD78]
	0x03AE129C BL 0x1C16CF4
	0x03AE12A0 ADRP X0, 0x612000
	0x03AE12A4 LDR X0, [X0 + 0x598]
	0x03AE12A8 BL 0x1C16CF4
	0x03AE12AC MOVZ W8, 0x1
	0x03AE12B0 STRB W8, [X21 + 0x57C]
	0x03AE12B4 LDR X0, [X20]
	0x03AE12B8 ADRP X20, 0x612000
	0x03AE12BC LDR W8, [X0 + 0xE0]
	0x03AE12C0 LDR X20, [X20 + 0xD78]
	0x03AE12C4 CBNZ W8, 0x3AE12CC
	0x03AE12C8 BL 0x1C16DFC
	0x03AE12CC LDR X1, [X20]
	0x03AE12D0 MOV X0, X19
	0x03AE12D4 LDP X20, X19, [X31 + 0x10]
	0x03AE12D8 LDP X30, X21, [X31], #0x20
	0x03AE12DC B 0x222D35C
	0x03AE12E0 STP X30, X21, [X31 - 0x20]!
	0x03AE12E4 STP X20, X19, [X31 + 0x10]
	0x03AE12E8 ADRP X20, 0x901000
	0x03AE12EC ADRP X21, 0x612000
	0x03AE12F0 LDRB W8, [X20 + 0x57D]
	0x03AE12F4 LDR X21, [X21 + 0x598]
	0x03AE12F8 MOV X19, X1
	0x03AE12FC TBNZ X8, 0x0, 0x3AE1314
	0x03AE1300 ADRP X0, 0x612000
	0x03AE1304 LDR X0, [X0 + 0x598]
	0x03AE1308 BL 0x1C16CF4
	0x03AE130C MOVZ W8, 0x1
	0x03AE1310 STRB W8, [X20 + 0x57D]
	0x03AE1314 LDR X0, [X21]
	0x03AE1318 LDR W8, [X0 + 0xE0]
	0x03AE131C CBNZ W8, 0x3AE1324
	0x03AE1320 BL 0x1C16DFC
	0x03AE1324 MOV X0, X19
	0x03AE1328 LDP X20, X19, [X31 + 0x10]
	0x03AE132C MOV X1, X31
	0x03AE1330 LDP X30, X21, [X31], #0x20
	0x03AE1334 B 0x3C394A8
	0x03AE1338 STP X30, X21, [X31 - 0x20]!
	0x03AE133C STP X20, X19, [X31 + 0x10]
	0x03AE1340 ADRP X21, 0x901000
	0x03AE1344 ADRP X20, 0x612000
	0x03AE1348 LDRB W8, [X21 + 0x57E]
	0x03AE134C LDR X20, [X20 + 0x598]
	0x03AE1350 MOV X19, X1
	0x03AE1354 TBNZ X8, 0x0, 0x3AE1378
	0x03AE1358 ADRP X0, 0x677000
	0x03AE135C LDR X0, [X0 + 0xB90]
	0x03AE1360 BL 0x1C16CF4
	0x03AE1364 ADRP X0, 0x612000
	0x03AE1368 LDR X0, [X0 + 0x598]
	0x03AE136C BL 0x1C16CF4
	0x03AE1370 MOVZ W8, 0x1
	0x03AE1374 STRB W8, [X21 + 0x57E]
	0x03AE1378 LDR X0, [X20]
	0x03AE137C ADRP X20, 0x677000
	0x03AE1380 LDR W8, [X0 + 0xE0]
	0x03AE1384 LDR X20, [X20 + 0xB90]
	0x03AE1388 CBNZ W8, 0x3AE1390
	0x03AE138C BL 0x1C16DFC
	0x03AE1390 LDR X1, [X20]
	0x03AE1394 MOV X0, X19
	0x03AE1398 LDP X20, X19, [X31 + 0x10]
	0x03AE139C LDP X30, X21, [X31], #0x20
	0x03AE13A0 B 0x222D35C
	0x03AE13A4 RET
	0x03AE13A8 STP D9, D8, [X31 - 0x30]!
	0x03AE13AC STR X30, [X31 + 0x10]
	0x03AE13B0 STP X20, X19, [X31 + 0x20]
	0x03AE13B4 ADRP X20, 0x901000
	0x03AE13B8 LDRB W8, [X20 + 0x580]
	0x03AE13BC MOV V8.16B, V1.16B
	0x03AE13C0 MOV V9.16B, V0.16B
	0x03AE13C4 MOV X19, X0
	0x03AE13C8 TBNZ X8, 0x0, 0x3AE13E0
	0x03AE13CC ADRP X0, 0x677000
	0x03AE13D0 LDR X0, [X0 + 0xB98]
	0x03AE13D4 BL 0x1C16CF4
	0x03AE13D8 MOVZ W8, 0x1
	0x03AE13DC STRB W8, [X20 + 0x580]
	0x03AE13E0 LDR X0, [X19 + 0x150]
	0x03AE13E4 CBZ X0, 0x3AE1424
	0x03AE13E8 ADRP X8, 0x677000
	0x03AE13EC LDR X8, [X8 + 0xB98]
	0x03AE13F0 LDR X1, [X8]
	0x03AE13F4 BL 0x21E52E4
	0x03AE13F8 CBZ X0, 0x3AE1424
	0x03AE13FC MOV X1, X31
	0x03AE1400 BL 0x3E2226C
	0x03AE1404 MOV X0, X19
	0x03AE1408 LDP X20, X19, [X31 + 0x20]
	0x03AE140C LDR X30, [X31 + 0x10]
	0x03AE1410 MOV V1.16B, V0.16B
	0x03AE1414 MOV V0.16B, V9.16B
	0x03AE1418 MOV V2.16B, V8.16B
	0x03AE141C LDP D9, D8, [X31], #0x30
	0x03AE1420 B 0x3AE0C34
	0x03AE1424 BL 0x1C16F20
	0x03AE1428 STR D8, [X31 - 0x30]!
	0x03AE142C STP X30, X21, [X31 + 0x10]
	0x03AE1430 STP X20, X19, [X31 + 0x20]
	0x03AE1434 ADRP X21, 0x901000
	0x03AE1438 ADRP X20, 0x612000
	0x03AE143C LDRB W8, [X21 + 0x582]
	0x03AE1440 LDR X20, [X20 + 0x598]
	0x03AE1444 MOV V8.16B, V0.16B
	0x03AE1448 MOV X19, X0
	0x03AE144C TBNZ X8, 0x0, 0x3AE1470
	0x03AE1450 ADRP X0, 0x677000
	0x03AE1454 LDR X0, [X0 + 0xB98]
	0x03AE1458 BL 0x1C16CF4
	0x03AE145C ADRP X0, 0x612000
	0x03AE1460 LDR X0, [X0 + 0x598]
	0x03AE1464 BL 0x1C16CF4
	0x03AE1468 MOVZ W8, 0x1
	0x03AE146C STRB W8, [X21 + 0x582]
	0x03AE1470 LDR X0, [X20]
	0x03AE1474 LDR X20, [X19 + 0x150]
	0x03AE1478 LDR W8, [X0 + 0xE0]
	0x03AE147C CBNZ W8, 0x3AE1484
	0x03AE1480 BL 0x1C16DFC
	0x03AE1484 MOV X0, X20
	0x03AE1488 MOV X1, X31
	0x03AE148C BL 0x3C38948
	0x03AE1490 TBZ X0, 0x0, 0x3AE14C8
	0x03AE1494 LDR X0, [X19 + 0x150]
	0x03AE1498 CBZ X0, 0x3AE14D8
	0x03AE149C ADRP X8, 0x677000
	0x03AE14A0 LDR X8, [X8 + 0xB98]
	0x03AE14A4 LDR X1, [X8]
	0x03AE14A8 BL 0x21E52E4
	0x03AE14AC CBZ X0, 0x3AE14D8
	0x03AE14B0 LDP X20, X19, [X31 + 0x20]
	0x03AE14B4 LDP X30, X21, [X31 + 0x10]
	0x03AE14B8 MOV V0.16B, V8.16B
	0x03AE14BC MOV X1, X31
	0x03AE14C0 LDR V8, [X31], #0x30
	0x03AE14C4 B 0x3E222A8
	0x03AE14C8 LDP X20, X19, [X31 + 0x20]
	0x03AE14CC LDP X30, X21, [X31 + 0x10]
	0x03AE14D0 LDR V8, [X31], #0x30
	0x03AE14D4 RET
	0x03AE14D8 BL 0x1C16F20
	0x03AE14DC STR D8, [X31 - 0x30]!
	0x03AE14E0 STP X30, X21, [X31 + 0x10]
	0x03AE14E4 STP X20, X19, [X31 + 0x20]
	0x03AE14E8 ADRP X20, 0x901000
	0x03AE14EC ADRP X21, 0x677000
	0x03AE14F0 LDRB W8, [X20 + 0x584]
	0x03AE14F4 LDR X21, [X21 + 0xBA0]
	0x03AE14F8 MOV V8.16B, V0.16B
	0x03AE14FC MOV X19, X0
	0x03AE1500 TBNZ X8, 0x0, 0x3AE1518
	0x03AE1504 ADRP X0, 0x677000
	0x03AE1508 LDR X0, [X0 + 0xBA0]
	0x03AE150C BL 0x1C16CF4
	0x03AE1510 MOVZ W8, 0x1
	0x03AE1514 STRB W8, [X20 + 0x584]
	0x03AE1518 LDR X0, [X21]
	0x03AE151C BL 0x1C16F10
	0x03AE1520 MOV X1, X31
	0x03AE1524 MOV X20, X0
	0x03AE1528 BL 0x33BDD8C
	0x03AE152C STR W31, [X20 + 0x10]
	0x03AE1530 STR X19, [X20 + 0x28]
	0x03AE1534 STR S8, [X20 + 0x20]
	0x03AE1538 MOV X0, X20
	0x03AE153C LDP X20, X19, [X31 + 0x20]
	0x03AE1540 LDP X30, X21, [X31 + 0x10]
	0x03AE1544 LDR V8, [X31], #0x30
	0x03AE1548 RET
	0x03AE154C STR X30, [X31 - 0x20]!
	0x03AE1550 STP X20, X19, [X31 + 0x10]
	0x03AE1554 MOV W19, W1
	0x03AE1558 MOV X1, X31
	0x03AE155C MOV X20, X0
	0x03AE1560 BL 0x33BDD8C
	0x03AE1564 STR W19, [X20 + 0x10]
	0x03AE1568 LDP X20, X19, [X31 + 0x10]
	0x03AE156C LDR X30, [X31], #0x20
	0x03AE1570 RET
	0x03AE1574 STR X30, [X31 - 0x40]!
	0x03AE1578 STP X24, X23, [X31 + 0x10]
	0x03AE157C STP X22, X21, [X31 + 0x20]
	0x03AE1580 STP X20, X19, [X31 + 0x30]
	0x03AE1584 ADRP X21, 0x901000
	0x03AE1588 LDRB W8, [X21 + 0x586]
	0x03AE158C MOV X20, X1
	0x03AE1590 MOV X19, X0
	0x03AE1594 TBNZ X8, 0x0, 0x3AE15AC
	0x03AE1598 ADRP X0, 0x612000
	0x03AE159C LDR X0, [X0 + 0x598]
	0x03AE15A0 BL 0x1C16CF4
	0x03AE15A4 MOVZ W8, 0x1
	0x03AE15A8 STRB W8, [X21 + 0x586]
	0x03AE15AC CBZ X20, 0x3AE16A4
	0x03AE15B0 LDRB W8, [X20 + 0x120]
	0x03AE15B4 CBNZ W8, 0x3AE15C8
	0x03AE15B8 MOVZ W1, 0x1
	0x03AE15BC MOV X0, X20
	0x03AE15C0 MOV X2, X31
	0x03AE15C4 BL 0x3E47488
	0x03AE15C8 MOV X0, X20
	0x03AE15CC MOV X1, X31
	0x03AE15D0 BL 0x3C32E90
	0x03AE15D4 CBZ X0, 0x3AE16A4
	0x03AE15D8 MOV X1, X31
	0x03AE15DC MOV X20, X0
	0x03AE15E0 BL 0x3C3F49C
	0x03AE15E4 CBZ X0, 0x3AE16A4
	0x03AE15E8 MOV X1, X31
	0x03AE15EC MOV X21, X0
	0x03AE15F0 BL 0x3C40C8C
	0x03AE15F4 CMP W0, 0x1
	0x03AE15F8 B.LT 0x3AE1690
	0x03AE15FC ADRP X24, 0x612000
	0x03AE1600 LDR X24, [X24 + 0x598]
	0x03AE1604 MOVN W22, 0x0
	0x03AE1608 ADD W1, W22, 0x1
	0x03AE160C MOV X0, X21
	0x03AE1610 MOV X2, X31
	0x03AE1614 BL 0x3C410A0
	0x03AE1618 LDR X8, [X24]
	0x03AE161C MOV X23, X0
	0x03AE1620 LDR W9, [X8 + 0xE0]
	0x03AE1624 CBNZ W9, 0x3AE1630
	0x03AE1628 MOV X0, X8
	0x03AE162C BL 0x1C16DFC
	0x03AE1630 MOV X0, X23
	0x03AE1634 MOV X1, X20
	0x03AE1638 MOV X2, X31
	0x03AE163C BL 0x3C3883C
	0x03AE1640 TBNZ X0, 0x0, 0x3AE1664
	0x03AE1644 MOV X0, X21
	0x03AE1648 MOV X1, X31
	0x03AE164C BL 0x3C40C8C
	0x03AE1650 ADD W8, W22, 0x2
	0x03AE1654 ADD W22, W22, 0x1
	0x03AE1658 CMP W8, W0
	0x03AE165C B.LT 0x3AE1608
	0x03AE1660 B 0x3AE1690
	0x03AE1664 TBNZ X22, 0x1F, 0x3AE1690
	0x03AE1668 MOVZ W2, 0x1
	0x03AE166C MOV X0, X19
	0x03AE1670 MOV W1, W22
	0x03AE1674 BL 0x3ADEA84
	0x03AE1678 MOV X0, X19
	0x03AE167C LDP X20, X19, [X31 + 0x30]
	0x03AE1680 LDP X22, X21, [X31 + 0x20]
	0x03AE1684 LDP X24, X23, [X31 + 0x10]
	0x03AE1688 LDR X30, [X31], #0x40
	0x03AE168C B 0x3AE0830
	0x03AE1690 LDP X20, X19, [X31 + 0x30]
	0x03AE1694 LDP X22, X21, [X31 + 0x20]
	0x03AE1698 LDP X24, X23, [X31 + 0x10]
	0x03AE169C LDR X30, [X31], #0x40
	0x03AE16A0 RET
	0x03AE16A4 BL 0x1C16F20
	0x03AE16A8 STP X30, X21, [X31 - 0x20]!
	0x03AE16AC STP X20, X19, [X31 + 0x10]
	0x03AE16B0 ADRP X19, 0x901000
	0x03AE16B4 ADRP X21, 0x677000
	0x03AE16B8 ADRP X20, 0x677000
	0x03AE16BC LDRB W8, [X19 + 0x587]
	0x03AE16C0 LDR X21, [X21 + 0x9A0]
	0x03AE16C4 LDR X20, [X20 + 0xA10]
	0x03AE16C8 TBNZ X8, 0x0, 0x3AE16EC
	0x03AE16CC ADRP X0, 0x677000
	0x03AE16D0 LDR X0, [X0 + 0x9A0]
	0x03AE16D4 BL 0x1C16CF4
	0x03AE16D8 ADRP X0, 0x677000
	0x03AE16DC LDR X0, [X0 + 0xA10]
	0x03AE16E0 BL 0x1C16CF4
	0x03AE16E4 MOVZ W8, 0x1
	0x03AE16E8 STRB W8, [X19 + 0x587]
	0x03AE16EC LDR X0, [X21]
	0x03AE16F0 BL 0x1C16F10
	0x03AE16F4 MOV X1, X31
	0x03AE16F8 MOV X19, X0
	0x03AE16FC BL 0x33BDD8C
	0x03AE1700 LDR X8, [X20]
	0x03AE1704 LDR X8, [X8 + 0xB8]
	0x03AE1708 STR X19, [X8]
	0x03AE170C LDP X20, X19, [X31 + 0x10]
	0x03AE1710 LDP X30, X21, [X31], #0x20
	0x03AE1714 RET
	0x03AE1718 LDR X0, [X0 + 0x20]
	0x03AE171C RET
	0x03AE1720 STR X1, [X0 + 0x20]
	0x03AE1724 RET
	0x03AE1728 LDR X0, [X0 + 0x28]
	0x03AE172C RET
	0x03AE1730 STR X1, [X0 + 0x28]
	0x03AE1734 RET
	0x03AE1738 LDR X0, [X0 + 0x30]
	0x03AE173C RET
	0x03AE1740 STR X1, [X0 + 0x30]
	0x03AE1744 RET
	0x03AE1748 LDR X0, [X0 + 0x38]
	0x03AE174C RET
	0x03AE1750 STR X1, [X0 + 0x38]
	0x03AE1754 RET
	0x03AE1758 STP X30, X21, [X31 - 0x20]!
	0x03AE175C STP X20, X19, [X31 + 0x10]
	0x03AE1760 ADRP X20, 0x901000
	0x03AE1764 ADRP X21, 0x639000
	0x03AE1768 LDRB W8, [X20 + 0x588]
	0x03AE176C LDR X21, [X21 + 0xDF8]
	0x03AE1770 MOV X19, X0
	0x03AE1774 TBNZ X8, 0x0, 0x3AE178C
	0x03AE1778 ADRP X0, 0x639000
	0x03AE177C LDR X0, [X0 + 0xDF8]
	0x03AE1780 BL 0x1C16CF4
	0x03AE1784 MOVZ W8, 0x1
	0x03AE1788 STRB W8, [X20 + 0x588]
	0x03AE178C LDR X0, [X21]
	0x03AE1790 LDR W8, [X0 + 0xE0]
	0x03AE1794 CBNZ W8, 0x3AE179C
	0x03AE1798 BL 0x1C16DFC
	0x03AE179C MOV X0, X31
	0x03AE17A0 BL 0x3E4FF90
	0x03AE17A4 MOV X20, X0
	0x03AE17A8 MOV X0, X19
	0x03AE17AC MOV X1, X31
	0x03AE17B0 BL 0x3C32ECC
	0x03AE17B4 CBZ X20, 0x3AE17D0
	0x03AE17B8 MOV X1, X0
	0x03AE17BC MOV X0, X20
	0x03AE17C0 LDP X20, X19, [X31 + 0x10]
	0x03AE17C4 MOV X2, X31
	0x03AE17C8 LDP X30, X21, [X31], #0x20
	0x03AE17CC B 0x3E4BE8C
	0x03AE17D0 BL 0x1C16F20
	0x03AE17D4 STR X30, [X31 - 0x30]!
	0x03AE17D8 STP X22, X21, [X31 + 0x10]
	0x03AE17DC STP X20, X19, [X31 + 0x20]
	0x03AE17E0 ADRP X21, 0x901000
	0x03AE17E4 ADRP X22, 0x677000
	0x03AE17E8 ADRP X20, 0x612000
	0x03AE17EC LDRB W8, [X21 + 0x589]
	0x03AE17F0 LDR X22, [X22 + 0xBA8]
	0x03AE17F4 LDR X20, [X20 + 0x598]
	0x03AE17F8 MOV X19, X0
	0x03AE17FC TBNZ X8, 0x0, 0x3AE1820
	0x03AE1800 ADRP X0, 0x677000
	0x03AE1804 LDR X0, [X0 + 0xBA8]
	0x03AE1808 BL 0x1C16CF4
	0x03AE180C ADRP X0, 0x612000
	0x03AE1810 LDR X0, [X0 + 0x598]
	0x03AE1814 BL 0x1C16CF4
	0x03AE1818 MOVZ W8, 0x1
	0x03AE181C STRB W8, [X21 + 0x589]
	0x03AE1820 LDR X1, [X22]
	0x03AE1824 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 352
	002 Move [X31+192], D15
	003 Move [X31+200], D14
	004 Move [X31+208], D13
	005 Move [X31+216], D12
	006 Move [X31+224], D11
	007 Move [X31+232], D10
	008 Move [X31+240], D9
	009 Move [X31+248], D8
	010 Move [X31+256], X29
	011 Move [X31+264], X30
	012 Move [X31+272], X28
	013 Move [X31+280], X27
	014 Move [X31+288], X26
	015 Move [X31+296], X25
	016 Move [X31+304], X24
	017 Move [X31+312], X23
	018 Move [X31+320], X22
	019 Move [X31+328], X21
	020 Move [X31+336], X20
	021 Move [X31+344], X19
	022 NotImplemented "Instruction MRS not yet implemented."
	023 Move X8, [X25+40]
	024 Move X20, 0x903000
	025 Move X19, X0
	026 Move [X31+184], X8
	027 Move W8, [X20+1401]
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {100}
	032 Move X0, 0x66A000
	033 Move X0, [X0+1376]
	034 Call 0x1C17CF4
	035 Move X0, 0x679000
	036 Move X0, [X0+2856]
	037 Call 0x1C17CF4
	038 Move X0, 0x679000
	039 Move X0, [X0+1896]
	040 Call 0x1C17CF4
	041 Move X0, 0x679000
	042 Move X0, [X0+2704]
	043 Call 0x1C17CF4
	044 Move X0, 0x679000
	045 Move X0, [X0+2712]
	046 Call 0x1C17CF4
	047 Move X0, 0x679000
	048 Move X0, [X0+2584]
	049 Call 0x1C17CF4
	050 Move X0, 0x679000
	051 Move X0, [X0+1904]
	052 Call 0x1C17CF4
	053 Move X0, 0x679000
	054 Move X0, [X0+1912]
	055 Call 0x1C17CF4
	056 Move X0, 0x679000
	057 Move X0, [X0+2720]
	058 Call 0x1C17CF4
	059 Move X0, 0x679000
	060 Move X0, [X0+2592]
	061 Call 0x1C17CF4
	062 Move X0, 0x614000
	063 Move X0, [X0+1432]
	064 Call 0x1C17CF4
	065 Move X0, 0x66A000
	066 Move X0, [X0+1720]
	067 Call 0x1C17CF4
	068 Move X0, 0x63B000
	069 Move X0, [X0+3184]
	070 Call 0x1C17CF4
	071 Move X0, 0x679000
	072 Move X0, [X0+1920]
	073 Call 0x1C17CF4
	074 Move X0, 0x679000
	075 Move X0, [X0+1928]
	076 Call 0x1C17CF4
	077 Move X0, 0x679000
	078 Move X0, [X0+1888]
	079 Call 0x1C17CF4
	080 Move X0, 0x679000
	081 Move X0, [X0+2864]
	082 Call 0x1C17CF4
	083 Move X0, 0x679000
	084 Move X0, [X0+2872]
	085 Call 0x1C17CF4
	086 Move X0, 0x674000
	087 Move X0, [X0+2608]
	088 Call 0x1C17CF4
	089 Move X0, 0x674000
	090 Move X0, [X0+2616]
	091 Call 0x1C17CF4
	092 Move X0, 0x616000
	093 Move X0, [X0+2480]
	094 Call 0x1C17CF4
	095 Move X0, 0x679000
	096 Move X0, [X0+2880]
	097 Call 0x1C17CF4
	098 Move W8, 1
	099 Move [X20+1401], W8
	100 Move [X31+176], W31
	101 Move [X31+168], X31
	102 Move X1, [X19+376]
	103 Compare X1, 0
	104 JumpIfEqual {110}
	105 Move X0, X19
	106 Move X2, X31
	107 Call MonoBehaviour.StopCoroutine, X0, X1
	108 Move X0, X19
	109 Call TMP_Dropdown.ImmediateDestroyDropdownList, X0
	110 Move X8, [X19]
	111 Move X0, X19
	112 Move X9, [X8+456]
	113 Move X1, [X8+464]
	114 NotImplemented "Instruction BLR not yet implemented."
	115 Move TEMP, X0
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {843}
	119 Move X8, [X19]
	120 Move X0, X19
	121 Move X9, [X8+696]
	122 Move X1, [X8+704]
	123 NotImplemented "Instruction BLR not yet implemented."
	124 Move TEMP, X0
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfNotEqual {843}
	128 Move X23, 0x614000
	129 Move X23, [X23+1432]
	130 Move X20, [X19+336]
	131 Move X0, [X23]
	132 Move W8, [X0+224]
	133 Compare W8, 0
	134 JumpIfNotEqual {136}
	135 Call 0x1C17DFC
	136 Move X0, X20
	137 Move X1, X31
	138 Move X2, X31
	139 Call Object.op_Inequality, X0, X1
	140 Move TEMP, X0
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfEqual {843}
	144 Move X20, 0x679000
	145 Move X20, [X20+1888]
	146 Move X0, [X20]
	147 Move W8, [X0+224]
	148 Compare W8, 0
	149 JumpIfNotEqual {151}
	150 Call 0x1C17DFC
	151 Move X8, 0x679000
	152 Move X8, [X8+1920]
	153 Move X0, [X8]
	154 Call 0x2670F3C
	155 Move X21, X0
	156 Move X0, X19
	157 Move X1, X31
	158 Call Component.get_gameObject, X0
	159 Compare X0, 0
	160 JumpIfEqual {811}
	161 Move X8, 0x679000
	162 Move X8, [X8+1896]
	163 Move W1, W31
	164 Move X2, X21
	165 Move X3, [X8]
	166 Call 0x21E74C8, X0, X1, X2
	167 Compare X21, 0
	168 JumpIfEqual {811}
	169 Move W8, [X21+24]
	170 Compare W8, 0
	171 JumpIfEqual {843}
	172 Move X24, 0x679000
	173 Move X24, [X24+1912]
	174 Subtract W1, W8, 1
	175 Move X0, X21
	176 Move X2, [X24]
	177 Call List`1<Object>.get_Item, X0, X1
	178 Move W8, [X21+24]
	179 Move X26, X0
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move W22, W31
	182 Move X2, [X24]
	183 Move X0, X21
	184 Move W1, W22
	185 Call List`1<Object>.get_Item, X0, X1
	186 Compare X0, 0
	187 JumpIfEqual {811}
	188 Move X1, X31
	189 Call Canvas.get_isRootCanvas, X0
	190 Move TEMP, X0
	191 And TEMP, TEMP, 1
	192 Compare TEMP, 1
	193 JumpIfEqual {197}
	194 Move W8, [X21+24]
	195 Add W22, W22, 1
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Move X2, [X24]
	198 Move X0, X21
	199 Move W1, W22
	200 Call List`1<Object>.get_Item, X0, X1
	201 Move X26, X0
	202 Move X0, [X20]
	203 Move W8, [X0+224]
	204 Compare W8, 0
	205 JumpIfNotEqual {207}
	206 Call 0x1C17DFC
	207 Move X8, 0x679000
	208 Move X8, [X8+1928]
	209 Move X0, X21
	210 Move X1, [X8]
	211 Call 0x2670FD4, X0
	212 Move W8, [X19+368]
	213 Compare W8, 0
	214 JumpIfNotEqual {220}
	215 Move X0, X19
	216 Call TMP_Dropdown.SetupTemplate, X0
	217 Move W8, [X19+368]
	218 Compare W8, 0
	219 JumpIfEqual {843}
	220 Move X0, [X19+256]
	221 Compare X0, 0
	222 JumpIfEqual {811}
	223 Move X1, X31
	224 Call Component.get_gameObject, X0
	225 Compare X0, 0
	226 JumpIfEqual {811}
	227 Move W1, 1
	228 Move X2, X31
	229 Call GameObject.SetActive, X0, X1
	230 Move X0, [X19+256]
	231 Compare X0, 0
	232 JumpIfEqual {811}
	233 Move X8, 0x66A000
	234 Move X8, [X8+1376]
	235 Move X1, [X8]
	236 Call 0x21A4894, X0
	237 Compare X26, 0
	238 JumpIfEqual {811}
	239 Move X21, X0
	240 Move X0, X26
	241 Move X1, X31
	242 Call Canvas.get_sortingLayerID, X0
	243 Compare X21, 0
	244 JumpIfEqual {811}
	245 Move W1, W0
	246 Move X0, X21
	247 Move X2, X31
	248 Call Canvas.set_sortingLayerID, X0, X1
	249 Move X0, [X19+256]
	250 Compare X0, 0
	251 JumpIfEqual {811}
	252 Move X1, X31
	253 Call Component.get_gameObject, X0
	254 Move X8, [X19]
	255 Move X1, X0
	256 Move X0, X19
	257 Move X9, [X8+1064]
	258 Move X2, [X8+1072]
	259 NotImplemented "Instruction BLR not yet implemented."
	260 Move [X19+336], X0
	261 Compare X0, 0
	262 JumpIfEqual {811}
	263 Move X8, 0x679000
	264 Move X8, [X8+2880]
	265 Move X2, X31
	266 Move X1, [X8]
	267 Call Object.set_name, X0, X1
	268 Move X0, [X19+336]
	269 Compare X0, 0
	270 JumpIfEqual {811}
	271 Move W1, 1
	272 Move X2, X31
	273 Call GameObject.SetActive, X0, X1
	274 Move X0, [X19+336]
	275 Compare X0, 0
	276 JumpIfEqual {811}
	277 Move X1, X31
	278 Call GameObject.get_transform, X0
	279 Compare X0, 0
	280 JumpIfEqual {287}
	281 Move X8, 0x63A000
	282 Move X8, [X8+3184]
	283 Move X9, [X0]
	284 Move X8, [X8]
	285 NotImplemented "Instruction CMP not yet implemented."
	286 NotImplemented "Instruction CSEL not yet implemented."
	287 Move X20, X31
	288 Move X0, [X19+256]
	289 Compare X0, 0
	290 JumpIfEqual {811}
	291 Move X1, X31
	292 Call Component.get_transform, X0
	293 Compare X0, 0
	294 JumpIfEqual {811}
	295 Move X1, X31
	296 Call Transform.get_parent, X0
	297 Compare X20, 0
	298 JumpIfEqual {811}
	299 Move X1, X0
	300 Move X0, X20
	301 Move W2, W31
	302 Move X3, X31
	303 Call Transform.SetParent, X0, X1, X2
	304 Move X0, [X19+336]
	305 Compare X0, 0
	306 JumpIfEqual {811}
	307 Move X8, 0x678000
	308 Move X8, [X8+2856]
	309 Move X1, [X8]
	310 Call 0x21E6548, X0
	311 Compare X0, 0
	312 JumpIfEqual {811}
	313 Move X21, X0
	314 Move X0, [X0+48]
	315 Compare X0, 0
	316 JumpIfEqual {811}
	317 Move X1, X31
	318 Call Transform.get_parent, X0
	319 Compare X0, 0
	320 JumpIfEqual {811}
	321 Move X1, X31
	322 Call Component.get_gameObject, X0
	323 Compare X0, 0
	324 JumpIfEqual {811}
	325 Move X1, X31
	326 Call GameObject.get_transform, X0
	327 Compare X0, 0
	328 JumpIfEqual {335}
	329 Move X8, 0x63A000
	330 Move X8, [X8+3184]
	331 Move X9, [X0]
	332 Move X8, [X8]
	333 NotImplemented "Instruction CMP not yet implemented."
	334 NotImplemented "Instruction CSEL not yet implemented."
	335 Move X22, X31
	336 Move X0, [X21+48]
	337 Compare X0, 0
	338 JumpIfEqual {811}
	339 Move X1, X31
	340 Call Component.get_gameObject, X0
	341 Compare X0, 0
	342 JumpIfEqual {811}
	343 Move W1, 1
	344 Move X2, X31
	345 Call GameObject.SetActive, X0, X1
	346 Compare X22, 0
	347 JumpIfEqual {811}
	348 Move X0, X22
	349 Move X1, X31
	350 Call RectTransform.get_rect, X0
	351 Move X0, [X21+48]
	352 Compare X0, 0
	353 JumpIfEqual {811}
	354 Move X1, X31
	355 Move V9, V1
	356 Move V10, V3
	357 Call RectTransform.get_rect, X0
	358 Move X0, [X21+48]
	359 Compare X0, 0
	360 JumpIfEqual {811}
	361 Move X1, X31
	362 Move V12, V1
	363 Move V14, V3
	364 Call Transform.get_localPosition, X0
	365 Move X0, [X21+48]
	366 Compare X0, 0
	367 JumpIfEqual {811}
	368 Move X1, X31
	369 Move V11, V1
	370 Call Transform.get_localPosition, X0
	371 Move X8, [X19+352]
	372 Compare X8, 0
	373 JumpIfEqual {811}
	374 Move W2, [X8+24]
	375 Move W9, [X8+28]
	376 Move V13, V1
	377 Move [X31+80], X22
	378 Move [X31+48], X20
	379 Add W9, W9, 1
	380 NotImplemented "Instruction CMP not yet implemented."
	381 Move [X31+24], X25
	382 Move [X31+32], X26
	383 Move [X8+24], W31
	384 Move [X8+28], W9
	385 Move X0, [X8+16]
	386 Move W1, W31
	387 Move X3, X31
	388 Call Array.Clear, X0, X1, X2
	389 Move X8, [X19+312]
	390 Compare X8, 0
	391 JumpIfEqual {811}
	392 Move X20, 0x678000
	393 Move X22, 0x678000
	394 Move X20, [X20+2872]
	395 Move X22, [X22+2592]
	396 Add S0, S14, S12
	397 Add S1, S10, S9
	398 Subtract S2, S12, S9
	399 Add X9, X31, 128
	400 Subtract S0, S0, S1
	401 Move X25, X31
	402 Move W24, W31
	403 Add S10, S2, S11
	404 Or X29, X9, 7
	405 Add S9, S0, S13
	406 Move [X31+40], X21
	407 Move X8, [X8+16]
	408 Compare X8, 0
	409 JumpIfEqual {811}
	410 Move W8, [X8+24]
	411 NotImplemented "Instruction CMP not yet implemented."
	412 Move X0, [X20]
	413 Call 0x1C17F10
	414 Move X1, X31
	415 Move X26, X0
	416 Call Object..ctor, X0
	417 Compare X26, 0
	418 JumpIfEqual {811}
	419 Move [X26+24], X19
	420 Move X8, [X19+312]
	421 Compare X8, 0
	422 JumpIfEqual {811}
	423 Move X0, [X8+16]
	424 Compare X0, 0
	425 JumpIfEqual {811}
	426 Move X2, [X22]
	427 Move W1, W24
	428 Call List`1<Object>.get_Item, X0, X1
	429 Move X4, [X19+352]
	430 Move X1, X0
	431 Move X0, X19
	432 Move W2, W31
	433 Move X3, X21
	434 Call TMP_Dropdown.AddItem, X0, X1, X2, X3, X4
	435 Move [X26+16], X0
	436 Move X27, X0
	437 Move X0, [X23]
	438 Move W8, [X0+224]
	439 Compare W8, 0
	440 JumpIfNotEqual {442}
	441 Call 0x1C17DFC
	442 Move X0, X27
	443 Move X1, X31
	444 Move X2, X31
	445 Call Object.op_Equality, X0, X1
	446 Move TEMP, X0
	447 And TEMP, TEMP, 1
	448 Compare TEMP, 1
	449 JumpIfEqual {563}
	450 Move X8, [X26+16]
	451 Compare X8, 0
	452 JumpIfEqual {811}
	453 Move X0, [X8+56]
	454 Compare X0, 0
	455 JumpIfEqual {811}
	456 Move W8, [X19+304]
	457 Move X2, X31
	458 NotImplemented "Instruction CMP not yet implemented."
	459 NotImplemented "Instruction CSET not yet implemented."
	460 Call Toggle.set_isOn, X0, X1
	461 Move X8, [X26+16]
	462 Compare X8, 0
	463 JumpIfEqual {811}
	464 Move X8, [X8+56]
	465 Compare X8, 0
	466 JumpIfEqual {811}
	467 Move X27, [X8+280]
	468 Move X8, 0x673000
	469 Move X8, [X8+2608]
	470 Move X0, [X8]
	471 Call 0x1C17F10
	472 Move X8, 0x678000
	473 Move X8, [X8+2864]
	474 Move X1, X26
	475 Move X3, X31
	476 Move X28, X0
	477 Move X2, [X8]
	478 Call 0x27269E8, X0, X1, X2
	479 Compare X27, 0
	480 JumpIfEqual {811}
	481 Move X8, 0x673000
	482 Move X8, [X8+2616]
	483 Move X0, X27
	484 Move X1, X28
	485 Move X2, [X8]
	486 Call 0x27298B4, X0, X1
	487 Move X8, [X26+16]
	488 Compare X8, 0
	489 JumpIfEqual {811}
	490 Move X0, [X8+56]
	491 Compare X0, 0
	492 JumpIfEqual {811}
	493 Move W8, [X0+288]
	494 Compare W8, 0
	495 JumpIfEqual {500}
	496 Move X8, [X0]
	497 Move X9, [X8+920]
	498 Move X1, [X8+928]
	499 NotImplemented "Instruction BLR not yet implemented."
	500 Move X0, [X23]
	501 Move W8, [X0+224]
	502 Compare W8, 0
	503 JumpIfNotEqual {505}
	504 Call 0x1C17DFC
	505 Move X0, X25
	506 Move X1, X31
	507 Move X2, X31
	508 Call Object.op_Inequality, X0, X1
	509 Move TEMP, X0
	510 And TEMP, TEMP, 1
	511 Compare TEMP, 1
	512 JumpIfNotEqual {559}
	513 Compare X25, 0
	514 JumpIfEqual {811}
	515 Move W8, [X25+52]
	516 NotImplemented "Instruction LDUR not yet implemented."
	517 Move [X31+176], W8
	518 Move [X31+168], X9
	519 Move X8, [X26+16]
	520 Compare X8, 0
	521 JumpIfEqual {811}
	522 Move X8, [X8+56]
	523 Compare X8, 0
	524 JumpIfEqual {811}
	525 Move W10, [X31+176]
	526 Move X9, [X25+64]
	527 Move X11, [X31+168]
	528 Move W21, [X8+44]
	529 Move X28, [X8+56]
	530 Move X27, [X8+72]
	531 Move [X29+8], W10
	532 Move W10, 4
	533 Add X1, X31, 128
	534 Move X0, X25
	535 Move X2, X31
	536 Move [X29], X11
	537 Move [X31+128], W10
	538 Move [X31+144], X8
	539 Move [X31+152], X9
	540 Move [X31+160], X8
	541 Call Selectable.set_navigation, X0, X1
	542 Move X8, [X26+16]
	543 Compare X8, 0
	544 JumpIfEqual {811}
	545 Move X0, [X8+56]
	546 Compare X0, 0
	547 JumpIfEqual {811}
	548 Move W8, 4
	549 Add X1, X31, 88
	550 Move X2, X31
	551 Move [X31+88], W8
	552 Move [X31+92], W21
	553 Move [X31+96], X25
	554 Move [X31+104], X28
	555 Move [X31+112], X25
	556 Move [X31+120], X27
	557 Call Selectable.set_navigation, X0, X1
	558 Move X21, [X31+40]
	559 Move X8, [X26+16]
	560 Compare X8, 0
	561 JumpIfEqual {811}
	562 Move X25, [X8+56]
	563 Move X8, [X19+312]
	564 Add W24, W24, 1
	565 Compare X8, 0
	566 JumpIfNotEqual {407}
	567 Move X20, [X31+80]
	568 Move X1, X31
	569 Move X0, X20
	570 Call RectTransform.get_sizeDelta, X0
	571 Move X8, [X19+352]
	572 Compare X8, 0
	573 JumpIfEqual {811}
	574 Move V1, [X8+24]
	575 Move X0, X20
	576 Move X1, X31
	577 NotImplemented "Instruction SCVTF not yet implemented."
	578 Multiply S1, S14, S1
	579 Add S1, S10, S1
	580 Subtract S1, S1, S9
	581 Call RectTransform.set_sizeDelta, X0, X1
	582 Move X21, [X31+48]
	583 Move X1, X31
	584 Move X0, X21
	585 Call RectTransform.get_rect, X0
	586 Move X0, X20
	587 Move X1, X31
	588 Move V9, V3
	589 Call RectTransform.get_rect, X0
	590 Move X20, [X31+32]
	591 Subtract S8, S9, S3
	592 NotImplemented "Instruction FCMP not yet implemented."
	593 Move X0, X21
	594 Move X1, X31
	595 Call RectTransform.get_sizeDelta, X0
	596 Move X0, X21
	597 Move X1, X31
	598 Move V9, V0
	599 Call RectTransform.get_sizeDelta, X0
	600 Subtract S1, S1, S8
	601 Move X0, X21
	602 Move V0, V9
	603 Move X1, X31
	604 Call RectTransform.set_sizeDelta, X0, X1
	605 Move X8, 0x615000
	606 Move X8, [X8+2480]
	607 Move W1, 4
	608 Move X0, [X8]
	609 Call 0x1C17D6C
	610 Move X23, X0
	611 Move X0, X21
	612 Move X1, X23
	613 Move X2, X31
	614 Call RectTransform.GetWorldCorners, X0, X1
	615 Move X0, X20
	616 Move X1, X31
	617 Call Component.get_transform, X0
	618 Compare X0, 0
	619 JumpIfEqual {811}
	620 Move X8, 0x63A000
	621 Move X8, [X8+3184]
	622 Move X9, [X0]
	623 Move X24, X0
	624 Move X8, [X8]
	625 NotImplemented "Instruction CMP not yet implemented."
	626 Move X0, X24
	627 Move X1, X31
	628 Move [X31+16], S10
	629 Move [X31+24], S14
	630 Call RectTransform.get_rect, X0
	631 Compare X23, 0
	632 JumpIfEqual {811}
	633 Add S4, S2, S0
	634 Add S2, S3, S1
	635 Add X8, X23, 40
	636 Move [X31+76], S2
	637 Move [X31+84], S4
	638 Move [X31+64], X8
	639 Move X26, 0x61A000
	640 Move X8, -50290688
	641 Move X26, [X26+1208]
	642 Move V14, [X8+576]
	643 Move W25, W31
	644 Move W22, 1
	645 Move X27, 0x8F9000
	646 Move W21, 1
	647 Move [X31+56], S1
	648 Move [X31+64], S0
	649 And W31, W21, 1
	650 NotImplemented "Instruction FCSEL not yet implemented."
	651 Move S1, [X31+76]
	652 Move S0, [X31+80]
	653 Move X20, [X31+64]
	654 Move X28, X31
	655 Move W29, W25
	656 NotImplemented "Instruction FCSEL not yet implemented."
	657 NotImplemented "Instruction FABS not yet implemented."
	658 NotImplemented "Instruction FABS not yet implemented."
	659 Move W8, [X23+24]
	660 NotImplemented "Instruction CMP not yet implemented."
	661 Move S0, [X20-8]
	662 Move S1, [X20-4]
	663 Move V2, [X20]
	664 Move X0, X24
	665 Move X1, X31
	666 Call Transform.InverseTransformPoint, X0, X1
	667 And W31, W21, 1
	668 Move V11, V0
	669 NotImplemented "Instruction FCSEL not yet implemented."
	670 Move V12, V1
	671 NotImplemented "Instruction FCMP not yet implemented."
	672 Move W8, [X27+1450]
	673 And W31, W21, 1
	674 NotImplemented "Instruction FCSEL not yet implemented."
	675 Compare W8, 0
	676 JumpIfNotEqual {680}
	677 Move X0, X26
	678 Call 0x1C17CF4
	679 Move [X27+1450], W22
	680 Move X8, [X26]
	681 NotImplemented "Instruction FABS not yet implemented."
	682 NotImplemented "Instruction FCMP not yet implemented."
	683 NotImplemented "Instruction FCSEL not yet implemented."
	684 Move X8, [X8+184]
	685 Move S2, 8
	686 Multiply S0, S0, S14
	687 Move V1, [X8]
	688 Multiply S1, S1, S2
	689 NotImplemented "Instruction FCMP not yet implemented."
	690 NotImplemented "Instruction FCSEL not yet implemented."
	691 NotImplemented "Instruction FABD not yet implemented."
	692 NotImplemented "Instruction FCMP not yet implemented."
	693 And W31, W21, 1
	694 NotImplemented "Instruction FCSEL not yet implemented."
	695 NotImplemented "Instruction FCMP not yet implemented."
	696 Move W8, [X27+1450]
	697 And W31, W21, 1
	698 NotImplemented "Instruction FCSEL not yet implemented."
	699 Compare W8, 0
	700 JumpIfNotEqual {704}
	701 Move X0, X26
	702 Call 0x1C17CF4
	703 Move [X27+1450], W22
	704 Move X8, [X26]
	705 NotImplemented "Instruction FABS not yet implemented."
	706 NotImplemented "Instruction FCMP not yet implemented."
	707 NotImplemented "Instruction FCSEL not yet implemented."
	708 Move X8, [X8+184]
	709 Move S2, 8
	710 Multiply S0, S0, S14
	711 Move V1, [X8]
	712 Multiply S1, S1, S2
	713 NotImplemented "Instruction FCMP not yet implemented."
	714 NotImplemented "Instruction FCSEL not yet implemented."
	715 NotImplemented "Instruction FABD not yet implemented."
	716 NotImplemented "Instruction FCMP not yet implemented."
	717 Add X28, X28, 1
	718 NotImplemented "Instruction CMP not yet implemented."
	719 Add X20, X20, 12
	720 Move X8, 0x669000
	721 Move X8, [X8+1720]
	722 Move X0, [X8]
	723 Move W8, [X0+224]
	724 Compare W8, 0
	725 JumpIfNotEqual {727}
	726 Call 0x1C17DFC
	727 Move X0, [X31+48]
	728 Move W1, W25
	729 Move W2, W31
	730 Move W3, W31
	731 Move X4, X31
	732 Call RectTransformUtility.FlipLayoutOnAxis, X0, X1, X2, X3
	733 Move S1, [X31+56]
	734 Move S0, [X31+60]
	735 Move W21, W31
	736 Move W25, 1
	737 Move TEMP, X29
	738 And TEMP, TEMP, 1
	739 Compare TEMP, 1
	740 JumpIfNotEqual {649}
	741 Move X0, [X19+352]
	742 Move X25, [X31+24]
	743 Move X26, [X31+32]
	744 Move S10, [X31+16]
	745 Move S8, [X31+20]
	746 Compare X0, 0
	747 JumpIfEqual {811}
	748 Move X21, 0x678000
	749 Move X21, [X21+2720]
	750 Move W22, W31
	751 Move TEMP, 0
	752 Not TEMP
	753 Move W20, TEMP
	754 Move W8, [X0+24]
	755 NotImplemented "Instruction CMP not yet implemented."
	756 Move X2, [X21]
	757 Move W1, W22
	758 Call List`1<Object>.get_Item, X0, X1
	759 Compare X0, 0
	760 JumpIfEqual {811}
	761 Move X23, [X0+48]
	762 Compare X23, 0
	763 JumpIfEqual {811}
	764 Move X0, X23
	765 Move X1, X31
	766 Call RectTransform.get_anchorMin, X0
	767 Move S1, W31
	768 Move X0, X23
	769 Move X1, X31
	770 Call RectTransform.set_anchorMin, X0, X1
	771 Move X0, X23
	772 Move X1, X31
	773 Call RectTransform.get_anchorMax, X0
	774 Move S1, W31
	775 Move X0, X23
	776 Move X1, X31
	777 Call RectTransform.set_anchorMax, X0, X1
	778 Move X0, X23
	779 Move X1, X31
	780 Call RectTransform.get_anchoredPosition, X0
	781 Move X8, [X19+352]
	782 Compare X8, 0
	783 JumpIfEqual {811}
	784 Move W24, [X8+24]
	785 Move X0, X23
	786 Move X1, X31
	787 Move V9, V0
	788 Call RectTransform.get_pivot, X0
	789 Add W8, W20, W24
	790 NotImplemented "Instruction SCVTF not yet implemented."
	791 Multiply S0, S8, S0
	792 Add S0, S10, S0
	793 Multiply S1, S8, S1
	794 Add S1, S1, S0
	795 Move X0, X23
	796 Move V0, V9
	797 Move X1, X31
	798 Call RectTransform.set_anchoredPosition, X0, X1
	799 Move X0, X23
	800 Move X1, X31
	801 Call RectTransform.get_sizeDelta, X0
	802 Move X0, X23
	803 Move V1, V8
	804 Move X1, X31
	805 Call RectTransform.set_sizeDelta, X0, X1
	806 Move X0, [X19+352]
	807 Add W22, W22, 1
	808 Subtract W20, W20, 1
	809 Compare X0, 0
	810 JumpIfNotEqual {754}
	811 Call 0x1C17F20
	812 Move V0, [X19+328]
	813 Move S1, W31
	814 Move S2, 1
	815 Move X0, X19
	816 Call TMP_Dropdown.AlphaFadeList, X0, V0, V1, V2
	817 Move X0, [X19+256]
	818 Compare X0, 0
	819 JumpIfEqual {811}
	820 Move X1, X31
	821 Call Component.get_gameObject, X0
	822 Move X20, [X31+40]
	823 Compare X0, 0
	824 JumpIfEqual {811}
	825 Move W1, W31
	826 Move X2, X31
	827 Call GameObject.SetActive, X0, X1
	828 Move X0, X20
	829 Move X1, X31
	830 Call Component.get_gameObject, X0
	831 Compare X0, 0
	832 JumpIfEqual {811}
	833 Move W1, W31
	834 Move X2, X31
	835 Call GameObject.SetActive, X0, X1
	836 Move X8, [X19]
	837 Move X0, X19
	838 Move X1, X26
	839 Move X9, [X8+1032]
	840 Move X2, [X8+1040]
	841 NotImplemented "Instruction BLR not yet implemented."
	842 Move [X19+344], X0
	843 Move X8, [X25+40]
	844 Move X9, [X31+184]
	845 NotImplemented "Instruction CMP not yet implemented."
	846 Move X20, [X31+336]
	847 Move X19, [X31+344]
	848 Move X22, [X31+320]
	849 Move X21, [X31+328]
	850 Move X24, [X31+304]
	851 Move X23, [X31+312]
	852 Move X26, [X31+288]
	853 Move X25, [X31+296]
	854 Move X28, [X31+272]
	855 Move X27, [X31+280]
	856 Move X29, [X31+256]
	857 Move X30, [X31+264]
	858 Move D9, [X31+240]
	859 Move D8, [X31+248]
	860 Move D11, [X31+224]
	861 Move D10, [X31+232]
	862 Move D13, [X31+208]
	863 Move D12, [X31+216]
	864 Move D15, [X31+192]
	865 Move D14, [X31+200]
	866 Add X31, X31, 352
	867 Return 
	868 Call 0x1C17F28
	869 Call 0x3EB2B20

Method: UnityEngine.GameObject CreateBlocker(UnityEngine.Canvas rootCanvas)

Disassembly:
	0x03AE1D48 BL 0x3C3883C
	0x03AE1D4C TBZ X0, 0x0, 0x3AE1D6C
	0x03AE1D50 LDR X8, [X19 + 0xD8]
	0x03AE1D54 CBZ X8, 0x3AE1D7C
	0x03AE1D58 LDR W9, [X8 + 0x18]
	0x03AE1D5C CBZ W9, 0x3AE1D80
	0x03AE1D60 LDR X0, [X8 + 0x20]
	0x03AE1D64 STR X0, [X19 + 0xD0]
	0x03AE1D68 B 0x3AE1D70
	0x03AE1D6C LDR X0, [X19 + 0xD0]
	0x03AE1D70 LDP X20, X19, [X31 + 0x10]
	0x03AE1D74 LDP X30, X21, [X31], #0x20
	0x03AE1D78 RET
	0x03AE1D7C BL 0x1C16F20
	0x03AE1D80 BL 0x1C16F28
	0x03AE1D84 LDR X0, [X0 + 0xD8]
	0x03AE1D88 RET
	0x03AE1D8C STR X1, [X0 + 0xD8]
	0x03AE1D90 RET
	0x03AE1D94 LDR W8, [X0 + 0xE0]
	0x03AE1D98 ADD W0, W8, 0x1
	0x03AE1D9C RET
	0x03AE1DA0 LDRB W0, [X0 + 0xE4]
	0x03AE1DA4 RET
	0x03AE1DA8 AND W8, W1, 0x1
	0x03AE1DAC STRB W8, [X0 + 0xE4]
	0x03AE1DB0 RET
	0x03AE1DB4 LDRB W0, [X0 + 0xE5]
	0x03AE1DB8 RET
	0x03AE1DBC AND W8, W1, 0x1
	0x03AE1DC0 STRB W8, [X0 + 0xE5]
	0x03AE1DC4 RET
	0x03AE1DC8 LDR X0, [X0 + 0xE8]
	0x03AE1DCC RET
	0x03AE1DD0 STR X1, [X0 + 0xE8]
	0x03AE1DD4 RET
	0x03AE1DD8 LDR X0, [X0 + 0xF0]
	0x03AE1DDC RET
	0x03AE1DE0 STR X1, [X0 + 0xF0]
	0x03AE1DE4 RET
	0x03AE1DE8 LDR X0, [X0 + 0xF8]
	0x03AE1DEC RET
	0x03AE1DF0 LDR W0, [X0 + 0x108]
	0x03AE1DF4 RET
	0x03AE1DF8 STR W1, [X0 + 0x108]
	0x03AE1DFC RET
	0x03AE1E00 LDR W0, [X0 + 0x10C]
	0x03AE1E04 RET
	0x03AE1E08 STR W1, [X0 + 0x10C]
	0x03AE1E0C RET
	0x03AE1E10 LDR W0, [X0 + 0x110]
	0x03AE1E14 RET
	0x03AE1E18 STR W1, [X0 + 0x110]
	0x03AE1E1C RET
	0x03AE1E20 LDR W0, [X0 + 0x114]
	0x03AE1E24 RET
	0x03AE1E28 STR W1, [X0 + 0x114]
	0x03AE1E2C RET
	0x03AE1E30 LDR X0, [X0 + 0x128]
	0x03AE1E34 RET
	0x03AE1E38 STR X1, [X0 + 0x128]
	0x03AE1E3C RET
	0x03AE1E40 LDR X0, [X0 + 0x138]
	0x03AE1E44 RET
	0x03AE1E48 STR X1, [X0 + 0x138]
	0x03AE1E4C RET
	0x03AE1E50 ADD X1, X0, 0x140
	0x03AE1E54 MOVZ W2, 0x58
	0x03AE1E58 MOV X0, X8
	0x03AE1E5C B 0x3EB1AC0
	0x03AE1E60 STR X30, [X31 - 0x10]!
	0x03AE1E64 ADD X0, X0, 0x140
	0x03AE1E68 MOVZ W2, 0x58
	0x03AE1E6C BL 0x3EB1B30
	0x03AE1E70 LDR X30, [X31], #0x10
	0x03AE1E74 RET
	0x03AE1E78 LDR X0, [X0 + 0x198]
	0x03AE1E7C RET
	0x03AE1E80 STR X1, [X0 + 0x198]
	0x03AE1E84 RET
	0x03AE1E88 SUB X31, X31, 0x30
	0x03AE1E8C STP X30, X21, [X31 + 0x10]
	0x03AE1E90 STP X20, X19, [X31 + 0x20]
	0x03AE1E94 ADRP X20, 0x901000
	0x03AE1E98 ADRP X21, 0x677000
	0x03AE1E9C LDRB W8, [X20 + 0x58E]
	0x03AE1EA0 LDR X21, [X21 + 0x578]
	0x03AE1EA4 MOV X19, X0
	0x03AE1EA8 TBNZ X8, 0x0, 0x3AE1EC0
	0x03AE1EAC ADRP X0, 0x677000
	0x03AE1EB0 LDR X0, [X0 + 0x578]
	0x03AE1EB4 BL 0x1C16CF4
	0x03AE1EB8 MOVZ W8, 0x1
	0x03AE1EBC STRB W8, [X20 + 0x58E]
	0x03AE1EC0 LDR X0, [X21]
	0x03AE1EC4 LDR W8, [X0 + 0xE0]
	0x03AE1EC8 CBNZ W8, 0x3AE1ED0
	0x03AE1ECC BL 0x1C16DFC
	0x03AE1ED0 MOVZ W1, 0x5A
	0x03AE1ED4 MOVZ W2, 0x9
	0x03AE1ED8 MOVZ W3, 0x1045
	0x03AE1EDC MOVZ W4, 0x400
	0x03AE1EE0 MOVZ W5, 0x400
	0x03AE1EE4 MOVZ W6, 0x1
	0x03AE1EE8 MOVZ W7, 0x1
	0x03AE1EEC MOV X0, X19
	0x03AE1EF0 BL 0x3AE1F04
	0x03AE1EF4 LDP X20, X19, [X31 + 0x20]
	0x03AE1EF8 LDP X30, X21, [X31 + 0x10]
	0x03AE1EFC ADD X31, X31, 0x30
	0x03AE1F00 RET
	0x03AE1F04 SUB X31, X31, 0x120
	0x03AE1F08 STP X29, X30, [X31 + 0xC0]
	0x03AE1F0C STP X28, X27, [X31 + 0xD0]
	0x03AE1F10 STP X26, X25, [X31 + 0xE0]
	0x03AE1F14 STP X24, X23, [X31 + 0xF0]
	0x03AE1F18 STP X22, X21, [X31 + 0x100]
	0x03AE1F1C STP X20, X19, [X31 + 0x110]
	0x03AE1F20 ADRP X28, 0x901000
	0x03AE1F24 ADRP X27, 0x677000
	0x03AE1F28 LDRB W8, [X28 + 0x58F]
	0x03AE1F2C LDR X27, [X27 + 0xBC0]
	0x03AE1F30 MOV W24, W7
	0x03AE1F34 MOV W26, W6
	0x03AE1F38 MOV W19, W5
	0x03AE1F3C MOV W20, W4
	0x03AE1F40 MOV W23, W3
	0x03AE1F44 MOV W22, W2
	0x03AE1F48 MOV W21, W1
	0x03AE1F4C MOV X25, X0
	0x03AE1F50 TBNZ X8, 0x0, 0x3AE1FF8
	0x03AE1F54 ADRP X0, 0x612000
	0x03AE1F58 LDR X0, [X0 + 0xA28]
	0x03AE1F5C BL 0x1C16CF4
	0x03AE1F60 ADRP X0, 0x677000
	0x03AE1F64 LDR X0, [X0 + 0xBC0]
	0x03AE1F68 BL 0x1C16CF4
	0x03AE1F6C ADRP X0, 0x677000
	0x03AE1F70 LDR X0, [X0 + 0xBC8]
	0x03AE1F74 BL 0x1C16CF4
	0x03AE1F78 ADRP X0, 0x677000
	0x03AE1F7C LDR X0, [X0 + 0xBD0]
	0x03AE1F80 BL 0x1C16CF4
	0x03AE1F84 ADRP X0, 0x677000
	0x03AE1F88 LDR X0, [X0 + 0xBD8]
	0x03AE1F8C BL 0x1C16CF4
	0x03AE1F90 ADRP X0, 0x616000
	0x03AE1F94 LDR X0, [X0 + 0xCA0]
	0x03AE1F98 BL 0x1C16CF4
	0x03AE1F9C ADRP X0, 0x677000
	0x03AE1FA0 LDR X0, [X0 + 0xBE0]
	0x03AE1FA4 BL 0x1C16CF4
	0x03AE1FA8 ADRP X0, 0x677000
	0x03AE1FAC LDR X0, [X0 + 0x338]
	0x03AE1FB0 BL 0x1C16CF4
	0x03AE1FB4 ADRP X0, 0x677000
	0x03AE1FB8 LDR X0, [X0 + 0xBE8]
	0x03AE1FBC BL 0x1C16CF4
	0x03AE1FC0 ADRP X0, 0x63C000
	0x03AE1FC4 LDR X0, [X0 + 0x250]
	0x03AE1FC8 BL 0x1C16CF4
	0x03AE1FCC ADRP X0, 0x677000
	0x03AE1FD0 LDR X0, [X0 + 0xBF0]
	0x03AE1FD4 BL 0x1C16CF4
	0x03AE1FD8 ADRP X0, 0x677000
	0x03AE1FDC LDR X0, [X0 + 0xBF8]
	0x03AE1FE0 BL 0x1C16CF4
	0x03AE1FE4 ADRP X0, 0x677000
	0x03AE1FE8 LDR X0, [X0 + 0xC00]
	0x03AE1FEC BL 0x1C16CF4
	0x03AE1FF0 MOVZ W8, 0x1
	0x03AE1FF4 STRB W8, [X28 + 0x58F]
	0x03AE1FF8 LDR X0, [X27]
	0x03AE1FFC LDR W8, [X0 + 0xE0]
	0x03AE2000 CBNZ W8, 0x3AE2008
	0x03AE2004 BL 0x1C16DFC
	0x03AE2008 MOV X0, X31
	0x03AE200C BL 0x3C9C624
	0x03AE2010 MOV X0, X25
	0x03AE2014 MOV W1, W21
	0x03AE2018 MOV X2, X31
	0x03AE201C BL 0x3C9C794
	0x03AE2020 CBZ W0, 0x3AE2094
	0x03AE2024 CBZ X25, 0x3AE23FC
	0x03AE2028 ADRP X19, 0x676000
	0x03AE202C ADRP X20, 0x676000
	0x03AE2030 ADRP X21, 0x611000
	0x03AE2034 LDR X19, [X19 + 0xBF8]
	0x03AE2038 LDR X20, [X20 + 0xC00]
	0x03AE203C LDR X21, [X21 + 0xA28]
	0x03AE2040 MOV X0, X25
	0x03AE2044 MOV X1, X31
	0x03AE2048 BL 0x3C389D4
	0x03AE204C LDR X8, [X19]
	0x03AE2050 LDR X2, [X20]
	0x03AE2054 MOV X1, X0
	0x03AE2058 MOV X3, X31
	0x03AE205C MOV X0, X8
	0x03AE2060 BL 0x32274B8
	0x03AE2064 LDR X8, [X21]
	0x03AE2068 MOV X19, X0
	0x03AE206C LDR W9, [X8 + 0xE0]
	0x03AE2070 CBNZ W9, 0x3AE207C
	0x03AE2074 MOV X0, X8
	0x03AE2078 BL 0x1C16DFC
	0x03AE207C MOV X0, X19
	0x03AE2080 MOV X1, X25
	0x03AE2084 MOV X2, X31
	0x03AE2088 BL 0x3C06B0C
	0x03AE208C MOV X21, X31
	0x03AE2090 B 0x3AE23D8
	0x03AE2094 ADRP X8, 0x676000
	0x03AE2098 LDR X8, [X8 + 0xBE0]
	0x03AE209C LDR X0, [X8]
	0x03AE20A0 BL 0x22537A0
	0x03AE20A4 CBZ X0, 0x3AE23FC
	0x03AE20A8 ADRP X8, 0x676000
	0x03AE20AC LDR X8, [X8 + 0xBF0]
	0x03AE20B0 MOV X21, X0
	0x03AE20B4 LDR X8, [X8]
	0x03AE20B8 STR X8, [X0 + 0x30]
	0x03AE20BC LDR X0, [X27]
	0x03AE20C0 LDR W8, [X0 + 0xE0]
	0x03AE20C4 CBNZ W8, 0x3AE20CC
	0x03AE20C8 BL 0x1C16DFC
	0x03AE20CC ADD X8, X31, 0x60
	0x03AE20D0 MOV X0, X31
	0x03AE20D4 BL 0x3C9CAFC
	0x03AE20D8 ADD X0, X31, 0x0
	0x03AE20DC ADD X1, X31, 0x60
	0x03AE20E0 MOVZ W2, 0x60
	0x03AE20E4 BL 0x3EB1AC0
	0x03AE20E8 ADD X0, X21, 0x50
	0x03AE20EC ADD X1, X31, 0x0
	0x03AE20F0 MOVZ W2, 0x60
	0x03AE20F4 BL 0x3EB1AC0
	0x03AE20F8 CMP W26, 0x1
	0x03AE20FC B.NE 0x3AE2104
	0x03AE2100 STR X25, [X21 + 0x40]
	0x03AE2104 STR W26, [X21 + 0x48]
	0x03AE2108 STR W20, [X21 + 0x108]
	0x03AE210C STR W19, [X21 + 0x10C]
	0x03AE2110 STR W22, [X21 + 0x110]
	0x03AE2114 STR W23, [X21 + 0x114]
	0x03AE2118 ADRP X8, 0x676000
	0x03AE211C LDR X8, [X8 + 0xBE8]
	0x03AE2120 MOVZ W1, 0x1
	0x03AE2124 LDR X0, [X8]
	0x03AE2128 BL 0x1C16D6C
	0x03AE212C STR X0, [X21 + 0xD8]
	0x03AE2130 ADRP X8, 0x63B000
	0x03AE2134 LDR X8, [X8 + 0x250]
	0x03AE2138 LDR X0, [X8]
	0x03AE213C BL 0x1C16F10
	0x03AE2140 MOVZ W3, 0x1
	0x03AE2144 MOV W1, W31
	0x03AE2148 MOV W2, W31
	0x03AE214C MOV W4, W31
	0x03AE2150 MOV X5, X31
	0x03AE2154 MOV X25, X0
	0x03AE2158 BL 0x3C1C1D8
	0x03AE215C LDR X8, [X21 + 0xD8]
	0x03AE2160 CBZ X8, 0x3AE23FC
	0x03AE2164 LDR W9, [X8 + 0x18]
	0x03AE2168 CBZ W9, 0x3AE2400
	0x03AE216C STR X25, [X8 + 0x20]
	0x03AE2170 AND W8, W24, 0x1
	0x03AE2174 STRB W8, [X21 + 0xE4]
	0x03AE2178 ADRP X26, 0x676000
	0x03AE217C LDR X26, [X26 + 0x338]
	0x03AE2180 LDR X0, [X26]
	0x03AE2184 LDR W8, [X0 + 0xE0]
	0x03AE2188 CBNZ W8, 0x3AE2190
	0x03AE218C BL 0x1C16DFC
	0x03AE2190 MOV X0, X31
	0x03AE2194 TBNZ X23, 0x4, 0x3AE227C
	0x03AE2198 BL 0x3B146A4
	0x03AE219C ADRP X8, 0x615000
	0x03AE21A0 LDR X8, [X8 + 0xCA0]
	0x03AE21A4 MOV X24, X0
	0x03AE21A8 LDR X8, [X8]
	0x03AE21AC MOV X0, X8
	0x03AE21B0 BL 0x1C16F10
	0x03AE21B4 MOV X1, X24
	0x03AE21B8 MOV X2, X31
	0x03AE21BC MOV X23, X0
	0x03AE21C0 BL 0x3C1454C
	0x03AE21C4 CBZ X23, 0x3AE23FC
	0x03AE21C8 LDR X8, [X26]
	0x03AE21CC MOV X0, X23
	0x03AE21D0 MOV X2, X25
	0x03AE21D4 MOV X3, X31
	0x03AE21D8 LDR X8, [X8 + 0xB8]
	0x03AE21DC LDR W1, [X8]
	0x03AE21E0 BL 0x3C14C34
	0x03AE21E4 LDR X8, [X26]
	0x03AE21E8 SCVTF S0, W20
	0x03AE21EC MOV X0, X23
	0x03AE21F0 MOV X2, X31
	0x03AE21F4 LDR X8, [X8 + 0xB8]
	0x03AE21F8 LDR W1, [X8 + 0x68]
	0x03AE21FC BL 0x3C15CD8
	0x03AE2200 LDR X8, [X26]
	0x03AE2204 SCVTF S0, W19
	0x03AE2208 MOV X0, X23
	0x03AE220C MOV X2, X31
	0x03AE2210 LDR X8, [X8 + 0xB8]
	0x03AE2214 LDR W1, [X8 + 0x6C]
	0x03AE2218 BL 0x3C15CD8

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X22, 0x902000
	014 Move X23, 0x613000
	015 Move X20, 0x678000
	016 Move W8, [X22+1402]
	017 Move X23, [X23+2648]
	018 Move X20, [X20+2928]
	019 Move X21, X1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {69}
	025 Move X0, 0x669000
	026 Move X0, [X0+1376]
	027 Call 0x1C17CF4
	028 Move X0, 0x678000
	029 Move X0, [X0+2776]
	030 Call 0x1C17CF4
	031 Move X0, 0x678000
	032 Move X0, [X0+2312]
	033 Call 0x1C17CF4
	034 Move X0, 0x678000
	035 Move X0, [X0+2936]
	036 Call 0x1C17CF4
	037 Move X0, 0x678000
	038 Move X0, [X0+2272]
	039 Call 0x1C17CF4
	040 Move X0, 0x678000
	041 Move X0, [X0+1368]
	042 Call 0x1C17CF4
	043 Move X0, 0x678000
	044 Move X0, [X0+2944]
	045 Call 0x1C17CF4
	046 Move X0, 0x613000
	047 Move X0, [X0+2648]
	048 Call 0x1C17CF4
	049 Move X0, 0x613000
	050 Move X0, [X0+1432]
	051 Call 0x1C17CF4
	052 Move X0, 0x678000
	053 Move X0, [X0+2808]
	054 Call 0x1C17CF4
	055 Move X0, 0x678000
	056 Move X0, [X0+2952]
	057 Call 0x1C17CF4
	058 Move X0, 0x678000
	059 Move X0, [X0+2576]
	060 Call 0x1C17CF4
	061 Move X0, 0x63A000
	062 Move X0, [X0+3632]
	063 Call 0x1C17CF4
	064 Move X0, 0x678000
	065 Move X0, [X0+2928]
	066 Call 0x1C17CF4
	067 Move W8, 1
	068 Move [X22+1402], W8
	069 Move X0, [X23]
	070 Call 0x1C17F10
	071 Move X1, [X20]
	072 Move X2, X31
	073 Move X20, X0
	074 Call GameObject..ctor, X0, X1
	075 Compare X20, 0
	076 JumpIfEqual {355}
	077 Move X8, 0x678000
	078 Move X8, [X8+1368]
	079 Move X0, X20
	080 Move X1, [X8]
	081 Call 0x21E61FC, X0
	082 Compare X21, 0
	083 JumpIfEqual {355}
	084 Move X22, X0
	085 Move X0, X21
	086 Move X1, X31
	087 Call Component.get_transform, X0
	088 Compare X22, 0
	089 JumpIfEqual {355}
	090 Move X1, X0
	091 Move X0, X22
	092 Move W2, W31
	093 Move X3, X31
	094 Call Transform.SetParent, X0, X1, X2
	095 Move X21, 0x8F8000
	096 Move W8, [X21+1923]
	097 Compare W8, 0
	098 JumpIfNotEqual {104}
	099 Move X0, 0x613000
	100 Move X0, [X0+1440]
	101 Call 0x1C17CF4
	102 Move W8, 1
	103 Move [X21+1923], W8
	104 Move X21, 0x613000
	105 Move X21, [X21+1440]
	106 Move X0, X22
	107 Move X1, X31
	108 Move X8, [X21]
	109 Move X8, [X8+184]
	110 Move S0, [X8]
	111 Move S1, [X8+4]
	112 Call RectTransform.set_anchorMin, X0, X1
	113 Move X23, 0x8F8000
	114 Move W8, [X23+2139]
	115 Compare W8, 0
	116 JumpIfNotEqual {122}
	117 Move X0, 0x613000
	118 Move X0, [X0+1440]
	119 Call 0x1C17CF4
	120 Move W8, 1
	121 Move [X23+2139], W8
	122 Move X8, [X21]
	123 Move X21, 0x678000
	124 Move X0, X22
	125 Move X1, X31
	126 Move X8, [X8+184]
	127 Move S0, [X8+12]
	128 Move S1, [X8+16]
	129 Move X21, [X21+2936]
	130 Call RectTransform.set_anchorMax, X0, X1
	131 Move X23, 0x8F9000
	132 Move W8, [X23+1935]
	133 Compare W8, 0
	134 JumpIfNotEqual {140}
	135 Move X0, 0x61B000
	136 Move X0, [X0+3848]
	137 Call 0x1C17CF4
	138 Move W8, 1
	139 Move [X23+1935], W8
	140 Move X8, 0x61B000
	141 Move X8, [X8+3848]
	142 Move X0, X22
	143 Move X1, X31
	144 Move X8, [X8]
	145 Move X8, [X8+184]
	146 Move S0, [X8]
	147 Move S1, [X8+4]
	148 Call RectTransform.set_sizeDelta, X0, X1
	149 Move X1, [X21]
	150 Move X0, X20
	151 Call 0x21E61FC, X0
	152 Compare X0, 0
	153 JumpIfEqual {355}
	154 Move W1, 1
	155 Move X2, X31
	156 Move X21, X0
	157 Call Canvas.set_overrideSorting, X0, X1
	158 Move X0, [X19+336]
	159 Compare X0, 0
	160 JumpIfEqual {355}
	161 Move X8, 0x678000
	162 Move X8, [X8+2944]
	163 Move X1, [X8]
	164 Call 0x21E62E4, X0
	165 Compare X0, 0
	166 JumpIfEqual {355}
	167 Move X1, X31
	168 Move X22, X0
	169 Call Canvas.get_sortingLayerID, X0
	170 Move W1, W0
	171 Move X0, X21
	172 Move X2, X31
	173 Call Canvas.set_sortingLayerID, X0, X1
	174 Move X0, X22
	175 Move X1, X31
	176 Call Canvas.get_sortingOrder, X0
	177 Subtract W1, W0, 1
	178 Move X0, X21
	179 Move X2, X31
	180 Call Canvas.set_sortingOrder, X0, X1
	181 Move X0, [X19+256]
	182 Compare X0, 0
	183 JumpIfEqual {355}
	184 Move X28, 0x613000
	185 Move X23, 0x669000
	186 Move X27, 0x678000
	187 Move X26, 0x678000
	188 Move X25, 0x63A000
	189 Move X24, 0x678000
	190 Move X28, [X28+1432]
	191 Move X23, [X23+1376]
	192 Move X27, [X27+2272]
	193 Move X26, [X26+2312]
	194 Move X25, [X25+3632]
	195 Move X24, [X24+2952]
	196 Move X1, X31
	197 Call Transform.get_parent, X0
	198 Move X22, X0
	199 Move X21, X31
	200 Move X0, [X28]
	201 Move W8, [X0+224]
	202 Compare W8, 0
	203 JumpIfNotEqual {205}
	204 Call 0x1C17DFC
	205 Move X0, X22
	206 Move X1, X31
	207 Move X2, X31
	208 Call Object.op_Inequality, X0, X1
	209 Move TEMP, X0
	210 And TEMP, TEMP, 1
	211 Compare TEMP, 1
	212 JumpIfNotEqual {237}
	213 Compare X22, 0
	214 JumpIfEqual {355}
	215 Move X1, [X23]
	216 Move X0, X22
	217 Call 0x21A4894, X0
	218 Move X8, [X28]
	219 Move X21, X0
	220 Move W9, [X8+224]
	221 Compare W9, 0
	222 JumpIfNotEqual {225}
	223 Move X0, X8
	224 Call 0x1C17DFC
	225 Move X0, X21
	226 Move X1, X31
	227 Move X2, X31
	228 Call Object.op_Inequality, X0, X1
	229 Move TEMP, X0
	230 And TEMP, TEMP, 1
	231 Compare TEMP, 1
	232 JumpIfEqual {237}
	233 Move X0, X22
	234 Move X1, X31
	235 Call Transform.get_parent, X0
	236 Move X22, X0
	237 Move X0, [X28]
	238 Move W8, [X0+224]
	239 Compare W8, 0
	240 JumpIfNotEqual {242}
	241 Call 0x1C17DFC
	242 Move X0, X21
	243 Move X1, X31
	244 Move X2, X31
	245 Call Object.op_Inequality, X0, X1
	246 Move TEMP, X0
	247 And TEMP, TEMP, 1
	248 Compare TEMP, 1
	249 JumpIfNotEqual {297}
	250 Compare X21, 0
	251 JumpIfEqual {355}
	252 Move X8, 0x677000
	253 Move X8, [X8+2776]
	254 Move X0, X21
	255 Move X1, [X8]
	256 Call 0x21A53A8, X0
	257 Compare X0, 0
	258 JumpIfEqual {355}
	259 Move W8, [X0+24]
	260 Move X21, X0
	261 NotImplemented "Instruction CMP not yet implemented."
	262 Move W29, W31
	263 NotImplemented "Instruction CMP not yet implemented."
	264 Add X8, X21, W29
	265 Move X0, [X8+32]
	266 Compare X0, 0
	267 JumpIfEqual {355}
	268 Move X1, X31
	269 Call "il2cpp_vm_object_is_inst", X0
	270 Move X22, X0
	271 Move X0, X20
	272 Move X1, X22
	273 Move X2, X31
	274 Call GameObject.GetComponent, X0, X1
	275 Move X8, [X28]
	276 Move X23, X0
	277 Move W9, [X8+224]
	278 Compare W9, 0
	279 JumpIfNotEqual {282}
	280 Move X0, X8
	281 Call 0x1C17DFC
	282 Move X0, X23
	283 Move X1, X31
	284 Move X2, X31
	285 Call Object.op_Equality, X0, X1
	286 Move TEMP, X0
	287 And TEMP, TEMP, 1
	288 Compare TEMP, 1
	289 JumpIfNotEqual {294}
	290 Move X0, X20
	291 Move X1, X22
	292 Move X2, X31
	293 Call GameObject.AddComponent, X0, X1
	294 Move W8, [X21+24]
	295 Add W29, W29, 1
	296 NotImplemented "Instruction CMP not yet implemented."
	297 Move X8, 0x677000
	298 Move X8, [X8+2576]
	299 Move X0, [X8]
	300 Move W8, [X0+224]
	301 Compare W8, 0
	302 JumpIfNotEqual {304}
	303 Call 0x1C17DFC
	304 Move X8, 0x677000
	305 Move X8, [X8+2808]
	306 Move X0, X20
	307 Move X1, [X8]
	308 Call 0x2299CC8, X0
	309 Move X1, [X27]
	310 Move X0, X20
	311 Call 0x21E61FC, X0
	312 Compare X0, 0
	313 JumpIfEqual {355}
	314 Move X8, [X0]
	315 Move S0, W31
	316 Move S1, W31
	317 Move S2, W31
	318 Move X9, [X8+680]
	319 Move X1, [X8+688]
	320 Move S3, W31
	321 NotImplemented "Instruction BLR not yet implemented."
	322 Move X1, [X26]
	323 Move X0, X20
	324 Call 0x21E61FC, X0
	325 Compare X0, 0
	326 JumpIfEqual {355}
	327 Move X21, [X0+256]
	328 Move X0, [X25]
	329 Call 0x1C17F10
	330 Move X2, [X24]
	331 Move X1, X19
	332 Move X3, X31
	333 Move X22, X0
	334 Call UnityAction..ctor, X0, X1, X2
	335 Compare X21, 0
	336 JumpIfEqual {355}
	337 Move X0, X21
	338 Move X1, X22
	339 Move X2, X31
	340 Call UnityEvent.AddListener, X0, X1
	341 Move X0, X20
	342 Move X20, [X31+80]
	343 Move X19, [X31+88]
	344 Move X22, [X31+64]
	345 Move X21, [X31+72]
	346 Move X24, [X31+48]
	347 Move X23, [X31+56]
	348 Move X26, [X31+32]
	349 Move X25, [X31+40]
	350 Move X28, [X31+16]
	351 Move X27, [X31+24]
	352 Move X29, [X31+96]
	353 Move X30, [X31+104]
	354 Return X0
	355 Call 0x1C17F20
	356 Call 0x1C17F28

Method: System.Void DestroyBlocker(UnityEngine.GameObject blocker)

Disassembly:
	0x03AE221C LDR X8, [X26]
	0x03AE2220 MOV X0, X23
	0x03AE2224 MOV X2, X31
	0x03AE2228 LDR X8, [X8 + 0xB8]
	0x03AE222C LDR W1, [X8 + 0x54]
	0x03AE2230 ADD W8, W22, 0x1
	0x03AE2234 SCVTF S0, W8
	0x03AE2238 BL 0x3C15CD8
	0x03AE223C LDR X8, [X26]
	0x03AE2240 LDR V0, [X21 + 0x1A8]
	0x03AE2244 MOV X0, X23
	0x03AE2248 MOV X2, X31
	0x03AE224C LDR X8, [X8 + 0xB8]
	0x03AE2250 LDR W1, [X8 + 0x30]
	0x03AE2254 BL 0x3C15CD8
	0x03AE2258 LDR X8, [X26]
	0x03AE225C LDR V0, [X21 + 0x1B0]
	0x03AE2260 MOV X0, X23
	0x03AE2264 MOV X2, X31
	0x03AE2268 LDR X8, [X8 + 0xB8]
	0x03AE226C LDR W1, [X8 + 0x34]
	0x03AE2270 BL 0x3C15CD8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x901000
	006 Move X21, 0x612000
	007 Move W8, [X20+1403]
	008 Move X21, [X21+1432]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x612000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1403], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Object.Destroy, X0
	031 Return 

Method: UnityEngine.GameObject CreateDropdownList(UnityEngine.GameObject template)

Disassembly:
	0x03AE2274 MOVZ W25, 0x1
	0x03AE2278 B 0x3AE2304
	0x03AE227C BL 0x3B147A0
	0x03AE2280 ADRP X8, 0x615000
	0x03AE2284 LDR X8, [X8 + 0xCA0]
	0x03AE2288 MOV X22, X0
	0x03AE228C LDR X8, [X8]
	0x03AE2290 MOV X0, X8
	0x03AE2294 BL 0x1C16F10
	0x03AE2298 MOV X1, X22
	0x03AE229C MOV X2, X31
	0x03AE22A0 MOV X23, X0
	0x03AE22A4 BL 0x3C1454C
	0x03AE22A8 CBZ X23, 0x3AE23FC
	0x03AE22AC LDR X8, [X26]
	0x03AE22B0 MOV X0, X23
	0x03AE22B4 MOV X2, X25
	0x03AE22B8 MOV X3, X31
	0x03AE22BC LDR X8, [X8 + 0xB8]
	0x03AE22C0 LDR W1, [X8]
	0x03AE22C4 BL 0x3C14C34
	0x03AE22C8 LDR X8, [X26]
	0x03AE22CC SCVTF S0, W20
	0x03AE22D0 MOV X0, X23
	0x03AE22D4 MOV X2, X31
	0x03AE22D8 LDR X8, [X8 + 0xB8]
	0x03AE22DC LDR W1, [X8 + 0x68]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x901000
	006 Move X20, 0x612000
	007 Move W8, [X21+1404]
	008 Move X20, [X20+1432]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x612000
	015 Move X0, [X0+3448]
	016 Call 0x1C17CF4
	017 Move X0, 0x612000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1404], W8
	022 Move X0, [X20]
	023 Move X20, 0x612000
	024 Move W8, [X0+224]
	025 Move X20, [X20+3448]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X1, [X20]
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call 0x222E35C, X0
	036 Return X0

Method: System.Void DestroyDropdownList(UnityEngine.GameObject dropdownList)

Disassembly:
	0x03AE22E0 BL 0x3C15CD8
	0x03AE22E4 LDR X8, [X26]
	0x03AE22E8 SCVTF S0, W19
	0x03AE22EC MOV X0, X23
	0x03AE22F0 MOV X2, X31
	0x03AE22F4 LDR X8, [X8 + 0xB8]
	0x03AE22F8 LDR W1, [X8 + 0x6C]
	0x03AE22FC BL 0x3C15CD8
	0x03AE2300 MOV W25, W31
	0x03AE2304 STR X23, [X21 + 0x20]
	0x03AE2308 ADRP X23, 0x676000
	0x03AE230C LDR X23, [X23 + 0xBD8]
	0x03AE2310 LDR X0, [X23]
	0x03AE2314 BL 0x1C16F10
	0x03AE2318 ADRP X24, 0x676000
	0x03AE231C LDR X24, [X24 + 0xBD0]
	0x03AE2320 MOVZ W1, 0x8
	0x03AE2324 MOV X22, X0
	0x03AE2328 LDR X2, [X24]
	0x03AE232C BL 0x2FC4EFC
	0x03AE2330 SUB W3, W20, W25
	0x03AE2334 SUB W4, W19, W25

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x901000
	006 Move X21, 0x612000
	007 Move W8, [X20+1405]
	008 Move X21, [X21+1432]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x612000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1405], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Object.Destroy, X0
	031 Return 

Method: TMPro.TMP_Dropdown/DropdownItem CreateItem(TMPro.TMP_Dropdown/DropdownItem itemTemplate)

Disassembly:
	0x03AE2338 ADD X0, X31, 0x60
	0x03AE233C MOV W1, W31
	0x03AE2340 MOV W2, W31
	0x03AE2344 MOV X5, X31
	0x03AE2348 STP X31, X31, [X31 + 0x60]
	0x03AE234C BL 0x3C9C108
	0x03AE2350 CBZ X22, 0x3AE23FC
	0x03AE2354 ADRP X9, 0x676000
	0x03AE2358 LDP X1, X2, [X31 + 0x60]
	0x03AE235C LDR X9, [X9 + 0xBC8]
	0x03AE2360 LDR W10, [X22 + 0x1C]
	0x03AE2364 LDR X8, [X22 + 0x10]
	0x03AE2368 LDR X9, [X9]
	0x03AE236C ADD W10, W10, 0x1
	0x03AE2370 STR W10, [X22 + 0x1C]
	0x03AE2374 CBZ X8, 0x3AE23FC
	0x03AE2378 LDRSW X10, [X22 + 0x18]
	0x03AE237C LDR W11, [X8 + 0x18]
	0x03AE2380 CMP W10, W11
	0x03AE2384 B.CS 0x3AE239C
	0x03AE2388 ADD W9, W10, 0x1
	0x03AE238C ADD X8, X8, X10, 0x4, LSL
	0x03AE2390 STR W9, [X22 + 0x18]
	0x03AE2394 STP X1, X2, [X8 + 0x20]
	0x03AE2398 B 0x3AE23B0
	0x03AE239C LDR X8, [X9 + 0x20]
	0x03AE23A0 MOV X0, X22

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x901000
	006 Move X20, 0x612000
	007 Move W8, [X21+1406]
	008 Move X20, [X20+1432]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x677000
	015 Move X0, [X0+2960]
	016 Call 0x1C17CF4
	017 Move X0, 0x612000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1406], W8
	022 Move X0, [X20]
	023 Move X20, 0x677000
	024 Move W8, [X0+224]
	025 Move X20, [X20+2960]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X1, [X20]
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call 0x222E35C, X0
	036 Return X0

Method: System.Void DestroyItem(TMPro.TMP_Dropdown/DropdownItem item)

Disassembly:
	0x03AE23A4 LDR X8, [X8 + 0xC0]

ISIL:
	001 Return 

Method: TMPro.TMP_Dropdown/DropdownItem AddItem(TMPro.TMP_Dropdown/OptionData data, System.Boolean selected, TMPro.TMP_Dropdown/DropdownItem itemTemplate, System.Collections.Generic.List`1<TMPro.TMP_Dropdown/DropdownItem> items)

Disassembly:
	0x03AE194C MOVN W8, 0x0
	0x03AE1950 STR W8, [X19 + 0x10]
	0x03AE1954 ADRP X8, 0x61B000
	0x03AE1958 LDR V8, [X19 + 0x20]
	0x03AE195C LDR X8, [X8 + 0x9A0]
	0x03AE1960 LDR X0, [X8]
	0x03AE1964 BL 0x1C16F10
	0x03AE1968 MOV V0.16B, V8.16B
	0x03AE196C MOV X1, X31
	0x03AE1970 MOV X20, X0
	0x03AE1974 BL 0x3C3A730
	0x03AE1978 MOVZ W0, 0x1
	0x03AE197C STR X20, [X19 + 0x18]
	0x03AE1980 STR W0, [X19 + 0x10]
	0x03AE1984 B 0x3AE19A0
	0x03AE1988 LDR X0, [X19 + 0x28]
	0x03AE198C MOVN W8, 0x0
	0x03AE1990 STR W8, [X19 + 0x10]
	0x03AE1994 CBZ X0, 0x3AE19B0
	0x03AE1998 BL 0x3ADF04C
	0x03AE199C MOV W0, W31
	0x03AE19A0 LDP X20, X19, [X31 + 0x10]
	0x03AE19A4 LDR X30, [X31 + 0x8]
	0x03AE19A8 LDR V8, [X31], #0x20
	0x03AE19AC RET
	0x03AE19B0 BL 0x1C16F20
	0x03AE19B4 LDR X0, [X0 + 0x18]
	0x03AE19B8 RET
	0x03AE19BC STP X30, X19, [X31 - 0x10]!
	0x03AE19C0 ADRP X0, 0x612000
	0x03AE19C4 LDR X0, [X0 + 0xB40]
	0x03AE19C8 BL 0x1C16D08
	0x03AE19CC BL 0x1C16F10
	0x03AE19D0 MOV X1, X31
	0x03AE19D4 MOV X19, X0
	0x03AE19D8 BL 0x3380310
	0x03AE19DC ADRP X0, 0x677000
	0x03AE19E0 LDR X0, [X0 + 0xBB0]
	0x03AE19E4 BL 0x1C16D08
	0x03AE19E8 MOV X1, X0
	0x03AE19EC MOV X0, X19
	0x03AE19F0 BL 0x1C16DEC
	0x03AE19F4 LDR X0, [X0 + 0x18]
	0x03AE19F8 RET
	0x03AE19FC LDR X0, [X0 + 0x30]
	0x03AE1A00 RET
	0x03AE1A04 STR X1, [X0 + 0x30]
	0x03AE1A08 RET
	0x03AE1A0C LDR X0, [X0 + 0x40]
	0x03AE1A10 RET
	0x03AE1A14 STR X1, [X0 + 0x40]
	0x03AE1A18 RET
	0x03AE1A1C LDR W0, [X0 + 0x48]
	0x03AE1A20 RET
	0x03AE1A24 STR W1, [X0 + 0x48]
	0x03AE1A28 RET
	0x03AE1A2C ADD X1, X0, 0x50
	0x03AE1A30 MOVZ W2, 0x60
	0x03AE1A34 MOV X0, X8
	0x03AE1A38 B 0x3EB1AC0
	0x03AE1A3C STR X30, [X31 - 0x10]!
	0x03AE1A40 ADD X0, X0, 0x50
	0x03AE1A44 MOVZ W2, 0x60
	0x03AE1A48 BL 0x3EB1B30
	0x03AE1A4C LDR X30, [X31], #0x10
	0x03AE1A50 RET
	0x03AE1A54 LDR X0, [X0 + 0xB0]
	0x03AE1A58 RET
	0x03AE1A5C STR X1, [X0 + 0xB0]
	0x03AE1A60 RET
	0x03AE1A64 STP X30, X19, [X31 - 0x10]!
	0x03AE1A68 MOV X19, X0
	0x03AE1A6C LDR X0, [X0 + 0xB8]
	0x03AE1A70 CBNZ X0, 0x3AE1A80
	0x03AE1A74 MOV X0, X19
	0x03AE1A78 BL 0x3AE1A88
	0x03AE1A7C LDR X0, [X19 + 0xB8]
	0x03AE1A80 LDP X30, X19, [X31], #0x10
	0x03AE1A84 RET
	0x03AE1A88 STP X30, X21, [X31 - 0x20]!
	0x03AE1A8C STP X20, X19, [X31 + 0x10]
	0x03AE1A90 ADRP X21, 0x901000
	0x03AE1A94 ADRP X20, 0x612000
	0x03AE1A98 LDRB W8, [X21 + 0x591]
	0x03AE1A9C LDR X20, [X20 + 0x598]
	0x03AE1AA0 MOV X19, X0
	0x03AE1AA4 TBNZ X8, 0x0, 0x3AE1AE0
	0x03AE1AA8 ADRP X0, 0x612000
	0x03AE1AAC LDR X0, [X0 + 0x598]
	0x03AE1AB0 BL 0x1C16CF4
	0x03AE1AB4 ADRP X0, 0x677000
	0x03AE1AB8 LDR X0, [X0 + 0x338]
	0x03AE1ABC BL 0x1C16CF4
	0x03AE1AC0 ADRP X0, 0x677000
	0x03AE1AC4 LDR X0, [X0 + 0x578]
	0x03AE1AC8 BL 0x1C16CF4
	0x03AE1ACC ADRP X0, 0x677000
	0x03AE1AD0 LDR X0, [X0 + 0xBB8]
	0x03AE1AD4 BL 0x1C16CF4
	0x03AE1AD8 MOVZ W8, 0x1
	0x03AE1ADC STRB W8, [X21 + 0x591]
	0x03AE1AE0 LDR X0, [X20]
	0x03AE1AE4 LDR X20, [X19 + 0x20]
	0x03AE1AE8 LDR W8, [X0 + 0xE0]
	0x03AE1AEC CBNZ W8, 0x3AE1AF4
	0x03AE1AF0 BL 0x1C16DFC
	0x03AE1AF4 MOV X0, X20
	0x03AE1AF8 MOV X1, X31
	0x03AE1AFC MOV X2, X31
	0x03AE1B00 BL 0x3C354F8
	0x03AE1B04 TBZ X0, 0x0, 0x3AE1B20
	0x03AE1B08 LDR X0, [X19 + 0x30]
	0x03AE1B0C MOV X1, X31
	0x03AE1B10 BL 0x32277A8
	0x03AE1B14 TBZ X0, 0x0, 0x3AE1B20
	0x03AE1B18 MOV X0, X19
	0x03AE1B1C BL 0x3AE248C
	0x03AE1B20 MOV X0, X19
	0x03AE1B24 BL 0x3AE300C
	0x03AE1B28 MOV X0, X19
	0x03AE1B2C BL 0x3AE302C
	0x03AE1B30 ADD X20, X19, 0x50
	0x03AE1B34 MOV X0, X20
	0x03AE1B38 MOV X1, X31
	0x03AE1B3C BL 0x3C9BF98
	0x03AE1B40 FCMP S0, 0x0
	0x03AE1B44 B.NE 0x3AE1B58
	0x03AE1B48 FMOV S0, 1
	0x03AE1B4C MOV X0, X20
	0x03AE1B50 MOV X1, X31
	0x03AE1B54 BL 0x3C9BFA0
	0x03AE1B58 MOV X0, X20
	0x03AE1B5C MOV X1, X31
	0x03AE1B60 BL 0x3C9C068
	0x03AE1B64 FCMP S0, 0x0
	0x03AE1B68 B.NE 0x3AE1B8C
	0x03AE1B6C MOV X0, X20
	0x03AE1B70 MOV X1, X31
	0x03AE1B74 BL 0x3C9BFC8
	0x03AE1B78 FMOV S1, 2.5
	0x03AE1B7C FDIV S0, S0, S1
	0x03AE1B80 MOV X0, X20
	0x03AE1B84 MOV X1, X31
	0x03AE1B88 BL 0x3C9C070
	0x03AE1B8C LDR W8, [X19 + 0x110]
	0x03AE1B90 CBNZ W8, 0x3AE1C20
	0x03AE1B94 ADRP X21, 0x677000
	0x03AE1B98 LDR X21, [X21 + 0x338]
	0x03AE1B9C LDR X20, [X19 + 0x20]
	0x03AE1BA0 LDR X0, [X21]
	0x03AE1BA4 LDR W8, [X0 + 0xE0]
	0x03AE1BA8 CBNZ W8, 0x3AE1BB0
	0x03AE1BAC BL 0x1C16DFC
	0x03AE1BB0 CBZ X20, 0x3AE1CBC
	0x03AE1BB4 LDR X8, [X21]
	0x03AE1BB8 MOV X0, X20
	0x03AE1BBC MOV X2, X31
	0x03AE1BC0 LDR X8, [X8 + 0xB8]
	0x03AE1BC4 LDR W1, [X8 + 0x54]
	0x03AE1BC8 BL 0x3C14D08
	0x03AE1BCC TBZ X0, 0x0, 0x3AE1C20
	0x03AE1BD0 LDR X0, [X21]
	0x03AE1BD4 LDR X20, [X19 + 0x20]
	0x03AE1BD8 LDR W8, [X0 + 0xE0]
	0x03AE1BDC CBNZ W8, 0x3AE1BE4
	0x03AE1BE0 BL 0x1C16DFC
	0x03AE1BE4 CBZ X20, 0x3AE1CBC
	0x03AE1BE8 LDR X8, [X21]
	0x03AE1BEC MOV X0, X20
	0x03AE1BF0 MOV X2, X31
	0x03AE1BF4 LDR X8, [X8 + 0xB8]
	0x03AE1BF8 LDR W1, [X8 + 0x54]
	0x03AE1BFC BL 0x3C15F98
	0x03AE1C00 MOVZ W9, 0x7F800000
	0x03AE1C04 FCVTZS W8, S0
	0x03AE1C08 FMOV S1, W9
	0x03AE1C0C SUB W8, W8, 0x1
	0x03AE1C10 FCMP S0, S1
	0x03AE1C14 MOVN W9, 0x80000000
	0x03AE1C18 CSEL W8, W9, W8, EQ
	0x03AE1C1C STR W8, [X19 + 0x110]
	0x03AE1C20 ADRP X20, 0x677000
	0x03AE1C24 ADRP X21, 0x677000
	0x03AE1C28 LDR X20, [X20 + 0xBB8]
	0x03AE1C2C LDR X21, [X21 + 0x578]
	0x03AE1C30 MOV X0, X19

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x902000
	009 Move W8, [X23+1407]
	010 Move X19, X4
	011 Move X22, X3
	012 Move X21, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {38}
	018 Move X0, 0x678000
	019 Move X0, [X0+2888]
	020 Call 0x1C17CF4
	021 Move X0, 0x678000
	022 Move X0, [X0+2712]
	023 Call 0x1C17CF4
	024 Move X0, 0x613000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0x617000
	028 Move X0, [X0+2344]
	029 Call 0x1C17CF4
	030 Move X0, 0x678000
	031 Move X0, [X0+2896]
	032 Call 0x1C17CF4
	033 Move X0, 0x613000
	034 Move X0, [X0+2440]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X23+1407], W8
	038 Move X8, [X20]
	039 Move X0, X20
	040 Move X1, X22
	041 Move X9, [X8+1096]
	042 Move X2, [X8+1104]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Compare X0, 0
	045 JumpIfEqual {219}
	046 Compare X22, 0
	047 JumpIfEqual {219}
	048 Move X20, X0
	049 Move X0, [X22+48]
	050 Compare X0, 0
	051 JumpIfEqual {219}
	052 Move X22, [X20+48]
	053 Move X1, X31
	054 Call Transform.get_parent, X0
	055 Compare X22, 0
	056 JumpIfEqual {219}
	057 Move X1, X0
	058 Move X0, X22
	059 Move W2, W31
	060 Move X3, X31
	061 Call Transform.SetParent, X0, X1, X2
	062 Move X0, X20
	063 Move X1, X31
	064 Call Component.get_gameObject, X0
	065 Compare X0, 0
	066 JumpIfEqual {219}
	067 Move W1, 1
	068 Move X2, X31
	069 Call GameObject.SetActive, X0, X1
	070 Move X0, X20
	071 Move X1, X31
	072 Call Component.get_gameObject, X0
	073 Compare X19, 0
	074 JumpIfEqual {219}
	075 Move W8, [X19+24]
	076 Move X22, X0
	077 Add X0, X31, 12
	078 Move X1, X31
	079 Move [X31+12], W8
	080 Call Int32.ToString, X0
	081 Compare X21, 0
	082 JumpIfEqual {219}
	083 Move X8, 0x678000
	084 Move X8, [X8+2896]
	085 Move X1, [X21+16]
	086 Move X23, X0
	087 Move X24, [X8]
	088 Compare X1, 0
	089 JumpIfEqual {96}
	090 Move X8, 0x617000
	091 Move X8, [X8+2344]
	092 Move X2, X31
	093 Move X0, [X8]
	094 Call String.Concat, X0, X1
	095 Move X2, X0
	096 Move X8, 0x613000
	097 Move X8, [X8+2440]
	098 Move X2, [X8]
	099 Move X0, X24
	100 Move X1, X23
	101 Move X3, X31
	102 Call String.Concat, X0, X1, X2
	103 Compare X22, 0
	104 JumpIfEqual {219}
	105 Move X23, 0x613000
	106 Move X23, [X23+1432]
	107 Move X1, X0
	108 Move X0, X22
	109 Move X2, X31
	110 Call Object.set_name, X0, X1
	111 Move X0, [X23]
	112 Move X22, [X20+56]
	113 Move W8, [X0+224]
	114 Compare W8, 0
	115 JumpIfNotEqual {117}
	116 Call 0x1C17DFC
	117 Move X0, X22
	118 Move X1, X31
	119 Move X2, X31
	120 Call Object.op_Inequality, X0, X1
	121 Move TEMP, X0
	122 And TEMP, TEMP, 1
	123 Compare TEMP, 1
	124 JumpIfNotEqual {131}
	125 Move X0, [X20+56]
	126 Compare X0, 0
	127 JumpIfEqual {219}
	128 Move W1, W31
	129 Move X2, X31
	130 Call Toggle.set_isOn, X0, X1
	131 Move X0, [X23]
	132 Move X22, [X20+32]
	133 Move W8, [X0+224]
	134 Compare W8, 0
	135 JumpIfNotEqual {137}
	136 Call 0x1C17DFC
	137 Move X0, X22
	138 Move X1, X31
	139 Call Object.op_Implicit, X0
	140 Move TEMP, X0
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfNotEqual {152}
	144 Move X0, [X20+32]
	145 Compare X0, 0
	146 JumpIfEqual {219}
	147 Move X8, [X0]
	148 Move X1, [X21+16]
	149 Move X9, [X8+1368]
	150 Move X2, [X8+1376]
	151 NotImplemented "Instruction BLR not yet implemented."
	152 Move X0, [X23]
	153 Move X22, [X20+40]
	154 Move W8, [X0+224]
	155 Compare W8, 0
	156 JumpIfNotEqual {158}
	157 Call 0x1C17DFC
	158 Move X0, X22
	159 Move X1, X31
	160 Call Object.op_Implicit, X0
	161 Move TEMP, X0
	162 And TEMP, TEMP, 1
	163 Compare TEMP, 1
	164 JumpIfNotEqual {188}
	165 Move X0, [X20+40]
	166 Compare X0, 0
	167 JumpIfEqual {219}
	168 Move X1, [X21+24]
	169 Move X2, X31
	170 Call Image.set_sprite, X0, X1
	171 Move X21, [X20+40]
	172 Compare X21, 0
	173 JumpIfEqual {219}
	174 Move X0, [X23]
	175 Move X22, [X21+216]
	176 Move W8, [X0+224]
	177 Compare W8, 0
	178 JumpIfNotEqual {180}
	179 Call 0x1C17DFC
	180 Move X0, X22
	181 Move X1, X31
	182 Move X2, X31
	183 Call Object.op_Inequality, X0, X1
	184 And W1, W0, 1
	185 Move X0, X21
	186 Move X2, X31
	187 Call Behaviour.set_enabled, X0, X1
	188 Move X9, 0x678000
	189 Move X9, [X9+2888]
	190 Move W10, [X19+28]
	191 Move X8, [X19+16]
	192 Move X9, [X9]
	193 Add W10, W10, 1
	194 Move [X19+28], W10
	195 Compare X8, 0
	196 JumpIfEqual {219}
	197 NotImplemented "Instruction LDRSW not yet implemented."
	198 Move W11, [X8+24]
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Add W9, W10, 1
	201 Add X8, X8, X10
	202 Move [X19+24], W9
	203 Move [X8+32], X20
	204 Move X8, [X9+32]
	205 Move X0, X19
	206 Move X1, X20
	207 Move X8, [X8+192]
	208 Move X2, [X8+112]
	209 Call List`1<Object>.AddWithResize, X0, X1
	210 Move X0, X20
	211 Move X20, [X31+48]
	212 Move X19, [X31+56]
	213 Move X22, [X31+32]
	214 Move X21, [X31+40]
	215 Move X24, [X31+16]
	216 Move X23, [X31+24]
	217 Move X30, [X31+64]
	218 Return X0
	219 Call 0x1C17F20

Method: System.Void AlphaFadeList(System.Single duration, System.Single alpha)

Disassembly:
	0x03AE23A8 LDR X3, [X8 + 0x70]
	0x03AE23AC BL 0x2FC569C
	0x03AE23B0 STR X22, [X21 + 0xF0]
	0x03AE23B4 LDR X0, [X23]
	0x03AE23B8 BL 0x1C16F10
	0x03AE23BC LDR X2, [X24]
	0x03AE23C0 MOVZ W1, 0x8
	0x03AE23C4 MOV X19, X0
	0x03AE23C8 BL 0x2FC4EFC
	0x03AE23CC MOV X0, X21
	0x03AE23D0 STR X19, [X21 + 0xE8]
	0x03AE23D4 BL 0x3AE1A88
	0x03AE23D8 MOV X0, X21
	0x03AE23DC LDP X20, X19, [X31 + 0x110]
	0x03AE23E0 LDP X22, X21, [X31 + 0x100]
	0x03AE23E4 LDP X24, X23, [X31 + 0xF0]
	0x03AE23E8 LDP X26, X25, [X31 + 0xE0]
	0x03AE23EC LDP X28, X27, [X31 + 0xD0]
	0x03AE23F0 LDP X29, X30, [X31 + 0xC0]
	0x03AE23F4 ADD X31, X31, 0x120
	0x03AE23F8 RET
	0x03AE23FC BL 0x1C16F20
	0x03AE2400 BL 0x1C16F28
	0x03AE2404 STP X30, X21, [X31 - 0x20]!
	0x03AE2408 STP X20, X19, [X31 + 0x10]
	0x03AE240C ADRP X21, 0x900000
	0x03AE2410 ADRP X20, 0x611000
	0x03AE2414 LDRB W8, [X21 + 0x590]
	0x03AE2418 LDR X20, [X20 + 0x598]
	0x03AE241C MOV X19, X0
	0x03AE2420 TBNZ X8, 0x0, 0x3AE2438
	0x03AE2424 ADRP X0, 0x611000

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x901000
	007 Move W8, [X20+1408]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x677000
	016 Move X0, [X0+2968]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1408], W8
	020 Move X0, [X19+336]
	021 Compare X0, 0
	022 JumpIfEqual {42}
	023 Move X8, 0x677000
	024 Move X8, [X8+2968]
	025 Move X1, [X8]
	026 Call 0x21E62E4, X0
	027 Compare X0, 0
	028 JumpIfEqual {42}
	029 Move X1, X31
	030 Call CanvasGroup.get_alpha, X0
	031 Move X0, X19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X30, [X31+16]
	035 Move V1, V0
	036 Move V0, V9
	037 Move V2, V8
	038 Move D9, [X31+48]
	039 Move D8, [X31+56]
	040 Call TMP_Dropdown.AlphaFadeList, X0, V0, V1, V2
	041 Return 
	042 Call 0x1C17F20

Method: System.Void AlphaFadeList(System.Single duration, System.Single start, System.Single end)

Disassembly:
	0x03AE1C34 MOV X1, X31
	0x03AE1C38 BL 0x3C389D4
	0x03AE1C3C LDR X8, [X20]
	0x03AE1C40 MOV X20, X0
	0x03AE1C44 LDR W9, [X8 + 0xE0]
	0x03AE1C48 CBNZ W9, 0x3AE1C54
	0x03AE1C4C MOV X0, X8
	0x03AE1C50 BL 0x1C16DFC
	0x03AE1C54 MOV X0, X20
	0x03AE1C58 MOV X1, X31
	0x03AE1C5C BL 0x3B17960
	0x03AE1C60 STR W0, [X19 + 0x1C]
	0x03AE1C64 MOV X0, X19
	0x03AE1C68 MOV X1, X31
	0x03AE1C6C BL 0x3C389D4
	0x03AE1C70 LDR X8, [X21]
	0x03AE1C74 MOV X20, X0
	0x03AE1C78 LDR W9, [X8 + 0xE0]
	0x03AE1C7C CBNZ W9, 0x3AE1C8C
	0x03AE1C80 MOV X0, X8
	0x03AE1C84 BL 0x1C16DFC
	0x03AE1C88 LDR X8, [X21]
	0x03AE1C8C LDR X8, [X8 + 0xB8]
	0x03AE1C90 MOV X0, X20
	0x03AE1C94 MOV X2, X31
	0x03AE1C98 LDR X1, [X8 + 0x38]
	0x03AE1C9C BL 0x321B938
	0x03AE1CA0 MOV X1, X31
	0x03AE1CA4 BL 0x3B17960
	0x03AE1CA8 STR W0, [X19 + 0x28]
	0x03AE1CAC STRB W31, [X19 + 0x1BA]
	0x03AE1CB0 LDP X20, X19, [X31 + 0x10]
	0x03AE1CB4 LDP X30, X21, [X31], #0x20
	0x03AE1CB8 RET
	0x03AE1CBC BL 0x1C16F20
	0x03AE1CC0 LDR X0, [X0 + 0xC0]
	0x03AE1CC4 RET
	0x03AE1CC8 STR X1, [X0 + 0xC0]
	0x03AE1CCC RET
	0x03AE1CD0 STP X30, X19, [X31 - 0x10]!
	0x03AE1CD4 MOV X19, X0
	0x03AE1CD8 LDR X0, [X0 + 0xC8]
	0x03AE1CDC CBNZ X0, 0x3AE1CEC
	0x03AE1CE0 MOV X0, X19
	0x03AE1CE4 BL 0x3AE1A88
	0x03AE1CE8 LDR X0, [X19 + 0xC8]
	0x03AE1CEC LDP X30, X19, [X31], #0x10
	0x03AE1CF0 RET
	0x03AE1CF4 STP X30, X21, [X31 - 0x20]!
	0x03AE1CF8 STP X20, X19, [X31 + 0x10]
	0x03AE1CFC ADRP X21, 0x901000
	0x03AE1D00 ADRP X20, 0x612000
	0x03AE1D04 LDRB W8, [X21 + 0x58D]
	0x03AE1D08 LDR X20, [X20 + 0x598]
	0x03AE1D0C MOV X19, X0
	0x03AE1D10 TBNZ X8, 0x0, 0x3AE1D28
	0x03AE1D14 ADRP X0, 0x612000
	0x03AE1D18 LDR X0, [X0 + 0x598]
	0x03AE1D1C BL 0x1C16CF4
	0x03AE1D20 MOVZ W8, 0x1
	0x03AE1D24 STRB W8, [X21 + 0x58D]
	0x03AE1D28 LDR X0, [X20]
	0x03AE1D2C LDR X20, [X19 + 0xD0]
	0x03AE1D30 LDR W8, [X0 + 0xE0]
	0x03AE1D34 CBNZ W8, 0x3AE1D3C
	0x03AE1D38 BL 0x1C16DFC
	0x03AE1D3C MOV X0, X20
	0x03AE1D40 MOV X1, X31
	0x03AE1D44 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+80], D9
	003 Move [X31+88], D8
	004 Move [X31+96], X30
	005 Move [X31+112], X20
	006 Move [X31+120], X19
	007 Move X20, 0x902000
	008 Move W8, [X20+1409]
	009 Move V8, V1
	010 Move V9, V0
	011 Move X19, X0
	012 Move [X31+108], S2
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x678000
	018 Move X0, [X0+2904]
	019 Call 0x1C17CF4
	020 Move X0, 0x678000
	021 Move X0, [X0+2912]
	022 Call 0x1C17CF4
	023 Move X0, 0x678000
	024 Move X0, [X0+2920]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+1409], W8
	028 Add X0, X31, 108
	029 Move V0, V8
	030 Move X1, X31
	031 Call Single.Equals, X0, V0
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {74}
	036 Move [X31+24], X31
	037 Move [X31+40], S9
	038 Move X8, 0x678000
	039 Move V0, [X31+108]
	040 Move X8, [X8+2920]
	041 Move [X31+44], W31
	042 Move [X31+32], S8
	043 Move [X31+40], S0
	044 Move X0, [X8]
	045 Call 0x1C17F10
	046 Move X8, 0x678000
	047 Move X8, [X8+2904]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X20, X0
	051 Move X2, [X8]
	052 Call UnityAction`1<Single>..ctor, X0, X1, X2
	053 Add X0, X31, 24
	054 Move X1, X20
	055 Call FloatTween.AddOnChangedCallback, X0, X1
	056 Move W8, 1
	057 Move [X31+44], W8
	058 NotImplemented "Instruction LDUR not yet implemented."
	059 Move X0, [X19+360]
	060 Move X8, [X31+40]
	061 Move [X31], V0
	062 Move [X31+16], X8
	063 Compare X0, 0
	064 JumpIfEqual {81}
	065 Move X8, 0x678000
	066 Move X8, [X8+2912]
	067 Move V0, [X31]
	068 Move X9, [X31+16]
	069 Add X1, X31, 48
	070 Move X2, [X8]
	071 Move [X31+3], V0
	072 Move [X31+64], X9
	073 Call 0x2709A48, X0, X1
	074 Move X20, [X31+112]
	075 Move X19, [X31+120]
	076 Move X30, [X31+96]
	077 Move D9, [X31+80]
	078 Move D8, [X31+88]
	079 Add X31, X31, 128
	080 Return 
	081 Call 0x1C17F20

Method: System.Void SetAlpha(System.Single alpha)

Disassembly:
	0x03AE2428 LDR X0, [X0 + 0x598]
	0x03AE242C BL 0x1C16CF4
	0x03AE2430 MOVZ W8, 0x1
	0x03AE2434 STRB W8, [X21 + 0x590]
	0x03AE2438 LDR X0, [X20]
	0x03AE243C LDR X20, [X19 + 0x20]
	0x03AE2440 LDR W8, [X0 + 0xE0]
	0x03AE2444 CBNZ W8, 0x3AE244C
	0x03AE2448 BL 0x1C16DFC
	0x03AE244C MOV X0, X20
	0x03AE2450 MOV X1, X31
	0x03AE2454 MOV X2, X31
	0x03AE2458 BL 0x3C354F8
	0x03AE245C TBZ X0, 0x0, 0x3AE2480
	0x03AE2460 LDR X0, [X19 + 0x30]
	0x03AE2464 MOV X1, X31
	0x03AE2468 BL 0x32277A8
	0x03AE246C TBZ X0, 0x0, 0x3AE2480
	0x03AE2470 MOV X0, X19
	0x03AE2474 LDP X20, X19, [X31 + 0x10]
	0x03AE2478 LDP X30, X21, [X31], #0x20
	0x03AE247C B 0x3AE248C
	0x03AE2480 LDP X20, X19, [X31 + 0x10]
	0x03AE2484 LDP X30, X21, [X31], #0x20
	0x03AE2488 RET
	0x03AE248C SUB X31, X31, 0xD0
	0x03AE2490 STR D8, [X31 + 0x60]
	0x03AE2494 STP X29, X30, [X31 + 0x70]
	0x03AE2498 STP X28, X27, [X31 + 0x80]
	0x03AE249C STP X26, X25, [X31 + 0x90]
	0x03AE24A0 STP X24, X23, [X31 + 0xA0]
	0x03AE24A4 STP X22, X21, [X31 + 0xB0]
	0x03AE24A8 STP X20, X19, [X31 + 0xC0]
	0x03AE24AC ADRP X21, 0x900000
	0x03AE24B0 ADRP X22, 0x676000
	0x03AE24B4 ADRP X20, 0x611000
	0x03AE24B8 LDRB W8, [X21 + 0x5B3]
	0x03AE24BC LDR X22, [X22 + 0xBF0]
	0x03AE24C0 LDR X20, [X20 + 0xAC8]
	0x03AE24C4 MOV X19, X0
	0x03AE24C8 TBNZ X8, 0x0, 0x3AE260C
	0x03AE24CC ADRP X0, 0x611000
	0x03AE24D0 LDR X0, [X0 + 0xA28]
	0x03AE24D4 BL 0x1C16CF4
	0x03AE24D8 ADRP X0, 0x639000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x901000
	007 Move X20, 0x612000
	008 Move W8, [X21+1410]
	009 Move X20, [X20+1432]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x677000
	017 Move X0, [X0+2968]
	018 Call 0x1C17CF4
	019 Move X0, 0x612000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1410], W8
	024 Move X0, [X20]
	025 Move X20, [X19+336]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Call Object.op_Implicit, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {55}
	037 Move X0, [X19+336]
	038 Compare X0, 0
	039 JumpIfEqual {61}
	040 Move X8, 0x677000
	041 Move X8, [X8+2968]
	042 Move X1, [X8]
	043 Call 0x21E62E4, X0
	044 Compare X0, 0
	045 JumpIfEqual {61}
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X30, [X31+16]
	049 Move X21, [X31+24]
	050 Move V0, V8
	051 Move X1, X31
	052 Move V8, [X31+48]
	053 Call CanvasGroup.set_alpha, X0, V0
	054 Return 
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X30, [X31+16]
	058 Move X21, [X31+24]
	059 Move V8, [X31+48]
	060 Return 
	061 Call 0x1C17F20

Method: System.Void Hide()

Disassembly:
	0x03AE1830 MOV X19, X0
	0x03AE1834 LDR W9, [X8 + 0xE0]
	0x03AE1838 CBNZ W9, 0x3AE1844
	0x03AE183C MOV X0, X8
	0x03AE1840 BL 0x1C16DFC
	0x03AE1844 MOV X0, X19
	0x03AE1848 MOV X1, X31
	0x03AE184C BL 0x3C38948
	0x03AE1850 TBZ X0, 0x0, 0x3AE186C
	0x03AE1854 CBZ X19, 0x3AE187C
	0x03AE1858 MOV X0, X19
	0x03AE185C LDP X20, X19, [X31 + 0x20]
	0x03AE1860 LDP X22, X21, [X31 + 0x10]
	0x03AE1864 LDR X30, [X31], #0x30
	0x03AE1868 B 0x3AE0830
	0x03AE186C LDP X20, X19, [X31 + 0x20]
	0x03AE1870 LDP X22, X21, [X31 + 0x10]
	0x03AE1874 LDR X30, [X31], #0x30
	0x03AE1878 RET
	0x03AE187C BL 0x1C16F20
	0x03AE1880 MOV X1, X31
	0x03AE1884 B 0x3C36C30
	0x03AE1888 LDR X0, [X0 + 0x10]
	0x03AE188C RET
	0x03AE1890 STR X1, [X0 + 0x10]
	0x03AE1894 RET
	0x03AE1898 LDR X0, [X0 + 0x18]
	0x03AE189C RET
	0x03AE18A0 STR X1, [X0 + 0x18]
	0x03AE18A4 RET
	0x03AE18A8 STP X30, X21, [X31 - 0x20]!
	0x03AE18AC STP X20, X19, [X31 + 0x10]
	0x03AE18B0 MOV X20, X1
	0x03AE18B4 MOV X1, X31
	0x03AE18B8 MOV X19, X2
	0x03AE18BC MOV X21, X0
	0x03AE18C0 BL 0x33BDD8C
	0x03AE18C4 STP X20, X19, [X21 + 0x10]
	0x03AE18C8 LDP X20, X19, [X31 + 0x10]
	0x03AE18CC LDP X30, X21, [X31], #0x20
	0x03AE18D0 RET
	0x03AE18D4 LDR X0, [X0 + 0x10]
	0x03AE18D8 RET
	0x03AE18DC STR X1, [X0 + 0x10]
	0x03AE18E0 RET
	0x03AE18E4 STR X30, [X31 - 0x10]!
	0x03AE18E8 LDR X8, [X0 + 0x10]
	0x03AE18EC CBZ X8, 0x3AE1904
	0x03AE18F0 LDR X0, [X0 + 0x18]
	0x03AE18F4 CBZ X0, 0x3AE1904
	0x03AE18F8 LDR X1, [X8 + 0x38]
	0x03AE18FC LDR X30, [X31], #0x10
	0x03AE1900 B 0x3AE1574
	0x03AE1904 BL 0x1C16F20
	0x03AE1908 RET
	0x03AE190C STR D8, [X31 - 0x20]!
	0x03AE1910 STR X30, [X31 + 0x8]
	0x03AE1914 STP X20, X19, [X31 + 0x10]
	0x03AE1918 ADRP X20, 0x901000
	0x03AE191C LDRB W8, [X20 + 0x58C]
	0x03AE1920 MOV X19, X0
	0x03AE1924 TBNZ X8, 0x0, 0x3AE193C
	0x03AE1928 ADRP X0, 0x61B000
	0x03AE192C LDR X0, [X0 + 0x9A0]
	0x03AE1930 BL 0x1C16CF4
	0x03AE1934 MOVZ W8, 0x1
	0x03AE1938 STRB W8, [X20 + 0x58C]
	0x03AE193C LDR W8, [X19 + 0x10]
	0x03AE1940 CMP W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x902000
	006 Move W8, [X20+1411]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x613000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1411], W8
	017 Move X8, [X19+376]
	018 Compare X8, 0
	019 JumpIfEqual {25}
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Move X21, [X31+40]
	024 Return 
	025 Move X21, 0x613000
	026 Move X21, [X21+1432]
	027 Move X20, [X19+336]
	028 Move X0, [X21]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Inequality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {62}
	041 Move V0, [X19+328]
	042 Move S1, W31
	043 Move X0, X19
	044 Call TMP_Dropdown.AlphaFadeList, X0, V0, V1
	045 Move X8, [X19]
	046 Move X0, X19
	047 Move X9, [X8+456]
	048 Move X1, [X8+464]
	049 NotImplemented "Instruction BLR not yet implemented."
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {62}
	054 Move V0, [X19+328]
	055 Move X0, X19
	056 Call TMP_Dropdown.DelayedDestroyDropdownList, X0, V0
	057 Move X1, X0
	058 Move X0, X19
	059 Move X2, X31
	060 Call MonoBehaviour.StartCoroutine, X0, X1
	061 Move [X19+376], X0
	062 Move X0, [X21]
	063 Move X20, [X19+344]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X0, X20
	069 Move X1, X31
	070 Move X2, X31
	071 Call Object.op_Inequality, X0, X1
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {82}
	076 Move X8, [X19]
	077 Move X1, [X19+344]
	078 Move X0, X19
	079 Move X9, [X8+1048]
	080 Move X2, [X8+1056]
	081 NotImplemented "Instruction BLR not yet implemented."
	082 Move X8, [X19]
	083 Move [X19+344], X31
	084 Move X0, X19
	085 Move X20, [X31+16]
	086 Move X19, [X31+24]
	087 Move X2, [X8+920]
	088 Move X1, [X8+928]
	089 Move X30, [X31+32]
	090 Move X21, [X31+40]
	091 CallNoReturn X2

Method: System.Collections.IEnumerator DelayedDestroyDropdownList(System.Single delay)

Disassembly:
	0x03AE24DC LDR X0, [X0 + 0x608]
	0x03AE24E0 BL 0x1C16CF4
	0x03AE24E4 ADRP X0, 0x676000
	0x03AE24E8 LDR X0, [X0 + 0xC08]
	0x03AE24EC BL 0x1C16CF4
	0x03AE24F0 ADRP X0, 0x676000
	0x03AE24F4 LDR X0, [X0 + 0xC10]
	0x03AE24F8 BL 0x1C16CF4
	0x03AE24FC ADRP X0, 0x676000
	0x03AE2500 LDR X0, [X0 + 0xC18]
	0x03AE2504 BL 0x1C16CF4
	0x03AE2508 ADRP X0, 0x676000
	0x03AE250C LDR X0, [X0 + 0xC20]
	0x03AE2510 BL 0x1C16CF4
	0x03AE2514 ADRP X0, 0x676000
	0x03AE2518 LDR X0, [X0 + 0xC28]
	0x03AE251C BL 0x1C16CF4
	0x03AE2520 ADRP X0, 0x676000
	0x03AE2524 LDR X0, [X0 + 0xC30]
	0x03AE2528 BL 0x1C16CF4
	0x03AE252C ADRP X0, 0x676000
	0x03AE2530 LDR X0, [X0 + 0xC38]
	0x03AE2534 BL 0x1C16CF4
	0x03AE2538 ADRP X0, 0x676000
	0x03AE253C LDR X0, [X0 + 0x610]
	0x03AE2540 BL 0x1C16CF4
	0x03AE2544 ADRP X0, 0x676000
	0x03AE2548 LDR X0, [X0 + 0xC40]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x901000
	007 Move X21, 0x677000
	008 Move W8, [X20+1412]
	009 Move X21, [X21+2976]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x677000
	017 Move X0, [X0+2976]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+1412], W8
	021 Move X0, [X21]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X20, X0
	025 Call Object..ctor, X0
	026 Move [X20+16], W31
	027 Move [X20+40], X19
	028 Move [X20+32], S8
	029 Move X0, X20
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Move V8, [X31+48]
	035 Return X0

Method: System.Void ImmediateDestroyDropdownList()

Disassembly:
	0x03AE004C BL 0x3C3F49C
	0x03AE0050 CBZ X20, 0x3AE076C
	0x03AE0054 MOV X1, X0
	0x03AE0058 MOV X0, X20
	0x03AE005C MOV W2, W31
	0x03AE0060 MOV X3, X31
	0x03AE0064 BL 0x3C3FEB8
	0x03AE0068 LDR X0, [X19 + 0x150]
	0x03AE006C CBZ X0, 0x3AE076C
	0x03AE0070 ADRP X8, 0x678000
	0x03AE0074 LDR X8, [X8 + 0xB28]
	0x03AE0078 LDR X1, [X8]
	0x03AE007C BL 0x21E5548
	0x03AE0080 CBZ X0, 0x3AE076C
	0x03AE0084 MOV X21, X0
	0x03AE0088 LDR X0, [X0 + 0x30]
	0x03AE008C CBZ X0, 0x3AE076C
	0x03AE0090 MOV X1, X31
	0x03AE0094 BL 0x3C3F49C
	0x03AE0098 CBZ X0, 0x3AE076C
	0x03AE009C MOV X1, X31
	0x03AE00A0 BL 0x3C32ECC
	0x03AE00A4 CBZ X0, 0x3AE076C
	0x03AE00A8 MOV X1, X31
	0x03AE00AC BL 0x3C356F8
	0x03AE00B0 CBZ X0, 0x3AE00D0
	0x03AE00B4 ADRP X8, 0x63A000
	0x03AE00B8 LDR X8, [X8 + 0xC70]
	0x03AE00BC LDR X9, [X0]
	0x03AE00C0 LDR X8, [X8]
	0x03AE00C4 CMP X9, X8
	0x03AE00C8 CSEL X22, X0, X31, EQ
	0x03AE00CC B 0x3AE00D4
	0x03AE00D0 MOV X22, X31
	0x03AE00D4 LDR X0, [X21 + 0x30]
	0x03AE00D8 CBZ X0, 0x3AE076C
	0x03AE00DC MOV X1, X31
	0x03AE00E0 BL 0x3C32ECC
	0x03AE00E4 CBZ X0, 0x3AE076C
	0x03AE00E8 MOVZ W1, 0x1
	0x03AE00EC MOV X2, X31
	0x03AE00F0 BL 0x3C357B4
	0x03AE00F4 CBZ X22, 0x3AE076C
	0x03AE00F8 MOV X0, X22
	0x03AE00FC MOV X1, X31
	0x03AE0100 BL 0x3C3E51C
	0x03AE0104 LDR X0, [X21 + 0x30]
	0x03AE0108 CBZ X0, 0x3AE076C
	0x03AE010C MOV X1, X31
	0x03AE0110 MOV V9.16B, V1.16B
	0x03AE0114 MOV V10.16B, V3.16B
	0x03AE0118 BL 0x3C3E51C
	0x03AE011C LDR X0, [X21 + 0x30]
	0x03AE0120 CBZ X0, 0x3AE076C
	0x03AE0124 MOV X1, X31
	0x03AE0128 MOV V12.16B, V1.16B
	0x03AE012C MOV V14.16B, V3.16B
	0x03AE0130 BL 0x3C3EB78
	0x03AE0134 LDR X0, [X21 + 0x30]
	0x03AE0138 CBZ X0, 0x3AE076C
	0x03AE013C MOV X1, X31
	0x03AE0140 MOV V11.16B, V1.16B
	0x03AE0144 BL 0x3C3EB78
	0x03AE0148 LDR X8, [X19 + 0x160]
	0x03AE014C CBZ X8, 0x3AE076C
	0x03AE0150 LDP W2, W9, [X8 + 0x18]
	0x03AE0154 MOV V13.16B, V1.16B
	0x03AE0158 STR X22, [X31 + 0x50]
	0x03AE015C STR X20, [X31 + 0x30]
	0x03AE0160 ADD W9, W9, 0x1
	0x03AE0164 CMP W2, 0x1
	0x03AE0168 STP X25, X26, [X31 + 0x18]
	0x03AE016C STP W31, W9, [X8 + 0x18]
	0x03AE0170 B.LT 0x3AE0184
	0x03AE0174 LDR X0, [X8 + 0x10]
	0x03AE0178 MOV W1, W31
	0x03AE017C MOV X3, X31
	0x03AE0180 BL 0x339FA34
	0x03AE0184 LDR X8, [X19 + 0x138]
	0x03AE0188 CBZ X8, 0x3AE076C
	0x03AE018C ADRP X20, 0x678000
	0x03AE0190 ADRP X22, 0x678000
	0x03AE0194 LDR X20, [X20 + 0xB38]
	0x03AE0198 LDR X22, [X22 + 0xA20]
	0x03AE019C FADD S0, S14, S12
	0x03AE01A0 FADD S1, S10, S9
	0x03AE01A4 FSUB S2, S12, S9
	0x03AE01A8 ADD X9, X31, 0x80
	0x03AE01AC FSUB S0, S0, S1
	0x03AE01B0 MOV X25, X31
	0x03AE01B4 MOV W24, W31
	0x03AE01B8 FADD S10, S2, S11
	0x03AE01BC ORR X29, X9, 0x7
	0x03AE01C0 FADD S9, S0, S13
	0x03AE01C4 STR X21, [X31 + 0x28]
	0x03AE01C8 LDR X8, [X8 + 0x10]
	0x03AE01CC CBZ X8, 0x3AE076C
	0x03AE01D0 LDR W8, [X8 + 0x18]
	0x03AE01D4 CMP W24, W8
	0x03AE01D8 B.GE 0x3AE03D4
	0x03AE01DC LDR X0, [X20]
	0x03AE01E0 BL 0x1C16F10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x903000
	009 Move W8, [X20+1413]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0x679000
	016 Move X0, [X0+2704]
	017 Call 0x1C17CF4
	018 Move X0, 0x679000
	019 Move X0, [X0+2712]
	020 Call 0x1C17CF4
	021 Move X0, 0x679000
	022 Move X0, [X0+2720]
	023 Call 0x1C17CF4
	024 Move X0, 0x614000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0x679000
	028 Move X0, [X0+2728]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+1413], W8
	032 Move X0, [X19+352]
	033 Compare X0, 0
	034 JumpIfEqual {78}
	035 Move X24, 0x679000
	036 Move X23, 0x614000
	037 Move X22, 0x679000
	038 Move X24, [X24+2720]
	039 Move X23, [X23+1432]
	040 Move X22, [X22+2728]
	041 Move W20, W31
	042 Move W2, [X0+24]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X2, [X24]
	045 Move W1, W20
	046 Call List`1<Object>.get_Item, X0, X1
	047 Move X8, [X23]
	048 Move X21, X0
	049 Move W9, [X8+224]
	050 Compare W9, 0
	051 JumpIfNotEqual {54}
	052 Move X0, X8
	053 Call 0x1C17DFC
	054 Move X0, X21
	055 Move X1, X31
	056 Move X2, X31
	057 Call Object.op_Inequality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {74}
	062 Move X0, [X19+352]
	063 Compare X0, 0
	064 JumpIfEqual {78}
	065 Move X2, [X24]
	066 Move W1, W20
	067 Call List`1<Object>.get_Item, X0, X1
	068 Move X8, [X19]
	069 Move X1, X0
	070 Move X0, X19
	071 Move X9, [X8+1112]
	072 Move X2, [X8+1120]
	073 NotImplemented "Instruction BLR not yet implemented."
	074 Move X0, [X19+352]
	075 Add W20, W20, 1
	076 Compare X0, 0
	077 JumpIfNotEqual {42}
	078 Call 0x1C17F20
	079 Move W8, [X0+28]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Add W8, W8, 1
	082 Move [X0+24], W31
	083 Move [X0+28], W8
	084 Move X0, [X0+16]
	085 Move W1, W31
	086 Move X3, X31
	087 Call Array.Clear, X0, X1, X2
	088 Move X0, [X23]
	089 Move X20, [X19+336]
	090 Move W8, [X0+224]
	091 Compare W8, 0
	092 JumpIfNotEqual {94}
	093 Call 0x1C17DFC
	094 Move X0, X20
	095 Move X1, X31
	096 Move X2, X31
	097 Call Object.op_Inequality, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {108}
	102 Move X8, [X19]
	103 Move X1, [X19+336]
	104 Move X0, X19
	105 Move X9, [X8+1080]
	106 Move X2, [X8+1088]
	107 NotImplemented "Instruction BLR not yet implemented."
	108 Move X0, [X19+360]
	109 Compare X0, 0
	110 JumpIfEqual {113}
	111 Move X1, [X22]
	112 Call 0x2709BB4, X0
	113 Move [X19+336], X31
	114 Move [X19+376], X31
	115 Move X20, [X31+48]
	116 Move X19, [X31+56]
	117 Move X22, [X31+32]
	118 Move X21, [X31+40]
	119 Move X24, [X31+16]
	120 Move X23, [X31+24]
	121 Move X30, [X31+64]
	122 Return 

Method: System.Void OnSelectItem(UnityEngine.UI.Toggle toggle)

Disassembly:
	0x03AE2574 ADRP X0, 0x611000
	0x03AE2578 LDR X0, [X0 + 0xAC8]
	0x03AE257C BL 0x1C16CF4
	0x03AE2580 ADRP X0, 0x613000
	0x03AE2584 LDR X0, [X0 + 0x278]
	0x03AE2588 BL 0x1C16CF4
	0x03AE258C ADRP X0, 0x676000
	0x03AE2590 LDR X0, [X0 + 0x5B0]
	0x03AE2594 BL 0x1C16CF4
	0x03AE2598 ADRP X0, 0x676000
	0x03AE259C LDR X0, [X0 + 0xBE8]
	0x03AE25A0 BL 0x1C16CF4
	0x03AE25A4 ADRP X0, 0x676000
	0x03AE25A8 LDR X0, [X0 + 0xC60]
	0x03AE25AC BL 0x1C16CF4
	0x03AE25B0 ADRP X0, 0x676000
	0x03AE25B4 LDR X0, [X0 + 0xBF0]
	0x03AE25B8 BL 0x1C16CF4
	0x03AE25BC ADRP X0, 0x676000
	0x03AE25C0 LDR X0, [X0 + 0xC68]
	0x03AE25C4 BL 0x1C16CF4
	0x03AE25C8 ADRP X0, 0x676000
	0x03AE25CC LDR X0, [X0 + 0xC70]
	0x03AE25D0 BL 0x1C16CF4
	0x03AE25D4 ADRP X0, 0x676000
	0x03AE25D8 LDR X0, [X0 + 0xC78]
	0x03AE25DC BL 0x1C16CF4
	0x03AE25E0 ADRP X0, 0x611000
	0x03AE25E4 LDR X0, [X0 + 0x848]
	0x03AE25E8 BL 0x1C16CF4
	0x03AE25EC ADRP X0, 0x61A000
	0x03AE25F0 LDR X0, [X0 + 0x790]
	0x03AE25F4 BL 0x1C16CF4
	0x03AE25F8 ADRP X0, 0x676000
	0x03AE25FC LDR X0, [X0 + 0xC80]
	0x03AE2600 BL 0x1C16CF4
	0x03AE2604 MOVZ W8, 0x1
	0x03AE2608 STRB W8, [X21 + 0x5B3]
	0x03AE260C LDR X8, [X22]
	0x03AE2610 MOVZ W1, 0x5
	0x03AE2614 STR X8, [X19 + 0x30]
	0x03AE2618 LDR X0, [X20]
	0x03AE261C BL 0x1C16D6C
	0x03AE2620 CBZ X0, 0x3AE2D90
	0x03AE2624 LDR W8, [X0 + 0x18]
	0x03AE2628 MOV X20, X0
	0x03AE262C CBZ W8, 0x3AE3008
	0x03AE2630 ADRP X8, 0x676000
	0x03AE2634 LDR X8, [X8 + 0xC68]
	0x03AE2638 MOV X0, X19
	0x03AE263C MOV X1, X31
	0x03AE2640 LDR X8, [X8]
	0x03AE2644 STR X8, [X20 + 0x20]
	0x03AE2648 BL 0x3C389D4
	0x03AE264C LDR W8, [X20 + 0x18]
	0x03AE2650 CMP W8, 0x1
	0x03AE2654 B.LS 0x3AE3008
	0x03AE2658 CMP W8, 0x2
	0x03AE265C STR X0, [X20 + 0x28]
	0x03AE2660 B.EQ 0x3AE3008
	0x03AE2664 ADRP X9, 0x676000
	0x03AE2668 LDR X9, [X9 + 0xC70]
	0x03AE266C CMP W8, 0x3
	0x03AE2670 LDR X9, [X9]
	0x03AE2674 STR X9, [X20 + 0x30]
	0x03AE2678 B.LS 0x3AE3008
	0x03AE267C LDR X9, [X19 + 0x30]
	0x03AE2680 CMP W8, 0x4
	0x03AE2684 STR X9, [X20 + 0x38]
	0x03AE2688 B.EQ 0x3AE3008
	0x03AE268C ADRP X8, 0x61A000
	0x03AE2690 LDR X8, [X8 + 0x790]
	0x03AE2694 ADRP X25, 0x611000
	0x03AE2698 MOV X0, X20
	0x03AE269C MOV X1, X31
	0x03AE26A0 LDR X8, [X8]
	0x03AE26A4 LDR X25, [X25 + 0xA28]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x901000
	009 Move W8, [X21+1414]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x612000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1414], W8
	021 Compare X20, 0
	022 JumpIfEqual {100}
	023 Move W8, [X20+288]
	024 Compare W8, 0
	025 JumpIfNotEqual {30}
	026 Move W1, 1
	027 Move X0, X20
	028 Move X2, X31
	029 Call Toggle.set_isOn, X0, X1
	030 Move X0, X20
	031 Move X1, X31
	032 Call Component.get_transform, X0
	033 Compare X0, 0
	034 JumpIfEqual {100}
	035 Move X1, X31
	036 Move X20, X0
	037 Call Transform.get_parent, X0
	038 Compare X0, 0
	039 JumpIfEqual {100}
	040 Move X1, X31
	041 Move X21, X0
	042 Call Transform.get_childCount, X0
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X24, 0x612000
	045 Move X24, [X24+1432]
	046 Move TEMP, 0
	047 Not TEMP
	048 Move W22, TEMP
	049 Add W1, W22, 1
	050 Move X0, X21
	051 Move X2, X31
	052 Call Transform.GetChild, X0, X1
	053 Move X8, [X24]
	054 Move X23, X0
	055 Move W9, [X8+224]
	056 Compare W9, 0
	057 JumpIfNotEqual {60}
	058 Move X0, X8
	059 Call 0x1C17DFC
	060 Move X0, X23
	061 Move X1, X20
	062 Move X2, X31
	063 Call Object.op_Equality, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfEqual {74}
	068 Move X0, X21
	069 Move X1, X31
	070 Call Transform.get_childCount, X0
	071 Add W8, W22, 2
	072 Add W22, W22, 1
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move TEMP, X22
	075 And TEMP, TEMP, -2147483648
	076 Compare TEMP, -2147483648
	077 JumpIfEqual {92}
	078 Move W2, 1
	079 Move X0, X19
	080 Move W1, W22
	081 Call TMP_Dropdown.SetValue, X0, X1, X2
	082 Move X0, X19
	083 Move X20, [X31+48]
	084 Move X19, [X31+56]
	085 Move X22, [X31+32]
	086 Move X21, [X31+40]
	087 Move X24, [X31+16]
	088 Move X23, [X31+24]
	089 Move X30, [X31+64]
	090 Call TMP_Dropdown.Hide, X0
	091 Return 
	092 Move X20, [X31+48]
	093 Move X19, [X31+56]
	094 Move X22, [X31+32]
	095 Move X21, [X31+40]
	096 Move X24, [X31+16]
	097 Move X23, [X31+24]
	098 Move X30, [X31+64]
	099 Return 
	100 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03AE26A8 STR X8, [X20 + 0x40]
	0x03AE26AC BL 0x32278CC
	0x03AE26B0 LDR X8, [X25]
	0x03AE26B4 MOV X20, X0
	0x03AE26B8 LDR W9, [X8 + 0xE0]
	0x03AE26BC CBNZ W9, 0x3AE26C8
	0x03AE26C0 MOV X0, X8
	0x03AE26C4 BL 0x1C16DFC
	0x03AE26C8 MOV X0, X20
	0x03AE26CC MOV X1, X19
	0x03AE26D0 MOV X2, X31
	0x03AE26D4 BL 0x3C06150
	0x03AE26D8 LDR X8, [X19 + 0xF8]
	0x03AE26DC CBZ X8, 0x3AE2D90
	0x03AE26E0 LDR X1, [X8 + 0x10]
	0x03AE26E4 ADRP X23, 0x613000
	0x03AE26E8 LDR X23, [X23 + 0x278]
	0x03AE26EC ADD X26, X19, 0x50
	0x03AE26F0 MOV X0, X26
	0x03AE26F4 MOV X2, X31
	0x03AE26F8 BL 0x3C9BF70
	0x03AE26FC LDR X8, [X23]
	0x03AE2700 MOV X0, X26
	0x03AE2704 MOV X2, X31
	0x03AE2708 LDR X8, [X8 + 0xB8]
	0x03AE270C LDR X1, [X8]
	0x03AE2710 BL 0x3C9BF80
	0x03AE2714 LDR X8, [X19 + 0xF8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x901000
	006 Move X21, 0x677000
	007 Move X20, 0x677000
	008 Move W8, [X19+1415]
	009 Move X21, [X21+2464]
	010 Move X20, [X20+2576]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x677000
	016 Move X0, [X0+2464]
	017 Call 0x1C17CF4
	018 Move X0, 0x677000
	019 Move X0, [X0+2576]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+1415], W8
	023 Move X0, [X21]
	024 Call 0x1C17F10
	025 Move X1, X31
	026 Move X19, X0
	027 Call Object..ctor, X0
	028 Move X8, [X20]
	029 Move X8, [X8+184]
	030 Move [X8], X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return 

