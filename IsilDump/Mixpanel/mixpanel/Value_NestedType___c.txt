Type: mixpanel.Value/<>c

Method: System.Void .cctor()

Disassembly:
	0x031E8208 LDR X8, [X8 + 0x618]
	0x031E820C MOVZ W1, 0x2
	0x031E8210 LDR X0, [X8]
	0x031E8214 BL 0x1C16D6C
	0x031E8218 MOV X22, X0
	0x031E821C MOV W20, W31
	0x031E8220 B 0x31E8498
	0x031E8224 CMP W20, 0xFF
	0x031E8228 B.LE 0x31E82B8
	0x031E822C CMP W20, 0x10000
	0x031E8230 B.LT 0x31E83D4
	0x031E8234 LDR X0, [X8]
	0x031E8238 MOVN W8, 0xFF000000
	0x031E823C CMP W20, W8
	0x031E8240 B.LE 0x31E842C
	0x031E8244 ADD W1, W20, 0x6
	0x031E8248 BL 0x1C16D6C
	0x031E824C MOV X22, X0
	0x031E8250 MOVZ W3, 0x6
	0x031E8254 MOV X0, X21
	0x031E8258 MOV W1, W31
	0x031E825C MOV X2, X22
	0x031E8260 MOV W4, W20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x11F5000
	005 Move X20, 0xF39000
	006 Move W8, [X19+343]
	007 Move X20, [X20+608]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF39000
	013 Move X0, [X0+608]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+343], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call Object..ctor, X0
	022 Move X8, [X20]
	023 Move X8, [X8+184]
	024 Move [X8], X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 

Method: System.Void .ctor()

Disassembly:
	0x031E8264 MOV X5, X31
	0x031E8268 BL 0x33A8A9C

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: mixpanel.Value <op_Implicit>b__114_0(System.String x)

Disassembly:
	0x031E826C CBZ X22, 0x31E83D0
	0x031E8270 LDR W8, [X22 + 0x18]

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__115_0(System.String x)

Disassembly:
	0x031E8274 CMP W8, 0x2
	0x031E8278 B.LS 0x31E84F0

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__117_0(System.Boolean x)

Disassembly:
	0x031E827C UBFM X9, X20, 0x18, 0x3F
	0x031E8280 CMP W8, 0x3

ISIL:
	001 And W0, W1, 1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__118_0(System.Boolean x)

Disassembly:
	0x031E8284 STRB W9, [X22 + 0x22]
	0x031E8288 B.EQ 0x31E84F0

ISIL:
	001 And W0, W1, 1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__120_0(System.Single x)

Disassembly:
	0x031E828C UBFM X9, X20, 0x10, 0x3F

ISIL:
	001 Call Value.op_Implicit, V0
	002 Return X0

Method: mixpanel.Value <op_Implicit>b__121_0(System.Single x)

Disassembly:
	0x031E8290 CMP W8, 0x4

ISIL:
	001 Call Value.op_Implicit, V0
	002 Return X0

Method: mixpanel.Value <op_Implicit>b__123_0(System.Double x)

Disassembly:
	0x031E8294 STRB W9, [X22 + 0x23]

ISIL:
	001 Call Value.op_Implicit, V0
	002 Return X0

Method: mixpanel.Value <op_Implicit>b__124_0(System.Double x)

Disassembly:
	0x031E8298 B.LS 0x31E84F0

ISIL:
	001 Call Value.op_Implicit, V0
	002 Return X0

Method: mixpanel.Value <op_Implicit>b__126_0(System.Decimal x)

Disassembly:
	0x031E829C UBFM X9, X20, 0x8, 0x3F
	0x031E82A0 CMP W8, 0x5
	0x031E82A4 STRB W9, [X22 + 0x24]

ISIL:
	001 Move X0, X1
	002 Move X1, X2
	003 Call Value.op_Implicit, X0
	004 Return X0

Method: mixpanel.Value <op_Implicit>b__127_0(System.Decimal x)

Disassembly:
	0x031E82A8 B.EQ 0x31E84F0
	0x031E82AC STRB W20, [X22 + 0x25]
	0x031E82B0 MOVZ W20, 0x84

ISIL:
	001 Move X0, X1
	002 Move X1, X2
	003 Call Value.op_Implicit, X0
	004 Return X0

Method: mixpanel.Value <op_Implicit>b__129_0(System.Int16 x)

Disassembly:
	0x031E82B4 B 0x31E848C
	0x031E82B8 LDR X0, [X8]

ISIL:
	001 Move W0, W1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__130_0(System.Int16 x)

Disassembly:
	0x031E82BC ADD W1, W20, 0x3
	0x031E82C0 BL 0x1C16D6C

ISIL:
	001 Move W0, W1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__132_0(System.Int32 x)

Disassembly:
	0x031E82C4 MOV X22, X0
	0x031E82C8 MOVZ W3, 0x3

ISIL:
	001 Move W0, W1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__133_0(System.Int32 x)

Disassembly:
	0x031E82CC MOV X0, X21
	0x031E82D0 MOV W1, W31

ISIL:
	001 Move W0, W1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__135_0(System.Int64 x)

Disassembly:
	0x031E82D4 MOV X2, X22
	0x031E82D8 MOV W4, W20

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__136_0(System.Int64 x)

Disassembly:
	0x031E82DC MOV X5, X31
	0x031E82E0 BL 0x33A8A9C

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__138_0(System.UInt16 x)

Disassembly:
	0x031E82E4 CBZ X22, 0x31E83D0
	0x031E82E8 LDR W8, [X22 + 0x18]

ISIL:
	001 Move W0, W1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__139_0(System.UInt16 x)

Disassembly:
	0x031E82EC CMP W8, 0x2
	0x031E82F0 B.LS 0x31E84F0

ISIL:
	001 Move W0, W1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__141_0(System.UInt32 x)

Disassembly:
	0x031E82F4 STRB W20, [X22 + 0x22]
	0x031E82F8 MOVZ W20, 0x81

ISIL:
	001 Move W0, W1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__142_0(System.UInt32 x)

Disassembly:
	0x031E82FC B 0x31E848C
	0x031E8300 LDRSW X9, [X10]

ISIL:
	001 Move W0, W1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__144_0(System.UInt64 x)

Disassembly:
	0x031E8304 ADD X8, X8, X9, 0x4, LSL
	0x031E8308 ADD X0, X8, 0x138

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__145_0(System.UInt64 x)

Disassembly:
	0x031E830C LDP X8, X1, [X0]
	0x031E8310 MOV X0, X22

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__147_0(System.SByte x)

Disassembly:
	0x031E8314 BLR X8
	0x031E8318 CBNZ X23, 0x31E84F8

ISIL:
	001 Move W0, W1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__148_0(System.SByte x)

Disassembly:
	0x031E831C CMP W24, 0x5
	0x031E8320 B.EQ 0x31E8328

ISIL:
	001 Move W0, W1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__150_0(System.Byte x)

Disassembly:
	0x031E8324 CBNZ W24, 0x31E84B8
	0x031E8328 ADRP X27, 0xF0B000

ISIL:
	001 Move W0, W1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__151_0(System.Byte x)

Disassembly:
	0x031E832C LDR X27, [X27 + 0x618]
	0x031E8330 MOV W1, W21

ISIL:
	001 Move W0, W1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__153_0(System.Uri x)

Disassembly:
	0x031E8334 LDR X0, [X27]
	0x031E8338 BL 0x1C16D6C

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__154_0(System.Uri x)

Disassembly:
	0x031E833C LDR X8, [X19 + 0x20]
	0x031E8340 CBZ X8, 0x31E83D0

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__156_0(System.Guid x)

Disassembly:
	0x031E8344 MOV X21, X0
	0x031E8348 MOV W22, W31
	0x031E834C MOV W23, W31

ISIL:
	001 Move X0, X1
	002 Move X1, X2
	003 Call Value.op_Implicit, X0
	004 Return X0

Method: mixpanel.Value <op_Implicit>b__157_0(System.Guid x)

Disassembly:
	0x031E8350 LDR X9, [X8]
	0x031E8354 MOV X0, X8
	0x031E8358 LDR X10, [X9 + 0x298]

ISIL:
	001 Move X0, X1
	002 Move X1, X2
	003 Call Value.op_Implicit, X0
	004 Return X0

Method: mixpanel.Value <op_Implicit>b__159_0(System.DateTime x)

Disassembly:
	0x031E835C LDR X1, [X9 + 0x2A0]
	0x031E8360 BLR X10

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__160_0(System.DateTime x)

Disassembly:
	0x031E8364 CMP W23, W0
	0x031E8368 B.GE 0x31E8158

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__162_0(System.DateTimeOffset x)

Disassembly:
	0x031E836C CBZ X20, 0x31E83D0
	0x031E8370 LDR X8, [X20]
	0x031E8374 MOV X0, X20

ISIL:
	001 Move X0, X1
	002 Move X1, X2
	003 Call Value.op_Implicit, X0
	004 Return X0

Method: mixpanel.Value <op_Implicit>b__163_0(System.DateTimeOffset x)

Disassembly:
	0x031E8378 MOV W1, W23
	0x031E837C LDR X9, [X8 + 0x2E8]
	0x031E8380 LDR X2, [X8 + 0x2F0]

ISIL:
	001 Move X0, X1
	002 Move X1, X2
	003 Call Value.op_Implicit, X0
	004 Return X0

Method: mixpanel.Value <op_Implicit>b__165_0(System.TimeSpan x)

Disassembly:
	0x031E8384 BLR X9
	0x031E8388 CBZ X0, 0x31E83D0

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__166_0(System.TimeSpan x)

Disassembly:
	0x031E838C LDR X26, [X27]
	0x031E8390 MOV X24, X0

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__168_0(UnityEngine.Color x)

Disassembly:
	0x031E8394 MOV X1, X26

ISIL:
	001 Call Value.op_Implicit, X0
	002 Return X0

Method: mixpanel.Value <op_Implicit>b__169_0(UnityEngine.Color x)

Disassembly:
	0x031E8398 BL 0x1C16E00

ISIL:
	001 Call Value.op_Implicit, X0
	002 Return X0

Method: mixpanel.Value <op_Implicit>b__171_0(UnityEngine.Color32 x)

Disassembly:
	0x031E839C CBZ X0, 0x31E84E4
	0x031E83A0 LDR W4, [X0 + 0x18]

ISIL:
	001 And X0, X1, 0
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__172_0(UnityEngine.Color32 x)

Disassembly:
	0x031E83A4 MOV W1, W31
	0x031E83A8 MOV X2, X21

ISIL:
	001 And X0, X1, 0
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: mixpanel.Value <op_Implicit>b__174_0(UnityEngine.Vector2 x)

Disassembly:
	0x031E83AC MOV W3, W22

ISIL:
	001 Call Value.op_Implicit, X0
	002 Return X0

Method: mixpanel.Value <op_Implicit>b__175_0(UnityEngine.Vector2 x)

Disassembly:
	0x031E83B0 MOV X5, X31

ISIL:
	001 Call Value.op_Implicit, X0
	002 Return X0

Method: mixpanel.Value <op_Implicit>b__177_0(UnityEngine.Vector3 x)

Disassembly:
	0x031E83B4 MOV X25, X0

ISIL:
	001 Call Value.op_Implicit, X0
	002 Return X0

Method: mixpanel.Value <op_Implicit>b__178_0(UnityEngine.Vector3 x)

Disassembly:
	0x031E83B8 BL 0x33A8A9C

ISIL:
	001 Call Value.op_Implicit, X0
	002 Return X0

Method: mixpanel.Value <op_Implicit>b__180_0(UnityEngine.Vector4 x)

Disassembly:
	0x031E83BC LDR W9, [X25 + 0x18]

ISIL:
	001 Call Value.op_Implicit, X0
	002 Return X0

Method: mixpanel.Value <op_Implicit>b__181_0(UnityEngine.Vector4 x)

Disassembly:
	0x031E83C0 LDR X8, [X19 + 0x20]

ISIL:
	001 Call Value.op_Implicit, X0
	002 Return X0

Method: mixpanel.Value <op_Implicit>b__183_0(UnityEngine.Quaternion x)

Disassembly:
	0x031E83C4 ADD W23, W23, 0x1

ISIL:
	001 Call Value.op_Implicit, X0
	002 Return X0

Method: mixpanel.Value <op_Implicit>b__184_0(UnityEngine.Quaternion x)

Disassembly:
	0x031E83C8 ADD W22, W22, W9

ISIL:
	001 Call Value.op_Implicit, X0
	002 Return X0

Method: mixpanel.Value <op_Implicit>b__186_0(UnityEngine.Bounds x)

Disassembly:
	0x031E83CC CBNZ X8, 0x31E8350
	0x031E83D0 BL 0x1C16F20
	0x031E83D4 LDR X0, [X8]
	0x031E83D8 ADD W1, W20, 0x4
	0x031E83DC BL 0x1C16D6C
	0x031E83E0 MOV X22, X0
	0x031E83E4 MOVZ W3, 0x4
	0x031E83E8 MOV X0, X21
	0x031E83EC MOV W1, W31
	0x031E83F0 MOV X2, X22
	0x031E83F4 MOV W4, W20

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X0, X31, 0
	006 Move [X31+16], X8
	007 Move [X31], V0
	008 Call Value.op_Implicit, X0
	009 Move X30, [X31+32]
	010 Add X31, X31, 48
	011 Return X0

Method: mixpanel.Value <op_Implicit>b__187_0(UnityEngine.Bounds x)

Disassembly:
	0x031E83F8 MOV X5, X31
	0x031E83FC BL 0x33A8A9C
	0x031E8400 CBZ X22, 0x31E83D0
	0x031E8404 LDR W8, [X22 + 0x18]
	0x031E8408 CMP W8, 0x2
	0x031E840C B.LS 0x31E84F0
	0x031E8410 UBFM X9, X20, 0x8, 0x3F
	0x031E8414 CMP W8, 0x3
	0x031E8418 STRB W9, [X22 + 0x22]
	0x031E841C B.EQ 0x31E84F0
	0x031E8420 STRB W20, [X22 + 0x23]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X0, X31, 0
	006 Move [X31+16], X8
	007 Move [X31], V0
	008 Call Value.op_Implicit, X0
	009 Move X30, [X31+32]
	010 Add X31, X31, 48
	011 Return X0

Method: mixpanel.Value <op_Implicit>b__189_0(UnityEngine.Rect x)

Disassembly:
	0x031E8424 MOVZ W20, 0x82

ISIL:
	001 Call Value.op_Implicit, X0
	002 Return X0

Method: mixpanel.Value <op_Implicit>b__190_0(UnityEngine.Rect x)

Disassembly:
	0x031E8428 B 0x31E848C

ISIL:
	001 Call Value.op_Implicit, X0
	002 Return X0

Method: System.String <op_Implicit>b__192_0(mixpanel.Value x)

Disassembly:
	0x031E842C ADD W1, W20, 0x5
	0x031E8430 BL 0x1C16D6C
	0x031E8434 MOV X22, X0
	0x031E8438 MOVZ W3, 0x5
	0x031E843C MOV X0, X21
	0x031E8440 MOV W1, W31

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {7}
	004 Move X0, [X1+24]
	005 Move X30, [X31+16]
	006 Return X0
	007 Call 0x1C17F20

Method: System.String <op_Implicit>b__193_0(mixpanel.Value x)

Disassembly:
	0x031E8444 MOV X2, X22
	0x031E8448 MOV W4, W20
	0x031E844C MOV X5, X31
	0x031E8450 BL 0x33A8A9C
	0x031E8454 CBZ X22, 0x31E83D0
	0x031E8458 LDR W8, [X22 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {7}
	004 Move X0, [X1+24]
	005 Move X30, [X31+16]
	006 Return X0
	007 Call 0x1C17F20

Method: System.Boolean <op_Implicit>b__195_0(mixpanel.Value x)

Disassembly:
	0x031E845C CMP W8, 0x2
	0x031E8460 B.LS 0x31E84F0
	0x031E8464 UBFM X9, X20, 0x10, 0x3F
	0x031E8468 CMP W8, 0x3
	0x031E846C STRB W9, [X22 + 0x22]
	0x031E8470 B.EQ 0x31E84F0

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {7}
	004 Move W0, [X1+32]
	005 Move X30, [X31+16]
	006 Return X0
	007 Call 0x1C17F20

Method: System.Boolean <op_Implicit>b__196_0(mixpanel.Value x)

Disassembly:
	0x031E8474 UBFM X9, X20, 0x8, 0x3F
	0x031E8478 CMP W8, 0x4
	0x031E847C STRB W9, [X22 + 0x23]
	0x031E8480 B.LS 0x31E84F0
	0x031E8484 STRB W20, [X22 + 0x24]
	0x031E8488 MOVZ W20, 0x83

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {7}
	004 Move W0, [X1+32]
	005 Move X30, [X31+16]
	006 Return X0
	007 Call 0x1C17F20

Method: System.Single <op_Implicit>b__198_0(mixpanel.Value x)

Disassembly:
	0x031E848C LDR X8, [X19 + 0x18]
	0x031E8490 CBNZ X8, 0x31E8498
	0x031E8494 STR X21, [X19 + 0x18]
	0x031E8498 CBZ X22, 0x31E83D0
	0x031E849C LDR W8, [X22 + 0x18]
	0x031E84A0 CBZ W8, 0x31E84F0
	0x031E84A4 LDRB W9, [X19 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {8}
	004 Move V0, [X1+40]
	005 NotImplemented "Instruction INVALID not yet implemented."
	006 Move X30, [X31+16]
	007 Return V0
	008 Call 0x1C17F20

Method: System.Single <op_Implicit>b__199_0(mixpanel.Value x)

Disassembly:
	0x031E84A8 CMP W8, 0x1
	0x031E84AC STRB W9, [X22 + 0x20]
	0x031E84B0 B.EQ 0x31E84F0
	0x031E84B4 STRB W20, [X22 + 0x21]
	0x031E84B8 MOV X0, X22
	0x031E84BC LDP X20, X19, [X31 + 0x40]
	0x031E84C0 LDP X22, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {8}
	004 Move V0, [X1+40]
	005 NotImplemented "Instruction INVALID not yet implemented."
	006 Move X30, [X31+16]
	007 Return V0
	008 Call 0x1C17F20

Method: System.Double <op_Implicit>b__201_0(mixpanel.Value x)

Disassembly:
	0x031E84C4 LDP X24, X23, [X31 + 0x20]
	0x031E84C8 LDP X26, X25, [X31 + 0x10]
	0x031E84CC LDP X30, X27, [X31], #0x50
	0x031E84D0 RET
	0x031E84D4 BL 0x1C171E0
	0x031E84D8 BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {7}
	004 Move V0, [X1+40]
	005 Move X30, [X31+16]
	006 Return V0
	007 Call 0x1C17F20

Method: System.Double <op_Implicit>b__202_0(mixpanel.Value x)

Disassembly:
	0x031E84DC BL 0x1C16F20
	0x031E84E0 BL 0x1C16F20
	0x031E84E4 MOV X0, X24
	0x031E84E8 MOV X1, X26
	0x031E84EC BL 0x1C171E0
	0x031E84F0 BL 0x1C16F28

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {7}
	004 Move V0, [X1+40]
	005 Move X30, [X31+16]
	006 Return V0
	007 Call 0x1C17F20

Method: System.Decimal <op_Implicit>b__204_0(mixpanel.Value x)

Disassembly:
	0x031E84F4 BL 0x1C16F20
	0x031E84F8 MOV X0, X23

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: System.Decimal <op_Implicit>b__205_0(mixpanel.Value x)

Disassembly:
	0x031E84FC BL 0x1C16F18
	0x031E8500 B 0x31E850C

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: System.Int16 <op_Implicit>b__207_0(mixpanel.Value x)

Disassembly:
	0x031E8504 B 0x31E8524
	0x031E8508 B 0x31E8524
	0x031E850C MOV X24, X0
	0x031E8510 MOV W21, W31
	0x031E8514 B 0x31E8528
	0x031E8518 B 0x31E8524
	0x031E851C B 0x31E8524
	0x031E8520 B 0x31E8524
	0x031E8524 MOV X24, X0
	0x031E8528 CMP W1, 0x1
	0x031E852C B.NE 0x31E8548

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {12}
	004 Move V0, [X1+40]
	005 Move X8, 0x7FF00000
	006 Move D1, X8
	007 NotImplemented "Instruction FCVTZS not yet implemented."
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 NotImplemented "Instruction CSEL not yet implemented."
	010 Move X30, [X31+16]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Int16 <op_Implicit>b__208_0(mixpanel.Value x)

Disassembly:
	0x031E8530 MOV X0, X24
	0x031E8534 BL 0x3EB1AD0
	0x031E8538 LDR X23, [X0]
	0x031E853C BL 0x3EB1AE0
	0x031E8540 MOV W24, W31
	0x031E8544 B 0x31E81A8
	0x031E8548 MOV X23, X31
	0x031E854C B 0x31E8554
	0x031E8550 MOV X24, X0
	0x031E8554 ADRP X20, 0xF0B000
	0x031E8558 LDR X20, [X20 + 0xE00]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {12}
	004 Move V0, [X1+40]
	005 Move X8, 0x7FF00000
	006 Move D1, X8
	007 NotImplemented "Instruction FCVTZS not yet implemented."
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 NotImplemented "Instruction CSEL not yet implemented."
	010 Move X30, [X31+16]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Int32 <op_Implicit>b__210_0(mixpanel.Value x)

Disassembly:
	0x031E855C LDR X1, [X20]
	0x031E8560 MOV X0, X22
	0x031E8564 BL 0x1C16E00
	0x031E8568 MOV X19, X0
	0x031E856C CBZ X0, 0x31E85C8
	0x031E8570 LDR X8, [X19]
	0x031E8574 LDR X1, [X20]
	0x031E8578 LDRH W9, [X8 + 0x12E]
	0x031E857C CBZ X9, 0x31E85A0
	0x031E8580 LDR X10, [X8 + 0xB0]
	0x031E8584 ADD X10, X10, 0x8
	0x031E8588 LDUR X11, [X10 - 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {13}
	004 Move V0, [X1+40]
	005 Move X8, 0x7FF00000
	006 Move D1, X8
	007 Move W9, 0x80000000
	008 NotImplemented "Instruction FCVTZS not yet implemented."
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 NotImplemented "Instruction CSEL not yet implemented."
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: System.Int32 <op_Implicit>b__211_0(mixpanel.Value x)

Disassembly:
	0x031E858C CMP X11, X1
	0x031E8590 B.EQ 0x31E85B0
	0x031E8594 SUBS X9, X9, 0x1
	0x031E8598 ADD X10, X10, 0x10
	0x031E859C B.NE 0x31E8588
	0x031E85A0 MOV X0, X19
	0x031E85A4 MOV W2, W31
	0x031E85A8 BL 0x1C5C788
	0x031E85AC B 0x31E85BC
	0x031E85B0 LDRSW X9, [X10]
	0x031E85B4 ADD X8, X8, X9, 0x4, LSL
	0x031E85B8 ADD X0, X8, 0x138

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {13}
	004 Move V0, [X1+40]
	005 Move X8, 0x7FF00000
	006 Move D1, X8
	007 Move W9, 0x80000000
	008 NotImplemented "Instruction FCVTZS not yet implemented."
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 NotImplemented "Instruction CSEL not yet implemented."
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: System.Int64 <op_Implicit>b__213_0(mixpanel.Value x)

Disassembly:
	0x031E85BC LDP X8, X1, [X0]
	0x031E85C0 MOV X0, X19
	0x031E85C4 BLR X8
	0x031E85C8 CBNZ X23, 0x31E85D4
	0x031E85CC MOV X0, X24
	0x031E85D0 BL 0x1D2C690
	0x031E85D4 MOV X0, X23
	0x031E85D8 BL 0x1C16F18
	0x031E85DC BL 0x1990590
	0x031E85E0 STR X30, [X31 - 0x40]!
	0x031E85E4 STP X24, X23, [X31 + 0x10]
	0x031E85E8 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {13}
	004 Move V0, [X1+40]
	005 Move X8, 0x7FF00000
	006 Move D1, X8
	007 Move X9, 0x80000000
	008 NotImplemented "Instruction FCVTZS not yet implemented."
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 NotImplemented "Instruction CSEL not yet implemented."
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: System.Int64 <op_Implicit>b__214_0(mixpanel.Value x)

Disassembly:
	0x031E85EC STP X20, X19, [X31 + 0x30]
	0x031E85F0 ADRP X24, 0x11F4000
	0x031E85F4 LDRB W8, [X24 + 0x163]
	0x031E85F8 MOV X20, X5
	0x031E85FC MOV X19, X4
	0x031E8600 MOV X23, X3
	0x031E8604 MOV X22, X2
	0x031E8608 MOV X21, X1
	0x031E860C TBNZ X8, 0x0, 0x31E8624
	0x031E8610 ADRP X0, 0xF0B000
	0x031E8614 LDR X0, [X0 + 0x618]
	0x031E8618 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {13}
	004 Move V0, [X1+40]
	005 Move X8, 0x7FF00000
	006 Move D1, X8
	007 Move X9, 0x80000000
	008 NotImplemented "Instruction FCVTZS not yet implemented."
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 NotImplemented "Instruction CSEL not yet implemented."
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: System.UInt16 <op_Implicit>b__216_0(mixpanel.Value x)

Disassembly:
	0x031E861C MOVZ W8, 0x1
	0x031E8620 STRB W8, [X24 + 0x163]

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: System.UInt16 <op_Implicit>b__217_0(mixpanel.Value x)

Disassembly:
	0x031E8624 LDRSW X8, [X22]
	0x031E8628 ADD W9, W8, 0x1

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: System.UInt32 <op_Implicit>b__219_0(mixpanel.Value x)

Disassembly:
	0x031E862C STR W9, [X22]
	0x031E8630 CBZ X21, 0x31E8700
	0x031E8634 LDR W9, [X21 + 0x18]
	0x031E8638 CMP W8, W9
	0x031E863C B.CS 0x31E86FC
	0x031E8640 ADD X8, X21, X8
	0x031E8644 LDRB W8, [X8 + 0x20]
	0x031E8648 STRB W8, [X23]
	0x031E864C LDRSW X9, [X22]
	0x031E8650 ADD W8, W9, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {11}
	004 Move V0, [X1+40]
	005 NotImplemented "Instruction FCVTZS not yet implemented."
	006 NotImplemented "Instruction FCVTZU not yet implemented."
	007 NotImplemented "Instruction FCMP not yet implemented."
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.UInt32 <op_Implicit>b__220_0(mixpanel.Value x)

Disassembly:
	0x031E8654 STR W8, [X22]
	0x031E8658 LDR W8, [X21 + 0x18]
	0x031E865C CMP W9, W8
	0x031E8660 B.CS 0x31E86FC
	0x031E8664 ADD X9, X21, X9
	0x031E8668 LDRB W1, [X9 + 0x20]
	0x031E866C STR W1, [X19]
	0x031E8670 TBZ X1, 0x7, 0x31E86BC
	0x031E8674 ANDS W9, W1, 0x7F
	0x031E8678 STR W31, [X19]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {11}
	004 Move V0, [X1+40]
	005 NotImplemented "Instruction FCVTZS not yet implemented."
	006 NotImplemented "Instruction FCVTZU not yet implemented."
	007 NotImplemented "Instruction FCMP not yet implemented."
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.UInt64 <op_Implicit>b__222_0(mixpanel.Value x)

Disassembly:
	0x031E867C B.EQ 0x31E86B8
	0x031E8680 MOV W10, W31
	0x031E8684 LDRSW X11, [X22]
	0x031E8688 ADD W12, W11, 0x1
	0x031E868C CMP W11, W8
	0x031E8690 STR W12, [X22]
	0x031E8694 B.CS 0x31E86FC
	0x031E8698 ADD X11, X21, X11
	0x031E869C LDRB W1, [X11 + 0x20]
	0x031E86A0 SUBS W9, W9, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {11}
	004 Move V0, [X1+40]
	005 NotImplemented "Instruction FCVTZS not yet implemented."
	006 NotImplemented "Instruction FCVTZU not yet implemented."
	007 NotImplemented "Instruction FCMP not yet implemented."
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.UInt64 <op_Implicit>b__223_0(mixpanel.Value x)

Disassembly:
	0x031E86A4 BFM W1, W10, 0x18, 0x17
	0x031E86A8 MOV W10, W1
	0x031E86AC STR W1, [X19]
	0x031E86B0 B.NE 0x31E8684
	0x031E86B4 B 0x31E86BC
	0x031E86B8 MOV W1, W31
	0x031E86BC ADRP X8, 0xF0B000
	0x031E86C0 LDR X8, [X8 + 0x618]
	0x031E86C4 LDR X0, [X8]
	0x031E86C8 BL 0x1C16D6C

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {11}
	004 Move V0, [X1+40]
	005 NotImplemented "Instruction FCVTZS not yet implemented."
	006 NotImplemented "Instruction FCVTZU not yet implemented."
	007 NotImplemented "Instruction FCMP not yet implemented."
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.SByte <op_Implicit>b__225_0(mixpanel.Value x)

Disassembly:
	0x031E86CC STR X0, [X20]
	0x031E86D0 MOV X2, X0
	0x031E86D4 LDR W1, [X22]
	0x031E86D8 LDR W4, [X19]
	0x031E86DC MOV X0, X21
	0x031E86E0 LDP X20, X19, [X31 + 0x30]
	0x031E86E4 LDP X22, X21, [X31 + 0x20]
	0x031E86E8 LDP X24, X23, [X31 + 0x10]
	0x031E86EC MOV W3, W31
	0x031E86F0 MOV X5, X31
	0x031E86F4 LDR X30, [X31], #0x40

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {12}
	004 Move V0, [X1+40]
	005 Move X8, 0x7FF00000
	006 Move D1, X8
	007 NotImplemented "Instruction FCVTZS not yet implemented."
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 NotImplemented "Instruction CSEL not yet implemented."
	010 Move X30, [X31+16]
	011 Return X0
	012 Call 0x1C17F20

Method: System.SByte <op_Implicit>b__226_0(mixpanel.Value x)

Disassembly:
	0x031E86F8 B 0x33A8A9C
	0x031E86FC BL 0x1C16F28
	0x031E8700 BL 0x1C16F20
	0x031E8704 STP X30, X21, [X31 - 0x20]!
	0x031E8708 STP X20, X19, [X31 + 0x10]
	0x031E870C ADRP X21, 0x11F4000
	0x031E8710 LDRB W8, [X21 + 0x164]
	0x031E8714 MOV W19, W1
	0x031E8718 MOV X20, X0
	0x031E871C TBNZ X8, 0x0, 0x31E8734
	0x031E8720 ADRP X0, 0xF38000

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {12}
	004 Move V0, [X1+40]
	005 Move X8, 0x7FF00000
	006 Move D1, X8
	007 NotImplemented "Instruction FCVTZS not yet implemented."
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 NotImplemented "Instruction CSEL not yet implemented."
	010 Move X30, [X31+16]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Byte <op_Implicit>b__228_0(mixpanel.Value x)

Disassembly:
	0x031E8724 LDR X0, [X0 + 0xB98]
	0x031E8728 BL 0x1C16CF4

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: System.Byte <op_Implicit>b__229_0(mixpanel.Value x)

Disassembly:
	0x031E872C MOVZ W8, 0x1
	0x031E8730 STRB W8, [X21 + 0x164]

ISIL:
	001 Move X0, X1
	002 Call Value.op_Implicit, X0
	003 Return X0

Method: System.Uri <op_Implicit>b__231_0(mixpanel.Value x)

Disassembly:
	0x031E8734 LDR X0, [X20 + 0x20]
	0x031E8738 CBZ X0, 0x31E87F4
	0x031E873C LDR X8, [X0]
	0x031E8740 LDR X1, [X8 + 0x2A0]
	0x031E8744 LDR X9, [X8 + 0x298]

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_Uri, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: System.Uri <op_Implicit>b__232_0(mixpanel.Value x)

Disassembly:
	0x031E8748 BLR X9
	0x031E874C CMP W0, W19
	0x031E8750 B.LE 0x31E87F0
	0x031E8754 LDR X0, [X20 + 0x20]
	0x031E8758 CBZ X0, 0x31E87AC

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_Uri, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: System.Guid <op_Implicit>b__234_0(mixpanel.Value x)

Disassembly:
	0x031E875C LDR X8, [X0]
	0x031E8760 LDR X9, [X8 + 0x2E8]
	0x031E8764 LDR X2, [X8 + 0x2F0]
	0x031E8768 MOV W1, W19
	0x031E876C BLR X9
	0x031E8770 CBZ X0, 0x31E87F4
	0x031E8774 ADRP X9, 0xF38000

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {9}
	004 Move X0, [X1+24]
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Guid.Parse, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Guid <op_Implicit>b__235_0(mixpanel.Value x)

Disassembly:
	0x031E8778 LDR X9, [X9 + 0xB98]
	0x031E877C LDR X8, [X0]
	0x031E8780 LDR X1, [X9]
	0x031E8784 LDRB W10, [X8 + 0x130]
	0x031E8788 LDRB W9, [X1 + 0x130]
	0x031E878C CMP W10, W9
	0x031E8790 B.CC 0x31E87A8

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {9}
	004 Move X0, [X1+24]
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Guid.Parse, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.DateTime <op_Implicit>b__237_0(mixpanel.Value x)

Disassembly:
	0x031E8794 LDR X8, [X8 + 0xC8]
	0x031E8798 ADD X8, X8, X9, 0x3, LSL
	0x031E879C LDUR X8, [X8 - 0x8]
	0x031E87A0 CMP X8, X1
	0x031E87A4 B.EQ 0x31E87F4

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_DateTime, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: System.DateTime <op_Implicit>b__238_0(mixpanel.Value x)

Disassembly:
	0x031E87A8 BL 0x1C171E0
	0x031E87AC BL 0x1C16F20
	0x031E87B0 B 0x31E87B8
	0x031E87B4 B 0x31E87B8
	0x031E87B8 MOV X19, X0

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_DateTime, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: System.DateTimeOffset <op_Implicit>b__240_0(mixpanel.Value x)

Disassembly:
	0x031E87BC CMP W1, 0x1
	0x031E87C0 B.NE 0x31E8828
	0x031E87C4 MOV X0, X19
	0x031E87C8 BL 0x3EB1AD0
	0x031E87CC MOV X19, X0

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_DateTimeOffset, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: System.DateTimeOffset <op_Implicit>b__241_0(mixpanel.Value x)

Disassembly:
	0x031E87D0 ADRP X0, 0xF13000
	0x031E87D4 LDR X0, [X0 + 0x760]
	0x031E87D8 BL 0x1C16D08
	0x031E87DC LDR X8, [X19]
	0x031E87E0 LDR X1, [X8]

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_DateTimeOffset, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: System.TimeSpan <op_Implicit>b__243_0(mixpanel.Value x)

Disassembly:
	0x031E87E4 BL 0x1C17270
	0x031E87E8 TBZ X0, 0x0, 0x31E8800
	0x031E87EC BL 0x3EB1AE0
	0x031E87F0 MOV X0, X31
	0x031E87F4 LDP X20, X19, [X31 + 0x10]
	0x031E87F8 LDP X30, X21, [X31], #0x20
	0x031E87FC RET
	0x031E8800 MOVZ W0, 0x8
	0x031E8804 BL 0x3EB1AF0
	0x031E8808 LDR X8, [X19]
	0x031E880C STR X8, [X0]
	0x031E8810 ADRP X1, 0xCCC000

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {13}
	004 Move V0, [X1+40]
	005 Move X8, 0x7FF00000
	006 Move D1, X8
	007 Move X9, 0x80000000
	008 NotImplemented "Instruction FCVTZS not yet implemented."
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 NotImplemented "Instruction CSEL not yet implemented."
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: System.TimeSpan <op_Implicit>b__244_0(mixpanel.Value x)

Disassembly:
	0x031E8814 ADD X1, X1, 0xE58
	0x031E8818 MOV X2, X31
	0x031E881C BL 0x3EB1B00
	0x031E8820 MOV X19, X0
	0x031E8824 BL 0x3EB1AE0
	0x031E8828 MOV X0, X19
	0x031E882C BL 0x1D2C690
	0x031E8830 BL 0x1990590
	0x031E8834 STR X30, [X31 - 0x30]!
	0x031E8838 STP X22, X21, [X31 + 0x10]
	0x031E883C STP X20, X19, [X31 + 0x20]
	0x031E8840 ADRP X22, 0x11F4000

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {13}
	004 Move V0, [X1+40]
	005 Move X8, 0x7FF00000
	006 Move D1, X8
	007 Move X9, 0x80000000
	008 NotImplemented "Instruction FCVTZS not yet implemented."
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 NotImplemented "Instruction CSEL not yet implemented."
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: UnityEngine.Color <op_Implicit>b__246_0(mixpanel.Value x)

Disassembly:
	0x031E8844 LDRB W8, [X22 + 0x165]
	0x031E8848 MOV W19, W2
	0x031E884C MOV W20, W1
	0x031E8850 MOV X21, X0
	0x031E8854 TBNZ X8, 0x0, 0x31E886C

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_Color, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: UnityEngine.Color <op_Implicit>b__247_0(mixpanel.Value x)

Disassembly:
	0x031E8858 ADRP X0, 0xF38000
	0x031E885C LDR X0, [X0 + 0xB98]
	0x031E8860 BL 0x1C16CF4
	0x031E8864 MOVZ W8, 0x1
	0x031E8868 STRB W8, [X22 + 0x165]

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_Color, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: UnityEngine.Color32 <op_Implicit>b__249_0(mixpanel.Value x)

Disassembly:
	0x031E886C LDR X0, [X21 + 0x20]
	0x031E8870 CBZ X0, 0x31E8944
	0x031E8874 LDR X8, [X0]
	0x031E8878 LDR X1, [X8 + 0x2A0]
	0x031E887C LDR X9, [X8 + 0x298]
	0x031E8880 BLR X9
	0x031E8884 CMP W0, W20
	0x031E8888 B.LE 0x31E8940

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {9}
	004 Move X0, X1
	005 Call Value.get_Color32, X0
	006 And X0, X0, 0
	007 Move X30, [X31+16]
	008 Return X0
	009 Call 0x1C17F20

Method: UnityEngine.Color32 <op_Implicit>b__250_0(mixpanel.Value x)

Disassembly:
	0x031E888C LDR X0, [X21 + 0x20]
	0x031E8890 CBZ X0, 0x31E88F4
	0x031E8894 LDR X8, [X0]
	0x031E8898 LDR X9, [X8 + 0x2E8]
	0x031E889C LDR X2, [X8 + 0x2F0]
	0x031E88A0 MOV W1, W20
	0x031E88A4 BLR X9
	0x031E88A8 CBZ X0, 0x31E88F8

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {9}
	004 Move X0, X1
	005 Call Value.get_Color32, X0
	006 And X0, X0, 0
	007 Move X30, [X31+16]
	008 Return X0
	009 Call 0x1C17F20

Method: UnityEngine.Vector2 <op_Implicit>b__252_0(mixpanel.Value x)

Disassembly:
	0x031E88AC ADRP X9, 0xF38000
	0x031E88B0 LDR X9, [X9 + 0xB98]
	0x031E88B4 LDR X8, [X0]
	0x031E88B8 LDR X1, [X9]
	0x031E88BC LDRB W10, [X8 + 0x130]

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_Vector2, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: UnityEngine.Vector2 <op_Implicit>b__253_0(mixpanel.Value x)

Disassembly:
	0x031E88C0 LDRB W9, [X1 + 0x130]
	0x031E88C4 CMP W10, W9
	0x031E88C8 B.CC 0x31E88F0
	0x031E88CC LDR X8, [X8 + 0xC8]
	0x031E88D0 ADD X8, X8, X9, 0x3, LSL

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_Vector2, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: UnityEngine.Vector3 <op_Implicit>b__255_0(mixpanel.Value x)

Disassembly:
	0x031E88D4 LDUR X8, [X8 - 0x8]
	0x031E88D8 CMP X8, X1
	0x031E88DC B.NE 0x31E88F0
	0x031E88E0 LDRB W8, [X0 + 0x10]
	0x031E88E4 CMP W8, W19, UXTB

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_Vector3, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: UnityEngine.Vector3 <op_Implicit>b__256_0(mixpanel.Value x)

Disassembly:
	0x031E88E8 CSEL X0, X0, X31, EQ
	0x031E88EC B 0x31E8944
	0x031E88F0 BL 0x1C171E0
	0x031E88F4 BL 0x1C16F20
	0x031E88F8 BL 0x1C16F20

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_Vector3, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: UnityEngine.Vector4 <op_Implicit>b__258_0(mixpanel.Value x)

Disassembly:
	0x031E88FC B 0x31E8908
	0x031E8900 B 0x31E8908
	0x031E8904 B 0x31E8908
	0x031E8908 MOV X19, X0
	0x031E890C CMP W1, 0x1

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_Vector4, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: UnityEngine.Vector4 <op_Implicit>b__259_0(mixpanel.Value x)

Disassembly:
	0x031E8910 B.NE 0x31E897C
	0x031E8914 MOV X0, X19
	0x031E8918 BL 0x3EB1AD0
	0x031E891C MOV X19, X0
	0x031E8920 ADRP X0, 0xF13000

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_Vector4, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: UnityEngine.Quaternion <op_Implicit>b__261_0(mixpanel.Value x)

Disassembly:
	0x031E8924 LDR X0, [X0 + 0x760]
	0x031E8928 BL 0x1C16D08
	0x031E892C LDR X8, [X19]
	0x031E8930 LDR X1, [X8]
	0x031E8934 BL 0x1C17270

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_Quaternion, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: UnityEngine.Quaternion <op_Implicit>b__262_0(mixpanel.Value x)

Disassembly:
	0x031E8938 TBZ X0, 0x0, 0x31E8954
	0x031E893C BL 0x3EB1AE0
	0x031E8940 MOV X0, X31
	0x031E8944 LDP X20, X19, [X31 + 0x20]
	0x031E8948 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_Quaternion, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: UnityEngine.Bounds <op_Implicit>b__264_0(mixpanel.Value x)

Disassembly:
	0x031E894C LDR X30, [X31], #0x30
	0x031E8950 RET
	0x031E8954 MOVZ W0, 0x8
	0x031E8958 BL 0x3EB1AF0
	0x031E895C LDR X8, [X19]
	0x031E8960 STR X8, [X0]
	0x031E8964 ADRP X1, 0xCCC000
	0x031E8968 ADD X1, X1, 0xE58
	0x031E896C MOV X2, X31
	0x031E8970 BL 0x3EB1B00
	0x031E8974 MOV X19, X0
	0x031E8978 BL 0x3EB1AE0
	0x031E897C MOV X0, X19

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move X0, X1
	005 Move X19, X8
	006 Add X8, X31, 8
	007 Call Value.op_Implicit, X0
	008 Move X8, [X31+24]
	009 NotImplemented "Instruction LDUR not yet implemented."
	010 Move [X19+16], X8
	011 Move [X19], V0
	012 Move X30, [X31+32]
	013 Move X19, [X31+40]
	014 Add X31, X31, 48
	015 Return X0

Method: UnityEngine.Bounds <op_Implicit>b__265_0(mixpanel.Value x)

Disassembly:
	0x031E8980 BL 0x1D2C690
	0x031E8984 BL 0x1990590
	0x031E8988 STR X30, [X31 - 0x50]!
	0x031E898C STP X26, X25, [X31 + 0x10]
	0x031E8990 STP X24, X23, [X31 + 0x20]
	0x031E8994 STP X22, X21, [X31 + 0x30]
	0x031E8998 STP X20, X19, [X31 + 0x40]
	0x031E899C ADRP X20, 0x11F4000
	0x031E89A0 ADRP X21, 0xF0B000
	0x031E89A4 ADRP X23, 0xF38000
	0x031E89A8 LDRB W8, [X20 + 0x166]
	0x031E89AC LDR X21, [X21 + 0x8F0]
	0x031E89B0 LDR X23, [X23 + 0xBA8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move X0, X1
	005 Move X19, X8
	006 Add X8, X31, 8
	007 Call Value.op_Implicit, X0
	008 Move X8, [X31+24]
	009 NotImplemented "Instruction LDUR not yet implemented."
	010 Move [X19+16], X8
	011 Move [X19], V0
	012 Move X30, [X31+32]
	013 Move X19, [X31+40]
	014 Add X31, X31, 48
	015 Return X0

Method: UnityEngine.Rect <op_Implicit>b__267_0(mixpanel.Value x)

Disassembly:
	0x031E89B4 MOV X19, X0
	0x031E89B8 TBNZ X8, 0x0, 0x31E8A24
	0x031E89BC ADRP X0, 0xF0B000
	0x031E89C0 LDR X0, [X0 + 0x9C8]
	0x031E89C4 BL 0x1C16CF4

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_Rect, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

Method: UnityEngine.Rect <op_Implicit>b__268_0(mixpanel.Value x)

Disassembly:
	0x031E89C8 ADRP X0, 0xF0B000
	0x031E89CC LDR X0, [X0 + 0x758]
	0x031E89D0 BL 0x1C16CF4
	0x031E89D4 ADRP X0, 0xF0B000
	0x031E89D8 LDR X0, [X0 + 0x8F0]

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {6}
	003 Move X0, X1
	004 Call Value.get_Rect, X0
	005 Return X0
	006 Move [X31-16], X30
	007 Call 0x1C17F20

