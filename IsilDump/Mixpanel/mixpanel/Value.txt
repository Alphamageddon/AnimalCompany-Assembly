Type: mixpanel.Value

Method: System.Boolean get_IsNull()

Disassembly:
	0x031D4730 BL 0x1C16F10
	0x031D4734 MOV X19, X0
	0x031D4738 ADRP X0, 0xF4C000
	0x031D473C LDR X0, [X0 + 0x78]

ISIL:
	001 Move W8, [X0+16]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_IsArray()

Disassembly:
	0x031DA004 LDR X8, [X0 + 0xB8]
	0x031DA008 LDR X20, [X8]
	0x031DA00C CBZ X20, 0x31DA134
	0x031DA010 ADRP X10, 0xF45000

ISIL:
	001 Move W8, [X0+16]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_IsObject()

Disassembly:
	0x031DB260 ADRP X0, 0xF45000
	0x031DB264 LDR X0, [X0 + 0x3B8]
	0x031DB268 BL 0x1C16CF4
	0x031DB26C ADRP X0, 0xF45000

ISIL:
	001 Move W8, [X0+16]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Void OnRecycle()

Disassembly:
	0x031DB138 LDR V0, [X8 + 0x910]
	0x031DB13C STR D0, [X19 + 0x10]
	0x031DB140 LDR X0, [X20]
	0x031DB144 ADRP X20, 0xF1A000
	0x031DB148 LDR W8, [X0 + 0xE0]
	0x031DB14C LDR X20, [X20 + 0xA58]
	0x031DB150 CBNZ W8, 0x31DB158
	0x031DB154 BL 0x1C16DFC
	0x031DB158 MOV X0, X31
	0x031DB15C BL 0x3338524
	0x031DB160 LDR X8, [X20]
	0x031DB164 MOV X20, X0
	0x031DB168 LDR W9, [X8 + 0xE0]
	0x031DB16C CBNZ W9, 0x31DB178
	0x031DB170 MOV X0, X8
	0x031DB174 BL 0x1C16DFC
	0x031DB178 ADD X0, X31, 0x0
	0x031DB17C MOV X1, X20
	0x031DB180 MOV X2, X31
	0x031DB184 BL 0x336539C
	0x031DB188 STR X0, [X19 + 0x18]
	0x031DB18C LDP X20, X19, [X31 + 0x20]
	0x031DB190 LDP X30, X21, [X31 + 0x10]
	0x031DB194 ADD X31, X31, 0x30
	0x031DB198 RET
	0x031DB19C LDR V0, [X0 + 0x28]
	0x031DB1A0 MOVZ X8, 0x7FF00000
	0x031DB1A4 FMOV D1, X8
	0x031DB1A8 MOVZ X9, 0x80000000
	0x031DB1AC FCVTZS X8, D0
	0x031DB1B0 FCMP D0, D1
	0x031DB1B4 CSEL X0, X9, X8, EQ
	0x031DB1B8 RET
	0x031DB1BC STR X30, [X31 - 0x30]!
	0x031DB1C0 STP X22, X21, [X31 + 0x10]
	0x031DB1C4 STP X20, X19, [X31 + 0x20]
	0x031DB1C8 ADRP X22, 0x1201000
	0x031DB1CC ADRP X21, 0xF1A000
	0x031DB1D0 LDRB W8, [X22 + 0x9C]
	0x031DB1D4 LDR X21, [X21 + 0x570]
	0x031DB1D8 MOV X20, X1
	0x031DB1DC MOV X19, X0
	0x031DB1E0 TBNZ X8, 0x0, 0x31DB1F8
	0x031DB1E4 ADRP X0, 0xF1A000
	0x031DB1E8 LDR X0, [X0 + 0x570]
	0x031DB1EC BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1202000
	006 Move X21, 0xF19000
	007 Move W8, [X20+134]
	008 Move X21, [X21+2440]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xF46000
	015 Move X0, [X0+752]
	016 Call 0x1C17CF4
	017 Move X0, 0xF46000
	018 Move X0, [X0+760]
	019 Call 0x1C17CF4
	020 Move X0, 0xF19000
	021 Move X0, [X0+2440]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+134], W8
	025 Move X9, [X21]
	026 Move X8, [X19+48]
	027 Move [X19+32], W31
	028 Move [X19+40], X31
	029 Move [X19+24], X9
	030 Compare X8, 0
	031 JumpIfEqual {57}
	032 Move W2, [X8+24]
	033 Move W9, [X8+28]
	034 Add W9, W9, 1
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move [X8+24], W31
	037 Move [X8+28], W9
	038 Move X0, [X8+16]
	039 Move W1, W31
	040 Move X3, X31
	041 Call Array.Clear, X0, X1, X2
	042 Move X0, [X19+64]
	043 Move [X19+56], X31
	044 Compare X0, 0
	045 JumpIfEqual {57}
	046 Move X8, 0xF46000
	047 Move X8, [X8+752]
	048 Move X1, [X8]
	049 Call Dictionary`2<Object, Object>.Clear, X0
	050 Move [X19+72], X31
	051 Move [X19+80], X31
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return 
	057 Call 0x1C17F20

Method: mixpanel.Value get_Item(System.Int32 index)

Disassembly:
	0x031DB270 LDR X0, [X0 + 0x3C0]
	0x031DB274 BL 0x1C16CF4
	0x031DB278 ADRP X0, 0xF45000
	0x031DB27C LDR X0, [X0 + 0x3A8]
	0x031DB280 BL 0x1C16CF4
	0x031DB284 MOVZ W8, 0x1
	0x031DB288 STRB W8, [X20 + 0x9D]
	0x031DB28C LDR X1, [X21]
	0x031DB290 MOV X0, X19
	0x031DB294 BL 0x31D3650
	0x031DB298 CBZ X0, 0x31DB318
	0x031DB29C ADRP X8, 0xF45000
	0x031DB2A0 LDR X8, [X8 + 0x3B8]
	0x031DB2A4 LDR V8, [X0 + 0x28]
	0x031DB2A8 MOV X0, X19
	0x031DB2AC LDR X1, [X8]
	0x031DB2B0 BL 0x31D3650
	0x031DB2B4 CBZ X0, 0x31DB318
	0x031DB2B8 ADRP X8, 0xF45000
	0x031DB2BC LDR X8, [X8 + 0x3C0]
	0x031DB2C0 LDR V9, [X0 + 0x28]
	0x031DB2C4 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1202000
	006 Move W8, [X21+135]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF46000
	014 Move X0, [X0+776]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+135], W8
	018 Move X0, [X20+48]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0xF46000
	022 Move X8, [X8+776]
	023 Move W1, W19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call List`1<Object>.get_Item, X0, X1
	030 Return X0
	031 Call 0x1C17F20

Method: System.Void set_Item(System.Int32 index, mixpanel.Value value)

Disassembly:
	0x031DB2C8 LDR X1, [X8]
	0x031DB2CC BL 0x31D3650
	0x031DB2D0 CBZ X0, 0x31DB318
	0x031DB2D4 ADRP X8, 0xF45000
	0x031DB2D8 LDR X8, [X8 + 0x3B0]
	0x031DB2DC LDR V10, [X0 + 0x28]
	0x031DB2E0 MOV X0, X19
	0x031DB2E4 LDR X1, [X8]
	0x031DB2E8 BL 0x31D3650
	0x031DB2EC CBZ X0, 0x31DB318
	0x031DB2F0 LDR V3, [X0 + 0x28]
	0x00000000 INVALID
	0x00000000 INVALID
	0x031DB2FC LDP X20, X19, [X31 + 0x30]
	0x031DB300 LDP X30, X21, [X31 + 0x20]
	0x031DB304 LDP D9, D8, [X31 + 0x10]
	0x00000000 INVALID
	0x00000000 INVALID
	0x031DB310 LDR V10, [X31], #0x40
	0x031DB314 RET
	0x031DB318 BL 0x1C16F20
	0x031DB31C STR X30, [X31 - 0x10]!
	0x031DB320 CBZ X0, 0x31DB334
	0x031DB324 LDR V0, [X0 + 0x28]
	0x00000000 INVALID
	0x031DB32C LDR X30, [X31], #0x10
	0x031DB330 RET
	0x031DB334 BL 0x1C16F20
	0x031DB338 STP D11, D10, [X31 - 0x60]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1202000
	007 Move W8, [X22+136]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF46000
	016 Move X0, [X0+784]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+136], W8
	020 Move X8, -40812544
	021 Move V0, [X8+8]
	022 Move X0, [X21+48]
	023 Move [X21+16], D0
	024 Compare X0, 0
	025 JumpIfEqual {38}
	026 Move X8, 0xF46000
	027 Move X8, [X8+784]
	028 Move W1, W20
	029 Move X2, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X3, [X8]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Call List`1<Object>.set_Item, X0, X1, X2
	037 Return 
	038 Call 0x1C17F20

Method: mixpanel.Value get_Item(System.String key)

Disassembly:
	0x031D4650 LDR X2, [X8]
	0x031D4654 BL 0x301C194
	0x031D4658 B 0x31D4700
	0x031D465C LDR X0, [X19 + 0x40]
	0x031D4660 CBZ X0, 0x31D4720
	0x031D4664 ADRP X8, 0xF4C000
	0x031D4668 LDR X8, [X8 + 0x48]
	0x031D466C LDR X1, [X8]
	0x031D4670 BL 0x2AA4E98
	0x031D4674 CBZ X0, 0x31D4720
	0x031D4678 ADRP X8, 0xF4C000
	0x031D467C LDR X8, [X8 + 0x68]
	0x031D4680 LDR X1, [X8]
	0x031D4684 ADD X8, X31, 0x8
	0x031D4688 BL 0x2EC7020
	0x031D468C ADRP X23, 0xF4C000
	0x031D4690 ADRP X24, 0xF4B000
	0x031D4694 ADRP X25, 0xF4B000
	0x031D4698 LDR X23, [X23 + 0x58]
	0x031D469C LDR X24, [X24 + 0xF80]
	0x031D46A0 LDR X25, [X25 + 0xF88]
	0x031D46A4 LDR X1, [X23]
	0x031D46A8 ADD X0, X31, 0x8
	0x031D46AC BL 0x2C0B090
	0x031D46B0 TBZ X0, 0x0, 0x31D46EC
	0x031D46B4 LDR X0, [X19 + 0x40]
	0x031D46B8 CBZ X0, 0x31D4718
	0x031D46BC LDR X21, [X20 + 0x40]
	0x031D46C0 LDR X22, [X31 + 0x18]
	0x031D46C4 LDR X2, [X24]
	0x031D46C8 MOV X1, X22
	0x031D46CC BL 0x2AA5018
	0x031D46D0 CBZ X21, 0x31D471C
	0x031D46D4 LDR X3, [X25]
	0x031D46D8 MOV X2, X0
	0x031D46DC MOV X0, X21
	0x031D46E0 MOV X1, X22
	0x031D46E4 BL 0x2AA5084
	0x031D46E8 B 0x31D46A4
	0x031D46EC ADRP X8, 0xF4C000
	0x031D46F0 LDR X8, [X8 + 0x50]
	0x031D46F4 ADD X0, X31, 0x8
	0x031D46F8 LDR X1, [X8]
	0x031D46FC BL 0x2C0B08C
	0x031D4700 LDP X20, X19, [X31 + 0x50]
	0x031D4704 LDP X22, X21, [X31 + 0x40]
	0x031D4708 LDP X24, X23, [X31 + 0x30]
	0x031D470C LDP X30, X25, [X31 + 0x20]
	0x031D4710 ADD X31, X31, 0x60
	0x031D4714 RET
	0x031D4718 BL 0x1C16F20
	0x031D471C BL 0x1C16F20
	0x031D4720 BL 0x1C16F20
	0x031D4724 ADRP X0, 0xF27000
	0x031D4728 LDR X0, [X0 + 0x578]
	0x031D472C BL 0x1C16D08

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1209000
	007 Move W8, [X21+137]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0xF4C000
	015 Move X0, [X0+3960]
	016 Call 0x1C17CF4
	017 Move X0, 0xF4C000
	018 Move X0, [X0+3968]
	019 Call 0x1C17CF4
	020 Move X0, 0xF4C000
	021 Move X0, [X0+3976]
	022 Call 0x1C17CF4
	023 Move X0, 0xF25000
	024 Move X0, [X0+1864]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+137], W8
	028 Move X0, [X20+64]
	029 Compare X0, 0
	030 JumpIfEqual {70}
	031 Move X8, 0xF4C000
	032 Move X8, [X8+3960]
	033 Move X1, X19
	034 Move X2, [X8]
	035 Call Dictionary`2<Object, Object>.ContainsKey, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {56}
	040 Move X8, 0xF25000
	041 Move X21, [X20+64]
	042 Move X8, [X8+1864]
	043 Move X0, [X8]
	044 Call 0x1C17F10
	045 Move X22, X0
	046 Call Value..ctor, X0
	047 Compare X21, 0
	048 JumpIfEqual {70}
	049 Move X8, 0xF4C000
	050 Move X8, [X8+3976]
	051 Move X0, X21
	052 Move X1, X19
	053 Move X2, X22
	054 Move X3, [X8]
	055 Call Dictionary`2<Object, Object>.set_Item, X0, X1, X2
	056 Move X0, [X20+64]
	057 Compare X0, 0
	058 JumpIfEqual {70}
	059 Move X8, 0xF4C000
	060 Move X8, [X8+3968]
	061 Move X1, X19
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X2, [X8]
	067 Move X30, [X31+48]
	068 Call Dictionary`2<Object, Object>.get_Item, X0, X1
	069 Return X0
	070 Call 0x1C17F20

Method: System.Void set_Item(System.String key, mixpanel.Value value)

Disassembly:
	0x031D4E30 TBNZ X19, 0x0, 0x31D4DD4
	0x031D4E34 MOV X0, X20
	0x031D4E38 BL 0x31D7B54
	0x031D4E3C B 0x31D4E74
	0x031D4E40 LDR W9, [X10]
	0x031D4E44 ADD W9, W9, 0x3
	0x031D4E48 ADD X8, X8, W9, 0x4, SXTW
	0x031D4E4C ADD X0, X8, 0x138
	0x031D4E50 LDP X8, X2, [X0]
	0x031D4E54 MOV X0, X19
	0x031D4E58 MOV X1, X20
	0x031D4E5C BLR X8
	0x031D4E60 LDR X8, [X21]
	0x031D4E64 MOV X2, X31
	0x031D4E68 LDR X8, [X8 + 0xB8]
	0x031D4E6C LDR X1, [X8 + 0x28]
	0x031D4E70 BL 0x3C86F84
	0x031D4E74 LDR X0, [X21]
	0x031D4E78 LDR W8, [X0 + 0xE0]
	0x031D4E7C CBNZ W8, 0x31D4E88
	0x031D4E80 BL 0x1C16DFC
	0x031D4E84 LDR X0, [X21]
	0x031D4E88 LDR X8, [X0 + 0xB8]
	0x031D4E8C LDR X0, [X8 + 0x28]
	0x031D4E90 LDP X20, X19, [X31 + 0x20]
	0x031D4E94 LDP X22, X21, [X31 + 0x10]
	0x031D4E98 LDP X30, X23, [X31], #0x30
	0x031D4E9C RET
	0x031D4EA0 BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1209000
	007 Move W8, [X22+138]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF4C000
	016 Move X0, [X0+3976]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+138], W8
	020 Move X8, -40783872
	021 Move V0, [X8+896]
	022 Move X0, [X21+64]
	023 Move [X21+16], D0
	024 Compare X0, 0
	025 JumpIfEqual {38}
	026 Move X8, 0xF4C000
	027 Move X8, [X8+3976]
	028 Move X1, X20
	029 Move X2, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X3, [X8]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Call Dictionary`2<Object, Object>.set_Item, X0, X1, X2
	037 Return 
	038 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x031DB33C STP D9, D8, [X31 + 0x10]
	0x031DB340 STR X30, [X31 + 0x20]
	0x031DB344 STP X24, X23, [X31 + 0x30]
	0x031DB348 STP X22, X21, [X31 + 0x40]
	0x031DB34C STP X20, X19, [X31 + 0x50]
	0x031DB350 ADRP X22, 0x1201000
	0x031DB354 ADRP X21, 0xF44000
	0x031DB358 ADRP X20, 0xF45000
	0x031DB35C LDRB W8, [X22 + 0x9E]
	0x031DB360 LDR X21, [X21 + 0xFD8]
	0x031DB364 LDR X20, [X20 + 0x3C8]
	0x031DB368 MOV V8.16B, V3.16B
	0x031DB36C MOV V9.16B, V2.16B
	0x031DB370 MOV V10.16B, V1.16B
	0x031DB374 MOV V11.16B, V0.16B
	0x031DB378 MOV X19, X0
	0x031DB37C TBNZ X8, 0x0, 0x31DB3DC
	0x031DB380 ADRP X0, 0xF44000
	0x031DB384 LDR X0, [X0 + 0xFE8]
	0x031DB388 BL 0x1C16CF4
	0x031DB38C ADRP X0, 0xF45000
	0x031DB390 LDR X0, [X0 + 0x3C8]
	0x031DB394 BL 0x1C16CF4
	0x031DB398 ADRP X0, 0xF44000
	0x031DB39C LDR X0, [X0 + 0xFD8]
	0x031DB3A0 BL 0x1C16CF4
	0x031DB3A4 ADRP X0, 0xF45000
	0x031DB3A8 LDR X0, [X0 + 0x3B0]
	0x031DB3AC BL 0x1C16CF4
	0x031DB3B0 ADRP X0, 0xF45000
	0x031DB3B4 LDR X0, [X0 + 0x3B8]
	0x031DB3B8 BL 0x1C16CF4
	0x031DB3BC ADRP X0, 0xF45000
	0x031DB3C0 LDR X0, [X0 + 0x3C0]
	0x031DB3C4 BL 0x1C16CF4
	0x031DB3C8 ADRP X0, 0xF45000
	0x031DB3CC LDR X0, [X0 + 0x3A8]
	0x031DB3D0 BL 0x1C16CF4
	0x031DB3D4 MOVZ W8, 0x1
	0x031DB3D8 STRB W8, [X22 + 0x9E]
	0x031DB3DC ADRP X8, 0xFFFFFFFFFD912000
	0x031DB3E0 LDR V0, [X8 + 0x6F8]
	0x031DB3E4 STR D0, [X19 + 0x10]
	0x031DB3E8 LDR X0, [X21]
	0x031DB3EC BL 0x1C16F10
	0x031DB3F0 LDR X1, [X20]
	0x031DB3F4 MOV X20, X0
	0x031DB3F8 BL 0x2AA4804
	0x031DB3FC MOV V0.16B, V11.16B
	0x031DB400 BL 0x31D4014
	0x031DB404 CBZ X20, 0x31DB4B8
	0x031DB408 ADRP X8, 0xF45000
	0x031DB40C ADRP X21, 0xF44000
	0x031DB410 LDR X8, [X8 + 0x3A8]
	0x031DB414 LDR X21, [X21 + 0xFE8]
	0x031DB418 ADRP X22, 0xF45000
	0x031DB41C ADRP X23, 0xF45000
	0x031DB420 LDR X1, [X8]
	0x031DB424 LDR X3, [X21]
	0x031DB428 ADRP X24, 0xF45000
	0x031DB42C LDR X22, [X22 + 0x3B8]
	0x031DB430 LDR X23, [X23 + 0x3C0]
	0x031DB434 LDR X24, [X24 + 0x3B0]
	0x031DB438 MOV X2, X0
	0x031DB43C MOV X0, X20
	0x031DB440 BL 0x2AA5098
	0x031DB444 MOV V0.16B, V10.16B
	0x031DB448 BL 0x31D4014
	0x031DB44C LDR X1, [X22]
	0x031DB450 LDR X3, [X21]
	0x031DB454 MOV X2, X0
	0x031DB458 MOV X0, X20
	0x031DB45C BL 0x2AA5098
	0x031DB460 MOV V0.16B, V9.16B
	0x031DB464 BL 0x31D4014
	0x031DB468 LDR X1, [X23]
	0x031DB46C LDR X3, [X21]
	0x031DB470 MOV X2, X0
	0x031DB474 MOV X0, X20
	0x031DB478 BL 0x2AA5098
	0x031DB47C MOV V0.16B, V8.16B
	0x031DB480 BL 0x31D4014
	0x031DB484 LDR X1, [X24]
	0x031DB488 LDR X3, [X21]
	0x031DB48C MOV X2, X0
	0x031DB490 MOV X0, X20
	0x031DB494 BL 0x2AA5098
	0x031DB498 STR X20, [X19 + 0x40]
	0x031DB49C LDP X20, X19, [X31 + 0x50]
	0x031DB4A0 LDP X22, X21, [X31 + 0x40]
	0x031DB4A4 LDP X24, X23, [X31 + 0x30]
	0x031DB4A8 LDR X30, [X31 + 0x20]
	0x031DB4AC LDP D9, D8, [X31 + 0x10]
	0x031DB4B0 LDP D11, D10, [X31], #0x60
	0x031DB4B4 RET
	0x031DB4B8 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1202000
	005 Move W8, [X20+139]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {25}
	011 Move X0, 0xF19000
	012 Move X0, [X0+2904]
	013 Call 0x1C17CF4
	014 Move X0, 0xF1B000
	015 Move X0, [X0+3144]
	016 Call 0x1C17CF4
	017 Move X0, 0xF40000
	018 Move X0, [X0+608]
	019 Call 0x1C17CF4
	020 Move X0, 0xF19000
	021 Move X0, [X0+2096]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+139], W8
	025 Move W8, [X19+16]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X9, -40124416
	028 Add X9, X9, 978
	029 NotImplemented "Instruction ADR not yet implemented."
	030 Move W11, [X9]
	031 Add X10, X10, X11
	032 CallNoReturn X10
	033 Move X8, 0xF19000
	034 Move X8, [X8+2096]
	035 Move X0, [X8]
	036 Move X8, 0xF40000
	037 Move X8, [X8+608]
	038 Move X0, [X8]
	039 Call 0x1C17F10
	040 Move X1, X31
	041 Move X20, X0
	042 Call StringWriter..ctor, X0
	043 Move X0, X19
	044 Move X1, X20
	045 Move W2, W31
	046 Call Value.Write, X0, X1, X2
	047 Compare X20, 0
	048 JumpIfEqual {95}
	049 Move X8, [X20]
	050 Move X0, X20
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X2, [X8+360]
	054 Move X1, [X8+368]
	055 Move X30, [X31+32]
	056 CallNoReturn X2
	057 Move X0, [X19+24]
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Return X0
	062 Move X8, 0xF19000
	063 Move X8, [X8+2904]
	064 Add X19, X19, 32
	065 Move X0, [X8]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X0, X19
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 Move X1, X31
	074 Move X30, [X31+32]
	075 Call Boolean.ToString, X0
	076 Return X0
	077 Move X8, 0xF1B000
	078 Move X8, [X8+3144]
	079 Add X19, X19, 40
	080 Move X0, [X8]
	081 Move W8, [X0+224]
	082 Compare W8, 0
	083 JumpIfNotEqual {85}
	084 Call 0x1C17DFC
	085 Move X0, X31
	086 Call CultureInfo.get_InvariantCulture
	087 Move X1, X0
	088 Move X0, X19
	089 Move X20, [X31+16]
	090 Move X19, [X31+24]
	091 Move X2, X31
	092 Move X30, [X31+32]
	093 Call Double.ToString, X0, X1
	094 Return X0
	095 Call 0x1C17F20
	096 Move X0, 0xF21000
	097 Move X0, [X0+1888]
	098 Call 0x1C17D08
	099 Call 0x1C17F10
	100 Move X1, X31
	101 Move X19, X0
	102 Call ArgumentOutOfRangeException..ctor, X0
	103 Move X0, 0xF46000
	104 Move X0, [X0+792]
	105 Call 0x1C17D08
	106 Move X1, X0
	107 Move X0, X19
	108 Call 0x1C17DEC

Method: System.Collections.IEnumerator GetEnumerator()

Disassembly:
	0x031D4A28 LDR X8, [X8 + 0xB8]
	0x031D4A2C LDR X1, [X8 + 0x18]
	0x031D4A30 BL 0x3C86F84
	0x031D4A34 LDR X0, [X21]
	0x031D4A38 LDR W8, [X0 + 0xE0]
	0x031D4A3C CBNZ W8, 0x31D4A48
	0x031D4A40 BL 0x1C16DFC
	0x031D4A44 LDR X0, [X21]
	0x031D4A48 LDR X8, [X0 + 0xB8]
	0x031D4A4C LDR X0, [X8 + 0x18]
	0x031D4A50 LDP X20, X19, [X31 + 0x20]
	0x031D4A54 LDP X22, X21, [X31 + 0x10]
	0x031D4A58 LDP X30, X23, [X31], #0x30
	0x031D4A5C RET
	0x031D4A60 BL 0x1C16F20
	0x031D4A64 STP X30, X23, [X31 - 0x30]!
	0x031D4A68 STP X22, X21, [X31 + 0x10]
	0x031D4A6C STP X20, X19, [X31 + 0x20]
	0x031D4A70 ADRP X19, 0x1208000
	0x031D4A74 ADRP X21, 0xF4B000
	0x031D4A78 LDRB W8, [X19 + 0x7F]
	0x031D4A7C LDR X21, [X21 + 0xEE0]
	0x031D4A80 TBNZ X8, 0x0, 0x31D4ABC
	0x031D4A84 ADRP X0, 0xF4B000
	0x031D4A88 LDR X0, [X0 + 0xF60]
	0x031D4A8C BL 0x1C16CF4
	0x031D4A90 ADRP X0, 0xF4B000
	0x031D4A94 LDR X0, [X0 + 0xEE0]
	0x031D4A98 BL 0x1C16CF4
	0x031D4A9C ADRP X0, 0xF24000
	0x031D4AA0 LDR X0, [X0 + 0x748]
	0x031D4AA4 BL 0x1C16CF4
	0x031D4AA8 ADRP X0, 0xF4C000
	0x031D4AAC LDR X0, [X0 + 0x90]
	0x031D4AB0 BL 0x1C16CF4
	0x031D4AB4 MOVZ W8, 0x1
	0x031D4AB8 STRB W8, [X19 + 0x7F]
	0x031D4ABC LDR X0, [X21]
	0x031D4AC0 LDR W8, [X0 + 0xE0]
	0x031D4AC4 CBZ W8, 0x31D4AD8
	0x031D4AC8 LDR X8, [X0 + 0xB8]
	0x031D4ACC LDR X9, [X8 + 0x20]
	0x031D4AD0 CBNZ X9, 0x31D4C6C
	0x031D4AD4 B 0x31D4B08
	0x031D4AD8 BL 0x1C16DFC
	0x031D4ADC LDR X0, [X21]
	0x031D4AE0 LDR X8, [X0 + 0xB8]
	0x031D4AE4 LDR W9, [X0 + 0xE0]
	0x031D4AE8 LDR X19, [X8 + 0x20]
	0x031D4AEC CBZ W9, 0x31D4AF8
	0x031D4AF0 CBNZ X19, 0x31D4C6C
	0x031D4AF4 B 0x31D4B08
	0x031D4AF8 BL 0x1C16DFC
	0x031D4AFC LDR X8, [X21]
	0x031D4B00 LDR X8, [X8 + 0xB8]
	0x031D4B04 CBNZ X19, 0x31D4C6C
	0x031D4B08 LDR X19, [X8]
	0x031D4B0C CBZ X19, 0x31D4C80
	0x031D4B10 ADRP X22, 0xF4B000
	0x031D4B14 LDR X8, [X19]
	0x031D4B18 LDR X22, [X22 + 0xF60]
	0x031D4B1C ADRP X23, 0xF4C000
	0x031D4B20 LDR X1, [X22]
	0x031D4B24 LDR X23, [X23 + 0x90]
	0x031D4B28 LDRH W9, [X8 + 0x12E]
	0x031D4B2C LDR X20, [X23]
	0x031D4B30 CBZ X9, 0x31D4B54
	0x031D4B34 LDR X10, [X8 + 0xB0]
	0x031D4B38 ADD X10, X10, 0x8
	0x031D4B3C LDUR X11, [X10 - 0x8]
	0x031D4B40 CMP X11, X1
	0x031D4B44 B.EQ 0x31D4B64
	0x031D4B48 SUBS X9, X9, 0x1
	0x031D4B4C ADD X10, X10, 0x10
	0x031D4B50 B.NE 0x31D4B3C

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+80], X30
	003 Move [X31+96], X20
	004 Move [X31+104], X19
	005 Move X20, 0x1209000
	006 Move W8, [X20+140]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {26}
	012 Move X0, 0xF4C000
	013 Move X0, [X0+4000]
	014 Call 0x1C17CF4
	015 Move X0, 0xF4C000
	016 Move X0, [X0+4008]
	017 Call 0x1C17CF4
	018 Move X0, 0xF4C000
	019 Move X0, [X0+4016]
	020 Call 0x1C17CF4
	021 Move X0, 0xF4C000
	022 Move X0, [X0+4024]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+140], W8
	026 Move W8, [X19+16]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X0, [X19+48]
	030 Compare X0, 0
	031 JumpIfEqual {67}
	032 Move X8, 0xF4C000
	033 Move X8, [X8+4024]
	034 Move X1, [X8]
	035 Add X8, X31, 40
	036 Call List`1<Object>.GetEnumerator, X0
	037 Move X9, 0xF4C000
	038 NotImplemented "Instruction LDUR not yet implemented."
	039 Move X8, [X31+56]
	040 Move X9, [X9+4016]
	041 Move [X31], V0
	042 Move [X31+16], X8
	043 Move X0, [X19+64]
	044 Compare X0, 0
	045 JumpIfEqual {67}
	046 Move X8, 0xF4C000
	047 Move X8, [X8+4000]
	048 Move X1, [X8]
	049 Add X8, X31, 40
	050 Call Dictionary`2<Object, Object>.GetEnumerator, X0
	051 Move X9, 0xF4C000
	052 NotImplemented "Instruction LDUR not yet implemented."
	053 NotImplemented "Instruction LDUR not yet implemented."
	054 Move X8, [X31+72]
	055 Move X9, [X9+4008]
	056 Move [X31], V0
	057 Move [X31+8], V1
	058 Move [X31+32], X8
	059 Move X0, [X9]
	060 Add X1, X31, 0
	061 Call 0x1C17E04
	062 Move X20, [X31+96]
	063 Move X19, [X31+104]
	064 Move X30, [X31+80]
	065 Add X31, X31, 112
	066 Return X0
	067 Call 0x1C17F20
	068 Move X0, 0xF28000
	069 Move X0, [X0+1888]
	070 Call 0x1C17D08
	071 Call 0x1C17F10
	072 Move X1, X31
	073 Move X19, X0
	074 Call ArgumentOutOfRangeException..ctor, X0
	075 Move X0, 0xF4C000
	076 Move X0, [X0+4032]
	077 Call 0x1C17D08
	078 Move X1, X0
	079 Move X0, X19
	080 Call 0x1C17DEC

Method: System.Int32 get_Count()

Disassembly:
	0x031D7D74 LDR X8, [X8 + 0x748]
	0x031D7D78 LDR X0, [X8]
	0x031D7D7C BL 0x1C16F10
	0x031D7D80 MOV X22, X0
	0x031D7D84 BL 0x31D3D04
	0x031D7D88 CBZ X22, 0x31D7DC4
	0x031D7D8C MOV X0, X22
	0x031D7D90 MOV X1, X21
	0x031D7D94 MOV X2, X19
	0x031D7D98 BL 0x31D3E30
	0x031D7D9C MOV X0, X20
	0x031D7DA0 MOV X1, X22
	0x031D7DA4 LDP X20, X19, [X31 + 0x20]
	0x031D7DA8 LDP X22, X21, [X31 + 0x10]
	0x031D7DAC LDR X30, [X31], #0x30
	0x031D7DB0 B 0x31D40B0
	0x031D7DB4 LDP X20, X19, [X31 + 0x20]
	0x031D7DB8 LDP X22, X21, [X31 + 0x10]
	0x031D7DBC LDR X30, [X31], #0x30
	0x031D7DC0 RET
	0x031D7DC4 BL 0x1C16F20
	0x031D7DC8 STR X30, [X31 - 0x20]!
	0x031D7DCC STP X20, X19, [X31 + 0x10]
	0x031D7DD0 ADRP X19, 0x1205000
	0x031D7DD4 ADRP X20, 0xF48000
	0x031D7DD8 LDRB W8, [X19 + 0x46]
	0x031D7DDC LDR X20, [X20 + 0xEE0]
	0x031D7DE0 TBNZ X8, 0x0, 0x31D7DF8
	0x031D7DE4 ADRP X0, 0xF48000
	0x031D7DE8 LDR X0, [X0 + 0xEE0]
	0x031D7DEC BL 0x1C16CF4
	0x031D7DF0 MOVZ W8, 0x1
	0x031D7DF4 STRB W8, [X19 + 0x46]
	0x031D7DF8 LDR X0, [X20]
	0x031D7DFC LDR W8, [X0 + 0xE0]
	0x031D7E00 CBNZ W8, 0x31D7E08
	0x031D7E04 BL 0x1C16DFC
	0x031D7E08 LDP X20, X19, [X31 + 0x10]
	0x031D7E0C LDR X30, [X31], #0x20
	0x031D7E10 B 0x31D50AC
	0x031D7E14 STR X30, [X31 - 0x20]!
	0x031D7E18 STP X20, X19, [X31 + 0x10]
	0x031D7E1C ADRP X19, 0x1205000
	0x031D7E20 ADRP X20, 0xF48000
	0x031D7E24 LDRB W8, [X19 + 0x47]
	0x031D7E28 LDR X20, [X20 + 0xEE0]
	0x031D7E2C TBNZ X8, 0x0, 0x31D7E44

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1206000
	005 Move W8, [X20+141]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xF4A000
	012 Move X0, [X0+344]
	013 Call 0x1C17CF4
	014 Move X0, 0xF4A000
	015 Move X0, [X0+352]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+141], W8
	019 Move W8, [X19+16]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X8, [X19+48]
	023 Compare X8, 0
	024 JumpIfEqual {41}
	025 Move W0, [X8+24]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0
	030 Move X0, [X19+64]
	031 Compare X0, 0
	032 JumpIfEqual {41}
	033 Move X8, 0xF4A000
	034 Move X8, [X8+344]
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X1, [X8]
	038 Move X30, [X31+32]
	039 Call Dictionary`2<Object, Object>.get_Count, X0
	040 Return X0
	041 Call 0x1C17F20
	042 Move X0, 0xF25000
	043 Move X0, [X0+1888]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X1, X31
	047 Move X19, X0
	048 Call ArgumentOutOfRangeException..ctor, X0
	049 Move X0, 0xF4A000
	050 Move X0, [X0+360]
	051 Call 0x1C17D08
	052 Move X1, X0
	053 Move X0, X19
	054 Call 0x1C17DEC

Method: System.Boolean Contains(System.Int32 index)

Disassembly:
	0x031DBCC8 LDR V0, [X8 + 0x990]
	0x031DBCCC STR D0, [X19 + 0x10]
	0x031DBCD0 LDR X0, [X21]
	0x031DBCD4 BL 0x1C16F10
	0x031DBCD8 LDR X1, [X20]
	0x031DBCDC MOV X20, X0
	0x031DBCE0 BL 0x2AA4804
	0x031DBCE4 MOV V0.16B, V11.16B
	0x031DBCE8 BL 0x31D4014
	0x031DBCEC CBZ X20, 0x31DBDA0
	0x031DBCF0 ADRP X8, 0xF40000
	0x031DBCF4 ADRP X21, 0xF44000
	0x031DBCF8 LDR X8, [X8 + 0x780]
	0x031DBCFC LDR X21, [X21 + 0xFE8]
	0x031DBD00 ADRP X22, 0xF40000
	0x031DBD04 ADRP X23, 0xF45000
	0x031DBD08 LDR X1, [X8]
	0x031DBD0C LDR X3, [X21]
	0x031DBD10 ADRP X24, 0xF45000
	0x031DBD14 LDR X22, [X22 + 0x788]
	0x031DBD18 LDR X23, [X23 + 0x3D0]
	0x031DBD1C LDR X24, [X24 + 0x3D8]
	0x031DBD20 MOV X2, X0
	0x031DBD24 MOV X0, X20
	0x031DBD28 BL 0x2AA5098

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1202000
	006 Move W8, [X21+142]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF46000
	014 Move X0, [X0+904]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+142], W8
	018 Move X20, [X20+48]
	019 Move W0, W19
	020 Call Value.op_Implicit, X0
	021 Compare X20, 0
	022 JumpIfEqual {34}
	023 Move X8, 0xF46000
	024 Move X8, [X8+904]
	025 Move X1, X0
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X2, [X8]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call List`1<Object>.Contains, X0, X1
	033 Return X0
	034 Call 0x1C17F20

Method: System.Boolean ContainsKey(System.String key)

Disassembly:
	0x031D45F8 BL 0x1C16CF4
	0x031D45FC ADRP X0, 0xF4C000
	0x031D4600 LDR X0, [X0 + 0x68]
	0x031D4604 BL 0x1C16CF4
	0x031D4608 ADRP X0, 0xF4C000
	0x031D460C LDR X0, [X0 + 0x70]
	0x031D4610 BL 0x1C16CF4
	0x031D4614 MOVZ W8, 0x1
	0x031D4618 STRB W8, [X21 + 0x96]
	0x031D461C STP X31, X31, [X31 + 0x8]
	0x031D4620 STR X31, [X31 + 0x18]
	0x031D4624 CBZ X19, 0x31D4720
	0x031D4628 LDR W8, [X19 + 0x10]
	0x031D462C CMP W8, 0x6
	0x031D4630 B.EQ 0x31D465C
	0x031D4634 CMP W8, 0x5
	0x031D4638 B.NE 0x31D4724
	0x031D463C LDR X0, [X20 + 0x30]
	0x031D4640 CBZ X0, 0x31D4720
	0x031D4644 ADRP X8, 0xF4C000
	0x031D4648 LDR X1, [X19 + 0x30]
	0x031D464C LDR X8, [X8 + 0x70]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1209000
	006 Move W8, [X21+143]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF4C000
	014 Move X0, [X0+3960]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+143], W8
	018 Move X0, [X20+64]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0xF4C000
	022 Move X8, [X8+3960]
	023 Move X1, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call Dictionary`2<Object, Object>.ContainsKey, X0, X1
	030 Return X0
	031 Call 0x1C17F20

Method: System.Void Add(mixpanel.Value value)

Disassembly:
	0x031DABC8 LDR X1, [X8]
	0x031DABCC ADD X0, X31, 0x30
	0x031DABD0 BL 0x2C0A83C
	0x031DABD4 CBZ X23, 0x31DACB4
	0x031DABD8 MOV X0, X23
	0x031DABDC BL 0x1C16F18
	0x031DABE0 B 0x31DABF0
	0x031DABE4 B 0x31DABF0
	0x031DABE8 B 0x31DAC54
	0x031DABEC B 0x31DAC54
	0x031DABF0 MOV X22, X0
	0x031DABF4 CMP W1, 0x1
	0x031DABF8 B.NE 0x31DAC28
	0x031DABFC MOV X0, X22
	0x031DAC00 BL 0x3EB1AD0
	0x031DAC04 LDR X21, [X0]
	0x031DAC08 BL 0x3EB1AE0
	0x031DAC0C ADRP X8, 0xF46000
	0x031DAC10 LDR X8, [X8 + 0x328]
	0x031DAC14 ADD X0, X31, 0x30
	0x031DAC18 LDR X1, [X8]
	0x031DAC1C BL 0x2C0A83C
	0x031DAC20 CBZ X21, 0x31DAB44
	0x031DAC24 B 0x31DAC88
	0x031DAC28 MOV X21, X31
	0x031DAC2C B 0x31DAC34
	0x031DAC30 MOV X22, X0
	0x031DAC34 ADRP X8, 0xF46000
	0x031DAC38 LDR X8, [X8 + 0x328]
	0x031DAC3C LDR X1, [X8]
	0x031DAC40 ADD X0, X31, 0x30
	0x031DAC44 BL 0x2C0A83C
	0x031DAC48 CBZ X21, 0x31DACB4
	0x031DAC4C MOV X0, X21
	0x031DAC50 BL 0x1C16F18
	0x031DAC54 MOV X22, X0
	0x031DAC58 CMP W1, 0x1
	0x031DAC5C B.NE 0x31DAC90
	0x031DAC60 MOV X0, X22
	0x031DAC64 BL 0x3EB1AD0
	0x031DAC68 LDR X21, [X0]
	0x031DAC6C BL 0x3EB1AE0
	0x031DAC70 ADRP X8, 0xF46000
	0x031DAC74 LDR X8, [X8 + 0x330]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1203000
	006 Move W8, [X21+144]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF47000
	014 Move X0, [X0+744]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+144], W8
	018 Move X8, -40808448
	019 Move V0, [X8+8]
	020 Move X0, [X20+48]
	021 Move [X20+16], D0
	022 Compare X0, 0
	023 JumpIfEqual {55}
	024 Move X9, 0xF47000
	025 Move X9, [X9+744]
	026 Move W10, [X0+28]
	027 Move X8, [X0+16]
	028 Move X9, [X9]
	029 Add W10, W10, 1
	030 Move [X0+28], W10
	031 Compare X8, 0
	032 JumpIfEqual {55}
	033 NotImplemented "Instruction LDRSW not yet implemented."
	034 Move W11, [X8+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Add W9, W10, 1
	037 Add X8, X8, X10
	038 Move [X0+24], W9
	039 Move [X8+32], X19
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return 
	045 Move X8, [X9+32]
	046 Move X1, X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X8, [X8+192]
	050 Move X2, [X8+112]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Call List`1<Object>.AddWithResize, X0, X1
	054 Return 
	055 Call 0x1C17F20

Method: System.Void Add(System.String key, mixpanel.Value value)

Disassembly:
	0x031D4EA4 STR X30, [X31 - 0x30]!
	0x031D4EA8 STP X22, X21, [X31 + 0x10]
	0x031D4EAC STP X20, X19, [X31 + 0x20]
	0x031D4EB0 ADRP X22, 0x1208000
	0x031D4EB4 LDRB W8, [X22 + 0x95]
	0x031D4EB8 MOV X19, X2
	0x031D4EBC MOV X20, X1
	0x031D4EC0 MOV X21, X0
	0x031D4EC4 TBNZ X8, 0x0, 0x31D4EDC
	0x031D4EC8 ADRP X0, 0xF4C000
	0x031D4ECC LDR X0, [X0 + 0xA0]
	0x031D4ED0 BL 0x1C16CF4
	0x031D4ED4 MOVZ W8, 0x1
	0x031D4ED8 STRB W8, [X22 + 0x95]
	0x031D4EDC LDR X0, [X21 + 0x40]
	0x031D4EE0 CBZ X0, 0x31D4F08
	0x031D4EE4 ADRP X8, 0xF4C000
	0x031D4EE8 LDR X8, [X8 + 0xA0]
	0x031D4EEC MOV X1, X20
	0x031D4EF0 MOV X2, X19
	0x031D4EF4 LDP X20, X19, [X31 + 0x20]
	0x031D4EF8 LDR X3, [X8]
	0x031D4EFC LDP X22, X21, [X31 + 0x10]
	0x031D4F00 LDR X30, [X31], #0x30
	0x031D4F04 B 0x2AA6B2C
	0x031D4F08 BL 0x1C16F20
	0x031D4F0C SUB X31, X31, 0x30
	0x031D4F10 STR X30, [X31 + 0x10]
	0x031D4F14 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1209000
	007 Move W8, [X22+145]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF4C000
	016 Move X0, [X0+4072]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+145], W8
	020 Move X8, -40783872
	021 Move V0, [X8+896]
	022 Move X0, [X21+64]
	023 Move [X21+16], D0
	024 Compare X0, 0
	025 JumpIfEqual {38}
	026 Move X8, 0xF4C000
	027 Move X8, [X8+4072]
	028 Move X1, X20
	029 Move X2, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X3, [X8]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	037 Return 
	038 Call 0x1C17F20

Method: System.Void Remove(System.Int32 index)

Disassembly:
	0x031DBD2C MOV V0.16B, V10.16B
	0x031DBD30 BL 0x31D4014
	0x031DBD34 LDR X1, [X22]
	0x031DBD38 LDR X3, [X21]
	0x031DBD3C MOV X2, X0
	0x031DBD40 MOV X0, X20
	0x031DBD44 BL 0x2AA5098
	0x031DBD48 MOV V0.16B, V9.16B
	0x031DBD4C BL 0x31D4014
	0x031DBD50 LDR X1, [X23]
	0x031DBD54 LDR X3, [X21]
	0x031DBD58 MOV X2, X0
	0x031DBD5C MOV X0, X20
	0x031DBD60 BL 0x2AA5098
	0x031DBD64 MOV V0.16B, V8.16B
	0x031DBD68 BL 0x31D4014
	0x031DBD6C LDR X1, [X24]
	0x031DBD70 LDR X3, [X21]
	0x031DBD74 MOV X2, X0
	0x031DBD78 MOV X0, X20
	0x031DBD7C BL 0x2AA5098
	0x031DBD80 STR X20, [X19 + 0x40]
	0x031DBD84 LDP X20, X19, [X31 + 0x50]
	0x031DBD88 LDP X22, X21, [X31 + 0x40]
	0x031DBD8C LDP X24, X23, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1202000
	006 Move W8, [X21+146]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF46000
	014 Move X0, [X0+912]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+146], W8
	018 Move X20, [X20+48]
	019 Move W0, W19
	020 Call Value.op_Implicit, X0
	021 Compare X20, 0
	022 JumpIfEqual {34}
	023 Move X8, 0xF46000
	024 Move X8, [X8+912]
	025 Move X1, X0
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X2, [X8]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call List`1<Object>.Remove, X0, X1
	033 Return 
	034 Call 0x1C17F20

Method: System.Void Remove(System.String key)

Disassembly:
	0x031D6054 MOV X1, X31
	0x031D6058 BL 0x32278CC
	0x031D605C BL 0x31D26B0
	0x031D6060 LDR X0, [X31 + 0x28]
	0x031D6064 LDR X8, [X0 + 0x20]
	0x031D6068 CBZ X8, 0x31D6084
	0x031D606C LDR X0, [X8 + 0x40]
	0x031D6070 LDR X9, [X8 + 0x18]
	0x031D6074 LDR X2, [X8 + 0x28]
	0x031D6078 MOV W1, W31
	0x031D607C BLR X9
	0x031D6080 LDR X0, [X31 + 0x28]
	0x031D6084 BL 0x31D6CC4
	0x031D6088 B 0x31D61E0
	0x031D608C CBNZ W8, 0x31D6098
	0x031D6090 BL 0x1C16DFC
	0x031D6094 LDR X0, [X20]
	0x031D6098 LDR X8, [X0 + 0xB8]
	0x031D609C LDR X8, [X8]
	0x031D60A0 STR X8, [X19 + 0x30]
	0x031D60A4 LDR X8, [X31 + 0x28]
	0x031D60A8 LDR W9, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1207000
	006 Move W8, [X21+147]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF4B000
	014 Move X0, [X0+168]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+147], W8
	018 Move X0, [X20+64]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0xF4B000
	022 Move X8, [X8+168]
	023 Move X1, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call Dictionary`2<Object, Object>.Remove, X0, X1
	030 Return 
	031 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerable`1<mixpanel.Value> get_Values()

Disassembly:
	0x031DBD90 LDR X30, [X31 + 0x20]
	0x031DBD94 LDP D9, D8, [X31 + 0x10]
	0x031DBD98 LDP D11, D10, [X31], #0x60
	0x031DBD9C RET
	0x031DBDA0 BL 0x1C16F20
	0x031DBDA4 STR D10, [X31 - 0x40]!
	0x031DBDA8 STP D9, D8, [X31 + 0x10]
	0x031DBDAC STP X30, X21, [X31 + 0x20]
	0x031DBDB0 STP X20, X19, [X31 + 0x30]
	0x031DBDB4 ADRP X20, 0x1201000
	0x031DBDB8 ADRP X21, 0xF40000
	0x031DBDBC LDRB W8, [X20 + 0xA7]
	0x031DBDC0 LDR X21, [X21 + 0x780]
	0x031DBDC4 MOV X19, X0
	0x031DBDC8 TBNZ X8, 0x0, 0x31DBE04
	0x031DBDCC ADRP X0, 0xF40000
	0x031DBDD0 LDR X0, [X0 + 0x780]
	0x031DBDD4 BL 0x1C16CF4
	0x031DBDD8 ADRP X0, 0xF40000
	0x031DBDDC LDR X0, [X0 + 0x788]
	0x031DBDE0 BL 0x1C16CF4
	0x031DBDE4 ADRP X0, 0xF45000
	0x031DBDE8 LDR X0, [X0 + 0x3D0]
	0x031DBDEC BL 0x1C16CF4
	0x031DBDF0 ADRP X0, 0xF45000
	0x031DBDF4 LDR X0, [X0 + 0x3D8]
	0x031DBDF8 BL 0x1C16CF4
	0x031DBDFC MOVZ W8, 0x1
	0x031DBE00 STRB W8, [X20 + 0xA7]
	0x031DBE04 LDR X1, [X21]
	0x031DBE08 MOV X0, X19
	0x031DBE0C BL 0x31D3650
	0x031DBE10 CBZ X0, 0x31DBE90
	0x031DBE14 ADRP X8, 0xF40000
	0x031DBE18 LDR X8, [X8 + 0x788]
	0x031DBE1C LDR V8, [X0 + 0x28]
	0x031DBE20 MOV X0, X19
	0x031DBE24 LDR X1, [X8]
	0x031DBE28 BL 0x31D3650
	0x031DBE2C CBZ X0, 0x31DBE90
	0x031DBE30 ADRP X8, 0xF45000
	0x031DBE34 LDR X8, [X8 + 0x3D0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1202000
	005 Move W8, [X20+148]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF46000
	012 Move X0, [X0+920]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+148], W8
	016 Move W8, [X19+16]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X0, [X19+48]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0
	024 Move X0, [X19+64]
	025 Compare X0, 0
	026 JumpIfEqual {48}
	027 Move X8, 0xF46000
	028 Move X8, [X8+920]
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X1, [X8]
	032 Move X30, [X31+32]
	033 Call Dictionary`2<Object, Object>.get_Values, X0
	034 Return X0
	035 Move X0, 0xF21000
	036 Move X0, [X0+1888]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X1, X31
	040 Move X19, X0
	041 Call ArgumentOutOfRangeException..ctor, X0
	042 Move X0, 0xF46000
	043 Move X0, [X0+928]
	044 Call 0x1C17D08
	045 Move X1, X0
	046 Move X0, X19
	047 Call 0x1C17DEC
	048 Call 0x1C17F20

Method: System.Boolean TryGetValue(System.String key, out mixpanel.Value value)

Disassembly:
	0x031D5EA4 LDR X0, [X20]
	0x031D5EA8 LDR X8, [X0 + 0xB8]
	0x031D5EAC ADD X8, X8, 0x8
	0x031D5EB0 B 0x31D609C
	0x031D5EB4 LDR X8, [X31 + 0x28]
	0x031D5EB8 LDR X0, [X8 + 0x40]
	0x031D5EBC CBZ X0, 0x31D6208
	0x031D5EC0 LDR X19, [X8 + 0x30]
	0x031D5EC4 MOV X1, X31
	0x031D5EC8 BL 0x3E5F3A8
	0x031D5ECC ADRP X8, 0xF4B000
	0x031D5ED0 LDR X8, [X8 + 0x108]
	0x031D5ED4 ADRP X9, 0xF4B000
	0x031D5ED8 LDR X9, [X9 + 0x118]
	0x031D5EDC MOV X3, X0
	0x031D5EE0 LDR X0, [X8]
	0x031D5EE4 LDR X2, [X9]
	0x031D5EE8 MOV X1, X19
	0x031D5EEC MOV X4, X31
	0x031D5EF0 BL 0x32277C4
	0x031D5EF4 BL 0x31D26B0
	0x031D5EF8 ADRP X20, 0xF4A000
	0x031D5EFC LDR X20, [X20 + 0xE00]
	0x031D5F00 LDR X8, [X20]
	0x031D5F04 LDR X8, [X8 + 0xB8]
	0x031D5F08 LDR W19, [X8 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1208000
	007 Move W8, [X22+149]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF4C000
	016 Move X0, [X0+160]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+149], W8
	020 Move X0, [X21+64]
	021 Compare X0, 0
	022 JumpIfEqual {35}
	023 Move X8, 0xF4C000
	024 Move X8, [X8+160]
	025 Move X1, X20
	026 Move X2, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X3, [X8]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]
	033 Call Dictionary`2<Object, Object>.TryGetValue, X0, X1, X2
	034 Return X0
	035 Call 0x1C17F20

Method: System.Void Merge(mixpanel.Value other)

Disassembly:
	0x031D558C STR W9, [X8]
	0x031D5590 LDP X30, X23, [X31], #0x30
	0x031D5594 RET
	0x031D5598 BL 0x1C16F20
	0x031D559C SUB X31, X31, 0x40
	0x031D55A0 STP X30, X23, [X31 + 0x10]
	0x031D55A4 STP X22, X21, [X31 + 0x20]
	0x031D55A8 STP X20, X19, [X31 + 0x30]
	0x031D55AC ADRP X21, 0x1207000
	0x031D55B0 ADRP X22, 0xF4A000
	0x031D55B4 LDRB W8, [X21 + 0x70]
	0x031D55B8 LDR X22, [X22 + 0xEE0]
	0x031D55BC MOV W19, W1
	0x031D55C0 MOV X20, X0
	0x031D55C4 TBNZ X8, 0x0, 0x31D560C
	0x031D55C8 ADRP X0, 0xF4A000
	0x031D55CC LDR X0, [X0 + 0xF60]
	0x031D55D0 BL 0x1C16CF4
	0x031D55D4 ADRP X0, 0xF4A000
	0x031D55D8 LDR X0, [X0 + 0xEE0]
	0x031D55DC BL 0x1C16CF4
	0x031D55E0 ADRP X0, 0xF4B000
	0x031D55E4 LDR X0, [X0 + 0xD0]
	0x031D55E8 BL 0x1C16CF4
	0x031D55EC ADRP X0, 0xF20000
	0x031D55F0 LDR X0, [X0 + 0xC10]
	0x031D55F4 BL 0x1C16CF4
	0x031D55F8 ADRP X0, 0xF4B000
	0x031D55FC LDR X0, [X0 + 0xD8]
	0x031D5600 BL 0x1C16CF4
	0x031D5604 MOVZ W8, 0x1
	0x031D5608 STRB W8, [X21 + 0x70]
	0x031D560C LDR X0, [X22]
	0x031D5610 ADRP X21, 0xF4B000
	0x031D5614 ADRP X23, 0xF4B000
	0x031D5618 LDR W8, [X0 + 0xE0]
	0x031D561C LDR X21, [X21 + 0xD8]
	0x031D5620 LDR X23, [X23 + 0xD0]
	0x031D5624 CBNZ W8, 0x31D562C
	0x031D5628 BL 0x1C16DFC
	0x031D562C BL 0x31D9694
	0x031D5630 STR W0, [X31 + 0xC]
	0x031D5634 BL 0x31D9780
	0x031D5638 CMP W19, 0x0
	0x031D563C ADD X8, X31, 0x8
	0x031D5640 ADD X9, X31, 0xC
	0x031D5644 STR W0, [X31 + 0x8]
	0x031D5648 CSEL X0, X9, X8, EQ
	0x031D564C MOV X1, X31
	0x031D5650 CSEL X21, X21, X23, EQ
	0x031D5654 BL 0x337B6E0
	0x031D5658 LDR X8, [X21]
	0x031D565C MOV X1, X0
	0x031D5660 MOV X2, X31
	0x031D5664 MOV X0, X8
	0x031D5668 BL 0x321B938
	0x031D566C MOV X21, X0
	0x031D5670 BL 0x31D3DD8
	0x031D5674 CBZ X20, 0x31D5748
	0x031D5678 ADRP X8, 0xF20000
	0x031D567C LDR X8, [X8 + 0xC10]
	0x031D5680 MOV X2, X0
	0x031D5684 MOV X0, X20
	0x031D5688 LDR X1, [X8]
	0x031D568C BL 0x31D3E30
	0x031D5690 LDR X0, [X22]
	0x031D5694 LDR W8, [X0 + 0xE0]
	0x031D5698 CBNZ W8, 0x31D56A4
	0x031D569C BL 0x1C16DFC
	0x031D56A0 LDR X0, [X22]
	0x031D56A4 LDR X8, [X0 + 0xB8]
	0x031D56A8 MOV X0, X20
	0x031D56AC MOV X1, X31
	0x031D56B0 LDR X22, [X8]
	0x031D56B4 BL 0x3C86C20
	0x031D56B8 CBZ X22, 0x31D5748
	0x031D56BC ADRP X10, 0xF4A000
	0x031D56C0 LDR X8, [X22]
	0x031D56C4 LDR X10, [X10 + 0xF60]
	0x031D56C8 MOV X20, X0
	0x031D56CC LDRH W9, [X8 + 0x12E]
	0x031D56D0 LDR X1, [X10]
	0x031D56D4 CBZ X9, 0x31D56F8
	0x031D56D8 LDR X10, [X8 + 0xB0]
	0x031D56DC ADD X10, X10, 0x8
	0x031D56E0 LDUR X11, [X10 - 0x8]
	0x031D56E4 CMP X11, X1
	0x031D56E8 B.EQ 0x31D5708
	0x031D56EC SUBS X9, X9, 0x1
	0x031D56F0 ADD X10, X10, 0x10
	0x031D56F4 B.NE 0x31D56E0
	0x031D56F8 MOVZ W2, 0x7
	0x031D56FC MOV X0, X22
	0x031D5700 BL 0x1C5C788
	0x031D5704 B 0x31D5718
	0x031D5708 LDR W9, [X10]
	0x031D570C ADD W9, W9, 0x7
	0x031D5710 ADD X8, X8, W9, 0x4, SXTW
	0x031D5714 ADD X0, X8, 0x138
	0x031D5718 LDP X8, X3, [X0]
	0x031D571C MOV X0, X22
	0x031D5720 MOV X1, X21
	0x031D5724 MOV X2, X20
	0x031D5728 BLR X8
	0x031D572C MOV W0, W19
	0x031D5730 BL 0x31D986C
	0x031D5734 LDP X20, X19, [X31 + 0x30]
	0x031D5738 LDP X22, X21, [X31 + 0x20]
	0x031D573C LDP X30, X23, [X31 + 0x10]
	0x031D5740 ADD X31, X31, 0x40
	0x031D5744 RET
	0x031D5748 BL 0x1C16F20
	0x031D574C STP X30, X21, [X31 - 0x20]!
	0x031D5750 STP X20, X19, [X31 + 0x10]
	0x031D5754 ADRP X21, 0x1207000
	0x031D5758 ADRP X20, 0xF4A000
	0x031D575C LDRB W8, [X21 + 0x32]
	0x031D5760 LDR X20, [X20 + 0xEE0]
	0x031D5764 MOV X19, X0
	0x031D5768 TBNZ X8, 0x0, 0x31D57BC
	0x031D576C ADRP X0, 0xF4A000
	0x031D5770 LDR X0, [X0 + 0xED0]
	0x031D5774 BL 0x1C16CF4
	0x031D5778 ADRP X0, 0xF4A000
	0x031D577C LDR X0, [X0 + 0xEE0]
	0x031D5780 BL 0x1C16CF4
	0x031D5784 ADRP X0, 0xF4B000
	0x031D5788 LDR X0, [X0 + 0xE0]
	0x031D578C BL 0x1C16CF4
	0x031D5790 ADRP X0, 0xF4B000
	0x031D5794 LDR X0, [X0 + 0xE8]
	0x031D5798 BL 0x1C16CF4
	0x031D579C ADRP X0, 0xF4B000
	0x031D57A0 LDR X0, [X0 + 0x38]
	0x031D57A4 BL 0x1C16CF4
	0x031D57A8 ADRP X0, 0xF4B000
	0x031D57AC LDR X0, [X0 + 0xF0]
	0x031D57B0 BL 0x1C16CF4
	0x031D57B4 MOVZ W8, 0x1
	0x031D57B8 STRB W8, [X21 + 0x32]
	0x031D57BC LDR X0, [X20]
	0x031D57C0 LDR W8, [X0 + 0xE0]
	0x031D57C4 CBNZ W8, 0x31D57CC
	0x031D57C8 BL 0x1C16DFC
	0x031D57CC BL 0x31D43C4
	0x031D57D0 TBZ X0, 0x0, 0x31D5898
	0x031D57D4 BL 0x31D2278
	0x031D57D8 CBZ X0, 0x31D58A4
	0x031D57DC LDR X0, [X0 + 0x28]
	0x031D57E0 BL 0x31D3DD8
	0x031D57E4 CBZ X19, 0x31D58A4
	0x031D57E8 ADRP X8, 0xF4B000

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+40], X25
	004 Move [X31+48], X24
	005 Move [X31+56], X23
	006 Move [X31+64], X22
	007 Move [X31+72], X21
	008 Move [X31+80], X20
	009 Move [X31+88], X19
	010 Move X21, 0x1208000
	011 Move W8, [X21+150]
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {44}
	018 Move X0, 0xF4B000
	019 Move X0, [X0+3968]
	020 Call 0x1C17CF4
	021 Move X0, 0xF4C000
	022 Move X0, [X0+72]
	023 Call 0x1C17CF4
	024 Move X0, 0xF4B000
	025 Move X0, [X0+3976]
	026 Call 0x1C17CF4
	027 Move X0, 0xF4C000
	028 Move X0, [X0+80]
	029 Call 0x1C17CF4
	030 Move X0, 0xF4C000
	031 Move X0, [X0+88]
	032 Call 0x1C17CF4
	033 Move X0, 0xF4C000
	034 Move X0, [X0+96]
	035 Call 0x1C17CF4
	036 Move X0, 0xF4C000
	037 Move X0, [X0+104]
	038 Call 0x1C17CF4
	039 Move X0, 0xF4C000
	040 Move X0, [X0+112]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X21+150], W8
	044 Move [X31+8], X31
	045 Move [X31+16], X31
	046 Move [X31+24], X31
	047 Compare X19, 0
	048 JumpIfEqual {119}
	049 Move W8, [X19+16]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X0, [X20+48]
	053 Compare X0, 0
	054 JumpIfEqual {119}
	055 Move X8, 0xF4C000
	056 Move X1, [X19+48]
	057 Move X8, [X8+112]
	058 Move X2, [X8]
	059 Call List`1<Object>.AddRange, X0, X1
	060 Move X0, [X19+64]
	061 Compare X0, 0
	062 JumpIfEqual {119}
	063 Move X8, 0xF4C000
	064 Move X8, [X8+72]
	065 Move X1, [X8]
	066 Call Dictionary`2<Object, Object>.get_Keys, X0
	067 Compare X0, 0
	068 JumpIfEqual {119}
	069 Move X8, 0xF4C000
	070 Move X8, [X8+104]
	071 Move X1, [X8]
	072 Add X8, X31, 8
	073 Call KeyCollection<Object, Object>.GetEnumerator, X0
	074 Move X23, 0xF4C000
	075 Move X24, 0xF4B000
	076 Move X25, 0xF4B000
	077 Move X23, [X23+88]
	078 Move X24, [X24+3968]
	079 Move X25, [X25+3976]
	080 Move X1, [X23]
	081 Add X0, X31, 8
	082 Call Enumerator<Object, Object>.MoveNext, X0
	083 Move TEMP, X0
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfNotEqual {102}
	087 Move X0, [X19+64]
	088 Compare X0, 0
	089 JumpIfEqual {117}
	090 Move X21, [X20+64]
	091 Move X22, [X31+24]
	092 Move X2, [X24]
	093 Move X1, X22
	094 Call Dictionary`2<Object, Object>.get_Item, X0, X1
	095 Compare X21, 0
	096 JumpIfEqual {118}
	097 Move X3, [X25]
	098 Move X2, X0
	099 Move X0, X21
	100 Move X1, X22
	101 Call Dictionary`2<Object, Object>.set_Item, X0, X1, X2
	102 Move X8, 0xF4C000
	103 Move X8, [X8+80]
	104 Add X0, X31, 8
	105 Move X1, [X8]
	106 Call Enumerator<Object, Object>.Dispose, X0
	107 Move X20, [X31+80]
	108 Move X19, [X31+88]
	109 Move X22, [X31+64]
	110 Move X21, [X31+72]
	111 Move X24, [X31+48]
	112 Move X23, [X31+56]
	113 Move X30, [X31+32]
	114 Move X25, [X31+40]
	115 Add X31, X31, 96
	116 Return 
	117 Call 0x1C17F20
	118 Call 0x1C17F20
	119 Call 0x1C17F20
	120 Move X0, 0xF27000
	121 Move X0, [X0+1400]
	122 Call 0x1C17D08
	123 Call 0x1C17F10
	124 Move X19, X0
	125 Move X0, 0xF4C000
	126 Move X0, [X0+120]
	127 Call 0x1C17D08
	128 Move X1, X0
	129 Move X0, X19
	130 Move X2, X31
	131 Call ArgumentException..ctor, X0, X1
	132 Move X0, 0xF4C000
	133 Move X0, [X0+128]
	134 Call 0x1C17D08
	135 Move X1, X0
	136 Move X0, X19
	137 Call 0x1C17DEC
	138 Move X19, X0
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move X0, X19
	141 Call 0x3EB2AD0
	142 Move X20, [X0]
	143 Call 0x3EB2AE0
	144 Move X8, 0xF4C000
	145 Move X8, [X8+80]
	146 Add X0, X31, 8
	147 Move X1, [X8]
	148 Call Enumerator<Object, Object>.Dispose, X0
	149 Compare X20, 0
	150 JumpIfEqual {107}
	151 Move X0, X20
	152 Call 0x1C17F18
	153 Move X20, X31
	154 Move X19, X0
	155 Move X8, 0xF4C000
	156 Move X8, [X8+80]
	157 Move X1, [X8]
	158 Add X0, X31, 8
	159 Call Enumerator<Object, Object>.Dispose, X0
	160 Compare X20, 0
	161 JumpIfNotEqual {164}
	162 Move X0, X19
	163 Call 0x1D2D690
	164 Move X0, X20
	165 Call 0x1C17F18
	166 Call 0x1991590

Method: System.String get_String()

Disassembly:
	0x031DBE38 LDR V9, [X0 + 0x28]
	0x031DBE3C MOV X0, X19

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_String(System.String value)

Disassembly:
	0x031DBE40 LDR X1, [X8]
	0x031DBE44 BL 0x31D3650
	0x031DBE48 CBZ X0, 0x31DBE90
	0x031DBE4C ADRP X8, 0xF45000
	0x031DBE50 LDR X8, [X8 + 0x3D8]

ISIL:
	001 Move X8, -40816640
	002 Move V0, [X8+2584]
	003 Move [X0+24], X1
	004 Move [X0+16], D0
	005 Return 

Method: System.Boolean get_Bool()

Disassembly:
	0x031DBE54 LDR V10, [X0 + 0x28]
	0x031DBE58 MOV X0, X19

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_Bool(System.Boolean value)

Disassembly:
	0x031DBE5C LDR X1, [X8]
	0x031DBE60 BL 0x31D3650
	0x031DBE64 CBZ X0, 0x31DBE90
	0x031DBE68 LDR V3, [X0 + 0x28]
	0x00000000 INVALID
	0x00000000 INVALID

ISIL:
	001 Move X8, -40816640
	002 Move V0, [X8+1944]
	003 And W8, W1, 1
	004 Move [X0+32], W8
	005 Move [X0+16], D0
	006 Return 

Method: System.Double get_Number()

Disassembly:
	0x031DBE74 LDP X20, X19, [X31 + 0x30]
	0x031DBE78 LDP X30, X21, [X31 + 0x20]

ISIL:
	001 Move V0, [X0+40]
	002 Return V0

Method: System.Void set_Number(System.Double value)

Disassembly:
	0x031DBE7C LDP D9, D8, [X31 + 0x10]
	0x00000000 INVALID
	0x00000000 INVALID
	0x031DBE88 LDR V10, [X31], #0x40
	0x031DBE8C RET

ISIL:
	001 Move X8, -40816640
	002 Move V1, [X8+968]
	003 Move [X0+40], D0
	004 Move [X0+16], D1
	005 Return 

Method: System.Uri get_Uri()

Disassembly:
	0x031DBE90 BL 0x1C16F20
	0x031DBE94 STP D11, D10, [X31 - 0x60]!
	0x031DBE98 STP D9, D8, [X31 + 0x10]
	0x031DBE9C STR X30, [X31 + 0x20]
	0x031DBEA0 STP X24, X23, [X31 + 0x30]
	0x031DBEA4 STP X22, X21, [X31 + 0x40]
	0x031DBEA8 STP X20, X19, [X31 + 0x50]
	0x031DBEAC ADRP X22, 0x1201000
	0x031DBEB0 ADRP X21, 0xF44000
	0x031DBEB4 ADRP X20, 0xF45000
	0x031DBEB8 LDRB W8, [X22 + 0xA8]
	0x031DBEBC LDR X21, [X21 + 0xFD8]
	0x031DBEC0 LDR X20, [X20 + 0x3C8]
	0x031DBEC4 MOV V8.16B, V3.16B
	0x031DBEC8 MOV V9.16B, V2.16B
	0x031DBECC MOV V10.16B, V1.16B
	0x031DBED0 MOV V11.16B, V0.16B
	0x031DBED4 MOV X19, X0
	0x031DBED8 TBNZ X8, 0x0, 0x31DBF38
	0x031DBEDC ADRP X0, 0xF44000
	0x031DBEE0 LDR X0, [X0 + 0xFE8]
	0x031DBEE4 BL 0x1C16CF4
	0x031DBEE8 ADRP X0, 0xF45000
	0x031DBEEC LDR X0, [X0 + 0x3C8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1202000
	006 Move X20, 0xF1B000
	007 Move W8, [X21+151]
	008 Move X20, [X20+2600]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF1B000
	015 Move X0, [X0+2600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+151], W8
	019 Move X0, [X20]
	020 Move X19, [X19+24]
	021 Call 0x1C17F10
	022 Move X1, X19
	023 Move X2, X31
	024 Move X20, X0
	025 Call Uri..ctor, X0, X1
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Void set_Uri(System.Uri value)

Disassembly:
	0x031DBEF0 BL 0x1C16CF4
	0x031DBEF4 ADRP X0, 0xF44000
	0x031DBEF8 LDR X0, [X0 + 0xFD8]
	0x031DBEFC BL 0x1C16CF4
	0x031DBF00 ADRP X0, 0xF40000
	0x031DBF04 LDR X0, [X0 + 0x780]
	0x031DBF08 BL 0x1C16CF4
	0x031DBF0C ADRP X0, 0xF40000
	0x031DBF10 LDR X0, [X0 + 0x788]
	0x031DBF14 BL 0x1C16CF4
	0x031DBF18 ADRP X0, 0xF45000
	0x031DBF1C LDR X0, [X0 + 0x3D0]
	0x031DBF20 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, -40816640
	004 Move V0, [X8+2192]
	005 Move [X0+16], D0
	006 Compare X1, 0
	007 JumpIfEqual {16}
	008 Move X19, X0
	009 Move X0, X1
	010 Move X1, X31
	011 Call Uri.get_OriginalString, X0
	012 Move [X19+24], X0
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return 
	016 Call 0x1C17F20

Method: System.Guid get_Guid()

Disassembly:
	0x031DBF24 ADRP X0, 0xF45000
	0x031DBF28 LDR X0, [X0 + 0x3D8]
	0x031DBF2C BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+24]
	002 Move X1, X31
	003 Call Guid.Parse, X0
	004 Return X0

Method: System.Void set_Guid(System.Guid value)

Disassembly:
	0x031DBF30 MOVZ W8, 0x1
	0x031DBF34 STRB W8, [X22 + 0xA8]
	0x031DBF38 ADRP X8, 0xFFFFFFFFFD912000
	0x031DBF3C LDR V0, [X8 + 0xC30]
	0x031DBF40 STR D0, [X19 + 0x10]
	0x031DBF44 LDR X0, [X21]
	0x031DBF48 BL 0x1C16F10
	0x031DBF4C LDR X1, [X20]
	0x031DBF50 MOV X20, X0
	0x031DBF54 BL 0x2AA4804
	0x031DBF58 MOV V0.16B, V11.16B
	0x031DBF5C BL 0x31D4014
	0x031DBF60 CBZ X20, 0x31DC014
	0x031DBF64 ADRP X8, 0xF40000

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X8, -40816640
	005 Move V0, [X8+3800]
	006 Move X19, X0
	007 Move [X31], X1
	008 Move [X31+8], X2
	009 Move X1, X31
	010 Move [X0+16], D0
	011 Add X0, X31, 0
	012 Call Guid.ToString, X0
	013 Move [X19+24], X0
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Add X31, X31, 32
	017 Return 

Method: System.DateTime get_DateTime()

Disassembly:
	0x031DBF68 ADRP X21, 0xF44000
	0x031DBF6C LDR X8, [X8 + 0x780]
	0x031DBF70 LDR X21, [X21 + 0xFE8]
	0x031DBF74 ADRP X22, 0xF40000
	0x031DBF78 ADRP X23, 0xF45000
	0x031DBF7C LDR X1, [X8]
	0x031DBF80 LDR X3, [X21]
	0x031DBF84 ADRP X24, 0xF45000
	0x031DBF88 LDR X22, [X22 + 0x788]
	0x031DBF8C LDR X23, [X23 + 0x3D0]
	0x031DBF90 LDR X24, [X24 + 0x3D8]
	0x031DBF94 MOV X2, X0
	0x031DBF98 MOV X0, X20
	0x031DBF9C BL 0x2AA5098
	0x031DBFA0 MOV V0.16B, V10.16B
	0x031DBFA4 BL 0x31D4014
	0x031DBFA8 LDR X1, [X22]
	0x031DBFAC LDR X3, [X21]
	0x031DBFB0 MOV X2, X0
	0x031DBFB4 MOV X0, X20
	0x031DBFB8 BL 0x2AA5098
	0x031DBFBC MOV V0.16B, V9.16B
	0x031DBFC0 BL 0x31D4014
	0x031DBFC4 LDR X1, [X23]
	0x031DBFC8 LDR X3, [X21]
	0x031DBFCC MOV X2, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1202000
	006 Move X20, 0xF1A000
	007 Move W8, [X21+152]
	008 Move X20, [X20+2544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF1A000
	015 Move X0, [X0+2544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+152], W8
	019 Move X0, [X20]
	020 Move X19, [X19+24]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X1, X31
	027 Call DateTime.Parse, X0
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move W1, 1
	031 Move X2, X31
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Call DateTime.SpecifyKind, X0, X1
	035 Return X0

Method: System.Void set_DateTime(System.DateTime value)

Disassembly:
	0x031DBFD0 MOV X0, X20
	0x031DBFD4 BL 0x2AA5098
	0x031DBFD8 MOV V0.16B, V8.16B
	0x031DBFDC BL 0x31D4014
	0x031DBFE0 LDR X1, [X24]
	0x031DBFE4 LDR X3, [X21]
	0x031DBFE8 MOV X2, X0
	0x031DBFEC MOV X0, X20
	0x031DBFF0 BL 0x2AA5098
	0x031DBFF4 STR X20, [X19 + 0x40]
	0x031DBFF8 LDP X20, X19, [X31 + 0x50]
	0x031DBFFC LDP X22, X21, [X31 + 0x40]
	0x031DC000 LDP X24, X23, [X31 + 0x30]
	0x031DC004 LDR X30, [X31 + 0x20]
	0x031DC008 LDP D9, D8, [X31 + 0x10]
	0x031DC00C LDP D11, D10, [X31], #0x60
	0x031DC010 RET
	0x031DC014 BL 0x1C16F20
	0x031DC018 STR D10, [X31 - 0x40]!
	0x031DC01C STP D9, D8, [X31 + 0x8]
	0x031DC020 STR X30, [X31 + 0x18]
	0x031DC024 STP X22, X21, [X31 + 0x20]
	0x031DC028 STP X20, X19, [X31 + 0x30]
	0x031DC02C ADRP X21, 0x1200000
	0x031DC030 ADRP X22, 0xF44000
	0x031DC034 MOV X19, X8
	0x031DC038 LDRB W8, [X21 + 0xA9]
	0x031DC03C LDR X22, [X22 + 0x3E0]
	0x031DC040 MOV X20, X0
	0x031DC044 TBNZ X8, 0x0, 0x31DC068
	0x031DC048 ADRP X0, 0xF42000
	0x031DC04C LDR X0, [X0 + 0xF90]
	0x031DC050 BL 0x1C16CF4
	0x031DC054 ADRP X0, 0xF44000
	0x031DC058 LDR X0, [X0 + 0x3E0]
	0x031DC05C BL 0x1C16CF4
	0x031DC060 MOVZ W8, 0x1
	0x031DC064 STRB W8, [X21 + 0xA9]
	0x031DC068 LDR X1, [X22]
	0x031DC06C MOV X0, X20
	0x031DC070 BL 0x31D3650
	0x031DC074 CBZ X0, 0x31DC0D8
	0x031DC078 ADRP X21, 0xF42000
	0x031DC07C LDR X21, [X21 + 0xF90]
	0x031DC080 BL 0x31DB92C
	0x031DC084 LDR X1, [X21]
	0x031DC088 MOV X0, X20
	0x031DC08C MOV V9.16B, V0.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1202000
	007 Move X21, 0xF1A000
	008 Move W8, [X22+153]
	009 Move X21, [X21+2544]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xF1B000
	017 Move X0, [X0+3144]
	018 Call 0x1C17CF4
	019 Move X0, 0xF19000
	020 Move X0, [X0+2544]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+153], W8
	024 Move X8, -40820736
	025 Move V0, [X8+3808]
	026 Move [X19+16], D0
	027 Move X0, [X21]
	028 Move X21, 0xF1A000
	029 Move W8, [X0+224]
	030 Move X21, [X21+3144]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move W1, 1
	035 Move X0, X20
	036 Move X2, X31
	037 Call DateTime.SpecifyKind, X0, X1
	038 Move X8, [X21]
	039 Move [X31+8], X0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X0, X31
	046 Call CultureInfo.get_InvariantCulture
	047 Move X1, X0
	048 Add X0, X31, 8
	049 Move X2, X31
	050 Call DateTime.ToString, X0, X1
	051 Move [X19+24], X0
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X30, [X31+48]
	057 Return 

Method: System.DateTimeOffset get_DateTimeOffset()

Disassembly:
	0x031DC090 MOV V10.16B, V1.16B
	0x031DC094 MOV V8.16B, V2.16B
	0x031DC098 BL 0x31D3650
	0x031DC09C CBZ X0, 0x31DC0D8
	0x031DC0A0 BL 0x31DB92C
	0x031DC0A4 FMOV S3, 0.5
	0x031DC0A8 FMUL S0, S0, S3
	0x031DC0AC FMUL S1, S1, S3
	0x031DC0B0 FMUL S2, S2, S3
	0x031DC0B4 STP S9, S10, [X19]
	0x031DC0B8 STP S8, S0, [X19 + 0x8]
	0x031DC0BC STP S1, S2, [X19 + 0x10]
	0x031DC0C0 LDP X20, X19, [X31 + 0x30]
	0x031DC0C4 LDP X22, X21, [X31 + 0x20]
	0x031DC0C8 LDR X30, [X31 + 0x18]
	0x031DC0CC LDP D9, D8, [X31 + 0x8]
	0x031DC0D0 LDR V10, [X31], #0x40
	0x031DC0D4 RET
	0x031DC0D8 BL 0x1C16F20
	0x031DC0DC CBZ X0, 0x31DC0E4
	0x031DC0E0 B 0x31DB92C
	0x031DC0E4 STR X30, [X31 - 0x10]!
	0x031DC0E8 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1201000
	006 Move X20, 0xF1A000
	007 Move W8, [X21+154]
	008 Move X20, [X20+2648]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF1A000
	015 Move X0, [X0+2648]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+154], W8
	019 Move X0, [X20]
	020 Move X19, [X19+24]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call DateTimeOffset.Parse, X0
	032 Return X0

Method: System.Void set_DateTimeOffset(System.DateTimeOffset value)

Disassembly:
	0x031DC0EC STP X30, X23, [X31 - 0x30]!
	0x031DC0F0 STP X22, X21, [X31 + 0x10]
	0x031DC0F4 STP X20, X19, [X31 + 0x20]
	0x031DC0F8 ADRP X23, 0x1200000
	0x031DC0FC ADRP X22, 0xF43000
	0x031DC100 ADRP X21, 0xF44000
	0x031DC104 LDRB W8, [X23 + 0xAA]
	0x031DC108 LDR X22, [X22 + 0xFD8]
	0x031DC10C LDR X21, [X21 + 0x3C8]
	0x031DC110 MOV X20, X1
	0x031DC114 MOV X19, X0
	0x031DC118 TBNZ X8, 0x0, 0x31DC160
	0x031DC11C ADRP X0, 0xF43000
	0x031DC120 LDR X0, [X0 + 0xFE8]
	0x031DC124 BL 0x1C16CF4
	0x031DC128 ADRP X0, 0xF44000
	0x031DC12C LDR X0, [X0 + 0x3C8]
	0x031DC130 BL 0x1C16CF4
	0x031DC134 ADRP X0, 0xF43000
	0x031DC138 LDR X0, [X0 + 0xFD8]
	0x031DC13C BL 0x1C16CF4
	0x031DC140 ADRP X0, 0xF42000
	0x031DC144 LDR X0, [X0 + 0xF90]
	0x031DC148 BL 0x1C16CF4
	0x031DC14C ADRP X0, 0xF44000
	0x031DC150 LDR X0, [X0 + 0x3E0]
	0x031DC154 BL 0x1C16CF4
	0x031DC158 MOVZ W8, 0x1
	0x031DC15C STRB W8, [X23 + 0xAA]
	0x031DC160 ADRP X8, 0xFFFFFFFFFD912000
	0x031DC164 LDR V0, [X8 + 0x2E0]
	0x031DC168 STR D0, [X19 + 0x10]
	0x031DC16C LDR X0, [X22]
	0x031DC170 BL 0x1C16F10
	0x031DC174 LDR X1, [X21]
	0x031DC178 MOV X21, X0
	0x031DC17C BL 0x2AA4804
	0x031DC180 LDP S0, S1, [X20]
	0x031DC184 LDR V2, [X20 + 0x8]
	0x031DC188 BL 0x31DC200
	0x031DC18C CBZ X21, 0x31DC1FC
	0x031DC190 ADRP X8, 0xF44000
	0x031DC194 ADRP X22, 0xF43000
	0x031DC198 LDR X8, [X8 + 0x3E0]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1201000
	007 Move [X31], X1
	008 Move [X31+8], X2
	009 Move X20, 0xF1A000
	010 Move W8, [X21+155]
	011 Move X20, [X20+3144]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF1A000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move X0, 0xF1A000
	021 Move X0, [X0+2648]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+155], W8
	025 Move X8, -40820736
	026 Move V0, [X8+2320]
	027 Move [X19+16], D0
	028 Move X0, [X20]
	029 Move X20, 0xF1A000
	030 Move W8, [X0+224]
	031 Move X20, [X20+2648]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X31
	036 Call CultureInfo.get_InvariantCulture
	037 Move X8, [X20]
	038 Move X20, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Add X0, X31, 0
	045 Move X1, X20
	046 Move X2, X31
	047 Call DateTimeOffset.ToString, X0, X1
	048 Move [X19+24], X0
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X30, [X31+16]
	052 Move X21, [X31+24]
	053 Add X31, X31, 48
	054 Return 

Method: System.TimeSpan get_TimeSpan()

Disassembly:
	0x031DC19C LDR X22, [X22 + 0xFE8]
	0x031DC1A0 ADRP X23, 0xF42000
	0x031DC1A4 MOV X2, X0
	0x031DC1A8 LDR X1, [X8]
	0x031DC1AC LDR X3, [X22]
	0x031DC1B0 LDR X23, [X23 + 0xF90]
	0x031DC1B4 MOV X0, X21
	0x031DC1B8 BL 0x2AA5098

ISIL:
	001 Move V0, [X0+40]
	002 Move X8, 0x7FF00000
	003 Move D1, X8
	004 Move X9, 0x80000000
	005 NotImplemented "Instruction FCVTZS not yet implemented."
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 NotImplemented "Instruction CSEL not yet implemented."
	008 Return X0

Method: System.Void set_TimeSpan(System.TimeSpan value)

Disassembly:
	0x031DC1BC LDP S0, S1, [X20 + 0xC]
	0x031DC1C0 LDR V2, [X20 + 0x14]
	0x031DC1C4 FADD S0, S0, S0
	0x031DC1C8 FADD S1, S1, S1
	0x031DC1CC FADD S2, S2, S2
	0x031DC1D0 BL 0x31DC200
	0x031DC1D4 LDR X1, [X23]
	0x031DC1D8 LDR X3, [X22]
	0x031DC1DC MOV X2, X0
	0x031DC1E0 MOV X0, X21
	0x031DC1E4 BL 0x2AA5098
	0x031DC1E8 STR X21, [X19 + 0x40]
	0x031DC1EC LDP X20, X19, [X31 + 0x20]
	0x031DC1F0 LDP X22, X21, [X31 + 0x10]
	0x031DC1F4 LDP X30, X23, [X31], #0x30
	0x031DC1F8 RET
	0x031DC1FC BL 0x1C16F20
	0x031DC200 STR D10, [X31 - 0x30]!
	0x031DC204 STP D9, D8, [X31 + 0x8]
	0x031DC208 STR X30, [X31 + 0x18]
	0x031DC20C STP X20, X19, [X31 + 0x20]
	0x031DC210 ADRP X19, 0x1200000
	0x031DC214 ADRP X20, 0xF1C000
	0x031DC218 LDRB W8, [X19 + 0x103]
	0x031DC21C LDR X20, [X20 + 0x748]
	0x031DC220 MOV V8.16B, V2.16B
	0x031DC224 MOV V9.16B, V1.16B
	0x031DC228 MOV V10.16B, V0.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1201000
	007 Move X21, 0xF1A000
	008 Move W8, [X22+156]
	009 Move X21, [X21+1392]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF1A000
	017 Move X0, [X0+1392]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+156], W8
	021 Move X8, -40820736
	022 Move V0, [X8+3816]
	023 Move [X19+16], D0
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 NotImplemented "Instruction SCVTF not yet implemented."
	030 Move [X19+40], D0
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Return 

Method: UnityEngine.Color get_Color()

Disassembly:
	0x031DC22C TBNZ X8, 0x0, 0x31DC244
	0x031DC230 ADRP X0, 0xF1C000
	0x031DC234 LDR X0, [X0 + 0x748]
	0x031DC238 BL 0x1C16CF4
	0x031DC23C MOVZ W8, 0x1
	0x031DC240 STRB W8, [X19 + 0x103]
	0x031DC244 LDR X0, [X20]
	0x031DC248 BL 0x1C16F10
	0x031DC24C MOV V0.16B, V10.16B
	0x031DC250 MOV V1.16B, V9.16B
	0x031DC254 MOV V2.16B, V8.16B
	0x031DC258 MOV X19, X0
	0x031DC25C BL 0x31DD03C
	0x031DC260 MOV X0, X19
	0x031DC264 LDP X20, X19, [X31 + 0x20]
	0x031DC268 LDR X30, [X31 + 0x18]
	0x031DC26C LDP D9, D8, [X31 + 0x8]
	0x031DC270 LDR V10, [X31], #0x30
	0x031DC274 RET
	0x031DC278 STR D10, [X31 - 0x40]!
	0x031DC27C STP D9, D8, [X31 + 0x10]
	0x031DC280 STP X30, X21, [X31 + 0x20]
	0x031DC284 STP X20, X19, [X31 + 0x30]
	0x031DC288 ADRP X20, 0x1200000
	0x031DC28C ADRP X21, 0xF3F000
	0x031DC290 LDRB W8, [X20 + 0xAB]
	0x031DC294 LDR X21, [X21 + 0x780]
	0x031DC298 MOV X19, X0
	0x031DC29C TBNZ X8, 0x0, 0x31DC2D8
	0x031DC2A0 ADRP X0, 0xF3F000
	0x031DC2A4 LDR X0, [X0 + 0x780]
	0x031DC2A8 BL 0x1C16CF4
	0x031DC2AC ADRP X0, 0xF44000
	0x031DC2B0 LDR X0, [X0 + 0x3E8]
	0x031DC2B4 BL 0x1C16CF4
	0x031DC2B8 ADRP X0, 0xF3F000
	0x031DC2BC LDR X0, [X0 + 0x788]
	0x031DC2C0 BL 0x1C16CF4
	0x031DC2C4 ADRP X0, 0xF41000
	0x031DC2C8 LDR X0, [X0 + 0xB70]
	0x031DC2CC BL 0x1C16CF4
	0x031DC2D0 MOVZ W8, 0x1
	0x031DC2D4 STRB W8, [X20 + 0xAB]
	0x031DC2D8 LDR X1, [X21]
	0x031DC2DC MOV X0, X19
	0x031DC2E0 BL 0x31D3650
	0x031DC2E4 CBZ X0, 0x31DC364
	0x031DC2E8 ADRP X8, 0xF3F000
	0x031DC2EC LDR X8, [X8 + 0x788]
	0x031DC2F0 LDR V8, [X0 + 0x28]
	0x031DC2F4 MOV X0, X19
	0x031DC2F8 LDR X1, [X8]
	0x031DC2FC BL 0x31D3650
	0x031DC300 CBZ X0, 0x31DC364
	0x031DC304 ADRP X8, 0xF41000
	0x031DC308 LDR X8, [X8 + 0xB70]
	0x031DC30C LDR V9, [X0 + 0x28]
	0x031DC310 MOV X0, X19
	0x031DC314 LDR X1, [X8]
	0x031DC318 BL 0x31D3650

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x1201000
	009 Move X21, 0xF45000
	010 Move W8, [X20+157]
	011 Move X21, [X21+936]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xF45000
	018 Move X0, [X0+944]
	019 Call 0x1C17CF4
	020 Move X0, 0xF45000
	021 Move X0, [X0+952]
	022 Call 0x1C17CF4
	023 Move X0, 0xF45000
	024 Move X0, [X0+960]
	025 Call 0x1C17CF4
	026 Move X0, 0xF45000
	027 Move X0, [X0+936]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+157], W8
	031 Move X1, [X21]
	032 Move X0, X19
	033 Call Value.get_Item, X0, X1
	034 Compare X0, 0
	035 JumpIfEqual {73}
	036 Move X8, 0xF45000
	037 Move X8, [X8+952]
	038 Move V8, [X0+40]
	039 Move X0, X19
	040 Move X1, [X8]
	041 Call Value.get_Item, X0, X1
	042 Compare X0, 0
	043 JumpIfEqual {73}
	044 Move X8, 0xF45000
	045 Move X8, [X8+960]
	046 Move V9, [X0+40]
	047 Move X0, X19
	048 Move X1, [X8]
	049 Call Value.get_Item, X0, X1
	050 Compare X0, 0
	051 JumpIfEqual {73}
	052 Move X8, 0xF45000
	053 Move X8, [X8+944]
	054 Move V10, [X0+40]
	055 Move X0, X19
	056 Move X1, [X8]
	057 Call Value.get_Item, X0, X1
	058 Compare X0, 0
	059 JumpIfEqual {73}
	060 Move V3, [X0+40]
	061 NotImplemented "Instruction INVALID not yet implemented."
	062 NotImplemented "Instruction INVALID not yet implemented."
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Move D9, [X31+16]
	068 Move D8, [X31+24]
	069 NotImplemented "Instruction INVALID not yet implemented."
	070 NotImplemented "Instruction INVALID not yet implemented."
	071 Move V10, [X31+64]
	072 Return X0
	073 Call 0x1C17F20

Method: System.Void set_Color(UnityEngine.Color value)

Disassembly:
	0x031DC338 CBZ X0, 0x31DC364
	0x031DC33C LDR V3, [X0 + 0x28]
	0x00000000 INVALID
	0x00000000 INVALID
	0x031DC348 LDP X20, X19, [X31 + 0x30]
	0x031DC34C LDP X30, X21, [X31 + 0x20]
	0x031DC350 LDP D9, D8, [X31 + 0x10]
	0x00000000 INVALID
	0x00000000 INVALID
	0x031DC35C LDR V10, [X31], #0x40
	0x031DC360 RET
	0x031DC364 BL 0x1C16F20
	0x031DC368 STP D11, D10, [X31 - 0x60]!
	0x031DC36C STP D9, D8, [X31 + 0x10]
	0x031DC370 STR X30, [X31 + 0x20]
	0x031DC374 STP X24, X23, [X31 + 0x30]
	0x031DC378 STP X22, X21, [X31 + 0x40]
	0x031DC37C STP X20, X19, [X31 + 0x50]
	0x031DC380 ADRP X22, 0x1200000
	0x031DC384 ADRP X21, 0xF43000
	0x031DC388 ADRP X20, 0xF44000
	0x031DC38C LDRB W8, [X22 + 0xAC]
	0x031DC390 LDR X21, [X21 + 0xFD8]
	0x031DC394 LDR X20, [X20 + 0x3C8]
	0x031DC398 MOV V8.16B, V3.16B
	0x031DC39C MOV V9.16B, V2.16B
	0x031DC3A0 MOV V10.16B, V1.16B
	0x031DC3A4 MOV V11.16B, V0.16B
	0x031DC3A8 MOV X19, X0
	0x031DC3AC TBNZ X8, 0x0, 0x31DC40C
	0x031DC3B0 ADRP X0, 0xF43000
	0x031DC3B4 LDR X0, [X0 + 0xFE8]
	0x031DC3B8 BL 0x1C16CF4
	0x031DC3BC ADRP X0, 0xF44000
	0x031DC3C0 LDR X0, [X0 + 0x3C8]
	0x031DC3C4 BL 0x1C16CF4
	0x031DC3C8 ADRP X0, 0xF43000
	0x031DC3CC LDR X0, [X0 + 0xFD8]
	0x031DC3D0 BL 0x1C16CF4
	0x031DC3D4 ADRP X0, 0xF3F000
	0x031DC3D8 LDR X0, [X0 + 0x780]
	0x031DC3DC BL 0x1C16CF4
	0x031DC3E0 ADRP X0, 0xF44000
	0x031DC3E4 LDR X0, [X0 + 0x3E8]
	0x031DC3E8 BL 0x1C16CF4
	0x031DC3EC ADRP X0, 0xF3F000
	0x031DC3F0 LDR X0, [X0 + 0x788]
	0x031DC3F4 BL 0x1C16CF4
	0x031DC3F8 ADRP X0, 0xF41000
	0x031DC3FC LDR X0, [X0 + 0xB70]
	0x031DC400 BL 0x1C16CF4
	0x031DC404 MOVZ W8, 0x1
	0x031DC408 STRB W8, [X22 + 0xAC]
	0x031DC40C ADRP X8, 0xFFFFFFFFFD911000
	0x031DC410 LDR V0, [X8 + 0x4D8]
	0x031DC414 STR D0, [X19 + 0x10]
	0x031DC418 LDR X0, [X21]
	0x031DC41C BL 0x1C16F10
	0x031DC420 LDR X1, [X20]
	0x031DC424 MOV X20, X0
	0x031DC428 BL 0x2AA4804
	0x031DC42C MOV V0.16B, V11.16B
	0x031DC430 BL 0x31D4014
	0x031DC434 CBZ X20, 0x31DC4E8
	0x031DC438 ADRP X8, 0xF3F000
	0x031DC43C ADRP X21, 0xF43000
	0x031DC440 LDR X8, [X8 + 0x780]
	0x031DC444 LDR X21, [X21 + 0xFE8]
	0x031DC448 ADRP X22, 0xF3F000
	0x031DC44C ADRP X23, 0xF41000
	0x031DC450 LDR X1, [X8]
	0x031DC454 LDR X3, [X21]
	0x031DC458 ADRP X24, 0xF44000
	0x031DC45C LDR X22, [X22 + 0x788]
	0x031DC460 LDR X23, [X23 + 0xB70]
	0x031DC464 LDR X24, [X24 + 0x3E8]
	0x031DC468 MOV X2, X0
	0x031DC46C MOV X0, X20
	0x031DC470 BL 0x2AA5098
	0x031DC474 MOV V0.16B, V10.16B
	0x031DC478 BL 0x31D4014
	0x031DC47C LDR X1, [X22]
	0x031DC480 LDR X3, [X21]
	0x031DC484 MOV X2, X0
	0x031DC488 MOV X0, X20
	0x031DC48C BL 0x2AA5098
	0x031DC490 MOV V0.16B, V9.16B
	0x031DC494 BL 0x31D4014
	0x031DC498 LDR X1, [X23]
	0x031DC49C LDR X3, [X21]
	0x031DC4A0 MOV X2, X0
	0x031DC4A4 MOV X0, X20
	0x031DC4A8 BL 0x2AA5098
	0x031DC4AC MOV V0.16B, V8.16B
	0x031DC4B0 BL 0x31D4014
	0x031DC4B4 LDR X1, [X24]
	0x031DC4B8 LDR X3, [X21]

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x1201000
	013 Move X21, 0xF44000
	014 Move X20, 0xF45000
	015 Move W8, [X22+158]
	016 Move X21, [X21+4056]
	017 Move X20, [X20+968]
	018 Move V8, V3
	019 Move V9, V2
	020 Move V10, V1
	021 Move V11, V0
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {50}
	027 Move X0, 0xF44000
	028 Move X0, [X0+4072]
	029 Call 0x1C17CF4
	030 Move X0, 0xF45000
	031 Move X0, [X0+968]
	032 Call 0x1C17CF4
	033 Move X0, 0xF44000
	034 Move X0, [X0+4056]
	035 Call 0x1C17CF4
	036 Move X0, 0xF45000
	037 Move X0, [X0+944]
	038 Call 0x1C17CF4
	039 Move X0, 0xF45000
	040 Move X0, [X0+952]
	041 Call 0x1C17CF4
	042 Move X0, 0xF45000
	043 Move X0, [X0+960]
	044 Call 0x1C17CF4
	045 Move X0, 0xF45000
	046 Move X0, [X0+936]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X22+158], W8
	050 Move X8, -40820736
	051 Move V0, [X8+1784]
	052 Move [X19+16], D0
	053 Move X0, [X21]
	054 Call 0x1C17F10
	055 Move X1, [X20]
	056 Move X20, X0
	057 Call Dictionary`2<Object, Object>..ctor, X0
	058 Move V0, V11
	059 Call Value.op_Implicit, V0
	060 Compare X20, 0
	061 JumpIfEqual {111}
	062 Move X8, 0xF45000
	063 Move X21, 0xF44000
	064 Move X8, [X8+936]
	065 Move X21, [X21+4072]
	066 Move X22, 0xF45000
	067 Move X23, 0xF45000
	068 Move X1, [X8]
	069 Move X3, [X21]
	070 Move X24, 0xF45000
	071 Move X22, [X22+952]
	072 Move X23, [X23+960]
	073 Move X24, [X24+944]
	074 Move X2, X0
	075 Move X0, X20
	076 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	077 Move V0, V10
	078 Call Value.op_Implicit, V0
	079 Move X1, [X22]
	080 Move X3, [X21]
	081 Move X2, X0
	082 Move X0, X20
	083 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	084 Move V0, V9
	085 Call Value.op_Implicit, V0
	086 Move X1, [X23]
	087 Move X3, [X21]
	088 Move X2, X0
	089 Move X0, X20
	090 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	091 Move V0, V8
	092 Call Value.op_Implicit, V0
	093 Move X1, [X24]
	094 Move X3, [X21]
	095 Move X2, X0
	096 Move X0, X20
	097 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	098 Move [X19+64], X20
	099 Move X20, [X31+80]
	100 Move X19, [X31+88]
	101 Move X22, [X31+64]
	102 Move X21, [X31+72]
	103 Move X24, [X31+48]
	104 Move X23, [X31+56]
	105 Move X30, [X31+32]
	106 Move D9, [X31+16]
	107 Move D8, [X31+24]
	108 Move D11, [X31+96]
	109 Move D10, [X31+104]
	110 Return 
	111 Call 0x1C17F20

Method: UnityEngine.Color32 get_Color32()

Disassembly:
	0x031DC4BC MOV X2, X0
	0x031DC4C0 MOV X0, X20
	0x031DC4C4 BL 0x2AA5098
	0x031DC4C8 STR X20, [X19 + 0x40]
	0x031DC4CC LDP X20, X19, [X31 + 0x50]
	0x031DC4D0 LDP X22, X21, [X31 + 0x40]
	0x031DC4D4 LDP X24, X23, [X31 + 0x30]
	0x031DC4D8 LDR X30, [X31 + 0x20]
	0x031DC4DC LDP D9, D8, [X31 + 0x10]
	0x031DC4E0 LDP D11, D10, [X31], #0x60
	0x031DC4E4 RET
	0x031DC4E8 BL 0x1C16F20
	0x031DC4EC STR X30, [X31 - 0x50]!
	0x031DC4F0 STP X26, X25, [X31 + 0x10]
	0x031DC4F4 STP X24, X23, [X31 + 0x20]
	0x031DC4F8 STP X22, X21, [X31 + 0x30]
	0x031DC4FC STP X20, X19, [X31 + 0x40]
	0x031DC500 ADRP X26, 0x1200000
	0x031DC504 ADRP X25, 0xF43000
	0x031DC508 ADRP X22, 0xF43000
	0x031DC50C ADRP X24, 0xF43000
	0x031DC510 ADRP X23, 0xF43000
	0x031DC514 LDRB W8, [X26 + 0xAE]
	0x031DC518 LDR X25, [X25 + 0xFC8]
	0x031DC51C LDR X22, [X22 + 0xFD0]
	0x031DC520 LDR X24, [X24 + 0xFD8]
	0x031DC524 LDR X23, [X23 + 0xFE0]
	0x031DC528 MOV W19, W2
	0x031DC52C MOV W21, W1
	0x031DC530 MOV X20, X0
	0x031DC534 TBNZ X8, 0x0, 0x31DC570
	0x031DC538 ADRP X0, 0xF43000
	0x031DC53C LDR X0, [X0 + 0xFE0]
	0x031DC540 BL 0x1C16CF4
	0x031DC544 ADRP X0, 0xF43000
	0x031DC548 LDR X0, [X0 + 0xFD8]
	0x031DC54C BL 0x1C16CF4
	0x031DC550 ADRP X0, 0xF43000
	0x031DC554 LDR X0, [X0 + 0xFD0]
	0x031DC558 BL 0x1C16CF4
	0x031DC55C ADRP X0, 0xF43000
	0x031DC560 LDR X0, [X0 + 0xFC8]
	0x031DC564 BL 0x1C16CF4
	0x031DC568 MOVZ W8, 0x1
	0x031DC56C STRB W8, [X26 + 0xAE]
	0x031DC570 MOVZ W8, 0x6
	0x031DC574 STR W8, [X20 + 0x10]
	0x031DC578 LDR X0, [X25]
	0x031DC57C BL 0x1C16F10
	0x031DC580 LDR X2, [X22]
	0x031DC584 MOVZ W1, 0x32
	0x031DC588 MOV X22, X0
	0x031DC58C BL 0x301B830
	0x031DC590 STR X22, [X20 + 0x30]
	0x031DC594 LDR X0, [X24]
	0x031DC598 BL 0x1C16F10
	0x031DC59C LDR X2, [X23]
	0x031DC5A0 MOVZ W1, 0x5
	0x031DC5A4 MOV X22, X0
	0x031DC5A8 BL 0x2AA481C
	0x031DC5AC MOV X0, X20
	0x031DC5B0 MOV X1, X31
	0x031DC5B4 STR X22, [X20 + 0x40]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x1201000
	009 Move X21, 0xF45000
	010 Move W8, [X20+159]
	011 Move X21, [X21+936]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xF45000
	018 Move X0, [X0+944]
	019 Call 0x1C17CF4
	020 Move X0, 0xF45000
	021 Move X0, [X0+952]
	022 Call 0x1C17CF4
	023 Move X0, 0xF45000
	024 Move X0, [X0+960]
	025 Call 0x1C17CF4
	026 Move X0, 0xF45000
	027 Move X0, [X0+936]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+159], W8
	031 Move X1, [X21]
	032 Move X0, X19
	033 Call Value.get_Item, X0, X1
	034 Compare X0, 0
	035 JumpIfEqual {76}
	036 Move X8, 0xF45000
	037 Move X8, [X8+952]
	038 Move V8, [X0+40]
	039 Move X0, X19
	040 Move X1, [X8]
	041 Call Value.get_Item, X0, X1
	042 Compare X0, 0
	043 JumpIfEqual {76}
	044 Move X8, 0xF45000
	045 Move X8, [X8+960]
	046 Move V9, [X0+40]
	047 Move X0, X19
	048 Move X1, [X8]
	049 Call Value.get_Item, X0, X1
	050 Compare X0, 0
	051 JumpIfEqual {76}
	052 Move X8, 0xF45000
	053 Move X8, [X8+944]
	054 Move V10, [X0+40]
	055 Move X0, X19
	056 Move X1, [X8]
	057 Call Value.get_Item, X0, X1
	058 Compare X0, 0
	059 JumpIfEqual {76}
	060 Move V3, [X0+40]
	061 NotImplemented "Instruction INVALID not yet implemented."
	062 NotImplemented "Instruction INVALID not yet implemented."
	063 NotImplemented "Instruction INVALID not yet implemented."
	064 NotImplemented "Instruction INVALID not yet implemented."
	065 Move X0, X31
	066 Call 0x1E44664
	067 Move X20, [X31+48]
	068 Move X19, [X31+56]
	069 Move X30, [X31+32]
	070 Move X21, [X31+40]
	071 Move D9, [X31+16]
	072 Move D8, [X31+24]
	073 And X0, X0, 0
	074 Move V10, [X31+64]
	075 Return X0
	076 Call 0x1C17F20

Method: System.Void set_Color32(UnityEngine.Color32 value)

Disassembly:
	0x031DC5B8 BL 0x33BDD8C
	0x031DC5BC STP W21, W19, [X20 + 0x10]
	0x031DC5C0 LDP X20, X19, [X31 + 0x40]
	0x031DC5C4 LDP X22, X21, [X31 + 0x30]
	0x031DC5C8 LDP X24, X23, [X31 + 0x20]
	0x031DC5CC LDP X26, X25, [X31 + 0x10]
	0x031DC5D0 LDR X30, [X31], #0x50
	0x031DC5D4 RET
	0x031DC5D8 STP X30, X25, [X31 - 0x40]!
	0x031DC5DC STP X24, X23, [X31 + 0x10]
	0x031DC5E0 STP X22, X21, [X31 + 0x20]
	0x031DC5E4 STP X20, X19, [X31 + 0x30]
	0x031DC5E8 ADRP X25, 0x1200000
	0x031DC5EC ADRP X24, 0xF43000
	0x031DC5F0 ADRP X21, 0xF43000
	0x031DC5F4 ADRP X23, 0xF43000
	0x031DC5F8 ADRP X22, 0xF43000
	0x031DC5FC LDRB W8, [X25 + 0xAF]
	0x031DC600 LDR X24, [X24 + 0xFC8]
	0x031DC604 LDR X21, [X21 + 0xFD0]
	0x031DC608 LDR X23, [X23 + 0xFD8]
	0x031DC60C LDR X22, [X22 + 0xFE0]
	0x031DC610 MOV X19, X1
	0x031DC614 MOV X20, X0
	0x031DC618 TBNZ X8, 0x0, 0x31DC654
	0x031DC61C ADRP X0, 0xF43000
	0x031DC620 LDR X0, [X0 + 0xFE0]
	0x031DC624 BL 0x1C16CF4
	0x031DC628 ADRP X0, 0xF43000
	0x031DC62C LDR X0, [X0 + 0xFD8]
	0x031DC630 BL 0x1C16CF4
	0x031DC634 ADRP X0, 0xF43000
	0x031DC638 LDR X0, [X0 + 0xFD0]
	0x031DC63C BL 0x1C16CF4
	0x031DC640 ADRP X0, 0xF43000
	0x031DC644 LDR X0, [X0 + 0xFC8]
	0x031DC648 BL 0x1C16CF4
	0x031DC64C MOVZ W8, 0x1
	0x031DC650 STRB W8, [X25 + 0xAF]
	0x031DC654 MOVZ W8, 0x6
	0x031DC658 STR W8, [X20 + 0x10]
	0x031DC65C LDR X0, [X24]
	0x031DC660 BL 0x1C16F10
	0x031DC664 LDR X2, [X21]
	0x031DC668 MOVZ W1, 0x32
	0x031DC66C MOV X21, X0
	0x031DC670 BL 0x301B830
	0x031DC674 STR X21, [X20 + 0x30]
	0x031DC678 LDR X0, [X23]
	0x031DC67C BL 0x1C16F10
	0x031DC680 LDR X2, [X22]
	0x031DC684 MOVZ W1, 0x5
	0x031DC688 MOV X21, X0
	0x031DC68C BL 0x2AA481C
	0x031DC690 MOV X0, X20
	0x031DC694 MOV X1, X31
	0x031DC698 STR X21, [X20 + 0x40]
	0x031DC69C BL 0x33BDD8C
	0x031DC6A0 ADRP X8, 0xFFFFFFFFFD911000
	0x031DC6A4 LDR V0, [X8 + 0xA18]
	0x031DC6A8 STR X19, [X20 + 0x18]
	0x031DC6AC LDP X22, X21, [X31 + 0x20]
	0x031DC6B0 LDP X24, X23, [X31 + 0x10]
	0x031DC6B4 STR D0, [X20 + 0x10]
	0x031DC6B8 LDP X20, X19, [X31 + 0x30]
	0x031DC6BC LDP X30, X25, [X31], #0x40
	0x031DC6C0 RET
	0x031DC6C4 STP X30, X25, [X31 - 0x40]!
	0x031DC6C8 STP X24, X23, [X31 + 0x10]
	0x031DC6CC STP X22, X21, [X31 + 0x20]
	0x031DC6D0 STP X20, X19, [X31 + 0x30]
	0x031DC6D4 ADRP X25, 0x1200000
	0x031DC6D8 ADRP X24, 0xF43000
	0x031DC6DC ADRP X21, 0xF43000
	0x031DC6E0 ADRP X23, 0xF43000
	0x031DC6E4 ADRP X22, 0xF43000
	0x031DC6E8 LDRB W8, [X25 + 0xB0]
	0x031DC6EC LDR X24, [X24 + 0xFC8]
	0x031DC6F0 LDR X21, [X21 + 0xFD0]
	0x031DC6F4 LDR X23, [X23 + 0xFD8]
	0x031DC6F8 LDR X22, [X22 + 0xFE0]
	0x031DC6FC MOV W20, W1
	0x031DC700 MOV X19, X0
	0x031DC704 TBNZ X8, 0x0, 0x31DC740
	0x031DC708 ADRP X0, 0xF43000
	0x031DC70C LDR X0, [X0 + 0xFE0]
	0x031DC710 BL 0x1C16CF4
	0x031DC714 ADRP X0, 0xF43000
	0x031DC718 LDR X0, [X0 + 0xFD8]
	0x031DC71C BL 0x1C16CF4
	0x031DC720 ADRP X0, 0xF43000
	0x031DC724 LDR X0, [X0 + 0xFD0]
	0x031DC728 BL 0x1C16CF4
	0x031DC72C ADRP X0, 0xF43000
	0x031DC730 LDR X0, [X0 + 0xFC8]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X23, 0x1201000
	012 Move X22, 0xF44000
	013 Move X21, 0xF45000
	014 Move W8, [X23+160]
	015 Move X22, [X22+4056]
	016 Move X21, [X21+968]
	017 Move X20, X1
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {46}
	023 Move X0, 0xF44000
	024 Move X0, [X0+4072]
	025 Call 0x1C17CF4
	026 Move X0, 0xF45000
	027 Move X0, [X0+968]
	028 Call 0x1C17CF4
	029 Move X0, 0xF44000
	030 Move X0, [X0+4056]
	031 Call 0x1C17CF4
	032 Move X0, 0xF45000
	033 Move X0, [X0+944]
	034 Call 0x1C17CF4
	035 Move X0, 0xF45000
	036 Move X0, [X0+952]
	037 Call 0x1C17CF4
	038 Move X0, 0xF45000
	039 Move X0, [X0+960]
	040 Call 0x1C17CF4
	041 Move X0, 0xF45000
	042 Move X0, [X0+936]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X23+160], W8
	046 Move X8, -40820736
	047 Move V0, [X8+1784]
	048 Move [X19+16], D0
	049 Move X0, [X22]
	050 Call 0x1C17F10
	051 Move X1, [X21]
	052 Move X21, X0
	053 Call Dictionary`2<Object, Object>..ctor, X0
	054 Move W0, W20
	055 Call Value.op_Implicit, X0
	056 Compare X21, 0
	057 JumpIfEqual {115}
	058 Move X8, 0xF45000
	059 Move X24, 0xF44000
	060 Move X8, [X8+936]
	061 Move X24, [X24+4072]
	062 Move X25, 0xF45000
	063 Move X26, 0xF45000
	064 Move X27, 0xF45000
	065 Move X25, [X25+952]
	066 Move X26, [X26+960]
	067 Move X27, [X27+944]
	068 Move X1, [X8]
	069 Move X3, [X24]
	070 Move X2, X0
	071 Move X0, X21
	072 Move X22, X20
	073 ShiftRight X22, 8
	074 And X22, X22, 0x7FFFFFFF
	075 Move X23, X20
	076 ShiftRight X23, 16
	077 And X23, X23, 0x7FFFFFFF
	078 Move X20, X20
	079 ShiftRight X20, 24
	080 And X20, X20, 0x7FFFFFFF
	081 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	082 Move W0, W22
	083 Call Value.op_Implicit, X0
	084 Move X1, [X25]
	085 Move X3, [X24]
	086 Move X2, X0
	087 Move X0, X21
	088 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	089 Move W0, W23
	090 Call Value.op_Implicit, X0
	091 Move X1, [X26]
	092 Move X3, [X24]
	093 Move X2, X0
	094 Move X0, X21
	095 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	096 Move W0, W20
	097 Call Value.op_Implicit, X0
	098 Move X1, [X27]
	099 Move X3, [X24]
	100 Move X2, X0
	101 Move X0, X21
	102 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	103 Move [X19+64], X21
	104 Move X20, [X31+64]
	105 Move X19, [X31+72]
	106 Move X22, [X31+48]
	107 Move X21, [X31+56]
	108 Move X24, [X31+32]
	109 Move X23, [X31+40]
	110 Move X26, [X31+16]
	111 Move X25, [X31+24]
	112 Move X30, [X31+80]
	113 Move X27, [X31+88]
	114 Return 
	115 Call 0x1C17F20

Method: UnityEngine.Vector2 get_Vector2()

Disassembly:
	0x031DC790 LDR V0, [X8 + 0x798]
	0x031DC794 AND W8, W20, 0x1
	0x031DC798 STRB W8, [X19 + 0x20]
	0x031DC79C LDP X22, X21, [X31 + 0x20]
	0x031DC7A0 STR D0, [X19 + 0x10]
	0x031DC7A4 LDP X20, X19, [X31 + 0x30]
	0x031DC7A8 LDP X24, X23, [X31 + 0x10]
	0x031DC7AC LDP X30, X25, [X31], #0x40
	0x031DC7B0 RET
	0x031DC7B4 STR D8, [X31 - 0x40]!
	0x031DC7B8 STR X30, [X31 + 0x8]
	0x031DC7BC STP X24, X23, [X31 + 0x10]
	0x031DC7C0 STP X22, X21, [X31 + 0x20]
	0x031DC7C4 STP X20, X19, [X31 + 0x30]
	0x031DC7C8 ADRP X24, 0x1200000
	0x031DC7CC ADRP X23, 0xF43000
	0x031DC7D0 ADRP X20, 0xF43000
	0x031DC7D4 ADRP X22, 0xF43000
	0x031DC7D8 ADRP X21, 0xF43000
	0x031DC7DC LDRB W8, [X24 + 0xB1]
	0x031DC7E0 LDR X23, [X23 + 0xFC8]
	0x031DC7E4 LDR X20, [X20 + 0xFD0]
	0x031DC7E8 LDR X22, [X22 + 0xFD8]
	0x031DC7EC LDR X21, [X21 + 0xFE0]
	0x031DC7F0 MOV V8.16B, V0.16B
	0x031DC7F4 MOV X19, X0
	0x031DC7F8 TBNZ X8, 0x0, 0x31DC834
	0x031DC7FC ADRP X0, 0xF43000
	0x031DC800 LDR X0, [X0 + 0xFE0]
	0x031DC804 BL 0x1C16CF4
	0x031DC808 ADRP X0, 0xF43000
	0x031DC80C LDR X0, [X0 + 0xFD8]
	0x031DC810 BL 0x1C16CF4
	0x031DC814 ADRP X0, 0xF43000
	0x031DC818 LDR X0, [X0 + 0xFD0]
	0x031DC81C BL 0x1C16CF4

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1201000
	007 Move X21, 0xF40000
	008 Move W8, [X20+161]
	009 Move X21, [X21+1920]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xF40000
	016 Move X0, [X0+1920]
	017 Call 0x1C17CF4
	018 Move X0, 0xF40000
	019 Move X0, [X0+1928]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+161], W8
	023 Move X1, [X21]
	024 Move X0, X19
	025 Call Value.get_Item, X0, X1
	026 Compare X0, 0
	027 JumpIfEqual {45}
	028 Move X8, 0xF40000
	029 Move X8, [X8+1928]
	030 Move V8, [X0+40]
	031 Move X0, X19
	032 Move X1, [X8]
	033 Call Value.get_Item, X0, X1
	034 Compare X0, 0
	035 JumpIfEqual {45}
	036 Move V1, [X0+40]
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 NotImplemented "Instruction INVALID not yet implemented."
	042 NotImplemented "Instruction INVALID not yet implemented."
	043 Move V8, [X31+48]
	044 Return X0
	045 Call 0x1C17F20

Method: System.Void set_Vector2(UnityEngine.Vector2 value)

Disassembly:
	0x031DC820 ADRP X0, 0xF43000
	0x031DC824 LDR X0, [X0 + 0xFC8]
	0x031DC828 BL 0x1C16CF4
	0x031DC82C MOVZ W8, 0x1
	0x031DC830 STRB W8, [X24 + 0xB1]
	0x031DC834 MOVZ W8, 0x6
	0x031DC838 STR W8, [X19 + 0x10]
	0x031DC83C LDR X0, [X23]
	0x031DC840 BL 0x1C16F10
	0x031DC844 LDR X2, [X20]
	0x031DC848 MOVZ W1, 0x32
	0x031DC84C MOV X20, X0
	0x031DC850 BL 0x301B830
	0x031DC854 STR X20, [X19 + 0x30]
	0x031DC858 LDR X0, [X22]
	0x031DC85C BL 0x1C16F10
	0x031DC860 LDR X2, [X21]
	0x031DC864 MOVZ W1, 0x5
	0x031DC868 MOV X20, X0
	0x031DC86C BL 0x2AA481C
	0x031DC870 MOV X0, X19
	0x031DC874 MOV X1, X31
	0x031DC878 STR X20, [X19 + 0x40]
	0x031DC87C BL 0x33BDD8C
	0x031DC880 ADRP X8, 0xFFFFFFFFFD911000
	0x031DC884 LDR V0, [X8 + 0x3C8]
	0x031DC888 STR D8, [X19 + 0x28]
	0x031DC88C LDP X22, X21, [X31 + 0x20]
	0x031DC890 LDP X24, X23, [X31 + 0x10]
	0x031DC894 STR D0, [X19 + 0x10]
	0x031DC898 LDP X20, X19, [X31 + 0x30]
	0x031DC89C LDR X30, [X31 + 0x8]
	0x031DC8A0 LDR V8, [X31], #0x40
	0x031DC8A4 RET
	0x031DC8A8 STP X30, X25, [X31 - 0x40]!
	0x031DC8AC STP X24, X23, [X31 + 0x10]
	0x031DC8B0 STP X22, X21, [X31 + 0x20]
	0x031DC8B4 STP X20, X19, [X31 + 0x30]
	0x031DC8B8 ADRP X25, 0x1200000
	0x031DC8BC ADRP X24, 0xF43000
	0x031DC8C0 ADRP X21, 0xF43000
	0x031DC8C4 ADRP X23, 0xF43000
	0x031DC8C8 ADRP X22, 0xF43000
	0x031DC8CC LDRB W8, [X25 + 0xB2]
	0x031DC8D0 LDR X24, [X24 + 0xFC8]
	0x031DC8D4 LDR X21, [X21 + 0xFD0]
	0x031DC8D8 LDR X23, [X23 + 0xFD8]
	0x031DC8DC LDR X22, [X22 + 0xFE0]
	0x031DC8E0 MOV X19, X1
	0x031DC8E4 MOV X20, X0
	0x031DC8E8 TBNZ X8, 0x0, 0x31DC924
	0x031DC8EC ADRP X0, 0xF43000
	0x031DC8F0 LDR X0, [X0 + 0xFE0]
	0x031DC8F4 BL 0x1C16CF4
	0x031DC8F8 ADRP X0, 0xF43000
	0x031DC8FC LDR X0, [X0 + 0xFD8]
	0x031DC900 BL 0x1C16CF4
	0x031DC904 ADRP X0, 0xF43000
	0x031DC908 LDR X0, [X0 + 0xFD0]
	0x031DC90C BL 0x1C16CF4
	0x031DC910 ADRP X0, 0xF43000
	0x031DC914 LDR X0, [X0 + 0xFC8]
	0x031DC918 BL 0x1C16CF4
	0x031DC91C MOVZ W8, 0x1
	0x031DC920 STRB W8, [X25 + 0xB2]
	0x031DC924 MOVZ W8, 0x6
	0x031DC928 STR W8, [X20 + 0x10]

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x1201000
	009 Move X21, 0xF44000
	010 Move X20, 0xF45000
	011 Move W8, [X22+162]
	012 Move X21, [X21+4056]
	013 Move X20, [X20+968]
	014 Move V8, V1
	015 Move V9, V0
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {38}
	021 Move X0, 0xF44000
	022 Move X0, [X0+4072]
	023 Call 0x1C17CF4
	024 Move X0, 0xF45000
	025 Move X0, [X0+968]
	026 Call 0x1C17CF4
	027 Move X0, 0xF44000
	028 Move X0, [X0+4056]
	029 Call 0x1C17CF4
	030 Move X0, 0xF40000
	031 Move X0, [X0+1920]
	032 Call 0x1C17CF4
	033 Move X0, 0xF40000
	034 Move X0, [X0+1928]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X22+162], W8
	038 Move X8, -40820736
	039 Move V0, [X8+2448]
	040 Move [X19+16], D0
	041 Move X0, [X21]
	042 Call 0x1C17F10
	043 Move X1, [X20]
	044 Move X20, X0
	045 Call Dictionary`2<Object, Object>..ctor, X0
	046 Move V0, V9
	047 Call Value.op_Implicit, V0
	048 Compare X20, 0
	049 JumpIfEqual {77}
	050 Move X8, 0xF40000
	051 Move X21, 0xF44000
	052 Move X8, [X8+1920]
	053 Move X21, [X21+4072]
	054 Move X22, 0xF40000
	055 Move X2, X0
	056 Move X1, [X8]
	057 Move X3, [X21]
	058 Move X22, [X22+1928]
	059 Move X0, X20
	060 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	061 Move V0, V8
	062 Call Value.op_Implicit, V0
	063 Move X1, [X22]
	064 Move X3, [X21]
	065 Move X2, X0
	066 Move X0, X20
	067 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	068 Move [X19+64], X20
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X30, [X31+16]
	074 Move D9, [X31+64]
	075 Move D8, [X31+72]
	076 Return 
	077 Call 0x1C17F20

Method: UnityEngine.Vector3 get_Vector3()

Disassembly:
	0x031DC92C LDR X0, [X24]
	0x031DC930 BL 0x1C16F10
	0x031DC934 LDR X2, [X21]
	0x031DC938 MOVZ W1, 0x32
	0x031DC93C MOV X21, X0
	0x031DC940 BL 0x301B830
	0x031DC944 STR X21, [X20 + 0x30]
	0x031DC948 LDR X0, [X23]
	0x031DC94C BL 0x1C16F10
	0x031DC950 LDR X2, [X22]
	0x031DC954 MOVZ W1, 0x5
	0x031DC958 MOV X21, X0
	0x031DC95C BL 0x2AA481C
	0x031DC960 MOV X0, X20
	0x031DC964 MOV X1, X31
	0x031DC968 STR X21, [X20 + 0x40]
	0x031DC96C BL 0x33BDD8C
	0x031DC970 MOV X0, X20
	0x031DC974 MOV X1, X19
	0x031DC978 LDP X20, X19, [X31 + 0x30]
	0x031DC97C LDP X22, X21, [X31 + 0x20]
	0x031DC980 LDP X24, X23, [X31 + 0x10]
	0x031DC984 LDP X30, X25, [X31], #0x40
	0x031DC988 B 0x31DAEF0
	0x031DC98C SUB X31, X31, 0x60
	0x031DC990 STR X30, [X31 + 0x10]
	0x031DC994 STP X26, X25, [X31 + 0x20]
	0x031DC998 STP X24, X23, [X31 + 0x30]
	0x031DC99C STP X22, X21, [X31 + 0x40]
	0x031DC9A0 STP X20, X19, [X31 + 0x50]
	0x031DC9A4 ADRP X26, 0x1200000
	0x031DC9A8 ADRP X25, 0xF43000
	0x031DC9AC ADRP X22, 0xF43000
	0x031DC9B0 ADRP X24, 0xF43000
	0x031DC9B4 ADRP X23, 0xF43000
	0x031DC9B8 LDRB W8, [X26 + 0xB3]
	0x031DC9BC LDR X25, [X25 + 0xFC8]
	0x031DC9C0 LDR X22, [X22 + 0xFD0]
	0x031DC9C4 LDR X24, [X24 + 0xFD8]
	0x031DC9C8 LDR X23, [X23 + 0xFE0]
	0x031DC9CC MOV X20, X2
	0x031DC9D0 MOV X21, X1
	0x031DC9D4 MOV X19, X0
	0x031DC9D8 TBNZ X8, 0x0, 0x31DCA14
	0x031DC9DC ADRP X0, 0xF43000
	0x031DC9E0 LDR X0, [X0 + 0xFE0]
	0x031DC9E4 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x1201000
	008 Move X21, 0xF40000
	009 Move W8, [X20+163]
	010 Move X21, [X21+1920]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xF40000
	017 Move X0, [X0+1920]
	018 Call 0x1C17CF4
	019 Move X0, 0xF40000
	020 Move X0, [X0+1928]
	021 Call 0x1C17CF4
	022 Move X0, 0xF45000
	023 Move X0, [X0+976]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+163], W8
	027 Move X1, [X21]
	028 Move X0, X19
	029 Call Value.get_Item, X0, X1
	030 Compare X0, 0
	031 JumpIfEqual {59}
	032 Move X8, 0xF40000
	033 Move X8, [X8+1928]
	034 Move V8, [X0+40]
	035 Move X0, X19
	036 Move X1, [X8]
	037 Call Value.get_Item, X0, X1
	038 Compare X0, 0
	039 JumpIfEqual {59}
	040 Move X8, 0xF45000
	041 Move X8, [X8+976]
	042 Move V9, [X0+40]
	043 Move X0, X19
	044 Move X1, [X8]
	045 Call Value.get_Item, X0, X1
	046 Compare X0, 0
	047 JumpIfEqual {59}
	048 Move V2, [X0+40]
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X30, [X31+16]
	052 Move X21, [X31+24]
	053 NotImplemented "Instruction INVALID not yet implemented."
	054 NotImplemented "Instruction INVALID not yet implemented."
	055 NotImplemented "Instruction INVALID not yet implemented."
	056 Move D9, [X31+48]
	057 Move D8, [X31+56]
	058 Return X0
	059 Call 0x1C17F20

Method: System.Void set_Vector3(UnityEngine.Vector3 value)

Disassembly:
	0x031DC9E8 ADRP X0, 0xF43000
	0x031DC9EC LDR X0, [X0 + 0xFD8]
	0x031DC9F0 BL 0x1C16CF4
	0x031DC9F4 ADRP X0, 0xF43000
	0x031DC9F8 LDR X0, [X0 + 0xFD0]
	0x031DC9FC BL 0x1C16CF4
	0x031DCA00 ADRP X0, 0xF43000
	0x031DCA04 LDR X0, [X0 + 0xFC8]
	0x031DCA08 BL 0x1C16CF4
	0x031DCA0C MOVZ W8, 0x1
	0x031DCA10 STRB W8, [X26 + 0xB3]
	0x031DCA14 MOVZ W8, 0x6
	0x031DCA18 STR W8, [X19 + 0x10]
	0x031DCA1C LDR X0, [X25]
	0x031DCA20 BL 0x1C16F10
	0x031DCA24 LDR X2, [X22]
	0x031DCA28 MOVZ W1, 0x32
	0x031DCA2C MOV X22, X0
	0x031DCA30 BL 0x301B830
	0x031DCA34 STR X22, [X19 + 0x30]
	0x031DCA38 LDR X0, [X24]
	0x031DCA3C BL 0x1C16F10
	0x031DCA40 LDR X2, [X23]
	0x031DCA44 MOVZ W1, 0x5
	0x031DCA48 MOV X22, X0
	0x031DCA4C BL 0x2AA481C
	0x031DCA50 MOV X0, X19
	0x031DCA54 MOV X1, X31
	0x031DCA58 STR X22, [X19 + 0x40]
	0x031DCA5C BL 0x33BDD8C
	0x031DCA60 ADRP X8, 0xFFFFFFFFFD911000
	0x031DCA64 LDR V0, [X8 + 0xED8]
	0x031DCA68 ADD X0, X31, 0x0
	0x031DCA6C MOV X1, X31
	0x031DCA70 STP X21, X20, [X31]
	0x031DCA74 STR D0, [X19 + 0x10]
	0x031DCA78 BL 0x337866C
	0x031DCA7C STR X0, [X19 + 0x18]
	0x031DCA80 LDP X20, X19, [X31 + 0x50]
	0x031DCA84 LDP X22, X21, [X31 + 0x40]
	0x031DCA88 LDP X24, X23, [X31 + 0x30]
	0x031DCA8C LDP X26, X25, [X31 + 0x20]
	0x031DCA90 LDR X30, [X31 + 0x10]
	0x031DCA94 ADD X31, X31, 0x60
	0x031DCA98 RET
	0x031DCA9C STP X30, X25, [X31 - 0x40]!
	0x031DCAA0 STP X24, X23, [X31 + 0x10]
	0x031DCAA4 STP X22, X21, [X31 + 0x20]
	0x031DCAA8 STP X20, X19, [X31 + 0x30]
	0x031DCAAC ADRP X25, 0x1200000
	0x031DCAB0 ADRP X24, 0xF43000
	0x031DCAB4 ADRP X21, 0xF43000
	0x031DCAB8 ADRP X23, 0xF43000
	0x031DCABC ADRP X22, 0xF43000
	0x031DCAC0 LDRB W8, [X25 + 0xB4]
	0x031DCAC4 LDR X24, [X24 + 0xFC8]
	0x031DCAC8 LDR X21, [X21 + 0xFD0]
	0x031DCACC LDR X23, [X23 + 0xFD8]
	0x031DCAD0 LDR X22, [X22 + 0xFE0]
	0x031DCAD4 MOV X19, X1
	0x031DCAD8 MOV X20, X0
	0x031DCADC TBNZ X8, 0x0, 0x31DCB18
	0x031DCAE0 ADRP X0, 0xF43000
	0x031DCAE4 LDR X0, [X0 + 0xFE0]
	0x031DCAE8 BL 0x1C16CF4
	0x031DCAEC ADRP X0, 0xF43000
	0x031DCAF0 LDR X0, [X0 + 0xFD8]
	0x031DCAF4 BL 0x1C16CF4
	0x031DCAF8 ADRP X0, 0xF43000
	0x031DCAFC LDR X0, [X0 + 0xFD0]
	0x031DCB00 BL 0x1C16CF4
	0x031DCB04 ADRP X0, 0xF43000
	0x031DCB08 LDR X0, [X0 + 0xFC8]
	0x031DCB0C BL 0x1C16CF4
	0x031DCB10 MOVZ W8, 0x1
	0x031DCB14 STRB W8, [X25 + 0xB4]
	0x031DCB18 MOVZ W8, 0x6
	0x031DCB1C STR W8, [X20 + 0x10]
	0x031DCB20 LDR X0, [X24]
	0x031DCB24 BL 0x1C16F10
	0x031DCB28 LDR X2, [X21]
	0x031DCB2C MOVZ W1, 0x32

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x1201000
	011 Move X21, 0xF44000
	012 Move X20, 0xF45000
	013 Move W8, [X22+164]
	014 Move X21, [X21+4056]
	015 Move X20, [X20+968]
	016 Move V8, V2
	017 Move V9, V1
	018 Move V10, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {44}
	024 Move X0, 0xF44000
	025 Move X0, [X0+4072]
	026 Call 0x1C17CF4
	027 Move X0, 0xF45000
	028 Move X0, [X0+968]
	029 Call 0x1C17CF4
	030 Move X0, 0xF44000
	031 Move X0, [X0+4056]
	032 Call 0x1C17CF4
	033 Move X0, 0xF40000
	034 Move X0, [X0+1920]
	035 Call 0x1C17CF4
	036 Move X0, 0xF40000
	037 Move X0, [X0+1928]
	038 Call 0x1C17CF4
	039 Move X0, 0xF45000
	040 Move X0, [X0+976]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X22+164], W8
	044 Move X8, -40820736
	045 Move V0, [X8+2448]
	046 Move [X19+16], D0
	047 Move X0, [X21]
	048 Call 0x1C17F10
	049 Move X1, [X20]
	050 Move X20, X0
	051 Call Dictionary`2<Object, Object>..ctor, X0
	052 Move V0, V10
	053 Call Value.op_Implicit, V0
	054 Compare X20, 0
	055 JumpIfEqual {94}
	056 Move X8, 0xF40000
	057 Move X21, 0xF44000
	058 Move X8, [X8+1920]
	059 Move X21, [X21+4072]
	060 Move X22, 0xF40000
	061 Move X23, 0xF45000
	062 Move X1, [X8]
	063 Move X3, [X21]
	064 Move X22, [X22+1928]
	065 Move X23, [X23+976]
	066 Move X2, X0
	067 Move X0, X20
	068 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	069 Move V0, V9
	070 Call Value.op_Implicit, V0
	071 Move X1, [X22]
	072 Move X3, [X21]
	073 Move X2, X0
	074 Move X0, X20
	075 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	076 Move V0, V8
	077 Call Value.op_Implicit, V0
	078 Move X1, [X23]
	079 Move X3, [X21]
	080 Move X2, X0
	081 Move X0, X20
	082 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	083 Move [X19+64], X20
	084 Move X20, [X31+64]
	085 Move X19, [X31+72]
	086 Move X22, [X31+48]
	087 Move X21, [X31+56]
	088 Move X30, [X31+32]
	089 Move X23, [X31+40]
	090 Move D9, [X31+16]
	091 Move D8, [X31+24]
	092 Move V10, [X31+80]
	093 Return 
	094 Call 0x1C17F20

Method: UnityEngine.Vector4 get_Vector4()

Disassembly:
	0x031DCB30 MOV X21, X0
	0x031DCB34 BL 0x301B830
	0x031DCB38 STR X21, [X20 + 0x30]
	0x031DCB3C LDR X0, [X23]
	0x031DCB40 BL 0x1C16F10
	0x031DCB44 LDR X2, [X22]
	0x031DCB48 MOVZ W1, 0x5
	0x031DCB4C MOV X21, X0
	0x031DCB50 BL 0x2AA481C
	0x031DCB54 MOV X0, X20
	0x031DCB58 MOV X1, X31
	0x031DCB5C STR X21, [X20 + 0x40]
	0x031DCB60 BL 0x33BDD8C
	0x031DCB64 MOV X0, X20
	0x031DCB68 MOV X1, X19
	0x031DCB6C LDP X20, X19, [X31 + 0x30]
	0x031DCB70 LDP X22, X21, [X31 + 0x20]
	0x031DCB74 LDP X24, X23, [X31 + 0x10]
	0x031DCB78 LDP X30, X25, [X31], #0x40
	0x031DCB7C B 0x31DAFD0
	0x031DCB80 STR X30, [X31 - 0x50]!
	0x031DCB84 STP X26, X25, [X31 + 0x10]
	0x031DCB88 STP X24, X23, [X31 + 0x20]
	0x031DCB8C STP X22, X21, [X31 + 0x30]
	0x031DCB90 STP X20, X19, [X31 + 0x40]
	0x031DCB94 ADRP X26, 0x1200000
	0x031DCB98 ADRP X25, 0xF43000
	0x031DCB9C ADRP X22, 0xF43000
	0x031DCBA0 ADRP X24, 0xF43000
	0x031DCBA4 ADRP X23, 0xF43000
	0x031DCBA8 LDRB W8, [X26 + 0xB5]
	0x031DCBAC LDR X25, [X25 + 0xFC8]
	0x031DCBB0 LDR X22, [X22 + 0xFD0]
	0x031DCBB4 LDR X24, [X24 + 0xFD8]
	0x031DCBB8 LDR X23, [X23 + 0xFE0]
	0x031DCBBC MOV X19, X2
	0x031DCBC0 MOV X20, X1
	0x031DCBC4 MOV X21, X0
	0x031DCBC8 TBNZ X8, 0x0, 0x31DCC04
	0x031DCBCC ADRP X0, 0xF43000
	0x031DCBD0 LDR X0, [X0 + 0xFE0]
	0x031DCBD4 BL 0x1C16CF4
	0x031DCBD8 ADRP X0, 0xF43000
	0x031DCBDC LDR X0, [X0 + 0xFD8]
	0x031DCBE0 BL 0x1C16CF4
	0x031DCBE4 ADRP X0, 0xF43000
	0x031DCBE8 LDR X0, [X0 + 0xFD0]
	0x031DCBEC BL 0x1C16CF4
	0x031DCBF0 ADRP X0, 0xF43000
	0x031DCBF4 LDR X0, [X0 + 0xFC8]
	0x031DCBF8 BL 0x1C16CF4
	0x031DCBFC MOVZ W8, 0x1
	0x031DCC00 STRB W8, [X26 + 0xB5]
	0x031DCC04 MOVZ W8, 0x6
	0x031DCC08 STR W8, [X21 + 0x10]
	0x031DCC0C LDR X0, [X25]
	0x031DCC10 BL 0x1C16F10
	0x031DCC14 LDR X2, [X22]
	0x031DCC18 MOVZ W1, 0x32
	0x031DCC1C MOV X22, X0

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x1201000
	009 Move X21, 0xF40000
	010 Move W8, [X20+165]
	011 Move X21, [X21+1920]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xF40000
	018 Move X0, [X0+1920]
	019 Call 0x1C17CF4
	020 Move X0, 0xF40000
	021 Move X0, [X0+1928]
	022 Call 0x1C17CF4
	023 Move X0, 0xF45000
	024 Move X0, [X0+976]
	025 Call 0x1C17CF4
	026 Move X0, 0xF45000
	027 Move X0, [X0+984]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+165], W8
	031 Move X1, [X21]
	032 Move X0, X19
	033 Call Value.get_Item, X0, X1
	034 Compare X0, 0
	035 JumpIfEqual {73}
	036 Move X8, 0xF40000
	037 Move X8, [X8+1928]
	038 Move V8, [X0+40]
	039 Move X0, X19
	040 Move X1, [X8]
	041 Call Value.get_Item, X0, X1
	042 Compare X0, 0
	043 JumpIfEqual {73}
	044 Move X8, 0xF45000
	045 Move X8, [X8+976]
	046 Move V9, [X0+40]
	047 Move X0, X19
	048 Move X1, [X8]
	049 Call Value.get_Item, X0, X1
	050 Compare X0, 0
	051 JumpIfEqual {73}
	052 Move X8, 0xF45000
	053 Move X8, [X8+984]
	054 Move V10, [X0+40]
	055 Move X0, X19
	056 Move X1, [X8]
	057 Call Value.get_Item, X0, X1
	058 Compare X0, 0
	059 JumpIfEqual {73}
	060 Move V3, [X0+40]
	061 NotImplemented "Instruction INVALID not yet implemented."
	062 NotImplemented "Instruction INVALID not yet implemented."
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Move D9, [X31+16]
	068 Move D8, [X31+24]
	069 NotImplemented "Instruction INVALID not yet implemented."
	070 NotImplemented "Instruction INVALID not yet implemented."
	071 Move V10, [X31+64]
	072 Return X0
	073 Call 0x1C17F20

Method: System.Void set_Vector4(UnityEngine.Vector4 value)

Disassembly:
	0x031DCC20 BL 0x301B830
	0x031DCC24 STR X22, [X21 + 0x30]
	0x031DCC28 LDR X0, [X24]
	0x031DCC2C BL 0x1C16F10
	0x031DCC30 LDR X2, [X23]
	0x031DCC34 MOVZ W1, 0x5
	0x031DCC38 MOV X22, X0
	0x031DCC3C BL 0x2AA481C
	0x031DCC40 MOV X0, X21
	0x031DCC44 MOV X1, X31
	0x031DCC48 STR X22, [X21 + 0x40]
	0x031DCC4C BL 0x33BDD8C
	0x031DCC50 MOV X0, X21
	0x031DCC54 MOV X1, X20
	0x031DCC58 MOV X2, X19
	0x031DCC5C LDP X20, X19, [X31 + 0x40]
	0x031DCC60 LDP X22, X21, [X31 + 0x30]
	0x031DCC64 LDP X24, X23, [X31 + 0x20]
	0x031DCC68 LDP X26, X25, [X31 + 0x10]
	0x031DCC6C LDR X30, [X31], #0x50
	0x031DCC70 B 0x31DB0EC
	0x031DCC74 STP X30, X25, [X31 - 0x40]!
	0x031DCC78 STP X24, X23, [X31 + 0x10]
	0x031DCC7C STP X22, X21, [X31 + 0x20]
	0x031DCC80 STP X20, X19, [X31 + 0x30]
	0x031DCC84 ADRP X25, 0x1200000
	0x031DCC88 ADRP X24, 0xF43000
	0x031DCC8C ADRP X21, 0xF43000
	0x031DCC90 ADRP X23, 0xF43000
	0x031DCC94 ADRP X22, 0xF43000
	0x031DCC98 LDRB W8, [X25 + 0xB6]
	0x031DCC9C LDR X24, [X24 + 0xFC8]
	0x031DCCA0 LDR X21, [X21 + 0xFD0]
	0x031DCCA4 LDR X23, [X23 + 0xFD8]
	0x031DCCA8 LDR X22, [X22 + 0xFE0]
	0x031DCCAC MOV X19, X1
	0x031DCCB0 MOV X20, X0
	0x031DCCB4 TBNZ X8, 0x0, 0x31DCCF0
	0x031DCCB8 ADRP X0, 0xF43000
	0x031DCCBC LDR X0, [X0 + 0xFE0]
	0x031DCCC0 BL 0x1C16CF4
	0x031DCCC4 ADRP X0, 0xF43000
	0x031DCCC8 LDR X0, [X0 + 0xFD8]
	0x031DCCCC BL 0x1C16CF4
	0x031DCCD0 ADRP X0, 0xF43000
	0x031DCCD4 LDR X0, [X0 + 0xFD0]
	0x031DCCD8 BL 0x1C16CF4
	0x031DCCDC ADRP X0, 0xF43000
	0x031DCCE0 LDR X0, [X0 + 0xFC8]
	0x031DCCE4 BL 0x1C16CF4
	0x031DCCE8 MOVZ W8, 0x1
	0x031DCCEC STRB W8, [X25 + 0xB6]
	0x031DCCF0 MOVZ W8, 0x6
	0x031DCCF4 STR W8, [X20 + 0x10]
	0x031DCCF8 LDR X0, [X24]
	0x031DCCFC BL 0x1C16F10
	0x031DCD00 LDR X2, [X21]
	0x031DCD04 MOVZ W1, 0x32
	0x031DCD08 MOV X21, X0
	0x031DCD0C BL 0x301B830
	0x031DCD10 STR X21, [X20 + 0x30]
	0x031DCD14 LDR X0, [X23]
	0x031DCD18 BL 0x1C16F10
	0x031DCD1C LDR X2, [X22]
	0x031DCD20 MOVZ W1, 0x5
	0x031DCD24 MOV X21, X0
	0x031DCD28 BL 0x2AA481C
	0x031DCD2C MOV X0, X20
	0x031DCD30 MOV X1, X31
	0x031DCD34 STR X21, [X20 + 0x40]
	0x031DCD38 BL 0x33BDD8C
	0x031DCD3C MOV X0, X20
	0x031DCD40 MOV X1, X19
	0x031DCD44 LDP X20, X19, [X31 + 0x30]
	0x031DCD48 LDP X22, X21, [X31 + 0x20]
	0x031DCD4C LDP X24, X23, [X31 + 0x10]
	0x031DCD50 LDP X30, X25, [X31], #0x40
	0x031DCD54 B 0x31DB1BC
	0x031DCD58 STP D11, D10, [X31 - 0x60]!
	0x031DCD5C STP D9, D8, [X31 + 0x10]
	0x031DCD60 STR X30, [X31 + 0x20]
	0x031DCD64 STP X24, X23, [X31 + 0x30]
	0x031DCD68 STP X22, X21, [X31 + 0x40]
	0x031DCD6C STP X20, X19, [X31 + 0x50]
	0x031DCD70 ADRP X24, 0x1200000
	0x031DCD74 ADRP X23, 0xF43000
	0x031DCD78 ADRP X20, 0xF43000
	0x031DCD7C ADRP X22, 0xF43000
	0x031DCD80 ADRP X21, 0xF43000
	0x031DCD84 LDRB W8, [X24 + 0xB7]
	0x031DCD88 LDR X23, [X23 + 0xFC8]
	0x031DCD8C LDR X20, [X20 + 0xFD0]
	0x031DCD90 LDR X22, [X22 + 0xFD8]
	0x031DCD94 LDR X21, [X21 + 0xFE0]
	0x031DCD98 MOV V8.16B, V3.16B
	0x031DCD9C MOV V9.16B, V2.16B
	0x031DCDA0 MOV V10.16B, V1.16B

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x1201000
	013 Move X21, 0xF44000
	014 Move X20, 0xF45000
	015 Move W8, [X22+166]
	016 Move X21, [X21+4056]
	017 Move X20, [X20+968]
	018 Move V8, V3
	019 Move V9, V2
	020 Move V10, V1
	021 Move V11, V0
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {50}
	027 Move X0, 0xF44000
	028 Move X0, [X0+4072]
	029 Call 0x1C17CF4
	030 Move X0, 0xF45000
	031 Move X0, [X0+968]
	032 Call 0x1C17CF4
	033 Move X0, 0xF44000
	034 Move X0, [X0+4056]
	035 Call 0x1C17CF4
	036 Move X0, 0xF40000
	037 Move X0, [X0+1920]
	038 Call 0x1C17CF4
	039 Move X0, 0xF40000
	040 Move X0, [X0+1928]
	041 Call 0x1C17CF4
	042 Move X0, 0xF45000
	043 Move X0, [X0+976]
	044 Call 0x1C17CF4
	045 Move X0, 0xF45000
	046 Move X0, [X0+984]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X22+166], W8
	050 Move X8, -40820736
	051 Move V0, [X8+2448]
	052 Move [X19+16], D0
	053 Move X0, [X21]
	054 Call 0x1C17F10
	055 Move X1, [X20]
	056 Move X20, X0
	057 Call Dictionary`2<Object, Object>..ctor, X0
	058 Move V0, V11
	059 Call Value.op_Implicit, V0
	060 Compare X20, 0
	061 JumpIfEqual {111}
	062 Move X8, 0xF40000
	063 Move X21, 0xF44000
	064 Move X8, [X8+1920]
	065 Move X21, [X21+4072]
	066 Move X22, 0xF40000
	067 Move X23, 0xF45000
	068 Move X1, [X8]
	069 Move X3, [X21]
	070 Move X24, 0xF45000
	071 Move X22, [X22+1928]
	072 Move X23, [X23+976]
	073 Move X24, [X24+984]
	074 Move X2, X0
	075 Move X0, X20
	076 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	077 Move V0, V10
	078 Call Value.op_Implicit, V0
	079 Move X1, [X22]
	080 Move X3, [X21]
	081 Move X2, X0
	082 Move X0, X20
	083 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	084 Move V0, V9
	085 Call Value.op_Implicit, V0
	086 Move X1, [X23]
	087 Move X3, [X21]
	088 Move X2, X0
	089 Move X0, X20
	090 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	091 Move V0, V8
	092 Call Value.op_Implicit, V0
	093 Move X1, [X24]
	094 Move X3, [X21]
	095 Move X2, X0
	096 Move X0, X20
	097 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	098 Move [X19+64], X20
	099 Move X20, [X31+80]
	100 Move X19, [X31+88]
	101 Move X22, [X31+64]
	102 Move X21, [X31+72]
	103 Move X24, [X31+48]
	104 Move X23, [X31+56]
	105 Move X30, [X31+32]
	106 Move D9, [X31+16]
	107 Move D8, [X31+24]
	108 Move D11, [X31+96]
	109 Move D10, [X31+104]
	110 Return 
	111 Call 0x1C17F20

Method: UnityEngine.Quaternion get_Quaternion()

Disassembly:
	0x031DCDA4 MOV V11.16B, V0.16B
	0x031DCDA8 MOV X19, X0
	0x031DCDAC TBNZ X8, 0x0, 0x31DCDE8
	0x031DCDB0 ADRP X0, 0xF43000
	0x031DCDB4 LDR X0, [X0 + 0xFE0]
	0x031DCDB8 BL 0x1C16CF4
	0x031DCDBC ADRP X0, 0xF43000
	0x031DCDC0 LDR X0, [X0 + 0xFD8]
	0x031DCDC4 BL 0x1C16CF4
	0x031DCDC8 ADRP X0, 0xF43000
	0x031DCDCC LDR X0, [X0 + 0xFD0]
	0x031DCDD0 BL 0x1C16CF4
	0x031DCDD4 ADRP X0, 0xF43000
	0x031DCDD8 LDR X0, [X0 + 0xFC8]
	0x031DCDDC BL 0x1C16CF4
	0x031DCDE0 MOVZ W8, 0x1
	0x031DCDE4 STRB W8, [X24 + 0xB7]
	0x031DCDE8 MOVZ W8, 0x6
	0x031DCDEC STR W8, [X19 + 0x10]
	0x031DCDF0 LDR X0, [X23]
	0x031DCDF4 BL 0x1C16F10
	0x031DCDF8 LDR X2, [X20]
	0x031DCDFC MOVZ W1, 0x32
	0x031DCE00 MOV X20, X0
	0x031DCE04 BL 0x301B830
	0x031DCE08 STR X20, [X19 + 0x30]
	0x031DCE0C LDR X0, [X22]
	0x031DCE10 BL 0x1C16F10
	0x031DCE14 LDR X2, [X21]
	0x031DCE18 MOVZ W1, 0x5
	0x031DCE1C MOV X20, X0
	0x031DCE20 BL 0x2AA481C
	0x031DCE24 MOV X0, X19
	0x031DCE28 MOV X1, X31
	0x031DCE2C STR X20, [X19 + 0x40]
	0x031DCE30 BL 0x33BDD8C
	0x031DCE34 MOV X0, X19
	0x031DCE38 MOV V2.16B, V9.16B
	0x031DCE3C MOV V3.16B, V8.16B
	0x031DCE40 LDP X20, X19, [X31 + 0x50]
	0x031DCE44 LDP X22, X21, [X31 + 0x40]
	0x031DCE48 LDP X24, X23, [X31 + 0x30]
	0x031DCE4C LDR X30, [X31 + 0x20]
	0x031DCE50 LDP D9, D8, [X31 + 0x10]
	0x031DCE54 MOV V0.16B, V11.16B
	0x031DCE58 MOV V1.16B, V10.16B
	0x031DCE5C LDP D11, D10, [X31], #0x60
	0x031DCE60 B 0x31DB338
	0x031DCE64 STP X30, X25, [X31 - 0x40]!
	0x031DCE68 STP X24, X23, [X31 + 0x10]
	0x031DCE6C STP X22, X21, [X31 + 0x20]
	0x031DCE70 STP X20, X19, [X31 + 0x30]
	0x031DCE74 ADRP X25, 0x1200000
	0x031DCE78 ADRP X24, 0xF43000
	0x031DCE7C ADRP X21, 0xF43000
	0x031DCE80 ADRP X23, 0xF43000
	0x031DCE84 ADRP X22, 0xF43000
	0x031DCE88 LDRB W8, [X25 + 0xB8]
	0x031DCE8C LDR X24, [X24 + 0xFC8]
	0x031DCE90 LDR X21, [X21 + 0xFD0]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x1201000
	009 Move X21, 0xF40000
	010 Move W8, [X20+167]
	011 Move X21, [X21+1920]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xF40000
	018 Move X0, [X0+1920]
	019 Call 0x1C17CF4
	020 Move X0, 0xF40000
	021 Move X0, [X0+1928]
	022 Call 0x1C17CF4
	023 Move X0, 0xF45000
	024 Move X0, [X0+976]
	025 Call 0x1C17CF4
	026 Move X0, 0xF45000
	027 Move X0, [X0+984]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+167], W8
	031 Move X1, [X21]
	032 Move X0, X19
	033 Call Value.get_Item, X0, X1
	034 Compare X0, 0
	035 JumpIfEqual {73}
	036 Move X8, 0xF40000
	037 Move X8, [X8+1928]
	038 Move V8, [X0+40]
	039 Move X0, X19
	040 Move X1, [X8]
	041 Call Value.get_Item, X0, X1
	042 Compare X0, 0
	043 JumpIfEqual {73}
	044 Move X8, 0xF45000
	045 Move X8, [X8+976]
	046 Move V9, [X0+40]
	047 Move X0, X19
	048 Move X1, [X8]
	049 Call Value.get_Item, X0, X1
	050 Compare X0, 0
	051 JumpIfEqual {73}
	052 Move X8, 0xF45000
	053 Move X8, [X8+984]
	054 Move V10, [X0+40]
	055 Move X0, X19
	056 Move X1, [X8]
	057 Call Value.get_Item, X0, X1
	058 Compare X0, 0
	059 JumpIfEqual {73}
	060 Move V3, [X0+40]
	061 NotImplemented "Instruction INVALID not yet implemented."
	062 NotImplemented "Instruction INVALID not yet implemented."
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Move D9, [X31+16]
	068 Move D8, [X31+24]
	069 NotImplemented "Instruction INVALID not yet implemented."
	070 NotImplemented "Instruction INVALID not yet implemented."
	071 Move V10, [X31+64]
	072 Return X0
	073 Call 0x1C17F20

Method: System.Void set_Quaternion(UnityEngine.Quaternion value)

Disassembly:
	0x031DCE94 LDR X23, [X23 + 0xFD8]
	0x031DCE98 LDR X22, [X22 + 0xFE0]
	0x031DCE9C MOV X20, X1
	0x031DCEA0 MOV X19, X0
	0x031DCEA4 TBNZ X8, 0x0, 0x31DCEE0
	0x031DCEA8 ADRP X0, 0xF43000
	0x031DCEAC LDR X0, [X0 + 0xFE0]
	0x031DCEB0 BL 0x1C16CF4
	0x031DCEB4 ADRP X0, 0xF43000
	0x031DCEB8 LDR X0, [X0 + 0xFD8]
	0x031DCEBC BL 0x1C16CF4
	0x031DCEC0 ADRP X0, 0xF43000
	0x031DCEC4 LDR X0, [X0 + 0xFD0]
	0x031DCEC8 BL 0x1C16CF4
	0x031DCECC ADRP X0, 0xF43000
	0x031DCED0 LDR X0, [X0 + 0xFC8]
	0x031DCED4 BL 0x1C16CF4
	0x031DCED8 MOVZ W8, 0x1
	0x031DCEDC STRB W8, [X25 + 0xB8]
	0x031DCEE0 MOVZ W8, 0x6
	0x031DCEE4 STR W8, [X19 + 0x10]
	0x031DCEE8 LDR X0, [X24]
	0x031DCEEC BL 0x1C16F10
	0x031DCEF0 LDR X2, [X21]
	0x031DCEF4 MOVZ W1, 0x32
	0x031DCEF8 MOV X21, X0
	0x031DCEFC BL 0x301B830
	0x031DCF00 STR X21, [X19 + 0x30]
	0x031DCF04 LDR X0, [X23]
	0x031DCF08 BL 0x1C16F10
	0x031DCF0C LDR X2, [X22]
	0x031DCF10 MOVZ W1, 0x5
	0x031DCF14 MOV X21, X0
	0x031DCF18 BL 0x2AA481C
	0x031DCF1C MOV X0, X19
	0x031DCF20 MOV X1, X31
	0x031DCF24 STR X21, [X19 + 0x40]
	0x031DCF28 BL 0x33BDD8C
	0x031DCF2C AND X1, X20, 0x0
	0x031DCF30 MOV X0, X19
	0x031DCF34 LDP X20, X19, [X31 + 0x30]
	0x031DCF38 LDP X22, X21, [X31 + 0x20]
	0x031DCF3C LDP X24, X23, [X31 + 0x10]
	0x031DCF40 LDP X30, X25, [X31], #0x40
	0x031DCF44 B 0x31DB5B8
	0x031DCF48 STP D9, D8, [X31 - 0x50]!
	0x031DCF4C STR X30, [X31 + 0x10]
	0x031DCF50 STP X24, X23, [X31 + 0x20]
	0x031DCF54 STP X22, X21, [X31 + 0x30]
	0x031DCF58 STP X20, X19, [X31 + 0x40]
	0x031DCF5C ADRP X24, 0x1200000
	0x031DCF60 ADRP X23, 0xF43000
	0x031DCF64 ADRP X20, 0xF43000
	0x031DCF68 ADRP X22, 0xF43000
	0x031DCF6C ADRP X21, 0xF43000
	0x031DCF70 LDRB W8, [X24 + 0xB9]
	0x031DCF74 LDR X23, [X23 + 0xFC8]
	0x031DCF78 LDR X20, [X20 + 0xFD0]
	0x031DCF7C LDR X22, [X22 + 0xFD8]
	0x031DCF80 LDR X21, [X21 + 0xFE0]
	0x031DCF84 MOV V8.16B, V1.16B
	0x031DCF88 MOV V9.16B, V0.16B
	0x031DCF8C MOV X19, X0
	0x031DCF90 TBNZ X8, 0x0, 0x31DCFCC
	0x031DCF94 ADRP X0, 0xF43000
	0x031DCF98 LDR X0, [X0 + 0xFE0]
	0x031DCF9C BL 0x1C16CF4
	0x031DCFA0 ADRP X0, 0xF43000
	0x031DCFA4 LDR X0, [X0 + 0xFD8]
	0x031DCFA8 BL 0x1C16CF4
	0x031DCFAC ADRP X0, 0xF43000
	0x031DCFB0 LDR X0, [X0 + 0xFD0]
	0x031DCFB4 BL 0x1C16CF4
	0x031DCFB8 ADRP X0, 0xF43000
	0x031DCFBC LDR X0, [X0 + 0xFC8]
	0x031DCFC0 BL 0x1C16CF4
	0x031DCFC4 MOVZ W8, 0x1
	0x031DCFC8 STRB W8, [X24 + 0xB9]
	0x031DCFCC MOVZ W8, 0x6
	0x031DCFD0 STR W8, [X19 + 0x10]
	0x031DCFD4 LDR X0, [X23]
	0x031DCFD8 BL 0x1C16F10
	0x031DCFDC LDR X2, [X20]
	0x031DCFE0 MOVZ W1, 0x32
	0x031DCFE4 MOV X20, X0
	0x031DCFE8 BL 0x301B830
	0x031DCFEC STR X20, [X19 + 0x30]
	0x031DCFF0 LDR X0, [X22]
	0x031DCFF4 BL 0x1C16F10
	0x031DCFF8 LDR X2, [X21]
	0x031DCFFC MOVZ W1, 0x5
	0x031DD000 MOV X20, X0
	0x031DD004 BL 0x2AA481C
	0x031DD008 MOV X0, X19
	0x031DD00C MOV X1, X31
	0x031DD010 STR X20, [X19 + 0x40]
	0x031DD014 BL 0x33BDD8C

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x1201000
	013 Move X21, 0xF44000
	014 Move X20, 0xF45000
	015 Move W8, [X22+168]
	016 Move X21, [X21+4056]
	017 Move X20, [X20+968]
	018 Move V8, V3
	019 Move V9, V2
	020 Move V10, V1
	021 Move V11, V0
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {50}
	027 Move X0, 0xF44000
	028 Move X0, [X0+4072]
	029 Call 0x1C17CF4
	030 Move X0, 0xF45000
	031 Move X0, [X0+968]
	032 Call 0x1C17CF4
	033 Move X0, 0xF44000
	034 Move X0, [X0+4056]
	035 Call 0x1C17CF4
	036 Move X0, 0xF40000
	037 Move X0, [X0+1920]
	038 Call 0x1C17CF4
	039 Move X0, 0xF40000
	040 Move X0, [X0+1928]
	041 Call 0x1C17CF4
	042 Move X0, 0xF45000
	043 Move X0, [X0+976]
	044 Call 0x1C17CF4
	045 Move X0, 0xF45000
	046 Move X0, [X0+984]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X22+168], W8
	050 Move X8, -40820736
	051 Move V0, [X8+3120]
	052 Move [X19+16], D0
	053 Move X0, [X21]
	054 Call 0x1C17F10
	055 Move X1, [X20]
	056 Move X20, X0
	057 Call Dictionary`2<Object, Object>..ctor, X0
	058 Move V0, V11
	059 Call Value.op_Implicit, V0
	060 Compare X20, 0
	061 JumpIfEqual {111}
	062 Move X8, 0xF40000
	063 Move X21, 0xF44000
	064 Move X8, [X8+1920]
	065 Move X21, [X21+4072]
	066 Move X22, 0xF40000
	067 Move X23, 0xF45000
	068 Move X1, [X8]
	069 Move X3, [X21]
	070 Move X24, 0xF45000
	071 Move X22, [X22+1928]
	072 Move X23, [X23+976]
	073 Move X24, [X24+984]
	074 Move X2, X0
	075 Move X0, X20
	076 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	077 Move V0, V10
	078 Call Value.op_Implicit, V0
	079 Move X1, [X22]
	080 Move X3, [X21]
	081 Move X2, X0
	082 Move X0, X20
	083 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	084 Move V0, V9
	085 Call Value.op_Implicit, V0
	086 Move X1, [X23]
	087 Move X3, [X21]
	088 Move X2, X0
	089 Move X0, X20
	090 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	091 Move V0, V8
	092 Call Value.op_Implicit, V0
	093 Move X1, [X24]
	094 Move X3, [X21]
	095 Move X2, X0
	096 Move X0, X20
	097 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	098 Move [X19+64], X20
	099 Move X20, [X31+80]
	100 Move X19, [X31+88]
	101 Move X22, [X31+64]
	102 Move X21, [X31+72]
	103 Move X24, [X31+48]
	104 Move X23, [X31+56]
	105 Move X30, [X31+32]
	106 Move D9, [X31+16]
	107 Move D8, [X31+24]
	108 Move D11, [X31+96]
	109 Move D10, [X31+104]
	110 Return 
	111 Call 0x1C17F20

Method: UnityEngine.Bounds get_Bounds()

Disassembly:
	0x031DD018 MOV X0, X19
	0x031DD01C LDP X20, X19, [X31 + 0x40]
	0x031DD020 LDP X22, X21, [X31 + 0x30]
	0x031DD024 LDP X24, X23, [X31 + 0x20]
	0x031DD028 LDR X30, [X31 + 0x10]
	0x031DD02C MOV V0.16B, V9.16B
	0x031DD030 MOV V1.16B, V8.16B
	0x031DD034 LDP D9, D8, [X31], #0x50
	0x031DD038 B 0x31DB820
	0x031DD03C STR D10, [X31 - 0x50]!
	0x031DD040 STP D9, D8, [X31 + 0x8]
	0x031DD044 STR X30, [X31 + 0x18]
	0x031DD048 STP X24, X23, [X31 + 0x20]
	0x031DD04C STP X22, X21, [X31 + 0x30]
	0x031DD050 STP X20, X19, [X31 + 0x40]
	0x031DD054 ADRP X24, 0x11FF000
	0x031DD058 ADRP X23, 0xF42000
	0x031DD05C ADRP X20, 0xF42000
	0x031DD060 ADRP X22, 0xF42000
	0x031DD064 ADRP X21, 0xF42000
	0x031DD068 LDRB W8, [X24 + 0xBA]
	0x031DD06C LDR X23, [X23 + 0xFC8]
	0x031DD070 LDR X20, [X20 + 0xFD0]
	0x031DD074 LDR X22, [X22 + 0xFD8]
	0x031DD078 LDR X21, [X21 + 0xFE0]
	0x031DD07C MOV V8.16B, V2.16B
	0x031DD080 MOV V9.16B, V1.16B
	0x031DD084 MOV V10.16B, V0.16B
	0x031DD088 MOV X19, X0
	0x031DD08C TBNZ X8, 0x0, 0x31DD0C8
	0x031DD090 ADRP X0, 0xF42000
	0x031DD094 LDR X0, [X0 + 0xFE0]
	0x031DD098 BL 0x1C16CF4
	0x031DD09C ADRP X0, 0xF42000
	0x031DD0A0 LDR X0, [X0 + 0xFD8]
	0x031DD0A4 BL 0x1C16CF4
	0x031DD0A8 ADRP X0, 0xF42000
	0x031DD0AC LDR X0, [X0 + 0xFD0]
	0x031DD0B0 BL 0x1C16CF4
	0x031DD0B4 ADRP X0, 0xF42000
	0x031DD0B8 LDR X0, [X0 + 0xFC8]
	0x031DD0BC BL 0x1C16CF4
	0x031DD0C0 MOVZ W8, 0x1
	0x031DD0C4 STRB W8, [X24 + 0xBA]
	0x031DD0C8 MOVZ W8, 0x6
	0x031DD0CC STR W8, [X19 + 0x10]
	0x031DD0D0 LDR X0, [X23]
	0x031DD0D4 BL 0x1C16F10
	0x031DD0D8 LDR X2, [X20]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x1200000
	010 Move X22, 0xF44000
	011 Move X19, X8
	012 Move W8, [X21+169]
	013 Move X22, [X22+992]
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xF42000
	020 Move X0, [X0+3984]
	021 Call 0x1C17CF4
	022 Move X0, 0xF44000
	023 Move X0, [X0+992]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+169], W8
	027 Move X1, [X22]
	028 Move X0, X20
	029 Call Value.get_Item, X0, X1
	030 Compare X0, 0
	031 JumpIfEqual {63}
	032 Move X21, 0xF42000
	033 Move X21, [X21+3984]
	034 Call Value.get_Vector3, X0
	035 Move X1, [X21]
	036 Move X0, X20
	037 Move V9, V0
	038 Move V10, V1
	039 Move V8, V2
	040 Call Value.get_Item, X0, X1
	041 Compare X0, 0
	042 JumpIfEqual {63}
	043 Call Value.get_Vector3, X0
	044 Move S3, 0.5
	045 Multiply S0, S0, S3
	046 Multiply S1, S1, S3
	047 Multiply S2, S2, S3
	048 Move [X19], S9
	049 Move [X19+8], S10
	050 Move [X19+8], S8
	051 Move [X19+16], S0
	052 Move [X19+16], S1
	053 Move [X19+24], S2
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X22, [X31+32]
	057 Move X21, [X31+40]
	058 Move X30, [X31+24]
	059 Move D9, [X31+8]
	060 Move D8, [X31+16]
	061 Move V10, [X31+64]
	062 Return X0
	063 Call 0x1C17F20

Method: System.Void set_Bounds(UnityEngine.Bounds value)

Disassembly:
	0x031DD0EC LDR X0, [X22]
	0x031DD0F0 BL 0x1C16F10
	0x031DD0F4 LDR X2, [X21]
	0x031DD0F8 MOVZ W1, 0x5
	0x031DD0FC MOV X20, X0
	0x031DD100 BL 0x2AA481C
	0x031DD104 MOV X0, X19
	0x031DD108 MOV X1, X31
	0x031DD10C STR X20, [X19 + 0x40]
	0x031DD110 BL 0x33BDD8C
	0x031DD114 MOV X0, X19
	0x031DD118 MOV V1.16B, V9.16B
	0x031DD11C MOV V2.16B, V8.16B
	0x031DD120 LDP X20, X19, [X31 + 0x40]
	0x031DD124 LDP X22, X21, [X31 + 0x30]
	0x031DD128 LDP X24, X23, [X31 + 0x20]
	0x031DD12C LDR X30, [X31 + 0x18]
	0x031DD130 LDP D9, D8, [X31 + 0x8]
	0x031DD134 MOV V0.16B, V10.16B
	0x031DD138 LDR V10, [X31], #0x50
	0x031DD13C B 0x31DB9E8
	0x031DD140 STP D11, D10, [X31 - 0x60]!
	0x031DD144 STP D9, D8, [X31 + 0x10]
	0x031DD148 STR X30, [X31 + 0x20]
	0x031DD14C STP X24, X23, [X31 + 0x30]
	0x031DD150 STP X22, X21, [X31 + 0x40]
	0x031DD154 STP X20, X19, [X31 + 0x50]
	0x031DD158 ADRP X24, 0x11FF000
	0x031DD15C ADRP X23, 0xF42000
	0x031DD160 ADRP X20, 0xF42000
	0x031DD164 ADRP X22, 0xF42000
	0x031DD168 ADRP X21, 0xF42000
	0x031DD16C LDRB W8, [X24 + 0xBB]
	0x031DD170 LDR X23, [X23 + 0xFC8]
	0x031DD174 LDR X20, [X20 + 0xFD0]
	0x031DD178 LDR X22, [X22 + 0xFD8]
	0x031DD17C LDR X21, [X21 + 0xFE0]
	0x031DD180 MOV V8.16B, V3.16B
	0x031DD184 MOV V9.16B, V2.16B
	0x031DD188 MOV V10.16B, V1.16B
	0x031DD18C MOV V11.16B, V0.16B
	0x031DD190 MOV X19, X0
	0x031DD194 TBNZ X8, 0x0, 0x31DD1D0
	0x031DD198 ADRP X0, 0xF42000
	0x031DD19C LDR X0, [X0 + 0xFE0]
	0x031DD1A0 BL 0x1C16CF4
	0x031DD1A4 ADRP X0, 0xF42000
	0x031DD1A8 LDR X0, [X0 + 0xFD8]
	0x031DD1AC BL 0x1C16CF4
	0x031DD1B0 ADRP X0, 0xF42000
	0x031DD1B4 LDR X0, [X0 + 0xFD0]
	0x031DD1B8 BL 0x1C16CF4
	0x031DD1BC ADRP X0, 0xF42000
	0x031DD1C0 LDR X0, [X0 + 0xFC8]
	0x031DD1C4 BL 0x1C16CF4
	0x031DD1C8 MOVZ W8, 0x1
	0x031DD1CC STRB W8, [X24 + 0xBB]
	0x031DD1D0 MOVZ W8, 0x6
	0x031DD1D4 STR W8, [X19 + 0x10]
	0x031DD1D8 LDR X0, [X23]
	0x031DD1DC BL 0x1C16F10
	0x031DD1E0 LDR X2, [X20]
	0x031DD1E4 MOVZ W1, 0x32
	0x031DD1E8 MOV X20, X0
	0x031DD1EC BL 0x301B830
	0x031DD1F0 STR X20, [X19 + 0x30]
	0x031DD1F4 LDR X0, [X22]
	0x031DD1F8 BL 0x1C16F10
	0x031DD1FC LDR X2, [X21]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1200000
	008 Move X22, 0xF43000
	009 Move X21, 0xF44000
	010 Move W8, [X23+170]
	011 Move X22, [X22+4056]
	012 Move X21, [X21+968]
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {36}
	019 Move X0, 0xF43000
	020 Move X0, [X0+4072]
	021 Call 0x1C17CF4
	022 Move X0, 0xF44000
	023 Move X0, [X0+968]
	024 Call 0x1C17CF4
	025 Move X0, 0xF43000
	026 Move X0, [X0+4056]
	027 Call 0x1C17CF4
	028 Move X0, 0xF42000
	029 Move X0, [X0+3984]
	030 Call 0x1C17CF4
	031 Move X0, 0xF44000
	032 Move X0, [X0+992]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X23+170], W8
	036 Move X8, -40820736
	037 Move V0, [X8+736]
	038 Move [X19+16], D0
	039 Move X0, [X22]
	040 Call 0x1C17F10
	041 Move X1, [X21]
	042 Move X21, X0
	043 Call Dictionary`2<Object, Object>..ctor, X0
	044 Move S0, [X20]
	045 Move S1, [X20+4]
	046 Move V2, [X20+8]
	047 Call Value.op_Implicit, X0
	048 Compare X21, 0
	049 JumpIfEqual {81}
	050 Move X8, 0xF44000
	051 Move X22, 0xF43000
	052 Move X8, [X8+992]
	053 Move X22, [X22+4072]
	054 Move X23, 0xF42000
	055 Move X2, X0
	056 Move X1, [X8]
	057 Move X3, [X22]
	058 Move X23, [X23+3984]
	059 Move X0, X21
	060 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	061 Move S0, [X20+12]
	062 Move S1, [X20+16]
	063 Move V2, [X20+20]
	064 Add S0, S0, S0
	065 Add S1, S1, S1
	066 Add S2, S2, S2
	067 Call Value.op_Implicit, X0
	068 Move X1, [X23]
	069 Move X3, [X22]
	070 Move X2, X0
	071 Move X0, X21
	072 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	073 Move [X19+64], X21
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X22, [X31+16]
	077 Move X21, [X31+24]
	078 Move X30, [X31+48]
	079 Move X23, [X31+56]
	080 Return 
	081 Call 0x1C17F20

Method: UnityEngine.Rect get_Rect()

Disassembly:
	0x031DD278 LDRB W8, [X24 + 0xBC]
	0x031DD27C LDR X23, [X23 + 0xFC8]
	0x031DD280 LDR X20, [X20 + 0xFD0]
	0x031DD284 LDR X22, [X22 + 0xFD8]
	0x031DD288 LDR X21, [X21 + 0xFE0]
	0x031DD28C MOV V8.16B, V3.16B
	0x031DD290 MOV V9.16B, V2.16B
	0x031DD294 MOV V10.16B, V1.16B
	0x031DD298 MOV V11.16B, V0.16B
	0x031DD29C MOV X19, X0
	0x031DD2A0 TBNZ X8, 0x0, 0x31DD2DC
	0x031DD2A4 ADRP X0, 0xF42000
	0x031DD2A8 LDR X0, [X0 + 0xFE0]
	0x031DD2AC BL 0x1C16CF4
	0x031DD2B0 ADRP X0, 0xF42000
	0x031DD2B4 LDR X0, [X0 + 0xFD8]
	0x031DD2B8 BL 0x1C16CF4
	0x031DD2BC ADRP X0, 0xF42000
	0x031DD2C0 LDR X0, [X0 + 0xFD0]
	0x031DD2C4 BL 0x1C16CF4
	0x031DD2C8 ADRP X0, 0xF42000
	0x031DD2CC LDR X0, [X0 + 0xFC8]
	0x031DD2D0 BL 0x1C16CF4
	0x031DD2D4 MOVZ W8, 0x1
	0x031DD2D8 STRB W8, [X24 + 0xBC]
	0x031DD2DC MOVZ W8, 0x6
	0x031DD2E0 STR W8, [X19 + 0x10]
	0x031DD2E4 LDR X0, [X23]
	0x031DD2E8 BL 0x1C16F10
	0x031DD2EC LDR X2, [X20]
	0x031DD2F0 MOVZ W1, 0x32
	0x031DD2F4 MOV X20, X0
	0x031DD2F8 BL 0x301B830
	0x031DD2FC STR X20, [X19 + 0x30]
	0x031DD300 LDR X0, [X22]
	0x031DD304 BL 0x1C16F10
	0x031DD308 LDR X2, [X21]
	0x031DD30C MOVZ W1, 0x5
	0x031DD310 MOV X20, X0
	0x031DD314 BL 0x2AA481C
	0x031DD318 MOV X0, X19
	0x031DD31C MOV X1, X31
	0x031DD320 STR X20, [X19 + 0x40]
	0x031DD324 BL 0x33BDD8C
	0x031DD328 MOV X0, X19
	0x031DD32C MOV V2.16B, V9.16B
	0x031DD330 MOV V3.16B, V8.16B
	0x031DD334 LDP X20, X19, [X31 + 0x50]
	0x031DD338 LDP X22, X21, [X31 + 0x40]
	0x031DD33C LDP X24, X23, [X31 + 0x30]
	0x031DD340 LDR X30, [X31 + 0x20]
	0x031DD344 LDP D9, D8, [X31 + 0x10]
	0x031DD348 MOV V0.16B, V11.16B
	0x031DD34C MOV V1.16B, V10.16B
	0x031DD350 LDP D11, D10, [X31], #0x60
	0x031DD354 B 0x31DBE94
	0x031DD358 SUB X31, X31, 0x60
	0x031DD35C STP X30, X25, [X31 + 0x20]
	0x031DD360 STP X24, X23, [X31 + 0x30]
	0x031DD364 STP X22, X21, [X31 + 0x40]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x1200000
	009 Move X21, 0xF3F000
	010 Move W8, [X20+171]
	011 Move X21, [X21+1920]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xF3F000
	018 Move X0, [X0+1920]
	019 Call 0x1C17CF4
	020 Move X0, 0xF44000
	021 Move X0, [X0+1000]
	022 Call 0x1C17CF4
	023 Move X0, 0xF3F000
	024 Move X0, [X0+1928]
	025 Call 0x1C17CF4
	026 Move X0, 0xF41000
	027 Move X0, [X0+2928]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+171], W8
	031 Move X1, [X21]
	032 Move X0, X19
	033 Call Value.get_Item, X0, X1
	034 Compare X0, 0
	035 JumpIfEqual {73}
	036 Move X8, 0xF3F000
	037 Move X8, [X8+1928]
	038 Move V8, [X0+40]
	039 Move X0, X19
	040 Move X1, [X8]
	041 Call Value.get_Item, X0, X1
	042 Compare X0, 0
	043 JumpIfEqual {73}
	044 Move X8, 0xF41000
	045 Move X8, [X8+2928]
	046 Move V9, [X0+40]
	047 Move X0, X19
	048 Move X1, [X8]
	049 Call Value.get_Item, X0, X1
	050 Compare X0, 0
	051 JumpIfEqual {73}
	052 Move X8, 0xF44000
	053 Move X8, [X8+1000]
	054 Move V10, [X0+40]
	055 Move X0, X19
	056 Move X1, [X8]
	057 Call Value.get_Item, X0, X1
	058 Compare X0, 0
	059 JumpIfEqual {73}
	060 Move V3, [X0+40]
	061 NotImplemented "Instruction INVALID not yet implemented."
	062 NotImplemented "Instruction INVALID not yet implemented."
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Move D9, [X31+16]
	068 Move D8, [X31+24]
	069 NotImplemented "Instruction INVALID not yet implemented."
	070 NotImplemented "Instruction INVALID not yet implemented."
	071 Move V10, [X31+64]
	072 Return X0
	073 Call 0x1C17F20

Method: System.Void set_Rect(UnityEngine.Rect value)

Disassembly:
	0x031DD368 STP X20, X19, [X31 + 0x50]
	0x031DD36C ADRP X25, 0x11FF000
	0x031DD370 ADRP X24, 0xF42000
	0x031DD374 ADRP X21, 0xF42000
	0x031DD378 ADRP X23, 0xF42000
	0x031DD37C ADRP X22, 0xF42000
	0x031DD380 LDRB W8, [X25 + 0xBD]
	0x031DD384 LDR X24, [X24 + 0xFC8]
	0x031DD388 LDR X21, [X21 + 0xFD0]
	0x031DD38C LDR X23, [X23 + 0xFD8]
	0x031DD390 LDR X22, [X22 + 0xFE0]
	0x031DD394 MOV X20, X1
	0x031DD398 MOV X19, X0
	0x031DD39C TBNZ X8, 0x0, 0x31DD3D8
	0x031DD3A0 ADRP X0, 0xF42000
	0x031DD3A4 LDR X0, [X0 + 0xFE0]
	0x031DD3A8 BL 0x1C16CF4
	0x031DD3AC ADRP X0, 0xF42000
	0x031DD3B0 LDR X0, [X0 + 0xFD8]
	0x031DD3B4 BL 0x1C16CF4
	0x031DD3B8 ADRP X0, 0xF42000
	0x031DD3BC LDR X0, [X0 + 0xFD0]
	0x031DD3C0 BL 0x1C16CF4
	0x031DD3C4 ADRP X0, 0xF42000
	0x031DD3C8 LDR X0, [X0 + 0xFC8]
	0x031DD3CC BL 0x1C16CF4
	0x031DD3D0 MOVZ W8, 0x1
	0x031DD3D4 STRB W8, [X25 + 0xBD]
	0x031DD3D8 MOVZ W8, 0x6
	0x031DD3DC STR W8, [X19 + 0x10]
	0x031DD3E0 LDR X0, [X24]
	0x031DD3E4 BL 0x1C16F10
	0x031DD3E8 LDR X2, [X21]
	0x031DD3EC MOVZ W1, 0x32
	0x031DD3F0 MOV X21, X0
	0x031DD3F4 BL 0x301B830
	0x031DD3F8 STR X21, [X19 + 0x30]
	0x031DD3FC LDR X0, [X23]
	0x031DD400 BL 0x1C16F10
	0x031DD404 LDR X2, [X22]
	0x031DD408 MOVZ W1, 0x5
	0x031DD40C MOV X21, X0
	0x031DD410 BL 0x2AA481C
	0x031DD414 MOV X0, X19
	0x031DD418 MOV X1, X31
	0x031DD41C STR X21, [X19 + 0x40]
	0x031DD420 BL 0x33BDD8C
	0x031DD424 LDR X8, [X20 + 0x10]
	0x031DD428 LDR V0, [X20]
	0x031DD42C ADD X1, X31, 0x0
	0x031DD430 MOV X0, X19
	0x031DD434 STR X8, [X31 + 0x10]
	0x031DD438 STR V0, [X31]
	0x031DD43C BL 0x31DC0EC
	0x031DD440 LDP X20, X19, [X31 + 0x50]
	0x031DD444 LDP X22, X21, [X31 + 0x40]
	0x031DD448 LDP X24, X23, [X31 + 0x30]
	0x031DD44C LDP X30, X25, [X31 + 0x20]
	0x031DD450 ADD X31, X31, 0x60
	0x031DD454 RET
	0x031DD458 STP D11, D10, [X31 - 0x60]!
	0x031DD45C STP D9, D8, [X31 + 0x10]
	0x031DD460 STR X30, [X31 + 0x20]
	0x031DD464 STP X24, X23, [X31 + 0x30]
	0x031DD468 STP X22, X21, [X31 + 0x40]
	0x031DD46C STP X20, X19, [X31 + 0x50]
	0x031DD470 ADRP X24, 0x11FF000
	0x031DD474 ADRP X23, 0xF42000
	0x031DD478 ADRP X20, 0xF42000
	0x031DD47C ADRP X22, 0xF42000
	0x031DD480 ADRP X21, 0xF42000
	0x031DD484 LDRB W8, [X24 + 0xBE]
	0x031DD488 LDR X23, [X23 + 0xFC8]
	0x031DD48C LDR X20, [X20 + 0xFD0]
	0x031DD490 LDR X22, [X22 + 0xFD8]
	0x031DD494 LDR X21, [X21 + 0xFE0]
	0x031DD498 MOV V8.16B, V3.16B
	0x031DD49C MOV V9.16B, V2.16B
	0x031DD4A0 MOV V10.16B, V1.16B
	0x031DD4A4 MOV V11.16B, V0.16B
	0x031DD4A8 MOV X19, X0
	0x031DD4AC TBNZ X8, 0x0, 0x31DD4E8
	0x031DD4B0 ADRP X0, 0xF42000
	0x031DD4B4 LDR X0, [X0 + 0xFE0]
	0x031DD4B8 BL 0x1C16CF4
	0x031DD4BC ADRP X0, 0xF42000
	0x031DD4C0 LDR X0, [X0 + 0xFD8]
	0x031DD4C4 BL 0x1C16CF4
	0x031DD4C8 ADRP X0, 0xF42000
	0x031DD4CC LDR X0, [X0 + 0xFD0]
	0x031DD4D0 BL 0x1C16CF4
	0x031DD4D4 ADRP X0, 0xF42000
	0x031DD4D8 LDR X0, [X0 + 0xFC8]
	0x031DD4DC BL 0x1C16CF4
	0x031DD4E0 MOVZ W8, 0x1
	0x031DD4E4 STRB W8, [X24 + 0xBE]
	0x031DD4E8 MOVZ W8, 0x6

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x1200000
	013 Move X21, 0xF43000
	014 Move X20, 0xF44000
	015 Move W8, [X22+172]
	016 Move X21, [X21+4056]
	017 Move X20, [X20+968]
	018 Move V8, V3
	019 Move V9, V2
	020 Move V10, V1
	021 Move V11, V0
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {50}
	027 Move X0, 0xF43000
	028 Move X0, [X0+4072]
	029 Call 0x1C17CF4
	030 Move X0, 0xF44000
	031 Move X0, [X0+968]
	032 Call 0x1C17CF4
	033 Move X0, 0xF43000
	034 Move X0, [X0+4056]
	035 Call 0x1C17CF4
	036 Move X0, 0xF3F000
	037 Move X0, [X0+1920]
	038 Call 0x1C17CF4
	039 Move X0, 0xF44000
	040 Move X0, [X0+1000]
	041 Call 0x1C17CF4
	042 Move X0, 0xF3F000
	043 Move X0, [X0+1928]
	044 Call 0x1C17CF4
	045 Move X0, 0xF41000
	046 Move X0, [X0+2928]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X22+172], W8
	050 Move X8, -40824832
	051 Move V0, [X8+1240]
	052 Move [X19+16], D0
	053 Move X0, [X21]
	054 Call 0x1C17F10
	055 Move X1, [X20]
	056 Move X20, X0
	057 Call Dictionary`2<Object, Object>..ctor, X0
	058 Move V0, V11
	059 Call Value.op_Implicit, V0
	060 Compare X20, 0
	061 JumpIfEqual {111}
	062 Move X8, 0xF3F000
	063 Move X21, 0xF43000
	064 Move X8, [X8+1920]
	065 Move X21, [X21+4072]
	066 Move X22, 0xF3F000
	067 Move X23, 0xF41000
	068 Move X1, [X8]
	069 Move X3, [X21]
	070 Move X24, 0xF44000
	071 Move X22, [X22+1928]
	072 Move X23, [X23+2928]
	073 Move X24, [X24+1000]
	074 Move X2, X0
	075 Move X0, X20
	076 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	077 Move V0, V10
	078 Call Value.op_Implicit, V0
	079 Move X1, [X22]
	080 Move X3, [X21]
	081 Move X2, X0
	082 Move X0, X20
	083 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	084 Move V0, V9
	085 Call Value.op_Implicit, V0
	086 Move X1, [X23]
	087 Move X3, [X21]
	088 Move X2, X0
	089 Move X0, X20
	090 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	091 Move V0, V8
	092 Call Value.op_Implicit, V0
	093 Move X1, [X24]
	094 Move X3, [X21]
	095 Move X2, X0
	096 Move X0, X20
	097 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	098 Move [X19+64], X20
	099 Move X20, [X31+80]
	100 Move X19, [X31+88]
	101 Move X22, [X31+64]
	102 Move X21, [X31+72]
	103 Move X24, [X31+48]
	104 Move X23, [X31+56]
	105 Move X30, [X31+32]
	106 Move D9, [X31+16]
	107 Move D8, [X31+24]
	108 Move D11, [X31+96]
	109 Move D10, [X31+104]
	110 Return 
	111 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x031D4D04 LDR W9, [X0 + 0xE0]
	0x031D4D08 LDR X19, [X8 + 0x28]
	0x031D4D0C CBZ W9, 0x31D4D18
	0x031D4D10 CBNZ X19, 0x31D4E8C
	0x031D4D14 B 0x31D4D28
	0x031D4D18 BL 0x1C16DFC
	0x031D4D1C LDR X8, [X21]
	0x031D4D20 LDR X8, [X8 + 0xB8]
	0x031D4D24 CBNZ X19, 0x31D4E8C
	0x031D4D28 LDR X19, [X8]
	0x031D4D2C CBZ X19, 0x31D4EA0
	0x031D4D30 ADRP X22, 0xF4B000
	0x031D4D34 LDR X8, [X19]
	0x031D4D38 LDR X22, [X22 + 0xF60]
	0x031D4D3C ADRP X23, 0xF4C000
	0x031D4D40 LDR X1, [X22]
	0x031D4D44 LDR X23, [X23 + 0x98]
	0x031D4D48 LDRH W9, [X8 + 0x12E]
	0x031D4D4C LDR X20, [X23]
	0x031D4D50 CBZ X9, 0x31D4D74
	0x031D4D54 LDR X10, [X8 + 0xB0]
	0x031D4D58 ADD X10, X10, 0x8
	0x031D4D5C LDUR X11, [X10 - 0x8]
	0x031D4D60 CMP X11, X1
	0x031D4D64 B.EQ 0x31D4D84
	0x031D4D68 SUBS X9, X9, 0x1
	0x031D4D6C ADD X10, X10, 0x10
	0x031D4D70 B.NE 0x31D4D5C
	0x031D4D74 MOVZ W2, 0x5
	0x031D4D78 MOV X0, X19
	0x031D4D7C BL 0x1C5C788
	0x031D4D80 B 0x31D4D94
	0x031D4D84 LDR W9, [X10]
	0x031D4D88 ADD W9, W9, 0x5
	0x031D4D8C ADD X8, X8, W9, 0x4, SXTW
	0x031D4D90 ADD X0, X8, 0x138
	0x031D4D94 LDP X8, X2, [X0]
	0x031D4D98 MOV X0, X19
	0x031D4D9C MOV X1, X20
	0x031D4DA0 BLR X8
	0x031D4DA4 ADRP X8, 0xF24000
	0x031D4DA8 LDR X8, [X8 + 0x748]
	0x031D4DAC MOV W19, W0
	0x031D4DB0 LDR X8, [X8]
	0x031D4DB4 MOV X0, X8
	0x031D4DB8 BL 0x1C16F10
	0x031D4DBC MOV X20, X0
	0x031D4DC0 BL 0x31D3D04
	0x031D4DC4 LDR X0, [X21]
	0x031D4DC8 LDR W8, [X0 + 0xE0]
	0x031D4DCC CBZ W8, 0x31D4E2C
	0x031D4DD0 TBZ X19, 0x0, 0x31D4E34
	0x031D4DD4 LDR X8, [X21]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x1209000
	009 Move X23, 0xF4C000
	010 Move X20, 0xF4C000
	011 Move X22, 0xF4C000
	012 Move X21, 0xF4C000
	013 Move W8, [X24+173]
	014 Move X23, [X23+4040]
	015 Move X20, [X20+4048]
	016 Move X22, [X22+4056]
	017 Move X21, [X21+4064]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0xF4C000
	024 Move X0, [X0+4064]
	025 Call 0x1C17CF4
	026 Move X0, 0xF4C000
	027 Move X0, [X0+4056]
	028 Call 0x1C17CF4
	029 Move X0, 0xF4C000
	030 Move X0, [X0+4048]
	031 Call 0x1C17CF4
	032 Move X0, 0xF4C000
	033 Move X0, [X0+4040]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X24+173], W8
	037 Move W8, 6
	038 Move [X19+16], W8
	039 Move X0, [X23]
	040 Call 0x1C17F10
	041 Move X2, [X20]
	042 Move W1, 50
	043 Move X20, X0
	044 Call List`1<Object>..ctor, X0, X1
	045 Move [X19+48], X20
	046 Move X0, [X22]
	047 Call 0x1C17F10
	048 Move X2, [X21]
	049 Move W1, 5
	050 Move X20, X0
	051 Call Dictionary`2<Object, Object>..ctor, X0, X1
	052 Move [X19+64], X20
	053 Move X0, X19
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X22, [X31+32]
	057 Move X21, [X31+40]
	058 Move X24, [X31+16]
	059 Move X23, [X31+24]
	060 Move X1, X31
	061 Move X30, [X31+64]
	062 Call Object..ctor, X0
	063 Return 

Method: System.Void .ctor(mixpanel.Value/ValueTypes valueType, mixpanel.Value/DataTypes dataTypes)

Disassembly:
	0x031DD4EC STR W8, [X19 + 0x10]
	0x031DD4F0 LDR X0, [X23]
	0x031DD4F4 BL 0x1C16F10
	0x031DD4F8 LDR X2, [X20]
	0x031DD4FC MOVZ W1, 0x32
	0x031DD500 MOV X20, X0
	0x031DD504 BL 0x301B830
	0x031DD508 STR X20, [X19 + 0x30]
	0x031DD50C LDR X0, [X22]
	0x031DD510 BL 0x1C16F10
	0x031DD514 LDR X2, [X21]
	0x031DD518 MOVZ W1, 0x5
	0x031DD51C MOV X20, X0
	0x031DD520 BL 0x2AA481C
	0x031DD524 MOV X0, X19
	0x031DD528 MOV X1, X31
	0x031DD52C STR X20, [X19 + 0x40]
	0x031DD530 BL 0x33BDD8C
	0x031DD534 MOV X0, X19
	0x031DD538 MOV V2.16B, V9.16B
	0x031DD53C MOV V3.16B, V8.16B
	0x031DD540 LDP X20, X19, [X31 + 0x50]
	0x031DD544 LDP X22, X21, [X31 + 0x40]
	0x031DD548 LDP X24, X23, [X31 + 0x30]
	0x031DD54C LDR X30, [X31 + 0x20]
	0x031DD550 LDP D9, D8, [X31 + 0x10]
	0x031DD554 MOV V0.16B, V11.16B
	0x031DD558 MOV V1.16B, V10.16B
	0x031DD55C LDP D11, D10, [X31], #0x60
	0x031DD560 B 0x31DC368
	0x031DD564 STR X30, [X31 - 0x50]!
	0x031DD568 STP X26, X25, [X31 + 0x10]
	0x031DD56C STP X24, X23, [X31 + 0x20]
	0x031DD570 STP X22, X21, [X31 + 0x30]
	0x031DD574 STP X20, X19, [X31 + 0x40]
	0x031DD578 ADRP X26, 0x11FF000
	0x031DD57C ADRP X23, 0xF42000
	0x031DD580 ADRP X21, 0xF42000
	0x031DD584 ADRP X25, 0xF42000
	0x031DD588 ADRP X24, 0xF42000
	0x031DD58C ADRP X22, 0xF43000
	0x031DD590 LDRB W8, [X26 + 0xBF]
	0x031DD594 LDR X23, [X23 + 0xFC8]
	0x031DD598 LDR X21, [X21 + 0xFD0]
	0x031DD59C LDR X25, [X25 + 0xFD8]
	0x031DD5A0 LDR X24, [X24 + 0xFE0]
	0x031DD5A4 LDR X22, [X22 + 0x3F0]
	0x031DD5A8 MOV X20, X1
	0x031DD5AC MOV X19, X0
	0x031DD5B0 TBNZ X8, 0x0, 0x31DD5F8
	0x031DD5B4 ADRP X0, 0xF42000
	0x031DD5B8 LDR X0, [X0 + 0xFE0]
	0x031DD5BC BL 0x1C16CF4
	0x031DD5C0 ADRP X0, 0xF42000
	0x031DD5C4 LDR X0, [X0 + 0xFD8]
	0x031DD5C8 BL 0x1C16CF4
	0x031DD5CC ADRP X0, 0xF42000
	0x031DD5D0 LDR X0, [X0 + 0xFD0]
	0x031DD5D4 BL 0x1C16CF4

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X26, 0x1200000
	011 Move X25, 0xF43000
	012 Move X22, 0xF43000
	013 Move X24, 0xF43000
	014 Move X23, 0xF43000
	015 Move W8, [X26+174]
	016 Move X25, [X25+4040]
	017 Move X22, [X22+4048]
	018 Move X24, [X24+4056]
	019 Move X23, [X23+4064]
	020 Move W19, W2
	021 Move W21, W1
	022 Move X20, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {41}
	027 Move X0, 0xF43000
	028 Move X0, [X0+4064]
	029 Call 0x1C17CF4
	030 Move X0, 0xF43000
	031 Move X0, [X0+4056]
	032 Call 0x1C17CF4
	033 Move X0, 0xF43000
	034 Move X0, [X0+4048]
	035 Call 0x1C17CF4
	036 Move X0, 0xF43000
	037 Move X0, [X0+4040]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X26+174], W8
	041 Move W8, 6
	042 Move [X20+16], W8
	043 Move X0, [X25]
	044 Call 0x1C17F10
	045 Move X2, [X22]
	046 Move W1, 50
	047 Move X22, X0
	048 Call List`1<Object>..ctor, X0, X1
	049 Move [X20+48], X22
	050 Move X0, [X24]
	051 Call 0x1C17F10
	052 Move X2, [X23]
	053 Move W1, 5
	054 Move X22, X0
	055 Call Dictionary`2<Object, Object>..ctor, X0, X1
	056 Move X0, X20
	057 Move X1, X31
	058 Move [X20+64], X22
	059 Call Object..ctor, X0
	060 Move [X20+16], W21
	061 Move [X20+20], W19
	062 Move X20, [X31+64]
	063 Move X19, [X31+72]
	064 Move X22, [X31+48]
	065 Move X21, [X31+56]
	066 Move X24, [X31+32]
	067 Move X23, [X31+40]
	068 Move X26, [X31+16]
	069 Move X25, [X31+24]
	070 Move X30, [X31+80]
	071 Return 

Method: System.Void .ctor(System.String value)

Disassembly:
	0x031DD5D8 ADRP X0, 0xF43000
	0x031DD5DC LDR X0, [X0 + 0x3F0]
	0x031DD5E0 BL 0x1C16CF4
	0x031DD5E4 ADRP X0, 0xF42000
	0x031DD5E8 LDR X0, [X0 + 0xFC8]
	0x031DD5EC BL 0x1C16CF4
	0x031DD5F0 MOVZ W8, 0x1
	0x031DD5F4 STRB W8, [X26 + 0xBF]
	0x031DD5F8 MOVZ W8, 0x6
	0x031DD5FC STR W8, [X19 + 0x10]
	0x031DD600 LDR X0, [X23]
	0x031DD604 BL 0x1C16F10
	0x031DD608 LDR X2, [X21]
	0x031DD60C MOVZ W1, 0x32
	0x031DD610 MOV X21, X0
	0x031DD614 BL 0x301B830
	0x031DD618 STR X21, [X19 + 0x30]
	0x031DD61C LDR X0, [X25]
	0x031DD620 BL 0x1C16F10
	0x031DD624 LDR X2, [X24]
	0x031DD628 MOVZ W1, 0x5
	0x031DD62C MOV X21, X0
	0x031DD630 BL 0x2AA481C
	0x031DD634 MOV X0, X19
	0x031DD638 MOV X1, X31
	0x031DD63C STR X21, [X19 + 0x40]
	0x031DD640 BL 0x33BDD8C
	0x031DD644 ADRP X8, 0xFFFFFFFFFD911000
	0x031DD648 LDR V0, [X8 + 0x8]
	0x031DD64C STR D0, [X19 + 0x10]
	0x031DD650 LDR X0, [X23]
	0x031DD654 BL 0x1C16F10
	0x031DD658 LDR X2, [X22]
	0x031DD65C MOV X1, X20
	0x031DD660 MOV X21, X0
	0x031DD664 BL 0x301B8E0
	0x031DD668 STR X21, [X19 + 0x30]
	0x031DD66C LDP X20, X19, [X31 + 0x40]
	0x031DD670 LDP X22, X21, [X31 + 0x30]
	0x031DD674 LDP X24, X23, [X31 + 0x20]
	0x031DD678 LDP X26, X25, [X31 + 0x10]
	0x031DD67C LDR X30, [X31], #0x50
	0x031DD680 RET
	0x031DD684 STR X30, [X31 - 0x50]!
	0x031DD688 STP X26, X25, [X31 + 0x10]
	0x031DD68C STP X24, X23, [X31 + 0x20]
	0x031DD690 STP X22, X21, [X31 + 0x30]
	0x031DD694 STP X20, X19, [X31 + 0x40]
	0x031DD698 ADRP X26, 0x11FF000
	0x031DD69C ADRP X25, 0xF42000
	0x031DD6A0 ADRP X21, 0xF42000
	0x031DD6A4 ADRP X23, 0xF42000
	0x031DD6A8 ADRP X24, 0xF42000
	0x031DD6AC ADRP X22, 0xF43000
	0x031DD6B0 LDRB W8, [X26 + 0xC0]
	0x031DD6B4 LDR X25, [X25 + 0xFC8]
	0x031DD6B8 LDR X21, [X21 + 0xFD0]
	0x031DD6BC LDR X23, [X23 + 0xFD8]
	0x031DD6C0 LDR X24, [X24 + 0xFE0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x1200000
	010 Move X24, 0xF43000
	011 Move X21, 0xF43000
	012 Move X23, 0xF43000
	013 Move X22, 0xF43000
	014 Move W8, [X25+175]
	015 Move X24, [X24+4040]
	016 Move X21, [X21+4048]
	017 Move X23, [X23+4056]
	018 Move X22, [X22+4064]
	019 Move X19, X1
	020 Move X20, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {39}
	025 Move X0, 0xF43000
	026 Move X0, [X0+4064]
	027 Call 0x1C17CF4
	028 Move X0, 0xF43000
	029 Move X0, [X0+4056]
	030 Call 0x1C17CF4
	031 Move X0, 0xF43000
	032 Move X0, [X0+4048]
	033 Call 0x1C17CF4
	034 Move X0, 0xF43000
	035 Move X0, [X0+4040]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X25+175], W8
	039 Move W8, 6
	040 Move [X20+16], W8
	041 Move X0, [X24]
	042 Call 0x1C17F10
	043 Move X2, [X21]
	044 Move W1, 50
	045 Move X21, X0
	046 Call List`1<Object>..ctor, X0, X1
	047 Move [X20+48], X21
	048 Move X0, [X23]
	049 Call 0x1C17F10
	050 Move X2, [X22]
	051 Move W1, 5
	052 Move X21, X0
	053 Call Dictionary`2<Object, Object>..ctor, X0, X1
	054 Move X0, X20
	055 Move X1, X31
	056 Move [X20+64], X21
	057 Call Object..ctor, X0
	058 Move X8, -40824832
	059 Move V0, [X8+2584]
	060 Move [X20+24], X19
	061 Move X22, [X31+32]
	062 Move X21, [X31+40]
	063 Move X24, [X31+16]
	064 Move X23, [X31+24]
	065 Move [X20+16], D0
	066 Move X20, [X31+48]
	067 Move X19, [X31+56]
	068 Move X30, [X31+64]
	069 Move X25, [X31+72]
	070 Return 

Method: System.Void .ctor(System.Boolean value)

Disassembly:
	0x031DD6C4 LDR X22, [X22 + 0x3F8]
	0x031DD6C8 MOV X20, X1
	0x031DD6CC MOV X19, X0
	0x031DD6D0 TBNZ X8, 0x0, 0x31DD718
	0x031DD6D4 ADRP X0, 0xF42000
	0x031DD6D8 LDR X0, [X0 + 0xFE0]
	0x031DD6DC BL 0x1C16CF4
	0x031DD6E0 ADRP X0, 0xF43000
	0x031DD6E4 LDR X0, [X0 + 0x3F8]
	0x031DD6E8 BL 0x1C16CF4
	0x031DD6EC ADRP X0, 0xF42000
	0x031DD6F0 LDR X0, [X0 + 0xFD8]
	0x031DD6F4 BL 0x1C16CF4
	0x031DD6F8 ADRP X0, 0xF42000
	0x031DD6FC LDR X0, [X0 + 0xFD0]
	0x031DD700 BL 0x1C16CF4
	0x031DD704 ADRP X0, 0xF42000
	0x031DD708 LDR X0, [X0 + 0xFC8]
	0x031DD70C BL 0x1C16CF4
	0x031DD710 MOVZ W8, 0x1
	0x031DD714 STRB W8, [X26 + 0xC0]
	0x031DD718 MOVZ W8, 0x6
	0x031DD71C STR W8, [X19 + 0x10]
	0x031DD720 LDR X0, [X25]
	0x031DD724 BL 0x1C16F10
	0x031DD728 LDR X2, [X21]
	0x031DD72C MOVZ W1, 0x32
	0x031DD730 MOV X21, X0
	0x031DD734 BL 0x301B830
	0x031DD738 STR X21, [X19 + 0x30]
	0x031DD73C LDR X0, [X23]
	0x031DD740 BL 0x1C16F10
	0x031DD744 LDR X2, [X24]
	0x031DD748 MOVZ W1, 0x5
	0x031DD74C MOV X21, X0
	0x031DD750 BL 0x2AA481C
	0x031DD754 MOV X0, X19
	0x031DD758 MOV X1, X31
	0x031DD75C STR X21, [X19 + 0x40]
	0x031DD760 BL 0x33BDD8C
	0x031DD764 ADRP X8, 0xFFFFFFFFFD911000
	0x031DD768 LDR V0, [X8 + 0x380]
	0x031DD76C STR D0, [X19 + 0x10]
	0x031DD770 LDR X0, [X23]
	0x031DD774 BL 0x1C16F10
	0x031DD778 LDR X2, [X22]
	0x031DD77C MOV X1, X20
	0x031DD780 MOV X21, X0
	0x031DD784 BL 0x2AA48CC
	0x031DD788 STR X21, [X19 + 0x40]
	0x031DD78C LDP X20, X19, [X31 + 0x40]
	0x031DD790 LDP X22, X21, [X31 + 0x30]
	0x031DD794 LDP X24, X23, [X31 + 0x20]
	0x031DD798 LDP X26, X25, [X31 + 0x10]
	0x031DD79C LDR X30, [X31], #0x50
	0x031DD7A0 RET
	0x031DD7A4 STR X30, [X31 - 0x20]!
	0x031DD7A8 STP X20, X19, [X31 + 0x10]
	0x031DD7AC ADRP X19, 0x11FF000
	0x031DD7B0 ADRP X20, 0xF1B000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x1200000
	010 Move X24, 0xF43000
	011 Move X21, 0xF43000
	012 Move X23, 0xF43000
	013 Move X22, 0xF43000
	014 Move W8, [X25+176]
	015 Move X24, [X24+4040]
	016 Move X21, [X21+4048]
	017 Move X23, [X23+4056]
	018 Move X22, [X22+4064]
	019 Move W20, W1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {39}
	025 Move X0, 0xF43000
	026 Move X0, [X0+4064]
	027 Call 0x1C17CF4
	028 Move X0, 0xF43000
	029 Move X0, [X0+4056]
	030 Call 0x1C17CF4
	031 Move X0, 0xF43000
	032 Move X0, [X0+4048]
	033 Call 0x1C17CF4
	034 Move X0, 0xF43000
	035 Move X0, [X0+4040]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X25+176], W8
	039 Move W8, 6
	040 Move [X19+16], W8
	041 Move X0, [X24]
	042 Call 0x1C17F10
	043 Move X2, [X21]
	044 Move W1, 50
	045 Move X21, X0
	046 Call List`1<Object>..ctor, X0, X1
	047 Move [X19+48], X21
	048 Move X0, [X23]
	049 Call 0x1C17F10
	050 Move X2, [X22]
	051 Move W1, 5
	052 Move X21, X0
	053 Call Dictionary`2<Object, Object>..ctor, X0, X1
	054 Move X0, X19
	055 Move X1, X31
	056 Move [X19+64], X21
	057 Call Object..ctor, X0
	058 Move X8, -40824832
	059 Move V0, [X8+1944]
	060 And W8, W20, 1
	061 Move [X19+32], W8
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move [X19+16], D0
	065 Move X20, [X31+48]
	066 Move X19, [X31+56]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Move X25, [X31+72]
	071 Return 

Method: System.Void .ctor(System.Double value)

Disassembly:
	0x031DD7B4 LDRB W8, [X19 + 0xC1]
	0x031DD7B8 LDR X20, [X20 + 0x748]
	0x031DD7BC TBNZ X8, 0x0, 0x31DD7D4
	0x031DD7C0 ADRP X0, 0xF1B000
	0x031DD7C4 LDR X0, [X0 + 0x748]
	0x031DD7C8 BL 0x1C16CF4
	0x031DD7CC MOVZ W8, 0x1
	0x031DD7D0 STRB W8, [X19 + 0xC1]
	0x031DD7D4 LDR X0, [X20]
	0x031DD7D8 BL 0x1C16F10
	0x031DD7DC MOVZ W1, 0x1
	0x031DD7E0 MOVZ W2, 0x1
	0x031DD7E4 MOV X19, X0
	0x031DD7E8 BL 0x31DC4EC
	0x031DD7EC MOV X0, X19
	0x031DD7F0 LDP X20, X19, [X31 + 0x10]
	0x031DD7F4 LDR X30, [X31], #0x20
	0x031DD7F8 RET
	0x031DD7FC STR X30, [X31 - 0x20]!
	0x031DD800 STP X20, X19, [X31 + 0x10]
	0x031DD804 ADRP X19, 0x11FF000
	0x031DD808 ADRP X20, 0xF1B000
	0x031DD80C LDRB W8, [X19 + 0xC3]
	0x031DD810 LDR X20, [X20 + 0x748]
	0x031DD814 TBNZ X8, 0x0, 0x31DD82C
	0x031DD818 ADRP X0, 0xF1B000
	0x031DD81C LDR X0, [X0 + 0x748]
	0x031DD820 BL 0x1C16CF4
	0x031DD824 MOVZ W8, 0x1
	0x031DD828 STRB W8, [X19 + 0xC3]
	0x031DD82C LDR X0, [X20]
	0x031DD830 BL 0x1C16F10
	0x031DD834 MOVZ W1, 0x6
	0x031DD838 MOVZ W2, 0x2
	0x031DD83C MOV X19, X0
	0x031DD840 BL 0x31DC4EC
	0x031DD844 MOV X0, X19
	0x031DD848 LDP X20, X19, [X31 + 0x10]
	0x031DD84C LDR X30, [X31], #0x20
	0x031DD850 RET
	0x031DD854 STR X30, [X31 - 0x40]!
	0x031DD858 STP X24, X23, [X31 + 0x10]
	0x031DD85C STP X22, X21, [X31 + 0x20]
	0x031DD860 STP X20, X19, [X31 + 0x30]
	0x031DD864 ADRP X20, 0x11FF000
	0x031DD868 LDRB W8, [X20 + 0xC6]
	0x031DD86C MOV X19, X0
	0x031DD870 TBNZ X8, 0x0, 0x31DD8C4
	0x031DD874 ADRP X0, 0xF43000
	0x031DD878 LDR X0, [X0 + 0x268]
	0x031DD87C BL 0x1C16CF4
	0x031DD880 ADRP X0, 0xF43000
	0x031DD884 LDR X0, [X0 + 0x270]
	0x031DD888 BL 0x1C16CF4
	0x031DD88C ADRP X0, 0xF18000
	0x031DD890 LDR X0, [X0 + 0xE78]
	0x031DD894 BL 0x1C16CF4
	0x031DD898 ADRP X0, 0xF43000
	0x031DD89C LDR X0, [X0 + 0x400]
	0x031DD8A0 BL 0x1C16CF4
	0x031DD8A4 ADRP X0, 0xF43000

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x1200000
	010 Move X23, 0xF43000
	011 Move X20, 0xF43000
	012 Move X22, 0xF43000
	013 Move X21, 0xF43000
	014 Move W8, [X24+177]
	015 Move X23, [X23+4040]
	016 Move X20, [X20+4048]
	017 Move X22, [X22+4056]
	018 Move X21, [X21+4064]
	019 Move V8, V0
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {39}
	025 Move X0, 0xF43000
	026 Move X0, [X0+4064]
	027 Call 0x1C17CF4
	028 Move X0, 0xF43000
	029 Move X0, [X0+4056]
	030 Call 0x1C17CF4
	031 Move X0, 0xF43000
	032 Move X0, [X0+4048]
	033 Call 0x1C17CF4
	034 Move X0, 0xF43000
	035 Move X0, [X0+4040]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X24+177], W8
	039 Move W8, 6
	040 Move [X19+16], W8
	041 Move X0, [X23]
	042 Call 0x1C17F10
	043 Move X2, [X20]
	044 Move W1, 50
	045 Move X20, X0
	046 Call List`1<Object>..ctor, X0, X1
	047 Move [X19+48], X20
	048 Move X0, [X22]
	049 Call 0x1C17F10
	050 Move X2, [X21]
	051 Move W1, 5
	052 Move X20, X0
	053 Call Dictionary`2<Object, Object>..ctor, X0, X1
	054 Move X0, X19
	055 Move X1, X31
	056 Move [X19+64], X20
	057 Call Object..ctor, X0
	058 Move X8, -40824832
	059 Move V0, [X8+968]
	060 Move [X19+40], D8
	061 Move X22, [X31+32]
	062 Move X21, [X31+40]
	063 Move X24, [X31+16]
	064 Move X23, [X31+24]
	065 Move [X19+16], D0
	066 Move X20, [X31+48]
	067 Move X19, [X31+56]
	068 Move X30, [X31+8]
	069 Move V8, [X31+64]
	070 Return 

Method: System.Void .ctor(System.Uri value)

Disassembly:
	0x031DD8A8 LDR X0, [X0 + 0x260]
	0x031DD8AC BL 0x1C16CF4
	0x031DD8B0 ADRP X0, 0xF1B000
	0x031DD8B4 LDR X0, [X0 + 0x748]
	0x031DD8B8 BL 0x1C16CF4
	0x031DD8BC MOVZ W8, 0x1
	0x031DD8C0 STRB W8, [X20 + 0xC6]
	0x031DD8C4 CBZ X19, 0x31DD9B4
	0x031DD8C8 ADRP X8, 0xF18000
	0x031DD8CC LDR X8, [X8 + 0xE78]
	0x031DD8D0 ADRP X22, 0xF43000
	0x031DD8D4 MOV X0, X19
	0x031DD8D8 LDR X1, [X8]
	0x031DD8DC LDR X22, [X22 + 0x260]
	0x031DD8E0 BL 0x301DDC4
	0x031DD8E4 LDR X8, [X22]
	0x031DD8E8 MOV X19, X0
	0x031DD8EC LDR W9, [X8 + 0xE0]
	0x031DD8F0 CBNZ W9, 0x31DD900
	0x031DD8F4 MOV X0, X8
	0x031DD8F8 BL 0x1C16DFC
	0x031DD8FC LDR X8, [X22]
	0x031DD900 LDR X9, [X8 + 0xB8]
	0x031DD904 ADRP X24, 0xF43000
	0x031DD908 ADRP X23, 0xF1B000
	0x031DD90C LDR X20, [X9 + 0x10]
	0x031DD910 LDR X24, [X24 + 0x268]
	0x031DD914 LDR X23, [X23 + 0x748]
	0x031DD918 CBNZ X20, 0x31DD970
	0x031DD91C LDR W9, [X8 + 0xE0]
	0x031DD920 CBNZ W9, 0x31DD930
	0x031DD924 MOV X0, X8
	0x031DD928 BL 0x1C16DFC
	0x031DD92C LDR X8, [X22]
	0x031DD930 ADRP X9, 0xF43000
	0x031DD934 LDR X8, [X8 + 0xB8]
	0x031DD938 LDR X9, [X9 + 0x270]
	0x031DD93C LDR X21, [X8]
	0x031DD940 LDR X0, [X9]
	0x031DD944 BL 0x1C16F10
	0x031DD948 ADRP X8, 0xF43000
	0x031DD94C LDR X8, [X8 + 0x400]
	0x031DD950 MOV X1, X21
	0x031DD954 MOV X3, X31
	0x031DD958 MOV X20, X0
	0x031DD95C LDR X2, [X8]
	0x031DD960 BL 0x29A8CD4
	0x031DD964 LDR X8, [X22]
	0x031DD968 LDR X8, [X8 + 0xB8]
	0x031DD96C STR X20, [X8 + 0x10]
	0x031DD970 LDR X2, [X24]
	0x031DD974 MOV X0, X19
	0x031DD978 MOV X1, X20
	0x031DD97C BL 0x22E3F0C
	0x031DD980 LDR X8, [X23]
	0x031DD984 MOV X19, X0
	0x031DD988 MOV X0, X8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x1200000
	010 Move X24, 0xF43000
	011 Move X21, 0xF43000
	012 Move X23, 0xF43000
	013 Move X22, 0xF43000
	014 Move W8, [X25+178]
	015 Move X24, [X24+4040]
	016 Move X21, [X21+4048]
	017 Move X23, [X23+4056]
	018 Move X22, [X22+4064]
	019 Move X19, X1
	020 Move X20, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {39}
	025 Move X0, 0xF43000
	026 Move X0, [X0+4064]
	027 Call 0x1C17CF4
	028 Move X0, 0xF43000
	029 Move X0, [X0+4056]
	030 Call 0x1C17CF4
	031 Move X0, 0xF43000
	032 Move X0, [X0+4048]
	033 Call 0x1C17CF4
	034 Move X0, 0xF43000
	035 Move X0, [X0+4040]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X25+178], W8
	039 Move W8, 6
	040 Move [X20+16], W8
	041 Move X0, [X24]
	042 Call 0x1C17F10
	043 Move X2, [X21]
	044 Move W1, 50
	045 Move X21, X0
	046 Call List`1<Object>..ctor, X0, X1
	047 Move [X20+48], X21
	048 Move X0, [X23]
	049 Call 0x1C17F10
	050 Move X2, [X22]
	051 Move W1, 5
	052 Move X21, X0
	053 Call Dictionary`2<Object, Object>..ctor, X0, X1
	054 Move X0, X20
	055 Move X1, X31
	056 Move [X20+64], X21
	057 Call Object..ctor, X0
	058 Move X0, X20
	059 Move X1, X19
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Move X25, [X31+72]
	068 Call Value.set_Uri, X0, X1
	069 Return 

Method: System.Void .ctor(System.Guid value)

Disassembly:
	0x031DD98C BL 0x1C16F10
	0x031DD990 MOV X1, X19
	0x031DD994 MOV X20, X0
	0x031DD998 BL 0x31DD564
	0x031DD99C MOV X0, X20
	0x031DD9A0 LDP X20, X19, [X31 + 0x30]
	0x031DD9A4 LDP X22, X21, [X31 + 0x20]
	0x031DD9A8 LDP X24, X23, [X31 + 0x10]
	0x031DD9AC LDR X30, [X31], #0x40
	0x031DD9B0 RET
	0x031DD9B4 BL 0x1C16F20
	0x031DD9B8 STR X30, [X31 - 0x40]!
	0x031DD9BC STP X24, X23, [X31 + 0x10]
	0x031DD9C0 STP X22, X21, [X31 + 0x20]
	0x031DD9C4 STP X20, X19, [X31 + 0x30]
	0x031DD9C8 ADRP X20, 0x11FF000
	0x031DD9CC ADRP X22, 0xF43000
	0x031DD9D0 LDRB W8, [X20 + 0xC8]
	0x031DD9D4 LDR X22, [X22 + 0x260]
	0x031DD9D8 MOV X19, X0
	0x031DD9DC TBNZ X8, 0x0, 0x31DDA24
	0x031DD9E0 ADRP X0, 0xF43000
	0x031DD9E4 LDR X0, [X0 + 0x408]
	0x031DD9E8 BL 0x1C16CF4
	0x031DD9EC ADRP X0, 0xF43000
	0x031DD9F0 LDR X0, [X0 + 0x410]
	0x031DD9F4 BL 0x1C16CF4
	0x031DD9F8 ADRP X0, 0xF43000
	0x031DD9FC LDR X0, [X0 + 0x418]
	0x031DDA00 BL 0x1C16CF4
	0x031DDA04 ADRP X0, 0xF43000
	0x031DDA08 LDR X0, [X0 + 0x260]
	0x031DDA0C BL 0x1C16CF4
	0x031DDA10 ADRP X0, 0xF1B000
	0x031DDA14 LDR X0, [X0 + 0x748]
	0x031DDA18 BL 0x1C16CF4
	0x031DDA1C MOVZ W8, 0x1
	0x031DDA20 STRB W8, [X20 + 0xC8]
	0x031DDA24 LDR X0, [X22]
	0x031DDA28 LDR W8, [X0 + 0xE0]
	0x031DDA2C CBNZ W8, 0x31DDA38
	0x031DDA30 BL 0x1C16DFC
	0x031DDA34 LDR X0, [X22]
	0x031DDA38 LDR X8, [X0 + 0xB8]
	0x031DDA3C ADRP X24, 0xF43000
	0x031DDA40 ADRP X23, 0xF1B000
	0x031DDA44 LDR X20, [X8 + 0x18]
	0x031DDA48 LDR X24, [X24 + 0x408]
	0x031DDA4C LDR X23, [X23 + 0x748]
	0x031DDA50 CBNZ X20, 0x31DDAA4
	0x031DDA54 LDR W8, [X0 + 0xE0]
	0x031DDA58 CBNZ W8, 0x31DDA64
	0x031DDA5C BL 0x1C16DFC
	0x031DDA60 LDR X0, [X22]
	0x031DDA64 ADRP X9, 0xF43000
	0x031DDA68 LDR X8, [X0 + 0xB8]
	0x031DDA6C LDR X9, [X9 + 0x410]
	0x031DDA70 LDR X21, [X8]
	0x031DDA74 LDR X0, [X9]
	0x031DDA78 BL 0x1C16F10
	0x031DDA7C ADRP X8, 0xF43000
	0x031DDA80 LDR X8, [X8 + 0x418]
	0x031DDA84 MOV X1, X21
	0x031DDA88 MOV X3, X31
	0x031DDA8C MOV X20, X0
	0x031DDA90 LDR X2, [X8]
	0x031DDA94 BL 0x29A75D0
	0x031DDA98 LDR X8, [X22]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X26, 0x1200000
	012 Move X25, 0xF43000
	013 Move X22, 0xF43000
	014 Move X24, 0xF43000
	015 Move X23, 0xF43000
	016 Move W8, [X26+179]
	017 Move X25, [X25+4040]
	018 Move X22, [X22+4048]
	019 Move X24, [X24+4056]
	020 Move X23, [X23+4064]
	021 Move X20, X2
	022 Move X21, X1
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {42}
	028 Move X0, 0xF43000
	029 Move X0, [X0+4064]
	030 Call 0x1C17CF4
	031 Move X0, 0xF43000
	032 Move X0, [X0+4056]
	033 Call 0x1C17CF4
	034 Move X0, 0xF43000
	035 Move X0, [X0+4048]
	036 Call 0x1C17CF4
	037 Move X0, 0xF43000
	038 Move X0, [X0+4040]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X26+179], W8
	042 Move W8, 6
	043 Move [X19+16], W8
	044 Move X0, [X25]
	045 Call 0x1C17F10
	046 Move X2, [X22]
	047 Move W1, 50
	048 Move X22, X0
	049 Call List`1<Object>..ctor, X0, X1
	050 Move [X19+48], X22
	051 Move X0, [X24]
	052 Call 0x1C17F10
	053 Move X2, [X23]
	054 Move W1, 5
	055 Move X22, X0
	056 Call Dictionary`2<Object, Object>..ctor, X0, X1
	057 Move X0, X19
	058 Move X1, X31
	059 Move [X19+64], X22
	060 Call Object..ctor, X0
	061 Move X8, -40824832
	062 Move V0, [X8+3800]
	063 Add X0, X31, 0
	064 Move X1, X31
	065 Move [X31], X21
	066 Move [X31+8], X20
	067 Move [X19+16], D0
	068 Call Guid.ToString, X0
	069 Move [X19+24], X0
	070 Move X20, [X31+80]
	071 Move X19, [X31+88]
	072 Move X22, [X31+64]
	073 Move X21, [X31+72]
	074 Move X24, [X31+48]
	075 Move X23, [X31+56]
	076 Move X26, [X31+32]
	077 Move X25, [X31+40]
	078 Move X30, [X31+16]
	079 Add X31, X31, 96
	080 Return 

Method: System.Void .ctor(System.DateTime value)

Disassembly:
	0x031DDA9C LDR X8, [X8 + 0xB8]
	0x031DDAA0 STR X20, [X8 + 0x18]
	0x031DDAA4 LDR X2, [X24]
	0x031DDAA8 MOV X0, X19
	0x031DDAAC MOV X1, X20
	0x031DDAB0 BL 0x22E2F98
	0x031DDAB4 LDR X8, [X23]
	0x031DDAB8 MOV X19, X0
	0x031DDABC MOV X0, X8
	0x031DDAC0 BL 0x1C16F10
	0x031DDAC4 MOV X1, X19
	0x031DDAC8 MOV X20, X0
	0x031DDACC BL 0x31DD564
	0x031DDAD0 MOV X0, X20
	0x031DDAD4 LDP X20, X19, [X31 + 0x30]
	0x031DDAD8 LDP X22, X21, [X31 + 0x20]
	0x031DDADC LDP X24, X23, [X31 + 0x10]
	0x031DDAE0 LDR X30, [X31], #0x40
	0x031DDAE4 RET
	0x031DDAE8 STR X30, [X31 - 0x40]!
	0x031DDAEC STP X24, X23, [X31 + 0x10]
	0x031DDAF0 STP X22, X21, [X31 + 0x20]
	0x031DDAF4 STP X20, X19, [X31 + 0x30]
	0x031DDAF8 ADRP X20, 0x11FF000
	0x031DDAFC LDRB W8, [X20 + 0xC9]
	0x031DDB00 MOV X19, X0
	0x031DDB04 TBNZ X8, 0x0, 0x31DDB58
	0x031DDB08 ADRP X0, 0xF43000
	0x031DDB0C LDR X0, [X0 + 0x408]
	0x031DDB10 BL 0x1C16CF4
	0x031DDB14 ADRP X0, 0xF43000
	0x031DDB18 LDR X0, [X0 + 0x410]
	0x031DDB1C BL 0x1C16CF4
	0x031DDB20 ADRP X0, 0xF43000
	0x031DDB24 LDR X0, [X0 + 0x420]
	0x031DDB28 BL 0x1C16CF4
	0x031DDB2C ADRP X0, 0xF43000
	0x031DDB30 LDR X0, [X0 + 0x428]
	0x031DDB34 BL 0x1C16CF4
	0x031DDB38 ADRP X0, 0xF43000
	0x031DDB3C LDR X0, [X0 + 0x260]
	0x031DDB40 BL 0x1C16CF4
	0x031DDB44 ADRP X0, 0xF1B000
	0x031DDB48 LDR X0, [X0 + 0x748]
	0x031DDB4C BL 0x1C16CF4
	0x031DDB50 MOVZ W8, 0x1
	0x031DDB54 STRB W8, [X20 + 0xC9]
	0x031DDB58 CBZ X19, 0x31DDC48
	0x031DDB5C ADRP X8, 0xF43000
	0x031DDB60 LDR X8, [X8 + 0x420]
	0x031DDB64 ADRP X22, 0xF43000
	0x031DDB68 MOV X0, X19
	0x031DDB6C LDR X1, [X8]
	0x031DDB70 LDR X22, [X22 + 0x260]
	0x031DDB74 BL 0x2F641BC
	0x031DDB78 LDR X8, [X22]
	0x031DDB7C MOV X19, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x1200000
	010 Move X24, 0xF43000
	011 Move X21, 0xF43000
	012 Move X23, 0xF43000
	013 Move X22, 0xF43000
	014 Move W8, [X25+180]
	015 Move X24, [X24+4040]
	016 Move X21, [X21+4048]
	017 Move X23, [X23+4056]
	018 Move X22, [X22+4064]
	019 Move X19, X1
	020 Move X20, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {39}
	025 Move X0, 0xF43000
	026 Move X0, [X0+4064]
	027 Call 0x1C17CF4
	028 Move X0, 0xF43000
	029 Move X0, [X0+4056]
	030 Call 0x1C17CF4
	031 Move X0, 0xF43000
	032 Move X0, [X0+4048]
	033 Call 0x1C17CF4
	034 Move X0, 0xF43000
	035 Move X0, [X0+4040]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X25+180], W8
	039 Move W8, 6
	040 Move [X20+16], W8
	041 Move X0, [X24]
	042 Call 0x1C17F10
	043 Move X2, [X21]
	044 Move W1, 50
	045 Move X21, X0
	046 Call List`1<Object>..ctor, X0, X1
	047 Move [X20+48], X21
	048 Move X0, [X23]
	049 Call 0x1C17F10
	050 Move X2, [X22]
	051 Move W1, 5
	052 Move X21, X0
	053 Call Dictionary`2<Object, Object>..ctor, X0, X1
	054 Move X0, X20
	055 Move X1, X31
	056 Move [X20+64], X21
	057 Call Object..ctor, X0
	058 Move X0, X20
	059 Move X1, X19
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Move X25, [X31+72]
	068 Call Value.set_DateTime, X0, X1
	069 Return 

Method: System.Void .ctor(System.DateTimeOffset value)

Disassembly:
	0x031DDB80 LDR W9, [X8 + 0xE0]
	0x031DDB84 CBNZ W9, 0x31DDB94
	0x031DDB88 MOV X0, X8
	0x031DDB8C BL 0x1C16DFC
	0x031DDB90 LDR X8, [X22]
	0x031DDB94 LDR X9, [X8 + 0xB8]
	0x031DDB98 ADRP X24, 0xF43000
	0x031DDB9C ADRP X23, 0xF1B000
	0x031DDBA0 LDR X20, [X9 + 0x20]
	0x031DDBA4 LDR X24, [X24 + 0x408]
	0x031DDBA8 LDR X23, [X23 + 0x748]
	0x031DDBAC CBNZ X20, 0x31DDC04
	0x031DDBB0 LDR W9, [X8 + 0xE0]
	0x031DDBB4 CBNZ W9, 0x31DDBC4
	0x031DDBB8 MOV X0, X8
	0x031DDBBC BL 0x1C16DFC
	0x031DDBC0 LDR X8, [X22]
	0x031DDBC4 ADRP X9, 0xF43000
	0x031DDBC8 LDR X8, [X8 + 0xB8]
	0x031DDBCC LDR X9, [X9 + 0x410]
	0x031DDBD0 LDR X21, [X8]
	0x031DDBD4 LDR X0, [X9]
	0x031DDBD8 BL 0x1C16F10
	0x031DDBDC ADRP X8, 0xF43000
	0x031DDBE0 LDR X8, [X8 + 0x428]
	0x031DDBE4 MOV X1, X21
	0x031DDBE8 MOV X3, X31
	0x031DDBEC MOV X20, X0
	0x031DDBF0 LDR X2, [X8]
	0x031DDBF4 BL 0x29A75D0
	0x031DDBF8 LDR X8, [X22]
	0x031DDBFC LDR X8, [X8 + 0xB8]
	0x031DDC00 STR X20, [X8 + 0x20]
	0x031DDC04 LDR X2, [X24]
	0x031DDC08 MOV X0, X19
	0x031DDC0C MOV X1, X20
	0x031DDC10 BL 0x22E2F98
	0x031DDC14 LDR X8, [X23]
	0x031DDC18 MOV X19, X0
	0x031DDC1C MOV X0, X8
	0x031DDC20 BL 0x1C16F10
	0x031DDC24 MOV X1, X19
	0x031DDC28 MOV X20, X0
	0x031DDC2C BL 0x31DD564
	0x031DDC30 MOV X0, X20
	0x031DDC34 LDP X20, X19, [X31 + 0x30]
	0x031DDC38 LDP X22, X21, [X31 + 0x20]
	0x031DDC3C LDP X24, X23, [X31 + 0x10]
	0x031DDC40 LDR X30, [X31], #0x40
	0x031DDC44 RET
	0x031DDC48 BL 0x1C16F20
	0x031DDC4C STR X30, [X31 - 0x40]!
	0x031DDC50 STP X24, X23, [X31 + 0x10]
	0x031DDC54 STP X22, X21, [X31 + 0x20]
	0x031DDC58 STP X20, X19, [X31 + 0x30]
	0x031DDC5C ADRP X20, 0x11FF000
	0x031DDC60 ADRP X22, 0xF43000
	0x031DDC64 LDRB W8, [X20 + 0xCB]
	0x031DDC68 LDR X22, [X22 + 0x260]
	0x031DDC6C MOV X19, X0
	0x031DDC70 TBNZ X8, 0x0, 0x31DDCB8

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X26, 0x1200000
	011 Move X25, 0xF43000
	012 Move X22, 0xF43000
	013 Move X24, 0xF43000
	014 Move X23, 0xF43000
	015 Move W8, [X26+181]
	016 Move X25, [X25+4040]
	017 Move X22, [X22+4048]
	018 Move X24, [X24+4056]
	019 Move X23, [X23+4064]
	020 Move X19, X2
	021 Move X20, X1
	022 Move X21, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {41}
	027 Move X0, 0xF43000
	028 Move X0, [X0+4064]
	029 Call 0x1C17CF4
	030 Move X0, 0xF43000
	031 Move X0, [X0+4056]
	032 Call 0x1C17CF4
	033 Move X0, 0xF43000
	034 Move X0, [X0+4048]
	035 Call 0x1C17CF4
	036 Move X0, 0xF43000
	037 Move X0, [X0+4040]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X26+181], W8
	041 Move W8, 6
	042 Move [X21+16], W8
	043 Move X0, [X25]
	044 Call 0x1C17F10
	045 Move X2, [X22]
	046 Move W1, 50
	047 Move X22, X0
	048 Call List`1<Object>..ctor, X0, X1
	049 Move [X21+48], X22
	050 Move X0, [X24]
	051 Call 0x1C17F10
	052 Move X2, [X23]
	053 Move W1, 5
	054 Move X22, X0
	055 Call Dictionary`2<Object, Object>..ctor, X0, X1
	056 Move X0, X21
	057 Move X1, X31
	058 Move [X21+64], X22
	059 Call Object..ctor, X0
	060 Move X0, X21
	061 Move X1, X20
	062 Move X2, X19
	063 Move X20, [X31+64]
	064 Move X19, [X31+72]
	065 Move X22, [X31+48]
	066 Move X21, [X31+56]
	067 Move X24, [X31+32]
	068 Move X23, [X31+40]
	069 Move X26, [X31+16]
	070 Move X25, [X31+24]
	071 Move X30, [X31+80]
	072 Call Value.set_DateTimeOffset, X0, X1
	073 Return 

Method: System.Void .ctor(System.TimeSpan value)

Disassembly:
	0x031DDC74 ADRP X0, 0xF43000
	0x031DDC78 LDR X0, [X0 + 0x430]
	0x031DDC7C BL 0x1C16CF4
	0x031DDC80 ADRP X0, 0xF43000
	0x031DDC84 LDR X0, [X0 + 0x438]
	0x031DDC88 BL 0x1C16CF4
	0x031DDC8C ADRP X0, 0xF43000
	0x031DDC90 LDR X0, [X0 + 0x440]
	0x031DDC94 BL 0x1C16CF4
	0x031DDC98 ADRP X0, 0xF43000
	0x031DDC9C LDR X0, [X0 + 0x260]
	0x031DDCA0 BL 0x1C16CF4
	0x031DDCA4 ADRP X0, 0xF1B000
	0x031DDCA8 LDR X0, [X0 + 0x748]
	0x031DDCAC BL 0x1C16CF4
	0x031DDCB0 MOVZ W8, 0x1
	0x031DDCB4 STRB W8, [X20 + 0xCB]
	0x031DDCB8 LDR X0, [X22]
	0x031DDCBC LDR W8, [X0 + 0xE0]
	0x031DDCC0 CBNZ W8, 0x31DDCCC
	0x031DDCC4 BL 0x1C16DFC
	0x031DDCC8 LDR X0, [X22]
	0x031DDCCC LDR X8, [X0 + 0xB8]
	0x031DDCD0 ADRP X24, 0xF43000
	0x031DDCD4 ADRP X23, 0xF1B000
	0x031DDCD8 LDR X20, [X8 + 0x28]
	0x031DDCDC LDR X24, [X24 + 0x430]
	0x031DDCE0 LDR X23, [X23 + 0x748]
	0x031DDCE4 CBNZ X20, 0x31DDD38
	0x031DDCE8 LDR W8, [X0 + 0xE0]
	0x031DDCEC CBNZ W8, 0x31DDCF8
	0x031DDCF0 BL 0x1C16DFC
	0x031DDCF4 LDR X0, [X22]
	0x031DDCF8 ADRP X9, 0xF43000
	0x031DDCFC LDR X8, [X0 + 0xB8]
	0x031DDD00 LDR X9, [X9 + 0x438]
	0x031DDD04 LDR X21, [X8]
	0x031DDD08 LDR X0, [X9]
	0x031DDD0C BL 0x1C16F10
	0x031DDD10 ADRP X8, 0xF43000
	0x031DDD14 LDR X8, [X8 + 0x440]
	0x031DDD18 MOV X1, X21
	0x031DDD1C MOV X3, X31
	0x031DDD20 MOV X20, X0
	0x031DDD24 LDR X2, [X8]
	0x031DDD28 BL 0x29A9BA4
	0x031DDD2C LDR X8, [X22]
	0x031DDD30 LDR X8, [X8 + 0xB8]
	0x031DDD34 STR X20, [X8 + 0x28]
	0x031DDD38 LDR X2, [X24]
	0x031DDD3C MOV X0, X19
	0x031DDD40 MOV X1, X20
	0x031DDD44 BL 0x22E43CC
	0x031DDD48 LDR X8, [X23]
	0x031DDD4C MOV X19, X0
	0x031DDD50 MOV X0, X8
	0x031DDD54 BL 0x1C16F10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x1200000
	010 Move X24, 0xF43000
	011 Move X21, 0xF43000
	012 Move X23, 0xF43000
	013 Move X22, 0xF43000
	014 Move W8, [X25+182]
	015 Move X24, [X24+4040]
	016 Move X21, [X21+4048]
	017 Move X23, [X23+4056]
	018 Move X22, [X22+4064]
	019 Move X19, X1
	020 Move X20, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {39}
	025 Move X0, 0xF43000
	026 Move X0, [X0+4064]
	027 Call 0x1C17CF4
	028 Move X0, 0xF43000
	029 Move X0, [X0+4056]
	030 Call 0x1C17CF4
	031 Move X0, 0xF43000
	032 Move X0, [X0+4048]
	033 Call 0x1C17CF4
	034 Move X0, 0xF43000
	035 Move X0, [X0+4040]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X25+182], W8
	039 Move W8, 6
	040 Move [X20+16], W8
	041 Move X0, [X24]
	042 Call 0x1C17F10
	043 Move X2, [X21]
	044 Move W1, 50
	045 Move X21, X0
	046 Call List`1<Object>..ctor, X0, X1
	047 Move [X20+48], X21
	048 Move X0, [X23]
	049 Call 0x1C17F10
	050 Move X2, [X22]
	051 Move W1, 5
	052 Move X21, X0
	053 Call Dictionary`2<Object, Object>..ctor, X0, X1
	054 Move X0, X20
	055 Move X1, X31
	056 Move [X20+64], X21
	057 Call Object..ctor, X0
	058 Move X0, X20
	059 Move X1, X19
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Move X25, [X31+72]
	068 Call Value.set_TimeSpan, X0, X1
	069 Return 

Method: System.Void .ctor(UnityEngine.Color value)

Disassembly:
	0x031DDD58 MOV X1, X19
	0x031DDD5C MOV X20, X0
	0x031DDD60 BL 0x31DD564
	0x031DDD64 MOV X0, X20
	0x031DDD68 LDP X20, X19, [X31 + 0x30]
	0x031DDD6C LDP X22, X21, [X31 + 0x20]
	0x031DDD70 LDP X24, X23, [X31 + 0x10]
	0x031DDD74 LDR X30, [X31], #0x40
	0x031DDD78 RET
	0x031DDD7C STR X30, [X31 - 0x40]!
	0x031DDD80 STP X24, X23, [X31 + 0x10]
	0x031DDD84 STP X22, X21, [X31 + 0x20]
	0x031DDD88 STP X20, X19, [X31 + 0x30]
	0x031DDD8C ADRP X20, 0x11FF000
	0x031DDD90 LDRB W8, [X20 + 0xCC]
	0x031DDD94 MOV X19, X0
	0x031DDD98 TBNZ X8, 0x0, 0x31DDDEC
	0x031DDD9C ADRP X0, 0xF43000
	0x031DDDA0 LDR X0, [X0 + 0x430]
	0x031DDDA4 BL 0x1C16CF4
	0x031DDDA8 ADRP X0, 0xF43000
	0x031DDDAC LDR X0, [X0 + 0x438]
	0x031DDDB0 BL 0x1C16CF4
	0x031DDDB4 ADRP X0, 0xF43000
	0x031DDDB8 LDR X0, [X0 + 0x448]
	0x031DDDBC BL 0x1C16CF4
	0x031DDDC0 ADRP X0, 0xF43000
	0x031DDDC4 LDR X0, [X0 + 0x450]
	0x031DDDC8 BL 0x1C16CF4
	0x031DDDCC ADRP X0, 0xF43000
	0x031DDDD0 LDR X0, [X0 + 0x260]
	0x031DDDD4 BL 0x1C16CF4
	0x031DDDD8 ADRP X0, 0xF1B000
	0x031DDDDC LDR X0, [X0 + 0x748]
	0x031DDDE0 BL 0x1C16CF4
	0x031DDDE4 MOVZ W8, 0x1
	0x031DDDE8 STRB W8, [X20 + 0xCC]
	0x031DDDEC CBZ X19, 0x31DDEDC
	0x031DDDF0 ADRP X8, 0xF43000
	0x031DDDF4 LDR X8, [X8 + 0x448]
	0x031DDDF8 ADRP X22, 0xF43000
	0x031DDDFC MOV X0, X19
	0x031DDE00 LDR X1, [X8]
	0x031DDE04 LDR X22, [X22 + 0x260]
	0x031DDE08 BL 0x3061A54
	0x031DDE0C LDR X8, [X22]
	0x031DDE10 MOV X19, X0
	0x031DDE14 LDR W9, [X8 + 0xE0]
	0x031DDE18 CBNZ W9, 0x31DDE28
	0x031DDE1C MOV X0, X8
	0x031DDE20 BL 0x1C16DFC
	0x031DDE24 LDR X8, [X22]
	0x031DDE28 LDR X9, [X8 + 0xB8]
	0x031DDE2C ADRP X24, 0xF43000
	0x031DDE30 ADRP X23, 0xF1B000
	0x031DDE34 LDR X20, [X9 + 0x30]
	0x031DDE38 LDR X24, [X24 + 0x430]
	0x031DDE3C LDR X23, [X23 + 0x748]
	0x031DDE40 CBNZ X20, 0x31DDE98
	0x031DDE44 LDR W9, [X8 + 0xE0]
	0x031DDE48 CBNZ W9, 0x31DDE58
	0x031DDE4C MOV X0, X8
	0x031DDE50 BL 0x1C16DFC
	0x031DDE54 LDR X8, [X22]
	0x031DDE58 ADRP X9, 0xF43000
	0x031DDE5C LDR X8, [X8 + 0xB8]
	0x031DDE60 LDR X9, [X9 + 0x438]

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X24, 0x1200000
	013 Move X23, 0xF43000
	014 Move X20, 0xF43000
	015 Move X22, 0xF43000
	016 Move X21, 0xF43000
	017 Move W8, [X24+183]
	018 Move X23, [X23+4040]
	019 Move X20, [X20+4048]
	020 Move X22, [X22+4056]
	021 Move X21, [X21+4064]
	022 Move V8, V3
	023 Move V9, V2
	024 Move V10, V1
	025 Move V11, V0
	026 Move X19, X0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {45}
	031 Move X0, 0xF43000
	032 Move X0, [X0+4064]
	033 Call 0x1C17CF4
	034 Move X0, 0xF43000
	035 Move X0, [X0+4056]
	036 Call 0x1C17CF4
	037 Move X0, 0xF43000
	038 Move X0, [X0+4048]
	039 Call 0x1C17CF4
	040 Move X0, 0xF43000
	041 Move X0, [X0+4040]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X24+183], W8
	045 Move W8, 6
	046 Move [X19+16], W8
	047 Move X0, [X23]
	048 Call 0x1C17F10
	049 Move X2, [X20]
	050 Move W1, 50
	051 Move X20, X0
	052 Call List`1<Object>..ctor, X0, X1
	053 Move [X19+48], X20
	054 Move X0, [X22]
	055 Call 0x1C17F10
	056 Move X2, [X21]
	057 Move W1, 5
	058 Move X20, X0
	059 Call Dictionary`2<Object, Object>..ctor, X0, X1
	060 Move X0, X19
	061 Move X1, X31
	062 Move [X19+64], X20
	063 Call Object..ctor, X0
	064 Move X0, X19
	065 Move V2, V9
	066 Move V3, V8
	067 Move X20, [X31+80]
	068 Move X19, [X31+88]
	069 Move X22, [X31+64]
	070 Move X21, [X31+72]
	071 Move X24, [X31+48]
	072 Move X23, [X31+56]
	073 Move X30, [X31+32]
	074 Move D9, [X31+16]
	075 Move D8, [X31+24]
	076 Move V0, V11
	077 Move V1, V10
	078 Move D11, [X31+96]
	079 Move D10, [X31+104]
	080 Call Value.set_Color, X0, X1
	081 Return 

Method: System.Void .ctor(UnityEngine.Color32 value)

Disassembly:
	0x031DDE64 LDR X21, [X8]
	0x031DDE68 LDR X0, [X9]
	0x031DDE6C BL 0x1C16F10
	0x031DDE70 ADRP X8, 0xF43000
	0x031DDE74 LDR X8, [X8 + 0x450]
	0x031DDE78 MOV X1, X21
	0x031DDE7C MOV X3, X31
	0x031DDE80 MOV X20, X0
	0x031DDE84 LDR X2, [X8]
	0x031DDE88 BL 0x29A9BA4
	0x031DDE8C LDR X8, [X22]
	0x031DDE90 LDR X8, [X8 + 0xB8]
	0x031DDE94 STR X20, [X8 + 0x30]
	0x031DDE98 LDR X2, [X24]
	0x031DDE9C MOV X0, X19
	0x031DDEA0 MOV X1, X20
	0x031DDEA4 BL 0x22E43CC
	0x031DDEA8 LDR X8, [X23]
	0x031DDEAC MOV X19, X0
	0x031DDEB0 MOV X0, X8
	0x031DDEB4 BL 0x1C16F10
	0x031DDEB8 MOV X1, X19
	0x031DDEBC MOV X20, X0
	0x031DDEC0 BL 0x31DD564
	0x031DDEC4 MOV X0, X20
	0x031DDEC8 LDP X20, X19, [X31 + 0x30]
	0x031DDECC LDP X22, X21, [X31 + 0x20]
	0x031DDED0 LDP X24, X23, [X31 + 0x10]
	0x031DDED4 LDR X30, [X31], #0x40
	0x031DDED8 RET
	0x031DDEDC BL 0x1C16F20
	0x031DDEE0 STR X30, [X31 - 0x40]!
	0x031DDEE4 STP X24, X23, [X31 + 0x10]
	0x031DDEE8 STP X22, X21, [X31 + 0x20]
	0x031DDEEC STP X20, X19, [X31 + 0x30]
	0x031DDEF0 ADRP X20, 0x11FF000
	0x031DDEF4 ADRP X22, 0xF43000
	0x031DDEF8 LDRB W8, [X20 + 0xCE]
	0x031DDEFC LDR X22, [X22 + 0x260]
	0x031DDF00 MOV X19, X0
	0x031DDF04 TBNZ X8, 0x0, 0x31DDF4C
	0x031DDF08 ADRP X0, 0xF43000
	0x031DDF0C LDR X0, [X0 + 0x458]
	0x031DDF10 BL 0x1C16CF4
	0x031DDF14 ADRP X0, 0xF43000
	0x031DDF18 LDR X0, [X0 + 0x460]
	0x031DDF1C BL 0x1C16CF4
	0x031DDF20 ADRP X0, 0xF43000
	0x031DDF24 LDR X0, [X0 + 0x468]
	0x031DDF28 BL 0x1C16CF4
	0x031DDF2C ADRP X0, 0xF43000
	0x031DDF30 LDR X0, [X0 + 0x260]
	0x031DDF34 BL 0x1C16CF4
	0x031DDF38 ADRP X0, 0xF1B000
	0x031DDF3C LDR X0, [X0 + 0x748]
	0x031DDF40 BL 0x1C16CF4
	0x031DDF44 MOVZ W8, 0x1

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x1200000
	010 Move X24, 0xF43000
	011 Move X21, 0xF43000
	012 Move X23, 0xF43000
	013 Move X22, 0xF43000
	014 Move W8, [X25+184]
	015 Move X24, [X24+4040]
	016 Move X21, [X21+4048]
	017 Move X23, [X23+4056]
	018 Move X22, [X22+4064]
	019 Move X20, X1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {39}
	025 Move X0, 0xF43000
	026 Move X0, [X0+4064]
	027 Call 0x1C17CF4
	028 Move X0, 0xF43000
	029 Move X0, [X0+4056]
	030 Call 0x1C17CF4
	031 Move X0, 0xF43000
	032 Move X0, [X0+4048]
	033 Call 0x1C17CF4
	034 Move X0, 0xF43000
	035 Move X0, [X0+4040]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X25+184], W8
	039 Move W8, 6
	040 Move [X19+16], W8
	041 Move X0, [X24]
	042 Call 0x1C17F10
	043 Move X2, [X21]
	044 Move W1, 50
	045 Move X21, X0
	046 Call List`1<Object>..ctor, X0, X1
	047 Move [X19+48], X21
	048 Move X0, [X23]
	049 Call 0x1C17F10
	050 Move X2, [X22]
	051 Move W1, 5
	052 Move X21, X0
	053 Call Dictionary`2<Object, Object>..ctor, X0, X1
	054 Move X0, X19
	055 Move X1, X31
	056 Move [X19+64], X21
	057 Call Object..ctor, X0
	058 And X1, X20, 0
	059 Move X0, X19
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Move X25, [X31+72]
	068 Call Value.set_Color32, X0, X1
	069 Return 

Method: System.Void .ctor(UnityEngine.Vector2 value)

Disassembly:
	0x031DDF48 STRB W8, [X20 + 0xCE]
	0x031DDF4C LDR X0, [X22]
	0x031DDF50 LDR W8, [X0 + 0xE0]
	0x031DDF54 CBNZ W8, 0x31DDF60
	0x031DDF58 BL 0x1C16DFC
	0x031DDF5C LDR X0, [X22]
	0x031DDF60 LDR X8, [X0 + 0xB8]
	0x031DDF64 ADRP X24, 0xF43000
	0x031DDF68 ADRP X23, 0xF1B000
	0x031DDF6C LDR X20, [X8 + 0x38]
	0x031DDF70 LDR X24, [X24 + 0x458]
	0x031DDF74 LDR X23, [X23 + 0x748]
	0x031DDF78 CBNZ X20, 0x31DDFCC
	0x031DDF7C LDR W8, [X0 + 0xE0]
	0x031DDF80 CBNZ W8, 0x31DDF8C
	0x031DDF84 BL 0x1C16DFC
	0x031DDF88 LDR X0, [X22]
	0x031DDF8C ADRP X9, 0xF43000
	0x031DDF90 LDR X8, [X0 + 0xB8]
	0x031DDF94 LDR X9, [X9 + 0x460]
	0x031DDF98 LDR X21, [X8]
	0x031DDF9C LDR X0, [X9]
	0x031DDFA0 BL 0x1C16F10
	0x031DDFA4 ADRP X8, 0xF43000
	0x031DDFA8 LDR X8, [X8 + 0x468]
	0x031DDFAC MOV X1, X21
	0x031DDFB0 MOV X3, X31
	0x031DDFB4 MOV X20, X0
	0x031DDFB8 LDR X2, [X8]
	0x031DDFBC BL 0x29A7B00
	0x031DDFC0 LDR X8, [X22]
	0x031DDFC4 LDR X8, [X8 + 0xB8]
	0x031DDFC8 STR X20, [X8 + 0x38]
	0x031DDFCC LDR X2, [X24]
	0x031DDFD0 MOV X0, X19
	0x031DDFD4 MOV X1, X20
	0x031DDFD8 BL 0x22E392C
	0x031DDFDC LDR X8, [X23]
	0x031DDFE0 MOV X19, X0
	0x031DDFE4 MOV X0, X8
	0x031DDFE8 BL 0x1C16F10
	0x031DDFEC MOV X1, X19
	0x031DDFF0 MOV X20, X0
	0x031DDFF4 BL 0x31DD564
	0x031DDFF8 MOV X0, X20
	0x031DDFFC LDP X20, X19, [X31 + 0x30]
	0x031DE000 LDP X22, X21, [X31 + 0x20]
	0x031DE004 LDP X24, X23, [X31 + 0x10]
	0x031DE008 LDR X30, [X31], #0x40
	0x031DE00C RET
	0x031DE010 STR X30, [X31 - 0x40]!
	0x031DE014 STP X24, X23, [X31 + 0x10]
	0x031DE018 STP X22, X21, [X31 + 0x20]
	0x031DE01C STP X20, X19, [X31 + 0x30]
	0x031DE020 ADRP X20, 0x11FE000
	0x031DE024 LDRB W8, [X20 + 0xCF]
	0x031DE028 MOV X19, X0
	0x031DE02C TBNZ X8, 0x0, 0x31DE080
	0x031DE030 ADRP X0, 0xF42000
	0x031DE034 LDR X0, [X0 + 0x458]
	0x031DE038 BL 0x1C16CF4

ISIL:
	001 Move [X31-80], D9
	002 Move [X31-72], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0x1200000
	011 Move X23, 0xF43000
	012 Move X20, 0xF43000
	013 Move X22, 0xF43000
	014 Move X21, 0xF43000
	015 Move W8, [X24+185]
	016 Move X23, [X23+4040]
	017 Move X20, [X20+4048]
	018 Move X22, [X22+4056]
	019 Move X21, [X21+4064]
	020 Move V8, V1
	021 Move V9, V0
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {41}
	027 Move X0, 0xF43000
	028 Move X0, [X0+4064]
	029 Call 0x1C17CF4
	030 Move X0, 0xF43000
	031 Move X0, [X0+4056]
	032 Call 0x1C17CF4
	033 Move X0, 0xF43000
	034 Move X0, [X0+4048]
	035 Call 0x1C17CF4
	036 Move X0, 0xF43000
	037 Move X0, [X0+4040]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X24+185], W8
	041 Move W8, 6
	042 Move [X19+16], W8
	043 Move X0, [X23]
	044 Call 0x1C17F10
	045 Move X2, [X20]
	046 Move W1, 50
	047 Move X20, X0
	048 Call List`1<Object>..ctor, X0, X1
	049 Move [X19+48], X20
	050 Move X0, [X22]
	051 Call 0x1C17F10
	052 Move X2, [X21]
	053 Move W1, 5
	054 Move X20, X0
	055 Call Dictionary`2<Object, Object>..ctor, X0, X1
	056 Move X0, X19
	057 Move X1, X31
	058 Move [X19+64], X20
	059 Call Object..ctor, X0
	060 Move X0, X19
	061 Move X20, [X31+64]
	062 Move X19, [X31+72]
	063 Move X22, [X31+48]
	064 Move X21, [X31+56]
	065 Move X24, [X31+32]
	066 Move X23, [X31+40]
	067 Move X30, [X31+16]
	068 Move V0, V9
	069 Move V1, V8
	070 Move D9, [X31+80]
	071 Move D8, [X31+88]
	072 Call Value.set_Vector2, X0, X1
	073 Return 

Method: System.Void .ctor(UnityEngine.Vector3 value)

Disassembly:
	0x031DE03C ADRP X0, 0xF42000
	0x031DE040 LDR X0, [X0 + 0x460]
	0x031DE044 BL 0x1C16CF4
	0x031DE048 ADRP X0, 0xF42000
	0x031DE04C LDR X0, [X0 + 0x470]
	0x031DE050 BL 0x1C16CF4
	0x031DE054 ADRP X0, 0xF42000
	0x031DE058 LDR X0, [X0 + 0x478]
	0x031DE05C BL 0x1C16CF4
	0x031DE060 ADRP X0, 0xF42000
	0x031DE064 LDR X0, [X0 + 0x260]
	0x031DE068 BL 0x1C16CF4
	0x031DE06C ADRP X0, 0xF1A000
	0x031DE070 LDR X0, [X0 + 0x748]
	0x031DE074 BL 0x1C16CF4
	0x031DE078 MOVZ W8, 0x1
	0x031DE07C STRB W8, [X20 + 0xCF]
	0x031DE080 CBZ X19, 0x31DE170
	0x031DE084 ADRP X8, 0xF42000
	0x031DE088 LDR X8, [X8 + 0x470]
	0x031DE08C ADRP X22, 0xF42000
	0x031DE090 MOV X0, X19
	0x031DE094 LDR X1, [X8]
	0x031DE098 LDR X22, [X22 + 0x260]
	0x031DE09C BL 0x2FB3CE4
	0x031DE0A0 LDR X8, [X22]
	0x031DE0A4 MOV X19, X0
	0x031DE0A8 LDR W9, [X8 + 0xE0]
	0x031DE0AC CBNZ W9, 0x31DE0BC
	0x031DE0B0 MOV X0, X8
	0x031DE0B4 BL 0x1C16DFC
	0x031DE0B8 LDR X8, [X22]
	0x031DE0BC LDR X9, [X8 + 0xB8]
	0x031DE0C0 ADRP X24, 0xF42000
	0x031DE0C4 ADRP X23, 0xF1A000
	0x031DE0C8 LDR X20, [X9 + 0x40]
	0x031DE0CC LDR X24, [X24 + 0x458]
	0x031DE0D0 LDR X23, [X23 + 0x748]
	0x031DE0D4 CBNZ X20, 0x31DE12C
	0x031DE0D8 LDR W9, [X8 + 0xE0]
	0x031DE0DC CBNZ W9, 0x31DE0EC
	0x031DE0E0 MOV X0, X8
	0x031DE0E4 BL 0x1C16DFC
	0x031DE0E8 LDR X8, [X22]
	0x031DE0EC ADRP X9, 0xF42000
	0x031DE0F0 LDR X8, [X8 + 0xB8]
	0x031DE0F4 LDR X9, [X9 + 0x460]
	0x031DE0F8 LDR X21, [X8]
	0x031DE0FC LDR X0, [X9]
	0x031DE100 BL 0x1C16F10
	0x031DE104 ADRP X8, 0xF42000
	0x031DE108 LDR X8, [X8 + 0x478]
	0x031DE10C MOV X1, X21
	0x031DE110 MOV X3, X31
	0x031DE114 MOV X20, X0
	0x031DE118 LDR X2, [X8]
	0x031DE11C BL 0x29A7B00
	0x031DE120 LDR X8, [X22]
	0x031DE124 LDR X8, [X8 + 0xB8]
	0x031DE128 STR X20, [X8 + 0x40]
	0x031DE12C LDR X2, [X24]
	0x031DE130 MOV X0, X19
	0x031DE134 MOV X1, X20
	0x031DE138 BL 0x22E392C
	0x031DE13C LDR X8, [X23]

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X24, 0x11FF000
	012 Move X23, 0xF42000
	013 Move X20, 0xF42000
	014 Move X22, 0xF42000
	015 Move X21, 0xF42000
	016 Move W8, [X24+186]
	017 Move X23, [X23+4040]
	018 Move X20, [X20+4048]
	019 Move X22, [X22+4056]
	020 Move X21, [X21+4064]
	021 Move V8, V2
	022 Move V9, V1
	023 Move V10, V0
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {43}
	029 Move X0, 0xF42000
	030 Move X0, [X0+4064]
	031 Call 0x1C17CF4
	032 Move X0, 0xF42000
	033 Move X0, [X0+4056]
	034 Call 0x1C17CF4
	035 Move X0, 0xF42000
	036 Move X0, [X0+4048]
	037 Call 0x1C17CF4
	038 Move X0, 0xF42000
	039 Move X0, [X0+4040]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X24+186], W8
	043 Move W8, 6
	044 Move [X19+16], W8
	045 Move X0, [X23]
	046 Call 0x1C17F10
	047 Move X2, [X20]
	048 Move W1, 50
	049 Move X20, X0
	050 Call List`1<Object>..ctor, X0, X1
	051 Move [X19+48], X20
	052 Move X0, [X22]
	053 Call 0x1C17F10
	054 Move X2, [X21]
	055 Move W1, 5
	056 Move X20, X0
	057 Call Dictionary`2<Object, Object>..ctor, X0, X1
	058 Move X0, X19
	059 Move X1, X31
	060 Move [X19+64], X20
	061 Call Object..ctor, X0
	062 Move X0, X19
	063 Move V1, V9
	064 Move V2, V8
	065 Move X20, [X31+64]
	066 Move X19, [X31+72]
	067 Move X22, [X31+48]
	068 Move X21, [X31+56]
	069 Move X24, [X31+32]
	070 Move X23, [X31+40]
	071 Move X30, [X31+24]
	072 Move D9, [X31+8]
	073 Move D8, [X31+16]
	074 Move V0, V10
	075 Move V10, [X31+80]
	076 Call Value.set_Vector3, X0, X1
	077 Return 

Method: System.Void .ctor(UnityEngine.Vector4 value)

Disassembly:
	0x031DE140 MOV X19, X0
	0x031DE144 MOV X0, X8
	0x031DE148 BL 0x1C16F10
	0x031DE14C MOV X1, X19
	0x031DE150 MOV X20, X0
	0x031DE154 BL 0x31DD564
	0x031DE158 MOV X0, X20
	0x031DE15C LDP X20, X19, [X31 + 0x30]
	0x031DE160 LDP X22, X21, [X31 + 0x20]
	0x031DE164 LDP X24, X23, [X31 + 0x10]
	0x031DE168 LDR X30, [X31], #0x40
	0x031DE16C RET
	0x031DE170 BL 0x1C16F20
	0x031DE174 STR D8, [X31 - 0x30]!
	0x031DE178 STR X30, [X31 + 0x8]
	0x031DE17C STP X22, X21, [X31 + 0x10]
	0x031DE180 STP X20, X19, [X31 + 0x20]
	0x031DE184 ADRP X22, 0x11FE000
	0x031DE188 ADRP X21, 0xF3D000
	0x031DE18C LDRB W8, [X22 + 0xD0]
	0x031DE190 LDR X21, [X21 + 0x5F0]
	0x031DE194 MOV X19, X1
	0x031DE198 MOV X20, X0
	0x031DE19C TBNZ X8, 0x0, 0x31DE1C0
	0x031DE1A0 ADRP X0, 0xF3D000
	0x031DE1A4 LDR X0, [X0 + 0x5F0]
	0x031DE1A8 BL 0x1C16CF4
	0x031DE1AC ADRP X0, 0xF1A000
	0x031DE1B0 LDR X0, [X0 + 0x748]
	0x031DE1B4 BL 0x1C16CF4
	0x031DE1B8 MOVZ W8, 0x1
	0x031DE1BC STRB W8, [X22 + 0xD0]
	0x031DE1C0 LDR X0, [X21]
	0x031DE1C4 ADRP X21, 0xF1A000
	0x031DE1C8 LDR W8, [X0 + 0xE0]
	0x031DE1CC LDR X21, [X21 + 0x748]
	0x031DE1D0 CBNZ W8, 0x31DE1D8
	0x031DE1D4 BL 0x1C16DFC
	0x031DE1D8 MOV X0, X20
	0x031DE1DC MOV X1, X19
	0x031DE1E0 MOV X2, X31
	0x031DE1E4 BL 0x33D90E0
	0x031DE1E8 LDR X0, [X21]
	0x031DE1EC MOV V8.16B, V0.16B
	0x031DE1F0 BL 0x1C16F10
	0x031DE1F4 MOV V0.16B, V8.16B
	0x031DE1F8 MOV X19, X0
	0x031DE1FC BL 0x31DC7B4
	0x031DE200 MOV X0, X19
	0x031DE204 LDP X20, X19, [X31 + 0x20]
	0x031DE208 LDP X22, X21, [X31 + 0x10]
	0x031DE20C LDR X30, [X31 + 0x8]
	0x031DE210 LDR V8, [X31], #0x30
	0x031DE214 RET
	0x031DE218 STR X30, [X31 - 0x40]!
	0x031DE21C STP X24, X23, [X31 + 0x10]
	0x031DE220 STP X22, X21, [X31 + 0x20]
	0x031DE224 STP X20, X19, [X31 + 0x30]
	0x031DE228 ADRP X20, 0x11FE000
	0x031DE22C ADRP X22, 0xF42000
	0x031DE230 LDRB W8, [X20 + 0xD1]
	0x031DE234 LDR X22, [X22 + 0x260]
	0x031DE238 MOV X19, X0
	0x031DE23C TBNZ X8, 0x0, 0x31DE284
	0x031DE240 ADRP X0, 0xF42000
	0x031DE244 LDR X0, [X0 + 0x480]
	0x031DE248 BL 0x1C16CF4

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X24, 0x11FF000
	013 Move X23, 0xF42000
	014 Move X20, 0xF42000
	015 Move X22, 0xF42000
	016 Move X21, 0xF42000
	017 Move W8, [X24+187]
	018 Move X23, [X23+4040]
	019 Move X20, [X20+4048]
	020 Move X22, [X22+4056]
	021 Move X21, [X21+4064]
	022 Move V8, V3
	023 Move V9, V2
	024 Move V10, V1
	025 Move V11, V0
	026 Move X19, X0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {45}
	031 Move X0, 0xF42000
	032 Move X0, [X0+4064]
	033 Call 0x1C17CF4
	034 Move X0, 0xF42000
	035 Move X0, [X0+4056]
	036 Call 0x1C17CF4
	037 Move X0, 0xF42000
	038 Move X0, [X0+4048]
	039 Call 0x1C17CF4
	040 Move X0, 0xF42000
	041 Move X0, [X0+4040]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X24+187], W8
	045 Move W8, 6
	046 Move [X19+16], W8
	047 Move X0, [X23]
	048 Call 0x1C17F10
	049 Move X2, [X20]
	050 Move W1, 50
	051 Move X20, X0
	052 Call List`1<Object>..ctor, X0, X1
	053 Move [X19+48], X20
	054 Move X0, [X22]
	055 Call 0x1C17F10
	056 Move X2, [X21]
	057 Move W1, 5
	058 Move X20, X0
	059 Call Dictionary`2<Object, Object>..ctor, X0, X1
	060 Move X0, X19
	061 Move X1, X31
	062 Move [X19+64], X20
	063 Call Object..ctor, X0
	064 Move X0, X19
	065 Move V2, V9
	066 Move V3, V8
	067 Move X20, [X31+80]
	068 Move X19, [X31+88]
	069 Move X22, [X31+64]
	070 Move X21, [X31+72]
	071 Move X24, [X31+48]
	072 Move X23, [X31+56]
	073 Move X30, [X31+32]
	074 Move D9, [X31+16]
	075 Move D8, [X31+24]
	076 Move V0, V11
	077 Move V1, V10
	078 Move D11, [X31+96]
	079 Move D10, [X31+104]
	080 Call Value.set_Vector4, X0, X1
	081 Return 

Method: System.Void .ctor(UnityEngine.Quaternion value)

Disassembly:
	0x031DE24C ADRP X0, 0xF42000
	0x031DE250 LDR X0, [X0 + 0x488]
	0x031DE254 BL 0x1C16CF4
	0x031DE258 ADRP X0, 0xF42000
	0x031DE25C LDR X0, [X0 + 0x490]
	0x031DE260 BL 0x1C16CF4
	0x031DE264 ADRP X0, 0xF42000
	0x031DE268 LDR X0, [X0 + 0x260]
	0x031DE26C BL 0x1C16CF4
	0x031DE270 ADRP X0, 0xF1A000
	0x031DE274 LDR X0, [X0 + 0x748]
	0x031DE278 BL 0x1C16CF4
	0x031DE27C MOVZ W8, 0x1
	0x031DE280 STRB W8, [X20 + 0xD1]
	0x031DE284 LDR X0, [X22]
	0x031DE288 LDR W8, [X0 + 0xE0]
	0x031DE28C CBNZ W8, 0x31DE298
	0x031DE290 BL 0x1C16DFC
	0x031DE294 LDR X0, [X22]
	0x031DE298 LDR X8, [X0 + 0xB8]
	0x031DE29C ADRP X24, 0xF42000
	0x031DE2A0 ADRP X23, 0xF1A000
	0x031DE2A4 LDR X20, [X8 + 0x48]
	0x031DE2A8 LDR X24, [X24 + 0x480]
	0x031DE2AC LDR X23, [X23 + 0x748]
	0x031DE2B0 CBNZ X20, 0x31DE304
	0x031DE2B4 LDR W8, [X0 + 0xE0]
	0x031DE2B8 CBNZ W8, 0x31DE2C4
	0x031DE2BC BL 0x1C16DFC
	0x031DE2C0 LDR X0, [X22]
	0x031DE2C4 ADRP X9, 0xF42000
	0x031DE2C8 LDR X8, [X0 + 0xB8]
	0x031DE2CC LDR X9, [X9 + 0x488]
	0x031DE2D0 LDR X21, [X8]
	0x031DE2D4 LDR X0, [X9]
	0x031DE2D8 BL 0x1C16F10
	0x031DE2DC ADRP X8, 0xF42000
	0x031DE2E0 LDR X8, [X8 + 0x490]
	0x031DE2E4 MOV X1, X21
	0x031DE2E8 MOV X3, X31
	0x031DE2EC MOV X20, X0
	0x031DE2F0 LDR X2, [X8]
	0x031DE2F4 BL 0x29A7A60
	0x031DE2F8 LDR X8, [X22]
	0x031DE2FC LDR X8, [X8 + 0xB8]
	0x031DE300 STR X20, [X8 + 0x48]
	0x031DE304 LDR X2, [X24]
	0x031DE308 MOV X0, X19
	0x031DE30C MOV X1, X20
	0x031DE310 BL 0x22E37FC
	0x031DE314 LDR X8, [X23]
	0x031DE318 MOV X19, X0
	0x031DE31C MOV X0, X8
	0x031DE320 BL 0x1C16F10
	0x031DE324 MOV X1, X19
	0x031DE328 MOV X20, X0
	0x031DE32C BL 0x31DD564
	0x031DE330 MOV X0, X20
	0x031DE334 LDP X20, X19, [X31 + 0x30]
	0x031DE338 LDP X22, X21, [X31 + 0x20]
	0x031DE33C LDP X24, X23, [X31 + 0x10]
	0x031DE340 LDR X30, [X31], #0x40
	0x031DE344 RET
	0x031DE348 STR X30, [X31 - 0x40]!
	0x031DE34C STP X24, X23, [X31 + 0x10]
	0x031DE350 STP X22, X21, [X31 + 0x20]
	0x031DE354 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X24, 0x11FF000
	013 Move X23, 0xF42000
	014 Move X20, 0xF42000
	015 Move X22, 0xF42000
	016 Move X21, 0xF42000
	017 Move W8, [X24+188]
	018 Move X23, [X23+4040]
	019 Move X20, [X20+4048]
	020 Move X22, [X22+4056]
	021 Move X21, [X21+4064]
	022 Move V8, V3
	023 Move V9, V2
	024 Move V10, V1
	025 Move V11, V0
	026 Move X19, X0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {45}
	031 Move X0, 0xF42000
	032 Move X0, [X0+4064]
	033 Call 0x1C17CF4
	034 Move X0, 0xF42000
	035 Move X0, [X0+4056]
	036 Call 0x1C17CF4
	037 Move X0, 0xF42000
	038 Move X0, [X0+4048]
	039 Call 0x1C17CF4
	040 Move X0, 0xF42000
	041 Move X0, [X0+4040]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X24+188], W8
	045 Move W8, 6
	046 Move [X19+16], W8
	047 Move X0, [X23]
	048 Call 0x1C17F10
	049 Move X2, [X20]
	050 Move W1, 50
	051 Move X20, X0
	052 Call List`1<Object>..ctor, X0, X1
	053 Move [X19+48], X20
	054 Move X0, [X22]
	055 Call 0x1C17F10
	056 Move X2, [X21]
	057 Move W1, 5
	058 Move X20, X0
	059 Call Dictionary`2<Object, Object>..ctor, X0, X1
	060 Move X0, X19
	061 Move X1, X31
	062 Move [X19+64], X20
	063 Call Object..ctor, X0
	064 Move X0, X19
	065 Move V2, V9
	066 Move V3, V8
	067 Move X20, [X31+80]
	068 Move X19, [X31+88]
	069 Move X22, [X31+64]
	070 Move X21, [X31+72]
	071 Move X24, [X31+48]
	072 Move X23, [X31+56]
	073 Move X30, [X31+32]
	074 Move D9, [X31+16]
	075 Move D8, [X31+24]
	076 Move V0, V11
	077 Move V1, V10
	078 Move D11, [X31+96]
	079 Move D10, [X31+104]
	080 Call Value.set_Quaternion, X0, X1
	081 Return 

Method: System.Void .ctor(UnityEngine.Bounds value)

Disassembly:
	0x031DE358 ADRP X20, 0x11FE000
	0x031DE35C LDRB W8, [X20 + 0xD2]
	0x031DE360 MOV X19, X0
	0x031DE364 TBNZ X8, 0x0, 0x31DE3B8
	0x031DE368 ADRP X0, 0xF42000
	0x031DE36C LDR X0, [X0 + 0x480]
	0x031DE370 BL 0x1C16CF4
	0x031DE374 ADRP X0, 0xF42000
	0x031DE378 LDR X0, [X0 + 0x488]
	0x031DE37C BL 0x1C16CF4
	0x031DE380 ADRP X0, 0xF42000
	0x031DE384 LDR X0, [X0 + 0x498]
	0x031DE388 BL 0x1C16CF4
	0x031DE38C ADRP X0, 0xF42000
	0x031DE390 LDR X0, [X0 + 0x4A0]
	0x031DE394 BL 0x1C16CF4
	0x031DE398 ADRP X0, 0xF42000
	0x031DE39C LDR X0, [X0 + 0x260]
	0x031DE3A0 BL 0x1C16CF4
	0x031DE3A4 ADRP X0, 0xF1A000
	0x031DE3A8 LDR X0, [X0 + 0x748]
	0x031DE3AC BL 0x1C16CF4
	0x031DE3B0 MOVZ W8, 0x1
	0x031DE3B4 STRB W8, [X20 + 0xD2]
	0x031DE3B8 CBZ X19, 0x31DE4A8
	0x031DE3BC ADRP X8, 0xF42000
	0x031DE3C0 LDR X8, [X8 + 0x498]
	0x031DE3C4 ADRP X22, 0xF42000
	0x031DE3C8 MOV X0, X19
	0x031DE3CC LDR X1, [X8]
	0x031DE3D0 LDR X22, [X22 + 0x260]
	0x031DE3D4 BL 0x2FAE0E8
	0x031DE3D8 LDR X8, [X22]
	0x031DE3DC MOV X19, X0
	0x031DE3E0 LDR W9, [X8 + 0xE0]
	0x031DE3E4 CBNZ W9, 0x31DE3F4
	0x031DE3E8 MOV X0, X8
	0x031DE3EC BL 0x1C16DFC
	0x031DE3F0 LDR X8, [X22]
	0x031DE3F4 LDR X9, [X8 + 0xB8]
	0x031DE3F8 ADRP X24, 0xF42000
	0x031DE3FC ADRP X23, 0xF1A000
	0x031DE400 LDR X20, [X9 + 0x50]
	0x031DE404 LDR X24, [X24 + 0x480]
	0x031DE408 LDR X23, [X23 + 0x748]
	0x031DE40C CBNZ X20, 0x31DE464
	0x031DE410 LDR W9, [X8 + 0xE0]
	0x031DE414 CBNZ W9, 0x31DE424
	0x031DE418 MOV X0, X8
	0x031DE41C BL 0x1C16DFC
	0x031DE420 LDR X8, [X22]
	0x031DE424 ADRP X9, 0xF42000
	0x031DE428 LDR X8, [X8 + 0xB8]
	0x031DE42C LDR X9, [X9 + 0x488]
	0x031DE430 LDR X21, [X8]
	0x031DE434 LDR X0, [X9]
	0x031DE438 BL 0x1C16F10
	0x031DE43C ADRP X8, 0xF42000
	0x031DE440 LDR X8, [X8 + 0x4A0]
	0x031DE444 MOV X1, X21
	0x031DE448 MOV X3, X31
	0x031DE44C MOV X20, X0
	0x031DE450 LDR X2, [X8]
	0x031DE454 BL 0x29A7A60

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+40], X25
	004 Move [X31+48], X24
	005 Move [X31+56], X23
	006 Move [X31+64], X22
	007 Move [X31+72], X21
	008 Move [X31+80], X20
	009 Move [X31+88], X19
	010 Move X25, 0x11FF000
	011 Move X24, 0xF42000
	012 Move X21, 0xF42000
	013 Move X23, 0xF42000
	014 Move X22, 0xF42000
	015 Move W8, [X25+189]
	016 Move X24, [X24+4040]
	017 Move X21, [X21+4048]
	018 Move X23, [X23+4056]
	019 Move X22, [X22+4064]
	020 Move X20, X1
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {40}
	026 Move X0, 0xF42000
	027 Move X0, [X0+4064]
	028 Call 0x1C17CF4
	029 Move X0, 0xF42000
	030 Move X0, [X0+4056]
	031 Call 0x1C17CF4
	032 Move X0, 0xF42000
	033 Move X0, [X0+4048]
	034 Call 0x1C17CF4
	035 Move X0, 0xF42000
	036 Move X0, [X0+4040]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X25+189], W8
	040 Move W8, 6
	041 Move [X19+16], W8
	042 Move X0, [X24]
	043 Call 0x1C17F10
	044 Move X2, [X21]
	045 Move W1, 50
	046 Move X21, X0
	047 Call List`1<Object>..ctor, X0, X1
	048 Move [X19+48], X21
	049 Move X0, [X23]
	050 Call 0x1C17F10
	051 Move X2, [X22]
	052 Move W1, 5
	053 Move X21, X0
	054 Call Dictionary`2<Object, Object>..ctor, X0, X1
	055 Move X0, X19
	056 Move X1, X31
	057 Move [X19+64], X21
	058 Call Object..ctor, X0
	059 Move X8, [X20+16]
	060 Move V0, [X20]
	061 Add X1, X31, 0
	062 Move X0, X19
	063 Move [X31+16], X8
	064 Move [X31], V0
	065 Call Value.set_Bounds, X0, X1
	066 Move X20, [X31+80]
	067 Move X19, [X31+88]
	068 Move X22, [X31+64]
	069 Move X21, [X31+72]
	070 Move X24, [X31+48]
	071 Move X23, [X31+56]
	072 Move X30, [X31+32]
	073 Move X25, [X31+40]
	074 Add X31, X31, 96
	075 Return 

Method: System.Void .ctor(UnityEngine.Rect value)

Disassembly:
	0x031DE458 LDR X8, [X22]
	0x031DE45C LDR X8, [X8 + 0xB8]
	0x031DE460 STR X20, [X8 + 0x50]
	0x031DE464 LDR X2, [X24]
	0x031DE468 MOV X0, X19
	0x031DE46C MOV X1, X20
	0x031DE470 BL 0x22E37FC
	0x031DE474 LDR X8, [X23]
	0x031DE478 MOV X19, X0
	0x031DE47C MOV X0, X8
	0x031DE480 BL 0x1C16F10
	0x031DE484 MOV X1, X19
	0x031DE488 MOV X20, X0
	0x031DE48C BL 0x31DD564
	0x031DE490 MOV X0, X20
	0x031DE494 LDP X20, X19, [X31 + 0x30]
	0x031DE498 LDP X22, X21, [X31 + 0x20]
	0x031DE49C LDP X24, X23, [X31 + 0x10]
	0x031DE4A0 LDR X30, [X31], #0x40
	0x031DE4A4 RET
	0x031DE4A8 BL 0x1C16F20
	0x031DE4AC STP X30, X21, [X31 - 0x20]!
	0x031DE4B0 STP X20, X19, [X31 + 0x10]
	0x031DE4B4 ADRP X20, 0x11FE000
	0x031DE4B8 ADRP X21, 0xF1A000
	0x031DE4BC LDRB W8, [X20 + 0xD3]
	0x031DE4C0 LDR X21, [X21 + 0x748]
	0x031DE4C4 MOV W19, W0
	0x031DE4C8 TBNZ X8, 0x0, 0x31DE4E0
	0x031DE4CC ADRP X0, 0xF1A000
	0x031DE4D0 LDR X0, [X0 + 0x748]
	0x031DE4D4 BL 0x1C16CF4
	0x031DE4D8 MOVZ W8, 0x1
	0x031DE4DC STRB W8, [X20 + 0xD3]
	0x031DE4E0 LDR X0, [X21]
	0x031DE4E4 BL 0x1C16F10
	0x031DE4E8 SXTH W8, W19
	0x031DE4EC SCVTF D0, W8
	0x031DE4F0 MOV X20, X0
	0x031DE4F4 BL 0x31DC7B4
	0x031DE4F8 MOV X0, X20
	0x031DE4FC LDP X20, X19, [X31 + 0x10]
	0x031DE500 LDP X30, X21, [X31], #0x20
	0x031DE504 RET
	0x031DE508 STR X30, [X31 - 0x40]!
	0x031DE50C STP X24, X23, [X31 + 0x10]
	0x031DE510 STP X22, X21, [X31 + 0x20]
	0x031DE514 STP X20, X19, [X31 + 0x30]
	0x031DE518 ADRP X20, 0x11FE000
	0x031DE51C ADRP X22, 0xF42000
	0x031DE520 LDRB W8, [X20 + 0xD4]
	0x031DE524 LDR X22, [X22 + 0x260]
	0x031DE528 MOV X19, X0
	0x031DE52C TBNZ X8, 0x0, 0x31DE574
	0x031DE530 ADRP X0, 0xF42000
	0x031DE534 LDR X0, [X0 + 0x4A8]
	0x031DE538 BL 0x1C16CF4
	0x031DE53C ADRP X0, 0xF42000
	0x031DE540 LDR X0, [X0 + 0x4B0]
	0x031DE544 BL 0x1C16CF4
	0x031DE548 ADRP X0, 0xF42000
	0x031DE54C LDR X0, [X0 + 0x4B8]
	0x031DE550 BL 0x1C16CF4
	0x031DE554 ADRP X0, 0xF42000
	0x031DE558 LDR X0, [X0 + 0x260]
	0x031DE55C BL 0x1C16CF4
	0x031DE560 ADRP X0, 0xF1A000

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X24, 0x11FF000
	013 Move X23, 0xF42000
	014 Move X20, 0xF42000
	015 Move X22, 0xF42000
	016 Move X21, 0xF42000
	017 Move W8, [X24+190]
	018 Move X23, [X23+4040]
	019 Move X20, [X20+4048]
	020 Move X22, [X22+4056]
	021 Move X21, [X21+4064]
	022 Move V8, V3
	023 Move V9, V2
	024 Move V10, V1
	025 Move V11, V0
	026 Move X19, X0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {45}
	031 Move X0, 0xF42000
	032 Move X0, [X0+4064]
	033 Call 0x1C17CF4
	034 Move X0, 0xF42000
	035 Move X0, [X0+4056]
	036 Call 0x1C17CF4
	037 Move X0, 0xF42000
	038 Move X0, [X0+4048]
	039 Call 0x1C17CF4
	040 Move X0, 0xF42000
	041 Move X0, [X0+4040]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X24+190], W8
	045 Move W8, 6
	046 Move [X19+16], W8
	047 Move X0, [X23]
	048 Call 0x1C17F10
	049 Move X2, [X20]
	050 Move W1, 50
	051 Move X20, X0
	052 Call List`1<Object>..ctor, X0, X1
	053 Move [X19+48], X20
	054 Move X0, [X22]
	055 Call 0x1C17F10
	056 Move X2, [X21]
	057 Move W1, 5
	058 Move X20, X0
	059 Call Dictionary`2<Object, Object>..ctor, X0, X1
	060 Move X0, X19
	061 Move X1, X31
	062 Move [X19+64], X20
	063 Call Object..ctor, X0
	064 Move X0, X19
	065 Move V2, V9
	066 Move V3, V8
	067 Move X20, [X31+80]
	068 Move X19, [X31+88]
	069 Move X22, [X31+64]
	070 Move X21, [X31+72]
	071 Move X24, [X31+48]
	072 Move X23, [X31+56]
	073 Move X30, [X31+32]
	074 Move D9, [X31+16]
	075 Move D8, [X31+24]
	076 Move V0, V11
	077 Move V1, V10
	078 Move D11, [X31+96]
	079 Move D10, [X31+104]
	080 Call Value.set_Rect, X0, X1
	081 Return 

Method: System.Void .ctor(System.Collections.Generic.IEnumerable`1<mixpanel.Value> data)

Disassembly:
	0x031DE564 LDR X0, [X0 + 0x748]
	0x031DE568 BL 0x1C16CF4
	0x031DE56C MOVZ W8, 0x1
	0x031DE570 STRB W8, [X20 + 0xD4]
	0x031DE574 LDR X0, [X22]
	0x031DE578 LDR W8, [X0 + 0xE0]
	0x031DE57C CBNZ W8, 0x31DE588
	0x031DE580 BL 0x1C16DFC
	0x031DE584 LDR X0, [X22]
	0x031DE588 LDR X8, [X0 + 0xB8]
	0x031DE58C ADRP X24, 0xF42000
	0x031DE590 ADRP X23, 0xF1A000
	0x031DE594 LDR X20, [X8 + 0x58]
	0x031DE598 LDR X24, [X24 + 0x4A8]
	0x031DE59C LDR X23, [X23 + 0x748]
	0x031DE5A0 CBNZ X20, 0x31DE5F4
	0x031DE5A4 LDR W8, [X0 + 0xE0]
	0x031DE5A8 CBNZ W8, 0x31DE5B4
	0x031DE5AC BL 0x1C16DFC
	0x031DE5B0 LDR X0, [X22]
	0x031DE5B4 ADRP X9, 0xF42000
	0x031DE5B8 LDR X8, [X0 + 0xB8]
	0x031DE5BC LDR X9, [X9 + 0x4B0]
	0x031DE5C0 LDR X21, [X8]
	0x031DE5C4 LDR X0, [X9]
	0x031DE5C8 BL 0x1C16F10
	0x031DE5CC ADRP X8, 0xF42000
	0x031DE5D0 LDR X8, [X8 + 0x4B8]
	0x031DE5D4 MOV X1, X21
	0x031DE5D8 MOV X3, X31
	0x031DE5DC MOV X20, X0
	0x031DE5E0 LDR X2, [X8]
	0x031DE5E4 BL 0x29A7CE0
	0x031DE5E8 LDR X8, [X22]
	0x031DE5EC LDR X8, [X8 + 0xB8]
	0x031DE5F0 STR X20, [X8 + 0x58]
	0x031DE5F4 LDR X2, [X24]
	0x031DE5F8 MOV X0, X19
	0x031DE5FC MOV X1, X20
	0x031DE600 BL 0x22E3B88
	0x031DE604 LDR X8, [X23]
	0x031DE608 MOV X19, X0
	0x031DE60C MOV X0, X8
	0x031DE610 BL 0x1C16F10
	0x031DE614 MOV X1, X19
	0x031DE618 MOV X20, X0
	0x031DE61C BL 0x31DD564
	0x031DE620 MOV X0, X20
	0x031DE624 LDP X20, X19, [X31 + 0x30]
	0x031DE628 LDP X22, X21, [X31 + 0x20]
	0x031DE62C LDP X24, X23, [X31 + 0x10]
	0x031DE630 LDR X30, [X31], #0x40
	0x031DE634 RET
	0x031DE638 STR X30, [X31 - 0x40]!
	0x031DE63C STP X24, X23, [X31 + 0x10]
	0x031DE640 STP X22, X21, [X31 + 0x20]
	0x031DE644 STP X20, X19, [X31 + 0x30]
	0x031DE648 ADRP X20, 0x11FE000
	0x031DE64C LDRB W8, [X20 + 0xD5]
	0x031DE650 MOV X19, X0
	0x031DE654 TBNZ X8, 0x0, 0x31DE6A8
	0x031DE658 ADRP X0, 0xF42000
	0x031DE65C LDR X0, [X0 + 0x4A8]
	0x031DE660 BL 0x1C16CF4
	0x031DE664 ADRP X0, 0xF42000
	0x031DE668 LDR X0, [X0 + 0x4B0]
	0x031DE66C BL 0x1C16CF4
	0x031DE670 ADRP X0, 0xF42000
	0x031DE674 LDR X0, [X0 + 0x4C0]
	0x031DE678 BL 0x1C16CF4
	0x031DE67C ADRP X0, 0xF42000
	0x031DE680 LDR X0, [X0 + 0x4C8]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X26, 0x11FF000
	011 Move X23, 0xF42000
	012 Move X21, 0xF42000
	013 Move X25, 0xF42000
	014 Move X24, 0xF42000
	015 Move X22, 0xF43000
	016 Move W8, [X26+191]
	017 Move X23, [X23+4040]
	018 Move X21, [X21+4048]
	019 Move X25, [X25+4056]
	020 Move X24, [X24+4064]
	021 Move X22, [X22+1008]
	022 Move X20, X1
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {45}
	028 Move X0, 0xF42000
	029 Move X0, [X0+4064]
	030 Call 0x1C17CF4
	031 Move X0, 0xF42000
	032 Move X0, [X0+4056]
	033 Call 0x1C17CF4
	034 Move X0, 0xF42000
	035 Move X0, [X0+4048]
	036 Call 0x1C17CF4
	037 Move X0, 0xF43000
	038 Move X0, [X0+1008]
	039 Call 0x1C17CF4
	040 Move X0, 0xF42000
	041 Move X0, [X0+4040]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X26+191], W8
	045 Move W8, 6
	046 Move [X19+16], W8
	047 Move X0, [X23]
	048 Call 0x1C17F10
	049 Move X2, [X21]
	050 Move W1, 50
	051 Move X21, X0
	052 Call List`1<Object>..ctor, X0, X1
	053 Move [X19+48], X21
	054 Move X0, [X25]
	055 Call 0x1C17F10
	056 Move X2, [X24]
	057 Move W1, 5
	058 Move X21, X0
	059 Call Dictionary`2<Object, Object>..ctor, X0, X1
	060 Move X0, X19
	061 Move X1, X31
	062 Move [X19+64], X21
	063 Call Object..ctor, X0
	064 Move X8, -40824832
	065 Move V0, [X8+8]
	066 Move [X19+16], D0
	067 Move X0, [X23]
	068 Call 0x1C17F10
	069 Move X2, [X22]
	070 Move X1, X20
	071 Move X21, X0
	072 Call List`1<Object>..ctor, X0, X1
	073 Move [X19+48], X21
	074 Move X20, [X31+64]
	075 Move X19, [X31+72]
	076 Move X22, [X31+48]
	077 Move X21, [X31+56]
	078 Move X24, [X31+32]
	079 Move X23, [X31+40]
	080 Move X26, [X31+16]
	081 Move X25, [X31+24]
	082 Move X30, [X31+80]
	083 Return 

Method: System.Void .ctor(System.Collections.Generic.IDictionary`2<System.String, mixpanel.Value> data)

Disassembly:
	0x031DE684 BL 0x1C16CF4
	0x031DE688 ADRP X0, 0xF42000
	0x031DE68C LDR X0, [X0 + 0x260]
	0x031DE690 BL 0x1C16CF4
	0x031DE694 ADRP X0, 0xF1A000
	0x031DE698 LDR X0, [X0 + 0x748]
	0x031DE69C BL 0x1C16CF4
	0x031DE6A0 MOVZ W8, 0x1
	0x031DE6A4 STRB W8, [X20 + 0xD5]
	0x031DE6A8 CBZ X19, 0x31DE798
	0x031DE6AC ADRP X8, 0xF42000
	0x031DE6B0 LDR X8, [X8 + 0x4C0]
	0x031DE6B4 ADRP X22, 0xF42000
	0x031DE6B8 MOV X0, X19
	0x031DE6BC LDR X1, [X8]
	0x031DE6C0 LDR X22, [X22 + 0x260]
	0x031DE6C4 BL 0x2FDBA5C
	0x031DE6C8 LDR X8, [X22]
	0x031DE6CC MOV X19, X0
	0x031DE6D0 LDR W9, [X8 + 0xE0]
	0x031DE6D4 CBNZ W9, 0x31DE6E4
	0x031DE6D8 MOV X0, X8
	0x031DE6DC BL 0x1C16DFC
	0x031DE6E0 LDR X8, [X22]
	0x031DE6E4 LDR X9, [X8 + 0xB8]
	0x031DE6E8 ADRP X24, 0xF42000
	0x031DE6EC ADRP X23, 0xF1A000
	0x031DE6F0 LDR X20, [X9 + 0x60]
	0x031DE6F4 LDR X24, [X24 + 0x4A8]
	0x031DE6F8 LDR X23, [X23 + 0x748]
	0x031DE6FC CBNZ X20, 0x31DE754
	0x031DE700 LDR W9, [X8 + 0xE0]
	0x031DE704 CBNZ W9, 0x31DE714
	0x031DE708 MOV X0, X8
	0x031DE70C BL 0x1C16DFC
	0x031DE710 LDR X8, [X22]
	0x031DE714 ADRP X9, 0xF42000
	0x031DE718 LDR X8, [X8 + 0xB8]
	0x031DE71C LDR X9, [X9 + 0x4B0]
	0x031DE720 LDR X21, [X8]
	0x031DE724 LDR X0, [X9]
	0x031DE728 BL 0x1C16F10
	0x031DE72C ADRP X8, 0xF42000
	0x031DE730 LDR X8, [X8 + 0x4C8]
	0x031DE734 MOV X1, X21
	0x031DE738 MOV X3, X31
	0x031DE73C MOV X20, X0
	0x031DE740 LDR X2, [X8]
	0x031DE744 BL 0x29A7CE0
	0x031DE748 LDR X8, [X22]
	0x031DE74C LDR X8, [X8 + 0xB8]
	0x031DE750 STR X20, [X8 + 0x60]
	0x031DE754 LDR X2, [X24]
	0x031DE758 MOV X0, X19
	0x031DE75C MOV X1, X20
	0x031DE760 BL 0x22E3B88
	0x031DE764 LDR X8, [X23]
	0x031DE768 MOV X19, X0
	0x031DE76C MOV X0, X8
	0x031DE770 BL 0x1C16F10
	0x031DE774 MOV X1, X19
	0x031DE778 MOV X20, X0
	0x031DE77C BL 0x31DD564
	0x031DE780 MOV X0, X20
	0x031DE784 LDP X20, X19, [X31 + 0x30]
	0x031DE788 LDP X22, X21, [X31 + 0x20]
	0x031DE78C LDP X24, X23, [X31 + 0x10]
	0x031DE790 LDR X30, [X31], #0x40
	0x031DE794 RET
	0x031DE798 BL 0x1C16F20
	0x031DE79C STR X30, [X31 - 0x40]!
	0x031DE7A0 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X26, 0x11FF000
	011 Move X25, 0xF42000
	012 Move X21, 0xF42000
	013 Move X23, 0xF42000
	014 Move X24, 0xF42000
	015 Move X22, 0xF43000
	016 Move W8, [X26+192]
	017 Move X25, [X25+4040]
	018 Move X21, [X21+4048]
	019 Move X23, [X23+4056]
	020 Move X24, [X24+4064]
	021 Move X22, [X22+1016]
	022 Move X20, X1
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {45}
	028 Move X0, 0xF42000
	029 Move X0, [X0+4064]
	030 Call 0x1C17CF4
	031 Move X0, 0xF43000
	032 Move X0, [X0+1016]
	033 Call 0x1C17CF4
	034 Move X0, 0xF42000
	035 Move X0, [X0+4056]
	036 Call 0x1C17CF4
	037 Move X0, 0xF42000
	038 Move X0, [X0+4048]
	039 Call 0x1C17CF4
	040 Move X0, 0xF42000
	041 Move X0, [X0+4040]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X26+192], W8
	045 Move W8, 6
	046 Move [X19+16], W8
	047 Move X0, [X25]
	048 Call 0x1C17F10
	049 Move X2, [X21]
	050 Move W1, 50
	051 Move X21, X0
	052 Call List`1<Object>..ctor, X0, X1
	053 Move [X19+48], X21
	054 Move X0, [X23]
	055 Call 0x1C17F10
	056 Move X2, [X24]
	057 Move W1, 5
	058 Move X21, X0
	059 Call Dictionary`2<Object, Object>..ctor, X0, X1
	060 Move X0, X19
	061 Move X1, X31
	062 Move [X19+64], X21
	063 Call Object..ctor, X0
	064 Move X8, -40824832
	065 Move V0, [X8+896]
	066 Move [X19+16], D0
	067 Move X0, [X23]
	068 Call 0x1C17F10
	069 Move X2, [X22]
	070 Move X1, X20
	071 Move X21, X0
	072 Call Dictionary`2<Object, Object>..ctor, X0, X1
	073 Move [X19+64], X21
	074 Move X20, [X31+64]
	075 Move X19, [X31+72]
	076 Move X22, [X31+48]
	077 Move X21, [X31+56]
	078 Move X24, [X31+32]
	079 Move X23, [X31+40]
	080 Move X26, [X31+16]
	081 Move X25, [X31+24]
	082 Move X30, [X31+80]
	083 Return 

Method: mixpanel.Value get_Null()

Disassembly:
	0x031DE7A4 STP X22, X21, [X31 + 0x20]
	0x031DE7A8 STP X20, X19, [X31 + 0x30]
	0x031DE7AC ADRP X20, 0x11FE000
	0x031DE7B0 ADRP X22, 0xF42000
	0x031DE7B4 LDRB W8, [X20 + 0xD7]
	0x031DE7B8 LDR X22, [X22 + 0x260]
	0x031DE7BC MOV X19, X0
	0x031DE7C0 TBNZ X8, 0x0, 0x31DE808
	0x031DE7C4 ADRP X0, 0xF42000
	0x031DE7C8 LDR X0, [X0 + 0x4D0]
	0x031DE7CC BL 0x1C16CF4
	0x031DE7D0 ADRP X0, 0xF42000
	0x031DE7D4 LDR X0, [X0 + 0x4D8]
	0x031DE7D8 BL 0x1C16CF4
	0x031DE7DC ADRP X0, 0xF42000
	0x031DE7E0 LDR X0, [X0 + 0x4E0]
	0x031DE7E4 BL 0x1C16CF4
	0x031DE7E8 ADRP X0, 0xF42000
	0x031DE7EC LDR X0, [X0 + 0x260]
	0x031DE7F0 BL 0x1C16CF4
	0x031DE7F4 ADRP X0, 0xF1A000
	0x031DE7F8 LDR X0, [X0 + 0x748]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x11FF000
	005 Move X20, 0xF1B000
	006 Move W8, [X19+193]
	007 Move X20, [X20+1864]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF1B000
	013 Move X0, [X0+1864]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+193], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move W1, 1
	020 Move W2, 1
	021 Move X19, X0
	022 Call Value..ctor, X0, X1, X2
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return X0

Method: mixpanel.Value get_Array()

Disassembly:
	0x031DAB70 LDR X9, [X9 + 0x6D8]
	0x031DAB74 MOV X0, X19
	0x031DAB78 LDR X2, [X8 + 0x250]
	0x031DAB7C LDR X1, [X9]
	0x031DAB80 LDR X9, [X8 + 0x248]
	0x031DAB84 BLR X9
	0x031DAB88 LDP X20, X19, [X31 + 0xC0]
	0x031DAB8C LDP X22, X21, [X31 + 0xB0]
	0x031DAB90 LDP X24, X23, [X31 + 0xA0]
	0x031DAB94 LDP X26, X25, [X31 + 0x90]
	0x031DAB98 LDP X28, X27, [X31 + 0x80]
	0x031DAB9C LDR X30, [X31 + 0x70]
	0x031DABA0 ADD X31, X31, 0xD0
	0x031DABA4 RET
	0x031DABA8 BL 0x1C16F20
	0x031DABAC MOV X23, X31
	0x031DABB0 B 0x31DABC0
	0x031DABB4 MOV X0, X23
	0x031DABB8 BL 0x1C16F18
	0x031DABBC MOV X22, X0
	0x031DABC0 ADRP X8, 0xF46000
	0x031DABC4 LDR X8, [X8 + 0x328]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x1203000
	005 Move X20, 0xF1F000
	006 Move W8, [X19+194]
	007 Move X20, [X20+1864]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF1F000
	013 Move X0, [X0+1864]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+194], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move W1, 5
	020 Move W2, 2
	021 Move X19, X0
	022 Call Value..ctor, X0, X1, X2
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return X0

Method: mixpanel.Value get_Object()

Disassembly:
	0x031DE7FC BL 0x1C16CF4
	0x031DE800 MOVZ W8, 0x1
	0x031DE804 STRB W8, [X20 + 0xD7]
	0x031DE808 LDR X0, [X22]
	0x031DE80C LDR W8, [X0 + 0xE0]
	0x031DE810 CBNZ W8, 0x31DE81C
	0x031DE814 BL 0x1C16DFC
	0x031DE818 LDR X0, [X22]
	0x031DE81C LDR X8, [X0 + 0xB8]
	0x031DE820 ADRP X24, 0xF42000
	0x031DE824 ADRP X23, 0xF1A000
	0x031DE828 LDR X20, [X8 + 0x68]
	0x031DE82C LDR X24, [X24 + 0x4D0]
	0x031DE830 LDR X23, [X23 + 0x748]
	0x031DE834 CBNZ X20, 0x31DE888
	0x031DE838 LDR W8, [X0 + 0xE0]
	0x031DE83C CBNZ W8, 0x31DE848
	0x031DE840 BL 0x1C16DFC
	0x031DE844 LDR X0, [X22]
	0x031DE848 ADRP X9, 0xF42000
	0x031DE84C LDR X8, [X0 + 0xB8]
	0x031DE850 LDR X9, [X9 + 0x4D8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x11FF000
	005 Move X20, 0xF1B000
	006 Move W8, [X19+195]
	007 Move X20, [X20+1864]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF1B000
	013 Move X0, [X0+1864]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+195], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move W1, 6
	020 Move W2, 2
	021 Move X19, X0
	022 Call Value..ctor, X0, X1, X2
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return X0

Method: mixpanel.Value op_Implicit(System.String value)

Disassembly:
	0x031D4DD8 LDR X8, [X8 + 0xB8]
	0x031D4DDC LDR X19, [X8]
	0x031D4DE0 STR X20, [X8 + 0x28]
	0x031D4DE4 CBZ X19, 0x31D4EA0
	0x031D4DE8 LDR X8, [X19]
	0x031D4DEC LDR X1, [X22]
	0x031D4DF0 LDR X20, [X23]
	0x031D4DF4 LDRH W9, [X8 + 0x12E]
	0x031D4DF8 CBZ X9, 0x31D4E1C
	0x031D4DFC LDR X10, [X8 + 0xB0]
	0x031D4E00 ADD X10, X10, 0x8
	0x031D4E04 LDUR X11, [X10 - 0x8]
	0x031D4E08 CMP X11, X1
	0x031D4E0C B.EQ 0x31D4E40
	0x031D4E10 SUBS X9, X9, 0x1
	0x031D4E14 ADD X10, X10, 0x10
	0x031D4E18 B.NE 0x31D4E04
	0x031D4E1C MOVZ W2, 0x3
	0x031D4E20 MOV X0, X19
	0x031D4E24 BL 0x1C5C788
	0x031D4E28 B 0x31D4E50
	0x031D4E2C BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1209000
	006 Move X21, 0xF25000
	007 Move W8, [X20+196]
	008 Move X21, [X21+1864]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF25000
	015 Move X0, [X0+1864]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+196], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X20, X0
	023 Call Value..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: mixpanel.Value op_Implicit(System.String[] value)

Disassembly:
	0x031DA014 LDR X8, [X20]
	0x031DA018 LDR X10, [X10 + 0xF60]
	0x031DA01C LDRH W9, [X8 + 0x12E]
	0x031DA020 LDR X1, [X10]
	0x031DA024 CBZ X9, 0x31DA048
	0x031DA028 LDR X10, [X8 + 0xB0]
	0x031DA02C ADD X10, X10, 0x8
	0x031DA030 LDUR X11, [X10 - 0x8]
	0x031DA034 CMP X11, X1
	0x031DA038 B.EQ 0x31DA0F0
	0x031DA03C SUBS X9, X9, 0x1
	0x031DA040 ADD X10, X10, 0x10
	0x031DA044 B.NE 0x31DA030
	0x031DA048 MOVZ W2, 0x6
	0x031DA04C MOV X0, X20
	0x031DA050 BL 0x1C5C788
	0x031DA054 B 0x31DA100
	0x031DA058 LDR W9, [X10]
	0x031DA05C ADD W9, W9, 0x6
	0x031DA060 ADD X8, X8, W9, 0x4, SXTW
	0x031DA064 ADD X0, X8, 0x138
	0x031DA068 LDP X8, X3, [X0]
	0x031DA06C MOV X0, X21
	0x031DA070 MOV X1, X20
	0x031DA074 MOV W2, W31
	0x031DA078 BLR X8
	0x031DA07C LDR X8, [X26]
	0x031DA080 LDR X8, [X8 + 0xB8]
	0x031DA084 LDR X20, [X8]
	0x031DA088 CBZ X20, 0x31DA134
	0x031DA08C LDR X8, [X20]
	0x031DA090 LDR X1, [X19]
	0x031DA094 LDRH W9, [X8 + 0x12E]
	0x031DA098 CBZ X9, 0x31DA0BC
	0x031DA09C LDR X10, [X8 + 0xB0]
	0x031DA0A0 ADD X10, X10, 0x8
	0x031DA0A4 LDUR X11, [X10 - 0x8]
	0x031DA0A8 CMP X11, X1
	0x031DA0AC B.EQ 0x31DA0CC
	0x031DA0B0 SUBS X9, X9, 0x1
	0x031DA0B4 ADD X10, X10, 0x10
	0x031DA0B8 B.NE 0x31DA0A4
	0x031DA0BC MOVZ W2, 0x6
	0x031DA0C0 MOV X0, X20
	0x031DA0C4 BL 0x1C5C788
	0x031DA0C8 B 0x31DA0DC
	0x031DA0CC LDR W9, [X10]
	0x031DA0D0 ADD W9, W9, 0x6
	0x031DA0D4 ADD X8, X8, W9, 0x4, SXTW
	0x031DA0D8 ADD X0, X8, 0x138
	0x031DA0DC LDP X8, X3, [X0]
	0x031DA0E0 LDR X1, [X31]
	0x031DA0E4 MOV X0, X20
	0x031DA0E8 MOV W2, W31
	0x031DA0EC B 0x31DA110
	0x031DA0F0 LDR W9, [X10]
	0x031DA0F4 ADD W9, W9, 0x6
	0x031DA0F8 ADD X8, X8, W9, 0x4, SXTW
	0x031DA0FC ADD X0, X8, 0x138
	0x031DA100 LDP X8, X3, [X0]
	0x031DA104 LDR X1, [X31]
	0x031DA108 MOV X0, X20
	0x031DA10C MOV W2, W24
	0x031DA110 BLR X8
	0x031DA114 LDP X20, X19, [X31 + 0x60]
	0x031DA118 LDP X22, X21, [X31 + 0x50]
	0x031DA11C LDP X24, X23, [X31 + 0x40]
	0x031DA120 LDP X26, X25, [X31 + 0x30]
	0x031DA124 LDP X28, X27, [X31 + 0x20]
	0x031DA128 LDP X29, X30, [X31 + 0x10]
	0x031DA12C ADD X31, X31, 0x70
	0x031DA130 RET
	0x031DA134 BL 0x1C16F20
	0x031DA138 STP X30, X21, [X31 - 0x20]!
	0x031DA13C STP X20, X19, [X31 + 0x10]
	0x031DA140 ADRP X20, 0x1202000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x1203000
	009 Move X22, 0xF47000
	010 Move W8, [X20+197]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF47000
	018 Move X0, [X0+616]
	019 Call 0x1C17CF4
	020 Move X0, 0xF47000
	021 Move X0, [X0+624]
	022 Call 0x1C17CF4
	023 Move X0, 0xF47000
	024 Move X0, [X0+632]
	025 Call 0x1C17CF4
	026 Move X0, 0xF47000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF1F000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+197], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF47000
	042 Move X23, 0xF1F000
	043 Move X20, [X8+8]
	044 Move X24, [X24+616]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF47000
	054 Move X8, [X0+184]
	055 Move X9, [X9+624]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF47000
	060 Move X8, [X8+632]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Object, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+8], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.String> value)

Disassembly:
	0x031DE854 LDR X21, [X8]
	0x031DE858 LDR X0, [X9]
	0x031DE85C BL 0x1C16F10
	0x031DE860 ADRP X8, 0xF42000
	0x031DE864 LDR X8, [X8 + 0x4E0]
	0x031DE868 MOV X1, X21
	0x031DE86C MOV X3, X31
	0x031DE870 MOV X20, X0
	0x031DE874 LDR X2, [X8]
	0x031DE878 BL 0x29A7D80
	0x031DE87C LDR X8, [X22]
	0x031DE880 LDR X8, [X8 + 0xB8]
	0x031DE884 STR X20, [X8 + 0x68]
	0x031DE888 LDR X2, [X24]
	0x031DE88C MOV X0, X19
	0x031DE890 MOV X1, X20
	0x031DE894 BL 0x22E3CB4
	0x031DE898 LDR X8, [X23]
	0x031DE89C MOV X19, X0
	0x031DE8A0 MOV X0, X8
	0x031DE8A4 BL 0x1C16F10
	0x031DE8A8 MOV X1, X19
	0x031DE8AC MOV X20, X0
	0x031DE8B0 BL 0x31DD564
	0x031DE8B4 MOV X0, X20
	0x031DE8B8 LDP X20, X19, [X31 + 0x30]
	0x031DE8BC LDP X22, X21, [X31 + 0x20]
	0x031DE8C0 LDP X24, X23, [X31 + 0x10]
	0x031DE8C4 LDR X30, [X31], #0x40
	0x031DE8C8 RET
	0x031DE8CC STR X30, [X31 - 0x40]!
	0x031DE8D0 STP X24, X23, [X31 + 0x10]
	0x031DE8D4 STP X22, X21, [X31 + 0x20]
	0x031DE8D8 STP X20, X19, [X31 + 0x30]
	0x031DE8DC ADRP X20, 0x11FE000
	0x031DE8E0 LDRB W8, [X20 + 0xD8]
	0x031DE8E4 MOV X19, X0
	0x031DE8E8 TBNZ X8, 0x0, 0x31DE93C
	0x031DE8EC ADRP X0, 0xF42000
	0x031DE8F0 LDR X0, [X0 + 0x4D0]
	0x031DE8F4 BL 0x1C16CF4
	0x031DE8F8 ADRP X0, 0xF42000
	0x031DE8FC LDR X0, [X0 + 0x4D8]
	0x031DE900 BL 0x1C16CF4
	0x031DE904 ADRP X0, 0xF16000
	0x031DE908 LDR X0, [X0 + 0xE18]
	0x031DE90C BL 0x1C16CF4
	0x031DE910 ADRP X0, 0xF42000
	0x031DE914 LDR X0, [X0 + 0x4E8]
	0x031DE918 BL 0x1C16CF4
	0x031DE91C ADRP X0, 0xF42000
	0x031DE920 LDR X0, [X0 + 0x260]
	0x031DE924 BL 0x1C16CF4
	0x031DE928 ADRP X0, 0xF1A000
	0x031DE92C LDR X0, [X0 + 0x748]
	0x031DE930 BL 0x1C16CF4
	0x031DE934 MOVZ W8, 0x1
	0x031DE938 STRB W8, [X20 + 0xD8]
	0x031DE93C CBZ X19, 0x31DEA2C
	0x031DE940 ADRP X8, 0xF16000
	0x031DE944 LDR X8, [X8 + 0xE18]
	0x031DE948 ADRP X22, 0xF42000
	0x031DE94C MOV X0, X19
	0x031DE950 LDR X1, [X8]
	0x031DE954 LDR X22, [X22 + 0x260]
	0x031DE958 BL 0x2FDE4C8
	0x031DE95C LDR X8, [X22]
	0x031DE960 MOV X19, X0
	0x031DE964 LDR W9, [X8 + 0xE0]
	0x031DE968 CBNZ W9, 0x31DE978
	0x031DE96C MOV X0, X8
	0x031DE970 BL 0x1C16DFC
	0x031DE974 LDR X8, [X22]
	0x031DE978 LDR X9, [X8 + 0xB8]
	0x031DE97C ADRP X24, 0xF42000
	0x031DE980 ADRP X23, 0xF1A000
	0x031DE984 LDR X20, [X9 + 0x70]
	0x031DE988 LDR X24, [X24 + 0x4D0]
	0x031DE98C LDR X23, [X23 + 0x748]
	0x031DE990 CBNZ X20, 0x31DE9E8
	0x031DE994 LDR W9, [X8 + 0xE0]
	0x031DE998 CBNZ W9, 0x31DE9A8
	0x031DE99C MOV X0, X8
	0x031DE9A0 BL 0x1C16DFC
	0x031DE9A4 LDR X8, [X22]
	0x031DE9A8 ADRP X9, 0xF42000
	0x031DE9AC LDR X8, [X8 + 0xB8]
	0x031DE9B0 LDR X9, [X9 + 0x4D8]
	0x031DE9B4 LDR X21, [X8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FF000
	009 Move W8, [X20+198]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF43000
	016 Move X0, [X0+616]
	017 Call 0x1C17CF4
	018 Move X0, 0xF43000
	019 Move X0, [X0+624]
	020 Call 0x1C17CF4
	021 Move X0, 0xF18000
	022 Move X0, [X0+3704]
	023 Call 0x1C17CF4
	024 Move X0, 0xF43000
	025 Move X0, [X0+1024]
	026 Call 0x1C17CF4
	027 Move X0, 0xF43000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF1B000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+198], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF18000
	038 Move X8, [X8+3704]
	039 Move X22, 0xF43000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Object>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF43000
	054 Move X23, 0xF1B000
	055 Move X20, [X9+16]
	056 Move X24, [X24+616]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF43000
	067 Move X8, [X8+184]
	068 Move X9, [X9+624]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF43000
	073 Move X8, [X8+1024]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Object, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+16], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(System.Boolean value)

Disassembly:
	0x031D4F18 ADRP X20, 0x1208000
	0x031D4F1C ADRP X19, 0xF20000
	0x031D4F20 LDRB W8, [X20 + 0x158]
	0x031D4F24 LDR X19, [X19 + 0x9F0]
	0x031D4F28 TBNZ X8, 0x0, 0x31D4F4C
	0x031D4F2C ADRP X0, 0xF20000
	0x031D4F30 LDR X0, [X0 + 0x9F0]
	0x031D4F34 BL 0x1C16CF4
	0x031D4F38 ADRP X0, 0xF21000
	0x031D4F3C LDR X0, [X0 + 0x570]
	0x031D4F40 BL 0x1C16CF4
	0x031D4F44 MOVZ W8, 0x1
	0x031D4F48 STRB W8, [X20 + 0x158]
	0x031D4F4C LDR X0, [X19]
	0x031D4F50 STR X31, [X31 + 0x18]
	0x031D4F54 STR X31, [X31 + 0x8]
	0x031D4F58 ADRP X19, 0xF21000
	0x031D4F5C LDR W8, [X0 + 0xE0]
	0x031D4F60 LDR X19, [X19 + 0x570]
	0x031D4F64 CBNZ W8, 0x31D4F6C
	0x031D4F68 BL 0x1C16DFC
	0x031D4F6C ADD X0, X31, 0x18

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1209000
	006 Move X21, 0xF25000
	007 Move W8, [X20+199]
	008 Move X21, [X21+1864]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF25000
	015 Move X0, [X0+1864]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+199], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 And W1, W19, 1
	022 Move X20, X0
	023 Call Value..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: mixpanel.Value op_Implicit(System.Boolean[] value)

Disassembly:
	0x031DE9B8 LDR X0, [X9]
	0x031DE9BC BL 0x1C16F10
	0x031DE9C0 ADRP X8, 0xF42000
	0x031DE9C4 LDR X8, [X8 + 0x4E8]
	0x031DE9C8 MOV X1, X21
	0x031DE9CC MOV X3, X31
	0x031DE9D0 MOV X20, X0
	0x031DE9D4 LDR X2, [X8]
	0x031DE9D8 BL 0x29A7D80
	0x031DE9DC LDR X8, [X22]
	0x031DE9E0 LDR X8, [X8 + 0xB8]
	0x031DE9E4 STR X20, [X8 + 0x70]
	0x031DE9E8 LDR X2, [X24]
	0x031DE9EC MOV X0, X19
	0x031DE9F0 MOV X1, X20
	0x031DE9F4 BL 0x22E3CB4
	0x031DE9F8 LDR X8, [X23]
	0x031DE9FC MOV X19, X0
	0x031DEA00 MOV X0, X8
	0x031DEA04 BL 0x1C16F10
	0x031DEA08 MOV X1, X19
	0x031DEA0C MOV X20, X0
	0x031DEA10 BL 0x31DD564
	0x031DEA14 MOV X0, X20
	0x031DEA18 LDP X20, X19, [X31 + 0x30]
	0x031DEA1C LDP X22, X21, [X31 + 0x20]
	0x031DEA20 LDP X24, X23, [X31 + 0x10]
	0x031DEA24 LDR X30, [X31], #0x40
	0x031DEA28 RET
	0x031DEA2C BL 0x1C16F20
	0x031DEA30 STP X30, X21, [X31 - 0x20]!
	0x031DEA34 STP X20, X19, [X31 + 0x10]
	0x031DEA38 ADRP X20, 0x11FE000
	0x031DEA3C ADRP X21, 0xF1A000
	0x031DEA40 LDRB W8, [X20 + 0xD9]
	0x031DEA44 LDR X21, [X21 + 0x748]
	0x031DEA48 MOV X19, X0
	0x031DEA4C TBNZ X8, 0x0, 0x31DEA64
	0x031DEA50 ADRP X0, 0xF1A000
	0x031DEA54 LDR X0, [X0 + 0x748]
	0x031DEA58 BL 0x1C16CF4
	0x031DEA5C MOVZ W8, 0x1
	0x031DEA60 STRB W8, [X20 + 0xD9]
	0x031DEA64 LDR X0, [X21]
	0x031DEA68 BL 0x1C16F10
	0x031DEA6C SCVTF D0, X19
	0x031DEA70 MOV X20, X0
	0x031DEA74 BL 0x31DC7B4
	0x031DEA78 MOV X0, X20
	0x031DEA7C LDP X20, X19, [X31 + 0x10]
	0x031DEA80 LDP X30, X21, [X31], #0x20
	0x031DEA84 RET
	0x031DEA88 STR X30, [X31 - 0x40]!
	0x031DEA8C STP X24, X23, [X31 + 0x10]
	0x031DEA90 STP X22, X21, [X31 + 0x20]
	0x031DEA94 STP X20, X19, [X31 + 0x30]
	0x031DEA98 ADRP X20, 0x11FE000
	0x031DEA9C ADRP X22, 0xF42000
	0x031DEAA0 LDRB W8, [X20 + 0xDA]
	0x031DEAA4 LDR X22, [X22 + 0x260]
	0x031DEAA8 MOV X19, X0
	0x031DEAAC TBNZ X8, 0x0, 0x31DEAF4
	0x031DEAB0 ADRP X0, 0xF42000
	0x031DEAB4 LDR X0, [X0 + 0x4F0]
	0x031DEAB8 BL 0x1C16CF4
	0x031DEABC ADRP X0, 0xF42000
	0x031DEAC0 LDR X0, [X0 + 0x4F8]
	0x031DEAC4 BL 0x1C16CF4
	0x031DEAC8 ADRP X0, 0xF42000
	0x031DEACC LDR X0, [X0 + 0x500]
	0x031DEAD0 BL 0x1C16CF4
	0x031DEAD4 ADRP X0, 0xF42000
	0x031DEAD8 LDR X0, [X0 + 0x260]
	0x031DEADC BL 0x1C16CF4
	0x031DEAE0 ADRP X0, 0xF1A000
	0x031DEAE4 LDR X0, [X0 + 0x748]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FF000
	009 Move X22, 0xF43000
	010 Move W8, [X20+200]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF43000
	018 Move X0, [X0+1032]
	019 Call 0x1C17CF4
	020 Move X0, 0xF43000
	021 Move X0, [X0+1040]
	022 Call 0x1C17CF4
	023 Move X0, 0xF43000
	024 Move X0, [X0+1048]
	025 Call 0x1C17CF4
	026 Move X0, 0xF43000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF1B000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+200], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF43000
	042 Move X23, 0xF1B000
	043 Move X20, [X8+24]
	044 Move X24, [X24+1032]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF43000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1040]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF43000
	060 Move X8, [X8+1048]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call 0x29A85D0, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+24], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call 0x22E3F98, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.Boolean> value)

Disassembly:
	0x031DEAE8 BL 0x1C16CF4
	0x031DEAEC MOVZ W8, 0x1
	0x031DEAF0 STRB W8, [X20 + 0xDA]
	0x031DEAF4 LDR X0, [X22]
	0x031DEAF8 LDR W8, [X0 + 0xE0]
	0x031DEAFC CBNZ W8, 0x31DEB08
	0x031DEB00 BL 0x1C16DFC
	0x031DEB04 LDR X0, [X22]
	0x031DEB08 LDR X8, [X0 + 0xB8]
	0x031DEB0C ADRP X24, 0xF42000
	0x031DEB10 ADRP X23, 0xF1A000
	0x031DEB14 LDR X20, [X8 + 0x78]
	0x031DEB18 LDR X24, [X24 + 0x4F0]
	0x031DEB1C LDR X23, [X23 + 0x748]
	0x031DEB20 CBNZ X20, 0x31DEB74
	0x031DEB24 LDR W8, [X0 + 0xE0]
	0x031DEB28 CBNZ W8, 0x31DEB34
	0x031DEB2C BL 0x1C16DFC
	0x031DEB30 LDR X0, [X22]
	0x031DEB34 ADRP X9, 0xF42000
	0x031DEB38 LDR X8, [X0 + 0xB8]
	0x031DEB3C LDR X9, [X9 + 0x4F8]
	0x031DEB40 LDR X21, [X8]
	0x031DEB44 LDR X0, [X9]
	0x031DEB48 BL 0x1C16F10
	0x031DEB4C ADRP X8, 0xF42000
	0x031DEB50 LDR X8, [X8 + 0x500]
	0x031DEB54 MOV X1, X21
	0x031DEB58 MOV X3, X31
	0x031DEB5C MOV X20, X0
	0x031DEB60 LDR X2, [X8]
	0x031DEB64 BL 0x29A7E20
	0x031DEB68 LDR X8, [X22]
	0x031DEB6C LDR X8, [X8 + 0xB8]
	0x031DEB70 STR X20, [X8 + 0x78]
	0x031DEB74 LDR X2, [X24]
	0x031DEB78 MOV X0, X19
	0x031DEB7C MOV X1, X20
	0x031DEB80 BL 0x22E3DE0
	0x031DEB84 LDR X8, [X23]
	0x031DEB88 MOV X19, X0
	0x031DEB8C MOV X0, X8
	0x031DEB90 BL 0x1C16F10
	0x031DEB94 MOV X1, X19
	0x031DEB98 MOV X20, X0
	0x031DEB9C BL 0x31DD564
	0x031DEBA0 MOV X0, X20
	0x031DEBA4 LDP X20, X19, [X31 + 0x30]
	0x031DEBA8 LDP X22, X21, [X31 + 0x20]
	0x031DEBAC LDP X24, X23, [X31 + 0x10]
	0x031DEBB0 LDR X30, [X31], #0x40
	0x031DEBB4 RET
	0x031DEBB8 STR X30, [X31 - 0x40]!
	0x031DEBBC STP X24, X23, [X31 + 0x10]
	0x031DEBC0 STP X22, X21, [X31 + 0x20]
	0x031DEBC4 STP X20, X19, [X31 + 0x30]
	0x031DEBC8 ADRP X20, 0x11FE000
	0x031DEBCC LDRB W8, [X20 + 0xDB]
	0x031DEBD0 MOV X19, X0
	0x031DEBD4 TBNZ X8, 0x0, 0x31DEC28
	0x031DEBD8 ADRP X0, 0xF42000
	0x031DEBDC LDR X0, [X0 + 0x4F0]
	0x031DEBE0 BL 0x1C16CF4
	0x031DEBE4 ADRP X0, 0xF42000
	0x031DEBE8 LDR X0, [X0 + 0x4F8]
	0x031DEBEC BL 0x1C16CF4
	0x031DEBF0 ADRP X0, 0xF42000
	0x031DEBF4 LDR X0, [X0 + 0x508]
	0x031DEBF8 BL 0x1C16CF4
	0x031DEBFC ADRP X0, 0xF42000
	0x031DEC00 LDR X0, [X0 + 0x510]
	0x031DEC04 BL 0x1C16CF4
	0x031DEC08 ADRP X0, 0xF42000
	0x031DEC0C LDR X0, [X0 + 0x260]
	0x031DEC10 BL 0x1C16CF4
	0x031DEC14 ADRP X0, 0xF1A000
	0x031DEC18 LDR X0, [X0 + 0x748]
	0x031DEC1C BL 0x1C16CF4
	0x031DEC20 MOVZ W8, 0x1
	0x031DEC24 STRB W8, [X20 + 0xDB]
	0x031DEC28 CBZ X19, 0x31DED18
	0x031DEC2C ADRP X8, 0xF42000
	0x031DEC30 LDR X8, [X8 + 0x508]
	0x031DEC34 ADRP X22, 0xF42000
	0x031DEC38 MOV X0, X19
	0x031DEC3C LDR X1, [X8]
	0x031DEC40 LDR X22, [X22 + 0x260]
	0x031DEC44 BL 0x2FE39A0
	0x031DEC48 LDR X8, [X22]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FF000
	009 Move W8, [X20+201]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF43000
	016 Move X0, [X0+1032]
	017 Call 0x1C17CF4
	018 Move X0, 0xF43000
	019 Move X0, [X0+1040]
	020 Call 0x1C17CF4
	021 Move X0, 0xF43000
	022 Move X0, [X0+1056]
	023 Call 0x1C17CF4
	024 Move X0, 0xF43000
	025 Move X0, [X0+1064]
	026 Call 0x1C17CF4
	027 Move X0, 0xF43000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF1B000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+201], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF43000
	038 Move X8, [X8+1056]
	039 Move X22, 0xF43000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Boolean>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF43000
	054 Move X23, 0xF1B000
	055 Move X20, [X9+32]
	056 Move X24, [X24+1032]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF43000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1040]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF43000
	073 Move X8, [X8+1064]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call 0x29A85D0, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+32], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call 0x22E3F98, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(System.Single value)

Disassembly:
	0x031D5014 TBNZ X8, 0x0, 0x31D502C
	0x031D5018 ADRP X0, 0xF23000
	0x031D501C LDR X0, [X0 + 0x748]
	0x031D5020 BL 0x1C16CF4
	0x031D5024 MOVZ W8, 0x1
	0x031D5028 STRB W8, [X19 + 0xCD]
	0x031D502C LDR X0, [X20]
	0x031D5030 BL 0x1C16F10
	0x031D5034 MOV V0.16B, V8.16B
	0x031D5038 MOV X19, X0
	0x031D503C BL 0x31DC7B4
	0x031D5040 MOV X0, X19
	0x031D5044 LDP X20, X19, [X31 + 0x10]
	0x031D5048 LDR X30, [X31 + 0x8]
	0x031D504C LDR V8, [X31], #0x20
	0x031D5050 RET
	0x031D5054 STP X30, X21, [X31 - 0x20]!
	0x031D5058 STP X20, X19, [X31 + 0x10]
	0x031D505C ADRP X21, 0x1207000
	0x031D5060 LDRB W8, [X21 + 0x93]
	0x031D5064 MOV X19, X1
	0x031D5068 MOV X20, X0
	0x031D506C TBNZ X8, 0x0, 0x31D5084
	0x031D5070 ADRP X0, 0xF4B000
	0x031D5074 LDR X0, [X0 + 0xA8]
	0x031D5078 BL 0x1C16CF4
	0x031D507C MOVZ W8, 0x1
	0x031D5080 STRB W8, [X21 + 0x93]
	0x031D5084 LDR X0, [X20 + 0x40]
	0x031D5088 CBZ X0, 0x31D50A8
	0x031D508C ADRP X8, 0xF4B000
	0x031D5090 LDR X8, [X8 + 0xA8]
	0x031D5094 MOV X1, X19
	0x031D5098 LDP X20, X19, [X31 + 0x10]
	0x031D509C LDR X2, [X8]
	0x031D50A0 LDP X30, X21, [X31], #0x20
	0x031D50A4 B 0x2AA64F8
	0x031D50A8 BL 0x1C16F20
	0x031D50AC SUB X31, X31, 0x40

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1208000
	006 Move X19, 0xF47000
	007 Move W8, [X20+202]
	008 Move X19, [X19+1520]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xF47000
	015 Move X0, [X0+1520]
	016 Call 0x1C17CF4
	017 Move X0, 0xF24000
	018 Move X0, [X0+1864]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+202], W8
	022 Move X0, [X19]
	023 Move X19, 0xF24000
	024 Move W8, [X0+224]
	025 Move X19, [X19+1864]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move V0, V8
	030 Move X0, X31
	031 Call Decimal.op_Explicit, V0
	032 Move X2, X31
	033 Call Decimal.op_Explicit, X0
	034 Move X0, [X19]
	035 Move V8, V0
	036 Call 0x1C17F10
	037 Move V0, V8
	038 Move X19, X0
	039 Call Value..ctor, X0, V0
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+8]
	044 Move V8, [X31+32]
	045 Return X0

Method: mixpanel.Value op_Implicit(System.Single[] value)

Disassembly:
	0x031DEC4C MOV X19, X0
	0x031DEC50 LDR W9, [X8 + 0xE0]
	0x031DEC54 CBNZ W9, 0x31DEC64
	0x031DEC58 MOV X0, X8
	0x031DEC5C BL 0x1C16DFC
	0x031DEC60 LDR X8, [X22]
	0x031DEC64 LDR X9, [X8 + 0xB8]
	0x031DEC68 ADRP X24, 0xF42000
	0x031DEC6C ADRP X23, 0xF1A000
	0x031DEC70 LDR X20, [X9 + 0x80]
	0x031DEC74 LDR X24, [X24 + 0x4F0]
	0x031DEC78 LDR X23, [X23 + 0x748]
	0x031DEC7C CBNZ X20, 0x31DECD4
	0x031DEC80 LDR W9, [X8 + 0xE0]
	0x031DEC84 CBNZ W9, 0x31DEC94
	0x031DEC88 MOV X0, X8
	0x031DEC8C BL 0x1C16DFC
	0x031DEC90 LDR X8, [X22]
	0x031DEC94 ADRP X9, 0xF42000
	0x031DEC98 LDR X8, [X8 + 0xB8]
	0x031DEC9C LDR X9, [X9 + 0x4F8]
	0x031DECA0 LDR X21, [X8]
	0x031DECA4 LDR X0, [X9]
	0x031DECA8 BL 0x1C16F10
	0x031DECAC ADRP X8, 0xF42000
	0x031DECB0 LDR X8, [X8 + 0x510]
	0x031DECB4 MOV X1, X21
	0x031DECB8 MOV X3, X31
	0x031DECBC MOV X20, X0
	0x031DECC0 LDR X2, [X8]
	0x031DECC4 BL 0x29A7E20
	0x031DECC8 LDR X8, [X22]
	0x031DECCC LDR X8, [X8 + 0xB8]
	0x031DECD0 STR X20, [X8 + 0x80]
	0x031DECD4 LDR X2, [X24]
	0x031DECD8 MOV X0, X19
	0x031DECDC MOV X1, X20
	0x031DECE0 BL 0x22E3DE0
	0x031DECE4 LDR X8, [X23]
	0x031DECE8 MOV X19, X0
	0x031DECEC MOV X0, X8
	0x031DECF0 BL 0x1C16F10
	0x031DECF4 MOV X1, X19
	0x031DECF8 MOV X20, X0
	0x031DECFC BL 0x31DD564
	0x031DED00 MOV X0, X20
	0x031DED04 LDP X20, X19, [X31 + 0x30]
	0x031DED08 LDP X22, X21, [X31 + 0x20]
	0x031DED0C LDP X24, X23, [X31 + 0x10]
	0x031DED10 LDR X30, [X31], #0x40
	0x031DED14 RET
	0x031DED18 BL 0x1C16F20
	0x031DED1C STP X30, X21, [X31 - 0x20]!
	0x031DED20 STP X20, X19, [X31 + 0x10]
	0x031DED24 ADRP X20, 0x11FE000
	0x031DED28 ADRP X21, 0xF1A000
	0x031DED2C LDRB W8, [X20 + 0xDC]
	0x031DED30 LDR X21, [X21 + 0x748]
	0x031DED34 MOV W19, W0
	0x031DED38 TBNZ X8, 0x0, 0x31DED50
	0x031DED3C ADRP X0, 0xF1A000
	0x031DED40 LDR X0, [X0 + 0x748]
	0x031DED44 BL 0x1C16CF4
	0x031DED48 MOVZ W8, 0x1
	0x031DED4C STRB W8, [X20 + 0xDC]
	0x031DED50 LDR X0, [X21]
	0x031DED54 BL 0x1C16F10
	0x031DED58 AND W8, W19, 0xFFFF
	0x031DED5C UCVTF D0, W8
	0x031DED60 MOV X20, X0
	0x031DED64 BL 0x31DC7B4
	0x031DED68 MOV X0, X20
	0x031DED6C LDP X20, X19, [X31 + 0x10]
	0x031DED70 LDP X30, X21, [X31], #0x20
	0x031DED74 RET
	0x031DED78 STR X30, [X31 - 0x40]!

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FF000
	009 Move X22, 0xF43000
	010 Move W8, [X20+203]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF43000
	018 Move X0, [X0+1072]
	019 Call 0x1C17CF4
	020 Move X0, 0xF43000
	021 Move X0, [X0+1080]
	022 Call 0x1C17CF4
	023 Move X0, 0xF43000
	024 Move X0, [X0+1088]
	025 Call 0x1C17CF4
	026 Move X0, 0xF43000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF1B000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+203], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF43000
	042 Move X23, 0xF1B000
	043 Move X20, [X8+40]
	044 Move X24, [X24+1072]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF43000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1080]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF43000
	060 Move X8, [X8+1088]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Single, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+40], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.Single> value)

Disassembly:
	0x031DED7C STP X24, X23, [X31 + 0x10]
	0x031DED80 STP X22, X21, [X31 + 0x20]
	0x031DED84 STP X20, X19, [X31 + 0x30]
	0x031DED88 ADRP X20, 0x11FE000
	0x031DED8C ADRP X22, 0xF42000
	0x031DED90 LDRB W8, [X20 + 0xDD]
	0x031DED94 LDR X22, [X22 + 0x260]
	0x031DED98 MOV X19, X0
	0x031DED9C TBNZ X8, 0x0, 0x31DEDE4
	0x031DEDA0 ADRP X0, 0xF42000
	0x031DEDA4 LDR X0, [X0 + 0x518]
	0x031DEDA8 BL 0x1C16CF4
	0x031DEDAC ADRP X0, 0xF42000
	0x031DEDB0 LDR X0, [X0 + 0x520]
	0x031DEDB4 BL 0x1C16CF4
	0x031DEDB8 ADRP X0, 0xF42000
	0x031DEDBC LDR X0, [X0 + 0x528]
	0x031DEDC0 BL 0x1C16CF4
	0x031DEDC4 ADRP X0, 0xF42000
	0x031DEDC8 LDR X0, [X0 + 0x260]
	0x031DEDCC BL 0x1C16CF4
	0x031DEDD0 ADRP X0, 0xF1A000
	0x031DEDD4 LDR X0, [X0 + 0x748]
	0x031DEDD8 BL 0x1C16CF4
	0x031DEDDC MOVZ W8, 0x1
	0x031DEDE0 STRB W8, [X20 + 0xDD]
	0x031DEDE4 LDR X0, [X22]
	0x031DEDE8 LDR W8, [X0 + 0xE0]
	0x031DEDEC CBNZ W8, 0x31DEDF8
	0x031DEDF0 BL 0x1C16DFC
	0x031DEDF4 LDR X0, [X22]
	0x031DEDF8 LDR X8, [X0 + 0xB8]
	0x031DEDFC ADRP X24, 0xF42000
	0x031DEE00 ADRP X23, 0xF1A000
	0x031DEE04 LDR X20, [X8 + 0x88]
	0x031DEE08 LDR X24, [X24 + 0x518]
	0x031DEE0C LDR X23, [X23 + 0x748]
	0x031DEE10 CBNZ X20, 0x31DEE64
	0x031DEE14 LDR W8, [X0 + 0xE0]
	0x031DEE18 CBNZ W8, 0x31DEE24
	0x031DEE1C BL 0x1C16DFC
	0x031DEE20 LDR X0, [X22]
	0x031DEE24 ADRP X9, 0xF42000
	0x031DEE28 LDR X8, [X0 + 0xB8]
	0x031DEE2C LDR X9, [X9 + 0x520]
	0x031DEE30 LDR X21, [X8]
	0x031DEE34 LDR X0, [X9]
	0x031DEE38 BL 0x1C16F10
	0x031DEE3C ADRP X8, 0xF42000
	0x031DEE40 LDR X8, [X8 + 0x528]
	0x031DEE44 MOV X1, X21
	0x031DEE48 MOV X3, X31
	0x031DEE4C MOV X20, X0
	0x031DEE50 LDR X2, [X8]
	0x031DEE54 BL 0x29A9CE4
	0x031DEE58 LDR X8, [X22]
	0x031DEE5C LDR X8, [X8 + 0xB8]
	0x031DEE60 STR X20, [X8 + 0x88]
	0x031DEE64 LDR X2, [X24]
	0x031DEE68 MOV X0, X19
	0x031DEE6C MOV X1, X20
	0x031DEE70 BL 0x22E4624
	0x031DEE74 LDR X8, [X23]
	0x031DEE78 MOV X19, X0
	0x031DEE7C MOV X0, X8
	0x031DEE80 BL 0x1C16F10
	0x031DEE84 MOV X1, X19
	0x031DEE88 MOV X20, X0
	0x031DEE8C BL 0x31DD564
	0x031DEE90 MOV X0, X20
	0x031DEE94 LDP X20, X19, [X31 + 0x30]
	0x031DEE98 LDP X22, X21, [X31 + 0x20]
	0x031DEE9C LDP X24, X23, [X31 + 0x10]
	0x031DEEA0 LDR X30, [X31], #0x40
	0x031DEEA4 RET
	0x031DEEA8 STR X30, [X31 - 0x40]!
	0x031DEEAC STP X24, X23, [X31 + 0x10]
	0x031DEEB0 STP X22, X21, [X31 + 0x20]
	0x031DEEB4 STP X20, X19, [X31 + 0x30]
	0x031DEEB8 ADRP X20, 0x11FE000
	0x031DEEBC LDRB W8, [X20 + 0xDE]
	0x031DEEC0 MOV X19, X0
	0x031DEEC4 TBNZ X8, 0x0, 0x31DEF18
	0x031DEEC8 ADRP X0, 0xF42000
	0x031DEECC LDR X0, [X0 + 0x518]
	0x031DEED0 BL 0x1C16CF4
	0x031DEED4 ADRP X0, 0xF42000
	0x031DEED8 LDR X0, [X0 + 0x520]
	0x031DEEDC BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FF000
	009 Move W8, [X20+204]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF43000
	016 Move X0, [X0+1072]
	017 Call 0x1C17CF4
	018 Move X0, 0xF43000
	019 Move X0, [X0+1080]
	020 Call 0x1C17CF4
	021 Move X0, 0xF43000
	022 Move X0, [X0+1096]
	023 Call 0x1C17CF4
	024 Move X0, 0xF43000
	025 Move X0, [X0+1104]
	026 Call 0x1C17CF4
	027 Move X0, 0xF43000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF1B000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+204], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF43000
	038 Move X8, [X8+1096]
	039 Move X22, 0xF43000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Single>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF43000
	054 Move X23, 0xF1B000
	055 Move X20, [X9+48]
	056 Move X24, [X24+1072]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF43000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1080]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF43000
	073 Move X8, [X8+1104]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Single, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+48], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(System.Double value)

Disassembly:
	0x031D5FF4 B.LS 0x31D6214
	0x031D5FF8 CMP W8, 0x2
	0x031D5FFC STR X0, [X19 + 0x28]
	0x031D6000 B.EQ 0x31D6218
	0x031D6004 ADRP X8, 0xF4A000
	0x031D6008 LDR X8, [X8 + 0x110]
	0x031D600C LDR X8, [X8]
	0x031D6010 STR X8, [X19 + 0x30]
	0x031D6014 LDR X8, [X20]
	0x031D6018 LDR X8, [X8 + 0xB8]
	0x031D601C ADD X0, X8, 0x10
	0x031D6020 MOV X1, X31
	0x031D6024 BL 0x337B6E0
	0x031D6028 LDR W8, [X19 + 0x18]
	0x031D602C CMP W8, 0x3
	0x031D6030 B.LS 0x31D621C
	0x031D6034 CMP W8, 0x4
	0x031D6038 STR X0, [X19 + 0x38]
	0x031D603C B.EQ 0x31D6220
	0x031D6040 ADRP X8, 0xF1E000
	0x031D6044 LDR X8, [X8 + 0x608]
	0x031D6048 LDR X8, [X8]
	0x031D604C STR X8, [X19 + 0x40]
	0x031D6050 MOV X0, X19

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x1207000
	006 Move X20, 0xF23000
	007 Move W8, [X19+205]
	008 Call 0x3EB260C
	009 Return X0
	010 Move V8, V0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF23000
	016 Move X0, [X0+1864]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+205], W8
	020 Move X0, [X20]
	021 Call 0x1C17F10
	022 Move V0, V8
	023 Move X19, X0
	024 Call Value..ctor, X0, V0
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+8]
	029 Move V8, [X31+32]
	030 Return X0

Method: mixpanel.Value op_Implicit(System.Double[] value)

Disassembly:
	0x031DEEE0 ADRP X0, 0xF42000
	0x031DEEE4 LDR X0, [X0 + 0x530]
	0x031DEEE8 BL 0x1C16CF4
	0x031DEEEC ADRP X0, 0xF42000
	0x031DEEF0 LDR X0, [X0 + 0x538]
	0x031DEEF4 BL 0x1C16CF4
	0x031DEEF8 ADRP X0, 0xF42000
	0x031DEEFC LDR X0, [X0 + 0x260]
	0x031DEF00 BL 0x1C16CF4
	0x031DEF04 ADRP X0, 0xF1A000
	0x031DEF08 LDR X0, [X0 + 0x748]
	0x031DEF0C BL 0x1C16CF4
	0x031DEF10 MOVZ W8, 0x1
	0x031DEF14 STRB W8, [X20 + 0xDE]
	0x031DEF18 CBZ X19, 0x31DF008
	0x031DEF1C ADRP X8, 0xF42000
	0x031DEF20 LDR X8, [X8 + 0x530]
	0x031DEF24 ADRP X22, 0xF42000
	0x031DEF28 MOV X0, X19
	0x031DEF2C LDR X1, [X8]
	0x031DEF30 LDR X22, [X22 + 0x260]
	0x031DEF34 BL 0x30C09E8
	0x031DEF38 LDR X8, [X22]
	0x031DEF3C MOV X19, X0
	0x031DEF40 LDR W9, [X8 + 0xE0]
	0x031DEF44 CBNZ W9, 0x31DEF54
	0x031DEF48 MOV X0, X8
	0x031DEF4C BL 0x1C16DFC
	0x031DEF50 LDR X8, [X22]
	0x031DEF54 LDR X9, [X8 + 0xB8]
	0x031DEF58 ADRP X24, 0xF42000
	0x031DEF5C ADRP X23, 0xF1A000
	0x031DEF60 LDR X20, [X9 + 0x90]
	0x031DEF64 LDR X24, [X24 + 0x518]
	0x031DEF68 LDR X23, [X23 + 0x748]
	0x031DEF6C CBNZ X20, 0x31DEFC4
	0x031DEF70 LDR W9, [X8 + 0xE0]
	0x031DEF74 CBNZ W9, 0x31DEF84
	0x031DEF78 MOV X0, X8
	0x031DEF7C BL 0x1C16DFC
	0x031DEF80 LDR X8, [X22]
	0x031DEF84 ADRP X9, 0xF42000
	0x031DEF88 LDR X8, [X8 + 0xB8]
	0x031DEF8C LDR X9, [X9 + 0x520]
	0x031DEF90 LDR X21, [X8]
	0x031DEF94 LDR X0, [X9]
	0x031DEF98 BL 0x1C16F10
	0x031DEF9C ADRP X8, 0xF42000
	0x031DEFA0 LDR X8, [X8 + 0x538]
	0x031DEFA4 MOV X1, X21
	0x031DEFA8 MOV X3, X31
	0x031DEFAC MOV X20, X0
	0x031DEFB0 LDR X2, [X8]
	0x031DEFB4 BL 0x29A9CE4
	0x031DEFB8 LDR X8, [X22]
	0x031DEFBC LDR X8, [X8 + 0xB8]
	0x031DEFC0 STR X20, [X8 + 0x90]
	0x031DEFC4 LDR X2, [X24]
	0x031DEFC8 MOV X0, X19
	0x031DEFCC MOV X1, X20
	0x031DEFD0 BL 0x22E4624
	0x031DEFD4 LDR X8, [X23]
	0x031DEFD8 MOV X19, X0
	0x031DEFDC MOV X0, X8
	0x031DEFE0 BL 0x1C16F10
	0x031DEFE4 MOV X1, X19
	0x031DEFE8 MOV X20, X0
	0x031DEFEC BL 0x31DD564
	0x031DEFF0 MOV X0, X20
	0x031DEFF4 LDP X20, X19, [X31 + 0x30]
	0x031DEFF8 LDP X22, X21, [X31 + 0x20]
	0x031DEFFC LDP X24, X23, [X31 + 0x10]
	0x031DF000 LDR X30, [X31], #0x40
	0x031DF004 RET
	0x031DF008 BL 0x1C16F20
	0x031DF00C STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FF000
	009 Move X22, 0xF43000
	010 Move W8, [X20+206]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF43000
	018 Move X0, [X0+1112]
	019 Call 0x1C17CF4
	020 Move X0, 0xF43000
	021 Move X0, [X0+1120]
	022 Call 0x1C17CF4
	023 Move X0, 0xF43000
	024 Move X0, [X0+1128]
	025 Call 0x1C17CF4
	026 Move X0, 0xF43000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF1B000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+206], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF43000
	042 Move X23, 0xF1B000
	043 Move X20, [X8+56]
	044 Move X24, [X24+1112]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF43000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1120]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF43000
	060 Move X8, [X8+1128]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Double, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+56], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.Double> value)

Disassembly:
	0x031DF010 STP X20, X19, [X31 + 0x10]
	0x031DF014 ADRP X20, 0x11FD000
	0x031DF018 ADRP X21, 0xF19000
	0x031DF01C LDRB W8, [X20 + 0xDF]
	0x031DF020 LDR X21, [X21 + 0x748]
	0x031DF024 MOV W19, W0
	0x031DF028 TBNZ X8, 0x0, 0x31DF040
	0x031DF02C ADRP X0, 0xF19000
	0x031DF030 LDR X0, [X0 + 0x748]
	0x031DF034 BL 0x1C16CF4
	0x031DF038 MOVZ W8, 0x1
	0x031DF03C STRB W8, [X20 + 0xDF]
	0x031DF040 LDR X0, [X21]
	0x031DF044 BL 0x1C16F10
	0x031DF048 UCVTF D0, W19
	0x031DF04C MOV X20, X0
	0x031DF050 BL 0x31DC7B4
	0x031DF054 MOV X0, X20
	0x031DF058 LDP X20, X19, [X31 + 0x10]
	0x031DF05C LDP X30, X21, [X31], #0x20
	0x031DF060 RET
	0x031DF064 STR X30, [X31 - 0x40]!
	0x031DF068 STP X24, X23, [X31 + 0x10]
	0x031DF06C STP X22, X21, [X31 + 0x20]
	0x031DF070 STP X20, X19, [X31 + 0x30]
	0x031DF074 ADRP X20, 0x11FD000
	0x031DF078 ADRP X22, 0xF41000
	0x031DF07C LDRB W8, [X20 + 0xE0]
	0x031DF080 LDR X22, [X22 + 0x260]
	0x031DF084 MOV X19, X0
	0x031DF088 TBNZ X8, 0x0, 0x31DF0D0
	0x031DF08C ADRP X0, 0xF41000
	0x031DF090 LDR X0, [X0 + 0x540]
	0x031DF094 BL 0x1C16CF4
	0x031DF098 ADRP X0, 0xF41000
	0x031DF09C LDR X0, [X0 + 0x548]
	0x031DF0A0 BL 0x1C16CF4
	0x031DF0A4 ADRP X0, 0xF41000
	0x031DF0A8 LDR X0, [X0 + 0x550]
	0x031DF0AC BL 0x1C16CF4
	0x031DF0B0 ADRP X0, 0xF41000
	0x031DF0B4 LDR X0, [X0 + 0x260]
	0x031DF0B8 BL 0x1C16CF4
	0x031DF0BC ADRP X0, 0xF19000
	0x031DF0C0 LDR X0, [X0 + 0x748]
	0x031DF0C4 BL 0x1C16CF4
	0x031DF0C8 MOVZ W8, 0x1
	0x031DF0CC STRB W8, [X20 + 0xE0]
	0x031DF0D0 LDR X0, [X22]
	0x031DF0D4 LDR W8, [X0 + 0xE0]
	0x031DF0D8 CBNZ W8, 0x31DF0E4
	0x031DF0DC BL 0x1C16DFC
	0x031DF0E0 LDR X0, [X22]
	0x031DF0E4 LDR X8, [X0 + 0xB8]
	0x031DF0E8 ADRP X24, 0xF41000
	0x031DF0EC ADRP X23, 0xF19000
	0x031DF0F0 LDR X20, [X8 + 0x98]
	0x031DF0F4 LDR X24, [X24 + 0x540]
	0x031DF0F8 LDR X23, [X23 + 0x748]
	0x031DF0FC CBNZ X20, 0x31DF150
	0x031DF100 LDR W8, [X0 + 0xE0]
	0x031DF104 CBNZ W8, 0x31DF110
	0x031DF108 BL 0x1C16DFC
	0x031DF10C LDR X0, [X22]
	0x031DF110 ADRP X9, 0xF41000
	0x031DF114 LDR X8, [X0 + 0xB8]
	0x031DF118 LDR X9, [X9 + 0x548]
	0x031DF11C LDR X21, [X8]
	0x031DF120 LDR X0, [X9]
	0x031DF124 BL 0x1C16F10
	0x031DF128 ADRP X8, 0xF41000
	0x031DF12C LDR X8, [X8 + 0x550]
	0x031DF130 MOV X1, X21
	0x031DF134 MOV X3, X31
	0x031DF138 MOV X20, X0
	0x031DF13C LDR X2, [X8]
	0x031DF140 BL 0x29A9D84
	0x031DF144 LDR X8, [X22]
	0x031DF148 LDR X8, [X8 + 0xB8]
	0x031DF14C STR X20, [X8 + 0x98]
	0x031DF150 LDR X2, [X24]
	0x031DF154 MOV X0, X19
	0x031DF158 MOV X1, X20
	0x031DF15C BL 0x22E4750
	0x031DF160 LDR X8, [X23]
	0x031DF164 MOV X19, X0
	0x031DF168 MOV X0, X8
	0x031DF16C BL 0x1C16F10
	0x031DF170 MOV X1, X19

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FE000
	009 Move W8, [X20+207]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF42000
	016 Move X0, [X0+1112]
	017 Call 0x1C17CF4
	018 Move X0, 0xF42000
	019 Move X0, [X0+1120]
	020 Call 0x1C17CF4
	021 Move X0, 0xF42000
	022 Move X0, [X0+1136]
	023 Call 0x1C17CF4
	024 Move X0, 0xF42000
	025 Move X0, [X0+1144]
	026 Call 0x1C17CF4
	027 Move X0, 0xF42000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF1A000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+207], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF42000
	038 Move X8, [X8+1136]
	039 Move X22, 0xF42000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Double>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF42000
	054 Move X23, 0xF1A000
	055 Move X20, [X9+64]
	056 Move X24, [X24+1112]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF42000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1120]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF42000
	073 Move X8, [X8+1144]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Double, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+64], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(System.Decimal value)

Disassembly:
	0x031DF174 MOV X20, X0
	0x031DF178 BL 0x31DD564
	0x031DF17C MOV X0, X20
	0x031DF180 LDP X20, X19, [X31 + 0x30]
	0x031DF184 LDP X22, X21, [X31 + 0x20]
	0x031DF188 LDP X24, X23, [X31 + 0x10]
	0x031DF18C LDR X30, [X31], #0x40
	0x031DF190 RET
	0x031DF194 STR X30, [X31 - 0x40]!
	0x031DF198 STP X24, X23, [X31 + 0x10]
	0x031DF19C STP X22, X21, [X31 + 0x20]
	0x031DF1A0 STP X20, X19, [X31 + 0x30]
	0x031DF1A4 ADRP X20, 0x11FD000
	0x031DF1A8 LDRB W8, [X20 + 0xE1]
	0x031DF1AC MOV X19, X0
	0x031DF1B0 TBNZ X8, 0x0, 0x31DF204
	0x031DF1B4 ADRP X0, 0xF41000
	0x031DF1B8 LDR X0, [X0 + 0x540]
	0x031DF1BC BL 0x1C16CF4
	0x031DF1C0 ADRP X0, 0xF41000
	0x031DF1C4 LDR X0, [X0 + 0x548]
	0x031DF1C8 BL 0x1C16CF4
	0x031DF1CC ADRP X0, 0xF41000
	0x031DF1D0 LDR X0, [X0 + 0x558]
	0x031DF1D4 BL 0x1C16CF4
	0x031DF1D8 ADRP X0, 0xF41000
	0x031DF1DC LDR X0, [X0 + 0x560]
	0x031DF1E0 BL 0x1C16CF4
	0x031DF1E4 ADRP X0, 0xF41000
	0x031DF1E8 LDR X0, [X0 + 0x260]
	0x031DF1EC BL 0x1C16CF4
	0x031DF1F0 ADRP X0, 0xF19000
	0x031DF1F4 LDR X0, [X0 + 0x748]
	0x031DF1F8 BL 0x1C16CF4
	0x031DF1FC MOVZ W8, 0x1
	0x031DF200 STRB W8, [X20 + 0xE1]
	0x031DF204 CBZ X19, 0x31DF2F4
	0x031DF208 ADRP X8, 0xF41000
	0x031DF20C LDR X8, [X8 + 0x558]
	0x031DF210 ADRP X22, 0xF41000
	0x031DF214 MOV X0, X19

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x11FE000
	008 Move X21, 0xF3D000
	009 Move W8, [X22+208]
	010 Move X21, [X21+1520]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF3D000
	018 Move X0, [X0+1520]
	019 Call 0x1C17CF4
	020 Move X0, 0xF1A000
	021 Move X0, [X0+1864]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+208], W8
	025 Move X0, [X21]
	026 Move X21, 0xF1A000
	027 Move W8, [X0+224]
	028 Move X21, [X21+1864]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X19
	034 Move X2, X31
	035 Call Decimal.op_Explicit, X0
	036 Move X0, [X21]
	037 Move V8, V0
	038 Call 0x1C17F10
	039 Move V0, V8
	040 Move X19, X0
	041 Call Value..ctor, X0, V0
	042 Move X0, X19
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X30, [X31+8]
	048 Move V8, [X31+48]
	049 Return X0

Method: mixpanel.Value op_Implicit(System.Decimal[] value)

Disassembly:
	0x031DF218 LDR X1, [X8]
	0x031DF21C LDR X22, [X22 + 0x260]
	0x031DF220 BL 0x30C3454
	0x031DF224 LDR X8, [X22]
	0x031DF228 MOV X19, X0
	0x031DF22C LDR W9, [X8 + 0xE0]
	0x031DF230 CBNZ W9, 0x31DF240
	0x031DF234 MOV X0, X8
	0x031DF238 BL 0x1C16DFC
	0x031DF23C LDR X8, [X22]
	0x031DF240 LDR X9, [X8 + 0xB8]
	0x031DF244 ADRP X24, 0xF41000
	0x031DF248 ADRP X23, 0xF19000
	0x031DF24C LDR X20, [X9 + 0xA0]
	0x031DF250 LDR X24, [X24 + 0x540]
	0x031DF254 LDR X23, [X23 + 0x748]
	0x031DF258 CBNZ X20, 0x31DF2B0
	0x031DF25C LDR W9, [X8 + 0xE0]
	0x031DF260 CBNZ W9, 0x31DF270
	0x031DF264 MOV X0, X8
	0x031DF268 BL 0x1C16DFC
	0x031DF26C LDR X8, [X22]
	0x031DF270 ADRP X9, 0xF41000
	0x031DF274 LDR X8, [X8 + 0xB8]
	0x031DF278 LDR X9, [X9 + 0x548]
	0x031DF27C LDR X21, [X8]
	0x031DF280 LDR X0, [X9]
	0x031DF284 BL 0x1C16F10
	0x031DF288 ADRP X8, 0xF41000
	0x031DF28C LDR X8, [X8 + 0x560]
	0x031DF290 MOV X1, X21
	0x031DF294 MOV X3, X31
	0x031DF298 MOV X20, X0
	0x031DF29C LDR X2, [X8]
	0x031DF2A0 BL 0x29A9D84
	0x031DF2A4 LDR X8, [X22]
	0x031DF2A8 LDR X8, [X8 + 0xB8]
	0x031DF2AC STR X20, [X8 + 0xA0]
	0x031DF2B0 LDR X2, [X24]
	0x031DF2B4 MOV X0, X19
	0x031DF2B8 MOV X1, X20
	0x031DF2BC BL 0x22E4750
	0x031DF2C0 LDR X8, [X23]
	0x031DF2C4 MOV X19, X0
	0x031DF2C8 MOV X0, X8
	0x031DF2CC BL 0x1C16F10
	0x031DF2D0 MOV X1, X19
	0x031DF2D4 MOV X20, X0
	0x031DF2D8 BL 0x31DD564
	0x031DF2DC MOV X0, X20
	0x031DF2E0 LDP X20, X19, [X31 + 0x30]
	0x031DF2E4 LDP X22, X21, [X31 + 0x20]
	0x031DF2E8 LDP X24, X23, [X31 + 0x10]
	0x031DF2EC LDR X30, [X31], #0x40
	0x031DF2F0 RET
	0x031DF2F4 BL 0x1C16F20
	0x031DF2F8 STP X30, X21, [X31 - 0x20]!
	0x031DF2FC STP X20, X19, [X31 + 0x10]
	0x031DF300 ADRP X20, 0x11FD000
	0x031DF304 ADRP X21, 0xF19000
	0x031DF308 LDRB W8, [X20 + 0xE2]
	0x031DF30C LDR X21, [X21 + 0x748]
	0x031DF310 MOV X19, X0
	0x031DF314 TBNZ X8, 0x0, 0x31DF32C
	0x031DF318 ADRP X0, 0xF19000
	0x031DF31C LDR X0, [X0 + 0x748]
	0x031DF320 BL 0x1C16CF4
	0x031DF324 MOVZ W8, 0x1
	0x031DF328 STRB W8, [X20 + 0xE2]
	0x031DF32C LDR X0, [X21]
	0x031DF330 BL 0x1C16F10
	0x031DF334 UCVTF D0, X19
	0x031DF338 MOV X20, X0
	0x031DF33C BL 0x31DC7B4
	0x031DF340 MOV X0, X20
	0x031DF344 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FE000
	009 Move X22, 0xF42000
	010 Move W8, [X20+209]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF42000
	018 Move X0, [X0+1152]
	019 Call 0x1C17CF4
	020 Move X0, 0xF42000
	021 Move X0, [X0+1160]
	022 Call 0x1C17CF4
	023 Move X0, 0xF42000
	024 Move X0, [X0+1168]
	025 Call 0x1C17CF4
	026 Move X0, 0xF42000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF1A000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+209], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF42000
	042 Move X23, 0xF1A000
	043 Move X20, [X8+72]
	044 Move X24, [X24+1152]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF42000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1160]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF42000
	060 Move X8, [X8+1168]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Decimal, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+72], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.Decimal> value)

Disassembly:
	0x031DF348 LDP X30, X21, [X31], #0x20
	0x031DF34C RET
	0x031DF350 STR X30, [X31 - 0x40]!
	0x031DF354 STP X24, X23, [X31 + 0x10]
	0x031DF358 STP X22, X21, [X31 + 0x20]
	0x031DF35C STP X20, X19, [X31 + 0x30]
	0x031DF360 ADRP X20, 0x11FD000
	0x031DF364 ADRP X22, 0xF41000
	0x031DF368 LDRB W8, [X20 + 0xE3]
	0x031DF36C LDR X22, [X22 + 0x260]
	0x031DF370 MOV X19, X0
	0x031DF374 TBNZ X8, 0x0, 0x31DF3BC
	0x031DF378 ADRP X0, 0xF41000
	0x031DF37C LDR X0, [X0 + 0x568]
	0x031DF380 BL 0x1C16CF4
	0x031DF384 ADRP X0, 0xF41000
	0x031DF388 LDR X0, [X0 + 0x570]
	0x031DF38C BL 0x1C16CF4
	0x031DF390 ADRP X0, 0xF41000
	0x031DF394 LDR X0, [X0 + 0x578]
	0x031DF398 BL 0x1C16CF4
	0x031DF39C ADRP X0, 0xF41000
	0x031DF3A0 LDR X0, [X0 + 0x260]
	0x031DF3A4 BL 0x1C16CF4
	0x031DF3A8 ADRP X0, 0xF19000
	0x031DF3AC LDR X0, [X0 + 0x748]
	0x031DF3B0 BL 0x1C16CF4
	0x031DF3B4 MOVZ W8, 0x1
	0x031DF3B8 STRB W8, [X20 + 0xE3]
	0x031DF3BC LDR X0, [X22]
	0x031DF3C0 LDR W8, [X0 + 0xE0]
	0x031DF3C4 CBNZ W8, 0x31DF3D0
	0x031DF3C8 BL 0x1C16DFC
	0x031DF3CC LDR X0, [X22]
	0x031DF3D0 LDR X8, [X0 + 0xB8]
	0x031DF3D4 ADRP X24, 0xF41000
	0x031DF3D8 ADRP X23, 0xF19000
	0x031DF3DC LDR X20, [X8 + 0xA8]
	0x031DF3E0 LDR X24, [X24 + 0x568]
	0x031DF3E4 LDR X23, [X23 + 0x748]
	0x031DF3E8 CBNZ X20, 0x31DF43C
	0x031DF3EC LDR W8, [X0 + 0xE0]
	0x031DF3F0 CBNZ W8, 0x31DF3FC
	0x031DF3F4 BL 0x1C16DFC
	0x031DF3F8 LDR X0, [X22]
	0x031DF3FC ADRP X9, 0xF41000
	0x031DF400 LDR X8, [X0 + 0xB8]
	0x031DF404 LDR X9, [X9 + 0x570]
	0x031DF408 LDR X21, [X8]
	0x031DF40C LDR X0, [X9]
	0x031DF410 BL 0x1C16F10
	0x031DF414 ADRP X8, 0xF41000
	0x031DF418 LDR X8, [X8 + 0x578]
	0x031DF41C MOV X1, X21
	0x031DF420 MOV X3, X31
	0x031DF424 MOV X20, X0
	0x031DF428 LDR X2, [X8]
	0x031DF42C BL 0x29A9E24
	0x031DF430 LDR X8, [X22]
	0x031DF434 LDR X8, [X8 + 0xB8]
	0x031DF438 STR X20, [X8 + 0xA8]
	0x031DF43C LDR X2, [X24]
	0x031DF440 MOV X0, X19
	0x031DF444 MOV X1, X20
	0x031DF448 BL 0x22E487C
	0x031DF44C LDR X8, [X23]
	0x031DF450 MOV X19, X0
	0x031DF454 MOV X0, X8
	0x031DF458 BL 0x1C16F10
	0x031DF45C MOV X1, X19
	0x031DF460 MOV X20, X0
	0x031DF464 BL 0x31DD564
	0x031DF468 MOV X0, X20
	0x031DF46C LDP X20, X19, [X31 + 0x30]
	0x031DF470 LDP X22, X21, [X31 + 0x20]
	0x031DF474 LDP X24, X23, [X31 + 0x10]
	0x031DF478 LDR X30, [X31], #0x40
	0x031DF47C RET
	0x031DF480 STR X30, [X31 - 0x40]!
	0x031DF484 STP X24, X23, [X31 + 0x10]
	0x031DF488 STP X22, X21, [X31 + 0x20]
	0x031DF48C STP X20, X19, [X31 + 0x30]
	0x031DF490 ADRP X20, 0x11FD000
	0x031DF494 LDRB W8, [X20 + 0xE4]
	0x031DF498 MOV X19, X0
	0x031DF49C TBNZ X8, 0x0, 0x31DF4F0
	0x031DF4A0 ADRP X0, 0xF41000
	0x031DF4A4 LDR X0, [X0 + 0x568]
	0x031DF4A8 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FE000
	009 Move W8, [X20+210]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF42000
	016 Move X0, [X0+1152]
	017 Call 0x1C17CF4
	018 Move X0, 0xF42000
	019 Move X0, [X0+1160]
	020 Call 0x1C17CF4
	021 Move X0, 0xF42000
	022 Move X0, [X0+1176]
	023 Call 0x1C17CF4
	024 Move X0, 0xF42000
	025 Move X0, [X0+1184]
	026 Call 0x1C17CF4
	027 Move X0, 0xF42000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF1A000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+210], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF42000
	038 Move X8, [X8+1176]
	039 Move X22, 0xF42000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Decimal>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF42000
	054 Move X23, 0xF1A000
	055 Move X20, [X9+80]
	056 Move X24, [X24+1152]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF42000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1160]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF42000
	073 Move X8, [X8+1184]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Decimal, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+80], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(System.Int16 value)

Disassembly:
	0x031DF4AC ADRP X0, 0xF41000
	0x031DF4B0 LDR X0, [X0 + 0x570]
	0x031DF4B4 BL 0x1C16CF4
	0x031DF4B8 ADRP X0, 0xF41000
	0x031DF4BC LDR X0, [X0 + 0x580]
	0x031DF4C0 BL 0x1C16CF4
	0x031DF4C4 ADRP X0, 0xF41000
	0x031DF4C8 LDR X0, [X0 + 0x588]
	0x031DF4CC BL 0x1C16CF4
	0x031DF4D0 ADRP X0, 0xF41000
	0x031DF4D4 LDR X0, [X0 + 0x260]
	0x031DF4D8 BL 0x1C16CF4
	0x031DF4DC ADRP X0, 0xF19000
	0x031DF4E0 LDR X0, [X0 + 0x748]
	0x031DF4E4 BL 0x1C16CF4
	0x031DF4E8 MOVZ W8, 0x1
	0x031DF4EC STRB W8, [X20 + 0xE4]
	0x031DF4F0 CBZ X19, 0x31DF5E0
	0x031DF4F4 ADRP X8, 0xF41000
	0x031DF4F8 LDR X8, [X8 + 0x580]
	0x031DF4FC ADRP X22, 0xF41000
	0x031DF500 MOV X0, X19
	0x031DF504 LDR X1, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11FE000
	006 Move X21, 0xF1A000
	007 Move W8, [X20+211]
	008 Move X21, [X21+1864]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF1A000
	015 Move X0, [X0+1864]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+211], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 NotImplemented "Instruction SXTH not yet implemented."
	022 NotImplemented "Instruction SCVTF not yet implemented."
	023 Move X20, X0
	024 Call Value..ctor, X0, V0
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: mixpanel.Value op_Implicit(System.Int16[] value)

Disassembly:
	0x031DF508 LDR X22, [X22 + 0x260]
	0x031DF50C BL 0x30C5EC0
	0x031DF510 LDR X8, [X22]
	0x031DF514 MOV X19, X0
	0x031DF518 LDR W9, [X8 + 0xE0]
	0x031DF51C CBNZ W9, 0x31DF52C
	0x031DF520 MOV X0, X8
	0x031DF524 BL 0x1C16DFC
	0x031DF528 LDR X8, [X22]
	0x031DF52C LDR X9, [X8 + 0xB8]
	0x031DF530 ADRP X24, 0xF41000
	0x031DF534 ADRP X23, 0xF19000
	0x031DF538 LDR X20, [X9 + 0xB0]
	0x031DF53C LDR X24, [X24 + 0x568]
	0x031DF540 LDR X23, [X23 + 0x748]
	0x031DF544 CBNZ X20, 0x31DF59C
	0x031DF548 LDR W9, [X8 + 0xE0]
	0x031DF54C CBNZ W9, 0x31DF55C
	0x031DF550 MOV X0, X8
	0x031DF554 BL 0x1C16DFC
	0x031DF558 LDR X8, [X22]
	0x031DF55C ADRP X9, 0xF41000
	0x031DF560 LDR X8, [X8 + 0xB8]
	0x031DF564 LDR X9, [X9 + 0x570]
	0x031DF568 LDR X21, [X8]
	0x031DF56C LDR X0, [X9]
	0x031DF570 BL 0x1C16F10
	0x031DF574 ADRP X8, 0xF41000
	0x031DF578 LDR X8, [X8 + 0x588]
	0x031DF57C MOV X1, X21
	0x031DF580 MOV X3, X31
	0x031DF584 MOV X20, X0
	0x031DF588 LDR X2, [X8]
	0x031DF58C BL 0x29A9E24
	0x031DF590 LDR X8, [X22]
	0x031DF594 LDR X8, [X8 + 0xB8]
	0x031DF598 STR X20, [X8 + 0xB0]
	0x031DF59C LDR X2, [X24]
	0x031DF5A0 MOV X0, X19
	0x031DF5A4 MOV X1, X20
	0x031DF5A8 BL 0x22E487C
	0x031DF5AC LDR X8, [X23]
	0x031DF5B0 MOV X19, X0
	0x031DF5B4 MOV X0, X8
	0x031DF5B8 BL 0x1C16F10
	0x031DF5BC MOV X1, X19
	0x031DF5C0 MOV X20, X0
	0x031DF5C4 BL 0x31DD564
	0x031DF5C8 MOV X0, X20
	0x031DF5CC LDP X20, X19, [X31 + 0x30]
	0x031DF5D0 LDP X22, X21, [X31 + 0x20]
	0x031DF5D4 LDP X24, X23, [X31 + 0x10]
	0x031DF5D8 LDR X30, [X31], #0x40
	0x031DF5DC RET
	0x031DF5E0 BL 0x1C16F20
	0x031DF5E4 STP X30, X21, [X31 - 0x20]!
	0x031DF5E8 STP X20, X19, [X31 + 0x10]
	0x031DF5EC ADRP X20, 0x11FD000
	0x031DF5F0 ADRP X21, 0xF19000
	0x031DF5F4 LDRB W8, [X20 + 0xE5]
	0x031DF5F8 LDR X21, [X21 + 0x748]
	0x031DF5FC MOV W19, W0
	0x031DF600 TBNZ X8, 0x0, 0x31DF618
	0x031DF604 ADRP X0, 0xF19000
	0x031DF608 LDR X0, [X0 + 0x748]
	0x031DF60C BL 0x1C16CF4
	0x031DF610 MOVZ W8, 0x1
	0x031DF614 STRB W8, [X20 + 0xE5]
	0x031DF618 LDR X0, [X21]
	0x031DF61C BL 0x1C16F10
	0x031DF620 SXTB W8, W19
	0x031DF624 SCVTF D0, W8
	0x031DF628 MOV X20, X0
	0x031DF62C BL 0x31DC7B4
	0x031DF630 MOV X0, X20
	0x031DF634 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FE000
	009 Move X22, 0xF42000
	010 Move W8, [X20+212]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF42000
	018 Move X0, [X0+1192]
	019 Call 0x1C17CF4
	020 Move X0, 0xF42000
	021 Move X0, [X0+1200]
	022 Call 0x1C17CF4
	023 Move X0, 0xF42000
	024 Move X0, [X0+1208]
	025 Call 0x1C17CF4
	026 Move X0, 0xF42000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF1A000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+212], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF42000
	042 Move X23, 0xF1A000
	043 Move X20, [X8+88]
	044 Move X24, [X24+1192]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF42000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1200]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF42000
	060 Move X8, [X8+1208]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Int16, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+88], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.Int16> value)

Disassembly:
	0x031DF638 LDP X30, X21, [X31], #0x20
	0x031DF63C RET
	0x031DF640 STR X30, [X31 - 0x40]!
	0x031DF644 STP X24, X23, [X31 + 0x10]
	0x031DF648 STP X22, X21, [X31 + 0x20]
	0x031DF64C STP X20, X19, [X31 + 0x30]
	0x031DF650 ADRP X20, 0x11FD000
	0x031DF654 ADRP X22, 0xF41000
	0x031DF658 LDRB W8, [X20 + 0xE6]
	0x031DF65C LDR X22, [X22 + 0x260]
	0x031DF660 MOV X19, X0
	0x031DF664 TBNZ X8, 0x0, 0x31DF6AC
	0x031DF668 ADRP X0, 0xF41000
	0x031DF66C LDR X0, [X0 + 0x590]
	0x031DF670 BL 0x1C16CF4
	0x031DF674 ADRP X0, 0xF41000
	0x031DF678 LDR X0, [X0 + 0x598]
	0x031DF67C BL 0x1C16CF4
	0x031DF680 ADRP X0, 0xF41000
	0x031DF684 LDR X0, [X0 + 0x5A0]
	0x031DF688 BL 0x1C16CF4
	0x031DF68C ADRP X0, 0xF41000
	0x031DF690 LDR X0, [X0 + 0x260]
	0x031DF694 BL 0x1C16CF4
	0x031DF698 ADRP X0, 0xF19000
	0x031DF69C LDR X0, [X0 + 0x748]
	0x031DF6A0 BL 0x1C16CF4
	0x031DF6A4 MOVZ W8, 0x1
	0x031DF6A8 STRB W8, [X20 + 0xE6]
	0x031DF6AC LDR X0, [X22]
	0x031DF6B0 LDR W8, [X0 + 0xE0]
	0x031DF6B4 CBNZ W8, 0x31DF6C0
	0x031DF6B8 BL 0x1C16DFC
	0x031DF6BC LDR X0, [X22]
	0x031DF6C0 LDR X8, [X0 + 0xB8]
	0x031DF6C4 ADRP X24, 0xF41000
	0x031DF6C8 ADRP X23, 0xF19000
	0x031DF6CC LDR X20, [X8 + 0xB8]
	0x031DF6D0 LDR X24, [X24 + 0x590]
	0x031DF6D4 LDR X23, [X23 + 0x748]
	0x031DF6D8 CBNZ X20, 0x31DF72C
	0x031DF6DC LDR W8, [X0 + 0xE0]
	0x031DF6E0 CBNZ W8, 0x31DF6EC
	0x031DF6E4 BL 0x1C16DFC
	0x031DF6E8 LDR X0, [X22]
	0x031DF6EC ADRP X9, 0xF41000
	0x031DF6F0 LDR X8, [X0 + 0xB8]
	0x031DF6F4 LDR X9, [X9 + 0x598]
	0x031DF6F8 LDR X21, [X8]
	0x031DF6FC LDR X0, [X9]
	0x031DF700 BL 0x1C16F10
	0x031DF704 ADRP X8, 0xF41000
	0x031DF708 LDR X8, [X8 + 0x5A0]
	0x031DF70C MOV X1, X21
	0x031DF710 MOV X3, X31
	0x031DF714 MOV X20, X0
	0x031DF718 LDR X2, [X8]
	0x031DF71C BL 0x29A9B04
	0x031DF720 LDR X8, [X22]
	0x031DF724 LDR X8, [X8 + 0xB8]
	0x031DF728 STR X20, [X8 + 0xB8]
	0x031DF72C LDR X2, [X24]
	0x031DF730 MOV X0, X19
	0x031DF734 MOV X1, X20
	0x031DF738 BL 0x22E42A0
	0x031DF73C LDR X8, [X23]
	0x031DF740 MOV X19, X0
	0x031DF744 MOV X0, X8
	0x031DF748 BL 0x1C16F10
	0x031DF74C MOV X1, X19
	0x031DF750 MOV X20, X0
	0x031DF754 BL 0x31DD564
	0x031DF758 MOV X0, X20
	0x031DF75C LDP X20, X19, [X31 + 0x30]
	0x031DF760 LDP X22, X21, [X31 + 0x20]
	0x031DF764 LDP X24, X23, [X31 + 0x10]
	0x031DF768 LDR X30, [X31], #0x40
	0x031DF76C RET
	0x031DF770 STR X30, [X31 - 0x40]!
	0x031DF774 STP X24, X23, [X31 + 0x10]
	0x031DF778 STP X22, X21, [X31 + 0x20]
	0x031DF77C STP X20, X19, [X31 + 0x30]
	0x031DF780 ADRP X20, 0x11FD000
	0x031DF784 LDRB W8, [X20 + 0xE7]
	0x031DF788 MOV X19, X0
	0x031DF78C TBNZ X8, 0x0, 0x31DF7E0
	0x031DF790 ADRP X0, 0xF41000
	0x031DF794 LDR X0, [X0 + 0x590]
	0x031DF798 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FE000
	009 Move W8, [X20+213]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF42000
	016 Move X0, [X0+1192]
	017 Call 0x1C17CF4
	018 Move X0, 0xF42000
	019 Move X0, [X0+1200]
	020 Call 0x1C17CF4
	021 Move X0, 0xF42000
	022 Move X0, [X0+1216]
	023 Call 0x1C17CF4
	024 Move X0, 0xF42000
	025 Move X0, [X0+1224]
	026 Call 0x1C17CF4
	027 Move X0, 0xF42000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF1A000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+213], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF42000
	038 Move X8, [X8+1216]
	039 Move X22, 0xF42000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Int16>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF42000
	054 Move X23, 0xF1A000
	055 Move X20, [X9+96]
	056 Move X24, [X24+1192]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF42000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1200]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF42000
	073 Move X8, [X8+1224]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Int16, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+96], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(System.Int32 value)

Disassembly:
	0x031D57EC LDR X8, [X8 + 0xE8]
	0x031D57F0 MOV X2, X0
	0x031D57F4 MOV X0, X19
	0x031D57F8 LDR X1, [X8]
	0x031D57FC BL 0x31D3E30
	0x031D5800 LDR X0, [X20]
	0x031D5804 LDR W8, [X0 + 0xE0]
	0x031D5808 CBNZ W8, 0x31D5810
	0x031D580C BL 0x1C16DFC
	0x031D5810 BL 0x31D50AC
	0x031D5814 BL 0x31D3DD8
	0x031D5818 ADRP X8, 0xF4B000
	0x031D581C LDR X8, [X8 + 0xF0]
	0x031D5820 MOV X2, X0
	0x031D5824 MOV X0, X19
	0x031D5828 LDR X1, [X8]
	0x031D582C BL 0x31D3E30
	0x031D5830 BL 0x31D52F0
	0x031D5834 BL 0x31D4FF4
	0x031D5838 ADRP X8, 0xF4B000
	0x031D583C LDR X8, [X8 + 0xE0]
	0x031D5840 MOV X2, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1208000
	006 Move X21, 0xF24000
	007 Move W8, [X20+214]
	008 Move X21, [X21+1864]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF24000
	015 Move X0, [X0+1864]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+214], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 NotImplemented "Instruction SCVTF not yet implemented."
	022 Move X20, X0
	023 Call Value..ctor, X0, V0
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: mixpanel.Value op_Implicit(System.Int32[] value)

Disassembly:
	0x031DF79C ADRP X0, 0xF41000
	0x031DF7A0 LDR X0, [X0 + 0x598]
	0x031DF7A4 BL 0x1C16CF4
	0x031DF7A8 ADRP X0, 0xF41000
	0x031DF7AC LDR X0, [X0 + 0x5A8]
	0x031DF7B0 BL 0x1C16CF4
	0x031DF7B4 ADRP X0, 0xF41000
	0x031DF7B8 LDR X0, [X0 + 0x5B0]
	0x031DF7BC BL 0x1C16CF4
	0x031DF7C0 ADRP X0, 0xF41000
	0x031DF7C4 LDR X0, [X0 + 0x260]
	0x031DF7C8 BL 0x1C16CF4
	0x031DF7CC ADRP X0, 0xF19000
	0x031DF7D0 LDR X0, [X0 + 0x748]
	0x031DF7D4 BL 0x1C16CF4
	0x031DF7D8 MOVZ W8, 0x1
	0x031DF7DC STRB W8, [X20 + 0xE7]
	0x031DF7E0 CBZ X19, 0x31DF8D0
	0x031DF7E4 ADRP X8, 0xF41000
	0x031DF7E8 LDR X8, [X8 + 0x5A8]
	0x031DF7EC ADRP X22, 0xF41000
	0x031DF7F0 MOV X0, X19
	0x031DF7F4 LDR X1, [X8]
	0x031DF7F8 LDR X22, [X22 + 0x260]
	0x031DF7FC BL 0x3053EF8
	0x031DF800 LDR X8, [X22]
	0x031DF804 MOV X19, X0
	0x031DF808 LDR W9, [X8 + 0xE0]
	0x031DF80C CBNZ W9, 0x31DF81C
	0x031DF810 MOV X0, X8
	0x031DF814 BL 0x1C16DFC
	0x031DF818 LDR X8, [X22]
	0x031DF81C LDR X9, [X8 + 0xB8]
	0x031DF820 ADRP X24, 0xF41000
	0x031DF824 ADRP X23, 0xF19000
	0x031DF828 LDR X20, [X9 + 0xC0]
	0x031DF82C LDR X24, [X24 + 0x590]
	0x031DF830 LDR X23, [X23 + 0x748]
	0x031DF834 CBNZ X20, 0x31DF88C
	0x031DF838 LDR W9, [X8 + 0xE0]
	0x031DF83C CBNZ W9, 0x31DF84C
	0x031DF840 MOV X0, X8
	0x031DF844 BL 0x1C16DFC
	0x031DF848 LDR X8, [X22]
	0x031DF84C ADRP X9, 0xF41000
	0x031DF850 LDR X8, [X8 + 0xB8]
	0x031DF854 LDR X9, [X9 + 0x598]
	0x031DF858 LDR X21, [X8]
	0x031DF85C LDR X0, [X9]
	0x031DF860 BL 0x1C16F10
	0x031DF864 ADRP X8, 0xF41000
	0x031DF868 LDR X8, [X8 + 0x5B0]
	0x031DF86C MOV X1, X21
	0x031DF870 MOV X3, X31
	0x031DF874 MOV X20, X0
	0x031DF878 LDR X2, [X8]
	0x031DF87C BL 0x29A9B04
	0x031DF880 LDR X8, [X22]
	0x031DF884 LDR X8, [X8 + 0xB8]
	0x031DF888 STR X20, [X8 + 0xC0]
	0x031DF88C LDR X2, [X24]
	0x031DF890 MOV X0, X19
	0x031DF894 MOV X1, X20
	0x031DF898 BL 0x22E42A0
	0x031DF89C LDR X8, [X23]
	0x031DF8A0 MOV X19, X0
	0x031DF8A4 MOV X0, X8
	0x031DF8A8 BL 0x1C16F10
	0x031DF8AC MOV X1, X19
	0x031DF8B0 MOV X20, X0
	0x031DF8B4 BL 0x31DD564
	0x031DF8B8 MOV X0, X20
	0x031DF8BC LDP X20, X19, [X31 + 0x30]
	0x031DF8C0 LDP X22, X21, [X31 + 0x20]
	0x031DF8C4 LDP X24, X23, [X31 + 0x10]
	0x031DF8C8 LDR X30, [X31], #0x40

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FE000
	009 Move X22, 0xF42000
	010 Move W8, [X20+215]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF42000
	018 Move X0, [X0+1232]
	019 Call 0x1C17CF4
	020 Move X0, 0xF42000
	021 Move X0, [X0+1240]
	022 Call 0x1C17CF4
	023 Move X0, 0xF42000
	024 Move X0, [X0+1248]
	025 Call 0x1C17CF4
	026 Move X0, 0xF42000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF1A000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+215], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF42000
	042 Move X23, 0xF1A000
	043 Move X20, [X8+104]
	044 Move X24, [X24+1232]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF42000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1240]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF42000
	060 Move X8, [X8+1248]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Int32, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+104], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.Int32> value)

Disassembly:
	0x031DF8CC RET
	0x031DF8D0 BL 0x1C16F20
	0x031DF8D4 STR X30, [X31 - 0x40]!
	0x031DF8D8 STP X24, X23, [X31 + 0x10]
	0x031DF8DC STP X22, X21, [X31 + 0x20]
	0x031DF8E0 STP X20, X19, [X31 + 0x30]
	0x031DF8E4 ADRP X20, 0x11FD000
	0x031DF8E8 ADRP X22, 0xF41000
	0x031DF8EC LDRB W8, [X20 + 0xE9]
	0x031DF8F0 LDR X22, [X22 + 0x260]
	0x031DF8F4 MOV X19, X0
	0x031DF8F8 TBNZ X8, 0x0, 0x31DF940
	0x031DF8FC ADRP X0, 0xF41000
	0x031DF900 LDR X0, [X0 + 0x5B8]
	0x031DF904 BL 0x1C16CF4
	0x031DF908 ADRP X0, 0xF41000
	0x031DF90C LDR X0, [X0 + 0x5C0]
	0x031DF910 BL 0x1C16CF4
	0x031DF914 ADRP X0, 0xF41000
	0x031DF918 LDR X0, [X0 + 0x5C8]
	0x031DF91C BL 0x1C16CF4
	0x031DF920 ADRP X0, 0xF41000
	0x031DF924 LDR X0, [X0 + 0x260]
	0x031DF928 BL 0x1C16CF4
	0x031DF92C ADRP X0, 0xF19000
	0x031DF930 LDR X0, [X0 + 0x748]
	0x031DF934 BL 0x1C16CF4
	0x031DF938 MOVZ W8, 0x1
	0x031DF93C STRB W8, [X20 + 0xE9]
	0x031DF940 LDR X0, [X22]
	0x031DF944 LDR W8, [X0 + 0xE0]
	0x031DF948 CBNZ W8, 0x31DF954
	0x031DF94C BL 0x1C16DFC
	0x031DF950 LDR X0, [X22]
	0x031DF954 LDR X8, [X0 + 0xB8]
	0x031DF958 ADRP X24, 0xF41000
	0x031DF95C ADRP X23, 0xF19000
	0x031DF960 LDR X20, [X8 + 0xC8]
	0x031DF964 LDR X24, [X24 + 0x5B8]
	0x031DF968 LDR X23, [X23 + 0x748]
	0x031DF96C CBNZ X20, 0x31DF9C0
	0x031DF970 LDR W8, [X0 + 0xE0]
	0x031DF974 CBNZ W8, 0x31DF980
	0x031DF978 BL 0x1C16DFC
	0x031DF97C LDR X0, [X22]
	0x031DF980 ADRP X9, 0xF41000
	0x031DF984 LDR X8, [X0 + 0xB8]
	0x031DF988 LDR X9, [X9 + 0x5C0]
	0x031DF98C LDR X21, [X8]
	0x031DF990 LDR X0, [X9]
	0x031DF994 BL 0x1C16F10
	0x031DF998 ADRP X8, 0xF41000
	0x031DF99C LDR X8, [X8 + 0x5C8]
	0x031DF9A0 MOV X1, X21
	0x031DF9A4 MOV X3, X31
	0x031DF9A8 MOV X20, X0
	0x031DF9AC LDR X2, [X8]
	0x031DF9B0 BL 0x29A773C
	0x031DF9B4 LDR X8, [X22]
	0x031DF9B8 LDR X8, [X8 + 0xB8]
	0x031DF9BC STR X20, [X8 + 0xC8]
	0x031DF9C0 LDR X2, [X24]
	0x031DF9C4 MOV X0, X19
	0x031DF9C8 MOV X1, X20
	0x031DF9CC BL 0x22E3214
	0x031DF9D0 LDR X8, [X23]
	0x031DF9D4 MOV X19, X0
	0x031DF9D8 MOV X0, X8
	0x031DF9DC BL 0x1C16F10
	0x031DF9E0 MOV X1, X19
	0x031DF9E4 MOV X20, X0
	0x031DF9E8 BL 0x31DD564
	0x031DF9EC MOV X0, X20
	0x031DF9F0 LDP X20, X19, [X31 + 0x30]
	0x031DF9F4 LDP X22, X21, [X31 + 0x20]
	0x031DF9F8 LDP X24, X23, [X31 + 0x10]
	0x031DF9FC LDR X30, [X31], #0x40
	0x031DFA00 RET
	0x031DFA04 STR X30, [X31 - 0x40]!
	0x031DFA08 STP X24, X23, [X31 + 0x10]
	0x031DFA0C STP X22, X21, [X31 + 0x20]
	0x031DFA10 STP X20, X19, [X31 + 0x30]
	0x031DFA14 ADRP X20, 0x11FD000
	0x031DFA18 LDRB W8, [X20 + 0xEA]
	0x031DFA1C MOV X19, X0
	0x031DFA20 TBNZ X8, 0x0, 0x31DFA74
	0x031DFA24 ADRP X0, 0xF41000
	0x031DFA28 LDR X0, [X0 + 0x5B8]
	0x031DFA2C BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FE000
	009 Move W8, [X20+216]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF42000
	016 Move X0, [X0+1232]
	017 Call 0x1C17CF4
	018 Move X0, 0xF42000
	019 Move X0, [X0+1240]
	020 Call 0x1C17CF4
	021 Move X0, 0xF16000
	022 Move X0, [X0+3608]
	023 Call 0x1C17CF4
	024 Move X0, 0xF42000
	025 Move X0, [X0+1256]
	026 Call 0x1C17CF4
	027 Move X0, 0xF42000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF1A000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+216], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF16000
	038 Move X8, [X8+3608]
	039 Move X22, 0xF42000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Int32>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF42000
	054 Move X23, 0xF1A000
	055 Move X20, [X9+112]
	056 Move X24, [X24+1232]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF42000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1240]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF42000
	073 Move X8, [X8+1256]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Int32, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+112], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(System.Int64 value)

Disassembly:
	0x031DFA30 ADRP X0, 0xF41000
	0x031DFA34 LDR X0, [X0 + 0x5C0]
	0x031DFA38 BL 0x1C16CF4
	0x031DFA3C ADRP X0, 0xF41000
	0x031DFA40 LDR X0, [X0 + 0x5D0]
	0x031DFA44 BL 0x1C16CF4
	0x031DFA48 ADRP X0, 0xF41000
	0x031DFA4C LDR X0, [X0 + 0x5D8]
	0x031DFA50 BL 0x1C16CF4
	0x031DFA54 ADRP X0, 0xF41000
	0x031DFA58 LDR X0, [X0 + 0x260]
	0x031DFA5C BL 0x1C16CF4
	0x031DFA60 ADRP X0, 0xF19000
	0x031DFA64 LDR X0, [X0 + 0x748]
	0x031DFA68 BL 0x1C16CF4
	0x031DFA6C MOVZ W8, 0x1
	0x031DFA70 STRB W8, [X20 + 0xEA]
	0x031DFA74 CBZ X19, 0x31DFB64
	0x031DFA78 ADRP X8, 0xF41000
	0x031DFA7C LDR X8, [X8 + 0x5D0]
	0x031DFA80 ADRP X22, 0xF41000
	0x031DFA84 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11FE000
	006 Move X21, 0xF1A000
	007 Move W8, [X20+217]
	008 Move X21, [X21+1864]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF1A000
	015 Move X0, [X0+1864]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+217], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 NotImplemented "Instruction SCVTF not yet implemented."
	022 Move X20, X0
	023 Call Value..ctor, X0, V0
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: mixpanel.Value op_Implicit(System.Int64[] value)

Disassembly:
	0x031DFA88 LDR X1, [X8]
	0x031DFA8C LDR X22, [X22 + 0x260]
	0x031DFA90 BL 0x2F69CD0
	0x031DFA94 LDR X8, [X22]
	0x031DFA98 MOV X19, X0
	0x031DFA9C LDR W9, [X8 + 0xE0]
	0x031DFAA0 CBNZ W9, 0x31DFAB0
	0x031DFAA4 MOV X0, X8
	0x031DFAA8 BL 0x1C16DFC
	0x031DFAAC LDR X8, [X22]
	0x031DFAB0 LDR X9, [X8 + 0xB8]
	0x031DFAB4 ADRP X24, 0xF41000
	0x031DFAB8 ADRP X23, 0xF19000
	0x031DFABC LDR X20, [X9 + 0xD0]
	0x031DFAC0 LDR X24, [X24 + 0x5B8]
	0x031DFAC4 LDR X23, [X23 + 0x748]
	0x031DFAC8 CBNZ X20, 0x31DFB20
	0x031DFACC LDR W9, [X8 + 0xE0]
	0x031DFAD0 CBNZ W9, 0x31DFAE0
	0x031DFAD4 MOV X0, X8
	0x031DFAD8 BL 0x1C16DFC
	0x031DFADC LDR X8, [X22]
	0x031DFAE0 ADRP X9, 0xF41000
	0x031DFAE4 LDR X8, [X8 + 0xB8]
	0x031DFAE8 LDR X9, [X9 + 0x5C0]
	0x031DFAEC LDR X21, [X8]
	0x031DFAF0 LDR X0, [X9]
	0x031DFAF4 BL 0x1C16F10
	0x031DFAF8 ADRP X8, 0xF41000
	0x031DFAFC LDR X8, [X8 + 0x5D8]
	0x031DFB00 MOV X1, X21
	0x031DFB04 MOV X3, X31
	0x031DFB08 MOV X20, X0
	0x031DFB0C LDR X2, [X8]
	0x031DFB10 BL 0x29A773C
	0x031DFB14 LDR X8, [X22]
	0x031DFB18 LDR X8, [X8 + 0xB8]
	0x031DFB1C STR X20, [X8 + 0xD0]
	0x031DFB20 LDR X2, [X24]
	0x031DFB24 MOV X0, X19
	0x031DFB28 MOV X1, X20
	0x031DFB2C BL 0x22E3214
	0x031DFB30 LDR X8, [X23]
	0x031DFB34 MOV X19, X0
	0x031DFB38 MOV X0, X8
	0x031DFB3C BL 0x1C16F10
	0x031DFB40 MOV X1, X19
	0x031DFB44 MOV X20, X0
	0x031DFB48 BL 0x31DD564
	0x031DFB4C MOV X0, X20
	0x031DFB50 LDP X20, X19, [X31 + 0x30]
	0x031DFB54 LDP X22, X21, [X31 + 0x20]
	0x031DFB58 LDP X24, X23, [X31 + 0x10]
	0x031DFB5C LDR X30, [X31], #0x40
	0x031DFB60 RET
	0x031DFB64 BL 0x1C16F20
	0x031DFB68 STP X30, X21, [X31 - 0x20]!
	0x031DFB6C STP X20, X19, [X31 + 0x10]
	0x031DFB70 ADRP X20, 0x11FD000
	0x031DFB74 ADRP X21, 0xF19000
	0x031DFB78 LDRB W8, [X20 + 0xEB]
	0x031DFB7C LDR X21, [X21 + 0x748]
	0x031DFB80 MOV X19, X0
	0x031DFB84 TBNZ X8, 0x0, 0x31DFB9C
	0x031DFB88 ADRP X0, 0xF19000
	0x031DFB8C LDR X0, [X0 + 0x748]
	0x031DFB90 BL 0x1C16CF4
	0x031DFB94 MOVZ W8, 0x1
	0x031DFB98 STRB W8, [X20 + 0xEB]
	0x031DFB9C LDR X0, [X21]
	0x031DFBA0 BL 0x1C16F10
	0x031DFBA4 MOV X1, X19
	0x031DFBA8 MOV X20, X0
	0x031DFBAC BL 0x31DC8A8
	0x031DFBB0 MOV X0, X20
	0x031DFBB4 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FE000
	009 Move X22, 0xF42000
	010 Move W8, [X20+218]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF42000
	018 Move X0, [X0+1264]
	019 Call 0x1C17CF4
	020 Move X0, 0xF42000
	021 Move X0, [X0+1272]
	022 Call 0x1C17CF4
	023 Move X0, 0xF42000
	024 Move X0, [X0+1280]
	025 Call 0x1C17CF4
	026 Move X0, 0xF42000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF1A000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+218], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF42000
	042 Move X23, 0xF1A000
	043 Move X20, [X8+120]
	044 Move X24, [X24+1264]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF42000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1272]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF42000
	060 Move X8, [X8+1280]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Int64, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+120], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.Int64> value)

Disassembly:
	0x031DFBB8 LDP X30, X21, [X31], #0x20
	0x031DFBBC RET
	0x031DFBC0 STR X30, [X31 - 0x40]!
	0x031DFBC4 STP X24, X23, [X31 + 0x10]
	0x031DFBC8 STP X22, X21, [X31 + 0x20]
	0x031DFBCC STP X20, X19, [X31 + 0x30]
	0x031DFBD0 ADRP X20, 0x11FD000
	0x031DFBD4 ADRP X22, 0xF41000
	0x031DFBD8 LDRB W8, [X20 + 0xEC]
	0x031DFBDC LDR X22, [X22 + 0x260]
	0x031DFBE0 MOV X19, X0
	0x031DFBE4 TBNZ X8, 0x0, 0x31DFC2C
	0x031DFBE8 ADRP X0, 0xF41000
	0x031DFBEC LDR X0, [X0 + 0x5E0]
	0x031DFBF0 BL 0x1C16CF4
	0x031DFBF4 ADRP X0, 0xF41000
	0x031DFBF8 LDR X0, [X0 + 0x5E8]
	0x031DFBFC BL 0x1C16CF4
	0x031DFC00 ADRP X0, 0xF41000
	0x031DFC04 LDR X0, [X0 + 0x5F0]
	0x031DFC08 BL 0x1C16CF4
	0x031DFC0C ADRP X0, 0xF41000
	0x031DFC10 LDR X0, [X0 + 0x260]
	0x031DFC14 BL 0x1C16CF4
	0x031DFC18 ADRP X0, 0xF19000
	0x031DFC1C LDR X0, [X0 + 0x748]
	0x031DFC20 BL 0x1C16CF4
	0x031DFC24 MOVZ W8, 0x1
	0x031DFC28 STRB W8, [X20 + 0xEC]
	0x031DFC2C LDR X0, [X22]
	0x031DFC30 LDR W8, [X0 + 0xE0]
	0x031DFC34 CBNZ W8, 0x31DFC40
	0x031DFC38 BL 0x1C16DFC
	0x031DFC3C LDR X0, [X22]
	0x031DFC40 LDR X8, [X0 + 0xB8]
	0x031DFC44 ADRP X24, 0xF41000
	0x031DFC48 ADRP X23, 0xF19000
	0x031DFC4C LDR X20, [X8 + 0xD8]
	0x031DFC50 LDR X24, [X24 + 0x5E0]
	0x031DFC54 LDR X23, [X23 + 0x748]
	0x031DFC58 CBNZ X20, 0x31DFCAC
	0x031DFC5C LDR W8, [X0 + 0xE0]
	0x031DFC60 CBNZ W8, 0x31DFC6C
	0x031DFC64 BL 0x1C16DFC
	0x031DFC68 LDR X0, [X22]
	0x031DFC6C ADRP X9, 0xF41000
	0x031DFC70 LDR X8, [X0 + 0xB8]
	0x031DFC74 LDR X9, [X9 + 0x5E8]
	0x031DFC78 LDR X21, [X8]
	0x031DFC7C LDR X0, [X9]
	0x031DFC80 BL 0x1C16F10
	0x031DFC84 ADRP X8, 0xF41000
	0x031DFC88 LDR X8, [X8 + 0x5F0]
	0x031DFC8C MOV X1, X21
	0x031DFC90 MOV X3, X31
	0x031DFC94 MOV X20, X0
	0x031DFC98 LDR X2, [X8]
	0x031DFC9C BL 0x29A8CD4
	0x031DFCA0 LDR X8, [X22]
	0x031DFCA4 LDR X8, [X8 + 0xB8]
	0x031DFCA8 STR X20, [X8 + 0xD8]
	0x031DFCAC LDR X2, [X24]
	0x031DFCB0 MOV X0, X19
	0x031DFCB4 MOV X1, X20
	0x031DFCB8 BL 0x22E3F0C
	0x031DFCBC LDR X8, [X23]
	0x031DFCC0 MOV X19, X0
	0x031DFCC4 MOV X0, X8
	0x031DFCC8 BL 0x1C16F10
	0x031DFCCC MOV X1, X19
	0x031DFCD0 MOV X20, X0
	0x031DFCD4 BL 0x31DD564
	0x031DFCD8 MOV X0, X20
	0x031DFCDC LDP X20, X19, [X31 + 0x30]
	0x031DFCE0 LDP X22, X21, [X31 + 0x20]
	0x031DFCE4 LDP X24, X23, [X31 + 0x10]
	0x031DFCE8 LDR X30, [X31], #0x40
	0x031DFCEC RET
	0x031DFCF0 STR X30, [X31 - 0x40]!
	0x031DFCF4 STP X24, X23, [X31 + 0x10]
	0x031DFCF8 STP X22, X21, [X31 + 0x20]
	0x031DFCFC STP X20, X19, [X31 + 0x30]
	0x031DFD00 ADRP X20, 0x11FD000
	0x031DFD04 LDRB W8, [X20 + 0xED]
	0x031DFD08 MOV X19, X0
	0x031DFD0C TBNZ X8, 0x0, 0x31DFD60
	0x031DFD10 ADRP X0, 0xF41000
	0x031DFD14 LDR X0, [X0 + 0x5E0]
	0x031DFD18 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FE000
	009 Move W8, [X20+219]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF42000
	016 Move X0, [X0+1264]
	017 Call 0x1C17CF4
	018 Move X0, 0xF42000
	019 Move X0, [X0+1272]
	020 Call 0x1C17CF4
	021 Move X0, 0xF42000
	022 Move X0, [X0+1288]
	023 Call 0x1C17CF4
	024 Move X0, 0xF42000
	025 Move X0, [X0+1296]
	026 Call 0x1C17CF4
	027 Move X0, 0xF42000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF1A000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+219], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF42000
	038 Move X8, [X8+1288]
	039 Move X22, 0xF42000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Int64>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF42000
	054 Move X23, 0xF1A000
	055 Move X20, [X9+128]
	056 Move X24, [X24+1264]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF42000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1272]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF42000
	073 Move X8, [X8+1296]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Int64, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+128], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(System.UInt16 value)

Disassembly:
	0x031DFD1C ADRP X0, 0xF41000
	0x031DFD20 LDR X0, [X0 + 0x5E8]
	0x031DFD24 BL 0x1C16CF4
	0x031DFD28 ADRP X0, 0xF41000
	0x031DFD2C LDR X0, [X0 + 0x5F8]
	0x031DFD30 BL 0x1C16CF4
	0x031DFD34 ADRP X0, 0xF41000
	0x031DFD38 LDR X0, [X0 + 0x600]
	0x031DFD3C BL 0x1C16CF4
	0x031DFD40 ADRP X0, 0xF41000
	0x031DFD44 LDR X0, [X0 + 0x260]
	0x031DFD48 BL 0x1C16CF4
	0x031DFD4C ADRP X0, 0xF19000
	0x031DFD50 LDR X0, [X0 + 0x748]
	0x031DFD54 BL 0x1C16CF4
	0x031DFD58 MOVZ W8, 0x1
	0x031DFD5C STRB W8, [X20 + 0xED]
	0x031DFD60 CBZ X19, 0x31DFE50
	0x031DFD64 ADRP X8, 0xF41000
	0x031DFD68 LDR X8, [X8 + 0x5F8]
	0x031DFD6C ADRP X22, 0xF41000
	0x031DFD70 MOV X0, X19
	0x031DFD74 LDR X1, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11FE000
	006 Move X21, 0xF1A000
	007 Move W8, [X20+220]
	008 Move X21, [X21+1864]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF1A000
	015 Move X0, [X0+1864]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+220], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 And W8, W19, 0xFFFF
	022 NotImplemented "Instruction UCVTF not yet implemented."
	023 Move X20, X0
	024 Call Value..ctor, X0, V0
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: mixpanel.Value op_Implicit(System.UInt16[] value)

Disassembly:
	0x031DFD78 LDR X22, [X22 + 0x260]
	0x031DFD7C BL 0x301DDC4
	0x031DFD80 LDR X8, [X22]
	0x031DFD84 MOV X19, X0
	0x031DFD88 LDR W9, [X8 + 0xE0]
	0x031DFD8C CBNZ W9, 0x31DFD9C
	0x031DFD90 MOV X0, X8
	0x031DFD94 BL 0x1C16DFC
	0x031DFD98 LDR X8, [X22]
	0x031DFD9C LDR X9, [X8 + 0xB8]
	0x031DFDA0 ADRP X24, 0xF41000
	0x031DFDA4 ADRP X23, 0xF19000
	0x031DFDA8 LDR X20, [X9 + 0xE0]
	0x031DFDAC LDR X24, [X24 + 0x5E0]
	0x031DFDB0 LDR X23, [X23 + 0x748]
	0x031DFDB4 CBNZ X20, 0x31DFE0C
	0x031DFDB8 LDR W9, [X8 + 0xE0]
	0x031DFDBC CBNZ W9, 0x31DFDCC
	0x031DFDC0 MOV X0, X8
	0x031DFDC4 BL 0x1C16DFC
	0x031DFDC8 LDR X8, [X22]
	0x031DFDCC ADRP X9, 0xF41000
	0x031DFDD0 LDR X8, [X8 + 0xB8]
	0x031DFDD4 LDR X9, [X9 + 0x5E8]
	0x031DFDD8 LDR X21, [X8]
	0x031DFDDC LDR X0, [X9]
	0x031DFDE0 BL 0x1C16F10
	0x031DFDE4 ADRP X8, 0xF41000
	0x031DFDE8 LDR X8, [X8 + 0x600]
	0x031DFDEC MOV X1, X21
	0x031DFDF0 MOV X3, X31
	0x031DFDF4 MOV X20, X0
	0x031DFDF8 LDR X2, [X8]
	0x031DFDFC BL 0x29A8CD4
	0x031DFE00 LDR X8, [X22]
	0x031DFE04 LDR X8, [X8 + 0xB8]
	0x031DFE08 STR X20, [X8 + 0xE0]
	0x031DFE0C LDR X2, [X24]
	0x031DFE10 MOV X0, X19
	0x031DFE14 MOV X1, X20
	0x031DFE18 BL 0x22E3F0C
	0x031DFE1C LDR X8, [X23]
	0x031DFE20 MOV X19, X0
	0x031DFE24 MOV X0, X8
	0x031DFE28 BL 0x1C16F10
	0x031DFE2C MOV X1, X19
	0x031DFE30 MOV X20, X0
	0x031DFE34 BL 0x31DD564
	0x031DFE38 MOV X0, X20
	0x031DFE3C LDP X20, X19, [X31 + 0x30]
	0x031DFE40 LDP X22, X21, [X31 + 0x20]
	0x031DFE44 LDP X24, X23, [X31 + 0x10]
	0x031DFE48 LDR X30, [X31], #0x40
	0x031DFE4C RET
	0x031DFE50 BL 0x1C16F20
	0x031DFE54 STR X30, [X31 - 0x30]!
	0x031DFE58 STP X22, X21, [X31 + 0x10]
	0x031DFE5C STP X20, X19, [X31 + 0x20]
	0x031DFE60 ADRP X21, 0x11FD000
	0x031DFE64 ADRP X22, 0xF19000
	0x031DFE68 LDRB W8, [X21 + 0xEE]
	0x031DFE6C LDR X22, [X22 + 0x748]
	0x031DFE70 MOV X19, X1
	0x031DFE74 MOV X20, X0
	0x031DFE78 TBNZ X8, 0x0, 0x31DFE90
	0x031DFE7C ADRP X0, 0xF19000
	0x031DFE80 LDR X0, [X0 + 0x748]
	0x031DFE84 BL 0x1C16CF4
	0x031DFE88 MOVZ W8, 0x1
	0x031DFE8C STRB W8, [X21 + 0xEE]
	0x031DFE90 LDR X0, [X22]
	0x031DFE94 BL 0x1C16F10
	0x031DFE98 MOV X1, X20
	0x031DFE9C MOV X2, X19
	0x031DFEA0 MOV X21, X0
	0x031DFEA4 BL 0x31DC98C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FE000
	009 Move X22, 0xF42000
	010 Move W8, [X20+221]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF42000
	018 Move X0, [X0+1304]
	019 Call 0x1C17CF4
	020 Move X0, 0xF42000
	021 Move X0, [X0+1312]
	022 Call 0x1C17CF4
	023 Move X0, 0xF42000
	024 Move X0, [X0+1320]
	025 Call 0x1C17CF4
	026 Move X0, 0xF42000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF1A000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+221], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF42000
	042 Move X23, 0xF1A000
	043 Move X20, [X8+136]
	044 Move X24, [X24+1304]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF42000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1312]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF42000
	060 Move X8, [X8+1320]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<UInt16, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+136], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.UInt16> value)

Disassembly:
	0x031DFEA8 MOV X0, X21
	0x031DFEAC LDP X20, X19, [X31 + 0x20]
	0x031DFEB0 LDP X22, X21, [X31 + 0x10]
	0x031DFEB4 LDR X30, [X31], #0x30
	0x031DFEB8 RET
	0x031DFEBC STR X30, [X31 - 0x40]!
	0x031DFEC0 STP X24, X23, [X31 + 0x10]
	0x031DFEC4 STP X22, X21, [X31 + 0x20]
	0x031DFEC8 STP X20, X19, [X31 + 0x30]
	0x031DFECC ADRP X20, 0x11FD000
	0x031DFED0 ADRP X22, 0xF41000
	0x031DFED4 LDRB W8, [X20 + 0xEF]
	0x031DFED8 LDR X22, [X22 + 0x260]
	0x031DFEDC MOV X19, X0
	0x031DFEE0 TBNZ X8, 0x0, 0x31DFF28
	0x031DFEE4 ADRP X0, 0xF41000
	0x031DFEE8 LDR X0, [X0 + 0x608]
	0x031DFEEC BL 0x1C16CF4
	0x031DFEF0 ADRP X0, 0xF41000
	0x031DFEF4 LDR X0, [X0 + 0x610]
	0x031DFEF8 BL 0x1C16CF4
	0x031DFEFC ADRP X0, 0xF41000
	0x031DFF00 LDR X0, [X0 + 0x618]
	0x031DFF04 BL 0x1C16CF4
	0x031DFF08 ADRP X0, 0xF41000
	0x031DFF0C LDR X0, [X0 + 0x260]
	0x031DFF10 BL 0x1C16CF4
	0x031DFF14 ADRP X0, 0xF19000
	0x031DFF18 LDR X0, [X0 + 0x748]
	0x031DFF1C BL 0x1C16CF4
	0x031DFF20 MOVZ W8, 0x1
	0x031DFF24 STRB W8, [X20 + 0xEF]
	0x031DFF28 LDR X0, [X22]
	0x031DFF2C LDR W8, [X0 + 0xE0]
	0x031DFF30 CBNZ W8, 0x31DFF3C
	0x031DFF34 BL 0x1C16DFC
	0x031DFF38 LDR X0, [X22]
	0x031DFF3C LDR X8, [X0 + 0xB8]
	0x031DFF40 ADRP X24, 0xF41000
	0x031DFF44 ADRP X23, 0xF19000
	0x031DFF48 LDR X20, [X8 + 0xE8]
	0x031DFF4C LDR X24, [X24 + 0x608]
	0x031DFF50 LDR X23, [X23 + 0x748]
	0x031DFF54 CBNZ X20, 0x31DFFA8
	0x031DFF58 LDR W8, [X0 + 0xE0]
	0x031DFF5C CBNZ W8, 0x31DFF68
	0x031DFF60 BL 0x1C16DFC
	0x031DFF64 LDR X0, [X22]
	0x031DFF68 ADRP X9, 0xF41000
	0x031DFF6C LDR X8, [X0 + 0xB8]
	0x031DFF70 LDR X9, [X9 + 0x610]
	0x031DFF74 LDR X21, [X8]
	0x031DFF78 LDR X0, [X9]
	0x031DFF7C BL 0x1C16F10
	0x031DFF80 ADRP X8, 0xF41000
	0x031DFF84 LDR X8, [X8 + 0x618]
	0x031DFF88 MOV X1, X21
	0x031DFF8C MOV X3, X31
	0x031DFF90 MOV X20, X0
	0x031DFF94 LDR X2, [X8]
	0x031DFF98 BL 0x29A7C40
	0x031DFF9C LDR X8, [X22]
	0x031DFFA0 LDR X8, [X8 + 0xB8]
	0x031DFFA4 STR X20, [X8 + 0xE8]
	0x031DFFA8 LDR X2, [X24]
	0x031DFFAC MOV X0, X19
	0x031DFFB0 MOV X1, X20
	0x031DFFB4 BL 0x22E3A58
	0x031DFFB8 LDR X8, [X23]
	0x031DFFBC MOV X19, X0
	0x031DFFC0 MOV X0, X8
	0x031DFFC4 BL 0x1C16F10
	0x031DFFC8 MOV X1, X19
	0x031DFFCC MOV X20, X0
	0x031DFFD0 BL 0x31DD564
	0x031DFFD4 MOV X0, X20
	0x031DFFD8 LDP X20, X19, [X31 + 0x30]
	0x031DFFDC LDP X22, X21, [X31 + 0x20]
	0x031DFFE0 LDP X24, X23, [X31 + 0x10]
	0x031DFFE4 LDR X30, [X31], #0x40
	0x031DFFE8 RET
	0x031DFFEC STR X30, [X31 - 0x40]!
	0x031DFFF0 STP X24, X23, [X31 + 0x10]
	0x031DFFF4 STP X22, X21, [X31 + 0x20]
	0x031DFFF8 STP X20, X19, [X31 + 0x30]
	0x031DFFFC ADRP X20, 0x11FD000
	0x031E0000 LDRB W8, [X20 + 0xF0]
	0x031E0004 MOV X19, X0
	0x031E0008 TBNZ X8, 0x0, 0x31E005C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FE000
	009 Move W8, [X20+222]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF42000
	016 Move X0, [X0+1304]
	017 Call 0x1C17CF4
	018 Move X0, 0xF42000
	019 Move X0, [X0+1312]
	020 Call 0x1C17CF4
	021 Move X0, 0xF42000
	022 Move X0, [X0+1328]
	023 Call 0x1C17CF4
	024 Move X0, 0xF42000
	025 Move X0, [X0+1336]
	026 Call 0x1C17CF4
	027 Move X0, 0xF42000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF1A000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+222], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF42000
	038 Move X8, [X8+1328]
	039 Move X22, 0xF42000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<UInt16>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF42000
	054 Move X23, 0xF1A000
	055 Move X20, [X9+144]
	056 Move X24, [X24+1304]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF42000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1312]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF42000
	073 Move X8, [X8+1336]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<UInt16, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+144], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(System.UInt32 value)

Disassembly:
	0x031E000C ADRP X0, 0xF40000
	0x031E0010 LDR X0, [X0 + 0x608]
	0x031E0014 BL 0x1C16CF4
	0x031E0018 ADRP X0, 0xF40000
	0x031E001C LDR X0, [X0 + 0x610]
	0x031E0020 BL 0x1C16CF4
	0x031E0024 ADRP X0, 0xF40000
	0x031E0028 LDR X0, [X0 + 0x620]
	0x031E002C BL 0x1C16CF4
	0x031E0030 ADRP X0, 0xF40000
	0x031E0034 LDR X0, [X0 + 0x628]
	0x031E0038 BL 0x1C16CF4
	0x031E003C ADRP X0, 0xF40000
	0x031E0040 LDR X0, [X0 + 0x260]
	0x031E0044 BL 0x1C16CF4
	0x031E0048 ADRP X0, 0xF18000
	0x031E004C LDR X0, [X0 + 0x748]
	0x031E0050 BL 0x1C16CF4
	0x031E0054 MOVZ W8, 0x1
	0x031E0058 STRB W8, [X20 + 0xF0]
	0x031E005C CBZ X19, 0x31E014C
	0x031E0060 ADRP X8, 0xF40000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11FD000
	006 Move X21, 0xF19000
	007 Move W8, [X20+223]
	008 Move X21, [X21+1864]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF19000
	015 Move X0, [X0+1864]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+223], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 NotImplemented "Instruction UCVTF not yet implemented."
	022 Move X20, X0
	023 Call Value..ctor, X0, V0
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: mixpanel.Value op_Implicit(System.UInt32[] value)

Disassembly:
	0x031E0064 LDR X8, [X8 + 0x620]
	0x031E0068 ADRP X22, 0xF40000
	0x031E006C MOV X0, X19
	0x031E0070 LDR X1, [X8]
	0x031E0074 LDR X22, [X22 + 0x260]
	0x031E0078 BL 0x2FCA018
	0x031E007C LDR X8, [X22]
	0x031E0080 MOV X19, X0
	0x031E0084 LDR W9, [X8 + 0xE0]
	0x031E0088 CBNZ W9, 0x31E0098
	0x031E008C MOV X0, X8
	0x031E0090 BL 0x1C16DFC
	0x031E0094 LDR X8, [X22]
	0x031E0098 LDR X9, [X8 + 0xB8]
	0x031E009C ADRP X24, 0xF40000
	0x031E00A0 ADRP X23, 0xF18000
	0x031E00A4 LDR X20, [X9 + 0xF0]
	0x031E00A8 LDR X24, [X24 + 0x608]
	0x031E00AC LDR X23, [X23 + 0x748]
	0x031E00B0 CBNZ X20, 0x31E0108
	0x031E00B4 LDR W9, [X8 + 0xE0]
	0x031E00B8 CBNZ W9, 0x31E00C8
	0x031E00BC MOV X0, X8
	0x031E00C0 BL 0x1C16DFC
	0x031E00C4 LDR X8, [X22]
	0x031E00C8 ADRP X9, 0xF40000
	0x031E00CC LDR X8, [X8 + 0xB8]
	0x031E00D0 LDR X9, [X9 + 0x610]
	0x031E00D4 LDR X21, [X8]
	0x031E00D8 LDR X0, [X9]
	0x031E00DC BL 0x1C16F10
	0x031E00E0 ADRP X8, 0xF40000
	0x031E00E4 LDR X8, [X8 + 0x628]
	0x031E00E8 MOV X1, X21
	0x031E00EC MOV X3, X31
	0x031E00F0 MOV X20, X0
	0x031E00F4 LDR X2, [X8]
	0x031E00F8 BL 0x29A7C40
	0x031E00FC LDR X8, [X22]
	0x031E0100 LDR X8, [X8 + 0xB8]
	0x031E0104 STR X20, [X8 + 0xF0]
	0x031E0108 LDR X2, [X24]
	0x031E010C MOV X0, X19
	0x031E0110 MOV X1, X20
	0x031E0114 BL 0x22E3A58
	0x031E0118 LDR X8, [X23]
	0x031E011C MOV X19, X0
	0x031E0120 MOV X0, X8
	0x031E0124 BL 0x1C16F10
	0x031E0128 MOV X1, X19
	0x031E012C MOV X20, X0
	0x031E0130 BL 0x31DD564
	0x031E0134 MOV X0, X20
	0x031E0138 LDP X20, X19, [X31 + 0x30]
	0x031E013C LDP X22, X21, [X31 + 0x20]
	0x031E0140 LDP X24, X23, [X31 + 0x10]
	0x031E0144 LDR X30, [X31], #0x40
	0x031E0148 RET
	0x031E014C BL 0x1C16F20
	0x031E0150 STP X30, X21, [X31 - 0x20]!
	0x031E0154 STP X20, X19, [X31 + 0x10]
	0x031E0158 ADRP X20, 0x11FC000
	0x031E015C ADRP X21, 0xF18000
	0x031E0160 LDRB W8, [X20 + 0xF1]
	0x031E0164 LDR X21, [X21 + 0x748]
	0x031E0168 MOV X19, X0
	0x031E016C TBNZ X8, 0x0, 0x31E0184
	0x031E0170 ADRP X0, 0xF18000
	0x031E0174 LDR X0, [X0 + 0x748]
	0x031E0178 BL 0x1C16CF4
	0x031E017C MOVZ W8, 0x1
	0x031E0180 STRB W8, [X20 + 0xF1]
	0x031E0184 LDR X0, [X21]
	0x031E0188 BL 0x1C16F10
	0x031E018C MOV X1, X19
	0x031E0190 MOV X20, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FD000
	009 Move X22, 0xF41000
	010 Move W8, [X20+224]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF41000
	018 Move X0, [X0+1344]
	019 Call 0x1C17CF4
	020 Move X0, 0xF41000
	021 Move X0, [X0+1352]
	022 Call 0x1C17CF4
	023 Move X0, 0xF41000
	024 Move X0, [X0+1360]
	025 Call 0x1C17CF4
	026 Move X0, 0xF41000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF19000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+224], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF41000
	042 Move X23, 0xF19000
	043 Move X20, [X8+152]
	044 Move X24, [X24+1344]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF41000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1352]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF41000
	060 Move X8, [X8+1360]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<UInt32, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+152], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.UInt32> value)

Disassembly:
	0x031E0194 BL 0x31DCA9C
	0x031E0198 MOV X0, X20
	0x031E019C LDP X20, X19, [X31 + 0x10]
	0x031E01A0 LDP X30, X21, [X31], #0x20
	0x031E01A4 RET
	0x031E01A8 STR X30, [X31 - 0x40]!
	0x031E01AC STP X24, X23, [X31 + 0x10]
	0x031E01B0 STP X22, X21, [X31 + 0x20]
	0x031E01B4 STP X20, X19, [X31 + 0x30]
	0x031E01B8 ADRP X20, 0x11FC000
	0x031E01BC ADRP X22, 0xF40000
	0x031E01C0 LDRB W8, [X20 + 0xF2]
	0x031E01C4 LDR X22, [X22 + 0x260]
	0x031E01C8 MOV X19, X0
	0x031E01CC TBNZ X8, 0x0, 0x31E0214
	0x031E01D0 ADRP X0, 0xF40000
	0x031E01D4 LDR X0, [X0 + 0x630]
	0x031E01D8 BL 0x1C16CF4
	0x031E01DC ADRP X0, 0xF40000
	0x031E01E0 LDR X0, [X0 + 0x638]
	0x031E01E4 BL 0x1C16CF4
	0x031E01E8 ADRP X0, 0xF40000
	0x031E01EC LDR X0, [X0 + 0x640]
	0x031E01F0 BL 0x1C16CF4
	0x031E01F4 ADRP X0, 0xF40000
	0x031E01F8 LDR X0, [X0 + 0x260]
	0x031E01FC BL 0x1C16CF4
	0x031E0200 ADRP X0, 0xF18000
	0x031E0204 LDR X0, [X0 + 0x748]
	0x031E0208 BL 0x1C16CF4
	0x031E020C MOVZ W8, 0x1
	0x031E0210 STRB W8, [X20 + 0xF2]
	0x031E0214 LDR X0, [X22]
	0x031E0218 LDR W8, [X0 + 0xE0]
	0x031E021C CBNZ W8, 0x31E0228
	0x031E0220 BL 0x1C16DFC
	0x031E0224 LDR X0, [X22]
	0x031E0228 LDR X8, [X0 + 0xB8]
	0x031E022C ADRP X24, 0xF40000
	0x031E0230 ADRP X23, 0xF18000
	0x031E0234 LDR X20, [X8 + 0xF8]
	0x031E0238 LDR X24, [X24 + 0x630]
	0x031E023C LDR X23, [X23 + 0x748]
	0x031E0240 CBNZ X20, 0x31E0294
	0x031E0244 LDR W8, [X0 + 0xE0]
	0x031E0248 CBNZ W8, 0x31E0254
	0x031E024C BL 0x1C16DFC
	0x031E0250 LDR X0, [X22]
	0x031E0254 ADRP X9, 0xF40000
	0x031E0258 LDR X8, [X0 + 0xB8]
	0x031E025C LDR X9, [X9 + 0x638]
	0x031E0260 LDR X21, [X8]
	0x031E0264 LDR X0, [X9]
	0x031E0268 BL 0x1C16F10
	0x031E026C ADRP X8, 0xF40000
	0x031E0270 LDR X8, [X8 + 0x640]
	0x031E0274 MOV X1, X21
	0x031E0278 MOV X3, X31
	0x031E027C MOV X20, X0
	0x031E0280 LDR X2, [X8]
	0x031E0284 BL 0x29A7920
	0x031E0288 LDR X8, [X22]
	0x031E028C LDR X8, [X8 + 0xB8]
	0x031E0290 STR X20, [X8 + 0xF8]
	0x031E0294 LDR X2, [X24]
	0x031E0298 MOV X0, X19
	0x031E029C MOV X1, X20
	0x031E02A0 BL 0x22E35A0
	0x031E02A4 LDR X8, [X23]
	0x031E02A8 MOV X19, X0
	0x031E02AC MOV X0, X8
	0x031E02B0 BL 0x1C16F10
	0x031E02B4 MOV X1, X19
	0x031E02B8 MOV X20, X0
	0x031E02BC BL 0x31DD564
	0x031E02C0 MOV X0, X20
	0x031E02C4 LDP X20, X19, [X31 + 0x30]
	0x031E02C8 LDP X22, X21, [X31 + 0x20]
	0x031E02CC LDP X24, X23, [X31 + 0x10]
	0x031E02D0 LDR X30, [X31], #0x40
	0x031E02D4 RET
	0x031E02D8 STR X30, [X31 - 0x40]!
	0x031E02DC STP X24, X23, [X31 + 0x10]
	0x031E02E0 STP X22, X21, [X31 + 0x20]
	0x031E02E4 STP X20, X19, [X31 + 0x30]
	0x031E02E8 ADRP X20, 0x11FC000
	0x031E02EC LDRB W8, [X20 + 0xF3]
	0x031E02F0 MOV X19, X0
	0x031E02F4 TBNZ X8, 0x0, 0x31E0348

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FD000
	009 Move W8, [X20+225]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF41000
	016 Move X0, [X0+1344]
	017 Call 0x1C17CF4
	018 Move X0, 0xF41000
	019 Move X0, [X0+1352]
	020 Call 0x1C17CF4
	021 Move X0, 0xF41000
	022 Move X0, [X0+1368]
	023 Call 0x1C17CF4
	024 Move X0, 0xF41000
	025 Move X0, [X0+1376]
	026 Call 0x1C17CF4
	027 Move X0, 0xF41000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF19000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+225], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF41000
	038 Move X8, [X8+1368]
	039 Move X22, 0xF41000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<UInt32>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF41000
	054 Move X23, 0xF19000
	055 Move X20, [X9+160]
	056 Move X24, [X24+1344]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF41000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1352]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF41000
	073 Move X8, [X8+1376]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<UInt32, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+160], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(System.UInt64 value)

Disassembly:
	0x031E02F8 ADRP X0, 0xF40000
	0x031E02FC LDR X0, [X0 + 0x630]
	0x031E0300 BL 0x1C16CF4
	0x031E0304 ADRP X0, 0xF40000
	0x031E0308 LDR X0, [X0 + 0x638]
	0x031E030C BL 0x1C16CF4
	0x031E0310 ADRP X0, 0xF40000
	0x031E0314 LDR X0, [X0 + 0x648]
	0x031E0318 BL 0x1C16CF4
	0x031E031C ADRP X0, 0xF40000
	0x031E0320 LDR X0, [X0 + 0x650]
	0x031E0324 BL 0x1C16CF4
	0x031E0328 ADRP X0, 0xF40000
	0x031E032C LDR X0, [X0 + 0x260]
	0x031E0330 BL 0x1C16CF4
	0x031E0334 ADRP X0, 0xF18000
	0x031E0338 LDR X0, [X0 + 0x748]
	0x031E033C BL 0x1C16CF4
	0x031E0340 MOVZ W8, 0x1
	0x031E0344 STRB W8, [X20 + 0xF3]
	0x031E0348 CBZ X19, 0x31E0438
	0x031E034C ADRP X8, 0xF40000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11FD000
	006 Move X21, 0xF19000
	007 Move W8, [X20+226]
	008 Move X21, [X21+1864]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF19000
	015 Move X0, [X0+1864]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+226], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 NotImplemented "Instruction UCVTF not yet implemented."
	022 Move X20, X0
	023 Call Value..ctor, X0, V0
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: mixpanel.Value op_Implicit(System.UInt64[] value)

Disassembly:
	0x031E0350 LDR X8, [X8 + 0x648]
	0x031E0354 ADRP X22, 0xF40000
	0x031E0358 MOV X0, X19
	0x031E035C LDR X1, [X8]
	0x031E0360 LDR X22, [X22 + 0x260]
	0x031E0364 BL 0x2F80994
	0x031E0368 LDR X8, [X22]
	0x031E036C MOV X19, X0
	0x031E0370 LDR W9, [X8 + 0xE0]
	0x031E0374 CBNZ W9, 0x31E0384
	0x031E0378 MOV X0, X8
	0x031E037C BL 0x1C16DFC
	0x031E0380 LDR X8, [X22]
	0x031E0384 LDR X9, [X8 + 0xB8]
	0x031E0388 ADRP X24, 0xF40000
	0x031E038C ADRP X23, 0xF18000
	0x031E0390 LDR X20, [X9 + 0x100]
	0x031E0394 LDR X24, [X24 + 0x630]
	0x031E0398 LDR X23, [X23 + 0x748]
	0x031E039C CBNZ X20, 0x31E03F4
	0x031E03A0 LDR W9, [X8 + 0xE0]
	0x031E03A4 CBNZ W9, 0x31E03B4
	0x031E03A8 MOV X0, X8
	0x031E03AC BL 0x1C16DFC
	0x031E03B0 LDR X8, [X22]
	0x031E03B4 ADRP X9, 0xF40000
	0x031E03B8 LDR X8, [X8 + 0xB8]
	0x031E03BC LDR X9, [X9 + 0x638]
	0x031E03C0 LDR X21, [X8]
	0x031E03C4 LDR X0, [X9]
	0x031E03C8 BL 0x1C16F10
	0x031E03CC ADRP X8, 0xF40000
	0x031E03D0 LDR X8, [X8 + 0x650]
	0x031E03D4 MOV X1, X21
	0x031E03D8 MOV X3, X31
	0x031E03DC MOV X20, X0
	0x031E03E0 LDR X2, [X8]
	0x031E03E4 BL 0x29A7920
	0x031E03E8 LDR X8, [X22]
	0x031E03EC LDR X8, [X8 + 0xB8]
	0x031E03F0 STR X20, [X8 + 0x100]
	0x031E03F4 LDR X2, [X24]
	0x031E03F8 MOV X0, X19
	0x031E03FC MOV X1, X20
	0x031E0400 BL 0x22E35A0
	0x031E0404 LDR X8, [X23]
	0x031E0408 MOV X19, X0
	0x031E040C MOV X0, X8
	0x031E0410 BL 0x1C16F10
	0x031E0414 MOV X1, X19
	0x031E0418 MOV X20, X0
	0x031E041C BL 0x31DD564
	0x031E0420 MOV X0, X20
	0x031E0424 LDP X20, X19, [X31 + 0x30]
	0x031E0428 LDP X22, X21, [X31 + 0x20]
	0x031E042C LDP X24, X23, [X31 + 0x10]
	0x031E0430 LDR X30, [X31], #0x40
	0x031E0434 RET
	0x031E0438 BL 0x1C16F20
	0x031E043C STR X30, [X31 - 0x30]!
	0x031E0440 STP X22, X21, [X31 + 0x10]
	0x031E0444 STP X20, X19, [X31 + 0x20]
	0x031E0448 ADRP X21, 0x11FC000
	0x031E044C ADRP X22, 0xF18000
	0x031E0450 LDRB W8, [X21 + 0xF4]
	0x031E0454 LDR X22, [X22 + 0x748]
	0x031E0458 MOV X19, X1
	0x031E045C MOV X20, X0
	0x031E0460 TBNZ X8, 0x0, 0x31E0478
	0x031E0464 ADRP X0, 0xF18000
	0x031E0468 LDR X0, [X0 + 0x748]
	0x031E046C BL 0x1C16CF4
	0x031E0470 MOVZ W8, 0x1
	0x031E0474 STRB W8, [X21 + 0xF4]
	0x031E0478 LDR X0, [X22]
	0x031E047C BL 0x1C16F10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FD000
	009 Move X22, 0xF41000
	010 Move W8, [X20+227]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF41000
	018 Move X0, [X0+1384]
	019 Call 0x1C17CF4
	020 Move X0, 0xF41000
	021 Move X0, [X0+1392]
	022 Call 0x1C17CF4
	023 Move X0, 0xF41000
	024 Move X0, [X0+1400]
	025 Call 0x1C17CF4
	026 Move X0, 0xF41000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF19000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+227], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF41000
	042 Move X23, 0xF19000
	043 Move X20, [X8+168]
	044 Move X24, [X24+1384]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF41000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1392]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF41000
	060 Move X8, [X8+1400]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<UInt64, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+168], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.UInt64> value)

Disassembly:
	0x031E0480 MOV X1, X20
	0x031E0484 MOV X2, X19
	0x031E0488 MOV X21, X0
	0x031E048C BL 0x31DCB80
	0x031E0490 MOV X0, X21
	0x031E0494 LDP X20, X19, [X31 + 0x20]
	0x031E0498 LDP X22, X21, [X31 + 0x10]
	0x031E049C LDR X30, [X31], #0x30
	0x031E04A0 RET
	0x031E04A4 STR X30, [X31 - 0x40]!
	0x031E04A8 STP X24, X23, [X31 + 0x10]
	0x031E04AC STP X22, X21, [X31 + 0x20]
	0x031E04B0 STP X20, X19, [X31 + 0x30]
	0x031E04B4 ADRP X20, 0x11FC000
	0x031E04B8 ADRP X22, 0xF40000
	0x031E04BC LDRB W8, [X20 + 0xF5]
	0x031E04C0 LDR X22, [X22 + 0x260]
	0x031E04C4 MOV X19, X0
	0x031E04C8 TBNZ X8, 0x0, 0x31E0510
	0x031E04CC ADRP X0, 0xF40000
	0x031E04D0 LDR X0, [X0 + 0x658]
	0x031E04D4 BL 0x1C16CF4
	0x031E04D8 ADRP X0, 0xF40000
	0x031E04DC LDR X0, [X0 + 0x660]
	0x031E04E0 BL 0x1C16CF4
	0x031E04E4 ADRP X0, 0xF40000
	0x031E04E8 LDR X0, [X0 + 0x668]
	0x031E04EC BL 0x1C16CF4
	0x031E04F0 ADRP X0, 0xF40000
	0x031E04F4 LDR X0, [X0 + 0x260]
	0x031E04F8 BL 0x1C16CF4
	0x031E04FC ADRP X0, 0xF18000
	0x031E0500 LDR X0, [X0 + 0x748]
	0x031E0504 BL 0x1C16CF4
	0x031E0508 MOVZ W8, 0x1
	0x031E050C STRB W8, [X20 + 0xF5]
	0x031E0510 LDR X0, [X22]
	0x031E0514 LDR W8, [X0 + 0xE0]
	0x031E0518 CBNZ W8, 0x31E0524
	0x031E051C BL 0x1C16DFC
	0x031E0520 LDR X0, [X22]
	0x031E0524 LDR X8, [X0 + 0xB8]
	0x031E0528 ADRP X24, 0xF40000
	0x031E052C ADRP X23, 0xF18000
	0x031E0530 LDR X20, [X8 + 0x108]
	0x031E0534 LDR X24, [X24 + 0x658]
	0x031E0538 LDR X23, [X23 + 0x748]
	0x031E053C CBNZ X20, 0x31E0590
	0x031E0540 LDR W8, [X0 + 0xE0]
	0x031E0544 CBNZ W8, 0x31E0550
	0x031E0548 BL 0x1C16DFC
	0x031E054C LDR X0, [X22]
	0x031E0550 ADRP X9, 0xF40000
	0x031E0554 LDR X8, [X0 + 0xB8]
	0x031E0558 LDR X9, [X9 + 0x660]
	0x031E055C LDR X21, [X8]
	0x031E0560 LDR X0, [X9]
	0x031E0564 BL 0x1C16F10
	0x031E0568 ADRP X8, 0xF40000
	0x031E056C LDR X8, [X8 + 0x668]
	0x031E0570 MOV X1, X21
	0x031E0574 MOV X3, X31
	0x031E0578 MOV X20, X0
	0x031E057C LDR X2, [X8]
	0x031E0580 BL 0x29A79C0
	0x031E0584 LDR X8, [X22]
	0x031E0588 LDR X8, [X8 + 0xB8]
	0x031E058C STR X20, [X8 + 0x108]
	0x031E0590 LDR X2, [X24]
	0x031E0594 MOV X0, X19
	0x031E0598 MOV X1, X20
	0x031E059C BL 0x22E36CC
	0x031E05A0 LDR X8, [X23]
	0x031E05A4 MOV X19, X0
	0x031E05A8 MOV X0, X8
	0x031E05AC BL 0x1C16F10
	0x031E05B0 MOV X1, X19
	0x031E05B4 MOV X20, X0
	0x031E05B8 BL 0x31DD564
	0x031E05BC MOV X0, X20
	0x031E05C0 LDP X20, X19, [X31 + 0x30]
	0x031E05C4 LDP X22, X21, [X31 + 0x20]
	0x031E05C8 LDP X24, X23, [X31 + 0x10]
	0x031E05CC LDR X30, [X31], #0x40
	0x031E05D0 RET
	0x031E05D4 STR X30, [X31 - 0x40]!
	0x031E05D8 STP X24, X23, [X31 + 0x10]
	0x031E05DC STP X22, X21, [X31 + 0x20]
	0x031E05E0 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FD000
	009 Move W8, [X20+228]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF41000
	016 Move X0, [X0+1384]
	017 Call 0x1C17CF4
	018 Move X0, 0xF41000
	019 Move X0, [X0+1392]
	020 Call 0x1C17CF4
	021 Move X0, 0xF41000
	022 Move X0, [X0+1408]
	023 Call 0x1C17CF4
	024 Move X0, 0xF41000
	025 Move X0, [X0+1416]
	026 Call 0x1C17CF4
	027 Move X0, 0xF41000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF19000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+228], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF41000
	038 Move X8, [X8+1408]
	039 Move X22, 0xF41000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<UInt64>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF41000
	054 Move X23, 0xF19000
	055 Move X20, [X9+176]
	056 Move X24, [X24+1384]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF41000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1392]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF41000
	073 Move X8, [X8+1416]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<UInt64, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+176], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(System.SByte value)

Disassembly:
	0x031E05E4 ADRP X20, 0x11FC000
	0x031E05E8 LDRB W8, [X20 + 0xF6]
	0x031E05EC MOV X19, X0
	0x031E05F0 TBNZ X8, 0x0, 0x31E0644
	0x031E05F4 ADRP X0, 0xF40000
	0x031E05F8 LDR X0, [X0 + 0x658]
	0x031E05FC BL 0x1C16CF4
	0x031E0600 ADRP X0, 0xF40000
	0x031E0604 LDR X0, [X0 + 0x660]
	0x031E0608 BL 0x1C16CF4
	0x031E060C ADRP X0, 0xF40000
	0x031E0610 LDR X0, [X0 + 0x670]
	0x031E0614 BL 0x1C16CF4
	0x031E0618 ADRP X0, 0xF40000
	0x031E061C LDR X0, [X0 + 0x678]
	0x031E0620 BL 0x1C16CF4
	0x031E0624 ADRP X0, 0xF40000
	0x031E0628 LDR X0, [X0 + 0x260]
	0x031E062C BL 0x1C16CF4
	0x031E0630 ADRP X0, 0xF18000
	0x031E0634 LDR X0, [X0 + 0x748]
	0x031E0638 BL 0x1C16CF4
	0x031E063C MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11FD000
	006 Move X21, 0xF19000
	007 Move W8, [X20+229]
	008 Move X21, [X21+1864]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF19000
	015 Move X0, [X0+1864]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+229], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 NotImplemented "Instruction SXTB not yet implemented."
	022 NotImplemented "Instruction SCVTF not yet implemented."
	023 Move X20, X0
	024 Call Value..ctor, X0, V0
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: mixpanel.Value op_Implicit(System.SByte[] value)

Disassembly:
	0x031E0640 STRB W8, [X20 + 0xF6]
	0x031E0644 CBZ X19, 0x31E0734
	0x031E0648 ADRP X8, 0xF40000
	0x031E064C LDR X8, [X8 + 0x670]
	0x031E0650 ADRP X22, 0xF40000
	0x031E0654 MOV X0, X19
	0x031E0658 LDR X1, [X8]
	0x031E065C LDR X22, [X22 + 0x260]
	0x031E0660 BL 0x2F834B0
	0x031E0664 LDR X8, [X22]
	0x031E0668 MOV X19, X0
	0x031E066C LDR W9, [X8 + 0xE0]
	0x031E0670 CBNZ W9, 0x31E0680
	0x031E0674 MOV X0, X8
	0x031E0678 BL 0x1C16DFC
	0x031E067C LDR X8, [X22]
	0x031E0680 LDR X9, [X8 + 0xB8]
	0x031E0684 ADRP X24, 0xF40000
	0x031E0688 ADRP X23, 0xF18000
	0x031E068C LDR X20, [X9 + 0x110]
	0x031E0690 LDR X24, [X24 + 0x658]
	0x031E0694 LDR X23, [X23 + 0x748]
	0x031E0698 CBNZ X20, 0x31E06F0
	0x031E069C LDR W9, [X8 + 0xE0]
	0x031E06A0 CBNZ W9, 0x31E06B0
	0x031E06A4 MOV X0, X8
	0x031E06A8 BL 0x1C16DFC
	0x031E06AC LDR X8, [X22]
	0x031E06B0 ADRP X9, 0xF40000
	0x031E06B4 LDR X8, [X8 + 0xB8]
	0x031E06B8 LDR X9, [X9 + 0x660]
	0x031E06BC LDR X21, [X8]
	0x031E06C0 LDR X0, [X9]
	0x031E06C4 BL 0x1C16F10
	0x031E06C8 ADRP X8, 0xF40000
	0x031E06CC LDR X8, [X8 + 0x678]
	0x031E06D0 MOV X1, X21
	0x031E06D4 MOV X3, X31
	0x031E06D8 MOV X20, X0
	0x031E06DC LDR X2, [X8]
	0x031E06E0 BL 0x29A79C0
	0x031E06E4 LDR X8, [X22]
	0x031E06E8 LDR X8, [X8 + 0xB8]
	0x031E06EC STR X20, [X8 + 0x110]
	0x031E06F0 LDR X2, [X24]
	0x031E06F4 MOV X0, X19
	0x031E06F8 MOV X1, X20
	0x031E06FC BL 0x22E36CC
	0x031E0700 LDR X8, [X23]
	0x031E0704 MOV X19, X0
	0x031E0708 MOV X0, X8
	0x031E070C BL 0x1C16F10
	0x031E0710 MOV X1, X19
	0x031E0714 MOV X20, X0
	0x031E0718 BL 0x31DD564
	0x031E071C MOV X0, X20
	0x031E0720 LDP X20, X19, [X31 + 0x30]
	0x031E0724 LDP X22, X21, [X31 + 0x20]
	0x031E0728 LDP X24, X23, [X31 + 0x10]
	0x031E072C LDR X30, [X31], #0x40
	0x031E0730 RET
	0x031E0734 BL 0x1C16F20
	0x031E0738 STP X30, X21, [X31 - 0x20]!
	0x031E073C STP X20, X19, [X31 + 0x10]
	0x031E0740 ADRP X20, 0x11FC000
	0x031E0744 ADRP X21, 0xF18000
	0x031E0748 LDRB W8, [X20 + 0xF7]
	0x031E074C LDR X21, [X21 + 0x748]
	0x031E0750 MOV X19, X0
	0x031E0754 TBNZ X8, 0x0, 0x31E076C
	0x031E0758 ADRP X0, 0xF18000
	0x031E075C LDR X0, [X0 + 0x748]
	0x031E0760 BL 0x1C16CF4
	0x031E0764 MOVZ W8, 0x1
	0x031E0768 STRB W8, [X20 + 0xF7]
	0x031E076C LDR X0, [X21]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FD000
	009 Move X22, 0xF41000
	010 Move W8, [X20+230]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF41000
	018 Move X0, [X0+1424]
	019 Call 0x1C17CF4
	020 Move X0, 0xF41000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move X0, 0xF41000
	024 Move X0, [X0+1440]
	025 Call 0x1C17CF4
	026 Move X0, 0xF41000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF19000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+230], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF41000
	042 Move X23, 0xF19000
	043 Move X20, [X8+184]
	044 Move X24, [X24+1424]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF41000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1432]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF41000
	060 Move X8, [X8+1440]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<SByte, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+184], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.SByte> value)

Disassembly:
	0x031E0770 BL 0x1C16F10
	0x031E0774 MOV X1, X19
	0x031E0778 MOV X20, X0
	0x031E077C BL 0x31DCC74
	0x031E0780 MOV X0, X20
	0x031E0784 LDP X20, X19, [X31 + 0x10]
	0x031E0788 LDP X30, X21, [X31], #0x20
	0x031E078C RET
	0x031E0790 STR X30, [X31 - 0x40]!
	0x031E0794 STP X24, X23, [X31 + 0x10]
	0x031E0798 STP X22, X21, [X31 + 0x20]
	0x031E079C STP X20, X19, [X31 + 0x30]
	0x031E07A0 ADRP X20, 0x11FC000
	0x031E07A4 ADRP X22, 0xF40000
	0x031E07A8 LDRB W8, [X20 + 0xF8]
	0x031E07AC LDR X22, [X22 + 0x260]
	0x031E07B0 MOV X19, X0
	0x031E07B4 TBNZ X8, 0x0, 0x31E07FC
	0x031E07B8 ADRP X0, 0xF40000
	0x031E07BC LDR X0, [X0 + 0x680]
	0x031E07C0 BL 0x1C16CF4
	0x031E07C4 ADRP X0, 0xF40000
	0x031E07C8 LDR X0, [X0 + 0x688]
	0x031E07CC BL 0x1C16CF4
	0x031E07D0 ADRP X0, 0xF40000
	0x031E07D4 LDR X0, [X0 + 0x690]
	0x031E07D8 BL 0x1C16CF4
	0x031E07DC ADRP X0, 0xF40000
	0x031E07E0 LDR X0, [X0 + 0x260]
	0x031E07E4 BL 0x1C16CF4
	0x031E07E8 ADRP X0, 0xF18000
	0x031E07EC LDR X0, [X0 + 0x748]
	0x031E07F0 BL 0x1C16CF4
	0x031E07F4 MOVZ W8, 0x1
	0x031E07F8 STRB W8, [X20 + 0xF8]
	0x031E07FC LDR X0, [X22]
	0x031E0800 LDR W8, [X0 + 0xE0]
	0x031E0804 CBNZ W8, 0x31E0810
	0x031E0808 BL 0x1C16DFC
	0x031E080C LDR X0, [X22]
	0x031E0810 LDR X8, [X0 + 0xB8]
	0x031E0814 ADRP X24, 0xF40000
	0x031E0818 ADRP X23, 0xF18000
	0x031E081C LDR X20, [X8 + 0x118]
	0x031E0820 LDR X24, [X24 + 0x680]
	0x031E0824 LDR X23, [X23 + 0x748]
	0x031E0828 CBNZ X20, 0x31E087C
	0x031E082C LDR W8, [X0 + 0xE0]
	0x031E0830 CBNZ W8, 0x31E083C
	0x031E0834 BL 0x1C16DFC
	0x031E0838 LDR X0, [X22]
	0x031E083C ADRP X9, 0xF40000
	0x031E0840 LDR X8, [X0 + 0xB8]
	0x031E0844 LDR X9, [X9 + 0x688]
	0x031E0848 LDR X21, [X8]
	0x031E084C LDR X0, [X9]
	0x031E0850 BL 0x1C16F10
	0x031E0854 ADRP X8, 0xF40000
	0x031E0858 LDR X8, [X8 + 0x690]
	0x031E085C MOV X1, X21
	0x031E0860 MOV X3, X31
	0x031E0864 MOV X20, X0
	0x031E0868 LDR X2, [X8]
	0x031E086C BL 0x29A9C44
	0x031E0870 LDR X8, [X22]
	0x031E0874 LDR X8, [X8 + 0xB8]
	0x031E0878 STR X20, [X8 + 0x118]
	0x031E087C LDR X2, [X24]
	0x031E0880 MOV X0, X19
	0x031E0884 MOV X1, X20
	0x031E0888 BL 0x22E44F8
	0x031E088C LDR X8, [X23]
	0x031E0890 MOV X19, X0
	0x031E0894 MOV X0, X8
	0x031E0898 BL 0x1C16F10
	0x031E089C MOV X1, X19
	0x031E08A0 MOV X20, X0
	0x031E08A4 BL 0x31DD564
	0x031E08A8 MOV X0, X20
	0x031E08AC LDP X20, X19, [X31 + 0x30]
	0x031E08B0 LDP X22, X21, [X31 + 0x20]
	0x031E08B4 LDP X24, X23, [X31 + 0x10]
	0x031E08B8 LDR X30, [X31], #0x40
	0x031E08BC RET
	0x031E08C0 STR X30, [X31 - 0x40]!
	0x031E08C4 STP X24, X23, [X31 + 0x10]
	0x031E08C8 STP X22, X21, [X31 + 0x20]
	0x031E08CC STP X20, X19, [X31 + 0x30]
	0x031E08D0 ADRP X20, 0x11FC000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FD000
	009 Move W8, [X20+231]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF41000
	016 Move X0, [X0+1424]
	017 Call 0x1C17CF4
	018 Move X0, 0xF41000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move X0, 0xF41000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move X0, 0xF41000
	025 Move X0, [X0+1456]
	026 Call 0x1C17CF4
	027 Move X0, 0xF41000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF19000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+231], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF41000
	038 Move X8, [X8+1448]
	039 Move X22, 0xF41000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<SByte>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF41000
	054 Move X23, 0xF19000
	055 Move X20, [X9+192]
	056 Move X24, [X24+1424]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF41000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1432]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF41000
	073 Move X8, [X8+1456]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<SByte, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+192], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(System.Byte value)

Disassembly:
	0x031DC734 BL 0x1C16CF4
	0x031DC738 MOVZ W8, 0x1
	0x031DC73C STRB W8, [X25 + 0xB0]
	0x031DC740 MOVZ W8, 0x6
	0x031DC744 STR W8, [X19 + 0x10]
	0x031DC748 LDR X0, [X24]
	0x031DC74C BL 0x1C16F10
	0x031DC750 LDR X2, [X21]
	0x031DC754 MOVZ W1, 0x32
	0x031DC758 MOV X21, X0
	0x031DC75C BL 0x301B830
	0x031DC760 STR X21, [X19 + 0x30]
	0x031DC764 LDR X0, [X23]
	0x031DC768 BL 0x1C16F10
	0x031DC76C LDR X2, [X22]
	0x031DC770 MOVZ W1, 0x5
	0x031DC774 MOV X21, X0
	0x031DC778 BL 0x2AA481C
	0x031DC77C MOV X0, X19
	0x031DC780 MOV X1, X31
	0x031DC784 STR X21, [X19 + 0x40]
	0x031DC788 BL 0x33BDD8C
	0x031DC78C ADRP X8, 0xFFFFFFFFFD911000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1201000
	006 Move X21, 0xF1D000
	007 Move W8, [X20+232]
	008 Move X21, [X21+1864]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF1D000
	015 Move X0, [X0+1864]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+232], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 And W8, W19, 255
	022 NotImplemented "Instruction UCVTF not yet implemented."
	023 Move X20, X0
	024 Call Value..ctor, X0, V0
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: mixpanel.Value op_Implicit(System.Byte[] value)

Disassembly:
	0x031E08D4 LDRB W8, [X20 + 0xF9]
	0x031E08D8 MOV X19, X0
	0x031E08DC TBNZ X8, 0x0, 0x31E0930
	0x031E08E0 ADRP X0, 0xF40000
	0x031E08E4 LDR X0, [X0 + 0x680]
	0x031E08E8 BL 0x1C16CF4
	0x031E08EC ADRP X0, 0xF40000
	0x031E08F0 LDR X0, [X0 + 0x688]
	0x031E08F4 BL 0x1C16CF4
	0x031E08F8 ADRP X0, 0xF40000
	0x031E08FC LDR X0, [X0 + 0x698]
	0x031E0900 BL 0x1C16CF4
	0x031E0904 ADRP X0, 0xF40000
	0x031E0908 LDR X0, [X0 + 0x6A0]
	0x031E090C BL 0x1C16CF4
	0x031E0910 ADRP X0, 0xF40000
	0x031E0914 LDR X0, [X0 + 0x260]
	0x031E0918 BL 0x1C16CF4
	0x031E091C ADRP X0, 0xF18000
	0x031E0920 LDR X0, [X0 + 0x748]
	0x031E0924 BL 0x1C16CF4
	0x031E0928 MOVZ W8, 0x1
	0x031E092C STRB W8, [X20 + 0xF9]
	0x031E0930 CBZ X19, 0x31E0A20
	0x031E0934 ADRP X8, 0xF40000
	0x031E0938 LDR X8, [X8 + 0x698]
	0x031E093C ADRP X22, 0xF40000
	0x031E0940 MOV X0, X19
	0x031E0944 LDR X1, [X8]
	0x031E0948 LDR X22, [X22 + 0x260]
	0x031E094C BL 0x3083E94
	0x031E0950 LDR X8, [X22]
	0x031E0954 MOV X19, X0
	0x031E0958 LDR W9, [X8 + 0xE0]
	0x031E095C CBNZ W9, 0x31E096C
	0x031E0960 MOV X0, X8
	0x031E0964 BL 0x1C16DFC
	0x031E0968 LDR X8, [X22]
	0x031E096C LDR X9, [X8 + 0xB8]
	0x031E0970 ADRP X24, 0xF40000
	0x031E0974 ADRP X23, 0xF18000
	0x031E0978 LDR X20, [X9 + 0x120]
	0x031E097C LDR X24, [X24 + 0x680]
	0x031E0980 LDR X23, [X23 + 0x748]
	0x031E0984 CBNZ X20, 0x31E09DC
	0x031E0988 LDR W9, [X8 + 0xE0]
	0x031E098C CBNZ W9, 0x31E099C
	0x031E0990 MOV X0, X8
	0x031E0994 BL 0x1C16DFC
	0x031E0998 LDR X8, [X22]
	0x031E099C ADRP X9, 0xF40000
	0x031E09A0 LDR X8, [X8 + 0xB8]
	0x031E09A4 LDR X9, [X9 + 0x688]
	0x031E09A8 LDR X21, [X8]
	0x031E09AC LDR X0, [X9]
	0x031E09B0 BL 0x1C16F10
	0x031E09B4 ADRP X8, 0xF40000
	0x031E09B8 LDR X8, [X8 + 0x6A0]
	0x031E09BC MOV X1, X21
	0x031E09C0 MOV X3, X31
	0x031E09C4 MOV X20, X0
	0x031E09C8 LDR X2, [X8]
	0x031E09CC BL 0x29A9C44
	0x031E09D0 LDR X8, [X22]
	0x031E09D4 LDR X8, [X8 + 0xB8]
	0x031E09D8 STR X20, [X8 + 0x120]
	0x031E09DC LDR X2, [X24]
	0x031E09E0 MOV X0, X19
	0x031E09E4 MOV X1, X20
	0x031E09E8 BL 0x22E44F8
	0x031E09EC LDR X8, [X23]
	0x031E09F0 MOV X19, X0
	0x031E09F4 MOV X0, X8
	0x031E09F8 BL 0x1C16F10
	0x031E09FC MOV X1, X19
	0x031E0A00 MOV X20, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FD000
	009 Move X22, 0xF41000
	010 Move W8, [X20+233]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF41000
	018 Move X0, [X0+1464]
	019 Call 0x1C17CF4
	020 Move X0, 0xF41000
	021 Move X0, [X0+1472]
	022 Call 0x1C17CF4
	023 Move X0, 0xF41000
	024 Move X0, [X0+1480]
	025 Call 0x1C17CF4
	026 Move X0, 0xF41000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF19000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+233], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF41000
	042 Move X23, 0xF19000
	043 Move X20, [X8+200]
	044 Move X24, [X24+1464]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF41000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1472]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF41000
	060 Move X8, [X8+1480]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Byte, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+200], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.Byte> value)

Disassembly:
	0x031E0A04 BL 0x31DD564
	0x031E0A08 MOV X0, X20
	0x031E0A0C LDP X20, X19, [X31 + 0x30]
	0x031E0A10 LDP X22, X21, [X31 + 0x20]
	0x031E0A14 LDP X24, X23, [X31 + 0x10]
	0x031E0A18 LDR X30, [X31], #0x40
	0x031E0A1C RET
	0x031E0A20 BL 0x1C16F20
	0x031E0A24 STP D11, D10, [X31 - 0x40]!
	0x031E0A28 STP D9, D8, [X31 + 0x10]
	0x031E0A2C STR X30, [X31 + 0x20]
	0x031E0A30 STP X20, X19, [X31 + 0x30]
	0x031E0A34 ADRP X19, 0x11FC000
	0x031E0A38 ADRP X20, 0xF18000
	0x031E0A3C LDRB W8, [X19 + 0xFA]
	0x031E0A40 LDR X20, [X20 + 0x748]
	0x031E0A44 MOV V8.16B, V3.16B
	0x031E0A48 MOV V9.16B, V2.16B
	0x031E0A4C MOV V10.16B, V1.16B
	0x031E0A50 MOV V11.16B, V0.16B
	0x031E0A54 TBNZ X8, 0x0, 0x31E0A6C
	0x031E0A58 ADRP X0, 0xF18000
	0x031E0A5C LDR X0, [X0 + 0x748]
	0x031E0A60 BL 0x1C16CF4
	0x031E0A64 MOVZ W8, 0x1
	0x031E0A68 STRB W8, [X19 + 0xFA]
	0x031E0A6C LDR X0, [X20]
	0x031E0A70 BL 0x1C16F10
	0x031E0A74 MOV V0.16B, V11.16B
	0x031E0A78 MOV V1.16B, V10.16B
	0x031E0A7C MOV V2.16B, V9.16B
	0x031E0A80 MOV V3.16B, V8.16B
	0x031E0A84 MOV X19, X0
	0x031E0A88 BL 0x31DCD58
	0x031E0A8C MOV X0, X19
	0x031E0A90 LDP X20, X19, [X31 + 0x30]
	0x031E0A94 LDR X30, [X31 + 0x20]
	0x031E0A98 LDP D9, D8, [X31 + 0x10]
	0x031E0A9C LDP D11, D10, [X31], #0x40
	0x031E0AA0 RET
	0x031E0AA4 STR X30, [X31 - 0x40]!
	0x031E0AA8 STP X24, X23, [X31 + 0x10]
	0x031E0AAC STP X22, X21, [X31 + 0x20]
	0x031E0AB0 STP X20, X19, [X31 + 0x30]
	0x031E0AB4 ADRP X20, 0x11FC000
	0x031E0AB8 ADRP X22, 0xF40000
	0x031E0ABC LDRB W8, [X20 + 0xFB]
	0x031E0AC0 LDR X22, [X22 + 0x260]
	0x031E0AC4 MOV X19, X0
	0x031E0AC8 TBNZ X8, 0x0, 0x31E0B10
	0x031E0ACC ADRP X0, 0xF40000
	0x031E0AD0 LDR X0, [X0 + 0x6A8]
	0x031E0AD4 BL 0x1C16CF4
	0x031E0AD8 ADRP X0, 0xF40000
	0x031E0ADC LDR X0, [X0 + 0x6B0]
	0x031E0AE0 BL 0x1C16CF4
	0x031E0AE4 ADRP X0, 0xF40000
	0x031E0AE8 LDR X0, [X0 + 0x6B8]
	0x031E0AEC BL 0x1C16CF4
	0x031E0AF0 ADRP X0, 0xF40000
	0x031E0AF4 LDR X0, [X0 + 0x260]
	0x031E0AF8 BL 0x1C16CF4
	0x031E0AFC ADRP X0, 0xF18000
	0x031E0B00 LDR X0, [X0 + 0x748]
	0x031E0B04 BL 0x1C16CF4
	0x031E0B08 MOVZ W8, 0x1
	0x031E0B0C STRB W8, [X20 + 0xFB]
	0x031E0B10 LDR X0, [X22]
	0x031E0B14 LDR W8, [X0 + 0xE0]
	0x031E0B18 CBNZ W8, 0x31E0B24
	0x031E0B1C BL 0x1C16DFC
	0x031E0B20 LDR X0, [X22]
	0x031E0B24 LDR X8, [X0 + 0xB8]
	0x031E0B28 ADRP X24, 0xF40000
	0x031E0B2C ADRP X23, 0xF18000
	0x031E0B30 LDR X20, [X8 + 0x128]
	0x031E0B34 LDR X24, [X24 + 0x6A8]
	0x031E0B38 LDR X23, [X23 + 0x748]
	0x031E0B3C CBNZ X20, 0x31E0B90
	0x031E0B40 LDR W8, [X0 + 0xE0]
	0x031E0B44 CBNZ W8, 0x31E0B50
	0x031E0B48 BL 0x1C16DFC
	0x031E0B4C LDR X0, [X22]
	0x031E0B50 ADRP X9, 0xF40000
	0x031E0B54 LDR X8, [X0 + 0xB8]
	0x031E0B58 LDR X9, [X9 + 0x6B0]
	0x031E0B5C LDR X21, [X8]
	0x031E0B60 LDR X0, [X9]
	0x031E0B64 BL 0x1C16F10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FD000
	009 Move W8, [X20+234]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF41000
	016 Move X0, [X0+1464]
	017 Call 0x1C17CF4
	018 Move X0, 0xF41000
	019 Move X0, [X0+1472]
	020 Call 0x1C17CF4
	021 Move X0, 0xF41000
	022 Move X0, [X0+1488]
	023 Call 0x1C17CF4
	024 Move X0, 0xF41000
	025 Move X0, [X0+1496]
	026 Call 0x1C17CF4
	027 Move X0, 0xF41000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF19000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+234], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF41000
	038 Move X8, [X8+1488]
	039 Move X22, 0xF41000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Byte>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF41000
	054 Move X23, 0xF19000
	055 Move X20, [X9+208]
	056 Move X24, [X24+1464]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF41000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1472]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF41000
	073 Move X8, [X8+1496]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Byte, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+208], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(System.Uri value)

Disassembly:
	0x031E0B68 ADRP X8, 0xF40000
	0x031E0B6C LDR X8, [X8 + 0x6B8]
	0x031E0B70 MOV X1, X21
	0x031E0B74 MOV X3, X31
	0x031E0B78 MOV X20, X0
	0x031E0B7C LDR X2, [X8]
	0x031E0B80 BL 0x29A77DC
	0x031E0B84 LDR X8, [X22]
	0x031E0B88 LDR X8, [X8 + 0xB8]
	0x031E0B8C STR X20, [X8 + 0x128]
	0x031E0B90 LDR X2, [X24]
	0x031E0B94 MOV X0, X19
	0x031E0B98 MOV X1, X20
	0x031E0B9C BL 0x22E3340
	0x031E0BA0 LDR X8, [X23]
	0x031E0BA4 MOV X19, X0
	0x031E0BA8 MOV X0, X8
	0x031E0BAC BL 0x1C16F10
	0x031E0BB0 MOV X1, X19
	0x031E0BB4 MOV X20, X0
	0x031E0BB8 BL 0x31DD564
	0x031E0BBC MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11FD000
	006 Move X21, 0xF19000
	007 Move W8, [X20+235]
	008 Move X21, [X21+1864]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF19000
	015 Move X0, [X0+1864]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+235], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X20, X0
	023 Call Value..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: mixpanel.Value op_Implicit(System.Uri[] value)

Disassembly:
	0x031E0BC0 LDP X20, X19, [X31 + 0x30]
	0x031E0BC4 LDP X22, X21, [X31 + 0x20]
	0x031E0BC8 LDP X24, X23, [X31 + 0x10]
	0x031E0BCC LDR X30, [X31], #0x40
	0x031E0BD0 RET
	0x031E0BD4 STR X30, [X31 - 0x40]!
	0x031E0BD8 STP X24, X23, [X31 + 0x10]
	0x031E0BDC STP X22, X21, [X31 + 0x20]
	0x031E0BE0 STP X20, X19, [X31 + 0x30]
	0x031E0BE4 ADRP X20, 0x11FC000
	0x031E0BE8 LDRB W8, [X20 + 0xFC]
	0x031E0BEC MOV X19, X0
	0x031E0BF0 TBNZ X8, 0x0, 0x31E0C44
	0x031E0BF4 ADRP X0, 0xF40000
	0x031E0BF8 LDR X0, [X0 + 0x6A8]
	0x031E0BFC BL 0x1C16CF4
	0x031E0C00 ADRP X0, 0xF40000
	0x031E0C04 LDR X0, [X0 + 0x6B0]
	0x031E0C08 BL 0x1C16CF4
	0x031E0C0C ADRP X0, 0xF40000
	0x031E0C10 LDR X0, [X0 + 0x6C0]
	0x031E0C14 BL 0x1C16CF4
	0x031E0C18 ADRP X0, 0xF40000
	0x031E0C1C LDR X0, [X0 + 0x6C8]
	0x031E0C20 BL 0x1C16CF4
	0x031E0C24 ADRP X0, 0xF40000
	0x031E0C28 LDR X0, [X0 + 0x260]
	0x031E0C2C BL 0x1C16CF4
	0x031E0C30 ADRP X0, 0xF18000
	0x031E0C34 LDR X0, [X0 + 0x748]
	0x031E0C38 BL 0x1C16CF4
	0x031E0C3C MOVZ W8, 0x1
	0x031E0C40 STRB W8, [X20 + 0xFC]
	0x031E0C44 CBZ X19, 0x31E0D34
	0x031E0C48 ADRP X8, 0xF40000
	0x031E0C4C LDR X8, [X8 + 0x6C0]
	0x031E0C50 ADRP X22, 0xF40000
	0x031E0C54 MOV X0, X19
	0x031E0C58 LDR X1, [X8]
	0x031E0C5C LDR X22, [X22 + 0x260]
	0x031E0C60 BL 0x2F6F36C
	0x031E0C64 LDR X8, [X22]
	0x031E0C68 MOV X19, X0
	0x031E0C6C LDR W9, [X8 + 0xE0]
	0x031E0C70 CBNZ W9, 0x31E0C80
	0x031E0C74 MOV X0, X8
	0x031E0C78 BL 0x1C16DFC
	0x031E0C7C LDR X8, [X22]
	0x031E0C80 LDR X9, [X8 + 0xB8]
	0x031E0C84 ADRP X24, 0xF40000
	0x031E0C88 ADRP X23, 0xF18000
	0x031E0C8C LDR X20, [X9 + 0x130]
	0x031E0C90 LDR X24, [X24 + 0x6A8]
	0x031E0C94 LDR X23, [X23 + 0x748]
	0x031E0C98 CBNZ X20, 0x31E0CF0
	0x031E0C9C LDR W9, [X8 + 0xE0]
	0x031E0CA0 CBNZ W9, 0x31E0CB0
	0x031E0CA4 MOV X0, X8
	0x031E0CA8 BL 0x1C16DFC
	0x031E0CAC LDR X8, [X22]
	0x031E0CB0 ADRP X9, 0xF40000
	0x031E0CB4 LDR X8, [X8 + 0xB8]
	0x031E0CB8 LDR X9, [X9 + 0x6B0]
	0x031E0CBC LDR X21, [X8]
	0x031E0CC0 LDR X0, [X9]
	0x031E0CC4 BL 0x1C16F10
	0x031E0CC8 ADRP X8, 0xF40000
	0x031E0CCC LDR X8, [X8 + 0x6C8]
	0x031E0CD0 MOV X1, X21
	0x031E0CD4 MOV X3, X31
	0x031E0CD8 MOV X20, X0
	0x031E0CDC LDR X2, [X8]
	0x031E0CE0 BL 0x29A77DC
	0x031E0CE4 LDR X8, [X22]
	0x031E0CE8 LDR X8, [X8 + 0xB8]
	0x031E0CEC STR X20, [X8 + 0x130]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FD000
	009 Move X22, 0xF41000
	010 Move W8, [X20+236]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF41000
	018 Move X0, [X0+1504]
	019 Call 0x1C17CF4
	020 Move X0, 0xF41000
	021 Move X0, [X0+1512]
	022 Call 0x1C17CF4
	023 Move X0, 0xF41000
	024 Move X0, [X0+1520]
	025 Call 0x1C17CF4
	026 Move X0, 0xF41000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF19000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+236], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF41000
	042 Move X23, 0xF19000
	043 Move X20, [X8+216]
	044 Move X24, [X24+1504]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF41000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1512]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF41000
	060 Move X8, [X8+1520]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Object, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+216], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.Uri> value)

Disassembly:
	0x031E0CF0 LDR X2, [X24]
	0x031E0CF4 MOV X0, X19
	0x031E0CF8 MOV X1, X20
	0x031E0CFC BL 0x22E3340
	0x031E0D00 LDR X8, [X23]
	0x031E0D04 MOV X19, X0
	0x031E0D08 MOV X0, X8
	0x031E0D0C BL 0x1C16F10
	0x031E0D10 MOV X1, X19
	0x031E0D14 MOV X20, X0
	0x031E0D18 BL 0x31DD564
	0x031E0D1C MOV X0, X20
	0x031E0D20 LDP X20, X19, [X31 + 0x30]
	0x031E0D24 LDP X22, X21, [X31 + 0x20]
	0x031E0D28 LDP X24, X23, [X31 + 0x10]
	0x031E0D2C LDR X30, [X31], #0x40
	0x031E0D30 RET
	0x031E0D34 BL 0x1C16F20
	0x031E0D38 STP X30, X21, [X31 - 0x20]!
	0x031E0D3C STP X20, X19, [X31 + 0x10]
	0x031E0D40 ADRP X20, 0x11FC000
	0x031E0D44 ADRP X21, 0xF18000
	0x031E0D48 LDRB W8, [X20 + 0xFD]
	0x031E0D4C LDR X21, [X21 + 0x748]
	0x031E0D50 MOV X19, X0
	0x031E0D54 TBNZ X8, 0x0, 0x31E0D6C
	0x031E0D58 ADRP X0, 0xF18000
	0x031E0D5C LDR X0, [X0 + 0x748]
	0x031E0D60 BL 0x1C16CF4
	0x031E0D64 MOVZ W8, 0x1
	0x031E0D68 STRB W8, [X20 + 0xFD]
	0x031E0D6C LDR X0, [X21]
	0x031E0D70 BL 0x1C16F10
	0x031E0D74 AND X1, X19, 0x0
	0x031E0D78 MOV X20, X0
	0x031E0D7C BL 0x31DCE64
	0x031E0D80 MOV X0, X20
	0x031E0D84 LDP X20, X19, [X31 + 0x10]
	0x031E0D88 LDP X30, X21, [X31], #0x20
	0x031E0D8C RET
	0x031E0D90 STR X30, [X31 - 0x40]!
	0x031E0D94 STP X24, X23, [X31 + 0x10]
	0x031E0D98 STP X22, X21, [X31 + 0x20]
	0x031E0D9C STP X20, X19, [X31 + 0x30]
	0x031E0DA0 ADRP X20, 0x11FC000
	0x031E0DA4 ADRP X22, 0xF40000
	0x031E0DA8 LDRB W8, [X20 + 0xFE]
	0x031E0DAC LDR X22, [X22 + 0x260]
	0x031E0DB0 MOV X19, X0
	0x031E0DB4 TBNZ X8, 0x0, 0x31E0DFC
	0x031E0DB8 ADRP X0, 0xF40000
	0x031E0DBC LDR X0, [X0 + 0x6D0]
	0x031E0DC0 BL 0x1C16CF4
	0x031E0DC4 ADRP X0, 0xF40000
	0x031E0DC8 LDR X0, [X0 + 0x6D8]
	0x031E0DCC BL 0x1C16CF4
	0x031E0DD0 ADRP X0, 0xF40000
	0x031E0DD4 LDR X0, [X0 + 0x6E0]
	0x031E0DD8 BL 0x1C16CF4
	0x031E0DDC ADRP X0, 0xF40000
	0x031E0DE0 LDR X0, [X0 + 0x260]
	0x031E0DE4 BL 0x1C16CF4
	0x031E0DE8 ADRP X0, 0xF18000
	0x031E0DEC LDR X0, [X0 + 0x748]
	0x031E0DF0 BL 0x1C16CF4
	0x031E0DF4 MOVZ W8, 0x1
	0x031E0DF8 STRB W8, [X20 + 0xFE]
	0x031E0DFC LDR X0, [X22]
	0x031E0E00 LDR W8, [X0 + 0xE0]
	0x031E0E04 CBNZ W8, 0x31E0E10
	0x031E0E08 BL 0x1C16DFC
	0x031E0E0C LDR X0, [X22]
	0x031E0E10 LDR X8, [X0 + 0xB8]
	0x031E0E14 ADRP X24, 0xF40000
	0x031E0E18 ADRP X23, 0xF18000
	0x031E0E1C LDR X20, [X8 + 0x138]
	0x031E0E20 LDR X24, [X24 + 0x6D0]
	0x031E0E24 LDR X23, [X23 + 0x748]
	0x031E0E28 CBNZ X20, 0x31E0E7C
	0x031E0E2C LDR W8, [X0 + 0xE0]
	0x031E0E30 CBNZ W8, 0x31E0E3C
	0x031E0E34 BL 0x1C16DFC
	0x031E0E38 LDR X0, [X22]
	0x031E0E3C ADRP X9, 0xF40000
	0x031E0E40 LDR X8, [X0 + 0xB8]
	0x031E0E44 LDR X9, [X9 + 0x6D8]
	0x031E0E48 LDR X21, [X8]
	0x031E0E4C LDR X0, [X9]
	0x031E0E50 BL 0x1C16F10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FD000
	009 Move W8, [X20+237]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF41000
	016 Move X0, [X0+1504]
	017 Call 0x1C17CF4
	018 Move X0, 0xF41000
	019 Move X0, [X0+1512]
	020 Call 0x1C17CF4
	021 Move X0, 0xF41000
	022 Move X0, [X0+1528]
	023 Call 0x1C17CF4
	024 Move X0, 0xF41000
	025 Move X0, [X0+1536]
	026 Call 0x1C17CF4
	027 Move X0, 0xF41000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF19000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+237], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF41000
	038 Move X8, [X8+1528]
	039 Move X22, 0xF41000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Object>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF41000
	054 Move X23, 0xF19000
	055 Move X20, [X9+224]
	056 Move X24, [X24+1504]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF41000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1512]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF41000
	073 Move X8, [X8+1536]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Object, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+224], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(System.Guid value)

Disassembly:
	0x031E0E54 ADRP X8, 0xF40000
	0x031E0E58 LDR X8, [X8 + 0x6E0]
	0x031E0E5C MOV X1, X21
	0x031E0E60 MOV X3, X31
	0x031E0E64 MOV X20, X0
	0x031E0E68 LDR X2, [X8]
	0x031E0E6C BL 0x29A787C
	0x031E0E70 LDR X8, [X22]
	0x031E0E74 LDR X8, [X8 + 0xB8]
	0x031E0E78 STR X20, [X8 + 0x138]
	0x031E0E7C LDR X2, [X24]
	0x031E0E80 MOV X0, X19
	0x031E0E84 MOV X1, X20
	0x031E0E88 BL 0x22E3474
	0x031E0E8C LDR X8, [X23]
	0x031E0E90 MOV X19, X0
	0x031E0E94 MOV X0, X8
	0x031E0E98 BL 0x1C16F10
	0x031E0E9C MOV X1, X19
	0x031E0EA0 MOV X20, X0
	0x031E0EA4 BL 0x31DD564
	0x031E0EA8 MOV X0, X20
	0x031E0EAC LDP X20, X19, [X31 + 0x30]
	0x031E0EB0 LDP X22, X21, [X31 + 0x20]
	0x031E0EB4 LDP X24, X23, [X31 + 0x10]
	0x031E0EB8 LDR X30, [X31], #0x40

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11FD000
	007 Move X22, 0xF19000
	008 Move W8, [X21+238]
	009 Move X22, [X22+1864]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF19000
	017 Move X0, [X0+1864]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+238], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X1, X20
	024 Move X2, X19
	025 Move X21, X0
	026 Call Value..ctor, X0, X1
	027 Move X0, X21
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]
	033 Return X0

Method: mixpanel.Value op_Implicit(System.Guid[] value)

Disassembly:
	0x031E0EBC RET
	0x031E0EC0 STR X30, [X31 - 0x40]!
	0x031E0EC4 STP X24, X23, [X31 + 0x10]
	0x031E0EC8 STP X22, X21, [X31 + 0x20]
	0x031E0ECC STP X20, X19, [X31 + 0x30]
	0x031E0ED0 ADRP X20, 0x11FC000
	0x031E0ED4 LDRB W8, [X20 + 0xFF]
	0x031E0ED8 MOV X19, X0
	0x031E0EDC TBNZ X8, 0x0, 0x31E0F30
	0x031E0EE0 ADRP X0, 0xF40000
	0x031E0EE4 LDR X0, [X0 + 0x6D0]
	0x031E0EE8 BL 0x1C16CF4
	0x031E0EEC ADRP X0, 0xF40000
	0x031E0EF0 LDR X0, [X0 + 0x6D8]
	0x031E0EF4 BL 0x1C16CF4
	0x031E0EF8 ADRP X0, 0xF40000
	0x031E0EFC LDR X0, [X0 + 0x6E8]
	0x031E0F00 BL 0x1C16CF4
	0x031E0F04 ADRP X0, 0xF40000
	0x031E0F08 LDR X0, [X0 + 0x6F0]
	0x031E0F0C BL 0x1C16CF4
	0x031E0F10 ADRP X0, 0xF40000
	0x031E0F14 LDR X0, [X0 + 0x260]
	0x031E0F18 BL 0x1C16CF4
	0x031E0F1C ADRP X0, 0xF18000
	0x031E0F20 LDR X0, [X0 + 0x748]
	0x031E0F24 BL 0x1C16CF4
	0x031E0F28 MOVZ W8, 0x1
	0x031E0F2C STRB W8, [X20 + 0xFF]
	0x031E0F30 CBZ X19, 0x31E1020
	0x031E0F34 ADRP X8, 0xF40000
	0x031E0F38 LDR X8, [X8 + 0x6E8]
	0x031E0F3C ADRP X22, 0xF40000
	0x031E0F40 MOV X0, X19
	0x031E0F44 LDR X1, [X8]
	0x031E0F48 LDR X22, [X22 + 0x260]
	0x031E0F4C BL 0x2F71E10
	0x031E0F50 LDR X8, [X22]
	0x031E0F54 MOV X19, X0
	0x031E0F58 LDR W9, [X8 + 0xE0]
	0x031E0F5C CBNZ W9, 0x31E0F6C
	0x031E0F60 MOV X0, X8
	0x031E0F64 BL 0x1C16DFC
	0x031E0F68 LDR X8, [X22]
	0x031E0F6C LDR X9, [X8 + 0xB8]
	0x031E0F70 ADRP X24, 0xF40000
	0x031E0F74 ADRP X23, 0xF18000
	0x031E0F78 LDR X20, [X9 + 0x140]
	0x031E0F7C LDR X24, [X24 + 0x6D0]
	0x031E0F80 LDR X23, [X23 + 0x748]
	0x031E0F84 CBNZ X20, 0x31E0FDC
	0x031E0F88 LDR W9, [X8 + 0xE0]
	0x031E0F8C CBNZ W9, 0x31E0F9C
	0x031E0F90 MOV X0, X8
	0x031E0F94 BL 0x1C16DFC
	0x031E0F98 LDR X8, [X22]
	0x031E0F9C ADRP X9, 0xF40000
	0x031E0FA0 LDR X8, [X8 + 0xB8]
	0x031E0FA4 LDR X9, [X9 + 0x6D8]
	0x031E0FA8 LDR X21, [X8]
	0x031E0FAC LDR X0, [X9]
	0x031E0FB0 BL 0x1C16F10
	0x031E0FB4 ADRP X8, 0xF40000
	0x031E0FB8 LDR X8, [X8 + 0x6F0]
	0x031E0FBC MOV X1, X21
	0x031E0FC0 MOV X3, X31
	0x031E0FC4 MOV X20, X0
	0x031E0FC8 LDR X2, [X8]
	0x031E0FCC BL 0x29A787C
	0x031E0FD0 LDR X8, [X22]
	0x031E0FD4 LDR X8, [X8 + 0xB8]
	0x031E0FD8 STR X20, [X8 + 0x140]
	0x031E0FDC LDR X2, [X24]
	0x031E0FE0 MOV X0, X19
	0x031E0FE4 MOV X1, X20
	0x031E0FE8 BL 0x22E3474

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FD000
	009 Move X22, 0xF41000
	010 Move W8, [X20+239]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF41000
	018 Move X0, [X0+1544]
	019 Call 0x1C17CF4
	020 Move X0, 0xF41000
	021 Move X0, [X0+1552]
	022 Call 0x1C17CF4
	023 Move X0, 0xF41000
	024 Move X0, [X0+1560]
	025 Call 0x1C17CF4
	026 Move X0, 0xF41000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF19000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+239], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF41000
	042 Move X23, 0xF19000
	043 Move X20, [X8+232]
	044 Move X24, [X24+1544]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF41000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1552]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF41000
	060 Move X8, [X8+1560]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Guid, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+232], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.Guid> value)

Disassembly:
	0x031E0FEC LDR X8, [X23]
	0x031E0FF0 MOV X19, X0
	0x031E0FF4 MOV X0, X8
	0x031E0FF8 BL 0x1C16F10
	0x031E0FFC MOV X1, X19
	0x031E1000 MOV X20, X0
	0x031E1004 BL 0x31DD564
	0x031E1008 MOV X0, X20
	0x031E100C LDP X20, X19, [X31 + 0x30]
	0x031E1010 LDP X22, X21, [X31 + 0x20]
	0x031E1014 LDP X24, X23, [X31 + 0x10]
	0x031E1018 LDR X30, [X31], #0x40
	0x031E101C RET
	0x031E1020 BL 0x1C16F20
	0x031E1024 STP D9, D8, [X31 - 0x30]!
	0x031E1028 STR X30, [X31 + 0x10]
	0x031E102C STP X20, X19, [X31 + 0x20]
	0x031E1030 ADRP X19, 0x11FB000
	0x031E1034 ADRP X20, 0xF17000
	0x031E1038 LDRB W8, [X19 + 0x100]
	0x031E103C LDR X20, [X20 + 0x748]
	0x031E1040 MOV V8.16B, V1.16B
	0x031E1044 MOV V9.16B, V0.16B
	0x031E1048 TBNZ X8, 0x0, 0x31E1060
	0x031E104C ADRP X0, 0xF17000
	0x031E1050 LDR X0, [X0 + 0x748]
	0x031E1054 BL 0x1C16CF4
	0x031E1058 MOVZ W8, 0x1
	0x031E105C STRB W8, [X19 + 0x100]
	0x031E1060 LDR X0, [X20]
	0x031E1064 BL 0x1C16F10
	0x031E1068 MOV V0.16B, V9.16B
	0x031E106C MOV V1.16B, V8.16B
	0x031E1070 MOV X19, X0
	0x031E1074 BL 0x31DCF48
	0x031E1078 MOV X0, X19
	0x031E107C LDP X20, X19, [X31 + 0x20]
	0x031E1080 LDR X30, [X31 + 0x10]
	0x031E1084 LDP D9, D8, [X31], #0x30
	0x031E1088 RET
	0x031E108C STR X30, [X31 - 0x40]!
	0x031E1090 STP X24, X23, [X31 + 0x10]
	0x031E1094 STP X22, X21, [X31 + 0x20]
	0x031E1098 STP X20, X19, [X31 + 0x30]
	0x031E109C ADRP X20, 0x11FB000
	0x031E10A0 ADRP X22, 0xF3F000
	0x031E10A4 LDRB W8, [X20 + 0x101]
	0x031E10A8 LDR X22, [X22 + 0x260]
	0x031E10AC MOV X19, X0
	0x031E10B0 TBNZ X8, 0x0, 0x31E10F8
	0x031E10B4 ADRP X0, 0xF3F000
	0x031E10B8 LDR X0, [X0 + 0x6F8]
	0x031E10BC BL 0x1C16CF4
	0x031E10C0 ADRP X0, 0xF3F000
	0x031E10C4 LDR X0, [X0 + 0x700]
	0x031E10C8 BL 0x1C16CF4
	0x031E10CC ADRP X0, 0xF3F000
	0x031E10D0 LDR X0, [X0 + 0x708]
	0x031E10D4 BL 0x1C16CF4
	0x031E10D8 ADRP X0, 0xF3F000
	0x031E10DC LDR X0, [X0 + 0x260]
	0x031E10E0 BL 0x1C16CF4
	0x031E10E4 ADRP X0, 0xF17000
	0x031E10E8 LDR X0, [X0 + 0x748]
	0x031E10EC BL 0x1C16CF4
	0x031E10F0 MOVZ W8, 0x1
	0x031E10F4 STRB W8, [X20 + 0x101]
	0x031E10F8 LDR X0, [X22]
	0x031E10FC LDR W8, [X0 + 0xE0]
	0x031E1100 CBNZ W8, 0x31E110C
	0x031E1104 BL 0x1C16DFC
	0x031E1108 LDR X0, [X22]
	0x031E110C LDR X8, [X0 + 0xB8]
	0x031E1110 ADRP X24, 0xF3F000
	0x031E1114 ADRP X23, 0xF17000
	0x031E1118 LDR X20, [X8 + 0x148]
	0x031E111C LDR X24, [X24 + 0x6F8]
	0x031E1120 LDR X23, [X23 + 0x748]
	0x031E1124 CBNZ X20, 0x31E1178
	0x031E1128 LDR W8, [X0 + 0xE0]
	0x031E112C CBNZ W8, 0x31E1138
	0x031E1130 BL 0x1C16DFC
	0x031E1134 LDR X0, [X22]
	0x031E1138 ADRP X9, 0xF3F000
	0x031E113C LDR X8, [X0 + 0xB8]
	0x031E1140 LDR X9, [X9 + 0x700]
	0x031E1144 LDR X21, [X8]
	0x031E1148 LDR X0, [X9]
	0x031E114C BL 0x1C16F10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FD000
	009 Move W8, [X20+240]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF40000
	016 Move X0, [X0+1544]
	017 Call 0x1C17CF4
	018 Move X0, 0xF40000
	019 Move X0, [X0+1552]
	020 Call 0x1C17CF4
	021 Move X0, 0xF40000
	022 Move X0, [X0+1568]
	023 Call 0x1C17CF4
	024 Move X0, 0xF40000
	025 Move X0, [X0+1576]
	026 Call 0x1C17CF4
	027 Move X0, 0xF40000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF18000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+240], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF40000
	038 Move X8, [X8+1568]
	039 Move X22, 0xF40000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Guid>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF40000
	054 Move X23, 0xF18000
	055 Move X20, [X9+240]
	056 Move X24, [X24+1544]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF40000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1552]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF40000
	073 Move X8, [X8+1576]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Guid, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+240], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(System.DateTime value)

Disassembly:
	0x031E1150 ADRP X8, 0xF3F000
	0x031E1154 LDR X8, [X8 + 0x708]
	0x031E1158 MOV X1, X21
	0x031E115C MOV X3, X31
	0x031E1160 MOV X20, X0
	0x031E1164 LDR X2, [X8]
	0x031E1168 BL 0x29A9EC4
	0x031E116C LDR X8, [X22]
	0x031E1170 LDR X8, [X8 + 0xB8]
	0x031E1174 STR X20, [X8 + 0x148]
	0x031E1178 LDR X2, [X24]
	0x031E117C MOV X0, X19
	0x031E1180 MOV X1, X20
	0x031E1184 BL 0x22E49A8
	0x031E1188 LDR X8, [X23]
	0x031E118C MOV X19, X0
	0x031E1190 MOV X0, X8
	0x031E1194 BL 0x1C16F10
	0x031E1198 MOV X1, X19
	0x031E119C MOV X20, X0
	0x031E11A0 BL 0x31DD564
	0x031E11A4 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11FC000
	006 Move X21, 0xF18000
	007 Move W8, [X20+241]
	008 Move X21, [X21+1864]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF18000
	015 Move X0, [X0+1864]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+241], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X20, X0
	023 Call Value..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: mixpanel.Value op_Implicit(System.DateTime[] value)

Disassembly:
	0x031E11A8 LDP X20, X19, [X31 + 0x30]
	0x031E11AC LDP X22, X21, [X31 + 0x20]
	0x031E11B0 LDP X24, X23, [X31 + 0x10]
	0x031E11B4 LDR X30, [X31], #0x40
	0x031E11B8 RET
	0x031E11BC STR X30, [X31 - 0x40]!
	0x031E11C0 STP X24, X23, [X31 + 0x10]
	0x031E11C4 STP X22, X21, [X31 + 0x20]
	0x031E11C8 STP X20, X19, [X31 + 0x30]
	0x031E11CC ADRP X20, 0x11FB000
	0x031E11D0 LDRB W8, [X20 + 0x102]
	0x031E11D4 MOV X19, X0
	0x031E11D8 TBNZ X8, 0x0, 0x31E122C
	0x031E11DC ADRP X0, 0xF3F000
	0x031E11E0 LDR X0, [X0 + 0x6F8]
	0x031E11E4 BL 0x1C16CF4
	0x031E11E8 ADRP X0, 0xF3F000
	0x031E11EC LDR X0, [X0 + 0x700]
	0x031E11F0 BL 0x1C16CF4
	0x031E11F4 ADRP X0, 0xF3F000
	0x031E11F8 LDR X0, [X0 + 0x710]
	0x031E11FC BL 0x1C16CF4
	0x031E1200 ADRP X0, 0xF3F000
	0x031E1204 LDR X0, [X0 + 0x718]
	0x031E1208 BL 0x1C16CF4
	0x031E120C ADRP X0, 0xF3F000
	0x031E1210 LDR X0, [X0 + 0x260]
	0x031E1214 BL 0x1C16CF4
	0x031E1218 ADRP X0, 0xF17000
	0x031E121C LDR X0, [X0 + 0x748]
	0x031E1220 BL 0x1C16CF4
	0x031E1224 MOVZ W8, 0x1
	0x031E1228 STRB W8, [X20 + 0x102]
	0x031E122C CBZ X19, 0x31E131C
	0x031E1230 ADRP X8, 0xF3F000
	0x031E1234 LDR X8, [X8 + 0x710]
	0x031E1238 ADRP X22, 0xF3F000
	0x031E123C MOV X0, X19
	0x031E1240 LDR X1, [X8]
	0x031E1244 LDR X22, [X22 + 0x260]
	0x031E1248 BL 0x30CB4BC
	0x031E124C LDR X8, [X22]
	0x031E1250 MOV X19, X0
	0x031E1254 LDR W9, [X8 + 0xE0]
	0x031E1258 CBNZ W9, 0x31E1268
	0x031E125C MOV X0, X8
	0x031E1260 BL 0x1C16DFC
	0x031E1264 LDR X8, [X22]
	0x031E1268 LDR X9, [X8 + 0xB8]
	0x031E126C ADRP X24, 0xF3F000
	0x031E1270 ADRP X23, 0xF17000
	0x031E1274 LDR X20, [X9 + 0x150]
	0x031E1278 LDR X24, [X24 + 0x6F8]
	0x031E127C LDR X23, [X23 + 0x748]
	0x031E1280 CBNZ X20, 0x31E12D8
	0x031E1284 LDR W9, [X8 + 0xE0]
	0x031E1288 CBNZ W9, 0x31E1298
	0x031E128C MOV X0, X8
	0x031E1290 BL 0x1C16DFC
	0x031E1294 LDR X8, [X22]
	0x031E1298 ADRP X9, 0xF3F000
	0x031E129C LDR X8, [X8 + 0xB8]
	0x031E12A0 LDR X9, [X9 + 0x700]
	0x031E12A4 LDR X21, [X8]
	0x031E12A8 LDR X0, [X9]
	0x031E12AC BL 0x1C16F10
	0x031E12B0 ADRP X8, 0xF3F000
	0x031E12B4 LDR X8, [X8 + 0x718]
	0x031E12B8 MOV X1, X21
	0x031E12BC MOV X3, X31
	0x031E12C0 MOV X20, X0
	0x031E12C4 LDR X2, [X8]
	0x031E12C8 BL 0x29A9EC4
	0x031E12CC LDR X8, [X22]
	0x031E12D0 LDR X8, [X8 + 0xB8]
	0x031E12D4 STR X20, [X8 + 0x150]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FC000
	009 Move X22, 0xF40000
	010 Move W8, [X20+242]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF40000
	018 Move X0, [X0+1584]
	019 Call 0x1C17CF4
	020 Move X0, 0xF40000
	021 Move X0, [X0+1592]
	022 Call 0x1C17CF4
	023 Move X0, 0xF40000
	024 Move X0, [X0+1600]
	025 Call 0x1C17CF4
	026 Move X0, 0xF40000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF18000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+242], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF40000
	042 Move X23, 0xF18000
	043 Move X20, [X8+248]
	044 Move X24, [X24+1584]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF40000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1592]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF40000
	060 Move X8, [X8+1600]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<DateTime, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+248], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.DateTime> value)

Disassembly:
	0x031E12D8 LDR X2, [X24]
	0x031E12DC MOV X0, X19
	0x031E12E0 MOV X1, X20
	0x031E12E4 BL 0x22E49A8
	0x031E12E8 LDR X8, [X23]
	0x031E12EC MOV X19, X0
	0x031E12F0 MOV X0, X8
	0x031E12F4 BL 0x1C16F10
	0x031E12F8 MOV X1, X19
	0x031E12FC MOV X20, X0
	0x031E1300 BL 0x31DD564
	0x031E1304 MOV X0, X20
	0x031E1308 LDP X20, X19, [X31 + 0x30]
	0x031E130C LDP X22, X21, [X31 + 0x20]
	0x031E1310 LDP X24, X23, [X31 + 0x10]
	0x031E1314 LDR X30, [X31], #0x40
	0x031E1318 RET
	0x031E131C BL 0x1C16F20
	0x031E1320 STR X30, [X31 - 0x40]!
	0x031E1324 STP X24, X23, [X31 + 0x10]
	0x031E1328 STP X22, X21, [X31 + 0x20]
	0x031E132C STP X20, X19, [X31 + 0x30]
	0x031E1330 ADRP X20, 0x11FB000
	0x031E1334 ADRP X22, 0xF3F000
	0x031E1338 LDRB W8, [X20 + 0x104]
	0x031E133C LDR X22, [X22 + 0x260]
	0x031E1340 MOV X19, X0
	0x031E1344 TBNZ X8, 0x0, 0x31E138C
	0x031E1348 ADRP X0, 0xF3F000
	0x031E134C LDR X0, [X0 + 0x720]
	0x031E1350 BL 0x1C16CF4
	0x031E1354 ADRP X0, 0xF3F000
	0x031E1358 LDR X0, [X0 + 0x728]
	0x031E135C BL 0x1C16CF4
	0x031E1360 ADRP X0, 0xF3F000
	0x031E1364 LDR X0, [X0 + 0x730]
	0x031E1368 BL 0x1C16CF4
	0x031E136C ADRP X0, 0xF3F000
	0x031E1370 LDR X0, [X0 + 0x260]
	0x031E1374 BL 0x1C16CF4
	0x031E1378 ADRP X0, 0xF17000
	0x031E137C LDR X0, [X0 + 0x748]
	0x031E1380 BL 0x1C16CF4
	0x031E1384 MOVZ W8, 0x1
	0x031E1388 STRB W8, [X20 + 0x104]
	0x031E138C LDR X0, [X22]
	0x031E1390 LDR W8, [X0 + 0xE0]
	0x031E1394 CBNZ W8, 0x31E13A0
	0x031E1398 BL 0x1C16DFC
	0x031E139C LDR X0, [X22]
	0x031E13A0 LDR X8, [X0 + 0xB8]
	0x031E13A4 ADRP X24, 0xF3F000
	0x031E13A8 ADRP X23, 0xF17000
	0x031E13AC LDR X20, [X8 + 0x158]
	0x031E13B0 LDR X24, [X24 + 0x720]
	0x031E13B4 LDR X23, [X23 + 0x748]
	0x031E13B8 CBNZ X20, 0x31E140C
	0x031E13BC LDR W8, [X0 + 0xE0]
	0x031E13C0 CBNZ W8, 0x31E13CC
	0x031E13C4 BL 0x1C16DFC
	0x031E13C8 LDR X0, [X22]
	0x031E13CC ADRP X9, 0xF3F000
	0x031E13D0 LDR X8, [X0 + 0xB8]
	0x031E13D4 LDR X9, [X9 + 0x728]
	0x031E13D8 LDR X21, [X8]
	0x031E13DC LDR X0, [X9]
	0x031E13E0 BL 0x1C16F10
	0x031E13E4 ADRP X8, 0xF3F000
	0x031E13E8 LDR X8, [X8 + 0x730]
	0x031E13EC MOV X1, X21
	0x031E13F0 MOV X3, X31
	0x031E13F4 MOV X20, X0
	0x031E13F8 LDR X2, [X8]
	0x031E13FC BL 0x29A9F64
	0x031E1400 LDR X8, [X22]
	0x031E1404 LDR X8, [X8 + 0xB8]
	0x031E1408 STR X20, [X8 + 0x158]
	0x031E140C LDR X2, [X24]
	0x031E1410 MOV X0, X19
	0x031E1414 MOV X1, X20
	0x031E1418 BL 0x22E4AD8
	0x031E141C LDR X8, [X23]
	0x031E1420 MOV X19, X0
	0x031E1424 MOV X0, X8
	0x031E1428 BL 0x1C16F10
	0x031E142C MOV X1, X19
	0x031E1430 MOV X20, X0
	0x031E1434 BL 0x31DD564
	0x031E1438 MOV X0, X20

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FC000
	009 Move W8, [X20+243]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF40000
	016 Move X0, [X0+1584]
	017 Call 0x1C17CF4
	018 Move X0, 0xF40000
	019 Move X0, [X0+1592]
	020 Call 0x1C17CF4
	021 Move X0, 0xF40000
	022 Move X0, [X0+1608]
	023 Call 0x1C17CF4
	024 Move X0, 0xF40000
	025 Move X0, [X0+1616]
	026 Call 0x1C17CF4
	027 Move X0, 0xF40000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF18000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+243], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF40000
	038 Move X8, [X8+1608]
	039 Move X22, 0xF40000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<DateTime>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF40000
	054 Move X23, 0xF18000
	055 Move X20, [X9+256]
	056 Move X24, [X24+1584]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF40000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1592]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF40000
	073 Move X8, [X8+1616]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<DateTime, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+256], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(System.DateTimeOffset value)

Disassembly:
	0x031E143C LDP X20, X19, [X31 + 0x30]
	0x031E1440 LDP X22, X21, [X31 + 0x20]
	0x031E1444 LDP X24, X23, [X31 + 0x10]
	0x031E1448 LDR X30, [X31], #0x40
	0x031E144C RET
	0x031E1450 STR X30, [X31 - 0x40]!
	0x031E1454 STP X24, X23, [X31 + 0x10]
	0x031E1458 STP X22, X21, [X31 + 0x20]
	0x031E145C STP X20, X19, [X31 + 0x30]
	0x031E1460 ADRP X20, 0x11FB000
	0x031E1464 LDRB W8, [X20 + 0x105]
	0x031E1468 MOV X19, X0
	0x031E146C TBNZ X8, 0x0, 0x31E14C0
	0x031E1470 ADRP X0, 0xF3F000
	0x031E1474 LDR X0, [X0 + 0x720]
	0x031E1478 BL 0x1C16CF4
	0x031E147C ADRP X0, 0xF3F000
	0x031E1480 LDR X0, [X0 + 0x728]
	0x031E1484 BL 0x1C16CF4
	0x031E1488 ADRP X0, 0xF3E000
	0x031E148C LDR X0, [X0 + 0x5B0]
	0x031E1490 BL 0x1C16CF4
	0x031E1494 ADRP X0, 0xF3F000
	0x031E1498 LDR X0, [X0 + 0x738]
	0x031E149C BL 0x1C16CF4
	0x031E14A0 ADRP X0, 0xF3F000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11FC000
	007 Move X22, 0xF18000
	008 Move W8, [X21+244]
	009 Move X22, [X22+1864]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF18000
	017 Move X0, [X0+1864]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+244], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X1, X20
	024 Move X2, X19
	025 Move X21, X0
	026 Call Value..ctor, X0, X1
	027 Move X0, X21
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]
	033 Return X0

Method: mixpanel.Value op_Implicit(System.DateTimeOffset[] value)

Disassembly:
	0x031E14A4 LDR X0, [X0 + 0x260]
	0x031E14A8 BL 0x1C16CF4
	0x031E14AC ADRP X0, 0xF17000
	0x031E14B0 LDR X0, [X0 + 0x748]
	0x031E14B4 BL 0x1C16CF4
	0x031E14B8 MOVZ W8, 0x1
	0x031E14BC STRB W8, [X20 + 0x105]
	0x031E14C0 CBZ X19, 0x31E15B0
	0x031E14C4 ADRP X8, 0xF3E000
	0x031E14C8 LDR X8, [X8 + 0x5B0]
	0x031E14CC ADRP X22, 0xF3F000
	0x031E14D0 MOV X0, X19
	0x031E14D4 LDR X1, [X8]
	0x031E14D8 LDR X22, [X22 + 0x260]
	0x031E14DC BL 0x30CE118
	0x031E14E0 LDR X8, [X22]
	0x031E14E4 MOV X19, X0
	0x031E14E8 LDR W9, [X8 + 0xE0]
	0x031E14EC CBNZ W9, 0x31E14FC
	0x031E14F0 MOV X0, X8
	0x031E14F4 BL 0x1C16DFC
	0x031E14F8 LDR X8, [X22]
	0x031E14FC LDR X9, [X8 + 0xB8]
	0x031E1500 ADRP X24, 0xF3F000
	0x031E1504 ADRP X23, 0xF17000
	0x031E1508 LDR X20, [X9 + 0x160]
	0x031E150C LDR X24, [X24 + 0x720]
	0x031E1510 LDR X23, [X23 + 0x748]
	0x031E1514 CBNZ X20, 0x31E156C
	0x031E1518 LDR W9, [X8 + 0xE0]
	0x031E151C CBNZ W9, 0x31E152C
	0x031E1520 MOV X0, X8
	0x031E1524 BL 0x1C16DFC
	0x031E1528 LDR X8, [X22]
	0x031E152C ADRP X9, 0xF3F000
	0x031E1530 LDR X8, [X8 + 0xB8]
	0x031E1534 LDR X9, [X9 + 0x728]
	0x031E1538 LDR X21, [X8]
	0x031E153C LDR X0, [X9]
	0x031E1540 BL 0x1C16F10
	0x031E1544 ADRP X8, 0xF3F000
	0x031E1548 LDR X8, [X8 + 0x738]
	0x031E154C MOV X1, X21
	0x031E1550 MOV X3, X31
	0x031E1554 MOV X20, X0
	0x031E1558 LDR X2, [X8]
	0x031E155C BL 0x29A9F64
	0x031E1560 LDR X8, [X22]
	0x031E1564 LDR X8, [X8 + 0xB8]
	0x031E1568 STR X20, [X8 + 0x160]
	0x031E156C LDR X2, [X24]
	0x031E1570 MOV X0, X19
	0x031E1574 MOV X1, X20
	0x031E1578 BL 0x22E4AD8
	0x031E157C LDR X8, [X23]
	0x031E1580 MOV X19, X0
	0x031E1584 MOV X0, X8
	0x031E1588 BL 0x1C16F10
	0x031E158C MOV X1, X19
	0x031E1590 MOV X20, X0
	0x031E1594 BL 0x31DD564
	0x031E1598 MOV X0, X20
	0x031E159C LDP X20, X19, [X31 + 0x30]
	0x031E15A0 LDP X22, X21, [X31 + 0x20]
	0x031E15A4 LDP X24, X23, [X31 + 0x10]
	0x031E15A8 LDR X30, [X31], #0x40
	0x031E15AC RET
	0x031E15B0 BL 0x1C16F20
	0x031E15B4 STP D11, D10, [X31 - 0x40]!
	0x031E15B8 STP D9, D8, [X31 + 0x10]
	0x031E15BC STR X30, [X31 + 0x20]
	0x031E15C0 STP X20, X19, [X31 + 0x30]
	0x031E15C4 ADRP X19, 0x11FB000
	0x031E15C8 ADRP X20, 0xF17000
	0x031E15CC LDRB W8, [X19 + 0x106]
	0x031E15D0 LDR X20, [X20 + 0x748]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FC000
	009 Move X22, 0xF40000
	010 Move W8, [X20+245]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF40000
	018 Move X0, [X0+1624]
	019 Call 0x1C17CF4
	020 Move X0, 0xF40000
	021 Move X0, [X0+1632]
	022 Call 0x1C17CF4
	023 Move X0, 0xF40000
	024 Move X0, [X0+1640]
	025 Call 0x1C17CF4
	026 Move X0, 0xF40000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF18000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+245], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF40000
	042 Move X23, 0xF18000
	043 Move X20, [X8+264]
	044 Move X24, [X24+1624]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF40000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1632]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF40000
	060 Move X8, [X8+1640]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<DateTimeOffset, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+264], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.DateTimeOffset> value)

Disassembly:
	0x031E15D4 MOV V8.16B, V3.16B
	0x031E15D8 MOV V9.16B, V2.16B
	0x031E15DC MOV V10.16B, V1.16B
	0x031E15E0 MOV V11.16B, V0.16B
	0x031E15E4 TBNZ X8, 0x0, 0x31E15FC
	0x031E15E8 ADRP X0, 0xF17000
	0x031E15EC LDR X0, [X0 + 0x748]
	0x031E15F0 BL 0x1C16CF4
	0x031E15F4 MOVZ W8, 0x1
	0x031E15F8 STRB W8, [X19 + 0x106]
	0x031E15FC LDR X0, [X20]
	0x031E1600 BL 0x1C16F10
	0x031E1604 MOV V0.16B, V11.16B
	0x031E1608 MOV V1.16B, V10.16B
	0x031E160C MOV V2.16B, V9.16B
	0x031E1610 MOV V3.16B, V8.16B
	0x031E1614 MOV X19, X0
	0x031E1618 BL 0x31DD140
	0x031E161C MOV X0, X19
	0x031E1620 LDP X20, X19, [X31 + 0x30]
	0x031E1624 LDR X30, [X31 + 0x20]
	0x031E1628 LDP D9, D8, [X31 + 0x10]
	0x031E162C LDP D11, D10, [X31], #0x40
	0x031E1630 RET
	0x031E1634 STR X30, [X31 - 0x40]!
	0x031E1638 STP X24, X23, [X31 + 0x10]
	0x031E163C STP X22, X21, [X31 + 0x20]
	0x031E1640 STP X20, X19, [X31 + 0x30]
	0x031E1644 ADRP X20, 0x11FB000
	0x031E1648 ADRP X22, 0xF3F000
	0x031E164C LDRB W8, [X20 + 0x107]
	0x031E1650 LDR X22, [X22 + 0x260]
	0x031E1654 MOV X19, X0
	0x031E1658 TBNZ X8, 0x0, 0x31E16A0
	0x031E165C ADRP X0, 0xF3F000
	0x031E1660 LDR X0, [X0 + 0x740]
	0x031E1664 BL 0x1C16CF4
	0x031E1668 ADRP X0, 0xF3F000
	0x031E166C LDR X0, [X0 + 0x748]
	0x031E1670 BL 0x1C16CF4
	0x031E1674 ADRP X0, 0xF3F000
	0x031E1678 LDR X0, [X0 + 0x750]
	0x031E167C BL 0x1C16CF4
	0x031E1680 ADRP X0, 0xF3F000
	0x031E1684 LDR X0, [X0 + 0x260]
	0x031E1688 BL 0x1C16CF4
	0x031E168C ADRP X0, 0xF17000
	0x031E1690 LDR X0, [X0 + 0x748]
	0x031E1694 BL 0x1C16CF4
	0x031E1698 MOVZ W8, 0x1
	0x031E169C STRB W8, [X20 + 0x107]
	0x031E16A0 LDR X0, [X22]
	0x031E16A4 LDR W8, [X0 + 0xE0]
	0x031E16A8 CBNZ W8, 0x31E16B4
	0x031E16AC BL 0x1C16DFC
	0x031E16B0 LDR X0, [X22]
	0x031E16B4 LDR X8, [X0 + 0xB8]
	0x031E16B8 ADRP X24, 0xF3F000
	0x031E16BC ADRP X23, 0xF17000
	0x031E16C0 LDR X20, [X8 + 0x168]
	0x031E16C4 LDR X24, [X24 + 0x740]
	0x031E16C8 LDR X23, [X23 + 0x748]
	0x031E16CC CBNZ X20, 0x31E1720
	0x031E16D0 LDR W8, [X0 + 0xE0]
	0x031E16D4 CBNZ W8, 0x31E16E0
	0x031E16D8 BL 0x1C16DFC
	0x031E16DC LDR X0, [X22]
	0x031E16E0 ADRP X9, 0xF3F000
	0x031E16E4 LDR X8, [X0 + 0xB8]
	0x031E16E8 LDR X9, [X9 + 0x748]
	0x031E16EC LDR X21, [X8]
	0x031E16F0 LDR X0, [X9]
	0x031E16F4 BL 0x1C16F10
	0x031E16F8 ADRP X8, 0xF3F000
	0x031E16FC LDR X8, [X8 + 0x750]
	0x031E1700 MOV X1, X21
	0x031E1704 MOV X3, X31
	0x031E1708 MOV X20, X0
	0x031E170C LDR X2, [X8]
	0x031E1710 BL 0x29AA004
	0x031E1714 LDR X8, [X22]
	0x031E1718 LDR X8, [X8 + 0xB8]
	0x031E171C STR X20, [X8 + 0x168]
	0x031E1720 LDR X2, [X24]
	0x031E1724 MOV X0, X19
	0x031E1728 MOV X1, X20
	0x031E172C BL 0x22E4C0C
	0x031E1730 LDR X8, [X23]
	0x031E1734 MOV X19, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FC000
	009 Move W8, [X20+246]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF40000
	016 Move X0, [X0+1624]
	017 Call 0x1C17CF4
	018 Move X0, 0xF40000
	019 Move X0, [X0+1632]
	020 Call 0x1C17CF4
	021 Move X0, 0xF40000
	022 Move X0, [X0+1648]
	023 Call 0x1C17CF4
	024 Move X0, 0xF40000
	025 Move X0, [X0+1656]
	026 Call 0x1C17CF4
	027 Move X0, 0xF40000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF18000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+246], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF40000
	038 Move X8, [X8+1648]
	039 Move X22, 0xF40000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<DateTimeOffset>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF40000
	054 Move X23, 0xF18000
	055 Move X20, [X9+272]
	056 Move X24, [X24+1624]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF40000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1632]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF40000
	073 Move X8, [X8+1656]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<DateTimeOffset, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+272], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(System.TimeSpan value)

Disassembly:
	0x031E1738 MOV X0, X8
	0x031E173C BL 0x1C16F10
	0x031E1740 MOV X1, X19
	0x031E1744 MOV X20, X0
	0x031E1748 BL 0x31DD564
	0x031E174C MOV X0, X20
	0x031E1750 LDP X20, X19, [X31 + 0x30]
	0x031E1754 LDP X22, X21, [X31 + 0x20]
	0x031E1758 LDP X24, X23, [X31 + 0x10]
	0x031E175C LDR X30, [X31], #0x40
	0x031E1760 RET
	0x031E1764 STR X30, [X31 - 0x40]!
	0x031E1768 STP X24, X23, [X31 + 0x10]
	0x031E176C STP X22, X21, [X31 + 0x20]
	0x031E1770 STP X20, X19, [X31 + 0x30]
	0x031E1774 ADRP X20, 0x11FB000
	0x031E1778 LDRB W8, [X20 + 0x108]
	0x031E177C MOV X19, X0
	0x031E1780 TBNZ X8, 0x0, 0x31E17D4
	0x031E1784 ADRP X0, 0xF3F000
	0x031E1788 LDR X0, [X0 + 0x740]
	0x031E178C BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11FC000
	006 Move X21, 0xF18000
	007 Move W8, [X20+247]
	008 Move X21, [X21+1864]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF18000
	015 Move X0, [X0+1864]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+247], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X20, X0
	023 Call Value..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: mixpanel.Value op_Implicit(System.TimeSpan[] value)

Disassembly:
	0x031E1790 ADRP X0, 0xF3F000
	0x031E1794 LDR X0, [X0 + 0x748]
	0x031E1798 BL 0x1C16CF4
	0x031E179C ADRP X0, 0xF3F000
	0x031E17A0 LDR X0, [X0 + 0x758]
	0x031E17A4 BL 0x1C16CF4
	0x031E17A8 ADRP X0, 0xF3F000
	0x031E17AC LDR X0, [X0 + 0x760]
	0x031E17B0 BL 0x1C16CF4
	0x031E17B4 ADRP X0, 0xF3F000
	0x031E17B8 LDR X0, [X0 + 0x260]
	0x031E17BC BL 0x1C16CF4
	0x031E17C0 ADRP X0, 0xF17000
	0x031E17C4 LDR X0, [X0 + 0x748]
	0x031E17C8 BL 0x1C16CF4
	0x031E17CC MOVZ W8, 0x1
	0x031E17D0 STRB W8, [X20 + 0x108]
	0x031E17D4 CBZ X19, 0x31E18C4
	0x031E17D8 ADRP X8, 0xF3F000
	0x031E17DC LDR X8, [X8 + 0x758]
	0x031E17E0 ADRP X22, 0xF3F000
	0x031E17E4 MOV X0, X19
	0x031E17E8 LDR X1, [X8]
	0x031E17EC LDR X22, [X22 + 0x260]
	0x031E17F0 BL 0x30D0D68
	0x031E17F4 LDR X8, [X22]
	0x031E17F8 MOV X19, X0
	0x031E17FC LDR W9, [X8 + 0xE0]
	0x031E1800 CBNZ W9, 0x31E1810
	0x031E1804 MOV X0, X8
	0x031E1808 BL 0x1C16DFC
	0x031E180C LDR X8, [X22]
	0x031E1810 LDR X9, [X8 + 0xB8]
	0x031E1814 ADRP X24, 0xF3F000
	0x031E1818 ADRP X23, 0xF17000
	0x031E181C LDR X20, [X9 + 0x170]
	0x031E1820 LDR X24, [X24 + 0x740]
	0x031E1824 LDR X23, [X23 + 0x748]
	0x031E1828 CBNZ X20, 0x31E1880
	0x031E182C LDR W9, [X8 + 0xE0]
	0x031E1830 CBNZ W9, 0x31E1840
	0x031E1834 MOV X0, X8
	0x031E1838 BL 0x1C16DFC
	0x031E183C LDR X8, [X22]
	0x031E1840 ADRP X9, 0xF3F000
	0x031E1844 LDR X8, [X8 + 0xB8]
	0x031E1848 LDR X9, [X9 + 0x748]
	0x031E184C LDR X21, [X8]
	0x031E1850 LDR X0, [X9]
	0x031E1854 BL 0x1C16F10
	0x031E1858 ADRP X8, 0xF3F000
	0x031E185C LDR X8, [X8 + 0x760]
	0x031E1860 MOV X1, X21
	0x031E1864 MOV X3, X31
	0x031E1868 MOV X20, X0
	0x031E186C LDR X2, [X8]
	0x031E1870 BL 0x29AA004
	0x031E1874 LDR X8, [X22]
	0x031E1878 LDR X8, [X8 + 0xB8]
	0x031E187C STR X20, [X8 + 0x170]
	0x031E1880 LDR X2, [X24]
	0x031E1884 MOV X0, X19
	0x031E1888 MOV X1, X20
	0x031E188C BL 0x22E4C0C
	0x031E1890 LDR X8, [X23]
	0x031E1894 MOV X19, X0
	0x031E1898 MOV X0, X8
	0x031E189C BL 0x1C16F10
	0x031E18A0 MOV X1, X19
	0x031E18A4 MOV X20, X0
	0x031E18A8 BL 0x31DD564
	0x031E18AC MOV X0, X20
	0x031E18B0 LDP X20, X19, [X31 + 0x30]
	0x031E18B4 LDP X22, X21, [X31 + 0x20]
	0x031E18B8 LDP X24, X23, [X31 + 0x10]
	0x031E18BC LDR X30, [X31], #0x40

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FC000
	009 Move X22, 0xF40000
	010 Move W8, [X20+248]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF40000
	018 Move X0, [X0+1664]
	019 Call 0x1C17CF4
	020 Move X0, 0xF40000
	021 Move X0, [X0+1672]
	022 Call 0x1C17CF4
	023 Move X0, 0xF40000
	024 Move X0, [X0+1680]
	025 Call 0x1C17CF4
	026 Move X0, 0xF40000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF18000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+248], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF40000
	042 Move X23, 0xF18000
	043 Move X20, [X8+280]
	044 Move X24, [X24+1664]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF40000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1672]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF40000
	060 Move X8, [X8+1680]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<TimeSpan, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+280], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<System.TimeSpan> value)

Disassembly:
	0x031E18C0 RET
	0x031E18C4 BL 0x1C16F20
	0x031E18C8 STP D11, D10, [X31 - 0x40]!
	0x031E18CC STP D9, D8, [X31 + 0x10]
	0x031E18D0 STR X30, [X31 + 0x20]
	0x031E18D4 STP X20, X19, [X31 + 0x30]
	0x031E18D8 ADRP X19, 0x11FB000
	0x031E18DC ADRP X20, 0xF17000
	0x031E18E0 LDRB W8, [X19 + 0x109]
	0x031E18E4 LDR X20, [X20 + 0x748]
	0x031E18E8 MOV V8.16B, V3.16B
	0x031E18EC MOV V9.16B, V2.16B
	0x031E18F0 MOV V10.16B, V1.16B
	0x031E18F4 MOV V11.16B, V0.16B
	0x031E18F8 TBNZ X8, 0x0, 0x31E1910
	0x031E18FC ADRP X0, 0xF17000
	0x031E1900 LDR X0, [X0 + 0x748]
	0x031E1904 BL 0x1C16CF4
	0x031E1908 MOVZ W8, 0x1
	0x031E190C STRB W8, [X19 + 0x109]
	0x031E1910 LDR X0, [X20]
	0x031E1914 BL 0x1C16F10
	0x031E1918 MOV V0.16B, V11.16B
	0x031E191C MOV V1.16B, V10.16B
	0x031E1920 MOV V2.16B, V9.16B
	0x031E1924 MOV V3.16B, V8.16B
	0x031E1928 MOV X19, X0
	0x031E192C BL 0x31DD24C
	0x031E1930 MOV X0, X19
	0x031E1934 LDP X20, X19, [X31 + 0x30]
	0x031E1938 LDR X30, [X31 + 0x20]
	0x031E193C LDP D9, D8, [X31 + 0x10]
	0x031E1940 LDP D11, D10, [X31], #0x40
	0x031E1944 RET
	0x031E1948 STR X30, [X31 - 0x40]!
	0x031E194C STP X24, X23, [X31 + 0x10]
	0x031E1950 STP X22, X21, [X31 + 0x20]
	0x031E1954 STP X20, X19, [X31 + 0x30]
	0x031E1958 ADRP X20, 0x11FB000
	0x031E195C ADRP X22, 0xF3F000
	0x031E1960 LDRB W8, [X20 + 0x10A]
	0x031E1964 LDR X22, [X22 + 0x260]
	0x031E1968 MOV X19, X0
	0x031E196C TBNZ X8, 0x0, 0x31E19B4
	0x031E1970 ADRP X0, 0xF3F000
	0x031E1974 LDR X0, [X0 + 0x768]
	0x031E1978 BL 0x1C16CF4
	0x031E197C ADRP X0, 0xF3F000
	0x031E1980 LDR X0, [X0 + 0x770]
	0x031E1984 BL 0x1C16CF4
	0x031E1988 ADRP X0, 0xF3F000
	0x031E198C LDR X0, [X0 + 0x778]
	0x031E1990 BL 0x1C16CF4
	0x031E1994 ADRP X0, 0xF3F000
	0x031E1998 LDR X0, [X0 + 0x260]
	0x031E199C BL 0x1C16CF4
	0x031E19A0 ADRP X0, 0xF17000
	0x031E19A4 LDR X0, [X0 + 0x748]
	0x031E19A8 BL 0x1C16CF4
	0x031E19AC MOVZ W8, 0x1
	0x031E19B0 STRB W8, [X20 + 0x10A]
	0x031E19B4 LDR X0, [X22]
	0x031E19B8 LDR W8, [X0 + 0xE0]
	0x031E19BC CBNZ W8, 0x31E19C8
	0x031E19C0 BL 0x1C16DFC
	0x031E19C4 LDR X0, [X22]
	0x031E19C8 LDR X8, [X0 + 0xB8]
	0x031E19CC ADRP X24, 0xF3F000
	0x031E19D0 ADRP X23, 0xF17000
	0x031E19D4 LDR X20, [X8 + 0x178]
	0x031E19D8 LDR X24, [X24 + 0x768]
	0x031E19DC LDR X23, [X23 + 0x748]
	0x031E19E0 CBNZ X20, 0x31E1A34
	0x031E19E4 LDR W8, [X0 + 0xE0]
	0x031E19E8 CBNZ W8, 0x31E19F4
	0x031E19EC BL 0x1C16DFC
	0x031E19F0 LDR X0, [X22]
	0x031E19F4 ADRP X9, 0xF3F000
	0x031E19F8 LDR X8, [X0 + 0xB8]
	0x031E19FC LDR X9, [X9 + 0x770]
	0x031E1A00 LDR X21, [X8]
	0x031E1A04 LDR X0, [X9]
	0x031E1A08 BL 0x1C16F10
	0x031E1A0C ADRP X8, 0xF3F000
	0x031E1A10 LDR X8, [X8 + 0x778]
	0x031E1A14 MOV X1, X21
	0x031E1A18 MOV X3, X31
	0x031E1A1C MOV X20, X0
	0x031E1A20 LDR X2, [X8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FC000
	009 Move W8, [X20+249]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF40000
	016 Move X0, [X0+1664]
	017 Call 0x1C17CF4
	018 Move X0, 0xF40000
	019 Move X0, [X0+1672]
	020 Call 0x1C17CF4
	021 Move X0, 0xF40000
	022 Move X0, [X0+1688]
	023 Call 0x1C17CF4
	024 Move X0, 0xF40000
	025 Move X0, [X0+1696]
	026 Call 0x1C17CF4
	027 Move X0, 0xF40000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF18000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+249], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF40000
	038 Move X8, [X8+1688]
	039 Move X22, 0xF40000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<TimeSpan>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF40000
	054 Move X23, 0xF18000
	055 Move X20, [X9+288]
	056 Move X24, [X24+1664]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF40000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1672]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF40000
	073 Move X8, [X8+1696]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<TimeSpan, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+288], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(UnityEngine.Color value)

Disassembly:
	0x031E1A24 BL 0x29A99C4
	0x031E1A28 LDR X8, [X22]
	0x031E1A2C LDR X8, [X8 + 0xB8]
	0x031E1A30 STR X20, [X8 + 0x178]
	0x031E1A34 LDR X2, [X24]
	0x031E1A38 MOV X0, X19
	0x031E1A3C MOV X1, X20
	0x031E1A40 BL 0x22E4038
	0x031E1A44 LDR X8, [X23]
	0x031E1A48 MOV X19, X0
	0x031E1A4C MOV X0, X8
	0x031E1A50 BL 0x1C16F10
	0x031E1A54 MOV X1, X19
	0x031E1A58 MOV X20, X0
	0x031E1A5C BL 0x31DD564
	0x031E1A60 MOV X0, X20
	0x031E1A64 LDP X20, X19, [X31 + 0x30]
	0x031E1A68 LDP X22, X21, [X31 + 0x20]
	0x031E1A6C LDP X24, X23, [X31 + 0x10]
	0x031E1A70 LDR X30, [X31], #0x40
	0x031E1A74 RET
	0x031E1A78 STR X30, [X31 - 0x40]!
	0x031E1A7C STP X24, X23, [X31 + 0x10]
	0x031E1A80 STP X22, X21, [X31 + 0x20]
	0x031E1A84 STP X20, X19, [X31 + 0x30]
	0x031E1A88 ADRP X20, 0x11FB000
	0x031E1A8C LDRB W8, [X20 + 0x10B]
	0x031E1A90 MOV X19, X0
	0x031E1A94 TBNZ X8, 0x0, 0x31E1AE8
	0x031E1A98 ADRP X0, 0xF3F000
	0x031E1A9C LDR X0, [X0 + 0x768]
	0x031E1AA0 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0x11FC000
	009 Move X20, 0xF18000
	010 Move W8, [X19+250]
	011 Move X20, [X20+1864]
	012 Move V8, V3
	013 Move V9, V2
	014 Move V10, V1
	015 Move V11, V0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xF18000
	021 Move X0, [X0+1864]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+250], W8
	025 Move X0, [X20]
	026 Call 0x1C17F10
	027 Move V0, V11
	028 Move V1, V10
	029 Move V2, V9
	030 Move V3, V8
	031 Move X19, X0
	032 Call Value..ctor, X0, X1
	033 Move X0, X19
	034 Move X20, [X31+48]
	035 Move X19, [X31+56]
	036 Move X30, [X31+32]
	037 Move D9, [X31+16]
	038 Move D8, [X31+24]
	039 Move D11, [X31+64]
	040 Move D10, [X31+72]
	041 Return X0

Method: mixpanel.Value op_Implicit(UnityEngine.Color[] value)

Disassembly:
	0x031E1AA4 ADRP X0, 0xF3F000
	0x031E1AA8 LDR X0, [X0 + 0x770]
	0x031E1AAC BL 0x1C16CF4
	0x031E1AB0 ADRP X0, 0xF3F000
	0x031E1AB4 LDR X0, [X0 + 0x780]
	0x031E1AB8 BL 0x1C16CF4
	0x031E1ABC ADRP X0, 0xF3F000
	0x031E1AC0 LDR X0, [X0 + 0x788]
	0x031E1AC4 BL 0x1C16CF4
	0x031E1AC8 ADRP X0, 0xF3F000
	0x031E1ACC LDR X0, [X0 + 0x260]
	0x031E1AD0 BL 0x1C16CF4
	0x031E1AD4 ADRP X0, 0xF17000
	0x031E1AD8 LDR X0, [X0 + 0x748]
	0x031E1ADC BL 0x1C16CF4
	0x031E1AE0 MOVZ W8, 0x1
	0x031E1AE4 STRB W8, [X20 + 0x10B]
	0x031E1AE8 CBZ X19, 0x31E1BD8
	0x031E1AEC ADRP X8, 0xF3F000
	0x031E1AF0 LDR X8, [X8 + 0x780]
	0x031E1AF4 ADRP X22, 0xF3F000
	0x031E1AF8 MOV X0, X19
	0x031E1AFC LDR X1, [X8]
	0x031E1B00 LDR X22, [X22 + 0x260]
	0x031E1B04 BL 0x302EE78
	0x031E1B08 LDR X8, [X22]
	0x031E1B0C MOV X19, X0
	0x031E1B10 LDR W9, [X8 + 0xE0]
	0x031E1B14 CBNZ W9, 0x31E1B24
	0x031E1B18 MOV X0, X8
	0x031E1B1C BL 0x1C16DFC
	0x031E1B20 LDR X8, [X22]
	0x031E1B24 LDR X9, [X8 + 0xB8]
	0x031E1B28 ADRP X24, 0xF3F000
	0x031E1B2C ADRP X23, 0xF17000
	0x031E1B30 LDR X20, [X9 + 0x180]
	0x031E1B34 LDR X24, [X24 + 0x768]
	0x031E1B38 LDR X23, [X23 + 0x748]
	0x031E1B3C CBNZ X20, 0x31E1B94
	0x031E1B40 LDR W9, [X8 + 0xE0]
	0x031E1B44 CBNZ W9, 0x31E1B54
	0x031E1B48 MOV X0, X8
	0x031E1B4C BL 0x1C16DFC
	0x031E1B50 LDR X8, [X22]
	0x031E1B54 ADRP X9, 0xF3F000
	0x031E1B58 LDR X8, [X8 + 0xB8]
	0x031E1B5C LDR X9, [X9 + 0x770]
	0x031E1B60 LDR X21, [X8]
	0x031E1B64 LDR X0, [X9]
	0x031E1B68 BL 0x1C16F10
	0x031E1B6C ADRP X8, 0xF3F000
	0x031E1B70 LDR X8, [X8 + 0x788]
	0x031E1B74 MOV X1, X21
	0x031E1B78 MOV X3, X31
	0x031E1B7C MOV X20, X0
	0x031E1B80 LDR X2, [X8]
	0x031E1B84 BL 0x29A99C4
	0x031E1B88 LDR X8, [X22]
	0x031E1B8C LDR X8, [X8 + 0xB8]
	0x031E1B90 STR X20, [X8 + 0x180]
	0x031E1B94 LDR X2, [X24]
	0x031E1B98 MOV X0, X19
	0x031E1B9C MOV X1, X20
	0x031E1BA0 BL 0x22E4038
	0x031E1BA4 LDR X8, [X23]
	0x031E1BA8 MOV X19, X0
	0x031E1BAC MOV X0, X8
	0x031E1BB0 BL 0x1C16F10
	0x031E1BB4 MOV X1, X19
	0x031E1BB8 MOV X20, X0
	0x031E1BBC BL 0x31DD564
	0x031E1BC0 MOV X0, X20
	0x031E1BC4 LDP X20, X19, [X31 + 0x30]
	0x031E1BC8 LDP X22, X21, [X31 + 0x20]
	0x031E1BCC LDP X24, X23, [X31 + 0x10]
	0x031E1BD0 LDR X30, [X31], #0x40

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FC000
	009 Move X22, 0xF40000
	010 Move W8, [X20+251]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF40000
	018 Move X0, [X0+1704]
	019 Call 0x1C17CF4
	020 Move X0, 0xF40000
	021 Move X0, [X0+1712]
	022 Call 0x1C17CF4
	023 Move X0, 0xF40000
	024 Move X0, [X0+1720]
	025 Call 0x1C17CF4
	026 Move X0, 0xF40000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF18000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+251], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF40000
	042 Move X23, 0xF18000
	043 Move X20, [X8+296]
	044 Move X24, [X24+1704]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF40000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1712]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF40000
	060 Move X8, [X8+1720]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Color, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+296], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<UnityEngine.Color> value)

Disassembly:
	0x031E1BD4 RET
	0x031E1BD8 BL 0x1C16F20
	0x031E1BDC SUB X31, X31, 0x40
	0x031E1BE0 STP X30, X21, [X31 + 0x20]
	0x031E1BE4 STP X20, X19, [X31 + 0x30]
	0x031E1BE8 ADRP X21, 0x11FB000
	0x031E1BEC ADRP X20, 0xF17000
	0x031E1BF0 LDRB W8, [X21 + 0x10C]
	0x031E1BF4 LDR X20, [X20 + 0x748]
	0x031E1BF8 MOV X19, X0
	0x031E1BFC TBNZ X8, 0x0, 0x31E1C14
	0x031E1C00 ADRP X0, 0xF17000
	0x031E1C04 LDR X0, [X0 + 0x748]
	0x031E1C08 BL 0x1C16CF4
	0x031E1C0C MOVZ W8, 0x1
	0x031E1C10 STRB W8, [X21 + 0x10C]
	0x031E1C14 LDR X8, [X19 + 0x10]
	0x031E1C18 LDR V0, [X19]
	0x031E1C1C LDR X0, [X20]
	0x031E1C20 STR X8, [X31 + 0x10]
	0x031E1C24 STR V0, [X31]
	0x031E1C28 BL 0x1C16F10
	0x031E1C2C ADD X1, X31, 0x0
	0x031E1C30 MOV X19, X0
	0x031E1C34 BL 0x31DD358
	0x031E1C38 MOV X0, X19
	0x031E1C3C LDP X20, X19, [X31 + 0x30]
	0x031E1C40 LDP X30, X21, [X31 + 0x20]
	0x031E1C44 ADD X31, X31, 0x40
	0x031E1C48 RET
	0x031E1C4C STR X30, [X31 - 0x40]!
	0x031E1C50 STP X24, X23, [X31 + 0x10]
	0x031E1C54 STP X22, X21, [X31 + 0x20]
	0x031E1C58 STP X20, X19, [X31 + 0x30]
	0x031E1C5C ADRP X20, 0x11FB000
	0x031E1C60 ADRP X22, 0xF3F000
	0x031E1C64 LDRB W8, [X20 + 0x10D]
	0x031E1C68 LDR X22, [X22 + 0x260]
	0x031E1C6C MOV X19, X0
	0x031E1C70 TBNZ X8, 0x0, 0x31E1CB8
	0x031E1C74 ADRP X0, 0xF3F000
	0x031E1C78 LDR X0, [X0 + 0x790]
	0x031E1C7C BL 0x1C16CF4
	0x031E1C80 ADRP X0, 0xF3F000
	0x031E1C84 LDR X0, [X0 + 0x798]
	0x031E1C88 BL 0x1C16CF4
	0x031E1C8C ADRP X0, 0xF3F000
	0x031E1C90 LDR X0, [X0 + 0x7A0]
	0x031E1C94 BL 0x1C16CF4
	0x031E1C98 ADRP X0, 0xF3F000
	0x031E1C9C LDR X0, [X0 + 0x260]
	0x031E1CA0 BL 0x1C16CF4
	0x031E1CA4 ADRP X0, 0xF17000
	0x031E1CA8 LDR X0, [X0 + 0x748]
	0x031E1CAC BL 0x1C16CF4
	0x031E1CB0 MOVZ W8, 0x1
	0x031E1CB4 STRB W8, [X20 + 0x10D]
	0x031E1CB8 LDR X0, [X22]
	0x031E1CBC LDR W8, [X0 + 0xE0]
	0x031E1CC0 CBNZ W8, 0x31E1CCC
	0x031E1CC4 BL 0x1C16DFC
	0x031E1CC8 LDR X0, [X22]
	0x031E1CCC LDR X8, [X0 + 0xB8]
	0x031E1CD0 ADRP X24, 0xF3F000
	0x031E1CD4 ADRP X23, 0xF17000
	0x031E1CD8 LDR X20, [X8 + 0x188]
	0x031E1CDC LDR X24, [X24 + 0x790]
	0x031E1CE0 LDR X23, [X23 + 0x748]
	0x031E1CE4 CBNZ X20, 0x31E1D38
	0x031E1CE8 LDR W8, [X0 + 0xE0]
	0x031E1CEC CBNZ W8, 0x31E1CF8
	0x031E1CF0 BL 0x1C16DFC
	0x031E1CF4 LDR X0, [X22]
	0x031E1CF8 ADRP X9, 0xF3F000
	0x031E1CFC LDR X8, [X0 + 0xB8]
	0x031E1D00 LDR X9, [X9 + 0x798]
	0x031E1D04 LDR X21, [X8]
	0x031E1D08 LDR X0, [X9]
	0x031E1D0C BL 0x1C16F10
	0x031E1D10 ADRP X8, 0xF3F000
	0x031E1D14 LDR X8, [X8 + 0x7A0]
	0x031E1D18 MOV X1, X21
	0x031E1D1C MOV X3, X31
	0x031E1D20 MOV X20, X0
	0x031E1D24 LDR X2, [X8]
	0x031E1D28 BL 0x29A7674
	0x031E1D2C LDR X8, [X22]
	0x031E1D30 LDR X8, [X8 + 0xB8]
	0x031E1D34 STR X20, [X8 + 0x188]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FC000
	009 Move W8, [X20+252]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF40000
	016 Move X0, [X0+1704]
	017 Call 0x1C17CF4
	018 Move X0, 0xF40000
	019 Move X0, [X0+1712]
	020 Call 0x1C17CF4
	021 Move X0, 0xF40000
	022 Move X0, [X0+1728]
	023 Call 0x1C17CF4
	024 Move X0, 0xF40000
	025 Move X0, [X0+1736]
	026 Call 0x1C17CF4
	027 Move X0, 0xF40000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF18000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+252], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF40000
	038 Move X8, [X8+1728]
	039 Move X22, 0xF40000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Color>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF40000
	054 Move X23, 0xF18000
	055 Move X20, [X9+304]
	056 Move X24, [X24+1704]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF40000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1712]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF40000
	073 Move X8, [X8+1736]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Color, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+304], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(UnityEngine.Color32 value)

Disassembly:
	0x031E1D38 LDR X2, [X24]
	0x031E1D3C MOV X0, X19
	0x031E1D40 MOV X1, X20
	0x031E1D44 BL 0x22E30C4
	0x031E1D48 LDR X8, [X23]
	0x031E1D4C MOV X19, X0
	0x031E1D50 MOV X0, X8
	0x031E1D54 BL 0x1C16F10
	0x031E1D58 MOV X1, X19
	0x031E1D5C MOV X20, X0
	0x031E1D60 BL 0x31DD564
	0x031E1D64 MOV X0, X20
	0x031E1D68 LDP X20, X19, [X31 + 0x30]
	0x031E1D6C LDP X22, X21, [X31 + 0x20]
	0x031E1D70 LDP X24, X23, [X31 + 0x10]
	0x031E1D74 LDR X30, [X31], #0x40
	0x031E1D78 RET
	0x031E1D7C STR X30, [X31 - 0x40]!
	0x031E1D80 STP X24, X23, [X31 + 0x10]
	0x031E1D84 STP X22, X21, [X31 + 0x20]
	0x031E1D88 STP X20, X19, [X31 + 0x30]
	0x031E1D8C ADRP X20, 0x11FB000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11FC000
	006 Move X21, 0xF18000
	007 Move W8, [X20+253]
	008 Move X21, [X21+1864]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF18000
	015 Move X0, [X0+1864]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+253], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 And X1, X19, 0
	022 Move X20, X0
	023 Call Value..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: mixpanel.Value op_Implicit(UnityEngine.Color32[] value)

Disassembly:
	0x031E1D90 LDRB W8, [X20 + 0x10E]
	0x031E1D94 MOV X19, X0
	0x031E1D98 TBNZ X8, 0x0, 0x31E1DEC
	0x031E1D9C ADRP X0, 0xF3F000
	0x031E1DA0 LDR X0, [X0 + 0x790]
	0x031E1DA4 BL 0x1C16CF4
	0x031E1DA8 ADRP X0, 0xF3F000
	0x031E1DAC LDR X0, [X0 + 0x798]
	0x031E1DB0 BL 0x1C16CF4
	0x031E1DB4 ADRP X0, 0xF3F000
	0x031E1DB8 LDR X0, [X0 + 0x7A8]
	0x031E1DBC BL 0x1C16CF4
	0x031E1DC0 ADRP X0, 0xF3F000
	0x031E1DC4 LDR X0, [X0 + 0x7B0]
	0x031E1DC8 BL 0x1C16CF4
	0x031E1DCC ADRP X0, 0xF3F000
	0x031E1DD0 LDR X0, [X0 + 0x260]
	0x031E1DD4 BL 0x1C16CF4
	0x031E1DD8 ADRP X0, 0xF17000
	0x031E1DDC LDR X0, [X0 + 0x748]
	0x031E1DE0 BL 0x1C16CF4
	0x031E1DE4 MOVZ W8, 0x1
	0x031E1DE8 STRB W8, [X20 + 0x10E]
	0x031E1DEC CBZ X19, 0x31E1EDC
	0x031E1DF0 ADRP X8, 0xF3F000
	0x031E1DF4 LDR X8, [X8 + 0x7A8]
	0x031E1DF8 ADRP X22, 0xF3F000
	0x031E1DFC MOV X0, X19
	0x031E1E00 LDR X1, [X8]
	0x031E1E04 LDR X22, [X22 + 0x260]
	0x031E1E08 BL 0x2F67210
	0x031E1E0C LDR X8, [X22]
	0x031E1E10 MOV X19, X0
	0x031E1E14 LDR W9, [X8 + 0xE0]
	0x031E1E18 CBNZ W9, 0x31E1E28
	0x031E1E1C MOV X0, X8
	0x031E1E20 BL 0x1C16DFC
	0x031E1E24 LDR X8, [X22]
	0x031E1E28 LDR X9, [X8 + 0xB8]
	0x031E1E2C ADRP X24, 0xF3F000
	0x031E1E30 ADRP X23, 0xF17000
	0x031E1E34 LDR X20, [X9 + 0x190]
	0x031E1E38 LDR X24, [X24 + 0x790]
	0x031E1E3C LDR X23, [X23 + 0x748]
	0x031E1E40 CBNZ X20, 0x31E1E98
	0x031E1E44 LDR W9, [X8 + 0xE0]
	0x031E1E48 CBNZ W9, 0x31E1E58
	0x031E1E4C MOV X0, X8
	0x031E1E50 BL 0x1C16DFC
	0x031E1E54 LDR X8, [X22]
	0x031E1E58 ADRP X9, 0xF3F000
	0x031E1E5C LDR X8, [X8 + 0xB8]
	0x031E1E60 LDR X9, [X9 + 0x798]
	0x031E1E64 LDR X21, [X8]
	0x031E1E68 LDR X0, [X9]
	0x031E1E6C BL 0x1C16F10
	0x031E1E70 ADRP X8, 0xF3F000
	0x031E1E74 LDR X8, [X8 + 0x7B0]
	0x031E1E78 MOV X1, X21
	0x031E1E7C MOV X3, X31
	0x031E1E80 MOV X20, X0
	0x031E1E84 LDR X2, [X8]
	0x031E1E88 BL 0x29A7674
	0x031E1E8C LDR X8, [X22]
	0x031E1E90 LDR X8, [X8 + 0xB8]
	0x031E1E94 STR X20, [X8 + 0x190]
	0x031E1E98 LDR X2, [X24]
	0x031E1E9C MOV X0, X19
	0x031E1EA0 MOV X1, X20
	0x031E1EA4 BL 0x22E30C4
	0x031E1EA8 LDR X8, [X23]
	0x031E1EAC MOV X19, X0
	0x031E1EB0 MOV X0, X8
	0x031E1EB4 BL 0x1C16F10
	0x031E1EB8 MOV X1, X19
	0x031E1EBC MOV X20, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FC000
	009 Move X22, 0xF40000
	010 Move W8, [X20+254]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF40000
	018 Move X0, [X0+1744]
	019 Call 0x1C17CF4
	020 Move X0, 0xF40000
	021 Move X0, [X0+1752]
	022 Call 0x1C17CF4
	023 Move X0, 0xF40000
	024 Move X0, [X0+1760]
	025 Call 0x1C17CF4
	026 Move X0, 0xF40000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF18000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+254], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF40000
	042 Move X23, 0xF18000
	043 Move X20, [X8+312]
	044 Move X24, [X24+1744]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF40000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1752]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF40000
	060 Move X8, [X8+1760]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Color32, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+312], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<UnityEngine.Color32> value)

Disassembly:
	0x031E1EC0 BL 0x31DD564
	0x031E1EC4 MOV X0, X20
	0x031E1EC8 LDP X20, X19, [X31 + 0x30]
	0x031E1ECC LDP X22, X21, [X31 + 0x20]
	0x031E1ED0 LDP X24, X23, [X31 + 0x10]
	0x031E1ED4 LDR X30, [X31], #0x40
	0x031E1ED8 RET
	0x031E1EDC BL 0x1C16F20
	0x031E1EE0 STP D11, D10, [X31 - 0x40]!
	0x031E1EE4 STP D9, D8, [X31 + 0x10]
	0x031E1EE8 STR X30, [X31 + 0x20]
	0x031E1EEC STP X20, X19, [X31 + 0x30]
	0x031E1EF0 ADRP X19, 0x11FB000
	0x031E1EF4 ADRP X20, 0xF17000
	0x031E1EF8 LDRB W8, [X19 + 0x10F]
	0x031E1EFC LDR X20, [X20 + 0x748]
	0x031E1F00 MOV V8.16B, V3.16B
	0x031E1F04 MOV V9.16B, V2.16B
	0x031E1F08 MOV V10.16B, V1.16B
	0x031E1F0C MOV V11.16B, V0.16B
	0x031E1F10 TBNZ X8, 0x0, 0x31E1F28
	0x031E1F14 ADRP X0, 0xF17000
	0x031E1F18 LDR X0, [X0 + 0x748]
	0x031E1F1C BL 0x1C16CF4
	0x031E1F20 MOVZ W8, 0x1
	0x031E1F24 STRB W8, [X19 + 0x10F]
	0x031E1F28 LDR X0, [X20]
	0x031E1F2C BL 0x1C16F10
	0x031E1F30 MOV V0.16B, V11.16B
	0x031E1F34 MOV V1.16B, V10.16B
	0x031E1F38 MOV V2.16B, V9.16B
	0x031E1F3C MOV V3.16B, V8.16B
	0x031E1F40 MOV X19, X0
	0x031E1F44 BL 0x31DD458
	0x031E1F48 MOV X0, X19
	0x031E1F4C LDP X20, X19, [X31 + 0x30]
	0x031E1F50 LDR X30, [X31 + 0x20]
	0x031E1F54 LDP D9, D8, [X31 + 0x10]
	0x031E1F58 LDP D11, D10, [X31], #0x40
	0x031E1F5C RET
	0x031E1F60 STR X30, [X31 - 0x40]!
	0x031E1F64 STP X24, X23, [X31 + 0x10]
	0x031E1F68 STP X22, X21, [X31 + 0x20]
	0x031E1F6C STP X20, X19, [X31 + 0x30]
	0x031E1F70 ADRP X20, 0x11FB000
	0x031E1F74 ADRP X22, 0xF3F000
	0x031E1F78 LDRB W8, [X20 + 0x110]
	0x031E1F7C LDR X22, [X22 + 0x260]
	0x031E1F80 MOV X19, X0
	0x031E1F84 TBNZ X8, 0x0, 0x31E1FCC
	0x031E1F88 ADRP X0, 0xF3F000
	0x031E1F8C LDR X0, [X0 + 0x7B8]
	0x031E1F90 BL 0x1C16CF4
	0x031E1F94 ADRP X0, 0xF3F000
	0x031E1F98 LDR X0, [X0 + 0x7C0]
	0x031E1F9C BL 0x1C16CF4
	0x031E1FA0 ADRP X0, 0xF3F000
	0x031E1FA4 LDR X0, [X0 + 0x7C8]
	0x031E1FA8 BL 0x1C16CF4
	0x031E1FAC ADRP X0, 0xF3F000
	0x031E1FB0 LDR X0, [X0 + 0x260]
	0x031E1FB4 BL 0x1C16CF4
	0x031E1FB8 ADRP X0, 0xF17000
	0x031E1FBC LDR X0, [X0 + 0x748]
	0x031E1FC0 BL 0x1C16CF4
	0x031E1FC4 MOVZ W8, 0x1
	0x031E1FC8 STRB W8, [X20 + 0x110]
	0x031E1FCC LDR X0, [X22]
	0x031E1FD0 LDR W8, [X0 + 0xE0]
	0x031E1FD4 CBNZ W8, 0x31E1FE0
	0x031E1FD8 BL 0x1C16DFC
	0x031E1FDC LDR X0, [X22]
	0x031E1FE0 LDR X8, [X0 + 0xB8]
	0x031E1FE4 ADRP X24, 0xF3F000
	0x031E1FE8 ADRP X23, 0xF17000
	0x031E1FEC LDR X20, [X8 + 0x198]
	0x031E1FF0 LDR X24, [X24 + 0x7B8]
	0x031E1FF4 LDR X23, [X23 + 0x748]
	0x031E1FF8 CBNZ X20, 0x31E204C
	0x031E1FFC LDR W8, [X0 + 0xE0]
	0x031E2000 CBNZ W8, 0x31E200C
	0x031E2004 BL 0x1C16DFC
	0x031E2008 LDR X0, [X22]
	0x031E200C ADRP X9, 0xF3E000
	0x031E2010 LDR X8, [X0 + 0xB8]
	0x031E2014 LDR X9, [X9 + 0x7C0]
	0x031E2018 LDR X21, [X8]
	0x031E201C LDR X0, [X9]
	0x031E2020 BL 0x1C16F10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FC000
	009 Move W8, [X20+255]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF40000
	016 Move X0, [X0+1744]
	017 Call 0x1C17CF4
	018 Move X0, 0xF40000
	019 Move X0, [X0+1752]
	020 Call 0x1C17CF4
	021 Move X0, 0xF40000
	022 Move X0, [X0+1768]
	023 Call 0x1C17CF4
	024 Move X0, 0xF40000
	025 Move X0, [X0+1776]
	026 Call 0x1C17CF4
	027 Move X0, 0xF40000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF18000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+255], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF40000
	038 Move X8, [X8+1768]
	039 Move X22, 0xF40000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Color32>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF40000
	054 Move X23, 0xF18000
	055 Move X20, [X9+320]
	056 Move X24, [X24+1744]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF40000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1752]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF40000
	073 Move X8, [X8+1776]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Color32, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+320], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(UnityEngine.Vector2 value)

Disassembly:
	0x031E2024 ADRP X8, 0xF3E000
	0x031E2028 LDR X8, [X8 + 0x7C8]
	0x031E202C MOV X1, X21
	0x031E2030 MOV X3, X31
	0x031E2034 MOV X20, X0
	0x031E2038 LDR X2, [X8]
	0x031E203C BL 0x29A9A64
	0x031E2040 LDR X8, [X22]
	0x031E2044 LDR X8, [X8 + 0xB8]
	0x031E2048 STR X20, [X8 + 0x198]
	0x031E204C LDR X2, [X24]
	0x031E2050 MOV X0, X19
	0x031E2054 MOV X1, X20
	0x031E2058 BL 0x22E416C
	0x031E205C LDR X8, [X23]
	0x031E2060 MOV X19, X0
	0x031E2064 MOV X0, X8
	0x031E2068 BL 0x1C16F10
	0x031E206C MOV X1, X19
	0x031E2070 MOV X20, X0
	0x031E2074 BL 0x31DD564
	0x031E2078 MOV X0, X20
	0x031E207C LDP X20, X19, [X31 + 0x30]
	0x031E2080 LDP X22, X21, [X31 + 0x20]
	0x031E2084 LDP X24, X23, [X31 + 0x10]
	0x031E2088 LDR X30, [X31], #0x40

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x11FB000
	007 Move X20, 0xF17000
	008 Move W8, [X19+256]
	009 Move X20, [X20+1864]
	010 Move V8, V1
	011 Move V9, V0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF17000
	017 Move X0, [X0+1864]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+256], W8
	021 Move X0, [X20]
	022 Call 0x1C17F10
	023 Move V0, V9
	024 Move V1, V8
	025 Move X19, X0
	026 Call Value..ctor, X0, X1
	027 Move X0, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move D9, [X31+48]
	032 Move D8, [X31+56]
	033 Return X0

Method: mixpanel.Value op_Implicit(UnityEngine.Vector2[] value)

Disassembly:
	0x031E208C RET
	0x031E2090 STR X30, [X31 - 0x40]!
	0x031E2094 STP X24, X23, [X31 + 0x10]
	0x031E2098 STP X22, X21, [X31 + 0x20]
	0x031E209C STP X20, X19, [X31 + 0x30]
	0x031E20A0 ADRP X20, 0x11FA000
	0x031E20A4 LDRB W8, [X20 + 0x111]
	0x031E20A8 MOV X19, X0
	0x031E20AC TBNZ X8, 0x0, 0x31E2100
	0x031E20B0 ADRP X0, 0xF3E000
	0x031E20B4 LDR X0, [X0 + 0x7B8]
	0x031E20B8 BL 0x1C16CF4
	0x031E20BC ADRP X0, 0xF3E000
	0x031E20C0 LDR X0, [X0 + 0x7C0]
	0x031E20C4 BL 0x1C16CF4
	0x031E20C8 ADRP X0, 0xF3E000
	0x031E20CC LDR X0, [X0 + 0x7D0]
	0x031E20D0 BL 0x1C16CF4
	0x031E20D4 ADRP X0, 0xF3E000
	0x031E20D8 LDR X0, [X0 + 0x7D8]
	0x031E20DC BL 0x1C16CF4
	0x031E20E0 ADRP X0, 0xF3E000
	0x031E20E4 LDR X0, [X0 + 0x260]
	0x031E20E8 BL 0x1C16CF4
	0x031E20EC ADRP X0, 0xF16000
	0x031E20F0 LDR X0, [X0 + 0x748]
	0x031E20F4 BL 0x1C16CF4
	0x031E20F8 MOVZ W8, 0x1
	0x031E20FC STRB W8, [X20 + 0x111]
	0x031E2100 CBZ X19, 0x31E21F0
	0x031E2104 ADRP X8, 0xF3E000
	0x031E2108 LDR X8, [X8 + 0x7D0]
	0x031E210C ADRP X22, 0xF3E000
	0x031E2110 MOV X0, X19
	0x031E2114 LDR X1, [X8]
	0x031E2118 LDR X22, [X22 + 0x260]
	0x031E211C BL 0x303AFD0
	0x031E2120 LDR X8, [X22]
	0x031E2124 MOV X19, X0
	0x031E2128 LDR W9, [X8 + 0xE0]
	0x031E212C CBNZ W9, 0x31E213C
	0x031E2130 MOV X0, X8
	0x031E2134 BL 0x1C16DFC
	0x031E2138 LDR X8, [X22]
	0x031E213C LDR X9, [X8 + 0xB8]
	0x031E2140 ADRP X24, 0xF3E000
	0x031E2144 ADRP X23, 0xF16000
	0x031E2148 LDR X20, [X9 + 0x1A0]
	0x031E214C LDR X24, [X24 + 0x7B8]
	0x031E2150 LDR X23, [X23 + 0x748]
	0x031E2154 CBNZ X20, 0x31E21AC
	0x031E2158 LDR W9, [X8 + 0xE0]
	0x031E215C CBNZ W9, 0x31E216C
	0x031E2160 MOV X0, X8
	0x031E2164 BL 0x1C16DFC
	0x031E2168 LDR X8, [X22]
	0x031E216C ADRP X9, 0xF3E000
	0x031E2170 LDR X8, [X8 + 0xB8]
	0x031E2174 LDR X9, [X9 + 0x7C0]
	0x031E2178 LDR X21, [X8]
	0x031E217C LDR X0, [X9]
	0x031E2180 BL 0x1C16F10
	0x031E2184 ADRP X8, 0xF3E000
	0x031E2188 LDR X8, [X8 + 0x7D8]
	0x031E218C MOV X1, X21
	0x031E2190 MOV X3, X31
	0x031E2194 MOV X20, X0
	0x031E2198 LDR X2, [X8]
	0x031E219C BL 0x29A9A64
	0x031E21A0 LDR X8, [X22]
	0x031E21A4 LDR X8, [X8 + 0xB8]
	0x031E21A8 STR X20, [X8 + 0x1A0]
	0x031E21AC LDR X2, [X24]
	0x031E21B0 MOV X0, X19
	0x031E21B4 MOV X1, X20
	0x031E21B8 BL 0x22E416C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FB000
	009 Move X22, 0xF3F000
	010 Move W8, [X20+257]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF3F000
	018 Move X0, [X0+1784]
	019 Call 0x1C17CF4
	020 Move X0, 0xF3F000
	021 Move X0, [X0+1792]
	022 Call 0x1C17CF4
	023 Move X0, 0xF3F000
	024 Move X0, [X0+1800]
	025 Call 0x1C17CF4
	026 Move X0, 0xF3F000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF17000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+257], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF3F000
	042 Move X23, 0xF17000
	043 Move X20, [X8+328]
	044 Move X24, [X24+1784]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF3F000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1792]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF3F000
	060 Move X8, [X8+1800]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Vector2, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+328], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<UnityEngine.Vector2> value)

Disassembly:
	0x031E21BC LDR X8, [X23]
	0x031E21C0 MOV X19, X0
	0x031E21C4 MOV X0, X8
	0x031E21C8 BL 0x1C16F10
	0x031E21CC MOV X1, X19
	0x031E21D0 MOV X20, X0
	0x031E21D4 BL 0x31DD564
	0x031E21D8 MOV X0, X20
	0x031E21DC LDP X20, X19, [X31 + 0x30]
	0x031E21E0 LDP X22, X21, [X31 + 0x20]
	0x031E21E4 LDP X24, X23, [X31 + 0x10]
	0x031E21E8 LDR X30, [X31], #0x40
	0x031E21EC RET
	0x031E21F0 BL 0x1C16F20
	0x031E21F4 STR X30, [X31 - 0x30]!
	0x031E21F8 STP X22, X21, [X31 + 0x10]
	0x031E21FC STP X20, X19, [X31 + 0x20]
	0x031E2200 ADRP X20, 0x11FA000
	0x031E2204 LDRB W8, [X20 + 0x112]
	0x031E2208 MOV X19, X0
	0x031E220C TBNZ X8, 0x0, 0x31E2254
	0x031E2210 ADRP X0, 0xF3E000
	0x031E2214 LDR X0, [X0 + 0x7E0]
	0x031E2218 BL 0x1C16CF4
	0x031E221C ADRP X0, 0xF3E000
	0x031E2220 LDR X0, [X0 + 0x7E8]
	0x031E2224 BL 0x1C16CF4
	0x031E2228 ADRP X0, 0xF13000
	0x031E222C LDR X0, [X0 + 0xE78]
	0x031E2230 BL 0x1C16CF4
	0x031E2234 ADRP X0, 0xF3E000
	0x031E2238 LDR X0, [X0 + 0x7F0]
	0x031E223C BL 0x1C16CF4
	0x031E2240 ADRP X0, 0xF3E000
	0x031E2244 LDR X0, [X0 + 0x260]
	0x031E2248 BL 0x1C16CF4
	0x031E224C MOVZ W8, 0x1
	0x031E2250 STRB W8, [X20 + 0x112]
	0x031E2254 CBZ X19, 0x31E2310
	0x031E2258 ADRP X22, 0xF3E000
	0x031E225C LDR X22, [X22 + 0x260]
	0x031E2260 LDR X19, [X19 + 0x30]
	0x031E2264 LDR X0, [X22]
	0x031E2268 LDR W8, [X0 + 0xE0]
	0x031E226C CBNZ W8, 0x31E2278
	0x031E2270 BL 0x1C16DFC
	0x031E2274 LDR X0, [X22]
	0x031E2278 LDR X8, [X0 + 0xB8]
	0x031E227C LDR X20, [X8 + 0x1A8]
	0x031E2280 CBNZ X20, 0x31E22D4
	0x031E2284 LDR W8, [X0 + 0xE0]
	0x031E2288 CBNZ W8, 0x31E2294
	0x031E228C BL 0x1C16DFC
	0x031E2290 LDR X0, [X22]
	0x031E2294 ADRP X9, 0xF3E000
	0x031E2298 LDR X8, [X0 + 0xB8]
	0x031E229C LDR X9, [X9 + 0x7E0]
	0x031E22A0 LDR X21, [X8]
	0x031E22A4 LDR X0, [X9]
	0x031E22A8 BL 0x1C16F10
	0x031E22AC ADRP X8, 0xF3E000
	0x031E22B0 LDR X8, [X8 + 0x7F0]
	0x031E22B4 MOV X1, X21
	0x031E22B8 MOV X3, X31
	0x031E22BC MOV X20, X0
	0x031E22C0 LDR X2, [X8]
	0x031E22C4 BL 0x29A8CD4
	0x031E22C8 LDR X8, [X22]
	0x031E22CC LDR X8, [X8 + 0xB8]
	0x031E22D0 STR X20, [X8 + 0x1A8]
	0x031E22D4 CBZ X19, 0x31E2310
	0x031E22D8 ADRP X8, 0xF3E000
	0x031E22DC LDR X8, [X8 + 0x7E8]
	0x031E22E0 MOV X0, X19
	0x031E22E4 MOV X1, X20
	0x031E22E8 LDR X2, [X8]
	0x031E22EC BL 0x2131710
	0x031E22F0 CBZ X0, 0x31E2310
	0x031E22F4 ADRP X8, 0xF13000
	0x031E22F8 LDR X8, [X8 + 0xE78]
	0x031E22FC LDP X20, X19, [X31 + 0x20]
	0x031E2300 LDP X22, X21, [X31 + 0x10]
	0x031E2304 LDR X1, [X8]
	0x031E2308 LDR X30, [X31], #0x30
	0x031E230C B 0x301DDC4
	0x031E2310 BL 0x1C16F20
	0x031E2314 STR X30, [X31 - 0x30]!
	0x031E2318 STP X22, X21, [X31 + 0x10]
	0x031E231C STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FB000
	009 Move W8, [X20+258]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF3F000
	016 Move X0, [X0+1784]
	017 Call 0x1C17CF4
	018 Move X0, 0xF3F000
	019 Move X0, [X0+1792]
	020 Call 0x1C17CF4
	021 Move X0, 0xF3F000
	022 Move X0, [X0+1808]
	023 Call 0x1C17CF4
	024 Move X0, 0xF3F000
	025 Move X0, [X0+1816]
	026 Call 0x1C17CF4
	027 Move X0, 0xF3F000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF17000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+258], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF3F000
	038 Move X8, [X8+1808]
	039 Move X22, 0xF3F000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Vector2>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF3F000
	054 Move X23, 0xF17000
	055 Move X20, [X9+336]
	056 Move X24, [X24+1784]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF3F000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1792]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF3F000
	073 Move X8, [X8+1816]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Vector2, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+336], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(UnityEngine.Vector3 value)

Disassembly:
	0x031DD200 MOVZ W1, 0x5
	0x031DD204 MOV X20, X0
	0x031DD208 BL 0x2AA481C
	0x031DD20C MOV X0, X19
	0x031DD210 MOV X1, X31
	0x031DD214 STR X20, [X19 + 0x40]
	0x031DD218 BL 0x33BDD8C
	0x031DD21C MOV X0, X19
	0x031DD220 MOV V2.16B, V9.16B
	0x031DD224 MOV V3.16B, V8.16B
	0x031DD228 LDP X20, X19, [X31 + 0x50]
	0x031DD22C LDP X22, X21, [X31 + 0x40]
	0x031DD230 LDP X24, X23, [X31 + 0x30]
	0x031DD234 LDR X30, [X31 + 0x20]
	0x031DD238 LDP D9, D8, [X31 + 0x10]
	0x031DD23C MOV V0.16B, V11.16B
	0x031DD240 MOV V1.16B, V10.16B
	0x031DD244 LDP D11, D10, [X31], #0x60
	0x031DD248 B 0x31DBC20
	0x031DD24C STP D11, D10, [X31 - 0x60]!
	0x031DD250 STP D9, D8, [X31 + 0x10]
	0x031DD254 STR X30, [X31 + 0x20]
	0x031DD258 STP X24, X23, [X31 + 0x30]
	0x031DD25C STP X22, X21, [X31 + 0x40]
	0x031DD260 STP X20, X19, [X31 + 0x50]
	0x031DD264 ADRP X24, 0x11FF000
	0x031DD268 ADRP X23, 0xF42000
	0x031DD26C ADRP X20, 0xF42000
	0x031DD270 ADRP X22, 0xF42000
	0x031DD274 ADRP X21, 0xF42000

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0x1200000
	008 Move X20, 0xF1C000
	009 Move W8, [X19+259]
	010 Move X20, [X20+1864]
	011 Move V8, V2
	012 Move V9, V1
	013 Move V10, V0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF1C000
	019 Move X0, [X0+1864]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+259], W8
	023 Move X0, [X20]
	024 Call 0x1C17F10
	025 Move V0, V10
	026 Move V1, V9
	027 Move V2, V8
	028 Move X19, X0
	029 Call Value..ctor, X0, X1
	030 Move X0, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X30, [X31+24]
	034 Move D9, [X31+8]
	035 Move D8, [X31+16]
	036 Move V10, [X31+48]
	037 Return X0

Method: mixpanel.Value op_Implicit(UnityEngine.Vector3[] value)

Disassembly:
	0x031E2320 ADRP X20, 0x11FA000
	0x031E2324 LDRB W8, [X20 + 0x113]
	0x031E2328 MOV X19, X0
	0x031E232C TBNZ X8, 0x0, 0x31E2368
	0x031E2330 ADRP X0, 0xF3E000
	0x031E2334 LDR X0, [X0 + 0x7E0]
	0x031E2338 BL 0x1C16CF4
	0x031E233C ADRP X0, 0xF3E000
	0x031E2340 LDR X0, [X0 + 0x7E8]
	0x031E2344 BL 0x1C16CF4
	0x031E2348 ADRP X0, 0xF3E000
	0x031E234C LDR X0, [X0 + 0x7F8]
	0x031E2350 BL 0x1C16CF4
	0x031E2354 ADRP X0, 0xF3E000
	0x031E2358 LDR X0, [X0 + 0x260]
	0x031E235C BL 0x1C16CF4
	0x031E2360 MOVZ W8, 0x1
	0x031E2364 STRB W8, [X20 + 0x113]
	0x031E2368 CBZ X19, 0x31E2410
	0x031E236C ADRP X22, 0xF3E000
	0x031E2370 LDR X22, [X22 + 0x260]
	0x031E2374 LDR X19, [X19 + 0x30]
	0x031E2378 LDR X0, [X22]
	0x031E237C LDR W8, [X0 + 0xE0]
	0x031E2380 CBNZ W8, 0x31E238C
	0x031E2384 BL 0x1C16DFC
	0x031E2388 LDR X0, [X22]
	0x031E238C LDR X8, [X0 + 0xB8]
	0x031E2390 LDR X20, [X8 + 0x1B0]
	0x031E2394 CBNZ X20, 0x31E23E8
	0x031E2398 LDR W8, [X0 + 0xE0]
	0x031E239C CBNZ W8, 0x31E23A8
	0x031E23A0 BL 0x1C16DFC
	0x031E23A4 LDR X0, [X22]
	0x031E23A8 ADRP X9, 0xF3E000
	0x031E23AC LDR X8, [X0 + 0xB8]
	0x031E23B0 LDR X9, [X9 + 0x7E0]
	0x031E23B4 LDR X21, [X8]
	0x031E23B8 LDR X0, [X9]
	0x031E23BC BL 0x1C16F10
	0x031E23C0 ADRP X8, 0xF3E000
	0x031E23C4 LDR X8, [X8 + 0x7F8]
	0x031E23C8 MOV X1, X21
	0x031E23CC MOV X3, X31
	0x031E23D0 MOV X20, X0
	0x031E23D4 LDR X2, [X8]
	0x031E23D8 BL 0x29A8CD4
	0x031E23DC LDR X8, [X22]
	0x031E23E0 LDR X8, [X8 + 0xB8]
	0x031E23E4 STR X20, [X8 + 0x1B0]
	0x031E23E8 CBZ X19, 0x31E2410
	0x031E23EC ADRP X8, 0xF3E000
	0x031E23F0 LDR X8, [X8 + 0x7E8]
	0x031E23F4 MOV X0, X19
	0x031E23F8 MOV X1, X20
	0x031E23FC LDP X20, X19, [X31 + 0x20]
	0x031E2400 LDR X2, [X8]
	0x031E2404 LDP X22, X21, [X31 + 0x10]
	0x031E2408 LDR X30, [X31], #0x30
	0x031E240C B 0x2131710
	0x031E2410 BL 0x1C16F20
	0x031E2414 STR X30, [X31 - 0x30]!
	0x031E2418 STP X22, X21, [X31 + 0x10]
	0x031E241C STP X20, X19, [X31 + 0x20]
	0x031E2420 ADRP X20, 0x11FA000
	0x031E2424 LDRB W8, [X20 + 0x114]
	0x031E2428 MOV X19, X0
	0x031E242C TBNZ X8, 0x0, 0x31E2474
	0x031E2430 ADRP X0, 0xF3E000
	0x031E2434 LDR X0, [X0 + 0x800]
	0x031E2438 BL 0x1C16CF4
	0x031E243C ADRP X0, 0xF3E000
	0x031E2440 LDR X0, [X0 + 0x808]
	0x031E2444 BL 0x1C16CF4
	0x031E2448 ADRP X0, 0xF3E000
	0x031E244C LDR X0, [X0 + 0x420]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FB000
	009 Move X22, 0xF3F000
	010 Move W8, [X20+260]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF3F000
	018 Move X0, [X0+1824]
	019 Call 0x1C17CF4
	020 Move X0, 0xF3F000
	021 Move X0, [X0+1832]
	022 Call 0x1C17CF4
	023 Move X0, 0xF3F000
	024 Move X0, [X0+1840]
	025 Call 0x1C17CF4
	026 Move X0, 0xF3F000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF17000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+260], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF3F000
	042 Move X23, 0xF17000
	043 Move X20, [X8+344]
	044 Move X24, [X24+1824]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF3F000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1832]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF3F000
	060 Move X8, [X8+1840]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Vector3, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+344], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<UnityEngine.Vector3> value)

Disassembly:
	0x031E2450 BL 0x1C16CF4
	0x031E2454 ADRP X0, 0xF3E000
	0x031E2458 LDR X0, [X0 + 0x810]
	0x031E245C BL 0x1C16CF4
	0x031E2460 ADRP X0, 0xF3E000
	0x031E2464 LDR X0, [X0 + 0x260]
	0x031E2468 BL 0x1C16CF4
	0x031E246C MOVZ W8, 0x1
	0x031E2470 STRB W8, [X20 + 0x114]
	0x031E2474 CBZ X19, 0x31E2530
	0x031E2478 ADRP X22, 0xF3E000
	0x031E247C LDR X22, [X22 + 0x260]
	0x031E2480 LDR X19, [X19 + 0x30]
	0x031E2484 LDR X0, [X22]
	0x031E2488 LDR W8, [X0 + 0xE0]
	0x031E248C CBNZ W8, 0x31E2498
	0x031E2490 BL 0x1C16DFC
	0x031E2494 LDR X0, [X22]
	0x031E2498 LDR X8, [X0 + 0xB8]
	0x031E249C LDR X20, [X8 + 0x1B8]
	0x031E24A0 CBNZ X20, 0x31E24F4
	0x031E24A4 LDR W8, [X0 + 0xE0]
	0x031E24A8 CBNZ W8, 0x31E24B4
	0x031E24AC BL 0x1C16DFC
	0x031E24B0 LDR X0, [X22]
	0x031E24B4 ADRP X9, 0xF3E000
	0x031E24B8 LDR X8, [X0 + 0xB8]
	0x031E24BC LDR X9, [X9 + 0x800]
	0x031E24C0 LDR X21, [X8]
	0x031E24C4 LDR X0, [X9]
	0x031E24C8 BL 0x1C16F10
	0x031E24CC ADRP X8, 0xF3E000
	0x031E24D0 LDR X8, [X8 + 0x810]
	0x031E24D4 MOV X1, X21
	0x031E24D8 MOV X3, X31
	0x031E24DC MOV X20, X0
	0x031E24E0 LDR X2, [X8]
	0x031E24E4 BL 0x29A7EC0
	0x031E24E8 LDR X8, [X22]
	0x031E24EC LDR X8, [X8 + 0xB8]
	0x031E24F0 STR X20, [X8 + 0x1B8]
	0x031E24F4 CBZ X19, 0x31E2530
	0x031E24F8 ADRP X8, 0xF3E000
	0x031E24FC LDR X8, [X8 + 0x808]
	0x031E2500 MOV X0, X19
	0x031E2504 MOV X1, X20
	0x031E2508 LDR X2, [X8]
	0x031E250C BL 0x2130934
	0x031E2510 CBZ X0, 0x31E2530
	0x031E2514 ADRP X8, 0xF3E000
	0x031E2518 LDR X8, [X8 + 0x420]
	0x031E251C LDP X20, X19, [X31 + 0x20]
	0x031E2520 LDP X22, X21, [X31 + 0x10]
	0x031E2524 LDR X1, [X8]
	0x031E2528 LDR X30, [X31], #0x30
	0x031E252C B 0x2F641BC
	0x031E2530 BL 0x1C16F20
	0x031E2534 STR X30, [X31 - 0x30]!
	0x031E2538 STP X22, X21, [X31 + 0x10]
	0x031E253C STP X20, X19, [X31 + 0x20]
	0x031E2540 ADRP X20, 0x11FA000
	0x031E2544 LDRB W8, [X20 + 0x115]
	0x031E2548 MOV X19, X0
	0x031E254C TBNZ X8, 0x0, 0x31E2588
	0x031E2550 ADRP X0, 0xF3E000
	0x031E2554 LDR X0, [X0 + 0x800]
	0x031E2558 BL 0x1C16CF4
	0x031E255C ADRP X0, 0xF3E000
	0x031E2560 LDR X0, [X0 + 0x808]
	0x031E2564 BL 0x1C16CF4
	0x031E2568 ADRP X0, 0xF3E000
	0x031E256C LDR X0, [X0 + 0x818]
	0x031E2570 BL 0x1C16CF4
	0x031E2574 ADRP X0, 0xF3E000
	0x031E2578 LDR X0, [X0 + 0x260]
	0x031E257C BL 0x1C16CF4
	0x031E2580 MOVZ W8, 0x1
	0x031E2584 STRB W8, [X20 + 0x115]
	0x031E2588 CBZ X19, 0x31E2630
	0x031E258C ADRP X22, 0xF3E000
	0x031E2590 LDR X22, [X22 + 0x260]
	0x031E2594 LDR X19, [X19 + 0x30]
	0x031E2598 LDR X0, [X22]
	0x031E259C LDR W8, [X0 + 0xE0]
	0x031E25A0 CBNZ W8, 0x31E25AC
	0x031E25A4 BL 0x1C16DFC
	0x031E25A8 LDR X0, [X22]
	0x031E25AC LDR X8, [X0 + 0xB8]
	0x031E25B0 LDR X20, [X8 + 0x1C0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FB000
	009 Move W8, [X20+261]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF3F000
	016 Move X0, [X0+1824]
	017 Call 0x1C17CF4
	018 Move X0, 0xF3F000
	019 Move X0, [X0+1832]
	020 Call 0x1C17CF4
	021 Move X0, 0xF3E000
	022 Move X0, [X0+1456]
	023 Call 0x1C17CF4
	024 Move X0, 0xF3F000
	025 Move X0, [X0+1848]
	026 Call 0x1C17CF4
	027 Move X0, 0xF3F000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF17000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+261], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF3E000
	038 Move X8, [X8+1456]
	039 Move X22, 0xF3F000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Vector3>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF3F000
	054 Move X23, 0xF17000
	055 Move X20, [X9+352]
	056 Move X24, [X24+1824]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF3F000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1832]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF3F000
	073 Move X8, [X8+1848]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Vector3, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+352], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(UnityEngine.Vector4 value)

Disassembly:
	0x031E25B4 CBNZ X20, 0x31E2608
	0x031E25B8 LDR W8, [X0 + 0xE0]
	0x031E25BC CBNZ W8, 0x31E25C8
	0x031E25C0 BL 0x1C16DFC
	0x031E25C4 LDR X0, [X22]
	0x031E25C8 ADRP X9, 0xF3E000
	0x031E25CC LDR X8, [X0 + 0xB8]
	0x031E25D0 LDR X9, [X9 + 0x800]
	0x031E25D4 LDR X21, [X8]
	0x031E25D8 LDR X0, [X9]
	0x031E25DC BL 0x1C16F10
	0x031E25E0 ADRP X8, 0xF3E000
	0x031E25E4 LDR X8, [X8 + 0x818]
	0x031E25E8 MOV X1, X21
	0x031E25EC MOV X3, X31
	0x031E25F0 MOV X20, X0
	0x031E25F4 LDR X2, [X8]
	0x031E25F8 BL 0x29A7EC0
	0x031E25FC LDR X8, [X22]
	0x031E2600 LDR X8, [X8 + 0xB8]
	0x031E2604 STR X20, [X8 + 0x1C0]
	0x031E2608 CBZ X19, 0x31E2630
	0x031E260C ADRP X8, 0xF3E000
	0x031E2610 LDR X8, [X8 + 0x808]
	0x031E2614 MOV X0, X19
	0x031E2618 MOV X1, X20
	0x031E261C LDP X20, X19, [X31 + 0x20]
	0x031E2620 LDR X2, [X8]
	0x031E2624 LDP X22, X21, [X31 + 0x10]
	0x031E2628 LDR X30, [X31], #0x30
	0x031E262C B 0x2130934
	0x031E2630 BL 0x1C16F20

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0x11FB000
	009 Move X20, 0xF17000
	010 Move W8, [X19+262]
	011 Move X20, [X20+1864]
	012 Move V8, V3
	013 Move V9, V2
	014 Move V10, V1
	015 Move V11, V0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xF17000
	021 Move X0, [X0+1864]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+262], W8
	025 Move X0, [X20]
	026 Call 0x1C17F10
	027 Move V0, V11
	028 Move V1, V10
	029 Move V2, V9
	030 Move V3, V8
	031 Move X19, X0
	032 Call Value..ctor, X0, X1
	033 Move X0, X19
	034 Move X20, [X31+48]
	035 Move X19, [X31+56]
	036 Move X30, [X31+32]
	037 Move D9, [X31+16]
	038 Move D8, [X31+24]
	039 Move D11, [X31+64]
	040 Move D10, [X31+72]
	041 Return X0

Method: mixpanel.Value op_Implicit(UnityEngine.Vector4[] value)

Disassembly:
	0x031E2634 STR X30, [X31 - 0x30]!
	0x031E2638 STP X22, X21, [X31 + 0x10]
	0x031E263C STP X20, X19, [X31 + 0x20]
	0x031E2640 ADRP X20, 0x11FA000
	0x031E2644 LDRB W8, [X20 + 0x116]
	0x031E2648 MOV X19, X0
	0x031E264C TBNZ X8, 0x0, 0x31E2694
	0x031E2650 ADRP X0, 0xF3E000
	0x031E2654 LDR X0, [X0 + 0x820]
	0x031E2658 BL 0x1C16CF4
	0x031E265C ADRP X0, 0xF3E000
	0x031E2660 LDR X0, [X0 + 0x828]
	0x031E2664 BL 0x1C16CF4
	0x031E2668 ADRP X0, 0xF3E000
	0x031E266C LDR X0, [X0 + 0x448]
	0x031E2670 BL 0x1C16CF4
	0x031E2674 ADRP X0, 0xF3E000
	0x031E2678 LDR X0, [X0 + 0x830]
	0x031E267C BL 0x1C16CF4
	0x031E2680 ADRP X0, 0xF3E000
	0x031E2684 LDR X0, [X0 + 0x260]
	0x031E2688 BL 0x1C16CF4
	0x031E268C MOVZ W8, 0x1
	0x031E2690 STRB W8, [X20 + 0x116]
	0x031E2694 CBZ X19, 0x31E2750
	0x031E2698 ADRP X22, 0xF3E000
	0x031E269C LDR X22, [X22 + 0x260]
	0x031E26A0 LDR X19, [X19 + 0x30]
	0x031E26A4 LDR X0, [X22]
	0x031E26A8 LDR W8, [X0 + 0xE0]
	0x031E26AC CBNZ W8, 0x31E26B8
	0x031E26B0 BL 0x1C16DFC
	0x031E26B4 LDR X0, [X22]
	0x031E26B8 LDR X8, [X0 + 0xB8]
	0x031E26BC LDR X20, [X8 + 0x1C8]
	0x031E26C0 CBNZ X20, 0x31E2714
	0x031E26C4 LDR W8, [X0 + 0xE0]
	0x031E26C8 CBNZ W8, 0x31E26D4
	0x031E26CC BL 0x1C16DFC
	0x031E26D0 LDR X0, [X22]
	0x031E26D4 ADRP X9, 0xF3E000
	0x031E26D8 LDR X8, [X0 + 0xB8]
	0x031E26DC LDR X9, [X9 + 0x820]
	0x031E26E0 LDR X21, [X8]
	0x031E26E4 LDR X0, [X9]
	0x031E26E8 BL 0x1C16F10
	0x031E26EC ADRP X8, 0xF3E000
	0x031E26F0 LDR X8, [X8 + 0x830]
	0x031E26F4 MOV X1, X21
	0x031E26F8 MOV X3, X31
	0x031E26FC MOV X20, X0
	0x031E2700 LDR X2, [X8]
	0x031E2704 BL 0x29A9124
	0x031E2708 LDR X8, [X22]
	0x031E270C LDR X8, [X8 + 0xB8]
	0x031E2710 STR X20, [X8 + 0x1C8]
	0x031E2714 CBZ X19, 0x31E2750
	0x031E2718 ADRP X8, 0xF3E000
	0x031E271C LDR X8, [X8 + 0x828]
	0x031E2720 MOV X0, X19
	0x031E2724 MOV X1, X20
	0x031E2728 LDR X2, [X8]
	0x031E272C BL 0x2131B50
	0x031E2730 CBZ X0, 0x31E2750
	0x031E2734 ADRP X8, 0xF3E000
	0x031E2738 LDR X8, [X8 + 0x448]
	0x031E273C LDP X20, X19, [X31 + 0x20]
	0x031E2740 LDP X22, X21, [X31 + 0x10]
	0x031E2744 LDR X1, [X8]
	0x031E2748 LDR X30, [X31], #0x30
	0x031E274C B 0x3061A54
	0x031E2750 BL 0x1C16F20
	0x031E2754 STR X30, [X31 - 0x30]!
	0x031E2758 STP X22, X21, [X31 + 0x10]
	0x031E275C STP X20, X19, [X31 + 0x20]
	0x031E2760 ADRP X20, 0x11FA000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FB000
	009 Move X22, 0xF3F000
	010 Move W8, [X20+263]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF3F000
	018 Move X0, [X0+1856]
	019 Call 0x1C17CF4
	020 Move X0, 0xF3F000
	021 Move X0, [X0+1864]
	022 Call 0x1C17CF4
	023 Move X0, 0xF3F000
	024 Move X0, [X0+1872]
	025 Call 0x1C17CF4
	026 Move X0, 0xF3F000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF17000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+263], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF3F000
	042 Move X23, 0xF17000
	043 Move X20, [X8+360]
	044 Move X24, [X24+1856]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF3F000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1864]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF3F000
	060 Move X8, [X8+1872]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Vector4, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+360], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<UnityEngine.Vector4> value)

Disassembly:
	0x031E2764 LDRB W8, [X20 + 0x117]
	0x031E2768 MOV X19, X0
	0x031E276C TBNZ X8, 0x0, 0x31E27A8
	0x031E2770 ADRP X0, 0xF3E000
	0x031E2774 LDR X0, [X0 + 0x820]
	0x031E2778 BL 0x1C16CF4
	0x031E277C ADRP X0, 0xF3E000
	0x031E2780 LDR X0, [X0 + 0x828]
	0x031E2784 BL 0x1C16CF4
	0x031E2788 ADRP X0, 0xF3E000
	0x031E278C LDR X0, [X0 + 0x838]
	0x031E2790 BL 0x1C16CF4
	0x031E2794 ADRP X0, 0xF3E000
	0x031E2798 LDR X0, [X0 + 0x260]
	0x031E279C BL 0x1C16CF4
	0x031E27A0 MOVZ W8, 0x1
	0x031E27A4 STRB W8, [X20 + 0x117]
	0x031E27A8 CBZ X19, 0x31E2850
	0x031E27AC ADRP X22, 0xF3E000
	0x031E27B0 LDR X22, [X22 + 0x260]
	0x031E27B4 LDR X19, [X19 + 0x30]
	0x031E27B8 LDR X0, [X22]
	0x031E27BC LDR W8, [X0 + 0xE0]
	0x031E27C0 CBNZ W8, 0x31E27CC
	0x031E27C4 BL 0x1C16DFC
	0x031E27C8 LDR X0, [X22]
	0x031E27CC LDR X8, [X0 + 0xB8]
	0x031E27D0 LDR X20, [X8 + 0x1D0]
	0x031E27D4 CBNZ X20, 0x31E2828
	0x031E27D8 LDR W8, [X0 + 0xE0]
	0x031E27DC CBNZ W8, 0x31E27E8
	0x031E27E0 BL 0x1C16DFC
	0x031E27E4 LDR X0, [X22]
	0x031E27E8 ADRP X9, 0xF3E000
	0x031E27EC LDR X8, [X0 + 0xB8]
	0x031E27F0 LDR X9, [X9 + 0x820]
	0x031E27F4 LDR X21, [X8]
	0x031E27F8 LDR X0, [X9]
	0x031E27FC BL 0x1C16F10
	0x031E2800 ADRP X8, 0xF3E000
	0x031E2804 LDR X8, [X8 + 0x838]
	0x031E2808 MOV X1, X21
	0x031E280C MOV X3, X31
	0x031E2810 MOV X20, X0
	0x031E2814 LDR X2, [X8]
	0x031E2818 BL 0x29A9124
	0x031E281C LDR X8, [X22]
	0x031E2820 LDR X8, [X8 + 0xB8]
	0x031E2824 STR X20, [X8 + 0x1D0]
	0x031E2828 CBZ X19, 0x31E2850
	0x031E282C ADRP X8, 0xF3E000
	0x031E2830 LDR X8, [X8 + 0x828]
	0x031E2834 MOV X0, X19
	0x031E2838 MOV X1, X20
	0x031E283C LDP X20, X19, [X31 + 0x20]
	0x031E2840 LDR X2, [X8]
	0x031E2844 LDP X22, X21, [X31 + 0x10]
	0x031E2848 LDR X30, [X31], #0x30
	0x031E284C B 0x2131B50
	0x031E2850 BL 0x1C16F20
	0x031E2854 STR X30, [X31 - 0x30]!
	0x031E2858 STP X22, X21, [X31 + 0x10]
	0x031E285C STP X20, X19, [X31 + 0x20]
	0x031E2860 ADRP X20, 0x11FA000
	0x031E2864 LDRB W8, [X20 + 0x118]
	0x031E2868 MOV X19, X0
	0x031E286C TBNZ X8, 0x0, 0x31E28B4
	0x031E2870 ADRP X0, 0xF3E000
	0x031E2874 LDR X0, [X0 + 0x840]
	0x031E2878 BL 0x1C16CF4
	0x031E287C ADRP X0, 0xF3E000
	0x031E2880 LDR X0, [X0 + 0x848]
	0x031E2884 BL 0x1C16CF4
	0x031E2888 ADRP X0, 0xF3E000
	0x031E288C LDR X0, [X0 + 0x470]
	0x031E2890 BL 0x1C16CF4
	0x031E2894 ADRP X0, 0xF3E000
	0x031E2898 LDR X0, [X0 + 0x850]
	0x031E289C BL 0x1C16CF4
	0x031E28A0 ADRP X0, 0xF3E000
	0x031E28A4 LDR X0, [X0 + 0x260]
	0x031E28A8 BL 0x1C16CF4
	0x031E28AC MOVZ W8, 0x1
	0x031E28B0 STRB W8, [X20 + 0x118]
	0x031E28B4 CBZ X19, 0x31E2970
	0x031E28B8 ADRP X22, 0xF3E000
	0x031E28BC LDR X22, [X22 + 0x260]
	0x031E28C0 LDR X19, [X19 + 0x30]
	0x031E28C4 LDR X0, [X22]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FB000
	009 Move W8, [X20+264]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF3F000
	016 Move X0, [X0+1856]
	017 Call 0x1C17CF4
	018 Move X0, 0xF3F000
	019 Move X0, [X0+1864]
	020 Call 0x1C17CF4
	021 Move X0, 0xF3F000
	022 Move X0, [X0+1880]
	023 Call 0x1C17CF4
	024 Move X0, 0xF3F000
	025 Move X0, [X0+1888]
	026 Call 0x1C17CF4
	027 Move X0, 0xF3F000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF17000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+264], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF3F000
	038 Move X8, [X8+1880]
	039 Move X22, 0xF3F000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Vector4>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF3F000
	054 Move X23, 0xF17000
	055 Move X20, [X9+368]
	056 Move X24, [X24+1856]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF3F000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1864]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF3F000
	073 Move X8, [X8+1888]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Vector4, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+368], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(UnityEngine.Quaternion value)

Disassembly:
	0x031E28C8 LDR W8, [X0 + 0xE0]
	0x031E28CC CBNZ W8, 0x31E28D8
	0x031E28D0 BL 0x1C16DFC
	0x031E28D4 LDR X0, [X22]
	0x031E28D8 LDR X8, [X0 + 0xB8]
	0x031E28DC LDR X20, [X8 + 0x1D8]
	0x031E28E0 CBNZ X20, 0x31E2934
	0x031E28E4 LDR W8, [X0 + 0xE0]
	0x031E28E8 CBNZ W8, 0x31E28F4
	0x031E28EC BL 0x1C16DFC
	0x031E28F0 LDR X0, [X22]
	0x031E28F4 ADRP X9, 0xF3E000
	0x031E28F8 LDR X8, [X0 + 0xB8]
	0x031E28FC LDR X9, [X9 + 0x840]
	0x031E2900 LDR X21, [X8]
	0x031E2904 LDR X0, [X9]
	0x031E2908 BL 0x1C16F10
	0x031E290C ADRP X8, 0xF3E000
	0x031E2910 LDR X8, [X8 + 0x850]
	0x031E2914 MOV X1, X21
	0x031E2918 MOV X3, X31
	0x031E291C MOV X20, X0
	0x031E2920 LDR X2, [X8]
	0x031E2924 BL 0x29A8770
	0x031E2928 LDR X8, [X22]
	0x031E292C LDR X8, [X8 + 0xB8]
	0x031E2930 STR X20, [X8 + 0x1D8]
	0x031E2934 CBZ X19, 0x31E2970
	0x031E2938 ADRP X8, 0xF3E000
	0x031E293C LDR X8, [X8 + 0x848]
	0x031E2940 MOV X0, X19
	0x031E2944 MOV X1, X20

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0x11FB000
	009 Move X20, 0xF17000
	010 Move W8, [X19+265]
	011 Move X20, [X20+1864]
	012 Move V8, V3
	013 Move V9, V2
	014 Move V10, V1
	015 Move V11, V0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xF17000
	021 Move X0, [X0+1864]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+265], W8
	025 Move X0, [X20]
	026 Call 0x1C17F10
	027 Move V0, V11
	028 Move V1, V10
	029 Move V2, V9
	030 Move V3, V8
	031 Move X19, X0
	032 Call Value..ctor, X0, X1
	033 Move X0, X19
	034 Move X20, [X31+48]
	035 Move X19, [X31+56]
	036 Move X30, [X31+32]
	037 Move D9, [X31+16]
	038 Move D8, [X31+24]
	039 Move D11, [X31+64]
	040 Move D10, [X31+72]
	041 Return X0

Method: mixpanel.Value op_Implicit(UnityEngine.Quaternion[] value)

Disassembly:
	0x031E2948 LDR X2, [X8]
	0x031E294C BL 0x21311DC
	0x031E2950 CBZ X0, 0x31E2970
	0x031E2954 ADRP X8, 0xF3E000
	0x031E2958 LDR X8, [X8 + 0x470]
	0x031E295C LDP X20, X19, [X31 + 0x20]
	0x031E2960 LDP X22, X21, [X31 + 0x10]
	0x031E2964 LDR X1, [X8]
	0x031E2968 LDR X30, [X31], #0x30
	0x031E296C B 0x2FB3CE4
	0x031E2970 BL 0x1C16F20
	0x031E2974 STR X30, [X31 - 0x30]!
	0x031E2978 STP X22, X21, [X31 + 0x10]
	0x031E297C STP X20, X19, [X31 + 0x20]
	0x031E2980 ADRP X20, 0x11FA000
	0x031E2984 LDRB W8, [X20 + 0x119]
	0x031E2988 MOV X19, X0
	0x031E298C TBNZ X8, 0x0, 0x31E29C8
	0x031E2990 ADRP X0, 0xF3E000
	0x031E2994 LDR X0, [X0 + 0x840]
	0x031E2998 BL 0x1C16CF4
	0x031E299C ADRP X0, 0xF3E000
	0x031E29A0 LDR X0, [X0 + 0x848]
	0x031E29A4 BL 0x1C16CF4
	0x031E29A8 ADRP X0, 0xF3E000
	0x031E29AC LDR X0, [X0 + 0x858]
	0x031E29B0 BL 0x1C16CF4
	0x031E29B4 ADRP X0, 0xF3E000
	0x031E29B8 LDR X0, [X0 + 0x260]
	0x031E29BC BL 0x1C16CF4
	0x031E29C0 MOVZ W8, 0x1
	0x031E29C4 STRB W8, [X20 + 0x119]
	0x031E29C8 CBZ X19, 0x31E2A70
	0x031E29CC ADRP X22, 0xF3E000
	0x031E29D0 LDR X22, [X22 + 0x260]
	0x031E29D4 LDR X19, [X19 + 0x30]
	0x031E29D8 LDR X0, [X22]
	0x031E29DC LDR W8, [X0 + 0xE0]
	0x031E29E0 CBNZ W8, 0x31E29EC
	0x031E29E4 BL 0x1C16DFC
	0x031E29E8 LDR X0, [X22]
	0x031E29EC LDR X8, [X0 + 0xB8]
	0x031E29F0 LDR X20, [X8 + 0x1E0]
	0x031E29F4 CBNZ X20, 0x31E2A48
	0x031E29F8 LDR W8, [X0 + 0xE0]
	0x031E29FC CBNZ W8, 0x31E2A08
	0x031E2A00 BL 0x1C16DFC
	0x031E2A04 LDR X0, [X22]
	0x031E2A08 ADRP X9, 0xF3E000
	0x031E2A0C LDR X8, [X0 + 0xB8]
	0x031E2A10 LDR X9, [X9 + 0x840]
	0x031E2A14 LDR X21, [X8]
	0x031E2A18 LDR X0, [X9]
	0x031E2A1C BL 0x1C16F10
	0x031E2A20 ADRP X8, 0xF3E000
	0x031E2A24 LDR X8, [X8 + 0x858]
	0x031E2A28 MOV X1, X21
	0x031E2A2C MOV X3, X31
	0x031E2A30 MOV X20, X0
	0x031E2A34 LDR X2, [X8]
	0x031E2A38 BL 0x29A8770
	0x031E2A3C LDR X8, [X22]
	0x031E2A40 LDR X8, [X8 + 0xB8]
	0x031E2A44 STR X20, [X8 + 0x1E0]
	0x031E2A48 CBZ X19, 0x31E2A70
	0x031E2A4C ADRP X8, 0xF3E000
	0x031E2A50 LDR X8, [X8 + 0x848]
	0x031E2A54 MOV X0, X19
	0x031E2A58 MOV X1, X20
	0x031E2A5C LDP X20, X19, [X31 + 0x20]
	0x031E2A60 LDR X2, [X8]
	0x031E2A64 LDP X22, X21, [X31 + 0x10]
	0x031E2A68 LDR X30, [X31], #0x30
	0x031E2A6C B 0x21311DC
	0x031E2A70 BL 0x1C16F20
	0x031E2A74 STR D8, [X31 - 0x20]!

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FB000
	009 Move X22, 0xF3F000
	010 Move W8, [X20+266]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF3F000
	018 Move X0, [X0+1896]
	019 Call 0x1C17CF4
	020 Move X0, 0xF3F000
	021 Move X0, [X0+1904]
	022 Call 0x1C17CF4
	023 Move X0, 0xF3F000
	024 Move X0, [X0+1912]
	025 Call 0x1C17CF4
	026 Move X0, 0xF3F000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF17000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+266], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF3F000
	042 Move X23, 0xF17000
	043 Move X20, [X8+376]
	044 Move X24, [X24+1896]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF3F000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1904]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF3F000
	060 Move X8, [X8+1912]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Quaternion, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+376], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<UnityEngine.Quaternion> value)

Disassembly:
	0x031E2A78 STR X30, [X31 + 0x8]
	0x031E2A7C STP X20, X19, [X31 + 0x10]
	0x031E2A80 ADRP X20, 0x11FA000
	0x031E2A84 LDRB W8, [X20 + 0x11A]
	0x031E2A88 MOV X19, X0
	0x031E2A8C TBNZ X8, 0x0, 0x31E2AA4
	0x031E2A90 ADRP X0, 0xF39000
	0x031E2A94 LDR X0, [X0 + 0x5F0]
	0x031E2A98 BL 0x1C16CF4
	0x031E2A9C MOVZ W8, 0x1
	0x031E2AA0 STRB W8, [X20 + 0x11A]
	0x031E2AA4 CBZ X19, 0x31E2ADC
	0x031E2AA8 ADRP X8, 0xF39000
	0x031E2AAC LDR X8, [X8 + 0x5F0]
	0x031E2AB0 LDR V8, [X19 + 0x28]
	0x031E2AB4 LDR X0, [X8]
	0x031E2AB8 LDR W8, [X0 + 0xE0]
	0x031E2ABC CBNZ W8, 0x31E2AC4
	0x031E2AC0 BL 0x1C16DFC
	0x031E2AC4 LDP X20, X19, [X31 + 0x10]
	0x031E2AC8 LDR X30, [X31 + 0x8]
	0x031E2ACC MOV V0.16B, V8.16B
	0x031E2AD0 MOV X0, X31
	0x031E2AD4 LDR V8, [X31], #0x20
	0x031E2AD8 B 0x33D8F70
	0x031E2ADC BL 0x1C16F20
	0x031E2AE0 STR X30, [X31 - 0x30]!
	0x031E2AE4 STP X22, X21, [X31 + 0x10]
	0x031E2AE8 STP X20, X19, [X31 + 0x20]
	0x031E2AEC ADRP X20, 0x11FA000
	0x031E2AF0 LDRB W8, [X20 + 0x11B]
	0x031E2AF4 MOV X19, X0
	0x031E2AF8 TBNZ X8, 0x0, 0x31E2B40
	0x031E2AFC ADRP X0, 0xF3E000
	0x031E2B00 LDR X0, [X0 + 0x860]
	0x031E2B04 BL 0x1C16CF4
	0x031E2B08 ADRP X0, 0xF3E000
	0x031E2B0C LDR X0, [X0 + 0x868]
	0x031E2B10 BL 0x1C16CF4
	0x031E2B14 ADRP X0, 0xF3E000
	0x031E2B18 LDR X0, [X0 + 0x498]
	0x031E2B1C BL 0x1C16CF4
	0x031E2B20 ADRP X0, 0xF3E000
	0x031E2B24 LDR X0, [X0 + 0x870]
	0x031E2B28 BL 0x1C16CF4
	0x031E2B2C ADRP X0, 0xF3E000
	0x031E2B30 LDR X0, [X0 + 0x260]
	0x031E2B34 BL 0x1C16CF4
	0x031E2B38 MOVZ W8, 0x1
	0x031E2B3C STRB W8, [X20 + 0x11B]
	0x031E2B40 CBZ X19, 0x31E2BFC
	0x031E2B44 ADRP X22, 0xF3E000
	0x031E2B48 LDR X22, [X22 + 0x260]
	0x031E2B4C LDR X19, [X19 + 0x30]
	0x031E2B50 LDR X0, [X22]
	0x031E2B54 LDR W8, [X0 + 0xE0]
	0x031E2B58 CBNZ W8, 0x31E2B64
	0x031E2B5C BL 0x1C16DFC
	0x031E2B60 LDR X0, [X22]
	0x031E2B64 LDR X8, [X0 + 0xB8]
	0x031E2B68 LDR X20, [X8 + 0x1E8]
	0x031E2B6C CBNZ X20, 0x31E2BC0
	0x031E2B70 LDR W8, [X0 + 0xE0]
	0x031E2B74 CBNZ W8, 0x31E2B80
	0x031E2B78 BL 0x1C16DFC
	0x031E2B7C LDR X0, [X22]
	0x031E2B80 ADRP X9, 0xF3E000
	0x031E2B84 LDR X8, [X0 + 0xB8]
	0x031E2B88 LDR X9, [X9 + 0x860]
	0x031E2B8C LDR X21, [X8]
	0x031E2B90 LDR X0, [X9]
	0x031E2B94 BL 0x1C16F10
	0x031E2B98 ADRP X8, 0xF3E000
	0x031E2B9C LDR X8, [X8 + 0x870]
	0x031E2BA0 MOV X1, X21
	0x031E2BA4 MOV X3, X31
	0x031E2BA8 MOV X20, X0
	0x031E2BAC LDR X2, [X8]
	0x031E2BB0 BL 0x29A865C
	0x031E2BB4 LDR X8, [X22]
	0x031E2BB8 LDR X8, [X8 + 0xB8]
	0x031E2BBC STR X20, [X8 + 0x1E8]
	0x031E2BC0 CBZ X19, 0x31E2BFC
	0x031E2BC4 ADRP X8, 0xF3E000
	0x031E2BC8 LDR X8, [X8 + 0x868]
	0x031E2BCC MOV X0, X19
	0x031E2BD0 MOV X1, X20
	0x031E2BD4 LDR X2, [X8]
	0x031E2BD8 BL 0x21310C8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FB000
	009 Move W8, [X20+267]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF3F000
	016 Move X0, [X0+1896]
	017 Call 0x1C17CF4
	018 Move X0, 0xF3F000
	019 Move X0, [X0+1904]
	020 Call 0x1C17CF4
	021 Move X0, 0xF3F000
	022 Move X0, [X0+1920]
	023 Call 0x1C17CF4
	024 Move X0, 0xF3F000
	025 Move X0, [X0+1928]
	026 Call 0x1C17CF4
	027 Move X0, 0xF3F000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF17000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+267], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF3F000
	038 Move X8, [X8+1920]
	039 Move X22, 0xF3F000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Quaternion>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF3F000
	054 Move X23, 0xF17000
	055 Move X20, [X9+384]
	056 Move X24, [X24+1896]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF3F000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1904]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF3F000
	073 Move X8, [X8+1928]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Quaternion, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+384], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(UnityEngine.Bounds value)

Disassembly:
	0x031E2BDC CBZ X0, 0x31E2BFC
	0x031E2BE0 ADRP X8, 0xF3E000
	0x031E2BE4 LDR X8, [X8 + 0x498]
	0x031E2BE8 LDP X20, X19, [X31 + 0x20]
	0x031E2BEC LDP X22, X21, [X31 + 0x10]
	0x031E2BF0 LDR X1, [X8]
	0x031E2BF4 LDR X30, [X31], #0x30
	0x031E2BF8 B 0x2FAE0E8
	0x031E2BFC BL 0x1C16F20
	0x031E2C00 STR X30, [X31 - 0x30]!
	0x031E2C04 STP X22, X21, [X31 + 0x10]
	0x031E2C08 STP X20, X19, [X31 + 0x20]
	0x031E2C0C ADRP X20, 0x11FA000
	0x031E2C10 LDRB W8, [X20 + 0x11C]
	0x031E2C14 MOV X19, X0
	0x031E2C18 TBNZ X8, 0x0, 0x31E2C54
	0x031E2C1C ADRP X0, 0xF3E000
	0x031E2C20 LDR X0, [X0 + 0x860]
	0x031E2C24 BL 0x1C16CF4
	0x031E2C28 ADRP X0, 0xF3E000
	0x031E2C2C LDR X0, [X0 + 0x868]
	0x031E2C30 BL 0x1C16CF4
	0x031E2C34 ADRP X0, 0xF3E000
	0x031E2C38 LDR X0, [X0 + 0x878]
	0x031E2C3C BL 0x1C16CF4
	0x031E2C40 ADRP X0, 0xF3E000
	0x031E2C44 LDR X0, [X0 + 0x260]
	0x031E2C48 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x11FB000
	007 Move X20, 0xF17000
	008 Move W8, [X21+268]
	009 Move X20, [X20+1864]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF17000
	016 Move X0, [X0+1864]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+268], W8
	020 Move X8, [X19+16]
	021 Move V0, [X19]
	022 Move X0, [X20]
	023 Move [X31+16], X8
	024 Move [X31], V0
	025 Call 0x1C17F10
	026 Add X1, X31, 0
	027 Move X19, X0
	028 Call Value..ctor, X0, X1
	029 Move X0, X19
	030 Move X20, [X31+48]
	031 Move X19, [X31+56]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Add X31, X31, 64
	035 Return X0

Method: mixpanel.Value op_Implicit(UnityEngine.Bounds[] value)

Disassembly:
	0x031E2C4C MOVZ W8, 0x1
	0x031E2C50 STRB W8, [X20 + 0x11C]
	0x031E2C54 CBZ X19, 0x31E2CFC
	0x031E2C58 ADRP X22, 0xF3E000
	0x031E2C5C LDR X22, [X22 + 0x260]
	0x031E2C60 LDR X19, [X19 + 0x30]
	0x031E2C64 LDR X0, [X22]
	0x031E2C68 LDR W8, [X0 + 0xE0]
	0x031E2C6C CBNZ W8, 0x31E2C78
	0x031E2C70 BL 0x1C16DFC
	0x031E2C74 LDR X0, [X22]
	0x031E2C78 LDR X8, [X0 + 0xB8]
	0x031E2C7C LDR X20, [X8 + 0x1F0]
	0x031E2C80 CBNZ X20, 0x31E2CD4
	0x031E2C84 LDR W8, [X0 + 0xE0]
	0x031E2C88 CBNZ W8, 0x31E2C94
	0x031E2C8C BL 0x1C16DFC
	0x031E2C90 LDR X0, [X22]
	0x031E2C94 ADRP X9, 0xF3E000
	0x031E2C98 LDR X8, [X0 + 0xB8]
	0x031E2C9C LDR X9, [X9 + 0x860]
	0x031E2CA0 LDR X21, [X8]
	0x031E2CA4 LDR X0, [X9]
	0x031E2CA8 BL 0x1C16F10
	0x031E2CAC ADRP X8, 0xF3E000
	0x031E2CB0 LDR X8, [X8 + 0x878]
	0x031E2CB4 MOV X1, X21
	0x031E2CB8 MOV X3, X31
	0x031E2CBC MOV X20, X0
	0x031E2CC0 LDR X2, [X8]
	0x031E2CC4 BL 0x29A865C
	0x031E2CC8 LDR X8, [X22]
	0x031E2CCC LDR X8, [X8 + 0xB8]
	0x031E2CD0 STR X20, [X8 + 0x1F0]
	0x031E2CD4 CBZ X19, 0x31E2CFC
	0x031E2CD8 ADRP X8, 0xF3E000
	0x031E2CDC LDR X8, [X8 + 0x868]
	0x031E2CE0 MOV X0, X19
	0x031E2CE4 MOV X1, X20
	0x031E2CE8 LDP X20, X19, [X31 + 0x20]
	0x031E2CEC LDR X2, [X8]
	0x031E2CF0 LDP X22, X21, [X31 + 0x10]
	0x031E2CF4 LDR X30, [X31], #0x30
	0x031E2CF8 B 0x21310C8
	0x031E2CFC BL 0x1C16F20
	0x031E2D00 STR X30, [X31 - 0x10]!
	0x031E2D04 CBZ X0, 0x31E2D28
	0x031E2D08 LDR V0, [X0 + 0x28]
	0x031E2D0C MOVZ X8, 0x7FF00000
	0x031E2D10 FMOV D1, X8
	0x031E2D14 FCVTZS W8, D0
	0x031E2D18 FCMP D0, D1
	0x031E2D1C CSEL W0, W31, W8, EQ
	0x031E2D20 LDR X30, [X31], #0x10
	0x031E2D24 RET
	0x031E2D28 BL 0x1C16F20
	0x031E2D2C STR X30, [X31 - 0x30]!
	0x031E2D30 STP X22, X21, [X31 + 0x10]
	0x031E2D34 STP X20, X19, [X31 + 0x20]
	0x031E2D38 ADRP X20, 0x11FA000
	0x031E2D3C LDRB W8, [X20 + 0x11D]
	0x031E2D40 MOV X19, X0
	0x031E2D44 TBNZ X8, 0x0, 0x31E2D8C
	0x031E2D48 ADRP X0, 0xF3E000
	0x031E2D4C LDR X0, [X0 + 0x880]
	0x031E2D50 BL 0x1C16CF4
	0x031E2D54 ADRP X0, 0xF3E000
	0x031E2D58 LDR X0, [X0 + 0x888]
	0x031E2D5C BL 0x1C16CF4
	0x031E2D60 ADRP X0, 0xF3E000
	0x031E2D64 LDR X0, [X0 + 0x4C0]
	0x031E2D68 BL 0x1C16CF4
	0x031E2D6C ADRP X0, 0xF3E000
	0x031E2D70 LDR X0, [X0 + 0x890]
	0x031E2D74 BL 0x1C16CF4
	0x031E2D78 ADRP X0, 0xF3E000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FB000
	009 Move X22, 0xF3F000
	010 Move W8, [X20+269]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF3F000
	018 Move X0, [X0+1936]
	019 Call 0x1C17CF4
	020 Move X0, 0xF3F000
	021 Move X0, [X0+1944]
	022 Call 0x1C17CF4
	023 Move X0, 0xF3F000
	024 Move X0, [X0+1952]
	025 Call 0x1C17CF4
	026 Move X0, 0xF3F000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF17000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+269], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF3F000
	042 Move X23, 0xF17000
	043 Move X20, [X8+392]
	044 Move X24, [X24+1936]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF3F000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1944]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF3F000
	060 Move X8, [X8+1952]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Bounds, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+392], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<UnityEngine.Bounds> value)

Disassembly:
	0x031E2D7C LDR X0, [X0 + 0x260]
	0x031E2D80 BL 0x1C16CF4
	0x031E2D84 MOVZ W8, 0x1
	0x031E2D88 STRB W8, [X20 + 0x11D]
	0x031E2D8C CBZ X19, 0x31E2E48
	0x031E2D90 ADRP X22, 0xF3E000
	0x031E2D94 LDR X22, [X22 + 0x260]
	0x031E2D98 LDR X19, [X19 + 0x30]
	0x031E2D9C LDR X0, [X22]
	0x031E2DA0 LDR W8, [X0 + 0xE0]
	0x031E2DA4 CBNZ W8, 0x31E2DB0
	0x031E2DA8 BL 0x1C16DFC
	0x031E2DAC LDR X0, [X22]
	0x031E2DB0 LDR X8, [X0 + 0xB8]
	0x031E2DB4 LDR X20, [X8 + 0x1F8]
	0x031E2DB8 CBNZ X20, 0x31E2E0C
	0x031E2DBC LDR W8, [X0 + 0xE0]
	0x031E2DC0 CBNZ W8, 0x31E2DCC
	0x031E2DC4 BL 0x1C16DFC
	0x031E2DC8 LDR X0, [X22]
	0x031E2DCC ADRP X9, 0xF3E000
	0x031E2DD0 LDR X8, [X0 + 0xB8]
	0x031E2DD4 LDR X9, [X9 + 0x880]
	0x031E2DD8 LDR X21, [X8]
	0x031E2DDC LDR X0, [X9]
	0x031E2DE0 BL 0x1C16F10
	0x031E2DE4 ADRP X8, 0xF3E000
	0x031E2DE8 LDR X8, [X8 + 0x890]
	0x031E2DEC MOV X1, X21
	0x031E2DF0 MOV X3, X31
	0x031E2DF4 MOV X20, X0
	0x031E2DF8 LDR X2, [X8]
	0x031E2DFC BL 0x29A8998
	0x031E2E00 LDR X8, [X22]
	0x031E2E04 LDR X8, [X8 + 0xB8]
	0x031E2E08 STR X20, [X8 + 0x1F8]
	0x031E2E0C CBZ X19, 0x31E2E48
	0x031E2E10 ADRP X8, 0xF3E000
	0x031E2E14 LDR X8, [X8 + 0x888]
	0x031E2E18 MOV X0, X19
	0x031E2E1C MOV X1, X20
	0x031E2E20 LDR X2, [X8]
	0x031E2E24 BL 0x21313FC
	0x031E2E28 CBZ X0, 0x31E2E48
	0x031E2E2C ADRP X8, 0xF3E000
	0x031E2E30 LDR X8, [X8 + 0x4C0]
	0x031E2E34 LDP X20, X19, [X31 + 0x20]
	0x031E2E38 LDP X22, X21, [X31 + 0x10]
	0x031E2E3C LDR X1, [X8]
	0x031E2E40 LDR X30, [X31], #0x30
	0x031E2E44 B 0x2FDBA5C
	0x031E2E48 BL 0x1C16F20
	0x031E2E4C STR X30, [X31 - 0x30]!
	0x031E2E50 STP X22, X21, [X31 + 0x10]
	0x031E2E54 STP X20, X19, [X31 + 0x20]
	0x031E2E58 ADRP X20, 0x11FA000
	0x031E2E5C LDRB W8, [X20 + 0x11E]
	0x031E2E60 MOV X19, X0
	0x031E2E64 TBNZ X8, 0x0, 0x31E2EA0
	0x031E2E68 ADRP X0, 0xF3E000
	0x031E2E6C LDR X0, [X0 + 0x880]
	0x031E2E70 BL 0x1C16CF4
	0x031E2E74 ADRP X0, 0xF3E000
	0x031E2E78 LDR X0, [X0 + 0x888]
	0x031E2E7C BL 0x1C16CF4
	0x031E2E80 ADRP X0, 0xF3E000
	0x031E2E84 LDR X0, [X0 + 0x898]
	0x031E2E88 BL 0x1C16CF4
	0x031E2E8C ADRP X0, 0xF3E000
	0x031E2E90 LDR X0, [X0 + 0x260]
	0x031E2E94 BL 0x1C16CF4
	0x031E2E98 MOVZ W8, 0x1
	0x031E2E9C STRB W8, [X20 + 0x11E]
	0x031E2EA0 CBZ X19, 0x31E2F48
	0x031E2EA4 ADRP X22, 0xF3E000
	0x031E2EA8 LDR X22, [X22 + 0x260]
	0x031E2EAC LDR X19, [X19 + 0x30]
	0x031E2EB0 LDR X0, [X22]
	0x031E2EB4 LDR W8, [X0 + 0xE0]
	0x031E2EB8 CBNZ W8, 0x31E2EC4
	0x031E2EBC BL 0x1C16DFC
	0x031E2EC0 LDR X0, [X22]
	0x031E2EC4 LDR X8, [X0 + 0xB8]
	0x031E2EC8 LDR X20, [X8 + 0x200]
	0x031E2ECC CBNZ X20, 0x31E2F20
	0x031E2ED0 LDR W8, [X0 + 0xE0]
	0x031E2ED4 CBNZ W8, 0x31E2EE0
	0x031E2ED8 BL 0x1C16DFC
	0x031E2EDC LDR X0, [X22]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FB000
	009 Move W8, [X20+270]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF3F000
	016 Move X0, [X0+1936]
	017 Call 0x1C17CF4
	018 Move X0, 0xF3F000
	019 Move X0, [X0+1944]
	020 Call 0x1C17CF4
	021 Move X0, 0xF3F000
	022 Move X0, [X0+1960]
	023 Call 0x1C17CF4
	024 Move X0, 0xF3F000
	025 Move X0, [X0+1968]
	026 Call 0x1C17CF4
	027 Move X0, 0xF3F000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF17000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+270], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF3F000
	038 Move X8, [X8+1960]
	039 Move X22, 0xF3F000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Bounds>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF3F000
	054 Move X23, 0xF17000
	055 Move X20, [X9+400]
	056 Move X24, [X24+1936]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF3F000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1944]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF3F000
	073 Move X8, [X8+1968]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Bounds, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+400], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: mixpanel.Value op_Implicit(UnityEngine.Rect value)

Disassembly:
	0x031E2EE0 ADRP X9, 0xF3E000
	0x031E2EE4 LDR X8, [X0 + 0xB8]
	0x031E2EE8 LDR X9, [X9 + 0x880]
	0x031E2EEC LDR X21, [X8]
	0x031E2EF0 LDR X0, [X9]
	0x031E2EF4 BL 0x1C16F10
	0x031E2EF8 ADRP X8, 0xF3E000
	0x031E2EFC LDR X8, [X8 + 0x898]
	0x031E2F00 MOV X1, X21
	0x031E2F04 MOV X3, X31
	0x031E2F08 MOV X20, X0
	0x031E2F0C LDR X2, [X8]
	0x031E2F10 BL 0x29A8998
	0x031E2F14 LDR X8, [X22]
	0x031E2F18 LDR X8, [X8 + 0xB8]
	0x031E2F1C STR X20, [X8 + 0x200]
	0x031E2F20 CBZ X19, 0x31E2F48
	0x031E2F24 ADRP X8, 0xF3E000
	0x031E2F28 LDR X8, [X8 + 0x888]
	0x031E2F2C MOV X0, X19
	0x031E2F30 MOV X1, X20
	0x031E2F34 LDP X20, X19, [X31 + 0x20]
	0x031E2F38 LDR X2, [X8]
	0x031E2F3C LDP X22, X21, [X31 + 0x10]
	0x031E2F40 LDR X30, [X31], #0x30
	0x031E2F44 B 0x21313FC
	0x031E2F48 BL 0x1C16F20
	0x031E2F4C STR X30, [X31 - 0x10]!
	0x031E2F50 CBZ X0, 0x31E2F78
	0x031E2F54 LDR V0, [X0 + 0x28]
	0x031E2F58 MOVZ X8, 0x7FF00000
	0x031E2F5C FMOV D1, X8

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0x11FB000
	009 Move X20, 0xF17000
	010 Move W8, [X19+271]
	011 Move X20, [X20+1864]
	012 Move V8, V3
	013 Move V9, V2
	014 Move V10, V1
	015 Move V11, V0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xF17000
	021 Move X0, [X0+1864]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+271], W8
	025 Move X0, [X20]
	026 Call 0x1C17F10
	027 Move V0, V11
	028 Move V1, V10
	029 Move V2, V9
	030 Move V3, V8
	031 Move X19, X0
	032 Call Value..ctor, X0, X1
	033 Move X0, X19
	034 Move X20, [X31+48]
	035 Move X19, [X31+56]
	036 Move X30, [X31+32]
	037 Move D9, [X31+16]
	038 Move D8, [X31+24]
	039 Move D11, [X31+64]
	040 Move D10, [X31+72]
	041 Return X0

Method: mixpanel.Value op_Implicit(UnityEngine.Rect[] value)

Disassembly:
	0x031E2F60 MOVZ W9, 0x80000000
	0x031E2F64 FCVTZS W8, D0
	0x031E2F68 FCMP D0, D1
	0x031E2F6C CSEL W0, W9, W8, EQ
	0x031E2F70 LDR X30, [X31], #0x10
	0x031E2F74 RET
	0x031E2F78 BL 0x1C16F20
	0x031E2F7C STR X30, [X31 - 0x30]!
	0x031E2F80 STP X22, X21, [X31 + 0x10]
	0x031E2F84 STP X20, X19, [X31 + 0x20]
	0x031E2F88 ADRP X20, 0x11FA000
	0x031E2F8C LDRB W8, [X20 + 0x11F]
	0x031E2F90 MOV X19, X0
	0x031E2F94 TBNZ X8, 0x0, 0x31E2FDC
	0x031E2F98 ADRP X0, 0xF3E000
	0x031E2F9C LDR X0, [X0 + 0x8A0]
	0x031E2FA0 BL 0x1C16CF4
	0x031E2FA4 ADRP X0, 0xF3E000
	0x031E2FA8 LDR X0, [X0 + 0x8A8]
	0x031E2FAC BL 0x1C16CF4
	0x031E2FB0 ADRP X0, 0xF12000
	0x031E2FB4 LDR X0, [X0 + 0xE18]
	0x031E2FB8 BL 0x1C16CF4
	0x031E2FBC ADRP X0, 0xF3E000
	0x031E2FC0 LDR X0, [X0 + 0x8B0]
	0x031E2FC4 BL 0x1C16CF4
	0x031E2FC8 ADRP X0, 0xF3E000
	0x031E2FCC LDR X0, [X0 + 0x260]
	0x031E2FD0 BL 0x1C16CF4
	0x031E2FD4 MOVZ W8, 0x1
	0x031E2FD8 STRB W8, [X20 + 0x11F]
	0x031E2FDC CBZ X19, 0x31E3098
	0x031E2FE0 ADRP X22, 0xF3E000
	0x031E2FE4 LDR X22, [X22 + 0x260]
	0x031E2FE8 LDR X19, [X19 + 0x30]
	0x031E2FEC LDR X0, [X22]
	0x031E2FF0 LDR W8, [X0 + 0xE0]
	0x031E2FF4 CBNZ W8, 0x31E3000
	0x031E2FF8 BL 0x1C16DFC
	0x031E2FFC LDR X0, [X22]
	0x031E3000 LDR X8, [X0 + 0xB8]
	0x031E3004 LDR X20, [X8 + 0x208]
	0x031E3008 CBNZ X20, 0x31E305C
	0x031E300C LDR W8, [X0 + 0xE0]
	0x031E3010 CBNZ W8, 0x31E301C
	0x031E3014 BL 0x1C16DFC
	0x031E3018 LDR X0, [X22]
	0x031E301C ADRP X9, 0xF3D000
	0x031E3020 LDR X8, [X0 + 0xB8]
	0x031E3024 LDR X9, [X9 + 0x8A0]
	0x031E3028 LDR X21, [X8]
	0x031E302C LDR X0, [X9]
	0x031E3030 BL 0x1C16F10
	0x031E3034 ADRP X8, 0xF3D000
	0x031E3038 LDR X8, [X8 + 0x8B0]
	0x031E303C MOV X1, X21
	0x031E3040 MOV X3, X31
	0x031E3044 MOV X20, X0
	0x031E3048 LDR X2, [X8]
	0x031E304C BL 0x29A8AAC
	0x031E3050 LDR X8, [X22]
	0x031E3054 LDR X8, [X8 + 0xB8]
	0x031E3058 STR X20, [X8 + 0x208]
	0x031E305C CBZ X19, 0x31E3098
	0x031E3060 ADRP X8, 0xF3D000
	0x031E3064 LDR X8, [X8 + 0x8A8]
	0x031E3068 MOV X0, X19
	0x031E306C MOV X1, X20
	0x031E3070 LDR X2, [X8]
	0x031E3074 BL 0x2131500
	0x031E3078 CBZ X0, 0x31E3098
	0x031E307C ADRP X8, 0xF11000
	0x031E3080 LDR X8, [X8 + 0xE18]
	0x031E3084 LDP X20, X19, [X31 + 0x20]
	0x031E3088 LDP X22, X21, [X31 + 0x10]
	0x031E308C LDR X1, [X8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FB000
	009 Move X22, 0xF3F000
	010 Move W8, [X20+272]
	011 Move X22, [X22+608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF3F000
	018 Move X0, [X0+1976]
	019 Call 0x1C17CF4
	020 Move X0, 0xF3F000
	021 Move X0, [X0+1984]
	022 Call 0x1C17CF4
	023 Move X0, 0xF3F000
	024 Move X0, [X0+1992]
	025 Call 0x1C17CF4
	026 Move X0, 0xF3F000
	027 Move X0, [X0+608]
	028 Call 0x1C17CF4
	029 Move X0, 0xF17000
	030 Move X0, [X0+1864]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+272], W8
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move X24, 0xF3F000
	042 Move X23, 0xF17000
	043 Move X20, [X8+408]
	044 Move X24, [X24+1976]
	045 Move X23, [X23+1864]
	046 Compare X20, 0
	047 JumpIfNotEqual {69}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X9, 0xF3E000
	054 Move X8, [X0+184]
	055 Move X9, [X9+1984]
	056 Move X21, [X8]
	057 Move X0, [X9]
	058 Call 0x1C17F10
	059 Move X8, 0xF3E000
	060 Move X8, [X8+1992]
	061 Move X1, X21
	062 Move X3, X31
	063 Move X20, X0
	064 Move X2, [X8]
	065 Call Converter`2<Rect, Object>..ctor, X0, X1, X2
	066 Move X8, [X22]
	067 Move X8, [X8+184]
	068 Move [X8+408], X20
	069 Move X2, [X24]
	070 Move X0, X19
	071 Move X1, X20
	072 Call Array.ConvertAll, X0, X1
	073 Move X8, [X23]
	074 Move X19, X0
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X1, X19
	078 Move X20, X0
	079 Call Value..ctor, X0, X1
	080 Move X0, X20
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0

Method: mixpanel.Value op_Implicit(System.Collections.Generic.List`1<UnityEngine.Rect> value)

Disassembly:
	0x031E3090 LDR X30, [X31], #0x30
	0x031E3094 B 0x2FDE4C8
	0x031E3098 BL 0x1C16F20
	0x031E309C STR X30, [X31 - 0x30]!
	0x031E30A0 STP X22, X21, [X31 + 0x10]
	0x031E30A4 STP X20, X19, [X31 + 0x20]
	0x031E30A8 ADRP X20, 0x11F9000
	0x031E30AC LDRB W8, [X20 + 0x120]
	0x031E30B0 MOV X19, X0
	0x031E30B4 TBNZ X8, 0x0, 0x31E30F0
	0x031E30B8 ADRP X0, 0xF3D000
	0x031E30BC LDR X0, [X0 + 0x8A0]
	0x031E30C0 BL 0x1C16CF4
	0x031E30C4 ADRP X0, 0xF3D000
	0x031E30C8 LDR X0, [X0 + 0x8A8]
	0x031E30CC BL 0x1C16CF4
	0x031E30D0 ADRP X0, 0xF3D000
	0x031E30D4 LDR X0, [X0 + 0x8B8]
	0x031E30D8 BL 0x1C16CF4
	0x031E30DC ADRP X0, 0xF3D000
	0x031E30E0 LDR X0, [X0 + 0x260]
	0x031E30E4 BL 0x1C16CF4
	0x031E30E8 MOVZ W8, 0x1
	0x031E30EC STRB W8, [X20 + 0x120]
	0x031E30F0 CBZ X19, 0x31E3198
	0x031E30F4 ADRP X22, 0xF3D000
	0x031E30F8 LDR X22, [X22 + 0x260]
	0x031E30FC LDR X19, [X19 + 0x30]
	0x031E3100 LDR X0, [X22]
	0x031E3104 LDR W8, [X0 + 0xE0]
	0x031E3108 CBNZ W8, 0x31E3114
	0x031E310C BL 0x1C16DFC
	0x031E3110 LDR X0, [X22]
	0x031E3114 LDR X8, [X0 + 0xB8]
	0x031E3118 LDR X20, [X8 + 0x210]
	0x031E311C CBNZ X20, 0x31E3170
	0x031E3120 LDR W8, [X0 + 0xE0]
	0x031E3124 CBNZ W8, 0x31E3130
	0x031E3128 BL 0x1C16DFC
	0x031E312C LDR X0, [X22]
	0x031E3130 ADRP X9, 0xF3D000
	0x031E3134 LDR X8, [X0 + 0xB8]
	0x031E3138 LDR X9, [X9 + 0x8A0]
	0x031E313C LDR X21, [X8]
	0x031E3140 LDR X0, [X9]
	0x031E3144 BL 0x1C16F10
	0x031E3148 ADRP X8, 0xF3D000
	0x031E314C LDR X8, [X8 + 0x8B8]
	0x031E3150 MOV X1, X21
	0x031E3154 MOV X3, X31
	0x031E3158 MOV X20, X0
	0x031E315C LDR X2, [X8]
	0x031E3160 BL 0x29A8AAC
	0x031E3164 LDR X8, [X22]
	0x031E3168 LDR X8, [X8 + 0xB8]
	0x031E316C STR X20, [X8 + 0x210]
	0x031E3170 CBZ X19, 0x31E3198
	0x031E3174 ADRP X8, 0xF3D000
	0x031E3178 LDR X8, [X8 + 0x8A8]
	0x031E317C MOV X0, X19
	0x031E3180 MOV X1, X20
	0x031E3184 LDP X20, X19, [X31 + 0x20]
	0x031E3188 LDR X2, [X8]
	0x031E318C LDP X22, X21, [X31 + 0x10]
	0x031E3190 LDR X30, [X31], #0x30
	0x031E3194 B 0x2131500
	0x031E3198 BL 0x1C16F20
	0x031E319C STR X30, [X31 - 0x10]!
	0x031E31A0 CBZ X0, 0x31E31C8
	0x031E31A4 LDR V0, [X0 + 0x28]
	0x031E31A8 MOVZ X8, 0x7FF00000
	0x031E31AC FMOV D1, X8
	0x031E31B0 MOVZ X9, 0x80000000
	0x031E31B4 FCVTZS X8, D0
	0x031E31B8 FCMP D0, D1
	0x031E31BC CSEL X0, X9, X8, EQ
	0x031E31C0 LDR X30, [X31], #0x10
	0x031E31C4 RET
	0x031E31C8 BL 0x1C16F20
	0x031E31CC STR X30, [X31 - 0x30]!
	0x031E31D0 STP X22, X21, [X31 + 0x10]
	0x031E31D4 STP X20, X19, [X31 + 0x20]
	0x031E31D8 ADRP X20, 0x11F9000
	0x031E31DC LDRB W8, [X20 + 0x121]
	0x031E31E0 MOV X19, X0
	0x031E31E4 TBNZ X8, 0x0, 0x31E322C
	0x031E31E8 ADRP X0, 0xF3D000
	0x031E31EC LDR X0, [X0 + 0x8C0]
	0x031E31F0 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11FA000
	009 Move W8, [X20+273]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0xF3E000
	016 Move X0, [X0+1976]
	017 Call 0x1C17CF4
	018 Move X0, 0xF3E000
	019 Move X0, [X0+1984]
	020 Call 0x1C17CF4
	021 Move X0, 0xF3E000
	022 Move X0, [X0+2000]
	023 Call 0x1C17CF4
	024 Move X0, 0xF3E000
	025 Move X0, [X0+2008]
	026 Call 0x1C17CF4
	027 Move X0, 0xF3E000
	028 Move X0, [X0+608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF16000
	031 Move X0, [X0+1864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+273], W8
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move X8, 0xF3E000
	038 Move X8, [X8+2000]
	039 Move X22, 0xF3E000
	040 Move X0, X19
	041 Move X1, [X8]
	042 Move X22, [X22+608]
	043 Call List`1<Rect>.ToArray, X0
	044 Move X8, [X22]
	045 Move X19, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X9, [X8+184]
	053 Move X24, 0xF3E000
	054 Move X23, 0xF16000
	055 Move X20, [X9+416]
	056 Move X24, [X24+1976]
	057 Move X23, [X23+1864]
	058 Compare X20, 0
	059 JumpIfNotEqual {82}
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {66}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X22]
	066 Move X9, 0xF3E000
	067 Move X8, [X8+184]
	068 Move X9, [X9+1984]
	069 Move X21, [X8]
	070 Move X0, [X9]
	071 Call 0x1C17F10
	072 Move X8, 0xF3E000
	073 Move X8, [X8+2008]
	074 Move X1, X21
	075 Move X3, X31
	076 Move X20, X0
	077 Move X2, [X8]
	078 Call Converter`2<Rect, Object>..ctor, X0, X1, X2
	079 Move X8, [X22]
	080 Move X8, [X8+184]
	081 Move [X8+416], X20
	082 Move X2, [X24]
	083 Move X0, X19
	084 Move X1, X20
	085 Call Array.ConvertAll, X0, X1
	086 Move X8, [X23]
	087 Move X19, X0
	088 Move X0, X8
	089 Call 0x1C17F10
	090 Move X1, X19
	091 Move X20, X0
	092 Call Value..ctor, X0, X1
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Return X0
	102 Call 0x1C17F20

Method: System.String op_Implicit(mixpanel.Value value)

Disassembly:
	0x031D4740 BL 0x1C16D08
	0x031D4744 MOV X1, X0
	0x031D4748 MOV X0, X19
	0x031D474C MOV X2, X31
	0x031D4750 BL 0x3314A68
	0x031D4754 ADRP X0, 0xF4C000

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {7}
	004 Move X0, [X0+24]
	005 Move X30, [X31+16]
	006 Return X0
	007 Call 0x1C17F20

Method: System.String[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E31F4 ADRP X0, 0xF3D000
	0x031E31F8 LDR X0, [X0 + 0x8C8]
	0x031E31FC BL 0x1C16CF4
	0x031E3200 ADRP X0, 0xF3D000
	0x031E3204 LDR X0, [X0 + 0x508]
	0x031E3208 BL 0x1C16CF4
	0x031E320C ADRP X0, 0xF3D000
	0x031E3210 LDR X0, [X0 + 0x8D0]
	0x031E3214 BL 0x1C16CF4
	0x031E3218 ADRP X0, 0xF3D000
	0x031E321C LDR X0, [X0 + 0x260]
	0x031E3220 BL 0x1C16CF4
	0x031E3224 MOVZ W8, 0x1
	0x031E3228 STRB W8, [X20 + 0x121]
	0x031E322C CBZ X19, 0x31E32E8
	0x031E3230 ADRP X22, 0xF3D000
	0x031E3234 LDR X22, [X22 + 0x260]
	0x031E3238 LDR X19, [X19 + 0x30]
	0x031E323C LDR X0, [X22]
	0x031E3240 LDR W8, [X0 + 0xE0]
	0x031E3244 CBNZ W8, 0x31E3250
	0x031E3248 BL 0x1C16DFC
	0x031E324C LDR X0, [X22]
	0x031E3250 LDR X8, [X0 + 0xB8]
	0x031E3254 LDR X20, [X8 + 0x218]
	0x031E3258 CBNZ X20, 0x31E32AC
	0x031E325C LDR W8, [X0 + 0xE0]
	0x031E3260 CBNZ W8, 0x31E326C
	0x031E3264 BL 0x1C16DFC
	0x031E3268 LDR X0, [X22]
	0x031E326C ADRP X9, 0xF3D000
	0x031E3270 LDR X8, [X0 + 0xB8]
	0x031E3274 LDR X9, [X9 + 0x8C0]
	0x031E3278 LDR X21, [X8]
	0x031E327C LDR X0, [X9]
	0x031E3280 BL 0x1C16F10
	0x031E3284 ADRP X8, 0xF3D000
	0x031E3288 LDR X8, [X8 + 0x8D0]
	0x031E328C MOV X1, X21
	0x031E3290 MOV X3, X31
	0x031E3294 MOV X20, X0
	0x031E3298 LDR X2, [X8]
	0x031E329C BL 0x29A8BC0
	0x031E32A0 LDR X8, [X22]
	0x031E32A4 LDR X8, [X8 + 0xB8]
	0x031E32A8 STR X20, [X8 + 0x218]
	0x031E32AC CBZ X19, 0x31E32E8
	0x031E32B0 ADRP X8, 0xF3D000
	0x031E32B4 LDR X8, [X8 + 0x8C8]
	0x031E32B8 MOV X0, X19
	0x031E32BC MOV X1, X20
	0x031E32C0 LDR X2, [X8]
	0x031E32C4 BL 0x2131604
	0x031E32C8 CBZ X0, 0x31E32E8
	0x031E32CC ADRP X8, 0xF3D000
	0x031E32D0 LDR X8, [X8 + 0x508]
	0x031E32D4 LDP X20, X19, [X31 + 0x20]
	0x031E32D8 LDP X22, X21, [X31 + 0x10]
	0x031E32DC LDR X1, [X8]
	0x031E32E0 LDR X30, [X31], #0x30
	0x031E32E4 B 0x2FE39A0
	0x031E32E8 BL 0x1C16F20
	0x031E32EC STR X30, [X31 - 0x30]!
	0x031E32F0 STP X22, X21, [X31 + 0x10]
	0x031E32F4 STP X20, X19, [X31 + 0x20]
	0x031E32F8 ADRP X20, 0x11F9000
	0x031E32FC LDRB W8, [X20 + 0x122]
	0x031E3300 MOV X19, X0
	0x031E3304 TBNZ X8, 0x0, 0x31E3340
	0x031E3308 ADRP X0, 0xF3D000
	0x031E330C LDR X0, [X0 + 0x8C0]
	0x031E3310 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11FA000
	007 Move W8, [X20+274]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3E000
	014 Move X0, [X0+2016]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3E000
	017 Move X0, [X0+2024]
	018 Call 0x1C17CF4
	019 Move X0, 0xF13000
	020 Move X0, [X0+3704]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3E000
	023 Move X0, [X0+2032]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3E000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+274], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3E000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+424]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3E000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2016]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3E000
	057 Move X8, [X8+2032]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Object>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+424], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3E000
	069 Move X8, [X8+2024]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF13000
	077 Move X8, [X8+3704]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Object>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.String> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E3314 ADRP X0, 0xF3D000
	0x031E3318 LDR X0, [X0 + 0x8C8]
	0x031E331C BL 0x1C16CF4
	0x031E3320 ADRP X0, 0xF3D000
	0x031E3324 LDR X0, [X0 + 0x8D8]
	0x031E3328 BL 0x1C16CF4
	0x031E332C ADRP X0, 0xF3D000
	0x031E3330 LDR X0, [X0 + 0x260]
	0x031E3334 BL 0x1C16CF4
	0x031E3338 MOVZ W8, 0x1
	0x031E333C STRB W8, [X20 + 0x122]
	0x031E3340 CBZ X19, 0x31E33E8
	0x031E3344 ADRP X22, 0xF3D000
	0x031E3348 LDR X22, [X22 + 0x260]
	0x031E334C LDR X19, [X19 + 0x30]
	0x031E3350 LDR X0, [X22]
	0x031E3354 LDR W8, [X0 + 0xE0]
	0x031E3358 CBNZ W8, 0x31E3364
	0x031E335C BL 0x1C16DFC
	0x031E3360 LDR X0, [X22]
	0x031E3364 LDR X8, [X0 + 0xB8]
	0x031E3368 LDR X20, [X8 + 0x220]
	0x031E336C CBNZ X20, 0x31E33C0
	0x031E3370 LDR W8, [X0 + 0xE0]
	0x031E3374 CBNZ W8, 0x31E3380
	0x031E3378 BL 0x1C16DFC
	0x031E337C LDR X0, [X22]
	0x031E3380 ADRP X9, 0xF3D000
	0x031E3384 LDR X8, [X0 + 0xB8]
	0x031E3388 LDR X9, [X9 + 0x8C0]
	0x031E338C LDR X21, [X8]
	0x031E3390 LDR X0, [X9]
	0x031E3394 BL 0x1C16F10
	0x031E3398 ADRP X8, 0xF3D000
	0x031E339C LDR X8, [X8 + 0x8D8]
	0x031E33A0 MOV X1, X21
	0x031E33A4 MOV X3, X31
	0x031E33A8 MOV X20, X0
	0x031E33AC LDR X2, [X8]
	0x031E33B0 BL 0x29A8BC0
	0x031E33B4 LDR X8, [X22]
	0x031E33B8 LDR X8, [X8 + 0xB8]
	0x031E33BC STR X20, [X8 + 0x220]
	0x031E33C0 CBZ X19, 0x31E33E8
	0x031E33C4 ADRP X8, 0xF3D000
	0x031E33C8 LDR X8, [X8 + 0x8C8]
	0x031E33CC MOV X0, X19
	0x031E33D0 MOV X1, X20
	0x031E33D4 LDP X20, X19, [X31 + 0x20]
	0x031E33D8 LDR X2, [X8]
	0x031E33DC LDP X22, X21, [X31 + 0x10]
	0x031E33E0 LDR X30, [X31], #0x30
	0x031E33E4 B 0x2131604
	0x031E33E8 BL 0x1C16F20
	0x031E33EC STR X30, [X31 - 0x10]!
	0x031E33F0 CBZ X0, 0x31E340C
	0x031E33F4 LDR V0, [X0 + 0x28]
	0x031E33F8 FCVTZS W8, D0
	0x031E33FC FCMP D0, 0x0
	0x031E3400 CSEL W0, W8, W8, MI
	0x031E3404 LDR X30, [X31], #0x10
	0x031E3408 RET
	0x031E340C BL 0x1C16F20
	0x031E3410 STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11FA000
	007 Move W8, [X20+275]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3E000
	014 Move X0, [X0+2016]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3E000
	017 Move X0, [X0+2024]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3E000
	020 Move X0, [X0+2040]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3E000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+275], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3E000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+432]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3E000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2016]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3E000
	054 Move X8, [X8+2040]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Object>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+432], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3E000
	066 Move X8, [X8+2024]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.Boolean op_Implicit(mixpanel.Value value)

Disassembly:
	0x031D484C STP X20, X19, [X31 + 0x20]
	0x031D4850 ADRP X19, 0x1208000
	0x031D4854 ADRP X21, 0xF4B000
	0x031D4858 LDRB W8, [X19 + 0x7C]
	0x031D485C LDR X21, [X21 + 0xEE0]
	0x031D4860 TBNZ X8, 0x0, 0x31D489C

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {7}
	004 Move W0, [X0+32]
	005 Move X30, [X31+16]
	006 Return X0
	007 Call 0x1C17F20

Method: System.Boolean[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E3414 STP X22, X21, [X31 + 0x10]
	0x031E3418 STP X20, X19, [X31 + 0x20]
	0x031E341C ADRP X20, 0x11F9000
	0x031E3420 LDRB W8, [X20 + 0x123]
	0x031E3424 MOV X19, X0
	0x031E3428 TBNZ X8, 0x0, 0x31E3470
	0x031E342C ADRP X0, 0xF3D000
	0x031E3430 LDR X0, [X0 + 0x8E0]
	0x031E3434 BL 0x1C16CF4
	0x031E3438 ADRP X0, 0xF3D000
	0x031E343C LDR X0, [X0 + 0x8E8]
	0x031E3440 BL 0x1C16CF4
	0x031E3444 ADRP X0, 0xF3D000
	0x031E3448 LDR X0, [X0 + 0x530]
	0x031E344C BL 0x1C16CF4
	0x031E3450 ADRP X0, 0xF3D000
	0x031E3454 LDR X0, [X0 + 0x8F0]
	0x031E3458 BL 0x1C16CF4
	0x031E345C ADRP X0, 0xF3D000
	0x031E3460 LDR X0, [X0 + 0x260]
	0x031E3464 BL 0x1C16CF4
	0x031E3468 MOVZ W8, 0x1
	0x031E346C STRB W8, [X20 + 0x123]
	0x031E3470 CBZ X19, 0x31E352C
	0x031E3474 ADRP X22, 0xF3D000
	0x031E3478 LDR X22, [X22 + 0x260]
	0x031E347C LDR X19, [X19 + 0x30]
	0x031E3480 LDR X0, [X22]
	0x031E3484 LDR W8, [X0 + 0xE0]
	0x031E3488 CBNZ W8, 0x31E3494
	0x031E348C BL 0x1C16DFC
	0x031E3490 LDR X0, [X22]
	0x031E3494 LDR X8, [X0 + 0xB8]
	0x031E3498 LDR X20, [X8 + 0x228]
	0x031E349C CBNZ X20, 0x31E34F0
	0x031E34A0 LDR W8, [X0 + 0xE0]
	0x031E34A4 CBNZ W8, 0x31E34B0
	0x031E34A8 BL 0x1C16DFC
	0x031E34AC LDR X0, [X22]
	0x031E34B0 ADRP X9, 0xF3D000
	0x031E34B4 LDR X8, [X0 + 0xB8]
	0x031E34B8 LDR X9, [X9 + 0x8E0]
	0x031E34BC LDR X21, [X8]
	0x031E34C0 LDR X0, [X9]
	0x031E34C4 BL 0x1C16F10
	0x031E34C8 ADRP X8, 0xF3D000
	0x031E34CC LDR X8, [X8 + 0x8F0]
	0x031E34D0 MOV X1, X21
	0x031E34D4 MOV X3, X31
	0x031E34D8 MOV X20, X0
	0x031E34DC LDR X2, [X8]
	0x031E34E0 BL 0x29A934C
	0x031E34E4 LDR X8, [X22]
	0x031E34E8 LDR X8, [X8 + 0xB8]
	0x031E34EC STR X20, [X8 + 0x228]
	0x031E34F0 CBZ X19, 0x31E352C
	0x031E34F4 ADRP X8, 0xF3D000
	0x031E34F8 LDR X8, [X8 + 0x8E8]
	0x031E34FC MOV X0, X19
	0x031E3500 MOV X1, X20
	0x031E3504 LDR X2, [X8]
	0x031E3508 BL 0x2131D60
	0x031E350C CBZ X0, 0x31E352C
	0x031E3510 ADRP X8, 0xF3D000
	0x031E3514 LDR X8, [X8 + 0x530]
	0x031E3518 LDP X20, X19, [X31 + 0x20]
	0x031E351C LDP X22, X21, [X31 + 0x10]
	0x031E3520 LDR X1, [X8]
	0x031E3524 LDR X30, [X31], #0x30
	0x031E3528 B 0x30C09E8
	0x031E352C BL 0x1C16F20
	0x031E3530 STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11FA000
	007 Move W8, [X20+276]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3E000
	014 Move X0, [X0+2048]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3E000
	017 Move X0, [X0+2056]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3E000
	020 Move X0, [X0+1056]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3E000
	023 Move X0, [X0+2064]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3E000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+276], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3E000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+440]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3E000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2048]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3E000
	057 Move X8, [X8+2064]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Boolean>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+440], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3E000
	069 Move X8, [X8+2056]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3E000
	077 Move X8, [X8+1056]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Boolean>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.Boolean> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E3534 STP X22, X21, [X31 + 0x10]
	0x031E3538 STP X20, X19, [X31 + 0x20]
	0x031E353C ADRP X20, 0x11F9000
	0x031E3540 LDRB W8, [X20 + 0x124]
	0x031E3544 MOV X19, X0
	0x031E3548 TBNZ X8, 0x0, 0x31E3584
	0x031E354C ADRP X0, 0xF3D000
	0x031E3550 LDR X0, [X0 + 0x8E0]
	0x031E3554 BL 0x1C16CF4
	0x031E3558 ADRP X0, 0xF3D000
	0x031E355C LDR X0, [X0 + 0x8E8]
	0x031E3560 BL 0x1C16CF4
	0x031E3564 ADRP X0, 0xF3D000
	0x031E3568 LDR X0, [X0 + 0x8F8]
	0x031E356C BL 0x1C16CF4
	0x031E3570 ADRP X0, 0xF3D000
	0x031E3574 LDR X0, [X0 + 0x260]
	0x031E3578 BL 0x1C16CF4
	0x031E357C MOVZ W8, 0x1
	0x031E3580 STRB W8, [X20 + 0x124]
	0x031E3584 CBZ X19, 0x31E362C
	0x031E3588 ADRP X22, 0xF3D000
	0x031E358C LDR X22, [X22 + 0x260]
	0x031E3590 LDR X19, [X19 + 0x30]
	0x031E3594 LDR X0, [X22]
	0x031E3598 LDR W8, [X0 + 0xE0]
	0x031E359C CBNZ W8, 0x31E35A8
	0x031E35A0 BL 0x1C16DFC
	0x031E35A4 LDR X0, [X22]
	0x031E35A8 LDR X8, [X0 + 0xB8]
	0x031E35AC LDR X20, [X8 + 0x230]
	0x031E35B0 CBNZ X20, 0x31E3604
	0x031E35B4 LDR W8, [X0 + 0xE0]
	0x031E35B8 CBNZ W8, 0x31E35C4
	0x031E35BC BL 0x1C16DFC
	0x031E35C0 LDR X0, [X22]
	0x031E35C4 ADRP X9, 0xF3D000
	0x031E35C8 LDR X8, [X0 + 0xB8]
	0x031E35CC LDR X9, [X9 + 0x8E0]
	0x031E35D0 LDR X21, [X8]
	0x031E35D4 LDR X0, [X9]
	0x031E35D8 BL 0x1C16F10
	0x031E35DC ADRP X8, 0xF3D000
	0x031E35E0 LDR X8, [X8 + 0x8F8]
	0x031E35E4 MOV X1, X21
	0x031E35E8 MOV X3, X31
	0x031E35EC MOV X20, X0
	0x031E35F0 LDR X2, [X8]
	0x031E35F4 BL 0x29A934C
	0x031E35F8 LDR X8, [X22]
	0x031E35FC LDR X8, [X8 + 0xB8]
	0x031E3600 STR X20, [X8 + 0x230]
	0x031E3604 CBZ X19, 0x31E362C
	0x031E3608 ADRP X8, 0xF3D000
	0x031E360C LDR X8, [X8 + 0x8E8]
	0x031E3610 MOV X0, X19
	0x031E3614 MOV X1, X20
	0x031E3618 LDP X20, X19, [X31 + 0x20]
	0x031E361C LDR X2, [X8]
	0x031E3620 LDP X22, X21, [X31 + 0x10]
	0x031E3624 LDR X30, [X31], #0x30
	0x031E3628 B 0x2131D60
	0x031E362C BL 0x1C16F20
	0x031E3630 STR X30, [X31 - 0x10]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11FA000
	007 Move W8, [X20+277]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3E000
	014 Move X0, [X0+2048]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3E000
	017 Move X0, [X0+2056]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3E000
	020 Move X0, [X0+2072]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3E000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+277], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3E000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+448]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3E000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2048]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3E000
	054 Move X8, [X8+2072]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Boolean>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+448], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3E000
	066 Move X8, [X8+2056]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.Single op_Implicit(mixpanel.Value value)

Disassembly:
	0x031DC31C CBZ X0, 0x31DC364
	0x031DC320 ADRP X8, 0xF44000
	0x031DC324 LDR X8, [X8 + 0x3E8]
	0x031DC328 LDR V10, [X0 + 0x28]
	0x031DC32C MOV X0, X19
	0x031DC330 LDR X1, [X8]
	0x031DC334 BL 0x31D3650

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {8}
	004 Move V0, [X0+40]
	005 NotImplemented "Instruction INVALID not yet implemented."
	006 Move X30, [X31+16]
	007 Return V0
	008 Call 0x1C17F20

Method: System.Single[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E3634 CBZ X0, 0x31E3654
	0x031E3638 LDR V0, [X0 + 0x28]
	0x031E363C FCVTZS W8, D0
	0x031E3640 FCVTZU W9, D0
	0x031E3644 FCMP D0, 0x0
	0x031E3648 CSEL W0, W8, W9, MI
	0x031E364C LDR X30, [X31], #0x10
	0x031E3650 RET
	0x031E3654 BL 0x1C16F20
	0x031E3658 STR X30, [X31 - 0x30]!
	0x031E365C STP X22, X21, [X31 + 0x10]
	0x031E3660 STP X20, X19, [X31 + 0x20]
	0x031E3664 ADRP X20, 0x11F9000
	0x031E3668 LDRB W8, [X20 + 0x125]
	0x031E366C MOV X19, X0
	0x031E3670 TBNZ X8, 0x0, 0x31E36B8
	0x031E3674 ADRP X0, 0xF3D000
	0x031E3678 LDR X0, [X0 + 0x900]
	0x031E367C BL 0x1C16CF4
	0x031E3680 ADRP X0, 0xF3D000
	0x031E3684 LDR X0, [X0 + 0x908]
	0x031E3688 BL 0x1C16CF4
	0x031E368C ADRP X0, 0xF3D000
	0x031E3690 LDR X0, [X0 + 0x558]
	0x031E3694 BL 0x1C16CF4
	0x031E3698 ADRP X0, 0xF3D000
	0x031E369C LDR X0, [X0 + 0x910]
	0x031E36A0 BL 0x1C16CF4
	0x031E36A4 ADRP X0, 0xF3D000
	0x031E36A8 LDR X0, [X0 + 0x260]
	0x031E36AC BL 0x1C16CF4
	0x031E36B0 MOVZ W8, 0x1
	0x031E36B4 STRB W8, [X20 + 0x125]
	0x031E36B8 CBZ X19, 0x31E3774
	0x031E36BC ADRP X22, 0xF3D000
	0x031E36C0 LDR X22, [X22 + 0x260]
	0x031E36C4 LDR X19, [X19 + 0x30]
	0x031E36C8 LDR X0, [X22]
	0x031E36CC LDR W8, [X0 + 0xE0]
	0x031E36D0 CBNZ W8, 0x31E36DC
	0x031E36D4 BL 0x1C16DFC
	0x031E36D8 LDR X0, [X22]
	0x031E36DC LDR X8, [X0 + 0xB8]
	0x031E36E0 LDR X20, [X8 + 0x238]
	0x031E36E4 CBNZ X20, 0x31E3738
	0x031E36E8 LDR W8, [X0 + 0xE0]
	0x031E36EC CBNZ W8, 0x31E36F8
	0x031E36F0 BL 0x1C16DFC
	0x031E36F4 LDR X0, [X22]
	0x031E36F8 ADRP X9, 0xF3D000
	0x031E36FC LDR X8, [X0 + 0xB8]
	0x031E3700 LDR X9, [X9 + 0x900]
	0x031E3704 LDR X21, [X8]
	0x031E3708 LDR X0, [X9]
	0x031E370C BL 0x1C16F10
	0x031E3710 ADRP X8, 0xF3D000
	0x031E3714 LDR X8, [X8 + 0x910]
	0x031E3718 MOV X1, X21
	0x031E371C MOV X3, X31
	0x031E3720 MOV X20, X0
	0x031E3724 LDR X2, [X8]
	0x031E3728 BL 0x29A9460
	0x031E372C LDR X8, [X22]
	0x031E3730 LDR X8, [X8 + 0xB8]
	0x031E3734 STR X20, [X8 + 0x238]
	0x031E3738 CBZ X19, 0x31E3774
	0x031E373C ADRP X8, 0xF3D000
	0x031E3740 LDR X8, [X8 + 0x908]
	0x031E3744 MOV X0, X19
	0x031E3748 MOV X1, X20
	0x031E374C LDR X2, [X8]
	0x031E3750 BL 0x2131E64

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11FA000
	007 Move W8, [X20+278]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3E000
	014 Move X0, [X0+2080]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3E000
	017 Move X0, [X0+2088]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3E000
	020 Move X0, [X0+1096]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3E000
	023 Move X0, [X0+2096]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3E000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+278], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3E000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+456]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3E000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2080]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3E000
	057 Move X8, [X8+2096]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Single>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+456], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3E000
	069 Move X8, [X8+2088]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3E000
	077 Move X8, [X8+1096]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Single>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.Single> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E3754 CBZ X0, 0x31E3774
	0x031E3758 ADRP X8, 0xF3D000
	0x031E375C LDR X8, [X8 + 0x558]
	0x031E3760 LDP X20, X19, [X31 + 0x20]
	0x031E3764 LDP X22, X21, [X31 + 0x10]
	0x031E3768 LDR X1, [X8]
	0x031E376C LDR X30, [X31], #0x30
	0x031E3770 B 0x30C3454
	0x031E3774 BL 0x1C16F20
	0x031E3778 STR X30, [X31 - 0x30]!
	0x031E377C STP X22, X21, [X31 + 0x10]
	0x031E3780 STP X20, X19, [X31 + 0x20]
	0x031E3784 ADRP X20, 0x11F9000
	0x031E3788 LDRB W8, [X20 + 0x126]
	0x031E378C MOV X19, X0
	0x031E3790 TBNZ X8, 0x0, 0x31E37CC
	0x031E3794 ADRP X0, 0xF3D000
	0x031E3798 LDR X0, [X0 + 0x900]
	0x031E379C BL 0x1C16CF4
	0x031E37A0 ADRP X0, 0xF3D000
	0x031E37A4 LDR X0, [X0 + 0x908]
	0x031E37A8 BL 0x1C16CF4
	0x031E37AC ADRP X0, 0xF3D000
	0x031E37B0 LDR X0, [X0 + 0x918]
	0x031E37B4 BL 0x1C16CF4
	0x031E37B8 ADRP X0, 0xF3D000
	0x031E37BC LDR X0, [X0 + 0x260]
	0x031E37C0 BL 0x1C16CF4
	0x031E37C4 MOVZ W8, 0x1
	0x031E37C8 STRB W8, [X20 + 0x126]
	0x031E37CC CBZ X19, 0x31E3874
	0x031E37D0 ADRP X22, 0xF3D000
	0x031E37D4 LDR X22, [X22 + 0x260]
	0x031E37D8 LDR X19, [X19 + 0x30]
	0x031E37DC LDR X0, [X22]
	0x031E37E0 LDR W8, [X0 + 0xE0]
	0x031E37E4 CBNZ W8, 0x31E37F0
	0x031E37E8 BL 0x1C16DFC
	0x031E37EC LDR X0, [X22]
	0x031E37F0 LDR X8, [X0 + 0xB8]
	0x031E37F4 LDR X20, [X8 + 0x240]
	0x031E37F8 CBNZ X20, 0x31E384C
	0x031E37FC LDR W8, [X0 + 0xE0]
	0x031E3800 CBNZ W8, 0x31E380C
	0x031E3804 BL 0x1C16DFC
	0x031E3808 LDR X0, [X22]
	0x031E380C ADRP X9, 0xF3D000
	0x031E3810 LDR X8, [X0 + 0xB8]
	0x031E3814 LDR X9, [X9 + 0x900]
	0x031E3818 LDR X21, [X8]
	0x031E381C LDR X0, [X9]
	0x031E3820 BL 0x1C16F10
	0x031E3824 ADRP X8, 0xF3D000
	0x031E3828 LDR X8, [X8 + 0x918]
	0x031E382C MOV X1, X21
	0x031E3830 MOV X3, X31
	0x031E3834 MOV X20, X0
	0x031E3838 LDR X2, [X8]
	0x031E383C BL 0x29A9460
	0x031E3840 LDR X8, [X22]
	0x031E3844 LDR X8, [X8 + 0xB8]
	0x031E3848 STR X20, [X8 + 0x240]
	0x031E384C CBZ X19, 0x31E3874
	0x031E3850 ADRP X8, 0xF3D000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11FA000
	007 Move W8, [X20+279]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3E000
	014 Move X0, [X0+2080]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3E000
	017 Move X0, [X0+2088]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3E000
	020 Move X0, [X0+2104]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3E000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+279], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3E000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+464]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3E000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2080]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3E000
	054 Move X8, [X8+2104]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Single>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+464], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3E000
	066 Move X8, [X8+2088]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.Double op_Implicit(mixpanel.Value value)

Disassembly:
	0x031D5FDC STR X8, [X19 + 0x20]
	0x031D5FE0 ADD X0, X31, 0x18
	0x031D5FE4 MOV X1, X31
	0x031D5FE8 BL 0x33661DC
	0x031D5FEC LDR W8, [X19 + 0x18]
	0x031D5FF0 CMP W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {7}
	004 Move V0, [X0+40]
	005 Move X30, [X31+16]
	006 Return V0
	007 Call 0x1C17F20

Method: System.Double[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E3854 LDR X8, [X8 + 0x908]
	0x031E3858 MOV X0, X19
	0x031E385C MOV X1, X20
	0x031E3860 LDP X20, X19, [X31 + 0x20]
	0x031E3864 LDR X2, [X8]
	0x031E3868 LDP X22, X21, [X31 + 0x10]
	0x031E386C LDR X30, [X31], #0x30
	0x031E3870 B 0x2131E64
	0x031E3874 BL 0x1C16F20
	0x031E3878 STR X30, [X31 - 0x10]!
	0x031E387C CBZ X0, 0x31E389C
	0x031E3880 LDR V0, [X0 + 0x28]
	0x031E3884 FCVTZS X8, D0
	0x031E3888 FCVTZU X9, D0
	0x031E388C FCMP D0, 0x0
	0x031E3890 CSEL X0, X8, X9, MI
	0x031E3894 LDR X30, [X31], #0x10
	0x031E3898 RET
	0x031E389C BL 0x1C16F20
	0x031E38A0 STR X30, [X31 - 0x30]!
	0x031E38A4 STP X22, X21, [X31 + 0x10]
	0x031E38A8 STP X20, X19, [X31 + 0x20]
	0x031E38AC ADRP X20, 0x11F9000
	0x031E38B0 LDRB W8, [X20 + 0x127]
	0x031E38B4 MOV X19, X0
	0x031E38B8 TBNZ X8, 0x0, 0x31E3900
	0x031E38BC ADRP X0, 0xF3D000
	0x031E38C0 LDR X0, [X0 + 0x920]
	0x031E38C4 BL 0x1C16CF4
	0x031E38C8 ADRP X0, 0xF3D000
	0x031E38CC LDR X0, [X0 + 0x928]
	0x031E38D0 BL 0x1C16CF4
	0x031E38D4 ADRP X0, 0xF3D000
	0x031E38D8 LDR X0, [X0 + 0x580]
	0x031E38DC BL 0x1C16CF4
	0x031E38E0 ADRP X0, 0xF3D000
	0x031E38E4 LDR X0, [X0 + 0x930]
	0x031E38E8 BL 0x1C16CF4
	0x031E38EC ADRP X0, 0xF3D000
	0x031E38F0 LDR X0, [X0 + 0x260]
	0x031E38F4 BL 0x1C16CF4
	0x031E38F8 MOVZ W8, 0x1
	0x031E38FC STRB W8, [X20 + 0x127]
	0x031E3900 CBZ X19, 0x31E39BC
	0x031E3904 ADRP X22, 0xF3D000
	0x031E3908 LDR X22, [X22 + 0x260]
	0x031E390C LDR X19, [X19 + 0x30]
	0x031E3910 LDR X0, [X22]
	0x031E3914 LDR W8, [X0 + 0xE0]
	0x031E3918 CBNZ W8, 0x31E3924
	0x031E391C BL 0x1C16DFC
	0x031E3920 LDR X0, [X22]
	0x031E3924 LDR X8, [X0 + 0xB8]
	0x031E3928 LDR X20, [X8 + 0x248]
	0x031E392C CBNZ X20, 0x31E3980
	0x031E3930 LDR W8, [X0 + 0xE0]
	0x031E3934 CBNZ W8, 0x31E3940
	0x031E3938 BL 0x1C16DFC
	0x031E393C LDR X0, [X22]
	0x031E3940 ADRP X9, 0xF3D000
	0x031E3944 LDR X8, [X0 + 0xB8]
	0x031E3948 LDR X9, [X9 + 0x920]
	0x031E394C LDR X21, [X8]
	0x031E3950 LDR X0, [X9]
	0x031E3954 BL 0x1C16F10
	0x031E3958 ADRP X8, 0xF3D000
	0x031E395C LDR X8, [X8 + 0x930]
	0x031E3960 MOV X1, X21
	0x031E3964 MOV X3, X31
	0x031E3968 MOV X20, X0
	0x031E396C LDR X2, [X8]
	0x031E3970 BL 0x29A9574

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11FA000
	007 Move W8, [X20+280]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3E000
	014 Move X0, [X0+2112]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3E000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3E000
	020 Move X0, [X0+1136]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3E000
	023 Move X0, [X0+2128]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3E000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+280], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3E000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+472]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3E000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2112]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3E000
	057 Move X8, [X8+2128]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Double>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+472], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3E000
	069 Move X8, [X8+2120]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3E000
	077 Move X8, [X8+1136]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Double>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.Double> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E3974 LDR X8, [X22]
	0x031E3978 LDR X8, [X8 + 0xB8]
	0x031E397C STR X20, [X8 + 0x248]
	0x031E3980 CBZ X19, 0x31E39BC
	0x031E3984 ADRP X8, 0xF3D000
	0x031E3988 LDR X8, [X8 + 0x928]
	0x031E398C MOV X0, X19
	0x031E3990 MOV X1, X20
	0x031E3994 LDR X2, [X8]
	0x031E3998 BL 0x2131F68
	0x031E399C CBZ X0, 0x31E39BC
	0x031E39A0 ADRP X8, 0xF3D000
	0x031E39A4 LDR X8, [X8 + 0x580]
	0x031E39A8 LDP X20, X19, [X31 + 0x20]
	0x031E39AC LDP X22, X21, [X31 + 0x10]
	0x031E39B0 LDR X1, [X8]
	0x031E39B4 LDR X30, [X31], #0x30
	0x031E39B8 B 0x30C5EC0
	0x031E39BC BL 0x1C16F20
	0x031E39C0 STR X30, [X31 - 0x30]!
	0x031E39C4 STP X22, X21, [X31 + 0x10]
	0x031E39C8 STP X20, X19, [X31 + 0x20]
	0x031E39CC ADRP X20, 0x11F9000
	0x031E39D0 LDRB W8, [X20 + 0x128]
	0x031E39D4 MOV X19, X0
	0x031E39D8 TBNZ X8, 0x0, 0x31E3A14
	0x031E39DC ADRP X0, 0xF3D000
	0x031E39E0 LDR X0, [X0 + 0x920]
	0x031E39E4 BL 0x1C16CF4
	0x031E39E8 ADRP X0, 0xF3D000
	0x031E39EC LDR X0, [X0 + 0x928]
	0x031E39F0 BL 0x1C16CF4
	0x031E39F4 ADRP X0, 0xF3D000
	0x031E39F8 LDR X0, [X0 + 0x938]
	0x031E39FC BL 0x1C16CF4
	0x031E3A00 ADRP X0, 0xF3D000
	0x031E3A04 LDR X0, [X0 + 0x260]
	0x031E3A08 BL 0x1C16CF4
	0x031E3A0C MOVZ W8, 0x1
	0x031E3A10 STRB W8, [X20 + 0x128]
	0x031E3A14 CBZ X19, 0x31E3ABC
	0x031E3A18 ADRP X22, 0xF3D000
	0x031E3A1C LDR X22, [X22 + 0x260]
	0x031E3A20 LDR X19, [X19 + 0x30]
	0x031E3A24 LDR X0, [X22]
	0x031E3A28 LDR W8, [X0 + 0xE0]
	0x031E3A2C CBNZ W8, 0x31E3A38
	0x031E3A30 BL 0x1C16DFC
	0x031E3A34 LDR X0, [X22]
	0x031E3A38 LDR X8, [X0 + 0xB8]
	0x031E3A3C LDR X20, [X8 + 0x250]
	0x031E3A40 CBNZ X20, 0x31E3A94
	0x031E3A44 LDR W8, [X0 + 0xE0]
	0x031E3A48 CBNZ W8, 0x31E3A54
	0x031E3A4C BL 0x1C16DFC
	0x031E3A50 LDR X0, [X22]
	0x031E3A54 ADRP X9, 0xF3D000
	0x031E3A58 LDR X8, [X0 + 0xB8]
	0x031E3A5C LDR X9, [X9 + 0x920]
	0x031E3A60 LDR X21, [X8]
	0x031E3A64 LDR X0, [X9]
	0x031E3A68 BL 0x1C16F10
	0x031E3A6C ADRP X8, 0xF3D000
	0x031E3A70 LDR X8, [X8 + 0x938]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11FA000
	007 Move W8, [X20+281]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3E000
	014 Move X0, [X0+2112]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3E000
	017 Move X0, [X0+2120]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3E000
	020 Move X0, [X0+2136]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3E000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+281], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3E000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+480]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3E000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2112]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3E000
	054 Move X8, [X8+2136]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Double>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+480], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3E000
	066 Move X8, [X8+2120]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.Decimal op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E3A74 MOV X1, X21
	0x031E3A78 MOV X3, X31
	0x031E3A7C MOV X20, X0
	0x031E3A80 LDR X2, [X8]
	0x031E3A84 BL 0x29A9574
	0x031E3A88 LDR X8, [X22]
	0x031E3A8C LDR X8, [X8 + 0xB8]
	0x031E3A90 STR X20, [X8 + 0x250]
	0x031E3A94 CBZ X19, 0x31E3ABC
	0x031E3A98 ADRP X8, 0xF3D000
	0x031E3A9C LDR X8, [X8 + 0x928]
	0x031E3AA0 MOV X0, X19
	0x031E3AA4 MOV X1, X20
	0x031E3AA8 LDP X20, X19, [X31 + 0x20]
	0x031E3AAC LDR X2, [X8]
	0x031E3AB0 LDP X22, X21, [X31 + 0x10]
	0x031E3AB4 LDR X30, [X31], #0x30
	0x031E3AB8 B 0x2131F68
	0x031E3ABC BL 0x1C16F20
	0x031E3AC0 STR X30, [X31 - 0x10]!
	0x031E3AC4 CBZ X0, 0x31E3AE8
	0x031E3AC8 LDR V0, [X0 + 0x28]
	0x031E3ACC MOVZ X8, 0x7FF00000
	0x031E3AD0 FMOV D1, X8
	0x031E3AD4 FCVTZS W8, D0
	0x031E3AD8 FCMP D0, D1
	0x031E3ADC CSEL W0, W31, W8, EQ

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11FA000
	006 Move W8, [X20+282]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF39000
	013 Move X0, [X0+1520]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+282], W8
	017 Compare X19, 0
	018 JumpIfEqual {35}
	019 Move X8, 0xF39000
	020 Move X8, [X8+1520]
	021 Move V8, [X19+40]
	022 Move X0, [X8]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+8]
	030 Move V0, V8
	031 Move X0, X31
	032 Move V8, [X31+32]
	033 Call Decimal.op_Explicit, V0
	034 Return X0
	035 Call 0x1C17F20

Method: System.Decimal[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E3AE0 LDR X30, [X31], #0x10
	0x031E3AE4 RET
	0x031E3AE8 BL 0x1C16F20
	0x031E3AEC STR X30, [X31 - 0x30]!
	0x031E3AF0 STP X22, X21, [X31 + 0x10]
	0x031E3AF4 STP X20, X19, [X31 + 0x20]
	0x031E3AF8 ADRP X20, 0x11F9000
	0x031E3AFC LDRB W8, [X20 + 0x129]
	0x031E3B00 MOV X19, X0
	0x031E3B04 TBNZ X8, 0x0, 0x31E3B4C
	0x031E3B08 ADRP X0, 0xF3D000
	0x031E3B0C LDR X0, [X0 + 0x940]
	0x031E3B10 BL 0x1C16CF4
	0x031E3B14 ADRP X0, 0xF3D000
	0x031E3B18 LDR X0, [X0 + 0x948]
	0x031E3B1C BL 0x1C16CF4
	0x031E3B20 ADRP X0, 0xF3D000
	0x031E3B24 LDR X0, [X0 + 0x5A8]
	0x031E3B28 BL 0x1C16CF4
	0x031E3B2C ADRP X0, 0xF3D000
	0x031E3B30 LDR X0, [X0 + 0x950]
	0x031E3B34 BL 0x1C16CF4
	0x031E3B38 ADRP X0, 0xF3D000
	0x031E3B3C LDR X0, [X0 + 0x260]
	0x031E3B40 BL 0x1C16CF4
	0x031E3B44 MOVZ W8, 0x1
	0x031E3B48 STRB W8, [X20 + 0x129]
	0x031E3B4C CBZ X19, 0x31E3C08
	0x031E3B50 ADRP X22, 0xF3D000
	0x031E3B54 LDR X22, [X22 + 0x260]
	0x031E3B58 LDR X19, [X19 + 0x30]
	0x031E3B5C LDR X0, [X22]
	0x031E3B60 LDR W8, [X0 + 0xE0]
	0x031E3B64 CBNZ W8, 0x31E3B70
	0x031E3B68 BL 0x1C16DFC
	0x031E3B6C LDR X0, [X22]
	0x031E3B70 LDR X8, [X0 + 0xB8]
	0x031E3B74 LDR X20, [X8 + 0x258]
	0x031E3B78 CBNZ X20, 0x31E3BCC
	0x031E3B7C LDR W8, [X0 + 0xE0]
	0x031E3B80 CBNZ W8, 0x31E3B8C
	0x031E3B84 BL 0x1C16DFC
	0x031E3B88 LDR X0, [X22]
	0x031E3B8C ADRP X9, 0xF3D000
	0x031E3B90 LDR X8, [X0 + 0xB8]
	0x031E3B94 LDR X9, [X9 + 0x940]
	0x031E3B98 LDR X21, [X8]
	0x031E3B9C LDR X0, [X9]
	0x031E3BA0 BL 0x1C16F10
	0x031E3BA4 ADRP X8, 0xF3D000
	0x031E3BA8 LDR X8, [X8 + 0x950]
	0x031E3BAC MOV X1, X21
	0x031E3BB0 MOV X3, X31
	0x031E3BB4 MOV X20, X0
	0x031E3BB8 LDR X2, [X8]
	0x031E3BBC BL 0x29A9010
	0x031E3BC0 LDR X8, [X22]
	0x031E3BC4 LDR X8, [X8 + 0xB8]
	0x031E3BC8 STR X20, [X8 + 0x258]
	0x031E3BCC CBZ X19, 0x31E3C08
	0x031E3BD0 ADRP X8, 0xF3D000
	0x031E3BD4 LDR X8, [X8 + 0x948]
	0x031E3BD8 MOV X0, X19
	0x031E3BDC MOV X1, X20
	0x031E3BE0 LDR X2, [X8]
	0x031E3BE4 BL 0x2131A4C
	0x031E3BE8 CBZ X0, 0x31E3C08
	0x031E3BEC ADRP X8, 0xF3D000
	0x031E3BF0 LDR X8, [X8 + 0x5A8]
	0x031E3BF4 LDP X20, X19, [X31 + 0x20]
	0x031E3BF8 LDP X22, X21, [X31 + 0x10]
	0x031E3BFC LDR X1, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11FA000
	007 Move W8, [X20+283]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3E000
	014 Move X0, [X0+2144]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3E000
	017 Move X0, [X0+2152]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3E000
	020 Move X0, [X0+1176]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3E000
	023 Move X0, [X0+2160]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3E000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+283], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3E000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+488]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3E000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2144]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3E000
	057 Move X8, [X8+2160]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Decimal>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+488], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3E000
	069 Move X8, [X8+2152]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3E000
	077 Move X8, [X8+1176]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Decimal>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.Decimal> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E3C00 LDR X30, [X31], #0x30
	0x031E3C04 B 0x3053EF8
	0x031E3C08 BL 0x1C16F20
	0x031E3C0C STR X30, [X31 - 0x30]!
	0x031E3C10 STP X22, X21, [X31 + 0x10]
	0x031E3C14 STP X20, X19, [X31 + 0x20]
	0x031E3C18 ADRP X20, 0x11F9000
	0x031E3C1C LDRB W8, [X20 + 0x12A]
	0x031E3C20 MOV X19, X0
	0x031E3C24 TBNZ X8, 0x0, 0x31E3C60
	0x031E3C28 ADRP X0, 0xF3D000
	0x031E3C2C LDR X0, [X0 + 0x940]
	0x031E3C30 BL 0x1C16CF4
	0x031E3C34 ADRP X0, 0xF3D000
	0x031E3C38 LDR X0, [X0 + 0x948]
	0x031E3C3C BL 0x1C16CF4
	0x031E3C40 ADRP X0, 0xF3D000
	0x031E3C44 LDR X0, [X0 + 0x958]
	0x031E3C48 BL 0x1C16CF4
	0x031E3C4C ADRP X0, 0xF3D000
	0x031E3C50 LDR X0, [X0 + 0x260]
	0x031E3C54 BL 0x1C16CF4
	0x031E3C58 MOVZ W8, 0x1
	0x031E3C5C STRB W8, [X20 + 0x12A]
	0x031E3C60 CBZ X19, 0x31E3D08
	0x031E3C64 ADRP X22, 0xF3D000
	0x031E3C68 LDR X22, [X22 + 0x260]
	0x031E3C6C LDR X19, [X19 + 0x30]
	0x031E3C70 LDR X0, [X22]
	0x031E3C74 LDR W8, [X0 + 0xE0]
	0x031E3C78 CBNZ W8, 0x31E3C84
	0x031E3C7C BL 0x1C16DFC
	0x031E3C80 LDR X0, [X22]
	0x031E3C84 LDR X8, [X0 + 0xB8]
	0x031E3C88 LDR X20, [X8 + 0x260]
	0x031E3C8C CBNZ X20, 0x31E3CE0
	0x031E3C90 LDR W8, [X0 + 0xE0]
	0x031E3C94 CBNZ W8, 0x31E3CA0
	0x031E3C98 BL 0x1C16DFC
	0x031E3C9C LDR X0, [X22]
	0x031E3CA0 ADRP X9, 0xF3D000
	0x031E3CA4 LDR X8, [X0 + 0xB8]
	0x031E3CA8 LDR X9, [X9 + 0x940]
	0x031E3CAC LDR X21, [X8]
	0x031E3CB0 LDR X0, [X9]
	0x031E3CB4 BL 0x1C16F10
	0x031E3CB8 ADRP X8, 0xF3D000
	0x031E3CBC LDR X8, [X8 + 0x958]
	0x031E3CC0 MOV X1, X21
	0x031E3CC4 MOV X3, X31
	0x031E3CC8 MOV X20, X0
	0x031E3CCC LDR X2, [X8]
	0x031E3CD0 BL 0x29A9010
	0x031E3CD4 LDR X8, [X22]
	0x031E3CD8 LDR X8, [X8 + 0xB8]
	0x031E3CDC STR X20, [X8 + 0x260]
	0x031E3CE0 CBZ X19, 0x31E3D08
	0x031E3CE4 ADRP X8, 0xF3D000
	0x031E3CE8 LDR X8, [X8 + 0x948]
	0x031E3CEC MOV X0, X19
	0x031E3CF0 MOV X1, X20
	0x031E3CF4 LDP X20, X19, [X31 + 0x20]
	0x031E3CF8 LDR X2, [X8]
	0x031E3CFC LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11FA000
	007 Move W8, [X20+284]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3E000
	014 Move X0, [X0+2144]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3E000
	017 Move X0, [X0+2152]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3E000
	020 Move X0, [X0+2168]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3E000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+284], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3E000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+496]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3E000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2144]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3E000
	054 Move X8, [X8+2168]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Decimal>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+496], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3E000
	066 Move X8, [X8+2152]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.Int16 op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E3D00 LDR X30, [X31], #0x30
	0x031E3D04 B 0x2131A4C
	0x031E3D08 BL 0x1C16F20
	0x031E3D0C STR X30, [X31 - 0x10]!
	0x031E3D10 CBZ X0, 0x31E3D2C
	0x031E3D14 LDR V0, [X0 + 0x28]
	0x031E3D18 FCVTZS W8, D0
	0x031E3D1C FCMP D0, 0x0
	0x031E3D20 CSEL W0, W8, W8, MI
	0x031E3D24 LDR X30, [X31], #0x10
	0x031E3D28 RET

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {12}
	004 Move V0, [X0+40]
	005 Move X8, 0x7FF00000
	006 Move D1, X8
	007 NotImplemented "Instruction FCVTZS not yet implemented."
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 NotImplemented "Instruction CSEL not yet implemented."
	010 Move X30, [X31+16]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Int16[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E3D2C BL 0x1C16F20
	0x031E3D30 STR X30, [X31 - 0x30]!
	0x031E3D34 STP X22, X21, [X31 + 0x10]
	0x031E3D38 STP X20, X19, [X31 + 0x20]
	0x031E3D3C ADRP X20, 0x11F9000
	0x031E3D40 LDRB W8, [X20 + 0x12B]
	0x031E3D44 MOV X19, X0
	0x031E3D48 TBNZ X8, 0x0, 0x31E3D90
	0x031E3D4C ADRP X0, 0xF3D000
	0x031E3D50 LDR X0, [X0 + 0x960]
	0x031E3D54 BL 0x1C16CF4
	0x031E3D58 ADRP X0, 0xF3D000
	0x031E3D5C LDR X0, [X0 + 0x968]
	0x031E3D60 BL 0x1C16CF4
	0x031E3D64 ADRP X0, 0xF3D000
	0x031E3D68 LDR X0, [X0 + 0x5D0]
	0x031E3D6C BL 0x1C16CF4
	0x031E3D70 ADRP X0, 0xF3D000
	0x031E3D74 LDR X0, [X0 + 0x970]
	0x031E3D78 BL 0x1C16CF4
	0x031E3D7C ADRP X0, 0xF3D000
	0x031E3D80 LDR X0, [X0 + 0x260]
	0x031E3D84 BL 0x1C16CF4
	0x031E3D88 MOVZ W8, 0x1
	0x031E3D8C STRB W8, [X20 + 0x12B]
	0x031E3D90 CBZ X19, 0x31E3E4C
	0x031E3D94 ADRP X22, 0xF3D000
	0x031E3D98 LDR X22, [X22 + 0x260]
	0x031E3D9C LDR X19, [X19 + 0x30]
	0x031E3DA0 LDR X0, [X22]
	0x031E3DA4 LDR W8, [X0 + 0xE0]
	0x031E3DA8 CBNZ W8, 0x31E3DB4
	0x031E3DAC BL 0x1C16DFC
	0x031E3DB0 LDR X0, [X22]
	0x031E3DB4 LDR X8, [X0 + 0xB8]
	0x031E3DB8 LDR X20, [X8 + 0x268]
	0x031E3DBC CBNZ X20, 0x31E3E10
	0x031E3DC0 LDR W8, [X0 + 0xE0]
	0x031E3DC4 CBNZ W8, 0x31E3DD0
	0x031E3DC8 BL 0x1C16DFC
	0x031E3DCC LDR X0, [X22]
	0x031E3DD0 ADRP X9, 0xF3D000
	0x031E3DD4 LDR X8, [X0 + 0xB8]
	0x031E3DD8 LDR X9, [X9 + 0x960]
	0x031E3DDC LDR X21, [X8]
	0x031E3DE0 LDR X0, [X9]
	0x031E3DE4 BL 0x1C16F10
	0x031E3DE8 ADRP X8, 0xF3D000
	0x031E3DEC LDR X8, [X8 + 0x970]
	0x031E3DF0 MOV X1, X21
	0x031E3DF4 MOV X3, X31
	0x031E3DF8 MOV X20, X0
	0x031E3DFC LDR X2, [X8]
	0x031E3E00 BL 0x29A80E8
	0x031E3E04 LDR X8, [X22]
	0x031E3E08 LDR X8, [X8 + 0xB8]
	0x031E3E0C STR X20, [X8 + 0x268]
	0x031E3E10 CBZ X19, 0x31E3E4C
	0x031E3E14 ADRP X8, 0xF3D000
	0x031E3E18 LDR X8, [X8 + 0x968]
	0x031E3E1C MOV X0, X19
	0x031E3E20 MOV X1, X20
	0x031E3E24 LDR X2, [X8]
	0x031E3E28 BL 0x2130B88
	0x031E3E2C CBZ X0, 0x31E3E4C
	0x031E3E30 ADRP X8, 0xF3D000
	0x031E3E34 LDR X8, [X8 + 0x5D0]
	0x031E3E38 LDP X20, X19, [X31 + 0x20]
	0x031E3E3C LDP X22, X21, [X31 + 0x10]
	0x031E3E40 LDR X1, [X8]
	0x031E3E44 LDR X30, [X31], #0x30
	0x031E3E48 B 0x2F69CD0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11FA000
	007 Move W8, [X20+285]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3E000
	014 Move X0, [X0+2176]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3E000
	017 Move X0, [X0+2184]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3E000
	020 Move X0, [X0+1216]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3E000
	023 Move X0, [X0+2192]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3E000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+285], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3E000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+504]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3E000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2176]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3E000
	057 Move X8, [X8+2192]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Int16>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+504], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3E000
	069 Move X8, [X8+2184]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3E000
	077 Move X8, [X8+1216]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Int16>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.Int16> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E3E4C BL 0x1C16F20
	0x031E3E50 STR X30, [X31 - 0x30]!
	0x031E3E54 STP X22, X21, [X31 + 0x10]
	0x031E3E58 STP X20, X19, [X31 + 0x20]
	0x031E3E5C ADRP X20, 0x11F9000
	0x031E3E60 LDRB W8, [X20 + 0x12C]
	0x031E3E64 MOV X19, X0
	0x031E3E68 TBNZ X8, 0x0, 0x31E3EA4
	0x031E3E6C ADRP X0, 0xF3D000
	0x031E3E70 LDR X0, [X0 + 0x960]
	0x031E3E74 BL 0x1C16CF4
	0x031E3E78 ADRP X0, 0xF3D000
	0x031E3E7C LDR X0, [X0 + 0x968]
	0x031E3E80 BL 0x1C16CF4
	0x031E3E84 ADRP X0, 0xF3D000
	0x031E3E88 LDR X0, [X0 + 0x978]
	0x031E3E8C BL 0x1C16CF4
	0x031E3E90 ADRP X0, 0xF3D000
	0x031E3E94 LDR X0, [X0 + 0x260]
	0x031E3E98 BL 0x1C16CF4
	0x031E3E9C MOVZ W8, 0x1
	0x031E3EA0 STRB W8, [X20 + 0x12C]
	0x031E3EA4 CBZ X19, 0x31E3F4C
	0x031E3EA8 ADRP X22, 0xF3D000
	0x031E3EAC LDR X22, [X22 + 0x260]
	0x031E3EB0 LDR X19, [X19 + 0x30]
	0x031E3EB4 LDR X0, [X22]
	0x031E3EB8 LDR W8, [X0 + 0xE0]
	0x031E3EBC CBNZ W8, 0x31E3EC8
	0x031E3EC0 BL 0x1C16DFC
	0x031E3EC4 LDR X0, [X22]
	0x031E3EC8 LDR X8, [X0 + 0xB8]
	0x031E3ECC LDR X20, [X8 + 0x270]
	0x031E3ED0 CBNZ X20, 0x31E3F24
	0x031E3ED4 LDR W8, [X0 + 0xE0]
	0x031E3ED8 CBNZ W8, 0x31E3EE4
	0x031E3EDC BL 0x1C16DFC
	0x031E3EE0 LDR X0, [X22]
	0x031E3EE4 ADRP X9, 0xF3D000
	0x031E3EE8 LDR X8, [X0 + 0xB8]
	0x031E3EEC LDR X9, [X9 + 0x960]
	0x031E3EF0 LDR X21, [X8]
	0x031E3EF4 LDR X0, [X9]
	0x031E3EF8 BL 0x1C16F10
	0x031E3EFC ADRP X8, 0xF3D000
	0x031E3F00 LDR X8, [X8 + 0x978]
	0x031E3F04 MOV X1, X21
	0x031E3F08 MOV X3, X31
	0x031E3F0C MOV X20, X0
	0x031E3F10 LDR X2, [X8]
	0x031E3F14 BL 0x29A80E8
	0x031E3F18 LDR X8, [X22]
	0x031E3F1C LDR X8, [X8 + 0xB8]
	0x031E3F20 STR X20, [X8 + 0x270]
	0x031E3F24 CBZ X19, 0x31E3F4C
	0x031E3F28 ADRP X8, 0xF3D000
	0x031E3F2C LDR X8, [X8 + 0x968]
	0x031E3F30 MOV X0, X19
	0x031E3F34 MOV X1, X20
	0x031E3F38 LDP X20, X19, [X31 + 0x20]
	0x031E3F3C LDR X2, [X8]
	0x031E3F40 LDP X22, X21, [X31 + 0x10]
	0x031E3F44 LDR X30, [X31], #0x30
	0x031E3F48 B 0x2130B88

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11FA000
	007 Move W8, [X20+286]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3E000
	014 Move X0, [X0+2176]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3E000
	017 Move X0, [X0+2184]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3E000
	020 Move X0, [X0+2200]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3E000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+286], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3E000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+512]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3E000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2176]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3E000
	054 Move X8, [X8+2200]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Int16>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+512], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3E000
	066 Move X8, [X8+2184]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.Int32 op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E3F4C BL 0x1C16F20
	0x031E3F50 CBZ X0, 0x31E3F58
	0x031E3F54 B 0x31DAE90
	0x031E3F58 STR X30, [X31 - 0x10]!
	0x031E3F5C BL 0x1C16F20
	0x031E3F60 STR X30, [X31 - 0x30]!
	0x031E3F64 STP X22, X21, [X31 + 0x10]
	0x031E3F68 STP X20, X19, [X31 + 0x20]
	0x031E3F6C ADRP X20, 0x11F9000
	0x031E3F70 LDRB W8, [X20 + 0x12D]
	0x031E3F74 MOV X19, X0
	0x031E3F78 TBNZ X8, 0x0, 0x31E3FC0

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {13}
	004 Move V0, [X0+40]
	005 Move X8, 0x7FF00000
	006 Move D1, X8
	007 Move W9, 0x80000000
	008 NotImplemented "Instruction FCVTZS not yet implemented."
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 NotImplemented "Instruction CSEL not yet implemented."
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: System.Int32[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E3F7C ADRP X0, 0xF3D000
	0x031E3F80 LDR X0, [X0 + 0x980]
	0x031E3F84 BL 0x1C16CF4
	0x031E3F88 ADRP X0, 0xF3D000
	0x031E3F8C LDR X0, [X0 + 0x988]
	0x031E3F90 BL 0x1C16CF4
	0x031E3F94 ADRP X0, 0xF3D000
	0x031E3F98 LDR X0, [X0 + 0x5F8]
	0x031E3F9C BL 0x1C16CF4
	0x031E3FA0 ADRP X0, 0xF3D000
	0x031E3FA4 LDR X0, [X0 + 0x990]
	0x031E3FA8 BL 0x1C16CF4
	0x031E3FAC ADRP X0, 0xF3D000
	0x031E3FB0 LDR X0, [X0 + 0x260]
	0x031E3FB4 BL 0x1C16CF4
	0x031E3FB8 MOVZ W8, 0x1
	0x031E3FBC STRB W8, [X20 + 0x12D]
	0x031E3FC0 CBZ X19, 0x31E407C
	0x031E3FC4 ADRP X22, 0xF3D000
	0x031E3FC8 LDR X22, [X22 + 0x260]
	0x031E3FCC LDR X19, [X19 + 0x30]
	0x031E3FD0 LDR X0, [X22]
	0x031E3FD4 LDR W8, [X0 + 0xE0]
	0x031E3FD8 CBNZ W8, 0x31E3FE4
	0x031E3FDC BL 0x1C16DFC
	0x031E3FE0 LDR X0, [X22]
	0x031E3FE4 LDR X8, [X0 + 0xB8]
	0x031E3FE8 LDR X20, [X8 + 0x278]
	0x031E3FEC CBNZ X20, 0x31E4040
	0x031E3FF0 LDR W8, [X0 + 0xE0]
	0x031E3FF4 CBNZ W8, 0x31E4000
	0x031E3FF8 BL 0x1C16DFC
	0x031E3FFC LDR X0, [X22]
	0x031E4000 ADRP X9, 0xF3C000
	0x031E4004 LDR X8, [X0 + 0xB8]
	0x031E4008 B 0x3EB1614
	0x031E400C LDR X21, [X8]
	0x031E4010 LDR X0, [X9]
	0x031E4014 BL 0x1C16F10
	0x031E4018 ADRP X8, 0xF3C000
	0x031E401C LDR X8, [X8 + 0x990]
	0x031E4020 MOV X1, X21
	0x031E4024 MOV X3, X31
	0x031E4028 MOV X20, X0
	0x031E402C LDR X2, [X8]
	0x031E4030 BL 0x29A8CD4
	0x031E4034 LDR X8, [X22]
	0x031E4038 LDR X8, [X8 + 0xB8]
	0x031E403C STR X20, [X8 + 0x278]
	0x031E4040 CBZ X19, 0x31E407C
	0x031E4044 ADRP X8, 0xF3C000
	0x031E4048 LDR X8, [X8 + 0x988]
	0x031E404C MOV X0, X19
	0x031E4050 MOV X1, X20
	0x031E4054 LDR X2, [X8]
	0x031E4058 BL 0x2131710
	0x031E405C CBZ X0, 0x31E407C
	0x031E4060 ADRP X8, 0xF3C000
	0x031E4064 LDR X8, [X8 + 0x5F8]
	0x031E4068 LDP X20, X19, [X31 + 0x20]
	0x031E406C LDP X22, X21, [X31 + 0x10]
	0x031E4070 LDR X1, [X8]
	0x031E4074 LDR X30, [X31], #0x30
	0x031E4078 B 0x301DDC4
	0x031E407C BL 0x1C16F20
	0x031E4080 STR X30, [X31 - 0x30]!
	0x031E4084 STP X22, X21, [X31 + 0x10]
	0x031E4088 STP X20, X19, [X31 + 0x20]
	0x031E408C ADRP X20, 0x11F8000
	0x031E4090 LDRB W8, [X20 + 0x12E]
	0x031E4094 MOV X19, X0
	0x031E4098 TBNZ X8, 0x0, 0x31E40D4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11FA000
	007 Move W8, [X20+287]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3E000
	014 Move X0, [X0+2208]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3E000
	017 Move X0, [X0+2216]
	018 Call 0x1C17CF4
	019 Move X0, 0xF12000
	020 Move X0, [X0+3608]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3E000
	023 Move X0, [X0+2224]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3E000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+287], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3E000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+520]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3D000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2208]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3D000
	057 Move X8, [X8+2224]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Int32>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+520], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3D000
	069 Move X8, [X8+2216]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF11000
	077 Move X8, [X8+3608]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Int32>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.Int32> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E409C ADRP X0, 0xF3C000
	0x031E40A0 LDR X0, [X0 + 0x980]
	0x031E40A4 BL 0x1C16CF4
	0x031E40A8 ADRP X0, 0xF3C000
	0x031E40AC LDR X0, [X0 + 0x988]
	0x031E40B0 BL 0x1C16CF4
	0x031E40B4 ADRP X0, 0xF3C000
	0x031E40B8 LDR X0, [X0 + 0x998]
	0x031E40BC BL 0x1C16CF4
	0x031E40C0 ADRP X0, 0xF3C000
	0x031E40C4 LDR X0, [X0 + 0x260]
	0x031E40C8 BL 0x1C16CF4
	0x031E40CC MOVZ W8, 0x1
	0x031E40D0 STRB W8, [X20 + 0x12E]
	0x031E40D4 CBZ X19, 0x31E417C
	0x031E40D8 ADRP X22, 0xF3C000
	0x031E40DC LDR X22, [X22 + 0x260]
	0x031E40E0 LDR X19, [X19 + 0x30]
	0x031E40E4 LDR X0, [X22]
	0x031E40E8 LDR W8, [X0 + 0xE0]
	0x031E40EC CBNZ W8, 0x31E40F8
	0x031E40F0 BL 0x1C16DFC
	0x031E40F4 LDR X0, [X22]
	0x031E40F8 LDR X8, [X0 + 0xB8]
	0x031E40FC LDR X20, [X8 + 0x280]
	0x031E4100 CBNZ X20, 0x31E4154
	0x031E4104 LDR W8, [X0 + 0xE0]
	0x031E4108 CBNZ W8, 0x31E4114
	0x031E410C BL 0x1C16DFC
	0x031E4110 LDR X0, [X22]
	0x031E4114 ADRP X9, 0xF3C000
	0x031E4118 LDR X8, [X0 + 0xB8]
	0x031E411C LDR X9, [X9 + 0x980]
	0x031E4120 LDR X21, [X8]
	0x031E4124 LDR X0, [X9]
	0x031E4128 BL 0x1C16F10
	0x031E412C ADRP X8, 0xF3C000
	0x031E4130 LDR X8, [X8 + 0x998]
	0x031E4134 MOV X1, X21
	0x031E4138 MOV X3, X31
	0x031E413C MOV X20, X0
	0x031E4140 LDR X2, [X8]
	0x031E4144 BL 0x29A8CD4
	0x031E4148 LDR X8, [X22]
	0x031E414C LDR X8, [X8 + 0xB8]
	0x031E4150 STR X20, [X8 + 0x280]
	0x031E4154 CBZ X19, 0x31E417C
	0x031E4158 ADRP X8, 0xF3C000
	0x031E415C LDR X8, [X8 + 0x988]
	0x031E4160 MOV X0, X19
	0x031E4164 MOV X1, X20
	0x031E4168 LDP X20, X19, [X31 + 0x20]
	0x031E416C LDR X2, [X8]
	0x031E4170 LDP X22, X21, [X31 + 0x10]
	0x031E4174 LDR X30, [X31], #0x30
	0x031E4178 B 0x2131710
	0x031E417C BL 0x1C16F20
	0x031E4180 STR X30, [X31 - 0x10]!
	0x031E4184 CBZ X0, 0x31E4198
	0x031E4188 LDR X0, [X0 + 0x18]
	0x031E418C MOV X1, X31
	0x031E4190 LDR X30, [X31], #0x10
	0x031E4194 B 0x3376F6C
	0x031E4198 BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F9000
	007 Move W8, [X20+288]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3D000
	014 Move X0, [X0+2208]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3D000
	017 Move X0, [X0+2216]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3D000
	020 Move X0, [X0+2232]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3D000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+288], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3D000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+528]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3D000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2208]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3D000
	054 Move X8, [X8+2232]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Int32>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+528], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3D000
	066 Move X8, [X8+2216]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.Int64 op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E419C STR X30, [X31 - 0x30]!
	0x031E41A0 STP X22, X21, [X31 + 0x10]
	0x031E41A4 STP X20, X19, [X31 + 0x20]
	0x031E41A8 ADRP X20, 0x11F8000
	0x031E41AC LDRB W8, [X20 + 0x12F]
	0x031E41B0 MOV X19, X0
	0x031E41B4 TBNZ X8, 0x0, 0x31E41FC
	0x031E41B8 ADRP X0, 0xF3C000
	0x031E41BC LDR X0, [X0 + 0x9A0]
	0x031E41C0 BL 0x1C16CF4
	0x031E41C4 ADRP X0, 0xF3C000
	0x031E41C8 LDR X0, [X0 + 0x9A8]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {13}
	004 Move V0, [X0+40]
	005 Move X8, 0x7FF00000
	006 Move D1, X8
	007 Move X9, 0x80000000
	008 NotImplemented "Instruction FCVTZS not yet implemented."
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 NotImplemented "Instruction CSEL not yet implemented."
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: System.Int64[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E41CC BL 0x1C16CF4
	0x031E41D0 ADRP X0, 0xF3C000
	0x031E41D4 LDR X0, [X0 + 0x620]
	0x031E41D8 BL 0x1C16CF4
	0x031E41DC ADRP X0, 0xF3C000
	0x031E41E0 LDR X0, [X0 + 0x9B0]
	0x031E41E4 BL 0x1C16CF4
	0x031E41E8 ADRP X0, 0xF3C000
	0x031E41EC LDR X0, [X0 + 0x260]
	0x031E41F0 BL 0x1C16CF4
	0x031E41F4 MOVZ W8, 0x1
	0x031E41F8 STRB W8, [X20 + 0x12F]
	0x031E41FC CBZ X19, 0x31E42B8
	0x031E4200 ADRP X22, 0xF3C000
	0x031E4204 LDR X22, [X22 + 0x260]
	0x031E4208 LDR X19, [X19 + 0x30]
	0x031E420C LDR X0, [X22]
	0x031E4210 LDR W8, [X0 + 0xE0]
	0x031E4214 CBNZ W8, 0x31E4220
	0x031E4218 BL 0x1C16DFC
	0x031E421C LDR X0, [X22]
	0x031E4220 LDR X8, [X0 + 0xB8]
	0x031E4224 LDR X20, [X8 + 0x288]
	0x031E4228 CBNZ X20, 0x31E427C
	0x031E422C LDR W8, [X0 + 0xE0]
	0x031E4230 CBNZ W8, 0x31E423C
	0x031E4234 BL 0x1C16DFC
	0x031E4238 LDR X0, [X22]
	0x031E423C ADRP X9, 0xF3C000
	0x031E4240 LDR X8, [X0 + 0xB8]
	0x031E4244 LDR X9, [X9 + 0x9A0]
	0x031E4248 LDR X21, [X8]
	0x031E424C LDR X0, [X9]
	0x031E4250 BL 0x1C16F10
	0x031E4254 ADRP X8, 0xF3C000
	0x031E4258 LDR X8, [X8 + 0x9B0]
	0x031E425C MOV X1, X21
	0x031E4260 MOV X3, X31
	0x031E4264 MOV X20, X0
	0x031E4268 LDR X2, [X8]
	0x031E426C BL 0x29A8884
	0x031E4270 LDR X8, [X22]
	0x031E4274 LDR X8, [X8 + 0xB8]
	0x031E4278 STR X20, [X8 + 0x288]
	0x031E427C CBZ X19, 0x31E42B8
	0x031E4280 ADRP X8, 0xF3C000
	0x031E4284 LDR X8, [X8 + 0x9A8]
	0x031E4288 MOV X0, X19
	0x031E428C MOV X1, X20
	0x031E4290 LDR X2, [X8]
	0x031E4294 BL 0x21312E8
	0x031E4298 CBZ X0, 0x31E42B8
	0x031E429C ADRP X8, 0xF3C000
	0x031E42A0 LDR X8, [X8 + 0x620]
	0x031E42A4 LDP X20, X19, [X31 + 0x20]
	0x031E42A8 LDP X22, X21, [X31 + 0x10]
	0x031E42AC LDR X1, [X8]
	0x031E42B0 LDR X30, [X31], #0x30
	0x031E42B4 B 0x2FCA018
	0x031E42B8 BL 0x1C16F20
	0x031E42BC STR X30, [X31 - 0x30]!
	0x031E42C0 STP X22, X21, [X31 + 0x10]
	0x031E42C4 STP X20, X19, [X31 + 0x20]
	0x031E42C8 ADRP X20, 0x11F8000
	0x031E42CC LDRB W8, [X20 + 0x130]
	0x031E42D0 MOV X19, X0
	0x031E42D4 TBNZ X8, 0x0, 0x31E4310
	0x031E42D8 ADRP X0, 0xF3C000
	0x031E42DC LDR X0, [X0 + 0x9A0]
	0x031E42E0 BL 0x1C16CF4
	0x031E42E4 ADRP X0, 0xF3C000
	0x031E42E8 LDR X0, [X0 + 0x9A8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F9000
	007 Move W8, [X20+289]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3D000
	014 Move X0, [X0+2240]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3D000
	017 Move X0, [X0+2248]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3D000
	020 Move X0, [X0+1288]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3D000
	023 Move X0, [X0+2256]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3D000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+289], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3D000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+536]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3D000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2240]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3D000
	057 Move X8, [X8+2256]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Int64>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+536], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3D000
	069 Move X8, [X8+2248]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3D000
	077 Move X8, [X8+1288]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Int64>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.Int64> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E42EC BL 0x1C16CF4
	0x031E42F0 ADRP X0, 0xF3C000
	0x031E42F4 LDR X0, [X0 + 0x9B8]
	0x031E42F8 BL 0x1C16CF4
	0x031E42FC ADRP X0, 0xF3C000
	0x031E4300 LDR X0, [X0 + 0x260]
	0x031E4304 BL 0x1C16CF4
	0x031E4308 MOVZ W8, 0x1
	0x031E430C STRB W8, [X20 + 0x130]
	0x031E4310 CBZ X19, 0x31E43B8
	0x031E4314 ADRP X22, 0xF3C000
	0x031E4318 LDR X22, [X22 + 0x260]
	0x031E431C LDR X19, [X19 + 0x30]
	0x031E4320 LDR X0, [X22]
	0x031E4324 LDR W8, [X0 + 0xE0]
	0x031E4328 CBNZ W8, 0x31E4334
	0x031E432C BL 0x1C16DFC
	0x031E4330 LDR X0, [X22]
	0x031E4334 LDR X8, [X0 + 0xB8]
	0x031E4338 LDR X20, [X8 + 0x290]
	0x031E433C CBNZ X20, 0x31E4390
	0x031E4340 LDR W8, [X0 + 0xE0]
	0x031E4344 CBNZ W8, 0x31E4350
	0x031E4348 BL 0x1C16DFC
	0x031E434C LDR X0, [X22]
	0x031E4350 ADRP X9, 0xF3C000
	0x031E4354 LDR X8, [X0 + 0xB8]
	0x031E4358 LDR X9, [X9 + 0x9A0]
	0x031E435C LDR X21, [X8]
	0x031E4360 LDR X0, [X9]
	0x031E4364 BL 0x1C16F10
	0x031E4368 ADRP X8, 0xF3C000
	0x031E436C LDR X8, [X8 + 0x9B8]
	0x031E4370 MOV X1, X21
	0x031E4374 MOV X3, X31
	0x031E4378 MOV X20, X0
	0x031E437C LDR X2, [X8]
	0x031E4380 BL 0x29A8884
	0x031E4384 LDR X8, [X22]
	0x031E4388 LDR X8, [X8 + 0xB8]
	0x031E438C STR X20, [X8 + 0x290]
	0x031E4390 CBZ X19, 0x31E43B8
	0x031E4394 ADRP X8, 0xF3C000
	0x031E4398 LDR X8, [X8 + 0x9A8]
	0x031E439C MOV X0, X19
	0x031E43A0 MOV X1, X20
	0x031E43A4 LDP X20, X19, [X31 + 0x20]
	0x031E43A8 LDR X2, [X8]
	0x031E43AC LDP X22, X21, [X31 + 0x10]
	0x031E43B0 LDR X30, [X31], #0x30
	0x031E43B4 B 0x21312E8
	0x031E43B8 BL 0x1C16F20
	0x031E43BC CBZ X0, 0x31E43C4
	0x031E43C0 B 0x31DAF68
	0x031E43C4 STR X30, [X31 - 0x10]!
	0x031E43C8 BL 0x1C16F20
	0x031E43CC STR X30, [X31 - 0x30]!
	0x031E43D0 STP X22, X21, [X31 + 0x10]
	0x031E43D4 STP X20, X19, [X31 + 0x20]
	0x031E43D8 ADRP X20, 0x11F8000
	0x031E43DC LDRB W8, [X20 + 0x131]
	0x031E43E0 MOV X19, X0
	0x031E43E4 TBNZ X8, 0x0, 0x31E442C
	0x031E43E8 ADRP X0, 0xF3C000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F9000
	007 Move W8, [X20+290]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3D000
	014 Move X0, [X0+2240]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3D000
	017 Move X0, [X0+2248]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3D000
	020 Move X0, [X0+2264]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3D000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+290], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3D000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+544]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3D000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2240]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3D000
	054 Move X8, [X8+2264]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Int64>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+544], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3D000
	066 Move X8, [X8+2248]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.UInt16 op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E43EC LDR X0, [X0 + 0x9C0]
	0x031E43F0 BL 0x1C16CF4
	0x031E43F4 ADRP X0, 0xF3C000
	0x031E43F8 LDR X0, [X0 + 0x9C8]
	0x031E43FC BL 0x1C16CF4
	0x031E4400 ADRP X0, 0xF3C000
	0x031E4404 LDR X0, [X0 + 0x648]
	0x031E4408 BL 0x1C16CF4
	0x031E440C ADRP X0, 0xF3C000

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {10}
	004 Move V0, [X0+40]
	005 NotImplemented "Instruction FCVTZS not yet implemented."
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 NotImplemented "Instruction CSEL not yet implemented."
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: System.UInt16[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E4410 LDR X0, [X0 + 0x9D0]
	0x031E4414 BL 0x1C16CF4
	0x031E4418 ADRP X0, 0xF3C000
	0x031E441C LDR X0, [X0 + 0x260]
	0x031E4420 BL 0x1C16CF4
	0x031E4424 MOVZ W8, 0x1
	0x031E4428 STRB W8, [X20 + 0x131]
	0x031E442C CBZ X19, 0x31E44E8
	0x031E4430 ADRP X22, 0xF3C000
	0x031E4434 LDR X22, [X22 + 0x260]
	0x031E4438 LDR X19, [X19 + 0x30]
	0x031E443C LDR X0, [X22]
	0x031E4440 LDR W8, [X0 + 0xE0]
	0x031E4444 CBNZ W8, 0x31E4450
	0x031E4448 BL 0x1C16DFC
	0x031E444C LDR X0, [X22]
	0x031E4450 LDR X8, [X0 + 0xB8]
	0x031E4454 LDR X20, [X8 + 0x298]
	0x031E4458 CBNZ X20, 0x31E44AC
	0x031E445C LDR W8, [X0 + 0xE0]
	0x031E4460 CBNZ W8, 0x31E446C
	0x031E4464 BL 0x1C16DFC
	0x031E4468 LDR X0, [X22]
	0x031E446C ADRP X9, 0xF3C000
	0x031E4470 LDR X8, [X0 + 0xB8]
	0x031E4474 LDR X9, [X9 + 0x9C0]
	0x031E4478 LDR X21, [X8]
	0x031E447C LDR X0, [X9]
	0x031E4480 BL 0x1C16F10
	0x031E4484 ADRP X8, 0xF3C000
	0x031E4488 LDR X8, [X8 + 0x9D0]
	0x031E448C MOV X1, X21
	0x031E4490 MOV X3, X31
	0x031E4494 MOV X20, X0
	0x031E4498 LDR X2, [X8]
	0x031E449C BL 0x29A8434
	0x031E44A0 LDR X8, [X22]
	0x031E44A4 LDR X8, [X8 + 0xB8]
	0x031E44A8 STR X20, [X8 + 0x298]
	0x031E44AC CBZ X19, 0x31E44E8
	0x031E44B0 ADRP X8, 0xF3C000
	0x031E44B4 LDR X8, [X8 + 0x9C8]
	0x031E44B8 MOV X0, X19
	0x031E44BC MOV X1, X20
	0x031E44C0 LDR X2, [X8]
	0x031E44C4 BL 0x2130EA8
	0x031E44C8 CBZ X0, 0x31E44E8
	0x031E44CC ADRP X8, 0xF3C000
	0x031E44D0 LDR X8, [X8 + 0x648]
	0x031E44D4 LDP X20, X19, [X31 + 0x20]
	0x031E44D8 LDP X22, X21, [X31 + 0x10]
	0x031E44DC LDR X1, [X8]
	0x031E44E0 LDR X30, [X31], #0x30
	0x031E44E4 B 0x2F80994
	0x031E44E8 BL 0x1C16F20
	0x031E44EC STR X30, [X31 - 0x30]!
	0x031E44F0 STP X22, X21, [X31 + 0x10]
	0x031E44F4 STP X20, X19, [X31 + 0x20]
	0x031E44F8 ADRP X20, 0x11F8000
	0x031E44FC LDRB W8, [X20 + 0x132]
	0x031E4500 MOV X19, X0
	0x031E4504 TBNZ X8, 0x0, 0x31E4540
	0x031E4508 ADRP X0, 0xF3C000
	0x031E450C LDR X0, [X0 + 0x9C0]
	0x031E4510 BL 0x1C16CF4
	0x031E4514 ADRP X0, 0xF3C000
	0x031E4518 LDR X0, [X0 + 0x9C8]
	0x031E451C BL 0x1C16CF4
	0x031E4520 ADRP X0, 0xF3C000
	0x031E4524 LDR X0, [X0 + 0x9D8]
	0x031E4528 BL 0x1C16CF4
	0x031E452C ADRP X0, 0xF3C000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F9000
	007 Move W8, [X20+291]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3D000
	014 Move X0, [X0+2272]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3D000
	017 Move X0, [X0+2280]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3D000
	020 Move X0, [X0+1328]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3D000
	023 Move X0, [X0+2288]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3D000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+291], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3D000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+552]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3D000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2272]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3D000
	057 Move X8, [X8+2288]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, UInt16>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+552], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3D000
	069 Move X8, [X8+2280]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3D000
	077 Move X8, [X8+1328]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<UInt16>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.UInt16> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E4530 LDR X0, [X0 + 0x260]
	0x031E4534 BL 0x1C16CF4
	0x031E4538 MOVZ W8, 0x1
	0x031E453C STRB W8, [X20 + 0x132]
	0x031E4540 CBZ X19, 0x31E45E8
	0x031E4544 ADRP X22, 0xF3C000
	0x031E4548 LDR X22, [X22 + 0x260]
	0x031E454C LDR X19, [X19 + 0x30]
	0x031E4550 LDR X0, [X22]
	0x031E4554 LDR W8, [X0 + 0xE0]
	0x031E4558 CBNZ W8, 0x31E4564
	0x031E455C BL 0x1C16DFC
	0x031E4560 LDR X0, [X22]
	0x031E4564 LDR X8, [X0 + 0xB8]
	0x031E4568 LDR X20, [X8 + 0x2A0]
	0x031E456C CBNZ X20, 0x31E45C0
	0x031E4570 LDR W8, [X0 + 0xE0]
	0x031E4574 CBNZ W8, 0x31E4580
	0x031E4578 BL 0x1C16DFC
	0x031E457C LDR X0, [X22]
	0x031E4580 ADRP X9, 0xF3C000
	0x031E4584 LDR X8, [X0 + 0xB8]
	0x031E4588 LDR X9, [X9 + 0x9C0]
	0x031E458C LDR X21, [X8]
	0x031E4590 LDR X0, [X9]
	0x031E4594 BL 0x1C16F10
	0x031E4598 ADRP X8, 0xF3C000
	0x031E459C LDR X8, [X8 + 0x9D8]
	0x031E45A0 MOV X1, X21
	0x031E45A4 MOV X3, X31
	0x031E45A8 MOV X20, X0
	0x031E45AC LDR X2, [X8]
	0x031E45B0 BL 0x29A8434
	0x031E45B4 LDR X8, [X22]
	0x031E45B8 LDR X8, [X8 + 0xB8]
	0x031E45BC STR X20, [X8 + 0x2A0]
	0x031E45C0 CBZ X19, 0x31E45E8
	0x031E45C4 ADRP X8, 0xF3C000
	0x031E45C8 LDR X8, [X8 + 0x9C8]
	0x031E45CC MOV X0, X19
	0x031E45D0 MOV X1, X20
	0x031E45D4 LDP X20, X19, [X31 + 0x20]
	0x031E45D8 LDR X2, [X8]
	0x031E45DC LDP X22, X21, [X31 + 0x10]
	0x031E45E0 LDR X30, [X31], #0x30
	0x031E45E4 B 0x2130EA8
	0x031E45E8 BL 0x1C16F20
	0x031E45EC CBZ X0, 0x31E45F4
	0x031E45F0 B 0x31DB090
	0x031E45F4 STR X30, [X31 - 0x10]!
	0x031E45F8 BL 0x1C16F20
	0x031E45FC STR X30, [X31 - 0x30]!
	0x031E4600 STP X22, X21, [X31 + 0x10]
	0x031E4604 STP X20, X19, [X31 + 0x20]
	0x031E4608 ADRP X20, 0x11F8000
	0x031E460C LDRB W8, [X20 + 0x133]
	0x031E4610 MOV X19, X0
	0x031E4614 TBNZ X8, 0x0, 0x31E465C
	0x031E4618 ADRP X0, 0xF3C000
	0x031E461C LDR X0, [X0 + 0x9E0]
	0x031E4620 BL 0x1C16CF4
	0x031E4624 ADRP X0, 0xF3C000
	0x031E4628 LDR X0, [X0 + 0x9E8]
	0x031E462C BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F9000
	007 Move W8, [X20+292]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3D000
	014 Move X0, [X0+2272]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3D000
	017 Move X0, [X0+2280]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3D000
	020 Move X0, [X0+2296]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3D000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+292], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3D000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+560]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3D000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2272]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3D000
	054 Move X8, [X8+2296]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, UInt16>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+560], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3D000
	066 Move X8, [X8+2280]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.UInt32 op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E4630 ADRP X0, 0xF3C000
	0x031E4634 LDR X0, [X0 + 0x670]
	0x031E4638 BL 0x1C16CF4
	0x031E463C ADRP X0, 0xF3C000
	0x031E4640 LDR X0, [X0 + 0x9F0]
	0x031E4644 BL 0x1C16CF4
	0x031E4648 ADRP X0, 0xF3C000
	0x031E464C LDR X0, [X0 + 0x260]
	0x031E4650 BL 0x1C16CF4
	0x031E4654 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {11}
	004 Move V0, [X0+40]
	005 NotImplemented "Instruction FCVTZS not yet implemented."
	006 NotImplemented "Instruction FCVTZU not yet implemented."
	007 NotImplemented "Instruction FCMP not yet implemented."
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.UInt32[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E4658 STRB W8, [X20 + 0x133]
	0x031E465C CBZ X19, 0x31E4718
	0x031E4660 ADRP X22, 0xF3C000
	0x031E4664 LDR X22, [X22 + 0x260]
	0x031E4668 LDR X19, [X19 + 0x30]
	0x031E466C LDR X0, [X22]
	0x031E4670 LDR W8, [X0 + 0xE0]
	0x031E4674 CBNZ W8, 0x31E4680
	0x031E4678 BL 0x1C16DFC
	0x031E467C LDR X0, [X22]
	0x031E4680 LDR X8, [X0 + 0xB8]
	0x031E4684 LDR X20, [X8 + 0x2A8]
	0x031E4688 CBNZ X20, 0x31E46DC
	0x031E468C LDR W8, [X0 + 0xE0]
	0x031E4690 CBNZ W8, 0x31E469C
	0x031E4694 BL 0x1C16DFC
	0x031E4698 LDR X0, [X22]
	0x031E469C ADRP X9, 0xF3C000
	0x031E46A0 LDR X8, [X0 + 0xB8]
	0x031E46A4 LDR X9, [X9 + 0x9E0]
	0x031E46A8 LDR X21, [X8]
	0x031E46AC LDR X0, [X9]
	0x031E46B0 BL 0x1C16F10
	0x031E46B4 ADRP X8, 0xF3C000
	0x031E46B8 LDR X8, [X8 + 0x9F0]
	0x031E46BC MOV X1, X21
	0x031E46C0 MOV X3, X31
	0x031E46C4 MOV X20, X0
	0x031E46C8 LDR X2, [X8]
	0x031E46CC BL 0x29A8548
	0x031E46D0 LDR X8, [X22]
	0x031E46D4 LDR X8, [X8 + 0xB8]
	0x031E46D8 STR X20, [X8 + 0x2A8]
	0x031E46DC CBZ X19, 0x31E4718
	0x031E46E0 ADRP X8, 0xF3C000
	0x031E46E4 LDR X8, [X8 + 0x9E8]
	0x031E46E8 MOV X0, X19
	0x031E46EC MOV X1, X20
	0x031E46F0 LDR X2, [X8]
	0x031E46F4 BL 0x2130FB4
	0x031E46F8 CBZ X0, 0x31E4718
	0x031E46FC ADRP X8, 0xF3C000
	0x031E4700 LDR X8, [X8 + 0x670]
	0x031E4704 LDP X20, X19, [X31 + 0x20]
	0x031E4708 LDP X22, X21, [X31 + 0x10]
	0x031E470C LDR X1, [X8]
	0x031E4710 LDR X30, [X31], #0x30
	0x031E4714 B 0x2F834B0
	0x031E4718 BL 0x1C16F20
	0x031E471C STR X30, [X31 - 0x30]!
	0x031E4720 STP X22, X21, [X31 + 0x10]
	0x031E4724 STP X20, X19, [X31 + 0x20]
	0x031E4728 ADRP X20, 0x11F8000
	0x031E472C LDRB W8, [X20 + 0x134]
	0x031E4730 MOV X19, X0
	0x031E4734 TBNZ X8, 0x0, 0x31E4770
	0x031E4738 ADRP X0, 0xF3C000
	0x031E473C LDR X0, [X0 + 0x9E0]
	0x031E4740 BL 0x1C16CF4
	0x031E4744 ADRP X0, 0xF3C000
	0x031E4748 LDR X0, [X0 + 0x9E8]
	0x031E474C BL 0x1C16CF4
	0x031E4750 ADRP X0, 0xF3C000
	0x031E4754 LDR X0, [X0 + 0x9F8]
	0x031E4758 BL 0x1C16CF4
	0x031E475C ADRP X0, 0xF3C000
	0x031E4760 LDR X0, [X0 + 0x260]
	0x031E4764 BL 0x1C16CF4
	0x031E4768 MOVZ W8, 0x1
	0x031E476C STRB W8, [X20 + 0x134]
	0x031E4770 CBZ X19, 0x31E4818
	0x031E4774 ADRP X22, 0xF3C000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F9000
	007 Move W8, [X20+293]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3D000
	014 Move X0, [X0+2304]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3D000
	017 Move X0, [X0+2312]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3D000
	020 Move X0, [X0+1368]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3D000
	023 Move X0, [X0+2320]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3D000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+293], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3D000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+568]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3D000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2304]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3D000
	057 Move X8, [X8+2320]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, UInt32>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+568], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3D000
	069 Move X8, [X8+2312]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3D000
	077 Move X8, [X8+1368]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<UInt32>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.UInt32> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E4778 LDR X22, [X22 + 0x260]
	0x031E477C LDR X19, [X19 + 0x30]
	0x031E4780 LDR X0, [X22]
	0x031E4784 LDR W8, [X0 + 0xE0]
	0x031E4788 CBNZ W8, 0x31E4794
	0x031E478C BL 0x1C16DFC
	0x031E4790 LDR X0, [X22]
	0x031E4794 LDR X8, [X0 + 0xB8]
	0x031E4798 LDR X20, [X8 + 0x2B0]
	0x031E479C CBNZ X20, 0x31E47F0
	0x031E47A0 LDR W8, [X0 + 0xE0]
	0x031E47A4 CBNZ W8, 0x31E47B0
	0x031E47A8 BL 0x1C16DFC
	0x031E47AC LDR X0, [X22]
	0x031E47B0 ADRP X9, 0xF3C000
	0x031E47B4 LDR X8, [X0 + 0xB8]
	0x031E47B8 LDR X9, [X9 + 0x9E0]
	0x031E47BC LDR X21, [X8]
	0x031E47C0 LDR X0, [X9]
	0x031E47C4 BL 0x1C16F10
	0x031E47C8 ADRP X8, 0xF3C000
	0x031E47CC LDR X8, [X8 + 0x9F8]
	0x031E47D0 MOV X1, X21
	0x031E47D4 MOV X3, X31
	0x031E47D8 MOV X20, X0
	0x031E47DC LDR X2, [X8]
	0x031E47E0 BL 0x29A8548
	0x031E47E4 LDR X8, [X22]
	0x031E47E8 LDR X8, [X8 + 0xB8]
	0x031E47EC STR X20, [X8 + 0x2B0]
	0x031E47F0 CBZ X19, 0x31E4818
	0x031E47F4 ADRP X8, 0xF3C000
	0x031E47F8 LDR X8, [X8 + 0x9E8]
	0x031E47FC MOV X0, X19
	0x031E4800 MOV X1, X20
	0x031E4804 LDP X20, X19, [X31 + 0x20]
	0x031E4808 LDR X2, [X8]
	0x031E480C LDP X22, X21, [X31 + 0x10]
	0x031E4810 LDR X30, [X31], #0x30
	0x031E4814 B 0x2130FB4
	0x031E4818 BL 0x1C16F20
	0x031E481C STR X30, [X31 - 0x10]!
	0x031E4820 CBZ X0, 0x31E4848
	0x031E4824 LDR V0, [X0 + 0x28]
	0x031E4828 MOVZ X8, 0x7FF00000
	0x031E482C FMOV D1, X8
	0x031E4830 MOVZ X9, 0x80000000
	0x031E4834 FCVTZS X8, D0
	0x031E4838 FCMP D0, D1
	0x031E483C CSEL X0, X9, X8, EQ
	0x031E4840 LDR X30, [X31], #0x10
	0x031E4844 RET
	0x031E4848 BL 0x1C16F20
	0x031E484C STR X30, [X31 - 0x30]!
	0x031E4850 STP X22, X21, [X31 + 0x10]
	0x031E4854 STP X20, X19, [X31 + 0x20]
	0x031E4858 ADRP X20, 0x11F8000
	0x031E485C LDRB W8, [X20 + 0x135]
	0x031E4860 MOV X19, X0
	0x031E4864 TBNZ X8, 0x0, 0x31E48AC
	0x031E4868 ADRP X0, 0xF3C000
	0x031E486C LDR X0, [X0 + 0xA00]
	0x031E4870 BL 0x1C16CF4
	0x031E4874 ADRP X0, 0xF3C000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F9000
	007 Move W8, [X20+294]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3D000
	014 Move X0, [X0+2304]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3D000
	017 Move X0, [X0+2312]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3D000
	020 Move X0, [X0+2328]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3D000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+294], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3D000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+576]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3D000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2304]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3D000
	054 Move X8, [X8+2328]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, UInt32>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+576], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3D000
	066 Move X8, [X8+2312]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.UInt64 op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E4878 LDR X0, [X0 + 0xA08]
	0x031E487C BL 0x1C16CF4
	0x031E4880 ADRP X0, 0xF3C000
	0x031E4884 LDR X0, [X0 + 0x698]
	0x031E4888 BL 0x1C16CF4
	0x031E488C ADRP X0, 0xF3C000
	0x031E4890 LDR X0, [X0 + 0xA10]
	0x031E4894 BL 0x1C16CF4
	0x031E4898 ADRP X0, 0xF3C000
	0x031E489C LDR X0, [X0 + 0x260]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {11}
	004 Move V0, [X0+40]
	005 NotImplemented "Instruction FCVTZS not yet implemented."
	006 NotImplemented "Instruction FCVTZU not yet implemented."
	007 NotImplemented "Instruction FCMP not yet implemented."
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.UInt64[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E48A0 BL 0x1C16CF4
	0x031E48A4 MOVZ W8, 0x1
	0x031E48A8 STRB W8, [X20 + 0x135]
	0x031E48AC CBZ X19, 0x31E4968
	0x031E48B0 ADRP X22, 0xF3C000
	0x031E48B4 LDR X22, [X22 + 0x260]
	0x031E48B8 LDR X19, [X19 + 0x30]
	0x031E48BC LDR X0, [X22]
	0x031E48C0 LDR W8, [X0 + 0xE0]
	0x031E48C4 CBNZ W8, 0x31E48D0
	0x031E48C8 BL 0x1C16DFC
	0x031E48CC LDR X0, [X22]
	0x031E48D0 LDR X8, [X0 + 0xB8]
	0x031E48D4 LDR X20, [X8 + 0x2B8]
	0x031E48D8 CBNZ X20, 0x31E492C
	0x031E48DC LDR W8, [X0 + 0xE0]
	0x031E48E0 CBNZ W8, 0x31E48EC
	0x031E48E4 BL 0x1C16DFC
	0x031E48E8 LDR X0, [X22]
	0x031E48EC ADRP X9, 0xF3C000
	0x031E48F0 LDR X8, [X0 + 0xB8]
	0x031E48F4 LDR X9, [X9 + 0xA00]
	0x031E48F8 LDR X21, [X8]
	0x031E48FC LDR X0, [X9]
	0x031E4900 BL 0x1C16F10
	0x031E4904 ADRP X8, 0xF3C000
	0x031E4908 LDR X8, [X8 + 0xA10]
	0x031E490C MOV X1, X21
	0x031E4910 MOV X3, X31
	0x031E4914 MOV X20, X0
	0x031E4918 LDR X2, [X8]
	0x031E491C BL 0x29A9238
	0x031E4920 LDR X8, [X22]
	0x031E4924 LDR X8, [X8 + 0xB8]
	0x031E4928 STR X20, [X8 + 0x2B8]
	0x031E492C CBZ X19, 0x31E4968
	0x031E4930 ADRP X8, 0xF3C000
	0x031E4934 LDR X8, [X8 + 0xA08]
	0x031E4938 MOV X0, X19
	0x031E493C MOV X1, X20
	0x031E4940 LDR X2, [X8]
	0x031E4944 BL 0x2131C54
	0x031E4948 CBZ X0, 0x31E4968
	0x031E494C ADRP X8, 0xF3C000
	0x031E4950 LDR X8, [X8 + 0x698]
	0x031E4954 LDP X20, X19, [X31 + 0x20]
	0x031E4958 LDP X22, X21, [X31 + 0x10]
	0x031E495C LDR X1, [X8]
	0x031E4960 LDR X30, [X31], #0x30
	0x031E4964 B 0x3083E94
	0x031E4968 BL 0x1C16F20
	0x031E496C STR X30, [X31 - 0x30]!
	0x031E4970 STP X22, X21, [X31 + 0x10]
	0x031E4974 STP X20, X19, [X31 + 0x20]
	0x031E4978 ADRP X20, 0x11F8000
	0x031E497C LDRB W8, [X20 + 0x136]
	0x031E4980 MOV X19, X0
	0x031E4984 TBNZ X8, 0x0, 0x31E49C0
	0x031E4988 ADRP X0, 0xF3C000
	0x031E498C LDR X0, [X0 + 0xA00]
	0x031E4990 BL 0x1C16CF4
	0x031E4994 ADRP X0, 0xF3C000
	0x031E4998 LDR X0, [X0 + 0xA08]
	0x031E499C BL 0x1C16CF4
	0x031E49A0 ADRP X0, 0xF3C000
	0x031E49A4 LDR X0, [X0 + 0xA18]
	0x031E49A8 BL 0x1C16CF4
	0x031E49AC ADRP X0, 0xF3C000
	0x031E49B0 LDR X0, [X0 + 0x260]
	0x031E49B4 BL 0x1C16CF4
	0x031E49B8 MOVZ W8, 0x1
	0x031E49BC STRB W8, [X20 + 0x136]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F9000
	007 Move W8, [X20+295]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3D000
	014 Move X0, [X0+2336]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3D000
	017 Move X0, [X0+2344]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3D000
	020 Move X0, [X0+1408]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3D000
	023 Move X0, [X0+2352]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3D000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+295], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3D000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+584]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3D000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2336]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3D000
	057 Move X8, [X8+2352]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, UInt64>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+584], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3D000
	069 Move X8, [X8+2344]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3D000
	077 Move X8, [X8+1408]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<UInt64>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.UInt64> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E49C0 CBZ X19, 0x31E4A68
	0x031E49C4 ADRP X22, 0xF3C000
	0x031E49C8 LDR X22, [X22 + 0x260]
	0x031E49CC LDR X19, [X19 + 0x30]
	0x031E49D0 LDR X0, [X22]
	0x031E49D4 LDR W8, [X0 + 0xE0]
	0x031E49D8 CBNZ W8, 0x31E49E4
	0x031E49DC BL 0x1C16DFC
	0x031E49E0 LDR X0, [X22]
	0x031E49E4 LDR X8, [X0 + 0xB8]
	0x031E49E8 LDR X20, [X8 + 0x2C0]
	0x031E49EC CBNZ X20, 0x31E4A40
	0x031E49F0 LDR W8, [X0 + 0xE0]
	0x031E49F4 CBNZ W8, 0x31E4A00
	0x031E49F8 BL 0x1C16DFC
	0x031E49FC LDR X0, [X22]
	0x031E4A00 ADRP X9, 0xF3C000
	0x031E4A04 LDR X8, [X0 + 0xB8]
	0x031E4A08 LDR X9, [X9 + 0xA00]
	0x031E4A0C LDR X21, [X8]
	0x031E4A10 LDR X0, [X9]
	0x031E4A14 BL 0x1C16F10
	0x031E4A18 ADRP X8, 0xF3C000
	0x031E4A1C LDR X8, [X8 + 0xA18]
	0x031E4A20 MOV X1, X21
	0x031E4A24 MOV X3, X31
	0x031E4A28 MOV X20, X0
	0x031E4A2C LDR X2, [X8]
	0x031E4A30 BL 0x29A9238
	0x031E4A34 LDR X8, [X22]
	0x031E4A38 LDR X8, [X8 + 0xB8]
	0x031E4A3C STR X20, [X8 + 0x2C0]
	0x031E4A40 CBZ X19, 0x31E4A68
	0x031E4A44 ADRP X8, 0xF3C000
	0x031E4A48 LDR X8, [X8 + 0xA08]
	0x031E4A4C MOV X0, X19
	0x031E4A50 MOV X1, X20
	0x031E4A54 LDP X20, X19, [X31 + 0x20]
	0x031E4A58 LDR X2, [X8]
	0x031E4A5C LDP X22, X21, [X31 + 0x10]
	0x031E4A60 LDR X30, [X31], #0x30
	0x031E4A64 B 0x2131C54
	0x031E4A68 BL 0x1C16F20
	0x031E4A6C CBZ X0, 0x31E4A74
	0x031E4A70 B 0x31DB22C
	0x031E4A74 STR X30, [X31 - 0x10]!
	0x031E4A78 BL 0x1C16F20
	0x031E4A7C STR X30, [X31 - 0x30]!
	0x031E4A80 STP X22, X21, [X31 + 0x10]
	0x031E4A84 STP X20, X19, [X31 + 0x20]
	0x031E4A88 ADRP X20, 0x11F8000
	0x031E4A8C LDRB W8, [X20 + 0x137]
	0x031E4A90 MOV X19, X0
	0x031E4A94 TBNZ X8, 0x0, 0x31E4ADC
	0x031E4A98 ADRP X0, 0xF3C000
	0x031E4A9C LDR X0, [X0 + 0xA20]
	0x031E4AA0 BL 0x1C16CF4
	0x031E4AA4 ADRP X0, 0xF3C000
	0x031E4AA8 LDR X0, [X0 + 0xA28]
	0x031E4AAC BL 0x1C16CF4
	0x031E4AB0 ADRP X0, 0xF3C000
	0x031E4AB4 LDR X0, [X0 + 0x6C0]
	0x031E4AB8 BL 0x1C16CF4
	0x031E4ABC ADRP X0, 0xF3C000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F9000
	007 Move W8, [X20+296]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3D000
	014 Move X0, [X0+2336]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3D000
	017 Move X0, [X0+2344]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3D000
	020 Move X0, [X0+2360]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3D000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+296], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3D000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+592]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3D000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2336]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3D000
	054 Move X8, [X8+2360]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, UInt64>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+592], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3D000
	066 Move X8, [X8+2344]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.SByte op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E4AC0 LDR X0, [X0 + 0xA30]
	0x031E4AC4 BL 0x1C16CF4
	0x031E4AC8 ADRP X0, 0xF3C000
	0x031E4ACC LDR X0, [X0 + 0x260]
	0x031E4AD0 BL 0x1C16CF4
	0x031E4AD4 MOVZ W8, 0x1
	0x031E4AD8 STRB W8, [X20 + 0x137]
	0x031E4ADC CBZ X19, 0x31E4B98
	0x031E4AE0 ADRP X22, 0xF3C000
	0x031E4AE4 LDR X22, [X22 + 0x260]
	0x031E4AE8 LDR X19, [X19 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {12}
	004 Move V0, [X0+40]
	005 Move X8, 0x7FF00000
	006 Move D1, X8
	007 NotImplemented "Instruction FCVTZS not yet implemented."
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 NotImplemented "Instruction CSEL not yet implemented."
	010 Move X30, [X31+16]
	011 Return X0
	012 Call 0x1C17F20

Method: System.SByte[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E4AEC LDR X0, [X22]
	0x031E4AF0 LDR W8, [X0 + 0xE0]
	0x031E4AF4 CBNZ W8, 0x31E4B00
	0x031E4AF8 BL 0x1C16DFC
	0x031E4AFC LDR X0, [X22]
	0x031E4B00 LDR X8, [X0 + 0xB8]
	0x031E4B04 LDR X20, [X8 + 0x2C8]
	0x031E4B08 CBNZ X20, 0x31E4B5C
	0x031E4B0C LDR W8, [X0 + 0xE0]
	0x031E4B10 CBNZ W8, 0x31E4B1C
	0x031E4B14 BL 0x1C16DFC
	0x031E4B18 LDR X0, [X22]
	0x031E4B1C ADRP X9, 0xF3C000
	0x031E4B20 LDR X8, [X0 + 0xB8]
	0x031E4B24 LDR X9, [X9 + 0xA20]
	0x031E4B28 LDR X21, [X8]
	0x031E4B2C LDR X0, [X9]
	0x031E4B30 BL 0x1C16F10
	0x031E4B34 ADRP X8, 0xF3C000
	0x031E4B38 LDR X8, [X8 + 0xA30]
	0x031E4B3C MOV X1, X21
	0x031E4B40 MOV X3, X31
	0x031E4B44 MOV X20, X0
	0x031E4B48 LDR X2, [X8]
	0x031E4B4C BL 0x29A81FC
	0x031E4B50 LDR X8, [X22]
	0x031E4B54 LDR X8, [X8 + 0xB8]
	0x031E4B58 STR X20, [X8 + 0x2C8]
	0x031E4B5C CBZ X19, 0x31E4B98
	0x031E4B60 ADRP X8, 0xF3C000
	0x031E4B64 LDR X8, [X8 + 0xA28]
	0x031E4B68 MOV X0, X19
	0x031E4B6C MOV X1, X20
	0x031E4B70 LDR X2, [X8]
	0x031E4B74 BL 0x2130C8C
	0x031E4B78 CBZ X0, 0x31E4B98
	0x031E4B7C ADRP X8, 0xF3C000
	0x031E4B80 LDR X8, [X8 + 0x6C0]
	0x031E4B84 LDP X20, X19, [X31 + 0x20]
	0x031E4B88 LDP X22, X21, [X31 + 0x10]
	0x031E4B8C LDR X1, [X8]
	0x031E4B90 LDR X30, [X31], #0x30
	0x031E4B94 B 0x2F6F36C
	0x031E4B98 BL 0x1C16F20
	0x031E4B9C STR X30, [X31 - 0x30]!
	0x031E4BA0 STP X22, X21, [X31 + 0x10]
	0x031E4BA4 STP X20, X19, [X31 + 0x20]
	0x031E4BA8 ADRP X20, 0x11F8000
	0x031E4BAC LDRB W8, [X20 + 0x138]
	0x031E4BB0 MOV X19, X0
	0x031E4BB4 TBNZ X8, 0x0, 0x31E4BF0
	0x031E4BB8 ADRP X0, 0xF3C000
	0x031E4BBC LDR X0, [X0 + 0xA20]
	0x031E4BC0 BL 0x1C16CF4
	0x031E4BC4 ADRP X0, 0xF3C000
	0x031E4BC8 LDR X0, [X0 + 0xA28]
	0x031E4BCC BL 0x1C16CF4
	0x031E4BD0 ADRP X0, 0xF3C000
	0x031E4BD4 LDR X0, [X0 + 0xA38]
	0x031E4BD8 BL 0x1C16CF4
	0x031E4BDC ADRP X0, 0xF3C000
	0x031E4BE0 LDR X0, [X0 + 0x260]
	0x031E4BE4 BL 0x1C16CF4
	0x031E4BE8 MOVZ W8, 0x1
	0x031E4BEC STRB W8, [X20 + 0x138]
	0x031E4BF0 CBZ X19, 0x31E4C98
	0x031E4BF4 ADRP X22, 0xF3C000
	0x031E4BF8 LDR X22, [X22 + 0x260]
	0x031E4BFC LDR X19, [X19 + 0x30]
	0x031E4C00 LDR X0, [X22]
	0x031E4C04 LDR W8, [X0 + 0xE0]
	0x031E4C08 CBNZ W8, 0x31E4C14

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F9000
	007 Move W8, [X20+297]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3D000
	014 Move X0, [X0+2368]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3D000
	017 Move X0, [X0+2376]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3D000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3D000
	023 Move X0, [X0+2384]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3D000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+297], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3D000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+600]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3D000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2368]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3D000
	057 Move X8, [X8+2384]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, SByte>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+600], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3D000
	069 Move X8, [X8+2376]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3D000
	077 Move X8, [X8+1448]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<SByte>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.SByte> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E4C0C BL 0x1C16DFC
	0x031E4C10 LDR X0, [X22]
	0x031E4C14 LDR X8, [X0 + 0xB8]
	0x031E4C18 LDR X20, [X8 + 0x2D0]
	0x031E4C1C CBNZ X20, 0x31E4C70
	0x031E4C20 LDR W8, [X0 + 0xE0]
	0x031E4C24 CBNZ W8, 0x31E4C30
	0x031E4C28 BL 0x1C16DFC
	0x031E4C2C LDR X0, [X22]
	0x031E4C30 ADRP X9, 0xF3C000
	0x031E4C34 LDR X8, [X0 + 0xB8]
	0x031E4C38 LDR X9, [X9 + 0xA20]
	0x031E4C3C LDR X21, [X8]
	0x031E4C40 LDR X0, [X9]
	0x031E4C44 BL 0x1C16F10
	0x031E4C48 ADRP X8, 0xF3C000
	0x031E4C4C LDR X8, [X8 + 0xA38]
	0x031E4C50 MOV X1, X21
	0x031E4C54 MOV X3, X31
	0x031E4C58 MOV X20, X0
	0x031E4C5C LDR X2, [X8]
	0x031E4C60 BL 0x29A81FC
	0x031E4C64 LDR X8, [X22]
	0x031E4C68 LDR X8, [X8 + 0xB8]
	0x031E4C6C STR X20, [X8 + 0x2D0]
	0x031E4C70 CBZ X19, 0x31E4C98
	0x031E4C74 ADRP X8, 0xF3C000
	0x031E4C78 LDR X8, [X8 + 0xA28]
	0x031E4C7C MOV X0, X19
	0x031E4C80 MOV X1, X20
	0x031E4C84 LDP X20, X19, [X31 + 0x20]
	0x031E4C88 LDR X2, [X8]
	0x031E4C8C LDP X22, X21, [X31 + 0x10]
	0x031E4C90 LDR X30, [X31], #0x30
	0x031E4C94 B 0x2130C8C
	0x031E4C98 BL 0x1C16F20
	0x031E4C9C STR X30, [X31 - 0x10]!
	0x031E4CA0 CBZ X0, 0x31E4CB4
	0x031E4CA4 BL 0x31DB4BC
	0x031E4CA8 AND X0, X0, 0x0
	0x031E4CAC LDR X30, [X31], #0x10
	0x031E4CB0 RET
	0x031E4CB4 BL 0x1C16F20
	0x031E4CB8 STR X30, [X31 - 0x30]!
	0x031E4CBC STP X22, X21, [X31 + 0x10]
	0x031E4CC0 STP X20, X19, [X31 + 0x20]
	0x031E4CC4 ADRP X20, 0x11F8000
	0x031E4CC8 LDRB W8, [X20 + 0x139]
	0x031E4CCC MOV X19, X0
	0x031E4CD0 TBNZ X8, 0x0, 0x31E4D18
	0x031E4CD4 ADRP X0, 0xF3C000
	0x031E4CD8 LDR X0, [X0 + 0xA40]
	0x031E4CDC BL 0x1C16CF4
	0x031E4CE0 ADRP X0, 0xF3C000
	0x031E4CE4 LDR X0, [X0 + 0xA48]
	0x031E4CE8 BL 0x1C16CF4
	0x031E4CEC ADRP X0, 0xF3C000
	0x031E4CF0 LDR X0, [X0 + 0x6E8]
	0x031E4CF4 BL 0x1C16CF4
	0x031E4CF8 ADRP X0, 0xF3C000
	0x031E4CFC LDR X0, [X0 + 0xA50]
	0x031E4D00 BL 0x1C16CF4
	0x031E4D04 ADRP X0, 0xF3C000
	0x031E4D08 LDR X0, [X0 + 0x260]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F9000
	007 Move W8, [X20+298]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3D000
	014 Move X0, [X0+2368]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3D000
	017 Move X0, [X0+2376]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3D000
	020 Move X0, [X0+2392]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3D000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+298], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3D000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+608]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3D000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2368]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3D000
	054 Move X8, [X8+2392]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, SByte>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+608], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3D000
	066 Move X8, [X8+2376]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.Byte op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E4D0C BL 0x1C16CF4
	0x031E4D10 MOVZ W8, 0x1
	0x031E4D14 STRB W8, [X20 + 0x139]
	0x031E4D18 CBZ X19, 0x31E4DD4
	0x031E4D1C ADRP X22, 0xF3C000
	0x031E4D20 LDR X22, [X22 + 0x260]
	0x031E4D24 LDR X19, [X19 + 0x30]
	0x031E4D28 LDR X0, [X22]
	0x031E4D2C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {10}
	004 Move V0, [X0+40]
	005 NotImplemented "Instruction FCVTZS not yet implemented."
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 NotImplemented "Instruction CSEL not yet implemented."
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: System.Byte[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E4D30 CBNZ W8, 0x31E4D3C
	0x031E4D34 BL 0x1C16DFC
	0x031E4D38 LDR X0, [X22]
	0x031E4D3C LDR X8, [X0 + 0xB8]
	0x031E4D40 LDR X20, [X8 + 0x2D8]
	0x031E4D44 CBNZ X20, 0x31E4D98
	0x031E4D48 LDR W8, [X0 + 0xE0]
	0x031E4D4C CBNZ W8, 0x31E4D58
	0x031E4D50 BL 0x1C16DFC
	0x031E4D54 LDR X0, [X22]
	0x031E4D58 ADRP X9, 0xF3C000
	0x031E4D5C LDR X8, [X0 + 0xB8]
	0x031E4D60 LDR X9, [X9 + 0xA40]
	0x031E4D64 LDR X21, [X8]
	0x031E4D68 LDR X0, [X9]
	0x031E4D6C BL 0x1C16F10
	0x031E4D70 ADRP X8, 0xF3C000
	0x031E4D74 LDR X8, [X8 + 0xA50]
	0x031E4D78 MOV X1, X21
	0x031E4D7C MOV X3, X31
	0x031E4D80 MOV X20, X0
	0x031E4D84 LDR X2, [X8]
	0x031E4D88 BL 0x29A8310
	0x031E4D8C LDR X8, [X22]
	0x031E4D90 LDR X8, [X8 + 0xB8]
	0x031E4D94 STR X20, [X8 + 0x2D8]
	0x031E4D98 CBZ X19, 0x31E4DD4
	0x031E4D9C ADRP X8, 0xF3C000
	0x031E4DA0 LDR X8, [X8 + 0xA48]
	0x031E4DA4 MOV X0, X19
	0x031E4DA8 MOV X1, X20
	0x031E4DAC LDR X2, [X8]
	0x031E4DB0 BL 0x2130DA4
	0x031E4DB4 CBZ X0, 0x31E4DD4
	0x031E4DB8 ADRP X8, 0xF3C000
	0x031E4DBC LDR X8, [X8 + 0x6E8]
	0x031E4DC0 LDP X20, X19, [X31 + 0x20]
	0x031E4DC4 LDP X22, X21, [X31 + 0x10]
	0x031E4DC8 LDR X1, [X8]
	0x031E4DCC LDR X30, [X31], #0x30
	0x031E4DD0 B 0x2F71E10
	0x031E4DD4 BL 0x1C16F20
	0x031E4DD8 STR X30, [X31 - 0x30]!
	0x031E4DDC STP X22, X21, [X31 + 0x10]
	0x031E4DE0 STP X20, X19, [X31 + 0x20]
	0x031E4DE4 ADRP X20, 0x11F8000
	0x031E4DE8 LDRB W8, [X20 + 0x13A]
	0x031E4DEC MOV X19, X0
	0x031E4DF0 TBNZ X8, 0x0, 0x31E4E2C
	0x031E4DF4 ADRP X0, 0xF3C000
	0x031E4DF8 LDR X0, [X0 + 0xA40]
	0x031E4DFC BL 0x1C16CF4
	0x031E4E00 ADRP X0, 0xF3C000
	0x031E4E04 LDR X0, [X0 + 0xA48]
	0x031E4E08 BL 0x1C16CF4
	0x031E4E0C ADRP X0, 0xF3C000
	0x031E4E10 LDR X0, [X0 + 0xA58]
	0x031E4E14 BL 0x1C16CF4
	0x031E4E18 ADRP X0, 0xF3C000
	0x031E4E1C LDR X0, [X0 + 0x260]
	0x031E4E20 BL 0x1C16CF4
	0x031E4E24 MOVZ W8, 0x1
	0x031E4E28 STRB W8, [X20 + 0x13A]
	0x031E4E2C CBZ X19, 0x31E4ED4
	0x031E4E30 ADRP X22, 0xF3C000
	0x031E4E34 LDR X22, [X22 + 0x260]
	0x031E4E38 LDR X19, [X19 + 0x30]
	0x031E4E3C LDR X0, [X22]
	0x031E4E40 LDR W8, [X0 + 0xE0]
	0x031E4E44 CBNZ W8, 0x31E4E50
	0x031E4E48 BL 0x1C16DFC
	0x031E4E4C LDR X0, [X22]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F9000
	007 Move W8, [X20+299]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3D000
	014 Move X0, [X0+2400]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3D000
	017 Move X0, [X0+2408]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3D000
	020 Move X0, [X0+1488]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3D000
	023 Move X0, [X0+2416]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3D000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+299], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3D000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+616]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3D000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2400]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3D000
	057 Move X8, [X8+2416]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Byte>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+616], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3D000
	069 Move X8, [X8+2408]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3D000
	077 Move X8, [X8+1488]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Byte>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.Byte> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E4E50 LDR X8, [X0 + 0xB8]
	0x031E4E54 LDR X20, [X8 + 0x2E0]
	0x031E4E58 CBNZ X20, 0x31E4EAC
	0x031E4E5C LDR W8, [X0 + 0xE0]
	0x031E4E60 CBNZ W8, 0x31E4E6C
	0x031E4E64 BL 0x1C16DFC
	0x031E4E68 LDR X0, [X22]
	0x031E4E6C ADRP X9, 0xF3C000
	0x031E4E70 LDR X8, [X0 + 0xB8]
	0x031E4E74 LDR X9, [X9 + 0xA40]
	0x031E4E78 LDR X21, [X8]
	0x031E4E7C LDR X0, [X9]
	0x031E4E80 BL 0x1C16F10
	0x031E4E84 ADRP X8, 0xF3C000
	0x031E4E88 LDR X8, [X8 + 0xA58]
	0x031E4E8C MOV X1, X21
	0x031E4E90 MOV X3, X31
	0x031E4E94 MOV X20, X0
	0x031E4E98 LDR X2, [X8]
	0x031E4E9C BL 0x29A8310
	0x031E4EA0 LDR X8, [X22]
	0x031E4EA4 LDR X8, [X8 + 0xB8]
	0x031E4EA8 STR X20, [X8 + 0x2E0]
	0x031E4EAC CBZ X19, 0x31E4ED4
	0x031E4EB0 ADRP X8, 0xF3C000
	0x031E4EB4 LDR X8, [X8 + 0xA48]
	0x031E4EB8 MOV X0, X19
	0x031E4EBC MOV X1, X20
	0x031E4EC0 LDP X20, X19, [X31 + 0x20]
	0x031E4EC4 LDR X2, [X8]
	0x031E4EC8 LDP X22, X21, [X31 + 0x10]
	0x031E4ECC LDR X30, [X31], #0x30
	0x031E4ED0 B 0x2130DA4
	0x031E4ED4 BL 0x1C16F20
	0x031E4ED8 CBZ X0, 0x31E4EE0
	0x031E4EDC B 0x31DB790
	0x031E4EE0 STR X30, [X31 - 0x10]!
	0x031E4EE4 BL 0x1C16F20
	0x031E4EE8 STR X30, [X31 - 0x30]!
	0x031E4EEC STP X22, X21, [X31 + 0x10]
	0x031E4EF0 STP X20, X19, [X31 + 0x20]
	0x031E4EF4 ADRP X20, 0x11F8000
	0x031E4EF8 LDRB W8, [X20 + 0x13B]
	0x031E4EFC MOV X19, X0
	0x031E4F00 TBNZ X8, 0x0, 0x31E4F48
	0x031E4F04 ADRP X0, 0xF3C000
	0x031E4F08 LDR X0, [X0 + 0xA60]
	0x031E4F0C BL 0x1C16CF4
	0x031E4F10 ADRP X0, 0xF3C000
	0x031E4F14 LDR X0, [X0 + 0xA68]
	0x031E4F18 BL 0x1C16CF4
	0x031E4F1C ADRP X0, 0xF3C000
	0x031E4F20 LDR X0, [X0 + 0x710]
	0x031E4F24 BL 0x1C16CF4
	0x031E4F28 ADRP X0, 0xF3C000
	0x031E4F2C LDR X0, [X0 + 0xA70]
	0x031E4F30 BL 0x1C16CF4
	0x031E4F34 ADRP X0, 0xF3C000
	0x031E4F38 LDR X0, [X0 + 0x260]
	0x031E4F3C BL 0x1C16CF4
	0x031E4F40 MOVZ W8, 0x1
	0x031E4F44 STRB W8, [X20 + 0x13B]
	0x031E4F48 CBZ X19, 0x31E5004
	0x031E4F4C ADRP X22, 0xF3C000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F9000
	007 Move W8, [X20+300]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3D000
	014 Move X0, [X0+2400]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3D000
	017 Move X0, [X0+2408]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3D000
	020 Move X0, [X0+2424]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3D000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+300], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3D000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+624]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3D000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2400]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3D000
	054 Move X8, [X8+2424]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Byte>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+624], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3D000
	066 Move X8, [X8+2408]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.Uri op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E4F50 LDR X22, [X22 + 0x260]
	0x031E4F54 LDR X19, [X19 + 0x30]
	0x031E4F58 LDR X0, [X22]
	0x031E4F5C LDR W8, [X0 + 0xE0]

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {5}
	003 Call Value.get_Uri, X0
	004 Return X0
	005 Move [X31-16], X30
	006 Call 0x1C17F20

Method: System.Uri[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E4F60 CBNZ W8, 0x31E4F6C
	0x031E4F64 BL 0x1C16DFC
	0x031E4F68 LDR X0, [X22]
	0x031E4F6C LDR X8, [X0 + 0xB8]
	0x031E4F70 LDR X20, [X8 + 0x2E8]
	0x031E4F74 CBNZ X20, 0x31E4FC8
	0x031E4F78 LDR W8, [X0 + 0xE0]
	0x031E4F7C CBNZ W8, 0x31E4F88
	0x031E4F80 BL 0x1C16DFC
	0x031E4F84 LDR X0, [X22]
	0x031E4F88 ADRP X9, 0xF3C000
	0x031E4F8C LDR X8, [X0 + 0xB8]
	0x031E4F90 LDR X9, [X9 + 0xA60]
	0x031E4F94 LDR X21, [X8]
	0x031E4F98 LDR X0, [X9]
	0x031E4F9C BL 0x1C16F10
	0x031E4FA0 ADRP X8, 0xF3C000
	0x031E4FA4 LDR X8, [X8 + 0xA70]
	0x031E4FA8 MOV X1, X21
	0x031E4FAC MOV X3, X31
	0x031E4FB0 MOV X20, X0
	0x031E4FB4 LDR X2, [X8]
	0x031E4FB8 BL 0x29A9688
	0x031E4FBC LDR X8, [X22]
	0x031E4FC0 LDR X8, [X8 + 0xB8]
	0x031E4FC4 STR X20, [X8 + 0x2E8]
	0x031E4FC8 CBZ X19, 0x31E5004
	0x031E4FCC ADRP X8, 0xF3C000
	0x031E4FD0 LDR X8, [X8 + 0xA68]
	0x031E4FD4 MOV X0, X19
	0x031E4FD8 MOV X1, X20
	0x031E4FDC LDR X2, [X8]
	0x031E4FE0 BL 0x2132074
	0x031E4FE4 CBZ X0, 0x31E5004
	0x031E4FE8 ADRP X8, 0xF3C000
	0x031E4FEC LDR X8, [X8 + 0x710]
	0x031E4FF0 LDP X20, X19, [X31 + 0x20]
	0x031E4FF4 LDP X22, X21, [X31 + 0x10]
	0x031E4FF8 LDR X1, [X8]
	0x031E4FFC LDR X30, [X31], #0x30
	0x031E5000 B 0x30CB4BC
	0x031E5004 BL 0x1C16F20
	0x031E5008 STR X30, [X31 - 0x30]!
	0x031E500C STP X22, X21, [X31 + 0x10]
	0x031E5010 STP X20, X19, [X31 + 0x20]
	0x031E5014 ADRP X20, 0x11F7000
	0x031E5018 LDRB W8, [X20 + 0x13C]
	0x031E501C MOV X19, X0
	0x031E5020 TBNZ X8, 0x0, 0x31E505C
	0x031E5024 ADRP X0, 0xF3B000
	0x031E5028 LDR X0, [X0 + 0xA60]
	0x031E502C BL 0x1C16CF4
	0x031E5030 ADRP X0, 0xF3B000
	0x031E5034 LDR X0, [X0 + 0xA68]
	0x031E5038 BL 0x1C16CF4
	0x031E503C ADRP X0, 0xF3B000
	0x031E5040 LDR X0, [X0 + 0xA78]
	0x031E5044 BL 0x1C16CF4
	0x031E5048 ADRP X0, 0xF3B000
	0x031E504C LDR X0, [X0 + 0x260]
	0x031E5050 BL 0x1C16CF4
	0x031E5054 MOVZ W8, 0x1
	0x031E5058 STRB W8, [X20 + 0x13C]
	0x031E505C CBZ X19, 0x31E5104
	0x031E5060 ADRP X22, 0xF3B000
	0x031E5064 LDR X22, [X22 + 0x260]
	0x031E5068 LDR X19, [X19 + 0x30]
	0x031E506C LDR X0, [X22]
	0x031E5070 LDR W8, [X0 + 0xE0]
	0x031E5074 CBNZ W8, 0x31E5080
	0x031E5078 BL 0x1C16DFC
	0x031E507C LDR X0, [X22]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F9000
	007 Move W8, [X20+301]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3D000
	014 Move X0, [X0+2432]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3D000
	017 Move X0, [X0+2440]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3D000
	020 Move X0, [X0+1528]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3D000
	023 Move X0, [X0+2448]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3D000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+301], W8
	030 Compare X19, 0
	031 JumpIfEqual {87}
	032 Move X22, 0xF3D000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+632]
	043 Compare X20, 0
	044 JumpIfNotEqual {67}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3C000
	051 Move X8, [X0+184]
	052 Call 0x3EB2614
	053 Return X0
	054 Move X21, [X8]
	055 Move X0, [X9]
	056 Call 0x1C17F10
	057 Move X8, 0xF3C000
	058 Move X8, [X8+2448]
	059 Move X1, X21
	060 Move X3, X31
	061 Move X20, X0
	062 Move X2, [X8]
	063 Call Converter`2<Object, Object>..ctor, X0, X1, X2
	064 Move X8, [X22]
	065 Move X8, [X8+184]
	066 Move [X8+632], X20
	067 Compare X19, 0
	068 JumpIfEqual {87}
	069 Move X8, 0xF3C000
	070 Move X8, [X8+2440]
	071 Move X0, X19
	072 Move X1, X20
	073 Move X2, [X8]
	074 Call List`1<Object>.ConvertAll, X0, X1
	075 Compare X0, 0
	076 JumpIfEqual {87}
	077 Move X8, 0xF3C000
	078 Move X8, [X8+1528]
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X1, [X8]
	084 Move X30, [X31+48]
	085 Call List`1<Object>.ToArray, X0
	086 Return X0
	087 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.Uri> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E5080 LDR X8, [X0 + 0xB8]
	0x031E5084 LDR X20, [X8 + 0x2F0]
	0x031E5088 CBNZ X20, 0x31E50DC
	0x031E508C LDR W8, [X0 + 0xE0]
	0x031E5090 CBNZ W8, 0x31E509C
	0x031E5094 BL 0x1C16DFC
	0x031E5098 LDR X0, [X22]
	0x031E509C ADRP X9, 0xF3B000
	0x031E50A0 LDR X8, [X0 + 0xB8]
	0x031E50A4 LDR X9, [X9 + 0xA60]
	0x031E50A8 LDR X21, [X8]
	0x031E50AC LDR X0, [X9]
	0x031E50B0 BL 0x1C16F10
	0x031E50B4 ADRP X8, 0xF3B000
	0x031E50B8 LDR X8, [X8 + 0xA78]
	0x031E50BC MOV X1, X21
	0x031E50C0 MOV X3, X31
	0x031E50C4 MOV X20, X0
	0x031E50C8 LDR X2, [X8]
	0x031E50CC BL 0x29A9688
	0x031E50D0 LDR X8, [X22]
	0x031E50D4 LDR X8, [X8 + 0xB8]
	0x031E50D8 STR X20, [X8 + 0x2F0]
	0x031E50DC CBZ X19, 0x31E5104
	0x031E50E0 ADRP X8, 0xF3B000
	0x031E50E4 LDR X8, [X8 + 0xA68]
	0x031E50E8 MOV X0, X19
	0x031E50EC MOV X1, X20
	0x031E50F0 LDP X20, X19, [X31 + 0x20]
	0x031E50F4 LDR X2, [X8]
	0x031E50F8 LDP X22, X21, [X31 + 0x10]
	0x031E50FC LDR X30, [X31], #0x30
	0x031E5100 B 0x2132074
	0x031E5104 BL 0x1C16F20
	0x031E5108 STR X30, [X31 - 0x30]!
	0x031E510C STP X22, X21, [X31 + 0x10]
	0x031E5110 STP X20, X19, [X31 + 0x20]
	0x031E5114 ADRP X20, 0x11F7000
	0x031E5118 LDRB W8, [X20 + 0x13D]
	0x031E511C MOV X19, X0
	0x031E5120 TBNZ X8, 0x0, 0x31E5168
	0x031E5124 ADRP X0, 0xF3B000
	0x031E5128 LDR X0, [X0 + 0xA80]
	0x031E512C BL 0x1C16CF4
	0x031E5130 ADRP X0, 0xF3B000
	0x031E5134 LDR X0, [X0 + 0xA88]
	0x031E5138 BL 0x1C16CF4
	0x031E513C ADRP X0, 0xF3A000
	0x031E5140 LDR X0, [X0 + 0x5B0]
	0x031E5144 BL 0x1C16CF4
	0x031E5148 ADRP X0, 0xF3B000
	0x031E514C LDR X0, [X0 + 0xA90]
	0x031E5150 BL 0x1C16CF4
	0x031E5154 ADRP X0, 0xF3B000
	0x031E5158 LDR X0, [X0 + 0x260]
	0x031E515C BL 0x1C16CF4
	0x031E5160 MOVZ W8, 0x1
	0x031E5164 STRB W8, [X20 + 0x13D]
	0x031E5168 CBZ X19, 0x31E5224
	0x031E516C ADRP X22, 0xF3B000
	0x031E5170 LDR X22, [X22 + 0x260]
	0x031E5174 LDR X19, [X19 + 0x30]
	0x031E5178 LDR X0, [X22]
	0x031E517C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F8000
	007 Move W8, [X20+302]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3C000
	014 Move X0, [X0+2432]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3C000
	017 Move X0, [X0+2440]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3C000
	020 Move X0, [X0+2456]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3C000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+302], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3C000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+640]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3C000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2432]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3C000
	054 Move X8, [X8+2456]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Object>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+640], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3C000
	066 Move X8, [X8+2440]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.Guid op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E5180 CBNZ W8, 0x31E518C
	0x031E5184 BL 0x1C16DFC
	0x031E5188 LDR X0, [X22]
	0x031E518C LDR X8, [X0 + 0xB8]
	0x031E5190 LDR X20, [X8 + 0x2F8]
	0x031E5194 CBNZ X20, 0x31E51E8
	0x031E5198 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {9}
	004 Move X0, [X0+24]
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Guid.Parse, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Guid[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E519C CBNZ W8, 0x31E51A8
	0x031E51A0 BL 0x1C16DFC
	0x031E51A4 LDR X0, [X22]
	0x031E51A8 ADRP X9, 0xF3B000
	0x031E51AC LDR X8, [X0 + 0xB8]
	0x031E51B0 LDR X9, [X9 + 0xA80]
	0x031E51B4 LDR X21, [X8]
	0x031E51B8 LDR X0, [X9]
	0x031E51BC BL 0x1C16F10
	0x031E51C0 ADRP X8, 0xF3B000
	0x031E51C4 LDR X8, [X8 + 0xA90]
	0x031E51C8 MOV X1, X21
	0x031E51CC MOV X3, X31
	0x031E51D0 MOV X20, X0
	0x031E51D4 LDR X2, [X8]
	0x031E51D8 BL 0x29A979C
	0x031E51DC LDR X8, [X22]
	0x031E51E0 LDR X8, [X8 + 0xB8]
	0x031E51E4 STR X20, [X8 + 0x2F8]
	0x031E51E8 CBZ X19, 0x31E5224
	0x031E51EC ADRP X8, 0xF3B000
	0x031E51F0 LDR X8, [X8 + 0xA88]
	0x031E51F4 MOV X0, X19
	0x031E51F8 MOV X1, X20
	0x031E51FC LDR X2, [X8]
	0x031E5200 BL 0x2132188
	0x031E5204 CBZ X0, 0x31E5224
	0x031E5208 ADRP X8, 0xF3A000
	0x031E520C LDR X8, [X8 + 0x5B0]
	0x031E5210 LDP X20, X19, [X31 + 0x20]
	0x031E5214 LDP X22, X21, [X31 + 0x10]
	0x031E5218 LDR X1, [X8]
	0x031E521C LDR X30, [X31], #0x30
	0x031E5220 B 0x30CE118
	0x031E5224 BL 0x1C16F20
	0x031E5228 STR X30, [X31 - 0x30]!
	0x031E522C STP X22, X21, [X31 + 0x10]
	0x031E5230 STP X20, X19, [X31 + 0x20]
	0x031E5234 ADRP X20, 0x11F7000
	0x031E5238 LDRB W8, [X20 + 0x13E]
	0x031E523C MOV X19, X0
	0x031E5240 TBNZ X8, 0x0, 0x31E527C
	0x031E5244 ADRP X0, 0xF3B000
	0x031E5248 LDR X0, [X0 + 0xA80]
	0x031E524C BL 0x1C16CF4
	0x031E5250 ADRP X0, 0xF3B000
	0x031E5254 LDR X0, [X0 + 0xA88]
	0x031E5258 BL 0x1C16CF4
	0x031E525C ADRP X0, 0xF3B000
	0x031E5260 LDR X0, [X0 + 0xA98]
	0x031E5264 BL 0x1C16CF4
	0x031E5268 ADRP X0, 0xF3B000
	0x031E526C LDR X0, [X0 + 0x260]
	0x031E5270 BL 0x1C16CF4
	0x031E5274 MOVZ W8, 0x1
	0x031E5278 STRB W8, [X20 + 0x13E]
	0x031E527C CBZ X19, 0x31E5324
	0x031E5280 ADRP X22, 0xF3B000
	0x031E5284 LDR X22, [X22 + 0x260]
	0x031E5288 LDR X19, [X19 + 0x30]
	0x031E528C LDR X0, [X22]
	0x031E5290 LDR W8, [X0 + 0xE0]
	0x031E5294 CBNZ W8, 0x31E52A0
	0x031E5298 BL 0x1C16DFC
	0x031E529C LDR X0, [X22]
	0x031E52A0 LDR X8, [X0 + 0xB8]
	0x031E52A4 LDR X20, [X8 + 0x300]
	0x031E52A8 CBNZ X20, 0x31E52FC
	0x031E52AC LDR W8, [X0 + 0xE0]
	0x031E52B0 CBNZ W8, 0x31E52BC
	0x031E52B4 BL 0x1C16DFC
	0x031E52B8 LDR X0, [X22]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F8000
	007 Move W8, [X20+303]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3C000
	014 Move X0, [X0+2464]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3C000
	017 Move X0, [X0+2472]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3C000
	020 Move X0, [X0+1568]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3C000
	023 Move X0, [X0+2480]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3C000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+303], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3C000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+648]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3C000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2464]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3C000
	057 Move X8, [X8+2480]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Guid>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+648], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3C000
	069 Move X8, [X8+2472]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3C000
	077 Move X8, [X8+1568]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Guid>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.Guid> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E52BC ADRP X9, 0xF3B000
	0x031E52C0 LDR X8, [X0 + 0xB8]
	0x031E52C4 LDR X9, [X9 + 0xA80]
	0x031E52C8 LDR X21, [X8]
	0x031E52CC LDR X0, [X9]
	0x031E52D0 BL 0x1C16F10
	0x031E52D4 ADRP X8, 0xF3B000
	0x031E52D8 LDR X8, [X8 + 0xA98]
	0x031E52DC MOV X1, X21
	0x031E52E0 MOV X3, X31
	0x031E52E4 MOV X20, X0
	0x031E52E8 LDR X2, [X8]
	0x031E52EC BL 0x29A979C
	0x031E52F0 LDR X8, [X22]
	0x031E52F4 LDR X8, [X8 + 0xB8]
	0x031E52F8 STR X20, [X8 + 0x300]
	0x031E52FC CBZ X19, 0x31E5324
	0x031E5300 ADRP X8, 0xF3B000
	0x031E5304 LDR X8, [X8 + 0xA88]
	0x031E5308 MOV X0, X19
	0x031E530C MOV X1, X20
	0x031E5310 LDP X20, X19, [X31 + 0x20]
	0x031E5314 LDR X2, [X8]
	0x031E5318 LDP X22, X21, [X31 + 0x10]
	0x031E531C LDR X30, [X31], #0x30
	0x031E5320 B 0x2132188
	0x031E5324 BL 0x1C16F20
	0x031E5328 CBZ X0, 0x31E5330
	0x031E532C B 0x31DBB30
	0x031E5330 STR X30, [X31 - 0x10]!
	0x031E5334 BL 0x1C16F20
	0x031E5338 STR X30, [X31 - 0x30]!
	0x031E533C STP X22, X21, [X31 + 0x10]
	0x031E5340 STP X20, X19, [X31 + 0x20]
	0x031E5344 ADRP X20, 0x11F7000
	0x031E5348 LDRB W8, [X20 + 0x13F]
	0x031E534C MOV X19, X0
	0x031E5350 TBNZ X8, 0x0, 0x31E5398
	0x031E5354 ADRP X0, 0xF3B000
	0x031E5358 LDR X0, [X0 + 0xAA0]
	0x031E535C BL 0x1C16CF4
	0x031E5360 ADRP X0, 0xF3B000
	0x031E5364 LDR X0, [X0 + 0xAA8]
	0x031E5368 BL 0x1C16CF4
	0x031E536C ADRP X0, 0xF3B000
	0x031E5370 LDR X0, [X0 + 0x758]
	0x031E5374 BL 0x1C16CF4
	0x031E5378 ADRP X0, 0xF3B000
	0x031E537C LDR X0, [X0 + 0xAB0]
	0x031E5380 BL 0x1C16CF4
	0x031E5384 ADRP X0, 0xF3B000
	0x031E5388 LDR X0, [X0 + 0x260]
	0x031E538C BL 0x1C16CF4
	0x031E5390 MOVZ W8, 0x1
	0x031E5394 STRB W8, [X20 + 0x13F]
	0x031E5398 CBZ X19, 0x31E5454
	0x031E539C ADRP X22, 0xF3B000
	0x031E53A0 LDR X22, [X22 + 0x260]
	0x031E53A4 LDR X19, [X19 + 0x30]
	0x031E53A8 LDR X0, [X22]
	0x031E53AC LDR W8, [X0 + 0xE0]
	0x031E53B0 CBNZ W8, 0x31E53BC
	0x031E53B4 BL 0x1C16DFC
	0x031E53B8 LDR X0, [X22]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F8000
	007 Move W8, [X20+304]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3C000
	014 Move X0, [X0+2464]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3C000
	017 Move X0, [X0+2472]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3C000
	020 Move X0, [X0+2488]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3C000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+304], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3C000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+656]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3C000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2464]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3C000
	054 Move X8, [X8+2488]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Guid>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+656], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3C000
	066 Move X8, [X8+2472]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.DateTime op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E53BC LDR X8, [X0 + 0xB8]
	0x031E53C0 LDR X20, [X8 + 0x308]
	0x031E53C4 CBNZ X20, 0x31E5418
	0x031E53C8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {5}
	003 Call Value.get_DateTime, X0
	004 Return X0
	005 Move [X31-16], X30
	006 Call 0x1C17F20

Method: System.DateTime[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E53CC CBNZ W8, 0x31E53D8
	0x031E53D0 BL 0x1C16DFC
	0x031E53D4 LDR X0, [X22]
	0x031E53D8 ADRP X9, 0xF3B000
	0x031E53DC LDR X8, [X0 + 0xB8]
	0x031E53E0 LDR X9, [X9 + 0xAA0]
	0x031E53E4 LDR X21, [X8]
	0x031E53E8 LDR X0, [X9]
	0x031E53EC BL 0x1C16F10
	0x031E53F0 ADRP X8, 0xF3B000
	0x031E53F4 LDR X8, [X8 + 0xAB0]
	0x031E53F8 MOV X1, X21
	0x031E53FC MOV X3, X31
	0x031E5400 MOV X20, X0
	0x031E5404 LDR X2, [X8]
	0x031E5408 BL 0x29A98B0
	0x031E540C LDR X8, [X22]
	0x031E5410 LDR X8, [X8 + 0xB8]
	0x031E5414 STR X20, [X8 + 0x308]
	0x031E5418 CBZ X19, 0x31E5454
	0x031E541C ADRP X8, 0xF3B000
	0x031E5420 LDR X8, [X8 + 0xAA8]
	0x031E5424 MOV X0, X19
	0x031E5428 MOV X1, X20
	0x031E542C LDR X2, [X8]
	0x031E5430 BL 0x21322A0
	0x031E5434 CBZ X0, 0x31E5454
	0x031E5438 ADRP X8, 0xF3B000
	0x031E543C LDR X8, [X8 + 0x758]
	0x031E5440 LDP X20, X19, [X31 + 0x20]
	0x031E5444 LDP X22, X21, [X31 + 0x10]
	0x031E5448 LDR X1, [X8]
	0x031E544C LDR X30, [X31], #0x30
	0x031E5450 B 0x30D0D68
	0x031E5454 BL 0x1C16F20
	0x031E5458 STR X30, [X31 - 0x30]!
	0x031E545C STP X22, X21, [X31 + 0x10]
	0x031E5460 STP X20, X19, [X31 + 0x20]
	0x031E5464 ADRP X20, 0x11F7000
	0x031E5468 LDRB W8, [X20 + 0x140]
	0x031E546C MOV X19, X0
	0x031E5470 TBNZ X8, 0x0, 0x31E54AC
	0x031E5474 ADRP X0, 0xF3B000
	0x031E5478 LDR X0, [X0 + 0xAA0]
	0x031E547C BL 0x1C16CF4
	0x031E5480 ADRP X0, 0xF3B000
	0x031E5484 LDR X0, [X0 + 0xAA8]
	0x031E5488 BL 0x1C16CF4
	0x031E548C ADRP X0, 0xF3B000
	0x031E5490 LDR X0, [X0 + 0xAB8]
	0x031E5494 BL 0x1C16CF4
	0x031E5498 ADRP X0, 0xF3B000
	0x031E549C LDR X0, [X0 + 0x260]
	0x031E54A0 BL 0x1C16CF4
	0x031E54A4 MOVZ W8, 0x1
	0x031E54A8 STRB W8, [X20 + 0x140]
	0x031E54AC CBZ X19, 0x31E5554
	0x031E54B0 ADRP X22, 0xF3B000
	0x031E54B4 LDR X22, [X22 + 0x260]
	0x031E54B8 LDR X19, [X19 + 0x30]
	0x031E54BC LDR X0, [X22]
	0x031E54C0 LDR W8, [X0 + 0xE0]
	0x031E54C4 CBNZ W8, 0x31E54D0
	0x031E54C8 BL 0x1C16DFC
	0x031E54CC LDR X0, [X22]
	0x031E54D0 LDR X8, [X0 + 0xB8]
	0x031E54D4 LDR X20, [X8 + 0x310]
	0x031E54D8 CBNZ X20, 0x31E552C
	0x031E54DC LDR W8, [X0 + 0xE0]
	0x031E54E0 CBNZ W8, 0x31E54EC
	0x031E54E4 BL 0x1C16DFC
	0x031E54E8 LDR X0, [X22]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F8000
	007 Move W8, [X20+305]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3C000
	014 Move X0, [X0+2496]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3C000
	017 Move X0, [X0+2504]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3C000
	020 Move X0, [X0+1608]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3C000
	023 Move X0, [X0+2512]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3C000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+305], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3C000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+664]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3C000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2496]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3C000
	057 Move X8, [X8+2512]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, DateTime>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+664], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3C000
	069 Move X8, [X8+2504]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3C000
	077 Move X8, [X8+1608]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<DateTime>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.DateTime> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E54EC ADRP X9, 0xF3B000
	0x031E54F0 LDR X8, [X0 + 0xB8]
	0x031E54F4 LDR X9, [X9 + 0xAA0]
	0x031E54F8 LDR X21, [X8]
	0x031E54FC LDR X0, [X9]
	0x031E5500 BL 0x1C16F10
	0x031E5504 ADRP X8, 0xF3B000
	0x031E5508 LDR X8, [X8 + 0xAB8]
	0x031E550C MOV X1, X21
	0x031E5510 MOV X3, X31
	0x031E5514 MOV X20, X0
	0x031E5518 LDR X2, [X8]
	0x031E551C BL 0x29A98B0
	0x031E5520 LDR X8, [X22]
	0x031E5524 LDR X8, [X8 + 0xB8]
	0x031E5528 STR X20, [X8 + 0x310]
	0x031E552C CBZ X19, 0x31E5554
	0x031E5530 ADRP X8, 0xF3B000
	0x031E5534 LDR X8, [X8 + 0xAA8]
	0x031E5538 MOV X0, X19
	0x031E553C MOV X1, X20
	0x031E5540 LDP X20, X19, [X31 + 0x20]
	0x031E5544 LDR X2, [X8]
	0x031E5548 LDP X22, X21, [X31 + 0x10]
	0x031E554C LDR X30, [X31], #0x30
	0x031E5550 B 0x21322A0
	0x031E5554 BL 0x1C16F20
	0x031E5558 CBZ X0, 0x31E5560
	0x031E555C B 0x31DBDA4
	0x031E5560 STR X30, [X31 - 0x10]!
	0x031E5564 BL 0x1C16F20
	0x031E5568 STR X30, [X31 - 0x30]!
	0x031E556C STP X22, X21, [X31 + 0x10]
	0x031E5570 STP X20, X19, [X31 + 0x20]
	0x031E5574 ADRP X20, 0x11F7000
	0x031E5578 LDRB W8, [X20 + 0x141]
	0x031E557C MOV X19, X0
	0x031E5580 TBNZ X8, 0x0, 0x31E55C8
	0x031E5584 ADRP X0, 0xF3B000
	0x031E5588 LDR X0, [X0 + 0xAC0]
	0x031E558C BL 0x1C16CF4
	0x031E5590 ADRP X0, 0xF3B000
	0x031E5594 LDR X0, [X0 + 0xAC8]
	0x031E5598 BL 0x1C16CF4
	0x031E559C ADRP X0, 0xF3B000
	0x031E55A0 LDR X0, [X0 + 0x780]
	0x031E55A4 BL 0x1C16CF4
	0x031E55A8 ADRP X0, 0xF3B000
	0x031E55AC LDR X0, [X0 + 0xAD0]
	0x031E55B0 BL 0x1C16CF4
	0x031E55B4 ADRP X0, 0xF3B000
	0x031E55B8 LDR X0, [X0 + 0x260]
	0x031E55BC BL 0x1C16CF4
	0x031E55C0 MOVZ W8, 0x1
	0x031E55C4 STRB W8, [X20 + 0x141]
	0x031E55C8 CBZ X19, 0x31E5684
	0x031E55CC ADRP X22, 0xF3B000
	0x031E55D0 LDR X22, [X22 + 0x260]
	0x031E55D4 LDR X19, [X19 + 0x30]
	0x031E55D8 LDR X0, [X22]
	0x031E55DC LDR W8, [X0 + 0xE0]
	0x031E55E0 CBNZ W8, 0x31E55EC
	0x031E55E4 BL 0x1C16DFC
	0x031E55E8 LDR X0, [X22]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F8000
	007 Move W8, [X20+306]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3C000
	014 Move X0, [X0+2496]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3C000
	017 Move X0, [X0+2504]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3C000
	020 Move X0, [X0+2520]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3C000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+306], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3C000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+672]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3C000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2496]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3C000
	054 Move X8, [X8+2520]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, DateTime>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+672], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3C000
	066 Move X8, [X8+2504]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.DateTimeOffset op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E55EC LDR X8, [X0 + 0xB8]
	0x031E55F0 LDR X20, [X8 + 0x318]
	0x031E55F4 CBNZ X20, 0x31E5648
	0x031E55F8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {5}
	003 Call Value.get_DateTimeOffset, X0
	004 Return X0
	005 Move [X31-16], X30
	006 Call 0x1C17F20

Method: System.DateTimeOffset[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E55FC CBNZ W8, 0x31E5608
	0x031E5600 BL 0x1C16DFC
	0x031E5604 LDR X0, [X22]
	0x031E5608 ADRP X9, 0xF3B000
	0x031E560C LDR X8, [X0 + 0xB8]
	0x031E5610 LDR X9, [X9 + 0xAC0]
	0x031E5614 LDR X21, [X8]
	0x031E5618 LDR X0, [X9]
	0x031E561C BL 0x1C16F10
	0x031E5620 ADRP X8, 0xF3B000
	0x031E5624 LDR X8, [X8 + 0xAD0]
	0x031E5628 MOV X1, X21
	0x031E562C MOV X3, X31
	0x031E5630 MOV X20, X0
	0x031E5634 LDR X2, [X8]
	0x031E5638 BL 0x29A8DE8
	0x031E563C LDR X8, [X22]
	0x031E5640 LDR X8, [X8 + 0xB8]
	0x031E5644 STR X20, [X8 + 0x318]
	0x031E5648 CBZ X19, 0x31E5684
	0x031E564C ADRP X8, 0xF3B000
	0x031E5650 LDR X8, [X8 + 0xAC8]
	0x031E5654 MOV X0, X19
	0x031E5658 MOV X1, X20
	0x031E565C LDR X2, [X8]
	0x031E5660 BL 0x213181C
	0x031E5664 CBZ X0, 0x31E5684
	0x031E5668 ADRP X8, 0xF3B000
	0x031E566C LDR X8, [X8 + 0x780]
	0x031E5670 LDP X20, X19, [X31 + 0x20]
	0x031E5674 LDP X22, X21, [X31 + 0x10]
	0x031E5678 LDR X1, [X8]
	0x031E567C LDR X30, [X31], #0x30
	0x031E5680 B 0x302EE78
	0x031E5684 BL 0x1C16F20
	0x031E5688 STR X30, [X31 - 0x30]!
	0x031E568C STP X22, X21, [X31 + 0x10]
	0x031E5690 STP X20, X19, [X31 + 0x20]
	0x031E5694 ADRP X20, 0x11F7000
	0x031E5698 LDRB W8, [X20 + 0x142]
	0x031E569C MOV X19, X0
	0x031E56A0 TBNZ X8, 0x0, 0x31E56DC
	0x031E56A4 ADRP X0, 0xF3B000
	0x031E56A8 LDR X0, [X0 + 0xAC0]
	0x031E56AC BL 0x1C16CF4
	0x031E56B0 ADRP X0, 0xF3B000
	0x031E56B4 LDR X0, [X0 + 0xAC8]
	0x031E56B8 BL 0x1C16CF4
	0x031E56BC ADRP X0, 0xF3B000
	0x031E56C0 LDR X0, [X0 + 0xAD8]
	0x031E56C4 BL 0x1C16CF4
	0x031E56C8 ADRP X0, 0xF3B000
	0x031E56CC LDR X0, [X0 + 0x260]
	0x031E56D0 BL 0x1C16CF4
	0x031E56D4 MOVZ W8, 0x1
	0x031E56D8 STRB W8, [X20 + 0x142]
	0x031E56DC CBZ X19, 0x31E5784
	0x031E56E0 ADRP X22, 0xF3B000
	0x031E56E4 LDR X22, [X22 + 0x260]
	0x031E56E8 LDR X19, [X19 + 0x30]
	0x031E56EC LDR X0, [X22]
	0x031E56F0 LDR W8, [X0 + 0xE0]
	0x031E56F4 CBNZ W8, 0x31E5700
	0x031E56F8 BL 0x1C16DFC
	0x031E56FC LDR X0, [X22]
	0x031E5700 LDR X8, [X0 + 0xB8]
	0x031E5704 LDR X20, [X8 + 0x320]
	0x031E5708 CBNZ X20, 0x31E575C
	0x031E570C LDR W8, [X0 + 0xE0]
	0x031E5710 CBNZ W8, 0x31E571C
	0x031E5714 BL 0x1C16DFC
	0x031E5718 LDR X0, [X22]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F8000
	007 Move W8, [X20+307]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3C000
	014 Move X0, [X0+2528]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3C000
	017 Move X0, [X0+2536]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3C000
	020 Move X0, [X0+1648]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3C000
	023 Move X0, [X0+2544]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3C000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+307], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3C000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+680]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3C000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2528]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3C000
	057 Move X8, [X8+2544]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, DateTimeOffset>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+680], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3C000
	069 Move X8, [X8+2536]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3C000
	077 Move X8, [X8+1648]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<DateTimeOffset>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.DateTimeOffset> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E571C ADRP X9, 0xF3B000
	0x031E5720 LDR X8, [X0 + 0xB8]
	0x031E5724 LDR X9, [X9 + 0xAC0]
	0x031E5728 LDR X21, [X8]
	0x031E572C LDR X0, [X9]
	0x031E5730 BL 0x1C16F10
	0x031E5734 ADRP X8, 0xF3B000
	0x031E5738 LDR X8, [X8 + 0xAD8]
	0x031E573C MOV X1, X21
	0x031E5740 MOV X3, X31
	0x031E5744 MOV X20, X0
	0x031E5748 LDR X2, [X8]
	0x031E574C BL 0x29A8DE8
	0x031E5750 LDR X8, [X22]
	0x031E5754 LDR X8, [X8 + 0xB8]
	0x031E5758 STR X20, [X8 + 0x320]
	0x031E575C CBZ X19, 0x31E5784
	0x031E5760 ADRP X8, 0xF3B000
	0x031E5764 LDR X8, [X8 + 0xAC8]
	0x031E5768 MOV X0, X19
	0x031E576C MOV X1, X20
	0x031E5770 LDP X20, X19, [X31 + 0x20]
	0x031E5774 LDR X2, [X8]
	0x031E5778 LDP X22, X21, [X31 + 0x10]
	0x031E577C LDR X30, [X31], #0x30
	0x031E5780 B 0x213181C
	0x031E5784 BL 0x1C16F20
	0x031E5788 SUB X31, X31, 0x30
	0x031E578C STP X30, X19, [X31 + 0x20]
	0x031E5790 CBZ X0, 0x31E57BC
	0x031E5794 MOV X19, X8
	0x031E5798 ADD X8, X31, 0x8
	0x031E579C BL 0x31DC018
	0x031E57A0 LDR X8, [X31 + 0x18]
	0x031E57A4 LDUR V0, [X31 + 0x8]
	0x031E57A8 STR X8, [X19 + 0x10]
	0x031E57AC STR V0, [X19]
	0x031E57B0 LDP X30, X19, [X31 + 0x20]
	0x031E57B4 ADD X31, X31, 0x30
	0x031E57B8 RET
	0x031E57BC BL 0x1C16F20
	0x031E57C0 STR X30, [X31 - 0x30]!
	0x031E57C4 STP X22, X21, [X31 + 0x10]
	0x031E57C8 STP X20, X19, [X31 + 0x20]
	0x031E57CC ADRP X20, 0x11F7000
	0x031E57D0 LDRB W8, [X20 + 0x143]
	0x031E57D4 MOV X19, X0
	0x031E57D8 TBNZ X8, 0x0, 0x31E5820
	0x031E57DC ADRP X0, 0xF3B000
	0x031E57E0 LDR X0, [X0 + 0xAE0]
	0x031E57E4 BL 0x1C16CF4
	0x031E57E8 ADRP X0, 0xF3B000
	0x031E57EC LDR X0, [X0 + 0xAE8]
	0x031E57F0 BL 0x1C16CF4
	0x031E57F4 ADRP X0, 0xF3B000
	0x031E57F8 LDR X0, [X0 + 0x7A8]
	0x031E57FC BL 0x1C16CF4
	0x031E5800 ADRP X0, 0xF3B000
	0x031E5804 LDR X0, [X0 + 0xAF0]
	0x031E5808 BL 0x1C16CF4
	0x031E580C ADRP X0, 0xF3B000
	0x031E5810 LDR X0, [X0 + 0x260]
	0x031E5814 BL 0x1C16CF4
	0x031E5818 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F8000
	007 Move W8, [X20+308]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3C000
	014 Move X0, [X0+2528]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3C000
	017 Move X0, [X0+2536]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3C000
	020 Move X0, [X0+2552]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3C000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+308], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3C000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+688]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3C000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2528]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3C000
	054 Move X8, [X8+2552]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, DateTimeOffset>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+688], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3C000
	066 Move X8, [X8+2536]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.TimeSpan op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E581C STRB W8, [X20 + 0x143]
	0x031E5820 CBZ X19, 0x31E58DC
	0x031E5824 ADRP X22, 0xF3B000
	0x031E5828 LDR X22, [X22 + 0x260]
	0x031E582C LDR X19, [X19 + 0x30]
	0x031E5830 LDR X0, [X22]
	0x031E5834 LDR W8, [X0 + 0xE0]
	0x031E5838 CBNZ W8, 0x31E5844
	0x031E583C BL 0x1C16DFC
	0x031E5840 LDR X0, [X22]
	0x031E5844 LDR X8, [X0 + 0xB8]
	0x031E5848 LDR X20, [X8 + 0x328]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {13}
	004 Move V0, [X0+40]
	005 Move X8, 0x7FF00000
	006 Move D1, X8
	007 Move X9, 0x80000000
	008 NotImplemented "Instruction FCVTZS not yet implemented."
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 NotImplemented "Instruction CSEL not yet implemented."
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: System.TimeSpan[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E584C CBNZ X20, 0x31E58A0
	0x031E5850 LDR W8, [X0 + 0xE0]
	0x031E5854 CBNZ W8, 0x31E5860
	0x031E5858 BL 0x1C16DFC
	0x031E585C LDR X0, [X22]
	0x031E5860 ADRP X9, 0xF3B000
	0x031E5864 LDR X8, [X0 + 0xB8]
	0x031E5868 LDR X9, [X9 + 0xAE0]
	0x031E586C LDR X21, [X8]
	0x031E5870 LDR X0, [X9]
	0x031E5874 BL 0x1C16F10
	0x031E5878 ADRP X8, 0xF3B000
	0x031E587C LDR X8, [X8 + 0xAF0]
	0x031E5880 MOV X1, X21
	0x031E5884 MOV X3, X31
	0x031E5888 MOV X20, X0
	0x031E588C LDR X2, [X8]
	0x031E5890 BL 0x29A7FD4
	0x031E5894 LDR X8, [X22]
	0x031E5898 LDR X8, [X8 + 0xB8]
	0x031E589C STR X20, [X8 + 0x328]
	0x031E58A0 CBZ X19, 0x31E58DC
	0x031E58A4 ADRP X8, 0xF3B000
	0x031E58A8 LDR X8, [X8 + 0xAE8]
	0x031E58AC MOV X0, X19
	0x031E58B0 MOV X1, X20
	0x031E58B4 LDR X2, [X8]
	0x031E58B8 BL 0x2130A3C
	0x031E58BC CBZ X0, 0x31E58DC
	0x031E58C0 ADRP X8, 0xF3B000
	0x031E58C4 LDR X8, [X8 + 0x7A8]
	0x031E58C8 LDP X20, X19, [X31 + 0x20]
	0x031E58CC LDP X22, X21, [X31 + 0x10]
	0x031E58D0 LDR X1, [X8]
	0x031E58D4 LDR X30, [X31], #0x30
	0x031E58D8 B 0x2F67210
	0x031E58DC BL 0x1C16F20
	0x031E58E0 STR X30, [X31 - 0x30]!
	0x031E58E4 STP X22, X21, [X31 + 0x10]
	0x031E58E8 STP X20, X19, [X31 + 0x20]
	0x031E58EC ADRP X20, 0x11F7000
	0x031E58F0 LDRB W8, [X20 + 0x144]
	0x031E58F4 MOV X19, X0
	0x031E58F8 TBNZ X8, 0x0, 0x31E5934
	0x031E58FC ADRP X0, 0xF3B000
	0x031E5900 LDR X0, [X0 + 0xAE0]
	0x031E5904 BL 0x1C16CF4
	0x031E5908 ADRP X0, 0xF3B000
	0x031E590C LDR X0, [X0 + 0xAE8]
	0x031E5910 BL 0x1C16CF4
	0x031E5914 ADRP X0, 0xF3B000
	0x031E5918 LDR X0, [X0 + 0xAF8]
	0x031E591C BL 0x1C16CF4
	0x031E5920 ADRP X0, 0xF3B000
	0x031E5924 LDR X0, [X0 + 0x260]
	0x031E5928 BL 0x1C16CF4
	0x031E592C MOVZ W8, 0x1
	0x031E5930 STRB W8, [X20 + 0x144]
	0x031E5934 CBZ X19, 0x31E59DC
	0x031E5938 ADRP X22, 0xF3B000
	0x031E593C LDR X22, [X22 + 0x260]
	0x031E5940 LDR X19, [X19 + 0x30]
	0x031E5944 LDR X0, [X22]
	0x031E5948 LDR W8, [X0 + 0xE0]
	0x031E594C CBNZ W8, 0x31E5958
	0x031E5950 BL 0x1C16DFC
	0x031E5954 LDR X0, [X22]
	0x031E5958 LDR X8, [X0 + 0xB8]
	0x031E595C LDR X20, [X8 + 0x330]
	0x031E5960 CBNZ X20, 0x31E59B4
	0x031E5964 LDR W8, [X0 + 0xE0]
	0x031E5968 CBNZ W8, 0x31E5974

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F8000
	007 Move W8, [X20+309]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3C000
	014 Move X0, [X0+2560]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3C000
	017 Move X0, [X0+2568]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3C000
	020 Move X0, [X0+1688]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3C000
	023 Move X0, [X0+2576]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3C000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+309], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3C000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+696]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3C000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2560]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3C000
	057 Move X8, [X8+2576]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, TimeSpan>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+696], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3C000
	069 Move X8, [X8+2568]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3C000
	077 Move X8, [X8+1688]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<TimeSpan>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.TimeSpan> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E596C BL 0x1C16DFC
	0x031E5970 LDR X0, [X22]
	0x031E5974 ADRP X9, 0xF3B000
	0x031E5978 LDR X8, [X0 + 0xB8]
	0x031E597C LDR X9, [X9 + 0xAE0]
	0x031E5980 LDR X21, [X8]
	0x031E5984 LDR X0, [X9]
	0x031E5988 BL 0x1C16F10
	0x031E598C ADRP X8, 0xF3B000
	0x031E5990 LDR X8, [X8 + 0xAF8]
	0x031E5994 MOV X1, X21
	0x031E5998 MOV X3, X31
	0x031E599C MOV X20, X0
	0x031E59A0 LDR X2, [X8]
	0x031E59A4 BL 0x29A7FD4
	0x031E59A8 LDR X8, [X22]
	0x031E59AC LDR X8, [X8 + 0xB8]
	0x031E59B0 STR X20, [X8 + 0x330]
	0x031E59B4 CBZ X19, 0x31E59DC
	0x031E59B8 ADRP X8, 0xF3B000
	0x031E59BC LDR X8, [X8 + 0xAE8]
	0x031E59C0 MOV X0, X19
	0x031E59C4 MOV X1, X20
	0x031E59C8 LDP X20, X19, [X31 + 0x20]
	0x031E59CC LDR X2, [X8]
	0x031E59D0 LDP X22, X21, [X31 + 0x10]
	0x031E59D4 LDR X30, [X31], #0x30
	0x031E59D8 B 0x2130A3C
	0x031E59DC BL 0x1C16F20
	0x031E59E0 CBZ X0, 0x31E59E8
	0x031E59E4 B 0x31DC278
	0x031E59E8 STR X30, [X31 - 0x10]!
	0x031E59EC BL 0x1C16F20
	0x031E59F0 STR X30, [X31 - 0x30]!
	0x031E59F4 STP X22, X21, [X31 + 0x10]
	0x031E59F8 STP X20, X19, [X31 + 0x20]
	0x031E59FC ADRP X20, 0x11F7000
	0x031E5A00 LDRB W8, [X20 + 0x145]
	0x031E5A04 MOV X19, X0
	0x031E5A08 TBNZ X8, 0x0, 0x31E5A50
	0x031E5A0C ADRP X0, 0xF3B000
	0x031E5A10 LDR X0, [X0 + 0xB00]
	0x031E5A14 BL 0x1C16CF4
	0x031E5A18 ADRP X0, 0xF3B000
	0x031E5A1C LDR X0, [X0 + 0xB08]
	0x031E5A20 BL 0x1C16CF4
	0x031E5A24 ADRP X0, 0xF3B000
	0x031E5A28 LDR X0, [X0 + 0x7D0]
	0x031E5A2C BL 0x1C16CF4
	0x031E5A30 ADRP X0, 0xF3B000
	0x031E5A34 LDR X0, [X0 + 0xB10]
	0x031E5A38 BL 0x1C16CF4
	0x031E5A3C ADRP X0, 0xF3B000
	0x031E5A40 LDR X0, [X0 + 0x260]
	0x031E5A44 BL 0x1C16CF4
	0x031E5A48 MOVZ W8, 0x1
	0x031E5A4C STRB W8, [X20 + 0x145]
	0x031E5A50 CBZ X19, 0x31E5B0C
	0x031E5A54 ADRP X22, 0xF3B000
	0x031E5A58 LDR X22, [X22 + 0x260]
	0x031E5A5C LDR X19, [X19 + 0x30]
	0x031E5A60 LDR X0, [X22]
	0x031E5A64 LDR W8, [X0 + 0xE0]
	0x031E5A68 CBNZ W8, 0x31E5A74

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F8000
	007 Move W8, [X20+310]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3C000
	014 Move X0, [X0+2560]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3C000
	017 Move X0, [X0+2568]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3C000
	020 Move X0, [X0+2584]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3C000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+310], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3C000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+704]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3C000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2560]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3C000
	054 Move X8, [X8+2584]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, TimeSpan>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+704], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3C000
	066 Move X8, [X8+2568]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: UnityEngine.Color op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E5A6C BL 0x1C16DFC
	0x031E5A70 LDR X0, [X22]
	0x031E5A74 LDR X8, [X0 + 0xB8]
	0x031E5A78 LDR X20, [X8 + 0x338]

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {5}
	003 Call Value.get_Color, X0
	004 Return X0
	005 Move [X31-16], X30
	006 Call 0x1C17F20

Method: UnityEngine.Color[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E5A7C CBNZ X20, 0x31E5AD0
	0x031E5A80 LDR W8, [X0 + 0xE0]
	0x031E5A84 CBNZ W8, 0x31E5A90
	0x031E5A88 BL 0x1C16DFC
	0x031E5A8C LDR X0, [X22]
	0x031E5A90 ADRP X9, 0xF3B000
	0x031E5A94 LDR X8, [X0 + 0xB8]
	0x031E5A98 LDR X9, [X9 + 0xB00]
	0x031E5A9C LDR X21, [X8]
	0x031E5AA0 LDR X0, [X9]
	0x031E5AA4 BL 0x1C16F10
	0x031E5AA8 ADRP X8, 0xF3B000
	0x031E5AAC LDR X8, [X8 + 0xB10]
	0x031E5AB0 MOV X1, X21
	0x031E5AB4 MOV X3, X31
	0x031E5AB8 MOV X20, X0
	0x031E5ABC LDR X2, [X8]
	0x031E5AC0 BL 0x29A8EFC
	0x031E5AC4 LDR X8, [X22]
	0x031E5AC8 LDR X8, [X8 + 0xB8]
	0x031E5ACC STR X20, [X8 + 0x338]
	0x031E5AD0 CBZ X19, 0x31E5B0C
	0x031E5AD4 ADRP X8, 0xF3B000
	0x031E5AD8 LDR X8, [X8 + 0xB08]
	0x031E5ADC MOV X0, X19
	0x031E5AE0 MOV X1, X20
	0x031E5AE4 LDR X2, [X8]
	0x031E5AE8 BL 0x2131934
	0x031E5AEC CBZ X0, 0x31E5B0C
	0x031E5AF0 ADRP X8, 0xF3B000
	0x031E5AF4 LDR X8, [X8 + 0x7D0]
	0x031E5AF8 LDP X20, X19, [X31 + 0x20]
	0x031E5AFC LDP X22, X21, [X31 + 0x10]
	0x031E5B00 LDR X1, [X8]
	0x031E5B04 LDR X30, [X31], #0x30
	0x031E5B08 B 0x303AFD0
	0x031E5B0C BL 0x1C16F20
	0x031E5B10 STR X30, [X31 - 0x30]!
	0x031E5B14 STP X22, X21, [X31 + 0x10]
	0x031E5B18 STP X20, X19, [X31 + 0x20]
	0x031E5B1C ADRP X20, 0x11F7000
	0x031E5B20 LDRB W8, [X20 + 0x146]
	0x031E5B24 MOV X19, X0
	0x031E5B28 TBNZ X8, 0x0, 0x31E5B64
	0x031E5B2C ADRP X0, 0xF3B000
	0x031E5B30 LDR X0, [X0 + 0xB00]
	0x031E5B34 BL 0x1C16CF4
	0x031E5B38 ADRP X0, 0xF3B000
	0x031E5B3C LDR X0, [X0 + 0xB08]
	0x031E5B40 BL 0x1C16CF4
	0x031E5B44 ADRP X0, 0xF3B000
	0x031E5B48 LDR X0, [X0 + 0xB18]
	0x031E5B4C BL 0x1C16CF4
	0x031E5B50 ADRP X0, 0xF3B000
	0x031E5B54 LDR X0, [X0 + 0x260]
	0x031E5B58 BL 0x1C16CF4
	0x031E5B5C MOVZ W8, 0x1
	0x031E5B60 STRB W8, [X20 + 0x146]
	0x031E5B64 CBZ X19, 0x31E5C0C
	0x031E5B68 ADRP X22, 0xF3B000
	0x031E5B6C LDR X22, [X22 + 0x260]
	0x031E5B70 LDR X19, [X19 + 0x30]
	0x031E5B74 LDR X0, [X22]
	0x031E5B78 LDR W8, [X0 + 0xE0]
	0x031E5B7C CBNZ W8, 0x31E5B88
	0x031E5B80 BL 0x1C16DFC
	0x031E5B84 LDR X0, [X22]
	0x031E5B88 LDR X8, [X0 + 0xB8]
	0x031E5B8C LDR X20, [X8 + 0x340]
	0x031E5B90 CBNZ X20, 0x31E5BE4
	0x031E5B94 LDR W8, [X0 + 0xE0]
	0x031E5B98 CBNZ W8, 0x31E5BA4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F8000
	007 Move W8, [X20+311]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3C000
	014 Move X0, [X0+2592]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3C000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3C000
	020 Move X0, [X0+1728]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3C000
	023 Move X0, [X0+2608]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3C000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+311], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3C000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+712]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3C000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2592]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3C000
	057 Move X8, [X8+2608]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Color>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+712], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3C000
	069 Move X8, [X8+2600]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3C000
	077 Move X8, [X8+1728]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Color>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<UnityEngine.Color> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E5B9C BL 0x1C16DFC
	0x031E5BA0 LDR X0, [X22]
	0x031E5BA4 ADRP X9, 0xF3B000
	0x031E5BA8 LDR X8, [X0 + 0xB8]
	0x031E5BAC LDR X9, [X9 + 0xB00]
	0x031E5BB0 LDR X21, [X8]
	0x031E5BB4 LDR X0, [X9]
	0x031E5BB8 BL 0x1C16F10
	0x031E5BBC ADRP X8, 0xF3B000
	0x031E5BC0 LDR X8, [X8 + 0xB18]
	0x031E5BC4 MOV X1, X21
	0x031E5BC8 MOV X3, X31
	0x031E5BCC MOV X20, X0
	0x031E5BD0 LDR X2, [X8]
	0x031E5BD4 BL 0x29A8EFC
	0x031E5BD8 LDR X8, [X22]
	0x031E5BDC LDR X8, [X8 + 0xB8]
	0x031E5BE0 STR X20, [X8 + 0x340]
	0x031E5BE4 CBZ X19, 0x31E5C0C
	0x031E5BE8 ADRP X8, 0xF3B000
	0x031E5BEC LDR X8, [X8 + 0xB08]
	0x031E5BF0 MOV X0, X19
	0x031E5BF4 MOV X1, X20
	0x031E5BF8 LDP X20, X19, [X31 + 0x20]
	0x031E5BFC LDR X2, [X8]
	0x031E5C00 LDP X22, X21, [X31 + 0x10]
	0x031E5C04 LDR X30, [X31], #0x30
	0x031E5C08 B 0x2131934
	0x031E5C0C BL 0x1C16F20
	0x031E5C10 SUB X31, X31, 0x70
	0x031E5C14 STP X29, X30, [X31 + 0x10]
	0x031E5C18 STP X28, X27, [X31 + 0x20]
	0x031E5C1C STP X26, X25, [X31 + 0x30]
	0x031E5C20 STP X24, X23, [X31 + 0x40]
	0x031E5C24 STP X22, X21, [X31 + 0x50]
	0x031E5C28 STP X20, X19, [X31 + 0x60]
	0x031E5C2C ADRP X20, 0x11F7000
	0x031E5C30 LDRB W8, [X20 + 0x148]
	0x031E5C34 MOV X19, X0
	0x031E5C38 TBNZ X8, 0x0, 0x31E5CB0
	0x031E5C3C ADRP X0, 0xF0E000
	0x031E5C40 LDR X0, [X0 + 0x758]
	0x031E5C44 BL 0x1C16CF4
	0x031E5C48 ADRP X0, 0xF0E000
	0x031E5C4C LDR X0, [X0 + 0x8F0]
	0x031E5C50 BL 0x1C16CF4
	0x031E5C54 ADRP X0, 0xF3B000
	0x031E5C58 LDR X0, [X0 + 0xB20]
	0x031E5C5C BL 0x1C16CF4
	0x031E5C60 ADRP X0, 0xF3B000
	0x031E5C64 LDR X0, [X0 + 0xB28]
	0x031E5C68 BL 0x1C16CF4
	0x031E5C6C ADRP X0, 0xF3B000
	0x031E5C70 LDR X0, [X0 + 0xB30]
	0x031E5C74 BL 0x1C16CF4
	0x031E5C78 ADRP X0, 0xF3B000
	0x031E5C7C LDR X0, [X0 + 0xB38]
	0x031E5C80 BL 0x1C16CF4
	0x031E5C84 ADRP X0, 0xF3B000
	0x031E5C88 LDR X0, [X0 + 0xB40]
	0x031E5C8C BL 0x1C16CF4
	0x031E5C90 ADRP X0, 0xF3B000
	0x031E5C94 LDR X0, [X0 + 0xB48]
	0x031E5C98 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F8000
	007 Move W8, [X20+312]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3C000
	014 Move X0, [X0+2592]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3C000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3C000
	020 Move X0, [X0+2616]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3C000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+312], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3C000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+720]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3C000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2592]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3C000
	054 Move X8, [X8+2616]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Color>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+720], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3C000
	066 Move X8, [X8+2600]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: UnityEngine.Color32 op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E5C9C ADRP X0, 0xF0E000
	0x031E5CA0 LDR X0, [X0 + 0x988]
	0x031E5CA4 BL 0x1C16CF4
	0x031E5CA8 MOVZ W8, 0x1
	0x031E5CAC STRB W8, [X20 + 0x148]
	0x031E5CB0 CBZ X19, 0x31E5E50
	0x031E5CB4 LDR W8, [X19 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {8}
	004 Call Value.get_Color32, X0
	005 And X0, X0, 0
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: UnityEngine.Color32[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E5CB8 CBZ W8, 0x31E5E50
	0x031E5CBC ADRP X8, 0xF0E000
	0x031E5CC0 LDR X8, [X8 + 0x8F0]
	0x031E5CC4 LDR X0, [X8]
	0x031E5CC8 BL 0x1C16F10
	0x031E5CCC MOV X1, X31
	0x031E5CD0 MOV X20, X0
	0x031E5CD4 BL 0x3231AC4
	0x031E5CD8 LDR W8, [X19 + 0x10]
	0x031E5CDC CMP W8, 0x1
	0x031E5CE0 B.LT 0x31E5E60
	0x031E5CE4 ADRP X23, 0xF0E000
	0x031E5CE8 ADRP X24, 0xF3B000
	0x031E5CEC ADRP X29, 0xF3B000
	0x031E5CF0 LDR X23, [X23 + 0x758]
	0x031E5CF4 LDR X24, [X24 + 0xB48]
	0x031E5CF8 LDR X29, [X29 + 0xB40]
	0x031E5CFC MOVZ W26, 0x20
	0x031E5D00 MOVZ X27, 0x1
	0x031E5D04 ADRP X28, 0xFFFFFFFFFD9B1000
	0x031E5D08 MOV W21, W31
	0x031E5D0C MOVZ W25, 0x1
	0x031E5D10 MOVK W26, 0x14000000
	0x031E5D14 MOVK X27, 0x4000000
	0x031E5D18 ADD X28, X28, 0x3E0
	0x031E5D1C MOV X0, X19
	0x031E5D20 MOV W1, W21
	0x031E5D24 MOV X2, X31
	0x031E5D28 BL 0x3222A1C
	0x031E5D2C AND W22, W0, 0xFFFF
	0x031E5D30 SUBS W8, W22, 0x8
	0x031E5D34 B.CS 0x31E5D74
	0x031E5D38 LDR X0, [X23]
	0x031E5D3C ADD X1, X31, 0xC
	0x031E5D40 STR W22, [X31 + 0xC]
	0x031E5D44 BL 0x1C16E04
	0x031E5D48 CBZ X20, 0x31E5E94
	0x031E5D4C LDR X1, [X24]
	0x031E5D50 MOV X2, X0
	0x031E5D54 MOV X0, X20
	0x031E5D58 MOV X3, X31
	0x031E5D5C BL 0x3234224
	0x031E5D60 LDR W8, [X19 + 0x10]
	0x031E5D64 ADD W21, W21, 0x1
	0x031E5D68 CMP W21, W8
	0x031E5D6C B.LT 0x31E5D1C
	0x031E5D70 B 0x31E5E64
	0x031E5D74 CMP W22, 0xB
	0x031E5D78 B.EQ 0x31E5D38
	0x031E5D7C SUB W9, W22, 0xE
	0x031E5D80 CMP W9, 0x12
	0x031E5D84 B.CC 0x31E5D38
	0x031E5D88 CMP W8, 0x5
	0x031E5D8C B.LS 0x31E5DCC
	0x031E5D90 SUB W8, W22, 0x22
	0x031E5D94 CMP W8, 0x3A
	0x031E5D98 B.HI 0x31E5DEC
	0x031E5D9C LSLV X9, X25, X8
	0x031E5DA0 ANDS X31, X9, X26, 0x0
	0x031E5DA4 B.NE 0x31E5D38
	0x031E5DA8 LSLV X8, X25, X8
	0x031E5DAC ANDS X31, X8, X27, 0x0
	0x031E5DB0 B.EQ 0x31E5DEC
	0x031E5DB4 CBZ X20, 0x31E5E94
	0x031E5DB8 MOVZ W1, 0x5C
	0x031E5DBC MOV X0, X20
	0x031E5DC0 MOV X2, X31
	0x031E5DC4 BL 0x3233D30
	0x031E5DC8 B 0x31E5DF0
	0x031E5DCC ADR X9, 0x10
	0x031E5DD0 LDRB W10, [X28, X8, LSL]
	0x031E5DD4 ADD X9, X9, X10, 0x2, LSL

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F8000
	007 Move W8, [X20+313]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3C000
	014 Move X0, [X0+2624]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3C000
	017 Move X0, [X0+2632]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3C000
	020 Move X0, [X0+1768]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3C000
	023 Move X0, [X0+2640]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3C000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+313], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3C000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+728]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3C000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2624]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3C000
	057 Move X8, [X8+2640]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Color32>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+728], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3C000
	069 Move X8, [X8+2632]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3C000
	077 Move X8, [X8+1768]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Color32>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<UnityEngine.Color32> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E5DD8 BR X9
	0x031E5DDC CBZ X20, 0x31E5E94
	0x031E5DE0 ADRP X8, 0xF3B000
	0x031E5DE4 LDR X8, [X8 + 0xB20]
	0x031E5DE8 B 0x31E5E30
	0x031E5DEC CBZ X20, 0x31E5E94
	0x031E5DF0 MOV X0, X20
	0x031E5DF4 MOV W1, W22
	0x031E5DF8 MOV X2, X31
	0x031E5DFC BL 0x3233D30
	0x031E5E00 B 0x31E5D60
	0x031E5E04 CBZ X20, 0x31E5E94
	0x031E5E08 ADRP X8, 0xF3B000
	0x031E5E0C LDR X8, [X8 + 0xB30]
	0x031E5E10 B 0x31E5E30
	0x031E5E14 CBZ X20, 0x31E5E94
	0x031E5E18 ADRP X8, 0xF3B000
	0x031E5E1C LDR X8, [X8 + 0xB28]
	0x031E5E20 B 0x31E5E30
	0x031E5E24 CBZ X20, 0x31E5E94
	0x031E5E28 ADRP X8, 0xF3B000
	0x031E5E2C LDR X8, [X8 + 0xB38]
	0x031E5E30 LDR X1, [X8]
	0x031E5E34 MOV X0, X20
	0x031E5E38 MOV X2, X31
	0x031E5E3C BL 0x32333E0
	0x031E5E40 B 0x31E5D60
	0x031E5E44 CBZ X20, 0x31E5E94
	0x031E5E48 LDR X1, [X29]
	0x031E5E4C B 0x31E5E34
	0x031E5E50 ADRP X8, 0xF0E000
	0x031E5E54 LDR X8, [X8 + 0x988]
	0x031E5E58 LDR X0, [X8]
	0x031E5E5C B 0x31E5E74
	0x031E5E60 CBZ X20, 0x31E5E94
	0x031E5E64 LDR X8, [X20]
	0x031E5E68 MOV X0, X20
	0x031E5E6C LDP X9, X1, [X8 + 0x168]
	0x031E5E70 BLR X9
	0x031E5E74 LDP X20, X19, [X31 + 0x60]
	0x031E5E78 LDP X22, X21, [X31 + 0x50]
	0x031E5E7C LDP X24, X23, [X31 + 0x40]
	0x031E5E80 LDP X26, X25, [X31 + 0x30]
	0x031E5E84 LDP X28, X27, [X31 + 0x20]
	0x031E5E88 LDP X29, X30, [X31 + 0x10]
	0x031E5E8C ADD X31, X31, 0x70
	0x031E5E90 RET
	0x031E5E94 BL 0x1C16F20
	0x031E5E98 STP X30, X19, [X31 - 0x10]!
	0x031E5E9C LDR W8, [X0 + 0x10]
	0x031E5EA0 MOV X19, X0
	0x031E5EA4 CMP W8, 0x5
	0x031E5EA8 B.NE 0x31E5EB8
	0x031E5EAC MOV X0, X19
	0x031E5EB0 BL 0x31E5ED4
	0x031E5EB4 LDR W8, [X19 + 0x10]
	0x031E5EB8 CMP W8, 0x6
	0x031E5EBC B.NE 0x31E5ECC
	0x031E5EC0 MOV X0, X19
	0x031E5EC4 LDP X30, X19, [X31], #0x10
	0x031E5EC8 B 0x31E6004
	0x031E5ECC LDP X30, X19, [X31], #0x10
	0x031E5ED0 RET
	0x031E5ED4 STP X30, X23, [X31 - 0x30]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F8000
	007 Move W8, [X20+314]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3C000
	014 Move X0, [X0+2624]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3C000
	017 Move X0, [X0+2632]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3C000
	020 Move X0, [X0+2648]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3C000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+314], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3C000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+736]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3C000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2624]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3C000
	054 Move X8, [X8+2648]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Color32>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+736], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3C000
	066 Move X8, [X8+2632]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: UnityEngine.Vector2 op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E5ED8 STP X22, X21, [X31 + 0x10]
	0x031E5EDC STP X20, X19, [X31 + 0x20]
	0x031E5EE0 ADRP X20, 0x11F7000
	0x031E5EE4 LDRB W8, [X20 + 0x149]

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {5}
	003 Call Value.get_Vector2, X0
	004 Return X0
	005 Move [X31-16], X30
	006 Call 0x1C17F20

Method: UnityEngine.Vector2[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E5EE8 MOV X19, X0
	0x031E5EEC TBNZ X8, 0x0, 0x31E5F34
	0x031E5EF0 ADRP X0, 0xF3A000
	0x031E5EF4 LDR X0, [X0 + 0xFD0]
	0x031E5EF8 BL 0x1C16CF4
	0x031E5EFC ADRP X0, 0xF3B000
	0x031E5F00 LDR X0, [X0 + 0x160]
	0x031E5F04 BL 0x1C16CF4
	0x031E5F08 ADRP X0, 0xF3B000
	0x031E5F0C LDR X0, [X0 + 0x308]
	0x031E5F10 BL 0x1C16CF4
	0x031E5F14 ADRP X0, 0xF3A000
	0x031E5F18 LDR X0, [X0 + 0xFC8]
	0x031E5F1C BL 0x1C16CF4
	0x031E5F20 ADRP X0, 0xF0E000
	0x031E5F24 LDR X0, [X0 + 0xAC8]
	0x031E5F28 BL 0x1C16CF4
	0x031E5F2C MOVZ W8, 0x1
	0x031E5F30 STRB W8, [X20 + 0x149]
	0x031E5F34 LDR X20, [X19 + 0x30]
	0x031E5F38 CBNZ X20, 0x31E5F6C
	0x031E5F3C ADRP X8, 0xF3A000
	0x031E5F40 LDR X8, [X8 + 0xFC8]
	0x031E5F44 LDR X0, [X8]
	0x031E5F48 BL 0x1C16F10
	0x031E5F4C ADRP X8, 0xF3A000
	0x031E5F50 LDR X8, [X8 + 0xFD0]
	0x031E5F54 MOV W1, W31
	0x031E5F58 MOV X20, X0
	0x031E5F5C LDR X2, [X8]
	0x031E5F60 BL 0x301B830
	0x031E5F64 STR X20, [X19 + 0x30]
	0x031E5F68 CBZ X20, 0x31E5FEC
	0x031E5F6C ADRP X8, 0xF0E000
	0x031E5F70 LDR X8, [X8 + 0xAC8]
	0x031E5F74 LDR W22, [X20 + 0x18]
	0x031E5F78 LDR X0, [X8]
	0x031E5F7C MOV W1, W22
	0x031E5F80 BL 0x1C16D6C
	0x031E5F84 CMP W22, 0x1
	0x031E5F88 STR X0, [X19 + 0x38]
	0x031E5F8C B.LT 0x31E5FF0
	0x031E5F90 MOV X21, X0
	0x031E5F94 LDR X0, [X19 + 0x30]
	0x031E5F98 CBZ X0, 0x31E5FEC
	0x031E5F9C ADRP X23, 0xF3B000
	0x031E5FA0 LDR X23, [X23 + 0x308]
	0x031E5FA4 MOV X20, X31
	0x031E5FA8 SUB X22, X22, 0x1
	0x031E5FAC LDR X2, [X23]
	0x031E5FB0 MOV W1, W20
	0x031E5FB4 BL 0x301BCCC
	0x031E5FB8 MOV X1, X31
	0x031E5FBC BL 0x3C86C20
	0x031E5FC0 CBZ X21, 0x31E5FEC
	0x031E5FC4 LDR W8, [X21 + 0x18]
	0x031E5FC8 CMP X20, X8
	0x031E5FCC B.CS 0x31E6000
	0x031E5FD0 ADD X8, X21, X20, 0x3, LSL
	0x031E5FD4 CMP X22, X20
	0x031E5FD8 STR X0, [X8 + 0x20]
	0x031E5FDC B.EQ 0x31E5FF0
	0x031E5FE0 LDP X0, X21, [X19 + 0x30]
	0x031E5FE4 ADD X20, X20, 0x1
	0x031E5FE8 CBNZ X0, 0x31E5FAC
	0x031E5FEC BL 0x1C16F20
	0x031E5FF0 LDP X20, X19, [X31 + 0x20]
	0x031E5FF4 LDP X22, X21, [X31 + 0x10]
	0x031E5FF8 LDP X30, X23, [X31], #0x30
	0x031E5FFC RET
	0x031E6000 BL 0x1C16F28
	0x031E6004 SUB X31, X31, 0xA0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F8000
	007 Move W8, [X20+315]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3C000
	014 Move X0, [X0+2656]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3C000
	017 Move X0, [X0+2664]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3C000
	020 Move X0, [X0+1808]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3C000
	023 Move X0, [X0+2672]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3C000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+315], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3C000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+744]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3C000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2656]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3C000
	057 Move X8, [X8+2672]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Vector2>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+744], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3C000
	069 Move X8, [X8+2664]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3C000
	077 Move X8, [X8+1808]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Vector2>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<UnityEngine.Vector2> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E6008 STR X30, [X31 + 0x60]
	0x031E600C STP X24, X23, [X31 + 0x70]
	0x031E6010 STP X22, X21, [X31 + 0x80]
	0x031E6014 STP X20, X19, [X31 + 0x90]
	0x031E6018 ADRP X20, 0x11F6000
	0x031E601C LDRB W8, [X20 + 0x14A]
	0x031E6020 MOV X19, X0
	0x031E6024 TBNZ X8, 0x0, 0x31E60A8
	0x031E6028 ADRP X0, 0xF39000
	0x031E602C LDR X0, [X0 + 0xFA0]
	0x031E6030 BL 0x1C16CF4
	0x031E6034 ADRP X0, 0xF39000
	0x031E6038 LDR X0, [X0 + 0xFE0]
	0x031E603C BL 0x1C16CF4
	0x031E6040 ADRP X0, 0xF3A000
	0x031E6044 LDR X0, [X0 + 0x158]
	0x031E6048 BL 0x1C16CF4
	0x031E604C ADRP X0, 0xF39000
	0x031E6050 LDR X0, [X0 + 0xFD8]
	0x031E6054 BL 0x1C16CF4
	0x031E6058 ADRP X0, 0xF3A000
	0x031E605C LDR X0, [X0 + 0x328]
	0x031E6060 BL 0x1C16CF4
	0x031E6064 ADRP X0, 0xF3A000
	0x031E6068 LDR X0, [X0 + 0x340]
	0x031E606C BL 0x1C16CF4
	0x031E6070 ADRP X0, 0xF3A000
	0x031E6074 LDR X0, [X0 + 0x350]
	0x031E6078 BL 0x1C16CF4
	0x031E607C ADRP X0, 0xF39000
	0x031E6080 LDR X0, [X0 + 0xEE8]
	0x031E6084 BL 0x1C16CF4
	0x031E6088 ADRP X0, 0xF39000
	0x031E608C LDR X0, [X0 + 0xEF0]
	0x031E6090 BL 0x1C16CF4
	0x031E6094 ADRP X0, 0xF0D000
	0x031E6098 LDR X0, [X0 + 0xAC8]
	0x031E609C BL 0x1C16CF4
	0x031E60A0 MOVZ W8, 0x1
	0x031E60A4 STRB W8, [X20 + 0x14A]
	0x031E60A8 MOVI V0.2D, 0x0
	0x031E60AC STR X31, [X31 + 0x50]
	0x031E60B0 STP V0, V0, [X31 + 0x30]
	0x031E60B4 LDR X20, [X19 + 0x40]
	0x031E60B8 CBNZ X20, 0x31E60EC
	0x031E60BC ADRP X8, 0xF39000
	0x031E60C0 LDR X8, [X8 + 0xFD8]
	0x031E60C4 LDR X0, [X8]
	0x031E60C8 BL 0x1C16F10
	0x031E60CC ADRP X8, 0xF39000
	0x031E60D0 LDR X8, [X8 + 0xFE0]
	0x031E60D4 MOV W1, W31
	0x031E60D8 MOV X20, X0
	0x031E60DC LDR X2, [X8]
	0x031E60E0 BL 0x2AA481C
	0x031E60E4 STR X20, [X19 + 0x40]
	0x031E60E8 CBZ X20, 0x31E6214
	0x031E60EC ADRP X8, 0xF3A000
	0x031E60F0 LDR X8, [X8 + 0x158]
	0x031E60F4 ADRP X21, 0xF0D000
	0x031E60F8 MOV X0, X20
	0x031E60FC LDR X1, [X8]
	0x031E6100 LDR X21, [X21 + 0xAC8]
	0x031E6104 BL 0x2AA4E88

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F7000
	007 Move W8, [X20+316]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3B000
	014 Move X0, [X0+2656]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3B000
	017 Move X0, [X0+2664]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3B000
	020 Move X0, [X0+2680]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3B000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+316], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3B000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+752]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3B000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2656]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3B000
	054 Move X8, [X8+2680]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Vector2>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+752], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3B000
	066 Move X8, [X8+2664]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: UnityEngine.Vector3 op_Implicit(mixpanel.Value value)

Disassembly:
	0x031DD0DC MOVZ W1, 0x32
	0x031DD0E0 MOV X20, X0
	0x031DD0E4 BL 0x301B830
	0x031DD0E8 STR X20, [X19 + 0x30]

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {5}
	003 Call Value.get_Vector3, X0
	004 Return X0
	005 Move [X31-16], X30
	006 Call 0x1C17F20

Method: UnityEngine.Vector3[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E6108 LDR X8, [X21]
	0x031E610C MOV W20, W0
	0x031E6110 MOV W1, W20
	0x031E6114 MOV X0, X8
	0x031E6118 BL 0x1C16D6C
	0x031E611C STR X0, [X19 + 0x48]
	0x031E6120 LDR X0, [X21]
	0x031E6124 MOV W1, W20
	0x031E6128 BL 0x1C16D6C
	0x031E612C CMP W20, 0x1
	0x031E6130 STR X0, [X19 + 0x50]
	0x031E6134 B.LT 0x31E61EC
	0x031E6138 LDR X0, [X19 + 0x40]
	0x031E613C CBZ X0, 0x31E6214
	0x031E6140 ADRP X8, 0xF39000
	0x031E6144 LDR X8, [X8 + 0xFA0]
	0x031E6148 ADRP X22, 0xF3A000
	0x031E614C ADRP X21, 0xF3A000
	0x031E6150 LDR X1, [X8]
	0x031E6154 LDR X22, [X22 + 0x340]
	0x031E6158 LDR X21, [X21 + 0x328]
	0x031E615C ADD X8, X31, 0x8
	0x031E6160 BL 0x2AA54BC
	0x031E6164 LDUR V0, [X31 + 0x8]
	0x031E6168 LDUR V1, [X31 + 0x18]
	0x031E616C LDR X8, [X31 + 0x28]
	0x031E6170 MOV X23, X31
	0x031E6174 MOV W20, W20
	0x031E6178 STP V0, V1, [X31 + 0x30]
	0x031E617C STR X8, [X31 + 0x50]
	0x031E6180 LDR X1, [X22]
	0x031E6184 ADD X0, X31, 0x30
	0x031E6188 BL 0x2C0A728
	0x031E618C LDR X8, [X19 + 0x48]
	0x031E6190 CBZ X8, 0x31E6204
	0x031E6194 LDR W9, [X8 + 0x18]
	0x031E6198 CMP X23, X9
	0x031E619C B.CS 0x31E6210
	0x031E61A0 LDR X9, [X31 + 0x40]
	0x031E61A4 ADD X8, X8, X23, 0x3, LSL
	0x031E61A8 STR X9, [X8 + 0x20]
	0x031E61AC LDR X24, [X19 + 0x50]
	0x031E61B0 LDR X0, [X31 + 0x48]
	0x031E61B4 MOV X1, X31
	0x031E61B8 BL 0x3C86C20
	0x031E61BC CBZ X24, 0x31E6208
	0x031E61C0 LDR W8, [X24 + 0x18]
	0x031E61C4 CMP X23, X8
	0x031E61C8 B.CS 0x31E620C
	0x031E61CC ADD X8, X24, X23, 0x3, LSL
	0x031E61D0 ADD X23, X23, 0x1
	0x031E61D4 CMP X20, X23
	0x031E61D8 STR X0, [X8 + 0x20]
	0x031E61DC B.NE 0x31E6180
	0x031E61E0 LDR X1, [X21]
	0x031E61E4 ADD X0, X31, 0x30
	0x031E61E8 BL 0x2C0A83C
	0x031E61EC LDP X20, X19, [X31 + 0x90]
	0x031E61F0 LDP X22, X21, [X31 + 0x80]
	0x031E61F4 LDP X24, X23, [X31 + 0x70]
	0x031E61F8 LDR X30, [X31 + 0x60]
	0x031E61FC ADD X31, X31, 0xA0
	0x031E6200 RET
	0x031E6204 BL 0x1C16F20
	0x031E6208 BL 0x1C16F20
	0x031E620C BL 0x1C16F28
	0x031E6210 BL 0x1C16F28
	0x031E6214 BL 0x1C16F20
	0x031E6218 B 0x31E6224
	0x031E621C B 0x31E6224
	0x031E6220 B 0x31E6224
	0x031E6224 MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F7000
	007 Move W8, [X20+317]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3B000
	014 Move X0, [X0+2688]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3B000
	017 Move X0, [X0+2696]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3A000
	020 Move X0, [X0+1456]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3B000
	023 Move X0, [X0+2704]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3B000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+317], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3B000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+760]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3B000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2688]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3B000
	057 Move X8, [X8+2704]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Vector3>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+760], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3B000
	069 Move X8, [X8+2696]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3A000
	077 Move X8, [X8+1456]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Vector3>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<UnityEngine.Vector3> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E6228 CMP W1, 0x1
	0x031E622C B.NE 0x31E6258
	0x031E6230 MOV X0, X19
	0x031E6234 BL 0x3EB1AD0
	0x031E6238 LDR X20, [X0]
	0x031E623C BL 0x3EB1AE0
	0x031E6240 LDR X1, [X21]
	0x031E6244 ADD X0, X31, 0x30
	0x031E6248 BL 0x2C0A83C
	0x031E624C CBZ X20, 0x31E61EC
	0x031E6250 MOV X0, X20
	0x031E6254 BL 0x1C16F18
	0x031E6258 MOV X20, X31
	0x031E625C B 0x31E6264
	0x031E6260 MOV X19, X0
	0x031E6264 LDR X1, [X21]
	0x031E6268 ADD X0, X31, 0x30
	0x031E626C BL 0x2C0A83C
	0x031E6270 CBNZ X20, 0x31E627C
	0x031E6274 MOV X0, X19
	0x031E6278 BL 0x1D2C690
	0x031E627C MOV X0, X20
	0x031E6280 BL 0x1C16F18
	0x031E6284 BL 0x1990590
	0x031E6288 STP X30, X19, [X31 - 0x10]!
	0x031E628C LDR W8, [X0 + 0x10]
	0x031E6290 MOV X19, X0
	0x031E6294 CMP W8, 0x5
	0x031E6298 B.NE 0x31E62A8
	0x031E629C MOV X0, X19
	0x031E62A0 BL 0x31E62C4
	0x031E62A4 LDR W8, [X19 + 0x10]
	0x031E62A8 CMP W8, 0x6
	0x031E62AC B.NE 0x31E62BC
	0x031E62B0 MOV X0, X19
	0x031E62B4 LDP X30, X19, [X31], #0x10
	0x031E62B8 B 0x31E6440
	0x031E62BC LDP X30, X19, [X31], #0x10
	0x031E62C0 RET
	0x031E62C4 STR X30, [X31 - 0x50]!
	0x031E62C8 STP X26, X25, [X31 + 0x10]
	0x031E62CC STP X24, X23, [X31 + 0x20]
	0x031E62D0 STP X22, X21, [X31 + 0x30]
	0x031E62D4 STP X20, X19, [X31 + 0x40]
	0x031E62D8 ADRP X20, 0x11F6000
	0x031E62DC LDRB W8, [X20 + 0x14B]
	0x031E62E0 MOV X19, X0
	0x031E62E4 TBNZ X8, 0x0, 0x31E6320
	0x031E62E8 ADRP X0, 0xF3A000
	0x031E62EC LDR X0, [X0 + 0x2E8]
	0x031E62F0 BL 0x1C16CF4
	0x031E62F4 ADRP X0, 0xF39000
	0x031E62F8 LDR X0, [X0 + 0xFD0]
	0x031E62FC BL 0x1C16CF4
	0x031E6300 ADRP X0, 0xF39000
	0x031E6304 LDR X0, [X0 + 0xFC8]
	0x031E6308 BL 0x1C16CF4
	0x031E630C ADRP X0, 0xF12000
	0x031E6310 LDR X0, [X0 + 0x748]
	0x031E6314 BL 0x1C16CF4
	0x031E6318 MOVZ W8, 0x1
	0x031E631C STRB W8, [X20 + 0x14B]
	0x031E6320 LDR X8, [X19 + 0x38]
	0x031E6324 CBZ X8, 0x31E6420

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F7000
	007 Move W8, [X20+318]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3B000
	014 Move X0, [X0+2688]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3B000
	017 Move X0, [X0+2696]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3B000
	020 Move X0, [X0+2712]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3B000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+318], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3B000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+768]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3B000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2688]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3B000
	054 Move X8, [X8+2712]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Vector3>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+768], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3B000
	066 Move X8, [X8+2696]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: UnityEngine.Vector4 op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E6328 ADRP X9, 0xF39000
	0x031E632C LDR X9, [X9 + 0xFC8]
	0x031E6330 ADRP X21, 0xF39000
	0x031E6334 LDR W20, [X8 + 0x18]

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {5}
	003 Call Value.get_Vector4, X0
	004 Return X0
	005 Move [X31-16], X30
	006 Call 0x1C17F20

Method: UnityEngine.Vector4[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E6338 LDR X0, [X9]
	0x031E633C LDR X21, [X21 + 0xFD0]
	0x031E6340 BL 0x1C16F10
	0x031E6344 LDR X2, [X21]
	0x031E6348 MOV W1, W20
	0x031E634C MOV X21, X0
	0x031E6350 BL 0x301B830
	0x031E6354 STR X21, [X19 + 0x30]
	0x031E6358 CBZ W20, 0x31E6420
	0x031E635C LDR X22, [X19 + 0x38]
	0x031E6360 CBZ X22, 0x31E6438
	0x031E6364 LDR X8, [X22 + 0x18]
	0x031E6368 CMP W8, 0x1
	0x031E636C B.LT 0x31E6420
	0x031E6370 ADRP X25, 0xF12000
	0x031E6374 ADRP X26, 0xF3A000
	0x031E6378 LDR X25, [X25 + 0x748]
	0x031E637C LDR X26, [X26 + 0x2E8]
	0x031E6380 MOV X23, X31
	0x031E6384 AND X8, X8, 0x0
	0x031E6388 ADD X24, X22, 0x20
	0x031E638C CMP X23, W8, UXTW
	0x031E6390 B.CS 0x31E643C
	0x031E6394 LDR X0, [X25]
	0x031E6398 LDR X21, [X24, X23, LSL #3]
	0x031E639C BL 0x1C16F10
	0x031E63A0 MOV X20, X0
	0x031E63A4 BL 0x31D3D04
	0x031E63A8 MOV X0, X21
	0x031E63AC MOV X1, X20
	0x031E63B0 MOV X2, X31
	0x031E63B4 BL 0x3C86F84
	0x031E63B8 LDR X0, [X19 + 0x30]
	0x031E63BC CBZ X0, 0x31E6438
	0x031E63C0 LDR W10, [X0 + 0x1C]
	0x031E63C4 LDR X8, [X0 + 0x10]
	0x031E63C8 LDR X9, [X26]
	0x031E63CC ADD W10, W10, 0x1
	0x031E63D0 STR W10, [X0 + 0x1C]
	0x031E63D4 CBZ X8, 0x31E6438
	0x031E63D8 LDRSW X10, [X0 + 0x18]
	0x031E63DC LDR W11, [X8 + 0x18]
	0x031E63E0 CMP W10, W11
	0x031E63E4 B.CS 0x31E63FC
	0x031E63E8 ADD W9, W10, 0x1
	0x031E63EC ADD X8, X8, X10, 0x3, LSL
	0x031E63F0 STR W9, [X0 + 0x18]
	0x031E63F4 STR X20, [X8 + 0x20]
	0x031E63F8 B 0x31E6410
	0x031E63FC LDR X8, [X9 + 0x20]
	0x031E6400 MOV X1, X20
	0x031E6404 LDR X8, [X8 + 0xC0]
	0x031E6408 LDR X2, [X8 + 0x70]
	0x031E640C BL 0x301BF90
	0x031E6410 LDR W8, [X22 + 0x18]
	0x031E6414 ADD X23, X23, 0x1
	0x031E6418 CMP X23, W8, SXTW
	0x031E641C B.LT 0x31E638C
	0x031E6420 LDP X20, X19, [X31 + 0x40]
	0x031E6424 LDP X22, X21, [X31 + 0x30]
	0x031E6428 LDP X24, X23, [X31 + 0x20]
	0x031E642C LDP X26, X25, [X31 + 0x10]
	0x031E6430 LDR X30, [X31], #0x50
	0x031E6434 RET
	0x031E6438 BL 0x1C16F20
	0x031E643C BL 0x1C16F28
	0x031E6440 STR X30, [X31 - 0x40]!
	0x031E6444 STP X24, X23, [X31 + 0x10]
	0x031E6448 STP X22, X21, [X31 + 0x20]
	0x031E644C STP X20, X19, [X31 + 0x30]
	0x031E6450 ADRP X20, 0x11F6000
	0x031E6454 LDRB W8, [X20 + 0x14C]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F7000
	007 Move W8, [X20+319]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3B000
	014 Move X0, [X0+2720]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3B000
	017 Move X0, [X0+2728]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3B000
	020 Move X0, [X0+1880]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3B000
	023 Move X0, [X0+2736]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3B000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+319], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3B000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+776]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3B000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2720]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3B000
	057 Move X8, [X8+2736]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Vector4>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+776], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3B000
	069 Move X8, [X8+2728]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3B000
	077 Move X8, [X8+1880]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Vector4>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<UnityEngine.Vector4> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E6458 MOV X19, X0
	0x031E645C TBNZ X8, 0x0, 0x31E6498
	0x031E6460 ADRP X0, 0xF39000
	0x031E6464 LDR X0, [X0 + 0xFE0]
	0x031E6468 BL 0x1C16CF4
	0x031E646C ADRP X0, 0xF39000
	0x031E6470 LDR X0, [X0 + 0xF88]
	0x031E6474 BL 0x1C16CF4
	0x031E6478 ADRP X0, 0xF39000
	0x031E647C LDR X0, [X0 + 0xFD8]
	0x031E6480 BL 0x1C16CF4
	0x031E6484 ADRP X0, 0xF12000
	0x031E6488 LDR X0, [X0 + 0x748]
	0x031E648C BL 0x1C16CF4
	0x031E6490 MOVZ W8, 0x1
	0x031E6494 STRB W8, [X20 + 0x14C]
	0x031E6498 LDR X8, [X19 + 0x48]
	0x031E649C CBZ X8, 0x31E6564
	0x031E64A0 ADRP X9, 0xF39000
	0x031E64A4 LDR X9, [X9 + 0xFD8]
	0x031E64A8 ADRP X21, 0xF39000
	0x031E64AC LDR X20, [X8 + 0x18]
	0x031E64B0 LDR X0, [X9]
	0x031E64B4 LDR X21, [X21 + 0xFE0]
	0x031E64B8 BL 0x1C16F10
	0x031E64BC LDR X2, [X21]
	0x031E64C0 MOV W1, W20
	0x031E64C4 MOV X21, X0
	0x031E64C8 BL 0x2AA481C
	0x031E64CC CMP W20, 0x1
	0x031E64D0 STR X21, [X19 + 0x40]
	0x031E64D4 B.LT 0x31E6564
	0x031E64D8 ADRP X23, 0xF12000
	0x031E64DC ADRP X24, 0xF39000
	0x031E64E0 LDR X23, [X23 + 0x748]
	0x031E64E4 LDR X24, [X24 + 0xF88]
	0x031E64E8 MOV X21, X31
	0x031E64EC AND X22, X20, 0x0
	0x031E64F0 LDR X0, [X23]
	0x031E64F4 BL 0x1C16F10
	0x031E64F8 MOV X20, X0
	0x031E64FC BL 0x31D3D04
	0x031E6500 LDR X8, [X19 + 0x50]
	0x031E6504 CBZ X8, 0x31E6578
	0x031E6508 LDR W9, [X8 + 0x18]
	0x031E650C CMP X21, X9
	0x031E6510 B.CS 0x31E657C
	0x031E6514 ADD X8, X8, X21, 0x3, LSL
	0x031E6518 LDR X0, [X8 + 0x20]
	0x031E651C MOV X1, X20
	0x031E6520 MOV X2, X31
	0x031E6524 BL 0x3C86F84
	0x031E6528 LDR X8, [X19 + 0x48]
	0x031E652C CBZ X8, 0x31E6578
	0x031E6530 LDR W9, [X8 + 0x18]
	0x031E6534 CMP X21, X9
	0x031E6538 B.CS 0x31E657C
	0x031E653C LDR X0, [X19 + 0x40]
	0x031E6540 CBZ X0, 0x31E6578
	0x031E6544 ADD X8, X8, X21, 0x3, LSL
	0x031E6548 LDR X1, [X8 + 0x20]
	0x031E654C LDR X3, [X24]
	0x031E6550 MOV X2, X20
	0x031E6554 BL 0x2AA5084

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F7000
	007 Move W8, [X20+320]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3B000
	014 Move X0, [X0+2720]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3B000
	017 Move X0, [X0+2728]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3B000
	020 Move X0, [X0+2744]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3B000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+320], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3B000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+784]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3B000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2720]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3B000
	054 Move X8, [X8+2744]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Vector4>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+784], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3B000
	066 Move X8, [X8+2728]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: UnityEngine.Quaternion op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E6558 ADD X21, X21, 0x1
	0x031E655C CMP X22, X21
	0x031E6560 B.NE 0x31E64F0
	0x031E6564 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {5}
	003 Call Value.get_Quaternion, X0
	004 Return X0
	005 Move [X31-16], X30
	006 Call 0x1C17F20

Method: UnityEngine.Quaternion[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E6568 LDP X22, X21, [X31 + 0x20]
	0x031E656C LDP X24, X23, [X31 + 0x10]
	0x031E6570 LDR X30, [X31], #0x40
	0x031E6574 RET
	0x031E6578 BL 0x1C16F20
	0x031E657C BL 0x1C16F28
	0x031E6580 STP X30, X19, [X31 - 0x10]!
	0x031E6584 MOV X19, X0
	0x031E6588 BL 0x31E659C
	0x031E658C MOV W1, W0
	0x031E6590 MOV X0, X19
	0x031E6594 LDP X30, X19, [X31], #0x10
	0x031E6598 B 0x31E6754
	0x031E659C STR X30, [X31 - 0x20]!
	0x031E65A0 STP X20, X19, [X31 + 0x10]
	0x031E65A4 ADRP X20, 0x11F6000
	0x031E65A8 LDRB W8, [X20 + 0x155]
	0x031E65AC MOV X19, X0
	0x031E65B0 TBNZ X8, 0x0, 0x31E65E0
	0x031E65B4 ADRP X0, 0xF0D000
	0x031E65B8 LDR X0, [X0 + 0x830]
	0x031E65BC BL 0x1C16CF4
	0x031E65C0 ADRP X0, 0xF17000
	0x031E65C4 LDR X0, [X0 + 0xFF8]
	0x031E65C8 BL 0x1C16CF4
	0x031E65CC ADRP X0, 0xF18000
	0x031E65D0 LDR X0, [X0]
	0x031E65D4 BL 0x1C16CF4
	0x031E65D8 MOVZ W8, 0x1
	0x031E65DC STRB W8, [X20 + 0x155]
	0x031E65E0 MOV X0, X19
	0x031E65E4 BL 0x31E7170
	0x031E65E8 CBZ X19, 0x31E6750
	0x031E65EC LDR X8, [X19]
	0x031E65F0 MOV X0, X19
	0x031E65F4 LDP X9, X1, [X8 + 0x1B8]
	0x031E65F8 BLR X9
	0x031E65FC ADDS W31, W0, 0x1
	0x031E6600 B.EQ 0x31E6648
	0x031E6604 MOV X0, X19
	0x031E6608 BL 0x31E70F8
	0x031E660C AND W8, W0, 0xFFFF
	0x031E6610 CMP W8, 0x5B
	0x031E6614 B.HI 0x31E6658
	0x031E6618 SUB W9, W8, 0x22
	0x031E661C CMP W9, 0x18
	0x031E6620 B.HI 0x31E66A8
	0x031E6624 ADRP X8, 0xFFFFFFFFFD9B0000
	0x031E6628 ADD X8, X8, 0x3E6
	0x031E662C ADR X10, 0x14
	0x031E6630 LDRB W11, [X8, X9, LSL]
	0x031E6634 ADD X10, X10, X11, 0x2, LSL
	0x031E6638 MOVZ W0, 0x5
	0x031E663C BR X10
	0x031E6640 MOVZ W0, 0x8
	0x031E6644 B 0x31E664C
	0x031E6648 MOV W0, W31
	0x031E664C LDP X20, X19, [X31 + 0x10]
	0x031E6650 LDR X30, [X31], #0x20
	0x031E6654 RET
	0x031E6658 CMP W8, 0x5D
	0x031E665C B.EQ 0x31E6688
	0x031E6660 CMP W8, 0x7B
	0x031E6664 B.EQ 0x31E66A0
	0x031E6668 CMP W8, 0x7D
	0x031E666C B.NE 0x31E66B8
	0x031E6670 LDR X8, [X19]
	0x031E6674 MOV X0, X19
	0x031E6678 LDP X9, X1, [X8 + 0x1C8]
	0x031E667C BLR X9
	0x031E6680 MOVZ W0, 0x2
	0x031E6684 B 0x31E664C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F7000
	007 Move W8, [X20+321]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3B000
	014 Move X0, [X0+2752]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3B000
	017 Move X0, [X0+2760]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3B000
	020 Move X0, [X0+1920]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3B000
	023 Move X0, [X0+2768]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3B000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+321], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3B000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+792]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3B000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2752]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3B000
	057 Move X8, [X8+2768]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Quaternion>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+792], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3B000
	069 Move X8, [X8+2760]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3B000
	077 Move X8, [X8+1920]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Quaternion>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<UnityEngine.Quaternion> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E6688 LDR X8, [X19]
	0x031E668C MOV X0, X19
	0x031E6690 LDP X9, X1, [X8 + 0x1C8]
	0x031E6694 BLR X9
	0x031E6698 MOVZ W0, 0x4
	0x031E669C B 0x31E664C
	0x031E66A0 MOVZ W0, 0x1
	0x031E66A4 B 0x31E664C
	0x031E66A8 CMP W8, 0x5B
	0x031E66AC B.NE 0x31E66B8
	0x031E66B0 MOVZ W0, 0x3
	0x031E66B4 B 0x31E664C
	0x031E66B8 MOV X0, X19
	0x031E66BC BL 0x31E6E94
	0x031E66C0 ADRP X8, 0xF17000
	0x031E66C4 LDR X8, [X8 + 0xFF8]
	0x031E66C8 MOV X2, X31
	0x031E66CC MOV X19, X0
	0x031E66D0 LDR X1, [X8]
	0x031E66D4 BL 0x321BA08
	0x031E66D8 TBZ X0, 0x0, 0x31E66E4
	0x031E66DC MOVZ W0, 0xA
	0x031E66E0 B 0x31E664C
	0x031E66E4 ADRP X8, 0xF18000
	0x031E66E8 LDR X8, [X8]
	0x031E66EC MOV X0, X19
	0x031E66F0 MOV X2, X31
	0x031E66F4 LDR X1, [X8]
	0x031E66F8 BL 0x321BA08
	0x031E66FC TBZ X0, 0x0, 0x31E6708
	0x031E6700 MOVZ W0, 0x9
	0x031E6704 B 0x31E664C
	0x031E6708 ADRP X8, 0xF0D000
	0x031E670C LDR X8, [X8 + 0x830]
	0x031E6710 MOV X0, X19
	0x031E6714 MOV X2, X31
	0x031E6718 LDR X1, [X8]
	0x031E671C BL 0x321BA08
	0x031E6720 ANDS W31, W0, 0x1
	0x031E6724 MOVZ W8, 0xB
	0x031E6728 CSEL W0, W8, W31, NE
	0x031E672C B 0x31E664C
	0x031E6730 MOVZ W0, 0x7
	0x031E6734 B 0x31E664C
	0x031E6738 LDR X8, [X19]
	0x031E673C MOV X0, X19
	0x031E6740 LDP X9, X1, [X8 + 0x1C8]
	0x031E6744 BLR X9
	0x031E6748 MOVZ W0, 0x6
	0x031E674C B 0x31E664C
	0x031E6750 BL 0x1C16F20
	0x031E6754 SUB X31, X31, 0x20
	0x031E6758 STP X30, X19, [X31 + 0x10]
	0x031E675C SUB W8, W1, 0x1
	0x031E6760 CMP W8, 0xA
	0x031E6764 B.HI 0x31E6784
	0x031E6768 ADRP X9, 0xFFFFFFFFFD9B0000
	0x031E676C ADD X9, X9, 0x3FF
	0x031E6770 ADR X10, 0x14
	0x031E6774 LDRB W11, [X9, X8, LSL]
	0x031E6778 ADD X10, X10, X11, 0x2, LSL
	0x031E677C MOV X19, X0
	0x031E6780 BR X10
	0x031E6784 LDP X30, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F7000
	007 Move W8, [X20+322]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3B000
	014 Move X0, [X0+2752]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3B000
	017 Move X0, [X0+2760]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3B000
	020 Move X0, [X0+2776]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3B000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+322], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3B000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+800]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3B000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2752]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3B000
	054 Move X8, [X8+2776]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Quaternion>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+800], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3B000
	066 Move X8, [X8+2760]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: UnityEngine.Bounds op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E6788 ADD X31, X31, 0x20
	0x031E678C B 0x31DD7A4
	0x031E6790 CBZ X19, 0x31E6830
	0x031E6794 LDR X8, [X19]
	0x031E6798 MOV X0, X19
	0x031E679C LDP X9, X1, [X8 + 0x1C8]
	0x031E67A0 BLR X9
	0x031E67A4 MOV X0, X19
	0x031E67A8 LDP X30, X19, [X31 + 0x10]
	0x031E67AC ADD X31, X31, 0x20
	0x031E67B0 B 0x31E6ABC
	0x031E67B4 MOVZ W0, 0x1
	0x031E67B8 B 0x31E6824
	0x031E67BC CBZ X19, 0x31E6830

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Compare X0, 0
	005 JumpIfEqual {17}
	006 Move X19, X8
	007 Add X8, X31, 8
	008 Call Value.get_Bounds, X0
	009 Move X8, [X31+24]
	010 NotImplemented "Instruction LDUR not yet implemented."
	011 Move [X19+16], X8
	012 Move [X19], V0
	013 Move X30, [X31+32]
	014 Move X19, [X31+40]
	015 Add X31, X31, 48
	016 Return X0
	017 Call 0x1C17F20

Method: UnityEngine.Bounds[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E67C0 LDR X8, [X19]
	0x031E67C4 MOV X0, X19
	0x031E67C8 LDP X9, X1, [X8 + 0x1C8]
	0x031E67CC BLR X9
	0x031E67D0 MOV X0, X19
	0x031E67D4 LDP X30, X19, [X31 + 0x10]
	0x031E67D8 ADD X31, X31, 0x20
	0x031E67DC B 0x31E6CDC
	0x031E67E0 MOV X0, X19
	0x031E67E4 BL 0x31E6834
	0x031E67E8 LDP X30, X19, [X31 + 0x10]
	0x031E67EC ADD X31, X31, 0x20
	0x031E67F0 B 0x31D3DD8
	0x031E67F4 MOV X0, X19
	0x031E67F8 STR X31, [X31 + 0x8]
	0x031E67FC BL 0x31E6E94
	0x031E6800 ADD X1, X31, 0x8
	0x031E6804 MOV X2, X31
	0x031E6808 BL 0x3366738
	0x031E680C LDR V0, [X31 + 0x8]
	0x031E6810 BL 0x31D4FF4
	0x031E6814 LDP X30, X19, [X31 + 0x10]
	0x031E6818 ADD X31, X31, 0x20
	0x031E681C RET
	0x031E6820 MOV W0, W31
	0x031E6824 LDP X30, X19, [X31 + 0x10]
	0x031E6828 ADD X31, X31, 0x20
	0x031E682C B 0x31D3F18
	0x031E6830 BL 0x1C16F20
	0x031E6834 STP X30, X27, [X31 - 0x50]!
	0x031E6838 STP X26, X25, [X31 + 0x10]
	0x031E683C STP X24, X23, [X31 + 0x20]
	0x031E6840 STP X22, X21, [X31 + 0x30]
	0x031E6844 STP X20, X19, [X31 + 0x40]
	0x031E6848 ADRP X20, 0x11F6000
	0x031E684C ADRP X22, 0xF0D000
	0x031E6850 LDRB W8, [X20 + 0x14E]
	0x031E6854 LDR X22, [X22 + 0x8F0]
	0x031E6858 MOV X19, X0
	0x031E685C TBNZ X8, 0x0, 0x31E6880
	0x031E6860 ADRP X0, 0xF16000
	0x031E6864 LDR X0, [X0 + 0x9E8]
	0x031E6868 BL 0x1C16CF4
	0x031E686C ADRP X0, 0xF0D000
	0x031E6870 LDR X0, [X0 + 0x8F0]
	0x031E6874 BL 0x1C16CF4
	0x031E6878 MOVZ W8, 0x1
	0x031E687C STRB W8, [X20 + 0x14E]
	0x031E6880 LDR X0, [X22]
	0x031E6884 BL 0x1C16F10
	0x031E6888 MOV X1, X31
	0x031E688C MOV X20, X0
	0x031E6890 BL 0x3231AC4
	0x031E6894 CBZ X19, 0x31E6A94
	0x031E6898 LDR X8, [X19]
	0x031E689C MOV X0, X19
	0x031E68A0 LDP X9, X1, [X8 + 0x1C8]
	0x031E68A4 BLR X9
	0x031E68A8 LDR X8, [X19]
	0x031E68AC MOV X0, X19
	0x031E68B0 LDP X9, X1, [X8 + 0x1B8]
	0x031E68B4 BLR X9
	0x031E68B8 ADDS W31, W0, 0x1
	0x031E68BC B.EQ 0x31E6A6C
	0x031E68C0 ADRP X23, 0xF16000
	0x031E68C4 LDR X23, [X23 + 0x9E8]
	0x031E68C8 MOVZ X25, 0x2001
	0x031E68CC ADRP X26, 0xFFFFFFFFFD9B0000
	0x031E68D0 MOVZ W24, 0x1
	0x031E68D4 MOVK X25, 0x4000000
	0x031E68D8 ADD X26, X26, 0x40A
	0x031E68DC MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F7000
	007 Move W8, [X20+323]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3B000
	014 Move X0, [X0+2784]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3B000
	017 Move X0, [X0+2792]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3B000
	020 Move X0, [X0+1960]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3B000
	023 Move X0, [X0+2800]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3B000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+323], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3B000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+808]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3B000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2784]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3B000
	057 Move X8, [X8+2800]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Bounds>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+808], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3B000
	069 Move X8, [X8+2792]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3B000
	077 Move X8, [X8+1960]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Bounds>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<UnityEngine.Bounds> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E68E0 BL 0x31E6E1C
	0x031E68E4 AND W8, W0, 0xFFFF
	0x031E68E8 CMP W8, 0x5C
	0x031E68EC B.EQ 0x31E6904
	0x031E68F0 CMP W8, 0x22
	0x031E68F4 B.EQ 0x31E6A6C
	0x031E68F8 CBZ X20, 0x31E6A94
	0x031E68FC MOV W1, W0
	0x031E6900 B 0x31E6950
	0x031E6904 LDR X8, [X19]
	0x031E6908 MOV X0, X19
	0x031E690C LDP X9, X1, [X8 + 0x1B8]
	0x031E6910 BLR X9
	0x031E6914 ADDS W31, W0, 0x1
	0x031E6918 B.EQ 0x31E6A6C
	0x031E691C MOV X0, X19
	0x031E6920 BL 0x31E6E1C
	0x031E6924 AND W8, W0, 0xFFFF
	0x031E6928 MOV W1, W0
	0x031E692C CMP W8, 0x5C
	0x031E6930 B.HI 0x31E6978
	0x031E6934 SUB W8, W8, 0x22
	0x031E6938 CMP W8, 0x3A
	0x031E693C B.HI 0x31E695C
	0x031E6940 LSLV X8, X24, X8
	0x031E6944 ANDS X31, X8, X25, 0x0
	0x031E6948 B.EQ 0x31E695C
	0x031E694C CBZ X20, 0x31E6A94
	0x031E6950 MOV X0, X20
	0x031E6954 MOV X2, X31
	0x031E6958 BL 0x3233D30
	0x031E695C LDR X8, [X19]
	0x031E6960 MOV X0, X19
	0x031E6964 LDP X9, X1, [X8 + 0x1B8]
	0x031E6968 BLR X9
	0x031E696C ADDS W31, W0, 0x1
	0x031E6970 B.NE 0x31E68DC
	0x031E6974 B 0x31E6A6C
	0x031E6978 CMP W8, 0x66
	0x031E697C B.HI 0x31E69A0
	0x031E6980 AND W8, W1, 0xFFFF
	0x031E6984 CMP W8, 0x62
	0x031E6988 B.EQ 0x31E69CC
	0x031E698C CMP W8, 0x66
	0x031E6990 B.NE 0x31E695C
	0x031E6994 CBZ X20, 0x31E6A94
	0x031E6998 MOVZ W1, 0xC
	0x031E699C B 0x31E6950
	0x031E69A0 AND W8, W1, 0xFFFF
	0x031E69A4 SUB W8, W8, 0x6E
	0x031E69A8 CMP W8, 0x7
	0x031E69AC B.HI 0x31E695C
	0x031E69B0 ADR X9, 0xFFFFFFFFFFFFFFAC
	0x031E69B4 LDRB W10, [X26, X8, LSL]
	0x031E69B8 ADD X9, X9, X10, 0x2, LSL
	0x031E69BC BR X9
	0x031E69C0 CBZ X20, 0x31E6A94
	0x031E69C4 MOVZ W1, 0xA
	0x031E69C8 B 0x31E6950
	0x031E69CC CBZ X20, 0x31E6A94
	0x031E69D0 MOVZ W1, 0x8
	0x031E69D4 B 0x31E6950
	0x031E69D8 CBZ X20, 0x31E6A94
	0x031E69DC MOVZ W1, 0xD

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F7000
	007 Move W8, [X20+324]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3B000
	014 Move X0, [X0+2784]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3B000
	017 Move X0, [X0+2792]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3B000
	020 Move X0, [X0+2808]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3B000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+324], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3B000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+816]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3B000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2784]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3B000
	054 Move X8, [X8+2808]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Bounds>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+816], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3B000
	066 Move X8, [X8+2792]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: UnityEngine.Rect op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E69E0 B 0x31E6950
	0x031E69E4 CBZ X20, 0x31E6A94
	0x031E69E8 MOVZ W1, 0x9
	0x031E69EC B 0x31E6950

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {5}
	003 Call Value.get_Rect, X0
	004 Return X0
	005 Move [X31-16], X30
	006 Call 0x1C17F20

Method: UnityEngine.Rect[] op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E69F0 LDR X0, [X22]
	0x031E69F4 BL 0x1C16F10
	0x031E69F8 MOV X1, X31
	0x031E69FC MOV X21, X0
	0x031E6A00 BL 0x3231AC4
	0x031E6A04 MOVZ W27, 0x4
	0x031E6A08 MOV X0, X19
	0x031E6A0C BL 0x31E6E1C
	0x031E6A10 CBZ X21, 0x31E6A94
	0x031E6A14 MOV W1, W0
	0x031E6A18 MOV X0, X21
	0x031E6A1C MOV X2, X31
	0x031E6A20 BL 0x3233D30
	0x031E6A24 SUBS W27, W27, 0x1
	0x031E6A28 B.NE 0x31E6A08
	0x031E6A2C LDR X8, [X21]
	0x031E6A30 MOV X0, X21
	0x031E6A34 LDP X9, X1, [X8 + 0x168]
	0x031E6A38 BLR X9
	0x031E6A3C LDR X8, [X23]
	0x031E6A40 MOV X21, X0
	0x031E6A44 LDR W9, [X8 + 0xE0]
	0x031E6A48 CBNZ W9, 0x31E6A54
	0x031E6A4C MOV X0, X8
	0x031E6A50 BL 0x1C16DFC
	0x031E6A54 MOVZ W1, 0x10
	0x031E6A58 MOV X0, X21
	0x031E6A5C MOV X2, X31
	0x031E6A60 BL 0x3322348
	0x031E6A64 CBNZ X20, 0x31E68FC
	0x031E6A68 B 0x31E6A94
	0x031E6A6C CBZ X20, 0x31E6A94
	0x031E6A70 LDR X8, [X20]
	0x031E6A74 MOV X0, X20
	0x031E6A78 LDP X20, X19, [X31 + 0x40]
	0x031E6A7C LDP X22, X21, [X31 + 0x30]
	0x031E6A80 LDP X2, X1, [X8 + 0x168]
	0x031E6A84 LDP X24, X23, [X31 + 0x20]
	0x031E6A88 LDP X26, X25, [X31 + 0x10]
	0x031E6A8C LDP X30, X27, [X31], #0x50
	0x031E6A90 BR X2
	0x031E6A94 BL 0x1C16F20
	0x031E6A98 STR X30, [X31 - 0x10]!
	0x031E6A9C STR X31, [X31 + 0x8]
	0x031E6AA0 BL 0x31E6E94
	0x031E6AA4 ADD X1, X31, 0x8
	0x031E6AA8 MOV X2, X31
	0x031E6AAC BL 0x3366738
	0x031E6AB0 LDR V0, [X31 + 0x8]
	0x031E6AB4 LDR X30, [X31], #0x10
	0x031E6AB8 RET
	0x031E6ABC STR X30, [X31 - 0x30]!
	0x031E6AC0 STP X22, X21, [X31 + 0x10]
	0x031E6AC4 STP X20, X19, [X31 + 0x20]
	0x031E6AC8 ADRP X22, 0x11F6000
	0x031E6ACC ADRP X21, 0xF39000
	0x031E6AD0 ADRP X20, 0xF3A000
	0x031E6AD4 LDRB W8, [X22 + 0x150]
	0x031E6AD8 LDR X21, [X21 + 0xFD8]
	0x031E6ADC LDR X20, [X20 + 0x3C8]
	0x031E6AE0 MOV X19, X0
	0x031E6AE4 TBNZ X8, 0x0, 0x31E6B5C
	0x031E6AE8 ADRP X0, 0xF39000
	0x031E6AEC LDR X0, [X0 + 0xF78]
	0x031E6AF0 BL 0x1C16CF4
	0x031E6AF4 ADRP X0, 0xF3A000
	0x031E6AF8 LDR X0, [X0 + 0x3C8]
	0x031E6AFC BL 0x1C16CF4
	0x031E6B00 ADRP X0, 0xF39000
	0x031E6B04 LDR X0, [X0 + 0xF80]
	0x031E6B08 BL 0x1C16CF4
	0x031E6B0C ADRP X0, 0xF39000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F7000
	007 Move W8, [X20+325]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0xF3B000
	014 Move X0, [X0+2816]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3B000
	017 Move X0, [X0+2824]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3B000
	020 Move X0, [X0+2000]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3B000
	023 Move X0, [X0+2832]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3B000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+325], W8
	030 Compare X19, 0
	031 JumpIfEqual {86}
	032 Move X22, 0xF3B000
	033 Move X22, [X22+608]
	034 Move X19, [X19+48]
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move X20, [X8+824]
	043 Compare X20, 0
	044 JumpIfNotEqual {66}
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X22]
	050 Move X9, 0xF3B000
	051 Move X8, [X0+184]
	052 Move X9, [X9+2816]
	053 Move X21, [X8]
	054 Move X0, [X9]
	055 Call 0x1C17F10
	056 Move X8, 0xF3B000
	057 Move X8, [X8+2832]
	058 Move X1, X21
	059 Move X3, X31
	060 Move X20, X0
	061 Move X2, [X8]
	062 Call Converter`2<Object, Rect>..ctor, X0, X1, X2
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move [X8+824], X20
	066 Compare X19, 0
	067 JumpIfEqual {86}
	068 Move X8, 0xF3B000
	069 Move X8, [X8+2824]
	070 Move X0, X19
	071 Move X1, X20
	072 Move X2, [X8]
	073 Call List`1<Object>.ConvertAll, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, 0xF3B000
	077 Move X8, [X8+2000]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, [X8]
	083 Move X30, [X31+48]
	084 Call List`1<Rect>.ToArray, X0
	085 Return X0
	086 Call 0x1C17F20

Method: System.Collections.Generic.List`1<UnityEngine.Rect> op_Implicit(mixpanel.Value value)

Disassembly:
	0x031E6B10 LDR X0, [X0 + 0xF88]
	0x031E6B14 BL 0x1C16CF4
	0x031E6B18 ADRP X0, 0xF39000
	0x031E6B1C LDR X0, [X0 + 0xFD8]
	0x031E6B20 BL 0x1C16CF4
	0x031E6B24 ADRP X0, 0xF12000
	0x031E6B28 LDR X0, [X0 + 0x748]
	0x031E6B2C BL 0x1C16CF4
	0x031E6B30 ADRP X0, 0xF3A000
	0x031E6B34 LDR X0, [X0 + 0xB50]
	0x031E6B38 BL 0x1C16CF4
	0x031E6B3C ADRP X0, 0xF39000
	0x031E6B40 LDR X0, [X0 + 0xE8]
	0x031E6B44 BL 0x1C16CF4
	0x031E6B48 ADRP X0, 0xF3A000
	0x031E6B4C LDR X0, [X0 + 0xB58]
	0x031E6B50 BL 0x1C16CF4
	0x031E6B54 MOVZ W8, 0x1
	0x031E6B58 STRB W8, [X22 + 0x150]
	0x031E6B5C LDR X0, [X21]
	0x031E6B60 ADRP X22, 0xF39000
	0x031E6B64 LDR X22, [X22 + 0xF88]
	0x031E6B68 BL 0x1C16F10
	0x031E6B6C LDR X1, [X20]
	0x031E6B70 MOV X20, X0
	0x031E6B74 BL 0x2AA4804
	0x031E6B78 MOV X0, X19
	0x031E6B7C BL 0x31E659C
	0x031E6B80 CMP W0, 0x6
	0x031E6B84 B.EQ 0x31E6B78
	0x031E6B88 CBZ W0, 0x31E6BF8
	0x031E6B8C CMP W0, 0x2
	0x031E6B90 B.EQ 0x31E6C00
	0x031E6B94 MOV X0, X19
	0x031E6B98 BL 0x31E6834
	0x031E6B9C CBZ X0, 0x31E6BF8
	0x031E6BA0 MOV X21, X0
	0x031E6BA4 MOV X0, X19
	0x031E6BA8 BL 0x31E659C
	0x031E6BAC CMP W0, 0x5
	0x031E6BB0 B.NE 0x31E6BF8
	0x031E6BB4 CBZ X19, 0x31E6CD8
	0x031E6BB8 LDR X8, [X19]
	0x031E6BBC MOV X0, X19
	0x031E6BC0 LDP X9, X1, [X8 + 0x1C8]
	0x031E6BC4 BLR X9
	0x031E6BC8 MOV X0, X19
	0x031E6BCC BL 0x31E659C
	0x031E6BD0 MOV W1, W0
	0x031E6BD4 MOV X0, X19
	0x031E6BD8 BL 0x31E6754
	0x031E6BDC CBZ X20, 0x31E6CD8
	0x031E6BE0 LDR X3, [X22]
	0x031E6BE4 MOV X2, X0
	0x031E6BE8 MOV X0, X20
	0x031E6BEC MOV X1, X21
	0x031E6BF0 BL 0x2AA5084
	0x031E6BF4 B 0x31E6B78
	0x031E6BF8 MOV X0, X31
	0x031E6BFC B 0x31E6CC8
	0x031E6C00 CBZ X20, 0x31E6CD8
	0x031E6C04 ADRP X19, 0xF3A000
	0x031E6C08 ADRP X22, 0xF39000
	0x031E6C0C LDR X19, [X19 + 0xB50]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F7000
	007 Move W8, [X20+326]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF3B000
	014 Move X0, [X0+2816]
	015 Call 0x1C17CF4
	016 Move X0, 0xF3B000
	017 Move X0, [X0+2824]
	018 Call 0x1C17CF4
	019 Move X0, 0xF3B000
	020 Move X0, [X0+2840]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3B000
	023 Move X0, [X0+608]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+326], W8
	027 Compare X19, 0
	028 JumpIfEqual {77}
	029 Move X22, 0xF3B000
	030 Move X22, [X22+608]
	031 Move X19, [X19+48]
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X22]
	038 Move X8, [X0+184]
	039 Move X20, [X8+832]
	040 Compare X20, 0
	041 JumpIfNotEqual {63}
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X22]
	047 Move X9, 0xF3B000
	048 Move X8, [X0+184]
	049 Move X9, [X9+2816]
	050 Move X21, [X8]
	051 Move X0, [X9]
	052 Call 0x1C17F10
	053 Move X8, 0xF3B000
	054 Move X8, [X8+2840]
	055 Move X1, X21
	056 Move X3, X31
	057 Move X20, X0
	058 Move X2, [X8]
	059 Call Converter`2<Object, Rect>..ctor, X0, X1, X2
	060 Move X8, [X22]
	061 Move X8, [X8+184]
	062 Move [X8+832], X20
	063 Compare X19, 0
	064 JumpIfEqual {77}
	065 Move X8, 0xF3B000
	066 Move X8, [X8+2824]
	067 Move X0, X19
	068 Move X1, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X2, [X8]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call List`1<Object>.ConvertAll, X0, X1
	076 Return X0
	077 Call 0x1C17F20

Method: System.Void Write(System.IO.StringWriter writer, System.Boolean includeTypeInfo = False)

Disassembly:
	0x031DB4BC STR D10, [X31 - 0x40]!
	0x031DB4C0 STP D9, D8, [X31 + 0x10]
	0x031DB4C4 STP X30, X21, [X31 + 0x20]
	0x031DB4C8 STP X20, X19, [X31 + 0x30]
	0x031DB4CC ADRP X20, 0x1201000
	0x031DB4D0 ADRP X21, 0xF45000
	0x031DB4D4 LDRB W8, [X20 + 0x9F]
	0x031DB4D8 LDR X21, [X21 + 0x3A8]
	0x031DB4DC MOV X19, X0
	0x031DB4E0 TBNZ X8, 0x0, 0x31DB51C
	0x031DB4E4 ADRP X0, 0xF45000
	0x031DB4E8 LDR X0, [X0 + 0x3B0]
	0x031DB4EC BL 0x1C16CF4
	0x031DB4F0 ADRP X0, 0xF45000
	0x031DB4F4 LDR X0, [X0 + 0x3B8]
	0x031DB4F8 BL 0x1C16CF4
	0x031DB4FC ADRP X0, 0xF45000
	0x031DB500 LDR X0, [X0 + 0x3C0]
	0x031DB504 BL 0x1C16CF4
	0x031DB508 ADRP X0, 0xF45000
	0x031DB50C LDR X0, [X0 + 0x3A8]
	0x031DB510 BL 0x1C16CF4
	0x031DB514 MOVZ W8, 0x1
	0x031DB518 STRB W8, [X20 + 0x9F]
	0x031DB51C LDR X1, [X21]
	0x031DB520 MOV X0, X19
	0x031DB524 BL 0x31D3650
	0x031DB528 CBZ X0, 0x31DB5B4
	0x031DB52C ADRP X8, 0xF45000
	0x031DB530 LDR X8, [X8 + 0x3B8]
	0x031DB534 LDR V8, [X0 + 0x28]
	0x031DB538 MOV X0, X19
	0x031DB53C LDR X1, [X8]
	0x031DB540 BL 0x31D3650
	0x031DB544 CBZ X0, 0x31DB5B4
	0x031DB548 ADRP X8, 0xF45000
	0x031DB54C LDR X8, [X8 + 0x3C0]
	0x031DB550 LDR V9, [X0 + 0x28]
	0x031DB554 MOV X0, X19
	0x031DB558 LDR X1, [X8]
	0x031DB55C BL 0x31D3650
	0x031DB560 CBZ X0, 0x31DB5B4
	0x031DB564 ADRP X8, 0xF45000
	0x031DB568 LDR X8, [X8 + 0x3B0]
	0x031DB56C LDR V10, [X0 + 0x28]
	0x031DB570 MOV X0, X19
	0x031DB574 LDR X1, [X8]
	0x031DB578 BL 0x31D3650
	0x031DB57C CBZ X0, 0x31DB5B4
	0x031DB580 LDR V3, [X0 + 0x28]
	0x00000000 INVALID
	0x00000000 INVALID
	0x00000000 INVALID
	0x00000000 INVALID
	0x031DB594 MOV X0, X31
	0x031DB598 BL 0x1E43664
	0x031DB59C LDP X20, X19, [X31 + 0x30]
	0x031DB5A0 LDP X30, X21, [X31 + 0x20]
	0x031DB5A4 LDP D9, D8, [X31 + 0x10]
	0x031DB5A8 AND X0, X0, 0x0
	0x031DB5AC LDR V10, [X31], #0x40
	0x031DB5B0 RET
	0x031DB5B4 BL 0x1C16F20
	0x031DB5B8 STP X30, X27, [X31 - 0x50]!
	0x031DB5BC STP X26, X25, [X31 + 0x10]
	0x031DB5C0 STP X24, X23, [X31 + 0x20]
	0x031DB5C4 STP X22, X21, [X31 + 0x30]
	0x031DB5C8 STP X20, X19, [X31 + 0x40]
	0x031DB5CC ADRP X23, 0x1201000
	0x031DB5D0 ADRP X22, 0xF44000
	0x031DB5D4 ADRP X21, 0xF45000
	0x031DB5D8 LDRB W8, [X23 + 0xA0]
	0x031DB5DC LDR X22, [X22 + 0xFD8]
	0x031DB5E0 LDR X21, [X21 + 0x3C8]
	0x031DB5E4 MOV X20, X1
	0x031DB5E8 MOV X19, X0
	0x031DB5EC TBNZ X8, 0x0, 0x31DB64C
	0x031DB5F0 ADRP X0, 0xF44000
	0x031DB5F4 LDR X0, [X0 + 0xFE8]
	0x031DB5F8 BL 0x1C16CF4
	0x031DB5FC ADRP X0, 0xF45000
	0x031DB600 LDR X0, [X0 + 0x3C8]
	0x031DB604 BL 0x1C16CF4
	0x031DB608 ADRP X0, 0xF44000
	0x031DB60C LDR X0, [X0 + 0xFD8]
	0x031DB610 BL 0x1C16CF4
	0x031DB614 ADRP X0, 0xF45000
	0x031DB618 LDR X0, [X0 + 0x3B0]
	0x031DB61C BL 0x1C16CF4
	0x031DB620 ADRP X0, 0xF45000
	0x031DB624 LDR X0, [X0 + 0x3B8]
	0x031DB628 BL 0x1C16CF4
	0x031DB62C ADRP X0, 0xF45000
	0x031DB630 LDR X0, [X0 + 0x3C0]
	0x031DB634 BL 0x1C16CF4
	0x031DB638 ADRP X0, 0xF45000
	0x031DB63C LDR X0, [X0 + 0x3A8]
	0x031DB640 BL 0x1C16CF4
	0x031DB644 MOVZ W8, 0x1
	0x031DB648 STRB W8, [X23 + 0xA0]
	0x031DB64C ADRP X8, 0xFFFFFFFFFD912000
	0x031DB650 LDR V0, [X8 + 0x6F8]
	0x031DB654 STR D0, [X19 + 0x10]
	0x031DB658 LDR X0, [X22]
	0x031DB65C BL 0x1C16F10
	0x031DB660 LDR X1, [X21]
	0x031DB664 MOV X21, X0
	0x031DB668 BL 0x2AA4804
	0x031DB66C MOV W0, W20
	0x031DB670 BL 0x31DB734
	0x031DB674 CBZ X21, 0x31DB730
	0x031DB678 ADRP X8, 0xF45000
	0x031DB67C ADRP X24, 0xF44000
	0x031DB680 LDR X8, [X8 + 0x3A8]
	0x031DB684 LDR X24, [X24 + 0xFE8]
	0x031DB688 ADRP X25, 0xF45000
	0x031DB68C ADRP X26, 0xF45000
	0x031DB690 ADRP X27, 0xF45000
	0x031DB694 LDR X25, [X25 + 0x3B8]
	0x031DB698 LDR X26, [X26 + 0x3C0]
	0x031DB69C LDR X27, [X27 + 0x3B0]
	0x031DB6A0 LDR X1, [X8]
	0x031DB6A4 LDR X3, [X24]
	0x031DB6A8 MOV X2, X0
	0x031DB6AC MOV X0, X21
	0x031DB6B0 UBFM X22, X20, 0x8, 0x3F
	0x031DB6B4 UBFM X23, X20, 0x10, 0x3F
	0x031DB6B8 UBFM X20, X20, 0x18, 0x3F
	0x031DB6BC BL 0x2AA5098
	0x031DB6C0 MOV W0, W22
	0x031DB6C4 BL 0x31DB734
	0x031DB6C8 LDR X1, [X25]
	0x031DB6CC LDR X3, [X24]
	0x031DB6D0 MOV X2, X0
	0x031DB6D4 MOV X0, X21
	0x031DB6D8 BL 0x2AA5098
	0x031DB6DC MOV W0, W23
	0x031DB6E0 BL 0x31DB734
	0x031DB6E4 LDR X1, [X26]
	0x031DB6E8 LDR X3, [X24]
	0x031DB6EC MOV X2, X0
	0x031DB6F0 MOV X0, X21
	0x031DB6F4 BL 0x2AA5098
	0x031DB6F8 MOV W0, W20
	0x031DB6FC BL 0x31DB734
	0x031DB700 LDR X1, [X27]
	0x031DB704 LDR X3, [X24]
	0x031DB708 MOV X2, X0
	0x031DB70C MOV X0, X21
	0x031DB710 BL 0x2AA5098
	0x031DB714 STR X21, [X19 + 0x40]
	0x031DB718 LDP X20, X19, [X31 + 0x40]
	0x031DB71C LDP X22, X21, [X31 + 0x30]
	0x031DB720 LDP X24, X23, [X31 + 0x20]
	0x031DB724 LDP X26, X25, [X31 + 0x10]
	0x031DB728 LDP X30, X27, [X31], #0x50
	0x031DB72C RET
	0x031DB730 BL 0x1C16F20
	0x031DB734 STP X30, X21, [X31 - 0x20]!
	0x031DB738 STP X20, X19, [X31 + 0x10]
	0x031DB73C ADRP X20, 0x1201000
	0x031DB740 ADRP X21, 0xF1D000
	0x031DB744 LDRB W8, [X20 + 0xE8]
	0x031DB748 LDR X21, [X21 + 0x748]
	0x031DB74C MOV W19, W0
	0x031DB750 TBNZ X8, 0x0, 0x31DB768
	0x031DB754 ADRP X0, 0xF1D000
	0x031DB758 LDR X0, [X0 + 0x748]
	0x031DB75C BL 0x1C16CF4
	0x031DB760 MOVZ W8, 0x1
	0x031DB764 STRB W8, [X20 + 0xE8]
	0x031DB768 LDR X0, [X21]
	0x031DB76C BL 0x1C16F10
	0x031DB770 AND W8, W19, 0xFF
	0x031DB774 UCVTF D0, W8
	0x031DB778 MOV X20, X0
	0x031DB77C BL 0x31DC7B4
	0x031DB780 MOV X0, X20
	0x031DB784 LDP X20, X19, [X31 + 0x10]
	0x031DB788 LDP X30, X21, [X31], #0x20
	0x031DB78C RET
	0x031DB790 STR D8, [X31 - 0x30]!
	0x031DB794 STP X30, X21, [X31 + 0x10]
	0x031DB798 STP X20, X19, [X31 + 0x20]
	0x031DB79C ADRP X20, 0x1201000
	0x031DB7A0 ADRP X21, 0xF40000
	0x031DB7A4 LDRB W8, [X20 + 0xA1]
	0x031DB7A8 LDR X21, [X21 + 0x780]
	0x031DB7AC MOV X19, X0
	0x031DB7B0 TBNZ X8, 0x0, 0x31DB7D4
	0x031DB7B4 ADRP X0, 0xF40000
	0x031DB7B8 LDR X0, [X0 + 0x780]
	0x031DB7BC BL 0x1C16CF4
	0x031DB7C0 ADRP X0, 0xF40000
	0x031DB7C4 LDR X0, [X0 + 0x788]
	0x031DB7C8 BL 0x1C16CF4
	0x031DB7CC MOVZ W8, 0x1
	0x031DB7D0 STRB W8, [X20 + 0xA1]
	0x031DB7D4 LDR X1, [X21]
	0x031DB7D8 MOV X0, X19
	0x031DB7DC BL 0x31D3650
	0x031DB7E0 CBZ X0, 0x31DB81C
	0x031DB7E4 ADRP X8, 0xF40000
	0x031DB7E8 LDR X8, [X8 + 0x788]
	0x031DB7EC LDR V8, [X0 + 0x28]
	0x031DB7F0 MOV X0, X19
	0x031DB7F4 LDR X1, [X8]
	0x031DB7F8 BL 0x31D3650
	0x031DB7FC CBZ X0, 0x31DB81C
	0x031DB800 LDR V1, [X0 + 0x28]
	0x031DB804 LDP X20, X19, [X31 + 0x20]
	0x031DB808 LDP X30, X21, [X31 + 0x10]
	0x00000000 INVALID
	0x00000000 INVALID
	0x031DB814 LDR V8, [X31], #0x30
	0x031DB818 RET
	0x031DB81C BL 0x1C16F20
	0x031DB820 STP D9, D8, [X31 - 0x40]!
	0x031DB824 STR X30, [X31 + 0x10]
	0x031DB828 STP X22, X21, [X31 + 0x20]
	0x031DB82C STP X20, X19, [X31 + 0x30]
	0x031DB830 ADRP X22, 0x1201000
	0x031DB834 ADRP X21, 0xF44000
	0x031DB838 ADRP X20, 0xF45000
	0x031DB83C LDRB W8, [X22 + 0xA2]
	0x031DB840 LDR X21, [X21 + 0xFD8]
	0x031DB844 LDR X20, [X20 + 0x3C8]
	0x031DB848 MOV V8.16B, V1.16B
	0x031DB84C MOV V9.16B, V0.16B
	0x031DB850 MOV X19, X0
	0x031DB854 TBNZ X8, 0x0, 0x31DB89C
	0x031DB858 ADRP X0, 0xF44000
	0x031DB85C LDR X0, [X0 + 0xFE8]
	0x031DB860 BL 0x1C16CF4
	0x031DB864 ADRP X0, 0xF45000
	0x031DB868 LDR X0, [X0 + 0x3C8]
	0x031DB86C BL 0x1C16CF4
	0x031DB870 ADRP X0, 0xF44000
	0x031DB874 LDR X0, [X0 + 0xFD8]
	0x031DB878 BL 0x1C16CF4
	0x031DB87C ADRP X0, 0xF40000
	0x031DB880 LDR X0, [X0 + 0x780]
	0x031DB884 BL 0x1C16CF4
	0x031DB888 ADRP X0, 0xF40000
	0x031DB88C LDR X0, [X0 + 0x788]
	0x031DB890 BL 0x1C16CF4
	0x031DB894 MOVZ W8, 0x1
	0x031DB898 STRB W8, [X22 + 0xA2]
	0x031DB89C ADRP X8, 0xFFFFFFFFFD912000
	0x031DB8A0 LDR V0, [X8 + 0x990]
	0x031DB8A4 STR D0, [X19 + 0x10]
	0x031DB8A8 LDR X0, [X21]
	0x031DB8AC BL 0x1C16F10
	0x031DB8B0 LDR X1, [X20]
	0x031DB8B4 MOV X20, X0
	0x031DB8B8 BL 0x2AA4804
	0x031DB8BC MOV V0.16B, V9.16B
	0x031DB8C0 BL 0x31D4014
	0x031DB8C4 CBZ X20, 0x31DB928
	0x031DB8C8 ADRP X8, 0xF40000
	0x031DB8CC ADRP X21, 0xF44000
	0x031DB8D0 LDR X8, [X8 + 0x780]
	0x031DB8D4 LDR X21, [X21 + 0xFE8]
	0x031DB8D8 ADRP X22, 0xF40000
	0x031DB8DC MOV X2, X0
	0x031DB8E0 LDR X1, [X8]
	0x031DB8E4 LDR X3, [X21]
	0x031DB8E8 LDR X22, [X22 + 0x788]
	0x031DB8EC MOV X0, X20
	0x031DB8F0 BL 0x2AA5098
	0x031DB8F4 MOV V0.16B, V8.16B
	0x031DB8F8 BL 0x31D4014
	0x031DB8FC LDR X1, [X22]
	0x031DB900 LDR X3, [X21]
	0x031DB904 MOV X2, X0
	0x031DB908 MOV X0, X20
	0x031DB90C BL 0x2AA5098
	0x031DB910 STR X20, [X19 + 0x40]
	0x031DB914 LDP X20, X19, [X31 + 0x30]
	0x031DB918 LDP X22, X21, [X31 + 0x20]
	0x031DB91C LDR X30, [X31 + 0x10]
	0x031DB920 LDP D9, D8, [X31], #0x40
	0x031DB924 RET
	0x031DB928 BL 0x1C16F20
	0x031DB92C STP D9, D8, [X31 - 0x30]!
	0x031DB930 STP X30, X21, [X31 + 0x10]
	0x031DB934 STP X20, X19, [X31 + 0x20]
	0x031DB938 ADRP X20, 0x1201000
	0x031DB93C ADRP X21, 0xF40000
	0x031DB940 LDRB W8, [X20 + 0xA3]
	0x031DB944 LDR X21, [X21 + 0x780]
	0x031DB948 MOV X19, X0
	0x031DB94C TBNZ X8, 0x0, 0x31DB97C
	0x031DB950 ADRP X0, 0xF40000
	0x031DB954 LDR X0, [X0 + 0x780]
	0x031DB958 BL 0x1C16CF4
	0x031DB95C ADRP X0, 0xF40000
	0x031DB960 LDR X0, [X0 + 0x788]
	0x031DB964 BL 0x1C16CF4
	0x031DB968 ADRP X0, 0xF45000
	0x031DB96C LDR X0, [X0 + 0x3D0]
	0x031DB970 BL 0x1C16CF4
	0x031DB974 MOVZ W8, 0x1
	0x031DB978 STRB W8, [X20 + 0xA3]
	0x031DB97C LDR X1, [X21]
	0x031DB980 MOV X0, X19
	0x031DB984 BL 0x31D3650
	0x031DB988 CBZ X0, 0x31DB9E4
	0x031DB98C ADRP X8, 0xF40000
	0x031DB990 LDR X8, [X8 + 0x788]
	0x031DB994 LDR V8, [X0 + 0x28]
	0x031DB998 MOV X0, X19
	0x031DB99C LDR X1, [X8]
	0x031DB9A0 BL 0x31D3650
	0x031DB9A4 CBZ X0, 0x31DB9E4
	0x031DB9A8 ADRP X8, 0xF45000
	0x031DB9AC LDR X8, [X8 + 0x3D0]
	0x031DB9B0 LDR V9, [X0 + 0x28]
	0x031DB9B4 MOV X0, X19
	0x031DB9B8 LDR X1, [X8]
	0x031DB9BC BL 0x31D3650
	0x031DB9C0 CBZ X0, 0x31DB9E4
	0x031DB9C4 LDR V2, [X0 + 0x28]
	0x031DB9C8 LDP X20, X19, [X31 + 0x20]
	0x031DB9CC LDP X30, X21, [X31 + 0x10]
	0x00000000 INVALID
	0x00000000 INVALID
	0x00000000 INVALID
	0x031DB9DC LDP D9, D8, [X31], #0x30
	0x031DB9E0 RET
	0x031DB9E4 BL 0x1C16F20
	0x031DB9E8 STR D10, [X31 - 0x50]!
	0x031DB9EC STP D9, D8, [X31 + 0x10]
	0x031DB9F0 STP X30, X23, [X31 + 0x20]
	0x031DB9F4 STP X22, X21, [X31 + 0x30]
	0x031DB9F8 STP X20, X19, [X31 + 0x40]
	0x031DB9FC ADRP X22, 0x1201000
	0x031DBA00 ADRP X21, 0xF44000
	0x031DBA04 ADRP X20, 0xF45000
	0x031DBA08 LDRB W8, [X22 + 0xA4]
	0x031DBA0C LDR X21, [X21 + 0xFD8]
	0x031DBA10 LDR X20, [X20 + 0x3C8]
	0x031DBA14 MOV V8.16B, V2.16B
	0x031DBA18 MOV V9.16B, V1.16B
	0x031DBA1C MOV V10.16B, V0.16B
	0x031DBA20 MOV X19, X0
	0x031DBA24 TBNZ X8, 0x0, 0x31DBA78
	0x031DBA28 ADRP X0, 0xF44000
	0x031DBA2C LDR X0, [X0 + 0xFE8]
	0x031DBA30 BL 0x1C16CF4
	0x031DBA34 ADRP X0, 0xF45000
	0x031DBA38 LDR X0, [X0 + 0x3C8]
	0x031DBA3C BL 0x1C16CF4
	0x031DBA40 ADRP X0, 0xF44000
	0x031DBA44 LDR X0, [X0 + 0xFD8]
	0x031DBA48 BL 0x1C16CF4
	0x031DBA4C ADRP X0, 0xF40000
	0x031DBA50 LDR X0, [X0 + 0x780]
	0x031DBA54 BL 0x1C16CF4
	0x031DBA58 ADRP X0, 0xF40000
	0x031DBA5C LDR X0, [X0 + 0x788]
	0x031DBA60 BL 0x1C16CF4
	0x031DBA64 ADRP X0, 0xF45000
	0x031DBA68 LDR X0, [X0 + 0x3D0]
	0x031DBA6C BL 0x1C16CF4
	0x031DBA70 MOVZ W8, 0x1
	0x031DBA74 STRB W8, [X22 + 0xA4]
	0x031DBA78 ADRP X8, 0xFFFFFFFFFD912000
	0x031DBA7C LDR V0, [X8 + 0x990]
	0x031DBA80 STR D0, [X19 + 0x10]
	0x031DBA84 LDR X0, [X21]
	0x031DBA88 BL 0x1C16F10
	0x031DBA8C LDR X1, [X20]
	0x031DBA90 MOV X20, X0
	0x031DBA94 BL 0x2AA4804
	0x031DBA98 MOV V0.16B, V10.16B
	0x031DBA9C BL 0x31D4014
	0x031DBAA0 CBZ X20, 0x31DBB2C
	0x031DBAA4 ADRP X8, 0xF40000
	0x031DBAA8 ADRP X21, 0xF44000
	0x031DBAAC LDR X8, [X8 + 0x780]
	0x031DBAB0 LDR X21, [X21 + 0xFE8]
	0x031DBAB4 ADRP X22, 0xF40000
	0x031DBAB8 ADRP X23, 0xF45000
	0x031DBABC LDR X1, [X8]
	0x031DBAC0 LDR X3, [X21]
	0x031DBAC4 LDR X22, [X22 + 0x788]
	0x031DBAC8 LDR X23, [X23 + 0x3D0]
	0x031DBACC MOV X2, X0
	0x031DBAD0 MOV X0, X20
	0x031DBAD4 BL 0x2AA5098
	0x031DBAD8 MOV V0.16B, V9.16B
	0x031DBADC BL 0x31D4014
	0x031DBAE0 LDR X1, [X22]
	0x031DBAE4 LDR X3, [X21]
	0x031DBAE8 MOV X2, X0
	0x031DBAEC MOV X0, X20
	0x031DBAF0 BL 0x2AA5098
	0x031DBAF4 MOV V0.16B, V8.16B
	0x031DBAF8 BL 0x31D4014
	0x031DBAFC LDR X1, [X23]
	0x031DBB00 LDR X3, [X21]
	0x031DBB04 MOV X2, X0
	0x031DBB08 MOV X0, X20
	0x031DBB0C BL 0x2AA5098
	0x031DBB10 STR X20, [X19 + 0x40]
	0x031DBB14 LDP X20, X19, [X31 + 0x40]
	0x031DBB18 LDP X22, X21, [X31 + 0x30]
	0x031DBB1C LDP X30, X23, [X31 + 0x20]
	0x031DBB20 LDP D9, D8, [X31 + 0x10]
	0x031DBB24 LDR V10, [X31], #0x50
	0x031DBB28 RET
	0x031DBB2C BL 0x1C16F20
	0x031DBB30 STR D10, [X31 - 0x40]!
	0x031DBB34 STP D9, D8, [X31 + 0x10]
	0x031DBB38 STP X30, X21, [X31 + 0x20]
	0x031DBB3C STP X20, X19, [X31 + 0x30]
	0x031DBB40 ADRP X20, 0x1201000
	0x031DBB44 ADRP X21, 0xF40000
	0x031DBB48 LDRB W8, [X20 + 0xA5]
	0x031DBB4C LDR X21, [X21 + 0x780]
	0x031DBB50 MOV X19, X0
	0x031DBB54 TBNZ X8, 0x0, 0x31DBB90
	0x031DBB58 ADRP X0, 0xF40000
	0x031DBB5C LDR X0, [X0 + 0x780]
	0x031DBB60 BL 0x1C16CF4
	0x031DBB64 ADRP X0, 0xF40000
	0x031DBB68 LDR X0, [X0 + 0x788]
	0x031DBB6C BL 0x1C16CF4
	0x031DBB70 ADRP X0, 0xF45000
	0x031DBB74 LDR X0, [X0 + 0x3D0]
	0x031DBB78 BL 0x1C16CF4
	0x031DBB7C ADRP X0, 0xF45000
	0x031DBB80 LDR X0, [X0 + 0x3D8]
	0x031DBB84 BL 0x1C16CF4
	0x031DBB88 MOVZ W8, 0x1
	0x031DBB8C STRB W8, [X20 + 0xA5]
	0x031DBB90 LDR X1, [X21]
	0x031DBB94 MOV X0, X19
	0x031DBB98 BL 0x31D3650
	0x031DBB9C CBZ X0, 0x31DBC1C
	0x031DBBA0 ADRP X8, 0xF40000
	0x031DBBA4 LDR X8, [X8 + 0x788]
	0x031DBBA8 LDR V8, [X0 + 0x28]
	0x031DBBAC MOV X0, X19
	0x031DBBB0 LDR X1, [X8]
	0x031DBBB4 BL 0x31D3650
	0x031DBBB8 CBZ X0, 0x31DBC1C
	0x031DBBBC ADRP X8, 0xF45000
	0x031DBBC0 LDR X8, [X8 + 0x3D0]
	0x031DBBC4 LDR V9, [X0 + 0x28]
	0x031DBBC8 MOV X0, X19
	0x031DBBCC LDR X1, [X8]
	0x031DBBD0 BL 0x31D3650
	0x031DBBD4 CBZ X0, 0x31DBC1C
	0x031DBBD8 ADRP X8, 0xF45000
	0x031DBBDC LDR X8, [X8 + 0x3D8]
	0x031DBBE0 LDR V10, [X0 + 0x28]
	0x031DBBE4 MOV X0, X19
	0x031DBBE8 LDR X1, [X8]
	0x031DBBEC BL 0x31D3650
	0x031DBBF0 CBZ X0, 0x31DBC1C
	0x031DBBF4 LDR V3, [X0 + 0x28]
	0x00000000 INVALID
	0x00000000 INVALID
	0x031DBC00 LDP X20, X19, [X31 + 0x30]
	0x031DBC04 LDP X30, X21, [X31 + 0x20]
	0x031DBC08 LDP D9, D8, [X31 + 0x10]
	0x00000000 INVALID
	0x00000000 INVALID
	0x031DBC14 LDR V10, [X31], #0x40
	0x031DBC18 RET
	0x031DBC1C BL 0x1C16F20
	0x031DBC20 STP D11, D10, [X31 - 0x60]!
	0x031DBC24 STP D9, D8, [X31 + 0x10]
	0x031DBC28 STR X30, [X31 + 0x20]
	0x031DBC2C STP X24, X23, [X31 + 0x30]
	0x031DBC30 STP X22, X21, [X31 + 0x40]
	0x031DBC34 STP X20, X19, [X31 + 0x50]
	0x031DBC38 ADRP X22, 0x1201000
	0x031DBC3C ADRP X21, 0xF44000
	0x031DBC40 ADRP X20, 0xF45000
	0x031DBC44 LDRB W8, [X22 + 0xA6]
	0x031DBC48 LDR X21, [X21 + 0xFD8]
	0x031DBC4C LDR X20, [X20 + 0x3C8]
	0x031DBC50 MOV V8.16B, V3.16B
	0x031DBC54 MOV V9.16B, V2.16B
	0x031DBC58 MOV V10.16B, V1.16B
	0x031DBC5C MOV V11.16B, V0.16B
	0x031DBC60 MOV X19, X0
	0x031DBC64 TBNZ X8, 0x0, 0x31DBCC4
	0x031DBC68 ADRP X0, 0xF44000
	0x031DBC6C LDR X0, [X0 + 0xFE8]
	0x031DBC70 BL 0x1C16CF4
	0x031DBC74 ADRP X0, 0xF45000
	0x031DBC78 LDR X0, [X0 + 0x3C8]
	0x031DBC7C BL 0x1C16CF4
	0x031DBC80 ADRP X0, 0xF44000
	0x031DBC84 LDR X0, [X0 + 0xFD8]
	0x031DBC88 BL 0x1C16CF4
	0x031DBC8C ADRP X0, 0xF40000
	0x031DBC90 LDR X0, [X0 + 0x780]
	0x031DBC94 BL 0x1C16CF4
	0x031DBC98 ADRP X0, 0xF40000
	0x031DBC9C LDR X0, [X0 + 0x788]
	0x031DBCA0 BL 0x1C16CF4
	0x031DBCA4 ADRP X0, 0xF45000
	0x031DBCA8 LDR X0, [X0 + 0x3D0]
	0x031DBCAC BL 0x1C16CF4
	0x031DBCB0 ADRP X0, 0xF45000
	0x031DBCB4 LDR X0, [X0 + 0x3D8]
	0x031DBCB8 BL 0x1C16CF4
	0x031DBCBC MOVZ W8, 0x1
	0x031DBCC0 STRB W8, [X22 + 0xA6]
	0x031DBCC4 ADRP X8, 0xFFFFFFFFFD912000

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+112], X30
	003 Move [X31+128], X28
	004 Move [X31+136], X27
	005 Move [X31+144], X26
	006 Move [X31+152], X25
	007 Move [X31+160], X24
	008 Move [X31+168], X23
	009 Move [X31+176], X22
	010 Move [X31+184], X21
	011 Move [X31+192], X20
	012 Move [X31+200], X19
	013 Move X22, 0x1202000
	014 Move W8, [X22+327]
	015 Move W20, W2
	016 Move X19, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {105}
	022 Move X0, 0xF1B000
	023 Move X0, [X0+3144]
	024 Call 0x1C17CF4
	025 Move X0, 0xF46000
	026 Move X0, [X0+800]
	027 Call 0x1C17CF4
	028 Move X0, 0xF45000
	029 Move X0, [X0+4000]
	030 Call 0x1C17CF4
	031 Move X0, 0xF46000
	032 Move X0, [X0+344]
	033 Call 0x1C17CF4
	034 Move X0, 0xF46000
	035 Move X0, [X0+808]
	036 Call 0x1C17CF4
	037 Move X0, 0xF46000
	038 Move X0, [X0+816]
	039 Call 0x1C17CF4
	040 Move X0, 0xF46000
	041 Move X0, [X0+824]
	042 Call 0x1C17CF4
	043 Move X0, 0xF46000
	044 Move X0, [X0+832]
	045 Call 0x1C17CF4
	046 Move X0, 0xF46000
	047 Move X0, [X0+840]
	048 Call 0x1C17CF4
	049 Move X0, 0xF46000
	050 Move X0, [X0+848]
	051 Call 0x1C17CF4
	052 Move X0, 0xF45000
	053 Move X0, [X0+3816]
	054 Call 0x1C17CF4
	055 Move X0, 0xF45000
	056 Move X0, [X0+3824]
	057 Call 0x1C17CF4
	058 Move X0, 0xF45000
	059 Move X0, [X0+4024]
	060 Call 0x1C17CF4
	061 Move X0, 0xF46000
	062 Move X0, [X0+352]
	063 Call 0x1C17CF4
	064 Move X0, 0xF46000
	065 Move X0, [X0+856]
	066 Call 0x1C17CF4
	067 Move X0, 0xF46000
	068 Move X0, [X0+864]
	069 Call 0x1C17CF4
	070 Move X0, 0xF46000
	071 Move X0, [X0+872]
	072 Call 0x1C17CF4
	073 Move X0, 0xF24000
	074 Move X0, [X0+1752]
	075 Call 0x1C17CF4
	076 Move X0, 0xF19000
	077 Move X0, [X0+2096]
	078 Call 0x1C17CF4
	079 Move X0, 0xF19000
	080 Move X0, [X0+2104]
	081 Call 0x1C17CF4
	082 Move X0, 0xF23000
	083 Move X0, [X0+4088]
	084 Call 0x1C17CF4
	085 Move X0, 0xF24000
	086 Move X0, [X0]
	087 Call 0x1C17CF4
	088 Move X0, 0xF46000
	089 Move X0, [X0+880]
	090 Call 0x1C17CF4
	091 Move X0, 0xF24000
	092 Move X0, [X0+3288]
	093 Call 0x1C17CF4
	094 Move X0, 0xF46000
	095 Move X0, [X0+888]
	096 Call 0x1C17CF4
	097 Move X0, 0xF19000
	098 Move X0, [X0+3784]
	099 Call 0x1C17CF4
	100 Move X0, 0xF19000
	101 Move X0, [X0+2120]
	102 Call 0x1C17CF4
	103 Move W8, 1
	104 Move [X22+327], W8
	105 NotImplemented "Instruction MOVI not yet implemented."
	106 Move [X31+88], X31
	107 Move [X31+96], X31
	108 Move [X31+104], X31
	109 Move [X31+80], X31
	110 Move [X31+48], V0
	111 Move [X31+56], V0
	112 Move TEMP, X20
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfNotEqual {155}
	116 Compare X19, 0
	117 JumpIfEqual {478}
	118 Move X9, 0xF46000
	119 Move X8, [X19]
	120 Move X9, [X9+864]
	121 Move X0, X19
	122 Move X2, [X8+592]
	123 Move X1, [X9]
	124 Move X9, [X8+584]
	125 NotImplemented "Instruction BLR not yet implemented."
	126 Move X9, 0xF46000
	127 Move W8, [X21+16]
	128 Move X9, [X9+856]
	129 Add X1, X31, 8
	130 Move [X31+8], W8
	131 Move X0, [X9]
	132 Call 0x1C17E04
	133 Move X9, 0xF46000
	134 Move W8, [X21+20]
	135 Move X9, [X9+800]
	136 Move X22, X0
	137 Add X1, X31, 124
	138 Move [X31+124], W8
	139 Move X0, [X9]
	140 Call 0x1C17E04
	141 Move X8, 0xF46000
	142 Move X8, [X8+872]
	143 Move X2, X0
	144 Move X1, X22
	145 Move X3, X31
	146 Move X8, [X8]
	147 Move X0, X8
	148 Call String.Format, X0, X1, X2
	149 Move X8, [X19]
	150 Move X1, X0
	151 Move X0, X19
	152 Move X9, [X8+584]
	153 Move X2, [X8+592]
	154 NotImplemented "Instruction BLR not yet implemented."
	155 Move W8, [X21+16]
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move X9, -40124416
	158 Add X9, X9, 985
	159 NotImplemented "Instruction ADR not yet implemented."
	160 Move W11, [X9]
	161 Add X10, X10, X11
	162 CallNoReturn X10
	163 Compare X19, 0
	164 JumpIfEqual {478}
	165 Move X9, 0xF19000
	166 Move X8, [X19]
	167 Move X9, [X9+2096]
	168 Compare X19, 0
	169 JumpIfEqual {478}
	170 Move W8, [X21+32]
	171 Move X10, 0xF23000
	172 Move X11, 0xF24000
	173 Move X9, [X19]
	174 Move X10, [X10+4088]
	175 Move X11, [X11]
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move X8, [X9+584]
	178 Move X2, [X9+592]
	179 NotImplemented "Instruction CSEL not yet implemented."
	180 Move X1, [X10]
	181 Move X0, X19
	182 NotImplemented "Instruction BLR not yet implemented."
	183 Move TEMP, X20
	184 And TEMP, TEMP, 1
	185 Compare TEMP, 1
	186 JumpIfEqual {457}
	187 Compare X19, 0
	188 JumpIfEqual {478}
	189 Move X22, 0xF24000
	190 Move X8, [X19]
	191 Move X22, [X22+3288]
	192 Move X0, X19
	193 Move X9, [X8+584]
	194 Move X1, [X22]
	195 Move X2, [X8+592]
	196 NotImplemented "Instruction BLR not yet implemented."
	197 Move X0, [X21+24]
	198 Call Value.SanitizeStringForJson, X0
	199 Move X8, [X19]
	200 Move X1, X0
	201 Move X0, X19
	202 Move X9, [X8+584]
	203 Move X2, [X8+592]
	204 NotImplemented "Instruction BLR not yet implemented."
	205 Move X8, [X19]
	206 Move X1, [X22]
	207 Compare X19, 0
	208 JumpIfEqual {478}
	209 Move X9, 0xF19000
	210 Move X8, [X19]
	211 Move X9, [X9+3784]
	212 Move X0, X19
	213 Move X2, [X8+592]
	214 Move X1, [X9]
	215 Move X9, [X8+584]
	216 NotImplemented "Instruction BLR not yet implemented."
	217 Move X0, [X21+48]
	218 Compare X0, 0
	219 JumpIfEqual {478}
	220 Move X9, 0xF45000
	221 Move W8, [X0+24]
	222 Move X9, [X9+4024]
	223 Subtract W21, W8, 1
	224 Move X1, [X9]
	225 Add X8, X31, 88
	226 Call List`1<Object>.GetEnumerator, X0
	227 Move X23, 0xF46000
	228 Move X24, 0xF19000
	229 Move X23, [X23+824]
	230 Move X24, [X24+2104]
	231 Move W22, W31
	232 Move X1, [X23]
	233 Add X0, X31, 88
	234 Call Enumerator<Object>.MoveNext, X0
	235 Move TEMP, X0
	236 And TEMP, TEMP, 1
	237 Compare TEMP, 1
	238 JumpIfNotEqual {348}
	239 Move X0, [X31+104]
	240 Compare X0, 0
	241 JumpIfEqual {356}
	242 And W2, W20, 1
	243 Move X1, X19
	244 Call Value.Write, X0, X1, X2
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Move X8, [X19]
	247 Move X1, [X24]
	248 Move X9, [X8+584]
	249 Move X2, [X8+592]
	250 Move X0, X19
	251 NotImplemented "Instruction BLR not yet implemented."
	252 Add W22, W22, 1
	253 Compare X19, 0
	254 JumpIfEqual {478}
	255 Move X9, 0xF46000
	256 Move X8, [X19]
	257 Move X9, [X9+864]
	258 Move X0, X19
	259 Move X2, [X8+592]
	260 Move X1, [X9]
	261 Move X9, [X8+584]
	262 NotImplemented "Instruction BLR not yet implemented."
	263 Move W8, [X21+20]
	264 NotImplemented "Instruction CMP not yet implemented."
	265 Move X0, [X21+64]
	266 Compare X0, 0
	267 JumpIfEqual {478}
	268 Move X8, 0xF46000
	269 Move X8, [X8+344]
	270 Move X1, [X8]
	271 Call Dictionary`2<Object, Object>.get_Count, X0
	272 Move X9, [X21+64]
	273 Compare X9, 0
	274 JumpIfEqual {478}
	275 Move X8, 0xF45000
	276 Move X8, [X8+4000]
	277 Subtract W23, W0, 1
	278 Move X0, X9
	279 Move X1, [X8]
	280 Add X8, X31, 8
	281 Call Dictionary`2<Object, Object>.GetEnumerator, X0
	282 NotImplemented "Instruction LDUR not yet implemented."
	283 NotImplemented "Instruction LDUR not yet implemented."
	284 Move X8, [X31+40]
	285 Move X25, 0xF46000
	286 Move X26, 0xF24000
	287 Move X27, 0xF46000
	288 Move X25, [X25+832]
	289 Move X26, [X26+3288]
	290 Move X27, [X27+888]
	291 Move [X31+48], V0
	292 Move [X31+56], V1
	293 Move [X31+80], X8
	294 Move X28, 0xF19000
	295 Move X28, [X28+2104]
	296 Move W24, W31
	297 Move X1, [X25]
	298 Add X0, X31, 48
	299 Call Enumerator<Object, Object>.MoveNext, X0
	300 Move TEMP, X0
	301 And TEMP, TEMP, 1
	302 Compare TEMP, 1
	303 JumpIfNotEqual {440}
	304 Move X1, [X31+64]
	305 Move X22, [X31+72]
	306 Move X0, [X26]
	307 Move X2, [X27]
	308 Move X3, X31
	309 Call String.Concat, X0, X1, X2
	310 Move X1, X0
	311 Move X8, [X19]
	312 Move X9, [X8+584]
	313 Move X2, [X8+592]
	314 Move X0, X19
	315 NotImplemented "Instruction BLR not yet implemented."
	316 Compare X22, 0
	317 JumpIfEqual {357}
	318 And W2, W20, 1
	319 Move X0, X22
	320 Move X1, X19
	321 Call Value.Write, X0, X1, X2
	322 NotImplemented "Instruction CMP not yet implemented."
	323 Move X8, [X19]
	324 Move X1, [X28]
	325 Move X9, [X8+584]
	326 Move X2, [X8+592]
	327 Move X0, X19
	328 NotImplemented "Instruction BLR not yet implemented."
	329 Add W24, W24, 1
	330 Move X8, 0xF1B000
	331 Move X8, [X8+3144]
	332 Add X21, X21, 40
	333 Move X0, [X8]
	334 Move W8, [X0+224]
	335 Compare W8, 0
	336 JumpIfNotEqual {338}
	337 Call 0x1C17DFC
	338 Move X0, X31
	339 Call CultureInfo.get_InvariantCulture
	340 Move X1, X0
	341 Move X0, X21
	342 Move X2, X31
	343 Call Double.ToString, X0, X1
	344 Compare X19, 0
	345 JumpIfEqual {478}
	346 Move X8, [X19]
	347 Move X1, X0
	348 Move X8, 0xF46000
	349 Move X8, [X8+816]
	350 Add X0, X31, 88
	351 Move X1, [X8]
	352 Call Enumerator<Object>.Dispose, X0
	353 Move X9, 0xF19000
	354 Move X8, [X19]
	355 Move X9, [X9+2120]
	356 Call 0x1C17F20
	357 Call 0x1C17F20
	358 Move X0, 0xF21000
	359 Move X0, [X0+1888]
	360 Call 0x1C17D08
	361 Call 0x1C17F10
	362 Move X1, X31
	363 Move X19, X0
	364 Call ArgumentOutOfRangeException..ctor, X0
	365 Move X0, 0xF46000
	366 Move X0, [X0+896]
	367 Call 0x1C17D08
	368 Move X1, X0
	369 Move X0, X19
	370 Call 0x1C17DEC
	371 Move X22, X0
	372 NotImplemented "Instruction CMP not yet implemented."
	373 Move X0, X22
	374 Call 0x3EB2AD0
	375 Move X23, [X0]
	376 Call 0x3EB2AE0
	377 Move X8, 0xF46000
	378 Move X8, [X8+808]
	379 Add X0, X31, 48
	380 Move X1, [X8]
	381 Call Enumerator<Object, Object>.Dispose, X0
	382 Compare X23, 0
	383 JumpIfNotEqual {480}
	384 Move X0, [X21+64]
	385 Compare X0, 0
	386 JumpIfEqual {478}
	387 Move X8, 0xF46000
	388 Move X8, [X8+344]
	389 Move X1, [X8]
	390 Call Dictionary`2<Object, Object>.get_Count, X0
	391 Move X9, [X21+64]
	392 Compare X9, 0
	393 JumpIfEqual {478}
	394 Move X8, 0xF45000
	395 Move X8, [X8+4000]
	396 Subtract W21, W0, 1
	397 Move X0, X9
	398 Move X1, [X8]
	399 Add X8, X31, 8
	400 Call Dictionary`2<Object, Object>.GetEnumerator, X0
	401 NotImplemented "Instruction LDUR not yet implemented."
	402 NotImplemented "Instruction LDUR not yet implemented."
	403 Move X8, [X31+40]
	404 Move X23, 0xF46000
	405 Move X24, 0xF46000
	406 Move X23, [X23+832]
	407 Move X24, [X24+880]
	408 Move [X31+48], V0
	409 Move [X31+56], V1
	410 Move [X31+80], X8
	411 Move X25, 0xF19000
	412 Move X25, [X25+2104]
	413 Move W22, W31
	414 Move X1, [X23]
	415 Add X0, X31, 48
	416 Call Enumerator<Object, Object>.MoveNext, X0
	417 Move TEMP, X0
	418 And TEMP, TEMP, 1
	419 Compare TEMP, 1
	420 JumpIfNotEqual {440}
	421 Move X1, [X31+64]
	422 Move X2, [X31+72]
	423 Move X0, [X24]
	424 Move X3, X31
	425 Call String.Format, X0, X1, X2
	426 Move X1, X0
	427 Move X8, [X19]
	428 Move X9, [X8+584]
	429 Move X2, [X8+592]
	430 Move X0, X19
	431 NotImplemented "Instruction BLR not yet implemented."
	432 NotImplemented "Instruction CMP not yet implemented."
	433 Move X8, [X19]
	434 Move X1, [X25]
	435 Move X9, [X8+584]
	436 Move X2, [X8+592]
	437 Move X0, X19
	438 NotImplemented "Instruction BLR not yet implemented."
	439 Add W22, W22, 1
	440 Move X8, 0xF46000
	441 Move X8, [X8+808]
	442 Add X0, X31, 48
	443 Move X1, [X8]
	444 Call Enumerator<Object, Object>.Dispose, X0
	445 Move X9, 0xF24000
	446 Move X8, [X19]
	447 Move X9, [X9+1752]
	448 Move X1, [X9]
	449 Move X9, [X8+584]
	450 Move X2, [X8+592]
	451 Move X0, X19
	452 NotImplemented "Instruction BLR not yet implemented."
	453 Move TEMP, X20
	454 And TEMP, TEMP, 1
	455 Compare TEMP, 1
	456 JumpIfNotEqual {465}
	457 Move X9, 0xF24000
	458 Move X8, [X19]
	459 Move X9, [X9+1752]
	460 Move X0, X19
	461 Move X2, [X8+592]
	462 Move X1, [X9]
	463 Move X9, [X8+584]
	464 NotImplemented "Instruction BLR not yet implemented."
	465 Move X20, [X31+192]
	466 Move X19, [X31+200]
	467 Move X22, [X31+176]
	468 Move X21, [X31+184]
	469 Move X24, [X31+160]
	470 Move X23, [X31+168]
	471 Move X26, [X31+144]
	472 Move X25, [X31+152]
	473 Move X28, [X31+128]
	474 Move X27, [X31+136]
	475 Move X30, [X31+112]
	476 Add X31, X31, 208
	477 Return 
	478 Call 0x1C17F20
	479 Move X23, X31
	480 Move X0, X23
	481 Call 0x1C17F18
	482 Move X22, X0
	483 Move X8, 0xF46000
	484 Move X8, [X8+808]
	485 Move X1, [X8]
	486 Add X0, X31, 48
	487 Call Enumerator<Object, Object>.Dispose, X0
	488 Compare X23, 0
	489 JumpIfEqual {540}
	490 Move X0, X23
	491 Call 0x1C17F18
	492 Move X22, X0
	493 NotImplemented "Instruction CMP not yet implemented."
	494 Move X0, X22
	495 Call 0x3EB2AD0
	496 Move X21, [X0]
	497 Call 0x3EB2AE0
	498 Move X8, 0xF46000
	499 Move X8, [X8+808]
	500 Add X0, X31, 48
	501 Move X1, [X8]
	502 Call Enumerator<Object, Object>.Dispose, X0
	503 Compare X21, 0
	504 JumpIfEqual {445}
	505 Move X21, X31
	506 Move X22, X0
	507 Move X8, 0xF46000
	508 Move X8, [X8+808]
	509 Move X1, [X8]
	510 Add X0, X31, 48
	511 Call Enumerator<Object, Object>.Dispose, X0
	512 Compare X21, 0
	513 JumpIfEqual {540}
	514 Move X0, X21
	515 Call 0x1C17F18
	516 Move X22, X0
	517 NotImplemented "Instruction CMP not yet implemented."
	518 Move X0, X22
	519 Call 0x3EB2AD0
	520 Move X21, [X0]
	521 Call 0x3EB2AE0
	522 Move X8, 0xF46000
	523 Move X8, [X8+816]
	524 Add X0, X31, 88
	525 Move X1, [X8]
	526 Call Enumerator<Object>.Dispose, X0
	527 Compare X21, 0
	528 JumpIfEqual {353}
	529 Move X0, X21
	530 Call 0x1C17F18
	531 Move X21, X31
	532 Move X22, X0
	533 Move X8, 0xF46000
	534 Move X8, [X8+816]
	535 Move X1, [X8]
	536 Add X0, X31, 88
	537 Call Enumerator<Object>.Dispose, X0
	538 Compare X21, 0
	539 JumpIfNotEqual {542}
	540 Move X0, X22
	541 Call 0x1D2D690
	542 Move X0, X21
	543 Call 0x1C17F18
	544 Call 0x1991590

Method: System.String SanitizeStringForJson(System.String s)

Disassembly:
	0x031E6C10 LDR X22, [X22 + 0xF78]
	0x031E6C14 MOV X0, X20
	0x031E6C18 LDR X1, [X19]
	0x031E6C1C LDR X2, [X22]
	0x031E6C20 BL 0x2AA528C
	0x031E6C24 TBZ X0, 0x0, 0x31E6CA8
	0x031E6C28 ADRP X21, 0xF3A000
	0x031E6C2C LDR X21, [X21 + 0xB58]
	0x031E6C30 LDR X2, [X22]
	0x031E6C34 MOV X0, X20
	0x031E6C38 LDR X1, [X21]
	0x031E6C3C BL 0x2AA528C
	0x031E6C40 TBZ X0, 0x0, 0x31E6CA8
	0x031E6C44 ADRP X22, 0xF39000
	0x031E6C48 LDR X1, [X19]
	0x031E6C4C LDR X22, [X22 + 0xF80]
	0x031E6C50 MOV X0, X20
	0x031E6C54 LDR X2, [X22]
	0x031E6C58 BL 0x2AA5018
	0x031E6C5C LDR X1, [X21]
	0x031E6C60 LDR X2, [X22]
	0x031E6C64 MOV X19, X0
	0x031E6C68 MOV X0, X20
	0x031E6C6C BL 0x2AA5018
	0x031E6C70 ADRP X8, 0xF39000
	0x031E6C74 LDR X8, [X8 + 0xE8]
	0x031E6C78 LDR X2, [X22]
	0x031E6C7C MOV X21, X0
	0x031E6C80 MOV X0, X20
	0x031E6C84 LDR X1, [X8]
	0x031E6C88 BL 0x2AA5018
	0x031E6C8C MOV X2, X0
	0x031E6C90 MOV X0, X19
	0x031E6C94 MOV X1, X21
	0x031E6C98 LDP X20, X19, [X31 + 0x20]
	0x031E6C9C LDP X22, X21, [X31 + 0x10]
	0x031E6CA0 LDR X30, [X31], #0x30
	0x031E6CA4 B 0x31E6F74
	0x031E6CA8 ADRP X8, 0xF12000
	0x031E6CAC LDR X8, [X8 + 0x748]
	0x031E6CB0 LDR X0, [X8]
	0x031E6CB4 BL 0x1C16F10
	0x031E6CB8 MOV X1, X20
	0x031E6CBC MOV X19, X0
	0x031E6CC0 BL 0x31DD684
	0x031E6CC4 MOV X0, X19
	0x031E6CC8 LDP X20, X19, [X31 + 0x20]
	0x031E6CCC LDP X22, X21, [X31 + 0x10]
	0x031E6CD0 LDR X30, [X31], #0x30
	0x031E6CD4 RET
	0x031E6CD8 BL 0x1C16F20
	0x031E6CDC STR X30, [X31 - 0x30]!
	0x031E6CE0 STP X22, X21, [X31 + 0x10]
	0x031E6CE4 STP X20, X19, [X31 + 0x20]
	0x031E6CE8 ADRP X22, 0x11F6000
	0x031E6CEC ADRP X21, 0xF39000
	0x031E6CF0 ADRP X20, 0xF3A000
	0x031E6CF4 LDRB W8, [X22 + 0x14F]
	0x031E6CF8 LDR X21, [X21 + 0xFC8]
	0x031E6CFC LDR X20, [X20 + 0xB60]
	0x031E6D00 MOV X19, X0
	0x031E6D04 TBNZ X8, 0x0, 0x31E6D40
	0x031E6D08 ADRP X0, 0xF3A000
	0x031E6D0C LDR X0, [X0 + 0x2E8]
	0x031E6D10 BL 0x1C16CF4
	0x031E6D14 ADRP X0, 0xF3A000
	0x031E6D18 LDR X0, [X0 + 0xB60]
	0x031E6D1C BL 0x1C16CF4
	0x031E6D20 ADRP X0, 0xF39000
	0x031E6D24 LDR X0, [X0 + 0xFC8]
	0x031E6D28 BL 0x1C16CF4
	0x031E6D2C ADRP X0, 0xF12000
	0x031E6D30 LDR X0, [X0 + 0x748]
	0x031E6D34 BL 0x1C16CF4
	0x031E6D38 MOVZ W8, 0x1
	0x031E6D3C STRB W8, [X22 + 0x14F]
	0x031E6D40 LDR X0, [X21]
	0x031E6D44 ADRP X21, 0xF3A000
	0x031E6D48 LDR X21, [X21 + 0x2E8]
	0x031E6D4C BL 0x1C16F10
	0x031E6D50 LDR X1, [X20]
	0x031E6D54 MOV X20, X0
	0x031E6D58 BL 0x301B7C4
	0x031E6D5C MOV X0, X19
	0x031E6D60 BL 0x31E659C
	0x031E6D64 CMP W0, 0x6
	0x031E6D68 B.EQ 0x31E6D5C
	0x031E6D6C MOV W1, W0
	0x031E6D70 CBZ W0, 0x31E6DE0
	0x031E6D74 CMP W1, 0x4
	0x031E6D78 B.EQ 0x31E6DE8
	0x031E6D7C MOV X0, X19
	0x031E6D80 BL 0x31E6754
	0x031E6D84 CBZ X20, 0x31E6E18
	0x031E6D88 LDR W10, [X20 + 0x1C]
	0x031E6D8C LDR X8, [X20 + 0x10]
	0x031E6D90 LDR X9, [X21]
	0x031E6D94 ADD W10, W10, 0x1
	0x031E6D98 STR W10, [X20 + 0x1C]
	0x031E6D9C CBZ X8, 0x31E6E18
	0x031E6DA0 LDRSW X10, [X20 + 0x18]
	0x031E6DA4 LDR W11, [X8 + 0x18]
	0x031E6DA8 MOV X1, X0
	0x031E6DAC CMP W10, W11
	0x031E6DB0 B.CS 0x31E6DC8
	0x031E6DB4 ADD W9, W10, 0x1
	0x031E6DB8 ADD X8, X8, X10, 0x3, LSL
	0x031E6DBC STR W9, [X20 + 0x18]
	0x031E6DC0 STR X1, [X8 + 0x20]
	0x031E6DC4 B 0x31E6D5C
	0x031E6DC8 LDR X8, [X9 + 0x20]
	0x031E6DCC MOV X0, X20
	0x031E6DD0 LDR X8, [X8 + 0xC0]
	0x031E6DD4 LDR X2, [X8 + 0x70]
	0x031E6DD8 BL 0x301BF90
	0x031E6DDC B 0x31E6D5C
	0x031E6DE0 MOV X0, X31
	0x031E6DE4 B 0x31E6E08
	0x031E6DE8 ADRP X8, 0xF12000
	0x031E6DEC LDR X8, [X8 + 0x748]
	0x031E6DF0 LDR X0, [X8]
	0x031E6DF4 BL 0x1C16F10
	0x031E6DF8 MOV X1, X20
	0x031E6DFC MOV X19, X0
	0x031E6E00 BL 0x31DD564
	0x031E6E04 MOV X0, X19
	0x031E6E08 LDP X20, X19, [X31 + 0x20]
	0x031E6E0C LDP X22, X21, [X31 + 0x10]
	0x031E6E10 LDR X30, [X31], #0x30
	0x031E6E14 RET
	0x031E6E18 BL 0x1C16F20
	0x031E6E1C STR X30, [X31 - 0x20]!
	0x031E6E20 STP X20, X19, [X31 + 0x10]
	0x031E6E24 ADRP X20, 0x11F6000
	0x031E6E28 LDRB W8, [X20 + 0x152]
	0x031E6E2C MOV X19, X0
	0x031E6E30 TBNZ X8, 0x0, 0x31E6E48
	0x031E6E34 ADRP X0, 0xF16000
	0x031E6E38 LDR X0, [X0 + 0x9E8]
	0x031E6E3C BL 0x1C16CF4
	0x031E6E40 MOVZ W8, 0x1
	0x031E6E44 STRB W8, [X20 + 0x152]
	0x031E6E48 CBZ X19, 0x31E6E90
	0x031E6E4C LDR X8, [X19]
	0x031E6E50 ADRP X20, 0xF16000
	0x031E6E54 MOV X0, X19
	0x031E6E58 LDP X9, X1, [X8 + 0x1C8]
	0x031E6E5C LDR X20, [X20 + 0x9E8]
	0x031E6E60 BLR X9
	0x031E6E64 LDR X8, [X20]
	0x031E6E68 MOV W19, W0
	0x031E6E6C LDR W9, [X8 + 0xE0]
	0x031E6E70 CBNZ W9, 0x31E6E7C
	0x031E6E74 MOV X0, X8
	0x031E6E78 BL 0x1C16DFC
	0x031E6E7C MOV W0, W19
	0x031E6E80 LDP X20, X19, [X31 + 0x10]
	0x031E6E84 MOV X1, X31
	0x031E6E88 LDR X30, [X31], #0x20
	0x031E6E8C B 0x331E88C
	0x031E6E90 BL 0x1C16F20
	0x031E6E94 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x11F7000
	015 Move W8, [X20+328]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {50}
	021 Move X0, 0xF0E000
	022 Move X0, [X0+1880]
	023 Call 0x1C17CF4
	024 Move X0, 0xF0E000
	025 Move X0, [X0+2288]
	026 Call 0x1C17CF4
	027 Move X0, 0xF3B000
	028 Move X0, [X0+2848]
	029 Call 0x1C17CF4
	030 Move X0, 0xF3B000
	031 Move X0, [X0+2856]
	032 Call 0x1C17CF4
	033 Move X0, 0xF3B000
	034 Move X0, [X0+2864]
	035 Call 0x1C17CF4
	036 Move X0, 0xF3B000
	037 Move X0, [X0+2872]
	038 Call 0x1C17CF4
	039 Move X0, 0xF3B000
	040 Move X0, [X0+2880]
	041 Call 0x1C17CF4
	042 Move X0, 0xF3B000
	043 Move X0, [X0+2888]
	044 Call 0x1C17CF4
	045 Move X0, 0xF0E000
	046 Move X0, [X0+2440]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X20+328], W8
	050 Compare X19, 0
	051 JumpIfEqual {147}
	052 Move W8, [X19+16]
	053 Compare W8, 0
	054 JumpIfEqual {147}
	055 Move X8, 0xF0E000
	056 Move X8, [X8+2288]
	057 Move X0, [X8]
	058 Call 0x1C17F10
	059 Move X1, X31
	060 Move X20, X0
	061 Call StringBuilder..ctor, X0
	062 Move W8, [X19+16]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X23, 0xF0E000
	065 Move X24, 0xF3B000
	066 Move X29, 0xF3B000
	067 Move X23, [X23+1880]
	068 Move X24, [X24+2888]
	069 Move X29, [X29+2880]
	070 Move W26, 32
	071 Move X27, 1
	072 Move X28, -40169472
	073 Move W21, W31
	074 Move W25, 1
	075 NotImplemented "Instruction MOVK not yet implemented."
	076 NotImplemented "Instruction MOVK not yet implemented."
	077 Add X28, X28, 992
	078 Move X0, X19
	079 Move W1, W21
	080 Move X2, X31
	081 Call String.get_Chars, X0, X1
	082 And W22, W0, 0xFFFF
	083 Subtract W8, W22, 8
	084 Move X0, [X23]
	085 Add X1, X31, 12
	086 Move [X31+12], W22
	087 Call 0x1C17E04
	088 Compare X20, 0
	089 JumpIfEqual {171}
	090 Move X1, [X24]
	091 Move X2, X0
	092 Move X0, X20
	093 Move X3, X31
	094 Call StringBuilder.AppendFormat, X0, X1, X2
	095 Move W8, [X19+16]
	096 Add W21, W21, 1
	097 NotImplemented "Instruction CMP not yet implemented."
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Subtract W9, W22, 14
	100 NotImplemented "Instruction CMP not yet implemented."
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Subtract W8, W22, 34
	103 NotImplemented "Instruction CMP not yet implemented."
	104 NotImplemented "Instruction LSLV not yet implemented."
	105 And X31, X9, X26
	106 NotImplemented "Instruction LSLV not yet implemented."
	107 And X31, X8, X27
	108 Compare X20, 0
	109 JumpIfEqual {171}
	110 Move W1, 92
	111 Move X0, X20
	112 Move X2, X31
	113 Call StringBuilder.Append, X0, X1
	114 NotImplemented "Instruction ADR not yet implemented."
	115 Move W10, [X28]
	116 Add X9, X9, X10
	117 CallNoReturn X9
	118 Compare X20, 0
	119 JumpIfEqual {171}
	120 Move X8, 0xF3B000
	121 Move X8, [X8+2848]
	122 Compare X20, 0
	123 JumpIfEqual {171}
	124 Move X0, X20
	125 Move W1, W22
	126 Move X2, X31
	127 Call StringBuilder.Append, X0, X1
	128 Compare X20, 0
	129 JumpIfEqual {171}
	130 Move X8, 0xF3B000
	131 Move X8, [X8+2864]
	132 Compare X20, 0
	133 JumpIfEqual {171}
	134 Move X8, 0xF3B000
	135 Move X8, [X8+2856]
	136 Compare X20, 0
	137 JumpIfEqual {171}
	138 Move X8, 0xF3B000
	139 Move X8, [X8+2872]
	140 Move X1, [X8]
	141 Move X0, X20
	142 Move X2, X31
	143 Call StringBuilder.Append, X0, X1
	144 Compare X20, 0
	145 JumpIfEqual {171}
	146 Move X1, [X29]
	147 Move X8, 0xF0E000
	148 Move X8, [X8+2440]
	149 Move X0, [X8]
	150 Compare X20, 0
	151 JumpIfEqual {171}
	152 Move X8, [X20]
	153 Move X0, X20
	154 Move X9, [X8+360]
	155 Move X1, [X8+368]
	156 NotImplemented "Instruction BLR not yet implemented."
	157 Move X20, [X31+96]
	158 Move X19, [X31+104]
	159 Move X22, [X31+80]
	160 Move X21, [X31+88]
	161 Move X24, [X31+64]
	162 Move X23, [X31+72]
	163 Move X26, [X31+48]
	164 Move X25, [X31+56]
	165 Move X28, [X31+32]
	166 Move X27, [X31+40]
	167 Move X29, [X31+16]
	168 Move X30, [X31+24]
	169 Add X31, X31, 112
	170 Return X0
	171 Call 0x1C17F20

Method: System.Void OnBeforeSerialize()

Disassembly:
	0x031E6E98 STP X20, X19, [X31 + 0x10]
	0x031E6E9C ADRP X21, 0x11F6000
	0x031E6EA0 ADRP X20, 0xF0D000
	0x031E6EA4 LDRB W8, [X21 + 0x153]
	0x031E6EA8 LDR X20, [X20 + 0x8F0]
	0x031E6EAC MOV X19, X0
	0x031E6EB0 TBNZ X8, 0x0, 0x31E6ED4
	0x031E6EB4 ADRP X0, 0xF0D000
	0x031E6EB8 LDR X0, [X0 + 0x8F0]
	0x031E6EBC BL 0x1C16CF4
	0x031E6EC0 ADRP X0, 0xF3A000
	0x031E6EC4 LDR X0, [X0 + 0xB68]
	0x031E6EC8 BL 0x1C16CF4
	0x031E6ECC MOVZ W8, 0x1
	0x031E6ED0 STRB W8, [X21 + 0x153]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+16]
	004 Move X19, X0
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X0, X19
	007 Call Value.SerializeList, X0
	008 Move W8, [X19+16]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X0, X19
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call Value.SerializeDictionary, X0
	014 Return 
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return 

Method: System.Void SerializeList()

Disassembly:
	0x031E6ED4 LDR X0, [X20]
	0x031E6ED8 ADRP X21, 0xF3A000
	0x031E6EDC LDR X21, [X21 + 0xB68]
	0x031E6EE0 BL 0x1C16F10
	0x031E6EE4 MOV X1, X31
	0x031E6EE8 MOV X20, X0
	0x031E6EEC BL 0x3231AC4
	0x031E6EF0 MOV X0, X19
	0x031E6EF4 BL 0x31E70F8
	0x031E6EF8 LDR X8, [X21]
	0x031E6EFC CBZ X8, 0x31E6F70
	0x031E6F00 MOV W1, W0
	0x031E6F04 MOV X0, X8
	0x031E6F08 MOV X2, X31
	0x031E6F0C BL 0x322BD98
	0x031E6F10 ADDS W31, W0, 0x1
	0x031E6F14 B.NE 0x31E6F54
	0x031E6F18 MOV X0, X19
	0x031E6F1C BL 0x31E6E1C
	0x031E6F20 CBZ X20, 0x31E6F70
	0x031E6F24 MOV W1, W0
	0x031E6F28 MOV X0, X20
	0x031E6F2C MOV X2, X31
	0x031E6F30 BL 0x3233D30
	0x031E6F34 CBZ X19, 0x31E6F70
	0x031E6F38 LDR X8, [X19]
	0x031E6F3C MOV X0, X19
	0x031E6F40 LDP X9, X1, [X8 + 0x1B8]
	0x031E6F44 BLR X9
	0x031E6F48 ADDS W31, W0, 0x1
	0x031E6F4C B.NE 0x31E6EF0
	0x031E6F50 B 0x31E6F58
	0x031E6F54 CBZ X20, 0x31E6F70
	0x031E6F58 LDR X8, [X20]
	0x031E6F5C MOV X0, X20
	0x031E6F60 LDP X20, X19, [X31 + 0x10]
	0x031E6F64 LDP X2, X1, [X8 + 0x168]
	0x031E6F68 LDP X30, X21, [X31], #0x20
	0x031E6F6C BR X2
	0x031E6F70 BL 0x1C16F20
	0x031E6F74 STR X30, [X31 - 0x40]!
	0x031E6F78 STP X24, X23, [X31 + 0x10]
	0x031E6F7C STP X22, X21, [X31 + 0x20]
	0x031E6F80 STP X20, X19, [X31 + 0x30]
	0x031E6F84 ADRP X24, 0x11F6000
	0x031E6F88 ADRP X22, 0xF3A000
	0x031E6F8C ADRP X23, 0xF0D000
	0x031E6F90 LDRB W8, [X24 + 0x156]
	0x031E6F94 LDR X22, [X22 + 0xB70]
	0x031E6F98 LDR X23, [X23 + 0x6C0]
	0x031E6F9C MOV X19, X2
	0x031E6FA0 MOV X20, X1
	0x031E6FA4 MOV X21, X0
	0x031E6FA8 TBNZ X8, 0x0, 0x31E6FFC
	0x031E6FAC ADRP X0, 0xF3A000
	0x031E6FB0 LDR X0, [X0 + 0xB78]
	0x031E6FB4 BL 0x1C16CF4
	0x031E6FB8 ADRP X0, 0xF3A000
	0x031E6FBC LDR X0, [X0 + 0x320]
	0x031E6FC0 BL 0x1C16CF4
	0x031E6FC4 ADRP X0, 0xF0D000
	0x031E6FC8 LDR X0, [X0 + 0xDF8]
	0x031E6FCC BL 0x1C16CF4
	0x031E6FD0 ADRP X0, 0xF0D000
	0x031E6FD4 LDR X0, [X0 + 0x6C0]
	0x031E6FD8 BL 0x1C16CF4
	0x031E6FDC ADRP X0, 0xF3A000
	0x031E6FE0 LDR X0, [X0 + 0xB70]
	0x031E6FE4 BL 0x1C16CF4
	0x031E6FE8 ADRP X0, 0xF3A000
	0x031E6FEC LDR X0, [X0 + 0x358]
	0x031E6FF0 BL 0x1C16CF4
	0x031E6FF4 MOVZ W8, 0x1
	0x031E6FF8 STRB W8, [X24 + 0x156]
	0x031E6FFC LDR X0, [X23]
	0x031E7000 LDR X22, [X22]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x11F7000
	008 Move W8, [X20+329]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0xF3A000
	015 Move X0, [X0+4048]
	016 Call 0x1C17CF4
	017 Move X0, 0xF3B000
	018 Move X0, [X0+352]
	019 Call 0x1C17CF4
	020 Move X0, 0xF3B000
	021 Move X0, [X0+776]
	022 Call 0x1C17CF4
	023 Move X0, 0xF3A000
	024 Move X0, [X0+4040]
	025 Call 0x1C17CF4
	026 Move X0, 0xF0E000
	027 Move X0, [X0+2760]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+329], W8
	031 Move X20, [X19+48]
	032 Compare X20, 0
	033 JumpIfNotEqual {47}
	034 Move X8, 0xF3A000
	035 Move X8, [X8+4040]
	036 Move X0, [X8]
	037 Call 0x1C17F10
	038 Move X8, 0xF3A000
	039 Move X8, [X8+4048]
	040 Move W1, W31
	041 Move X20, X0
	042 Move X2, [X8]
	043 Call List`1<Object>..ctor, X0, X1
	044 Move [X19+48], X20
	045 Compare X20, 0
	046 JumpIfEqual {80}
	047 Move X8, 0xF0E000
	048 Move X8, [X8+2760]
	049 Move W22, [X20+24]
	050 Move X0, [X8]
	051 Move W1, W22
	052 Call 0x1C17D6C
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move [X19+56], X0
	055 Move X21, X0
	056 Move X0, [X19+48]
	057 Compare X0, 0
	058 JumpIfEqual {80}
	059 Move X23, 0xF3B000
	060 Move X23, [X23+776]
	061 Move X20, X31
	062 Subtract X22, X22, 1
	063 Move X2, [X23]
	064 Move W1, W20
	065 Call List`1<Object>.get_Item, X0, X1
	066 Move X1, X31
	067 Call JsonUtility.ToJson, X0
	068 Compare X21, 0
	069 JumpIfEqual {80}
	070 Move W8, [X21+24]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Add X8, X21, X20
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move [X8+32], X0
	075 Move X0, [X19+48]
	076 Move X21, [X19+56]
	077 Add X20, X20, 1
	078 Compare X0, 0
	079 JumpIfNotEqual {63}
	080 Call 0x1C17F20
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move X30, [X31+48]
	086 Move X23, [X31+56]
	087 Return 
	088 Call 0x1C17F28

Method: System.Void SerializeDictionary()

Disassembly:
	0x031E7004 LDR W8, [X0 + 0xE0]
	0x031E7008 CBNZ W8, 0x31E7010
	0x031E700C BL 0x1C16DFC
	0x031E7010 MOV X0, X22
	0x031E7014 MOV X1, X31
	0x031E7018 BL 0x338C698
	0x031E701C CBZ X21, 0x31E70F0
	0x031E7020 ADRP X8, 0xF0C000
	0x031E7024 LDR X8, [X8 + 0xDF8]
	0x031E7028 MOV X22, X0
	0x031E702C LDR X21, [X21 + 0x18]
	0x031E7030 LDR X0, [X8]
	0x031E7034 LDR W8, [X0 + 0xE0]
	0x031E7038 CBNZ W8, 0x31E7040
	0x031E703C BL 0x1C16DFC
	0x031E7040 MOV X0, X22
	0x031E7044 MOV X1, X21
	0x031E7048 MOV X2, X31
	0x031E704C BL 0x33AF150
	0x031E7050 CBZ X19, 0x31E70F0
	0x031E7054 CBZ X0, 0x31E70F0
	0x031E7058 ADRP X8, 0xF39000
	0x031E705C LDR X8, [X8 + 0x358]
	0x031E7060 LDR X9, [X0]
	0x031E7064 LDR X1, [X8]
	0x031E7068 LDR X8, [X9 + 0x40]
	0x031E706C LDR X9, [X1 + 0x40]
	0x031E7070 CMP X8, X9
	0x031E7074 B.NE 0x31E70F4
	0x031E7078 ADRP X21, 0xF39000
	0x031E707C LDR X21, [X21 + 0xB78]
	0x031E7080 BL 0x1C16E08
	0x031E7084 LDR W8, [X0]
	0x031E7088 MOV X1, X31
	0x031E708C STR W8, [X19 + 0x10]
	0x031E7090 LDR X0, [X21]
	0x031E7094 BL 0x338C698
	0x031E7098 CBZ X20, 0x31E70F0
	0x031E709C LDR X1, [X20 + 0x18]
	0x031E70A0 MOV X2, X31
	0x031E70A4 BL 0x33AF150
	0x031E70A8 CBZ X0, 0x31E70F0
	0x031E70AC ADRP X8, 0xF39000
	0x031E70B0 LDR X8, [X8 + 0x320]
	0x031E70B4 LDR X9, [X0]
	0x031E70B8 LDR X1, [X8]
	0x031E70BC LDR X8, [X9 + 0x40]
	0x031E70C0 LDR X9, [X1 + 0x40]
	0x031E70C4 CMP X8, X9
	0x031E70C8 B.NE 0x31E70F4
	0x031E70CC BL 0x1C16E08
	0x031E70D0 LDR W8, [X0]
	0x031E70D4 MOV X0, X19
	0x031E70D8 LDP X22, X21, [X31 + 0x20]
	0x031E70DC LDP X24, X23, [X31 + 0x10]
	0x031E70E0 STR W8, [X19 + 0x14]
	0x031E70E4 LDP X20, X19, [X31 + 0x30]
	0x031E70E8 LDR X30, [X31], #0x40
	0x031E70EC RET
	0x031E70F0 BL 0x1C16F20
	0x031E70F4 BL 0x1C171E0
	0x031E70F8 STR X30, [X31 - 0x20]!
	0x031E70FC STP X20, X19, [X31 + 0x10]
	0x031E7100 ADRP X20, 0x11F5000
	0x031E7104 LDRB W8, [X20 + 0x151]
	0x031E7108 MOV X19, X0
	0x031E710C TBNZ X8, 0x0, 0x31E7124
	0x031E7110 ADRP X0, 0xF15000
	0x031E7114 LDR X0, [X0 + 0x9E8]
	0x031E7118 BL 0x1C16CF4
	0x031E711C MOVZ W8, 0x1
	0x031E7120 STRB W8, [X20 + 0x151]
	0x031E7124 CBZ X19, 0x31E716C
	0x031E7128 LDR X8, [X19]
	0x031E712C ADRP X20, 0xF15000
	0x031E7130 MOV X0, X19
	0x031E7134 LDP X9, X1, [X8 + 0x1B8]
	0x031E7138 LDR X20, [X20 + 0x9E8]
	0x031E713C BLR X9
	0x031E7140 LDR X8, [X20]
	0x031E7144 MOV W19, W0
	0x031E7148 LDR W9, [X8 + 0xE0]
	0x031E714C CBNZ W9, 0x31E7158
	0x031E7150 MOV X0, X8
	0x031E7154 BL 0x1C16DFC
	0x031E7158 MOV W0, W19
	0x031E715C LDP X20, X19, [X31 + 0x10]
	0x031E7160 MOV X1, X31
	0x031E7164 LDR X30, [X31], #0x20
	0x031E7168 B 0x331E88C
	0x031E716C BL 0x1C16F20
	0x031E7170 STP X30, X21, [X31 - 0x20]!
	0x031E7174 STP X20, X19, [X31 + 0x10]
	0x031E7178 ADRP X21, 0x11F5000
	0x031E717C ADRP X20, 0xF39000
	0x031E7180 LDRB W8, [X21 + 0x154]
	0x031E7184 LDR X20, [X20 + 0xB80]
	0x031E7188 MOV X19, X0
	0x031E718C TBNZ X8, 0x0, 0x31E71A4
	0x031E7190 ADRP X0, 0xF39000
	0x031E7194 LDR X0, [X0 + 0xB80]
	0x031E7198 BL 0x1C16CF4
	0x031E719C MOVZ W8, 0x1
	0x031E71A0 STRB W8, [X21 + 0x154]
	0x031E71A4 MOV X0, X19
	0x031E71A8 BL 0x31E70F8
	0x031E71AC LDR X8, [X20]
	0x031E71B0 CBZ X8, 0x31E7204
	0x031E71B4 MOV W1, W0
	0x031E71B8 MOV X0, X8
	0x031E71BC MOV X2, X31
	0x031E71C0 BL 0x322BD98
	0x031E71C4 ADDS W31, W0, 0x1
	0x031E71C8 B.EQ 0x31E71F8
	0x031E71CC CBZ X19, 0x31E7204
	0x031E71D0 LDR X8, [X19]
	0x031E71D4 MOV X0, X19
	0x031E71D8 LDP X9, X1, [X8 + 0x1C8]
	0x031E71DC BLR X9
	0x031E71E0 LDR X8, [X19]
	0x031E71E4 MOV X0, X19
	0x031E71E8 LDP X9, X1, [X8 + 0x1B8]
	0x031E71EC BLR X9
	0x031E71F0 ADDS W31, W0, 0x1
	0x031E71F4 B.NE 0x31E71A4
	0x031E71F8 LDP X20, X19, [X31 + 0x10]
	0x031E71FC LDP X30, X21, [X31], #0x20
	0x031E7200 RET
	0x031E7204 BL 0x1C16F20
	0x031E7208 STR X30, [X31 - 0x20]!
	0x031E720C STP X20, X19, [X31 + 0x10]
	0x031E7210 ADRP X19, 0x11F5000
	0x031E7214 ADRP X20, 0xF39000
	0x031E7218 LDRB W8, [X19 + 0x157]
	0x031E721C LDR X20, [X20 + 0x260]
	0x031E7220 TBNZ X8, 0x0, 0x31E7238
	0x031E7224 ADRP X0, 0xF39000
	0x031E7228 LDR X0, [X0 + 0x260]
	0x031E722C BL 0x1C16CF4
	0x031E7230 MOVZ W8, 0x1
	0x031E7234 STRB W8, [X19 + 0x157]
	0x031E7238 LDR X0, [X20]
	0x031E723C BL 0x1C16F10
	0x031E7240 MOV X1, X31
	0x031E7244 MOV X19, X0
	0x031E7248 BL 0x33BDD8C
	0x031E724C LDR X8, [X20]
	0x031E7250 LDR X8, [X8 + 0xB8]
	0x031E7254 STR X19, [X8]
	0x031E7258 LDP X20, X19, [X31 + 0x10]
	0x031E725C LDR X30, [X31], #0x20
	0x031E7260 RET
	0x031E7264 MOV X1, X31
	0x031E7268 B 0x33BDD8C
	0x031E726C MOV X0, X1
	0x031E7270 B 0x31D3DD8
	0x031E7274 MOV X0, X1
	0x031E7278 B 0x31D3DD8
	0x031E727C AND W0, W1, 0x1
	0x031E7280 B 0x31D3F18
	0x031E7284 AND W0, W1, 0x1

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+96], X30
	003 Move [X31+112], X24
	004 Move [X31+120], X23
	005 Move [X31+128], X22
	006 Move [X31+136], X21
	007 Move [X31+144], X20
	008 Move [X31+152], X19
	009 Move X20, 0x11F6000
	010 Move W8, [X20+330]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {48}
	016 Move X0, 0xF39000
	017 Move X0, [X0+4000]
	018 Call 0x1C17CF4
	019 Move X0, 0xF39000
	020 Move X0, [X0+4064]
	021 Call 0x1C17CF4
	022 Move X0, 0xF3A000
	023 Move X0, [X0+344]
	024 Call 0x1C17CF4
	025 Move X0, 0xF39000
	026 Move X0, [X0+4056]
	027 Call 0x1C17CF4
	028 Move X0, 0xF3A000
	029 Move X0, [X0+808]
	030 Call 0x1C17CF4
	031 Move X0, 0xF3A000
	032 Move X0, [X0+832]
	033 Call 0x1C17CF4
	034 Move X0, 0xF3A000
	035 Move X0, [X0+848]
	036 Call 0x1C17CF4
	037 Move X0, 0xF39000
	038 Move X0, [X0+3816]
	039 Call 0x1C17CF4
	040 Move X0, 0xF39000
	041 Move X0, [X0+3824]
	042 Call 0x1C17CF4
	043 Move X0, 0xF0D000
	044 Move X0, [X0+2760]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X20+330], W8
	048 NotImplemented "Instruction MOVI not yet implemented."
	049 Move [X31+80], X31
	050 Move [X31+48], V0
	051 Move [X31+56], V0
	052 Move X20, [X19+64]
	053 Compare X20, 0
	054 JumpIfNotEqual {68}
	055 Move X8, 0xF39000
	056 Move X8, [X8+4056]
	057 Move X0, [X8]
	058 Call 0x1C17F10
	059 Move X8, 0xF39000
	060 Move X8, [X8+4064]
	061 Move W1, W31
	062 Move X20, X0
	063 Move X2, [X8]
	064 Call Dictionary`2<Object, Object>..ctor, X0, X1
	065 Move [X19+64], X20
	066 Compare X20, 0
	067 JumpIfEqual {145}
	068 Move X8, 0xF3A000
	069 Move X8, [X8+344]
	070 Move X21, 0xF0D000
	071 Move X0, X20
	072 Move X1, [X8]
	073 Move X21, [X21+2760]
	074 Call Dictionary`2<Object, Object>.get_Count, X0
	075 Move X8, [X21]
	076 Move W20, W0
	077 Move W1, W20
	078 Move X0, X8
	079 Call 0x1C17D6C
	080 Move [X19+72], X0
	081 Move X0, [X21]
	082 Move W1, W20
	083 Call 0x1C17D6C
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move [X19+80], X0
	086 Move X0, [X19+64]
	087 Compare X0, 0
	088 JumpIfEqual {145}
	089 Move X8, 0xF39000
	090 Move X8, [X8+4000]
	091 Move X22, 0xF3A000
	092 Move X21, 0xF3A000
	093 Move X1, [X8]
	094 Move X22, [X22+832]
	095 Move X21, [X21+808]
	096 Add X8, X31, 8
	097 Call Dictionary`2<Object, Object>.GetEnumerator, X0
	098 NotImplemented "Instruction LDUR not yet implemented."
	099 NotImplemented "Instruction LDUR not yet implemented."
	100 Move X8, [X31+40]
	101 Move X23, X31
	102 Move W20, W20
	103 Move [X31+48], V0
	104 Move [X31+56], V1
	105 Move [X31+80], X8
	106 Move X1, [X22]
	107 Add X0, X31, 48
	108 Call Enumerator<Object, Object>.MoveNext, X0
	109 Move X8, [X19+72]
	110 Compare X8, 0
	111 JumpIfEqual {141}
	112 Move W9, [X8+24]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X9, [X31+64]
	115 Add X8, X8, X23
	116 Move [X8+32], X9
	117 Move X24, [X19+80]
	118 Move X0, [X31+72]
	119 Move X1, X31
	120 Call JsonUtility.ToJson, X0
	121 Compare X24, 0
	122 JumpIfEqual {142}
	123 Move W8, [X24+24]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Add X8, X24, X23
	126 Add X23, X23, 1
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move [X8+32], X0
	129 Move X1, [X21]
	130 Add X0, X31, 48
	131 Call Enumerator<Object, Object>.Dispose, X0
	132 Move X20, [X31+144]
	133 Move X19, [X31+152]
	134 Move X22, [X31+128]
	135 Move X21, [X31+136]
	136 Move X24, [X31+112]
	137 Move X23, [X31+120]
	138 Move X30, [X31+96]
	139 Add X31, X31, 160
	140 Return 
	141 Call 0x1C17F20
	142 Call 0x1C17F20
	143 Call 0x1C17F28
	144 Call 0x1C17F28
	145 Call 0x1C17F20
	146 Move X19, X0
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Move X0, X19
	149 Call 0x3EB2AD0
	150 Move X20, [X0]
	151 Call 0x3EB2AE0
	152 Move X1, [X21]
	153 Add X0, X31, 48
	154 Call Enumerator<Object, Object>.Dispose, X0
	155 Compare X20, 0
	156 JumpIfEqual {132}
	157 Move X0, X20
	158 Call 0x1C17F18
	159 Move X20, X31
	160 Move X19, X0
	161 Move X1, [X21]
	162 Add X0, X31, 48
	163 Call Enumerator<Object, Object>.Dispose, X0
	164 Compare X20, 0
	165 JumpIfNotEqual {168}
	166 Move X0, X19
	167 Call 0x1D2D690
	168 Move X0, X20
	169 Call 0x1C17F18
	170 Call 0x1991590

Method: System.Void OnAfterDeserialize()

Disassembly:
	0x031E7288 B 0x31D3F18
	0x031E728C B 0x31D4014
	0x031E7290 B 0x31D4014
	0x031E7294 B 0x31D4FF4
	0x031E7298 B 0x31D4FF4
	0x031E729C MOV X0, X1
	0x031E72A0 MOV X1, X2
	0x031E72A4 B 0x31DE174
	0x031E72A8 MOV X0, X1
	0x031E72AC MOV X1, X2
	0x031E72B0 B 0x31DE174
	0x031E72B4 MOV W0, W1
	0x031E72B8 B 0x31DE4AC
	0x031E72BC MOV W0, W1
	0x031E72C0 B 0x31DE4AC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+16]
	004 Move X19, X0
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X0, X19
	007 Call Value.DeserializeList, X0
	008 Move W8, [X19+16]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X0, X19
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call Value.DeserializeDictionary, X0
	014 Return 
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return 

Method: System.Void DeserializeList()

Disassembly:
	0x031E72C4 MOV W0, W1
	0x031E72C8 B 0x31D47EC
	0x031E72CC MOV W0, W1
	0x031E72D0 B 0x31D47EC
	0x031E72D4 MOV X0, X1
	0x031E72D8 B 0x31DEA30
	0x031E72DC MOV X0, X1
	0x031E72E0 B 0x31DEA30
	0x031E72E4 MOV W0, W1
	0x031E72E8 B 0x31DED1C
	0x031E72EC MOV W0, W1
	0x031E72F0 B 0x31DED1C
	0x031E72F4 MOV W0, W1
	0x031E72F8 B 0x31DF00C
	0x031E72FC MOV W0, W1
	0x031E7300 B 0x31DF00C
	0x031E7304 MOV X0, X1
	0x031E7308 B 0x31DF2F8
	0x031E730C MOV X0, X1
	0x031E7310 B 0x31DF2F8
	0x031E7314 MOV W0, W1
	0x031E7318 B 0x31DF5E4
	0x031E731C MOV W0, W1
	0x031E7320 B 0x31DF5E4
	0x031E7324 MOV W0, W1
	0x031E7328 B 0x31DB734
	0x031E732C MOV W0, W1
	0x031E7330 B 0x31DB734
	0x031E7334 MOV X0, X1
	0x031E7338 B 0x31DFB68
	0x031E733C MOV X0, X1
	0x031E7340 B 0x31DFB68
	0x031E7344 MOV X0, X1
	0x031E7348 MOV X1, X2
	0x031E734C B 0x31DFE54
	0x031E7350 MOV X0, X1
	0x031E7354 MOV X1, X2
	0x031E7358 B 0x31DFE54
	0x031E735C MOV X0, X1
	0x031E7360 B 0x31E0150
	0x031E7364 MOV X0, X1
	0x031E7368 B 0x31E0150
	0x031E736C MOV X0, X1
	0x031E7370 MOV X1, X2
	0x031E7374 B 0x31E043C
	0x031E7378 MOV X0, X1
	0x031E737C MOV X1, X2
	0x031E7380 B 0x31E043C
	0x031E7384 MOV X0, X1
	0x031E7388 B 0x31E0738
	0x031E738C MOV X0, X1
	0x031E7390 B 0x31E0738
	0x031E7394 B 0x31E0A24
	0x031E7398 B 0x31E0A24
	0x031E739C AND X0, X1, 0x0
	0x031E73A0 B 0x31E0D38
	0x031E73A4 AND X0, X1, 0x0
	0x031E73A8 B 0x31E0D38
	0x031E73AC B 0x31E1024
	0x031E73B0 B 0x31E1024
	0x031E73B4 B 0x31DC200
	0x031E73B8 B 0x31DC200
	0x031E73BC B 0x31E15B4
	0x031E73C0 B 0x31E15B4
	0x031E73C4 B 0x31E18C8
	0x031E73C8 B 0x31E18C8
	0x031E73CC SUB X31, X31, 0x30
	0x031E73D0 STR X30, [X31 + 0x20]
	0x031E73D4 LDR X8, [X1 + 0x10]
	0x031E73D8 LDR V0, [X1]
	0x031E73DC ADD X0, X31, 0x0
	0x031E73E0 STR X8, [X31 + 0x10]
	0x031E73E4 STR V0, [X31]
	0x031E73E8 BL 0x31E1BDC
	0x031E73EC LDR X30, [X31 + 0x20]
	0x031E73F0 ADD X31, X31, 0x30
	0x031E73F4 RET
	0x031E73F8 SUB X31, X31, 0x30
	0x031E73FC STR X30, [X31 + 0x20]
	0x031E7400 LDR X8, [X1 + 0x10]
	0x031E7404 LDR V0, [X1]
	0x031E7408 ADD X0, X31, 0x0
	0x031E740C STR X8, [X31 + 0x10]
	0x031E7410 STR V0, [X31]
	0x031E7414 BL 0x31E1BDC
	0x031E7418 LDR X30, [X31 + 0x20]
	0x031E741C ADD X31, X31, 0x30
	0x031E7420 RET
	0x031E7424 B 0x31E1EE0
	0x031E7428 B 0x31E1EE0
	0x031E742C STR X30, [X31 - 0x10]!
	0x031E7430 CBZ X1, 0x31E7440
	0x031E7434 LDR X0, [X1 + 0x18]
	0x031E7438 LDR X30, [X31], #0x10
	0x031E743C RET

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x11F6000
	011 Move W8, [X20+331]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xF3A000
	018 Move X0, [X0+744]
	019 Call 0x1C17CF4
	020 Move X0, 0xF39000
	021 Move X0, [X0+4048]
	022 Call 0x1C17CF4
	023 Move X0, 0xF39000
	024 Move X0, [X0+4040]
	025 Call 0x1C17CF4
	026 Move X0, 0xF12000
	027 Move X0, [X0+1864]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+331], W8
	031 Move X8, [X19+56]
	032 Compare X8, 0
	033 JumpIfEqual {95}
	034 Move X9, 0xF39000
	035 Move X9, [X9+4040]
	036 Move X21, 0xF39000
	037 Move W20, [X8+24]
	038 Move X0, [X9]
	039 Move X21, [X21+4048]
	040 Call 0x1C17F10
	041 Move X2, [X21]
	042 Move W1, W20
	043 Move X21, X0
	044 Call List`1<Object>..ctor, X0, X1
	045 Move [X19+48], X21
	046 Compare W20, 0
	047 JumpIfEqual {95}
	048 Move X22, [X19+56]
	049 Compare X22, 0
	050 JumpIfEqual {105}
	051 Move X8, [X22+24]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X25, 0xF12000
	054 Move X26, 0xF3A000
	055 Move X25, [X25+1864]
	056 Move X26, [X26+744]
	057 Move X23, X31
	058 And X8, X8, 0
	059 Add X24, X22, 32
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X0, [X25]
	062 Move X21, [X24]
	063 Call 0x1C17F10
	064 Move X20, X0
	065 Call Value..ctor, X0
	066 Move X0, X21
	067 Move X1, X20
	068 Move X2, X31
	069 Call JsonUtility.FromJsonOverwrite, X0, X1
	070 Move X0, [X19+48]
	071 Compare X0, 0
	072 JumpIfEqual {105}
	073 Move W10, [X0+28]
	074 Move X8, [X0+16]
	075 Move X9, [X26]
	076 Add W10, W10, 1
	077 Move [X0+28], W10
	078 Compare X8, 0
	079 JumpIfEqual {105}
	080 NotImplemented "Instruction LDRSW not yet implemented."
	081 Move W11, [X8+24]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Add W9, W10, 1
	084 Add X8, X8, X10
	085 Move [X0+24], W9
	086 Move [X8+32], X20
	087 Move X8, [X9+32]
	088 Move X1, X20
	089 Move X8, [X8+192]
	090 Move X2, [X8+112]
	091 Call List`1<Object>.AddWithResize, X0, X1
	092 Move W8, [X22+24]
	093 Add X23, X23, 1
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X20, [X31+64]
	096 Move X19, [X31+72]
	097 Move X22, [X31+48]
	098 Move X21, [X31+56]
	099 Move X24, [X31+32]
	100 Move X23, [X31+40]
	101 Move X26, [X31+16]
	102 Move X25, [X31+24]
	103 Move X30, [X31+80]
	104 Return 
	105 Call 0x1C17F20
	106 Call 0x1C17F28

Method: System.Void DeserializeDictionary()

Disassembly:
	0x031E7440 BL 0x1C16F20
	0x031E7444 STR X30, [X31 - 0x10]!
	0x031E7448 CBZ X1, 0x31E7458
	0x031E744C LDR X0, [X1 + 0x18]
	0x031E7450 LDR X30, [X31], #0x10
	0x031E7454 RET
	0x031E7458 BL 0x1C16F20
	0x031E745C STR X30, [X31 - 0x10]!
	0x031E7460 CBZ X1, 0x31E7470
	0x031E7464 LDRB W0, [X1 + 0x20]
	0x031E7468 LDR X30, [X31], #0x10
	0x031E746C RET
	0x031E7470 BL 0x1C16F20
	0x031E7474 STR X30, [X31 - 0x10]!
	0x031E7478 CBZ X1, 0x31E7488
	0x031E747C LDRB W0, [X1 + 0x20]
	0x031E7480 LDR X30, [X31], #0x10
	0x031E7484 RET
	0x031E7488 BL 0x1C16F20
	0x031E748C STR X30, [X31 - 0x10]!
	0x031E7490 CBZ X1, 0x31E74A4
	0x031E7494 LDR V0, [X1 + 0x28]
	0x00000000 INVALID
	0x031E749C LDR X30, [X31], #0x10
	0x031E74A0 RET
	0x031E74A4 BL 0x1C16F20
	0x031E74A8 STR X30, [X31 - 0x10]!
	0x031E74AC CBZ X1, 0x31E74C0
	0x031E74B0 LDR V0, [X1 + 0x28]
	0x00000000 INVALID
	0x031E74B8 LDR X30, [X31], #0x10
	0x031E74BC RET
	0x031E74C0 BL 0x1C16F20
	0x031E74C4 STR X30, [X31 - 0x10]!
	0x031E74C8 CBZ X1, 0x31E74D8
	0x031E74CC LDR V0, [X1 + 0x28]
	0x031E74D0 LDR X30, [X31], #0x10
	0x031E74D4 RET
	0x031E74D8 BL 0x1C16F20
	0x031E74DC STR X30, [X31 - 0x10]!
	0x031E74E0 CBZ X1, 0x31E74F0
	0x031E74E4 LDR V0, [X1 + 0x28]
	0x031E74E8 LDR X30, [X31], #0x10
	0x031E74EC RET
	0x031E74F0 BL 0x1C16F20
	0x031E74F4 MOV X0, X1
	0x031E74F8 B 0x31E2A74
	0x031E74FC MOV X0, X1
	0x031E7500 B 0x31E2A74
	0x031E7504 STR X30, [X31 - 0x10]!
	0x031E7508 CBZ X1, 0x31E752C
	0x031E750C LDR V0, [X1 + 0x28]
	0x031E7510 MOVZ X8, 0x7FF00000
	0x031E7514 FMOV D1, X8
	0x031E7518 FCVTZS W8, D0
	0x031E751C FCMP D0, D1
	0x031E7520 CSEL W0, W31, W8, EQ
	0x031E7524 LDR X30, [X31], #0x10
	0x031E7528 RET
	0x031E752C BL 0x1C16F20
	0x031E7530 STR X30, [X31 - 0x10]!
	0x031E7534 CBZ X1, 0x31E7558
	0x031E7538 LDR V0, [X1 + 0x28]
	0x031E753C MOVZ X8, 0x7FF00000
	0x031E7540 FMOV D1, X8
	0x031E7544 FCVTZS W8, D0
	0x031E7548 FCMP D0, D1
	0x031E754C CSEL W0, W31, W8, EQ
	0x031E7550 LDR X30, [X31], #0x10
	0x031E7554 RET
	0x031E7558 BL 0x1C16F20
	0x031E755C STR X30, [X31 - 0x10]!
	0x031E7560 CBZ X1, 0x31E7588
	0x031E7564 LDR V0, [X1 + 0x28]
	0x031E7568 MOVZ X8, 0x7FF00000
	0x031E756C FMOV D1, X8
	0x031E7570 MOVZ W9, 0x80000000
	0x031E7574 FCVTZS W8, D0
	0x031E7578 FCMP D0, D1
	0x031E757C CSEL W0, W9, W8, EQ

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11F6000
	009 Move W8, [X20+332]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xF39000
	016 Move X0, [X0+4064]
	017 Call 0x1C17CF4
	018 Move X0, 0xF39000
	019 Move X0, [X0+3976]
	020 Call 0x1C17CF4
	021 Move X0, 0xF39000
	022 Move X0, [X0+4056]
	023 Call 0x1C17CF4
	024 Move X0, 0xF12000
	025 Move X0, [X0+1864]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+332], W8
	029 Move X8, [X19+72]
	030 Compare X8, 0
	031 JumpIfEqual {80}
	032 Move X9, 0xF39000
	033 Move X9, [X9+4056]
	034 Move X21, 0xF39000
	035 Move X20, [X8+24]
	036 Move X0, [X9]
	037 Move X21, [X21+4064]
	038 Call 0x1C17F10
	039 Move X2, [X21]
	040 Move W1, W20
	041 Move X21, X0
	042 Call Dictionary`2<Object, Object>..ctor, X0, X1
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move [X19+64], X21
	045 Move X23, 0xF12000
	046 Move X24, 0xF39000
	047 Move X23, [X23+1864]
	048 Move X24, [X24+3976]
	049 Move X21, X31
	050 And X22, X20, 0
	051 Move X0, [X23]
	052 Call 0x1C17F10
	053 Move X20, X0
	054 Call Value..ctor, X0
	055 Move X8, [X19+80]
	056 Compare X8, 0
	057 JumpIfEqual {88}
	058 Move W9, [X8+24]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Add X8, X8, X21
	061 Move X0, [X8+32]
	062 Move X1, X20
	063 Move X2, X31
	064 Call JsonUtility.FromJsonOverwrite, X0, X1
	065 Move X8, [X19+72]
	066 Compare X8, 0
	067 JumpIfEqual {88}
	068 Move W9, [X8+24]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X0, [X19+64]
	071 Compare X0, 0
	072 JumpIfEqual {88}
	073 Add X8, X8, X21
	074 Move X1, [X8+32]
	075 Move X3, [X24]
	076 Move X2, X20
	077 Call Dictionary`2<Object, Object>.set_Item, X0, X1, X2
	078 Add X21, X21, 1
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X20, [X31+48]
	081 Move X19, [X31+56]
	082 Move X22, [X31+32]
	083 Move X21, [X31+40]
	084 Move X24, [X31+16]
	085 Move X23, [X31+24]
	086 Move X30, [X31+64]
	087 Return 
	088 Call 0x1C17F20
	089 Call 0x1C17F28

Method: mixpanel.Value Deserialize(System.String json)

Disassembly:
	0x031D4590 STP X30, X25, [X31 + 0x20]
	0x031D4594 STP X24, X23, [X31 + 0x30]
	0x031D4598 STP X22, X21, [X31 + 0x40]
	0x031D459C STP X20, X19, [X31 + 0x50]
	0x031D45A0 ADRP X21, 0x1208000
	0x031D45A4 LDRB W8, [X21 + 0x96]
	0x031D45A8 MOV X19, X1
	0x031D45AC MOV X20, X0
	0x031D45B0 TBNZ X8, 0x0, 0x31D461C
	0x031D45B4 ADRP X0, 0xF4B000
	0x031D45B8 LDR X0, [X0 + 0xF80]
	0x031D45BC BL 0x1C16CF4
	0x031D45C0 ADRP X0, 0xF4C000
	0x031D45C4 LDR X0, [X0 + 0x48]
	0x031D45C8 BL 0x1C16CF4
	0x031D45CC ADRP X0, 0xF4B000
	0x031D45D0 LDR X0, [X0 + 0xF88]
	0x031D45D4 BL 0x1C16CF4
	0x031D45D8 ADRP X0, 0xF4C000
	0x031D45DC LDR X0, [X0 + 0x50]
	0x031D45E0 BL 0x1C16CF4
	0x031D45E4 ADRP X0, 0xF4C000
	0x031D45E8 LDR X0, [X0 + 0x58]
	0x031D45EC BL 0x1C16CF4
	0x031D45F0 ADRP X0, 0xF4C000
	0x031D45F4 LDR X0, [X0 + 0x60]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1209000
	006 Move X21, 0xF4C000
	007 Move W8, [X20+333]
	008 Move X21, [X21+3952]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF4C000
	015 Move X0, [X0+3952]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+333], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X2, X31
	023 Move X20, X0
	024 Call StringReader..ctor, X0, X1
	025 Move X0, X20
	026 Call Value.NextToken, X0
	027 Move W1, W0
	028 Move X0, X20
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Value.ParseByToken, X0, X1
	034 Return X0

Method: mixpanel.Value ParseValue(System.IO.StringReader reader)

Disassembly:
	0x031E7580 LDR X30, [X31], #0x10
	0x031E7584 RET
	0x031E7588 BL 0x1C16F20
	0x031E758C STR X30, [X31 - 0x10]!
	0x031E7590 CBZ X1, 0x31E75B8
	0x031E7594 LDR V0, [X1 + 0x28]
	0x031E7598 MOVZ X8, 0x7FF00000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Value.NextToken, X0
	005 Move W1, W0
	006 Move X0, X19
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Call Value.ParseByToken, X0, X1
	010 Return X0

Method: mixpanel.Value ParseByToken(System.IO.StringReader reader, mixpanel.Value/Token token)

Disassembly:
	0x031E7754 STR X30, [X31 - 0x10]!
	0x031E7758 BL 0x1C16F20
	0x031E775C STR X30, [X31 - 0x10]!
	0x031E7760 CBZ X1, 0x31E7774
	0x031E7764 LDR X0, [X1 + 0x18]
	0x031E7768 MOV X1, X31
	0x031E776C LDR X30, [X31], #0x10
	0x031E7770 B 0x3376F6C
	0x031E7774 BL 0x1C16F20
	0x031E7778 STR X30, [X31 - 0x10]!
	0x031E777C CBZ X1, 0x31E7790
	0x031E7780 LDR X0, [X1 + 0x18]
	0x031E7784 MOV X1, X31
	0x031E7788 LDR X30, [X31], #0x10
	0x031E778C B 0x3376F6C
	0x031E7790 BL 0x1C16F20
	0x031E7794 CBZ X1, 0x31E77A0
	0x031E7798 MOV X0, X1
	0x031E779C B 0x31DAF68
	0x031E77A0 STR X30, [X31 - 0x10]!
	0x031E77A4 BL 0x1C16F20
	0x031E77A8 CBZ X1, 0x31E77B4
	0x031E77AC MOV X0, X1
	0x031E77B0 B 0x31DAF68
	0x031E77B4 STR X30, [X31 - 0x10]!
	0x031E77B8 BL 0x1C16F20
	0x031E77BC CBZ X1, 0x31E77C8
	0x031E77C0 MOV X0, X1
	0x031E77C4 B 0x31DB090
	0x031E77C8 STR X30, [X31 - 0x10]!
	0x031E77CC BL 0x1C16F20
	0x031E77D0 CBZ X1, 0x31E77DC
	0x031E77D4 MOV X0, X1
	0x031E77D8 B 0x31DB090
	0x031E77DC STR X30, [X31 - 0x10]!
	0x031E77E0 BL 0x1C16F20
	0x031E77E4 STR X30, [X31 - 0x10]!
	0x031E77E8 CBZ X1, 0x31E7810
	0x031E77EC LDR V0, [X1 + 0x28]
	0x031E77F0 MOVZ X8, 0x7FF00000
	0x031E77F4 FMOV D1, X8
	0x031E77F8 MOVZ X9, 0x80000000
	0x031E77FC FCVTZS X8, D0
	0x031E7800 FCMP D0, D1
	0x031E7804 CSEL X0, X9, X8, EQ
	0x031E7808 LDR X30, [X31], #0x10
	0x031E780C RET
	0x031E7810 BL 0x1C16F20
	0x031E7814 STR X30, [X31 - 0x10]!
	0x031E7818 CBZ X1, 0x31E7840
	0x031E781C LDR V0, [X1 + 0x28]
	0x031E7820 MOVZ X8, 0x7FF00000
	0x031E7824 FMOV D1, X8
	0x031E7828 MOVZ X9, 0x80000000
	0x031E782C FCVTZS X8, D0
	0x031E7830 FCMP D0, D1

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Subtract W8, W1, 1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X9, -40173568
	007 Add X9, X9, 1023
	008 NotImplemented "Instruction ADR not yet implemented."
	009 Move W11, [X9]
	010 Add X10, X10, X11
	011 Move X19, X0
	012 CallNoReturn X10
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Add X31, X31, 32
	016 Call Value.get_Null
	017 Return X0
	018 Compare X19, 0
	019 JumpIfEqual {70}
	020 Move X8, [X19]
	021 Move X0, X19
	022 Move X9, [X8+456]
	023 Move X1, [X8+464]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X0, X19
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Add X31, X31, 32
	029 Call Value.ParseObject, X0
	030 Return X0
	031 Move W0, 1
	032 Compare X19, 0
	033 JumpIfEqual {70}
	034 Move X8, [X19]
	035 Move X0, X19
	036 Move X9, [X8+456]
	037 Move X1, [X8+464]
	038 NotImplemented "Instruction BLR not yet implemented."
	039 Move X0, X19
	040 Move X30, [X31+16]
	041 Move X19, [X31+24]
	042 Add X31, X31, 32
	043 Call Value.ParseArray, X0
	044 Return X0
	045 Move X0, X19
	046 Call Value.ParseString, X0
	047 Move X30, [X31+16]
	048 Move X19, [X31+24]
	049 Add X31, X31, 32
	050 Call Value.op_Implicit, X0
	051 Return X0
	052 Move X0, X19
	053 Move [X31+8], X31
	054 Call Value.NextWord, X0
	055 Add X1, X31, 8
	056 Move X2, X31
	057 Call Double.TryParse, X0, X1
	058 Move V0, [X31+8]
	059 Call Value.op_Implicit, V0
	060 Move X30, [X31+16]
	061 Move X19, [X31+24]
	062 Add X31, X31, 32
	063 Return X0
	064 Move W0, W31
	065 Move X30, [X31+16]
	066 Move X19, [X31+24]
	067 Add X31, X31, 32
	068 Call Value.op_Implicit, X0
	069 Return X0
	070 Call 0x1C17F20

Method: System.String ParseString(System.IO.StringReader reader)

Disassembly:
	0x031E7834 CSEL X0, X9, X8, EQ
	0x031E7838 LDR X30, [X31], #0x10
	0x031E783C RET
	0x031E7840 BL 0x1C16F20
	0x031E7844 CBZ X1, 0x31E7850
	0x031E7848 MOV X0, X1
	0x031E784C B 0x31DB22C
	0x031E7850 STR X30, [X31 - 0x10]!
	0x031E7854 BL 0x1C16F20
	0x031E7858 CBZ X1, 0x31E7864
	0x031E785C MOV X0, X1
	0x031E7860 B 0x31DB22C
	0x031E7864 STR X30, [X31 - 0x10]!
	0x031E7868 BL 0x1C16F20
	0x031E786C STR X30, [X31 - 0x10]!
	0x031E7870 CBZ X1, 0x31E7888
	0x031E7874 MOV X0, X1
	0x031E7878 BL 0x31DB4BC
	0x031E787C AND X0, X0, 0x0
	0x031E7880 LDR X30, [X31], #0x10
	0x031E7884 RET
	0x031E7888 BL 0x1C16F20
	0x031E788C STR X30, [X31 - 0x10]!
	0x031E7890 CBZ X1, 0x31E78A8
	0x031E7894 MOV X0, X1
	0x031E7898 BL 0x31DB4BC
	0x031E789C AND X0, X0, 0x0
	0x031E78A0 LDR X30, [X31], #0x10
	0x031E78A4 RET
	0x031E78A8 BL 0x1C16F20
	0x031E78AC CBZ X1, 0x31E78B8
	0x031E78B0 MOV X0, X1
	0x031E78B4 B 0x31DB790
	0x031E78B8 STR X30, [X31 - 0x10]!
	0x031E78BC BL 0x1C16F20
	0x031E78C0 CBZ X1, 0x31E78CC
	0x031E78C4 MOV X0, X1
	0x031E78C8 B 0x31DB790
	0x031E78CC STR X30, [X31 - 0x10]!
	0x031E78D0 BL 0x1C16F20
	0x031E78D4 CBZ X1, 0x31E78E0
	0x031E78D8 MOV X0, X1
	0x031E78DC B 0x31DB92C
	0x031E78E0 STR X30, [X31 - 0x10]!
	0x031E78E4 BL 0x1C16F20
	0x031E78E8 CBZ X1, 0x31E78F4
	0x031E78EC MOV X0, X1
	0x031E78F0 B 0x31DB92C
	0x031E78F4 STR X30, [X31 - 0x10]!
	0x031E78F8 BL 0x1C16F20
	0x031E78FC CBZ X1, 0x31E7908
	0x031E7900 MOV X0, X1
	0x031E7904 B 0x31DBB30
	0x031E7908 STR X30, [X31 - 0x10]!
	0x031E790C BL 0x1C16F20
	0x031E7910 CBZ X1, 0x31E791C
	0x031E7914 MOV X0, X1
	0x031E7918 B 0x31DBB30
	0x031E791C STR X30, [X31 - 0x10]!
	0x031E7920 BL 0x1C16F20
	0x031E7924 CBZ X1, 0x31E7930
	0x031E7928 MOV X0, X1
	0x031E792C B 0x31DBDA4
	0x031E7930 STR X30, [X31 - 0x10]!
	0x031E7934 BL 0x1C16F20
	0x031E7938 CBZ X1, 0x31E7944
	0x031E793C MOV X0, X1
	0x031E7940 B 0x31DBDA4
	0x031E7944 STR X30, [X31 - 0x10]!
	0x031E7948 BL 0x1C16F20
	0x031E794C SUB X31, X31, 0x30
	0x031E7950 STP X30, X19, [X31 + 0x20]
	0x031E7954 MOV X0, X1
	0x031E7958 MOV X19, X8
	0x031E795C ADD X8, X31, 0x8
	0x031E7960 BL 0x31E5788
	0x031E7964 LDR X8, [X31 + 0x18]
	0x031E7968 LDUR V0, [X31 + 0x8]
	0x031E796C STR X8, [X19 + 0x10]
	0x031E7970 STR V0, [X19]
	0x031E7974 LDP X30, X19, [X31 + 0x20]
	0x031E7978 ADD X31, X31, 0x30
	0x031E797C RET
	0x031E7980 SUB X31, X31, 0x30
	0x031E7984 STP X30, X19, [X31 + 0x20]
	0x031E7988 MOV X0, X1
	0x031E798C MOV X19, X8
	0x031E7990 ADD X8, X31, 0x8
	0x031E7994 BL 0x31E5788
	0x031E7998 LDR X8, [X31 + 0x18]
	0x031E799C LDUR V0, [X31 + 0x8]
	0x031E79A0 STR X8, [X19 + 0x10]
	0x031E79A4 STR V0, [X19]
	0x031E79A8 LDP X30, X19, [X31 + 0x20]
	0x031E79AC ADD X31, X31, 0x30
	0x031E79B0 RET
	0x031E79B4 CBZ X1, 0x31E79C0
	0x031E79B8 MOV X0, X1
	0x031E79BC B 0x31DC278
	0x031E79C0 STR X30, [X31 - 0x10]!
	0x031E79C4 BL 0x1C16F20
	0x031E79C8 CBZ X1, 0x31E79D4
	0x031E79CC MOV X0, X1
	0x031E79D0 B 0x31DC278
	0x031E79D4 STR X30, [X31 - 0x10]!
	0x031E79D8 BL 0x1C16F20
	0x031E79DC RET
	0x031E79E0 MOV X2, X31
	0x031E79E4 B 0x3227C5C
	0x031E79E8 STR X30, [X31 - 0x20]!
	0x031E79EC STP X20, X19, [X31 + 0x10]
	0x031E79F0 MOV W19, W1
	0x031E79F4 MOV X1, X31
	0x031E79F8 MOV X20, X0
	0x031E79FC BL 0x33BDD8C
	0x031E7A00 STRB W19, [X20 + 0x10]
	0x031E7A04 STR X31, [X20 + 0x18]
	0x031E7A08 LDP X20, X19, [X31 + 0x10]
	0x031E7A0C LDR X30, [X31], #0x20
	0x031E7A10 RET
	0x031E7A14 STP X30, X21, [X31 - 0x20]!
	0x031E7A18 STP X20, X19, [X31 + 0x10]
	0x031E7A1C MOV W20, W1
	0x031E7A20 MOV X1, X31
	0x031E7A24 MOV X19, X2
	0x031E7A28 MOV X21, X0
	0x031E7A2C BL 0x33BDD8C
	0x031E7A30 STRB W20, [X21 + 0x10]
	0x031E7A34 STR X19, [X21 + 0x18]
	0x031E7A38 LDP X20, X19, [X31 + 0x10]
	0x031E7A3C LDP X30, X21, [X31], #0x20
	0x031E7A40 RET
	0x031E7A44 STR X30, [X31 - 0x30]!
	0x031E7A48 STP X22, X21, [X31 + 0x10]
	0x031E7A4C STP X20, X19, [X31 + 0x20]
	0x031E7A50 ADRP X21, 0x11F5000
	0x031E7A54 LDRB W8, [X21 + 0x15D]
	0x031E7A58 MOV X20, X1
	0x031E7A5C MOV X19, X0
	0x031E7A60 TBNZ X8, 0x0, 0x31E7A78
	0x031E7A64 ADRP X0, 0xF0C000
	0x031E7A68 LDR X0, [X0 + 0x618]
	0x031E7A6C BL 0x1C16CF4
	0x031E7A70 MOVZ W8, 0x1
	0x031E7A74 STRB W8, [X21 + 0x15D]
	0x031E7A78 MOV X0, X19
	0x031E7A7C MOV X1, X31
	0x031E7A80 BL 0x33BDD8C
	0x031E7A84 CBZ X20, 0x31E7B5C
	0x031E7A88 LDR W11, [X20 + 0x18]
	0x031E7A8C CBZ W11, 0x31E7B58
	0x031E7A90 LDRB W8, [X20 + 0x20]
	0x031E7A94 CMP W11, 0x1

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x11F6000
	012 Move X22, 0xF0D000
	013 Move W8, [X20+334]
	014 Move X22, [X22+2288]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0xF16000
	021 Move X0, [X0+2536]
	022 Call 0x1C17CF4
	023 Move X0, 0xF0D000
	024 Move X0, [X0+2288]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+334], W8
	028 Move X0, [X22]
	029 Call 0x1C17F10
	030 Move X1, X31
	031 Move X20, X0
	032 Call StringBuilder..ctor, X0
	033 Compare X19, 0
	034 JumpIfEqual {163}
	035 Move X8, [X19]
	036 Move X0, X19
	037 Move X9, [X8+456]
	038 Move X1, [X8+464]
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move X8, [X19]
	041 Move X0, X19
	042 Move X9, [X8+440]
	043 Move X1, [X8+448]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Add W31, W0, 1
	046 Move X23, 0xF16000
	047 Move X23, [X23+2536]
	048 Move X25, 0x2001
	049 Move X26, -40173568
	050 Move W24, 1
	051 NotImplemented "Instruction MOVK not yet implemented."
	052 Add X26, X26, 1034
	053 Move X0, X19
	054 Call Value.NextChar, X0
	055 And W8, W0, 0xFFFF
	056 NotImplemented "Instruction CMP not yet implemented."
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Compare X20, 0
	059 JumpIfEqual {163}
	060 Move W1, W0
	061 Move X8, [X19]
	062 Move X0, X19
	063 Move X9, [X8+440]
	064 Move X1, [X8+448]
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Add W31, W0, 1
	067 Move X0, X19
	068 Call Value.NextChar, X0
	069 And W8, W0, 0xFFFF
	070 Move W1, W0
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Subtract W8, W8, 34
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction LSLV not yet implemented."
	075 And X31, X8, X25
	076 Compare X20, 0
	077 JumpIfEqual {163}
	078 Move X0, X20
	079 Move X2, X31
	080 Call StringBuilder.Append, X0, X1
	081 Move X8, [X19]
	082 Move X0, X19
	083 Move X9, [X8+440]
	084 Move X1, [X8+448]
	085 NotImplemented "Instruction BLR not yet implemented."
	086 Add W31, W0, 1
	087 NotImplemented "Instruction CMP not yet implemented."
	088 And W8, W1, 0xFFFF
	089 NotImplemented "Instruction CMP not yet implemented."
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Compare X20, 0
	092 JumpIfEqual {163}
	093 Move W1, 12
	094 And W8, W1, 0xFFFF
	095 Subtract W8, W8, 110
	096 NotImplemented "Instruction CMP not yet implemented."
	097 NotImplemented "Instruction ADR not yet implemented."
	098 Move W10, [X26]
	099 Add X9, X9, X10
	100 CallNoReturn X9
	101 Compare X20, 0
	102 JumpIfEqual {163}
	103 Move W1, 10
	104 Compare X20, 0
	105 JumpIfEqual {163}
	106 Move W1, 8
	107 Compare X20, 0
	108 JumpIfEqual {163}
	109 Move W1, 13
	110 Compare X20, 0
	111 JumpIfEqual {163}
	112 Move W1, 9
	113 Move X0, [X22]
	114 Call 0x1C17F10
	115 Move X1, X31
	116 Move X21, X0
	117 Call StringBuilder..ctor, X0
	118 Move W27, 4
	119 Move X0, X19
	120 Call Value.NextChar, X0
	121 Compare X21, 0
	122 JumpIfEqual {163}
	123 Move W1, W0
	124 Move X0, X21
	125 Move X2, X31
	126 Call StringBuilder.Append, X0, X1
	127 Subtract W27, W27, 1
	128 Move X8, [X21]
	129 Move X0, X21
	130 Move X9, [X8+360]
	131 Move X1, [X8+368]
	132 NotImplemented "Instruction BLR not yet implemented."
	133 Move X8, [X23]
	134 Move X21, X0
	135 Move W9, [X8+224]
	136 Compare W9, 0
	137 JumpIfNotEqual {140}
	138 Move X0, X8
	139 Call 0x1C17DFC
	140 Move W1, 16
	141 Move X0, X21
	142 Move X2, X31
	143 Call Convert.ToInt32, X0, X1
	144 Compare X20, 0
	145 JumpIfNotEqual {60}
	146 Compare X20, 0
	147 JumpIfEqual {163}
	148 Move X8, [X20]
	149 Move X0, X20
	150 Move X20, [X31+64]
	151 Move X19, [X31+72]
	152 Move X22, [X31+48]
	153 Move X21, [X31+56]
	154 Move X2, [X8+360]
	155 Move X1, [X8+368]
	156 Move X24, [X31+32]
	157 Move X23, [X31+40]
	158 Move X26, [X31+16]
	159 Move X25, [X31+24]
	160 Move X30, [X31+80]
	161 Move X27, [X31+88]
	162 CallNoReturn X2
	163 Call 0x1C17F20

Method: System.Double ParseNumber(System.IO.StringReader reader)

Disassembly:
	0x031E7A98 STRB W8, [X19 + 0x10]
	0x031E7A9C B.EQ 0x31E7B58
	0x031E7AA0 LDRB W8, [X20 + 0x21]
	0x031E7AA4 SUBS W9, W8, 0x81
	0x031E7AA8 B.CS 0x31E7AC0
	0x031E7AAC CMP W8, 0x80
	0x031E7AB0 B.EQ 0x31E7B60
	0x031E7AB4 MOVZ W22, 0x2
	0x031E7AB8 MOV W21, W8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31+8], X31
	003 Call Value.NextWord, X0
	004 Add X1, X31, 8
	005 Move X2, X31
	006 Call Double.TryParse, X0, X1
	007 Move V0, [X31+8]
	008 Move X30, [X31+16]
	009 Return V0

Method: mixpanel.Value ParseArray(System.IO.StringReader reader)

Disassembly:
	0x031E7CDC RET
	0x031E7CE0 LDRB W0, [X0 + 0x10]
	0x031E7CE4 RET
	0x031E7CE8 LDR X8, [X0 + 0x18]
	0x031E7CEC CBZ X8, 0x31E7CF8
	0x031E7CF0 LDR W0, [X8 + 0x18]
	0x031E7CF4 RET
	0x031E7CF8 MOV W0, W31
	0x031E7CFC RET
	0x031E7D00 STR X30, [X31 - 0x20]!
	0x031E7D04 STP X20, X19, [X31 + 0x10]
	0x031E7D08 ADRP X20, 0x11F5000
	0x031E7D0C LDRB W8, [X20 + 0x15E]
	0x031E7D10 MOV X19, X0
	0x031E7D14 TBNZ X8, 0x0, 0x31E7D2C
	0x031E7D18 ADRP X0, 0xF0C000
	0x031E7D1C LDR X0, [X0 + 0x618]
	0x031E7D20 BL 0x1C16CF4
	0x031E7D24 MOVZ W8, 0x1
	0x031E7D28 STRB W8, [X20 + 0x15E]
	0x031E7D2C LDR X0, [X19 + 0x18]
	0x031E7D30 CBNZ X0, 0x31E7D48
	0x031E7D34 LDR X8, [X19]
	0x031E7D38 MOV X0, X19
	0x031E7D3C LDP X9, X1, [X8 + 0x178]
	0x031E7D40 BLR X9
	0x031E7D44 LDR X0, [X19 + 0x18]
	0x031E7D48 CBZ X0, 0x31E7D80
	0x031E7D4C MOV X1, X31
	0x031E7D50 BL 0x33A01F0
	0x031E7D54 CBZ X0, 0x31E7D74
	0x031E7D58 ADRP X8, 0xF0C000
	0x031E7D5C LDR X8, [X8 + 0x618]
	0x031E7D60 MOV X19, X0
	0x031E7D64 LDR X20, [X8]
	0x031E7D68 MOV X1, X20
	0x031E7D6C BL 0x1C16E00
	0x031E7D70 CBZ X0, 0x31E7D84
	0x031E7D74 LDP X20, X19, [X31 + 0x10]
	0x031E7D78 LDR X30, [X31], #0x20
	0x031E7D7C RET
	0x031E7D80 BL 0x1C16F20
	0x031E7D84 MOV X0, X19
	0x031E7D88 MOV X1, X20
	0x031E7D8C BL 0x1C171E0
	0x031E7D90 STR X30, [X31 - 0x30]!
	0x031E7D94 STP X22, X21, [X31 + 0x10]
	0x031E7D98 STP X20, X19, [X31 + 0x20]
	0x031E7D9C ADRP X21, 0x11F5000
	0x031E7DA0 LDRB W8, [X21 + 0x15F]
	0x031E7DA4 MOV X20, X1
	0x031E7DA8 MOV X19, X0
	0x031E7DAC TBNZ X8, 0x0, 0x31E7DC4
	0x031E7DB0 ADRP X0, 0xF0C000
	0x031E7DB4 LDR X0, [X0 + 0x618]
	0x031E7DB8 BL 0x1C16CF4
	0x031E7DBC MOVZ W8, 0x1
	0x031E7DC0 STRB W8, [X21 + 0x15F]
	0x031E7DC4 CBZ X20, 0x31E7E1C
	0x031E7DC8 MOV X0, X20
	0x031E7DCC MOV X1, X31
	0x031E7DD0 BL 0x33A01F0
	0x031E7DD4 CBZ X0, 0x31E7E18
	0x031E7DD8 ADRP X22, 0xF0C000
	0x031E7DDC LDR X22, [X22 + 0x618]
	0x031E7DE0 MOV X20, X0
	0x031E7DE4 LDR X21, [X22]
	0x031E7DE8 MOV X1, X21
	0x031E7DEC BL 0x1C16E00
	0x031E7DF0 CBZ X0, 0x31E7E2C
	0x031E7DF4 STR X0, [X19 + 0x18]
	0x031E7DF8 LDR X19, [X22]
	0x031E7DFC MOV X0, X20
	0x031E7E00 MOV X1, X19
	0x031E7E04 BL 0x1C16E00
	0x031E7E08 CBNZ X0, 0x31E7E1C
	0x031E7E0C MOV X0, X20
	0x031E7E10 MOV X1, X19
	0x031E7E14 BL 0x1C171E0
	0x031E7E18 STR X31, [X19 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11F6000
	007 Move X21, 0xF39000
	008 Move X20, 0xF3A000
	009 Move W8, [X22+335]
	010 Move X21, [X21+4040]
	011 Move X20, [X20+2912]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xF3A000
	018 Move X0, [X0+744]
	019 Call 0x1C17CF4
	020 Move X0, 0xF3A000
	021 Move X0, [X0+2912]
	022 Call 0x1C17CF4
	023 Move X0, 0xF39000
	024 Move X0, [X0+4040]
	025 Call 0x1C17CF4
	026 Move X0, 0xF12000
	027 Move X0, [X0+1864]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+335], W8
	031 Move X0, [X21]
	032 Move X21, 0xF3A000
	033 Move X21, [X21+744]
	034 Call 0x1C17F10
	035 Move X1, [X20]
	036 Move X20, X0
	037 Call List`1<Object>..ctor, X0
	038 Move X0, X19
	039 Call Value.NextToken, X0
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W1, W0
	042 Compare W0, 0
	043 JumpIfEqual {69}
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X0, X19
	046 Call Value.ParseByToken, X0, X1
	047 Compare X20, 0
	048 JumpIfEqual {84}
	049 Move W10, [X20+28]
	050 Move X8, [X20+16]
	051 Move X9, [X21]
	052 Add W10, W10, 1
	053 Move [X20+28], W10
	054 Compare X8, 0
	055 JumpIfEqual {84}
	056 NotImplemented "Instruction LDRSW not yet implemented."
	057 Move W11, [X8+24]
	058 Move X1, X0
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Add W9, W10, 1
	061 Add X8, X8, X10
	062 Move [X20+24], W9
	063 Move [X8+32], X1
	064 Move X8, [X9+32]
	065 Move X0, X20
	066 Move X8, [X8+192]
	067 Move X2, [X8+112]
	068 Call List`1<Object>.AddWithResize, X0, X1
	069 Move X0, X31
	070 Move X8, 0xF12000
	071 Move X8, [X8+1864]
	072 Move X0, [X8]
	073 Call 0x1C17F10
	074 Move X1, X20
	075 Move X19, X0
	076 Call Value..ctor, X0, X1
	077 Move X0, X19
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X30, [X31+48]
	083 Return X0
	084 Call 0x1C17F20

Method: mixpanel.Value ParseObject(System.IO.StringReader reader)

Disassembly:
	0x031E7ABC B 0x31E7AF0
	0x031E7AC0 MOV W21, W31
	0x031E7AC4 SUB X10, X8, 0x80
	0x031E7AC8 SUB W11, W11, 0x2
	0x031E7ACC ADD X12, X20, 0x22
	0x031E7AD0 CMP W11, W9
	0x031E7AD4 B.LS 0x31E7B58
	0x031E7AD8 LDRB W13, [X12], #0x1
	0x031E7ADC SUBS X10, X10, 0x1
	0x031E7AE0 BFM W13, W21, 0x18, 0x17
	0x031E7AE4 MOV W21, W13
	0x031E7AE8 B.NE 0x31E7AD0
	0x031E7AEC SUB W22, W8, 0x7E
	0x031E7AF0 ADRP X8, 0xF0C000
	0x031E7AF4 LDR X8, [X8 + 0x618]
	0x031E7AF8 MOV W1, W21
	0x031E7AFC LDR X0, [X8]
	0x031E7B00 BL 0x1C16D6C
	0x031E7B04 MOV X2, X0
	0x031E7B08 STR X0, [X19 + 0x18]
	0x031E7B0C MOV X0, X20
	0x031E7B10 MOV W1, W22
	0x031E7B14 MOV W3, W31
	0x031E7B18 MOV W4, W21
	0x031E7B1C MOV X5, X31
	0x031E7B20 BL 0x33A8A9C
	0x031E7B24 LDRB W8, [X19 + 0x10]
	0x031E7B28 TBZ X8, 0x5, 0x31E7B48
	0x031E7B2C STR W31, [X31 + 0xC]
	0x031E7B30 LDR X1, [X19 + 0x18]
	0x031E7B34 CBZ X1, 0x31E7B5C
	0x031E7B38 LDR W3, [X1 + 0x18]
	0x031E7B3C ADD X2, X31, 0xC
	0x031E7B40 MOV X0, X19
	0x031E7B44 BL 0x31E7BA8
	0x031E7B48 LDP X20, X19, [X31 + 0x20]
	0x031E7B4C LDP X22, X21, [X31 + 0x10]
	0x031E7B50 LDR X30, [X31], #0x30
	0x031E7B54 RET
	0x031E7B58 BL 0x1C16F28
	0x031E7B5C BL 0x1C16F20
	0x031E7B60 ADRP X0, 0xF0C000
	0x031E7B64 LDR X0, [X0 + 0xB40]
	0x031E7B68 BL 0x1C16D08
	0x031E7B6C BL 0x1C16F10
	0x031E7B70 MOV X19, X0
	0x031E7B74 ADRP X0, 0xF39000
	0x031E7B78 LDR X0, [X0 + 0xB88]
	0x031E7B7C BL 0x1C16D08
	0x031E7B80 MOV X1, X0
	0x031E7B84 MOV X0, X19
	0x031E7B88 MOV X2, X31
	0x031E7B8C BL 0x3379A44
	0x031E7B90 ADRP X0, 0xF39000
	0x031E7B94 LDR X0, [X0 + 0xB90]
	0x031E7B98 BL 0x1C16D08
	0x031E7B9C MOV X1, X0
	0x031E7BA0 MOV X0, X19
	0x031E7BA4 BL 0x1C16DEC
	0x031E7BA8 SUB X31, X31, 0x60
	0x031E7BAC STR X30, [X31 + 0x10]
	0x031E7BB0 STP X26, X25, [X31 + 0x20]
	0x031E7BB4 STP X24, X23, [X31 + 0x30]
	0x031E7BB8 STP X22, X21, [X31 + 0x40]
	0x031E7BBC STP X20, X19, [X31 + 0x50]
	0x031E7BC0 ADRP X23, 0x11F5000
	0x031E7BC4 LDRB W8, [X23 + 0x162]
	0x031E7BC8 MOV W22, W3
	0x031E7BCC MOV X19, X2
	0x031E7BD0 MOV X20, X1
	0x031E7BD4 MOV X21, X0
	0x031E7BD8 TBNZ X8, 0x0, 0x31E7BF0
	0x031E7BDC ADRP X0, 0xF39000
	0x031E7BE0 LDR X0, [X0 + 0xB98]
	0x031E7BE4 BL 0x1C16CF4
	0x031E7BE8 MOVZ W8, 0x1
	0x031E7BEC STRB W8, [X23 + 0x162]
	0x031E7BF0 STRB W31, [X31 + 0x1C]
	0x031E7BF4 STR W31, [X31 + 0x18]
	0x031E7BF8 STR X31, [X31 + 0x8]
	0x031E7BFC LDR W8, [X19]
	0x031E7C00 SUB W23, W22, 0x1
	0x031E7C04 CMP W8, W23
	0x031E7C08 B.GE 0x31E7CA8
	0x031E7C0C ADRP X24, 0xF39000
	0x031E7C10 LDR X24, [X24 + 0xB98]
	0x031E7C14 ADD X3, X31, 0x1C
	0x031E7C18 ADD X4, X31, 0x18
	0x031E7C1C ADD X5, X31, 0x8
	0x031E7C20 MOV X1, X20
	0x031E7C24 MOV X2, X19
	0x031E7C28 BL 0x31E85E0
	0x031E7C2C LDRB W25, [X31 + 0x1C]
	0x031E7C30 CBZ W25, 0x31E7C6C
	0x031E7C34 LDR X0, [X24]
	0x031E7C38 LDR X26, [X31 + 0x8]
	0x031E7C3C BL 0x1C16F10
	0x031E7C40 MOV X1, X31
	0x031E7C44 MOV X22, X0
	0x031E7C48 BL 0x33BDD8C
	0x031E7C4C MOV X0, X21
	0x031E7C50 MOV X1, X22
	0x031E7C54 STRB W25, [X22 + 0x10]
	0x031E7C58 STR X26, [X22 + 0x18]
	0x031E7C5C BL 0x31E7ED0
	0x031E7C60 TBNZ X25, 0x5, 0x31E7C74
	0x031E7C64 LDR W25, [X31 + 0x18]
	0x031E7C68 B 0x31E7C94
	0x031E7C6C LDR W8, [X19]
	0x031E7C70 B 0x31E7CA0
	0x031E7C74 LDR W8, [X19]
	0x031E7C78 LDR W25, [X31 + 0x18]
	0x031E7C7C ADD X2, X31, 0x4
	0x031E7C80 MOV X0, X22
	0x031E7C84 MOV X1, X20
	0x031E7C88 ADD W3, W25, W8
	0x031E7C8C STR W8, [X31 + 0x4]
	0x031E7C90 BL 0x31E7BA8
	0x031E7C94 LDR W8, [X19]
	0x031E7C98 ADD W8, W25, W8
	0x031E7C9C STR W8, [X19]
	0x031E7CA0 CMP W8, W23
	0x031E7CA4 B.LT 0x31E7C14
	0x031E7CA8 LDP X20, X19, [X31 + 0x50]
	0x031E7CAC LDP X22, X21, [X31 + 0x40]
	0x031E7CB0 LDP X24, X23, [X31 + 0x30]
	0x031E7CB4 LDP X26, X25, [X31 + 0x20]
	0x031E7CB8 LDR X30, [X31 + 0x10]
	0x031E7CBC ADD X31, X31, 0x60
	0x031E7CC0 RET
	0x031E7CC4 LDR X0, [X0 + 0x20]
	0x031E7CC8 CBZ X0, 0x31E7CDC
	0x031E7CCC LDR X8, [X0]
	0x031E7CD0 LDR X2, [X8 + 0x298]
	0x031E7CD4 LDR X1, [X8 + 0x2A0]
	0x031E7CD8 BR X2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11F6000
	007 Move X21, 0xF39000
	008 Move X20, 0xF3A000
	009 Move W8, [X22+336]
	010 Move X21, [X21+4056]
	011 Move X20, [X20+968]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {46}
	017 Move X0, 0xF39000
	018 Move X0, [X0+3960]
	019 Call 0x1C17CF4
	020 Move X0, 0xF3A000
	021 Move X0, [X0+968]
	022 Call 0x1C17CF4
	023 Move X0, 0xF39000
	024 Move X0, [X0+3968]
	025 Call 0x1C17CF4
	026 Move X0, 0xF39000
	027 Move X0, [X0+3976]
	028 Call 0x1C17CF4
	029 Move X0, 0xF39000
	030 Move X0, [X0+4056]
	031 Call 0x1C17CF4
	032 Move X0, 0xF12000
	033 Move X0, [X0+1864]
	034 Call 0x1C17CF4
	035 Move X0, 0xF3A000
	036 Move X0, [X0+2896]
	037 Call 0x1C17CF4
	038 Move X0, 0xF39000
	039 Move X0, [X0+232]
	040 Call 0x1C17CF4
	041 Move X0, 0xF3A000
	042 Move X0, [X0+2904]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X22+336], W8
	046 Move X0, [X21]
	047 Move X22, 0xF39000
	048 Move X22, [X22+3976]
	049 Call 0x1C17F10
	050 Move X1, [X20]
	051 Move X20, X0
	052 Call Dictionary`2<Object, Object>..ctor, X0
	053 Move X0, X19
	054 Call Value.NextToken, X0
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Compare W0, 0
	057 JumpIfEqual {86}
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X0, X19
	060 Call Value.ParseString, X0
	061 Compare X0, 0
	062 JumpIfEqual {86}
	063 Move X21, X0
	064 Move X0, X19
	065 Call Value.NextToken, X0
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Compare X19, 0
	068 JumpIfEqual {153}
	069 Move X8, [X19]
	070 Move X0, X19
	071 Move X9, [X8+456]
	072 Move X1, [X8+464]
	073 NotImplemented "Instruction BLR not yet implemented."
	074 Move X0, X19
	075 Call Value.NextToken, X0
	076 Move W1, W0
	077 Move X0, X19
	078 Call Value.ParseByToken, X0, X1
	079 Compare X20, 0
	080 JumpIfEqual {153}
	081 Move X3, [X22]
	082 Move X2, X0
	083 Move X0, X20
	084 Move X1, X21
	085 Call Dictionary`2<Object, Object>.set_Item, X0, X1, X2
	086 Move X0, X31
	087 Compare X20, 0
	088 JumpIfEqual {153}
	089 Move X19, 0xF3A000
	090 Move X22, 0xF39000
	091 Move X19, [X19+2896]
	092 Move X22, [X22+3960]
	093 Move X0, X20
	094 Move X1, [X19]
	095 Move X2, [X22]
	096 Call Dictionary`2<Object, Object>.ContainsKey, X0, X1
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {139}
	101 Move X21, 0xF3A000
	102 Move X21, [X21+2904]
	103 Move X2, [X22]
	104 Move X0, X20
	105 Move X1, [X21]
	106 Call Dictionary`2<Object, Object>.ContainsKey, X0, X1
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {139}
	111 Move X22, 0xF39000
	112 Move X1, [X19]
	113 Move X22, [X22+3968]
	114 Move X0, X20
	115 Move X2, [X22]
	116 Call Dictionary`2<Object, Object>.get_Item, X0, X1
	117 Move X1, [X21]
	118 Move X2, [X22]
	119 Move X19, X0
	120 Move X0, X20
	121 Call Dictionary`2<Object, Object>.get_Item, X0, X1
	122 Move X8, 0xF39000
	123 Move X8, [X8+232]
	124 Move X2, [X22]
	125 Move X21, X0
	126 Move X0, X20
	127 Move X1, [X8]
	128 Call Dictionary`2<Object, Object>.get_Item, X0, X1
	129 Move X2, X0
	130 Move X0, X19
	131 Move X1, X21
	132 Move X20, [X31+32]
	133 Move X19, [X31+40]
	134 Move X22, [X31+16]
	135 Move X21, [X31+24]
	136 Move X30, [X31+48]
	137 Call Value.FromSerialization, X0, X1, X2
	138 Return X0
	139 Move X8, 0xF12000
	140 Move X8, [X8+1864]
	141 Move X0, [X8]
	142 Call 0x1C17F10
	143 Move X1, X20
	144 Move X19, X0
	145 Call Value..ctor, X0, X1
	146 Move X0, X19
	147 Move X20, [X31+32]
	148 Move X19, [X31+40]
	149 Move X22, [X31+16]
	150 Move X21, [X31+24]
	151 Move X30, [X31+48]
	152 Return X0
	153 Call 0x1C17F20

Method: System.Char PeekChar(System.IO.StringReader reader)

Disassembly:
	0x031E80F8 LDRB W10, [X8 + 0x130]
	0x031E80FC LDRB W9, [X1 + 0x130]
	0x031E8100 CMP W10, W9
	0x031E8104 B.CC 0x31E84D4
	0x031E8108 LDR X10, [X8 + 0xC8]
	0x031E810C ADD X9, X10, X9, 0x3, LSL
	0x031E8110 LDUR X9, [X9 - 0x8]
	0x031E8114 CMP X9, X1
	0x031E8118 B.NE 0x31E84D4
	0x031E811C LDP X9, X1, [X8 + 0x178]
	0x031E8120 BLR X9
	0x031E8124 CBZ X20, 0x31E84E0
	0x031E8128 LDR X8, [X20]
	0x031E812C MOV X23, X0
	0x031E8130 LDR X9, [X8 + 0x308]
	0x031E8134 LDR X2, [X8 + 0x310]
	0x031E8138 MOV X0, X20
	0x031E813C MOV X1, X23
	0x031E8140 BLR X9
	0x031E8144 CBZ X23, 0x31E84D8
	0x031E8148 LDR W8, [X23 + 0x18]
	0x031E814C ADD W21, W21, W8
	0x031E8150 B 0x31E8034
	0x031E8154 LDR X21, [X19 + 0x18]
	0x031E8158 CBZ X21, 0x31E8204
	0x031E815C LDR X20, [X21 + 0x18]
	0x031E8160 ADRP X8, 0xF0B000
	0x031E8164 LDR X8, [X8 + 0x618]
	0x031E8168 CMP W20, 0x80
	0x031E816C B.GE 0x31E8224

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11F5000
	005 Move W8, [X20+337]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF15000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+337], W8
	016 Compare X19, 0
	017 JumpIfEqual {39}
	018 Move X8, [X19]
	019 Move X20, 0xF15000
	020 Move X0, X19
	021 Move X9, [X8+440]
	022 Move X1, [X8+448]
	023 Move X20, [X20+2536]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X8, [X20]
	026 Move W19, W0
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1C17DFC
	032 Move W0, W19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X1, X31
	036 Move X30, [X31+32]
	037 Call Convert.ToChar, X0
	038 Return X0
	039 Call 0x1C17F20

Method: System.Char NextChar(System.IO.StringReader reader)

Disassembly:
	0x031E7E1C LDP X20, X19, [X31 + 0x20]
	0x031E7E20 LDP X22, X21, [X31 + 0x10]
	0x031E7E24 LDR X30, [X31], #0x30
	0x031E7E28 RET
	0x031E7E2C MOV X0, X20
	0x031E7E30 MOV X1, X21
	0x031E7E34 BL 0x1C171E0
	0x031E7E38 STR X30, [X31 - 0x10]!
	0x031E7E3C CBZ X1, 0x31E7EBC
	0x031E7E40 CBZ X2, 0x31E7EBC
	0x031E7E44 LDR W8, [X1 + 0x18]
	0x031E7E48 LDR W9, [X2 + 0x18]
	0x031E7E4C CMP W8, W9
	0x031E7E50 B.NE 0x31E7EA4
	0x031E7E54 CMP W8, 0x1
	0x031E7E58 B.LT 0x31E7EAC
	0x031E7E5C MOV W9, W31
	0x031E7E60 SUB W8, W31, W8
	0x031E7E64 ADDS W31, W8, W9
	0x031E7E68 B.EQ 0x31E7EB8
	0x031E7E6C SXTW X9, W9
	0x031E7E70 ADD X10, X1, X9
	0x031E7E74 ADD X11, X2, X9
	0x031E7E78 LDRB W10, [X10 + 0x20]
	0x031E7E7C LDRB W11, [X11 + 0x20]
	0x031E7E80 ADD W12, W8, W9
	0x031E7E84 CMP W10, W11
	0x031E7E88 CSET W0, EQ
	0x031E7E8C ADDS W31, W12, 0x1
	0x031E7E90 B.EQ 0x31E7EB0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11F6000
	005 Move W8, [X20+338]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF16000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+338], W8
	016 Compare X19, 0
	017 JumpIfEqual {39}
	018 Move X8, [X19]
	019 Move X20, 0xF16000
	020 Move X0, X19
	021 Move X9, [X8+456]
	022 Move X1, [X8+464]
	023 Move X20, [X20+2536]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X8, [X20]
	026 Move W19, W0
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1C17DFC
	032 Move W0, W19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X1, X31
	036 Move X30, [X31+32]
	037 Call Convert.ToChar, X0
	038 Return X0
	039 Call 0x1C17F20

Method: System.String NextWord(System.IO.StringReader reader)

Disassembly:
	0x031E7E94 CMP W10, W11
	0x031E7E98 ADD W9, W9, 0x1
	0x031E7E9C B.EQ 0x31E7E64
	0x031E7EA0 B 0x31E7EB0
	0x031E7EA4 MOV W0, W31
	0x031E7EA8 B 0x31E7EB0
	0x031E7EAC MOVZ W0, 0x1
	0x031E7EB0 LDR X30, [X31], #0x10
	0x031E7EB4 RET
	0x031E7EB8 BL 0x1C16F28
	0x031E7EBC BL 0x1C16F20
	0x031E7EC0 LDR X8, [X0 + 0x18]
	0x031E7EC4 MOV X2, X1
	0x031E7EC8 MOV X1, X8
	0x031E7ECC B 0x31E7E38
	0x031E7ED0 STP X30, X21, [X31 - 0x20]!
	0x031E7ED4 STP X20, X19, [X31 + 0x10]
	0x031E7ED8 ADRP X21, 0x11F5000
	0x031E7EDC LDRB W8, [X21 + 0x160]
	0x031E7EE0 MOV X19, X1
	0x031E7EE4 MOV X20, X0
	0x031E7EE8 TBNZ X8, 0x0, 0x31E7F00
	0x031E7EEC ADRP X0, 0xF39000
	0x031E7EF0 LDR X0, [X0 + 0xBA0]
	0x031E7EF4 BL 0x1C16CF4
	0x031E7EF8 MOVZ W8, 0x1
	0x031E7EFC STRB W8, [X21 + 0x160]
	0x031E7F00 CBZ X19, 0x31E7F48
	0x031E7F04 LDR X21, [X20 + 0x20]
	0x031E7F08 CBNZ X21, 0x31E7F30
	0x031E7F0C ADRP X8, 0xF39000
	0x031E7F10 LDR X8, [X8 + 0xBA0]
	0x031E7F14 LDR X0, [X8]
	0x031E7F18 BL 0x1C16F10
	0x031E7F1C MOV X1, X31
	0x031E7F20 MOV X21, X0
	0x031E7F24 BL 0x3351F5C
	0x031E7F28 STR X21, [X20 + 0x20]
	0x031E7F2C CBZ X21, 0x31E7F58
	0x031E7F30 LDR X8, [X21]
	0x031E7F34 MOV X0, X21
	0x031E7F38 MOV X1, X19
	0x031E7F3C LDR X9, [X8 + 0x308]
	0x031E7F40 LDR X2, [X8 + 0x310]
	0x031E7F44 BLR X9
	0x031E7F48 MOV X0, X19
	0x031E7F4C LDP X20, X19, [X31 + 0x10]
	0x031E7F50 LDP X30, X21, [X31], #0x20
	0x031E7F54 RET
	0x031E7F58 BL 0x1C16F20
	0x031E7F5C STP X30, X27, [X31 - 0x50]!
	0x031E7F60 STP X26, X25, [X31 + 0x10]
	0x031E7F64 STP X24, X23, [X31 + 0x20]
	0x031E7F68 STP X22, X21, [X31 + 0x30]
	0x031E7F6C STP X20, X19, [X31 + 0x40]
	0x031E7F70 ADRP X20, 0x11F5000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11F6000
	006 Move X20, 0xF0D000
	007 Move W8, [X21+339]
	008 Move X20, [X20+2288]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xF0D000
	015 Move X0, [X0+2288]
	016 Call 0x1C17CF4
	017 Move X0, 0xF3A000
	018 Move X0, [X0+2920]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+339], W8
	022 Move X0, [X20]
	023 Move X21, 0xF3A000
	024 Move X21, [X21+2920]
	025 Call 0x1C17F10
	026 Move X1, X31
	027 Move X20, X0
	028 Call StringBuilder..ctor, X0
	029 Move X0, X19
	030 Call Value.PeekChar, X0
	031 Move X8, [X21]
	032 Compare X8, 0
	033 JumpIfEqual {66}
	034 Move W1, W0
	035 Move X0, X8
	036 Move X2, X31
	037 Call String.IndexOf, X0, X1
	038 Add W31, W0, 1
	039 Move X0, X19
	040 Call Value.NextChar, X0
	041 Compare X20, 0
	042 JumpIfEqual {66}
	043 Move W1, W0
	044 Move X0, X20
	045 Move X2, X31
	046 Call StringBuilder.Append, X0, X1
	047 Compare X19, 0
	048 JumpIfEqual {66}
	049 Move X8, [X19]
	050 Move X0, X19
	051 Move X9, [X8+440]
	052 Move X1, [X8+448]
	053 NotImplemented "Instruction BLR not yet implemented."
	054 Add W31, W0, 1
	055 Compare X20, 0
	056 JumpIfEqual {66}
	057 Move X8, [X20]
	058 Move X0, X20
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X2, [X8+360]
	062 Move X1, [X8+368]
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 CallNoReturn X2
	066 Call 0x1C17F20

Method: System.Void EatWhitespace(System.IO.StringReader reader)

Disassembly:
	0x031E8170 LDR X0, [X8]
	0x031E8174 ADD W1, W20, 0x2
	0x031E8178 BL 0x1C16D6C
	0x031E817C MOV X22, X0
	0x031E8180 MOVZ W3, 0x2
	0x031E8184 MOV X0, X21
	0x031E8188 MOV W1, W31
	0x031E818C MOV X2, X22
	0x031E8190 MOV W4, W20
	0x031E8194 MOV X5, X31
	0x031E8198 BL 0x33A8A9C
	0x031E819C B 0x31E848C
	0x031E81A0 MOV X23, X31
	0x031E81A4 MOVZ W24, 0x5
	0x031E81A8 ADRP X25, 0xF0B000
	0x031E81AC LDR X25, [X25 + 0xE00]
	0x031E81B0 MOV X0, X22
	0x031E81B4 LDR X1, [X25]
	0x031E81B8 BL 0x1C16E00
	0x031E81BC CBZ X0, 0x31E8318
	0x031E81C0 LDR X8, [X0]
	0x031E81C4 LDR X1, [X25]
	0x031E81C8 MOV X22, X0
	0x031E81CC LDRH W9, [X8 + 0x12E]
	0x031E81D0 CBZ X9, 0x31E81F4
	0x031E81D4 LDR X10, [X8 + 0xB0]
	0x031E81D8 ADD X10, X10, 0x8
	0x031E81DC LDUR X11, [X10 - 0x8]
	0x031E81E0 CMP X11, X1
	0x031E81E4 B.EQ 0x31E8300
	0x031E81E8 SUBS X9, X9, 0x1
	0x031E81EC ADD X10, X10, 0x10
	0x031E81F0 B.NE 0x31E81DC
	0x031E81F4 MOV X0, X22
	0x031E81F8 MOV W2, W31
	0x031E81FC BL 0x1C5C788
	0x031E8200 B 0x31E830C
	0x031E8204 ADRP X8, 0xF0B000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11F5000
	006 Move X20, 0xF39000
	007 Move W8, [X21+340]
	008 Move X20, [X20+2944]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF39000
	015 Move X0, [X0+2944]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+340], W8
	019 Move X0, X19
	020 Call Value.PeekChar, X0
	021 Move X8, [X20]
	022 Compare X8, 0
	023 JumpIfEqual {47}
	024 Move W1, W0
	025 Move X0, X8
	026 Move X2, X31
	027 Call String.IndexOf, X0, X1
	028 Add W31, W0, 1
	029 Compare X19, 0
	030 JumpIfEqual {47}
	031 Move X8, [X19]
	032 Move X0, X19
	033 Move X9, [X8+456]
	034 Move X1, [X8+464]
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X8, [X19]
	037 Move X0, X19
	038 Move X9, [X8+440]
	039 Move X1, [X8+448]
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Add W31, W0, 1
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Return 
	047 Call 0x1C17F20

Method: mixpanel.Value/Token NextToken(System.IO.StringReader reader)

Disassembly:
	0x031E759C FMOV D1, X8
	0x031E75A0 MOVZ W9, 0x80000000
	0x031E75A4 FCVTZS W8, D0
	0x031E75A8 FCMP D0, D1
	0x031E75AC CSEL W0, W9, W8, EQ
	0x031E75B0 LDR X30, [X31], #0x10
	0x031E75B4 RET
	0x031E75B8 BL 0x1C16F20
	0x031E75BC STR X30, [X31 - 0x10]!
	0x031E75C0 CBZ X1, 0x31E75E8
	0x031E75C4 LDR V0, [X1 + 0x28]
	0x031E75C8 MOVZ X8, 0x7FF00000
	0x031E75CC FMOV D1, X8
	0x031E75D0 MOVZ X9, 0x80000000
	0x031E75D4 FCVTZS X8, D0
	0x031E75D8 FCMP D0, D1
	0x031E75DC CSEL X0, X9, X8, EQ
	0x031E75E0 LDR X30, [X31], #0x10
	0x031E75E4 RET
	0x031E75E8 BL 0x1C16F20
	0x031E75EC STR X30, [X31 - 0x10]!
	0x031E75F0 CBZ X1, 0x31E7618
	0x031E75F4 LDR V0, [X1 + 0x28]
	0x031E75F8 MOVZ X8, 0x7FF00000
	0x031E75FC FMOV D1, X8
	0x031E7600 MOVZ X9, 0x80000000
	0x031E7604 FCVTZS X8, D0
	0x031E7608 FCMP D0, D1
	0x031E760C CSEL X0, X9, X8, EQ
	0x031E7610 LDR X30, [X31], #0x10
	0x031E7614 RET
	0x031E7618 BL 0x1C16F20
	0x031E761C MOV X0, X1
	0x031E7620 B 0x31E33EC
	0x031E7624 MOV X0, X1
	0x031E7628 B 0x31E33EC
	0x031E762C STR X30, [X31 - 0x10]!
	0x031E7630 CBZ X1, 0x31E7650
	0x031E7634 LDR V0, [X1 + 0x28]
	0x031E7638 FCVTZS W8, D0
	0x031E763C FCVTZU W9, D0
	0x031E7640 FCMP D0, 0x0
	0x031E7644 CSEL W0, W8, W9, MI
	0x031E7648 LDR X30, [X31], #0x10
	0x031E764C RET
	0x031E7650 BL 0x1C16F20
	0x031E7654 STR X30, [X31 - 0x10]!
	0x031E7658 CBZ X1, 0x31E7678
	0x031E765C LDR V0, [X1 + 0x28]
	0x031E7660 FCVTZS W8, D0
	0x031E7664 FCVTZU W9, D0
	0x031E7668 FCMP D0, 0x0
	0x031E766C CSEL W0, W8, W9, MI
	0x031E7670 LDR X30, [X31], #0x10
	0x031E7674 RET
	0x031E7678 BL 0x1C16F20
	0x031E767C STR X30, [X31 - 0x10]!
	0x031E7680 CBZ X1, 0x31E76A0
	0x031E7684 LDR V0, [X1 + 0x28]
	0x031E7688 FCVTZS X8, D0
	0x031E768C FCVTZU X9, D0
	0x031E7690 FCMP D0, 0x0
	0x031E7694 CSEL X0, X8, X9, MI
	0x031E7698 LDR X30, [X31], #0x10
	0x031E769C RET
	0x031E76A0 BL 0x1C16F20
	0x031E76A4 STR X30, [X31 - 0x10]!
	0x031E76A8 CBZ X1, 0x31E76C8
	0x031E76AC LDR V0, [X1 + 0x28]
	0x031E76B0 FCVTZS X8, D0
	0x031E76B4 FCVTZU X9, D0
	0x031E76B8 FCMP D0, 0x0
	0x031E76BC CSEL X0, X8, X9, MI
	0x031E76C0 LDR X30, [X31], #0x10
	0x031E76C4 RET
	0x031E76C8 BL 0x1C16F20
	0x031E76CC STR X30, [X31 - 0x10]!
	0x031E76D0 CBZ X1, 0x31E76F4
	0x031E76D4 LDR V0, [X1 + 0x28]
	0x031E76D8 MOVZ X8, 0x7FF00000
	0x031E76DC FMOV D1, X8
	0x031E76E0 FCVTZS W8, D0
	0x031E76E4 FCMP D0, D1
	0x031E76E8 CSEL W0, W31, W8, EQ
	0x031E76EC LDR X30, [X31], #0x10
	0x031E76F0 RET
	0x031E76F4 BL 0x1C16F20
	0x031E76F8 STR X30, [X31 - 0x10]!
	0x031E76FC CBZ X1, 0x31E7720
	0x031E7700 LDR V0, [X1 + 0x28]
	0x031E7704 MOVZ X8, 0x7FF00000
	0x031E7708 FMOV D1, X8
	0x031E770C FCVTZS W8, D0
	0x031E7710 FCMP D0, D1
	0x031E7714 CSEL W0, W31, W8, EQ
	0x031E7718 LDR X30, [X31], #0x10
	0x031E771C RET
	0x031E7720 BL 0x1C16F20
	0x031E7724 MOV X0, X1
	0x031E7728 B 0x31E3D0C
	0x031E772C MOV X0, X1
	0x031E7730 B 0x31E3D0C
	0x031E7734 CBZ X1, 0x31E7740
	0x031E7738 MOV X0, X1
	0x031E773C B 0x31DAE90
	0x031E7740 STR X30, [X31 - 0x10]!
	0x031E7744 BL 0x1C16F20
	0x031E7748 CBZ X1, 0x31E7754
	0x031E774C MOV X0, X1
	0x031E7750 B 0x31DAE90

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11F6000
	005 Move W8, [X20+341]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0xF0D000
	012 Move X0, [X0+2096]
	013 Call 0x1C17CF4
	014 Move X0, 0xF17000
	015 Move X0, [X0+4088]
	016 Call 0x1C17CF4
	017 Move X0, 0xF18000
	018 Move X0, [X0]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+341], W8
	022 Move X0, X19
	023 Call Value.EatWhitespace, X0
	024 Compare X19, 0
	025 JumpIfEqual {109}
	026 Move X8, [X19]
	027 Move X0, X19
	028 Move X9, [X8+440]
	029 Move X1, [X8+448]
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Add W31, W0, 1
	032 Move X0, X19
	033 Call Value.PeekChar, X0
	034 And W8, W0, 0xFFFF
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Subtract W9, W8, 34
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X8, -40173568
	039 Add X8, X8, 998
	040 NotImplemented "Instruction ADR not yet implemented."
	041 Move W11, [X8]
	042 Add X10, X10, X11
	043 Move W0, 5
	044 CallNoReturn X10
	045 Move W0, 8
	046 Move W0, W31
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Return X0
	051 NotImplemented "Instruction CMP not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X8, [X19]
	055 Move X0, X19
	056 Move X9, [X8+456]
	057 Move X1, [X8+464]
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Move W0, 2
	060 Move X8, [X19]
	061 Move X0, X19
	062 Move X9, [X8+456]
	063 Move X1, [X8+464]
	064 NotImplemented "Instruction BLR not yet implemented."
	065 Move W0, 4
	066 Move W0, 1
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W0, 3
	069 Move X0, X19
	070 Call Value.NextWord, X0
	071 Move X8, 0xF17000
	072 Move X8, [X8+4088]
	073 Move X2, X31
	074 Move X19, X0
	075 Move X1, [X8]
	076 Call String.op_Equality, X0, X1
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {82}
	081 Move W0, 10
	082 Move X8, 0xF18000
	083 Move X8, [X8]
	084 Move X0, X19
	085 Move X2, X31
	086 Move X1, [X8]
	087 Call String.op_Equality, X0, X1
	088 Move TEMP, X0
	089 And TEMP, TEMP, 1
	090 Compare TEMP, 1
	091 JumpIfNotEqual {93}
	092 Move W0, 9
	093 Move X8, 0xF0D000
	094 Move X8, [X8+2096]
	095 Move X0, X19
	096 Move X2, X31
	097 Move X1, [X8]
	098 Call String.op_Equality, X0, X1
	099 And W31, W0, 1
	100 Move W8, 11
	101 NotImplemented "Instruction CSEL not yet implemented."
	102 Move W0, 7
	103 Move X8, [X19]
	104 Move X0, X19
	105 Move X9, [X8+456]
	106 Move X1, [X8+464]
	107 NotImplemented "Instruction BLR not yet implemented."
	108 Move W0, 6
	109 Call 0x1C17F20

Method: mixpanel.Value FromSerialization(mixpanel.Value valueType, mixpanel.Value dataType, mixpanel.Value value)

Disassembly:
	0x031E7F74 LDRB W8, [X20 + 0x161]
	0x031E7F78 MOV X19, X0
	0x031E7F7C TBNZ X8, 0x0, 0x31E7FC4
	0x031E7F80 ADRP X0, 0xF39000
	0x031E7F84 LDR X0, [X0 + 0xB98]
	0x031E7F88 BL 0x1C16CF4
	0x031E7F8C ADRP X0, 0xF39000
	0x031E7F90 LDR X0, [X0 + 0xBA0]
	0x031E7F94 BL 0x1C16CF4
	0x031E7F98 ADRP X0, 0xF0C000
	0x031E7F9C LDR X0, [X0 + 0x618]
	0x031E7FA0 BL 0x1C16CF4
	0x031E7FA4 ADRP X0, 0xF0C000
	0x031E7FA8 LDR X0, [X0 + 0xE00]
	0x031E7FAC BL 0x1C16CF4
	0x031E7FB0 ADRP X0, 0xF0C000
	0x031E7FB4 LDR X0, [X0 + 0xE18]
	0x031E7FB8 BL 0x1C16CF4
	0x031E7FBC MOVZ W8, 0x1
	0x031E7FC0 STRB W8, [X20 + 0x161]
	0x031E7FC4 LDR X0, [X19 + 0x20]
	0x031E7FC8 CBZ X0, 0x31E8154
	0x031E7FCC LDR X8, [X0]
	0x031E7FD0 LDR X9, [X8 + 0x298]
	0x031E7FD4 LDR X1, [X8 + 0x2A0]
	0x031E7FD8 BLR X9
	0x031E7FDC CMP W0, 0x1
	0x031E7FE0 B.LT 0x31E8154
	0x031E7FE4 ADRP X8, 0xF39000
	0x031E7FE8 LDR X8, [X8 + 0xBA0]
	0x031E7FEC LDR X0, [X8]
	0x031E7FF0 BL 0x1C16F10
	0x031E7FF4 MOV X1, X31
	0x031E7FF8 MOV X20, X0
	0x031E7FFC BL 0x3351F5C
	0x031E8000 LDR X0, [X19 + 0x20]
	0x031E8004 CBZ X0, 0x31E83D0
	0x031E8008 LDR X8, [X0]
	0x031E800C LDR X9, [X8 + 0x388]
	0x031E8010 LDR X1, [X8 + 0x390]
	0x031E8014 BLR X9
	0x031E8018 MOV X22, X0
	0x031E801C CBZ X0, 0x31E84F4
	0x031E8020 ADRP X24, 0xF0B000
	0x031E8024 ADRP X25, 0xF38000
	0x031E8028 LDR X24, [X24 + 0xE18]
	0x031E802C LDR X25, [X25 + 0xB98]
	0x031E8030 MOV W21, W31
	0x031E8034 LDR X8, [X22]
	0x031E8038 LDR X1, [X24]
	0x031E803C LDRH W9, [X8 + 0x12E]
	0x031E8040 CBZ X9, 0x31E8064
	0x031E8044 LDR X10, [X8 + 0xB0]
	0x031E8048 ADD X10, X10, 0x8
	0x031E804C LDUR X11, [X10 - 0x8]
	0x031E8050 CMP X11, X1
	0x031E8054 B.EQ 0x31E8074
	0x031E8058 SUBS X9, X9, 0x1
	0x031E805C ADD X10, X10, 0x10
	0x031E8060 B.NE 0x31E804C
	0x031E8064 MOV X0, X22
	0x031E8068 MOV W2, W31
	0x031E806C BL 0x1C5C788
	0x031E8070 B 0x31E8080
	0x031E8074 LDRSW X9, [X10]
	0x031E8078 ADD X8, X8, X9, 0x4, LSL
	0x031E807C ADD X0, X8, 0x138
	0x031E8080 LDP X8, X1, [X0]
	0x031E8084 MOV X0, X22
	0x031E8088 BLR X8
	0x031E808C TBZ X0, 0x0, 0x31E81A0
	0x031E8090 LDR X8, [X22]
	0x031E8094 LDR X1, [X24]
	0x031E8098 LDRH W9, [X8 + 0x12E]
	0x031E809C CBZ X9, 0x31E80C0
	0x031E80A0 LDR X10, [X8 + 0xB0]
	0x031E80A4 ADD X10, X10, 0x8
	0x031E80A8 LDUR X11, [X10 - 0x8]
	0x031E80AC CMP X11, X1
	0x031E80B0 B.EQ 0x31E80D0
	0x031E80B4 SUBS X9, X9, 0x1
	0x031E80B8 ADD X10, X10, 0x10
	0x031E80BC B.NE 0x31E80A8
	0x031E80C0 MOVZ W2, 0x1
	0x031E80C4 MOV X0, X22
	0x031E80C8 BL 0x1C5C788
	0x031E80CC B 0x31E80E0
	0x031E80D0 LDR W9, [X10]
	0x031E80D4 ADD W9, W9, 0x1
	0x031E80D8 ADD X8, X8, W9, 0x4, SXTW
	0x031E80DC ADD X0, X8, 0x138
	0x031E80E0 LDP X8, X1, [X0]
	0x031E80E4 MOV X0, X22
	0x031E80E8 BLR X8
	0x031E80EC CBZ X0, 0x31E84DC
	0x031E80F0 LDR X8, [X0]
	0x031E80F4 LDR X1, [X25]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x11F6000
	009 Move X22, 0xF3A000
	010 Move X23, 0xF0D000
	011 Move W8, [X24+342]
	012 Move X22, [X22+2928]
	013 Move X23, [X23+1728]
	014 Move X19, X2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {41}
	021 Move X0, 0xF3A000
	022 Move X0, [X0+2936]
	023 Call 0x1C17CF4
	024 Move X0, 0xF3A000
	025 Move X0, [X0+800]
	026 Call 0x1C17CF4
	027 Move X0, 0xF0D000
	028 Move X0, [X0+3576]
	029 Call 0x1C17CF4
	030 Move X0, 0xF0D000
	031 Move X0, [X0+1728]
	032 Call 0x1C17CF4
	033 Move X0, 0xF3A000
	034 Move X0, [X0+2928]
	035 Call 0x1C17CF4
	036 Move X0, 0xF3A000
	037 Move X0, [X0+856]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X24+342], W8
	041 Move X0, [X23]
	042 Move X22, [X22]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X22
	048 Move X1, X31
	049 Call Type.GetTypeFromHandle, X0
	050 Compare X21, 0
	051 JumpIfEqual {110}
	052 Move X8, 0xF0C000
	053 Move X8, [X8+3576]
	054 Move X22, X0
	055 Move X21, [X21+24]
	056 Move X0, [X8]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move X0, X22
	062 Move X1, X21
	063 Move X2, X31
	064 Call Enum.Parse, X0, X1
	065 Compare X19, 0
	066 JumpIfEqual {110}
	067 Compare X0, 0
	068 JumpIfEqual {110}
	069 Move X8, 0xF39000
	070 Move X8, [X8+856]
	071 Move X9, [X0]
	072 Move X1, [X8]
	073 Move X8, [X9+64]
	074 Move X9, [X1+64]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X21, 0xF39000
	077 Move X21, [X21+2936]
	078 Call 0x1C17E08
	079 Move W8, [X0]
	080 Move X1, X31
	081 Move [X19+16], W8
	082 Move X0, [X21]
	083 Call Type.GetTypeFromHandle, X0
	084 Compare X20, 0
	085 JumpIfEqual {110}
	086 Move X1, [X20+24]
	087 Move X2, X31
	088 Call Enum.Parse, X0, X1
	089 Compare X0, 0
	090 JumpIfEqual {110}
	091 Move X8, 0xF39000
	092 Move X8, [X8+800]
	093 Move X9, [X0]
	094 Move X1, [X8]
	095 Move X8, [X9+64]
	096 Move X9, [X1+64]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Call 0x1C17E08
	099 Move W8, [X0]
	100 Move X0, X19
	101 Move X22, [X31+32]
	102 Move X21, [X31+40]
	103 Move X24, [X31+16]
	104 Move X23, [X31+24]
	105 Move [X19+20], W8
	106 Move X20, [X31+48]
	107 Move X19, [X31+56]
	108 Move X30, [X31+64]
	109 Return X0
	110 Call 0x1C17F20
	111 Call 0x1C181E0

