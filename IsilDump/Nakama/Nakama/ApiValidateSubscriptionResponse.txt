Type: Nakama.ApiValidateSubscriptionResponse

Method: Nakama.IApiValidatedSubscription get_ValidatedSubscription()

Disassembly:
	0x0340D508 MOV X0, X21
	0x0340D50C LDR X1, [X8 + 0x40]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: Nakama.ApiValidatedSubscription get__validatedSubscription()

Disassembly:
	0x0340D510 BL 0x1C16E00
	0x0340D514 CBZ X0, 0x340D624

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set__validatedSubscription(Nakama.ApiValidatedSubscription value)

Disassembly:
	0x0340D518 LDR W8, [X20 + 0x18]
	0x0340D51C CBZ W8, 0x340D620

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x0340D520 ADRP X23, 0xD21000
	0x0340D524 LDR X23, [X23 + 0x70]
	0x0340D528 STR X21, [X20 + 0x20]
	0x0340D52C LDR X0, [X23]
	0x0340D530 CBZ X0, 0x340D548
	0x0340D534 LDR X8, [X20]
	0x0340D538 LDR X1, [X8 + 0x40]
	0x0340D53C BL 0x1C16E00
	0x0340D540 CBZ X0, 0x340D624
	0x0340D544 LDR W8, [X20 + 0x18]
	0x0340D548 CMP W8, 0x1
	0x0340D54C B.LS 0x340D620
	0x0340D550 LDR X8, [X23]
	0x0340D554 ADD X1, X31, 0x8
	0x0340D558 STR X8, [X20 + 0x28]
	0x0340D55C LDR W8, [X19 + 0x24]
	0x0340D560 LDR X0, [X24]
	0x0340D564 STR W8, [X31 + 0x8]
	0x0340D568 BL 0x1C16E04
	0x0340D56C MOV X21, X0
	0x0340D570 CBZ X0, 0x340D588
	0x0340D574 LDR X8, [X20]
	0x0340D578 MOV X0, X21
	0x0340D57C LDR X1, [X8 + 0x40]
	0x0340D580 BL 0x1C16E00
	0x0340D584 CBZ X0, 0x340D624
	0x0340D588 LDR W8, [X20 + 0x18]
	0x0340D58C CMP W8, 0x2
	0x0340D590 B.LS 0x340D620
	0x0340D594 STR X21, [X20 + 0x30]
	0x0340D598 LDR X0, [X22]
	0x0340D59C CBZ X0, 0x340D5B4
	0x0340D5A0 LDR X8, [X20]
	0x0340D5A4 LDR X1, [X8 + 0x40]
	0x0340D5A8 BL 0x1C16E00
	0x0340D5AC CBZ X0, 0x340D624
	0x0340D5B0 LDR W8, [X20 + 0x18]
	0x0340D5B4 CMP W8, 0x3
	0x0340D5B8 B.LS 0x340D620
	0x0340D5BC LDR X8, [X22]
	0x0340D5C0 ADRP X21, 0xD13000
	0x0340D5C4 ADRP X23, 0xD20000
	0x0340D5C8 LDR X21, [X21 + 0xBB8]
	0x0340D5CC LDR X23, [X23 + 0xE88]
	0x0340D5D0 MOV X0, X20
	0x0340D5D4 MOV X1, X31
	0x0340D5D8 STR X8, [X20 + 0x38]
	0x0340D5DC BL 0x3227578
	0x0340D5E0 LDR X2, [X19 + 0x28]
	0x0340D5E4 LDR X1, [X21]
	0x0340D5E8 LDR X3, [X22]
	0x0340D5EC MOV X4, X31
	0x0340D5F0 BL 0x32277C4
	0x0340D5F4 LDR X2, [X19 + 0x30]
	0x0340D5F8 LDR X1, [X23]
	0x0340D5FC LDR X3, [X22]
	0x0340D600 MOV X4, X31
	0x0340D604 BL 0x32277C4
	0x0340D608 LDP X20, X19, [X31 + 0x40]
	0x0340D60C LDP X22, X21, [X31 + 0x30]
	0x0340D610 LDP X24, X23, [X31 + 0x20]
	0x0340D614 LDP X30, X25, [X31 + 0x10]
	0x0340D618 ADD X31, X31, 0x50
	0x0340D61C RET
	0x0340D620 BL 0x1C16F28
	0x0340D624 BL 0x1C16F44
	0x0340D628 MOV X1, X31
	0x0340D62C BL 0x1C16DEC
	0x0340D630 BL 0x1C16F20
	0x0340D634 MOV X1, X31
	0x0340D638 B 0x33BDD8C
	0x0340D63C STR X30, [X31 - 0x20]!
	0x0340D640 STP X20, X19, [X31 + 0x10]
	0x0340D644 ADRP X20, 0xFD0000
	0x0340D648 LDRB W8, [X20 + 0x568]
	0x0340D64C MOV X19, X0
	0x0340D650 TBNZ X8, 0x0, 0x340D674
	0x0340D654 ADRP X0, 0xD21000
	0x0340D658 LDR X0, [X0 + 0x2A0]
	0x0340D65C BL 0x1C16CF4
	0x0340D660 ADRP X0, 0xD21000
	0x0340D664 LDR X0, [X0 + 0x2A8]
	0x0340D668 BL 0x1C16CF4
	0x0340D66C MOVZ W8, 0x1
	0x0340D670 STRB W8, [X20 + 0x568]
	0x0340D674 LDR X19, [X19 + 0x10]
	0x0340D678 CBNZ X19, 0x340D6A4
	0x0340D67C ADRP X8, 0xD21000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xFD1000
	007 Move X21, 0xCE7000
	008 Move X22, 0xCE7000
	009 Move W8, [X19+1380]
	010 Move X21, [X21+2440]
	011 Move X22, [X22+2512]
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xCE7000
	018 Move X0, [X0+2512]
	019 Call 0x1C17CF4
	020 Move X0, 0xD22000
	021 Move X0, [X0+560]
	022 Call 0x1C17CF4
	023 Move X0, 0xCE7000
	024 Move X0, [X0+2104]
	025 Call 0x1C17CF4
	026 Move X0, 0xCE7000
	027 Move X0, [X0+2440]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X19+1380], W8
	031 Move X0, [X22]
	032 Move X21, [X21]
	033 Move W1, 4
	034 Call 0x1C17D6C
	035 Compare X0, 0
	036 JumpIfEqual {103}
	037 Move X19, X0
	038 Compare X21, 0
	039 JumpIfEqual {46}
	040 Move X8, [X19]
	041 Move X0, X21
	042 Move X1, [X8+64]
	043 Call 0x1C17E00
	044 Compare X0, 0
	045 JumpIfEqual {100}
	046 Move W8, [X19+24]
	047 Compare W8, 0
	048 JumpIfEqual {99}
	049 Move X22, 0xD22000
	050 Move X22, [X22+560]
	051 Move [X19+32], X21
	052 Move X0, [X22]
	053 Compare X0, 0
	054 JumpIfEqual {61}
	055 Move X8, [X19]
	056 Move X1, [X8+64]
	057 Call 0x1C17E00
	058 Compare X0, 0
	059 JumpIfEqual {100}
	060 Move W8, [X19+24]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X9, [X22]
	063 Move [X19+40], X9
	064 Move X20, [X20+16]
	065 Compare X20, 0
	066 JumpIfEqual {74}
	067 Move X8, [X19]
	068 Move X0, X20
	069 Move X1, [X8+64]
	070 Call 0x1C17E00
	071 Compare X0, 0
	072 JumpIfEqual {100}
	073 Move W8, [X19+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X21, 0xCE7000
	076 Move X21, [X21+2104]
	077 Move [X19+48], X20
	078 Move X0, [X21]
	079 Compare X0, 0
	080 JumpIfEqual {87}
	081 Move X8, [X19]
	082 Move X1, [X8+64]
	083 Call 0x1C17E00
	084 Compare X0, 0
	085 JumpIfEqual {100}
	086 Move W8, [X19+24]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X8, [X21]
	089 Move X0, X19
	090 Move X22, [X31+16]
	091 Move X21, [X31+24]
	092 Move X1, X31
	093 Move [X19+56], X8
	094 Move X20, [X31+32]
	095 Move X19, [X31+40]
	096 Move X30, [X31+48]
	097 Call String.Concat, X0
	098 Return X0
	099 Call 0x1C17F28
	100 Call 0x1C17F44
	101 Move X1, X31
	102 Call 0x1C17DEC
	103 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0340D680 LDR X8, [X8 + 0x2A8]
	0x0340D684 LDR X0, [X8]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

