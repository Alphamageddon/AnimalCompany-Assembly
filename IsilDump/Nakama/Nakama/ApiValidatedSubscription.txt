Type: Nakama.ApiValidatedSubscription

Method: System.Boolean get_Active()

Disassembly:
	0x0340DC58 RET
	0x0340DC5C SUB X31, X31, 0xB0

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_Active(System.Boolean value)

Disassembly:
	0x0340DC60 STR X30, [X31 + 0x70]
	0x0340DC64 STP X24, X23, [X31 + 0x80]
	0x0340DC68 STP X22, X21, [X31 + 0x90]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.String get_CreateTime()

Disassembly:
	0x0340DC6C STP X20, X19, [X31 + 0xA0]
	0x0340DC70 ADRP X24, 0xFD0000

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_CreateTime(System.String value)

Disassembly:
	0x0340DC74 ADRP X23, 0xCE9000
	0x0340DC78 LDRB W8, [X24 + 0x56E]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: Nakama.ApiStoreEnvironment get_Environment()

Disassembly:
	0x0340DC7C LDR X23, [X23 + 0x280]
	0x0340DC80 MOV X20, X3

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: Nakama.ApiStoreEnvironment get__environment()

Disassembly:
	0x0340DC84 MOV X21, X2
	0x0340DC88 MOV X22, X1

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set__environment(Nakama.ApiStoreEnvironment value)

Disassembly:
	0x0340DC8C MOV X19, X0
	0x0340DC90 TBNZ X8, 0x0, 0x340DCB4

ISIL:
	001 Move [X0+32], W1
	002 Return 

Method: System.String get_ExpiryTime()

Disassembly:
	0x0340DC94 ADRP X0, 0xD21000
	0x0340DC98 LDR X0, [X0 + 0x2F0]

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_ExpiryTime(System.String value)

Disassembly:
	0x0340DC9C BL 0x1C16CF4
	0x0340DCA0 ADRP X0, 0xCE9000

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.String get_OriginalTransactionId()

Disassembly:
	0x0340DCA4 LDR X0, [X0 + 0x280]
	0x0340DCA8 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_OriginalTransactionId(System.String value)

Disassembly:
	0x0340DCAC MOVZ W8, 0x1
	0x0340DCB0 STRB W8, [X24 + 0x56E]

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.String get_ProductId()

Disassembly:
	0x0340DCB4 LDR X0, [X23]
	0x0340DCB8 MOVI V0.2D, 0x0

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_ProductId(System.String value)

Disassembly:
	0x0340DCBC STR X31, [X31 + 0x60]
	0x0340DCC0 STP V0, V0, [X31 + 0x40]

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.String get_ProviderNotification()

Disassembly:
	0x0340DCC4 STP V0, V0, [X31 + 0x20]
	0x0340DCC8 ADRP X23, 0xD21000

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_ProviderNotification(System.String value)

Disassembly:
	0x0340DCCC LDR W8, [X0 + 0xE0]
	0x0340DCD0 LDR X23, [X23 + 0x2F0]

ISIL:
	001 Move [X0+64], X1
	002 Return 

Method: System.String get_ProviderResponse()

Disassembly:
	0x0340DCD4 CBNZ W8, 0x340DCDC
	0x0340DCD8 BL 0x1C16DFC

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Void set_ProviderResponse(System.String value)

Disassembly:
	0x0340DCDC ADD X8, X31, 0x8
	0x0340DCE0 MOV X0, X31

ISIL:
	001 Move [X0+72], X1
	002 Return 

Method: System.String get_PurchaseTime()

Disassembly:
	0x0340DCE4 BL 0x32C4770
	0x0340DCE8 LDUR V0, [X31 + 0x8]

ISIL:
	001 Move X0, [X0+80]
	002 Return X0

Method: System.Void set_PurchaseTime(System.String value)

Disassembly:
	0x0340DCEC LDR X9, [X31 + 0x18]
	0x0340DCF0 LDR X2, [X23]

ISIL:
	001 Move [X0+80], X1
	002 Return 

Method: System.String get_RefundTime()

Disassembly:
	0x0340DCF4 ADD X8, X31, 0x20
	0x0340DCF8 STR X20, [X31 + 0x58]

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: System.Void set_RefundTime(System.String value)

Disassembly:
	0x0340DCFC ORR X20, X8, 0xF
	0x0340DD00 MOVN W10, 0x0

ISIL:
	001 Move [X0+88], X1
	002 Return 

Method: Nakama.ApiStoreProvider get_Store()

Disassembly:
	0x0340DD04 ADD X1, X31, 0x20
	0x0340DD08 MOV X0, X20

ISIL:
	001 Move W0, [X0+96]
	002 Return X0

Method: Nakama.ApiStoreProvider get__store()

Disassembly:
	0x0340DD0C STP X22, X21, [X31 + 0x48]
	0x0340DD10 STUR V0, [X31 + 0x28]

ISIL:
	001 Move W0, [X0+96]
	002 Return X0

Method: System.Void set__store(Nakama.ApiStoreProvider value)

Disassembly:
	0x0340DD14 STP X9, X19, [X31 + 0x38]
	0x0340DD18 STR W10, [X31 + 0x20]

ISIL:
	001 Move [X0+96], W1
	002 Return 

Method: System.String get_UpdateTime()

Disassembly:
	0x0340DD1C BL 0x218CFB8
	0x0340DD20 MOV X0, X20

ISIL:
	001 Move X0, [X0+104]
	002 Return X0

Method: System.Void set_UpdateTime(System.String value)

Disassembly:
	0x0340DD24 MOV X1, X31
	0x0340DD28 BL 0x32C47F8

ISIL:
	001 Move [X0+104], X1
	002 Return 

Method: System.String get_UserId()

Disassembly:
	0x0340DD2C LDP X20, X19, [X31 + 0xA0]
	0x0340DD30 LDP X22, X21, [X31 + 0x90]

ISIL:
	001 Move X0, [X0+112]
	002 Return X0

Method: System.Void set_UserId(System.String value)

Disassembly:
	0x0340DD34 LDP X24, X23, [X31 + 0x80]
	0x0340DD38 LDR X30, [X31 + 0x70]

ISIL:
	001 Move [X0+112], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x0340DD3C ADD X31, X31, 0xB0
	0x0340DD40 RET
	0x0340DD44 SUB X31, X31, 0x90
	0x0340DD48 STP X30, X25, [X31 + 0x50]
	0x0340DD4C STP X24, X23, [X31 + 0x60]
	0x0340DD50 STP X22, X21, [X31 + 0x70]
	0x0340DD54 STP X20, X19, [X31 + 0x80]
	0x0340DD58 ADRP X24, 0xFD0000
	0x0340DD5C ADRP X23, 0xD21000
	0x0340DD60 LDRB W8, [X24 + 0x56F]
	0x0340DD64 LDR X23, [X23 + 0x2F8]
	0x0340DD68 MOV X19, X3
	0x0340DD6C MOV X20, X2
	0x0340DD70 MOV X21, X1
	0x0340DD74 MOV X22, X0
	0x0340DD78 TBNZ X8, 0x0, 0x340DDB4
	0x0340DD7C ADRP X0, 0xD21000
	0x0340DD80 LDR X0, [X0 + 0x300]
	0x0340DD84 BL 0x1C16CF4
	0x0340DD88 ADRP X0, 0xD21000
	0x0340DD8C LDR X0, [X0 + 0x308]
	0x0340DD90 BL 0x1C16CF4
	0x0340DD94 ADRP X0, 0xD21000
	0x0340DD98 LDR X0, [X0 + 0x310]
	0x0340DD9C BL 0x1C16CF4
	0x0340DDA0 ADRP X0, 0xD21000
	0x0340DDA4 LDR X0, [X0 + 0x2F8]
	0x0340DDA8 BL 0x1C16CF4
	0x0340DDAC MOVZ W8, 0x1
	0x0340DDB0 STRB W8, [X24 + 0x56F]
	0x0340DDB4 LDR X0, [X23]
	0x0340DDB8 MOVI V0.2D, 0x0
	0x0340DDBC STR X31, [X31 + 0x40]
	0x0340DDC0 STP V0, V0, [X31 + 0x20]
	0x0340DDC4 STP V0, V0, [X31]
	0x0340DDC8 ADRP X23, 0xD21000
	0x0340DDCC ADRP X25, 0xD21000
	0x0340DDD0 ADRP X24, 0xD21000
	0x0340DDD4 LDR W8, [X0 + 0xE0]
	0x0340DDD8 LDR X23, [X23 + 0x300]
	0x0340DDDC LDR X25, [X25 + 0x308]
	0x0340DDE0 LDR X24, [X24 + 0x310]
	0x0340DDE4 CBNZ W8, 0x340DDEC
	0x0340DDE8 BL 0x1C16DFC
	0x0340DDEC LDR X0, [X23]
	0x0340DDF0 ADD X8, X31, 0x0
	0x0340DDF4 ORR X23, X8, 0xF
	0x0340DDF8 MOV X8, X23
	0x0340DDFC BL 0x263221C
	0x0340DE00 LDR X2, [X25]
	0x0340DE04 MOVN W8, 0x0
	0x0340DE08 ADD X1, X31, 0x0
	0x0340DE0C MOV X0, X23
	0x0340DE10 STP X22, X21, [X31 + 0x20]
	0x0340DE14 STP X20, X19, [X31 + 0x30]
	0x0340DE18 STR W8, [X31]
	0x0340DE1C BL 0x1FC8F14
	0x0340DE20 LDR X1, [X24]
	0x0340DE24 MOV X0, X23
	0x0340DE28 BL 0x2632230
	0x0340DE2C LDP X20, X19, [X31 + 0x80]
	0x0340DE30 LDP X22, X21, [X31 + 0x70]
	0x0340DE34 LDP X24, X23, [X31 + 0x60]
	0x0340DE38 LDP X30, X25, [X31 + 0x50]
	0x0340DE3C ADD X31, X31, 0x90
	0x0340DE40 RET
	0x0340DE44 SUB X31, X31, 0xB0
	0x0340DE48 STP X30, X25, [X31 + 0x70]
	0x0340DE4C STP X24, X23, [X31 + 0x80]
	0x0340DE50 STP X22, X21, [X31 + 0x90]
	0x0340DE54 STP X20, X19, [X31 + 0xA0]
	0x0340DE58 ADRP X25, 0xFD0000
	0x0340DE5C ADRP X24, 0xCE9000
	0x0340DE60 LDRB W8, [X25 + 0x570]
	0x0340DE64 LDR X24, [X24 + 0x280]
	0x0340DE68 MOV X20, X4
	0x0340DE6C MOV X21, X3
	0x0340DE70 MOV X19, X2
	0x0340DE74 MOV X22, X1
	0x0340DE78 MOV X23, X0
	0x0340DE7C TBNZ X8, 0x0, 0x340DEA0
	0x0340DE80 ADRP X0, 0xD21000
	0x0340DE84 LDR X0, [X0 + 0x318]
	0x0340DE88 BL 0x1C16CF4
	0x0340DE8C ADRP X0, 0xCE9000
	0x0340DE90 LDR X0, [X0 + 0x280]
	0x0340DE94 BL 0x1C16CF4
	0x0340DE98 MOVZ W8, 0x1
	0x0340DE9C STRB W8, [X25 + 0x570]
	0x0340DEA0 LDR X0, [X24]
	0x0340DEA4 MOVI V0.2D, 0x0
	0x0340DEA8 STP V0, V0, [X31 + 0x50]
	0x0340DEAC STP V0, V0, [X31 + 0x30]
	0x0340DEB0 STR V0, [X31 + 0x2]
	0x0340DEB4 ADRP X24, 0xD21000
	0x0340DEB8 LDR W8, [X0 + 0xE0]
	0x0340DEBC LDR X24, [X24 + 0x318]
	0x0340DEC0 CBNZ W8, 0x340DEC8
	0x0340DEC4 BL 0x1C16DFC
	0x0340DEC8 ADD X8, X31, 0x8
	0x0340DECC MOV X0, X31
	0x0340DED0 BL 0x32C4770
	0x0340DED4 LDUR V0, [X31 + 0x8]
	0x0340DED8 LDR X9, [X31 + 0x18]
	0x0340DEDC LDR X2, [X24]
	0x0340DEE0 ADD X8, X31, 0x20
	0x0340DEE4 STP X21, X20, [X31 + 0x58]
	0x0340DEE8 ORR X20, X8, 0xF
	0x0340DEEC MOVN W10, 0x0
	0x0340DEF0 ADD X1, X31, 0x20
	0x0340DEF4 MOV X0, X20
	0x0340DEF8 STP X23, X22, [X31 + 0x48]
	0x0340DEFC STUR V0, [X31 + 0x28]
	0x0340DF00 STP X9, X19, [X31 + 0x38]
	0x0340DF04 STR W10, [X31 + 0x20]
	0x0340DF08 BL 0x218F3B8
	0x0340DF0C MOV X0, X20
	0x0340DF10 MOV X1, X31
	0x0340DF14 BL 0x32C47F8
	0x0340DF18 LDP X20, X19, [X31 + 0xA0]
	0x0340DF1C LDP X22, X21, [X31 + 0x90]
	0x0340DF20 LDP X24, X23, [X31 + 0x80]
	0x0340DF24 LDP X30, X25, [X31 + 0x70]
	0x0340DF28 ADD X31, X31, 0xB0
	0x0340DF2C RET
	0x0340DF30 SUB X31, X31, 0xD0
	0x0340DF34 STP X29, X30, [X31 + 0x70]
	0x0340DF38 STP X28, X27, [X31 + 0x80]
	0x0340DF3C STP X26, X25, [X31 + 0x90]
	0x0340DF40 STP X24, X23, [X31 + 0xA0]
	0x0340DF44 STP X22, X21, [X31 + 0xB0]
	0x0340DF48 STP X20, X19, [X31 + 0xC0]
	0x0340DF4C ADRP X28, 0xFD0000
	0x0340DF50 ADRP X27, 0xD21000
	0x0340DF54 LDRB W8, [X28 + 0x571]
	0x0340DF58 LDR X27, [X27 + 0x320]
	0x0340DF5C MOV X19, X7
	0x0340DF60 MOV X20, X6
	0x0340DF64 MOV X21, X5
	0x0340DF68 MOV X22, X4
	0x0340DF6C MOV X23, X3
	0x0340DF70 MOV X25, X2
	0x0340DF74 MOV X26, X1
	0x0340DF78 MOV X24, X0
	0x0340DF7C TBNZ X8, 0x0, 0x340DFB8
	0x0340DF80 ADRP X0, 0xD21000
	0x0340DF84 LDR X0, [X0 + 0x328]
	0x0340DF88 BL 0x1C16CF4
	0x0340DF8C ADRP X0, 0xD21000
	0x0340DF90 LDR X0, [X0 + 0x330]
	0x0340DF94 BL 0x1C16CF4
	0x0340DF98 ADRP X0, 0xD21000
	0x0340DF9C LDR X0, [X0 + 0x338]
	0x0340DFA0 BL 0x1C16CF4
	0x0340DFA4 ADRP X0, 0xD21000
	0x0340DFA8 LDR X0, [X0 + 0x320]
	0x0340DFAC BL 0x1C16CF4
	0x0340DFB0 MOVZ W8, 0x1
	0x0340DFB4 STRB W8, [X28 + 0x571]
	0x0340DFB8 LDR X0, [X27]
	0x0340DFBC MOVI V0.2D, 0x0
	0x0340DFC0 STR X31, [X31 + 0x60]
	0x0340DFC4 STP V0, V0, [X31 + 0x40]
	0x0340DFC8 STP V0, V0, [X31 + 0x20]
	0x0340DFCC STP V0, V0, [X31]
	0x0340DFD0 ADRP X27, 0xD21000
	0x0340DFD4 ADRP X29, 0xD21000
	0x0340DFD8 ADRP X28, 0xD21000
	0x0340DFDC LDR W8, [X0 + 0xE0]
	0x0340DFE0 LDR X27, [X27 + 0x328]
	0x0340DFE4 LDR X29, [X29 + 0x330]
	0x0340DFE8 LDR X28, [X28 + 0x338]
	0x0340DFEC CBNZ W8, 0x340DFF4
	0x0340DFF0 BL 0x1C16DFC
	0x0340DFF4 LDR X0, [X27]
	0x0340DFF8 ADD X8, X31, 0x0
	0x0340DFFC ORR X27, X8, 0xF
	0x0340E000 MOV X8, X27
	0x0340E004 BL 0x263221C
	0x0340E008 LDR X2, [X29]
	0x0340E00C MOVN W8, 0x0
	0x0340E010 ADD X1, X31, 0x0
	0x0340E014 MOV X0, X27
	0x0340E018 STP X26, X25, [X31 + 0x40]
	0x0340E01C STR X23, [X31 + 0x20]
	0x0340E020 STRH W22, [X31 + 0x28]
	0x0340E024 STP X21, X24, [X31 + 0x30]
	0x0340E028 STP X20, X19, [X31 + 0x50]
	0x0340E02C STR W8, [X31]
	0x0340E030 BL 0x1FC8514
	0x0340E034 LDR X1, [X28]
	0x0340E038 MOV X0, X27
	0x0340E03C BL 0x2632230
	0x0340E040 LDP X20, X19, [X31 + 0xC0]
	0x0340E044 LDP X22, X21, [X31 + 0xB0]
	0x0340E048 LDP X24, X23, [X31 + 0xA0]
	0x0340E04C LDP X26, X25, [X31 + 0x90]
	0x0340E050 LDP X28, X27, [X31 + 0x80]
	0x0340E054 LDP X29, X30, [X31 + 0x70]
	0x0340E058 ADD X31, X31, 0xD0
	0x0340E05C RET
	0x0340E060 SUB X31, X31, 0xD0
	0x0340E064 STP X29, X30, [X31 + 0x70]
	0x0340E068 STP X28, X27, [X31 + 0x80]
	0x0340E06C STP X26, X25, [X31 + 0x90]
	0x0340E070 STP X24, X23, [X31 + 0xA0]
	0x0340E074 STP X22, X21, [X31 + 0xB0]
	0x0340E078 STP X20, X19, [X31 + 0xC0]
	0x0340E07C ADRP X28, 0xFCF000
	0x0340E080 ADRP X27, 0xD20000
	0x0340E084 LDRB W8, [X28 + 0x572]
	0x0340E088 LDR X27, [X27 + 0x320]
	0x0340E08C MOV X19, X7
	0x0340E090 MOV X20, X6
	0x0340E094 MOV X21, X5
	0x0340E098 MOV X22, X4
	0x0340E09C MOV X23, X3
	0x0340E0A0 MOV X25, X2
	0x0340E0A4 MOV X26, X1
	0x0340E0A8 MOV X24, X0
	0x0340E0AC TBNZ X8, 0x0, 0x340E0E8
	0x0340E0B0 ADRP X0, 0xD20000
	0x0340E0B4 LDR X0, [X0 + 0x328]
	0x0340E0B8 BL 0x1C16CF4
	0x0340E0BC ADRP X0, 0xD20000
	0x0340E0C0 LDR X0, [X0 + 0x340]
	0x0340E0C4 BL 0x1C16CF4
	0x0340E0C8 ADRP X0, 0xD20000
	0x0340E0CC LDR X0, [X0 + 0x338]
	0x0340E0D0 BL 0x1C16CF4
	0x0340E0D4 ADRP X0, 0xD20000
	0x0340E0D8 LDR X0, [X0 + 0x320]
	0x0340E0DC BL 0x1C16CF4
	0x0340E0E0 MOVZ W8, 0x1
	0x0340E0E4 STRB W8, [X28 + 0x572]
	0x0340E0E8 LDR X0, [X27]
	0x0340E0EC MOVI V0.2D, 0x0
	0x0340E0F0 STR X31, [X31 + 0x60]
	0x0340E0F4 STP V0, V0, [X31 + 0x40]
	0x0340E0F8 STP V0, V0, [X31 + 0x20]
	0x0340E0FC STP V0, V0, [X31]
	0x0340E100 ADRP X27, 0xD20000
	0x0340E104 ADRP X29, 0xD20000
	0x0340E108 ADRP X28, 0xD20000
	0x0340E10C LDR W8, [X0 + 0xE0]
	0x0340E110 LDR X27, [X27 + 0x328]
	0x0340E114 LDR X29, [X29 + 0x340]
	0x0340E118 LDR X28, [X28 + 0x338]
	0x0340E11C CBNZ W8, 0x340E124
	0x0340E120 BL 0x1C16DFC
	0x0340E124 LDR X0, [X27]
	0x0340E128 ADD X8, X31, 0x0
	0x0340E12C ORR X27, X8, 0xF
	0x0340E130 MOV X8, X27
	0x0340E134 BL 0x263221C
	0x0340E138 LDR X2, [X29]
	0x0340E13C MOVN W8, 0x0
	0x0340E140 ADD X1, X31, 0x0
	0x0340E144 MOV X0, X27
	0x0340E148 STP X26, X25, [X31 + 0x40]
	0x0340E14C STR X23, [X31 + 0x20]
	0x0340E150 STRH W22, [X31 + 0x28]
	0x0340E154 STP X21, X24, [X31 + 0x30]
	0x0340E158 STP X20, X19, [X31 + 0x50]
	0x0340E15C STR W8, [X31]
	0x0340E160 BL 0x1FC8614
	0x0340E164 LDR X1, [X28]
	0x0340E168 MOV X0, X27
	0x0340E16C BL 0x2632230
	0x0340E170 LDP X20, X19, [X31 + 0xC0]
	0x0340E174 LDP X22, X21, [X31 + 0xB0]
	0x0340E178 LDP X24, X23, [X31 + 0xA0]
	0x0340E17C LDP X26, X25, [X31 + 0x90]
	0x0340E180 LDP X28, X27, [X31 + 0x80]
	0x0340E184 LDP X29, X30, [X31 + 0x70]
	0x0340E188 ADD X31, X31, 0xD0
	0x0340E18C RET
	0x0340E190 SUB X31, X31, 0xD0
	0x0340E194 STP X29, X30, [X31 + 0x70]
	0x0340E198 STP X28, X27, [X31 + 0x80]
	0x0340E19C STP X26, X25, [X31 + 0x90]
	0x0340E1A0 STP X24, X23, [X31 + 0xA0]
	0x0340E1A4 STP X22, X21, [X31 + 0xB0]
	0x0340E1A8 STP X20, X19, [X31 + 0xC0]
	0x0340E1AC ADRP X28, 0xFCF000
	0x0340E1B0 ADRP X27, 0xD20000
	0x0340E1B4 LDRB W8, [X28 + 0x573]
	0x0340E1B8 LDR X27, [X27 + 0x320]
	0x0340E1BC MOV X19, X7
	0x0340E1C0 MOV X20, X6
	0x0340E1C4 MOV X21, X5
	0x0340E1C8 MOV X22, X4
	0x0340E1CC MOV X23, X3
	0x0340E1D0 MOV X25, X2
	0x0340E1D4 MOV X26, X1
	0x0340E1D8 MOV X24, X0
	0x0340E1DC TBNZ X8, 0x0, 0x340E218
	0x0340E1E0 ADRP X0, 0xD20000
	0x0340E1E4 LDR X0, [X0 + 0x328]
	0x0340E1E8 BL 0x1C16CF4
	0x0340E1EC ADRP X0, 0xD20000
	0x0340E1F0 LDR X0, [X0 + 0x348]
	0x0340E1F4 BL 0x1C16CF4
	0x0340E1F8 ADRP X0, 0xD20000
	0x0340E1FC LDR X0, [X0 + 0x338]
	0x0340E200 BL 0x1C16CF4
	0x0340E204 ADRP X0, 0xD20000
	0x0340E208 LDR X0, [X0 + 0x320]
	0x0340E20C BL 0x1C16CF4
	0x0340E210 MOVZ W8, 0x1
	0x0340E214 STRB W8, [X28 + 0x573]
	0x0340E218 LDR X0, [X27]
	0x0340E21C MOVI V0.2D, 0x0
	0x0340E220 STR X31, [X31 + 0x60]
	0x0340E224 STP V0, V0, [X31 + 0x40]
	0x0340E228 STP V0, V0, [X31 + 0x20]
	0x0340E22C STP V0, V0, [X31]
	0x0340E230 ADRP X27, 0xD20000
	0x0340E234 ADRP X29, 0xD20000
	0x0340E238 ADRP X28, 0xD20000
	0x0340E23C LDR W8, [X0 + 0xE0]
	0x0340E240 LDR X27, [X27 + 0x328]
	0x0340E244 LDR X29, [X29 + 0x348]
	0x0340E248 LDR X28, [X28 + 0x338]
	0x0340E24C CBNZ W8, 0x340E254
	0x0340E250 BL 0x1C16DFC
	0x0340E254 LDR X0, [X27]
	0x0340E258 ADD X8, X31, 0x0
	0x0340E25C ORR X27, X8, 0xF
	0x0340E260 MOV X8, X27
	0x0340E264 BL 0x263221C
	0x0340E268 LDR X2, [X29]
	0x0340E26C MOVN W8, 0x0
	0x0340E270 ADD X1, X31, 0x0
	0x0340E274 MOV X0, X27
	0x0340E278 STP X26, X25, [X31 + 0x40]
	0x0340E27C STR X23, [X31 + 0x20]
	0x0340E280 STRH W22, [X31 + 0x28]
	0x0340E284 STP X21, X24, [X31 + 0x30]
	0x0340E288 STP X20, X19, [X31 + 0x50]
	0x0340E28C STR W8, [X31]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0xFD1000
	015 Move X21, 0xCE7000
	016 Move X22, 0xCE7000
	017 Move W8, [X20+1382]
	018 Move X21, [X21+2440]
	019 Move X22, [X22+2512]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {84}
	025 Move X0, 0xD22000
	026 Move X0, [X0+568]
	027 Call 0x1C17CF4
	028 Move X0, 0xD22000
	029 Move X0, [X0+576]
	030 Call 0x1C17CF4
	031 Move X0, 0xCE7000
	032 Move X0, [X0+2904]
	033 Call 0x1C17CF4
	034 Move X0, 0xCE7000
	035 Move X0, [X0+2512]
	036 Call 0x1C17CF4
	037 Move X0, 0xD22000
	038 Move X0, [X0+592]
	039 Call 0x1C17CF4
	040 Move X0, 0xD21000
	041 Move X0, [X0+3552]
	042 Call 0x1C17CF4
	043 Move X0, 0xCE7000
	044 Move X0, [X0+2104]
	045 Call 0x1C17CF4
	046 Move X0, 0xD22000
	047 Move X0, [X0+600]
	048 Call 0x1C17CF4
	049 Move X0, 0xD21000
	050 Move X0, [X0+3560]
	051 Call 0x1C17CF4
	052 Move X0, 0xD22000
	053 Move X0, [X0+648]
	054 Call 0x1C17CF4
	055 Move X0, 0xD21000
	056 Move X0, [X0+3904]
	057 Call 0x1C17CF4
	058 Move X0, 0xD22000
	059 Move X0, [X0+616]
	060 Call 0x1C17CF4
	061 Move X0, 0xD22000
	062 Move X0, [X0+48]
	063 Call 0x1C17CF4
	064 Move X0, 0xD22000
	065 Move X0, [X0+624]
	066 Call 0x1C17CF4
	067 Move X0, 0xCE7000
	068 Move X0, [X0+2440]
	069 Call 0x1C17CF4
	070 Move X0, 0xD22000
	071 Move X0, [X0+632]
	072 Call 0x1C17CF4
	073 Move X0, 0xD22000
	074 Move X0, [X0+640]
	075 Call 0x1C17CF4
	076 Move X0, 0xD22000
	077 Move X0, [X0+656]
	078 Call 0x1C17CF4
	079 Move X0, 0xD22000
	080 Move X0, [X0+664]
	081 Call 0x1C17CF4
	082 Move W8, 1
	083 Move [X20+1382], W8
	084 Move X0, [X22]
	085 Move X21, [X21]
	086 Move W1, 4
	087 Call 0x1C17D6C
	088 Compare X0, 0
	089 JumpIfEqual {377}
	090 Move X20, X0
	091 Compare X21, 0
	092 JumpIfEqual {99}
	093 Move X8, [X20]
	094 Move X0, X21
	095 Move X1, [X8+64]
	096 Call 0x1C17E00
	097 Compare X0, 0
	098 JumpIfEqual {374}
	099 Move W8, [X20+24]
	100 Compare W8, 0
	101 JumpIfEqual {373}
	102 Move X23, 0xD22000
	103 Move X23, [X23+648]
	104 Move [X20+32], X21
	105 Move X0, [X23]
	106 Compare X0, 0
	107 JumpIfEqual {114}
	108 Move X8, [X20]
	109 Move X1, [X8+64]
	110 Call 0x1C17E00
	111 Compare X0, 0
	112 JumpIfEqual {374}
	113 Move W8, [X20+24]
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move X8, [X23]
	116 Move X9, 0xCE7000
	117 Move X9, [X9+2904]
	118 Add X1, X31, 12
	119 Move [X20+40], X8
	120 Move W8, [X19+16]
	121 Move X0, [X9]
	122 Move [X31+12], W8
	123 Call 0x1C17E04
	124 Move X21, X0
	125 Compare X0, 0
	126 JumpIfEqual {133}
	127 Move X8, [X20]
	128 Move X0, X21
	129 Move X1, [X8+64]
	130 Call 0x1C17E00
	131 Compare X0, 0
	132 JumpIfEqual {374}
	133 Move W8, [X20+24]
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move X23, 0xCE7000
	136 Move X23, [X23+2104]
	137 Move [X20+48], X21
	138 Move X0, [X23]
	139 Compare X0, 0
	140 JumpIfEqual {147}
	141 Move X8, [X20]
	142 Move X1, [X8+64]
	143 Call 0x1C17E00
	144 Compare X0, 0
	145 JumpIfEqual {374}
	146 Move W8, [X20+24]
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Move X8, [X23]
	149 Move X21, 0xD21000
	150 Move X21, [X21+3552]
	151 Move X0, X20
	152 Move X1, X31
	153 Move [X20+56], X8
	154 Call String.Concat, X0
	155 Move X2, [X19+24]
	156 Move X1, [X21]
	157 Move X3, [X23]
	158 Move X4, X31
	159 Call String.Concat, X0, X1, X2, X3
	160 Move X8, [X22]
	161 Move X21, X0
	162 Move W1, 4
	163 Move X0, X8
	164 Call 0x1C17D6C
	165 Compare X0, 0
	166 JumpIfEqual {377}
	167 Move X20, X0
	168 Compare X21, 0
	169 JumpIfEqual {176}
	170 Move X8, [X20]
	171 Move X0, X21
	172 Move X1, [X8+64]
	173 Call 0x1C17E00
	174 Compare X0, 0
	175 JumpIfEqual {374}
	176 Move W8, [X20+24]
	177 Compare W8, 0
	178 JumpIfEqual {373}
	179 Move X24, 0xD22000
	180 Move X24, [X24+616]
	181 Move [X20+32], X21
	182 Move X0, [X24]
	183 Compare X0, 0
	184 JumpIfEqual {191}
	185 Move X8, [X20]
	186 Move X1, [X8+64]
	187 Call 0x1C17E00
	188 Compare X0, 0
	189 JumpIfEqual {374}
	190 Move W8, [X20+24]
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move X8, [X24]
	193 Move X9, 0xD22000
	194 Move X9, [X9+568]
	195 Add X1, X31, 8
	196 Move [X20+40], X8
	197 Move W8, [X19+32]
	198 Move X0, [X9]
	199 Move [X31+8], W8
	200 Call 0x1C17E04
	201 Move X21, X0
	202 Compare X0, 0
	203 JumpIfEqual {210}
	204 Move X8, [X20]
	205 Move X0, X21
	206 Move X1, [X8+64]
	207 Call 0x1C17E00
	208 Compare X0, 0
	209 JumpIfEqual {374}
	210 Move W8, [X20+24]
	211 NotImplemented "Instruction CMP not yet implemented."
	212 Move [X20+48], X21
	213 Move X0, [X23]
	214 Compare X0, 0
	215 JumpIfEqual {222}
	216 Move X8, [X20]
	217 Move X1, [X8+64]
	218 Call 0x1C17E00
	219 Compare X0, 0
	220 JumpIfEqual {374}
	221 Move W8, [X20+24]
	222 NotImplemented "Instruction CMP not yet implemented."
	223 Move X25, 0xD20000
	224 Move X26, 0xD21000
	225 Move X27, 0xD21000
	226 Move X28, 0xD21000
	227 Move X25, [X25+3904]
	228 Move X26, [X26+656]
	229 Move X27, [X27+640]
	230 Move X28, [X28+664]
	231 Move X8, [X23]
	232 Move X29, 0xD21000
	233 Move X24, 0xD21000
	234 Move X21, 0xD21000
	235 Move X29, [X29+624]
	236 Move X24, [X24+600]
	237 Move X21, [X21+632]
	238 Move X0, X20
	239 Move X1, X31
	240 Move [X20+56], X8
	241 Call String.Concat, X0
	242 Move X2, [X19+40]
	243 Move X1, [X25]
	244 Move X3, [X23]
	245 Move X4, X31
	246 Call String.Concat, X0, X1, X2, X3
	247 Move X2, [X19+48]
	248 Move X1, [X26]
	249 Move X3, [X23]
	250 Move X4, X31
	251 Call String.Concat, X0, X1, X2, X3
	252 Move X2, [X19+56]
	253 Move X1, [X27]
	254 Move X3, [X23]
	255 Move X4, X31
	256 Call String.Concat, X0, X1, X2, X3
	257 Move X2, [X19+64]
	258 Move X1, [X28]
	259 Move X3, [X23]
	260 Move X4, X31
	261 Call String.Concat, X0, X1, X2, X3
	262 Move X2, [X19+72]
	263 Move X1, [X29]
	264 Move X3, [X23]
	265 Move X4, X31
	266 Call String.Concat, X0, X1, X2, X3
	267 Move X2, [X19+80]
	268 Move X1, [X24]
	269 Move X3, [X23]
	270 Move X4, X31
	271 Call String.Concat, X0, X1, X2, X3
	272 Move X2, [X19+88]
	273 Move X1, [X21]
	274 Move X3, [X23]
	275 Move X4, X31
	276 Call String.Concat, X0, X1, X2, X3
	277 Move X8, [X22]
	278 Move X21, X0
	279 Move W1, 4
	280 Move X0, X8
	281 Call 0x1C17D6C
	282 Compare X0, 0
	283 JumpIfEqual {377}
	284 Move X20, X0
	285 Compare X21, 0
	286 JumpIfEqual {293}
	287 Move X8, [X20]
	288 Move X0, X21
	289 Move X1, [X8+64]
	290 Call 0x1C17E00
	291 Compare X0, 0
	292 JumpIfEqual {374}
	293 Move W8, [X20+24]
	294 Compare W8, 0
	295 JumpIfEqual {373}
	296 Move X22, 0xD21000
	297 Move X22, [X22+592]
	298 Move [X20+32], X21
	299 Move X0, [X22]
	300 Compare X0, 0
	301 JumpIfEqual {308}
	302 Move X8, [X20]
	303 Move X1, [X8+64]
	304 Call 0x1C17E00
	305 Compare X0, 0
	306 JumpIfEqual {374}
	307 Move W8, [X20+24]
	308 NotImplemented "Instruction CMP not yet implemented."
	309 Move X8, [X22]
	310 Move X9, 0xD21000
	311 Move X9, [X9+576]
	312 Add X1, X31, 4
	313 Move [X20+40], X8
	314 Move W8, [X19+96]
	315 Move X0, [X9]
	316 Move [X31+4], W8
	317 Call 0x1C17E04
	318 Move X21, X0
	319 Compare X0, 0
	320 JumpIfEqual {327}
	321 Move X8, [X20]
	322 Move X0, X21
	323 Move X1, [X8+64]
	324 Call 0x1C17E00
	325 Compare X0, 0
	326 JumpIfEqual {374}
	327 Move W8, [X20+24]
	328 NotImplemented "Instruction CMP not yet implemented."
	329 Move [X20+48], X21
	330 Move X0, [X23]
	331 Compare X0, 0
	332 JumpIfEqual {339}
	333 Move X8, [X20]
	334 Move X1, [X8+64]
	335 Call 0x1C17E00
	336 Compare X0, 0
	337 JumpIfEqual {374}
	338 Move W8, [X20+24]
	339 NotImplemented "Instruction CMP not yet implemented."
	340 Move X8, [X23]
	341 Move X21, 0xD20000
	342 Move X22, 0xD21000
	343 Move X21, [X21+3560]
	344 Move X22, [X22+48]
	345 Move X0, X20
	346 Move X1, X31
	347 Move [X20+56], X8
	348 Call String.Concat, X0
	349 Move X2, [X19+104]
	350 Move X1, [X21]
	351 Move X3, [X23]
	352 Move X4, X31
	353 Call String.Concat, X0, X1, X2, X3
	354 Move X2, [X19+112]
	355 Move X1, [X22]
	356 Move X3, [X23]
	357 Move X4, X31
	358 Call String.Concat, X0, X1, X2, X3
	359 Move X20, [X31+96]
	360 Move X19, [X31+104]
	361 Move X22, [X31+80]
	362 Move X21, [X31+88]
	363 Move X24, [X31+64]
	364 Move X23, [X31+72]
	365 Move X26, [X31+48]
	366 Move X25, [X31+56]
	367 Move X28, [X31+32]
	368 Move X27, [X31+40]
	369 Move X29, [X31+16]
	370 Move X30, [X31+24]
	371 Add X31, X31, 112
	372 Return X0
	373 Call 0x1C17F28
	374 Call 0x1C17F44
	375 Move X1, X31
	376 Call 0x1C17DEC
	377 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0340E290 BL 0x1FC8714
	0x0340E294 LDR X1, [X28]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

