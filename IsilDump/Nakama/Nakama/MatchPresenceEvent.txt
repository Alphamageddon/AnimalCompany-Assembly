Type: Nakama.MatchPresenceEvent

Method: System.Collections.Generic.IEnumerable`1<Nakama.IUserPresence> get_Joins()

Disassembly:
	0x03475CF8 LDR X0, [X0 + 0x9D0]
	0x03475CFC BL 0x1C16CF4
	0x03475D00 ADRP X0, 0xCBB000
	0x03475D04 LDR X0, [X0 + 0x998]
	0x03475D08 BL 0x1C16CF4
	0x03475D0C MOVZ W8, 0x1
	0x03475D10 STRB W8, [X19 + 0x820]
	0x03475D14 LDR X0, [X22]
	0x03475D18 MOVZ W1, 0x5
	0x03475D1C BL 0x1C16D6C
	0x03475D20 MOV X19, X0
	0x03475D24 LDRB W8, [X20 + 0x10]
	0x03475D28 LDR X0, [X21]
	0x03475D2C ADD X1, X31, 0xC
	0x03475D30 STRB W8, [X31 + 0xC]
	0x03475D34 BL 0x1C16E04
	0x03475D38 CBZ X19, 0x3475E4C
	0x03475D3C MOV X21, X0
	0x03475D40 CBZ X0, 0x3475D58
	0x03475D44 LDR X8, [X19]
	0x03475D48 MOV X0, X21
	0x03475D4C LDR X1, [X8 + 0x40]
	0x03475D50 BL 0x1C16E00
	0x03475D54 CBZ X0, 0x3475E40
	0x03475D58 LDR W8, [X19 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xF69000
	005 Move W8, [X20+2061]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xCBC000
	012 Move X0, [X0+2056]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2061], W8
	016 Move X0, [X19+16]
	017 Compare X0, 0
	018 JumpIfNotEqual {29}
	019 Move X19, 0xCBC000
	020 Move X19, [X19+2056]
	021 Move X0, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X19]
	027 Move X8, [X0+184]
	028 Move X0, [X8]
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0

Method: System.Collections.Generic.List`1<Nakama.UserPresence> get__joins()

Disassembly:
	0x03475D5C CBZ W8, 0x3475E3C
	0x03475D60 STR X21, [X19 + 0x20]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set__joins(System.Collections.Generic.List`1<Nakama.UserPresence> value)

Disassembly:
	0x03475D64 LDR X21, [X20 + 0x18]
	0x03475D68 CBZ X21, 0x3475D84

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Collections.Generic.IEnumerable`1<Nakama.IUserPresence> get_Leaves()

Disassembly:
	0x03475D6C LDR X8, [X19]
	0x03475D70 MOV X0, X21
	0x03475D74 LDR X1, [X8 + 0x40]
	0x03475D78 BL 0x1C16E00
	0x03475D7C CBZ X0, 0x3475E40
	0x03475D80 LDR W8, [X19 + 0x18]
	0x03475D84 CMP W8, 0x1
	0x03475D88 B.LS 0x3475E3C
	0x03475D8C STR X21, [X19 + 0x28]
	0x03475D90 LDR X21, [X20 + 0x20]
	0x03475D94 CBZ X21, 0x3475DB0
	0x03475D98 LDR X8, [X19]
	0x03475D9C MOV X0, X21
	0x03475DA0 LDR X1, [X8 + 0x40]
	0x03475DA4 BL 0x1C16E00
	0x03475DA8 CBZ X0, 0x3475E40
	0x03475DAC LDR W8, [X19 + 0x18]
	0x03475DB0 CMP W8, 0x2
	0x03475DB4 B.LS 0x3475E3C
	0x03475DB8 STR X21, [X19 + 0x30]
	0x03475DBC LDR X21, [X20 + 0x28]
	0x03475DC0 CBZ X21, 0x3475DDC
	0x03475DC4 LDR X8, [X19]
	0x03475DC8 MOV X0, X21
	0x03475DCC LDR X1, [X8 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xF69000
	005 Move W8, [X20+2062]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xCBC000
	012 Move X0, [X0+2056]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2062], W8
	016 Move X0, [X19+24]
	017 Compare X0, 0
	018 JumpIfNotEqual {29}
	019 Move X19, 0xCBC000
	020 Move X19, [X19+2056]
	021 Move X0, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X19]
	027 Move X8, [X0+184]
	028 Move X0, [X8]
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0

Method: System.Collections.Generic.List`1<Nakama.UserPresence> get__leaves()

Disassembly:
	0x03475DD0 BL 0x1C16E00
	0x03475DD4 CBZ X0, 0x3475E40

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set__leaves(System.Collections.Generic.List`1<Nakama.UserPresence> value)

Disassembly:
	0x03475DD8 LDR W8, [X19 + 0x18]
	0x03475DDC CMP W8, 0x3

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.String get_MatchId()

Disassembly:
	0x03475DE0 B.LS 0x3475E3C
	0x03475DE4 STR X21, [X19 + 0x38]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_MatchId(System.String value)

Disassembly:
	0x03475DE8 LDR X20, [X20 + 0x30]
	0x03475DEC CBZ X20, 0x3475E08

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x03475DF0 LDR X8, [X19]
	0x03475DF4 MOV X0, X20
	0x03475DF8 LDR X1, [X8 + 0x40]
	0x03475DFC BL 0x1C16E00
	0x03475E00 CBZ X0, 0x3475E40
	0x03475E04 LDR W8, [X19 + 0x18]
	0x03475E08 CMP W8, 0x4
	0x03475E0C B.LS 0x3475E3C
	0x03475E10 ADRP X8, 0xCBB000
	0x03475E14 LDR X8, [X8 + 0x998]
	0x03475E18 STR X20, [X19 + 0x40]
	0x03475E1C MOV X1, X19
	0x03475E20 MOV X2, X31
	0x03475E24 LDR X0, [X8]
	0x03475E28 BL 0x3227C5C
	0x03475E2C LDP X20, X19, [X31 + 0x20]
	0x03475E30 LDP X22, X21, [X31 + 0x10]
	0x03475E34 LDR X30, [X31], #0x30
	0x03475E38 RET
	0x03475E3C BL 0x1C16F28
	0x03475E40 BL 0x1C16F44
	0x03475E44 MOV X1, X31
	0x03475E48 BL 0x1C16DEC
	0x03475E4C BL 0x1C16F20
	0x03475E50 MOV X1, X31
	0x03475E54 B 0x33BDD8C
	0x03475E58 STR X30, [X31 - 0x30]!
	0x03475E5C STP X22, X21, [X31 + 0x10]
	0x03475E60 STP X20, X19, [X31 + 0x20]
	0x03475E64 ADRP X21, 0xF68000
	0x03475E68 ADRP X22, 0xCBB000
	0x03475E6C ADRP X19, 0xCBB000
	0x03475E70 ADRP X20, 0xCBB000
	0x03475E74 LDRB W8, [X21 + 0x821]
	0x03475E78 LDR X22, [X22 + 0x838]
	0x03475E7C LDR X19, [X19 + 0x830]
	0x03475E80 LDR X20, [X20 + 0x808]
	0x03475E84 TBNZ X8, 0x0, 0x3475EB4
	0x03475E88 ADRP X0, 0xCBB000
	0x03475E8C LDR X0, [X0 + 0x830]
	0x03475E90 BL 0x1C16CF4
	0x03475E94 ADRP X0, 0xCBB000
	0x03475E98 LDR X0, [X0 + 0x838]
	0x03475E9C BL 0x1C16CF4
	0x03475EA0 ADRP X0, 0xCBB000
	0x03475EA4 LDR X0, [X0 + 0x808]
	0x03475EA8 BL 0x1C16CF4
	0x03475EAC MOVZ W8, 0x1
	0x03475EB0 STRB W8, [X21 + 0x821]
	0x03475EB4 LDR X0, [X22]
	0x03475EB8 BL 0x1C16F10
	0x03475EBC LDR X2, [X19]
	0x03475EC0 MOV W1, W31
	0x03475EC4 MOV X19, X0
	0x03475EC8 BL 0x301B830
	0x03475ECC LDR X8, [X20]
	0x03475ED0 LDP X22, X21, [X31 + 0x10]
	0x03475ED4 LDR X8, [X8 + 0xB8]
	0x03475ED8 STR X19, [X8]
	0x03475EDC LDP X20, X19, [X31 + 0x20]
	0x03475EE0 LDR X30, [X31], #0x30
	0x03475EE4 RET
	0x03475EE8 LDR X0, [X0 + 0x10]
	0x03475EEC RET
	0x03475EF0 STR X1, [X0 + 0x10]
	0x03475EF4 RET
	0x03475EF8 STR X30, [X31 - 0x30]!
	0x03475EFC STP X22, X21, [X31 + 0x10]
	0x03475F00 STP X20, X19, [X31 + 0x20]
	0x03475F04 ADRP X22, 0xF68000
	0x03475F08 ADRP X20, 0xCBB000
	0x03475F0C ADRP X21, 0xCBA000
	0x03475F10 LDRB W8, [X22 + 0x822]
	0x03475F14 LDR X20, [X20 + 0x9A0]
	0x03475F18 LDR X21, [X21 + 0x5B8]
	0x03475F1C MOV X19, X0
	0x03475F20 TBNZ X8, 0x0, 0x3475F44
	0x03475F24 ADRP X0, 0xCBA000
	0x03475F28 LDR X0, [X0 + 0x5B8]
	0x03475F2C BL 0x1C16CF4
	0x03475F30 ADRP X0, 0xCBB000
	0x03475F34 LDR X0, [X0 + 0x9A0]
	0x03475F38 BL 0x1C16CF4
	0x03475F3C MOVZ W8, 0x1
	0x03475F40 STRB W8, [X22 + 0x822]
	0x03475F44 LDR X1, [X19 + 0x10]
	0x03475F48 LDR X0, [X20]
	0x03475F4C LDR X2, [X21]
	0x03475F50 LDP X20, X19, [X31 + 0x20]
	0x03475F54 LDP X22, X21, [X31 + 0x10]
	0x03475F58 MOV X3, X31
	0x03475F5C LDR X30, [X31], #0x30
	0x03475F60 B 0x32274B8
	0x03475F64 MOV X1, X31
	0x03475F68 B 0x33BDD8C
	0x03475F6C LDR X0, [X0 + 0x10]
	0x03475F70 RET
	0x03475F74 STR X1, [X0 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xF69000
	008 Move X22, 0xC7F000
	009 Move X23, 0xCBC000
	010 Move X21, 0xC7F000
	011 Move W8, [X20+2063]
	012 Move X22, [X22+2104]
	013 Move X23, [X23+2072]
	014 Move X21, [X21+2760]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {43}
	020 Move X0, 0xC7F000
	021 Move X0, [X0+2760]
	022 Call 0x1C17CF4
	023 Move X0, 0xCBC000
	024 Move X0, [X0+2072]
	025 Call 0x1C17CF4
	026 Move X0, 0xCBC000
	027 Move X0, [X0+2368]
	028 Call 0x1C17CF4
	029 Move X0, 0xCBB000
	030 Move X0, [X0+1464]
	031 Call 0x1C17CF4
	032 Move X0, 0xCBC000
	033 Move X0, [X0+2128]
	034 Call 0x1C17CF4
	035 Move X0, 0xC7F000
	036 Move X0, [X0+2104]
	037 Call 0x1C17CF4
	038 Move X0, 0xCBC000
	039 Move X0, [X0+2376]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X20+2063], W8
	043 Move X0, X19
	044 Call MatchPresenceEvent.get_Joins, X0
	045 Move X8, [X22]
	046 Move X2, [X23]
	047 Move X1, X0
	048 Move X0, X8
	049 Call String.Join, X0, X1
	050 Move X20, X0
	051 Move X0, X19
	052 Call MatchPresenceEvent.get_Leaves, X0
	053 Move X8, [X22]
	054 Move X2, [X23]
	055 Move X1, X0
	056 Move X0, X8
	057 Call String.Join, X0, X1
	058 Move X8, [X21]
	059 Move X21, X0
	060 Move W1, 7
	061 Move X0, X8
	062 Call 0x1C17D6C
	063 Compare X0, 0
	064 JumpIfEqual {104}
	065 Move W8, [X0+24]
	066 Compare W8, 0
	067 JumpIfEqual {103}
	068 Move X9, 0xCBC000
	069 Move X9, [X9+2368]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X9, [X9]
	072 Move [X0+32], X9
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move [X0+40], X20
	075 Move X9, 0xCBC000
	076 Move X9, [X9+2128]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X9, [X9]
	079 Move [X0+48], X9
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move [X0+56], X21
	082 Move X9, 0xCBC000
	083 Move X9, [X9+2376]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X9, [X9]
	086 Move [X0+64], X9
	087 Move X9, [X19+32]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move [X0+72], X9
	090 Move X8, 0xCBB000
	091 Move X8, [X8+1464]
	092 Move X20, [X31+32]
	093 Move X19, [X31+40]
	094 Move X22, [X31+16]
	095 Move X21, [X31+24]
	096 Move X1, X31
	097 Move X8, [X8]
	098 Move [X0+80], X8
	099 Move X30, [X31+48]
	100 Move X23, [X31+56]
	101 Call String.Concat, X0
	102 Return X0
	103 Call 0x1C17F28
	104 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03475F78 RET
	0x03475F7C LDR X0, [X0 + 0x18]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

