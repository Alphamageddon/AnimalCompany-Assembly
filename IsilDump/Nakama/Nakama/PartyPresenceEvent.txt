Type: Nakama.PartyPresenceEvent

Method: System.String get_PartyId()

Disassembly:
	0x034787D8 MOV X1, X0
	0x034787DC MOV X0, X21

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_PartyId(System.String value)

Disassembly:
	0x034787E0 BL 0x1C16DEC
	0x034787E4 BL 0x1C16F20

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Collections.Generic.IEnumerable`1<Nakama.IUserPresence> get_Leaves()

Disassembly:
	0x034787E8 BL 0x1C16F20
	0x034787EC BL 0x1C16F20
	0x034787F0 BL 0x1C16F20
	0x034787F4 MOV X0, X21
	0x034787F8 BL 0x1C171E0
	0x034787FC BL 0x1C16F20
	0x03478800 BL 0x1C16F20
	0x03478804 BL 0x1C16F20
	0x03478808 BL 0x1C16F20
	0x0347880C B 0x34788E4
	0x03478810 B 0x3478858
	0x03478814 B 0x34788E4
	0x03478818 B 0x34788E4
	0x0347881C B 0x34788E4
	0x03478820 B 0x34788E4
	0x03478824 B 0x34788E4
	0x03478828 B 0x34788E4
	0x0347882C B 0x34788E4
	0x03478830 B 0x34788E4
	0x03478834 B 0x3478858
	0x03478838 B 0x3478858
	0x0347883C B 0x3478858
	0x03478840 B 0x34788E4
	0x03478844 B 0x34788E4
	0x03478848 B 0x34788E4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xF66000
	005 Move W8, [X20+2109]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xCB9000
	012 Move X0, [X0+2056]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2109], W8
	016 Move X0, [X19+24]
	017 Compare X0, 0
	018 JumpIfNotEqual {29}
	019 Move X19, 0xCB9000
	020 Move X19, [X19+2056]
	021 Move X0, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X19]
	027 Move X8, [X0+184]
	028 Move X0, [X8]
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0

Method: System.Collections.Generic.List`1<Nakama.UserPresence> get_LeavesField()

Disassembly:
	0x0347884C B 0x34788E4
	0x03478850 B 0x34788E4

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_LeavesField(System.Collections.Generic.List`1<Nakama.UserPresence> value)

Disassembly:
	0x03478854 B 0x3478858
	0x03478858 MOV X22, X1

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.Collections.Generic.IEnumerable`1<Nakama.IUserPresence> get_Joins()

Disassembly:
	0x0347885C MOV X21, X0
	0x03478860 CMP W22, 0x1
	0x03478864 B.NE 0x34788EC
	0x03478868 MOV X0, X21
	0x0347886C BL 0x3EB1AD0
	0x03478870 MOV X21, X0
	0x03478874 ADRP X0, 0xC7B000
	0x03478878 LDR X0, [X0 + 0x7D0]
	0x0347887C BL 0x1C16D08
	0x03478880 LDR X8, [X21]
	0x03478884 LDR X1, [X8]
	0x03478888 BL 0x1C17270
	0x0347888C TBZ X0, 0x0, 0x34788A8
	0x03478890 LDR X21, [X21]
	0x03478894 BL 0x3EB1AE0
	0x03478898 MOVZ W8, 0x1
	0x0347889C STR X21, [X19 + 0x38]
	0x034788A0 STR W8, [X19 + 0x40]
	0x034788A4 B 0x34785F0
	0x034788A8 MOVZ W0, 0x8
	0x034788AC BL 0x3EB1AF0
	0x034788B0 LDR X8, [X21]
	0x034788B4 STR X8, [X0]
	0x034788B8 ADRP X1, 0xA3C000
	0x034788BC ADD X1, X1, 0xE58

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xF66000
	005 Move W8, [X20+2110]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xCB9000
	012 Move X0, [X0+2056]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2110], W8
	016 Move X0, [X19+32]
	017 Compare X0, 0
	018 JumpIfNotEqual {29}
	019 Move X19, 0xCB9000
	020 Move X19, [X19+2056]
	021 Move X0, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X19]
	027 Move X8, [X0+184]
	028 Move X0, [X8]
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0

Method: System.Collections.Generic.List`1<Nakama.UserPresence> get_JoinsField()

Disassembly:
	0x034788C0 MOV X2, X31
	0x034788C4 BL 0x3EB1B00

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_JoinsField(System.Collections.Generic.List`1<Nakama.UserPresence> value)

Disassembly:
	0x034788C8 B 0x3478978
	0x034788CC B 0x34788E4

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x034788D0 MOV X22, X1
	0x034788D4 MOV X21, X0
	0x034788D8 BL 0x3EB1AE0
	0x034788DC B 0x34788EC
	0x034788E0 B 0x34788E4
	0x034788E4 MOV X22, X1
	0x034788E8 MOV X21, X0
	0x034788EC CMP W22, 0x1
	0x034788F0 B.NE 0x3478980
	0x034788F4 MOV X0, X21
	0x034788F8 BL 0x3EB1AD0
	0x034788FC MOV X20, X0
	0x03478900 ADRP X0, 0xC7B000
	0x03478904 LDR X0, [X0 + 0x7D0]
	0x03478908 BL 0x1C16D08
	0x0347890C LDR X8, [X20]
	0x03478910 LDR X1, [X8]
	0x03478914 BL 0x1C17270
	0x03478918 TBZ X0, 0x0, 0x3478958
	0x0347891C LDR X20, [X20]
	0x03478920 BL 0x3EB1AE0
	0x03478924 MOVN W8, 0x1
	0x03478928 STR W8, [X19], #0x8
	0x0347892C ADRP X0, 0xC7E000
	0x03478930 LDR X0, [X0 + 0x280]
	0x03478934 BL 0x1C16D08
	0x03478938 LDR W8, [X0 + 0xE0]
	0x0347893C CBNZ W8, 0x3478944
	0x03478940 BL 0x1C16DFC
	0x03478944 MOV X0, X19
	0x03478948 MOV X1, X20
	0x0347894C MOV X2, X31
	0x03478950 BL 0x32C4908
	0x03478954 B 0x34787B8
	0x03478958 MOVZ W0, 0x8
	0x0347895C BL 0x3EB1AF0
	0x03478960 LDR X8, [X20]
	0x03478964 STR X8, [X0]
	0x03478968 ADRP X1, 0xA3C000
	0x0347896C ADD X1, X1, 0xE58
	0x03478970 MOV X2, X31
	0x03478974 BL 0x3EB1B00
	0x03478978 MOV X21, X0
	0x0347897C BL 0x3EB1AE0
	0x03478980 MOV X0, X21
	0x03478984 BL 0x1D2C690
	0x03478988 BL 0x1990590
	0x0347898C STR X30, [X31 - 0x30]!
	0x03478990 STP X22, X21, [X31 + 0x10]
	0x03478994 STP X20, X19, [X31 + 0x20]
	0x03478998 ADRP X21, 0xF65000
	0x0347899C ADRP X22, 0xC7E000
	0x034789A0 LDRB W8, [X21 + 0x84B]
	0x034789A4 LDR X22, [X22 + 0x280]
	0x034789A8 MOV X19, X1
	0x034789AC MOV X20, X0
	0x034789B0 TBNZ X8, 0x0, 0x34789C8
	0x034789B4 ADRP X0, 0xC7E000
	0x034789B8 LDR X0, [X0 + 0x280]
	0x034789BC BL 0x1C16CF4
	0x034789C0 MOVZ W8, 0x1
	0x034789C4 STRB W8, [X21 + 0x84B]
	0x034789C8 LDR X0, [X22]
	0x034789CC LDR W8, [X0 + 0xE0]
	0x034789D0 CBNZ W8, 0x34789D8
	0x034789D4 BL 0x1C16DFC
	0x034789D8 ADD X0, X20, 0x8
	0x034789DC MOV X1, X19
	0x034789E0 LDP X20, X19, [X31 + 0x20]
	0x034789E4 LDP X22, X21, [X31 + 0x10]
	0x034789E8 MOV X2, X31
	0x034789EC LDR X30, [X31], #0x30
	0x034789F0 B 0x32C477C
	0x034789F4 LDR X8, [X0 + 0x40]
	0x034789F8 LDR X5, [X0 + 0x18]
	0x034789FC LDR X4, [X0 + 0x28]
	0x03478A00 MOV X0, X8
	0x03478A04 BR X5
	0x03478A08 SUB X31, X31, 0x70
	0x03478A0C STP X30, X25, [X31 + 0x30]
	0x03478A10 STP X24, X23, [X31 + 0x40]
	0x03478A14 STP X22, X21, [X31 + 0x50]
	0x03478A18 STP X20, X19, [X31 + 0x60]
	0x03478A1C ADRP X25, 0xF65000
	0x03478A20 STR W2, [X31 + 0x2C]
	0x03478A24 ADRP X24, 0xC7B000
	0x03478A28 LDRB W8, [X25 + 0x84C]
	0x03478A2C LDR X24, [X24 + 0x758]
	0x03478A30 MOV X19, X5
	0x03478A34 MOV X20, X4
	0x03478A38 MOV X22, X3
	0x03478A3C MOV X23, X1
	0x03478A40 MOV X21, X0
	0x03478A44 TBNZ X8, 0x0, 0x3478A5C
	0x03478A48 ADRP X0, 0xC7B000
	0x03478A4C LDR X0, [X0 + 0x758]
	0x03478A50 BL 0x1C16CF4
	0x03478A54 MOVZ W8, 0x1
	0x03478A58 STRB W8, [X25 + 0x84C]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xF66000
	007 Move X21, 0xC7C000
	008 Move W8, [X20+2111]
	009 Move X21, [X21+2760]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {38}
	015 Move X0, 0xC7C000
	016 Move X0, [X0+2760]
	017 Call 0x1C17CF4
	018 Move X0, 0xCB9000
	019 Move X0, [X0+2072]
	020 Call 0x1C17CF4
	021 Move X0, 0xCB9000
	022 Move X0, [X0+2416]
	023 Call 0x1C17CF4
	024 Move X0, 0xC7C000
	025 Move X0, [X0+2104]
	026 Call 0x1C17CF4
	027 Move X0, 0xCB9000
	028 Move X0, [X0+2712]
	029 Call 0x1C17CF4
	030 Move X0, 0xCB9000
	031 Move X0, [X0+2408]
	032 Call 0x1C17CF4
	033 Move X0, 0xCB9000
	034 Move X0, [X0+2720]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X20+2111], W8
	038 Move X0, [X21]
	039 Move W1, 7
	040 Call 0x1C17D6C
	041 Compare X0, 0
	042 JumpIfEqual {103}
	043 Move W8, [X0+24]
	044 Move X20, X0
	045 Compare W8, 0
	046 JumpIfEqual {102}
	047 Move X9, 0xCB9000
	048 Move X9, [X9+2712]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X9, [X9]
	051 Move [X20+32], X9
	052 Move X9, [X19+16]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move [X20+40], X9
	055 Move X8, 0xCB9000
	056 Move X8, [X8+2720]
	057 Move X22, 0xC7C000
	058 Move X21, 0xCB9000
	059 Move X0, X19
	060 Move X8, [X8]
	061 Move X22, [X22+2104]
	062 Move X21, [X21+2072]
	063 Move [X20+48], X8
	064 Call PartyPresenceEvent.get_Leaves, X0
	065 Move X8, [X22]
	066 Move X2, [X21]
	067 Move X1, X0
	068 Move X0, X8
	069 Call String.Join, X0, X1
	070 Move W8, [X20+24]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move [X20+56], X0
	074 Move X8, 0xCB9000
	075 Move X8, [X8+2416]
	076 Move X0, X19
	077 Move X8, [X8]
	078 Move [X20+64], X8
	079 Call PartyPresenceEvent.get_Joins, X0
	080 Move X8, [X22]
	081 Move X2, [X21]
	082 Move X1, X0
	083 Move X0, X8
	084 Call String.Join, X0, X1
	085 Move W8, [X20+24]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move [X20+72], X0
	089 Move X8, 0xCB9000
	090 Move X8, [X8+2408]
	091 Move X0, X20
	092 Move X22, [X31+16]
	093 Move X21, [X31+24]
	094 Move X1, X31
	095 Move X8, [X8]
	096 Move [X20+80], X8
	097 Move X20, [X31+32]
	098 Move X19, [X31+40]
	099 Move X30, [X31+48]
	100 Call String.Concat, X0
	101 Return X0
	102 Call 0x1C17F28
	103 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03478A5C LDR X0, [X24]
	0x03478A60 ADD X1, X31, 0x2C

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

