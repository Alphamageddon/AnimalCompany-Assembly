Type: Nakama.ChannelUpdateMessage

Method: System.String get_ChannelId()

Disassembly:
	0x0343FF4C STR X31, [X31 + 0x60]
	0x0343FF50 STP V0, V0, [X31 + 0x40]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_ChannelId(System.String value)

Disassembly:
	0x0343FF54 STP V0, V0, [X31 + 0x20]
	0x0343FF58 STP V0, V0, [X31]

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.String get_MessageId()

Disassembly:
	0x0343FF5C ADRP X29, 0xCF0000
	0x0343FF60 ADRP X28, 0xCF0000

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_MessageId(System.String value)

Disassembly:
	0x0343FF64 ADRP X27, 0xCF0000
	0x0343FF68 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.String get_Content()

Disassembly:
	0x0343FF6C LDR X29, [X29 + 0x638]
	0x0343FF70 LDR X28, [X28 + 0x660]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_Content(System.String value)

Disassembly:
	0x0343FF74 LDR X27, [X27 + 0x648]
	0x0343FF78 CBNZ W8, 0x343FF80

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x0343FF7C BL 0x1C16DFC
	0x0343FF80 LDR X0, [X29]
	0x0343FF84 ADD X8, X31, 0x0
	0x0343FF88 AND W29, W26, 0x1
	0x0343FF8C ORR X26, X8, 0xF
	0x0343FF90 MOV X8, X26
	0x0343FF94 BL 0x263221C
	0x0343FF98 LDR X2, [X28]
	0x0343FF9C MOVN W8, 0x0
	0x0343FFA0 ADD X1, X31, 0x0
	0x0343FFA4 MOV X0, X26
	0x0343FFA8 STP X25, X24, [X31 + 0x20]
	0x0343FFAC STRB W29, [X31 + 0x40]
	0x0343FFB0 STP X23, X22, [X31 + 0x30]
	0x0343FFB4 STP X19, X21, [X31 + 0x50]
	0x0343FFB8 STR X20, [X31 + 0x48]
	0x0343FFBC STR W8, [X31]
	0x0343FFC0 BL 0x1FCC714
	0x0343FFC4 LDR X1, [X27]
	0x0343FFC8 MOV X0, X26
	0x0343FFCC BL 0x2632230
	0x0343FFD0 LDP X20, X19, [X31 + 0xC0]
	0x0343FFD4 LDP X22, X21, [X31 + 0xB0]
	0x0343FFD8 LDP X24, X23, [X31 + 0xA0]
	0x0343FFDC LDP X26, X25, [X31 + 0x90]
	0x0343FFE0 LDP X28, X27, [X31 + 0x80]
	0x0343FFE4 LDP X29, X30, [X31 + 0x70]
	0x0343FFE8 ADD X31, X31, 0xD0
	0x0343FFEC RET
	0x0343FFF0 SUB X31, X31, 0xD0
	0x0343FFF4 STP X29, X30, [X31 + 0x70]
	0x0343FFF8 STP X28, X27, [X31 + 0x80]
	0x0343FFFC STP X26, X25, [X31 + 0x90]
	0x03440000 STP X24, X23, [X31 + 0xA0]
	0x03440004 STP X22, X21, [X31 + 0xB0]
	0x03440008 STP X20, X19, [X31 + 0xC0]
	0x0344000C ADRP X28, 0xF9D000
	0x03440010 ADRP X27, 0xCEF000
	0x03440014 LDRB W8, [X28 + 0x6B0]
	0x03440018 LDR X27, [X27 + 0x630]
	0x0344001C MOV X19, X7
	0x03440020 MOV X20, X6
	0x03440024 MOV X21, X5
	0x03440028 MOV W25, W4
	0x0344002C MOV W26, W3
	0x03440030 MOV X22, X2
	0x03440034 MOV X23, X1
	0x03440038 MOV X24, X0
	0x0344003C TBNZ X8, 0x0, 0x3440078
	0x03440040 ADRP X0, 0xCEF000
	0x03440044 LDR X0, [X0 + 0x638]
	0x03440048 BL 0x1C16CF4
	0x0344004C ADRP X0, 0xCEF000
	0x03440050 LDR X0, [X0 + 0x668]
	0x03440054 BL 0x1C16CF4
	0x03440058 ADRP X0, 0xCEF000
	0x0344005C LDR X0, [X0 + 0x648]
	0x03440060 BL 0x1C16CF4
	0x03440064 ADRP X0, 0xCEF000
	0x03440068 LDR X0, [X0 + 0x630]
	0x0344006C BL 0x1C16CF4
	0x03440070 MOVZ W8, 0x1
	0x03440074 STRB W8, [X28 + 0x6B0]
	0x03440078 LDR X0, [X27]
	0x0344007C MOVI V0.2D, 0x0
	0x03440080 STR X31, [X31 + 0x60]
	0x03440084 STP V0, V0, [X31 + 0x40]
	0x03440088 STP V0, V0, [X31 + 0x20]
	0x0344008C STP V0, V0, [X31]
	0x03440090 ADRP X29, 0xCEF000
	0x03440094 ADRP X28, 0xCEF000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xF9F000
	006 Move X21, 0xCB5000
	007 Move W8, [X20+1699]
	008 Move X21, [X21+2760]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0xCB5000
	015 Move X0, [X0+2760]
	016 Call 0x1C17CF4
	017 Move X0, 0xCF1000
	018 Move X0, [X0+1464]
	019 Call 0x1C17CF4
	020 Move X0, 0xCF1000
	021 Move X0, [X0+1504]
	022 Call 0x1C17CF4
	023 Move X0, 0xCF1000
	024 Move X0, [X0+1488]
	025 Call 0x1C17CF4
	026 Move X0, 0xCF1000
	027 Move X0, [X0+1480]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+1699], W8
	031 Move X0, [X21]
	032 Move W1, 7
	033 Call 0x1C17D6C
	034 Compare X0, 0
	035 JumpIfEqual {75}
	036 Move W8, [X0+24]
	037 Compare W8, 0
	038 JumpIfEqual {74}
	039 Move X9, 0xCF1000
	040 Move X9, [X9+1504]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X9, [X9]
	043 Move [X0+32], X9
	044 Move X9, [X19+16]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move [X0+40], X9
	047 Move X9, 0xCF0000
	048 Move X9, [X9+1480]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X9, [X9]
	051 Move [X0+48], X9
	052 Move X9, [X19+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move [X0+56], X9
	055 Move X9, 0xCF0000
	056 Move X9, [X9+1488]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X9, [X9]
	059 Move [X0+64], X9
	060 Move X9, [X19+32]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move [X0+72], X9
	063 Move X8, 0xCF0000
	064 Move X8, [X8+1464]
	065 Move X20, [X31+16]
	066 Move X19, [X31+24]
	067 Move X1, X31
	068 Move X8, [X8]
	069 Move [X0+80], X8
	070 Move X30, [X31+32]
	071 Move X21, [X31+40]
	072 Call String.Concat, X0
	073 Return X0
	074 Call 0x1C17F28
	075 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03440098 ADRP X27, 0xCEF000
	0x0344009C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

