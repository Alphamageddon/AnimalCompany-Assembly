Type: Nakama.PartyDataSend

Method: System.String get_PartyId()

Disassembly:
	0x03477D78 RET
	0x03477D7C LDR W0, [X0 + 0x20]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_PartyId(System.String value)

Disassembly:
	0x03477D80 RET
	0x03477D84 LDR X0, [X0 + 0x28]

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.String get_OpCode()

Disassembly:
	0x03477D88 RET
	0x03477D8C STR X30, [X31 - 0x40]!

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_OpCode(System.String value)

Disassembly:
	0x03477D90 STP X24, X23, [X31 + 0x10]
	0x03477D94 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.String get_Data()

Disassembly:
	0x03477D98 STP X20, X19, [X31 + 0x30]
	0x03477D9C ADRP X23, 0xF66000

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_Data(System.String value)

Disassembly:
	0x03477DA0 ADRP X24, 0xCB8000
	0x03477DA4 ADRP X22, 0xCB8000

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x03477DA8 LDRB W8, [X23 + 0x843]
	0x03477DAC LDR X24, [X24 + 0x5F0]
	0x03477DB0 LDR X22, [X22 + 0x5F8]
	0x03477DB4 MOV W19, W2
	0x03477DB8 MOV W21, W1
	0x03477DBC MOV X20, X0
	0x03477DC0 TBNZ X8, 0x0, 0x3477DE4
	0x03477DC4 ADRP X0, 0xCB8000
	0x03477DC8 LDR X0, [X0 + 0x5F0]
	0x03477DCC BL 0x1C16CF4
	0x03477DD0 ADRP X0, 0xCB8000
	0x03477DD4 LDR X0, [X0 + 0x5F8]
	0x03477DD8 BL 0x1C16CF4
	0x03477DDC MOVZ W8, 0x1
	0x03477DE0 STRB W8, [X23 + 0x843]
	0x03477DE4 LDR X0, [X24]
	0x03477DE8 BL 0x1C16F10
	0x03477DEC LDR X2, [X22]
	0x03477DF0 MOV X1, X31
	0x03477DF4 MOV X22, X0
	0x03477DF8 BL 0x3477E2C
	0x03477DFC MOV X0, X20
	0x03477E00 MOV X1, X31
	0x03477E04 BL 0x33BDD8C
	0x03477E08 STR W21, [X20 + 0x10]
	0x03477E0C STR X31, [X20 + 0x28]
	0x03477E10 STR W19, [X20 + 0x20]
	0x03477E14 STR X22, [X20 + 0x18]
	0x03477E18 LDP X20, X19, [X31 + 0x30]
	0x03477E1C LDP X22, X21, [X31 + 0x20]
	0x03477E20 LDP X24, X23, [X31 + 0x10]
	0x03477E24 LDR X30, [X31], #0x40
	0x03477E28 RET
	0x03477E2C STR X30, [X31 - 0x30]!
	0x03477E30 STP X22, X21, [X31 + 0x10]
	0x03477E34 STP X20, X19, [X31 + 0x20]
	0x03477E38 LDR X8, [X2 + 0x8]
	0x03477E3C STP X1, X2, [X0 + 0x20]
	0x03477E40 MOV X19, X0
	0x03477E44 MOV X20, X2
	0x03477E48 STR X8, [X0 + 0x10]
	0x03477E4C LDRB W22, [X2 + 0x52]
	0x03477E50 STR X0, [X0 + 0x40]
	0x03477E54 MOV X0, X2
	0x03477E58 MOV X21, X1
	0x03477E5C BL 0x1C16D84
	0x03477E60 TBZ X0, 0x0, 0x3477E78
	0x03477E64 CMP W22, 0x3
	0x03477E68 B.NE 0x3477EB4
	0x03477E6C ADRP X8, 0xFFFFFFFFFE746000
	0x03477E70 ADD X8, X8, 0xF84
	0x03477E74 B 0x3477EF8
	0x03477E78 CMP W22, 0x2
	0x03477E7C B.NE 0x3477EB0
	0x03477E80 LDRB W8, [X19 + 0x70]
	0x03477E84 CBZ W8, 0x3477EC8
	0x03477E88 MOV X0, X20
	0x03477E8C BL 0x1C16D7C
	0x03477E90 MOV W21, W0
	0x03477E94 MOV X0, X20
	0x03477E98 BL 0x1C17238
	0x03477E9C TBZ X21, 0x0, 0x3477ED4
	0x03477EA0 TBZ X0, 0x0, 0x3477EE4
	0x03477EA4 ADRP X8, 0xFFFFFFFFFE747000
	0x03477EA8 ADD X8, X8, 0xC0
	0x03477EAC B 0x3477EF8
	0x03477EB0 CBZ X21, 0x3477F18
	0x03477EB4 LDR X8, [X19 + 0x10]
	0x03477EB8 LDR X9, [X19 + 0x20]
	0x03477EBC STR X8, [X19 + 0x18]
	0x03477EC0 STR X9, [X19 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xF67000
	006 Move X21, 0xC7D000
	007 Move W8, [X20+2098]
	008 Move X21, [X21+2760]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0xC7D000
	015 Move X0, [X0+2760]
	016 Call 0x1C17CF4
	017 Move X0, 0xCBA000
	018 Move X0, [X0+2608]
	019 Call 0x1C17CF4
	020 Move X0, 0xCB9000
	021 Move X0, [X0+1464]
	022 Call 0x1C17CF4
	023 Move X0, 0xCBA000
	024 Move X0, [X0+2528]
	025 Call 0x1C17CF4
	026 Move X0, 0xCBA000
	027 Move X0, [X0+2616]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+2098], W8
	031 Move X0, [X21]
	032 Move W1, 7
	033 Call 0x1C17D6C
	034 Compare X0, 0
	035 JumpIfEqual {75}
	036 Move W8, [X0+24]
	037 Compare W8, 0
	038 JumpIfEqual {74}
	039 Move X9, 0xCBA000
	040 Move X9, [X9+2608]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X9, [X9]
	043 Move [X0+32], X9
	044 Move X9, [X19+16]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move [X0+40], X9
	047 Move X9, 0xCBA000
	048 Move X9, [X9+2528]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X9, [X9]
	051 Move [X0+48], X9
	052 Move X9, [X19+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move [X0+56], X9
	055 Move X9, 0xCBA000
	056 Move X9, [X9+2616]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X9, [X9]
	059 Move [X0+64], X9
	060 Move X9, [X19+32]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move [X0+72], X9
	063 Move X8, 0xCB9000
	064 Move X8, [X8+1464]
	065 Move X20, [X31+16]
	066 Move X19, [X31+24]
	067 Move X1, X31
	068 Move X8, [X8]
	069 Move [X0+80], X8
	070 Move X30, [X31+32]
	071 Move X21, [X31+40]
	072 Call String.Concat, X0
	073 Return X0
	074 Call 0x1C17F28
	075 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03477EC4 B 0x3477EFC
	0x03477EC8 ADRP X8, 0xFFFFFFFFFE746000

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

