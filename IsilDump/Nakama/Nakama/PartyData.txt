Type: Nakama.PartyData

Method: System.String get_PartyId()

Disassembly:
	0x03477A50 B 0x32278CC
	0x03477A54 BL 0x1C16F28

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_PartyId(System.String value)

Disassembly:
	0x03477A58 BL 0x1C16F20
	0x03477A5C MOV X1, X31

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: Nakama.IUserPresence get_Presence()

Disassembly:
	0x03477A60 B 0x33BDD8C
	0x03477A64 LDR X0, [X0 + 0x10]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: Nakama.UserPresence get_PresenceField()

Disassembly:
	0x03477A68 RET
	0x03477A6C STR X1, [X0 + 0x10]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_PresenceField(Nakama.UserPresence value)

Disassembly:
	0x03477A70 RET
	0x03477A74 LDR X0, [X0 + 0x18]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.Int64 get_OpCode()

Disassembly:
	0x03477A78 RET
	0x03477A7C STR X1, [X0 + 0x18]
	0x03477A80 RET
	0x03477A84 STP X30, X21, [X31 - 0x20]!
	0x03477A88 STP X20, X19, [X31 + 0x10]
	0x03477A8C ADRP X21, 0xF66000
	0x03477A90 ADRP X20, 0xCB9000
	0x03477A94 LDRB W8, [X21 + 0x840]
	0x03477A98 LDR X20, [X20 + 0xAA8]
	0x03477A9C MOV X19, X0
	0x03477AA0 TBNZ X8, 0x0, 0x3477AB8
	0x03477AA4 ADRP X0, 0xCB9000
	0x03477AA8 LDR X0, [X0 + 0xAA8]
	0x03477AAC BL 0x1C16CF4
	0x03477AB0 MOVZ W8, 0x1
	0x03477AB4 STRB W8, [X21 + 0x840]
	0x03477AB8 LDP X1, X2, [X19 + 0x10]
	0x03477ABC LDR X0, [X20]
	0x03477AC0 LDP X20, X19, [X31 + 0x10]
	0x03477AC4 MOV X3, X31
	0x03477AC8 LDP X30, X21, [X31], #0x20
	0x03477ACC B 0x3227BD4
	0x03477AD0 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xF67000
	006 Move X20, 0xC86000
	007 Move W8, [X21+2094]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xC86000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2094], W8
	019 Move X0, [X20]
	020 Move X19, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToInt64, X0
	032 Return X0

Method: System.String get_OpCodeField()

Disassembly:
	0x03477AD4 B 0x33BDD8C
	0x03477AD8 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_OpCodeField(System.String value)

Disassembly:
	0x03477ADC STP X20, X19, [X31 + 0x10]
	0x03477AE0 ADRP X20, 0xF66000

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.Byte[] get_Data()

Disassembly:
	0x03477AE4 ADRP X21, 0xCB9000
	0x03477AE8 LDRB W8, [X20 + 0x842]
	0x03477AEC LDR X21, [X21 + 0x808]
	0x03477AF0 MOV X19, X0
	0x03477AF4 TBNZ X8, 0x0, 0x3477B18
	0x03477AF8 ADRP X0, 0xC7C000
	0x03477AFC LDR X0, [X0 + 0xF60]
	0x03477B00 BL 0x1C16CF4
	0x03477B04 ADRP X0, 0xCB9000
	0x03477B08 LDR X0, [X0 + 0x808]
	0x03477B0C BL 0x1C16CF4
	0x03477B10 MOVZ W8, 0x1
	0x03477B14 STRB W8, [X20 + 0x842]
	0x03477B18 LDR X0, [X21]
	0x03477B1C BL 0x1C16F10
	0x03477B20 MOV X1, X31
	0x03477B24 MOV X20, X0
	0x03477B28 BL 0x33BDD8C
	0x03477B2C CBZ X19, 0x3477D2C
	0x03477B30 ADRP X21, 0xC7C000
	0x03477B34 LDR X8, [X19]
	0x03477B38 LDR X21, [X21 + 0xF60]
	0x03477B3C LDRH W9, [X8 + 0x12E]
	0x03477B40 LDR X1, [X21]
	0x03477B44 CBZ X9, 0x3477B68
	0x03477B48 LDR X10, [X8 + 0xB0]
	0x03477B4C ADD X10, X10, 0x8
	0x03477B50 LDUR X11, [X10 - 0x8]
	0x03477B54 CMP X11, X1
	0x03477B58 B.EQ 0x3477B78
	0x03477B5C SUBS X9, X9, 0x1
	0x03477B60 ADD X10, X10, 0x10
	0x03477B64 B.NE 0x3477B50
	0x03477B68 MOV X0, X19
	0x03477B6C MOV W2, W31
	0x03477B70 BL 0x1C5C788
	0x03477B74 B 0x3477B84
	0x03477B78 LDRSW X9, [X10]
	0x03477B7C ADD X8, X8, X9, 0x4, LSL

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xF67000
	005 Move W8, [X20+2095]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xC86000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move X0, 0xCBA000
	015 Move X0, [X0+2592]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2095], W8
	019 Move X19, [X19+40]
	020 Compare X19, 0
	021 JumpIfEqual {36}
	022 Move X8, 0xC86000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X1, X31
	033 Move X30, [X31+32]
	034 Call Convert.FromBase64String, X0
	035 Return X0
	036 Move X19, 0xCBA000
	037 Move X19, [X19+2592]
	038 Move X0, [X19]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {44}
	042 Call 0x1C17DFC
	043 Move X0, [X19]
	044 Move X8, [X0+184]
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X0, [X8]
	048 Move X30, [X31+32]
	049 Return X0

Method: System.String get_DataField()

Disassembly:
	0x03477B80 ADD X0, X8, 0x138
	0x03477B84 LDP X8, X1, [X0]

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_DataField(System.String value)

Disassembly:
	0x03477B88 MOV X0, X19
	0x03477B8C BLR X8

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x03477B90 CBZ X20, 0x3477D2C
	0x03477B94 AND W8, W0, 0x1
	0x03477B98 STRB W8, [X20 + 0x10]
	0x03477B9C LDR X8, [X19]
	0x03477BA0 LDR X1, [X21]
	0x03477BA4 LDRH W9, [X8 + 0x12E]
	0x03477BA8 CBZ X9, 0x3477BCC
	0x03477BAC LDR X10, [X8 + 0xB0]
	0x03477BB0 ADD X10, X10, 0x8
	0x03477BB4 LDUR X11, [X10 - 0x8]
	0x03477BB8 CMP X11, X1
	0x03477BBC B.EQ 0x3477BDC
	0x03477BC0 SUBS X9, X9, 0x1
	0x03477BC4 ADD X10, X10, 0x10
	0x03477BC8 B.NE 0x3477BB4
	0x03477BCC MOVZ W2, 0x1
	0x03477BD0 MOV X0, X19
	0x03477BD4 BL 0x1C5C788
	0x03477BD8 B 0x3477BEC
	0x03477BDC LDR W9, [X10]
	0x03477BE0 ADD W9, W9, 0x1
	0x03477BE4 ADD X8, X8, W9, 0x4, SXTW
	0x03477BE8 ADD X0, X8, 0x138
	0x03477BEC LDP X8, X1, [X0]
	0x03477BF0 MOV X0, X19
	0x03477BF4 BLR X8
	0x03477BF8 STR X0, [X20 + 0x18]
	0x03477BFC LDR X8, [X19]
	0x03477C00 LDR X1, [X21]
	0x03477C04 LDRH W9, [X8 + 0x12E]
	0x03477C08 CBZ X9, 0x3477C2C
	0x03477C0C LDR X10, [X8 + 0xB0]
	0x03477C10 ADD X10, X10, 0x8
	0x03477C14 LDUR X11, [X10 - 0x8]
	0x03477C18 CMP X11, X1
	0x03477C1C B.EQ 0x3477C3C
	0x03477C20 SUBS X9, X9, 0x1
	0x03477C24 ADD X10, X10, 0x10
	0x03477C28 B.NE 0x3477C14
	0x03477C2C MOVZ W2, 0x2
	0x03477C30 MOV X0, X19
	0x03477C34 BL 0x1C5C788
	0x03477C38 B 0x3477C4C
	0x03477C3C LDR W9, [X10]
	0x03477C40 ADD W9, W9, 0x2
	0x03477C44 ADD X8, X8, W9, 0x4, SXTW
	0x03477C48 ADD X0, X8, 0x138
	0x03477C4C LDP X8, X1, [X0]
	0x03477C50 MOV X0, X19
	0x03477C54 BLR X8
	0x03477C58 STR X0, [X20 + 0x20]
	0x03477C5C LDR X8, [X19]
	0x03477C60 LDR X1, [X21]
	0x03477C64 LDRH W9, [X8 + 0x12E]
	0x03477C68 CBZ X9, 0x3477C8C
	0x03477C6C LDR X10, [X8 + 0xB0]
	0x03477C70 ADD X10, X10, 0x8
	0x03477C74 LDUR X11, [X10 - 0x8]
	0x03477C78 CMP X11, X1
	0x03477C7C B.EQ 0x3477C9C
	0x03477C80 SUBS X9, X9, 0x1
	0x03477C84 ADD X10, X10, 0x10
	0x03477C88 B.NE 0x3477C74
	0x03477C8C MOVZ W2, 0x3
	0x03477C90 MOV X0, X19
	0x03477C94 BL 0x1C5C788
	0x03477C98 B 0x3477CAC
	0x03477C9C LDR W9, [X10]
	0x03477CA0 ADD W9, W9, 0x3
	0x03477CA4 ADD X8, X8, W9, 0x4, SXTW
	0x03477CA8 ADD X0, X8, 0x138
	0x03477CAC LDP X8, X1, [X0]
	0x03477CB0 MOV X0, X19
	0x03477CB4 BLR X8
	0x03477CB8 STR X0, [X20 + 0x28]
	0x03477CBC LDR X8, [X19]
	0x03477CC0 LDR X1, [X21]
	0x03477CC4 LDRH W9, [X8 + 0x12E]
	0x03477CC8 CBZ X9, 0x3477CEC
	0x03477CCC LDR X10, [X8 + 0xB0]
	0x03477CD0 ADD X10, X10, 0x8
	0x03477CD4 LDUR X11, [X10 - 0x8]
	0x03477CD8 CMP X11, X1
	0x03477CDC B.EQ 0x3477CFC
	0x03477CE0 SUBS X9, X9, 0x1
	0x03477CE4 ADD X10, X10, 0x10
	0x03477CE8 B.NE 0x3477CD4
	0x03477CEC MOVZ W2, 0x4
	0x03477CF0 MOV X0, X19
	0x03477CF4 BL 0x1C5C788
	0x03477CF8 B 0x3477D0C
	0x03477CFC LDR W9, [X10]
	0x03477D00 ADD W9, W9, 0x4
	0x03477D04 ADD X8, X8, W9, 0x4, SXTW

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xF67000
	007 Move X21, 0xC7D000
	008 Move W8, [X20+2096]
	009 Move X21, [X21+2512]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0xC7F000
	016 Move X0, [X0+2656]
	017 Call 0x1C17CF4
	018 Move X0, 0xC7D000
	019 Move X0, [X0+2512]
	020 Call 0x1C17CF4
	021 Move X0, 0xCBA000
	022 Move X0, [X0+2600]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2096], W8
	026 Move X0, [X21]
	027 Move W1, 4
	028 Call 0x1C17D6C
	029 Compare X0, 0
	030 JumpIfEqual {108}
	031 Move X21, [X19+16]
	032 Move X20, X0
	033 Compare X21, 0
	034 JumpIfEqual {41}
	035 Move X8, [X20]
	036 Move X0, X21
	037 Move X1, [X8+64]
	038 Call 0x1C17E00
	039 Compare X0, 0
	040 JumpIfEqual {105}
	041 Move W8, [X20+24]
	042 Compare W8, 0
	043 JumpIfEqual {104}
	044 Move [X20+32], X21
	045 Move X21, [X19+24]
	046 Compare X21, 0
	047 JumpIfEqual {55}
	048 Move X8, [X20]
	049 Move X0, X21
	050 Move X1, [X8+64]
	051 Call 0x1C17E00
	052 Compare X0, 0
	053 JumpIfEqual {105}
	054 Move W8, [X20+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X22, 0xC7F000
	057 Move X22, [X22+2656]
	058 Move X0, X19
	059 Move [X20+40], X21
	060 Call PartyData.get_OpCode, X0
	061 Move X8, [X22]
	062 Move [X31+8], X0
	063 Add X1, X31, 8
	064 Move X0, X8
	065 Call 0x1C17E04
	066 Move X21, X0
	067 Compare X0, 0
	068 JumpIfEqual {75}
	069 Move X8, [X20]
	070 Move X0, X21
	071 Move X1, [X8+64]
	072 Call 0x1C17E00
	073 Compare X0, 0
	074 JumpIfEqual {105}
	075 Move W8, [X20+24]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X0, X19
	078 Move [X20+48], X21
	079 Call PartyData.get_Data, X0
	080 Move X19, X0
	081 Compare X0, 0
	082 JumpIfEqual {89}
	083 Move X8, [X20]
	084 Move X0, X19
	085 Move X1, [X8+64]
	086 Call 0x1C17E00
	087 Compare X0, 0
	088 JumpIfEqual {105}
	089 Move W8, [X20+24]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X8, 0xCBA000
	092 Move X8, [X8+2600]
	093 Move [X20+56], X19
	094 Move X1, X20
	095 Move X2, X31
	096 Move X0, [X8]
	097 Call String.Format, X0, X1
	098 Move X20, [X31+32]
	099 Move X19, [X31+40]
	100 Move X22, [X31+16]
	101 Move X21, [X31+24]
	102 Move X30, [X31+48]
	103 Return X0
	104 Call 0x1C17F28
	105 Call 0x1C17F44
	106 Move X1, X31
	107 Call 0x1C17DEC
	108 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03477D08 ADD X0, X8, 0x138
	0x03477D0C LDP X8, X1, [X0]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x03477D10 MOV X0, X19
	0x03477D14 BLR X8
	0x03477D18 STR X0, [X20 + 0x30]
	0x03477D1C MOV X0, X20
	0x03477D20 LDP X20, X19, [X31 + 0x10]
	0x03477D24 LDP X30, X21, [X31], #0x20
	0x03477D28 RET
	0x03477D2C BL 0x1C16F20
	0x03477D30 LDR W0, [X0 + 0x10]
	0x03477D34 RET
	0x03477D38 LDR W0, [X0 + 0x14]
	0x03477D3C RET
	0x03477D40 STP X30, X21, [X31 - 0x20]!
	0x03477D44 STP X20, X19, [X31 + 0x10]
	0x03477D48 MOV W20, W1
	0x03477D4C MOV X1, X31
	0x03477D50 MOV W19, W2
	0x03477D54 MOV X21, X0
	0x03477D58 BL 0x33BDD8C
	0x03477D5C STP W20, W19, [X21 + 0x10]
	0x03477D60 LDP X20, X19, [X31 + 0x10]
	0x03477D64 LDP X30, X21, [X31], #0x20
	0x03477D68 RET
	0x03477D6C LDR W0, [X0 + 0x10]
	0x03477D70 RET
	0x03477D74 LDR X0, [X0 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xF67000
	006 Move X21, 0xC7D000
	007 Move X19, 0xCBA000
	008 Move W8, [X20+2097]
	009 Move X21, [X21+1560]
	010 Move X19, [X19+2592]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xC7D000
	016 Move X0, [X0+1560]
	017 Call 0x1C17CF4
	018 Move X0, 0xCBA000
	019 Move X0, [X0+2592]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2097], W8
	023 Move X0, [X21]
	024 Move W1, W31
	025 Call 0x1C17D6C
	026 Move X8, [X19]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X8, [X8+184]
	030 Move [X8], X0
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 

