Type: Nakama.ChannelJoinMessage

Method: System.Boolean get_Hidden()

Disassembly:
	0x0343FAAC STP V0, V0, [X31 + 0x40]
	0x0343FAB0 STP V0, V0, [X31 + 0x20]

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_Hidden(System.Boolean value)

Disassembly:
	0x0343FAB4 ADRP X25, 0xCF0000
	0x0343FAB8 LDR W8, [X0 + 0xE0]
	0x0343FABC LDR X25, [X25 + 0x628]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.Boolean get_Persistence()

Disassembly:
	0x0343FAC0 CBNZ W8, 0x343FAC8
	0x0343FAC4 BL 0x1C16DFC

ISIL:
	001 Move W0, [X0+17]
	002 Return X0

Method: System.Void set_Persistence(System.Boolean value)

Disassembly:
	0x0343FAC8 ADD X8, X31, 0x8
	0x0343FACC MOV X0, X31
	0x0343FAD0 BL 0x32C4770

ISIL:
	001 And W8, W1, 1
	002 Move [X0+17], W8
	003 Return 

Method: System.String get_Target()

Disassembly:
	0x0343FAD4 LDUR V0, [X31 + 0x8]
	0x0343FAD8 LDR X9, [X31 + 0x18]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_Target(System.String value)

Disassembly:
	0x0343FADC LDR X2, [X25]
	0x0343FAE0 ADD X8, X31, 0x20

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.Int32 get_Type()

Disassembly:
	0x0343FAE4 STP X20, X21, [X31 + 0x60]
	0x0343FAE8 ORR X20, X8, 0xF

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_Type(System.Int32 value)

Disassembly:
	0x0343FAEC MOVN W10, 0x0
	0x0343FAF0 ADD X1, X31, 0x20

ISIL:
	001 Move [X0+32], W1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x0343FAF4 MOV X0, X20
	0x0343FAF8 STP X24, X23, [X31 + 0x48]
	0x0343FAFC STR X22, [X31 + 0x58]
	0x0343FB00 STUR V0, [X31 + 0x28]
	0x0343FB04 STP X9, X19, [X31 + 0x38]
	0x0343FB08 STR W10, [X31 + 0x20]
	0x0343FB0C BL 0x21913B8
	0x0343FB10 MOV X0, X20
	0x0343FB14 MOV X1, X31
	0x0343FB18 BL 0x32C47F8
	0x0343FB1C LDP X20, X19, [X31 + 0xD0]
	0x0343FB20 LDP X22, X21, [X31 + 0xC0]
	0x0343FB24 LDP X24, X23, [X31 + 0xB0]
	0x0343FB28 LDP X26, X25, [X31 + 0xA0]
	0x0343FB2C LDR X30, [X31 + 0x90]
	0x0343FB30 ADD X31, X31, 0xE0
	0x0343FB34 RET
	0x0343FB38 SUB X31, X31, 0xC0
	0x0343FB3C STR X30, [X31 + 0x60]
	0x0343FB40 STP X28, X27, [X31 + 0x70]
	0x0343FB44 STP X26, X25, [X31 + 0x80]
	0x0343FB48 STP X24, X23, [X31 + 0x90]
	0x0343FB4C STP X22, X21, [X31 + 0xA0]
	0x0343FB50 STP X20, X19, [X31 + 0xB0]
	0x0343FB54 ADRP X27, 0xF9E000
	0x0343FB58 ADRP X26, 0xCF0000
	0x0343FB5C LDRB W8, [X27 + 0x6AC]
	0x0343FB60 LDR X26, [X26 + 0x630]
	0x0343FB64 MOV X19, X6
	0x0343FB68 MOV X21, X5
	0x0343FB6C MOV X22, X4
	0x0343FB70 MOV W25, W3
	0x0343FB74 MOV X20, X2
	0x0343FB78 MOV X23, X1
	0x0343FB7C MOV X24, X0
	0x0343FB80 TBNZ X8, 0x0, 0x343FBBC
	0x0343FB84 ADRP X0, 0xCF0000
	0x0343FB88 LDR X0, [X0 + 0x638]
	0x0343FB8C BL 0x1C16CF4
	0x0343FB90 ADRP X0, 0xCF0000
	0x0343FB94 LDR X0, [X0 + 0x640]
	0x0343FB98 BL 0x1C16CF4
	0x0343FB9C ADRP X0, 0xCF0000
	0x0343FBA0 LDR X0, [X0 + 0x648]
	0x0343FBA4 BL 0x1C16CF4
	0x0343FBA8 ADRP X0, 0xCF0000
	0x0343FBAC LDR X0, [X0 + 0x630]
	0x0343FBB0 BL 0x1C16CF4
	0x0343FBB4 MOVZ W8, 0x1
	0x0343FBB8 STRB W8, [X27 + 0x6AC]
	0x0343FBBC LDR X0, [X26]
	0x0343FBC0 MOVI V0.2D, 0x0
	0x0343FBC4 STP V0, V0, [X31 + 0x40]
	0x0343FBC8 STP V0, V0, [X31 + 0x20]
	0x0343FBCC STP V0, V0, [X31]
	0x0343FBD0 ADRP X28, 0xCF0000
	0x0343FBD4 ADRP X27, 0xCF0000
	0x0343FBD8 ADRP X26, 0xCF0000
	0x0343FBDC LDR W8, [X0 + 0xE0]
	0x0343FBE0 LDR X28, [X28 + 0x638]
	0x0343FBE4 LDR X27, [X27 + 0x640]
	0x0343FBE8 LDR X26, [X26 + 0x648]
	0x0343FBEC CBNZ W8, 0x343FBF4
	0x0343FBF0 BL 0x1C16DFC
	0x0343FBF4 LDR X0, [X28]
	0x0343FBF8 ADD X8, X31, 0x0
	0x0343FBFC AND W28, W25, 0x1
	0x0343FC00 ORR X25, X8, 0xF
	0x0343FC04 MOV X8, X25
	0x0343FC08 BL 0x263221C
	0x0343FC0C LDR X2, [X27]
	0x0343FC10 MOVN W8, 0x0
	0x0343FC14 ADD X1, X31, 0x0
	0x0343FC18 MOV X0, X25
	0x0343FC1C STP X24, X23, [X31 + 0x20]
	0x0343FC20 STRB W28, [X31 + 0x38]
	0x0343FC24 STR X22, [X31 + 0x30]
	0x0343FC28 STP X19, X21, [X31 + 0x48]
	0x0343FC2C STR X20, [X31 + 0x40]
	0x0343FC30 STR W8, [X31]
	0x0343FC34 BL 0x1FCC414
	0x0343FC38 LDR X1, [X26]
	0x0343FC3C MOV X0, X25
	0x0343FC40 BL 0x2632230
	0x0343FC44 LDP X20, X19, [X31 + 0xB0]
	0x0343FC48 LDP X22, X21, [X31 + 0xA0]
	0x0343FC4C LDP X24, X23, [X31 + 0x90]
	0x0343FC50 LDP X26, X25, [X31 + 0x80]
	0x0343FC54 LDP X28, X27, [X31 + 0x70]
	0x0343FC58 LDR X30, [X31 + 0x60]
	0x0343FC5C ADD X31, X31, 0xC0
	0x0343FC60 RET
	0x0343FC64 SUB X31, X31, 0xC0
	0x0343FC68 STR X30, [X31 + 0x60]
	0x0343FC6C STP X28, X27, [X31 + 0x70]
	0x0343FC70 STP X26, X25, [X31 + 0x80]
	0x0343FC74 STP X24, X23, [X31 + 0x90]
	0x0343FC78 STP X22, X21, [X31 + 0xA0]
	0x0343FC7C STP X20, X19, [X31 + 0xB0]
	0x0343FC80 ADRP X27, 0xF9E000
	0x0343FC84 ADRP X26, 0xCF0000
	0x0343FC88 LDRB W8, [X27 + 0x6AD]
	0x0343FC8C LDR X26, [X26 + 0x630]
	0x0343FC90 MOV X19, X6
	0x0343FC94 MOV X21, X5
	0x0343FC98 MOV X22, X4
	0x0343FC9C MOV W25, W3

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X20, 0xF9F000
	008 Move X21, 0xCB5000
	009 Move X22, 0xCB5000
	010 Move W8, [X20+1695]
	011 Move X21, [X21+2512]
	012 Move X22, [X22+2904]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0xCB5000
	019 Move X0, [X0+2904]
	020 Call 0x1C17CF4
	021 Move X0, 0xCB5000
	022 Move X0, [X0+1880]
	023 Call 0x1C17CF4
	024 Move X0, 0xCB5000
	025 Move X0, [X0+2512]
	026 Call 0x1C17CF4
	027 Move X0, 0xCF1000
	028 Move X0, [X0+1448]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+1695], W8
	032 Move X0, [X21]
	033 Move W1, 4
	034 Call 0x1C17D6C
	035 Move X20, X0
	036 Move W8, [X19+16]
	037 Move X0, [X22]
	038 Add X1, X31, 28
	039 Move [X31+28], W8
	040 Call 0x1C17E04
	041 Compare X20, 0
	042 JumpIfEqual {121}
	043 Move X21, X0
	044 Compare X0, 0
	045 JumpIfEqual {52}
	046 Move X8, [X20]
	047 Move X0, X21
	048 Move X1, [X8+64]
	049 Call 0x1C17E00
	050 Compare X0, 0
	051 JumpIfEqual {118}
	052 Move W8, [X20+24]
	053 Compare W8, 0
	054 JumpIfEqual {117}
	055 Move [X20+32], X21
	056 Move W8, [X19+17]
	057 Move X0, [X22]
	058 Add X1, X31, 24
	059 Move [X31+24], W8
	060 Call 0x1C17E04
	061 Move X21, X0
	062 Compare X0, 0
	063 JumpIfEqual {70}
	064 Move X8, [X20]
	065 Move X0, X21
	066 Move X1, [X8+64]
	067 Call 0x1C17E00
	068 Compare X0, 0
	069 JumpIfEqual {118}
	070 Move W8, [X20+24]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move [X20+40], X21
	073 Move X21, [X19+24]
	074 Compare X21, 0
	075 JumpIfEqual {83}
	076 Move X8, [X20]
	077 Move X0, X21
	078 Move X1, [X8+64]
	079 Call 0x1C17E00
	080 Compare X0, 0
	081 JumpIfEqual {118}
	082 Move W8, [X20+24]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X8, 0xCB5000
	085 Move X8, [X8+1880]
	086 Move [X20+48], X21
	087 Move W9, [X19+32]
	088 Add X1, X31, 12
	089 Move X0, [X8]
	090 Move [X31+12], W9
	091 Call 0x1C17E04
	092 Move X19, X0
	093 Compare X0, 0
	094 JumpIfEqual {101}
	095 Move X8, [X20]
	096 Move X0, X19
	097 Move X1, [X8+64]
	098 Call 0x1C17E00
	099 Compare X0, 0
	100 JumpIfEqual {118}
	101 Move W8, [X20+24]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X8, 0xCF1000
	104 Move X8, [X8+1448]
	105 Move [X20+56], X19
	106 Move X1, X20
	107 Move X2, X31
	108 Move X0, [X8]
	109 Call String.Format, X0, X1
	110 Move X20, [X31+48]
	111 Move X19, [X31+56]
	112 Move X22, [X31+32]
	113 Move X21, [X31+40]
	114 Move X30, [X31+16]
	115 Add X31, X31, 64
	116 Return X0
	117 Call 0x1C17F28
	118 Call 0x1C17F44
	119 Move X1, X31
	120 Call 0x1C17DEC
	121 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0343FCA0 MOV X20, X2
	0x0343FCA4 MOV X23, X1

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

