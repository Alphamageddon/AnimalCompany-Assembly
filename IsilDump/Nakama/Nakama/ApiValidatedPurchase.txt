Type: Nakama.ApiValidatedPurchase

Method: System.String get_CreateTime()

Disassembly:
	0x0340D688 BL 0x1C16F10
	0x0340D68C ADRP X8, 0xD21000

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_CreateTime(System.String value)

Disassembly:
	0x0340D690 LDR X8, [X8 + 0x2A0]
	0x0340D694 MOV W1, W31

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: Nakama.ApiStoreEnvironment get_Environment()

Disassembly:
	0x0340D698 MOV X19, X0
	0x0340D69C LDR X2, [X8]

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: Nakama.ApiStoreEnvironment get__environment()

Disassembly:
	0x0340D6A0 BL 0x301B830
	0x0340D6A4 MOV X0, X19

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set__environment(Nakama.ApiStoreEnvironment value)

Disassembly:
	0x0340D6A8 LDP X20, X19, [X31 + 0x10]
	0x0340D6AC LDR X30, [X31], #0x20

ISIL:
	001 Move [X0+24], W1
	002 Return 

Method: System.String get_ProductId()

Disassembly:
	0x0340D6B0 RET
	0x0340D6B4 LDR X0, [X0 + 0x10]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_ProductId(System.String value)

Disassembly:
	0x0340D6B8 RET
	0x0340D6BC STR X1, [X0 + 0x10]

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String get_ProviderResponse()

Disassembly:
	0x0340D6C0 RET
	0x0340D6C4 STP X30, X25, [X31 - 0x40]!

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_ProviderResponse(System.String value)

Disassembly:
	0x0340D6C8 STP X24, X23, [X31 + 0x10]
	0x0340D6CC STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.String get_PurchaseTime()

Disassembly:
	0x0340D6D0 STP X20, X19, [X31 + 0x30]
	0x0340D6D4 ADRP X25, 0xFD0000

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_PurchaseTime(System.String value)

Disassembly:
	0x0340D6D8 ADRP X23, 0xCE6000
	0x0340D6DC ADRP X24, 0xD21000

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.String get_RefundTime()

Disassembly:
	0x0340D6E0 ADRP X20, 0xCE6000
	0x0340D6E4 ADRP X21, 0xD21000

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_RefundTime(System.String value)

Disassembly:
	0x0340D6E8 ADRP X22, 0xD20000
	0x0340D6EC LDRB W8, [X25 + 0x569]

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.Boolean get_SeenBefore()

Disassembly:
	0x0340D6F0 LDR X23, [X23 + 0x838]
	0x0340D6F4 LDR X24, [X24 + 0x2B0]

ISIL:
	001 Move W0, [X0+64]
	002 Return X0

Method: System.Void set_SeenBefore(System.Boolean value)

Disassembly:
	0x0340D6F8 LDR X20, [X20 + 0x988]
	0x0340D6FC LDR X21, [X21 + 0xB8]
	0x0340D700 LDR X22, [X22 + 0xD50]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+64], W8
	003 Return 

Method: Nakama.ApiStoreProvider get_Store()

Disassembly:
	0x0340D704 MOV X19, X0
	0x0340D708 TBNZ X8, 0x0, 0x340D750

ISIL:
	001 Move W0, [X0+68]
	002 Return X0

Method: Nakama.ApiStoreProvider get__store()

Disassembly:
	0x0340D70C ADRP X0, 0xD21000
	0x0340D710 LDR X0, [X0 + 0x2B0]

ISIL:
	001 Move W0, [X0+68]
	002 Return X0

Method: System.Void set__store(Nakama.ApiStoreProvider value)

Disassembly:
	0x0340D714 BL 0x1C16CF4
	0x0340D718 ADRP X0, 0xCE6000

ISIL:
	001 Move [X0+68], W1
	002 Return 

Method: System.String get_TransactionId()

Disassembly:
	0x0340D71C LDR X0, [X0 + 0x838]
	0x0340D720 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Void set_TransactionId(System.String value)

Disassembly:
	0x0340D724 ADRP X0, 0xD20000
	0x0340D728 LDR X0, [X0 + 0xD50]

ISIL:
	001 Move [X0+72], X1
	002 Return 

Method: System.String get_UpdateTime()

Disassembly:
	0x0340D72C BL 0x1C16CF4
	0x0340D730 ADRP X0, 0xCE6000

ISIL:
	001 Move X0, [X0+80]
	002 Return X0

Method: System.Void set_UpdateTime(System.String value)

Disassembly:
	0x0340D734 LDR X0, [X0 + 0x988]
	0x0340D738 BL 0x1C16CF4

ISIL:
	001 Move [X0+80], X1
	002 Return 

Method: System.String get_UserId()

Disassembly:
	0x0340D73C ADRP X0, 0xD21000
	0x0340D740 LDR X0, [X0 + 0xB8]

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: System.Void set_UserId(System.String value)

Disassembly:
	0x0340D744 BL 0x1C16CF4
	0x0340D748 MOVZ W8, 0x1

ISIL:
	001 Move [X0+88], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x0340D74C STRB W8, [X25 + 0x569]
	0x0340D750 MOV X0, X19
	0x0340D754 BL 0x340D63C
	0x0340D758 LDR X8, [X23]
	0x0340D75C LDR X2, [X24]
	0x0340D760 MOV X1, X0
	0x0340D764 MOV X0, X8
	0x0340D768 BL 0x226B7E8
	0x0340D76C LDR X8, [X20]
	0x0340D770 LDR X1, [X21]
	0x0340D774 LDR X3, [X22]
	0x0340D778 LDP X20, X19, [X31 + 0x30]
	0x0340D77C LDP X22, X21, [X31 + 0x20]
	0x0340D780 LDP X24, X23, [X31 + 0x10]
	0x0340D784 MOV X2, X0
	0x0340D788 MOV X0, X8
	0x0340D78C MOV X4, X31
	0x0340D790 LDP X30, X25, [X31], #0x40
	0x0340D794 B 0x32277C4
	0x0340D798 MOV X1, X31
	0x0340D79C B 0x33BDD8C
	0x0340D7A0 LDR X0, [X0 + 0x10]
	0x0340D7A4 RET
	0x0340D7A8 STR X1, [X0 + 0x10]
	0x0340D7AC RET
	0x0340D7B0 STP X30, X23, [X31 - 0x30]!
	0x0340D7B4 STP X22, X21, [X31 + 0x10]
	0x0340D7B8 STP X20, X19, [X31 + 0x20]
	0x0340D7BC ADRP X23, 0xFD0000
	0x0340D7C0 ADRP X20, 0xCE6000
	0x0340D7C4 ADRP X21, 0xD21000
	0x0340D7C8 ADRP X22, 0xCE6000
	0x0340D7CC LDRB W8, [X23 + 0x56A]
	0x0340D7D0 LDR X20, [X20 + 0x988]
	0x0340D7D4 LDR X21, [X21 + 0x2B8]
	0x0340D7D8 LDR X22, [X22 + 0x838]
	0x0340D7DC MOV X19, X0
	0x0340D7E0 TBNZ X8, 0x0, 0x340D810
	0x0340D7E4 ADRP X0, 0xCE6000
	0x0340D7E8 LDR X0, [X0 + 0x838]
	0x0340D7EC BL 0x1C16CF4
	0x0340D7F0 ADRP X0, 0xD21000
	0x0340D7F4 LDR X0, [X0 + 0x2B8]
	0x0340D7F8 BL 0x1C16CF4
	0x0340D7FC ADRP X0, 0xCE6000
	0x0340D800 LDR X0, [X0 + 0x988]
	0x0340D804 BL 0x1C16CF4
	0x0340D808 MOVZ W8, 0x1
	0x0340D80C STRB W8, [X23 + 0x56A]
	0x0340D810 LDR X2, [X19 + 0x10]
	0x0340D814 LDR X0, [X20]
	0x0340D818 LDR X1, [X21]
	0x0340D81C LDR X3, [X22]
	0x0340D820 LDP X20, X19, [X31 + 0x20]
	0x0340D824 LDP X22, X21, [X31 + 0x10]
	0x0340D828 MOV X4, X31
	0x0340D82C LDP X30, X23, [X31], #0x30
	0x0340D830 B 0x32277C4
	0x0340D834 MOV X1, X31
	0x0340D838 B 0x33BDD8C
	0x0340D83C LDR W0, [X0 + 0x10]
	0x0340D840 RET
	0x0340D844 STR W1, [X0 + 0x10]
	0x0340D848 RET
	0x0340D84C STR X30, [X31 - 0x20]!
	0x0340D850 STP X20, X19, [X31 + 0x10]
	0x0340D854 ADRP X20, 0xFD0000
	0x0340D858 LDRB W8, [X20 + 0x56B]
	0x0340D85C MOV X19, X0
	0x0340D860 TBNZ X8, 0x0, 0x340D884
	0x0340D864 ADRP X0, 0xD21000
	0x0340D868 LDR X0, [X0 + 0x2C0]
	0x0340D86C BL 0x1C16CF4
	0x0340D870 ADRP X0, 0xD21000
	0x0340D874 LDR X0, [X0 + 0x2C8]
	0x0340D878 BL 0x1C16CF4
	0x0340D87C MOVZ W8, 0x1
	0x0340D880 STRB W8, [X20 + 0x56B]
	0x0340D884 LDR X19, [X19 + 0x18]
	0x0340D888 CBNZ X19, 0x340D8B4
	0x0340D88C ADRP X8, 0xD21000
	0x0340D890 LDR X8, [X8 + 0x2C8]
	0x0340D894 LDR X0, [X8]
	0x0340D898 BL 0x1C16F10
	0x0340D89C ADRP X8, 0xD21000
	0x0340D8A0 LDR X8, [X8 + 0x2C0]
	0x0340D8A4 MOV W1, W31
	0x0340D8A8 MOV X19, X0
	0x0340D8AC LDR X2, [X8]
	0x0340D8B0 BL 0x301B830
	0x0340D8B4 MOV X0, X19
	0x0340D8B8 LDP X20, X19, [X31 + 0x10]
	0x0340D8BC LDR X30, [X31], #0x20
	0x0340D8C0 RET
	0x0340D8C4 LDR X0, [X0 + 0x18]
	0x0340D8C8 RET
	0x0340D8CC STR X1, [X0 + 0x18]
	0x0340D8D0 RET
	0x0340D8D4 LDR X0, [X0 + 0x20]
	0x0340D8D8 RET
	0x0340D8DC STR X1, [X0 + 0x20]
	0x0340D8E0 RET
	0x0340D8E4 SUB X31, X31, 0x50
	0x0340D8E8 STP X30, X25, [X31 + 0x10]
	0x0340D8EC STP X24, X23, [X31 + 0x20]
	0x0340D8F0 STP X22, X21, [X31 + 0x30]
	0x0340D8F4 STP X20, X19, [X31 + 0x40]
	0x0340D8F8 ADRP X20, 0xFD0000
	0x0340D8FC ADRP X21, 0xCE6000
	0x0340D900 ADRP X22, 0xCE6000
	0x0340D904 LDRB W8, [X20 + 0x56C]
	0x0340D908 LDR X21, [X21 + 0x988]
	0x0340D90C LDR X22, [X22 + 0x9D0]
	0x0340D910 MOV X19, X0
	0x0340D914 TBNZ X8, 0x0, 0x340D98C
	0x0340D918 ADRP X0, 0xCE6000
	0x0340D91C LDR X0, [X0 + 0x758]
	0x0340D920 BL 0x1C16CF4
	0x0340D924 ADRP X0, 0xCE6000
	0x0340D928 LDR X0, [X0 + 0x9D0]
	0x0340D92C BL 0x1C16CF4
	0x0340D930 ADRP X0, 0xD21000
	0x0340D934 LDR X0, [X0 + 0x2D0]
	0x0340D938 BL 0x1C16CF4
	0x0340D93C ADRP X0, 0xCE6000
	0x0340D940 LDR X0, [X0 + 0x838]
	0x0340D944 BL 0x1C16CF4
	0x0340D948 ADRP X0, 0xD21000
	0x0340D94C LDR X0, [X0 + 0x2D8]
	0x0340D950 BL 0x1C16CF4
	0x0340D954 ADRP X0, 0xD20000
	0x0340D958 LDR X0, [X0 + 0xD50]
	0x0340D95C BL 0x1C16CF4
	0x0340D960 ADRP X0, 0xD21000
	0x0340D964 LDR X0, [X0 + 0x2E0]
	0x0340D968 BL 0x1C16CF4
	0x0340D96C ADRP X0, 0xCE6000
	0x0340D970 LDR X0, [X0 + 0x988]
	0x0340D974 BL 0x1C16CF4
	0x0340D978 ADRP X0, 0xD20000
	0x0340D97C LDR X0, [X0 + 0xE20]
	0x0340D980 BL 0x1C16CF4
	0x0340D984 MOVZ W8, 0x1
	0x0340D988 STRB W8, [X20 + 0x56C]
	0x0340D98C LDR X0, [X22]
	0x0340D990 LDR X21, [X21]
	0x0340D994 MOVZ W1, 0x4
	0x0340D998 BL 0x1C16D6C
	0x0340D99C CBZ X0, 0x340DB18
	0x0340D9A0 MOV X20, X0
	0x0340D9A4 CBZ X21, 0x340D9BC
	0x0340D9A8 LDR X8, [X20]
	0x0340D9AC MOV X0, X21
	0x0340D9B0 LDR X1, [X8 + 0x40]
	0x0340D9B4 BL 0x1C16E00
	0x0340D9B8 CBZ X0, 0x340DB0C
	0x0340D9BC LDR W8, [X20 + 0x18]
	0x0340D9C0 CBZ W8, 0x340DB08
	0x0340D9C4 ADRP X22, 0xD20000
	0x0340D9C8 LDR X22, [X22 + 0xE20]
	0x0340D9CC STR X21, [X20 + 0x20]
	0x0340D9D0 LDR X0, [X22]
	0x0340D9D4 CBZ X0, 0x340D9EC
	0x0340D9D8 LDR X8, [X20]
	0x0340D9DC LDR X1, [X8 + 0x40]
	0x0340D9E0 BL 0x1C16E00
	0x0340D9E4 CBZ X0, 0x340DB0C
	0x0340D9E8 LDR W8, [X20 + 0x18]
	0x0340D9EC CMP W8, 0x1
	0x0340D9F0 B.LS 0x340DB08
	0x0340D9F4 LDR X8, [X22]
	0x0340D9F8 ADRP X9, 0xCE6000
	0x0340D9FC LDR X9, [X9 + 0x758]
	0x0340DA00 ADD X1, X31, 0xC
	0x0340DA04 STR X8, [X20 + 0x28]
	0x0340DA08 LDR W8, [X19 + 0x10]
	0x0340DA0C LDR X0, [X9]
	0x0340DA10 STR W8, [X31 + 0xC]
	0x0340DA14 BL 0x1C16E04
	0x0340DA18 MOV X21, X0
	0x0340DA1C CBZ X0, 0x340DA34
	0x0340DA20 LDR X8, [X20]
	0x0340DA24 MOV X0, X21
	0x0340DA28 LDR X1, [X8 + 0x40]
	0x0340DA2C BL 0x1C16E00
	0x0340DA30 CBZ X0, 0x340DB0C
	0x0340DA34 LDR W8, [X20 + 0x18]
	0x0340DA38 CMP W8, 0x2
	0x0340DA3C B.LS 0x340DB08
	0x0340DA40 ADRP X22, 0xCE6000
	0x0340DA44 LDR X22, [X22 + 0x838]
	0x0340DA48 STR X21, [X20 + 0x30]
	0x0340DA4C LDR X0, [X22]
	0x0340DA50 CBZ X0, 0x340DA68
	0x0340DA54 LDR X8, [X20]
	0x0340DA58 LDR X1, [X8 + 0x40]
	0x0340DA5C BL 0x1C16E00
	0x0340DA60 CBZ X0, 0x340DB0C
	0x0340DA64 LDR W8, [X20 + 0x18]
	0x0340DA68 CMP W8, 0x3
	0x0340DA6C B.LS 0x340DB08
	0x0340DA70 ADRP X21, 0xD21000
	0x0340DA74 LDR X21, [X21 + 0x2D0]
	0x0340DA78 LDR X8, [X22]
	0x0340DA7C ADRP X23, 0xD21000
	0x0340DA80 ADRP X24, 0xD20000
	0x0340DA84 ADRP X25, 0xD21000
	0x0340DA88 LDR X23, [X23 + 0x2D8]
	0x0340DA8C LDR X24, [X24 + 0xD50]
	0x0340DA90 LDR X25, [X25 + 0x2E0]
	0x0340DA94 MOV X0, X20
	0x0340DA98 MOV X1, X31
	0x0340DA9C STR X8, [X20 + 0x38]
	0x0340DAA0 BL 0x3227578
	0x0340DAA4 MOV X20, X0
	0x0340DAA8 MOV X0, X19
	0x0340DAAC BL 0x340D84C
	0x0340DAB0 LDR X8, [X22]
	0x0340DAB4 LDR X2, [X21]
	0x0340DAB8 MOV X1, X0
	0x0340DABC MOV X0, X8
	0x0340DAC0 BL 0x226B7E8
	0x0340DAC4 LDR X1, [X23]
	0x0340DAC8 LDR X3, [X24]
	0x0340DACC MOV X2, X0
	0x0340DAD0 MOV X0, X20
	0x0340DAD4 MOV X4, X31
	0x0340DAD8 BL 0x32277C4
	0x0340DADC LDR X2, [X19 + 0x20]
	0x0340DAE0 LDR X1, [X25]
	0x0340DAE4 LDR X3, [X22]
	0x0340DAE8 MOV X4, X31
	0x0340DAEC BL 0x32277C4
	0x0340DAF0 LDP X20, X19, [X31 + 0x40]
	0x0340DAF4 LDP X22, X21, [X31 + 0x30]
	0x0340DAF8 LDP X24, X23, [X31 + 0x20]
	0x0340DAFC LDP X30, X25, [X31 + 0x10]
	0x0340DB00 ADD X31, X31, 0x50
	0x0340DB04 RET
	0x0340DB08 BL 0x1C16F28
	0x0340DB0C BL 0x1C16F44
	0x0340DB10 MOV X1, X31
	0x0340DB14 BL 0x1C16DEC
	0x0340DB18 BL 0x1C16F20
	0x0340DB1C MOV X1, X31
	0x0340DB20 B 0x33BDD8C
	0x0340DB24 LDR W0, [X0 + 0x18]
	0x0340DB28 RET
	0x0340DB2C STR W1, [X0 + 0x18]
	0x0340DB30 RET
	0x0340DB34 STR X30, [X31 - 0x30]!
	0x0340DB38 STP X22, X21, [X31 + 0x10]
	0x0340DB3C STP X20, X19, [X31 + 0x20]
	0x0340DB40 MOV X21, X1
	0x0340DB44 MOV X1, X31
	0x0340DB48 MOV W19, W3
	0x0340DB4C MOV X20, X2
	0x0340DB50 MOV X22, X0
	0x0340DB54 BL 0x33BDD8C
	0x0340DB58 STR X21, [X22 + 0x20]
	0x0340DB5C STR X20, [X22 + 0x10]
	0x0340DB60 STR W19, [X22 + 0x18]
	0x0340DB64 LDP X20, X19, [X31 + 0x20]
	0x0340DB68 LDP X22, X21, [X31 + 0x10]
	0x0340DB6C LDR X30, [X31], #0x30
	0x0340DB70 RET
	0x0340DB74 SUB X31, X31, 0xB0
	0x0340DB78 STR X30, [X31 + 0x70]
	0x0340DB7C STP X24, X23, [X31 + 0x80]
	0x0340DB80 STP X22, X21, [X31 + 0x90]
	0x0340DB84 STP X20, X19, [X31 + 0xA0]
	0x0340DB88 ADRP X24, 0xFD0000
	0x0340DB8C ADRP X23, 0xCE9000
	0x0340DB90 LDRB W8, [X24 + 0x56D]
	0x0340DB94 LDR X23, [X23 + 0x280]
	0x0340DB98 MOV X20, X3
	0x0340DB9C MOV X21, X2
	0x0340DBA0 MOV X22, X1
	0x0340DBA4 MOV X19, X0
	0x0340DBA8 TBNZ X8, 0x0, 0x340DBCC
	0x0340DBAC ADRP X0, 0xD21000
	0x0340DBB0 LDR X0, [X0 + 0x2E8]
	0x0340DBB4 BL 0x1C16CF4
	0x0340DBB8 ADRP X0, 0xCE9000
	0x0340DBBC LDR X0, [X0 + 0x280]
	0x0340DBC0 BL 0x1C16CF4
	0x0340DBC4 MOVZ W8, 0x1
	0x0340DBC8 STRB W8, [X24 + 0x56D]
	0x0340DBCC LDR X0, [X23]
	0x0340DBD0 MOVI V0.2D, 0x0
	0x0340DBD4 STR X31, [X31 + 0x60]
	0x0340DBD8 STP V0, V0, [X31 + 0x40]
	0x0340DBDC STP V0, V0, [X31 + 0x20]
	0x0340DBE0 ADRP X23, 0xD21000
	0x0340DBE4 LDR W8, [X0 + 0xE0]
	0x0340DBE8 LDR X23, [X23 + 0x2E8]
	0x0340DBEC CBNZ W8, 0x340DBF4
	0x0340DBF0 BL 0x1C16DFC
	0x0340DBF4 ADD X8, X31, 0x8
	0x0340DBF8 MOV X0, X31
	0x0340DBFC BL 0x32C4770
	0x0340DC00 LDUR V0, [X31 + 0x8]
	0x0340DC04 LDR X9, [X31 + 0x18]
	0x0340DC08 LDR X2, [X23]
	0x0340DC0C ADD X8, X31, 0x20
	0x0340DC10 STR X20, [X31 + 0x58]
	0x0340DC14 ORR X20, X8, 0xF
	0x0340DC18 MOVN W10, 0x0
	0x0340DC1C ADD X1, X31, 0x20
	0x0340DC20 MOV X0, X20
	0x0340DC24 STP X22, X21, [X31 + 0x48]
	0x0340DC28 STUR V0, [X31 + 0x28]
	0x0340DC2C STP X9, X19, [X31 + 0x38]
	0x0340DC30 STR W10, [X31 + 0x20]
	0x0340DC34 BL 0x218D8B8
	0x0340DC38 MOV X0, X20
	0x0340DC3C MOV X1, X31
	0x0340DC40 BL 0x32C47F8
	0x0340DC44 LDP X20, X19, [X31 + 0xA0]
	0x0340DC48 LDP X22, X21, [X31 + 0x90]
	0x0340DC4C LDP X24, X23, [X31 + 0x80]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X21, 0xFD1000
	012 Move X24, 0xCE7000
	013 Move X20, 0xD21000
	014 Move X22, 0xCE7000
	015 Move X23, 0xCE7000
	016 Move W8, [X21+1381]
	017 Move X24, [X24+2440]
	018 Move X20, [X20+3552]
	019 Move X22, [X22+2104]
	020 Move X23, [X23+2512]
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {79}
	026 Move X0, 0xD22000
	027 Move X0, [X0+568]
	028 Call 0x1C17CF4
	029 Move X0, 0xD22000
	030 Move X0, [X0+576]
	031 Call 0x1C17CF4
	032 Move X0, 0xCE7000
	033 Move X0, [X0+2904]
	034 Call 0x1C17CF4
	035 Move X0, 0xCE7000
	036 Move X0, [X0+2512]
	037 Call 0x1C17CF4
	038 Move X0, 0xD22000
	039 Move X0, [X0+584]
	040 Call 0x1C17CF4
	041 Move X0, 0xD22000
	042 Move X0, [X0+592]
	043 Call 0x1C17CF4
	044 Move X0, 0xD21000
	045 Move X0, [X0+3552]
	046 Call 0x1C17CF4
	047 Move X0, 0xCE7000
	048 Move X0, [X0+2104]
	049 Call 0x1C17CF4
	050 Move X0, 0xD22000
	051 Move X0, [X0+600]
	052 Call 0x1C17CF4
	053 Move X0, 0xD21000
	054 Move X0, [X0+3560]
	055 Call 0x1C17CF4
	056 Move X0, 0xD22000
	057 Move X0, [X0+608]
	058 Call 0x1C17CF4
	059 Move X0, 0xD22000
	060 Move X0, [X0+616]
	061 Call 0x1C17CF4
	062 Move X0, 0xD22000
	063 Move X0, [X0+48]
	064 Call 0x1C17CF4
	065 Move X0, 0xD22000
	066 Move X0, [X0+624]
	067 Call 0x1C17CF4
	068 Move X0, 0xCE7000
	069 Move X0, [X0+2440]
	070 Call 0x1C17CF4
	071 Move X0, 0xD22000
	072 Move X0, [X0+632]
	073 Call 0x1C17CF4
	074 Move X0, 0xD22000
	075 Move X0, [X0+640]
	076 Call 0x1C17CF4
	077 Move W8, 1
	078 Move [X21+1381], W8
	079 Move X0, [X24]
	080 Move X2, [X19+16]
	081 Move X1, [X20]
	082 Move X3, [X22]
	083 Move X4, X31
	084 Call String.Concat, X0, X1, X2, X3
	085 Move X8, [X23]
	086 Move X21, X0
	087 Move W1, 4
	088 Move X0, X8
	089 Call 0x1C17D6C
	090 Compare X0, 0
	091 JumpIfEqual {353}
	092 Move X20, X0
	093 Compare X21, 0
	094 JumpIfEqual {101}
	095 Move X8, [X20]
	096 Move X0, X21
	097 Move X1, [X8+64]
	098 Call 0x1C17E00
	099 Compare X0, 0
	100 JumpIfEqual {350}
	101 Move W8, [X20+24]
	102 Compare W8, 0
	103 JumpIfEqual {349}
	104 Move X24, 0xD22000
	105 Move X24, [X24+616]
	106 Move [X20+32], X21
	107 Move X0, [X24]
	108 Compare X0, 0
	109 JumpIfEqual {116}
	110 Move X8, [X20]
	111 Move X1, [X8+64]
	112 Call 0x1C17E00
	113 Compare X0, 0
	114 JumpIfEqual {350}
	115 Move W8, [X20+24]
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move X8, [X24]
	118 Move X9, 0xD22000
	119 Move X9, [X9+568]
	120 Add X1, X31, 28
	121 Move [X20+40], X8
	122 Move W8, [X19+24]
	123 Move X0, [X9]
	124 Move [X31+28], W8
	125 Call 0x1C17E04
	126 Move X21, X0
	127 Compare X0, 0
	128 JumpIfEqual {135}
	129 Move X8, [X20]
	130 Move X0, X21
	131 Move X1, [X8+64]
	132 Call 0x1C17E00
	133 Compare X0, 0
	134 JumpIfEqual {350}
	135 Move W8, [X20+24]
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move [X20+48], X21
	138 Move X0, [X22]
	139 Compare X0, 0
	140 JumpIfEqual {147}
	141 Move X8, [X20]
	142 Move X1, [X8+64]
	143 Call 0x1C17E00
	144 Compare X0, 0
	145 JumpIfEqual {350}
	146 Move W8, [X20+24]
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Move X21, 0xD22000
	149 Move X21, [X21+640]
	150 Move X8, [X22]
	151 Move X24, 0xD22000
	152 Move X25, 0xD22000
	153 Move X26, 0xD22000
	154 Move X24, [X24+624]
	155 Move X25, [X25+600]
	156 Move X26, [X26+632]
	157 Move X0, X20
	158 Move X1, X31
	159 Move [X20+56], X8
	160 Call String.Concat, X0
	161 Move X2, [X19+32]
	162 Move X1, [X21]
	163 Move X3, [X22]
	164 Move X4, X31
	165 Call String.Concat, X0, X1, X2, X3
	166 Move X2, [X19+40]
	167 Move X1, [X24]
	168 Move X3, [X22]
	169 Move X4, X31
	170 Call String.Concat, X0, X1, X2, X3
	171 Move X2, [X19+48]
	172 Move X1, [X25]
	173 Move X3, [X22]
	174 Move X4, X31
	175 Call String.Concat, X0, X1, X2, X3
	176 Move X2, [X19+56]
	177 Move X1, [X26]
	178 Move X3, [X22]
	179 Move X4, X31
	180 Call String.Concat, X0, X1, X2, X3
	181 Move X8, [X23]
	182 Move X21, X0
	183 Move W1, 4
	184 Move X0, X8
	185 Call 0x1C17D6C
	186 Compare X0, 0
	187 JumpIfEqual {353}
	188 Move X20, X0
	189 Compare X21, 0
	190 JumpIfEqual {197}
	191 Move X8, [X20]
	192 Move X0, X21
	193 Move X1, [X8+64]
	194 Call 0x1C17E00
	195 Compare X0, 0
	196 JumpIfEqual {350}
	197 Move W8, [X20+24]
	198 Compare W8, 0
	199 JumpIfEqual {349}
	200 Move X24, 0xD22000
	201 Move X24, [X24+584]
	202 Move [X20+32], X21
	203 Move X0, [X24]
	204 Compare X0, 0
	205 JumpIfEqual {212}
	206 Move X8, [X20]
	207 Move X1, [X8+64]
	208 Call 0x1C17E00
	209 Compare X0, 0
	210 JumpIfEqual {350}
	211 Move W8, [X20+24]
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Move X8, [X24]
	214 Move X9, 0xCE7000
	215 Move X9, [X9+2904]
	216 Add X1, X31, 24
	217 Move [X20+40], X8
	218 Move W8, [X19+64]
	219 Move X0, [X9]
	220 Move [X31+24], W8
	221 Call 0x1C17E04
	222 Move X21, X0
	223 Compare X0, 0
	224 JumpIfEqual {231}
	225 Move X8, [X20]
	226 Move X0, X21
	227 Move X1, [X8+64]
	228 Call 0x1C17E00
	229 Compare X0, 0
	230 JumpIfEqual {350}
	231 Move W8, [X20+24]
	232 NotImplemented "Instruction CMP not yet implemented."
	233 Move [X20+48], X21
	234 Move X0, [X22]
	235 Compare X0, 0
	236 JumpIfEqual {243}
	237 Move X8, [X20]
	238 Move X1, [X8+64]
	239 Call 0x1C17E00
	240 Compare X0, 0
	241 JumpIfEqual {350}
	242 Move W8, [X20+24]
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Move X8, [X22]
	245 Move X0, X20
	246 Move X1, X31
	247 Move [X20+56], X8
	248 Call String.Concat, X0
	249 Move X8, [X23]
	250 Move X21, X0
	251 Move W1, 4
	252 Move X0, X8
	253 Call 0x1C17D6C
	254 Compare X0, 0
	255 JumpIfEqual {353}
	256 Move X20, X0
	257 Compare X21, 0
	258 JumpIfEqual {265}
	259 Move X8, [X20]
	260 Move X0, X21
	261 Move X1, [X8+64]
	262 Call 0x1C17E00
	263 Compare X0, 0
	264 JumpIfEqual {350}
	265 Move W8, [X20+24]
	266 Compare W8, 0
	267 JumpIfEqual {349}
	268 Move X23, 0xD22000
	269 Move X23, [X23+592]
	270 Move [X20+32], X21
	271 Move X0, [X23]
	272 Compare X0, 0
	273 JumpIfEqual {280}
	274 Move X8, [X20]
	275 Move X1, [X8+64]
	276 Call 0x1C17E00
	277 Compare X0, 0
	278 JumpIfEqual {350}
	279 Move W8, [X20+24]
	280 NotImplemented "Instruction CMP not yet implemented."
	281 Move X8, [X23]
	282 Move X9, 0xD22000
	283 Move X9, [X9+576]
	284 Add X1, X31, 12
	285 Move [X20+40], X8
	286 Move W8, [X19+68]
	287 Move X0, [X9]
	288 Move [X31+12], W8
	289 Call 0x1C17E04
	290 Move X21, X0
	291 Compare X0, 0
	292 JumpIfEqual {299}
	293 Move X8, [X20]
	294 Move X0, X21
	295 Move X1, [X8+64]
	296 Call 0x1C17E00
	297 Compare X0, 0
	298 JumpIfEqual {350}
	299 Move W8, [X20+24]
	300 NotImplemented "Instruction CMP not yet implemented."
	301 Move [X20+48], X21
	302 Move X0, [X22]
	303 Compare X0, 0
	304 JumpIfEqual {311}
	305 Move X8, [X20]
	306 Move X1, [X8+64]
	307 Call 0x1C17E00
	308 Compare X0, 0
	309 JumpIfEqual {350}
	310 Move W8, [X20+24]
	311 NotImplemented "Instruction CMP not yet implemented."
	312 Move X8, [X22]
	313 Move X21, 0xD22000
	314 Move X23, 0xD21000
	315 Move X24, 0xD22000
	316 Move X21, [X21+608]
	317 Move X23, [X23+3560]
	318 Move X24, [X24+48]
	319 Move X0, X20
	320 Move X1, X31
	321 Move [X20+56], X8
	322 Call String.Concat, X0
	323 Move X2, [X19+72]
	324 Move X1, [X21]
	325 Move X3, [X22]
	326 Move X4, X31
	327 Call String.Concat, X0, X1, X2, X3
	328 Move X2, [X19+80]
	329 Move X1, [X23]
	330 Move X3, [X22]
	331 Move X4, X31
	332 Call String.Concat, X0, X1, X2, X3
	333 Move X2, [X19+88]
	334 Move X1, [X24]
	335 Move X3, [X22]
	336 Move X4, X31
	337 Call String.Concat, X0, X1, X2, X3
	338 Move X20, [X31+80]
	339 Move X19, [X31+88]
	340 Move X22, [X31+64]
	341 Move X21, [X31+72]
	342 Move X24, [X31+48]
	343 Move X23, [X31+56]
	344 Move X26, [X31+32]
	345 Move X25, [X31+40]
	346 Move X30, [X31+16]
	347 Add X31, X31, 96
	348 Return X0
	349 Call 0x1C17F28
	350 Call 0x1C17F44
	351 Move X1, X31
	352 Call 0x1C17DEC
	353 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0340DC50 LDR X30, [X31 + 0x70]
	0x0340DC54 ADD X31, X31, 0xB0

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

