Type: Nakama.Socket/<RpcAsync>d__104

Method: System.Void MoveNext()

Disassembly:
	0x03483E18 STR V0, [X22 + 0x1]
	0x03483E1C LDR X8, [X19 + 0x38]
	0x03483E20 STR X8, [X22 + 0x20]
	0x03483E24 STR X22, [X21 + 0x50]
	0x03483E28 MOV X0, X20
	0x03483E2C MOV X1, X21
	0x03483E30 MOV X2, X31
	0x03483E34 BL 0x347BA8C
	0x03483E38 CBZ X0, 0x3483F28
	0x03483E3C ADRP X8, 0xCAD000
	0x03483E40 LDR X8, [X8 + 0xE98]
	0x03483E44 LDR X1, [X8]
	0x03483E48 BL 0x269F5D0
	0x03483E4C ADRP X8, 0xCAD000
	0x03483E50 LDR X8, [X8 + 0xE90]
	0x03483E54 STR X0, [X31 + 0x8]
	0x03483E58 LDR X1, [X8]
	0x03483E5C ADD X0, X31, 0x8
	0x03483E60 BL 0x2677430
	0x03483E64 TBNZ X0, 0x0, 0x3483EB8
	0x03483E68 STR W31, [X19]
	0x03483E6C LDR X8, [X31 + 0x8]
	0x03483E70 STR X8, [X19 + 0x40]
	0x03483E74 LDR X0, [X23]
	0x03483E78 LDR W8, [X0 + 0xE0]
	0x03483E7C CBNZ W8, 0x3483E84
	0x03483E80 BL 0x1C16DFC
	0x03483E84 ADRP X8, 0xCAE000
	0x03483E88 LDR X8, [X8 + 0x60]
	0x03483E8C ADD X0, X19, 0x8
	0x03483E90 LDR X3, [X8]
	0x03483E94 ADD X1, X31, 0x8
	0x03483E98 MOV X2, X19
	0x03483E9C BL 0x1FC316C
	0x03483EA0 B 0x3483F04
	0x03483EA4 LDR X8, [X19 + 0x40]
	0x03483EA8 MOVN W9, 0x0
	0x03483EAC STR X8, [X31 + 0x8]
	0x03483EB0 STR X31, [X19 + 0x40]
	0x03483EB4 STR W9, [X19]
	0x03483EB8 ADRP X8, 0xCAD000
	0x03483EBC LDR X8, [X8 + 0xE88]
	0x03483EC0 ADD X0, X31, 0x8
	0x03483EC4 LDR X1, [X8]
	0x03483EC8 BL 0x2677474
	0x03483ECC CBZ X0, 0x3483F18
	0x03483ED0 MOVN W8, 0x1
	0x03483ED4 LDR X20, [X0 + 0x38]
	0x03483ED8 STR W8, [X19], #0x8
	0x03483EDC LDR X0, [X23]
	0x03483EE0 ADRP X21, 0xCAD000
	0x03483EE4 LDR W8, [X0 + 0xE0]
	0x03483EE8 LDR X21, [X21 + 0xFC8]
	0x03483EEC CBNZ W8, 0x3483EF4
	0x03483EF0 BL 0x1C16DFC
	0x03483EF4 LDR X2, [X21]
	0x03483EF8 MOV X0, X19
	0x03483EFC MOV X1, X20
	0x03483F00 BL 0x26322B0
	0x03483F04 LDP X20, X19, [X31 + 0x30]
	0x03483F08 LDP X22, X21, [X31 + 0x20]
	0x03483F0C LDP X30, X23, [X31 + 0x10]
	0x03483F10 ADD X31, X31, 0x40
	0x03483F14 RET
	0x03483F18 BL 0x1C16F20
	0x03483F1C BL 0x1C16F20
	0x03483F20 BL 0x1C16F20
	0x03483F24 BL 0x1C16F20
	0x03483F28 BL 0x1C16F20
	0x03483F2C B 0x3483F58
	0x03483F30 B 0x3483F58
	0x03483F34 B 0x3483F58
	0x03483F38 B 0x3483F58
	0x03483F3C B 0x3483F58
	0x03483F40 B 0x3483F58
	0x03483F44 B 0x3483F58
	0x03483F48 B 0x3483F58
	0x03483F4C B 0x3483F58
	0x03483F50 B 0x3483F58
	0x03483F54 B 0x3483F58
	0x03483F58 MOV X20, X0
	0x03483F5C CMP W1, 0x1
	0x03483F60 B.NE 0x3483FFC
	0x03483F64 MOV X0, X20
	0x03483F68 BL 0x3EB1AD0
	0x03483F6C MOV X20, X0
	0x03483F70 ADRP X0, 0xC70000
	0x03483F74 LDR X0, [X0 + 0x7D0]
	0x03483F78 BL 0x1C16D08
	0x03483F7C LDR X8, [X20]
	0x03483F80 LDR X1, [X8]
	0x03483F84 BL 0x1C17270
	0x03483F88 TBZ X0, 0x0, 0x3483FD4
	0x03483F8C LDR X20, [X20]
	0x03483F90 BL 0x3EB1AE0
	0x03483F94 MOVN W8, 0x1
	0x03483F98 STR W8, [X19], #0x8
	0x03483F9C ADRP X0, 0xCAD000
	0x03483FA0 LDR X0, [X0 + 0xD40]
	0x03483FA4 BL 0x1C16D08
	0x03483FA8 LDR W8, [X0 + 0xE0]
	0x03483FAC CBNZ W8, 0x3483FB4
	0x03483FB0 BL 0x1C16DFC
	0x03483FB4 ADRP X0, 0xCAD000
	0x03483FB8 LDR X0, [X0 + 0xFD8]
	0x03483FBC BL 0x1C16D08
	0x03483FC0 MOV X2, X0
	0x03483FC4 MOV X0, X19
	0x03483FC8 MOV X1, X20
	0x03483FCC BL 0x26324C8
	0x03483FD0 B 0x3483F04
	0x03483FD4 MOVZ W0, 0x8
	0x03483FD8 BL 0x3EB1AF0
	0x03483FDC LDR X8, [X20]
	0x03483FE0 STR X8, [X0]
	0x03483FE4 ADRP X1, 0xA31000
	0x03483FE8 ADD X1, X1, 0xE58
	0x03483FEC MOV X2, X31
	0x03483FF0 BL 0x3EB1B00
	0x03483FF4 MOV X20, X0
	0x03483FF8 BL 0x3EB1AE0
	0x03483FFC MOV X0, X20
	0x03484000 BL 0x1D2C690
	0x03484004 BL 0x1990590
	0x03484008 STR X30, [X31 - 0x30]!
	0x0348400C STP X22, X21, [X31 + 0x10]
	0x03484010 STP X20, X19, [X31 + 0x20]
	0x03484014 ADRP X22, 0xF59000
	0x03484018 ADRP X21, 0xCAC000
	0x0348401C LDRB W8, [X22 + 0x8D3]
	0x03484020 LDR X21, [X21 + 0xD40]
	0x03484024 MOV X19, X1
	0x03484028 MOV X20, X0
	0x0348402C TBNZ X8, 0x0, 0x3484050
	0x03484030 ADRP X0, 0xCAC000
	0x03484034 LDR X0, [X0 + 0xFE0]
	0x03484038 BL 0x1C16CF4
	0x0348403C ADRP X0, 0xCAC000
	0x03484040 LDR X0, [X0 + 0xD40]
	0x03484044 BL 0x1C16CF4
	0x03484048 MOVZ W8, 0x1
	0x0348404C STRB W8, [X22 + 0x8D3]
	0x03484050 LDR X0, [X21]
	0x03484054 ADRP X21, 0xCAC000
	0x03484058 LDR W8, [X0 + 0xE0]
	0x0348405C LDR X21, [X21 + 0xFE0]
	0x03484060 CBNZ W8, 0x3484068
	0x03484064 BL 0x1C16DFC
	0x03484068 LDR X2, [X21]
	0x0348406C ADD X0, X20, 0x8
	0x03484070 MOV X1, X19
	0x03484074 LDP X20, X19, [X31 + 0x20]
	0x03484078 LDP X22, X21, [X31 + 0x10]
	0x0348407C LDR X30, [X31], #0x30
	0x03484080 B 0x2632228
	0x03484084 SUB X31, X31, 0x40
	0x03484088 STP X30, X23, [X31 + 0x10]
	0x0348408C STP X22, X21, [X31 + 0x20]
	0x03484090 STP X20, X19, [X31 + 0x30]
	0x03484094 ADRP X20, 0xF59000
	0x03484098 LDRB W8, [X20 + 0x8D4]
	0x0348409C MOV X19, X0
	0x034840A0 TBNZ X8, 0x0, 0x3484124
	0x034840A4 ADRP X0, 0xCAD000
	0x034840A8 LDR X0, [X0 + 0x70]
	0x034840AC BL 0x1C16CF4
	0x034840B0 ADRP X0, 0xCAC000
	0x034840B4 LDR X0, [X0 + 0xFC8]
	0x034840B8 BL 0x1C16CF4
	0x034840BC ADRP X0, 0xCAC000
	0x034840C0 LDR X0, [X0 + 0xD40]
	0x034840C4 BL 0x1C16CF4
	0x034840C8 ADRP X0, 0xCAD000
	0x034840CC LDR X0, [X0 + 0x78]
	0x034840D0 BL 0x1C16CF4
	0x034840D4 ADRP X0, 0xC6F000
	0x034840D8 LDR X0, [X0 + 0x758]
	0x034840DC BL 0x1C16CF4
	0x034840E0 ADRP X0, 0xCAC000
	0x034840E4 LDR X0, [X0 + 0xE88]
	0x034840E8 BL 0x1C16CF4
	0x034840EC ADRP X0, 0xCAC000
	0x034840F0 LDR X0, [X0 + 0xE90]
	0x034840F4 BL 0x1C16CF4
	0x034840F8 ADRP X0, 0xCAC000
	0x034840FC LDR X0, [X0 + 0xE98]
	0x03484100 BL 0x1C16CF4
	0x03484104 ADRP X0, 0xCAC000
	0x03484108 LDR X0, [X0 + 0xBC8]
	0x0348410C BL 0x1C16CF4
	0x03484110 ADRP X0, 0xC73000
	0x03484114 LDR X0, [X0 + 0x110]
	0x03484118 BL 0x1C16CF4
	0x0348411C MOVZ W8, 0x1
	0x03484120 STRB W8, [X20 + 0x8D4]
	0x03484124 STR X31, [X31 + 0x8]
	0x03484128 ADRP X23, 0xCAC000
	0x0348412C LDR W8, [X19]
	0x03484130 LDR X23, [X23 + 0xD40]
	0x03484134 CBZ W8, 0x348424C
	0x03484138 LDR X20, [X19 + 0x20]
	0x0348413C CBZ X20, 0x34842C4
	0x03484140 ADD X0, X20, 0x10
	0x03484144 MOV X1, X31
	0x03484148 BL 0x33EB14C
	0x0348414C ADRP X8, 0xCAC000
	0x03484150 LDR X8, [X8 + 0xBC8]
	0x03484154 MOV W22, W0
	0x03484158 LDR X0, [X8]
	0x0348415C BL 0x1C16F10
	0x03484160 MOV X21, X0
	0x03484164 MOV X1, X31
	0x03484168 BL 0x33BDD8C
	0x0348416C ADRP X8, 0xC6F000
	0x03484170 LDR X8, [X8 + 0x758]
	0x03484174 STR W22, [X31 + 0x4]
	0x03484178 LDR X0, [X8]
	0x0348417C ADD X1, X31, 0x4
	0x03484180 BL 0x1C16E04
	0x03484184 MOV X1, X0
	0x03484188 ADRP X8, 0xC73000
	0x0348418C LDR X8, [X8 + 0x110]
	0x03484190 LDR X0, [X8]
	0x03484194 MOV X2, X31
	0x03484198 BL 0x321EFD0
	0x0348419C CBZ X21, 0x34842C8
	0x034841A0 ADRP X8, 0xCAD000
	0x034841A4 LDR X8, [X8 + 0x78]
	0x034841A8 STR X0, [X21 + 0x10]
	0x034841AC LDR X0, [X8]
	0x034841B0 BL 0x1C16F10
	0x034841B4 MOV X22, X0
	0x034841B8 MOV X1, X31
	0x034841BC BL 0x343EF44
	0x034841C0 CBZ X22, 0x34842CC
	0x034841C4 LDUR V0, [X19 + 0x28]
	0x034841C8 STR V0, [X22 + 0x1]
	0x034841CC STR X22, [X21 + 0x48]
	0x034841D0 MOV X0, X20
	0x034841D4 MOV X1, X21
	0x034841D8 MOV X2, X31
	0x034841DC BL 0x347BA8C
	0x034841E0 CBZ X0, 0x34842D0
	0x034841E4 ADRP X8, 0xCAC000
	0x034841E8 LDR X8, [X8 + 0xE98]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X20, 0xF5B000
	012 Move W8, [X20+2254]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {65}
	018 Move X0, 0xCAE000
	019 Move X0, [X0+4072]
	020 Call 0x1C17CF4
	021 Move X0, 0xCA4000
	022 Move X0, [X0+3312]
	023 Call 0x1C17CF4
	024 Move X0, 0xCA4000
	025 Move X0, [X0+3320]
	026 Call 0x1C17CF4
	027 Move X0, 0xCA4000
	028 Move X0, [X0+3328]
	029 Call 0x1C17CF4
	030 Move X0, 0xC99000
	031 Move X0, [X0+1456]
	032 Call 0x1C17CF4
	033 Move X0, 0xCAE000
	034 Move X0, [X0+4088]
	035 Call 0x1C17CF4
	036 Move X0, 0xCAD000
	037 Move X0, [X0+704]
	038 Call 0x1C17CF4
	039 Move X0, 0xCAC000
	040 Move X0, [X0+1640]
	041 Call 0x1C17CF4
	042 Move X0, 0xC7A000
	043 Move X0, [X0+2536]
	044 Call 0x1C17CF4
	045 Move X0, 0xC71000
	046 Move X0, [X0+1880]
	047 Call 0x1C17CF4
	048 Move X0, 0xCAE000
	049 Move X0, [X0+3720]
	050 Call 0x1C17CF4
	051 Move X0, 0xCAE000
	052 Move X0, [X0+3728]
	053 Call 0x1C17CF4
	054 Move X0, 0xCAE000
	055 Move X0, [X0+3736]
	056 Call 0x1C17CF4
	057 Move X0, 0xCAE000
	058 Move X0, [X0+3016]
	059 Call 0x1C17CF4
	060 Move X0, 0xC75000
	061 Move X0, [X0+272]
	062 Call 0x1C17CF4
	063 Move W8, 1
	064 Move [X20+2254], W8
	065 Move [X31+24], X31
	066 Move X26, 0xCAC000
	067 Move W8, [X19]
	068 Move X26, [X26+1640]
	069 Compare W8, 0
	070 JumpIfEqual {170}
	071 Move X20, [X19+32]
	072 Compare X20, 0
	073 JumpIfEqual {212}
	074 Add X0, X20, 16
	075 Move X1, X31
	076 Call Interlocked.Increment, X0
	077 Move X8, 0xCAE000
	078 Move X8, [X8+3016]
	079 Move W22, W0
	080 Move X0, [X8]
	081 Call 0x1C17F10
	082 Move X21, X0
	083 Move X1, X31
	084 Call Object..ctor, X0
	085 Move X8, 0xC71000
	086 Move X8, [X8+1880]
	087 Move [X31+12], W22
	088 Move X0, [X8]
	089 Add X1, X31, 12
	090 Call 0x1C17E04
	091 Move X1, X0
	092 Move X8, 0xC75000
	093 Move X8, [X8+272]
	094 Move X0, [X8]
	095 Move X2, X31
	096 Call String.Format, X0, X1
	097 Compare X21, 0
	098 JumpIfEqual {213}
	099 Move X8, 0xCAE000
	100 Move X8, [X8+4072]
	101 Move [X21+16], X0
	102 Move X0, [X8]
	103 Call 0x1C17F10
	104 Move X22, X0
	105 Move X1, X31
	106 Call ApiRpc..ctor, X0
	107 Compare X22, 0
	108 JumpIfEqual {214}
	109 Move X8, [X19+40]
	110 Move X9, 0xC99000
	111 Move X9, [X9+1456]
	112 Move [X22+24], X8
	113 Move X0, [X9]
	114 Move W8, [X0+224]
	115 Compare W8, 0
	116 JumpIfNotEqual {118}
	117 Call 0x1C17DFC
	118 Move X8, 0xC7A000
	119 Move X8, [X8+2536]
	120 Move X25, [X19+48]
	121 Move W24, [X19+56]
	122 Move W23, [X19+60]
	123 Move X0, [X8]
	124 Move W8, [X0+224]
	125 Compare W8, 0
	126 JumpIfNotEqual {128}
	127 Call 0x1C17DFC
	128 Move X0, X25
	129 Move W1, W24
	130 Move W2, W23
	131 Move X3, X31
	132 Call Convert.ToBase64String, X0, X1, X2
	133 Move [X22+32], X0
	134 Move [X21+200], X22
	135 Move X0, X20
	136 Move X1, X21
	137 Move X2, X31
	138 Call Socket.SendAsync, X0, X1
	139 Compare X0, 0
	140 JumpIfEqual {215}
	141 Move X8, 0xCAD000
	142 Move X8, [X8+3736]
	143 Move X1, [X8]
	144 Call Task`1<Object>.GetAwaiter, X0
	145 Move X8, 0xCAD000
	146 Move X8, [X8+3728]
	147 Move [X31+24], X0
	148 Move X1, [X8]
	149 Add X0, X31, 24
	150 Call TaskAwaiter`1<Object>.get_IsCompleted, X0
	151 Move TEMP, X0
	152 And TEMP, TEMP, 1
	153 Compare TEMP, 1
	154 JumpIfEqual {177}
	155 Move [X19], W31
	156 Move X8, [X31+24]
	157 Move [X19+64], X8
	158 Move X0, [X26]
	159 Move W8, [X0+224]
	160 Compare W8, 0
	161 JumpIfNotEqual {163}
	162 Call 0x1C17DFC
	163 Move X8, 0xCAD000
	164 Move X8, [X8+4088]
	165 Add X0, X19, 8
	166 Move X3, [X8]
	167 Add X1, X31, 24
	168 Move X2, X19
	169 Call AsyncTaskMethodBuilder`1<Object>.AwaitUnsafeOnCompleted, X0, X1, X2
	170 Move X8, [X19+64]
	171 Move TEMP, 0
	172 Not TEMP
	173 Move W9, TEMP
	174 Move [X31+24], X8
	175 Move [X19+64], X31
	176 Move [X19], W9
	177 Move X8, 0xCAD000
	178 Move X8, [X8+3720]
	179 Add X0, X31, 24
	180 Move X1, [X8]
	181 Call TaskAwaiter`1<Object>.GetResult, X0
	182 Compare X0, 0
	183 JumpIfEqual {211}
	184 Move TEMP, 1
	185 Not TEMP
	186 Move W8, TEMP
	187 Move X20, [X0+200]
	188 Move [X19+8], W8
	189 Move X0, [X26]
	190 Move X21, 0xCAC000
	191 Move W8, [X0+224]
	192 Move X21, [X21+704]
	193 Compare W8, 0
	194 JumpIfNotEqual {196}
	195 Call 0x1C17DFC
	196 Move X2, [X21]
	197 Move X0, X19
	198 Move X1, X20
	199 Call AsyncTaskMethodBuilder`1<Object>.SetResult, X0, X1
	200 Move X20, [X31+80]
	201 Move X19, [X31+88]
	202 Move X22, [X31+64]
	203 Move X21, [X31+72]
	204 Move X24, [X31+48]
	205 Move X23, [X31+56]
	206 Move X26, [X31+32]
	207 Move X25, [X31+40]
	208 Move X30, [X31+16]
	209 Add X31, X31, 96
	210 Return 
	211 Call 0x1C17F20
	212 Call 0x1C17F20
	213 Call 0x1C17F20
	214 Call 0x1C17F20
	215 Call 0x1C17F20
	216 Move X20, X0
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Move X0, X20
	219 Call 0x3EB2AD0
	220 Move X20, X0
	221 Move X0, 0xC70000
	222 Move X0, [X0+2000]
	223 Call 0x1C17D08
	224 Move X8, [X20]
	225 Move X1, [X8]
	226 Call 0x1C18270
	227 Move TEMP, X0
	228 And TEMP, TEMP, 1
	229 Compare TEMP, 1
	230 JumpIfNotEqual {251}
	231 Move X20, [X20]
	232 Call 0x3EB2AE0
	233 Move TEMP, 1
	234 Not TEMP
	235 Move W8, TEMP
	236 Move [X19+8], W8
	237 Move X0, 0xCAB000
	238 Move X0, [X0+1640]
	239 Call 0x1C17D08
	240 Move W8, [X0+224]
	241 Compare W8, 0
	242 JumpIfNotEqual {244}
	243 Call 0x1C17DFC
	244 Move X0, 0xCAC000
	245 Move X0, [X0+768]
	246 Call 0x1C17D08
	247 Move X2, X0
	248 Move X0, X19
	249 Move X1, X20
	250 Call AsyncTaskMethodBuilder`1<Object>.SetException, X0, X1
	251 Move W0, 8
	252 Call 0x3EB2AF0
	253 Move X8, [X20]
	254 Move [X0], X8
	255 Move X1, 0xA31000
	256 Add X1, X1, 3672
	257 Move X2, X31
	258 Call 0x3EB2B00
	259 Move X20, X0
	260 Call 0x3EB2AE0
	261 Move X0, X20
	262 Call 0x1D2D690
	263 Call 0x1991590

Method: System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)

Disassembly:
	0x034841EC LDR X1, [X8]
	0x034841F0 BL 0x269F5D0
	0x034841F4 ADRP X8, 0xCAC000
	0x034841F8 LDR X8, [X8 + 0xE90]
	0x034841FC STR X0, [X31 + 0x8]
	0x03484200 LDR X1, [X8]
	0x03484204 ADD X0, X31, 0x8
	0x03484208 BL 0x2677430
	0x0348420C TBNZ X0, 0x0, 0x3484260
	0x03484210 STR W31, [X19]
	0x03484214 LDR X8, [X31 + 0x8]
	0x03484218 STR X8, [X19 + 0x38]
	0x0348421C LDR X0, [X23]
	0x03484220 LDR W8, [X0 + 0xE0]
	0x03484224 CBNZ W8, 0x348422C
	0x03484228 BL 0x1C16DFC
	0x0348422C ADRP X8, 0xCAD000
	0x03484230 LDR X8, [X8 + 0x70]
	0x03484234 ADD X0, X19, 0x8
	0x03484238 LDR X3, [X8]
	0x0348423C ADD X1, X31, 0x8
	0x03484240 MOV X2, X19
	0x03484244 BL 0x1FC3380
	0x03484248 B 0x34842AC
	0x0348424C LDR X8, [X19 + 0x38]
	0x03484250 MOVN W9, 0x0
	0x03484254 STR X8, [X31 + 0x8]
	0x03484258 STR X31, [X19 + 0x38]
	0x0348425C STR W9, [X19]
	0x03484260 ADRP X8, 0xCAC000
	0x03484264 LDR X8, [X8 + 0xE88]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xF5A000
	007 Move X21, 0xCAB000
	008 Move W8, [X22+2255]
	009 Move X21, [X21+1640]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xCAC000
	017 Move X0, [X0+776]
	018 Call 0x1C17CF4
	019 Move X0, 0xCAB000
	020 Move X0, [X0+1640]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2255], W8
	024 Move X0, [X21]
	025 Move X21, 0xCAC000
	026 Move W8, [X0+224]
	027 Move X21, [X21+776]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X2, [X21]
	032 Add X0, X20, 8
	033 Move X1, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Call AsyncTaskMethodBuilder`1<Object>.SetStateMachine, X0, X1
	040 Return 

