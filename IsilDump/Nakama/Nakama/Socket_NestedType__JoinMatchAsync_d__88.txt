Type: Nakama.Socket/<JoinMatchAsync>d__88

Method: System.Void MoveNext()

Disassembly:
	0x03482F70 BL 0x321EFD0
	0x03482F74 CBZ X21, 0x34830F8
	0x03482F78 ADRP X8, 0xCAE000
	0x03482F7C LDR X8, [X8 + 0xFE8]
	0x03482F80 STR X0, [X21 + 0x10]
	0x03482F84 LDR X0, [X8]
	0x03482F88 BL 0x1C16F10
	0x03482F8C MOV X22, X0
	0x03482F90 MOV X1, X31
	0x03482F94 BL 0x34083AC
	0x03482F98 CBZ X22, 0x34830FC
	0x03482F9C LDR X8, [X19 + 0x28]
	0x03482FA0 ADRP X9, 0xC99000
	0x03482FA4 LDR X9, [X9 + 0x5B0]
	0x03482FA8 STR X8, [X22 + 0x18]
	0x03482FAC LDR X0, [X9]
	0x03482FB0 LDR W8, [X0 + 0xE0]
	0x03482FB4 CBNZ W8, 0x3482FBC
	0x03482FB8 BL 0x1C16DFC
	0x03482FBC ADRP X8, 0xC7A000
	0x03482FC0 LDR X8, [X8 + 0x9E8]
	0x03482FC4 LDR X25, [X19 + 0x30]
	0x03482FC8 LDP W24, W23, [X19 + 0x38]
	0x03482FCC LDR X0, [X8]
	0x03482FD0 LDR W8, [X0 + 0xE0]
	0x03482FD4 CBNZ W8, 0x3482FDC
	0x03482FD8 BL 0x1C16DFC
	0x03482FDC MOV X0, X25
	0x03482FE0 MOV W1, W24
	0x03482FE4 MOV W2, W23
	0x03482FE8 MOV X3, X31
	0x03482FEC BL 0x3322804
	0x03482FF0 STR X0, [X22 + 0x20]
	0x03482FF4 STR X22, [X21 + 0xC8]
	0x03482FF8 MOV X0, X20
	0x03482FFC MOV X1, X21
	0x03483000 MOV X2, X31
	0x03483004 BL 0x347BA8C
	0x03483008 CBZ X0, 0x3483100
	0x0348300C ADRP X8, 0xCAD000
	0x03483010 LDR X8, [X8 + 0xE98]
	0x03483014 LDR X1, [X8]
	0x03483018 BL 0x269F5D0
	0x0348301C ADRP X8, 0xCAD000
	0x03483020 LDR X8, [X8 + 0xE90]
	0x03483024 STR X0, [X31 + 0x18]
	0x03483028 LDR X1, [X8]
	0x0348302C ADD X0, X31, 0x18
	0x03483030 BL 0x2677430
	0x03483034 TBNZ X0, 0x0, 0x3483088
	0x03483038 STR W31, [X19]
	0x0348303C LDR X8, [X31 + 0x18]
	0x03483040 STR X8, [X19 + 0x40]
	0x03483044 LDR X0, [X26]
	0x03483048 LDR W8, [X0 + 0xE0]
	0x0348304C CBNZ W8, 0x3483054
	0x03483050 BL 0x1C16DFC
	0x03483054 ADRP X8, 0xCAD000
	0x03483058 LDR X8, [X8 + 0xFF8]
	0x0348305C ADD X0, X19, 0x8
	0x03483060 LDR X3, [X8]
	0x03483064 ADD X1, X31, 0x18
	0x03483068 MOV X2, X19
	0x0348306C BL 0x1FC2D44
	0x03483070 B 0x34830D4
	0x03483074 LDR X8, [X19 + 0x40]
	0x03483078 MOVN W9, 0x0
	0x0348307C STR X8, [X31 + 0x18]
	0x03483080 STR X31, [X19 + 0x40]
	0x03483084 STR W9, [X19]
	0x03483088 ADRP X8, 0xCAD000
	0x0348308C LDR X8, [X8 + 0xE88]
	0x03483090 ADD X0, X31, 0x18
	0x03483094 LDR X1, [X8]
	0x03483098 BL 0x2677474
	0x0348309C CBZ X0, 0x34830F0
	0x034830A0 MOVN W8, 0x1
	0x034830A4 LDR X20, [X0 + 0xC8]
	0x034830A8 STR W8, [X19], #0x8
	0x034830AC LDR X0, [X26]
	0x034830B0 ADRP X21, 0xCAC000
	0x034830B4 LDR W8, [X0 + 0xE0]
	0x034830B8 LDR X21, [X21 + 0x2C0]
	0x034830BC CBNZ W8, 0x34830C4
	0x034830C0 BL 0x1C16DFC
	0x034830C4 LDR X2, [X21]
	0x034830C8 MOV X0, X19
	0x034830CC MOV X1, X20
	0x034830D0 BL 0x26322B0
	0x034830D4 LDP X20, X19, [X31 + 0x50]
	0x034830D8 LDP X22, X21, [X31 + 0x40]
	0x034830DC LDP X24, X23, [X31 + 0x30]
	0x034830E0 LDP X26, X25, [X31 + 0x20]
	0x034830E4 LDR X30, [X31 + 0x10]
	0x034830E8 ADD X31, X31, 0x60
	0x034830EC RET
	0x034830F0 BL 0x1C16F20
	0x034830F4 BL 0x1C16F20
	0x034830F8 BL 0x1C16F20
	0x034830FC BL 0x1C16F20
	0x03483100 BL 0x1C16F20
	0x03483104 B 0x348313C
	0x03483108 B 0x348313C
	0x0348310C B 0x348313C
	0x03483110 B 0x348313C
	0x03483114 B 0x348313C
	0x03483118 B 0x348313C
	0x0348311C B 0x348313C
	0x03483120 B 0x348313C
	0x03483124 B 0x348313C
	0x03483128 B 0x348313C
	0x0348312C B 0x348313C
	0x03483130 B 0x348313C
	0x03483134 B 0x348313C
	0x03483138 B 0x348313C
	0x0348313C MOV X20, X0
	0x03483140 CMP W1, 0x1
	0x03483144 B.NE 0x34831E0
	0x03483148 MOV X0, X20
	0x0348314C BL 0x3EB1AD0
	0x03483150 MOV X20, X0
	0x03483154 ADRP X0, 0xC70000
	0x03483158 LDR X0, [X0 + 0x7D0]
	0x0348315C BL 0x1C16D08
	0x03483160 LDR X8, [X20]
	0x03483164 LDR X1, [X8]
	0x03483168 BL 0x1C17270
	0x0348316C TBZ X0, 0x0, 0x34831B8
	0x03483170 LDR X20, [X20]
	0x03483174 BL 0x3EB1AE0
	0x03483178 MOVN W8, 0x1
	0x0348317C STR W8, [X19], #0x8
	0x03483180 ADRP X0, 0xCAB000
	0x03483184 LDR X0, [X0 + 0x668]
	0x03483188 BL 0x1C16D08
	0x0348318C LDR W8, [X0 + 0xE0]
	0x03483190 CBNZ W8, 0x3483198
	0x03483194 BL 0x1C16DFC
	0x03483198 ADRP X0, 0xCAC000
	0x0348319C LDR X0, [X0 + 0x300]
	0x034831A0 BL 0x1C16D08
	0x034831A4 MOV X2, X0
	0x034831A8 MOV X0, X19
	0x034831AC MOV X1, X20
	0x034831B0 BL 0x26324C8
	0x034831B4 B 0x34830D4
	0x034831B8 MOVZ W0, 0x8
	0x034831BC BL 0x3EB1AF0
	0x034831C0 LDR X8, [X20]
	0x034831C4 STR X8, [X0]
	0x034831C8 ADRP X1, 0xA31000
	0x034831CC ADD X1, X1, 0xE58
	0x034831D0 MOV X2, X31
	0x034831D4 BL 0x3EB1B00
	0x034831D8 MOV X20, X0
	0x034831DC BL 0x3EB1AE0
	0x034831E0 MOV X0, X20
	0x034831E4 BL 0x1D2C690
	0x034831E8 BL 0x1990590
	0x034831EC STR X30, [X31 - 0x30]!
	0x034831F0 STP X22, X21, [X31 + 0x10]
	0x034831F4 STP X20, X19, [X31 + 0x20]
	0x034831F8 ADRP X22, 0xF5A000
	0x034831FC ADRP X21, 0xCAB000
	0x03483200 LDRB W8, [X22 + 0x8CF]
	0x03483204 LDR X21, [X21 + 0x668]
	0x03483208 MOV X19, X1
	0x0348320C MOV X20, X0
	0x03483210 TBNZ X8, 0x0, 0x3483234
	0x03483214 ADRP X0, 0xCAC000
	0x03483218 LDR X0, [X0 + 0x308]
	0x0348321C BL 0x1C16CF4
	0x03483220 ADRP X0, 0xCAB000
	0x03483224 LDR X0, [X0 + 0x668]
	0x03483228 BL 0x1C16CF4
	0x0348322C MOVZ W8, 0x1
	0x03483230 STRB W8, [X22 + 0x8CF]
	0x03483234 LDR X0, [X21]
	0x03483238 ADRP X21, 0xCAC000
	0x0348323C LDR W8, [X0 + 0xE0]
	0x03483240 LDR X21, [X21 + 0x308]
	0x03483244 CBNZ W8, 0x348324C
	0x03483248 BL 0x1C16DFC
	0x0348324C LDR X2, [X21]
	0x03483250 ADD X0, X20, 0x8
	0x03483254 MOV X1, X19
	0x03483258 LDP X20, X19, [X31 + 0x20]
	0x0348325C LDP X22, X21, [X31 + 0x10]
	0x03483260 LDR X30, [X31], #0x30
	0x03483264 B 0x2632228
	0x03483268 SUB X31, X31, 0x90
	0x0348326C STP X30, X27, [X31 + 0x40]
	0x03483270 STP X26, X25, [X31 + 0x50]
	0x03483274 STP X24, X23, [X31 + 0x60]
	0x03483278 STP X22, X21, [X31 + 0x70]
	0x0348327C STP X20, X19, [X31 + 0x80]
	0x03483280 ADRP X20, 0xF5A000
	0x03483284 LDRB W8, [X20 + 0x8D0]
	0x03483288 MOV X19, X0
	0x0348328C TBNZ X8, 0x0, 0x3483394
	0x03483290 ADRP X0, 0xC71000
	0x03483294 LDR X0, [X0 + 0xE70]
	0x03483298 BL 0x1C16CF4
	0x0348329C ADRP X0, 0xC7B000
	0x034832A0 LDR X0, [X0 + 0xE68]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xF5C000
	009 Move W8, [X20+2246]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {47}
	015 Move X0, 0xCAF000
	016 Move X0, [X0+3984]
	017 Call 0x1C17CF4
	018 Move X0, 0xCAF000
	019 Move X0, [X0+3808]
	020 Call 0x1C17CF4
	021 Move X0, 0xCAF000
	022 Move X0, [X0+3152]
	023 Call 0x1C17CF4
	024 Move X0, 0xC72000
	025 Move X0, [X0+1880]
	026 Call 0x1C17CF4
	027 Move X0, 0xCAF000
	028 Move X0, [X0+3976]
	029 Call 0x1C17CF4
	030 Move X0, 0xCAF000
	031 Move X0, [X0+3720]
	032 Call 0x1C17CF4
	033 Move X0, 0xCAF000
	034 Move X0, [X0+3728]
	035 Call 0x1C17CF4
	036 Move X0, 0xCAF000
	037 Move X0, [X0+3736]
	038 Call 0x1C17CF4
	039 Move X0, 0xCAF000
	040 Move X0, [X0+3016]
	041 Call 0x1C17CF4
	042 Move X0, 0xC76000
	043 Move X0, [X0+272]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X20+2246], W8
	047 Move [X31+8], X31
	048 Move X23, 0xCAE000
	049 Move W8, [X19]
	050 Move X23, [X23+3152]
	051 Compare W8, 0
	052 JumpIfEqual {131}
	053 Move X20, [X19+32]
	054 Compare X20, 0
	055 JumpIfEqual {170}
	056 Add X0, X20, 16
	057 Move X1, X31
	058 Call Interlocked.Increment, X0
	059 Move X8, 0xCAE000
	060 Move X8, [X8+3016]
	061 Move W22, W0
	062 Move X0, [X8]
	063 Call 0x1C17F10
	064 Move X21, X0
	065 Move X1, X31
	066 Call Object..ctor, X0
	067 Move X8, 0xC71000
	068 Move X8, [X8+1880]
	069 Move [X31+4], W22
	070 Move X0, [X8]
	071 Add X1, X31, 4
	072 Call 0x1C17E04
	073 Move X1, X0
	074 Move X8, 0xC75000
	075 Move X8, [X8+272]
	076 Move X0, [X8]
	077 Move X2, X31
	078 Call String.Format, X0, X1
	079 Compare X21, 0
	080 JumpIfEqual {171}
	081 Move X8, 0xCAE000
	082 Move X8, [X8+3976]
	083 Move [X21+16], X0
	084 Move X0, [X8]
	085 Call 0x1C17F10
	086 Move X22, X0
	087 Move X1, X31
	088 Call MatchJoinMessage..ctor, X0
	089 Compare X22, 0
	090 JumpIfEqual {172}
	091 Move X8, [X19+40]
	092 Move [X22+16], X8
	093 Move X8, [X19+48]
	094 Move [X22+32], X8
	095 Move [X21+152], X22
	096 Move X0, X20
	097 Move X1, X21
	098 Move X2, X31
	099 Call Socket.SendAsync, X0, X1
	100 Compare X0, 0
	101 JumpIfEqual {173}
	102 Move X8, 0xCAE000
	103 Move X8, [X8+3736]
	104 Move X1, [X8]
	105 Call Task`1<Object>.GetAwaiter, X0
	106 Move X8, 0xCAE000
	107 Move X8, [X8+3728]
	108 Move [X31+8], X0
	109 Move X1, [X8]
	110 Add X0, X31, 8
	111 Call TaskAwaiter`1<Object>.get_IsCompleted, X0
	112 Move TEMP, X0
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfEqual {138}
	116 Move [X19], W31
	117 Move X8, [X31+8]
	118 Move [X19+56], X8
	119 Move X0, [X23]
	120 Move W8, [X0+224]
	121 Compare W8, 0
	122 JumpIfNotEqual {124}
	123 Call 0x1C17DFC
	124 Move X8, 0xCAE000
	125 Move X8, [X8+3984]
	126 Add X0, X19, 8
	127 Move X3, [X8]
	128 Add X1, X31, 8
	129 Move X2, X19
	130 Call AsyncTaskMethodBuilder`1<Object>.AwaitUnsafeOnCompleted, X0, X1, X2
	131 Move X8, [X19+56]
	132 Move TEMP, 0
	133 Not TEMP
	134 Move W9, TEMP
	135 Move [X31+8], X8
	136 Move [X19+56], X31
	137 Move [X19], W9
	138 Move X8, 0xCAE000
	139 Move X8, [X8+3720]
	140 Add X0, X31, 8
	141 Move X1, [X8]
	142 Call TaskAwaiter`1<Object>.GetResult, X0
	143 Compare X0, 0
	144 JumpIfEqual {169}
	145 Move TEMP, 1
	146 Not TEMP
	147 Move W8, TEMP
	148 Move X20, [X0+136]
	149 Move [X19+8], W8
	150 Move X0, [X23]
	151 Move X21, 0xCAE000
	152 Move W8, [X0+224]
	153 Move X21, [X21+3808]
	154 Compare W8, 0
	155 JumpIfNotEqual {157}
	156 Call 0x1C17DFC
	157 Move X2, [X21]
	158 Move X0, X19
	159 Move X1, X20
	160 Call AsyncTaskMethodBuilder`1<Object>.SetResult, X0, X1
	161 Move X20, [X31+48]
	162 Move X19, [X31+56]
	163 Move X22, [X31+32]
	164 Move X21, [X31+40]
	165 Move X30, [X31+16]
	166 Move X23, [X31+24]
	167 Add X31, X31, 64
	168 Return 
	169 Call 0x1C17F20
	170 Call 0x1C17F20
	171 Call 0x1C17F20
	172 Call 0x1C17F20
	173 Call 0x1C17F20
	174 Move X20, X0
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Move X0, X20
	177 Call 0x3EB2AD0
	178 Move X20, X0
	179 Move X0, 0xC71000
	180 Move X0, [X0+2000]
	181 Call 0x1C17D08
	182 Move X8, [X20]
	183 Move X1, [X8]
	184 Call 0x1C18270
	185 Move TEMP, X0
	186 And TEMP, TEMP, 1
	187 Compare TEMP, 1
	188 JumpIfNotEqual {209}
	189 Move X20, [X20]
	190 Call 0x3EB2AE0
	191 Move TEMP, 1
	192 Not TEMP
	193 Move W8, TEMP
	194 Move [X19+8], W8
	195 Move X0, 0xCAE000
	196 Move X0, [X0+3152]
	197 Call 0x1C17D08
	198 Move W8, [X0+224]
	199 Compare W8, 0
	200 JumpIfNotEqual {202}
	201 Call 0x1C17DFC
	202 Move X0, 0xCAE000
	203 Move X0, [X0+3824]
	204 Call 0x1C17D08
	205 Move X2, X0
	206 Move X0, X19
	207 Move X1, X20
	208 Call AsyncTaskMethodBuilder`1<Object>.SetException, X0, X1
	209 Move W0, 8
	210 Call 0x3EB2AF0
	211 Move X8, [X20]
	212 Move [X0], X8
	213 Move X1, 0xA32000
	214 Add X1, X1, 3672
	215 Move X2, X31
	216 Call 0x3EB2B00
	217 Move X20, X0
	218 Call 0x3EB2AE0
	219 Move X0, X20
	220 Call 0x1D2D690
	221 Call 0x1991590

Method: System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)

Disassembly:
	0x034832A4 BL 0x1C16CF4
	0x034832A8 ADRP X0, 0xCAE000
	0x034832AC LDR X0, [X0]
	0x034832B0 BL 0x1C16CF4
	0x034832B4 ADRP X0, 0xCAE000
	0x034832B8 LDR X0, [X0 + 0x8]
	0x034832BC BL 0x1C16CF4
	0x034832C0 ADRP X0, 0xCAE000
	0x034832C4 LDR X0, [X0 + 0x10]
	0x034832C8 BL 0x1C16CF4
	0x034832CC ADRP X0, 0xCAD000
	0x034832D0 LDR X0, [X0 + 0xBD8]
	0x034832D4 BL 0x1C16CF4
	0x034832D8 ADRP X0, 0xC72000
	0x034832DC LDR X0, [X0 + 0xA50]
	0x034832E0 BL 0x1C16CF4
	0x034832E4 ADRP X0, 0xC78000
	0x034832E8 LDR X0, [X0 + 0x7D8]
	0x034832EC BL 0x1C16CF4
	0x034832F0 ADRP X0, 0xCAE000
	0x034832F4 LDR X0, [X0 + 0x18]
	0x034832F8 BL 0x1C16CF4
	0x034832FC ADRP X0, 0xC73000
	0x03483300 LDR X0, [X0 + 0x1A0]
	0x03483304 BL 0x1C16CF4
	0x03483308 ADRP X0, 0xCAB000
	0x0348330C LDR X0, [X0 + 0x9E0]
	0x03483310 BL 0x1C16CF4
	0x03483314 ADRP X0, 0xC70000
	0x03483318 LDR X0, [X0 + 0x9D0]
	0x0348331C BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xF5B000
	007 Move X21, 0xCAE000
	008 Move W8, [X22+2247]
	009 Move X21, [X21+3152]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xCAE000
	017 Move X0, [X0+3832]
	018 Call 0x1C17CF4
	019 Move X0, 0xCAE000
	020 Move X0, [X0+3152]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2247], W8
	024 Move X0, [X21]
	025 Move X21, 0xCAE000
	026 Move W8, [X0+224]
	027 Move X21, [X21+3832]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X2, [X21]
	032 Add X0, X20, 8
	033 Move X1, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Call AsyncTaskMethodBuilder`1<Object>.SetStateMachine, X0, X1
	040 Return 

