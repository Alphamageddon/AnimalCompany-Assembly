Type: Nakama.ApiMatch

Method: System.Boolean get_Authoritative()

Disassembly:
	0x034084AC ADRP X22, 0xD26000
	0x034084B0 LDR X22, [X22 + 0x68]

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_Authoritative(System.Boolean value)

Disassembly:
	0x034084B4 STR X21, [X20 + 0x20]
	0x034084B8 LDR X0, [X22]
	0x034084BC CBZ X0, 0x34084D4

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.String get_HandlerName()

Disassembly:
	0x034084C0 LDR X8, [X20]
	0x034084C4 LDR X1, [X8 + 0x40]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_HandlerName(System.String value)

Disassembly:
	0x034084C8 BL 0x1C16E00
	0x034084CC CBZ X0, 0x34085BC

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.String get_Label()

Disassembly:
	0x034084D0 LDR W8, [X20 + 0x18]
	0x034084D4 CMP W8, 0x1

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_Label(System.String value)

Disassembly:
	0x034084D8 B.LS 0x34085B8
	0x034084DC LDR X8, [X22]

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String get_MatchId()

Disassembly:
	0x034084E0 ADRP X9, 0xCEB000
	0x034084E4 LDR X9, [X9 + 0xB58]

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_MatchId(System.String value)

Disassembly:
	0x034084E8 ADD X1, X31, 0xC
	0x034084EC STR X8, [X20 + 0x28]

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.Int32 get_Size()

Disassembly:
	0x034084F0 LDRB W8, [X19 + 0x10]
	0x034084F4 LDR X0, [X9]

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_Size(System.Int32 value)

Disassembly:
	0x034084F8 STRB W8, [X31 + 0xC]
	0x034084FC BL 0x1C16E04

ISIL:
	001 Move [X0+48], W1
	002 Return 

Method: System.Int32 get_TickRate()

Disassembly:
	0x03408500 MOV X21, X0
	0x03408504 CBZ X0, 0x340851C

ISIL:
	001 Move W0, [X0+52]
	002 Return X0

Method: System.Void set_TickRate(System.Int32 value)

Disassembly:
	0x03408508 LDR X8, [X20]
	0x0340850C MOV X0, X21

ISIL:
	001 Move [X0+52], W1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x03408510 LDR X1, [X8 + 0x40]
	0x03408514 BL 0x1C16E00
	0x03408518 CBZ X0, 0x34085BC
	0x0340851C LDR W8, [X20 + 0x18]
	0x03408520 CMP W8, 0x2
	0x03408524 B.LS 0x34085B8
	0x03408528 ADRP X22, 0xCEB000
	0x0340852C LDR X22, [X22 + 0x838]
	0x03408530 STR X21, [X20 + 0x30]
	0x03408534 LDR X0, [X22]
	0x03408538 CBZ X0, 0x3408550
	0x0340853C LDR X8, [X20]
	0x03408540 LDR X1, [X8 + 0x40]
	0x03408544 BL 0x1C16E00
	0x03408548 CBZ X0, 0x34085BC
	0x0340854C LDR W8, [X20 + 0x18]
	0x03408550 CMP W8, 0x3
	0x03408554 B.LS 0x34085B8
	0x03408558 LDR X8, [X22]
	0x0340855C ADRP X21, 0xD26000
	0x03408560 ADRP X23, 0xD25000
	0x03408564 LDR X21, [X21 + 0x60]
	0x03408568 LDR X23, [X23 + 0xD78]
	0x0340856C MOV X0, X20
	0x03408570 MOV X1, X31
	0x03408574 STR X8, [X20 + 0x38]
	0x03408578 BL 0x3227578
	0x0340857C LDR X2, [X19 + 0x18]
	0x03408580 LDR X1, [X21]
	0x03408584 LDR X3, [X22]
	0x03408588 MOV X4, X31
	0x0340858C BL 0x32277C4
	0x03408590 LDR X2, [X19 + 0x20]
	0x03408594 LDR X1, [X23]
	0x03408598 LDR X3, [X22]
	0x0340859C MOV X4, X31
	0x034085A0 BL 0x32277C4
	0x034085A4 LDP X20, X19, [X31 + 0x30]
	0x034085A8 LDP X22, X21, [X31 + 0x20]
	0x034085AC LDP X30, X23, [X31 + 0x10]
	0x034085B0 ADD X31, X31, 0x40
	0x034085B4 RET
	0x034085B8 BL 0x1C16F28
	0x034085BC BL 0x1C16F44
	0x034085C0 MOV X1, X31
	0x034085C4 BL 0x1C16DEC
	0x034085C8 BL 0x1C16F20
	0x034085CC MOV X1, X31
	0x034085D0 B 0x33BDD8C
	0x034085D4 LDR X0, [X0 + 0x10]
	0x034085D8 RET
	0x034085DC STR X1, [X0 + 0x10]
	0x034085E0 RET
	0x034085E4 LDR X0, [X0 + 0x18]
	0x034085E8 RET
	0x034085EC STR X1, [X0 + 0x18]
	0x034085F0 RET
	0x034085F4 STR X30, [X31 - 0x40]!
	0x034085F8 STP X24, X23, [X31 + 0x10]
	0x034085FC STP X22, X21, [X31 + 0x20]
	0x03408600 STP X20, X19, [X31 + 0x30]
	0x03408604 ADRP X24, 0xFD5000
	0x03408608 ADRP X22, 0xCEB000
	0x0340860C ADRP X23, 0xD26000
	0x03408610 ADRP X20, 0xCEB000
	0x03408614 ADRP X21, 0xD25000
	0x03408618 LDRB W8, [X24 + 0x543]
	0x0340861C LDR X22, [X22 + 0x988]
	0x03408620 LDR X23, [X23 + 0x60]
	0x03408624 LDR X20, [X20 + 0x838]
	0x03408628 LDR X21, [X21 + 0xD78]
	0x0340862C MOV X19, X0
	0x03408630 TBNZ X8, 0x0, 0x340866C
	0x03408634 ADRP X0, 0xCEB000
	0x03408638 LDR X0, [X0 + 0x838]
	0x0340863C BL 0x1C16CF4
	0x03408640 ADRP X0, 0xD26000
	0x03408644 LDR X0, [X0 + 0x60]
	0x03408648 BL 0x1C16CF4
	0x0340864C ADRP X0, 0xD25000
	0x03408650 LDR X0, [X0 + 0xD78]
	0x03408654 BL 0x1C16CF4
	0x03408658 ADRP X0, 0xCEB000
	0x0340865C LDR X0, [X0 + 0x988]
	0x03408660 BL 0x1C16CF4
	0x03408664 MOVZ W8, 0x1
	0x03408668 STRB W8, [X24 + 0x543]
	0x0340866C LDR X2, [X19 + 0x10]
	0x03408670 LDR X0, [X22]
	0x03408674 LDR X1, [X23]
	0x03408678 LDR X3, [X20]
	0x0340867C MOV X4, X31
	0x03408680 BL 0x32277C4
	0x03408684 LDR X2, [X19 + 0x18]
	0x03408688 LDR X1, [X21]
	0x0340868C LDR X3, [X20]
	0x03408690 LDP X20, X19, [X31 + 0x30]
	0x03408694 LDP X22, X21, [X31 + 0x20]
	0x03408698 LDP X24, X23, [X31 + 0x10]
	0x0340869C MOV X4, X31
	0x034086A0 LDR X30, [X31], #0x40
	0x034086A4 B 0x32277C4
	0x034086A8 MOV X1, X31
	0x034086AC B 0x33BDD8C
	0x034086B0 LDR X0, [X0 + 0x10]
	0x034086B4 RET
	0x034086B8 STR X1, [X0 + 0x10]
	0x034086BC RET
	0x034086C0 STR X30, [X31 - 0x20]!
	0x034086C4 STP X20, X19, [X31 + 0x10]
	0x034086C8 ADRP X20, 0xFD5000
	0x034086CC LDRB W8, [X20 + 0x544]
	0x034086D0 MOV X19, X0
	0x034086D4 TBNZ X8, 0x0, 0x34086F8
	0x034086D8 ADRP X0, 0xCEC000
	0x034086DC LDR X0, [X0 + 0x6C0]
	0x034086E0 BL 0x1C16CF4
	0x034086E4 ADRP X0, 0xCEC000
	0x034086E8 LDR X0, [X0 + 0x6D0]
	0x034086EC BL 0x1C16CF4
	0x034086F0 MOVZ W8, 0x1
	0x034086F4 STRB W8, [X20 + 0x544]
	0x034086F8 LDR X19, [X19 + 0x18]
	0x034086FC CBNZ X19, 0x3408724
	0x03408700 ADRP X8, 0xCEC000
	0x03408704 LDR X8, [X8 + 0x6D0]
	0x03408708 LDR X0, [X8]
	0x0340870C BL 0x1C16F10
	0x03408710 ADRP X8, 0xCEC000
	0x03408714 LDR X8, [X8 + 0x6C0]
	0x03408718 MOV X19, X0
	0x0340871C LDR X1, [X8]
	0x03408720 BL 0x2AA4804
	0x03408724 MOV X0, X19
	0x03408728 LDP X20, X19, [X31 + 0x10]
	0x0340872C LDR X30, [X31], #0x20
	0x03408730 RET
	0x03408734 LDR X0, [X0 + 0x18]
	0x03408738 RET
	0x0340873C STR X1, [X0 + 0x18]
	0x03408740 RET
	0x03408744 SUB X31, X31, 0x70
	0x03408748 STP X29, X30, [X31 + 0x10]
	0x0340874C STP X28, X27, [X31 + 0x20]
	0x03408750 STP X26, X25, [X31 + 0x30]
	0x03408754 STP X24, X23, [X31 + 0x40]
	0x03408758 STP X22, X21, [X31 + 0x50]
	0x0340875C STP X20, X19, [X31 + 0x60]
	0x03408760 ADRP X23, 0xFD5000
	0x03408764 ADRP X19, 0xCEB000
	0x03408768 ADRP X21, 0xD25000
	0x0340876C ADRP X22, 0xCEB000
	0x03408770 LDRB W8, [X23 + 0x545]
	0x03408774 LDR X19, [X19 + 0x988]
	0x03408778 LDR X21, [X21 + 0xD78]
	0x0340877C LDR X22, [X22 + 0x838]
	0x03408780 MOV X20, X0
	0x03408784 TBNZ X8, 0x0, 0x3408844
	0x03408788 ADRP X0, 0xCEB000
	0x0340878C LDR X0, [X0 + 0xE00]
	0x03408790 BL 0x1C16CF4
	0x03408794 ADRP X0, 0xCEE000
	0x03408798 LDR X0, [X0 + 0x190]
	0x0340879C BL 0x1C16CF4
	0x034087A0 ADRP X0, 0xCEE000
	0x034087A4 LDR X0, [X0 + 0x198]
	0x034087A8 BL 0x1C16CF4
	0x034087AC ADRP X0, 0xCEB000
	0x034087B0 LDR X0, [X0 + 0xE18]
	0x034087B4 BL 0x1C16CF4
	0x034087B8 ADRP X0, 0xCEE000
	0x034087BC LDR X0, [X0 + 0x1B0]
	0x034087C0 BL 0x1C16CF4
	0x034087C4 ADRP X0, 0xCEE000
	0x034087C8 LDR X0, [X0 + 0x1B8]
	0x034087CC BL 0x1C16CF4
	0x034087D0 ADRP X0, 0xCEB000
	0x034087D4 LDR X0, [X0 + 0xAC8]
	0x034087D8 BL 0x1C16CF4
	0x034087DC ADRP X0, 0xD18000
	0x034087E0 LDR X0, [X0 + 0x360]
	0x034087E4 BL 0x1C16CF4
	0x034087E8 ADRP X0, 0xD18000
	0x034087EC LDR X0, [X0 + 0xFB8]
	0x034087F0 BL 0x1C16CF4
	0x034087F4 ADRP X0, 0xCF6000
	0x034087F8 LDR X0, [X0 + 0x6D8]
	0x034087FC BL 0x1C16CF4
	0x03408800 ADRP X0, 0xD25000
	0x03408804 LDR X0, [X0 + 0xD80]
	0x03408808 BL 0x1C16CF4
	0x0340880C ADRP X0, 0xCEB000
	0x03408810 LDR X0, [X0 + 0x838]
	0x03408814 BL 0x1C16CF4
	0x03408818 ADRP X0, 0xD25000
	0x0340881C LDR X0, [X0 + 0xD78]
	0x03408820 BL 0x1C16CF4
	0x03408824 ADRP X0, 0xCEB000
	0x03408828 LDR X0, [X0 + 0x988]
	0x0340882C BL 0x1C16CF4
	0x03408830 ADRP X0, 0xCEB000
	0x03408834 LDR X0, [X0 + 0x848]
	0x03408838 BL 0x1C16CF4
	0x0340883C MOVZ W8, 0x1
	0x03408840 STRB W8, [X23 + 0x545]
	0x03408844 LDR X0, [X19]
	0x03408848 LDR X2, [X20 + 0x10]
	0x0340884C LDR X1, [X21]
	0x03408850 LDR X3, [X22]
	0x03408854 MOV X4, X31
	0x03408858 BL 0x32277C4
	0x0340885C LDR X27, [X19]
	0x03408860 STR X0, [X31 + 0x8]
	0x03408864 MOV X0, X20
	0x03408868 BL 0x34086C0
	0x0340886C CBZ X0, 0x3408B1C
	0x03408870 ADRP X10, 0xCEE000
	0x03408874 LDR X8, [X0]
	0x03408878 LDR X10, [X10 + 0x190]
	0x0340887C MOV X20, X0
	0x03408880 LDRH W9, [X8 + 0x12E]
	0x03408884 LDR X1, [X10]
	0x03408888 CBZ X9, 0x34088AC
	0x0340888C LDR X10, [X8 + 0xB0]
	0x03408890 ADD X10, X10, 0x8
	0x03408894 LDUR X11, [X10 - 0x8]
	0x03408898 CMP X11, X1
	0x0340889C B.EQ 0x34088BC
	0x034088A0 SUBS X9, X9, 0x1
	0x034088A4 ADD X10, X10, 0x10
	0x034088A8 B.NE 0x3408894
	0x034088AC MOV X0, X20
	0x034088B0 MOV W2, W31
	0x034088B4 BL 0x1C5C788
	0x034088B8 B 0x34088C8
	0x034088BC LDRSW X9, [X10]
	0x034088C0 ADD X8, X8, X9, 0x4, LSL
	0x034088C4 ADD X0, X8, 0x138
	0x034088C8 ADRP X28, 0xCEB000
	0x034088CC ADRP X29, 0xCEE000
	0x034088D0 ADRP X26, 0xCEB000
	0x034088D4 ADRP X24, 0xD18000
	0x034088D8 ADRP X25, 0xD18000
	0x034088DC ADRP X19, 0xCF6000
	0x034088E0 LDR X28, [X28 + 0xE18]
	0x034088E4 LDR X29, [X29 + 0x198]
	0x034088E8 LDR X26, [X26 + 0xAC8]
	0x034088EC LDR X24, [X24 + 0x360]
	0x034088F0 LDR X25, [X25 + 0xFB8]
	0x034088F4 LDR X19, [X19 + 0x6D8]
	0x034088F8 LDP X8, X1, [X0]
	0x034088FC MOV X0, X20
	0x03408900 BLR X8
	0x03408904 MOV X20, X0
	0x03408908 MOV X0, X27
	0x0340890C CBZ X20, 0x3408B00
	0x03408910 LDR X8, [X20]
	0x03408914 LDR X1, [X28]
	0x03408918 MOV X21, X0
	0x0340891C LDRH W9, [X8 + 0x12E]
	0x03408920 CBZ X9, 0x3408944
	0x03408924 LDR X10, [X8 + 0xB0]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xFD6000
	011 Move X21, 0xCEC000
	012 Move X22, 0xCEC000
	013 Move W8, [X20+1336]
	014 Move X21, [X21+2440]
	015 Move X22, [X22+2512]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {56}
	021 Move X0, 0xCEC000
	022 Move X0, [X0+2904]
	023 Call 0x1C17CF4
	024 Move X0, 0xCEC000
	025 Move X0, [X0+1880]
	026 Call 0x1C17CF4
	027 Move X0, 0xCEC000
	028 Move X0, [X0+2512]
	029 Call 0x1C17CF4
	030 Move X0, 0xD26000
	031 Move X0, [X0+4024]
	032 Call 0x1C17CF4
	033 Move X0, 0xD26000
	034 Move X0, [X0+4032]
	035 Call 0x1C17CF4
	036 Move X0, 0xD26000
	037 Move X0, [X0+4040]
	038 Call 0x1C17CF4
	039 Move X0, 0xCEC000
	040 Move X0, [X0+2104]
	041 Call 0x1C17CF4
	042 Move X0, 0xD26000
	043 Move X0, [X0+4048]
	044 Call 0x1C17CF4
	045 Move X0, 0xD26000
	046 Move X0, [X0+4056]
	047 Call 0x1C17CF4
	048 Move X0, 0xD26000
	049 Move X0, [X0+4064]
	050 Call 0x1C17CF4
	051 Move X0, 0xCEC000
	052 Move X0, [X0+2440]
	053 Call 0x1C17CF4
	054 Move W8, 1
	055 Move [X20+1336], W8
	056 Move X0, [X22]
	057 Move X21, [X21]
	058 Move W1, 4
	059 Call 0x1C17D6C
	060 Compare X0, 0
	061 JumpIfEqual {294}
	062 Move X20, X0
	063 Compare X21, 0
	064 JumpIfEqual {71}
	065 Move X8, [X20]
	066 Move X0, X21
	067 Move X1, [X8+64]
	068 Call 0x1C17E00
	069 Compare X0, 0
	070 JumpIfEqual {291}
	071 Move W8, [X20+24]
	072 Compare W8, 0
	073 JumpIfEqual {290}
	074 Move X23, 0xD26000
	075 Move X23, [X23+4040]
	076 Move [X20+32], X21
	077 Move X0, [X23]
	078 Compare X0, 0
	079 JumpIfEqual {86}
	080 Move X8, [X20]
	081 Move X1, [X8+64]
	082 Call 0x1C17E00
	083 Compare X0, 0
	084 JumpIfEqual {291}
	085 Move W8, [X20+24]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X8, [X23]
	088 Move X9, 0xCEC000
	089 Move X9, [X9+2904]
	090 Add X1, X31, 12
	091 Move [X20+40], X8
	092 Move W8, [X19+16]
	093 Move X0, [X9]
	094 Move [X31+12], W8
	095 Call 0x1C17E04
	096 Move X21, X0
	097 Compare X0, 0
	098 JumpIfEqual {105}
	099 Move X8, [X20]
	100 Move X0, X21
	101 Move X1, [X8+64]
	102 Call 0x1C17E00
	103 Compare X0, 0
	104 JumpIfEqual {291}
	105 Move W8, [X20+24]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move X23, 0xCEC000
	108 Move X23, [X23+2104]
	109 Move [X20+48], X21
	110 Move X0, [X23]
	111 Compare X0, 0
	112 JumpIfEqual {119}
	113 Move X8, [X20]
	114 Move X1, [X8+64]
	115 Call 0x1C17E00
	116 Compare X0, 0
	117 JumpIfEqual {291}
	118 Move W8, [X20+24]
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move X8, [X23]
	121 Move X21, 0xD26000
	122 Move X24, 0xD26000
	123 Move X25, 0xD26000
	124 Move X21, [X21+4056]
	125 Move X24, [X24+4032]
	126 Move X25, [X25+4048]
	127 Move X0, X20
	128 Move X1, X31
	129 Move [X20+56], X8
	130 Call String.Concat, X0
	131 Move X2, [X19+24]
	132 Move X1, [X21]
	133 Move X3, [X23]
	134 Move X4, X31
	135 Call String.Concat, X0, X1, X2, X3
	136 Move X2, [X19+32]
	137 Move X1, [X24]
	138 Move X3, [X23]
	139 Move X4, X31
	140 Call String.Concat, X0, X1, X2, X3
	141 Move X2, [X19+40]
	142 Move X1, [X25]
	143 Move X3, [X23]
	144 Move X4, X31
	145 Call String.Concat, X0, X1, X2, X3
	146 Move X8, [X22]
	147 Move X21, X0
	148 Move W1, 4
	149 Move X0, X8
	150 Call 0x1C17D6C
	151 Compare X0, 0
	152 JumpIfEqual {294}
	153 Move X20, X0
	154 Compare X21, 0
	155 JumpIfEqual {162}
	156 Move X8, [X20]
	157 Move X0, X21
	158 Move X1, [X8+64]
	159 Call 0x1C17E00
	160 Compare X0, 0
	161 JumpIfEqual {291}
	162 Move W8, [X20+24]
	163 Compare W8, 0
	164 JumpIfEqual {290}
	165 Move X24, 0xD26000
	166 Move X24, [X24+4024]
	167 Move [X20+32], X21
	168 Move X0, [X24]
	169 Compare X0, 0
	170 JumpIfEqual {177}
	171 Move X8, [X20]
	172 Move X1, [X8+64]
	173 Call 0x1C17E00
	174 Compare X0, 0
	175 JumpIfEqual {291}
	176 Move W8, [X20+24]
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Move X8, [X24]
	179 Move X24, 0xCEC000
	180 Move X24, [X24+1880]
	181 Add X1, X31, 8
	182 Move [X20+40], X8
	183 Move W8, [X19+48]
	184 Move X0, [X24]
	185 Move [X31+8], W8
	186 Call 0x1C17E04
	187 Move X21, X0
	188 Compare X0, 0
	189 JumpIfEqual {196}
	190 Move X8, [X20]
	191 Move X0, X21
	192 Move X1, [X8+64]
	193 Call 0x1C17E00
	194 Compare X0, 0
	195 JumpIfEqual {291}
	196 Move W8, [X20+24]
	197 NotImplemented "Instruction CMP not yet implemented."
	198 Move [X20+48], X21
	199 Move X0, [X23]
	200 Compare X0, 0
	201 JumpIfEqual {208}
	202 Move X8, [X20]
	203 Move X1, [X8+64]
	204 Call 0x1C17E00
	205 Compare X0, 0
	206 JumpIfEqual {291}
	207 Move W8, [X20+24]
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Move X8, [X23]
	210 Move X0, X20
	211 Move X1, X31
	212 Move [X20+56], X8
	213 Call String.Concat, X0
	214 Move X8, [X22]
	215 Move X21, X0
	216 Move W1, 4
	217 Move X0, X8
	218 Call 0x1C17D6C
	219 Compare X0, 0
	220 JumpIfEqual {294}
	221 Move X20, X0
	222 Compare X21, 0
	223 JumpIfEqual {230}
	224 Move X8, [X20]
	225 Move X0, X21
	226 Move X1, [X8+64]
	227 Call 0x1C17E00
	228 Compare X0, 0
	229 JumpIfEqual {291}
	230 Move W8, [X20+24]
	231 Compare W8, 0
	232 JumpIfEqual {290}
	233 Move X22, 0xD26000
	234 Move X22, [X22+4064]
	235 Move [X20+32], X21
	236 Move X0, [X22]
	237 Compare X0, 0
	238 JumpIfEqual {245}
	239 Move X8, [X20]
	240 Move X1, [X8+64]
	241 Call 0x1C17E00
	242 Compare X0, 0
	243 JumpIfEqual {291}
	244 Move W8, [X20+24]
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Move X8, [X22]
	247 Add X1, X31, 4
	248 Move [X20+40], X8
	249 Move W8, [X19+52]
	250 Move X0, [X24]
	251 Move [X31+4], W8
	252 Call 0x1C17E04
	253 Move X19, X0
	254 Compare X0, 0
	255 JumpIfEqual {262}
	256 Move X8, [X20]
	257 Move X0, X19
	258 Move X1, [X8+64]
	259 Call 0x1C17E00
	260 Compare X0, 0
	261 JumpIfEqual {291}
	262 Move W8, [X20+24]
	263 NotImplemented "Instruction CMP not yet implemented."
	264 Move [X20+48], X19
	265 Move X0, [X23]
	266 Compare X0, 0
	267 JumpIfEqual {274}
	268 Move X8, [X20]
	269 Move X1, [X8+64]
	270 Call 0x1C17E00
	271 Compare X0, 0
	272 JumpIfEqual {291}
	273 Move W8, [X20+24]
	274 NotImplemented "Instruction CMP not yet implemented."
	275 Move X8, [X23]
	276 Move X0, X20
	277 Move X1, X31
	278 Move [X20+56], X8
	279 Call String.Concat, X0
	280 Move X20, [X31+64]
	281 Move X19, [X31+72]
	282 Move X22, [X31+48]
	283 Move X21, [X31+56]
	284 Move X24, [X31+32]
	285 Move X23, [X31+40]
	286 Move X30, [X31+16]
	287 Move X25, [X31+24]
	288 Add X31, X31, 80
	289 Return X0
	290 Call 0x1C17F28
	291 Call 0x1C17F44
	292 Move X1, X31
	293 Call 0x1C17DEC
	294 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03408928 ADD X10, X10, 0x8
	0x0340892C LDUR X11, [X10 - 0x8]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

