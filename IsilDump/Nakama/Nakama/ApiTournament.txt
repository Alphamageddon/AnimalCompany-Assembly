Type: Nakama.ApiTournament

Method: System.Boolean get_Authoritative()

Disassembly:
	0x0340A868 LDR X0, [X0 + 0x140]
	0x0340A86C BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_Authoritative(System.Boolean value)

Disassembly:
	0x0340A870 ADRP X0, 0xD24000
	0x0340A874 LDR X0, [X0 + 0x148]
	0x0340A878 BL 0x1C16CF4

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.Boolean get_CanEnter()

Disassembly:
	0x0340A87C MOVZ W8, 0x1
	0x0340A880 STRB W8, [X20 + 0x551]

ISIL:
	001 Move W0, [X0+17]
	002 Return X0

Method: System.Void set_CanEnter(System.Boolean value)

Disassembly:
	0x0340A884 LDR X19, [X19 + 0x18]
	0x0340A888 CBNZ X19, 0x340A8B4
	0x0340A88C ADRP X8, 0xD24000

ISIL:
	001 And W8, W1, 1
	002 Move [X0+17], W8
	003 Return 

Method: System.Int32 get_Category()

Disassembly:
	0x0340A890 LDR X8, [X8 + 0x148]
	0x0340A894 LDR X0, [X8]

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: System.Void set_Category(System.Int32 value)

Disassembly:
	0x0340A898 BL 0x1C16F10
	0x0340A89C ADRP X8, 0xD24000

ISIL:
	001 Move [X0+20], W1
	002 Return 

Method: System.String get_CreateTime()

Disassembly:
	0x0340A8A0 LDR X8, [X8 + 0x140]
	0x0340A8A4 MOV W1, W31

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_CreateTime(System.String value)

Disassembly:
	0x0340A8A8 MOV X19, X0
	0x0340A8AC LDR X2, [X8]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.String get_Description()

Disassembly:
	0x0340A8B0 BL 0x301B830
	0x0340A8B4 MOV X0, X19

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_Description(System.String value)

Disassembly:
	0x0340A8B8 LDP X20, X19, [X31 + 0x10]
	0x0340A8BC LDR X30, [X31], #0x20

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.Int32 get_Duration()

Disassembly:
	0x0340A8C0 RET
	0x0340A8C4 LDR X0, [X0 + 0x18]

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_Duration(System.Int32 value)

Disassembly:
	0x0340A8C8 RET
	0x0340A8CC STR X1, [X0 + 0x18]

ISIL:
	001 Move [X0+40], W1
	002 Return 

Method: System.Int32 get_EndActive()

Disassembly:
	0x0340A8D0 RET
	0x0340A8D4 STR X30, [X31 - 0x50]!

ISIL:
	001 Move W0, [X0+44]
	002 Return X0

Method: System.Void set_EndActive(System.Int32 value)

Disassembly:
	0x0340A8D8 STP X26, X25, [X31 + 0x10]
	0x0340A8DC STP X24, X23, [X31 + 0x20]

ISIL:
	001 Move [X0+44], W1
	002 Return 

Method: System.String get_EndTime()

Disassembly:
	0x0340A8E0 STP X22, X21, [X31 + 0x30]
	0x0340A8E4 STP X20, X19, [X31 + 0x40]

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_EndTime(System.String value)

Disassembly:
	0x0340A8E8 ADRP X26, 0xFD3000
	0x0340A8EC ADRP X20, 0xCE9000

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.String get_Id()

Disassembly:
	0x0340A8F0 ADRP X25, 0xD23000
	0x0340A8F4 ADRP X23, 0xCE9000

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_Id(System.String value)

Disassembly:
	0x0340A8F8 ADRP X24, 0xD24000
	0x0340A8FC ADRP X21, 0xD24000

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.Int32 get_MaxNumScore()

Disassembly:
	0x0340A900 ADRP X22, 0xD23000
	0x0340A904 LDR X20, [X20 + 0x988]

ISIL:
	001 Move W0, [X0+64]
	002 Return X0

Method: System.Void set_MaxNumScore(System.Int32 value)

Disassembly:
	0x0340A908 LDRB W8, [X26 + 0x552]
	0x0340A90C LDR X25, [X25 + 0xED8]

ISIL:
	001 Move [X0+64], W1
	002 Return 

Method: System.Int32 get_MaxSize()

Disassembly:
	0x0340A910 LDR X23, [X23 + 0x838]
	0x0340A914 LDR X24, [X24 + 0x150]

ISIL:
	001 Move W0, [X0+68]
	002 Return X0

Method: System.Void set_MaxSize(System.Int32 value)

Disassembly:
	0x0340A918 LDR X21, [X21 + 0x158]
	0x0340A91C LDR X22, [X22 + 0xD50]

ISIL:
	001 Move [X0+68], W1
	002 Return 

Method: System.String get_Metadata()

Disassembly:
	0x0340A920 MOV X19, X0
	0x0340A924 TBNZ X8, 0x0, 0x340A978

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Void set_Metadata(System.String value)

Disassembly:
	0x0340A928 ADRP X0, 0xD24000
	0x0340A92C LDR X0, [X0 + 0x150]

ISIL:
	001 Move [X0+72], X1
	002 Return 

Method: System.Int32 get_NextReset()

Disassembly:
	0x0340A930 BL 0x1C16CF4
	0x0340A934 ADRP X0, 0xCE9000

ISIL:
	001 Move W0, [X0+80]
	002 Return X0

Method: System.Void set_NextReset(System.Int32 value)

Disassembly:
	0x0340A938 LDR X0, [X0 + 0x838]
	0x0340A93C BL 0x1C16CF4

ISIL:
	001 Move [X0+80], W1
	002 Return 

Method: Nakama.ApiOperator get_Operator()

Disassembly:
	0x0340A940 ADRP X0, 0xD23000
	0x0340A944 LDR X0, [X0 + 0xD50]

ISIL:
	001 Move W0, [X0+84]
	002 Return X0

Method: Nakama.ApiOperator get__operator()

Disassembly:
	0x0340A948 BL 0x1C16CF4
	0x0340A94C ADRP X0, 0xD23000

ISIL:
	001 Move W0, [X0+84]
	002 Return X0

Method: System.Void set__operator(Nakama.ApiOperator value)

Disassembly:
	0x0340A950 LDR X0, [X0 + 0xED8]
	0x0340A954 BL 0x1C16CF4

ISIL:
	001 Move [X0+84], W1
	002 Return 

Method: System.Int32 get_PrevReset()

Disassembly:
	0x0340A958 ADRP X0, 0xCE9000
	0x0340A95C LDR X0, [X0 + 0x988]

ISIL:
	001 Move W0, [X0+88]
	002 Return X0

Method: System.Void set_PrevReset(System.Int32 value)

Disassembly:
	0x0340A960 BL 0x1C16CF4
	0x0340A964 ADRP X0, 0xD24000

ISIL:
	001 Move [X0+88], W1
	002 Return 

Method: System.Int32 get_Size()

Disassembly:
	0x0340A968 LDR X0, [X0 + 0x158]
	0x0340A96C BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+92]
	002 Return X0

Method: System.Void set_Size(System.Int32 value)

Disassembly:
	0x0340A970 MOVZ W8, 0x1
	0x0340A974 STRB W8, [X26 + 0x552]

ISIL:
	001 Move [X0+92], W1
	002 Return 

Method: System.Int32 get_SortOrder()

Disassembly:
	0x0340A978 LDR X2, [X19 + 0x10]
	0x0340A97C LDR X0, [X20]

ISIL:
	001 Move W0, [X0+96]
	002 Return X0

Method: System.Void set_SortOrder(System.Int32 value)

Disassembly:
	0x0340A980 LDR X1, [X25]
	0x0340A984 LDR X3, [X23]

ISIL:
	001 Move [X0+96], W1
	002 Return 

Method: System.Int32 get_StartActive()

Disassembly:
	0x0340A988 MOV X4, X31
	0x0340A98C BL 0x32277C4

ISIL:
	001 Move W0, [X0+100]
	002 Return X0

Method: System.Void set_StartActive(System.Int32 value)

Disassembly:
	0x0340A990 MOV X20, X0
	0x0340A994 MOV X0, X19

ISIL:
	001 Move [X0+100], W1
	002 Return 

Method: System.String get_StartTime()

Disassembly:
	0x0340A998 BL 0x340A84C
	0x0340A99C LDR X8, [X23]

ISIL:
	001 Move X0, [X0+104]
	002 Return X0

Method: System.Void set_StartTime(System.String value)

Disassembly:
	0x0340A9A0 LDR X2, [X24]
	0x0340A9A4 MOV X1, X0

ISIL:
	001 Move [X0+104], X1
	002 Return 

Method: System.String get_Title()

Disassembly:
	0x0340A9A8 MOV X0, X8
	0x0340A9AC BL 0x226B7E8

ISIL:
	001 Move X0, [X0+112]
	002 Return X0

Method: System.Void set_Title(System.String value)

Disassembly:
	0x0340A9B0 LDR X1, [X21]
	0x0340A9B4 LDR X3, [X22]

ISIL:
	001 Move [X0+112], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x0340A9B8 MOV X2, X0
	0x0340A9BC MOV X0, X20
	0x0340A9C0 LDP X20, X19, [X31 + 0x40]
	0x0340A9C4 LDP X22, X21, [X31 + 0x30]
	0x0340A9C8 LDP X24, X23, [X31 + 0x20]
	0x0340A9CC LDP X26, X25, [X31 + 0x10]
	0x0340A9D0 MOV X4, X31
	0x0340A9D4 LDR X30, [X31], #0x50
	0x0340A9D8 B 0x32277C4
	0x0340A9DC MOV X1, X31
	0x0340A9E0 B 0x33BDD8C
	0x0340A9E4 LDR X0, [X0 + 0x10]
	0x0340A9E8 RET
	0x0340A9EC STR X1, [X0 + 0x10]
	0x0340A9F0 RET
	0x0340A9F4 STR X30, [X31 - 0x20]!
	0x0340A9F8 STP X20, X19, [X31 + 0x10]
	0x0340A9FC ADRP X20, 0xFD3000
	0x0340AA00 LDRB W8, [X20 + 0x553]
	0x0340AA04 MOV X19, X0
	0x0340AA08 TBNZ X8, 0x0, 0x340AA2C
	0x0340AA0C ADRP X0, 0xD23000
	0x0340AA10 LDR X0, [X0 + 0xF70]
	0x0340AA14 BL 0x1C16CF4
	0x0340AA18 ADRP X0, 0xD23000
	0x0340AA1C LDR X0, [X0 + 0xF78]
	0x0340AA20 BL 0x1C16CF4
	0x0340AA24 MOVZ W8, 0x1
	0x0340AA28 STRB W8, [X20 + 0x553]
	0x0340AA2C LDR X19, [X19 + 0x18]
	0x0340AA30 CBNZ X19, 0x340AA5C
	0x0340AA34 ADRP X8, 0xD23000
	0x0340AA38 LDR X8, [X8 + 0xF78]
	0x0340AA3C LDR X0, [X8]
	0x0340AA40 BL 0x1C16F10
	0x0340AA44 ADRP X8, 0xD23000
	0x0340AA48 LDR X8, [X8 + 0xF70]
	0x0340AA4C MOV W1, W31
	0x0340AA50 MOV X19, X0
	0x0340AA54 LDR X2, [X8]
	0x0340AA58 BL 0x301B830
	0x0340AA5C MOV X0, X19
	0x0340AA60 LDP X20, X19, [X31 + 0x10]
	0x0340AA64 LDR X30, [X31], #0x20
	0x0340AA68 RET
	0x0340AA6C LDR X0, [X0 + 0x18]
	0x0340AA70 RET
	0x0340AA74 STR X1, [X0 + 0x18]
	0x0340AA78 RET
	0x0340AA7C LDR X0, [X0 + 0x20]
	0x0340AA80 RET
	0x0340AA84 STR X1, [X0 + 0x20]
	0x0340AA88 RET
	0x0340AA8C LDR X0, [X0 + 0x28]
	0x0340AA90 RET
	0x0340AA94 STR X1, [X0 + 0x28]
	0x0340AA98 RET
	0x0340AA9C STR X30, [X31 - 0x20]!
	0x0340AAA0 STP X20, X19, [X31 + 0x10]
	0x0340AAA4 ADRP X20, 0xFD3000
	0x0340AAA8 LDRB W8, [X20 + 0x554]
	0x0340AAAC MOV X19, X0
	0x0340AAB0 TBNZ X8, 0x0, 0x340AAD4
	0x0340AAB4 ADRP X0, 0xD23000
	0x0340AAB8 LDR X0, [X0 + 0xF70]
	0x0340AABC BL 0x1C16CF4
	0x0340AAC0 ADRP X0, 0xD23000
	0x0340AAC4 LDR X0, [X0 + 0xF78]
	0x0340AAC8 BL 0x1C16CF4
	0x0340AACC MOVZ W8, 0x1
	0x0340AAD0 STRB W8, [X20 + 0x554]
	0x0340AAD4 LDR X19, [X19 + 0x30]
	0x0340AAD8 CBNZ X19, 0x340AB04
	0x0340AADC ADRP X8, 0xD23000
	0x0340AAE0 LDR X8, [X8 + 0xF78]
	0x0340AAE4 LDR X0, [X8]
	0x0340AAE8 BL 0x1C16F10
	0x0340AAEC ADRP X8, 0xD23000
	0x0340AAF0 LDR X8, [X8 + 0xF70]
	0x0340AAF4 MOV W1, W31
	0x0340AAF8 MOV X19, X0
	0x0340AAFC LDR X2, [X8]
	0x0340AB00 BL 0x301B830
	0x0340AB04 MOV X0, X19
	0x0340AB08 LDP X20, X19, [X31 + 0x10]
	0x0340AB0C LDR X30, [X31], #0x20
	0x0340AB10 RET
	0x0340AB14 LDR X0, [X0 + 0x30]
	0x0340AB18 RET
	0x0340AB1C STR X1, [X0 + 0x30]
	0x0340AB20 RET
	0x0340AB24 STP X29, X30, [X31 - 0x60]!
	0x0340AB28 STP X28, X27, [X31 + 0x10]
	0x0340AB2C STP X26, X25, [X31 + 0x20]
	0x0340AB30 STP X24, X23, [X31 + 0x30]
	0x0340AB34 STP X22, X21, [X31 + 0x40]
	0x0340AB38 STP X20, X19, [X31 + 0x50]
	0x0340AB3C ADRP X29, 0xFD3000
	0x0340AB40 ADRP X20, 0xCE9000
	0x0340AB44 ADRP X28, 0xD23000
	0x0340AB48 ADRP X23, 0xCE9000
	0x0340AB4C ADRP X24, 0xD23000
	0x0340AB50 ADRP X27, 0xD23000
	0x0340AB54 ADRP X21, 0xD23000
	0x0340AB58 ADRP X26, 0xD23000
	0x0340AB5C ADRP X25, 0xD23000
	0x0340AB60 ADRP X22, 0xD23000
	0x0340AB64 LDR X20, [X20 + 0x988]
	0x0340AB68 LDR X28, [X28 + 0xE60]
	0x0340AB6C LDR X23, [X23 + 0x838]
	0x0340AB70 LDR X24, [X24 + 0xF80]
	0x0340AB74 LDRB W8, [X29 + 0x555]
	0x0340AB78 LDR X27, [X27 + 0xF88]
	0x0340AB7C LDR X21, [X21 + 0xD50]
	0x0340AB80 LDR X26, [X26 + 0xE68]
	0x0340AB84 LDR X25, [X25 + 0xF90]
	0x0340AB88 LDR X22, [X22 + 0xF98]
	0x0340AB8C MOV X19, X0
	0x0340AB90 TBNZ X8, 0x0, 0x340AC08
	0x0340AB94 ADRP X0, 0xD23000
	0x0340AB98 LDR X0, [X0 + 0xF80]
	0x0340AB9C BL 0x1C16CF4
	0x0340ABA0 ADRP X0, 0xD23000
	0x0340ABA4 LDR X0, [X0 + 0xF88]
	0x0340ABA8 BL 0x1C16CF4
	0x0340ABAC ADRP X0, 0xD23000
	0x0340ABB0 LDR X0, [X0 + 0xF98]
	0x0340ABB4 BL 0x1C16CF4
	0x0340ABB8 ADRP X0, 0xD23000
	0x0340ABBC LDR X0, [X0 + 0xF90]
	0x0340ABC0 BL 0x1C16CF4
	0x0340ABC4 ADRP X0, 0xCE9000
	0x0340ABC8 LDR X0, [X0 + 0x838]
	0x0340ABCC BL 0x1C16CF4
	0x0340ABD0 ADRP X0, 0xD23000
	0x0340ABD4 LDR X0, [X0 + 0xE68]
	0x0340ABD8 BL 0x1C16CF4
	0x0340ABDC ADRP X0, 0xD23000
	0x0340ABE0 LDR X0, [X0 + 0xE60]
	0x0340ABE4 BL 0x1C16CF4
	0x0340ABE8 ADRP X0, 0xD23000
	0x0340ABEC LDR X0, [X0 + 0xD50]
	0x0340ABF0 BL 0x1C16CF4
	0x0340ABF4 ADRP X0, 0xCE9000
	0x0340ABF8 LDR X0, [X0 + 0x988]
	0x0340ABFC BL 0x1C16CF4
	0x0340AC00 MOVZ W8, 0x1
	0x0340AC04 STRB W8, [X29 + 0x555]
	0x0340AC08 LDR X2, [X19 + 0x10]
	0x0340AC0C LDR X0, [X20]
	0x0340AC10 LDR X1, [X28]
	0x0340AC14 LDR X3, [X23]
	0x0340AC18 MOV X4, X31
	0x0340AC1C BL 0x32277C4
	0x0340AC20 MOV X20, X0
	0x0340AC24 MOV X0, X19
	0x0340AC28 BL 0x340A9F4
	0x0340AC2C LDR X8, [X23]
	0x0340AC30 LDR X2, [X24]
	0x0340AC34 MOV X1, X0
	0x0340AC38 MOV X0, X8
	0x0340AC3C BL 0x226B7E8
	0x0340AC40 LDR X1, [X27]
	0x0340AC44 LDR X3, [X21]
	0x0340AC48 MOV X2, X0
	0x0340AC4C MOV X0, X20
	0x0340AC50 MOV X4, X31
	0x0340AC54 BL 0x32277C4
	0x0340AC58 LDR X2, [X19 + 0x20]
	0x0340AC5C LDR X1, [X26]
	0x0340AC60 LDR X3, [X23]
	0x0340AC64 MOV X4, X31
	0x0340AC68 BL 0x32277C4
	0x0340AC6C LDR X2, [X19 + 0x28]
	0x0340AC70 LDR X1, [X25]
	0x0340AC74 LDR X3, [X23]
	0x0340AC78 MOV X4, X31
	0x0340AC7C BL 0x32277C4
	0x0340AC80 MOV X20, X0
	0x0340AC84 MOV X0, X19
	0x0340AC88 BL 0x340AA9C
	0x0340AC8C LDR X8, [X23]
	0x0340AC90 LDR X2, [X24]
	0x0340AC94 MOV X1, X0
	0x0340AC98 MOV X0, X8
	0x0340AC9C BL 0x226B7E8
	0x0340ACA0 LDR X1, [X22]
	0x0340ACA4 LDR X3, [X21]
	0x0340ACA8 MOV X2, X0
	0x0340ACAC MOV X0, X20
	0x0340ACB0 LDP X20, X19, [X31 + 0x50]
	0x0340ACB4 LDP X22, X21, [X31 + 0x40]
	0x0340ACB8 LDP X24, X23, [X31 + 0x30]
	0x0340ACBC LDP X26, X25, [X31 + 0x20]
	0x0340ACC0 LDP X28, X27, [X31 + 0x10]
	0x0340ACC4 MOV X4, X31
	0x0340ACC8 LDP X29, X30, [X31], #0x60
	0x0340ACCC B 0x32277C4
	0x0340ACD0 MOV X1, X31
	0x0340ACD4 B 0x33BDD8C
	0x0340ACD8 LDR X0, [X0 + 0x10]
	0x0340ACDC RET
	0x0340ACE0 STR X1, [X0 + 0x10]
	0x0340ACE4 RET
	0x0340ACE8 LDR X0, [X0 + 0x18]
	0x0340ACEC RET
	0x0340ACF0 STR X1, [X0 + 0x18]
	0x0340ACF4 RET
	0x0340ACF8 LDR X0, [X0 + 0x20]
	0x0340ACFC RET
	0x0340AD00 STR X1, [X0 + 0x20]
	0x0340AD04 RET
	0x0340AD08 LDR X0, [X0 + 0x28]
	0x0340AD0C RET
	0x0340AD10 STR X1, [X0 + 0x28]
	0x0340AD14 RET
	0x0340AD18 LDR X0, [X0 + 0x30]
	0x0340AD1C RET
	0x0340AD20 STR X1, [X0 + 0x30]
	0x0340AD24 RET
	0x0340AD28 LDR X0, [X0 + 0x38]
	0x0340AD2C RET
	0x0340AD30 STR X1, [X0 + 0x38]
	0x0340AD34 RET
	0x0340AD38 STR X30, [X31 - 0x60]!
	0x0340AD3C STP X28, X27, [X31 + 0x10]
	0x0340AD40 STP X26, X25, [X31 + 0x20]
	0x0340AD44 STP X24, X23, [X31 + 0x30]
	0x0340AD48 STP X22, X21, [X31 + 0x40]
	0x0340AD4C STP X20, X19, [X31 + 0x50]
	0x0340AD50 ADRP X28, 0xFD3000
	0x0340AD54 ADRP X26, 0xCE9000
	0x0340AD58 ADRP X27, 0xD23000
	0x0340AD5C ADRP X20, 0xCE9000
	0x0340AD60 ADRP X25, 0xD24000
	0x0340AD64 ADRP X24, 0xD23000
	0x0340AD68 ADRP X23, 0xD24000
	0x0340AD6C ADRP X22, 0xD24000
	0x0340AD70 ADRP X21, 0xD23000
	0x0340AD74 LDR X26, [X26 + 0x988]
	0x0340AD78 LDR X27, [X27 + 0xCC8]
	0x0340AD7C LDR X20, [X20 + 0x838]
	0x0340AD80 LDRB W8, [X28 + 0x556]
	0x0340AD84 LDR X25, [X25 + 0x160]
	0x0340AD88 LDR X24, [X24 + 0xCD8]
	0x0340AD8C LDR X23, [X23 + 0x168]
	0x0340AD90 LDR X22, [X22 + 0x170]
	0x0340AD94 LDR X21, [X21 + 0xE30]
	0x0340AD98 MOV X19, X0
	0x0340AD9C TBNZ X8, 0x0, 0x340AE08
	0x0340ADA0 ADRP X0, 0xD24000
	0x0340ADA4 LDR X0, [X0 + 0x168]
	0x0340ADA8 BL 0x1C16CF4
	0x0340ADAC ADRP X0, 0xD24000
	0x0340ADB0 LDR X0, [X0 + 0x170]
	0x0340ADB4 BL 0x1C16CF4
	0x0340ADB8 ADRP X0, 0xD23000
	0x0340ADBC LDR X0, [X0 + 0xCD8]
	0x0340ADC0 BL 0x1C16CF4
	0x0340ADC4 ADRP X0, 0xCE9000
	0x0340ADC8 LDR X0, [X0 + 0x838]
	0x0340ADCC BL 0x1C16CF4
	0x0340ADD0 ADRP X0, 0xD23000
	0x0340ADD4 LDR X0, [X0 + 0xCC8]
	0x0340ADD8 BL 0x1C16CF4
	0x0340ADDC ADRP X0, 0xD24000
	0x0340ADE0 LDR X0, [X0 + 0x160]
	0x0340ADE4 BL 0x1C16CF4
	0x0340ADE8 ADRP X0, 0xCE9000
	0x0340ADEC LDR X0, [X0 + 0x988]
	0x0340ADF0 BL 0x1C16CF4
	0x0340ADF4 ADRP X0, 0xD23000
	0x0340ADF8 LDR X0, [X0 + 0xE30]
	0x0340ADFC BL 0x1C16CF4
	0x0340AE00 MOVZ W8, 0x1
	0x0340AE04 STRB W8, [X28 + 0x556]
	0x0340AE08 LDR X2, [X19 + 0x10]
	0x0340AE0C LDR X0, [X26]
	0x0340AE10 LDR X1, [X27]
	0x0340AE14 LDR X3, [X20]
	0x0340AE18 MOV X4, X31
	0x0340AE1C BL 0x32277C4
	0x0340AE20 LDR X2, [X19 + 0x18]
	0x0340AE24 LDR X1, [X25]
	0x0340AE28 LDR X3, [X20]
	0x0340AE2C MOV X4, X31
	0x0340AE30 BL 0x32277C4
	0x0340AE34 LDR X2, [X19 + 0x20]
	0x0340AE38 LDR X1, [X24]
	0x0340AE3C LDR X3, [X20]
	0x0340AE40 MOV X4, X31
	0x0340AE44 BL 0x32277C4
	0x0340AE48 LDR X2, [X19 + 0x28]
	0x0340AE4C LDR X1, [X23]
	0x0340AE50 LDR X3, [X20]
	0x0340AE54 MOV X4, X31
	0x0340AE58 BL 0x32277C4
	0x0340AE5C LDR X2, [X19 + 0x30]
	0x0340AE60 LDR X1, [X22]
	0x0340AE64 LDR X3, [X20]
	0x0340AE68 MOV X4, X31
	0x0340AE6C BL 0x32277C4
	0x0340AE70 LDR X2, [X19 + 0x38]
	0x0340AE74 LDR X1, [X21]
	0x0340AE78 LDR X3, [X20]
	0x0340AE7C LDP X20, X19, [X31 + 0x50]
	0x0340AE80 LDP X22, X21, [X31 + 0x40]
	0x0340AE84 LDP X24, X23, [X31 + 0x30]
	0x0340AE88 LDP X26, X25, [X31 + 0x20]
	0x0340AE8C LDP X28, X27, [X31 + 0x10]
	0x0340AE90 MOV X4, X31
	0x0340AE94 LDR X30, [X31], #0x60
	0x0340AE98 B 0x32277C4
	0x0340AE9C MOV X1, X31
	0x0340AEA0 B 0x33BDD8C
	0x0340AEA4 LDR X0, [X0 + 0x10]
	0x0340AEA8 RET
	0x0340AEAC STR X1, [X0 + 0x10]
	0x0340AEB0 RET
	0x0340AEB4 LDR X0, [X0 + 0x18]
	0x0340AEB8 RET
	0x0340AEBC STR X1, [X0 + 0x18]
	0x0340AEC0 RET
	0x0340AEC4 LDR X0, [X0 + 0x20]
	0x0340AEC8 RET
	0x0340AECC STR X1, [X0 + 0x20]
	0x0340AED0 RET
	0x0340AED4 LDR X0, [X0 + 0x28]
	0x0340AED8 RET
	0x0340AEDC STR X1, [X0 + 0x28]
	0x0340AEE0 RET
	0x0340AEE4 LDR W0, [X0 + 0x30]
	0x0340AEE8 RET
	0x0340AEEC STR W1, [X0 + 0x30]
	0x0340AEF0 RET
	0x0340AEF4 LDR X0, [X0 + 0x38]
	0x0340AEF8 RET
	0x0340AEFC STR X1, [X0 + 0x38]
	0x0340AF00 RET
	0x0340AF04 LDR X0, [X0 + 0x40]
	0x0340AF08 RET
	0x0340AF0C STR X1, [X0 + 0x40]
	0x0340AF10 RET
	0x0340AF14 LDR X0, [X0 + 0x48]
	0x0340AF18 RET
	0x0340AF1C STR X1, [X0 + 0x48]
	0x0340AF20 RET
	0x0340AF24 LDR X0, [X0 + 0x50]
	0x0340AF28 RET
	0x0340AF2C STR X1, [X0 + 0x50]
	0x0340AF30 RET
	0x0340AF34 LDR X0, [X0 + 0x58]
	0x0340AF38 RET
	0x0340AF3C STR X1, [X0 + 0x58]
	0x0340AF40 RET
	0x0340AF44 LDR X0, [X0 + 0x60]
	0x0340AF48 RET
	0x0340AF4C STR X1, [X0 + 0x60]
	0x0340AF50 RET
	0x0340AF54 LDR X0, [X0 + 0x68]
	0x0340AF58 RET
	0x0340AF5C STR X1, [X0 + 0x68]
	0x0340AF60 RET
	0x0340AF64 LDR X0, [X0 + 0x70]
	0x0340AF68 RET
	0x0340AF6C STR X1, [X0 + 0x70]
	0x0340AF70 RET
	0x0340AF74 LDRB W0, [X0 + 0x78]
	0x0340AF78 RET
	0x0340AF7C AND W8, W1, 0x1
	0x0340AF80 STRB W8, [X0 + 0x78]
	0x0340AF84 RET
	0x0340AF88 LDR X0, [X0 + 0x80]
	0x0340AF8C RET
	0x0340AF90 STR X1, [X0 + 0x80]
	0x0340AF94 RET
	0x0340AF98 LDR X0, [X0 + 0x88]
	0x0340AF9C RET
	0x0340AFA0 STR X1, [X0 + 0x88]
	0x0340AFA4 RET
	0x0340AFA8 LDR X0, [X0 + 0x90]
	0x0340AFAC RET
	0x0340AFB0 STR X1, [X0 + 0x90]
	0x0340AFB4 RET
	0x0340AFB8 LDR X0, [X0 + 0x98]
	0x0340AFBC RET
	0x0340AFC0 STR X1, [X0 + 0x98]
	0x0340AFC4 RET
	0x0340AFC8 SUB X31, X31, 0x70
	0x0340AFCC STP X29, X30, [X31 + 0x10]
	0x0340AFD0 STP X28, X27, [X31 + 0x20]
	0x0340AFD4 STP X26, X25, [X31 + 0x30]
	0x0340AFD8 STP X24, X23, [X31 + 0x40]
	0x0340AFDC STP X22, X21, [X31 + 0x50]
	0x0340AFE0 STP X20, X19, [X31 + 0x60]
	0x0340AFE4 ADRP X26, 0xFD3000
	0x0340AFE8 ADRP X27, 0xCE9000
	0x0340AFEC ADRP X25, 0xD24000
	0x0340AFF0 ADRP X22, 0xCE9000
	0x0340AFF4 ADRP X24, 0xD23000
	0x0340AFF8 ADRP X21, 0xD23000
	0x0340AFFC ADRP X20, 0xD24000
	0x0340B000 ADRP X23, 0xCE8000
	0x0340B004 LDR X27, [X27 + 0x988]
	0x0340B008 LDR X25, [X25 + 0x178]
	0x0340B00C LDRB W8, [X26 + 0x557]
	0x0340B010 LDR X22, [X22 + 0x838]
	0x0340B014 LDR X24, [X24 + 0xCC8]
	0x0340B018 LDR X21, [X21 + 0xDE0]
	0x0340B01C LDR X20, [X20 + 0x160]
	0x0340B020 LDR X23, [X23 + 0x9D0]
	0x0340B024 MOV X19, X0
	0x0340B028 TBNZ X8, 0x0, 0x340B148
	0x0340B02C ADRP X0, 0xCE8000
	0x0340B030 LDR X0, [X0 + 0xB58]
	0x0340B034 BL 0x1C16CF4
	0x0340B038 ADRP X0, 0xCE8000
	0x0340B03C LDR X0, [X0 + 0x758]
	0x0340B040 BL 0x1C16CF4
	0x0340B044 ADRP X0, 0xCE8000
	0x0340B048 LDR X0, [X0 + 0x9D0]
	0x0340B04C BL 0x1C16CF4
	0x0340B050 ADRP X0, 0xD23000
	0x0340B054 LDR X0, [X0 + 0x168]
	0x0340B058 BL 0x1C16CF4
	0x0340B05C ADRP X0, 0xD23000
	0x0340B060 LDR X0, [X0 + 0x180]
	0x0340B064 BL 0x1C16CF4
	0x0340B068 ADRP X0, 0xD22000
	0x0340B06C LDR X0, [X0 + 0xD88]
	0x0340B070 BL 0x1C16CF4
	0x0340B074 ADRP X0, 0xD23000
	0x0340B078 LDR X0, [X0 + 0x170]
	0x0340B07C BL 0x1C16CF4
	0x0340B080 ADRP X0, 0xD22000
	0x0340B084 LDR X0, [X0 + 0xCD8]
	0x0340B088 BL 0x1C16CF4
	0x0340B08C ADRP X0, 0xD23000
	0x0340B090 LDR X0, [X0 + 0x188]
	0x0340B094 BL 0x1C16CF4
	0x0340B098 ADRP X0, 0xD23000
	0x0340B09C LDR X0, [X0 + 0x190]
	0x0340B0A0 BL 0x1C16CF4
	0x0340B0A4 ADRP X0, 0xD22000
	0x0340B0A8 LDR X0, [X0 + 0xDE0]
	0x0340B0AC BL 0x1C16CF4
	0x0340B0B0 ADRP X0, 0xCE8000
	0x0340B0B4 LDR X0, [X0 + 0x838]
	0x0340B0B8 BL 0x1C16CF4
	0x0340B0BC ADRP X0, 0xD22000
	0x0340B0C0 LDR X0, [X0 + 0xD00]
	0x0340B0C4 BL 0x1C16CF4
	0x0340B0C8 ADRP X0, 0xD22000
	0x0340B0CC LDR X0, [X0 + 0xDE8]
	0x0340B0D0 BL 0x1C16CF4
	0x0340B0D4 ADRP X0, 0xD23000
	0x0340B0D8 LDR X0, [X0 + 0x178]
	0x0340B0DC BL 0x1C16CF4
	0x0340B0E0 ADRP X0, 0xD23000
	0x0340B0E4 LDR X0, [X0 + 0x198]
	0x0340B0E8 BL 0x1C16CF4
	0x0340B0EC ADRP X0, 0xD22000
	0x0340B0F0 LDR X0, [X0 + 0xCC8]
	0x0340B0F4 BL 0x1C16CF4
	0x0340B0F8 ADRP X0, 0xD23000
	0x0340B0FC LDR X0, [X0 + 0x1A0]
	0x0340B100 BL 0x1C16CF4
	0x0340B104 ADRP X0, 0xD23000
	0x0340B108 LDR X0, [X0 + 0x160]
	0x0340B10C BL 0x1C16CF4
	0x0340B110 ADRP X0, 0xCE8000
	0x0340B114 LDR X0, [X0 + 0x988]
	0x0340B118 BL 0x1C16CF4
	0x0340B11C ADRP X0, 0xD22000
	0x0340B120 LDR X0, [X0 + 0xEF8]
	0x0340B124 BL 0x1C16CF4
	0x0340B128 ADRP X0, 0xD23000
	0x0340B12C LDR X0, [X0 + 0x1A8]
	0x0340B130 BL 0x1C16CF4
	0x0340B134 ADRP X0, 0xD22000
	0x0340B138 LDR X0, [X0 + 0xE30]
	0x0340B13C BL 0x1C16CF4
	0x0340B140 MOVZ W8, 0x1
	0x0340B144 STRB W8, [X26 + 0x557]
	0x0340B148 LDR X0, [X27]
	0x0340B14C LDR X2, [X19 + 0x10]
	0x0340B150 LDR X1, [X25]
	0x0340B154 LDR X3, [X22]
	0x0340B158 MOV X4, X31
	0x0340B15C BL 0x32277C4
	0x0340B160 LDR X2, [X19 + 0x18]
	0x0340B164 LDR X1, [X24]
	0x0340B168 LDR X3, [X22]
	0x0340B16C MOV X4, X31
	0x0340B170 BL 0x32277C4
	0x0340B174 LDR X2, [X19 + 0x20]
	0x0340B178 LDR X1, [X21]
	0x0340B17C LDR X3, [X22]
	0x0340B180 MOV X4, X31
	0x0340B184 BL 0x32277C4
	0x0340B188 LDR X2, [X19 + 0x28]
	0x0340B18C LDR X1, [X20]
	0x0340B190 LDR X3, [X22]
	0x0340B194 MOV X4, X31
	0x0340B198 BL 0x32277C4
	0x0340B19C LDR X8, [X23]
	0x0340B1A0 MOV X21, X0
	0x0340B1A4 MOVZ W1, 0x4
	0x0340B1A8 MOV X0, X8
	0x0340B1AC BL 0x1C16D6C
	0x0340B1B0 CBZ X0, 0x340B50C
	0x0340B1B4 MOV X20, X0
	0x0340B1B8 CBZ X21, 0x340B1D0
	0x0340B1BC LDR X8, [X20]
	0x0340B1C0 MOV X0, X21
	0x0340B1C4 LDR X1, [X8 + 0x40]
	0x0340B1C8 BL 0x1C16E00
	0x0340B1CC CBZ X0, 0x340B500
	0x0340B1D0 LDR W8, [X20 + 0x18]
	0x0340B1D4 CBZ W8, 0x340B4FC
	0x0340B1D8 ADRP X24, 0xD22000
	0x0340B1DC LDR X24, [X24 + 0xEF8]
	0x0340B1E0 STR X21, [X20 + 0x20]
	0x0340B1E4 LDR X0, [X24]
	0x0340B1E8 CBZ X0, 0x340B200
	0x0340B1EC LDR X8, [X20]
	0x0340B1F0 LDR X1, [X8 + 0x40]
	0x0340B1F4 BL 0x1C16E00
	0x0340B1F8 CBZ X0, 0x340B500
	0x0340B1FC LDR W8, [X20 + 0x18]
	0x0340B200 CMP W8, 0x1
	0x0340B204 B.LS 0x340B4FC
	0x0340B208 LDR X8, [X24]
	0x0340B20C ADRP X9, 0xCE8000
	0x0340B210 LDR X9, [X9 + 0x758]
	0x0340B214 ADD X1, X31, 0xC
	0x0340B218 STR X8, [X20 + 0x28]
	0x0340B21C LDR W8, [X19 + 0x30]
	0x0340B220 LDR X0, [X9]
	0x0340B224 STR W8, [X31 + 0xC]
	0x0340B228 BL 0x1C16E04
	0x0340B22C MOV X21, X0
	0x0340B230 CBZ X0, 0x340B248
	0x0340B234 LDR X8, [X20]
	0x0340B238 MOV X0, X21
	0x0340B23C LDR X1, [X8 + 0x40]
	0x0340B240 BL 0x1C16E00
	0x0340B244 CBZ X0, 0x340B500
	0x0340B248 LDR W8, [X20 + 0x18]
	0x0340B24C CMP W8, 0x2
	0x0340B250 B.LS 0x340B4FC
	0x0340B254 STR X21, [X20 + 0x30]
	0x0340B258 LDR X0, [X22]
	0x0340B25C CBZ X0, 0x340B274
	0x0340B260 LDR X8, [X20]
	0x0340B264 LDR X1, [X8 + 0x40]
	0x0340B268 BL 0x1C16E00
	0x0340B26C CBZ X0, 0x340B500
	0x0340B270 LDR W8, [X20 + 0x18]
	0x0340B274 CMP W8, 0x3
	0x0340B278 B.LS 0x340B4FC
	0x0340B27C ADRP X26, 0xD23000
	0x0340B280 ADRP X27, 0xD23000
	0x0340B284 ADRP X28, 0xD23000
	0x0340B288 ADRP X29, 0xD23000
	0x0340B28C ADRP X23, 0xD22000
	0x0340B290 LDR X26, [X26 + 0x1A0]
	0x0340B294 LDR X27, [X27 + 0x1A8]
	0x0340B298 LDR X28, [X28 + 0x180]
	0x0340B29C LDR X29, [X29 + 0x198]
	0x0340B2A0 LDR X23, [X23 + 0xD88]
	0x0340B2A4 LDR X8, [X22]
	0x0340B2A8 ADRP X25, 0xD22000
	0x0340B2AC ADRP X24, 0xD23000
	0x0340B2B0 ADRP X21, 0xD22000
	0x0340B2B4 LDR X25, [X25 + 0xCD8]
	0x0340B2B8 LDR X24, [X24 + 0x168]
	0x0340B2BC LDR X21, [X21 + 0xD00]
	0x0340B2C0 MOV X0, X20
	0x0340B2C4 MOV X1, X31
	0x0340B2C8 STR X8, [X20 + 0x38]
	0x0340B2CC BL 0x3227578
	0x0340B2D0 LDR X2, [X19 + 0x38]
	0x0340B2D4 LDR X1, [X26]
	0x0340B2D8 LDR X3, [X22]
	0x0340B2DC MOV X4, X31
	0x0340B2E0 BL 0x32277C4
	0x0340B2E4 LDR X2, [X19 + 0x40]
	0x0340B2E8 LDR X1, [X27]
	0x0340B2EC LDR X3, [X22]
	0x0340B2F0 MOV X4, X31
	0x0340B2F4 BL 0x32277C4
	0x0340B2F8 LDR X2, [X19 + 0x48]
	0x0340B2FC LDR X1, [X28]
	0x0340B300 LDR X3, [X22]
	0x0340B304 MOV X4, X31
	0x0340B308 BL 0x32277C4
	0x0340B30C LDR X2, [X19 + 0x50]
	0x0340B310 LDR X1, [X29]
	0x0340B314 LDR X3, [X22]
	0x0340B318 MOV X4, X31
	0x0340B31C BL 0x32277C4
	0x0340B320 LDR X2, [X19 + 0x58]
	0x0340B324 LDR X1, [X23]
	0x0340B328 LDR X3, [X22]
	0x0340B32C MOV X4, X31
	0x0340B330 BL 0x32277C4
	0x0340B334 LDR X2, [X19 + 0x60]
	0x0340B338 LDR X1, [X25]
	0x0340B33C LDR X3, [X22]
	0x0340B340 MOV X4, X31
	0x0340B344 BL 0x32277C4
	0x0340B348 LDR X2, [X19 + 0x68]
	0x0340B34C LDR X1, [X24]
	0x0340B350 LDR X3, [X22]
	0x0340B354 MOV X4, X31
	0x0340B358 BL 0x32277C4
	0x0340B35C LDR X2, [X19 + 0x70]
	0x0340B360 LDR X1, [X21]
	0x0340B364 LDR X3, [X22]
	0x0340B368 MOV X4, X31
	0x0340B36C BL 0x32277C4
	0x0340B370 ADRP X8, 0xCE8000
	0x0340B374 LDR X8, [X8 + 0x9D0]
	0x0340B378 MOV X21, X0
	0x0340B37C MOVZ W1, 0x4
	0x0340B380 LDR X8, [X8]
	0x0340B384 MOV X0, X8
	0x0340B388 BL 0x1C16D6C
	0x0340B38C CBZ X0, 0x340B50C
	0x0340B390 MOV X20, X0
	0x0340B394 CBZ X21, 0x340B3AC
	0x0340B398 LDR X8, [X20]
	0x0340B39C MOV X0, X21
	0x0340B3A0 LDR X1, [X8 + 0x40]
	0x0340B3A4 BL 0x1C16E00
	0x0340B3A8 CBZ X0, 0x340B500
	0x0340B3AC LDR W8, [X20 + 0x18]
	0x0340B3B0 CBZ W8, 0x340B4FC
	0x0340B3B4 ADRP X23, 0xD23000
	0x0340B3B8 LDR X23, [X23 + 0x190]
	0x0340B3BC STR X21, [X20 + 0x20]
	0x0340B3C0 LDR X0, [X23]
	0x0340B3C4 CBZ X0, 0x340B3DC
	0x0340B3C8 LDR X8, [X20]
	0x0340B3CC LDR X1, [X8 + 0x40]
	0x0340B3D0 BL 0x1C16E00
	0x0340B3D4 CBZ X0, 0x340B500
	0x0340B3D8 LDR W8, [X20 + 0x18]
	0x0340B3DC CMP W8, 0x1
	0x0340B3E0 B.LS 0x340B4FC
	0x0340B3E4 LDR X8, [X23]
	0x0340B3E8 ADRP X9, 0xCE8000
	0x0340B3EC LDR X9, [X9 + 0xB58]
	0x0340B3F0 ADD X1, X31, 0x8
	0x0340B3F4 STR X8, [X20 + 0x28]
	0x0340B3F8 LDRB W8, [X19 + 0x78]
	0x0340B3FC LDR X0, [X9]
	0x0340B400 STRB W8, [X31 + 0x8]
	0x0340B404 BL 0x1C16E04
	0x0340B408 MOV X21, X0
	0x0340B40C CBZ X0, 0x340B424
	0x0340B410 LDR X8, [X20]
	0x0340B414 MOV X0, X21
	0x0340B418 LDR X1, [X8 + 0x40]
	0x0340B41C BL 0x1C16E00
	0x0340B420 CBZ X0, 0x340B500
	0x0340B424 LDR W8, [X20 + 0x18]
	0x0340B428 CMP W8, 0x2
	0x0340B42C B.LS 0x340B4FC
	0x0340B430 STR X21, [X20 + 0x30]
	0x0340B434 LDR X0, [X22]
	0x0340B438 CBZ X0, 0x340B450
	0x0340B43C LDR X8, [X20]
	0x0340B440 LDR X1, [X8 + 0x40]
	0x0340B444 BL 0x1C16E00
	0x0340B448 CBZ X0, 0x340B500
	0x0340B44C LDR W8, [X20 + 0x18]
	0x0340B450 CMP W8, 0x3
	0x0340B454 B.LS 0x340B4FC
	0x0340B458 ADRP X21, 0xD23000
	0x0340B45C LDR X21, [X21 + 0x188]
	0x0340B460 LDR X8, [X22]
	0x0340B464 ADRP X23, 0xD23000
	0x0340B468 ADRP X24, 0xD22000
	0x0340B46C ADRP X25, 0xD22000
	0x0340B470 LDR X23, [X23 + 0x170]
	0x0340B474 LDR X24, [X24 + 0xDE8]
	0x0340B478 LDR X25, [X25 + 0xE30]
	0x0340B47C MOV X0, X20
	0x0340B480 MOV X1, X31
	0x0340B484 STR X8, [X20 + 0x38]
	0x0340B488 BL 0x3227578
	0x0340B48C LDR X2, [X19 + 0x80]
	0x0340B490 LDR X1, [X21]
	0x0340B494 LDR X3, [X22]
	0x0340B498 MOV X4, X31
	0x0340B49C BL 0x32277C4
	0x0340B4A0 LDR X2, [X19 + 0x88]
	0x0340B4A4 LDR X1, [X23]
	0x0340B4A8 LDR X3, [X22]
	0x0340B4AC MOV X4, X31
	0x0340B4B0 BL 0x32277C4
	0x0340B4B4 LDR X2, [X19 + 0x90]
	0x0340B4B8 LDR X1, [X24]
	0x0340B4BC LDR X3, [X22]
	0x0340B4C0 MOV X4, X31
	0x0340B4C4 BL 0x32277C4
	0x0340B4C8 LDR X2, [X19 + 0x98]
	0x0340B4CC LDR X1, [X25]
	0x0340B4D0 LDR X3, [X22]
	0x0340B4D4 MOV X4, X31
	0x0340B4D8 BL 0x32277C4
	0x0340B4DC LDP X20, X19, [X31 + 0x60]
	0x0340B4E0 LDP X22, X21, [X31 + 0x50]
	0x0340B4E4 LDP X24, X23, [X31 + 0x40]
	0x0340B4E8 LDP X26, X25, [X31 + 0x30]
	0x0340B4EC LDP X28, X27, [X31 + 0x20]
	0x0340B4F0 LDP X29, X30, [X31 + 0x10]
	0x0340B4F4 ADD X31, X31, 0x70
	0x0340B4F8 RET
	0x0340B4FC BL 0x1C16F28
	0x0340B500 BL 0x1C16F44
	0x0340B504 MOV X1, X31
	0x0340B508 BL 0x1C16DEC
	0x0340B50C BL 0x1C16F20
	0x0340B510 MOV X1, X31
	0x0340B514 B 0x33BDD8C
	0x0340B518 LDR X0, [X0 + 0x10]
	0x0340B51C RET
	0x0340B520 STR X1, [X0 + 0x10]
	0x0340B524 RET
	0x0340B528 STR X30, [X31 - 0x20]!
	0x0340B52C STP X20, X19, [X31 + 0x10]
	0x0340B530 ADRP X20, 0xFD2000
	0x0340B534 LDRB W8, [X20 + 0x558]
	0x0340B538 MOV X19, X0
	0x0340B53C TBNZ X8, 0x0, 0x340B560
	0x0340B540 ADRP X0, 0xD23000
	0x0340B544 LDR X0, [X0 + 0x1B0]
	0x0340B548 BL 0x1C16CF4
	0x0340B54C ADRP X0, 0xD23000
	0x0340B550 LDR X0, [X0 + 0x1B8]
	0x0340B554 BL 0x1C16CF4
	0x0340B558 MOVZ W8, 0x1
	0x0340B55C STRB W8, [X20 + 0x558]
	0x0340B560 LDR X19, [X19 + 0x18]
	0x0340B564 CBNZ X19, 0x340B590
	0x0340B568 ADRP X8, 0xD23000
	0x0340B56C LDR X8, [X8 + 0x1B8]
	0x0340B570 LDR X0, [X8]
	0x0340B574 BL 0x1C16F10
	0x0340B578 ADRP X8, 0xD23000
	0x0340B57C LDR X8, [X8 + 0x1B0]
	0x0340B580 MOV W1, W31
	0x0340B584 MOV X19, X0
	0x0340B588 LDR X2, [X8]
	0x0340B58C BL 0x301B830
	0x0340B590 MOV X0, X19
	0x0340B594 LDP X20, X19, [X31 + 0x10]
	0x0340B598 LDR X30, [X31], #0x20
	0x0340B59C RET
	0x0340B5A0 LDR X0, [X0 + 0x18]
	0x0340B5A4 RET
	0x0340B5A8 STR X1, [X0 + 0x18]
	0x0340B5AC RET
	0x0340B5B0 STR X30, [X31 - 0x50]!
	0x0340B5B4 STP X26, X25, [X31 + 0x10]
	0x0340B5B8 STP X24, X23, [X31 + 0x20]
	0x0340B5BC STP X22, X21, [X31 + 0x30]
	0x0340B5C0 STP X20, X19, [X31 + 0x40]
	0x0340B5C4 ADRP X26, 0xFD2000
	0x0340B5C8 ADRP X20, 0xCE8000
	0x0340B5CC ADRP X25, 0xD22000
	0x0340B5D0 ADRP X23, 0xCE8000
	0x0340B5D4 ADRP X24, 0xD23000
	0x0340B5D8 ADRP X21, 0xD23000
	0x0340B5DC ADRP X22, 0xD22000
	0x0340B5E0 LDR X20, [X20 + 0x988]
	0x0340B5E4 LDRB W8, [X26 + 0x559]
	0x0340B5E8 LDR X25, [X25 + 0xED8]
	0x0340B5EC LDR X23, [X23 + 0x838]
	0x0340B5F0 LDR X24, [X24 + 0x1C0]
	0x0340B5F4 LDR X21, [X21 + 0x1C8]
	0x0340B5F8 LDR X22, [X22 + 0xD50]
	0x0340B5FC MOV X19, X0
	0x0340B600 TBNZ X8, 0x0, 0x340B654
	0x0340B604 ADRP X0, 0xD23000
	0x0340B608 LDR X0, [X0 + 0x1C0]
	0x0340B60C BL 0x1C16CF4
	0x0340B610 ADRP X0, 0xD23000
	0x0340B614 LDR X0, [X0 + 0x1C8]
	0x0340B618 BL 0x1C16CF4
	0x0340B61C ADRP X0, 0xCE8000
	0x0340B620 LDR X0, [X0 + 0x838]
	0x0340B624 BL 0x1C16CF4
	0x0340B628 ADRP X0, 0xD22000
	0x0340B62C LDR X0, [X0 + 0xD50]
	0x0340B630 BL 0x1C16CF4
	0x0340B634 ADRP X0, 0xD22000
	0x0340B638 LDR X0, [X0 + 0xED8]
	0x0340B63C BL 0x1C16CF4
	0x0340B640 ADRP X0, 0xCE8000
	0x0340B644 LDR X0, [X0 + 0x988]
	0x0340B648 BL 0x1C16CF4
	0x0340B64C MOVZ W8, 0x1
	0x0340B650 STRB W8, [X26 + 0x559]
	0x0340B654 LDR X2, [X19 + 0x10]
	0x0340B658 LDR X0, [X20]
	0x0340B65C LDR X1, [X25]
	0x0340B660 LDR X3, [X23]
	0x0340B664 MOV X4, X31
	0x0340B668 BL 0x32277C4
	0x0340B66C MOV X20, X0
	0x0340B670 MOV X0, X19
	0x0340B674 BL 0x340B528
	0x0340B678 LDR X8, [X23]
	0x0340B67C LDR X2, [X24]
	0x0340B680 MOV X1, X0
	0x0340B684 MOV X0, X8
	0x0340B688 BL 0x226B7E8
	0x0340B68C LDR X1, [X21]
	0x0340B690 LDR X3, [X22]
	0x0340B694 MOV X2, X0
	0x0340B698 MOV X0, X20
	0x0340B69C LDP X20, X19, [X31 + 0x40]
	0x0340B6A0 LDP X22, X21, [X31 + 0x30]
	0x0340B6A4 LDP X24, X23, [X31 + 0x20]
	0x0340B6A8 LDP X26, X25, [X31 + 0x10]
	0x0340B6AC MOV X4, X31
	0x0340B6B0 LDR X30, [X31], #0x50
	0x0340B6B4 B 0x32277C4
	0x0340B6B8 MOV X1, X31
	0x0340B6BC B 0x33BDD8C
	0x0340B6C0 STR X30, [X31 - 0x20]!
	0x0340B6C4 STP X20, X19, [X31 + 0x10]
	0x0340B6C8 ADRP X20, 0xFD2000
	0x0340B6CC LDRB W8, [X20 + 0x55A]
	0x0340B6D0 MOV X19, X0
	0x0340B6D4 TBNZ X8, 0x0, 0x340B6F8
	0x0340B6D8 ADRP X0, 0xD23000
	0x0340B6DC LDR X0, [X0 + 0x1D0]
	0x0340B6E0 BL 0x1C16CF4
	0x0340B6E4 ADRP X0, 0xD23000
	0x0340B6E8 LDR X0, [X0 + 0x1D8]
	0x0340B6EC BL 0x1C16CF4
	0x0340B6F0 MOVZ W8, 0x1
	0x0340B6F4 STRB W8, [X20 + 0x55A]
	0x0340B6F8 LDR X19, [X19 + 0x10]
	0x0340B6FC CBNZ X19, 0x340B728
	0x0340B700 ADRP X8, 0xD23000
	0x0340B704 LDR X8, [X8 + 0x1D8]
	0x0340B708 LDR X0, [X8]
	0x0340B70C BL 0x1C16F10
	0x0340B710 ADRP X8, 0xD23000
	0x0340B714 LDR X8, [X8 + 0x1D0]
	0x0340B718 MOV W1, W31
	0x0340B71C MOV X19, X0
	0x0340B720 LDR X2, [X8]
	0x0340B724 BL 0x301B830
	0x0340B728 MOV X0, X19
	0x0340B72C LDP X20, X19, [X31 + 0x10]
	0x0340B730 LDR X30, [X31], #0x20
	0x0340B734 RET
	0x0340B738 LDR X0, [X0 + 0x10]
	0x0340B73C RET
	0x0340B740 STR X1, [X0 + 0x10]
	0x0340B744 RET
	0x0340B748 STP X30, X25, [X31 - 0x40]!
	0x0340B74C STP X24, X23, [X31 + 0x10]
	0x0340B750 STP X22, X21, [X31 + 0x20]
	0x0340B754 STP X20, X19, [X31 + 0x30]
	0x0340B758 ADRP X25, 0xFD2000
	0x0340B75C ADRP X23, 0xCE8000
	0x0340B760 ADRP X24, 0xD23000
	0x0340B764 ADRP X20, 0xCE8000
	0x0340B768 ADRP X21, 0xD23000
	0x0340B76C ADRP X22, 0xD22000
	0x0340B770 LDRB W8, [X25 + 0x55B]
	0x0340B774 LDR X23, [X23 + 0x838]
	0x0340B778 LDR X24, [X24 + 0x1E0]
	0x0340B77C LDR X20, [X20 + 0x988]
	0x0340B780 LDR X21, [X21 + 0x1E8]
	0x0340B784 LDR X22, [X22 + 0xD50]
	0x0340B788 MOV X19, X0
	0x0340B78C TBNZ X8, 0x0, 0x340B7D4
	0x0340B790 ADRP X0, 0xD23000
	0x0340B794 LDR X0, [X0 + 0x1E0]
	0x0340B798 BL 0x1C16CF4
	0x0340B79C ADRP X0, 0xCE8000
	0x0340B7A0 LDR X0, [X0 + 0x838]
	0x0340B7A4 BL 0x1C16CF4
	0x0340B7A8 ADRP X0, 0xD23000
	0x0340B7AC LDR X0, [X0 + 0x1E8]
	0x0340B7B0 BL 0x1C16CF4
	0x0340B7B4 ADRP X0, 0xD22000
	0x0340B7B8 LDR X0, [X0 + 0xD50]
	0x0340B7BC BL 0x1C16CF4
	0x0340B7C0 ADRP X0, 0xCE8000
	0x0340B7C4 LDR X0, [X0 + 0x988]
	0x0340B7C8 BL 0x1C16CF4
	0x0340B7CC MOVZ W8, 0x1
	0x0340B7D0 STRB W8, [X25 + 0x55B]
	0x0340B7D4 MOV X0, X19
	0x0340B7D8 BL 0x340B6C0
	0x0340B7DC LDR X8, [X23]
	0x0340B7E0 LDR X2, [X24]
	0x0340B7E4 MOV X1, X0
	0x0340B7E8 MOV X0, X8
	0x0340B7EC BL 0x226B7E8
	0x0340B7F0 LDR X8, [X20]
	0x0340B7F4 LDR X1, [X21]
	0x0340B7F8 LDR X3, [X22]
	0x0340B7FC LDP X20, X19, [X31 + 0x30]
	0x0340B800 LDP X22, X21, [X31 + 0x20]
	0x0340B804 LDP X24, X23, [X31 + 0x10]
	0x0340B808 MOV X2, X0
	0x0340B80C MOV X0, X8
	0x0340B810 MOV X4, X31
	0x0340B814 LDP X30, X25, [X31], #0x40
	0x0340B818 B 0x32277C4
	0x0340B81C MOV X1, X31
	0x0340B820 B 0x33BDD8C
	0x0340B824 LDRB W0, [X0 + 0x10]
	0x0340B828 RET
	0x0340B82C AND W8, W1, 0x1
	0x0340B830 STRB W8, [X0 + 0x10]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+72], X25
	004 Move [X31+80], X24
	005 Move [X31+88], X23
	006 Move [X31+96], X22
	007 Move [X31+104], X21
	008 Move [X31+112], X20
	009 Move [X31+120], X19
	010 Move X20, 0xFD4000
	011 Move X21, 0xCEA000
	012 Move X22, 0xCEA000
	013 Move W8, [X20+1360]
	014 Move X21, [X21+2440]
	015 Move X22, [X22+2512]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {101}
	021 Move X0, 0xD24000
	022 Move X0, [X0+3336]
	023 Call 0x1C17CF4
	024 Move X0, 0xCEA000
	025 Move X0, [X0+2904]
	026 Call 0x1C17CF4
	027 Move X0, 0xCEA000
	028 Move X0, [X0+1880]
	029 Call 0x1C17CF4
	030 Move X0, 0xCEA000
	031 Move X0, [X0+2512]
	032 Call 0x1C17CF4
	033 Move X0, 0xD25000
	034 Move X0, [X0+224]
	035 Call 0x1C17CF4
	036 Move X0, 0xD25000
	037 Move X0, [X0+232]
	038 Call 0x1C17CF4
	039 Move X0, 0xD24000
	040 Move X0, [X0+4024]
	041 Call 0x1C17CF4
	042 Move X0, 0xD24000
	043 Move X0, [X0+3464]
	044 Call 0x1C17CF4
	045 Move X0, 0xD25000
	046 Move X0, [X0+240]
	047 Call 0x1C17CF4
	048 Move X0, 0xD24000
	049 Move X0, [X0+4040]
	050 Call 0x1C17CF4
	051 Move X0, 0xD25000
	052 Move X0, [X0+248]
	053 Call 0x1C17CF4
	054 Move X0, 0xD25000
	055 Move X0, [X0+256]
	056 Call 0x1C17CF4
	057 Move X0, 0xD24000
	058 Move X0, [X0+3552]
	059 Call 0x1C17CF4
	060 Move X0, 0xD25000
	061 Move X0, [X0+264]
	062 Call 0x1C17CF4
	063 Move X0, 0xCEA000
	064 Move X0, [X0+2104]
	065 Call 0x1C17CF4
	066 Move X0, 0xD25000
	067 Move X0, [X0+272]
	068 Call 0x1C17CF4
	069 Move X0, 0xD25000
	070 Move X0, [X0+280]
	071 Call 0x1C17CF4
	072 Move X0, 0xD24000
	073 Move X0, [X0+3328]
	074 Call 0x1C17CF4
	075 Move X0, 0xD24000
	076 Move X0, [X0+3360]
	077 Call 0x1C17CF4
	078 Move X0, 0xD25000
	079 Move X0, [X0+288]
	080 Call 0x1C17CF4
	081 Move X0, 0xD25000
	082 Move X0, [X0+296]
	083 Call 0x1C17CF4
	084 Move X0, 0xD25000
	085 Move X0, [X0+304]
	086 Call 0x1C17CF4
	087 Move X0, 0xD25000
	088 Move X0, [X0+312]
	089 Call 0x1C17CF4
	090 Move X0, 0xCEA000
	091 Move X0, [X0+2440]
	092 Call 0x1C17CF4
	093 Move X0, 0xD24000
	094 Move X0, [X0+3936]
	095 Call 0x1C17CF4
	096 Move X0, 0xD24000
	097 Move X0, [X0+3280]
	098 Call 0x1C17CF4
	099 Move W8, 1
	100 Move [X20+1360], W8
	101 Move X0, [X22]
	102 Move X21, [X21]
	103 Move W1, 4
	104 Call 0x1C17D6C
	105 Compare X0, 0
	106 JumpIfEqual {1029}
	107 Move X20, X0
	108 Compare X21, 0
	109 JumpIfEqual {116}
	110 Move X8, [X20]
	111 Move X0, X21
	112 Move X1, [X8+64]
	113 Call 0x1C17E00
	114 Compare X0, 0
	115 JumpIfEqual {1026}
	116 Move W8, [X20+24]
	117 Compare W8, 0
	118 JumpIfEqual {1025}
	119 Move X23, 0xD24000
	120 Move X23, [X23+4040]
	121 Move [X20+32], X21
	122 Move X0, [X23]
	123 Compare X0, 0
	124 JumpIfEqual {131}
	125 Move X8, [X20]
	126 Move X1, [X8+64]
	127 Call 0x1C17E00
	128 Compare X0, 0
	129 JumpIfEqual {1026}
	130 Move W8, [X20+24]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move X8, [X23]
	133 Move X24, 0xCEA000
	134 Move X24, [X24+2904]
	135 Add X1, X31, 60
	136 Move [X20+40], X8
	137 Move W8, [X19+16]
	138 Move X0, [X24]
	139 Move [X31+60], W8
	140 Call 0x1C17E04
	141 Move X21, X0
	142 Compare X0, 0
	143 JumpIfEqual {150}
	144 Move X8, [X20]
	145 Move X0, X21
	146 Move X1, [X8+64]
	147 Call 0x1C17E00
	148 Compare X0, 0
	149 JumpIfEqual {1026}
	150 Move W8, [X20+24]
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move X23, 0xCEA000
	153 Move X23, [X23+2104]
	154 Move [X20+48], X21
	155 Move X0, [X23]
	156 Compare X0, 0
	157 JumpIfEqual {164}
	158 Move X8, [X20]
	159 Move X1, [X8+64]
	160 Call 0x1C17E00
	161 Compare X0, 0
	162 JumpIfEqual {1026}
	163 Move W8, [X20+24]
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Move X8, [X23]
	166 Move X0, X20
	167 Move X1, X31
	168 Move [X20+56], X8
	169 Call String.Concat, X0
	170 Move X8, [X22]
	171 Move X21, X0
	172 Move W1, 4
	173 Move X0, X8
	174 Call 0x1C17D6C
	175 Compare X0, 0
	176 JumpIfEqual {1029}
	177 Move X20, X0
	178 Compare X21, 0
	179 JumpIfEqual {186}
	180 Move X8, [X20]
	181 Move X0, X21
	182 Move X1, [X8+64]
	183 Call 0x1C17E00
	184 Compare X0, 0
	185 JumpIfEqual {1026}
	186 Move W8, [X20+24]
	187 Compare W8, 0
	188 JumpIfEqual {1025}
	189 Move X25, 0xD25000
	190 Move X25, [X25+304]
	191 Move [X20+32], X21
	192 Move X0, [X25]
	193 Compare X0, 0
	194 JumpIfEqual {201}
	195 Move X8, [X20]
	196 Move X1, [X8+64]
	197 Call 0x1C17E00
	198 Compare X0, 0
	199 JumpIfEqual {1026}
	200 Move W8, [X20+24]
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Move X8, [X25]
	203 Add X1, X31, 56
	204 Move [X20+40], X8
	205 Move W8, [X19+17]
	206 Move X0, [X24]
	207 Move [X31+56], W8
	208 Call 0x1C17E04
	209 Move X21, X0
	210 Compare X0, 0
	211 JumpIfEqual {218}
	212 Move X8, [X20]
	213 Move X0, X21
	214 Move X1, [X8+64]
	215 Call 0x1C17E00
	216 Compare X0, 0
	217 JumpIfEqual {1026}
	218 Move W8, [X20+24]
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Move [X20+48], X21
	221 Move X0, [X23]
	222 Compare X0, 0
	223 JumpIfEqual {230}
	224 Move X8, [X20]
	225 Move X1, [X8+64]
	226 Call 0x1C17E00
	227 Compare X0, 0
	228 JumpIfEqual {1026}
	229 Move W8, [X20+24]
	230 NotImplemented "Instruction CMP not yet implemented."
	231 Move X8, [X23]
	232 Move X0, X20
	233 Move X1, X31
	234 Move [X20+56], X8
	235 Call String.Concat, X0
	236 Move X8, [X22]
	237 Move X21, X0
	238 Move W1, 4
	239 Move X0, X8
	240 Call 0x1C17D6C
	241 Compare X0, 0
	242 JumpIfEqual {1029}
	243 Move X20, X0
	244 Compare X21, 0
	245 JumpIfEqual {252}
	246 Move X8, [X20]
	247 Move X0, X21
	248 Move X1, [X8+64]
	249 Call 0x1C17E00
	250 Compare X0, 0
	251 JumpIfEqual {1026}
	252 Move W8, [X20+24]
	253 Compare W8, 0
	254 JumpIfEqual {1025}
	255 Move X24, 0xD25000
	256 Move X24, [X24+296]
	257 Move [X20+32], X21
	258 Move X0, [X24]
	259 Compare X0, 0
	260 JumpIfEqual {267}
	261 Move X8, [X20]
	262 Move X1, [X8+64]
	263 Call 0x1C17E00
	264 Compare X0, 0
	265 JumpIfEqual {1026}
	266 Move W8, [X20+24]
	267 NotImplemented "Instruction CMP not yet implemented."
	268 Move X8, [X24]
	269 Move X24, 0xCEA000
	270 Move X24, [X24+1880]
	271 Add X1, X31, 52
	272 Move [X20+40], X8
	273 Move W8, [X19+20]
	274 Move X0, [X24]
	275 Move [X31+52], W8
	276 Call 0x1C17E04
	277 Move X21, X0
	278 Compare X0, 0
	279 JumpIfEqual {286}
	280 Move X8, [X20]
	281 Move X0, X21
	282 Move X1, [X8+64]
	283 Call 0x1C17E00
	284 Compare X0, 0
	285 JumpIfEqual {1026}
	286 Move W8, [X20+24]
	287 NotImplemented "Instruction CMP not yet implemented."
	288 Move [X20+48], X21
	289 Move X0, [X23]
	290 Compare X0, 0
	291 JumpIfEqual {298}
	292 Move X8, [X20]
	293 Move X1, [X8+64]
	294 Call 0x1C17E00
	295 Compare X0, 0
	296 JumpIfEqual {1026}
	297 Move W8, [X20+24]
	298 NotImplemented "Instruction CMP not yet implemented."
	299 Move X8, [X23]
	300 Move X21, 0xD24000
	301 Move X25, 0xD24000
	302 Move X21, [X21+3552]
	303 Move X25, [X25+3280]
	304 Move X0, X20
	305 Move X1, X31
	306 Move [X20+56], X8
	307 Call String.Concat, X0
	308 Move X2, [X19+24]
	309 Move X1, [X21]
	310 Move X3, [X23]
	311 Move X4, X31
	312 Call String.Concat, X0, X1, X2, X3
	313 Move X2, [X19+32]
	314 Move X1, [X25]
	315 Move X3, [X23]
	316 Move X4, X31
	317 Call String.Concat, X0, X1, X2, X3
	318 Move X8, [X22]
	319 Move X21, X0
	320 Move W1, 4
	321 Move X0, X8
	322 Call 0x1C17D6C
	323 Compare X0, 0
	324 JumpIfEqual {1029}
	325 Move X20, X0
	326 Compare X21, 0
	327 JumpIfEqual {334}
	328 Move X8, [X20]
	329 Move X0, X21
	330 Move X1, [X8+64]
	331 Call 0x1C17E00
	332 Compare X0, 0
	333 JumpIfEqual {1026}
	334 Move W8, [X20+24]
	335 Compare W8, 0
	336 JumpIfEqual {1025}
	337 Move X25, 0xD25000
	338 Move X25, [X25+224]
	339 Move [X20+32], X21
	340 Move X0, [X25]
	341 Compare X0, 0
	342 JumpIfEqual {349}
	343 Move X8, [X20]
	344 Move X1, [X8+64]
	345 Call 0x1C17E00
	346 Compare X0, 0
	347 JumpIfEqual {1026}
	348 Move W8, [X20+24]
	349 NotImplemented "Instruction CMP not yet implemented."
	350 Move X8, [X25]
	351 Add X1, X31, 48
	352 Move [X20+40], X8
	353 Move W8, [X19+40]
	354 Move X0, [X24]
	355 Move [X31+48], W8
	356 Call 0x1C17E04
	357 Move X21, X0
	358 Compare X0, 0
	359 JumpIfEqual {366}
	360 Move X8, [X20]
	361 Move X0, X21
	362 Move X1, [X8+64]
	363 Call 0x1C17E00
	364 Compare X0, 0
	365 JumpIfEqual {1026}
	366 Move W8, [X20+24]
	367 NotImplemented "Instruction CMP not yet implemented."
	368 Move [X20+48], X21
	369 Move X0, [X23]
	370 Compare X0, 0
	371 JumpIfEqual {378}
	372 Move X8, [X20]
	373 Move X1, [X8+64]
	374 Call 0x1C17E00
	375 Compare X0, 0
	376 JumpIfEqual {1026}
	377 Move W8, [X20+24]
	378 NotImplemented "Instruction CMP not yet implemented."
	379 Move X8, [X23]
	380 Move X0, X20
	381 Move X1, X31
	382 Move [X20+56], X8
	383 Call String.Concat, X0
	384 Move X8, [X22]
	385 Move X21, X0
	386 Move W1, 4
	387 Move X0, X8
	388 Call 0x1C17D6C
	389 Compare X0, 0
	390 JumpIfEqual {1029}
	391 Move X20, X0
	392 Compare X21, 0
	393 JumpIfEqual {400}
	394 Move X8, [X20]
	395 Move X0, X21
	396 Move X1, [X8+64]
	397 Call 0x1C17E00
	398 Compare X0, 0
	399 JumpIfEqual {1026}
	400 Move W8, [X20+24]
	401 Compare W8, 0
	402 JumpIfEqual {1025}
	403 Move X25, 0xD25000
	404 Move X25, [X25+264]
	405 Move [X20+32], X21
	406 Move X0, [X25]
	407 Compare X0, 0
	408 JumpIfEqual {415}
	409 Move X8, [X20]
	410 Move X1, [X8+64]
	411 Call 0x1C17E00
	412 Compare X0, 0
	413 JumpIfEqual {1026}
	414 Move W8, [X20+24]
	415 NotImplemented "Instruction CMP not yet implemented."
	416 Move X8, [X25]
	417 Add X1, X31, 44
	418 Move [X20+40], X8
	419 Move W8, [X19+44]
	420 Move X0, [X24]
	421 Move [X31+44], W8
	422 Call 0x1C17E04
	423 Move X21, X0
	424 Compare X0, 0
	425 JumpIfEqual {432}
	426 Move X8, [X20]
	427 Move X0, X21
	428 Move X1, [X8+64]
	429 Call 0x1C17E00
	430 Compare X0, 0
	431 JumpIfEqual {1026}
	432 Move W8, [X20+24]
	433 NotImplemented "Instruction CMP not yet implemented."
	434 Move [X20+48], X21
	435 Move X0, [X23]
	436 Compare X0, 0
	437 JumpIfEqual {444}
	438 Move X8, [X20]
	439 Move X1, [X8+64]
	440 Call 0x1C17E00
	441 Compare X0, 0
	442 JumpIfEqual {1026}
	443 Move W8, [X20+24]
	444 NotImplemented "Instruction CMP not yet implemented."
	445 Move X8, [X23]
	446 Move X21, 0xD24000
	447 Move X25, 0xD23000
	448 Move X21, [X21+272]
	449 Move X25, [X25+3464]
	450 Move X0, X20
	451 Move X1, X31
	452 Move [X20+56], X8
	453 Call String.Concat, X0
	454 Move X2, [X19+48]
	455 Move X1, [X21]
	456 Move X3, [X23]
	457 Move X4, X31
	458 Call String.Concat, X0, X1, X2, X3
	459 Move X2, [X19+56]
	460 Move X1, [X25]
	461 Move X3, [X23]
	462 Move X4, X31
	463 Call String.Concat, X0, X1, X2, X3
	464 Move X8, [X22]
	465 Move X21, X0
	466 Move W1, 4
	467 Move X0, X8
	468 Call 0x1C17D6C
	469 Compare X0, 0
	470 JumpIfEqual {1029}
	471 Move X20, X0
	472 Compare X21, 0
	473 JumpIfEqual {480}
	474 Move X8, [X20]
	475 Move X0, X21
	476 Move X1, [X8+64]
	477 Call 0x1C17E00
	478 Compare X0, 0
	479 JumpIfEqual {1026}
	480 Move W8, [X20+24]
	481 Compare W8, 0
	482 JumpIfEqual {1025}
	483 Move X25, 0xD23000
	484 Move X25, [X25+3936]
	485 Move [X20+32], X21
	486 Move X0, [X25]
	487 Compare X0, 0
	488 JumpIfEqual {495}
	489 Move X8, [X20]
	490 Move X1, [X8+64]
	491 Call 0x1C17E00
	492 Compare X0, 0
	493 JumpIfEqual {1026}
	494 Move W8, [X20+24]
	495 NotImplemented "Instruction CMP not yet implemented."
	496 Move X8, [X25]
	497 Add X1, X31, 40
	498 Move [X20+40], X8
	499 Move W8, [X19+64]
	500 Move X0, [X24]
	501 Move [X31+40], W8
	502 Call 0x1C17E04
	503 Move X21, X0
	504 Compare X0, 0
	505 JumpIfEqual {512}
	506 Move X8, [X20]
	507 Move X0, X21
	508 Move X1, [X8+64]
	509 Call 0x1C17E00
	510 Compare X0, 0
	511 JumpIfEqual {1026}
	512 Move W8, [X20+24]
	513 NotImplemented "Instruction CMP not yet implemented."
	514 Move [X20+48], X21
	515 Move X0, [X23]
	516 Compare X0, 0
	517 JumpIfEqual {524}
	518 Move X8, [X20]
	519 Move X1, [X8+64]
	520 Call 0x1C17E00
	521 Compare X0, 0
	522 JumpIfEqual {1026}
	523 Move W8, [X20+24]
	524 NotImplemented "Instruction CMP not yet implemented."
	525 Move X8, [X23]
	526 Move X0, X20
	527 Move X1, X31
	528 Move [X20+56], X8
	529 Call String.Concat, X0
	530 Move X8, [X22]
	531 Move X21, X0
	532 Move W1, 4
	533 Move X0, X8
	534 Call 0x1C17D6C
	535 Compare X0, 0
	536 JumpIfEqual {1029}
	537 Move X20, X0
	538 Compare X21, 0
	539 JumpIfEqual {546}
	540 Move X8, [X20]
	541 Move X0, X21
	542 Move X1, [X8+64]
	543 Call 0x1C17E00
	544 Compare X0, 0
	545 JumpIfEqual {1026}
	546 Move W8, [X20+24]
	547 Compare W8, 0
	548 JumpIfEqual {1025}
	549 Move X25, 0xD24000
	550 Move X25, [X25+232]
	551 Move [X20+32], X21
	552 Move X0, [X25]
	553 Compare X0, 0
	554 JumpIfEqual {561}
	555 Move X8, [X20]
	556 Move X1, [X8+64]
	557 Call 0x1C17E00
	558 Compare X0, 0
	559 JumpIfEqual {1026}
	560 Move W8, [X20+24]
	561 NotImplemented "Instruction CMP not yet implemented."
	562 Move X8, [X25]
	563 Add X1, X31, 36
	564 Move [X20+40], X8
	565 Move W8, [X19+68]
	566 Move X0, [X24]
	567 Move [X31+36], W8
	568 Call 0x1C17E04
	569 Move X21, X0
	570 Compare X0, 0
	571 JumpIfEqual {578}
	572 Move X8, [X20]
	573 Move X0, X21
	574 Move X1, [X8+64]
	575 Call 0x1C17E00
	576 Compare X0, 0
	577 JumpIfEqual {1026}
	578 Move W8, [X20+24]
	579 NotImplemented "Instruction CMP not yet implemented."
	580 Move [X20+48], X21
	581 Move X0, [X23]
	582 Compare X0, 0
	583 JumpIfEqual {590}
	584 Move X8, [X20]
	585 Move X1, [X8+64]
	586 Call 0x1C17E00
	587 Compare X0, 0
	588 JumpIfEqual {1026}
	589 Move W8, [X20+24]
	590 NotImplemented "Instruction CMP not yet implemented."
	591 Move X8, [X23]
	592 Move X21, 0xD23000
	593 Move X21, [X21+3328]
	594 Move X0, X20
	595 Move X1, X31
	596 Move [X20+56], X8
	597 Call String.Concat, X0
	598 Move X2, [X19+72]
	599 Move X1, [X21]
	600 Move X3, [X23]
	601 Move X4, X31
	602 Call String.Concat, X0, X1, X2, X3
	603 Move X8, [X22]
	604 Move X21, X0
	605 Move W1, 4
	606 Move X0, X8
	607 Call 0x1C17D6C
	608 Compare X0, 0
	609 JumpIfEqual {1029}
	610 Move X20, X0
	611 Compare X21, 0
	612 JumpIfEqual {619}
	613 Move X8, [X20]
	614 Move X0, X21
	615 Move X1, [X8+64]
	616 Call 0x1C17E00
	617 Compare X0, 0
	618 JumpIfEqual {1026}
	619 Move W8, [X20+24]
	620 Compare W8, 0
	621 JumpIfEqual {1025}
	622 Move X25, 0xD24000
	623 Move X25, [X25+240]
	624 Move [X20+32], X21
	625 Move X0, [X25]
	626 Compare X0, 0
	627 JumpIfEqual {634}
	628 Move X8, [X20]
	629 Move X1, [X8+64]
	630 Call 0x1C17E00
	631 Compare X0, 0
	632 JumpIfEqual {1026}
	633 Move W8, [X20+24]
	634 NotImplemented "Instruction CMP not yet implemented."
	635 Move X8, [X25]
	636 Add X1, X31, 32
	637 Move [X20+40], X8
	638 Move W8, [X19+80]
	639 Move X0, [X24]
	640 Move [X31+32], W8
	641 Call 0x1C17E04
	642 Move X21, X0
	643 Compare X0, 0
	644 JumpIfEqual {651}
	645 Move X8, [X20]
	646 Move X0, X21
	647 Move X1, [X8+64]
	648 Call 0x1C17E00
	649 Compare X0, 0
	650 JumpIfEqual {1026}
	651 Move W8, [X20+24]
	652 NotImplemented "Instruction CMP not yet implemented."
	653 Move [X20+48], X21
	654 Move X0, [X23]
	655 Compare X0, 0
	656 JumpIfEqual {663}
	657 Move X8, [X20]
	658 Move X1, [X8+64]
	659 Call 0x1C17E00
	660 Compare X0, 0
	661 JumpIfEqual {1026}
	662 Move W8, [X20+24]
	663 NotImplemented "Instruction CMP not yet implemented."
	664 Move X8, [X23]
	665 Move X0, X20
	666 Move X1, X31
	667 Move [X20+56], X8
	668 Call String.Concat, X0
	669 Move X8, [X22]
	670 Move X21, X0
	671 Move W1, 4
	672 Move X0, X8
	673 Call 0x1C17D6C
	674 Compare X0, 0
	675 JumpIfEqual {1029}
	676 Move X20, X0
	677 Compare X21, 0
	678 JumpIfEqual {685}
	679 Move X8, [X20]
	680 Move X0, X21
	681 Move X1, [X8+64]
	682 Call 0x1C17E00
	683 Compare X0, 0
	684 JumpIfEqual {1026}
	685 Move W8, [X20+24]
	686 Compare W8, 0
	687 JumpIfEqual {1025}
	688 Move X25, 0xD23000
	689 Move X25, [X25+3360]
	690 Move [X20+32], X21
	691 Move X0, [X25]
	692 Compare X0, 0
	693 JumpIfEqual {700}
	694 Move X8, [X20]
	695 Move X1, [X8+64]
	696 Call 0x1C17E00
	697 Compare X0, 0
	698 JumpIfEqual {1026}
	699 Move W8, [X20+24]
	700 NotImplemented "Instruction CMP not yet implemented."
	701 Move X8, [X25]
	702 Move X9, 0xD23000
	703 Move X9, [X9+3336]
	704 Add X1, X31, 28
	705 Move [X20+40], X8
	706 Move W8, [X19+84]
	707 Move X0, [X9]
	708 Move [X31+28], W8
	709 Call 0x1C17E04
	710 Move X21, X0
	711 Compare X0, 0
	712 JumpIfEqual {719}
	713 Move X8, [X20]
	714 Move X0, X21
	715 Move X1, [X8+64]
	716 Call 0x1C17E00
	717 Compare X0, 0
	718 JumpIfEqual {1026}
	719 Move W8, [X20+24]
	720 NotImplemented "Instruction CMP not yet implemented."
	721 Move [X20+48], X21
	722 Move X0, [X23]
	723 Compare X0, 0
	724 JumpIfEqual {731}
	725 Move X8, [X20]
	726 Move X1, [X8+64]
	727 Call 0x1C17E00
	728 Compare X0, 0
	729 JumpIfEqual {1026}
	730 Move W8, [X20+24]
	731 NotImplemented "Instruction CMP not yet implemented."
	732 Move X8, [X23]
	733 Move X0, X20
	734 Move X1, X31
	735 Move [X20+56], X8
	736 Call String.Concat, X0
	737 Move X8, [X22]
	738 Move X21, X0
	739 Move W1, 4
	740 Move X0, X8
	741 Call 0x1C17D6C
	742 Compare X0, 0
	743 JumpIfEqual {1029}
	744 Move X20, X0
	745 Compare X21, 0
	746 JumpIfEqual {753}
	747 Move X8, [X20]
	748 Move X0, X21
	749 Move X1, [X8+64]
	750 Call 0x1C17E00
	751 Compare X0, 0
	752 JumpIfEqual {1026}
	753 Move W8, [X20+24]
	754 Compare W8, 0
	755 JumpIfEqual {1025}
	756 Move X25, 0xD24000
	757 Move X25, [X25+248]
	758 Move [X20+32], X21
	759 Move X0, [X25]
	760 Compare X0, 0
	761 JumpIfEqual {768}
	762 Move X8, [X20]
	763 Move X1, [X8+64]
	764 Call 0x1C17E00
	765 Compare X0, 0
	766 JumpIfEqual {1026}
	767 Move W8, [X20+24]
	768 NotImplemented "Instruction CMP not yet implemented."
	769 Move X8, [X25]
	770 Add X1, X31, 24
	771 Move [X20+40], X8
	772 Move W8, [X19+88]
	773 Move X0, [X24]
	774 Move [X31+24], W8
	775 Call 0x1C17E04
	776 Move X21, X0
	777 Compare X0, 0
	778 JumpIfEqual {785}
	779 Move X8, [X20]
	780 Move X0, X21
	781 Move X1, [X8+64]
	782 Call 0x1C17E00
	783 Compare X0, 0
	784 JumpIfEqual {1026}
	785 Move W8, [X20+24]
	786 NotImplemented "Instruction CMP not yet implemented."
	787 Move [X20+48], X21
	788 Move X0, [X23]
	789 Compare X0, 0
	790 JumpIfEqual {797}
	791 Move X8, [X20]
	792 Move X1, [X8+64]
	793 Call 0x1C17E00
	794 Compare X0, 0
	795 JumpIfEqual {1026}
	796 Move W8, [X20+24]
	797 NotImplemented "Instruction CMP not yet implemented."
	798 Move X8, [X23]
	799 Move X0, X20
	800 Move X1, X31
	801 Move [X20+56], X8
	802 Call String.Concat, X0
	803 Move X8, [X22]
	804 Move X21, X0
	805 Move W1, 4
	806 Move X0, X8
	807 Call 0x1C17D6C
	808 Compare X0, 0
	809 JumpIfEqual {1029}
	810 Move X20, X0
	811 Compare X21, 0
	812 JumpIfEqual {819}
	813 Move X8, [X20]
	814 Move X0, X21
	815 Move X1, [X8+64]
	816 Call 0x1C17E00
	817 Compare X0, 0
	818 JumpIfEqual {1026}
	819 Move W8, [X20+24]
	820 Compare W8, 0
	821 JumpIfEqual {1025}
	822 Move X25, 0xD23000
	823 Move X25, [X25+4024]
	824 Move [X20+32], X21
	825 Move X0, [X25]
	826 Compare X0, 0
	827 JumpIfEqual {834}
	828 Move X8, [X20]
	829 Move X1, [X8+64]
	830 Call 0x1C17E00
	831 Compare X0, 0
	832 JumpIfEqual {1026}
	833 Move W8, [X20+24]
	834 NotImplemented "Instruction CMP not yet implemented."
	835 Move X8, [X25]
	836 Add X1, X31, 20
	837 Move [X20+40], X8
	838 Move W8, [X19+92]
	839 Move X0, [X24]
	840 Move [X31+20], W8
	841 Call 0x1C17E04
	842 Move X21, X0
	843 Compare X0, 0
	844 JumpIfEqual {851}
	845 Move X8, [X20]
	846 Move X0, X21
	847 Move X1, [X8+64]
	848 Call 0x1C17E00
	849 Compare X0, 0
	850 JumpIfEqual {1026}
	851 Move W8, [X20+24]
	852 NotImplemented "Instruction CMP not yet implemented."
	853 Move [X20+48], X21
	854 Move X0, [X23]
	855 Compare X0, 0
	856 JumpIfEqual {863}
	857 Move X8, [X20]
	858 Move X1, [X8+64]
	859 Call 0x1C17E00
	860 Compare X0, 0
	861 JumpIfEqual {1026}
	862 Move W8, [X20+24]
	863 NotImplemented "Instruction CMP not yet implemented."
	864 Move X8, [X23]
	865 Move X0, X20
	866 Move X1, X31
	867 Move [X20+56], X8
	868 Call String.Concat, X0
	869 Move X8, [X22]
	870 Move X21, X0
	871 Move W1, 4
	872 Move X0, X8
	873 Call 0x1C17D6C
	874 Compare X0, 0
	875 JumpIfEqual {1029}
	876 Move X20, X0
	877 Compare X21, 0
	878 JumpIfEqual {885}
	879 Move X8, [X20]
	880 Move X0, X21
	881 Move X1, [X8+64]
	882 Call 0x1C17E00
	883 Compare X0, 0
	884 JumpIfEqual {1026}
	885 Move W8, [X20+24]
	886 Compare W8, 0
	887 JumpIfEqual {1025}
	888 Move X25, 0xD24000
	889 Move X25, [X25+288]
	890 Move [X20+32], X21
	891 Move X0, [X25]
	892 Compare X0, 0
	893 JumpIfEqual {900}
	894 Move X8, [X20]
	895 Move X1, [X8+64]
	896 Call 0x1C17E00
	897 Compare X0, 0
	898 JumpIfEqual {1026}
	899 Move W8, [X20+24]
	900 NotImplemented "Instruction CMP not yet implemented."
	901 Move X8, [X25]
	902 Add X1, X31, 16
	903 Move [X20+40], X8
	904 Move W8, [X19+96]
	905 Move X0, [X24]
	906 Move [X31+16], W8
	907 Call 0x1C17E04
	908 Move X21, X0
	909 Compare X0, 0
	910 JumpIfEqual {917}
	911 Move X8, [X20]
	912 Move X0, X21
	913 Move X1, [X8+64]
	914 Call 0x1C17E00
	915 Compare X0, 0
	916 JumpIfEqual {1026}
	917 Move W8, [X20+24]
	918 NotImplemented "Instruction CMP not yet implemented."
	919 Move [X20+48], X21
	920 Move X0, [X23]
	921 Compare X0, 0
	922 JumpIfEqual {929}
	923 Move X8, [X20]
	924 Move X1, [X8+64]
	925 Call 0x1C17E00
	926 Compare X0, 0
	927 JumpIfEqual {1026}
	928 Move W8, [X20+24]
	929 NotImplemented "Instruction CMP not yet implemented."
	930 Move X8, [X23]
	931 Move X0, X20
	932 Move X1, X31
	933 Move [X20+56], X8
	934 Call String.Concat, X0
	935 Move X8, [X22]
	936 Move X21, X0
	937 Move W1, 4
	938 Move X0, X8
	939 Call 0x1C17D6C
	940 Compare X0, 0
	941 JumpIfEqual {1029}
	942 Move X20, X0
	943 Compare X21, 0
	944 JumpIfEqual {951}
	945 Move X8, [X20]
	946 Move X0, X21
	947 Move X1, [X8+64]
	948 Call 0x1C17E00
	949 Compare X0, 0
	950 JumpIfEqual {1026}
	951 Move W8, [X20+24]
	952 Compare W8, 0
	953 JumpIfEqual {1025}
	954 Move X22, 0xD24000
	955 Move X22, [X22+280]
	956 Move [X20+32], X21
	957 Move X0, [X22]
	958 Compare X0, 0
	959 JumpIfEqual {966}
	960 Move X8, [X20]
	961 Move X1, [X8+64]
	962 Call 0x1C17E00
	963 Compare X0, 0
	964 JumpIfEqual {1026}
	965 Move W8, [X20+24]
	966 NotImplemented "Instruction CMP not yet implemented."
	967 Move X8, [X22]
	968 Add X1, X31, 12
	969 Move [X20+40], X8
	970 Move W8, [X19+100]
	971 Move X0, [X24]
	972 Move [X31+12], W8
	973 Call 0x1C17E04
	974 Move X21, X0
	975 Compare X0, 0
	976 JumpIfEqual {983}
	977 Move X8, [X20]
	978 Move X0, X21
	979 Move X1, [X8+64]
	980 Call 0x1C17E00
	981 Compare X0, 0
	982 JumpIfEqual {1026}
	983 Move W8, [X20+24]
	984 NotImplemented "Instruction CMP not yet implemented."
	985 Move [X20+48], X21
	986 Move X0, [X23]
	987 Compare X0, 0
	988 JumpIfEqual {995}
	989 Move X8, [X20]
	990 Move X1, [X8+64]
	991 Call 0x1C17E00
	992 Compare X0, 0
	993 JumpIfEqual {1026}
	994 Move W8, [X20+24]
	995 NotImplemented "Instruction CMP not yet implemented."
	996 Move X8, [X23]
	997 Move X21, 0xD24000
	998 Move X22, 0xD24000
	999 Move X21, [X21+312]
	1000 Move X22, [X22+256]
	1001 Move X0, X20
	1002 Move X1, X31
	1003 Move [X20+56], X8
	1004 Call String.Concat, X0
	1005 Move X2, [X19+104]
	1006 Move X1, [X21]
	1007 Move X3, [X23]
	1008 Move X4, X31
	1009 Call String.Concat, X0, X1, X2, X3
	1010 Move X2, [X19+112]
	1011 Move X1, [X22]
	1012 Move X3, [X23]
	1013 Move X4, X31
	1014 Call String.Concat, X0, X1, X2, X3
	1015 Move X20, [X31+112]
	1016 Move X19, [X31+120]
	1017 Move X22, [X31+96]
	1018 Move X21, [X31+104]
	1019 Move X24, [X31+80]
	1020 Move X23, [X31+88]
	1021 Move X30, [X31+64]
	1022 Move X25, [X31+72]
	1023 Add X31, X31, 128
	1024 Return X0
	1025 Call 0x1C17F28
	1026 Call 0x1C17F44
	1027 Move X1, X31
	1028 Call 0x1C17DEC
	1029 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0340B834 RET
	0x0340B838 LDR X0, [X0 + 0x18]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

