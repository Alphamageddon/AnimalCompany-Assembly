Type: Nakama.ApiNotification

Method: System.Int32 get_Code()

Disassembly:
	0x03408A94 LDRSW X9, [X10]
	0x03408A98 ADD X8, X8, X9, 0x4, LSL

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_Code(System.Int32 value)

Disassembly:
	0x03408A9C ADD X0, X8, 0x138
	0x03408AA0 LDP X8, X1, [X0]

ISIL:
	001 Move [X0+16], W1
	002 Return 

Method: System.String get_Content()

Disassembly:
	0x03408AA4 MOV X0, X20
	0x03408AA8 BLR X8

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_Content(System.String value)

Disassembly:
	0x03408AAC CBNZ X22, 0x3408B20
	0x03408AB0 ADRP X8, 0xD25000

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.String get_CreateTime()

Disassembly:
	0x03408AB4 LDR X8, [X8 + 0xD80]
	0x03408AB8 MOV X1, X21

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_CreateTime(System.String value)

Disassembly:
	0x03408ABC MOV X3, X31
	0x03408AC0 LDR X0, [X8]

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String get_Id()

Disassembly:
	0x03408AC4 ADRP X8, 0xCEB000
	0x03408AC8 LDR X8, [X8 + 0x848]

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_Id(System.String value)

Disassembly:
	0x03408ACC LDR X2, [X8]
	0x03408AD0 BL 0x32274B8

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.Boolean get_Persistent()

Disassembly:
	0x03408AD4 MOV X1, X0
	0x03408AD8 LDR X0, [X31 + 0x8]

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_Persistent(System.Boolean value)

Disassembly:
	0x03408ADC LDP X20, X19, [X31 + 0x60]
	0x03408AE0 LDP X22, X21, [X31 + 0x50]
	0x03408AE4 LDP X24, X23, [X31 + 0x40]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+48], W8
	003 Return 

Method: System.String get_SenderId()

Disassembly:
	0x03408AE8 LDP X26, X25, [X31 + 0x30]
	0x03408AEC LDP X28, X27, [X31 + 0x20]

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_SenderId(System.String value)

Disassembly:
	0x03408AF0 LDP X29, X30, [X31 + 0x10]
	0x03408AF4 MOV X2, X31

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.String get_Subject()

Disassembly:
	0x03408AF8 ADD X31, X31, 0x70
	0x03408AFC B 0x321B938

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_Subject(System.String value)

Disassembly:
	0x03408B00 BL 0x1C16F20
	0x03408B04 BL 0x1C16F28

ISIL:
	001 Move [X0+64], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x03408B08 BL 0x1C16F20
	0x03408B0C BL 0x1C16F28
	0x03408B10 BL 0x1C16F28
	0x03408B14 BL 0x1C16F28
	0x03408B18 BL 0x1C16F28
	0x03408B1C BL 0x1C16F20
	0x03408B20 MOV X0, X22
	0x03408B24 BL 0x1C16F18
	0x03408B28 B 0x3408B54
	0x03408B2C B 0x3408B54
	0x03408B30 B 0x3408B54
	0x03408B34 B 0x3408B54
	0x03408B38 B 0x3408B54
	0x03408B3C B 0x3408B54
	0x03408B40 B 0x3408B54
	0x03408B44 MOV X21, X27
	0x03408B48 B 0x3408B54
	0x03408B4C B 0x3408B54
	0x03408B50 B 0x3408B54
	0x03408B54 CMP W1, 0x1
	0x03408B58 B.NE 0x3408B6C
	0x03408B5C BL 0x3EB1AD0
	0x03408B60 LDR X22, [X0]
	0x03408B64 BL 0x3EB1AE0
	0x03408B68 B 0x3408A48
	0x03408B6C MOV X19, X0
	0x03408B70 MOV X22, X31
	0x03408B74 B 0x3408B7C
	0x03408B78 MOV X19, X0
	0x03408B7C CBZ X20, 0x3408BE0
	0x03408B80 LDR X8, [X20]
	0x03408B84 ADRP X10, 0xCEB000
	0x03408B88 LDRH W9, [X8 + 0x12E]
	0x03408B8C LDR X10, [X10 + 0xE00]
	0x03408B90 LDR X1, [X10]
	0x03408B94 CBZ X9, 0x3408BB8
	0x03408B98 LDR X10, [X8 + 0xB0]
	0x03408B9C ADD X10, X10, 0x8
	0x03408BA0 LDUR X11, [X10 - 0x8]
	0x03408BA4 CMP X11, X1
	0x03408BA8 B.EQ 0x3408BC8
	0x03408BAC SUBS X9, X9, 0x1
	0x03408BB0 ADD X10, X10, 0x10
	0x03408BB4 B.NE 0x3408BA0
	0x03408BB8 MOV X0, X20
	0x03408BBC MOV W2, W31
	0x03408BC0 BL 0x1C5C788
	0x03408BC4 B 0x3408BD4
	0x03408BC8 LDRSW X9, [X10]
	0x03408BCC ADD X8, X8, X9, 0x4, LSL
	0x03408BD0 ADD X0, X8, 0x138
	0x03408BD4 LDP X8, X1, [X0]
	0x03408BD8 MOV X0, X20
	0x03408BDC BLR X8
	0x03408BE0 CBNZ X22, 0x3408BEC
	0x03408BE4 MOV X0, X19
	0x03408BE8 BL 0x1D2C690
	0x03408BEC MOV X0, X22
	0x03408BF0 BL 0x1C16F18
	0x03408BF4 BL 0x1990590
	0x03408BF8 MOV X1, X31
	0x03408BFC B 0x33BDD8C
	0x03408C00 LDR X0, [X0 + 0x10]
	0x03408C04 RET
	0x03408C08 STR X1, [X0 + 0x10]
	0x03408C0C RET
	0x03408C10 LDR X0, [X0 + 0x18]
	0x03408C14 RET
	0x03408C18 STR X1, [X0 + 0x18]
	0x03408C1C RET
	0x03408C20 LDR X0, [X0 + 0x20]
	0x03408C24 RET
	0x03408C28 STR X1, [X0 + 0x20]
	0x03408C2C RET
	0x03408C30 LDR W0, [X0 + 0x28]
	0x03408C34 RET
	0x03408C38 STR W1, [X0 + 0x28]
	0x03408C3C RET
	0x03408C40 LDR W0, [X0 + 0x2C]
	0x03408C44 RET
	0x03408C48 STR W1, [X0 + 0x2C]
	0x03408C4C RET
	0x03408C50 LDR X0, [X0 + 0x30]
	0x03408C54 RET
	0x03408C58 STR X1, [X0 + 0x30]
	0x03408C5C RET
	0x03408C60 LDR X0, [X0 + 0x38]
	0x03408C64 RET
	0x03408C68 STR X1, [X0 + 0x38]
	0x03408C6C RET
	0x03408C70 LDR X0, [X0 + 0x40]
	0x03408C74 RET
	0x03408C78 STR X1, [X0 + 0x40]
	0x03408C7C RET
	0x03408C80 LDR X0, [X0 + 0x48]
	0x03408C84 RET
	0x03408C88 STR X1, [X0 + 0x48]
	0x03408C8C RET
	0x03408C90 STR X30, [X31 - 0x50]!
	0x03408C94 STP X26, X25, [X31 + 0x10]
	0x03408C98 STP X24, X23, [X31 + 0x20]
	0x03408C9C STP X22, X21, [X31 + 0x30]
	0x03408CA0 STP X20, X19, [X31 + 0x40]
	0x03408CA4 ADRP X25, 0xFD5000
	0x03408CA8 ADRP X26, 0xCEB000
	0x03408CAC ADRP X24, 0xD25000
	0x03408CB0 ADRP X22, 0xCEB000
	0x03408CB4 ADRP X21, 0xD25000
	0x03408CB8 ADRP X20, 0xD25000
	0x03408CBC ADRP X23, 0xCEB000
	0x03408CC0 LDR X26, [X26 + 0x988]
	0x03408CC4 LDRB W8, [X25 + 0x546]
	0x03408CC8 LDR X24, [X24 + 0xE78]
	0x03408CCC LDR X22, [X22 + 0x838]
	0x03408CD0 LDR X21, [X21 + 0xDE0]
	0x03408CD4 LDR X20, [X20 + 0xE80]
	0x03408CD8 LDR X23, [X23 + 0x9D0]
	0x03408CDC MOV X19, X0
	0x03408CE0 TBNZ X8, 0x0, 0x3408D88
	0x03408CE4 ADRP X0, 0xCEB000
	0x03408CE8 LDR X0, [X0 + 0x758]
	0x03408CEC BL 0x1C16CF4
	0x03408CF0 ADRP X0, 0xCEB000
	0x03408CF4 LDR X0, [X0 + 0x9D0]
	0x03408CF8 BL 0x1C16CF4
	0x03408CFC ADRP X0, 0xD18000
	0x03408D00 LDR X0, [X0 + 0xBB8]
	0x03408D04 BL 0x1C16CF4
	0x03408D08 ADRP X0, 0xD25000
	0x03408D0C LDR X0, [X0 + 0xE80]
	0x03408D10 BL 0x1C16CF4
	0x03408D14 ADRP X0, 0xD26000
	0x03408D18 LDR X0, [X0 + 0x70]
	0x03408D1C BL 0x1C16CF4
	0x03408D20 ADRP X0, 0xD25000
	0x03408D24 LDR X0, [X0 + 0xDE0]
	0x03408D28 BL 0x1C16CF4
	0x03408D2C ADRP X0, 0xCEB000
	0x03408D30 LDR X0, [X0 + 0x838]
	0x03408D34 BL 0x1C16CF4
	0x03408D38 ADRP X0, 0xD25000
	0x03408D3C LDR X0, [X0 + 0xDE8]
	0x03408D40 BL 0x1C16CF4
	0x03408D44 ADRP X0, 0xD26000
	0x03408D48 LDR X0, [X0 + 0x78]
	0x03408D4C BL 0x1C16CF4
	0x03408D50 ADRP X0, 0xD26000
	0x03408D54 LDR X0, [X0 + 0x30]
	0x03408D58 BL 0x1C16CF4
	0x03408D5C ADRP X0, 0xD25000
	0x03408D60 LDR X0, [X0 + 0xE88]
	0x03408D64 BL 0x1C16CF4
	0x03408D68 ADRP X0, 0xCEB000
	0x03408D6C LDR X0, [X0 + 0x988]
	0x03408D70 BL 0x1C16CF4
	0x03408D74 ADRP X0, 0xD25000
	0x03408D78 LDR X0, [X0 + 0xE78]
	0x03408D7C BL 0x1C16CF4
	0x03408D80 MOVZ W8, 0x1
	0x03408D84 STRB W8, [X25 + 0x546]
	0x03408D88 LDR X0, [X26]
	0x03408D8C LDR X2, [X19 + 0x10]
	0x03408D90 LDR X1, [X24]
	0x03408D94 LDR X3, [X22]
	0x03408D98 MOV X4, X31
	0x03408D9C BL 0x32277C4
	0x03408DA0 LDR X2, [X19 + 0x18]
	0x03408DA4 LDR X1, [X21]
	0x03408DA8 LDR X3, [X22]
	0x03408DAC MOV X4, X31
	0x03408DB0 BL 0x32277C4
	0x03408DB4 LDR X2, [X19 + 0x20]
	0x03408DB8 LDR X1, [X20]
	0x03408DBC LDR X3, [X22]
	0x03408DC0 MOV X4, X31
	0x03408DC4 BL 0x32277C4
	0x03408DC8 LDR X8, [X23]
	0x03408DCC MOV X21, X0
	0x03408DD0 MOVZ W1, 0x4
	0x03408DD4 MOV X0, X8
	0x03408DD8 BL 0x1C16D6C
	0x03408DDC CBZ X0, 0x3409040
	0x03408DE0 MOV X20, X0
	0x03408DE4 CBZ X21, 0x3408DFC
	0x03408DE8 LDR X8, [X20]
	0x03408DEC MOV X0, X21
	0x03408DF0 LDR X1, [X8 + 0x40]
	0x03408DF4 BL 0x1C16E00
	0x03408DF8 CBZ X0, 0x3409034
	0x03408DFC LDR W8, [X20 + 0x18]
	0x03408E00 CBZ W8, 0x3409030
	0x03408E04 ADRP X24, 0xD26000
	0x03408E08 LDR X24, [X24 + 0x78]
	0x03408E0C STR X21, [X20 + 0x20]
	0x03408E10 LDR X0, [X24]
	0x03408E14 CBZ X0, 0x3408E2C
	0x03408E18 LDR X8, [X20]
	0x03408E1C LDR X1, [X8 + 0x40]
	0x03408E20 BL 0x1C16E00
	0x03408E24 CBZ X0, 0x3409034
	0x03408E28 LDR W8, [X20 + 0x18]
	0x03408E2C CMP W8, 0x1
	0x03408E30 B.LS 0x3409030
	0x03408E34 LDR X8, [X24]
	0x03408E38 ADRP X24, 0xCEB000
	0x03408E3C LDR X24, [X24 + 0x758]
	0x03408E40 ADD X1, X31, 0xC
	0x03408E44 STR X8, [X20 + 0x28]
	0x03408E48 LDR W8, [X19 + 0x28]
	0x03408E4C LDR X0, [X24]
	0x03408E50 STR W8, [X31 + 0xC]
	0x03408E54 BL 0x1C16E04
	0x03408E58 MOV X21, X0
	0x03408E5C CBZ X0, 0x3408E74
	0x03408E60 LDR X8, [X20]
	0x03408E64 MOV X0, X21
	0x03408E68 LDR X1, [X8 + 0x40]
	0x03408E6C BL 0x1C16E00
	0x03408E70 CBZ X0, 0x3409034
	0x03408E74 LDR W8, [X20 + 0x18]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xFD6000
	011 Move X21, 0xCEC000
	012 Move X22, 0xCEC000
	013 Move W8, [X20+1339]
	014 Move X21, [X21+2440]
	015 Move X22, [X22+2512]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {59}
	021 Move X0, 0xCEC000
	022 Move X0, [X0+2904]
	023 Call 0x1C17CF4
	024 Move X0, 0xCEC000
	025 Move X0, [X0+1880]
	026 Call 0x1C17CF4
	027 Move X0, 0xCEC000
	028 Move X0, [X0+2512]
	029 Call 0x1C17CF4
	030 Move X0, 0xD27000
	031 Move X0, [X0+8]
	032 Call 0x1C17CF4
	033 Move X0, 0xD26000
	034 Move X0, [X0+3544]
	035 Call 0x1C17CF4
	036 Move X0, 0xD26000
	037 Move X0, [X0+3464]
	038 Call 0x1C17CF4
	039 Move X0, 0xD26000
	040 Move X0, [X0+3552]
	041 Call 0x1C17CF4
	042 Move X0, 0xCEC000
	043 Move X0, [X0+2104]
	044 Call 0x1C17CF4
	045 Move X0, 0xCEC000
	046 Move X0, [X0+2440]
	047 Call 0x1C17CF4
	048 Move X0, 0xD26000
	049 Move X0, [X0+3600]
	050 Call 0x1C17CF4
	051 Move X0, 0xD26000
	052 Move X0, [X0+3616]
	053 Call 0x1C17CF4
	054 Move X0, 0xD26000
	055 Move X0, [X0+3624]
	056 Call 0x1C17CF4
	057 Move W8, 1
	058 Move [X20+1339], W8
	059 Move X0, [X22]
	060 Move X21, [X21]
	061 Move W1, 4
	062 Call 0x1C17D6C
	063 Compare X0, 0
	064 JumpIfEqual {245}
	065 Move X20, X0
	066 Compare X21, 0
	067 JumpIfEqual {74}
	068 Move X8, [X20]
	069 Move X0, X21
	070 Move X1, [X8+64]
	071 Call 0x1C17E00
	072 Compare X0, 0
	073 JumpIfEqual {242}
	074 Move W8, [X20+24]
	075 Compare W8, 0
	076 JumpIfEqual {241}
	077 Move X23, 0xD26000
	078 Move X23, [X23+3616]
	079 Move [X20+32], X21
	080 Move X0, [X23]
	081 Compare X0, 0
	082 JumpIfEqual {89}
	083 Move X8, [X20]
	084 Move X1, [X8+64]
	085 Call 0x1C17E00
	086 Compare X0, 0
	087 JumpIfEqual {242}
	088 Move W8, [X20+24]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X8, [X23]
	091 Move X9, 0xCEC000
	092 Move X9, [X9+1880]
	093 Add X1, X31, 12
	094 Move [X20+40], X8
	095 Move W8, [X19+16]
	096 Move X0, [X9]
	097 Move [X31+12], W8
	098 Call 0x1C17E04
	099 Move X21, X0
	100 Compare X0, 0
	101 JumpIfEqual {108}
	102 Move X8, [X20]
	103 Move X0, X21
	104 Move X1, [X8+64]
	105 Call 0x1C17E00
	106 Compare X0, 0
	107 JumpIfEqual {242}
	108 Move W8, [X20+24]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move X23, 0xCEC000
	111 Move X23, [X23+2104]
	112 Move [X20+48], X21
	113 Move X0, [X23]
	114 Compare X0, 0
	115 JumpIfEqual {122}
	116 Move X8, [X20]
	117 Move X1, [X8+64]
	118 Call 0x1C17E00
	119 Compare X0, 0
	120 JumpIfEqual {242}
	121 Move W8, [X20+24]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move X8, [X23]
	124 Move X21, 0xD26000
	125 Move X24, 0xD26000
	126 Move X25, 0xD26000
	127 Move X21, [X21+3544]
	128 Move X24, [X24+3552]
	129 Move X25, [X25+3464]
	130 Move X0, X20
	131 Move X1, X31
	132 Move [X20+56], X8
	133 Call String.Concat, X0
	134 Move X2, [X19+24]
	135 Move X1, [X21]
	136 Move X3, [X23]
	137 Move X4, X31
	138 Call String.Concat, X0, X1, X2, X3
	139 Move X2, [X19+32]
	140 Move X1, [X24]
	141 Move X3, [X23]
	142 Move X4, X31
	143 Call String.Concat, X0, X1, X2, X3
	144 Move X2, [X19+40]
	145 Move X1, [X25]
	146 Move X3, [X23]
	147 Move X4, X31
	148 Call String.Concat, X0, X1, X2, X3
	149 Move X8, [X22]
	150 Move X21, X0
	151 Move W1, 4
	152 Move X0, X8
	153 Call 0x1C17D6C
	154 Compare X0, 0
	155 JumpIfEqual {245}
	156 Move X20, X0
	157 Compare X21, 0
	158 JumpIfEqual {165}
	159 Move X8, [X20]
	160 Move X0, X21
	161 Move X1, [X8+64]
	162 Call 0x1C17E00
	163 Compare X0, 0
	164 JumpIfEqual {242}
	165 Move W8, [X20+24]
	166 Compare W8, 0
	167 JumpIfEqual {241}
	168 Move X22, 0xD26000
	169 Move X22, [X22+3624]
	170 Move [X20+32], X21
	171 Move X0, [X22]
	172 Compare X0, 0
	173 JumpIfEqual {180}
	174 Move X8, [X20]
	175 Move X1, [X8+64]
	176 Call 0x1C17E00
	177 Compare X0, 0
	178 JumpIfEqual {242}
	179 Move W8, [X20+24]
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move X8, [X22]
	182 Move X9, 0xCEC000
	183 Move X9, [X9+2904]
	184 Add X1, X31, 8
	185 Move [X20+40], X8
	186 Move W8, [X19+48]
	187 Move X0, [X9]
	188 Move [X31+8], W8
	189 Call 0x1C17E04
	190 Move X21, X0
	191 Compare X0, 0
	192 JumpIfEqual {199}
	193 Move X8, [X20]
	194 Move X0, X21
	195 Move X1, [X8+64]
	196 Call 0x1C17E00
	197 Compare X0, 0
	198 JumpIfEqual {242}
	199 Move W8, [X20+24]
	200 NotImplemented "Instruction CMP not yet implemented."
	201 Move [X20+48], X21
	202 Move X0, [X23]
	203 Compare X0, 0
	204 JumpIfEqual {211}
	205 Move X8, [X20]
	206 Move X1, [X8+64]
	207 Call 0x1C17E00
	208 Compare X0, 0
	209 JumpIfEqual {242}
	210 Move W8, [X20+24]
	211 NotImplemented "Instruction CMP not yet implemented."
	212 Move X8, [X23]
	213 Move X21, 0xD26000
	214 Move X22, 0xD27000
	215 Move X21, [X21+3600]
	216 Move X22, [X22+8]
	217 Move X0, X20
	218 Move X1, X31
	219 Move [X20+56], X8
	220 Call String.Concat, X0
	221 Move X2, [X19+56]
	222 Move X1, [X21]
	223 Move X3, [X23]
	224 Move X4, X31
	225 Call String.Concat, X0, X1, X2, X3
	226 Move X2, [X19+64]
	227 Move X1, [X22]
	228 Move X3, [X23]
	229 Move X4, X31
	230 Call String.Concat, X0, X1, X2, X3
	231 Move X20, [X31+64]
	232 Move X19, [X31+72]
	233 Move X22, [X31+48]
	234 Move X21, [X31+56]
	235 Move X24, [X31+32]
	236 Move X23, [X31+40]
	237 Move X30, [X31+16]
	238 Move X25, [X31+24]
	239 Add X31, X31, 80
	240 Return X0
	241 Call 0x1C17F28
	242 Call 0x1C17F44
	243 Move X1, X31
	244 Call 0x1C17DEC
	245 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03408E78 CMP W8, 0x2
	0x03408E7C B.LS 0x3409030

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

