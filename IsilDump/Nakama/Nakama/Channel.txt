Type: Nakama.Channel

Method: System.String get_Id()

Disassembly:
	0x03473D44 BL 0x3473DA8
	0x03473D48 STR X0, [X19 + 0x28]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_Id(System.String value)

Disassembly:
	0x03473D4C LDP X20, X19, [X31 + 0x20]
	0x03473D50 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Collections.Generic.IEnumerable`1<Nakama.IUserPresence> get_Presences()

Disassembly:
	0x03473D54 LDR X30, [X31], #0x30
	0x03473D58 RET
	0x03473D5C BL 0x1C16F20
	0x03473D60 ADRP X0, 0xC80000
	0x03473D64 LDR X0, [X0 + 0x5B0]
	0x03473D68 BL 0x1C16D08
	0x03473D6C BL 0x1C16F10
	0x03473D70 MOV X19, X0
	0x03473D74 ADRP X0, 0xCBD000
	0x03473D78 LDR X0, [X0 + 0x888]
	0x03473D7C BL 0x1C16D08
	0x03473D80 MOV X1, X0
	0x03473D84 MOV X0, X19
	0x03473D88 MOV X2, X31
	0x03473D8C BL 0x337DF1C
	0x03473D90 ADRP X0, 0xCBD000
	0x03473D94 LDR X0, [X0 + 0x890]
	0x03473D98 BL 0x1C16D08
	0x03473D9C MOV X1, X0
	0x03473DA0 MOV X0, X19
	0x03473DA4 BL 0x1C16DEC
	0x03473DA8 SUB X31, X31, 0xA0
	0x03473DAC STP X29, X30, [X31 + 0x40]
	0x03473DB0 STP X28, X27, [X31 + 0x50]
	0x03473DB4 STP X26, X25, [X31 + 0x60]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xF6B000
	005 Move W8, [X20+2043]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xCBE000
	012 Move X0, [X0+2056]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2043], W8
	016 Move X0, [X19+24]
	017 Compare X0, 0
	018 JumpIfNotEqual {29}
	019 Move X19, 0xCBE000
	020 Move X19, [X19+2056]
	021 Move X0, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X19]
	027 Move X8, [X0+184]
	028 Move X0, [X8]
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0

Method: System.Collections.Generic.List`1<Nakama.UserPresence> get__presences()

Disassembly:
	0x03473DB8 STP X24, X23, [X31 + 0x70]
	0x03473DBC STP X22, X21, [X31 + 0x80]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set__presences(System.Collections.Generic.List`1<Nakama.UserPresence> value)

Disassembly:
	0x03473DC0 STP X20, X19, [X31 + 0x90]
	0x03473DC4 ADRP X19, 0xF6A000

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: Nakama.IUserPresence get_Self()

Disassembly:
	0x03473DC8 LDRB W8, [X19 + 0x841]
	0x03473DCC MOV X20, X2

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: Nakama.UserPresence get__self()

Disassembly:
	0x03473DD0 MOV X21, X1
	0x03473DD4 MOV X22, X0

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set__self(Nakama.UserPresence value)

Disassembly:
	0x03473DD8 TBNZ X8, 0x0, 0x3473ED4
	0x03473DDC ADRP X0, 0xCBD000

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String get_RoomName()

Disassembly:
	0x03473DE0 LDR X0, [X0 + 0x898]
	0x03473DE4 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_RoomName(System.String value)

Disassembly:
	0x03473DE8 ADRP X0, 0xCBD000
	0x03473DEC LDR X0, [X0 + 0x8A0]

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.String get_GroupId()

Disassembly:
	0x03473DF0 BL 0x1C16CF4
	0x03473DF4 ADRP X0, 0xCBD000

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_GroupId(System.String value)

Disassembly:
	0x03473DF8 LDR X0, [X0 + 0x8A8]
	0x03473DFC BL 0x1C16CF4

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.String get_UserIdOne()

Disassembly:
	0x03473E00 ADRP X0, 0xCBD000
	0x03473E04 LDR X0, [X0 + 0x8B0]

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_UserIdOne(System.String value)

Disassembly:
	0x03473E08 BL 0x1C16CF4
	0x03473E0C ADRP X0, 0xCBD000

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.String get_UserIdTwo()

Disassembly:
	0x03473E10 LDR X0, [X0 + 0x8B8]
	0x03473E14 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_UserIdTwo(System.String value)

Disassembly:
	0x03473E18 ADRP X0, 0xCBD000
	0x03473E1C LDR X0, [X0 + 0x8C0]

ISIL:
	001 Move [X0+64], X1
	002 Return 

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03473E20 BL 0x1C16CF4
	0x03473E24 ADRP X0, 0xCBD000
	0x03473E28 LDR X0, [X0 + 0x8C8]
	0x03473E2C BL 0x1C16CF4
	0x03473E30 ADRP X0, 0xCBD000
	0x03473E34 LDR X0, [X0 + 0x8D0]
	0x03473E38 BL 0x1C16CF4
	0x03473E3C ADRP X0, 0xCBD000
	0x03473E40 LDR X0, [X0 + 0x8D8]
	0x03473E44 BL 0x1C16CF4
	0x03473E48 ADRP X0, 0xCBD000
	0x03473E4C LDR X0, [X0 + 0x8E0]
	0x03473E50 BL 0x1C16CF4
	0x03473E54 ADRP X0, 0xC80000
	0x03473E58 LDR X0, [X0 + 0xE00]
	0x03473E5C BL 0x1C16CF4
	0x03473E60 ADRP X0, 0xC80000
	0x03473E64 LDR X0, [X0 + 0xF50]
	0x03473E68 BL 0x1C16CF4
	0x03473E6C ADRP X0, 0xC80000
	0x03473E70 LDR X0, [X0 + 0xF58]
	0x03473E74 BL 0x1C16CF4
	0x03473E78 ADRP X0, 0xC80000
	0x03473E7C LDR X0, [X0 + 0xE18]
	0x03473E80 BL 0x1C16CF4
	0x03473E84 ADRP X0, 0xC80000
	0x03473E88 LDR X0, [X0 + 0xF60]
	0x03473E8C BL 0x1C16CF4
	0x03473E90 ADRP X0, 0xCBD000
	0x03473E94 LDR X0, [X0 + 0x8E8]
	0x03473E98 BL 0x1C16CF4
	0x03473E9C ADRP X0, 0xCBD000
	0x03473EA0 LDR X0, [X0 + 0x8F0]
	0x03473EA4 BL 0x1C16CF4
	0x03473EA8 ADRP X0, 0xCBD000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xF6B000
	006 Move W8, [X21+2044]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xCBE000
	014 Move X0, [X0+2064]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2044], W8
	018 Compare X19, 0
	019 JumpIfEqual {31}
	020 Move X8, 0xCBE000
	021 Move X8, [X8+2064]
	022 Move X9, [X19]
	023 Move X8, [X8]
	024 Move W11, [X9+304]
	025 Move W10, [X8+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X9, [X9+200]
	028 Add X9, X9, X10
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move W0, W31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]

Method: System.Boolean Equals(Nakama.IChannel other)

Disassembly:
	0x03473EAC LDR X0, [X0 + 0x8F8]
	0x03473EB0 BL 0x1C16CF4
	0x03473EB4 ADRP X0, 0xCBD000
	0x03473EB8 LDR X0, [X0 + 0x838]
	0x03473EBC BL 0x1C16CF4
	0x03473EC0 ADRP X0, 0xCBD000
	0x03473EC4 LDR X0, [X0 + 0x808]
	0x03473EC8 BL 0x1C16CF4
	0x03473ECC MOVZ W8, 0x1
	0x03473ED0 STRB W8, [X19 + 0x841]
	0x03473ED4 STP X31, X31, [X31 + 0x20]
	0x03473ED8 STR X31, [X31 + 0x30]
	0x03473EDC CBZ X22, 0x3473FFC
	0x03473EE0 CBZ X21, 0x3474024
	0x03473EE4 ADRP X23, 0xCBD000
	0x03473EE8 ADRP X19, 0xCBD000
	0x03473EEC LDR X23, [X23 + 0x8C8]
	0x03473EF0 LDR X19, [X19 + 0x8B0]
	0x03473EF4 CBNZ X20, 0x3473F1C
	0x03473EF8 ADRP X8, 0xCBD000
	0x03473EFC LDR X8, [X8 + 0x838]
	0x03473F00 LDR X0, [X8]
	0x03473F04 BL 0x1C16F10
	0x03473F08 ADRP X8, 0xCBD000
	0x03473F0C LDR X8, [X8 + 0x8F8]
	0x03473F10 MOV X20, X0
	0x03473F14 LDR X1, [X8]
	0x03473F18 BL 0x301B7C4
	0x03473F1C LDR X0, [X23]
	0x03473F20 BL 0x1C16F10
	0x03473F24 LDR X1, [X19]
	0x03473F28 MOV X19, X0
	0x03473F2C BL 0x2AA4804
	0x03473F30 CBZ X22, 0x3474624
	0x03473F34 ADRP X8, 0xCBD000
	0x03473F38 LDR X8, [X8 + 0x8E8]
	0x03473F3C ADRP X24, 0xCBD000
	0x03473F40 ADRP X25, 0xCBD000
	0x03473F44 LDR X24, [X24 + 0x8D8]
	0x03473F48 LDR X25, [X25 + 0x8C0]
	0x03473F4C LDR X1, [X8]
	0x03473F50 ADRP X26, 0xC80000
	0x03473F54 ADRP X23, 0xCBD000
	0x03473F58 LDR X26, [X26 + 0xF50]
	0x03473F5C LDR X23, [X23 + 0x8D0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xF6B000
	006 Move W8, [X21+2045]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xCBD000
	014 Move X0, [X0+1904]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2045], W8
	018 Compare X19, 0
	019 JumpIfEqual {53}
	020 Move X10, 0xCBD000
	021 Move X8, [X19]
	022 Move X10, [X10+1904]
	023 Move X20, [X20+16]
	024 NotImplemented "Instruction LDRH not yet implemented."
	025 Move X1, [X10]
	026 Compare X9, 0
	027 JumpIfEqual {34}
	028 Move X10, [X8+176]
	029 Add X10, X10, 8
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Subtract X9, X9, 1
	033 Add X10, X10, 16
	034 Move X0, X19
	035 Move W2, W31
	036 Call 0x1C5D788
	037 NotImplemented "Instruction LDRSW not yet implemented."
	038 Add X8, X8, X9
	039 Add X0, X8, 312
	040 Move X8, [X0]
	041 Move X1, [X0+8]
	042 Move X0, X19
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move X1, X0
	045 Move X0, X20
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X2, X31
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Call String.Equals, X0, X1
	052 Return X0
	053 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x03473F60 ADD X8, X31, 0x8
	0x03473F64 MOV X0, X22
	0x03473F68 BL 0x301CB58
	0x03473F6C LDUR V0, [X31 + 0x8]
	0x03473F70 LDR X8, [X31 + 0x18]
	0x03473F74 STR V0, [X31 + 0x2]

ISIL:
	001 Move X0, [X0+16]
	002 Compare X0, 0
	003 JumpIfEqual {8}
	004 Move X8, [X0]
	005 Move X2, [X8+344]
	006 Move X1, [X8+352]
	007 CallNoReturn X2
	008 Return X0

Method: System.String ToString()

Disassembly:
	0x03473F78 STR X8, [X31 + 0x30]
	0x03473F7C LDR X1, [X24]
	0x03473F80 ADD X0, X31, 0x20
	0x03473F84 BL 0x2BC4350
	0x03473F88 TBZ X0, 0x0, 0x3473FAC
	0x03473F8C LDR X2, [X31 + 0x30]
	0x03473F90 CBZ X2, 0x347460C
	0x03473F94 CBZ X19, 0x3474610
	0x03473F98 LDR X1, [X2 + 0x30]
	0x03473F9C LDR X3, [X25]
	0x03473FA0 MOV X0, X19
	0x03473FA4 BL 0x2AA5084
	0x03473FA8 B 0x3473F7C
	0x03473FAC LDR X1, [X23]
	0x03473FB0 ADD X0, X31, 0x20
	0x03473FB4 BL 0x2BC434C
	0x03473FB8 CBZ X21, 0x3474624
	0x03473FBC LDR X8, [X21]
	0x03473FC0 LDR X1, [X26]
	0x03473FC4 LDRH W9, [X8 + 0x12E]
	0x03473FC8 CBZ X9, 0x3473FEC
	0x03473FCC LDR X10, [X8 + 0xB0]
	0x03473FD0 ADD X10, X10, 0x8
	0x03473FD4 LDUR X11, [X10 - 0x8]
	0x03473FD8 CMP X11, X1
	0x03473FDC B.EQ 0x347404C
	0x03473FE0 SUBS X9, X9, 0x1
	0x03473FE4 ADD X10, X10, 0x10
	0x03473FE8 B.NE 0x3473FD4
	0x03473FEC MOV X0, X21
	0x03473FF0 MOV W2, W31
	0x03473FF4 BL 0x1C5C788
	0x03473FF8 B 0x3474058
	0x03473FFC ADRP X8, 0xCBD000
	0x03474000 LDR X8, [X8 + 0x838]
	0x03474004 LDR X0, [X8]
	0x03474008 BL 0x1C16F10
	0x0347400C ADRP X8, 0xCBC000
	0x03474010 LDR X8, [X8 + 0x8F8]
	0x03474014 MOV X22, X0
	0x03474018 LDR X1, [X8]
	0x0347401C BL 0x301B7C4
	0x03474020 CBNZ X21, 0x3473EE4
	0x03474024 ADRP X8, 0xCBC000
	0x03474028 LDR X8, [X8 + 0x838]
	0x0347402C LDR X0, [X8]
	0x03474030 BL 0x1C16F10
	0x03474034 ADRP X8, 0xCBC000
	0x03474038 LDR X8, [X8 + 0x8F8]
	0x0347403C MOV X21, X0
	0x03474040 LDR X1, [X8]
	0x03474044 BL 0x301B7C4
	0x03474048 B 0x3473EE4
	0x0347404C LDRSW X9, [X10]
	0x03474050 ADD X8, X8, X9, 0x4, LSL
	0x03474054 ADD X0, X8, 0x138
	0x03474058 LDP X8, X1, [X0]
	0x0347405C MOV X0, X21
	0x03474060 BLR X8
	0x03474064 MOV X21, X0
	0x03474068 CBZ X0, 0x3474628
	0x0347406C ADRP X26, 0xC7F000
	0x03474070 ADRP X27, 0xC7F000
	0x03474074 ADRP X28, 0xC7F000
	0x03474078 ADRP X29, 0xCBC000
	0x0347407C ADRP X24, 0xCBC000
	0x03474080 ADRP X25, 0xCBC000
	0x03474084 LDR X26, [X26 + 0xE18]
	0x03474088 LDR X27, [X27 + 0xF58]
	0x0347408C LDR X28, [X28 + 0xF60]
	0x03474090 LDR X29, [X29 + 0x8A0]
	0x03474094 LDR X24, [X24 + 0x808]
	0x03474098 LDR X25, [X25 + 0x898]
	0x0347409C LDR X8, [X21]
	0x034740A0 LDR X1, [X26]
	0x034740A4 LDRH W9, [X8 + 0x12E]
	0x034740A8 CBZ X9, 0x34740CC
	0x034740AC LDR X10, [X8 + 0xB0]
	0x034740B0 ADD X10, X10, 0x8
	0x034740B4 LDUR X11, [X10 - 0x8]
	0x034740B8 CMP X11, X1
	0x034740BC B.EQ 0x34740DC
	0x034740C0 SUBS X9, X9, 0x1
	0x034740C4 ADD X10, X10, 0x10
	0x034740C8 B.NE 0x34740B4
	0x034740CC MOV X0, X21
	0x034740D0 MOV W2, W31
	0x034740D4 BL 0x1C5C788
	0x034740D8 B 0x34740E8
	0x034740DC LDRSW X9, [X10]
	0x034740E0 ADD X8, X8, X9, 0x4, LSL
	0x034740E4 ADD X0, X8, 0x138
	0x034740E8 LDP X8, X1, [X0]
	0x034740EC MOV X0, X21
	0x034740F0 BLR X8
	0x034740F4 TBZ X0, 0x0, 0x347427C
	0x034740F8 LDR X8, [X21]
	0x034740FC LDR X1, [X27]
	0x03474100 LDRH W9, [X8 + 0x12E]
	0x03474104 CBZ X9, 0x3474128
	0x03474108 LDR X10, [X8 + 0xB0]
	0x0347410C ADD X10, X10, 0x8
	0x03474110 LDUR X11, [X10 - 0x8]
	0x03474114 CMP X11, X1
	0x03474118 B.EQ 0x3474138
	0x0347411C SUBS X9, X9, 0x1
	0x03474120 ADD X10, X10, 0x10
	0x03474124 B.NE 0x3474110
	0x03474128 MOV X0, X21
	0x0347412C MOV W2, W31
	0x03474130 BL 0x1C5C788
	0x03474134 B 0x3474144
	0x03474138 LDRSW X9, [X10]
	0x0347413C ADD X8, X8, X9, 0x4, LSL
	0x03474140 ADD X0, X8, 0x138
	0x03474144 LDP X8, X1, [X0]
	0x03474148 MOV X0, X21
	0x0347414C BLR X8
	0x03474150 MOV X22, X0
	0x03474154 CBZ X0, 0x3474614
	0x03474158 LDR X8, [X22]
	0x0347415C LDR X1, [X28]
	0x03474160 LDRH W9, [X8 + 0x12E]
	0x03474164 CBZ X9, 0x3474188
	0x03474168 LDR X10, [X8 + 0xB0]
	0x0347416C ADD X10, X10, 0x8
	0x03474170 LDUR X11, [X10 - 0x8]
	0x03474174 CMP X11, X1
	0x03474178 B.EQ 0x3474198
	0x0347417C SUBS X9, X9, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xF6B000
	008 Move X21, 0xC81000
	009 Move X22, 0xCBE000
	010 Move X20, 0xC81000
	011 Move W8, [X23+2046]
	012 Move X21, [X21+2104]
	013 Move X22, [X22+2072]
	014 Move X20, [X20+2512]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {34}
	020 Move X0, 0xC81000
	021 Move X0, [X0+2512]
	022 Call 0x1C17CF4
	023 Move X0, 0xCBE000
	024 Move X0, [X0+2072]
	025 Call 0x1C17CF4
	026 Move X0, 0xCBE000
	027 Move X0, [X0+2080]
	028 Call 0x1C17CF4
	029 Move X0, 0xC81000
	030 Move X0, [X0+2104]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X23+2046], W8
	034 Move X0, X19
	035 Call Channel.get_Presences, X0
	036 Move X8, [X21]
	037 Move X2, [X22]
	038 Move X1, X0
	039 Move X0, X8
	040 Call String.Join, X0, X1
	041 Move X8, [X20]
	042 Move X21, X0
	043 Move W1, 7
	044 Move X0, X8
	045 Call 0x1C17D6C
	046 Compare X0, 0
	047 JumpIfEqual {150}
	048 Move X22, [X19+16]
	049 Move X20, X0
	050 Compare X22, 0
	051 JumpIfEqual {58}
	052 Move X8, [X20]
	053 Move X0, X22
	054 Move X1, [X8+64]
	055 Call 0x1C17E00
	056 Compare X0, 0
	057 JumpIfEqual {147}
	058 Move W8, [X20+24]
	059 Compare W8, 0
	060 JumpIfEqual {146}
	061 Move [X20+32], X22
	062 Compare X21, 0
	063 JumpIfEqual {71}
	064 Move X8, [X20]
	065 Move X0, X21
	066 Move X1, [X8+64]
	067 Call 0x1C17E00
	068 Compare X0, 0
	069 JumpIfEqual {147}
	070 Move W8, [X20+24]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move [X20+40], X21
	073 Move X21, [X19+32]
	074 Compare X21, 0
	075 JumpIfEqual {83}
	076 Move X8, [X20]
	077 Move X0, X21
	078 Move X1, [X8+64]
	079 Call 0x1C17E00
	080 Compare X0, 0
	081 JumpIfEqual {147}
	082 Move W8, [X20+24]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move [X20+48], X21
	085 Move X21, [X19+40]
	086 Compare X21, 0
	087 JumpIfEqual {95}
	088 Move X8, [X20]
	089 Move X0, X21
	090 Move X1, [X8+64]
	091 Call 0x1C17E00
	092 Compare X0, 0
	093 JumpIfEqual {147}
	094 Move W8, [X20+24]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move [X20+56], X21
	097 Move X21, [X19+48]
	098 Compare X21, 0
	099 JumpIfEqual {107}
	100 Move X8, [X20]
	101 Move X0, X21
	102 Move X1, [X8+64]
	103 Call 0x1C17E00
	104 Compare X0, 0
	105 JumpIfEqual {147}
	106 Move W8, [X20+24]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move [X20+64], X21
	109 Move X21, [X19+56]
	110 Compare X21, 0
	111 JumpIfEqual {119}
	112 Move X8, [X20]
	113 Move X0, X21
	114 Move X1, [X8+64]
	115 Call 0x1C17E00
	116 Compare X0, 0
	117 JumpIfEqual {147}
	118 Move W8, [X20+24]
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move [X20+72], X21
	121 Move X19, [X19+64]
	122 Compare X19, 0
	123 JumpIfEqual {131}
	124 Move X8, [X20]
	125 Move X0, X19
	126 Move X1, [X8+64]
	127 Call 0x1C17E00
	128 Compare X0, 0
	129 JumpIfEqual {147}
	130 Move W8, [X20+24]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move X8, 0xCBD000
	133 Move X8, [X8+2080]
	134 Move [X20+80], X19
	135 Move X1, X20
	136 Move X20, [X31+32]
	137 Move X19, [X31+40]
	138 Move X0, [X8]
	139 Move X22, [X31+16]
	140 Move X21, [X31+24]
	141 Move X2, X31
	142 Move X30, [X31+48]
	143 Move X23, [X31+56]
	144 Call String.Format, X0, X1
	145 Return X0
	146 Call 0x1C17F28
	147 Call 0x1C17F44
	148 Move X1, X31
	149 Call 0x1C17DEC
	150 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03474180 ADD X10, X10, 0x10
	0x03474184 B.NE 0x3474170

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

