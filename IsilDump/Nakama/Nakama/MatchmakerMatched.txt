Type: Nakama.MatchmakerMatched

Method: System.String get_MatchId()

Disassembly:
	0x0347584C LDR X20, [X20 + 0x988]
	0x03475850 MOV X19, X0

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_MatchId(System.String value)

Disassembly:
	0x03475854 TBNZ X8, 0x0, 0x347586C
	0x03475858 ADRP X0, 0xCBB000

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.String get_Ticket()

Disassembly:
	0x0347585C LDR X0, [X0 + 0x988]
	0x03475860 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_Ticket(System.String value)

Disassembly:
	0x03475864 MOVZ W8, 0x1
	0x03475868 STRB W8, [X21 + 0x81C]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.String get_Token()

Disassembly:
	0x0347586C LDP X1, X2, [X19 + 0x10]
	0x03475870 LDR X3, [X19 + 0x20]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_Token(System.String value)

Disassembly:
	0x03475874 LDR X0, [X20]
	0x03475878 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.Collections.Generic.IEnumerable`1<Nakama.IMatchmakerUser> get_Users()

Disassembly:
	0x0347587C MOV X4, X31
	0x03475880 LDP X30, X21, [X31], #0x20
	0x03475884 B 0x3227C18
	0x03475888 MOV X1, X31
	0x0347588C B 0x33BDD8C
	0x03475890 LDR X0, [X0 + 0x10]
	0x03475894 RET
	0x03475898 STR X1, [X0 + 0x10]
	0x0347589C RET
	0x034758A0 LDR X0, [X0 + 0x18]
	0x034758A4 RET
	0x034758A8 STR X1, [X0 + 0x18]
	0x034758AC RET
	0x034758B0 LDR W0, [X0 + 0x20]
	0x034758B4 RET
	0x034758B8 STR W1, [X0 + 0x20]
	0x034758BC RET
	0x034758C0 LDR X0, [X0 + 0x28]
	0x034758C4 RET
	0x034758C8 STR X1, [X0 + 0x28]
	0x034758CC RET
	0x034758D0 SUB X31, X31, 0x30
	0x034758D4 STP X30, X21, [X31 + 0x10]
	0x034758D8 STP X20, X19, [X31 + 0x20]
	0x034758DC ADRP X19, 0xF68000
	0x034758E0 ADRP X21, 0xC7E000
	0x034758E4 LDRB W8, [X19 + 0x81D]
	0x034758E8 LDR X21, [X21 + 0x9D0]
	0x034758EC MOV X20, X0
	0x034758F0 TBNZ X8, 0x0, 0x3475920

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xF69000
	005 Move W8, [X20+2055]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xCBC000
	012 Move X0, [X0+2304]
	013 Call 0x1C17CF4
	014 Move X0, 0xCBC000
	015 Move X0, [X0+2312]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2055], W8
	019 Move X19, [X19+40]
	020 Compare X19, 0
	021 JumpIfNotEqual {32}
	022 Move X8, 0xCBC000
	023 Move X8, [X8+2312]
	024 Move X0, [X8]
	025 Call 0x1C17F10
	026 Move X8, 0xCBC000
	027 Move X8, [X8+2304]
	028 Move W1, W31
	029 Move X19, X0
	030 Move X2, [X8]
	031 Call List`1<Object>..ctor, X0, X1
	032 Move X0, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Collections.Generic.List`1<Nakama.MatchmakerUser> get__users()

Disassembly:
	0x034758F4 ADRP X0, 0xC7E000
	0x034758F8 LDR X0, [X0 + 0x758]

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set__users(System.Collections.Generic.List`1<Nakama.MatchmakerUser> value)

Disassembly:
	0x034758FC BL 0x1C16CF4
	0x03475900 ADRP X0, 0xC7E000

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: Nakama.IMatchmakerUser get_Self()

Disassembly:
	0x03475904 LDR X0, [X0 + 0x9D0]
	0x03475908 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: Nakama.MatchmakerUser get__self()

Disassembly:
	0x0347590C ADRP X0, 0xCBB000
	0x03475910 LDR X0, [X0 + 0x990]

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set__self(Nakama.MatchmakerUser value)

Disassembly:
	0x03475914 BL 0x1C16CF4
	0x03475918 MOVZ W8, 0x1

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x0347591C STRB W8, [X19 + 0x81D]
	0x03475920 LDR X0, [X21]
	0x03475924 MOVZ W1, 0x4
	0x03475928 BL 0x1C16D6C
	0x0347592C CBZ X0, 0x3475A34
	0x03475930 LDR X21, [X20 + 0x10]
	0x03475934 MOV X19, X0
	0x03475938 CBZ X21, 0x3475950
	0x0347593C LDR X8, [X19]
	0x03475940 MOV X0, X21
	0x03475944 LDR X1, [X8 + 0x40]
	0x03475948 BL 0x1C16E00
	0x0347594C CBZ X0, 0x3475A28
	0x03475950 LDR W8, [X19 + 0x18]
	0x03475954 CBZ W8, 0x3475A24
	0x03475958 STR X21, [X19 + 0x20]
	0x0347595C LDR X21, [X20 + 0x18]
	0x03475960 CBZ X21, 0x347597C
	0x03475964 LDR X8, [X19]
	0x03475968 MOV X0, X21
	0x0347596C LDR X1, [X8 + 0x40]
	0x03475970 BL 0x1C16E00
	0x03475974 CBZ X0, 0x3475A28
	0x03475978 LDR W8, [X19 + 0x18]
	0x0347597C CMP W8, 0x1
	0x03475980 B.LS 0x3475A24
	0x03475984 ADRP X8, 0xC7E000
	0x03475988 LDR X8, [X8 + 0x758]
	0x0347598C STR X21, [X19 + 0x28]
	0x03475990 LDR W9, [X20 + 0x20]
	0x03475994 ADD X1, X31, 0xC
	0x03475998 LDR X0, [X8]
	0x0347599C STR W9, [X31 + 0xC]
	0x034759A0 BL 0x1C16E04
	0x034759A4 MOV X21, X0
	0x034759A8 CBZ X0, 0x34759C0
	0x034759AC LDR X8, [X19]
	0x034759B0 MOV X0, X21
	0x034759B4 LDR X1, [X8 + 0x40]
	0x034759B8 BL 0x1C16E00
	0x034759BC CBZ X0, 0x3475A28
	0x034759C0 LDR W8, [X19 + 0x18]
	0x034759C4 CMP W8, 0x2
	0x034759C8 B.LS 0x3475A24
	0x034759CC STR X21, [X19 + 0x30]
	0x034759D0 LDR X20, [X20 + 0x28]
	0x034759D4 CBZ X20, 0x34759F0
	0x034759D8 LDR X8, [X19]
	0x034759DC MOV X0, X20
	0x034759E0 LDR X1, [X8 + 0x40]
	0x034759E4 BL 0x1C16E00
	0x034759E8 CBZ X0, 0x3475A28
	0x034759EC LDR W8, [X19 + 0x18]
	0x034759F0 CMP W8, 0x3
	0x034759F4 B.LS 0x3475A24
	0x034759F8 ADRP X8, 0xCBB000
	0x034759FC LDR X8, [X8 + 0x990]
	0x03475A00 STR X20, [X19 + 0x38]
	0x03475A04 MOV X1, X19
	0x03475A08 MOV X2, X31
	0x03475A0C LDR X0, [X8]
	0x03475A10 BL 0x3227C5C
	0x03475A14 LDP X20, X19, [X31 + 0x20]
	0x03475A18 LDP X30, X21, [X31 + 0x10]
	0x03475A1C ADD X31, X31, 0x30
	0x03475A20 RET
	0x03475A24 BL 0x1C16F28
	0x03475A28 BL 0x1C16F44
	0x03475A2C MOV X1, X31
	0x03475A30 BL 0x1C16DEC
	0x03475A34 BL 0x1C16F20
	0x03475A38 MOV X1, X31
	0x03475A3C B 0x33BDD8C
	0x03475A40 LDRB W0, [X0 + 0x10]
	0x03475A44 RET
	0x03475A48 AND W8, W1, 0x1
	0x03475A4C STRB W8, [X0 + 0x10]
	0x03475A50 RET
	0x03475A54 LDR X0, [X0 + 0x18]
	0x03475A58 RET
	0x03475A5C STR X1, [X0 + 0x18]
	0x03475A60 RET
	0x03475A64 LDR X0, [X0 + 0x20]
	0x03475A68 RET
	0x03475A6C STR X1, [X0 + 0x20]
	0x03475A70 RET
	0x03475A74 LDR X0, [X0 + 0x28]
	0x03475A78 RET
	0x03475A7C STR X1, [X0 + 0x28]
	0x03475A80 RET
	0x03475A84 LDR X0, [X0 + 0x30]
	0x03475A88 RET
	0x03475A8C STR X1, [X0 + 0x30]
	0x03475A90 RET
	0x03475A94 STP X30, X21, [X31 - 0x20]!
	0x03475A98 STP X20, X19, [X31 + 0x10]
	0x03475A9C ADRP X21, 0xF68000
	0x03475AA0 LDRB W8, [X21 + 0x81E]
	0x03475AA4 MOV X19, X1
	0x03475AA8 MOV X20, X0
	0x03475AAC TBNZ X8, 0x0, 0x3475AC4
	0x03475AB0 ADRP X0, 0xCBB000
	0x03475AB4 LDR X0, [X0 + 0x808]
	0x03475AB8 BL 0x1C16CF4
	0x03475ABC MOVZ W8, 0x1
	0x03475AC0 STRB W8, [X21 + 0x81E]
	0x03475AC4 CBZ X19, 0x3475AFC
	0x03475AC8 ADRP X8, 0xCBB000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xF69000
	008 Move X21, 0xC7F000
	009 Move X22, 0xCBC000
	010 Move X20, 0xC7F000
	011 Move W8, [X23+2056]
	012 Move X21, [X21+2104]
	013 Move X22, [X22+2320]
	014 Move X20, [X20+2512]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {34}
	020 Move X0, 0xC7F000
	021 Move X0, [X0+2512]
	022 Call 0x1C17CF4
	023 Move X0, 0xCBC000
	024 Move X0, [X0+2320]
	025 Call 0x1C17CF4
	026 Move X0, 0xCBC000
	027 Move X0, [X0+2328]
	028 Call 0x1C17CF4
	029 Move X0, 0xC7F000
	030 Move X0, [X0+2104]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X23+2056], W8
	034 Move X0, X19
	035 Call MatchmakerMatched.get_Users, X0
	036 Move X8, [X21]
	037 Move X2, [X22]
	038 Move X1, X0
	039 Move X0, X8
	040 Call String.Join, X0, X1
	041 Move X8, [X20]
	042 Move X21, X0
	043 Move W1, 5
	044 Move X0, X8
	045 Call 0x1C17D6C
	046 Compare X0, 0
	047 JumpIfEqual {126}
	048 Move X22, [X19+16]
	049 Move X20, X0
	050 Compare X22, 0
	051 JumpIfEqual {58}
	052 Move X8, [X20]
	053 Move X0, X22
	054 Move X1, [X8+64]
	055 Call 0x1C17E00
	056 Compare X0, 0
	057 JumpIfEqual {123}
	058 Move W8, [X20+24]
	059 Compare W8, 0
	060 JumpIfEqual {122}
	061 Move [X20+32], X22
	062 Move X22, [X19+24]
	063 Compare X22, 0
	064 JumpIfEqual {72}
	065 Move X8, [X20]
	066 Move X0, X22
	067 Move X1, [X8+64]
	068 Call 0x1C17E00
	069 Compare X0, 0
	070 JumpIfEqual {123}
	071 Move W8, [X20+24]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move [X20+40], X22
	074 Move X22, [X19+32]
	075 Compare X22, 0
	076 JumpIfEqual {84}
	077 Move X8, [X20]
	078 Move X0, X22
	079 Move X1, [X8+64]
	080 Call 0x1C17E00
	081 Compare X0, 0
	082 JumpIfEqual {123}
	083 Move W8, [X20+24]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move [X20+48], X22
	086 Compare X21, 0
	087 JumpIfEqual {95}
	088 Move X8, [X20]
	089 Move X0, X21
	090 Move X1, [X8+64]
	091 Call 0x1C17E00
	092 Compare X0, 0
	093 JumpIfEqual {123}
	094 Move W8, [X20+24]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move [X20+56], X21
	097 Move X19, [X19+48]
	098 Compare X19, 0
	099 JumpIfEqual {107}
	100 Move X8, [X20]
	101 Move X0, X19
	102 Move X1, [X8+64]
	103 Call 0x1C17E00
	104 Compare X0, 0
	105 JumpIfEqual {123}
	106 Move W8, [X20+24]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X8, 0xCBC000
	109 Move X8, [X8+2328]
	110 Move [X20+64], X19
	111 Move X1, X20
	112 Move X20, [X31+32]
	113 Move X19, [X31+40]
	114 Move X0, [X8]
	115 Move X22, [X31+16]
	116 Move X21, [X31+24]
	117 Move X2, X31
	118 Move X30, [X31+48]
	119 Move X23, [X31+56]
	120 Call String.Format, X0, X1
	121 Return X0
	122 Call 0x1C17F28
	123 Call 0x1C17F44
	124 Move X1, X31
	125 Call 0x1C17DEC
	126 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03475ACC LDR X8, [X8 + 0x808]
	0x03475AD0 LDR X9, [X19]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

