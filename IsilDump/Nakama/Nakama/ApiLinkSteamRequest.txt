Type: Nakama.ApiLinkSteamRequest

Method: Nakama.IApiAccountSteam get_Account()

Disassembly:
	0x03408014 MOV X4, X31
	0x03408018 LDR X30, [X31], #0x50

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: Nakama.ApiAccountSteam get__account()

Disassembly:
	0x0340801C B 0x32277C4
	0x03408020 MOV X1, X31

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set__account(Nakama.ApiAccountSteam value)

Disassembly:
	0x03408024 B 0x33BDD8C
	0x03408028 LDR X0, [X0 + 0x10]

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Boolean get_Sync()

Disassembly:
	0x0340802C RET
	0x03408030 STR X1, [X0 + 0x10]

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_Sync(System.Boolean value)

Disassembly:
	0x03408034 RET
	0x03408038 LDR X0, [X0 + 0x18]
	0x0340803C RET

ISIL:
	001 And W8, W1, 1
	002 Move [X0+24], W8
	003 Return 

Method: System.String ToString()

Disassembly:
	0x03408040 STR X1, [X0 + 0x18]
	0x03408044 RET
	0x03408048 LDR X0, [X0 + 0x20]
	0x0340804C RET
	0x03408050 STR X1, [X0 + 0x20]
	0x03408054 RET
	0x03408058 STP X30, X25, [X31 - 0x40]!
	0x0340805C STP X24, X23, [X31 + 0x10]
	0x03408060 STP X22, X21, [X31 + 0x20]
	0x03408064 STP X20, X19, [X31 + 0x30]
	0x03408068 ADRP X25, 0xFD5000
	0x0340806C ADRP X23, 0xCEB000
	0x03408070 ADRP X24, 0xD25000
	0x03408074 ADRP X20, 0xCEB000
	0x03408078 ADRP X22, 0xD25000
	0x0340807C ADRP X21, 0xD26000
	0x03408080 LDRB W8, [X25 + 0x53E]
	0x03408084 LDR X23, [X23 + 0x988]
	0x03408088 LDR X24, [X24 + 0xE78]
	0x0340808C LDR X20, [X20 + 0x838]
	0x03408090 LDR X22, [X22 + 0xE80]
	0x03408094 LDR X21, [X21 + 0x30]
	0x03408098 MOV X19, X0
	0x0340809C TBNZ X8, 0x0, 0x34080E4
	0x034080A0 ADRP X0, 0xD25000
	0x034080A4 LDR X0, [X0 + 0xE80]
	0x034080A8 BL 0x1C16CF4
	0x034080AC ADRP X0, 0xCEB000
	0x034080B0 LDR X0, [X0 + 0x838]
	0x034080B4 BL 0x1C16CF4
	0x034080B8 ADRP X0, 0xD26000
	0x034080BC LDR X0, [X0 + 0x30]
	0x034080C0 BL 0x1C16CF4
	0x034080C4 ADRP X0, 0xCEB000
	0x034080C8 LDR X0, [X0 + 0x988]
	0x034080CC BL 0x1C16CF4
	0x034080D0 ADRP X0, 0xD25000
	0x034080D4 LDR X0, [X0 + 0xE78]
	0x034080D8 BL 0x1C16CF4
	0x034080DC MOVZ W8, 0x1
	0x034080E0 STRB W8, [X25 + 0x53E]
	0x034080E4 LDR X2, [X19 + 0x10]
	0x034080E8 LDR X0, [X23]
	0x034080EC LDR X1, [X24]
	0x034080F0 LDR X3, [X20]
	0x034080F4 MOV X4, X31
	0x034080F8 BL 0x32277C4
	0x034080FC LDR X2, [X19 + 0x18]
	0x03408100 LDR X1, [X22]
	0x03408104 LDR X3, [X20]
	0x03408108 MOV X4, X31
	0x0340810C BL 0x32277C4
	0x03408110 LDR X2, [X19 + 0x20]
	0x03408114 LDR X1, [X21]
	0x03408118 LDR X3, [X20]
	0x0340811C LDP X20, X19, [X31 + 0x30]
	0x03408120 LDP X22, X21, [X31 + 0x20]
	0x03408124 LDP X24, X23, [X31 + 0x10]
	0x03408128 MOV X4, X31
	0x0340812C LDP X30, X25, [X31], #0x40
	0x03408130 B 0x32277C4
	0x03408134 MOV X1, X31
	0x03408138 B 0x33BDD8C
	0x0340813C STR X30, [X31 - 0x20]!
	0x03408140 STP X20, X19, [X31 + 0x10]
	0x03408144 ADRP X20, 0xFD5000
	0x03408148 LDRB W8, [X20 + 0x53F]
	0x0340814C MOV X19, X0
	0x03408150 TBNZ X8, 0x0, 0x3408174
	0x03408154 ADRP X0, 0xD26000
	0x03408158 LDR X0, [X0 + 0x38]
	0x0340815C BL 0x1C16CF4
	0x03408160 ADRP X0, 0xD26000
	0x03408164 LDR X0, [X0 + 0x40]
	0x03408168 BL 0x1C16CF4
	0x0340816C MOVZ W8, 0x1
	0x03408170 STRB W8, [X20 + 0x53F]
	0x03408174 LDR X19, [X19 + 0x10]
	0x03408178 CBNZ X19, 0x34081A4
	0x0340817C ADRP X8, 0xD26000
	0x03408180 LDR X8, [X8 + 0x40]
	0x03408184 LDR X0, [X8]
	0x03408188 BL 0x1C16F10
	0x0340818C ADRP X8, 0xD26000
	0x03408190 LDR X8, [X8 + 0x38]
	0x03408194 MOV W1, W31
	0x03408198 MOV X19, X0
	0x0340819C LDR X2, [X8]
	0x034081A0 BL 0x301B830
	0x034081A4 MOV X0, X19
	0x034081A8 LDP X20, X19, [X31 + 0x10]
	0x034081AC LDR X30, [X31], #0x20
	0x034081B0 RET
	0x034081B4 LDR X0, [X0 + 0x10]
	0x034081B8 RET
	0x034081BC STR X1, [X0 + 0x10]
	0x034081C0 RET
	0x034081C4 STP X30, X25, [X31 - 0x40]!
	0x034081C8 STP X24, X23, [X31 + 0x10]
	0x034081CC STP X22, X21, [X31 + 0x20]
	0x034081D0 STP X20, X19, [X31 + 0x30]
	0x034081D4 ADRP X25, 0xFD5000
	0x034081D8 ADRP X23, 0xCEB000
	0x034081DC ADRP X24, 0xD26000
	0x034081E0 ADRP X20, 0xCEB000
	0x034081E4 ADRP X21, 0xD25000
	0x034081E8 ADRP X22, 0xD25000
	0x034081EC LDRB W8, [X25 + 0x540]
	0x034081F0 LDR X23, [X23 + 0x838]
	0x034081F4 LDR X24, [X24 + 0x48]
	0x034081F8 LDR X20, [X20 + 0x988]
	0x034081FC LDR X21, [X21 + 0xEA8]
	0x03408200 LDR X22, [X22 + 0xD50]
	0x03408204 MOV X19, X0
	0x03408208 TBNZ X8, 0x0, 0x3408250
	0x0340820C ADRP X0, 0xD26000
	0x03408210 LDR X0, [X0 + 0x48]
	0x03408214 BL 0x1C16CF4
	0x03408218 ADRP X0, 0xCEB000
	0x0340821C LDR X0, [X0 + 0x838]
	0x03408220 BL 0x1C16CF4
	0x03408224 ADRP X0, 0xD25000
	0x03408228 LDR X0, [X0 + 0xD50]
	0x0340822C BL 0x1C16CF4
	0x03408230 ADRP X0, 0xD25000
	0x03408234 LDR X0, [X0 + 0xEA8]
	0x03408238 BL 0x1C16CF4
	0x0340823C ADRP X0, 0xCEB000
	0x03408240 LDR X0, [X0 + 0x988]
	0x03408244 BL 0x1C16CF4
	0x03408248 MOVZ W8, 0x1
	0x0340824C STRB W8, [X25 + 0x540]
	0x03408250 MOV X0, X19
	0x03408254 BL 0x340813C
	0x03408258 LDR X8, [X23]
	0x0340825C LDR X2, [X24]
	0x03408260 MOV X1, X0
	0x03408264 MOV X0, X8
	0x03408268 BL 0x226B7E8
	0x0340826C LDR X8, [X20]
	0x03408270 LDR X1, [X21]
	0x03408274 LDR X3, [X22]
	0x03408278 LDP X20, X19, [X31 + 0x30]
	0x0340827C LDP X22, X21, [X31 + 0x20]
	0x03408280 LDP X24, X23, [X31 + 0x10]
	0x03408284 MOV X2, X0
	0x03408288 MOV X0, X8
	0x0340828C MOV X4, X31
	0x03408290 LDP X30, X25, [X31], #0x40
	0x03408294 B 0x32277C4
	0x03408298 MOV X1, X31
	0x0340829C B 0x33BDD8C
	0x034082A0 LDR X0, [X0 + 0x10]
	0x034082A4 RET
	0x034082A8 STR X1, [X0 + 0x10]
	0x034082AC RET
	0x034082B0 LDR X0, [X0 + 0x18]
	0x034082B4 RET

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xFD6000
	009 Move X21, 0xCEC000
	010 Move X22, 0xCEC000
	011 Move W8, [X20+1334]
	012 Move X21, [X21+2440]
	013 Move X22, [X22+2512]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {39}
	019 Move X0, 0xCEC000
	020 Move X0, [X0+2904]
	021 Call 0x1C17CF4
	022 Move X0, 0xCEC000
	023 Move X0, [X0+2512]
	024 Call 0x1C17CF4
	025 Move X0, 0xCEC000
	026 Move X0, [X0+2104]
	027 Call 0x1C17CF4
	028 Move X0, 0xD26000
	029 Move X0, [X0+4000]
	030 Call 0x1C17CF4
	031 Move X0, 0xCEC000
	032 Move X0, [X0+2440]
	033 Call 0x1C17CF4
	034 Move X0, 0xD26000
	035 Move X0, [X0+4008]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+1334], W8
	039 Move X0, [X22]
	040 Move X21, [X21]
	041 Move W1, 4
	042 Call 0x1C17D6C
	043 Compare X0, 0
	044 JumpIfEqual {181}
	045 Move X20, X0
	046 Compare X21, 0
	047 JumpIfEqual {54}
	048 Move X8, [X20]
	049 Move X0, X21
	050 Move X1, [X8+64]
	051 Call 0x1C17E00
	052 Compare X0, 0
	053 JumpIfEqual {178}
	054 Move W8, [X20+24]
	055 Compare W8, 0
	056 JumpIfEqual {177}
	057 Move X23, 0xD26000
	058 Move X23, [X23+4000]
	059 Move [X20+32], X21
	060 Move X0, [X23]
	061 Compare X0, 0
	062 JumpIfEqual {69}
	063 Move X8, [X20]
	064 Move X1, [X8+64]
	065 Call 0x1C17E00
	066 Compare X0, 0
	067 JumpIfEqual {178}
	068 Move W8, [X20+24]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X9, [X23]
	071 Move [X20+40], X9
	072 Move X21, [X19+16]
	073 Compare X21, 0
	074 JumpIfEqual {82}
	075 Move X8, [X20]
	076 Move X0, X21
	077 Move X1, [X8+64]
	078 Call 0x1C17E00
	079 Compare X0, 0
	080 JumpIfEqual {178}
	081 Move W8, [X20+24]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X23, 0xCEC000
	084 Move X23, [X23+2104]
	085 Move [X20+48], X21
	086 Move X0, [X23]
	087 Compare X0, 0
	088 JumpIfEqual {95}
	089 Move X8, [X20]
	090 Move X1, [X8+64]
	091 Call 0x1C17E00
	092 Compare X0, 0
	093 JumpIfEqual {178}
	094 Move W8, [X20+24]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X8, [X23]
	097 Move X0, X20
	098 Move X1, X31
	099 Move [X20+56], X8
	100 Call String.Concat, X0
	101 Move X8, [X22]
	102 Move X21, X0
	103 Move W1, 4
	104 Move X0, X8
	105 Call 0x1C17D6C
	106 Compare X0, 0
	107 JumpIfEqual {181}
	108 Move X20, X0
	109 Compare X21, 0
	110 JumpIfEqual {117}
	111 Move X8, [X20]
	112 Move X0, X21
	113 Move X1, [X8+64]
	114 Call 0x1C17E00
	115 Compare X0, 0
	116 JumpIfEqual {178}
	117 Move W8, [X20+24]
	118 Compare W8, 0
	119 JumpIfEqual {177}
	120 Move X22, 0xD26000
	121 Move X22, [X22+4008]
	122 Move [X20+32], X21
	123 Move X0, [X22]
	124 Compare X0, 0
	125 JumpIfEqual {132}
	126 Move X8, [X20]
	127 Move X1, [X8+64]
	128 Call 0x1C17E00
	129 Compare X0, 0
	130 JumpIfEqual {178}
	131 Move W8, [X20+24]
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move X8, [X22]
	134 Move X9, 0xCEC000
	135 Move X9, [X9+2904]
	136 Add X1, X31, 12
	137 Move [X20+40], X8
	138 Move W8, [X19+24]
	139 Move X0, [X9]
	140 Move [X31+12], W8
	141 Call 0x1C17E04
	142 Move X19, X0
	143 Compare X0, 0
	144 JumpIfEqual {151}
	145 Move X8, [X20]
	146 Move X0, X19
	147 Move X1, [X8+64]
	148 Call 0x1C17E00
	149 Compare X0, 0
	150 JumpIfEqual {178}
	151 Move W8, [X20+24]
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move [X20+48], X19
	154 Move X0, [X23]
	155 Compare X0, 0
	156 JumpIfEqual {163}
	157 Move X8, [X20]
	158 Move X1, [X8+64]
	159 Call 0x1C17E00
	160 Compare X0, 0
	161 JumpIfEqual {178}
	162 Move W8, [X20+24]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move X8, [X23]
	165 Move X0, X20
	166 Move X1, X31
	167 Move [X20+56], X8
	168 Call String.Concat, X0
	169 Move X20, [X31+48]
	170 Move X19, [X31+56]
	171 Move X22, [X31+32]
	172 Move X21, [X31+40]
	173 Move X30, [X31+16]
	174 Move X23, [X31+24]
	175 Add X31, X31, 64
	176 Return X0
	177 Call 0x1C17F28
	178 Call 0x1C17F44
	179 Move X1, X31
	180 Call 0x1C17DEC
	181 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x034082B8 STR X1, [X0 + 0x18]
	0x034082BC RET

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

