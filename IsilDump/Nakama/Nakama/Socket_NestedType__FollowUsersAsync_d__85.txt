Type: Nakama.Socket/<FollowUsersAsync>d__85

Method: System.Void MoveNext()

Disassembly:
	0x0348223C LDR X0, [X0 + 0xC50]
	0x03482240 BL 0x1C16D08
	0x03482244 LDR W8, [X0 + 0xE0]
	0x03482248 CBNZ W8, 0x3482250
	0x0348224C BL 0x1C16DFC
	0x03482250 ADRP X0, 0xCAE000
	0x03482254 LDR X0, [X0 + 0xEF0]
	0x03482258 BL 0x1C16D08
	0x0348225C MOV X2, X0
	0x03482260 MOV X0, X19
	0x03482264 MOV X1, X20
	0x03482268 BL 0x26324C8
	0x0348226C B 0x34821A0
	0x03482270 MOVZ W0, 0x8
	0x03482274 BL 0x3EB1AF0
	0x03482278 LDR X8, [X20]
	0x0348227C STR X8, [X0]
	0x03482280 ADRP X1, 0xA32000
	0x03482284 ADD X1, X1, 0xE58
	0x03482288 MOV X2, X31
	0x0348228C BL 0x3EB1B00
	0x03482290 MOV X20, X0
	0x03482294 BL 0x3EB1AE0
	0x03482298 MOV X0, X20
	0x0348229C BL 0x1D2C690
	0x034822A0 BL 0x1990590
	0x034822A4 STR X30, [X31 - 0x30]!
	0x034822A8 STP X22, X21, [X31 + 0x10]
	0x034822AC STP X20, X19, [X31 + 0x20]
	0x034822B0 ADRP X22, 0xF5B000
	0x034822B4 ADRP X21, 0xCAE000
	0x034822B8 LDRB W8, [X22 + 0x8C7]
	0x034822BC LDR X21, [X21 + 0xC50]
	0x034822C0 MOV X19, X1
	0x034822C4 MOV X20, X0
	0x034822C8 TBNZ X8, 0x0, 0x34822EC
	0x034822CC ADRP X0, 0xCAE000
	0x034822D0 LDR X0, [X0 + 0xEF8]
	0x034822D4 BL 0x1C16CF4
	0x034822D8 ADRP X0, 0xCAE000
	0x034822DC LDR X0, [X0 + 0xC50]
	0x034822E0 BL 0x1C16CF4
	0x034822E4 MOVZ W8, 0x1
	0x034822E8 STRB W8, [X22 + 0x8C7]
	0x034822EC LDR X0, [X21]
	0x034822F0 ADRP X21, 0xCAE000
	0x034822F4 LDR W8, [X0 + 0xE0]
	0x034822F8 LDR X21, [X21 + 0xEF8]
	0x034822FC CBNZ W8, 0x3482304
	0x03482300 BL 0x1C16DFC
	0x03482304 LDR X2, [X21]
	0x03482308 ADD X0, X20, 0x8
	0x0348230C MOV X1, X19
	0x03482310 LDP X20, X19, [X31 + 0x20]
	0x03482314 LDP X22, X21, [X31 + 0x10]
	0x03482318 LDR X30, [X31], #0x30
	0x0348231C B 0x2632228
	0x03482320 SUB X31, X31, 0x40
	0x03482324 STP X30, X23, [X31 + 0x10]
	0x03482328 STP X22, X21, [X31 + 0x20]
	0x0348232C STP X20, X19, [X31 + 0x30]
	0x03482330 ADRP X20, 0xF5B000
	0x03482334 LDRB W8, [X20 + 0x8C8]
	0x03482338 MOV X19, X0
	0x0348233C TBNZ X8, 0x0, 0x34823C0
	0x03482340 ADRP X0, 0xCAE000
	0x03482344 LDR X0, [X0 + 0xF98]
	0x03482348 BL 0x1C16CF4
	0x0348234C ADRP X0, 0xCAE000
	0x03482350 LDR X0, [X0 + 0xFA0]
	0x03482354 BL 0x1C16CF4
	0x03482358 ADRP X0, 0xCAE000
	0x0348235C LDR X0, [X0 + 0xD18]
	0x03482360 BL 0x1C16CF4
	0x03482364 ADRP X0, 0xC71000
	0x03482368 LDR X0, [X0 + 0x758]
	0x0348236C BL 0x1C16CF4
	0x03482370 ADRP X0, 0xCAE000
	0x03482374 LDR X0, [X0 + 0xFA8]
	0x03482378 BL 0x1C16CF4
	0x0348237C ADRP X0, 0xCAE000
	0x03482380 LDR X0, [X0 + 0xE88]
	0x03482384 BL 0x1C16CF4
	0x03482388 ADRP X0, 0xCAE000
	0x0348238C LDR X0, [X0 + 0xE90]
	0x03482390 BL 0x1C16CF4
	0x03482394 ADRP X0, 0xCAE000
	0x03482398 LDR X0, [X0 + 0xE98]
	0x0348239C BL 0x1C16CF4
	0x034823A0 ADRP X0, 0xCAE000
	0x034823A4 LDR X0, [X0 + 0xBC8]
	0x034823A8 BL 0x1C16CF4
	0x034823AC ADRP X0, 0xC75000
	0x034823B0 LDR X0, [X0 + 0x110]
	0x034823B4 BL 0x1C16CF4
	0x034823B8 MOVZ W8, 0x1
	0x034823BC STRB W8, [X20 + 0x8C8]
	0x034823C0 STR X31, [X31 + 0x8]
	0x034823C4 ADRP X23, 0xCAE000
	0x034823C8 LDR W8, [X19]
	0x034823CC LDR X23, [X23 + 0xD18]
	0x034823D0 CBZ W8, 0x34824E8
	0x034823D4 LDR X20, [X19 + 0x20]
	0x034823D8 CBZ X20, 0x3482560
	0x034823DC ADD X0, X20, 0x10
	0x034823E0 MOV X1, X31
	0x034823E4 BL 0x33EB14C
	0x034823E8 ADRP X8, 0xCAE000
	0x034823EC LDR X8, [X8 + 0xBC8]
	0x034823F0 MOV W22, W0
	0x034823F4 LDR X0, [X8]
	0x034823F8 BL 0x1C16F10
	0x034823FC MOV X21, X0
	0x03482400 MOV X1, X31
	0x03482404 BL 0x33BDD8C
	0x03482408 ADRP X8, 0xC71000
	0x0348240C LDR X8, [X8 + 0x758]
	0x03482410 STR W22, [X31 + 0x4]
	0x03482414 LDR X0, [X8]
	0x03482418 ADD X1, X31, 0x4
	0x0348241C BL 0x1C16E04
	0x03482420 MOV X1, X0
	0x03482424 ADRP X8, 0xC75000
	0x03482428 LDR X8, [X8 + 0x110]
	0x0348242C LDR X0, [X8]
	0x03482430 MOV X2, X31
	0x03482434 BL 0x321EFD0
	0x03482438 CBZ X21, 0x3482564
	0x0348243C ADRP X8, 0xCAE000
	0x03482440 LDR X8, [X8 + 0xFA8]
	0x03482444 STR X0, [X21 + 0x10]
	0x03482448 LDR X0, [X8]
	0x0348244C BL 0x1C16F10
	0x03482450 MOV X22, X0
	0x03482454 MOV X1, X31
	0x03482458 BL 0x3477194
	0x0348245C CBZ X22, 0x3482568
	0x03482460 LDR X8, [X19 + 0x28]
	0x03482464 STR X8, [X22 + 0x10]
	0x03482468 STR X22, [X21 + 0x150]
	0x0348246C MOV X0, X20
	0x03482470 MOV X1, X21
	0x03482474 MOV X2, X31
	0x03482478 BL 0x347BA8C
	0x0348247C CBZ X0, 0x348256C
	0x03482480 ADRP X8, 0xCAE000
	0x03482484 LDR X8, [X8 + 0xE98]
	0x03482488 LDR X1, [X8]
	0x0348248C BL 0x269F5D0
	0x03482490 ADRP X8, 0xCAE000
	0x03482494 LDR X8, [X8 + 0xE90]
	0x03482498 STR X0, [X31 + 0x8]
	0x0348249C LDR X1, [X8]
	0x034824A0 ADD X0, X31, 0x8
	0x034824A4 BL 0x2677430
	0x034824A8 TBNZ X0, 0x0, 0x34824FC
	0x034824AC STR W31, [X19]
	0x034824B0 LDR X8, [X31 + 0x8]
	0x034824B4 STR X8, [X19 + 0x30]
	0x034824B8 LDR X0, [X23]
	0x034824BC LDR W8, [X0 + 0xE0]
	0x034824C0 CBNZ W8, 0x34824C8
	0x034824C4 BL 0x1C16DFC
	0x034824C8 ADRP X8, 0xCAE000
	0x034824CC LDR X8, [X8 + 0xF98]
	0x034824D0 ADD X0, X19, 0x8
	0x034824D4 LDR X3, [X8]
	0x034824D8 ADD X1, X31, 0x8
	0x034824DC MOV X2, X19
	0x034824E0 BL 0x1FC2700
	0x034824E4 B 0x3482548
	0x034824E8 LDR X8, [X19 + 0x30]
	0x034824EC MOVN W9, 0x0
	0x034824F0 STR X8, [X31 + 0x8]
	0x034824F4 STR X31, [X19 + 0x30]
	0x034824F8 STR W9, [X19]
	0x034824FC ADRP X8, 0xCAE000
	0x03482500 LDR X8, [X8 + 0xE88]
	0x03482504 ADD X0, X31, 0x8
	0x03482508 LDR X1, [X8]
	0x0348250C BL 0x2677474
	0x03482510 CBZ X0, 0x348255C
	0x03482514 MOVN W8, 0x1
	0x03482518 LDR X20, [X0 + 0x158]
	0x0348251C STR W8, [X19], #0x8
	0x03482520 LDR X0, [X23]
	0x03482524 ADRP X21, 0xCAE000
	0x03482528 LDR W8, [X0 + 0xE0]
	0x0348252C LDR X21, [X21 + 0xFA0]
	0x03482530 CBNZ W8, 0x3482538
	0x03482534 BL 0x1C16DFC
	0x03482538 LDR X2, [X21]
	0x0348253C MOV X0, X19
	0x03482540 MOV X1, X20
	0x03482544 BL 0x26322B0
	0x03482548 LDP X20, X19, [X31 + 0x30]
	0x0348254C LDP X22, X21, [X31 + 0x20]
	0x03482550 LDP X30, X23, [X31 + 0x10]
	0x03482554 ADD X31, X31, 0x40
	0x03482558 RET
	0x0348255C BL 0x1C16F20
	0x03482560 BL 0x1C16F20
	0x03482564 BL 0x1C16F20
	0x03482568 BL 0x1C16F20
	0x0348256C BL 0x1C16F20
	0x03482570 B 0x348259C
	0x03482574 B 0x348259C
	0x03482578 B 0x348259C
	0x0348257C B 0x348259C
	0x03482580 B 0x348259C
	0x03482584 B 0x348259C
	0x03482588 B 0x348259C
	0x0348258C B 0x348259C
	0x03482590 B 0x348259C
	0x03482594 B 0x348259C
	0x03482598 B 0x348259C
	0x0348259C MOV X20, X0
	0x034825A0 CMP W1, 0x1
	0x034825A4 B.NE 0x3482640
	0x034825A8 MOV X0, X20
	0x034825AC BL 0x3EB1AD0
	0x034825B0 MOV X20, X0
	0x034825B4 ADRP X0, 0xC71000
	0x034825B8 LDR X0, [X0 + 0x7D0]
	0x034825BC BL 0x1C16D08
	0x034825C0 LDR X8, [X20]
	0x034825C4 LDR X1, [X8]
	0x034825C8 BL 0x1C17270
	0x034825CC TBZ X0, 0x0, 0x3482618
	0x034825D0 LDR X20, [X20]
	0x034825D4 BL 0x3EB1AE0
	0x034825D8 MOVN W8, 0x1
	0x034825DC STR W8, [X19], #0x8
	0x034825E0 ADRP X0, 0xCAE000
	0x034825E4 LDR X0, [X0 + 0xD18]
	0x034825E8 BL 0x1C16D08
	0x034825EC LDR W8, [X0 + 0xE0]
	0x034825F0 CBNZ W8, 0x34825F8
	0x034825F4 BL 0x1C16DFC
	0x034825F8 ADRP X0, 0xCAE000
	0x034825FC LDR X0, [X0 + 0xFB0]
	0x03482600 BL 0x1C16D08
	0x03482604 MOV X2, X0
	0x03482608 MOV X0, X19
	0x0348260C MOV X1, X20

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0xF5C000
	013 Move W8, [X20+2240]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {60}
	019 Move X0, 0xCAF000
	020 Move X0, [X0+3880]
	021 Call 0x1C17CF4
	022 Move X0, 0xCAF000
	023 Move X0, [X0+3888]
	024 Call 0x1C17CF4
	025 Move X0, 0xCAF000
	026 Move X0, [X0+3232]
	027 Call 0x1C17CF4
	028 Move X0, 0xC72000
	029 Move X0, [X0+1880]
	030 Call 0x1C17CF4
	031 Move X0, 0xC7A000
	032 Move X0, [X0+3544]
	033 Call 0x1C17CF4
	034 Move X0, 0xC73000
	035 Move X0, [X0+448]
	036 Call 0x1C17CF4
	037 Move X0, 0xC73000
	038 Move X0, [X0+464]
	039 Call 0x1C17CF4
	040 Move X0, 0xCAF000
	041 Move X0, [X0+3896]
	042 Call 0x1C17CF4
	043 Move X0, 0xCAF000
	044 Move X0, [X0+3720]
	045 Call 0x1C17CF4
	046 Move X0, 0xCAF000
	047 Move X0, [X0+3728]
	048 Call 0x1C17CF4
	049 Move X0, 0xCAF000
	050 Move X0, [X0+3736]
	051 Call 0x1C17CF4
	052 Move X0, 0xCAF000
	053 Move X0, [X0+3016]
	054 Call 0x1C17CF4
	055 Move X0, 0xC76000
	056 Move X0, [X0+272]
	057 Call 0x1C17CF4
	058 Move W8, 1
	059 Move [X20+2240], W8
	060 Move [X31+8], X31
	061 Move X25, 0xCAF000
	062 Move W8, [X19]
	063 Move X25, [X25+3232]
	064 Compare W8, 0
	065 JumpIfEqual {125}
	066 Move X20, [X19+32]
	067 Compare X20, 0
	068 JumpIfEqual {211}
	069 Add X0, X20, 16
	070 Move X1, X31
	071 Call Interlocked.Increment, X0
	072 Move X8, 0xCAF000
	073 Move X8, [X8+3016]
	074 Move W22, W0
	075 Move X0, [X8]
	076 Call 0x1C17F10
	077 Move X21, X0
	078 Move X1, X31
	079 Call Object..ctor, X0
	080 Move X8, 0xC72000
	081 Move X8, [X8+1880]
	082 Move [X31+4], W22
	083 Move X0, [X8]
	084 Add X1, X31, 4
	085 Call 0x1C17E04
	086 Move X1, X0
	087 Move X8, 0xC76000
	088 Move X8, [X8+272]
	089 Move X0, [X8]
	090 Move X2, X31
	091 Call String.Format, X0, X1
	092 Compare X21, 0
	093 JumpIfEqual {212}
	094 Move X8, 0xCAF000
	095 Move X8, [X8+3896]
	096 Move [X21+16], X0
	097 Move X0, [X8]
	098 Call 0x1C17F10
	099 Move X22, X0
	100 Move X1, X31
	101 Call Object..ctor, X0
	102 Move X27, 0xC73000
	103 Move X27, [X27+464]
	104 Move X24, [X19+40]
	105 Move X0, [X27]
	106 Call 0x1C17F10
	107 Move X26, 0xC7A000
	108 Move X26, [X26+3544]
	109 Move X23, X0
	110 Move X2, [X26]
	111 Move X1, X24
	112 Call List`1<Object>..ctor, X0, X1
	113 Compare X22, 0
	114 JumpIfEqual {213}
	115 Move [X22+16], X23
	116 Move X24, [X19+48]
	117 Move X0, [X27]
	118 Compare X24, 0
	119 JumpIfEqual {132}
	120 Call 0x1C17F10
	121 Move X2, [X26]
	122 Move X23, X0
	123 Move X1, X24
	124 Call List`1<Object>..ctor, X0, X1
	125 Move X8, [X19+56]
	126 Move TEMP, 0
	127 Not TEMP
	128 Move W9, TEMP
	129 Move [X31+8], X8
	130 Move [X19+56], X31
	131 Move [X19], W9
	132 Call 0x1C17F10
	133 Move X8, 0xC73000
	134 Move X8, [X8+448]
	135 Move X23, X0
	136 Move X1, [X8]
	137 Call List`1<Object>..ctor, X0
	138 Move [X22+24], X23
	139 Move [X21+216], X22
	140 Move X0, X20
	141 Move X1, X21
	142 Move X2, X31
	143 Call Socket.SendAsync, X0, X1
	144 Compare X0, 0
	145 JumpIfEqual {214}
	146 Move X8, 0xCAF000
	147 Move X8, [X8+3736]
	148 Move X1, [X8]
	149 Call Task`1<Object>.GetAwaiter, X0
	150 Move X8, 0xCAF000
	151 Move X8, [X8+3728]
	152 Move [X31+8], X0
	153 Move X1, [X8]
	154 Add X0, X31, 8
	155 Call TaskAwaiter`1<Object>.get_IsCompleted, X0
	156 Move TEMP, X0
	157 And TEMP, TEMP, 1
	158 Compare TEMP, 1
	159 JumpIfNotEqual {183}
	160 Move X8, 0xCAF000
	161 Move X8, [X8+3720]
	162 Add X0, X31, 8
	163 Move X1, [X8]
	164 Call TaskAwaiter`1<Object>.GetResult, X0
	165 Compare X0, 0
	166 JumpIfEqual {210}
	167 Move TEMP, 1
	168 Not TEMP
	169 Move W8, TEMP
	170 Move X20, [X0+208]
	171 Move [X19+8], W8
	172 Move X0, [X25]
	173 Move X21, 0xCAF000
	174 Move W8, [X0+224]
	175 Move X21, [X21+3888]
	176 Compare W8, 0
	177 JumpIfNotEqual {179}
	178 Call 0x1C17DFC
	179 Move X2, [X21]
	180 Move X0, X19
	181 Move X1, X20
	182 Call AsyncTaskMethodBuilder`1<Object>.SetResult, X0, X1
	183 Move [X19], W31
	184 Move X8, [X31+8]
	185 Move [X19+56], X8
	186 Move X0, [X25]
	187 Move W8, [X0+224]
	188 Compare W8, 0
	189 JumpIfNotEqual {191}
	190 Call 0x1C17DFC
	191 Move X8, 0xCAF000
	192 Move X8, [X8+3880]
	193 Add X0, X19, 8
	194 Move X3, [X8]
	195 Add X1, X31, 8
	196 Move X2, X19
	197 Call AsyncTaskMethodBuilder`1<Object>.AwaitUnsafeOnCompleted, X0, X1, X2
	198 Move X20, [X31+80]
	199 Move X19, [X31+88]
	200 Move X22, [X31+64]
	201 Move X21, [X31+72]
	202 Move X24, [X31+48]
	203 Move X23, [X31+56]
	204 Move X26, [X31+32]
	205 Move X25, [X31+40]
	206 Move X30, [X31+16]
	207 Move X27, [X31+24]
	208 Add X31, X31, 96
	209 Return 
	210 Call 0x1C17F20
	211 Call 0x1C17F20
	212 Call 0x1C17F20
	213 Call 0x1C17F20
	214 Call 0x1C17F20
	215 Move X20, X0
	216 NotImplemented "Instruction CMP not yet implemented."
	217 Move X0, X20
	218 Call 0x3EB2AD0
	219 Move X20, X0
	220 Move X0, 0xC72000
	221 Move X0, [X0+2000]
	222 Call 0x1C17D08
	223 Move X8, [X20]
	224 Move X1, [X8]
	225 Call 0x1C18270
	226 Move TEMP, X0
	227 And TEMP, TEMP, 1
	228 Compare TEMP, 1
	229 JumpIfNotEqual {250}
	230 Move X20, [X20]
	231 Call 0x3EB2AE0
	232 Move TEMP, 1
	233 Not TEMP
	234 Move W8, TEMP
	235 Move [X19+8], W8
	236 Move X0, 0xCAF000
	237 Move X0, [X0+3232]
	238 Call 0x1C17D08
	239 Move W8, [X0+224]
	240 Compare W8, 0
	241 JumpIfNotEqual {243}
	242 Call 0x1C17DFC
	243 Move X0, 0xCAF000
	244 Move X0, [X0+3904]
	245 Call 0x1C17D08
	246 Move X2, X0
	247 Move X0, X19
	248 Move X1, X20
	249 Call AsyncTaskMethodBuilder`1<Object>.SetException, X0, X1
	250 Move W0, 8
	251 Call 0x3EB2AF0
	252 Move X8, [X20]
	253 Move [X0], X8
	254 Move X1, 0xA33000
	255 Add X1, X1, 3672
	256 Move X2, X31
	257 Call 0x3EB2B00
	258 Move X20, X0
	259 Call 0x3EB2AE0
	260 Move X0, X20
	261 Call 0x1D2D690
	262 Call 0x1991590

Method: System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)

Disassembly:
	0x03482618 MOVZ W0, 0x8
	0x0348261C BL 0x3EB1AF0
	0x03482620 LDR X8, [X20]
	0x03482624 STR X8, [X0]
	0x03482628 ADRP X1, 0xA32000
	0x0348262C ADD X1, X1, 0xE58
	0x03482630 MOV X2, X31
	0x03482634 BL 0x3EB1B00
	0x03482638 MOV X20, X0
	0x0348263C BL 0x3EB1AE0
	0x03482640 MOV X0, X20
	0x03482644 BL 0x1D2C690
	0x03482648 BL 0x1990590
	0x0348264C STR X30, [X31 - 0x30]!
	0x03482650 STP X22, X21, [X31 + 0x10]
	0x03482654 STP X20, X19, [X31 + 0x20]
	0x03482658 ADRP X22, 0xF5B000
	0x0348265C ADRP X21, 0xCAE000
	0x03482660 LDRB W8, [X22 + 0x8C9]
	0x03482664 LDR X21, [X21 + 0xD18]
	0x03482668 MOV X19, X1
	0x0348266C MOV X20, X0
	0x03482670 TBNZ X8, 0x0, 0x3482694
	0x03482674 ADRP X0, 0xCAE000
	0x03482678 LDR X0, [X0 + 0xFB8]
	0x0348267C BL 0x1C16CF4
	0x03482680 ADRP X0, 0xCAE000
	0x03482684 LDR X0, [X0 + 0xD18]
	0x03482688 BL 0x1C16CF4
	0x0348268C MOVZ W8, 0x1
	0x03482690 STRB W8, [X22 + 0x8C9]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xF5C000
	007 Move X21, 0xCAF000
	008 Move W8, [X22+2241]
	009 Move X21, [X21+3232]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xCAF000
	017 Move X0, [X0+3912]
	018 Call 0x1C17CF4
	019 Move X0, 0xCAF000
	020 Move X0, [X0+3232]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2241], W8
	024 Move X0, [X21]
	025 Move X21, 0xCAF000
	026 Move W8, [X0+224]
	027 Move X21, [X21+3912]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X2, [X21]
	032 Add X0, X20, 8
	033 Move X1, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Call AsyncTaskMethodBuilder`1<Object>.SetStateMachine, X0, X1
	040 Return 

