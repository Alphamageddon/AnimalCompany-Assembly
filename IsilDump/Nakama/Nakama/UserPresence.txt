Type: Nakama.UserPresence

Method: System.Boolean get_Persistence()

Disassembly:
	0x03476A40 ADD X31, X31, 0x40
	0x03476A44 RET

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_Persistence(System.Boolean value)

Disassembly:
	0x03476A48 MOV X1, X31
	0x03476A4C B 0x33BDD8C
	0x03476A50 LDR X0, [X0 + 0x10]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.String get_SessionId()

Disassembly:
	0x03476A54 RET
	0x03476A58 STR X1, [X0 + 0x10]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_SessionId(System.String value)

Disassembly:
	0x03476A5C RET
	0x03476A60 LDR X0, [X0 + 0x18]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.String get_Status()

Disassembly:
	0x03476A64 RET
	0x03476A68 LDR X0, [X0 + 0x18]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_Status(System.String value)

Disassembly:
	0x03476A6C RET
	0x03476A70 STR X1, [X0 + 0x18]

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String get_Username()

Disassembly:
	0x03476A74 RET
	0x03476A78 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_Username(System.String value)

Disassembly:
	0x03476A7C STP X20, X19, [X31 + 0x10]
	0x03476A80 ADRP X21, 0xF67000

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.String get_UserId()

Disassembly:
	0x03476A84 ADRP X20, 0xC86000
	0x03476A88 LDRB W8, [X21 + 0x82E]

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_UserId(System.String value)

Disassembly:
	0x03476A8C LDR X20, [X20 + 0x9E8]
	0x03476A90 MOV X19, X0

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03476A94 TBNZ X8, 0x0, 0x3476AAC
	0x03476A98 ADRP X0, 0xC86000
	0x03476A9C LDR X0, [X0 + 0x9E8]
	0x03476AA0 BL 0x1C16CF4
	0x03476AA4 MOVZ W8, 0x1
	0x03476AA8 STRB W8, [X21 + 0x82E]
	0x03476AAC LDR X0, [X20]
	0x03476AB0 LDR X19, [X19 + 0x20]
	0x03476AB4 LDR W8, [X0 + 0xE0]
	0x03476AB8 CBNZ W8, 0x3476AC0
	0x03476ABC BL 0x1C16DFC
	0x03476AC0 MOV X0, X19
	0x03476AC4 LDP X20, X19, [X31 + 0x10]
	0x03476AC8 MOV X1, X31
	0x03476ACC LDP X30, X21, [X31], #0x20
	0x03476AD0 B 0x3320F8C
	0x03476AD4 LDR X0, [X0 + 0x20]
	0x03476AD8 RET
	0x03476ADC STR X1, [X0 + 0x20]
	0x03476AE0 RET
	0x03476AE4 STR X30, [X31 - 0x20]!
	0x03476AE8 STP X20, X19, [X31 + 0x10]
	0x03476AEC ADRP X20, 0xF67000
	0x03476AF0 LDRB W8, [X20 + 0x82F]
	0x03476AF4 MOV X19, X0
	0x03476AF8 TBNZ X8, 0x0, 0x3476B1C
	0x03476AFC ADRP X0, 0xC86000
	0x03476B00 LDR X0, [X0 + 0x9E8]
	0x03476B04 BL 0x1C16CF4
	0x03476B08 ADRP X0, 0xCBA000
	0x03476B0C LDR X0, [X0 + 0xA20]
	0x03476B10 BL 0x1C16CF4
	0x03476B14 MOVZ W8, 0x1
	0x03476B18 STRB W8, [X20 + 0x82F]
	0x03476B1C LDR X19, [X19 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xF68000
	006 Move W8, [X21+2078]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xCBB000
	014 Move X0, [X0+2056]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2078], W8
	018 Compare X19, 0
	019 JumpIfEqual {31}
	020 Move X8, 0xCBB000
	021 Move X8, [X8+2056]
	022 Move X9, [X19]
	023 Move X8, [X8]
	024 Move W11, [X9+304]
	025 Move W10, [X8+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X9, [X9+200]
	028 Add X9, X9, X10
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move W0, W31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]

Method: System.Boolean Equals(Nakama.IUserPresence other)

Disassembly:
	0x03476B20 CBZ X19, 0x3476B50
	0x03476B24 ADRP X8, 0xC86000
	0x03476B28 LDR X8, [X8 + 0x9E8]
	0x03476B2C LDR X0, [X8]
	0x03476B30 LDR W8, [X0 + 0xE0]
	0x03476B34 CBNZ W8, 0x3476B3C
	0x03476B38 BL 0x1C16DFC
	0x03476B3C MOV X0, X19
	0x03476B40 LDP X20, X19, [X31 + 0x10]
	0x03476B44 MOV X1, X31
	0x03476B48 LDR X30, [X31], #0x20
	0x03476B4C B 0x3322D04
	0x03476B50 ADRP X19, 0xCBA000
	0x03476B54 LDR X19, [X19 + 0xA20]
	0x03476B58 LDR X0, [X19]
	0x03476B5C LDR W8, [X0 + 0xE0]
	0x03476B60 CBNZ W8, 0x3476B6C
	0x03476B64 BL 0x1C16DFC
	0x03476B68 LDR X0, [X19]
	0x03476B6C LDR X8, [X0 + 0xB8]
	0x03476B70 LDP X20, X19, [X31 + 0x10]
	0x03476B74 LDR X0, [X8]
	0x03476B78 LDR X30, [X31], #0x20
	0x03476B7C RET
	0x03476B80 LDR X0, [X0 + 0x28]
	0x03476B84 RET
	0x03476B88 STR X1, [X0 + 0x28]
	0x03476B8C RET
	0x03476B90 STR X30, [X31 - 0x30]!
	0x03476B94 STP X22, X21, [X31 + 0x10]
	0x03476B98 STP X20, X19, [X31 + 0x20]
	0x03476B9C ADRP X20, 0xF67000
	0x03476BA0 ADRP X21, 0xC7D000
	0x03476BA4 LDRB W8, [X20 + 0x830]
	0x03476BA8 LDR X21, [X21 + 0x9D0]
	0x03476BAC MOV X19, X0
	0x03476BB0 TBNZ X8, 0x0, 0x3476BE0
	0x03476BB4 ADRP X0, 0xC7F000
	0x03476BB8 LDR X0, [X0 + 0xA60]
	0x03476BBC BL 0x1C16CF4
	0x03476BC0 ADRP X0, 0xC7D000
	0x03476BC4 LDR X0, [X0 + 0x9D0]
	0x03476BC8 BL 0x1C16CF4
	0x03476BCC ADRP X0, 0xCBA000
	0x03476BD0 LDR X0, [X0 + 0xA28]
	0x03476BD4 BL 0x1C16CF4
	0x03476BD8 MOVZ W8, 0x1
	0x03476BDC STRB W8, [X20 + 0x830]
	0x03476BE0 LDR X0, [X21]
	0x03476BE4 MOVZ W1, 0x4
	0x03476BE8 BL 0x1C16D6C
	0x03476BEC CBZ X0, 0x3476D04
	0x03476BF0 LDR X21, [X19 + 0x10]
	0x03476BF4 MOV X20, X0
	0x03476BF8 CBZ X21, 0x3476C10
	0x03476BFC LDR X8, [X20]
	0x03476C00 MOV X0, X21
	0x03476C04 LDR X1, [X8 + 0x40]
	0x03476C08 BL 0x1C16E00
	0x03476C0C CBZ X0, 0x3476CF8
	0x03476C10 LDR W8, [X20 + 0x18]
	0x03476C14 CBZ W8, 0x3476CF4
	0x03476C18 STR X21, [X20 + 0x20]
	0x03476C1C LDR X21, [X19 + 0x18]
	0x03476C20 CBZ X21, 0x3476C3C
	0x03476C24 LDR X8, [X20]
	0x03476C28 MOV X0, X21
	0x03476C2C LDR X1, [X8 + 0x40]
	0x03476C30 BL 0x1C16E00
	0x03476C34 CBZ X0, 0x3476CF8
	0x03476C38 LDR W8, [X20 + 0x18]
	0x03476C3C CMP W8, 0x1
	0x03476C40 B.LS 0x3476CF4
	0x03476C44 ADRP X22, 0xC7F000
	0x03476C48 LDR X22, [X22 + 0xA60]
	0x03476C4C MOV X0, X19
	0x03476C50 STR X21, [X20 + 0x28]
	0x03476C54 BL 0x3476A78
	0x03476C58 LDR X8, [X22]
	0x03476C5C STR X0, [X31 + 0x8]
	0x03476C60 ADD X1, X31, 0x8
	0x03476C64 MOV X0, X8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xF68000
	007 Move W8, [X21+2079]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xC7E000
	015 Move X0, [X0+3936]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2079], W8
	019 Compare X19, 0
	020 JumpIfEqual {94}
	021 Move X22, 0xC7E000
	022 Move X8, [X19]
	023 Move X22, [X22+3936]
	024 Move X21, [X20+24]
	025 NotImplemented "Instruction LDRH not yet implemented."
	026 Move X1, [X22]
	027 Compare X9, 0
	028 JumpIfEqual {35}
	029 Move X10, [X8+176]
	030 Add X10, X10, 8
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Subtract X9, X9, 1
	034 Add X10, X10, 16
	035 Move W2, 1
	036 Move X0, X19
	037 Call 0x1C5D788
	038 Move W9, [X10]
	039 Add W9, W9, 1
	040 Add X8, X8, W9
	041 Add X0, X8, 312
	042 Move X8, [X0]
	043 Move X1, [X0+8]
	044 Move X0, X19
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move X1, X0
	047 Move X0, X21
	048 Move X2, X31
	049 Call String.Equals, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {69}
	054 Move X8, [X19]
	055 Move X20, [X20+48]
	056 Move X1, [X22]
	057 NotImplemented "Instruction LDRH not yet implemented."
	058 Compare X9, 0
	059 JumpIfEqual {66}
	060 Move X10, [X8+176]
	061 Add X10, X10, 8
	062 NotImplemented "Instruction LDUR not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Subtract X9, X9, 1
	065 Add X10, X10, 16
	066 Move W2, 4
	067 Move X0, X19
	068 Call 0x1C5D788
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move W0, W31
	074 Move X30, [X31+48]
	075 Return X0
	076 Move W9, [X10]
	077 Add W9, W9, 4
	078 Add X8, X8, W9
	079 Add X0, X8, 312
	080 Move X8, [X0]
	081 Move X1, [X0+8]
	082 Move X0, X19
	083 NotImplemented "Instruction BLR not yet implemented."
	084 Move X1, X0
	085 Move X0, X20
	086 Move X20, [X31+32]
	087 Move X19, [X31+40]
	088 Move X22, [X31+16]
	089 Move X21, [X31+24]
	090 Move X2, X31
	091 Move X30, [X31+48]
	092 Call String.Equals, X0, X1
	093 Return X0
	094 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x03476C68 BL 0x1C16E04
	0x03476C6C MOV X21, X0
	0x03476C70 CBZ X0, 0x3476C88
	0x03476C74 LDR X8, [X20]
	0x03476C78 MOV X0, X21
	0x03476C7C LDR X1, [X8 + 0x40]
	0x03476C80 BL 0x1C16E00
	0x03476C84 CBZ X0, 0x3476CF8
	0x03476C88 LDR W8, [X20 + 0x18]
	0x03476C8C CMP W8, 0x2
	0x03476C90 B.LS 0x3476CF4
	0x03476C94 MOV X0, X19
	0x03476C98 STR X21, [X20 + 0x30]
	0x03476C9C BL 0x3476AE4
	0x03476CA0 MOV X19, X0
	0x03476CA4 CBZ X0, 0x3476CBC
	0x03476CA8 LDR X8, [X20]
	0x03476CAC MOV X0, X19
	0x03476CB0 LDR X1, [X8 + 0x40]
	0x03476CB4 BL 0x1C16E00
	0x03476CB8 CBZ X0, 0x3476CF8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+24]
	006 Compare X0, 0
	007 JumpIfEqual {14}
	008 Move X8, [X0]
	009 Move X9, [X8+344]
	010 Move X1, [X8+352]
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Move W8, 397
	013 Multiply W20, W0, W8
	014 Move W20, W31
	015 Move X0, [X19+48]
	016 Compare X0, 0
	017 JumpIfEqual {22}
	018 Move X8, [X0]
	019 Move X9, [X8+344]
	020 Move X1, [X8+352]
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Xor W0, W0, W20
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return X0

Method: System.String ToString()

Disassembly:
	0x03476CBC LDR W8, [X20 + 0x18]
	0x03476CC0 CMP W8, 0x3
	0x03476CC4 B.LS 0x3476CF4
	0x03476CC8 ADRP X8, 0xCBA000
	0x03476CCC LDR X8, [X8 + 0xA28]
	0x03476CD0 STR X19, [X20 + 0x38]
	0x03476CD4 MOV X1, X20
	0x03476CD8 MOV X2, X31
	0x03476CDC LDR X0, [X8]
	0x03476CE0 BL 0x3227C5C
	0x03476CE4 LDP X20, X19, [X31 + 0x20]
	0x03476CE8 LDP X22, X21, [X31 + 0x10]
	0x03476CEC LDR X30, [X31], #0x30
	0x03476CF0 RET
	0x03476CF4 BL 0x1C16F28
	0x03476CF8 BL 0x1C16F44
	0x03476CFC MOV X1, X31
	0x03476D00 BL 0x1C16DEC
	0x03476D04 BL 0x1C16F20
	0x03476D08 MOV X1, X31
	0x03476D0C B 0x33BDD8C
	0x03476D10 STP X30, X21, [X31 - 0x20]!
	0x03476D14 STP X20, X19, [X31 + 0x10]
	0x03476D18 ADRP X20, 0xF67000
	0x03476D1C ADRP X21, 0xC7D000
	0x03476D20 ADRP X19, 0xCBA000
	0x03476D24 LDRB W8, [X20 + 0x831]
	0x03476D28 LDR X21, [X21 + 0x618]
	0x03476D2C LDR X19, [X19 + 0xA20]
	0x03476D30 TBNZ X8, 0x0, 0x3476D54
	0x03476D34 ADRP X0, 0xC7D000
	0x03476D38 LDR X0, [X0 + 0x618]
	0x03476D3C BL 0x1C16CF4
	0x03476D40 ADRP X0, 0xCBA000
	0x03476D44 LDR X0, [X0 + 0xA20]
	0x03476D48 BL 0x1C16CF4
	0x03476D4C MOVZ W8, 0x1
	0x03476D50 STRB W8, [X20 + 0x831]
	0x03476D54 LDR X0, [X21]
	0x03476D58 MOV W1, W31
	0x03476D5C BL 0x1C16D6C
	0x03476D60 LDR X8, [X19]
	0x03476D64 LDP X20, X19, [X31 + 0x10]
	0x03476D68 LDR X8, [X8 + 0xB8]
	0x03476D6C STR X0, [X8]
	0x03476D70 LDP X30, X21, [X31], #0x20
	0x03476D74 RET
	0x03476D78 LDR X0, [X0 + 0x10]
	0x03476D7C RET
	0x03476D80 STR X1, [X0 + 0x10]
	0x03476D84 RET
	0x03476D88 LDR X0, [X0 + 0x18]
	0x03476D8C RET
	0x03476D90 STR X1, [X0 + 0x18]
	0x03476D94 RET
	0x03476D98 LDR X0, [X0 + 0x20]
	0x03476D9C RET
	0x03476DA0 STR X1, [X0 + 0x20]
	0x03476DA4 RET
	0x03476DA8 STP X30, X21, [X31 - 0x20]!
	0x03476DAC STP X20, X19, [X31 + 0x10]
	0x03476DB0 ADRP X20, 0xF67000
	0x03476DB4 ADRP X21, 0xC7D000
	0x03476DB8 LDRB W8, [X20 + 0x832]
	0x03476DBC LDR X21, [X21 + 0xAC8]
	0x03476DC0 MOV X19, X0
	0x03476DC4 TBNZ X8, 0x0, 0x3476E0C
	0x03476DC8 ADRP X0, 0xC7D000
	0x03476DCC LDR X0, [X0 + 0xAC8]
	0x03476DD0 BL 0x1C16CF4
	0x03476DD4 ADRP X0, 0xCBA000
	0x03476DD8 LDR X0, [X0 + 0xA30]
	0x03476DDC BL 0x1C16CF4
	0x03476DE0 ADRP X0, 0xCB9000
	0x03476DE4 LDR X0, [X0 + 0x5B8]
	0x03476DE8 BL 0x1C16CF4
	0x03476DEC ADRP X0, 0xCBA000
	0x03476DF0 LDR X0, [X0 + 0x9E0]
	0x03476DF4 BL 0x1C16CF4
	0x03476DF8 ADRP X0, 0xCBA000
	0x03476DFC LDR X0, [X0 + 0xA38]
	0x03476E00 BL 0x1C16CF4
	0x03476E04 MOVZ W8, 0x1
	0x03476E08 STRB W8, [X20 + 0x832]
	0x03476E0C LDR X0, [X21]
	0x03476E10 MOVZ W1, 0x7
	0x03476E14 BL 0x1C16D6C
	0x03476E18 CBZ X0, 0x3476EC0
	0x03476E1C LDR W8, [X0 + 0x18]
	0x03476E20 CBZ W8, 0x3476EBC
	0x03476E24 ADRP X9, 0xCBA000
	0x03476E28 LDR X9, [X9 + 0xA30]
	0x03476E2C CMP W8, 0x1
	0x03476E30 LDR X9, [X9]
	0x03476E34 STR X9, [X0 + 0x20]
	0x03476E38 B.EQ 0x3476EBC
	0x03476E3C LDR X9, [X19 + 0x10]
	0x03476E40 CMP W8, 0x2
	0x03476E44 STR X9, [X0 + 0x28]
	0x03476E48 B.LS 0x3476EBC
	0x03476E4C ADRP X9, 0xCBA000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xF68000
	007 Move X22, 0xC7E000
	008 Move X21, 0xC7E000
	009 Move W8, [X19+2080]
	010 Move X22, [X22+2512]
	011 Move X21, [X21+2904]
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xC7E000
	018 Move X0, [X0+2904]
	019 Call 0x1C17CF4
	020 Move X0, 0xC7E000
	021 Move X0, [X0+2512]
	022 Call 0x1C17CF4
	023 Move X0, 0xCBB000
	024 Move X0, [X0+2456]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X19+2080], W8
	028 Move X0, [X22]
	029 Move W1, 5
	030 Call 0x1C17D6C
	031 Move X19, X0
	032 Move W8, [X20+16]
	033 Move X0, [X21]
	034 Add X1, X31, 12
	035 Move [X31+12], W8
	036 Call 0x1C17E04
	037 Compare X19, 0
	038 JumpIfEqual {116}
	039 Move X21, X0
	040 Compare X0, 0
	041 JumpIfEqual {48}
	042 Move X8, [X19]
	043 Move X0, X21
	044 Move X1, [X8+64]
	045 Call 0x1C17E00
	046 Compare X0, 0
	047 JumpIfEqual {113}
	048 Move W8, [X19+24]
	049 Compare W8, 0
	050 JumpIfEqual {112}
	051 Move [X19+32], X21
	052 Move X21, [X20+24]
	053 Compare X21, 0
	054 JumpIfEqual {62}
	055 Move X8, [X19]
	056 Move X0, X21
	057 Move X1, [X8+64]
	058 Call 0x1C17E00
	059 Compare X0, 0
	060 JumpIfEqual {113}
	061 Move W8, [X19+24]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move [X19+40], X21
	064 Move X21, [X20+32]
	065 Compare X21, 0
	066 JumpIfEqual {74}
	067 Move X8, [X19]
	068 Move X0, X21
	069 Move X1, [X8+64]
	070 Call 0x1C17E00
	071 Compare X0, 0
	072 JumpIfEqual {113}
	073 Move W8, [X19+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move [X19+48], X21
	076 Move X21, [X20+40]
	077 Compare X21, 0
	078 JumpIfEqual {86}
	079 Move X8, [X19]
	080 Move X0, X21
	081 Move X1, [X8+64]
	082 Call 0x1C17E00
	083 Compare X0, 0
	084 JumpIfEqual {113}
	085 Move W8, [X19+24]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move [X19+56], X21
	088 Move X20, [X20+48]
	089 Compare X20, 0
	090 JumpIfEqual {98}
	091 Move X8, [X19]
	092 Move X0, X20
	093 Move X1, [X8+64]
	094 Call 0x1C17E00
	095 Compare X0, 0
	096 JumpIfEqual {113}
	097 Move W8, [X19+24]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move X8, 0xCBB000
	100 Move X8, [X8+2456]
	101 Move [X19+64], X20
	102 Move X1, X19
	103 Move X2, X31
	104 Move X0, [X8]
	105 Call String.Format, X0, X1
	106 Move X20, [X31+32]
	107 Move X19, [X31+40]
	108 Move X22, [X31+16]
	109 Move X21, [X31+24]
	110 Move X30, [X31+48]
	111 Return X0
	112 Call 0x1C17F28
	113 Call 0x1C17F44
	114 Move X1, X31
	115 Call 0x1C17DEC
	116 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03476E50 LDR X9, [X9 + 0x9E0]
	0x03476E54 CMP W8, 0x3

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x03476E58 LDR X9, [X9]
	0x03476E5C STR X9, [X0 + 0x30]
	0x03476E60 B.EQ 0x3476EBC
	0x03476E64 LDR X9, [X19 + 0x18]
	0x03476E68 CMP W8, 0x4
	0x03476E6C STR X9, [X0 + 0x38]
	0x03476E70 B.LS 0x3476EBC
	0x03476E74 ADRP X9, 0xCBA000
	0x03476E78 LDR X9, [X9 + 0xA38]
	0x03476E7C CMP W8, 0x5
	0x03476E80 LDR X9, [X9]
	0x03476E84 STR X9, [X0 + 0x40]
	0x03476E88 B.EQ 0x3476EBC
	0x03476E8C LDR X9, [X19 + 0x20]
	0x03476E90 CMP W8, 0x6
	0x03476E94 STR X9, [X0 + 0x48]
	0x03476E98 B.LS 0x3476EBC
	0x03476E9C ADRP X8, 0xCB9000
	0x03476EA0 LDR X8, [X8 + 0x5B8]
	0x03476EA4 LDP X20, X19, [X31 + 0x10]
	0x03476EA8 MOV X1, X31
	0x03476EAC LDR X8, [X8]
	0x03476EB0 STR X8, [X0 + 0x50]
	0x03476EB4 LDP X30, X21, [X31], #0x20
	0x03476EB8 B 0x32278CC
	0x03476EBC BL 0x1C16F28
	0x03476EC0 BL 0x1C16F20
	0x03476EC4 MOV X1, X31
	0x03476EC8 B 0x33BDD8C
	0x03476ECC LDR X0, [X0 + 0x10]
	0x03476ED0 RET
	0x03476ED4 STR X1, [X0 + 0x10]
	0x03476ED8 RET
	0x03476EDC STR X30, [X31 - 0x30]!
	0x03476EE0 STP X22, X21, [X31 + 0x10]
	0x03476EE4 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xF68000
	007 Move X22, 0xCBB000
	008 Move X19, 0xCBB000
	009 Move X20, 0xCBB000
	010 Move W8, [X21+2081]
	011 Move X22, [X22+2104]
	012 Move X19, [X19+2096]
	013 Move X20, [X20+2056]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xCBB000
	019 Move X0, [X0+2096]
	020 Call 0x1C17CF4
	021 Move X0, 0xCBB000
	022 Move X0, [X0+2104]
	023 Call 0x1C17CF4
	024 Move X0, 0xCBB000
	025 Move X0, [X0+2056]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+2081], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X2, [X19]
	032 Move W1, W31
	033 Move X19, X0
	034 Call List`1<Object>..ctor, X0, X1
	035 Move X8, [X20]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X8, [X8+184]
	039 Move [X8], X19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X30, [X31+48]
	043 Return 

