Type: Nakama.ApiStorageObject

Method: System.String get_Collection()

Disassembly:
	0x03409C00 CBZ X0, 0x340A824
	0x03409C04 LDR W8, [X20 + 0x18]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_Collection(System.String value)

Disassembly:
	0x03409C08 CMP W8, 0x3
	0x03409C0C B.LS 0x340A820

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.String get_CreateTime()

Disassembly:
	0x03409C10 LDR X8, [X23]
	0x03409C14 MOV X0, X20

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_CreateTime(System.String value)

Disassembly:
	0x03409C18 MOV X1, X31
	0x03409C1C STR X8, [X20 + 0x38]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.String get_Key()

Disassembly:
	0x03409C20 BL 0x3227578
	0x03409C24 LDR X8, [X22]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_Key(System.String value)

Disassembly:
	0x03409C28 MOV X21, X0
	0x03409C2C MOVZ W1, 0x4

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.Int32 get_PermissionRead()

Disassembly:
	0x03409C30 MOV X0, X8
	0x03409C34 BL 0x1C16D6C

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_PermissionRead(System.Int32 value)

Disassembly:
	0x03409C38 CBZ X0, 0x340A830
	0x03409C3C MOV X20, X0

ISIL:
	001 Move [X0+40], W1
	002 Return 

Method: System.Int32 get_PermissionWrite()

Disassembly:
	0x03409C40 CBZ X21, 0x3409C58
	0x03409C44 LDR X8, [X20]

ISIL:
	001 Move W0, [X0+44]
	002 Return X0

Method: System.Void set_PermissionWrite(System.Int32 value)

Disassembly:
	0x03409C48 MOV X0, X21
	0x03409C4C LDR X1, [X8 + 0x40]

ISIL:
	001 Move [X0+44], W1
	002 Return 

Method: System.String get_UpdateTime()

Disassembly:
	0x03409C50 BL 0x1C16E00
	0x03409C54 CBZ X0, 0x340A824

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_UpdateTime(System.String value)

Disassembly:
	0x03409C58 LDR W8, [X20 + 0x18]
	0x03409C5C CBZ W8, 0x340A820

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.String get_UserId()

Disassembly:
	0x03409C60 ADRP X25, 0xD25000
	0x03409C64 LDR X25, [X25 + 0x130]

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_UserId(System.String value)

Disassembly:
	0x03409C68 STR X21, [X20 + 0x20]
	0x03409C6C LDR X0, [X25]

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.String get_Value()

Disassembly:
	0x03409C70 CBZ X0, 0x3409C88
	0x03409C74 LDR X8, [X20]

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_Value(System.String value)

Disassembly:
	0x03409C78 LDR X1, [X8 + 0x40]
	0x03409C7C BL 0x1C16E00

ISIL:
	001 Move [X0+64], X1
	002 Return 

Method: System.String get_Version()

Disassembly:
	0x03409C80 CBZ X0, 0x340A824
	0x03409C84 LDR W8, [X20 + 0x18]

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Void set_Version(System.String value)

Disassembly:
	0x03409C88 CMP W8, 0x1
	0x03409C8C B.LS 0x340A820

ISIL:
	001 Move [X0+72], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x03409C90 LDR X8, [X25]
	0x03409C94 ADD X1, X31, 0x38
	0x03409C98 STR X8, [X20 + 0x28]
	0x03409C9C LDRB W8, [X19 + 0x11]
	0x03409CA0 LDR X0, [X24]
	0x03409CA4 STRB W8, [X31 + 0x38]
	0x03409CA8 BL 0x1C16E04
	0x03409CAC MOV X21, X0
	0x03409CB0 CBZ X0, 0x3409CC8
	0x03409CB4 LDR X8, [X20]
	0x03409CB8 MOV X0, X21
	0x03409CBC LDR X1, [X8 + 0x40]
	0x03409CC0 BL 0x1C16E00
	0x03409CC4 CBZ X0, 0x340A824
	0x03409CC8 LDR W8, [X20 + 0x18]
	0x03409CCC CMP W8, 0x2
	0x03409CD0 B.LS 0x340A820
	0x03409CD4 STR X21, [X20 + 0x30]
	0x03409CD8 LDR X0, [X23]
	0x03409CDC CBZ X0, 0x3409CF4
	0x03409CE0 LDR X8, [X20]
	0x03409CE4 LDR X1, [X8 + 0x40]
	0x03409CE8 BL 0x1C16E00
	0x03409CEC CBZ X0, 0x340A824
	0x03409CF0 LDR W8, [X20 + 0x18]
	0x03409CF4 CMP W8, 0x3
	0x03409CF8 B.LS 0x340A820
	0x03409CFC LDR X8, [X23]
	0x03409D00 MOV X0, X20
	0x03409D04 MOV X1, X31
	0x03409D08 STR X8, [X20 + 0x38]
	0x03409D0C BL 0x3227578
	0x03409D10 LDR X8, [X22]
	0x03409D14 MOV X21, X0
	0x03409D18 MOVZ W1, 0x4
	0x03409D1C MOV X0, X8
	0x03409D20 BL 0x1C16D6C
	0x03409D24 CBZ X0, 0x340A830
	0x03409D28 MOV X20, X0
	0x03409D2C CBZ X21, 0x3409D44
	0x03409D30 LDR X8, [X20]
	0x03409D34 MOV X0, X21
	0x03409D38 LDR X1, [X8 + 0x40]
	0x03409D3C BL 0x1C16E00
	0x03409D40 CBZ X0, 0x340A824
	0x03409D44 LDR W8, [X20 + 0x18]
	0x03409D48 CBZ W8, 0x340A820
	0x03409D4C ADRP X24, 0xD25000
	0x03409D50 LDR X24, [X24 + 0x128]
	0x03409D54 STR X21, [X20 + 0x20]
	0x03409D58 LDR X0, [X24]
	0x03409D5C CBZ X0, 0x3409D74
	0x03409D60 LDR X8, [X20]
	0x03409D64 LDR X1, [X8 + 0x40]
	0x03409D68 BL 0x1C16E00
	0x03409D6C CBZ X0, 0x340A824
	0x03409D70 LDR W8, [X20 + 0x18]
	0x03409D74 CMP W8, 0x1
	0x03409D78 B.LS 0x340A820
	0x03409D7C LDR X8, [X24]
	0x03409D80 ADRP X24, 0xCEA000
	0x03409D84 LDR X24, [X24 + 0x758]
	0x03409D88 ADD X1, X31, 0x34
	0x03409D8C STR X8, [X20 + 0x28]
	0x03409D90 LDR W8, [X19 + 0x14]
	0x03409D94 LDR X0, [X24]
	0x03409D98 STR W8, [X31 + 0x34]
	0x03409D9C BL 0x1C16E04
	0x03409DA0 MOV X21, X0
	0x03409DA4 CBZ X0, 0x3409DBC
	0x03409DA8 LDR X8, [X20]
	0x03409DAC MOV X0, X21
	0x03409DB0 LDR X1, [X8 + 0x40]
	0x03409DB4 BL 0x1C16E00
	0x03409DB8 CBZ X0, 0x340A824
	0x03409DBC LDR W8, [X20 + 0x18]
	0x03409DC0 CMP W8, 0x2
	0x03409DC4 B.LS 0x340A820
	0x03409DC8 STR X21, [X20 + 0x30]
	0x03409DCC LDR X0, [X23]
	0x03409DD0 CBZ X0, 0x3409DE8
	0x03409DD4 LDR X8, [X20]
	0x03409DD8 LDR X1, [X8 + 0x40]
	0x03409DDC BL 0x1C16E00
	0x03409DE0 CBZ X0, 0x340A824
	0x03409DE4 LDR W8, [X20 + 0x18]
	0x03409DE8 CMP W8, 0x3
	0x03409DEC B.LS 0x340A820
	0x03409DF0 LDR X8, [X23]
	0x03409DF4 ADRP X21, 0xD24000
	0x03409DF8 ADRP X25, 0xD24000
	0x03409DFC LDR X21, [X21 + 0xDE0]
	0x03409E00 LDR X25, [X25 + 0xCD0]
	0x03409E04 MOV X0, X20
	0x03409E08 MOV X1, X31
	0x03409E0C STR X8, [X20 + 0x38]
	0x03409E10 BL 0x3227578
	0x03409E14 LDR X2, [X19 + 0x18]
	0x03409E18 LDR X1, [X21]
	0x03409E1C LDR X3, [X23]
	0x03409E20 MOV X4, X31
	0x03409E24 BL 0x32277C4
	0x03409E28 LDR X2, [X19 + 0x20]
	0x03409E2C LDR X1, [X25]
	0x03409E30 LDR X3, [X23]
	0x03409E34 MOV X4, X31
	0x03409E38 BL 0x32277C4
	0x03409E3C LDR X8, [X22]
	0x03409E40 MOV X21, X0
	0x03409E44 MOVZ W1, 0x4
	0x03409E48 MOV X0, X8
	0x03409E4C BL 0x1C16D6C
	0x03409E50 CBZ X0, 0x340A830
	0x03409E54 MOV X20, X0
	0x03409E58 CBZ X21, 0x3409E70
	0x03409E5C LDR X8, [X20]
	0x03409E60 MOV X0, X21
	0x03409E64 LDR X1, [X8 + 0x40]
	0x03409E68 BL 0x1C16E00
	0x03409E6C CBZ X0, 0x340A824
	0x03409E70 LDR W8, [X20 + 0x18]
	0x03409E74 CBZ W8, 0x340A820
	0x03409E78 ADRP X25, 0xD25000
	0x03409E7C LDR X25, [X25 + 0xE0]
	0x03409E80 STR X21, [X20 + 0x20]
	0x03409E84 LDR X0, [X25]
	0x03409E88 CBZ X0, 0x3409EA0
	0x03409E8C LDR X8, [X20]
	0x03409E90 LDR X1, [X8 + 0x40]
	0x03409E94 BL 0x1C16E00
	0x03409E98 CBZ X0, 0x340A824
	0x03409E9C LDR W8, [X20 + 0x18]
	0x03409EA0 CMP W8, 0x1
	0x03409EA4 B.LS 0x340A820
	0x03409EA8 LDR X8, [X25]
	0x03409EAC ADD X1, X31, 0x30
	0x03409EB0 STR X8, [X20 + 0x28]
	0x03409EB4 LDR W8, [X19 + 0x28]
	0x03409EB8 LDR X0, [X24]
	0x03409EBC STR W8, [X31 + 0x30]
	0x03409EC0 BL 0x1C16E04
	0x03409EC4 MOV X21, X0
	0x03409EC8 CBZ X0, 0x3409EE0
	0x03409ECC LDR X8, [X20]
	0x03409ED0 MOV X0, X21
	0x03409ED4 LDR X1, [X8 + 0x40]
	0x03409ED8 BL 0x1C16E00
	0x03409EDC CBZ X0, 0x340A824
	0x03409EE0 LDR W8, [X20 + 0x18]
	0x03409EE4 CMP W8, 0x2
	0x03409EE8 B.LS 0x340A820
	0x03409EEC STR X21, [X20 + 0x30]
	0x03409EF0 LDR X0, [X23]
	0x03409EF4 CBZ X0, 0x3409F0C
	0x03409EF8 LDR X8, [X20]
	0x03409EFC LDR X1, [X8 + 0x40]
	0x03409F00 BL 0x1C16E00
	0x03409F04 CBZ X0, 0x340A824
	0x03409F08 LDR W8, [X20 + 0x18]
	0x03409F0C CMP W8, 0x3
	0x03409F10 B.LS 0x340A820
	0x03409F14 LDR X8, [X23]
	0x03409F18 MOV X0, X20
	0x03409F1C MOV X1, X31
	0x03409F20 STR X8, [X20 + 0x38]
	0x03409F24 BL 0x3227578
	0x03409F28 LDR X8, [X22]
	0x03409F2C MOV X21, X0
	0x03409F30 MOVZ W1, 0x4
	0x03409F34 MOV X0, X8
	0x03409F38 BL 0x1C16D6C
	0x03409F3C CBZ X0, 0x340A830
	0x03409F40 MOV X20, X0
	0x03409F44 CBZ X21, 0x3409F5C
	0x03409F48 LDR X8, [X20]
	0x03409F4C MOV X0, X21
	0x03409F50 LDR X1, [X8 + 0x40]
	0x03409F54 BL 0x1C16E00
	0x03409F58 CBZ X0, 0x340A824
	0x03409F5C LDR W8, [X20 + 0x18]
	0x03409F60 CBZ W8, 0x340A820
	0x03409F64 ADRP X25, 0xD25000
	0x03409F68 LDR X25, [X25 + 0x108]
	0x03409F6C STR X21, [X20 + 0x20]
	0x03409F70 LDR X0, [X25]
	0x03409F74 CBZ X0, 0x3409F8C
	0x03409F78 LDR X8, [X20]
	0x03409F7C LDR X1, [X8 + 0x40]
	0x03409F80 BL 0x1C16E00
	0x03409F84 CBZ X0, 0x340A824
	0x03409F88 LDR W8, [X20 + 0x18]
	0x03409F8C CMP W8, 0x1
	0x03409F90 B.LS 0x340A820
	0x03409F94 LDR X8, [X25]
	0x03409F98 ADD X1, X31, 0x2C
	0x03409F9C STR X8, [X20 + 0x28]
	0x03409FA0 LDR W8, [X19 + 0x2C]
	0x03409FA4 LDR X0, [X24]
	0x03409FA8 STR W8, [X31 + 0x2C]
	0x03409FAC BL 0x1C16E04
	0x03409FB0 MOV X21, X0
	0x03409FB4 CBZ X0, 0x3409FCC
	0x03409FB8 LDR X8, [X20]
	0x03409FBC MOV X0, X21
	0x03409FC0 LDR X1, [X8 + 0x40]
	0x03409FC4 BL 0x1C16E00
	0x03409FC8 CBZ X0, 0x340A824
	0x03409FCC LDR W8, [X20 + 0x18]
	0x03409FD0 CMP W8, 0x2
	0x03409FD4 B.LS 0x340A820
	0x03409FD8 STR X21, [X20 + 0x30]
	0x03409FDC LDR X0, [X23]
	0x03409FE0 CBZ X0, 0x3409FF8
	0x03409FE4 LDR X8, [X20]
	0x03409FE8 LDR X1, [X8 + 0x40]
	0x03409FEC BL 0x1C16E00
	0x03409FF0 CBZ X0, 0x340A824
	0x03409FF4 LDR W8, [X20 + 0x18]
	0x03409FF8 CMP W8, 0x3
	0x03409FFC B.LS 0x340A820
	0x0340A000 LDR X8, [X23]
	0x0340A004 ADRP X21, 0xD24000
	0x0340A008 ADRP X25, 0xD23000
	0x0340A00C LDR X21, [X21 + 0x110]
	0x0340A010 LDR X25, [X25 + 0xD88]
	0x0340A014 MOV X0, X20
	0x0340A018 MOV X1, X31
	0x0340A01C STR X8, [X20 + 0x38]
	0x0340A020 BL 0x3227578
	0x0340A024 LDR X2, [X19 + 0x30]
	0x0340A028 LDR X1, [X21]
	0x0340A02C LDR X3, [X23]
	0x0340A030 MOV X4, X31
	0x0340A034 BL 0x32277C4
	0x0340A038 LDR X2, [X19 + 0x38]
	0x0340A03C LDR X1, [X25]
	0x0340A040 LDR X3, [X23]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0xFD5000
	011 Move X26, 0xCEB000
	012 Move X24, 0xD25000
	013 Move X22, 0xCEB000
	014 Move X21, 0xD25000
	015 Move X20, 0xD25000
	016 Move X23, 0xCEB000
	017 Move X26, [X26+2440]
	018 Move W8, [X25+1350]
	019 Move X24, [X24+3704]
	020 Move X22, [X22+2104]
	021 Move X21, [X21+3552]
	022 Move X20, [X20+3712]
	023 Move X23, [X23+2512]
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {70}
	029 Move X0, 0xCEB000
	030 Move X0, [X0+1880]
	031 Call 0x1C17CF4
	032 Move X0, 0xCEB000
	033 Move X0, [X0+2512]
	034 Call 0x1C17CF4
	035 Move X0, 0xD18000
	036 Move X0, [X0+3000]
	037 Call 0x1C17CF4
	038 Move X0, 0xD25000
	039 Move X0, [X0+3712]
	040 Call 0x1C17CF4
	041 Move X0, 0xD26000
	042 Move X0, [X0+112]
	043 Call 0x1C17CF4
	044 Move X0, 0xD25000
	045 Move X0, [X0+3552]
	046 Call 0x1C17CF4
	047 Move X0, 0xCEB000
	048 Move X0, [X0+2104]
	049 Call 0x1C17CF4
	050 Move X0, 0xD25000
	051 Move X0, [X0+3560]
	052 Call 0x1C17CF4
	053 Move X0, 0xD26000
	054 Move X0, [X0+120]
	055 Call 0x1C17CF4
	056 Move X0, 0xD26000
	057 Move X0, [X0+48]
	058 Call 0x1C17CF4
	059 Move X0, 0xD25000
	060 Move X0, [X0+3720]
	061 Call 0x1C17CF4
	062 Move X0, 0xCEB000
	063 Move X0, [X0+2440]
	064 Call 0x1C17CF4
	065 Move X0, 0xD25000
	066 Move X0, [X0+3704]
	067 Call 0x1C17CF4
	068 Move W8, 1
	069 Move [X25+1350], W8
	070 Move X0, [X26]
	071 Move X2, [X19+16]
	072 Move X1, [X24]
	073 Move X3, [X22]
	074 Move X4, X31
	075 Call String.Concat, X0, X1, X2, X3
	076 Move X2, [X19+24]
	077 Move X1, [X21]
	078 Move X3, [X22]
	079 Move X4, X31
	080 Call String.Concat, X0, X1, X2, X3
	081 Move X2, [X19+32]
	082 Move X1, [X20]
	083 Move X3, [X22]
	084 Move X4, X31
	085 Call String.Concat, X0, X1, X2, X3
	086 Move X8, [X23]
	087 Move X21, X0
	088 Move W1, 4
	089 Move X0, X8
	090 Call 0x1C17D6C
	091 Compare X0, 0
	092 JumpIfEqual {262}
	093 Move X20, X0
	094 Compare X21, 0
	095 JumpIfEqual {102}
	096 Move X8, [X20]
	097 Move X0, X21
	098 Move X1, [X8+64]
	099 Call 0x1C17E00
	100 Compare X0, 0
	101 JumpIfEqual {259}
	102 Move W8, [X20+24]
	103 Compare W8, 0
	104 JumpIfEqual {258}
	105 Move X24, 0xD26000
	106 Move X24, [X24+120]
	107 Move [X20+32], X21
	108 Move X0, [X24]
	109 Compare X0, 0
	110 JumpIfEqual {117}
	111 Move X8, [X20]
	112 Move X1, [X8+64]
	113 Call 0x1C17E00
	114 Compare X0, 0
	115 JumpIfEqual {259}
	116 Move W8, [X20+24]
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Move X8, [X24]
	119 Move X24, 0xCEB000
	120 Move X24, [X24+1880]
	121 Add X1, X31, 12
	122 Move [X20+40], X8
	123 Move W8, [X19+40]
	124 Move X0, [X24]
	125 Move [X31+12], W8
	126 Call 0x1C17E04
	127 Move X21, X0
	128 Compare X0, 0
	129 JumpIfEqual {136}
	130 Move X8, [X20]
	131 Move X0, X21
	132 Move X1, [X8+64]
	133 Call 0x1C17E00
	134 Compare X0, 0
	135 JumpIfEqual {259}
	136 Move W8, [X20+24]
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move [X20+48], X21
	139 Move X0, [X22]
	140 Compare X0, 0
	141 JumpIfEqual {148}
	142 Move X8, [X20]
	143 Move X1, [X8+64]
	144 Call 0x1C17E00
	145 Compare X0, 0
	146 JumpIfEqual {259}
	147 Move W8, [X20+24]
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Move X8, [X22]
	150 Move X0, X20
	151 Move X1, X31
	152 Move [X20+56], X8
	153 Call String.Concat, X0
	154 Move X8, [X23]
	155 Move X21, X0
	156 Move W1, 4
	157 Move X0, X8
	158 Call 0x1C17D6C
	159 Compare X0, 0
	160 JumpIfEqual {262}
	161 Move X20, X0
	162 Compare X21, 0
	163 JumpIfEqual {170}
	164 Move X8, [X20]
	165 Move X0, X21
	166 Move X1, [X8+64]
	167 Call 0x1C17E00
	168 Compare X0, 0
	169 JumpIfEqual {259}
	170 Move W8, [X20+24]
	171 Compare W8, 0
	172 JumpIfEqual {258}
	173 Move X23, 0xD26000
	174 Move X23, [X23+112]
	175 Move [X20+32], X21
	176 Move X0, [X23]
	177 Compare X0, 0
	178 JumpIfEqual {185}
	179 Move X8, [X20]
	180 Move X1, [X8+64]
	181 Call 0x1C17E00
	182 Compare X0, 0
	183 JumpIfEqual {259}
	184 Move W8, [X20+24]
	185 NotImplemented "Instruction CMP not yet implemented."
	186 Move X8, [X23]
	187 Add X1, X31, 8
	188 Move [X20+40], X8
	189 Move W8, [X19+44]
	190 Move X0, [X24]
	191 Move [X31+8], W8
	192 Call 0x1C17E04
	193 Move X21, X0
	194 Compare X0, 0
	195 JumpIfEqual {202}
	196 Move X8, [X20]
	197 Move X0, X21
	198 Move X1, [X8+64]
	199 Call 0x1C17E00
	200 Compare X0, 0
	201 JumpIfEqual {259}
	202 Move W8, [X20+24]
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Move [X20+48], X21
	205 Move X0, [X22]
	206 Compare X0, 0
	207 JumpIfEqual {214}
	208 Move X8, [X20]
	209 Move X1, [X8+64]
	210 Call 0x1C17E00
	211 Compare X0, 0
	212 JumpIfEqual {259}
	213 Move W8, [X20+24]
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Move X21, 0xD25000
	216 Move X21, [X21+3560]
	217 Move X8, [X22]
	218 Move X23, 0xD26000
	219 Move X24, 0xD18000
	220 Move X25, 0xD25000
	221 Move X23, [X23+48]
	222 Move X24, [X24+3000]
	223 Move X25, [X25+3720]
	224 Move X0, X20
	225 Move X1, X31
	226 Move [X20+56], X8
	227 Call String.Concat, X0
	228 Move X2, [X19+48]
	229 Move X1, [X21]
	230 Move X3, [X22]
	231 Move X4, X31
	232 Call String.Concat, X0, X1, X2, X3
	233 Move X2, [X19+56]
	234 Move X1, [X23]
	235 Move X3, [X22]
	236 Move X4, X31
	237 Call String.Concat, X0, X1, X2, X3
	238 Move X2, [X19+64]
	239 Move X1, [X24]
	240 Move X3, [X22]
	241 Move X4, X31
	242 Call String.Concat, X0, X1, X2, X3
	243 Move X2, [X19+72]
	244 Move X1, [X25]
	245 Move X3, [X22]
	246 Move X4, X31
	247 Call String.Concat, X0, X1, X2, X3
	248 Move X20, [X31+64]
	249 Move X19, [X31+72]
	250 Move X22, [X31+48]
	251 Move X21, [X31+56]
	252 Move X24, [X31+32]
	253 Move X23, [X31+40]
	254 Move X26, [X31+16]
	255 Move X25, [X31+24]
	256 Move X30, [X31+80]
	257 Return X0
	258 Call 0x1C17F28
	259 Call 0x1C17F44
	260 Move X1, X31
	261 Call 0x1C17DEC
	262 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0340A044 MOV X4, X31
	0x0340A048 BL 0x32277C4

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

