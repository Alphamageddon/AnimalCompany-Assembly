Type: Nakama.Ninja.WebSockets.BufferPool/PublicBufferMemoryStream

Method: System.Void .ctor(System.Byte[] buffer, Nakama.Ninja.WebSockets.BufferPool bufferPool)

Disassembly:
	0x0348CD08 BL 0x1C16F10
	0x0348CD0C ADRP X8, 0xC68000
	0x0348CD10 LDR X8, [X8 + 0x1C0]
	0x0348CD14 MOV X19, X0
	0x0348CD18 LDR X1, [X8]
	0x0348CD1C BL 0x301B7C4
	0x0348CD20 MOV X0, X19
	0x0348CD24 LDP X20, X19, [X31 + 0x20]
	0x0348CD28 LDP X22, X21, [X31 + 0x10]
	0x0348CD2C LDR X30, [X31], #0x30
	0x0348CD30 RET
	0x0348CD34 BL 0x1C16F20
	0x0348CD38 MOVZ W8, 0x800
	0x0348CD3C STR W8, [X31 + 0xC]
	0x0348CD40 ADRP X0, 0xC67000
	0x0348CD44 LDR X0, [X0 + 0x758]
	0x0348CD48 BL 0x1C16D08
	0x0348CD4C ADD X1, X31, 0xC
	0x0348CD50 BL 0x1C16E04
	0x0348CD54 MOV X19, X0
	0x0348CD58 ADRP X0, 0xCA5000
	0x0348CD5C LDR X0, [X0 + 0x328]
	0x0348CD60 BL 0x1C16D08
	0x0348CD64 MOV X1, X19
	0x0348CD68 MOV X2, X31
	0x0348CD6C BL 0x321EFD0
	0x0348CD70 MOV X19, X0
	0x0348CD74 ADRP X0, 0xCA5000
	0x0348CD78 LDR X0, [X0 + 0x330]
	0x0348CD7C BL 0x1C16D08
	0x0348CD80 BL 0x1C16F10
	0x0348CD84 MOV X1, X19
	0x0348CD88 MOV X2, X31
	0x0348CD8C MOV X20, X0
	0x0348CD90 BL 0x349B260
	0x0348CD94 ADRP X0, 0xCA5000
	0x0348CD98 LDR X0, [X0 + 0x338]
	0x0348CD9C BL 0x1C16D08
	0x0348CDA0 MOV X1, X0
	0x0348CDA4 MOV X0, X20
	0x0348CDA8 BL 0x1C16DEC
	0x0348CDAC BL 0x1C16F28
	0x0348CDB0 STR X30, [X31 - 0x30]!
	0x0348CDB4 STP X22, X21, [X31 + 0x10]
	0x0348CDB8 STP X20, X19, [X31 + 0x20]
	0x0348CDBC ADRP X21, 0xF51000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xF52000
	008 Move X23, 0xC68000
	009 Move W8, [X22+2320]
	010 Move X23, [X23+1560]
	011 Move X21, X2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xC68000
	019 Move X0, [X0+1560]
	020 Call 0x1C17CF4
	021 Move X0, 0xC70000
	022 Move X0, [X0+1368]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+2320], W8
	026 Move X0, [X23]
	027 Move W1, W31
	028 Call 0x1C17D6C
	029 Move X1, X0
	030 Move X0, X19
	031 Move X2, X31
	032 Call MemoryStream..ctor, X0, X1
	033 Move [X19+80], X21
	034 Move [X19+88], X20
	035 Compare X20, 0
	036 JumpIfEqual {57}
	037 Move X8, 0xC70000
	038 Move X8, [X8+1368]
	039 Move X0, [X8]
	040 Call 0x1C17F10
	041 Move W3, [X20+24]
	042 Move W4, 1
	043 Move W5, 1
	044 Move X1, X20
	045 Move W2, W31
	046 Move X6, X31
	047 Move X21, X0
	048 Call MemoryStream..ctor, X0, X1, X2, X3, X4, X5
	049 Move [X19+96], X21
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+48]
	055 Move X23, [X31+56]
	056 Return 
	057 Call 0x1C17F20

Method: System.Int64 get_Length()

Disassembly:
	0x0348CE18 CBZ X20, 0x348CE98
	0x0348CE1C MOV X0, X20

ISIL:
	001 Move X1, X31
	002 Call MemoryStream.get_Length, X0
	003 Return X0

Method: System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)

Disassembly:
	0x0348CE20 MOV X1, X19
	0x0348CE24 MOV X2, X31
	0x0348CE28 BL 0x3632C2C
	0x0348CE2C CBZ X0, 0x348CE98
	0x0348CE30 MOV X1, X31
	0x0348CE34 MOV X19, X0
	0x0348CE38 BL 0x362F808
	0x0348CE3C TBZ X0, 0x0, 0x348CE84
	0x0348CE40 LDR X8, [X19]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X7, [X8+696]
	007 Move X6, [X8+704]
	008 Move X30, [X31+16]
	009 CallNoReturn X7
	010 Call 0x1C17F20

Method: System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)

Disassembly:
	0x0348CE44 MOV X0, X19
	0x0348CE48 LDP X9, X1, [X8 + 0x188]
	0x0348CE4C BLR X9
	0x0348CE50 CBZ X0, 0x348CE98
	0x0348CE54 MOVZ W1, 0x1
	0x0348CE58 MOV X2, X31
	0x0348CE5C BL 0x362F9AC
	0x0348CE60 CBZ X0, 0x348CE98
	0x0348CE64 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X7, [X8+760]
	007 Move X6, [X8+768]
	008 Move X30, [X31+16]
	009 CallNoReturn X7
	010 Call 0x1C17F20

Method: System.Boolean get_CanRead()

Disassembly:
	0x0348CE68 BL 0x362F62C
	0x0348CE6C CBZ X0, 0x348CE98
	0x0348CE70 LDP X20, X19, [X31 + 0x20]
	0x0348CE74 LDP X22, X21, [X31 + 0x10]
	0x0348CE78 MOV X1, X31
	0x0348CE7C LDR X30, [X31], #0x30
	0x0348CE80 B 0x322B8DC
	0x0348CE84 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+424]
	007 Move X1, [X8+432]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Boolean get_CanSeek()

Disassembly:
	0x0348CE88 LDP X22, X21, [X31 + 0x10]
	0x0348CE8C MOV X0, X31
	0x0348CE90 LDR X30, [X31], #0x30
	0x0348CE94 RET
	0x0348CE98 BL 0x1C16F20
	0x0348CE9C SUB X31, X31, 0x90
	0x0348CEA0 STP X30, X23, [X31 + 0x60]
	0x0348CEA4 STP X22, X21, [X31 + 0x70]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+440]
	007 Move X1, [X8+448]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Boolean get_CanTimeout()

Disassembly:
	0x0348CEA8 STP X20, X19, [X31 + 0x80]
	0x0348CEAC ADRP X23, 0xF51000
	0x0348CEB0 ADRP X22, 0xC6A000
	0x0348CEB4 LDRB W8, [X23 + 0x91A]
	0x0348CEB8 LDR X22, [X22 + 0x280]
	0x0348CEBC MOV X20, X2
	0x0348CEC0 MOV X21, X1
	0x0348CEC4 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+456]
	007 Move X1, [X8+464]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Boolean get_CanWrite()

Disassembly:
	0x0348CEC8 TBNZ X8, 0x0, 0x348CEEC
	0x0348CECC ADRP X0, 0xCA5000
	0x0348CED0 LDR X0, [X0 + 0x348]
	0x0348CED4 BL 0x1C16CF4
	0x0348CED8 ADRP X0, 0xC6A000
	0x0348CEDC LDR X0, [X0 + 0x280]
	0x0348CEE0 BL 0x1C16CF4
	0x0348CEE4 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+472]
	007 Move X1, [X8+480]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Int32 get_Capacity()

Disassembly:
	0x0348CEE8 STRB W8, [X23 + 0x91A]
	0x0348CEEC LDR X0, [X22]
	0x0348CEF0 MOVI V0.2D, 0x0
	0x0348CEF4 STP V0, V0, [X31 + 0x40]
	0x0348CEF8 STP V0, V0, [X31 + 0x20]
	0x0348CEFC ADRP X22, 0xCA5000
	0x0348CF00 LDR W8, [X0 + 0xE0]
	0x0348CF04 LDR X22, [X22 + 0x348]
	0x0348CF08 CBNZ W8, 0x348CF10

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+984]
	007 Move X1, [X8+992]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void set_Capacity(System.Int32 value)

Disassembly:
	0x0348CF0C BL 0x1C16DFC
	0x0348CF10 ADD X8, X31, 0x8
	0x0348CF14 MOV X0, X31
	0x0348CF18 BL 0x32C4770
	0x0348CF1C LDUR V0, [X31 + 0x8]
	0x0348CF20 LDR X9, [X31 + 0x18]
	0x0348CF24 LDR X2, [X22]
	0x0348CF28 ADD X8, X31, 0x20
	0x0348CF2C STP X21, X20, [X31 + 0x48]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+1000]
	007 Move X2, [X8+1008]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void Close()

Disassembly:
	0x0348CF30 ORR X20, X8, 0xF
	0x0348CF34 MOVN W10, 0x0
	0x0348CF38 ADD X1, X31, 0x20
	0x0348CF3C MOV X0, X20
	0x0348CF40 STUR V0, [X31 + 0x28]
	0x0348CF44 STP X9, X19, [X31 + 0x38]
	0x0348CF48 STR W10, [X31 + 0x20]
	0x0348CF4C BL 0x21949B8
	0x0348CF50 MOV X0, X20
	0x0348CF54 MOV X1, X31
	0x0348CF58 BL 0x32C47F8
	0x0348CF5C LDP X20, X19, [X31 + 0x80]
	0x0348CF60 LDP X22, X21, [X31 + 0x70]
	0x0348CF64 LDP X30, X23, [X31 + 0x60]
	0x0348CF68 ADD X31, X31, 0x90
	0x0348CF6C RET
	0x0348CF70 MOV X1, X31
	0x0348CF74 B 0x33BDD8C
	0x0348CF78 STR X30, [X31 - 0x20]!
	0x0348CF7C STP X20, X19, [X31 + 0x10]
	0x0348CF80 ADRP X19, 0xF51000
	0x0348CF84 ADRP X20, 0xCA5000
	0x0348CF88 LDRB W8, [X19 + 0x91B]
	0x0348CF8C LDR X20, [X20 + 0x318]
	0x0348CF90 TBNZ X8, 0x0, 0x348CFA8
	0x0348CF94 ADRP X0, 0xCA5000
	0x0348CF98 LDR X0, [X0 + 0x318]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+96]
	006 Compare X0, 0
	007 JumpIfEqual {34}
	008 Move X8, [X0]
	009 Move X20, [X19+88]
	010 Move X9, [X8+504]
	011 Move X1, [X8+512]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move X2, X0
	014 Move X0, X20
	015 Move W1, W31
	016 Move X3, X31
	017 Call Array.Clear, X0, X1, X2
	018 Move X0, [X19+96]
	019 Compare X0, 0
	020 JumpIfEqual {34}
	021 Move X8, [X0]
	022 Move X9, [X8+632]
	023 Move X1, [X8+640]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X0, [X19+80]
	026 Compare X0, 0
	027 JumpIfEqual {34}
	028 Move X1, [X19+88]
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Call BufferPool.ReturnBuffer, X0, X1
	033 Return 
	034 Call 0x1C17F20

Method: System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination, System.Int32 bufferSize, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x0348CF9C BL 0x1C16CF4
	0x0348CFA0 MOVZ W8, 0x1
	0x0348CFA4 STRB W8, [X19 + 0x91B]
	0x0348CFA8 LDR X0, [X20]
	0x0348CFAC BL 0x1C16F10
	0x0348CFB0 MOV X1, X31
	0x0348CFB4 MOV X19, X0
	0x0348CFB8 BL 0x33BDD8C
	0x0348CFBC LDR X8, [X20]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X5, [X8+600]
	007 Move X4, [X8+608]
	008 Move X30, [X31+16]
	009 CallNoReturn X5
	010 Call 0x1C17F20

Method: System.Int32 EndRead(System.IAsyncResult asyncResult)

Disassembly:
	0x0348CFC0 LDR X8, [X8 + 0xB8]
	0x0348CFC4 STR X19, [X8]
	0x0348CFC8 LDP X20, X19, [X31 + 0x10]
	0x0348CFCC LDR X30, [X31], #0x20
	0x0348CFD0 RET
	0x0348CFD4 MOV X1, X31
	0x0348CFD8 B 0x33BDD8C
	0x0348CFDC CBZ X1, 0x348CFEC
	0x0348CFE0 MOV X0, X1

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+712]
	007 Move X2, [X8+720]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void EndWrite(System.IAsyncResult asyncResult)

Disassembly:
	0x0348CFE4 MOV X1, X31
	0x0348CFE8 B 0x322B8DC
	0x0348CFEC STR X30, [X31 - 0x10]!
	0x0348CFF0 BL 0x1C16F20
	0x0348CFF4 STR X30, [X31 - 0x30]!
	0x0348CFF8 STP X22, X21, [X31 + 0x10]
	0x0348CFFC STP X20, X19, [X31 + 0x20]
	0x0348D000 ADRP X20, 0xF50000
	0x0348D004 LDRB W8, [X20 + 0x91C]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+776]
	007 Move X2, [X8+784]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void Flush()

Disassembly:
	0x0348D008 MOV X19, X0
	0x0348D00C TBNZ X8, 0x0, 0x348D084
	0x0348D010 ADRP X0, 0xCA4000
	0x0348D014 LDR X0, [X0 + 0x350]
	0x0348D018 BL 0x1C16CF4
	0x0348D01C ADRP X0, 0xC69000
	0x0348D020 LDR X0, [X0 + 0x160]
	0x0348D024 BL 0x1C16CF4
	0x0348D028 ADRP X0, 0xC69000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+664]
	007 Move X1, [X8+672]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x0348D02C LDR X0, [X0 + 0x130]
	0x0348D030 BL 0x1C16CF4
	0x0348D034 ADRP X0, 0xC66000
	0x0348D038 LDR X0, [X0 + 0x618]
	0x0348D03C BL 0x1C16CF4
	0x0348D040 ADRP X0, 0xC68000
	0x0348D044 LDR X0, [X0 + 0x278]
	0x0348D048 BL 0x1C16CF4
	0x0348D04C ADRP X0, 0xC95000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+680]
	007 Move X2, [X8+688]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Byte[] GetBuffer()

Disassembly:
	0x0348D050 LDR X0, [X0 + 0xDC8]
	0x0348D054 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: System.Int64 get_Position()

Disassembly:
	0x0348D058 ADRP X0, 0xC95000
	0x0348D05C LDR X0, [X0 + 0xE38]
	0x0348D060 BL 0x1C16CF4
	0x0348D064 ADRP X0, 0xC95000
	0x0348D068 LDR X0, [X0 + 0xDD0]
	0x0348D06C BL 0x1C16CF4
	0x0348D070 ADRP X0, 0xCA4000
	0x0348D074 LDR X0, [X0 + 0x358]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+504]
	007 Move X1, [X8+512]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void set_Position(System.Int64 value)

Disassembly:
	0x0348D078 BL 0x1C16CF4
	0x0348D07C MOVZ W8, 0x1
	0x0348D080 STRB W8, [X20 + 0x91C]
	0x0348D084 STR X31, [X31 + 0x8]
	0x0348D088 ADRP X22, 0xC69000
	0x0348D08C LDR W8, [X19]
	0x0348D090 LDR X22, [X22 + 0x130]
	0x0348D094 CBZ W8, 0x348D0C4
	0x0348D098 ADRP X8, 0xC66000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+520]
	007 Move X2, [X8+528]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)

Disassembly:
	0x0348D09C LDR X8, [X8 + 0x618]
	0x0348D0A0 MOVZ W9, 0x4000
	0x0348D0A4 STR W9, [X19 + 0x30]
	0x0348D0A8 LDR X0, [X8]
	0x0348D0AC MOVZ W1, 0x4000
	0x0348D0B0 BL 0x1C16D6C
	0x0348D0B4 MOV W2, W31
	0x0348D0B8 STR X0, [X19 + 0x38]
	0x0348D0BC STR W31, [X19 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X5, [X8+856]
	007 Move X4, [X8+864]
	008 Move X30, [X31+16]
	009 CallNoReturn X5
	010 Call 0x1C17F20

Method: System.Void EnlargeBufferIfRequired(System.Int32 count)

Disassembly:
	0x0348D0C0 B 0x348D0E0
	0x0348D0C4 LDR X8, [X19 + 0x48]
	0x0348D0C8 MOVN W9, 0x0
	0x0348D0CC STR X8, [X31 + 0x8]
	0x0348D0D0 STR X31, [X19 + 0x48]
	0x0348D0D4 STR W9, [X19]
	0x0348D0D8 B 0x348D13C
	0x0348D0DC B 0x348D2D8
	0x0348D0E0 LDR W8, [X19 + 0x30]
	0x0348D0E4 SUBS W3, W8, W2
	0x0348D0E8 B.LE 0x348D260
	0x0348D0EC LDR X0, [X19 + 0x20]
	0x0348D0F0 CBZ X0, 0x348D25C
	0x0348D0F4 LDR X8, [X0]
	0x0348D0F8 LDR X1, [X19 + 0x38]
	0x0348D0FC LDR X4, [X19 + 0x28]
	0x0348D100 LDR X9, [X8 + 0x2D8]
	0x0348D104 LDR X5, [X8 + 0x2E0]
	0x0348D108 BLR X9
	0x0348D10C CBZ X0, 0x348D2A8
	0x0348D110 ADRP X8, 0xC95000
	0x0348D114 LDR X8, [X8 + 0xDD0]
	0x0348D118 LDR X1, [X8]
	0x0348D11C BL 0x269D3A4
	0x0348D120 ADRP X8, 0xC95000
	0x0348D124 LDR X8, [X8 + 0xE38]
	0x0348D128 STR X0, [X31 + 0x8]
	0x0348D12C LDR X1, [X8]
	0x0348D130 ADD X0, X31, 0x8
	0x0348D134 BL 0x2677274
	0x0348D138 TBZ X0, 0x0, 0x348D1BC
	0x0348D13C ADRP X8, 0xC95000
	0x0348D140 LDR X8, [X8 + 0xDC8]
	0x0348D144 LDR X1, [X8]
	0x0348D148 ADD X0, X31, 0x8
	0x0348D14C BL 0x26772B8
	0x0348D150 LDR W8, [X19 + 0x40]
	0x0348D154 MOV W20, W0
	0x0348D158 ADD W8, W8, W0
	0x0348D15C STR W8, [X19 + 0x40]
	0x0348D160 MOV X0, X31
	0x0348D164 BL 0x3241948
	0x0348D168 CBZ X0, 0x348D254
	0x0348D16C LDR X8, [X0]
	0x0348D170 LDR X1, [X19 + 0x38]
	0x0348D174 LDR W3, [X19 + 0x40]
	0x0348D178 LDR X9, [X8 + 0x388]
	0x0348D17C LDR X4, [X8 + 0x390]
	0x0348D180 MOV W2, W31
	0x0348D184 BLR X9
	0x0348D188 MOV X21, X0
	0x0348D18C CBZ X0, 0x348D258
	0x0348D190 ADRP X8, 0xCA4000
	0x0348D194 LDR X8, [X8 + 0x358]
	0x0348D198 LDR X1, [X8]
	0x0348D19C MOV X0, X21
	0x0348D1A0 MOV X2, X31
	0x0348D1A4 BL 0x322BD1C
	0x0348D1A8 TBNZ X0, 0x0, 0x348D20C
	0x0348D1AC CMP W20, 0x1
	0x0348D1B0 B.LT 0x348D1F8
	0x0348D1B4 LDR W2, [X19 + 0x40]
	0x0348D1B8 B 0x348D0E0
	0x0348D1BC STR W31, [X19]
	0x0348D1C0 LDR X8, [X31 + 0x8]
	0x0348D1C4 STR X8, [X19 + 0x48]
	0x0348D1C8 LDR X0, [X22]
	0x0348D1CC LDR W8, [X0 + 0xE0]
	0x0348D1D0 CBNZ W8, 0x348D1D8
	0x0348D1D4 BL 0x1C16DFC
	0x0348D1D8 ADRP X8, 0xCA4000
	0x0348D1DC LDR X8, [X8 + 0x350]
	0x0348D1E0 ADD X0, X19, 0x8
	0x0348D1E4 LDR X3, [X8]
	0x0348D1E8 ADD X1, X31, 0x8
	0x0348D1EC MOV X2, X19
	0x0348D1F0 BL 0x1FB0788
	0x0348D1F4 B 0x348D244
	0x0348D1F8 ADRP X8, 0xC68000
	0x0348D1FC LDR X8, [X8 + 0x278]
	0x0348D200 LDR X8, [X8]
	0x0348D204 LDR X8, [X8 + 0xB8]
	0x0348D208 LDR X21, [X8]
	0x0348D20C MOVN W8, 0x1
	0x0348D210 STR W8, [X19]
	0x0348D214 STR X31, [X19 + 0x38]
	0x0348D218 LDR X0, [X22]
	0x0348D21C ADRP X20, 0xC69000
	0x0348D220 ADD X19, X19, 0x8
	0x0348D224 LDR W8, [X0 + 0xE0]
	0x0348D228 LDR X20, [X20 + 0x160]
	0x0348D22C CBNZ W8, 0x348D234
	0x0348D230 BL 0x1C16DFC
	0x0348D234 LDR X2, [X20]
	0x0348D238 MOV X0, X19
	0x0348D23C MOV X1, X21
	0x0348D240 BL 0x26322B0
	0x0348D244 LDP X20, X19, [X31 + 0x20]
	0x0348D248 LDP X22, X21, [X31 + 0x10]
	0x0348D24C LDR X30, [X31], #0x30
	0x0348D250 RET
	0x0348D254 BL 0x1C16F20
	0x0348D258 BL 0x1C16F20
	0x0348D25C BL 0x1C16F20
	0x0348D260 ADRP X0, 0xCA4000
	0x0348D264 LDR X0, [X0 + 0x330]
	0x0348D268 BL 0x1C16D08
	0x0348D26C BL 0x1C16F10
	0x0348D270 MOV X20, X0
	0x0348D274 ADRP X0, 0xCA4000
	0x0348D278 LDR X0, [X0 + 0x360]
	0x0348D27C BL 0x1C16D08
	0x0348D280 MOV X1, X0
	0x0348D284 MOV X0, X20
	0x0348D288 MOV X2, X31
	0x0348D28C BL 0x349B260
	0x0348D290 ADRP X0, 0xCA4000
	0x0348D294 LDR X0, [X0 + 0x368]
	0x0348D298 BL 0x1C16D08
	0x0348D29C MOV X1, X0
	0x0348D2A0 MOV X0, X20
	0x0348D2A4 BL 0x1C16DEC
	0x0348D2A8 BL 0x1C16F20
	0x0348D2AC B 0x348D2D8
	0x0348D2B0 B 0x348D2D8
	0x0348D2B4 B 0x348D2D8
	0x0348D2B8 B 0x348D2D8
	0x0348D2BC B 0x348D2D8
	0x0348D2C0 B 0x348D2D8
	0x0348D2C4 B 0x348D2D8
	0x0348D2C8 B 0x348D2D8
	0x0348D2CC B 0x348D2D8
	0x0348D2D0 B 0x348D2D8
	0x0348D2D4 B 0x348D2D8
	0x0348D2D8 CMP W1, 0x1
	0x0348D2DC B.NE 0x348D350
	0x0348D2E0 BL 0x3EB1AD0
	0x0348D2E4 MOV X20, X0
	0x0348D2E8 ADRP X0, 0xC66000
	0x0348D2EC LDR X0, [X0 + 0x7D0]
	0x0348D2F0 BL 0x1C16D08
	0x0348D2F4 LDR X8, [X20]
	0x0348D2F8 LDR X1, [X8]
	0x0348D2FC BL 0x1C17270
	0x0348D300 TBZ X0, 0x0, 0x348D358
	0x0348D304 LDR X20, [X20]
	0x0348D308 BL 0x3EB1AE0
	0x0348D30C MOVN W8, 0x1
	0x0348D310 STR X31, [X19 + 0x38]
	0x0348D314 STR W8, [X19], #0x8
	0x0348D318 ADRP X0, 0xC69000
	0x0348D31C LDR X0, [X0 + 0x130]
	0x0348D320 BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X20, 0xF51000
	008 Move W8, [X20+2321]
	009 Move W21, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xC67000
	016 Move X0, [X0+1560]
	017 Call 0x1C17CF4
	018 Move X0, 0xC67000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move X0, 0xC6F000
	022 Move X0, [X0+1368]
	023 Call 0x1C17CF4
	024 Move X0, 0xCA5000
	025 Move X0, [X0+712]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+2321], W8
	029 Move X20, [X19+88]
	030 Compare X20, 0
	031 JumpIfEqual {130}
	032 Move X0, [X19+96]
	033 Compare X0, 0
	034 JumpIfEqual {130}
	035 Move X8, [X0]
	036 Move X9, [X8+504]
	037 Move X1, [X8+512]
	038 NotImplemented "Instruction BLR not yet implemented."
	039 NotImplemented "Instruction LDRSW not yet implemented."
	040 Subtract X8, X8, X0
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X0, [X19+96]
	043 Compare X0, 0
	044 JumpIfEqual {130}
	045 Move X8, [X0]
	046 Move X9, [X8+504]
	047 Move X1, [X8+512]
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move X8, [X19+88]
	050 Compare X8, 0
	051 JumpIfEqual {130}
	052 Move X8, [X8+24]
	053 Move X20, X0
	054 Move X9, W21
	055 Subtract X9, X9, W20
	056 Add X21, X9, W8
	057 Move W9, 0x80000000
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction SBFM not yet implemented."
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X8, 0xC67000
	062 Move X8, [X8+1448]
	063 Move X0, [X8]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 NotImplemented "Instruction SCVTF not yet implemented."
	069 Call 0x3EB2C20
	070 Move X8, -43638784
	071 Move V1, [X8+1296]
	072 Move X0, X31
	073 NotImplemented "Instruction FDIV not yet implemented."
	074 NotImplemented "Instruction FRINTP not yet implemented."
	075 Move D0, 2
	076 Call Math.Pow, V0, V1
	077 Move X9, 0x7FF00000
	078 Move D1, X9
	079 NotImplemented "Instruction FCVTZS not yet implemented."
	080 Move X10, 0x80000000
	081 NotImplemented "Instruction FCMP not yet implemented."
	082 NotImplemented "Instruction CSEL not yet implemented."
	083 Move W9, 0x80000000
	084 NotImplemented "Instruction CMP not yet implemented."
	085 NotImplemented "Instruction CSEL not yet implemented."
	086 Move X8, 0xC67000
	087 Move X8, [X8+1560]
	088 Move X0, [X8]
	089 Call 0x1C17D6C
	090 Move X8, [X19+88]
	091 Move X21, X0
	092 Move W1, W31
	093 Move X2, X21
	094 Move X0, X8
	095 Move W3, W31
	096 Move W4, W20
	097 Move X5, X31
	098 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	099 Compare X21, 0
	100 JumpIfEqual {130}
	101 Move X8, 0xC6F000
	102 Move X8, [X8+1368]
	103 Move X0, [X8]
	104 Call 0x1C17F10
	105 Move W3, [X21+24]
	106 Move W4, 1
	107 Move W5, 1
	108 Move X1, X21
	109 Move W2, W31
	110 Move X6, X31
	111 Move X22, X0
	112 Call MemoryStream..ctor, X0, X1, X2, X3, X4, X5
	113 Compare X22, 0
	114 JumpIfEqual {130}
	115 Move X8, [X22]
	116 Move X1, W20
	117 Move X0, X22
	118 Move X9, [X8+520]
	119 Move X2, [X8+528]
	120 NotImplemented "Instruction BLR not yet implemented."
	121 Move [X19+88], X21
	122 Move [X19+96], X22
	123 Move X20, [X31+48]
	124 Move X19, [X31+56]
	125 Move X22, [X31+32]
	126 Move X21, [X31+40]
	127 Move X30, [X31+16]
	128 Add X31, X31, 64
	129 Return 
	130 Call 0x1C17F20
	131 Move [X31+24], X21
	132 Move X0, 0xC69000
	133 Move X0, [X0+2656]
	134 Call 0x1C17D08
	135 Add X1, X31, 24
	136 Call 0x1C17E04
	137 Move TEMP, 0x80000000
	138 Not TEMP
	139 Move W8, TEMP
	140 Move X19, X0
	141 Move [X31+12], W8
	142 Move X0, 0xC67000
	143 Move X0, [X0+1880]
	144 Call 0x1C17D08
	145 Add X1, X31, 12
	146 Call 0x1C17E04
	147 Move X20, X0
	148 Move X0, 0xCA5000
	149 Move X0, [X0+720]
	150 Call 0x1C17D08
	151 Move X1, X19
	152 Move X2, X20
	153 Move X3, X31
	154 Call String.Format, X0, X1, X2
	155 Move X19, X0
	156 Move X0, 0xCA5000
	157 Move X0, [X0+728]
	158 Call 0x1C17D08
	159 Call 0x1C17F10
	160 Move X1, X19
	161 Move X2, X31
	162 Move X20, X0
	163 Call WebSocketBufferOverflowException..ctor, X0, X1
	164 Move X0, 0xCA5000
	165 Move X0, [X0+712]
	166 Call 0x1C17D08
	167 Move X1, X0
	168 Move X0, X20
	169 Call 0x1C17DEC

Method: System.Void WriteByte(System.Byte value)

Disassembly:
	0x0348D324 LDR W8, [X0 + 0xE0]
	0x0348D328 CBNZ W8, 0x348D330
	0x0348D32C BL 0x1C16DFC
	0x0348D330 ADRP X0, 0xC69000
	0x0348D334 LDR X0, [X0 + 0x240]
	0x0348D338 BL 0x1C16D08
	0x0348D33C MOV X2, X0
	0x0348D340 MOV X0, X19
	0x0348D344 MOV X1, X20
	0x0348D348 BL 0x26324C8
	0x0348D34C B 0x348D244
	0x0348D350 MOV X19, X0
	0x0348D354 B 0x348D380
	0x0348D358 MOVZ W0, 0x8
	0x0348D35C BL 0x3EB1AF0
	0x0348D360 LDR X8, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move W1, 1
	006 Move X20, X0
	007 Call PublicBufferMemoryStream.EnlargeBufferIfRequired, X0, X1
	008 Move X0, [X20+96]
	009 Compare X0, 0
	010 JumpIfEqual {19}
	011 Move X8, [X0]
	012 Move W1, W19
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X3, [X8+936]
	016 Move X2, [X8+944]
	017 Move X30, [X31+32]
	018 CallNoReturn X3
	019 Call 0x1C17F20

Method: System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)

Disassembly:
	0x0348D364 STR X8, [X0]
	0x0348D368 ADRP X1, 0xA27000
	0x0348D36C ADD X1, X1, 0xE58
	0x0348D370 MOV X2, X31
	0x0348D374 BL 0x3EB1B00
	0x0348D378 MOV X19, X0
	0x0348D37C BL 0x3EB1AE0
	0x0348D380 MOV X0, X19
	0x0348D384 BL 0x1D2C690
	0x0348D388 BL 0x1990590
	0x0348D38C STR X30, [X31 - 0x30]!
	0x0348D390 STP X22, X21, [X31 + 0x10]
	0x0348D394 STP X20, X19, [X31 + 0x20]
	0x0348D398 ADRP X22, 0xF50000
	0x0348D39C ADRP X21, 0xC69000
	0x0348D3A0 LDRB W8, [X22 + 0x91D]
	0x0348D3A4 LDR X21, [X21 + 0x130]
	0x0348D3A8 MOV X19, X1
	0x0348D3AC MOV X20, X0
	0x0348D3B0 TBNZ X8, 0x0, 0x348D3D4
	0x0348D3B4 ADRP X0, 0xC69000
	0x0348D3B8 LDR X0, [X0 + 0x248]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, X1
	007 Move W1, W3
	008 Move W19, W3
	009 Move W20, W2
	010 Move X22, X0
	011 Call PublicBufferMemoryStream.EnlargeBufferIfRequired, X0, X1
	012 Move X0, [X22+96]
	013 Compare X0, 0
	014 JumpIfEqual {27}
	015 Move X8, [X0]
	016 Move X1, X21
	017 Move W2, W20
	018 Move W3, W19
	019 Move X5, [X8+904]
	020 Move X4, [X8+912]
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X5
	027 Call 0x1C17F20

Method: System.Threading.Tasks.Task WriteAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x0348D3BC BL 0x1C16CF4
	0x0348D3C0 ADRP X0, 0xC69000
	0x0348D3C4 LDR X0, [X0 + 0x130]
	0x0348D3C8 BL 0x1C16CF4
	0x0348D3CC MOVZ W8, 0x1
	0x0348D3D0 STRB W8, [X22 + 0x91D]
	0x0348D3D4 LDR X0, [X21]
	0x0348D3D8 ADRP X21, 0xC69000
	0x0348D3DC LDR W8, [X0 + 0xE0]
	0x0348D3E0 LDR X21, [X21 + 0x248]
	0x0348D3E4 CBNZ W8, 0x348D3EC
	0x0348D3E8 BL 0x1C16DFC
	0x0348D3EC LDR X2, [X21]
	0x0348D3F0 ADD X0, X20, 0x8
	0x0348D3F4 MOV X1, X19
	0x0348D3F8 LDP X20, X19, [X31 + 0x20]
	0x0348D3FC LDP X22, X21, [X31 + 0x10]
	0x0348D400 LDR X30, [X31], #0x30
	0x0348D404 B 0x2632228
	0x0348D408 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, X1
	007 Move W1, W3
	008 Move W19, W3
	009 Move W20, W2
	010 Move X22, X0
	011 Call PublicBufferMemoryStream.EnlargeBufferIfRequired, X0, X1
	012 Move X0, [X22+96]
	013 Compare X0, 0
	014 JumpIfEqual {26}
	015 Move X1, X21
	016 Move W2, W20
	017 Move W3, W19
	018 Move X20, [X31+32]
	019 Move X19, [X31+40]
	020 Move X22, [X31+16]
	021 Move X21, [X31+24]
	022 Move X4, X31
	023 Move X30, [X31+48]
	024 Call Stream.WriteAsync, X0, X1, X2, X3
	025 Return X0
	026 Call 0x1C17F20

Method: System.Object InitializeLifetimeService()

Disassembly:
	0x0348D40C STP X20, X19, [X31 + 0x10]
	0x0348D410 ADRP X20, 0xF50000
	0x0348D414 LDRB W8, [X20 + 0x91E]
	0x0348D418 MOV X19, X0
	0x0348D41C TBNZ X8, 0x0, 0x348D44C
	0x0348D420 ADRP X0, 0xCA4000
	0x0348D424 LDR X0, [X0 + 0x370]
	0x0348D428 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+392]
	007 Move X1, [X8+400]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Threading.Tasks.Task`1<System.Int32> ReadAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x0348D42C ADRP X0, 0xC69000
	0x0348D430 LDR X0, [X0 + 0x280]
	0x0348D434 BL 0x1C16CF4
	0x0348D438 ADRP X0, 0xCA4000
	0x0348D43C LDR X0, [X0 + 0x358]
	0x0348D440 BL 0x1C16CF4
	0x0348D444 MOVZ W8, 0x1
	0x0348D448 STRB W8, [X20 + 0x91E]
	0x0348D44C STR X31, [X31 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X6, [X8+728]
	007 Move X5, [X8+736]
	008 Move X30, [X31+16]
	009 CallNoReturn X6
	010 Call 0x1C17F20

Method: System.Int32 ReadByte()

Disassembly:
	0x0348D450 ADRP X20, 0xC69000
	0x0348D454 LDR W8, [X19]
	0x0348D458 LDR X20, [X20 + 0x280]
	0x0348D45C CBZ W8, 0x348D530
	0x0348D460 LDR X0, [X19 + 0x20]
	0x0348D464 CBZ X0, 0x348D580
	0x0348D468 MOV X1, X31
	0x0348D46C BL 0x322B8DC
	0x0348D470 ADRP X8, 0xCA4000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+888]
	007 Move X1, [X8+896]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Int32 get_ReadTimeout()

Disassembly:
	0x0348D474 LDR X8, [X8 + 0x358]
	0x0348D478 LDR X1, [X8]
	0x0348D47C MOV X2, X31
	0x0348D480 BL 0x321B938
	0x0348D484 STR X0, [X19 + 0x20]
	0x0348D488 MOV X0, X31
	0x0348D48C BL 0x3241948
	0x0348D490 CBZ X0, 0x348D584
	0x0348D494 LDR X8, [X0]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+536]
	007 Move X1, [X8+544]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void set_ReadTimeout(System.Int32 value)

Disassembly:
	0x0348D498 LDR X1, [X19 + 0x20]
	0x0348D49C LDR X9, [X8 + 0x268]
	0x0348D4A0 LDR X2, [X8 + 0x270]
	0x0348D4A4 BLR X9
	0x0348D4A8 MOV X1, X0
	0x0348D4AC CBZ X1, 0x348D588
	0x0348D4B0 LDR X0, [X19 + 0x28]
	0x0348D4B4 CBZ X0, 0x348D58C
	0x0348D4B8 LDR X8, [X0]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+552]
	007 Move X2, [X8+560]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin loc)

Disassembly:
	0x0348D4BC LDR X4, [X19 + 0x30]
	0x0348D4C0 LDR W3, [X1 + 0x18]
	0x0348D4C4 LDR X9, [X8 + 0x318]
	0x0348D4C8 LDR X5, [X8 + 0x320]
	0x0348D4CC MOV W2, W31
	0x0348D4D0 BLR X9
	0x0348D4D4 CBZ X0, 0x348D590
	0x0348D4D8 MOV X1, X31
	0x0348D4DC BL 0x33ED394

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X4, [X8+824]
	007 Move X3, [X8+832]
	008 Move X30, [X31+16]
	009 CallNoReturn X4
	010 Call 0x1C17F20

Method: System.Void SetLength(System.Int64 value)

Disassembly:
	0x0348D4E0 STR X0, [X31 + 0x8]

ISIL:
	001 Call PublicBufferMemoryStream.EnlargeBufferIfRequired, X0, X1
	002 Return 

Method: System.Byte[] ToArray()

Disassembly:
	0x0348D4E4 ADD X0, X31, 0x8
	0x0348D4E8 MOV X1, X31
	0x0348D4EC BL 0x32C3A80
	0x0348D4F0 TBNZ X0, 0x0, 0x348D544
	0x0348D4F4 STR W31, [X19]
	0x0348D4F8 LDR X8, [X31 + 0x8]
	0x0348D4FC STR X8, [X19 + 0x38]
	0x0348D500 LDR X0, [X20]
	0x0348D504 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+1016]
	007 Move X1, [X8+1024]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Int32 get_WriteTimeout()

Disassembly:
	0x0348D508 CBNZ W8, 0x348D510
	0x0348D50C BL 0x1C16DFC
	0x0348D510 ADRP X8, 0xCA4000
	0x0348D514 LDR X8, [X8 + 0x370]
	0x0348D518 ADD X0, X19, 0x8
	0x0348D51C LDR X3, [X8]
	0x0348D520 ADD X1, X31, 0x8
	0x0348D524 MOV X2, X19
	0x0348D528 BL 0x218AE84

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+568]
	007 Move X1, [X8+576]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void set_WriteTimeout(System.Int32 value)

Disassembly:
	0x0348D52C B 0x348D574
	0x0348D530 LDR X8, [X19 + 0x38]
	0x0348D534 MOVN W9, 0x0
	0x0348D538 STR X8, [X31 + 0x8]
	0x0348D53C STR X31, [X19 + 0x38]
	0x0348D540 STR W9, [X19]
	0x0348D544 ADD X0, X31, 0x8
	0x0348D548 MOV X1, X31
	0x0348D54C BL 0x32C3B4C

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+584]
	007 Move X2, [X8+592]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Boolean TryGetBuffer(out System.ArraySegment`1<System.Byte> buffer)

Disassembly:
	0x0348D550 MOVN W8, 0x1
	0x0348D554 STR W8, [X19], #0x8
	0x0348D558 LDR X0, [X20]
	0x0348D55C LDR W8, [X0 + 0xE0]
	0x0348D560 CBNZ W8, 0x348D568
	0x0348D564 BL 0x1C16DFC
	0x0348D568 MOV X0, X19
	0x0348D56C MOV X1, X31
	0x0348D570 BL 0x32C4864
	0x0348D574 LDP X20, X19, [X31 + 0x10]
	0x0348D578 LDR X30, [X31], #0x20
	0x0348D57C RET
	0x0348D580 BL 0x1C16F20
	0x0348D584 BL 0x1C16F20
	0x0348D588 BL 0x1C16F20
	0x0348D58C BL 0x1C16F20
	0x0348D590 BL 0x1C16F20
	0x0348D594 B 0x348D5C4
	0x0348D598 B 0x348D5C4
	0x0348D59C B 0x348D5C4
	0x0348D5A0 B 0x348D5C4
	0x0348D5A4 B 0x348D5C4
	0x0348D5A8 B 0x348D5C4
	0x0348D5AC B 0x348D5C4
	0x0348D5B0 B 0x348D5C4
	0x0348D5B4 B 0x348D5C4
	0x0348D5B8 B 0x348D5C4
	0x0348D5BC B 0x348D5C4
	0x0348D5C0 B 0x348D5C4
	0x0348D5C4 MOV X20, X0
	0x0348D5C8 CMP W1, 0x1
	0x0348D5CC B.NE 0x348D65C
	0x0348D5D0 MOV X0, X20
	0x0348D5D4 BL 0x3EB1AD0
	0x0348D5D8 MOV X20, X0
	0x0348D5DC ADRP X0, 0xC66000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xF51000
	007 Move W8, [X21+2322]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xC92000
	015 Move X0, [X0+2952]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2322], W8
	019 Move X0, [X20+96]
	020 Compare X0, 0
	021 JumpIfEqual {46}
	022 Move X8, [X0]
	023 Move X21, 0xC92000
	024 Move X20, [X20+88]
	025 Move X9, [X8+504]
	026 Move X1, [X8+512]
	027 Move X21, [X21+2952]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move X4, [X21]
	030 Move X3, X0
	031 Add X0, X31, 0
	032 Move X1, X20
	033 Move W2, W31
	034 Move [X31], X31
	035 Move [X31+8], X31
	036 Call 0x2B88BB0, X0, X1, X2, X3
	037 Move V0, [X31]
	038 Move X30, [X31+16]
	039 Move X21, [X31+24]
	040 Move W0, 1
	041 Move [X19], V0
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Add X31, X31, 48
	045 Return X0
	046 Call 0x1C17F20

Method: System.Void WriteTo(System.IO.Stream stream)

Disassembly:
	0x0348D5E0 LDR X0, [X0 + 0x7D0]
	0x0348D5E4 BL 0x1C16D08
	0x0348D5E8 LDR X8, [X20]
	0x0348D5EC LDR X1, [X8]
	0x0348D5F0 BL 0x1C17270
	0x0348D5F4 TBZ X0, 0x0, 0x348D634
	0x0348D5F8 LDR X20, [X20]
	0x0348D5FC BL 0x3EB1AE0
	0x0348D600 MOVN W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+1032]
	007 Move X2, [X8+1040]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

