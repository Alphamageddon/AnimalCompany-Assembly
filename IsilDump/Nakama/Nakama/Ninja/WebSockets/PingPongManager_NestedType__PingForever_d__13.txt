Type: Nakama.Ninja.WebSockets.PingPongManager/<PingForever>d__13

Method: System.Void MoveNext()

Disassembly:
	0x0348EC90 MOV W2, W31
	0x0348EC94 MOV X3, X31
	0x0348EC98 BL 0x322ADF0
	0x0348EC9C CBZ X0, 0x348EDC8
	0x0348ECA0 LDR X8, [X0 + 0x18]
	0x0348ECA4 MOV X21, X0
	0x0348ECA8 CMP W8, 0x1
	0x0348ECAC B.LT 0x348ECE4
	0x0348ECB0 MOV X22, X31
	0x0348ECB4 AND X8, X8, 0x0
	0x0348ECB8 ADD X23, X21, 0x20
	0x0348ECBC CMP X22, W8, UXTW
	0x0348ECC0 B.CS 0x348EDC4
	0x0348ECC4 LDR X0, [X23, X22, LSL #3]
	0x0348ECC8 MOV X1, X31
	0x0348ECCC BL 0x322DA44
	0x0348ECD0 TBNZ X0, 0x0, 0x348ECF4
	0x0348ECD4 LDR W8, [X21 + 0x18]
	0x0348ECD8 ADD X22, X22, 0x1
	0x0348ECDC CMP X22, W8, SXTW
	0x0348ECE0 B.LT 0x348ECBC
	0x0348ECE4 LDP X20, X19, [X31 + 0x20]
	0x0348ECE8 LDP X22, X21, [X31 + 0x10]
	0x0348ECEC LDP X30, X23, [X31], #0x30
	0x0348ECF0 RET
	0x0348ECF4 ADRP X8, 0xC65000
	0x0348ECF8 LDR X8, [X8 + 0x8F0]
	0x0348ECFC LDR X0, [X8]
	0x0348ED00 BL 0x1C16F10
	0x0348ED04 MOV X1, X31
	0x0348ED08 MOV X23, X22
	0x0348ED0C MOV X22, X0
	0x0348ED10 BL 0x3231AC4
	0x0348ED14 LDR W8, [X21 + 0x18]
	0x0348ED18 ADD W10, W23, 0x1
	0x0348ED1C SUB W11, W8, 0x1
	0x0348ED20 CMP W10, W11
	0x0348ED24 B.GE 0x348ED68
	0x0348ED28 MOV X9, X23
	0x0348ED2C ADD X23, X23, 0x5
	0x0348ED30 SUB W9, W23, 0x4
	0x0348ED34 CMP W8, W9
	0x0348ED38 B.LS 0x348EDC4
	0x0348ED3C CBZ X22, 0x348EDC8
	0x0348ED40 LDR X1, [X21, X23, LSL #3]
	0x0348ED44 MOV X0, X22
	0x0348ED48 MOV X2, X31
	0x0348ED4C BL 0x32338A8
	0x0348ED50 LDR W8, [X21 + 0x18]
	0x0348ED54 ADD X23, X23, 0x1
	0x0348ED58 SUB W10, W23, 0x4
	0x0348ED5C SUB W9, W8, 0x1
	0x0348ED60 CMP W10, W9
	0x0348ED64 B.LT 0x348ED30
	0x0348ED68 MOV X0, X22
	0x0348ED6C BL 0x19903C0
	0x0348ED70 LDR X8, [X22]
	0x0348ED74 MOV X0, X22
	0x0348ED78 LDP X9, X1, [X8 + 0x168]
	0x0348ED7C BLR X9
	0x0348ED80 MOV X21, X0
	0x0348ED84 ADRP X0, 0xCA3000
	0x0348ED88 LDR X0, [X0 + 0x428]
	0x0348ED8C BL 0x1C16D08
	0x0348ED90 BL 0x1C16F10
	0x0348ED94 MOV X1, X20
	0x0348ED98 MOV X2, X21
	0x0348ED9C MOV X3, X19
	0x0348EDA0 MOV X4, X31
	0x0348EDA4 MOV X22, X0
	0x0348EDA8 BL 0x349B428
	0x0348EDAC ADRP X0, 0xCA3000
	0x0348EDB0 LDR X0, [X0 + 0x430]
	0x0348EDB4 BL 0x1C16D08
	0x0348EDB8 MOV X1, X0
	0x0348EDBC MOV X0, X22
	0x0348EDC0 BL 0x1C16DEC
	0x0348EDC4 BL 0x1C16F28
	0x0348EDC8 BL 0x1C16F20
	0x0348EDCC ADRP X0, 0xCA3000
	0x0348EDD0 LDR X0, [X0 + 0x428]
	0x0348EDD4 BL 0x1C16D08
	0x0348EDD8 BL 0x1C16F10
	0x0348EDDC MOV X1, X31
	0x0348EDE0 MOV X2, X31
	0x0348EDE4 MOV X3, X19
	0x0348EDE8 MOV X4, X31
	0x0348EDEC MOV X20, X0
	0x0348EDF0 BL 0x349B428
	0x0348EDF4 ADRP X0, 0xCA3000
	0x0348EDF8 LDR X0, [X0 + 0x430]
	0x0348EDFC BL 0x1C16D08
	0x0348EE00 MOV X1, X0
	0x0348EE04 MOV X0, X20
	0x0348EE08 BL 0x1C16DEC
	0x0348EE0C STR X30, [X31 - 0x10]!
	0x0348EE10 CBZ X1, 0x348EE3C
	0x0348EE14 LDR X8, [X1]
	0x0348EE18 MOVZ W3, 0xC00
	0x0348EE1C MOVZ W4, 0x1
	0x0348EE20 MOV X0, X1
	0x0348EE24 LDR X6, [X8 + 0x3C8]
	0x0348EE28 LDR X5, [X8 + 0x3D0]
	0x0348EE2C MOV X1, X2
	0x0348EE30 MOV X2, X31
	0x0348EE34 LDR X30, [X31], #0x10
	0x0348EE38 BR X6
	0x0348EE3C BL 0x1C16F20
	0x0348EE40 SUB X31, X31, 0xB0
	0x0348EE44 STP X30, X27, [X31 + 0x60]
	0x0348EE48 STP X26, X25, [X31 + 0x70]
	0x0348EE4C STP X24, X23, [X31 + 0x80]
	0x0348EE50 STP X22, X21, [X31 + 0x90]
	0x0348EE54 STP X20, X19, [X31 + 0xA0]
	0x0348EE58 ADRP X26, 0xF4F000
	0x0348EE5C ADRP X25, 0xCA3000
	0x0348EE60 LDRB W8, [X26 + 0x932]
	0x0348EE64 LDR X25, [X25 + 0x438]
	0x0348EE68 MOV X19, X7
	0x0348EE6C MOV W20, W6
	0x0348EE70 MOV X21, X5
	0x0348EE74 MOV W23, W4
	0x0348EE78 MOV W24, W3
	0x0348EE7C MOV X22, X0
	0x0348EE80 TBNZ X8, 0x0, 0x348EEBC
	0x0348EE84 ADRP X0, 0xCA3000
	0x0348EE88 LDR X0, [X0 + 0x440]
	0x0348EE8C BL 0x1C16CF4
	0x0348EE90 ADRP X0, 0xCA3000
	0x0348EE94 LDR X0, [X0 + 0x448]
	0x0348EE98 BL 0x1C16CF4
	0x0348EE9C ADRP X0, 0xCA3000
	0x0348EEA0 LDR X0, [X0 + 0x450]
	0x0348EEA4 BL 0x1C16CF4
	0x0348EEA8 ADRP X0, 0xCA3000
	0x0348EEAC LDR X0, [X0 + 0x438]
	0x0348EEB0 BL 0x1C16CF4
	0x0348EEB4 MOVZ W8, 0x1
	0x0348EEB8 STRB W8, [X26 + 0x932]
	0x0348EEBC LDR X0, [X25]
	0x0348EEC0 MOVI V0.2D, 0x0
	0x0348EEC4 STP V0, V0, [X31 + 0x40]
	0x0348EEC8 STP V0, V0, [X31 + 0x20]
	0x0348EECC STP V0, V0, [X31]
	0x0348EED0 ADRP X27, 0xCA3000
	0x0348EED4 ADRP X26, 0xCA3000
	0x0348EED8 ADRP X25, 0xCA3000
	0x0348EEDC LDR W8, [X0 + 0xE0]
	0x0348EEE0 LDR X27, [X27 + 0x440]
	0x0348EEE4 LDR X26, [X26 + 0x448]
	0x0348EEE8 LDR X25, [X25 + 0x450]
	0x0348EEEC CBNZ W8, 0x348EEF4
	0x0348EEF0 BL 0x1C16DFC
	0x0348EEF4 LDR X0, [X27]
	0x0348EEF8 ADD X8, X31, 0x0
	0x0348EEFC AND W27, W23, 0x1
	0x0348EF00 ORR X23, X8, 0xF
	0x0348EF04 MOV X8, X23
	0x0348EF08 AND W24, W24, 0x1
	0x0348EF0C BL 0x263221C
	0x0348EF10 LDR X2, [X26]
	0x0348EF14 MOVN W8, 0x0
	0x0348EF18 ADD X1, X31, 0x0
	0x0348EF1C MOV X0, X23
	0x0348EF20 STR X22, [X31 + 0x48]
	0x0348EF24 STRB W24, [X31 + 0x40]
	0x0348EF28 STRB W27, [X31 + 0x20]
	0x0348EF2C STR X21, [X31 + 0x28]
	0x0348EF30 STR W20, [X31 + 0x30]
	0x0348EF34 STR X19, [X31 + 0x38]
	0x0348EF38 STR W8, [X31]
	0x0348EF3C BL 0x1FD1F14
	0x0348EF40 LDR X1, [X25]
	0x0348EF44 MOV X0, X23
	0x0348EF48 BL 0x2632230
	0x0348EF4C LDP X20, X19, [X31 + 0xA0]
	0x0348EF50 LDP X22, X21, [X31 + 0x90]
	0x0348EF54 LDP X24, X23, [X31 + 0x80]
	0x0348EF58 LDP X26, X25, [X31 + 0x70]
	0x0348EF5C LDP X30, X27, [X31 + 0x60]
	0x0348EF60 ADD X31, X31, 0xB0
	0x0348EF64 RET
	0x0348EF68 CMP W3, 0x0
	0x0348EF6C CSET W0, EQ
	0x0348EF70 RET
	0x0348EF74 SUB X31, X31, 0x60
	0x0348EF78 STR X30, [X31 + 0x30]
	0x0348EF7C STP X22, X21, [X31 + 0x40]
	0x0348EF80 STP X20, X19, [X31 + 0x50]
	0x0348EF84 ADRP X19, 0xF4F000
	0x0348EF88 LDRB W8, [X19 + 0x933]
	0x0348EF8C MOV X20, X0
	0x0348EF90 TBNZ X8, 0x0, 0x348F020
	0x0348EF94 ADRP X0, 0xC6A000
	0x0348EF98 LDR X0, [X0 + 0x4E8]
	0x0348EF9C BL 0x1C16CF4
	0x0348EFA0 ADRP X0, 0xCA3000
	0x0348EFA4 LDR X0, [X0 + 0x458]
	0x0348EFA8 BL 0x1C16CF4
	0x0348EFAC ADRP X0, 0xC6A000
	0x0348EFB0 LDR X0, [X0 + 0x4F0]
	0x0348EFB4 BL 0x1C16CF4
	0x0348EFB8 ADRP X0, 0xC6A000
	0x0348EFBC LDR X0, [X0 + 0x4F8]
	0x0348EFC0 BL 0x1C16CF4
	0x0348EFC4 ADRP X0, 0xC6A000
	0x0348EFC8 LDR X0, [X0 + 0x500]
	0x0348EFCC BL 0x1C16CF4
	0x0348EFD0 ADRP X0, 0xC68000
	0x0348EFD4 LDR X0, [X0 + 0x1B0]
	0x0348EFD8 BL 0x1C16CF4
	0x0348EFDC ADRP X0, 0xC68000
	0x0348EFE0 LDR X0, [X0 + 0x1B8]
	0x0348EFE4 BL 0x1C16CF4
	0x0348EFE8 ADRP X0, 0xC65000
	0x0348EFEC LDR X0, [X0 + 0x8F0]
	0x0348EFF0 BL 0x1C16CF4
	0x0348EFF4 ADRP X0, 0xC67000
	0x0348EFF8 LDR X0, [X0 + 0x278]
	0x0348EFFC BL 0x1C16CF4
	0x0348F000 ADRP X0, 0xC68000
	0x0348F004 LDR X0, [X0 + 0x928]
	0x0348F008 BL 0x1C16CF4
	0x0348F00C ADRP X0, 0xCA2000
	0x0348F010 LDR X0, [X0 + 0x420]
	0x0348F014 BL 0x1C16CF4
	0x0348F018 MOVZ W8, 0x1
	0x0348F01C STRB W8, [X19 + 0x933]
	0x0348F020 MOVI V0.2D, 0x0
	0x0348F024 STR X31, [X31 + 0x20]
	0x0348F028 STP V0, V0, [X31]
	0x0348F02C CBZ X20, 0x348F0D0
	0x0348F030 ADRP X8, 0xCA2000
	0x0348F034 LDR X8, [X8 + 0x458]
	0x0348F038 MOV X0, X20
	0x0348F03C LDR X1, [X8]
	0x0348F040 BL 0x2AA4E88
	0x0348F044 CBZ W0, 0x348F0D0
	0x0348F048 ADRP X8, 0xC64000
	0x0348F04C LDR X8, [X8 + 0x8F0]
	0x0348F050 LDR X0, [X8]
	0x0348F054 BL 0x1C16F10
	0x0348F058 MOV X1, X31
	0x0348F05C MOV X19, X0
	0x0348F060 BL 0x3231AC4
	0x0348F064 ADRP X8, 0xC69000
	0x0348F068 LDR X8, [X8 + 0x4E8]
	0x0348F06C MOV X0, X20
	0x0348F070 LDR X1, [X8]
	0x0348F074 ADD X8, X31, 0x0
	0x0348F078 BL 0x2AA54BC
	0x0348F07C ADRP X20, 0xC69000
	0x0348F080 ADRP X21, 0xC68000
	0x0348F084 ADRP X22, 0xCA2000
	0x0348F088 LDR X20, [X20 + 0x4F8]
	0x0348F08C LDR X21, [X21 + 0x928]
	0x0348F090 LDR X22, [X22 + 0x420]
	0x0348F094 LDR X1, [X20]
	0x0348F098 ADD X0, X31, 0x0
	0x0348F09C BL 0x2C0A728
	0x0348F0A0 TBZ X0, 0x0, 0x348F0E8
	0x0348F0A4 LDP X0, X2, [X31 + 0x10]
	0x0348F0A8 LDR X1, [X21]
	0x0348F0AC LDR X3, [X22]
	0x0348F0B0 MOV X4, X31
	0x0348F0B4 BL 0x32277C4
	0x0348F0B8 MOV X1, X0
	0x0348F0BC CBZ X19, 0x348F124
	0x0348F0C0 MOV X0, X19
	0x0348F0C4 MOV X2, X31
	0x0348F0C8 BL 0x32333E0
	0x0348F0CC B 0x348F094
	0x0348F0D0 ADRP X8, 0xC66000
	0x0348F0D4 LDR X8, [X8 + 0x278]
	0x0348F0D8 LDR X8, [X8]
	0x0348F0DC LDR X8, [X8 + 0xB8]
	0x0348F0E0 LDR X0, [X8]
	0x0348F0E4 B 0x348F110
	0x0348F0E8 ADRP X8, 0xC69000
	0x0348F0EC LDR X8, [X8 + 0x4F0]
	0x0348F0F0 ADD X0, X31, 0x0
	0x0348F0F4 LDR X1, [X8]
	0x0348F0F8 BL 0x2C0A83C
	0x0348F0FC CBZ X19, 0x348F128
	0x0348F100 LDR X8, [X19]
	0x0348F104 MOV X0, X19
	0x0348F108 LDP X9, X1, [X8 + 0x168]
	0x0348F10C BLR X9
	0x0348F110 LDP X20, X19, [X31 + 0x50]
	0x0348F114 LDP X22, X21, [X31 + 0x40]
	0x0348F118 LDR X30, [X31 + 0x30]
	0x0348F11C ADD X31, X31, 0x60
	0x0348F120 RET
	0x0348F124 BL 0x1C16F20
	0x0348F128 BL 0x1C16F20
	0x0348F12C B 0x348F138
	0x0348F130 B 0x348F138
	0x0348F134 B 0x348F138
	0x0348F138 MOV X20, X0
	0x0348F13C CMP W1, 0x1
	0x0348F140 B.NE 0x348F174
	0x0348F144 MOV X0, X20
	0x0348F148 BL 0x3EB1AD0
	0x0348F14C LDR X21, [X0]
	0x0348F150 BL 0x3EB1AE0
	0x0348F154 ADRP X8, 0xC69000
	0x0348F158 LDR X8, [X8 + 0x4F0]
	0x0348F15C ADD X0, X31, 0x0
	0x0348F160 LDR X1, [X8]
	0x0348F164 BL 0x2C0A83C
	0x0348F168 CBZ X21, 0x348F0FC
	0x0348F16C MOV X0, X21
	0x0348F170 BL 0x1C16F18
	0x0348F174 MOV X21, X31
	0x0348F178 B 0x348F180
	0x0348F17C MOV X20, X0
	0x0348F180 ADRP X8, 0xC69000
	0x0348F184 LDR X8, [X8 + 0x4F0]
	0x0348F188 LDR X1, [X8]
	0x0348F18C ADD X0, X31, 0x0
	0x0348F190 BL 0x2C0A83C
	0x0348F194 CBNZ X21, 0x348F1A0
	0x0348F198 MOV X0, X20
	0x0348F19C BL 0x1D2C690
	0x0348F1A0 MOV X0, X21
	0x0348F1A4 BL 0x1C16F18
	0x0348F1A8 BL 0x1990590
	0x0348F1AC SUB X31, X31, 0xA0
	0x0348F1B0 STR X30, [X31 + 0x50]
	0x0348F1B4 STP X26, X25, [X31 + 0x60]
	0x0348F1B8 STP X24, X23, [X31 + 0x70]
	0x0348F1BC STP X22, X21, [X31 + 0x80]
	0x0348F1C0 STP X20, X19, [X31 + 0x90]
	0x0348F1C4 ADRP X25, 0xF4E000
	0x0348F1C8 ADRP X24, 0xCA2000
	0x0348F1CC LDRB W8, [X25 + 0x934]
	0x0348F1D0 LDR X24, [X24 + 0x168]
	0x0348F1D4 MOV X19, X6
	0x0348F1D8 MOV X20, X5
	0x0348F1DC MOV X21, X4
	0x0348F1E0 MOV X22, X3
	0x0348F1E4 MOV X23, X0
	0x0348F1E8 TBNZ X8, 0x0, 0x348F224
	0x0348F1EC ADRP X0, 0xCA2000
	0x0348F1F0 LDR X0, [X0 + 0x170]
	0x0348F1F4 BL 0x1C16CF4
	0x0348F1F8 ADRP X0, 0xCA2000
	0x0348F1FC LDR X0, [X0 + 0x460]
	0x0348F200 BL 0x1C16CF4
	0x0348F204 ADRP X0, 0xCA2000
	0x0348F208 LDR X0, [X0 + 0x180]
	0x0348F20C BL 0x1C16CF4
	0x0348F210 ADRP X0, 0xCA2000
	0x0348F214 LDR X0, [X0 + 0x168]
	0x0348F218 BL 0x1C16CF4
	0x0348F21C MOVZ W8, 0x1
	0x0348F220 STRB W8, [X25 + 0x934]
	0x0348F224 LDR X0, [X24]
	0x0348F228 MOVI V0.2D, 0x0
	0x0348F22C STP V0, V0, [X31 + 0x30]
	0x0348F230 STP V0, V0, [X31 + 0x10]
	0x0348F234 STR V0, [X31]
	0x0348F238 ADRP X24, 0xCA2000
	0x0348F23C ADRP X26, 0xCA2000
	0x0348F240 ADRP X25, 0xCA2000

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+48], X24
	004 Move [X31+56], X23
	005 Move [X31+64], X22
	006 Move [X31+72], X21
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 Move X20, 0xF50000
	010 Move W8, [X20+2341]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {42}
	016 Move X0, 0xC71000
	017 Move X0, [X0+3688]
	018 Call 0x1C17CF4
	019 Move X0, 0xC8E000
	020 Move X0, [X0+1456]
	021 Call 0x1C17CF4
	022 Move X0, 0xCA4000
	023 Move X0, [X0+952]
	024 Call 0x1C17CF4
	025 Move X0, 0xC69000
	026 Move X0, [X0+640]
	027 Call 0x1C17CF4
	028 Move X0, 0xC6E000
	029 Move X0, [X0+2008]
	030 Call 0x1C17CF4
	031 Move X0, 0xC67000
	032 Move X0, [X0+1976]
	033 Call 0x1C17CF4
	034 Move X0, 0xC68000
	035 Move X0, [X0+1392]
	036 Call 0x1C17CF4
	037 Move X0, 0xCA4000
	038 Move X0, [X0+960]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+2341], W8
	042 Move [X31+40], X31
	043 Move [X31+16], X31
	044 Move [X31+24], X31
	045 Move [X31+8], X31
	046 Move X24, 0xC6E000
	047 Move X23, 0xC69000
	048 Move W8, [X19]
	049 Move X20, [X19+32]
	050 Move X24, [X24+2008]
	051 Move X23, [X23+640]
	052 Compare W8, 0
	053 JumpIfEqual {70}
	054 NotImplemented "Instruction CMP not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X8, [X19+40]
	057 Move TEMP, 0
	058 Not TEMP
	059 Move W9, TEMP
	060 Move [X31+40], X8
	061 Move [X19+40], X31
	062 Move [X19], W9
	063 Move X8, [X19+40]
	064 Move TEMP, 0
	065 Not TEMP
	066 Move W9, TEMP
	067 Move [X31+40], X8
	068 Move [X19+40], X31
	069 Move [X19], W9
	070 Move X8, [X19+40]
	071 Move TEMP, 0
	072 Not TEMP
	073 Move W9, TEMP
	074 Move [X31+40], X8
	075 Move [X19+40], X31
	076 Move [X19], W9
	077 Add X0, X31, 40
	078 Move X1, X31
	079 Call TaskAwaiter.GetResult, X0
	080 Compare X20, 0
	081 JumpIfEqual {304}
	082 Move X8, [X20+56]
	083 Move X0, [X24]
	084 Move [X31+24], X8
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Add X0, X31, 24
	090 Move X1, X31
	091 Call CancellationToken.get_IsCancellationRequested, X0
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfEqual {252}
	096 Move X8, 0xC67000
	097 Move X8, [X8+1976]
	098 Move X21, [X20+40]
	099 Move X22, [X20+56]
	100 Move X0, [X8]
	101 Move W8, [X0+224]
	102 Compare W8, 0
	103 JumpIfNotEqual {105}
	104 Call 0x1C17DFC
	105 Move X0, X21
	106 Move X1, X22
	107 Move X2, X31
	108 Call Task.Delay, X0, X1
	109 Compare X0, 0
	110 JumpIfEqual {307}
	111 Move X1, X31
	112 Call Task.GetAwaiter, X0
	113 Move [X31+40], X0
	114 Add X0, X31, 40
	115 Move X1, X31
	116 Call TaskAwaiter.get_IsCompleted, X0
	117 Move TEMP, X0
	118 And TEMP, TEMP, 1
	119 Compare TEMP, 1
	120 JumpIfNotEqual {273}
	121 Add X0, X31, 40
	122 Move X1, X31
	123 Call TaskAwaiter.GetResult, X0
	124 Compare X20, 0
	125 JumpIfEqual {305}
	126 Move X0, [X20+16]
	127 Compare X0, 0
	128 JumpIfEqual {306}
	129 Move X8, [X0]
	130 Move X9, [X8+440]
	131 Move X1, [X8+448]
	132 NotImplemented "Instruction BLR not yet implemented."
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move X22, 0xC68000
	135 Move X8, [X20+72]
	136 Move X22, [X22+1392]
	137 Compare X8, 0
	138 JumpIfNotEqual {215}
	139 Move X8, [X20+56]
	140 Move X0, [X24]
	141 Move [X31+24], X8
	142 Move W8, [X0+224]
	143 Compare W8, 0
	144 JumpIfNotEqual {146}
	145 Call 0x1C17DFC
	146 Add X0, X31, 24
	147 Move X1, X31
	148 Call CancellationToken.get_IsCancellationRequested, X0
	149 Move TEMP, X0
	150 And TEMP, TEMP, 1
	151 Compare TEMP, 1
	152 JumpIfEqual {80}
	153 Move X0, [X20+64]
	154 Compare X0, 0
	155 JumpIfEqual {309}
	156 Move X1, X31
	157 Call Stopwatch.get_Elapsed, X0
	158 Move X21, X0
	159 Move X0, [X22]
	160 Move W8, [X0+224]
	161 Compare W8, 0
	162 JumpIfNotEqual {164}
	163 Call 0x1C17DFC
	164 Move [X20+72], X21
	165 Move X0, X21
	166 Move X1, X31
	167 Call BitConverter.GetBytes, X0
	168 Move X8, 0xC8E000
	169 Move X8, [X8+1456]
	170 Move X21, X0
	171 Move X0, [X8]
	172 Move W8, [X0+224]
	173 Compare W8, 0
	174 JumpIfNotEqual {176}
	175 Call 0x1C17DFC
	176 Move X8, 0xC71000
	177 Move X8, [X8+3688]
	178 Move X2, [X8]
	179 Add X0, X31, 8
	180 Move X1, X21
	181 Call 0x2B88B6C, X0, X1
	182 Move X1, [X31+8]
	183 Move X2, [X31+16]
	184 Move X3, [X20+56]
	185 Move X0, X20
	186 Call PingPongManager.SendPing, X0, X1, X2
	187 Compare X0, 0
	188 JumpIfEqual {308}
	189 Move X1, X31
	190 Call Task.GetAwaiter, X0
	191 Move [X31+40], X0
	192 Add X0, X31, 40
	193 Move X1, X31
	194 Call TaskAwaiter.get_IsCompleted, X0
	195 Move TEMP, X0
	196 And TEMP, TEMP, 1
	197 Compare TEMP, 1
	198 JumpIfEqual {77}
	199 Move W8, 2
	200 Move [X19], W8
	201 Move X8, [X31+40]
	202 Move [X19+40], X8
	203 Move X0, [X23]
	204 Move W8, [X0+224]
	205 Compare W8, 0
	206 JumpIfNotEqual {208}
	207 Call 0x1C17DFC
	208 Move X8, 0xCA4000
	209 Move X8, [X8+952]
	210 Add X0, X19, 8
	211 Move X3, [X8]
	212 Add X1, X31, 40
	213 Move X2, X19
	214 Call AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted, X0, X1, X2
	215 Move X21, [X20+16]
	216 Move X8, [X20+40]
	217 Move X0, [X22]
	218 Move [X31], X8
	219 Add X1, X31, 0
	220 Call 0x1C17E04
	221 Move X1, X0
	222 Move X8, 0xCA4000
	223 Move X8, [X8+960]
	224 Move X0, [X8]
	225 Move X2, X31
	226 Call String.Format, X0, X1
	227 Compare X21, 0
	228 JumpIfEqual {310}
	229 Move X8, [X21]
	230 Move X3, [X20+56]
	231 Move X2, X0
	232 Move X9, [X8+488]
	233 Move X4, [X8+496]
	234 Move W1, 1000
	235 Move X0, X21
	236 NotImplemented "Instruction BLR not yet implemented."
	237 Compare X0, 0
	238 JumpIfEqual {311}
	239 Move X1, X31
	240 Call Task.GetAwaiter, X0
	241 Move [X31+40], X0
	242 Add X0, X31, 40
	243 Move X1, X31
	244 Call TaskAwaiter.get_IsCompleted, X0
	245 Move TEMP, X0
	246 And TEMP, TEMP, 1
	247 Compare TEMP, 1
	248 JumpIfNotEqual {288}
	249 Add X0, X31, 40
	250 Move X1, X31
	251 Call TaskAwaiter.GetResult, X0
	252 Move TEMP, 1
	253 Not TEMP
	254 Move W8, TEMP
	255 Move [X19+8], W8
	256 Move X0, [X23]
	257 Move W8, [X0+224]
	258 Compare W8, 0
	259 JumpIfNotEqual {261}
	260 Call 0x1C17DFC
	261 Move X0, X19
	262 Move X1, X31
	263 Call AsyncTaskMethodBuilder.SetResult, X0
	264 Move X20, [X31+80]
	265 Move X19, [X31+88]
	266 Move X22, [X31+64]
	267 Move X21, [X31+72]
	268 Move X24, [X31+48]
	269 Move X23, [X31+56]
	270 Move X30, [X31+32]
	271 Add X31, X31, 96
	272 Return 
	273 Move [X19], W31
	274 Move X8, [X31+40]
	275 Move [X19+40], X8
	276 Move X0, [X23]
	277 Move W8, [X0+224]
	278 Compare W8, 0
	279 JumpIfNotEqual {281}
	280 Call 0x1C17DFC
	281 Move X8, 0xCA3000
	282 Move X8, [X8+952]
	283 Add X0, X19, 8
	284 Move X3, [X8]
	285 Add X1, X31, 40
	286 Move X2, X19
	287 Call AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted, X0, X1, X2
	288 Move W8, 1
	289 Move [X19], W8
	290 Move X8, [X31+40]
	291 Move [X19+40], X8
	292 Move X0, [X23]
	293 Move W8, [X0+224]
	294 Compare W8, 0
	295 JumpIfNotEqual {297}
	296 Call 0x1C17DFC
	297 Move X8, 0xCA3000
	298 Move X8, [X8+952]
	299 Add X0, X19, 8
	300 Move X3, [X8]
	301 Add X1, X31, 40
	302 Move X2, X19
	303 Call AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted, X0, X1, X2
	304 Call 0x1C17F20
	305 Call 0x1C17F20
	306 Call 0x1C17F20
	307 Call 0x1C17F20
	308 Call 0x1C17F20
	309 Call 0x1C17F20
	310 Call 0x1C17F20
	311 Call 0x1C17F20
	312 Move X20, X0
	313 NotImplemented "Instruction CMP not yet implemented."
	314 Move X0, X20
	315 Call 0x3EB2AD0
	316 Move X20, X0
	317 Move X0, 0xC6D000
	318 Move X0, [X0+2216]
	319 Call 0x1C17D08
	320 Move X8, [X20]
	321 Move X1, [X8]
	322 Call 0x1C18270
	323 Move TEMP, X0
	324 And TEMP, TEMP, 1
	325 Compare TEMP, 1
	326 JumpIfNotEqual {328}
	327 Call 0x3EB2AE0
	328 Move W0, 8
	329 Call 0x3EB2AF0
	330 Move X8, [X20]
	331 Move [X0], X8
	332 Move X1, 0xA26000
	333 Add X1, X1, 3672
	334 Move X2, X31
	335 Call 0x3EB2B00
	336 Move X20, X0
	337 Move X21, X1
	338 Move X20, X0
	339 Call 0x3EB2AE0
	340 Move W1, W21
	341 Move W8, 1
	342 NotImplemented "Instruction CMP not yet implemented."
	343 Move X0, X20
	344 Call 0x3EB2AD0
	345 Move X20, X0
	346 Move X0, 0xC65000
	347 Move X0, [X0+2000]
	348 Call 0x1C17D08
	349 Move X8, [X20]
	350 Move X1, [X8]
	351 Call 0x1C18270
	352 Move TEMP, X0
	353 And TEMP, TEMP, 1
	354 Compare TEMP, 1
	355 JumpIfNotEqual {373}
	356 Move X20, [X20]
	357 Call 0x3EB2AE0
	358 Move TEMP, 1
	359 Not TEMP
	360 Move W8, TEMP
	361 Move [X19+8], W8
	362 Move X0, 0xC68000
	363 Move X0, [X0+640]
	364 Call 0x1C17D08
	365 Move W8, [X0+224]
	366 Compare W8, 0
	367 JumpIfNotEqual {369}
	368 Call 0x1C17DFC
	369 Move X0, X19
	370 Move X1, X20
	371 Move X2, X31
	372 Call AsyncTaskMethodBuilder.SetException, X0, X1
	373 Move W0, 8
	374 Call 0x3EB2AF0
	375 Move X8, [X20]
	376 Move [X0], X8
	377 Move X1, 0xA26000
	378 Add X1, X1, 3672
	379 Move X2, X31
	380 Call 0x3EB2B00
	381 Move X20, X0
	382 Call 0x3EB2AE0
	383 Move X0, X20
	384 Call 0x1D2D690
	385 Call 0x1991590
	386 Move X20, X0

Method: System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)

Disassembly:
	0x0348F244 LDR W8, [X0 + 0xE0]
	0x0348F248 LDR X24, [X24 + 0x170]
	0x0348F24C LDR X26, [X26 + 0x460]
	0x0348F250 LDR X25, [X25 + 0x180]
	0x0348F254 CBNZ W8, 0x348F25C
	0x0348F258 BL 0x1C16DFC
	0x0348F25C LDR X0, [X24]
	0x0348F260 ADD X8, X31, 0x0
	0x0348F264 ORR X24, X8, 0xF
	0x0348F268 MOV X8, X24
	0x0348F26C BL 0x263221C
	0x0348F270 LDR X2, [X26]
	0x0348F274 MOVN W8, 0x0
	0x0348F278 ADD X1, X31, 0x0
	0x0348F27C MOV X0, X24
	0x0348F280 STP X21, X23, [X31 + 0x30]
	0x0348F284 STP X20, X22, [X31 + 0x20]
	0x0348F288 STR X19, [X31 + 0x40]
	0x0348F28C STR W8, [X31]
	0x0348F290 BL 0x1FD2014
	0x0348F294 LDR X1, [X25]
	0x0348F298 MOV X0, X24
	0x0348F29C BL 0x2632230
	0x0348F2A0 LDP X20, X19, [X31 + 0x90]
	0x0348F2A4 LDP X22, X21, [X31 + 0x80]
	0x0348F2A8 LDP X24, X23, [X31 + 0x70]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xF4F000
	007 Move X22, 0xC68000
	008 Move W8, [X21+2342]
	009 Move X22, [X22+640]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xC68000
	017 Move X0, [X0+640]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2342], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Add X0, X20, 8
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call AsyncTaskMethodBuilder.SetStateMachine, X0, X1
	035 Return 

