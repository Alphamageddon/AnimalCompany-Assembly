Type: Nakama.Ninja.WebSockets.Internal.BinaryReaderWriter/<ReadULongExactly>d__2

Method: System.Void MoveNext()

Disassembly:
	0x034945C0 B 0x349462C
	0x034945C4 ADRP X8, 0xC5F000
	0x034945C8 LDR X8, [X8 + 0x618]
	0x034945CC LDR X0, [X8]
	0x034945D0 MOVZ W1, 0x8
	0x034945D4 BL 0x1C16D6C
	0x034945D8 MOV X1, X0
	0x034945DC ADRP X8, 0xC6A000
	0x034945E0 LDR X8, [X8 + 0xE68]
	0x034945E4 STP X31, X31, [X31 + 0x18]
	0x034945E8 LDR X2, [X8]
	0x034945EC ADD X0, X31, 0x18
	0x034945F0 BL 0x2B87B6C
	0x034945F4 LDUR V0, [X31 + 0x18]
	0x034945F8 LDP X1, X4, [X19 + 0x20]
	0x034945FC STR V0, [X19 + 0x4]
	0x03494600 LDP X2, X3, [X19 + 0x40]
	0x03494604 MOVZ W0, 0x2
	0x03494608 BL 0x3492814
	0x0349460C CBZ X0, 0x3494AFC
	0x03494610 MOV X1, X31
	0x03494614 BL 0x33ED394
	0x03494618 STR X0, [X31 + 0x48]
	0x0349461C ADD X0, X31, 0x48
	0x03494620 MOV X1, X31
	0x03494624 BL 0x32C3A80
	0x03494628 TBZ X0, 0x0, 0x34949FC
	0x0349462C ADD X0, X31, 0x48
	0x03494630 MOV X1, X31
	0x03494634 BL 0x32C3B4C
	0x03494638 ADRP X8, 0xC87000
	0x0349463C LDR X8, [X8 + 0x5B0]
	0x03494640 LDR X0, [X8]
	0x03494644 LDR W8, [X0 + 0xE0]
	0x03494648 CBNZ W8, 0x3494650
	0x0349464C BL 0x1C16DFC
	0x03494650 LDR X1, [X19 + 0x40]
	0x03494654 CBZ X1, 0x3494AEC
	0x03494658 LDR W8, [X1 + 0x18]
	0x0349465C CBZ W8, 0x3494AF0
	0x03494660 CMP W8, 0x1
	0x03494664 B.EQ 0x3494AF4
	0x03494668 LDRB W8, [X1 + 0x20]
	0x0349466C LDRB W0, [X1 + 0x21]
	0x03494670 LDR X2, [X19 + 0x48]
	0x03494674 LDP X3, X4, [X19 + 0x20]
	0x03494678 UBFM W9, W8, 0x7, 0x1F
	0x0349467C AND W8, W8, 0xF
	0x03494680 UBFM W10, W0, 0x7, 0x1F
	0x03494684 STRB W9, [X19 + 0x50]
	0x03494688 STR W8, [X19 + 0x54]
	0x0349468C STRB W10, [X19 + 0x58]
	0x03494690 BL 0x3494354
	0x03494694 CBZ X0, 0x3494AF8
	0x03494698 ADRP X8, 0xC9D000
	0x0349469C LDR X8, [X8 + 0x7E0]
	0x034946A0 LDR X1, [X8]
	0x034946A4 BL 0x26A3030
	0x034946A8 ADRP X8, 0xC9D000
	0x034946AC LDR X8, [X8 + 0x7D8]
	0x034946B0 STR X0, [X31 + 0x38]
	0x034946B4 LDR X1, [X8]
	0x034946B8 ADD X0, X31, 0x38
	0x034946BC BL 0x2677730
	0x034946C0 TBZ X0, 0x0, 0x34949BC
	0x034946C4 ADRP X8, 0xC9D000
	0x034946C8 LDR X8, [X8 + 0x7D0]
	0x034946CC LDR X1, [X8]
	0x034946D0 ADD X0, X31, 0x38
	0x034946D4 BL 0x2677774
	0x034946D8 STR W0, [X19 + 0x5C]
	0x034946DC ADRP X8, 0xC87000
	0x034946E0 LDR X8, [X8 + 0x5B0]
	0x034946E4 MOV W20, W0
	0x034946E8 LDR X0, [X8]
	0x034946EC LDR W8, [X0 + 0xE0]
	0x034946F0 CBNZ W8, 0x34946F8
	0x034946F4 BL 0x1C16DFC
	0x034946F8 LDR W8, [X19 + 0x3C]
	0x034946FC CMP W8, W20
	0x03494700 B.GE 0x3494714
	0x03494704 ADD W9, W8, 0x3
	0x03494708 CMP W8, 0x0
	0x0349470C CSEL W8, W9, W8, LT
	0x03494710 AND W20, W8, 0xFFFFFFFC
	0x03494714 STR W20, [X19 + 0x60]
	0x03494718 STP X31, X31, [X19 + 0x68]
	0x0349471C CMP W21, 0x2
	0x03494720 B.EQ 0x3494770
	0x03494724 CMP W21, 0x3
	0x03494728 B.EQ 0x3494758
	0x0349472C CMP W21, 0x4
	0x03494730 B.NE 0x3494788
	0x03494734 LDR X8, [X19 + 0x78]
	0x03494738 MOVN W9, 0x0
	0x0349473C STR X8, [X31 + 0x48]
	0x03494740 STR X31, [X19 + 0x78]
	0x03494744 STR W9, [X19]
	0x03494748 ADD X0, X31, 0x48
	0x0349474C MOV X1, X31
	0x03494750 BL 0x32C3B4C
	0x03494754 B 0x3494890
	0x03494758 LDR X8, [X19 + 0x78]
	0x0349475C MOVN W9, 0x0
	0x03494760 STR X8, [X31 + 0x48]
	0x03494764 STR X31, [X19 + 0x78]
	0x03494768 STR W9, [X19]
	0x0349476C B 0x3494840
	0x03494770 LDR X8, [X19 + 0x78]
	0x03494774 MOVN W9, 0x0
	0x03494778 STR X8, [X31 + 0x48]
	0x0349477C STR X31, [X19 + 0x78]
	0x03494780 STR W9, [X19]
	0x03494784 B 0x3494804
	0x03494788 LDRB W8, [X19 + 0x58]
	0x0349478C CBZ W8, 0x3494A38
	0x03494790 ADRP X8, 0xC87000
	0x03494794 LDR X8, [X8 + 0x5B0]
	0x03494798 LDR X0, [X8]
	0x0349479C LDR W8, [X0 + 0xE0]
	0x034947A0 CBNZ W8, 0x34947A8
	0x034947A4 BL 0x1C16DFC
	0x034947A8 ADRP X8, 0xC8A000
	0x034947AC LDR X1, [X19 + 0x40]
	0x034947B0 LDR X8, [X8 + 0xB88]
	0x034947B4 STP X31, X31, [X31 + 0x18]
	0x034947B8 LDR X4, [X8]
	0x034947BC ADD X0, X31, 0x18
	0x034947C0 MOVZ W3, 0x4
	0x034947C4 MOV W2, W31
	0x034947C8 BL 0x2B87BB0
	0x034947CC LDUR V0, [X31 + 0x18]
	0x034947D0 LDP X1, X4, [X19 + 0x20]
	0x034947D4 STUR V0, [X19 + 0x68]
	0x034947D8 LDR W0, [X19 + 0x74]
	0x034947DC LDP X2, X3, [X19 + 0x68]
	0x034947E0 BL 0x3492814
	0x034947E4 CBZ X0, 0x3494B00
	0x034947E8 MOV X1, X31
	0x034947EC BL 0x33ED394
	0x034947F0 STR X0, [X31 + 0x48]
	0x034947F4 ADD X0, X31, 0x48
	0x034947F8 MOV X1, X31
	0x034947FC BL 0x32C3A80
	0x03494800 TBZ X0, 0x0, 0x3494AA8
	0x03494804 ADD X0, X31, 0x48
	0x03494808 MOV X1, X31
	0x0349480C BL 0x32C3B4C
	0x03494810 LDR W0, [X19 + 0x60]
	0x03494814 LDP X1, X4, [X19 + 0x20]
	0x03494818 LDP X2, X3, [X19 + 0x30]
	0x0349481C BL 0x3492814
	0x03494820 CBZ X0, 0x3494AE8
	0x03494824 MOV X1, X31
	0x03494828 BL 0x33ED394
	0x0349482C STR X0, [X31 + 0x48]
	0x03494830 ADD X0, X31, 0x48
	0x03494834 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xF4A000
	007 Move W8, [X20+2393]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {33}
	013 Move X0, 0xC93000
	014 Move X0, [X0+3312]
	015 Call 0x1C17CF4
	016 Move X0, 0xC93000
	017 Move X0, [X0+3328]
	018 Call 0x1C17CF4
	019 Move X0, 0xC88000
	020 Move X0, [X0+1456]
	021 Call 0x1C17CF4
	022 Move X0, 0xC9E000
	023 Move X0, [X0+1800]
	024 Call 0x1C17CF4
	025 Move X0, 0xC9E000
	026 Move X0, [X0+1808]
	027 Call 0x1C17CF4
	028 Move X0, 0xC9E000
	029 Move X0, [X0+1664]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+2393], W8
	033 Move [X31+8], X31
	034 Move X21, 0xC9E000
	035 Move W8, [X19]
	036 Move X21, [X21+1664]
	037 Compare W8, 0
	038 JumpIfEqual {72}
	039 Move X1, [X19+32]
	040 Move X2, [X19+40]
	041 Move X3, [X19+48]
	042 Move X4, [X19+56]
	043 Move W0, 8
	044 Call BinaryReaderWriter.ReadExactly, X0, X1, X2, X3
	045 Compare X0, 0
	046 JumpIfEqual {128}
	047 Move X1, X31
	048 Call Task.GetAwaiter, X0
	049 Move [X31+8], X0
	050 Add X0, X31, 8
	051 Move X1, X31
	052 Call TaskAwaiter.get_IsCompleted, X0
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {79}
	057 Move [X19], W31
	058 Move X8, [X31+8]
	059 Move [X19+72], X8
	060 Move X0, [X21]
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Move X8, 0xC9E000
	066 Move X8, [X8+1800]
	067 Add X0, X19, 8
	068 Move X3, [X8]
	069 Add X1, X31, 8
	070 Move X2, X19
	071 Call AsyncTaskMethodBuilder`1<UInt64>.AwaitUnsafeOnCompleted, X0, X1, X2
	072 Move X8, [X19+72]
	073 Move TEMP, 0
	074 Not TEMP
	075 Move W9, TEMP
	076 Move [X31+8], X8
	077 Move [X19+72], X31
	078 Move [X19], W9
	079 Add X0, X31, 8
	080 Move X1, X31
	081 Call TaskAwaiter.GetResult, X0
	082 Move X20, 0xC88000
	083 Move W8, [X19+64]
	084 Move X20, [X20+1456]
	085 Compare W8, 0
	086 JumpIfNotEqual {97}
	087 Move X0, [X20]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move X0, [X19+40]
	093 Move W1, [X19+48]
	094 Move W2, 8
	095 Move X3, X31
	096 Call Array.Reverse, X0, X1, X2
	097 Move X0, [X20]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move X0, [X19+40]
	103 Move W1, [X19+48]
	104 Move X2, X31
	105 Call BitConverter.ToUInt64, X0, X1
	106 Move TEMP, 1
	107 Not TEMP
	108 Move W8, TEMP
	109 Move [X19+8], W8
	110 Move X20, X0
	111 Move X0, [X21]
	112 Move X21, 0xC9E000
	113 Move W8, [X0+224]
	114 Move X21, [X21+1808]
	115 Compare W8, 0
	116 JumpIfNotEqual {118}
	117 Call 0x1C17DFC
	118 Move X2, [X21]
	119 Move X0, X19
	120 Move X1, X20
	121 Call AsyncTaskMethodBuilder`1<UInt64>.SetResult, X0, X1
	122 Move X20, [X31+32]
	123 Move X19, [X31+40]
	124 Move X30, [X31+16]
	125 Move X21, [X31+24]
	126 Add X31, X31, 48
	127 Return 
	128 Call 0x1C17F20
	129 Move X20, X0
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Move X0, X20
	132 Call 0x3EB2AD0
	133 Move X20, X0
	134 Move X0, 0xC60000
	135 Move X0, [X0+2000]
	136 Call 0x1C17D08
	137 Move X8, [X20]
	138 Move X1, [X8]
	139 Call 0x1C18270
	140 Move TEMP, X0
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfNotEqual {164}
	144 Move X20, [X20]
	145 Call 0x3EB2AE0
	146 Move TEMP, 1
	147 Not TEMP
	148 Move W8, TEMP
	149 Move [X19+8], W8
	150 Move X0, 0xC9E000
	151 Move X0, [X0+1664]
	152 Call 0x1C17D08
	153 Move W8, [X0+224]
	154 Compare W8, 0
	155 JumpIfNotEqual {157}
	156 Call 0x1C17DFC
	157 Move X0, 0xC9E000
	158 Move X0, [X0+1816]
	159 Call 0x1C17D08
	160 Move X2, X0
	161 Move X0, X19
	162 Move X1, X20
	163 Call AsyncTaskMethodBuilder`1<UInt64>.SetException, X0, X1
	164 Move W0, 8
	165 Call 0x3EB2AF0
	166 Move X8, [X20]
	167 Move [X0], X8
	168 Move X1, 0xA21000
	169 Add X1, X1, 3672
	170 Move X2, X31
	171 Call 0x3EB2B00
	172 Move X20, X0
	173 Call 0x3EB2AE0
	174 Move X0, X20
	175 Call 0x1D2D690
	176 Call 0x1991590

Method: System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)

Disassembly:
	0x03494838 BL 0x32C3A80
	0x0349483C TBZ X0, 0x0, 0x349497C
	0x03494840 ADD X0, X31, 0x48
	0x03494844 MOV X1, X31
	0x03494848 BL 0x32C3B4C
	0x0349484C ADRP X8, 0xC87000
	0x03494850 LDR X8, [X8 + 0x5B0]
	0x03494854 LDR X0, [X8]
	0x03494858 LDR W8, [X0 + 0xE0]
	0x0349485C CBNZ W8, 0x3494864
	0x03494860 BL 0x1C16DFC
	0x03494864 ADRP X8, 0xC8A000
	0x03494868 LDR X1, [X19 + 0x30]
	0x0349486C LDR W2, [X19 + 0x38]
	0x03494870 LDR W3, [X19 + 0x60]
	0x03494874 LDR X8, [X8 + 0xB88]
	0x03494878 LDR X4, [X8]
	0x0349487C ADD X0, X31, 0x28
	0x03494880 BL 0x2B87BB0
	0x03494884 LDP X0, X1, [X19 + 0x68]
	0x03494888 LDP X2, X3, [X31 + 0x28]
	0x0349488C BL 0x3493D1C
	0x03494890 LDR W22, [X19 + 0x54]
	0x03494894 LDRB W21, [X19 + 0x50]
	0x03494898 CMP W22, 0x8
	0x0349489C B.NE 0x34948C4
	0x034948A0 LDR W2, [X19 + 0x5C]
	0x034948A4 LDP X3, X4, [X19 + 0x30]
	0x034948A8 LDP X5, X6, [X19 + 0x68]
	0x034948AC CMP W21, 0x0
	0x034948B0 CSET W0, NE

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xF4A000
	007 Move X21, 0xC9E000
	008 Move W8, [X22+2394]
	009 Move X21, [X21+1664]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xC9E000
	017 Move X0, [X0+1824]
	018 Call 0x1C17CF4
	019 Move X0, 0xC9E000
	020 Move X0, [X0+1664]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2394], W8
	024 Move X0, [X21]
	025 Move X21, 0xC9E000
	026 Move W8, [X0+224]
	027 Move X21, [X21+1824]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X2, [X21]
	032 Add X0, X20, 8
	033 Move X1, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Call AsyncTaskMethodBuilder`1<UInt64>.SetStateMachine, X0, X1
	040 Return 

