Type: Nakama.Ninja.WebSockets.Internal.BinaryReaderWriter/<ReadLongExactly>d__3

Method: System.Void MoveNext()

Disassembly:
	0x034942CC BL 0x1C16DFC
	0x034942D0 CBZ X28, 0x3494350
	0x034942D4 LDR X8, [X28]
	0x034942D8 ADD W2, W25, 0x2
	0x034942DC MOV X0, X28
	0x034942E0 MOV X1, X24
	0x034942E4 LDR X9, [X8 + 0x388]
	0x034942E8 LDR X4, [X8 + 0x390]
	0x034942EC MOV W3, W26
	0x034942F0 BLR X9
	0x034942F4 MOV X24, X0
	0x034942F8 ADRP X8, 0xC9D000
	0x034942FC LDR X8, [X8 + 0x790]
	0x03494300 LDR X0, [X8]
	0x03494304 BL 0x1C16F10
	0x03494308 AND W1, W23, 0x1
	0x0349430C MOV W2, W22
	0x03494310 MOV W3, W21
	0x03494314 MOV W4, W27
	0x03494318 MOV X5, X24
	0x0349431C MOV X6, X20
	0x03494320 MOV X7, X19
	0x03494324 MOV X25, X0
	0x03494328 BL 0x3493C64
	0x0349432C MOV X0, X25
	0x03494330 LDP X20, X19, [X31 + 0x60]
	0x03494334 LDP X22, X21, [X31 + 0x50]
	0x03494338 LDP X24, X23, [X31 + 0x40]
	0x0349433C LDP X26, X25, [X31 + 0x30]
	0x03494340 LDP X28, X27, [X31 + 0x20]
	0x03494344 LDP X29, X30, [X31 + 0x10]
	0x03494348 ADD X31, X31, 0x70
	0x0349434C RET
	0x03494350 BL 0x1C16F20
	0x03494354 SUB X31, X31, 0xD0
	0x03494358 STR X30, [X31 + 0x80]
	0x0349435C STP X26, X25, [X31 + 0x90]
	0x03494360 STP X24, X23, [X31 + 0xA0]
	0x03494364 STP X22, X21, [X31 + 0xB0]
	0x03494368 STP X20, X19, [X31 + 0xC0]
	0x0349436C ADRP X25, 0xF49000
	0x03494370 ADRP X24, 0xC9D000
	0x03494374 LDRB W8, [X25 + 0x962]
	0x03494378 LDR X24, [X24 + 0x798]
	0x0349437C MOV X19, X4
	0x03494380 MOV X20, X3
	0x03494384 MOV X21, X2
	0x03494388 MOV X22, X1
	0x0349438C MOV W23, W0
	0x03494390 TBNZ X8, 0x0, 0x34943CC
	0x03494394 ADRP X0, 0xC9D000
	0x03494398 LDR X0, [X0 + 0x7A0]
	0x0349439C BL 0x1C16CF4
	0x034943A0 ADRP X0, 0xC9D000
	0x034943A4 LDR X0, [X0 + 0x7A8]
	0x034943A8 BL 0x1C16CF4
	0x034943AC ADRP X0, 0xC9D000
	0x034943B0 LDR X0, [X0 + 0x7B0]
	0x034943B4 BL 0x1C16CF4
	0x034943B8 ADRP X0, 0xC9D000
	0x034943BC LDR X0, [X0 + 0x798]
	0x034943C0 BL 0x1C16CF4
	0x034943C4 MOVZ W8, 0x1
	0x034943C8 STRB W8, [X25 + 0x962]
	0x034943CC LDR X0, [X24]
	0x034943D0 MOVI V0.2D, 0x0
	0x034943D4 STR X31, [X31 + 0x70]
	0x034943D8 STP V0, V0, [X31 + 0x50]
	0x034943DC STP V0, V0, [X31 + 0x30]
	0x034943E0 STR V0, [X31 + 0x2]
	0x034943E4 ADRP X26, 0xC9D000
	0x034943E8 ADRP X25, 0xC9D000
	0x034943EC ADRP X24, 0xC9D000
	0x034943F0 LDR W8, [X0 + 0xE0]
	0x034943F4 LDR X26, [X26 + 0x7A0]
	0x034943F8 LDR X25, [X25 + 0x7A8]
	0x034943FC LDR X24, [X24 + 0x7B0]
	0x03494400 CBNZ W8, 0x3494408
	0x03494404 BL 0x1C16DFC
	0x03494408 LDR X0, [X26]
	0x0349440C ADD X8, X31, 0x8
	0x03494410 BL 0x2633A24
	0x03494414 LDUR V0, [X31 + 0x8]
	0x03494418 LDR X9, [X31 + 0x18]
	0x0349441C LDR X2, [X25]
	0x03494420 ADD X8, X31, 0x20
	0x03494424 STP X21, X19, [X31 + 0x58]
	0x03494428 ORR X19, X8, 0xF
	0x0349442C MOVN W10, 0x0
	0x03494430 ADD X1, X31, 0x20
	0x03494434 MOV X0, X19
	0x03494438 STRB W23, [X31 + 0x40]
	0x0349443C STP X20, X22, [X31 + 0x48]
	0x03494440 STUR V0, [X31 + 0x28]
	0x03494444 STR X9, [X31 + 0x38]
	0x03494448 STR W10, [X31 + 0x20]
	0x0349444C BL 0x1FD3250
	0x03494450 LDR X1, [X24]
	0x03494454 MOV X0, X19
	0x03494458 BL 0x2633A38
	0x0349445C LDP X20, X19, [X31 + 0xC0]
	0x03494460 LDP X22, X21, [X31 + 0xB0]
	0x03494464 LDP X24, X23, [X31 + 0xA0]
	0x03494468 LDP X26, X25, [X31 + 0x90]
	0x0349446C LDR X30, [X31 + 0x80]
	0x03494470 ADD X31, X31, 0xD0
	0x03494474 RET
	0x03494478 SUB X31, X31, 0x80
	0x0349447C STR X30, [X31 + 0x40]
	0x03494480 STP X24, X23, [X31 + 0x50]
	0x03494484 STP X22, X21, [X31 + 0x60]
	0x03494488 STP X20, X19, [X31 + 0x70]
	0x0349448C ADRP X20, 0xF49000
	0x03494490 LDRB W8, [X20 + 0x963]
	0x03494494 MOV X19, X0
	0x03494498 TBNZ X8, 0x0, 0x3494564
	0x0349449C ADRP X0, 0xC8A000
	0x034944A0 LDR X0, [X0 + 0xB88]
	0x034944A4 BL 0x1C16CF4
	0x034944A8 ADRP X0, 0xC6A000
	0x034944AC LDR X0, [X0 + 0xE68]
	0x034944B0 BL 0x1C16CF4
	0x034944B4 ADRP X0, 0xC92000
	0x034944B8 LDR X0, [X0 + 0xCF0]
	0x034944BC BL 0x1C16CF4
	0x034944C0 ADRP X0, 0xC92000
	0x034944C4 LDR X0, [X0 + 0xCF8]
	0x034944C8 BL 0x1C16CF4
	0x034944CC ADRP X0, 0xC92000
	0x034944D0 LDR X0, [X0 + 0xD00]
	0x034944D4 BL 0x1C16CF4
	0x034944D8 ADRP X0, 0xC87000
	0x034944DC LDR X0, [X0 + 0x5B0]
	0x034944E0 BL 0x1C16CF4
	0x034944E4 ADRP X0, 0xC9D000
	0x034944E8 LDR X0, [X0 + 0x7B8]
	0x034944EC BL 0x1C16CF4
	0x034944F0 ADRP X0, 0xC9D000
	0x034944F4 LDR X0, [X0 + 0x7C0]
	0x034944F8 BL 0x1C16CF4
	0x034944FC ADRP X0, 0xC9D000
	0x03494500 LDR X0, [X0 + 0x7C8]
	0x03494504 BL 0x1C16CF4
	0x03494508 ADRP X0, 0xC9D000
	0x0349450C LDR X0, [X0 + 0x760]
	0x03494510 BL 0x1C16CF4
	0x03494514 ADRP X0, 0xC5F000
	0x03494518 LDR X0, [X0 + 0x618]
	0x0349451C BL 0x1C16CF4
	0x03494520 ADRP X0, 0xC9D000
	0x03494524 LDR X0, [X0 + 0x7D0]
	0x03494528 BL 0x1C16CF4
	0x0349452C ADRP X0, 0xC9D000
	0x03494530 LDR X0, [X0 + 0x7D8]
	0x03494534 BL 0x1C16CF4
	0x03494538 ADRP X0, 0xC9D000
	0x0349453C LDR X0, [X0 + 0x7E0]
	0x03494540 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xF4A000
	007 Move W8, [X20+2391]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {33}
	013 Move X0, 0xC93000
	014 Move X0, [X0+3312]
	015 Call 0x1C17CF4
	016 Move X0, 0xC93000
	017 Move X0, [X0+3328]
	018 Call 0x1C17CF4
	019 Move X0, 0xC88000
	020 Move X0, [X0+1456]
	021 Call 0x1C17CF4
	022 Move X0, 0xC9E000
	023 Move X0, [X0+1768]
	024 Call 0x1C17CF4
	025 Move X0, 0xC9E000
	026 Move X0, [X0+1776]
	027 Call 0x1C17CF4
	028 Move X0, 0xC9E000
	029 Move X0, [X0+1696]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+2391], W8
	033 Move [X31+8], X31
	034 Move X21, 0xC9E000
	035 Move W8, [X19]
	036 Move X21, [X21+1696]
	037 Compare W8, 0
	038 JumpIfEqual {72}
	039 Move X1, [X19+32]
	040 Move X2, [X19+40]
	041 Move X3, [X19+48]
	042 Move X4, [X19+56]
	043 Move W0, 8
	044 Call BinaryReaderWriter.ReadExactly, X0, X1, X2, X3
	045 Compare X0, 0
	046 JumpIfEqual {128}
	047 Move X1, X31
	048 Call Task.GetAwaiter, X0
	049 Move [X31+8], X0
	050 Add X0, X31, 8
	051 Move X1, X31
	052 Call TaskAwaiter.get_IsCompleted, X0
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {79}
	057 Move [X19], W31
	058 Move X8, [X31+8]
	059 Move [X19+72], X8
	060 Move X0, [X21]
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Move X8, 0xC9E000
	066 Move X8, [X8+1768]
	067 Add X0, X19, 8
	068 Move X3, [X8]
	069 Add X1, X31, 8
	070 Move X2, X19
	071 Call AsyncTaskMethodBuilder`1<Int64>.AwaitUnsafeOnCompleted, X0, X1, X2
	072 Move X8, [X19+72]
	073 Move TEMP, 0
	074 Not TEMP
	075 Move W9, TEMP
	076 Move [X31+8], X8
	077 Move [X19+72], X31
	078 Move [X19], W9
	079 Add X0, X31, 8
	080 Move X1, X31
	081 Call TaskAwaiter.GetResult, X0
	082 Move X20, 0xC88000
	083 Move W8, [X19+64]
	084 Move X20, [X20+1456]
	085 Compare W8, 0
	086 JumpIfNotEqual {97}
	087 Move X0, [X20]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move X0, [X19+40]
	093 Move W1, [X19+48]
	094 Move W2, 8
	095 Move X3, X31
	096 Call Array.Reverse, X0, X1, X2
	097 Move X0, [X20]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move X0, [X19+40]
	103 Move W1, [X19+48]
	104 Move X2, X31
	105 Call BitConverter.ToInt64, X0, X1
	106 Move TEMP, 1
	107 Not TEMP
	108 Move W8, TEMP
	109 Move [X19+8], W8
	110 Move X20, X0
	111 Move X0, [X21]
	112 Move X21, 0xC9E000
	113 Move W8, [X0+224]
	114 Move X21, [X21+1776]
	115 Compare W8, 0
	116 JumpIfNotEqual {118}
	117 Call 0x1C17DFC
	118 Move X2, [X21]
	119 Move X0, X19
	120 Move X1, X20
	121 Call AsyncTaskMethodBuilder`1<Int64>.SetResult, X0, X1
	122 Move X20, [X31+32]
	123 Move X19, [X31+40]
	124 Move X30, [X31+16]
	125 Move X21, [X31+24]
	126 Add X31, X31, 48
	127 Return 
	128 Call 0x1C17F20
	129 Move X20, X0
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Move X0, X20
	132 Call 0x3EB2AD0
	133 Move X20, X0
	134 Move X0, 0xC60000
	135 Move X0, [X0+2000]
	136 Call 0x1C17D08
	137 Move X8, [X20]
	138 Move X1, [X8]
	139 Call 0x1C18270
	140 Move TEMP, X0
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfNotEqual {164}
	144 Move X20, [X20]
	145 Call 0x3EB2AE0
	146 Move TEMP, 1
	147 Not TEMP
	148 Move W8, TEMP
	149 Move [X19+8], W8
	150 Move X0, 0xC9E000
	151 Move X0, [X0+1696]
	152 Call 0x1C17D08
	153 Move W8, [X0+224]
	154 Compare W8, 0
	155 JumpIfNotEqual {157}
	156 Call 0x1C17DFC
	157 Move X0, 0xC9E000
	158 Move X0, [X0+1784]
	159 Call 0x1C17D08
	160 Move X2, X0
	161 Move X0, X19
	162 Move X1, X20
	163 Call AsyncTaskMethodBuilder`1<Int64>.SetException, X0, X1
	164 Move W0, 8
	165 Call 0x3EB2AF0
	166 Move X8, [X20]
	167 Move [X0], X8
	168 Move X1, 0xA21000
	169 Add X1, X1, 3672
	170 Move X2, X31
	171 Call 0x3EB2B00
	172 Move X20, X0
	173 Call 0x3EB2AE0
	174 Move X0, X20
	175 Call 0x1D2D690
	176 Call 0x1991590

Method: System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)

Disassembly:
	0x03494544 ADRP X0, 0xC9D000
	0x03494548 LDR X0, [X0 + 0x790]
	0x0349454C BL 0x1C16CF4
	0x03494550 ADRP X0, 0xC9D000
	0x03494554 LDR X0, [X0 + 0x7E8]
	0x03494558 BL 0x1C16CF4
	0x0349455C MOVZ W8, 0x1
	0x03494560 STRB W8, [X20 + 0x963]
	0x03494564 STR X31, [X31 + 0x48]
	0x03494568 STP X31, X31, [X31 + 0x30]
	0x0349456C STR X31, [X31 + 0x28]
	0x03494570 LDR W21, [X19]
	0x03494574 ADRP X23, 0xC9D000
	0x03494578 LDR X23, [X23 + 0x760]
	0x0349457C SUB W8, W21, 0x2
	0x03494580 CMP W8, 0x3
	0x03494584 B.CC 0x349471C
	0x03494588 CBZ W21, 0x34945AC
	0x0349458C CMP W21, 0x1
	0x03494590 B.NE 0x34945C4
	0x03494594 LDR X8, [X19 + 0x80]
	0x03494598 MOVN W21, 0x0
	0x0349459C STR X8, [X31 + 0x38]
	0x034945A0 STR X31, [X19 + 0x80]
	0x034945A4 STR W21, [X19]
	0x034945A8 B 0x34946C4
	0x034945AC LDR X8, [X19 + 0x78]
	0x034945B0 MOVN W21, 0x0
	0x034945B4 STR X8, [X31 + 0x48]
	0x034945B8 STR X31, [X19 + 0x78]
	0x034945BC STR W21, [X19]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xF4A000
	007 Move X21, 0xC9E000
	008 Move W8, [X22+2392]
	009 Move X21, [X21+1696]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xC9E000
	017 Move X0, [X0+1792]
	018 Call 0x1C17CF4
	019 Move X0, 0xC9E000
	020 Move X0, [X0+1696]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2392], W8
	024 Move X0, [X21]
	025 Move X21, 0xC9E000
	026 Move W8, [X0+224]
	027 Move X21, [X21+1792]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X2, [X21]
	032 Add X0, X20, 8
	033 Move X1, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Call AsyncTaskMethodBuilder`1<Int64>.SetStateMachine, X0, X1
	040 Return 

