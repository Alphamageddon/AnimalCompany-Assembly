Type: Nakama.Ninja.WebSockets.Internal.WebSocketFrameReader/<ReadLength>d__4

Method: System.Void MoveNext()

Disassembly:
	0x0349625C LDR X23, [X23 + 0x280]
	0x03496260 MOV X20, X3
	0x03496264 MOV X21, X2
	0x03496268 MOV W22, W1
	0x0349626C MOV X19, X0
	0x03496270 TBNZ X8, 0x0, 0x3496294
	0x03496274 ADRP X0, 0xC9B000
	0x03496278 LDR X0, [X0 + 0x8F0]
	0x0349627C BL 0x1C16CF4
	0x03496280 ADRP X0, 0xC60000
	0x03496284 LDR X0, [X0 + 0x280]
	0x03496288 BL 0x1C16CF4
	0x0349628C MOVZ W8, 0x1
	0x03496290 STRB W8, [X24 + 0x972]
	0x03496294 LDR X0, [X23]
	0x03496298 MOVI V0.2D, 0x0
	0x0349629C STR X31, [X31 + 0x70]
	0x034962A0 STP V0, V0, [X31 + 0x50]
	0x034962A4 STP V0, V0, [X31 + 0x30]
	0x034962A8 STR V0, [X31 + 0x2]
	0x034962AC ADRP X23, 0xC9B000
	0x034962B0 LDR W8, [X0 + 0xE0]
	0x034962B4 LDR X23, [X23 + 0x8F0]
	0x034962B8 CBNZ W8, 0x34962C0
	0x034962BC BL 0x1C16DFC
	0x034962C0 ADD X8, X31, 0x8
	0x034962C4 MOV X0, X31
	0x034962C8 BL 0x32C4770
	0x034962CC LDUR V0, [X31 + 0x8]
	0x034962D0 LDR X9, [X31 + 0x18]
	0x034962D4 LDR X2, [X23]
	0x034962D8 ADD X8, X31, 0x20
	0x034962DC STP X21, X20, [X31 + 0x50]
	0x034962E0 ORR X20, X8, 0xF
	0x034962E4 MOVN W10, 0x0
	0x034962E8 ADD X1, X31, 0x20
	0x034962EC MOV X0, X20
	0x034962F0 STR W22, [X31 + 0x48]
	0x034962F4 STUR V0, [X31 + 0x28]
	0x034962F8 STP X9, X19, [X31 + 0x38]
	0x034962FC STR W10, [X31 + 0x20]
	0x03496300 BL 0x21970B8
	0x03496304 MOV X0, X20
	0x03496308 MOV X1, X31
	0x0349630C BL 0x32C47F8
	0x03496310 LDP X20, X19, [X31 + 0xB0]
	0x03496314 LDP X22, X21, [X31 + 0xA0]
	0x03496318 LDP X24, X23, [X31 + 0x90]
	0x0349631C LDR X30, [X31 + 0x80]
	0x03496320 ADD X31, X31, 0xC0
	0x03496324 RET
	0x03496328 STP X30, X21, [X31 - 0x20]!
	0x0349632C STP X20, X19, [X31 + 0x10]
	0x03496330 ADRP X20, 0xF47000
	0x03496334 LDRB W8, [X20 + 0x973]
	0x03496338 MOV X19, X0
	0x0349633C TBNZ X8, 0x0, 0x349636C
	0x03496340 ADRP X0, 0xC5F000
	0x03496344 LDR X0, [X0 + 0xA50]
	0x03496348 BL 0x1C16CF4
	0x0349634C ADRP X0, 0xC5F000
	0x03496350 LDR X0, [X0 + 0x570]
	0x03496354 BL 0x1C16CF4
	0x03496358 ADRP X0, 0xC9B000
	0x0349635C LDR X0, [X0 + 0x8F8]
	0x03496360 BL 0x1C16CF4
	0x03496364 MOVZ W8, 0x1
	0x03496368 STRB W8, [X20 + 0x973]
	0x0349636C LDR W8, [X19 + 0x48]
	0x03496370 CMP W8, 0x2
	0x03496374 B.NE 0x3496400
	0x03496378 ADRP X8, 0xC5F000
	0x0349637C LDR X8, [X8 + 0x570]
	0x03496380 LDR X0, [X8]
	0x03496384 LDR W8, [X0 + 0xE0]
	0x03496388 CBNZ W8, 0x3496390
	0x0349638C BL 0x1C16DFC
	0x03496390 FMOV D0, 4.000000000232831
	0x03496394 MOV X0, X31
	0x03496398 BL 0x3394754
	0x0349639C ADRP X8, 0xC5F000
	0x034963A0 LDR X8, [X8 + 0xA50]
	0x034963A4 MOV X21, X0
	0x034963A8 LDR X0, [X8]
	0x034963AC BL 0x1C16F10
	0x034963B0 MOV X20, X0
	0x034963B4 MOV X1, X21
	0x034963B8 MOV X2, X31
	0x034963BC BL 0x33DFAC0
	0x034963C0 CBZ X20, 0x349643C
	0x034963C4 MOV X0, X20
	0x034963C8 MOV X1, X31
	0x034963CC BL 0x33DFA08
	0x034963D0 ADRP X9, 0xC9B000
	0x034963D4 LDR X8, [X19]
	0x034963D8 LDR X9, [X9 + 0x8F8]
	0x034963DC MOV X3, X0
	0x034963E0 LDR X2, [X9]
	0x034963E4 LDP X9, X4, [X8 + 0x1E8]
	0x034963E8 MOVZ W1, 0x3E9
	0x034963EC MOV X0, X19
	0x034963F0 BLR X9
	0x034963F4 CBZ X0, 0x3496440
	0x034963F8 MOV X1, X31
	0x034963FC BL 0x33F2EC4
	0x03496400 LDR X0, [X19 + 0x40]
	0x03496404 CBZ X0, 0x3496434
	0x03496408 MOV X1, X31
	0x0349640C BL 0x33DFCF8
	0x03496410 LDR X0, [X19 + 0x28]
	0x03496414 CBZ X0, 0x3496438
	0x03496418 LDR X8, [X0]
	0x0349641C LDR X1, [X8 + 0x280]
	0x03496420 LDR X9, [X8 + 0x278]
	0x03496424 BLR X9
	0x03496428 LDP X20, X19, [X31 + 0x10]
	0x0349642C LDP X30, X21, [X31], #0x20
	0x03496430 RET
	0x03496434 BL 0x1C16F20
	0x03496438 BL 0x1C16F20
	0x0349643C BL 0x1C16F20
	0x03496440 BL 0x1C16F20
	0x03496444 B 0x34964D4
	0x03496448 B 0x3496458
	0x0349644C B 0x3496458
	0x03496450 B 0x34964D4
	0x03496454 B 0x34964D4
	0x03496458 MOV X21, X1
	0x0349645C MOV X20, X0
	0x03496460 CMP W21, 0x1
	0x03496464 B.NE 0x34964DC
	0x03496468 MOV X0, X20
	0x0349646C BL 0x3EB1AD0
	0x03496470 MOV X20, X0
	0x03496474 ADRP X0, 0xC65000
	0x03496478 LDR X0, [X0 + 0x8A8]
	0x0349647C BL 0x1C16D08
	0x03496480 LDR X8, [X20]
	0x03496484 LDR X1, [X8]
	0x03496488 BL 0x1C17270
	0x0349648C TBZ X0, 0x0, 0x3496498
	0x03496490 BL 0x3EB1AE0
	0x03496494 B 0x3496400
	0x03496498 MOVZ W0, 0x8
	0x0349649C BL 0x3EB1AF0
	0x034964A0 LDR X8, [X20]
	0x034964A4 STR X8, [X0]
	0x034964A8 ADRP X1, 0xA1E000
	0x034964AC ADD X1, X1, 0xE58
	0x034964B0 MOV X2, X31
	0x034964B4 BL 0x3EB1B00
	0x034964B8 B 0x3496538
	0x034964BC B 0x34964D4
	0x034964C0 MOV X21, X1
	0x034964C4 MOV X20, X0
	0x034964C8 BL 0x3EB1AE0
	0x034964CC B 0x34964DC
	0x034964D0 B 0x34964D4
	0x034964D4 MOV X21, X1
	0x034964D8 MOV X20, X0
	0x034964DC CMP W21, 0x1
	0x034964E0 B.NE 0x3496540
	0x034964E4 MOV X0, X20
	0x034964E8 BL 0x3EB1AD0
	0x034964EC MOV X19, X0
	0x034964F0 ADRP X0, 0xC63000
	0x034964F4 LDR X0, [X0 + 0xCC0]
	0x034964F8 BL 0x1C16D08
	0x034964FC LDR X8, [X19]
	0x03496500 LDR X1, [X8]
	0x03496504 BL 0x1C17270
	0x03496508 TBZ X0, 0x0, 0x3496518
	0x0349650C LDP X20, X19, [X31 + 0x10]
	0x03496510 LDP X30, X21, [X31], #0x20
	0x03496514 B 0x3EB1AE0
	0x03496518 MOVZ W0, 0x8
	0x0349651C BL 0x3EB1AF0
	0x03496520 LDR X8, [X19]
	0x03496524 STR X8, [X0]
	0x03496528 ADRP X1, 0xA1E000
	0x0349652C ADD X1, X1, 0xE58
	0x03496530 MOV X2, X31
	0x03496534 BL 0x3EB1B00
	0x03496538 MOV X20, X0
	0x0349653C BL 0x3EB1AE0
	0x03496540 MOV X0, X20
	0x03496544 BL 0x1D2C690
	0x03496548 BL 0x1990590
	0x0349654C LDR X9, [X0 + 0x88]
	0x03496550 CBZ X9, 0x3496570
	0x03496554 MOV X8, X0
	0x03496558 LDR X4, [X9 + 0x18]
	0x0349655C LDR X0, [X9 + 0x40]
	0x03496560 LDR X3, [X9 + 0x28]
	0x03496564 MOV X2, X1
	0x03496568 MOV X1, X8
	0x0349656C BR X4
	0x03496570 RET
	0x03496574 SUB X31, X31, 0x30
	0x03496578 STP X30, X21, [X31 + 0x10]
	0x0349657C STP X20, X19, [X31 + 0x20]
	0x03496580 ADRP X21, 0xF47000
	0x03496584 LDRB W8, [X21 + 0x974]
	0x03496588 MOV X20, X2
	0x0349658C MOV W19, W1
	0x03496590 TBNZ X8, 0x0, 0x34965B4
	0x03496594 ADRP X0, 0xC68000
	0x03496598 LDR X0, [X0 + 0xE68]
	0x0349659C BL 0x1C16CF4
	0x034965A0 ADRP X0, 0xC5D000
	0x034965A4 LDR X0, [X0 + 0x618]
	0x034965A8 BL 0x1C16CF4
	0x034965AC MOVZ W8, 0x1
	0x034965B0 STRB W8, [X21 + 0x974]
	0x034965B4 MOV W0, W19
	0x034965B8 MOV X1, X31
	0x034965BC BL 0x3316D5C
	0x034965C0 MOV X1, X31
	0x034965C4 MOV X19, X0
	0x034965C8 BL 0x33A1B08
	0x034965CC CBZ X20, 0x3496658
	0x034965D0 MOV X0, X31
	0x034965D4 BL 0x3241948
	0x034965D8 CBZ X0, 0x3496688
	0x034965DC LDR X8, [X0]
	0x034965E0 MOV X1, X20
	0x034965E4 LDR X9, [X8 + 0x268]
	0x034965E8 LDR X2, [X8 + 0x270]
	0x034965EC BLR X9
	0x034965F0 CBZ X19, 0x3496688
	0x034965F4 MOV X20, X0
	0x034965F8 CBZ X0, 0x3496688
	0x034965FC ADRP X8, 0xC5D000
	0x03496600 LDR X8, [X8 + 0x618]
	0x03496604 LDR W9, [X19 + 0x18]
	0x03496608 LDR W10, [X20 + 0x18]
	0x0349660C LDR X0, [X8]
	0x03496610 ADD W1, W10, W9
	0x03496614 BL 0x1C16D6C
	0x03496618 LDR W4, [X19 + 0x18]
	0x0349661C MOV X21, X0
	0x03496620 MOV X0, X19
	0x03496624 MOV W1, W31

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X20, 0xF48000
	007 Move W8, [X20+2407]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {45}
	013 Move X0, 0xC9C000
	014 Move X0, [X0+2088]
	015 Call 0x1C17CF4
	016 Move X0, 0xC9C000
	017 Move X0, [X0+2096]
	018 Call 0x1C17CF4
	019 Move X0, 0xC9C000
	020 Move X0, [X0+2104]
	021 Call 0x1C17CF4
	022 Move X0, 0xC9C000
	023 Move X0, [X0+1944]
	024 Call 0x1C17CF4
	025 Move X0, 0xC9C000
	026 Move X0, [X0+2112]
	027 Call 0x1C17CF4
	028 Move X0, 0xC9C000
	029 Move X0, [X0+2120]
	030 Call 0x1C17CF4
	031 Move X0, 0xC9C000
	032 Move X0, [X0+2128]
	033 Call 0x1C17CF4
	034 Move X0, 0xC9C000
	035 Move X0, [X0+2136]
	036 Call 0x1C17CF4
	037 Move X0, 0xC9C000
	038 Move X0, [X0+2144]
	039 Call 0x1C17CF4
	040 Move X0, 0xC9C000
	041 Move X0, [X0+2152]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X20+2407], W8
	045 Move [X31+16], X31
	046 Move [X31+24], X31
	047 Move X21, 0xC9C000
	048 Move W8, [X19]
	049 Move X21, [X21+1944]
	050 Compare W8, 0
	051 JumpIfEqual {96}
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X8, [X19+80]
	054 Move TEMP, 0
	055 Not TEMP
	056 Move W9, TEMP
	057 Move [X31+16], X8
	058 Move [X19+80], X31
	059 Move [X19], W9
	060 Move X8, 0xC9C000
	061 Move X8, [X8+2120]
	062 Move X1, [X8]
	063 Add X0, X31, 16
	064 Call TaskAwaiter`1<UInt64>.GetResult, X0
	065 Move X20, X0
	066 Or W8, W31, 0x80000001
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move [X31+12], W20
	069 Move X0, 0xC66000
	070 Move X0, [X0+1824]
	071 Call 0x1C17D08
	072 Add X1, X31, 12
	073 Call 0x1C17E04
	074 Move X20, X0
	075 Move X0, 0xC9C000
	076 Move X0, [X0+2160]
	077 Call 0x1C17D08
	078 Move X1, X20
	079 Move X2, X31
	080 Call String.Format, X0, X1
	081 Move X20, X0
	082 Move X0, 0xC66000
	083 Move X0, [X0+1888]
	084 Call 0x1C17D08
	085 Call 0x1C17F10
	086 Move X21, X0
	087 Move X1, X20
	088 Move X2, X31
	089 Call ArgumentOutOfRangeException..ctor, X0, X1
	090 Move X0, 0xC9C000
	091 Move X0, [X0+2168]
	092 Call 0x1C17D08
	093 Move X1, X0
	094 Move X0, X21
	095 Call 0x1C17DEC
	096 Move X8, [X19+72]
	097 Move TEMP, 0
	098 Not TEMP
	099 Move W9, TEMP
	100 Move [X31+24], X8
	101 Move [X19+72], X31
	102 Move [X19], W9
	103 Move X8, 0xC9C000
	104 Move X8, [X8+2112]
	105 Move X1, [X8]
	106 Add X0, X31, 24
	107 Call TaskAwaiter`1<UInt16>.GetResult, X0
	108 And W20, W0, 0xFFFF
	109 Move W8, [X19+32]
	110 And W20, W8, 127
	111 NotImplemented "Instruction CMP not yet implemented."
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X0, [X19+40]
	114 Move X2, [X19+48]
	115 Move X3, [X19+56]
	116 Move X4, [X19+64]
	117 Move W1, W31
	118 Call BinaryReaderWriter.ReadUShortExactly, X0, X1, X2, X3
	119 Compare X0, 0
	120 JumpIfEqual {209}
	121 Move X8, 0xC9C000
	122 Move X8, [X8+2152]
	123 Move X1, [X8]
	124 Call Task`1<UInt16>.GetAwaiter, X0
	125 Move X8, 0xC9C000
	126 Move X8, [X8+2136]
	127 Move [X31+24], X0
	128 Move X1, [X8]
	129 Add X0, X31, 24
	130 Call TaskAwaiter`1<UInt16>.get_IsCompleted, X0
	131 Move TEMP, X0
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfEqual {103}
	135 Move [X19], W31
	136 Move X8, [X31+24]
	137 Move [X19+72], X8
	138 Move X0, [X21]
	139 Move W8, [X0+224]
	140 Compare W8, 0
	141 JumpIfNotEqual {143}
	142 Call 0x1C17DFC
	143 Move X8, 0xC9C000
	144 Move X8, [X8+2088]
	145 Add X0, X19, 8
	146 Move X3, [X8]
	147 Add X1, X31, 24
	148 Move X2, X19
	149 Call AsyncTaskMethodBuilder`1<UInt32>.AwaitUnsafeOnCompleted, X0, X1, X2
	150 Move TEMP, 1
	151 Not TEMP
	152 Move W8, TEMP
	153 Move [X19+8], W8
	154 Move X0, [X21]
	155 Move X21, 0xC9C000
	156 Move W8, [X0+224]
	157 Move X21, [X21+2104]
	158 Compare W8, 0
	159 JumpIfNotEqual {161}
	160 Call 0x1C17DFC
	161 Move X2, [X21]
	162 Move X0, X19
	163 Move W1, W20
	164 Call AsyncTaskMethodBuilder`1<UInt32>.SetResult, X0, X1
	165 Move X20, [X31+48]
	166 Move X19, [X31+56]
	167 Move X30, [X31+32]
	168 Move X21, [X31+40]
	169 Add X31, X31, 64
	170 Return 
	171 Move X0, [X19+40]
	172 Move X2, [X19+48]
	173 Move X3, [X19+56]
	174 Move X4, [X19+64]
	175 Move W1, W31
	176 Call BinaryReaderWriter.ReadULongExactly, X0, X1, X2, X3
	177 Compare X0, 0
	178 JumpIfEqual {210}
	179 Move X8, 0xC9C000
	180 Move X8, [X8+2144]
	181 Move X1, [X8]
	182 Call Task`1<UInt64>.GetAwaiter, X0
	183 Move X8, 0xC9C000
	184 Move X8, [X8+2128]
	185 Move [X31+16], X0
	186 Move X1, [X8]
	187 Add X0, X31, 16
	188 Call TaskAwaiter`1<UInt64>.get_IsCompleted, X0
	189 Move TEMP, X0
	190 And TEMP, TEMP, 1
	191 Compare TEMP, 1
	192 JumpIfEqual {60}
	193 Move W8, 1
	194 Move [X19], W8
	195 Move X8, [X31+16]
	196 Move [X19+80], X8
	197 Move X0, [X21]
	198 Move W8, [X0+224]
	199 Compare W8, 0
	200 JumpIfNotEqual {202}
	201 Call 0x1C17DFC
	202 Move X8, 0xC9C000
	203 Move X8, [X8+2096]
	204 Add X0, X19, 8
	205 Move X3, [X8]
	206 Add X1, X31, 16
	207 Move X2, X19
	208 Call AsyncTaskMethodBuilder`1<UInt32>.AwaitUnsafeOnCompleted, X0, X1, X2
	209 Call 0x1C17F20
	210 Call 0x1C17F20
	211 Move X20, X0
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Move X0, X20
	214 Call 0x3EB2AD0
	215 Move X20, X0
	216 Move X0, 0xC5E000
	217 Move X0, [X0+2000]
	218 Call 0x1C17D08
	219 Move X8, [X20]
	220 Move X1, [X8]
	221 Call 0x1C18270
	222 Move TEMP, X0
	223 And TEMP, TEMP, 1
	224 Compare TEMP, 1
	225 JumpIfNotEqual {246}
	226 Move X20, [X20]
	227 Call 0x3EB2AE0
	228 Move TEMP, 1
	229 Not TEMP
	230 Move W8, TEMP
	231 Move [X19+8], W8
	232 Move X0, 0xC9C000
	233 Move X0, [X0+1944]
	234 Call 0x1C17D08
	235 Move W8, [X0+224]
	236 Compare W8, 0
	237 JumpIfNotEqual {239}
	238 Call 0x1C17DFC
	239 Move X0, 0xC9C000
	240 Move X0, [X0+2176]
	241 Call 0x1C17D08
	242 Move X2, X0
	243 Move X0, X19
	244 Move X1, X20
	245 Call AsyncTaskMethodBuilder`1<UInt32>.SetException, X0, X1
	246 Move W0, 8
	247 Call 0x3EB2AF0
	248 Move X8, [X20]
	249 Move [X0], X8
	250 Move X1, 0xA1F000
	251 Add X1, X1, 3672
	252 Move X2, X31
	253 Call 0x3EB2B00
	254 Move X20, X0
	255 Call 0x3EB2AE0
	256 Move X0, X20
	257 Call 0x1D2D690
	258 Call 0x1991590

Method: System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)

Disassembly:
	0x03496628 MOV X2, X21
	0x0349662C MOV W3, W31
	0x03496630 MOV X5, X31
	0x03496634 BL 0x33A8A9C
	0x03496638 LDR W3, [X19 + 0x18]
	0x0349663C LDR W4, [X20 + 0x18]
	0x03496640 MOV X0, X20
	0x03496644 MOV W1, W31
	0x03496648 MOV X2, X21
	0x0349664C MOV X5, X31
	0x03496650 BL 0x33A8A9C
	0x03496654 MOV X19, X21
	0x03496658 ADRP X8, 0xC68000
	0x0349665C LDR X8, [X8 + 0xE68]
	0x03496660 ADD X0, X31, 0x0
	0x03496664 MOV X1, X19
	0x03496668 STP X31, X31, [X31]
	0x0349666C LDR X2, [X8]
	0x03496670 BL 0x2B87B6C
	0x03496674 LDP X0, X1, [X31]
	0x03496678 LDP X20, X19, [X31 + 0x20]
	0x0349667C LDP X30, X21, [X31 + 0x10]
	0x03496680 ADD X31, X31, 0x30
	0x03496684 RET
	0x03496688 BL 0x1C16F20
	0x0349668C SUB X31, X31, 0xD0
	0x03496690 STR X30, [X31 + 0x90]
	0x03496694 STP X24, X23, [X31 + 0xA0]
	0x03496698 STP X22, X21, [X31 + 0xB0]
	0x0349669C STP X20, X19, [X31 + 0xC0]
	0x034966A0 ADRP X24, 0xF47000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xF48000
	007 Move X21, 0xC9C000
	008 Move W8, [X22+2408]
	009 Move X21, [X21+1944]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xC9C000
	017 Move X0, [X0+2184]
	018 Call 0x1C17CF4
	019 Move X0, 0xC9C000
	020 Move X0, [X0+1944]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2408], W8
	024 Move X0, [X21]
	025 Move X21, 0xC9C000
	026 Move W8, [X0+224]
	027 Move X21, [X21+2184]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X2, [X21]
	032 Add X0, X20, 8
	033 Move X1, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Call AsyncTaskMethodBuilder`1<UInt32>.SetStateMachine, X0, X1
	040 Return 

