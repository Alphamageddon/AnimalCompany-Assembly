Type: Nakama.Ninja.WebSockets.Internal.BinaryReaderWriter

Method: System.Threading.Tasks.Task ReadExactly(System.Int32 length, System.IO.Stream stream, System.ArraySegment`1<System.Byte> buffer, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x03493814 ADRP X1, 0xA21000
	0x03493818 ADD X1, X1, 0xE58
	0x0349381C MOV X2, X31
	0x03493820 BL 0x3EB1B00
	0x03493824 MOV X20, X0
	0x03493828 BL 0x3EB1AE0
	0x0349382C MOV X0, X20
	0x03493830 BL 0x1D2C690
	0x03493834 BL 0x1990590
	0x03493838 STR X30, [X31 - 0x30]!
	0x0349383C STP X22, X21, [X31 + 0x10]
	0x03493840 STP X20, X19, [X31 + 0x20]
	0x03493844 ADRP X22, 0xF4A000
	0x03493848 ADRP X21, 0xC9E000
	0x0349384C LDRB W8, [X22 + 0x95A]
	0x03493850 LDR X21, [X21 + 0x680]
	0x03493854 MOV X19, X1
	0x03493858 MOV X20, X0
	0x0349385C TBNZ X8, 0x0, 0x3493880
	0x03493860 ADRP X0, 0xC9E000
	0x03493864 LDR X0, [X0 + 0x720]
	0x03493868 BL 0x1C16CF4
	0x0349386C ADRP X0, 0xC9E000
	0x03493870 LDR X0, [X0 + 0x680]
	0x03493874 BL 0x1C16CF4
	0x03493878 MOVZ W8, 0x1
	0x0349387C STRB W8, [X22 + 0x95A]
	0x03493880 LDR X0, [X21]
	0x03493884 ADRP X21, 0xC9E000
	0x03493888 LDR W8, [X0 + 0xE0]
	0x0349388C LDR X21, [X21 + 0x720]
	0x03493890 CBNZ W8, 0x3493898
	0x03493894 BL 0x1C16DFC
	0x03493898 LDR X2, [X21]
	0x0349389C ADD X0, X20, 0x8
	0x034938A0 MOV X1, X19
	0x034938A4 LDP X20, X19, [X31 + 0x20]
	0x034938A8 LDP X22, X21, [X31 + 0x10]
	0x034938AC LDR X30, [X31], #0x30
	0x034938B0 B 0x2634B10
	0x034938B4 SUB X31, X31, 0x30
	0x034938B8 STP X30, X21, [X31 + 0x10]
	0x034938BC STP X20, X19, [X31 + 0x20]
	0x034938C0 ADRP X20, 0xF4A000
	0x034938C4 LDRB W8, [X20 + 0x95B]
	0x034938C8 MOV X19, X0
	0x034938CC TBNZ X8, 0x0, 0x3493920
	0x034938D0 ADRP X0, 0xC93000
	0x034938D4 LDR X0, [X0 + 0xCF0]
	0x034938D8 BL 0x1C16CF4
	0x034938DC ADRP X0, 0xC93000
	0x034938E0 LDR X0, [X0 + 0xD00]
	0x034938E4 BL 0x1C16CF4
	0x034938E8 ADRP X0, 0xC88000
	0x034938EC LDR X0, [X0 + 0x5B0]
	0x034938F0 BL 0x1C16CF4
	0x034938F4 ADRP X0, 0xC9E000
	0x034938F8 LDR X0, [X0 + 0x728]
	0x034938FC BL 0x1C16CF4
	0x03493900 ADRP X0, 0xC9E000
	0x03493904 LDR X0, [X0 + 0x730]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+128], X30
	003 Move [X31+136], X25
	004 Move [X31+144], X24
	005 Move [X31+152], X23
	006 Move [X31+160], X22
	007 Move [X31+168], X21
	008 Move [X31+176], X20
	009 Move [X31+184], X19
	010 Move X25, 0xF4B000
	011 Move X24, 0xC64000
	012 Move W8, [X25+2385]
	013 Move X24, [X24+640]
	014 Move X19, X4
	015 Move X20, X3
	016 Move X22, X2
	017 Move X21, X1
	018 Move W23, W0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0xC9F000
	024 Move X0, [X0+1624]
	025 Call 0x1C17CF4
	026 Move X0, 0xC64000
	027 Move X0, [X0+640]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X25+2385], W8
	031 Move X0, [X24]
	032 NotImplemented "Instruction MOVI not yet implemented."
	033 Move [X31+112], X31
	034 Move [X31+80], V0
	035 Move [X31+88], V0
	036 Move [X31+48], V0
	037 Move [X31+56], V0
	038 Move [X31+2], V0
	039 Move X24, 0xC9F000
	040 Move W8, [X0+224]
	041 Move X24, [X24+1624]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Add X8, X31, 8
	046 Move X0, X31
	047 Call AsyncTaskMethodBuilder.Create
	048 NotImplemented "Instruction LDUR not yet implemented."
	049 Move X9, [X31+24]
	050 Move X2, [X24]
	051 Add X8, X31, 32
	052 Move [X31+88], X21
	053 Move [X31+96], X19
	054 Or X19, X8, 15
	055 Move TEMP, 0
	056 Not TEMP
	057 Move W10, TEMP
	058 Add X1, X31, 32
	059 Move X0, X19
	060 Move [X31+64], W23
	061 Move [X31+72], X22
	062 Move [X31+80], X20
	063 Move [X31+40], V0
	064 Move [X31+56], X9
	065 Move [X31+32], W10
	066 Call AsyncTaskMethodBuilder.Start, X0, X1
	067 Move X0, X19
	068 Move X1, X31
	069 Call AsyncTaskMethodBuilder.get_Task, X0
	070 Move X20, [X31+176]
	071 Move X19, [X31+184]
	072 Move X22, [X31+160]
	073 Move X21, [X31+168]
	074 Move X24, [X31+144]
	075 Move X23, [X31+152]
	076 Move X30, [X31+128]
	077 Move X25, [X31+136]
	078 Add X31, X31, 192
	079 Return X0

Method: System.Threading.Tasks.Task`1<System.UInt16> ReadUShortExactly(System.IO.Stream stream, System.Boolean isLittleEndian, System.ArraySegment`1<System.Byte> buffer, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x03493908 BL 0x1C16CF4
	0x0349390C ADRP X0, 0xC9E000
	0x03493910 LDR X0, [X0 + 0x660]
	0x03493914 BL 0x1C16CF4
	0x03493918 MOVZ W8, 0x1
	0x0349391C STRB W8, [X20 + 0x95B]
	0x03493920 STR X31, [X31 + 0x8]
	0x03493924 ADRP X21, 0xC9E000
	0x03493928 LDR W8, [X19]
	0x0349392C LDR X21, [X21 + 0x660]
	0x03493930 CBZ W8, 0x34939A0
	0x03493934 LDP X1, X2, [X19 + 0x20]
	0x03493938 LDP X3, X4, [X19 + 0x30]
	0x0349393C MOVZ W0, 0x2
	0x03493940 BL 0x3492814
	0x03493944 CBZ X0, 0x3493A58
	0x03493948 MOV X1, X31
	0x0349394C BL 0x33ED394
	0x03493950 STR X0, [X31 + 0x8]
	0x03493954 ADD X0, X31, 0x8
	0x03493958 MOV X1, X31
	0x0349395C BL 0x32C3A80
	0x03493960 TBNZ X0, 0x0, 0x34939B4
	0x03493964 STR W31, [X19]
	0x03493968 LDR X8, [X31 + 0x8]
	0x0349396C STR X8, [X19 + 0x48]
	0x03493970 LDR X0, [X21]
	0x03493974 LDR W8, [X0 + 0xE0]
	0x03493978 CBNZ W8, 0x3493980
	0x0349397C BL 0x1C16DFC
	0x03493980 ADRP X8, 0xC9E000
	0x03493984 LDR X8, [X8 + 0x728]
	0x03493988 ADD X0, X19, 0x8
	0x0349398C LDR X3, [X8]
	0x03493990 ADD X1, X31, 0x8
	0x03493994 MOV X2, X19
	0x03493998 BL 0x1FD2B14
	0x0349399C B 0x3493A48
	0x034939A0 LDR X8, [X19 + 0x48]
	0x034939A4 MOVN W9, 0x0
	0x034939A8 STR X8, [X31 + 0x8]
	0x034939AC STR X31, [X19 + 0x48]
	0x034939B0 STR W9, [X19]
	0x034939B4 ADD X0, X31, 0x8
	0x034939B8 MOV X1, X31
	0x034939BC BL 0x32C3B4C
	0x034939C0 ADRP X20, 0xC88000
	0x034939C4 LDRB W8, [X19 + 0x40]
	0x034939C8 LDR X20, [X20 + 0x5B0]
	0x034939CC CBNZ W8, 0x34939F4
	0x034939D0 LDR X0, [X20]
	0x034939D4 LDR W8, [X0 + 0xE0]
	0x034939D8 CBNZ W8, 0x34939E0
	0x034939DC BL 0x1C16DFC
	0x034939E0 LDR X0, [X19 + 0x28]
	0x034939E4 LDR W1, [X19 + 0x30]
	0x034939E8 MOVZ W2, 0x2
	0x034939EC MOV X3, X31
	0x034939F0 BL 0x33A1B8C
	0x034939F4 LDR X0, [X20]
	0x034939F8 LDR W8, [X0 + 0xE0]
	0x034939FC CBNZ W8, 0x3493A04
	0x03493A00 BL 0x1C16DFC
	0x03493A04 LDR X0, [X19 + 0x28]
	0x03493A08 LDR W1, [X19 + 0x30]
	0x03493A0C MOV X2, X31
	0x03493A10 BL 0x331710C
	0x03493A14 MOVN W8, 0x1
	0x03493A18 STR W8, [X19], #0x8
	0x03493A1C MOV W20, W0
	0x03493A20 LDR X0, [X21]
	0x03493A24 ADRP X21, 0xC9E000
	0x03493A28 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+112], X30
	003 Move [X31+128], X26
	004 Move [X31+136], X25
	005 Move [X31+144], X24
	006 Move [X31+152], X23
	007 Move [X31+160], X22
	008 Move [X31+168], X21
	009 Move [X31+176], X20
	010 Move [X31+184], X19
	011 Move X25, 0xF4B000
	012 Move X24, 0xC9F000
	013 Move W8, [X25+2386]
	014 Move X24, [X24+1632]
	015 Move X20, X4
	016 Move X21, X3
	017 Move X22, X2
	018 Move W23, W1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {38}
	024 Move X0, 0xC9F000
	025 Move X0, [X0+1640]
	026 Call 0x1C17CF4
	027 Move X0, 0xC9F000
	028 Move X0, [X0+1648]
	029 Call 0x1C17CF4
	030 Move X0, 0xC9F000
	031 Move X0, [X0+1656]
	032 Call 0x1C17CF4
	033 Move X0, 0xC9F000
	034 Move X0, [X0+1632]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X25+2386], W8
	038 Move X0, [X24]
	039 NotImplemented "Instruction MOVI not yet implemented."
	040 Move [X31+80], V0
	041 Move [X31+88], V0
	042 Move [X31+48], V0
	043 Move [X31+56], V0
	044 Move [X31+2], V0
	045 Move X26, 0xC9F000
	046 Move X25, 0xC9F000
	047 Move X24, 0xC9F000
	048 Move W8, [X0+224]
	049 Move X26, [X26+1640]
	050 Move X25, [X25+1648]
	051 Move X24, [X24+1656]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, [X26]
	056 Add X8, X31, 8
	057 And W23, W23, 1
	058 Call AsyncTaskMethodBuilder`1<UInt16>.Create
	059 NotImplemented "Instruction LDUR not yet implemented."
	060 Move X9, [X31+24]
	061 Move X2, [X25]
	062 Add X8, X31, 32
	063 Move [X31+88], X20
	064 Or X20, X8, 15
	065 Move TEMP, 0
	066 Not TEMP
	067 Move W10, TEMP
	068 Add X1, X31, 32
	069 Move X0, X20
	070 Move [X31+96], W23
	071 Move [X31+72], X22
	072 Move [X31+80], X21
	073 Move [X31+40], V0
	074 Move [X31+56], X9
	075 Move [X31+64], X19
	076 Move [X31+32], W10
	077 Call AsyncTaskMethodBuilder`1<UInt16>.Start, X0, X1
	078 Move X1, [X24]
	079 Move X0, X20
	080 Call AsyncTaskMethodBuilder`1<UInt16>.get_Task, X0
	081 Move X20, [X31+176]
	082 Move X19, [X31+184]
	083 Move X22, [X31+160]
	084 Move X21, [X31+168]
	085 Move X24, [X31+144]
	086 Move X23, [X31+152]
	087 Move X26, [X31+128]
	088 Move X25, [X31+136]
	089 Move X30, [X31+112]
	090 Add X31, X31, 192
	091 Return X0

Method: System.Threading.Tasks.Task`1<System.UInt64> ReadULongExactly(System.IO.Stream stream, System.Boolean isLittleEndian, System.ArraySegment`1<System.Byte> buffer, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x03493A2C LDR X21, [X21 + 0x730]
	0x03493A30 CBNZ W8, 0x3493A38
	0x03493A34 BL 0x1C16DFC
	0x03493A38 LDR X2, [X21]
	0x03493A3C MOV X0, X19
	0x03493A40 MOV W1, W20
	0x03493A44 BL 0x26329D8
	0x03493A48 LDP X20, X19, [X31 + 0x20]
	0x03493A4C LDP X30, X21, [X31 + 0x10]
	0x03493A50 ADD X31, X31, 0x30
	0x03493A54 RET
	0x03493A58 BL 0x1C16F20
	0x03493A5C B 0x3493A7C
	0x03493A60 B 0x3493A7C
	0x03493A64 B 0x3493A7C
	0x03493A68 B 0x3493A7C
	0x03493A6C B 0x3493A7C
	0x03493A70 B 0x3493A7C
	0x03493A74 B 0x3493A7C
	0x03493A78 B 0x3493A7C
	0x03493A7C MOV X20, X0
	0x03493A80 CMP W1, 0x1
	0x03493A84 B.NE 0x3493B20
	0x03493A88 MOV X0, X20
	0x03493A8C BL 0x3EB1AD0
	0x03493A90 MOV X20, X0
	0x03493A94 ADRP X0, 0xC60000
	0x03493A98 LDR X0, [X0 + 0x7D0]
	0x03493A9C BL 0x1C16D08
	0x03493AA0 LDR X8, [X20]
	0x03493AA4 LDR X1, [X8]
	0x03493AA8 BL 0x1C17270
	0x03493AAC TBZ X0, 0x0, 0x3493AF8
	0x03493AB0 LDR X20, [X20]
	0x03493AB4 BL 0x3EB1AE0
	0x03493AB8 MOVN W8, 0x1
	0x03493ABC STR W8, [X19], #0x8
	0x03493AC0 ADRP X0, 0xC9E000
	0x03493AC4 LDR X0, [X0 + 0x660]
	0x03493AC8 BL 0x1C16D08
	0x03493ACC LDR W8, [X0 + 0xE0]
	0x03493AD0 CBNZ W8, 0x3493AD8
	0x03493AD4 BL 0x1C16DFC
	0x03493AD8 ADRP X0, 0xC9E000
	0x03493ADC LDR X0, [X0 + 0x738]
	0x03493AE0 BL 0x1C16D08
	0x03493AE4 MOV X2, X0
	0x03493AE8 MOV X0, X19
	0x03493AEC MOV X1, X20
	0x03493AF0 BL 0x2632BF0
	0x03493AF4 B 0x3493A48
	0x03493AF8 MOVZ W0, 0x8
	0x03493AFC BL 0x3EB1AF0
	0x03493B00 LDR X8, [X20]
	0x03493B04 STR X8, [X0]
	0x03493B08 ADRP X1, 0xA21000
	0x03493B0C ADD X1, X1, 0xE58
	0x03493B10 MOV X2, X31
	0x03493B14 BL 0x3EB1B00
	0x03493B18 MOV X20, X0
	0x03493B1C BL 0x3EB1AE0
	0x03493B20 MOV X0, X20
	0x03493B24 BL 0x1D2C690
	0x03493B28 BL 0x1990590
	0x03493B2C STR X30, [X31 - 0x30]!
	0x03493B30 STP X22, X21, [X31 + 0x10]
	0x03493B34 STP X20, X19, [X31 + 0x20]
	0x03493B38 ADRP X22, 0xF4A000
	0x03493B3C ADRP X21, 0xC9E000
	0x03493B40 LDRB W8, [X22 + 0x95C]
	0x03493B44 LDR X21, [X21 + 0x660]
	0x03493B48 MOV X19, X1
	0x03493B4C MOV X20, X0

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+112], X30
	003 Move [X31+128], X26
	004 Move [X31+136], X25
	005 Move [X31+144], X24
	006 Move [X31+152], X23
	007 Move [X31+160], X22
	008 Move [X31+168], X21
	009 Move [X31+176], X20
	010 Move [X31+184], X19
	011 Move X25, 0xF4B000
	012 Move X24, 0xC9F000
	013 Move W8, [X25+2387]
	014 Move X24, [X24+1664]
	015 Move X20, X4
	016 Move X21, X3
	017 Move X22, X2
	018 Move W23, W1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {38}
	024 Move X0, 0xC9F000
	025 Move X0, [X0+1672]
	026 Call 0x1C17CF4
	027 Move X0, 0xC9F000
	028 Move X0, [X0+1680]
	029 Call 0x1C17CF4
	030 Move X0, 0xC9F000
	031 Move X0, [X0+1688]
	032 Call 0x1C17CF4
	033 Move X0, 0xC9F000
	034 Move X0, [X0+1664]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X25+2387], W8
	038 Move X0, [X24]
	039 NotImplemented "Instruction MOVI not yet implemented."
	040 Move [X31+80], V0
	041 Move [X31+88], V0
	042 Move [X31+48], V0
	043 Move [X31+56], V0
	044 Move [X31+2], V0
	045 Move X26, 0xC9F000
	046 Move X25, 0xC9F000
	047 Move X24, 0xC9F000
	048 Move W8, [X0+224]
	049 Move X26, [X26+1672]
	050 Move X25, [X25+1680]
	051 Move X24, [X24+1688]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, [X26]
	056 Add X8, X31, 8
	057 And W23, W23, 1
	058 Call AsyncTaskMethodBuilder`1<UInt64>.Create
	059 NotImplemented "Instruction LDUR not yet implemented."
	060 Move X9, [X31+24]
	061 Move X2, [X25]
	062 Add X8, X31, 32
	063 Move [X31+88], X20
	064 Or X20, X8, 15
	065 Move TEMP, 0
	066 Not TEMP
	067 Move W10, TEMP
	068 Add X1, X31, 32
	069 Move X0, X20
	070 Move [X31+96], W23
	071 Move [X31+72], X22
	072 Move [X31+80], X21
	073 Move [X31+40], V0
	074 Move [X31+56], X9
	075 Move [X31+64], X19
	076 Move [X31+32], W10
	077 Call AsyncTaskMethodBuilder`1<UInt64>.Start, X0, X1
	078 Move X1, [X24]
	079 Move X0, X20
	080 Call AsyncTaskMethodBuilder`1<UInt64>.get_Task, X0
	081 Move X20, [X31+176]
	082 Move X19, [X31+184]
	083 Move X22, [X31+160]
	084 Move X21, [X31+168]
	085 Move X24, [X31+144]
	086 Move X23, [X31+152]
	087 Move X26, [X31+128]
	088 Move X25, [X31+136]
	089 Move X30, [X31+112]
	090 Add X31, X31, 192
	091 Return X0

Method: System.Threading.Tasks.Task`1<System.Int64> ReadLongExactly(System.IO.Stream stream, System.Boolean isLittleEndian, System.ArraySegment`1<System.Byte> buffer, System.Threading.CancellationToken cancellationToken)

Disassembly:
	0x03493B50 TBNZ X8, 0x0, 0x3493B74
	0x03493B54 ADRP X0, 0xC9E000
	0x03493B58 LDR X0, [X0 + 0x740]
	0x03493B5C BL 0x1C16CF4
	0x03493B60 ADRP X0, 0xC9E000
	0x03493B64 LDR X0, [X0 + 0x660]
	0x03493B68 BL 0x1C16CF4
	0x03493B6C MOVZ W8, 0x1
	0x03493B70 STRB W8, [X22 + 0x95C]
	0x03493B74 LDR X0, [X21]
	0x03493B78 ADRP X21, 0xC9E000
	0x03493B7C LDR W8, [X0 + 0xE0]
	0x03493B80 LDR X21, [X21 + 0x740]
	0x03493B84 CBNZ W8, 0x3493B8C
	0x03493B88 BL 0x1C16DFC
	0x03493B8C LDR X2, [X21]
	0x03493B90 ADD X0, X20, 0x8
	0x03493B94 MOV X1, X19
	0x03493B98 LDP X20, X19, [X31 + 0x20]
	0x03493B9C LDP X22, X21, [X31 + 0x10]
	0x03493BA0 LDR X30, [X31], #0x30
	0x03493BA4 B 0x2632950
	0x03493BA8 LDRB W0, [X0 + 0x10]
	0x03493BAC RET
	0x03493BB0 AND W8, W1, 0x1
	0x03493BB4 STRB W8, [X0 + 0x10]
	0x03493BB8 RET
	0x03493BBC LDR W0, [X0 + 0x14]
	0x03493BC0 RET
	0x03493BC4 STR W1, [X0 + 0x14]
	0x03493BC8 RET
	0x03493BCC LDR W0, [X0 + 0x18]
	0x03493BD0 RET
	0x03493BD4 STR W1, [X0 + 0x18]
	0x03493BD8 RET
	0x03493BDC LDUR X0, [X0 + 0x1C]
	0x03493BE0 RET
	0x03493BE4 STUR X1, [X0 + 0x1C]
	0x03493BE8 RET
	0x03493BEC LDR X0, [X0 + 0x28]
	0x03493BF0 RET
	0x03493BF4 STR X1, [X0 + 0x28]
	0x03493BF8 RET
	0x03493BFC LDP X8, X1, [X0 + 0x30]
	0x03493C00 MOV X0, X8
	0x03493C04 RET
	0x03493C08 STP X1, X2, [X0 + 0x30]
	0x03493C0C RET
	0x03493C10 STR X30, [X31 - 0x40]!
	0x03493C14 STP X24, X23, [X31 + 0x10]
	0x03493C18 STP X22, X21, [X31 + 0x20]
	0x03493C1C STP X20, X19, [X31 + 0x30]
	0x03493C20 MOV W23, W1
	0x03493C24 MOV X1, X31
	0x03493C28 MOV X19, X5
	0x03493C2C MOV X20, X4
	0x03493C30 MOV W21, W3
	0x03493C34 MOV W22, W2
	0x03493C38 MOV X24, X0
	0x03493C3C BL 0x33BDD8C
	0x03493C40 AND W8, W23, 0x1
	0x03493C44 STP W22, W21, [X24 + 0x14]
	0x03493C48 STRB W8, [X24 + 0x10]
	0x03493C4C STP X20, X19, [X24 + 0x30]
	0x03493C50 LDP X20, X19, [X31 + 0x30]
	0x03493C54 LDP X22, X21, [X31 + 0x20]
	0x03493C58 LDP X24, X23, [X31 + 0x10]
	0x03493C5C LDR X30, [X31], #0x40
	0x03493C60 RET
	0x03493C64 STR X30, [X31 - 0x60]!
	0x03493C68 STP X28, X27, [X31 + 0x10]
	0x03493C6C STP X26, X25, [X31 + 0x20]
	0x03493C70 STP X24, X23, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+112], X30
	003 Move [X31+128], X26
	004 Move [X31+136], X25
	005 Move [X31+144], X24
	006 Move [X31+152], X23
	007 Move [X31+160], X22
	008 Move [X31+168], X21
	009 Move [X31+176], X20
	010 Move [X31+184], X19
	011 Move X25, 0xF4B000
	012 Move X24, 0xC9F000
	013 Move W8, [X25+2388]
	014 Move X24, [X24+1696]
	015 Move X20, X4
	016 Move X21, X3
	017 Move X22, X2
	018 Move W23, W1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {38}
	024 Move X0, 0xC9F000
	025 Move X0, [X0+1704]
	026 Call 0x1C17CF4
	027 Move X0, 0xC9F000
	028 Move X0, [X0+1712]
	029 Call 0x1C17CF4
	030 Move X0, 0xC9F000
	031 Move X0, [X0+1720]
	032 Call 0x1C17CF4
	033 Move X0, 0xC9F000
	034 Move X0, [X0+1696]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X25+2388], W8
	038 Move X0, [X24]
	039 NotImplemented "Instruction MOVI not yet implemented."
	040 Move [X31+80], V0
	041 Move [X31+88], V0
	042 Move [X31+48], V0
	043 Move [X31+56], V0
	044 Move [X31+2], V0
	045 Move X26, 0xC9F000
	046 Move X25, 0xC9F000
	047 Move X24, 0xC9F000
	048 Move W8, [X0+224]
	049 Move X26, [X26+1704]
	050 Move X25, [X25+1712]
	051 Move X24, [X24+1720]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, [X26]
	056 Add X8, X31, 8
	057 And W23, W23, 1
	058 Call AsyncTaskMethodBuilder`1<Int64>.Create
	059 NotImplemented "Instruction LDUR not yet implemented."
	060 Move X9, [X31+24]
	061 Move X2, [X25]
	062 Add X8, X31, 32
	063 Move [X31+88], X20
	064 Or X20, X8, 15
	065 Move TEMP, 0
	066 Not TEMP
	067 Move W10, TEMP
	068 Add X1, X31, 32
	069 Move X0, X20
	070 Move [X31+96], W23
	071 Move [X31+72], X22
	072 Move [X31+80], X21
	073 Move [X31+40], V0
	074 Move [X31+56], X9
	075 Move [X31+64], X19
	076 Move [X31+32], W10
	077 Call AsyncTaskMethodBuilder`1<Int64>.Start, X0, X1
	078 Move X1, [X24]
	079 Move X0, X20
	080 Call AsyncTaskMethodBuilder`1<Int64>.get_Task, X0
	081 Move X20, [X31+176]
	082 Move X19, [X31+184]
	083 Move X22, [X31+160]
	084 Move X21, [X31+168]
	085 Move X24, [X31+144]
	086 Move X23, [X31+152]
	087 Move X26, [X31+128]
	088 Move X25, [X31+136]
	089 Move X30, [X31+112]
	090 Add X31, X31, 192
	091 Return X0

Method: System.Void WriteInt(System.Int32 value, System.IO.Stream stream, System.Boolean isLittleEndian)

Disassembly:
	0x03493C74 STP X22, X21, [X31 + 0x40]
	0x03493C78 STP X20, X19, [X31 + 0x50]
	0x03493C7C ADRP X28, 0xF4A000
	0x03493C80 ADRP X27, 0xC9E000
	0x03493C84 LDRB W8, [X28 + 0x95D]
	0x03493C88 LDR X27, [X27 + 0x748]
	0x03493C8C MOV X22, X7
	0x03493C90 MOV X23, X6
	0x03493C94 MOV X19, X5
	0x03493C98 MOV W21, W4
	0x03493C9C MOV W24, W3
	0x03493CA0 MOV W25, W2
	0x03493CA4 MOV W26, W1
	0x03493CA8 MOV X20, X0
	0x03493CAC TBNZ X8, 0x0, 0x3493CC4
	0x03493CB0 ADRP X0, 0xC9E000
	0x03493CB4 LDR X0, [X0 + 0x748]
	0x03493CB8 BL 0x1C16CF4
	0x03493CBC MOVZ W8, 0x1
	0x03493CC0 STRB W8, [X28 + 0x95D]
	0x03493CC4 MOV X0, X20
	0x03493CC8 MOV X1, X31
	0x03493CCC BL 0x33BDD8C
	0x03493CD0 AND W8, W26, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X1
	006 Move X1, X31
	007 Move W21, W2
	008 Call BitConverter.GetBytes, X0
	009 Move X20, X0
	010 Move TEMP, X21
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X20
	015 Move X1, X31
	016 Call Array.Reverse, X0
	017 Compare X20, 0
	018 JumpIfEqual {33}
	019 Compare X19, 0
	020 JumpIfEqual {33}
	021 Move X8, [X19]
	022 Move W3, [X20+24]
	023 Move X0, X19
	024 Move X1, X20
	025 Move X5, [X8+904]
	026 Move X4, [X8+912]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move W2, W31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 CallNoReturn X5
	033 Call 0x1C17F20

Method: System.Void WriteULong(System.UInt64 value, System.IO.Stream stream, System.Boolean isLittleEndian)

Disassembly:
	0x03493CD4 STP W25, W24, [X20 + 0x14]
	0x03493CD8 STRB W8, [X20 + 0x10]
	0x03493CDC STP X23, X22, [X20 + 0x30]
	0x03493CE0 LDR X2, [X27]
	0x03493CE4 ADD X0, X31, 0x8
	0x03493CE8 MOV W1, W21
	0x03493CEC STR X31, [X31 + 0x8]
	0x03493CF0 BL 0x24345B8
	0x03493CF4 LDR X8, [X31 + 0x8]
	0x03493CF8 STR X19, [X20 + 0x28]
	0x03493CFC LDP X22, X21, [X31 + 0x40]
	0x03493D00 LDP X24, X23, [X31 + 0x30]
	0x03493D04 STUR X8, [X20 + 0x1C]
	0x03493D08 LDP X20, X19, [X31 + 0x50]
	0x03493D0C LDP X26, X25, [X31 + 0x20]
	0x03493D10 LDP X28, X27, [X31 + 0x10]
	0x03493D14 LDR X30, [X31], #0x60
	0x03493D18 RET
	0x03493D1C STR X30, [X31 - 0x40]!
	0x03493D20 STP X24, X23, [X31 + 0x10]
	0x03493D24 STP X22, X21, [X31 + 0x20]
	0x03493D28 STP X20, X19, [X31 + 0x30]
	0x03493D2C ADRP X24, 0xF4A000
	0x03493D30 ADRP X23, 0xC88000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X1
	006 Move X1, X31
	007 Move W21, W2
	008 Call BitConverter.GetBytes, X0
	009 Move X20, X0
	010 Move TEMP, X21
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X20
	015 Move X1, X31
	016 Call Array.Reverse, X0
	017 Compare X20, 0
	018 JumpIfEqual {33}
	019 Compare X19, 0
	020 JumpIfEqual {33}
	021 Move X8, [X19]
	022 Move W3, [X20+24]
	023 Move X0, X19
	024 Move X1, X20
	025 Move X5, [X8+904]
	026 Move X4, [X8+912]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move W2, W31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 CallNoReturn X5
	033 Call 0x1C17F20

Method: System.Void WriteLong(System.Int64 value, System.IO.Stream stream, System.Boolean isLittleEndian)

Disassembly:
	0x03493D34 LDRB W8, [X24 + 0x95E]
	0x03493D38 LDR X23, [X23 + 0x5B0]
	0x03493D3C MOV X19, X3
	0x03493D40 MOV X20, X2
	0x03493D44 MOV X21, X1
	0x03493D48 MOV X22, X0
	0x03493D4C TBNZ X8, 0x0, 0x3493D88
	0x03493D50 ADRP X0, 0xC93000
	0x03493D54 LDR X0, [X0 + 0xCF0]
	0x03493D58 BL 0x1C16CF4
	0x03493D5C ADRP X0, 0xC93000
	0x03493D60 LDR X0, [X0 + 0xCF8]
	0x03493D64 BL 0x1C16CF4
	0x03493D68 ADRP X0, 0xC93000
	0x03493D6C LDR X0, [X0 + 0xD00]
	0x03493D70 BL 0x1C16CF4
	0x03493D74 ADRP X0, 0xC88000
	0x03493D78 LDR X0, [X0 + 0x5B0]
	0x03493D7C BL 0x1C16CF4
	0x03493D80 MOVZ W8, 0x1
	0x03493D84 STRB W8, [X24 + 0x95E]
	0x03493D88 LDR X0, [X23]
	0x03493D8C LDR W8, [X0 + 0xE0]
	0x03493D90 CBNZ W8, 0x3493D98

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X1
	006 Move X1, X31
	007 Move W21, W2
	008 Call BitConverter.GetBytes, X0
	009 Move X20, X0
	010 Move TEMP, X21
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X20
	015 Move X1, X31
	016 Call Array.Reverse, X0
	017 Compare X20, 0
	018 JumpIfEqual {33}
	019 Compare X19, 0
	020 JumpIfEqual {33}
	021 Move X8, [X19]
	022 Move W3, [X20+24]
	023 Move X0, X19
	024 Move X1, X20
	025 Move X5, [X8+904]
	026 Move X4, [X8+912]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move W2, W31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 CallNoReturn X5
	033 Call 0x1C17F20

Method: System.Void WriteUShort(System.UInt16 value, System.IO.Stream stream, System.Boolean isLittleEndian)

Disassembly:
	0x03493D94 BL 0x1C16DFC
	0x03493D98 UBFM X8, X21, 0x20, 0x3F
	0x03493D9C CMP X8, 0x4
	0x03493DA0 B.NE 0x3493E50
	0x03493DA4 LDR X0, [X23]
	0x03493DA8 UBFM X23, X19, 0x20, 0x3F
	0x03493DAC LDR W8, [X0 + 0xE0]
	0x03493DB0 CBNZ W8, 0x3493DB8
	0x03493DB4 BL 0x1C16DFC
	0x03493DB8 ADD W9, W23, W19
	0x03493DBC CMP W9, W19
	0x03493DC0 B.LE 0x3493E34
	0x03493DC4 CBZ X20, 0x3493E4C
	0x03493DC8 SXTW X10, W9
	0x03493DCC ADD X9, X20, W19, SXTW
	0x03493DD0 MOV X8, X31
	0x03493DD4 ADD X9, X9, 0x20
	0x03493DD8 SUB X10, X10, W19, SXTW
	0x03493DDC LDR W13, [X20 + 0x18]
	0x03493DE0 ADD W12, W19, W8
	0x03493DE4 ADD W11, W8, 0x3
	0x03493DE8 CMP W8, 0x0
	0x03493DEC CSEL W11, W11, W8, LT
	0x03493DF0 CMP W12, W13

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X1
	006 Move X1, X31
	007 Move W21, W2
	008 Call BitConverter.GetBytes, X0
	009 Move X20, X0
	010 Move TEMP, X21
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X20
	015 Move X1, X31
	016 Call Array.Reverse, X0
	017 Compare X20, 0
	018 JumpIfEqual {33}
	019 Compare X19, 0
	020 JumpIfEqual {33}
	021 Move X8, [X19]
	022 Move W3, [X20+24]
	023 Move X0, X19
	024 Move X1, X20
	025 Move X5, [X8+904]
	026 Move X4, [X8+912]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move W2, W31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 CallNoReturn X5
	033 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03493DF4 B.CS 0x3493E48
	0x03493DF8 CBZ X22, 0x3493E4C

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

