Type: Nakama.ApiValidatePurchaseHuaweiRequest

Method: System.Boolean get_Persist()

Disassembly:
	0x0340CDC4 LDR X0, [X0 + 0x838]
	0x0340CDC8 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_Persist(System.Boolean value)

Disassembly:
	0x0340CDCC ADRP X0, 0xD22000
	0x0340CDD0 LDR X0, [X0 + 0x258]
	0x0340CDD4 BL 0x1C16CF4

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.String get_Purchase()

Disassembly:
	0x0340CDD8 ADRP X0, 0xD21000
	0x0340CDDC LDR X0, [X0 + 0xDE8]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_Purchase(System.String value)

Disassembly:
	0x0340CDE0 BL 0x1C16CF4
	0x0340CDE4 ADRP X0, 0xD22000

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.String get_Signature()

Disassembly:
	0x0340CDE8 LDR X0, [X0 + 0x288]
	0x0340CDEC BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_Signature(System.String value)

Disassembly:
	0x0340CDF0 ADRP X0, 0xD21000
	0x0340CDF4 LDR X0, [X0 + 0xF40]

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x0340CDF8 BL 0x1C16CF4
	0x0340CDFC ADRP X0, 0xD22000
	0x0340CE00 LDR X0, [X0 + 0x268]
	0x0340CE04 BL 0x1C16CF4
	0x0340CE08 ADRP X0, 0xD22000
	0x0340CE0C LDR X0, [X0 + 0x30]
	0x0340CE10 BL 0x1C16CF4
	0x0340CE14 ADRP X0, 0xD22000
	0x0340CE18 LDR X0, [X0 + 0x270]
	0x0340CE1C BL 0x1C16CF4
	0x0340CE20 ADRP X0, 0xCE7000
	0x0340CE24 LDR X0, [X0 + 0x988]
	0x0340CE28 BL 0x1C16CF4
	0x0340CE2C ADRP X0, 0xD22000
	0x0340CE30 LDR X0, [X0 + 0x278]
	0x0340CE34 BL 0x1C16CF4
	0x0340CE38 ADRP X0, 0xD22000
	0x0340CE3C LDR X0, [X0 + 0x280]
	0x0340CE40 BL 0x1C16CF4
	0x0340CE44 ADRP X0, 0xD22000
	0x0340CE48 LDR X0, [X0 + 0x290]
	0x0340CE4C BL 0x1C16CF4
	0x0340CE50 ADRP X0, 0xD22000
	0x0340CE54 LDR X0, [X0 + 0x298]
	0x0340CE58 BL 0x1C16CF4
	0x0340CE5C MOVZ W8, 0x1
	0x0340CE60 STRB W8, [X20 + 0x566]
	0x0340CE64 LDR X0, [X22]
	0x0340CE68 LDR X21, [X21]
	0x0340CE6C MOVZ W1, 0x4
	0x0340CE70 BL 0x1C16D6C
	0x0340CE74 CBZ X0, 0x340D28C
	0x0340CE78 MOV X20, X0
	0x0340CE7C CBZ X21, 0x340CE94
	0x0340CE80 LDR X8, [X20]
	0x0340CE84 MOV X0, X21
	0x0340CE88 LDR X1, [X8 + 0x40]
	0x0340CE8C BL 0x1C16E00
	0x0340CE90 CBZ X0, 0x340D280
	0x0340CE94 LDR W8, [X20 + 0x18]
	0x0340CE98 CBZ W8, 0x340D27C
	0x0340CE9C ADRP X23, 0xD22000
	0x0340CEA0 LDR X23, [X23 + 0x288]
	0x0340CEA4 STR X21, [X20 + 0x20]
	0x0340CEA8 LDR X0, [X23]
	0x0340CEAC CBZ X0, 0x340CEC4
	0x0340CEB0 LDR X8, [X20]
	0x0340CEB4 LDR X1, [X8 + 0x40]
	0x0340CEB8 BL 0x1C16E00
	0x0340CEBC CBZ X0, 0x340D280
	0x0340CEC0 LDR W8, [X20 + 0x18]
	0x0340CEC4 CMP W8, 0x1
	0x0340CEC8 B.LS 0x340D27C
	0x0340CECC LDR X8, [X23]
	0x0340CED0 ADRP X9, 0xCE7000
	0x0340CED4 LDR X9, [X9 + 0xB58]
	0x0340CED8 ADD X1, X31, 0xC
	0x0340CEDC STR X8, [X20 + 0x28]
	0x0340CEE0 LDRB W8, [X19 + 0x10]
	0x0340CEE4 LDR X0, [X9]
	0x0340CEE8 STRB W8, [X31 + 0xC]
	0x0340CEEC BL 0x1C16E04
	0x0340CEF0 MOV X21, X0
	0x0340CEF4 CBZ X0, 0x340CF0C
	0x0340CEF8 LDR X8, [X20]
	0x0340CEFC MOV X0, X21
	0x0340CF00 LDR X1, [X8 + 0x40]
	0x0340CF04 BL 0x1C16E00
	0x0340CF08 CBZ X0, 0x340D280
	0x0340CF0C LDR W8, [X20 + 0x18]
	0x0340CF10 CMP W8, 0x2
	0x0340CF14 B.LS 0x340D27C
	0x0340CF18 ADRP X23, 0xCE7000
	0x0340CF1C LDR X23, [X23 + 0x838]
	0x0340CF20 STR X21, [X20 + 0x30]
	0x0340CF24 LDR X0, [X23]
	0x0340CF28 CBZ X0, 0x340CF40
	0x0340CF2C LDR X8, [X20]
	0x0340CF30 LDR X1, [X8 + 0x40]
	0x0340CF34 BL 0x1C16E00
	0x0340CF38 CBZ X0, 0x340D280
	0x0340CF3C LDR W8, [X20 + 0x18]
	0x0340CF40 CMP W8, 0x3
	0x0340CF44 B.LS 0x340D27C
	0x0340CF48 LDR X8, [X23]
	0x0340CF4C ADRP X21, 0xD21000
	0x0340CF50 LDR X21, [X21 + 0xDE0]
	0x0340CF54 MOV X0, X20
	0x0340CF58 MOV X1, X31
	0x0340CF5C STR X8, [X20 + 0x38]
	0x0340CF60 BL 0x3227578
	0x0340CF64 LDR X2, [X19 + 0x18]
	0x0340CF68 LDR X1, [X21]
	0x0340CF6C LDR X3, [X23]
	0x0340CF70 MOV X4, X31
	0x0340CF74 BL 0x32277C4
	0x0340CF78 LDR X8, [X22]
	0x0340CF7C MOV X21, X0
	0x0340CF80 MOVZ W1, 0x4
	0x0340CF84 MOV X0, X8
	0x0340CF88 BL 0x1C16D6C
	0x0340CF8C CBZ X0, 0x340D28C
	0x0340CF90 MOV X20, X0
	0x0340CF94 CBZ X21, 0x340CFAC
	0x0340CF98 LDR X8, [X20]
	0x0340CF9C MOV X0, X21
	0x0340CFA0 LDR X1, [X8 + 0x40]
	0x0340CFA4 BL 0x1C16E00
	0x0340CFA8 CBZ X0, 0x340D280
	0x0340CFAC LDR W8, [X20 + 0x18]
	0x0340CFB0 CBZ W8, 0x340D27C
	0x0340CFB4 ADRP X24, 0xD22000
	0x0340CFB8 LDR X24, [X24 + 0x268]
	0x0340CFBC STR X21, [X20 + 0x20]
	0x0340CFC0 LDR X0, [X24]
	0x0340CFC4 CBZ X0, 0x340CFDC
	0x0340CFC8 LDR X8, [X20]
	0x0340CFCC LDR X1, [X8 + 0x40]
	0x0340CFD0 BL 0x1C16E00
	0x0340CFD4 CBZ X0, 0x340D280
	0x0340CFD8 LDR W8, [X20 + 0x18]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xFD2000
	009 Move X21, 0xCE8000
	010 Move X22, 0xCE8000
	011 Move W8, [X20+1375]
	012 Move X21, [X21+2440]
	013 Move X22, [X22+2512]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {42}
	019 Move X0, 0xCE8000
	020 Move X0, [X0+2904]
	021 Call 0x1C17CF4
	022 Move X0, 0xCE8000
	023 Move X0, [X0+2512]
	024 Call 0x1C17CF4
	025 Move X0, 0xCE8000
	026 Move X0, [X0+2104]
	027 Call 0x1C17CF4
	028 Move X0, 0xD23000
	029 Move X0, [X0+504]
	030 Call 0x1C17CF4
	031 Move X0, 0xD23000
	032 Move X0, [X0+520]
	033 Call 0x1C17CF4
	034 Move X0, 0xD22000
	035 Move X0, [X0+3520]
	036 Call 0x1C17CF4
	037 Move X0, 0xCE8000
	038 Move X0, [X0+2440]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+1375], W8
	042 Move X0, [X22]
	043 Move X21, [X21]
	044 Move W1, 4
	045 Call 0x1C17D6C
	046 Compare X0, 0
	047 JumpIfEqual {137}
	048 Move X20, X0
	049 Compare X21, 0
	050 JumpIfEqual {57}
	051 Move X8, [X20]
	052 Move X0, X21
	053 Move X1, [X8+64]
	054 Call 0x1C17E00
	055 Compare X0, 0
	056 JumpIfEqual {134}
	057 Move W8, [X20+24]
	058 Compare W8, 0
	059 JumpIfEqual {133}
	060 Move X22, 0xD23000
	061 Move X22, [X22+504]
	062 Move [X20+32], X21
	063 Move X0, [X22]
	064 Compare X0, 0
	065 JumpIfEqual {72}
	066 Move X8, [X20]
	067 Move X1, [X8+64]
	068 Call 0x1C17E00
	069 Compare X0, 0
	070 JumpIfEqual {134}
	071 Move W8, [X20+24]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X8, [X22]
	074 Move X9, 0xCE8000
	075 Move X9, [X9+2904]
	076 Add X1, X31, 12
	077 Move [X20+40], X8
	078 Move W8, [X19+16]
	079 Move X0, [X9]
	080 Move [X31+12], W8
	081 Call 0x1C17E04
	082 Move X21, X0
	083 Compare X0, 0
	084 JumpIfEqual {91}
	085 Move X8, [X20]
	086 Move X0, X21
	087 Move X1, [X8+64]
	088 Call 0x1C17E00
	089 Compare X0, 0
	090 JumpIfEqual {134}
	091 Move W8, [X20+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X22, 0xCE8000
	094 Move X22, [X22+2104]
	095 Move [X20+48], X21
	096 Move X0, [X22]
	097 Compare X0, 0
	098 JumpIfEqual {105}
	099 Move X8, [X20]
	100 Move X1, [X8+64]
	101 Call 0x1C17E00
	102 Compare X0, 0
	103 JumpIfEqual {134}
	104 Move W8, [X20+24]
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X8, [X22]
	107 Move X21, 0xD23000
	108 Move X23, 0xD22000
	109 Move X21, [X21+520]
	110 Move X23, [X23+3520]
	111 Move X0, X20
	112 Move X1, X31
	113 Move [X20+56], X8
	114 Call String.Concat, X0
	115 Move X2, [X19+24]
	116 Move X1, [X21]
	117 Move X3, [X22]
	118 Move X4, X31
	119 Call String.Concat, X0, X1, X2, X3
	120 Move X2, [X19+32]
	121 Move X1, [X23]
	122 Move X3, [X22]
	123 Move X4, X31
	124 Call String.Concat, X0, X1, X2, X3
	125 Move X20, [X31+48]
	126 Move X19, [X31+56]
	127 Move X22, [X31+32]
	128 Move X21, [X31+40]
	129 Move X30, [X31+16]
	130 Move X23, [X31+24]
	131 Add X31, X31, 64
	132 Return X0
	133 Call 0x1C17F28
	134 Call 0x1C17F44
	135 Move X1, X31
	136 Call 0x1C17DEC
	137 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0340CFDC CMP W8, 0x1
	0x0340CFE0 B.LS 0x340D27C

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

