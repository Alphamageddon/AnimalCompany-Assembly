Type: Nakama.MatchState

Method: System.String get_MatchId()

Disassembly:
	0x03475F80 RET
	0x03475F84 STR X1, [X0 + 0x18]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_MatchId(System.String value)

Disassembly:
	0x03475F88 RET
	0x03475F8C LDR X0, [X0 + 0x20]

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Int64 get_OpCode()

Disassembly:
	0x03475F90 RET
	0x03475F94 STR X1, [X0 + 0x20]
	0x03475F98 RET
	0x03475F9C STP X30, X21, [X31 - 0x20]!
	0x03475FA0 STP X20, X19, [X31 + 0x10]
	0x03475FA4 ADRP X21, 0xF68000
	0x03475FA8 ADRP X20, 0xCBB000
	0x03475FAC LDRB W8, [X21 + 0x823]
	0x03475FB0 LDR X20, [X20 + 0x9A8]
	0x03475FB4 MOV X19, X0
	0x03475FB8 TBNZ X8, 0x0, 0x3475FD0
	0x03475FBC ADRP X0, 0xCBB000
	0x03475FC0 LDR X0, [X0 + 0x9A8]
	0x03475FC4 BL 0x1C16CF4
	0x03475FC8 MOVZ W8, 0x1
	0x03475FCC STRB W8, [X21 + 0x823]
	0x03475FD0 LDP X1, X2, [X19 + 0x10]
	0x03475FD4 LDR X3, [X19 + 0x20]
	0x03475FD8 LDR X0, [X20]
	0x03475FDC LDP X20, X19, [X31 + 0x10]
	0x03475FE0 MOV X4, X31
	0x03475FE4 LDP X30, X21, [X31], #0x20
	0x03475FE8 B 0x3227C18

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xF69000
	006 Move X20, 0xC88000
	007 Move W8, [X21+2064]
	008 Move X20, [X20+2536]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xC88000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2064], W8
	019 Move X0, [X20]
	020 Move X19, [X19+24]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call Convert.ToInt64, X0
	032 Return X0

Method: System.String get_OpCodeField()

Disassembly:
	0x03475FEC MOV X1, X31
	0x03475FF0 B 0x33BDD8C

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_OpCodeField(System.String value)

Disassembly:
	0x03475FF4 LDR X0, [X0 + 0x10]
	0x03475FF8 RET

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.Byte[] get_State()

Disassembly:
	0x03475FFC STR X1, [X0 + 0x10]
	0x03476000 RET
	0x03476004 STR X30, [X31 - 0x30]!
	0x03476008 STP X22, X21, [X31 + 0x10]
	0x0347600C STP X20, X19, [X31 + 0x20]
	0x03476010 ADRP X22, 0xF67000
	0x03476014 ADRP X20, 0xCBA000
	0x03476018 ADRP X21, 0xCB9000
	0x0347601C LDRB W8, [X22 + 0x824]
	0x03476020 LDR X20, [X20 + 0x9B0]
	0x03476024 LDR X21, [X21 + 0x5B8]
	0x03476028 MOV X19, X0
	0x0347602C TBNZ X8, 0x0, 0x3476050
	0x03476030 ADRP X0, 0xCBA000
	0x03476034 LDR X0, [X0 + 0x9B0]
	0x03476038 BL 0x1C16CF4
	0x0347603C ADRP X0, 0xCB9000
	0x03476040 LDR X0, [X0 + 0x5B8]
	0x03476044 BL 0x1C16CF4
	0x03476048 MOVZ W8, 0x1
	0x0347604C STRB W8, [X22 + 0x824]
	0x03476050 LDR X1, [X19 + 0x10]
	0x03476054 LDR X0, [X20]
	0x03476058 LDR X2, [X21]
	0x0347605C LDP X20, X19, [X31 + 0x20]
	0x03476060 LDP X22, X21, [X31 + 0x10]
	0x03476064 MOV X3, X31
	0x03476068 LDR X30, [X31], #0x30
	0x0347606C B 0x32274B8
	0x03476070 MOV X1, X31
	0x03476074 B 0x33BDD8C
	0x03476078 LDR W0, [X0 + 0x10]
	0x0347607C RET
	0x03476080 STR W1, [X0 + 0x10]
	0x03476084 RET
	0x03476088 LDR W0, [X0 + 0x14]
	0x0347608C RET
	0x03476090 STR W1, [X0 + 0x14]
	0x03476094 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xF68000
	005 Move W8, [X20+2065]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xC87000
	012 Move X0, [X0+2536]
	013 Call 0x1C17CF4
	014 Move X0, 0xCBB000
	015 Move X0, [X0+2384]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2065], W8
	019 Move X19, [X19+32]
	020 Compare X19, 0
	021 JumpIfEqual {36}
	022 Move X8, 0xC87000
	023 Move X8, [X8+2536]
	024 Move X0, [X8]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X1, X31
	033 Move X30, [X31+32]
	034 Call Convert.FromBase64String, X0
	035 Return X0
	036 Move X19, 0xCBB000
	037 Move X19, [X19+2384]
	038 Move X0, [X19]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {44}
	042 Call 0x1C17DFC
	043 Move X0, [X19]
	044 Move X8, [X0+184]
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X0, [X8]
	048 Move X30, [X31+32]
	049 Return X0

Method: System.String get_StateField()

Disassembly:
	0x03476098 LDR X0, [X0 + 0x18]
	0x0347609C RET

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_StateField(System.String value)

Disassembly:
	0x034760A0 STR X1, [X0 + 0x18]
	0x034760A4 RET

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: Nakama.IUserPresence get_UserPresence()

Disassembly:
	0x034760A8 LDR X0, [X0 + 0x20]
	0x034760AC RET

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: Nakama.UserPresence get_UserPresenceField()

Disassembly:
	0x034760B0 STR X1, [X0 + 0x20]
	0x034760B4 RET

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_UserPresenceField(Nakama.UserPresence value)

Disassembly:
	0x034760B8 LDR X0, [X0 + 0x28]
	0x034760BC RET

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x034760C0 STR X1, [X0 + 0x28]
	0x034760C4 RET
	0x034760C8 LDR X0, [X0 + 0x30]
	0x034760CC RET
	0x034760D0 STR X1, [X0 + 0x30]
	0x034760D4 RET
	0x034760D8 SUB X31, X31, 0x40
	0x034760DC STR X30, [X31 + 0x10]
	0x034760E0 STP X22, X21, [X31 + 0x20]
	0x034760E4 STP X20, X19, [X31 + 0x30]
	0x034760E8 ADRP X20, 0xF67000
	0x034760EC ADRP X21, 0xC7D000
	0x034760F0 ADRP X22, 0xC7D000
	0x034760F4 LDRB W8, [X20 + 0x825]
	0x034760F8 LDR X21, [X21 + 0x9D0]
	0x034760FC LDR X22, [X22 + 0x758]
	0x03476100 MOV X19, X0
	0x03476104 TBNZ X8, 0x0, 0x3476140
	0x03476108 ADRP X0, 0xC7D000
	0x0347610C LDR X0, [X0 + 0x758]
	0x03476110 BL 0x1C16CF4
	0x03476114 ADRP X0, 0xC7E000
	0x03476118 LDR X0, [X0 + 0x478]
	0x0347611C BL 0x1C16CF4
	0x03476120 ADRP X0, 0xC7D000
	0x03476124 LDR X0, [X0 + 0x9D0]
	0x03476128 BL 0x1C16CF4
	0x0347612C ADRP X0, 0xCBA000
	0x03476130 LDR X0, [X0 + 0x9B8]
	0x03476134 BL 0x1C16CF4
	0x03476138 MOVZ W8, 0x1
	0x0347613C STRB W8, [X20 + 0x825]
	0x03476140 LDR X0, [X21]
	0x03476144 MOVZ W1, 0x6
	0x03476148 BL 0x1C16D6C
	0x0347614C MOV X20, X0
	0x03476150 LDR W8, [X19 + 0x10]
	0x03476154 LDR X0, [X22]
	0x03476158 ADD X1, X31, 0x1C
	0x0347615C STR W8, [X31 + 0x1C]
	0x03476160 BL 0x1C16E04
	0x03476164 CBZ X20, 0x34762D8
	0x03476168 MOV X21, X0
	0x0347616C CBZ X0, 0x3476184
	0x03476170 LDR X8, [X20]
	0x03476174 MOV X0, X21
	0x03476178 LDR X1, [X8 + 0x40]
	0x0347617C BL 0x1C16E00
	0x03476180 CBZ X0, 0x34762CC
	0x03476184 LDR W8, [X20 + 0x18]
	0x03476188 CBZ W8, 0x34762C8
	0x0347618C STR X21, [X20 + 0x20]
	0x03476190 LDR W8, [X19 + 0x14]
	0x03476194 LDR X0, [X22]
	0x03476198 ADD X1, X31, 0x18
	0x0347619C STR W8, [X31 + 0x18]
	0x034761A0 BL 0x1C16E04
	0x034761A4 MOV X21, X0
	0x034761A8 CBZ X0, 0x34761C0
	0x034761AC LDR X8, [X20]
	0x034761B0 MOV X0, X21
	0x034761B4 LDR X1, [X8 + 0x40]
	0x034761B8 BL 0x1C16E00
	0x034761BC CBZ X0, 0x34762CC
	0x034761C0 LDR W8, [X20 + 0x18]
	0x034761C4 CMP W8, 0x1
	0x034761C8 B.LS 0x34762C8
	0x034761CC STR X21, [X20 + 0x28]
	0x034761D0 LDR X21, [X19 + 0x18]
	0x034761D4 CBZ X21, 0x34761F0
	0x034761D8 LDR X8, [X20]
	0x034761DC MOV X0, X21
	0x034761E0 LDR X1, [X8 + 0x40]
	0x034761E4 BL 0x1C16E00
	0x034761E8 CBZ X0, 0x34762CC
	0x034761EC LDR W8, [X20 + 0x18]
	0x034761F0 CMP W8, 0x2
	0x034761F4 B.LS 0x34762C8
	0x034761F8 STR X21, [X20 + 0x30]
	0x034761FC LDR X21, [X19 + 0x20]
	0x03476200 CBZ X21, 0x347621C
	0x03476204 LDR X8, [X20]
	0x03476208 MOV X0, X21
	0x0347620C LDR X1, [X8 + 0x40]
	0x03476210 BL 0x1C16E00
	0x03476214 CBZ X0, 0x34762CC
	0x03476218 LDR W8, [X20 + 0x18]
	0x0347621C CMP W8, 0x3
	0x03476220 B.LS 0x34762C8
	0x03476224 STR X21, [X20 + 0x38]
	0x03476228 LDR X21, [X19 + 0x28]
	0x0347622C CBZ X21, 0x3476248
	0x03476230 LDR X8, [X20]
	0x03476234 MOV X0, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xF68000
	007 Move X21, 0xC7E000
	008 Move W8, [X19+2066]
	009 Move X21, [X21+2512]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0xC80000
	016 Move X0, [X0+2656]
	017 Call 0x1C17CF4
	018 Move X0, 0xC7E000
	019 Move X0, [X0+2512]
	020 Call 0x1C17CF4
	021 Move X0, 0xCBB000
	022 Move X0, [X0+2392]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X19+2066], W8
	026 Move X0, [X21]
	027 Move W1, 4
	028 Call 0x1C17D6C
	029 Compare X0, 0
	030 JumpIfEqual {108}
	031 Move X21, [X20+16]
	032 Move X19, X0
	033 Compare X21, 0
	034 JumpIfEqual {41}
	035 Move X8, [X19]
	036 Move X0, X21
	037 Move X1, [X8+64]
	038 Call 0x1C17E00
	039 Compare X0, 0
	040 JumpIfEqual {105}
	041 Move W8, [X19+24]
	042 Compare W8, 0
	043 JumpIfEqual {104}
	044 Move X22, 0xC80000
	045 Move X22, [X22+2656]
	046 Move X0, X20
	047 Move [X19+32], X21
	048 Call MatchState.get_OpCode, X0
	049 Move X8, [X22]
	050 Move [X31+8], X0
	051 Add X1, X31, 8
	052 Move X0, X8
	053 Call 0x1C17E04
	054 Move X21, X0
	055 Compare X0, 0
	056 JumpIfEqual {63}
	057 Move X8, [X19]
	058 Move X0, X21
	059 Move X1, [X8+64]
	060 Call 0x1C17E00
	061 Compare X0, 0
	062 JumpIfEqual {105}
	063 Move W8, [X19+24]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X0, X20
	066 Move [X19+40], X21
	067 Call MatchState.get_State, X0
	068 Move X21, X0
	069 Compare X0, 0
	070 JumpIfEqual {77}
	071 Move X8, [X19]
	072 Move X0, X21
	073 Move X1, [X8+64]
	074 Call 0x1C17E00
	075 Compare X0, 0
	076 JumpIfEqual {105}
	077 Move W8, [X19+24]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move [X19+48], X21
	080 Move X20, [X20+40]
	081 Compare X20, 0
	082 JumpIfEqual {90}
	083 Move X8, [X19]
	084 Move X0, X20
	085 Move X1, [X8+64]
	086 Call 0x1C17E00
	087 Compare X0, 0
	088 JumpIfEqual {105}
	089 Move W8, [X19+24]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X8, 0xCBB000
	092 Move X8, [X8+2392]
	093 Move [X19+56], X20
	094 Move X1, X19
	095 Move X2, X31
	096 Move X0, [X8]
	097 Call String.Format, X0, X1
	098 Move X20, [X31+32]
	099 Move X19, [X31+40]
	100 Move X22, [X31+16]
	101 Move X21, [X31+24]
	102 Move X30, [X31+48]
	103 Return X0
	104 Call 0x1C17F28
	105 Call 0x1C17F44
	106 Move X1, X31
	107 Call 0x1C17DEC
	108 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03476238 LDR X1, [X8 + 0x40]
	0x0347623C BL 0x1C16E00

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x03476240 CBZ X0, 0x34762CC
	0x03476244 LDR W8, [X20 + 0x18]
	0x03476248 CMP W8, 0x4
	0x0347624C B.LS 0x34762C8
	0x03476250 ADRP X8, 0xC7E000
	0x03476254 LDR X8, [X8 + 0x478]
	0x03476258 STR X21, [X20 + 0x40]
	0x0347625C LDR X9, [X19 + 0x30]
	0x03476260 ADD X1, X31, 0x8
	0x03476264 LDR X0, [X8]
	0x03476268 STR X9, [X31 + 0x8]
	0x0347626C BL 0x1C16E04
	0x03476270 MOV X19, X0
	0x03476274 CBZ X0, 0x347628C
	0x03476278 LDR X8, [X20]
	0x0347627C MOV X0, X19
	0x03476280 LDR X1, [X8 + 0x40]
	0x03476284 BL 0x1C16E00
	0x03476288 CBZ X0, 0x34762CC
	0x0347628C LDR W8, [X20 + 0x18]
	0x03476290 CMP W8, 0x5
	0x03476294 B.LS 0x34762C8
	0x03476298 ADRP X8, 0xCBA000
	0x0347629C LDR X8, [X8 + 0x9B8]
	0x034762A0 STR X19, [X20 + 0x48]
	0x034762A4 MOV X1, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xF68000
	006 Move X21, 0xC7E000
	007 Move X19, 0xCBB000
	008 Move W8, [X20+2067]
	009 Move X21, [X21+1560]
	010 Move X19, [X19+2384]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xC7E000
	016 Move X0, [X0+1560]
	017 Call 0x1C17CF4
	018 Move X0, 0xCBB000
	019 Move X0, [X0+2384]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2067], W8
	023 Move X0, [X21]
	024 Move W1, W31
	025 Call 0x1C17D6C
	026 Move X8, [X19]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X8, [X8+184]
	030 Move [X8], X0
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 

