Type: Nakama.ApiSession

Method: System.Boolean get_Created()

Disassembly:
	0x034093B4 LDR X0, [X0 + 0xA8]
	0x034093B8 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_Created(System.Boolean value)

Disassembly:
	0x034093BC MOVZ W8, 0x1
	0x034093C0 STRB W8, [X20 + 0x54A]
	0x034093C4 LDR X19, [X19 + 0x18]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.String get_RefreshToken()

Disassembly:
	0x034093C8 CBNZ X19, 0x34093F4
	0x034093CC ADRP X8, 0xD25000

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_RefreshToken(System.String value)

Disassembly:
	0x034093D0 LDR X8, [X8 + 0xA8]
	0x034093D4 LDR X0, [X8]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.String get_Token()

Disassembly:
	0x034093D8 BL 0x1C16F10
	0x034093DC ADRP X8, 0xD25000

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_Token(System.String value)

Disassembly:
	0x034093E0 LDR X8, [X8 + 0xA0]
	0x034093E4 MOV W1, W31

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x034093E8 MOV X19, X0
	0x034093EC LDR X2, [X8]
	0x034093F0 BL 0x301B830
	0x034093F4 MOV X0, X19
	0x034093F8 LDP X20, X19, [X31 + 0x10]
	0x034093FC LDR X30, [X31], #0x20
	0x03409400 RET
	0x03409404 LDR X0, [X0 + 0x18]
	0x03409408 RET
	0x0340940C STR X1, [X0 + 0x18]
	0x03409410 RET
	0x03409414 STR X30, [X31 - 0x50]!
	0x03409418 STP X26, X25, [X31 + 0x10]
	0x0340941C STP X24, X23, [X31 + 0x20]
	0x03409420 STP X22, X21, [X31 + 0x30]
	0x03409424 STP X20, X19, [X31 + 0x40]
	0x03409428 ADRP X26, 0xFD4000
	0x0340942C ADRP X20, 0xCEA000
	0x03409430 ADRP X25, 0xD24000
	0x03409434 ADRP X23, 0xCEA000
	0x03409438 ADRP X24, 0xD25000
	0x0340943C ADRP X21, 0xD25000
	0x03409440 ADRP X22, 0xD24000
	0x03409444 LDR X20, [X20 + 0x988]
	0x03409448 LDRB W8, [X26 + 0x54B]
	0x0340944C LDR X25, [X25 + 0xED8]
	0x03409450 LDR X23, [X23 + 0x838]
	0x03409454 LDR X24, [X24 + 0xB0]
	0x03409458 LDR X21, [X21 + 0xB8]
	0x0340945C LDR X22, [X22 + 0xD50]
	0x03409460 MOV X19, X0
	0x03409464 TBNZ X8, 0x0, 0x34094B8
	0x03409468 ADRP X0, 0xD25000
	0x0340946C LDR X0, [X0 + 0xB0]
	0x03409470 BL 0x1C16CF4
	0x03409474 ADRP X0, 0xCEA000
	0x03409478 LDR X0, [X0 + 0x838]
	0x0340947C BL 0x1C16CF4
	0x03409480 ADRP X0, 0xD24000
	0x03409484 LDR X0, [X0 + 0xD50]
	0x03409488 BL 0x1C16CF4
	0x0340948C ADRP X0, 0xD24000
	0x03409490 LDR X0, [X0 + 0xED8]
	0x03409494 BL 0x1C16CF4
	0x03409498 ADRP X0, 0xCEA000
	0x0340949C LDR X0, [X0 + 0x988]
	0x034094A0 BL 0x1C16CF4
	0x034094A4 ADRP X0, 0xD25000
	0x034094A8 LDR X0, [X0 + 0xB8]
	0x034094AC BL 0x1C16CF4
	0x034094B0 MOVZ W8, 0x1
	0x034094B4 STRB W8, [X26 + 0x54B]
	0x034094B8 LDR X2, [X19 + 0x10]
	0x034094BC LDR X0, [X20]
	0x034094C0 LDR X1, [X25]
	0x034094C4 LDR X3, [X23]
	0x034094C8 MOV X4, X31
	0x034094CC BL 0x32277C4
	0x034094D0 MOV X20, X0
	0x034094D4 MOV X0, X19
	0x034094D8 BL 0x340938C
	0x034094DC LDR X8, [X23]
	0x034094E0 LDR X2, [X24]
	0x034094E4 MOV X1, X0
	0x034094E8 MOV X0, X8
	0x034094EC BL 0x226B7E8
	0x034094F0 LDR X1, [X21]
	0x034094F4 LDR X3, [X22]
	0x034094F8 MOV X2, X0
	0x034094FC MOV X0, X20
	0x03409500 LDP X20, X19, [X31 + 0x40]
	0x03409504 LDP X22, X21, [X31 + 0x30]
	0x03409508 LDP X24, X23, [X31 + 0x20]
	0x0340950C LDP X26, X25, [X31 + 0x10]
	0x03409510 MOV X4, X31
	0x03409514 LDR X30, [X31], #0x50
	0x03409518 B 0x32277C4
	0x0340951C MOV X1, X31
	0x03409520 B 0x33BDD8C
	0x03409524 STR X30, [X31 - 0x20]!
	0x03409528 STP X20, X19, [X31 + 0x10]
	0x0340952C ADRP X20, 0xFD4000
	0x03409530 LDRB W8, [X20 + 0x54C]
	0x03409534 MOV X19, X0
	0x03409538 TBNZ X8, 0x0, 0x340955C
	0x0340953C ADRP X0, 0xD25000
	0x03409540 LDR X0, [X0 + 0xA0]
	0x03409544 BL 0x1C16CF4
	0x03409548 ADRP X0, 0xD25000
	0x0340954C LDR X0, [X0 + 0xA8]
	0x03409550 BL 0x1C16CF4
	0x03409554 MOVZ W8, 0x1
	0x03409558 STRB W8, [X20 + 0x54C]
	0x0340955C LDR X19, [X19 + 0x10]
	0x03409560 CBNZ X19, 0x340958C
	0x03409564 ADRP X8, 0xD25000
	0x03409568 LDR X8, [X8 + 0xA8]
	0x0340956C LDR X0, [X8]
	0x03409570 BL 0x1C16F10
	0x03409574 ADRP X8, 0xD25000
	0x03409578 LDR X8, [X8 + 0xA0]
	0x0340957C MOV W1, W31
	0x03409580 MOV X19, X0
	0x03409584 LDR X2, [X8]
	0x03409588 BL 0x301B830
	0x0340958C MOV X0, X19
	0x03409590 LDP X20, X19, [X31 + 0x10]
	0x03409594 LDR X30, [X31], #0x20
	0x03409598 RET
	0x0340959C LDR X0, [X0 + 0x10]
	0x034095A0 RET
	0x034095A4 STR X1, [X0 + 0x10]
	0x034095A8 RET
	0x034095AC STP X30, X25, [X31 - 0x40]!
	0x034095B0 STP X24, X23, [X31 + 0x10]
	0x034095B4 STP X22, X21, [X31 + 0x20]
	0x034095B8 STP X20, X19, [X31 + 0x30]
	0x034095BC ADRP X25, 0xFD4000
	0x034095C0 ADRP X23, 0xCEA000
	0x034095C4 ADRP X24, 0xD25000
	0x034095C8 ADRP X20, 0xCEA000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xFD5000
	009 Move X21, 0xCEB000
	010 Move X22, 0xCEB000
	011 Move W8, [X20+1346]
	012 Move X21, [X21+2440]
	013 Move X22, [X22+2512]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {42}
	019 Move X0, 0xCEB000
	020 Move X0, [X0+2904]
	021 Call 0x1C17CF4
	022 Move X0, 0xCEB000
	023 Move X0, [X0+2512]
	024 Call 0x1C17CF4
	025 Move X0, 0xCEB000
	026 Move X0, [X0+2104]
	027 Call 0x1C17CF4
	028 Move X0, 0xD26000
	029 Move X0, [X0+96]
	030 Call 0x1C17CF4
	031 Move X0, 0xD26000
	032 Move X0, [X0+104]
	033 Call 0x1C17CF4
	034 Move X0, 0xD25000
	035 Move X0, [X0+3448]
	036 Call 0x1C17CF4
	037 Move X0, 0xCEB000
	038 Move X0, [X0+2440]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+1346], W8
	042 Move X0, [X22]
	043 Move X21, [X21]
	044 Move W1, 4
	045 Call 0x1C17D6C
	046 Compare X0, 0
	047 JumpIfEqual {137}
	048 Move X20, X0
	049 Compare X21, 0
	050 JumpIfEqual {57}
	051 Move X8, [X20]
	052 Move X0, X21
	053 Move X1, [X8+64]
	054 Call 0x1C17E00
	055 Compare X0, 0
	056 JumpIfEqual {134}
	057 Move W8, [X20+24]
	058 Compare W8, 0
	059 JumpIfEqual {133}
	060 Move X22, 0xD26000
	061 Move X22, [X22+104]
	062 Move [X20+32], X21
	063 Move X0, [X22]
	064 Compare X0, 0
	065 JumpIfEqual {72}
	066 Move X8, [X20]
	067 Move X1, [X8+64]
	068 Call 0x1C17E00
	069 Compare X0, 0
	070 JumpIfEqual {134}
	071 Move W8, [X20+24]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X8, [X22]
	074 Move X9, 0xCEB000
	075 Move X9, [X9+2904]
	076 Add X1, X31, 12
	077 Move [X20+40], X8
	078 Move W8, [X19+16]
	079 Move X0, [X9]
	080 Move [X31+12], W8
	081 Call 0x1C17E04
	082 Move X21, X0
	083 Compare X0, 0
	084 JumpIfEqual {91}
	085 Move X8, [X20]
	086 Move X0, X21
	087 Move X1, [X8+64]
	088 Call 0x1C17E00
	089 Compare X0, 0
	090 JumpIfEqual {134}
	091 Move W8, [X20+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X22, 0xCEB000
	094 Move X22, [X22+2104]
	095 Move [X20+48], X21
	096 Move X0, [X22]
	097 Compare X0, 0
	098 JumpIfEqual {105}
	099 Move X8, [X20]
	100 Move X1, [X8+64]
	101 Call 0x1C17E00
	102 Compare X0, 0
	103 JumpIfEqual {134}
	104 Move W8, [X20+24]
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X8, [X22]
	107 Move X21, 0xD26000
	108 Move X23, 0xD25000
	109 Move X21, [X21+96]
	110 Move X23, [X23+3448]
	111 Move X0, X20
	112 Move X1, X31
	113 Move [X20+56], X8
	114 Call String.Concat, X0
	115 Move X2, [X19+24]
	116 Move X1, [X21]
	117 Move X3, [X22]
	118 Move X4, X31
	119 Call String.Concat, X0, X1, X2, X3
	120 Move X2, [X19+32]
	121 Move X1, [X23]
	122 Move X3, [X22]
	123 Move X4, X31
	124 Call String.Concat, X0, X1, X2, X3
	125 Move X20, [X31+48]
	126 Move X19, [X31+56]
	127 Move X22, [X31+32]
	128 Move X21, [X31+40]
	129 Move X30, [X31+16]
	130 Move X23, [X31+24]
	131 Add X31, X31, 64
	132 Return X0
	133 Call 0x1C17F28
	134 Call 0x1C17F44
	135 Move X1, X31
	136 Call 0x1C17DEC
	137 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x034095CC ADRP X21, 0xD25000
	0x034095D0 ADRP X22, 0xD24000

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

