Type: Nakama.ApiFriend

Method: System.Int32 get_State()

Disassembly:
	0x03406A68 MOV X0, X21
	0x03406A6C LDR X1, [X8 + 0x40]

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_State(System.Int32 value)

Disassembly:
	0x03406A70 BL 0x1C16E00
	0x03406A74 CBZ X0, 0x3406D08

ISIL:
	001 Move [X0+16], W1
	002 Return 

Method: System.String get_UpdateTime()

Disassembly:
	0x03406A78 LDR W8, [X20 + 0x18]
	0x03406A7C CBZ W8, 0x3406D04

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_UpdateTime(System.String value)

Disassembly:
	0x03406A80 ADRP X24, 0xD27000
	0x03406A84 LDR X24, [X24 + 0xF60]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: Nakama.IApiUser get_User()

Disassembly:
	0x03406A88 STR X21, [X20 + 0x20]
	0x03406A8C LDR X0, [X24]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: Nakama.ApiUser get__user()

Disassembly:
	0x03406A90 CBZ X0, 0x3406AA8
	0x03406A94 LDR X8, [X20]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set__user(Nakama.ApiUser value)

Disassembly:
	0x03406A98 LDR X1, [X8 + 0x40]
	0x03406A9C BL 0x1C16E00

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x03406AA0 CBZ X0, 0x3406D08
	0x03406AA4 LDR W8, [X20 + 0x18]
	0x03406AA8 CMP W8, 0x1
	0x03406AAC B.LS 0x3406D04
	0x03406AB0 LDR X8, [X24]
	0x03406AB4 ADRP X24, 0xCED000
	0x03406AB8 LDR X24, [X24 + 0x758]
	0x03406ABC ADD X1, X31, 0xC
	0x03406AC0 STR X8, [X20 + 0x28]
	0x03406AC4 LDR W8, [X19 + 0x28]
	0x03406AC8 LDR X0, [X24]
	0x03406ACC STR W8, [X31 + 0xC]
	0x03406AD0 BL 0x1C16E04
	0x03406AD4 MOV X21, X0
	0x03406AD8 CBZ X0, 0x3406AF0
	0x03406ADC LDR X8, [X20]
	0x03406AE0 MOV X0, X21
	0x03406AE4 LDR X1, [X8 + 0x40]
	0x03406AE8 BL 0x1C16E00
	0x03406AEC CBZ X0, 0x3406D08
	0x03406AF0 LDR W8, [X20 + 0x18]
	0x03406AF4 CMP W8, 0x2
	0x03406AF8 B.LS 0x3406D04
	0x03406AFC STR X21, [X20 + 0x30]
	0x03406B00 LDR X0, [X22]
	0x03406B04 CBZ X0, 0x3406B1C
	0x03406B08 LDR X8, [X20]
	0x03406B0C LDR X1, [X8 + 0x40]
	0x03406B10 BL 0x1C16E00
	0x03406B14 CBZ X0, 0x3406D08
	0x03406B18 LDR W8, [X20 + 0x18]
	0x03406B1C CMP W8, 0x3
	0x03406B20 B.LS 0x3406D04
	0x03406B24 LDR X8, [X22]
	0x03406B28 ADRP X21, 0xD27000
	0x03406B2C LDR X21, [X21 + 0xD00]
	0x03406B30 MOV X0, X20
	0x03406B34 MOV X1, X31
	0x03406B38 STR X8, [X20 + 0x38]
	0x03406B3C BL 0x3227578
	0x03406B40 LDR X2, [X19 + 0x30]
	0x03406B44 LDR X1, [X21]
	0x03406B48 LDR X3, [X22]
	0x03406B4C MOV X4, X31
	0x03406B50 BL 0x32277C4
	0x03406B54 LDR X8, [X23]
	0x03406B58 MOV X21, X0
	0x03406B5C MOVZ W1, 0x4
	0x03406B60 MOV X0, X8
	0x03406B64 BL 0x1C16D6C
	0x03406B68 CBZ X0, 0x3406D14
	0x03406B6C MOV X20, X0
	0x03406B70 CBZ X21, 0x3406B88
	0x03406B74 LDR X8, [X20]
	0x03406B78 MOV X0, X21
	0x03406B7C LDR X1, [X8 + 0x40]
	0x03406B80 BL 0x1C16E00
	0x03406B84 CBZ X0, 0x3406D08
	0x03406B88 LDR W8, [X20 + 0x18]
	0x03406B8C CBZ W8, 0x3406D04
	0x03406B90 ADRP X23, 0xD27000
	0x03406B94 LDR X23, [X23 + 0xF58]
	0x03406B98 STR X21, [X20 + 0x20]
	0x03406B9C LDR X0, [X23]
	0x03406BA0 CBZ X0, 0x3406BB8
	0x03406BA4 LDR X8, [X20]
	0x03406BA8 LDR X1, [X8 + 0x40]
	0x03406BAC BL 0x1C16E00
	0x03406BB0 CBZ X0, 0x3406D08
	0x03406BB4 LDR W8, [X20 + 0x18]
	0x03406BB8 CMP W8, 0x1
	0x03406BBC B.LS 0x3406D04
	0x03406BC0 LDR X8, [X23]
	0x03406BC4 ADD X1, X31, 0x8
	0x03406BC8 STR X8, [X20 + 0x28]
	0x03406BCC LDR W8, [X19 + 0x38]
	0x03406BD0 LDR X0, [X24]
	0x03406BD4 STR W8, [X31 + 0x8]
	0x03406BD8 BL 0x1C16E04
	0x03406BDC MOV X21, X0
	0x03406BE0 CBZ X0, 0x3406BF8
	0x03406BE4 LDR X8, [X20]
	0x03406BE8 MOV X0, X21
	0x03406BEC LDR X1, [X8 + 0x40]
	0x03406BF0 BL 0x1C16E00
	0x03406BF4 CBZ X0, 0x3406D08
	0x03406BF8 LDR W8, [X20 + 0x18]
	0x03406BFC CMP W8, 0x2
	0x03406C00 B.LS 0x3406D04
	0x03406C04 STR X21, [X20 + 0x30]
	0x03406C08 LDR X0, [X22]
	0x03406C0C CBZ X0, 0x3406C24
	0x03406C10 LDR X8, [X20]
	0x03406C14 LDR X1, [X8 + 0x40]
	0x03406C18 BL 0x1C16E00
	0x03406C1C CBZ X0, 0x3406D08
	0x03406C20 LDR W8, [X20 + 0x18]
	0x03406C24 CMP W8, 0x3
	0x03406C28 B.LS 0x3406D04
	0x03406C2C ADRP X23, 0xD27000
	0x03406C30 ADRP X24, 0xD27000
	0x03406C34 ADRP X25, 0xD27000
	0x03406C38 LDR X23, [X23 + 0xF68]
	0x03406C3C LDR X24, [X24 + 0xF50]
	0x03406C40 LDR X25, [X25 + 0xD10]
	0x03406C44 LDR X8, [X22]
	0x03406C48 ADRP X26, 0xD27000
	0x03406C4C ADRP X27, 0xD27000
	0x03406C50 ADRP X21, 0xD27000
	0x03406C54 LDR X26, [X26 + 0xD18]
	0x03406C58 LDR X27, [X27 + 0xDE8]
	0x03406C5C LDR X21, [X21 + 0xE30]
	0x03406C60 MOV X0, X20
	0x03406C64 MOV X1, X31
	0x03406C68 STR X8, [X20 + 0x38]
	0x03406C6C BL 0x3227578
	0x03406C70 LDR X2, [X19 + 0x40]
	0x03406C74 LDR X1, [X23]
	0x03406C78 LDR X3, [X22]
	0x03406C7C MOV X4, X31
	0x03406C80 BL 0x32277C4
	0x03406C84 LDR X2, [X19 + 0x48]
	0x03406C88 LDR X1, [X24]
	0x03406C8C LDR X3, [X22]
	0x03406C90 MOV X4, X31
	0x03406C94 BL 0x32277C4
	0x03406C98 LDR X2, [X19 + 0x50]
	0x03406C9C LDR X1, [X25]
	0x03406CA0 LDR X3, [X22]
	0x03406CA4 MOV X4, X31
	0x03406CA8 BL 0x32277C4
	0x03406CAC LDR X2, [X19 + 0x58]
	0x03406CB0 LDR X1, [X26]
	0x03406CB4 LDR X3, [X22]
	0x03406CB8 MOV X4, X31
	0x03406CBC BL 0x32277C4
	0x03406CC0 LDR X2, [X19 + 0x60]
	0x03406CC4 LDR X1, [X27]
	0x03406CC8 LDR X3, [X22]
	0x03406CCC MOV X4, X31
	0x03406CD0 BL 0x32277C4
	0x03406CD4 LDR X2, [X19 + 0x68]
	0x03406CD8 LDR X1, [X21]
	0x03406CDC LDR X3, [X22]
	0x03406CE0 MOV X4, X31
	0x03406CE4 BL 0x32277C4
	0x03406CE8 LDP X20, X19, [X31 + 0x50]
	0x03406CEC LDP X22, X21, [X31 + 0x40]
	0x03406CF0 LDP X24, X23, [X31 + 0x30]
	0x03406CF4 LDP X26, X25, [X31 + 0x20]
	0x03406CF8 LDP X30, X27, [X31 + 0x10]
	0x03406CFC ADD X31, X31, 0x60
	0x03406D00 RET
	0x03406D04 BL 0x1C16F28
	0x03406D08 BL 0x1C16F44
	0x03406D0C MOV X1, X31
	0x03406D10 BL 0x1C16DEC
	0x03406D14 BL 0x1C16F20
	0x03406D18 MOV X1, X31
	0x03406D1C B 0x33BDD8C
	0x03406D20 LDR X0, [X0 + 0x10]
	0x03406D24 RET
	0x03406D28 STR X1, [X0 + 0x10]
	0x03406D2C RET
	0x03406D30 STR X30, [X31 - 0x20]!
	0x03406D34 STP X20, X19, [X31 + 0x10]
	0x03406D38 ADRP X20, 0xFD7000
	0x03406D3C LDRB W8, [X20 + 0x533]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xFD8000
	009 Move X21, 0xCEE000
	010 Move X22, 0xCEE000
	011 Move W8, [X20+1322]
	012 Move X21, [X21+2440]
	013 Move X22, [X22+2512]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {42}
	019 Move X0, 0xCEE000
	020 Move X0, [X0+1880]
	021 Call 0x1C17CF4
	022 Move X0, 0xCEE000
	023 Move X0, [X0+2512]
	024 Call 0x1C17CF4
	025 Move X0, 0xD28000
	026 Move X0, [X0+3304]
	027 Call 0x1C17CF4
	028 Move X0, 0xD28000
	029 Move X0, [X0+3312]
	030 Call 0x1C17CF4
	031 Move X0, 0xCEE000
	032 Move X0, [X0+2104]
	033 Call 0x1C17CF4
	034 Move X0, 0xD28000
	035 Move X0, [X0+3560]
	036 Call 0x1C17CF4
	037 Move X0, 0xCEE000
	038 Move X0, [X0+2440]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+1322], W8
	042 Move X0, [X22]
	043 Move X21, [X21]
	044 Move W1, 4
	045 Call 0x1C17D6C
	046 Compare X0, 0
	047 JumpIfEqual {191}
	048 Move X20, X0
	049 Compare X21, 0
	050 JumpIfEqual {57}
	051 Move X8, [X20]
	052 Move X0, X21
	053 Move X1, [X8+64]
	054 Call 0x1C17E00
	055 Compare X0, 0
	056 JumpIfEqual {188}
	057 Move W8, [X20+24]
	058 Compare W8, 0
	059 JumpIfEqual {187}
	060 Move X23, 0xD28000
	061 Move X23, [X23+3304]
	062 Move [X20+32], X21
	063 Move X0, [X23]
	064 Compare X0, 0
	065 JumpIfEqual {72}
	066 Move X8, [X20]
	067 Move X1, [X8+64]
	068 Call 0x1C17E00
	069 Compare X0, 0
	070 JumpIfEqual {188}
	071 Move W8, [X20+24]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X8, [X23]
	074 Move X9, 0xCEE000
	075 Move X9, [X9+1880]
	076 Add X1, X31, 12
	077 Move [X20+40], X8
	078 Move W8, [X19+16]
	079 Move X0, [X9]
	080 Move [X31+12], W8
	081 Call 0x1C17E04
	082 Move X21, X0
	083 Compare X0, 0
	084 JumpIfEqual {91}
	085 Move X8, [X20]
	086 Move X0, X21
	087 Move X1, [X8+64]
	088 Call 0x1C17E00
	089 Compare X0, 0
	090 JumpIfEqual {188}
	091 Move W8, [X20+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X23, 0xCEE000
	094 Move X23, [X23+2104]
	095 Move [X20+48], X21
	096 Move X0, [X23]
	097 Compare X0, 0
	098 JumpIfEqual {105}
	099 Move X8, [X20]
	100 Move X1, [X8+64]
	101 Call 0x1C17E00
	102 Compare X0, 0
	103 JumpIfEqual {188}
	104 Move W8, [X20+24]
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X8, [X23]
	107 Move X21, 0xD28000
	108 Move X21, [X21+3560]
	109 Move X0, X20
	110 Move X1, X31
	111 Move [X20+56], X8
	112 Call String.Concat, X0
	113 Move X2, [X19+24]
	114 Move X1, [X21]
	115 Move X3, [X23]
	116 Move X4, X31
	117 Call String.Concat, X0, X1, X2, X3
	118 Move X8, [X22]
	119 Move X21, X0
	120 Move W1, 4
	121 Move X0, X8
	122 Call 0x1C17D6C
	123 Compare X0, 0
	124 JumpIfEqual {191}
	125 Move X20, X0
	126 Compare X21, 0
	127 JumpIfEqual {134}
	128 Move X8, [X20]
	129 Move X0, X21
	130 Move X1, [X8+64]
	131 Call 0x1C17E00
	132 Compare X0, 0
	133 JumpIfEqual {188}
	134 Move W8, [X20+24]
	135 Compare W8, 0
	136 JumpIfEqual {187}
	137 Move X22, 0xD28000
	138 Move X22, [X22+3312]
	139 Move [X20+32], X21
	140 Move X0, [X22]
	141 Compare X0, 0
	142 JumpIfEqual {149}
	143 Move X8, [X20]
	144 Move X1, [X8+64]
	145 Call 0x1C17E00
	146 Compare X0, 0
	147 JumpIfEqual {188}
	148 Move W8, [X20+24]
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Move X9, [X22]
	151 Move [X20+40], X9
	152 Move X19, [X19+32]
	153 Compare X19, 0
	154 JumpIfEqual {162}
	155 Move X8, [X20]
	156 Move X0, X19
	157 Move X1, [X8+64]
	158 Call 0x1C17E00
	159 Compare X0, 0
	160 JumpIfEqual {188}
	161 Move W8, [X20+24]
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move [X20+48], X19
	164 Move X0, [X23]
	165 Compare X0, 0
	166 JumpIfEqual {173}
	167 Move X8, [X20]
	168 Move X1, [X8+64]
	169 Call 0x1C17E00
	170 Compare X0, 0
	171 JumpIfEqual {188}
	172 Move W8, [X20+24]
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Move X8, [X23]
	175 Move X0, X20
	176 Move X1, X31
	177 Move [X20+56], X8
	178 Call String.Concat, X0
	179 Move X20, [X31+48]
	180 Move X19, [X31+56]
	181 Move X22, [X31+32]
	182 Move X21, [X31+40]
	183 Move X30, [X31+16]
	184 Move X23, [X31+24]
	185 Add X31, X31, 64
	186 Return X0
	187 Call 0x1C17F28
	188 Call 0x1C17F44
	189 Move X1, X31
	190 Call 0x1C17DEC
	191 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03406D40 MOV X19, X0
	0x03406D44 TBNZ X8, 0x0, 0x3406D68

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

