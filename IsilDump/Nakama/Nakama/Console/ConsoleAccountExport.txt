Type: Nakama.Console.ConsoleAccountExport

Method: Nakama.Console.INakamaapiAccount get_Account()

Disassembly:
	0x034A0608 BL 0x1C16CF4
	0x034A060C MOVZ W8, 0x1

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: Nakama.Console.NakamaapiAccount get__account()

Disassembly:
	0x034A0610 STRB W8, [X24 + 0x9C6]
	0x034A0614 LDR X2, [X19 + 0x10]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set__account(Nakama.Console.NakamaapiAccount value)

Disassembly:
	0x034A0618 LDR X0, [X22]
	0x034A061C LDR X1, [X23]

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Collections.Generic.IEnumerable`1<Nakama.Console.IApiFriend> get_Friends()

Disassembly:
	0x034A0620 LDR X3, [X20]
	0x034A0624 MOV X4, X31
	0x034A0628 BL 0x32277C4
	0x034A062C LDR X2, [X19 + 0x18]
	0x034A0630 LDR X1, [X21]
	0x034A0634 LDR X3, [X20]
	0x034A0638 LDP X20, X19, [X31 + 0x30]
	0x034A063C LDP X22, X21, [X31 + 0x20]
	0x034A0640 LDP X24, X23, [X31 + 0x10]
	0x034A0644 MOV X4, X31
	0x034A0648 LDR X30, [X31], #0x40
	0x034A064C B 0x32277C4
	0x034A0650 MOV X1, X31
	0x034A0654 B 0x33BDD8C
	0x034A0658 LDR W0, [X0 + 0x10]
	0x034A065C RET
	0x034A0660 STR W1, [X0 + 0x10]
	0x034A0664 RET
	0x034A0668 STR X30, [X31 - 0x20]!
	0x034A066C STP X20, X19, [X31 + 0x10]
	0x034A0670 ADRP X20, 0xF3D000
	0x034A0674 LDRB W8, [X20 + 0x9C7]
	0x034A0678 MOV X19, X0
	0x034A067C TBNZ X8, 0x0, 0x34A06A0
	0x034A0680 ADRP X0, 0xC91000
	0x034A0684 LDR X0, [X0 + 0xBE0]
	0x034A0688 BL 0x1C16CF4
	0x034A068C ADRP X0, 0xC91000
	0x034A0690 LDR X0, [X0 + 0xBE8]
	0x034A0694 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xF3E000
	005 Move W8, [X20+2486]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xC92000
	012 Move X0, [X0+2736]
	013 Call 0x1C17CF4
	014 Move X0, 0xC92000
	015 Move X0, [X0+2744]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2486], W8
	019 Move X19, [X19+24]
	020 Compare X19, 0
	021 JumpIfNotEqual {32}
	022 Move X8, 0xC92000
	023 Move X8, [X8+2744]
	024 Move X0, [X8]
	025 Call 0x1C17F10
	026 Move X8, 0xC92000
	027 Move X8, [X8+2736]
	028 Move W1, W31
	029 Move X19, X0
	030 Move X2, [X8]
	031 Call List`1<Object>..ctor, X0, X1
	032 Move X0, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Collections.Generic.List`1<Nakama.Console.ApiFriend> get__friends()

Disassembly:
	0x034A0698 MOVZ W8, 0x1
	0x034A069C STRB W8, [X20 + 0x9C7]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set__friends(System.Collections.Generic.List`1<Nakama.Console.ApiFriend> value)

Disassembly:
	0x034A06A0 LDR X19, [X19 + 0x18]
	0x034A06A4 CBNZ X19, 0x34A06D0

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.Collections.Generic.IEnumerable`1<Nakama.Console.IApiGroup> get_Groups()

Disassembly:
	0x034A06A8 ADRP X8, 0xC91000
	0x034A06AC LDR X8, [X8 + 0xBE8]
	0x034A06B0 LDR X0, [X8]
	0x034A06B4 BL 0x1C16F10
	0x034A06B8 ADRP X8, 0xC91000
	0x034A06BC LDR X8, [X8 + 0xBE0]
	0x034A06C0 MOV W1, W31
	0x034A06C4 MOV X19, X0
	0x034A06C8 LDR X2, [X8]
	0x034A06CC BL 0x301B830
	0x034A06D0 MOV X0, X19
	0x034A06D4 LDP X20, X19, [X31 + 0x10]
	0x034A06D8 LDR X30, [X31], #0x20
	0x034A06DC RET
	0x034A06E0 LDR X0, [X0 + 0x18]
	0x034A06E4 RET
	0x034A06E8 STR X1, [X0 + 0x18]
	0x034A06EC RET
	0x034A06F0 STR X30, [X31 - 0x40]!
	0x034A06F4 STP X24, X23, [X31 + 0x10]
	0x034A06F8 STP X22, X21, [X31 + 0x20]
	0x034A06FC STP X20, X19, [X31 + 0x30]
	0x034A0700 ADRP X20, 0xF3D000
	0x034A0704 ADRP X21, 0xC53000
	0x034A0708 ADRP X22, 0xC53000
	0x034A070C LDRB W8, [X20 + 0x9C8]
	0x034A0710 LDR X21, [X21 + 0x988]
	0x034A0714 LDR X22, [X22 + 0x9D0]
	0x034A0718 MOV X19, X0
	0x034A071C TBNZ X8, 0x0, 0x34A0788

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xF3E000
	005 Move W8, [X20+2487]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xC92000
	012 Move X0, [X0+2784]
	013 Call 0x1C17CF4
	014 Move X0, 0xC92000
	015 Move X0, [X0+2792]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2487], W8
	019 Move X19, [X19+32]
	020 Compare X19, 0
	021 JumpIfNotEqual {32}
	022 Move X8, 0xC92000
	023 Move X8, [X8+2792]
	024 Move X0, [X8]
	025 Call 0x1C17F10
	026 Move X8, 0xC92000
	027 Move X8, [X8+2784]
	028 Move W1, W31
	029 Move X19, X0
	030 Move X2, [X8]
	031 Call List`1<Object>..ctor, X0, X1
	032 Move X0, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Collections.Generic.List`1<Nakama.Console.ApiGroup> get__groups()

Disassembly:
	0x034A0720 ADRP X0, 0xC53000
	0x034A0724 LDR X0, [X0 + 0x758]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set__groups(System.Collections.Generic.List`1<Nakama.Console.ApiGroup> value)

Disassembly:
	0x034A0728 BL 0x1C16CF4
	0x034A072C ADRP X0, 0xC53000

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.Collections.Generic.IEnumerable`1<Nakama.Console.IApiLeaderboardRecord> get_LeaderboardRecords()

Disassembly:
	0x034A0730 LDR X0, [X0 + 0x9D0]
	0x034A0734 BL 0x1C16CF4
	0x034A0738 ADRP X0, 0xC91000
	0x034A073C LDR X0, [X0 + 0xBF0]
	0x034A0740 BL 0x1C16CF4
	0x034A0744 ADRP X0, 0xC53000
	0x034A0748 LDR X0, [X0 + 0x838]
	0x034A074C BL 0x1C16CF4
	0x034A0750 ADRP X0, 0xC8E000
	0x034A0754 LDR X0, [X0 + 0x1E8]
	0x034A0758 BL 0x1C16CF4
	0x034A075C ADRP X0, 0xC8D000
	0x034A0760 LDR X0, [X0 + 0xD50]
	0x034A0764 BL 0x1C16CF4
	0x034A0768 ADRP X0, 0xC53000
	0x034A076C LDR X0, [X0 + 0x988]
	0x034A0770 BL 0x1C16CF4
	0x034A0774 ADRP X0, 0xC91000
	0x034A0778 LDR X0, [X0 + 0xBD0]
	0x034A077C BL 0x1C16CF4
	0x034A0780 MOVZ W8, 0x1
	0x034A0784 STRB W8, [X20 + 0x9C8]
	0x034A0788 LDR X0, [X22]
	0x034A078C LDR X21, [X21]
	0x034A0790 MOVZ W1, 0x4
	0x034A0794 BL 0x1C16D6C
	0x034A0798 CBZ X0, 0x34A08F4
	0x034A079C MOV X20, X0
	0x034A07A0 CBZ X21, 0x34A07B8
	0x034A07A4 LDR X8, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xF3E000
	005 Move W8, [X20+2488]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xC92000
	012 Move X0, [X0+2800]
	013 Call 0x1C17CF4
	014 Move X0, 0xC92000
	015 Move X0, [X0+2808]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2488], W8
	019 Move X19, [X19+40]
	020 Compare X19, 0
	021 JumpIfNotEqual {32}
	022 Move X8, 0xC92000
	023 Move X8, [X8+2808]
	024 Move X0, [X8]
	025 Call 0x1C17F10
	026 Move X8, 0xC92000
	027 Move X8, [X8+2800]
	028 Move W1, W31
	029 Move X19, X0
	030 Move X2, [X8]
	031 Call List`1<Object>..ctor, X0, X1
	032 Move X0, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Collections.Generic.List`1<Nakama.Console.ApiLeaderboardRecord> get__leaderboardRecords()

Disassembly:
	0x034A07A8 MOV X0, X21
	0x034A07AC LDR X1, [X8 + 0x40]

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set__leaderboardRecords(System.Collections.Generic.List`1<Nakama.Console.ApiLeaderboardRecord> value)

Disassembly:
	0x034A07B0 BL 0x1C16E00
	0x034A07B4 CBZ X0, 0x34A08E8

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.Collections.Generic.IEnumerable`1<Nakama.Console.IApiChannelMessage> get_Messages()

Disassembly:
	0x034A07B8 LDR W8, [X20 + 0x18]
	0x034A07BC CBZ W8, 0x34A08E4
	0x034A07C0 ADRP X22, 0xC91000
	0x034A07C4 LDR X22, [X22 + 0xBD0]
	0x034A07C8 STR X21, [X20 + 0x20]
	0x034A07CC LDR X0, [X22]
	0x034A07D0 CBZ X0, 0x34A07E8
	0x034A07D4 LDR X8, [X20]
	0x034A07D8 LDR X1, [X8 + 0x40]
	0x034A07DC BL 0x1C16E00
	0x034A07E0 CBZ X0, 0x34A08E8
	0x034A07E4 LDR W8, [X20 + 0x18]
	0x034A07E8 CMP W8, 0x1
	0x034A07EC B.LS 0x34A08E4
	0x034A07F0 LDR X8, [X22]
	0x034A07F4 ADRP X9, 0xC53000
	0x034A07F8 LDR X9, [X9 + 0x758]
	0x034A07FC ADD X1, X31, 0xC
	0x034A0800 STR X8, [X20 + 0x28]
	0x034A0804 LDR W8, [X19 + 0x10]
	0x034A0808 LDR X0, [X9]
	0x034A080C STR W8, [X31 + 0xC]
	0x034A0810 BL 0x1C16E04
	0x034A0814 MOV X21, X0
	0x034A0818 CBZ X0, 0x34A0830
	0x034A081C LDR X8, [X20]
	0x034A0820 MOV X0, X21
	0x034A0824 LDR X1, [X8 + 0x40]
	0x034A0828 BL 0x1C16E00
	0x034A082C CBZ X0, 0x34A08E8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xF3E000
	005 Move W8, [X20+2489]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xC92000
	012 Move X0, [X0+2816]
	013 Call 0x1C17CF4
	014 Move X0, 0xC92000
	015 Move X0, [X0+2824]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2489], W8
	019 Move X19, [X19+48]
	020 Compare X19, 0
	021 JumpIfNotEqual {32}
	022 Move X8, 0xC92000
	023 Move X8, [X8+2824]
	024 Move X0, [X8]
	025 Call 0x1C17F10
	026 Move X8, 0xC92000
	027 Move X8, [X8+2816]
	028 Move W1, W31
	029 Move X19, X0
	030 Move X2, [X8]
	031 Call List`1<Object>..ctor, X0, X1
	032 Move X0, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Collections.Generic.List`1<Nakama.Console.ApiChannelMessage> get__messages()

Disassembly:
	0x034A0830 LDR W8, [X20 + 0x18]
	0x034A0834 CMP W8, 0x2

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set__messages(System.Collections.Generic.List`1<Nakama.Console.ApiChannelMessage> value)

Disassembly:
	0x034A0838 B.LS 0x34A08E4
	0x034A083C ADRP X22, 0xC53000

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.Collections.Generic.IEnumerable`1<Nakama.Console.IApiNotification> get_Notifications()

Disassembly:
	0x034A0840 LDR X22, [X22 + 0x838]
	0x034A0844 STR X21, [X20 + 0x30]
	0x034A0848 LDR X0, [X22]
	0x034A084C CBZ X0, 0x34A0864
	0x034A0850 LDR X8, [X20]
	0x034A0854 LDR X1, [X8 + 0x40]
	0x034A0858 BL 0x1C16E00
	0x034A085C CBZ X0, 0x34A08E8
	0x034A0860 LDR W8, [X20 + 0x18]
	0x034A0864 CMP W8, 0x3
	0x034A0868 B.LS 0x34A08E4
	0x034A086C LDR X8, [X22]
	0x034A0870 ADRP X21, 0xC91000
	0x034A0874 ADRP X23, 0xC8E000
	0x034A0878 ADRP X24, 0xC8D000
	0x034A087C LDR X21, [X21 + 0xBF0]
	0x034A0880 LDR X23, [X23 + 0x1E8]
	0x034A0884 LDR X24, [X24 + 0xD50]
	0x034A0888 MOV X0, X20
	0x034A088C MOV X1, X31
	0x034A0890 STR X8, [X20 + 0x38]
	0x034A0894 BL 0x3227578
	0x034A0898 MOV X20, X0
	0x034A089C MOV X0, X19
	0x034A08A0 BL 0x34A0668
	0x034A08A4 LDR X8, [X22]
	0x034A08A8 LDR X2, [X21]
	0x034A08AC MOV X1, X0
	0x034A08B0 MOV X0, X8
	0x034A08B4 BL 0x226B7E8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xF3E000
	005 Move W8, [X20+2490]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xC92000
	012 Move X0, [X0+2832]
	013 Call 0x1C17CF4
	014 Move X0, 0xC92000
	015 Move X0, [X0+2840]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2490], W8
	019 Move X19, [X19+56]
	020 Compare X19, 0
	021 JumpIfNotEqual {32}
	022 Move X8, 0xC92000
	023 Move X8, [X8+2840]
	024 Move X0, [X8]
	025 Call 0x1C17F10
	026 Move X8, 0xC92000
	027 Move X8, [X8+2832]
	028 Move W1, W31
	029 Move X19, X0
	030 Move X2, [X8]
	031 Call List`1<Object>..ctor, X0, X1
	032 Move X0, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Collections.Generic.List`1<Nakama.Console.ApiNotification> get__notifications()

Disassembly:
	0x034A08B8 LDR X1, [X23]
	0x034A08BC LDR X3, [X24]

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set__notifications(System.Collections.Generic.List`1<Nakama.Console.ApiNotification> value)

Disassembly:
	0x034A08C0 MOV X2, X0
	0x034A08C4 MOV X0, X20

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.Collections.Generic.IEnumerable`1<Nakama.Console.IApiStorageObject> get_Objects()

Disassembly:
	0x034A08C8 MOV X4, X31
	0x034A08CC BL 0x32277C4
	0x034A08D0 LDP X20, X19, [X31 + 0x30]
	0x034A08D4 LDP X22, X21, [X31 + 0x20]
	0x034A08D8 LDP X24, X23, [X31 + 0x10]
	0x034A08DC LDR X30, [X31], #0x40
	0x034A08E0 RET
	0x034A08E4 BL 0x1C16F28
	0x034A08E8 BL 0x1C16F44
	0x034A08EC MOV X1, X31
	0x034A08F0 BL 0x1C16DEC
	0x034A08F4 BL 0x1C16F20
	0x034A08F8 MOV X1, X31
	0x034A08FC B 0x33BDD8C
	0x034A0900 LDR X0, [X0 + 0x10]
	0x034A0904 RET
	0x034A0908 STR X1, [X0 + 0x10]
	0x034A090C RET
	0x034A0910 LDR X0, [X0 + 0x18]
	0x034A0914 RET
	0x034A0918 STR X1, [X0 + 0x18]
	0x034A091C RET
	0x034A0920 LDR X0, [X0 + 0x20]
	0x034A0924 RET
	0x034A0928 STR X1, [X0 + 0x20]
	0x034A092C RET
	0x034A0930 LDR X0, [X0 + 0x28]
	0x034A0934 RET
	0x034A0938 STR X1, [X0 + 0x28]
	0x034A093C RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xF3E000
	005 Move W8, [X20+2491]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xC92000
	012 Move X0, [X0+2848]
	013 Call 0x1C17CF4
	014 Move X0, 0xC92000
	015 Move X0, [X0+2856]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2491], W8
	019 Move X19, [X19+64]
	020 Compare X19, 0
	021 JumpIfNotEqual {32}
	022 Move X8, 0xC92000
	023 Move X8, [X8+2856]
	024 Move X0, [X8]
	025 Call 0x1C17F10
	026 Move X8, 0xC92000
	027 Move X8, [X8+2848]
	028 Move W1, W31
	029 Move X19, X0
	030 Move X2, [X8]
	031 Call List`1<Object>..ctor, X0, X1
	032 Move X0, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Collections.Generic.List`1<Nakama.Console.ApiStorageObject> get__objects()

Disassembly:
	0x034A0940 LDR X0, [X0 + 0x30]
	0x034A0944 RET

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set__objects(System.Collections.Generic.List`1<Nakama.Console.ApiStorageObject> value)

Disassembly:
	0x034A0948 STR X1, [X0 + 0x30]
	0x034A094C RET

ISIL:
	001 Move [X0+64], X1
	002 Return 

Method: System.Collections.Generic.IEnumerable`1<Nakama.Console.IConsoleWalletLedger> get_WalletLedgers()

Disassembly:
	0x034A0950 LDR X0, [X0 + 0x38]
	0x034A0954 RET
	0x034A0958 STR X1, [X0 + 0x38]
	0x034A095C RET
	0x034A0960 STR X30, [X31 - 0x60]!
	0x034A0964 STP X28, X27, [X31 + 0x10]
	0x034A0968 STP X26, X25, [X31 + 0x20]
	0x034A096C STP X24, X23, [X31 + 0x30]
	0x034A0970 STP X22, X21, [X31 + 0x40]
	0x034A0974 STP X20, X19, [X31 + 0x50]
	0x034A0978 ADRP X28, 0xF3D000
	0x034A097C ADRP X26, 0xC53000
	0x034A0980 ADRP X27, 0xC91000
	0x034A0984 ADRP X20, 0xC53000
	0x034A0988 ADRP X25, 0xC8D000
	0x034A098C ADRP X24, 0xC8D000
	0x034A0990 ADRP X23, 0xC8D000
	0x034A0994 ADRP X22, 0xC8D000
	0x034A0998 ADRP X21, 0xC8E000
	0x034A099C LDR X26, [X26 + 0x988]
	0x034A09A0 LDR X27, [X27 + 0xBF8]
	0x034A09A4 LDR X20, [X20 + 0x838]
	0x034A09A8 LDRB W8, [X28 + 0x9C9]
	0x034A09AC LDR X25, [X25 + 0xDE0]
	0x034A09B0 LDR X24, [X24 + 0xD88]
	0x034A09B4 LDR X23, [X23 + 0xD00]
	0x034A09B8 LDR X22, [X22 + 0xDE8]
	0x034A09BC LDR X21, [X21 + 0x30]
	0x034A09C0 MOV X19, X0
	0x034A09C4 TBNZ X8, 0x0, 0x34A0A30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xF3E000
	005 Move W8, [X20+2492]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xC92000
	012 Move X0, [X0+2864]
	013 Call 0x1C17CF4
	014 Move X0, 0xC92000
	015 Move X0, [X0+2872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2492], W8
	019 Move X19, [X19+72]
	020 Compare X19, 0
	021 JumpIfNotEqual {32}
	022 Move X8, 0xC92000
	023 Move X8, [X8+2872]
	024 Move X0, [X8]
	025 Call 0x1C17F10
	026 Move X8, 0xC92000
	027 Move X8, [X8+2864]
	028 Move W1, W31
	029 Move X19, X0
	030 Move X2, [X8]
	031 Call List`1<Object>..ctor, X0, X1
	032 Move X0, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Collections.Generic.List`1<Nakama.Console.ConsoleWalletLedger> get__walletLedgers()

Disassembly:
	0x034A09C8 ADRP X0, 0xC8D000
	0x034A09CC LDR X0, [X0 + 0xD88]

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Void set__walletLedgers(System.Collections.Generic.List`1<Nakama.Console.ConsoleWalletLedger> value)

Disassembly:
	0x034A09D0 BL 0x1C16CF4
	0x034A09D4 ADRP X0, 0xC91000

ISIL:
	001 Move [X0+72], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x034A09D8 LDR X0, [X0 + 0xBF8]
	0x034A09DC BL 0x1C16CF4
	0x034A09E0 ADRP X0, 0xC8D000
	0x034A09E4 LDR X0, [X0 + 0xDE0]
	0x034A09E8 BL 0x1C16CF4
	0x034A09EC ADRP X0, 0xC53000
	0x034A09F0 LDR X0, [X0 + 0x838]
	0x034A09F4 BL 0x1C16CF4
	0x034A09F8 ADRP X0, 0xC8D000
	0x034A09FC LDR X0, [X0 + 0xD00]
	0x034A0A00 BL 0x1C16CF4
	0x034A0A04 ADRP X0, 0xC8D000
	0x034A0A08 LDR X0, [X0 + 0xDE8]
	0x034A0A0C BL 0x1C16CF4
	0x034A0A10 ADRP X0, 0xC8E000
	0x034A0A14 LDR X0, [X0 + 0x30]
	0x034A0A18 BL 0x1C16CF4
	0x034A0A1C ADRP X0, 0xC53000
	0x034A0A20 LDR X0, [X0 + 0x988]
	0x034A0A24 BL 0x1C16CF4
	0x034A0A28 MOVZ W8, 0x1
	0x034A0A2C STRB W8, [X28 + 0x9C9]
	0x034A0A30 LDR X2, [X19 + 0x10]
	0x034A0A34 LDR X0, [X26]
	0x034A0A38 LDR X1, [X27]
	0x034A0A3C LDR X3, [X20]
	0x034A0A40 MOV X4, X31
	0x034A0A44 BL 0x32277C4
	0x034A0A48 LDR X2, [X19 + 0x18]
	0x034A0A4C LDR X1, [X25]
	0x034A0A50 LDR X3, [X20]
	0x034A0A54 MOV X4, X31
	0x034A0A58 BL 0x32277C4
	0x034A0A5C LDR X2, [X19 + 0x20]
	0x034A0A60 LDR X1, [X24]
	0x034A0A64 LDR X3, [X20]
	0x034A0A68 MOV X4, X31
	0x034A0A6C BL 0x32277C4
	0x034A0A70 LDR X2, [X19 + 0x28]
	0x034A0A74 LDR X1, [X23]
	0x034A0A78 LDR X3, [X20]
	0x034A0A7C MOV X4, X31
	0x034A0A80 BL 0x32277C4
	0x034A0A84 LDR X2, [X19 + 0x30]
	0x034A0A88 LDR X1, [X22]
	0x034A0A8C LDR X3, [X20]
	0x034A0A90 MOV X4, X31
	0x034A0A94 BL 0x32277C4
	0x034A0A98 LDR X2, [X19 + 0x38]
	0x034A0A9C LDR X1, [X21]
	0x034A0AA0 LDR X3, [X20]
	0x034A0AA4 LDP X20, X19, [X31 + 0x50]
	0x034A0AA8 LDP X22, X21, [X31 + 0x40]
	0x034A0AAC LDP X24, X23, [X31 + 0x30]
	0x034A0AB0 LDP X26, X25, [X31 + 0x20]
	0x034A0AB4 LDP X28, X27, [X31 + 0x10]
	0x034A0AB8 MOV X4, X31
	0x034A0ABC LDR X30, [X31], #0x60
	0x034A0AC0 B 0x32277C4
	0x034A0AC4 MOV X1, X31
	0x034A0AC8 B 0x33BDD8C
	0x034A0ACC STR X30, [X31 - 0x20]!
	0x034A0AD0 STP X20, X19, [X31 + 0x10]
	0x034A0AD4 ADRP X20, 0xF3D000
	0x034A0AD8 LDRB W8, [X20 + 0x9CA]
	0x034A0ADC MOV X19, X0
	0x034A0AE0 TBNZ X8, 0x0, 0x34A0B04
	0x034A0AE4 ADRP X0, 0xC91000
	0x034A0AE8 LDR X0, [X0 + 0xB30]
	0x034A0AEC BL 0x1C16CF4
	0x034A0AF0 ADRP X0, 0xC91000
	0x034A0AF4 LDR X0, [X0 + 0xB38]
	0x034A0AF8 BL 0x1C16CF4
	0x034A0AFC MOVZ W8, 0x1
	0x034A0B00 STRB W8, [X20 + 0x9CA]
	0x034A0B04 LDR X19, [X19 + 0x10]
	0x034A0B08 CBNZ X19, 0x34A0B34
	0x034A0B0C ADRP X8, 0xC91000
	0x034A0B10 LDR X8, [X8 + 0xB38]
	0x034A0B14 LDR X0, [X8]
	0x034A0B18 BL 0x1C16F10
	0x034A0B1C ADRP X8, 0xC91000
	0x034A0B20 LDR X8, [X8 + 0xB30]
	0x034A0B24 MOV W1, W31
	0x034A0B28 MOV X19, X0
	0x034A0B2C LDR X2, [X8]
	0x034A0B30 BL 0x301B830
	0x034A0B34 MOV X0, X19
	0x034A0B38 LDP X20, X19, [X31 + 0x10]
	0x034A0B3C LDR X30, [X31], #0x20
	0x034A0B40 RET
	0x034A0B44 LDR X0, [X0 + 0x10]
	0x034A0B48 RET
	0x034A0B4C STR X1, [X0 + 0x10]
	0x034A0B50 RET
	0x034A0B54 STP X30, X25, [X31 - 0x40]!
	0x034A0B58 STP X24, X23, [X31 + 0x10]
	0x034A0B5C STP X22, X21, [X31 + 0x20]
	0x034A0B60 STP X20, X19, [X31 + 0x30]
	0x034A0B64 ADRP X25, 0xF3D000
	0x034A0B68 ADRP X23, 0xC53000
	0x034A0B6C ADRP X24, 0xC91000
	0x034A0B70 ADRP X20, 0xC53000
	0x034A0B74 ADRP X21, 0xC91000
	0x034A0B78 ADRP X22, 0xC8D000
	0x034A0B7C LDRB W8, [X25 + 0x9CB]
	0x034A0B80 LDR X23, [X23 + 0x838]
	0x034A0B84 LDR X24, [X24 + 0xB68]
	0x034A0B88 LDR X20, [X20 + 0x988]
	0x034A0B8C LDR X21, [X21 + 0xC00]
	0x034A0B90 LDR X22, [X22 + 0xD50]
	0x034A0B94 MOV X19, X0
	0x034A0B98 TBNZ X8, 0x0, 0x34A0BE0
	0x034A0B9C ADRP X0, 0xC91000
	0x034A0BA0 LDR X0, [X0 + 0xB68]
	0x034A0BA4 BL 0x1C16CF4
	0x034A0BA8 ADRP X0, 0xC53000
	0x034A0BAC LDR X0, [X0 + 0x838]
	0x034A0BB0 BL 0x1C16CF4
	0x034A0BB4 ADRP X0, 0xC8D000
	0x034A0BB8 LDR X0, [X0 + 0xD50]
	0x034A0BBC BL 0x1C16CF4
	0x034A0BC0 ADRP X0, 0xC91000
	0x034A0BC4 LDR X0, [X0 + 0xC00]
	0x034A0BC8 BL 0x1C16CF4
	0x034A0BCC ADRP X0, 0xC53000
	0x034A0BD0 LDR X0, [X0 + 0x988]
	0x034A0BD4 BL 0x1C16CF4
	0x034A0BD8 MOVZ W8, 0x1
	0x034A0BDC STRB W8, [X25 + 0x9CB]
	0x034A0BE0 MOV X0, X19
	0x034A0BE4 BL 0x34A0ACC
	0x034A0BE8 LDR X8, [X23]
	0x034A0BEC LDR X2, [X24]
	0x034A0BF0 MOV X1, X0
	0x034A0BF4 MOV X0, X8
	0x034A0BF8 BL 0x226B7E8
	0x034A0BFC LDR X8, [X20]
	0x034A0C00 LDR X1, [X21]
	0x034A0C04 LDR X3, [X22]
	0x034A0C08 LDP X20, X19, [X31 + 0x30]
	0x034A0C0C LDP X22, X21, [X31 + 0x20]
	0x034A0C10 LDP X24, X23, [X31 + 0x10]
	0x034A0C14 MOV X2, X0
	0x034A0C18 MOV X0, X8
	0x034A0C1C MOV X4, X31
	0x034A0C20 LDP X30, X25, [X31], #0x40
	0x034A0C24 B 0x32277C4
	0x034A0C28 MOV X1, X31
	0x034A0C2C B 0x33BDD8C
	0x034A0C30 LDR X0, [X0 + 0x10]
	0x034A0C34 RET
	0x034A0C38 STR X1, [X0 + 0x10]
	0x034A0C3C RET
	0x034A0C40 LDR X0, [X0 + 0x18]
	0x034A0C44 RET
	0x034A0C48 STR X1, [X0 + 0x18]
	0x034A0C4C RET
	0x034A0C50 LDR W0, [X0 + 0x20]
	0x034A0C54 RET
	0x034A0C58 STR W1, [X0 + 0x20]
	0x034A0C5C RET
	0x034A0C60 LDR W0, [X0 + 0x24]
	0x034A0C64 RET
	0x034A0C68 STR W1, [X0 + 0x24]
	0x034A0C6C RET
	0x034A0C70 LDR X0, [X0 + 0x28]
	0x034A0C74 RET
	0x034A0C78 STR X1, [X0 + 0x28]
	0x034A0C7C RET
	0x034A0C80 LDR X0, [X0 + 0x30]
	0x034A0C84 RET
	0x034A0C88 STR X1, [X0 + 0x30]
	0x034A0C8C RET
	0x034A0C90 LDR X0, [X0 + 0x38]
	0x034A0C94 RET
	0x034A0C98 STR X1, [X0 + 0x38]
	0x034A0C9C RET
	0x034A0CA0 SUB X31, X31, 0x50
	0x034A0CA4 STP X30, X25, [X31 + 0x10]
	0x034A0CA8 STP X24, X23, [X31 + 0x20]
	0x034A0CAC STP X22, X21, [X31 + 0x30]
	0x034A0CB0 STP X20, X19, [X31 + 0x40]
	0x034A0CB4 ADRP X24, 0xF3D000
	0x034A0CB8 ADRP X25, 0xC53000
	0x034A0CBC ADRP X21, 0xC8D000
	0x034A0CC0 ADRP X22, 0xC53000
	0x034A0CC4 ADRP X20, 0xC8D000
	0x034A0CC8 ADRP X23, 0xC53000
	0x034A0CCC LDRB W8, [X24 + 0x9CC]
	0x034A0CD0 LDR X25, [X25 + 0x988]
	0x034A0CD4 LDR X21, [X21 + 0xE78]
	0x034A0CD8 LDR X22, [X22 + 0x838]
	0x034A0CDC LDR X20, [X20 + 0xE80]
	0x034A0CE0 LDR X23, [X23 + 0x9D0]
	0x034A0CE4 MOV X19, X0
	0x034A0CE8 TBNZ X8, 0x0, 0x34A0D78
	0x034A0CEC ADRP X0, 0xC53000
	0x034A0CF0 LDR X0, [X0 + 0x758]
	0x034A0CF4 BL 0x1C16CF4
	0x034A0CF8 ADRP X0, 0xC53000
	0x034A0CFC LDR X0, [X0 + 0x9D0]
	0x034A0D00 BL 0x1C16CF4
	0x034A0D04 ADRP X0, 0xC80000
	0x034A0D08 LDR X0, [X0 + 0xBB8]
	0x034A0D0C BL 0x1C16CF4
	0x034A0D10 ADRP X0, 0xC8D000
	0x034A0D14 LDR X0, [X0 + 0xE80]
	0x034A0D18 BL 0x1C16CF4
	0x034A0D1C ADRP X0, 0xC8E000
	0x034A0D20 LDR X0, [X0 + 0x70]
	0x034A0D24 BL 0x1C16CF4
	0x034A0D28 ADRP X0, 0xC53000
	0x034A0D2C LDR X0, [X0 + 0x838]
	0x034A0D30 BL 0x1C16CF4
	0x034A0D34 ADRP X0, 0xC8E000
	0x034A0D38 LDR X0, [X0 + 0x78]
	0x034A0D3C BL 0x1C16CF4
	0x034A0D40 ADRP X0, 0xC8E000
	0x034A0D44 LDR X0, [X0 + 0x30]
	0x034A0D48 BL 0x1C16CF4
	0x034A0D4C ADRP X0, 0xC8D000
	0x034A0D50 LDR X0, [X0 + 0xE88]
	0x034A0D54 BL 0x1C16CF4
	0x034A0D58 ADRP X0, 0xC53000
	0x034A0D5C LDR X0, [X0 + 0x988]
	0x034A0D60 BL 0x1C16CF4
	0x034A0D64 ADRP X0, 0xC8D000
	0x034A0D68 LDR X0, [X0 + 0xE78]
	0x034A0D6C BL 0x1C16CF4
	0x034A0D70 MOVZ W8, 0x1
	0x034A0D74 STRB W8, [X24 + 0x9CC]
	0x034A0D78 LDR X0, [X25]
	0x034A0D7C LDR X2, [X19 + 0x10]
	0x034A0D80 LDR X1, [X21]
	0x034A0D84 LDR X3, [X22]
	0x034A0D88 MOV X4, X31
	0x034A0D8C BL 0x32277C4
	0x034A0D90 LDR X2, [X19 + 0x18]
	0x034A0D94 LDR X1, [X20]
	0x034A0D98 LDR X3, [X22]
	0x034A0D9C MOV X4, X31
	0x034A0DA0 BL 0x32277C4
	0x034A0DA4 LDR X8, [X23]
	0x034A0DA8 MOV X21, X0
	0x034A0DAC MOVZ W1, 0x4
	0x034A0DB0 MOV X0, X8
	0x034A0DB4 BL 0x1C16D6C
	0x034A0DB8 CBZ X0, 0x34A1000
	0x034A0DBC MOV X20, X0
	0x034A0DC0 CBZ X21, 0x34A0DD8
	0x034A0DC4 LDR X8, [X20]
	0x034A0DC8 MOV X0, X21
	0x034A0DCC LDR X1, [X8 + 0x40]
	0x034A0DD0 BL 0x1C16E00
	0x034A0DD4 CBZ X0, 0x34A0FF4
	0x034A0DD8 LDR W8, [X20 + 0x18]
	0x034A0DDC CBZ W8, 0x34A0FF0
	0x034A0DE0 ADRP X24, 0xC8E000
	0x034A0DE4 LDR X24, [X24 + 0x78]
	0x034A0DE8 STR X21, [X20 + 0x20]
	0x034A0DEC LDR X0, [X24]
	0x034A0DF0 CBZ X0, 0x34A0E08
	0x034A0DF4 LDR X8, [X20]
	0x034A0DF8 LDR X1, [X8 + 0x40]
	0x034A0DFC BL 0x1C16E00
	0x034A0E00 CBZ X0, 0x34A0FF4

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0xF3E000
	014 Move X21, 0xC54000
	015 Move X22, 0xC54000
	016 Move W8, [X20+2493]
	017 Move X21, [X21+2440]
	018 Move X22, [X22+2512]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {83}
	024 Move X0, 0xC54000
	025 Move X0, [X0+2512]
	026 Call 0x1C17CF4
	027 Move X0, 0xC92000
	028 Move X0, [X0+2880]
	029 Call 0x1C17CF4
	030 Move X0, 0xC92000
	031 Move X0, [X0+2752]
	032 Call 0x1C17CF4
	033 Move X0, 0xC92000
	034 Move X0, [X0+2888]
	035 Call 0x1C17CF4
	036 Move X0, 0xC92000
	037 Move X0, [X0+2896]
	038 Call 0x1C17CF4
	039 Move X0, 0xC92000
	040 Move X0, [X0+2904]
	041 Call 0x1C17CF4
	042 Move X0, 0xC92000
	043 Move X0, [X0+2912]
	044 Call 0x1C17CF4
	045 Move X0, 0xC92000
	046 Move X0, [X0+2920]
	047 Call 0x1C17CF4
	048 Move X0, 0xC8E000
	049 Move X0, [X0+3672]
	050 Call 0x1C17CF4
	051 Move X0, 0xC92000
	052 Move X0, [X0+2928]
	053 Call 0x1C17CF4
	054 Move X0, 0xC8F000
	055 Move X0, [X0+40]
	056 Call 0x1C17CF4
	057 Move X0, 0xC54000
	058 Move X0, [X0+2104]
	059 Call 0x1C17CF4
	060 Move X0, 0xC92000
	061 Move X0, [X0+2936]
	062 Call 0x1C17CF4
	063 Move X0, 0xC8E000
	064 Move X0, [X0+3408]
	065 Call 0x1C17CF4
	066 Move X0, 0xC8E000
	067 Move X0, [X0+3864]
	068 Call 0x1C17CF4
	069 Move X0, 0xC8E000
	070 Move X0, [X0+4000]
	071 Call 0x1C17CF4
	072 Move X0, 0xC8E000
	073 Move X0, [X0+3816]
	074 Call 0x1C17CF4
	075 Move X0, 0xC54000
	076 Move X0, [X0+2440]
	077 Call 0x1C17CF4
	078 Move X0, 0xC8F000
	079 Move X0, [X0+184]
	080 Call 0x1C17CF4
	081 Move W8, 1
	082 Move [X20+2493], W8
	083 Move X0, [X22]
	084 Move X21, [X21]
	085 Move W1, 4
	086 Call 0x1C17D6C
	087 Compare X0, 0
	088 JumpIfEqual {290}
	089 Move X20, X0
	090 Compare X21, 0
	091 JumpIfEqual {98}
	092 Move X8, [X20]
	093 Move X0, X21
	094 Move X1, [X8+64]
	095 Call 0x1C17E00
	096 Compare X0, 0
	097 JumpIfEqual {287}
	098 Move W8, [X20+24]
	099 Compare W8, 0
	100 JumpIfEqual {286}
	101 Move X22, 0xC8E000
	102 Move X22, [X22+4000]
	103 Move [X20+32], X21
	104 Move X0, [X22]
	105 Compare X0, 0
	106 JumpIfEqual {113}
	107 Move X8, [X20]
	108 Move X1, [X8+64]
	109 Call 0x1C17E00
	110 Compare X0, 0
	111 JumpIfEqual {287}
	112 Move W8, [X20+24]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X9, [X22]
	115 Move [X20+40], X9
	116 Move X21, [X19+16]
	117 Compare X21, 0
	118 JumpIfEqual {126}
	119 Move X8, [X20]
	120 Move X0, X21
	121 Move X1, [X8+64]
	122 Call 0x1C17E00
	123 Compare X0, 0
	124 JumpIfEqual {287}
	125 Move W8, [X20+24]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move X22, 0xC54000
	128 Move X22, [X22+2104]
	129 Move [X20+48], X21
	130 Move X0, [X22]
	131 Compare X0, 0
	132 JumpIfEqual {139}
	133 Move X8, [X20]
	134 Move X1, [X8+64]
	135 Call 0x1C17E00
	136 Compare X0, 0
	137 JumpIfEqual {287}
	138 Move W8, [X20+24]
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move X26, 0xC92000
	141 Move X27, 0xC8E000
	142 Move X21, 0xC8E000
	143 Move X28, 0xC92000
	144 Move X29, 0xC8E000
	145 Move X25, 0xC92000
	146 Move X24, 0xC92000
	147 Move X23, 0xC92000
	148 Move X26, [X26+2752]
	149 Move X27, [X27+3816]
	150 Move X21, [X21+3408]
	151 Move X28, [X28+2888]
	152 Move X29, [X29+3864]
	153 Move X25, [X25+2896]
	154 Move X24, [X24+2928]
	155 Move X23, [X23+2880]
	156 Move X8, [X22]
	157 Move X0, X20
	158 Move X1, X31
	159 Move [X20+56], X8
	160 Call String.Concat, X0
	161 Move X20, X0
	162 Move X0, X19
	163 Call ConsoleAccountExport.get_Friends, X0
	164 Move X8, [X22]
	165 Move X2, [X26]
	166 Move X1, X0
	167 Move X0, X8
	168 Call String.Join, X0, X1
	169 Move X1, [X27]
	170 Move X3, [X21]
	171 Move X2, X0
	172 Move X0, X20
	173 Move X4, X31
	174 Call String.Concat, X0, X1, X2, X3
	175 Move X20, X0
	176 Move X0, X19
	177 Call ConsoleAccountExport.get_Groups, X0
	178 Move X8, [X22]
	179 Move X2, [X28]
	180 Move X1, X0
	181 Move X0, X8
	182 Call String.Join, X0, X1
	183 Move X1, [X29]
	184 Move X3, [X21]
	185 Move X2, X0
	186 Move X0, X20
	187 Move X4, X31
	188 Call String.Concat, X0, X1, X2, X3
	189 Move X20, X0
	190 Move X0, X19
	191 Call ConsoleAccountExport.get_LeaderboardRecords, X0
	192 Move X8, [X22]
	193 Move X2, [X25]
	194 Move X1, X0
	195 Move X0, X8
	196 Call String.Join, X0, X1
	197 Move X1, [X24]
	198 Move X3, [X21]
	199 Move X2, X0
	200 Move X0, X20
	201 Move X4, X31
	202 Call String.Concat, X0, X1, X2, X3
	203 Move X20, X0
	204 Move X0, X19
	205 Call ConsoleAccountExport.get_Messages, X0
	206 Move X8, [X22]
	207 Move X2, [X23]
	208 Move X1, X0
	209 Move X0, X8
	210 Call String.Join, X0, X1
	211 Move X8, 0xC8E000
	212 Move X8, [X8+3672]
	213 Move X3, [X21]
	214 Move X2, X0
	215 Move X0, X20
	216 Move X1, [X8]
	217 Move X4, X31
	218 Call String.Concat, X0, X1, X2, X3
	219 Move X20, X0
	220 Move X0, X19
	221 Call ConsoleAccountExport.get_Notifications, X0
	222 Move X9, 0xC92000
	223 Move X8, [X22]
	224 Move X9, [X9+2904]
	225 Move X1, X0
	226 Move X0, X8
	227 Move X2, [X9]
	228 Call String.Join, X0, X1
	229 Move X8, 0xC8F000
	230 Move X8, [X8+40]
	231 Move X3, [X21]
	232 Move X2, X0
	233 Move X0, X20
	234 Move X1, [X8]
	235 Move X4, X31
	236 Call String.Concat, X0, X1, X2, X3
	237 Move X20, X0
	238 Move X0, X19
	239 Call ConsoleAccountExport.get_Objects, X0
	240 Move X9, 0xC92000
	241 Move X8, [X22]
	242 Move X9, [X9+2912]
	243 Move X1, X0
	244 Move X0, X8
	245 Move X2, [X9]
	246 Call String.Join, X0, X1
	247 Move X8, 0xC8F000
	248 Move X8, [X8+184]
	249 Move X3, [X21]
	250 Move X2, X0
	251 Move X0, X20
	252 Move X1, [X8]
	253 Move X4, X31
	254 Call String.Concat, X0, X1, X2, X3
	255 Move X20, X0
	256 Move X0, X19
	257 Call ConsoleAccountExport.get_WalletLedgers, X0
	258 Move X9, 0xC92000
	259 Move X8, [X22]
	260 Move X9, [X9+2920]
	261 Move X1, X0
	262 Move X0, X8
	263 Move X2, [X9]
	264 Call String.Join, X0, X1
	265 Move X8, 0xC92000
	266 Move X8, [X8+2936]
	267 Move X3, [X21]
	268 Move X2, X0
	269 Move X0, X20
	270 Move X1, [X8]
	271 Move X20, [X31+80]
	272 Move X19, [X31+88]
	273 Move X22, [X31+64]
	274 Move X21, [X31+72]
	275 Move X24, [X31+48]
	276 Move X23, [X31+56]
	277 Move X26, [X31+32]
	278 Move X25, [X31+40]
	279 Move X28, [X31+16]
	280 Move X27, [X31+24]
	281 Move X4, X31
	282 Move X29, [X31+96]
	283 Move X30, [X31+104]
	284 Call String.Concat, X0, X1, X2, X3
	285 Return X0
	286 Call 0x1C17F28
	287 Call 0x1C17F44
	288 Move X1, X31
	289 Call 0x1C17DEC
	290 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x034A0E04 LDR W8, [X20 + 0x18]
	0x034A0E08 CMP W8, 0x1

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

