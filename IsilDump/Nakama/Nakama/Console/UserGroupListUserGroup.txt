Type: Nakama.Console.UserGroupListUserGroup

Method: Nakama.Console.IApiGroup get_Group()

Disassembly:
	0x0349D824 STP X20, X19, [X31 + 0x10]
	0x0349D828 ADRP X20, 0xF40000

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: Nakama.Console.ApiGroup get__group()

Disassembly:
	0x0349D82C LDRB W8, [X20 + 0x9AC]
	0x0349D830 MOV X19, X0

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set__group(Nakama.Console.ApiGroup value)

Disassembly:
	0x0349D834 TBNZ X8, 0x0, 0x349D858
	0x0349D838 ADRP X0, 0xC94000

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Int32 get_State()

Disassembly:
	0x0349D83C LDR X0, [X0 + 0xAB0]
	0x0349D840 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_State(System.Int32 value)

Disassembly:
	0x0349D844 ADRP X0, 0xC94000
	0x0349D848 LDR X0, [X0 + 0xAB8]

ISIL:
	001 Move [X0+24], W1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x0349D84C BL 0x1C16CF4
	0x0349D850 MOVZ W8, 0x1
	0x0349D854 STRB W8, [X20 + 0x9AC]
	0x0349D858 LDR X19, [X19 + 0x18]
	0x0349D85C CBNZ X19, 0x349D888
	0x0349D860 ADRP X8, 0xC94000
	0x0349D864 LDR X8, [X8 + 0xAB8]
	0x0349D868 LDR X0, [X8]
	0x0349D86C BL 0x1C16F10
	0x0349D870 ADRP X8, 0xC94000
	0x0349D874 LDR X8, [X8 + 0xAB0]
	0x0349D878 MOV W1, W31
	0x0349D87C MOV X19, X0
	0x0349D880 LDR X2, [X8]
	0x0349D884 BL 0x301B830
	0x0349D888 MOV X0, X19
	0x0349D88C LDP X20, X19, [X31 + 0x10]
	0x0349D890 LDR X30, [X31], #0x20
	0x0349D894 RET
	0x0349D898 LDR X0, [X0 + 0x18]
	0x0349D89C RET
	0x0349D8A0 STR X1, [X0 + 0x18]
	0x0349D8A4 RET
	0x0349D8A8 STR X30, [X31 - 0x50]!
	0x0349D8AC STP X26, X25, [X31 + 0x10]
	0x0349D8B0 STP X24, X23, [X31 + 0x20]
	0x0349D8B4 STP X22, X21, [X31 + 0x30]
	0x0349D8B8 STP X20, X19, [X31 + 0x40]
	0x0349D8BC ADRP X26, 0xF40000
	0x0349D8C0 ADRP X20, 0xC56000
	0x0349D8C4 ADRP X25, 0xC90000
	0x0349D8C8 ADRP X23, 0xC56000
	0x0349D8CC ADRP X24, 0xC94000
	0x0349D8D0 ADRP X21, 0xC90000
	0x0349D8D4 ADRP X22, 0xC90000
	0x0349D8D8 LDR X20, [X20 + 0x988]
	0x0349D8DC LDRB W8, [X26 + 0x9AD]
	0x0349D8E0 LDR X25, [X25 + 0xED8]
	0x0349D8E4 LDR X23, [X23 + 0x838]
	0x0349D8E8 LDR X24, [X24 + 0xAC0]
	0x0349D8EC LDR X21, [X21 + 0xEE8]
	0x0349D8F0 LDR X22, [X22 + 0xD50]
	0x0349D8F4 MOV X19, X0
	0x0349D8F8 TBNZ X8, 0x0, 0x349D94C
	0x0349D8FC ADRP X0, 0xC94000
	0x0349D900 LDR X0, [X0 + 0xAC0]
	0x0349D904 BL 0x1C16CF4
	0x0349D908 ADRP X0, 0xC56000
	0x0349D90C LDR X0, [X0 + 0x838]
	0x0349D910 BL 0x1C16CF4
	0x0349D914 ADRP X0, 0xC90000
	0x0349D918 LDR X0, [X0 + 0xD50]
	0x0349D91C BL 0x1C16CF4
	0x0349D920 ADRP X0, 0xC90000
	0x0349D924 LDR X0, [X0 + 0xEE8]
	0x0349D928 BL 0x1C16CF4
	0x0349D92C ADRP X0, 0xC90000
	0x0349D930 LDR X0, [X0 + 0xED8]
	0x0349D934 BL 0x1C16CF4
	0x0349D938 ADRP X0, 0xC56000
	0x0349D93C LDR X0, [X0 + 0x988]
	0x0349D940 BL 0x1C16CF4
	0x0349D944 MOVZ W8, 0x1
	0x0349D948 STRB W8, [X26 + 0x9AD]
	0x0349D94C LDR X2, [X19 + 0x10]
	0x0349D950 LDR X0, [X20]
	0x0349D954 LDR X1, [X25]
	0x0349D958 LDR X3, [X23]
	0x0349D95C MOV X4, X31
	0x0349D960 BL 0x32277C4
	0x0349D964 MOV X20, X0
	0x0349D968 MOV X0, X19
	0x0349D96C BL 0x349D820
	0x0349D970 LDR X8, [X23]
	0x0349D974 LDR X2, [X24]
	0x0349D978 MOV X1, X0
	0x0349D97C MOV X0, X8
	0x0349D980 BL 0x226B7E8
	0x0349D984 LDR X1, [X21]
	0x0349D988 LDR X3, [X22]
	0x0349D98C MOV X2, X0
	0x0349D990 MOV X0, X20
	0x0349D994 LDP X20, X19, [X31 + 0x40]
	0x0349D998 LDP X22, X21, [X31 + 0x30]
	0x0349D99C LDP X24, X23, [X31 + 0x20]
	0x0349D9A0 LDP X26, X25, [X31 + 0x10]
	0x0349D9A4 MOV X4, X31
	0x0349D9A8 LDR X30, [X31], #0x50
	0x0349D9AC B 0x32277C4
	0x0349D9B0 MOV X1, X31
	0x0349D9B4 B 0x33BDD8C
	0x0349D9B8 LDR X0, [X0 + 0x10]
	0x0349D9BC RET
	0x0349D9C0 STR X1, [X0 + 0x10]
	0x0349D9C4 RET
	0x0349D9C8 LDR X0, [X0 + 0x18]
	0x0349D9CC RET
	0x0349D9D0 STR X1, [X0 + 0x18]
	0x0349D9D4 RET
	0x0349D9D8 LDR X0, [X0 + 0x20]
	0x0349D9DC RET
	0x0349D9E0 STR X1, [X0 + 0x20]
	0x0349D9E4 RET
	0x0349D9E8 LDR X0, [X0 + 0x28]
	0x0349D9EC RET
	0x0349D9F0 STR X1, [X0 + 0x28]
	0x0349D9F4 RET
	0x0349D9F8 LDR W0, [X0 + 0x30]
	0x0349D9FC RET
	0x0349DA00 STR W1, [X0 + 0x30]
	0x0349DA04 RET
	0x0349DA08 LDR X0, [X0 + 0x38]
	0x0349DA0C RET
	0x0349DA10 STR X1, [X0 + 0x38]
	0x0349DA14 RET
	0x0349DA18 LDR X0, [X0 + 0x40]
	0x0349DA1C RET
	0x0349DA20 STR X1, [X0 + 0x40]
	0x0349DA24 RET
	0x0349DA28 LDR W0, [X0 + 0x48]
	0x0349DA2C RET
	0x0349DA30 STR W1, [X0 + 0x48]
	0x0349DA34 RET
	0x0349DA38 LDR X0, [X0 + 0x50]
	0x0349DA3C RET
	0x0349DA40 STR X1, [X0 + 0x50]
	0x0349DA44 RET
	0x0349DA48 LDR X0, [X0 + 0x58]
	0x0349DA4C RET
	0x0349DA50 STR X1, [X0 + 0x58]
	0x0349DA54 RET
	0x0349DA58 LDRB W0, [X0 + 0x60]
	0x0349DA5C RET
	0x0349DA60 AND W8, W1, 0x1
	0x0349DA64 STRB W8, [X0 + 0x60]
	0x0349DA68 RET
	0x0349DA6C LDR X0, [X0 + 0x68]
	0x0349DA70 RET
	0x0349DA74 STR X1, [X0 + 0x68]
	0x0349DA78 RET
	0x0349DA7C SUB X31, X31, 0x60
	0x0349DA80 STP X30, X27, [X31 + 0x10]
	0x0349DA84 STP X26, X25, [X31 + 0x20]
	0x0349DA88 STP X24, X23, [X31 + 0x30]
	0x0349DA8C STP X22, X21, [X31 + 0x40]
	0x0349DA90 STP X20, X19, [X31 + 0x50]
	0x0349DA94 ADRP X26, 0xF40000
	0x0349DA98 ADRP X27, 0xC56000
	0x0349DA9C ADRP X25, 0xC90000
	0x0349DAA0 ADRP X22, 0xC56000
	0x0349DAA4 ADRP X24, 0xC90000
	0x0349DAA8 ADRP X21, 0xC90000
	0x0349DAAC ADRP X20, 0xC90000
	0x0349DAB0 ADRP X23, 0xC56000
	0x0349DAB4 LDR X27, [X27 + 0x988]
	0x0349DAB8 LDR X25, [X25 + 0xCC8]
	0x0349DABC LDRB W8, [X26 + 0x9AE]
	0x0349DAC0 LDR X22, [X22 + 0x838]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xF41000
	009 Move X21, 0xC57000
	010 Move X22, 0xC57000
	011 Move W8, [X20+2471]
	012 Move X21, [X21+2440]
	013 Move X22, [X22+2512]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {39}
	019 Move X0, 0xC57000
	020 Move X0, [X0+1880]
	021 Call 0x1C17CF4
	022 Move X0, 0xC57000
	023 Move X0, [X0+2512]
	024 Call 0x1C17CF4
	025 Move X0, 0xC91000
	026 Move X0, [X0+3304]
	027 Call 0x1C17CF4
	028 Move X0, 0xC91000
	029 Move X0, [X0+3320]
	030 Call 0x1C17CF4
	031 Move X0, 0xC57000
	032 Move X0, [X0+2104]
	033 Call 0x1C17CF4
	034 Move X0, 0xC57000
	035 Move X0, [X0+2440]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+2471], W8
	039 Move X0, [X22]
	040 Move X21, [X21]
	041 Move W1, 4
	042 Call 0x1C17D6C
	043 Compare X0, 0
	044 JumpIfEqual {181}
	045 Move X20, X0
	046 Compare X21, 0
	047 JumpIfEqual {54}
	048 Move X8, [X20]
	049 Move X0, X21
	050 Move X1, [X8+64]
	051 Call 0x1C17E00
	052 Compare X0, 0
	053 JumpIfEqual {178}
	054 Move W8, [X20+24]
	055 Compare W8, 0
	056 JumpIfEqual {177}
	057 Move X23, 0xC91000
	058 Move X23, [X23+3320]
	059 Move [X20+32], X21
	060 Move X0, [X23]
	061 Compare X0, 0
	062 JumpIfEqual {69}
	063 Move X8, [X20]
	064 Move X1, [X8+64]
	065 Call 0x1C17E00
	066 Compare X0, 0
	067 JumpIfEqual {178}
	068 Move W8, [X20+24]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X9, [X23]
	071 Move [X20+40], X9
	072 Move X21, [X19+16]
	073 Compare X21, 0
	074 JumpIfEqual {82}
	075 Move X8, [X20]
	076 Move X0, X21
	077 Move X1, [X8+64]
	078 Call 0x1C17E00
	079 Compare X0, 0
	080 JumpIfEqual {178}
	081 Move W8, [X20+24]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X23, 0xC57000
	084 Move X23, [X23+2104]
	085 Move [X20+48], X21
	086 Move X0, [X23]
	087 Compare X0, 0
	088 JumpIfEqual {95}
	089 Move X8, [X20]
	090 Move X1, [X8+64]
	091 Call 0x1C17E00
	092 Compare X0, 0
	093 JumpIfEqual {178}
	094 Move W8, [X20+24]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X8, [X23]
	097 Move X0, X20
	098 Move X1, X31
	099 Move [X20+56], X8
	100 Call String.Concat, X0
	101 Move X8, [X22]
	102 Move X21, X0
	103 Move W1, 4
	104 Move X0, X8
	105 Call 0x1C17D6C
	106 Compare X0, 0
	107 JumpIfEqual {181}
	108 Move X20, X0
	109 Compare X21, 0
	110 JumpIfEqual {117}
	111 Move X8, [X20]
	112 Move X0, X21
	113 Move X1, [X8+64]
	114 Call 0x1C17E00
	115 Compare X0, 0
	116 JumpIfEqual {178}
	117 Move W8, [X20+24]
	118 Compare W8, 0
	119 JumpIfEqual {177}
	120 Move X22, 0xC91000
	121 Move X22, [X22+3304]
	122 Move [X20+32], X21
	123 Move X0, [X22]
	124 Compare X0, 0
	125 JumpIfEqual {132}
	126 Move X8, [X20]
	127 Move X1, [X8+64]
	128 Call 0x1C17E00
	129 Compare X0, 0
	130 JumpIfEqual {178}
	131 Move W8, [X20+24]
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move X8, [X22]
	134 Move X9, 0xC57000
	135 Move X9, [X9+1880]
	136 Add X1, X31, 12
	137 Move [X20+40], X8
	138 Move W8, [X19+24]
	139 Move X0, [X9]
	140 Move [X31+12], W8
	141 Call 0x1C17E04
	142 Move X19, X0
	143 Compare X0, 0
	144 JumpIfEqual {151}
	145 Move X8, [X20]
	146 Move X0, X19
	147 Move X1, [X8+64]
	148 Call 0x1C17E00
	149 Compare X0, 0
	150 JumpIfEqual {178}
	151 Move W8, [X20+24]
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move [X20+48], X19
	154 Move X0, [X23]
	155 Compare X0, 0
	156 JumpIfEqual {163}
	157 Move X8, [X20]
	158 Move X1, [X8+64]
	159 Call 0x1C17E00
	160 Compare X0, 0
	161 JumpIfEqual {178}
	162 Move W8, [X20+24]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move X8, [X23]
	165 Move X0, X20
	166 Move X1, X31
	167 Move [X20+56], X8
	168 Call String.Concat, X0
	169 Move X20, [X31+48]
	170 Move X19, [X31+56]
	171 Move X22, [X31+32]
	172 Move X21, [X31+40]
	173 Move X30, [X31+16]
	174 Move X23, [X31+24]
	175 Add X31, X31, 64
	176 Return X0
	177 Call 0x1C17F28
	178 Call 0x1C17F44
	179 Move X1, X31
	180 Call 0x1C17DEC
	181 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0349DAC4 LDR X24, [X24 + 0xDE0]
	0x0349DAC8 LDR X21, [X21 + 0xEF0]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

