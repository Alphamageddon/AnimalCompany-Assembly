Type: Nakama.Console.ConsoleWriteStorageObjectRequest

Method: System.String get_Collection()

Disassembly:
	0x034A1C30 B 0x34A1C5C
	0x034A1C34 B 0x34A1C5C

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_Collection(System.String value)

Disassembly:
	0x034A1C38 B 0x34A1C5C
	0x034A1C3C B 0x34A1C5C

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.String get_Key()

Disassembly:
	0x034A1C40 B 0x34A1C5C
	0x034A1C44 B 0x34A1C5C

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_Key(System.String value)

Disassembly:
	0x034A1C48 B 0x34A1C5C
	0x034A1C4C LDR X22, [X31 + 0x8]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.Int32 get_PermissionRead()

Disassembly:
	0x034A1C50 B 0x34A1C5C
	0x034A1C54 B 0x34A1C5C

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_PermissionRead(System.Int32 value)

Disassembly:
	0x034A1C58 B 0x34A1C5C
	0x034A1C5C ADRP X20, 0xC52000

ISIL:
	001 Move [X0+32], W1
	002 Return 

Method: System.Int32 get_PermissionWrite()

Disassembly:
	0x034A1C60 LDR X20, [X20 + 0x838]
	0x034A1C64 CMP W1, 0x1

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Void set_PermissionWrite(System.Int32 value)

Disassembly:
	0x034A1C68 B.NE 0x34A1C7C
	0x034A1C6C BL 0x3EB1AD0

ISIL:
	001 Move [X0+36], W1
	002 Return 

Method: System.String get_UserId()

Disassembly:
	0x034A1C70 LDR X23, [X0]
	0x034A1C74 BL 0x3EB1AE0

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_UserId(System.String value)

Disassembly:
	0x034A1C78 B 0x34A1A38
	0x034A1C7C MOV X19, X0

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.String get_Value()

Disassembly:
	0x034A1C80 MOV X23, X31
	0x034A1C84 B 0x34A1C8C

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_Value(System.String value)

Disassembly:
	0x034A1C88 MOV X19, X0
	0x034A1C8C CBZ X21, 0x34A1CF0

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.String get_Version()

Disassembly:
	0x034A1C90 LDR X8, [X21]
	0x034A1C94 ADRP X10, 0xC52000

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_Version(System.String value)

Disassembly:
	0x034A1C98 LDRH W9, [X8 + 0x12E]
	0x034A1C9C LDR X10, [X10 + 0xE00]

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x034A1CA0 LDR X1, [X10]
	0x034A1CA4 CBZ X9, 0x34A1CC8
	0x034A1CA8 LDR X10, [X8 + 0xB0]
	0x034A1CAC ADD X10, X10, 0x8
	0x034A1CB0 LDUR X11, [X10 - 0x8]
	0x034A1CB4 CMP X11, X1
	0x034A1CB8 B.EQ 0x34A1CD8
	0x034A1CBC SUBS X9, X9, 0x1
	0x034A1CC0 ADD X10, X10, 0x10
	0x034A1CC4 B.NE 0x34A1CB0
	0x034A1CC8 MOV X0, X21
	0x034A1CCC MOV W2, W31
	0x034A1CD0 BL 0x1C5C788
	0x034A1CD4 B 0x34A1CE4
	0x034A1CD8 LDRSW X9, [X10]
	0x034A1CDC ADD X8, X8, X9, 0x4, LSL
	0x034A1CE0 ADD X0, X8, 0x138
	0x034A1CE4 LDP X8, X1, [X0]
	0x034A1CE8 MOV X0, X21
	0x034A1CEC BLR X8
	0x034A1CF0 CBNZ X23, 0x34A1CFC
	0x034A1CF4 MOV X0, X19
	0x034A1CF8 BL 0x1D2C690
	0x034A1CFC MOV X0, X23
	0x034A1D00 BL 0x1C16F18
	0x034A1D04 BL 0x1990590
	0x034A1D08 MOV X1, X31
	0x034A1D0C B 0x33BDD8C
	0x034A1D10 LDR X0, [X0 + 0x10]
	0x034A1D14 RET
	0x034A1D18 STR X1, [X0 + 0x10]
	0x034A1D1C RET
	0x034A1D20 LDR X0, [X0 + 0x18]
	0x034A1D24 RET
	0x034A1D28 STR X1, [X0 + 0x18]
	0x034A1D2C RET
	0x034A1D30 STR X30, [X31 - 0x40]!
	0x034A1D34 STP X24, X23, [X31 + 0x10]
	0x034A1D38 STP X22, X21, [X31 + 0x20]
	0x034A1D3C STP X20, X19, [X31 + 0x30]
	0x034A1D40 ADRP X24, 0xF3C000
	0x034A1D44 ADRP X22, 0xC52000
	0x034A1D48 ADRP X23, 0xC90000
	0x034A1D4C ADRP X20, 0xC52000
	0x034A1D50 ADRP X21, 0xC7F000
	0x034A1D54 LDRB W8, [X24 + 0x9D2]
	0x034A1D58 LDR X22, [X22 + 0x988]
	0x034A1D5C LDR X23, [X23 + 0xC28]
	0x034A1D60 LDR X20, [X20 + 0x838]
	0x034A1D64 LDR X21, [X21 + 0xBB8]
	0x034A1D68 MOV X19, X0
	0x034A1D6C TBNZ X8, 0x0, 0x34A1DA8
	0x034A1D70 ADRP X0, 0xC90000
	0x034A1D74 LDR X0, [X0 + 0xC28]
	0x034A1D78 BL 0x1C16CF4
	0x034A1D7C ADRP X0, 0xC7F000
	0x034A1D80 LDR X0, [X0 + 0xBB8]
	0x034A1D84 BL 0x1C16CF4
	0x034A1D88 ADRP X0, 0xC52000
	0x034A1D8C LDR X0, [X0 + 0x838]
	0x034A1D90 BL 0x1C16CF4
	0x034A1D94 ADRP X0, 0xC52000
	0x034A1D98 LDR X0, [X0 + 0x988]
	0x034A1D9C BL 0x1C16CF4
	0x034A1DA0 MOVZ W8, 0x1
	0x034A1DA4 STRB W8, [X24 + 0x9D2]
	0x034A1DA8 LDR X2, [X19 + 0x10]
	0x034A1DAC LDR X0, [X22]
	0x034A1DB0 LDR X1, [X23]
	0x034A1DB4 LDR X3, [X20]
	0x034A1DB8 MOV X4, X31
	0x034A1DBC BL 0x32277C4
	0x034A1DC0 LDR X2, [X19 + 0x18]
	0x034A1DC4 LDR X1, [X21]
	0x034A1DC8 LDR X3, [X20]
	0x034A1DCC LDP X20, X19, [X31 + 0x30]
	0x034A1DD0 LDP X22, X21, [X31 + 0x20]
	0x034A1DD4 LDP X24, X23, [X31 + 0x10]
	0x034A1DD8 MOV X4, X31
	0x034A1DDC LDR X30, [X31], #0x40
	0x034A1DE0 B 0x32277C4
	0x034A1DE4 MOV X1, X31
	0x034A1DE8 B 0x33BDD8C
	0x034A1DEC LDR W0, [X0 + 0x10]
	0x034A1DF0 RET
	0x034A1DF4 STR W1, [X0 + 0x10]
	0x034A1DF8 RET
	0x034A1DFC STR X30, [X31 - 0x20]!
	0x034A1E00 STP X20, X19, [X31 + 0x10]
	0x034A1E04 ADRP X20, 0xF3C000
	0x034A1E08 LDRB W8, [X20 + 0x9D3]
	0x034A1E0C MOV X19, X0
	0x034A1E10 TBNZ X8, 0x0, 0x34A1E34
	0x034A1E14 ADRP X0, 0xC90000
	0x034A1E18 LDR X0, [X0 + 0xC30]
	0x034A1E1C BL 0x1C16CF4
	0x034A1E20 ADRP X0, 0xC90000
	0x034A1E24 LDR X0, [X0 + 0xC38]
	0x034A1E28 BL 0x1C16CF4
	0x034A1E2C MOVZ W8, 0x1
	0x034A1E30 STRB W8, [X20 + 0x9D3]
	0x034A1E34 LDR X19, [X19 + 0x18]
	0x034A1E38 CBNZ X19, 0x34A1E64
	0x034A1E3C ADRP X8, 0xC90000
	0x034A1E40 LDR X8, [X8 + 0xC38]
	0x034A1E44 LDR X0, [X8]
	0x034A1E48 BL 0x1C16F10
	0x034A1E4C ADRP X8, 0xC90000
	0x034A1E50 LDR X8, [X8 + 0xC30]
	0x034A1E54 MOV W1, W31
	0x034A1E58 MOV X19, X0
	0x034A1E5C LDR X2, [X8]
	0x034A1E60 BL 0x301B830
	0x034A1E64 MOV X0, X19
	0x034A1E68 LDP X20, X19, [X31 + 0x10]
	0x034A1E6C LDR X30, [X31], #0x20
	0x034A1E70 RET
	0x034A1E74 LDR X0, [X0 + 0x18]
	0x034A1E78 RET
	0x034A1E7C STR X1, [X0 + 0x18]
	0x034A1E80 RET
	0x034A1E84 LDR X0, [X0 + 0x20]
	0x034A1E88 RET
	0x034A1E8C STR X1, [X0 + 0x20]
	0x034A1E90 RET
	0x034A1E94 LDR X0, [X0 + 0x28]
	0x034A1E98 RET
	0x034A1E9C STR X1, [X0 + 0x28]
	0x034A1EA0 RET
	0x034A1EA4 STR X30, [X31 - 0x50]!
	0x034A1EA8 STP X26, X25, [X31 + 0x10]
	0x034A1EAC STP X24, X23, [X31 + 0x20]
	0x034A1EB0 STP X22, X21, [X31 + 0x30]
	0x034A1EB4 STP X20, X19, [X31 + 0x40]
	0x034A1EB8 ADRP X20, 0xF3C000
	0x034A1EBC ADRP X21, 0xC52000
	0x034A1EC0 ADRP X22, 0xC52000
	0x034A1EC4 LDRB W8, [X20 + 0x9D4]
	0x034A1EC8 LDR X21, [X21 + 0x988]
	0x034A1ECC LDR X22, [X22 + 0x9D0]
	0x034A1ED0 MOV X19, X0
	0x034A1ED4 TBNZ X8, 0x0, 0x34A1F58
	0x034A1ED8 ADRP X0, 0xC52000
	0x034A1EDC LDR X0, [X0 + 0x758]
	0x034A1EE0 BL 0x1C16CF4
	0x034A1EE4 ADRP X0, 0xC52000
	0x034A1EE8 LDR X0, [X0 + 0x9D0]
	0x034A1EEC BL 0x1C16CF4
	0x034A1EF0 ADRP X0, 0xC90000
	0x034A1EF4 LDR X0, [X0 + 0xC40]
	0x034A1EF8 BL 0x1C16CF4
	0x034A1EFC ADRP X0, 0xC90000
	0x034A1F00 LDR X0, [X0 + 0xC48]
	0x034A1F04 BL 0x1C16CF4
	0x034A1F08 ADRP X0, 0xC52000
	0x034A1F0C LDR X0, [X0 + 0x838]
	0x034A1F10 BL 0x1C16CF4
	0x034A1F14 ADRP X0, 0xC8D000
	0x034A1F18 LDR X0, [X0 + 0x2D8]
	0x034A1F1C BL 0x1C16CF4
	0x034A1F20 ADRP X0, 0xC8C000
	0x034A1F24 LDR X0, [X0 + 0xD50]
	0x034A1F28 BL 0x1C16CF4
	0x034A1F2C ADRP X0, 0xC8D000
	0x034A1F30 LDR X0, [X0 + 0x2E0]
	0x034A1F34 BL 0x1C16CF4
	0x034A1F38 ADRP X0, 0xC52000
	0x034A1F3C LDR X0, [X0 + 0x988]
	0x034A1F40 BL 0x1C16CF4
	0x034A1F44 ADRP X0, 0xC8C000
	0x034A1F48 LDR X0, [X0 + 0xE20]
	0x034A1F4C BL 0x1C16CF4
	0x034A1F50 MOVZ W8, 0x1
	0x034A1F54 STRB W8, [X20 + 0x9D4]
	0x034A1F58 LDR X0, [X22]
	0x034A1F5C LDR X21, [X21]
	0x034A1F60 MOVZ W1, 0x4
	0x034A1F64 BL 0x1C16D6C
	0x034A1F68 CBZ X0, 0x34A2100
	0x034A1F6C MOV X20, X0
	0x034A1F70 CBZ X21, 0x34A1F88
	0x034A1F74 LDR X8, [X20]
	0x034A1F78 MOV X0, X21
	0x034A1F7C LDR X1, [X8 + 0x40]
	0x034A1F80 BL 0x1C16E00
	0x034A1F84 CBZ X0, 0x34A20F4
	0x034A1F88 LDR W8, [X20 + 0x18]
	0x034A1F8C CBZ W8, 0x34A20F0
	0x034A1F90 ADRP X22, 0xC8C000
	0x034A1F94 LDR X22, [X22 + 0xE20]
	0x034A1F98 STR X21, [X20 + 0x20]
	0x034A1F9C LDR X0, [X22]
	0x034A1FA0 CBZ X0, 0x34A1FB8
	0x034A1FA4 LDR X8, [X20]
	0x034A1FA8 LDR X1, [X8 + 0x40]
	0x034A1FAC BL 0x1C16E00
	0x034A1FB0 CBZ X0, 0x34A20F4
	0x034A1FB4 LDR W8, [X20 + 0x18]
	0x034A1FB8 CMP W8, 0x1
	0x034A1FBC B.LS 0x34A20F0
	0x034A1FC0 LDR X8, [X22]
	0x034A1FC4 ADRP X9, 0xC52000
	0x034A1FC8 LDR X9, [X9 + 0x758]
	0x034A1FCC ADD X1, X31, 0xC
	0x034A1FD0 STR X8, [X20 + 0x28]
	0x034A1FD4 LDR W8, [X19 + 0x10]
	0x034A1FD8 LDR X0, [X9]
	0x034A1FDC STR W8, [X31 + 0xC]
	0x034A1FE0 BL 0x1C16E04
	0x034A1FE4 MOV X21, X0
	0x034A1FE8 CBZ X0, 0x34A2000
	0x034A1FEC LDR X8, [X20]
	0x034A1FF0 MOV X0, X21
	0x034A1FF4 LDR X1, [X8 + 0x40]
	0x034A1FF8 BL 0x1C16E00
	0x034A1FFC CBZ X0, 0x34A20F4
	0x034A2000 LDR W8, [X20 + 0x18]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0xF3D000
	011 Move X25, 0xC53000
	012 Move X21, 0xC8D000
	013 Move X22, 0xC53000
	014 Move X20, 0xC8D000
	015 Move X23, 0xC53000
	016 Move W8, [X24+2508]
	017 Move X25, [X25+2440]
	018 Move X21, [X21+3704]
	019 Move X22, [X22+2104]
	020 Move X20, [X20+3712]
	021 Move X23, [X23+2512]
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {62}
	027 Move X0, 0xC53000
	028 Move X0, [X0+1880]
	029 Call 0x1C17CF4
	030 Move X0, 0xC53000
	031 Move X0, [X0+2512]
	032 Call 0x1C17CF4
	033 Move X0, 0xC80000
	034 Move X0, [X0+3000]
	035 Call 0x1C17CF4
	036 Move X0, 0xC8D000
	037 Move X0, [X0+3712]
	038 Call 0x1C17CF4
	039 Move X0, 0xC8E000
	040 Move X0, [X0+112]
	041 Call 0x1C17CF4
	042 Move X0, 0xC53000
	043 Move X0, [X0+2104]
	044 Call 0x1C17CF4
	045 Move X0, 0xC8E000
	046 Move X0, [X0+120]
	047 Call 0x1C17CF4
	048 Move X0, 0xC8E000
	049 Move X0, [X0+48]
	050 Call 0x1C17CF4
	051 Move X0, 0xC8D000
	052 Move X0, [X0+3720]
	053 Call 0x1C17CF4
	054 Move X0, 0xC53000
	055 Move X0, [X0+2440]
	056 Call 0x1C17CF4
	057 Move X0, 0xC8D000
	058 Move X0, [X0+3704]
	059 Call 0x1C17CF4
	060 Move W8, 1
	061 Move [X24+2508], W8
	062 Move X0, [X25]
	063 Move X2, [X19+16]
	064 Move X1, [X21]
	065 Move X3, [X22]
	066 Move X4, X31
	067 Call String.Concat, X0, X1, X2, X3
	068 Move X2, [X19+24]
	069 Move X1, [X20]
	070 Move X3, [X22]
	071 Move X4, X31
	072 Call String.Concat, X0, X1, X2, X3
	073 Move X8, [X23]
	074 Move X21, X0
	075 Move W1, 4
	076 Move X0, X8
	077 Call 0x1C17D6C
	078 Compare X0, 0
	079 JumpIfEqual {242}
	080 Move X20, X0
	081 Compare X21, 0
	082 JumpIfEqual {89}
	083 Move X8, [X20]
	084 Move X0, X21
	085 Move X1, [X8+64]
	086 Call 0x1C17E00
	087 Compare X0, 0
	088 JumpIfEqual {239}
	089 Move W8, [X20+24]
	090 Compare W8, 0
	091 JumpIfEqual {238}
	092 Move X24, 0xC8E000
	093 Move X24, [X24+120]
	094 Move [X20+32], X21
	095 Move X0, [X24]
	096 Compare X0, 0
	097 JumpIfEqual {104}
	098 Move X8, [X20]
	099 Move X1, [X8+64]
	100 Call 0x1C17E00
	101 Compare X0, 0
	102 JumpIfEqual {239}
	103 Move W8, [X20+24]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X8, [X24]
	106 Move X24, 0xC53000
	107 Move X24, [X24+1880]
	108 Add X1, X31, 12
	109 Move [X20+40], X8
	110 Move W8, [X19+32]
	111 Move X0, [X24]
	112 Move [X31+12], W8
	113 Call 0x1C17E04
	114 Move X21, X0
	115 Compare X0, 0
	116 JumpIfEqual {123}
	117 Move X8, [X20]
	118 Move X0, X21
	119 Move X1, [X8+64]
	120 Call 0x1C17E00
	121 Compare X0, 0
	122 JumpIfEqual {239}
	123 Move W8, [X20+24]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move [X20+48], X21
	126 Move X0, [X22]
	127 Compare X0, 0
	128 JumpIfEqual {135}
	129 Move X8, [X20]
	130 Move X1, [X8+64]
	131 Call 0x1C17E00
	132 Compare X0, 0
	133 JumpIfEqual {239}
	134 Move W8, [X20+24]
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move X8, [X22]
	137 Move X0, X20
	138 Move X1, X31
	139 Move [X20+56], X8
	140 Call String.Concat, X0
	141 Move X8, [X23]
	142 Move X21, X0
	143 Move W1, 4
	144 Move X0, X8
	145 Call 0x1C17D6C
	146 Compare X0, 0
	147 JumpIfEqual {242}
	148 Move X20, X0
	149 Compare X21, 0
	150 JumpIfEqual {157}
	151 Move X8, [X20]
	152 Move X0, X21
	153 Move X1, [X8+64]
	154 Call 0x1C17E00
	155 Compare X0, 0
	156 JumpIfEqual {239}
	157 Move W8, [X20+24]
	158 Compare W8, 0
	159 JumpIfEqual {238}
	160 Move X23, 0xC8E000
	161 Move X23, [X23+112]
	162 Move [X20+32], X21
	163 Move X0, [X23]
	164 Compare X0, 0
	165 JumpIfEqual {172}
	166 Move X8, [X20]
	167 Move X1, [X8+64]
	168 Call 0x1C17E00
	169 Compare X0, 0
	170 JumpIfEqual {239}
	171 Move W8, [X20+24]
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Move X8, [X23]
	174 Add X1, X31, 8
	175 Move [X20+40], X8
	176 Move W8, [X19+36]
	177 Move X0, [X24]
	178 Move [X31+8], W8
	179 Call 0x1C17E04
	180 Move X21, X0
	181 Compare X0, 0
	182 JumpIfEqual {189}
	183 Move X8, [X20]
	184 Move X0, X21
	185 Move X1, [X8+64]
	186 Call 0x1C17E00
	187 Compare X0, 0
	188 JumpIfEqual {239}
	189 Move W8, [X20+24]
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Move [X20+48], X21
	192 Move X0, [X22]
	193 Compare X0, 0
	194 JumpIfEqual {201}
	195 Move X8, [X20]
	196 Move X1, [X8+64]
	197 Call 0x1C17E00
	198 Compare X0, 0
	199 JumpIfEqual {239}
	200 Move W8, [X20+24]
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Move X8, [X22]
	203 Move X21, 0xC8E000
	204 Move X23, 0xC80000
	205 Move X24, 0xC8D000
	206 Move X21, [X21+48]
	207 Move X23, [X23+3000]
	208 Move X24, [X24+3720]
	209 Move X0, X20
	210 Move X1, X31
	211 Move [X20+56], X8
	212 Call String.Concat, X0
	213 Move X2, [X19+40]
	214 Move X1, [X21]
	215 Move X3, [X22]
	216 Move X4, X31
	217 Call String.Concat, X0, X1, X2, X3
	218 Move X2, [X19+48]
	219 Move X1, [X23]
	220 Move X3, [X22]
	221 Move X4, X31
	222 Call String.Concat, X0, X1, X2, X3
	223 Move X2, [X19+56]
	224 Move X1, [X24]
	225 Move X3, [X22]
	226 Move X4, X31
	227 Call String.Concat, X0, X1, X2, X3
	228 Move X20, [X31+64]
	229 Move X19, [X31+72]
	230 Move X22, [X31+48]
	231 Move X21, [X31+56]
	232 Move X24, [X31+32]
	233 Move X23, [X31+40]
	234 Move X30, [X31+16]
	235 Move X25, [X31+24]
	236 Add X31, X31, 80
	237 Return X0
	238 Call 0x1C17F28
	239 Call 0x1C17F44
	240 Move X1, X31
	241 Call 0x1C17DEC
	242 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x034A2004 CMP W8, 0x2
	0x034A2008 B.LS 0x34A20F0

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

