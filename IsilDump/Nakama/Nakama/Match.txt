Type: Nakama.Match

Method: System.Boolean get_Authoritative()

Disassembly:
	0x034748C8 BL 0x1C16F10
	0x034748CC ADRP X8, 0xCBC000

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_Authoritative(System.Boolean value)

Disassembly:
	0x034748D0 LDR X8, [X8 + 0x900]
	0x034748D4 MOV W1, W31
	0x034748D8 MOV X19, X0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.String get_Id()

Disassembly:
	0x034748DC LDR X2, [X8]
	0x034748E0 BL 0x301B830

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_Id(System.String value)

Disassembly:
	0x034748E4 MOV X0, X19
	0x034748E8 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.String get_Label()

Disassembly:
	0x034748EC LDR X30, [X31], #0x20
	0x034748F0 RET

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_Label(System.String value)

Disassembly:
	0x034748F4 LDR X0, [X0 + 0x28]
	0x034748F8 RET

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.Collections.Generic.IEnumerable`1<Nakama.IUserPresence> get_Presences()

Disassembly:
	0x034748FC STR X1, [X0 + 0x28]
	0x03474900 RET
	0x03474904 LDR X0, [X0 + 0x30]
	0x03474908 RET
	0x0347490C LDR X0, [X0 + 0x30]
	0x03474910 RET
	0x03474914 STR X1, [X0 + 0x30]
	0x03474918 RET
	0x0347491C STP X30, X23, [X31 - 0x30]!
	0x03474920 STP X22, X21, [X31 + 0x10]
	0x03474924 STP X20, X19, [X31 + 0x20]
	0x03474928 ADRP X23, 0xF69000
	0x0347492C ADRP X21, 0xC7F000
	0x03474930 ADRP X22, 0xCBC000
	0x03474934 ADRP X20, 0xC7F000
	0x03474938 LDRB W8, [X23 + 0x808]
	0x0347493C LDR X21, [X21 + 0x838]
	0x03474940 LDR X22, [X22 + 0x910]
	0x03474944 LDR X20, [X20 + 0x9D0]
	0x03474948 MOV X19, X0
	0x0347494C TBNZ X8, 0x0, 0x3474988
	0x03474950 ADRP X0, 0xC7F000
	0x03474954 LDR X0, [X0 + 0x9D0]
	0x03474958 BL 0x1C16CF4
	0x0347495C ADRP X0, 0xCBC000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xF6A000
	005 Move W8, [X20+2052]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xCBD000
	012 Move X0, [X0+2056]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2052], W8
	016 Move X0, [X19+40]
	017 Compare X0, 0
	018 JumpIfNotEqual {29}
	019 Move X19, 0xCBD000
	020 Move X19, [X19+2056]
	021 Move X0, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X19]
	027 Move X8, [X0+184]
	028 Move X0, [X8]
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0

Method: System.Collections.Generic.List`1<Nakama.UserPresence> get__presences()

Disassembly:
	0x03474960 LDR X0, [X0 + 0x910]
	0x03474964 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set__presences(System.Collections.Generic.List`1<Nakama.UserPresence> value)

Disassembly:
	0x03474968 ADRP X0, 0xCBC000
	0x0347496C LDR X0, [X0 + 0x918]

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.Int32 get_Size()

Disassembly:
	0x03474970 BL 0x1C16CF4
	0x03474974 ADRP X0, 0xC7F000

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_Size(System.Int32 value)

Disassembly:
	0x03474978 LDR X0, [X0 + 0x838]
	0x0347497C BL 0x1C16CF4

ISIL:
	001 Move [X0+48], W1
	002 Return 

Method: Nakama.IUserPresence get_Self()

Disassembly:
	0x03474980 MOVZ W8, 0x1
	0x03474984 STRB W8, [X23 + 0x808]

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: Nakama.UserPresence get__self()

Disassembly:
	0x03474988 MOV X0, X19
	0x0347498C BL 0x347487C

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set__self(Nakama.UserPresence value)

Disassembly:
	0x03474990 LDR X8, [X21]
	0x03474994 LDR X2, [X22]

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x03474998 MOV X1, X0
	0x0347499C MOV X0, X8
	0x034749A0 BL 0x226B7E8
	0x034749A4 LDR X8, [X20]
	0x034749A8 MOV X21, X0
	0x034749AC MOVZ W1, 0x5
	0x034749B0 MOV X0, X8
	0x034749B4 BL 0x1C16D6C
	0x034749B8 CBZ X0, 0x3474AC8
	0x034749BC LDR X22, [X19 + 0x10]
	0x034749C0 MOV X20, X0
	0x034749C4 CBZ X22, 0x34749DC
	0x034749C8 LDR X8, [X20]
	0x034749CC MOV X0, X22
	0x034749D0 LDR X1, [X8 + 0x40]
	0x034749D4 BL 0x1C16E00
	0x034749D8 CBZ X0, 0x3474ABC
	0x034749DC LDR W8, [X20 + 0x18]
	0x034749E0 CBZ W8, 0x3474AB8
	0x034749E4 STR X22, [X20 + 0x20]
	0x034749E8 LDR X22, [X19 + 0x18]
	0x034749EC CBZ X22, 0x3474A08
	0x034749F0 LDR X8, [X20]
	0x034749F4 MOV X0, X22
	0x034749F8 LDR X1, [X8 + 0x40]
	0x034749FC BL 0x1C16E00
	0x03474A00 CBZ X0, 0x3474ABC
	0x03474A04 LDR W8, [X20 + 0x18]
	0x03474A08 CMP W8, 0x1
	0x03474A0C B.LS 0x3474AB8
	0x03474A10 STR X22, [X20 + 0x28]
	0x03474A14 LDR X22, [X19 + 0x20]
	0x03474A18 CBZ X22, 0x3474A34
	0x03474A1C LDR X8, [X20]
	0x03474A20 MOV X0, X22
	0x03474A24 LDR X1, [X8 + 0x40]
	0x03474A28 BL 0x1C16E00
	0x03474A2C CBZ X0, 0x3474ABC
	0x03474A30 LDR W8, [X20 + 0x18]
	0x03474A34 CMP W8, 0x2
	0x03474A38 B.LS 0x3474AB8
	0x03474A3C STR X22, [X20 + 0x30]
	0x03474A40 CBZ X21, 0x3474A5C
	0x03474A44 LDR X8, [X20]
	0x03474A48 MOV X0, X21
	0x03474A4C LDR X1, [X8 + 0x40]
	0x03474A50 BL 0x1C16E00
	0x03474A54 CBZ X0, 0x3474ABC
	0x03474A58 LDR W8, [X20 + 0x18]
	0x03474A5C CMP W8, 0x3
	0x03474A60 B.LS 0x3474AB8
	0x03474A64 STR X21, [X20 + 0x38]
	0x03474A68 LDR X19, [X19 + 0x30]
	0x03474A6C CBZ X19, 0x3474A88
	0x03474A70 LDR X8, [X20]
	0x03474A74 MOV X0, X19
	0x03474A78 LDR X1, [X8 + 0x40]
	0x03474A7C BL 0x1C16E00
	0x03474A80 CBZ X0, 0x3474ABC
	0x03474A84 LDR W8, [X20 + 0x18]
	0x03474A88 CMP W8, 0x4
	0x03474A8C B.LS 0x3474AB8
	0x03474A90 ADRP X8, 0xCBC000
	0x03474A94 LDR X8, [X8 + 0x918]
	0x03474A98 STR X19, [X20 + 0x40]
	0x03474A9C MOV X1, X20
	0x03474AA0 LDP X20, X19, [X31 + 0x20]
	0x03474AA4 LDR X0, [X8]
	0x03474AA8 LDP X22, X21, [X31 + 0x10]
	0x03474AAC MOV X2, X31
	0x03474AB0 LDP X30, X23, [X31], #0x30
	0x03474AB4 B 0x3227C5C
	0x03474AB8 BL 0x1C16F28
	0x03474ABC BL 0x1C16F44
	0x03474AC0 MOV X1, X31
	0x03474AC4 BL 0x1C16DEC
	0x03474AC8 BL 0x1C16F20
	0x03474ACC MOV X1, X31
	0x03474AD0 B 0x33BDD8C
	0x03474AD4 STR X30, [X31 - 0x20]!
	0x03474AD8 STP X20, X19, [X31 + 0x10]
	0x03474ADC ADRP X20, 0xF69000
	0x03474AE0 LDRB W8, [X20 + 0x809]
	0x03474AE4 MOV X19, X0
	0x03474AE8 TBNZ X8, 0x0, 0x3474B0C
	0x03474AEC ADRP X0, 0xCBC000
	0x03474AF0 LDR X0, [X0 + 0x920]
	0x03474AF4 BL 0x1C16CF4
	0x03474AF8 ADRP X0, 0xCBC000
	0x03474AFC LDR X0, [X0 + 0x928]
	0x03474B00 BL 0x1C16CF4
	0x03474B04 MOVZ W8, 0x1
	0x03474B08 STRB W8, [X20 + 0x809]
	0x03474B0C LDR X19, [X19 + 0x10]
	0x03474B10 CBNZ X19, 0x3474B38
	0x03474B14 ADRP X8, 0xCBC000
	0x03474B18 LDR X8, [X8 + 0x928]
	0x03474B1C LDR X0, [X8]
	0x03474B20 BL 0x1C16F10
	0x03474B24 ADRP X8, 0xCBC000
	0x03474B28 LDR X8, [X8 + 0x920]
	0x03474B2C MOV X19, X0
	0x03474B30 LDR X1, [X8]
	0x03474B34 BL 0x2A9B6B8
	0x03474B38 MOV X0, X19
	0x03474B3C LDP X20, X19, [X31 + 0x10]
	0x03474B40 LDR X30, [X31], #0x20
	0x03474B44 RET
	0x03474B48 LDR X0, [X0 + 0x10]
	0x03474B4C RET
	0x03474B50 STR X1, [X0 + 0x10]
	0x03474B54 RET
	0x03474B58 LDR X0, [X0 + 0x18]
	0x03474B5C RET
	0x03474B60 LDR X0, [X0 + 0x18]
	0x03474B64 RET
	0x03474B68 STR X1, [X0 + 0x18]
	0x03474B6C RET
	0x03474B70 STR X30, [X31 - 0x20]!
	0x03474B74 STP X20, X19, [X31 + 0x10]
	0x03474B78 ADRP X20, 0xF69000
	0x03474B7C LDRB W8, [X20 + 0x80A]
	0x03474B80 MOV X19, X0
	0x03474B84 TBNZ X8, 0x0, 0x3474BA8
	0x03474B88 ADRP X0, 0xC80000
	0x03474B8C LDR X0, [X0 + 0x6C0]
	0x03474B90 BL 0x1C16CF4
	0x03474B94 ADRP X0, 0xC80000
	0x03474B98 LDR X0, [X0 + 0x6D0]
	0x03474B9C BL 0x1C16CF4
	0x03474BA0 MOVZ W8, 0x1
	0x03474BA4 STRB W8, [X20 + 0x80A]
	0x03474BA8 LDR X19, [X19 + 0x20]
	0x03474BAC CBNZ X19, 0x3474BD4
	0x03474BB0 ADRP X8, 0xC80000
	0x03474BB4 LDR X8, [X8 + 0x6D0]
	0x03474BB8 LDR X0, [X8]
	0x03474BBC BL 0x1C16F10
	0x03474BC0 ADRP X8, 0xC80000
	0x03474BC4 LDR X8, [X8 + 0x6C0]
	0x03474BC8 MOV X19, X0
	0x03474BCC LDR X1, [X8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xF6A000
	009 Move X21, 0xC80000
	010 Move X23, 0xCBD000
	011 Move X20, 0xC80000
	012 Move X22, 0xC80000
	013 Move W8, [X24+2053]
	014 Move X21, [X21+2104]
	015 Move X23, [X23+2072]
	016 Move X20, [X20+2512]
	017 Move X22, [X22+2904]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {43}
	023 Move X0, 0xC80000
	024 Move X0, [X0+2904]
	025 Call 0x1C17CF4
	026 Move X0, 0xC80000
	027 Move X0, [X0+1880]
	028 Call 0x1C17CF4
	029 Move X0, 0xC80000
	030 Move X0, [X0+2512]
	031 Call 0x1C17CF4
	032 Move X0, 0xCBD000
	033 Move X0, [X0+2072]
	034 Call 0x1C17CF4
	035 Move X0, 0xC80000
	036 Move X0, [X0+2104]
	037 Call 0x1C17CF4
	038 Move X0, 0xCBD000
	039 Move X0, [X0+2168]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X24+2053], W8
	043 Move X0, X19
	044 Call Match.get_Presences, X0
	045 Move X8, [X21]
	046 Move X2, [X23]
	047 Move X1, X0
	048 Move X0, X8
	049 Call String.Join, X0, X1
	050 Move X8, [X20]
	051 Move X21, X0
	052 Move W1, 6
	053 Move X0, X8
	054 Call 0x1C17D6C
	055 Move X20, X0
	056 Move W8, [X19+16]
	057 Move X0, [X22]
	058 Add X1, X31, 12
	059 Move [X31+12], W8
	060 Call 0x1C17E04
	061 Compare X20, 0
	062 JumpIfEqual {160}
	063 Move X22, X0
	064 Compare X0, 0
	065 JumpIfEqual {72}
	066 Move X8, [X20]
	067 Move X0, X22
	068 Move X1, [X8+64]
	069 Call 0x1C17E00
	070 Compare X0, 0
	071 JumpIfEqual {157}
	072 Move W8, [X20+24]
	073 Compare W8, 0
	074 JumpIfEqual {156}
	075 Move [X20+32], X22
	076 Move X22, [X19+24]
	077 Compare X22, 0
	078 JumpIfEqual {86}
	079 Move X8, [X20]
	080 Move X0, X22
	081 Move X1, [X8+64]
	082 Call 0x1C17E00
	083 Compare X0, 0
	084 JumpIfEqual {157}
	085 Move W8, [X20+24]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move [X20+40], X22
	088 Move X22, [X19+32]
	089 Compare X22, 0
	090 JumpIfEqual {98}
	091 Move X8, [X20]
	092 Move X0, X22
	093 Move X1, [X8+64]
	094 Call 0x1C17E00
	095 Compare X0, 0
	096 JumpIfEqual {157}
	097 Move W8, [X20+24]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move [X20+48], X22
	100 Compare X21, 0
	101 JumpIfEqual {109}
	102 Move X8, [X20]
	103 Move X0, X21
	104 Move X1, [X8+64]
	105 Call 0x1C17E00
	106 Compare X0, 0
	107 JumpIfEqual {157}
	108 Move W8, [X20+24]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move X8, 0xC80000
	111 Move X8, [X8+1880]
	112 Move [X20+56], X21
	113 Move W9, [X19+48]
	114 Add X1, X31, 8
	115 Move X0, [X8]
	116 Move [X31+8], W9
	117 Call 0x1C17E04
	118 Move X21, X0
	119 Compare X0, 0
	120 JumpIfEqual {127}
	121 Move X8, [X20]
	122 Move X0, X21
	123 Move X1, [X8+64]
	124 Call 0x1C17E00
	125 Compare X0, 0
	126 JumpIfEqual {157}
	127 Move W8, [X20+24]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move [X20+64], X21
	130 Move X19, [X19+56]
	131 Compare X19, 0
	132 JumpIfEqual {140}
	133 Move X8, [X20]
	134 Move X0, X19
	135 Move X1, [X8+64]
	136 Call 0x1C17E00
	137 Compare X0, 0
	138 JumpIfEqual {157}
	139 Move W8, [X20+24]
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X8, 0xCBD000
	142 Move X8, [X8+2168]
	143 Move [X20+72], X19
	144 Move X1, X20
	145 Move X2, X31
	146 Move X0, [X8]
	147 Call String.Format, X0, X1
	148 Move X20, [X31+48]
	149 Move X19, [X31+56]
	150 Move X22, [X31+32]
	151 Move X21, [X31+40]
	152 Move X24, [X31+16]
	153 Move X23, [X31+24]
	154 Move X30, [X31+64]
	155 Return X0
	156 Call 0x1C17F28
	157 Call 0x1C17F44
	158 Move X1, X31
	159 Call 0x1C17DEC
	160 Call 0x1C17F20

Method: System.Void UpdatePresences(Nakama.IMatchPresenceEvent presenceEvent)

Disassembly:
	0x03474BD0 BL 0x2AA4804
	0x03474BD4 MOV X0, X19
	0x03474BD8 LDP X20, X19, [X31 + 0x10]
	0x03474BDC LDR X30, [X31], #0x20
	0x03474BE0 RET
	0x03474BE4 LDR X0, [X0 + 0x20]
	0x03474BE8 RET
	0x03474BEC STR X1, [X0 + 0x20]
	0x03474BF0 RET
	0x03474BF4 STR X30, [X31 - 0x30]!
	0x03474BF8 STP X22, X21, [X31 + 0x10]
	0x03474BFC STP X20, X19, [X31 + 0x20]
	0x03474C00 ADRP X20, 0xF69000
	0x03474C04 ADRP X22, 0xCBC000
	0x03474C08 LDRB W8, [X20 + 0x80B]
	0x03474C0C LDR X22, [X22 + 0x930]
	0x03474C10 MOV X19, X0
	0x03474C14 TBNZ X8, 0x0, 0x3474C2C
	0x03474C18 ADRP X0, 0xCBC000
	0x03474C1C LDR X0, [X0 + 0x930]
	0x03474C20 BL 0x1C16CF4
	0x03474C24 MOVZ W8, 0x1
	0x03474C28 STRB W8, [X20 + 0x80B]
	0x03474C2C MOV X0, X19
	0x03474C30 BL 0x3474AD4
	0x03474C34 LDR X20, [X19 + 0x18]
	0x03474C38 MOV X21, X0
	0x03474C3C MOV X0, X19
	0x03474C40 BL 0x3474B70
	0x03474C44 LDR X8, [X22]
	0x03474C48 MOV X1, X21
	0x03474C4C MOV X2, X20
	0x03474C50 LDP X20, X19, [X31 + 0x20]
	0x03474C54 LDP X22, X21, [X31 + 0x10]
	0x03474C58 MOV X3, X0
	0x03474C5C MOV X0, X8
	0x03474C60 MOV X4, X31
	0x03474C64 LDR X30, [X31], #0x30
	0x03474C68 B 0x3227C18
	0x03474C6C MOV X1, X31
	0x03474C70 B 0x33BDD8C
	0x03474C74 LDR X0, [X0 + 0x10]
	0x03474C78 RET
	0x03474C7C STR X1, [X0 + 0x10]
	0x03474C80 RET
	0x03474C84 STR X30, [X31 - 0x30]!
	0x03474C88 STP X22, X21, [X31 + 0x10]
	0x03474C8C STP X20, X19, [X31 + 0x20]
	0x03474C90 ADRP X22, 0xF69000
	0x03474C94 ADRP X20, 0xCBC000
	0x03474C98 ADRP X21, 0xCBB000
	0x03474C9C LDRB W8, [X22 + 0x80C]
	0x03474CA0 LDR X20, [X20 + 0x938]
	0x03474CA4 LDR X21, [X21 + 0x5B8]
	0x03474CA8 MOV X19, X0
	0x03474CAC TBNZ X8, 0x0, 0x3474CD0
	0x03474CB0 ADRP X0, 0xCBB000
	0x03474CB4 LDR X0, [X0 + 0x5B8]
	0x03474CB8 BL 0x1C16CF4
	0x03474CBC ADRP X0, 0xCBC000
	0x03474CC0 LDR X0, [X0 + 0x938]
	0x03474CC4 BL 0x1C16CF4
	0x03474CC8 MOVZ W8, 0x1
	0x03474CCC STRB W8, [X22 + 0x80C]
	0x03474CD0 LDR X1, [X19 + 0x10]
	0x03474CD4 LDR X0, [X20]
	0x03474CD8 LDR X2, [X21]
	0x03474CDC LDP X20, X19, [X31 + 0x20]
	0x03474CE0 LDP X22, X21, [X31 + 0x10]
	0x03474CE4 MOV X3, X31
	0x03474CE8 LDR X30, [X31], #0x30
	0x03474CEC B 0x32274B8
	0x03474CF0 MOV X1, X31
	0x03474CF4 B 0x33BDD8C
	0x03474CF8 STR X30, [X31 - 0x20]!
	0x03474CFC STP X20, X19, [X31 + 0x10]
	0x03474D00 ADRP X20, 0xF69000
	0x03474D04 LDRB W8, [X20 + 0x80D]
	0x03474D08 MOV X19, X0
	0x03474D0C TBNZ X8, 0x0, 0x3474D24
	0x03474D10 ADRP X0, 0xCBC000
	0x03474D14 LDR X0, [X0 + 0x808]
	0x03474D18 BL 0x1C16CF4
	0x03474D1C MOVZ W8, 0x1
	0x03474D20 STRB W8, [X20 + 0x80D]
	0x03474D24 LDR X0, [X19 + 0x10]
	0x03474D28 CBNZ X0, 0x3474D50
	0x03474D2C ADRP X19, 0xCBC000
	0x03474D30 LDR X19, [X19 + 0x808]
	0x03474D34 LDR X0, [X19]
	0x03474D38 LDR W8, [X0 + 0xE0]
	0x03474D3C CBNZ W8, 0x3474D48
	0x03474D40 BL 0x1C16DFC
	0x03474D44 LDR X0, [X19]
	0x03474D48 LDR X8, [X0 + 0xB8]
	0x03474D4C LDR X0, [X8]
	0x03474D50 LDP X20, X19, [X31 + 0x10]
	0x03474D54 LDR X30, [X31], #0x20
	0x03474D58 RET
	0x03474D5C LDR X0, [X0 + 0x10]
	0x03474D60 RET
	0x03474D64 STR X1, [X0 + 0x10]
	0x03474D68 RET
	0x03474D6C STR X30, [X31 - 0x20]!
	0x03474D70 STP X20, X19, [X31 + 0x10]
	0x03474D74 ADRP X20, 0xF69000
	0x03474D78 LDRB W8, [X20 + 0x80E]
	0x03474D7C MOV X19, X0
	0x03474D80 TBNZ X8, 0x0, 0x3474D98
	0x03474D84 ADRP X0, 0xCBC000
	0x03474D88 LDR X0, [X0 + 0x808]
	0x03474D8C BL 0x1C16CF4
	0x03474D90 MOVZ W8, 0x1
	0x03474D94 STRB W8, [X20 + 0x80E]
	0x03474D98 LDR X0, [X19 + 0x18]
	0x03474D9C CBNZ X0, 0x3474DC4
	0x03474DA0 ADRP X19, 0xCBC000
	0x03474DA4 LDR X19, [X19 + 0x808]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xF6A000
	007 Move W8, [X21+2054]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xCBD000
	015 Move X0, [X0+2176]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2054], W8
	019 Compare X20, 0
	020 JumpIfEqual {108}
	021 Move X22, 0xCBD000
	022 Move X8, [X20]
	023 Move X22, [X22+2176]
	024 NotImplemented "Instruction LDRH not yet implemented."
	025 Move X1, [X22]
	026 Compare X9, 0
	027 JumpIfEqual {34}
	028 Move X10, [X8+176]
	029 Add X10, X10, 8
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Subtract X9, X9, 1
	033 Add X10, X10, 16
	034 Move W2, 2
	035 Move X0, X20
	036 Call 0x1C5D788
	037 Move W9, [X10]
	038 Add W9, W9, 2
	039 Add X8, X8, W9
	040 Add X0, X8, 312
	041 Move X8, [X0]
	042 Move X1, [X0+8]
	043 Move X0, X20
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move X1, [X19+24]
	046 Move X2, X31
	047 Call String.op_Inequality, X0, X1
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {109}
	052 Move X8, [X20]
	053 Move X21, [X19+40]
	054 Move X1, [X22]
	055 NotImplemented "Instruction LDRH not yet implemented."
	056 Compare X9, 0
	057 JumpIfEqual {64}
	058 Move X10, [X8+176]
	059 Add X10, X10, 8
	060 NotImplemented "Instruction LDUR not yet implemented."
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Subtract X9, X9, 1
	063 Add X10, X10, 16
	064 Move X0, X20
	065 Move W2, W31
	066 Call 0x1C5D788
	067 NotImplemented "Instruction LDRSW not yet implemented."
	068 Add X8, X8, X9
	069 Add X0, X8, 312
	070 Move X8, [X0]
	071 Move X1, [X0+8]
	072 Move X0, X20
	073 NotImplemented "Instruction BLR not yet implemented."
	074 Move X8, [X20]
	075 Move X1, [X22]
	076 Move X22, X0
	077 NotImplemented "Instruction LDRH not yet implemented."
	078 Compare X9, 0
	079 JumpIfEqual {86}
	080 Move X10, [X8+176]
	081 Add X10, X10, 8
	082 NotImplemented "Instruction LDUR not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Subtract X9, X9, 1
	085 Add X10, X10, 16
	086 Move W2, 1
	087 Move X0, X20
	088 Call 0x1C5D788
	089 Move W9, [X10]
	090 Add W9, W9, 1
	091 Add X8, X8, W9
	092 Add X0, X8, 312
	093 Move X8, [X0]
	094 Move X1, [X0+8]
	095 Move X0, X20
	096 NotImplemented "Instruction BLR not yet implemented."
	097 Move X2, X0
	098 Move X0, X21
	099 Move X1, X22
	100 Call PresenceUtil.CopyJoinsAndLeaves, X0, X1, X2
	101 Move [X19+40], X0
	102 Move X20, [X31+32]
	103 Move X19, [X31+40]
	104 Move X22, [X31+16]
	105 Move X21, [X31+24]
	106 Move X30, [X31+48]
	107 Return 
	108 Call 0x1C17F20
	109 Move X0, 0xC80000
	110 Move X0, [X0+1456]
	111 Call 0x1C17D08
	112 Call 0x1C17F10
	113 Move X19, X0
	114 Move X0, 0xCBD000
	115 Move X0, [X0+2184]
	116 Call 0x1C17D08
	117 Move X1, X0
	118 Move X0, X19
	119 Move X2, X31
	120 Call InvalidOperationException..ctor, X0, X1
	121 Move X0, 0xCBD000
	122 Move X0, [X0+2192]
	123 Call 0x1C17D08
	124 Move X1, X0
	125 Move X0, X19
	126 Call 0x1C17DEC

Method: System.Void .ctor()

Disassembly:
	0x03475844 ADRP X20, 0xCBB000
	0x03475848 LDRB W8, [X21 + 0x81C]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

