Type: Nakama.RpcStatus

Method: System.Int32 get_Code()

Disassembly:
	0x0340E83C LDR X29, [X29 + 0x370]
	0x0340E840 LDR X28, [X28 + 0x338]

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_Code(System.Int32 value)

Disassembly:
	0x0340E844 CBNZ W8, 0x340E84C
	0x0340E848 BL 0x1C16DFC

ISIL:
	001 Move [X0+16], W1
	002 Return 

Method: System.Collections.Generic.IEnumerable`1<Nakama.IProtobufAny> get_Details()

Disassembly:
	0x0340E84C LDR X0, [X27]
	0x0340E850 ADD X8, X31, 0x0
	0x0340E854 ORR X27, X8, 0xF
	0x0340E858 MOV X8, X27
	0x0340E85C BL 0x263221C
	0x0340E860 LDR X2, [X29]
	0x0340E864 MOVN W8, 0x0
	0x0340E868 ADD X1, X31, 0x0
	0x0340E86C MOV X0, X27
	0x0340E870 STP X26, X25, [X31 + 0x40]
	0x0340E874 STR X23, [X31 + 0x20]
	0x0340E878 STRH W22, [X31 + 0x28]
	0x0340E87C STP X21, X24, [X31 + 0x30]
	0x0340E880 STP X20, X19, [X31 + 0x50]
	0x0340E884 STR W8, [X31]
	0x0340E888 BL 0x1FC8C14
	0x0340E88C LDR X1, [X28]
	0x0340E890 MOV X0, X27
	0x0340E894 BL 0x2632230
	0x0340E898 LDP X20, X19, [X31 + 0xC0]
	0x0340E89C LDP X22, X21, [X31 + 0xB0]
	0x0340E8A0 LDP X24, X23, [X31 + 0xA0]
	0x0340E8A4 LDP X26, X25, [X31 + 0x90]
	0x0340E8A8 LDP X28, X27, [X31 + 0x80]
	0x0340E8AC LDP X29, X30, [X31 + 0x70]
	0x0340E8B0 ADD X31, X31, 0xD0
	0x0340E8B4 RET
	0x0340E8B8 SUB X31, X31, 0xD0
	0x0340E8BC STP X29, X30, [X31 + 0x70]
	0x0340E8C0 STP X28, X27, [X31 + 0x80]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xFD0000
	005 Move W8, [X20+1387]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xD21000
	012 Move X0, [X0+704]
	013 Call 0x1C17CF4
	014 Move X0, 0xD21000
	015 Move X0, [X0+712]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1387], W8
	019 Move X19, [X19+24]
	020 Compare X19, 0
	021 JumpIfNotEqual {32}
	022 Move X8, 0xD21000
	023 Move X8, [X8+712]
	024 Move X0, [X8]
	025 Call 0x1C17F10
	026 Move X8, 0xD21000
	027 Move X8, [X8+704]
	028 Move W1, W31
	029 Move X19, X0
	030 Move X2, [X8]
	031 Call List`1<Object>..ctor, X0, X1
	032 Move X0, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Collections.Generic.List`1<Nakama.ProtobufAny> get__details()

Disassembly:
	0x0340E8C4 STP X26, X25, [X31 + 0x90]
	0x0340E8C8 STP X24, X23, [X31 + 0xA0]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set__details(System.Collections.Generic.List`1<Nakama.ProtobufAny> value)

Disassembly:
	0x0340E8CC STP X22, X21, [X31 + 0xB0]
	0x0340E8D0 STP X20, X19, [X31 + 0xC0]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.String get_Message()

Disassembly:
	0x0340E8D4 ADRP X27, 0xFCF000
	0x0340E8D8 ADRP X26, 0xD20000

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_Message(System.String value)

Disassembly:
	0x0340E8DC LDRB W8, [X27 + 0x579]
	0x0340E8E0 LDR X26, [X26 + 0x320]

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x0340E8E4 MOV X19, X6
	0x0340E8E8 MOV X20, X5
	0x0340E8EC MOV X22, X4
	0x0340E8F0 MOV X23, X3
	0x0340E8F4 MOV X21, X2
	0x0340E8F8 MOV X24, X1
	0x0340E8FC MOV X25, X0
	0x0340E900 TBNZ X8, 0x0, 0x340E93C
	0x0340E904 ADRP X0, 0xD20000
	0x0340E908 LDR X0, [X0 + 0x328]
	0x0340E90C BL 0x1C16CF4
	0x0340E910 ADRP X0, 0xD20000
	0x0340E914 LDR X0, [X0 + 0x378]
	0x0340E918 BL 0x1C16CF4
	0x0340E91C ADRP X0, 0xD20000
	0x0340E920 LDR X0, [X0 + 0x338]
	0x0340E924 BL 0x1C16CF4
	0x0340E928 ADRP X0, 0xD20000
	0x0340E92C LDR X0, [X0 + 0x320]
	0x0340E930 BL 0x1C16CF4
	0x0340E934 MOVZ W8, 0x1
	0x0340E938 STRB W8, [X27 + 0x579]
	0x0340E93C LDR X0, [X26]
	0x0340E940 MOVI V0.2D, 0x0
	0x0340E944 STP V0, V0, [X31 + 0x50]
	0x0340E948 STP V0, V0, [X31 + 0x30]
	0x0340E94C STP V0, V0, [X31 + 0x10]
	0x0340E950 STR V0, [X31]
	0x0340E954 ADRP X26, 0xD20000
	0x0340E958 ADRP X29, 0xD20000
	0x0340E95C LDR W8, [X0 + 0xE0]
	0x0340E960 LDP X27, X28, [X31 + 0xD0]
	0x0340E964 LDR X26, [X26 + 0x328]
	0x0340E968 LDR X29, [X29 + 0x378]
	0x0340E96C CBNZ W8, 0x340E974
	0x0340E970 BL 0x1C16DFC
	0x0340E974 LDR X0, [X26]
	0x0340E978 ADD X8, X31, 0x0
	0x0340E97C ORR X26, X8, 0xF
	0x0340E980 MOV X8, X26
	0x0340E984 BL 0x263221C
	0x0340E988 LDR X2, [X29]
	0x0340E98C MOVN W8, 0x0
	0x0340E990 ADD X1, X31, 0x0
	0x0340E994 MOV X0, X26
	0x0340E998 STP X25, X24, [X31 + 0x40]
	0x0340E99C STR X23, [X31 + 0x20]
	0x0340E9A0 STRH W22, [X31 + 0x28]
	0x0340E9A4 STR X20, [X31 + 0x30]
	0x0340E9A8 STRH W19, [X31 + 0x38]
	0x0340E9AC STP X21, X27, [X31 + 0x50]
	0x0340E9B0 STR X28, [X31 + 0x60]
	0x0340E9B4 STR W8, [X31]
	0x0340E9B8 BL 0x1FC8D14
	0x0340E9BC ADRP X8, 0xD20000
	0x0340E9C0 LDR X8, [X8 + 0x338]
	0x0340E9C4 MOV X0, X26
	0x0340E9C8 LDR X1, [X8]
	0x0340E9CC BL 0x2632230
	0x0340E9D0 LDP X20, X19, [X31 + 0xC0]
	0x0340E9D4 LDP X22, X21, [X31 + 0xB0]
	0x0340E9D8 LDP X24, X23, [X31 + 0xA0]
	0x0340E9DC LDP X26, X25, [X31 + 0x90]
	0x0340E9E0 LDP X28, X27, [X31 + 0x80]
	0x0340E9E4 LDP X29, X30, [X31 + 0x70]
	0x0340E9E8 ADD X31, X31, 0xD0
	0x0340E9EC RET
	0x0340E9F0 SUB X31, X31, 0xB0
	0x0340E9F4 STP X30, X25, [X31 + 0x70]
	0x0340E9F8 STP X24, X23, [X31 + 0x80]
	0x0340E9FC STP X22, X21, [X31 + 0x90]
	0x0340EA00 STP X20, X19, [X31 + 0xA0]
	0x0340EA04 ADRP X25, 0xFCF000
	0x0340EA08 ADRP X24, 0xCE8000
	0x0340EA0C LDRB W8, [X25 + 0x57A]
	0x0340EA10 LDR X24, [X24 + 0x280]
	0x0340EA14 MOV X20, X4
	0x0340EA18 MOV X21, X3
	0x0340EA1C MOV X19, X2
	0x0340EA20 MOV X22, X1
	0x0340EA24 MOV X23, X0
	0x0340EA28 TBNZ X8, 0x0, 0x340EA4C
	0x0340EA2C ADRP X0, 0xD20000
	0x0340EA30 LDR X0, [X0 + 0x380]
	0x0340EA34 BL 0x1C16CF4
	0x0340EA38 ADRP X0, 0xCE8000
	0x0340EA3C LDR X0, [X0 + 0x280]
	0x0340EA40 BL 0x1C16CF4
	0x0340EA44 MOVZ W8, 0x1
	0x0340EA48 STRB W8, [X25 + 0x57A]
	0x0340EA4C LDR X0, [X24]
	0x0340EA50 MOVI V0.2D, 0x0
	0x0340EA54 STP V0, V0, [X31 + 0x50]
	0x0340EA58 STP V0, V0, [X31 + 0x30]
	0x0340EA5C STR V0, [X31 + 0x2]
	0x0340EA60 ADRP X24, 0xD20000
	0x0340EA64 LDR W8, [X0 + 0xE0]
	0x0340EA68 LDR X24, [X24 + 0x380]
	0x0340EA6C CBNZ W8, 0x340EA74
	0x0340EA70 BL 0x1C16DFC
	0x0340EA74 ADD X8, X31, 0x8
	0x0340EA78 MOV X0, X31
	0x0340EA7C BL 0x32C4770
	0x0340EA80 LDUR V0, [X31 + 0x8]
	0x0340EA84 LDR X9, [X31 + 0x18]
	0x0340EA88 LDR X2, [X24]
	0x0340EA8C ADD X8, X31, 0x20
	0x0340EA90 STP X21, X20, [X31 + 0x58]
	0x0340EA94 ORR X20, X8, 0xF
	0x0340EA98 MOVN W10, 0x0
	0x0340EA9C ADD X1, X31, 0x20
	0x0340EAA0 MOV X0, X20
	0x0340EAA4 STP X23, X22, [X31 + 0x48]
	0x0340EAA8 STUR V0, [X31 + 0x28]
	0x0340EAAC STP X9, X19, [X31 + 0x38]
	0x0340EAB0 STR W10, [X31 + 0x20]
	0x0340EAB4 BL 0x218DFB8
	0x0340EAB8 MOV X0, X20
	0x0340EABC MOV X1, X31
	0x0340EAC0 BL 0x32C47F8
	0x0340EAC4 LDP X20, X19, [X31 + 0xA0]
	0x0340EAC8 LDP X22, X21, [X31 + 0x90]
	0x0340EACC LDP X24, X23, [X31 + 0x80]
	0x0340EAD0 LDP X30, X25, [X31 + 0x70]
	0x0340EAD4 ADD X31, X31, 0xB0
	0x0340EAD8 RET
	0x0340EADC SUB X31, X31, 0xB0
	0x0340EAE0 STP X30, X25, [X31 + 0x70]
	0x0340EAE4 STP X24, X23, [X31 + 0x80]
	0x0340EAE8 STP X22, X21, [X31 + 0x90]
	0x0340EAEC STP X20, X19, [X31 + 0xA0]
	0x0340EAF0 ADRP X25, 0xFCF000
	0x0340EAF4 ADRP X24, 0xCE8000
	0x0340EAF8 LDRB W8, [X25 + 0x57B]
	0x0340EAFC LDR X24, [X24 + 0x280]
	0x0340EB00 MOV X20, X4
	0x0340EB04 MOV X21, X3
	0x0340EB08 MOV X19, X2
	0x0340EB0C MOV X22, X1
	0x0340EB10 MOV X23, X0
	0x0340EB14 TBNZ X8, 0x0, 0x340EB38
	0x0340EB18 ADRP X0, 0xD20000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xFD0000
	011 Move X21, 0xCE6000
	012 Move X22, 0xCE6000
	013 Move W8, [X20+1388]
	014 Move X21, [X21+2440]
	015 Move X22, [X22+2512]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {50}
	021 Move X0, 0xCE6000
	022 Move X0, [X0+1880]
	023 Call 0x1C17CF4
	024 Move X0, 0xCE6000
	025 Move X0, [X0+2512]
	026 Call 0x1C17CF4
	027 Move X0, 0xD21000
	028 Move X0, [X0+720]
	029 Call 0x1C17CF4
	030 Move X0, 0xCE6000
	031 Move X0, [X0+2104]
	032 Call 0x1C17CF4
	033 Move X0, 0xD21000
	034 Move X0, [X0+728]
	035 Call 0x1C17CF4
	036 Move X0, 0xD20000
	037 Move X0, [X0+3408]
	038 Call 0x1C17CF4
	039 Move X0, 0xD21000
	040 Move X0, [X0+736]
	041 Call 0x1C17CF4
	042 Move X0, 0xCE6000
	043 Move X0, [X0+2440]
	044 Call 0x1C17CF4
	045 Move X0, 0xD20000
	046 Move X0, [X0+3616]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X20+1388], W8
	050 Move X0, [X22]
	051 Move X21, [X21]
	052 Move W1, 4
	053 Call 0x1C17D6C
	054 Compare X0, 0
	055 JumpIfEqual {160}
	056 Move X20, X0
	057 Compare X21, 0
	058 JumpIfEqual {65}
	059 Move X8, [X20]
	060 Move X0, X21
	061 Move X1, [X8+64]
	062 Call 0x1C17E00
	063 Compare X0, 0
	064 JumpIfEqual {157}
	065 Move W8, [X20+24]
	066 Compare W8, 0
	067 JumpIfEqual {156}
	068 Move X22, 0xD20000
	069 Move X22, [X22+3616]
	070 Move [X20+32], X21
	071 Move X0, [X22]
	072 Compare X0, 0
	073 JumpIfEqual {80}
	074 Move X8, [X20]
	075 Move X1, [X8+64]
	076 Call 0x1C17E00
	077 Compare X0, 0
	078 JumpIfEqual {157}
	079 Move W8, [X20+24]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X8, [X22]
	082 Move X9, 0xCE6000
	083 Move X9, [X9+1880]
	084 Add X1, X31, 12
	085 Move [X20+40], X8
	086 Move W8, [X19+16]
	087 Move X0, [X9]
	088 Move [X31+12], W8
	089 Call 0x1C17E04
	090 Move X21, X0
	091 Compare X0, 0
	092 JumpIfEqual {99}
	093 Move X8, [X20]
	094 Move X0, X21
	095 Move X1, [X8+64]
	096 Call 0x1C17E00
	097 Compare X0, 0
	098 JumpIfEqual {157}
	099 Move W8, [X20+24]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X22, 0xCE6000
	102 Move X22, [X22+2104]
	103 Move [X20+48], X21
	104 Move X0, [X22]
	105 Compare X0, 0
	106 JumpIfEqual {113}
	107 Move X8, [X20]
	108 Move X1, [X8+64]
	109 Call 0x1C17E00
	110 Compare X0, 0
	111 JumpIfEqual {157}
	112 Move W8, [X20+24]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X21, 0xD21000
	115 Move X21, [X21+720]
	116 Move X8, [X22]
	117 Move X23, 0xD21000
	118 Move X24, 0xD20000
	119 Move X25, 0xD21000
	120 Move X23, [X23+728]
	121 Move X24, [X24+3408]
	122 Move X25, [X25+736]
	123 Move X0, X20
	124 Move X1, X31
	125 Move [X20+56], X8
	126 Call String.Concat, X0
	127 Move X20, X0
	128 Move X0, X19
	129 Call RpcStatus.get_Details, X0
	130 Move X8, [X22]
	131 Move X2, [X21]
	132 Move X1, X0
	133 Move X0, X8
	134 Call String.Join, X0, X1
	135 Move X1, [X23]
	136 Move X3, [X24]
	137 Move X2, X0
	138 Move X0, X20
	139 Move X4, X31
	140 Call String.Concat, X0, X1, X2, X3
	141 Move X2, [X19+32]
	142 Move X1, [X25]
	143 Move X3, [X22]
	144 Move X4, X31
	145 Call String.Concat, X0, X1, X2, X3
	146 Move X20, [X31+64]
	147 Move X19, [X31+72]
	148 Move X22, [X31+48]
	149 Move X21, [X31+56]
	150 Move X24, [X31+32]
	151 Move X23, [X31+40]
	152 Move X30, [X31+16]
	153 Move X25, [X31+24]
	154 Add X31, X31, 80
	155 Return X0
	156 Call 0x1C17F28
	157 Call 0x1C17F44
	158 Move X1, X31
	159 Call 0x1C17DEC
	160 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x0340EB1C LDR X0, [X0 + 0x388]
	0x0340EB20 BL 0x1C16CF4

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

