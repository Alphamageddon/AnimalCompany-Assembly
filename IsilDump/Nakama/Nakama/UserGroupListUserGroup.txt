Type: Nakama.UserGroupListUserGroup

Method: Nakama.IApiGroup get_Group()

Disassembly:
	0x034019A0 LDR X10, [X10 + 0xE00]
	0x034019A4 LDR X1, [X10]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: Nakama.ApiGroup get__group()

Disassembly:
	0x034019A8 CBZ X9, 0x34019CC
	0x034019AC LDR X10, [X8 + 0xB0]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set__group(Nakama.ApiGroup value)

Disassembly:
	0x034019B0 ADD X10, X10, 0x8
	0x034019B4 LDUR X11, [X10 - 0x8]

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Int32 get_State()

Disassembly:
	0x034019B8 CMP X11, X1
	0x034019BC B.EQ 0x34019DC

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_State(System.Int32 value)

Disassembly:
	0x034019C0 SUBS X9, X9, 0x1
	0x034019C4 ADD X10, X10, 0x10

ISIL:
	001 Move [X0+24], W1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x034019C8 B.NE 0x34019B4
	0x034019CC MOV X0, X20
	0x034019D0 MOV W2, W31
	0x034019D4 BL 0x1C5C788
	0x034019D8 B 0x34019E8
	0x034019DC LDRSW X9, [X10]
	0x034019E0 ADD X8, X8, X9, 0x4, LSL
	0x034019E4 ADD X0, X8, 0x138
	0x034019E8 LDP X8, X1, [X0]
	0x034019EC MOV X0, X20
	0x034019F0 BLR X8
	0x034019F4 CBNZ X22, 0x3401A00
	0x034019F8 MOV X0, X19
	0x034019FC BL 0x1D2C690
	0x03401A00 MOV X0, X22
	0x03401A04 BL 0x1C16F18
	0x03401A08 BL 0x1990590
	0x03401A0C MOV X1, X31
	0x03401A10 B 0x33BDD8C
	0x03401A14 LDR X0, [X0 + 0x10]
	0x03401A18 RET
	0x03401A1C STR X1, [X0 + 0x10]
	0x03401A20 RET
	0x03401A24 STR X30, [X31 - 0x20]!
	0x03401A28 STP X20, X19, [X31 + 0x10]
	0x03401A2C ADRP X20, 0xFDC000
	0x03401A30 LDRB W8, [X20 + 0x511]
	0x03401A34 MOV X19, X0
	0x03401A38 TBNZ X8, 0x0, 0x3401A5C
	0x03401A3C ADRP X0, 0xCF3000
	0x03401A40 LDR X0, [X0 + 0x6C0]
	0x03401A44 BL 0x1C16CF4
	0x03401A48 ADRP X0, 0xCF3000
	0x03401A4C LDR X0, [X0 + 0x6D0]
	0x03401A50 BL 0x1C16CF4
	0x03401A54 MOVZ W8, 0x1
	0x03401A58 STRB W8, [X20 + 0x511]
	0x03401A5C LDR X19, [X19 + 0x18]
	0x03401A60 CBNZ X19, 0x3401A88
	0x03401A64 ADRP X8, 0xCF3000
	0x03401A68 LDR X8, [X8 + 0x6D0]
	0x03401A6C LDR X0, [X8]
	0x03401A70 BL 0x1C16F10
	0x03401A74 ADRP X8, 0xCF3000
	0x03401A78 LDR X8, [X8 + 0x6C0]
	0x03401A7C MOV X19, X0
	0x03401A80 LDR X1, [X8]
	0x03401A84 BL 0x2AA4804
	0x03401A88 MOV X0, X19
	0x03401A8C LDP X20, X19, [X31 + 0x10]
	0x03401A90 LDR X30, [X31], #0x20
	0x03401A94 RET
	0x03401A98 LDR X0, [X0 + 0x18]
	0x03401A9C RET
	0x03401AA0 STR X1, [X0 + 0x18]
	0x03401AA4 RET
	0x03401AA8 SUB X31, X31, 0x70
	0x03401AAC STP X29, X30, [X31 + 0x10]
	0x03401AB0 STP X28, X27, [X31 + 0x20]
	0x03401AB4 STP X26, X25, [X31 + 0x30]
	0x03401AB8 STP X24, X23, [X31 + 0x40]
	0x03401ABC STP X22, X21, [X31 + 0x50]
	0x03401AC0 STP X20, X19, [X31 + 0x60]
	0x03401AC4 ADRP X23, 0xFDC000
	0x03401AC8 ADRP X19, 0xCF2000
	0x03401ACC ADRP X21, 0xD2C000
	0x03401AD0 ADRP X22, 0xCF2000
	0x03401AD4 LDRB W8, [X23 + 0x512]
	0x03401AD8 LDR X19, [X19 + 0x988]
	0x03401ADC LDR X21, [X21 + 0xD88]
	0x03401AE0 LDR X22, [X22 + 0x838]
	0x03401AE4 MOV X20, X0
	0x03401AE8 TBNZ X8, 0x0, 0x3401BA8
	0x03401AEC ADRP X0, 0xCF2000
	0x03401AF0 LDR X0, [X0 + 0xE00]
	0x03401AF4 BL 0x1C16CF4
	0x03401AF8 ADRP X0, 0xCF5000
	0x03401AFC LDR X0, [X0 + 0x190]
	0x03401B00 BL 0x1C16CF4
	0x03401B04 ADRP X0, 0xCF5000
	0x03401B08 LDR X0, [X0 + 0x198]
	0x03401B0C BL 0x1C16CF4
	0x03401B10 ADRP X0, 0xCF2000
	0x03401B14 LDR X0, [X0 + 0xE18]
	0x03401B18 BL 0x1C16CF4
	0x03401B1C ADRP X0, 0xCF5000
	0x03401B20 LDR X0, [X0 + 0x1B0]
	0x03401B24 BL 0x1C16CF4
	0x03401B28 ADRP X0, 0xCF5000
	0x03401B2C LDR X0, [X0 + 0x1B8]
	0x03401B30 BL 0x1C16CF4
	0x03401B34 ADRP X0, 0xCF2000
	0x03401B38 LDR X0, [X0 + 0xAC8]
	0x03401B3C BL 0x1C16CF4
	0x03401B40 ADRP X0, 0xD1F000
	0x03401B44 LDR X0, [X0 + 0x360]
	0x03401B48 BL 0x1C16CF4
	0x03401B4C ADRP X0, 0xD1F000
	0x03401B50 LDR X0, [X0 + 0xFB8]
	0x03401B54 BL 0x1C16CF4
	0x03401B58 ADRP X0, 0xD2C000
	0x03401B5C LDR X0, [X0 + 0xD88]
	0x03401B60 BL 0x1C16CF4
	0x03401B64 ADRP X0, 0xCFD000
	0x03401B68 LDR X0, [X0 + 0x6D8]
	0x03401B6C BL 0x1C16CF4
	0x03401B70 ADRP X0, 0xD2C000
	0x03401B74 LDR X0, [X0 + 0xD80]
	0x03401B78 BL 0x1C16CF4
	0x03401B7C ADRP X0, 0xCF2000
	0x03401B80 LDR X0, [X0 + 0x838]
	0x03401B84 BL 0x1C16CF4
	0x03401B88 ADRP X0, 0xCF2000
	0x03401B8C LDR X0, [X0 + 0x988]
	0x03401B90 BL 0x1C16CF4
	0x03401B94 ADRP X0, 0xCF2000
	0x03401B98 LDR X0, [X0 + 0x848]
	0x03401B9C BL 0x1C16CF4
	0x03401BA0 MOVZ W8, 0x1
	0x03401BA4 STRB W8, [X23 + 0x512]
	0x03401BA8 LDR X0, [X19]
	0x03401BAC LDR X2, [X20 + 0x10]
	0x03401BB0 LDR X1, [X21]
	0x03401BB4 LDR X3, [X22]
	0x03401BB8 MOV X4, X31
	0x03401BBC BL 0x32277C4
	0x03401BC0 LDR X27, [X19]
	0x03401BC4 STR X0, [X31 + 0x8]
	0x03401BC8 MOV X0, X20
	0x03401BCC BL 0x3401A24
	0x03401BD0 CBZ X0, 0x3401E80
	0x03401BD4 ADRP X10, 0xCF5000
	0x03401BD8 LDR X8, [X0]
	0x03401BDC LDR X10, [X10 + 0x190]
	0x03401BE0 MOV X20, X0
	0x03401BE4 LDRH W9, [X8 + 0x12E]
	0x03401BE8 LDR X1, [X10]
	0x03401BEC CBZ X9, 0x3401C10
	0x03401BF0 LDR X10, [X8 + 0xB0]
	0x03401BF4 ADD X10, X10, 0x8
	0x03401BF8 LDUR X11, [X10 - 0x8]
	0x03401BFC CMP X11, X1
	0x03401C00 B.EQ 0x3401C20
	0x03401C04 SUBS X9, X9, 0x1
	0x03401C08 ADD X10, X10, 0x10
	0x03401C0C B.NE 0x3401BF8
	0x03401C10 MOV X0, X20
	0x03401C14 MOV W2, W31
	0x03401C18 BL 0x1C5C788
	0x03401C1C B 0x3401C2C
	0x03401C20 LDRSW X9, [X10]
	0x03401C24 ADD X8, X8, X9, 0x4, LSL
	0x03401C28 ADD X0, X8, 0x138
	0x03401C2C ADRP X28, 0xCF2000
	0x03401C30 ADRP X29, 0xCF5000
	0x03401C34 ADRP X26, 0xCF2000
	0x03401C38 ADRP X24, 0xD1F000
	0x03401C3C ADRP X25, 0xD1F000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xFDD000
	009 Move X21, 0xCF3000
	010 Move X22, 0xCF3000
	011 Move W8, [X20+1290]
	012 Move X21, [X21+2440]
	013 Move X22, [X22+2512]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {39}
	019 Move X0, 0xCF3000
	020 Move X0, [X0+1880]
	021 Call 0x1C17CF4
	022 Move X0, 0xCF3000
	023 Move X0, [X0+2512]
	024 Call 0x1C17CF4
	025 Move X0, 0xD2D000
	026 Move X0, [X0+3304]
	027 Call 0x1C17CF4
	028 Move X0, 0xD2D000
	029 Move X0, [X0+3320]
	030 Call 0x1C17CF4
	031 Move X0, 0xCF3000
	032 Move X0, [X0+2104]
	033 Call 0x1C17CF4
	034 Move X0, 0xCF3000
	035 Move X0, [X0+2440]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+1290], W8
	039 Move X0, [X22]
	040 Move X21, [X21]
	041 Move W1, 4
	042 Call 0x1C17D6C
	043 Compare X0, 0
	044 JumpIfEqual {181}
	045 Move X20, X0
	046 Compare X21, 0
	047 JumpIfEqual {54}
	048 Move X8, [X20]
	049 Move X0, X21
	050 Move X1, [X8+64]
	051 Call 0x1C17E00
	052 Compare X0, 0
	053 JumpIfEqual {178}
	054 Move W8, [X20+24]
	055 Compare W8, 0
	056 JumpIfEqual {177}
	057 Move X23, 0xD2D000
	058 Move X23, [X23+3320]
	059 Move [X20+32], X21
	060 Move X0, [X23]
	061 Compare X0, 0
	062 JumpIfEqual {69}
	063 Move X8, [X20]
	064 Move X1, [X8+64]
	065 Call 0x1C17E00
	066 Compare X0, 0
	067 JumpIfEqual {178}
	068 Move W8, [X20+24]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X9, [X23]
	071 Move [X20+40], X9
	072 Move X21, [X19+16]
	073 Compare X21, 0
	074 JumpIfEqual {82}
	075 Move X8, [X20]
	076 Move X0, X21
	077 Move X1, [X8+64]
	078 Call 0x1C17E00
	079 Compare X0, 0
	080 JumpIfEqual {178}
	081 Move W8, [X20+24]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X23, 0xCF3000
	084 Move X23, [X23+2104]
	085 Move [X20+48], X21
	086 Move X0, [X23]
	087 Compare X0, 0
	088 JumpIfEqual {95}
	089 Move X8, [X20]
	090 Move X1, [X8+64]
	091 Call 0x1C17E00
	092 Compare X0, 0
	093 JumpIfEqual {178}
	094 Move W8, [X20+24]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X8, [X23]
	097 Move X0, X20
	098 Move X1, X31
	099 Move [X20+56], X8
	100 Call String.Concat, X0
	101 Move X8, [X22]
	102 Move X21, X0
	103 Move W1, 4
	104 Move X0, X8
	105 Call 0x1C17D6C
	106 Compare X0, 0
	107 JumpIfEqual {181}
	108 Move X20, X0
	109 Compare X21, 0
	110 JumpIfEqual {117}
	111 Move X8, [X20]
	112 Move X0, X21
	113 Move X1, [X8+64]
	114 Call 0x1C17E00
	115 Compare X0, 0
	116 JumpIfEqual {178}
	117 Move W8, [X20+24]
	118 Compare W8, 0
	119 JumpIfEqual {177}
	120 Move X22, 0xD2D000
	121 Move X22, [X22+3304]
	122 Move [X20+32], X21
	123 Move X0, [X22]
	124 Compare X0, 0
	125 JumpIfEqual {132}
	126 Move X8, [X20]
	127 Move X1, [X8+64]
	128 Call 0x1C17E00
	129 Compare X0, 0
	130 JumpIfEqual {178}
	131 Move W8, [X20+24]
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move X8, [X22]
	134 Move X9, 0xCF3000
	135 Move X9, [X9+1880]
	136 Add X1, X31, 12
	137 Move [X20+40], X8
	138 Move W8, [X19+24]
	139 Move X0, [X9]
	140 Move [X31+12], W8
	141 Call 0x1C17E04
	142 Move X19, X0
	143 Compare X0, 0
	144 JumpIfEqual {151}
	145 Move X8, [X20]
	146 Move X0, X19
	147 Move X1, [X8+64]
	148 Call 0x1C17E00
	149 Compare X0, 0
	150 JumpIfEqual {178}
	151 Move W8, [X20+24]
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move [X20+48], X19
	154 Move X0, [X23]
	155 Compare X0, 0
	156 JumpIfEqual {163}
	157 Move X8, [X20]
	158 Move X1, [X8+64]
	159 Call 0x1C17E00
	160 Compare X0, 0
	161 JumpIfEqual {178}
	162 Move W8, [X20+24]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move X8, [X23]
	165 Move X0, X20
	166 Move X1, X31
	167 Move [X20+56], X8
	168 Call String.Concat, X0
	169 Move X20, [X31+48]
	170 Move X19, [X31+56]
	171 Move X22, [X31+32]
	172 Move X21, [X31+40]
	173 Move X30, [X31+16]
	174 Move X23, [X31+24]
	175 Add X31, X31, 64
	176 Return X0
	177 Call 0x1C17F28
	178 Call 0x1C17F44
	179 Move X1, X31
	180 Call 0x1C17DEC
	181 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03401C40 ADRP X19, 0xCFD000
	0x03401C44 LDR X28, [X28 + 0xE18]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

