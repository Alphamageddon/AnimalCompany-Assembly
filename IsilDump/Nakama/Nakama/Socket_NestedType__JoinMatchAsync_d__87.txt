Type: Nakama.Socket/<JoinMatchAsync>d__87

Method: System.Void MoveNext()

Disassembly:
	0x03482A54 LDR X2, [X21]
	0x03482A58 ADD X0, X20, 0x8
	0x03482A5C MOV X1, X19
	0x03482A60 LDP X20, X19, [X31 + 0x20]
	0x03482A64 LDP X22, X21, [X31 + 0x10]
	0x03482A68 LDR X30, [X31], #0x30
	0x03482A6C B 0x2632228
	0x03482A70 SUB X31, X31, 0x40
	0x03482A74 STP X30, X23, [X31 + 0x10]
	0x03482A78 STP X22, X21, [X31 + 0x20]
	0x03482A7C STP X20, X19, [X31 + 0x30]
	0x03482A80 ADRP X20, 0xF5B000
	0x03482A84 LDRB W8, [X20 + 0x8CC]
	0x03482A88 MOV X19, X0
	0x03482A8C TBNZ X8, 0x0, 0x3482B10
	0x03482A90 ADRP X0, 0xCAE000
	0x03482A94 LDR X0, [X0 + 0xFE8]
	0x03482A98 BL 0x1C16CF4
	0x03482A9C ADRP X0, 0xCAE000
	0x03482AA0 LDR X0, [X0 + 0xFF0]
	0x03482AA4 BL 0x1C16CF4
	0x03482AA8 ADRP X0, 0xCAD000
	0x03482AAC LDR X0, [X0 + 0x2C0]
	0x03482AB0 BL 0x1C16CF4
	0x03482AB4 ADRP X0, 0xCAC000
	0x03482AB8 LDR X0, [X0 + 0x668]
	0x03482ABC BL 0x1C16CF4
	0x03482AC0 ADRP X0, 0xC71000
	0x03482AC4 LDR X0, [X0 + 0x758]
	0x03482AC8 BL 0x1C16CF4
	0x03482ACC ADRP X0, 0xCAE000
	0x03482AD0 LDR X0, [X0 + 0xE88]
	0x03482AD4 BL 0x1C16CF4
	0x03482AD8 ADRP X0, 0xCAE000
	0x03482ADC LDR X0, [X0 + 0xE90]
	0x03482AE0 BL 0x1C16CF4
	0x03482AE4 ADRP X0, 0xCAE000
	0x03482AE8 LDR X0, [X0 + 0xE98]
	0x03482AEC BL 0x1C16CF4
	0x03482AF0 ADRP X0, 0xCAE000
	0x03482AF4 LDR X0, [X0 + 0xBC8]
	0x03482AF8 BL 0x1C16CF4
	0x03482AFC ADRP X0, 0xC75000
	0x03482B00 LDR X0, [X0 + 0x110]
	0x03482B04 BL 0x1C16CF4
	0x03482B08 MOVZ W8, 0x1
	0x03482B0C STRB W8, [X20 + 0x8CC]
	0x03482B10 STR X31, [X31 + 0x8]
	0x03482B14 ADRP X23, 0xCAC000
	0x03482B18 LDR W8, [X19]
	0x03482B1C LDR X23, [X23 + 0x668]
	0x03482B20 CBZ W8, 0x3482C38
	0x03482B24 LDR X20, [X19 + 0x20]
	0x03482B28 CBZ X20, 0x3482CB0
	0x03482B2C ADD X0, X20, 0x10
	0x03482B30 MOV X1, X31
	0x03482B34 BL 0x33EB14C
	0x03482B38 ADRP X8, 0xCAE000
	0x03482B3C LDR X8, [X8 + 0xBC8]
	0x03482B40 MOV W22, W0
	0x03482B44 LDR X0, [X8]
	0x03482B48 BL 0x1C16F10
	0x03482B4C MOV X21, X0
	0x03482B50 MOV X1, X31
	0x03482B54 BL 0x33BDD8C
	0x03482B58 ADRP X8, 0xC71000
	0x03482B5C LDR X8, [X8 + 0x758]
	0x03482B60 STR W22, [X31 + 0x4]
	0x03482B64 LDR X0, [X8]
	0x03482B68 ADD X1, X31, 0x4
	0x03482B6C BL 0x1C16E04
	0x03482B70 MOV X1, X0
	0x03482B74 ADRP X8, 0xC75000
	0x03482B78 LDR X8, [X8 + 0x110]
	0x03482B7C LDR X0, [X8]
	0x03482B80 MOV X2, X31
	0x03482B84 BL 0x321EFD0
	0x03482B88 CBZ X21, 0x3482CB4
	0x03482B8C ADRP X8, 0xCAE000
	0x03482B90 LDR X8, [X8 + 0xFE8]
	0x03482B94 STR X0, [X21 + 0x10]
	0x03482B98 LDR X0, [X8]
	0x03482B9C BL 0x1C16F10
	0x03482BA0 MOV X22, X0
	0x03482BA4 MOV X1, X31
	0x03482BA8 BL 0x34083AC
	0x03482BAC CBZ X22, 0x3482CB8
	0x03482BB0 LDUR V0, [X19 + 0x28]
	0x03482BB4 STUR V0, [X22 + 0x18]
	0x03482BB8 STR X22, [X21 + 0xC8]
	0x03482BBC MOV X0, X20
	0x03482BC0 MOV X1, X21
	0x03482BC4 MOV X2, X31
	0x03482BC8 BL 0x347BA8C
	0x03482BCC CBZ X0, 0x3482CBC
	0x03482BD0 ADRP X8, 0xCAE000
	0x03482BD4 LDR X8, [X8 + 0xE98]
	0x03482BD8 LDR X1, [X8]
	0x03482BDC BL 0x269F5D0
	0x03482BE0 ADRP X8, 0xCAE000
	0x03482BE4 LDR X8, [X8 + 0xE90]
	0x03482BE8 STR X0, [X31 + 0x8]
	0x03482BEC LDR X1, [X8]
	0x03482BF0 ADD X0, X31, 0x8
	0x03482BF4 BL 0x2677430
	0x03482BF8 TBNZ X0, 0x0, 0x3482C4C
	0x03482BFC STR W31, [X19]
	0x03482C00 LDR X8, [X31 + 0x8]
	0x03482C04 STR X8, [X19 + 0x38]
	0x03482C08 LDR X0, [X23]
	0x03482C0C LDR W8, [X0 + 0xE0]
	0x03482C10 CBNZ W8, 0x3482C18
	0x03482C14 BL 0x1C16DFC
	0x03482C18 ADRP X8, 0xCAE000
	0x03482C1C LDR X8, [X8 + 0xFF0]
	0x03482C20 ADD X0, X19, 0x8
	0x03482C24 LDR X3, [X8]
	0x03482C28 ADD X1, X31, 0x8
	0x03482C2C MOV X2, X19
	0x03482C30 BL 0x1FC2B30
	0x03482C34 B 0x3482C98
	0x03482C38 LDR X8, [X19 + 0x38]
	0x03482C3C MOVN W9, 0x0
	0x03482C40 STR X8, [X31 + 0x8]
	0x03482C44 STR X31, [X19 + 0x38]
	0x03482C48 STR W9, [X19]
	0x03482C4C ADRP X8, 0xCAE000
	0x03482C50 LDR X8, [X8 + 0xE88]
	0x03482C54 ADD X0, X31, 0x8
	0x03482C58 LDR X1, [X8]
	0x03482C5C BL 0x2677474
	0x03482C60 CBZ X0, 0x3482CAC
	0x03482C64 MOVN W8, 0x1
	0x03482C68 LDR X20, [X0 + 0xC8]
	0x03482C6C STR W8, [X19], #0x8
	0x03482C70 LDR X0, [X23]
	0x03482C74 ADRP X21, 0xCAD000
	0x03482C78 LDR W8, [X0 + 0xE0]
	0x03482C7C LDR X21, [X21 + 0x2C0]
	0x03482C80 CBNZ W8, 0x3482C88
	0x03482C84 BL 0x1C16DFC
	0x03482C88 LDR X2, [X21]
	0x03482C8C MOV X0, X19
	0x03482C90 MOV X1, X20
	0x03482C94 BL 0x26322B0
	0x03482C98 LDP X20, X19, [X31 + 0x30]
	0x03482C9C LDP X22, X21, [X31 + 0x20]
	0x03482CA0 LDP X30, X23, [X31 + 0x10]
	0x03482CA4 ADD X31, X31, 0x40
	0x03482CA8 RET
	0x03482CAC BL 0x1C16F20
	0x03482CB0 BL 0x1C16F20
	0x03482CB4 BL 0x1C16F20
	0x03482CB8 BL 0x1C16F20
	0x03482CBC BL 0x1C16F20
	0x03482CC0 B 0x3482CEC
	0x03482CC4 B 0x3482CEC
	0x03482CC8 B 0x3482CEC
	0x03482CCC B 0x3482CEC
	0x03482CD0 B 0x3482CEC
	0x03482CD4 B 0x3482CEC
	0x03482CD8 B 0x3482CEC
	0x03482CDC B 0x3482CEC
	0x03482CE0 B 0x3482CEC
	0x03482CE4 B 0x3482CEC
	0x03482CE8 B 0x3482CEC
	0x03482CEC MOV X20, X0
	0x03482CF0 CMP W1, 0x1
	0x03482CF4 B.NE 0x3482D90
	0x03482CF8 MOV X0, X20
	0x03482CFC BL 0x3EB1AD0
	0x03482D00 MOV X20, X0
	0x03482D04 ADRP X0, 0xC71000
	0x03482D08 LDR X0, [X0 + 0x7D0]
	0x03482D0C BL 0x1C16D08
	0x03482D10 LDR X8, [X20]
	0x03482D14 LDR X1, [X8]
	0x03482D18 BL 0x1C17270
	0x03482D1C TBZ X0, 0x0, 0x3482D68
	0x03482D20 LDR X20, [X20]
	0x03482D24 BL 0x3EB1AE0
	0x03482D28 MOVN W8, 0x1
	0x03482D2C STR W8, [X19], #0x8
	0x03482D30 ADRP X0, 0xCAC000
	0x03482D34 LDR X0, [X0 + 0x668]
	0x03482D38 BL 0x1C16D08
	0x03482D3C LDR W8, [X0 + 0xE0]
	0x03482D40 CBNZ W8, 0x3482D48
	0x03482D44 BL 0x1C16DFC
	0x03482D48 ADRP X0, 0xCAD000
	0x03482D4C LDR X0, [X0 + 0x300]
	0x03482D50 BL 0x1C16D08
	0x03482D54 MOV X2, X0
	0x03482D58 MOV X0, X19
	0x03482D5C MOV X1, X20
	0x03482D60 BL 0x26324C8
	0x03482D64 B 0x3482C98
	0x03482D68 MOVZ W0, 0x8
	0x03482D6C BL 0x3EB1AF0
	0x03482D70 LDR X8, [X20]
	0x03482D74 STR X8, [X0]
	0x03482D78 ADRP X1, 0xA32000
	0x03482D7C ADD X1, X1, 0xE58
	0x03482D80 MOV X2, X31
	0x03482D84 BL 0x3EB1B00
	0x03482D88 MOV X20, X0
	0x03482D8C BL 0x3EB1AE0
	0x03482D90 MOV X0, X20
	0x03482D94 BL 0x1D2C690
	0x03482D98 BL 0x1990590
	0x03482D9C STR X30, [X31 - 0x30]!
	0x03482DA0 STP X22, X21, [X31 + 0x10]
	0x03482DA4 STP X20, X19, [X31 + 0x20]
	0x03482DA8 ADRP X22, 0xF5B000
	0x03482DAC ADRP X21, 0xCAC000
	0x03482DB0 LDRB W8, [X22 + 0x8CD]
	0x03482DB4 LDR X21, [X21 + 0x668]
	0x03482DB8 MOV X19, X1
	0x03482DBC MOV X20, X0
	0x03482DC0 TBNZ X8, 0x0, 0x3482DE4
	0x03482DC4 ADRP X0, 0xCAD000
	0x03482DC8 LDR X0, [X0 + 0x308]
	0x03482DCC BL 0x1C16CF4
	0x03482DD0 ADRP X0, 0xCAC000
	0x03482DD4 LDR X0, [X0 + 0x668]
	0x03482DD8 BL 0x1C16CF4
	0x03482DDC MOVZ W8, 0x1
	0x03482DE0 STRB W8, [X22 + 0x8CD]
	0x03482DE4 LDR X0, [X21]
	0x03482DE8 ADRP X21, 0xCAD000
	0x03482DEC LDR W8, [X0 + 0xE0]
	0x03482DF0 LDR X21, [X21 + 0x308]
	0x03482DF4 CBNZ W8, 0x3482DFC
	0x03482DF8 BL 0x1C16DFC
	0x03482DFC LDR X2, [X21]
	0x03482E00 ADD X0, X20, 0x8
	0x03482E04 MOV X1, X19
	0x03482E08 LDP X20, X19, [X31 + 0x20]
	0x03482E0C LDP X22, X21, [X31 + 0x10]
	0x03482E10 LDR X30, [X31], #0x30
	0x03482E14 B 0x2632228
	0x03482E18 SUB X31, X31, 0x60
	0x03482E1C STR X30, [X31 + 0x10]
	0x03482E20 STP X26, X25, [X31 + 0x20]
	0x03482E24 STP X24, X23, [X31 + 0x30]
	0x03482E28 STP X22, X21, [X31 + 0x40]
	0x03482E2C STP X20, X19, [X31 + 0x50]
	0x03482E30 ADRP X20, 0xF5B000
	0x03482E34 LDRB W8, [X20 + 0x8CE]
	0x03482E38 MOV X19, X0
	0x03482E3C TBNZ X8, 0x0, 0x3482EFC
	0x03482E40 ADRP X0, 0xCAE000
	0x03482E44 LDR X0, [X0 + 0xFE8]
	0x03482E48 BL 0x1C16CF4
	0x03482E4C ADRP X0, 0xCA4000
	0x03482E50 LDR X0, [X0 + 0xCF0]
	0x03482E54 BL 0x1C16CF4
	0x03482E58 ADRP X0, 0xCA4000
	0x03482E5C LDR X0, [X0 + 0xCF8]
	0x03482E60 BL 0x1C16CF4
	0x03482E64 ADRP X0, 0xCA4000
	0x03482E68 LDR X0, [X0 + 0xD00]
	0x03482E6C BL 0x1C16CF4
	0x03482E70 ADRP X0, 0xC99000
	0x03482E74 LDR X0, [X0 + 0x5B0]
	0x03482E78 BL 0x1C16CF4
	0x03482E7C ADRP X0, 0xCAE000
	0x03482E80 LDR X0, [X0 + 0xFF8]
	0x03482E84 BL 0x1C16CF4
	0x03482E88 ADRP X0, 0xCAD000
	0x03482E8C LDR X0, [X0 + 0x2C0]
	0x03482E90 BL 0x1C16CF4
	0x03482E94 ADRP X0, 0xCAC000
	0x03482E98 LDR X0, [X0 + 0x668]
	0x03482E9C BL 0x1C16CF4
	0x03482EA0 ADRP X0, 0xC7A000
	0x03482EA4 LDR X0, [X0 + 0x9E8]
	0x03482EA8 BL 0x1C16CF4
	0x03482EAC ADRP X0, 0xC71000
	0x03482EB0 LDR X0, [X0 + 0x758]
	0x03482EB4 BL 0x1C16CF4
	0x03482EB8 ADRP X0, 0xCAE000
	0x03482EBC LDR X0, [X0 + 0xE88]
	0x03482EC0 BL 0x1C16CF4
	0x03482EC4 ADRP X0, 0xCAE000
	0x03482EC8 LDR X0, [X0 + 0xE90]
	0x03482ECC BL 0x1C16CF4
	0x03482ED0 ADRP X0, 0xCAE000
	0x03482ED4 LDR X0, [X0 + 0xE98]
	0x03482ED8 BL 0x1C16CF4
	0x03482EDC ADRP X0, 0xCAE000
	0x03482EE0 LDR X0, [X0 + 0xBC8]
	0x03482EE4 BL 0x1C16CF4
	0x03482EE8 ADRP X0, 0xC75000
	0x03482EEC LDR X0, [X0 + 0x110]
	0x03482EF0 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X20, 0xF5C000
	010 Move W8, [X20+2244]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {51}
	016 Move X0, 0xCAF000
	017 Move X0, [X0+3960]
	018 Call 0x1C17CF4
	019 Move X0, 0xCAF000
	020 Move X0, [X0+3808]
	021 Call 0x1C17CF4
	022 Move X0, 0xCAF000
	023 Move X0, [X0+3152]
	024 Call 0x1C17CF4
	025 Move X0, 0xCAF000
	026 Move X0, [X0+3968]
	027 Call 0x1C17CF4
	028 Move X0, 0xC72000
	029 Move X0, [X0+1880]
	030 Call 0x1C17CF4
	031 Move X0, 0xCAF000
	032 Move X0, [X0+3976]
	033 Call 0x1C17CF4
	034 Move X0, 0xCAF000
	035 Move X0, [X0+3720]
	036 Call 0x1C17CF4
	037 Move X0, 0xCAF000
	038 Move X0, [X0+3728]
	039 Call 0x1C17CF4
	040 Move X0, 0xCAF000
	041 Move X0, [X0+3736]
	042 Call 0x1C17CF4
	043 Move X0, 0xCAF000
	044 Move X0, [X0+3016]
	045 Call 0x1C17CF4
	046 Move X0, 0xC76000
	047 Move X0, [X0+272]
	048 Call 0x1C17CF4
	049 Move W8, 1
	050 Move [X20+2244], W8
	051 Move [X31+24], X31
	052 Move X24, 0xCAF000
	053 Move W8, [X19]
	054 Move X24, [X24+3152]
	055 Compare W8, 0
	056 JumpIfEqual {84}
	057 Move X8, 0xCAF000
	058 Move X8, [X8+3976]
	059 Move X20, [X19+40]
	060 Move X0, [X8]
	061 Call 0x1C17F10
	062 Move X21, X0
	063 Move X1, X31
	064 Call MatchJoinMessage..ctor, X0
	065 Move X22, [X19+32]
	066 Compare X22, 0
	067 JumpIfEqual {255}
	068 Move X23, 0xCAF000
	069 Move X8, [X22]
	070 Move X23, [X23+3968]
	071 NotImplemented "Instruction LDRH not yet implemented."
	072 Move X1, [X23]
	073 Compare X9, 0
	074 JumpIfEqual {81}
	075 Move X10, [X8+176]
	076 Add X10, X10, 8
	077 NotImplemented "Instruction LDUR not yet implemented."
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Subtract X9, X9, 1
	080 Add X10, X10, 16
	081 Move W2, 2
	082 Move X0, X22
	083 Call 0x1C5D788
	084 Move X8, [X19+48]
	085 Move TEMP, 0
	086 Not TEMP
	087 Move W9, TEMP
	088 Move [X31+24], X8
	089 Move [X19+48], X31
	090 Move [X19], W9
	091 Move W9, [X10]
	092 Add W9, W9, 2
	093 Add X8, X8, W9
	094 Add X0, X8, 312
	095 Move X8, [X0]
	096 Move X1, [X0+8]
	097 Move X0, X22
	098 NotImplemented "Instruction BLR not yet implemented."
	099 Move X22, [X19+32]
	100 Compare X0, 0
	101 JumpIfEqual {118}
	102 Compare X22, 0
	103 JumpIfEqual {258}
	104 Move X8, [X22]
	105 Move X1, [X23]
	106 NotImplemented "Instruction LDRH not yet implemented."
	107 Compare X9, 0
	108 JumpIfEqual {115}
	109 Move X10, [X8+176]
	110 Add X10, X10, 8
	111 NotImplemented "Instruction LDUR not yet implemented."
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Subtract X9, X9, 1
	114 Add X10, X10, 16
	115 Move W2, 2
	116 Move X0, X22
	117 Call 0x1C5D788
	118 Compare X22, 0
	119 JumpIfEqual {260}
	120 Move X8, [X22]
	121 Move X1, [X23]
	122 NotImplemented "Instruction LDRH not yet implemented."
	123 Compare X9, 0
	124 JumpIfEqual {131}
	125 Move X10, [X8+176]
	126 Add X10, X10, 8
	127 NotImplemented "Instruction LDUR not yet implemented."
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Subtract X9, X9, 1
	130 Add X10, X10, 16
	131 Move X0, X22
	132 Move W2, W31
	133 Call 0x1C5D788
	134 Move W9, [X10]
	135 Add W9, W9, 2
	136 Add X8, X8, W9
	137 Add X0, X8, 312
	138 Move X8, [X0]
	139 Move X1, [X0+8]
	140 Move X0, X22
	141 NotImplemented "Instruction BLR not yet implemented."
	142 Compare X21, 0
	143 JumpIfEqual {259}
	144 Move [X21+24], X0
	145 Compare X20, 0
	146 JumpIfEqual {253}
	147 Add X0, X20, 16
	148 Move X1, X31
	149 Call Interlocked.Increment, X0
	150 Move X8, 0xCAF000
	151 Move X8, [X8+3016]
	152 Move W23, W0
	153 Move X0, [X8]
	154 Call 0x1C17F10
	155 Move X22, X0
	156 Move X1, X31
	157 Call Object..ctor, X0
	158 Move X8, 0xC72000
	159 Move X8, [X8+1880]
	160 Move [X31+12], W23
	161 Move X0, [X8]
	162 Add X1, X31, 12
	163 Call 0x1C17E04
	164 Move X1, X0
	165 Move X8, 0xC76000
	166 Move X8, [X8+272]
	167 Move X0, [X8]
	168 Move X2, X31
	169 Call String.Format, X0, X1
	170 Compare X22, 0
	171 JumpIfEqual {256}
	172 Move [X22+16], X0
	173 Move [X22+152], X21
	174 Move X0, X20
	175 Move X1, X22
	176 Move X2, X31
	177 Call Socket.SendAsync, X0, X1
	178 Compare X0, 0
	179 JumpIfEqual {257}
	180 Move X8, 0xCAF000
	181 Move X8, [X8+3736]
	182 Move X1, [X8]
	183 Call Task`1<Object>.GetAwaiter, X0
	184 Move X8, 0xCAF000
	185 Move X8, [X8+3728]
	186 Move [X31+24], X0
	187 Move X1, [X8]
	188 Add X0, X31, 24
	189 Call TaskAwaiter`1<Object>.get_IsCompleted, X0
	190 Move TEMP, X0
	191 And TEMP, TEMP, 1
	192 Compare TEMP, 1
	193 JumpIfNotEqual {217}
	194 Move X8, 0xCAF000
	195 Move X8, [X8+3720]
	196 Add X0, X31, 24
	197 Move X1, [X8]
	198 Call TaskAwaiter`1<Object>.GetResult, X0
	199 Compare X0, 0
	200 JumpIfEqual {254}
	201 Move TEMP, 1
	202 Not TEMP
	203 Move W8, TEMP
	204 Move X20, [X0+136]
	205 Move [X19+8], W8
	206 Move X0, [X24]
	207 Move X21, 0xCAF000
	208 Move W8, [X0+224]
	209 Move X21, [X21+3808]
	210 Compare W8, 0
	211 JumpIfNotEqual {213}
	212 Call 0x1C17DFC
	213 Move X2, [X21]
	214 Move X0, X19
	215 Move X1, X20
	216 Call AsyncTaskMethodBuilder`1<Object>.SetResult, X0, X1
	217 Move [X19], W31
	218 Move X8, [X31+24]
	219 Move [X19+48], X8
	220 Move X0, [X24]
	221 Move W8, [X0+224]
	222 Compare W8, 0
	223 JumpIfNotEqual {225}
	224 Call 0x1C17DFC
	225 Move X8, 0xCAF000
	226 Move X8, [X8+3960]
	227 Add X0, X19, 8
	228 Move X3, [X8]
	229 Add X1, X31, 24
	230 Move X2, X19
	231 Call AsyncTaskMethodBuilder`1<Object>.AwaitUnsafeOnCompleted, X0, X1, X2
	232 Move X20, [X31+64]
	233 Move X19, [X31+72]
	234 Move X22, [X31+48]
	235 Move X21, [X31+56]
	236 Move X24, [X31+32]
	237 Move X23, [X31+40]
	238 Move X30, [X31+16]
	239 Add X31, X31, 80
	240 Return 
	241 NotImplemented "Instruction LDRSW not yet implemented."
	242 Add X8, X8, X9
	243 Add X0, X8, 312
	244 Move X8, [X0]
	245 Move X1, [X0+8]
	246 Move X0, X22
	247 NotImplemented "Instruction BLR not yet implemented."
	248 Compare X21, 0
	249 JumpIfEqual {261}
	250 Move [X21+16], X0
	251 Compare X20, 0
	252 JumpIfNotEqual {147}
	253 Call 0x1C17F20
	254 Call 0x1C17F20
	255 Call 0x1C17F20
	256 Call 0x1C17F20
	257 Call 0x1C17F20
	258 Call 0x1C17F20
	259 Call 0x1C17F20
	260 Call 0x1C17F20
	261 Call 0x1C17F20
	262 Move X20, X0
	263 NotImplemented "Instruction CMP not yet implemented."
	264 Move X0, X20
	265 Call 0x3EB2AD0
	266 Move X20, X0
	267 Move X0, 0xC72000
	268 Move X0, [X0+2000]
	269 Call 0x1C17D08
	270 Move X8, [X20]
	271 Move X1, [X8]
	272 Call 0x1C18270
	273 Move TEMP, X0
	274 And TEMP, TEMP, 1
	275 Compare TEMP, 1
	276 JumpIfNotEqual {297}
	277 Move X20, [X20]
	278 Call 0x3EB2AE0
	279 Move TEMP, 1
	280 Not TEMP
	281 Move W8, TEMP
	282 Move [X19+8], W8
	283 Move X0, 0xCAF000
	284 Move X0, [X0+3152]
	285 Call 0x1C17D08
	286 Move W8, [X0+224]
	287 Compare W8, 0
	288 JumpIfNotEqual {290}
	289 Call 0x1C17DFC
	290 Move X0, 0xCAF000
	291 Move X0, [X0+3824]
	292 Call 0x1C17D08
	293 Move X2, X0
	294 Move X0, X19
	295 Move X1, X20
	296 Call AsyncTaskMethodBuilder`1<Object>.SetException, X0, X1
	297 Move W0, 8
	298 Call 0x3EB2AF0
	299 Move X8, [X20]
	300 Move [X0], X8
	301 Move X1, 0xA33000
	302 Add X1, X1, 3672
	303 Move X2, X31
	304 Call 0x3EB2B00
	305 Move X20, X0
	306 Call 0x3EB2AE0
	307 Move X0, X20
	308 Call 0x1D2D690
	309 Call 0x1991590

Method: System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)

Disassembly:
	0x03482EF4 MOVZ W8, 0x1
	0x03482EF8 STRB W8, [X20 + 0x8CE]
	0x03482EFC STR X31, [X31 + 0x18]
	0x03482F00 ADRP X26, 0xCAC000
	0x03482F04 LDR W8, [X19]
	0x03482F08 LDR X26, [X26 + 0x668]
	0x03482F0C CBZ W8, 0x3483074
	0x03482F10 LDR X20, [X19 + 0x20]
	0x03482F14 CBZ X20, 0x34830F4
	0x03482F18 ADD X0, X20, 0x10
	0x03482F1C MOV X1, X31
	0x03482F20 BL 0x33EB14C
	0x03482F24 ADRP X8, 0xCAE000
	0x03482F28 LDR X8, [X8 + 0xBC8]
	0x03482F2C MOV W22, W0
	0x03482F30 LDR X0, [X8]
	0x03482F34 BL 0x1C16F10
	0x03482F38 MOV X21, X0
	0x03482F3C MOV X1, X31
	0x03482F40 BL 0x33BDD8C
	0x03482F44 ADRP X8, 0xC71000
	0x03482F48 LDR X8, [X8 + 0x758]
	0x03482F4C STR W22, [X31 + 0xC]
	0x03482F50 LDR X0, [X8]
	0x03482F54 ADD X1, X31, 0xC
	0x03482F58 BL 0x1C16E04
	0x03482F5C MOV X1, X0
	0x03482F60 ADRP X8, 0xC75000
	0x03482F64 LDR X8, [X8 + 0x110]
	0x03482F68 LDR X0, [X8]
	0x03482F6C MOV X2, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xF5C000
	007 Move X21, 0xCAF000
	008 Move W8, [X22+2245]
	009 Move X21, [X21+3152]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xCAF000
	017 Move X0, [X0+3832]
	018 Call 0x1C17CF4
	019 Move X0, 0xCAF000
	020 Move X0, [X0+3152]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2245], W8
	024 Move X0, [X21]
	025 Move X21, 0xCAF000
	026 Move W8, [X0+224]
	027 Move X21, [X21+3832]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X2, [X21]
	032 Add X0, X20, 8
	033 Move X1, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Call AsyncTaskMethodBuilder`1<Object>.SetStateMachine, X0, X1
	040 Return 

