Type: Nakama.ChannelMessageAck

Method: System.String get_ChannelId()

Disassembly:
	0x03474188 MOVZ W2, 0x4
	0x0347418C MOV X0, X22

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_ChannelId(System.String value)

Disassembly:
	0x03474190 BL 0x1C5C788
	0x03474194 B 0x34741A8

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Int32 get_Code()

Disassembly:
	0x03474198 LDR W9, [X10]
	0x0347419C ADD W9, W9, 0x4

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_Code(System.Int32 value)

Disassembly:
	0x034741A0 ADD X8, X8, W9, 0x4, SXTW
	0x034741A4 ADD X0, X8, 0x138

ISIL:
	001 Move [X0+24], W1
	002 Return 

Method: System.String get_CreateTime()

Disassembly:
	0x034741A8 LDP X8, X1, [X0]
	0x034741AC MOV X0, X22

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_CreateTime(System.String value)

Disassembly:
	0x034741B0 BLR X8
	0x034741B4 MOV X1, X0

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String get_MessageId()

Disassembly:
	0x034741B8 CBZ X19, 0x3474618
	0x034741BC LDR X2, [X29]

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_MessageId(System.String value)

Disassembly:
	0x034741C0 MOV X0, X19
	0x034741C4 BL 0x2AA528C

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.Boolean get_Persistent()

Disassembly:
	0x034741C8 TBNZ X0, 0x0, 0x347409C
	0x034741CC LDR X8, [X22]

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_Persistent(System.Boolean value)

Disassembly:
	0x034741D0 LDR X1, [X28]
	0x034741D4 LDRH W9, [X8 + 0x12E]
	0x034741D8 CBZ X9, 0x34741FC

ISIL:
	001 And W8, W1, 1
	002 Move [X0+48], W8
	003 Return 

Method: System.String get_UpdateTime()

Disassembly:
	0x034741DC LDR X10, [X8 + 0xB0]
	0x034741E0 ADD X10, X10, 0x8

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_UpdateTime(System.String value)

Disassembly:
	0x034741E4 LDUR X11, [X10 - 0x8]
	0x034741E8 CMP X11, X1

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.String get_Username()

Disassembly:
	0x034741EC B.EQ 0x347420C
	0x034741F0 SUBS X9, X9, 0x1

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_Username(System.String value)

Disassembly:
	0x034741F4 ADD X10, X10, 0x10
	0x034741F8 B.NE 0x34741E4

ISIL:
	001 Move [X0+64], X1
	002 Return 

Method: System.String get_RoomName()

Disassembly:
	0x034741FC MOVZ W2, 0x4
	0x03474200 MOV X0, X22

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Void set_RoomName(System.String value)

Disassembly:
	0x03474204 BL 0x1C5C788
	0x03474208 B 0x347421C

ISIL:
	001 Move [X0+72], X1
	002 Return 

Method: System.String get_GroupId()

Disassembly:
	0x0347420C LDR W9, [X10]
	0x03474210 ADD W9, W9, 0x4

ISIL:
	001 Move X0, [X0+80]
	002 Return X0

Method: System.Void set_GroupId(System.String value)

Disassembly:
	0x03474214 ADD X8, X8, W9, 0x4, SXTW
	0x03474218 ADD X0, X8, 0x138

ISIL:
	001 Move [X0+80], X1
	002 Return 

Method: System.String get_UserIdOne()

Disassembly:
	0x0347421C LDP X8, X1, [X0]
	0x03474220 MOV X0, X22

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: System.Void set_UserIdOne(System.String value)

Disassembly:
	0x03474224 BLR X8
	0x03474228 LDR X9, [X22]

ISIL:
	001 Move [X0+88], X1
	002 Return 

Method: System.String get_UserIdTwo()

Disassembly:
	0x0347422C LDR X8, [X24]
	0x03474230 MOV X23, X0

ISIL:
	001 Move X0, [X0+96]
	002 Return X0

Method: System.Void set_UserIdTwo(System.String value)

Disassembly:
	0x03474234 LDRB W11, [X9 + 0x130]
	0x03474238 LDRB W10, [X8 + 0x130]

ISIL:
	001 Move [X0+96], X1
	002 Return 

Method: System.String ToString()

Disassembly:
	0x0347423C CMP W11, W10
	0x03474240 B.CC 0x3474258
	0x03474244 LDR X9, [X9 + 0xC8]
	0x03474248 ADD X9, X9, X10, 0x3, LSL
	0x0347424C LDUR X9, [X9 - 0x8]
	0x03474250 CMP X9, X8
	0x03474254 B.EQ 0x3474264
	0x03474258 MOV X0, X22
	0x0347425C BL 0x3477AD8
	0x03474260 MOV X22, X0
	0x03474264 LDR X3, [X25]
	0x03474268 MOV X0, X19
	0x0347426C MOV X1, X23
	0x03474270 MOV X2, X22
	0x03474274 BL 0x2AA5098
	0x03474278 B 0x347409C
	0x0347427C ADRP X27, 0xC7F000
	0x03474280 LDR X27, [X27 + 0xE00]
	0x03474284 MOV X22, X31
	0x03474288 MOVZ W23, 0xB
	0x0347428C CBZ X21, 0x34742E8
	0x03474290 LDR X8, [X21]
	0x03474294 LDR X1, [X27]
	0x03474298 LDRH W9, [X8 + 0x12E]
	0x0347429C CBZ X9, 0x34742C0
	0x034742A0 LDR X10, [X8 + 0xB0]
	0x034742A4 ADD X10, X10, 0x8
	0x034742A8 LDUR X11, [X10 - 0x8]
	0x034742AC CMP X11, X1
	0x034742B0 B.EQ 0x34742D0
	0x034742B4 SUBS X9, X9, 0x1
	0x034742B8 ADD X10, X10, 0x10
	0x034742BC B.NE 0x34742A8
	0x034742C0 MOV X0, X21
	0x034742C4 MOV W2, W31
	0x034742C8 BL 0x1C5C788
	0x034742CC B 0x34742DC
	0x034742D0 LDRSW X9, [X10]
	0x034742D4 ADD X8, X8, X9, 0x4, LSL
	0x034742D8 ADD X0, X8, 0x138
	0x034742DC LDP X8, X1, [X0]
	0x034742E0 MOV X0, X21
	0x034742E4 BLR X8
	0x034742E8 CBNZ X22, 0x34746B4
	0x034742EC CMP W23, 0xB
	0x034742F0 B.EQ 0x34742F8
	0x034742F4 CBNZ W23, 0x34745E8
	0x034742F8 CBZ X20, 0x3474624
	0x034742FC LDR X8, [X20]
	0x03474300 ADRP X10, 0xC7F000
	0x03474304 LDRH W9, [X8 + 0x12E]
	0x03474308 LDR X10, [X10 + 0xF50]
	0x0347430C LDR X1, [X10]
	0x03474310 CBZ X9, 0x3474334
	0x03474314 LDR X10, [X8 + 0xB0]
	0x03474318 ADD X10, X10, 0x8
	0x0347431C LDUR X11, [X10 - 0x8]
	0x03474320 CMP X11, X1
	0x03474324 B.EQ 0x3474344
	0x03474328 SUBS X9, X9, 0x1
	0x0347432C ADD X10, X10, 0x10
	0x03474330 B.NE 0x347431C
	0x03474334 MOV X0, X20
	0x03474338 MOV W2, W31
	0x0347433C BL 0x1C5C788
	0x03474340 B 0x3474350
	0x03474344 LDRSW X9, [X10]
	0x03474348 ADD X8, X8, X9, 0x4, LSL
	0x0347434C ADD X0, X8, 0x138
	0x03474350 LDP X8, X1, [X0]
	0x03474354 MOV X0, X20
	0x03474358 BLR X8
	0x0347435C MOV X20, X0
	0x03474360 CBZ X0, 0x347462C
	0x03474364 ADRP X22, 0xC7F000
	0x03474368 ADRP X23, 0xC7F000
	0x0347436C ADRP X24, 0xC7F000
	0x03474370 ADRP X25, 0xCBC000
	0x03474374 ADRP X26, 0xCBC000
	0x03474378 LDR X22, [X22 + 0xE18]
	0x0347437C LDR X23, [X23 + 0xF58]
	0x03474380 LDR X24, [X24 + 0xF60]
	0x03474384 LDR X25, [X25 + 0x8A0]
	0x03474388 LDR X26, [X26 + 0x8A8]
	0x0347438C LDR X8, [X20]
	0x03474390 LDR X1, [X22]
	0x03474394 LDRH W9, [X8 + 0x12E]
	0x03474398 CBZ X9, 0x34743BC
	0x0347439C LDR X10, [X8 + 0xB0]
	0x034743A0 ADD X10, X10, 0x8
	0x034743A4 LDUR X11, [X10 - 0x8]
	0x034743A8 CMP X11, X1
	0x034743AC B.EQ 0x34743CC
	0x034743B0 SUBS X9, X9, 0x1
	0x034743B4 ADD X10, X10, 0x10
	0x034743B8 B.NE 0x34743A4
	0x034743BC MOV X0, X20
	0x034743C0 MOV W2, W31
	0x034743C4 BL 0x1C5C788
	0x034743C8 B 0x34743D8
	0x034743CC LDRSW X9, [X10]
	0x034743D0 ADD X8, X8, X9, 0x4, LSL
	0x034743D4 ADD X0, X8, 0x138
	0x034743D8 LDP X8, X1, [X0]
	0x034743DC MOV X0, X20
	0x034743E0 BLR X8
	0x034743E4 TBZ X0, 0x0, 0x347452C
	0x034743E8 LDR X8, [X20]
	0x034743EC LDR X1, [X23]
	0x034743F0 LDRH W9, [X8 + 0x12E]
	0x034743F4 CBZ X9, 0x3474418
	0x034743F8 LDR X10, [X8 + 0xB0]
	0x034743FC ADD X10, X10, 0x8
	0x03474400 LDUR X11, [X10 - 0x8]
	0x03474404 CMP X11, X1
	0x03474408 B.EQ 0x3474428
	0x0347440C SUBS X9, X9, 0x1
	0x03474410 ADD X10, X10, 0x10
	0x03474414 B.NE 0x3474400
	0x03474418 MOV X0, X20
	0x0347441C MOV W2, W31
	0x03474420 BL 0x1C5C788
	0x03474424 B 0x3474434
	0x03474428 LDRSW X9, [X10]
	0x0347442C ADD X8, X8, X9, 0x4, LSL
	0x03474430 ADD X0, X8, 0x138
	0x03474434 LDP X8, X1, [X0]
	0x03474438 MOV X0, X20
	0x0347443C BLR X8
	0x03474440 MOV X21, X0
	0x03474444 CBZ X0, 0x347461C
	0x03474448 LDR X8, [X21]
	0x0347444C LDR X1, [X24]
	0x03474450 LDRH W9, [X8 + 0x12E]
	0x03474454 CBZ X9, 0x3474478
	0x03474458 LDR X10, [X8 + 0xB0]
	0x0347445C ADD X10, X10, 0x8
	0x03474460 LDUR X11, [X10 - 0x8]
	0x03474464 CMP X11, X1
	0x03474468 B.EQ 0x3474488
	0x0347446C SUBS X9, X9, 0x1
	0x03474470 ADD X10, X10, 0x10
	0x03474474 B.NE 0x3474460
	0x03474478 MOVZ W2, 0x4
	0x0347447C MOV X0, X21
	0x03474480 BL 0x1C5C788
	0x03474484 B 0x3474498
	0x03474488 LDR W9, [X10]
	0x0347448C ADD W9, W9, 0x4
	0x03474490 ADD X8, X8, W9, 0x4, SXTW
	0x03474494 ADD X0, X8, 0x138
	0x03474498 LDP X8, X1, [X0]
	0x0347449C MOV X0, X21
	0x034744A0 BLR X8
	0x034744A4 MOV X1, X0
	0x034744A8 CBZ X19, 0x3474620
	0x034744AC LDR X2, [X25]
	0x034744B0 MOV X0, X19
	0x034744B4 BL 0x2AA528C
	0x034744B8 TBZ X0, 0x0, 0x347438C
	0x034744BC LDR X8, [X21]
	0x034744C0 LDR X1, [X24]
	0x034744C4 LDRH W9, [X8 + 0x12E]
	0x034744C8 CBZ X9, 0x34744EC
	0x034744CC LDR X10, [X8 + 0xB0]
	0x034744D0 ADD X10, X10, 0x8
	0x034744D4 LDUR X11, [X10 - 0x8]
	0x034744D8 CMP X11, X1
	0x034744DC B.EQ 0x34744FC
	0x034744E0 SUBS X9, X9, 0x1
	0x034744E4 ADD X10, X10, 0x10
	0x034744E8 B.NE 0x34744D4
	0x034744EC MOVZ W2, 0x4
	0x034744F0 MOV X0, X21
	0x034744F4 BL 0x1C5C788
	0x034744F8 B 0x347450C
	0x034744FC LDR W9, [X10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xF6A000
	007 Move X21, 0xC80000
	008 Move W8, [X20+2047]
	009 Move X21, [X21+2512]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xC80000
	016 Move X0, [X0+2904]
	017 Call 0x1C17CF4
	018 Move X0, 0xC80000
	019 Move X0, [X0+1880]
	020 Call 0x1C17CF4
	021 Move X0, 0xC80000
	022 Move X0, [X0+2512]
	023 Call 0x1C17CF4
	024 Move X0, 0xCBD000
	025 Move X0, [X0+2088]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+2047], W8
	029 Move X0, [X21]
	030 Move W1, 11
	031 Call 0x1C17D6C
	032 Compare X0, 0
	033 JumpIfEqual {198}
	034 Move X21, [X19+16]
	035 Move X20, X0
	036 Compare X21, 0
	037 JumpIfEqual {44}
	038 Move X8, [X20]
	039 Move X0, X21
	040 Move X1, [X8+64]
	041 Call 0x1C17E00
	042 Compare X0, 0
	043 JumpIfEqual {195}
	044 Move W8, [X20+24]
	045 Compare W8, 0
	046 JumpIfEqual {194}
	047 Move X8, 0xC80000
	048 Move X8, [X8+1880]
	049 Move [X20+32], X21
	050 Move W9, [X19+24]
	051 Add X1, X31, 12
	052 Move X0, [X8]
	053 Move [X31+12], W9
	054 Call 0x1C17E04
	055 Move X21, X0
	056 Compare X0, 0
	057 JumpIfEqual {64}
	058 Move X8, [X20]
	059 Move X0, X21
	060 Move X1, [X8+64]
	061 Call 0x1C17E00
	062 Compare X0, 0
	063 JumpIfEqual {195}
	064 Move W8, [X20+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move [X20+40], X21
	067 Move X21, [X19+32]
	068 Compare X21, 0
	069 JumpIfEqual {77}
	070 Move X8, [X20]
	071 Move X0, X21
	072 Move X1, [X8+64]
	073 Call 0x1C17E00
	074 Compare X0, 0
	075 JumpIfEqual {195}
	076 Move W8, [X20+24]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move [X20+48], X21
	079 Move X21, [X19+40]
	080 Compare X21, 0
	081 JumpIfEqual {89}
	082 Move X8, [X20]
	083 Move X0, X21
	084 Move X1, [X8+64]
	085 Call 0x1C17E00
	086 Compare X0, 0
	087 JumpIfEqual {195}
	088 Move W8, [X20+24]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X8, 0xC80000
	091 Move X8, [X8+2904]
	092 Move [X20+56], X21
	093 Move W9, [X19+48]
	094 Add X1, X31, 8
	095 Move X0, [X8]
	096 Move [X31+8], W9
	097 Call 0x1C17E04
	098 Move X21, X0
	099 Compare X0, 0
	100 JumpIfEqual {107}
	101 Move X8, [X20]
	102 Move X0, X21
	103 Move X1, [X8+64]
	104 Call 0x1C17E00
	105 Compare X0, 0
	106 JumpIfEqual {195}
	107 Move W8, [X20+24]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move [X20+64], X21
	110 Move X21, [X19+56]
	111 Compare X21, 0
	112 JumpIfEqual {120}
	113 Move X8, [X20]
	114 Move X0, X21
	115 Move X1, [X8+64]
	116 Call 0x1C17E00
	117 Compare X0, 0
	118 JumpIfEqual {195}
	119 Move W8, [X20+24]
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move [X20+72], X21
	122 Move X21, [X19+64]
	123 Compare X21, 0
	124 JumpIfEqual {132}
	125 Move X8, [X20]
	126 Move X0, X21
	127 Move X1, [X8+64]
	128 Call 0x1C17E00
	129 Compare X0, 0
	130 JumpIfEqual {195}
	131 Move W8, [X20+24]
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move [X20+80], X21
	134 Move X21, [X19+72]
	135 Compare X21, 0
	136 JumpIfEqual {144}
	137 Move X8, [X20]
	138 Move X0, X21
	139 Move X1, [X8+64]
	140 Call 0x1C17E00
	141 Compare X0, 0
	142 JumpIfEqual {195}
	143 Move W8, [X20+24]
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move [X20+88], X21
	146 Move X21, [X19+80]
	147 Compare X21, 0
	148 JumpIfEqual {156}
	149 Move X8, [X20]
	150 Move X0, X21
	151 Move X1, [X8+64]
	152 Call 0x1C17E00
	153 Compare X0, 0
	154 JumpIfEqual {195}
	155 Move W8, [X20+24]
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move [X20+96], X21
	158 Move X21, [X19+88]
	159 Compare X21, 0
	160 JumpIfEqual {168}
	161 Move X8, [X20]
	162 Move X0, X21
	163 Move X1, [X8+64]
	164 Call 0x1C17E00
	165 Compare X0, 0
	166 JumpIfEqual {195}
	167 Move W8, [X20+24]
	168 NotImplemented "Instruction CMP not yet implemented."
	169 Move [X20+104], X21
	170 Move X19, [X19+96]
	171 Compare X19, 0
	172 JumpIfEqual {180}
	173 Move X8, [X20]
	174 Move X0, X19
	175 Move X1, [X8+64]
	176 Call 0x1C17E00
	177 Compare X0, 0
	178 JumpIfEqual {195}
	179 Move W8, [X20+24]
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move X8, 0xCBD000
	182 Move X8, [X8+2088]
	183 Move [X20+112], X19
	184 Move X1, X20
	185 Move X2, X31
	186 Move X0, [X8]
	187 Call String.Format, X0, X1
	188 Move X20, [X31+32]
	189 Move X19, [X31+40]
	190 Move X30, [X31+16]
	191 Move X21, [X31+24]
	192 Add X31, X31, 48
	193 Return X0
	194 Call 0x1C17F28
	195 Call 0x1C17F44
	196 Move X1, X31
	197 Call 0x1C17DEC
	198 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03474500 ADD W9, W9, 0x4
	0x03474504 ADD X8, X8, W9, 0x4, SXTW

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

