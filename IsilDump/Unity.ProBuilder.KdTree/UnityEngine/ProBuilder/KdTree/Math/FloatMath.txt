Type: UnityEngine.ProBuilder.KdTree.Math.FloatMath

Method: System.Int32 Compare(System.Single a, System.Single b)

Disassembly:
	0x038EE50C LDR X0, [X0 + 0x6D8]
	0x038EE510 BL 0x1C16CF4
	0x038EE514 MOVZ W8, 0x1
	0x038EE518 STRB W8, [X22 + 0x6F5]
	0x038EE51C LDR X0, [X21 + 0x10]
	0x038EE520 CBZ X0, 0x38EE590
	0x038EE524 ADRP X8, 0x85F000
	0x038EE528 LDR X8, [X8 + 0x6D0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31+12], S0
	003 Add X0, X31, 12
	004 Move V0, V1
	005 Move X1, X31
	006 Call Single.CompareTo, X0, V0
	007 Move X30, [X31+16]
	008 Return X0

Method: System.Boolean AreEqual(System.Single a, System.Single b)

Disassembly:
	0x038EE52C MOV X1, X20
	0x038EE530 LDR X2, [X8]
	0x038EE534 BL 0x301CD00

ISIL:
	001 NotImplemented "Instruction FCMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Single get_MinValue()

Disassembly:
	0x038EE538 ADDS W31, W0, 0x1
	0x038EE53C B.EQ 0x38EE594
	0x038EE540 CBZ X20, 0x38EE590

ISIL:
	001 Move TEMP, 0x800000
	002 Not TEMP
	003 Move W8, TEMP
	004 Move S0, W8
	005 Return V0

Method: System.Single get_MaxValue()

Disassembly:
	0x038EE544 CBZ X19, 0x38EE590
	0x038EE548 LDR X8, [X20 + 0x30]
	0x038EE54C STP X8, X20, [X19 + 0x30]

ISIL:
	001 Move TEMP, 0x80800000
	002 Not TEMP
	003 Move W8, TEMP
	004 Move S0, W8
	005 Return V0

Method: System.Single get_Zero()

Disassembly:
	0x038EE550 LDR X8, [X20 + 0x30]
	0x038EE554 CBZ X8, 0x38EE590

ISIL:
	001 Move S0, W31
	002 Return V0

Method: System.Single get_NegativeInfinity()

Disassembly:
	0x038EE558 STR X19, [X8 + 0x38]
	0x038EE55C STR X19, [X20 + 0x30]
	0x038EE560 LDR X8, [X21 + 0x10]

ISIL:
	001 Move W8, 0xFF800000
	002 Move S0, W8
	003 Return V0

Method: System.Single get_PositiveInfinity()

Disassembly:
	0x038EE564 CBZ X8, 0x38EE590
	0x038EE568 ADRP X9, 0x85F000
	0x038EE56C LDR X9, [X9 + 0x6D8]

ISIL:
	001 Move W8, 0x7F800000
	002 Move S0, W8
	003 Return V0

Method: System.Single Add(System.Single a, System.Single b)

Disassembly:
	0x038EE570 MOV X2, X19
	0x038EE574 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Add S0, S0, S1
	002 Return V0

Method: System.Single Subtract(System.Single a, System.Single b)

Disassembly:
	0x038EE578 LDP X22, X21, [X31 + 0x10]
	0x038EE57C LDR X3, [X9]

ISIL:
	001 Subtract S0, S0, S1
	002 Return V0

Method: System.Single Multiply(System.Single a, System.Single b)

Disassembly:
	0x038EE580 ADD W1, W0, 0x1
	0x038EE584 MOV X0, X8

ISIL:
	001 Multiply S0, S0, S1
	002 Return V0

Method: System.Single DistanceSquaredBetweenPoints(System.Single[] a, System.Single[] b)

Disassembly:
	0x038EE588 LDR X30, [X31], #0x30
	0x038EE58C B 0x301CEEC
	0x038EE590 BL 0x1C16F20
	0x038EE594 ADRP X0, 0x80D000
	0x038EE598 LDR X0, [X0 + 0x578]
	0x038EE59C BL 0x1C16D08
	0x038EE5A0 BL 0x1C16F10
	0x038EE5A4 MOV X19, X0
	0x038EE5A8 ADRP X0, 0x85F000
	0x038EE5AC LDR X0, [X0 + 0x6E0]
	0x038EE5B0 BL 0x1C16D08
	0x038EE5B4 MOV X20, X0
	0x038EE5B8 ADRP X0, 0x85F000
	0x038EE5BC LDR X0, [X0 + 0x6E8]
	0x038EE5C0 BL 0x1C16D08
	0x038EE5C4 MOV X2, X0
	0x038EE5C8 MOV X0, X19
	0x038EE5CC MOV X1, X20
	0x038EE5D0 MOV X3, X31
	0x038EE5D4 BL 0x330E16C
	0x038EE5D8 ADRP X0, 0x85F000
	0x038EE5DC LDR X0, [X0 + 0x6F0]
	0x038EE5E0 BL 0x1C16D08
	0x038EE5E4 MOV X1, X0
	0x038EE5E8 MOV X0, X19
	0x038EE5EC BL 0x1C16DEC
	0x038EE5F0 STR X30, [X31 - 0x40]!
	0x038EE5F4 STP X24, X23, [X31 + 0x10]
	0x038EE5F8 STP X22, X21, [X31 + 0x20]
	0x038EE5FC STP X20, X19, [X31 + 0x30]
	0x038EE600 ADRP X21, 0xAF3000
	0x038EE604 LDRB W8, [X21 + 0x6F6]
	0x038EE608 MOV X20, X1
	0x038EE60C MOV X19, X0
	0x038EE610 TBNZ X8, 0x0, 0x38EE670
	0x038EE614 ADRP X0, 0x805000
	0x038EE618 LDR X0, [X0 + 0xE00]
	0x038EE61C BL 0x1C16CF4
	0x038EE620 ADRP X0, 0x85F000
	0x038EE624 LDR X0, [X0 + 0x6F8]
	0x038EE628 BL 0x1C16CF4
	0x038EE62C ADRP X0, 0x85F000
	0x038EE630 LDR X0, [X0 + 0x700]
	0x038EE634 BL 0x1C16CF4
	0x038EE638 ADRP X0, 0x805000
	0x038EE63C LDR X0, [X0 + 0xE18]
	0x038EE640 BL 0x1C16CF4
	0x038EE644 ADRP X0, 0x85F000
	0x038EE648 LDR X0, [X0 + 0x6A8]
	0x038EE64C BL 0x1C16CF4
	0x038EE650 ADRP X0, 0x85F000
	0x038EE654 LDR X0, [X0 + 0x708]
	0x038EE658 BL 0x1C16CF4
	0x038EE65C ADRP X0, 0x85F000
	0x038EE660 LDR X0, [X0 + 0x710]
	0x038EE664 BL 0x1C16CF4
	0x038EE668 MOVZ W8, 0x1
	0x038EE66C STRB W8, [X21 + 0x6F6]
	0x038EE670 CBZ X20, 0x38EE940
	0x038EE674 ADRP X10, 0x85F000
	0x038EE678 LDR X8, [X20]
	0x038EE67C LDR X10, [X10 + 0x6F8]
	0x038EE680 LDRH W9, [X8 + 0x12E]
	0x038EE684 LDR X1, [X10]

ISIL:
	001 Move [X31-80], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X8, [X0]
	011 Move X21, X1
	012 Move X19, X2
	013 Move X20, X0
	014 Move X9, [X8+680]
	015 Move X8, [X8+688]
	016 Move X1, X8
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Compare X21, 0
	019 JumpIfEqual {71}
	020 Move X8, [X21+24]
	021 Move V8, V0
	022 NotImplemented "Instruction CMP not yet implemented."
	023 And X8, X8, 0
	024 Compare X8, 0
	025 JumpIfEqual {59}
	026 Move X22, X31
	027 Subtract X23, X8, 1
	028 Add X24, X19, 32
	029 Add X25, X21, 32
	030 Compare X19, 0
	031 JumpIfEqual {71}
	032 Move W8, [X19+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X8, [X20]
	035 Move V0, [X25]
	036 Move V1, [X24]
	037 Move X0, X20
	038 Move X9, [X8+744]
	039 Move X1, [X8+752]
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X8, [X20]
	042 Move X0, X20
	043 Move V1, V0
	044 Move X9, [X8+760]
	045 Move X1, [X8+768]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move X8, [X20]
	048 Move V1, V0
	049 Move X0, X20
	050 Move V0, V8
	051 Move X9, [X8+728]
	052 Move X1, [X8+736]
	053 NotImplemented "Instruction BLR not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move V8, V0
	056 Move W8, [X21+24]
	057 Add X22, X22, 1
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Call 0x1C17F28
	060 Move X20, [X31+64]
	061 Move X19, [X31+72]
	062 Move X22, [X31+48]
	063 Move X21, [X31+56]
	064 Move X24, [X31+32]
	065 Move X23, [X31+40]
	066 Move X30, [X31+16]
	067 Move X25, [X31+24]
	068 Move V0, V8
	069 Move V8, [X31+80]
	070 Return V0
	071 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x038EE688 CBZ X9, 0x38EE6AC
	0x038EE68C LDR X10, [X8 + 0xB0]
	0x038EE690 ADD X10, X10, 0x8
	0x038EE694 LDUR X11, [X10 - 0x8]
	0x038EE698 CMP X11, X1
	0x038EE69C B.EQ 0x38EE6BC
	0x038EE6A0 SUBS X9, X9, 0x1
	0x038EE6A4 ADD X10, X10, 0x10
	0x038EE6A8 B.NE 0x38EE694
	0x038EE6AC MOV X0, X20
	0x038EE6B0 MOV W2, W31
	0x038EE6B4 BL 0x1C5C788
	0x038EE6B8 B 0x38EE6C8
	0x038EE6BC LDRSW X9, [X10]
	0x038EE6C0 ADD X8, X8, X9, 0x4, LSL
	0x038EE6C4 ADD X0, X8, 0x138
	0x038EE6C8 LDP X8, X1, [X0]
	0x038EE6CC ADRP X22, 0x805000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xAF4000
	006 Move X21, 0x860000
	007 Move W8, [X20+1766]
	008 Move X21, [X21+1544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x860000
	015 Move X0, [X0+1544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1766], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call TypeMath`1<Single>..ctor, X0
	026 Return 

