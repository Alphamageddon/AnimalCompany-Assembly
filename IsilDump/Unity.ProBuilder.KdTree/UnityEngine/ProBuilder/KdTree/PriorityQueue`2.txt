Type: UnityEngine.ProBuilder.KdTree.PriorityQueue`2

Method: System.Void .ctor(System.Int32 capacity, UnityEngine.ProBuilder.KdTree.ITypeMath`1<TPriority> priorityMath)

Disassembly:
	0x024B5A90 AND X10, X10, 0x1FFFFFFFF
	0x024B5A94 SUB X21, X9, X10
	0x024B5A98 ADD X31, X21, 0x0
	0x024B5A9C LDR W9, [X0 + 0x24]
	0x024B5AA0 CBZ W9, 0x24B5B0C
	0x024B5AA4 LDR X9, [X0 + 0x18]
	0x024B5AA8 CBZ X9, 0x24B5B4C
	0x024B5AAC LDR W10, [X9 + 0x18]
	0x024B5AB0 CBZ W10, 0x24B5B50
	0x024B5AB4 LDR X8, [X8 + 0x28]
	0x024B5AB8 MOV X19, X1
	0x024B5ABC ADD X0, X9, 0x20
	0x024B5AC0 LDR X1, [X8 + 0x80]
	0x024B5AC4 BL 0x1C16D18
	0x024B5AC8 MOV X1, X0
	0x024B5ACC MOV X0, X21
	0x024B5AD0 MOV X2, X20
	0x024B5AD4 BL 0x3EB1AC0
	0x024B5AD8 MOV X0, X19
	0x024B5ADC MOV X1, X21
	0x024B5AE0 MOV X2, X20
	0x024B5AE4 BL 0x3EB1AC0
	0x024B5AE8 LDR X8, [X22 + 0x28]
	0x024B5AEC LDUR X9, [X29 - 0x8]
	0x024B5AF0 CMP X8, X9
	0x024B5AF4 B.NE 0x24B5B54
	0x024B5AF8 ADD X31, X29, 0x0
	0x024B5AFC LDP X20, X19, [X31 + 0x20]
	0x024B5B00 LDP X22, X21, [X31 + 0x10]
	0x024B5B04 LDP X29, X30, [X31], #0x30
	0x024B5B08 RET
	0x024B5B0C ADRP X0, 0x1C3E000
	0x024B5B10 LDR X0, [X0 + 0x7D0]
	0x024B5B14 MOV X19, X2
	0x024B5B18 BL 0x1C16D08
	0x024B5B1C BL 0x1C16F10
	0x024B5B20 MOV X20, X0
	0x024B5B24 ADRP X0, 0x1C67000
	0x024B5B28 LDR X0, [X0 + 0xEE8]
	0x024B5B2C BL 0x1C16D08

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W22, W1
	007 Move X1, X31
	008 Move X19, X3
	009 Move X20, X2
	010 Move X21, X0
	011 Call Object..ctor, X0
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move [X21+32], W22
	014 Move X8, [X19+32]
	015 Move X8, [X8+192]
	016 Move X0, [X8+8]
	017 Move W8, [X0+309]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {23}
	022 Call 0x1C5D684
	023 Move W1, W22
	024 Call 0x1C17D6C
	025 Move [X21+16], X20
	026 Move [X21+24], X0
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X22, [X31+16]
	030 Move X21, [X31+24]
	031 Move X30, [X31+48]
	032 Return 
	033 Move X0, 0x1C47000
	034 Move X0, [X0+1400]
	035 Call 0x1C17D08
	036 Call 0x1C17F10
	037 Move X20, X0
	038 Move X0, 0x1C68000
	039 Move X0, [X0+3800]
	040 Call 0x1C17D08
	041 Move X1, X0
	042 Move X0, X20
	043 Move X2, X31
	044 Call ArgumentException..ctor, X0, X1
	045 Move X0, X20
	046 Move X1, X19
	047 Call 0x1C17DEC

Method: System.Int32 get_Count()

Disassembly:
	0x024B5B30 MOV X1, X0
	0x024B5B34 MOV X0, X20

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Void ExpandCapacity()

Disassembly:
	0x024B5B38 MOV X2, X31
	0x024B5B3C BL 0x33B2C70
	0x024B5B40 MOV X0, X20
	0x024B5B44 MOV X1, X19
	0x024B5B48 BL 0x1C16DEC
	0x024B5B4C BL 0x1C16F20
	0x024B5B50 BL 0x1C16F28
	0x024B5B54 BL 0x3EB1B20
	0x024B5B58 STP X29, X30, [X31 - 0x30]!
	0x024B5B5C STP X22, X21, [X31 + 0x10]
	0x024B5B60 STP X20, X19, [X31 + 0x20]
	0x024B5B64 ADD X29, X31, 0x0
	0x024B5B68 SUB X31, X31, 0x10
	0x024B5B6C MRS X22, 0xC000
	0x024B5B70 LDR X8, [X22 + 0x28]
	0x024B5B74 STUR X8, [X29 - 0x8]
	0x024B5B78 LDR X8, [X2 + 0x20]
	0x024B5B7C LDR X8, [X8 + 0xC0]
	0x024B5B80 LDR X9, [X8 + 0x38]
	0x024B5B84 LDR W20, [X9 + 0xFC]
	0x024B5B88 ADD X9, X31, 0x0
	0x024B5B8C ADD X10, X20, 0xF
	0x024B5B90 AND X10, X10, 0x1FFFFFFFF
	0x024B5B94 SUB X21, X9, X10
	0x024B5B98 ADD X31, X21, 0x0
	0x024B5B9C LDR W9, [X0 + 0x24]
	0x024B5BA0 CBZ W9, 0x24B5C10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+32]
	005 Move X19, X0
	006 Move W20, W8
	007 ShiftRight W20, 31
	008 And W20, W20, 0x3FFFFFFF
	009 Move [X0+32], W20
	010 Move X8, [X1+32]
	011 Move X8, [X8+192]
	012 Move X0, [X8+8]
	013 Move W8, [X0+309]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {19}
	018 Call 0x1C5D684
	019 Move W1, W20
	020 Call 0x1C17D6C
	021 Move X8, [X19+24]
	022 Compare X8, 0
	023 JumpIfEqual {35}
	024 Move W2, [X8+24]
	025 Move X20, X0
	026 Move X0, X8
	027 Move X1, X20
	028 Move X3, X31
	029 Call Array.Copy, X0, X1, X2
	030 Move [X19+24], X20
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return 
	035 Call 0x1C17F20

Method: System.Void Enqueue(TItem item, TPriority priority)

Disassembly:
	0x024B5BA4 LDR X9, [X0 + 0x18]
	0x024B5BA8 CBZ X9, 0x24B5C50
	0x024B5BAC LDR W10, [X9 + 0x18]
	0x024B5BB0 CBZ W10, 0x24B5C54
	0x024B5BB4 LDR X8, [X8 + 0x28]
	0x024B5BB8 MOV X19, X1
	0x024B5BBC ADD X0, X9, 0x20
	0x024B5BC0 LDR X8, [X8 + 0x80]
	0x024B5BC4 ADD X1, X8, 0x20
	0x024B5BC8 BL 0x1C16D18
	0x024B5BCC MOV X1, X0
	0x024B5BD0 MOV X0, X21
	0x024B5BD4 MOV X2, X20
	0x024B5BD8 BL 0x3EB1AC0
	0x024B5BDC MOV X0, X19
	0x024B5BE0 MOV X1, X21
	0x024B5BE4 MOV X2, X20
	0x024B5BE8 BL 0x3EB1AC0
	0x024B5BEC LDR X8, [X22 + 0x28]
	0x024B5BF0 LDUR X9, [X29 - 0x8]
	0x024B5BF4 CMP X8, X9
	0x024B5BF8 B.NE 0x24B5C58
	0x024B5BFC ADD X31, X29, 0x0
	0x024B5C00 LDP X20, X19, [X31 + 0x20]
	0x024B5C04 LDP X22, X21, [X31 + 0x10]
	0x024B5C08 LDP X29, X30, [X31], #0x30
	0x024B5C0C RET
	0x024B5C10 ADRP X0, 0x1C3E000
	0x024B5C14 LDR X0, [X0 + 0x7D0]
	0x024B5C18 MOV X19, X2
	0x024B5C1C BL 0x1C16D08
	0x024B5C20 BL 0x1C16F10
	0x024B5C24 MOV X20, X0
	0x024B5C28 ADRP X0, 0x1C67000
	0x024B5C2C LDR X0, [X0 + 0xEE8]
	0x024B5C30 BL 0x1C16D08
	0x024B5C34 MOV X1, X0
	0x024B5C38 MOV X0, X20
	0x024B5C3C MOV X2, X31

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W10, [X0+32]
	007 Move W8, [X0+36]
	008 Move X20, X2
	009 Move V8, V0
	010 Move X21, X1
	011 Add W9, W8, 1
	012 Move X19, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move [X0+36], W9
	015 Move X8, [X20+32]
	016 Move X0, X19
	017 Move X8, [X8+192]
	018 Move X1, [X8+32]
	019 Call 0x24B5B38, X0
	020 Move W9, [X19+36]
	021 Move X8, [X19+24]
	022 Compare X8, 0
	023 JumpIfEqual {46}
	024 Move W10, [X8+24]
	025 Subtract W1, W9, 1
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X9, W1
	028 Move W10, S8
	029 Add X8, X8, X9
	030 Move [X8+32], X21
	031 Move [X8+40], X10
	032 Move X8, [X20+32]
	033 Move X0, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X30, [X31+16]
	037 Move X21, [X31+24]
	038 Move X8, [X8+192]
	039 Move TEMP, 0
	040 Not TEMP
	041 Move W2, TEMP
	042 Move X3, [X8+64]
	043 Move V8, [X31+48]
	044 Call 0x24B5D44, X0, X1, X2
	045 Return 
	046 Call 0x1C17F20
	047 Call 0x1C17F28

Method: TItem Dequeue()

Disassembly:
	0x024B5C40 BL 0x33B2C70
	0x024B5C44 MOV X0, X20
	0x024B5C48 MOV X1, X19
	0x024B5C4C BL 0x1C16DEC
	0x024B5C50 BL 0x1C16F20
	0x024B5C54 BL 0x1C16F28
	0x024B5C58 BL 0x3EB1B20
	0x024B5C5C STR X30, [X31 - 0x30]!
	0x024B5C60 STP X22, X21, [X31 + 0x10]
	0x024B5C64 STP X20, X19, [X31 + 0x20]
	0x024B5C68 ADRP X20, 0x1F24000
	0x024B5C6C LDRB W8, [X20 + 0xBD9]
	0x024B5C70 MOV X19, X0
	0x024B5C74 TBNZ X8, 0x0, 0x24B5C8C
	0x024B5C78 ADRP X0, 0x1C3E000
	0x024B5C7C LDR X0, [X0 + 0x6C0]
	0x024B5C80 BL 0x1C16CF4
	0x024B5C84 MOVZ W8, 0x1
	0x024B5C88 STRB W8, [X20 + 0xBD9]
	0x024B5C8C LDR X0, [X19 + 0x20]
	0x024B5C90 LDRB W8, [X0 + 0x135]
	0x024B5C94 TBNZ X8, 0x0, 0x24B5C9C
	0x024B5C98 BL 0x1C5C684
	0x024B5C9C LDR X8, [X0 + 0xC0]
	0x024B5CA0 LDR X0, [X8 + 0x8]
	0x024B5CA4 LDRB W8, [X0 + 0x135]
	0x024B5CA8 TBNZ X8, 0x0, 0x24B5CB0
	0x024B5CAC BL 0x1C5C684
	0x024B5CB0 LDR X8, [X0 + 0xB8]
	0x024B5CB4 MOV X1, X31
	0x024B5CB8 MOV X2, X31
	0x024B5CBC LDR X0, [X8]
	0x024B5CC0 BL 0x33BE5B0
	0x024B5CC4 TBZ X0, 0x0, 0x24B5DEC
	0x024B5CC8 LDR X0, [X19 + 0x20]
	0x024B5CCC ADRP X20, 0x1C3E000
	0x024B5CD0 LDRB W8, [X0 + 0x135]
	0x024B5CD4 LDR X20, [X20 + 0x6C0]
	0x024B5CD8 TBNZ X8, 0x0, 0x24B5CE0
	0x024B5CDC BL 0x1C5C684
	0x024B5CE0 LDR X8, [X20]
	0x024B5CE4 LDR X9, [X0 + 0xC0]
	0x024B5CE8 LDR W10, [X8 + 0xE0]
	0x024B5CEC LDR X20, [X9 + 0x10]
	0x024B5CF0 CBNZ W10, 0x24B5CFC
	0x024B5CF4 MOV X0, X8
	0x024B5CF8 BL 0x1C16DFC
	0x024B5CFC MOV X0, X20
	0x024B5D00 MOV X1, X31
	0x024B5D04 BL 0x338C698
	0x024B5D08 LDR X8, [X19 + 0x20]
	0x024B5D0C MOV X20, X0
	0x024B5D10 LDRB W9, [X8 + 0x135]
	0x024B5D14 TBNZ X9, 0x0, 0x24B5D24
	0x024B5D18 MOV X0, X8
	0x024B5D1C BL 0x1C5C684
	0x024B5D20 MOV X8, X0
	0x024B5D24 LDR X8, [X8 + 0xC0]
	0x024B5D28 LDR X0, [X8 + 0x20]
	0x024B5D2C LDRB W8, [X0 + 0x135]
	0x024B5D30 TBNZ X8, 0x0, 0x24B5D38
	0x024B5D34 BL 0x1C5C684
	0x024B5D38 BL 0x1C16F10
	0x024B5D3C LDR X8, [X19 + 0x20]
	0x024B5D40 MOV X21, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X0+24]
	008 Compare X8, 0
	009 JumpIfEqual {77}
	010 Move W9, [X8+24]
	011 Compare W9, 0
	012 JumpIfEqual {78}
	013 Move X20, [X8+32]
	014 Move [X8+32], X31
	015 Move X23, [X0+24]
	016 Move X19, X0
	017 Compare X23, 0
	018 JumpIfEqual {77}
	019 Move X22, [X19+16]
	020 Compare X22, 0
	021 JumpIfEqual {77}
	022 Move X8, [X1+32]
	023 Move X21, X1
	024 Move X8, [X8+192]
	025 Move X1, [X8+24]
	026 Move W8, [X1+309]
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {34}
	031 Move X0, X1
	032 Call 0x1C5D684
	033 Move X1, X0
	034 Move X8, [X22]
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Compare X9, 0
	037 JumpIfEqual {44}
	038 Move X10, [X8+176]
	039 Add X10, X10, 8
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract X9, X9, 1
	043 Add X10, X10, 16
	044 Move W2, 1
	045 Move X0, X22
	046 Call 0x1C5D788
	047 Move W9, [X10]
	048 Add W9, W9, 1
	049 Add X8, X8, W9
	050 Add X0, X8, 312
	051 Move X8, [X0]
	052 Move X1, [X0+8]
	053 Move X0, X22
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Move W8, [X23+24]
	056 Compare W8, 0
	057 JumpIfEqual {78}
	058 Move [X23+40], S0
	059 Move X8, [X21+32]
	060 Move W2, 1
	061 Move X0, X19
	062 Move W1, W31
	063 Move X8, [X8+192]
	064 Move X3, [X8+64]
	065 Call 0x24B5D44, X0, X1, X2
	066 Move W8, [X19+36]
	067 Move X0, X20
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Subtract W8, W8, 1
	071 Move [X19+36], W8
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X30, [X31+48]
	075 Move X23, [X31+56]
	076 Return X0
	077 Call 0x1C17F20
	078 Call 0x1C17F28

Method: System.Void ReorderItem(System.Int32 index, System.Int32 direction)

Disassembly:
	0x024B5D44 ADD X9, X8, 0x135
	0x024B5D48 LDRH W9, [X9]
	0x024B5D4C TBNZ X9, 0x0, 0x24B5D68
	0x024B5D50 MOV X0, X8
	0x024B5D54 BL 0x1C5C684
	0x024B5D58 LDR X8, [X19 + 0x20]
	0x024B5D5C ADD X9, X8, 0x135
	0x024B5D60 LDRH W9, [X9]
	0x024B5D64 B 0x24B5D6C
	0x024B5D68 MOV X0, X8
	0x024B5D6C LDR X10, [X0 + 0xC0]
	0x024B5D70 LDR X22, [X10 + 0x18]
	0x024B5D74 TBNZ X9, 0x0, 0x24B5D84
	0x024B5D78 MOV X0, X8
	0x024B5D7C BL 0x1C5C684
	0x024B5D80 MOV X8, X0
	0x024B5D84 LDR X8, [X8 + 0xC0]
	0x024B5D88 MOV X0, X21
	0x024B5D8C MOV X1, X31
	0x024B5D90 MOV X2, X22
	0x024B5D94 LDR X3, [X8 + 0x28]
	0x024B5D98 BL 0x2D0F1A4
	0x024B5D9C MOV X0, X20
	0x024B5DA0 MOV X1, X21
	0x024B5DA4 MOV X2, X31
	0x024B5DA8 MOV X3, X31
	0x024B5DAC MOV X4, X31
	0x024B5DB0 BL 0x3BFE3B0
	0x024B5DB4 LDR X8, [X19 + 0x20]
	0x024B5DB8 MOV X20, X0
	0x024B5DBC LDRB W9, [X8 + 0x135]
	0x024B5DC0 TBNZ X9, 0x0, 0x24B5DD0
	0x024B5DC4 MOV X0, X8
	0x024B5DC8 BL 0x1C5C684
	0x024B5DCC MOV X8, X0
	0x024B5DD0 LDR X8, [X8 + 0xC0]
	0x024B5DD4 LDR X0, [X8 + 0x8]
	0x024B5DD8 LDRB W8, [X0 + 0x135]
	0x024B5DDC TBNZ X8, 0x0, 0x24B5DE4
	0x024B5DE0 BL 0x1C5C684
	0x024B5DE4 LDR X8, [X0 + 0xB8]
	0x024B5DE8 STR X20, [X8]
	0x024B5DEC LDR X0, [X19 + 0x20]
	0x024B5DF0 LDRB W8, [X0 + 0x135]
	0x024B5DF4 TBNZ X8, 0x0, 0x24B5DFC
	0x024B5DF8 BL 0x1C5C684
	0x024B5DFC LDR X8, [X0 + 0xC0]
	0x024B5E00 LDR X0, [X8 + 0x8]
	0x024B5E04 LDRB W8, [X0 + 0x135]
	0x024B5E08 TBNZ X8, 0x0, 0x24B5E10
	0x024B5E0C BL 0x1C5C684
	0x024B5E10 LDR X8, [X0 + 0xB8]
	0x024B5E14 LDP X20, X19, [X31 + 0x20]
	0x024B5E18 LDP X22, X21, [X31 + 0x10]
	0x024B5E1C LDR X0, [X8]
	0x024B5E20 LDR X30, [X31], #0x30
	0x024B5E24 RET
	0x024B5E28 SUB X31, X31, 0xF0
	0x024B5E2C STP X30, X23, [X31 + 0xC0]
	0x024B5E30 STP X22, X21, [X31 + 0xD0]
	0x024B5E34 STP X20, X19, [X31 + 0xE0]
	0x024B5E38 ADRP X23, 0x1F24000
	0x024B5E3C STR X2, [X31 + 0xB8]
	0x024B5E40 ADRP X22, 0x1C67000
	0x024B5E44 LDRB W8, [X23 + 0xBDA]
	0x024B5E48 LDR X22, [X22 + 0xEF0]
	0x024B5E4C MOV X20, X5
	0x024B5E50 MOV X21, X1
	0x024B5E54 MOV X19, X0
	0x024B5E58 TBNZ X8, 0x0, 0x24B5E70
	0x024B5E5C ADRP X0, 0x1C67000
	0x024B5E60 LDR X0, [X0 + 0xEF0]
	0x024B5E64 BL 0x1C16CF4
	0x024B5E68 MOVZ W8, 0x1
	0x024B5E6C STRB W8, [X23 + 0xBDA]
	0x024B5E70 MOVI V0.2D, 0x0
	0x024B5E74 MOV X0, X21
	0x024B5E78 MOV X1, X31
	0x024B5E7C STR X31, [X31 + 0xB0]
	0x024B5E80 STP V0, V0, [X31 + 0x90]
	0x024B5E84 STR V0, [X31 + 0x8]
	0x024B5E88 BL 0x33C6948
	0x024B5E8C LDR X22, [X22]
	0x024B5E90 MOV X21, X0
	0x024B5E94 LDR X8, [X22 + 0x38]
	0x024B5E98 CBNZ X8, 0x24B5EA8
	0x024B5E9C MOV X0, X22
	0x024B5EA0 BL 0x1C5C6E0
	0x024B5EA4 LDR X8, [X22 + 0x38]
	0x024B5EA8 LDR X2, [X8 + 0x8]
	0x024B5EAC ADD X1, X31, 0x80
	0x024B5EB0 MOV X0, X21
	0x024B5EB4 BL 0x22A7354
	0x024B5EB8 ADD X0, X31, 0xB8
	0x024B5EBC MOV X1, X31
	0x024B5EC0 BL 0x33C68D4
	0x024B5EC4 CMP W0, 0x1
	0x024B5EC8 B.EQ 0x24B5F10
	0x024B5ECC CBNZ W0, 0x24B5F60
	0x024B5ED0 LDP V0, V1, [X31 + 0x80]
	0x024B5ED4 LDR V2, [X31 + 0xA]
	0x024B5ED8 LDR X8, [X31 + 0xB0]
	0x024B5EDC STP V0, V1, [X31 + 0x40]
	0x024B5EE0 STR V2, [X31 + 0x6]
	0x024B5EE4 STR X8, [X31 + 0x70]
	0x024B5EE8 LDR X0, [X20 + 0x20]
	0x024B5EEC LDRB W8, [X0 + 0x135]
	0x024B5EF0 TBNZ X8, 0x0, 0x24B5EF8
	0x024B5EF4 BL 0x1C5C684
	0x024B5EF8 LDR X8, [X0 + 0xC0]
	0x024B5EFC ADD X1, X31, 0x40
	0x024B5F00 MOV X0, X19
	0x024B5F04 LDR X2, [X8 + 0x40]
	0x024B5F08 BL 0x36E2D9C
	0x024B5F0C B 0x24B5F4C
	0x024B5F10 LDP V0, V1, [X31 + 0x80]
	0x024B5F14 LDR V2, [X31 + 0xA]
	0x024B5F18 LDR X8, [X31 + 0xB0]
	0x024B5F1C STP V0, V1, [X31]
	0x024B5F20 STR V2, [X31 + 0x2]
	0x024B5F24 STR X8, [X31 + 0x30]
	0x024B5F28 LDR X0, [X20 + 0x20]
	0x024B5F2C LDRB W8, [X0 + 0x135]
	0x024B5F30 TBNZ X8, 0x0, 0x24B5F38
	0x024B5F34 BL 0x1C5C684
	0x024B5F38 LDR X8, [X0 + 0xC0]
	0x024B5F3C ADD X1, X31, 0x0
	0x024B5F40 MOV X0, X19
	0x024B5F44 LDR X2, [X8 + 0x48]
	0x024B5F48 BL 0x36E2DA0

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D8
	003 Move [X31+32], X29
	004 Move [X31+40], X30
	005 Move [X31+48], X28
	006 Move [X31+56], X27
	007 Move [X31+64], X26
	008 Move [X31+72], X25
	009 Move [X31+80], X24
	010 Move [X31+88], X23
	011 Move [X31+96], X22
	012 Move [X31+104], X21
	013 Move [X31+112], X20
	014 Move [X31+120], X19
	015 Move W20, W2
	016 Move W21, W1
	017 Add W31, W2, 1
	018 Move X22, X0
	019 Move [X31+24], X3
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X8, [X22+24]
	022 Compare X8, 0
	023 JumpIfEqual {132}
	024 Move W9, [X8+24]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Add W24, W21, W20
	027 Move W9, W21
	028 Move X9, W9
	029 Add X8, X8, X9
	030 Move X8, [X8+32]
	031 Move X25, [X8+40]
	032 Move [X31+8], X8
	033 Move S8, W25
	034 Move W8, [X22+36]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X8, [X22+24]
	037 Compare X8, 0
	038 JumpIfEqual {132}
	039 Move W9, [X8+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X23, [X22+16]
	042 Compare X23, 0
	043 JumpIfEqual {132}
	044 Move X9, [X31+24]
	045 Move W27, W24
	046 Add X8, X8, X27
	047 Move X29, [X8+32]
	048 Move X28, [X8+40]
	049 Move X9, [X9+32]
	050 Move X9, [X9+192]
	051 Move X1, [X9+24]
	052 Move W9, [X1+309]
	053 Move TEMP, X9
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {60}
	057 Move X0, X1
	058 Call 0x1C5D684
	059 Move X1, X0
	060 Move X8, [X23]
	061 NotImplemented "Instruction LDRH not yet implemented."
	062 Compare X9, 0
	063 JumpIfEqual {70}
	064 Move X10, [X8+176]
	065 Add X10, X10, 8
	066 NotImplemented "Instruction LDUR not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Subtract X9, X9, 1
	069 Add X10, X10, 16
	070 Move X0, X23
	071 Move W2, W31
	072 Call 0x1C5D788
	073 NotImplemented "Instruction LDRSW not yet implemented."
	074 Add X8, X8, X9
	075 Add X0, X8, 312
	076 Move X8, [X0]
	077 Move X1, [X0+8]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move S1, W28
	080 NotImplemented "Instruction CSET not yet implemented."
	081 Add W31, W20, 1
	082 Move X0, X23
	083 Move V0, V8
	084 NotImplemented "Instruction CSET not yet implemented."
	085 NotImplemented "Instruction BLR not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CSET not yet implemented."
	088 And W9, W26, W8
	089 NotImplemented "Instruction CSET not yet implemented."
	090 Move TEMP, X9
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfEqual {97}
	094 And W8, W19, W8
	095 Compare W8, 0
	096 JumpIfEqual {117}
	097 Move X8, [X22+24]
	098 Compare X8, 0
	099 JumpIfEqual {132}
	100 Move W9, [X8+24]
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X9, W21
	103 Add X8, X8, X9
	104 Move [X8+32], X29
	105 Move [X8+40], X28
	106 Move X8, [X22+24]
	107 Compare X8, 0
	108 JumpIfEqual {132}
	109 Move W9, [X8+24]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move X9, [X31+8]
	112 Add X8, X8, X27
	113 Add W24, W24, W20
	114 Add W21, W21, W20
	115 Move [X8+32], X9
	116 Move [X8+40], X25
	117 Move X20, [X31+112]
	118 Move X19, [X31+120]
	119 Move X22, [X31+96]
	120 Move X21, [X31+104]
	121 Move X24, [X31+80]
	122 Move X23, [X31+88]
	123 Move X26, [X31+64]
	124 Move X25, [X31+72]
	125 Move X28, [X31+48]
	126 Move X27, [X31+56]
	127 Move X29, [X31+32]
	128 Move X30, [X31+40]
	129 Move V8, [X31+16]
	130 Add X31, X31, 128
	131 Return 
	132 Call 0x1C17F20
	133 Call 0x1C17F28
	134 Move X0, 0x1C47000
	135 Move X0, [X0+1400]
	136 Call 0x1C17D08
	137 Call 0x1C17F10
	138 Move X20, X0
	139 Move X0, 0x1C68000
	140 Move X0, [X0+3808]
	141 Call 0x1C17D08
	142 Move X1, X0
	143 Move X0, X20
	144 Move X2, X31
	145 Call ArgumentException..ctor, X0, X1
	146 Move X1, [X31+24]
	147 Move X0, X20
	148 Call 0x1C17DEC

Method: TItem GetHighest()

Disassembly:
	0x024B5F4C LDP X20, X19, [X31 + 0xE0]
	0x024B5F50 LDP X22, X21, [X31 + 0xD0]
	0x024B5F54 LDP X30, X23, [X31 + 0xC0]
	0x024B5F58 ADD X31, X31, 0xF0
	0x024B5F5C RET
	0x024B5F60 ADRP X0, 0x1C47000
	0x024B5F64 LDR X0, [X0 + 0x758]
	0x024B5F68 BL 0x1C16D08
	0x024B5F6C BL 0x1C16F10
	0x024B5F70 MOV X19, X0
	0x024B5F74 ADRP X0, 0x1C67000
	0x024B5F78 LDR X0, [X0 + 0xEF8]
	0x024B5F7C BL 0x1C16D08
	0x024B5F80 MOV X1, X0
	0x024B5F84 MOV X0, X19
	0x024B5F88 MOV X2, X31
	0x024B5F8C BL 0x33802E4
	0x024B5F90 MOV X0, X19
	0x024B5F94 MOV X1, X20
	0x024B5F98 BL 0x1C16DEC
	0x024B5F9C STR X30, [X31 - 0x30]!
	0x024B5FA0 STP X22, X21, [X31 + 0x10]
	0x024B5FA4 STP X20, X19, [X31 + 0x20]
	0x024B5FA8 ADRP X20, 0x1F24000
	0x024B5FAC LDRB W8, [X20 + 0xBDB]
	0x024B5FB0 MOV X19, X0
	0x024B5FB4 TBNZ X8, 0x0, 0x24B5FCC
	0x024B5FB8 ADRP X0, 0x1C3E000
	0x024B5FBC LDR X0, [X0 + 0x6C0]
	0x024B5FC0 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+36]
	005 Compare W8, 0
	006 JumpIfEqual {18}
	007 Move X8, [X0+24]
	008 Compare X8, 0
	009 JumpIfEqual {34}
	010 Move W9, [X8+24]
	011 Compare W9, 0
	012 JumpIfEqual {35}
	013 Move X0, [X8+32]
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X30, [X31+32]
	017 Return X0
	018 Move X0, 0x1C3F000
	019 Move X0, [X0+2000]
	020 Move X19, X1
	021 Call 0x1C17D08
	022 Call 0x1C17F10
	023 Move X20, X0
	024 Move X0, 0x1C68000
	025 Move X0, [X0+3816]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X20
	029 Move X2, X31
	030 Call Exception..ctor, X0, X1
	031 Move X0, X20
	032 Move X1, X19
	033 Call 0x1C17DEC
	034 Call 0x1C17F20
	035 Call 0x1C17F28

Method: TPriority GetHighestPriority()

Disassembly:
	0x024B5FC4 MOVZ W8, 0x1
	0x024B5FC8 STRB W8, [X20 + 0xBDB]
	0x024B5FCC LDR X0, [X19 + 0x20]
	0x024B5FD0 LDRB W8, [X0 + 0x135]
	0x024B5FD4 TBNZ X8, 0x0, 0x24B5FDC
	0x024B5FD8 BL 0x1C5C684
	0x024B5FDC LDR X8, [X0 + 0xC0]
	0x024B5FE0 LDR X0, [X8 + 0x8]
	0x024B5FE4 LDRB W8, [X0 + 0x135]
	0x024B5FE8 TBNZ X8, 0x0, 0x24B5FF0
	0x024B5FEC BL 0x1C5C684
	0x024B5FF0 LDR X8, [X0 + 0xB8]
	0x024B5FF4 MOV X1, X31
	0x024B5FF8 MOV X2, X31
	0x024B5FFC LDR X0, [X8]
	0x024B6000 BL 0x33BE5B0
	0x024B6004 TBZ X0, 0x0, 0x24B612C
	0x024B6008 LDR X0, [X19 + 0x20]
	0x024B600C ADRP X20, 0x1C3D000
	0x024B6010 LDRB W8, [X0 + 0x135]
	0x024B6014 LDR X20, [X20 + 0x6C0]
	0x024B6018 TBNZ X8, 0x0, 0x24B6020
	0x024B601C BL 0x1C5C684
	0x024B6020 LDR X8, [X20]
	0x024B6024 LDR X9, [X0 + 0xC0]
	0x024B6028 LDR W10, [X8 + 0xE0]
	0x024B602C LDR X20, [X9 + 0x10]
	0x024B6030 CBNZ W10, 0x24B603C
	0x024B6034 MOV X0, X8
	0x024B6038 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+36]
	005 Compare W8, 0
	006 JumpIfEqual {18}
	007 Move X8, [X0+24]
	008 Compare X8, 0
	009 JumpIfEqual {34}
	010 Move W9, [X8+24]
	011 Compare W9, 0
	012 JumpIfEqual {35}
	013 Move V0, [X8+40]
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X30, [X31+32]
	017 Return X0
	018 Move X0, 0x1C3F000
	019 Move X0, [X0+2000]
	020 Move X19, X1
	021 Call 0x1C17D08
	022 Call 0x1C17F10
	023 Move X20, X0
	024 Move X0, 0x1C67000
	025 Move X0, [X0+3816]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X20
	029 Move X2, X31
	030 Call Exception..ctor, X0, X1
	031 Move X0, X20
	032 Move X1, X19
	033 Call 0x1C17DEC
	034 Call 0x1C17F20
	035 Call 0x1C17F28

