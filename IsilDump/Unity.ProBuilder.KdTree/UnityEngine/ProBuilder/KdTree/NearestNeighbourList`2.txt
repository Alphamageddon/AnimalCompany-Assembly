Type: UnityEngine.ProBuilder.KdTree.NearestNeighbourList`2

Method: System.Void .ctor(System.Int32 maxCapacity, UnityEngine.ProBuilder.KdTree.ITypeMath`1<TDistance> distanceMath)

Disassembly:
	0x0240ABF8 BL 0x1C5C684
	0x0240ABFC MOV X1, X0
	0x0240AC00 STUR W23, [X29 - 0xC]
	0x0240AC04 LDR X8, [X22]
	0x0240AC08 LDRH W9, [X8 + 0x12E]
	0x0240AC0C CBZ X9, 0x240AC30
	0x0240AC10 LDR X10, [X8 + 0xB0]
	0x0240AC14 ADD X10, X10, 0x8
	0x0240AC18 LDUR X11, [X10 - 0x8]
	0x0240AC1C CMP X11, X1
	0x0240AC20 B.EQ 0x240AC40
	0x0240AC24 SUBS X9, X9, 0x1
	0x0240AC28 ADD X10, X10, 0x10
	0x0240AC2C B.NE 0x240AC18
	0x0240AC30 MOV X0, X22
	0x0240AC34 MOV W2, W31
	0x0240AC38 BL 0x1C5C788
	0x0240AC3C B 0x240AC4C
	0x0240AC40 LDRSW X9, [X10]
	0x0240AC44 ADD X8, X8, X9, 0x4, LSL
	0x0240AC48 ADD X0, X8, 0x138
	0x0240AC4C SUB X8, X29, 0xC
	0x0240AC50 STP X8, X21, [X29 - 0x20]
	0x0240AC54 STUR X24, [X29 - 0x28]
	0x0240AC58 LDR X1, [X0 + 0x8]
	0x0240AC5C SUB X3, X29, 0x28
	0x0240AC60 MOV X2, X22
	0x0240AC64 MOV X4, X21
	0x0240AC68 LDP X0, X8, [X1 + 0x8]
	0x0240AC6C BLR X8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, W1
	007 Move X1, X31
	008 Move X22, X3
	009 Move X20, X2
	010 Move X19, X0
	011 Call Object..ctor, X0
	012 Move [X19+32], W21
	013 Move [X19+24], X20
	014 Move X8, [X22+32]
	015 Move X8, [X8+192]
	016 Move X0, [X8+16]
	017 Move W8, [X0+309]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {23}
	022 Call 0x1C5D684
	023 Call 0x1C17F10
	024 Move X8, [X22+32]
	025 Move W1, W21
	026 Move X2, X20
	027 Move X22, X0
	028 Move X8, [X8+192]
	029 Move X3, [X8+24]
	030 Call 0x24B5A90, X0, X1, X2
	031 Move [X19+16], X22
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X30, [X31+48]
	037 Return 

Method: System.Int32 get_MaxCapacity()

Disassembly:
	0x0240AC70 MOV X0, X19
	0x0240AC74 MOV X1, X21

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Int32 get_Count()

Disassembly:
	0x0240AC78 MOV X2, X20
	0x0240AC7C BL 0x3EB1AC0
	0x0240AC80 LDR X8, [X26 + 0x28]
	0x0240AC84 LDUR X9, [X29 - 0x8]
	0x0240AC88 CMP X8, X9
	0x0240AC8C B.NE 0x240ACD8
	0x0240AC90 ADD X31, X29, 0x0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+36]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Boolean Add(TItem item, TDistance distance)

Disassembly:
	0x0240AC94 LDP X20, X19, [X31 + 0x40]
	0x0240AC98 LDP X22, X21, [X31 + 0x30]
	0x0240AC9C LDP X24, X23, [X31 + 0x20]
	0x0240ACA0 LDP X26, X25, [X31 + 0x10]
	0x0240ACA4 LDP X29, X30, [X31], #0x50
	0x0240ACA8 RET
	0x0240ACAC ADRP X0, 0x1CF3000
	0x0240ACB0 LDR X0, [X0 + 0xF78]
	0x0240ACB4 BL 0x1C16D08
	0x0240ACB8 BL 0x1C16F10
	0x0240ACBC MOV X1, X31
	0x0240ACC0 MOV X19, X0
	0x0240ACC4 BL 0x3379B10
	0x0240ACC8 MOV X0, X19
	0x0240ACCC MOV X1, X24
	0x0240ACD0 BL 0x1C16DEC
	0x0240ACD4 BL 0x1C16F20
	0x0240ACD8 BL 0x3EB1B20
	0x0240ACDC STR X1, [X0]
	0x0240ACE0 STR W2, [X0 + 0x8]
	0x0240ACE4 STR X3, [X0 + 0x10]
	0x0240ACE8 RET
	0x0240ACEC LDR W0, [X0 + 0x8]
	0x0240ACF0 RET
	0x0240ACF4 STP X30, X21, [X31 - 0x20]!
	0x0240ACF8 STP X20, X19, [X31 + 0x10]
	0x0240ACFC LDR W9, [X0 + 0x8]
	0x0240AD00 MOV X21, X2
	0x0240AD04 CMP W9, W1
	0x0240AD08 B.LS 0x240ADB0
	0x0240AD0C LDR X20, [X0 + 0x10]
	0x0240AD10 MOV X8, X0
	0x0240AD14 CBZ X20, 0x240ADD8
	0x0240AD18 LDR X0, [X21 + 0x20]
	0x0240AD1C LDR X21, [X8]
	0x0240AD20 MOV W19, W1
	0x0240AD24 LDRB W9, [X0 + 0x135]
	0x0240AD28 TBNZ X9, 0x0, 0x240AD30
	0x0240AD2C BL 0x1C5C684
	0x0240AD30 LDR X8, [X0 + 0xC0]
	0x0240AD34 LDR X1, [X8 + 0x8]
	0x0240AD38 LDRB W8, [X1 + 0x135]
	0x0240AD3C TBNZ X8, 0x0, 0x240AD4C
	0x0240AD40 MOV X0, X1
	0x0240AD44 BL 0x1C5C684
	0x0240AD48 MOV X1, X0
	0x0240AD4C LDR X8, [X20]
	0x0240AD50 LDRH W9, [X8 + 0x12E]
	0x0240AD54 CBZ X9, 0x240AD78
	0x0240AD58 LDR X10, [X8 + 0xB0]
	0x0240AD5C ADD X10, X10, 0x8
	0x0240AD60 LDUR X11, [X10 - 0x8]
	0x0240AD64 CMP X11, X1
	0x0240AD68 B.EQ 0x240AD88
	0x0240AD6C SUBS X9, X9, 0x1
	0x0240AD70 ADD X10, X10, 0x10
	0x0240AD74 B.NE 0x240AD60
	0x0240AD78 MOV X0, X20
	0x0240AD7C MOV W2, W31
	0x0240AD80 BL 0x1C5C788
	0x0240AD84 B 0x240AD94
	0x0240AD88 LDRSW X9, [X10]
	0x0240AD8C ADD X8, X8, X9, 0x4, LSL
	0x0240AD90 ADD X0, X8, 0x138
	0x0240AD94 LDP X4, X3, [X0]
	0x0240AD98 MOV X0, X20
	0x0240AD9C MOV W2, W19
	0x0240ADA0 LDP X20, X19, [X31 + 0x10]
	0x0240ADA4 MOV X1, X21
	0x0240ADA8 LDP X30, X21, [X31], #0x20
	0x0240ADAC BR X4
	0x0240ADB0 ADRP X0, 0x1CF3000
	0x0240ADB4 LDR X0, [X0 + 0xF78]
	0x0240ADB8 BL 0x1C16D08
	0x0240ADBC BL 0x1C16F10
	0x0240ADC0 MOV X1, X31

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, X0
	009 Move X0, [X0+16]
	010 Compare X0, 0
	011 JumpIfEqual {89}
	012 Move X8, [X2+32]
	013 Move W9, [X0+36]
	014 Move W10, [X21+32]
	015 Move X20, X2
	016 Move X8, [X8+192]
	017 Move V8, V0
	018 Move X19, X1
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X1, [X8+48]
	021 Move X22, [X21+24]
	022 Call 0x24B5FC4, X0
	023 Compare X22, 0
	024 JumpIfEqual {89}
	025 Move X8, [X20+32]
	026 Move V9, V0
	027 Move X8, [X8+192]
	028 Move X1, [X8+8]
	029 Move W8, [X1+309]
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {37}
	034 Move X0, X1
	035 Call 0x1C5D684
	036 Move X1, X0
	037 Move X8, [X22]
	038 NotImplemented "Instruction LDRH not yet implemented."
	039 Compare X9, 0
	040 JumpIfEqual {47}
	041 Move X10, [X8+176]
	042 Add X10, X10, 8
	043 NotImplemented "Instruction LDUR not yet implemented."
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Subtract X9, X9, 1
	046 Add X10, X10, 16
	047 Move X0, X22
	048 Move W2, W31
	049 Call 0x1C5D788
	050 NotImplemented "Instruction LDRSW not yet implemented."
	051 Add X8, X8, X9
	052 Add X0, X8, 312
	053 Move X8, [X0]
	054 Move X1, [X0+8]
	055 Move X0, X22
	056 Move V0, V8
	057 Move V1, V9
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Move TEMP, X0
	060 And TEMP, TEMP, -2147483648
	061 Compare TEMP, -2147483648
	062 JumpIfEqual {64}
	063 Move W0, W31
	064 Move X0, [X21+16]
	065 Compare X0, 0
	066 JumpIfEqual {89}
	067 Move X8, [X20+32]
	068 Move X8, [X8+192]
	069 Move X1, [X8+64]
	070 Call 0x24B5C40, X0
	071 Move X0, [X21+16]
	072 Compare X0, 0
	073 JumpIfEqual {89}
	074 Move X8, [X20+32]
	075 Move X8, [X8+192]
	076 Move X2, [X8+80]
	077 Move X1, X19
	078 Move V0, V8
	079 Call 0x24B5BA4, X0, X1, X2
	080 Move W0, 1
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X30, [X31+16]
	086 Move D9, [X31+64]
	087 Move D8, [X31+72]
	088 Return X0
	089 Call 0x1C17F20

Method: TItem GetFurtherest()

Disassembly:
	0x0240ADC4 MOV X19, X0
	0x0240ADC8 BL 0x3379B10
	0x0240ADCC MOV X0, X19
	0x0240ADD0 MOV X1, X21
	0x0240ADD4 BL 0x1C16DEC
	0x0240ADD8 BL 0x1C16F20
	0x0240ADDC STR X30, [X31 - 0x30]!
	0x0240ADE0 STP X22, X21, [X31 + 0x10]
	0x0240ADE4 STP X20, X19, [X31 + 0x20]
	0x0240ADE8 LDR W9, [X0 + 0x8]
	0x0240ADEC MOV X22, X3
	0x0240ADF0 CMP W9, W1
	0x0240ADF4 B.LS 0x240AEAC
	0x0240ADF8 LDR X21, [X0 + 0x10]
	0x0240ADFC MOV X8, X0
	0x0240AE00 CBZ X21, 0x240AED4
	0x0240AE04 LDR X0, [X22 + 0x20]
	0x0240AE08 LDR X22, [X8]
	0x0240AE0C MOV W19, W1
	0x0240AE10 MOV W20, W2
	0x0240AE14 LDRB W9, [X0 + 0x135]
	0x0240AE18 TBNZ X9, 0x0, 0x240AE20
	0x0240AE1C BL 0x1C5C684
	0x0240AE20 LDR X8, [X0 + 0xC0]
	0x0240AE24 LDR X1, [X8 + 0x8]
	0x0240AE28 LDRB W8, [X1 + 0x135]
	0x0240AE2C TBNZ X8, 0x0, 0x240AE3C
	0x0240AE30 MOV X0, X1
	0x0240AE34 BL 0x1C5C684

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, [X0+16]
	005 Compare X0, 0
	006 JumpIfEqual {18}
	007 Move W8, [X0+36]
	008 Compare W8, 0
	009 JumpIfEqual {19}
	010 Move X8, [X1+32]
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X8, [X8+192]
	014 Move X1, [X8+96]
	015 Move X30, [X31+32]
	016 Call 0x24B5F4C, X0
	017 Return X0
	018 Call 0x1C17F20
	019 Move X0, 0x1CEA000
	020 Move X0, [X0+2000]
	021 Move X19, X1
	022 Call 0x1C17D08
	023 Call 0x1C17F10
	024 Move X20, X0
	025 Move X0, 0x1D13000
	026 Move X0, [X0+3040]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X20
	030 Move X2, X31
	031 Call Exception..ctor, X0, X1
	032 Move X0, X20
	033 Move X1, X19
	034 Call 0x1C17DEC

Method: TDistance GetFurtherestDistance()

Disassembly:
	0x0240AE38 MOV X1, X0
	0x0240AE3C LDR X8, [X21]
	0x0240AE40 LDRH W9, [X8 + 0x12E]
	0x0240AE44 CBZ X9, 0x240AE68
	0x0240AE48 LDR X10, [X8 + 0xB0]
	0x0240AE4C ADD X10, X10, 0x8
	0x0240AE50 LDUR X11, [X10 - 0x8]
	0x0240AE54 CMP X11, X1
	0x0240AE58 B.EQ 0x240AE78
	0x0240AE5C SUBS X9, X9, 0x1
	0x0240AE60 ADD X10, X10, 0x10
	0x0240AE64 B.NE 0x240AE50
	0x0240AE68 MOVZ W2, 0x1
	0x0240AE6C MOV X0, X21
	0x0240AE70 BL 0x1C5C788
	0x0240AE74 B 0x240AE88
	0x0240AE78 LDR W9, [X10]
	0x0240AE7C ADD W9, W9, 0x1
	0x0240AE80 ADD X8, X8, W9, 0x4, SXTW
	0x0240AE84 ADD X0, X8, 0x138
	0x0240AE88 LDP X5, X4, [X0]
	0x0240AE8C AND W3, W20, 0x1
	0x0240AE90 MOV X0, X21
	0x0240AE94 MOV X1, X22
	0x0240AE98 MOV W2, W19
	0x0240AE9C LDP X20, X19, [X31 + 0x20]
	0x0240AEA0 LDP X22, X21, [X31 + 0x10]
	0x0240AEA4 LDR X30, [X31], #0x30
	0x0240AEA8 BR X5

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, [X0+16]
	005 Compare X0, 0
	006 JumpIfEqual {18}
	007 Move W8, [X0+36]
	008 Compare W8, 0
	009 JumpIfEqual {19}
	010 Move X8, [X1+32]
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X8, [X8+192]
	014 Move X1, [X8+48]
	015 Move X30, [X31+32]
	016 Call 0x24B5FC4, X0
	017 Return X0
	018 Call 0x1C17F20
	019 Move X0, 0x1CEA000
	020 Move X0, [X0+2000]
	021 Move X19, X1
	022 Call 0x1C17D08
	023 Call 0x1C17F10
	024 Move X20, X0
	025 Move X0, 0x1D13000
	026 Move X0, [X0+3040]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X20
	030 Move X2, X31
	031 Call Exception..ctor, X0, X1
	032 Move X0, X20
	033 Move X1, X19
	034 Call 0x1C17DEC

Method: TItem RemoveFurtherest()

Disassembly:
	0x0240AEAC ADRP X0, 0x1CF3000
	0x0240AEB0 LDR X0, [X0 + 0xF78]
	0x0240AEB4 BL 0x1C16D08
	0x0240AEB8 BL 0x1C16F10
	0x0240AEBC MOV X1, X31
	0x0240AEC0 MOV X19, X0
	0x0240AEC4 BL 0x3379B10
	0x0240AEC8 MOV X0, X19
	0x0240AECC MOV X1, X22

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X1+32]
	006 Move X8, [X8+192]
	007 Move X1, [X8+64]
	008 Move X30, [X31+16]
	009 Call 0x24B5C40, X0
	010 Return X0
	011 Call 0x1C17F20

Method: System.Boolean get_IsCapacityReached()

Disassembly:
	0x0240AED0 BL 0x1C16DEC
	0x0240AED4 BL 0x1C16F20
	0x0240AED8 SUB X31, X31, 0x30
	0x0240AEDC STP X30, X21, [X31 + 0x10]
	0x0240AEE0 STP X20, X19, [X31 + 0x20]
	0x0240AEE4 LDR X8, [X2 + 0x20]
	0x0240AEE8 MOV X19, X2
	0x0240AEEC MOV W20, W1
	0x0240AEF0 MOV X21, X0
	0x0240AEF4 LDRB W9, [X8 + 0x135]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move W8, [X8+36]
	006 Move W9, [X0+32]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

