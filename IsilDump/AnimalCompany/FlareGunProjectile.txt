Type: FlareGunProjectile

Method: Fusion.TickTimer get_aliveTimer()

Disassembly:
	0x01D32320 STRB W8, [X22 + 0x6BF]
	0x01D32324 LDR X0, [X21]
	0x01D32328 LDR W8, [X0 + 0xE0]
	0x01D3232C CBNZ W8, 0x1D32338
	0x01D32330 BL 0x1C16DFC
	0x01D32334 LDR X0, [X21]
	0x01D32338 LDR X8, [X0 + 0xB8]
	0x01D3233C LDR X8, [X8 + 0x10]
	0x01D32340 CBZ X8, 0x1D32388
	0x01D32344 LDR W9, [X8 + 0x18]
	0x01D32348 CMP W9, W20
	0x01D3234C B.LS 0x1D3238C
	0x01D32350 MOVZ W9, 0x48
	0x01D32354 SMADDL X8, X20, X9, X8
	0x01D32358 ADD X1, X8, 0x20
	0x01D3235C ADD X0, X31, 0x8
	0x01D32360 MOVZ W2, 0x48
	0x01D32364 BL 0x3EB1AC0
	0x01D32368 ADD X1, X31, 0x8
	0x01D3236C MOV X0, X19
	0x01D32370 BL 0x1D32390
	0x01D32374 LDP X20, X19, [X31 + 0x70]
	0x01D32378 LDP X22, X21, [X31 + 0x60]
	0x01D3237C LDR X30, [X31 + 0x50]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x23C2000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x23C2000
	016 Move X0, [X0+1464]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x23C2000
	023 Move X0, [X0+1472]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_aliveTimer(Fusion.TickTimer value)

Disassembly:
	0x01D32380 ADD X31, X31, 0x80
	0x01D32384 RET
	0x01D32388 BL 0x1C16F20
	0x01D3238C BL 0x1C16F28
	0x01D32390 SUB X31, X31, 0x40
	0x01D32394 STR D8, [X31 + 0x10]
	0x01D32398 STR X30, [X31 + 0x18]
	0x01D3239C STP X22, X21, [X31 + 0x20]
	0x01D323A0 STP X20, X19, [X31 + 0x30]
	0x01D323A4 ADRP X22, 0x26A6000
	0x01D323A8 ADRP X21, 0x23C1000
	0x01D323AC LDRB W8, [X22 + 0x6C1]
	0x01D323B0 LDR X21, [X21 + 0x5A8]
	0x01D323B4 MOV X20, X1
	0x01D323B8 MOV X19, X0
	0x01D323BC TBNZ X8, 0x0, 0x1D323D4
	0x01D323C0 ADRP X0, 0x23C1000
	0x01D323C4 LDR X0, [X0 + 0x5A8]
	0x01D323C8 BL 0x1C16CF4
	0x01D323CC MOVZ W8, 0x1
	0x01D323D0 STRB W8, [X22 + 0x6C1]
	0x01D323D4 LDUR V1, [X20 + 0xC]
	0x01D323D8 MOVI V5.2S, 0x3F
	0x01D323DC LDR W8, [X20 + 0x24]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x23C2000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x23C2000
	016 Move X0, [X0+1464]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x23C2000
	023 Move X0, [X0+1480]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void Spawned()

Disassembly:
	0x01D323E0 LDR V0, [X20 + 0x28]
	0x01D323E4 AND V1.8B, V1.8B, V5.8B
	0x01D323E8 UNIMPLEMENTED
	0x01D323EC LDR W12, [X20 + 0x18]
	0x01D323F0 UNIMPLEMENTED
	0x01D323F4 UNIMPLEMENTED
	0x01D323F8 LDUR V3, [X20 + 0x1C]
	0x01D323FC LDR X0, [X21]
	0x00000000 INVALID
	0x01D32404 LDP W9, W10, [X20]
	0x01D32408 AND W8, W8, W19, 0x0
	0x01D3240C UNIMPLEMENTED

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call NetworkBehaviour.Spawned, X0
	006 Move X0, [X19+56]
	007 Move V0, [X19+128]
	008 Move X1, X31
	009 Call TickTimer.CreateFromSeconds, X0, V0
	010 And X1, X0, 0
	011 Move X0, X19
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call FlareGunProjectile.set_aliveTimer, X0, X1
	015 Return 

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01D32410 LDR W11, [X20 + 0x8]
	0x01D32414 SXTW X8, W8
	0x01D32418 AND V0.8B, V0.8B, V1.8B
	0x01D3241C LDR V2, [X20 + 0x30]
	0x01D32420 LDUR V4, [X20 + 0x34]
	0x01D32424 SUB X8, X8, X12
	0x01D32428 UNIMPLEMENTED
	0x01D3242C SCVTF S5, X8
	0x01D32430 LDR W8, [X0 + 0xE0]
	0x01D32434 USUBW V0.2D, V0.4S, V3.4S
	0x01D32438 ADD W9, W10, W9
	0x01D3243C UNIMPLEMENTED
	0x01D32440 ADD W9, W9, W11
	0x01D32444 UNIMPLEMENTED
	0x01D32448 LSRV X19, X19, X9
	0x01D3244C FMUL S8, S2, S5
	0x00000000 INVALID
	0x01D32454 CBNZ W8, 0x1D32464
	0x01D32458 STR V2, [X31]
	0x01D3245C BL 0x1C16DFC
	0x01D32460 LDR V2, [X31]
	0x01D32464 FCVT S0, S8
	0x01D32468 UNIMPLEMENTED
	0x01D3246C FMUL D0, D0, D0
	0x00000000 INVALID
	0x01D32474 FADD D0, D0, D1
	0x01D32478 MOV D1, V1.D[1]
	0x01D3247C FMOV D3, 1
	0x01D32480 FADD D0, D0, D1
	0x01D32484 FSUB D0, D3, D0
	0x01D32488 FSQRT D0, D0
	0x00000000 INVALID
	0x01D32490 MOV S1, V2.S[1]
	0x01D32494 CBZ W19, 0x1D324B4
	0x01D32498 MOV V0.16B, V8.16B
	0x01D3249C CMP W19, 0x2
	0x01D324A0 B.EQ 0x1D324BC
	0x01D324A4 CMP W19, 0x1
	0x01D324A8 B.NE 0x1D324CC
	0x01D324AC MOV V8.16B, V3.16B
	0x01D324B0 B 0x1D324C4
	0x01D324B4 MOV V0.16B, V3.16B
	0x01D324B8 B 0x1D324C4
	0x01D324BC MOV V8.16B, V2.16B
	0x01D324C0 MOV V2.16B, V3.16B
	0x01D324C4 MOV V3.16B, V1.16B
	0x01D324C8 B 0x1D324D4
	0x01D324CC MOV V8.16B, V2.16B
	0x01D324D0 MOV V2.16B, V1.16B
	0x01D324D4 MOV V1.16B, V8.16B
	0x01D324D8 LDP X20, X19, [X31 + 0x30]
	0x01D324DC LDP X22, X21, [X31 + 0x20]
	0x01D324E0 LDR X30, [X31 + 0x18]
	0x01D324E4 LDR V8, [X31 + 0x10]
	0x01D324E8 ADD X31, X31, 0x40
	0x01D324EC RET
	0x01D324F0 SUB X31, X31, 0x80
	0x01D324F4 STR X30, [X31 + 0x50]
	0x01D324F8 STP X22, X21, [X31 + 0x60]
	0x01D324FC STP X20, X19, [X31 + 0x70]
	0x01D32500 ADRP X22, 0x26A6000
	0x01D32504 ADRP X21, 0x23C1000
	0x01D32508 LDRB W8, [X22 + 0x6C0]
	0x01D3250C LDR X21, [X21 + 0x630]
	0x01D32510 MOV W20, W1
	0x01D32514 MOV X19, X0
	0x01D32518 TBNZ X8, 0x0, 0x1D32530
	0x01D3251C ADRP X0, 0x23C1000
	0x01D32520 LDR X0, [X0 + 0x630]
	0x01D32524 BL 0x1C16CF4
	0x01D32528 MOVZ W8, 0x1
	0x01D3252C STRB W8, [X22 + 0x6C0]
	0x01D32530 LDR X0, [X21]
	0x01D32534 LDR W8, [X0 + 0xE0]
	0x01D32538 CBNZ W8, 0x1D32544
	0x01D3253C BL 0x1C16DFC
	0x01D32540 LDR X0, [X21]
	0x01D32544 LDR X8, [X0 + 0xB8]
	0x01D32548 LDR X8, [X8 + 0x10]
	0x01D3254C CBZ X8, 0x1D32594
	0x01D32550 LDR W9, [X8 + 0x18]
	0x01D32554 CMP W9, W20
	0x01D32558 B.LS 0x1D32598
	0x01D3255C MOVZ W9, 0x48
	0x01D32560 SMADDL X8, X20, X9, X8
	0x01D32564 ADD X1, X8, 0x20
	0x01D32568 ADD X0, X31, 0x8
	0x01D3256C MOVZ W2, 0x48
	0x01D32570 BL 0x3EB1AC0
	0x01D32574 ADD X1, X31, 0x8
	0x01D32578 MOV X0, X19
	0x01D3257C BL 0x1D32390
	0x01D32580 LDP X20, X19, [X31 + 0x70]
	0x01D32584 LDP X22, X21, [X31 + 0x60]
	0x01D32588 LDR X30, [X31 + 0x50]
	0x01D3258C ADD X31, X31, 0x80
	0x01D32590 RET
	0x01D32594 BL 0x1C16F20
	0x01D32598 BL 0x1C16F28
	0x01D3259C STP X30, X23, [X31 - 0x30]!
	0x01D325A0 STP X22, X21, [X31 + 0x10]
	0x01D325A4 STP X20, X19, [X31 + 0x20]
	0x01D325A8 ADRP X22, 0x26A6000
	0x01D325AC ADRP X23, 0x23C1000
	0x01D325B0 LDRB W8, [X22 + 0x6C2]
	0x01D325B4 LDR X23, [X23 + 0x630]
	0x01D325B8 MOV W20, W2
	0x01D325BC MOV W19, W1
	0x01D325C0 MOV X21, X0
	0x01D325C4 TBNZ X8, 0x0, 0x1D325DC
	0x01D325C8 ADRP X0, 0x23C1000
	0x01D325CC LDR X0, [X0 + 0x630]
	0x01D325D0 BL 0x1C16CF4
	0x01D325D4 MOVZ W8, 0x1
	0x01D325D8 STRB W8, [X22 + 0x6C2]
	0x01D325DC LDR X0, [X23]
	0x01D325E0 LDR W8, [X0 + 0xE0]
	0x01D325E4 CBNZ W8, 0x1D325EC
	0x01D325E8 BL 0x1C16DFC
	0x01D325EC MOV X0, X21
	0x01D325F0 MOV W1, W19
	0x01D325F4 MOV W2, W20
	0x01D325F8 BL 0x1D32610
	0x01D325FC UBFM W1, W19, 0x1D, 0x1C
	0x01D32600 LDP X20, X19, [X31 + 0x20]
	0x01D32604 LDP X22, X21, [X31 + 0x10]
	0x01D32608 LDP X30, X23, [X31], #0x30
	0x01D3260C B 0x1D3269C
	0x01D32610 STR X30, [X31 - 0x10]!
	0x01D32614 ADDS W31, W1, 0x1
	0x01D32618 B.NE 0x1D32624
	0x01D3261C CBZ X0, 0x1D32698
	0x01D32620 LDR W1, [X0 + 0x18]
	0x01D32624 CMP W1, 0x1
	0x01D32628 B.LT 0x1D32684
	0x01D3262C CBZ X0, 0x1D32698
	0x01D32630 LDR W11, [X0 + 0x18]
	0x01D32634 MOV W10, W2
	0x01D32638 MOV W13, W1
	0x01D3263C MOV X9, X31
	0x01D32640 MOV X8, X31
	0x01D32644 UBFM X12, X10, 0x20, 0x1F
	0x01D32648 UBFM X13, X13, 0x3D, 0x3C
	0x01D3264C MOVZ X14, 0x1
	0x01D32650 CMP X10, X11
	0x01D32654 B.CS 0x1D32694
	0x01D32658 ADD X15, X0, X12, 0x20, ASR
	0x01D3265C LDRB W15, [X15 + 0x20]
	0x01D32660 AND X16, X9, 0x3F
	0x01D32664 ADD X9, X9, 0x8
	0x01D32668 ADD X12, X12, X14
	0x01D3266C LSLV X15, X15, X16
	0x01D32670 CMP X13, X9
	0x01D32674 ORR X8, X15, X8, 0x0
	0x01D32678 ADD X10, X10, 0x1
	0x01D3267C B.NE 0x1D32650
	0x01D32680 B 0x1D32688
	0x01D32684 MOV X8, X31
	0x01D32688 MOV X0, X8
	0x01D3268C LDR X30, [X31], #0x10
	0x01D32690 RET
	0x01D32694 BL 0x1C16F28
	0x01D32698 BL 0x1C16F20
	0x01D3269C SUB X31, X31, 0x80
	0x01D326A0 STR X30, [X31 + 0x50]
	0x01D326A4 STP X22, X21, [X31 + 0x60]
	0x01D326A8 STP X20, X19, [X31 + 0x70]
	0x01D326AC ADRP X22, 0x26A6000
	0x01D326B0 ADRP X21, 0x23C1000
	0x01D326B4 LDRB W8, [X22 + 0x6C3]
	0x01D326B8 LDR X21, [X21 + 0x630]
	0x01D326BC MOV W20, W1
	0x01D326C0 MOV X19, X0
	0x01D326C4 TBNZ X8, 0x0, 0x1D326DC
	0x01D326C8 ADRP X0, 0x23C1000
	0x01D326CC LDR X0, [X0 + 0x630]
	0x01D326D0 BL 0x1C16CF4
	0x01D326D4 MOVZ W8, 0x1
	0x01D326D8 STRB W8, [X22 + 0x6C3]
	0x01D326DC LDR X0, [X21]
	0x01D326E0 LDR W8, [X0 + 0xE0]
	0x01D326E4 CBNZ W8, 0x1D326F0
	0x01D326E8 BL 0x1C16DFC
	0x01D326EC LDR X0, [X21]
	0x01D326F0 LDR X8, [X0 + 0xB8]
	0x01D326F4 LDR X8, [X8 + 0x10]
	0x01D326F8 CBZ X8, 0x1D32740
	0x01D326FC LDR W9, [X8 + 0x18]
	0x01D32700 CMP W9, W20
	0x01D32704 B.LS 0x1D32744
	0x01D32708 MOVZ W9, 0x48
	0x01D3270C SMADDL X8, X20, X9, X8
	0x01D32710 ADD X1, X8, 0x20
	0x01D32714 ADD X0, X31, 0x8
	0x01D32718 MOVZ W2, 0x48
	0x01D3271C BL 0x3EB1AC0
	0x01D32720 ADD X1, X31, 0x8
	0x01D32724 MOV X0, X19
	0x01D32728 BL 0x1D32390
	0x01D3272C LDP X20, X19, [X31 + 0x70]
	0x01D32730 LDP X22, X21, [X31 + 0x60]
	0x01D32734 LDR X30, [X31 + 0x50]
	0x01D32738 ADD X31, X31, 0x80
	0x01D3273C RET
	0x01D32740 BL 0x1C16F20
	0x01D32744 BL 0x1C16F28
	0x01D32748 SUB X31, X31, 0x80
	0x01D3274C STR X30, [X31 + 0x50]
	0x01D32750 STP X22, X21, [X31 + 0x60]
	0x01D32754 STP X20, X19, [X31 + 0x70]
	0x01D32758 ADRP X22, 0x26A6000
	0x01D3275C ADRP X21, 0x23C1000
	0x01D32760 LDRB W8, [X22 + 0x6C4]
	0x01D32764 LDR X21, [X21 + 0x630]
	0x01D32768 MOV W20, W1
	0x01D3276C MOV W19, W0
	0x01D32770 TBNZ X8, 0x0, 0x1D32788
	0x01D32774 ADRP X0, 0x23C1000
	0x01D32778 LDR X0, [X0 + 0x630]
	0x01D3277C BL 0x1C16CF4
	0x01D32780 MOVZ W8, 0x1
	0x01D32784 STRB W8, [X22 + 0x6C4]
	0x01D32788 LDR X0, [X21]
	0x01D3278C LDR W8, [X0 + 0xE0]
	0x01D32790 CBNZ W8, 0x1D3279C
	0x01D32794 BL 0x1C16DFC
	0x01D32798 LDR X0, [X21]
	0x01D3279C LDR X8, [X0 + 0xB8]
	0x01D327A0 LDR X8, [X8 + 0x10]
	0x01D327A4 CBZ X8, 0x1D327EC
	0x01D327A8 LDR W9, [X8 + 0x18]
	0x01D327AC CMP W9, W20
	0x01D327B0 B.LS 0x1D327F0
	0x01D327B4 MOVZ W9, 0x48
	0x01D327B8 SMADDL X8, X20, X9, X8
	0x01D327BC ADD X1, X8, 0x20
	0x01D327C0 ADD X0, X31, 0x8
	0x01D327C4 MOVZ W2, 0x48
	0x01D327C8 BL 0x3EB1AC0
	0x01D327CC MOV W0, W19
	0x01D327D0 ADD X1, X31, 0x8
	0x01D327D4 BL 0x1D32390
	0x01D327D8 LDP X20, X19, [X31 + 0x70]
	0x01D327DC LDP X22, X21, [X31 + 0x60]
	0x01D327E0 LDR X30, [X31 + 0x50]
	0x01D327E4 ADD X31, X31, 0x80
	0x01D327E8 RET
	0x01D327EC BL 0x1C16F20
	0x01D327F0 BL 0x1C16F28
	0x01D327F4 SUB X31, X31, 0x80
	0x01D327F8 STR X30, [X31 + 0x50]
	0x01D327FC STP X22, X21, [X31 + 0x60]
	0x01D32800 STP X20, X19, [X31 + 0x70]
	0x01D32804 ADRP X22, 0x26A6000
	0x01D32808 ADRP X21, 0x23C1000
	0x01D3280C LDRB W8, [X22 + 0x6C5]
	0x01D32810 LDR X21, [X21 + 0x630]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+16], D10
	003 Move [X31+32], D9
	004 Move [X31+40], D8
	005 Move [X31+48], X29
	006 Move [X31+56], X30
	007 Move [X31+64], X28
	008 Move [X31+72], X27
	009 Move [X31+80], X26
	010 Move [X31+88], X25
	011 Move [X31+96], X24
	012 Move [X31+104], X23
	013 Move [X31+112], X22
	014 Move [X31+120], X21
	015 Move [X31+128], X20
	016 Move [X31+136], X19
	017 Move X20, 0x26A7000
	018 Move W8, [X20+1715]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {47}
	024 Move X0, 0x23C2000
	025 Move X0, [X0+1488]
	026 Call 0x1C17CF4
	027 Move X0, 0x23C2000
	028 Move X0, [X0+1496]
	029 Call 0x1C17CF4
	030 Move X0, 0x23C2000
	031 Move X0, [X0+1504]
	032 Call 0x1C17CF4
	033 Move X0, 0x23C2000
	034 Move X0, [X0+1512]
	035 Call 0x1C17CF4
	036 Move X0, 0x23C2000
	037 Move X0, [X0+1520]
	038 Call 0x1C17CF4
	039 Move X0, 0x23C2000
	040 Move X0, [X0+1528]
	041 Call 0x1C17CF4
	042 Move X0, 0x23C2000
	043 Move X0, [X0+1536]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X20+1715], W8
	047 Move X0, X19
	048 Move [X31+8], X31
	049 Call FlareGunProjectile.get_aliveTimer, X0
	050 Move [X31+24], W0
	051 Move X1, [X19+56]
	052 Add X0, X31, 24
	053 Move X2, X31
	054 Call TickTimer.Expired, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {276}
	059 Move W20, [X19+144]
	060 Move X0, X19
	061 Move X1, X31
	062 Call Component.get_transform, X0
	063 Compare X0, 0
	064 JumpIfEqual {293}
	065 Move X1, X31
	066 Call Transform.get_position, X0
	067 Move X0, X19
	068 Move X1, X31
	069 Move V8, V0
	070 Move V9, V1
	071 Move V10, V2
	072 Call Component.get_transform, X0
	073 Compare X0, 0
	074 JumpIfEqual {293}
	075 Move X1, X31
	076 Call Transform.get_rotation, X0
	077 Move V4, V0
	078 Move V5, V1
	079 Move V6, V2
	080 Move V7, V3
	081 Move W0, W20
	082 Move V0, V8
	083 Move V1, V9
	084 Move V2, V10
	085 Move V3, V4
	086 Move V4, V5
	087 Move V5, V6
	088 Move V6, V7
	089 Move X1, X31
	090 Call NetworkVFX.PlayVFX, X0, X1, X2
	091 Move X0, X19
	092 Move X1, X31
	093 Call Component.get_transform, X0
	094 Compare X0, 0
	095 JumpIfEqual {293}
	096 Move X1, X31
	097 Call Transform.get_position, X0
	098 Move X20, 0x23C2000
	099 Move X20, [X20+1496]
	100 Move V8, V0
	101 Move V9, V1
	102 Move V10, V2
	103 Move X0, [X20]
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {109}
	107 Call 0x1C17DFC
	108 Move X0, [X20]
	109 Move X8, [X0+184]
	110 Move X1, X31
	111 Move W0, [X8+72]
	112 Call LayerMask.op_Implicit, X0
	113 Move X8, 0x23C2000
	114 Move X8, [X8+1528]
	115 Move W20, W0
	116 Move X8, [X8]
	117 Move W9, [X8+224]
	118 Compare W9, 0
	119 JumpIfNotEqual {122}
	120 Move X0, X8
	121 Call 0x1C17DFC
	122 Move S3, 7
	123 Move V0, V8
	124 Move V1, V9
	125 Move V2, V10
	126 Move W0, W20
	127 Move X1, X31
	128 Call Physics.OverlapSphere, X0, V0, X1
	129 Move X8, [X19+152]
	130 Compare X8, 0
	131 JumpIfEqual {293}
	132 Move W2, [X8+24]
	133 Move W9, [X8+28]
	134 Move X20, X0
	135 Add W9, W9, 1
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move [X8+24], W31
	138 Move [X8+28], W9
	139 Move X0, [X8+16]
	140 Move W1, W31
	141 Move X3, X31
	142 Call Array.Clear, X0, X1, X2
	143 Compare X20, 0
	144 JumpIfEqual {293}
	145 Move X8, [X20+24]
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move X25, 0x23C2000
	148 Move X26, 0x23C2000
	149 Move X27, 0x23C2000
	150 Move X28, 0x23C2000
	151 Move X25, [X25+1520]
	152 Move X26, [X26+1504]
	153 Move X27, [X27+1488]
	154 Move X28, [X28+1536]
	155 Move X24, X31
	156 And X8, X8, 0
	157 NotImplemented "Instruction CMP not yet implemented."
	158 Add X8, X20, X24
	159 Move X0, [X8+32]
	160 Add X1, X31, 8
	161 Move X2, X31
	162 Call TriggerUtilities.TryGetStunnableFromCollider, X0, X1
	163 Move TEMP, X0
	164 And TEMP, TEMP, 1
	165 Compare TEMP, 1
	166 JumpIfNotEqual {252}
	167 Move X0, [X19+152]
	168 Compare X0, 0
	169 JumpIfEqual {293}
	170 Move X1, [X31+8]
	171 Move X2, [X25]
	172 Call List`1<Object>.Contains, X0, X1
	173 Move TEMP, X0
	174 And TEMP, TEMP, 1
	175 Compare TEMP, 1
	176 JumpIfEqual {252}
	177 Move X0, [X19+152]
	178 Compare X0, 0
	179 JumpIfEqual {293}
	180 Move W10, [X0+28]
	181 Move X1, [X31+8]
	182 Move X8, [X0+16]
	183 Move X9, [X26]
	184 Add W10, W10, 1
	185 Move [X0+28], W10
	186 Compare X8, 0
	187 JumpIfEqual {293}
	188 NotImplemented "Instruction LDRSW not yet implemented."
	189 Move W11, [X8+24]
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Add W9, W10, 1
	192 Add X8, X8, X10
	193 Move [X0+24], W9
	194 Move [X8+32], X1
	195 Move X8, [X9+32]
	196 Move X8, [X8+192]
	197 Move X2, [X8+112]
	198 Call List`1<Object>.AddWithResize, X0, X1
	199 Move X21, [X31+8]
	200 Move X0, X19
	201 Move X1, X31
	202 Call Component.get_transform, X0
	203 Compare X0, 0
	204 JumpIfEqual {293}
	205 Move X1, X31
	206 Call Transform.get_position, X0
	207 Move X8, [X19+64]
	208 Move V8, V0
	209 Move V9, V1
	210 Move V10, V2
	211 Compare X8, 0
	212 JumpIfEqual {217}
	213 Move X8, [X8+32]
	214 Compare X8, 0
	215 JumpIfEqual {217}
	216 Move W22, [X8]
	217 Move X22, X31
	218 Compare X21, 0
	219 JumpIfEqual {293}
	220 Move X8, [X21]
	221 Move W29, [X19+104]
	222 Move X1, [X27]
	223 Move X23, [X28]
	224 NotImplemented "Instruction LDRH not yet implemented."
	225 Compare X9, 0
	226 JumpIfEqual {233}
	227 Move X10, [X8+176]
	228 Add X10, X10, 8
	229 NotImplemented "Instruction LDUR not yet implemented."
	230 NotImplemented "Instruction CMP not yet implemented."
	231 Subtract X9, X9, 1
	232 Add X10, X10, 16
	233 Move X0, X21
	234 Move W2, W31
	235 Call 0x1C5D788
	236 NotImplemented "Instruction LDRSW not yet implemented."
	237 Add X8, X8, X9
	238 Add X0, X8, 312
	239 Move X8, [X0]
	240 Move X4, [X0+8]
	241 NotImplemented "Instruction BFM not yet implemented."
	242 Move S3, 7
	243 Move S4, 8
	244 Move X0, X21
	245 Move V0, V8
	246 Move V1, V9
	247 Move V2, V10
	248 Move X1, X23
	249 Move X2, X22
	250 Move W3, W31
	251 NotImplemented "Instruction BLR not yet implemented."
	252 Move W8, [X20+24]
	253 Add X24, X24, 1
	254 NotImplemented "Instruction CMP not yet implemented."
	255 Move X20, [X19+136]
	256 Compare X20, 0
	257 JumpIfEqual {270}
	258 Move X0, X19
	259 Move X1, X31
	260 Call Component.get_transform, X0
	261 Compare X0, 0
	262 JumpIfEqual {293}
	263 Move X1, X31
	264 Call Transform.get_position, X0
	265 Move S3, 1
	266 Move W1, 1
	267 Move X0, X20
	268 Move X2, X31
	269 Call RandomSFX.Play, X0, X1, V0, X2
	270 Move X0, [X19+56]
	271 Compare X0, 0
	272 JumpIfEqual {293}
	273 Move X1, [X19+64]
	274 Move X2, X31
	275 Call NetworkRunner.Despawn, X0, X1
	276 Move X20, [X31+128]
	277 Move X19, [X31+136]
	278 Move X22, [X31+112]
	279 Move X21, [X31+120]
	280 Move X24, [X31+96]
	281 Move X23, [X31+104]
	282 Move X26, [X31+80]
	283 Move X25, [X31+88]
	284 Move X28, [X31+64]
	285 Move X27, [X31+72]
	286 Move X29, [X31+48]
	287 Move X30, [X31+56]
	288 Move D9, [X31+32]
	289 Move D8, [X31+40]
	290 Move V10, [X31+16]
	291 Add X31, X31, 144
	292 Return 
	293 Call 0x1C17F20
	294 Call 0x1C17F28

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x01D32814 MOV W20, W1
	0x01D32818 MOV W19, W0
	0x01D3281C TBNZ X8, 0x0, 0x1D32834
	0x01D32820 ADRP X0, 0x23C1000
	0x01D32824 LDR X0, [X0 + 0x630]
	0x01D32828 BL 0x1C16CF4
	0x01D3282C MOVZ W8, 0x1
	0x01D32830 STRB W8, [X22 + 0x6C5]
	0x01D32834 LDR X0, [X21]
	0x01D32838 LDR W8, [X0 + 0xE0]
	0x01D3283C CBNZ W8, 0x1D32848
	0x01D32840 BL 0x1C16DFC
	0x01D32844 LDR X0, [X21]
	0x01D32848 LDR X8, [X0 + 0xB8]
	0x01D3284C LDR X8, [X8 + 0x10]
	0x01D32850 CBZ X8, 0x1D32898
	0x01D32854 LDR W9, [X8 + 0x18]
	0x01D32858 CMP W9, W20
	0x01D3285C B.LS 0x1D3289C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move S0, 1
	005 Move S1, W31
	006 Move S2, W31
	007 Move S3, 1
	008 Move X0, X31
	009 Call Gizmos.set_color, X0
	010 Move X0, X19
	011 Move X1, X31
	012 Call Component.get_transform, X0
	013 Compare X0, 0
	014 JumpIfEqual {23}
	015 Move X1, X31
	016 Call Transform.get_position, X0
	017 Move S3, 7
	018 Move X0, X31
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Call Gizmos.DrawWireSphere, X0, V0
	022 Return 
	023 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01D32860 MOVZ W9, 0x48
	0x01D32864 SMADDL X8, X20, X9, X8
	0x01D32868 ADD X1, X8, 0x20
	0x01D3286C ADD X0, X31, 0x8
	0x01D32870 MOVZ W2, 0x48
	0x01D32874 BL 0x3EB1AC0
	0x01D32878 SXTH X0, W19
	0x01D3287C ADD X1, X31, 0x8
	0x01D32880 BL 0x1D32390
	0x01D32884 LDP X20, X19, [X31 + 0x70]
	0x01D32888 LDP X22, X21, [X31 + 0x60]
	0x01D3288C LDR X30, [X31 + 0x50]
	0x01D32890 ADD X31, X31, 0x80
	0x01D32894 RET
	0x01D32898 BL 0x1C16F20
	0x01D3289C BL 0x1C16F28
	0x01D328A0 ADRP X9, 0xFFFFFFFFFEDB7000
	0x01D328A4 MOVZ W8, 0x1
	0x01D328A8 LDR V0, [X9 + 0xF88]
	0x01D328AC LSLV W10, W8, W1
	0x01D328B0 LSLV W12, W8, W2
	0x01D328B4 LSLV W8, W8, W3
	0x01D328B8 UBFM W11, W10, 0x1, 0x1F
	0x01D328BC UBFM W9, W12, 0x1, 0x1F
	0x01D328C0 SUB W10, W31, W1
	0x01D328C4 MOVN W12, 0x0
	0x01D328C8 SUB W13, W31, W2
	0x01D328CC SUB W14, W31, W3
	0x01D328D0 UBFM W8, W8, 0x1, 0x1F
	0x01D328D4 UCVTF S1, W11
	0x01D328D8 UCVTF S2, W9
	0x01D328DC LSRV W15, W12, W10
	0x01D328E0 LSRV W10, W12, W13

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x26A7000
	007 Move X21, 0x23C2000
	008 Move X20, 0x23C2000
	009 Move W8, [X22+1716]
	010 Move X21, [X21+1544]
	011 Move X20, [X20+1552]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x23C2000
	018 Move X0, [X0+1552]
	019 Call 0x1C17CF4
	020 Move X0, 0x23C2000
	021 Move X0, [X0+1544]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+1716], W8
	025 Move W8, 32
	026 Move [X19+144], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X1, [X20]
	030 Move X20, X0
	031 Call List`1<Object>..ctor, X0
	032 Move [X19+152], X20
	033 Move X0, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X1, X31
	039 Move X30, [X31+48]
	040 Call NetworkBehaviour..ctor, X0
	041 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01D328E4 LSRV W12, W12, W14
	0x01D328E8 ADD W13, W2, W1

ISIL:
	001 Move W1, [X0+148]
	002 Call FlareGunProjectile.set_aliveTimer, X0, X1
	003 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01D328EC UCVTF S3, W8
	0x01D328F0 FMUL S1, S1, S0
	0x01D328F4 FMUL S2, S2, S0
	0x01D328F8 STP W10, W12, [X0 + 0x28]
	0x01D328FC ADD W10, W13, W3
	0x01D32900 FMUL S3, S3, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call FlareGunProjectile.get_aliveTimer, X0
	005 Move [X19+148], W0
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 

