Type: FlareGunProjectile

Method: Fusion.TickTimer get_aliveTimer()

Disassembly:
	0x01C89E1C BL 0x1B6E7F0
	0x01C89E20 MOVZ W8, 0x1
	0x01C89E24 STRB W8, [X20 + 0x37E]
	0x01C89E28 LDR X0, [X19]
	0x01C89E2C LDR W8, [X0 + 0xE0]
	0x01C89E30 CBNZ W8, 0x1C89E3C
	0x01C89E34 BL 0x1B6E8F8
	0x01C89E38 LDR X0, [X19]
	0x01C89E3C LDR X8, [X0 + 0xB8]
	0x01C89E40 LDP X20, X19, [X31 + 0x10]
	0x01C89E44 STR X31, [X8 + 0x8]
	0x01C89E48 LDR X30, [X31], #0x20
	0x01C89E4C RET
	0x01C89E50 STR X30, [X31 - 0x20]!
	0x01C89E54 STP X20, X19, [X31 + 0x10]
	0x01C89E58 ADRP X19, 0x259A000
	0x01C89E5C ADRP X20, 0x22C4000
	0x01C89E60 LDRB W8, [X19 + 0x37F]
	0x01C89E64 LDR X20, [X20 + 0x4E8]
	0x01C89E68 TBNZ X8, 0x0, 0x1C89E80
	0x01C89E6C ADRP X0, 0x22C4000
	0x01C89E70 LDR X0, [X0 + 0x4E8]
	0x01C89E74 BL 0x1B6E7F0
	0x01C89E78 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x22C5000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x22C5000
	016 Move X0, [X0+1176]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22C5000
	023 Move X0, [X0+1184]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_aliveTimer(Fusion.TickTimer value)

Disassembly:
	0x01C89E7C STRB W8, [X19 + 0x37F]
	0x01C89E80 LDR X0, [X20]
	0x01C89E84 LDR W8, [X0 + 0xE0]
	0x01C89E88 CBNZ W8, 0x1C89E90
	0x01C89E8C BL 0x1B6E8F8
	0x01C89E90 BL 0x1C89EA0
	0x01C89E94 LDP X20, X19, [X31 + 0x10]
	0x01C89E98 LDR X30, [X31], #0x20
	0x01C89E9C B 0x1C8A05C
	0x01C89EA0 STR X30, [X31 - 0x30]!
	0x01C89EA4 STP X22, X21, [X31 + 0x10]
	0x01C89EA8 STP X20, X19, [X31 + 0x20]
	0x01C89EAC ADRP X19, 0x259A000
	0x01C89EB0 ADRP X20, 0x22C4000
	0x01C89EB4 LDRB W8, [X19 + 0x380]
	0x01C89EB8 LDR X20, [X20 + 0x4E8]
	0x01C89EBC TBNZ X8, 0x0, 0x1C89F04
	0x01C89EC0 ADRP X0, 0x22C4000
	0x01C89EC4 LDR X0, [X0 + 0x4E8]
	0x01C89EC8 BL 0x1B6E7F0
	0x01C89ECC ADRP X0, 0x22C4000
	0x01C89ED0 LDR X0, [X0 + 0x588]
	0x01C89ED4 BL 0x1B6E7F0
	0x01C89ED8 ADRP X0, 0x22C4000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22C5000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x22C5000
	016 Move X0, [X0+1176]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22C5000
	023 Move X0, [X0+1192]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void Spawned()

Disassembly:
	0x01C89EDC LDR X0, [X0 + 0x590]
	0x01C89EE0 BL 0x1B6E7F0
	0x01C89EE4 ADRP X0, 0x22C4000
	0x01C89EE8 LDR X0, [X0 + 0x598]
	0x01C89EEC BL 0x1B6E7F0
	0x01C89EF0 ADRP X0, 0x22C4000
	0x01C89EF4 LDR X0, [X0 + 0x5A0]
	0x01C89EF8 BL 0x1B6E7F0
	0x01C89EFC MOVZ W8, 0x1
	0x01C89F00 STRB W8, [X19 + 0x380]
	0x01C89F04 LDR X0, [X20]
	0x01C89F08 STR X31, [X31 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call NetworkBehaviour.Spawned, X0
	006 Move X0, [X19+56]
	007 Move V0, [X19+128]
	008 Move X1, X31
	009 Call TickTimer.CreateFromSeconds, X0, V0
	010 And X1, X0, 0
	011 Move X0, X19
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call FlareGunProjectile.set_aliveTimer, X0, X1
	015 Return 

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01C89F0C LDR W8, [X0 + 0xE0]
	0x01C89F10 CBNZ W8, 0x1C89F1C
	0x01C89F14 BL 0x1B6E8F8
	0x01C89F18 LDR X0, [X20]
	0x01C89F1C LDR X8, [X0 + 0xB8]
	0x01C89F20 LDR X0, [X8 + 0x40]
	0x01C89F24 CBZ X0, 0x1C8A058
	0x01C89F28 ADRP X8, 0x22C4000
	0x01C89F2C LDR X8, [X8 + 0x590]
	0x01C89F30 LDR X1, [X8]
	0x01C89F34 BL 0x27D3340
	0x01C89F38 CMP W0, 0x1
	0x01C89F3C B.LT 0x1C8A048
	0x01C89F40 LDR X0, [X20]
	0x01C89F44 LDR W8, [X0 + 0xE0]
	0x01C89F48 CBNZ W8, 0x1C89F54
	0x01C89F4C BL 0x1B6E8F8
	0x01C89F50 LDR X0, [X20]
	0x01C89F54 LDR X8, [X0 + 0xB8]
	0x01C89F58 LDR X8, [X8 + 0x48]
	0x01C89F5C CBZ X8, 0x1C8A058
	0x01C89F60 LDP W2, W9, [X8 + 0x18]
	0x01C89F64 ADD W9, W9, 0x1
	0x01C89F68 CMP W2, 0x1
	0x01C89F6C STP W31, W9, [X8 + 0x18]
	0x01C89F70 B.LT 0x1C89F84
	0x01C89F74 LDR X0, [X8 + 0x10]
	0x01C89F78 MOV W1, W31
	0x01C89F7C MOV X3, X31
	0x01C89F80 BL 0x32093A0
	0x01C89F84 ADRP X21, 0x22C4000
	0x01C89F88 ADRP X22, 0x22C4000
	0x01C89F8C LDR X21, [X21 + 0x588]
	0x01C89F90 LDR X22, [X22 + 0x598]
	0x01C89F94 LDR X0, [X20]
	0x01C89F98 LDR W8, [X0 + 0xE0]
	0x01C89F9C CBNZ W8, 0x1C89FA8
	0x01C89FA0 BL 0x1B6E8F8
	0x01C89FA4 LDR X0, [X20]
	0x01C89FA8 LDR X8, [X0 + 0xB8]
	0x01C89FAC LDR X0, [X8 + 0x40]
	0x01C89FB0 CBZ X0, 0x1C8A058
	0x01C89FB4 LDR X2, [X21]
	0x01C89FB8 ADD X1, X31, 0x8
	0x01C89FBC BL 0x27D4158
	0x01C89FC0 LDR X8, [X20]
	0x01C89FC4 MOV W19, W0
	0x01C89FC8 LDR W9, [X8 + 0xE0]
	0x01C89FCC CBNZ W9, 0x1C89FDC
	0x01C89FD0 MOV X0, X8
	0x01C89FD4 BL 0x1B6E8F8
	0x01C89FD8 LDR X8, [X20]
	0x01C89FDC LDR X8, [X8 + 0xB8]
	0x01C89FE0 TBZ X19, 0x0, 0x1C8A040
	0x01C89FE4 LDR X0, [X8 + 0x48]
	0x01C89FE8 CBZ X0, 0x1C8A058
	0x01C89FEC LDR W10, [X0 + 0x1C]
	0x01C89FF0 LDR X1, [X31 + 0x8]
	0x01C89FF4 LDR X8, [X0 + 0x10]
	0x01C89FF8 LDR X9, [X22]
	0x01C89FFC ADD W10, W10, 0x1
	0x01C8A000 STR W10, [X0 + 0x1C]
	0x01C8A004 CBZ X8, 0x1C8A058
	0x01C8A008 LDRSW X10, [X0 + 0x18]
	0x01C8A00C LDR W11, [X8 + 0x18]
	0x01C8A010 CMP W10, W11
	0x01C8A014 B.CS 0x1C8A02C
	0x01C8A018 ADD W9, W10, 0x1
	0x01C8A01C ADD X8, X8, X10, 0x3, LSL
	0x01C8A020 STR W9, [X0 + 0x18]
	0x01C8A024 STR X1, [X8 + 0x20]
	0x01C8A028 B 0x1C89F94
	0x01C8A02C LDR X8, [X9 + 0x20]
	0x01C8A030 LDR X8, [X8 + 0xC0]
	0x01C8A034 LDR X2, [X8 + 0x70]
	0x01C8A038 BL 0x2E46518
	0x01C8A03C B 0x1C89F94
	0x01C8A040 LDR X0, [X8 + 0x48]
	0x01C8A044 BL 0x1C8A140
	0x01C8A048 LDP X20, X19, [X31 + 0x20]
	0x01C8A04C LDP X22, X21, [X31 + 0x10]
	0x01C8A050 LDR X30, [X31], #0x30
	0x01C8A054 RET
	0x01C8A058 BL 0x1B6EA1C
	0x01C8A05C STR X30, [X31 - 0x30]!
	0x01C8A060 STP X22, X21, [X31 + 0x10]
	0x01C8A064 STP X20, X19, [X31 + 0x20]
	0x01C8A068 ADRP X19, 0x2599000
	0x01C8A06C LDRB W8, [X19 + 0x381]
	0x01C8A070 TBNZ X8, 0x0, 0x1C8A094
	0x01C8A074 ADRP X0, 0x22C3000
	0x01C8A078 LDR X0, [X0 + 0x4E8]
	0x01C8A07C BL 0x1B6E7F0
	0x01C8A080 ADRP X0, 0x22C3000
	0x01C8A084 LDR X0, [X0 + 0x5A8]
	0x01C8A088 BL 0x1B6E7F0
	0x01C8A08C MOVZ W8, 0x1
	0x01C8A090 STRB W8, [X19 + 0x381]
	0x01C8A094 ADRP X21, 0x22C3000
	0x01C8A098 ADRP X22, 0x22C3000
	0x01C8A09C LDR X21, [X21 + 0x4E8]
	0x01C8A0A0 LDR X22, [X22 + 0x5A8]
	0x01C8A0A4 STR X31, [X31 + 0x8]
	0x01C8A0A8 LDR X0, [X21]
	0x01C8A0AC LDR W8, [X0 + 0xE0]
	0x01C8A0B0 CBNZ W8, 0x1C8A0BC
	0x01C8A0B4 BL 0x1B6E8F8
	0x01C8A0B8 LDR X0, [X21]
	0x01C8A0BC LDR X8, [X0 + 0xB8]
	0x01C8A0C0 LDR X0, [X8 + 0x58]
	0x01C8A0C4 CBZ X0, 0x1C8A13C
	0x01C8A0C8 LDR X2, [X22]
	0x01C8A0CC ADD X1, X31, 0x8
	0x01C8A0D0 BL 0x27D4158
	0x01C8A0D4 LDR X8, [X21]
	0x01C8A0D8 MOV W20, W0
	0x01C8A0DC LDR W9, [X8 + 0xE0]
	0x01C8A0E0 CBNZ W9, 0x1C8A0F0
	0x01C8A0E4 MOV X0, X8
	0x01C8A0E8 BL 0x1B6E8F8
	0x01C8A0EC LDR X8, [X21]
	0x01C8A0F0 LDR X8, [X8 + 0xB8]
	0x01C8A0F4 LDR X19, [X8 + 0x50]
	0x01C8A0F8 TBZ X20, 0x0, 0x1C8A114
	0x01C8A0FC CBZ X19, 0x1C8A13C
	0x01C8A100 LDR X1, [X31 + 0x8]
	0x01C8A104 MOV X0, X19
	0x01C8A108 MOV X2, X31
	0x01C8A10C BL 0x3429B18
	0x01C8A110 B 0x1C8A0A8
	0x01C8A114 MOV X0, X31
	0x01C8A118 BL 0x3AA481C
	0x01C8A11C CBZ X19, 0x1C8A13C
	0x01C8A120 MOV X0, X19
	0x01C8A124 MOV X1, X31
	0x01C8A128 BL 0x3429BB0
	0x01C8A12C LDP X20, X19, [X31 + 0x20]
	0x01C8A130 LDP X22, X21, [X31 + 0x10]
	0x01C8A134 LDR X30, [X31], #0x30
	0x01C8A138 RET
	0x01C8A13C BL 0x1B6EA1C
	0x01C8A140 STP X30, X21, [X31 - 0x20]!
	0x01C8A144 STP X20, X19, [X31 + 0x10]
	0x01C8A148 ADRP X20, 0x2599000
	0x01C8A14C ADRP X21, 0x22C3000
	0x01C8A150 LDRB W8, [X20 + 0x384]
	0x01C8A154 LDR X21, [X21 + 0x4E8]
	0x01C8A158 MOV X19, X0
	0x01C8A15C TBNZ X8, 0x0, 0x1C8A174
	0x01C8A160 ADRP X0, 0x22C3000
	0x01C8A164 LDR X0, [X0 + 0x4E8]
	0x01C8A168 BL 0x1B6E7F0
	0x01C8A16C MOVZ W8, 0x1
	0x01C8A170 STRB W8, [X20 + 0x384]
	0x01C8A174 LDR X0, [X21]
	0x01C8A178 LDR W8, [X0 + 0xE0]
	0x01C8A17C CBNZ W8, 0x1C8A184
	0x01C8A180 BL 0x1B6E8F8
	0x01C8A184 MOV X1, X19
	0x01C8A188 LDP X20, X19, [X31 + 0x10]
	0x01C8A18C MOVZ W0, 0x1
	0x01C8A190 MOVZ W2, 0x1
	0x01C8A194 LDP X30, X21, [X31], #0x20
	0x01C8A198 B 0x1C8A1F8
	0x01C8A19C STP X30, X21, [X31 - 0x20]!
	0x01C8A1A0 STP X20, X19, [X31 + 0x10]
	0x01C8A1A4 ADRP X20, 0x2599000
	0x01C8A1A8 ADRP X21, 0x22C3000
	0x01C8A1AC LDRB W8, [X20 + 0x382]
	0x01C8A1B0 LDR X21, [X21 + 0x4E8]
	0x01C8A1B4 MOV X19, X0
	0x01C8A1B8 TBNZ X8, 0x0, 0x1C8A1D0
	0x01C8A1BC ADRP X0, 0x22C3000
	0x01C8A1C0 LDR X0, [X0 + 0x4E8]
	0x01C8A1C4 BL 0x1B6E7F0
	0x01C8A1C8 MOVZ W8, 0x1
	0x01C8A1CC STRB W8, [X20 + 0x382]
	0x01C8A1D0 LDR X0, [X21]
	0x01C8A1D4 LDR W8, [X0 + 0xE0]
	0x01C8A1D8 CBNZ W8, 0x1C8A1E0
	0x01C8A1DC BL 0x1B6E8F8
	0x01C8A1E0 MOV X1, X19
	0x01C8A1E4 LDP X20, X19, [X31 + 0x10]
	0x01C8A1E8 MOVZ W0, 0x1
	0x01C8A1EC MOVZ W2, 0x1
	0x01C8A1F0 LDP X30, X21, [X31], #0x20
	0x01C8A1F4 B 0x1C8A1F8
	0x01C8A1F8 SUB X31, X31, 0xC0
	0x01C8A1FC STP X29, X30, [X31 + 0x60]
	0x01C8A200 STP X28, X27, [X31 + 0x70]
	0x01C8A204 STP X26, X25, [X31 + 0x80]
	0x01C8A208 STP X24, X23, [X31 + 0x90]
	0x01C8A20C STP X22, X21, [X31 + 0xA0]
	0x01C8A210 STP X20, X19, [X31 + 0xB0]
	0x01C8A214 ADRP X19, 0x2599000
	0x01C8A218 LDRB W8, [X19 + 0x388]
	0x01C8A21C MOV W27, W2
	0x01C8A220 MOV X22, X1
	0x01C8A224 MOV W21, W0
	0x01C8A228 TBNZ X8, 0x0, 0x1C8A36C
	0x01C8A22C ADRP X0, 0x22C3000
	0x01C8A230 LDR X0, [X0 + 0x4E8]
	0x01C8A234 BL 0x1B6E7F0
	0x01C8A238 ADRP X0, 0x22C3000
	0x01C8A23C LDR X0, [X0 + 0x5B0]
	0x01C8A240 BL 0x1B6E7F0
	0x01C8A244 ADRP X0, 0x22C3000
	0x01C8A248 LDR X0, [X0 + 0x5B8]
	0x01C8A24C BL 0x1B6E7F0
	0x01C8A250 ADRP X0, 0x22C3000
	0x01C8A254 LDR X0, [X0 + 0x5C0]
	0x01C8A258 BL 0x1B6E7F0
	0x01C8A25C ADRP X0, 0x22C3000
	0x01C8A260 LDR X0, [X0 + 0x5C8]
	0x01C8A264 BL 0x1B6E7F0
	0x01C8A268 ADRP X0, 0x22C3000
	0x01C8A26C LDR X0, [X0 + 0x5D0]
	0x01C8A270 BL 0x1B6E7F0
	0x01C8A274 ADRP X0, 0x22C3000
	0x01C8A278 LDR X0, [X0 + 0x5D8]
	0x01C8A27C BL 0x1B6E7F0
	0x01C8A280 ADRP X0, 0x22C3000
	0x01C8A284 LDR X0, [X0 + 0x5E0]
	0x01C8A288 BL 0x1B6E7F0
	0x01C8A28C ADRP X0, 0x22C3000
	0x01C8A290 LDR X0, [X0 + 0x5E8]
	0x01C8A294 BL 0x1B6E7F0
	0x01C8A298 ADRP X0, 0x22C3000
	0x01C8A29C LDR X0, [X0 + 0x548]
	0x01C8A2A0 BL 0x1B6E7F0
	0x01C8A2A4 ADRP X0, 0x22C3000
	0x01C8A2A8 LDR X0, [X0 + 0x5F0]
	0x01C8A2AC BL 0x1B6E7F0
	0x01C8A2B0 ADRP X0, 0x22C3000
	0x01C8A2B4 LDR X0, [X0 + 0x5F8]
	0x01C8A2B8 BL 0x1B6E7F0
	0x01C8A2BC ADRP X0, 0x22C3000
	0x01C8A2C0 LDR X0, [X0 + 0x600]
	0x01C8A2C4 BL 0x1B6E7F0
	0x01C8A2C8 ADRP X0, 0x22C3000
	0x01C8A2CC LDR X0, [X0 + 0x608]
	0x01C8A2D0 BL 0x1B6E7F0
	0x01C8A2D4 ADRP X0, 0x22C3000
	0x01C8A2D8 LDR X0, [X0 + 0x610]
	0x01C8A2DC BL 0x1B6E7F0
	0x01C8A2E0 ADRP X0, 0x22C3000
	0x01C8A2E4 LDR X0, [X0 + 0x618]
	0x01C8A2E8 BL 0x1B6E7F0
	0x01C8A2EC ADRP X0, 0x22C3000
	0x01C8A2F0 LDR X0, [X0 + 0x620]
	0x01C8A2F4 BL 0x1B6E7F0
	0x01C8A2F8 ADRP X0, 0x22C3000
	0x01C8A2FC LDR X0, [X0 + 0x628]
	0x01C8A300 BL 0x1B6E7F0
	0x01C8A304 ADRP X0, 0x22C3000
	0x01C8A308 LDR X0, [X0 + 0x630]
	0x01C8A30C BL 0x1B6E7F0
	0x01C8A310 ADRP X0, 0x22C3000
	0x01C8A314 LDR X0, [X0 + 0x638]
	0x01C8A318 BL 0x1B6E7F0
	0x01C8A31C ADRP X0, 0x22C3000
	0x01C8A320 LDR X0, [X0 + 0x640]
	0x01C8A324 BL 0x1B6E7F0
	0x01C8A328 ADRP X0, 0x22C3000
	0x01C8A32C LDR X0, [X0 + 0x648]
	0x01C8A330 BL 0x1B6E7F0
	0x01C8A334 ADRP X0, 0x22C3000
	0x01C8A338 LDR X0, [X0 + 0x650]
	0x01C8A33C BL 0x1B6E7F0
	0x01C8A340 ADRP X0, 0x22C3000
	0x01C8A344 LDR X0, [X0 + 0x658]
	0x01C8A348 BL 0x1B6E7F0
	0x01C8A34C ADRP X0, 0x22C3000
	0x01C8A350 LDR X0, [X0 + 0x660]
	0x01C8A354 BL 0x1B6E7F0
	0x01C8A358 ADRP X0, 0x22C3000
	0x01C8A35C LDR X0, [X0 + 0x668]
	0x01C8A360 BL 0x1B6E7F0
	0x01C8A364 MOVZ W8, 0x1
	0x01C8A368 STRB W8, [X19 + 0x388]
	0x01C8A36C STP X31, X31, [X31 + 0x40]
	0x01C8A370 STR X31, [X31 + 0x50]
	0x01C8A374 CBZ X22, 0x1C8B464
	0x01C8A378 ADRP X19, 0x22C3000
	0x01C8A37C LDR X8, [X22]
	0x01C8A380 LDR X19, [X19 + 0x5E0]
	0x01C8A384 LDRH W9, [X8 + 0x12E]
	0x01C8A388 LDR X1, [X19]
	0x01C8A38C CBZ X9, 0x1C8A3B0
	0x01C8A390 LDR X10, [X8 + 0xB0]
	0x01C8A394 ADD X10, X10, 0x8
	0x01C8A398 LDUR X11, [X10 - 0x8]
	0x01C8A39C CMP X11, X1
	0x01C8A3A0 B.EQ 0x1C8A3C0
	0x01C8A3A4 SUBS X9, X9, 0x1
	0x01C8A3A8 ADD X10, X10, 0x10
	0x01C8A3AC B.NE 0x1C8A398
	0x01C8A3B0 MOV X0, X22
	0x01C8A3B4 MOV W2, W31
	0x01C8A3B8 BL 0x1BB4284
	0x01C8A3BC B 0x1C8A3CC
	0x01C8A3C0 LDRSW X9, [X10]
	0x01C8A3C4 ADD X8, X8, X9, 0x4, LSL
	0x01C8A3C8 ADD X0, X8, 0x138
	0x01C8A3CC LDP X8, X1, [X0]
	0x01C8A3D0 MOV X0, X22
	0x01C8A3D4 BLR X8
	0x01C8A3D8 CBZ W0, 0x1C8B464
	0x01C8A3DC MOV X0, X31
	0x01C8A3E0 BL 0x324D5D4
	0x01C8A3E4 ADRP X20, 0x22C3000
	0x01C8A3E8 LDR X20, [X20 + 0x4E8]
	0x01C8A3EC MOV X23, X0
	0x01C8A3F0 LDR X8, [X20]
	0x01C8A3F4 LDR W9, [X8 + 0xE0]
	0x01C8A3F8 CBNZ W9, 0x1C8A408
	0x01C8A3FC MOV X0, X8
	0x01C8A400 BL 0x1B6E8F8
	0x01C8A404 LDR X8, [X20]
	0x01C8A408 LDR X9, [X8 + 0xB8]
	0x01C8A40C LDR X10, [X9 + 0x60]
	0x01C8A410 CMP X23, X10
	0x01C8A414 B.NE 0x1C8B4A0
	0x01C8A418 LDR W10, [X8 + 0xE0]
	0x01C8A41C CBNZ W10, 0x1C8A438
	0x01C8A420 MOV X0, X8
	0x01C8A424 BL 0x1B6E8F8
	0x01C8A428 ADRP X8, 0x22C3000
	0x01C8A42C LDR X8, [X8 + 0x4E8]
	0x01C8A430 LDR X8, [X8]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X29
	011 Move [X31+104], X30
	012 Move [X31+112], X28
	013 Move [X31+120], X27
	014 Move [X31+128], X26
	015 Move [X31+136], X25
	016 Move [X31+144], X24
	017 Move [X31+152], X23
	018 Move [X31+160], X22
	019 Move [X31+168], X21
	020 Move [X31+176], X20
	021 Move [X31+184], X19
	022 Move X20, 0x259B000
	023 Move W8, [X20+883]
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {46}
	029 Move X0, 0x22C5000
	030 Move X0, [X0+1200]
	031 Call 0x1B6F7F0
	032 Move X0, 0x22C5000
	033 Move X0, [X0+1208]
	034 Call 0x1B6F7F0
	035 Move X0, 0x22C5000
	036 Move X0, [X0+1144]
	037 Call 0x1B6F7F0
	038 Move X0, 0x22C5000
	039 Move X0, [X0+1216]
	040 Call 0x1B6F7F0
	041 Move X0, 0x22C5000
	042 Move X0, [X0+1224]
	043 Call 0x1B6F7F0
	044 Move W8, 1
	045 Move [X20+883], W8
	046 Move X0, [X19+64]
	047 Compare X0, 0
	048 JumpIfEqual {360}
	049 Move W8, [X0+96]
	050 Move TEMP, X8
	051 And TEMP, TEMP, 2
	052 Compare TEMP, 2
	053 JumpIfEqual {360}
	054 Move X1, X31
	055 Call NetworkObject.get_HasStateAuthority, X0
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {360}
	060 Move X0, X19
	061 Call FlareGunProjectile.get_aliveTimer, X0
	062 Move [X31+24], W0
	063 Move X1, [X19+56]
	064 Add X0, X31, 24
	065 Move X2, X31
	066 Call TickTimer.Expired, X0, X1
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {360}
	071 Move W20, [X19+152]
	072 Move X0, X19
	073 Move X1, X31
	074 Call Component.get_transform, X0
	075 Compare X0, 0
	076 JumpIfEqual {382}
	077 Move X1, X31
	078 Call Transform.get_position, X0
	079 Move X0, X19
	080 Move X1, X31
	081 Move V8, V0
	082 Move V9, V1
	083 Move V10, V2
	084 Call Component.get_transform, X0
	085 Compare X0, 0
	086 JumpIfEqual {382}
	087 Move X1, X31
	088 Call Transform.get_rotation, X0
	089 Move V4, V0
	090 Move V5, V1
	091 Move V6, V2
	092 Move V7, V3
	093 Move W0, W20
	094 Move V0, V8
	095 Move V1, V9
	096 Move V2, V10
	097 Move V3, V4
	098 Move V4, V5
	099 Move V5, V6
	100 Move V6, V7
	101 Move X1, X31
	102 Call NetworkVFX.PlayVFX, X0, X1, X2
	103 Move X0, X19
	104 Move X1, X31
	105 Call Component.get_transform, X0
	106 Compare X0, 0
	107 JumpIfEqual {382}
	108 Move X1, X31
	109 Call Transform.get_position, X0
	110 Move X8, 0x22C4000
	111 Move X8, [X8+1216]
	112 Move V10, [X19+136]
	113 Move V8, V0
	114 Move V9, V1
	115 Move X0, [X8]
	116 Move V11, V2
	117 Move W8, [X0+224]
	118 Compare W8, 0
	119 JumpIfNotEqual {121}
	120 Call 0x1B6F8F8
	121 Move V0, V8
	122 Move V1, V9
	123 Move V2, V11
	124 Move V3, V10
	125 Move X0, X31
	126 Call Physics.OverlapSphere, X0, V0
	127 Compare X0, 0
	128 JumpIfEqual {382}
	129 Move W8, [X0+24]
	130 Move X20, X0
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move X27, 0x22C4000
	133 Move X21, 0x22C4000
	134 Move X22, 0x22C4000
	135 Move X9, -18743296
	136 Move X27, [X27+1200]
	137 Move X21, [X21+1152]
	138 Move X22, [X22+1160]
	139 Move V0, [X9+2916]
	140 Move W26, W31
	141 Move X29, 0x259A000
	142 Move X28, 0x259A000
	143 Move [X31+4], S0
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Add X8, X20, W26
	146 Move X25, [X8+32]
	147 Compare X25, 0
	148 JumpIfEqual {382}
	149 Move X1, [X27]
	150 Move X0, X25
	151 Call 0x20914A4, X0
	152 Compare X0, 0
	153 JumpIfEqual {237}
	154 Move W24, [X19+132]
	155 Move X23, X0
	156 Move X0, X19
	157 Move X1, X31
	158 Call Component.get_transform, X0
	159 Compare X0, 0
	160 JumpIfEqual {382}
	161 Move X1, X31
	162 Call Transform.get_position, X0
	163 Move X0, X25
	164 Move X1, X31
	165 Move V8, V0
	166 Move V9, V1
	167 Move V10, V2
	168 Call Component.get_gameObject, X0
	169 Compare X0, 0
	170 JumpIfEqual {382}
	171 Move X1, X31
	172 Call GameObject.get_transform, X0
	173 Compare X0, 0
	174 JumpIfEqual {382}
	175 Move X1, X31
	176 Call Transform.get_position, X0
	177 Move X0, X19
	178 Move X1, X31
	179 Move V11, V0
	180 Move V12, V1
	181 Move V13, V2
	182 Call Component.get_transform, X0
	183 Compare X0, 0
	184 JumpIfEqual {382}
	185 Move X1, X31
	186 Move [X31+12], S10
	187 Move [X31+20], S9
	188 Move [X31+20], S8
	189 Call Transform.get_position, X0
	190 Move W8, [X29+1090]
	191 Move V15, V1
	192 Move V8, V2
	193 Move [X31+8], S0
	194 Compare W8, 0
	195 JumpIfNotEqual {200}
	196 Move X0, X21
	197 Call 0x1B6F7F0
	198 Move W8, 1
	199 Move [X29+1090], W8
	200 Move X8, [X21]
	201 Move W9, [X28+1089]
	202 Move X8, [X8+184]
	203 Move S14, [X8+24]
	204 Move S10, [X8+28]
	205 Move V9, [X8+32]
	206 Compare W9, 0
	207 JumpIfNotEqual {212}
	208 Move X0, X22
	209 Call 0x1B6F7F0
	210 Move W8, 1
	211 Move [X28+1089], W8
	212 Move X0, [X22]
	213 Move W8, [X0+224]
	214 Compare W8, 0
	215 JumpIfNotEqual {217}
	216 Call 0x1B6F8F8
	217 Move V0, [X31+8]
	218 Subtract S1, S12, S15
	219 Subtract S2, S13, S8
	220 Add S1, S1, S10
	221 Subtract S0, S11, S0
	222 Add S0, S0, S14
	223 Add S2, S2, S9
	224 Multiply S3, S0, S0
	225 Multiply S4, S1, S1
	226 Add S3, S3, S4
	227 Multiply S4, S2, S2
	228 Add S3, S4, S3
	229 Move V4, [X31+4]
	230 NotImplemented "Instruction FSQRT not yet implemented."
	231 NotImplemented "Instruction FCMP not yet implemented."
	232 Move V9, [X31+20]
	233 Move V10, [X31+12]
	234 NotImplemented "Instruction FDIV not yet implemented."
	235 NotImplemented "Instruction FDIV not yet implemented."
	236 NotImplemented "Instruction FDIV not yet implemented."
	237 Move X0, X25
	238 Move X1, X31
	239 Call Collider.get_attachedRigidbody, X0
	240 Move X8, 0x22C4000
	241 Move X8, [X8+1144]
	242 Move X23, X0
	243 Move X8, [X8]
	244 Move W9, [X8+224]
	245 Compare W9, 0
	246 JumpIfNotEqual {249}
	247 Move X0, X8
	248 Call 0x1B6F8F8
	249 Move X0, X23
	250 Move X1, X31
	251 Move X2, X31
	252 Call Object.op_Inequality, X0, X1
	253 Move TEMP, X0
	254 And TEMP, TEMP, 1
	255 Compare TEMP, 1
	256 JumpIfNotEqual {336}
	257 Move X0, X25
	258 Move X1, X31
	259 Call Collider.get_attachedRigidbody, X0
	260 Move X23, X0
	261 Move X0, X19
	262 Move X1, X31
	263 Call Component.get_transform, X0
	264 Compare X0, 0
	265 JumpIfEqual {382}
	266 Move X1, X31
	267 Call Transform.get_position, X0
	268 Compare X23, 0
	269 JumpIfEqual {382}
	270 Move V4, [X19+136]
	271 Move V3, V0
	272 Move V7, V1
	273 Move V6, V2
	274 Move W8, 0x447A0000
	275 Move S5, 1
	276 Move S0, W8
	277 Move X0, X23
	278 Move V1, V3
	279 Move V2, V7
	280 Move V3, V6
	281 Move X1, X31
	282 Call Rigidbody.AddExplosionForce, X0, V0, X1, V1, V2
	283 Move X8, 0x259A000
	284 Move W8, [X8+1087]
	285 Move V9, [X31+20]
	286 Move V10, [X31+12]
	287 Compare W8, 0
	288 JumpIfNotEqual {294}
	289 Move X0, X21
	290 Call 0x1B6F7F0
	291 Move W8, 1
	292 Move X9, 0x259A000
	293 Move [X9+1087], W8
	294 Move X8, [X21]
	295 Move X8, [X8+184]
	296 Move S8, [X8]
	297 Move S11, [X8+4]
	298 Move V12, [X8+8]
	299 Move X9, 0x22C4000
	300 Move X8, [X23]
	301 Move V13, [X19+156]
	302 Move X9, [X9+1208]
	303 Move X10, 0x22C4000
	304 Move X1, [X9]
	305 NotImplemented "Instruction LDRH not yet implemented."
	306 Move X10, [X10+1224]
	307 Move X25, [X10]
	308 Compare X9, 0
	309 JumpIfEqual {316}
	310 Move X10, [X8+176]
	311 Add X10, X10, 8
	312 NotImplemented "Instruction LDUR not yet implemented."
	313 NotImplemented "Instruction CMP not yet implemented."
	314 Subtract X9, X9, 1
	315 Add X10, X10, 16
	316 Move X0, X23
	317 Move W2, W31
	318 Call 0x1BB5284
	319 NotImplemented "Instruction LDRSW not yet implemented."
	320 Add X8, X8, X9
	321 Add X0, X8, 312
	322 Move X8, [X0]
	323 Move X5, [X0+8]
	324 Move V1, [X31+16]
	325 Multiply S3, S8, S13
	326 Multiply S4, S11, S13
	327 Multiply S5, S12, S13
	328 Move X0, X23
	329 Move W1, W24
	330 Move V0, V9
	331 Move V2, V10
	332 Move X2, X31
	333 Move X3, X31
	334 Move X4, X25
	335 NotImplemented "Instruction BLR not yet implemented."
	336 Move W8, [X20+24]
	337 Add W26, W26, 1
	338 NotImplemented "Instruction CMP not yet implemented."
	339 Move X20, [X19+144]
	340 Compare X20, 0
	341 JumpIfEqual {354}
	342 Move X0, X19
	343 Move X1, X31
	344 Call Component.get_transform, X0
	345 Compare X0, 0
	346 JumpIfEqual {382}
	347 Move X1, X31
	348 Call Transform.get_position, X0
	349 Move S3, 1
	350 Move W1, 1
	351 Move X0, X20
	352 Move X2, X31
	353 Call RandomSFX.Play, X0, X1, V0, X2
	354 Move X0, [X19+56]
	355 Compare X0, 0
	356 JumpIfEqual {382}
	357 Move X1, [X19+64]
	358 Move X2, X31
	359 Call NetworkRunner.Despawn, X0, X1
	360 Move X20, [X31+176]
	361 Move X19, [X31+184]
	362 Move X22, [X31+160]
	363 Move X21, [X31+168]
	364 Move X24, [X31+144]
	365 Move X23, [X31+152]
	366 Move X26, [X31+128]
	367 Move X25, [X31+136]
	368 Move X28, [X31+112]
	369 Move X27, [X31+120]
	370 Move X29, [X31+96]
	371 Move X30, [X31+104]
	372 Move D9, [X31+80]
	373 Move D8, [X31+88]
	374 Move D11, [X31+64]
	375 Move D10, [X31+72]
	376 Move D13, [X31+48]
	377 Move D12, [X31+56]
	378 Move D15, [X31+32]
	379 Move D14, [X31+40]
	380 Add X31, X31, 192
	381 Return 
	382 Call 0x1B6FA1C
	383 Call 0x1B6FA24

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x01C8A434 LDR X9, [X8 + 0xB8]
	0x01C8A438 LDRB W10, [X9 + 0x18]
	0x01C8A43C CBNZ W10, 0x1C8B5A0
	0x01C8A440 LDR W10, [X8 + 0xE0]
	0x01C8A444 CBNZ W10, 0x1C8A460
	0x01C8A448 MOV X0, X8
	0x01C8A44C BL 0x1B6E8F8
	0x01C8A450 ADRP X8, 0x22C3000
	0x01C8A454 LDR X8, [X8 + 0x4E8]
	0x01C8A458 LDR X8, [X8]
	0x01C8A45C LDR X9, [X8 + 0xB8]
	0x01C8A460 LDRB W9, [X9 + 0x1A]
	0x01C8A464 CBNZ W9, 0x1C8B6C8
	0x01C8A468 STR X31, [X31 + 0x30]
	0x01C8A46C TBZ X21, 0x0, 0x1C8A4D8
	0x01C8A470 ADRP X20, 0x22C3000
	0x01C8A474 LDR X20, [X20 + 0x628]
	0x01C8A478 LDR X0, [X20]
	0x01C8A47C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move S0, 1
	005 Move S1, W31
	006 Move S2, W31
	007 Move S3, 1
	008 Move X0, X31
	009 Call Gizmos.set_color, X0
	010 Move X0, X19
	011 Move X1, X31
	012 Call Component.get_transform, X0
	013 Compare X0, 0
	014 JumpIfEqual {23}
	015 Move X1, X31
	016 Call Transform.get_position, X0
	017 Move V3, [X19+136]
	018 Move X0, X31
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Call Gizmos.DrawWireSphere, X0, V0
	022 Return 
	023 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01C8A480 CBNZ W8, 0x1C8A488
	0x01C8A484 BL 0x1B6E8F8
	0x01C8A488 MOVZ W0, 0x3
	0x01C8A48C MOVZ W1, 0x100
	0x01C8A490 MOV X2, X31
	0x01C8A494 BL 0x342AC84

ISIL:
	001 Move W8, 32
	002 Move W9, 0x41C80000
	003 Move X1, X31
	004 Move [X0+152], W8
	005 Move [X0+156], W9
	006 Call NetworkBehaviour..ctor, X0
	007 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01C8A498 MOV W23, W0
	0x01C8A49C LDR X0, [X20]

ISIL:
	001 Move W1, [X0+160]
	002 Call FlareGunProjectile.set_aliveTimer, X0, X1
	003 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01C8A4A0 LDR W8, [X0 + 0xE0]
	0x01C8A4A4 CBNZ W8, 0x1C8A4AC
	0x01C8A4A8 BL 0x1B6E8F8
	0x01C8A4AC MOVZ W0, 0x4
	0x01C8A4B0 MOVZ W1, 0x100
	0x01C8A4B4 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call FlareGunProjectile.get_aliveTimer, X0
	005 Move [X19+160], W0
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 

