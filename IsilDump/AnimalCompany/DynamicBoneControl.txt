Type: DynamicBoneControl

Method: System.Void OnEnable()

Disassembly:
	0x01D31750 LDRSW X9, [X10]
	0x01D31754 ADD X8, X8, X9, 0x4, LSL
	0x01D31758 ADD X0, X8, 0x138
	0x01D3175C LDP X8, X4, [X0]
	0x01D31760 BFM X22, X29, 0x20, 0x1F
	0x01D31764 FMOV S3, 7
	0x01D31768 FMOV S4, 8
	0x01D3176C MOV X0, X21
	0x01D31770 MOV V0.16B, V8.16B
	0x01D31774 MOV V1.16B, V9.16B
	0x01D31778 MOV V2.16B, V10.16B
	0x01D3177C MOV X1, X23
	0x01D31780 MOV X2, X22
	0x01D31784 MOV W3, W31
	0x01D31788 BLR X8
	0x01D3178C LDR W8, [X20 + 0x18]
	0x01D31790 ADD X24, X24, 0x1
	0x01D31794 CMP X24, W8, SXTW
	0x01D31798 B.LT 0x1D31630
	0x01D3179C LDR X20, [X19 + 0x88]
	0x01D317A0 CBZ X20, 0x1D317D0
	0x01D317A4 MOV X0, X19
	0x01D317A8 MOV X1, X31
	0x01D317AC BL 0x3C32E90
	0x01D317B0 CBZ X0, 0x1D3180C
	0x01D317B4 MOV X1, X31
	0x01D317B8 BL 0x3C3F58C
	0x01D317BC FMOV S3, 1
	0x01D317C0 MOVZ W1, 0x1
	0x01D317C4 MOV X0, X20
	0x01D317C8 MOV X2, X31
	0x01D317CC BL 0x1DD0FA8
	0x01D317D0 LDR X0, [X19 + 0x38]
	0x01D317D4 CBZ X0, 0x1D3180C
	0x01D317D8 LDR X1, [X19 + 0x40]
	0x01D317DC MOV X2, X31
	0x01D317E0 BL 0x1EA3884
	0x01D317E4 LDP X20, X19, [X31 + 0x80]
	0x01D317E8 LDP X22, X21, [X31 + 0x70]
	0x01D317EC LDP X24, X23, [X31 + 0x60]
	0x01D317F0 LDP X26, X25, [X31 + 0x50]
	0x01D317F4 LDP X28, X27, [X31 + 0x40]
	0x01D317F8 LDP X29, X30, [X31 + 0x30]
	0x01D317FC LDP D9, D8, [X31 + 0x20]
	0x01D31800 LDR V10, [X31 + 0x10]
	0x01D31804 ADD X31, X31, 0x90
	0x01D31808 RET
	0x01D3180C BL 0x1C16F20
	0x01D31810 BL 0x1C16F28
	0x01D31814 STP X30, X19, [X31 - 0x10]!
	0x01D31818 MOV X19, X0
	0x01D3181C FMOV S0, 1
	0x01D31820 FMOV S1, W31
	0x01D31824 FMOV S2, W31
	0x01D31828 FMOV S3, 1
	0x01D3182C MOV X0, X31
	0x01D31830 BL 0x3C0D030
	0x01D31834 MOV X0, X19
	0x01D31838 MOV X1, X31
	0x01D3183C BL 0x3C32E90
	0x01D31840 CBZ X0, 0x1D3185C
	0x01D31844 MOV X1, X31
	0x01D31848 BL 0x3C3F58C
	0x01D3184C FMOV S3, 7
	0x01D31850 MOV X0, X31
	0x01D31854 LDP X30, X19, [X31], #0x10
	0x01D31858 B 0x3C0CB98
	0x01D3185C BL 0x1C16F20
	0x01D31860 STR X30, [X31 - 0x30]!
	0x01D31864 STP X22, X21, [X31 + 0x10]
	0x01D31868 STP X20, X19, [X31 + 0x20]
	0x01D3186C ADRP X22, 0x26A7000
	0x01D31870 ADRP X21, 0x23C2000
	0x01D31874 ADRP X20, 0x23C2000
	0x01D31878 LDRB W8, [X22 + 0x6B4]
	0x01D3187C LDR X21, [X21 + 0x608]
	0x01D31880 LDR X20, [X20 + 0x610]
	0x01D31884 MOV X19, X0
	0x01D31888 TBNZ X8, 0x0, 0x1D318AC
	0x01D3188C ADRP X0, 0x23C2000
	0x01D31890 LDR X0, [X0 + 0x610]
	0x01D31894 BL 0x1C16CF4
	0x01D31898 ADRP X0, 0x23C2000
	0x01D3189C LDR X0, [X0 + 0x608]
	0x01D318A0 BL 0x1C16CF4
	0x01D318A4 MOVZ W8, 0x1
	0x01D318A8 STRB W8, [X22 + 0x6B4]
	0x01D318AC MOVZ W8, 0x20
	0x01D318B0 STRB W8, [X19 + 0x90]
	0x01D318B4 LDR X0, [X21]
	0x01D318B8 BL 0x1C16F10
	0x01D318BC LDR X1, [X20]
	0x01D318C0 MOV X20, X0
	0x01D318C4 BL 0x301B7C4
	0x01D318C8 STR X20, [X19 + 0x98]
	0x01D318CC MOV X0, X19
	0x01D318D0 LDP X20, X19, [X31 + 0x20]
	0x01D318D4 LDP X22, X21, [X31 + 0x10]
	0x01D318D8 MOV X1, X31
	0x01D318DC LDR X30, [X31], #0x30
	0x01D318E0 B 0x1E74F04
	0x01D318E4 LDR W1, [X0 + 0x94]
	0x01D318E8 B 0x1D31380
	0x01D318EC STP X30, X19, [X31 - 0x10]!
	0x01D318F0 MOV X19, X0
	0x01D318F4 BL 0x1D31320
	0x01D318F8 STR W0, [X19 + 0x94]
	0x01D318FC LDP X30, X19, [X31], #0x10
	0x01D31900 RET
	0x01D31904 STP X30, X23, [X31 - 0x30]!
	0x01D31908 STP X22, X21, [X31 + 0x10]
	0x01D3190C STP X20, X19, [X31 + 0x20]
	0x01D31910 ADRP X23, 0x26A7000
	0x01D31914 ADRP X22, 0x23C2000
	0x01D31918 ADRP X20, 0x23C2000
	0x01D3191C ADRP X21, 0x23C2000
	0x01D31920 MOV X19, X8
	0x01D31924 LDRB W8, [X23 + 0x6B5]
	0x01D31928 LDR X22, [X22 + 0x618]
	0x01D3192C LDR X20, [X20 + 0x620]
	0x01D31930 LDR X21, [X21 + 0x628]
	0x01D31934 TBNZ X8, 0x0, 0x1D31964
	0x01D31938 ADRP X0, 0x23C2000
	0x01D3193C LDR X0, [X0 + 0x618]
	0x01D31940 BL 0x1C16CF4
	0x01D31944 ADRP X0, 0x23C2000
	0x01D31948 LDR X0, [X0 + 0x628]
	0x01D3194C BL 0x1C16CF4
	0x01D31950 ADRP X0, 0x23C2000
	0x01D31954 LDR X0, [X0 + 0x620]
	0x01D31958 BL 0x1C16CF4
	0x01D3195C MOVZ W8, 0x1
	0x01D31960 STRB W8, [X23 + 0x6B5]
	0x01D31964 LDR X0, [X22]
	0x01D31968 MOVZ W1, 0x4FFD
	0x01D3196C BL 0x1C16D6C
	0x01D31970 LDR X1, [X20]
	0x01D31974 MOV X2, X31
	0x01D31978 MOV X20, X0
	0x01D3197C BL 0x32C5BD8
	0x01D31980 LDR X0, [X22]
	0x01D31984 MOVZ W1, 0x42FC
	0x01D31988 BL 0x1C16D6C
	0x01D3198C LDR X1, [X21]
	0x01D31990 MOV X2, X31
	0x01D31994 MOV X21, X0

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X28
	012 Move [X31+104], X27
	013 Move [X31+112], X26
	014 Move [X31+120], X25
	015 Move [X31+128], X24
	016 Move [X31+136], X23
	017 Move [X31+144], X22
	018 Move [X31+152], X21
	019 Move [X31+160], X20
	020 Move [X31+168], X19
	021 Move X20, 0x26A8000
	022 Move W8, [X20+1712]
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {36}
	028 Move X0, 0x23C3000
	029 Move X0, [X0+1416]
	030 Call 0x1C17CF4
	031 Move X0, 0x23C3000
	032 Move X0, [X0+1424]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+1712], W8
	036 Move X21, [X19+48]
	037 Compare X21, 0
	038 JumpIfEqual {172}
	039 Move W8, [X21+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X23, 0x23C3000
	042 Move X24, 0x23C3000
	043 Move X23, [X23+1416]
	044 Move X24, [X24+1424]
	045 Move W22, W31
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Add X8, X21, W22
	048 Move X25, [X8+32]
	049 Compare X25, 0
	050 JumpIfEqual {172}
	051 Move X8, [X25+24]
	052 Compare X8, 0
	053 JumpIfEqual {172}
	054 Move X0, [X23]
	055 Move W1, [X8+24]
	056 Call 0x1C17D6C
	057 Move X8, [X25+24]
	058 Move [X25+32], X0
	059 Compare X8, 0
	060 JumpIfEqual {172}
	061 Move W26, 4
	062 Move W9, [X8+24]
	063 Subtract X27, X26, 4
	064 NotImplemented "Instruction CMP not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, [X8]
	067 Compare X0, 0
	068 JumpIfEqual {172}
	069 Move X28, [X25+32]
	070 Move X1, X31
	071 Call Transform.get_parent, X0
	072 Move X8, [X25+24]
	073 Compare X8, 0
	074 JumpIfEqual {172}
	075 Move W9, [X8+24]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X19, X0
	078 Move X0, [X8]
	079 Compare X0, 0
	080 JumpIfEqual {172}
	081 Move X1, X31
	082 Call Transform.get_position, X0
	083 Move X8, [X25+24]
	084 Compare X8, 0
	085 JumpIfEqual {172}
	086 Move W9, [X8+24]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X0, [X8]
	089 Compare X0, 0
	090 JumpIfEqual {172}
	091 Move X1, X31
	092 Move V8, V0
	093 Move V9, V1
	094 Move V10, V2
	095 Call Transform.get_localPosition, X0
	096 Move X8, [X25+24]
	097 Compare X8, 0
	098 JumpIfEqual {172}
	099 Move W9, [X8+24]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X0, [X8]
	102 Compare X0, 0
	103 JumpIfEqual {172}
	104 Move X1, X31
	105 Move V11, V0
	106 Move V12, V1
	107 Move V13, V2
	108 Call Transform.get_localRotation, X0
	109 Move X0, [X24]
	110 Move V14, V0
	111 Move V15, V1
	112 Move [X31+88], S10
	113 Move [X31+96], S8
	114 Move V8, V2
	115 Move V10, V9
	116 Move V9, V3
	117 Call 0x1C17F10
	118 Move S2, [X31+88]
	119 Move S0, [X31+92]
	120 Move X1, X19
	121 Move V1, V10
	122 Move V3, V11
	123 Move V4, V12
	124 Move V5, V13
	125 Move X20, X0
	126 Move [X31+8], S8
	127 Move [X31+16], S9
	128 Move [X31], S14
	129 Move [X31+8], S15
	130 Call Node..ctor, X0, X1, X2, X3, X4
	131 Compare X28, 0
	132 JumpIfEqual {172}
	133 Compare X20, 0
	134 JumpIfEqual {141}
	135 Move X8, [X28]
	136 Move X0, X20
	137 Move X1, [X8+64]
	138 Call 0x1C17E00
	139 Compare X0, 0
	140 JumpIfEqual {174}
	141 Move W8, [X28+24]
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Move [X28], X20
	144 Move X8, [X25+24]
	145 Add X26, X26, 1
	146 Compare X8, 0
	147 JumpIfNotEqual {62}
	148 Move W8, [X21+24]
	149 Add W22, W22, 1
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move X20, [X31+160]
	152 Move X19, [X31+168]
	153 Move X22, [X31+144]
	154 Move X21, [X31+152]
	155 Move X24, [X31+128]
	156 Move X23, [X31+136]
	157 Move X26, [X31+112]
	158 Move X25, [X31+120]
	159 Move X28, [X31+96]
	160 Move X27, [X31+104]
	161 Move X30, [X31+80]
	162 Move D9, [X31+64]
	163 Move D8, [X31+72]
	164 Move D11, [X31+48]
	165 Move D10, [X31+56]
	166 Move D13, [X31+32]
	167 Move D12, [X31+40]
	168 Move D15, [X31+16]
	169 Move D14, [X31+24]
	170 Add X31, X31, 176
	171 Return 
	172 Call 0x1C17F20
	173 Call 0x1C17F28
	174 Call 0x1C17F44
	175 Move X1, X31
	176 Call 0x1C17DEC

Method: System.Void LateUpdate()

Disassembly:
	0x01D31B80 LDR X8, [X19]
	0x01D31B84 ADD X21, X21, 0x1
	0x01D31B88 ADD X22, X22, 0x48
	0x01D31B8C ADD W20, W20, 0x1
	0x01D31B90 LDR X8, [X8 + 0xB8]
	0x01D31B94 B 0x1D31AEC
	0x01D31B98 LDP X20, X19, [X31 + 0x110]
	0x01D31B9C LDP X22, X21, [X31 + 0x100]
	0x01D31BA0 LDP X24, X23, [X31 + 0xF0]
	0x01D31BA4 LDP X29, X30, [X31 + 0xE0]
	0x01D31BA8 ADD X31, X31, 0x120
	0x01D31BAC RET
	0x01D31BB0 BL 0x1C16F28
	0x01D31BB4 BL 0x1C16F20
	0x01D31BB8 MOVZ W10, 0x5556
	0x01D31BBC SUB W9, W0, 0x2
	0x01D31BC0 MOVK W10, 0x55550000
	0x01D31BC4 SMADDL X10, X9, X10, X31
	0x01D31BC8 UBFM X11, X10, 0x3F, 0x3F
	0x01D31BCC UBFM X10, X10, 0x20, 0x3F
	0x01D31BD0 ADD W3, W10, W11
	0x01D31BD4 SUB W10, W3, W3, 0x2, LSL
	0x01D31BD8 ADD W9, W10, W9
	0x01D31BDC CMP W9, 0x0
	0x01D31BE0 CINC W1, W3, GT
	0x01D31BE4 CMP W9, 0x2
	0x01D31BE8 MOVI V0.2D, 0x0
	0x01D31BEC CINC W2, W3, EQ
	0x01D31BF0 MOV X0, X8
	0x01D31BF4 STR X31, [X8 + 0x40]
	0x01D31BF8 STP V0, V0, [X8 + 0x20]
	0x01D31BFC STP V0, V0, [X8]
	0x01D31C00 B 0x1D328A0
	0x01D31C04 SUB X31, X31, 0x90
	0x01D31C08 STP D11, D10, [X31 + 0x50]
	0x01D31C0C STP D9, D8, [X31 + 0x60]
	0x01D31C10 STP X30, X21, [X31 + 0x70]
	0x01D31C14 STP X20, X19, [X31 + 0x80]
	0x01D31C18 ADRP X21, 0x26A7000
	0x01D31C1C ADRP X20, 0x23C2000
	0x01D31C20 LDRB W8, [X21 + 0x6B8]
	0x01D31C24 LDR X20, [X20 + 0x630]
	0x01D31C28 MOV W19, W0
	0x01D31C2C MOV V8.16B, V3.16B
	0x01D31C30 MOV V9.16B, V2.16B
	0x01D31C34 MOV V10.16B, V1.16B
	0x01D31C38 MOV V11.16B, V0.16B
	0x01D31C3C TBNZ X8, 0x0, 0x1D31C54
	0x01D31C40 ADRP X0, 0x23C2000
	0x01D31C44 LDR X0, [X0 + 0x630]
	0x01D31C48 BL 0x1C16CF4
	0x01D31C4C MOVZ W8, 0x1
	0x01D31C50 STRB W8, [X21 + 0x6B8]
	0x01D31C54 LDR X0, [X20]
	0x01D31C58 LDR W8, [X0 + 0xE0]
	0x01D31C5C CBNZ W8, 0x1D31C68
	0x01D31C60 BL 0x1C16DFC
	0x01D31C64 LDR X0, [X20]
	0x01D31C68 LDR X8, [X0 + 0xB8]
	0x01D31C6C LDR X8, [X8 + 0x10]
	0x01D31C70 CBZ X8, 0x1D31CC8
	0x01D31C74 LDR W9, [X8 + 0x18]
	0x01D31C78 CMP W9, W19
	0x01D31C7C B.LS 0x1D31CCC
	0x01D31C80 MOVZ W9, 0x48
	0x01D31C84 SMADDL X8, X19, X9, X8
	0x01D31C88 ADD X1, X8, 0x20
	0x01D31C8C ADD X0, X31, 0x8
	0x01D31C90 MOVZ W2, 0x48
	0x01D31C94 BL 0x3EB1AC0
	0x01D31C98 ADD X0, X31, 0x8
	0x01D31C9C MOV V0.16B, V11.16B
	0x01D31CA0 MOV V1.16B, V10.16B
	0x01D31CA4 MOV V2.16B, V9.16B
	0x01D31CA8 MOV V3.16B, V8.16B
	0x01D31CAC BL 0x1D31CD0
	0x01D31CB0 LDP X20, X19, [X31 + 0x80]
	0x01D31CB4 LDP X30, X21, [X31 + 0x70]
	0x01D31CB8 LDP D9, D8, [X31 + 0x60]
	0x01D31CBC LDP D11, D10, [X31 + 0x50]
	0x01D31CC0 ADD X31, X31, 0x90
	0x01D31CC4 RET
	0x01D31CC8 BL 0x1C16F20
	0x01D31CCC BL 0x1C16F28
	0x01D31CD0 FABS S4, S0
	0x01D31CD4 FABS S5, S1
	0x01D31CD8 FABS S6, S2
	0x01D31CDC FABS S7, S3
	0x01D31CE0 FCMP S4, S5
	0x01D31CE4 CSET W10, LE
	0x01D31CE8 FCSEL S4, S4, S5, GT
	0x01D31CEC FCMP S6, S7
	0x01D31CF0 MOVZ W8, 0x3
	0x01D31CF4 MOVZ W9, 0x2
	0x01D31CF8 FCSEL S5, S6, S7, GT
	0x01D31CFC CSEL W8, W9, W8, GT
	0x01D31D00 FCMP S4, S5
	0x01D31D04 CSEL W8, W10, W8, GT
	0x01D31D08 CMP W8, 0x2
	0x01D31D0C B.EQ 0x1D31D28
	0x01D31D10 CMP W8, 0x1
	0x01D31D14 B.EQ 0x1D31D30
	0x01D31D18 CBNZ W8, 0x1D31D38
	0x01D31D1C MOV V4.16B, V0.16B
	0x01D31D20 MOV V0.16B, V1.16B
	0x01D31D24 B 0x1D31D44
	0x01D31D28 MOV V4.16B, V2.16B
	0x01D31D2C B 0x1D31D40
	0x01D31D30 MOV V4.16B, V1.16B
	0x01D31D34 B 0x1D31D44
	0x01D31D38 MOV V4.16B, V3.16B
	0x01D31D3C MOV V3.16B, V2.16B
	0x01D31D40 MOV V2.16B, V1.16B
	0x01D31D44 LDP S6, S5, [X0 + 0x3C]
	0x01D31D48 LDR V1, [X0 + 0x44]
	0x01D31D4C LDP W13, W11, [X0 + 0x1C]
	0x01D31D50 LDP W12, W9, [X0 + 0xC]
	0x01D31D54 LDP W10, W14, [X0 + 0x14]
	0x01D31D58 FCVT S0, S0
	0x01D31D5C FCMP S4, 0x0
	0x01D31D60 FCVT S4, S6
	0x01D31D64 B.LE 0x1D31DC8
	0x01D31D68 FMUL D0, D0, D4
	0x01D31D6C UCVTF D4, W14
	0x01D31D70 FCVT S2, S2
	0x01D31D74 FCVT S5, S5
	0x01D31D78 FADD D0, D0, D4
	0x01D31D7C UCVTF D4, W13
	0x01D31D80 FMUL D2, D2, D5
	0x01D31D84 UCVTF D5, W11
	0x01D31D88 FCVTZS X11, D0
	0x01D31D8C FCVTZU X13, D0
	0x01D31D90 FCMP D0, 0x0
	0x01D31D94 FADD D0, D2, D4
	0x01D31D98 CSEL X11, X11, X13, MI
	0x01D31D9C FCVTZS X13, D0
	0x01D31DA0 FCVTZU X14, D0
	0x01D31DA4 FCMP D0, 0x0
	0x01D31DA8 FCVT S3, S3
	0x01D31DAC FCVT S1, S1
	0x01D31DB0 CSEL X13, X13, X14, MI
	0x01D31DB4 FMUL D1, D3, D1
	0x01D31DB8 LSLV X12, X13, X12
	0x01D31DBC ORR X11, X12, X11, 0x0
	0x01D31DC0 FADD D0, D1, D5
	0x01D31DC4 B 0x1D31E24
	0x01D31DC8 UCVTF D6, W14
	0x01D31DCC FMUL D0, D0, D4
	0x01D31DD0 FCVT S2, S2
	0x01D31DD4 FCVT S4, S5
	0x01D31DD8 UCVTF D5, W13
	0x01D31DDC FSUB D0, D6, D0
	0x01D31DE0 FMUL D2, D2, D4
	0x01D31DE4 UCVTF D6, W11
	0x01D31DE8 FCVTZS X11, D0
	0x01D31DEC FCVTZU X13, D0
	0x01D31DF0 FCMP D0, 0x0
	0x01D31DF4 FSUB D0, D5, D2
	0x01D31DF8 CSEL X11, X11, X13, MI
	0x01D31DFC FCVTZS X13, D0
	0x01D31E00 FCVTZU X14, D0
	0x01D31E04 FCMP D0, 0x0
	0x01D31E08 FCVT S3, S3
	0x01D31E0C FCVT S1, S1
	0x01D31E10 CSEL X13, X13, X14, MI
	0x01D31E14 FMUL D1, D3, D1
	0x01D31E18 LSLV X12, X13, X12
	0x01D31E1C ORR X11, X12, X11, 0x0
	0x01D31E20 FSUB D0, D6, D1
	0x01D31E24 FCVTZS X12, D0
	0x01D31E28 FCVTZU X13, D0
	0x01D31E2C FCMP D0, 0x0
	0x01D31E30 CSEL X12, X12, X13, MI
	0x01D31E34 MOV W8, W8
	0x01D31E38 LSLV X9, X12, X9
	0x01D31E3C ORR X9, X11, X9, 0x0
	0x01D31E40 LSLV X8, X8, X10
	0x01D31E44 ORR X0, X9, X8, 0x0
	0x01D31E48 RET
	0x01D31E4C SUB X31, X31, 0x90
	0x01D31E50 STP D11, D10, [X31 + 0x50]
	0x01D31E54 STP D9, D8, [X31 + 0x60]
	0x01D31E58 STP X30, X21, [X31 + 0x70]
	0x01D31E5C STP X20, X19, [X31 + 0x80]
	0x01D31E60 ADRP X21, 0x26A7000
	0x01D31E64 ADRP X20, 0x23C2000
	0x01D31E68 LDRB W8, [X21 + 0x6B9]
	0x01D31E6C LDR X20, [X20 + 0x630]
	0x01D31E70 MOV W19, W0
	0x01D31E74 MOV V8.16B, V3.16B
	0x01D31E78 MOV V9.16B, V2.16B
	0x01D31E7C MOV V10.16B, V1.16B
	0x01D31E80 MOV V11.16B, V0.16B
	0x01D31E84 TBNZ X8, 0x0, 0x1D31E9C
	0x01D31E88 ADRP X0, 0x23C2000
	0x01D31E8C LDR X0, [X0 + 0x630]
	0x01D31E90 BL 0x1C16CF4
	0x01D31E94 MOVZ W8, 0x1
	0x01D31E98 STRB W8, [X21 + 0x6B9]
	0x01D31E9C LDR X0, [X20]
	0x01D31EA0 LDR W8, [X0 + 0xE0]
	0x01D31EA4 CBNZ W8, 0x1D31EB0
	0x01D31EA8 BL 0x1C16DFC
	0x01D31EAC LDR X0, [X20]
	0x01D31EB0 LDR X8, [X0 + 0xB8]
	0x01D31EB4 LDR X8, [X8 + 0x10]
	0x01D31EB8 CBZ X8, 0x1D31F10
	0x01D31EBC LDR W9, [X8 + 0x18]
	0x01D31EC0 CMP W9, W19
	0x01D31EC4 B.LS 0x1D31F14
	0x01D31EC8 MOVZ W9, 0x48
	0x01D31ECC SMADDL X8, X19, X9, X8
	0x01D31ED0 ADD X1, X8, 0x20
	0x01D31ED4 ADD X0, X31, 0x8
	0x01D31ED8 MOVZ W2, 0x48
	0x01D31EDC BL 0x3EB1AC0
	0x01D31EE0 ADD X0, X31, 0x8
	0x01D31EE4 MOV V0.16B, V11.16B
	0x01D31EE8 MOV V1.16B, V10.16B
	0x01D31EEC MOV V2.16B, V9.16B
	0x01D31EF0 MOV V3.16B, V8.16B
	0x01D31EF4 BL 0x1D31CD0
	0x01D31EF8 LDP X20, X19, [X31 + 0x80]
	0x01D31EFC LDP X30, X21, [X31 + 0x70]
	0x01D31F00 LDP D9, D8, [X31 + 0x60]
	0x01D31F04 LDP D11, D10, [X31 + 0x50]
	0x01D31F08 ADD X31, X31, 0x90
	0x01D31F0C RET
	0x01D31F10 BL 0x1C16F20
	0x01D31F14 BL 0x1C16F28
	0x01D31F18 SUB X31, X31, 0x90
	0x01D31F1C STP D11, D10, [X31 + 0x50]
	0x01D31F20 STP D9, D8, [X31 + 0x60]
	0x01D31F24 STP X30, X21, [X31 + 0x70]
	0x01D31F28 STP X20, X19, [X31 + 0x80]
	0x01D31F2C ADRP X21, 0x26A7000
	0x01D31F30 ADRP X20, 0x23C2000
	0x01D31F34 LDRB W8, [X21 + 0x6BA]
	0x01D31F38 LDR X20, [X20 + 0x630]
	0x01D31F3C MOV W19, W0
	0x01D31F40 MOV V8.16B, V3.16B
	0x01D31F44 MOV V9.16B, V2.16B
	0x01D31F48 MOV V10.16B, V1.16B
	0x01D31F4C MOV V11.16B, V0.16B
	0x01D31F50 TBNZ X8, 0x0, 0x1D31F68
	0x01D31F54 ADRP X0, 0x23C2000
	0x01D31F58 LDR X0, [X0 + 0x630]
	0x01D31F5C BL 0x1C16CF4
	0x01D31F60 MOVZ W8, 0x1
	0x01D31F64 STRB W8, [X21 + 0x6BA]
	0x01D31F68 LDR X0, [X20]
	0x01D31F6C CMP W19, 0x10
	0x01D31F70 MOVZ W9, 0x10
	0x01D31F74 CSEL W19, W19, W9, GT
	0x01D31F78 LDR W8, [X0 + 0xE0]
	0x01D31F7C CBNZ W8, 0x1D31F88
	0x01D31F80 BL 0x1C16DFC
	0x01D31F84 LDR X0, [X20]
	0x01D31F88 LDR X8, [X0 + 0xB8]
	0x01D31F8C LDR X8, [X8 + 0x10]
	0x01D31F90 CBZ X8, 0x1D31FE8
	0x01D31F94 LDR W9, [X8 + 0x18]
	0x01D31F98 CMP W19, W9
	0x01D31F9C B.CS 0x1D31FEC
	0x01D31FA0 MOVZ W9, 0x48
	0x01D31FA4 UMADDL X8, X19, X9, X8
	0x01D31FA8 ADD X1, X8, 0x20
	0x01D31FAC ADD X0, X31, 0x8
	0x01D31FB0 MOVZ W2, 0x48
	0x01D31FB4 BL 0x3EB1AC0
	0x01D31FB8 ADD X0, X31, 0x8
	0x01D31FBC MOV V0.16B, V11.16B
	0x01D31FC0 MOV V1.16B, V10.16B
	0x01D31FC4 MOV V2.16B, V9.16B
	0x01D31FC8 MOV V3.16B, V8.16B
	0x01D31FCC BL 0x1D31CD0
	0x01D31FD0 LDP X20, X19, [X31 + 0x80]
	0x01D31FD4 LDP X30, X21, [X31 + 0x70]
	0x01D31FD8 LDP D9, D8, [X31 + 0x60]
	0x01D31FDC LDP D11, D10, [X31 + 0x50]
	0x01D31FE0 ADD X31, X31, 0x90
	0x01D31FE4 RET
	0x01D31FE8 BL 0x1C16F20
	0x01D31FEC BL 0x1C16F28
	0x01D31FF0 SUB X31, X31, 0x90
	0x01D31FF4 STP D11, D10, [X31 + 0x50]
	0x01D31FF8 STP D9, D8, [X31 + 0x60]
	0x01D31FFC STR X30, [X31 + 0x70]

ISIL:
	001 Move [X31-128], D15
	002 Move [X31-120], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+72], X25
	011 Move [X31+80], X24
	012 Move [X31+88], X23
	013 Move [X31+96], X22
	014 Move [X31+104], X21
	015 Move [X31+112], X20
	016 Move [X31+120], X19
	017 Move X20, 0x26A8000
	018 Move W8, [X20+1713]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x23C3000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+1713], W8
	029 Move W8, [X19+32]
	030 Compare W8, 0
	031 JumpIfEqual {310}
	032 Move X20, [X19+48]
	033 Compare X20, 0
	034 JumpIfEqual {327}
	035 Move W8, [X20+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X9, -19161088
	038 Move X22, 0x23C3000
	039 Move V15, [X9+260]
	040 Move X22, [X22+1432]
	041 Move W21, W31
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Add X8, X20, W21
	044 Move X23, [X8+32]
	045 Compare X23, 0
	046 JumpIfEqual {327}
	047 Move X8, [X23+24]
	048 Compare X8, 0
	049 JumpIfEqual {327}
	050 Move TEMP, 0
	051 Not TEMP
	052 Move W19, TEMP
	053 Move X10, [X8+24]
	054 Add W9, W19, 1
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X10, [X23+32]
	058 Compare X10, 0
	059 JumpIfEqual {327}
	060 Move W11, [X10+24]
	061 Add W19, W19, 1
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X11, W9
	064 Add X9, X10, X11
	065 Move X9, [X9+32]
	066 Compare X9, 0
	067 JumpIfEqual {327}
	068 Add X8, X8, X11
	069 Move X0, [X8+32]
	070 Compare X0, 0
	071 JumpIfEqual {327}
	072 Move S2, [X9+56]
	073 Move S3, [X9+60]
	074 Move S0, [X9+48]
	075 Move S1, [X9+52]
	076 Move X1, X31
	077 Call Transform.set_localRotation, X0, X1
	078 Move X8, [X23+24]
	079 Compare X8, 0
	080 JumpIfNotEqual {53}
	081 And X9, X10, 0
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move W10, W31
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X24, W10
	086 Add X8, X8, X24
	087 Move X0, [X8+32]
	088 Compare X0, 0
	089 JumpIfEqual {327}
	090 Move X1, X31
	091 Call Transform.get_parent, X0
	092 Move X8, [X22]
	093 Move X19, X0
	094 Move W9, [X8+224]
	095 Compare W9, 0
	096 JumpIfNotEqual {99}
	097 Move X0, X8
	098 Call 0x1C17DFC
	099 Move X0, X19
	100 Move X1, X31
	101 Move X2, X31
	102 Call Object.op_Inequality, X0, X1
	103 Move X8, [X23+32]
	104 Compare X8, 0
	105 JumpIfEqual {327}
	106 Move W9, [X8+24]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Add X9, X8, X24
	109 Move X9, [X9+32]
	110 Compare X9, 0
	111 JumpIfEqual {327}
	112 Move S8, [X9+36]
	113 Move S9, [X9+40]
	114 Move V10, [X9+44]
	115 Move TEMP, X0
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {133}
	119 Compare X19, 0
	120 JumpIfEqual {327}
	121 Move X0, X19
	122 Move V0, V8
	123 Move V1, V9
	124 Move V2, V10
	125 Move X1, X31
	126 Call Transform.TransformPoint, X0, X1
	127 Move X8, [X23+32]
	128 Compare X8, 0
	129 JumpIfEqual {327}
	130 Move V8, V0
	131 Move V9, V1
	132 Move V10, V2
	133 Move W9, [X8+24]
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Add X8, X8, X24
	136 Move X19, [X8+32]
	137 Move X0, X31
	138 Call Time.get_deltaTime
	139 Compare X19, 0
	140 JumpIfEqual {327}
	141 Move S5, [X23+68]
	142 Move S6, [X23+72]
	143 Move V4, [X23+64]
	144 Move V3, V0
	145 Move X0, X19
	146 Move V0, V8
	147 Move V1, V9
	148 Move V2, V10
	149 Call Node.Update, X0, X1, V0, V1, V2, V3
	150 Move X8, [X23+24]
	151 Compare X8, 0
	152 JumpIfEqual {327}
	153 Move W9, [X8+24]
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Move X9, [X23+32]
	156 Compare X9, 0
	157 JumpIfEqual {327}
	158 Move W10, [X9+24]
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Add X9, X9, X24
	161 Move X9, [X9+32]
	162 Compare X9, 0
	163 JumpIfEqual {327}
	164 Add X8, X8, X24
	165 Move X0, [X8+32]
	166 Compare X0, 0
	167 JumpIfEqual {327}
	168 Move S1, [X9+28]
	169 Move S2, [X9+32]
	170 Move V0, [X9+24]
	171 Move X1, X31
	172 Call Transform.set_position, X0, X1
	173 Move X8, [X23+24]
	174 Compare X8, 0
	175 JumpIfEqual {327}
	176 Move X9, [X8+24]
	177 Add W10, W24, 1
	178 NotImplemented "Instruction CMP not yet implemented."
	179 And X9, X9, 0
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move X19, X31
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Add X8, X8, X19
	184 Move X0, [X8+32]
	185 Subtract W8, W9, 1
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Compare X0, 0
	188 JumpIfEqual {327}
	189 Move X1, X31
	190 Call Transform.get_position, X0
	191 Move X8, [X23+24]
	192 Compare X8, 0
	193 JumpIfEqual {327}
	194 Move W9, [X8+24]
	195 Add X24, X19, 1
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Move X25, W24
	198 Add X8, X8, X25
	199 Move X0, [X8+32]
	200 Compare X0, 0
	201 JumpIfEqual {327}
	202 Move X1, X31
	203 Move V11, V0
	204 Move V12, V1
	205 Move V13, V2
	206 Call Transform.get_position, X0
	207 Move X8, [X23+24]
	208 Compare X8, 0
	209 JumpIfEqual {327}
	210 Move W9, [X8+24]
	211 NotImplemented "Instruction CMP not yet implemented."
	212 Add X8, X8, X19
	213 Move S3, [X23+40]
	214 Move S4, [X23+44]
	215 Move V5, [X23+48]
	216 Move X19, [X8+32]
	217 Move V8, V0
	218 Move V9, V1
	219 Move V10, V2
	220 Subtract S0, S0, S11
	221 Subtract S1, S1, S12
	222 Subtract S2, S2, S13
	223 Move X0, X31
	224 Call Quaternion.LookRotation, X0, X1
	225 Move V12, V0
	226 Move V14, V1
	227 Move V11, V2
	228 Move S0, [X23+52]
	229 Move S1, [X23+56]
	230 Move V2, [X23+60]
	231 Move X0, X31
	232 Move V13, V3
	233 Multiply S0, S0, S15
	234 Multiply S1, S1, S15
	235 Multiply S2, S2, S15
	236 Call Quaternion.Internal_FromEulerRad, X0
	237 Compare X19, 0
	238 JumpIfEqual {327}
	239 Multiply S4, S13, S3
	240 Multiply S5, S12, S0
	241 Multiply S7, S11, S2
	242 Multiply S17, S13, S2
	243 Multiply S18, S11, S3
	244 Multiply S19, S14, S0
	245 Multiply S20, S14, S3
	246 Multiply S21, S14, S2
	247 Multiply S22, S12, S2
	248 Multiply S2, S12, S3
	249 Multiply S3, S11, S0
	250 Multiply S0, S13, S0
	251 Multiply S23, S13, S1
	252 Multiply S6, S14, S1
	253 Multiply S16, S12, S1
	254 Multiply S24, S11, S1
	255 Subtract S1, S4, S5
	256 Add S4, S17, S18
	257 Add S5, S23, S20
	258 Add S0, S0, S2
	259 Subtract S1, S1, S6
	260 Add S2, S16, S4
	261 Add S4, S3, S5
	262 Add S0, S21, S0
	263 Subtract S3, S1, S7
	264 Subtract S2, S2, S19
	265 Subtract S1, S4, S22
	266 Subtract S0, S0, S24
	267 Move X0, X19
	268 Move X1, X31
	269 Call Transform.set_rotation, X0, X1
	270 Move X8, [X23+24]
	271 Compare X8, 0
	272 JumpIfEqual {327}
	273 Move W9, [X8+24]
	274 NotImplemented "Instruction CMP not yet implemented."
	275 Add X8, X8, X25
	276 Move X0, [X8+32]
	277 Compare X0, 0
	278 JumpIfEqual {327}
	279 Move V0, V8
	280 Move V1, V9
	281 Move V2, V10
	282 Move X1, X31
	283 Call Transform.set_position, X0, X1
	284 Move X19, X24
	285 Move X8, [X23+32]
	286 Compare X8, 0
	287 JumpIfEqual {327}
	288 Move W9, [X8+24]
	289 NotImplemented "Instruction CMP not yet implemented."
	290 Add X8, X8, X19
	291 Move X8, [X8+32]
	292 Compare X8, 0
	293 JumpIfEqual {327}
	294 Compare X0, 0
	295 JumpIfEqual {327}
	296 Move S1, [X8+28]
	297 Move S2, [X8+32]
	298 Move V0, [X8+24]
	299 Move X1, X31
	300 Call Transform.set_position, X0, X1
	301 Add X19, X19, 1
	302 Move X8, [X23+24]
	303 Compare X8, 0
	304 JumpIfEqual {327}
	305 Move W9, [X8+24]
	306 NotImplemented "Instruction CMP not yet implemented."
	307 Move W8, [X20+24]
	308 Add W21, W21, 1
	309 NotImplemented "Instruction CMP not yet implemented."
	310 Move X20, [X31+112]
	311 Move X19, [X31+120]
	312 Move X22, [X31+96]
	313 Move X21, [X31+104]
	314 Move X24, [X31+80]
	315 Move X23, [X31+88]
	316 Move X30, [X31+64]
	317 Move X25, [X31+72]
	318 Move D9, [X31+48]
	319 Move D8, [X31+56]
	320 Move D11, [X31+32]
	321 Move D10, [X31+40]
	322 Move D13, [X31+16]
	323 Move D12, [X31+24]
	324 Move D15, [X31+128]
	325 Move D14, [X31+136]
	326 Return 
	327 Call 0x1C17F20
	328 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x01D32290 B.MI 0x1D322C4
	0x01D32294 CBZ X19, 0x1D322E0
	0x01D32298 LDR W9, [X19 + 0x18]
	0x01D3229C SUB W10, W21, 0x8

ISIL:
	001 Move W8, 1
	002 Move X1, X31
	003 Move [X0+32], W8
	004 Call MonoBehaviour..ctor, X0
	005 Return 

