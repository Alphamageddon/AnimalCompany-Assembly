Type: AnimalCompany.FlareGun/<Shoot>d__14

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x01C9E550 MOV X2, X31
	0x01C9E554 BL 0x31E7550
	0x01C9E558 ADRP X0, 0x22B0000
	0x01C9E55C LDR X0, [X0 + 0x3B0]
	0x01C9E560 BL 0x1B6E804
	0x01C9E564 MOV X1, X0
	0x01C9E568 MOV X0, X19
	0x01C9E56C BL 0x1B6E8E8
	0x01C9E570 LDR X0, [X0 + 0x120]
	0x01C9E574 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x01C9E5B4 LDR X0, [X0 + 0x3B8]

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x01C9E5B8 BL 0x1B6E7F0
	0x01C9E5BC ADRP X0, 0x22B0000
	0x01C9E5C0 LDR X0, [X0 + 0x3C0]
	0x01C9E5C4 BL 0x1B6E7F0
	0x01C9E5C8 MOVZ W8, 0x1
	0x01C9E5CC STRB W8, [X20 + 0x40E]
	0x01C9E5D0 LDR X20, [X19 + 0x38]
	0x01C9E5D4 CBZ X20, 0x1C9E628
	0x01C9E5D8 LDR X19, [X19 + 0x40]
	0x01C9E5DC MOV X0, X20
	0x01C9E5E0 MOV X1, X31
	0x01C9E5E4 BL 0x1D87528
	0x01C9E5E8 LDR X8, [X20 + 0x50]
	0x01C9E5EC CBZ X8, 0x1C9E618
	0x01C9E5F0 AND X2, X0, 0x0
	0x01C9E5F4 MOV X0, X8
	0x01C9E5F8 MOV X1, X19
	0x01C9E5FC MOV X3, X31
	0x01C9E600 BL 0x1CA54FC
	0x01C9E604 ANDS W31, W0, 0xFF
	0x01C9E608 B.EQ 0x1C9E618
	0x01C9E60C ANDS X31, X0, 0xFFFF
	0x01C9E610 CSET W0, NE
	0x01C9E614 B 0x1C9E61C
	0x01C9E618 MOVZ W0, 0x1
	0x01C9E61C LDP X20, X19, [X31 + 0x10]
	0x01C9E620 LDR X30, [X31], #0x20
	0x01C9E624 RET
	0x01C9E628 BL 0x1B6EA1C
	0x01C9E62C STR X30, [X31 - 0x30]!
	0x01C9E630 STP X22, X21, [X31 + 0x10]
	0x01C9E634 STP X20, X19, [X31 + 0x20]
	0x01C9E638 ADRP X22, 0x2585000
	0x01C9E63C ADRP X21, 0x22AF000
	0x01C9E640 LDRB W8, [X22 + 0x40F]
	0x01C9E644 LDR X21, [X21 + 0x478]
	0x01C9E648 MOV X19, X1
	0x01C9E64C MOV X20, X0
	0x01C9E650 TBNZ X8, 0x0, 0x1C9E668
	0x01C9E654 ADRP X0, 0x22AF000
	0x01C9E658 LDR X0, [X0 + 0x478]
	0x01C9E65C BL 0x1B6E7F0
	0x01C9E660 MOVZ W8, 0x1
	0x01C9E664 STRB W8, [X22 + 0x40F]
	0x01C9E668 LDR X0, [X21]
	0x01C9E66C LDR X21, [X20 + 0x120]
	0x01C9E670 LDR W8, [X0 + 0xE0]
	0x01C9E674 CBNZ W8, 0x1C9E67C
	0x01C9E678 BL 0x1B6E8F8
	0x01C9E67C MOV X0, X21
	0x01C9E680 MOV X1, X31
	0x01C9E684 MOV X2, X31
	0x01C9E688 BL 0x3A9D6EC
	0x01C9E68C TBZ X0, 0x0, 0x1C9E6A8
	0x01C9E690 LDR X8, [X20 + 0x120]
	0x01C9E694 CBZ X8, 0x1C9E6C4
	0x01C9E698 LDR W8, [X8 + 0x80]
	0x01C9E69C CMP W8, 0x0
	0x01C9E6A0 CSET W8, NE
	0x01C9E6A4 B 0x1C9E6AC
	0x01C9E6A8 MOVZ W8, 0x1
	0x01C9E6AC STR W8, [X19]
	0x01C9E6B0 LDP X20, X19, [X31 + 0x20]
	0x01C9E6B4 LDP X22, X21, [X31 + 0x10]
	0x01C9E6B8 AND W0, W0, 0x1
	0x01C9E6BC LDR X30, [X31], #0x30
	0x01C9E6C0 RET
	0x01C9E6C4 BL 0x1B6EA1C
	0x01C9E6C8 STR X30, [X31 - 0x20]!
	0x01C9E6CC STP X20, X19, [X31 + 0x10]
	0x01C9E6D0 ADRP X20, 0x2585000
	0x01C9E6D4 ADRP X19, 0x22B0000
	0x01C9E6D8 LDRB W8, [X20 + 0x410]
	0x01C9E6DC LDR X19, [X19 + 0x3C8]
	0x01C9E6E0 TBNZ X8, 0x0, 0x1C9E6F8
	0x01C9E6E4 ADRP X0, 0x22B0000
	0x01C9E6E8 LDR X0, [X0 + 0x3C8]
	0x01C9E6EC BL 0x1B6E7F0
	0x01C9E6F0 MOVZ W8, 0x1
	0x01C9E6F4 STRB W8, [X20 + 0x410]
	0x01C9E6F8 LDR X0, [X19]
	0x01C9E6FC LDR W8, [X0 + 0xE0]
	0x01C9E700 CBNZ W8, 0x1C9E70C
	0x01C9E704 BL 0x1B6E8F8
	0x01C9E708 LDR X0, [X19]
	0x01C9E70C LDR X8, [X0 + 0xB8]
	0x01C9E710 LDP X20, X19, [X31 + 0x10]
	0x01C9E714 LDR X0, [X8]
	0x01C9E718 LDR X30, [X31], #0x20
	0x01C9E71C RET
	0x01C9E720 STR X30, [X31 - 0x40]!
	0x01C9E724 STP X24, X23, [X31 + 0x10]
	0x01C9E728 STP X22, X21, [X31 + 0x20]
	0x01C9E72C STP X20, X19, [X31 + 0x30]
	0x01C9E730 ADRP X22, 0x2585000
	0x01C9E734 ADRP X21, 0x22B0000
	0x01C9E738 ADRP X24, 0x22B0000
	0x01C9E73C ADRP X20, 0x22B0000
	0x01C9E740 LDRB W8, [X22 + 0x411]
	0x01C9E744 LDR X21, [X21 + 0x298]
	0x01C9E748 LDR X24, [X24 + 0x3D0]
	0x01C9E74C LDR X20, [X20 + 0x3D8]
	0x01C9E750 MOV X19, X0
	0x01C9E754 TBNZ X8, 0x0, 0x1C9E7D8
	0x01C9E758 ADRP X0, 0x22B0000
	0x01C9E75C LDR X0, [X0 + 0x3E0]
	0x01C9E760 BL 0x1B6E7F0
	0x01C9E764 ADRP X0, 0x22B0000
	0x01C9E768 LDR X0, [X0 + 0x3E8]
	0x01C9E76C BL 0x1B6E7F0
	0x01C9E770 ADRP X0, 0x22B0000
	0x01C9E774 LDR X0, [X0 + 0x1A0]
	0x01C9E778 BL 0x1B6E7F0
	0x01C9E77C ADRP X0, 0x22B0000
	0x01C9E780 LDR X0, [X0 + 0x3D0]
	0x01C9E784 BL 0x1B6E7F0
	0x01C9E788 ADRP X0, 0x22B0000
	0x01C9E78C LDR X0, [X0 + 0x298]
	0x01C9E790 BL 0x1B6E7F0
	0x01C9E794 ADRP X0, 0x22B0000
	0x01C9E798 LDR X0, [X0 + 0x3F0]
	0x01C9E79C BL 0x1B6E7F0
	0x01C9E7A0 ADRP X0, 0x22B0000
	0x01C9E7A4 LDR X0, [X0 + 0x3F8]
	0x01C9E7A8 BL 0x1B6E7F0
	0x01C9E7AC ADRP X0, 0x22B0000
	0x01C9E7B0 LDR X0, [X0 + 0x400]
	0x01C9E7B4 BL 0x1B6E7F0
	0x01C9E7B8 ADRP X0, 0x22B0000
	0x01C9E7BC LDR X0, [X0 + 0x3D8]
	0x01C9E7C0 BL 0x1B6E7F0
	0x01C9E7C4 ADRP X0, 0x22AF000
	0x01C9E7C8 LDR X0, [X0 + 0xF78]
	0x01C9E7CC BL 0x1B6E7F0
	0x01C9E7D0 MOVZ W8, 0x1
	0x01C9E7D4 STRB W8, [X22 + 0x411]
	0x01C9E7D8 LDR X1, [X21]
	0x01C9E7DC ADRP X23, 0x22AF000
	0x01C9E7E0 ADRP X22, 0x22B0000
	0x01C9E7E4 ADRP X21, 0x22B0000
	0x01C9E7E8 LDR X23, [X23 + 0xF78]
	0x01C9E7EC LDR X22, [X22 + 0x3E8]
	0x01C9E7F0 LDR X21, [X21 + 0x400]
	0x01C9E7F4 MOV X0, X19
	0x01C9E7F8 BL 0x208FDE8
	0x01C9E7FC STR X0, [X19 + 0x130]
	0x01C9E800 LDR X1, [X24]
	0x01C9E804 MOV X0, X19
	0x01C9E808 BL 0x208FDE8
	0x01C9E80C ADRP X8, 0xFFFFFFFFFEE0F000

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+80], D10
	003 Move [X31+96], D9
	004 Move [X31+104], D8
	005 Move [X31+112], X30
	006 Move [X31+120], X21
	007 Move [X31+128], X20
	008 Move [X31+136], X19
	009 Move X19, 0x2586000
	010 Move W8, [X19+1031]
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x22B1000
	017 Move X0, [X0+664]
	018 Call 0x1B6F7F0
	019 Move X0, 0x22B1000
	020 Move X0, [X0+584]
	021 Call 0x1B6F7F0
	022 Move X0, 0x22B1000
	023 Move X0, [X0+592]
	024 Call 0x1B6F7F0
	025 Move X0, 0x22B1000
	026 Move X0, [X0+744]
	027 Call 0x1B6F7F0
	028 Move W8, 1
	029 Move [X19+1031], W8
	030 Move W8, [X20+16]
	031 Move X19, [X20+32]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Compare W8, 0
	034 JumpIfNotEqual {167}
	035 Move TEMP, 0
	036 Not TEMP
	037 Move W8, TEMP
	038 Move [X20+16], W8
	039 Compare X19, 0
	040 JumpIfEqual {177}
	041 Move X21, [X19+144]
	042 Compare X21, 0
	043 JumpIfEqual {56}
	044 Move X0, X19
	045 Move X1, X31
	046 Call Component.get_transform, X0
	047 Compare X0, 0
	048 JumpIfEqual {177}
	049 Move X1, X31
	050 Call Transform.get_position, X0
	051 Move S3, 1
	052 Move W1, 1
	053 Move X0, X21
	054 Move X2, X31
	055 Call RandomSFX.Play, X0, X1, V0, X2
	056 Move X8, 0x22B1000
	057 Move X8, [X8+744]
	058 Move X0, [X8]
	059 Call 0x1B6FA0C
	060 Move X8, -18825216
	061 Move V0, [X8+2352]
	062 Move X1, X31
	063 Move X19, X0
	064 Call WaitForSeconds..ctor, X0, V0
	065 Move W0, 1
	066 Move [X20+24], X19
	067 Move [X20+16], W0
	068 Move TEMP, 0
	069 Not TEMP
	070 Move W8, TEMP
	071 Move [X20+16], W8
	072 Compare X19, 0
	073 JumpIfEqual {177}
	074 Move X0, [X19+136]
	075 Compare X0, 0
	076 JumpIfEqual {177}
	077 Move X1, X31
	078 Call Transform.get_position, X0
	079 Move X0, [X19+136]
	080 Compare X0, 0
	081 JumpIfEqual {177}
	082 Move X1, X31
	083 Move V8, V0
	084 Move V9, V1
	085 Move V10, V2
	086 Call Transform.get_rotation, X0
	087 Move V4, V0
	088 Move V5, V1
	089 Move V6, V2
	090 Move V7, V3
	091 Move W0, 1
	092 Move V0, V8
	093 Move V1, V9
	094 Move V2, V10
	095 Move V3, V4
	096 Move V4, V5
	097 Move V5, V6
	098 Move V6, V7
	099 Move X1, X31
	100 Call NetworkVFX.PlayVFX, X0, X1, X2
	101 Move X0, [X19+136]
	102 Compare X0, 0
	103 JumpIfEqual {177}
	104 Move X20, [X19+56]
	105 Move X21, [X19+168]
	106 Move X1, X31
	107 Call Transform.get_position, X0
	108 Move X8, 0x22B1000
	109 Move X8, [X8+584]
	110 Add X0, X31, 64
	111 Move [X31+64], X31
	112 Move [X31+72], X31
	113 Move X1, [X8]
	114 Call Nullable`1<Vector3>..ctor, X0, X1
	115 Move X0, [X19+136]
	116 Compare X0, 0
	117 JumpIfEqual {177}
	118 Move X1, X31
	119 Call Transform.get_rotation, X0
	120 Move X8, 0x22B1000
	121 Move X8, [X8+592]
	122 Add X0, X31, 40
	123 Move [X31+40], X31
	124 Move [X31+48], X31
	125 Move [X31+56], W31
	126 Move X1, [X8]
	127 Call Nullable`1<Quaternion>..ctor, X0, X1
	128 Compare X20, 0
	129 JumpIfEqual {177}
	130 NotImplemented "Instruction LDUR not yet implemented."
	131 Move W8, [X31+56]
	132 Move X2, [X31+64]
	133 Move X3, [X31+72]
	134 Add X4, X31, 16
	135 Move X0, X20
	136 Move X1, X21
	137 Move X5, X31
	138 Move X6, X31
	139 Move W7, W31
	140 Move [X31+1], V0
	141 Move [X31+32], W8
	142 Move [X31], X31
	143 Call NetworkRunner.Spawn, X0, X1, X2, X3, X4, X5, X6
	144 Compare X0, 0
	145 JumpIfEqual {177}
	146 Move X8, 0x22B1000
	147 Move X8, [X8+664]
	148 Move X1, [X8]
	149 Call 0x2090DE8, X0
	150 Move X8, [X19+136]
	151 Compare X8, 0
	152 JumpIfEqual {177}
	153 Move X20, X0
	154 Move X0, X8
	155 Move X1, X31
	156 Call Transform.get_forward, X0
	157 Compare X20, 0
	158 JumpIfEqual {177}
	159 Move V3, [X19+160]
	160 Move W1, 1
	161 Move X0, X20
	162 Move X2, X31
	163 Multiply S2, S2, S3
	164 Multiply S1, S1, S3
	165 Multiply S0, S0, S3
	166 Call Rigidbody.AddForce, X0, X1, X2
	167 Move W0, W31
	168 Move X20, [X31+128]
	169 Move X19, [X31+136]
	170 Move X30, [X31+112]
	171 Move X21, [X31+120]
	172 Move D9, [X31+96]
	173 Move D8, [X31+104]
	174 Move V10, [X31+80]
	175 Add X31, X31, 144
	176 Return X0
	177 Call 0x1B6FA1C

Method: System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()

Disassembly:
	0x01C9E810 LDR V0, [X8 + 0x6D8]
	0x01C9E814 ADD X8, X19, 0x17C

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x01C9E818 STR X0, [X19 + 0x138]
	0x01C9E81C STR D0, [X8]
	0x01C9E820 LDR X0, [X20]
	0x01C9E824 LDR W8, [X0 + 0xE0]
	0x01C9E828 CBNZ W8, 0x1C9E834
	0x01C9E82C BL 0x1B6E8F8
	0x01C9E830 LDR X0, [X20]
	0x01C9E834 LDR X8, [X0 + 0xB8]
	0x01C9E838 MOV X1, X31
	0x01C9E83C LDR W0, [X8]
	0x01C9E840 BL 0x3A9DE68
	0x01C9E844 LDR X8, [X20]
	0x01C9E848 MOV W20, W0
	0x01C9E84C MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x22B0000
	004 Move X0, [X0+2448]
	005 Call 0x1B6F804
	006 Call 0x1B6FA0C
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0x22B1000
	011 Move X0, [X0+752]
	012 Call 0x1B6F804
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1B6F8E8

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x01C9E850 LDR X8, [X8 + 0xB8]
	0x01C9E854 LDR W8, [X8 + 0x4]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

