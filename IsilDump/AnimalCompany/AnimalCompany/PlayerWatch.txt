Type: AnimalCompany.PlayerWatch

Method: System.Int32 get_transmittingPlayerObjectID()

Disassembly:
	0x01DCAFCC MOV V11.16B, V0.16B
	0x01DCAFD0 MOV V12.16B, V1.16B
	0x01DCAFD4 MOV V13.16B, V2.16B
	0x01DCAFD8 CBNZ W8, 0x1DCAFF0
	0x01DCAFDC ADRP X0, 0x2329000
	0x01DCAFE0 LDR X0, [X0 + 0x5A8]
	0x01DCAFE4 BL 0x1C16CF4
	0x01DCAFE8 MOVZ W8, 0x1
	0x01DCAFEC STRB W8, [X20 + 0x784]
	0x01DCAFF0 ADRP X8, 0x2329000
	0x01DCAFF4 LDR X8, [X8 + 0x5A8]
	0x01DCAFF8 LDR X0, [X8]
	0x01DCAFFC LDR W8, [X0 + 0xE0]
	0x01DCB000 CBNZ W8, 0x1DCB008
	0x01DCB004 BL 0x1C16DFC
	0x01DCB008 LDR X0, [X19 + 0x98]
	0x01DCB00C CBZ X0, 0x1DCB26C
	0x01DCB010 MOV X1, X31
	0x01DCB014 BL 0x3C32E90
	0x01DCB018 CBZ X0, 0x1DCB26C
	0x01DCB01C FSUB S0, S8, S11
	0x01DCB020 FSUB S1, S9, S12
	0x01DCB024 FSUB S2, S10, S13
	0x01DCB028 FMUL S3, S0, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x232A000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x232F000
	016 Move X0, [X0+608]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x232E000
	023 Move X0, [X0+616]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_transmittingPlayerObjectID(System.Int32 value)

Disassembly:
	0x01DCB02C FMUL S4, S1, S1
	0x01DCB030 FMUL S5, S2, S2
	0x01DCB034 FADD S3, S3, S4
	0x01DCB038 FADD S3, S5, S3
	0x01DCB03C FSQRT S8, S3
	0x01DCB040 MOV X1, X31
	0x01DCB044 FDIV S9, S0, S8
	0x01DCB048 FDIV S10, S1, S8
	0x01DCB04C FDIV S11, S2, S8
	0x01DCB050 BL 0x3C3F988
	0x01DCB054 LDRB W9, [X19 + 0xD4]
	0x01DCB058 FMUL S0, S9, S0
	0x01DCB05C FMUL S1, S10, S1
	0x01DCB060 ADRP X10, 0xFFFFFFFFFED22000
	0x01DCB064 CMP W9, 0x0
	0x01DCB068 FMUL S2, S11, S2
	0x01DCB06C FMOV S3, 4
	0x01DCB070 FADD S0, S0, S1
	0x01DCB074 CSET W8, EQ
	0x01DCB078 ADD X10, X10, 0x638
	0x01DCB07C FMOV S4, 1
	0x01DCB080 FMOV S5, -1
	0x01DCB084 FMUL S1, S8, S3
	0x01DCB088 FADD S2, S2, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2329000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x232E000
	016 Move X0, [X0+608]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x232E000
	023 Move X0, [X0+624]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Int32 get_channel()

Disassembly:
	0x01DCB08C LDR V0, [X10, W8, UXTW]
	0x01DCB090 FMIN S1, S1, S4
	0x01DCB094 FADD S2, S2, S5
	0x01DCB098 FMUL S1, S1, S2
	0x01DCB09C FADD S1, S1, S4
	0x01DCB0A0 FCMP S1, S0
	0x01DCB0A4 CSET W8, GT
	0x01DCB0A8 CMP W9, W8
	0x01DCB0AC B.EQ 0x1DCB0C8
	0x01DCB0B0 LDR X0, [X19 + 0x98]
	0x01DCB0B4 STRB W8, [X19 + 0xD4]
	0x01DCB0B8 CBZ X0, 0x1DCB26C
	0x01DCB0BC FCMP S1, S0
	0x01DCB0C0 CSET W1, GT
	0x01DCB0C4 BL 0x1DCB3FC
	0x01DCB0C8 LDR X0, [X21]
	0x01DCB0CC LDR W8, [X0 + 0xE0]
	0x01DCB0D0 CBNZ W8, 0x1DCB0D8
	0x01DCB0D4 BL 0x1C16DFC
	0x01DCB0D8 LDRB W8, [X22 + 0x85D]
	0x01DCB0DC CBNZ W8, 0x1DCB0F4
	0x01DCB0E0 ADRP X0, 0x232A000
	0x01DCB0E4 LDR X0, [X0 + 0x7C8]
	0x01DCB0E8 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+4]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2329000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x232E000
	016 Move X0, [X0+632]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x232E000
	023 Move X0, [X0+640]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_channel(System.Int32 value)

Disassembly:
	0x01DCB0EC MOVZ W8, 0x1
	0x01DCB0F0 STRB W8, [X22 + 0x85D]
	0x01DCB0F4 LDR X0, [X21]
	0x01DCB0F8 LDR W8, [X0 + 0xE0]
	0x01DCB0FC CBNZ W8, 0x1DCB108
	0x01DCB100 BL 0x1C16DFC
	0x01DCB104 LDR X0, [X21]
	0x01DCB108 ADRP X8, 0x2328000
	0x01DCB10C LDR X8, [X8 + 0x598]
	0x01DCB110 LDR X9, [X0 + 0xB8]
	0x01DCB114 LDR X8, [X8]
	0x01DCB118 LDR X20, [X9]
	0x01DCB11C LDR W10, [X8 + 0xE0]
	0x01DCB120 CBNZ W10, 0x1DCB12C
	0x01DCB124 MOV X0, X8
	0x01DCB128 BL 0x1C16DFC
	0x01DCB12C MOV X0, X20
	0x01DCB130 MOV X1, X31
	0x01DCB134 MOV X2, X31
	0x01DCB138 BL 0x3C354F8
	0x01DCB13C TBZ X0, 0x0, 0x1DCB224
	0x01DCB140 LDR X0, [X21]
	0x01DCB144 LDR W8, [X0 + 0xE0]
	0x01DCB148 CBNZ W8, 0x1DCB150

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+4], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2329000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x232E000
	016 Move X0, [X0+632]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x232E000
	023 Move X0, [X0+648]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Int32 get_moneyAmount()

Disassembly:
	0x01DCB14C BL 0x1C16DFC
	0x01DCB150 LDRB W8, [X22 + 0x85D]
	0x01DCB154 CBNZ W8, 0x1DCB16C
	0x01DCB158 ADRP X0, 0x232A000
	0x01DCB15C LDR X0, [X0 + 0x7C8]
	0x01DCB160 BL 0x1C16CF4
	0x01DCB164 MOVZ W8, 0x1
	0x01DCB168 STRB W8, [X22 + 0x85D]
	0x01DCB16C LDR X0, [X21]
	0x01DCB170 LDR W8, [X0 + 0xE0]
	0x01DCB174 CBNZ W8, 0x1DCB180
	0x01DCB178 BL 0x1C16DFC
	0x01DCB17C LDR X0, [X21]
	0x01DCB180 LDR X8, [X0 + 0xB8]
	0x01DCB184 LDR X8, [X8]
	0x01DCB188 CBZ X8, 0x1DCB26C
	0x01DCB18C LDR X0, [X8 + 0x78]
	0x01DCB190 CBZ X0, 0x1DCB26C
	0x01DCB194 MOV X1, X31
	0x01DCB198 BL 0x3C3F58C
	0x01DCB19C MOV X0, X19
	0x01DCB1A0 MOV X1, X31
	0x01DCB1A4 MOV V8.16B, V0.16B
	0x01DCB1A8 MOV V9.16B, V1.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2329000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x232E000
	016 Move X0, [X0+656]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x232E000
	023 Move X0, [X0+664]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_moneyAmount(System.Int32 value)

Disassembly:
	0x01DCB1AC MOV V10.16B, V2.16B
	0x01DCB1B0 BL 0x3C32E90
	0x01DCB1B4 CBZ X0, 0x1DCB26C
	0x01DCB1B8 MOV X1, X31
	0x01DCB1BC BL 0x3C3F58C
	0x01DCB1C0 ADRP X8, 0xFFFFFFFFFED1F000
	0x01DCB1C4 FSUB S0, S8, S0
	0x01DCB1C8 FSUB S1, S9, S1
	0x01DCB1CC LDR V3, [X8 + 0x40C]
	0x01DCB1D0 FSUB S2, S10, S2
	0x01DCB1D4 FMUL S0, S0, S0
	0x01DCB1D8 FMUL S1, S1, S1
	0x01DCB1DC FADD S0, S0, S1
	0x01DCB1E0 FMUL S1, S2, S2
	0x01DCB1E4 FADD S0, S1, S0
	0x01DCB1E8 FCMP S0, S3
	0x01DCB1EC B.PL 0x1DCB224
	0x01DCB1F0 MOV X0, X31
	0x01DCB1F4 BL 0x3C3C6C4
	0x01DCB1F8 LDR V1, [X19 + 0xD8]
	0x01DCB1FC ADRP X8, 0xFFFFFFFFFED1F000
	0x01DCB200 LDR V2, [X8 + 0x35C]
	0x01DCB204 FSUB S0, S0, S1
	0x01DCB208 FCMP S0, S2

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2329000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x232E000
	016 Move X0, [X0+656]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x232E000
	023 Move X0, [X0+672]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: AnimalCompany.PlayerWatch/WatchDisplay get_display()

Disassembly:
	0x01DCB20C B.LE 0x1DCB218
	0x01DCB210 MOV X0, X19
	0x01DCB214 BL 0x1DCB4C8
	0x01DCB218 MOV X0, X31
	0x01DCB21C BL 0x3C3C6C4
	0x01DCB220 STR S0, [X19 + 0xD8]
	0x01DCB224 LDP X20, X19, [X31 + 0x60]
	0x01DCB228 LDP X22, X21, [X31 + 0x50]
	0x01DCB22C LDR X30, [X31 + 0x40]
	0x01DCB230 LDP D9, D8, [X31 + 0x30]
	0x01DCB234 LDP D11, D10, [X31 + 0x20]
	0x01DCB238 LDP D13, D12, [X31 + 0x10]
	0x01DCB23C LDP D15, D14, [X31], #0x70
	0x01DCB240 RET
	0x01DCB244 LDR X8, [X19 + 0xB8]
	0x01DCB248 CBZ X8, 0x1DCB26C
	0x01DCB24C LDR X8, [X8 + 0x40]
	0x01DCB250 CBZ X8, 0x1DCB26C
	0x01DCB254 LDR X8, [X8 + 0x20]
	0x01DCB258 CBZ X8, 0x1DCB264
	0x01DCB25C LDR W1, [X8]
	0x01DCB260 B 0x1DCAEA0
	0x01DCB264 MOV W1, W31
	0x01DCB268 B 0x1DCAEA0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+12]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2329000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x232E000
	016 Move X0, [X0+680]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x232E000
	023 Move X0, [X0+688]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_display(AnimalCompany.PlayerWatch/WatchDisplay value)

Disassembly:
	0x01DCB26C BL 0x1C16F20
	0x01DCB270 STP X30, X21, [X31 - 0x20]!
	0x01DCB274 STP X20, X19, [X31 + 0x10]
	0x01DCB278 ADRP X21, 0x260D000
	0x01DCB27C LDRB W8, [X21 + 0xBB5]
	0x01DCB280 MOV W20, W1
	0x01DCB284 MOV X19, X0
	0x01DCB288 TBNZ X8, 0x0, 0x1DCB2AC
	0x01DCB28C ADRP X0, 0x232B000
	0x01DCB290 LDR X0, [X0 + 0xA78]
	0x01DCB294 BL 0x1C16CF4
	0x01DCB298 ADRP X0, 0x232D000
	0x01DCB29C LDR X0, [X0 + 0x300]
	0x01DCB2A0 BL 0x1C16CF4
	0x01DCB2A4 MOVZ W8, 0x1
	0x01DCB2A8 STRB W8, [X21 + 0xBB5]
	0x01DCB2AC LDRB W8, [X19 + 0x58]
	0x01DCB2B0 CBZ W8, 0x1DCB2CC
	0x01DCB2B4 STRB W31, [X19 + 0x58]
	0x01DCB2B8 MOV X0, X19
	0x01DCB2BC MOV W1, W20
	0x01DCB2C0 LDP X20, X19, [X31 + 0x10]
	0x01DCB2C4 LDP X30, X21, [X31], #0x20
	0x01DCB2C8 B 0x1DCA02C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+12], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2329000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x232E000
	016 Move X0, [X0+680]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x232E000
	023 Move X0, [X0+696]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Boolean get_IsTransmitting()

Disassembly:
	0x01DCB2CC ADRP X21, 0x232B000
	0x01DCB2D0 LDR X21, [X21 + 0xA78]
	0x01DCB2D4 LDR X0, [X21]
	0x01DCB2D8 LDR W8, [X0 + 0xE0]
	0x01DCB2DC CBNZ W8, 0x1DCB2E4
	0x01DCB2E0 BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	003 NotImplemented "Instruction ORN not yet implemented."
	004 Move W0, W8
	005 ShiftRight W0, 31
	006 And W0, W0, 0x7FFFFFFF
	007 Move X30, [X31+16]
	008 Return X0

Method: System.Boolean get_IsMine()

Disassembly:
	0x01DCB2E4 MOV X0, X19
	0x01DCB2E8 MOV X1, X31
	0x01DCB2EC BL 0x1E77B08
	0x01DCB2F0 LDR X0, [X19 + 0x38]
	0x01DCB2F4 CBZ X0, 0x1DCB3F8
	0x01DCB2F8 MOV X1, X31
	0x01DCB2FC BL 0x1E9E538
	0x01DCB300 CMP W0, 0x4
	0x01DCB304 B.NE 0x1DCB314
	0x01DCB308 LDP X20, X19, [X31 + 0x10]
	0x01DCB30C LDP X30, X21, [X31], #0x20
	0x01DCB310 RET
	0x01DCB314 LDR X0, [X19 + 0x40]
	0x01DCB318 CBZ X0, 0x1DCB3F8
	0x01DCB31C MOV X1, X31
	0x01DCB320 BL 0x1E94078
	0x01DCB324 TBNZ X0, 0x1, 0x1DCB360
	0x01DCB328 LDR X0, [X21]
	0x01DCB32C LDR X19, [X19 + 0x40]
	0x01DCB330 LDR W8, [X0 + 0xE0]
	0x01DCB334 CBNZ W8, 0x1DCB33C
	0x01DCB338 BL 0x1C16DFC
	0x01DCB33C ADRP X8, 0x232D000
	0x01DCB340 LDR X8, [X8 + 0x300]
	0x01DCB344 MOV X1, X19
	0x01DCB348 LDP X20, X19, [X31 + 0x10]
	0x01DCB34C MOVZ W2, 0x2
	0x01DCB350 LDR X0, [X8]
	0x01DCB354 MOV X3, X31
	0x01DCB358 LDP X30, X21, [X31], #0x20
	0x01DCB35C B 0x1E77B00
	0x01DCB360 TBNZ X0, 0x0, 0x1DCB2B8
	0x01DCB364 LDR X8, [X19 + 0x38]
	0x01DCB368 CBZ X8, 0x1DCB3F8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x260E000
	006 Move X20, 0x2329000
	007 Move W8, [X21+2990]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2329000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2990], W8
	019 Move X0, [X20]
	020 Move X20, [X19+64]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {43}
	033 Move X0, [X19+64]
	034 Compare X0, 0
	035 JumpIfEqual {49}
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X1, X31
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Call NetworkObject.get_HasInputAuthority, X0
	042 Return X0
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move W0, W31
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return X0
	049 Call 0x1C17F20

Method: System.Void Awake()

Disassembly:
	0x01DCB36C LDR X0, [X8 + 0x50]
	0x01DCB370 CBZ X0, 0x1DCB3F8
	0x01DCB374 MOV X1, X31
	0x01DCB378 BL 0x1EC4D00
	0x01DCB37C TBZ X0, 0x0, 0x1DCB308
	0x01DCB380 LDR X8, [X19 + 0x38]
	0x01DCB384 CBZ X8, 0x1DCB3F8
	0x01DCB388 LDR X0, [X8 + 0x50]
	0x01DCB38C MOVZ W1, 0xC
	0x01DCB390 MOV X2, X31
	0x01DCB394 BL 0x1ED9318
	0x01DCB398 LDR X8, [X19 + 0x40]
	0x01DCB39C CBZ X8, 0x1DCB3F8
	0x01DCB3A0 LDR X8, [X8 + 0x20]
	0x01DCB3A4 MOV X21, X0
	0x01DCB3A8 CBZ X8, 0x1DCB3B4
	0x01DCB3AC LDR W0, [X8]
	0x01DCB3B0 B 0x1DCB3B8
	0x01DCB3B4 MOV X0, X31
	0x01DCB3B8 LDR W1, [X19 + 0x68]
	0x01DCB3BC MOVZ W2, 0x1
	0x01DCB3C0 MOV X3, X31
	0x01DCB3C4 BL 0x1E9C23C
	0x01DCB3C8 STUR X0, [X21 + 0x1C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x260E000
	006 Move X21, 0x232C000
	007 Move W8, [X20+2991]
	008 Move X21, [X21+3936]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x232C000
	015 Move X0, [X0+3936]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2991], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Call 0x21A4F50, X0
	022 Move X8, [X19+152]
	023 Move [X19+184], X0
	024 Compare X8, 0
	025 JumpIfEqual {31}
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X0, X8
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call 0x1C17F20

Method: System.Void Start()

Disassembly:
	0x01DCB410 MOV X19, X0
	0x01DCB414 TBNZ X8, 0x0, 0x1DCB42C
	0x01DCB418 ADRP X0, 0x232D000
	0x01DCB41C LDR X0, [X0 + 0x308]
	0x01DCB420 BL 0x1C16CF4
	0x01DCB424 MOVZ W8, 0x1
	0x01DCB428 STRB W8, [X21 + 0xBBD]
	0x01DCB42C LDR X19, [X19 + 0x20]
	0x01DCB430 TBZ X20, 0x0, 0x1DCB464
	0x01DCB434 ADRP X20, 0x232D000
	0x01DCB438 LDR X20, [X20 + 0x308]
	0x01DCB43C LDR X0, [X20]
	0x01DCB440 LDR W8, [X0 + 0xE0]
	0x01DCB444 CBNZ W8, 0x1DCB450
	0x01DCB448 BL 0x1C16DFC
	0x01DCB44C LDR X0, [X20]
	0x01DCB450 LDR X10, [X0 + 0xB8]
	0x01DCB454 ADD X8, X10, 0x50
	0x01DCB458 ADD X9, X10, 0x54
	0x01DCB45C ADD X10, X10, 0x58
	0x01DCB460 B 0x1DCB4A0
	0x01DCB464 ADRP X20, 0x260D000
	0x01DCB468 LDRB W8, [X20 + 0x85B]
	0x01DCB46C CBNZ W8, 0x1DCB484
	0x01DCB470 ADRP X0, 0x2328000
	0x01DCB474 LDR X0, [X0 + 0x5A0]
	0x01DCB478 BL 0x1C16CF4
	0x01DCB47C MOVZ W8, 0x1
	0x01DCB480 STRB W8, [X20 + 0x85B]
	0x01DCB484 ADRP X8, 0x2328000
	0x01DCB488 LDR X8, [X8 + 0x5A0]
	0x01DCB48C LDR X8, [X8]
	0x01DCB490 LDR X10, [X8 + 0xB8]
	0x01DCB494 ADD X8, X10, 0xC
	0x01DCB498 ADD X9, X10, 0x10
	0x01DCB49C ADD X10, X10, 0x14
	0x01DCB4A0 CBZ X19, 0x1DCB4C4
	0x01DCB4A4 LDR V0, [X8]
	0x01DCB4A8 LDR V1, [X9]
	0x01DCB4AC LDR V2, [X10]
	0x01DCB4B0 MOV X0, X19
	0x01DCB4B4 LDP X20, X19, [X31 + 0x10]
	0x01DCB4B8 MOV X1, X31
	0x01DCB4BC LDP X30, X21, [X31], #0x20
	0x01DCB4C0 B 0x3C3FC4C
	0x01DCB4C4 BL 0x1C16F20
	0x01DCB4C8 STP X30, X19, [X31 - 0x10]!
	0x01DCB4CC MOV X19, X0
	0x01DCB4D0 BL 0x1DCA20C
	0x01DCB4D4 CBZ X19, 0x1DCB51C
	0x01DCB4D8 CMP W0, 0x1
	0x01DCB4DC CSET W1, NE
	0x01DCB4E0 MOV X0, X19
	0x01DCB4E4 BL 0x1DCA26C
	0x01DCB4E8 ADRP X8, 0xFFFFFFFFFED1F000
	0x01DCB4EC ADRP X9, 0xFFFFFFFFFED1F000
	0x01DCB4F0 LDR V0, [X8 + 0x5C]
	0x01DCB4F4 LDR V1, [X9 + 0xBC]
	0x01DCB4F8 MOV W0, W31
	0x01DCB4FC BL 0x1DC2324
	0x01DCB500 ADRP X8, 0xFFFFFFFFFED1F000
	0x01DCB504 ADRP X9, 0xFFFFFFFFFED1F000
	0x01DCB508 LDR V0, [X8 + 0x44C]
	0x01DCB50C LDR V1, [X9 + 0x200]
	0x01DCB510 MOVZ W0, 0x1
	0x01DCB514 LDP X30, X19, [X31], #0x10
	0x01DCB518 B 0x1DC2324
	0x01DCB51C BL 0x1C16F20
	0x01DCB520 STR X30, [X31 - 0x20]!
	0x01DCB524 STP X20, X19, [X31 + 0x10]
	0x01DCB528 MOV W19, W1
	0x01DCB52C MOV X20, X0
	0x01DCB530 BL 0x1DCA2E4
	0x01DCB534 TBZ X0, 0x0, 0x1DCB55C
	0x01DCB538 LDR X0, [X20 + 0x98]
	0x01DCB53C CBZ X0, 0x1DCB568
	0x01DCB540 SCVTF S0, W19
	0x01DCB544 LDP X20, X19, [X31 + 0x10]
	0x01DCB548 MOVZ W8, 0x42C80000
	0x01DCB54C FMOV S1, W8
	0x01DCB550 FDIV S0, S0, S1
	0x01DCB554 LDR X30, [X31], #0x20
	0x01DCB558 B 0x1DCB56C
	0x01DCB55C LDP X20, X19, [X31 + 0x10]
	0x01DCB560 LDR X30, [X31], #0x20
	0x01DCB564 RET
	0x01DCB568 BL 0x1C16F20
	0x01DCB56C STR D8, [X31 - 0x30]!
	0x01DCB570 STP X30, X21, [X31 + 0x10]
	0x01DCB574 STP X20, X19, [X31 + 0x20]
	0x01DCB578 ADRP X20, 0x260D000
	0x01DCB57C LDRB W8, [X20 + 0xBC6]
	0x01DCB580 MOV V8.16B, V0.16B
	0x01DCB584 MOV X19, X0
	0x01DCB588 TBNZ X8, 0x0, 0x1DCB5A0
	0x01DCB58C ADRP X0, 0x232D000
	0x01DCB590 LDR X0, [X0 + 0x308]
	0x01DCB594 BL 0x1C16CF4
	0x01DCB598 MOVZ W8, 0x1
	0x01DCB59C STRB W8, [X20 + 0xBC6]
	0x01DCB5A0 LDR X0, [X19 + 0x58]
	0x01DCB5A4 CBZ X0, 0x1DCB6F0
	0x01DCB5A8 MOV V0.16B, V8.16B
	0x01DCB5AC MOV X1, X31
	0x01DCB5B0 BL 0x3CE013C
	0x01DCB5B4 ADRP X8, 0xFFFFFFFFFED1F000
	0x01DCB5B8 LDR V0, [X8 + 0x90]
	0x01DCB5BC ADRP X21, 0x232D000
	0x01DCB5C0 LDR X21, [X21 + 0x308]
	0x01DCB5C4 FCMP S8, S0
	0x01DCB5C8 B.PL 0x1DCB62C
	0x01DCB5CC LDR X0, [X21]
	0x01DCB5D0 LDR X20, [X19 + 0x58]
	0x01DCB5D4 LDR W8, [X0 + 0xE0]
	0x01DCB5D8 CBNZ W8, 0x1DCB5E4
	0x01DCB5DC BL 0x1C16DFC
	0x01DCB5E0 LDR X0, [X21]
	0x01DCB5E4 CBZ X20, 0x1DCB6F0
	0x01DCB5E8 LDR X8, [X0 + 0xB8]
	0x01DCB5EC LDR X9, [X20]
	0x01DCB5F0 MOV X0, X20
	0x01DCB5F4 LDP S2, S3, [X8 + 0x38]
	0x01DCB5F8 LDP S0, S1, [X8 + 0x30]
	0x01DCB5FC LDR X8, [X9 + 0x2A8]
	0x01DCB600 LDR X1, [X9 + 0x2B0]
	0x01DCB604 BLR X8
	0x01DCB608 LDR X0, [X19 + 0x60]
	0x01DCB60C CBZ X0, 0x1DCB6F0
	0x01DCB610 LDR X8, [X21]
	0x01DCB614 LDR X9, [X0]
	0x01DCB618 LDR X8, [X8 + 0xB8]
	0x01DCB61C LDR X2, [X9 + 0x2A8]
	0x01DCB620 LDP S2, S3, [X8 + 0x38]
	0x01DCB624 LDP S0, S1, [X8 + 0x30]
	0x01DCB628 B 0x1DCB6DC
	0x01DCB62C LDR X0, [X21]
	0x01DCB630 LDR X20, [X19 + 0x58]
	0x01DCB634 LDR W8, [X0 + 0xE0]
	0x01DCB638 CBNZ W8, 0x1DCB644
	0x01DCB63C BL 0x1C16DFC
	0x01DCB640 LDR X0, [X21]
	0x01DCB644 ADRP X8, 0xFFFFFFFFFED1F000
	0x01DCB648 LDR V0, [X8 + 0x35C]
	0x01DCB64C LDR X8, [X0 + 0xB8]
	0x01DCB650 FCMP S8, S0
	0x01DCB654 B.PL 0x1DCB69C
	0x01DCB658 CBZ X20, 0x1DCB6F0
	0x01DCB65C LDR X9, [X20]
	0x01DCB660 LDP S2, S3, [X8 + 0x48]
	0x01DCB664 LDP S0, S1, [X8 + 0x40]
	0x01DCB668 MOV X0, X20
	0x01DCB66C LDR X8, [X9 + 0x2A8]
	0x01DCB670 LDR X1, [X9 + 0x2B0]
	0x01DCB674 BLR X8
	0x01DCB678 LDR X0, [X19 + 0x60]
	0x01DCB67C CBZ X0, 0x1DCB6F0
	0x01DCB680 LDR X8, [X21]
	0x01DCB684 LDR X9, [X0]
	0x01DCB688 LDR X8, [X8 + 0xB8]
	0x01DCB68C LDR X2, [X9 + 0x2A8]
	0x01DCB690 LDP S2, S3, [X8 + 0x48]
	0x01DCB694 LDP S0, S1, [X8 + 0x40]
	0x01DCB698 B 0x1DCB6DC
	0x01DCB69C CBZ X20, 0x1DCB6F0
	0x01DCB6A0 LDR X9, [X20]
	0x01DCB6A4 LDP S2, S3, [X8 + 0x18]
	0x01DCB6A8 LDP S0, S1, [X8 + 0x10]
	0x01DCB6AC MOV X0, X20
	0x01DCB6B0 LDR X8, [X9 + 0x2A8]
	0x01DCB6B4 LDR X1, [X9 + 0x2B0]
	0x01DCB6B8 BLR X8
	0x01DCB6BC LDR X0, [X19 + 0x60]
	0x01DCB6C0 CBZ X0, 0x1DCB6F0
	0x01DCB6C4 LDR X8, [X21]
	0x01DCB6C8 LDR X9, [X0]
	0x01DCB6CC LDR X8, [X8 + 0xB8]
	0x01DCB6D0 LDR X2, [X9 + 0x2A8]
	0x01DCB6D4 LDP S2, S3, [X8 + 0x18]
	0x01DCB6D8 LDP S0, S1, [X8 + 0x10]
	0x01DCB6DC LDR X1, [X9 + 0x2B0]
	0x01DCB6E0 LDP X20, X19, [X31 + 0x20]
	0x01DCB6E4 LDP X30, X21, [X31 + 0x10]
	0x01DCB6E8 LDR V8, [X31], #0x30
	0x01DCB6EC BR X2
	0x01DCB6F0 BL 0x1C16F20
	0x01DCB6F4 STR D8, [X31 - 0x20]!
	0x01DCB6F8 STR X30, [X31 + 0x8]
	0x01DCB6FC STP X20, X19, [X31 + 0x10]
	0x01DCB700 MOV V8.16B, V0.16B
	0x01DCB704 MOV W19, W1
	0x01DCB708 MOV X20, X0
	0x01DCB70C BL 0x1DCA2E4
	0x01DCB710 TBZ X0, 0x0, 0x1DCB734
	0x01DCB714 LDR X0, [X20 + 0x98]
	0x01DCB718 CBZ X0, 0x1DCB744
	0x01DCB71C AND W1, W19, 0x1
	0x01DCB720 LDP X20, X19, [X31 + 0x10]
	0x01DCB724 LDR X30, [X31 + 0x8]
	0x01DCB728 MOV V0.16B, V8.16B
	0x01DCB72C LDR V8, [X31], #0x20
	0x01DCB730 B 0x1DCB748
	0x01DCB734 LDP X20, X19, [X31 + 0x10]
	0x01DCB738 LDR X30, [X31 + 0x8]
	0x01DCB73C LDR V8, [X31], #0x20
	0x01DCB740 RET
	0x01DCB744 BL 0x1C16F20
	0x01DCB748 STR D8, [X31 - 0x30]!
	0x01DCB74C STR X30, [X31 + 0x8]
	0x01DCB750 STP X22, X21, [X31 + 0x10]
	0x01DCB754 STP X20, X19, [X31 + 0x20]
	0x01DCB758 ADRP X20, 0x260D000
	0x01DCB75C ADRP X22, 0x232D000
	0x01DCB760 LDRB W8, [X20 + 0xBC1]
	0x01DCB764 LDR X22, [X22 + 0x308]
	0x01DCB768 MOV V8.16B, V0.16B
	0x01DCB76C MOV W21, W1
	0x01DCB770 MOV X19, X0
	0x01DCB774 TBNZ X8, 0x0, 0x1DCB78C
	0x01DCB778 ADRP X0, 0x232D000
	0x01DCB77C LDR X0, [X0 + 0x308]
	0x01DCB780 BL 0x1C16CF4
	0x01DCB784 MOVZ W8, 0x1
	0x01DCB788 STRB W8, [X20 + 0xBC1]
	0x01DCB78C LDR X0, [X22]
	0x01DCB790 LDR X20, [X19 + 0x70]
	0x01DCB794 LDR W8, [X0 + 0xE0]
	0x01DCB798 CBNZ W8, 0x1DCB7A4
	0x01DCB79C BL 0x1C16DFC
	0x01DCB7A0 LDR X0, [X22]
	0x01DCB7A4 CBZ X20, 0x1DCB828
	0x01DCB7A8 ANDS W31, W21, 0x1
	0x01DCB7AC MOVZ W9, 0x2C
	0x01DCB7B0 MOVZ W10, 0x1C
	0x01DCB7B4 MOVZ W11, 0x28
	0x01DCB7B8 MOVZ W12, 0x18
	0x01DCB7BC MOVZ W13, 0x24
	0x01DCB7C0 CSEL X9, X10, X9, NE
	0x01DCB7C4 MOVZ W10, 0x14
	0x01DCB7C8 CSEL X11, X12, X11, NE
	0x01DCB7CC MOVZ W12, 0x20
	0x01DCB7D0 CSEL X10, X10, X13, NE
	0x01DCB7D4 MOVZ W13, 0x10
	0x01DCB7D8 LDR X8, [X0 + 0xB8]
	0x01DCB7DC CSEL X12, X13, X12, NE
	0x01DCB7E0 LDR X13, [X20]
	0x01DCB7E4 MOV X0, X20
	0x01DCB7E8 LDR V3, [X8, X9, LSL]
	0x01DCB7EC LDR V2, [X8, X11, LSL]
	0x01DCB7F0 LDR V1, [X8, X10, LSL]
	0x01DCB7F4 LDR V0, [X8, X12, LSL]
	0x01DCB7F8 LDR X8, [X13 + 0x2A8]
	0x01DCB7FC LDR X1, [X13 + 0x2B0]
	0x01DCB800 BLR X8
	0x01DCB804 LDR X0, [X19 + 0x68]
	0x01DCB808 CBZ X0, 0x1DCB828
	0x01DCB80C LDP X20, X19, [X31 + 0x20]
	0x01DCB810 LDP X22, X21, [X31 + 0x10]
	0x01DCB814 LDR X30, [X31 + 0x8]
	0x01DCB818 MOV V0.16B, V8.16B
	0x01DCB81C MOV X1, X31
	0x01DCB820 LDR V8, [X31], #0x30
	0x01DCB824 B 0x3CE013C
	0x01DCB828 BL 0x1C16F20
	0x01DCB82C STR D8, [X31 - 0x20]!
	0x01DCB830 STP X30, X19, [X31 + 0x10]
	0x01DCB834 MOV V8.16B, V0.16B
	0x01DCB838 MOV X19, X0
	0x01DCB83C BL 0x1DCA2E4
	0x01DCB840 TBZ X0, 0x0, 0x1DCB87C
	0x01DCB844 LDR X0, [X19 + 0x98]
	0x01DCB848 CBZ X0, 0x1DCB888
	0x01DCB84C FMOV S0, 20
	0x01DCB850 FMOV S1, 0.25

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x260E000
	008 Move W8, [X20+2992]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {58}
	014 Move X0, 0x232B000
	015 Move X0, [X0+1456]
	016 Call 0x1C17CF4
	017 Move X0, 0x232D000
	018 Move X0, [X0+2816]
	019 Call 0x1C17CF4
	020 Move X0, 0x232E000
	021 Move X0, [X0+704]
	022 Call 0x1C17CF4
	023 Move X0, 0x232A000
	024 Move X0, [X0+3696]
	025 Call 0x1C17CF4
	026 Move X0, 0x2329000
	027 Move X0, [X0+1608]
	028 Call 0x1C17CF4
	029 Move X0, 0x2329000
	030 Move X0, [X0+3504]
	031 Call 0x1C17CF4
	032 Move X0, 0x2329000
	033 Move X0, [X0+3488]
	034 Call 0x1C17CF4
	035 Move X0, 0x232B000
	036 Move X0, [X0+1992]
	037 Call 0x1C17CF4
	038 Move X0, 0x232E000
	039 Move X0, [X0+712]
	040 Call 0x1C17CF4
	041 Move X0, 0x232E000
	042 Move X0, [X0+720]
	043 Call 0x1C17CF4
	044 Move X0, 0x232E000
	045 Move X0, [X0+728]
	046 Call 0x1C17CF4
	047 Move X0, 0x232E000
	048 Move X0, [X0+736]
	049 Call 0x1C17CF4
	050 Move X0, 0x232E000
	051 Move X0, [X0+744]
	052 Call 0x1C17CF4
	053 Move X0, 0x232C000
	054 Move X0, [X0+3480]
	055 Call 0x1C17CF4
	056 Move W8, 1
	057 Move [X20+2992], W8
	058 Move X0, X19
	059 Call PlayerWatch.get_IsMine, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {290}
	064 Move X8, 0x2329000
	065 Move X8, [X8+3488]
	066 Move X0, [X8]
	067 Call 0x1C17F10
	068 Move X8, 0x232E000
	069 Move X8, [X8+720]
	070 Move X1, X19
	071 Move X3, X31
	072 Move X20, X0
	073 Move X2, [X8]
	074 Call ObserverDelegate..ctor, X0, X1, X2
	075 Move X8, 0x2329000
	076 Move X8, [X8+3504]
	077 Move W1, 1
	078 Move X0, [X8]
	079 Call 0x1C17D6C
	080 Move X22, 0x2329000
	081 Move X22, [X22+1608]
	082 Move X21, X0
	083 Move X8, [X22]
	084 Move W9, [X8+224]
	085 Compare W9, 0
	086 JumpIfNotEqual {89}
	087 Move X0, X8
	088 Call 0x1C17DFC
	089 Move X23, 0x260E000
	090 Move W8, [X23+1927]
	091 Compare W8, 0
	092 JumpIfNotEqual {98}
	093 Move X0, 0x2329000
	094 Move X0, [X0+1608]
	095 Call 0x1C17CF4
	096 Move W8, 1
	097 Move [X23+1927], W8
	098 Move X0, [X22]
	099 Move W8, [X0+224]
	100 Compare W8, 0
	101 JumpIfNotEqual {104}
	102 Call 0x1C17DFC
	103 Move X0, [X22]
	104 Move X8, [X0+184]
	105 Move X8, [X8]
	106 Compare X8, 0
	107 JumpIfEqual {297}
	108 Move X8, [X8+184]
	109 Compare X8, 0
	110 JumpIfEqual {297}
	111 Move X8, [X8+128]
	112 Compare X8, 0
	113 JumpIfEqual {297}
	114 Compare X21, 0
	115 JumpIfEqual {297}
	116 Move X22, [X8+72]
	117 Compare X22, 0
	118 JumpIfEqual {125}
	119 Move X8, [X21]
	120 Move X0, X22
	121 Move X1, [X8+64]
	122 Call 0x1C17E00
	123 Compare X0, 0
	124 JumpIfEqual {299}
	125 Move W8, [X21+24]
	126 Compare W8, 0
	127 JumpIfEqual {298}
	128 Move X0, X20
	129 Move X1, X21
	130 Move X2, X31
	131 Move [X21+32], X22
	132 Call App.RegisterObserver, X0, X1
	133 Move X22, 0x232B000
	134 Move X22, [X22+1992]
	135 Move X0, [X22]
	136 Move W8, [X0+224]
	137 Compare W8, 0
	138 JumpIfNotEqual {141}
	139 Call 0x1C17DFC
	140 Move X0, [X22]
	141 Move X23, 0x232D000
	142 Move X8, [X0+184]
	143 Move X23, [X23+2816]
	144 Move X20, [X8+40]
	145 Move X0, [X23]
	146 Call 0x1C17F10
	147 Move X8, 0x232E000
	148 Move X8, [X8+728]
	149 Move X1, X19
	150 Move X3, X31
	151 Move X21, X0
	152 Move X2, [X8]
	153 Call Action`1<Int32>..ctor, X0, X1, X2
	154 Move X0, X20
	155 Move X1, X21
	156 Move X2, X31
	157 Call Delegate.Combine, X0, X1
	158 Compare X0, 0
	159 JumpIfEqual {177}
	160 Move X21, [X23]
	161 Move X20, X0
	162 Move X1, X21
	163 Call 0x1C17E00
	164 Compare X0, 0
	165 JumpIfEqual {251}
	166 Move X8, [X22]
	167 Move X8, [X8+184]
	168 Move [X8+40], X0
	169 Move X21, [X23]
	170 Move X0, X20
	171 Move X1, X21
	172 Call 0x1C17E00
	173 Compare X0, 0
	174 JumpIfEqual {251}
	175 Move X8, [X22]
	176 Move X8, [X8+184]
	177 Move X8, [X22]
	178 Move X8, [X8+184]
	179 Move [X8+40], X31
	180 Move X23, 0x232E000
	181 Move X20, [X8+48]
	182 Move X23, [X23+704]
	183 Move X0, [X23]
	184 Call 0x1C17F10
	185 Move X8, 0x232E000
	186 Move X8, [X8+736]
	187 Move X1, X19
	188 Move X3, X31
	189 Move X21, X0
	190 Move X2, [X8]
	191 Call Action`2<Boolean, Single>..ctor, X0, X1, X2
	192 Move X0, X20
	193 Move X1, X21
	194 Move X2, X31
	195 Call Delegate.Combine, X0, X1
	196 Compare X0, 0
	197 JumpIfEqual {215}
	198 Move X21, [X23]
	199 Move X20, X0
	200 Move X1, X21
	201 Call 0x1C17E00
	202 Compare X0, 0
	203 JumpIfEqual {251}
	204 Move X8, [X22]
	205 Move X8, [X8+184]
	206 Move [X8+48], X0
	207 Move X21, [X23]
	208 Move X0, X20
	209 Move X1, X21
	210 Call 0x1C17E00
	211 Compare X0, 0
	212 JumpIfEqual {251}
	213 Move X8, [X22]
	214 Move X8, [X8+184]
	215 Move X8, [X22]
	216 Move X8, [X8+184]
	217 Move [X8+48], X31
	218 Move X23, 0x232B000
	219 Move X20, [X8+56]
	220 Move X23, [X23+1456]
	221 Move X0, [X23]
	222 Call 0x1C17F10
	223 Move X8, 0x232E000
	224 Move X8, [X8+744]
	225 Move X1, X19
	226 Move X3, X31
	227 Move X21, X0
	228 Move X2, [X8]
	229 Call Action`1<Single>..ctor, X0, X1, X2
	230 Move X0, X20
	231 Move X1, X21
	232 Move X2, X31
	233 Call Delegate.Combine, X0, X1
	234 Compare X0, 0
	235 JumpIfEqual {254}
	236 Move X21, [X23]
	237 Move X20, X0
	238 Move X1, X21
	239 Call 0x1C17E00
	240 Compare X0, 0
	241 JumpIfEqual {251}
	242 Move X8, [X22]
	243 Move X8, [X8+184]
	244 Move [X8+56], X0
	245 Move X21, [X23]
	246 Move X0, X20
	247 Move X1, X21
	248 Call 0x1C17E00
	249 Compare X0, 0
	250 JumpIfNotEqual {257}
	251 Move X0, X20
	252 Move X1, X21
	253 Call 0x1C181E0
	254 Move X8, [X22]
	255 Move X8, [X8+184]
	256 Move [X8+56], X31
	257 Move X22, 0x232C000
	258 Move X22, [X22+3480]
	259 Move X23, 0x232A000
	260 Move X8, [X22]
	261 Move X8, [X8+184]
	262 Move X23, [X23+3696]
	263 Move X20, [X8+264]
	264 Move X0, [X23]
	265 Call 0x1C17F10
	266 Move X8, 0x232E000
	267 Move X8, [X8+712]
	268 Move X1, X19
	269 Move X3, X31
	270 Move X21, X0
	271 Move X2, [X8]
	272 Call Action..ctor, X0, X1, X2
	273 Move X0, X20
	274 Move X1, X21
	275 Move X2, X31
	276 Call Delegate.Combine, X0, X1
	277 Compare X0, 0
	278 JumpIfEqual {287}
	279 Move X1, [X23]
	280 Move X8, [X0]
	281 NotImplemented "Instruction CMP not yet implemented."
	282 Move X8, [X22]
	283 Move X8, [X8+184]
	284 Move [X8+264], X0
	285 Move X8, [X0]
	286 NotImplemented "Instruction CMP not yet implemented."
	287 Move X8, [X22]
	288 Move X8, [X8+184]
	289 Move [X8+264], X0
	290 Move X20, [X31+32]
	291 Move X19, [X31+40]
	292 Move X22, [X31+16]
	293 Move X21, [X31+24]
	294 Move X30, [X31+48]
	295 Move X23, [X31+56]
	296 Return 
	297 Call 0x1C17F20
	298 Call 0x1C17F28
	299 Call 0x1C17F44
	300 Move X1, X31
	301 Call 0x1C17DEC

Method: System.Void OnDestroy()

Disassembly:
	0x01DCB854 FDIV S0, S8, S0
	0x01DCB858 LDP X30, X19, [X31 + 0x10]
	0x01DCB85C FMOV S2, 1
	0x01DCB860 FMUL S0, S0, S1
	0x01DCB864 FMIN S1, S0, S2
	0x01DCB868 FCMP S0, 0x0
	0x01DCB86C FMOV S0, W31
	0x01DCB870 FCSEL S0, S1, S0, PL
	0x01DCB874 LDR V8, [X31], #0x20
	0x01DCB878 B 0x1DCB88C
	0x01DCB87C LDP X30, X19, [X31 + 0x10]
	0x01DCB880 LDR V8, [X31], #0x20
	0x01DCB884 RET
	0x01DCB888 BL 0x1C16F20
	0x01DCB88C STR D8, [X31 - 0x30]!
	0x01DCB890 STP X30, X21, [X31 + 0x10]
	0x01DCB894 STP X20, X19, [X31 + 0x20]
	0x01DCB898 ADRP X20, 0x260D000
	0x01DCB89C LDRB W8, [X20 + 0xBC2]
	0x01DCB8A0 MOV V8.16B, V0.16B
	0x01DCB8A4 MOV X19, X0
	0x01DCB8A8 TBNZ X8, 0x0, 0x1DCB8C0
	0x01DCB8AC ADRP X0, 0x232D000
	0x01DCB8B0 LDR X0, [X0 + 0x308]
	0x01DCB8B4 BL 0x1C16CF4
	0x01DCB8B8 MOVZ W8, 0x1
	0x01DCB8BC STRB W8, [X20 + 0xBC2]
	0x01DCB8C0 LDR X0, [X19 + 0x78]
	0x01DCB8C4 CBZ X0, 0x1DCBA08
	0x01DCB8C8 MOV V0.16B, V8.16B
	0x01DCB8CC MOV X1, X31
	0x01DCB8D0 BL 0x3CE013C
	0x01DCB8D4 ADRP X21, 0x232D000
	0x01DCB8D8 LDR X21, [X21 + 0x308]
	0x01DCB8DC FMOV S0, 0.25
	0x01DCB8E0 FCMP S8, S0
	0x01DCB8E4 B.LS 0x1DCB954
	0x01DCB8E8 LDR X0, [X21]
	0x01DCB8EC LDR X20, [X19 + 0x80]
	0x01DCB8F0 LDR W8, [X0 + 0xE0]
	0x01DCB8F4 CBNZ W8, 0x1DCB900
	0x01DCB8F8 BL 0x1C16DFC
	0x01DCB8FC LDR X0, [X21]
	0x01DCB900 LDR X8, [X0 + 0xB8]
	0x01DCB904 FMOV S0, 0.75
	0x01DCB908 FCMP S8, S0
	0x01DCB90C B.LS 0x1DCB9B4
	0x01DCB910 CBZ X20, 0x1DCBA08
	0x01DCB914 LDR X9, [X20]
	0x01DCB918 LDP S2, S3, [X8 + 0x48]
	0x01DCB91C LDP S0, S1, [X8 + 0x40]
	0x01DCB920 MOV X0, X20
	0x01DCB924 LDR X8, [X9 + 0x2A8]
	0x01DCB928 LDR X1, [X9 + 0x2B0]
	0x01DCB92C BLR X8
	0x01DCB930 LDR X0, [X19 + 0x78]
	0x01DCB934 CBZ X0, 0x1DCBA08
	0x01DCB938 LDR X8, [X21]
	0x01DCB93C LDR X9, [X0]
	0x01DCB940 LDR X8, [X8 + 0xB8]
	0x01DCB944 LDR X2, [X9 + 0x2A8]
	0x01DCB948 LDP S2, S3, [X8 + 0x48]
	0x01DCB94C LDP S0, S1, [X8 + 0x40]
	0x01DCB950 B 0x1DCB9F4
	0x01DCB954 LDR X0, [X21]
	0x01DCB958 LDR X20, [X19 + 0x80]
	0x01DCB95C LDR W8, [X0 + 0xE0]
	0x01DCB960 CBNZ W8, 0x1DCB96C
	0x01DCB964 BL 0x1C16DFC
	0x01DCB968 LDR X0, [X21]
	0x01DCB96C CBZ X20, 0x1DCBA08
	0x01DCB970 LDR X8, [X0 + 0xB8]
	0x01DCB974 LDR X9, [X20]
	0x01DCB978 MOV X0, X20
	0x01DCB97C LDP S2, S3, [X8 + 0x18]
	0x01DCB980 LDP S0, S1, [X8 + 0x10]
	0x01DCB984 LDR X8, [X9 + 0x2A8]
	0x01DCB988 LDR X1, [X9 + 0x2B0]
	0x01DCB98C BLR X8
	0x01DCB990 LDR X0, [X19 + 0x78]
	0x01DCB994 CBZ X0, 0x1DCBA08
	0x01DCB998 LDR X8, [X21]
	0x01DCB99C LDR X9, [X0]
	0x01DCB9A0 LDR X8, [X8 + 0xB8]
	0x01DCB9A4 LDR X2, [X9 + 0x2A8]
	0x01DCB9A8 LDP S2, S3, [X8 + 0x18]
	0x01DCB9AC LDP S0, S1, [X8 + 0x10]
	0x01DCB9B0 B 0x1DCB9F4
	0x01DCB9B4 CBZ X20, 0x1DCBA08
	0x01DCB9B8 LDR X9, [X20]
	0x01DCB9BC LDP S2, S3, [X8 + 0x38]
	0x01DCB9C0 LDP S0, S1, [X8 + 0x30]
	0x01DCB9C4 MOV X0, X20
	0x01DCB9C8 LDR X8, [X9 + 0x2A8]
	0x01DCB9CC LDR X1, [X9 + 0x2B0]
	0x01DCB9D0 BLR X8
	0x01DCB9D4 LDR X0, [X19 + 0x78]
	0x01DCB9D8 CBZ X0, 0x1DCBA08
	0x01DCB9DC LDR X8, [X21]
	0x01DCB9E0 LDR X9, [X0]
	0x01DCB9E4 LDR X8, [X8 + 0xB8]
	0x01DCB9E8 LDR X2, [X9 + 0x2A8]
	0x01DCB9EC LDP S2, S3, [X8 + 0x38]
	0x01DCB9F0 LDP S0, S1, [X8 + 0x30]
	0x01DCB9F4 LDR X1, [X9 + 0x2B0]
	0x01DCB9F8 LDP X20, X19, [X31 + 0x20]
	0x01DCB9FC LDP X30, X21, [X31 + 0x10]
	0x01DCBA00 LDR V8, [X31], #0x30
	0x01DCBA04 BR X2
	0x01DCBA08 BL 0x1C16F20
	0x01DCBA0C STP X30, X21, [X31 - 0x20]!
	0x01DCBA10 STP X20, X19, [X31 + 0x10]
	0x01DCBA14 ADRP X20, 0x260D000
	0x01DCBA18 LDRB W8, [X20 + 0xBB4]
	0x01DCBA1C MOV X19, X0
	0x01DCBA20 TBNZ X8, 0x0, 0x1DCBA38
	0x01DCBA24 ADRP X0, 0x232A000
	0x01DCBA28 LDR X0, [X0 + 0x7C8]
	0x01DCBA2C BL 0x1C16CF4
	0x01DCBA30 MOVZ W8, 0x1
	0x01DCBA34 STRB W8, [X20 + 0xBB4]
	0x01DCBA38 MOV X0, X19
	0x01DCBA3C BL 0x1DCA2E4
	0x01DCBA40 TBZ X0, 0x0, 0x1DCBAF4
	0x01DCBA44 MOV X0, X19
	0x01DCBA48 BL 0x1DCA08C
	0x01DCBA4C MOVZ W9, 0x6667
	0x01DCBA50 ADD W8, W0, 0x1
	0x01DCBA54 MOVK W9, 0x66660000
	0x01DCBA58 SMADDL X9, X8, X9, X31
	0x01DCBA5C UBFM X10, X9, 0x3F, 0x3F
	0x01DCBA60 SBFM X9, X9, 0x22, 0x3F
	0x01DCBA64 ADD W9, W9, W10
	0x01DCBA68 MOVZ W10, 0xA
	0x01DCBA6C MSUB W1, W9, W10, W8
	0x01DCBA70 MOV X0, X19
	0x01DCBA74 BL 0x1DCA0EC
	0x01DCBA78 ADRP X20, 0x232A000
	0x01DCBA7C LDR X20, [X20 + 0x7C8]
	0x01DCBA80 LDR X0, [X20]
	0x01DCBA84 LDR W8, [X0 + 0xE0]
	0x01DCBA88 CBNZ W8, 0x1DCBA90
	0x01DCBA8C BL 0x1C16DFC
	0x01DCBA90 ADRP X21, 0x260D000
	0x01DCBA94 LDRB W8, [X21 + 0x85D]
	0x01DCBA98 CBNZ W8, 0x1DCBAB0
	0x01DCBA9C ADRP X0, 0x232A000
	0x01DCBAA0 LDR X0, [X0 + 0x7C8]
	0x01DCBAA4 BL 0x1C16CF4
	0x01DCBAA8 MOVZ W8, 0x1
	0x01DCBAAC STRB W8, [X21 + 0x85D]
	0x01DCBAB0 LDR X0, [X20]
	0x01DCBAB4 LDR W8, [X0 + 0xE0]
	0x01DCBAB8 CBNZ W8, 0x1DCBAC4
	0x01DCBABC BL 0x1C16DFC
	0x01DCBAC0 LDR X0, [X20]
	0x01DCBAC4 LDR X8, [X0 + 0xB8]
	0x01DCBAC8 MOV X0, X19
	0x01DCBACC LDR X20, [X8]
	0x01DCBAD0 BL 0x1DCA08C
	0x01DCBAD4 CBZ X20, 0x1DCBB00
	0x01DCBAD8 MOV W1, W0
	0x01DCBADC MOV X0, X20
	0x01DCBAE0 BL 0x1DC2CE4
	0x01DCBAE4 MOV X0, X19
	0x01DCBAE8 LDP X20, X19, [X31 + 0x10]
	0x01DCBAEC LDP X30, X21, [X31], #0x20
	0x01DCBAF0 B 0x1DCBB04
	0x01DCBAF4 LDP X20, X19, [X31 + 0x10]
	0x01DCBAF8 LDP X30, X21, [X31], #0x20
	0x01DCBAFC RET
	0x01DCBB00 BL 0x1C16F20
	0x01DCBB04 STP X30, X19, [X31 - 0x10]!
	0x01DCBB08 LDR X19, [X0 + 0x98]
	0x01DCBB0C BL 0x1DCA08C
	0x01DCBB10 CBZ X19, 0x1DCBB24
	0x01DCBB14 MOV W1, W0
	0x01DCBB18 MOV X0, X19
	0x01DCBB1C LDP X30, X19, [X31], #0x10
	0x01DCBB20 B 0x1DCBB28
	0x01DCBB24 BL 0x1C16F20
	0x01DCBB28 SUB X31, X31, 0x40
	0x01DCBB2C STP X30, X23, [X31 + 0x10]
	0x01DCBB30 STP X22, X21, [X31 + 0x20]
	0x01DCBB34 STP X20, X19, [X31 + 0x30]
	0x01DCBB38 ADRP X23, 0x260D000
	0x01DCBB3C ADRP X22, 0x2328000
	0x01DCBB40 ADRP X21, 0x232C000
	0x01DCBB44 LDRB W8, [X23 + 0xBBE]
	0x01DCBB48 LDR X22, [X22 + 0x758]
	0x01DCBB4C LDR X21, [X21 + 0x110]
	0x01DCBB50 MOV W20, W1
	0x01DCBB54 MOV X19, X0
	0x01DCBB58 TBNZ X8, 0x0, 0x1DCBB7C
	0x01DCBB5C ADRP X0, 0x2328000
	0x01DCBB60 LDR X0, [X0 + 0x758]
	0x01DCBB64 BL 0x1C16CF4
	0x01DCBB68 ADRP X0, 0x232C000
	0x01DCBB6C LDR X0, [X0 + 0x110]
	0x01DCBB70 BL 0x1C16CF4
	0x01DCBB74 MOVZ W8, 0x1
	0x01DCBB78 STRB W8, [X23 + 0xBBE]
	0x01DCBB7C LDR X0, [X22]
	0x01DCBB80 LDR X19, [X19 + 0x40]
	0x01DCBB84 ADD X1, X31, 0xC
	0x01DCBB88 STR W20, [X31 + 0xC]
	0x01DCBB8C BL 0x1C16E04
	0x01DCBB90 LDR X8, [X21]
	0x01DCBB94 MOV X1, X0
	0x01DCBB98 MOV X2, X31
	0x01DCBB9C MOV X0, X8
	0x01DCBBA0 BL 0x321EFD0
	0x01DCBBA4 CBZ X19, 0x1DCBBD4
	0x01DCBBA8 LDR X8, [X19]
	0x01DCBBAC MOV X1, X0
	0x01DCBBB0 MOV X0, X19
	0x01DCBBB4 LDR X9, [X8 + 0x558]
	0x01DCBBB8 LDR X2, [X8 + 0x560]
	0x01DCBBBC BLR X9
	0x01DCBBC0 LDP X20, X19, [X31 + 0x30]
	0x01DCBBC4 LDP X22, X21, [X31 + 0x20]
	0x01DCBBC8 LDP X30, X23, [X31 + 0x10]
	0x01DCBBCC ADD X31, X31, 0x40
	0x01DCBBD0 RET
	0x01DCBBD4 BL 0x1C16F20
	0x01DCBBD8 STP X30, X23, [X31 - 0x30]!
	0x01DCBBDC STP X22, X21, [X31 + 0x10]
	0x01DCBBE0 STP X20, X19, [X31 + 0x20]
	0x01DCBBE4 ADRP X23, 0x260D000
	0x01DCBBE8 LDRB W8, [X23 + 0xBC0]
	0x01DCBBEC MOV W22, W3
	0x01DCBBF0 MOV W21, W2
	0x01DCBBF4 MOV W20, W1
	0x01DCBBF8 MOV X19, X0
	0x01DCBBFC TBNZ X8, 0x0, 0x1DCBC14
	0x01DCBC00 ADRP X0, 0x2328000
	0x01DCBC04 LDR X0, [X0 + 0x988]
	0x01DCBC08 BL 0x1C16CF4
	0x01DCBC0C MOVZ W8, 0x1
	0x01DCBC10 STRB W8, [X23 + 0xBC0]
	0x01DCBC14 CMP W20, W21
	0x01DCBC18 B.LE 0x1DCBC64
	0x01DCBC1C TBZ X22, 0x0, 0x1DCBC64
	0x01DCBC20 LDR X1, [X19 + 0xC8]
	0x01DCBC24 CBZ X1, 0x1DCBC34
	0x01DCBC28 MOV X0, X19
	0x01DCBC2C MOV X2, X31
	0x01DCBC30 BL 0x3C36834
	0x01DCBC34 MOV X0, X19
	0x01DCBC38 MOV W1, W20
	0x01DCBC3C MOV W2, W21
	0x01DCBC40 BL 0x1DCD61C
	0x01DCBC44 MOV X1, X0
	0x01DCBC48 STR X0, [X19 + 0xC8]
	0x01DCBC4C MOV X0, X19
	0x01DCBC50 LDP X20, X19, [X31 + 0x20]
	0x01DCBC54 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x260E000
	008 Move X21, 0x232C000
	009 Move W8, [X20+2993]
	010 Move X21, [X21+2680]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {66}
	016 Move X0, 0x232B000
	017 Move X0, [X0+1456]
	018 Call 0x1C17CF4
	019 Move X0, 0x232D000
	020 Move X0, [X0+2816]
	021 Call 0x1C17CF4
	022 Move X0, 0x232E000
	023 Move X0, [X0+704]
	024 Call 0x1C17CF4
	025 Move X0, 0x232A000
	026 Move X0, [X0+3696]
	027 Call 0x1C17CF4
	028 Move X0, 0x2329000
	029 Move X0, [X0+1608]
	030 Call 0x1C17CF4
	031 Move X0, 0x232E000
	032 Move X0, [X0+752]
	033 Call 0x1C17CF4
	034 Move X0, 0x232C000
	035 Move X0, [X0+2680]
	036 Call 0x1C17CF4
	037 Move X0, 0x2329000
	038 Move X0, [X0+3488]
	039 Call 0x1C17CF4
	040 Move X0, 0x232B000
	041 Move X0, [X0+1992]
	042 Call 0x1C17CF4
	043 Move X0, 0x232E000
	044 Move X0, [X0+712]
	045 Call 0x1C17CF4
	046 Move X0, 0x232E000
	047 Move X0, [X0+720]
	048 Call 0x1C17CF4
	049 Move X0, 0x232E000
	050 Move X0, [X0+728]
	051 Call 0x1C17CF4
	052 Move X0, 0x232E000
	053 Move X0, [X0+736]
	054 Call 0x1C17CF4
	055 Move X0, 0x232E000
	056 Move X0, [X0+744]
	057 Call 0x1C17CF4
	058 Move X0, 0x232E000
	059 Move X0, [X0+760]
	060 Call 0x1C17CF4
	061 Move X0, 0x232C000
	062 Move X0, [X0+3480]
	063 Call 0x1C17CF4
	064 Move W8, 1
	065 Move [X20+2993], W8
	066 Move X0, [X21]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Compare X19, 0
	072 JumpIfEqual {278}
	073 Move W8, [X19+48]
	074 Move X9, 0x2329000
	075 Move X9, [X9+3488]
	076 Move X20, 0x232E000
	077 Or W8, W8, 8
	078 Move [X19+48], W8
	079 Move X0, [X9]
	080 Move X21, 0x2329000
	081 Move X22, 0x232B000
	082 Move X20, [X20+720]
	083 Move X21, [X21+1608]
	084 Move X22, [X22+1992]
	085 Call 0x1C17F10
	086 Move X2, [X20]
	087 Move X1, X19
	088 Move X3, X31
	089 Move X20, X0
	090 Call ObserverDelegate..ctor, X0, X1, X2
	091 Move X0, [X21]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X23, 0x232D000
	097 Move X21, 0x232E000
	098 Move X23, [X23+2816]
	099 Move X21, [X21+728]
	100 Move X0, X20
	101 Move X1, X31
	102 Call App.DeregisterObserver, X0
	103 Move X0, [X22]
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {109}
	107 Call 0x1C17DFC
	108 Move X0, [X22]
	109 Move X8, [X0+184]
	110 Move X0, [X23]
	111 Move X20, [X8+40]
	112 Call 0x1C17F10
	113 Move X2, [X21]
	114 Move X1, X19
	115 Move X3, X31
	116 Move X21, X0
	117 Call Action`1<Int32>..ctor, X0, X1, X2
	118 Move X0, X20
	119 Move X1, X21
	120 Move X2, X31
	121 Call Delegate.Remove, X0, X1
	122 Compare X0, 0
	123 JumpIfEqual {141}
	124 Move X21, [X23]
	125 Move X20, X0
	126 Move X1, X21
	127 Call 0x1C17E00
	128 Compare X0, 0
	129 JumpIfEqual {215}
	130 Move X8, [X22]
	131 Move X8, [X8+184]
	132 Move [X8+40], X0
	133 Move X21, [X23]
	134 Move X0, X20
	135 Move X1, X21
	136 Call 0x1C17E00
	137 Compare X0, 0
	138 JumpIfEqual {215}
	139 Move X8, [X22]
	140 Move X8, [X8+184]
	141 Move X8, [X22]
	142 Move X8, [X8+184]
	143 Move [X8+40], X31
	144 Move X23, 0x232E000
	145 Move X23, [X23+704]
	146 Move X21, 0x232E000
	147 Move X20, [X8+48]
	148 Move X0, [X23]
	149 Move X21, [X21+736]
	150 Call 0x1C17F10
	151 Move X2, [X21]
	152 Move X1, X19
	153 Move X3, X31
	154 Move X21, X0
	155 Call Action`2<Boolean, Single>..ctor, X0, X1, X2
	156 Move X0, X20
	157 Move X1, X21
	158 Move X2, X31
	159 Call Delegate.Remove, X0, X1
	160 Compare X0, 0
	161 JumpIfEqual {179}
	162 Move X21, [X23]
	163 Move X20, X0
	164 Move X1, X21
	165 Call 0x1C17E00
	166 Compare X0, 0
	167 JumpIfEqual {215}
	168 Move X8, [X22]
	169 Move X8, [X8+184]
	170 Move [X8+48], X0
	171 Move X21, [X23]
	172 Move X0, X20
	173 Move X1, X21
	174 Call 0x1C17E00
	175 Compare X0, 0
	176 JumpIfEqual {215}
	177 Move X8, [X22]
	178 Move X8, [X8+184]
	179 Move X8, [X22]
	180 Move X8, [X8+184]
	181 Move [X8+48], X31
	182 Move X23, 0x232B000
	183 Move X23, [X23+1456]
	184 Move X21, 0x232E000
	185 Move X20, [X8+56]
	186 Move X0, [X23]
	187 Move X21, [X21+744]
	188 Call 0x1C17F10
	189 Move X2, [X21]
	190 Move X1, X19
	191 Move X3, X31
	192 Move X21, X0
	193 Call Action`1<Single>..ctor, X0, X1, X2
	194 Move X0, X20
	195 Move X1, X21
	196 Move X2, X31
	197 Call Delegate.Remove, X0, X1
	198 Compare X0, 0
	199 JumpIfEqual {218}
	200 Move X21, [X23]
	201 Move X20, X0
	202 Move X1, X21
	203 Call 0x1C17E00
	204 Compare X0, 0
	205 JumpIfEqual {215}
	206 Move X8, [X22]
	207 Move X8, [X8+184]
	208 Move [X8+56], X0
	209 Move X21, [X23]
	210 Move X0, X20
	211 Move X1, X21
	212 Call 0x1C17E00
	213 Compare X0, 0
	214 JumpIfNotEqual {221}
	215 Move X0, X20
	216 Move X1, X21
	217 Call 0x1C181E0
	218 Move X8, [X22]
	219 Move X8, [X8+184]
	220 Move [X8+56], X31
	221 Move X22, 0x232C000
	222 Move X22, [X22+3480]
	223 Move X23, 0x232A000
	224 Move X21, 0x232E000
	225 Move X8, [X22]
	226 Move X8, [X8+184]
	227 Move X23, [X23+3696]
	228 Move X20, [X8+264]
	229 Move X0, [X23]
	230 Move X21, [X21+712]
	231 Call 0x1C17F10
	232 Move X2, [X21]
	233 Move X1, X19
	234 Move X3, X31
	235 Move X21, X0
	236 Call Action..ctor, X0, X1, X2
	237 Move X0, X20
	238 Move X1, X21
	239 Move X2, X31
	240 Call Delegate.Remove, X0, X1
	241 Compare X0, 0
	242 JumpIfEqual {251}
	243 Move X1, [X23]
	244 Move X8, [X0]
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Move X8, [X22]
	247 Move X8, [X8+184]
	248 Move [X8+264], X0
	249 Move X8, [X0]
	250 NotImplemented "Instruction CMP not yet implemented."
	251 Move X8, [X22]
	252 Move X8, [X8+184]
	253 Move [X8+264], X0
	254 Move X20, 0x232E000
	255 Move X20, [X20+760]
	256 Move X0, [X20]
	257 Move W8, [X0+224]
	258 Compare W8, 0
	259 JumpIfNotEqual {262}
	260 Call 0x1C17DFC
	261 Move X0, [X20]
	262 Move X8, [X0+184]
	263 Move X0, [X8]
	264 Compare X0, 0
	265 JumpIfEqual {278}
	266 Move X8, 0x232E000
	267 Move X8, [X8+752]
	268 Move X1, X19
	269 Move X20, [X31+32]
	270 Move X19, [X31+40]
	271 Move X22, [X31+16]
	272 Move X21, [X31+24]
	273 Move X2, [X8]
	274 Move X30, [X31+48]
	275 Move X23, [X31+56]
	276 Call HashSet`1<Object>.Remove, X0, X1
	277 Return 
	278 Call 0x1C17F20

Method: System.Void HandleUserWalletChanged(SpatialSys.ObservableState.StateChangedEventArgs args)

Disassembly:
	0x01DCBC58 MOV X2, X31
	0x01DCBC5C LDP X30, X23, [X31], #0x30
	0x01DCBC60 B 0x3C366FC
	0x01DCBC64 LDR X19, [X19 + 0x30]
	0x01DCBC68 MOV W1, W20
	0x01DCBC6C BL 0x1DCD3C0
	0x01DCBC70 CBZ X19, 0x1DCBCA8
	0x01DCBC74 ADRP X9, 0x2328000
	0x01DCBC78 LDR X8, [X19]
	0x01DCBC7C LDR X9, [X9 + 0x988]
	0x01DCBC80 CMP X0, 0x0
	0x01DCBC84 LDP X22, X21, [X31 + 0x10]
	0x01DCBC88 LDR X3, [X8 + 0x558]
	0x01DCBC8C LDR X9, [X9]
	0x01DCBC90 LDR X2, [X8 + 0x560]
	0x01DCBC94 CSEL X1, X9, X0, EQ
	0x01DCBC98 MOV X0, X19
	0x01DCBC9C LDP X20, X19, [X31 + 0x20]
	0x01DCBCA0 LDP X30, X23, [X31], #0x30
	0x01DCBCA4 BR X3
	0x01DCBCA8 BL 0x1C16F20
	0x01DCBCAC STP X30, X19, [X31 - 0x10]!
	0x01DCBCB0 LDR X19, [X0 + 0x98]
	0x01DCBCB4 BL 0x1DCA20C
	0x01DCBCB8 CBZ X19, 0x1DCBCCC
	0x01DCBCBC MOV W1, W0
	0x01DCBCC0 MOV X0, X19
	0x01DCBCC4 LDP X30, X19, [X31], #0x10
	0x01DCBCC8 B 0x1DCBCD0
	0x01DCBCCC BL 0x1C16F20
	0x01DCBCD0 STR X30, [X31 - 0x20]!
	0x01DCBCD4 STP X20, X19, [X31 + 0x10]
	0x01DCBCD8 MOV X19, X0
	0x01DCBCDC LDR X0, [X0 + 0xB0]
	0x01DCBCE0 CBZ X0, 0x1DCBD58
	0x01DCBCE4 MOV W20, W1
	0x01DCBCE8 MOV X1, X31
	0x01DCBCEC BL 0x3C32ECC
	0x01DCBCF0 CBZ X0, 0x1DCBD58
	0x01DCBCF4 CMP W20, 0x1
	0x01DCBCF8 B.NE 0x1DCBD24
	0x01DCBCFC MOV W1, W31
	0x01DCBD00 MOV X2, X31
	0x01DCBD04 BL 0x3C357B4
	0x01DCBD08 LDR X0, [X19 + 0xB8]
	0x01DCBD0C CBZ X0, 0x1DCBD58
	0x01DCBD10 MOV X1, X31
	0x01DCBD14 BL 0x3C32ECC
	0x01DCBD18 CBZ X0, 0x1DCBD58
	0x01DCBD1C MOVZ W1, 0x1
	0x01DCBD20 B 0x1DCBD48
	0x01DCBD24 MOVZ W1, 0x1
	0x01DCBD28 MOV X2, X31
	0x01DCBD2C BL 0x3C357B4
	0x01DCBD30 LDR X0, [X19 + 0xB8]
	0x01DCBD34 CBZ X0, 0x1DCBD58
	0x01DCBD38 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x260E000
	006 Move W8, [X20+2994]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x2329000
	013 Move X0, [X0+1608]
	014 Call 0x1C17CF4
	015 Move X0, 0x232A000
	016 Move X0, [X0+2896]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2994], W8
	020 Move X0, X19
	021 Call PlayerWatch.get_IsMine, X0
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {69}
	026 Move X20, 0x2329000
	027 Move X20, [X20+1608]
	028 Move X0, [X20]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X21, 0x260E000
	034 Move W8, [X21+1927]
	035 Compare W8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, 0x2329000
	038 Move X0, [X0+1608]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X21+1927], W8
	042 Move X0, [X20]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {48}
	046 Call 0x1C17DFC
	047 Move X0, [X20]
	048 Move X8, [X0+184]
	049 Move X8, [X8]
	050 Compare X8, 0
	051 JumpIfEqual {74}
	052 Move X8, [X8+184]
	053 Compare X8, 0
	054 JumpIfEqual {74}
	055 Move X8, [X8+128]
	056 Compare X8, 0
	057 JumpIfEqual {74}
	058 Move X8, [X8+72]
	059 Compare X8, 0
	060 JumpIfEqual {74}
	061 Move W1, [X8+76]
	062 Move X0, X19
	063 Call PlayerWatch.set_moneyAmount, X0, X1
	064 Move X0, X19
	065 Call PlayerWatch.HandleMoneyChanged, X0
	066 Move X0, X19
	067 Call PlayerWatch.get_moneyAmount, X0
	068 Move [X19+172], W0
	069 Move X20, [X31+16]
	070 Move X19, [X31+24]
	071 Move X30, [X31+32]
	072 Move X21, [X31+40]
	073 Return 
	074 Call 0x1C17F20

Method: System.Void LateUpdate()

Disassembly:
	0x01DCBD9C MOV W1, W31
	0x01DCBDA0 MOV X3, X31
	0x01DCBDA4 BL 0x1E73EA0
	0x01DCBDA8 STR X0, [X19 + 0xC0]
	0x01DCBDAC MOV X0, X19
	0x01DCBDB0 BL 0x1DCA2E4
	0x01DCBDB4 TBZ X0, 0x0, 0x1DCBE38
	0x01DCBDB8 ADRP X20, 0x2328000
	0x01DCBDBC LDR X20, [X20 + 0x648]
	0x01DCBDC0 LDR X0, [X20]
	0x01DCBDC4 LDR W8, [X0 + 0xE0]
	0x01DCBDC8 CBNZ W8, 0x1DCBDD0
	0x01DCBDCC BL 0x1C16DFC
	0x01DCBDD0 ADRP X21, 0x260D000
	0x01DCBDD4 LDRB W8, [X21 + 0x787]
	0x01DCBDD8 CBNZ W8, 0x1DCBDF0
	0x01DCBDDC ADRP X0, 0x2328000
	0x01DCBDE0 LDR X0, [X0 + 0x648]
	0x01DCBDE4 BL 0x1C16CF4
	0x01DCBDE8 MOVZ W8, 0x1
	0x01DCBDEC STRB W8, [X21 + 0x787]
	0x01DCBDF0 LDR X0, [X20]
	0x01DCBDF4 LDR W8, [X0 + 0xE0]
	0x01DCBDF8 CBNZ W8, 0x1DCBE04
	0x01DCBDFC BL 0x1C16DFC
	0x01DCBE00 LDR X0, [X20]
	0x01DCBE04 LDR X8, [X0 + 0xB8]
	0x01DCBE08 LDR X8, [X8]
	0x01DCBE0C CBZ X8, 0x1DCBE64
	0x01DCBE10 LDR X8, [X8 + 0xB8]
	0x01DCBE14 CBZ X8, 0x1DCBE64
	0x01DCBE18 LDR X8, [X8 + 0x80]
	0x01DCBE1C CBZ X8, 0x1DCBE64
	0x01DCBE20 LDR X8, [X8 + 0x48]
	0x01DCBE24 CBZ X8, 0x1DCBE64
	0x01DCBE28 LDR W1, [X8 + 0x4C]
	0x01DCBE2C MOV X0, X19
	0x01DCBE30 STR W1, [X19 + 0xAC]
	0x01DCBE34 BL 0x1DCA1AC
	0x01DCBE38 MOV X0, X19
	0x01DCBE3C BL 0x1DCA14C
	0x01DCBE40 STR W0, [X19 + 0xAC]
	0x01DCBE44 MOV X0, X19
	0x01DCBE48 BL 0x1DCAD3C
	0x01DCBE4C MOV X0, X19
	0x01DCBE50 BL 0x1DCBB04
	0x01DCBE54 MOV X0, X19
	0x01DCBE58 LDP X20, X19, [X31 + 0x10]
	0x01DCBE5C LDP X30, X21, [X31], #0x20
	0x01DCBE60 B 0x1DCBCAC
	0x01DCBE64 BL 0x1C16F20
	0x01DCBE68 STP X30, X23, [X31 - 0x30]!
	0x01DCBE6C STP X22, X21, [X31 + 0x10]
	0x01DCBE70 STP X20, X19, [X31 + 0x20]
	0x01DCBE74 ADRP X23, 0x260D000
	0x01DCBE78 ADRP X22, 0x232D000
	0x01DCBE7C LDRB W8, [X23 + 0xBB7]
	0x01DCBE80 LDR X22, [X22 + 0x2F8]
	0x01DCBE84 MOV W21, W2
	0x01DCBE88 MOV X20, X1
	0x01DCBE8C MOV X19, X0
	0x01DCBE90 TBNZ X8, 0x0, 0x1DCBEB4
	0x01DCBE94 ADRP X0, 0x232D000
	0x01DCBE98 LDR X0, [X0 + 0x2F0]
	0x01DCBE9C BL 0x1C16CF4
	0x01DCBEA0 ADRP X0, 0x232D000
	0x01DCBEA4 LDR X0, [X0 + 0x2F8]
	0x01DCBEA8 BL 0x1C16CF4
	0x01DCBEAC MOVZ W8, 0x1
	0x01DCBEB0 STRB W8, [X23 + 0xBB7]
	0x01DCBEB4 AND W2, W21, 0x1
	0x01DCBEB8 MOV X0, X19
	0x01DCBEBC MOV X1, X20
	0x01DCBEC0 MOV X3, X31
	0x01DCBEC4 BL 0x1E73F8C
	0x01DCBEC8 LDR X0, [X22]
	0x01DCBECC LDR W8, [X0 + 0xE0]
	0x01DCBED0 CBNZ W8, 0x1DCBEDC
	0x01DCBED4 BL 0x1C16DFC
	0x01DCBED8 LDR X0, [X22]
	0x01DCBEDC LDR X8, [X0 + 0xB8]
	0x01DCBEE0 LDR X0, [X8]
	0x01DCBEE4 CBZ X0, 0x1DCBF08
	0x01DCBEE8 ADRP X8, 0x232D000
	0x01DCBEEC LDR X8, [X8 + 0x2F0]
	0x01DCBEF0 MOV X1, X19
	0x01DCBEF4 LDP X20, X19, [X31 + 0x20]
	0x01DCBEF8 LDP X22, X21, [X31 + 0x10]
	0x01DCBEFC LDR X2, [X8]
	0x01DCBF00 LDP X30, X23, [X31], #0x30
	0x01DCBF04 B 0x2DBE67C
	0x01DCBF08 BL 0x1C16F20
	0x01DCBF0C STP X30, X19, [X31 - 0x10]!
	0x01DCBF10 MOV X19, X0
	0x01DCBF14 BL 0x1DCA2E4
	0x01DCBF18 TBZ X0, 0x0, 0x1DCBF48
	0x01DCBF1C MOV X0, X19
	0x01DCBF20 BL 0x1DC9FCC
	0x01DCBF24 TBNZ X0, 0x1F, 0x1DCBF50
	0x01DCBF28 LDR X0, [X19 + 0x88]
	0x01DCBF2C CBZ X0, 0x1DCBF74
	0x01DCBF30 MOV X1, X31
	0x01DCBF34 BL 0x3BFCAC0
	0x01DCBF38 LDR X0, [X19 + 0x98]
	0x01DCBF3C CBZ X0, 0x1DCBF74
	0x01DCBF40 MOVZ W1, 0x1
	0x01DCBF44 B 0x1DCBF6C
	0x01DCBF48 LDP X30, X19, [X31], #0x10
	0x01DCBF4C RET
	0x01DCBF50 LDR X0, [X19 + 0x90]
	0x01DCBF54 CBZ X0, 0x1DCBF74
	0x01DCBF58 MOV X1, X31
	0x01DCBF5C BL 0x3BFCAC0
	0x01DCBF60 LDR X0, [X19 + 0x98]
	0x01DCBF64 CBZ X0, 0x1DCBF74
	0x01DCBF68 MOV W1, W31
	0x01DCBF6C LDP X30, X19, [X31], #0x10
	0x01DCBF70 B 0x1DCBF78
	0x01DCBF74 BL 0x1C16F20
	0x01DCBF78 STR X30, [X31 - 0x30]!
	0x01DCBF7C STP X22, X21, [X31 + 0x10]
	0x01DCBF80 STP X20, X19, [X31 + 0x20]
	0x01DCBF84 ADRP X22, 0x260D000
	0x01DCBF88 ADRP X21, 0x232D000
	0x01DCBF8C LDRB W8, [X22 + 0xBC4]
	0x01DCBF90 LDR X21, [X21 + 0x308]
	0x01DCBF94 MOV W19, W1
	0x01DCBF98 MOV X20, X0
	0x01DCBF9C TBNZ X8, 0x0, 0x1DCBFB4
	0x01DCBFA0 ADRP X0, 0x232D000
	0x01DCBFA4 LDR X0, [X0 + 0x308]
	0x01DCBFA8 BL 0x1C16CF4
	0x01DCBFAC MOVZ W8, 0x1
	0x01DCBFB0 STRB W8, [X22 + 0xBC4]
	0x01DCBFB4 LDR X0, [X21]
	0x01DCBFB8 LDR W8, [X0 + 0xE0]
	0x01DCBFBC CBNZ W8, 0x1DCBFC4
	0x01DCBFC0 BL 0x1C16DFC
	0x01DCBFC4 LDR X0, [X20 + 0x28]
	0x01DCBFC8 CBZ X0, 0x1DCC024
	0x01DCBFCC MOV X1, X31
	0x01DCBFD0 BL 0x3C1341C
	0x01DCBFD4 LDR X8, [X21]
	0x01DCBFD8 MOV X20, X0
	0x01DCBFDC LDR W9, [X8 + 0xE0]
	0x01DCBFE0 CBNZ W9, 0x1DCBFEC
	0x01DCBFE4 MOV X0, X8
	0x01DCBFE8 BL 0x1C16DFC
	0x01DCBFEC CBZ X20, 0x1DCC024
	0x01DCBFF0 LDR X8, [X21]
	0x01DCBFF4 ANDS W31, W19, 0x1
	0x01DCBFF8 MOV X0, X20
	0x01DCBFFC LDP X20, X19, [X31 + 0x20]
	0x01DCC000 LDR X8, [X8 + 0xB8]
	0x01DCC004 LDP X22, X21, [X31 + 0x10]
	0x01DCC008 FMOV S0, W31
	0x01DCC00C FMOV S1, 1
	0x01DCC010 LDR W1, [X8]
	0x01DCC014 FCSEL S0, S1, S0, NE
	0x01DCC018 MOV X2, X31
	0x01DCC01C LDR X30, [X31], #0x30
	0x01DCC020 B 0x3C15CD8
	0x01DCC024 BL 0x1C16F20
	0x01DCC028 STR X30, [X31 - 0x20]!
	0x01DCC02C STP X20, X19, [X31 + 0x10]
	0x01DCC030 ADRP X20, 0x260C000
	0x01DCC034 LDRB W8, [X20 + 0xBB8]
	0x01DCC038 MOV X19, X1
	0x01DCC03C TBNZ X8, 0x0, 0x1DCC060
	0x01DCC040 ADRP X0, 0x232C000
	0x01DCC044 LDR X0, [X0 + 0x18]
	0x01DCC048 BL 0x1C16CF4
	0x01DCC04C ADRP X0, 0x2327000
	0x01DCC050 LDR X0, [X0 + 0x598]
	0x01DCC054 BL 0x1C16CF4
	0x01DCC058 MOVZ W8, 0x1
	0x01DCC05C STRB W8, [X20 + 0xBB8]
	0x01DCC060 CBZ X19, 0x1DCC0D0
	0x01DCC064 ADRP X8, 0x232C000
	0x01DCC068 LDR X8, [X8 + 0x18]
	0x01DCC06C ADRP X20, 0x2327000
	0x01DCC070 MOV X0, X19
	0x01DCC074 LDR X1, [X8]
	0x01DCC078 LDR X20, [X20 + 0x598]
	0x01DCC07C BL 0x21A3894
	0x01DCC080 LDR X8, [X20]
	0x01DCC084 MOV X19, X0
	0x01DCC088 LDR W9, [X8 + 0xE0]
	0x01DCC08C CBNZ W9, 0x1DCC098
	0x01DCC090 MOV X0, X8
	0x01DCC094 BL 0x1C16DFC
	0x01DCC098 MOV X0, X19
	0x01DCC09C MOV X1, X31
	0x01DCC0A0 MOV X2, X31
	0x01DCC0A4 BL 0x3C3883C
	0x01DCC0A8 TBZ X0, 0x0, 0x1DCC0B4
	0x01DCC0AC MOV W0, W31
	0x01DCC0B0 B 0x1DCC0C4
	0x01DCC0B4 CBZ X19, 0x1DCC0D0
	0x01DCC0B8 LDR W8, [X19 + 0xA4]
	0x01DCC0BC CMP W8, 0x5
	0x01DCC0C0 CSET W0, EQ
	0x01DCC0C4 LDP X20, X19, [X31 + 0x10]
	0x01DCC0C8 LDR X30, [X31], #0x20
	0x01DCC0CC RET
	0x01DCC0D0 BL 0x1C16F20
	0x01DCC0D4 SUB X31, X31, 0xC0
	0x01DCC0D8 STP D11, D10, [X31 + 0x60]
	0x01DCC0DC STP D9, D8, [X31 + 0x70]
	0x01DCC0E0 STP X30, X25, [X31 + 0x80]
	0x01DCC0E4 STP X24, X23, [X31 + 0x90]
	0x01DCC0E8 STP X22, X21, [X31 + 0xA0]
	0x01DCC0EC STP X20, X19, [X31 + 0xB0]
	0x01DCC0F0 ADRP X20, 0x260C000
	0x01DCC0F4 LDRB W8, [X20 + 0xBB9]
	0x01DCC0F8 MOV X19, X0
	0x01DCC0FC TBNZ X8, 0x0, 0x1DCC180
	0x01DCC100 ADRP X0, 0x232C000
	0x01DCC104 LDR X0, [X0 + 0x310]
	0x01DCC108 BL 0x1C16CF4
	0x01DCC10C ADRP X0, 0x232C000
	0x01DCC110 LDR X0, [X0 + 0x318]
	0x01DCC114 BL 0x1C16CF4
	0x01DCC118 ADRP X0, 0x232C000
	0x01DCC11C LDR X0, [X0 + 0x320]
	0x01DCC120 BL 0x1C16CF4
	0x01DCC124 ADRP X0, 0x232C000
	0x01DCC128 LDR X0, [X0 + 0x328]
	0x01DCC12C BL 0x1C16CF4
	0x01DCC130 ADRP X0, 0x232C000
	0x01DCC134 LDR X0, [X0 + 0x330]
	0x01DCC138 BL 0x1C16CF4
	0x01DCC13C ADRP X0, 0x232C000
	0x01DCC140 LDR X0, [X0 + 0x2F0]
	0x01DCC144 BL 0x1C16CF4
	0x01DCC148 ADRP X0, 0x2329000
	0x01DCC14C LDR X0, [X0 + 0x9A0]
	0x01DCC150 BL 0x1C16CF4
	0x01DCC154 ADRP X0, 0x2327000
	0x01DCC158 LDR X0, [X0 + 0x598]
	0x01DCC15C BL 0x1C16CF4
	0x01DCC160 ADRP X0, 0x232C000
	0x01DCC164 LDR X0, [X0 + 0x2F8]
	0x01DCC168 BL 0x1C16CF4
	0x01DCC16C ADRP X0, 0x232C000
	0x01DCC170 LDR X0, [X0 + 0x338]
	0x01DCC174 BL 0x1C16CF4
	0x01DCC178 MOVZ W8, 0x1
	0x01DCC17C STRB W8, [X20 + 0xBB9]
	0x01DCC180 MOV X0, X19
	0x01DCC184 MOV X1, X31
	0x01DCC188 STP X31, X31, [X31 + 0x50]
	0x01DCC18C STP X31, X31, [X31 + 0x20]
	0x01DCC190 STR X31, [X31 + 0x30]
	0x01DCC194 STR X31, [X31 + 0x18]
	0x01DCC198 BL 0x1E79788
	0x01DCC19C LDR X0, [X19 + 0xC0]
	0x01DCC1A0 CBZ X0, 0x1DCC514
	0x01DCC1A4 MOVZ W2, 0x1
	0x01DCC1A8 MOV X1, X19
	0x01DCC1AC MOV X3, X31
	0x01DCC1B0 BL 0x1E73F5C
	0x01DCC1B4 STP X0, X1, [X31 + 0x40]
	0x01DCC1B8 ADD X0, X31, 0x40
	0x01DCC1BC MOV X1, X31
	0x01DCC1C0 BL 0x1E75FB4
	0x01DCC1C4 STP X0, X1, [X31 + 0x50]
	0x01DCC1C8 ADD X0, X31, 0x50
	0x01DCC1CC MOV X1, X31
	0x01DCC1D0 BL 0x1E76088
	0x01DCC1D4 TBZ X0, 0x0, 0x1DCC274
	0x01DCC1D8 ADRP X21, 0x232C000
	0x01DCC1DC ADRP X22, 0x232C000
	0x01DCC1E0 ADRP X23, 0x232C000
	0x01DCC1E4 ADRP X24, 0x232C000
	0x01DCC1E8 LDR X21, [X21 + 0x338]
	0x01DCC1EC LDR X22, [X22 + 0x2F8]
	0x01DCC1F0 LDR X23, [X23 + 0x328]
	0x01DCC1F4 LDR X24, [X24 + 0x2F0]
	0x01DCC1F8 ADD X0, X31, 0x50
	0x01DCC1FC MOV X1, X31
	0x01DCC200 BL 0x1E76048
	0x01DCC204 LDR X1, [X21]
	0x01DCC208 MOV X2, X31
	0x01DCC20C BL 0x321BA08
	0x01DCC210 TBZ X0, 0x0, 0x1DCC264
	0x01DCC214 MOV X0, X19
	0x01DCC218 BL 0x1DC9FCC
	0x01DCC21C LDR X8, [X22]
	0x01DCC220 MOV W20, W0
	0x01DCC224 LDR W9, [X8 + 0xE0]
	0x01DCC228 CBNZ W9, 0x1DCC238
	0x01DCC22C MOV X0, X8
	0x01DCC230 BL 0x1C16DFC
	0x01DCC234 LDR X8, [X22]
	0x01DCC238 LDR X8, [X8 + 0xB8]
	0x01DCC23C LDR X0, [X8]
	0x01DCC240 CBZ X0, 0x1DCC534
	0x01DCC244 TBNZ X20, 0x1F, 0x1DCC258
	0x01DCC248 LDR X2, [X23]
	0x01DCC24C MOV X1, X19
	0x01DCC250 BL 0x2DBEF30
	0x01DCC254 B 0x1DCC264
	0x01DCC258 LDR X2, [X24]
	0x01DCC25C MOV X1, X19
	0x01DCC260 BL 0x2DBE67C
	0x01DCC264 ADD X0, X31, 0x50
	0x01DCC268 MOV X1, X31
	0x01DCC26C BL 0x1E76088

ISIL:
	001 Move [X31-112], D15
	002 Move [X31-104], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x260E000
	015 Move W8, [X20+2995]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x2329000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move X0, 0x232B000
	025 Move X0, [X0+1992]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+2995], W8
	029 Move X0, X19
	030 Call PlayerWatch.get_IsMine, X0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {341}
	035 Move X0, X31
	036 Call Time.get_time
	037 Move V1, [X19+208]
	038 Subtract S0, S0, S1
	039 Move S1, 1
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 Move X8, [X19+184]
	042 Compare X8, 0
	043 JumpIfEqual {366}
	044 Move X0, [X8+144]
	045 Compare X0, 0
	046 JumpIfEqual {366}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X8, [X19+184]
	050 Compare X8, 0
	051 JumpIfEqual {366}
	052 Move X0, [X8+144]
	053 Compare X0, 0
	054 JumpIfEqual {366}
	055 Move X1, X31
	056 Move V9, V2
	057 Move V10, V1
	058 Move [X31+76], S0
	059 Call Transform.get_up, X0
	060 Move X0, X19
	061 Move X1, X31
	062 Move V11, V0
	063 Move V12, V1
	064 Move V13, V2
	065 Call Component.get_transform, X0
	066 Compare X0, 0
	067 JumpIfEqual {366}
	068 Move X1, X31
	069 Call Transform.get_position, X0
	070 Move X0, [X19+184]
	071 Compare X0, 0
	072 JumpIfEqual {366}
	073 Move X1, X31
	074 Move V14, V0
	075 Move V15, V1
	076 Move V8, V2
	077 Call NetPlayer.get_isDie, X0
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {96}
	082 Move X0, X19
	083 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	084 Move TEMP, X0
	085 And TEMP, TEMP, -2147483648
	086 Compare TEMP, -2147483648
	087 JumpIfEqual {131}
	088 Move TEMP, 0
	089 Not TEMP
	090 Move W1, TEMP
	091 Move X0, X19
	092 Call PlayerWatch.RPC_SetTransmittingPlayer, X0, X1
	093 Move X0, X31
	094 Call Time.get_time
	095 Move [X19+208], S0
	096 Move X8, -19791872
	097 Move V0, [X8+188]
	098 Move V4, [X31+76]
	099 Move X8, -19791872
	100 Move V3, [X8+816]
	101 Multiply S1, S13, S0
	102 Multiply S2, S12, S0
	103 Multiply S0, S11, S0
	104 Subtract S2, S10, S2
	105 Subtract S0, S4, S0
	106 Subtract S1, S9, S1
	107 Subtract S0, S0, S14
	108 Subtract S2, S2, S15
	109 Subtract S1, S1, S8
	110 Multiply S0, S0, S0
	111 Multiply S2, S2, S2
	112 Add S0, S0, S2
	113 Multiply S1, S1, S1
	114 Add S8, S1, S0
	115 NotImplemented "Instruction FCMP not yet implemented."
	116 Move X0, X19
	117 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	118 Move X8, -19795968
	119 Move V0, [X8+3924]
	120 NotImplemented "Instruction FCMP not yet implemented."
	121 Move TEMP, X0
	122 And TEMP, TEMP, -2147483648
	123 Compare TEMP, -2147483648
	124 JumpIfEqual {82}
	125 Move X0, X19
	126 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	127 Move TEMP, X0
	128 And TEMP, TEMP, -2147483648
	129 Compare TEMP, -2147483648
	130 JumpIfEqual {355}
	131 Move X21, 0x232B000
	132 Move X21, [X21+1992]
	133 Move X0, [X21]
	134 Move W8, [X0+224]
	135 Compare W8, 0
	136 JumpIfNotEqual {138}
	137 Call 0x1C17DFC
	138 Move X22, 0x260E000
	139 Move W8, [X22+2141]
	140 Compare W8, 0
	141 JumpIfNotEqual {147}
	142 Move X0, 0x232B000
	143 Move X0, [X0+1992]
	144 Call 0x1C17CF4
	145 Move W8, 1
	146 Move [X22+2141], W8
	147 Move X0, [X21]
	148 Move W8, [X0+224]
	149 Compare W8, 0
	150 JumpIfNotEqual {153}
	151 Call 0x1C17DFC
	152 Move X0, [X21]
	153 Move X8, [X0+184]
	154 Move X8, [X8]
	155 Compare X8, 0
	156 JumpIfEqual {366}
	157 Move X0, [X8+88]
	158 Compare X0, 0
	159 JumpIfEqual {366}
	160 Move X1, X31
	161 Call Transform.get_position, X0
	162 Move X0, [X19+152]
	163 Compare X0, 0
	164 JumpIfEqual {366}
	165 Move X1, X31
	166 Move V8, V0
	167 Move V9, V1
	168 Move V10, V2
	169 Call Component.get_transform, X0
	170 Compare X0, 0
	171 JumpIfEqual {366}
	172 Move X1, X31
	173 Call Transform.get_position, X0
	174 Move X20, 0x260E000
	175 Move W8, [X20+1924]
	176 Move V11, V0
	177 Move V12, V1
	178 Move V13, V2
	179 Compare W8, 0
	180 JumpIfNotEqual {186}
	181 Move X0, 0x2329000
	182 Move X0, [X0+1448]
	183 Call 0x1C17CF4
	184 Move W8, 1
	185 Move [X20+1924], W8
	186 Move X8, 0x2329000
	187 Move X8, [X8+1448]
	188 Move X0, [X8]
	189 Move W8, [X0+224]
	190 Compare W8, 0
	191 JumpIfNotEqual {193}
	192 Call 0x1C17DFC
	193 Move X0, [X19+152]
	194 Compare X0, 0
	195 JumpIfEqual {366}
	196 Move X1, X31
	197 Call Component.get_transform, X0
	198 Compare X0, 0
	199 JumpIfEqual {366}
	200 Subtract S0, S8, S11
	201 Subtract S1, S9, S12
	202 Subtract S2, S10, S13
	203 Multiply S3, S0, S0
	204 Multiply S4, S1, S1
	205 Multiply S5, S2, S2
	206 Add S3, S3, S4
	207 Add S3, S5, S3
	208 NotImplemented "Instruction FSQRT not yet implemented."
	209 Move X1, X31
	210 NotImplemented "Instruction FDIV not yet implemented."
	211 NotImplemented "Instruction FDIV not yet implemented."
	212 NotImplemented "Instruction FDIV not yet implemented."
	213 Call Transform.get_up, X0
	214 Move W9, [X19+212]
	215 Multiply S0, S9, S0
	216 Multiply S1, S10, S1
	217 Move X10, -19783680
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Multiply S2, S11, S2
	220 Move S3, 4
	221 Add S0, S0, S1
	222 NotImplemented "Instruction CSET not yet implemented."
	223 Add X10, X10, 1592
	224 Move S4, 1
	225 Move S5, -1
	226 Multiply S1, S8, S3
	227 Add S2, S2, S0
	228 Move V0, [X10]
	229 NotImplemented "Instruction FMIN not yet implemented."
	230 Add S2, S2, S5
	231 Multiply S1, S1, S2
	232 Add S1, S1, S4
	233 NotImplemented "Instruction FCMP not yet implemented."
	234 NotImplemented "Instruction CSET not yet implemented."
	235 NotImplemented "Instruction CMP not yet implemented."
	236 Move X0, [X19+152]
	237 Move [X19+212], W8
	238 Compare X0, 0
	239 JumpIfEqual {366}
	240 NotImplemented "Instruction FCMP not yet implemented."
	241 NotImplemented "Instruction CSET not yet implemented."
	242 Call PlayerWatchView.SetExpandSize, X0, X1
	243 Move X0, [X21]
	244 Move W8, [X0+224]
	245 Compare W8, 0
	246 JumpIfNotEqual {248}
	247 Call 0x1C17DFC
	248 Move W8, [X22+2141]
	249 Compare W8, 0
	250 JumpIfNotEqual {256}
	251 Move X0, 0x232A000
	252 Move X0, [X0+1992]
	253 Call 0x1C17CF4
	254 Move W8, 1
	255 Move [X22+2141], W8
	256 Move X0, [X21]
	257 Move W8, [X0+224]
	258 Compare W8, 0
	259 JumpIfNotEqual {262}
	260 Call 0x1C17DFC
	261 Move X0, [X21]
	262 Move X8, 0x2328000
	263 Move X8, [X8+1432]
	264 Move X9, [X0+184]
	265 Move X8, [X8]
	266 Move X20, [X9]
	267 Move W10, [X8+224]
	268 Compare W10, 0
	269 JumpIfNotEqual {272}
	270 Move X0, X8
	271 Call 0x1C17DFC
	272 Move X0, X20
	273 Move X1, X31
	274 Move X2, X31
	275 Call Object.op_Inequality, X0, X1
	276 Move TEMP, X0
	277 And TEMP, TEMP, 1
	278 Compare TEMP, 1
	279 JumpIfNotEqual {341}
	280 Move X0, [X21]
	281 Move W8, [X0+224]
	282 Compare W8, 0
	283 JumpIfNotEqual {285}
	284 Call 0x1C17DFC
	285 Move W8, [X22+2141]
	286 Compare W8, 0
	287 JumpIfNotEqual {293}
	288 Move X0, 0x232A000
	289 Move X0, [X0+1992]
	290 Call 0x1C17CF4
	291 Move W8, 1
	292 Move [X22+2141], W8
	293 Move X0, [X21]
	294 Move W8, [X0+224]
	295 Compare W8, 0
	296 JumpIfNotEqual {299}
	297 Call 0x1C17DFC
	298 Move X0, [X21]
	299 Move X8, [X0+184]
	300 Move X8, [X8]
	301 Compare X8, 0
	302 JumpIfEqual {366}
	303 Move X0, [X8+120]
	304 Compare X0, 0
	305 JumpIfEqual {366}
	306 Move X1, X31
	307 Call Transform.get_position, X0
	308 Move X0, X19
	309 Move X1, X31
	310 Move V8, V0
	311 Move V9, V1
	312 Move V10, V2
	313 Call Component.get_transform, X0
	314 Compare X0, 0
	315 JumpIfEqual {366}
	316 Move X1, X31
	317 Call Transform.get_position, X0
	318 Move X8, -19795968
	319 Subtract S0, S8, S0
	320 Subtract S1, S9, S1
	321 Move V3, [X8+1036]
	322 Subtract S2, S10, S2
	323 Multiply S0, S0, S0
	324 Multiply S1, S1, S1
	325 Add S0, S0, S1
	326 Multiply S1, S2, S2
	327 Add S0, S1, S0
	328 NotImplemented "Instruction FCMP not yet implemented."
	329 Move X0, X31
	330 Call Time.get_time
	331 Move V1, [X19+216]
	332 Move X8, -19795968
	333 Move V2, [X8+860]
	334 Subtract S0, S0, S1
	335 NotImplemented "Instruction FCMP not yet implemented."
	336 Move X0, X19
	337 Call PlayerWatch.ToggleDisplayChange, X0
	338 Move X0, X31
	339 Call Time.get_time
	340 Move [X19+216], S0
	341 Move X20, [X31+96]
	342 Move X19, [X31+104]
	343 Move X22, [X31+80]
	344 Move X21, [X31+88]
	345 Move X30, [X31+64]
	346 Move D9, [X31+48]
	347 Move D8, [X31+56]
	348 Move D11, [X31+32]
	349 Move D10, [X31+40]
	350 Move D13, [X31+16]
	351 Move D12, [X31+24]
	352 Move D15, [X31+112]
	353 Move D14, [X31+120]
	354 Return 
	355 Move X8, [X19+184]
	356 Compare X8, 0
	357 JumpIfEqual {366}
	358 Move X8, [X8+64]
	359 Compare X8, 0
	360 JumpIfEqual {366}
	361 Move X8, [X8+32]
	362 Compare X8, 0
	363 JumpIfEqual {365}
	364 Move W1, [X8]
	365 Move W1, W31
	366 Call 0x1C17F20

Method: System.Void OnHealthChanged(System.Int32 health)

Disassembly:
	0x01DCC520 LDP X30, X25, [X31 + 0x80]
	0x01DCC524 LDP D9, D8, [X31 + 0x70]
	0x01DCC528 LDP D11, D10, [X31 + 0x60]
	0x01DCC52C ADD X31, X31, 0xC0
	0x01DCC530 RET
	0x01DCC534 BL 0x1C16F20
	0x01DCC538 BL 0x1C16F20
	0x01DCC53C BL 0x1C16F20
	0x01DCC540 BL 0x1C16F20
	0x01DCC544 BL 0x1C16F20
	0x01DCC548 BL 0x1C16F20
	0x01DCC54C BL 0x1C16F20
	0x01DCC550 B 0x1DCC59C
	0x01DCC554 B 0x1DCC59C
	0x01DCC558 B 0x1DCC59C
	0x01DCC55C B 0x1DCC59C
	0x01DCC560 B 0x1DCC59C
	0x01DCC564 B 0x1DCC59C
	0x01DCC568 B 0x1DCC59C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X20, X0
	006 Call PlayerWatch.get_IsMine, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {21}
	011 Move X0, [X20+152]
	012 Compare X0, 0
	013 JumpIfEqual {25}
	014 NotImplemented "Instruction SCVTF not yet implemented."
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W8, 0x42C80000
	018 Move S1, W8
	019 NotImplemented "Instruction FDIV not yet implemented."
	020 Move X30, [X31+32]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return 
	025 Call 0x1C17F20

Method: System.Void OnPlayerBackpackUpdated(System.Boolean equipped, System.Single fillAmount)

Disassembly:
	0x01DCC6F4 LDR X10, [X8 + 0xB0]
	0x01DCC6F8 ADD X10, X10, 0x8
	0x01DCC6FC LDUR X11, [X10 - 0x8]
	0x01DCC700 CMP X11, X1
	0x01DCC704 B.EQ 0x1DCC724
	0x01DCC708 SUBS X9, X9, 0x1
	0x01DCC70C ADD X10, X10, 0x10
	0x01DCC710 B.NE 0x1DCC6FC
	0x01DCC714 MOVZ W2, 0x1
	0x01DCC718 MOV X0, X20
	0x01DCC71C BL 0x1C5C788
	0x01DCC720 B 0x1DCC734
	0x01DCC724 LDR W9, [X10]
	0x01DCC728 ADD W9, W9, 0x1
	0x01DCC72C ADD X8, X8, W9, 0x4, SXTW
	0x01DCC730 ADD X0, X8, 0x138
	0x01DCC734 LDP X8, X4, [X0]
	0x01DCC738 MOVZ W1, 0x3
	0x01DCC73C MOV X0, X20
	0x01DCC740 MOV X2, X22
	0x01DCC744 MOV X3, X21

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move V8, V0
	006 Move W19, W1
	007 Move X20, X0
	008 Call PlayerWatch.get_IsMine, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {22}
	013 Move X0, [X20+152]
	014 Compare X0, 0
	015 JumpIfEqual {27}
	016 And W1, W19, 1
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+8]
	025 Move V8, [X31+32]
	026 Return 
	027 Call 0x1C17F20

Method: System.Void OnPlayerHeldWeightUpdated(System.Single weight)

Disassembly:
	0x01DCC82C ADRP X8, 0x232C000
	0x01DCC830 LDR X8, [X8 + 0x358]
	0x01DCC834 ADRP X21, 0x232C000
	0x01DCC838 ADRP X22, 0x2328000
	0x01DCC83C ADRP X23, 0x232C000
	0x01DCC840 LDR X0, [X8]
	0x01DCC844 LDR X21, [X21 + 0x360]
	0x01DCC848 LDR X22, [X22 + 0xE70]
	0x01DCC84C LDR X23, [X23 + 0x368]
	0x01DCC850 BL 0x1C16F10
	0x01DCC854 LDR X2, [X21]
	0x01DCC858 MOV X1, X19
	0x01DCC85C MOV X3, X31
	0x01DCC860 MOV X21, X0
	0x01DCC864 BL 0x2A6B948
	0x01DCC868 MOV X0, X20
	0x01DCC86C MOV X1, X21
	0x01DCC870 MOV X2, X31
	0x01DCC874 BL 0x357AD6C
	0x01DCC878 LDR X0, [X22]
	0x01DCC87C LDR X20, [X19 + 0x50]
	0x01DCC880 BL 0x1C16F10
	0x01DCC884 LDR X2, [X23]
	0x01DCC888 MOV X1, X19

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move V8, V0
	005 Move X19, X0
	006 Call PlayerWatch.get_IsMine, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {26}
	011 Move X0, [X19+152]
	012 Compare X0, 0
	013 JumpIfEqual {30}
	014 Move S0, 20
	015 Move S1, 0.25
	016 NotImplemented "Instruction FDIV not yet implemented."
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Move S2, 1
	020 Multiply S0, S0, S1
	021 NotImplemented "Instruction FMIN not yet implemented."
	022 NotImplemented "Instruction FCMP not yet implemented."
	023 Move S0, W31
	024 NotImplemented "Instruction FCSEL not yet implemented."
	025 Move V8, [X31+32]
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Move V8, [X31+32]
	029 Return 
	030 Call 0x1C17F20

Method: System.Void HandleSwitchChannelPressed()

Disassembly:
	0x01DCCA0C LDR X10, [X8 + 0xB0]
	0x01DCCA10 ADD X10, X10, 0x8
	0x01DCCA14 LDUR X11, [X10 - 0x8]
	0x01DCCA18 CMP X11, X1
	0x01DCCA1C B.EQ 0x1DCCAE4
	0x01DCCA20 SUBS X9, X9, 0x1
	0x01DCCA24 ADD X10, X10, 0x10
	0x01DCCA28 B.NE 0x1DCCA14
	0x01DCCA2C MOVZ W2, 0x1
	0x01DCCA30 MOV X0, X21
	0x01DCCA34 BL 0x1C5C788
	0x01DCCA38 B 0x1DCCAF4
	0x01DCCA3C CBZ X19, 0x1DCCC4C
	0x01DCCA40 LDR W24, [X19 + 0x18]
	0x01DCCA44 MOV X0, X20
	0x01DCCA48 MOV X1, X31
	0x01DCCA4C BL 0x3573914
	0x01DCCA50 LDR X8, [X21]
	0x01DCCA54 MOV X21, X0
	0x01DCCA58 MOVZ W1, 0x1
	0x01DCCA5C MOV X0, X8
	0x01DCCA60 BL 0x1C16D6C
	0x01DCCA64 CBZ X0, 0x1DCCC4C
	0x01DCCA68 LDR X8, [X0]
	0x01DCCA6C MOV X22, X0
	0x01DCCA70 MOV X0, X19
	0x01DCCA74 LDR X1, [X8 + 0x40]
	0x01DCCA78 BL 0x1C16E00
	0x01DCCA7C CBZ X0, 0x1DCCC54
	0x01DCCA80 LDR W8, [X22 + 0x18]
	0x01DCCA84 CBZ W8, 0x1DCCC50
	0x01DCCA88 STR X19, [X22 + 0x20]
	0x01DCCA8C CBZ X21, 0x1DCCC4C
	0x01DCCA90 LDR X1, [X23]
	0x01DCCA94 CMP W24, 0x0
	0x01DCCA98 B.LE 0x1DCCB24
	0x01DCCA9C ADRP X10, 0x232C000
	0x01DCCAA0 LDR X8, [X21]
	0x01DCCAA4 LDR X10, [X10 + 0x380]
	0x01DCCAA8 LDRH W9, [X8 + 0x12E]
	0x01DCCAAC LDR X23, [X10]
	0x01DCCAB0 CBZ X9, 0x1DCCAD4
	0x01DCCAB4 LDR X10, [X8 + 0xB0]
	0x01DCCAB8 ADD X10, X10, 0x8
	0x01DCCABC LDUR X11, [X10 - 0x8]
	0x01DCCAC0 CMP X11, X1
	0x01DCCAC4 B.EQ 0x1DCCB6C
	0x01DCCAC8 SUBS X9, X9, 0x1
	0x01DCCACC ADD X10, X10, 0x10
	0x01DCCAD0 B.NE 0x1DCCABC
	0x01DCCAD4 MOVZ W2, 0x1
	0x01DCCAD8 MOV X0, X21
	0x01DCCADC BL 0x1C5C788
	0x01DCCAE0 B 0x1DCCB7C
	0x01DCCAE4 LDR W9, [X10]
	0x01DCCAE8 ADD W9, W9, 0x1
	0x01DCCAEC ADD X8, X8, W9, 0x4, SXTW
	0x01DCCAF0 ADD X0, X8, 0x138
	0x01DCCAF4 LDP X8, X4, [X0]
	0x01DCCAF8 MOVZ W1, 0x2
	0x01DCCAFC MOV X0, X21
	0x01DCCB00 MOV X2, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x260D000
	006 Move W8, [X20+2996]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x232A000
	013 Move X0, [X0+1992]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2996], W8
	017 Move X0, X19
	018 Call PlayerWatch.get_IsMine, X0
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {74}
	023 Move X0, X19
	024 Call PlayerWatch.get_channel, X0
	025 Move W9, 0x6667
	026 Add W8, W0, 1
	027 NotImplemented "Instruction MOVK not yet implemented."
	028 NotImplemented "Instruction SMADDL not yet implemented."
	029 Move X10, X9
	030 ShiftRight X10, 63
	031 And X10, X10, 0x7FFFFFFF
	032 NotImplemented "Instruction SBFM not yet implemented."
	033 Add W9, W9, W10
	034 Move W10, 10
	035 NotImplemented "Instruction MSUB not yet implemented."
	036 Move X0, X19
	037 Call PlayerWatch.set_channel, X0, X1
	038 Move X20, 0x232A000
	039 Move X20, [X20+1992]
	040 Move X0, [X20]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X21, 0x260D000
	046 Move W8, [X21+2141]
	047 Compare W8, 0
	048 JumpIfNotEqual {54}
	049 Move X0, 0x232A000
	050 Move X0, [X0+1992]
	051 Call 0x1C17CF4
	052 Move W8, 1
	053 Move [X21+2141], W8
	054 Move X0, [X20]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {60}
	058 Call 0x1C17DFC
	059 Move X0, [X20]
	060 Move X8, [X0+184]
	061 Move X0, X19
	062 Move X20, [X8]
	063 Call PlayerWatch.get_channel, X0
	064 Compare X20, 0
	065 JumpIfEqual {79}
	066 Move W1, W0
	067 Move X0, X20
	068 Call PlayerController.SetChannel, X0, X1
	069 Move X0, X19
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X30, [X31+32]
	073 Move X21, [X31+40]
	074 Move X20, [X31+16]
	075 Move X19, [X31+24]
	076 Move X30, [X31+32]
	077 Move X21, [X31+40]
	078 Return 
	079 Call 0x1C17F20

Method: System.Void HandleChannelChanged()

Disassembly:
	0x01DCCB04 MOV X3, X22
	0x01DCCB08 BLR X8
	0x01DCCB0C LDP X20, X19, [X31 + 0x30]
	0x01DCCB10 LDP X22, X21, [X31 + 0x20]
	0x01DCCB14 LDP X24, X23, [X31 + 0x10]
	0x01DCCB18 MOV W0, W31
	0x01DCCB1C LDR X30, [X31], #0x40
	0x01DCCB20 RET
	0x01DCCB24 ADRP X10, 0x232C000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+152]
	004 Call PlayerWatch.get_channel, X0
	005 Compare X19, 0
	006 JumpIfEqual {11}
	007 Move W1, W0
	008 Move X0, X19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call 0x1C17F20

Method: System.Void HandleMoneyChanged()

Disassembly:
	0x01DCBD3C BL 0x3C32ECC
	0x01DCBD40 CBZ X0, 0x1DCBD58
	0x01DCBD44 MOV W1, W31
	0x01DCBD48 LDP X20, X19, [X31 + 0x10]
	0x01DCBD4C MOV X2, X31
	0x01DCBD50 LDR X30, [X31], #0x20
	0x01DCBD54 B 0x3C357B4
	0x01DCBD58 BL 0x1C16F20
	0x01DCBD5C STP X30, X21, [X31 - 0x20]!
	0x01DCBD60 STP X20, X19, [X31 + 0x10]
	0x01DCBD64 ADRP X20, 0x260D000
	0x01DCBD68 LDRB W8, [X20 + 0xBB6]
	0x01DCBD6C MOV X19, X0
	0x01DCBD70 TBNZ X8, 0x0, 0x1DCBD94
	0x01DCBD74 ADRP X0, 0x2328000
	0x01DCBD78 LDR X0, [X0 + 0x648]
	0x01DCBD7C BL 0x1C16CF4
	0x01DCBD80 ADRP X0, 0x2329000
	0x01DCBD84 LDR X0, [X0 + 0xB50]
	0x01DCBD88 BL 0x1C16CF4
	0x01DCBD8C MOVZ W8, 0x1
	0x01DCBD90 STRB W8, [X20 + 0xBB6]
	0x01DCBD94 MOVZ W2, 0x1
	0x01DCBD98 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, [X0+152]
	007 Move X19, X0
	008 Call PlayerWatch.get_moneyAmount, X0
	009 Move W21, [X19+172]
	010 Move W22, W0
	011 Move X0, X19
	012 Call PlayerWatch.get_IsMine, X0
	013 Compare X20, 0
	014 JumpIfEqual {29}
	015 And W3, W0, 1
	016 Move X0, X20
	017 Move W1, W22
	018 Move W2, W21
	019 Call PlayerWatchView.SetMoneyText, X0, X1, X2, X3
	020 Move X0, X19
	021 Call PlayerWatch.get_moneyAmount, X0
	022 Move [X19+172], W0
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X22, [X31+16]
	026 Move X21, [X31+24]
	027 Move X30, [X31+48]
	028 Return 
	029 Call 0x1C17F20

Method: System.Void HandleDisplayChanged()

Disassembly:
	0x01DCCCAC BL 0x1C16CF4
	0x01DCCCB0 ADRP X0, 0x232C000
	0x01DCCCB4 LDR X0, [X0 + 0x388]
	0x01DCCCB8 BL 0x1C16CF4
	0x01DCCCBC ADRP X0, 0x232C000
	0x01DCCCC0 LDR X0, [X0 + 0x390]
	0x01DCCCC4 BL 0x1C16CF4
	0x01DCCCC8 ADRP X0, 0x232C000
	0x01DCCCCC LDR X0, [X0 + 0x398]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+152]
	004 Call PlayerWatch.get_display, X0
	005 Compare X19, 0
	006 JumpIfEqual {11}
	007 Move W1, W0
	008 Move X0, X19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call 0x1C17F20

Method: System.Void RPC_SetTransmittingPlayer(System.Int32 playerObjectID)

Disassembly:
	0x01DCC270 TBNZ X0, 0x0, 0x1DCC1F8
	0x01DCC274 MOV X0, X19
	0x01DCC278 BL 0x1DCA2E4
	0x01DCC27C TBZ X0, 0x0, 0x1DCC514
	0x01DCC280 MOV X0, X19
	0x01DCC284 BL 0x1DC9FCC
	0x01DCC288 TBNZ X0, 0x1F, 0x1DCC294
	0x01DCC28C MOV X20, X31
	0x01DCC290 B 0x1DCC440
	0x01DCC294 ADRP X20, 0x232C000
	0x01DCC298 LDR X20, [X20 + 0x2F8]
	0x01DCC29C LDR X0, [X20]
	0x01DCC2A0 LDR W8, [X0 + 0xE0]
	0x01DCC2A4 CBNZ W8, 0x1DCC2B0
	0x01DCC2A8 BL 0x1C16DFC
	0x01DCC2AC LDR X0, [X20]
	0x01DCC2B0 LDR X8, [X0 + 0xB8]
	0x01DCC2B4 LDR X0, [X8]
	0x01DCC2B8 CBZ X0, 0x1DCC534
	0x01DCC2BC ADRP X8, 0x232C000
	0x01DCC2C0 LDR X8, [X8 + 0x330]
	0x01DCC2C4 LDR X1, [X8]
	0x01DCC2C8 ADD X8, X31, 0x0
	0x01DCC2CC BL 0x2DBE924
	0x01DCC2D0 LDR V0, [X31]
	0x01DCC2D4 LDR X8, [X31 + 0x10]
	0x01DCC2D8 ADRP X23, 0x232C000
	0x01DCC2DC ADRP X24, 0x2327000
	0x01DCC2E0 LDR X23, [X23 + 0x318]
	0x01DCC2E4 LDR X24, [X24 + 0x598]
	0x01DCC2E8 STR V0, [X31 + 0x2]
	0x01DCC2EC STR X8, [X31 + 0x30]
	0x01DCC2F0 ADRP X25, 0x2329000
	0x01DCC2F4 LDR X25, [X25 + 0x9A0]
	0x01DCC2F8 MOVZ W9, 0x7F800000
	0x01DCC2FC MOV X20, X31
	0x01DCC300 FMOV S11, W9
	0x01DCC304 LDR X1, [X23]
	0x01DCC308 ADD X0, X31, 0x20
	0x01DCC30C BL 0x2BC3C64
	0x01DCC310 TBZ X0, 0x0, 0x1DCC42C
	0x01DCC314 LDR X0, [X24]
	0x01DCC318 LDR X22, [X31 + 0x30]
	0x01DCC31C LDR W8, [X0 + 0xE0]
	0x01DCC320 CBNZ W8, 0x1DCC328
	0x01DCC324 BL 0x1C16DFC
	0x01DCC328 MOV X0, X22
	0x01DCC32C MOV X1, X31
	0x01DCC330 MOV X2, X31
	0x01DCC334 BL 0x3C3883C
	0x01DCC338 TBNZ X0, 0x0, 0x1DCC304
	0x01DCC33C CBZ X22, 0x1DCC538
	0x01DCC340 MOV X0, X22
	0x01DCC344 BL 0x1DC9FCC
	0x01DCC348 MOV W21, W0
	0x01DCC34C TBNZ X0, 0x1F, 0x1DCC304
	0x01DCC350 MOV X0, X22
	0x01DCC354 BL 0x1DCA08C
	0x01DCC358 MOV W22, W0
	0x01DCC35C MOV X0, X19
	0x01DCC360 BL 0x1DCA08C
	0x01DCC364 CMP W22, W0
	0x01DCC368 B.NE 0x1DCC304
	0x01DCC36C LDR X0, [X25]
	0x01DCC370 LDR W8, [X0 + 0xE0]
	0x01DCC374 CBNZ W8, 0x1DCC37C
	0x01DCC378 BL 0x1C16DFC
	0x01DCC37C ADD X1, X31, 0x18
	0x01DCC380 MOV W0, W21
	0x01DCC384 MOV X2, X31
	0x01DCC388 BL 0x1DB2598
	0x01DCC38C TBZ X0, 0x0, 0x1DCC304
	0x01DCC390 LDR X0, [X31 + 0x18]
	0x01DCC394 CBZ X0, 0x1DCC53C
	0x01DCC398 MOV X1, X31
	0x01DCC39C BL 0x1DAECCC
	0x01DCC3A0 TBNZ X0, 0x0, 0x1DCC304
	0x01DCC3A4 LDR X0, [X31 + 0x18]
	0x01DCC3A8 CBZ X0, 0x1DCC540
	0x01DCC3AC MOV X1, X31
	0x01DCC3B0 BL 0x1DB212C
	0x01DCC3B4 TBNZ X0, 0x0, 0x1DCC304
	0x01DCC3B8 LDR X0, [X31 + 0x18]
	0x01DCC3BC CBZ X0, 0x1DCC544
	0x01DCC3C0 MOV X1, X31
	0x01DCC3C4 BL 0x3C32E90
	0x01DCC3C8 CBZ X0, 0x1DCC548
	0x01DCC3CC MOV X1, X31
	0x01DCC3D0 BL 0x3C3F58C
	0x01DCC3D4 MOV V8.16B, V0.16B
	0x01DCC3D8 MOV V9.16B, V1.16B
	0x01DCC3DC MOV V10.16B, V2.16B
	0x01DCC3E0 MOV X0, X19
	0x01DCC3E4 MOV X1, X31
	0x01DCC3E8 BL 0x3C32E90
	0x01DCC3EC CBZ X0, 0x1DCC54C
	0x01DCC3F0 MOV X1, X31
	0x01DCC3F4 BL 0x3C3F58C
	0x01DCC3F8 FSUB S0, S8, S0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x260D000
	006 Move W8, [X21+2997]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x232B000
	014 Move X0, [X0+2680]
	015 Call 0x1C17CF4
	016 Move X0, 0x232D000
	017 Move X0, [X0+768]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2997], W8
	021 Move W8, [X19+88]
	022 Compare W8, 0
	023 JumpIfEqual {33}
	024 Move [X19+88], W31
	025 Move X0, X19
	026 Move W1, W20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call PlayerWatch.set_transmittingPlayerObjectID, X0, X1
	032 Return 
	033 Move X21, 0x232B000
	034 Move X21, [X21+2680]
	035 Move X0, [X21]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X19
	041 Move X1, X31
	042 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	043 Move X0, [X19+56]
	044 Compare X0, 0
	045 JumpIfEqual {134}
	046 Move X1, X31
	047 Call NetworkRunner.get_Stage, X0
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return 
	054 Move X0, [X19+64]
	055 Compare X0, 0
	056 JumpIfEqual {134}
	057 Move X1, X31
	058 Call NetworkObject.GetLocalAuthorityMask, X0
	059 Move TEMP, X0
	060 And TEMP, TEMP, 2
	061 Compare TEMP, 2
	062 JumpIfEqual {81}
	063 Move X0, [X21]
	064 Move X19, [X19+64]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X8, 0x232D000
	070 Move X8, [X8+768]
	071 Move X1, X19
	072 Move X20, [X31+16]
	073 Move X19, [X31+24]
	074 Move W2, 2
	075 Move X0, [X8]
	076 Move X3, X31
	077 Move X30, [X31+32]
	078 Move X21, [X31+40]
	079 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	080 Return 
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfEqual {25}
	085 Move X8, [X19+56]
	086 Compare X8, 0
	087 JumpIfEqual {134}
	088 Move X0, [X8+80]
	089 Compare X0, 0
	090 JumpIfEqual {134}
	091 Move X1, X31
	092 Call Simulation.HasAnyActiveConnections, X0
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {49}
	097 Move X8, [X19+56]
	098 Compare X8, 0
	099 JumpIfEqual {134}
	100 Move X0, [X8+80]
	101 Move W1, 12
	102 Move X2, X31
	103 Call SimulationMessage.Allocate, X0, X1
	104 Move X8, [X19+64]
	105 Compare X8, 0
	106 JumpIfEqual {134}
	107 Move X8, [X8+32]
	108 Move X21, X0
	109 Compare X8, 0
	110 JumpIfEqual {112}
	111 Move W0, [X8]
	112 Move X0, X31
	113 Move W1, [X19+104]
	114 Move W2, 1
	115 Move X3, X31
	116 Call RpcHeader.Create, X0, X1, X2
	117 Move [X21+28], X0
	118 Move [X21+36], W20
	119 Compare X21, 0
	120 JumpIfEqual {134}
	121 Move W8, 96
	122 Move [X21+12], W8
	123 Move X0, [X19+56]
	124 Compare X0, 0
	125 JumpIfEqual {134}
	126 Move X20, [X31+16]
	127 Move X19, [X31+24]
	128 Move X1, X21
	129 Move X2, X31
	130 Move X30, [X31+32]
	131 Move X21, [X31+40]
	132 Call NetworkRunner.SendRpc, X0, X1
	133 Return 
	134 Call 0x1C17F20

Method: System.Void Spawned()

Disassembly:
	0x01DCCD5C B.EQ 0x1DCCF20
	0x01DCCD60 SUBS X9, X9, 0x1
	0x01DCCD64 ADD X10, X10, 0x10
	0x01DCCD68 B.NE 0x1DCCD54
	0x01DCCD6C MOVZ W2, 0x1
	0x01DCCD70 MOV X0, X20
	0x01DCCD74 BL 0x1C5C788
	0x01DCCD78 B 0x1DCCF30
	0x01DCCD7C MOV X0, X19
	0x01DCCD80 MOV X1, X31
	0x01DCCD84 BL 0x3573914
	0x01DCCD88 ADRP X8, 0x2327000
	0x01DCCD8C LDR X8, [X8 + 0x9C8]
	0x01DCCD90 MOV X19, X0
	0x01DCCD94 LDR X20, [X8]
	0x01DCCD98 LDR X8, [X20 + 0x38]
	0x01DCCD9C CBNZ X8, 0x1DCCDAC
	0x01DCCDA0 MOV X0, X20
	0x01DCCDA4 BL 0x1C5C6E0
	0x01DCCDA8 LDR X8, [X20 + 0x38]
	0x01DCCDAC LDR X0, [X8 + 0x10]
	0x01DCCDB0 LDRB W8, [X0 + 0x135]
	0x01DCCDB4 TBNZ X8, 0x0, 0x1DCCDBC
	0x01DCCDB8 BL 0x1C5C684
	0x01DCCDBC LDR W8, [X0 + 0xE0]
	0x01DCCDC0 CBNZ W8, 0x1DCCDC8
	0x01DCCDC4 BL 0x1C16DFC
	0x01DCCDC8 LDR X8, [X20 + 0x38]
	0x01DCCDCC LDR X0, [X8 + 0x10]
	0x01DCCDD0 LDRB W8, [X0 + 0x135]
	0x01DCCDD4 TBNZ X8, 0x0, 0x1DCCDDC
	0x01DCCDD8 BL 0x1C5C684
	0x01DCCDDC CBZ X19, 0x1DCD0A4
	0x01DCCDE0 ADRP X10, 0x232C000
	0x01DCCDE4 ADRP X11, 0x232C000
	0x01DCCDE8 LDR X9, [X0 + 0xB8]
	0x01DCCDEC LDR X10, [X10 + 0x348]
	0x01DCCDF0 LDR X8, [X19]
	0x01DCCDF4 LDR X11, [X11 + 0x3A8]
	0x01DCCDF8 LDR X20, [X9]
	0x01DCCDFC LDR X1, [X10]
	0x01DCCE00 LDRH W9, [X8 + 0x12E]
	0x01DCCE04 LDR X21, [X11]
	0x01DCCE08 CBZ X9, 0x1DCCEE0
	0x01DCCE0C LDR X10, [X8 + 0xB0]
	0x01DCCE10 ADD X10, X10, 0x8
	0x01DCCE14 LDUR X11, [X10 - 0x8]
	0x01DCCE18 CMP X11, X1
	0x01DCCE1C B.EQ 0x1DCCEF0
	0x01DCCE20 SUBS X9, X9, 0x1
	0x01DCCE24 ADD X10, X10, 0x10
	0x01DCCE28 B.NE 0x1DCCE14
	0x01DCCE2C B 0x1DCCEE0
	0x01DCCE30 MOV X0, X19
	0x01DCCE34 MOV X1, X31
	0x01DCCE38 BL 0x3573914
	0x01DCCE3C ADRP X8, 0x2327000
	0x01DCCE40 LDR X8, [X8 + 0x9C8]
	0x01DCCE44 MOV X19, X0
	0x01DCCE48 LDR X20, [X8]
	0x01DCCE4C LDR X8, [X20 + 0x38]
	0x01DCCE50 CBNZ X8, 0x1DCCE60
	0x01DCCE54 MOV X0, X20
	0x01DCCE58 BL 0x1C5C6E0
	0x01DCCE5C LDR X8, [X20 + 0x38]
	0x01DCCE60 LDR X0, [X8 + 0x10]
	0x01DCCE64 LDRB W8, [X0 + 0x135]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x260D000
	006 Move W8, [X20+2998]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x2328000
	013 Move X0, [X0+1608]
	014 Call 0x1C17CF4
	015 Move X0, 0x2329000
	016 Move X0, [X0+2896]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2998], W8
	020 Move W2, 1
	021 Move X0, X19
	022 Move W1, W31
	023 Move X3, X31
	024 Call NetworkBehaviour.GetChangeDetector, X0, X1, X2
	025 Move [X19+192], X0
	026 Move X0, X19
	027 Call PlayerWatch.get_IsMine, X0
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {71}
	032 Move X20, 0x2328000
	033 Move X20, [X20+1608]
	034 Move X0, [X20]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X21, 0x260D000
	040 Move W8, [X21+1927]
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x2328000
	044 Move X0, [X0+1608]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X21+1927], W8
	048 Move X0, [X20]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {54}
	052 Call 0x1C17DFC
	053 Move X0, [X20]
	054 Move X8, [X0+184]
	055 Move X8, [X8]
	056 Compare X8, 0
	057 JumpIfEqual {85}
	058 Move X8, [X8+184]
	059 Compare X8, 0
	060 JumpIfEqual {85}
	061 Move X8, [X8+128]
	062 Compare X8, 0
	063 JumpIfEqual {85}
	064 Move X8, [X8+72]
	065 Compare X8, 0
	066 JumpIfEqual {85}
	067 Move W1, [X8+76]
	068 Move X0, X19
	069 Move [X19+172], W1
	070 Call PlayerWatch.set_moneyAmount, X0, X1
	071 Move X0, X19
	072 Call PlayerWatch.get_moneyAmount, X0
	073 Move [X19+172], W0
	074 Move X0, X19
	075 Call PlayerWatch.HandleMoneyChanged, X0
	076 Move X0, X19
	077 Call PlayerWatch.HandleChannelChanged, X0
	078 Move X0, X19
	079 Move X20, [X31+16]
	080 Move X19, [X31+24]
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 Call PlayerWatch.HandleDisplayChanged, X0
	084 Return 
	085 Call 0x1C17F20

Method: System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)

Disassembly:
	0x01DCCE68 TBNZ X8, 0x0, 0x1DCCE70
	0x01DCCE6C BL 0x1C5C684
	0x01DCCE70 LDR W8, [X0 + 0xE0]
	0x01DCCE74 CBNZ W8, 0x1DCCE7C
	0x01DCCE78 BL 0x1C16DFC
	0x01DCCE7C LDR X8, [X20 + 0x38]
	0x01DCCE80 LDR X0, [X8 + 0x10]
	0x01DCCE84 LDRB W8, [X0 + 0x135]
	0x01DCCE88 TBNZ X8, 0x0, 0x1DCCE90
	0x01DCCE8C BL 0x1C5C684
	0x01DCCE90 CBZ X19, 0x1DCD0A4
	0x01DCCE94 ADRP X10, 0x232C000
	0x01DCCE98 ADRP X11, 0x232C000
	0x01DCCE9C LDR X9, [X0 + 0xB8]
	0x01DCCEA0 LDR X10, [X10 + 0x348]
	0x01DCCEA4 LDR X8, [X19]
	0x01DCCEA8 LDR X11, [X11 + 0x3A0]
	0x01DCCEAC LDR X20, [X9]
	0x01DCCEB0 LDR X1, [X10]
	0x01DCCEB4 LDRH W9, [X8 + 0x12E]
	0x01DCCEB8 LDR X21, [X11]
	0x01DCCEBC CBZ X9, 0x1DCCEE0
	0x01DCCEC0 LDR X10, [X8 + 0xB0]
	0x01DCCEC4 ADD X10, X10, 0x8
	0x01DCCEC8 LDUR X11, [X10 - 0x8]
	0x01DCCECC CMP X11, X1
	0x01DCCED0 B.EQ 0x1DCCEF0
	0x01DCCED4 SUBS X9, X9, 0x1
	0x01DCCED8 ADD X10, X10, 0x10
	0x01DCCEDC B.NE 0x1DCCEC8
	0x01DCCEE0 MOVZ W2, 0x1
	0x01DCCEE4 MOV X0, X19
	0x01DCCEE8 BL 0x1C5C788
	0x01DCCEEC B 0x1DCCF00
	0x01DCCEF0 LDR W9, [X10]
	0x01DCCEF4 ADD W9, W9, 0x1
	0x01DCCEF8 ADD X8, X8, W9, 0x4, SXTW
	0x01DCCEFC ADD X0, X8, 0x138
	0x01DCCF00 LDP X8, X4, [X0]
	0x01DCCF04 MOVZ W1, 0x2
	0x01DCCF08 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x260D000
	008 Move X22, 0x232D000
	009 Move W8, [X23+2999]
	010 Move X22, [X22+760]
	011 Move W21, W2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x232D000
	019 Move X0, [X0+752]
	020 Call 0x1C17CF4
	021 Move X0, 0x232D000
	022 Move X0, [X0+760]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+2999], W8
	026 And W2, W21, 1
	027 Move X0, X19
	028 Move X1, X20
	029 Move X3, X31
	030 Call NetworkBehaviour.Despawned, X0, X1, X2
	031 Move X0, [X22]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X22]
	037 Move X8, [X0+184]
	038 Move X0, [X8]
	039 Compare X0, 0
	040 JumpIfEqual {53}
	041 Move X8, 0x232D000
	042 Move X8, [X8+752]
	043 Move X1, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X2, [X8]
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Call HashSet`1<Object>.Remove, X0, X1
	052 Return 
	053 Call 0x1C17F20

Method: System.Void HandleTransmittingChanged()

Disassembly:
	0x01DCCF0C MOV X2, X21
	0x01DCCF10 MOV X3, X20
	0x01DCCF14 BLR X8
	0x01DCCF18 MOV W0, W31
	0x01DCCF1C B 0x1DCD090
	0x01DCCF20 LDR W9, [X10]
	0x01DCCF24 ADD W9, W9, 0x1
	0x01DCCF28 ADD X8, X8, W9, 0x4, SXTW
	0x01DCCF2C ADD X0, X8, 0x138
	0x01DCCF30 LDP X8, X4, [X0]
	0x01DCCF34 MOV X0, X20
	0x01DCCF38 MOV W1, W21
	0x01DCCF3C MOV W2, W22
	0x01DCCF40 MOV W3, W23
	0x01DCCF44 BLR X8
	0x01DCCF48 MOV X0, X19
	0x01DCCF4C MOV X1, X31
	0x01DCCF50 BL 0x3573914
	0x01DCCF54 ADRP X8, 0x2327000
	0x01DCCF58 LDR X8, [X8 + 0x9D0]
	0x01DCCF5C MOV X20, X0
	0x01DCCF60 MOVZ W1, 0x2
	0x01DCCF64 LDR X8, [X8]
	0x01DCCF68 MOV X0, X8
	0x01DCCF6C BL 0x1C16D6C
	0x01DCCF70 ADRP X8, 0x232C000
	0x01DCCF74 LDP V0, V1, [X31 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call PlayerWatch.get_IsMine, X0
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {24}
	009 Move X0, X19
	010 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, -2147483648
	013 Compare TEMP, -2147483648
	014 JumpIfEqual {27}
	015 Move X0, [X19+136]
	016 Compare X0, 0
	017 JumpIfEqual {38}
	018 Move X1, X31
	019 Call AudioSource.Play, X0
	020 Move X0, [X19+152]
	021 Compare X0, 0
	022 JumpIfEqual {38}
	023 Move W1, 1
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Return 
	027 Move X0, [X19+144]
	028 Compare X0, 0
	029 JumpIfEqual {38}
	030 Move X1, X31
	031 Call AudioSource.Play, X0
	032 Move X0, [X19+152]
	033 Compare X0, 0
	034 JumpIfEqual {38}
	035 Move W1, W31
	036 Move X30, [X31+16]
	037 Move X19, [X31+24]
	038 Call 0x1C17F20

Method: System.Void ToggleDisplayChange()

Disassembly:
	0x01DCC4C8 MOV X2, X31
	0x01DCC4CC BL 0x3C354F8
	0x01DCC4D0 TBZ X0, 0x0, 0x1DCC510
	0x01DCC4D4 CBZ X20, 0x1DCC534
	0x01DCC4D8 LDR X8, [X20 + 0x80]
	0x01DCC4DC CBZ X8, 0x1DCC534
	0x01DCC4E0 LDR X8, [X8 + 0x98]
	0x01DCC4E4 CBZ X8, 0x1DCC534
	0x01DCC4E8 LDR X1, [X8 + 0x50]
	0x01DCC4EC CBZ X1, 0x1DCC50C
	0x01DCC4F0 LDR X0, [X19 + 0x80]
	0x01DCC4F4 CBZ X0, 0x1DCC534
	0x01DCC4F8 BL 0x1DCC8C4
	0x01DCC4FC LDR X0, [X19 + 0x80]
	0x01DCC500 CBZ X0, 0x1DCC534
	0x01DCC504 BL 0x1DCCC60
	0x01DCC508 B 0x1DCC510
	0x01DCC50C MOV X20, X31
	0x01DCC510 STR X20, [X19 + 0xC8]
	0x01DCC514 LDP X20, X19, [X31 + 0xB0]
	0x01DCC518 LDP X22, X21, [X31 + 0xA0]
	0x01DCC51C LDP X24, X23, [X31 + 0x90]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call PlayerWatch.get_display, X0
	005 Compare X19, 0
	006 JumpIfEqual {26}
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X0, X19
	010 Call PlayerWatch.set_display, X0, X1
	011 Move X8, -19795968
	012 Move X9, -19795968
	013 Move V0, [X8+92]
	014 Move V1, [X9+188]
	015 Move W0, W31
	016 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	017 Move X8, -19795968
	018 Move X9, -19795968
	019 Move V0, [X8+1100]
	020 Move V1, [X9+512]
	021 Move W0, 1
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	025 Return 
	026 Call 0x1C17F20

Method: System.Boolean IsRightHand(UnityEngine.Collider collider)

Disassembly:
	0x01DCD028 LDRH W9, [X8 + 0x12E]
	0x01DCD02C LDR X19, [X10]
	0x01DCD030 CBZ X9, 0x1DCD054
	0x01DCD034 LDR X10, [X8 + 0xB0]
	0x01DCD038 ADD X10, X10, 0x8
	0x01DCD03C LDUR X11, [X10 - 0x8]
	0x01DCD040 CMP X11, X1
	0x01DCD044 B.EQ 0x1DCD064
	0x01DCD048 SUBS X9, X9, 0x1
	0x01DCD04C ADD X10, X10, 0x10
	0x01DCD050 B.NE 0x1DCD03C
	0x01DCD054 MOVZ W2, 0x1
	0x01DCD058 MOV X0, X20
	0x01DCD05C BL 0x1C5C788
	0x01DCD060 B 0x1DCD074
	0x01DCD064 LDR W9, [X10]
	0x01DCD068 ADD W9, W9, 0x1
	0x01DCD06C ADD X8, X8, W9, 0x4, SXTW
	0x01DCD070 ADD X0, X8, 0x138
	0x01DCD074 LDP X8, X4, [X0]
	0x01DCD078 MOVZ W1, 0x3
	0x01DCD07C MOV X0, X20
	0x01DCD080 MOV X2, X19
	0x01DCD084 MOV X3, X21
	0x01DCD088 BLR X8
	0x01DCD08C MOVZ W0, 0x1
	0x01DCD090 LDP X20, X19, [X31 + 0x90]
	0x01DCD094 LDP X22, X21, [X31 + 0x80]
	0x01DCD098 LDP X30, X23, [X31 + 0x70]
	0x01DCD09C ADD X31, X31, 0xA0
	0x01DCD0A0 RET
	0x01DCD0A4 BL 0x1C16F20
	0x01DCD0A8 BL 0x1C16F28
	0x01DCD0AC BL 0x1C16F44
	0x01DCD0B0 MOV X1, X31
	0x01DCD0B4 BL 0x1C16DEC
	0x01DCD0B8 MOVN W8, 0x0
	0x01DCD0BC MOV X1, X31
	0x01DCD0C0 STR W8, [X0 + 0xA0]
	0x01DCD0C4 B 0x1E74F04
	0x01DCD0C8 STR X30, [X31 - 0x30]!
	0x01DCD0CC STP X22, X21, [X31 + 0x10]
	0x01DCD0D0 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x260C000
	005 Move W8, [X20+3000]
	006 Move X19, X1
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x232C000
	012 Move X0, [X0+24]
	013 Call 0x1C17CF4
	014 Move X0, 0x2327000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3000], W8
	019 Compare X19, 0
	020 JumpIfEqual {53}
	021 Move X8, 0x232C000
	022 Move X8, [X8+24]
	023 Move X20, 0x2327000
	024 Move X0, X19
	025 Move X1, [X8]
	026 Move X20, [X20+1432]
	027 Call 0x21A4894, X0
	028 Move X8, [X20]
	029 Move X19, X0
	030 Move W9, [X8+224]
	031 Compare W9, 0
	032 JumpIfNotEqual {35}
	033 Move X0, X8
	034 Call 0x1C17DFC
	035 Move X0, X19
	036 Move X1, X31
	037 Move X2, X31
	038 Call Object.op_Equality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {44}
	043 Move W0, W31
	044 Compare X19, 0
	045 JumpIfEqual {53}
	046 Move W8, [X19+164]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CSET not yet implemented."
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Return X0
	053 Call 0x1C17F20

Method: System.Void Render()

Disassembly:
	0x01DCD0D4 ADRP X21, 0x260B000
	0x01DCD0D8 ADRP X22, 0x232B000
	0x01DCD0DC ADRP X19, 0x232B000
	0x01DCD0E0 ADRP X20, 0x232B000
	0x01DCD0E4 LDRB W8, [X21 + 0xBBA]
	0x01DCD0E8 LDR X22, [X22 + 0x3B0]
	0x01DCD0EC LDR X19, [X19 + 0x3B8]
	0x01DCD0F0 LDR X20, [X20 + 0x2F8]
	0x01DCD0F4 TBNZ X8, 0x0, 0x1DCD124
	0x01DCD0F8 ADRP X0, 0x232B000
	0x01DCD0FC LDR X0, [X0 + 0x3B8]
	0x01DCD100 BL 0x1C16CF4
	0x01DCD104 ADRP X0, 0x232B000
	0x01DCD108 LDR X0, [X0 + 0x3B0]
	0x01DCD10C BL 0x1C16CF4
	0x01DCD110 ADRP X0, 0x232B000
	0x01DCD114 LDR X0, [X0 + 0x2F8]
	0x01DCD118 BL 0x1C16CF4
	0x01DCD11C MOVZ W8, 0x1
	0x01DCD120 STRB W8, [X21 + 0xBBA]
	0x01DCD124 LDR X0, [X22]
	0x01DCD128 BL 0x1C16F10
	0x01DCD12C LDR X1, [X19]
	0x01DCD130 MOV X19, X0
	0x01DCD134 BL 0x2DBDE08
	0x01DCD138 LDR X8, [X20]
	0x01DCD13C LDP X22, X21, [X31 + 0x10]
	0x01DCD140 LDR X8, [X8 + 0xB8]
	0x01DCD144 STR X19, [X8]
	0x01DCD148 LDP X20, X19, [X31 + 0x20]
	0x01DCD14C LDR X30, [X31], #0x30
	0x01DCD150 RET
	0x01DCD154 STP X30, X19, [X31 - 0x10]!
	0x01DCD158 LDR W1, [X0 + 0xA0]
	0x01DCD15C MOV X19, X0
	0x01DCD160 BL 0x1DCA02C
	0x01DCD164 LDR W1, [X19 + 0xA4]
	0x01DCD168 MOV X0, X19
	0x01DCD16C BL 0x1DCA0EC
	0x01DCD170 LDR W1, [X19 + 0xA8]
	0x01DCD174 MOV X0, X19
	0x01DCD178 BL 0x1DCA1AC
	0x01DCD17C LDR W1, [X19 + 0xB0]
	0x01DCD180 MOV X0, X19
	0x01DCD184 LDP X30, X19, [X31], #0x10
	0x01DCD188 B 0x1DCA26C
	0x01DCD18C STP X30, X19, [X31 - 0x10]!
	0x01DCD190 MOV X19, X0
	0x01DCD194 BL 0x1DC9FCC
	0x01DCD198 STR W0, [X19 + 0xA0]
	0x01DCD19C MOV X0, X19
	0x01DCD1A0 BL 0x1DCA08C
	0x01DCD1A4 STR W0, [X19 + 0xA4]
	0x01DCD1A8 MOV X0, X19
	0x01DCD1AC BL 0x1DCA14C
	0x01DCD1B0 STR W0, [X19 + 0xA8]
	0x01DCD1B4 MOV X0, X19
	0x01DCD1B8 BL 0x1DCA20C
	0x01DCD1BC STR W0, [X19 + 0xB0]
	0x01DCD1C0 LDP X30, X19, [X31], #0x10
	0x01DCD1C4 RET
	0x01DCD1C8 STP X30, X21, [X31 - 0x20]!
	0x01DCD1CC STP X20, X19, [X31 + 0x10]
	0x01DCD1D0 ADRP X21, 0x260B000
	0x01DCD1D4 LDRB W8, [X21 + 0xBBB]
	0x01DCD1D8 MOV X20, X1
	0x01DCD1DC MOV X19, X0
	0x01DCD1E0 TBNZ X8, 0x0, 0x1DCD1F8
	0x01DCD1E4 ADRP X0, 0x232B000
	0x01DCD1E8 LDR X0, [X0 + 0x2F8]
	0x01DCD1EC BL 0x1C16CF4
	0x01DCD1F0 MOVZ W8, 0x1
	0x01DCD1F4 STRB W8, [X21 + 0xBBB]
	0x01DCD1F8 CBZ X19, 0x1DCD258
	0x01DCD1FC ADRP X8, 0x232B000
	0x01DCD200 LDR X8, [X8 + 0x2F8]
	0x01DCD204 MOVZ W9, 0x1
	0x01DCD208 LDR W1, [X20 + 0x24]
	0x01DCD20C STRB W9, [X19 + 0x58]
	0x01DCD210 LDR X9, [X19]
	0x01DCD214 LDR X8, [X8]
	0x01DCD218 LDRB W11, [X9 + 0x130]
	0x01DCD21C LDRB W10, [X8 + 0x130]
	0x01DCD220 CMP W11, W10
	0x01DCD224 B.CC 0x1DCD24C
	0x01DCD228 LDR X9, [X9 + 0xC8]
	0x01DCD22C ADD X9, X9, X10, 0x3, LSL
	0x01DCD230 LDUR X9, [X9 - 0x8]
	0x01DCD234 CMP X9, X8
	0x01DCD238 B.NE 0x1DCD24C
	0x01DCD23C MOV X0, X19
	0x01DCD240 LDP X20, X19, [X31 + 0x10]
	0x01DCD244 LDP X30, X21, [X31], #0x20
	0x01DCD248 B 0x1DCB270
	0x01DCD24C MOV X0, X19
	0x01DCD250 MOV X1, X8
	0x01DCD254 BL 0x1C171E0
	0x01DCD258 BL 0x1C16F20
	0x01DCD25C LDR X0, [X0 + 0xC0]
	0x01DCD260 RET
	0x01DCD264 SUB X31, X31, 0x90
	0x01DCD268 STP D15, D14, [X31 + 0x30]
	0x01DCD26C STP D13, D12, [X31 + 0x40]
	0x01DCD270 STP D11, D10, [X31 + 0x50]
	0x01DCD274 STP D9, D8, [X31 + 0x60]
	0x01DCD278 STR X30, [X31 + 0x70]
	0x01DCD27C STP X20, X19, [X31 + 0x80]
	0x01DCD280 ADRP X20, 0x260B000
	0x01DCD284 LDRB W8, [X20 + 0xA1F]
	0x01DCD288 MOV X19, X0
	0x01DCD28C CBNZ W8, 0x1DCD2A4
	0x01DCD290 ADRP X0, 0x2326000
	0x01DCD294 LDR X0, [X0 + 0x5A0]
	0x01DCD298 BL 0x1C16CF4
	0x01DCD29C MOVZ W8, 0x1
	0x01DCD2A0 STRB W8, [X20 + 0xA1F]
	0x01DCD2A4 ADRP X8, 0x2326000
	0x01DCD2A8 LDR X8, [X8 + 0x5A0]
	0x01DCD2AC LDR X8, [X8]
	0x01DCD2B0 LDR X8, [X8 + 0xB8]
	0x01DCD2B4 LDR V0, [X8 + 0x48]
	0x01DCD2B8 LDR V1, [X8 + 0x50]
	0x01DCD2BC STR D0, [X31 + 0x20]
	0x01DCD2C0 STR S1, [X31 + 0x28]
	0x01DCD2C4 LDR X0, [X19 + 0x88]
	0x01DCD2C8 CBZ X0, 0x1DCD3BC
	0x01DCD2CC MOV X1, X31
	0x01DCD2D0 BL 0x3C3F49C
	0x01DCD2D4 CBZ X0, 0x1DCD3BC
	0x01DCD2D8 MOV X1, X31
	0x01DCD2DC BL 0x3C3FA04
	0x01DCD2E0 FNEG S0, S0
	0x01DCD2E4 FNEG S1, S1
	0x01DCD2E8 FNEG S2, S2
	0x01DCD2EC ADD X0, X31, 0x10
	0x01DCD2F0 ADD X1, X31, 0x20
	0x01DCD2F4 MOV X2, X31
	0x01DCD2F8 STP S0, S1, [X31 + 0x10]
	0x01DCD2FC STR S2, [X31 + 0x18]
	0x01DCD300 BL 0x3C28B74
	0x01DCD304 LDR X19, [X19 + 0x88]
	0x01DCD308 CBZ X19, 0x1DCD3BC
	0x01DCD30C MOV X0, X19
	0x01DCD310 MOV X1, X31
	0x01DCD314 BL 0x3C3DEB4
	0x01DCD318 LDP S6, S4, [X31 + 0x10]
	0x01DCD31C MOV V8.16B, V0.16B
	0x01DCD320 MOV V9.16B, V1.16B
	0x01DCD324 MOV V10.16B, V2.16B
	0x01DCD328 LDP S0, S1, [X31 + 0x20]
	0x01DCD32C LDR V2, [X31 + 0x28]
	0x01DCD330 LDR V5, [X31 + 0x18]
	0x01DCD334 MOV V11.16B, V3.16B
	0x01DCD338 MOV V3.16B, V6.16B
	0x01DCD33C MOV X0, X31
	0x01DCD340 BL 0x3C2A810
	0x01DCD344 MOV X0, X31
	0x01DCD348 MOV V12.16B, V0.16B
	0x01DCD34C MOV V13.16B, V1.16B
	0x01DCD350 MOV V14.16B, V2.16B
	0x01DCD354 MOV V15.16B, V3.16B
	0x01DCD358 BL 0x3C3C714
	0x01DCD35C FMOV S1, 5
	0x01DCD360 FMUL S0, S0, S1
	0x01DCD364 STR S0, [X31]
	0x01DCD368 MOV V0.16B, V8.16B
	0x01DCD36C MOV V1.16B, V9.16B
	0x01DCD370 MOV V2.16B, V10.16B
	0x01DCD374 MOV V3.16B, V11.16B
	0x01DCD378 MOV V4.16B, V12.16B
	0x01DCD37C MOV V5.16B, V13.16B
	0x01DCD380 MOV V6.16B, V14.16B
	0x01DCD384 MOV V7.16B, V15.16B
	0x01DCD388 MOV X0, X31
	0x01DCD38C BL 0x3C2A3CC
	0x01DCD390 MOV X0, X19
	0x01DCD394 MOV X1, X31
	0x01DCD398 BL 0x3C3F7AC
	0x01DCD39C LDP X20, X19, [X31 + 0x80]
	0x01DCD3A0 LDR X30, [X31 + 0x70]
	0x01DCD3A4 LDP D9, D8, [X31 + 0x60]
	0x01DCD3A8 LDP D11, D10, [X31 + 0x50]
	0x01DCD3AC LDP D13, D12, [X31 + 0x40]
	0x01DCD3B0 LDP D15, D14, [X31 + 0x30]
	0x01DCD3B4 ADD X31, X31, 0x90
	0x01DCD3B8 RET
	0x01DCD3BC BL 0x1C16F20
	0x01DCD3C0 STR X30, [X31 - 0x20]!
	0x01DCD3C4 STP X20, X19, [X31 + 0x10]
	0x01DCD3C8 ADRP X20, 0x260B000
	0x01DCD3CC LDRB W8, [X20 + 0xBBC]
	0x01DCD3D0 MOV W19, W1
	0x01DCD3D4 STR W1, [X31 + 0xC]
	0x01DCD3D8 TBNZ X8, 0x0, 0x1DCD408
	0x01DCD3DC ADRP X0, 0x232B000
	0x01DCD3E0 LDR X0, [X0 + 0x3C0]
	0x01DCD3E4 BL 0x1C16CF4
	0x01DCD3E8 ADRP X0, 0x232B000
	0x01DCD3EC LDR X0, [X0 + 0x3C8]
	0x01DCD3F0 BL 0x1C16CF4
	0x01DCD3F4 ADRP X0, 0x232B000
	0x01DCD3F8 LDR X0, [X0 + 0x98]
	0x01DCD3FC BL 0x1C16CF4
	0x01DCD400 MOVZ W8, 0x1
	0x01DCD404 STRB W8, [X20 + 0xBBC]
	0x01DCD408 MOVZ W8, 0x2711
	0x01DCD40C CMP W19, W8
	0x01DCD410 STR W31, [X31 + 0x8]
	0x01DCD414 B.GE 0x1DCD434
	0x01DCD418 ADRP X8, 0x232B000
	0x01DCD41C LDR X8, [X8 + 0x98]
	0x01DCD420 ADD X0, X31, 0xC
	0x01DCD424 MOV X2, X31
	0x01DCD428 LDR X1, [X8]
	0x01DCD42C BL 0x337B774
	0x01DCD430 B 0x1DCD474
	0x01DCD434 ADRP X8, 0x232B000
	0x01DCD438 LDR X8, [X8 + 0x3C8]
	0x01DCD43C ADRP X20, 0x232B000
	0x01DCD440 LDR X20, [X20 + 0x3C0]
	0x01DCD444 MOVZ W9, 0x4DD3
	0x01DCD448 LDR X1, [X8]
	0x01DCD44C MOVK W9, 0x10620000
	0x01DCD450 UMADDL X8, X19, X9, X31
	0x01DCD454 UBFM X8, X8, 0x26, 0x3F
	0x01DCD458 ADD X0, X31, 0x8
	0x01DCD45C MOV X2, X31
	0x01DCD460 STR W8, [X31 + 0x8]
	0x01DCD464 BL 0x337B774
	0x01DCD468 LDR X1, [X20]
	0x01DCD46C MOV X2, X31
	0x01DCD470 BL 0x321B938
	0x01DCD474 LDP X20, X19, [X31 + 0x10]
	0x01DCD478 LDR X30, [X31], #0x20
	0x01DCD47C RET
	0x01DCD480 STR D8, [X31 - 0x20]!
	0x01DCD484 STR X30, [X31 + 0x8]
	0x01DCD488 STP X20, X19, [X31 + 0x10]
	0x01DCD48C ADRP X20, 0x260B000
	0x01DCD490 LDRB W8, [X20 + 0xBC5]
	0x01DCD494 MOV V8.16B, V0.16B
	0x01DCD498 MOV X19, X0
	0x01DCD49C TBNZ X8, 0x0, 0x1DCD4B4
	0x01DCD4A0 ADRP X0, 0x232B000
	0x01DCD4A4 LDR X0, [X0 + 0x308]
	0x01DCD4A8 BL 0x1C16CF4
	0x01DCD4AC MOVZ W8, 0x1
	0x01DCD4B0 STRB W8, [X20 + 0xBC5]
	0x01DCD4B4 LDR X0, [X19 + 0x28]
	0x01DCD4B8 CBZ X0, 0x1DCD510
	0x01DCD4BC ADRP X20, 0x232B000
	0x01DCD4C0 LDR X20, [X20 + 0x308]
	0x01DCD4C4 MOV X1, X31
	0x01DCD4C8 BL 0x3C1341C
	0x01DCD4CC LDR X8, [X20]
	0x01DCD4D0 MOV X19, X0
	0x01DCD4D4 LDR W9, [X8 + 0xE0]
	0x01DCD4D8 CBNZ W9, 0x1DCD4E4
	0x01DCD4DC MOV X0, X8
	0x01DCD4E0 BL 0x1C16DFC
	0x01DCD4E4 CBZ X19, 0x1DCD510
	0x01DCD4E8 LDR X8, [X20]
	0x01DCD4EC MOV X0, X19
	0x01DCD4F0 LDP X20, X19, [X31 + 0x10]
	0x01DCD4F4 LDR X30, [X31 + 0x8]
	0x01DCD4F8 LDR X8, [X8 + 0xB8]
	0x01DCD4FC MOV V0.16B, V8.16B
	0x01DCD500 MOV X2, X31
	0x01DCD504 LDR W1, [X8 + 0x4]
	0x01DCD508 LDR V8, [X31], #0x20
	0x01DCD50C B 0x3C15CD8
	0x01DCD510 BL 0x1C16F20
	0x01DCD514 STR D8, [X31 - 0x20]!
	0x01DCD518 STR X30, [X31 + 0x8]
	0x01DCD51C STP X20, X19, [X31 + 0x10]
	0x01DCD520 ADRP X20, 0x260B000
	0x01DCD524 LDRB W8, [X20 + 0xBC7]
	0x01DCD528 MOV V8.16B, V0.16B
	0x01DCD52C MOV X19, X0
	0x01DCD530 TBNZ X8, 0x0, 0x1DCD548
	0x01DCD534 ADRP X0, 0x232B000
	0x01DCD538 LDR X0, [X0 + 0x308]
	0x01DCD53C BL 0x1C16CF4
	0x01DCD540 MOVZ W8, 0x1
	0x01DCD544 STRB W8, [X20 + 0xBC7]
	0x01DCD548 LDR X0, [X19 + 0x28]
	0x01DCD54C CBZ X0, 0x1DCD5A4
	0x01DCD550 ADRP X20, 0x232B000
	0x01DCD554 LDR X20, [X20 + 0x308]
	0x01DCD558 MOV X1, X31
	0x01DCD55C BL 0x3C1341C
	0x01DCD560 LDR X8, [X20]
	0x01DCD564 MOV X19, X0
	0x01DCD568 LDR W9, [X8 + 0xE0]
	0x01DCD56C CBNZ W9, 0x1DCD578
	0x01DCD570 MOV X0, X8
	0x01DCD574 BL 0x1C16DFC
	0x01DCD578 CBZ X19, 0x1DCD5A4
	0x01DCD57C LDR X8, [X20]
	0x01DCD580 MOV X0, X19
	0x01DCD584 LDP X20, X19, [X31 + 0x10]
	0x01DCD588 LDR X30, [X31 + 0x8]
	0x01DCD58C LDR X8, [X8 + 0xB8]
	0x01DCD590 MOV V0.16B, V8.16B
	0x01DCD594 MOV X2, X31
	0x01DCD598 LDR W1, [X8 + 0xC]
	0x01DCD59C LDR V8, [X31], #0x20
	0x01DCD5A0 B 0x3C15CD8
	0x01DCD5A4 BL 0x1C16F20
	0x01DCD5A8 STP X30, X21, [X31 - 0x20]!
	0x01DCD5AC STP X20, X19, [X31 + 0x10]
	0x01DCD5B0 ADRP X21, 0x260B000
	0x01DCD5B4 LDRB W8, [X21 + 0xBBF]
	0x01DCD5B8 MOV W19, W1
	0x01DCD5BC MOV X20, X0
	0x01DCD5C0 TBNZ X8, 0x0, 0x1DCD5D8
	0x01DCD5C4 ADRP X0, 0x2326000
	0x01DCD5C8 LDR X0, [X0 + 0x988]
	0x01DCD5CC BL 0x1C16CF4
	0x01DCD5D0 MOVZ W8, 0x1
	0x01DCD5D4 STRB W8, [X21 + 0xBBF]
	0x01DCD5D8 LDR X20, [X20 + 0x30]
	0x01DCD5DC MOV W1, W19
	0x01DCD5E0 BL 0x1DCD3C0
	0x01DCD5E4 CBZ X20, 0x1DCD618
	0x01DCD5E8 ADRP X9, 0x2326000
	0x01DCD5EC LDR X8, [X20]
	0x01DCD5F0 LDR X9, [X9 + 0x988]
	0x01DCD5F4 CMP X0, 0x0
	0x01DCD5F8 LDR X3, [X8 + 0x558]
	0x01DCD5FC LDR X9, [X9]
	0x01DCD600 LDR X2, [X8 + 0x560]
	0x01DCD604 CSEL X1, X9, X0, EQ
	0x01DCD608 MOV X0, X20
	0x01DCD60C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], D11
	003 Move [X31+104], D10
	004 Move [X31+112], D9
	005 Move [X31+120], D8
	006 Move [X31+128], X30
	007 Move [X31+136], X25
	008 Move [X31+144], X24
	009 Move [X31+152], X23
	010 Move [X31+160], X22
	011 Move [X31+168], X21
	012 Move [X31+176], X20
	013 Move [X31+184], X19
	014 Move X20, 0x260C000
	015 Move W8, [X20+3001]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {53}
	021 Move X0, 0x232C000
	022 Move X0, [X0+784]
	023 Call 0x1C17CF4
	024 Move X0, 0x232C000
	025 Move X0, [X0+792]
	026 Call 0x1C17CF4
	027 Move X0, 0x232C000
	028 Move X0, [X0+800]
	029 Call 0x1C17CF4
	030 Move X0, 0x232C000
	031 Move X0, [X0+808]
	032 Call 0x1C17CF4
	033 Move X0, 0x232C000
	034 Move X0, [X0+816]
	035 Call 0x1C17CF4
	036 Move X0, 0x232C000
	037 Move X0, [X0+752]
	038 Call 0x1C17CF4
	039 Move X0, 0x2329000
	040 Move X0, [X0+2464]
	041 Call 0x1C17CF4
	042 Move X0, 0x2327000
	043 Move X0, [X0+1432]
	044 Call 0x1C17CF4
	045 Move X0, 0x232C000
	046 Move X0, [X0+760]
	047 Call 0x1C17CF4
	048 Move X0, 0x232C000
	049 Move X0, [X0+824]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X20+3001], W8
	053 Move X0, X19
	054 Move X1, X31
	055 Move [X31+80], X31
	056 Move [X31+88], X31
	057 Move [X31+32], X31
	058 Move [X31+40], X31
	059 Move [X31+48], X31
	060 Move [X31+24], X31
	061 Call SimulationBehaviour.Render, X0
	062 Move X0, [X19+192]
	063 Compare X0, 0
	064 JumpIfEqual {349}
	065 Move W2, 1
	066 Move X1, X19
	067 Move X3, X31
	068 Call ChangeDetector.DetectChanges, X0, X1, X2
	069 Move [X31+64], X0
	070 Move [X31+72], X1
	071 Add X0, X31, 64
	072 Move X1, X31
	073 Call Enumerable.GetEnumerator, X0
	074 Move [X31+80], X0
	075 Move [X31+88], X1
	076 Add X0, X31, 80
	077 Move X1, X31
	078 Call Enumerator.MoveNext, X0
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {132}
	083 Move X21, 0x232C000
	084 Move X22, 0x232C000
	085 Move X23, 0x232C000
	086 Move X24, 0x232C000
	087 Move X21, [X21+824]
	088 Move X22, [X22+760]
	089 Move X23, [X23+808]
	090 Move X24, [X24+752]
	091 Add X0, X31, 80
	092 Move X1, X31
	093 Call Enumerator.get_Current, X0
	094 Move X1, [X21]
	095 Move X2, X31
	096 Call String.op_Equality, X0, X1
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {125}
	101 Move X0, X19
	102 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	103 Move X8, [X22]
	104 Move W20, W0
	105 Move W9, [X8+224]
	106 Compare W9, 0
	107 JumpIfNotEqual {111}
	108 Move X0, X8
	109 Call 0x1C17DFC
	110 Move X8, [X22]
	111 Move X8, [X8+184]
	112 Move X0, [X8]
	113 Compare X0, 0
	114 JumpIfEqual {363}
	115 Move TEMP, X20
	116 And TEMP, TEMP, -2147483648
	117 Compare TEMP, -2147483648
	118 JumpIfEqual {122}
	119 Move X2, [X23]
	120 Move X1, X19
	121 Call HashSet`1<Object>.Add, X0, X1
	122 Move X2, [X24]
	123 Move X1, X19
	124 Call HashSet`1<Object>.Remove, X0, X1
	125 Add X0, X31, 80
	126 Move X1, X31
	127 Call Enumerator.MoveNext, X0
	128 Move TEMP, X0
	129 And TEMP, TEMP, 1
	130 Compare TEMP, 1
	131 JumpIfEqual {91}
	132 Move X0, X19
	133 Call PlayerWatch.get_IsMine, X0
	134 Move TEMP, X0
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfNotEqual {349}
	138 Move X0, X19
	139 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	140 Move TEMP, X0
	141 And TEMP, TEMP, -2147483648
	142 Compare TEMP, -2147483648
	143 JumpIfEqual {145}
	144 Move X20, X31
	145 Move X20, 0x232C000
	146 Move X20, [X20+760]
	147 Move X0, [X20]
	148 Move W8, [X0+224]
	149 Compare W8, 0
	150 JumpIfNotEqual {153}
	151 Call 0x1C17DFC
	152 Move X0, [X20]
	153 Move X8, [X0+184]
	154 Move X0, [X8]
	155 Compare X0, 0
	156 JumpIfEqual {363}
	157 Move X8, 0x232C000
	158 Move X8, [X8+816]
	159 Move X1, [X8]
	160 Add X8, X31, 0
	161 Call HashSet`1<Object>.GetEnumerator, X0
	162 Move V0, [X31]
	163 Move X8, [X31+16]
	164 Move X23, 0x232C000
	165 Move X24, 0x2327000
	166 Move X23, [X23+792]
	167 Move X24, [X24+1432]
	168 Move [X31+2], V0
	169 Move [X31+48], X8
	170 Move X25, 0x2329000
	171 Move X25, [X25+2464]
	172 Move W9, 0x7F800000
	173 Move X20, X31
	174 Move S11, W9
	175 Move X1, [X23]
	176 Add X0, X31, 32
	177 Call Enumerator<Object>.MoveNext, X0
	178 Move TEMP, X0
	179 And TEMP, TEMP, 1
	180 Compare TEMP, 1
	181 JumpIfNotEqual {272}
	182 Move X0, [X24]
	183 Move X22, [X31+48]
	184 Move W8, [X0+224]
	185 Compare W8, 0
	186 JumpIfNotEqual {188}
	187 Call 0x1C17DFC
	188 Move X0, X22
	189 Move X1, X31
	190 Move X2, X31
	191 Call Object.op_Equality, X0, X1
	192 Move TEMP, X0
	193 And TEMP, TEMP, 1
	194 Compare TEMP, 1
	195 JumpIfEqual {175}
	196 Compare X22, 0
	197 JumpIfEqual {364}
	198 Move X0, X22
	199 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	200 Move W21, W0
	201 Move TEMP, X0
	202 And TEMP, TEMP, -2147483648
	203 Compare TEMP, -2147483648
	204 JumpIfEqual {175}
	205 Move X0, X22
	206 Call PlayerWatch.get_channel, X0
	207 Move W22, W0
	208 Move X0, X19
	209 Call PlayerWatch.get_channel, X0
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move X0, [X25]
	212 Move W8, [X0+224]
	213 Compare W8, 0
	214 JumpIfNotEqual {216}
	215 Call 0x1C17DFC
	216 Add X1, X31, 24
	217 Move W0, W21
	218 Move X2, X31
	219 Call NetPlayer.TryGetPlayerByID, X0, X1
	220 Move TEMP, X0
	221 And TEMP, TEMP, 1
	222 Compare TEMP, 1
	223 JumpIfNotEqual {175}
	224 Move X0, [X31+24]
	225 Compare X0, 0
	226 JumpIfEqual {365}
	227 Move X1, X31
	228 Call NetPlayer.get_IsMine, X0
	229 Move TEMP, X0
	230 And TEMP, TEMP, 1
	231 Compare TEMP, 1
	232 JumpIfEqual {175}
	233 Move X0, [X31+24]
	234 Compare X0, 0
	235 JumpIfEqual {366}
	236 Move X1, X31
	237 Call NetPlayer.get_isMuted, X0
	238 Move TEMP, X0
	239 And TEMP, TEMP, 1
	240 Compare TEMP, 1
	241 JumpIfEqual {175}
	242 Move X0, [X31+24]
	243 Compare X0, 0
	244 JumpIfEqual {367}
	245 Move X1, X31
	246 Call Component.get_transform, X0
	247 Compare X0, 0
	248 JumpIfEqual {368}
	249 Move X1, X31
	250 Call Transform.get_position, X0
	251 Move V8, V0
	252 Move V9, V1
	253 Move V10, V2
	254 Move X0, X19
	255 Move X1, X31
	256 Call Component.get_transform, X0
	257 Compare X0, 0
	258 JumpIfEqual {369}
	259 Move X1, X31
	260 Call Transform.get_position, X0
	261 Subtract S0, S8, S0
	262 Subtract S1, S9, S1
	263 Subtract S2, S10, S2
	264 Multiply S0, S0, S0
	265 Multiply S1, S1, S1
	266 Add S0, S0, S1
	267 Multiply S1, S2, S2
	268 Add S0, S1, S0
	269 NotImplemented "Instruction FCMP not yet implemented."
	270 Move X20, [X31+24]
	271 Move V11, V0
	272 Move X8, 0x232C000
	273 Move X8, [X8+784]
	274 Add X0, X31, 32
	275 Move X1, [X8]
	276 Call Enumerator<Object>.Dispose, X0
	277 Move X22, 0x2327000
	278 Move X22, [X22+1432]
	279 Move X21, [X19+200]
	280 Move X0, [X22]
	281 Move W8, [X0+224]
	282 Compare W8, 0
	283 JumpIfNotEqual {285}
	284 Call 0x1C17DFC
	285 Move X0, X20
	286 Move X1, X21
	287 Move X2, X31
	288 Call Object.op_Inequality, X0, X1
	289 Move TEMP, X0
	290 And TEMP, TEMP, 1
	291 Compare TEMP, 1
	292 JumpIfNotEqual {349}
	293 Move X0, [X22]
	294 Move X21, [X19+200]
	295 Move W8, [X0+224]
	296 Compare W8, 0
	297 JumpIfNotEqual {299}
	298 Call 0x1C17DFC
	299 Move X0, X21
	300 Move X1, X31
	301 Move X2, X31
	302 Call Object.op_Inequality, X0, X1
	303 Move TEMP, X0
	304 And TEMP, TEMP, 1
	305 Compare TEMP, 1
	306 JumpIfNotEqual {315}
	307 Move X0, [X19+128]
	308 Compare X0, 0
	309 JumpIfEqual {363}
	310 Call WalkieTalkieSpeaker.StopPlayback, X0
	311 Move X0, [X19+128]
	312 Compare X0, 0
	313 JumpIfEqual {363}
	314 Call WalkieTalkieSpeaker.Unlink, X0
	315 Move X0, [X22]
	316 Move W8, [X0+224]
	317 Compare W8, 0
	318 JumpIfNotEqual {320}
	319 Call 0x1C17DFC
	320 Move X0, X20
	321 Move X1, X31
	322 Move X2, X31
	323 Call Object.op_Inequality, X0, X1
	324 Move TEMP, X0
	325 And TEMP, TEMP, 1
	326 Compare TEMP, 1
	327 JumpIfNotEqual {348}
	328 Compare X20, 0
	329 JumpIfEqual {363}
	330 Move X8, [X20+128]
	331 Compare X8, 0
	332 JumpIfEqual {363}
	333 Move X8, [X8+152]
	334 Compare X8, 0
	335 JumpIfEqual {363}
	336 Move X1, [X8+80]
	337 Compare X1, 0
	338 JumpIfEqual {347}
	339 Move X0, [X19+128]
	340 Compare X0, 0
	341 JumpIfEqual {363}
	342 Call WalkieTalkieSpeaker.Link, X0, X1
	343 Move X0, [X19+128]
	344 Compare X0, 0
	345 JumpIfEqual {363}
	346 Call WalkieTalkieSpeaker.StartPlayback, X0
	347 Move X20, X31
	348 Move [X19+200], X20
	349 Move X20, [X31+176]
	350 Move X19, [X31+184]
	351 Move X22, [X31+160]
	352 Move X21, [X31+168]
	353 Move X24, [X31+144]
	354 Move X23, [X31+152]
	355 Move X30, [X31+128]
	356 Move X25, [X31+136]
	357 Move D9, [X31+112]
	358 Move D8, [X31+120]
	359 Move D11, [X31+96]
	360 Move D10, [X31+104]
	361 Add X31, X31, 192
	362 Return 
	363 Call 0x1C17F20
	364 Call 0x1C17F20
	365 Call 0x1C17F20
	366 Call 0x1C17F20
	367 Call 0x1C17F20
	368 Call 0x1C17F20
	369 Call 0x1C17F20
	370 Move X21, X0
	371 NotImplemented "Instruction CMP not yet implemented."
	372 Move X0, X21
	373 Call 0x3EB2AD0
	374 Move X22, [X0]
	375 Call 0x3EB2AE0
	376 Move X8, 0x232C000
	377 Move X8, [X8+784]
	378 Add X0, X31, 32
	379 Move X1, [X8]
	380 Call Enumerator<Object>.Dispose, X0
	381 Compare X22, 0
	382 JumpIfEqual {277}
	383 Move X0, X22
	384 Call 0x1C17F18
	385 Move X22, X31
	386 Move X21, X0
	387 Move X8, 0x232C000
	388 Move X8, [X8+784]
	389 Move X1, [X8]
	390 Add X0, X31, 32
	391 Call Enumerator<Object>.Dispose, X0
	392 Compare X22, 0
	393 JumpIfNotEqual {396}
	394 Move X0, X21
	395 Call 0x1D2D690
	396 Move X0, X22
	397 Call 0x1C17F18
	398 Call 0x1991590

Method: System.Void .ctor()

Disassembly:
	0x01DCE0B8 MOV X0, X20
	0x01DCE0BC BL 0x1C5C6E0
	0x01DCE0C0 LDR X8, [X20 + 0x38]
	0x01DCE0C4 LDR X0, [X8 + 0x10]

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W8, TEMP
	004 Move X1, X31
	005 Move [X0+160], W8
	006 Call NetworkBehaviour..ctor, X0
	007 Return 

Method: System.Void .cctor()

Disassembly:
	0x01DCE0C8 LDRB W8, [X0 + 0x135]
	0x01DCE0CC TBNZ X8, 0x0, 0x1DCE0D4
	0x01DCE0D0 BL 0x1C5C684
	0x01DCE0D4 LDR W8, [X0 + 0xE0]
	0x01DCE0D8 CBNZ W8, 0x1DCE0E0
	0x01DCE0DC BL 0x1C16DFC
	0x01DCE0E0 LDR X8, [X20 + 0x38]
	0x01DCE0E4 LDR X0, [X8 + 0x10]
	0x01DCE0E8 LDRB W8, [X0 + 0x135]
	0x01DCE0EC TBNZ X8, 0x0, 0x1DCE0F4
	0x01DCE0F0 BL 0x1C5C684
	0x01DCE0F4 CBZ X19, 0x1DCE184
	0x01DCE0F8 ADRP X10, 0x232A000
	0x01DCE0FC LDR X9, [X0 + 0xB8]
	0x01DCE100 LDR X8, [X19]
	0x01DCE104 LDR X10, [X10 + 0x428]
	0x01DCE108 LDR X1, [X24]
	0x01DCE10C LDR X20, [X9]
	0x01DCE110 LDRH W9, [X8 + 0x12E]
	0x01DCE114 LDR X21, [X10]
	0x01DCE118 CBZ X9, 0x1DCE13C
	0x01DCE11C LDR X10, [X8 + 0xB0]
	0x01DCE120 ADD X10, X10, 0x8
	0x01DCE124 LDUR X11, [X10 - 0x8]
	0x01DCE128 CMP X11, X1
	0x01DCE12C B.EQ 0x1DCE14C
	0x01DCE130 SUBS X9, X9, 0x1
	0x01DCE134 ADD X10, X10, 0x10
	0x01DCE138 B.NE 0x1DCE124
	0x01DCE13C MOVZ W2, 0x1
	0x01DCE140 MOV X0, X19
	0x01DCE144 BL 0x1C5C788
	0x01DCE148 B 0x1DCE15C
	0x01DCE14C LDR W9, [X10]
	0x01DCE150 ADD W9, W9, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x260B000
	007 Move X22, 0x232B000
	008 Move X19, 0x232B000
	009 Move X20, 0x232B000
	010 Move W8, [X21+3002]
	011 Move X22, [X22+944]
	012 Move X19, [X19+952]
	013 Move X20, [X20+760]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x232B000
	019 Move X0, [X0+952]
	020 Call 0x1C17CF4
	021 Move X0, 0x232B000
	022 Move X0, [X0+944]
	023 Call 0x1C17CF4
	024 Move X0, 0x232B000
	025 Move X0, [X0+760]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3002], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X1, [X19]
	032 Move X19, X0
	033 Call HashSet`1<Object>..ctor, X0
	034 Move X8, [X20]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X8, [X8+184]
	038 Move [X8], X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01DCE154 ADD X8, X8, W9, 0x4, SXTW
	0x01DCE158 ADD X0, X8, 0x138
	0x01DCE15C LDP X5, X4, [X0]
	0x01DCE160 MOV X0, X19
	0x01DCE164 MOV X2, X21
	0x01DCE168 MOV X3, X20
	0x01DCE16C LDP X20, X19, [X31 + 0x30]
	0x01DCE170 LDP X22, X21, [X31 + 0x20]
	0x01DCE174 LDP X24, X23, [X31 + 0x10]
	0x01DCE178 MOVZ W1, 0x3
	0x01DCE17C LDR X30, [X31], #0x40
	0x01DCE180 BR X5
	0x01DCE184 BL 0x1C16F20
	0x01DCE188 STR X30, [X31 - 0x40]!

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, [X0+160]
	004 Move X19, X0
	005 Call PlayerWatch.set_transmittingPlayerObjectID, X0, X1
	006 Move W1, [X19+164]
	007 Move X0, X19
	008 Call PlayerWatch.set_channel, X0, X1
	009 Move W1, [X19+168]
	010 Move X0, X19
	011 Call PlayerWatch.set_moneyAmount, X0, X1
	012 Move W1, [X19+176]
	013 Move X0, X19
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Call PlayerWatch.set_display, X0, X1
	017 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01DCE18C STP X24, X23, [X31 + 0x10]
	0x01DCE190 STP X22, X21, [X31 + 0x20]
	0x01DCE194 STP X20, X19, [X31 + 0x30]
	0x01DCE198 ADRP X20, 0x260A000
	0x01DCE19C ADRP X21, 0x2329000
	0x01DCE1A0 ADRP X24, 0x2327000
	0x01DCE1A4 ADRP X23, 0x232A000
	0x01DCE1A8 LDRB W8, [X20 + 0xBCF]
	0x01DCE1AC LDR X21, [X21 + 0xAB8]
	0x01DCE1B0 LDR X24, [X24 + 0x278]
	0x01DCE1B4 LDR X23, [X23 + 0x430]
	0x01DCE1B8 MOV X19, X0
	0x01DCE1BC TBNZ X8, 0x0, 0x1DCE1EC
	0x01DCE1C0 ADRP X0, 0x2329000
	0x01DCE1C4 LDR X0, [X0 + 0xAB8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	005 Move [X19+160], W0
	006 Move X0, X19
	007 Call PlayerWatch.get_channel, X0
	008 Move [X19+164], W0
	009 Move X0, X19
	010 Call PlayerWatch.get_moneyAmount, X0
	011 Move [X19+168], W0
	012 Move X0, X19
	013 Call PlayerWatch.get_display, X0
	014 Move [X19+176], W0
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return 

Method: System.Void RPC_SetTransmittingPlayer@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01DCE1C8 BL 0x1C16CF4
	0x01DCE1CC ADRP X0, 0x2327000
	0x01DCE1D0 LDR X0, [X0 + 0x278]
	0x01DCE1D4 BL 0x1C16CF4
	0x01DCE1D8 ADRP X0, 0x232A000
	0x01DCE1DC LDR X0, [X0 + 0x430]
	0x01DCE1E0 BL 0x1C16CF4
	0x01DCE1E4 MOVZ W8, 0x1
	0x01DCE1E8 STRB W8, [X20 + 0xBCF]
	0x01DCE1EC LDR X1, [X21]
	0x01DCE1F0 MOV X0, X19
	0x01DCE1F4 BL 0x21A3894
	0x01DCE1F8 LDP X20, X21, [X19 + 0x30]
	0x01DCE1FC MOV X22, X0
	0x01DCE200 MOV X0, X19
	0x01DCE204 MOV X1, X31
	0x01DCE208 BL 0x3573914
	0x01DCE20C LDR X8, [X24]
	0x01DCE210 LDR X8, [X8 + 0xB8]
	0x01DCE214 LDR X19, [X8]
	0x01DCE218 LDR X8, [X23]
	0x01DCE21C MOV X23, X0
	0x01DCE220 MOV X0, X8
	0x01DCE224 BL 0x1C16F10
	0x01DCE228 MOVZ W6, 0x1
	0x01DCE22C MOV X1, X22
	0x01DCE230 MOV X2, X20
	0x01DCE234 MOV X3, X21
	0x01DCE238 MOV X4, X23
	0x01DCE23C MOV X5, X19
	0x01DCE240 MOV X7, X31
	0x01DCE244 MOV X24, X0
	0x01DCE248 BL 0x3570724
	0x01DCE24C MOV X0, X24
	0x01DCE250 LDP X20, X19, [X31 + 0x30]
	0x01DCE254 LDP X22, X21, [X31 + 0x20]
	0x01DCE258 LDP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x260B000
	006 Move W8, [X21+3003]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x232B000
	014 Move X0, [X0+760]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3003], W8
	018 Compare X19, 0
	019 JumpIfEqual {44}
	020 Move X8, 0x232B000
	021 Move X8, [X8+760]
	022 Move W9, 1
	023 Move W1, [X20+36]
	024 Move [X19+88], W9
	025 Move X9, [X19]
	026 Move X8, [X8]
	027 Move W11, [X9+304]
	028 Move W10, [X8+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X9, [X9+200]
	031 Add X9, X9, X10
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Call PlayerWatch.RPC_SetTransmittingPlayer, X0, X1
	040 Return 
	041 Move X0, X19
	042 Move X1, X8
	043 Call 0x1C181E0
	044 Call 0x1C17F20

