Type: AnimalCompany.PlayerWatch

Method: System.Int32 get_transmittingPlayerObjectID()

Disassembly:
	0x01CC7834 BL 0x3A9B084
	0x01CC7838 CBZ X0, 0x1CC7A8C
	0x01CC783C FSUB S0, S8, S11
	0x01CC7840 FSUB S1, S9, S12
	0x01CC7844 FSUB S2, S10, S13
	0x01CC7848 FMUL S3, S0, S0
	0x01CC784C FMUL S4, S1, S1
	0x01CC7850 FMUL S5, S2, S2
	0x01CC7854 FADD S3, S3, S4
	0x01CC7858 FADD S3, S5, S3
	0x01CC785C FSQRT S8, S3
	0x01CC7860 MOV X1, X31
	0x01CC7864 FDIV S9, S0, S8
	0x01CC7868 FDIV S10, S1, S8
	0x01CC786C FDIV S11, S2, S8
	0x01CC7870 BL 0x3AA7A54
	0x01CC7874 LDRB W9, [X19 + 0xD4]
	0x01CC7878 FMUL S0, S9, S0
	0x01CC787C FMUL S1, S10, S1
	0x01CC7880 ADRP X10, 0xFFFFFFFFFEDE5000
	0x01CC7884 CMP W9, 0x0
	0x01CC7888 FMUL S2, S11, S2
	0x01CC788C FMOV S3, 4
	0x01CC7890 FADD S0, S0, S1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2287000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2289000
	016 Move X0, [X0+1120]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2289000
	023 Move X0, [X0+1128]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_transmittingPlayerObjectID(System.Int32 value)

Disassembly:
	0x01CC7894 CSET W8, EQ
	0x01CC7898 ADD X10, X10, 0xF08
	0x01CC789C FMOV S4, 1
	0x01CC78A0 FMOV S5, -1
	0x01CC78A4 FMUL S1, S8, S3
	0x01CC78A8 FADD S2, S2, S0
	0x01CC78AC LDR V0, [X10, W8, UXTW]
	0x01CC78B0 FMIN S1, S1, S4
	0x01CC78B4 FADD S2, S2, S5
	0x01CC78B8 FMUL S1, S1, S2
	0x01CC78BC FADD S1, S1, S4
	0x01CC78C0 FCMP S1, S0
	0x01CC78C4 CSET W8, GT
	0x01CC78C8 CMP W9, W8
	0x01CC78CC B.EQ 0x1CC78E8
	0x01CC78D0 LDR X0, [X19 + 0xA0]
	0x01CC78D4 STRB W8, [X19 + 0xD4]
	0x01CC78D8 CBZ X0, 0x1CC7A8C
	0x01CC78DC FCMP S1, S0
	0x01CC78E0 CSET W1, GT
	0x01CC78E4 BL 0x1CC7C28
	0x01CC78E8 LDR X0, [X21]
	0x01CC78EC LDR W8, [X0 + 0xE0]
	0x01CC78F0 CBNZ W8, 0x1CC78F8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2287000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2289000
	016 Move X0, [X0+1120]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2289000
	023 Move X0, [X0+1136]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Int32 get_channel()

Disassembly:
	0x01CC78F4 BL 0x1B6E8F8
	0x01CC78F8 LDRB W8, [X22 + 0x44F]
	0x01CC78FC CBNZ W8, 0x1CC7914
	0x01CC7900 ADRP X0, 0x2287000
	0x01CC7904 LDR X0, [X0 + 0x198]
	0x01CC7908 BL 0x1B6E7F0
	0x01CC790C MOVZ W8, 0x1
	0x01CC7910 STRB W8, [X22 + 0x44F]
	0x01CC7914 LDR X0, [X21]
	0x01CC7918 LDR W8, [X0 + 0xE0]
	0x01CC791C CBNZ W8, 0x1CC7928
	0x01CC7920 BL 0x1B6E8F8
	0x01CC7924 LDR X0, [X21]
	0x01CC7928 ADRP X8, 0x2286000
	0x01CC792C LDR X8, [X8 + 0x478]
	0x01CC7930 LDR X9, [X0 + 0xB8]
	0x01CC7934 LDR X8, [X8]
	0x01CC7938 LDR X20, [X9]
	0x01CC793C LDR W10, [X8 + 0xE0]
	0x01CC7940 CBNZ W10, 0x1CC794C
	0x01CC7944 MOV X0, X8
	0x01CC7948 BL 0x1B6E8F8
	0x01CC794C MOV X0, X20
	0x01CC7950 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+4]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2287000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2289000
	016 Move X0, [X0+1144]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2289000
	023 Move X0, [X0+1152]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_channel(System.Int32 value)

Disassembly:
	0x01CC7954 MOV X2, X31
	0x01CC7958 BL 0x3A9D6EC
	0x01CC795C TBZ X0, 0x0, 0x1CC7A44
	0x01CC7960 LDR X0, [X21]
	0x01CC7964 LDR W8, [X0 + 0xE0]
	0x01CC7968 CBNZ W8, 0x1CC7970
	0x01CC796C BL 0x1B6E8F8
	0x01CC7970 LDRB W8, [X22 + 0x44F]
	0x01CC7974 CBNZ W8, 0x1CC798C
	0x01CC7978 ADRP X0, 0x2287000
	0x01CC797C LDR X0, [X0 + 0x198]
	0x01CC7980 BL 0x1B6E7F0
	0x01CC7984 MOVZ W8, 0x1
	0x01CC7988 STRB W8, [X22 + 0x44F]
	0x01CC798C LDR X0, [X21]
	0x01CC7990 LDR W8, [X0 + 0xE0]
	0x01CC7994 CBNZ W8, 0x1CC79A0
	0x01CC7998 BL 0x1B6E8F8
	0x01CC799C LDR X0, [X21]
	0x01CC79A0 LDR X8, [X0 + 0xB8]
	0x01CC79A4 LDR X8, [X8]
	0x01CC79A8 CBZ X8, 0x1CC7A8C
	0x01CC79AC LDR X0, [X8 + 0x78]
	0x01CC79B0 CBZ X0, 0x1CC7A8C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+4], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2287000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2289000
	016 Move X0, [X0+1144]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2289000
	023 Move X0, [X0+1160]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Int32 get_moneyAmount()

Disassembly:
	0x01CC79B4 MOV X1, X31
	0x01CC79B8 BL 0x3AA7658
	0x01CC79BC MOV X0, X19
	0x01CC79C0 MOV X1, X31
	0x01CC79C4 MOV V8.16B, V0.16B
	0x01CC79C8 MOV V9.16B, V1.16B
	0x01CC79CC MOV V10.16B, V2.16B
	0x01CC79D0 BL 0x3A9B084
	0x01CC79D4 CBZ X0, 0x1CC7A8C
	0x01CC79D8 MOV X1, X31
	0x01CC79DC BL 0x3AA7658
	0x01CC79E0 ADRP X8, 0xFFFFFFFFFEDE2000
	0x01CC79E4 FSUB S0, S8, S0
	0x01CC79E8 FSUB S1, S9, S1
	0x01CC79EC LDR V3, [X8 + 0xDE0]
	0x01CC79F0 FSUB S2, S10, S2
	0x01CC79F4 FMUL S0, S0, S0
	0x01CC79F8 FMUL S1, S1, S1
	0x01CC79FC FADD S0, S0, S1
	0x01CC7A00 FMUL S1, S2, S2
	0x01CC7A04 FADD S0, S1, S0
	0x01CC7A08 FCMP S0, S3
	0x01CC7A0C B.PL 0x1CC7A44
	0x01CC7A10 MOV X0, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2287000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2289000
	016 Move X0, [X0+1168]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2289000
	023 Move X0, [X0+1176]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_moneyAmount(System.Int32 value)

Disassembly:
	0x01CC7A14 BL 0x3AA47CC
	0x01CC7A18 LDR V1, [X19 + 0xD8]
	0x01CC7A1C ADRP X8, 0xFFFFFFFFFEDE2000
	0x01CC7A20 LDR V2, [X8 + 0xD30]
	0x01CC7A24 FSUB S0, S0, S1
	0x01CC7A28 FCMP S0, S2
	0x01CC7A2C B.LE 0x1CC7A38
	0x01CC7A30 MOV X0, X19
	0x01CC7A34 BL 0x1CC7CF4
	0x01CC7A38 MOV X0, X31
	0x01CC7A3C BL 0x3AA47CC
	0x01CC7A40 STR S0, [X19 + 0xD8]
	0x01CC7A44 LDP X20, X19, [X31 + 0x60]
	0x01CC7A48 LDP X22, X21, [X31 + 0x50]
	0x01CC7A4C LDR X30, [X31 + 0x40]
	0x01CC7A50 LDP D9, D8, [X31 + 0x30]
	0x01CC7A54 LDP D11, D10, [X31 + 0x20]
	0x01CC7A58 LDP D13, D12, [X31 + 0x10]
	0x01CC7A5C LDP D15, D14, [X31], #0x70
	0x01CC7A60 RET
	0x01CC7A64 LDR X8, [X19 + 0x80]
	0x01CC7A68 CBZ X8, 0x1CC7A8C
	0x01CC7A6C LDR X8, [X8 + 0x40]
	0x01CC7A70 CBZ X8, 0x1CC7A8C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2287000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2289000
	016 Move X0, [X0+1168]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2289000
	023 Move X0, [X0+1184]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: AnimalCompany.PlayerWatch/WatchDisplay get_display()

Disassembly:
	0x01CC7A74 LDR X8, [X8 + 0x20]
	0x01CC7A78 CBZ X8, 0x1CC7A84
	0x01CC7A7C LDR W1, [X8]
	0x01CC7A80 B 0x1CC76C0
	0x01CC7A84 MOV W1, W31
	0x01CC7A88 B 0x1CC76C0
	0x01CC7A8C BL 0x1B6EA1C
	0x01CC7A90 STP X30, X21, [X31 - 0x20]!
	0x01CC7A94 STP X20, X19, [X31 + 0x10]
	0x01CC7A98 ADRP X21, 0x255C000
	0x01CC7A9C LDRB W8, [X21 + 0x564]
	0x01CC7AA0 MOV W20, W1
	0x01CC7AA4 MOV X19, X0
	0x01CC7AA8 TBNZ X8, 0x0, 0x1CC7ACC
	0x01CC7AAC ADRP X0, 0x2287000
	0x01CC7AB0 LDR X0, [X0 + 0x1C0]
	0x01CC7AB4 BL 0x1B6E7F0
	0x01CC7AB8 ADRP X0, 0x2288000
	0x01CC7ABC LDR X0, [X0 + 0x500]
	0x01CC7AC0 BL 0x1B6E7F0
	0x01CC7AC4 MOVZ W8, 0x1
	0x01CC7AC8 STRB W8, [X21 + 0x564]
	0x01CC7ACC LDRB W8, [X19 + 0x58]
	0x01CC7AD0 CBZ W8, 0x1CC7AEC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+12]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2287000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2289000
	016 Move X0, [X0+1192]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2289000
	023 Move X0, [X0+1200]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_display(AnimalCompany.PlayerWatch/WatchDisplay value)

Disassembly:
	0x01CC7AD4 STRB W31, [X19 + 0x58]
	0x01CC7AD8 MOV X0, X19
	0x01CC7ADC MOV W1, W20
	0x01CC7AE0 LDP X20, X19, [X31 + 0x10]
	0x01CC7AE4 LDP X30, X21, [X31], #0x20
	0x01CC7AE8 B 0x1CC6894
	0x01CC7AEC ADRP X21, 0x2287000
	0x01CC7AF0 LDR X21, [X21 + 0x1C0]
	0x01CC7AF4 LDR X0, [X21]
	0x01CC7AF8 LDR W8, [X0 + 0xE0]
	0x01CC7AFC CBNZ W8, 0x1CC7B04
	0x01CC7B00 BL 0x1B6E8F8
	0x01CC7B04 MOV X0, X19
	0x01CC7B08 MOV X1, X31
	0x01CC7B0C BL 0x1D697C8
	0x01CC7B10 LDR X0, [X19 + 0x38]
	0x01CC7B14 CBZ X0, 0x1CC7C24
	0x01CC7B18 MOV X1, X31
	0x01CC7B1C BL 0x1D87040
	0x01CC7B20 CMP W0, 0x4
	0x01CC7B24 B.NE 0x1CC7B34
	0x01CC7B28 LDP X20, X19, [X31 + 0x10]
	0x01CC7B2C LDP X30, X21, [X31], #0x20
	0x01CC7B30 RET

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+12], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2287000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2289000
	016 Move X0, [X0+1192]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2289000
	023 Move X0, [X0+1208]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Boolean get_IsTransmitting()

Disassembly:
	0x01CC7B34 LDR X0, [X19 + 0x40]
	0x01CC7B38 CBZ X0, 0x1CC7C24
	0x01CC7B3C MOV X1, X31
	0x01CC7B40 BL 0x1D9F538
	0x01CC7B44 TBNZ X0, 0x1, 0x1CC7B80
	0x01CC7B48 LDR X0, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	003 NotImplemented "Instruction ORN not yet implemented."
	004 Move W0, W8
	005 ShiftRight W0, 31
	006 And W0, W0, 0x7FFFFFFF
	007 Move X30, [X31+16]
	008 Return X0

Method: System.Boolean get_IsMine()

Disassembly:
	0x01CC7B4C LDR X19, [X19 + 0x40]
	0x01CC7B50 LDR W8, [X0 + 0xE0]
	0x01CC7B54 CBNZ W8, 0x1CC7B5C
	0x01CC7B58 BL 0x1B6E8F8
	0x01CC7B5C ADRP X8, 0x2288000
	0x01CC7B60 LDR X8, [X8 + 0x500]
	0x01CC7B64 MOV X1, X19
	0x01CC7B68 LDP X20, X19, [X31 + 0x10]
	0x01CC7B6C MOVZ W2, 0x2
	0x01CC7B70 LDR X0, [X8]
	0x01CC7B74 MOV X3, X31
	0x01CC7B78 LDP X30, X21, [X31], #0x20
	0x01CC7B7C B 0x1D69640
	0x01CC7B80 TBNZ X0, 0x0, 0x1CC7AD8
	0x01CC7B84 LDR X8, [X19 + 0x38]
	0x01CC7B88 CBZ X8, 0x1CC7C24
	0x01CC7B8C LDR X0, [X8 + 0x50]
	0x01CC7B90 CBZ X0, 0x1CC7C24
	0x01CC7B94 MOV X1, X31
	0x01CC7B98 BL 0x1DBEFE4
	0x01CC7B9C TBZ X0, 0x0, 0x1CC7B28
	0x01CC7BA0 LDR X8, [X19 + 0x38]
	0x01CC7BA4 CBZ X8, 0x1CC7C24
	0x01CC7BA8 LDR X0, [X8 + 0x50]
	0x01CC7BAC MOVZ W1, 0xC
	0x01CC7BB0 MOV X2, X31
	0x01CC7BB4 BL 0x1DD601C
	0x01CC7BB8 MOV X21, X0
	0x01CC7BBC MOVZ W0, 0x1
	0x01CC7BC0 MOV X1, X31
	0x01CC7BC4 BL 0x1D29EBC
	0x01CC7BC8 LDR X8, [X19 + 0x40]
	0x01CC7BCC CBZ X8, 0x1CC7C24
	0x01CC7BD0 LDR X8, [X8 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x255D000
	006 Move X20, 0x2287000
	007 Move W8, [X21+1374]
	008 Move X20, [X20+1144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2287000
	015 Move X0, [X0+1144]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1374], W8
	019 Move X0, [X20]
	020 Move X20, [X19+64]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1B6F8F8
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {43}
	033 Move X0, [X19+64]
	034 Compare X0, 0
	035 JumpIfEqual {49}
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X1, X31
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Call NetworkObject.get_HasInputAuthority, X0
	042 Return X0
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move W0, W31
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return X0
	049 Call 0x1B6FA1C

Method: System.Void Awake()

Disassembly:
	0x01CC7BD4 CBZ X8, 0x1CC7BE0
	0x01CC7BD8 LDR W0, [X8]
	0x01CC7BDC B 0x1CC7BE4
	0x01CC7BE0 MOV X0, X31
	0x01CC7BE4 LDR W1, [X19 + 0x68]
	0x01CC7BE8 MOVZ W2, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+160]
	003 Compare X0, 0
	004 JumpIfEqual {6}
	005 Move X30, [X31+16]
	006 Call 0x1B6FA1C

Method: System.Void Start()

Disassembly:
	0x01CC7C30 ADRP X21, 0x255C000
	0x01CC7C34 LDRB W8, [X21 + 0x56C]
	0x01CC7C38 MOV W20, W1
	0x01CC7C3C MOV X19, X0
	0x01CC7C40 TBNZ X8, 0x0, 0x1CC7C58
	0x01CC7C44 ADRP X0, 0x2288000
	0x01CC7C48 LDR X0, [X0 + 0x508]
	0x01CC7C4C BL 0x1B6E7F0
	0x01CC7C50 MOVZ W8, 0x1
	0x01CC7C54 STRB W8, [X21 + 0x56C]
	0x01CC7C58 LDR X19, [X19 + 0x20]
	0x01CC7C5C TBZ X20, 0x0, 0x1CC7C90
	0x01CC7C60 ADRP X20, 0x2288000
	0x01CC7C64 LDR X20, [X20 + 0x508]
	0x01CC7C68 LDR X0, [X20]
	0x01CC7C6C LDR W8, [X0 + 0xE0]
	0x01CC7C70 CBNZ W8, 0x1CC7C7C
	0x01CC7C74 BL 0x1B6E8F8
	0x01CC7C78 LDR X0, [X20]
	0x01CC7C7C LDR X10, [X0 + 0xB8]
	0x01CC7C80 ADD X8, X10, 0x50
	0x01CC7C84 ADD X9, X10, 0x54
	0x01CC7C88 ADD X10, X10, 0x58
	0x01CC7C8C B 0x1CC7CCC
	0x01CC7C90 ADRP X20, 0x255C000
	0x01CC7C94 LDRB W8, [X20 + 0x456]
	0x01CC7C98 CBNZ W8, 0x1CC7CB0
	0x01CC7C9C ADRP X0, 0x2286000
	0x01CC7CA0 LDR X0, [X0 + 0x480]
	0x01CC7CA4 BL 0x1B6E7F0
	0x01CC7CA8 MOVZ W8, 0x1
	0x01CC7CAC STRB W8, [X20 + 0x456]
	0x01CC7CB0 ADRP X8, 0x2286000
	0x01CC7CB4 LDR X8, [X8 + 0x480]
	0x01CC7CB8 LDR X8, [X8]
	0x01CC7CBC LDR X10, [X8 + 0xB8]
	0x01CC7CC0 ADD X8, X10, 0xC
	0x01CC7CC4 ADD X9, X10, 0x10
	0x01CC7CC8 ADD X10, X10, 0x14
	0x01CC7CCC CBZ X19, 0x1CC7CF0
	0x01CC7CD0 LDR V0, [X8]
	0x01CC7CD4 LDR V1, [X9]
	0x01CC7CD8 LDR V2, [X10]
	0x01CC7CDC MOV X0, X19
	0x01CC7CE0 LDP X20, X19, [X31 + 0x10]
	0x01CC7CE4 MOV X1, X31
	0x01CC7CE8 LDP X30, X21, [X31], #0x20
	0x01CC7CEC B 0x3AA7D18
	0x01CC7CF0 BL 0x1B6EA1C
	0x01CC7CF4 STP X30, X19, [X31 - 0x10]!
	0x01CC7CF8 MOV X19, X0
	0x01CC7CFC BL 0x1CC6A74
	0x01CC7D00 CBZ X19, 0x1CC7D48
	0x01CC7D04 CMP W0, 0x1
	0x01CC7D08 CSET W1, NE
	0x01CC7D0C MOV X0, X19
	0x01CC7D10 BL 0x1CC6AD4
	0x01CC7D14 ADRP X8, 0xFFFFFFFFFEDE2000
	0x01CC7D18 ADRP X9, 0xFFFFFFFFFEDE2000
	0x01CC7D1C LDR V0, [X8 + 0xA54]
	0x01CC7D20 LDR V1, [X9 + 0xAB0]
	0x01CC7D24 MOV W0, W31
	0x01CC7D28 BL 0x1CC220C
	0x01CC7D2C ADRP X8, 0xFFFFFFFFFEDE2000
	0x01CC7D30 ADRP X9, 0xFFFFFFFFFEDE2000
	0x01CC7D34 LDR V0, [X8 + 0xE20]
	0x01CC7D38 LDR V1, [X9 + 0xBE4]
	0x01CC7D3C MOVZ W0, 0x1
	0x01CC7D40 LDP X30, X19, [X31], #0x10
	0x01CC7D44 B 0x1CC220C
	0x01CC7D48 BL 0x1B6EA1C
	0x01CC7D4C STR X30, [X31 - 0x20]!
	0x01CC7D50 STP X20, X19, [X31 + 0x10]
	0x01CC7D54 MOV W19, W1
	0x01CC7D58 MOV X20, X0
	0x01CC7D5C BL 0x1CC6B4C
	0x01CC7D60 TBZ X0, 0x0, 0x1CC7D88
	0x01CC7D64 LDR X0, [X20 + 0xA0]
	0x01CC7D68 CBZ X0, 0x1CC7D94
	0x01CC7D6C SCVTF S0, W19
	0x01CC7D70 LDP X20, X19, [X31 + 0x10]
	0x01CC7D74 MOVZ W8, 0x42C80000
	0x01CC7D78 FMOV S1, W8
	0x01CC7D7C FDIV S0, S0, S1
	0x01CC7D80 LDR X30, [X31], #0x20
	0x01CC7D84 B 0x1CC7D98
	0x01CC7D88 LDP X20, X19, [X31 + 0x10]
	0x01CC7D8C LDR X30, [X31], #0x20
	0x01CC7D90 RET
	0x01CC7D94 BL 0x1B6EA1C
	0x01CC7D98 STR D8, [X31 - 0x30]!
	0x01CC7D9C STP X30, X21, [X31 + 0x10]
	0x01CC7DA0 STP X20, X19, [X31 + 0x20]
	0x01CC7DA4 ADRP X20, 0x255C000
	0x01CC7DA8 LDRB W8, [X20 + 0x575]
	0x01CC7DAC MOV V8.16B, V0.16B
	0x01CC7DB0 MOV X19, X0
	0x01CC7DB4 TBNZ X8, 0x0, 0x1CC7DCC
	0x01CC7DB8 ADRP X0, 0x2288000
	0x01CC7DBC LDR X0, [X0 + 0x508]
	0x01CC7DC0 BL 0x1B6E7F0
	0x01CC7DC4 MOVZ W8, 0x1
	0x01CC7DC8 STRB W8, [X20 + 0x575]
	0x01CC7DCC LDR X0, [X19 + 0x50]
	0x01CC7DD0 CBZ X0, 0x1CC7F1C
	0x01CC7DD4 MOV V0.16B, V8.16B
	0x01CC7DD8 MOV X1, X31
	0x01CC7DDC BL 0x3B47DC8
	0x01CC7DE0 ADRP X8, 0xFFFFFFFFFEDE2000
	0x01CC7DE4 LDR V0, [X8 + 0xA80]
	0x01CC7DE8 ADRP X21, 0x2288000
	0x01CC7DEC LDR X21, [X21 + 0x508]
	0x01CC7DF0 FCMP S8, S0
	0x01CC7DF4 B.PL 0x1CC7E58
	0x01CC7DF8 LDR X0, [X21]
	0x01CC7DFC LDR X20, [X19 + 0x50]
	0x01CC7E00 LDR W8, [X0 + 0xE0]
	0x01CC7E04 CBNZ W8, 0x1CC7E10
	0x01CC7E08 BL 0x1B6E8F8
	0x01CC7E0C LDR X0, [X21]
	0x01CC7E10 CBZ X20, 0x1CC7F1C
	0x01CC7E14 LDR X8, [X0 + 0xB8]
	0x01CC7E18 LDR X9, [X20]
	0x01CC7E1C MOV X0, X20
	0x01CC7E20 LDP S2, S3, [X8 + 0x38]
	0x01CC7E24 LDP S0, S1, [X8 + 0x30]
	0x01CC7E28 LDR X8, [X9 + 0x2A8]
	0x01CC7E2C LDR X1, [X9 + 0x2B0]
	0x01CC7E30 BLR X8
	0x01CC7E34 LDR X0, [X19 + 0x58]
	0x01CC7E38 CBZ X0, 0x1CC7F1C
	0x01CC7E3C LDR X8, [X21]
	0x01CC7E40 LDR X9, [X0]
	0x01CC7E44 LDR X8, [X8 + 0xB8]
	0x01CC7E48 LDR X2, [X9 + 0x2A8]
	0x01CC7E4C LDP S2, S3, [X8 + 0x38]
	0x01CC7E50 LDP S0, S1, [X8 + 0x30]
	0x01CC7E54 B 0x1CC7F08
	0x01CC7E58 LDR X0, [X21]
	0x01CC7E5C LDR X20, [X19 + 0x50]
	0x01CC7E60 LDR W8, [X0 + 0xE0]
	0x01CC7E64 CBNZ W8, 0x1CC7E70
	0x01CC7E68 BL 0x1B6E8F8
	0x01CC7E6C LDR X0, [X21]
	0x01CC7E70 ADRP X8, 0xFFFFFFFFFEDE2000
	0x01CC7E74 LDR V0, [X8 + 0xD30]
	0x01CC7E78 LDR X8, [X0 + 0xB8]
	0x01CC7E7C FCMP S8, S0
	0x01CC7E80 B.PL 0x1CC7EC8
	0x01CC7E84 CBZ X20, 0x1CC7F1C
	0x01CC7E88 LDR X9, [X20]
	0x01CC7E8C LDP S2, S3, [X8 + 0x48]
	0x01CC7E90 LDP S0, S1, [X8 + 0x40]
	0x01CC7E94 MOV X0, X20
	0x01CC7E98 LDR X8, [X9 + 0x2A8]
	0x01CC7E9C LDR X1, [X9 + 0x2B0]
	0x01CC7EA0 BLR X8
	0x01CC7EA4 LDR X0, [X19 + 0x58]
	0x01CC7EA8 CBZ X0, 0x1CC7F1C
	0x01CC7EAC LDR X8, [X21]
	0x01CC7EB0 LDR X9, [X0]
	0x01CC7EB4 LDR X8, [X8 + 0xB8]
	0x01CC7EB8 LDR X2, [X9 + 0x2A8]
	0x01CC7EBC LDP S2, S3, [X8 + 0x48]
	0x01CC7EC0 LDP S0, S1, [X8 + 0x40]
	0x01CC7EC4 B 0x1CC7F08
	0x01CC7EC8 CBZ X20, 0x1CC7F1C
	0x01CC7ECC LDR X9, [X20]
	0x01CC7ED0 LDP S2, S3, [X8 + 0x18]
	0x01CC7ED4 LDP S0, S1, [X8 + 0x10]
	0x01CC7ED8 MOV X0, X20
	0x01CC7EDC LDR X8, [X9 + 0x2A8]
	0x01CC7EE0 LDR X1, [X9 + 0x2B0]
	0x01CC7EE4 BLR X8
	0x01CC7EE8 LDR X0, [X19 + 0x58]
	0x01CC7EEC CBZ X0, 0x1CC7F1C
	0x01CC7EF0 LDR X8, [X21]
	0x01CC7EF4 LDR X9, [X0]
	0x01CC7EF8 LDR X8, [X8 + 0xB8]
	0x01CC7EFC LDR X2, [X9 + 0x2A8]
	0x01CC7F00 LDP S2, S3, [X8 + 0x18]
	0x01CC7F04 LDP S0, S1, [X8 + 0x10]
	0x01CC7F08 LDR X1, [X9 + 0x2B0]
	0x01CC7F0C LDP X20, X19, [X31 + 0x20]
	0x01CC7F10 LDP X30, X21, [X31 + 0x10]
	0x01CC7F14 LDR V8, [X31], #0x30
	0x01CC7F18 BR X2
	0x01CC7F1C BL 0x1B6EA1C
	0x01CC7F20 STR D8, [X31 - 0x20]!
	0x01CC7F24 STR X30, [X31 + 0x8]
	0x01CC7F28 STP X20, X19, [X31 + 0x10]
	0x01CC7F2C MOV V8.16B, V0.16B
	0x01CC7F30 MOV W19, W1
	0x01CC7F34 MOV X20, X0
	0x01CC7F38 BL 0x1CC6B4C
	0x01CC7F3C TBZ X0, 0x0, 0x1CC7F60
	0x01CC7F40 LDR X0, [X20 + 0xA0]
	0x01CC7F44 CBZ X0, 0x1CC7F70
	0x01CC7F48 AND W1, W19, 0x1
	0x01CC7F4C LDP X20, X19, [X31 + 0x10]
	0x01CC7F50 LDR X30, [X31 + 0x8]
	0x01CC7F54 MOV V0.16B, V8.16B
	0x01CC7F58 LDR V8, [X31], #0x20
	0x01CC7F5C B 0x1CC7F74
	0x01CC7F60 LDP X20, X19, [X31 + 0x10]
	0x01CC7F64 LDR X30, [X31 + 0x8]
	0x01CC7F68 LDR V8, [X31], #0x20
	0x01CC7F6C RET
	0x01CC7F70 BL 0x1B6EA1C
	0x01CC7F74 STR D8, [X31 - 0x30]!
	0x01CC7F78 STR X30, [X31 + 0x8]
	0x01CC7F7C STP X22, X21, [X31 + 0x10]
	0x01CC7F80 STP X20, X19, [X31 + 0x20]
	0x01CC7F84 ADRP X20, 0x255C000
	0x01CC7F88 ADRP X22, 0x2288000
	0x01CC7F8C LDRB W8, [X20 + 0x570]
	0x01CC7F90 LDR X22, [X22 + 0x508]
	0x01CC7F94 MOV V8.16B, V0.16B
	0x01CC7F98 MOV W21, W1
	0x01CC7F9C MOV X19, X0
	0x01CC7FA0 TBNZ X8, 0x0, 0x1CC7FB8
	0x01CC7FA4 ADRP X0, 0x2288000
	0x01CC7FA8 LDR X0, [X0 + 0x508]
	0x01CC7FAC BL 0x1B6E7F0
	0x01CC7FB0 MOVZ W8, 0x1
	0x01CC7FB4 STRB W8, [X20 + 0x570]
	0x01CC7FB8 LDR X0, [X22]
	0x01CC7FBC LDR X20, [X19 + 0x68]
	0x01CC7FC0 LDR W8, [X0 + 0xE0]
	0x01CC7FC4 CBNZ W8, 0x1CC7FD0
	0x01CC7FC8 BL 0x1B6E8F8
	0x01CC7FCC LDR X0, [X22]
	0x01CC7FD0 CBZ X20, 0x1CC8054
	0x01CC7FD4 ANDS W31, W21, 0x1
	0x01CC7FD8 MOVZ W9, 0x2C
	0x01CC7FDC MOVZ W10, 0x1C
	0x01CC7FE0 MOVZ W11, 0x28
	0x01CC7FE4 MOVZ W12, 0x18
	0x01CC7FE8 MOVZ W13, 0x24
	0x01CC7FEC CSEL X9, X10, X9, NE
	0x01CC7FF0 MOVZ W10, 0x14
	0x01CC7FF4 CSEL X11, X12, X11, NE
	0x01CC7FF8 MOVZ W12, 0x20
	0x01CC7FFC CSEL X10, X10, X13, NE
	0x01CC8000 MOVZ W13, 0x10
	0x01CC8004 LDR X8, [X0 + 0xB8]
	0x01CC8008 CSEL X12, X13, X12, NE
	0x01CC800C LDR X13, [X20]
	0x01CC8010 MOV X0, X20
	0x01CC8014 LDR V3, [X8, X9, LSL]
	0x01CC8018 LDR V2, [X8, X11, LSL]
	0x01CC801C LDR V1, [X8, X10, LSL]
	0x01CC8020 LDR V0, [X8, X12, LSL]
	0x01CC8024 LDR X8, [X13 + 0x2A8]
	0x01CC8028 LDR X1, [X13 + 0x2B0]
	0x01CC802C BLR X8
	0x01CC8030 LDR X0, [X19 + 0x60]
	0x01CC8034 CBZ X0, 0x1CC8054
	0x01CC8038 LDP X20, X19, [X31 + 0x20]
	0x01CC803C LDP X22, X21, [X31 + 0x10]
	0x01CC8040 LDR X30, [X31 + 0x8]
	0x01CC8044 MOV V0.16B, V8.16B
	0x01CC8048 MOV X1, X31
	0x01CC804C LDR V8, [X31], #0x30
	0x01CC8050 B 0x3B47DC8
	0x01CC8054 BL 0x1B6EA1C
	0x01CC8058 STR D8, [X31 - 0x20]!
	0x01CC805C STP X30, X19, [X31 + 0x10]
	0x01CC8060 MOV V8.16B, V0.16B
	0x01CC8064 MOV X19, X0
	0x01CC8068 BL 0x1CC6B4C
	0x01CC806C TBZ X0, 0x0, 0x1CC80A8
	0x01CC8070 LDR X0, [X19 + 0xA0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x255D000
	008 Move W8, [X20+1375]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {58}
	014 Move X0, 0x2288000
	015 Move X0, [X0+1736]
	016 Call 0x1B6F7F0
	017 Move X0, 0x2288000
	018 Move X0, [X0+3824]
	019 Call 0x1B6F7F0
	020 Move X0, 0x2289000
	021 Move X0, [X0+1216]
	022 Call 0x1B6F7F0
	023 Move X0, 0x2288000
	024 Move X0, [X0+368]
	025 Call 0x1B6F7F0
	026 Move X0, 0x2287000
	027 Move X0, [X0+1256]
	028 Call 0x1B6F7F0
	029 Move X0, 0x2287000
	030 Move X0, [X0+2976]
	031 Call 0x1B6F7F0
	032 Move X0, 0x2287000
	033 Move X0, [X0+2960]
	034 Call 0x1B6F7F0
	035 Move X0, 0x2288000
	036 Move X0, [X0+408]
	037 Call 0x1B6F7F0
	038 Move X0, 0x2289000
	039 Move X0, [X0+1224]
	040 Call 0x1B6F7F0
	041 Move X0, 0x2289000
	042 Move X0, [X0+1232]
	043 Call 0x1B6F7F0
	044 Move X0, 0x2289000
	045 Move X0, [X0+1240]
	046 Call 0x1B6F7F0
	047 Move X0, 0x2289000
	048 Move X0, [X0+1248]
	049 Call 0x1B6F7F0
	050 Move X0, 0x2289000
	051 Move X0, [X0+1256]
	052 Call 0x1B6F7F0
	053 Move X0, 0x2288000
	054 Move X0, [X0+1104]
	055 Call 0x1B6F7F0
	056 Move W8, 1
	057 Move [X20+1375], W8
	058 Move X0, X19
	059 Call PlayerWatch.get_IsMine, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {290}
	064 Move X8, 0x2287000
	065 Move X8, [X8+2960]
	066 Move X0, [X8]
	067 Call 0x1B6FA0C
	068 Move X8, 0x2289000
	069 Move X8, [X8+1232]
	070 Move X1, X19
	071 Move X3, X31
	072 Move X20, X0
	073 Move X2, [X8]
	074 Call ObserverDelegate..ctor, X0, X1, X2
	075 Move X8, 0x2287000
	076 Move X8, [X8+2976]
	077 Move W1, 1
	078 Move X0, [X8]
	079 Call 0x1B6F868
	080 Move X22, 0x2287000
	081 Move X22, [X22+1256]
	082 Move X21, X0
	083 Move X8, [X22]
	084 Move W9, [X8+224]
	085 Compare W9, 0
	086 JumpIfNotEqual {89}
	087 Move X0, X8
	088 Call 0x1B6F8F8
	089 Move X23, 0x255D000
	090 Move W8, [X23+1091]
	091 Compare W8, 0
	092 JumpIfNotEqual {98}
	093 Move X0, 0x2287000
	094 Move X0, [X0+1256]
	095 Call 0x1B6F7F0
	096 Move W8, 1
	097 Move [X23+1091], W8
	098 Move X0, [X22]
	099 Move W8, [X0+224]
	100 Compare W8, 0
	101 JumpIfNotEqual {104}
	102 Call 0x1B6F8F8
	103 Move X0, [X22]
	104 Move X8, [X0+184]
	105 Move X8, [X8]
	106 Compare X8, 0
	107 JumpIfEqual {297}
	108 Move X8, [X8+168]
	109 Compare X8, 0
	110 JumpIfEqual {297}
	111 Move X8, [X8+104]
	112 Compare X8, 0
	113 JumpIfEqual {297}
	114 Compare X21, 0
	115 JumpIfEqual {297}
	116 Move X22, [X8+72]
	117 Compare X22, 0
	118 JumpIfEqual {125}
	119 Move X8, [X21]
	120 Move X0, X22
	121 Move X1, [X8+64]
	122 Call 0x1B6F8FC
	123 Compare X0, 0
	124 JumpIfEqual {299}
	125 Move W8, [X21+24]
	126 Compare W8, 0
	127 JumpIfEqual {298}
	128 Move X0, X20
	129 Move X1, X21
	130 Move X2, X31
	131 Move [X21+32], X22
	132 Call App.RegisterObserver, X0, X1
	133 Move X22, 0x2288000
	134 Move X22, [X22+408]
	135 Move X0, [X22]
	136 Move W8, [X0+224]
	137 Compare W8, 0
	138 JumpIfNotEqual {141}
	139 Call 0x1B6F8F8
	140 Move X0, [X22]
	141 Move X23, 0x2288000
	142 Move X8, [X0+184]
	143 Move X23, [X23+3824]
	144 Move X20, [X8+48]
	145 Move X0, [X23]
	146 Call 0x1B6FA0C
	147 Move X8, 0x2289000
	148 Move X8, [X8+1240]
	149 Move X1, X19
	150 Move X3, X31
	151 Move X21, X0
	152 Move X2, [X8]
	153 Call Action`1<Int32>..ctor, X0, X1, X2
	154 Move X0, X20
	155 Move X1, X21
	156 Move X2, X31
	157 Call Delegate.Combine, X0, X1
	158 Compare X0, 0
	159 JumpIfEqual {177}
	160 Move X21, [X23]
	161 Move X20, X0
	162 Move X1, X21
	163 Call 0x1B6F8FC
	164 Compare X0, 0
	165 JumpIfEqual {251}
	166 Move X8, [X22]
	167 Move X8, [X8+184]
	168 Move [X8+48], X0
	169 Move X21, [X23]
	170 Move X0, X20
	171 Move X1, X21
	172 Call 0x1B6F8FC
	173 Compare X0, 0
	174 JumpIfEqual {251}
	175 Move X8, [X22]
	176 Move X8, [X8+184]
	177 Move X8, [X22]
	178 Move X8, [X8+184]
	179 Move [X8+48], X31
	180 Move X23, 0x2289000
	181 Move X20, [X8+56]
	182 Move X23, [X23+1216]
	183 Move X0, [X23]
	184 Call 0x1B6FA0C
	185 Move X8, 0x2289000
	186 Move X8, [X8+1248]
	187 Move X1, X19
	188 Move X3, X31
	189 Move X21, X0
	190 Move X2, [X8]
	191 Call Action`2<Boolean, Single>..ctor, X0, X1, X2
	192 Move X0, X20
	193 Move X1, X21
	194 Move X2, X31
	195 Call Delegate.Combine, X0, X1
	196 Compare X0, 0
	197 JumpIfEqual {215}
	198 Move X21, [X23]
	199 Move X20, X0
	200 Move X1, X21
	201 Call 0x1B6F8FC
	202 Compare X0, 0
	203 JumpIfEqual {251}
	204 Move X8, [X22]
	205 Move X8, [X8+184]
	206 Move [X8+56], X0
	207 Move X21, [X23]
	208 Move X0, X20
	209 Move X1, X21
	210 Call 0x1B6F8FC
	211 Compare X0, 0
	212 JumpIfEqual {251}
	213 Move X8, [X22]
	214 Move X8, [X8+184]
	215 Move X8, [X22]
	216 Move X8, [X8+184]
	217 Move [X8+56], X31
	218 Move X23, 0x2288000
	219 Move X20, [X8+64]
	220 Move X23, [X23+1736]
	221 Move X0, [X23]
	222 Call 0x1B6FA0C
	223 Move X8, 0x2289000
	224 Move X8, [X8+1256]
	225 Move X1, X19
	226 Move X3, X31
	227 Move X21, X0
	228 Move X2, [X8]
	229 Call Action`1<Single>..ctor, X0, X1, X2
	230 Move X0, X20
	231 Move X1, X21
	232 Move X2, X31
	233 Call Delegate.Combine, X0, X1
	234 Compare X0, 0
	235 JumpIfEqual {254}
	236 Move X21, [X23]
	237 Move X20, X0
	238 Move X1, X21
	239 Call 0x1B6F8FC
	240 Compare X0, 0
	241 JumpIfEqual {251}
	242 Move X8, [X22]
	243 Move X8, [X8+184]
	244 Move [X8+64], X0
	245 Move X21, [X23]
	246 Move X0, X20
	247 Move X1, X21
	248 Call 0x1B6F8FC
	249 Compare X0, 0
	250 JumpIfNotEqual {257}
	251 Move X0, X20
	252 Move X1, X21
	253 Call 0x1B6FCDC
	254 Move X8, [X22]
	255 Move X8, [X8+184]
	256 Move [X8+64], X31
	257 Move X22, 0x2288000
	258 Move X22, [X22+1104]
	259 Move X23, 0x2288000
	260 Move X8, [X22]
	261 Move X8, [X8+184]
	262 Move X23, [X23+368]
	263 Move X20, [X8+136]
	264 Move X0, [X23]
	265 Call 0x1B6FA0C
	266 Move X8, 0x2289000
	267 Move X8, [X8+1224]
	268 Move X1, X19
	269 Move X3, X31
	270 Move X21, X0
	271 Move X2, [X8]
	272 Call Action..ctor, X0, X1, X2
	273 Move X0, X20
	274 Move X1, X21
	275 Move X2, X31
	276 Call Delegate.Combine, X0, X1
	277 Compare X0, 0
	278 JumpIfEqual {287}
	279 Move X1, [X23]
	280 Move X8, [X0]
	281 NotImplemented "Instruction CMP not yet implemented."
	282 Move X8, [X22]
	283 Move X8, [X8+184]
	284 Move [X8+136], X0
	285 Move X8, [X0]
	286 NotImplemented "Instruction CMP not yet implemented."
	287 Move X8, [X22]
	288 Move X8, [X8+184]
	289 Move [X8+136], X0
	290 Move X20, [X31+32]
	291 Move X19, [X31+40]
	292 Move X22, [X31+16]
	293 Move X21, [X31+24]
	294 Move X30, [X31+48]
	295 Move X23, [X31+56]
	296 Return 
	297 Call 0x1B6FA1C
	298 Call 0x1B6FA24
	299 Call 0x1B6FA40
	300 Move X1, X31
	301 Call 0x1B6F8E8

Method: System.Void OnDestroy()

Disassembly:
	0x01CC8074 CBZ X0, 0x1CC80B4
	0x01CC8078 FMOV S0, 20
	0x01CC807C FMOV S1, 0.25
	0x01CC8080 FDIV S0, S8, S0
	0x01CC8084 LDP X30, X19, [X31 + 0x10]
	0x01CC8088 FMOV S2, 1
	0x01CC808C FMUL S0, S0, S1
	0x01CC8090 FMIN S1, S0, S2
	0x01CC8094 FCMP S0, 0x0
	0x01CC8098 FMOV S0, W31
	0x01CC809C FCSEL S0, S1, S0, PL
	0x01CC80A0 LDR V8, [X31], #0x20
	0x01CC80A4 B 0x1CC80B8
	0x01CC80A8 LDP X30, X19, [X31 + 0x10]
	0x01CC80AC LDR V8, [X31], #0x20
	0x01CC80B0 RET
	0x01CC80B4 BL 0x1B6EA1C
	0x01CC80B8 STR D8, [X31 - 0x30]!
	0x01CC80BC STP X30, X21, [X31 + 0x10]
	0x01CC80C0 STP X20, X19, [X31 + 0x20]
	0x01CC80C4 ADRP X20, 0x255B000
	0x01CC80C8 LDRB W8, [X20 + 0x571]
	0x01CC80CC MOV V8.16B, V0.16B
	0x01CC80D0 MOV X19, X0
	0x01CC80D4 TBNZ X8, 0x0, 0x1CC80EC
	0x01CC80D8 ADRP X0, 0x2287000
	0x01CC80DC LDR X0, [X0 + 0x508]
	0x01CC80E0 BL 0x1B6E7F0
	0x01CC80E4 MOVZ W8, 0x1
	0x01CC80E8 STRB W8, [X20 + 0x571]
	0x01CC80EC LDR X0, [X19 + 0x70]
	0x01CC80F0 CBZ X0, 0x1CC8234
	0x01CC80F4 MOV V0.16B, V8.16B
	0x01CC80F8 MOV X1, X31
	0x01CC80FC BL 0x3B47DC8
	0x01CC8100 ADRP X21, 0x2287000
	0x01CC8104 LDR X21, [X21 + 0x508]
	0x01CC8108 FMOV S0, 0.25
	0x01CC810C FCMP S8, S0
	0x01CC8110 B.LS 0x1CC8180
	0x01CC8114 LDR X0, [X21]
	0x01CC8118 LDR X20, [X19 + 0x78]
	0x01CC811C LDR W8, [X0 + 0xE0]
	0x01CC8120 CBNZ W8, 0x1CC812C
	0x01CC8124 BL 0x1B6E8F8
	0x01CC8128 LDR X0, [X21]
	0x01CC812C LDR X8, [X0 + 0xB8]
	0x01CC8130 FMOV S0, 0.75
	0x01CC8134 FCMP S8, S0
	0x01CC8138 B.LS 0x1CC81E0
	0x01CC813C CBZ X20, 0x1CC8234
	0x01CC8140 LDR X9, [X20]
	0x01CC8144 LDP S2, S3, [X8 + 0x48]
	0x01CC8148 LDP S0, S1, [X8 + 0x40]
	0x01CC814C MOV X0, X20
	0x01CC8150 LDR X8, [X9 + 0x2A8]
	0x01CC8154 LDR X1, [X9 + 0x2B0]
	0x01CC8158 BLR X8
	0x01CC815C LDR X0, [X19 + 0x70]
	0x01CC8160 CBZ X0, 0x1CC8234
	0x01CC8164 LDR X8, [X21]
	0x01CC8168 LDR X9, [X0]
	0x01CC816C LDR X8, [X8 + 0xB8]
	0x01CC8170 LDR X2, [X9 + 0x2A8]
	0x01CC8174 LDP S2, S3, [X8 + 0x48]
	0x01CC8178 LDP S0, S1, [X8 + 0x40]
	0x01CC817C B 0x1CC8220
	0x01CC8180 LDR X0, [X21]
	0x01CC8184 LDR X20, [X19 + 0x78]
	0x01CC8188 LDR W8, [X0 + 0xE0]
	0x01CC818C CBNZ W8, 0x1CC8198
	0x01CC8190 BL 0x1B6E8F8
	0x01CC8194 LDR X0, [X21]
	0x01CC8198 CBZ X20, 0x1CC8234
	0x01CC819C LDR X8, [X0 + 0xB8]
	0x01CC81A0 LDR X9, [X20]
	0x01CC81A4 MOV X0, X20
	0x01CC81A8 LDP S2, S3, [X8 + 0x18]
	0x01CC81AC LDP S0, S1, [X8 + 0x10]
	0x01CC81B0 LDR X8, [X9 + 0x2A8]
	0x01CC81B4 LDR X1, [X9 + 0x2B0]
	0x01CC81B8 BLR X8
	0x01CC81BC LDR X0, [X19 + 0x70]
	0x01CC81C0 CBZ X0, 0x1CC8234
	0x01CC81C4 LDR X8, [X21]
	0x01CC81C8 LDR X9, [X0]
	0x01CC81CC LDR X8, [X8 + 0xB8]
	0x01CC81D0 LDR X2, [X9 + 0x2A8]
	0x01CC81D4 LDP S2, S3, [X8 + 0x18]
	0x01CC81D8 LDP S0, S1, [X8 + 0x10]
	0x01CC81DC B 0x1CC8220
	0x01CC81E0 CBZ X20, 0x1CC8234
	0x01CC81E4 LDR X9, [X20]
	0x01CC81E8 LDP S2, S3, [X8 + 0x38]
	0x01CC81EC LDP S0, S1, [X8 + 0x30]
	0x01CC81F0 MOV X0, X20
	0x01CC81F4 LDR X8, [X9 + 0x2A8]
	0x01CC81F8 LDR X1, [X9 + 0x2B0]
	0x01CC81FC BLR X8
	0x01CC8200 LDR X0, [X19 + 0x70]
	0x01CC8204 CBZ X0, 0x1CC8234
	0x01CC8208 LDR X8, [X21]
	0x01CC820C LDR X9, [X0]
	0x01CC8210 LDR X8, [X8 + 0xB8]
	0x01CC8214 LDR X2, [X9 + 0x2A8]
	0x01CC8218 LDP S2, S3, [X8 + 0x38]
	0x01CC821C LDP S0, S1, [X8 + 0x30]
	0x01CC8220 LDR X1, [X9 + 0x2B0]
	0x01CC8224 LDP X20, X19, [X31 + 0x20]
	0x01CC8228 LDP X30, X21, [X31 + 0x10]
	0x01CC822C LDR V8, [X31], #0x30
	0x01CC8230 BR X2
	0x01CC8234 BL 0x1B6EA1C
	0x01CC8238 STP X30, X21, [X31 - 0x20]!
	0x01CC823C STP X20, X19, [X31 + 0x10]
	0x01CC8240 ADRP X20, 0x255B000
	0x01CC8244 LDRB W8, [X20 + 0x563]
	0x01CC8248 MOV X19, X0
	0x01CC824C TBNZ X8, 0x0, 0x1CC8264
	0x01CC8250 ADRP X0, 0x2286000
	0x01CC8254 LDR X0, [X0 + 0x198]
	0x01CC8258 BL 0x1B6E7F0
	0x01CC825C MOVZ W8, 0x1
	0x01CC8260 STRB W8, [X20 + 0x563]
	0x01CC8264 MOV X0, X19
	0x01CC8268 BL 0x1CC6B4C
	0x01CC826C TBZ X0, 0x0, 0x1CC8320
	0x01CC8270 MOV X0, X19
	0x01CC8274 BL 0x1CC68F4
	0x01CC8278 MOVZ W9, 0x6667
	0x01CC827C ADD W8, W0, 0x1
	0x01CC8280 MOVK W9, 0x66660000
	0x01CC8284 SMADDL X9, X8, X9, X31
	0x01CC8288 UBFM X10, X9, 0x3F, 0x3F
	0x01CC828C SBFM X9, X9, 0x22, 0x3F
	0x01CC8290 ADD W9, W9, W10
	0x01CC8294 MOVZ W10, 0xA
	0x01CC8298 MSUB W1, W9, W10, W8
	0x01CC829C MOV X0, X19
	0x01CC82A0 BL 0x1CC6954
	0x01CC82A4 ADRP X20, 0x2286000
	0x01CC82A8 LDR X20, [X20 + 0x198]
	0x01CC82AC LDR X0, [X20]
	0x01CC82B0 LDR W8, [X0 + 0xE0]
	0x01CC82B4 CBNZ W8, 0x1CC82BC
	0x01CC82B8 BL 0x1B6E8F8
	0x01CC82BC ADRP X21, 0x255B000
	0x01CC82C0 LDRB W8, [X21 + 0x44F]
	0x01CC82C4 CBNZ W8, 0x1CC82DC
	0x01CC82C8 ADRP X0, 0x2286000
	0x01CC82CC LDR X0, [X0 + 0x198]
	0x01CC82D0 BL 0x1B6E7F0
	0x01CC82D4 MOVZ W8, 0x1
	0x01CC82D8 STRB W8, [X21 + 0x44F]
	0x01CC82DC LDR X0, [X20]
	0x01CC82E0 LDR W8, [X0 + 0xE0]
	0x01CC82E4 CBNZ W8, 0x1CC82F0
	0x01CC82E8 BL 0x1B6E8F8
	0x01CC82EC LDR X0, [X20]
	0x01CC82F0 LDR X8, [X0 + 0xB8]
	0x01CC82F4 MOV X0, X19
	0x01CC82F8 LDR X20, [X8]
	0x01CC82FC BL 0x1CC68F4
	0x01CC8300 CBZ X20, 0x1CC832C
	0x01CC8304 MOV W1, W0
	0x01CC8308 MOV X0, X20
	0x01CC830C BL 0x1CC2DB8
	0x01CC8310 MOV X0, X19
	0x01CC8314 LDP X20, X19, [X31 + 0x10]
	0x01CC8318 LDP X30, X21, [X31], #0x20
	0x01CC831C B 0x1CC8330
	0x01CC8320 LDP X20, X19, [X31 + 0x10]
	0x01CC8324 LDP X30, X21, [X31], #0x20
	0x01CC8328 RET
	0x01CC832C BL 0x1B6EA1C
	0x01CC8330 STP X30, X19, [X31 - 0x10]!
	0x01CC8334 LDR X19, [X0 + 0xA0]
	0x01CC8338 BL 0x1CC68F4
	0x01CC833C CBZ X19, 0x1CC8350
	0x01CC8340 MOV W1, W0
	0x01CC8344 MOV X0, X19
	0x01CC8348 LDP X30, X19, [X31], #0x10
	0x01CC834C B 0x1CC8354
	0x01CC8350 BL 0x1B6EA1C
	0x01CC8354 SUB X31, X31, 0x40
	0x01CC8358 STP X30, X23, [X31 + 0x10]
	0x01CC835C STP X22, X21, [X31 + 0x20]
	0x01CC8360 STP X20, X19, [X31 + 0x30]
	0x01CC8364 ADRP X23, 0x255B000
	0x01CC8368 ADRP X22, 0x2285000
	0x01CC836C ADRP X21, 0x2287000
	0x01CC8370 LDRB W8, [X23 + 0x56D]
	0x01CC8374 LDR X22, [X22 + 0x5F8]
	0x01CC8378 LDR X21, [X21 + 0x510]
	0x01CC837C MOV W20, W1
	0x01CC8380 MOV X19, X0
	0x01CC8384 TBNZ X8, 0x0, 0x1CC83A8
	0x01CC8388 ADRP X0, 0x2285000
	0x01CC838C LDR X0, [X0 + 0x5F8]
	0x01CC8390 BL 0x1B6E7F0
	0x01CC8394 ADRP X0, 0x2287000
	0x01CC8398 LDR X0, [X0 + 0x510]
	0x01CC839C BL 0x1B6E7F0
	0x01CC83A0 MOVZ W8, 0x1
	0x01CC83A4 STRB W8, [X23 + 0x56D]
	0x01CC83A8 LDR X0, [X22]
	0x01CC83AC LDR X19, [X19 + 0x38]
	0x01CC83B0 ADD X1, X31, 0xC
	0x01CC83B4 STR W20, [X31 + 0xC]
	0x01CC83B8 BL 0x1B6E900
	0x01CC83BC LDR X8, [X21]
	0x01CC83C0 MOV X1, X0
	0x01CC83C4 MOV X2, X31
	0x01CC83C8 MOV X0, X8
	0x01CC83CC BL 0x3087E18
	0x01CC83D0 CBZ X19, 0x1CC8400
	0x01CC83D4 LDR X8, [X19]
	0x01CC83D8 MOV X1, X0
	0x01CC83DC MOV X0, X19
	0x01CC83E0 LDR X9, [X8 + 0x558]
	0x01CC83E4 LDR X2, [X8 + 0x560]
	0x01CC83E8 BLR X9
	0x01CC83EC LDP X20, X19, [X31 + 0x30]
	0x01CC83F0 LDP X22, X21, [X31 + 0x20]
	0x01CC83F4 LDP X30, X23, [X31 + 0x10]
	0x01CC83F8 ADD X31, X31, 0x40
	0x01CC83FC RET
	0x01CC8400 BL 0x1B6EA1C
	0x01CC8404 STP X30, X23, [X31 - 0x30]!
	0x01CC8408 STP X22, X21, [X31 + 0x10]
	0x01CC840C STP X20, X19, [X31 + 0x20]
	0x01CC8410 ADRP X23, 0x255B000
	0x01CC8414 LDRB W8, [X23 + 0x56F]
	0x01CC8418 MOV W22, W3
	0x01CC841C MOV W21, W2
	0x01CC8420 MOV W20, W1
	0x01CC8424 MOV X19, X0
	0x01CC8428 TBNZ X8, 0x0, 0x1CC8440
	0x01CC842C ADRP X0, 0x2287000
	0x01CC8430 LDR X0, [X0 + 0x518]
	0x01CC8434 BL 0x1B6E7F0
	0x01CC8438 MOVZ W8, 0x1
	0x01CC843C STRB W8, [X23 + 0x56F]
	0x01CC8440 CMP W20, W21
	0x01CC8444 B.LE 0x1CC8490
	0x01CC8448 TBZ X22, 0x0, 0x1CC8490
	0x01CC844C LDR X1, [X19 + 0xC0]
	0x01CC8450 CBZ X1, 0x1CC8460
	0x01CC8454 MOV X0, X19
	0x01CC8458 MOV X2, X31
	0x01CC845C BL 0x3A9EAE8
	0x01CC8460 MOV X0, X19
	0x01CC8464 MOV W1, W20
	0x01CC8468 MOV W2, W21
	0x01CC846C BL 0x1CC9E54
	0x01CC8470 MOV X1, X0
	0x01CC8474 STR X0, [X19 + 0xC0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x255C000
	008 Move X21, 0x2287000
	009 Move W8, [X20+1376]
	010 Move X21, [X21+448]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {66}
	016 Move X0, 0x2287000
	017 Move X0, [X0+1736]
	018 Call 0x1B6F7F0
	019 Move X0, 0x2287000
	020 Move X0, [X0+3824]
	021 Call 0x1B6F7F0
	022 Move X0, 0x2288000
	023 Move X0, [X0+1216]
	024 Call 0x1B6F7F0
	025 Move X0, 0x2287000
	026 Move X0, [X0+368]
	027 Call 0x1B6F7F0
	028 Move X0, 0x2286000
	029 Move X0, [X0+1256]
	030 Call 0x1B6F7F0
	031 Move X0, 0x2288000
	032 Move X0, [X0+1264]
	033 Call 0x1B6F7F0
	034 Move X0, 0x2287000
	035 Move X0, [X0+448]
	036 Call 0x1B6F7F0
	037 Move X0, 0x2286000
	038 Move X0, [X0+2960]
	039 Call 0x1B6F7F0
	040 Move X0, 0x2287000
	041 Move X0, [X0+408]
	042 Call 0x1B6F7F0
	043 Move X0, 0x2288000
	044 Move X0, [X0+1224]
	045 Call 0x1B6F7F0
	046 Move X0, 0x2288000
	047 Move X0, [X0+1232]
	048 Call 0x1B6F7F0
	049 Move X0, 0x2288000
	050 Move X0, [X0+1240]
	051 Call 0x1B6F7F0
	052 Move X0, 0x2288000
	053 Move X0, [X0+1248]
	054 Call 0x1B6F7F0
	055 Move X0, 0x2288000
	056 Move X0, [X0+1256]
	057 Call 0x1B6F7F0
	058 Move X0, 0x2288000
	059 Move X0, [X0+1272]
	060 Call 0x1B6F7F0
	061 Move X0, 0x2287000
	062 Move X0, [X0+1104]
	063 Call 0x1B6F7F0
	064 Move W8, 1
	065 Move [X20+1376], W8
	066 Move X0, [X21]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1B6F8F8
	071 Compare X19, 0
	072 JumpIfEqual {278}
	073 Move W8, [X19+48]
	074 Move X9, 0x2286000
	075 Move X9, [X9+2960]
	076 Move X20, 0x2288000
	077 Or W8, W8, 8
	078 Move [X19+48], W8
	079 Move X0, [X9]
	080 Move X21, 0x2286000
	081 Move X22, 0x2287000
	082 Move X20, [X20+1232]
	083 Move X21, [X21+1256]
	084 Move X22, [X22+408]
	085 Call 0x1B6FA0C
	086 Move X2, [X20]
	087 Move X1, X19
	088 Move X3, X31
	089 Move X20, X0
	090 Call ObserverDelegate..ctor, X0, X1, X2
	091 Move X0, [X21]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1B6F8F8
	096 Move X23, 0x2287000
	097 Move X21, 0x2288000
	098 Move X23, [X23+3824]
	099 Move X21, [X21+1240]
	100 Move X0, X20
	101 Move X1, X31
	102 Call App.DeregisterObserver, X0
	103 Move X0, [X22]
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {109}
	107 Call 0x1B6F8F8
	108 Move X0, [X22]
	109 Move X8, [X0+184]
	110 Move X0, [X23]
	111 Move X20, [X8+48]
	112 Call 0x1B6FA0C
	113 Move X2, [X21]
	114 Move X1, X19
	115 Move X3, X31
	116 Move X21, X0
	117 Call Action`1<Int32>..ctor, X0, X1, X2
	118 Move X0, X20
	119 Move X1, X21
	120 Move X2, X31
	121 Call Delegate.Remove, X0, X1
	122 Compare X0, 0
	123 JumpIfEqual {141}
	124 Move X21, [X23]
	125 Move X20, X0
	126 Move X1, X21
	127 Call 0x1B6F8FC
	128 Compare X0, 0
	129 JumpIfEqual {215}
	130 Move X8, [X22]
	131 Move X8, [X8+184]
	132 Move [X8+48], X0
	133 Move X21, [X23]
	134 Move X0, X20
	135 Move X1, X21
	136 Call 0x1B6F8FC
	137 Compare X0, 0
	138 JumpIfEqual {215}
	139 Move X8, [X22]
	140 Move X8, [X8+184]
	141 Move X8, [X22]
	142 Move X8, [X8+184]
	143 Move [X8+48], X31
	144 Move X23, 0x2288000
	145 Move X23, [X23+1216]
	146 Move X21, 0x2288000
	147 Move X20, [X8+56]
	148 Move X0, [X23]
	149 Move X21, [X21+1248]
	150 Call 0x1B6FA0C
	151 Move X2, [X21]
	152 Move X1, X19
	153 Move X3, X31
	154 Move X21, X0
	155 Call Action`2<Boolean, Single>..ctor, X0, X1, X2
	156 Move X0, X20
	157 Move X1, X21
	158 Move X2, X31
	159 Call Delegate.Remove, X0, X1
	160 Compare X0, 0
	161 JumpIfEqual {179}
	162 Move X21, [X23]
	163 Move X20, X0
	164 Move X1, X21
	165 Call 0x1B6F8FC
	166 Compare X0, 0
	167 JumpIfEqual {215}
	168 Move X8, [X22]
	169 Move X8, [X8+184]
	170 Move [X8+56], X0
	171 Move X21, [X23]
	172 Move X0, X20
	173 Move X1, X21
	174 Call 0x1B6F8FC
	175 Compare X0, 0
	176 JumpIfEqual {215}
	177 Move X8, [X22]
	178 Move X8, [X8+184]
	179 Move X8, [X22]
	180 Move X8, [X8+184]
	181 Move [X8+56], X31
	182 Move X23, 0x2287000
	183 Move X23, [X23+1736]
	184 Move X21, 0x2288000
	185 Move X20, [X8+64]
	186 Move X0, [X23]
	187 Move X21, [X21+1256]
	188 Call 0x1B6FA0C
	189 Move X2, [X21]
	190 Move X1, X19
	191 Move X3, X31
	192 Move X21, X0
	193 Call Action`1<Single>..ctor, X0, X1, X2
	194 Move X0, X20
	195 Move X1, X21
	196 Move X2, X31
	197 Call Delegate.Remove, X0, X1
	198 Compare X0, 0
	199 JumpIfEqual {218}
	200 Move X21, [X23]
	201 Move X20, X0
	202 Move X1, X21
	203 Call 0x1B6F8FC
	204 Compare X0, 0
	205 JumpIfEqual {215}
	206 Move X8, [X22]
	207 Move X8, [X8+184]
	208 Move [X8+64], X0
	209 Move X21, [X23]
	210 Move X0, X20
	211 Move X1, X21
	212 Call 0x1B6F8FC
	213 Compare X0, 0
	214 JumpIfNotEqual {221}
	215 Move X0, X20
	216 Move X1, X21
	217 Call 0x1B6FCDC
	218 Move X8, [X22]
	219 Move X8, [X8+184]
	220 Move [X8+64], X31
	221 Move X22, 0x2287000
	222 Move X22, [X22+1104]
	223 Move X23, 0x2287000
	224 Move X21, 0x2288000
	225 Move X8, [X22]
	226 Move X8, [X8+184]
	227 Move X23, [X23+368]
	228 Move X20, [X8+136]
	229 Move X0, [X23]
	230 Move X21, [X21+1224]
	231 Call 0x1B6FA0C
	232 Move X2, [X21]
	233 Move X1, X19
	234 Move X3, X31
	235 Move X21, X0
	236 Call Action..ctor, X0, X1, X2
	237 Move X0, X20
	238 Move X1, X21
	239 Move X2, X31
	240 Call Delegate.Remove, X0, X1
	241 Compare X0, 0
	242 JumpIfEqual {251}
	243 Move X1, [X23]
	244 Move X8, [X0]
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Move X8, [X22]
	247 Move X8, [X8+184]
	248 Move [X8+136], X0
	249 Move X8, [X0]
	250 NotImplemented "Instruction CMP not yet implemented."
	251 Move X8, [X22]
	252 Move X8, [X8+184]
	253 Move [X8+136], X0
	254 Move X20, 0x2288000
	255 Move X20, [X20+1272]
	256 Move X0, [X20]
	257 Move W8, [X0+224]
	258 Compare W8, 0
	259 JumpIfNotEqual {262}
	260 Call 0x1B6F8F8
	261 Move X0, [X20]
	262 Move X8, [X0+184]
	263 Move X0, [X8]
	264 Compare X0, 0
	265 JumpIfEqual {278}
	266 Move X8, 0x2288000
	267 Move X8, [X8+1264]
	268 Move X1, X19
	269 Move X20, [X31+32]
	270 Move X19, [X31+40]
	271 Move X22, [X31+16]
	272 Move X21, [X31+24]
	273 Move X2, [X8]
	274 Move X30, [X31+48]
	275 Move X23, [X31+56]
	276 Call HashSet`1<Object>.Remove, X0, X1
	277 Return 
	278 Call 0x1B6FA1C

Method: System.Void HandleUserWalletChanged(SpatialSys.ObservableState.StateChangedEventArgs args)

Disassembly:
	0x01CC8478 MOV X0, X19
	0x01CC847C LDP X20, X19, [X31 + 0x20]
	0x01CC8480 LDP X22, X21, [X31 + 0x10]
	0x01CC8484 MOV X2, X31
	0x01CC8488 LDP X30, X23, [X31], #0x30
	0x01CC848C B 0x3A9E9B0
	0x01CC8490 LDR X19, [X19 + 0x30]
	0x01CC8494 MOV W1, W20
	0x01CC8498 BL 0x1CC9BE4
	0x01CC849C ADRP X8, 0x2287000
	0x01CC84A0 LDR X8, [X8 + 0x518]
	0x01CC84A4 MOV X1, X0
	0x01CC84A8 MOV X2, X31
	0x01CC84AC LDR X8, [X8]
	0x01CC84B0 MOV X0, X8
	0x01CC84B4 BL 0x3084780
	0x01CC84B8 CBZ X19, 0x1CC84E0
	0x01CC84BC LDR X8, [X19]
	0x01CC84C0 MOV X1, X0
	0x01CC84C4 MOV X0, X19
	0x01CC84C8 LDP X20, X19, [X31 + 0x20]
	0x01CC84CC LDR X3, [X8 + 0x558]
	0x01CC84D0 LDR X2, [X8 + 0x560]
	0x01CC84D4 LDP X22, X21, [X31 + 0x10]
	0x01CC84D8 LDP X30, X23, [X31], #0x30
	0x01CC84DC BR X3
	0x01CC84E0 BL 0x1B6EA1C
	0x01CC84E4 STP X30, X19, [X31 - 0x10]!
	0x01CC84E8 LDR X19, [X0 + 0xA0]
	0x01CC84EC BL 0x1CC6A74
	0x01CC84F0 CBZ X19, 0x1CC8504
	0x01CC84F4 MOV W1, W0
	0x01CC84F8 MOV X0, X19
	0x01CC84FC LDP X30, X19, [X31], #0x10
	0x01CC8500 B 0x1CC8508
	0x01CC8504 BL 0x1B6EA1C
	0x01CC8508 STR X30, [X31 - 0x20]!
	0x01CC850C STP X20, X19, [X31 + 0x10]
	0x01CC8510 MOV X19, X0
	0x01CC8514 LDR X0, [X0 + 0xA8]
	0x01CC8518 CBZ X0, 0x1CC8590
	0x01CC851C MOV W20, W1
	0x01CC8520 MOV X1, X31
	0x01CC8524 BL 0x3A9B0C0
	0x01CC8528 CBZ X0, 0x1CC8590
	0x01CC852C CMP W20, 0x1
	0x01CC8530 B.NE 0x1CC855C
	0x01CC8534 MOV W1, W31
	0x01CC8538 MOV X2, X31
	0x01CC853C BL 0x3A9D9A8
	0x01CC8540 LDR X0, [X19 + 0xB0]
	0x01CC8544 CBZ X0, 0x1CC8590
	0x01CC8548 MOV X1, X31
	0x01CC854C BL 0x3A9B0C0
	0x01CC8550 CBZ X0, 0x1CC8590
	0x01CC8554 MOVZ W1, 0x1
	0x01CC8558 B 0x1CC8580

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x255C000
	006 Move W8, [X20+1377]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x2286000
	013 Move X0, [X0+1256]
	014 Call 0x1B6F7F0
	015 Move X0, 0x2287000
	016 Move X0, [X0+216]
	017 Call 0x1B6F7F0
	018 Move W8, 1
	019 Move [X20+1377], W8
	020 Move X0, X19
	021 Call PlayerWatch.get_IsMine, X0
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {69}
	026 Move X20, 0x2286000
	027 Move X20, [X20+1256]
	028 Move X0, [X20]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1B6F8F8
	033 Move X21, 0x255C000
	034 Move W8, [X21+1091]
	035 Compare W8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, 0x2286000
	038 Move X0, [X0+1256]
	039 Call 0x1B6F7F0
	040 Move W8, 1
	041 Move [X21+1091], W8
	042 Move X0, [X20]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {48}
	046 Call 0x1B6F8F8
	047 Move X0, [X20]
	048 Move X8, [X0+184]
	049 Move X8, [X8]
	050 Compare X8, 0
	051 JumpIfEqual {74}
	052 Move X8, [X8+168]
	053 Compare X8, 0
	054 JumpIfEqual {74}
	055 Move X8, [X8+104]
	056 Compare X8, 0
	057 JumpIfEqual {74}
	058 Move X8, [X8+72]
	059 Compare X8, 0
	060 JumpIfEqual {74}
	061 Move W1, [X8+76]
	062 Move X0, X19
	063 Call PlayerWatch.set_moneyAmount, X0, X1
	064 Move X0, X19
	065 Call PlayerWatch.HandleMoneyChanged, X0
	066 Move X0, X19
	067 Call PlayerWatch.get_moneyAmount, X0
	068 Move [X19+180], W0
	069 Move X20, [X31+16]
	070 Move X19, [X31+24]
	071 Move X30, [X31+32]
	072 Move X21, [X31+40]
	073 Return 
	074 Call 0x1B6FA1C

Method: System.Void Update()

Disassembly:
	0x01CC85BC LDR X0, [X0 + 0xD8]
	0x01CC85C0 BL 0x1B6E7F0
	0x01CC85C4 MOVZ W8, 0x1
	0x01CC85C8 STRB W8, [X20 + 0x565]
	0x01CC85CC MOVZ W2, 0x1
	0x01CC85D0 MOV X0, X19
	0x01CC85D4 MOV W1, W31
	0x01CC85D8 MOV X3, X31
	0x01CC85DC BL 0x1D6519C
	0x01CC85E0 STR X0, [X19 + 0xC0]
	0x01CC85E4 MOV X0, X19
	0x01CC85E8 BL 0x1CC6B4C
	0x01CC85EC TBZ X0, 0x0, 0x1CC8670
	0x01CC85F0 ADRP X20, 0x2285000
	0x01CC85F4 LDR X20, [X20 + 0x4E8]
	0x01CC85F8 LDR X0, [X20]
	0x01CC85FC LDR W8, [X0 + 0xE0]
	0x01CC8600 CBNZ W8, 0x1CC8608
	0x01CC8604 BL 0x1B6E8F8
	0x01CC8608 ADRP X21, 0x255B000
	0x01CC860C LDRB W8, [X21 + 0x443]
	0x01CC8610 CBNZ W8, 0x1CC8628
	0x01CC8614 ADRP X0, 0x2285000
	0x01CC8618 LDR X0, [X0 + 0x4E8]
	0x01CC861C BL 0x1B6E7F0
	0x01CC8620 MOVZ W8, 0x1
	0x01CC8624 STRB W8, [X21 + 0x443]
	0x01CC8628 LDR X0, [X20]
	0x01CC862C LDR W8, [X0 + 0xE0]
	0x01CC8630 CBNZ W8, 0x1CC863C
	0x01CC8634 BL 0x1B6E8F8
	0x01CC8638 LDR X0, [X20]
	0x01CC863C LDR X8, [X0 + 0xB8]
	0x01CC8640 LDR X8, [X8]
	0x01CC8644 CBZ X8, 0x1CC869C
	0x01CC8648 LDR X8, [X8 + 0xA8]
	0x01CC864C CBZ X8, 0x1CC869C
	0x01CC8650 LDR X8, [X8 + 0x68]
	0x01CC8654 CBZ X8, 0x1CC869C
	0x01CC8658 LDR X8, [X8 + 0x48]
	0x01CC865C CBZ X8, 0x1CC869C
	0x01CC8660 LDR W1, [X8 + 0x4C]
	0x01CC8664 MOV X0, X19
	0x01CC8668 STR W1, [X19 + 0xB4]
	0x01CC866C BL 0x1CC6A14
	0x01CC8670 MOV X0, X19
	0x01CC8674 BL 0x1CC69B4
	0x01CC8678 STR W0, [X19 + 0xB4]
	0x01CC867C MOV X0, X19
	0x01CC8680 BL 0x1CC755C
	0x01CC8684 MOV X0, X19
	0x01CC8688 BL 0x1CC8330
	0x01CC868C MOV X0, X19
	0x01CC8690 LDP X20, X19, [X31 + 0x10]
	0x01CC8694 LDP X30, X21, [X31], #0x20
	0x01CC8698 B 0x1CC84E4
	0x01CC869C BL 0x1B6EA1C
	0x01CC86A0 STP X30, X23, [X31 - 0x30]!
	0x01CC86A4 STP X22, X21, [X31 + 0x10]
	0x01CC86A8 STP X20, X19, [X31 + 0x20]
	0x01CC86AC ADRP X23, 0x255B000
	0x01CC86B0 ADRP X22, 0x2287000
	0x01CC86B4 LDRB W8, [X23 + 0x566]
	0x01CC86B8 LDR X22, [X22 + 0x4F8]
	0x01CC86BC MOV W21, W2
	0x01CC86C0 MOV X20, X1
	0x01CC86C4 MOV X19, X0
	0x01CC86C8 TBNZ X8, 0x0, 0x1CC86EC
	0x01CC86CC ADRP X0, 0x2287000
	0x01CC86D0 LDR X0, [X0 + 0x4F0]
	0x01CC86D4 BL 0x1B6E7F0
	0x01CC86D8 ADRP X0, 0x2287000
	0x01CC86DC LDR X0, [X0 + 0x4F8]
	0x01CC86E0 BL 0x1B6E7F0
	0x01CC86E4 MOVZ W8, 0x1
	0x01CC86E8 STRB W8, [X23 + 0x566]
	0x01CC86EC AND W2, W21, 0x1
	0x01CC86F0 MOV X0, X19
	0x01CC86F4 MOV X1, X20
	0x01CC86F8 MOV X3, X31
	0x01CC86FC BL 0x1D65288
	0x01CC8700 LDR X0, [X22]
	0x01CC8704 LDR W8, [X0 + 0xE0]
	0x01CC8708 CBNZ W8, 0x1CC8714
	0x01CC870C BL 0x1B6E8F8
	0x01CC8710 LDR X0, [X22]
	0x01CC8714 LDR X8, [X0 + 0xB8]
	0x01CC8718 LDR X0, [X8]
	0x01CC871C CBZ X0, 0x1CC8740
	0x01CC8720 ADRP X8, 0x2287000
	0x01CC8724 LDR X8, [X8 + 0x4F0]
	0x01CC8728 MOV X1, X19
	0x01CC872C LDP X20, X19, [X31 + 0x20]
	0x01CC8730 LDP X22, X21, [X31 + 0x10]
	0x01CC8734 LDR X2, [X8]
	0x01CC8738 LDP X30, X23, [X31], #0x30
	0x01CC873C B 0x2BD3B48
	0x01CC8740 BL 0x1B6EA1C
	0x01CC8744 STP X30, X19, [X31 - 0x10]!
	0x01CC8748 MOV X19, X0
	0x01CC874C BL 0x1CC6B4C
	0x01CC8750 TBZ X0, 0x0, 0x1CC8780
	0x01CC8754 MOV X0, X19
	0x01CC8758 BL 0x1CC6834
	0x01CC875C TBNZ X0, 0x1F, 0x1CC8788
	0x01CC8760 LDR X0, [X19 + 0x90]
	0x01CC8764 CBZ X0, 0x1CC87AC
	0x01CC8768 MOV X1, X31
	0x01CC876C BL 0x3A65954
	0x01CC8770 LDR X0, [X19 + 0xA0]
	0x01CC8774 CBZ X0, 0x1CC87AC
	0x01CC8778 MOVZ W1, 0x1
	0x01CC877C B 0x1CC87A4
	0x01CC8780 LDP X30, X19, [X31], #0x10
	0x01CC8784 RET
	0x01CC8788 LDR X0, [X19 + 0x98]
	0x01CC878C CBZ X0, 0x1CC87AC
	0x01CC8790 MOV X1, X31
	0x01CC8794 BL 0x3A65954
	0x01CC8798 LDR X0, [X19 + 0xA0]
	0x01CC879C CBZ X0, 0x1CC87AC
	0x01CC87A0 MOV W1, W31
	0x01CC87A4 LDP X30, X19, [X31], #0x10
	0x01CC87A8 B 0x1CC87B0
	0x01CC87AC BL 0x1B6EA1C
	0x01CC87B0 STR X30, [X31 - 0x30]!
	0x01CC87B4 STP X22, X21, [X31 + 0x10]
	0x01CC87B8 STP X20, X19, [X31 + 0x20]
	0x01CC87BC ADRP X22, 0x255B000
	0x01CC87C0 ADRP X21, 0x2287000
	0x01CC87C4 LDRB W8, [X22 + 0x573]
	0x01CC87C8 LDR X21, [X21 + 0x508]
	0x01CC87CC MOV W19, W1
	0x01CC87D0 MOV X20, X0
	0x01CC87D4 TBNZ X8, 0x0, 0x1CC87EC
	0x01CC87D8 ADRP X0, 0x2287000
	0x01CC87DC LDR X0, [X0 + 0x508]
	0x01CC87E0 BL 0x1B6E7F0
	0x01CC87E4 MOVZ W8, 0x1
	0x01CC87E8 STRB W8, [X22 + 0x573]
	0x01CC87EC LDR X0, [X21]
	0x01CC87F0 LDR W8, [X0 + 0xE0]
	0x01CC87F4 CBNZ W8, 0x1CC87FC
	0x01CC87F8 BL 0x1B6E8F8
	0x01CC87FC LDR X0, [X20 + 0x28]
	0x01CC8800 CBZ X0, 0x1CC885C
	0x01CC8804 MOV X1, X31
	0x01CC8808 BL 0x3A7BCC8
	0x01CC880C LDR X8, [X21]
	0x01CC8810 MOV X20, X0
	0x01CC8814 LDR W9, [X8 + 0xE0]
	0x01CC8818 CBNZ W9, 0x1CC8824
	0x01CC881C MOV X0, X8
	0x01CC8820 BL 0x1B6E8F8
	0x01CC8824 CBZ X20, 0x1CC885C
	0x01CC8828 LDR X8, [X21]
	0x01CC882C ANDS W31, W19, 0x1
	0x01CC8830 MOV X0, X20
	0x01CC8834 LDP X20, X19, [X31 + 0x20]
	0x01CC8838 LDR X8, [X8 + 0xB8]
	0x01CC883C LDP X22, X21, [X31 + 0x10]
	0x01CC8840 FMOV S0, W31
	0x01CC8844 FMOV S1, 1
	0x01CC8848 LDR W1, [X8]
	0x01CC884C FCSEL S0, S1, S0, NE
	0x01CC8850 MOV X2, X31
	0x01CC8854 LDR X30, [X31], #0x30
	0x01CC8858 B 0x3A7E584
	0x01CC885C BL 0x1B6EA1C
	0x01CC8860 STR X30, [X31 - 0x20]!
	0x01CC8864 STP X20, X19, [X31 + 0x10]
	0x01CC8868 ADRP X20, 0x255B000
	0x01CC886C LDRB W8, [X20 + 0x567]
	0x01CC8870 MOV X19, X1
	0x01CC8874 TBNZ X8, 0x0, 0x1CC8898
	0x01CC8878 ADRP X0, 0x2287000
	0x01CC887C LDR X0, [X0 + 0x2F0]
	0x01CC8880 BL 0x1B6E7F0
	0x01CC8884 ADRP X0, 0x2285000
	0x01CC8888 LDR X0, [X0 + 0x478]
	0x01CC888C BL 0x1B6E7F0
	0x01CC8890 MOVZ W8, 0x1
	0x01CC8894 STRB W8, [X20 + 0x567]
	0x01CC8898 CBZ X19, 0x1CC8908
	0x01CC889C ADRP X8, 0x2287000
	0x01CC88A0 LDR X8, [X8 + 0x2F0]
	0x01CC88A4 ADRP X20, 0x2285000
	0x01CC88A8 MOV X0, X19
	0x01CC88AC LDR X1, [X8]
	0x01CC88B0 LDR X20, [X20 + 0x478]
	0x01CC88B4 BL 0x208FDE8
	0x01CC88B8 LDR X8, [X20]
	0x01CC88BC MOV X19, X0
	0x01CC88C0 LDR W9, [X8 + 0xE0]
	0x01CC88C4 CBNZ W9, 0x1CC88D0
	0x01CC88C8 MOV X0, X8
	0x01CC88CC BL 0x1B6E8F8
	0x01CC88D0 MOV X0, X19
	0x01CC88D4 MOV X1, X31
	0x01CC88D8 MOV X2, X31
	0x01CC88DC BL 0x3AA0AF0
	0x01CC88E0 TBZ X0, 0x0, 0x1CC88EC
	0x01CC88E4 MOV W0, W31
	0x01CC88E8 B 0x1CC88FC
	0x01CC88EC CBZ X19, 0x1CC8908
	0x01CC88F0 LDR W8, [X19 + 0xA4]
	0x01CC88F4 CMP W8, 0x5
	0x01CC88F8 CSET W0, EQ
	0x01CC88FC LDP X20, X19, [X31 + 0x10]
	0x01CC8900 LDR X30, [X31], #0x20
	0x01CC8904 RET
	0x01CC8908 BL 0x1B6EA1C
	0x01CC890C SUB X31, X31, 0xC0
	0x01CC8910 STP D11, D10, [X31 + 0x60]
	0x01CC8914 STP D9, D8, [X31 + 0x70]
	0x01CC8918 STP X30, X25, [X31 + 0x80]
	0x01CC891C STP X24, X23, [X31 + 0x90]
	0x01CC8920 STP X22, X21, [X31 + 0xA0]
	0x01CC8924 STP X20, X19, [X31 + 0xB0]
	0x01CC8928 ADRP X20, 0x255B000
	0x01CC892C LDRB W8, [X20 + 0x568]
	0x01CC8930 MOV X19, X0
	0x01CC8934 TBNZ X8, 0x0, 0x1CC89B8
	0x01CC8938 ADRP X0, 0x2287000
	0x01CC893C LDR X0, [X0 + 0x520]
	0x01CC8940 BL 0x1B6E7F0
	0x01CC8944 ADRP X0, 0x2287000
	0x01CC8948 LDR X0, [X0 + 0x528]
	0x01CC894C BL 0x1B6E7F0
	0x01CC8950 ADRP X0, 0x2287000
	0x01CC8954 LDR X0, [X0 + 0x530]
	0x01CC8958 BL 0x1B6E7F0
	0x01CC895C ADRP X0, 0x2287000
	0x01CC8960 LDR X0, [X0 + 0x538]
	0x01CC8964 BL 0x1B6E7F0
	0x01CC8968 ADRP X0, 0x2287000
	0x01CC896C LDR X0, [X0 + 0x540]
	0x01CC8970 BL 0x1B6E7F0
	0x01CC8974 ADRP X0, 0x2287000
	0x01CC8978 LDR X0, [X0 + 0x4F0]
	0x01CC897C BL 0x1B6E7F0
	0x01CC8980 ADRP X0, 0x2286000
	0x01CC8984 LDR X0, [X0 + 0x2A8]
	0x01CC8988 BL 0x1B6E7F0
	0x01CC898C ADRP X0, 0x2285000
	0x01CC8990 LDR X0, [X0 + 0x478]
	0x01CC8994 BL 0x1B6E7F0
	0x01CC8998 ADRP X0, 0x2287000
	0x01CC899C LDR X0, [X0 + 0x4F8]
	0x01CC89A0 BL 0x1B6E7F0
	0x01CC89A4 ADRP X0, 0x2287000
	0x01CC89A8 LDR X0, [X0 + 0x548]
	0x01CC89AC BL 0x1B6E7F0
	0x01CC89B0 MOVZ W8, 0x1
	0x01CC89B4 STRB W8, [X20 + 0x568]
	0x01CC89B8 MOV X0, X19
	0x01CC89BC MOV X1, X31
	0x01CC89C0 STP X31, X31, [X31 + 0x50]
	0x01CC89C4 STP X31, X31, [X31 + 0x20]
	0x01CC89C8 STR X31, [X31 + 0x30]
	0x01CC89CC STR X31, [X31 + 0x18]
	0x01CC89D0 BL 0x1D6B3E0
	0x01CC89D4 LDR X0, [X19 + 0xC0]
	0x01CC89D8 CBZ X0, 0x1CC8D38
	0x01CC89DC MOVZ W2, 0x1
	0x01CC89E0 MOV X1, X19
	0x01CC89E4 MOV X3, X31
	0x01CC89E8 BL 0x1D65258
	0x01CC89EC STP X0, X1, [X31 + 0x40]
	0x01CC89F0 ADD X0, X31, 0x40
	0x01CC89F4 MOV X1, X31
	0x01CC89F8 BL 0x1D673F8
	0x01CC89FC STP X0, X1, [X31 + 0x50]
	0x01CC8A00 ADD X0, X31, 0x50
	0x01CC8A04 MOV X1, X31
	0x01CC8A08 BL 0x1D674CC
	0x01CC8A0C TBZ X0, 0x0, 0x1CC8AAC
	0x01CC8A10 ADRP X21, 0x2287000
	0x01CC8A14 ADRP X22, 0x2287000
	0x01CC8A18 ADRP X23, 0x2287000
	0x01CC8A1C ADRP X24, 0x2287000
	0x01CC8A20 LDR X21, [X21 + 0x548]
	0x01CC8A24 LDR X22, [X22 + 0x4F8]
	0x01CC8A28 LDR X23, [X23 + 0x538]
	0x01CC8A2C LDR X24, [X24 + 0x4F0]
	0x01CC8A30 ADD X0, X31, 0x50
	0x01CC8A34 MOV X1, X31
	0x01CC8A38 BL 0x1D6748C
	0x01CC8A3C LDR X1, [X21]
	0x01CC8A40 MOV X2, X31
	0x01CC8A44 BL 0x3084850
	0x01CC8A48 TBZ X0, 0x0, 0x1CC8A9C
	0x01CC8A4C MOV X0, X19
	0x01CC8A50 BL 0x1CC6834
	0x01CC8A54 LDR X8, [X22]
	0x01CC8A58 MOV W20, W0
	0x01CC8A5C LDR W9, [X8 + 0xE0]
	0x01CC8A60 CBNZ W9, 0x1CC8A70
	0x01CC8A64 MOV X0, X8
	0x01CC8A68 BL 0x1B6E8F8
	0x01CC8A6C LDR X8, [X22]
	0x01CC8A70 LDR X8, [X8 + 0xB8]
	0x01CC8A74 LDR X0, [X8]
	0x01CC8A78 CBZ X0, 0x1CC8D58
	0x01CC8A7C TBNZ X20, 0x1F, 0x1CC8A90
	0x01CC8A80 LDR X2, [X23]
	0x01CC8A84 MOV X1, X19
	0x01CC8A88 BL 0x2BD43FC
	0x01CC8A8C B 0x1CC8A9C

ISIL:
	001 Move [X31-112], D15
	002 Move [X31-104], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x255C000
	015 Move W8, [X20+1378]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x2286000
	022 Move X0, [X0+1144]
	023 Call 0x1B6F7F0
	024 Move X0, 0x2287000
	025 Move X0, [X0+408]
	026 Call 0x1B6F7F0
	027 Move W8, 1
	028 Move [X20+1378], W8
	029 Move X0, X19
	030 Call PlayerWatch.get_IsMine, X0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {341}
	035 Move X0, X31
	036 Call Time.get_time
	037 Move V1, [X19+208]
	038 Subtract S0, S0, S1
	039 Move S1, 1
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 Move X8, [X19+128]
	042 Compare X8, 0
	043 JumpIfEqual {366}
	044 Move X0, [X8+136]
	045 Compare X0, 0
	046 JumpIfEqual {366}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X8, [X19+128]
	050 Compare X8, 0
	051 JumpIfEqual {366}
	052 Move X0, [X8+136]
	053 Compare X0, 0
	054 JumpIfEqual {366}
	055 Move X1, X31
	056 Move V9, V2
	057 Move V10, V1
	058 Move [X31+76], S0
	059 Call Transform.get_up, X0
	060 Move X0, X19
	061 Move X1, X31
	062 Move V11, V0
	063 Move V12, V1
	064 Move V13, V2
	065 Call Component.get_transform, X0
	066 Compare X0, 0
	067 JumpIfEqual {366}
	068 Move X1, X31
	069 Call Transform.get_position, X0
	070 Move X0, [X19+128]
	071 Compare X0, 0
	072 JumpIfEqual {366}
	073 Move X1, X31
	074 Move V14, V0
	075 Move V15, V1
	076 Move V8, V2
	077 Call NetPlayer.get_isDie, X0
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {96}
	082 Move X0, X19
	083 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	084 Move TEMP, X0
	085 And TEMP, TEMP, -2147483648
	086 Compare TEMP, -2147483648
	087 JumpIfEqual {131}
	088 Move TEMP, 0
	089 Not TEMP
	090 Move W1, TEMP
	091 Move X0, X19
	092 Call PlayerWatch.RPC_SetTransmittingPlayer, X0, X1
	093 Move X0, X31
	094 Call Time.get_time
	095 Move [X19+208], S0
	096 Move X8, -18997248
	097 Move V0, [X8+2736]
	098 Move V4, [X31+76]
	099 Move X8, -18997248
	100 Move V3, [X8+3336]
	101 Multiply S1, S13, S0
	102 Multiply S2, S12, S0
	103 Multiply S0, S11, S0
	104 Subtract S2, S10, S2
	105 Subtract S0, S4, S0
	106 Subtract S1, S9, S1
	107 Subtract S0, S0, S14
	108 Subtract S2, S2, S15
	109 Subtract S1, S1, S8
	110 Multiply S0, S0, S0
	111 Multiply S2, S2, S2
	112 Add S0, S0, S2
	113 Multiply S1, S1, S1
	114 Add S8, S1, S0
	115 NotImplemented "Instruction FCMP not yet implemented."
	116 Move X0, X19
	117 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	118 Move X8, -18997248
	119 Move V0, [X8+2400]
	120 NotImplemented "Instruction FCMP not yet implemented."
	121 Move TEMP, X0
	122 And TEMP, TEMP, -2147483648
	123 Compare TEMP, -2147483648
	124 JumpIfEqual {82}
	125 Move X0, X19
	126 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	127 Move TEMP, X0
	128 And TEMP, TEMP, -2147483648
	129 Compare TEMP, -2147483648
	130 JumpIfEqual {355}
	131 Move X21, 0x2287000
	132 Move X21, [X21+408]
	133 Move X0, [X21]
	134 Move W8, [X0+224]
	135 Compare W8, 0
	136 JumpIfNotEqual {138}
	137 Call 0x1B6F8F8
	138 Move X22, 0x255C000
	139 Move W8, [X22+1103]
	140 Compare W8, 0
	141 JumpIfNotEqual {147}
	142 Move X0, 0x2287000
	143 Move X0, [X0+408]
	144 Call 0x1B6F7F0
	145 Move W8, 1
	146 Move [X22+1103], W8
	147 Move X0, [X21]
	148 Move W8, [X0+224]
	149 Compare W8, 0
	150 JumpIfNotEqual {153}
	151 Call 0x1B6F8F8
	152 Move X0, [X21]
	153 Move X8, [X0+184]
	154 Move X8, [X8]
	155 Compare X8, 0
	156 JumpIfEqual {366}
	157 Move X0, [X8+88]
	158 Compare X0, 0
	159 JumpIfEqual {366}
	160 Move X1, X31
	161 Call Transform.get_position, X0
	162 Move X0, [X19+160]
	163 Compare X0, 0
	164 JumpIfEqual {366}
	165 Move X1, X31
	166 Move V8, V0
	167 Move V9, V1
	168 Move V10, V2
	169 Call Component.get_transform, X0
	170 Compare X0, 0
	171 JumpIfEqual {366}
	172 Move X1, X31
	173 Call Transform.get_position, X0
	174 Move X20, 0x255C000
	175 Move W8, [X20+1088]
	176 Move V11, V0
	177 Move V12, V1
	178 Move V13, V2
	179 Compare W8, 0
	180 JumpIfNotEqual {186}
	181 Move X0, 0x2286000
	182 Move X0, [X0+1160]
	183 Call 0x1B6F7F0
	184 Move W8, 1
	185 Move [X20+1088], W8
	186 Move X8, 0x2286000
	187 Move X8, [X8+1160]
	188 Move X0, [X8]
	189 Move W8, [X0+224]
	190 Compare W8, 0
	191 JumpIfNotEqual {193}
	192 Call 0x1B6F8F8
	193 Move X0, [X19+160]
	194 Compare X0, 0
	195 JumpIfEqual {366}
	196 Move X1, X31
	197 Call Component.get_transform, X0
	198 Compare X0, 0
	199 JumpIfEqual {366}
	200 Subtract S0, S8, S11
	201 Subtract S1, S9, S12
	202 Subtract S2, S10, S13
	203 Multiply S3, S0, S0
	204 Multiply S4, S1, S1
	205 Multiply S5, S2, S2
	206 Add S3, S3, S4
	207 Add S3, S5, S3
	208 NotImplemented "Instruction FSQRT not yet implemented."
	209 Move X1, X31
	210 NotImplemented "Instruction FDIV not yet implemented."
	211 NotImplemented "Instruction FDIV not yet implemented."
	212 NotImplemented "Instruction FDIV not yet implemented."
	213 Call Transform.get_up, X0
	214 Move W9, [X19+212]
	215 Multiply S0, S9, S0
	216 Multiply S1, S10, S1
	217 Move X10, -18984960
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Multiply S2, S11, S2
	220 Move S3, 4
	221 Add S0, S0, S1
	222 NotImplemented "Instruction CSET not yet implemented."
	223 Add X10, X10, 3848
	224 Move S4, 1
	225 Move S5, -1
	226 Multiply S1, S8, S3
	227 Add S2, S2, S0
	228 Move V0, [X10]
	229 NotImplemented "Instruction FMIN not yet implemented."
	230 Add S2, S2, S5
	231 Multiply S1, S1, S2
	232 Add S1, S1, S4
	233 NotImplemented "Instruction FCMP not yet implemented."
	234 NotImplemented "Instruction CSET not yet implemented."
	235 NotImplemented "Instruction CMP not yet implemented."
	236 Move X0, [X19+160]
	237 Move [X19+212], W8
	238 Compare X0, 0
	239 JumpIfEqual {366}
	240 NotImplemented "Instruction FCMP not yet implemented."
	241 NotImplemented "Instruction CSET not yet implemented."
	242 Call PlayerWatchView.SetExpandSize, X0, X1
	243 Move X0, [X21]
	244 Move W8, [X0+224]
	245 Compare W8, 0
	246 JumpIfNotEqual {248}
	247 Call 0x1B6F8F8
	248 Move W8, [X22+1103]
	249 Compare W8, 0
	250 JumpIfNotEqual {256}
	251 Move X0, 0x2287000
	252 Move X0, [X0+408]
	253 Call 0x1B6F7F0
	254 Move W8, 1
	255 Move [X22+1103], W8
	256 Move X0, [X21]
	257 Move W8, [X0+224]
	258 Compare W8, 0
	259 JumpIfNotEqual {262}
	260 Call 0x1B6F8F8
	261 Move X0, [X21]
	262 Move X8, 0x2286000
	263 Move X8, [X8+1144]
	264 Move X9, [X0+184]
	265 Move X8, [X8]
	266 Move X20, [X9]
	267 Move W10, [X8+224]
	268 Compare W10, 0
	269 JumpIfNotEqual {272}
	270 Move X0, X8
	271 Call 0x1B6F8F8
	272 Move X0, X20
	273 Move X1, X31
	274 Move X2, X31
	275 Call Object.op_Inequality, X0, X1
	276 Move TEMP, X0
	277 And TEMP, TEMP, 1
	278 Compare TEMP, 1
	279 JumpIfNotEqual {341}
	280 Move X0, [X21]
	281 Move W8, [X0+224]
	282 Compare W8, 0
	283 JumpIfNotEqual {285}
	284 Call 0x1B6F8F8
	285 Move W8, [X22+1103]
	286 Compare W8, 0
	287 JumpIfNotEqual {293}
	288 Move X0, 0x2287000
	289 Move X0, [X0+408]
	290 Call 0x1B6F7F0
	291 Move W8, 1
	292 Move [X22+1103], W8
	293 Move X0, [X21]
	294 Move W8, [X0+224]
	295 Compare W8, 0
	296 JumpIfNotEqual {299}
	297 Call 0x1B6F8F8
	298 Move X0, [X21]
	299 Move X8, [X0+184]
	300 Move X8, [X8]
	301 Compare X8, 0
	302 JumpIfEqual {366}
	303 Move X0, [X8+120]
	304 Compare X0, 0
	305 JumpIfEqual {366}
	306 Move X1, X31
	307 Call Transform.get_position, X0
	308 Move X0, X19
	309 Move X1, X31
	310 Move V8, V0
	311 Move V9, V1
	312 Move V10, V2
	313 Call Component.get_transform, X0
	314 Compare X0, 0
	315 JumpIfEqual {366}
	316 Move X1, X31
	317 Call Transform.get_position, X0
	318 Move X8, -18997248
	319 Subtract S0, S8, S0
	320 Subtract S1, S9, S1
	321 Move V3, [X8+3552]
	322 Subtract S2, S10, S2
	323 Multiply S0, S0, S0
	324 Multiply S1, S1, S1
	325 Add S0, S0, S1
	326 Multiply S1, S2, S2
	327 Add S0, S1, S0
	328 NotImplemented "Instruction FCMP not yet implemented."
	329 Move X0, X31
	330 Call Time.get_time
	331 Move V1, [X19+216]
	332 Move X8, -18997248
	333 Move V2, [X8+3376]
	334 Subtract S0, S0, S1
	335 NotImplemented "Instruction FCMP not yet implemented."
	336 Move X0, X19
	337 Call PlayerWatch.ToggleDisplayChange, X0
	338 Move X0, X31
	339 Call Time.get_time
	340 Move [X19+216], S0
	341 Move X20, [X31+96]
	342 Move X19, [X31+104]
	343 Move X22, [X31+80]
	344 Move X21, [X31+88]
	345 Move X30, [X31+64]
	346 Move D9, [X31+48]
	347 Move D8, [X31+56]
	348 Move D11, [X31+32]
	349 Move D10, [X31+40]
	350 Move D13, [X31+16]
	351 Move D12, [X31+24]
	352 Move D15, [X31+112]
	353 Move D14, [X31+120]
	354 Return 
	355 Move X8, [X19+128]
	356 Compare X8, 0
	357 JumpIfEqual {366}
	358 Move X8, [X8+64]
	359 Compare X8, 0
	360 JumpIfEqual {366}
	361 Move X8, [X8+32]
	362 Compare X8, 0
	363 JumpIfEqual {365}
	364 Move W1, [X8]
	365 Move W1, W31
	366 Call 0x1B6FA1C

Method: System.Void OnHealthChanged(System.Int32 health)

Disassembly:
	0x01CC8D4C LDP D11, D10, [X31 + 0x60]
	0x01CC8D50 ADD X31, X31, 0xC0
	0x01CC8D54 RET
	0x01CC8D58 BL 0x1B6EA1C
	0x01CC8D5C BL 0x1B6EA1C
	0x01CC8D60 BL 0x1B6EA1C
	0x01CC8D64 BL 0x1B6EA1C
	0x01CC8D68 BL 0x1B6EA1C
	0x01CC8D6C BL 0x1B6EA1C
	0x01CC8D70 B 0x1CC8DB4
	0x01CC8D74 B 0x1CC8DB4
	0x01CC8D78 B 0x1CC8DB4
	0x01CC8D7C B 0x1CC8DB4
	0x01CC8D80 B 0x1CC8DB4
	0x01CC8D84 B 0x1CC8DB4
	0x01CC8D88 B 0x1CC8DB4
	0x01CC8D8C B 0x1CC8DB4
	0x01CC8D90 B 0x1CC8DB4
	0x01CC8D94 B 0x1CC8DB4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X20, X0
	006 Call PlayerWatch.get_IsMine, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {21}
	011 Move X0, [X20+160]
	012 Compare X0, 0
	013 JumpIfEqual {25}
	014 NotImplemented "Instruction SCVTF not yet implemented."
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W8, 0x42C80000
	018 Move S1, W8
	019 NotImplemented "Instruction FDIV not yet implemented."
	020 Move X30, [X31+32]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return 
	025 Call 0x1B6FA1C

Method: System.Void OnPlayerBackpackUpdated(System.Boolean equipped, System.Single fillAmount)

Disassembly:
	0x01CC8F20 SUBS X9, X9, 0x1
	0x01CC8F24 ADD X10, X10, 0x10
	0x01CC8F28 B.NE 0x1CC8F14
	0x01CC8F2C MOVZ W2, 0x1
	0x01CC8F30 MOV X0, X20
	0x01CC8F34 BL 0x1BB4284
	0x01CC8F38 B 0x1CC8F4C
	0x01CC8F3C LDR W9, [X10]
	0x01CC8F40 ADD W9, W9, 0x1
	0x01CC8F44 ADD X8, X8, W9, 0x4, SXTW
	0x01CC8F48 ADD X0, X8, 0x138
	0x01CC8F4C LDP X8, X4, [X0]
	0x01CC8F50 MOVZ W1, 0x3
	0x01CC8F54 MOV X0, X20
	0x01CC8F58 MOV X2, X22
	0x01CC8F5C MOV X3, X21
	0x01CC8F60 BLR X8
	0x01CC8F64 LDR X20, [X19 + 0x28]
	0x01CC8F68 CBZ X20, 0x1CC8FD4
	0x01CC8F6C ADRP X10, 0x2287000
	0x01CC8F70 LDR X8, [X20]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move V8, V0
	006 Move W19, W1
	007 Move X20, X0
	008 Call PlayerWatch.get_IsMine, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {22}
	013 Move X0, [X20+160]
	014 Compare X0, 0
	015 JumpIfEqual {27}
	016 And W1, W19, 1
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+8]
	025 Move V8, [X31+32]
	026 Return 
	027 Call 0x1B6FA1C

Method: System.Void OnPlayerHeldWeightUpdated(System.Single weight)

Disassembly:
	0x01CC9058 LDR X0, [X8]
	0x01CC905C LDR X21, [X21 + 0x570]
	0x01CC9060 LDR X22, [X22 + 0x170]
	0x01CC9064 LDR X23, [X23 + 0x578]
	0x01CC9068 BL 0x1B6EA0C
	0x01CC906C LDR X2, [X21]
	0x01CC9070 MOV X1, X19
	0x01CC9074 MOV X3, X31
	0x01CC9078 MOV X21, X0
	0x01CC907C BL 0x27EC49C
	0x01CC9080 MOV X0, X20
	0x01CC9084 MOV X1, X21
	0x01CC9088 MOV X2, X31
	0x01CC908C BL 0x33E4834
	0x01CC9090 LDR X0, [X22]
	0x01CC9094 LDR X20, [X19 + 0x50]
	0x01CC9098 BL 0x1B6EA0C
	0x01CC909C LDR X2, [X23]
	0x01CC90A0 MOV X1, X19
	0x01CC90A4 MOV X3, X31
	0x01CC90A8 MOV X21, X0
	0x01CC90AC BL 0x317DB24
	0x01CC90B0 CBZ X20, 0x1CC90D8
	0x01CC90B4 MOV X0, X20

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move V8, V0
	005 Move X19, X0
	006 Call PlayerWatch.get_IsMine, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {26}
	011 Move X0, [X19+160]
	012 Compare X0, 0
	013 JumpIfEqual {30}
	014 Move S0, 20
	015 Move S1, 0.25
	016 NotImplemented "Instruction FDIV not yet implemented."
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Move S2, 1
	020 Multiply S0, S0, S1
	021 NotImplemented "Instruction FMIN not yet implemented."
	022 NotImplemented "Instruction FCMP not yet implemented."
	023 Move S0, W31
	024 NotImplemented "Instruction FCSEL not yet implemented."
	025 Move V8, [X31+32]
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Move V8, [X31+32]
	029 Return 
	030 Call 0x1B6FA1C

Method: System.Void HandleSwitchChannelPressed()

Disassembly:
	0x01CC9238 SUBS X9, X9, 0x1
	0x01CC923C ADD X10, X10, 0x10
	0x01CC9240 B.NE 0x1CC922C
	0x01CC9244 MOVZ W2, 0x1
	0x01CC9248 MOV X0, X21
	0x01CC924C BL 0x1BB4284
	0x01CC9250 B 0x1CC930C
	0x01CC9254 CBZ X19, 0x1CC9464
	0x01CC9258 LDR W24, [X19 + 0x18]
	0x01CC925C MOV X0, X20
	0x01CC9260 MOV X1, X31
	0x01CC9264 BL 0x33DD3DC
	0x01CC9268 LDR X8, [X21]
	0x01CC926C MOV X21, X0
	0x01CC9270 MOVZ W1, 0x1
	0x01CC9274 MOV X0, X8
	0x01CC9278 BL 0x1B6E868
	0x01CC927C CBZ X0, 0x1CC9464
	0x01CC9280 LDR X8, [X0]
	0x01CC9284 MOV X22, X0
	0x01CC9288 MOV X0, X19
	0x01CC928C LDR X1, [X8 + 0x40]
	0x01CC9290 BL 0x1B6E8FC
	0x01CC9294 CBZ X0, 0x1CC946C
	0x01CC9298 LDR W8, [X22 + 0x18]
	0x01CC929C CBZ W8, 0x1CC9468
	0x01CC92A0 STR X19, [X22 + 0x20]
	0x01CC92A4 CBZ X21, 0x1CC9464
	0x01CC92A8 LDR X1, [X23]
	0x01CC92AC CMP W24, 0x0
	0x01CC92B0 B.LE 0x1CC933C
	0x01CC92B4 ADRP X10, 0x2286000
	0x01CC92B8 LDR X8, [X21]
	0x01CC92BC LDR X10, [X10 + 0x590]
	0x01CC92C0 LDRH W9, [X8 + 0x12E]
	0x01CC92C4 LDR X23, [X10]
	0x01CC92C8 CBZ X9, 0x1CC92EC
	0x01CC92CC LDR X10, [X8 + 0xB0]
	0x01CC92D0 ADD X10, X10, 0x8
	0x01CC92D4 LDUR X11, [X10 - 0x8]
	0x01CC92D8 CMP X11, X1
	0x01CC92DC B.EQ 0x1CC9384
	0x01CC92E0 SUBS X9, X9, 0x1
	0x01CC92E4 ADD X10, X10, 0x10
	0x01CC92E8 B.NE 0x1CC92D4
	0x01CC92EC MOVZ W2, 0x1
	0x01CC92F0 MOV X0, X21
	0x01CC92F4 BL 0x1BB4284
	0x01CC92F8 B 0x1CC9394
	0x01CC92FC LDR W9, [X10]
	0x01CC9300 ADD W9, W9, 0x1
	0x01CC9304 ADD X8, X8, W9, 0x4, SXTW
	0x01CC9308 ADD X0, X8, 0x138
	0x01CC930C LDP X8, X4, [X0]
	0x01CC9310 MOVZ W1, 0x2
	0x01CC9314 MOV X0, X21
	0x01CC9318 MOV X2, X19
	0x01CC931C MOV X3, X22
	0x01CC9320 BLR X8
	0x01CC9324 LDP X20, X19, [X31 + 0x30]
	0x01CC9328 LDP X22, X21, [X31 + 0x20]
	0x01CC932C LDP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x255B000
	006 Move W8, [X20+1379]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2286000
	013 Move X0, [X0+408]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+1379], W8
	017 Move X0, X19
	018 Call PlayerWatch.get_IsMine, X0
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {74}
	023 Move X0, X19
	024 Call PlayerWatch.get_channel, X0
	025 Move W9, 0x6667
	026 Add W8, W0, 1
	027 NotImplemented "Instruction MOVK not yet implemented."
	028 NotImplemented "Instruction SMADDL not yet implemented."
	029 Move X10, X9
	030 ShiftRight X10, 63
	031 And X10, X10, 0x7FFFFFFF
	032 NotImplemented "Instruction SBFM not yet implemented."
	033 Add W9, W9, W10
	034 Move W10, 10
	035 NotImplemented "Instruction MSUB not yet implemented."
	036 Move X0, X19
	037 Call PlayerWatch.set_channel, X0, X1
	038 Move X20, 0x2286000
	039 Move X20, [X20+408]
	040 Move X0, [X20]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1B6F8F8
	045 Move X21, 0x255B000
	046 Move W8, [X21+1103]
	047 Compare W8, 0
	048 JumpIfNotEqual {54}
	049 Move X0, 0x2286000
	050 Move X0, [X0+408]
	051 Call 0x1B6F7F0
	052 Move W8, 1
	053 Move [X21+1103], W8
	054 Move X0, [X20]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {60}
	058 Call 0x1B6F8F8
	059 Move X0, [X20]
	060 Move X8, [X0+184]
	061 Move X0, X19
	062 Move X20, [X8]
	063 Call PlayerWatch.get_channel, X0
	064 Compare X20, 0
	065 JumpIfEqual {79}
	066 Move W1, W0
	067 Move X0, X20
	068 Call PlayerController.SetChannel, X0, X1
	069 Move X0, X19
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X30, [X31+32]
	073 Move X21, [X31+40]
	074 Move X20, [X31+16]
	075 Move X19, [X31+24]
	076 Move X30, [X31+32]
	077 Move X21, [X31+40]
	078 Return 
	079 Call 0x1B6FA1C

Method: System.Void HandleChannelChanged()

Disassembly:
	0x01CC9330 MOV W0, W31
	0x01CC9334 LDR X30, [X31], #0x40
	0x01CC9338 RET
	0x01CC933C ADRP X10, 0x2286000
	0x01CC9340 LDR X8, [X21]
	0x01CC9344 LDR X10, [X10 + 0x588]
	0x01CC9348 LDRH W9, [X8 + 0x12E]
	0x01CC934C LDR X19, [X10]
	0x01CC9350 CBZ X9, 0x1CC9374

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+160]
	004 Call PlayerWatch.get_channel, X0
	005 Compare X19, 0
	006 JumpIfEqual {11}
	007 Move W1, W0
	008 Move X0, X19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call 0x1B6FA1C

Method: System.Void HandleMoneyChanged()

Disassembly:
	0x01CC855C MOVZ W1, 0x1
	0x01CC8560 MOV X2, X31
	0x01CC8564 BL 0x3A9D9A8
	0x01CC8568 LDR X0, [X19 + 0xB0]
	0x01CC856C CBZ X0, 0x1CC8590
	0x01CC8570 MOV X1, X31
	0x01CC8574 BL 0x3A9B0C0
	0x01CC8578 CBZ X0, 0x1CC8590
	0x01CC857C MOV W1, W31
	0x01CC8580 LDP X20, X19, [X31 + 0x10]
	0x01CC8584 MOV X2, X31
	0x01CC8588 LDR X30, [X31], #0x20
	0x01CC858C B 0x3A9D9A8
	0x01CC8590 BL 0x1B6EA1C
	0x01CC8594 STP X30, X21, [X31 - 0x20]!
	0x01CC8598 STP X20, X19, [X31 + 0x10]
	0x01CC859C ADRP X20, 0x255B000
	0x01CC85A0 LDRB W8, [X20 + 0x565]
	0x01CC85A4 MOV X19, X0
	0x01CC85A8 TBNZ X8, 0x0, 0x1CC85CC
	0x01CC85AC ADRP X0, 0x2285000
	0x01CC85B0 LDR X0, [X0 + 0x4E8]
	0x01CC85B4 BL 0x1B6E7F0
	0x01CC85B8 ADRP X0, 0x2286000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, [X0+160]
	007 Move X19, X0
	008 Call PlayerWatch.get_moneyAmount, X0
	009 Move W21, [X19+180]
	010 Move W22, W0
	011 Move X0, X19
	012 Call PlayerWatch.get_IsMine, X0
	013 Compare X20, 0
	014 JumpIfEqual {29}
	015 And W3, W0, 1
	016 Move X0, X20
	017 Move W1, W22
	018 Move W2, W21
	019 Call PlayerWatchView.SetMoneyText, X0, X1, X2, X3
	020 Move X0, X19
	021 Call PlayerWatch.get_moneyAmount, X0
	022 Move [X19+180], W0
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X22, [X31+16]
	026 Move X21, [X31+24]
	027 Move X30, [X31+48]
	028 Return 
	029 Call 0x1B6FA1C

Method: System.Void HandleDisplayChanged()

Disassembly:
	0x01CC94E4 LDR X0, [X0 + 0x5A8]
	0x01CC94E8 BL 0x1B6E7F0
	0x01CC94EC ADRP X0, 0x2286000
	0x01CC94F0 LDR X0, [X0 + 0x5B0]
	0x01CC94F4 BL 0x1B6E7F0
	0x01CC94F8 ADRP X0, 0x2286000
	0x01CC94FC LDR X0, [X0 + 0x5B8]
	0x01CC9500 BL 0x1B6E7F0
	0x01CC9504 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+160]
	004 Call PlayerWatch.get_display, X0
	005 Compare X19, 0
	006 JumpIfEqual {11}
	007 Move W1, W0
	008 Move X0, X19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call 0x1B6FA1C

Method: System.Void RPC_SetTransmittingPlayer(System.Int32 playerObjectID)

Disassembly:
	0x01CC8A90 LDR X2, [X24]
	0x01CC8A94 MOV X1, X19
	0x01CC8A98 BL 0x2BD3B48
	0x01CC8A9C ADD X0, X31, 0x50
	0x01CC8AA0 MOV X1, X31
	0x01CC8AA4 BL 0x1D674CC
	0x01CC8AA8 TBNZ X0, 0x0, 0x1CC8A30
	0x01CC8AAC MOV X0, X19
	0x01CC8AB0 BL 0x1CC6B4C
	0x01CC8AB4 TBZ X0, 0x0, 0x1CC8D38
	0x01CC8AB8 MOV X0, X19
	0x01CC8ABC BL 0x1CC6834
	0x01CC8AC0 TBNZ X0, 0x1F, 0x1CC8ACC
	0x01CC8AC4 MOV X20, X31
	0x01CC8AC8 B 0x1CC8C64
	0x01CC8ACC ADRP X20, 0x2287000
	0x01CC8AD0 LDR X20, [X20 + 0x4F8]
	0x01CC8AD4 LDR X0, [X20]
	0x01CC8AD8 LDR W8, [X0 + 0xE0]
	0x01CC8ADC CBNZ W8, 0x1CC8AE8
	0x01CC8AE0 BL 0x1B6E8F8
	0x01CC8AE4 LDR X0, [X20]
	0x01CC8AE8 LDR X8, [X0 + 0xB8]
	0x01CC8AEC LDR X0, [X8]
	0x01CC8AF0 CBZ X0, 0x1CC8D58
	0x01CC8AF4 ADRP X8, 0x2287000
	0x01CC8AF8 LDR X8, [X8 + 0x540]
	0x01CC8AFC LDR X1, [X8]
	0x01CC8B00 ADD X8, X31, 0x0
	0x01CC8B04 BL 0x2BD3DF0
	0x01CC8B08 LDR V0, [X31]
	0x01CC8B0C LDR X8, [X31 + 0x10]
	0x01CC8B10 ADRP X23, 0x2287000
	0x01CC8B14 ADRP X24, 0x2285000
	0x01CC8B18 LDR X23, [X23 + 0x528]
	0x01CC8B1C LDR X24, [X24 + 0x478]
	0x01CC8B20 STR V0, [X31 + 0x2]
	0x01CC8B24 STR X8, [X31 + 0x30]
	0x01CC8B28 ADRP X25, 0x2286000
	0x01CC8B2C LDR X25, [X25 + 0x2A8]
	0x01CC8B30 MOVZ W9, 0x7F800000
	0x01CC8B34 MOV X20, X31
	0x01CC8B38 FMOV S11, W9
	0x01CC8B3C LDR X1, [X23]
	0x01CC8B40 ADD X0, X31, 0x20
	0x01CC8B44 BL 0x2A14844
	0x01CC8B48 TBZ X0, 0x0, 0x1CC8C50
	0x01CC8B4C LDR X0, [X24]
	0x01CC8B50 LDR X22, [X31 + 0x30]
	0x01CC8B54 LDR W8, [X0 + 0xE0]
	0x01CC8B58 CBNZ W8, 0x1CC8B60
	0x01CC8B5C BL 0x1B6E8F8
	0x01CC8B60 MOV X0, X22
	0x01CC8B64 MOV X1, X31
	0x01CC8B68 MOV X2, X31
	0x01CC8B6C BL 0x3AA0AF0
	0x01CC8B70 TBNZ X0, 0x0, 0x1CC8B3C
	0x01CC8B74 CBZ X22, 0x1CC8D5C
	0x01CC8B78 MOV X0, X22
	0x01CC8B7C BL 0x1CC6834
	0x01CC8B80 MOV W21, W0
	0x01CC8B84 TBNZ X0, 0x1F, 0x1CC8B3C
	0x01CC8B88 MOV X0, X22
	0x01CC8B8C BL 0x1CC68F4
	0x01CC8B90 MOV W22, W0
	0x01CC8B94 MOV X0, X19
	0x01CC8B98 BL 0x1CC68F4
	0x01CC8B9C CMP W22, W0
	0x01CC8BA0 B.NE 0x1CC8B3C
	0x01CC8BA4 LDR X0, [X25]
	0x01CC8BA8 LDR W8, [X0 + 0xE0]
	0x01CC8BAC CBNZ W8, 0x1CC8BB4
	0x01CC8BB0 BL 0x1B6E8F8
	0x01CC8BB4 ADD X1, X31, 0x18
	0x01CC8BB8 MOV W0, W21
	0x01CC8BBC MOV X2, X31
	0x01CC8BC0 BL 0x1CB64B0
	0x01CC8BC4 TBZ X0, 0x0, 0x1CC8B3C
	0x01CC8BC8 LDR X0, [X31 + 0x18]
	0x01CC8BCC CBZ X0, 0x1CC8D60
	0x01CC8BD0 MOV X1, X31
	0x01CC8BD4 BL 0x1CAE940
	0x01CC8BD8 TBNZ X0, 0x0, 0x1CC8B3C
	0x01CC8BDC LDR X0, [X31 + 0x18]
	0x01CC8BE0 CBZ X0, 0x1CC8D68
	0x01CC8BE4 MOV X1, X31
	0x01CC8BE8 BL 0x3A9B084
	0x01CC8BEC CBZ X0, 0x1CC8D64
	0x01CC8BF0 MOV X1, X31
	0x01CC8BF4 BL 0x3AA7658
	0x01CC8BF8 MOV V8.16B, V0.16B
	0x01CC8BFC MOV V9.16B, V1.16B
	0x01CC8C00 MOV V10.16B, V2.16B
	0x01CC8C04 MOV X0, X19
	0x01CC8C08 MOV X1, X31
	0x01CC8C0C BL 0x3A9B084
	0x01CC8C10 CBZ X0, 0x1CC8D6C
	0x01CC8C14 MOV X1, X31
	0x01CC8C18 BL 0x3AA7658
	0x01CC8C1C FSUB S0, S8, S0
	0x01CC8C20 FSUB S1, S9, S1
	0x01CC8C24 FSUB S2, S10, S2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x255C000
	006 Move W8, [X21+1380]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x2287000
	014 Move X0, [X0+448]
	015 Call 0x1B6F7F0
	016 Move X0, 0x2288000
	017 Move X0, [X0+1280]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X21+1380], W8
	021 Move W8, [X19+88]
	022 Compare W8, 0
	023 JumpIfEqual {33}
	024 Move [X19+88], W31
	025 Move X0, X19
	026 Move W1, W20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call PlayerWatch.set_transmittingPlayerObjectID, X0, X1
	032 Return 
	033 Move X21, 0x2287000
	034 Move X21, [X21+448]
	035 Move X0, [X21]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1B6F8F8
	040 Move X0, X19
	041 Move X1, X31
	042 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	043 Move X0, [X19+56]
	044 Compare X0, 0
	045 JumpIfEqual {137}
	046 Move X1, X31
	047 Call NetworkRunner.get_Stage, X0
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return 
	054 Move X0, [X19+64]
	055 Compare X0, 0
	056 JumpIfEqual {137}
	057 Move X1, X31
	058 Call NetworkObject.GetLocalAuthorityMask, X0
	059 Move TEMP, X0
	060 And TEMP, TEMP, 2
	061 Compare TEMP, 2
	062 JumpIfEqual {81}
	063 Move X0, [X21]
	064 Move X19, [X19+64]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1B6F8F8
	069 Move X8, 0x2288000
	070 Move X8, [X8+1280]
	071 Move X1, X19
	072 Move X20, [X31+16]
	073 Move X19, [X31+24]
	074 Move W2, 2
	075 Move X0, [X8]
	076 Move X3, X31
	077 Move X30, [X31+32]
	078 Move X21, [X31+40]
	079 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	080 Return 
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfEqual {25}
	085 Move X8, [X19+56]
	086 Compare X8, 0
	087 JumpIfEqual {137}
	088 Move X0, [X8+80]
	089 Compare X0, 0
	090 JumpIfEqual {137}
	091 Move X1, X31
	092 Call Simulation.HasAnyActiveConnections, X0
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {49}
	097 Move X8, [X19+56]
	098 Compare X8, 0
	099 JumpIfEqual {137}
	100 Move X0, [X8+80]
	101 Move W1, 12
	102 Move X2, X31
	103 Call SimulationMessage.Allocate, X0, X1
	104 Move X21, X0
	105 Move W0, 1
	106 Move X1, X31
	107 Call Assert.Check, X0
	108 Move X8, [X19+64]
	109 Compare X8, 0
	110 JumpIfEqual {137}
	111 Move X8, [X8+32]
	112 Compare X8, 0
	113 JumpIfEqual {115}
	114 Move W0, [X8]
	115 Move X0, X31
	116 Move W1, [X19+104]
	117 Move W2, 1
	118 Move X3, X31
	119 Call RpcHeader.Create, X0, X1, X2
	120 Move [X21+28], X0
	121 Move [X21+36], W20
	122 Compare X21, 0
	123 JumpIfEqual {137}
	124 Move W8, 96
	125 Move [X21+12], W8
	126 Move X0, [X19+56]
	127 Compare X0, 0
	128 JumpIfEqual {137}
	129 Move X20, [X31+16]
	130 Move X19, [X31+24]
	131 Move X1, X21
	132 Move X2, X31
	133 Move X30, [X31+32]
	134 Move X21, [X31+40]
	135 Call NetworkRunner.SendRpc, X0, X1
	136 Return 
	137 Call 0x1B6FA1C

Method: System.Void Spawned()

Disassembly:
	0x01CC9594 MOV X0, X19
	0x01CC9598 MOV X1, X31
	0x01CC959C BL 0x33DD3DC
	0x01CC95A0 ADRP X8, 0x2284000
	0x01CC95A4 LDR X8, [X8 + 0x858]
	0x01CC95A8 MOV X19, X0
	0x01CC95AC LDR X20, [X8]
	0x01CC95B0 LDR X8, [X20 + 0x38]
	0x01CC95B4 CBNZ X8, 0x1CC95C4
	0x01CC95B8 MOV X0, X20
	0x01CC95BC BL 0x1BB41DC
	0x01CC95C0 LDR X8, [X20 + 0x38]
	0x01CC95C4 LDR X0, [X8 + 0x10]
	0x01CC95C8 LDRB W8, [X0 + 0x135]
	0x01CC95CC TBNZ X8, 0x0, 0x1CC95D4
	0x01CC95D0 BL 0x1BB4180
	0x01CC95D4 LDR W8, [X0 + 0xE0]
	0x01CC95D8 CBNZ W8, 0x1CC95E0
	0x01CC95DC BL 0x1B6E8F8
	0x01CC95E0 LDR X8, [X20 + 0x38]
	0x01CC95E4 LDR X0, [X8 + 0x10]
	0x01CC95E8 LDRB W8, [X0 + 0x135]
	0x01CC95EC TBNZ X8, 0x0, 0x1CC95F4
	0x01CC95F0 BL 0x1BB4180
	0x01CC95F4 CBZ X19, 0x1CC98BC
	0x01CC95F8 ADRP X10, 0x2286000
	0x01CC95FC ADRP X11, 0x2286000
	0x01CC9600 LDR X9, [X0 + 0xB8]
	0x01CC9604 LDR X10, [X10 + 0x558]
	0x01CC9608 LDR X8, [X19]
	0x01CC960C LDR X11, [X11 + 0x5B8]
	0x01CC9610 LDR X20, [X9]
	0x01CC9614 LDR X1, [X10]
	0x01CC9618 LDRH W9, [X8 + 0x12E]
	0x01CC961C LDR X21, [X11]
	0x01CC9620 CBZ X9, 0x1CC96F8
	0x01CC9624 LDR X10, [X8 + 0xB0]
	0x01CC9628 ADD X10, X10, 0x8
	0x01CC962C LDUR X11, [X10 - 0x8]
	0x01CC9630 CMP X11, X1
	0x01CC9634 B.EQ 0x1CC9708
	0x01CC9638 SUBS X9, X9, 0x1
	0x01CC963C ADD X10, X10, 0x10
	0x01CC9640 B.NE 0x1CC962C
	0x01CC9644 B 0x1CC96F8
	0x01CC9648 MOV X0, X19
	0x01CC964C MOV X1, X31
	0x01CC9650 BL 0x33DD3DC
	0x01CC9654 ADRP X8, 0x2284000
	0x01CC9658 LDR X8, [X8 + 0x858]
	0x01CC965C MOV X19, X0
	0x01CC9660 LDR X20, [X8]
	0x01CC9664 LDR X8, [X20 + 0x38]
	0x01CC9668 CBNZ X8, 0x1CC9678
	0x01CC966C MOV X0, X20
	0x01CC9670 BL 0x1BB41DC
	0x01CC9674 LDR X8, [X20 + 0x38]
	0x01CC9678 LDR X0, [X8 + 0x10]
	0x01CC967C LDRB W8, [X0 + 0x135]
	0x01CC9680 TBNZ X8, 0x0, 0x1CC9688
	0x01CC9684 BL 0x1BB4180
	0x01CC9688 LDR W8, [X0 + 0xE0]
	0x01CC968C CBNZ W8, 0x1CC9694
	0x01CC9690 BL 0x1B6E8F8
	0x01CC9694 LDR X8, [X20 + 0x38]
	0x01CC9698 LDR X0, [X8 + 0x10]
	0x01CC969C LDRB W8, [X0 + 0x135]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x255B000
	006 Move W8, [X20+1381]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x2285000
	013 Move X0, [X0+1256]
	014 Call 0x1B6F7F0
	015 Move X0, 0x2286000
	016 Move X0, [X0+216]
	017 Call 0x1B6F7F0
	018 Move W8, 1
	019 Move [X20+1381], W8
	020 Move W2, 1
	021 Move X0, X19
	022 Move W1, W31
	023 Move X3, X31
	024 Call NetworkBehaviour.GetChangeDetector, X0, X1, X2
	025 Move [X19+192], X0
	026 Move X0, X19
	027 Call PlayerWatch.get_IsMine, X0
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {71}
	032 Move X20, 0x2285000
	033 Move X20, [X20+1256]
	034 Move X0, [X20]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1B6F8F8
	039 Move X21, 0x255B000
	040 Move W8, [X21+1091]
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x2285000
	044 Move X0, [X0+1256]
	045 Call 0x1B6F7F0
	046 Move W8, 1
	047 Move [X21+1091], W8
	048 Move X0, [X20]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {54}
	052 Call 0x1B6F8F8
	053 Move X0, [X20]
	054 Move X8, [X0+184]
	055 Move X8, [X8]
	056 Compare X8, 0
	057 JumpIfEqual {85}
	058 Move X8, [X8+168]
	059 Compare X8, 0
	060 JumpIfEqual {85}
	061 Move X8, [X8+104]
	062 Compare X8, 0
	063 JumpIfEqual {85}
	064 Move X8, [X8+72]
	065 Compare X8, 0
	066 JumpIfEqual {85}
	067 Move W1, [X8+76]
	068 Move X0, X19
	069 Move [X19+180], W1
	070 Call PlayerWatch.set_moneyAmount, X0, X1
	071 Move X0, X19
	072 Call PlayerWatch.get_moneyAmount, X0
	073 Move [X19+180], W0
	074 Move X0, X19
	075 Call PlayerWatch.HandleMoneyChanged, X0
	076 Move X0, X19
	077 Call PlayerWatch.HandleChannelChanged, X0
	078 Move X0, X19
	079 Move X20, [X31+16]
	080 Move X19, [X31+24]
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 Call PlayerWatch.HandleDisplayChanged, X0
	084 Return 
	085 Call 0x1B6FA1C

Method: System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)

Disassembly:
	0x01CC96A0 TBNZ X8, 0x0, 0x1CC96A8
	0x01CC96A4 BL 0x1BB4180
	0x01CC96A8 CBZ X19, 0x1CC98BC
	0x01CC96AC ADRP X10, 0x2286000
	0x01CC96B0 ADRP X11, 0x2286000
	0x01CC96B4 LDR X9, [X0 + 0xB8]
	0x01CC96B8 LDR X10, [X10 + 0x558]
	0x01CC96BC LDR X8, [X19]
	0x01CC96C0 LDR X11, [X11 + 0x5B0]
	0x01CC96C4 LDR X20, [X9]
	0x01CC96C8 LDR X1, [X10]
	0x01CC96CC LDRH W9, [X8 + 0x12E]
	0x01CC96D0 LDR X21, [X11]
	0x01CC96D4 CBZ X9, 0x1CC96F8
	0x01CC96D8 LDR X10, [X8 + 0xB0]
	0x01CC96DC ADD X10, X10, 0x8
	0x01CC96E0 LDUR X11, [X10 - 0x8]
	0x01CC96E4 CMP X11, X1
	0x01CC96E8 B.EQ 0x1CC9708
	0x01CC96EC SUBS X9, X9, 0x1
	0x01CC96F0 ADD X10, X10, 0x10
	0x01CC96F4 B.NE 0x1CC96E0
	0x01CC96F8 MOVZ W2, 0x1
	0x01CC96FC MOV X0, X19
	0x01CC9700 BL 0x1BB4284
	0x01CC9704 B 0x1CC9718
	0x01CC9708 LDR W9, [X10]
	0x01CC970C ADD W9, W9, 0x1
	0x01CC9710 ADD X8, X8, W9, 0x4, SXTW
	0x01CC9714 ADD X0, X8, 0x138
	0x01CC9718 LDP X8, X4, [X0]
	0x01CC971C MOVZ W1, 0x2
	0x01CC9720 MOV X0, X19
	0x01CC9724 MOV X2, X21
	0x01CC9728 MOV X3, X20
	0x01CC972C BLR X8
	0x01CC9730 MOV W0, W31
	0x01CC9734 B 0x1CC98A8
	0x01CC9738 LDR W9, [X10]
	0x01CC973C ADD W9, W9, 0x1
	0x01CC9740 ADD X8, X8, W9, 0x4, SXTW

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x255B000
	008 Move X22, 0x2287000
	009 Move W8, [X23+1382]
	010 Move X22, [X22+1272]
	011 Move W21, W2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x2287000
	019 Move X0, [X0+1264]
	020 Call 0x1B6F7F0
	021 Move X0, 0x2287000
	022 Move X0, [X0+1272]
	023 Call 0x1B6F7F0
	024 Move W8, 1
	025 Move [X23+1382], W8
	026 And W2, W21, 1
	027 Move X0, X19
	028 Move X1, X20
	029 Move X3, X31
	030 Call NetworkBehaviour.Despawned, X0, X1, X2
	031 Move X0, [X22]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1B6F8F8
	036 Move X0, [X22]
	037 Move X8, [X0+184]
	038 Move X0, [X8]
	039 Compare X0, 0
	040 JumpIfEqual {53}
	041 Move X8, 0x2287000
	042 Move X8, [X8+1264]
	043 Move X1, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X2, [X8]
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Call HashSet`1<Object>.Remove, X0, X1
	052 Return 
	053 Call 0x1B6FA1C

Method: System.Void HandleTransmittingChanged()

Disassembly:
	0x01CC9744 ADD X0, X8, 0x138
	0x01CC9748 LDP X8, X4, [X0]
	0x01CC974C MOV X0, X20
	0x01CC9750 MOV W1, W21
	0x01CC9754 MOV W2, W22
	0x01CC9758 MOV W3, W23
	0x01CC975C BLR X8
	0x01CC9760 MOV X0, X19
	0x01CC9764 MOV X1, X31
	0x01CC9768 BL 0x33DD3DC
	0x01CC976C ADRP X8, 0x2284000
	0x01CC9770 LDR X8, [X8 + 0x860]
	0x01CC9774 MOV X20, X0
	0x01CC9778 MOVZ W1, 0x2
	0x01CC977C LDR X8, [X8]
	0x01CC9780 MOV X0, X8
	0x01CC9784 BL 0x1B6E868
	0x01CC9788 ADRP X8, 0x2286000
	0x01CC978C LDP V0, V1, [X31 + 0x40]
	0x01CC9790 LDR V2, [X31 + 0x6]
	0x01CC9794 LDR X8, [X8 + 0x5A0]
	0x01CC9798 MOV X21, X0
	0x01CC979C ADD X1, X31, 0x10
	0x01CC97A0 STP V0, V1, [X31 + 0x10]
	0x01CC97A4 LDR X0, [X8]
	0x01CC97A8 STR V2, [X31 + 0x3]
	0x01CC97AC BL 0x1B6E900

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call PlayerWatch.get_IsMine, X0
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {24}
	009 Move X0, X19
	010 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, -2147483648
	013 Compare TEMP, -2147483648
	014 JumpIfEqual {27}
	015 Move X0, [X19+144]
	016 Compare X0, 0
	017 JumpIfEqual {38}
	018 Move X1, X31
	019 Call AudioSource.Play, X0
	020 Move X0, [X19+160]
	021 Compare X0, 0
	022 JumpIfEqual {38}
	023 Move W1, 1
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Return 
	027 Move X0, [X19+152]
	028 Compare X0, 0
	029 JumpIfEqual {38}
	030 Move X1, X31
	031 Call AudioSource.Play, X0
	032 Move X0, [X19+160]
	033 Compare X0, 0
	034 JumpIfEqual {38}
	035 Move W1, W31
	036 Move X30, [X31+16]
	037 Move X19, [X31+24]
	038 Call 0x1B6FA1C

Method: System.Void ToggleDisplayChange()

Disassembly:
	0x01CC8CF4 TBZ X0, 0x0, 0x1CC8D34
	0x01CC8CF8 CBZ X20, 0x1CC8D58
	0x01CC8CFC LDR X8, [X20 + 0x80]
	0x01CC8D00 CBZ X8, 0x1CC8D58
	0x01CC8D04 LDR X8, [X8 + 0x98]
	0x01CC8D08 CBZ X8, 0x1CC8D58
	0x01CC8D0C LDR X1, [X8 + 0x50]
	0x01CC8D10 CBZ X1, 0x1CC8D30
	0x01CC8D14 LDR X0, [X19 + 0x88]
	0x01CC8D18 CBZ X0, 0x1CC8D58
	0x01CC8D1C BL 0x1CC90DC
	0x01CC8D20 LDR X0, [X19 + 0x88]
	0x01CC8D24 CBZ X0, 0x1CC8D58
	0x01CC8D28 BL 0x1CC9478
	0x01CC8D2C B 0x1CC8D34
	0x01CC8D30 MOV X20, X31
	0x01CC8D34 STR X20, [X19 + 0xC8]
	0x01CC8D38 LDP X20, X19, [X31 + 0xB0]
	0x01CC8D3C LDP X22, X21, [X31 + 0xA0]
	0x01CC8D40 LDP X24, X23, [X31 + 0x90]
	0x01CC8D44 LDP X30, X25, [X31 + 0x80]
	0x01CC8D48 LDP D9, D8, [X31 + 0x70]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call PlayerWatch.get_display, X0
	005 Compare X19, 0
	006 JumpIfEqual {26}
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X0, X19
	010 Call PlayerWatch.set_display, X0, X1
	011 Move X8, -18997248
	012 Move X9, -18997248
	013 Move V0, [X8+2644]
	014 Move V1, [X9+2736]
	015 Move W0, W31
	016 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	017 Move X8, -18997248
	018 Move X9, -18997248
	019 Move V0, [X8+3616]
	020 Move V1, [X9+3044]
	021 Move W0, 1
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	025 Return 
	026 Call 0x1B6FA1C

Method: System.Boolean IsRightHand(UnityEngine.Collider collider)

Disassembly:
	0x01CC9860 SUBS X9, X9, 0x1
	0x01CC9864 ADD X10, X10, 0x10
	0x01CC9868 B.NE 0x1CC9854
	0x01CC986C MOVZ W2, 0x1
	0x01CC9870 MOV X0, X20
	0x01CC9874 BL 0x1BB4284
	0x01CC9878 B 0x1CC988C
	0x01CC987C LDR W9, [X10]
	0x01CC9880 ADD W9, W9, 0x1
	0x01CC9884 ADD X8, X8, W9, 0x4, SXTW
	0x01CC9888 ADD X0, X8, 0x138
	0x01CC988C LDP X8, X4, [X0]
	0x01CC9890 MOVZ W1, 0x3
	0x01CC9894 MOV X0, X20
	0x01CC9898 MOV X2, X19
	0x01CC989C MOV X3, X21
	0x01CC98A0 BLR X8
	0x01CC98A4 MOVZ W0, 0x1
	0x01CC98A8 LDP X20, X19, [X31 + 0x90]
	0x01CC98AC LDP X22, X21, [X31 + 0x80]
	0x01CC98B0 LDP X30, X23, [X31 + 0x70]
	0x01CC98B4 ADD X31, X31, 0xA0
	0x01CC98B8 RET
	0x01CC98BC BL 0x1B6EA1C
	0x01CC98C0 BL 0x1B6EA24
	0x01CC98C4 BL 0x1B6EA40
	0x01CC98C8 MOV X1, X31
	0x01CC98CC BL 0x1B6E8E8
	0x01CC98D0 MOVN W8, 0x0
	0x01CC98D4 MOV X1, X31
	0x01CC98D8 STR W8, [X0 + 0xA8]
	0x01CC98DC B 0x1D661D8
	0x01CC98E0 STR X30, [X31 - 0x30]!
	0x01CC98E4 STP X22, X21, [X31 + 0x10]
	0x01CC98E8 STP X20, X19, [X31 + 0x20]
	0x01CC98EC ADRP X21, 0x255A000
	0x01CC98F0 ADRP X22, 0x2286000
	0x01CC98F4 ADRP X19, 0x2286000
	0x01CC98F8 ADRP X20, 0x2286000
	0x01CC98FC LDRB W8, [X21 + 0x569]
	0x01CC9900 LDR X22, [X22 + 0x5C0]
	0x01CC9904 LDR X19, [X19 + 0x5C8]
	0x01CC9908 LDR X20, [X20 + 0x4F8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x255B000
	005 Move W8, [X20+1383]
	006 Move X19, X1
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x2287000
	012 Move X0, [X0+752]
	013 Call 0x1B6F7F0
	014 Move X0, 0x2285000
	015 Move X0, [X0+1144]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1383], W8
	019 Compare X19, 0
	020 JumpIfEqual {53}
	021 Move X8, 0x2287000
	022 Move X8, [X8+752]
	023 Move X20, 0x2285000
	024 Move X0, X19
	025 Move X1, [X8]
	026 Move X20, [X20+1144]
	027 Call 0x2090DE8, X0
	028 Move X8, [X20]
	029 Move X19, X0
	030 Move W9, [X8+224]
	031 Compare W9, 0
	032 JumpIfNotEqual {35}
	033 Move X0, X8
	034 Call 0x1B6F8F8
	035 Move X0, X19
	036 Move X1, X31
	037 Move X2, X31
	038 Call Object.op_Equality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {44}
	043 Move W0, W31
	044 Compare X19, 0
	045 JumpIfEqual {53}
	046 Move W8, [X19+164]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CSET not yet implemented."
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Return X0
	053 Call 0x1B6FA1C

Method: System.Void Render()

Disassembly:
	0x01CC990C TBNZ X8, 0x0, 0x1CC993C
	0x01CC9910 ADRP X0, 0x2286000
	0x01CC9914 LDR X0, [X0 + 0x5C8]
	0x01CC9918 BL 0x1B6E7F0
	0x01CC991C ADRP X0, 0x2286000
	0x01CC9920 LDR X0, [X0 + 0x5C0]
	0x01CC9924 BL 0x1B6E7F0
	0x01CC9928 ADRP X0, 0x2286000
	0x01CC992C LDR X0, [X0 + 0x4F8]
	0x01CC9930 BL 0x1B6E7F0
	0x01CC9934 MOVZ W8, 0x1
	0x01CC9938 STRB W8, [X21 + 0x569]
	0x01CC993C LDR X0, [X22]
	0x01CC9940 BL 0x1B6EA0C
	0x01CC9944 LDR X1, [X19]
	0x01CC9948 MOV X19, X0
	0x01CC994C BL 0x2BD32D4
	0x01CC9950 LDR X8, [X20]
	0x01CC9954 LDP X22, X21, [X31 + 0x10]
	0x01CC9958 LDR X8, [X8 + 0xB8]
	0x01CC995C STR X19, [X8]
	0x01CC9960 LDP X20, X19, [X31 + 0x20]
	0x01CC9964 LDR X30, [X31], #0x30
	0x01CC9968 RET
	0x01CC996C STP X30, X19, [X31 - 0x10]!
	0x01CC9970 LDR W1, [X0 + 0xA8]
	0x01CC9974 MOV X19, X0
	0x01CC9978 BL 0x1CC6894
	0x01CC997C LDR W1, [X19 + 0xAC]
	0x01CC9980 MOV X0, X19
	0x01CC9984 BL 0x1CC6954
	0x01CC9988 LDR W1, [X19 + 0xB0]
	0x01CC998C MOV X0, X19
	0x01CC9990 BL 0x1CC6A14
	0x01CC9994 LDR W1, [X19 + 0xB8]
	0x01CC9998 MOV X0, X19
	0x01CC999C LDP X30, X19, [X31], #0x10
	0x01CC99A0 B 0x1CC6AD4
	0x01CC99A4 STP X30, X19, [X31 - 0x10]!
	0x01CC99A8 MOV X19, X0
	0x01CC99AC BL 0x1CC6834
	0x01CC99B0 STR W0, [X19 + 0xA8]
	0x01CC99B4 MOV X0, X19
	0x01CC99B8 BL 0x1CC68F4
	0x01CC99BC STR W0, [X19 + 0xAC]
	0x01CC99C0 MOV X0, X19
	0x01CC99C4 BL 0x1CC69B4
	0x01CC99C8 STR W0, [X19 + 0xB0]
	0x01CC99CC MOV X0, X19
	0x01CC99D0 BL 0x1CC6A74
	0x01CC99D4 STR W0, [X19 + 0xB8]
	0x01CC99D8 LDP X30, X19, [X31], #0x10
	0x01CC99DC RET
	0x01CC99E0 STP X30, X21, [X31 - 0x20]!
	0x01CC99E4 STP X20, X19, [X31 + 0x10]
	0x01CC99E8 ADRP X21, 0x255A000
	0x01CC99EC LDRB W8, [X21 + 0x56A]
	0x01CC99F0 MOV X20, X1
	0x01CC99F4 MOV X19, X0
	0x01CC99F8 TBNZ X8, 0x0, 0x1CC9A10
	0x01CC99FC ADRP X0, 0x2286000
	0x01CC9A00 LDR X0, [X0 + 0x4F8]
	0x01CC9A04 BL 0x1B6E7F0
	0x01CC9A08 MOVZ W8, 0x1
	0x01CC9A0C STRB W8, [X21 + 0x56A]
	0x01CC9A10 MOVZ W0, 0x1
	0x01CC9A14 MOV X1, X31
	0x01CC9A18 MOVZ W21, 0x1
	0x01CC9A1C BL 0x1D29EBC
	0x01CC9A20 CBZ X19, 0x1CC9A7C
	0x01CC9A24 ADRP X8, 0x2286000
	0x01CC9A28 LDR X8, [X8 + 0x4F8]
	0x01CC9A2C LDR W1, [X20 + 0x24]
	0x01CC9A30 STRB W21, [X19 + 0x58]
	0x01CC9A34 LDR X9, [X19]
	0x01CC9A38 LDR X8, [X8]
	0x01CC9A3C LDRB W11, [X9 + 0x130]
	0x01CC9A40 LDRB W10, [X8 + 0x130]
	0x01CC9A44 CMP W11, W10
	0x01CC9A48 B.CC 0x1CC9A70
	0x01CC9A4C LDR X9, [X9 + 0xC8]
	0x01CC9A50 ADD X9, X9, X10, 0x3, LSL
	0x01CC9A54 LDUR X9, [X9 - 0x8]
	0x01CC9A58 CMP X9, X8
	0x01CC9A5C B.NE 0x1CC9A70
	0x01CC9A60 MOV X0, X19
	0x01CC9A64 LDP X20, X19, [X31 + 0x10]
	0x01CC9A68 LDP X30, X21, [X31], #0x20
	0x01CC9A6C B 0x1CC7A90
	0x01CC9A70 MOV X0, X19
	0x01CC9A74 MOV X1, X8
	0x01CC9A78 BL 0x1B6ECDC
	0x01CC9A7C BL 0x1B6EA1C
	0x01CC9A80 LDR X0, [X0 + 0xB8]
	0x01CC9A84 RET
	0x01CC9A88 SUB X31, X31, 0x90
	0x01CC9A8C STP D15, D14, [X31 + 0x30]
	0x01CC9A90 STP D13, D12, [X31 + 0x40]
	0x01CC9A94 STP D11, D10, [X31 + 0x50]
	0x01CC9A98 STP D9, D8, [X31 + 0x60]
	0x01CC9A9C STR X30, [X31 + 0x70]
	0x01CC9AA0 STP X20, X19, [X31 + 0x80]
	0x01CC9AA4 ADRP X20, 0x255A000
	0x01CC9AA8 LDRB W8, [X20 + 0x50F]
	0x01CC9AAC MOV X19, X0
	0x01CC9AB0 CBNZ W8, 0x1CC9AC8
	0x01CC9AB4 ADRP X0, 0x2284000
	0x01CC9AB8 LDR X0, [X0 + 0x480]
	0x01CC9ABC BL 0x1B6E7F0
	0x01CC9AC0 MOVZ W8, 0x1
	0x01CC9AC4 STRB W8, [X20 + 0x50F]
	0x01CC9AC8 ADRP X8, 0x2284000
	0x01CC9ACC LDR X8, [X8 + 0x480]
	0x01CC9AD0 LDR X8, [X8]
	0x01CC9AD4 LDR X8, [X8 + 0xB8]
	0x01CC9AD8 LDR V0, [X8 + 0x48]
	0x01CC9ADC LDR V1, [X8 + 0x50]
	0x01CC9AE0 STR D0, [X31 + 0x20]
	0x01CC9AE4 STR S1, [X31 + 0x28]
	0x01CC9AE8 LDR X0, [X19 + 0x80]
	0x01CC9AEC CBZ X0, 0x1CC9BE0
	0x01CC9AF0 MOV X1, X31
	0x01CC9AF4 BL 0x3AA7568
	0x01CC9AF8 CBZ X0, 0x1CC9BE0
	0x01CC9AFC MOV X1, X31
	0x01CC9B00 BL 0x3AA7AD0
	0x01CC9B04 FNEG S0, S0
	0x01CC9B08 FNEG S1, S1
	0x01CC9B0C FNEG S2, S2
	0x01CC9B10 ADD X0, X31, 0x10
	0x01CC9B14 ADD X1, X31, 0x20
	0x01CC9B18 MOV X2, X31
	0x01CC9B1C STP S0, S1, [X31 + 0x10]
	0x01CC9B20 STR S2, [X31 + 0x18]
	0x01CC9B24 BL 0x3A90F14
	0x01CC9B28 LDR X19, [X19 + 0x80]
	0x01CC9B2C CBZ X19, 0x1CC9BE0
	0x01CC9B30 MOV X0, X19
	0x01CC9B34 MOV X1, X31
	0x01CC9B38 BL 0x3AA5FBC
	0x01CC9B3C LDP S6, S4, [X31 + 0x10]
	0x01CC9B40 MOV V8.16B, V0.16B
	0x01CC9B44 MOV V9.16B, V1.16B
	0x01CC9B48 MOV V10.16B, V2.16B
	0x01CC9B4C LDP S0, S1, [X31 + 0x20]
	0x01CC9B50 LDR V2, [X31 + 0x28]
	0x01CC9B54 LDR V5, [X31 + 0x18]
	0x01CC9B58 MOV V11.16B, V3.16B
	0x01CC9B5C MOV V3.16B, V6.16B
	0x01CC9B60 MOV X0, X31
	0x01CC9B64 BL 0x3A92B78
	0x01CC9B68 MOV X0, X31
	0x01CC9B6C MOV V12.16B, V0.16B
	0x01CC9B70 MOV V13.16B, V1.16B
	0x01CC9B74 MOV V14.16B, V2.16B
	0x01CC9B78 MOV V15.16B, V3.16B
	0x01CC9B7C BL 0x3AA481C
	0x01CC9B80 FMOV S1, 5
	0x01CC9B84 FMUL S0, S0, S1
	0x01CC9B88 STR S0, [X31]
	0x01CC9B8C MOV V0.16B, V8.16B
	0x01CC9B90 MOV V1.16B, V9.16B
	0x01CC9B94 MOV V2.16B, V10.16B
	0x01CC9B98 MOV V3.16B, V11.16B
	0x01CC9B9C MOV V4.16B, V12.16B
	0x01CC9BA0 MOV V5.16B, V13.16B
	0x01CC9BA4 MOV V6.16B, V14.16B
	0x01CC9BA8 MOV V7.16B, V15.16B
	0x01CC9BAC MOV X0, X31
	0x01CC9BB0 BL 0x3A92734
	0x01CC9BB4 MOV X0, X19
	0x01CC9BB8 MOV X1, X31
	0x01CC9BBC BL 0x3AA7878
	0x01CC9BC0 LDP X20, X19, [X31 + 0x80]
	0x01CC9BC4 LDR X30, [X31 + 0x70]
	0x01CC9BC8 LDP D9, D8, [X31 + 0x60]
	0x01CC9BCC LDP D11, D10, [X31 + 0x50]
	0x01CC9BD0 LDP D13, D12, [X31 + 0x40]
	0x01CC9BD4 LDP D15, D14, [X31 + 0x30]
	0x01CC9BD8 ADD X31, X31, 0x90
	0x01CC9BDC RET
	0x01CC9BE0 BL 0x1B6EA1C
	0x01CC9BE4 STR X30, [X31 - 0x20]!
	0x01CC9BE8 STP X20, X19, [X31 + 0x10]
	0x01CC9BEC ADRP X20, 0x255A000
	0x01CC9BF0 LDRB W8, [X20 + 0x56B]
	0x01CC9BF4 MOV W19, W1
	0x01CC9BF8 STR W1, [X31 + 0xC]
	0x01CC9BFC TBNZ X8, 0x0, 0x1CC9C2C
	0x01CC9C00 ADRP X0, 0x2286000
	0x01CC9C04 LDR X0, [X0 + 0x5D0]
	0x01CC9C08 BL 0x1B6E7F0
	0x01CC9C0C ADRP X0, 0x2286000
	0x01CC9C10 LDR X0, [X0 + 0x5D8]
	0x01CC9C14 BL 0x1B6E7F0
	0x01CC9C18 ADRP X0, 0x2286000
	0x01CC9C1C LDR X0, [X0 + 0x330]
	0x01CC9C20 BL 0x1B6E7F0
	0x01CC9C24 MOVZ W8, 0x1
	0x01CC9C28 STRB W8, [X20 + 0x56B]
	0x01CC9C2C MOVZ W8, 0x2711
	0x01CC9C30 CMP W19, W8
	0x01CC9C34 STR W31, [X31 + 0x8]
	0x01CC9C38 B.GE 0x1CC9C58
	0x01CC9C3C ADRP X8, 0x2286000
	0x01CC9C40 LDR X8, [X8 + 0x330]
	0x01CC9C44 ADD X0, X31, 0xC
	0x01CC9C48 MOV X2, X31
	0x01CC9C4C LDR X1, [X8]
	0x01CC9C50 BL 0x31E4DA8
	0x01CC9C54 B 0x1CC9C98
	0x01CC9C58 ADRP X8, 0x2286000
	0x01CC9C5C LDR X8, [X8 + 0x5D8]
	0x01CC9C60 ADRP X20, 0x2286000
	0x01CC9C64 LDR X20, [X20 + 0x5D0]
	0x01CC9C68 MOVZ W9, 0x4DD3
	0x01CC9C6C LDR X1, [X8]
	0x01CC9C70 MOVK W9, 0x10620000
	0x01CC9C74 UMADDL X8, X19, X9, X31
	0x01CC9C78 UBFM X8, X8, 0x26, 0x3F
	0x01CC9C7C ADD X0, X31, 0x8
	0x01CC9C80 MOV X2, X31
	0x01CC9C84 STR W8, [X31 + 0x8]
	0x01CC9C88 BL 0x31E4DA8
	0x01CC9C8C LDR X1, [X20]
	0x01CC9C90 MOV X2, X31
	0x01CC9C94 BL 0x3084780
	0x01CC9C98 LDP X20, X19, [X31 + 0x10]
	0x01CC9C9C LDR X30, [X31], #0x20
	0x01CC9CA0 RET
	0x01CC9CA4 STR D8, [X31 - 0x20]!
	0x01CC9CA8 STR X30, [X31 + 0x8]
	0x01CC9CAC STP X20, X19, [X31 + 0x10]
	0x01CC9CB0 ADRP X20, 0x255A000
	0x01CC9CB4 LDRB W8, [X20 + 0x574]
	0x01CC9CB8 MOV V8.16B, V0.16B
	0x01CC9CBC MOV X19, X0
	0x01CC9CC0 TBNZ X8, 0x0, 0x1CC9CD8
	0x01CC9CC4 ADRP X0, 0x2286000
	0x01CC9CC8 LDR X0, [X0 + 0x508]
	0x01CC9CCC BL 0x1B6E7F0
	0x01CC9CD0 MOVZ W8, 0x1
	0x01CC9CD4 STRB W8, [X20 + 0x574]
	0x01CC9CD8 LDR X0, [X19 + 0x28]
	0x01CC9CDC CBZ X0, 0x1CC9D34
	0x01CC9CE0 ADRP X20, 0x2286000
	0x01CC9CE4 LDR X20, [X20 + 0x508]
	0x01CC9CE8 MOV X1, X31
	0x01CC9CEC BL 0x3A7BCC8
	0x01CC9CF0 LDR X8, [X20]
	0x01CC9CF4 MOV X19, X0
	0x01CC9CF8 LDR W9, [X8 + 0xE0]
	0x01CC9CFC CBNZ W9, 0x1CC9D08
	0x01CC9D00 MOV X0, X8
	0x01CC9D04 BL 0x1B6E8F8
	0x01CC9D08 CBZ X19, 0x1CC9D34
	0x01CC9D0C LDR X8, [X20]
	0x01CC9D10 MOV X0, X19
	0x01CC9D14 LDP X20, X19, [X31 + 0x10]
	0x01CC9D18 LDR X30, [X31 + 0x8]
	0x01CC9D1C LDR X8, [X8 + 0xB8]
	0x01CC9D20 MOV V0.16B, V8.16B
	0x01CC9D24 MOV X2, X31
	0x01CC9D28 LDR W1, [X8 + 0x4]
	0x01CC9D2C LDR V8, [X31], #0x20
	0x01CC9D30 B 0x3A7E584
	0x01CC9D34 BL 0x1B6EA1C
	0x01CC9D38 STR D8, [X31 - 0x20]!
	0x01CC9D3C STR X30, [X31 + 0x8]
	0x01CC9D40 STP X20, X19, [X31 + 0x10]
	0x01CC9D44 ADRP X20, 0x255A000
	0x01CC9D48 LDRB W8, [X20 + 0x576]
	0x01CC9D4C MOV V8.16B, V0.16B
	0x01CC9D50 MOV X19, X0
	0x01CC9D54 TBNZ X8, 0x0, 0x1CC9D6C
	0x01CC9D58 ADRP X0, 0x2286000
	0x01CC9D5C LDR X0, [X0 + 0x508]
	0x01CC9D60 BL 0x1B6E7F0
	0x01CC9D64 MOVZ W8, 0x1
	0x01CC9D68 STRB W8, [X20 + 0x576]
	0x01CC9D6C LDR X0, [X19 + 0x28]
	0x01CC9D70 CBZ X0, 0x1CC9DC8
	0x01CC9D74 ADRP X20, 0x2286000
	0x01CC9D78 LDR X20, [X20 + 0x508]
	0x01CC9D7C MOV X1, X31
	0x01CC9D80 BL 0x3A7BCC8
	0x01CC9D84 LDR X8, [X20]
	0x01CC9D88 MOV X19, X0
	0x01CC9D8C LDR W9, [X8 + 0xE0]
	0x01CC9D90 CBNZ W9, 0x1CC9D9C
	0x01CC9D94 MOV X0, X8
	0x01CC9D98 BL 0x1B6E8F8
	0x01CC9D9C CBZ X19, 0x1CC9DC8
	0x01CC9DA0 LDR X8, [X20]
	0x01CC9DA4 MOV X0, X19
	0x01CC9DA8 LDP X20, X19, [X31 + 0x10]
	0x01CC9DAC LDR X30, [X31 + 0x8]
	0x01CC9DB0 LDR X8, [X8 + 0xB8]
	0x01CC9DB4 MOV V0.16B, V8.16B
	0x01CC9DB8 MOV X2, X31
	0x01CC9DBC LDR W1, [X8 + 0xC]
	0x01CC9DC0 LDR V8, [X31], #0x20
	0x01CC9DC4 B 0x3A7E584
	0x01CC9DC8 BL 0x1B6EA1C
	0x01CC9DCC STR X30, [X31 - 0x30]!
	0x01CC9DD0 STP X22, X21, [X31 + 0x10]
	0x01CC9DD4 STP X20, X19, [X31 + 0x20]
	0x01CC9DD8 ADRP X22, 0x255A000
	0x01CC9DDC ADRP X21, 0x2286000
	0x01CC9DE0 LDRB W8, [X22 + 0x56E]
	0x01CC9DE4 LDR X21, [X21 + 0x518]
	0x01CC9DE8 MOV W20, W1
	0x01CC9DEC MOV X19, X0
	0x01CC9DF0 TBNZ X8, 0x0, 0x1CC9E08
	0x01CC9DF4 ADRP X0, 0x2286000
	0x01CC9DF8 LDR X0, [X0 + 0x518]
	0x01CC9DFC BL 0x1B6E7F0
	0x01CC9E00 MOVZ W8, 0x1
	0x01CC9E04 STRB W8, [X22 + 0x56E]
	0x01CC9E08 LDR X19, [X19 + 0x30]
	0x01CC9E0C MOV W1, W20
	0x01CC9E10 BL 0x1CC9BE4
	0x01CC9E14 LDR X8, [X21]
	0x01CC9E18 MOV X1, X0
	0x01CC9E1C MOV X2, X31
	0x01CC9E20 MOV X0, X8
	0x01CC9E24 BL 0x3084780

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], D11
	003 Move [X31+104], D10
	004 Move [X31+112], D9
	005 Move [X31+120], D8
	006 Move [X31+128], X30
	007 Move [X31+136], X25
	008 Move [X31+144], X24
	009 Move [X31+152], X23
	010 Move [X31+160], X22
	011 Move [X31+168], X21
	012 Move [X31+176], X20
	013 Move [X31+184], X19
	014 Move X20, 0x255B000
	015 Move W8, [X20+1384]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {53}
	021 Move X0, 0x2287000
	022 Move X0, [X0+1312]
	023 Call 0x1B6F7F0
	024 Move X0, 0x2287000
	025 Move X0, [X0+1320]
	026 Call 0x1B6F7F0
	027 Move X0, 0x2287000
	028 Move X0, [X0+1328]
	029 Call 0x1B6F7F0
	030 Move X0, 0x2287000
	031 Move X0, [X0+1336]
	032 Call 0x1B6F7F0
	033 Move X0, 0x2287000
	034 Move X0, [X0+1344]
	035 Call 0x1B6F7F0
	036 Move X0, 0x2287000
	037 Move X0, [X0+1264]
	038 Call 0x1B6F7F0
	039 Move X0, 0x2286000
	040 Move X0, [X0+680]
	041 Call 0x1B6F7F0
	042 Move X0, 0x2285000
	043 Move X0, [X0+1144]
	044 Call 0x1B6F7F0
	045 Move X0, 0x2287000
	046 Move X0, [X0+1272]
	047 Call 0x1B6F7F0
	048 Move X0, 0x2287000
	049 Move X0, [X0+1352]
	050 Call 0x1B6F7F0
	051 Move W8, 1
	052 Move [X20+1384], W8
	053 Move X0, X19
	054 Move X1, X31
	055 Move [X31+80], X31
	056 Move [X31+88], X31
	057 Move [X31+32], X31
	058 Move [X31+40], X31
	059 Move [X31+48], X31
	060 Move [X31+24], X31
	061 Call SimulationBehaviour.Render, X0
	062 Move X0, [X19+192]
	063 Compare X0, 0
	064 JumpIfEqual {340}
	065 Move W2, 1
	066 Move X1, X19
	067 Move X3, X31
	068 Call ChangeDetector.DetectChanges, X0, X1, X2
	069 Move [X31+64], X0
	070 Move [X31+72], X1
	071 Add X0, X31, 64
	072 Move X1, X31
	073 Call Enumerable.GetEnumerator, X0
	074 Move [X31+80], X0
	075 Move [X31+88], X1
	076 Add X0, X31, 80
	077 Move X1, X31
	078 Call Enumerator.MoveNext, X0
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {132}
	083 Move X21, 0x2287000
	084 Move X22, 0x2287000
	085 Move X23, 0x2287000
	086 Move X24, 0x2287000
	087 Move X21, [X21+1352]
	088 Move X22, [X22+1272]
	089 Move X23, [X23+1336]
	090 Move X24, [X24+1264]
	091 Add X0, X31, 80
	092 Move X1, X31
	093 Call Enumerator.get_Current, X0
	094 Move X1, [X21]
	095 Move X2, X31
	096 Call String.op_Equality, X0, X1
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {125}
	101 Move X0, X19
	102 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	103 Move X8, [X22]
	104 Move W20, W0
	105 Move W9, [X8+224]
	106 Compare W9, 0
	107 JumpIfNotEqual {111}
	108 Move X0, X8
	109 Call 0x1B6F8F8
	110 Move X8, [X22]
	111 Move X8, [X8+184]
	112 Move X0, [X8]
	113 Compare X0, 0
	114 JumpIfEqual {354}
	115 Move TEMP, X20
	116 And TEMP, TEMP, -2147483648
	117 Compare TEMP, -2147483648
	118 JumpIfEqual {122}
	119 Move X2, [X23]
	120 Move X1, X19
	121 Call HashSet`1<Object>.Add, X0, X1
	122 Move X2, [X24]
	123 Move X1, X19
	124 Call HashSet`1<Object>.Remove, X0, X1
	125 Add X0, X31, 80
	126 Move X1, X31
	127 Call Enumerator.MoveNext, X0
	128 Move TEMP, X0
	129 And TEMP, TEMP, 1
	130 Compare TEMP, 1
	131 JumpIfEqual {91}
	132 Move X0, X19
	133 Call PlayerWatch.get_IsMine, X0
	134 Move TEMP, X0
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfNotEqual {340}
	138 Move X0, X19
	139 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	140 Move TEMP, X0
	141 And TEMP, TEMP, -2147483648
	142 Compare TEMP, -2147483648
	143 JumpIfEqual {145}
	144 Move X20, X31
	145 Move X20, 0x2287000
	146 Move X20, [X20+1272]
	147 Move X0, [X20]
	148 Move W8, [X0+224]
	149 Compare W8, 0
	150 JumpIfNotEqual {153}
	151 Call 0x1B6F8F8
	152 Move X0, [X20]
	153 Move X8, [X0+184]
	154 Move X0, [X8]
	155 Compare X0, 0
	156 JumpIfEqual {354}
	157 Move X8, 0x2287000
	158 Move X8, [X8+1344]
	159 Move X1, [X8]
	160 Add X8, X31, 0
	161 Call HashSet`1<Object>.GetEnumerator, X0
	162 Move V0, [X31]
	163 Move X8, [X31+16]
	164 Move X23, 0x2287000
	165 Move X24, 0x2285000
	166 Move X23, [X23+1320]
	167 Move X24, [X24+1144]
	168 Move [X31+2], V0
	169 Move [X31+48], X8
	170 Move X25, 0x2286000
	171 Move X25, [X25+680]
	172 Move W9, 0x7F800000
	173 Move X20, X31
	174 Move S11, W9
	175 Move X1, [X23]
	176 Add X0, X31, 32
	177 Call Enumerator<Object>.MoveNext, X0
	178 Move TEMP, X0
	179 And TEMP, TEMP, 1
	180 Compare TEMP, 1
	181 JumpIfNotEqual {263}
	182 Move X0, [X24]
	183 Move X22, [X31+48]
	184 Move W8, [X0+224]
	185 Compare W8, 0
	186 JumpIfNotEqual {188}
	187 Call 0x1B6F8F8
	188 Move X0, X22
	189 Move X1, X31
	190 Move X2, X31
	191 Call Object.op_Equality, X0, X1
	192 Move TEMP, X0
	193 And TEMP, TEMP, 1
	194 Compare TEMP, 1
	195 JumpIfEqual {175}
	196 Compare X22, 0
	197 JumpIfEqual {355}
	198 Move X0, X22
	199 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	200 Move W21, W0
	201 Move TEMP, X0
	202 And TEMP, TEMP, -2147483648
	203 Compare TEMP, -2147483648
	204 JumpIfEqual {175}
	205 Move X0, X22
	206 Call PlayerWatch.get_channel, X0
	207 Move W22, W0
	208 Move X0, X19
	209 Call PlayerWatch.get_channel, X0
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move X0, [X25]
	212 Move W8, [X0+224]
	213 Compare W8, 0
	214 JumpIfNotEqual {216}
	215 Call 0x1B6F8F8
	216 Add X1, X31, 24
	217 Move W0, W21
	218 Move X2, X31
	219 Call NetPlayer.TryGetPlayerByID, X0, X1
	220 Move TEMP, X0
	221 And TEMP, TEMP, 1
	222 Compare TEMP, 1
	223 JumpIfNotEqual {175}
	224 Move X0, [X31+24]
	225 Compare X0, 0
	226 JumpIfEqual {356}
	227 Move X1, X31
	228 Call NetPlayer.get_IsMine, X0
	229 Move TEMP, X0
	230 And TEMP, TEMP, 1
	231 Compare TEMP, 1
	232 JumpIfEqual {175}
	233 Move X0, [X31+24]
	234 Compare X0, 0
	235 JumpIfEqual {358}
	236 Move X1, X31
	237 Call Component.get_transform, X0
	238 Compare X0, 0
	239 JumpIfEqual {357}
	240 Move X1, X31
	241 Call Transform.get_position, X0
	242 Move V8, V0
	243 Move V9, V1
	244 Move V10, V2
	245 Move X0, X19
	246 Move X1, X31
	247 Call Component.get_transform, X0
	248 Compare X0, 0
	249 JumpIfEqual {359}
	250 Move X1, X31
	251 Call Transform.get_position, X0
	252 Subtract S0, S8, S0
	253 Subtract S1, S9, S1
	254 Subtract S2, S10, S2
	255 Multiply S0, S0, S0
	256 Multiply S1, S1, S1
	257 Add S0, S0, S1
	258 Multiply S1, S2, S2
	259 Add S0, S1, S0
	260 NotImplemented "Instruction FCMP not yet implemented."
	261 Move X20, [X31+24]
	262 Move V11, V0
	263 Move X8, 0x2287000
	264 Move X8, [X8+1312]
	265 Add X0, X31, 32
	266 Move X1, [X8]
	267 Call Enumerator<Object>.Dispose, X0
	268 Move X22, 0x2285000
	269 Move X22, [X22+1144]
	270 Move X21, [X19+200]
	271 Move X0, [X22]
	272 Move W8, [X0+224]
	273 Compare W8, 0
	274 JumpIfNotEqual {276}
	275 Call 0x1B6F8F8
	276 Move X0, X20
	277 Move X1, X21
	278 Move X2, X31
	279 Call Object.op_Inequality, X0, X1
	280 Move TEMP, X0
	281 And TEMP, TEMP, 1
	282 Compare TEMP, 1
	283 JumpIfNotEqual {340}
	284 Move X0, [X22]
	285 Move X21, [X19+200]
	286 Move W8, [X0+224]
	287 Compare W8, 0
	288 JumpIfNotEqual {290}
	289 Call 0x1B6F8F8
	290 Move X0, X21
	291 Move X1, X31
	292 Move X2, X31
	293 Call Object.op_Inequality, X0, X1
	294 Move TEMP, X0
	295 And TEMP, TEMP, 1
	296 Compare TEMP, 1
	297 JumpIfNotEqual {306}
	298 Move X0, [X19+136]
	299 Compare X0, 0
	300 JumpIfEqual {354}
	301 Call WalkieTalkieSpeaker.StopPlayback, X0
	302 Move X0, [X19+136]
	303 Compare X0, 0
	304 JumpIfEqual {354}
	305 Call WalkieTalkieSpeaker.Unlink, X0
	306 Move X0, [X22]
	307 Move W8, [X0+224]
	308 Compare W8, 0
	309 JumpIfNotEqual {311}
	310 Call 0x1B6F8F8
	311 Move X0, X20
	312 Move X1, X31
	313 Move X2, X31
	314 Call Object.op_Inequality, X0, X1
	315 Move TEMP, X0
	316 And TEMP, TEMP, 1
	317 Compare TEMP, 1
	318 JumpIfNotEqual {339}
	319 Compare X20, 0
	320 JumpIfEqual {354}
	321 Move X8, [X20+128]
	322 Compare X8, 0
	323 JumpIfEqual {354}
	324 Move X8, [X8+152]
	325 Compare X8, 0
	326 JumpIfEqual {354}
	327 Move X1, [X8+80]
	328 Compare X1, 0
	329 JumpIfEqual {338}
	330 Move X0, [X19+136]
	331 Compare X0, 0
	332 JumpIfEqual {354}
	333 Call WalkieTalkieSpeaker.Link, X0, X1
	334 Move X0, [X19+136]
	335 Compare X0, 0
	336 JumpIfEqual {354}
	337 Call WalkieTalkieSpeaker.StartPlayback, X0
	338 Move X20, X31
	339 Move [X19+200], X20
	340 Move X20, [X31+176]
	341 Move X19, [X31+184]
	342 Move X22, [X31+160]
	343 Move X21, [X31+168]
	344 Move X24, [X31+144]
	345 Move X23, [X31+152]
	346 Move X30, [X31+128]
	347 Move X25, [X31+136]
	348 Move D9, [X31+112]
	349 Move D8, [X31+120]
	350 Move D11, [X31+96]
	351 Move D10, [X31+104]
	352 Add X31, X31, 192
	353 Return 
	354 Call 0x1B6FA1C
	355 Call 0x1B6FA1C
	356 Call 0x1B6FA1C
	357 Call 0x1B6FA1C
	358 Call 0x1B6FA1C
	359 Call 0x1B6FA1C
	360 Move X21, X0
	361 NotImplemented "Instruction CMP not yet implemented."
	362 Move X0, X21
	363 Call 0x3D1A840
	364 Move X22, [X0]
	365 Call 0x3D1A850
	366 Move X8, 0x2287000
	367 Move X8, [X8+1312]
	368 Add X0, X31, 32
	369 Move X1, [X8]
	370 Call Enumerator<Object>.Dispose, X0
	371 Compare X22, 0
	372 JumpIfEqual {268}
	373 Move X0, X22
	374 Call 0x1B6FA14
	375 Move X22, X31
	376 Move X21, X0
	377 Move X8, 0x2287000
	378 Move X8, [X8+1312]
	379 Move X1, [X8]
	380 Add X0, X31, 32
	381 Call Enumerator<Object>.Dispose, X0
	382 Compare X22, 0
	383 JumpIfNotEqual {386}
	384 Move X0, X21
	385 Call 0x1C8518C
	386 Move X0, X22
	387 Call 0x1B6FA14
	388 Call 0x18F56A8

Method: System.Void .ctor()

Disassembly:
	0x01CCA8D0 MOV X0, X20
	0x01CCA8D4 BL 0x1BB41DC
	0x01CCA8D8 LDR X8, [X20 + 0x38]
	0x01CCA8DC LDR X0, [X8 + 0x10]

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W8, TEMP
	004 Move X1, X31
	005 Move [X0+168], W8
	006 Call NetworkBehaviour..ctor, X0
	007 Return 

Method: System.Void .cctor()

Disassembly:
	0x01CCA8E0 LDRB W8, [X0 + 0x135]
	0x01CCA8E4 TBNZ X8, 0x0, 0x1CCA8EC
	0x01CCA8E8 BL 0x1BB4180
	0x01CCA8EC LDR W8, [X0 + 0xE0]
	0x01CCA8F0 CBNZ W8, 0x1CCA8F8
	0x01CCA8F4 BL 0x1B6E8F8
	0x01CCA8F8 LDR X8, [X20 + 0x38]
	0x01CCA8FC LDR X0, [X8 + 0x10]
	0x01CCA900 LDRB W8, [X0 + 0x135]
	0x01CCA904 TBNZ X8, 0x0, 0x1CCA90C
	0x01CCA908 BL 0x1BB4180
	0x01CCA90C CBZ X19, 0x1CCA99C
	0x01CCA910 ADRP X10, 0x2285000
	0x01CCA914 LDR X9, [X0 + 0xB8]
	0x01CCA918 LDR X8, [X19]
	0x01CCA91C LDR X10, [X10 + 0x638]
	0x01CCA920 LDR X1, [X24]
	0x01CCA924 LDR X20, [X9]
	0x01CCA928 LDRH W9, [X8 + 0x12E]
	0x01CCA92C LDR X21, [X10]
	0x01CCA930 CBZ X9, 0x1CCA954
	0x01CCA934 LDR X10, [X8 + 0xB0]
	0x01CCA938 ADD X10, X10, 0x8
	0x01CCA93C LDUR X11, [X10 - 0x8]
	0x01CCA940 CMP X11, X1
	0x01CCA944 B.EQ 0x1CCA964
	0x01CCA948 SUBS X9, X9, 0x1
	0x01CCA94C ADD X10, X10, 0x10
	0x01CCA950 B.NE 0x1CCA93C
	0x01CCA954 MOVZ W2, 0x1
	0x01CCA958 MOV X0, X19
	0x01CCA95C BL 0x1BB4284
	0x01CCA960 B 0x1CCA974
	0x01CCA964 LDR W9, [X10]
	0x01CCA968 ADD W9, W9, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x255A000
	007 Move X22, 0x2286000
	008 Move X19, 0x2286000
	009 Move X20, 0x2286000
	010 Move W8, [X21+1385]
	011 Move X22, [X22+1472]
	012 Move X19, [X19+1480]
	013 Move X20, [X20+1272]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x2286000
	019 Move X0, [X0+1480]
	020 Call 0x1B6F7F0
	021 Move X0, 0x2286000
	022 Move X0, [X0+1472]
	023 Call 0x1B6F7F0
	024 Move X0, 0x2286000
	025 Move X0, [X0+1272]
	026 Call 0x1B6F7F0
	027 Move W8, 1
	028 Move [X21+1385], W8
	029 Move X0, [X22]
	030 Call 0x1B6FA0C
	031 Move X1, [X19]
	032 Move X19, X0
	033 Call HashSet`1<Object>..ctor, X0
	034 Move X8, [X20]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X8, [X8+184]
	038 Move [X8], X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01CCA96C ADD X8, X8, W9, 0x4, SXTW
	0x01CCA970 ADD X0, X8, 0x138
	0x01CCA974 LDP X5, X4, [X0]
	0x01CCA978 MOV X0, X19
	0x01CCA97C MOV X2, X21
	0x01CCA980 MOV X3, X20
	0x01CCA984 LDP X20, X19, [X31 + 0x30]
	0x01CCA988 LDP X22, X21, [X31 + 0x20]
	0x01CCA98C LDP X24, X23, [X31 + 0x10]
	0x01CCA990 MOVZ W1, 0x3
	0x01CCA994 LDR X30, [X31], #0x40
	0x01CCA998 BR X5
	0x01CCA99C BL 0x1B6EA1C
	0x01CCA9A0 STR X30, [X31 - 0x40]!

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, [X0+168]
	004 Move X19, X0
	005 Call PlayerWatch.set_transmittingPlayerObjectID, X0, X1
	006 Move W1, [X19+172]
	007 Move X0, X19
	008 Call PlayerWatch.set_channel, X0, X1
	009 Move W1, [X19+176]
	010 Move X0, X19
	011 Call PlayerWatch.set_moneyAmount, X0, X1
	012 Move W1, [X19+184]
	013 Move X0, X19
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Call PlayerWatch.set_display, X0, X1
	017 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01CCA9A4 STP X24, X23, [X31 + 0x10]
	0x01CCA9A8 STP X22, X21, [X31 + 0x20]
	0x01CCA9AC STP X20, X19, [X31 + 0x30]
	0x01CCA9B0 ADRP X20, 0x2559000
	0x01CCA9B4 ADRP X21, 0x2284000
	0x01CCA9B8 ADRP X24, 0x2285000
	0x01CCA9BC ADRP X23, 0x2285000
	0x01CCA9C0 LDRB W8, [X20 + 0x57E]
	0x01CCA9C4 LDR X21, [X21 + 0xEE0]
	0x01CCA9C8 LDR X24, [X24 + 0x640]
	0x01CCA9CC LDR X23, [X23 + 0x648]
	0x01CCA9D0 MOV X19, X0
	0x01CCA9D4 TBNZ X8, 0x0, 0x1CCAA04
	0x01CCA9D8 ADRP X0, 0x2284000
	0x01CCA9DC LDR X0, [X0 + 0xEE0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call PlayerWatch.get_transmittingPlayerObjectID, X0
	005 Move [X19+168], W0
	006 Move X0, X19
	007 Call PlayerWatch.get_channel, X0
	008 Move [X19+172], W0
	009 Move X0, X19
	010 Call PlayerWatch.get_moneyAmount, X0
	011 Move [X19+176], W0
	012 Move X0, X19
	013 Call PlayerWatch.get_display, X0
	014 Move [X19+184], W0
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return 

Method: System.Void RPC_SetTransmittingPlayer@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01CCA9E0 BL 0x1B6E7F0
	0x01CCA9E4 ADRP X0, 0x2285000
	0x01CCA9E8 LDR X0, [X0 + 0x640]
	0x01CCA9EC BL 0x1B6E7F0
	0x01CCA9F0 ADRP X0, 0x2285000
	0x01CCA9F4 LDR X0, [X0 + 0x648]
	0x01CCA9F8 BL 0x1B6E7F0
	0x01CCA9FC MOVZ W8, 0x1
	0x01CCAA00 STRB W8, [X20 + 0x57E]
	0x01CCAA04 LDR X1, [X21]
	0x01CCAA08 MOV X0, X19
	0x01CCAA0C BL 0x208FDE8
	0x01CCAA10 LDP X20, X21, [X19 + 0x30]
	0x01CCAA14 MOV X22, X0
	0x01CCAA18 MOV X0, X19
	0x01CCAA1C MOV X1, X31
	0x01CCAA20 BL 0x33DD3DC
	0x01CCAA24 LDR X8, [X24]
	0x01CCAA28 LDR X8, [X8 + 0xB8]
	0x01CCAA2C LDR X19, [X8]
	0x01CCAA30 LDR X8, [X23]
	0x01CCAA34 MOV X23, X0
	0x01CCAA38 MOV X0, X8
	0x01CCAA3C BL 0x1B6EA0C
	0x01CCAA40 MOVZ W6, 0x1
	0x01CCAA44 MOV X1, X22
	0x01CCAA48 MOV X2, X20
	0x01CCAA4C MOV X3, X21
	0x01CCAA50 MOV X4, X23
	0x01CCAA54 MOV X5, X19
	0x01CCAA58 MOV X7, X31
	0x01CCAA5C MOV X24, X0
	0x01CCAA60 BL 0x33DA1EC
	0x01CCAA64 MOV X0, X24
	0x01CCAA68 LDP X20, X19, [X31 + 0x30]
	0x01CCAA6C LDP X22, X21, [X31 + 0x20]
	0x01CCAA70 LDP X24, X23, [X31 + 0x10]
	0x01CCAA74 LDR X30, [X31], #0x40
	0x01CCAA78 RET
	0x01CCAA7C STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x255A000
	006 Move W8, [X21+1386]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2286000
	014 Move X0, [X0+1272]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1386], W8
	018 Move W0, 1
	019 Move X1, X31
	020 Move W21, 1
	021 Call Assert.Check, X0
	022 Compare X19, 0
	023 JumpIfEqual {47}
	024 Move X8, 0x2286000
	025 Move X8, [X8+1272]
	026 Move W1, [X20+36]
	027 Move [X19+88], W21
	028 Move X9, [X19]
	029 Move X8, [X8]
	030 Move W11, [X9+304]
	031 Move W10, [X8+304]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X9, [X9+200]
	034 Add X9, X9, X10
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X19
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call PlayerWatch.RPC_SetTransmittingPlayer, X0, X1
	043 Return 
	044 Move X0, X19
	045 Move X1, X8
	046 Call 0x1B6FCDC
	047 Call 0x1B6FA1C

