Type: AnimalCompany.HandGrenade

Method: Fusion.TickTimer get_life()

Disassembly:
	0x01CA68E4 MOV X19, X0
	0x01CA68E8 TBNZ X8, 0x0, 0x1CA6900
	0x01CA68EC ADRP X0, 0x22A7000
	0x01CA68F0 LDR X0, [X0 + 0x478]
	0x01CA68F4 BL 0x1B6E7F0
	0x01CA68F8 MOVZ W8, 0x1
	0x01CA68FC STRB W8, [X20 + 0x45F]
	0x01CA6900 MOV X0, X19
	0x01CA6904 BL 0x1CA5B24
	0x01CA6908 TBNZ X0, 0x0, 0x1CA697C
	0x01CA690C MOV X0, X19
	0x01CA6910 MOV W1, W31
	0x01CA6914 BL 0x1CA66D8
	0x01CA6918 ADRP X8, 0x22A7000
	0x01CA691C LDR X8, [X8 + 0x478]
	0x01CA6920 LDR X20, [X19 + 0x98]
	0x01CA6924 LDR X0, [X8]
	0x01CA6928 LDR W8, [X0 + 0xE0]
	0x01CA692C CBNZ W8, 0x1CA6934
	0x01CA6930 BL 0x1B6E8F8
	0x01CA6934 MOV X0, X20
	0x01CA6938 MOV X1, X31
	0x01CA693C MOV X2, X31
	0x01CA6940 BL 0x3A9D6EC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x22A8000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x22A9000
	016 Move X0, [X0+1336]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22A9000
	023 Move X0, [X0+1344]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_life(Fusion.TickTimer value)

Disassembly:
	0x01CA6944 TBZ X0, 0x0, 0x1CA697C
	0x01CA6948 LDR X20, [X19 + 0x98]
	0x01CA694C MOV X0, X19
	0x01CA6950 MOV X1, X31
	0x01CA6954 BL 0x3A9B084
	0x01CA6958 CBZ X0, 0x1CA6988
	0x01CA695C MOV X1, X31
	0x01CA6960 BL 0x3AA7658
	0x01CA6964 MOV X0, X20
	0x01CA6968 LDP X20, X19, [X31 + 0x10]
	0x01CA696C FMOV S3, 1
	0x01CA6970 MOV X1, X31
	0x01CA6974 LDR X30, [X31], #0x20
	0x01CA6978 B 0x1CCD9CC
	0x01CA697C LDP X20, X19, [X31 + 0x10]
	0x01CA6980 LDR X30, [X31], #0x20
	0x01CA6984 RET
	0x01CA6988 BL 0x1B6EA1C
	0x01CA698C STP X30, X19, [X31 - 0x10]!
	0x01CA6990 MOV X19, X0
	0x01CA6994 BL 0x1CA5BF0
	0x01CA6998 TBNZ X0, 0x0, 0x1CA69A8
	0x01CA699C MOV X0, X19
	0x01CA69A0 BL 0x1CA5B24

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22A8000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x22A9000
	016 Move X0, [X0+1336]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22A9000
	023 Move X0, [X0+1352]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Int32 get_pausedRemainingTicks()

Disassembly:
	0x01CA69A4 TBZ X0, 0x0, 0x1CA6A1C
	0x01CA69A8 MOV X0, X19
	0x01CA69AC MOV W1, W31
	0x01CA69B0 BL 0x1CA5B8C
	0x01CA69B4 MOV X0, X19
	0x01CA69B8 MOV W1, W31
	0x01CA69BC BL 0x1CA5C58
	0x01CA69C0 LDR X0, [X19 + 0x80]
	0x01CA69C4 CBZ X0, 0x1CA6A24
	0x01CA69C8 MOV W1, W31
	0x01CA69CC MOV X2, X31
	0x01CA69D0 BL 0x1C9A8B4
	0x01CA69D4 MOV X0, X31
	0x01CA69D8 BL 0x1D9CB50
	0x01CA69DC AND X1, X0, 0x0
	0x01CA69E0 MOV X0, X19
	0x01CA69E4 BL 0x1CA5944
	0x01CA69E8 MOV X0, X19
	0x01CA69EC MOV W1, W31
	0x01CA69F0 BL 0x1CA5A04
	0x01CA69F4 MOV X0, X31
	0x01CA69F8 BL 0x1D9CB50
	0x01CA69FC AND X1, X0, 0x0
	0x01CA6A00 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+4]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x22A8000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x22A9000
	016 Move X0, [X0+1360]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22A9000
	023 Move X0, [X0+1368]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_pausedRemainingTicks(System.Int32 value)

Disassembly:
	0x01CA6A04 BL 0x1CA5AC4
	0x01CA6A08 MOV X0, X19
	0x01CA6A0C BL 0x1CA607C
	0x01CA6A10 MOV X0, X19
	0x01CA6A14 LDP X30, X19, [X31], #0x10
	0x01CA6A18 B 0x1CA60D8
	0x01CA6A1C LDP X30, X19, [X31], #0x10
	0x01CA6A20 RET
	0x01CA6A24 BL 0x1B6EA1C
	0x01CA6A28 STP X30, X19, [X31 - 0x10]!
	0x01CA6A2C MOV X19, X0
	0x01CA6A30 BL 0x1CA5BF0
	0x01CA6A34 TBNZ X0, 0x0, 0x1CA6A68
	0x01CA6A38 MOV X0, X19
	0x01CA6A3C BL 0x1CA5B24
	0x01CA6A40 TBNZ X0, 0x0, 0x1CA6A68
	0x01CA6A44 MOV X0, X31
	0x01CA6A48 BL 0x3A98D98
	0x01CA6A4C FMOV S1, 0.5
	0x01CA6A50 FCMP S0, S1
	0x01CA6A54 B.LE 0x1CA6A68
	0x01CA6A58 MOV X0, X19
	0x01CA6A5C MOV W1, W31
	0x01CA6A60 LDP X30, X19, [X31], #0x10

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+4], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22A8000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x22A9000
	016 Move X0, [X0+1360]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22A9000
	023 Move X0, [X0+1376]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: Fusion.TickTimer get_timerPins()

Disassembly:
	0x01CA6A64 B 0x1CA66D8
	0x01CA6A68 LDP X30, X19, [X31], #0x10
	0x01CA6A6C RET
	0x01CA6A70 STP X30, X21, [X31 - 0x20]!
	0x01CA6A74 STP X20, X19, [X31 + 0x10]
	0x01CA6A78 ADRP X20, 0x257D000
	0x01CA6A7C LDRB W8, [X20 + 0x460]
	0x01CA6A80 MOV X19, X1
	0x01CA6A84 TBNZ X8, 0x0, 0x1CA6AC0
	0x01CA6A88 ADRP X0, 0x22A8000
	0x01CA6A8C LDR X0, [X0 + 0x5F8]
	0x01CA6A90 BL 0x1B6E7F0
	0x01CA6A94 ADRP X0, 0x22A8000
	0x01CA6A98 LDR X0, [X0 + 0x600]
	0x01CA6A9C BL 0x1B6E7F0
	0x01CA6AA0 ADRP X0, 0x22A8000
	0x01CA6AA4 LDR X0, [X0 + 0x608]
	0x01CA6AA8 BL 0x1B6E7F0
	0x01CA6AAC ADRP X0, 0x22A7000
	0x01CA6AB0 LDR X0, [X0 + 0x478]
	0x01CA6AB4 BL 0x1B6E7F0
	0x01CA6AB8 MOVZ W8, 0x1
	0x01CA6ABC STRB W8, [X20 + 0x460]
	0x01CA6AC0 CBZ X19, 0x1CA6BB0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x22A8000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x22A9000
	016 Move X0, [X0+1384]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22A9000
	023 Move X0, [X0+1392]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_timerPins(Fusion.TickTimer value)

Disassembly:
	0x01CA6AC4 ADRP X8, 0x22A8000
	0x01CA6AC8 LDR X8, [X8 + 0x600]
	0x01CA6ACC MOV X0, X19
	0x01CA6AD0 LDR X1, [X8]
	0x01CA6AD4 BL 0x20CEEF0
	0x01CA6AD8 CBZ X0, 0x1CA6BB0
	0x01CA6ADC ADRP X20, 0x22A8000
	0x01CA6AE0 ADRP X21, 0x22A7000
	0x01CA6AE4 LDR X20, [X20 + 0x608]
	0x01CA6AE8 LDR X21, [X21 + 0x478]
	0x01CA6AEC MOVZ W1, 0x1
	0x01CA6AF0 MOV X2, X31
	0x01CA6AF4 BL 0x3AF7340
	0x01CA6AF8 LDR X1, [X20]
	0x01CA6AFC MOV X0, X19
	0x01CA6B00 BL 0x20CEEF0
	0x01CA6B04 LDR X8, [X21]
	0x01CA6B08 MOV X20, X0
	0x01CA6B0C LDR W9, [X8 + 0xE0]
	0x01CA6B10 CBNZ W9, 0x1CA6B1C
	0x01CA6B14 MOV X0, X8
	0x01CA6B18 BL 0x1B6E8F8
	0x01CA6B1C MOV X0, X20
	0x01CA6B20 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22A8000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x22A9000
	016 Move X0, [X0+1384]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22A9000
	023 Move X0, [X0+1400]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Boolean get_isPinPulled()

Disassembly:
	0x01CA6B24 MOV X2, X31
	0x01CA6B28 BL 0x3AA0AF0
	0x01CA6B2C TBZ X0, 0x0, 0x1CA6B4C
	0x01CA6B30 ADRP X8, 0x22A8000
	0x01CA6B34 LDR X8, [X8 + 0x5F8]
	0x01CA6B38 MOV X0, X19
	0x01CA6B3C LDR X1, [X8]
	0x01CA6B40 BL 0x20CEE08
	0x01CA6B44 MOV X20, X0
	0x01CA6B48 B 0x1CA6B60
	0x01CA6B4C CBZ X20, 0x1CA6BB0
	0x01CA6B50 MOV X0, X20
	0x01CA6B54 MOV W1, W31
	0x01CA6B58 MOV X2, X31
	0x01CA6B5C BL 0x3AF6930
	0x01CA6B60 MOV X0, X19
	0x01CA6B64 MOV X1, X31
	0x01CA6B68 BL 0x3A9D8EC
	0x01CA6B6C CBZ X0, 0x1CA6BB0
	0x01CA6B70 MOV X1, X31
	0x01CA6B74 MOV X2, X31
	0x01CA6B78 BL 0x3AA7DEC
	0x01CA6B7C MOV X0, X19
	0x01CA6B80 MOV X1, X31
	0x01CA6B84 BL 0x3A9D8EC
	0x01CA6B88 CBZ X0, 0x1CA6BB0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+12]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x22A8000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x22A9000
	018 Move X0, [X0+1408]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x22A9000
	025 Move X0, [X0+1416]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Void set_isPinPulled(System.Boolean value)

Disassembly:
	0x01CA6B8C MOV X1, X31
	0x01CA6B90 BL 0x3AA7AD0
	0x01CA6B94 CBZ X20, 0x1CA6BB0
	0x01CA6B98 MOV X0, X20
	0x01CA6B9C LDP X20, X19, [X31 + 0x10]
	0x01CA6BA0 MOVZ W1, 0x1
	0x01CA6BA4 MOV X2, X31
	0x01CA6BA8 LDP X30, X21, [X31], #0x20
	0x01CA6BAC B 0x3AF6FC8
	0x01CA6BB0 BL 0x1B6EA1C
	0x01CA6BB4 STR X30, [X31 - 0x40]!
	0x01CA6BB8 STP X24, X23, [X31 + 0x10]
	0x01CA6BBC STP X22, X21, [X31 + 0x20]
	0x01CA6BC0 STP X20, X19, [X31 + 0x30]
	0x01CA6BC4 ADRP X22, 0x257D000
	0x01CA6BC8 ADRP X21, 0x22A7000
	0x01CA6BCC LDRB W8, [X22 + 0x461]
	0x01CA6BD0 LDR X21, [X21 + 0x478]
	0x01CA6BD4 MOV X19, X1
	0x01CA6BD8 MOV X20, X0
	0x01CA6BDC TBNZ X8, 0x0, 0x1CA6C0C
	0x01CA6BE0 ADRP X0, 0x22A8000
	0x01CA6BE4 LDR X0, [X0 + 0x600]
	0x01CA6BE8 BL 0x1B6E7F0
	0x01CA6BEC ADRP X0, 0x22A8000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+12], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x22A8000
	012 Move X0, [X0+1168]
	013 Call 0x1B6F804
	014 Call 0x1B6FA0C
	015 Move X19, X0
	016 Move X0, 0x22A9000
	017 Move X0, [X0+1408]
	018 Call 0x1B6F804
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x22A9000
	024 Move X0, [X0+1424]
	025 Call 0x1B6F804
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1B6F8E8

Method: System.Boolean get_isExploded()

Disassembly:
	0x01CA6BF0 LDR X0, [X0 + 0x610]
	0x01CA6BF4 BL 0x1B6E7F0
	0x01CA6BF8 ADRP X0, 0x22A7000
	0x01CA6BFC LDR X0, [X0 + 0x478]
	0x01CA6C00 BL 0x1B6E7F0
	0x01CA6C04 MOVZ W8, 0x1
	0x01CA6C08 STRB W8, [X22 + 0x461]
	0x01CA6C0C LDR X0, [X21]
	0x01CA6C10 STR X31, [X31 + 0x8]
	0x01CA6C14 LDR W8, [X0 + 0xE0]
	0x01CA6C18 CBNZ W8, 0x1CA6C20
	0x01CA6C1C BL 0x1B6E8F8
	0x01CA6C20 MOV X0, X19
	0x01CA6C24 MOV X1, X31
	0x01CA6C28 MOV X2, X31
	0x01CA6C2C BL 0x3AA0AF0
	0x01CA6C30 TBNZ X0, 0x0, 0x1CA6DD4
	0x01CA6C34 CBZ X19, 0x1CA6DE8
	0x01CA6C38 MOV X0, X19
	0x01CA6C3C MOV X1, X31
	0x01CA6C40 BL 0x3A9D9EC
	0x01CA6C44 TBNZ X0, 0x0, 0x1CA6C58
	0x01CA6C48 MOVZ W1, 0x1
	0x01CA6C4C MOV X0, X19
	0x01CA6C50 MOV X2, X31
	0x01CA6C54 BL 0x3A9D9A8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+16]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x22A8000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x22A9000
	018 Move X0, [X0+1432]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x22A9000
	025 Move X0, [X0+1440]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Void set_isExploded(System.Boolean value)

Disassembly:
	0x01CA6C58 ADRP X8, 0x22A8000
	0x01CA6C5C LDR X8, [X8 + 0x610]
	0x01CA6C60 ADD X1, X31, 0x8
	0x01CA6C64 MOV X0, X19
	0x01CA6C68 LDR X2, [X8]
	0x01CA6C6C BL 0x20D02D0
	0x01CA6C70 ADRP X22, 0x22A7000
	0x01CA6C74 LDR X22, [X22 + 0x480]
	0x01CA6C78 ADRP X23, 0x257D000
	0x01CA6C7C TBZ X0, 0x0, 0x1CA6CD4
	0x01CA6C80 LDR X0, [X31 + 0x8]
	0x01CA6C84 CBZ X0, 0x1CA6DE8
	0x01CA6C88 MOVZ W1, 0x1
	0x01CA6C8C MOV X2, X31
	0x01CA6C90 MOVZ W24, 0x1
	0x01CA6C94 BL 0x3AF6930
	0x01CA6C98 LDRB W8, [X23 + 0x43F]
	0x01CA6C9C LDR X21, [X31 + 0x8]
	0x01CA6CA0 CBNZ W8, 0x1CA6CB4
	0x01CA6CA4 ADRP X0, 0x22A7000
	0x01CA6CA8 LDR X0, [X0 + 0x480]
	0x01CA6CAC BL 0x1B6E7F0
	0x01CA6CB0 STRB W24, [X23 + 0x43F]
	0x01CA6CB4 CBZ X21, 0x1CA6DE8
	0x01CA6CB8 LDR X8, [X22]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+16], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x22A8000
	012 Move X0, [X0+1168]
	013 Call 0x1B6F804
	014 Call 0x1B6FA0C
	015 Move X19, X0
	016 Move X0, 0x22A9000
	017 Move X0, [X0+1432]
	018 Call 0x1B6F804
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x22A9000
	024 Move X0, [X0+1448]
	025 Call 0x1B6F804
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1B6F8E8

Method: System.Void Awake()

Disassembly:
	0x01CA6CBC MOV X0, X21
	0x01CA6CC0 MOV X1, X31
	0x01CA6CC4 LDR X8, [X8 + 0xB8]
	0x01CA6CC8 LDP S1, S2, [X8 + 0x4]
	0x01CA6CCC LDR V0, [X8]
	0x01CA6CD0 BL 0x3AF650C
	0x01CA6CD4 MOV X0, X19
	0x01CA6CD8 MOV X1, X31
	0x01CA6CDC BL 0x3A9D8EC
	0x01CA6CE0 LDR X8, [X20 + 0xA8]
	0x01CA6CE4 CBZ X8, 0x1CA6DE8
	0x01CA6CE8 MOV X20, X0
	0x01CA6CEC MOV X0, X8
	0x01CA6CF0 MOV X1, X31
	0x01CA6CF4 BL 0x3A9D8EC
	0x01CA6CF8 CBZ X20, 0x1CA6DE8
	0x01CA6CFC MOV X1, X0
	0x01CA6D00 MOV X0, X20
	0x01CA6D04 MOV X2, X31
	0x01CA6D08 BL 0x3AA7DEC
	0x01CA6D0C MOV X0, X19
	0x01CA6D10 MOV X1, X31
	0x01CA6D14 BL 0x3A9D8EC
	0x01CA6D18 LDRB W8, [X23 + 0x43F]
	0x01CA6D1C MOV X20, X0
	0x01CA6D20 CBNZ W8, 0x1CA6D38
	0x01CA6D24 ADRP X0, 0x22A7000
	0x01CA6D28 LDR X0, [X0 + 0x480]
	0x01CA6D2C BL 0x1B6E7F0
	0x01CA6D30 MOVZ W8, 0x1
	0x01CA6D34 STRB W8, [X23 + 0x43F]
	0x01CA6D38 CBZ X20, 0x1CA6DE8
	0x01CA6D3C LDR X8, [X22]
	0x01CA6D40 MOV X0, X20
	0x01CA6D44 MOV X1, X31
	0x01CA6D48 LDR X8, [X8 + 0xB8]
	0x01CA6D4C LDP S1, S2, [X8 + 0x4]
	0x01CA6D50 LDR V0, [X8]
	0x01CA6D54 BL 0x3AA6D0C
	0x01CA6D58 MOV X0, X19
	0x01CA6D5C MOV X1, X31
	0x01CA6D60 BL 0x3A9D8EC
	0x01CA6D64 ADRP X21, 0x257D000
	0x01CA6D68 LDRB W8, [X21 + 0x454]
	0x01CA6D6C MOV X20, X0
	0x01CA6D70 CBNZ W8, 0x1CA6D88
	0x01CA6D74 ADRP X0, 0x22A8000
	0x01CA6D78 LDR X0, [X0 + 0x1F8]
	0x01CA6D7C BL 0x1B6E7F0
	0x01CA6D80 MOVZ W8, 0x1
	0x01CA6D84 STRB W8, [X21 + 0x454]
	0x01CA6D88 CBZ X20, 0x1CA6DE8
	0x01CA6D8C ADRP X8, 0x22A8000
	0x01CA6D90 LDR X8, [X8 + 0x1F8]
	0x01CA6D94 MOV X0, X20
	0x01CA6D98 MOV X1, X31
	0x01CA6D9C LDR X8, [X8]
	0x01CA6DA0 LDR X8, [X8 + 0xB8]
	0x01CA6DA4 LDP S2, S3, [X8 + 0x8]
	0x01CA6DA8 LDP S0, S1, [X8]
	0x01CA6DAC BL 0x3AA7984
	0x01CA6DB0 ADRP X8, 0x22A8000
	0x01CA6DB4 LDR X8, [X8 + 0x600]
	0x01CA6DB8 MOV X0, X19
	0x01CA6DBC LDR X1, [X8]
	0x01CA6DC0 BL 0x20CEEF0
	0x01CA6DC4 CBZ X0, 0x1CA6DE8
	0x01CA6DC8 MOV W1, W31
	0x01CA6DCC MOV X2, X31
	0x01CA6DD0 BL 0x3AF7340
	0x01CA6DD4 LDP X20, X19, [X31 + 0x30]
	0x01CA6DD8 LDP X22, X21, [X31 + 0x20]
	0x01CA6DDC LDP X24, X23, [X31 + 0x10]
	0x01CA6DE0 LDR X30, [X31], #0x40
	0x01CA6DE4 RET
	0x01CA6DE8 BL 0x1B6EA1C
	0x01CA6DEC STR X30, [X31 - 0x20]!
	0x01CA6DF0 STP X20, X19, [X31 + 0x10]
	0x01CA6DF4 MOV W20, W1
	0x01CA6DF8 MOV X19, X0
	0x01CA6DFC BL 0x1CA5BF0
	0x01CA6E00 TBNZ X0, 0x0, 0x1CA6E10
	0x01CA6E04 MOV X0, X19
	0x01CA6E08 BL 0x1CA5B24
	0x01CA6E0C TBZ X0, 0x0, 0x1CA6E1C
	0x01CA6E10 LDP X20, X19, [X31 + 0x10]
	0x01CA6E14 LDR X30, [X31], #0x20
	0x01CA6E18 RET
	0x01CA6E1C CMP W20, 0x14
	0x01CA6E20 MOV X0, X19
	0x01CA6E24 LDP X20, X19, [X31 + 0x10]
	0x01CA6E28 CSET W1, GT
	0x01CA6E2C LDR X30, [X31], #0x20
	0x01CA6E30 B 0x1CA66D8
	0x01CA6E34 MOV X1, X31
	0x01CA6E38 B 0x1D661D8
	0x01CA6E3C STP X30, X19, [X31 - 0x10]!
	0x01CA6E40 LDR W1, [X0 + 0xC0]
	0x01CA6E44 MOV X19, X0
	0x01CA6E48 BL 0x1CA5944
	0x01CA6E4C LDR W1, [X19 + 0xC4]
	0x01CA6E50 MOV X0, X19
	0x01CA6E54 BL 0x1CA5A04
	0x01CA6E58 LDR W1, [X19 + 0xC8]
	0x01CA6E5C MOV X0, X19
	0x01CA6E60 BL 0x1CA5AC4
	0x01CA6E64 LDRB W1, [X19 + 0xCC]
	0x01CA6E68 MOV X0, X19
	0x01CA6E6C BL 0x1CA5B8C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x257E000
	008 Move W8, [X20+1112]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x22A9000
	015 Move X0, [X0+368]
	016 Call 0x1B6F7F0
	017 Move X0, 0x22A9000
	018 Move X0, [X0+1456]
	019 Call 0x1B6F7F0
	020 Move X0, 0x22A9000
	021 Move X0, [X0+1464]
	022 Call 0x1B6F7F0
	023 Move X0, 0x22A9000
	024 Move X0, [X0+1472]
	025 Call 0x1B6F7F0
	026 Move W8, 1
	027 Move [X20+1112], W8
	028 Move X23, [X19+128]
	029 Compare X23, 0
	030 JumpIfEqual {116}
	031 Move X22, 0x22A9000
	032 Move X22, [X22+368]
	033 Move X21, 0x22A9000
	034 Move X20, [X23+400]
	035 Move X0, [X22]
	036 Move X21, [X21+1472]
	037 Call 0x1B6FA0C
	038 Move X2, [X21]
	039 Move X1, X19
	040 Move X3, X31
	041 Move X21, X0
	042 Call Action..ctor, X0, X1, X2
	043 Move X0, X20
	044 Move X1, X21
	045 Move X2, X31
	046 Call Delegate.Combine, X0, X1
	047 Move X1, [X22]
	048 Compare X0, 0
	049 JumpIfEqual {55}
	050 Move X8, [X0]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move [X23+400], X0
	053 Move X8, [X0]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move [X23+400], X0
	056 Move X23, [X19+128]
	057 Compare X23, 0
	058 JumpIfEqual {116}
	059 Move X21, 0x22A9000
	060 Move X20, [X23+416]
	061 Move X21, [X21+1464]
	062 Move X0, X1
	063 Call 0x1B6FA0C
	064 Move X2, [X21]
	065 Move X1, X19
	066 Move X3, X31
	067 Move X21, X0
	068 Call Action..ctor, X0, X1, X2
	069 Move X0, X20
	070 Move X1, X21
	071 Move X2, X31
	072 Call Delegate.Combine, X0, X1
	073 Move X1, [X22]
	074 Compare X0, 0
	075 JumpIfEqual {81}
	076 Move X8, [X0]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move [X23+416], X0
	079 Move X8, [X0]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move [X23+416], X0
	082 Move X23, [X19+128]
	083 Compare X23, 0
	084 JumpIfEqual {116}
	085 Move X21, 0x22A9000
	086 Move X20, [X23+440]
	087 Move X21, [X21+1456]
	088 Move X0, X1
	089 Call 0x1B6FA0C
	090 Move X2, [X21]
	091 Move X1, X19
	092 Move X3, X31
	093 Move X21, X0
	094 Call Action..ctor, X0, X1, X2
	095 Move X0, X20
	096 Move X1, X21
	097 Move X2, X31
	098 Call Delegate.Combine, X0, X1
	099 Compare X0, 0
	100 JumpIfEqual {108}
	101 Move X1, [X22]
	102 Move X8, [X0]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move [X23+440], X0
	105 Move X8, [X0]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Call 0x1B6FCDC
	108 Move [X23+440], X0
	109 Move X20, [X31+32]
	110 Move X19, [X31+40]
	111 Move X22, [X31+16]
	112 Move X21, [X31+24]
	113 Move X30, [X31+48]
	114 Move X23, [X31+56]
	115 Return 
	116 Call 0x1B6FA1C

Method: System.Void OnDestroy()

Disassembly:
	0x01CA6E70 LDRB W1, [X19 + 0xCD]
	0x01CA6E74 MOV X0, X19
	0x01CA6E78 LDP X30, X19, [X31], #0x10
	0x01CA6E7C B 0x1CA5C58
	0x01CA6E80 STP X30, X19, [X31 - 0x10]!
	0x01CA6E84 MOV X19, X0
	0x01CA6E88 BL 0x1CA58E4
	0x01CA6E8C STR W0, [X19 + 0xC0]
	0x01CA6E90 MOV X0, X19
	0x01CA6E94 BL 0x1CA59A4
	0x01CA6E98 STR W0, [X19 + 0xC4]
	0x01CA6E9C MOV X0, X19
	0x01CA6EA0 BL 0x1CA5A64
	0x01CA6EA4 STR W0, [X19 + 0xC8]
	0x01CA6EA8 MOV X0, X19
	0x01CA6EAC BL 0x1CA5B24
	0x01CA6EB0 AND W8, W0, 0x1
	0x01CA6EB4 MOV X0, X19
	0x01CA6EB8 STRB W8, [X19 + 0xCC]
	0x01CA6EBC BL 0x1CA5BF0
	0x01CA6EC0 AND W8, W0, 0x1
	0x01CA6EC4 STRB W8, [X19 + 0xCD]
	0x01CA6EC8 LDP X30, X19, [X31], #0x10
	0x01CA6ECC RET
	0x01CA6ED0 STR X30, [X31 - 0x20]!
	0x01CA6ED4 STP X20, X19, [X31 + 0x10]
	0x01CA6ED8 ADRP X20, 0x257D000
	0x01CA6EDC LDRB W8, [X20 + 0x462]
	0x01CA6EE0 MOV X19, X0
	0x01CA6EE4 TBNZ X8, 0x0, 0x1CA6EFC
	0x01CA6EE8 ADRP X0, 0x22A8000
	0x01CA6EEC LDR X0, [X0 + 0x618]
	0x01CA6EF0 BL 0x1B6E7F0
	0x01CA6EF4 MOVZ W8, 0x1
	0x01CA6EF8 STRB W8, [X20 + 0x462]
	0x01CA6EFC MOVZ W0, 0x1
	0x01CA6F00 MOV X1, X31
	0x01CA6F04 MOVZ W20, 0x1
	0x01CA6F08 BL 0x1D29EBC
	0x01CA6F0C CBZ X19, 0x1CA6F60
	0x01CA6F10 ADRP X9, 0x22A8000
	0x01CA6F14 LDR X9, [X9 + 0x618]
	0x01CA6F18 STRB W20, [X19 + 0x58]
	0x01CA6F1C LDR X8, [X19]
	0x01CA6F20 LDR X1, [X9]
	0x01CA6F24 LDRB W10, [X8 + 0x130]
	0x01CA6F28 LDRB W9, [X1 + 0x130]
	0x01CA6F2C CMP W10, W9
	0x01CA6F30 B.CC 0x1CA6F58
	0x01CA6F34 LDR X8, [X8 + 0xC8]
	0x01CA6F38 ADD X8, X8, X9, 0x3, LSL
	0x01CA6F3C LDUR X8, [X8 - 0x8]
	0x01CA6F40 CMP X8, X1
	0x01CA6F44 B.NE 0x1CA6F58
	0x01CA6F48 MOV X0, X19
	0x01CA6F4C LDP X20, X19, [X31 + 0x10]
	0x01CA6F50 LDR X30, [X31], #0x20
	0x01CA6F54 B 0x1CA6548
	0x01CA6F58 MOV X0, X19
	0x01CA6F5C BL 0x1B6ECDC
	0x01CA6F60 BL 0x1B6EA1C
	0x01CA6F64 STP X30, X21, [X31 - 0x20]!
	0x01CA6F68 STP X20, X19, [X31 + 0x10]
	0x01CA6F6C ADRP X21, 0x257D000
	0x01CA6F70 LDRB W8, [X21 + 0x463]
	0x01CA6F74 MOV X20, X1
	0x01CA6F78 MOV X19, X0
	0x01CA6F7C TBNZ X8, 0x0, 0x1CA6F94
	0x01CA6F80 ADRP X0, 0x22A8000
	0x01CA6F84 LDR X0, [X0 + 0x618]
	0x01CA6F88 BL 0x1B6E7F0
	0x01CA6F8C MOVZ W8, 0x1
	0x01CA6F90 STRB W8, [X21 + 0x463]
	0x01CA6F94 MOVZ W0, 0x1
	0x01CA6F98 MOV X1, X31
	0x01CA6F9C MOVZ W21, 0x1
	0x01CA6FA0 BL 0x1D29EBC
	0x01CA6FA4 CBZ X19, 0x1CA7004
	0x01CA6FA8 ADRP X10, 0x22A8000
	0x01CA6FAC LDR X10, [X10 + 0x618]
	0x01CA6FB0 LDR W8, [X20 + 0x24]
	0x01CA6FB4 STRB W21, [X19 + 0x58]
	0x01CA6FB8 LDR X9, [X19]
	0x01CA6FBC LDR X1, [X10]
	0x01CA6FC0 LDRB W11, [X9 + 0x130]
	0x01CA6FC4 LDRB W10, [X1 + 0x130]
	0x01CA6FC8 CMP W11, W10
	0x01CA6FCC B.CC 0x1CA6FFC
	0x01CA6FD0 LDR X9, [X9 + 0xC8]
	0x01CA6FD4 ADD X9, X9, X10, 0x3, LSL
	0x01CA6FD8 LDUR X9, [X9 - 0x8]
	0x01CA6FDC CMP X9, X1
	0x01CA6FE0 B.NE 0x1CA6FFC
	0x01CA6FE4 MOV X0, X19
	0x01CA6FE8 LDP X20, X19, [X31 + 0x10]
	0x01CA6FEC CMP W8, 0x0
	0x01CA6FF0 CSET W1, NE
	0x01CA6FF4 LDP X30, X21, [X31], #0x20
	0x01CA6FF8 B 0x1CA66D8
	0x01CA6FFC MOV X0, X19
	0x01CA7000 BL 0x1B6ECDC
	0x01CA7004 BL 0x1B6EA1C
	0x01CA7008 LDR W0, [X0 + 0x80]
	0x01CA700C RET
	0x01CA7010 LDR X0, [X0 + 0x88]
	0x01CA7014 RET
	0x01CA7018 STP X30, X23, [X31 - 0x30]!
	0x01CA701C STP X22, X21, [X31 + 0x10]
	0x01CA7020 STP X20, X19, [X31 + 0x20]
	0x01CA7024 ADRP X20, 0x257C000
	0x01CA7028 LDRB W8, [X20 + 0x464]
	0x01CA702C MOV X19, X0
	0x01CA7030 TBNZ X8, 0x0, 0x1CA7060
	0x01CA7034 ADRP X0, 0x22A7000
	0x01CA7038 LDR X0, [X0 + 0x170]
	0x01CA703C BL 0x1B6E7F0
	0x01CA7040 ADRP X0, 0x22A7000
	0x01CA7044 LDR X0, [X0 + 0x620]
	0x01CA7048 BL 0x1B6E7F0
	0x01CA704C ADRP X0, 0x22A7000
	0x01CA7050 LDR X0, [X0 + 0x450]
	0x01CA7054 BL 0x1B6E7F0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x257E000
	008 Move X21, 0x22A9000
	009 Move W8, [X20+1113]
	010 Move X21, [X21+448]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x22A9000
	017 Move X0, [X0+368]
	018 Call 0x1B6F7F0
	019 Move X0, 0x22A9000
	020 Move X0, [X0+1456]
	021 Call 0x1B6F7F0
	022 Move X0, 0x22A9000
	023 Move X0, [X0+1464]
	024 Call 0x1B6F7F0
	025 Move X0, 0x22A9000
	026 Move X0, [X0+1472]
	027 Call 0x1B6F7F0
	028 Move X0, 0x22A9000
	029 Move X0, [X0+448]
	030 Call 0x1B6F7F0
	031 Move W8, 1
	032 Move [X20+1113], W8
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1B6F8F8
	038 Compare X19, 0
	039 JumpIfEqual {131}
	040 Move W8, [X19+48]
	041 Move X23, [X19+128]
	042 Or W8, W8, 8
	043 Move [X19+48], W8
	044 Compare X23, 0
	045 JumpIfEqual {131}
	046 Move X22, 0x22A9000
	047 Move X22, [X22+368]
	048 Move X21, 0x22A9000
	049 Move X20, [X23+400]
	050 Move X0, [X22]
	051 Move X21, [X21+1472]
	052 Call 0x1B6FA0C
	053 Move X2, [X21]
	054 Move X1, X19
	055 Move X3, X31
	056 Move X21, X0
	057 Call Action..ctor, X0, X1, X2
	058 Move X0, X20
	059 Move X1, X21
	060 Move X2, X31
	061 Call Delegate.Remove, X0, X1
	062 Move X1, [X22]
	063 Compare X0, 0
	064 JumpIfEqual {70}
	065 Move X8, [X0]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move [X23+400], X0
	068 Move X8, [X0]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move [X23+400], X0
	071 Move X23, [X19+128]
	072 Compare X23, 0
	073 JumpIfEqual {131}
	074 Move X21, 0x22A9000
	075 Move X20, [X23+416]
	076 Move X21, [X21+1464]
	077 Move X0, X1
	078 Call 0x1B6FA0C
	079 Move X2, [X21]
	080 Move X1, X19
	081 Move X3, X31
	082 Move X21, X0
	083 Call Action..ctor, X0, X1, X2
	084 Move X0, X20
	085 Move X1, X21
	086 Move X2, X31
	087 Call Delegate.Remove, X0, X1
	088 Move X1, [X22]
	089 Compare X0, 0
	090 JumpIfEqual {96}
	091 Move X8, [X0]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move [X23+416], X0
	094 Move X8, [X0]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move [X23+416], X0
	097 Move X23, [X19+128]
	098 Compare X23, 0
	099 JumpIfEqual {131}
	100 Move X21, 0x22A9000
	101 Move X20, [X23+440]
	102 Move X21, [X21+1456]
	103 Move X0, X1
	104 Call 0x1B6FA0C
	105 Move X2, [X21]
	106 Move X1, X19
	107 Move X3, X31
	108 Move X21, X0
	109 Call Action..ctor, X0, X1, X2
	110 Move X0, X20
	111 Move X1, X21
	112 Move X2, X31
	113 Call Delegate.Remove, X0, X1
	114 Compare X0, 0
	115 JumpIfEqual {123}
	116 Move X1, [X22]
	117 Move X8, [X0]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move [X23+440], X0
	120 Move X8, [X0]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Call 0x1B6FCDC
	123 Move [X23+440], X0
	124 Move X20, [X31+32]
	125 Move X19, [X31+40]
	126 Move X22, [X31+16]
	127 Move X21, [X31+24]
	128 Move X30, [X31+48]
	129 Move X23, [X31+56]
	130 Return 
	131 Call 0x1B6FA1C

Method: System.Void Spawned()

Disassembly:
	0x01CA7058 MOVZ W8, 0x1
	0x01CA705C STRB W8, [X20 + 0x464]
	0x01CA7060 MOV X0, X19
	0x01CA7064 MOV X1, X31
	0x01CA7068 BL 0x1D65284
	0x01CA706C LDR X0, [X19 + 0x40]
	0x01CA7070 CBZ X0, 0x1CA7194
	0x01CA7074 LDRB W8, [X0 + 0x60]
	0x01CA7078 TBNZ X8, 0x1, 0x1CA7194

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call NetworkBehaviour.Spawned, X0
	006 Move X0, X19
	007 Call HandGrenade.HandleIsExplodedChanged, X0
	008 Move X0, X19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call HandGrenade.HandleIsPinPulledChanged, X0
	012 Return 

Method: System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)

Disassembly:
	0x01CA7114 LDR X0, [X23]
	0x01CA7118 BL 0x1B6EA0C
	0x01CA711C ADRP X8, 0x22A7000
	0x01CA7120 LDR X8, [X8 + 0x620]
	0x01CA7124 MOV X1, X19
	0x01CA7128 MOV X3, X31
	0x01CA712C MOV X21, X0
	0x01CA7130 LDR X2, [X8]
	0x01CA7134 BL 0x317DB24
	0x01CA7138 MOV X0, X20
	0x01CA713C MOV X1, X21
	0x01CA7140 MOV X2, X31
	0x01CA7144 BL 0x322A750
	0x01CA7148 CBZ X0, 0x1CA7188
	0x01CA714C LDR X1, [X23]
	0x01CA7150 LDR X8, [X0]
	0x01CA7154 CMP X8, X1
	0x01CA7158 B.NE 0x1CA7174
	0x01CA715C LDR X8, [X22]
	0x01CA7160 LDR X8, [X8 + 0xB8]
	0x01CA7164 STR X0, [X8 + 0x48]
	0x01CA7168 LDR X8, [X0]
	0x01CA716C CMP X8, X1
	0x01CA7170 B.EQ 0x1CA7194
	0x01CA7174 BL 0x1B6ECDC
	0x01CA7178 LDR X8, [X22]
	0x01CA717C LDR X8, [X8 + 0xB8]
	0x01CA7180 STR X0, [X8 + 0x58]
	0x01CA7184 B 0x1CA7194
	0x01CA7188 LDR X8, [X22]
	0x01CA718C LDR X8, [X8 + 0xB8]
	0x01CA7190 STR X0, [X8 + 0x48]
	0x01CA7194 LDP X20, X19, [X31 + 0x20]
	0x01CA7198 LDP X22, X21, [X31 + 0x10]
	0x01CA719C LDP X30, X23, [X31], #0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x257D000
	008 Move X22, 0x22A7000
	009 Move W8, [X23+1114]
	010 Move X22, [X22+1144]
	011 Move W20, W2
	012 Move X19, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x22A7000
	019 Move X0, [X0+1144]
	020 Call 0x1B6F7F0
	021 Move W8, 1
	022 Move [X23+1114], W8
	023 Move X0, [X22]
	024 Move X22, [X21+136]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1B6F8F8
	029 Move X0, X22
	030 Move X1, X31
	031 Call Object.Destroy, X0
	032 Move X0, [X21+144]
	033 Move X1, X31
	034 Call Object.Destroy, X0
	035 And W2, W20, 1
	036 Move X0, X21
	037 Move X1, X19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X3, X31
	043 Move X30, [X31+48]
	044 Move X23, [X31+56]
	045 Call NetworkBehaviour.Despawned, X0, X1, X2
	046 Return 

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01CA71A0 RET
	0x01CA71A4 STP X30, X25, [X31 - 0x40]!
	0x01CA71A8 STP X24, X23, [X31 + 0x10]
	0x01CA71AC STP X22, X21, [X31 + 0x20]
	0x01CA71B0 STP X20, X19, [X31 + 0x30]
	0x01CA71B4 ADRP X25, 0x257C000
	0x01CA71B8 ADRP X22, 0x22A7000
	0x01CA71BC ADRP X23, 0x22A7000
	0x01CA71C0 ADRP X24, 0x22A7000
	0x01CA71C4 LDRB W8, [X25 + 0x465]
	0x01CA71C8 LDR X22, [X22 + 0x450]
	0x01CA71CC LDR X23, [X23 + 0x170]
	0x01CA71D0 LDR X24, [X24 + 0x620]
	0x01CA71D4 MOV W21, W2
	0x01CA71D8 MOV X20, X1
	0x01CA71DC MOV X19, X0
	0x01CA71E0 TBNZ X8, 0x0, 0x1CA7210
	0x01CA71E4 ADRP X0, 0x22A7000
	0x01CA71E8 LDR X0, [X0 + 0x170]
	0x01CA71EC BL 0x1B6E7F0
	0x01CA71F0 ADRP X0, 0x22A7000
	0x01CA71F4 LDR X0, [X0 + 0x620]
	0x01CA71F8 BL 0x1B6E7F0
	0x01CA71FC ADRP X0, 0x22A7000
	0x01CA7200 LDR X0, [X0 + 0x450]
	0x01CA7204 BL 0x1B6E7F0
	0x01CA7208 MOVZ W8, 0x1
	0x01CA720C STRB W8, [X25 + 0x465]
	0x01CA7210 AND W2, W21, 0x1
	0x01CA7214 MOV X0, X19
	0x01CA7218 MOV X1, X20
	0x01CA721C MOV X3, X31
	0x01CA7220 BL 0x1D65288
	0x01CA7224 LDR X8, [X22]
	0x01CA7228 LDR X0, [X23]
	0x01CA722C LDR X8, [X8 + 0xB8]
	0x01CA7230 LDR X20, [X8 + 0x58]
	0x01CA7234 BL 0x1B6EA0C
	0x01CA7238 LDR X2, [X24]
	0x01CA723C MOV X1, X19
	0x01CA7240 MOV X3, X31
	0x01CA7244 MOV X21, X0
	0x01CA7248 BL 0x317DB24
	0x01CA724C MOV X0, X20
	0x01CA7250 MOV X1, X21
	0x01CA7254 MOV X2, X31
	0x01CA7258 BL 0x322A948
	0x01CA725C LDR X1, [X23]
	0x01CA7260 CBZ X0, 0x1CA728C
	0x01CA7264 LDR X8, [X0]
	0x01CA7268 CMP X8, X1
	0x01CA726C B.NE 0x1CA72F4
	0x01CA7270 LDR X8, [X22]
	0x01CA7274 LDR X8, [X8 + 0xB8]
	0x01CA7278 STR X0, [X8 + 0x58]
	0x01CA727C LDR X9, [X0]
	0x01CA7280 CMP X9, X1
	0x01CA7284 B.EQ 0x1CA7298
	0x01CA7288 B 0x1CA72F4
	0x01CA728C LDR X8, [X22]
	0x01CA7290 LDR X8, [X8 + 0xB8]
	0x01CA7294 STR X0, [X8 + 0x58]
	0x01CA7298 LDR X20, [X8 + 0x48]
	0x01CA729C MOV X0, X1
	0x01CA72A0 BL 0x1B6EA0C
	0x01CA72A4 LDR X2, [X24]
	0x01CA72A8 MOV X1, X19
	0x01CA72AC MOV X3, X31
	0x01CA72B0 MOV X21, X0
	0x01CA72B4 BL 0x317DB24
	0x01CA72B8 MOV X0, X20
	0x01CA72BC MOV X1, X21
	0x01CA72C0 MOV X2, X31
	0x01CA72C4 BL 0x322A948
	0x01CA72C8 CBZ X0, 0x1CA72F8
	0x01CA72CC LDR X1, [X23]
	0x01CA72D0 LDR X8, [X0]
	0x01CA72D4 CMP X8, X1
	0x01CA72D8 B.NE 0x1CA72F4
	0x01CA72DC LDR X8, [X22]
	0x01CA72E0 LDR X8, [X8 + 0xB8]
	0x01CA72E4 STR X0, [X8 + 0x48]
	0x01CA72E8 LDR X8, [X0]
	0x01CA72EC CMP X8, X1
	0x01CA72F0 B.EQ 0x1CA7304
	0x01CA72F4 BL 0x1B6ECDC
	0x01CA72F8 LDR X8, [X22]
	0x01CA72FC LDR X8, [X8 + 0xB8]
	0x01CA7300 STR X0, [X8 + 0x48]
	0x01CA7304 LDP X20, X19, [X31 + 0x30]
	0x01CA7308 LDP X22, X21, [X31 + 0x20]
	0x01CA730C LDP X24, X23, [X31 + 0x10]
	0x01CA7310 LDP X30, X25, [X31], #0x40
	0x01CA7314 RET
	0x01CA7318 STR X30, [X31 - 0x30]!
	0x01CA731C STP X22, X21, [X31 + 0x10]
	0x01CA7320 STP X20, X19, [X31 + 0x20]
	0x01CA7324 ADRP X21, 0x257C000
	0x01CA7328 ADRP X22, 0x22A7000
	0x01CA732C ADRP X20, 0x22A7000
	0x01CA7330 LDRB W8, [X21 + 0x466]
	0x01CA7334 LDR X22, [X22 + 0x628]
	0x01CA7338 LDR X20, [X20 + 0x630]
	0x01CA733C MOV X19, X0
	0x01CA7340 TBNZ X8, 0x0, 0x1CA7364

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x257D000
	006 Move W8, [X20+1115]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x22A8000
	013 Move X0, [X0+1480]
	014 Call 0x1B6F7F0
	015 Move X0, 0x22A8000
	016 Move X0, [X0+1488]
	017 Call 0x1B6F7F0
	018 Move W8, 1
	019 Move [X20+1115], W8
	020 Move X0, X19
	021 Move X1, X31
	022 Move [X31+8], X31
	023 Move [X31], W31
	024 Call NetworkBehaviour.FixedUpdateNetwork, X0
	025 Move X0, [X19+64]
	026 Compare X0, 0
	027 JumpIfEqual {123}
	028 Move W8, [X0+96]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 2
	031 Compare TEMP, 2
	032 JumpIfEqual {123}
	033 Move X1, X31
	034 Call NetworkObject.get_HasStateAuthority, X0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {123}
	039 Move X0, X19
	040 Call HandGrenade.get_isPinPulled, X0
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {123}
	045 Move X0, [X19+128]
	046 Compare X0, 0
	047 JumpIfEqual {128}
	048 Move X1, X31
	049 Call GrabbableItem.get_backpackId, X0
	050 Move [X31+24], X0
	051 Add X0, X31, 24
	052 Move X1, X31
	053 Call NetworkBehaviourId.get_IsValid, X0
	054 Move W20, W0
	055 Move X0, X19
	056 Call HandGrenade.get_pausedRemainingTicks, X0
	057 Move TEMP, X20
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {80}
	061 Compare W0, 0
	062 JumpIfNotEqual {107}
	063 Move X0, X19
	064 Call HandGrenade.get_life, X0
	065 Move [X31], W0
	066 Move X1, [X19+56]
	067 Add X0, X31, 0
	068 Move X2, X31
	069 Call TickTimer.RemainingTicks, X0, X1
	070 And W31, W0, 255
	071 Move [X31+8], X0
	072 Move X8, 0x22A8000
	073 Move X8, [X8+1488]
	074 Add X0, X31, 8
	075 Move X1, [X8]
	076 Call Nullable`1<Int32>.get_Value, X0
	077 Move W1, W0
	078 Move X0, X19
	079 Call HandGrenade.set_pausedRemainingTicks, X0, X1
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X20, [X19+56]
	082 Move X0, X19
	083 Call HandGrenade.get_pausedRemainingTicks, X0
	084 Move W1, W0
	085 Move X0, X20
	086 Move X2, X31
	087 Call TickTimer.CreateFromTicks, X0, X1
	088 And X1, X0, 0
	089 Move X0, X19
	090 Call HandGrenade.set_life, X0, X1
	091 Move X0, X19
	092 Move W1, W31
	093 Call HandGrenade.set_pausedRemainingTicks, X0, X1
	094 Move X0, X19
	095 Call HandGrenade.get_life, X0
	096 Move [X31], W0
	097 Move X1, [X19+56]
	098 Add X0, X31, 0
	099 Move X2, X31
	100 Call TickTimer.Expired, X0, X1
	101 Move TEMP, X0
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfNotEqual {107}
	105 Move X0, X19
	106 Call HandGrenade.ExplodeInternal, X0
	107 Move X0, X19
	108 Call HandGrenade.get_timerPins, X0
	109 Move [X31], W0
	110 Move X1, [X19+56]
	111 Add X0, X31, 0
	112 Move X2, X31
	113 Call TickTimer.Expired, X0, X1
	114 Move TEMP, X0
	115 And TEMP, TEMP, 1
	116 Compare TEMP, 1
	117 JumpIfNotEqual {123}
	118 Move X0, X31
	119 Call TickTimer.get_None
	120 And X1, X0, 0
	121 Move X0, X19
	122 Call HandGrenade.set_timerPins, X0, X1
	123 Move X20, [X31+32]
	124 Move X19, [X31+40]
	125 Move X30, [X31+16]
	126 Add X31, X31, 48
	127 Return 
	128 Call 0x1B6FA1C

Method: System.Void RPC_Explode()

Disassembly:
	0x01CA7548 MOV X0, X1
	0x01CA754C MOV X1, X31
	0x01CA7550 BL 0x1C98D1C
	0x01CA7554 STR X0, [X31 + 0x8]
	0x01CA7558 ADD X0, X31, 0x8
	0x01CA755C MOV X1, X31
	0x01CA7560 BL 0x1D680F0
	0x01CA7564 MOV W20, W0
	0x01CA7568 TBNZ X0, 0x0, 0x1CA75B4
	0x01CA756C LDR X0, [X21 + 0x88]
	0x01CA7570 CBZ X0, 0x1CA75CC
	0x01CA7574 MOV X1, X31
	0x01CA7578 BL 0x1C98D1C
	0x01CA757C LDR X8, [X21 + 0x88]
	0x01CA7580 CBZ X8, 0x1CA75CC
	0x01CA7584 MOV X21, X0
	0x01CA7588 MOV X0, X8
	0x01CA758C MOV X1, X31
	0x01CA7590 BL 0x1C9A970
	0x01CA7594 MOVZ W2, 0x1
	0x01CA7598 MOV X0, X19
	0x01CA759C MOV X1, X21
	0x01CA75A0 MOV W3, W31
	0x01CA75A4 MOV X4, X31
	0x01CA75A8 MOV X5, X31
	0x01CA75AC MOV X6, X31
	0x01CA75B0 BL 0x1C99804
	0x01CA75B4 ORN W8, W31, W20, 0x0
	0x01CA75B8 LDP X20, X19, [X31 + 0x20]
	0x01CA75BC LDP X30, X21, [X31 + 0x10]
	0x01CA75C0 AND W0, W8, 0x1
	0x01CA75C4 ADD X31, X31, 0x30
	0x01CA75C8 RET
	0x01CA75CC BL 0x1B6EA1C
	0x01CA75D0 STR D10, [X31 - 0x70]!
	0x01CA75D4 STP D9, D8, [X31 + 0x10]
	0x01CA75D8 STP X30, X27, [X31 + 0x20]
	0x01CA75DC STP X26, X25, [X31 + 0x30]
	0x01CA75E0 STP X24, X23, [X31 + 0x40]
	0x01CA75E4 STP X22, X21, [X31 + 0x50]
	0x01CA75E8 STP X20, X19, [X31 + 0x60]
	0x01CA75EC ADRP X20, 0x257C000
	0x01CA75F0 LDRB W8, [X20 + 0x468]
	0x01CA75F4 MOV X19, X0
	0x01CA75F8 TBNZ X8, 0x0, 0x1CA764C
	0x01CA75FC ADRP X0, 0x22A7000
	0x01CA7600 LDR X0, [X0 + 0x1B8]
	0x01CA7604 BL 0x1B6E7F0
	0x01CA7608 ADRP X0, 0x22A7000
	0x01CA760C LDR X0, [X0 + 0x628]
	0x01CA7610 BL 0x1B6E7F0
	0x01CA7614 ADRP X0, 0x22A7000
	0x01CA7618 LDR X0, [X0 + 0x3D8]
	0x01CA761C BL 0x1B6E7F0
	0x01CA7620 ADRP X0, 0x22A6000
	0x01CA7624 LDR X0, [X0 + 0x478]
	0x01CA7628 BL 0x1B6E7F0
	0x01CA762C ADRP X0, 0x22A6000
	0x01CA7630 LDR X0, [X0 + 0x4C0]
	0x01CA7634 BL 0x1B6E7F0
	0x01CA7638 ADRP X0, 0x22A7000
	0x01CA763C LDR X0, [X0 + 0x198]
	0x01CA7640 BL 0x1B6E7F0
	0x01CA7644 MOVZ W8, 0x1
	0x01CA7648 STRB W8, [X20 + 0x468]
	0x01CA764C STR X31, [X31 + 0x8]
	0x01CA7650 LDR X0, [X19 + 0x40]
	0x01CA7654 CBZ X0, 0x1CA799C
	0x01CA7658 LDRB W8, [X0 + 0x60]
	0x01CA765C TBNZ X8, 0x1, 0x1CA799C
	0x01CA7660 MOV X1, X31
	0x01CA7664 BL 0x1D9E6A0
	0x01CA7668 TBZ X0, 0x0, 0x1CA799C
	0x01CA766C LDR X8, [X19 + 0x88]
	0x01CA7670 CBZ X8, 0x1CA79CC
	0x01CA7674 ADRP X24, 0x22A6000
	0x01CA7678 LDR X24, [X24 + 0x478]
	0x01CA767C LDR X20, [X8 + 0xC0]
	0x01CA7680 LDR X0, [X24]
	0x01CA7684 LDR W9, [X0 + 0xE0]
	0x01CA7688 CBNZ W9, 0x1CA7690
	0x01CA768C BL 0x1B6E8F8
	0x01CA7690 MOV X0, X20
	0x01CA7694 MOV X1, X31
	0x01CA7698 MOV X2, X31
	0x01CA769C BL 0x3A9D6EC
	0x01CA76A0 TBZ X0, 0x0, 0x1CA799C
	0x01CA76A4 LDR X8, [X19 + 0x88]
	0x01CA76A8 CBZ X8, 0x1CA79CC
	0x01CA76AC LDR X8, [X8 + 0xC0]
	0x01CA76B0 CBZ X8, 0x1CA79CC
	0x01CA76B4 LDRB W9, [X8 + 0x8C]
	0x01CA76B8 CBZ W9, 0x1CA77D4
	0x01CA76BC MOV X0, X19
	0x01CA76C0 MOV X1, X31
	0x01CA76C4 BL 0x3A9B084
	0x01CA76C8 CBZ X0, 0x1CA79CC
	0x01CA76CC MOV X1, X31
	0x01CA76D0 BL 0x3AA7658
	0x01CA76D4 ADRP X20, 0x22A7000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x257D000
	005 Move W8, [X20+1116]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x22A8000
	012 Move X0, [X0+448]
	013 Call 0x1B6F7F0
	014 Move X0, 0x22A8000
	015 Move X0, [X0+1512]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1116], W8
	019 Move W8, [X19+88]
	020 Compare W8, 0
	021 JumpIfEqual {29}
	022 Move [X19+88], W31
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Call HandGrenade.ExplodeInternal, X0
	028 Return 
	029 Move X20, 0x22A8000
	030 Move X20, [X20+448]
	031 Move X0, [X20]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1B6F8F8
	036 Move X0, X19
	037 Move X1, X31
	038 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	039 Move X0, [X19+56]
	040 Compare X0, 0
	041 JumpIfEqual {126}
	042 Move X1, X31
	043 Call NetworkRunner.get_Stage, X0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Return 
	049 Move X0, [X19+64]
	050 Compare X0, 0
	051 JumpIfEqual {126}
	052 Move X1, X31
	053 Call NetworkObject.GetLocalAuthorityMask, X0
	054 And W31, W0, 7
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {23}
	059 Move X8, [X19+56]
	060 Compare X8, 0
	061 JumpIfEqual {126}
	062 Move X0, [X8+80]
	063 Compare X0, 0
	064 JumpIfEqual {126}
	065 Move X1, X31
	066 Call Simulation.HasAnyActiveConnections, X0
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {45}
	071 Move X8, [X19+56]
	072 Compare X8, 0
	073 JumpIfEqual {126}
	074 Move X0, [X8+80]
	075 Move W1, 8
	076 Move X2, X31
	077 Call SimulationMessage.Allocate, X0, X1
	078 Move X20, X0
	079 Move W0, 1
	080 Move X1, X31
	081 Call Assert.Check, X0
	082 Move X8, [X19+64]
	083 Compare X8, 0
	084 JumpIfEqual {126}
	085 Move X8, [X8+32]
	086 Compare X8, 0
	087 JumpIfEqual {106}
	088 Move W0, [X8]
	089 Move X0, [X20]
	090 Move X19, [X19+64]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1B6F8F8
	095 Move X8, 0x22A8000
	096 Move X8, [X8+1512]
	097 Move X1, X19
	098 Move X20, [X31+16]
	099 Move X19, [X31+24]
	100 Move W2, 7
	101 Move X0, [X8]
	102 Move X3, X31
	103 Move X30, [X31+32]
	104 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	105 Return 
	106 Move X0, X31
	107 Move W1, [X19+104]
	108 Move W2, 1
	109 Move X3, X31
	110 Call RpcHeader.Create, X0, X1, X2
	111 Move [X20+28], X0
	112 Compare X20, 0
	113 JumpIfEqual {126}
	114 Move W8, 64
	115 Move [X20+12], W8
	116 Move X0, [X19+56]
	117 Compare X0, 0
	118 JumpIfEqual {126}
	119 Move X1, X20
	120 Move X20, [X31+16]
	121 Move X19, [X31+24]
	122 Move X2, X31
	123 Move X30, [X31+32]
	124 Call NetworkRunner.SendRpc, X0, X1
	125 Return 
	126 Call 0x1B6FA1C

Method: System.Void ExplodeInternal()

Disassembly:
	0x01CA7344 ADRP X0, 0x22A7000
	0x01CA7348 LDR X0, [X0 + 0x630]
	0x01CA734C BL 0x1B6E7F0
	0x01CA7350 ADRP X0, 0x22A7000
	0x01CA7354 LDR X0, [X0 + 0x628]
	0x01CA7358 BL 0x1B6E7F0
	0x01CA735C MOVZ W8, 0x1
	0x01CA7360 STRB W8, [X21 + 0x466]
	0x01CA7364 LDR X1, [X22]
	0x01CA7368 MOV X0, X19
	0x01CA736C BL 0x208FDE8
	0x01CA7370 STR X0, [X19 + 0x88]
	0x01CA7374 LDR X1, [X20]
	0x01CA7378 MOV X0, X19
	0x01CA737C BL 0x20904A4
	0x01CA7380 STR X0, [X19 + 0x90]
	0x01CA7384 LDP X20, X19, [X31 + 0x20]
	0x01CA7388 LDP X22, X21, [X31 + 0x10]
	0x01CA738C LDR X30, [X31], #0x30
	0x01CA7390 RET
	0x01CA7394 B 0x1CA7398
	0x01CA7398 SUB X31, X31, 0x20
	0x01CA739C STP X30, X19, [X31 + 0x10]
	0x01CA73A0 MOV X19, X0
	0x01CA73A4 LDR X0, [X0 + 0x88]
	0x01CA73A8 CBZ X0, 0x1CA7424
	0x01CA73AC MOV X1, X31
	0x01CA73B0 BL 0x1C98D1C
	0x01CA73B4 STR X0, [X31 + 0x8]
	0x01CA73B8 ADD X0, X31, 0x8
	0x01CA73BC MOV X1, X31
	0x01CA73C0 BL 0x1D680F0
	0x01CA73C4 TBZ X0, 0x0, 0x1CA7410
	0x01CA73C8 MOV X0, X19
	0x01CA73CC BL 0x1CA75D0
	0x01CA73D0 TBNZ X0, 0x0, 0x1CA7418
	0x01CA73D4 ADRP X8, 0xFFFFFFFFFEE02000
	0x01CA73D8 ADRP X9, 0xFFFFFFFFFEE02000
	0x01CA73DC LDR W0, [X19 + 0x80]
	0x01CA73E0 LDR V0, [X8 + 0xE20]
	0x01CA73E4 LDR V1, [X9 + 0xCA4]
	0x01CA73E8 MOV X1, X31
	0x01CA73EC BL 0x1CC220C
	0x01CA73F0 LDR X0, [X19 + 0x88]
	0x01CA73F4 CBZ X0, 0x1CA7424
	0x01CA73F8 LDP S0, S1, [X0 + 0xA8]
	0x01CA73FC LDR V2, [X0 + 0xB0]
	0x01CA7400 MOV W1, W31
	0x01CA7404 MOV X2, X31
	0x01CA7408 BL 0x1C9AB24
	0x01CA740C B 0x1CA7418
	0x01CA7410 MOV X0, X19
	0x01CA7414 BL 0x1CA79D4
	0x01CA7418 LDP X30, X19, [X31 + 0x10]
	0x01CA741C ADD X31, X31, 0x20
	0x01CA7420 RET
	0x01CA7424 BL 0x1B6EA1C
	0x01CA7428 STR D10, [X31 - 0x30]!
	0x01CA742C STP D9, D8, [X31 + 0x8]
	0x01CA7430 STR X30, [X31 + 0x18]
	0x01CA7434 STP X20, X19, [X31 + 0x20]
	0x01CA7438 ADRP X20, 0x257C000
	0x01CA743C LDRB W8, [X20 + 0x467]
	0x01CA7440 MOV X19, X0
	0x01CA7444 TBNZ X8, 0x0, 0x1CA745C
	0x01CA7448 ADRP X0, 0x22A7000
	0x01CA744C LDR X0, [X0 + 0x198]
	0x01CA7450 BL 0x1B6E7F0
	0x01CA7454 MOVZ W8, 0x1
	0x01CA7458 STRB W8, [X20 + 0x467]
	0x01CA745C MOV X0, X19
	0x01CA7460 MOV X1, X31
	0x01CA7464 BL 0x3A9B084
	0x01CA7468 CBZ X0, 0x1CA752C
	0x01CA746C ADRP X19, 0x22A7000
	0x01CA7470 LDR X19, [X19 + 0x198]
	0x01CA7474 MOV X1, X31
	0x01CA7478 BL 0x3AA7658
	0x01CA747C LDR X0, [X19]
	0x01CA7480 MOV V8.16B, V0.16B
	0x01CA7484 MOV V9.16B, V1.16B
	0x01CA7488 MOV V10.16B, V2.16B
	0x01CA748C LDR W8, [X0 + 0xE0]
	0x01CA7490 CBNZ W8, 0x1CA7498
	0x01CA7494 BL 0x1B6E8F8
	0x01CA7498 ADRP X20, 0x257C000
	0x01CA749C LDRB W8, [X20 + 0x44F]
	0x01CA74A0 CBNZ W8, 0x1CA74B8
	0x01CA74A4 ADRP X0, 0x22A7000
	0x01CA74A8 LDR X0, [X0 + 0x198]
	0x01CA74AC BL 0x1B6E7F0
	0x01CA74B0 MOVZ W8, 0x1
	0x01CA74B4 STRB W8, [X20 + 0x44F]
	0x01CA74B8 LDR X0, [X19]
	0x01CA74BC LDR W8, [X0 + 0xE0]
	0x01CA74C0 CBNZ W8, 0x1CA74CC
	0x01CA74C4 BL 0x1B6E8F8
	0x01CA74C8 LDR X0, [X19]
	0x01CA74CC LDR X8, [X0 + 0xB8]
	0x01CA74D0 LDR X0, [X8]
	0x01CA74D4 CBZ X0, 0x1CA752C
	0x01CA74D8 MOV X1, X31
	0x01CA74DC BL 0x1CC0098
	0x01CA74E0 CBZ X0, 0x1CA752C
	0x01CA74E4 MOV X1, X31
	0x01CA74E8 BL 0x3AA7658
	0x01CA74EC FSUB S0, S8, S0
	0x01CA74F0 FSUB S1, S9, S1
	0x01CA74F4 FSUB S2, S10, S2
	0x01CA74F8 FMUL S0, S0, S0
	0x01CA74FC FMUL S1, S1, S1
	0x01CA7500 FMUL S2, S2, S2
	0x01CA7504 FADD S0, S0, S1
	0x01CA7508 LDP X20, X19, [X31 + 0x20]
	0x01CA750C LDR X30, [X31 + 0x18]
	0x01CA7510 LDP D9, D8, [X31 + 0x8]
	0x01CA7514 FADD S0, S2, S0
	0x01CA7518 FMOV S1, 0.25
	0x01CA751C FCMP S0, S1
	0x01CA7520 CSET W0, MI
	0x01CA7524 LDR V10, [X31], #0x30
	0x01CA7528 RET
	0x01CA752C BL 0x1B6EA1C
	0x01CA7530 SUB X31, X31, 0x30
	0x01CA7534 STP X30, X21, [X31 + 0x10]
	0x01CA7538 STP X20, X19, [X31 + 0x20]
	0x01CA753C CBZ X1, 0x1CA75CC
	0x01CA7540 MOV X19, X1
	0x01CA7544 MOV X21, X0

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+112], X22
	004 Move [X31+120], X21
	005 Move [X31+128], X20
	006 Move [X31+136], X19
	007 Move X20, 0x257D000
	008 Move W8, [X20+1117]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x22A8000
	015 Move X0, [X0+1496]
	016 Call 0x1B6F7F0
	017 Move X0, 0x22A8000
	018 Move X0, [X0+1504]
	019 Call 0x1B6F7F0
	020 Move X0, 0x22A8000
	021 Move X0, [X0+584]
	022 Call 0x1B6F7F0
	023 Move X0, 0x22A8000
	024 Move X0, [X0+592]
	025 Call 0x1B6F7F0
	026 Move W8, 1
	027 Move [X20+1117], W8
	028 Move X0, X19
	029 Move [X31+104], X31
	030 Move [X31+56], X31
	031 Call HandGrenade.get_isExploded, X0
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {148}
	036 Move W1, 1
	037 Move X0, X19
	038 Call HandGrenade.set_isExploded, X0, X1
	039 Move X0, [X19+128]
	040 Compare X0, 0
	041 JumpIfEqual {155}
	042 Move W1, 1
	043 Move X2, X31
	044 Call GrabbableItem.SetIsHidden, X0, X1
	045 Move X0, X31
	046 Call TickTimer.get_None
	047 And X1, X0, 0
	048 Move X0, X19
	049 Call HandGrenade.set_life, X0, X1
	050 Move X0, X19
	051 Move W1, W31
	052 Call HandGrenade.set_pausedRemainingTicks, X0, X1
	053 Move X20, [X19+56]
	054 Move X21, [X19+160]
	055 Move X0, X19
	056 Move X1, X31
	057 Call Component.get_transform, X0
	058 Compare X0, 0
	059 JumpIfEqual {155}
	060 Move X1, X31
	061 Call Transform.get_position, X0
	062 Move X8, 0x22A8000
	063 Move X8, [X8+584]
	064 Add X0, X31, 40
	065 Move [X31+40], X31
	066 Move [X31+48], X31
	067 Move X1, [X8]
	068 Call Nullable`1<Vector3>..ctor, X0, X1
	069 Move X22, 0x257D000
	070 Move W8, [X22+1108]
	071 Compare W8, 0
	072 JumpIfNotEqual {78}
	073 Move X0, 0x22A8000
	074 Move X0, [X0+504]
	075 Call 0x1B6F7F0
	076 Move W8, 1
	077 Move [X22+1108], W8
	078 Move X8, 0x22A8000
	079 Move X8, [X8+504]
	080 Move X9, 0x22A8000
	081 Add X0, X31, 16
	082 Move X8, [X8]
	083 Move X8, [X8+184]
	084 Move X9, [X9+592]
	085 Move S0, [X8]
	086 Move S1, [X8+4]
	087 Move S2, [X8+8]
	088 Move S3, [X8+12]
	089 Move X1, [X9]
	090 Move [X31+16], X31
	091 Move [X31+24], X31
	092 Move [X31+32], W31
	093 Call Nullable`1<Quaternion>..ctor, X0, X1
	094 Compare X20, 0
	095 JumpIfEqual {155}
	096 Move X8, 0x22A8000
	097 Move X2, [X31+40]
	098 Move X3, [X31+48]
	099 Move X8, [X8+1496]
	100 Move V0, [X31+1]
	101 Move W9, [X31+32]
	102 Add X4, X31, 64
	103 Move X8, [X8]
	104 Move X0, X20
	105 Move X1, X21
	106 Move X5, X31
	107 Move X6, X31
	108 Move W7, W31
	109 Move [X31+4], V0
	110 Move [X31+80], W9
	111 Move [X31], X8
	112 Call 0x2113E18, X0, X1, X2, X3, X4, X5, X6
	113 Move X0, X19
	114 Call HandGrenade.HandleIsExplodedChanged, X0
	115 Move X0, [X19+128]
	116 Compare X0, 0
	117 JumpIfEqual {155}
	118 Move X1, X31
	119 Call GrabbableItem.StartTimeoutTimer, X0
	120 Move X0, [X19+128]
	121 Compare X0, 0
	122 JumpIfEqual {155}
	123 Move X1, X31
	124 Call GrabbableItem.get_backpackId, X0
	125 Move [X31+104], X0
	126 Add X0, X31, 104
	127 Move X1, X31
	128 Call NetworkBehaviourId.get_IsValid, X0
	129 Move TEMP, X0
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfNotEqual {148}
	133 Move X0, [X19+128]
	134 Compare X0, 0
	135 JumpIfEqual {155}
	136 Move X19, [X19+56]
	137 Move X1, X31
	138 Call GrabbableItem.get_backpackId, X0
	139 Compare X19, 0
	140 JumpIfEqual {155}
	141 Move X8, 0x22A8000
	142 Move X8, [X8+1504]
	143 Move X1, X0
	144 Add X2, X31, 56
	145 Move X0, X19
	146 Move X3, [X8]
	147 Call 0x2114594, X0, X1, X2
	148 Move X20, [X31+128]
	149 Move X19, [X31+136]
	150 Move X22, [X31+112]
	151 Move X21, [X31+120]
	152 Move X30, [X31+96]
	153 Add X31, X31, 144
	154 Return 
	155 Call 0x1B6FA1C

Method: System.Void RPC_Use(System.Boolean shortTimer = False)

Disassembly:
	0x01CA76D8 LDR X20, [X20 + 0x198]
	0x01CA76DC LDR X0, [X20]
	0x01CA76E0 LDR W8, [X0 + 0xE0]
	0x01CA76E4 CBNZ W8, 0x1CA76EC
	0x01CA76E8 BL 0x1B6E8F8
	0x01CA76EC ADRP X21, 0x257C000
	0x01CA76F0 LDRB W8, [X21 + 0x44F]
	0x01CA76F4 CBNZ W8, 0x1CA770C
	0x01CA76F8 ADRP X0, 0x22A7000
	0x01CA76FC LDR X0, [X0 + 0x198]
	0x01CA7700 BL 0x1B6E7F0
	0x01CA7704 MOVZ W8, 0x1
	0x01CA7708 STRB W8, [X21 + 0x44F]
	0x01CA770C LDR X0, [X20]
	0x01CA7710 LDR W8, [X0 + 0xE0]
	0x01CA7714 CBNZ W8, 0x1CA7720
	0x01CA7718 BL 0x1B6E8F8
	0x01CA771C LDR X0, [X20]
	0x01CA7720 LDR X8, [X0 + 0xB8]
	0x01CA7724 LDR X0, [X8]
	0x01CA7728 CBZ X0, 0x1CA79CC
	0x01CA772C MOV X1, X31
	0x01CA7730 BL 0x1CC0098
	0x01CA7734 CBZ X0, 0x1CA79CC
	0x01CA7738 MOV X1, X31
	0x01CA773C BL 0x3AA7658
	0x01CA7740 MOV X0, X19
	0x01CA7744 BL 0x1CA7428
	0x01CA7748 TBZ X0, 0x0, 0x1CA799C
	0x01CA774C LDR X8, [X19 + 0x90]
	0x01CA7750 CBZ X8, 0x1CA79CC
	0x01CA7754 LDR X0, [X8 + 0x118]
	0x01CA7758 CBZ X0, 0x1CA79CC
	0x01CA775C MOV X1, X31
	0x01CA7760 BL 0x1C98D1C
	0x01CA7764 STR X0, [X31 + 0x8]
	0x01CA7768 ADD X0, X31, 0x8
	0x01CA776C MOV X1, X31
	0x01CA7770 BL 0x1D680F0
	0x01CA7774 TBNZ X0, 0x0, 0x1CA799C
	0x01CA7778 LDR X0, [X19 + 0x88]
	0x01CA777C CBZ X0, 0x1CA79CC
	0x01CA7780 MOV X1, X31
	0x01CA7784 BL 0x1C98D1C
	0x01CA7788 LDR X8, [X19 + 0x88]
	0x01CA778C CBZ X8, 0x1CA79CC
	0x01CA7790 MOV X20, X0
	0x01CA7794 MOV X0, X8
	0x01CA7798 MOV X1, X31
	0x01CA779C BL 0x1C9A970
	0x01CA77A0 LDR X8, [X19 + 0x90]
	0x01CA77A4 CBZ X8, 0x1CA79CC
	0x01CA77A8 LDR X0, [X8 + 0x118]
	0x01CA77AC CBZ X0, 0x1CA79CC
	0x01CA77B0 MOVZ W2, 0x1
	0x01CA77B4 MOV X1, X20
	0x01CA77B8 MOV W3, W31
	0x01CA77BC MOV X4, X31
	0x01CA77C0 MOV X5, X31
	0x01CA77C4 MOV X6, X31
	0x01CA77C8 MOVZ W21, 0x1
	0x01CA77CC BL 0x1C99804
	0x01CA77D0 B 0x1CA79A0
	0x01CA77D4 LDRB W8, [X8 + 0x8E]
	0x01CA77D8 CBZ W8, 0x1CA799C
	0x01CA77DC MOV X0, X19
	0x01CA77E0 MOV X1, X31
	0x01CA77E4 BL 0x3A9B084
	0x01CA77E8 CBZ X0, 0x1CA79CC
	0x01CA77EC MOV X1, X31
	0x01CA77F0 BL 0x3AA7658
	0x01CA77F4 ADRP X20, 0x22A7000
	0x01CA77F8 LDR X20, [X20 + 0x3D8]
	0x01CA77FC MOV V8.16B, V0.16B
	0x01CA7800 MOV V9.16B, V1.16B
	0x01CA7804 MOV V10.16B, V2.16B
	0x01CA7808 LDR X0, [X20]
	0x01CA780C LDR W8, [X0 + 0xE0]
	0x01CA7810 CBNZ W8, 0x1CA781C
	0x01CA7814 BL 0x1B6E8F8
	0x01CA7818 LDR X0, [X20]
	0x01CA781C LDR X8, [X0 + 0xB8]
	0x01CA7820 MOV X1, X31
	0x01CA7824 LDR W0, [X8 + 0xC]
	0x01CA7828 BL 0x3A9DE68
	0x01CA782C LDR X8, [X20]
	0x01CA7830 MOV W20, W0
	0x01CA7834 MOV X1, X31
	0x01CA7838 LDR X8, [X8 + 0xB8]
	0x01CA783C LDR W8, [X8 + 0x10]
	0x01CA7840 MOV X0, X8
	0x01CA7844 BL 0x3A9DE68
	0x01CA7848 ADRP X8, 0x22A6000
	0x01CA784C LDR X8, [X8 + 0x4C0]
	0x01CA7850 MOV W21, W0
	0x01CA7854 LDR X8, [X8]
	0x01CA7858 LDR W9, [X8 + 0xE0]
	0x01CA785C CBNZ W9, 0x1CA7868
	0x01CA7860 MOV X0, X8
	0x01CA7864 BL 0x1B6E8F8
	0x01CA7868 ADRP X8, 0xFFFFFFFFFEE02000
	0x01CA786C LDR V3, [X8 + 0xD30]
	0x01CA7870 ORR W0, W21, W20, 0x0
	0x01CA7874 MOVZ W1, 0x2
	0x01CA7878 MOV V0.16B, V8.16B
	0x01CA787C MOV V1.16B, V9.16B
	0x01CA7880 MOV V2.16B, V10.16B
	0x01CA7884 MOV X2, X31
	0x01CA7888 BL 0x3AF5250
	0x01CA788C CBZ X0, 0x1CA79CC
	0x01CA7890 LDR W8, [X0 + 0x18]
	0x01CA7894 MOV X20, X0
	0x01CA7898 CMP W8, 0x1
	0x01CA789C B.LT 0x1CA799C
	0x01CA78A0 ADRP X26, 0x22A7000
	0x01CA78A4 ADRP X27, 0x22A7000
	0x01CA78A8 LDR X26, [X26 + 0x628]
	0x01CA78AC LDR X27, [X27 + 0x1B8]
	0x01CA78B0 MOV W25, W31
	0x01CA78B4 CMP W25, W8
	0x01CA78B8 B.CS 0x1CA79D0
	0x01CA78BC ADD X8, X20, W25, 0x3, SXTW
	0x01CA78C0 LDR X0, [X8 + 0x20]
	0x01CA78C4 CBZ X0, 0x1CA79CC
	0x01CA78C8 LDR X1, [X26]
	0x01CA78CC BL 0x208FDE8
	0x01CA78D0 LDR X8, [X24]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x257D000
	006 Move W8, [X21+1118]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x22A8000
	014 Move X0, [X0+448]
	015 Call 0x1B6F7F0
	016 Move X0, 0x22A8000
	017 Move X0, [X0+1520]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X21+1118], W8
	021 Move W8, [X19+88]
	022 Compare W8, 0
	023 JumpIfEqual {59}
	024 Move [X19+88], W31
	025 Move X0, X19
	026 Call HandGrenade.get_isPinPulled, X0
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {75}
	031 Move W1, 1
	032 Move X0, X19
	033 Call HandGrenade.set_isPinPulled, X0, X1
	034 Move X0, [X19+56]
	035 And W31, W20, 1
	036 Move S0, 5
	037 Move S1, 1
	038 NotImplemented "Instruction FCSEL not yet implemented."
	039 Move X1, X31
	040 Call TickTimer.CreateFromSeconds, X0, V0
	041 And X1, X0, 0
	042 Move X0, X19
	043 Call HandGrenade.set_life, X0, X1
	044 Move X0, X19
	045 Move W1, W31
	046 Call HandGrenade.set_pausedRemainingTicks, X0, X1
	047 Move X0, [X19+56]
	048 Move S0, 20
	049 Move X1, X31
	050 Call TickTimer.CreateFromSeconds, X0, V0
	051 And X1, X0, 0
	052 Move X0, X19
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 Call HandGrenade.set_timerPins, X0, X1
	058 Return 
	059 Move X21, 0x22A8000
	060 Move X21, [X21+448]
	061 Move X0, [X21]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1B6F8F8
	066 Move X0, X19
	067 Move X1, X31
	068 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	069 Move X0, [X19+56]
	070 Compare X0, 0
	071 JumpIfEqual {161}
	072 Move X1, X31
	073 Call NetworkRunner.get_Stage, X0
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X20, [X31+16]
	076 Move X19, [X31+24]
	077 Move X30, [X31+32]
	078 Move X21, [X31+40]
	079 Return 
	080 Move X0, [X19+64]
	081 Compare X0, 0
	082 JumpIfEqual {161}
	083 Move X1, X31
	084 Call NetworkObject.GetLocalAuthorityMask, X0
	085 And W31, W0, 7
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfEqual {25}
	090 Move X8, [X19+56]
	091 Compare X8, 0
	092 JumpIfEqual {161}
	093 Move X0, [X8+80]
	094 Compare X0, 0
	095 JumpIfEqual {161}
	096 Move X1, X31
	097 Call Simulation.HasAnyActiveConnections, X0
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {75}
	102 Move X8, [X19+56]
	103 Compare X8, 0
	104 JumpIfEqual {161}
	105 Move X0, [X8+80]
	106 Move W1, 12
	107 Move X2, X31
	108 Call SimulationMessage.Allocate, X0, X1
	109 Move X21, X0
	110 Move W0, 1
	111 Move X1, X31
	112 Call Assert.Check, X0
	113 Move X8, [X19+64]
	114 Compare X8, 0
	115 JumpIfEqual {161}
	116 Move X8, [X8+32]
	117 Compare X8, 0
	118 JumpIfEqual {138}
	119 Move W0, [X8]
	120 Move X0, [X21]
	121 Move X19, [X19+64]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1B6F8F8
	126 Move X8, 0x22A8000
	127 Move X8, [X8+1520]
	128 Move X1, X19
	129 Move X20, [X31+16]
	130 Move X19, [X31+24]
	131 Move W2, 7
	132 Move X0, [X8]
	133 Move X3, X31
	134 Move X30, [X31+32]
	135 Move X21, [X31+40]
	136 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	137 Return 
	138 Move X0, X31
	139 Move W1, [X19+104]
	140 Move W2, 2
	141 Move X3, X31
	142 Call RpcHeader.Create, X0, X1, X2
	143 And W8, W20, 1
	144 Move [X21+28], X0
	145 Move [X21+36], W8
	146 Compare X21, 0
	147 JumpIfEqual {161}
	148 Move W8, 96
	149 Move [X21+12], W8
	150 Move X0, [X19+56]
	151 Compare X0, 0
	152 JumpIfEqual {161}
	153 Move X20, [X31+16]
	154 Move X19, [X31+24]
	155 Move X1, X21
	156 Move X2, X31
	157 Move X30, [X31+32]
	158 Move X21, [X31+40]
	159 Call NetworkRunner.SendRpc, X0, X1
	160 Return 
	161 Call 0x1B6FA1C

Method: System.Void HandleToggleUse()

Disassembly:
	0x01CA78D4 MOV X21, X0
	0x01CA78D8 LDR W9, [X8 + 0xE0]
	0x01CA78DC CBNZ W9, 0x1CA78E8
	0x01CA78E0 MOV X0, X8
	0x01CA78E4 BL 0x1B6E8F8
	0x01CA78E8 MOV X0, X21
	0x01CA78EC MOV X1, X31
	0x01CA78F0 MOV X2, X31
	0x01CA78F4 BL 0x3A9D6EC
	0x01CA78F8 TBZ X0, 0x0, 0x1CA7984
	0x01CA78FC LDR X0, [X24]
	0x01CA7900 LDR X22, [X19 + 0x88]
	0x01CA7904 LDR W8, [X0 + 0xE0]
	0x01CA7908 CBNZ W8, 0x1CA7910
	0x01CA790C BL 0x1B6E8F8
	0x01CA7910 MOV X0, X21
	0x01CA7914 MOV X1, X22
	0x01CA7918 MOV X2, X31
	0x01CA791C BL 0x3A9D6EC
	0x01CA7920 TBZ X0, 0x0, 0x1CA7984
	0x01CA7924 CBZ X21, 0x1CA79CC
	0x01CA7928 LDR W8, [X21 + 0x80]
	0x01CA792C CMP W8, 0x3
	0x01CA7930 B.NE 0x1CA7974
	0x01CA7934 LDR X1, [X27]
	0x01CA7938 MOV X0, X21
	0x01CA793C BL 0x20904A4
	0x01CA7940 LDR X8, [X19 + 0x88]
	0x01CA7944 CBZ X8, 0x1CA79CC
	0x01CA7948 MOV X22, X0
	0x01CA794C LDR X0, [X24]
	0x01CA7950 LDR X23, [X8 + 0xC0]
	0x01CA7954 LDR W9, [X0 + 0xE0]
	0x01CA7958 CBNZ W9, 0x1CA7960
	0x01CA795C BL 0x1B6E8F8
	0x01CA7960 MOV X0, X22
	0x01CA7964 MOV X1, X23
	0x01CA7968 MOV X2, X31
	0x01CA796C BL 0x3AA0AF0
	0x01CA7970 TBNZ X0, 0x0, 0x1CA7984
	0x01CA7974 MOV X0, X19
	0x01CA7978 MOV X1, X21
	0x01CA797C BL 0x1CA7530
	0x01CA7980 TBNZ X0, 0x0, 0x1CA79C4
	0x01CA7984 LDR W8, [X20 + 0x18]
	0x01CA7988 ADD W25, W25, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x257D000
	005 Move W8, [X20+1119]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x22A7000
	012 Move X0, [X0+1144]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X20+1119], W8
	016 Move X0, X19
	017 Call HandGrenade.get_isPinPulled, X0
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {57}
	022 Move X0, X19
	023 Move W1, W31
	024 Call HandGrenade.RPC_Use, X0, X1
	025 Move X8, 0x22A7000
	026 Move X8, [X8+1144]
	027 Move X20, [X19+152]
	028 Move X0, [X8]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1B6F8F8
	033 Move X0, X20
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Inequality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {57}
	041 Move X20, [X19+152]
	042 Move X0, X19
	043 Move X1, X31
	044 Call Component.get_transform, X0
	045 Compare X0, 0
	046 JumpIfEqual {61}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X0, X20
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move S3, 1
	053 Move X1, X31
	054 Move X30, [X31+32]
	055 Call SFXManager.PlaySFX, X0, X1, V0
	056 Return 
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X30, [X31+32]
	060 Return 
	061 Call 0x1B6FA1C

Method: System.Void HandleRespawned()

Disassembly:
	0x01CA798C MOV W21, W31
	0x01CA7990 CMP W25, W8
	0x01CA7994 B.LT 0x1CA78B4
	0x01CA7998 B 0x1CA79A0
	0x01CA799C MOV W21, W31
	0x01CA79A0 MOV W0, W21
	0x01CA79A4 LDP X20, X19, [X31 + 0x60]
	0x01CA79A8 LDP X22, X21, [X31 + 0x50]
	0x01CA79AC LDP X24, X23, [X31 + 0x40]
	0x01CA79B0 LDP X26, X25, [X31 + 0x30]
	0x01CA79B4 LDP X30, X27, [X31 + 0x20]
	0x01CA79B8 LDP D9, D8, [X31 + 0x10]
	0x01CA79BC LDR V10, [X31], #0x70
	0x01CA79C0 RET
	0x01CA79C4 MOVZ W21, 0x1
	0x01CA79C8 B 0x1CA79A0
	0x01CA79CC BL 0x1B6EA1C
	0x01CA79D0 BL 0x1B6EA24
	0x01CA79D4 STR D10, [X31 - 0x60]!
	0x01CA79D8 STP D9, D8, [X31 + 0x10]
	0x01CA79DC STP X30, X25, [X31 + 0x20]
	0x01CA79E0 STP X24, X23, [X31 + 0x30]
	0x01CA79E4 STP X22, X21, [X31 + 0x40]
	0x01CA79E8 STP X20, X19, [X31 + 0x50]
	0x01CA79EC ADRP X20, 0x257C000
	0x01CA79F0 LDRB W8, [X20 + 0x469]
	0x01CA79F4 MOV X19, X0
	0x01CA79F8 TBNZ X8, 0x0, 0x1CA7A4C
	0x01CA79FC ADRP X0, 0x22A7000
	0x01CA7A00 LDR X0, [X0 + 0x638]
	0x01CA7A04 BL 0x1B6E7F0
	0x01CA7A08 ADRP X0, 0x22A7000
	0x01CA7A0C LDR X0, [X0 + 0x640]
	0x01CA7A10 BL 0x1B6E7F0
	0x01CA7A14 ADRP X0, 0x22A7000
	0x01CA7A18 LDR X0, [X0 + 0x268]
	0x01CA7A1C BL 0x1B6E7F0
	0x01CA7A20 ADRP X0, 0x22A7000
	0x01CA7A24 LDR X0, [X0 + 0x648]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call HandGrenade.get_isExploded, X0
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfEqual {15}
	009 Move X0, X19
	010 Call HandGrenade.get_isPinPulled, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {47}
	015 Move X0, X19
	016 Move W1, W31
	017 Call HandGrenade.set_isPinPulled, X0, X1
	018 Move X0, X19
	019 Move W1, W31
	020 Call HandGrenade.set_isExploded, X0, X1
	021 Move X0, [X19+128]
	022 Compare X0, 0
	023 JumpIfEqual {50}
	024 Move W1, W31
	025 Move X2, X31
	026 Call GrabbableItem.SetIsHidden, X0, X1
	027 Move X0, X31
	028 Call TickTimer.get_None
	029 And X1, X0, 0
	030 Move X0, X19
	031 Call HandGrenade.set_life, X0, X1
	032 Move X0, X19
	033 Move W1, W31
	034 Call HandGrenade.set_pausedRemainingTicks, X0, X1
	035 Move X0, X31
	036 Call TickTimer.get_None
	037 And X1, X0, 0
	038 Move X0, X19
	039 Call HandGrenade.set_timerPins, X0, X1
	040 Move X0, X19
	041 Call HandGrenade.HandleIsExplodedChanged, X0
	042 Move X0, X19
	043 Move X30, [X31+16]
	044 Move X19, [X31+24]
	045 Call HandGrenade.HandleIsPinPulledChanged, X0
	046 Return 
	047 Move X30, [X31+16]
	048 Move X19, [X31+24]
	049 Return 
	050 Call 0x1B6FA1C

Method: System.Void HandleDroppedFromDeath()

Disassembly:
	0x01CA7A28 BL 0x1B6E7F0
	0x01CA7A2C ADRP X0, 0x22A6000
	0x01CA7A30 LDR X0, [X0 + 0x478]
	0x01CA7A34 BL 0x1B6E7F0
	0x01CA7A38 ADRP X0, 0x22A6000
	0x01CA7A3C LDR X0, [X0 + 0x4C0]
	0x01CA7A40 BL 0x1B6E7F0
	0x01CA7A44 MOVZ W8, 0x1
	0x01CA7A48 STRB W8, [X20 + 0x469]
	0x01CA7A4C MOV X0, X19
	0x01CA7A50 STR X31, [X31 + 0x8]
	0x01CA7A54 BL 0x1CA7428
	0x01CA7A58 TBZ X0, 0x0, 0x1CA7AF0
	0x01CA7A5C LDR X8, [X19 + 0x90]
	0x01CA7A60 CBZ X8, 0x1CA7CFC
	0x01CA7A64 LDR X0, [X8 + 0x118]
	0x01CA7A68 CBZ X0, 0x1CA7CFC
	0x01CA7A6C MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call HandGrenade.get_isExploded, X0
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfEqual {25}
	009 Move X0, X19
	010 Call HandGrenade.get_isPinPulled, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {25}
	015 Move X0, X31
	016 Call Random.get_value
	017 Move S1, 0.5
	018 NotImplemented "Instruction FCMP not yet implemented."
	019 Move X0, X19
	020 Move W1, W31
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Call HandGrenade.RPC_Use, X0, X1
	024 Return 
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Return 

Method: System.Void AddRigibodyAndForce(UnityEngine.GameObject go)

Disassembly:
	0x01CA7A70 BL 0x1C98D1C
	0x01CA7A74 STR X0, [X31 + 0x8]
	0x01CA7A78 ADD X0, X31, 0x8
	0x01CA7A7C MOV X1, X31
	0x01CA7A80 BL 0x1D680F0
	0x01CA7A84 TBZ X0, 0x0, 0x1CA7AF0
	0x01CA7A88 LDR X8, [X19 + 0x90]
	0x01CA7A8C CBZ X8, 0x1CA7CFC
	0x01CA7A90 LDR X0, [X8 + 0x118]
	0x01CA7A94 CBZ X0, 0x1CA7CFC
	0x01CA7A98 MOV X1, X31
	0x01CA7A9C BL 0x1C98D1C
	0x01CA7AA0 LDR X8, [X19 + 0x90]
	0x01CA7AA4 CBZ X8, 0x1CA7CFC
	0x01CA7AA8 MOV X20, X0
	0x01CA7AAC LDR X0, [X8 + 0x118]
	0x01CA7AB0 CBZ X0, 0x1CA7CFC
	0x01CA7AB4 MOV X1, X31
	0x01CA7AB8 BL 0x1C9A970
	0x01CA7ABC ADRP X8, 0xFFFFFFFFFEE02000
	0x01CA7AC0 ADRP X9, 0xFFFFFFFFFEE02000
	0x01CA7AC4 LDR W0, [X19 + 0x80]
	0x01CA7AC8 LDR V0, [X8 + 0xE20]
	0x01CA7ACC LDR V1, [X9 + 0xCA4]
	0x01CA7AD0 MOV X1, X31
	0x01CA7AD4 BL 0x1CC220C
	0x01CA7AD8 LDR X0, [X19 + 0x88]
	0x01CA7ADC CBZ X0, 0x1CA7CFC
	0x01CA7AE0 MOVZ W2, 0x1
	0x01CA7AE4 MOVZ W3, 0x1
	0x01CA7AE8 MOV X1, X20
	0x01CA7AEC B 0x1CA7CD0
	0x01CA7AF0 MOV X0, X19
	0x01CA7AF4 MOV X1, X31
	0x01CA7AF8 BL 0x3A9B084
	0x01CA7AFC CBZ X0, 0x1CA7CFC
	0x01CA7B00 ADRP X20, 0x22A6000
	0x01CA7B04 ADRP X23, 0x22A7000
	0x01CA7B08 ADRP X21, 0x22A7000
	0x01CA7B0C ADRP X22, 0x22A7000
	0x01CA7B10 LDR X20, [X20 + 0x4C0]
	0x01CA7B14 LDR X23, [X23 + 0x640]
	0x01CA7B18 LDR X21, [X21 + 0x648]
	0x01CA7B1C LDR X22, [X22 + 0x638]
	0x01CA7B20 MOV X1, X31
	0x01CA7B24 BL 0x3AA7658
	0x01CA7B28 LDR W0, [X19 + 0x84]
	0x01CA7B2C MOV X1, X31
	0x01CA7B30 MOV V8.16B, V0.16B
	0x01CA7B34 MOV V9.16B, V1.16B
	0x01CA7B38 MOV V10.16B, V2.16B
	0x01CA7B3C BL 0x3A9DE68
	0x01CA7B40 LDR X8, [X20]
	0x01CA7B44 MOV W20, W0
	0x01CA7B48 LDR W9, [X8 + 0xE0]
	0x01CA7B4C CBNZ W9, 0x1CA7B58
	0x01CA7B50 MOV X0, X8
	0x01CA7B54 BL 0x1B6E8F8
	0x01CA7B58 FMOV S3, 0.5
	0x01CA7B5C MOVZ W1, 0x1
	0x01CA7B60 MOV V0.16B, V8.16B
	0x01CA7B64 MOV V1.16B, V9.16B
	0x01CA7B68 MOV V2.16B, V10.16B
	0x01CA7B6C MOV W0, W20
	0x01CA7B70 MOV X2, X31
	0x01CA7B74 BL 0x3AF5250
	0x01CA7B78 LDR X8, [X23]
	0x01CA7B7C MOV X20, X0
	0x01CA7B80 MOV X0, X8
	0x01CA7B84 BL 0x1B6EA0C
	0x01CA7B88 LDR X2, [X21]
	0x01CA7B8C MOV X1, X19
	0x01CA7B90 MOV X3, X31
	0x01CA7B94 MOV X21, X0
	0x01CA7B98 BL 0x27B63FC
	0x01CA7B9C LDR X2, [X22]
	0x01CA7BA0 MOV X0, X20
	0x01CA7BA4 MOV X1, X21
	0x01CA7BA8 BL 0x20465D4
	0x01CA7BAC CBZ X20, 0x1CA7CFC
	0x01CA7BB0 LDR W8, [X20 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x257D000
	006 Move W8, [X20+1120]
	007 Move X19, X1
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {26}
	012 Move X0, 0x22A8000
	013 Move X0, [X0+1528]
	014 Call 0x1B6F7F0
	015 Move X0, 0x22A8000
	016 Move X0, [X0+1536]
	017 Call 0x1B6F7F0
	018 Move X0, 0x22A8000
	019 Move X0, [X0+1544]
	020 Call 0x1B6F7F0
	021 Move X0, 0x22A7000
	022 Move X0, [X0+1144]
	023 Call 0x1B6F7F0
	024 Move W8, 1
	025 Move [X20+1120], W8
	026 Compare X19, 0
	027 JumpIfEqual {98}
	028 Move X8, 0x22A8000
	029 Move X8, [X8+1536]
	030 Move X0, X19
	031 Move X1, [X8]
	032 Call 0x20CFEF0, X0
	033 Compare X0, 0
	034 JumpIfEqual {98}
	035 Move X20, 0x22A8000
	036 Move X21, 0x22A7000
	037 Move X20, [X20+1544]
	038 Move X21, [X21+1144]
	039 Move W1, 1
	040 Move X2, X31
	041 Call Collider.set_enabled, X0, X1
	042 Move X1, [X20]
	043 Move X0, X19
	044 Call 0x20CFEF0, X0
	045 Move X8, [X21]
	046 Move X20, X0
	047 Move W9, [X8+224]
	048 Compare W9, 0
	049 JumpIfNotEqual {52}
	050 Move X0, X8
	051 Call 0x1B6F8F8
	052 Move X0, X20
	053 Move X1, X31
	054 Move X2, X31
	055 Call Object.op_Equality, X0, X1
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {66}
	060 Move X8, 0x22A8000
	061 Move X8, [X8+1528]
	062 Move X0, X19
	063 Move X1, [X8]
	064 Call 0x20CFE08, X0
	065 Move X20, X0
	066 Compare X20, 0
	067 JumpIfEqual {98}
	068 Move X0, X20
	069 Move W1, W31
	070 Move X2, X31
	071 Call Rigidbody.set_isKinematic, X0, X1
	072 Move X0, X19
	073 Move X1, X31
	074 Call GameObject.get_transform, X0
	075 Compare X0, 0
	076 JumpIfEqual {98}
	077 Move X1, X31
	078 Move X2, X31
	079 Call Transform.set_parent, X0, X1
	080 Move X0, X19
	081 Move X1, X31
	082 Call GameObject.get_transform, X0
	083 Compare X0, 0
	084 JumpIfEqual {98}
	085 Move X1, X31
	086 Call Transform.get_forward, X0
	087 Compare X20, 0
	088 JumpIfEqual {98}
	089 Move X0, X20
	090 Move X20, [X31+16]
	091 Move X19, [X31+24]
	092 Move W1, 1
	093 Move X2, X31
	094 Move X30, [X31+32]
	095 Move X21, [X31+40]
	096 Call Rigidbody.AddForce, X0, X1, X2
	097 Return 
	098 Call 0x1B6FA1C

Method: System.Void RemoveRigidbody(UnityEngine.GameObject go)

Disassembly:
	0x01CA7BB4 CMP W8, 0x1
	0x01CA7BB8 B.LT 0x1CA7CE0
	0x01CA7BBC ADRP X24, 0x22A6000
	0x01CA7BC0 ADRP X25, 0x22A7000
	0x01CA7BC4 LDR X24, [X24 + 0x478]
	0x01CA7BC8 LDR X25, [X25 + 0x268]
	0x01CA7BCC MOV W23, W31
	0x01CA7BD0 CMP W23, W8
	0x01CA7BD4 B.CS 0x1CA7D00
	0x01CA7BD8 ADD X8, X20, W23, 0x3, SXTW
	0x01CA7BDC LDR X21, [X8 + 0x20]
	0x01CA7BE0 CBZ X21, 0x1CA7CFC
	0x01CA7BE4 MOV X0, X21
	0x01CA7BE8 MOV X1, X31
	0x01CA7BEC BL 0x3AF6430
	0x01CA7BF0 LDR X8, [X24]
	0x01CA7BF4 MOV X22, X0
	0x01CA7BF8 LDR W9, [X8 + 0xE0]
	0x01CA7BFC CBNZ W9, 0x1CA7C08
	0x01CA7C00 MOV X0, X8
	0x01CA7C04 BL 0x1B6E8F8
	0x01CA7C08 MOV X0, X22
	0x01CA7C0C MOV X1, X31
	0x01CA7C10 MOV X2, X31
	0x01CA7C14 BL 0x3A9D6EC
	0x01CA7C18 TBZ X0, 0x0, 0x1CA7C30
	0x01CA7C1C MOV X0, X21
	0x01CA7C20 MOV X1, X31
	0x01CA7C24 BL 0x3AF6430
	0x01CA7C28 CBZ X0, 0x1CA7CFC
	0x01CA7C2C MOV X21, X0
	0x01CA7C30 LDR X1, [X25]
	0x01CA7C34 MOV X0, X21
	0x01CA7C38 BL 0x208FDE8
	0x01CA7C3C LDR X8, [X24]
	0x01CA7C40 MOV X21, X0
	0x01CA7C44 LDR W9, [X8 + 0xE0]
	0x01CA7C48 CBNZ W9, 0x1CA7C54
	0x01CA7C4C MOV X0, X8
	0x01CA7C50 BL 0x1B6E8F8
	0x01CA7C54 MOV X0, X21
	0x01CA7C58 MOV X1, X31
	0x01CA7C5C MOV X2, X31
	0x01CA7C60 BL 0x3A9D6EC
	0x01CA7C64 TBNZ X0, 0x0, 0x1CA7C7C
	0x01CA7C68 LDR W8, [X20 + 0x18]
	0x01CA7C6C ADD W23, W23, 0x1
	0x01CA7C70 CMP W23, W8
	0x01CA7C74 B.LT 0x1CA7BD0
	0x01CA7C78 B 0x1CA7CE0
	0x01CA7C7C ADRP X8, 0xFFFFFFFFFEE02000
	0x01CA7C80 ADRP X9, 0xFFFFFFFFFEE02000
	0x01CA7C84 LDR W0, [X19 + 0x80]
	0x01CA7C88 LDR V0, [X8 + 0xE20]
	0x01CA7C8C LDR V1, [X9 + 0xCA4]
	0x01CA7C90 MOV X1, X31
	0x01CA7C94 BL 0x1CC220C
	0x01CA7C98 CBZ X21, 0x1CA7CFC
	0x01CA7C9C LDR X8, [X21 + 0x40]
	0x01CA7CA0 LDR X0, [X19 + 0x88]
	0x01CA7CA4 CBZ X8, 0x1CA7CB8
	0x01CA7CA8 LDR X8, [X8 + 0x20]
	0x01CA7CAC CBZ X8, 0x1CA7CB8
	0x01CA7CB0 LDR W1, [X8]
	0x01CA7CB4 B 0x1CA7CBC
	0x01CA7CB8 MOV X1, X31
	0x01CA7CBC CBZ X0, 0x1CA7CFC
	0x01CA7CC0 LDR W8, [X21 + 0x68]
	0x01CA7CC4 MOVZ W3, 0x1
	0x01CA7CC8 MOV W2, W31
	0x01CA7CCC BFM X1, X8, 0x20, 0x1F
	0x01CA7CD0 MOV X4, X31
	0x01CA7CD4 MOV X5, X31
	0x01CA7CD8 MOV X6, X31
	0x01CA7CDC BL 0x1C99804
	0x01CA7CE0 LDP X20, X19, [X31 + 0x50]
	0x01CA7CE4 LDP X22, X21, [X31 + 0x40]
	0x01CA7CE8 LDP X24, X23, [X31 + 0x30]
	0x01CA7CEC LDP X30, X25, [X31 + 0x20]
	0x01CA7CF0 LDP D9, D8, [X31 + 0x10]
	0x01CA7CF4 LDR V10, [X31], #0x60
	0x01CA7CF8 RET
	0x01CA7CFC BL 0x1B6EA1C
	0x01CA7D00 BL 0x1B6EA24
	0x01CA7D04 MOV X1, X31
	0x01CA7D08 B 0x1D661D8
	0x01CA7D0C STP D13, D12, [X31 - 0x60]!
	0x01CA7D10 STP D11, D10, [X31 + 0x10]
	0x01CA7D14 STP D9, D8, [X31 + 0x20]
	0x01CA7D18 STR X30, [X31 + 0x30]
	0x01CA7D1C STP X22, X21, [X31 + 0x40]
	0x01CA7D20 STP X20, X19, [X31 + 0x50]
	0x01CA7D24 CBZ X1, 0x1CA7E9C
	0x01CA7D28 MOV X19, X0
	0x01CA7D2C MOV X0, X1
	0x01CA7D30 MOV X1, X31
	0x01CA7D34 MOV X20, X2
	0x01CA7D38 BL 0x3A9B084
	0x01CA7D3C CBZ X0, 0x1CA7E9C
	0x01CA7D40 MOV X1, X31
	0x01CA7D44 BL 0x3AA7658
	0x01CA7D48 MOV X0, X19
	0x01CA7D4C MOV X1, X31
	0x01CA7D50 MOV V8.16B, V0.16B
	0x01CA7D54 MOV V9.16B, V1.16B
	0x01CA7D58 MOV V10.16B, V2.16B
	0x01CA7D5C BL 0x3A9B084
	0x01CA7D60 CBZ X0, 0x1CA7E9C
	0x01CA7D64 MOV X1, X31
	0x01CA7D68 BL 0x3AA7658
	0x01CA7D6C ADRP X21, 0x257C000
	0x01CA7D70 LDRB W8, [X21 + 0x506]
	0x01CA7D74 MOV V11.16B, V0.16B
	0x01CA7D78 MOV V12.16B, V1.16B
	0x01CA7D7C MOV V13.16B, V2.16B
	0x01CA7D80 CBNZ W8, 0x1CA7D98
	0x01CA7D84 ADRP X0, 0x22A6000
	0x01CA7D88 LDR X0, [X0 + 0x488]
	0x01CA7D8C BL 0x1B6E7F0
	0x01CA7D90 MOVZ W8, 0x1
	0x01CA7D94 STRB W8, [X21 + 0x506]
	0x01CA7D98 ADRP X22, 0x22A6000
	0x01CA7D9C LDR X22, [X22 + 0x488]
	0x01CA7DA0 FSUB S11, S8, S11
	0x01CA7DA4 FSUB S9, S9, S12
	0x01CA7DA8 FSUB S8, S10, S13
	0x01CA7DAC LDR X0, [X22]
	0x01CA7DB0 LDR W8, [X0 + 0xE0]
	0x01CA7DB4 CBNZ W8, 0x1CA7DBC
	0x01CA7DB8 BL 0x1B6E8F8
	0x01CA7DBC FMUL S0, S11, S11
	0x01CA7DC0 FMUL S1, S9, S9
	0x01CA7DC4 FADD S0, S0, S1
	0x01CA7DC8 FMUL S1, S8, S8
	0x01CA7DCC FADD S0, S1, S0
	0x01CA7DD0 FSQRT S0, S0
	0x01CA7DD4 STR S0, [X31 + 0x3C]
	0x01CA7DD8 CBZ X20, 0x1CA7E9C
	0x01CA7DDC MOV X0, X20
	0x01CA7DE0 MOV X1, X31
	0x01CA7DE4 BL 0x3A9B084
	0x01CA7DE8 CBZ X0, 0x1CA7E9C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x257D000
	009 Move X21, 0x22A7000
	010 Move W8, [X22+1121]
	011 Move X21, [X21+1144]
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x22A8000
	019 Move X0, [X0+1536]
	020 Call 0x1B6F7F0
	021 Move X0, 0x22A8000
	022 Move X0, [X0+1552]
	023 Call 0x1B6F7F0
	024 Move X0, 0x22A7000
	025 Move X0, [X0+1144]
	026 Call 0x1B6F7F0
	027 Move W8, 1
	028 Move [X22+1121], W8
	029 Move X0, [X21]
	030 Move [X31+8], X31
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1B6F8F8
	035 Move X0, X19
	036 Move X1, X31
	037 Move X2, X31
	038 Call Object.op_Equality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {168}
	043 Compare X19, 0
	044 JumpIfEqual {176}
	045 Move X0, X19
	046 Move X1, X31
	047 Call GameObject.get_activeSelf, X0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {56}
	052 Move W1, 1
	053 Move X0, X19
	054 Move X2, X31
	055 Call GameObject.SetActive, X0, X1
	056 Move X8, 0x22A8000
	057 Move X8, [X8+1552]
	058 Add X1, X31, 8
	059 Move X0, X19
	060 Move X2, [X8]
	061 Call 0x20D12D0, X0, X1
	062 Move X22, 0x22A7000
	063 Move X22, [X22+1152]
	064 Move X23, 0x257D000
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {94}
	069 Move X0, [X31+8]
	070 Compare X0, 0
	071 JumpIfEqual {176}
	072 Move W1, 1
	073 Move X2, X31
	074 Move W24, 1
	075 Call Rigidbody.set_isKinematic, X0, X1
	076 Move W8, [X23+1087]
	077 Move X21, [X31+8]
	078 Compare W8, 0
	079 JumpIfNotEqual {84}
	080 Move X0, 0x22A7000
	081 Move X0, [X0+1152]
	082 Call 0x1B6F7F0
	083 Move [X23+1087], W24
	084 Compare X21, 0
	085 JumpIfEqual {176}
	086 Move X8, [X22]
	087 Move X0, X21
	088 Move X1, X31
	089 Move X8, [X8+184]
	090 Move S1, [X8+4]
	091 Move S2, [X8+8]
	092 Move V0, [X8]
	093 Call Rigidbody.set_velocity, X0, X1
	094 Move X0, X19
	095 Move X1, X31
	096 Call GameObject.get_transform, X0
	097 Move X8, [X20+168]
	098 Compare X8, 0
	099 JumpIfEqual {176}
	100 Move X20, X0
	101 Move X0, X8
	102 Move X1, X31
	103 Call GameObject.get_transform, X0
	104 Compare X20, 0
	105 JumpIfEqual {176}
	106 Move X1, X0
	107 Move X0, X20
	108 Move X2, X31
	109 Call Transform.set_parent, X0, X1
	110 Move X0, X19
	111 Move X1, X31
	112 Call GameObject.get_transform, X0
	113 Move W8, [X23+1087]
	114 Move X20, X0
	115 Compare W8, 0
	116 JumpIfNotEqual {122}
	117 Move X0, 0x22A7000
	118 Move X0, [X0+1152]
	119 Call 0x1B6F7F0
	120 Move W8, 1
	121 Move [X23+1087], W8
	122 Compare X20, 0
	123 JumpIfEqual {176}
	124 Move X8, [X22]
	125 Move X0, X20
	126 Move X1, X31
	127 Move X8, [X8+184]
	128 Move S1, [X8+4]
	129 Move S2, [X8+8]
	130 Move V0, [X8]
	131 Call Transform.set_localPosition, X0, X1
	132 Move X0, X19
	133 Move X1, X31
	134 Call GameObject.get_transform, X0
	135 Move X21, 0x257D000
	136 Move W8, [X21+1108]
	137 Move X20, X0
	138 Compare W8, 0
	139 JumpIfNotEqual {145}
	140 Move X0, 0x22A8000
	141 Move X0, [X0+504]
	142 Call 0x1B6F7F0
	143 Move W8, 1
	144 Move [X21+1108], W8
	145 Compare X20, 0
	146 JumpIfEqual {176}
	147 Move X8, 0x22A8000
	148 Move X8, [X8+504]
	149 Move X0, X20
	150 Move X1, X31
	151 Move X8, [X8]
	152 Move X8, [X8+184]
	153 Move S2, [X8+8]
	154 Move S3, [X8+12]
	155 Move S0, [X8]
	156 Move S1, [X8+4]
	157 Call Transform.set_localRotation, X0, X1
	158 Move X8, 0x22A8000
	159 Move X8, [X8+1536]
	160 Move X0, X19
	161 Move X1, [X8]
	162 Call 0x20CFEF0, X0
	163 Compare X0, 0
	164 JumpIfEqual {176}
	165 Move W1, W31
	166 Move X2, X31
	167 Call Collider.set_enabled, X0, X1
	168 Move X20, [X31+48]
	169 Move X19, [X31+56]
	170 Move X22, [X31+32]
	171 Move X21, [X31+40]
	172 Move X24, [X31+16]
	173 Move X23, [X31+24]
	174 Move X30, [X31+64]
	175 Return 
	176 Call 0x1B6FA1C

Method: System.Void HandleIsPinPulledChanged()

Disassembly:
	0x01CA70D8 MOV X1, X21
	0x01CA70DC MOV X2, X31
	0x01CA70E0 BL 0x322A750
	0x01CA70E4 CBZ X0, 0x1CA7178
	0x01CA70E8 LDR X1, [X23]
	0x01CA70EC LDR X8, [X0]
	0x01CA70F0 CMP X8, X1
	0x01CA70F4 B.NE 0x1CA7174
	0x01CA70F8 LDR X8, [X22]
	0x01CA70FC LDR X8, [X8 + 0xB8]
	0x01CA7100 STR X0, [X8 + 0x58]
	0x01CA7104 B 0x1CA7168
	0x01CA7108 ADRP X23, 0x22A7000
	0x01CA710C LDR X20, [X8 + 0x48]
	0x01CA7110 LDR X23, [X23 + 0x170]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call HandGrenade.get_isPinPulled, X0
	005 Move X1, [X19+136]
	006 Move TEMP, X0
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {16}
	010 Call HandGrenade.AddRigibodyAndForce, X0, X1
	011 Move X1, [X19+144]
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call HandGrenade.AddRigibodyAndForce, X0, X1
	015 Return 
	016 Move X0, X19
	017 Call HandGrenade.RemoveRigidbody, X0, X1
	018 Move X1, [X19+144]
	019 Move X0, X19
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Call HandGrenade.RemoveRigidbody, X0, X1
	023 Return 

Method: System.Void HandleIsExplodedChanged()

Disassembly:
	0x01CA707C MOV X1, X31
	0x01CA7080 BL 0x1D9E6A0
	0x01CA7084 TBZ X0, 0x0, 0x1CA7194
	0x01CA7088 ADRP X22, 0x22A7000
	0x01CA708C LDR X22, [X22 + 0x450]
	0x01CA7090 LDR W9, [X19 + 0x80]
	0x01CA7094 LDR X8, [X22]
	0x01CA7098 CMP W9, 0x1
	0x01CA709C LDR X8, [X8 + 0xB8]
	0x01CA70A0 B.NE 0x1CA7108
	0x01CA70A4 ADRP X23, 0x22A7000
	0x01CA70A8 LDR X20, [X8 + 0x58]
	0x01CA70AC LDR X23, [X23 + 0x170]
	0x01CA70B0 LDR X0, [X23]
	0x01CA70B4 BL 0x1B6EA0C
	0x01CA70B8 ADRP X8, 0x22A7000
	0x01CA70BC LDR X8, [X8 + 0x620]
	0x01CA70C0 MOV X1, X19
	0x01CA70C4 MOV X3, X31
	0x01CA70C8 MOV X21, X0
	0x01CA70CC LDR X2, [X8]
	0x01CA70D0 BL 0x317DB24
	0x01CA70D4 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, [X0+144]
	005 Move X19, X0
	006 Call HandGrenade.get_isExploded, X0
	007 Compare X20, 0
	008 JumpIfEqual {28}
	009 NotImplemented "Instruction ORN not yet implemented."
	010 And W1, W8, 1
	011 Move X0, X20
	012 Move X2, X31
	013 Call GameObject.SetActive, X0, X1
	014 Move X20, [X19+136]
	015 Move X0, X19
	016 Call HandGrenade.get_isExploded, X0
	017 Compare X20, 0
	018 JumpIfEqual {28}
	019 NotImplemented "Instruction ORN not yet implemented."
	020 Move X0, X20
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 And W1, W8, 1
	024 Move X2, X31
	025 Move X30, [X31+32]
	026 Call GameObject.SetActive, X0, X1
	027 Return 
	028 Call 0x1B6FA1C

Method: System.Void Hit(System.Int32 damage, UnityEngine.Vector3 position, AnimalCompany.RandomSFX hitSound, AnimalCompany.RandomSFX killSound, UnityEngine.Vector3 force, System.String hitName)

Disassembly:
	0x01CA7DEC MOV X1, X31
	0x01CA7DF0 BL 0x3AA7658
	0x01CA7DF4 MOV X0, X19
	0x01CA7DF8 MOV X1, X31
	0x01CA7DFC MOV V8.16B, V0.16B
	0x01CA7E00 MOV V9.16B, V1.16B
	0x01CA7E04 MOV V10.16B, V2.16B
	0x01CA7E08 BL 0x3A9B084
	0x01CA7E0C CBZ X0, 0x1CA7E9C
	0x01CA7E10 MOV X1, X31
	0x01CA7E14 BL 0x3AA7658
	0x01CA7E18 LDRB W8, [X21 + 0x506]
	0x01CA7E1C MOV V11.16B, V0.16B
	0x01CA7E20 MOV V12.16B, V1.16B
	0x01CA7E24 MOV V13.16B, V2.16B
	0x01CA7E28 CBNZ W8, 0x1CA7E40
	0x01CA7E2C ADRP X0, 0x22A6000
	0x01CA7E30 LDR X0, [X0 + 0x488]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 Move X19, X0
	006 Call HandGrenade.get_isExploded, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {17}
	011 Move X0, X19
	012 Call HandGrenade.get_isPinPulled, X0
	013 Move TEMP, X0
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {21}
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return 
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X0, X19
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 NotImplemented "Instruction CSET not yet implemented."
	026 Move X30, [X31+32]
	027 Call HandGrenade.RPC_Use, X0, X1
	028 Return 

Method: System.Void .ctor()

Disassembly:
	0x01CA7E34 BL 0x1B6E7F0
	0x01CA7E38 MOVZ W8, 0x1

ISIL:
	001 Move X1, X31
	002 Call NetworkBehaviour..ctor, X0
	003 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01CA7E3C STRB W8, [X21 + 0x506]
	0x01CA7E40 LDR X0, [X22]
	0x01CA7E44 FSUB S11, S8, S11
	0x01CA7E48 FSUB S9, S9, S12
	0x01CA7E4C FSUB S8, S10, S13
	0x01CA7E50 LDR W8, [X0 + 0xE0]
	0x01CA7E54 CBNZ W8, 0x1CA7E5C
	0x01CA7E58 BL 0x1B6E8F8
	0x01CA7E5C FMUL S0, S11, S11
	0x01CA7E60 FMUL S1, S9, S9
	0x01CA7E64 FADD S0, S0, S1
	0x01CA7E68 FMUL S1, S8, S8
	0x01CA7E6C FADD S0, S1, S0
	0x01CA7E70 FSQRT S0, S0
	0x01CA7E74 ADD X0, X31, 0x3C
	0x01CA7E78 MOV X1, X31
	0x01CA7E7C BL 0x31F935C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, [X0+192]
	004 Move X19, X0
	005 Call HandGrenade.set_life, X0, X1
	006 Move W1, [X19+196]
	007 Move X0, X19
	008 Call HandGrenade.set_pausedRemainingTicks, X0, X1
	009 Move W1, [X19+200]
	010 Move X0, X19
	011 Call HandGrenade.set_timerPins, X0, X1
	012 Move W1, [X19+204]
	013 Move X0, X19
	014 Call HandGrenade.set_isPinPulled, X0, X1
	015 Move W1, [X19+205]
	016 Move X0, X19
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Call HandGrenade.set_isExploded, X0, X1
	020 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01CA7E80 LDP X20, X19, [X31 + 0x50]
	0x01CA7E84 LDP X22, X21, [X31 + 0x40]
	0x01CA7E88 LDR X30, [X31 + 0x30]
	0x01CA7E8C LDP D9, D8, [X31 + 0x20]
	0x01CA7E90 LDP D11, D10, [X31 + 0x10]
	0x01CA7E94 LDP D13, D12, [X31], #0x60
	0x01CA7E98 RET
	0x01CA7E9C BL 0x1B6EA1C
	0x01CA7EA0 RET
	0x01CA7EA4 RET
	0x01CA7EA8 STP X30, X19, [X31 - 0x10]!
	0x01CA7EAC LDR X8, [X0 + 0x50]
	0x01CA7EB0 CBZ X8, 0x1CA7EC8
	0x01CA7EB4 LDR W8, [X8]
	0x01CA7EB8 CMP W8, 0x0
	0x01CA7EBC CSET W0, NE
	0x01CA7EC0 LDP X30, X19, [X31], #0x10
	0x01CA7EC4 RET
	0x01CA7EC8 ADRP X0, 0x22A6000
	0x01CA7ECC LDR X0, [X0 + 0x490]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call HandGrenade.get_life, X0
	005 Move [X19+192], W0
	006 Move X0, X19
	007 Call HandGrenade.get_pausedRemainingTicks, X0
	008 Move [X19+196], W0
	009 Move X0, X19
	010 Call HandGrenade.get_timerPins, X0
	011 Move [X19+200], W0
	012 Move X0, X19
	013 Call HandGrenade.get_isPinPulled, X0
	014 And W8, W0, 1
	015 Move X0, X19
	016 Move [X19+204], W8
	017 Call HandGrenade.get_isExploded, X0
	018 And W8, W0, 1
	019 Move [X19+205], W8
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return 

Method: System.Void RPC_Explode@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01CA7ED0 BL 0x1B6E804
	0x01CA7ED4 BL 0x1B6EA0C
	0x01CA7ED8 MOV X19, X0
	0x01CA7EDC ADRP X0, 0x22A7000
	0x01CA7EE0 LDR X0, [X0 + 0x650]
	0x01CA7EE4 BL 0x1B6E804
	0x01CA7EE8 MOV X1, X0
	0x01CA7EEC MOV X0, X19
	0x01CA7EF0 MOV X2, X31
	0x01CA7EF4 BL 0x31E7550
	0x01CA7EF8 ADRP X0, 0x22A7000
	0x01CA7EFC LDR X0, [X0 + 0x658]
	0x01CA7F00 BL 0x1B6E804
	0x01CA7F04 MOV X1, X0
	0x01CA7F08 MOV X0, X19
	0x01CA7F0C BL 0x1B6E8E8
	0x01CA7F10 STP X30, X19, [X31 - 0x10]!
	0x01CA7F14 LDR X8, [X0 + 0x50]
	0x01CA7F18 CBZ X8, 0x1CA7F2C
	0x01CA7F1C AND W9, W1, 0x1
	0x01CA7F20 STR W9, [X8]
	0x01CA7F24 LDP X30, X19, [X31], #0x10
	0x01CA7F28 RET
	0x01CA7F2C ADRP X0, 0x22A6000
	0x01CA7F30 LDR X0, [X0 + 0x490]
	0x01CA7F34 BL 0x1B6E804
	0x01CA7F38 BL 0x1B6EA0C
	0x01CA7F3C MOV X19, X0
	0x01CA7F40 ADRP X0, 0x22A7000
	0x01CA7F44 LDR X0, [X0 + 0x650]
	0x01CA7F48 BL 0x1B6E804
	0x01CA7F4C MOV X1, X0
	0x01CA7F50 MOV X0, X19
	0x01CA7F54 MOV X2, X31
	0x01CA7F58 BL 0x31E7550
	0x01CA7F5C ADRP X0, 0x22A7000
	0x01CA7F60 LDR X0, [X0 + 0x660]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x257D000
	005 Move W8, [X20+1122]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x22A8000
	012 Move X0, [X0+1560]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X20+1122], W8
	016 Move W0, 1
	017 Move X1, X31
	018 Move W20, 1
	019 Call Assert.Check, X0
	020 Compare X19, 0
	021 JumpIfEqual {42}
	022 Move X9, 0x22A8000
	023 Move X9, [X9+1560]
	024 Move [X19+88], W20
	025 Move X8, [X19]
	026 Move X1, [X9]
	027 Move W10, [X8+304]
	028 Move W9, [X1+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, [X8+200]
	031 Add X8, X8, X9
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Call HandGrenade.RPC_Explode, X0
	039 Return 
	040 Move X0, X19
	041 Call 0x1B6FCDC
	042 Call 0x1B6FA1C

Method: System.Void RPC_Use@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01CA7F64 BL 0x1B6E804
	0x01CA7F68 MOV X1, X0
	0x01CA7F6C MOV X0, X19
	0x01CA7F70 BL 0x1B6E8E8
	0x01CA7F74 STP X30, X21, [X31 - 0x20]!
	0x01CA7F78 STP X20, X19, [X31 + 0x10]
	0x01CA7F7C ADRP X21, 0x257C000
	0x01CA7F80 LDRB W9, [X21 + 0x46A]
	0x01CA7F84 MOV X20, X0
	0x01CA7F88 MOV X19, X8
	0x01CA7F8C TBNZ X9, 0x0, 0x1CA7FA4
	0x01CA7F90 ADRP X0, 0x22A7000
	0x01CA7F94 LDR X0, [X0 + 0x668]
	0x01CA7F98 BL 0x1B6E7F0
	0x01CA7F9C MOVZ W8, 0x1
	0x01CA7FA0 STRB W8, [X21 + 0x46A]
	0x01CA7FA4 LDR X20, [X20 + 0x50]
	0x01CA7FA8 CBZ X20, 0x1CA7FE4
	0x01CA7FAC ADRP X21, 0x22A7000
	0x01CA7FB0 LDR X21, [X21 + 0x668]
	0x01CA7FB4 MOV X0, X31
	0x01CA7FB8 BL 0x1D158D8
	0x01CA7FBC MOV X3, X0
	0x01CA7FC0 STP X31, X31, [X19 + 0x8]
	0x01CA7FC4 LDR X4, [X21]
	0x01CA7FC8 ADD X1, X20, 0x4
	0x01CA7FCC STR X31, [X19]
	0x01CA7FD0 MOV X0, X19
	0x01CA7FD4 LDP X20, X19, [X31 + 0x10]
	0x01CA7FD8 MOVZ W2, 0xA
	0x01CA7FDC LDP X30, X21, [X31], #0x20
	0x01CA7FE0 B 0x22AE508
	0x01CA7FE4 ADRP X0, 0x22A6000
	0x01CA7FE8 LDR X0, [X0 + 0x490]
	0x01CA7FEC BL 0x1B6E804
	0x01CA7FF0 BL 0x1B6EA0C
	0x01CA7FF4 MOV X19, X0
	0x01CA7FF8 ADRP X0, 0x22A7000
	0x01CA7FFC LDR X0, [X0 + 0x670]
	0x01CA8000 BL 0x1B6E804
	0x01CA8004 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x257D000
	006 Move W8, [X21+1123]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x22A8000
	014 Move X0, [X0+1560]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1123], W8
	018 Move W0, 1
	019 Move X1, X31
	020 Move W21, 1
	021 Call Assert.Check, X0
	022 Compare X19, 0
	023 JumpIfEqual {48}
	024 Move X10, 0x22A8000
	025 Move X10, [X10+1560]
	026 Move W8, [X20+36]
	027 Move [X19+88], W21
	028 Move X9, [X19]
	029 Move X1, [X10]
	030 Move W11, [X9+304]
	031 Move W10, [X1+304]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X9, [X9+200]
	034 Add X9, X9, X10
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X19
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction CSET not yet implemented."
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Call HandGrenade.RPC_Use, X0, X1
	045 Return 
	046 Move X0, X19
	047 Call 0x1B6FCDC
	048 Call 0x1B6FA1C

