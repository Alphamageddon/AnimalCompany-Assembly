Type: AnimalCompany.Nametag

Method: System.Void SetupBoneAttachment()

Disassembly:
	0x01CC06F8 FMOV S0, W31
	0x01CC06FC FMOV S1, W31
	0x01CC0700 FMOV S2, W31
	0x01CC0704 MOV W1, W31
	0x01CC0708 LDP X30, X21, [X31], #0x20
	0x01CC070C B 0x1CC4C0C
	0x01CC0710 BL 0x1B6EA24
	0x01CC0714 BL 0x1B6EA1C
	0x01CC0718 SUB X31, X31, 0x30
	0x01CC071C STP X30, X21, [X31 + 0x10]
	0x01CC0720 STP X20, X19, [X31 + 0x20]
	0x01CC0724 ADRP X19, 0x2563000
	0x01CC0728 LDRB W8, [X19 + 0x542]
	0x01CC072C MOV X20, X0
	0x01CC0730 TBNZ X8, 0x0, 0x1CC0748
	0x01CC0734 ADRP X0, 0x228E000
	0x01CC0738 LDR X0, [X0 + 0x198]
	0x01CC073C BL 0x1B6E7F0
	0x01CC0740 MOVZ W8, 0x1
	0x01CC0744 STRB W8, [X19 + 0x542]
	0x01CC0748 LDR X8, [X20 + 0x108]
	0x01CC074C CBZ X8, 0x1CC0864
	0x01CC0750 LDR W1, [X8 + 0x18]
	0x01CC0754 MOV W0, W31
	0x01CC0758 MOV X2, X31
	0x01CC075C BL 0x3A98D10
	0x01CC0760 LDR X9, [X20 + 0x108]
	0x01CC0764 CBZ X9, 0x1CC0864
	0x01CC0768 LDR W8, [X9 + 0x18]
	0x01CC076C CMP W0, W8
	0x01CC0770 B.CS 0x1CC0868
	0x01CC0774 ADRP X19, 0x228E000
	0x01CC0778 LDR X19, [X19 + 0x198]
	0x01CC077C ADD X9, X9, W0, 0x4, SXTW
	0x01CC0780 LDR V0, [X9 + 0x2]
	0x01CC0784 LDR X8, [X19]
	0x01CC0788 STR V0, [X31]
	0x01CC078C LDR W10, [X8 + 0xE0]
	0x01CC0790 CBNZ W10, 0x1CC079C
	0x01CC0794 MOV X0, X8
	0x01CC0798 BL 0x1B6E8F8
	0x01CC079C ADRP X21, 0x2563000
	0x01CC07A0 LDRB W8, [X21 + 0x5C1]
	0x01CC07A4 CBNZ W8, 0x1CC07BC
	0x01CC07A8 ADRP X0, 0x228E000
	0x01CC07AC LDR X0, [X0 + 0x198]
	0x01CC07B0 BL 0x1B6E7F0
	0x01CC07B4 MOVZ W8, 0x1
	0x01CC07B8 STRB W8, [X21 + 0x5C1]
	0x01CC07BC LDR X0, [X19]
	0x01CC07C0 LDR W8, [X0 + 0xE0]
	0x01CC07C4 CBNZ W8, 0x1CC07D0
	0x01CC07C8 BL 0x1B6E8F8
	0x01CC07CC LDR X0, [X19]
	0x01CC07D0 LDR X8, [X0 + 0xB8]
	0x01CC07D4 LDR V0, [X31]
	0x01CC07D8 ADRP X21, 0x2563000
	0x01CC07DC STUR V0, [X8 + 0x8]
	0x01CC07E0 LDRB W8, [X21 + 0x512]
	0x01CC07E4 LDR X20, [X20 + 0x38]
	0x01CC07E8 CBNZ W8, 0x1CC0800
	0x01CC07EC MOV X0, X19
	0x01CC07F0 BL 0x1B6E7F0
	0x01CC07F4 LDR X0, [X19]
	0x01CC07F8 MOVZ W8, 0x1
	0x01CC07FC STRB W8, [X21 + 0x512]
	0x01CC0800 LDR W8, [X0 + 0xE0]
	0x01CC0804 CBNZ W8, 0x1CC0810
	0x01CC0808 BL 0x1B6E8F8
	0x01CC080C LDR X0, [X19]
	0x01CC0810 CBZ X20, 0x1CC0864
	0x01CC0814 LDR X8, [X0 + 0xB8]
	0x01CC0818 MOV X0, X20
	0x01CC081C LDP S2, S3, [X8 + 0x10]
	0x01CC0820 LDP S0, S1, [X8 + 0x8]
	0x01CC0824 BL 0x1CC0A4C
	0x01CC0828 LDR X8, [X19]
	0x01CC082C LDR X8, [X8 + 0xB8]
	0x01CC0830 LDR X8, [X8 + 0x28]
	0x01CC0834 CBZ X8, 0x1CC0854
	0x01CC0838 LDR X2, [X8 + 0x18]
	0x01CC083C LDR X0, [X8 + 0x40]
	0x01CC0840 LDR X1, [X8 + 0x28]
	0x01CC0844 LDP X20, X19, [X31 + 0x20]
	0x01CC0848 LDP X30, X21, [X31 + 0x10]
	0x01CC084C ADD X31, X31, 0x30
	0x01CC0850 BR X2
	0x01CC0854 LDP X20, X19, [X31 + 0x20]
	0x01CC0858 LDP X30, X21, [X31 + 0x10]
	0x01CC085C ADD X31, X31, 0x30
	0x01CC0860 RET
	0x01CC0864 BL 0x1B6EA1C
	0x01CC0868 BL 0x1B6EA24
	0x01CC086C FMOV S1, W31
	0x01CC0870 RET
	0x01CC0874 STP X30, X23, [X31 - 0x30]!
	0x01CC0878 STP X22, X21, [X31 + 0x10]
	0x01CC087C STP X20, X19, [X31 + 0x20]
	0x01CC0880 ADRP X21, 0x2563000
	0x01CC0884 ADRP X20, 0x228E000
	0x01CC0888 LDRB W8, [X21 + 0x541]
	0x01CC088C LDR X20, [X20 + 0x198]
	0x01CC0890 MOV X19, X0
	0x01CC0894 TBNZ X8, 0x0, 0x1CC08F4
	0x01CC0898 ADRP X0, 0x228F000
	0x01CC089C LDR X0, [X0 + 0x2E0]
	0x01CC08A0 BL 0x1B6E7F0
	0x01CC08A4 ADRP X0, 0x228E000
	0x01CC08A8 LDR X0, [X0 + 0x170]
	0x01CC08AC BL 0x1B6E7F0
	0x01CC08B0 ADRP X0, 0x228D000
	0x01CC08B4 LDR X0, [X0 + 0xF78]
	0x01CC08B8 BL 0x1B6E7F0
	0x01CC08BC ADRP X0, 0x228F000
	0x01CC08C0 LDR X0, [X0 + 0x2F8]
	0x01CC08C4 BL 0x1B6E7F0
	0x01CC08C8 ADRP X0, 0x228F000
	0x01CC08CC LDR X0, [X0 + 0x310]
	0x01CC08D0 BL 0x1B6E7F0
	0x01CC08D4 ADRP X0, 0x228E000
	0x01CC08D8 LDR X0, [X0 + 0x198]
	0x01CC08DC BL 0x1B6E7F0
	0x01CC08E0 ADRP X0, 0x228E000
	0x01CC08E4 LDR X0, [X0 + 0x450]
	0x01CC08E8 BL 0x1B6E7F0
	0x01CC08EC MOVZ W8, 0x1
	0x01CC08F0 STRB W8, [X21 + 0x541]
	0x01CC08F4 LDR X0, [X20]
	0x01CC08F8 ADRP X23, 0x228D000
	0x01CC08FC ADRP X22, 0x228F000
	0x01CC0900 ADRP X21, 0x228F000
	0x01CC0904 LDR W8, [X0 + 0xE0]
	0x01CC0908 LDR X23, [X23 + 0xF78]
	0x01CC090C LDR X22, [X22 + 0x2E0]
	0x01CC0910 LDR X21, [X21 + 0x310]
	0x01CC0914 CBNZ W8, 0x1CC0920
	0x01CC0918 BL 0x1B6E8F8
	0x01CC091C LDR X0, [X20]
	0x01CC0920 LDR X8, [X0 + 0xB8]
	0x01CC0924 STR X31, [X8]

ISIL:
	001 Subtract X31, X31, 256
	002 Move [X31+128], D14
	003 Move [X31+144], D13
	004 Move [X31+152], D12
	005 Move [X31+160], D11
	006 Move [X31+168], D10
	007 Move [X31+176], D9
	008 Move [X31+184], D8
	009 Move [X31+192], X30
	010 Move [X31+200], X25
	011 Move [X31+208], X24
	012 Move [X31+216], X23
	013 Move [X31+224], X22
	014 Move [X31+232], X21
	015 Move [X31+240], X20
	016 Move [X31+248], X19
	017 NotImplemented "Instruction MOVI not yet implemented."
	018 Move [X31+96], V0
	019 Move [X31+104], V0
	020 Move [X31+64], V0
	021 Move [X31+72], V0
	022 Move X19, X0
	023 Move X0, [X0+48]
	024 Compare X0, 0
	025 JumpIfEqual {119}
	026 Add X8, X31, 0
	027 Move X1, X31
	028 Call Renderer.get_worldToLocalMatrix, X0
	029 Move V0, [X31]
	030 Move V1, [X31+16]
	031 Move V2, [X31+32]
	032 Move V3, [X31+48]
	033 Move [X31+64], V0
	034 Move [X31+72], V1
	035 Move [X31+96], V2
	036 Move [X31+104], V3
	037 Move X0, [X19+40]
	038 Compare X0, 0
	039 JumpIfEqual {119}
	040 Move X1, X31
	041 Call Transform.get_position, X0
	042 Add X0, X31, 64
	043 Move X1, X31
	044 Call Matrix4x4.MultiplyPoint, X0, X1
	045 Move X0, [X19+48]
	046 Compare X0, 0
	047 JumpIfEqual {119}
	048 Move X20, 0x228E000
	049 Move X20, [X20+1160]
	050 Move TEMP, 0x80800000
	051 Not TEMP
	052 Move W8, TEMP
	053 Move V8, V0
	054 Move V9, V1
	055 Move V10, V2
	056 Move X22, X31
	057 Move X23, X31
	058 Move TEMP, 0
	059 Not TEMP
	060 Move W21, TEMP
	061 Move X24, 0x2564000
	062 Move S11, W8
	063 Move W25, 1
	064 Move X1, X31
	065 Call SkinnedMeshRenderer.get_sharedMesh, X0
	066 Compare X0, 0
	067 JumpIfEqual {119}
	068 Move X1, X31
	069 Call Mesh.get_vertices, X0
	070 Compare X0, 0
	071 JumpIfEqual {119}
	072 NotImplemented "Instruction LDRSW not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X0, [X19+48]
	075 Compare X0, 0
	076 JumpIfEqual {119}
	077 Move X1, X31
	078 Call SkinnedMeshRenderer.get_sharedMesh, X0
	079 Compare X0, 0
	080 JumpIfEqual {119}
	081 Move X1, X31
	082 Call Mesh.get_vertices, X0
	083 Compare X0, 0
	084 JumpIfEqual {119}
	085 Move W8, [X0+24]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Add X8, X0, X22
	088 Move W9, [X24+1286]
	089 Move S14, [X8+32]
	090 Move S13, [X8+36]
	091 Move V12, [X8+40]
	092 Compare W9, 0
	093 JumpIfNotEqual {97}
	094 Move X0, X20
	095 Call 0x1B6F7F0
	096 Move [X24+1286], W25
	097 Move X0, [X20]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1B6F8F8
	102 Subtract S0, S14, S8
	103 Subtract S1, S13, S9
	104 Subtract S2, S12, S10
	105 Multiply S0, S0, S0
	106 Multiply S1, S1, S1
	107 Multiply S2, S2, S2
	108 Add S0, S0, S1
	109 Move X0, [X19+48]
	110 Add S0, S2, S0
	111 NotImplemented "Instruction FSQRT not yet implemented."
	112 NotImplemented "Instruction FCMP not yet implemented."
	113 NotImplemented "Instruction FCSEL not yet implemented."
	114 NotImplemented "Instruction CSEL not yet implemented."
	115 Add X23, X23, 1
	116 Add X22, X22, 12
	117 Compare X0, 0
	118 JumpIfNotEqual {64}
	119 Call 0x1B6FA1C
	120 Move [X19+88], W21
	121 Move TEMP, X21
	122 And TEMP, TEMP, -2147483648
	123 Compare TEMP, -2147483648
	124 JumpIfEqual {165}
	125 Move X0, [X19+48]
	126 Compare X0, 0
	127 JumpIfEqual {119}
	128 Move X1, X31
	129 Call SkinnedMeshRenderer.get_sharedMesh, X0
	130 Compare X0, 0
	131 JumpIfEqual {119}
	132 Move X1, X31
	133 Call Mesh.get_vertices, X0
	134 Compare X0, 0
	135 JumpIfEqual {119}
	136 NotImplemented "Instruction LDRSW not yet implemented."
	137 Move W8, [X0+24]
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move W10, 12
	140 NotImplemented "Instruction MADD not yet implemented."
	141 Move X8, [X19+48]
	142 Move V0, [X9+32]
	143 Move V1, [X9+40]
	144 Move [X19+92], D0
	145 Move [X19+100], S1
	146 Compare X8, 0
	147 JumpIfEqual {119}
	148 Move X0, X8
	149 Move X1, X31
	150 Call SkinnedMeshRenderer.get_sharedMesh, X0
	151 Compare X0, 0
	152 JumpIfEqual {119}
	153 Move X1, X31
	154 Call Mesh.get_boneWeights, X0
	155 Compare X0, 0
	156 JumpIfEqual {119}
	157 Move W8, [X0+24]
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Move W8, W21
	160 Add X8, X0, X8
	161 Move V1, [X8+32]
	162 Move V0, [X8+48]
	163 Move [X19+72], V0
	164 Move [X19+56], V1
	165 Move X20, [X31+240]
	166 Move X19, [X31+248]
	167 Move X22, [X31+224]
	168 Move X21, [X31+232]
	169 Move X24, [X31+208]
	170 Move X23, [X31+216]
	171 Move X30, [X31+192]
	172 Move X25, [X31+200]
	173 Move D9, [X31+176]
	174 Move D8, [X31+184]
	175 Move D11, [X31+160]
	176 Move D10, [X31+168]
	177 Move D13, [X31+144]
	178 Move D12, [X31+152]
	179 Move V14, [X31+128]
	180 Add X31, X31, 256
	181 Return 
	182 Call 0x1B6FA24

Method: System.Void SetName(System.String name)

Disassembly:
	0x01CC0928 LDR X8, [X23]
	0x01CC092C LDR X0, [X22]
	0x01CC0930 LDR X8, [X8 + 0xB8]
	0x01CC0934 LDR X20, [X8 + 0x20]
	0x01CC0938 BL 0x1B6EA0C
	0x01CC093C LDR X2, [X21]
	0x01CC0940 MOV X1, X19
	0x01CC0944 MOV X3, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move W2, 1
	006 Move X3, X31
	007 Move X30, [X31+16]
	008 Call TMP_Text.SetText, X0, X1, X2
	009 Return 
	010 Call 0x1B6FA1C

Method: System.Void CalcPositionWithBone(System.Int32 boneIndex, ref UnityEngine.Vector3 pos)

Disassembly:
	0x01CC0948 MOV X21, X0
	0x01CC094C BL 0x27EC108
	0x01CC0950 MOV X0, X20
	0x01CC0954 MOV X1, X21
	0x01CC0958 MOV X2, X31
	0x01CC095C BL 0x322A948
	0x01CC0960 CBZ X0, 0x1CC09A4
	0x01CC0964 LDR X21, [X22]
	0x01CC0968 MOV X20, X0
	0x01CC096C MOV X1, X21
	0x01CC0970 BL 0x1B6E8FC
	0x01CC0974 CBZ X0, 0x1CC0998
	0x01CC0978 LDR X8, [X23]
	0x01CC097C LDR X8, [X8 + 0xB8]
	0x01CC0980 STR X0, [X8 + 0x20]
	0x01CC0984 LDR X21, [X22]
	0x01CC0988 MOV X0, X20
	0x01CC098C MOV X1, X21
	0x01CC0990 BL 0x1B6E8FC
	0x01CC0994 CBNZ X0, 0x1CC09B0
	0x01CC0998 MOV X0, X20
	0x01CC099C MOV X1, X21
	0x01CC09A0 B 0x1CC0A2C
	0x01CC09A4 LDR X8, [X23]
	0x01CC09A8 LDR X8, [X8 + 0xB8]
	0x01CC09AC STR X31, [X8 + 0x20]
	0x01CC09B0 ADRP X22, 0x228E000
	0x01CC09B4 LDR X22, [X22 + 0x450]
	0x01CC09B8 ADRP X23, 0x228E000
	0x01CC09BC ADRP X21, 0x228F000
	0x01CC09C0 LDR X8, [X22]
	0x01CC09C4 LDR X8, [X8 + 0xB8]
	0x01CC09C8 LDR X23, [X23 + 0x170]
	0x01CC09CC LDR X20, [X8 + 0xA8]
	0x01CC09D0 LDR X0, [X23]
	0x01CC09D4 LDR X21, [X21 + 0x2F8]
	0x01CC09D8 BL 0x1B6EA0C
	0x01CC09DC LDR X2, [X21]
	0x01CC09E0 MOV X1, X19
	0x01CC09E4 MOV X3, X31
	0x01CC09E8 MOV X21, X0
	0x01CC09EC BL 0x317DB24
	0x01CC09F0 MOV X0, X20
	0x01CC09F4 MOV X1, X21
	0x01CC09F8 MOV X2, X31
	0x01CC09FC BL 0x322A948
	0x01CC0A00 CBZ X0, 0x1CC0A30
	0x01CC0A04 LDR X1, [X23]
	0x01CC0A08 LDR X8, [X0]
	0x01CC0A0C CMP X8, X1
	0x01CC0A10 B.NE 0x1CC0A2C
	0x01CC0A14 LDR X8, [X22]
	0x01CC0A18 LDR X8, [X8 + 0xB8]
	0x01CC0A1C STR X0, [X8 + 0xA8]
	0x01CC0A20 LDR X8, [X0]
	0x01CC0A24 CMP X8, X1
	0x01CC0A28 B.EQ 0x1CC0A3C
	0x01CC0A2C BL 0x1B6ECDC
	0x01CC0A30 LDR X8, [X22]
	0x01CC0A34 LDR X8, [X8 + 0xB8]
	0x01CC0A38 STR X0, [X8 + 0xA8]
	0x01CC0A3C LDP X20, X19, [X31 + 0x20]
	0x01CC0A40 LDP X22, X21, [X31 + 0x10]
	0x01CC0A44 LDP X30, X23, [X31], #0x30
	0x01CC0A48 RET
	0x01CC0A4C STP D11, D10, [X31 - 0x40]!
	0x01CC0A50 STP D9, D8, [X31 + 0x10]
	0x01CC0A54 STP X30, X21, [X31 + 0x20]
	0x01CC0A58 STP X20, X19, [X31 + 0x30]
	0x01CC0A5C ADRP X20, 0x2563000
	0x01CC0A60 LDRB W8, [X20 + 0x55B]
	0x01CC0A64 MOV V8.16B, V3.16B
	0x01CC0A68 MOV V9.16B, V2.16B
	0x01CC0A6C MOV V10.16B, V1.16B
	0x01CC0A70 MOV V11.16B, V0.16B
	0x01CC0A74 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 432
	002 Move [X31+384], X29
	003 Move [X31+392], X30
	004 Move [X31+400], X22
	005 Move [X31+408], X21
	006 Move [X31+416], X20
	007 Move [X31+424], X19
	008 NotImplemented "Instruction MOVI not yet implemented."
	009 Move [X31+352], V0
	010 Move [X31+360], V0
	011 Move [X31+320], V0
	012 Move [X31+328], V0
	013 Move X20, X0
	014 Move X0, [X0+48]
	015 Compare X0, 0
	016 JumpIfEqual {109}
	017 Move W21, W1
	018 Move X1, X31
	019 Move X19, X2
	020 Call SkinnedMeshRenderer.get_bones, X0
	021 Compare X0, 0
	022 JumpIfEqual {109}
	023 Move W8, [X0+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X22, W21
	026 Add X8, X0, X22
	027 Move X0, [X8+32]
	028 Compare X0, 0
	029 JumpIfEqual {109}
	030 Add X8, X31, 192
	031 Move X1, X31
	032 Call Transform.get_localToWorldMatrix, X0
	033 Move V0, [X31+192]
	034 Move V1, [X31+208]
	035 Move V2, [X31+224]
	036 Move V3, [X31+240]
	037 Move [X31+256], V0
	038 Move [X31+264], V1
	039 Move [X31+288], V2
	040 Move [X31+296], V3
	041 Move X0, [X20+48]
	042 Compare X0, 0
	043 JumpIfEqual {109}
	044 Move X1, X31
	045 Call SkinnedMeshRenderer.get_sharedMesh, X0
	046 Compare X0, 0
	047 JumpIfEqual {109}
	048 Move X1, X31
	049 Call Mesh.get_bindposes, X0
	050 Compare X0, 0
	051 JumpIfEqual {109}
	052 Move W8, [X0+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add X8, X0, X22
	055 Move V2, [X8+32]
	056 Move V3, [X8+48]
	057 Move V4, [X8+64]
	058 Move V5, [X8+80]
	059 Move V0, [X31+256]
	060 Move V1, [X31+272]
	061 Add X8, X31, 128
	062 Move [X31+192], V2
	063 Move [X31+200], V3
	064 Move [X31+224], V4
	065 Move [X31+232], V5
	066 Move [X31+64], V0
	067 Move [X31+72], V1
	068 Move V0, [X31+288]
	069 Move V1, [X31+304]
	070 Move V2, [X31+224]
	071 Move V3, [X31+240]
	072 Move V4, [X31+192]
	073 Move V5, [X31+208]
	074 Add X0, X31, 64
	075 Add X1, X31, 0
	076 Move X2, X31
	077 Move [X31+96], V0
	078 Move [X31+104], V1
	079 Move [X31+32], V2
	080 Move [X31+40], V3
	081 Move [X31], V4
	082 Move [X31+8], V5
	083 Call Matrix4x4.op_Multiply, X0, X1
	084 Move V0, [X31+128]
	085 Move V1, [X31+144]
	086 Move V2, [X31+160]
	087 Move V3, [X31+176]
	088 Add X0, X31, 320
	089 Move X1, X31
	090 Move [X31+320], V0
	091 Move [X31+328], V1
	092 Move [X31+352], V2
	093 Move [X31+360], V3
	094 Move S0, [X20+92]
	095 Move S1, [X20+96]
	096 Move V2, [X20+100]
	097 Call Matrix4x4.MultiplyPoint, X0, X1
	098 Move [X19], S0
	099 Move [X19+8], S1
	100 Move [X19+8], S2
	101 Move X20, [X31+416]
	102 Move X19, [X31+424]
	103 Move X22, [X31+400]
	104 Move X21, [X31+408]
	105 Move X29, [X31+384]
	106 Move X30, [X31+392]
	107 Add X31, X31, 432
	108 Return 
	109 Call 0x1B6FA1C
	110 Call 0x1B6FA24

Method: System.Void LateUpdate()

Disassembly:
	0x01CC0A78 TBNZ X8, 0x0, 0x1CC0A90
	0x01CC0A7C ADRP X0, 0x228E000
	0x01CC0A80 LDR X0, [X0 + 0x8A8]
	0x01CC0A84 BL 0x1B6E7F0
	0x01CC0A88 MOVZ W8, 0x1
	0x01CC0A8C STRB W8, [X20 + 0x55B]
	0x01CC0A90 LDR X0, [X19 + 0xF8]
	0x01CC0A94 CBZ X0, 0x1CC0B40
	0x01CC0A98 MOV X1, X31
	0x01CC0A9C BL 0x3A7BCC8
	0x01CC0AA0 CBZ X0, 0x1CC0B40
	0x01CC0AA4 ADRP X20, 0x228E000
	0x01CC0AA8 LDR X20, [X20 + 0x8A8]
	0x01CC0AAC MOV V0.16B, V11.16B
	0x01CC0AB0 MOV V1.16B, V10.16B
	0x01CC0AB4 MOV V2.16B, V9.16B
	0x01CC0AB8 LDR X1, [X20]
	0x01CC0ABC MOV V3.16B, V8.16B
	0x01CC0AC0 MOV X2, X31
	0x01CC0AC4 BL 0x3A7D238
	0x01CC0AC8 LDR X19, [X19 + 0x58]
	0x01CC0ACC CBZ X19, 0x1CC0B40
	0x01CC0AD0 LDR W8, [X19 + 0x18]
	0x01CC0AD4 CMP W8, 0x1
	0x01CC0AD8 B.LT 0x1CC0B2C
	0x01CC0ADC MOV W21, W31
	0x01CC0AE0 CMP W21, W8
	0x01CC0AE4 B.CS 0x1CC0B44
	0x01CC0AE8 ADD X8, X19, W21, 0x3, SXTW
	0x01CC0AEC LDR X0, [X8 + 0x20]
	0x01CC0AF0 CBZ X0, 0x1CC0B40
	0x01CC0AF4 MOV X1, X31
	0x01CC0AF8 BL 0x3A7BCC8
	0x01CC0AFC CBZ X0, 0x1CC0B40
	0x01CC0B00 LDR X1, [X20]
	0x01CC0B04 MOV V0.16B, V11.16B
	0x01CC0B08 MOV V1.16B, V10.16B
	0x01CC0B0C MOV V2.16B, V9.16B
	0x01CC0B10 MOV V3.16B, V8.16B
	0x01CC0B14 MOV X2, X31
	0x01CC0B18 BL 0x3A7D238
	0x01CC0B1C LDR W8, [X19 + 0x18]
	0x01CC0B20 ADD W21, W21, 0x1
	0x01CC0B24 CMP W21, W8
	0x01CC0B28 B.LT 0x1CC0AE0
	0x01CC0B2C LDP X20, X19, [X31 + 0x30]
	0x01CC0B30 LDP X30, X21, [X31 + 0x20]
	0x01CC0B34 LDP D9, D8, [X31 + 0x10]
	0x01CC0B38 LDP D11, D10, [X31], #0x40
	0x01CC0B3C RET
	0x01CC0B40 BL 0x1B6EA1C
	0x01CC0B44 BL 0x1B6EA24
	0x01CC0B48 STR D10, [X31 - 0x40]!
	0x01CC0B4C STP D9, D8, [X31 + 0x10]
	0x01CC0B50 STP X30, X21, [X31 + 0x20]
	0x01CC0B54 STP X20, X19, [X31 + 0x30]
	0x01CC0B58 ADRP X20, 0x2563000
	0x01CC0B5C ADRP X21, 0x228F000
	0x01CC0B60 LDRB W8, [X20 + 0x543]
	0x01CC0B64 LDR X21, [X21 + 0x318]
	0x01CC0B68 MOV V8.16B, V2.16B
	0x01CC0B6C MOV V9.16B, V1.16B
	0x01CC0B70 MOV V10.16B, V0.16B
	0x01CC0B74 MOV X19, X0
	0x01CC0B78 TBNZ X8, 0x0, 0x1CC0B90
	0x01CC0B7C ADRP X0, 0x228F000
	0x01CC0B80 LDR X0, [X0 + 0x318]
	0x01CC0B84 BL 0x1B6E7F0
	0x01CC0B88 MOVZ W8, 0x1
	0x01CC0B8C STRB W8, [X20 + 0x543]
	0x01CC0B90 LDR X8, [X21]
	0x01CC0B94 LDR X8, [X8 + 0xB8]
	0x01CC0B98 LDRB W9, [X8]
	0x01CC0B9C CBZ W9, 0x1CC0BC4
	0x01CC0BA0 LDR X19, [X8 + 0x8]
	0x01CC0BA4 CBZ X19, 0x1CC0C48
	0x01CC0BA8 MOV X0, X19
	0x01CC0BAC MOV X1, X31
	0x01CC0BB0 BL 0x3AA7658
	0x01CC0BB4 FADD S0, S10, S0
	0x01CC0BB8 FADD S1, S9, S1
	0x01CC0BBC FADD S2, S8, S2
	0x01CC0BC0 B 0x1CC0C2C
	0x01CC0BC4 LDR X0, [X19 + 0x20]
	0x01CC0BC8 CBZ X0, 0x1CC0C48
	0x01CC0BCC LDR X20, [X19 + 0x30]
	0x01CC0BD0 MOV X1, X31
	0x01CC0BD4 BL 0x3A9B084
	0x01CC0BD8 CBZ X0, 0x1CC0C48
	0x01CC0BDC MOV X1, X31
	0x01CC0BE0 BL 0x3AA7658
	0x01CC0BE4 CBZ X20, 0x1CC0C48
	0x01CC0BE8 FADD S2, S8, S2
	0x01CC0BEC FADD S1, S9, S1
	0x01CC0BF0 FADD S0, S10, S0
	0x01CC0BF4 MOV X0, X20
	0x01CC0BF8 MOV X1, X31
	0x01CC0BFC BL 0x3AF6DE4
	0x01CC0C00 LDR X0, [X19 + 0x20]
	0x01CC0C04 CBZ X0, 0x1CC0C48
	0x01CC0C08 MOV X1, X31
	0x01CC0C0C BL 0x3A9B084
	0x01CC0C10 LDR X8, [X19 + 0x30]
	0x01CC0C14 CBZ X8, 0x1CC0C48
	0x01CC0C18 MOV X19, X0
	0x01CC0C1C MOV X0, X8
	0x01CC0C20 MOV X1, X31
	0x01CC0C24 BL 0x3AF6B78
	0x01CC0C28 CBZ X19, 0x1CC0C48
	0x01CC0C2C MOV X0, X19
	0x01CC0C30 LDP X20, X19, [X31 + 0x30]
	0x01CC0C34 LDP X30, X21, [X31 + 0x20]
	0x01CC0C38 LDP D9, D8, [X31 + 0x10]
	0x01CC0C3C MOV X1, X31
	0x01CC0C40 LDR V10, [X31], #0x40
	0x01CC0C44 B 0x3AA76F8
	0x01CC0C48 BL 0x1B6EA1C
	0x01CC0C4C STP X30, X19, [X31 - 0x10]!
	0x01CC0C50 MOV X19, X0
	0x01CC0C54 LDR X0, [X0 + 0x30]
	0x01CC0C58 CBZ X0, 0x1CC0CA0
	0x01CC0C5C MOV X1, X31
	0x01CC0C60 BL 0x3AF6DE4
	0x01CC0C64 LDR X0, [X19 + 0x20]
	0x01CC0C68 CBZ X0, 0x1CC0CA0
	0x01CC0C6C MOV X1, X31
	0x01CC0C70 BL 0x3A9B084
	0x01CC0C74 LDR X8, [X19 + 0x30]
	0x01CC0C78 CBZ X8, 0x1CC0CA0

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X30
	011 Move [X31+120], X21
	012 Move [X31+128], X20
	013 Move [X31+136], X19
	014 Add X19, X0, 56
	015 Move X20, X0
	016 Move X0, X19
	017 Move X1, X31
	018 Call BoneWeight.get_boneIndex0, X0
	019 Move X8, [X20+104]
	020 Compare X8, 0
	021 JumpIfEqual {147}
	022 Move W9, [X8+24]
	023 Compare W9, 0
	024 JumpIfEqual {148}
	025 Move W1, W0
	026 Add X2, X8, 32
	027 Move X0, X20
	028 Call Nametag.CalcPositionWithBone, X0, X1, X2
	029 Move X0, X19
	030 Move X1, X31
	031 Call BoneWeight.get_boneIndex1, X0
	032 Move X8, [X20+104]
	033 Compare X8, 0
	034 JumpIfEqual {147}
	035 Move W9, [X8+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move W1, W0
	038 Add X2, X8, 44
	039 Move X0, X20
	040 Call Nametag.CalcPositionWithBone, X0, X1, X2
	041 Move X0, X19
	042 Move X1, X31
	043 Call BoneWeight.get_boneIndex2, X0
	044 Move X8, [X20+104]
	045 Compare X8, 0
	046 JumpIfEqual {147}
	047 Move W9, [X8+24]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W1, W0
	050 Add X2, X8, 56
	051 Move X0, X20
	052 Call Nametag.CalcPositionWithBone, X0, X1, X2
	053 Move X0, X19
	054 Move X1, X31
	055 Call BoneWeight.get_boneIndex3, X0
	056 Move X8, [X20+104]
	057 Compare X8, 0
	058 JumpIfEqual {147}
	059 Move W9, [X8+24]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move W1, W0
	062 Add X2, X8, 68
	063 Move X0, X20
	064 Call Nametag.CalcPositionWithBone, X0, X1, X2
	065 Move X8, [X20+104]
	066 Compare X8, 0
	067 JumpIfEqual {147}
	068 Move W9, [X8+24]
	069 Compare W9, 0
	070 JumpIfEqual {148}
	071 Move X21, [X20+40]
	072 Move V8, [X8+32]
	073 Move V9, [X8+40]
	074 Move X0, X19
	075 Move X1, X31
	076 Call BoneWeight.get_weight0, X0
	077 Move X8, [X20+104]
	078 Compare X8, 0
	079 JumpIfEqual {147}
	080 Move W9, [X8+24]
	081 Move [X31+2], V0
	082 NotImplemented "Instruction CMP not yet implemented."
	083 NotImplemented "Instruction LDUR not yet implemented."
	084 Move V11, [X8+52]
	085 Move X0, X19
	086 Move X1, X31
	087 Call BoneWeight.get_weight1, X0
	088 Move X8, [X20+104]
	089 Compare X8, 0
	090 JumpIfEqual {147}
	091 Move W9, [X8+24]
	092 Move [X31+1], V0
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move V12, [X8+56]
	095 Move V13, [X8+64]
	096 Move X0, X19
	097 Move X1, X31
	098 Call BoneWeight.get_weight2, X0
	099 Move X8, [X20+104]
	100 Compare X8, 0
	101 JumpIfEqual {147}
	102 Move W9, [X8+24]
	103 Move [X31], V0
	104 NotImplemented "Instruction CMP not yet implemented."
	105 NotImplemented "Instruction LDUR not yet implemented."
	106 Move V15, [X8+76]
	107 Move X0, X19
	108 Move X1, X31
	109 Call BoneWeight.get_weight3, X0
	110 Compare X21, 0
	111 JumpIfEqual {147}
	112 Move V6, [X31+16]
	113 Move V5, [X31+32]
	114 Move V7, [X31]
	115 Multiply S4, S15, S0
	116 NotImplemented "Instruction INVALID not yet implemented."
	117 Multiply S1, S9, S5
	118 Multiply S2, S11, S6
	119 NotImplemented "Instruction INVALID not yet implemented."
	120 NotImplemented "Instruction INVALID not yet implemented."
	121 Multiply S3, S13, S7
	122 NotImplemented "Instruction INVALID not yet implemented."
	123 Add S1, S1, S2
	124 Add V2, V5, V6
	125 Move X0, X21
	126 Move X20, [X31+128]
	127 Move X19, [X31+136]
	128 Move X30, [X31+112]
	129 Move X21, [X31+120]
	130 Move D9, [X31+96]
	131 Move D8, [X31+104]
	132 Move D11, [X31+80]
	133 Move D10, [X31+88]
	134 Move D13, [X31+64]
	135 Move D12, [X31+72]
	136 Move D15, [X31+48]
	137 Move D14, [X31+56]
	138 Add S1, S1, S3
	139 Add V3, V2, V7
	140 Add V0, V3, V0
	141 Add S2, S1, S4
	142 Move S1, V0.S[1]
	143 Move X1, X31
	144 Add X31, X31, 144
	145 Call Transform.set_position, X0, X1
	146 Return 
	147 Call 0x1B6FA1C
	148 Call 0x1B6FA24

Method: System.Void .ctor()

Disassembly:
	0x01CC0C7C MOV X19, X0
	0x01CC0C80 MOV X0, X8
	0x01CC0C84 MOV X1, X31
	0x01CC0C88 BL 0x3AF6B78
	0x01CC0C8C CBZ X19, 0x1CC0CA0
	0x01CC0C90 MOV X0, X19
	0x01CC0C94 MOV X1, X31
	0x01CC0C98 LDP X30, X19, [X31], #0x10
	0x01CC0C9C B 0x3AA76F8
	0x01CC0CA0 BL 0x1B6EA1C
	0x01CC0CA4 LDRB W8, [X0 + 0x114]
	0x01CC0CA8 EOR W8, W8, 0x1
	0x01CC0CAC STRB W8, [X0 + 0x114]
	0x01CC0CB0 RET
	0x01CC0CB4 STR X30, [X31 - 0x30]!
	0x01CC0CB8 STP X22, X21, [X31 + 0x10]
	0x01CC0CBC STP X20, X19, [X31 + 0x20]
	0x01CC0CC0 ADRP X20, 0x2563000
	0x01CC0CC4 ADRP X21, 0x228F000
	0x01CC0CC8 LDRB W8, [X20 + 0x544]
	0x01CC0CCC LDR X21, [X21 + 0x320]
	0x01CC0CD0 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2564000
	006 Move X21, 0x2290000
	007 Move W8, [X20+1338]
	008 Move X21, [X21+720]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2290000
	015 Move X0, [X0+720]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1338], W8
	019 Move X0, [X21]
	020 Move W1, 4
	021 Call 0x1B6F868
	022 Move [X19+104], X0
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X1, X31
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call MonoBehaviour..ctor, X0
	030 Return 

