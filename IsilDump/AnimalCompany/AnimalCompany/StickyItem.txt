Type: AnimalCompany.StickyItem

Method: System.Boolean get_isStuck()

Disassembly:
	0x01DA1F8C LDP X20, X19, [X31 + 0x20]
	0x01DA1F90 LDP X22, X21, [X31 + 0x10]
	0x01DA1F94 LDP X30, X23, [X31], #0x30
	0x01DA1F98 RET
	0x01DA1F9C BL 0x1C16F20
	0x01DA1FA0 STP X30, X19, [X31 - 0x10]!
	0x01DA1FA4 MOV X19, X0
	0x01DA1FA8 MOV X0, X31
	0x01DA1FAC BL 0x3C3C88C
	0x01DA1FB0 MOVZ W8, 0x1
	0x01DA1FB4 STR W0, [X19 + 0xCC]
	0x01DA1FB8 STRB W8, [X19 + 0xD4]
	0x01DA1FBC LDP X30, X19, [X31], #0x10
	0x01DA1FC0 RET
	0x01DA1FC4 STP D11, D10, [X31 - 0x40]!
	0x01DA1FC8 STP D9, D8, [X31 + 0x10]
	0x01DA1FCC STP X30, X21, [X31 + 0x20]
	0x01DA1FD0 STP X20, X19, [X31 + 0x30]
	0x01DA1FD4 MOV X20, X1
	0x01DA1FD8 MOV X19, X0
	0x01DA1FDC BL 0x1DA2124
	0x01DA1FE0 CBZ X20, 0x1DA2120
	0x01DA1FE4 MOV X0, X20
	0x01DA1FE8 MOV X1, X31
	0x01DA1FEC BL 0x3C89FC0
	0x01DA1FF0 ADRP X21, 0x2637000
	0x01DA1FF4 LDRB W8, [X21 + 0x785]
	0x01DA1FF8 MOV V8.16B, V0.16B
	0x01DA1FFC MOV V9.16B, V1.16B
	0x01DA2000 MOV V10.16B, V2.16B
	0x01DA2004 CBNZ W8, 0x1DA201C
	0x01DA2008 ADRP X0, 0x2351000
	0x01DA200C LDR X0, [X0 + 0x5A8]
	0x01DA2010 BL 0x1C16CF4
	0x01DA2014 MOVZ W8, 0x1
	0x01DA2018 STRB W8, [X21 + 0x785]
	0x01DA201C ADRP X8, 0x2351000
	0x01DA2020 LDR X8, [X8 + 0x5A8]
	0x01DA2024 LDR X0, [X8]
	0x01DA2028 LDR W8, [X0 + 0xE0]
	0x01DA202C CBNZ W8, 0x1DA2034
	0x01DA2030 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2638000
	005 Move W8, [X20+2705]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2356000
	012 Move X0, [X0+920]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2705], W8
	016 Move X0, [X19+128]
	017 Compare X0, 0
	018 JumpIfEqual {55}
	019 Move X20, 0x2356000
	020 Move X20, [X20+920]
	021 Move X1, X31
	022 Call GrabbableItem.get_stuckAnchorId, X0
	023 Move X8, [X20]
	024 Move X20, X0
	025 Move W9, [X8+224]
	026 Compare W9, 0
	027 JumpIfEqual {46}
	028 Compare W20, 0
	029 JumpIfEqual {50}
	030 Move X0, [X19+128]
	031 Compare X0, 0
	032 JumpIfEqual {55}
	033 Move X19, [X19+56]
	034 Move X1, X31
	035 Call GrabbableItem.get_stuckAnchorId, X0
	036 Compare X19, 0
	037 JumpIfEqual {55}
	038 And X1, X0, 0
	039 Move X0, X19
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X2, X31
	043 Move X30, [X31+32]
	044 Call NetworkRunner.Exists, X0, X1
	045 Return X0
	046 Move X0, X8
	047 Call 0x1C17DFC
	048 Compare W20, 0
	049 JumpIfNotEqual {30}
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move W0, W31
	053 Move X30, [X31+32]
	054 Return X0
	055 Call 0x1C17F20

Method: System.Void Awake()

Disassembly:
	0x01DA63D0 ADRP X0, 0x234D000
	0x01DA63D4 LDR X0, [X0 + 0x720]
	0x01DA63D8 BL 0x1C16CF4
	0x01DA63DC ADRP X0, 0x234D000
	0x01DA63E0 LDR X0, [X0 + 0x788]
	0x01DA63E4 BL 0x1C16CF4
	0x01DA63E8 ADRP X0, 0x2350000
	0x01DA63EC LDR X0, [X0 + 0xA78]
	0x01DA63F0 BL 0x1C16CF4
	0x01DA63F4 ADRP X0, 0x234D000
	0x01DA63F8 LDR X0, [X0 + 0xA90]
	0x01DA63FC BL 0x1C16CF4
	0x01DA6400 ADRP X0, 0x234F000
	0x01DA6404 LDR X0, [X0 + 0x310]
	0x01DA6408 BL 0x1C16CF4
	0x01DA640C ADRP X0, 0x234D000
	0x01DA6410 LDR X0, [X0 + 0x5A0]
	0x01DA6414 BL 0x1C16CF4
	0x01DA6418 ADRP X0, 0x2351000
	0x01DA641C LDR X0, [X0 + 0x460]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2633000
	006 Move X21, 0x2351000
	007 Move W8, [X20+2706]
	008 Move X21, [X21+3000]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2351000
	015 Move X0, [X0+3000]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2706], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Call 0x21A4894, X0
	022 Move [X19+128], X0
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Return 

Method: System.Void Stick(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parent, System.Boolean release = False)

Disassembly:
	0x01DA25B0 LDR X22, [X22 + 0x7C8]
	0x01DA25B4 LDR X0, [X22]
	0x01DA25B8 LDR W8, [X0 + 0xE0]
	0x01DA25BC CBNZ W8, 0x1DA25C4
	0x01DA25C0 BL 0x1C16DFC
	0x01DA25C4 ADRP X23, 0x2636000
	0x01DA25C8 LDRB W8, [X23 + 0x85D]
	0x01DA25CC CBNZ W8, 0x1DA25E4
	0x01DA25D0 ADRP X0, 0x2353000
	0x01DA25D4 LDR X0, [X0 + 0x7C8]
	0x01DA25D8 BL 0x1C16CF4
	0x01DA25DC MOVZ W8, 0x1
	0x01DA25E0 STRB W8, [X23 + 0x85D]
	0x01DA25E4 LDR X0, [X22]
	0x01DA25E8 LDR W8, [X0 + 0xE0]
	0x01DA25EC CBNZ W8, 0x1DA25F8
	0x01DA25F0 BL 0x1C16DFC
	0x01DA25F4 LDR X0, [X22]
	0x01DA25F8 ADRP X24, 0x2351000
	0x01DA25FC LDR X24, [X24 + 0x598]
	0x01DA2600 LDR X9, [X0 + 0xB8]
	0x01DA2604 LDR X8, [X24]
	0x01DA2608 LDR X21, [X9]
	0x01DA260C LDR W10, [X8 + 0xE0]
	0x01DA2610 CBNZ W10, 0x1DA261C
	0x01DA2614 MOV X0, X8
	0x01DA2618 BL 0x1C16DFC
	0x01DA261C MOV X0, X21
	0x01DA2620 MOV X1, X31
	0x01DA2624 MOV X2, X31
	0x01DA2628 BL 0x3C354F8
	0x01DA262C TBZ X0, 0x0, 0x1DA2798
	0x01DA2630 LDR X0, [X22]
	0x01DA2634 LDR W8, [X0 + 0xE0]
	0x01DA2638 CBNZ W8, 0x1DA2640
	0x01DA263C BL 0x1C16DFC
	0x01DA2640 LDRB W8, [X23 + 0x85D]
	0x01DA2644 CBNZ W8, 0x1DA265C
	0x01DA2648 ADRP X0, 0x2353000
	0x01DA264C LDR X0, [X0 + 0x7C8]
	0x01DA2650 BL 0x1C16CF4
	0x01DA2654 MOVZ W8, 0x1
	0x01DA2658 STRB W8, [X23 + 0x85D]
	0x01DA265C LDR X0, [X22]
	0x01DA2660 LDR W8, [X0 + 0xE0]
	0x01DA2664 CBNZ W8, 0x1DA2670
	0x01DA2668 BL 0x1C16DFC
	0x01DA266C LDR X0, [X22]
	0x01DA2670 LDR X8, [X0 + 0xB8]
	0x01DA2674 LDR X8, [X8]
	0x01DA2678 CBZ X8, 0x1DA28A8
	0x01DA267C LDR X0, [X24]
	0x01DA2680 LDR X21, [X8 + 0x30]
	0x01DA2684 LDR W9, [X0 + 0xE0]
	0x01DA2688 CBNZ W9, 0x1DA2690
	0x01DA268C BL 0x1C16DFC
	0x01DA2690 MOV X0, X21
	0x01DA2694 MOV X1, X31
	0x01DA2698 MOV X2, X31
	0x01DA269C BL 0x3C354F8
	0x01DA26A0 TBZ X0, 0x0, 0x1DA2798
	0x01DA26A4 LDR X0, [X22]
	0x01DA26A8 LDR W8, [X0 + 0xE0]
	0x01DA26AC CBNZ W8, 0x1DA26B4
	0x01DA26B0 BL 0x1C16DFC
	0x01DA26B4 LDRB W8, [X23 + 0x85D]
	0x01DA26B8 CBNZ W8, 0x1DA26D0
	0x01DA26BC ADRP X0, 0x2353000
	0x01DA26C0 LDR X0, [X0 + 0x7C8]
	0x01DA26C4 BL 0x1C16CF4
	0x01DA26C8 MOVZ W8, 0x1
	0x01DA26CC STRB W8, [X23 + 0x85D]
	0x01DA26D0 LDR X0, [X22]
	0x01DA26D4 LDR W8, [X0 + 0xE0]
	0x01DA26D8 CBNZ W8, 0x1DA26E4
	0x01DA26DC BL 0x1C16DFC
	0x01DA26E0 LDR X0, [X22]
	0x01DA26E4 LDR X8, [X0 + 0xB8]
	0x01DA26E8 LDR X8, [X8]
	0x01DA26EC CBZ X8, 0x1DA28A8
	0x01DA26F0 LDR X0, [X8 + 0x30]
	0x01DA26F4 CBZ X0, 0x1DA28A8
	0x01DA26F8 MOV X1, X31
	0x01DA26FC BL 0x3C8E868
	0x01DA2700 FMUL S0, S0, S0
	0x01DA2704 FMUL S1, S1, S1
	0x01DA2708 FMUL S3, S8, S8
	0x01DA270C FMUL S4, S9, S9
	0x01DA2710 FMUL S2, S2, S2
	0x01DA2714 FMUL S5, S10, S10
	0x01DA2718 FADD S0, S0, S1
	0x01DA271C FADD S1, S3, S4
	0x01DA2720 FADD S0, S2, S0
	0x01DA2724 FADD S1, S1, S5
	0x01DA2728 FCMP S0, S1

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+80], D14
	003 Move [X31+96], D13
	004 Move [X31+104], D12
	005 Move [X31+112], D11
	006 Move [X31+120], D10
	007 Move [X31+128], D9
	008 Move [X31+136], D8
	009 Move [X31+144], X30
	010 Move [X31+152], X25
	011 Move [X31+160], X24
	012 Move [X31+168], X23
	013 Move [X31+176], X22
	014 Move [X31+184], X21
	015 Move [X31+192], X20
	016 Move [X31+200], X19
	017 Move X22, 0x2637000
	018 Move X25, 0x2355000
	019 Move X24, 0x2355000
	020 Move W8, [X22+2707]
	021 Move X25, [X25+2904]
	022 Move X24, [X24+2912]
	023 Move W19, W2
	024 Move X20, X1
	025 Move V8, V6
	026 Move V9, V5
	027 Move V10, V4
	028 Move V11, V3
	029 Move V12, V2
	030 Move V13, V1
	031 Move V14, V0
	032 Move X21, X0
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {45}
	037 Move X0, 0x2355000
	038 Move X0, [X0+2904]
	039 Call 0x1C17CF4
	040 Move X0, 0x2355000
	041 Move X0, [X0+2912]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X22+2707], W8
	045 Move X1, [X25]
	046 Move X22, [X21+56]
	047 Move X23, [X21+136]
	048 Add X0, X31, 64
	049 Move V0, V14
	050 Move V1, V13
	051 Move V2, V12
	052 Move [X31+64], X31
	053 Move [X31+72], X31
	054 Call Nullable`1<Vector3>..ctor, X0, X1
	055 Move X1, [X24]
	056 Add X0, X31, 40
	057 Move V0, V11
	058 Move V1, V10
	059 Move V2, V9
	060 Move V3, V8
	061 Move [X31+40], X31
	062 Move [X31+48], X31
	063 Move [X31+56], W31
	064 Call Nullable`1<Quaternion>..ctor, X0, X1
	065 Compare X22, 0
	066 JumpIfEqual {121}
	067 NotImplemented "Instruction LDUR not yet implemented."
	068 Move W8, [X31+56]
	069 Move X2, [X31+64]
	070 Move X3, [X31+72]
	071 Add X4, X31, 16
	072 Move X0, X22
	073 Move X1, X23
	074 Move X5, X31
	075 Move X6, X31
	076 Move W7, W31
	077 Move [X31+1], V0
	078 Move [X31+32], W8
	079 Move [X31], X31
	080 Call NetworkRunner.Spawn, X0, X1, X2, X3, X4, X5, X6
	081 Compare X0, 0
	082 JumpIfEqual {121}
	083 Move X1, X31
	084 Move X22, X0
	085 Call Component.get_transform, X0
	086 Compare X0, 0
	087 JumpIfEqual {121}
	088 Move X1, X20
	089 Move X2, X31
	090 Call Transform.set_parent, X0, X1
	091 Move X8, [X22+32]
	092 Move X0, [X21+128]
	093 Compare X8, 0
	094 JumpIfEqual {118}
	095 Move W1, [X8]
	096 Compare X0, 0
	097 JumpIfEqual {121}
	098 And W2, W19, 1
	099 Move X3, X31
	100 Call GrabbableItem.SetStuckAnchorId, X0, X1, X2
	101 Move X20, [X31+192]
	102 Move X19, [X31+200]
	103 Move X22, [X31+176]
	104 Move X21, [X31+184]
	105 Move X24, [X31+160]
	106 Move X23, [X31+168]
	107 Move X30, [X31+144]
	108 Move X25, [X31+152]
	109 Move D9, [X31+128]
	110 Move D8, [X31+136]
	111 Move D11, [X31+112]
	112 Move D10, [X31+120]
	113 Move D13, [X31+96]
	114 Move D12, [X31+104]
	115 Move V14, [X31+80]
	116 Add X31, X31, 208
	117 Return 
	118 Move X1, X31
	119 Compare X0, 0
	120 JumpIfNotEqual {98}
	121 Call 0x1C17F20

Method: System.Void Unstick()

Disassembly:
	0x01DA2304 LDR X9, [X31 + 0x8]
	0x01DA2308 MOVZ W10, 0x1
	0x01DA230C STRB W10, [X19 + 0xD5]
	0x01DA2310 STR W8, [X19 + 0xE0]
	0x01DA2314 STR X9, [X19 + 0xD8]
	0x01DA2318 LDP X20, X19, [X31 + 0x40]
	0x01DA231C LDR X30, [X31 + 0x38]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+128]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call GrabbableItem.ResetStuckAnchor, X0
	008 Return 
	009 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DA6420 BL 0x1C16CF4
	0x01DA6424 ADRP X0, 0x2351000

ISIL:
	001 Move X1, X31
	002 Call NetworkBehaviour..ctor, X0
	003 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01DA6428 LDR X0, [X0 + 0x468]

ISIL:
	001 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01DA642C BL 0x1C16CF4

ISIL:
	001 Return 

