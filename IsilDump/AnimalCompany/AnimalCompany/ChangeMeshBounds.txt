Type: AnimalCompany.ChangeMeshBounds

Method: System.Void ChangeBounds()

Disassembly:
	0x01E05AE8 MOVZ W8, 0x1
	0x01E05AEC STRB W8, [X21 + 0xD9B]
	0x01E05AF0 CBZ X20, 0x1E05B48
	0x01E05AF4 ADRP X8, 0x22F0000
	0x01E05AF8 LDR X8, [X8 + 0x768]
	0x01E05AFC MOV X0, X20
	0x01E05B00 MOV X2, X31
	0x01E05B04 LDR X1, [X8]
	0x01E05B08 BL 0x3C33420
	0x01E05B0C TBZ X0, 0x0, 0x1E05B3C
	0x01E05B10 ADRP X8, 0x22F3000
	0x01E05B14 LDR X8, [X8 + 0x38]
	0x01E05B18 LDR X19, [X19 + 0x20]
	0x01E05B1C LDR X0, [X8]
	0x01E05B20 LDR W8, [X0 + 0xE0]
	0x01E05B24 CBNZ W8, 0x1E05B2C
	0x01E05B28 BL 0x1C16DFC
	0x01E05B2C MOV X0, X19
	0x01E05B30 LDP X20, X19, [X31 + 0x10]
	0x01E05B34 LDP X30, X21, [X31], #0x20
	0x01E05B38 B 0x1E05B4C
	0x01E05B3C LDP X20, X19, [X31 + 0x10]
	0x01E05B40 LDP X30, X21, [X31], #0x20
	0x01E05B44 RET
	0x01E05B48 BL 0x1C16F20
	0x01E05B4C STP X30, X21, [X31 - 0x20]!
	0x01E05B50 STP X20, X19, [X31 + 0x10]
	0x01E05B54 ADRP X20, 0x25D3000
	0x01E05B58 ADRP X21, 0x22F3000
	0x01E05B5C LDRB W8, [X20 + 0xD9E]
	0x01E05B60 LDR X21, [X21 + 0x38]
	0x01E05B64 MOV X19, X0
	0x01E05B68 TBNZ X8, 0x0, 0x1E05B8C
	0x01E05B6C ADRP X0, 0x22F3000
	0x01E05B70 LDR X0, [X0 + 0x38]
	0x01E05B74 BL 0x1C16CF4
	0x01E05B78 ADRP X0, 0x22EE000
	0x01E05B7C LDR X0, [X0 + 0x598]
	0x01E05B80 BL 0x1C16CF4
	0x01E05B84 MOVZ W8, 0x1
	0x01E05B88 STRB W8, [X20 + 0xD9E]
	0x01E05B8C LDR X0, [X21]
	0x01E05B90 ADRP X20, 0x22EE000
	0x01E05B94 LDR W8, [X0 + 0xE0]
	0x01E05B98 LDR X20, [X20 + 0x598]
	0x01E05B9C CBNZ W8, 0x1E05BA8
	0x01E05BA0 BL 0x1C16DFC
	0x01E05BA4 LDR X0, [X21]
	0x01E05BA8 LDR X8, [X20]
	0x01E05BAC LDR X9, [X0 + 0xB8]
	0x01E05BB0 LDR W10, [X8 + 0xE0]
	0x01E05BB4 LDR X20, [X9 + 0x8]
	0x01E05BB8 CBNZ W10, 0x1E05BC4
	0x01E05BBC MOV X0, X8
	0x01E05BC0 BL 0x1C16DFC
	0x01E05BC4 MOV X0, X20
	0x01E05BC8 MOV X1, X31
	0x01E05BCC MOV X2, X31
	0x01E05BD0 BL 0x3C3883C
	0x01E05BD4 TBNZ X0, 0x0, 0x1E05C00
	0x01E05BD8 LDR X0, [X21]
	0x01E05BDC LDR W8, [X0 + 0xE0]
	0x01E05BE0 CBNZ W8, 0x1E05BEC
	0x01E05BE4 BL 0x1C16DFC
	0x01E05BE8 LDR X0, [X21]
	0x01E05BEC LDR X8, [X0 + 0xB8]
	0x01E05BF0 LDR X9, [X8 + 0x8]
	0x01E05BF4 CBZ X9, 0x1E05C0C
	0x01E05BF8 STR X19, [X9 + 0x20]
	0x01E05BFC STR W31, [X8 + 0x10]
	0x01E05C00 LDP X20, X19, [X31 + 0x10]
	0x01E05C04 LDP X30, X21, [X31], #0x20
	0x01E05C08 RET
	0x01E05C0C BL 0x1C16F20
	0x01E05C10 MOV X1, X31
	0x01E05C14 B 0x3C36C30
	0x01E05C18 LDR X0, [X0 + 0x20]
	0x01E05C1C RET
	0x01E05C20 STR X1, [X0 + 0x20]
	0x01E05C24 RET
	0x01E05C28 STR X30, [X31 - 0x20]!
	0x01E05C2C STP X20, X19, [X31 + 0x10]
	0x01E05C30 ADRP X19, 0x25D3000
	0x01E05C34 ADRP X20, 0x22EE000
	0x01E05C38 LDRB W8, [X19 + 0xD9C]
	0x01E05C3C LDR X20, [X20 + 0x970]
	0x01E05C40 TBNZ X8, 0x0, 0x1E05C64
	0x01E05C44 ADRP X0, 0x22EE000
	0x01E05C48 LDR X0, [X0 + 0x970]
	0x01E05C4C BL 0x1C16CF4
	0x01E05C50 ADRP X0, 0x22F2000
	0x01E05C54 LDR X0, [X0 + 0xCA0]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], D9
	003 Move [X31+40], D8
	004 Move [X31+48], X30
	005 Move [X31+64], X22
	006 Move [X31+72], X21
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 Move X20, 0x25D4000
	010 Move W8, [X20+3471]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x22F0000
	017 Move X0, [X0+3640]
	018 Call 0x1C17CF4
	019 Move X0, 0x22EF000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3471], W8
	024 Move X0, [X19+32]
	025 Compare X0, 0
	026 JumpIfEqual {107}
	027 Move X20, 0x22EF000
	028 Move X21, 0x22F0000
	029 Move X20, [X20+1432]
	030 Move X21, [X21+3640]
	031 Move X1, X31
	032 Call MeshFilter.get_sharedMesh, X0
	033 Move X8, [X20]
	034 Move X20, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X1, [X21]
	041 Move X0, X20
	042 Call 0x222E35C, X0
	043 Move X21, 0x25D4000
	044 Move W8, [X21+1923]
	045 Move X20, X0
	046 Compare W8, 0
	047 JumpIfNotEqual {53}
	048 Move X0, 0x22EF000
	049 Move X0, [X0+1440]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X21+1923], W8
	053 Move X21, 0x22EF000
	054 Move X21, [X21+1440]
	055 Move X22, 0x25D4000
	056 Move W9, [X22+2139]
	057 Move X8, [X21]
	058 Move X8, [X8+184]
	059 Move V9, [X8]
	060 Move V8, [X8+8]
	061 Compare W9, 0
	062 JumpIfNotEqual {69}
	063 Move X0, X21
	064 Call 0x1C17CF4
	065 Move X8, [X21]
	066 Move W9, 1
	067 Move [X22+2139], W9
	068 Move X8, [X8+184]
	069 Compare X20, 0
	070 JumpIfEqual {107}
	071 Move X9, -20029440
	072 Move V0, [X8+20]
	073 NotImplemented "Instruction LDUR not yet implemented."
	074 Move V3, [X9+396]
	075 Move W8, 0x4000
	076 NotImplemented "Instruction MOVK not yet implemented."
	077 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	078 Move S1, 0.5
	079 NotImplemented "Instruction INVALID not yet implemented."
	080 NotImplemented "Instruction MOVI not yet implemented."
	081 Multiply S0, S0, S3
	082 NotImplemented "Instruction INVALID not yet implemented."
	083 Multiply S0, S0, S1
	084 Add X1, X31, 8
	085 Move X0, X20
	086 Move X2, X31
	087 Move [X31+8], D9
	088 Move [X31+16], S8
	089 Move [X31+20], D2
	090 Move [X31+28], S0
	091 Call Mesh.set_bounds, X0, X1
	092 Move X0, [X19+32]
	093 Compare X0, 0
	094 JumpIfEqual {107}
	095 Move X1, X20
	096 Move X2, X31
	097 Call MeshFilter.set_sharedMesh, X0, X1
	098 Move X20, [X31+80]
	099 Move X19, [X31+88]
	100 Move X22, [X31+64]
	101 Move X21, [X31+72]
	102 Move X30, [X31+48]
	103 Move D9, [X31+32]
	104 Move D8, [X31+40]
	105 Add X31, X31, 96
	106 Return 
	107 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01E05C58 BL 0x1C16CF4
	0x01E05C5C MOVZ W8, 0x1

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

