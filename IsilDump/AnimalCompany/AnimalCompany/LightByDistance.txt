Type: AnimalCompany.LightByDistance

Method: System.Void Update()

Disassembly:
	0x01CCDC54 STRB W8, [X20 + 0x508]
	0x01CCDC58 LDR X8, [X23]
	0x01CCDC5C LDR X8, [X8 + 0xB8]
	0x01CCDC60 LDR X9, [X8 + 0x40]
	0x01CCDC64 CBZ X9, 0x1CCDC6C
	0x01CCDC68 LDR X9, [X9 + 0x98]
	0x01CCDC6C STR X9, [X19 + 0x48]
	0x01CCDC70 LDR X0, [X22]
	0x01CCDC74 LDR X20, [X8 + 0x18]
	0x01CCDC78 BL 0x1B6EA0C
	0x01CCDC7C LDR X2, [X21]
	0x01CCDC80 MOV X1, X19
	0x01CCDC84 MOV X3, X31
	0x01CCDC88 MOV X21, X0
	0x01CCDC8C BL 0x27EC49C
	0x01CCDC90 MOV X0, X20
	0x01CCDC94 MOV X1, X21
	0x01CCDC98 MOV X2, X31
	0x01CCDC9C BL 0x322A750
	0x01CCDCA0 CBZ X0, 0x1CCDCE4
	0x01CCDCA4 LDR X20, [X22]
	0x01CCDCA8 MOV X19, X0
	0x01CCDCAC MOV X1, X20
	0x01CCDCB0 BL 0x1B6E8FC
	0x01CCDCB4 CBZ X0, 0x1CCDCD8
	0x01CCDCB8 LDR X8, [X23]
	0x01CCDCBC LDR X8, [X8 + 0xB8]
	0x01CCDCC0 STR X0, [X8 + 0x18]
	0x01CCDCC4 LDR X20, [X22]
	0x01CCDCC8 MOV X0, X19
	0x01CCDCCC MOV X1, X20
	0x01CCDCD0 BL 0x1B6E8FC
	0x01CCDCD4 CBNZ X0, 0x1CCDCF0
	0x01CCDCD8 MOV X0, X19
	0x01CCDCDC MOV X1, X20
	0x01CCDCE0 BL 0x1B6ECDC
	0x01CCDCE4 LDR X8, [X23]
	0x01CCDCE8 LDR X8, [X8 + 0xB8]
	0x01CCDCEC STR X31, [X8 + 0x18]
	0x01CCDCF0 LDP X20, X19, [X31 + 0x30]
	0x01CCDCF4 LDP X22, X21, [X31 + 0x20]
	0x01CCDCF8 LDP X24, X23, [X31 + 0x10]
	0x01CCDCFC LDP X30, X25, [X31], #0x40
	0x01CCDD00 RET
	0x01CCDD04 BL 0x1B6EA1C
	0x01CCDD08 ADRP X0, 0x2280000
	0x01CCDD0C LDR X0, [X0 + 0x478]
	0x01CCDD10 BL 0x1B6E804
	0x01CCDD14 BL 0x18F44F0
	0x01CCDD18 MOV X0, X19
	0x01CCDD1C MOV X1, X31
	0x01CCDD20 BL 0x3AA15F4
	0x01CCDD24 ADRP X0, 0x2280000
	0x01CCDD28 LDR X0, [X0 + 0x670]
	0x01CCDD2C BL 0x1B6E804
	0x01CCDD30 BL 0x1B6EA0C
	0x01CCDD34 MOV X19, X0
	0x01CCDD38 ADRP X0, 0x2282000
	0x01CCDD3C LDR X0, [X0 + 0x818]
	0x01CCDD40 BL 0x1B6E804
	0x01CCDD44 MOV X1, X0
	0x01CCDD48 MOV X0, X19
	0x01CCDD4C MOV X2, X31
	0x01CCDD50 BL 0x321C5DC
	0x01CCDD54 ADRP X0, 0x2282000
	0x01CCDD58 LDR X0, [X0 + 0x820]
	0x01CCDD5C BL 0x1B6E804
	0x01CCDD60 MOV X1, X0
	0x01CCDD64 MOV X0, X19
	0x01CCDD68 BL 0x1B6E8E8
	0x01CCDD6C STP X30, X21, [X31 - 0x20]!
	0x01CCDD70 STP X20, X19, [X31 + 0x10]
	0x01CCDD74 ADRP X19, 0x2556000
	0x01CCDD78 ADRP X20, 0x2280000
	0x01CCDD7C LDRB W8, [X19 + 0x5AB]
	0x01CCDD80 LDR X20, [X20 + 0x8E0]
	0x01CCDD84 TBNZ X8, 0x0, 0x1CCDDC0
	0x01CCDD88 ADRP X0, 0x2282000
	0x01CCDD8C LDR X0, [X0 + 0x828]
	0x01CCDD90 BL 0x1B6E7F0
	0x01CCDD94 ADRP X0, 0x2280000
	0x01CCDD98 LDR X0, [X0 + 0x8E0]
	0x01CCDD9C BL 0x1B6E7F0
	0x01CCDDA0 ADRP X0, 0x2282000
	0x01CCDDA4 LDR X0, [X0 + 0x358]
	0x01CCDDA8 BL 0x1B6E7F0
	0x01CCDDAC ADRP X0, 0x2282000
	0x01CCDDB0 LDR X0, [X0 + 0x830]
	0x01CCDDB4 BL 0x1B6E7F0
	0x01CCDDB8 MOVZ W8, 0x1
	0x01CCDDBC STRB W8, [X19 + 0x5AB]
	0x01CCDDC0 LDR X0, [X20]
	0x01CCDDC4 BL 0x1B6EA0C
	0x01CCDDC8 MOV X1, X31
	0x01CCDDCC MOV X19, X0
	0x01CCDDD0 BL 0x3A9DBB8
	0x01CCDDD4 CBZ X19, 0x1CCDE54
	0x01CCDDD8 ADRP X8, 0x2282000
	0x01CCDDDC LDR X8, [X8 + 0x830]
	0x01CCDDE0 ADRP X20, 0x2282000
	0x01CCDDE4 MOV X0, X19
	0x01CCDDE8 MOV X2, X31
	0x01CCDDEC LDR X1, [X8]
	0x01CCDDF0 LDR X20, [X20 + 0x358]
	0x01CCDDF4 BL 0x3AA0D38
	0x01CCDDF8 MOV X0, X19
	0x01CCDDFC MOV X1, X31
	0x01CCDE00 BL 0x3A9D8EC
	0x01CCDE04 LDR X8, [X20]
	0x01CCDE08 LDR X8, [X8 + 0xB8]
	0x01CCDE0C LDR X8, [X8]
	0x01CCDE10 CBZ X8, 0x1CCDE54
	0x01CCDE14 MOV X20, X0
	0x01CCDE18 MOV X0, X8

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x2557000
	012 Move X20, 0x2281000
	013 Move W8, [X21+1442]
	014 Move X20, [X20+1144]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x2281000
	021 Move X0, [X0+1144]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X21+1442], W8
	025 Move X0, X31
	026 Call Camera.get_main
	027 Move X8, [X20]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1B6F8F8
	034 Move X0, X20
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Equality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {53}
	042 Move X20, [X31+64]
	043 Move X19, [X31+72]
	044 Move X30, [X31+48]
	045 Move X21, [X31+56]
	046 Move D9, [X31+32]
	047 Move D8, [X31+40]
	048 Move D11, [X31+16]
	049 Move D10, [X31+24]
	050 Move D13, [X31+80]
	051 Move D12, [X31+88]
	052 Return 
	053 Move X0, X19
	054 Move X1, X31
	055 Call Component.get_transform, X0
	056 Compare X0, 0
	057 JumpIfEqual {144}
	058 Move X1, X31
	059 Call Transform.get_position, X0
	060 Move X0, X31
	061 Move V8, V0
	062 Move V9, V1
	063 Move V10, V2
	064 Call Camera.get_main
	065 Compare X0, 0
	066 JumpIfEqual {144}
	067 Move X1, X31
	068 Call Component.get_transform, X0
	069 Compare X0, 0
	070 JumpIfEqual {144}
	071 Move X1, X31
	072 Call Transform.get_position, X0
	073 Move X20, 0x2557000
	074 Move W8, [X20+1286]
	075 Move V11, V0
	076 Move V12, V1
	077 Move V13, V2
	078 Compare W8, 0
	079 JumpIfNotEqual {85}
	080 Move X0, 0x2281000
	081 Move X0, [X0+1160]
	082 Call 0x1B6F7F0
	083 Move W8, 1
	084 Move [X20+1286], W8
	085 Move X8, 0x2281000
	086 Move X8, [X8+1160]
	087 Move X0, [X8]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1B6F8F8
	092 Move S2, [X19+32]
	093 Move S1, [X19+36]
	094 Move S0, W31
	095 NotImplemented "Instruction FCMP not yet implemented."
	096 Subtract S3, S8, S11
	097 Subtract S4, S9, S12
	098 Subtract S5, S10, S13
	099 Multiply S3, S3, S3
	100 Multiply S4, S4, S4
	101 Multiply S5, S5, S5
	102 Add S3, S3, S4
	103 Add S3, S5, S3
	104 NotImplemented "Instruction FSQRT not yet implemented."
	105 Subtract S3, S3, S1
	106 Subtract S1, S2, S1
	107 NotImplemented "Instruction FDIV not yet implemented."
	108 NotImplemented "Instruction FCMP not yet implemented."
	109 Move S0, 1
	110 NotImplemented "Instruction FMIN not yet implemented."
	111 Move X0, [X19+48]
	112 Compare X0, 0
	113 JumpIfEqual {144}
	114 Move V1, [X19+40]
	115 Move S2, W31
	116 NotImplemented "Instruction FMAX not yet implemented."
	117 Move X1, X31
	118 Multiply S0, S0, S1
	119 Add S0, S0, S2
	120 Call Light.set_intensity, X0, V0
	121 Move X0, [X19+48]
	122 Compare X0, 0
	123 JumpIfEqual {144}
	124 Move X1, X31
	125 Call Light.get_intensity, X0
	126 Move X0, [X19+48]
	127 Compare X0, 0
	128 JumpIfEqual {144}
	129 Move X20, [X31+64]
	130 Move X19, [X31+72]
	131 Move X30, [X31+48]
	132 Move X21, [X31+56]
	133 Move D9, [X31+32]
	134 Move D8, [X31+40]
	135 Move D11, [X31+16]
	136 Move D10, [X31+24]
	137 NotImplemented "Instruction FCMP not yet implemented."
	138 NotImplemented "Instruction CSET not yet implemented."
	139 Move X2, X31
	140 Move D13, [X31+80]
	141 Move D12, [X31+88]
	142 Call Behaviour.set_enabled, X0, X1
	143 Return 
	144 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CCDE1C MOV X1, X31
	0x01CCDE20 BL 0x3A9B084
	0x01CCDE24 CBZ X20, 0x1CCDE54
	0x01CCDE28 ADRP X21, 0x2282000
	0x01CCDE2C LDR X21, [X21 + 0x828]
	0x01CCDE30 MOV X1, X0
	0x01CCDE34 MOV X0, X20

ISIL:
	001 Move X8, -19001344
	002 Move V0, [X8+3240]
	003 Move W8, 0x40A00000
	004 Move X1, X31
	005 Move [X0+40], W8
	006 Move [X0+32], D0
	007 Call MonoBehaviour..ctor, X0
	008 Return 

