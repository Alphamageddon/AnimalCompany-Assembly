Type: AnimalCompany.HandInputUtility

Method: System.Boolean HandleFingerTipInput(UnityEngine.Collider collider, out AnimalCompany.HandSide handSide)

Disassembly:
	0x01D7C2BC STR X31, [X0 + 0x20]
	0x01D7C2C0 STR W31, [X0 + 0x28]
	0x01D7C2C4 B 0x3C36C30
	0x01D7C2C8 STP X30, X19, [X31 - 0x10]!
	0x01D7C2CC MOV X19, X0
	0x01D7C2D0 LDR X0, [X0 + 0x20]
	0x01D7C2D4 CBZ X0, 0x1D7C304
	0x01D7C2D8 MOVZ W1, 0x1
	0x01D7C2DC MOV X2, X31
	0x01D7C2E0 BL 0x3C357B4
	0x01D7C2E4 MOV X0, X19
	0x01D7C2E8 MOV X1, X31
	0x01D7C2EC BL 0x3C32ECC
	0x01D7C2F0 CBZ X0, 0x1D7C304
	0x01D7C2F4 MOV W1, W31
	0x01D7C2F8 MOV X2, X31
	0x01D7C2FC LDP X30, X19, [X31], #0x10
	0x01D7C300 B 0x3C357B4
	0x01D7C304 BL 0x1C16F20
	0x01D7C308 SUB X31, X31, 0x90
	0x01D7C30C STP D13, D12, [X31 + 0x30]
	0x01D7C310 STP D11, D10, [X31 + 0x40]
	0x01D7C314 STP D9, D8, [X31 + 0x50]
	0x01D7C318 STP X30, X23, [X31 + 0x60]
	0x01D7C31C STP X22, X21, [X31 + 0x70]
	0x01D7C320 STP X20, X19, [X31 + 0x80]
	0x01D7C324 ADRP X20, 0x265C000
	0x01D7C328 LDRB W8, [X20 + 0x94C]
	0x01D7C32C MOV X19, X0
	0x01D7C330 TBNZ X8, 0x0, 0x1D7C360
	0x01D7C334 ADRP X0, 0x237A000
	0x01D7C338 LDR X0, [X0 + 0x450]
	0x01D7C33C BL 0x1C16CF4
	0x01D7C340 ADRP X0, 0x237A000
	0x01D7C344 LDR X0, [X0 + 0x458]
	0x01D7C348 BL 0x1C16CF4
	0x01D7C34C ADRP X0, 0x237A000
	0x01D7C350 LDR X0, [X0 + 0x460]
	0x01D7C354 BL 0x1C16CF4
	0x01D7C358 MOVZ W8, 0x1
	0x01D7C35C STRB W8, [X20 + 0x94C]
	0x01D7C360 MOVZ W0, 0x130
	0x01D7C364 MOV X1, X31
	0x01D7C368 BL 0x3C84CAC
	0x01D7C36C TBZ X0, 0x0, 0x1D7C378
	0x01D7C370 MOVZ W21, 0x1
	0x01D7C374 B 0x1D7C388
	0x01D7C378 MOVZ W0, 0x12F
	0x01D7C37C MOV X1, X31
	0x01D7C380 BL 0x3C84CAC
	0x01D7C384 AND W21, W0, 0x1
	0x01D7C388 CMP W21, 0x0
	0x01D7C38C MOVZ W8, 0x30
	0x01D7C390 MOVZ W9, 0x2C
	0x01D7C394 CSEL X8, X9, X8, EQ
	0x01D7C398 LDR V0, [X19, X8, LSL]
	0x01D7C39C MOVZ W0, 0x61
	0x01D7C3A0 MOV X1, X31
	0x01D7C3A4 STR V0, [X31 + 0x2]
	0x01D7C3A8 BL 0x3C84CAC
	0x01D7C3AC TBNZ X0, 0x0, 0x1D7C3C0
	0x01D7C3B0 MOVZ W0, 0x114
	0x01D7C3B4 MOV X1, X31
	0x01D7C3B8 BL 0x3C84CAC
	0x01D7C3BC TBZ X0, 0x0, 0x1D7C458
	0x01D7C3C0 MOV X0, X19
	0x01D7C3C4 MOV X1, X31
	0x01D7C3C8 BL 0x3C32E90
	0x01D7C3CC MOV X20, X0
	0x01D7C3D0 MOV X0, X19
	0x01D7C3D4 MOV X1, X31
	0x01D7C3D8 BL 0x3C32E90
	0x01D7C3DC CBZ X0, 0x1D7CB40
	0x01D7C3E0 MOV X1, X31
	0x01D7C3E4 BL 0x3C3F58C
	0x01D7C3E8 MOV X0, X19
	0x01D7C3EC MOV X1, X31
	0x01D7C3F0 MOV V8.16B, V0.16B
	0x01D7C3F4 MOV V9.16B, V1.16B
	0x01D7C3F8 MOV V10.16B, V2.16B
	0x01D7C3FC BL 0x3C32E90
	0x01D7C400 CBZ X0, 0x1D7CB40
	0x01D7C404 MOV X1, X31
	0x01D7C408 BL 0x3C3F90C
	0x01D7C40C MOV X0, X31
	0x01D7C410 MOV V11.16B, V0.16B
	0x01D7C414 MOV V12.16B, V1.16B
	0x01D7C418 MOV V13.16B, V2.16B
	0x01D7C41C BL 0x3C3C714
	0x01D7C420 CBZ X20, 0x1D7CB40

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x265D000
	007 Move W8, [X20+2480]
	008 Move X19, X1
	009 Move X21, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x237B000
	015 Move X0, [X0+1056]
	016 Call 0x1C17CF4
	017 Move X0, 0x2378000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x237B000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0x237B000
	024 Move X0, [X0+1072]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+2480], W8
	028 Move [X19], W31
	029 Compare X21, 0
	030 JumpIfEqual {109}
	031 Move X0, X21
	032 Move X1, X31
	033 Call Component.get_gameObject, X0
	034 Compare X0, 0
	035 JumpIfEqual {109}
	036 Move X20, 0x237B000
	037 Move X20, [X20+1064]
	038 Move X1, X31
	039 Call GameObject.get_tag, X0
	040 Move X1, [X20]
	041 Move X2, X31
	042 Call String.op_Equality, X0, X1
	043 Move W20, W0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {102}
	048 Move X0, X21
	049 Move X1, X31
	050 Call Component.get_gameObject, X0
	051 Compare X0, 0
	052 JumpIfEqual {109}
	053 Move X8, 0x237B000
	054 Move X8, [X8+1056]
	055 Move X1, [X8]
	056 Call 0x21E68C4, X0
	057 Move X8, 0x2378000
	058 Move X8, [X8+1432]
	059 Move X22, X0
	060 Move X8, [X8]
	061 Move W9, [X8+224]
	062 Compare W9, 0
	063 JumpIfNotEqual {66}
	064 Move X0, X8
	065 Call 0x1C17DFC
	066 Move X0, X22
	067 Move X1, X31
	068 Move X2, X31
	069 Call Object.op_Inequality, X0, X1
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {79}
	074 Compare X22, 0
	075 JumpIfEqual {109}
	076 Move W8, [X22+164]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 NotImplemented "Instruction CSET not yet implemented."
	079 Move X0, X21
	080 Move X1, X31
	081 Call Component.get_gameObject, X0
	082 Compare X0, 0
	083 JumpIfEqual {109}
	084 Move X1, X31
	085 Call Object.get_name, X0
	086 Compare X0, 0
	087 JumpIfEqual {109}
	088 Move X8, 0x237B000
	089 Move X8, [X8+1072]
	090 Move X2, X31
	091 Move X1, [X8]
	092 Call String.EndsWith, X0, X1
	093 Xor W8, W0, 1
	094 And W0, W8, 1
	095 Move X8, -19468288
	096 Move X9, -19468288
	097 Move V0, [X8+1100]
	098 Move V1, [X9+188]
	099 Move X1, X31
	100 Move [X19], W0
	101 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	102 And W0, W20, 1
	103 Move X20, [X31+32]
	104 Move X19, [X31+40]
	105 Move X22, [X31+16]
	106 Move X21, [X31+24]
	107 Move X30, [X31+48]
	108 Return X0
	109 Call 0x1C17F20

