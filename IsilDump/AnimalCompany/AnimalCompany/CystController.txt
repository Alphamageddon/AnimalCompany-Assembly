Type: AnimalCompany.CystController

Method: Fusion.NetworkArray`1<UnityEngine.Vector3> get_tetherAttachmentPoints()

Disassembly:
	0x01DEC578 LDR X0, [X0 + 0xFD0]
	0x01DEC57C BL 0x1C16CF4
	0x01DEC580 ADRP X0, 0x230C000
	0x01DEC584 LDR X0, [X0 + 0xFD8]
	0x01DEC588 BL 0x1C16CF4
	0x01DEC58C MOVZ W8, 0x1
	0x01DEC590 STRB W8, [X20 + 0xCCB]
	0x01DEC594 STP X31, X31, [X31 + 0x20]
	0x01DEC598 STR X31, [X31 + 0x30]
	0x01DEC59C LDR X8, [X19 + 0xD8]
	0x01DEC5A0 CBZ X8, 0x1DEC6CC
	0x01DEC5A4 ADRP X24, 0x230C000
	0x01DEC5A8 ADRP X25, 0x230C000
	0x01DEC5AC ADRP X21, 0x2307000
	0x01DEC5B0 ADRP X22, 0x2308000
	0x01DEC5B4 LDR X24, [X24 + 0xFD8]
	0x01DEC5B8 LDR X25, [X25 + 0xFD0]
	0x01DEC5BC LDR X21, [X21 + 0x5A0]
	0x01DEC5C0 LDR X22, [X22 + 0x5A8]
	0x01DEC5C4 MOV W20, W31
	0x01DEC5C8 ADRP X26, 0x25EC000
	0x01DEC5CC MOVZ W27, 0x1
	0x01DEC5D0 ADRP X28, 0x25EC000
	0x01DEC5D4 LDR W8, [X8 + 0x18]
	0x01DEC5D8 CMP W20, W8
	0x01DEC5DC B.GE 0x1DEC6D0
	0x01DEC5E0 ADD X8, X31, 0x8
	0x01DEC5E4 MOV X0, X19
	0x01DEC5E8 BL 0x1DEB578
	0x01DEC5EC LDUR V0, [X31 + 0x8]
	0x01DEC5F0 LDR X8, [X31 + 0x18]
	0x01DEC5F4 LDRB W9, [X26 + 0x783]
	0x01DEC5F8 STR V0, [X31 + 0x2]
	0x01DEC5FC STR X8, [X31 + 0x30]
	0x01DEC600 CBNZ W9, 0x1DEC610
	0x01DEC604 MOV X0, X21
	0x01DEC608 BL 0x1C16CF4
	0x01DEC60C STRB W27, [X26 + 0x783]
	0x01DEC610 LDR X8, [X21]
	0x01DEC614 LDR X2, [X24]
	0x01DEC618 ADD X0, X31, 0x20
	0x01DEC61C MOV W1, W20
	0x01DEC620 LDR X8, [X8 + 0xB8]
	0x01DEC624 LDP S0, S1, [X8]
	0x01DEC628 LDR V2, [X8 + 0x8]
	0x01DEC62C BL 0x2410098

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25ED000
	006 Move W9, [X21+3267]
	007 Move X20, X0
	008 Move X19, X8
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x230D000
	014 Move X0, [X0+3832]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3267], W8
	018 Move X20, [X20+80]
	019 Compare X20, 0
	020 JumpIfEqual {39}
	021 Move X21, 0x230D000
	022 Move X21, [X21+3832]
	023 Move X0, X31
	024 Call ReaderWriter@UnityEngine_Vector3.GetInstance
	025 Move X3, X0
	026 Move X4, [X21]
	027 Move [X19+8], X31
	028 Move [X19+16], X31
	029 Move [X19], X31
	030 Move X0, X19
	031 Move X1, X20
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move W2, 10
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call NetworkArray`1<Vector3>..ctor, X0, X1, X2, X3
	038 Return X0
	039 Move X0, 0x2308000
	040 Move X0, [X0+1456]
	041 Call 0x1C17D08
	042 Call 0x1C17F10
	043 Move X19, X0
	044 Move X0, 0x230D000
	045 Move X0, [X0+3840]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X19
	049 Move X2, X31
	050 Call InvalidOperationException..ctor, X0, X1
	051 Move X0, 0x230D000
	052 Move X0, [X0+3848]
	053 Call 0x1C17D08
	054 Move X1, X0
	055 Move X0, X19
	056 Call 0x1C17DEC

Method: AnimalCompany.NetPlayer get_target()

Disassembly:
	0x01DEC630 LDR X0, [X19 + 0xD8]
	0x01DEC634 CBZ X0, 0x1DEC6CC
	0x01DEC638 LDR X2, [X25]
	0x01DEC63C MOV W1, W20
	0x01DEC640 BL 0x301BCCC
	0x01DEC644 CBZ X0, 0x1DEC6CC
	0x01DEC648 MOV X1, X31
	0x01DEC64C BL 0x3C32E90
	0x01DEC650 CBZ X0, 0x1DEC6CC
	0x01DEC654 FMOV S0, 1
	0x01DEC658 FMOV S1, 1
	0x01DEC65C FMOV S2, W31
	0x01DEC660 MOV X1, X31
	0x01DEC664 BL 0x3C3FC4C
	0x01DEC668 LDR X0, [X19 + 0xD8]
	0x01DEC66C CBZ X0, 0x1DEC6CC
	0x01DEC670 LDR X2, [X25]
	0x01DEC674 MOV W1, W20
	0x01DEC678 BL 0x301BCCC
	0x01DEC67C CBZ X0, 0x1DEC6CC
	0x01DEC680 MOV X1, X31
	0x01DEC684 BL 0x3C32E90
	0x01DEC688 LDRB W8, [X28 + 0x793]
	0x01DEC68C MOV X23, X0
	0x01DEC690 CBNZ W8, 0x1DEC6A0
	0x01DEC694 MOV X0, X22
	0x01DEC698 BL 0x1C16CF4
	0x01DEC69C STRB W27, [X28 + 0x793]
	0x01DEC6A0 CBZ X23, 0x1DEC6CC
	0x01DEC6A4 LDR X8, [X22]
	0x01DEC6A8 MOV X0, X23
	0x01DEC6AC MOV X1, X31
	0x01DEC6B0 LDR X8, [X8 + 0xB8]
	0x01DEC6B4 LDP S2, S3, [X8 + 0x8]
	0x01DEC6B8 LDP S0, S1, [X8]
	0x01DEC6BC BL 0x3C3F7AC
	0x01DEC6C0 LDR X8, [X19 + 0xD8]
	0x01DEC6C4 ADD W20, W20, 0x1
	0x01DEC6C8 CBNZ X8, 0x1DEC5D4
	0x01DEC6CC BL 0x1C16F20
	0x01DEC6D0 LDP X20, X19, [X31 + 0x90]
	0x01DEC6D4 LDP X22, X21, [X31 + 0x80]
	0x01DEC6D8 LDP X24, X23, [X31 + 0x70]
	0x01DEC6DC LDP X26, X25, [X31 + 0x60]
	0x01DEC6E0 LDP X28, X27, [X31 + 0x50]
	0x01DEC6E4 LDR X30, [X31 + 0x40]
	0x01DEC6E8 ADD X31, X31, 0xA0
	0x01DEC6EC RET
	0x01DEC6F0 SUB X31, X31, 0x170
	0x01DEC6F4 STP D15, D14, [X31 + 0xD0]
	0x01DEC6F8 STP D13, D12, [X31 + 0xE0]
	0x01DEC6FC STP D11, D10, [X31 + 0xF0]
	0x01DEC700 STP D9, D8, [X31 + 0x100]
	0x01DEC704 STP X29, X30, [X31 + 0x110]
	0x01DEC708 STP X28, X27, [X31 + 0x120]
	0x01DEC70C STP X26, X25, [X31 + 0x130]
	0x01DEC710 STP X24, X23, [X31 + 0x140]
	0x01DEC714 STP X22, X21, [X31 + 0x150]
	0x01DEC718 STP X20, X19, [X31 + 0x160]
	0x01DEC71C ADRP X20, 0x25EC000
	0x01DEC720 LDRB W8, [X20 + 0xCCC]
	0x01DEC724 MOV X19, X0
	0x01DEC728 TBNZ X8, 0x0, 0x1DEC788
	0x01DEC72C ADRP X0, 0x2307000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25ED000
	005 Move W8, [X20+3268]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x230A000
	012 Move X0, [X0+2464]
	013 Call 0x1C17CF4
	014 Move X0, 0x230D000
	015 Move X0, [X0+3856]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3268], W8
	019 Move X8, [X19+80]
	020 Compare X8, 0
	021 JumpIfEqual {52}
	022 Move [X31+8], X31
	023 Move X0, [X19+56]
	024 Move X19, 0x230D000
	025 Move X19, [X19+3856]
	026 Add X1, X8, 120
	027 Add X2, X31, 8
	028 Move X3, X31
	029 Call NetworkBehaviour.NetworkDeserialize, X0, X1, X2
	030 Move X2, [X19]
	031 Move W1, 8
	032 Call 0x223E890, X0, X1
	033 Move X0, [X31+8]
	034 Compare X0, 0
	035 JumpIfEqual {47}
	036 Move X9, 0x230A000
	037 Move X9, [X9+2464]
	038 Move X8, [X0]
	039 Move X1, [X9]
	040 Move W10, [X8+304]
	041 Move W9, [X1+304]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X8, [X8+200]
	044 Add X8, X8, X9
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Return X0
	051 Call 0x1C181E0
	052 Move X0, 0x2308000
	053 Move X0, [X0+1456]
	054 Call 0x1C17D08
	055 Call 0x1C17F10
	056 Move X19, X0
	057 Move X0, 0x230D000
	058 Move X0, [X0+3864]
	059 Call 0x1C17D08
	060 Move X1, X0
	061 Move X0, X19
	062 Move X2, X31
	063 Call InvalidOperationException..ctor, X0, X1
	064 Move X0, 0x230D000
	065 Move X0, [X0+3872]
	066 Call 0x1C17D08
	067 Move X1, X0
	068 Move X0, X19
	069 Call 0x1C17DEC

Method: System.Void set_target(AnimalCompany.NetPlayer value)

Disassembly:
	0x01DEC730 LDR X0, [X0 + 0x5D8]
	0x01DEC734 BL 0x1C16CF4
	0x01DEC738 ADRP X0, 0x230C000
	0x01DEC73C LDR X0, [X0 + 0xFC8]
	0x01DEC740 BL 0x1C16CF4
	0x01DEC744 ADRP X0, 0x230C000
	0x01DEC748 LDR X0, [X0 + 0xFD0]
	0x01DEC74C BL 0x1C16CF4
	0x01DEC750 ADRP X0, 0x230C000
	0x01DEC754 LDR X0, [X0 + 0xFF0]
	0x01DEC758 BL 0x1C16CF4
	0x01DEC75C ADRP X0, 0x2307000
	0x01DEC760 LDR X0, [X0 + 0x598]
	0x01DEC764 BL 0x1C16CF4
	0x01DEC768 ADRP X0, 0x2307000
	0x01DEC76C LDR X0, [X0 + 0x5F8]
	0x01DEC770 BL 0x1C16CF4
	0x01DEC774 ADRP X0, 0x230C000
	0x01DEC778 LDR X0, [X0 + 0xFF8]
	0x01DEC77C BL 0x1C16CF4
	0x01DEC780 MOVZ W8, 0x1
	0x01DEC784 STRB W8, [X20 + 0xCCC]
	0x01DEC788 MOVI V0.2D, 0x0
	0x01DEC78C MOV X0, X19
	0x01DEC790 STR W31, [X31 + 0xC8]
	0x01DEC794 STP X31, X31, [X31 + 0x70]
	0x01DEC798 STUR V0, [X31 + 0xAC]
	0x01DEC79C STP V0, V0, [X31 + 0x90]
	0x01DEC7A0 STR X31, [X31 + 0x80]
	0x01DEC7A4 BL 0x1DEBAF0
	0x01DEC7A8 TBZ X0, 0x0, 0x1DEC80C
	0x01DEC7AC MOV X0, X19
	0x01DEC7B0 BL 0x1DEBBBC
	0x01DEC7B4 STR W0, [X31 + 0xC8]
	0x01DEC7B8 LDR X1, [X19 + 0x38]
	0x01DEC7BC ADD X0, X31, 0xC8
	0x01DEC7C0 MOV X2, X31
	0x01DEC7C4 BL 0x1E91C28
	0x01DEC7C8 TBZ X0, 0x0, 0x1DED090
	0x01DEC7CC MOVZ W1, 0x64
	0x01DEC7D0 MOV X0, X19
	0x01DEC7D4 BL 0x1DEBA90
	0x01DEC7D8 LDR X0, [X19 + 0x80]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25ED000
	006 Move W8, [X21+3269]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x230D000
	014 Move X0, [X0+3880]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3269], W8
	018 Move X8, [X20+80]
	019 Compare X8, 0
	020 JumpIfEqual {35}
	021 Move X20, 0x230D000
	022 Move X20, [X20+3880]
	023 Add X1, X8, 120
	024 Move X0, X19
	025 Move X2, X31
	026 Call NetworkBehaviour.NetworkSerialize, X0, X1
	027 Move X2, [X20]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move W1, 8
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call 0x223EAC0, X0, X1
	034 Return 
	035 Move X0, 0x2308000
	036 Move X0, [X0+1456]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X19, X0
	040 Move X0, 0x230D000
	041 Move X0, [X0+3864]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Move X2, X31
	046 Call InvalidOperationException..ctor, X0, X1
	047 Move X0, 0x230D000
	048 Move X0, [X0+3888]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Call 0x1C17DEC

Method: System.Boolean get_attacked()

Disassembly:
	0x01DEC7DC CBZ X0, 0x1DED6B0
	0x01DEC7E0 MOVZ W1, 0x1
	0x01DEC7E4 MOV X2, X31
	0x01DEC7E8 BL 0x3C357B4
	0x01DEC7EC MOV X0, X19
	0x01DEC7F0 MOV W1, W31
	0x01DEC7F4 BL 0x1DEBB58
	0x01DEC7F8 MOV X0, X31
	0x01DEC7FC BL 0x1E91B08
	0x01DEC800 AND X1, X0, 0x0
	0x01DEC804 MOV X0, X19
	0x01DEC808 BL 0x1DEBC1C
	0x01DEC80C LDR X0, [X19 + 0x38]
	0x01DEC810 CBZ X0, 0x1DED6B0
	0x01DEC814 ADRP X20, 0x2307000
	0x01DEC818 LDR X20, [X20 + 0x598]
	0x01DEC81C MOV X1, X31
	0x01DEC820 BL 0x1E9E550
	0x01DEC824 MOV X0, X19
	0x01DEC828 STR S0, [X31 + 0x14]
	0x01DEC82C BL 0x1DEB630
	0x01DEC830 LDR X8, [X20]
	0x01DEC834 MOV X20, X0
	0x01DEC838 LDR W9, [X8 + 0xE0]
	0x01DEC83C CBNZ W9, 0x1DEC848
	0x01DEC840 MOV X0, X8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+128]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2308000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x230D000
	018 Move X0, [X0+3896]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x230D000
	025 Move X0, [X0+3904]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_attacked(System.Boolean value)

Disassembly:
	0x01DEC844 BL 0x1C16DFC
	0x01DEC848 MOV X0, X20
	0x01DEC84C MOV X1, X31
	0x01DEC850 MOV X2, X31
	0x01DEC854 BL 0x3C3883C
	0x01DEC858 ADRP X20, 0x2307000
	0x01DEC85C ADRP X21, 0x2307000
	0x01DEC860 LDR X20, [X20 + 0x5A0]
	0x01DEC864 LDR X21, [X21 + 0x5A8]
	0x01DEC868 ADRP X24, 0x25EC000
	0x01DEC86C ADRP X25, 0x25EC000
	0x01DEC870 TBZ X0, 0x0, 0x1DEC8E0
	0x01DEC874 LDR X0, [X19 + 0x90]
	0x01DEC878 CBZ X0, 0x1DED6B0
	0x01DEC87C MOV X1, X31
	0x01DEC880 BL 0x3C3EB78
	0x01DEC884 FMUL S0, S0, S0
	0x01DEC888 FMUL S1, S1, S1
	0x01DEC88C ADRP X8, 0xFFFFFFFFFECFE000
	0x01DEC890 FADD S0, S0, S1
	0x01DEC894 LDR V1, [X8 + 0x410]
	0x01DEC898 LDR X22, [X19 + 0x90]
	0x01DEC89C FMUL S2, S2, S2
	0x01DEC8A0 FADD S0, S2, S0
	0x01DEC8A4 FCMP S0, S1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+128], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x2308000
	012 Move X0, [X0+1456]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0x230D000
	017 Move X0, [X0+3896]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x230D000
	024 Move X0, [X0+3912]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: UnityEngine.Vector3 get_attackVector()

Disassembly:
	0x01DEC8A8 B.PL 0x1DECA50
	0x01DEC8AC LDRB W8, [X24 + 0x783]
	0x01DEC8B0 CBNZ W8, 0x1DEC8C8
	0x01DEC8B4 ADRP X0, 0x2307000
	0x01DEC8B8 LDR X0, [X0 + 0x5A0]
	0x01DEC8BC BL 0x1C16CF4
	0x01DEC8C0 MOVZ W8, 0x1
	0x01DEC8C4 STRB W8, [X24 + 0x783]
	0x01DEC8C8 CBZ X22, 0x1DED6B0
	0x01DEC8CC LDR X8, [X20]
	0x01DEC8D0 LDR X8, [X8 + 0xB8]
	0x01DEC8D4 LDR V2, [X8 + 0x8]
	0x01DEC8D8 LDR V0, [X8]
	0x01DEC8DC B 0x1DECACC
	0x01DEC8E0 MOV X0, X19
	0x01DEC8E4 BL 0x1DEB970
	0x01DEC8E8 LDR V1, [X31 + 0x14]
	0x01DEC8EC MOV X0, X19
	0x01DEC8F0 FADD S0, S1, S0
	0x01DEC8F4 BL 0x1DEB9D0
	0x01DEC8F8 MOV X0, X19
	0x01DEC8FC BL 0x1DEB970
	0x01DEC900 FMOV S1, 2
	0x01DEC904 FCMP S0, S1
	0x01DEC908 B.GE 0x1DECB70

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move S0, [X8+132]
	007 Move S1, [X8+136]
	008 Move V2, [X8+140]
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2308000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x230D000
	018 Move X0, [X0+3920]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x230D000
	025 Move X0, [X0+3928]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_attackVector(UnityEngine.Vector3 value)

Disassembly:
	0x01DEC90C LDR X22, [X19 + 0x90]
	0x01DEC910 CBZ X22, 0x1DED6B0
	0x01DEC914 MOV X0, X22
	0x01DEC918 MOV X1, X31
	0x01DEC91C BL 0x3C3EB78
	0x01DEC920 LDR V3, [X31 + 0x14]
	0x01DEC924 FMOV S4, 1
	0x01DEC928 FMOV S5, W31
	0x01DEC92C FMOV S6, 0.5
	0x01DEC930 FADD S3, S3, S3
	0x01DEC934 FMIN S4, S3, S4
	0x01DEC938 FCMP S3, 0x0
	0x01DEC93C FSUB S3, S5, S0
	0x01DEC940 FCSEL S4, S4, S5, PL
	0x01DEC944 FSUB S5, S5, S1
	0x01DEC948 FSUB S6, S6, S2
	0x01DEC94C FMUL S3, S4, S3
	0x01DEC950 FMUL S5, S4, S5
	0x01DEC954 FMUL S4, S4, S6
	0x01DEC958 FADD S0, S0, S3
	0x01DEC95C FADD S1, S1, S5
	0x01DEC960 FADD S2, S2, S4
	0x01DEC964 MOV X0, X22
	0x01DEC968 MOV X1, X31
	0x01DEC96C BL 0x3C3EC04

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move [X8+132], S0
	007 Move [X8+140], S1
	008 Move [X8+140], S2
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 
	012 Move X0, 0x2308000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x230D000
	018 Move X0, [X0+3920]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x230D000
	025 Move X0, [X0+3936]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Single get_attackTimer()

Disassembly:
	0x01DEC970 MOV X0, X19
	0x01DEC974 BL 0x1DEB630
	0x01DEC978 CBZ X0, 0x1DED6B0
	0x01DEC97C MOV X1, X31
	0x01DEC980 BL 0x3C32E90
	0x01DEC984 CBZ X0, 0x1DED6B0
	0x01DEC988 MOV X1, X31
	0x01DEC98C BL 0x3C3F58C
	0x01DEC990 MOV X0, X19
	0x01DEC994 MOV X1, X31
	0x01DEC998 MOV V9.16B, V0.16B
	0x01DEC99C MOV V10.16B, V1.16B
	0x01DEC9A0 MOV V11.16B, V2.16B
	0x01DEC9A4 BL 0x3C32E90
	0x01DEC9A8 CBZ X0, 0x1DED6B0
	0x01DEC9AC MOV X1, X31
	0x01DEC9B0 BL 0x3C3F58C
	0x01DEC9B4 FSUB S0, S9, S0
	0x01DEC9B8 FSUB S1, S10, S1
	0x01DEC9BC FSUB S2, S11, S2
	0x01DEC9C0 MOV X0, X31
	0x01DEC9C4 BL 0x3C2A8C4
	0x01DEC9C8 LDR X22, [X19 + 0x88]
	0x01DEC9CC CBZ X22, 0x1DED6B0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+144]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2308000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x230D000
	016 Move X0, [X0+3944]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x230D000
	023 Move X0, [X0+3952]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_attackTimer(System.Single value)

Disassembly:
	0x01DEC9D0 MOV X0, X22
	0x01DEC9D4 MOV X1, X31
	0x01DEC9D8 MOV V9.16B, V0.16B
	0x01DEC9DC MOV V10.16B, V1.16B
	0x01DEC9E0 MOV V11.16B, V2.16B
	0x01DEC9E4 MOV V12.16B, V3.16B
	0x01DEC9E8 BL 0x3C3DEB4
	0x01DEC9EC MOV X0, X19
	0x01DEC9F0 MOV V13.16B, V0.16B
	0x01DEC9F4 MOV V14.16B, V1.16B
	0x01DEC9F8 MOV V15.16B, V2.16B
	0x01DEC9FC MOV V8.16B, V3.16B
	0x01DECA00 BL 0x1DEB970
	0x01DECA04 LDR V2, [X31 + 0x14]
	0x01DECA08 FMOV S1, 4
	0x01DECA0C MOV V3.16B, V8.16B
	0x01DECA10 MOV V4.16B, V9.16B
	0x01DECA14 FMUL S1, S2, S1
	0x01DECA18 FMUL S0, S1, S0
	0x01DECA1C STR S0, [X31]
	0x01DECA20 MOV V0.16B, V13.16B
	0x01DECA24 MOV V1.16B, V14.16B
	0x01DECA28 MOV V2.16B, V15.16B
	0x01DECA2C MOV V5.16B, V10.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+144], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2308000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x230D000
	016 Move X0, [X0+3944]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x230D000
	023 Move X0, [X0+3960]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Int32 get_health()

Disassembly:
	0x01DECA30 MOV V6.16B, V11.16B
	0x01DECA34 MOV V7.16B, V12.16B
	0x01DECA38 MOV X0, X31
	0x01DECA3C BL 0x3C2A4A0
	0x01DECA40 MOV X0, X22
	0x01DECA44 MOV X1, X31
	0x01DECA48 BL 0x3C3F7AC
	0x01DECA4C B 0x1DECD80
	0x01DECA50 CBZ X22, 0x1DED6B0
	0x01DECA54 MOV X0, X22
	0x01DECA58 MOV X1, X31
	0x01DECA5C BL 0x3C3EB78
	0x01DECA60 LDRB W8, [X24 + 0x783]
	0x01DECA64 MOV V9.16B, V2.16B
	0x01DECA68 CBNZ W8, 0x1DECA88
	0x01DECA6C ADRP X0, 0x2307000
	0x01DECA70 LDR X0, [X0 + 0x5A0]
	0x01DECA74 STP V1, V0, [X31 + 0x20]
	0x01DECA78 BL 0x1C16CF4
	0x01DECA7C LDP V1, V0, [X31 + 0x20]
	0x01DECA80 MOVZ W8, 0x1
	0x01DECA84 STRB W8, [X24 + 0x783]
	0x01DECA88 LDR X8, [X20]
	0x01DECA8C LDR V4, [X31 + 0x14]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+148]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2308000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x230D000
	016 Move X0, [X0+3968]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x230D000
	023 Move X0, [X0+3976]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_health(System.Int32 value)

Disassembly:
	0x01DECA90 FMOV S5, 1
	0x01DECA94 FMOV S6, W31
	0x01DECA98 LDR X8, [X8 + 0xB8]
	0x01DECA9C FCMP S4, 0x0
	0x01DECAA0 MOV V0.S[1], V1.S[0]
	0x01DECAA4 FMIN S4, S4, S5
	0x01DECAA8 LDR V2, [X8]
	0x01DECAAC LDR V3, [X8 + 0x8]
	0x01DECAB0 FCSEL S4, S4, S6, PL
	0x01DECAB4 FSUB V1.2S, V2.2S, V0.2S
	0x01DECAB8 FSUB S2, S3, S9
	0x00000000 INVALID
	0x01DECAC0 FMUL S2, S4, S2
	0x01DECAC4 FADD V0.2S, V0.2S, V1.2S
	0x01DECAC8 FADD S2, S9, S2
	0x01DECACC MOV S1, V0.S[1]
	0x01DECAD0 MOV X0, X22
	0x01DECAD4 MOV X1, X31
	0x01DECAD8 BL 0x3C3EC04
	0x01DECADC LDR X0, [X19 + 0x88]
	0x01DECAE0 CBZ X0, 0x1DED6B0
	0x01DECAE4 MOV X1, X31
	0x01DECAE8 BL 0x3C3FA04
	0x01DECAEC ADRP X22, 0x25EC000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+148], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2308000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x230D000
	016 Move X0, [X0+3968]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x230D000
	023 Move X0, [X0+3984]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Boolean get_isDie()

Disassembly:
	0x01DECAF0 LDRB W8, [X22 + 0x786]
	0x01DECAF4 MOV V9.16B, V0.16B
	0x01DECAF8 MOV V10.16B, V1.16B
	0x01DECAFC MOV V11.16B, V2.16B
	0x01DECB00 CBNZ W8, 0x1DECB18
	0x01DECB04 ADRP X0, 0x2307000
	0x01DECB08 LDR X0, [X0 + 0x5A0]
	0x01DECB0C BL 0x1C16CF4
	0x01DECB10 MOVZ W8, 0x1
	0x01DECB14 STRB W8, [X22 + 0x786]
	0x01DECB18 LDR X8, [X20]
	0x01DECB1C ADRP X9, 0xFFFFFFFFFECFE000
	0x01DECB20 LDR V3, [X9 + 0x68]
	0x01DECB24 LDR X22, [X19 + 0x88]
	0x01DECB28 LDR X8, [X8 + 0xB8]
	0x01DECB2C LDP S0, S1, [X8 + 0x18]
	0x01DECB30 LDR V2, [X8 + 0x20]
	0x01DECB34 FMUL S0, S9, S0
	0x01DECB38 FMUL S1, S10, S1
	0x01DECB3C FMUL S2, S11, S2
	0x01DECB40 FADD S0, S0, S1
	0x01DECB44 FADD S0, S2, S0
	0x01DECB48 FCMP S0, S3
	0x01DECB4C B.LE 0x1DECC74
	0x01DECB50 ADRP X8, 0xFFFFFFFFFECFE000
	0x01DECB54 LDR V0, [X8 + 0x1B8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+152]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2308000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x230D000
	018 Move X0, [X0+3992]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x230D000
	025 Move X0, [X0+4000]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_isDie(System.Boolean value)

Disassembly:
	0x01DECB58 FMOV S1, W31
	0x01DECB5C FMOV S2, W31
	0x01DECB60 MOV X0, X31
	0x01DECB64 BL 0x3C2A574
	0x01DECB68 CBNZ X22, 0x1DECCDC
	0x01DECB6C B 0x1DED6B0
	0x01DECB70 MOV X0, X19
	0x01DECB74 BL 0x1DEB7DC
	0x01DECB78 TBNZ X0, 0x0, 0x1DED528
	0x01DECB7C MOVZ W1, 0x1
	0x01DECB80 MOV X0, X19
	0x01DECB84 BL 0x1DEB844
	0x01DECB88 MOV X0, X19
	0x01DECB8C MOV X1, X31
	0x01DECB90 BL 0x3C32E90
	0x01DECB94 CBZ X0, 0x1DED6B0
	0x01DECB98 MOV X1, X31
	0x01DECB9C BL 0x3C3F58C
	0x01DECBA0 MOV X0, X19
	0x01DECBA4 MOV V8.16B, V0.16B
	0x01DECBA8 MOV V11.16B, V1.16B
	0x01DECBAC MOV V10.16B, V2.16B
	0x01DECBB0 BL 0x1DEB630
	0x01DECBB4 CBZ X0, 0x1DED6B0
	0x01DECBB8 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+152], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x2308000
	012 Move X0, [X0+1456]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0x230D000
	017 Move X0, [X0+3992]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x230D000
	024 Move X0, [X0+4008]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: Fusion.TickTimer get_respawnTimer()

Disassembly:
	0x01DECBBC BL 0x3C32E90
	0x01DECBC0 CBZ X0, 0x1DED6B0
	0x01DECBC4 MOV X1, X31
	0x01DECBC8 STR S10, [X31 + 0x30]
	0x01DECBCC BL 0x3C3F58C
	0x01DECBD0 MOV X0, X19
	0x01DECBD4 MOV X1, X31
	0x01DECBD8 MOV V12.16B, V0.16B
	0x01DECBDC MOV V13.16B, V1.16B
	0x01DECBE0 MOV V14.16B, V2.16B
	0x01DECBE4 BL 0x3C32E90
	0x01DECBE8 CBZ X0, 0x1DED6B0
	0x01DECBEC MOV X1, X31
	0x01DECBF0 BL 0x3C3F58C
	0x01DECBF4 ADRP X23, 0x25EC000
	0x01DECBF8 LDRB W8, [X23 + 0x785]
	0x01DECBFC MOV V15.16B, V0.16B
	0x01DECC00 MOV V9.16B, V1.16B
	0x01DECC04 MOV V10.16B, V2.16B
	0x01DECC08 CBNZ W8, 0x1DECC20
	0x01DECC0C ADRP X0, 0x2307000
	0x01DECC10 LDR X0, [X0 + 0x5A8]
	0x01DECC14 BL 0x1C16CF4
	0x01DECC18 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+156]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2308000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x230D000
	016 Move X0, [X0+4016]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x230D000
	023 Move X0, [X0+4024]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_respawnTimer(Fusion.TickTimer value)

Disassembly:
	0x01DECC1C STRB W8, [X23 + 0x785]
	0x01DECC20 LDR X0, [X21]
	0x01DECC24 FSUB S15, S12, S15
	0x01DECC28 FSUB S13, S13, S9
	0x01DECC2C FSUB S12, S14, S10
	0x01DECC30 LDR W8, [X0 + 0xE0]
	0x01DECC34 CBNZ W8, 0x1DECC3C
	0x01DECC38 BL 0x1C16DFC
	0x01DECC3C ADRP X8, 0xFFFFFFFFFECFE000
	0x01DECC40 FMUL S0, S15, S15
	0x01DECC44 FMUL S1, S13, S13
	0x01DECC48 LDR V14, [X8 + 0x17C]
	0x01DECC4C FADD S0, S0, S1
	0x01DECC50 FMUL S1, S12, S12
	0x01DECC54 FADD S0, S1, S0
	0x01DECC58 FSQRT S0, S0
	0x01DECC5C FCMP S0, S14
	0x01DECC60 B.LE 0x1DED0C0
	0x01DECC64 FDIV S9, S15, S0
	0x01DECC68 FDIV S10, S13, S0
	0x01DECC6C FDIV S12, S12, S0
	0x01DECC70 B 0x1DED0EC
	0x01DECC74 CBZ X22, 0x1DED6B0
	0x01DECC78 MOV X0, X22

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+156], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2308000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x230D000
	016 Move X0, [X0+4016]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x230D000
	023 Move X0, [X0+4032]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void Spawned()

Disassembly:
	0x01DECC7C MOV X1, X31
	0x01DECC80 BL 0x3C3DEB4
	0x01DECC84 ADRP X8, 0xFFFFFFFFFECFE000
	0x01DECC88 MOV V9.16B, V0.16B
	0x01DECC8C LDR V0, [X8 + 0x1B8]
	0x01DECC90 MOV V10.16B, V1.16B
	0x01DECC94 MOV V11.16B, V2.16B
	0x01DECC98 FMOV S1, W31
	0x01DECC9C FMOV S2, W31
	0x01DECCA0 MOV X0, X31
	0x01DECCA4 MOV V12.16B, V3.16B
	0x01DECCA8 BL 0x3C2A574
	0x01DECCAC MOV V4.16B, V0.16B
	0x01DECCB0 LDR V0, [X31 + 0x14]
	0x01DECCB4 MOV V5.16B, V1.16B
	0x01DECCB8 MOV V6.16B, V2.16B
	0x01DECCBC MOV V7.16B, V3.16B
	0x01DECCC0 STR S0, [X31]
	0x01DECCC4 MOV V0.16B, V9.16B
	0x01DECCC8 MOV V1.16B, V10.16B
	0x01DECCCC MOV V2.16B, V11.16B
	0x01DECCD0 MOV V3.16B, V12.16B
	0x01DECCD4 MOV X0, X31
	0x01DECCD8 BL 0x3C2A4A0
	0x01DECCDC MOV X0, X22
	0x01DECCE0 MOV X1, X31
	0x01DECCE4 BL 0x3C3F7AC
	0x01DECCE8 LDR X0, [X19 + 0x98]
	0x01DECCEC CBZ X0, 0x1DED6B0
	0x01DECCF0 MOV X1, X31
	0x01DECCF4 BL 0x3C3FBAC
	0x01DECCF8 ADRP X8, 0xFFFFFFFFFECFE000
	0x01DECCFC LDR V0, [X8 + 0x330]
	0x01DECD00 LDR X22, [X19 + 0x98]
	0x01DECD04 FCMP S2, S0
	0x01DECD08 B.PL 0x1DECD20
	0x01DECD0C CBZ X22, 0x1DED6B0
	0x01DECD10 FMOV S0, 1
	0x01DECD14 FMOV S1, 1
	0x01DECD18 FMOV S2, W31
	0x01DECD1C B 0x1DECD74
	0x01DECD20 CBZ X22, 0x1DED6B0
	0x01DECD24 MOV X0, X22
	0x01DECD28 MOV X1, X31
	0x01DECD2C BL 0x3C3FBAC
	0x01DECD30 LDR V6, [X31 + 0x14]
	0x01DECD34 FMOV S3, 12
	0x01DECD38 FMOV S4, 1
	0x01DECD3C FMOV S5, W31
	0x01DECD40 FMUL S3, S6, S3
	0x01DECD44 FCMP S3, 0x0
	0x01DECD48 FMIN S3, S3, S4
	0x01DECD4C FSUB S6, S4, S0
	0x01DECD50 FSUB S4, S4, S1
	0x01DECD54 FCSEL S3, S3, S5, PL
	0x01DECD58 FSUB S5, S5, S2
	0x01DECD5C FMUL S6, S3, S6
	0x01DECD60 FMUL S4, S3, S4
	0x01DECD64 FMUL S3, S3, S5
	0x01DECD68 FADD S0, S0, S6
	0x01DECD6C FADD S1, S1, S4
	0x01DECD70 FADD S2, S2, S3
	0x01DECD74 MOV X0, X22
	0x01DECD78 MOV X1, X31
	0x01DECD7C BL 0x3C3FC4C
	0x01DECD80 LDR X0, [X19 + 0xD8]
	0x01DECD84 CBZ X0, 0x1DED6B0
	0x01DECD88 ADRP X8, 0xFFFFFFFFFECFD000
	0x01DECD8C LDR V3, [X8 + 0xF20]
	0x01DECD90 ADRP X26, 0x230C000
	0x01DECD94 ADRP X27, 0x230C000
	0x01DECD98 LDR X26, [X26 + 0xFD0]
	0x01DECD9C LDR X27, [X27 + 0xFF0]
	0x01DECDA0 STR S3, [X31 + 0x30]
	0x01DECDA4 LDR V3, [X31 + 0x14]
	0x01DECDA8 ADRP X8, 0xFFFFFFFFFECFE000
	0x01DECDAC FMOV S0, 9
	0x01DECDB0 LDR V5, [X8 + 0xBC]
	0x01DECDB4 FMOV S1, 1
	0x01DECDB8 FMOV S2, 8
	0x01DECDBC FMUL S0, S3, S0
	0x01DECDC0 FMOV S4, W31
	0x01DECDC4 FMUL S2, S3, S2
	0x01DECDC8 FCMP S0, 0x0
	0x01DECDCC FMIN S0, S0, S1
	0x01DECDD0 FMIN S1, S2, S1
	0x01DECDD4 FCSEL S0, S0, S4, PL
	0x01DECDD8 FCMP S2, 0x0
	0x01DECDDC STP S0, S5, [X31 + 0x1C]
	0x01DECDE0 FCSEL S0, S1, S4, PL
	0x01DECDE4 MOV W22, W31
	0x01DECDE8 MOVZ W28, 0x1
	0x01DECDEC STR S0, [X31 + 0x18]
	0x01DECDF0 LDR W8, [X0 + 0x18]
	0x01DECDF4 CMP W22, W8
	0x01DECDF8 B.GE 0x1DECF9C
	0x01DECDFC LDR X2, [X26]
	0x01DECE00 MOV W1, W22
	0x01DECE04 BL 0x301BCCC
	0x01DECE08 CBZ X0, 0x1DED6B0

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+80], X24
	004 Move [X31+88], X23
	005 Move [X31+96], X22
	006 Move [X31+104], X21
	007 Move [X31+112], X20
	008 Move [X31+120], X19
	009 Move X20, 0x25ED000
	010 Move W8, [X20+3270]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x230D000
	017 Move X0, [X0+4040]
	018 Call 0x1C17CF4
	019 Move X0, 0x230D000
	020 Move X0, [X0+4048]
	021 Call 0x1C17CF4
	022 Move X0, 0x230D000
	023 Move X0, [X0+4056]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3270], W8
	027 Move X0, X19
	028 Move X1, X31
	029 Move [X31+32], X31
	030 Move [X31+40], X31
	031 Move [X31+48], X31
	032 Call NetworkBehaviour.Spawned, X0
	033 Move X0, [X19+64]
	034 Compare X0, 0
	035 JumpIfEqual {112}
	036 Move W8, [X0+96]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 2
	039 Compare TEMP, 2
	040 JumpIfEqual {112}
	041 Move X1, X31
	042 Call NetworkObject.get_HasStateAuthority, X0
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {112}
	047 Move W1, 100
	048 Move X0, X19
	049 Call CystController.set_health, X0, X1
	050 Move X0, [X19+128]
	051 Compare X0, 0
	052 JumpIfEqual {94}
	053 Move W1, 1
	054 Move X2, X31
	055 Move W22, 1
	056 Call GameObject.SetActive, X0, X1
	057 Move X0, [X19+216]
	058 Compare X0, 0
	059 JumpIfEqual {94}
	060 Move X21, 0x2308000
	061 Move X24, 0x230D000
	062 Move X21, [X21+1440]
	063 Move X24, [X24+4056]
	064 Move W20, W31
	065 Move X23, 0x25ED000
	066 Move W8, [X0+24]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Add X8, X31, 8
	069 Move X0, X19
	070 Call CystController.get_tetherAttachmentPoints, X0
	071 NotImplemented "Instruction LDUR not yet implemented."
	072 Move X8, [X31+24]
	073 Move W9, [X23+1923]
	074 Move [X31+2], V0
	075 Move [X31+48], X8
	076 Compare W9, 0
	077 JumpIfNotEqual {81}
	078 Move X0, X21
	079 Call 0x1C17CF4
	080 Move [X23+1923], W22
	081 Move X8, [X21]
	082 Move X2, [X24]
	083 Add X0, X31, 32
	084 Move W1, W20
	085 Move X8, [X8+184]
	086 Move S0, [X8]
	087 Move S1, [X8+4]
	088 Move V2, [X8+8]
	089 Call NetworkArray`1<Vector3>.Set, X0, X1, X2
	090 Move X0, [X19+216]
	091 Add W20, W20, 1
	092 Compare X0, 0
	093 JumpIfNotEqual {66}
	094 Call 0x1C17F20
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X21, 0x230D000
	097 Move X21, [X21+4048]
	098 Move W20, W31
	099 Move X2, [X21]
	100 Move W1, W20
	101 Call List`1<Object>.get_Item, X0, X1
	102 Move X1, X0
	103 Move W2, 1
	104 Move X0, X19
	105 Call CystController.AttachTether, X0, X1, X2
	106 Move X0, [X19+216]
	107 Compare X0, 0
	108 JumpIfEqual {94}
	109 Move W8, [X0+24]
	110 Add W20, W20, 1
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move X20, [X31+112]
	113 Move X19, [X31+120]
	114 Move X22, [X31+96]
	115 Move X21, [X31+104]
	116 Move X24, [X31+80]
	117 Move X23, [X31+88]
	118 Move X30, [X31+64]
	119 Add X31, X31, 128
	120 Return 

Method: System.Void BreakTether(AnimalCompany.CystTether tether, AnimalCompany.NetPlayer player)

Disassembly:
	0x01DED0D8 STRB W8, [X24 + 0x783]
	0x01DED0DC LDR X8, [X20]
	0x01DED0E0 LDR X8, [X8 + 0xB8]
	0x01DED0E4 LDP S9, S10, [X8]
	0x01DED0E8 LDR V12, [X8 + 0x8]
	0x01DED0EC ADRP X22, 0x2306000
	0x01DED0F0 LDR X22, [X22 + 0x5D8]
	0x01DED0F4 LDR X0, [X22]
	0x01DED0F8 LDR W8, [X0 + 0xE0]
	0x01DED0FC CBNZ W8, 0x1DED108
	0x01DED100 BL 0x1C16DFC
	0x01DED104 LDR X0, [X22]
	0x01DED108 LDR X8, [X0 + 0xB8]
	0x01DED10C MOV X1, X31
	0x01DED110 LDR W0, [X8]
	0x01DED114 BL 0x3C35CB8
	0x01DED118 ADRP X8, 0x2306000
	0x01DED11C LDR X8, [X8 + 0x5F8]
	0x01DED120 MOV W22, W0
	0x01DED124 LDR X8, [X8]
	0x01DED128 LDR W9, [X8 + 0xE0]
	0x01DED12C CBNZ W9, 0x1DED138
	0x01DED130 MOV X0, X8
	0x01DED134 BL 0x1C16DFC
	0x01DED138 LDR V0, [X31 + 0x30]
	0x01DED13C ADD X0, X31, 0x58
	0x01DED140 ADD X1, X31, 0x90
	0x01DED144 MOVZ W3, 0x1
	0x01DED148 STP S0, S9, [X31 + 0x60]
	0x01DED14C FMOV S0, 15
	0x01DED150 MOV W2, W22
	0x01DED154 MOV X4, X31
	0x01DED158 STP S8, S11, [X31 + 0x58]
	0x01DED15C STP S10, S12, [X31 + 0x68]
	0x01DED160 BL 0x3C8B63C
	0x01DED164 MOV W22, W0
	0x01DED168 MOV X0, X19
	0x01DED16C BL 0x1DEB630
	0x01DED170 CBZ X0, 0x1DED6B0
	0x01DED174 MOV X1, X31
	0x01DED178 BL 0x3C32E90
	0x01DED17C CBZ X0, 0x1DED6B0
	0x01DED180 MOV X1, X31
	0x01DED184 MOV V12.16B, V14.16B
	0x01DED188 BL 0x3C3F58C
	0x01DED18C MOV X0, X19
	0x01DED190 MOV X1, X31
	0x01DED194 MOV V11.16B, V0.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x25EC000
	007 Move W8, [X22+3271]
	008 Move X19, X2
	009 Move X21, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x230C000
	016 Move X0, [X0+4064]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+3271], W8
	020 Move X0, [X20+64]
	021 Compare X0, 0
	022 JumpIfEqual {42}
	023 Move W8, [X0+96]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 2
	026 Compare TEMP, 2
	027 JumpIfEqual {42}
	028 Move X1, X31
	029 Call NetworkObject.get_HasStateAuthority, X0
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {42}
	034 Move X0, X20
	035 Move X1, X21
	036 Move X2, X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Move X0, [X20+216]
	043 Compare X0, 0
	044 JumpIfEqual {66}
	045 Move X8, 0x230C000
	046 Move X8, [X8+4064]
	047 Move X1, X21
	048 Move X2, [X8]
	049 Call List`1<Object>.IndexOf, X0, X1
	050 Compare X19, 0
	051 JumpIfEqual {66}
	052 Move W21, W0
	053 Move X0, X19
	054 Move X1, X31
	055 Call NetPlayer.get_objectID, X0
	056 Move W2, W0
	057 Move X0, X20
	058 Move W1, W21
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X30, [X31+48]
	064 Call CystController.RPC_ServerBreakTether, X0, X1, X2
	065 Return 
	066 Call 0x1C17F20

Method: System.Void RPC_ServerBreakTether(System.Int32 id, System.UInt32 playerID)

Disassembly:
	0x01DED348 LDP S0, S1, [X8]
	0x01DED34C LDR V2, [X8 + 0x8]
	0x01DED350 LDR V8, [X31 + 0x18]
	0x01DED354 LDR V12, [X31 + 0x20]
	0x01DED358 FMOV S3, 15
	0x01DED35C FMUL S0, S0, S3
	0x01DED360 FMUL S1, S1, S3
	0x01DED364 FMUL S2, S2, S3
	0x01DED368 LDR V5, [X31 + 0x30]
	0x01DED36C FSUB S3, S11, S14
	0x01DED370 FSUB S4, S10, S8
	0x01DED374 FMUL S3, S3, S3
	0x01DED378 FSUB S5, S13, S5
	0x01DED37C FMUL S4, S4, S4
	0x01DED380 FADD S3, S3, S4
	0x01DED384 FMUL S4, S5, S5
	0x01DED388 FADD S3, S4, S3
	0x01DED38C MOV X0, X19
	0x01DED390 FSQRT S9, S3
	0x01DED394 BL 0x1DEB90C
	0x01DED398 FMOV S0, 15
	0x01DED39C TBZ X22, 0x0, 0x1DED3AC
	0x01DED3A0 ADD X0, X31, 0x90
	0x01DED3A4 MOV X1, X31
	0x01DED3A8 BL 0x3C8E684
	0x01DED3AC FCMP S9, S0
	0x01DED3B0 B.PL 0x1DED4F4
	0x01DED3B4 MOV X0, X19
	0x01DED3B8 MOV V8.16B, V12.16B
	0x01DED3BC BL 0x1DEB630
	0x01DED3C0 MOV X22, X0
	0x01DED3C4 MOV X0, X19
	0x01DED3C8 BL 0x1DEB630
	0x01DED3CC CBZ X0, 0x1DED6B0
	0x01DED3D0 MOV X1, X31
	0x01DED3D4 BL 0x3C32E90
	0x01DED3D8 CBZ X0, 0x1DED6B0
	0x01DED3DC MOV X1, X31
	0x01DED3E0 BL 0x3C3F58C
	0x01DED3E4 MOV X0, X19
	0x01DED3E8 MOV V9.16B, V0.16B
	0x01DED3EC MOV V10.16B, V1.16B
	0x01DED3F0 MOV V11.16B, V2.16B
	0x01DED3F4 BL 0x1DEB8A8
	0x01DED3F8 LDRB W8, [X23 + 0x785]
	0x01DED3FC MOV V12.16B, V0.16B
	0x01DED400 MOV V13.16B, V1.16B
	0x01DED404 MOV V14.16B, V2.16B
	0x01DED408 CBNZ W8, 0x1DED420
	0x01DED40C ADRP X0, 0x2306000
	0x01DED410 LDR X0, [X0 + 0x5A8]
	0x01DED414 BL 0x1C16CF4
	0x01DED418 MOVZ W8, 0x1
	0x01DED41C STRB W8, [X23 + 0x785]
	0x01DED420 LDR X0, [X21]
	0x01DED424 LDR W8, [X0 + 0xE0]
	0x01DED428 CBNZ W8, 0x1DED430
	0x01DED42C BL 0x1C16DFC
	0x01DED430 FMUL S0, S12, S12
	0x01DED434 FMUL S1, S13, S13
	0x01DED438 FADD S0, S0, S1
	0x01DED43C FMUL S1, S14, S14
	0x01DED440 FADD S0, S1, S0
	0x01DED444 FSQRT S2, S0
	0x01DED448 FCMP S2, S8
	0x01DED44C B.LE 0x1DED460
	0x01DED450 FDIV S0, S12, S2
	0x01DED454 FDIV S1, S13, S2
	0x01DED458 FDIV S2, S14, S2
	0x01DED45C B 0x1DED48C
	0x01DED460 LDRB W8, [X24 + 0x783]
	0x01DED464 CBNZ W8, 0x1DED47C
	0x01DED468 ADRP X0, 0x2306000
	0x01DED46C LDR X0, [X0 + 0x5A0]
	0x01DED470 BL 0x1C16CF4
	0x01DED474 MOVZ W8, 0x1
	0x01DED478 STRB W8, [X24 + 0x783]
	0x01DED47C LDR X8, [X20]
	0x01DED480 LDR X8, [X8 + 0xB8]
	0x01DED484 LDP S0, S1, [X8]
	0x01DED488 LDR V2, [X8 + 0x8]
	0x01DED48C LDR X8, [X19 + 0x40]
	0x01DED490 CBZ X8, 0x1DED4A4
	0x01DED494 LDR X8, [X8 + 0x20]
	0x01DED498 CBZ X8, 0x1DED4A4
	0x01DED49C LDR W5, [X8]
	0x01DED4A0 B 0x1DED4A8
	0x01DED4A4 MOV X5, X31
	0x01DED4A8 CBZ X22, 0x1DED6B0
	0x01DED4AC ADRP X9, 0x230B000
	0x01DED4B0 LDR W8, [X19 + 0x68]
	0x01DED4B4 LDR X9, [X9 + 0xFF8]
	0x01DED4B8 FMOV S5, 10
	0x01DED4BC FMUL S3, S0, S5
	0x01DED4C0 FMUL S4, S1, S5
	0x01DED4C4 LDR X4, [X9]
	0x01DED4C8 FMUL S5, S2, S5
	0x01DED4CC BFM X5, X8, 0x20, 0x1F
	0x01DED4D0 MOVZ W1, 0x1F4
	0x01DED4D4 MOV X0, X22
	0x01DED4D8 MOV V0.16B, V9.16B
	0x01DED4DC MOV V1.16B, V10.16B
	0x01DED4E0 MOV V2.16B, V11.16B
	0x01DED4E4 MOV X2, X31
	0x01DED4E8 MOV X3, X31
	0x01DED4EC MOV X6, X31
	0x01DED4F0 BL 0x1DB7954
	0x01DED4F4 LDR X22, [X19 + 0xC8]
	0x01DED4F8 MOV X0, X19
	0x01DED4FC MOV X1, X31
	0x01DED500 BL 0x3C32E90
	0x01DED504 CBZ X0, 0x1DED6B0
	0x01DED508 MOV X1, X31
	0x01DED50C BL 0x3C3F58C
	0x01DED510 CBZ X22, 0x1DED6B0
	0x01DED514 FMOV S3, 1
	0x01DED518 MOVZ W1, 0x1
	0x01DED51C MOV X0, X22
	0x01DED520 MOV X2, X31
	0x01DED524 BL 0x1DD0FA8
	0x01DED528 MOV X0, X19
	0x01DED52C BL 0x1DEB8A8
	0x01DED530 MOV X0, X31
	0x01DED534 BL 0x3C2A8C4
	0x01DED538 LDR X0, [X19 + 0x88]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x25EC000
	007 Move W8, [X22+3272]
	008 Move W21, W2
	009 Move W20, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x230C000
	016 Move X0, [X0+4048]
	017 Call 0x1C17CF4
	018 Move X0, 0x2309000
	019 Move X0, [X0+2464]
	020 Call 0x1C17CF4
	021 Move X0, 0x230A000
	022 Move X0, [X0+2680]
	023 Call 0x1C17CF4
	024 Move X0, 0x230C000
	025 Move X0, [X0+4072]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+3272], W8
	029 Move [X31+8], X31
	030 Move W8, [X19+88]
	031 Compare W8, 0
	032 JumpIfEqual {61}
	033 Move [X19+88], W31
	034 Move X8, 0x2309000
	035 Move X8, [X8+2464]
	036 Move X0, [X8]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Add X1, X31, 8
	042 Move W0, W21
	043 Move X2, X31
	044 Call NetPlayer.TryGetPlayerByID, X0, X1
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {145}
	049 Move X0, [X19+216]
	050 Compare X0, 0
	051 JumpIfEqual {151}
	052 Move X8, 0x230C000
	053 Move X8, [X8+4048]
	054 Move W1, W20
	055 Move X2, [X8]
	056 Call List`1<Object>.get_Item, X0, X1
	057 Move X2, [X31+8]
	058 Move X1, X0
	059 Move X0, X19
	060 Call CystController.BreakTetherInternal, X0, X1, X2
	061 Move X22, 0x230A000
	062 Move X22, [X22+2680]
	063 Move X0, [X22]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X0, X19
	069 Move X1, X31
	070 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	071 Move X0, [X19+56]
	072 Compare X0, 0
	073 JumpIfEqual {151}
	074 Move X1, X31
	075 Call NetworkRunner.get_Stage, X0
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X0, [X19+64]
	078 Compare X0, 0
	079 JumpIfEqual {151}
	080 Move X1, X31
	081 Call NetworkObject.GetLocalAuthorityMask, X0
	082 And W31, W0, 7
	083 Move TEMP, X0
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfEqual {34}
	087 Move X8, [X19+56]
	088 Compare X8, 0
	089 JumpIfEqual {151}
	090 Move X0, [X8+80]
	091 Compare X0, 0
	092 JumpIfEqual {151}
	093 Move X1, X31
	094 Call Simulation.HasAnyActiveConnections, X0
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfNotEqual {145}
	099 Move X8, [X19+56]
	100 Compare X8, 0
	101 JumpIfEqual {151}
	102 Move X0, [X8+80]
	103 Move W1, 16
	104 Move X2, X31
	105 Call SimulationMessage.Allocate, X0, X1
	106 Move X8, [X19+64]
	107 Compare X8, 0
	108 JumpIfEqual {151}
	109 Move X8, [X8+32]
	110 Move X22, X0
	111 Compare X8, 0
	112 JumpIfEqual {127}
	113 Move W0, [X8]
	114 Move X0, [X22]
	115 Move X19, [X19+64]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1C17DFC
	120 Move X8, 0x230C000
	121 Move X8, [X8+4072]
	122 Move W2, 7
	123 Move X1, X19
	124 Move X3, X31
	125 Move X0, [X8]
	126 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	127 Move X0, X31
	128 Move W1, [X19+104]
	129 Move W2, 1
	130 Move X3, X31
	131 Call RpcHeader.Create, X0, X1, X2
	132 Move [X22+28], X0
	133 Move [X22+36], W20
	134 Move [X22+40], W21
	135 Compare X22, 0
	136 JumpIfEqual {151}
	137 Move W8, 128
	138 Move [X22+12], W8
	139 Move X0, [X19+56]
	140 Compare X0, 0
	141 JumpIfEqual {151}
	142 Move X1, X22
	143 Move X2, X31
	144 Call NetworkRunner.SendRpc, X0, X1
	145 Move X20, [X31+32]
	146 Move X19, [X31+40]
	147 Move X22, [X31+16]
	148 Move X21, [X31+24]
	149 Move X30, [X31+48]
	150 Return 
	151 Call 0x1C17F20

Method: System.Void BreakTetherInternal(AnimalCompany.CystTether tether, AnimalCompany.NetPlayer player)

Disassembly:
	0x01DED198 MOV V15.16B, V1.16B
	0x01DED19C MOV V13.16B, V2.16B
	0x01DED1A0 BL 0x3C32E90
	0x01DED1A4 CBZ X0, 0x1DED6B0
	0x01DED1A8 MOV X1, X31
	0x01DED1AC BL 0x3C3F58C
	0x01DED1B0 ADRP X26, 0x25EB000
	0x01DED1B4 LDRB W8, [X26 + 0x85C]
	0x01DED1B8 MOV V14.16B, V0.16B
	0x01DED1BC MOV V8.16B, V1.16B
	0x01DED1C0 MOV V10.16B, V2.16B
	0x01DED1C4 CBNZ W8, 0x1DED1DC
	0x01DED1C8 ADRP X0, 0x2306000
	0x01DED1CC LDR X0, [X0 + 0x5A8]
	0x01DED1D0 BL 0x1C16CF4
	0x01DED1D4 MOVZ W8, 0x1
	0x01DED1D8 STRB W8, [X26 + 0x85C]
	0x01DED1DC LDR X0, [X21]
	0x01DED1E0 LDR W8, [X0 + 0xE0]
	0x01DED1E4 CBNZ W8, 0x1DED1EC
	0x01DED1E8 BL 0x1C16DFC
	0x01DED1EC STR S10, [X31 + 0x30]
	0x01DED1F0 TBZ X22, 0x0, 0x1DED23C
	0x01DED1F4 ADD X0, X31, 0x90
	0x01DED1F8 MOV X1, X31
	0x01DED1FC STR S15, [X31 + 0x20]
	0x01DED200 BL 0x3C8E66C
	0x01DED204 MOV X0, X19
	0x01DED208 MOV X1, X31
	0x01DED20C MOV V9.16B, V0.16B
	0x01DED210 MOV V10.16B, V1.16B
	0x01DED214 MOV V15.16B, V2.16B
	0x01DED218 BL 0x3C32E90
	0x01DED21C CBZ X0, 0x1DED6B0
	0x01DED220 MOV X1, X31
	0x01DED224 BL 0x3C3F58C
	0x01DED228 FSUB S1, S10, S1
	0x01DED22C LDR V10, [X31 + 0x20]
	0x01DED230 FSUB S0, S9, S0
	0x01DED234 FSUB S2, S15, S2
	0x01DED238 B 0x1DED368
	0x01DED23C MOV X0, X19
	0x01DED240 BL 0x1DEB630
	0x01DED244 CBZ X0, 0x1DED6B0
	0x01DED248 MOV X1, X31
	0x01DED24C STP S8, S14, [X31 + 0x18]
	0x01DED250 STR S12, [X31 + 0x20]
	0x01DED254 BL 0x3C32E90
	0x01DED258 CBZ X0, 0x1DED6B0
	0x01DED25C MOV X1, X31
	0x01DED260 MOV V8.16B, V13.16B
	0x01DED264 MOV V14.16B, V15.16B
	0x01DED268 STR S11, [X31 + 0x10]
	0x01DED26C BL 0x3C3F58C
	0x01DED270 MOV X0, X19
	0x01DED274 MOV X1, X31
	0x01DED278 MOV V15.16B, V0.16B
	0x01DED27C MOV V9.16B, V1.16B
	0x01DED280 MOV V10.16B, V2.16B
	0x01DED284 BL 0x3C32E90
	0x01DED288 CBZ X0, 0x1DED6B0
	0x01DED28C MOV X1, X31
	0x01DED290 BL 0x3C3F58C
	0x01DED294 LDRB W8, [X23 + 0x785]
	0x01DED298 MOV V11.16B, V0.16B
	0x01DED29C MOV V12.16B, V1.16B
	0x01DED2A0 MOV V13.16B, V2.16B
	0x01DED2A4 CBNZ W8, 0x1DED2BC
	0x01DED2A8 ADRP X0, 0x2306000
	0x01DED2AC LDR X0, [X0 + 0x5A8]
	0x01DED2B0 BL 0x1C16CF4
	0x01DED2B4 MOVZ W8, 0x1
	0x01DED2B8 STRB W8, [X23 + 0x785]
	0x01DED2BC LDR X0, [X21]
	0x01DED2C0 FSUB S15, S15, S11
	0x01DED2C4 FSUB S11, S9, S12
	0x01DED2C8 FSUB S9, S10, S13
	0x01DED2CC LDR W8, [X0 + 0xE0]
	0x01DED2D0 CBNZ W8, 0x1DED2D8
	0x01DED2D4 BL 0x1C16DFC
	0x01DED2D8 FMUL S0, S15, S15
	0x01DED2DC FMUL S1, S11, S11
	0x01DED2E0 FADD S0, S0, S1
	0x01DED2E4 FMUL S1, S9, S9
	0x01DED2E8 FADD S0, S1, S0
	0x01DED2EC FSQRT S2, S0
	0x01DED2F0 LDR V0, [X31 + 0x20]
	0x01DED2F4 MOV V10.16B, V14.16B
	0x01DED2F8 MOV V13.16B, V8.16B
	0x01DED2FC FCMP S2, S0
	0x01DED300 B.LE 0x1DED31C
	0x01DED304 FDIV S1, S11, S2
	0x01DED308 LDR V11, [X31 + 0x10]
	0x01DED30C LDR V14, [X31 + 0x1C]
	0x01DED310 FDIV S0, S15, S2
	0x01DED314 FDIV S2, S9, S2
	0x01DED318 B 0x1DED350
	0x01DED31C LDRB W8, [X24 + 0x783]
	0x01DED320 LDR V14, [X31 + 0x1C]
	0x01DED324 CBNZ W8, 0x1DED33C
	0x01DED328 ADRP X0, 0x2306000
	0x01DED32C LDR X0, [X0 + 0x5A0]
	0x01DED330 BL 0x1C16CF4
	0x01DED334 MOVZ W8, 0x1
	0x01DED338 STRB W8, [X24 + 0x783]
	0x01DED33C LDR X8, [X20]
	0x01DED340 LDR V11, [X31 + 0x10]
	0x01DED344 LDR X8, [X8 + 0xB8]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+72], X23
	004 Move [X31+80], X22
	005 Move [X31+88], X21
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 Move X22, 0x25EC000
	009 Move W8, [X22+3273]
	010 Move X20, X2
	011 Move X21, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x230C000
	018 Move X0, [X0+4064]
	019 Call 0x1C17CF4
	020 Move X0, 0x230C000
	021 Move X0, [X0+4056]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3273], W8
	025 Move [X31+32], X31
	026 Move [X31+40], X31
	027 Move [X31+48], X31
	028 Move X0, [X19+216]
	029 Compare X0, 0
	030 JumpIfEqual {123}
	031 Move X8, 0x230C000
	032 Move X8, [X8+4064]
	033 Move X22, 0x230C000
	034 Move X1, X21
	035 Move X2, [X8]
	036 Move X22, [X22+4056]
	037 Call List`1<Object>.IndexOf, X0, X1
	038 Move W21, W0
	039 Add X8, X31, 8
	040 Move X0, X19
	041 Call CystController.get_tetherAttachmentPoints, X0
	042 Move X23, 0x25EC000
	043 NotImplemented "Instruction LDUR not yet implemented."
	044 Move X8, [X31+24]
	045 Move W9, [X23+1923]
	046 Move [X31+2], V0
	047 Move [X31+48], X8
	048 Compare W9, 0
	049 JumpIfNotEqual {55}
	050 Move X0, 0x2307000
	051 Move X0, [X0+1440]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X23+1923], W8
	055 Move X8, 0x2307000
	056 Move X8, [X8+1440]
	057 Move X2, [X22]
	058 Add X0, X31, 32
	059 Move W1, W21
	060 Move X8, [X8]
	061 Move X8, [X8+184]
	062 Move S0, [X8]
	063 Move S1, [X8+4]
	064 Move V2, [X8+8]
	065 Call NetworkArray`1<Vector3>.Set, X0, X1, X2
	066 Move X21, [X19+168]
	067 Compare X21, 0
	068 JumpIfEqual {81}
	069 Move X0, X19
	070 Move X1, X31
	071 Call Component.get_transform, X0
	072 Compare X0, 0
	073 JumpIfEqual {123}
	074 Move X1, X31
	075 Call Transform.get_position, X0
	076 Move S3, 1
	077 Move W1, 1
	078 Move X0, X21
	079 Move X2, X31
	080 Call RandomSFX.Play, X0, X1, V0, X2
	081 Move X0, X19
	082 Call CystController.get_attackTimer, X0
	083 Move S1, 2
	084 NotImplemented "Instruction FCMP not yet implemented."
	085 Move X0, X31
	086 Call Time.get_timeAsDouble
	087 Move V1, [X19+184]
	088 Subtract D0, D0, D1
	089 Move D1, 1.0000000000582077
	090 NotImplemented "Instruction FCMP not yet implemented."
	091 Move X21, [X19+176]
	092 Move X0, X19
	093 Move X1, X31
	094 Call Component.get_transform, X0
	095 Compare X0, 0
	096 JumpIfEqual {123}
	097 Move X1, X31
	098 Call Transform.get_position, X0
	099 Compare X21, 0
	100 JumpIfEqual {123}
	101 Move S3, 1
	102 Move W1, 1
	103 Move X0, X21
	104 Move X2, X31
	105 Call RandomSFX.Play, X0, X1, V0, X2
	106 Move X0, X31
	107 Call Time.get_timeAsDouble
	108 Move X0, X19
	109 Move X1, X20
	110 Move [X19+184], D0
	111 Call CystController.set_target, X0, X1
	112 Move S0, W31
	113 Move X0, X19
	114 Call CystController.set_attackTimer, X0, V0
	115 Move X20, [X31+96]
	116 Move X19, [X31+104]
	117 Move X22, [X31+80]
	118 Move X21, [X31+88]
	119 Move X30, [X31+64]
	120 Move X23, [X31+72]
	121 Add X31, X31, 112
	122 Return 
	123 Call 0x1C17F20

Method: System.Void AttachTether(AnimalCompany.CystTether tether, System.Boolean initialize = False)

Disassembly:
	0x01DECE0C MOV X1, X31
	0x01DECE10 BL 0x3C32E90
	0x01DECE14 MOV X23, X0
	0x01DECE18 ADD X8, X31, 0x40
	0x01DECE1C MOV X0, X19
	0x01DECE20 BL 0x1DEB578
	0x01DECE24 LDR V0, [X31 + 0x4]
	0x01DECE28 LDR X8, [X31 + 0x50]
	0x01DECE2C LDR X2, [X27]
	0x01DECE30 ADD X0, X31, 0x70
	0x01DECE34 MOV W1, W22
	0x01DECE38 STR V0, [X31 + 0x7]
	0x01DECE3C STR X8, [X31 + 0x80]
	0x01DECE40 BL 0x2410054
	0x01DECE44 LDRB W8, [X24 + 0x783]
	0x01DECE48 MOV V9.16B, V0.16B
	0x01DECE4C MOV V10.16B, V1.16B
	0x01DECE50 MOV V11.16B, V2.16B
	0x01DECE54 CBNZ W8, 0x1DECE64
	0x01DECE58 MOV X0, X20
	0x01DECE5C BL 0x1C16CF4
	0x01DECE60 STRB W28, [X24 + 0x783]
	0x01DECE64 CBZ X23, 0x1DED6B0
	0x01DECE68 LDR X8, [X20]
	0x01DECE6C MOV X0, X23
	0x01DECE70 MOV X1, X31
	0x01DECE74 LDR X8, [X8 + 0xB8]
	0x01DECE78 LDP S0, S1, [X8]
	0x01DECE7C LDR V2, [X8 + 0x8]
	0x01DECE80 FSUB S0, S9, S0
	0x01DECE84 FSUB S1, S10, S1
	0x01DECE88 FSUB S2, S11, S2
	0x01DECE8C FMUL S0, S0, S0
	0x01DECE90 FMUL S1, S1, S1
	0x01DECE94 FMUL S2, S2, S2
	0x01DECE98 FADD S0, S0, S1
	0x01DECE9C FADD S8, S2, S0
	0x01DECEA0 BL 0x3C3FBAC
	0x01DECEA4 MOV V14.16B, V0.16B
	0x01DECEA8 LDR V0, [X31 + 0x30]
	0x01DECEAC MOV V13.16B, V1.16B
	0x01DECEB0 MOV V12.16B, V2.16B
	0x01DECEB4 FCMP S8, S0
	0x01DECEB8 FMOV S0, 3
	0x01DECEBC FSUB S15, S0, S14
	0x01DECEC0 FSUB S8, S0, S1
	0x01DECEC4 B.PL 0x1DECEFC
	0x01DECEC8 LDR V3, [X31 + 0x18]
	0x01DECECC FMOV S2, W31
	0x01DECED0 FSUB S2, S2, S12
	0x01DECED4 MOV X0, X23
	0x01DECED8 FMUL S0, S3, S15
	0x01DECEDC FMUL S1, S3, S8
	0x01DECEE0 FMUL S2, S3, S2
	0x01DECEE4 FADD S0, S14, S0
	0x01DECEE8 FADD S1, S13, S1
	0x01DECEEC FADD S2, S12, S2
	0x01DECEF0 MOV X1, X31
	0x01DECEF4 BL 0x3C3FC4C
	0x01DECEF8 B 0x1DECF8C
	0x01DECEFC LDRB W8, [X25 + 0x784]
	0x01DECF00 CBNZ W8, 0x1DECF10
	0x01DECF04 MOV X0, X21
	0x01DECF08 BL 0x1C16CF4
	0x01DECF0C STRB W28, [X25 + 0x784]
	0x01DECF10 LDR X0, [X21]
	0x01DECF14 LDR W8, [X0 + 0xE0]
	0x01DECF18 CBNZ W8, 0x1DECF20
	0x01DECF1C BL 0x1C16DFC
	0x01DECF20 FMUL S0, S9, S9
	0x01DECF24 FMUL S1, S10, S10
	0x01DECF28 FMUL S2, S11, S11
	0x01DECF2C FADD S1, S0, S1
	0x01DECF30 FADD S1, S2, S1
	0x01DECF34 LDR V2, [X31 + 0x20]
	0x01DECF38 LDR V5, [X31 + 0x1C]
	0x01DECF3C FSQRT S1, S1
	0x01DECF40 MOV X0, X23
	0x01DECF44 FADD S2, S1, S2
	0x01DECF48 FSUB S2, S2, S12
	0x01DECF4C FMUL S3, S5, S15
	0x01DECF50 FMUL S4, S5, S8
	0x01DECF54 FMUL S2, S5, S2
	0x01DECF58 FADD S0, S14, S3
	0x01DECF5C FADD S1, S13, S4
	0x01DECF60 FADD S2, S12, S2
	0x01DECF64 MOV X1, X31
	0x01DECF68 BL 0x3C3FC4C
	0x01DECF6C MOV V0.16B, V9.16B
	0x01DECF70 MOV V1.16B, V10.16B
	0x01DECF74 MOV V2.16B, V11.16B
	0x01DECF78 MOV X0, X31
	0x01DECF7C BL 0x3C2A8C4
	0x01DECF80 MOV X0, X23
	0x01DECF84 MOV X1, X31
	0x01DECF88 BL 0x3C3F8B8
	0x01DECF8C LDR X0, [X19 + 0xD8]
	0x01DECF90 ADD W22, W22, 0x1
	0x01DECF94 CBNZ X0, 0x1DECDF0
	0x01DECF98 B 0x1DED6B0
	0x01DECF9C LDR V0, [X19 + 0x110]
	0x01DECFA0 LDR V1, [X31 + 0x14]
	0x01DECFA4 FSUB S0, S0, S1
	0x01DECFA8 FCMP S0, 0x0
	0x01DECFAC STR S0, [X19 + 0x110]
	0x01DECFB0 B.HI 0x1DED090
	0x01DECFB4 MOVZ W9, 0x40000000
	0x01DECFB8 CMP W8, 0x1
	0x01DECFBC STR W9, [X19 + 0x110]
	0x01DECFC0 B.LT 0x1DED090
	0x01DECFC4 MOV W21, W31
	0x01DECFC8 MOVZ W22, 0x1
	0x01DECFCC ADD X8, X31, 0x40
	0x01DECFD0 MOV X0, X19
	0x01DECFD4 BL 0x1DEB578
	0x01DECFD8 LDR V0, [X31 + 0x4]
	0x01DECFDC LDR X8, [X31 + 0x50]
	0x01DECFE0 LDR X2, [X27]
	0x01DECFE4 ADD X0, X31, 0x70
	0x01DECFE8 MOV W1, W21
	0x01DECFEC STR V0, [X31 + 0x7]
	0x01DECFF0 STR X8, [X31 + 0x80]
	0x01DECFF4 BL 0x2410054
	0x01DECFF8 LDRB W8, [X24 + 0x783]
	0x01DECFFC MOV V8.16B, V0.16B
	0x01DED000 MOV V9.16B, V1.16B
	0x01DED004 MOV V10.16B, V2.16B
	0x01DED008 CBNZ W8, 0x1DED018
	0x01DED00C MOV X0, X20
	0x01DED010 BL 0x1C16CF4
	0x01DED014 STRB W22, [X24 + 0x783]
	0x01DED018 LDR X8, [X20]
	0x01DED01C LDR X0, [X19 + 0xD8]
	0x01DED020 LDR X8, [X8 + 0xB8]
	0x01DED024 LDP S0, S1, [X8]
	0x01DED028 LDR V2, [X8 + 0x8]
	0x01DED02C FSUB S0, S8, S0
	0x01DED030 FSUB S1, S9, S1
	0x01DED034 FMUL S0, S0, S0
	0x01DED038 FMUL S1, S1, S1
	0x01DED03C FADD S0, S0, S1
	0x01DED040 LDR V1, [X31 + 0x30]
	0x01DED044 FSUB S2, S10, S2
	0x01DED048 FMUL S2, S2, S2
	0x01DED04C FADD S0, S2, S0
	0x01DED050 FCMP S0, S1
	0x01DED054 B.MI 0x1DED070
	0x01DED058 CBZ X0, 0x1DED6B0
	0x01DED05C LDR W8, [X0 + 0x18]
	0x01DED060 ADD W21, W21, 0x1
	0x01DED064 CMP W21, W8
	0x01DED068 B.LT 0x1DECFCC
	0x01DED06C B 0x1DED090
	0x01DED070 CBZ X0, 0x1DED6B0
	0x01DED074 LDR X2, [X26]
	0x01DED078 MOV W1, W21
	0x01DED07C BL 0x301BCCC
	0x01DED080 MOV X1, X0
	0x01DED084 MOV X0, X19
	0x01DED088 MOV W2, W31
	0x01DED08C BL 0x1DEBE0C
	0x01DED090 LDP X20, X19, [X31 + 0x160]
	0x01DED094 LDP X22, X21, [X31 + 0x150]
	0x01DED098 LDP X24, X23, [X31 + 0x140]
	0x01DED09C LDP X26, X25, [X31 + 0x130]
	0x01DED0A0 LDP X28, X27, [X31 + 0x120]
	0x01DED0A4 LDP X29, X30, [X31 + 0x110]
	0x01DED0A8 LDP D9, D8, [X31 + 0x100]
	0x01DED0AC LDP D11, D10, [X31 + 0xF0]
	0x01DED0B0 LDP D13, D12, [X31 + 0xE0]
	0x01DED0B4 LDP D15, D14, [X31 + 0xD0]
	0x01DED0B8 ADD X31, X31, 0x170
	0x01DED0BC RET
	0x01DED0C0 LDRB W8, [X24 + 0x783]
	0x01DED0C4 CBNZ W8, 0x1DED0DC
	0x01DED0C8 ADRP X0, 0x2306000
	0x01DED0CC LDR X0, [X0 + 0x5A0]
	0x01DED0D0 BL 0x1C16CF4
	0x01DED0D4 MOVZ W8, 0x1

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+128], D13
	003 Move [X31+136], D12
	004 Move [X31+144], D11
	005 Move [X31+152], D10
	006 Move [X31+160], D9
	007 Move [X31+168], D8
	008 Move [X31+176], X30
	009 Move [X31+184], X23
	010 Move [X31+192], X22
	011 Move [X31+200], X21
	012 Move [X31+208], X20
	013 Move [X31+216], X19
	014 Move X22, 0x25ED000
	015 Move W8, [X22+3274]
	016 Move W20, W2
	017 Move X21, X1
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x2308000
	024 Move X0, [X0+1496]
	025 Call 0x1C17CF4
	026 Move X0, 0x230D000
	027 Move X0, [X0+4064]
	028 Call 0x1C17CF4
	029 Move X0, 0x230D000
	030 Move X0, [X0+4056]
	031 Call 0x1C17CF4
	032 Move X0, 0x2308000
	033 Move X0, [X0+1528]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X22+3274], W8
	037 NotImplemented "Instruction MOVI not yet implemented."
	038 Move X0, X31
	039 Move [X31+48], X31
	040 Move [X31+56], X31
	041 Move [X31+108], V0
	042 Move [X31+80], V0
	043 Move [X31+88], V0
	044 Move [X31+64], X31
	045 Call Random.get_onUnitSphere
	046 Move X0, X19
	047 Move X1, X31
	048 Move V11, V0
	049 Move V12, V1
	050 Move V13, V2
	051 Call Component.get_transform, X0
	052 Compare X0, 0
	053 JumpIfEqual {214}
	054 Move X1, X31
	055 Call Transform.get_position, X0
	056 Move X22, 0x25ED000
	057 Move W8, [X22+1925]
	058 Move V8, V0
	059 Move V9, V1
	060 Move V10, V2
	061 Compare W8, 0
	062 JumpIfNotEqual {68}
	063 Move X0, 0x2308000
	064 Move X0, [X0+1448]
	065 Call 0x1C17CF4
	066 Move W8, 1
	067 Move [X22+1925], W8
	068 Move X8, 0x2308000
	069 Move X8, [X8+1448]
	070 Move X0, [X8]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Multiply S0, S11, S11
	076 Multiply S1, S12, S12
	077 Move X8, -19927040
	078 Add S0, S0, S1
	079 Move V1, [X8+380]
	080 Move X22, 0x2308000
	081 Multiply S2, S13, S13
	082 Move X22, [X22+1496]
	083 Add S0, S2, S0
	084 NotImplemented "Instruction FSQRT not yet implemented."
	085 NotImplemented "Instruction FCMP not yet implemented."
	086 NotImplemented "Instruction FDIV not yet implemented."
	087 NotImplemented "Instruction FDIV not yet implemented."
	088 NotImplemented "Instruction FDIV not yet implemented."
	089 Move X23, 0x25ED000
	090 Move W8, [X23+1923]
	091 Compare W8, 0
	092 JumpIfNotEqual {98}
	093 Move X0, 0x2308000
	094 Move X0, [X0+1440]
	095 Call 0x1C17CF4
	096 Move W8, 1
	097 Move [X23+1923], W8
	098 Move X8, 0x2308000
	099 Move X8, [X8+1440]
	100 Move X8, [X8]
	101 Move X8, [X8+184]
	102 Move S11, [X8]
	103 Move S12, [X8+4]
	104 Move V13, [X8+8]
	105 Move X0, [X22]
	106 Move X23, 0x2308000
	107 Move W8, [X0+224]
	108 Move X23, [X23+1528]
	109 Compare W8, 0
	110 JumpIfNotEqual {113}
	111 Call 0x1C17DFC
	112 Move X0, [X22]
	113 Move X8, [X0+184]
	114 Move X1, X31
	115 Move W0, [X8]
	116 Call LayerMask.op_Implicit, X0
	117 Move X8, [X23]
	118 Move W22, W0
	119 Move W9, [X8+224]
	120 Compare W9, 0
	121 JumpIfNotEqual {124}
	122 Move X0, X8
	123 Call 0x1C17DFC
	124 Add X0, X31, 24
	125 Add X1, X31, 80
	126 Move S0, 15
	127 Move W3, 1
	128 Move W2, W22
	129 Move X4, X31
	130 Move [X31+24], S8
	131 Move [X31+32], S9
	132 Move [X31+32], S10
	133 Move [X31+40], S11
	134 Move [X31+40], S12
	135 Move [X31+48], S13
	136 Call Physics.Raycast, X0, X1, V0, X2, X3
	137 Move TEMP, X0
	138 And TEMP, TEMP, 1
	139 Compare TEMP, 1
	140 JumpIfNotEqual {200}
	141 Move X0, X19
	142 Move X1, X31
	143 Call Component.get_transform, X0
	144 Move X22, X0
	145 Add X0, X31, 80
	146 Move X1, X31
	147 Call RaycastHit.get_point, X0
	148 Compare X22, 0
	149 JumpIfEqual {214}
	150 Move X0, X22
	151 Move X1, X31
	152 Call Transform.InverseTransformPoint, X0, X1
	153 Move X0, [X19+216]
	154 Compare X0, 0
	155 JumpIfEqual {214}
	156 Move X8, 0x230C000
	157 Move X8, [X8+4064]
	158 Move X1, X21
	159 Move V8, V0
	160 Move V9, V1
	161 Move X2, [X8]
	162 Move V10, V2
	163 Call List`1<Object>.IndexOf, X0, X1
	164 Move W21, W0
	165 Add X8, X31, 0
	166 Move X0, X19
	167 Call CystController.get_tetherAttachmentPoints, X0
	168 Move X9, 0x230C000
	169 Move V0, [X31]
	170 Move X8, [X31+16]
	171 Move X9, [X9+4056]
	172 Add X0, X31, 48
	173 Move [X31+3], V0
	174 Move W1, W21
	175 Move X2, [X9]
	176 Move V0, V8
	177 Move V1, V9
	178 Move V2, V10
	179 Move [X31+64], X8
	180 Call NetworkArray`1<Vector3>.Set, X0, X1, X2
	181 Move TEMP, X20
	182 And TEMP, TEMP, 1
	183 Compare TEMP, 1
	184 JumpIfEqual {200}
	185 Move X20, [X19+160]
	186 Compare X20, 0
	187 JumpIfEqual {200}
	188 Move X0, X19
	189 Move X1, X31
	190 Call Component.get_transform, X0
	191 Compare X0, 0
	192 JumpIfEqual {214}
	193 Move X1, X31
	194 Call Transform.get_position, X0
	195 Move S3, 1
	196 Move W1, 1
	197 Move X0, X20
	198 Move X2, X31
	199 Call RandomSFX.Play, X0, X1, V0, X2
	200 Move X20, [X31+208]
	201 Move X19, [X31+216]
	202 Move X22, [X31+192]
	203 Move X21, [X31+200]
	204 Move X30, [X31+176]
	205 Move X23, [X31+184]
	206 Move D9, [X31+160]
	207 Move D8, [X31+168]
	208 Move D11, [X31+144]
	209 Move D10, [X31+152]
	210 Move D13, [X31+128]
	211 Move D12, [X31+136]
	212 Add X31, X31, 224
	213 Return 
	214 Call 0x1C17F20

Method: System.Void ResetAllTethers()

Disassembly:
	0x01DED53C CBZ X0, 0x1DED6B0
	0x01DED540 MOV X1, X31
	0x01DED544 MOV V9.16B, V0.16B
	0x01DED548 MOV V10.16B, V1.16B
	0x01DED54C MOV V11.16B, V2.16B
	0x01DED550 MOV V12.16B, V3.16B
	0x01DED554 BL 0x3C3F7AC
	0x01DED558 LDR X0, [X19 + 0x98]
	0x01DED55C CBZ X0, 0x1DED6B0
	0x01DED560 MOV V0.16B, V9.16B
	0x01DED564 MOV V1.16B, V10.16B
	0x01DED568 MOV V2.16B, V11.16B
	0x01DED56C MOV V3.16B, V12.16B
	0x01DED570 MOV X1, X31
	0x01DED574 BL 0x3C3F7AC
	0x01DED578 LDR X22, [X19 + 0x98]
	0x01DED57C CBZ X22, 0x1DED6B0
	0x01DED580 MOV X0, X22
	0x01DED584 MOV X1, X31
	0x01DED588 BL 0x3C3FBAC
	0x01DED58C MOV X0, X19
	0x01DED590 MOV V9.16B, V0.16B
	0x01DED594 MOV V11.16B, V1.16B
	0x01DED598 MOV V10.16B, V2.16B
	0x01DED59C BL 0x1DEB8A8
	0x01DED5A0 LDRB W8, [X25 + 0x784]
	0x01DED5A4 MOV V12.16B, V0.16B
	0x01DED5A8 MOV V13.16B, V1.16B
	0x01DED5AC MOV V14.16B, V2.16B
	0x01DED5B0 CBNZ W8, 0x1DED5C8
	0x01DED5B4 ADRP X0, 0x2306000
	0x01DED5B8 LDR X0, [X0 + 0x5A8]
	0x01DED5BC BL 0x1C16CF4
	0x01DED5C0 MOVZ W8, 0x1
	0x01DED5C4 STRB W8, [X25 + 0x784]
	0x01DED5C8 LDR X0, [X21]
	0x01DED5CC LDR W8, [X0 + 0xE0]
	0x01DED5D0 CBNZ W8, 0x1DED5D8
	0x01DED5D4 BL 0x1C16DFC
	0x01DED5D8 LDR V4, [X31 + 0x14]
	0x01DED5DC FMUL S0, S12, S12
	0x01DED5E0 FMUL S1, S13, S13
	0x01DED5E4 FMUL S2, S14, S14
	0x01DED5E8 FMOV S3, 12
	0x01DED5EC FADD S0, S0, S1
	0x01DED5F0 FMOV S1, 1
	0x01DED5F4 FADD S0, S2, S0
	0x01DED5F8 FMUL S3, S4, S3
	0x01DED5FC FMOV S2, W31
	0x01DED600 FCMP S3, 0x0
	0x01DED604 FMIN S3, S3, S1
	0x01DED608 FSQRT S0, S0
	0x01DED60C FCSEL S2, S3, S2, PL
	0x01DED610 FSUB S3, S1, S9
	0x01DED614 FSUB S1, S1, S11
	0x01DED618 FSUB S4, S0, S10
	0x01DED61C FMUL S3, S2, S3
	0x01DED620 FMUL S1, S2, S1
	0x01DED624 FMUL S2, S2, S4
	0x01DED628 FADD S0, S9, S3
	0x01DED62C FADD S1, S11, S1
	0x01DED630 FADD S2, S10, S2
	0x01DED634 MOV X0, X22
	0x01DED638 MOV X1, X31
	0x01DED63C BL 0x3C3FC4C
	0x01DED640 MOV X0, X19
	0x01DED644 BL 0x1DEB970
	0x01DED648 FMOV S1, 3
	0x01DED64C FCMP S0, S1
	0x01DED650 B.LT 0x1DECD80
	0x01DED654 MOV X0, X19
	0x01DED658 MOV X1, X31
	0x01DED65C BL 0x1DEB730
	0x01DED660 MOV X0, X19
	0x01DED664 MOV W1, W31
	0x01DED668 BL 0x1DEB844
	0x01DED66C FMOV S0, W31
	0x01DED670 MOV X0, X19
	0x01DED674 BL 0x1DEB9D0
	0x01DED678 LDR X22, [X19 + 0xC0]
	0x01DED67C MOV X0, X19
	0x01DED680 MOV X1, X31
	0x01DED684 BL 0x3C32E90
	0x01DED688 CBZ X0, 0x1DED6B0
	0x01DED68C MOV X1, X31
	0x01DED690 BL 0x3C3F58C
	0x01DED694 CBZ X22, 0x1DED6B0
	0x01DED698 FMOV S3, 1
	0x01DED69C MOVZ W1, 0x1
	0x01DED6A0 MOV X0, X22
	0x01DED6A4 MOV X2, X31
	0x01DED6A8 BL 0x1DD0FA8
	0x01DED6AC B 0x1DECD80
	0x01DED6B0 BL 0x1C16F20
	0x01DED6B4 STR X30, [X31 - 0x20]!
	0x01DED6B8 STP X20, X19, [X31 + 0x10]
	0x01DED6BC MOV W19, W1
	0x01DED6C0 MOV X20, X0
	0x01DED6C4 BL 0x1DEBAF0
	0x01DED6C8 TBZ X0, 0x0, 0x1DED6D8
	0x01DED6CC LDP X20, X19, [X31 + 0x10]
	0x01DED6D0 LDR X30, [X31], #0x20
	0x01DED6D4 RET
	0x01DED6D8 MOV X0, X20
	0x01DED6DC MOV W1, W19
	0x01DED6E0 LDP X20, X19, [X31 + 0x10]
	0x01DED6E4 LDR X30, [X31], #0x20
	0x01DED6E8 B 0x1DED6EC
	0x01DED6EC STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], X30
	003 Move [X31+80], X28
	004 Move [X31+88], X27
	005 Move [X31+96], X26
	006 Move [X31+104], X25
	007 Move [X31+112], X24
	008 Move [X31+120], X23
	009 Move [X31+128], X22
	010 Move [X31+136], X21
	011 Move [X31+144], X20
	012 Move [X31+152], X19
	013 Move X20, 0x25EC000
	014 Move W8, [X20+3275]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x230C000
	021 Move X0, [X0+4040]
	022 Call 0x1C17CF4
	023 Move X0, 0x230C000
	024 Move X0, [X0+4048]
	025 Call 0x1C17CF4
	026 Move X0, 0x230C000
	027 Move X0, [X0+4056]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3275], W8
	031 Move [X31+32], X31
	032 Move [X31+40], X31
	033 Move [X31+48], X31
	034 Move X8, [X19+216]
	035 Compare X8, 0
	036 JumpIfEqual {122}
	037 Move X24, 0x230C000
	038 Move X25, 0x230C000
	039 Move X21, 0x2307000
	040 Move X22, 0x2308000
	041 Move X24, [X24+4056]
	042 Move X25, [X25+4048]
	043 Move X21, [X21+1440]
	044 Move X22, [X22+1448]
	045 Move W20, W31
	046 Move X26, 0x25EC000
	047 Move W27, 1
	048 Move X28, 0x25EC000
	049 Move W8, [X8+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Add X8, X31, 8
	052 Move X0, X19
	053 Call CystController.get_tetherAttachmentPoints, X0
	054 NotImplemented "Instruction LDUR not yet implemented."
	055 Move X8, [X31+24]
	056 Move W9, [X26+1923]
	057 Move [X31+2], V0
	058 Move [X31+48], X8
	059 Compare W9, 0
	060 JumpIfNotEqual {64}
	061 Move X0, X21
	062 Call 0x1C17CF4
	063 Move [X26+1923], W27
	064 Move X8, [X21]
	065 Move X2, [X24]
	066 Add X0, X31, 32
	067 Move W1, W20
	068 Move X8, [X8+184]
	069 Move S0, [X8]
	070 Move S1, [X8+4]
	071 Move V2, [X8+8]
	072 Call NetworkArray`1<Vector3>.Set, X0, X1, X2
	073 Move X0, [X19+216]
	074 Compare X0, 0
	075 JumpIfEqual {122}
	076 Move X2, [X25]
	077 Move W1, W20
	078 Call List`1<Object>.get_Item, X0, X1
	079 Compare X0, 0
	080 JumpIfEqual {122}
	081 Move X1, X31
	082 Call Component.get_transform, X0
	083 Compare X0, 0
	084 JumpIfEqual {122}
	085 Move S0, 1
	086 Move S1, 1
	087 Move S2, W31
	088 Move X1, X31
	089 Call Transform.set_localScale, X0, X1
	090 Move X0, [X19+216]
	091 Compare X0, 0
	092 JumpIfEqual {122}
	093 Move X2, [X25]
	094 Move W1, W20
	095 Call List`1<Object>.get_Item, X0, X1
	096 Compare X0, 0
	097 JumpIfEqual {122}
	098 Move X1, X31
	099 Call Component.get_transform, X0
	100 Move W8, [X28+1939]
	101 Move X23, X0
	102 Compare W8, 0
	103 JumpIfNotEqual {107}
	104 Move X0, X22
	105 Call 0x1C17CF4
	106 Move [X28+1939], W27
	107 Compare X23, 0
	108 JumpIfEqual {122}
	109 Move X8, [X22]
	110 Move X0, X23
	111 Move X1, X31
	112 Move X8, [X8+184]
	113 Move S2, [X8+8]
	114 Move S3, [X8+12]
	115 Move S0, [X8]
	116 Move S1, [X8+4]
	117 Call Transform.set_rotation, X0, X1
	118 Move X8, [X19+216]
	119 Add W20, W20, 1
	120 Compare X8, 0
	121 JumpIfNotEqual {49}
	122 Call 0x1C17F20
	123 Move X20, [X31+144]
	124 Move X19, [X31+152]
	125 Move X22, [X31+128]
	126 Move X21, [X31+136]
	127 Move X24, [X31+112]
	128 Move X23, [X31+120]
	129 Move X26, [X31+96]
	130 Move X25, [X31+104]
	131 Move X28, [X31+80]
	132 Move X27, [X31+88]
	133 Move X30, [X31+64]
	134 Add X31, X31, 160
	135 Return 

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01DED6F0 STP X20, X19, [X31 + 0x10]
	0x01DED6F4 ADRP X21, 0x25EB000
	0x01DED6F8 LDRB W8, [X21 + 0xCCD]
	0x01DED6FC MOV W20, W1
	0x01DED700 MOV X19, X0
	0x01DED704 TBNZ X8, 0x0, 0x1DED728
	0x01DED708 ADRP X0, 0x2309000
	0x01DED70C LDR X0, [X0 + 0xA78]
	0x01DED710 BL 0x1C16CF4
	0x01DED714 ADRP X0, 0x230C000
	0x01DED718 LDR X0, [X0]
	0x01DED71C BL 0x1C16CF4
	0x01DED720 MOVZ W8, 0x1
	0x01DED724 STRB W8, [X21 + 0xCCD]
	0x01DED728 LDRB W8, [X19 + 0x58]
	0x01DED72C CBZ W8, 0x1DED774
	0x01DED730 STRB W31, [X19 + 0x58]
	0x01DED734 MOV X0, X19
	0x01DED738 BL 0x1DEBAF0
	0x01DED73C TBNZ X0, 0x0, 0x1DED7B0
	0x01DED740 MOV X0, X19
	0x01DED744 BL 0x1DEBA30
	0x01DED748 SUB W1, W0, W20
	0x01DED74C MOV X0, X19
	0x01DED750 BL 0x1DEBA90
	0x01DED754 MOV X0, X19
	0x01DED758 BL 0x1DEBA30
	0x01DED75C CMP W0, 0x0
	0x01DED760 B.GT 0x1DED7B0
	0x01DED764 MOV X0, X19
	0x01DED768 LDP X20, X19, [X31 + 0x10]
	0x01DED76C LDP X30, X21, [X31], #0x20
	0x01DED770 B 0x1DED8A8
	0x01DED774 ADRP X21, 0x2309000
	0x01DED778 LDR X21, [X21 + 0xA78]
	0x01DED77C LDR X0, [X21]
	0x01DED780 LDR W8, [X0 + 0xE0]
	0x01DED784 CBNZ W8, 0x1DED78C
	0x01DED788 BL 0x1C16DFC
	0x01DED78C MOV X0, X19
	0x01DED790 MOV X1, X31
	0x01DED794 BL 0x1E77B08
	0x01DED798 LDR X0, [X19 + 0x38]
	0x01DED79C CBZ X0, 0x1DED8A4
	0x01DED7A0 MOV X1, X31
	0x01DED7A4 BL 0x1E9E538
	0x01DED7A8 CMP W0, 0x4
	0x01DED7AC B.NE 0x1DED7BC
	0x01DED7B0 LDP X20, X19, [X31 + 0x10]
	0x01DED7B4 LDP X30, X21, [X31], #0x20
	0x01DED7B8 RET
	0x01DED7BC LDR X0, [X19 + 0x40]
	0x01DED7C0 CBZ X0, 0x1DED8A4
	0x01DED7C4 MOV X1, X31
	0x01DED7C8 BL 0x1E94078
	0x01DED7CC ANDS W31, W0, 0x7
	0x01DED7D0 B.EQ 0x1DED828
	0x01DED7D4 TBNZ X0, 0x0, 0x1DED734
	0x01DED7D8 LDR X8, [X19 + 0x38]
	0x01DED7DC CBZ X8, 0x1DED8A4
	0x01DED7E0 LDR X0, [X8 + 0x50]
	0x01DED7E4 CBZ X0, 0x1DED8A4
	0x01DED7E8 MOV X1, X31
	0x01DED7EC BL 0x1EC4D00
	0x01DED7F0 TBZ X0, 0x0, 0x1DED7B0
	0x01DED7F4 LDR X8, [X19 + 0x38]
	0x01DED7F8 CBZ X8, 0x1DED8A4
	0x01DED7FC LDR X0, [X8 + 0x50]
	0x01DED800 MOVZ W1, 0xC
	0x01DED804 MOV X2, X31
	0x01DED808 BL 0x1ED9318
	0x01DED80C LDR X8, [X19 + 0x40]
	0x01DED810 CBZ X8, 0x1DED8A4
	0x01DED814 LDR X8, [X8 + 0x20]
	0x01DED818 MOV X21, X0
	0x01DED81C CBZ X8, 0x1DED860
	0x01DED820 LDR W0, [X8]
	0x01DED824 B 0x1DED864
	0x01DED828 LDR X0, [X21]
	0x01DED82C LDR X19, [X19 + 0x40]
	0x01DED830 LDR W8, [X0 + 0xE0]
	0x01DED834 CBNZ W8, 0x1DED83C
	0x01DED838 BL 0x1C16DFC
	0x01DED83C ADRP X8, 0x230C000
	0x01DED840 LDR X8, [X8]
	0x01DED844 MOV X1, X19
	0x01DED848 LDP X20, X19, [X31 + 0x10]
	0x01DED84C MOVZ W2, 0x7
	0x01DED850 LDR X0, [X8]
	0x01DED854 MOV X3, X31
	0x01DED858 LDP X30, X21, [X31], #0x20
	0x01DED85C B 0x1E77B00
	0x01DED860 MOV X0, X31
	0x01DED864 LDR W1, [X19 + 0x68]
	0x01DED868 MOVZ W2, 0x2
	0x01DED86C MOV X3, X31
	0x01DED870 BL 0x1E9C23C
	0x01DED874 STUR X0, [X21 + 0x1C]
	0x01DED878 STR W20, [X21 + 0x24]
	0x01DED87C CBZ X21, 0x1DED8A4
	0x01DED880 MOVZ W8, 0x60
	0x01DED884 STR W8, [X21 + 0xC]
	0x01DED888 LDR X0, [X19 + 0x38]
	0x01DED88C CBZ X0, 0x1DED8A4
	0x01DED890 LDP X20, X19, [X31 + 0x10]
	0x01DED894 MOV X1, X21
	0x01DED898 MOV X2, X31
	0x01DED89C LDP X30, X21, [X31], #0x20
	0x01DED8A0 B 0x1EA1E24
	0x01DED8A4 BL 0x1C16F20
	0x01DED8A8 STR D10, [X31 - 0x30]!
	0x01DED8AC STP D9, D8, [X31 + 0x8]
	0x01DED8B0 STR X30, [X31 + 0x18]
	0x01DED8B4 STP X20, X19, [X31 + 0x20]
	0x01DED8B8 MOV X19, X0
	0x01DED8BC BL 0x1DEBAF0
	0x01DED8C0 TBZ X0, 0x0, 0x1DED8D8
	0x01DED8C4 LDP X20, X19, [X31 + 0x20]
	0x01DED8C8 LDR X30, [X31 + 0x18]
	0x01DED8CC LDP D9, D8, [X31 + 0x8]
	0x01DED8D0 LDR V10, [X31], #0x30
	0x01DED8D4 RET
	0x01DED8D8 MOVZ W1, 0x1
	0x01DED8DC MOV X0, X19
	0x01DED8E0 BL 0x1DEBB58
	0x01DED8E4 LDR X20, [X19 + 0xD0]
	0x01DED8E8 CBZ X20, 0x1DED918
	0x01DED8EC MOV X0, X19
	0x01DED8F0 MOV X1, X31
	0x01DED8F4 BL 0x3C32E90
	0x01DED8F8 CBZ X0, 0x1DED9E4
	0x01DED8FC MOV X1, X31
	0x01DED900 BL 0x3C3F58C
	0x01DED904 FMOV S3, 1
	0x01DED908 MOVZ W1, 0x1
	0x01DED90C MOV X0, X20
	0x01DED910 MOV X2, X31
	0x01DED914 BL 0x1DD0FA8
	0x01DED918 MOV X0, X19
	0x01DED91C MOV X1, X31
	0x01DED920 BL 0x3C32E90
	0x01DED924 CBZ X0, 0x1DED9E4
	0x01DED928 MOV X1, X31
	0x01DED92C BL 0x3C3F58C
	0x01DED930 ADRP X20, 0x25EB000
	0x01DED934 LDRB W8, [X20 + 0x793]
	0x01DED938 MOV V8.16B, V0.16B
	0x01DED93C MOV V9.16B, V1.16B
	0x01DED940 MOV V10.16B, V2.16B
	0x01DED944 CBNZ W8, 0x1DED95C
	0x01DED948 ADRP X0, 0x2307000
	0x01DED94C LDR X0, [X0 + 0x5A8]
	0x01DED950 BL 0x1C16CF4
	0x01DED954 MOVZ W8, 0x1
	0x01DED958 STRB W8, [X20 + 0x793]
	0x01DED95C ADRP X8, 0x2307000
	0x01DED960 LDR X8, [X8 + 0x5A8]
	0x01DED964 MOVZ W0, 0x80
	0x01DED968 MOV V0.16B, V8.16B
	0x01DED96C MOV V1.16B, V9.16B
	0x01DED970 LDR X8, [X8]
	0x01DED974 MOV V2.16B, V10.16B
	0x01DED978 MOV X1, X31
	0x01DED97C LDR X8, [X8 + 0xB8]
	0x01DED980 LDP S3, S4, [X8]
	0x01DED984 LDP S5, S6, [X8 + 0x8]
	0x01DED988 BL 0x1E04F44
	0x01DED98C LDR X0, [X19 + 0x38]
	0x01DED990 FMOV S0, 20
	0x01DED994 MOV X1, X31
	0x01DED998 BL 0x1E91E68
	0x01DED99C AND X1, X0, 0x0
	0x01DED9A0 MOV X0, X19
	0x01DED9A4 BL 0x1DEBC1C
	0x01DED9A8 FMOV S0, W31
	0x01DED9AC MOV X0, X19
	0x01DED9B0 BL 0x1DEB9D0
	0x01DED9B4 MOV X0, X19
	0x01DED9B8 MOV X1, X31
	0x01DED9BC BL 0x1DEB730
	0x01DED9C0 MOV X0, X19
	0x01DED9C4 MOV W1, W31
	0x01DED9C8 BL 0x1DEB844
	0x01DED9CC MOV X0, X19
	0x01DED9D0 LDP X20, X19, [X31 + 0x20]
	0x01DED9D4 LDR X30, [X31 + 0x18]
	0x01DED9D8 LDP D9, D8, [X31 + 0x8]
	0x01DED9DC LDR V10, [X31], #0x30
	0x01DED9E0 B 0x1DEC53C
	0x01DED9E4 BL 0x1C16F20
	0x01DED9E8 STP X30, X19, [X31 - 0x10]!
	0x01DED9EC LDR X19, [X0 + 0x80]
	0x01DED9F0 BL 0x1DEBAF0
	0x01DED9F4 CBZ X19, 0x1DEDA10
	0x01DED9F8 ORN W8, W31, W0, 0x0
	0x01DED9FC AND W1, W8, 0x1
	0x01DEDA00 MOV X0, X19
	0x01DEDA04 MOV X2, X31
	0x01DEDA08 LDP X30, X19, [X31], #0x10
	0x01DEDA0C B 0x3C357B4
	0x01DEDA10 BL 0x1C16F20
	0x01DEDA14 SUB X31, X31, 0xE0
	0x01DEDA18 STR D14, [X31 + 0x50]
	0x01DEDA1C STP D13, D12, [X31 + 0x58]
	0x01DEDA20 STP D11, D10, [X31 + 0x68]
	0x01DEDA24 STP D9, D8, [X31 + 0x78]
	0x01DEDA28 STR X30, [X31 + 0x88]
	0x01DEDA2C STP X28, X27, [X31 + 0x90]
	0x01DEDA30 STP X26, X25, [X31 + 0xA0]
	0x01DEDA34 STP X24, X23, [X31 + 0xB0]
	0x01DEDA38 STP X22, X21, [X31 + 0xC0]
	0x01DEDA3C STP X20, X19, [X31 + 0xD0]
	0x01DEDA40 ADRP X20, 0x25EB000
	0x01DEDA44 LDRB W8, [X20 + 0xCCE]
	0x01DEDA48 MOV X19, X0
	0x01DEDA4C TBNZ X8, 0x0, 0x1DEDA70
	0x01DEDA50 ADRP X0, 0x2306000
	0x01DEDA54 LDR X0, [X0 + 0x5D8]
	0x01DEDA58 BL 0x1C16CF4
	0x01DEDA5C ADRP X0, 0x2306000
	0x01DEDA60 LDR X0, [X0 + 0x5F8]
	0x01DEDA64 BL 0x1C16CF4
	0x01DEDA68 MOVZ W8, 0x1
	0x01DEDA6C STRB W8, [X20 + 0xCCE]
	0x01DEDA70 ADRP X8, 0xFFFFFFFFFECFC000
	0x01DEDA74 ADRP X9, 0xFFFFFFFFFECFD000
	0x01DEDA78 ADRP X23, 0x2306000
	0x01DEDA7C ADRP X24, 0x2306000
	0x01DEDA80 LDR V1, [X8 + 0xF90]
	0x01DEDA84 LDR V2, [X9 + 0x30]
	0x01DEDA88 LDR X23, [X23 + 0x5D8]
	0x01DEDA8C LDR X24, [X24 + 0x5F8]
	0x01DEDA90 MOVI V0.2D, 0x0
	0x01DEDA94 STUR V0, [X31 + 0x3C]
	0x01DEDA98 STP V0, V0, [X31 + 0x20]
	0x01DEDA9C FMOV S0, 1
	0x01DEDAA0 FMOV S3, 1
	0x01DEDAA4 MOV X0, X31
	0x01DEDAA8 BL 0x3C0D030
	0x01DEDAAC ADRP X20, 0x2306000
	0x01DEDAB0 ADRP X8, 0xFFFFFFFFFECFD000
	0x01DEDAB4 ADRP X21, 0x2306000
	0x01DEDAB8 LDR X20, [X20 + 0x5A8]
	0x01DEDABC LDR V14, [X8 + 0x17C]
	0x01DEDAC0 LDR X21, [X21 + 0x5A0]
	0x01DEDAC4 MOVZ W25, 0x5
	0x01DEDAC8 ADRP X26, 0x25EB000
	0x01DEDACC MOVZ W27, 0x1
	0x01DEDAD0 ADRP X28, 0x25EB000
	0x01DEDAD4 MOV X0, X19
	0x01DEDAD8 MOV X1, X31
	0x01DEDADC BL 0x3C32E90
	0x01DEDAE0 CBZ X0, 0x1DEDC70
	0x01DEDAE4 MOV X1, X31
	0x01DEDAE8 BL 0x3C3F58C
	0x01DEDAEC MOV X0, X31
	0x01DEDAF0 MOV V8.16B, V0.16B
	0x01DEDAF4 MOV V9.16B, V1.16B
	0x01DEDAF8 MOV V10.16B, V2.16B
	0x01DEDAFC BL 0x3C30AE0
	0x01DEDB00 LDRB W8, [X26 + 0x785]
	0x01DEDB04 MOV V11.16B, V0.16B
	0x01DEDB08 MOV V12.16B, V1.16B
	0x01DEDB0C MOV V13.16B, V2.16B
	0x01DEDB10 CBNZ W8, 0x1DEDB20
	0x01DEDB14 MOV X0, X20
	0x01DEDB18 BL 0x1C16CF4
	0x01DEDB1C STRB W27, [X26 + 0x785]
	0x01DEDB20 LDR X0, [X20]
	0x01DEDB24 LDR W8, [X0 + 0xE0]
	0x01DEDB28 CBNZ W8, 0x1DEDB30
	0x01DEDB2C BL 0x1C16DFC
	0x01DEDB30 FMUL S0, S11, S11
	0x01DEDB34 FMUL S1, S12, S12
	0x01DEDB38 FADD S0, S0, S1
	0x01DEDB3C FMUL S1, S13, S13
	0x01DEDB40 FADD S0, S1, S0
	0x01DEDB44 FSQRT S0, S0
	0x01DEDB48 FCMP S0, S14
	0x01DEDB4C B.LE 0x1DEDB60
	0x01DEDB50 FDIV S11, S11, S0
	0x01DEDB54 FDIV S12, S12, S0
	0x01DEDB58 FDIV S13, S13, S0
	0x01DEDB5C B 0x1DEDB84
	0x01DEDB60 LDRB W8, [X28 + 0x783]
	0x01DEDB64 CBNZ W8, 0x1DEDB74
	0x01DEDB68 MOV X0, X21
	0x01DEDB6C BL 0x1C16CF4
	0x01DEDB70 STRB W27, [X28 + 0x783]
	0x01DEDB74 LDR X8, [X21]
	0x01DEDB78 LDR X8, [X8 + 0xB8]
	0x01DEDB7C LDP S11, S12, [X8]
	0x01DEDB80 LDR V13, [X8 + 0x8]
	0x01DEDB84 LDR X0, [X23]
	0x01DEDB88 LDR W8, [X0 + 0xE0]
	0x01DEDB8C CBNZ W8, 0x1DEDB98
	0x01DEDB90 BL 0x1C16DFC
	0x01DEDB94 LDR X0, [X23]
	0x01DEDB98 LDR X8, [X0 + 0xB8]
	0x01DEDB9C MOV X1, X31
	0x01DEDBA0 LDR W0, [X8]
	0x01DEDBA4 BL 0x3C35CB8
	0x01DEDBA8 LDR X8, [X24]
	0x01DEDBAC MOV W22, W0
	0x01DEDBB0 LDR W9, [X8 + 0xE0]
	0x01DEDBB4 CBNZ W9, 0x1DEDBC0
	0x01DEDBB8 MOV X0, X8
	0x01DEDBBC BL 0x1C16DFC
	0x01DEDBC0 ADD X0, X31, 0x8
	0x01DEDBC4 ADD X1, X31, 0x20
	0x01DEDBC8 FMOV S0, 15
	0x01DEDBCC MOV W2, W22
	0x01DEDBD0 MOV X3, X31
	0x01DEDBD4 STP S8, S9, [X31 + 0x8]
	0x01DEDBD8 STP S10, S11, [X31 + 0x10]
	0x01DEDBDC STP S12, S13, [X31 + 0x18]
	0x01DEDBE0 BL 0x3C8B6EC
	0x01DEDBE4 TBZ X0, 0x0, 0x1DEDC38
	0x01DEDBE8 MOV X0, X19
	0x01DEDBEC MOV X1, X31
	0x01DEDBF0 BL 0x3C32E90
	0x01DEDBF4 CBZ X0, 0x1DEDC70
	0x01DEDBF8 MOV X1, X31
	0x01DEDBFC BL 0x3C3F58C
	0x01DEDC00 ADD X0, X31, 0x20
	0x01DEDC04 MOV X1, X31
	0x01DEDC08 MOV V8.16B, V0.16B
	0x01DEDC0C MOV V9.16B, V1.16B
	0x01DEDC10 MOV V10.16B, V2.16B
	0x01DEDC14 BL 0x3C8E66C
	0x01DEDC18 MOV V3.16B, V0.16B
	0x01DEDC1C MOV V4.16B, V1.16B
	0x01DEDC20 MOV V5.16B, V2.16B
	0x01DEDC24 MOV V0.16B, V8.16B
	0x01DEDC28 MOV V1.16B, V9.16B
	0x01DEDC2C MOV V2.16B, V10.16B
	0x01DEDC30 MOV X0, X31
	0x01DEDC34 BL 0x3C0CB04
	0x01DEDC38 SUBS W25, W25, 0x1
	0x01DEDC3C B.NE 0x1DEDAD4
	0x01DEDC40 LDP X20, X19, [X31 + 0xD0]
	0x01DEDC44 LDP X22, X21, [X31 + 0xC0]
	0x01DEDC48 LDP X24, X23, [X31 + 0xB0]
	0x01DEDC4C LDP X26, X25, [X31 + 0xA0]
	0x01DEDC50 LDP X28, X27, [X31 + 0x90]
	0x01DEDC54 LDR X30, [X31 + 0x88]
	0x01DEDC58 LDP D9, D8, [X31 + 0x78]
	0x01DEDC5C LDP D11, D10, [X31 + 0x68]
	0x01DEDC60 LDP D13, D12, [X31 + 0x58]
	0x01DEDC64 LDR V14, [X31 + 0x50]
	0x01DEDC68 ADD X31, X31, 0xE0
	0x01DEDC6C RET
	0x01DEDC70 BL 0x1C16F20
	0x01DEDC74 MOV X1, X31
	0x01DEDC78 B 0x1E74F04
	0x01DEDC7C SUB X31, X31, 0x70
	0x01DEDC80 STR X30, [X31 + 0x40]
	0x01DEDC84 STP X22, X21, [X31 + 0x50]
	0x01DEDC88 STP X20, X19, [X31 + 0x60]
	0x01DEDC8C ADRP X21, 0x25EB000
	0x01DEDC90 ADRP X20, 0x2309000
	0x01DEDC94 LDRB W8, [X21 + 0xCCF]
	0x01DEDC98 LDR X20, [X20 + 0xA78]
	0x01DEDC9C MOV X19, X0
	0x01DEDCA0 TBNZ X8, 0x0, 0x1DEDCD0
	0x01DEDCA4 ADRP X0, 0x230C000
	0x01DEDCA8 LDR X0, [X0 + 0x8]
	0x01DEDCAC BL 0x1C16CF4
	0x01DEDCB0 ADRP X0, 0x2309000
	0x01DEDCB4 LDR X0, [X0 + 0xA78]
	0x01DEDCB8 BL 0x1C16CF4
	0x01DEDCBC ADRP X0, 0x230C000
	0x01DEDCC0 LDR X0, [X0 + 0x10]
	0x01DEDCC4 BL 0x1C16CF4
	0x01DEDCC8 MOVZ W8, 0x1
	0x01DEDCCC STRB W8, [X21 + 0xCCF]
	0x01DEDCD0 ADRP X22, 0x230C000
	0x01DEDCD4 ADRP X21, 0x230C000
	0x01DEDCD8 LDR X22, [X22 + 0x10]
	0x01DEDCDC LDR X21, [X21 + 0x8]
	0x01DEDCE0 ADD X8, X31, 0x20
	0x01DEDCE4 MOV X0, X19
	0x01DEDCE8 BL 0x1DEB578
	0x01DEDCEC LDR V0, [X31 + 0x2]
	0x01DEDCF0 LDR X8, [X31 + 0x30]
	0x01DEDCF4 LDR X0, [X20]
	0x01DEDCF8 STR V0, [X31]
	0x01DEDCFC STR X8, [X31 + 0x10]
	0x01DEDD00 LDR W8, [X0 + 0xE0]
	0x01DEDD04 LDR X20, [X19 + 0xE0]
	0x01DEDD08 CBNZ W8, 0x1DEDD10
	0x01DEDD0C BL 0x1C16DFC
	0x01DEDD10 LDR X2, [X22]
	0x01DEDD14 LDR V0, [X31]
	0x01DEDD18 LDR X8, [X31 + 0x10]
	0x01DEDD1C LDR X3, [X21]
	0x01DEDD20 ADD X0, X31, 0x20
	0x01DEDD24 MOV X1, X20
	0x01DEDD28 STR V0, [X31 + 0x2]
	0x01DEDD2C STR X8, [X31 + 0x30]
	0x01DEDD30 BL 0x2229104
	0x01DEDD34 LDR X1, [X19 + 0xE8]
	0x01DEDD38 MOV X0, X19
	0x01DEDD3C BL 0x1DEB730
	0x01DEDD40 LDRB W1, [X19 + 0xF0]
	0x01DEDD44 MOV X0, X19
	0x01DEDD48 BL 0x1DEB844
	0x01DEDD4C LDP S0, S1, [X19 + 0xF4]
	0x01DEDD50 LDR V2, [X19 + 0xFC]
	0x01DEDD54 MOV X0, X19
	0x01DEDD58 BL 0x1DEB90C
	0x01DEDD5C LDR V0, [X19 + 0x100]
	0x01DEDD60 MOV X0, X19
	0x01DEDD64 BL 0x1DEB9D0
	0x01DEDD68 LDR W1, [X19 + 0x104]
	0x01DEDD6C MOV X0, X19
	0x01DEDD70 BL 0x1DEBA90
	0x01DEDD74 LDRB W1, [X19 + 0x108]
	0x01DEDD78 MOV X0, X19
	0x01DEDD7C BL 0x1DEBB58
	0x01DEDD80 LDR W1, [X19 + 0x10C]
	0x01DEDD84 MOV X0, X19
	0x01DEDD88 BL 0x1DEBC1C
	0x01DEDD8C LDP X20, X19, [X31 + 0x60]
	0x01DEDD90 LDP X22, X21, [X31 + 0x50]
	0x01DEDD94 LDR X30, [X31 + 0x40]
	0x01DEDD98 ADD X31, X31, 0x70
	0x01DEDD9C RET
	0x01DEDDA0 SUB X31, X31, 0x60
	0x01DEDDA4 STP X30, X21, [X31 + 0x40]
	0x01DEDDA8 STP X20, X19, [X31 + 0x50]
	0x01DEDDAC ADRP X21, 0x25EB000
	0x01DEDDB0 ADRP X20, 0x2309000
	0x01DEDDB4 LDRB W8, [X21 + 0xCD0]
	0x01DEDDB8 LDR X20, [X20 + 0xA78]
	0x01DEDDBC MOV X19, X0
	0x01DEDDC0 TBNZ X8, 0x0, 0x1DEDDE4
	0x01DEDDC4 ADRP X0, 0x230C000
	0x01DEDDC8 LDR X0, [X0 + 0x18]
	0x01DEDDCC BL 0x1C16CF4
	0x01DEDDD0 ADRP X0, 0x2309000
	0x01DEDDD4 LDR X0, [X0 + 0xA78]
	0x01DEDDD8 BL 0x1C16CF4
	0x01DEDDDC MOVZ W8, 0x1
	0x01DEDDE0 STRB W8, [X21 + 0xCD0]
	0x01DEDDE4 ADRP X21, 0x230C000
	0x01DEDDE8 LDR X21, [X21 + 0x18]
	0x01DEDDEC ADD X8, X31, 0x20
	0x01DEDDF0 MOV X0, X19
	0x01DEDDF4 BL 0x1DEB578
	0x01DEDDF8 LDR V0, [X31 + 0x2]
	0x01DEDDFC LDR X8, [X31 + 0x30]
	0x01DEDE00 LDR X0, [X20]
	0x01DEDE04 STR V0, [X31]
	0x01DEDE08 STR X8, [X31 + 0x10]
	0x01DEDE0C LDR W8, [X0 + 0xE0]
	0x01DEDE10 CBNZ W8, 0x1DEDE18
	0x01DEDE14 BL 0x1C16DFC
	0x01DEDE18 LDR V0, [X31]
	0x01DEDE1C LDR X8, [X31 + 0x10]
	0x01DEDE20 LDR X2, [X21]
	0x01DEDE24 ADD X1, X19, 0xE0
	0x01DEDE28 ADD X0, X31, 0x20
	0x01DEDE2C STR V0, [X31 + 0x2]
	0x01DEDE30 STR X8, [X31 + 0x30]
	0x01DEDE34 BL 0x2228188
	0x01DEDE38 MOV X0, X19
	0x01DEDE3C BL 0x1DEB630
	0x01DEDE40 STR X0, [X19 + 0xE8]
	0x01DEDE44 MOV X0, X19
	0x01DEDE48 BL 0x1DEB7DC
	0x01DEDE4C AND W8, W0, 0x1
	0x01DEDE50 MOV X0, X19
	0x01DEDE54 STRB W8, [X19 + 0xF0]
	0x01DEDE58 BL 0x1DEB8A8
	0x01DEDE5C MOV X0, X19
	0x01DEDE60 STP S0, S1, [X19 + 0xF4]
	0x01DEDE64 STR S2, [X19 + 0xFC]
	0x01DEDE68 BL 0x1DEB970
	0x01DEDE6C MOV X0, X19
	0x01DEDE70 STR S0, [X19 + 0x100]
	0x01DEDE74 BL 0x1DEBA30
	0x01DEDE78 STR W0, [X19 + 0x104]
	0x01DEDE7C MOV X0, X19
	0x01DEDE80 BL 0x1DEBAF0
	0x01DEDE84 AND W8, W0, 0x1
	0x01DEDE88 MOV X0, X19
	0x01DEDE8C STRB W8, [X19 + 0x108]
	0x01DEDE90 BL 0x1DEBBBC
	0x01DEDE94 STR W0, [X19 + 0x10C]
	0x01DEDE98 LDP X20, X19, [X31 + 0x50]
	0x01DEDE9C LDP X30, X21, [X31 + 0x40]
	0x01DEDEA0 ADD X31, X31, 0x60
	0x01DEDEA4 RET
	0x01DEDEA8 STP X30, X21, [X31 - 0x20]!
	0x01DEDEAC STP X20, X19, [X31 + 0x10]
	0x01DEDEB0 ADRP X21, 0x25EB000
	0x01DEDEB4 LDRB W8, [X21 + 0xCD1]
	0x01DEDEB8 MOV X20, X1
	0x01DEDEBC MOV X19, X0
	0x01DEDEC0 TBNZ X8, 0x0, 0x1DEDED8
	0x01DEDEC4 ADRP X0, 0x230C000
	0x01DEDEC8 LDR X0, [X0 + 0x20]
	0x01DEDECC BL 0x1C16CF4
	0x01DEDED0 MOVZ W8, 0x1
	0x01DEDED4 STRB W8, [X21 + 0xCD1]
	0x01DEDED8 CBZ X19, 0x1DEDF38
	0x01DEDEDC ADRP X8, 0x230C000
	0x01DEDEE0 LDR X8, [X8 + 0x20]
	0x01DEDEE4 MOVZ W9, 0x1
	0x01DEDEE8 LDP W1, W2, [X20 + 0x24]
	0x01DEDEEC STRB W9, [X19 + 0x58]
	0x01DEDEF0 LDR X9, [X19]
	0x01DEDEF4 LDR X8, [X8]
	0x01DEDEF8 LDRB W11, [X9 + 0x130]
	0x01DEDEFC LDRB W10, [X8 + 0x130]
	0x01DEDF00 CMP W11, W10
	0x01DEDF04 B.CC 0x1DEDF2C
	0x01DEDF08 LDR X9, [X9 + 0xC8]
	0x01DEDF0C ADD X9, X9, X10, 0x3, LSL
	0x01DEDF10 LDUR X9, [X9 - 0x8]
	0x01DEDF14 CMP X9, X8
	0x01DEDF18 B.NE 0x1DEDF2C
	0x01DEDF1C MOV X0, X19
	0x01DEDF20 LDP X20, X19, [X31 + 0x10]
	0x01DEDF24 LDP X30, X21, [X31], #0x20
	0x01DEDF28 B 0x1DEC348
	0x01DEDF2C MOV X0, X19
	0x01DEDF30 MOV X1, X8
	0x01DEDF34 BL 0x1C171E0
	0x01DEDF38 BL 0x1C16F20
	0x01DEDF3C STP X30, X21, [X31 - 0x20]!
	0x01DEDF40 STP X20, X19, [X31 + 0x10]
	0x01DEDF44 ADRP X21, 0x25EB000
	0x01DEDF48 LDRB W8, [X21 + 0xCD2]
	0x01DEDF4C MOV X20, X1
	0x01DEDF50 MOV X19, X0
	0x01DEDF54 TBNZ X8, 0x0, 0x1DEDF6C
	0x01DEDF58 ADRP X0, 0x230C000
	0x01DEDF5C LDR X0, [X0 + 0x20]
	0x01DEDF60 BL 0x1C16CF4
	0x01DEDF64 MOVZ W8, 0x1
	0x01DEDF68 STRB W8, [X21 + 0xCD2]
	0x01DEDF6C CBZ X19, 0x1DEDFCC
	0x01DEDF70 ADRP X8, 0x230C000
	0x01DEDF74 LDR X8, [X8 + 0x20]
	0x01DEDF78 MOVZ W9, 0x1
	0x01DEDF7C LDR W1, [X20 + 0x24]
	0x01DEDF80 STRB W9, [X19 + 0x58]
	0x01DEDF84 LDR X9, [X19]
	0x01DEDF88 LDR X8, [X8]
	0x01DEDF8C LDRB W11, [X9 + 0x130]
	0x01DEDF90 LDRB W10, [X8 + 0x130]
	0x01DEDF94 CMP W11, W10
	0x01DEDF98 B.CC 0x1DEDFC0
	0x01DEDF9C LDR X9, [X9 + 0xC8]
	0x01DEDFA0 ADD X9, X9, X10, 0x3, LSL
	0x01DEDFA4 LDUR X9, [X9 - 0x8]
	0x01DEDFA8 CMP X9, X8
	0x01DEDFAC B.NE 0x1DEDFC0
	0x01DEDFB0 MOV X0, X19
	0x01DEDFB4 LDP X20, X19, [X31 + 0x10]
	0x01DEDFB8 LDP X30, X21, [X31], #0x20
	0x01DEDFBC B 0x1DED6EC
	0x01DEDFC0 MOV X0, X19
	0x01DEDFC4 MOV X1, X8
	0x01DEDFC8 BL 0x1C171E0
	0x01DEDFCC BL 0x1C16F20
	0x01DEDFD0 STP X30, X21, [X31 - 0x20]!
	0x01DEDFD4 STP X20, X19, [X31 + 0x10]
	0x01DEDFD8 ADRP X21, 0x25EB000
	0x01DEDFDC LDRB W8, [X21 + 0xCD3]
	0x01DEDFE0 MOV X20, X1
	0x01DEDFE4 MOV X19, X0
	0x01DEDFE8 TBNZ X8, 0x0, 0x1DEE000
	0x01DEDFEC ADRP X0, 0x2308000
	0x01DEDFF0 LDR X0, [X0 + 0x9A0]
	0x01DEDFF4 BL 0x1C16CF4
	0x01DEDFF8 MOVZ W8, 0x1
	0x01DEDFFC STRB W8, [X21 + 0xCD3]
	0x01DEE000 CBZ X20, 0x1DEE070
	0x01DEE004 MOV X0, X20
	0x01DEE008 MOV X1, X31
	0x01DEE00C BL 0x3C32ECC
	0x01DEE010 CBZ X0, 0x1DEE070
	0x01DEE014 MOV X1, X31
	0x01DEE018 BL 0x3C35734
	0x01DEE01C CMP W0, 0x6
	0x01DEE020 B.NE 0x1DEE064
	0x01DEE024 ADRP X8, 0x2307000
	0x01DEE028 LDR X8, [X8 + 0x9A0]
	0x01DEE02C LDR X20, [X19 + 0x20]
	0x01DEE030 LDR X0, [X8]
	0x01DEE034 LDR W8, [X0 + 0xE0]
	0x01DEE038 CBNZ W8, 0x1DEE040
	0x01DEE03C BL 0x1C16DFC
	0x01DEE040 MOV X0, X31
	0x01DEE044 BL 0x1DB1DCC
	0x01DEE048 CBZ X20, 0x1DEE070
	0x01DEE04C MOV X2, X0
	0x01DEE050 MOV X0, X20
	0x01DEE054 MOV X1, X19
	0x01DEE058 LDP X20, X19, [X31 + 0x10]
	0x01DEE05C LDP X30, X21, [X31], #0x20
	0x01DEE060 B 0x1DEC0D8
	0x01DEE064 LDP X20, X19, [X31 + 0x10]
	0x01DEE068 LDP X30, X21, [X31], #0x20
	0x01DEE06C RET
	0x01DEE070 BL 0x1C16F20
	0x01DEE074 MOV X1, X31
	0x01DEE078 B 0x3C36C30
	0x01DEE07C STR X30, [X31 - 0x10]!
	0x01DEE080 MOV X1, X31
	0x01DEE084 BL 0x3C32E90
	0x01DEE088 CBZ X0, 0x1DEE098
	0x01DEE08C MOV X1, X31
	0x01DEE090 LDR X30, [X31], #0x10
	0x01DEE094 B 0x3C3F58C
	0x01DEE098 BL 0x1C16F20
	0x01DEE09C STP X30, X19, [X31 - 0x10]!
	0x01DEE0A0 MOV X19, X0
	0x01DEE0A4 LDR X0, [X0 + 0x20]
	0x01DEE0A8 CBZ X0, 0x1DEE0C4
	0x01DEE0AC MOV X1, X31
	0x01DEE0B0 BL 0x3C3EB78
	0x01DEE0B4 STP S0, S1, [X19 + 0x50]
	0x01DEE0B8 STR S2, [X19 + 0x58]
	0x01DEE0BC LDP X30, X19, [X31], #0x10
	0x01DEE0C0 RET
	0x01DEE0C4 BL 0x1C16F20
	0x01DEE0C8 SUB X31, X31, 0x110
	0x01DEE0CC STP D15, D14, [X31 + 0x70]
	0x01DEE0D0 STP D13, D12, [X31 + 0x80]
	0x01DEE0D4 STP D11, D10, [X31 + 0x90]
	0x01DEE0D8 STP D9, D8, [X31 + 0xA0]
	0x01DEE0DC STR X29, [X31 + 0xB0]
	0x01DEE0E0 STP X30, X27, [X31 + 0xC0]
	0x01DEE0E4 STP X26, X25, [X31 + 0xD0]
	0x01DEE0E8 STP X24, X23, [X31 + 0xE0]
	0x01DEE0EC STP X22, X21, [X31 + 0xF0]
	0x01DEE0F0 STP X20, X19, [X31 + 0x100]
	0x01DEE0F4 ADRP X20, 0x25EA000
	0x01DEE0F8 LDRB W8, [X20 + 0xCD4]
	0x01DEE0FC MOV X19, X0
	0x01DEE100 TBNZ X8, 0x0, 0x1DEE184
	0x01DEE104 ADRP X0, 0x230A000
	0x01DEE108 LDR X0, [X0 + 0x120]
	0x01DEE10C BL 0x1C16CF4
	0x01DEE110 ADRP X0, 0x230B000
	0x01DEE114 LDR X0, [X0 + 0x28]
	0x01DEE118 BL 0x1C16CF4
	0x01DEE11C ADRP X0, 0x230B000
	0x01DEE120 LDR X0, [X0 + 0x30]
	0x01DEE124 BL 0x1C16CF4
	0x01DEE128 ADRP X0, 0x230B000
	0x01DEE12C LDR X0, [X0 + 0x38]
	0x01DEE130 BL 0x1C16CF4
	0x01DEE134 ADRP X0, 0x2305000
	0x01DEE138 LDR X0, [X0 + 0x5D8]
	0x01DEE13C BL 0x1C16CF4
	0x01DEE140 ADRP X0, 0x230B000
	0x01DEE144 LDR X0, [X0 + 0x40]
	0x01DEE148 BL 0x1C16CF4
	0x01DEE14C ADRP X0, 0x230A000
	0x01DEE150 LDR X0, [X0 + 0xC40]
	0x01DEE154 BL 0x1C16CF4
	0x01DEE158 ADRP X0, 0x2305000
	0x01DEE15C LDR X0, [X0 + 0x598]
	0x01DEE160 BL 0x1C16CF4
	0x01DEE164 ADRP X0, 0x230B000
	0x01DEE168 LDR X0, [X0 + 0x48]
	0x01DEE16C BL 0x1C16CF4
	0x01DEE170 ADRP X0, 0x230B000
	0x01DEE174 LDR X0, [X0 + 0x50]
	0x01DEE178 BL 0x1C16CF4
	0x01DEE17C MOVZ W8, 0x1
	0x01DEE180 STRB W8, [X20 + 0xCD4]
	0x01DEE184 MOVI V0.2D, 0x0
	0x01DEE188 STUR V0, [X31 + 0x5C]
	0x01DEE18C STP V0, V0, [X31 + 0x40]
	0x01DEE190 STR X31, [X31 + 0xB8]
	0x01DEE194 LDR X21, [X19 + 0x38]
	0x01DEE198 MOV X0, X19
	0x01DEE19C MOV X1, X31
	0x01DEE1A0 BL 0x3C32E90
	0x01DEE1A4 CBZ X0, 0x1DEE6B4
	0x01DEE1A8 MOV X1, X31
	0x01DEE1AC BL 0x3C3F58C
	0x01DEE1B0 MOV X0, X19
	0x01DEE1B4 MOV X1, X31
	0x01DEE1B8 MOV V8.16B, V0.16B
	0x01DEE1BC MOV V9.16B, V1.16B
	0x01DEE1C0 MOV V10.16B, V2.16B
	0x01DEE1C4 BL 0x3C32E90
	0x01DEE1C8 CBZ X0, 0x1DEE6B4
	0x01DEE1CC ADRP X22, 0x2305000
	0x01DEE1D0 ADRP X20, 0x230A000
	0x01DEE1D4 LDR X22, [X22 + 0x5D8]
	0x01DEE1D8 LDR X20, [X20 + 0xC40]
	0x01DEE1DC MOV X1, X31
	0x01DEE1E0 BL 0x3C3DEB4
	0x01DEE1E4 LDR X0, [X22]
	0x01DEE1E8 MOV V11.16B, V0.16B
	0x01DEE1EC MOV V12.16B, V1.16B
	0x01DEE1F0 MOV V13.16B, V2.16B
	0x01DEE1F4 LDR W8, [X0 + 0xE0]
	0x01DEE1F8 MOV V14.16B, V3.16B
	0x01DEE1FC CBNZ W8, 0x1DEE208
	0x01DEE200 BL 0x1C16DFC
	0x01DEE204 LDR X0, [X22]
	0x01DEE208 LDR X8, [X20]
	0x01DEE20C LDR X9, [X0 + 0xB8]
	0x01DEE210 ADD X20, X19, 0x48
	0x01DEE214 LDR W10, [X8 + 0xE0]
	0x01DEE218 LDR W22, [X9]
	0x01DEE21C CBNZ W10, 0x1DEE228
	0x01DEE220 MOV X0, X8
	0x01DEE224 BL 0x1C16DFC
	0x01DEE228 ADRP X8, 0xFFFFFFFFFECFC000
	0x01DEE22C LDR V7, [X8 + 0xBC]
	0x01DEE230 MOV X0, X20
	0x01DEE234 MOV X1, X21
	0x01DEE238 MOV V0.16B, V8.16B
	0x01DEE23C MOV V1.16B, V9.16B
	0x01DEE240 MOV V2.16B, V10.16B
	0x01DEE244 MOV V3.16B, V11.16B
	0x01DEE248 MOV V4.16B, V12.16B
	0x01DEE24C MOV V5.16B, V13.16B
	0x01DEE250 MOV V6.16B, V14.16B
	0x01DEE254 MOV X2, X22
	0x01DEE258 BL 0x1DEE6B8
	0x01DEE25C MOVI V0.2D, 0x0
	0x01DEE260 STUR V0, [X31 + 0x5C]
	0x01DEE264 STP V0, V0, [X31 + 0x40]
	0x01DEE268 LDR X21, [X20]
	0x01DEE26C CBZ X21, 0x1DEE6B4
	0x01DEE270 LDR W24, [X21 + 0x18]
	0x01DEE274 CMP W24, 0x1
	0x01DEE278 B.LT 0x1DEE340
	0x01DEE27C ADRP X25, 0x230B000
	0x01DEE280 LDR X25, [X25 + 0x50]
	0x01DEE284 LDR X0, [X25]
	0x01DEE288 LDR W8, [X0 + 0xE0]
	0x01DEE28C CBNZ W8, 0x1DEE298
	0x01DEE290 BL 0x1C16DFC
	0x01DEE294 LDR X0, [X25]
	0x01DEE298 LDR X8, [X0 + 0xB8]
	0x01DEE29C ADRP X27, 0x230B000
	0x01DEE2A0 ADRP X26, 0x230B000
	0x01DEE2A4 LDR X22, [X8 + 0x8]
	0x01DEE2A8 LDR X27, [X27 + 0x30]
	0x01DEE2AC LDR X26, [X26 + 0x28]
	0x01DEE2B0 CBNZ X22, 0x1DEE304
	0x01DEE2B4 LDR W8, [X0 + 0xE0]
	0x01DEE2B8 CBNZ W8, 0x1DEE2C4
	0x01DEE2BC BL 0x1C16DFC
	0x01DEE2C0 LDR X0, [X25]
	0x01DEE2C4 ADRP X9, 0x230B000
	0x01DEE2C8 LDR X8, [X0 + 0xB8]
	0x01DEE2CC LDR X9, [X9 + 0x38]
	0x01DEE2D0 LDR X23, [X8]
	0x01DEE2D4 LDR X0, [X9]
	0x01DEE2D8 BL 0x1C16F10
	0x01DEE2DC ADRP X8, 0x230B000
	0x01DEE2E0 LDR X8, [X8 + 0x48]
	0x01DEE2E4 MOV X1, X23
	0x01DEE2E8 MOV X3, X31
	0x01DEE2EC MOV X22, X0
	0x01DEE2F0 LDR X2, [X8]
	0x01DEE2F4 BL 0x2D324EC
	0x01DEE2F8 LDR X8, [X25]
	0x01DEE2FC LDR X8, [X8 + 0xB8]
	0x01DEE300 STR X22, [X8 + 0x8]
	0x01DEE304 LDR X2, [X27]
	0x01DEE308 MOV X0, X21
	0x01DEE30C MOV X1, X22
	0x01DEE310 BL 0x21C9D0C
	0x01DEE314 LDR X1, [X26]
	0x01DEE318 ADD X8, X31, 0x10
	0x01DEE31C BL 0x21C3424
	0x01DEE320 LDP V0, V1, [X31 + 0x10]
	0x01DEE324 LDUR V2, [X31 + 0x2C]
	0x01DEE328 ADD X0, X31, 0x40
	0x01DEE32C MOV X1, X31
	0x01DEE330 STP V0, V1, [X31 + 0x40]
	0x01DEE334 STUR V2, [X31 + 0x5C]
	0x01DEE338 BL 0x3C8E66C
	0x01DEE33C B 0x1DEE358
	0x01DEE340 LDR X0, [X19 + 0x28]
	0x01DEE344 CBZ X0, 0x1DEE6B4
	0x01DEE348 LDP S1, S2, [X19 + 0x54]
	0x01DEE34C LDR V0, [X19 + 0x50]
	0x01DEE350 MOV X1, X31
	0x01DEE354 BL 0x3C3DE4C
	0x01DEE358 LDR X0, [X19 + 0x20]
	0x01DEE35C STP S0, S1, [X19 + 0x5C]
	0x01DEE360 STR S2, [X19 + 0x64]
	0x01DEE364 CBZ X0, 0x1DEE6B4
	0x01DEE368 MOV X1, X31
	0x01DEE36C BL 0x3C3F58C
	0x01DEE370 MOV V8.16B, V0.16B
	0x01DEE374 MOV V9.16B, V1.16B
	0x01DEE378 MOV V10.16B, V2.16B
	0x01DEE37C LDP S0, S1, [X19 + 0x5C]
	0x01DEE380 LDR V2, [X19 + 0x64]
	0x01DEE384 MOV X0, X31
	0x01DEE388 FSUB S11, S0, S8
	0x01DEE38C FSUB S12, S1, S9
	0x01DEE390 FSUB S13, S2, S10
	0x01DEE394 BL 0x3C3C714
	0x01DEE398 FMUL S1, S11, S0
	0x01DEE39C FMUL S2, S12, S0
	0x01DEE3A0 FMUL S0, S13, S0
	0x01DEE3A4 FMOV S3, 7
	0x01DEE3A8 FMUL S1, S1, S3
	0x01DEE3AC FMUL S2, S2, S3
	0x01DEE3B0 FMUL S0, S0, S3
	0x01DEE3B4 MOV X0, X19
	0x01DEE3B8 FADD S8, S8, S1
	0x01DEE3BC FADD S9, S9, S2
	0x01DEE3C0 FADD S10, S10, S0
	0x01DEE3C4 BL 0x1DEE07C
	0x01DEE3C8 ADRP X21, 0x25EA000
	0x01DEE3CC LDRB W8, [X21 + 0x785]
	0x01DEE3D0 MOV V11.16B, V0.16B
	0x01DEE3D4 MOV V12.16B, V1.16B
	0x01DEE3D8 MOV V13.16B, V2.16B
	0x01DEE3DC CBNZ W8, 0x1DEE3F4
	0x01DEE3E0 ADRP X0, 0x2305000
	0x01DEE3E4 LDR X0, [X0 + 0x5A8]
	0x01DEE3E8 BL 0x1C16CF4
	0x01DEE3EC MOVZ W8, 0x1
	0x01DEE3F0 STRB W8, [X21 + 0x785]
	0x01DEE3F4 ADRP X21, 0x2305000
	0x01DEE3F8 LDR X21, [X21 + 0x5A8]
	0x01DEE3FC FSUB S11, S8, S11
	0x01DEE400 FSUB S12, S9, S12
	0x01DEE404 FSUB S13, S10, S13
	0x01DEE408 LDR X0, [X21]
	0x01DEE40C LDR W8, [X0 + 0xE0]
	0x01DEE410 CBNZ W8, 0x1DEE418
	0x01DEE414 BL 0x1C16DFC
	0x01DEE418 FMUL S0, S11, S11
	0x01DEE41C FMUL S1, S12, S12
	0x01DEE420 LDR V2, [X19 + 0x30]
	0x01DEE424 FADD S0, S0, S1
	0x01DEE428 FMUL S1, S13, S13
	0x01DEE42C FADD S0, S1, S0
	0x01DEE430 FSQRT S14, S0
	0x01DEE434 FCMP S14, S2
	0x01DEE438 B.LE 0x1DEE46C
	0x01DEE43C MOV X0, X19
	0x01DEE440 BL 0x1DEE07C
	0x01DEE444 LDR V3, [X19 + 0x30]
	0x01DEE448 FDIV S4, S11, S14
	0x01DEE44C FDIV S5, S12, S14
	0x01DEE450 FDIV S6, S13, S14
	0x01DEE454 FMUL S4, S4, S3
	0x01DEE458 FMUL S5, S5, S3
	0x01DEE45C FMUL S3, S6, S3
	0x01DEE460 FADD S8, S0, S4
	0x01DEE464 FADD S9, S1, S5
	0x01DEE468 FADD S10, S2, S3
	0x01DEE46C LDR X8, [X20]
	0x01DEE470 CBZ X8, 0x1DEE6B4
	0x01DEE474 LDR W8, [X8 + 0x18]
	0x01DEE478 CMP W8, 0x1
	0x01DEE47C B.LT 0x1DEE510
	0x01DEE480 MOV X0, X19
	0x01DEE484 STP S10, S9, [X31 + 0x8]
	0x01DEE488 MOV V10.16B, V8.16B
	0x01DEE48C BL 0x1DEE07C
	0x01DEE490 ADRP X20, 0x25EA000
	0x01DEE494 LDP S15, S8, [X19 + 0x5C]
	0x01DEE498 LDRB W8, [X20 + 0x85C]
	0x01DEE49C LDR V9, [X19 + 0x64]
	0x01DEE4A0 MOV V11.16B, V0.16B
	0x01DEE4A4 MOV V12.16B, V1.16B
	0x01DEE4A8 MOV V13.16B, V2.16B
	0x01DEE4AC CBNZ W8, 0x1DEE4C4
	0x01DEE4B0 ADRP X0, 0x2305000
	0x01DEE4B4 LDR X0, [X0 + 0x5A8]
	0x01DEE4B8 BL 0x1C16CF4
	0x01DEE4BC MOVZ W8, 0x1
	0x01DEE4C0 STRB W8, [X20 + 0x85C]
	0x01DEE4C4 LDR X0, [X21]
	0x01DEE4C8 FSUB S15, S11, S15
	0x01DEE4CC FSUB S11, S12, S8
	0x01DEE4D0 FSUB S8, S13, S9
	0x01DEE4D4 LDR W8, [X0 + 0xE0]
	0x01DEE4D8 CBNZ W8, 0x1DEE4E0
	0x01DEE4DC BL 0x1C16DFC
	0x01DEE4E0 FMUL S0, S15, S15
	0x01DEE4E4 FMUL S1, S11, S11
	0x01DEE4E8 FADD S0, S0, S1
	0x01DEE4EC FMUL S1, S8, S8
	0x01DEE4F0 MOV V8.16B, V10.16B
	0x01DEE4F4 LDP S10, S9, [X31 + 0x8]
	0x01DEE4F8 FADD S0, S1, S0
	0x01DEE4FC FSQRT S0, S0
	0x01DEE500 FCMP S14, S0
	0x01DEE504 B.LE 0x1DEE510
	0x01DEE508 LDP S8, S9, [X19 + 0x5C]
	0x01DEE50C LDR V10, [X19 + 0x64]
	0x01DEE510 CMP W24, 0x1
	0x01DEE514 B.LT 0x1DEE668
	0x01DEE518 LDP S0, S1, [X19 + 0x5C]
	0x01DEE51C LDR V2, [X19 + 0x64]
	0x01DEE520 ADRP X8, 0xFFFFFFFFFECFC000
	0x01DEE524 LDR V3, [X8 + 0x288]
	0x01DEE528 FSUB S4, S8, S0
	0x01DEE52C FSUB S5, S9, S1
	0x01DEE530 FSUB S6, S10, S2
	0x01DEE534 FMUL S4, S4, S4
	0x01DEE538 FMUL S5, S5, S5
	0x01DEE53C FADD S4, S4, S5
	0x01DEE540 FMUL S5, S6, S6
	0x01DEE544 FADD S4, S5, S4
	0x01DEE548 FCMP S4, S3
	0x01DEE54C B.PL 0x1DEE668
	0x01DEE550 LDP S3, S4, [X19 + 0x68]
	0x01DEE554 LDR V5, [X19 + 0x70]
	0x01DEE558 FSUB S0, S3, S0
	0x01DEE55C FSUB S1, S4, S1
	0x01DEE560 FSUB S2, S5, S2
	0x01DEE564 FMUL S0, S0, S0
	0x01DEE568 FMUL S1, S1, S1
	0x01DEE56C FMUL S2, S2, S2
	0x01DEE570 FADD S0, S0, S1
	0x01DEE574 FADD S0, S2, S0
	0x01DEE578 FMOV S1, 0.25
	0x01DEE57C FCMP S0, S1
	0x01DEE580 B.LE 0x1DEE668
	0x01DEE584 LDUR X8, [X19 + 0x5C]
	0x01DEE588 LDR W9, [X19 + 0x64]
	0x01DEE58C LDR X20, [X19 + 0x40]
	0x01DEE590 ADD X0, X31, 0x40
	0x01DEE594 MOV X1, X31
	0x01DEE598 STR X8, [X19 + 0x68]
	0x01DEE59C STR W9, [X19 + 0x70]
	0x01DEE5A0 BL 0x3C8E5C0
	0x01DEE5A4 CBZ X0, 0x1DEE6B4
	0x01DEE5A8 ADRP X8, 0x230A000
	0x01DEE5AC LDR X8, [X8 + 0x120]
	0x01DEE5B0 ADD X1, X31, 0xB8
	0x01DEE5B4 LDR X2, [X8]
	0x01DEE5B8 BL 0x21A4990
	0x01DEE5BC TBZ X0, 0x0, 0x1DEE644
	0x01DEE5C0 LDR X8, [X31 + 0xB8]
	0x01DEE5C4 CBZ X8, 0x1DEE6B4
	0x01DEE5C8 ADRP X22, 0x2305000
	0x01DEE5CC LDR X22, [X22 + 0x598]
	0x01DEE5D0 LDR X21, [X8 + 0x20]
	0x01DEE5D4 LDR X0, [X22]
	0x01DEE5D8 LDR W9, [X0 + 0xE0]
	0x01DEE5DC CBNZ W9, 0x1DEE5E4
	0x01DEE5E0 BL 0x1C16DFC
	0x01DEE5E4 MOV X0, X21
	0x01DEE5E8 MOV X1, X31
	0x01DEE5EC MOV X2, X31
	0x01DEE5F0 BL 0x3C354F8
	0x01DEE5F4 TBZ X0, 0x0, 0x1DEE644
	0x01DEE5F8 LDR X8, [X31 + 0xB8]
	0x01DEE5FC CBZ X8, 0x1DEE6B4
	0x01DEE600 LDR X8, [X8 + 0x20]
	0x01DEE604 CBZ X8, 0x1DEE6B4
	0x01DEE608 LDR X0, [X22]
	0x01DEE60C LDR X21, [X8 + 0x20]
	0x01DEE610 LDR W9, [X0 + 0xE0]
	0x01DEE614 CBNZ W9, 0x1DEE61C
	0x01DEE618 BL 0x1C16DFC
	0x01DEE61C MOV X0, X21
	0x01DEE620 MOV X1, X31
	0x01DEE624 MOV X2, X31
	0x01DEE628 BL 0x3C354F8
	0x01DEE62C TBZ X0, 0x0, 0x1DEE644
	0x01DEE630 LDR X8, [X31 + 0xB8]
	0x01DEE634 CBZ X8, 0x1DEE6B4
	0x01DEE638 LDR X8, [X8 + 0x20]
	0x01DEE63C CBZ X8, 0x1DEE6B4
	0x01DEE640 LDR X20, [X8 + 0x20]
	0x01DEE644 CBZ X20, 0x1DEE6B4
	0x01DEE648 ADRP X8, 0xFFFFFFFFFECFC000
	0x01DEE64C LDP S1, S2, [X19 + 0x60]
	0x01DEE650 LDR V0, [X19 + 0x5C]
	0x01DEE654 LDR V3, [X8 + 0x30C]
	0x01DEE658 MOV X0, X20
	0x01DEE65C MOV W1, W31
	0x01DEE660 MOV X2, X31
	0x01DEE664 BL 0x1DD0FA8
	0x01DEE668 LDR X0, [X19 + 0x20]
	0x01DEE66C CBZ X0, 0x1DEE6B4
	0x01DEE670 MOV V0.16B, V8.16B
	0x01DEE674 MOV V1.16B, V9.16B
	0x01DEE678 MOV V2.16B, V10.16B
	0x01DEE67C MOV X1, X31
	0x01DEE680 BL 0x3C3F62C
	0x01DEE684 LDP X20, X19, [X31 + 0x100]
	0x01DEE688 LDP X22, X21, [X31 + 0xF0]
	0x01DEE68C LDP X24, X23, [X31 + 0xE0]
	0x01DEE690 LDP X26, X25, [X31 + 0xD0]
	0x01DEE694 LDP X30, X27, [X31 + 0xC0]
	0x01DEE698 LDR X29, [X31 + 0xB0]
	0x01DEE69C LDP D9, D8, [X31 + 0xA0]
	0x01DEE6A0 LDP D11, D10, [X31 + 0x90]
	0x01DEE6A4 LDP D13, D12, [X31 + 0x80]
	0x01DEE6A8 LDP D15, D14, [X31 + 0x70]
	0x01DEE6AC ADD X31, X31, 0x110
	0x01DEE6B0 RET

ISIL:
	001 Subtract X31, X31, 368
	002 Move [X31+208], D15
	003 Move [X31+216], D14
	004 Move [X31+224], D13
	005 Move [X31+232], D12
	006 Move [X31+240], D11
	007 Move [X31+248], D10
	008 Move [X31+256], D9
	009 Move [X31+264], D8
	010 Move [X31+272], X29
	011 Move [X31+280], X30
	012 Move [X31+288], X28
	013 Move [X31+296], X27
	014 Move [X31+304], X26
	015 Move [X31+312], X25
	016 Move [X31+320], X24
	017 Move [X31+328], X23
	018 Move [X31+336], X22
	019 Move [X31+344], X21
	020 Move [X31+352], X20
	021 Move [X31+360], X19
	022 Move X20, 0x25EC000
	023 Move W8, [X20+3276]
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {52}
	029 Move X0, 0x2307000
	030 Move X0, [X0+1496]
	031 Call 0x1C17CF4
	032 Move X0, 0x230C000
	033 Move X0, [X0+4040]
	034 Call 0x1C17CF4
	035 Move X0, 0x230C000
	036 Move X0, [X0+4048]
	037 Call 0x1C17CF4
	038 Move X0, 0x230C000
	039 Move X0, [X0+4080]
	040 Call 0x1C17CF4
	041 Move X0, 0x2307000
	042 Move X0, [X0+1432]
	043 Call 0x1C17CF4
	044 Move X0, 0x2307000
	045 Move X0, [X0+1528]
	046 Call 0x1C17CF4
	047 Move X0, 0x230C000
	048 Move X0, [X0+4088]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X20+3276], W8
	052 NotImplemented "Instruction MOVI not yet implemented."
	053 Move X0, X19
	054 Move [X31+200], W31
	055 Move [X31+112], X31
	056 Move [X31+120], X31
	057 Move [X31+172], V0
	058 Move [X31+144], V0
	059 Move [X31+152], V0
	060 Move [X31+128], X31
	061 Call CystController.get_isDie, X0
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {94}
	066 Move X0, X19
	067 Call CystController.get_respawnTimer, X0
	068 Move [X31+200], W0
	069 Move X1, [X19+56]
	070 Add X0, X31, 200
	071 Move X2, X31
	072 Call TickTimer.ExpiredOrNotRunning, X0, X1
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {667}
	077 Move W1, 100
	078 Move X0, X19
	079 Call CystController.set_health, X0, X1
	080 Move X0, [X19+128]
	081 Compare X0, 0
	082 JumpIfEqual {1105}
	083 Move W1, 1
	084 Move X2, X31
	085 Call GameObject.SetActive, X0, X1
	086 Move X0, X19
	087 Move W1, W31
	088 Call CystController.set_isDie, X0, X1
	089 Move X0, X31
	090 Call TickTimer.get_None
	091 And X1, X0, 0
	092 Move X0, X19
	093 Call CystController.set_respawnTimer, X0, X1
	094 Move X0, [X19+56]
	095 Compare X0, 0
	096 JumpIfEqual {1105}
	097 Move X20, 0x2307000
	098 Move X20, [X20+1432]
	099 Move X1, X31
	100 Call NetworkRunner.get_DeltaTime, X0
	101 Move X0, X19
	102 Move [X31+20], S0
	103 Call CystController.get_target, X0
	104 Move X8, [X20]
	105 Move X20, X0
	106 Move W9, [X8+224]
	107 Compare W9, 0
	108 JumpIfNotEqual {111}
	109 Move X0, X8
	110 Call 0x1C17DFC
	111 Move X0, X20
	112 Move X1, X31
	113 Move X2, X31
	114 Call Object.op_Equality, X0, X1
	115 Move X20, 0x2307000
	116 Move X21, 0x2307000
	117 Move X20, [X20+1440]
	118 Move X21, [X21+1448]
	119 Move X24, 0x25EC000
	120 Move X25, 0x25EC000
	121 Move TEMP, X0
	122 And TEMP, TEMP, 1
	123 Compare TEMP, 1
	124 JumpIfNotEqual {153}
	125 Move X0, [X19+144]
	126 Compare X0, 0
	127 JumpIfEqual {1105}
	128 Move X1, X31
	129 Call Transform.get_localPosition, X0
	130 Multiply S0, S0, S0
	131 Multiply S1, S1, S1
	132 Move X8, -19931136
	133 Add S0, S0, S1
	134 Move V1, [X8+1040]
	135 Move X22, [X19+144]
	136 Multiply S2, S2, S2
	137 Add S0, S2, S0
	138 NotImplemented "Instruction FCMP not yet implemented."
	139 Move W8, [X24+1923]
	140 Compare W8, 0
	141 JumpIfNotEqual {147}
	142 Move X0, 0x2307000
	143 Move X0, [X0+1440]
	144 Call 0x1C17CF4
	145 Move W8, 1
	146 Move [X24+1923], W8
	147 Compare X22, 0
	148 JumpIfEqual {1105}
	149 Move X8, [X20]
	150 Move X8, [X8+184]
	151 Move V2, [X8+8]
	152 Move V0, [X8]
	153 Move X0, X19
	154 Call CystController.get_attackTimer, X0
	155 Move V1, [X31+20]
	156 Move X0, X19
	157 Add S0, S1, S0
	158 Call CystController.set_attackTimer, X0, V0
	159 Move X0, X19
	160 Call CystController.get_attackTimer, X0
	161 Move S1, 2
	162 NotImplemented "Instruction FCMP not yet implemented."
	163 Move X22, [X19+144]
	164 Compare X22, 0
	165 JumpIfEqual {1105}
	166 Move X0, X22
	167 Move X1, X31
	168 Call Transform.get_localPosition, X0
	169 Move V3, [X31+20]
	170 Move S4, 1
	171 Move S5, W31
	172 Move S6, 0.5
	173 Add S3, S3, S3
	174 NotImplemented "Instruction FMIN not yet implemented."
	175 NotImplemented "Instruction FCMP not yet implemented."
	176 Subtract S3, S5, S0
	177 NotImplemented "Instruction FCSEL not yet implemented."
	178 Subtract S5, S5, S1
	179 Subtract S6, S6, S2
	180 Multiply S3, S4, S3
	181 Multiply S5, S4, S5
	182 Multiply S4, S4, S6
	183 Add S0, S0, S3
	184 Add S1, S1, S5
	185 Add S2, S2, S4
	186 Move X0, X22
	187 Move X1, X31
	188 Call Transform.set_localPosition, X0, X1
	189 Move X0, X19
	190 Call CystController.get_target, X0
	191 Compare X0, 0
	192 JumpIfEqual {1105}
	193 Move X1, X31
	194 Call Component.get_transform, X0
	195 Compare X0, 0
	196 JumpIfEqual {1105}
	197 Move X1, X31
	198 Call Transform.get_position, X0
	199 Move X0, X19
	200 Move X1, X31
	201 Move V9, V0
	202 Move V10, V1
	203 Move V11, V2
	204 Call Component.get_transform, X0
	205 Compare X0, 0
	206 JumpIfEqual {1105}
	207 Move X1, X31
	208 Call Transform.get_position, X0
	209 Subtract S0, S9, S0
	210 Subtract S1, S10, S1
	211 Subtract S2, S11, S2
	212 Move X0, X31
	213 Call Quaternion.LookRotation, X0
	214 Move X22, [X19+136]
	215 Compare X22, 0
	216 JumpIfEqual {1105}
	217 Move X0, X22
	218 Move X1, X31
	219 Move V9, V0
	220 Move V10, V1
	221 Move V11, V2
	222 Move V12, V3
	223 Call Transform.get_rotation, X0
	224 Move X0, X19
	225 Move V13, V0
	226 Move V14, V1
	227 Move V15, V2
	228 Move V8, V3
	229 Call CystController.get_attackTimer, X0
	230 Move V2, [X31+20]
	231 Move S1, 4
	232 Move V3, V8
	233 Move V4, V9
	234 Multiply S1, S2, S1
	235 Multiply S0, S1, S0
	236 Move [X31], S0
	237 Move V0, V13
	238 Move V1, V14
	239 Move V2, V15
	240 Move V5, V10
	241 Move V6, V11
	242 Move V7, V12
	243 Move X0, X31
	244 Call Quaternion.Lerp, X0, X1, V0
	245 Move X0, X22
	246 Move X1, X31
	247 Call Transform.set_rotation, X0, X1
	248 Compare X22, 0
	249 JumpIfEqual {1105}
	250 Move X0, X22
	251 Move X1, X31
	252 Call Transform.get_localPosition, X0
	253 Move W8, [X24+1923]
	254 Move V9, V2
	255 Compare W8, 0
	256 JumpIfNotEqual {266}
	257 Move X0, 0x2307000
	258 Move X0, [X0+1440]
	259 Move [X31+32], V1
	260 Move [X31+40], V0
	261 Call 0x1C17CF4
	262 Move V1, [X31+32]
	263 Move V0, [X31+48]
	264 Move W8, 1
	265 Move [X24+1923], W8
	266 Move X8, [X20]
	267 Move V4, [X31+20]
	268 Move S5, 1
	269 Move S6, W31
	270 Move X8, [X8+184]
	271 NotImplemented "Instruction FCMP not yet implemented."
	272 Move V0.S[1], V1.S[0]
	273 NotImplemented "Instruction FMIN not yet implemented."
	274 Move V2, [X8]
	275 Move V3, [X8+8]
	276 NotImplemented "Instruction FCSEL not yet implemented."
	277 Subtract V1, V2, V0
	278 Subtract S2, S3, S9
	279 NotImplemented "Instruction INVALID not yet implemented."
	280 Multiply S2, S4, S2
	281 Add V0, V0, V1
	282 Add S2, S9, S2
	283 Move S1, V0.S[1]
	284 Move X0, X22
	285 Move X1, X31
	286 Call Transform.set_localPosition, X0, X1
	287 Move X0, [X19+136]
	288 Compare X0, 0
	289 JumpIfEqual {1105}
	290 Move X1, X31
	291 Call Transform.get_forward, X0
	292 Move X22, 0x25EC000
	293 Move W8, [X22+1926]
	294 Move V9, V0
	295 Move V10, V1
	296 Move V11, V2
	297 Compare W8, 0
	298 JumpIfNotEqual {304}
	299 Move X0, 0x2307000
	300 Move X0, [X0+1440]
	301 Call 0x1C17CF4
	302 Move W8, 1
	303 Move [X22+1926], W8
	304 Move X8, [X20]
	305 Move X9, -19931136
	306 Move V3, [X9+104]
	307 Move X22, [X19+136]
	308 Move X8, [X8+184]
	309 Move S0, [X8+24]
	310 Move S1, [X8+28]
	311 Move V2, [X8+32]
	312 Multiply S0, S9, S0
	313 Multiply S1, S10, S1
	314 Multiply S2, S11, S2
	315 Add S0, S0, S1
	316 Add S0, S2, S0
	317 NotImplemented "Instruction FCMP not yet implemented."
	318 Move X8, -19931136
	319 Move V0, [X8+440]
	320 Move S1, W31
	321 Move S2, W31
	322 Move X0, X31
	323 Call Quaternion.Internal_FromEulerRad, X0
	324 Compare X22, 0
	325 JumpIfNotEqual {425}
	326 Move X0, X19
	327 Call CystController.get_attacked, X0
	328 Move TEMP, X0
	329 And TEMP, TEMP, 1
	330 Compare TEMP, 1
	331 JumpIfEqual {1002}
	332 Move W1, 1
	333 Move X0, X19
	334 Call CystController.set_attacked, X0, X1
	335 Move X0, X19
	336 Move X1, X31
	337 Call Component.get_transform, X0
	338 Compare X0, 0
	339 JumpIfEqual {1105}
	340 Move X1, X31
	341 Call Transform.get_position, X0
	342 Move X0, X19
	343 Move V8, V0
	344 Move V11, V1
	345 Move V10, V2
	346 Call CystController.get_target, X0
	347 Compare X0, 0
	348 JumpIfEqual {1105}
	349 Move X1, X31
	350 Call Component.get_transform, X0
	351 Compare X0, 0
	352 JumpIfEqual {1105}
	353 Move X1, X31
	354 Move [X31+48], S10
	355 Call Transform.get_position, X0
	356 Move X0, X19
	357 Move X1, X31
	358 Move V12, V0
	359 Move V13, V1
	360 Move V14, V2
	361 Call Component.get_transform, X0
	362 Compare X0, 0
	363 JumpIfEqual {1105}
	364 Move X1, X31
	365 Call Transform.get_position, X0
	366 Move X23, 0x25EC000
	367 Move W8, [X23+1925]
	368 Move V15, V0
	369 Move V9, V1
	370 Move V10, V2
	371 Compare W8, 0
	372 JumpIfNotEqual {378}
	373 Move X0, 0x2307000
	374 Move X0, [X0+1448]
	375 Call 0x1C17CF4
	376 Move W8, 1
	377 Move [X23+1925], W8
	378 Move X0, [X21]
	379 Subtract S15, S12, S15
	380 Subtract S13, S13, S9
	381 Subtract S12, S14, S10
	382 Move W8, [X0+224]
	383 Compare W8, 0
	384 JumpIfNotEqual {386}
	385 Call 0x1C17DFC
	386 Move X8, -19931136
	387 Multiply S0, S15, S15
	388 Multiply S1, S13, S13
	389 Move V14, [X8+380]
	390 Add S0, S0, S1
	391 Multiply S1, S12, S12
	392 Add S0, S1, S0
	393 NotImplemented "Instruction FSQRT not yet implemented."
	394 NotImplemented "Instruction FCMP not yet implemented."
	395 NotImplemented "Instruction FDIV not yet implemented."
	396 NotImplemented "Instruction FDIV not yet implemented."
	397 NotImplemented "Instruction FDIV not yet implemented."
	398 Compare X22, 0
	399 JumpIfEqual {1105}
	400 Move X0, X22
	401 Move X1, X31
	402 Call Transform.get_rotation, X0
	403 Move X8, -19931136
	404 Move V9, V0
	405 Move V0, [X8+440]
	406 Move V10, V1
	407 Move V11, V2
	408 Move S1, W31
	409 Move S2, W31
	410 Move X0, X31
	411 Move V12, V3
	412 Call Quaternion.Internal_FromEulerRad, X0
	413 Move V4, V0
	414 Move V0, [X31+20]
	415 Move V5, V1
	416 Move V6, V2
	417 Move V7, V3
	418 Move [X31], S0
	419 Move V0, V9
	420 Move V1, V10
	421 Move V2, V11
	422 Move V3, V12
	423 Move X0, X31
	424 Call Quaternion.Lerp, X0, X1, V0
	425 Move X0, X22
	426 Move X1, X31
	427 Call Transform.set_rotation, X0, X1
	428 Move X0, [X19+152]
	429 Compare X0, 0
	430 JumpIfEqual {1105}
	431 Move X1, X31
	432 Call Transform.get_localScale, X0
	433 Move X8, -19931136
	434 Move V0, [X8+816]
	435 Move X22, [X19+152]
	436 NotImplemented "Instruction FCMP not yet implemented."
	437 Compare X22, 0
	438 JumpIfEqual {1105}
	439 Move S0, 1
	440 Move S1, 1
	441 Move S2, W31
	442 Compare X22, 0
	443 JumpIfEqual {1105}
	444 Move X0, X22
	445 Move X1, X31
	446 Call Transform.get_localScale, X0
	447 Move V6, [X31+20]
	448 Move S3, 12
	449 Move S4, 1
	450 Move S5, W31
	451 Multiply S3, S6, S3
	452 NotImplemented "Instruction FCMP not yet implemented."
	453 NotImplemented "Instruction FMIN not yet implemented."
	454 Subtract S6, S4, S0
	455 Subtract S4, S4, S1
	456 NotImplemented "Instruction FCSEL not yet implemented."
	457 Subtract S5, S5, S2
	458 Multiply S6, S3, S6
	459 Multiply S4, S3, S4
	460 Multiply S3, S3, S5
	461 Add S0, S0, S6
	462 Add S1, S1, S4
	463 Add S2, S2, S3
	464 Move X0, X22
	465 Move X1, X31
	466 Call Transform.set_localScale, X0, X1
	467 Move X0, [X19+216]
	468 Compare X0, 0
	469 JumpIfEqual {1105}
	470 Move X8, -19935232
	471 Move V3, [X8+3872]
	472 Move X26, 0x230C000
	473 Move X27, 0x230C000
	474 Move X26, [X26+4048]
	475 Move X27, [X27+4080]
	476 Move [X31+48], S3
	477 Move V3, [X31+20]
	478 Move X8, -19931136
	479 Move S0, 9
	480 Move V5, [X8+188]
	481 Move S1, 1
	482 Move S2, 8
	483 Multiply S0, S3, S0
	484 Move S4, W31
	485 Multiply S2, S3, S2
	486 NotImplemented "Instruction FCMP not yet implemented."
	487 NotImplemented "Instruction FMIN not yet implemented."
	488 NotImplemented "Instruction FMIN not yet implemented."
	489 NotImplemented "Instruction FCSEL not yet implemented."
	490 NotImplemented "Instruction FCMP not yet implemented."
	491 Move [X31+28], S0
	492 Move [X31+36], S5
	493 NotImplemented "Instruction FCSEL not yet implemented."
	494 Move W22, W31
	495 Move W28, 1
	496 Move [X31+24], S0
	497 Move W8, [X0+24]
	498 NotImplemented "Instruction CMP not yet implemented."
	499 Move X2, [X26]
	500 Move W1, W22
	501 Call List`1<Object>.get_Item, X0, X1
	502 Compare X0, 0
	503 JumpIfEqual {1105}
	504 Move X1, X31
	505 Call Component.get_transform, X0
	506 Move X23, X0
	507 Add X8, X31, 64
	508 Move X0, X19
	509 Call CystController.get_tetherAttachmentPoints, X0
	510 Move V0, [X31+4]
	511 Move X8, [X31+80]
	512 Move X2, [X27]
	513 Add X0, X31, 112
	514 Move W1, W22
	515 Move [X31+7], V0
	516 Move [X31+128], X8
	517 Call NetworkArray`1<Vector3>.Get, X0, X1
	518 Move W8, [X24+1923]
	519 Move V9, V0
	520 Move V10, V1
	521 Move V11, V2
	522 Compare W8, 0
	523 JumpIfNotEqual {527}
	524 Move X0, X20
	525 Call 0x1C17CF4
	526 Move [X24+1923], W28
	527 Compare X23, 0
	528 JumpIfEqual {1105}
	529 Move X8, [X20]
	530 Move X0, X23
	531 Move X1, X31
	532 Move X8, [X8+184]
	533 Move S0, [X8]
	534 Move S1, [X8+4]
	535 Move V2, [X8+8]
	536 Subtract S0, S9, S0
	537 Subtract S1, S10, S1
	538 Subtract S2, S11, S2
	539 Multiply S0, S0, S0
	540 Multiply S1, S1, S1
	541 Multiply S2, S2, S2
	542 Add S0, S0, S1
	543 Add S8, S2, S0
	544 Call Transform.get_localScale, X0
	545 Move V14, V0
	546 Move V0, [X31+48]
	547 Move V13, V1
	548 Move V12, V2
	549 NotImplemented "Instruction FCMP not yet implemented."
	550 Move S0, 3
	551 Subtract S15, S0, S14
	552 Subtract S8, S0, S1
	553 Move V3, [X31+24]
	554 Move S2, W31
	555 Subtract S2, S2, S12
	556 Move X0, X23
	557 Multiply S0, S3, S15
	558 Multiply S1, S3, S8
	559 Multiply S2, S3, S2
	560 Add S0, S14, S0
	561 Add S1, S13, S1
	562 Add S2, S12, S2
	563 Move X1, X31
	564 Call Transform.set_localScale, X0, X1
	565 Move W8, [X25+1924]
	566 Compare W8, 0
	567 JumpIfNotEqual {571}
	568 Move X0, X21
	569 Call 0x1C17CF4
	570 Move [X25+1924], W28
	571 Move X0, [X21]
	572 Move W8, [X0+224]
	573 Compare W8, 0
	574 JumpIfNotEqual {576}
	575 Call 0x1C17DFC
	576 Multiply S0, S9, S9
	577 Multiply S1, S10, S10
	578 Multiply S2, S11, S11
	579 Add S1, S0, S1
	580 Add S1, S2, S1
	581 Move V2, [X31+32]
	582 Move V5, [X31+28]
	583 NotImplemented "Instruction FSQRT not yet implemented."
	584 Move X0, X23
	585 Add S2, S1, S2
	586 Subtract S2, S2, S12
	587 Multiply S3, S5, S15
	588 Multiply S4, S5, S8
	589 Multiply S2, S5, S2
	590 Add S0, S14, S3
	591 Add S1, S13, S4
	592 Add S2, S12, S2
	593 Move X1, X31
	594 Call Transform.set_localScale, X0, X1
	595 Move V0, V9
	596 Move V1, V10
	597 Move V2, V11
	598 Move X0, X31
	599 Call Quaternion.LookRotation, X0
	600 Move X0, X23
	601 Move X1, X31
	602 Call Transform.set_localRotation, X0, X1
	603 Move X0, [X19+216]
	604 Add W22, W22, 1
	605 Compare X0, 0
	606 JumpIfNotEqual {497}
	607 Move V0, [X19+272]
	608 Move V1, [X31+20]
	609 Subtract S0, S0, S1
	610 NotImplemented "Instruction FCMP not yet implemented."
	611 Move [X19+272], S0
	612 Move W9, 0x40000000
	613 NotImplemented "Instruction CMP not yet implemented."
	614 Move [X19+272], W9
	615 Move W21, W31
	616 Move W22, 1
	617 Add X8, X31, 64
	618 Move X0, X19
	619 Call CystController.get_tetherAttachmentPoints, X0
	620 Move V0, [X31+4]
	621 Move X8, [X31+80]
	622 Move X2, [X27]
	623 Add X0, X31, 112
	624 Move W1, W21
	625 Move [X31+7], V0
	626 Move [X31+128], X8
	627 Call NetworkArray`1<Vector3>.Get, X0, X1
	628 Move W8, [X24+1923]
	629 Move V8, V0
	630 Move V9, V1
	631 Move V10, V2
	632 Compare W8, 0
	633 JumpIfNotEqual {637}
	634 Move X0, X20
	635 Call 0x1C17CF4
	636 Move [X24+1923], W22
	637 Move X8, [X20]
	638 Move X0, [X19+216]
	639 Move X8, [X8+184]
	640 Move S0, [X8]
	641 Move S1, [X8+4]
	642 Move V2, [X8+8]
	643 Subtract S0, S8, S0
	644 Subtract S1, S9, S1
	645 Multiply S0, S0, S0
	646 Multiply S1, S1, S1
	647 Add S0, S0, S1
	648 Move V1, [X31+48]
	649 Subtract S2, S10, S2
	650 Multiply S2, S2, S2
	651 Add S0, S2, S0
	652 NotImplemented "Instruction FCMP not yet implemented."
	653 Compare X0, 0
	654 JumpIfEqual {1105}
	655 Move W8, [X0+24]
	656 Add W21, W21, 1
	657 NotImplemented "Instruction CMP not yet implemented."
	658 Compare X0, 0
	659 JumpIfEqual {1105}
	660 Move X2, [X26]
	661 Move W1, W21
	662 Call List`1<Object>.get_Item, X0, X1
	663 Move X1, X0
	664 Move X0, X19
	665 Move W2, W31
	666 Call CystController.AttachTether, X0, X1, X2
	667 Move X20, [X31+352]
	668 Move X19, [X31+360]
	669 Move X22, [X31+336]
	670 Move X21, [X31+344]
	671 Move X24, [X31+320]
	672 Move X23, [X31+328]
	673 Move X26, [X31+304]
	674 Move X25, [X31+312]
	675 Move X28, [X31+288]
	676 Move X27, [X31+296]
	677 Move X29, [X31+272]
	678 Move X30, [X31+280]
	679 Move D9, [X31+256]
	680 Move D8, [X31+264]
	681 Move D11, [X31+240]
	682 Move D10, [X31+248]
	683 Move D13, [X31+224]
	684 Move D12, [X31+232]
	685 Move D15, [X31+208]
	686 Move D14, [X31+216]
	687 Add X31, X31, 368
	688 Return 
	689 Move W8, [X24+1923]
	690 Compare W8, 0
	691 JumpIfNotEqual {697}
	692 Move X0, 0x2306000
	693 Move X0, [X0+1440]
	694 Call 0x1C17CF4
	695 Move W8, 1
	696 Move [X24+1923], W8
	697 Move X8, [X20]
	698 Move X8, [X8+184]
	699 Move S9, [X8]
	700 Move S10, [X8+4]
	701 Move V12, [X8+8]
	702 Move X22, 0x2306000
	703 Move X22, [X22+1496]
	704 Move X0, [X22]
	705 Move W8, [X0+224]
	706 Compare W8, 0
	707 JumpIfNotEqual {710}
	708 Call 0x1C17DFC
	709 Move X0, [X22]
	710 Move X8, [X0+184]
	711 Move X1, X31
	712 Move W0, [X8]
	713 Call LayerMask.op_Implicit, X0
	714 Move X8, 0x2306000
	715 Move X8, [X8+1528]
	716 Move W22, W0
	717 Move X8, [X8]
	718 Move W9, [X8+224]
	719 Compare W9, 0
	720 JumpIfNotEqual {723}
	721 Move X0, X8
	722 Call 0x1C17DFC
	723 Move V0, [X31+48]
	724 Add X0, X31, 88
	725 Add X1, X31, 144
	726 Move W3, 1
	727 Move [X31+96], S0
	728 Move [X31+104], S9
	729 Move S0, 15
	730 Move W2, W22
	731 Move X4, X31
	732 Move [X31+88], S8
	733 Move [X31+96], S11
	734 Move [X31+104], S10
	735 Move [X31+112], S12
	736 Call Physics.Raycast, X0, X1, V0, X2, X3
	737 Move W22, W0
	738 Move X0, X19
	739 Call CystController.get_target, X0
	740 Compare X0, 0
	741 JumpIfEqual {1105}
	742 Move X1, X31
	743 Call Component.get_transform, X0
	744 Compare X0, 0
	745 JumpIfEqual {1105}
	746 Move X1, X31
	747 Move V12, V14
	748 Call Transform.get_position, X0
	749 Move X0, X19
	750 Move X1, X31
	751 Move V11, V0
	752 Move V15, V1
	753 Move V13, V2
	754 Call Component.get_transform, X0
	755 Compare X0, 0
	756 JumpIfEqual {1105}
	757 Move X1, X31
	758 Call Transform.get_position, X0
	759 Move X26, 0x25EB000
	760 Move W8, [X26+2140]
	761 Move V14, V0
	762 Move V8, V1
	763 Move V10, V2
	764 Compare W8, 0
	765 JumpIfNotEqual {771}
	766 Move X0, 0x2306000
	767 Move X0, [X0+1448]
	768 Call 0x1C17CF4
	769 Move W8, 1
	770 Move [X26+2140], W8
	771 Move X0, [X21]
	772 Move W8, [X0+224]
	773 Compare W8, 0
	774 JumpIfNotEqual {776}
	775 Call 0x1C17DFC
	776 Move [X31+48], S10
	777 Move TEMP, X22
	778 And TEMP, TEMP, 1
	779 Compare TEMP, 1
	780 JumpIfNotEqual {799}
	781 Add X0, X31, 144
	782 Move X1, X31
	783 Move [X31+32], S15
	784 Call RaycastHit.get_point, X0
	785 Move X0, X19
	786 Move X1, X31
	787 Move V9, V0
	788 Move V10, V1
	789 Move V15, V2
	790 Call Component.get_transform, X0
	791 Compare X0, 0
	792 JumpIfEqual {1105}
	793 Move X1, X31
	794 Call Transform.get_position, X0
	795 Subtract S1, S10, S1
	796 Move V10, [X31+32]
	797 Subtract S0, S9, S0
	798 Subtract S2, S15, S2
	799 Move X0, X19
	800 Call CystController.get_target, X0
	801 Compare X0, 0
	802 JumpIfEqual {1105}
	803 Move X1, X31
	804 Move [X31+24], S8
	805 Move [X31+32], S14
	806 Move [X31+32], S12
	807 Call Component.get_transform, X0
	808 Compare X0, 0
	809 JumpIfEqual {1105}
	810 Move X1, X31
	811 Move V8, V13
	812 Move V14, V15
	813 Move [X31+16], S11
	814 Call Transform.get_position, X0
	815 Move X0, X19
	816 Move X1, X31
	817 Move V15, V0
	818 Move V9, V1
	819 Move V10, V2
	820 Call Component.get_transform, X0
	821 Compare X0, 0
	822 JumpIfEqual {1105}
	823 Move X1, X31
	824 Call Transform.get_position, X0
	825 Move W8, [X23+1925]
	826 Move V11, V0
	827 Move V12, V1
	828 Move V13, V2
	829 Compare W8, 0
	830 JumpIfNotEqual {836}
	831 Move X0, 0x2306000
	832 Move X0, [X0+1448]
	833 Call 0x1C17CF4
	834 Move W8, 1
	835 Move [X23+1925], W8
	836 Move X0, [X21]
	837 Subtract S15, S15, S11
	838 Subtract S11, S9, S12
	839 Subtract S9, S10, S13
	840 Move W8, [X0+224]
	841 Compare W8, 0
	842 JumpIfNotEqual {844}
	843 Call 0x1C17DFC
	844 Multiply S0, S15, S15
	845 Multiply S1, S11, S11
	846 Add S0, S0, S1
	847 Multiply S1, S9, S9
	848 Add S0, S1, S0
	849 NotImplemented "Instruction FSQRT not yet implemented."
	850 Move V0, [X31+32]
	851 Move V10, V14
	852 Move V13, V8
	853 NotImplemented "Instruction FCMP not yet implemented."
	854 NotImplemented "Instruction FDIV not yet implemented."
	855 Move V11, [X31+16]
	856 Move V14, [X31+28]
	857 NotImplemented "Instruction FDIV not yet implemented."
	858 NotImplemented "Instruction FDIV not yet implemented."
	859 Move W8, [X24+1923]
	860 Move V14, [X31+28]
	861 Compare W8, 0
	862 JumpIfNotEqual {868}
	863 Move X0, 0x2306000
	864 Move X0, [X0+1440]
	865 Call 0x1C17CF4
	866 Move W8, 1
	867 Move [X24+1923], W8
	868 Move X8, [X20]
	869 Move V11, [X31+16]
	870 Move X8, [X8+184]
	871 Move S0, [X8]
	872 Move S1, [X8+4]
	873 Move V2, [X8+8]
	874 Move V8, [X31+24]
	875 Move V12, [X31+32]
	876 Move S3, 15
	877 Multiply S0, S0, S3
	878 Multiply S1, S1, S3
	879 Multiply S2, S2, S3
	880 Move V5, [X31+48]
	881 Subtract S3, S11, S14
	882 Subtract S4, S10, S8
	883 Multiply S3, S3, S3
	884 Subtract S5, S13, S5
	885 Multiply S4, S4, S4
	886 Add S3, S3, S4
	887 Multiply S4, S5, S5
	888 Add S3, S4, S3
	889 Move X0, X19
	890 NotImplemented "Instruction FSQRT not yet implemented."
	891 Call CystController.set_attackVector, X0, X1
	892 Move S0, 15
	893 Move TEMP, X22
	894 And TEMP, TEMP, 1
	895 Compare TEMP, 1
	896 JumpIfNotEqual {900}
	897 Add X0, X31, 144
	898 Move X1, X31
	899 Call RaycastHit.get_distance, X0
	900 NotImplemented "Instruction FCMP not yet implemented."
	901 Move X0, X19
	902 Move V8, V12
	903 Call CystController.get_target, X0
	904 Move X22, X0
	905 Move X0, X19
	906 Call CystController.get_target, X0
	907 Compare X0, 0
	908 JumpIfEqual {1105}
	909 Move X1, X31
	910 Call Component.get_transform, X0
	911 Compare X0, 0
	912 JumpIfEqual {1105}
	913 Move X1, X31
	914 Call Transform.get_position, X0
	915 Move X0, X19
	916 Move V9, V0
	917 Move V10, V1
	918 Move V11, V2
	919 Call CystController.get_attackVector, X0
	920 Move W8, [X23+1925]
	921 Move V12, V0
	922 Move V13, V1
	923 Move V14, V2
	924 Compare W8, 0
	925 JumpIfNotEqual {931}
	926 Move X0, 0x2306000
	927 Move X0, [X0+1448]
	928 Call 0x1C17CF4
	929 Move W8, 1
	930 Move [X23+1925], W8
	931 Move X0, [X21]
	932 Move W8, [X0+224]
	933 Compare W8, 0
	934 JumpIfNotEqual {936}
	935 Call 0x1C17DFC
	936 Multiply S0, S12, S12
	937 Multiply S1, S13, S13
	938 Add S0, S0, S1
	939 Multiply S1, S14, S14
	940 Add S0, S1, S0
	941 NotImplemented "Instruction FSQRT not yet implemented."
	942 NotImplemented "Instruction FCMP not yet implemented."
	943 NotImplemented "Instruction FDIV not yet implemented."
	944 NotImplemented "Instruction FDIV not yet implemented."
	945 NotImplemented "Instruction FDIV not yet implemented."
	946 Move W8, [X24+1923]
	947 Compare W8, 0
	948 JumpIfNotEqual {954}
	949 Move X0, 0x2306000
	950 Move X0, [X0+1440]
	951 Call 0x1C17CF4
	952 Move W8, 1
	953 Move [X24+1923], W8
	954 Move X8, [X20]
	955 Move X8, [X8+184]
	956 Move S0, [X8]
	957 Move S1, [X8+4]
	958 Move V2, [X8+8]
	959 Move X8, [X19+64]
	960 Compare X8, 0
	961 JumpIfEqual {966}
	962 Move X8, [X8+32]
	963 Compare X8, 0
	964 JumpIfEqual {966}
	965 Move W5, [X8]
	966 Move X5, X31
	967 Compare X22, 0
	968 JumpIfEqual {1105}
	969 Move X9, 0x230B000
	970 Move W8, [X19+104]
	971 Move X9, [X9+4088]
	972 Move S5, 10
	973 Multiply S3, S0, S5
	974 Multiply S4, S1, S5
	975 Move X4, [X9]
	976 Multiply S5, S2, S5
	977 NotImplemented "Instruction BFM not yet implemented."
	978 Move W1, 500
	979 Move X0, X22
	980 Move V0, V9
	981 Move V1, V10
	982 Move V2, V11
	983 Move X2, X31
	984 Move X3, X31
	985 Move X6, X31
	986 Call NetPlayer.Hit, X0, X1, X2, X3, X4, X5, X6, X7
	987 Move X22, [X19+200]
	988 Move X0, X19
	989 Move X1, X31
	990 Call Component.get_transform, X0
	991 Compare X0, 0
	992 JumpIfEqual {1105}
	993 Move X1, X31
	994 Call Transform.get_position, X0
	995 Compare X22, 0
	996 JumpIfEqual {1105}
	997 Move S3, 1
	998 Move W1, 1
	999 Move X0, X22
	1000 Move X2, X31
	1001 Call RandomSFX.Play, X0, X1, V0, X2
	1002 Move X0, X19
	1003 Call CystController.get_attackVector, X0
	1004 Move X0, X31
	1005 Call Quaternion.LookRotation, X0
	1006 Move X0, [X19+136]
	1007 Compare X0, 0
	1008 JumpIfEqual {1105}
	1009 Move X1, X31
	1010 Move V9, V0
	1011 Move V10, V1
	1012 Move V11, V2
	1013 Move V12, V3
	1014 Call Transform.set_rotation, X0, X1
	1015 Move X0, [X19+152]
	1016 Compare X0, 0
	1017 JumpIfEqual {1105}
	1018 Move V0, V9
	1019 Move V1, V10
	1020 Move V2, V11
	1021 Move V3, V12
	1022 Move X1, X31
	1023 Call Transform.set_rotation, X0, X1
	1024 Move X22, [X19+152]
	1025 Compare X22, 0
	1026 JumpIfEqual {1105}
	1027 Move X0, X22
	1028 Move X1, X31
	1029 Call Transform.get_localScale, X0
	1030 Move X0, X19
	1031 Move V9, V0
	1032 Move V11, V1
	1033 Move V10, V2
	1034 Call CystController.get_attackVector, X0
	1035 Move W8, [X25+1924]
	1036 Move V12, V0
	1037 Move V13, V1
	1038 Move V14, V2
	1039 Compare W8, 0
	1040 JumpIfNotEqual {1046}
	1041 Move X0, 0x2306000
	1042 Move X0, [X0+1448]
	1043 Call 0x1C17CF4
	1044 Move W8, 1
	1045 Move [X25+1924], W8
	1046 Move X0, [X21]
	1047 Move W8, [X0+224]
	1048 Compare W8, 0
	1049 JumpIfNotEqual {1051}
	1050 Call 0x1C17DFC
	1051 Move V4, [X31+20]
	1052 Multiply S0, S12, S12
	1053 Multiply S1, S13, S13
	1054 Multiply S2, S14, S14
	1055 Move S3, 12
	1056 Add S0, S0, S1
	1057 Move S1, 1
	1058 Add S0, S2, S0
	1059 Multiply S3, S4, S3
	1060 Move S2, W31
	1061 NotImplemented "Instruction FCMP not yet implemented."
	1062 NotImplemented "Instruction FMIN not yet implemented."
	1063 NotImplemented "Instruction FSQRT not yet implemented."
	1064 NotImplemented "Instruction FCSEL not yet implemented."
	1065 Subtract S3, S1, S9
	1066 Subtract S1, S1, S11
	1067 Subtract S4, S0, S10
	1068 Multiply S3, S2, S3
	1069 Multiply S1, S2, S1
	1070 Multiply S2, S2, S4
	1071 Add S0, S9, S3
	1072 Add S1, S11, S1
	1073 Add S2, S10, S2
	1074 Move X0, X22
	1075 Move X1, X31
	1076 Call Transform.set_localScale, X0, X1
	1077 Move X0, X19
	1078 Call CystController.get_attackTimer, X0
	1079 Move S1, 3
	1080 NotImplemented "Instruction FCMP not yet implemented."
	1081 Move X0, X19
	1082 Move X1, X31
	1083 Call CystController.set_target, X0, X1
	1084 Move X0, X19
	1085 Move W1, W31
	1086 Call CystController.set_attacked, X0, X1
	1087 Move S0, W31
	1088 Move X0, X19
	1089 Call CystController.set_attackTimer, X0, V0
	1090 Move X22, [X19+192]
	1091 Move X0, X19
	1092 Move X1, X31
	1093 Call Component.get_transform, X0
	1094 Compare X0, 0
	1095 JumpIfEqual {1105}
	1096 Move X1, X31
	1097 Call Transform.get_position, X0
	1098 Compare X22, 0
	1099 JumpIfEqual {1105}
	1100 Move S3, 1
	1101 Move W1, 1
	1102 Move X0, X22
	1103 Move X2, X31
	1104 Call RandomSFX.Play, X0, X1, V0, X2
	1105 Call 0x1C17F20

Method: System.Void Hit(System.Int32 damage, UnityEngine.Vector3 position, AnimalCompany.RandomSFX hitSound, AnimalCompany.RandomSFX killSound, UnityEngine.Vector3 force, System.String hitName, Fusion.NetworkBehaviourId source)

Disassembly:
	0x01DEE6B4 BL 0x1C16F20
	0x01DEE6B8 SUB X31, X31, 0x160
	0x01DEE6BC STP D15, D14, [X31 + 0xD0]
	0x01DEE6C0 STP D13, D12, [X31 + 0xE0]
	0x01DEE6C4 STP D11, D10, [X31 + 0xF0]
	0x01DEE6C8 STP D9, D8, [X31 + 0x100]
	0x01DEE6CC STP X29, X30, [X31 + 0x110]
	0x01DEE6D0 STP X26, X25, [X31 + 0x120]
	0x01DEE6D4 STP X24, X23, [X31 + 0x130]
	0x01DEE6D8 STP X22, X21, [X31 + 0x140]
	0x01DEE6DC STP X20, X19, [X31 + 0x150]
	0x01DEE6E0 ADRP X22, 0x25EA000
	0x01DEE6E4 LDRB W8, [X22 + 0xD23]
	0x01DEE6E8 MOV X21, X2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X20, X0
	006 Call CystController.get_isDie, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {15}
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Return 
	015 Move X0, X20
	016 Move W1, W19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]

Method: System.Void RPC_Hit(System.Int32 damage)

Disassembly:
	0x01DEE6EC MOV V9.16B, V6.16B
	0x01DEE6F0 MOV V10.16B, V5.16B
	0x01DEE6F4 MOV V11.16B, V4.16B
	0x01DEE6F8 MOV V12.16B, V3.16B
	0x01DEE6FC MOV V13.16B, V2.16B
	0x01DEE700 MOV V14.16B, V1.16B
	0x01DEE704 MOV V15.16B, V0.16B
	0x01DEE708 MOV X19, X1
	0x01DEE70C MOV X20, X0
	0x01DEE710 STR S7, [X31 + 0xC]
	0x01DEE714 TBNZ X8, 0x0, 0x1DEE750
	0x01DEE718 ADRP X0, 0x230B000
	0x01DEE71C LDR X0, [X0 + 0x58]
	0x01DEE720 BL 0x1C16CF4
	0x01DEE724 ADRP X0, 0x230B000
	0x01DEE728 LDR X0, [X0 + 0x60]
	0x01DEE72C BL 0x1C16CF4
	0x01DEE730 ADRP X0, 0x230A000
	0x01DEE734 LDR X0, [X0 + 0xC40]
	0x01DEE738 BL 0x1C16CF4
	0x01DEE73C ADRP X0, 0x2305000
	0x01DEE740 LDR X0, [X0 + 0x5F8]
	0x01DEE744 BL 0x1C16CF4
	0x01DEE748 MOVZ W8, 0x1
	0x01DEE74C STRB W8, [X22 + 0xD23]
	0x01DEE750 MOVI V0.2D, 0x0
	0x01DEE754 STUR V0, [X31 + 0x5C]
	0x01DEE758 STP V0, V0, [X31 + 0x40]
	0x01DEE75C LDR X8, [X20]
	0x01DEE760 CBZ X8, 0x1DEE978
	0x01DEE764 LDR W9, [X8 + 0x1C]
	0x01DEE768 ADD W9, W9, 0x1
	0x01DEE76C STP W31, W9, [X8 + 0x18]
	0x01DEE770 CBZ X19, 0x1DEE978
	0x01DEE774 ADRP X24, 0x230A000
	0x01DEE778 ADRP X23, 0x2305000
	0x01DEE77C LDR X24, [X24 + 0xC40]
	0x01DEE780 LDR X23, [X23 + 0x5F8]
	0x01DEE784 MOV X0, X19
	0x01DEE788 MOV X1, X31
	0x01DEE78C BL 0x3C90124
	0x01DEE790 LDR X0, [X24]
	0x01DEE794 MOV V8.16B, V0.16B
	0x01DEE798 LDR W8, [X0 + 0xE0]
	0x01DEE79C CBNZ W8, 0x1DEE7A8
	0x01DEE7A0 BL 0x1C16DFC
	0x01DEE7A4 LDR X0, [X24]
	0x01DEE7A8 LDR X8, [X0 + 0xB8]
	0x01DEE7AC AND X21, X21, 0x0
	0x01DEE7B0 MOV X0, X21
	0x01DEE7B4 MOV X1, X31
	0x01DEE7B8 LDR X22, [X8 + 0x8]
	0x01DEE7BC BL 0x3C35CB8
	0x01DEE7C0 LDR X8, [X23]
	0x01DEE7C4 MOV W23, W0
	0x01DEE7C8 LDR W9, [X8 + 0xE0]
	0x01DEE7CC CBNZ W9, 0x1DEE7D8
	0x01DEE7D0 MOV X0, X8
	0x01DEE7D4 BL 0x1C16DFC
	0x01DEE7D8 MOV V0.16B, V15.16B
	0x01DEE7DC MOV V1.16B, V14.16B
	0x01DEE7E0 MOV V2.16B, V13.16B
	0x01DEE7E4 MOV V3.16B, V8.16B
	0x01DEE7E8 MOV X0, X22
	0x01DEE7EC MOV W1, W23
	0x01DEE7F0 MOV X2, X31
	0x01DEE7F4 BL 0x3C8D760
	0x01DEE7F8 LDR X8, [X24]
	0x01DEE7FC LDR X9, [X8 + 0xB8]
	0x01DEE800 LDR X9, [X9 + 0x8]
	0x01DEE804 CBZ X9, 0x1DEE978
	0x01DEE808 LDR W9, [X9 + 0x18]
	0x01DEE80C CMP W0, W9
	0x01DEE810 CSEL W9, W0, W9, LT
	0x01DEE814 CMP W9, 0x1
	0x01DEE818 B.LT 0x1DEE94C
	0x01DEE81C ADRP X23, 0x230B000
	0x01DEE820 LDR X23, [X23 + 0x58]
	0x01DEE824 MOV W9, W9
	0x01DEE828 MOV X22, X31
	0x01DEE82C SUB X25, X9, 0x1
	0x01DEE830 MOVZ W26, 0x2C
	0x01DEE834 LDR W9, [X8 + 0xE0]
	0x01DEE838 CBNZ W9, 0x1DEE848
	0x01DEE83C MOV X0, X8
	0x01DEE840 BL 0x1C16DFC
	0x01DEE844 LDR X8, [X24]
	0x01DEE848 LDR X8, [X8 + 0xB8]
	0x01DEE84C LDR X8, [X8 + 0x8]
	0x01DEE850 CBZ X8, 0x1DEE978
	0x01DEE854 LDR W9, [X8 + 0x18]
	0x01DEE858 CMP X22, X9
	0x01DEE85C B.CS 0x1DEE97C
	0x01DEE860 ADD X8, X8, X22, 0x3, LSL
	0x01DEE864 LDR X1, [X8 + 0x20]
	0x01DEE868 LDR V7, [X31 + 0xC]
	0x01DEE86C ADD X3, X31, 0x40
	0x01DEE870 MOV X0, X19
	0x01DEE874 MOV V0.16B, V15.16B
	0x01DEE878 MOV V1.16B, V14.16B
	0x01DEE87C MOV V2.16B, V13.16B
	0x01DEE880 MOV V3.16B, V12.16B
	0x01DEE884 MOV V4.16B, V11.16B
	0x01DEE888 MOV V5.16B, V10.16B
	0x01DEE88C MOV V6.16B, V9.16B
	0x01DEE890 MOV X2, X21
	0x01DEE894 STR S8, [X31]
	0x01DEE898 BL 0x1DF9324
	0x01DEE89C TBZ X0, 0x0, 0x1DEE938
	0x01DEE8A0 LDR X0, [X20]
	0x01DEE8A4 LDP V0, V1, [X31 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25EB000
	006 Move W8, [X21+3277]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x2309000
	014 Move X0, [X0+2680]
	015 Call 0x1C17CF4
	016 Move X0, 0x230C000
	017 Move X0, [X0]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3277], W8
	021 Move W8, [X19+88]
	022 Compare W8, 0
	023 JumpIfEqual {44}
	024 Move [X19+88], W31
	025 Move X0, X19
	026 Call CystController.get_isDie, X0
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {60}
	031 Move X0, X19
	032 Call CystController.get_health, X0
	033 Subtract W1, W0, W20
	034 Move X0, X19
	035 Call CystController.set_health, X0, X1
	036 Move X0, X19
	037 Call CystController.get_health, X0
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X0, X19
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Move X21, 0x2309000
	045 Move X21, [X21+2680]
	046 Move X0, [X21]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, X19
	052 Move X1, X31
	053 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	054 Move X0, [X19+56]
	055 Compare X0, 0
	056 JumpIfEqual {142}
	057 Move X1, X31
	058 Call NetworkRunner.get_Stage, X0
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Return 
	065 Move X0, [X19+64]
	066 Compare X0, 0
	067 JumpIfEqual {142}
	068 Move X1, X31
	069 Call NetworkObject.GetLocalAuthorityMask, X0
	070 And W31, W0, 7
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {25}
	075 Move X8, [X19+56]
	076 Compare X8, 0
	077 JumpIfEqual {142}
	078 Move X0, [X8+80]
	079 Compare X0, 0
	080 JumpIfEqual {142}
	081 Move X1, X31
	082 Call Simulation.HasAnyActiveConnections, X0
	083 Move TEMP, X0
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfNotEqual {60}
	087 Move X8, [X19+56]
	088 Compare X8, 0
	089 JumpIfEqual {142}
	090 Move X0, [X8+80]
	091 Move W1, 12
	092 Move X2, X31
	093 Call SimulationMessage.Allocate, X0, X1
	094 Move X8, [X19+64]
	095 Compare X8, 0
	096 JumpIfEqual {142}
	097 Move X8, [X8+32]
	098 Move X21, X0
	099 Compare X8, 0
	100 JumpIfEqual {120}
	101 Move W0, [X8]
	102 Move X0, [X21]
	103 Move X19, [X19+64]
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {108}
	107 Call 0x1C17DFC
	108 Move X8, 0x230C000
	109 Move X8, [X8]
	110 Move X1, X19
	111 Move X20, [X31+16]
	112 Move X19, [X31+24]
	113 Move W2, 7
	114 Move X0, [X8]
	115 Move X3, X31
	116 Move X30, [X31+32]
	117 Move X21, [X31+40]
	118 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	119 Return 
	120 Move X0, X31
	121 Move W1, [X19+104]
	122 Move W2, 2
	123 Move X3, X31
	124 Call RpcHeader.Create, X0, X1, X2
	125 Move [X21+28], X0
	126 Move [X21+36], W20
	127 Compare X21, 0
	128 JumpIfEqual {142}
	129 Move W8, 96
	130 Move [X21+12], W8
	131 Move X0, [X19+56]
	132 Compare X0, 0
	133 JumpIfEqual {142}
	134 Move X20, [X31+16]
	135 Move X19, [X31+24]
	136 Move X1, X21
	137 Move X2, X31
	138 Move X30, [X31+32]
	139 Move X21, [X31+40]
	140 Call NetworkRunner.SendRpc, X0, X1
	141 Return 
	142 Call 0x1C17F20

Method: System.Void Die()

Disassembly:
	0x01DEE8A8 LDUR V2, [X31 + 0x5C]
	0x01DEE8AC STP V0, V1, [X31 + 0x10]
	0x01DEE8B0 STUR V2, [X31 + 0x2C]
	0x01DEE8B4 CBZ X0, 0x1DEE978
	0x01DEE8B8 LDP V0, V1, [X31 + 0x10]
	0x01DEE8BC LDUR V2, [X31 + 0x2C]
	0x01DEE8C0 LDR X10, [X23]
	0x01DEE8C4 STP V0, V1, [X31 + 0x70]
	0x01DEE8C8 STUR V2, [X31 + 0x8C]
	0x01DEE8CC LDR W9, [X0 + 0x1C]
	0x01DEE8D0 LDR X8, [X0 + 0x10]
	0x01DEE8D4 ADD W9, W9, 0x1
	0x01DEE8D8 STR W9, [X0 + 0x1C]
	0x01DEE8DC CBZ X8, 0x1DEE978
	0x01DEE8E0 LDRSW X9, [X0 + 0x18]
	0x01DEE8E4 LDR W11, [X8 + 0x18]
	0x01DEE8E8 CMP W9, W11
	0x01DEE8EC B.CS 0x1DEE914
	0x01DEE8F0 ADD W10, W9, 0x1
	0x01DEE8F4 STR W10, [X0 + 0x18]
	0x01DEE8F8 LDUR V0, [X31 + 0x8C]
	0x01DEE8FC LDP V2, V1, [X31 + 0x70]
	0x01DEE900 NOP
	0x01DEE904 MADD X8, X9, X26, X8
	0x01DEE908 STUR V0, [X8 + 0x3C]
	0x01DEE90C STP V2, V1, [X8 + 0x20]
	0x01DEE910 B 0x1DEE938
	0x01DEE914 LDR X8, [X10 + 0x20]
	0x01DEE918 LDP V0, V1, [X31 + 0x70]
	0x01DEE91C LDUR V2, [X31 + 0x8C]
	0x01DEE920 ADD X1, X31, 0xA0
	0x01DEE924 LDR X8, [X8 + 0xC0]
	0x01DEE928 LDR X2, [X8 + 0x70]
	0x01DEE92C STP V0, V1, [X31 + 0xA0]
	0x01DEE930 STUR V2, [X31 + 0xBC]
	0x01DEE934 BL 0x302FC00
	0x01DEE938 CMP X25, X22
	0x01DEE93C B.EQ 0x1DEE94C
	0x01DEE940 LDR X8, [X24]
	0x01DEE944 ADD X22, X22, 0x1
	0x01DEE948 B 0x1DEE834
	0x01DEE94C LDP X20, X19, [X31 + 0x150]
	0x01DEE950 LDP X22, X21, [X31 + 0x140]
	0x01DEE954 LDP X24, X23, [X31 + 0x130]
	0x01DEE958 LDP X26, X25, [X31 + 0x120]
	0x01DEE95C LDP X29, X30, [X31 + 0x110]
	0x01DEE960 LDP D9, D8, [X31 + 0x100]
	0x01DEE964 LDP D11, D10, [X31 + 0xF0]
	0x01DEE968 LDP D13, D12, [X31 + 0xE0]
	0x01DEE96C LDP D15, D14, [X31 + 0xD0]
	0x01DEE970 ADD X31, X31, 0x160
	0x01DEE974 RET
	0x01DEE978 BL 0x1C16F20
	0x01DEE97C BL 0x1C16F28
	0x01DEE980 STP X30, X19, [X31 - 0x10]!
	0x01DEE984 MOV X19, X0
	0x01DEE988 FMOV S0, W31
	0x01DEE98C FMOV S1, 1
	0x01DEE990 FMOV S2, 1
	0x01DEE994 FMOV S3, 1
	0x01DEE998 MOV X0, X31
	0x01DEE99C BL 0x3C0D030
	0x01DEE9A0 MOV X0, X19
	0x01DEE9A4 MOV X1, X31
	0x01DEE9A8 BL 0x3C32E90
	0x01DEE9AC CBZ X0, 0x1DEE9E0
	0x01DEE9B0 MOV X1, X31
	0x01DEE9B4 BL 0x3C3F58C
	0x01DEE9B8 LDR V3, [X19 + 0x30]
	0x01DEE9BC MOV X0, X31
	0x01DEE9C0 BL 0x3C0CB98
	0x01DEE9C4 ADRP X8, 0xFFFFFFFFFECFC000
	0x01DEE9C8 LDP S0, S1, [X19 + 0x5C]
	0x01DEE9CC LDR V2, [X19 + 0x64]
	0x01DEE9D0 LDR V3, [X8 + 0x200]
	0x01DEE9D4 MOV X0, X31
	0x01DEE9D8 LDP X30, X19, [X31], #0x10
	0x01DEE9DC B 0x3C0CC38
	0x01DEE9E0 BL 0x1C16F20
	0x01DEE9E4 STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Call CystController.get_isDie, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {20}
	013 Move X20, [X31+32]
	014 Move X19, [X31+40]
	015 Move X30, [X31+24]
	016 Move D9, [X31+8]
	017 Move D8, [X31+16]
	018 Move V10, [X31+48]
	019 Return 
	020 Move W1, 1
	021 Move X0, X19
	022 Call CystController.set_isDie, X0, X1
	023 Move X20, [X19+208]
	024 Compare X20, 0
	025 JumpIfEqual {38}
	026 Move X0, X19
	027 Move X1, X31
	028 Call Component.get_transform, X0
	029 Compare X0, 0
	030 JumpIfEqual {96}
	031 Move X1, X31
	032 Call Transform.get_position, X0
	033 Move S3, 1
	034 Move W1, 1
	035 Move X0, X20
	036 Move X2, X31
	037 Call RandomSFX.Play, X0, X1, V0, X2
	038 Move X0, X19
	039 Move X1, X31
	040 Call Component.get_transform, X0
	041 Compare X0, 0
	042 JumpIfEqual {96}
	043 Move X1, X31
	044 Call Transform.get_position, X0
	045 Move X20, 0x25EB000
	046 Move W8, [X20+1939]
	047 Move V8, V0
	048 Move V9, V1
	049 Move V10, V2
	050 Compare W8, 0
	051 JumpIfNotEqual {57}
	052 Move X0, 0x2307000
	053 Move X0, [X0+1448]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X20+1939], W8
	057 Move X8, 0x2307000
	058 Move X8, [X8+1448]
	059 Move W0, 128
	060 Move V0, V8
	061 Move V1, V9
	062 Move X8, [X8]
	063 Move V2, V10
	064 Move X1, X31
	065 Move X8, [X8+184]
	066 Move S3, [X8]
	067 Move S4, [X8+4]
	068 Move S5, [X8+8]
	069 Move S6, [X8+12]
	070 Call NetworkVFX.PlayVFX, X0, X1, X2
	071 Move X0, [X19+56]
	072 Move S0, 20
	073 Move X1, X31
	074 Call TickTimer.CreateFromSeconds, X0, V0
	075 And X1, X0, 0
	076 Move X0, X19
	077 Call CystController.set_respawnTimer, X0, X1
	078 Move S0, W31
	079 Move X0, X19
	080 Call CystController.set_attackTimer, X0, V0
	081 Move X0, X19
	082 Move X1, X31
	083 Call CystController.set_target, X0, X1
	084 Move X0, X19
	085 Move W1, W31
	086 Call CystController.set_attacked, X0, X1
	087 Move X0, X19
	088 Move X20, [X31+32]
	089 Move X19, [X31+40]
	090 Move X30, [X31+24]
	091 Move D9, [X31+8]
	092 Move D8, [X31+16]
	093 Move V10, [X31+48]
	094 Call CystController.ResetAllTethers, X0
	095 Return 
	096 Call 0x1C17F20

Method: System.Void HandleIsDieChanged()

Disassembly:
	0x01DEE9E8 STP X22, X21, [X31 + 0x10]
	0x01DEE9EC STP X20, X19, [X31 + 0x20]
	0x01DEE9F0 ADRP X22, 0x25EA000
	0x01DEE9F4 ADRP X21, 0x230B000
	0x01DEE9F8 ADRP X20, 0x230B000
	0x01DEE9FC LDRB W8, [X22 + 0xCD5]
	0x01DEEA00 LDR X21, [X21 + 0x68]
	0x01DEEA04 LDR X20, [X20 + 0x70]
	0x01DEEA08 MOV X19, X0
	0x01DEEA0C TBNZ X8, 0x0, 0x1DEEA30
	0x01DEEA10 ADRP X0, 0x230B000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+128]
	004 Call CystController.get_isDie, X0
	005 Compare X19, 0
	006 JumpIfEqual {15}
	007 NotImplemented "Instruction ORN not yet implemented."
	008 And W1, W8, 1
	009 Move X0, X19
	010 Move X2, X31
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call GameObject.SetActive, X0, X1
	014 Return 
	015 Call 0x1C17F20

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x01DEEA14 LDR X0, [X0 + 0x70]
	0x01DEEA18 BL 0x1C16CF4
	0x01DEEA1C ADRP X0, 0x230B000
	0x01DEEA20 LDR X0, [X0 + 0x68]
	0x01DEEA24 BL 0x1C16CF4
	0x01DEEA28 MOVZ W8, 0x1
	0x01DEEA2C STRB W8, [X22 + 0xCD5]
	0x01DEEA30 ADRP X8, 0xFFFFFFFFFECFF000
	0x01DEEA34 LDR V0, [X8 + 0x4B0]
	0x01DEEA38 STR D0, [X19 + 0x30]
	0x01DEEA3C LDR X0, [X21]
	0x01DEEA40 BL 0x1C16F10
	0x01DEEA44 LDR X2, [X20]
	0x01DEEA48 MOVZ W1, 0x8
	0x01DEEA4C MOV X20, X0
	0x01DEEA50 BL 0x302F3B8
	0x01DEEA54 STR X20, [X19 + 0x48]
	0x01DEEA58 MOV X0, X19
	0x01DEEA5C LDP X20, X19, [X31 + 0x20]
	0x01DEEA60 LDP X22, X21, [X31 + 0x10]
	0x01DEEA64 MOV X1, X31
	0x01DEEA68 LDR X30, [X31], #0x30
	0x01DEEA6C B 0x3C36C30
	0x01DEEA70 STR X30, [X31 - 0x20]!
	0x01DEEA74 STP X20, X19, [X31 + 0x10]
	0x01DEEA78 ADRP X19, 0x25EA000
	0x01DEEA7C ADRP X20, 0x230B000
	0x01DEEA80 LDRB W8, [X19 + 0xCD6]
	0x01DEEA84 LDR X20, [X20 + 0x50]
	0x01DEEA88 TBNZ X8, 0x0, 0x1DEEAA0
	0x01DEEA8C ADRP X0, 0x230B000
	0x01DEEA90 LDR X0, [X0 + 0x50]
	0x01DEEA94 BL 0x1C16CF4
	0x01DEEA98 MOVZ W8, 0x1
	0x01DEEA9C STRB W8, [X19 + 0xCD6]
	0x01DEEAA0 LDR X0, [X20]
	0x01DEEAA4 BL 0x1C16F10
	0x01DEEAA8 MOV X1, X31
	0x01DEEAAC MOV X19, X0
	0x01DEEAB0 BL 0x33BDD8C
	0x01DEEAB4 LDR X8, [X20]
	0x01DEEAB8 LDR X8, [X8 + 0xB8]
	0x01DEEABC STR X19, [X8]
	0x01DEEAC0 LDP X20, X19, [X31 + 0x10]
	0x01DEEAC4 LDR X30, [X31], #0x20
	0x01DEEAC8 RET
	0x01DEEACC MOV X1, X31
	0x01DEEAD0 B 0x33BDD8C
	0x01DEEAD4 MOV X0, X1
	0x01DEEAD8 MOV X1, X31
	0x01DEEADC B 0x3C8E684
	0x01DEEAE0 STP X30, X19, [X31 - 0x10]!
	0x01DEEAE4 LDR X8, [X0 + 0x50]
	0x01DEEAE8 CBZ X8, 0x1DEEAF8
	0x01DEEAEC LDR W0, [X8 + 0x3C]
	0x01DEEAF0 LDP X30, X19, [X31], #0x10
	0x01DEEAF4 RET
	0x01DEEAF8 ADRP X0, 0x2305000
	0x01DEEAFC LDR X0, [X0 + 0x5B0]
	0x01DEEB00 BL 0x1C16D08
	0x01DEEB04 BL 0x1C16F10
	0x01DEEB08 MOV X19, X0
	0x01DEEB0C ADRP X0, 0x230B000
	0x01DEEB10 LDR X0, [X0 + 0x78]
	0x01DEEB14 BL 0x1C16D08
	0x01DEEB18 MOV X1, X0
	0x01DEEB1C MOV X0, X19
	0x01DEEB20 MOV X2, X31
	0x01DEEB24 BL 0x337DF1C
	0x01DEEB28 ADRP X0, 0x230B000
	0x01DEEB2C LDR X0, [X0 + 0x80]
	0x01DEEB30 BL 0x1C16D08
	0x01DEEB34 MOV X1, X0
	0x01DEEB38 MOV X0, X19
	0x01DEEB3C BL 0x1C16DEC
	0x01DEEB40 STP X30, X19, [X31 - 0x10]!
	0x01DEEB44 LDR X8, [X0 + 0x50]
	0x01DEEB48 CBZ X8, 0x1DEEB58
	0x01DEEB4C STR W1, [X8 + 0x3C]
	0x01DEEB50 LDP X30, X19, [X31], #0x10
	0x01DEEB54 RET
	0x01DEEB58 ADRP X0, 0x2305000
	0x01DEEB5C LDR X0, [X0 + 0x5B0]
	0x01DEEB60 BL 0x1C16D08
	0x01DEEB64 BL 0x1C16F10
	0x01DEEB68 MOV X19, X0
	0x01DEEB6C ADRP X0, 0x230B000
	0x01DEEB70 LDR X0, [X0 + 0x78]
	0x01DEEB74 BL 0x1C16D08
	0x01DEEB78 MOV X1, X0
	0x01DEEB7C MOV X0, X19
	0x01DEEB80 MOV X2, X31
	0x01DEEB84 BL 0x337DF1C
	0x01DEEB88 ADRP X0, 0x230B000
	0x01DEEB8C LDR X0, [X0 + 0x88]
	0x01DEEB90 BL 0x1C16D08
	0x01DEEB94 MOV X1, X0
	0x01DEEB98 MOV X0, X19
	0x01DEEB9C BL 0x1C16DEC
	0x01DEEBA0 STP X30, X19, [X31 - 0x10]!
	0x01DEEBA4 LDR X8, [X0 + 0x50]
	0x01DEEBA8 CBZ X8, 0x1DEEBBC
	0x01DEEBAC LDP S0, S1, [X8 + 0x40]
	0x01DEEBB0 LDP S2, S3, [X8 + 0x48]
	0x01DEEBB4 LDP X30, X19, [X31], #0x10
	0x01DEEBB8 RET
	0x01DEEBBC ADRP X0, 0x2305000
	0x01DEEBC0 LDR X0, [X0 + 0x5B0]
	0x01DEEBC4 BL 0x1C16D08
	0x01DEEBC8 BL 0x1C16F10
	0x01DEEBCC MOV X19, X0
	0x01DEEBD0 ADRP X0, 0x230B000
	0x01DEEBD4 LDR X0, [X0 + 0x90]
	0x01DEEBD8 BL 0x1C16D08
	0x01DEEBDC MOV X1, X0
	0x01DEEBE0 MOV X0, X19
	0x01DEEBE4 MOV X2, X31
	0x01DEEBE8 BL 0x337DF1C
	0x01DEEBEC ADRP X0, 0x230B000
	0x01DEEBF0 LDR X0, [X0 + 0x98]
	0x01DEEBF4 BL 0x1C16D08
	0x01DEEBF8 MOV X1, X0
	0x01DEEBFC MOV X0, X19
	0x01DEEC00 BL 0x1C16DEC
	0x01DEEC04 STP X30, X19, [X31 - 0x10]!
	0x01DEEC08 LDR X8, [X0 + 0x50]
	0x01DEEC0C CBZ X8, 0x1DEEC20
	0x01DEEC10 STP S0, S1, [X8 + 0x40]
	0x01DEEC14 STP S2, S3, [X8 + 0x48]
	0x01DEEC18 LDP X30, X19, [X31], #0x10
	0x01DEEC1C RET
	0x01DEEC20 ADRP X0, 0x2305000
	0x01DEEC24 LDR X0, [X0 + 0x5B0]
	0x01DEEC28 BL 0x1C16D08
	0x01DEEC2C BL 0x1C16F10
	0x01DEEC30 MOV X19, X0
	0x01DEEC34 ADRP X0, 0x230B000
	0x01DEEC38 LDR X0, [X0 + 0x90]
	0x01DEEC3C BL 0x1C16D08
	0x01DEEC40 MOV X1, X0
	0x01DEEC44 MOV X0, X19
	0x01DEEC48 MOV X2, X31
	0x01DEEC4C BL 0x337DF1C
	0x01DEEC50 ADRP X0, 0x230B000
	0x01DEEC54 LDR X0, [X0 + 0xA0]
	0x01DEEC58 BL 0x1C16D08
	0x01DEEC5C MOV X1, X0
	0x01DEEC60 MOV X0, X19
	0x01DEEC64 BL 0x1C16DEC
	0x01DEEC68 STP X30, X19, [X31 - 0x10]!
	0x01DEEC6C LDR X8, [X0 + 0x50]
	0x01DEEC70 CBZ X8, 0x1DEEC84

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+80], D14
	003 Move [X31+88], D13
	004 Move [X31+96], D12
	005 Move [X31+104], D11
	006 Move [X31+112], D10
	007 Move [X31+120], D9
	008 Move [X31+128], D8
	009 Move [X31+136], X30
	010 Move [X31+144], X28
	011 Move [X31+152], X27
	012 Move [X31+160], X26
	013 Move [X31+168], X25
	014 Move [X31+176], X24
	015 Move [X31+184], X23
	016 Move [X31+192], X22
	017 Move [X31+200], X21
	018 Move [X31+208], X20
	019 Move [X31+216], X19
	020 Move X20, 0x25EB000
	021 Move W8, [X20+3278]
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {35}
	027 Move X0, 0x2306000
	028 Move X0, [X0+1496]
	029 Call 0x1C17CF4
	030 Move X0, 0x2306000
	031 Move X0, [X0+1528]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+3278], W8
	035 Move X8, -19939328
	036 Move X9, -19935232
	037 Move X23, 0x2306000
	038 Move X24, 0x2306000
	039 Move V1, [X8+3984]
	040 Move V2, [X9+48]
	041 Move X23, [X23+1496]
	042 Move X24, [X24+1528]
	043 NotImplemented "Instruction MOVI not yet implemented."
	044 Move [X31+60], V0
	045 Move [X31+32], V0
	046 Move [X31+40], V0
	047 Move S0, 1
	048 Move S3, 1
	049 Move X0, X31
	050 Call Gizmos.set_color, X0
	051 Move X20, 0x2306000
	052 Move X8, -19935232
	053 Move X21, 0x2306000
	054 Move X20, [X20+1448]
	055 Move V14, [X8+380]
	056 Move X21, [X21+1440]
	057 Move W25, 5
	058 Move X26, 0x25EB000
	059 Move W27, 1
	060 Move X28, 0x25EB000
	061 Move X0, X19
	062 Move X1, X31
	063 Call Component.get_transform, X0
	064 Compare X0, 0
	065 JumpIfEqual {183}
	066 Move X1, X31
	067 Call Transform.get_position, X0
	068 Move X0, X31
	069 Move V8, V0
	070 Move V9, V1
	071 Move V10, V2
	072 Call Random.get_onUnitSphere
	073 Move W8, [X26+1925]
	074 Move V11, V0
	075 Move V12, V1
	076 Move V13, V2
	077 Compare W8, 0
	078 JumpIfNotEqual {82}
	079 Move X0, X20
	080 Call 0x1C17CF4
	081 Move [X26+1925], W27
	082 Move X0, [X20]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Multiply S0, S11, S11
	088 Multiply S1, S12, S12
	089 Add S0, S0, S1
	090 Multiply S1, S13, S13
	091 Add S0, S1, S0
	092 NotImplemented "Instruction FSQRT not yet implemented."
	093 NotImplemented "Instruction FCMP not yet implemented."
	094 NotImplemented "Instruction FDIV not yet implemented."
	095 NotImplemented "Instruction FDIV not yet implemented."
	096 NotImplemented "Instruction FDIV not yet implemented."
	097 Move W8, [X28+1923]
	098 Compare W8, 0
	099 JumpIfNotEqual {103}
	100 Move X0, X21
	101 Call 0x1C17CF4
	102 Move [X28+1923], W27
	103 Move X8, [X21]
	104 Move X8, [X8+184]
	105 Move S11, [X8]
	106 Move S12, [X8+4]
	107 Move V13, [X8+8]
	108 Move X0, [X23]
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {114}
	112 Call 0x1C17DFC
	113 Move X0, [X23]
	114 Move X8, [X0+184]
	115 Move X1, X31
	116 Move W0, [X8]
	117 Call LayerMask.op_Implicit, X0
	118 Move X8, [X24]
	119 Move W22, W0
	120 Move W9, [X8+224]
	121 Compare W9, 0
	122 JumpIfNotEqual {125}
	123 Move X0, X8
	124 Call 0x1C17DFC
	125 Add X0, X31, 8
	126 Add X1, X31, 32
	127 Move S0, 15
	128 Move W2, W22
	129 Move X3, X31
	130 Move [X31+8], S8
	131 Move [X31+16], S9
	132 Move [X31+16], S10
	133 Move [X31+24], S11
	134 Move [X31+24], S12
	135 Move [X31+32], S13
	136 Call Physics.Raycast, X0, X1, V0, X2
	137 Move TEMP, X0
	138 And TEMP, TEMP, 1
	139 Compare TEMP, 1
	140 JumpIfNotEqual {162}
	141 Move X0, X19
	142 Move X1, X31
	143 Call Component.get_transform, X0
	144 Compare X0, 0
	145 JumpIfEqual {183}
	146 Move X1, X31
	147 Call Transform.get_position, X0
	148 Add X0, X31, 32
	149 Move X1, X31
	150 Move V8, V0
	151 Move V9, V1
	152 Move V10, V2
	153 Call RaycastHit.get_point, X0
	154 Move V3, V0
	155 Move V4, V1
	156 Move V5, V2
	157 Move V0, V8
	158 Move V1, V9
	159 Move V2, V10
	160 Move X0, X31
	161 Call Gizmos.DrawLine, X0, X1
	162 Subtract W25, W25, 1
	163 Move X20, [X31+208]
	164 Move X19, [X31+216]
	165 Move X22, [X31+192]
	166 Move X21, [X31+200]
	167 Move X24, [X31+176]
	168 Move X23, [X31+184]
	169 Move X26, [X31+160]
	170 Move X25, [X31+168]
	171 Move X28, [X31+144]
	172 Move X27, [X31+152]
	173 Move X30, [X31+136]
	174 Move D9, [X31+120]
	175 Move D8, [X31+128]
	176 Move D11, [X31+104]
	177 Move D10, [X31+112]
	178 Move D13, [X31+88]
	179 Move D12, [X31+96]
	180 Move V14, [X31+80]
	181 Add X31, X31, 224
	182 Return 
	183 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DEEC74 LDP S0, S1, [X8 + 0x50]
	0x01DEEC78 LDR V2, [X8 + 0x58]

ISIL:
	001 Move X1, X31
	002 Call NetworkBehaviour..ctor, X0
	003 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01DEEC7C LDP X30, X19, [X31], #0x10
	0x01DEEC80 RET
	0x01DEEC84 ADRP X0, 0x2305000
	0x01DEEC88 LDR X0, [X0 + 0x5B0]
	0x01DEEC8C BL 0x1C16D08
	0x01DEEC90 BL 0x1C16F10
	0x01DEEC94 MOV X19, X0
	0x01DEEC98 ADRP X0, 0x230B000
	0x01DEEC9C LDR X0, [X0 + 0xA8]
	0x01DEECA0 BL 0x1C16D08
	0x01DEECA4 MOV X1, X0
	0x01DEECA8 MOV X0, X19
	0x01DEECAC MOV X2, X31
	0x01DEECB0 BL 0x337DF1C
	0x01DEECB4 ADRP X0, 0x230B000
	0x01DEECB8 LDR X0, [X0 + 0xB0]
	0x01DEECBC BL 0x1C16D08
	0x01DEECC0 MOV X1, X0
	0x01DEECC4 MOV X0, X19
	0x01DEECC8 BL 0x1C16DEC
	0x01DEECCC STP X30, X19, [X31 - 0x10]!
	0x01DEECD0 LDR X8, [X0 + 0x50]
	0x01DEECD4 CBZ X8, 0x1DEECE8
	0x01DEECD8 STP S0, S1, [X8 + 0x50]
	0x01DEECDC STR S2, [X8 + 0x58]
	0x01DEECE0 LDP X30, X19, [X31], #0x10
	0x01DEECE4 RET
	0x01DEECE8 ADRP X0, 0x2305000
	0x01DEECEC LDR X0, [X0 + 0x5B0]
	0x01DEECF0 BL 0x1C16D08
	0x01DEECF4 BL 0x1C16F10
	0x01DEECF8 MOV X19, X0
	0x01DEECFC ADRP X0, 0x230B000
	0x01DEED00 LDR X0, [X0 + 0xA8]
	0x01DEED04 BL 0x1C16D08
	0x01DEED08 MOV X1, X0
	0x01DEED0C MOV X0, X19
	0x01DEED10 MOV X2, X31
	0x01DEED14 BL 0x337DF1C
	0x01DEED18 ADRP X0, 0x230B000
	0x01DEED1C LDR X0, [X0 + 0xB8]
	0x01DEED20 BL 0x1C16D08
	0x01DEED24 MOV X1, X0
	0x01DEED28 MOV X0, X19
	0x01DEED2C BL 0x1C16DEC
	0x01DEED30 STR X30, [X31 - 0x20]!
	0x01DEED34 STP X20, X19, [X31 + 0x10]
	0x01DEED38 ADRP X20, 0x25EA000
	0x01DEED3C LDRB W8, [X20 + 0xCD7]
	0x01DEED40 MOV X19, X0
	0x01DEED44 TBNZ X8, 0x0, 0x1DEED68
	0x01DEED48 ADRP X0, 0x230B000
	0x01DEED4C LDR X0, [X0 + 0xC0]
	0x01DEED50 BL 0x1C16CF4
	0x01DEED54 ADRP X0, 0x230B000
	0x01DEED58 LDR X0, [X0 + 0xC8]
	0x01DEED5C BL 0x1C16CF4
	0x01DEED60 MOVZ W8, 0x1
	0x01DEED64 STRB W8, [X20 + 0xCD7]
	0x01DEED68 LDR X0, [X19 + 0x1D0]
	0x01DEED6C CBZ X0, 0x1DEEDD4
	0x01DEED70 ADRP X9, 0x230B000
	0x01DEED74 LDR X9, [X9 + 0xC0]
	0x01DEED78 LDR X8, [X0]
	0x01DEED7C LDR X10, [X9]
	0x01DEED80 LDRB W9, [X8 + 0x130]
	0x01DEED84 LDRB W11, [X10 + 0x130]
	0x01DEED88 CMP W9, W11
	0x01DEED8C B.CC 0x1DEEDA4
	0x01DEED90 LDR X12, [X8 + 0xC8]
	0x01DEED94 ADD X11, X12, X11, 0x3, LSL
	0x01DEED98 LDUR X11, [X11 - 0x8]
	0x01DEED9C CMP X11, X10

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X21, 0x25EB000
	008 Move X20, 0x2309000
	009 Move W8, [X21+3279]
	010 Move X20, [X20+2680]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x230C000
	017 Move X0, [X0+8]
	018 Call 0x1C17CF4
	019 Move X0, 0x2309000
	020 Move X0, [X0+2680]
	021 Call 0x1C17CF4
	022 Move X0, 0x230C000
	023 Move X0, [X0+16]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3279], W8
	027 Move X22, 0x230C000
	028 Move X21, 0x230C000
	029 Move X22, [X22+16]
	030 Move X21, [X21+8]
	031 Add X8, X31, 32
	032 Move X0, X19
	033 Call CystController.get_tetherAttachmentPoints, X0
	034 Move V0, [X31+2]
	035 Move X8, [X31+48]
	036 Move X0, [X20]
	037 Move [X31], V0
	038 Move [X31+16], X8
	039 Move W8, [X0+224]
	040 Move X20, [X19+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X2, [X22]
	045 Move V0, [X31]
	046 Move X8, [X31+16]
	047 Move X3, [X21]
	048 Add X0, X31, 32
	049 Move X1, X20
	050 Move [X31+2], V0
	051 Move [X31+48], X8
	052 Call NetworkBehaviourUtils.InitializeNetworkArray, X0, X1, X2
	053 Move X1, [X19+232]
	054 Move X0, X19
	055 Call CystController.set_target, X0, X1
	056 Move W1, [X19+240]
	057 Move X0, X19
	058 Call CystController.set_attacked, X0, X1
	059 Move S0, [X19+244]
	060 Move S1, [X19+248]
	061 Move V2, [X19+252]
	062 Move X0, X19
	063 Call CystController.set_attackVector, X0, X1
	064 Move V0, [X19+256]
	065 Move X0, X19
	066 Call CystController.set_attackTimer, X0, V0
	067 Move W1, [X19+260]
	068 Move X0, X19
	069 Call CystController.set_health, X0, X1
	070 Move W1, [X19+264]
	071 Move X0, X19
	072 Call CystController.set_isDie, X0, X1
	073 Move W1, [X19+268]
	074 Move X0, X19
	075 Call CystController.set_respawnTimer, X0, X1
	076 Move X20, [X31+96]
	077 Move X19, [X31+104]
	078 Move X22, [X31+80]
	079 Move X21, [X31+88]
	080 Move X30, [X31+64]
	081 Add X31, X31, 112
	082 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01DEEDA0 B.EQ 0x1DEEDE8
	0x01DEEDA4 ADRP X10, 0x230B000
	0x01DEEDA8 LDR X10, [X10 + 0xC8]
	0x01DEEDAC LDR X10, [X10]
	0x01DEEDB0 LDRB W11, [X10 + 0x130]
	0x01DEEDB4 CMP W9, W11
	0x01DEEDB8 B.CC 0x1DEEDD4
	0x01DEEDBC LDR X8, [X8 + 0xC8]
	0x01DEEDC0 ADD X8, X8, X11, 0x3, LSL
	0x01DEEDC4 LDUR X8, [X8 - 0x8]
	0x01DEEDC8 CMP X8, X10
	0x01DEEDCC CSEL X0, X0, X31, EQ
	0x01DEEDD0 B.EQ 0x1DEEDF8
	0x01DEEDD4 ADRP X8, 0xFFFFFFFFFECFC000
	0x01DEEDD8 LDR V0, [X8 + 0x44C]
	0x01DEEDDC LDP X20, X19, [X31 + 0x10]
	0x01DEEDE0 LDR X30, [X31], #0x20
	0x01DEEDE4 RET
	0x01DEEDE8 LDP X20, X19, [X31 + 0x10]
	0x01DEEDEC MOV X1, X31
	0x01DEEDF0 LDR X30, [X31], #0x20
	0x01DEEDF4 B 0x3C8FD60
	0x01DEEDF8 CBZ X0, 0x1DEEE0C
	0x01DEEDFC LDP X20, X19, [X31 + 0x10]
	0x01DEEE00 MOV X1, X31
	0x01DEEE04 LDR X30, [X31], #0x20
	0x01DEEE08 B 0x3C90124
	0x01DEEE0C BL 0x1C16F20
	0x01DEEE10 STR X30, [X31 - 0x10]!
	0x01DEEE14 LDR X0, [X0 + 0x1D8]
	0x01DEEE18 CBZ X0, 0x1DEEE28
	0x01DEEE1C MOV X1, X31
	0x01DEEE20 LDR X30, [X31], #0x10
	0x01DEEE24 B 0x3C90124
	0x01DEEE28 BL 0x1C16F20
	0x01DEEE2C STR X30, [X31 - 0x10]!
	0x01DEEE30 LDR X0, [X0 + 0x38]
	0x01DEEE34 CBZ X0, 0x1DEEE50
	0x01DEEE38 MOV X1, X31
	0x01DEEE3C BL 0x1E9E550
	0x01DEEE40 FMOV S1, 10
	0x01DEEE44 FDIV S0, S0, S1
	0x01DEEE48 LDR X30, [X31], #0x10
	0x01DEEE4C RET
	0x01DEEE50 BL 0x1C16F20
	0x01DEEE54 STR X30, [X31 - 0x30]!
	0x01DEEE58 STP X22, X21, [X31 + 0x10]
	0x01DEEE5C STP X20, X19, [X31 + 0x20]
	0x01DEEE60 ADRP X21, 0x25EA000
	0x01DEEE64 LDRB W9, [X21 + 0xCD8]
	0x01DEEE68 MOV X20, X0
	0x01DEEE6C MOV X19, X8
	0x01DEEE70 TBNZ X9, 0x0, 0x1DEEE88
	0x01DEEE74 ADRP X0, 0x230B000
	0x01DEEE78 LDR X0, [X0 + 0xD0]
	0x01DEEE7C BL 0x1C16CF4
	0x01DEEE80 MOVZ W8, 0x1
	0x01DEEE84 STRB W8, [X21 + 0xCD8]
	0x01DEEE88 LDR X21, [X20 + 0x50]
	0x01DEEE8C CBZ X21, 0x1DEEEE0
	0x01DEEE90 ADRP X22, 0x230B000
	0x01DEEE94 LDR X22, [X22 + 0xD0]
	0x01DEEE98 MOV X0, X31
	0x01DEEE9C BL 0x1D798D4
	0x01DEEEA0 MOV X20, X0
	0x01DEEEA4 MOV X0, X31

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, 0x25EB000
	007 Move X20, 0x2309000
	008 Move W8, [X21+3280]
	009 Move X20, [X20+2680]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x230C000
	016 Move X0, [X0+24]
	017 Call 0x1C17CF4
	018 Move X0, 0x2309000
	019 Move X0, [X0+2680]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3280], W8
	023 Move X21, 0x230C000
	024 Move X21, [X21+24]
	025 Add X8, X31, 32
	026 Move X0, X19
	027 Call CystController.get_tetherAttachmentPoints, X0
	028 Move V0, [X31+2]
	029 Move X8, [X31+48]
	030 Move X0, [X20]
	031 Move [X31], V0
	032 Move [X31+16], X8
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move V0, [X31]
	038 Move X8, [X31+16]
	039 Move X2, [X21]
	040 Add X1, X19, 224
	041 Add X0, X31, 32
	042 Move [X31+2], V0
	043 Move [X31+48], X8
	044 Call NetworkBehaviourUtils.CopyFromNetworkArray, X0, X1
	045 Move X0, X19
	046 Call CystController.get_target, X0
	047 Move [X19+232], X0
	048 Move X0, X19
	049 Call CystController.get_attacked, X0
	050 And W8, W0, 1
	051 Move X0, X19
	052 Move [X19+240], W8
	053 Call CystController.get_attackVector, X0
	054 Move X0, X19
	055 Move [X19+244], S0
	056 Move [X19+252], S1
	057 Move [X19+252], S2
	058 Call CystController.get_attackTimer, X0
	059 Move X0, X19
	060 Move [X19+256], S0
	061 Call CystController.get_health, X0
	062 Move [X19+260], W0
	063 Move X0, X19
	064 Call CystController.get_isDie, X0
	065 And W8, W0, 1
	066 Move X0, X19
	067 Move [X19+264], W8
	068 Call CystController.get_respawnTimer, X0
	069 Move [X19+268], W0
	070 Move X20, [X31+80]
	071 Move X19, [X31+88]
	072 Move X30, [X31+64]
	073 Move X21, [X31+72]
	074 Add X31, X31, 96
	075 Return 

Method: System.Void RPC_ServerBreakTether@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01DEEEA8 BL 0x1D79990
	0x01DEEEAC MOVI V0.2D, 0x0
	0x01DEEEB0 MOV X4, X0
	0x01DEEEB4 LDR X5, [X22]
	0x01DEEEB8 STP V0, V0, [X19]
	0x01DEEEBC ADD X1, X21, 0x5C
	0x01DEEEC0 STP V0, V0, [X19 + 0x20]
	0x01DEEEC4 MOV X0, X19
	0x01DEEEC8 MOV X3, X20
	0x01DEEECC LDP X20, X19, [X31 + 0x20]
	0x01DEEED0 LDP X22, X21, [X31 + 0x10]
	0x01DEEED4 MOVZ W2, 0x11
	0x01DEEED8 LDR X30, [X31], #0x30
	0x01DEEEDC B 0x241582C
	0x01DEEEE0 ADRP X0, 0x2305000
	0x01DEEEE4 LDR X0, [X0 + 0x5B0]
	0x01DEEEE8 BL 0x1C16D08
	0x01DEEEEC BL 0x1C16F10
	0x01DEEEF0 MOV X19, X0
	0x01DEEEF4 ADRP X0, 0x230B000
	0x01DEEEF8 LDR X0, [X0 + 0xD8]
	0x01DEEEFC BL 0x1C16D08
	0x01DEEF00 MOV X1, X0
	0x01DEEF04 MOV X0, X19
	0x01DEEF08 MOV X2, X31
	0x01DEEF0C BL 0x337DF1C
	0x01DEEF10 ADRP X0, 0x230B000
	0x01DEEF14 LDR X0, [X0 + 0xE0]
	0x01DEEF18 BL 0x1C16D08
	0x01DEEF1C MOV X1, X0
	0x01DEEF20 MOV X0, X19
	0x01DEEF24 BL 0x1C16DEC
	0x01DEEF28 STR X30, [X31 - 0x10]!
	0x01DEEF2C LDR X0, [X0 + 0xD0]
	0x01DEEF30 CBZ X0, 0x1DEEF40
	0x01DEEF34 MOV X1, X31
	0x01DEEF38 LDR X30, [X31], #0x10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25EB000
	006 Move W8, [X21+3281]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x230C000
	014 Move X0, [X0+32]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3281], W8
	018 Compare X19, 0
	019 JumpIfEqual {45}
	020 Move X8, 0x230C000
	021 Move X8, [X8+32]
	022 Move W9, 1
	023 Move W1, [X20+36]
	024 Move W2, [X20+40]
	025 Move [X19+88], W9
	026 Move X9, [X19]
	027 Move X8, [X8]
	028 Move W11, [X9+304]
	029 Move W10, [X8+304]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X9, [X9+200]
	032 Add X9, X9, X10
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call CystController.RPC_ServerBreakTether, X0, X1, X2
	041 Return 
	042 Move X0, X19
	043 Move X1, X8
	044 Call 0x1C181E0
	045 Call 0x1C17F20

Method: System.Void RPC_Hit@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01DEEF3C B 0x3C3F58C
	0x01DEEF40 BL 0x1C16F20
	0x01DEEF44 STP X30, X19, [X31 - 0x10]!
	0x01DEEF48 MOV X19, X0
	0x01DEEF4C BL 0x1DEEAE0
	0x01DEEF50 CMP W0, 0x3
	0x01DEEF54 B.EQ 0x1DEEF68
	0x01DEEF58 MOV X0, X19
	0x01DEEF5C BL 0x1DEEAE0
	0x01DEEF60 CMP W0, 0x4
	0x01DEEF64 B.NE 0x1DEEF70
	0x01DEEF68 MOVZ W0, 0x1
	0x01DEEF6C B 0x1DEEF80
	0x01DEEF70 MOV X0, X19
	0x01DEEF74 BL 0x1DEEAE0
	0x01DEEF78 CMP W0, 0x5
	0x01DEEF7C CSET W0, EQ
	0x01DEEF80 LDP X30, X19, [X31], #0x10
	0x01DEEF84 RET
	0x01DEEF88 STP X30, X21, [X31 - 0x20]!
	0x01DEEF8C STP X20, X19, [X31 + 0x10]
	0x01DEEF90 ADRP X20, 0x25EA000
	0x01DEEF94 ADRP X21, 0x230B000
	0x01DEEF98 LDRB W8, [X20 + 0xCD9]
	0x01DEEF9C LDR X21, [X21 + 0xE8]
	0x01DEEFA0 MOV X19, X0
	0x01DEEFA4 TBNZ X8, 0x0, 0x1DEEFBC
	0x01DEEFA8 ADRP X0, 0x230B000
	0x01DEEFAC LDR X0, [X0 + 0xE8]
	0x01DEEFB0 BL 0x1C16CF4
	0x01DEEFB4 MOVZ W8, 0x1
	0x01DEEFB8 STRB W8, [X20 + 0xCD9]
	0x01DEEFBC LDR X2, [X21]
	0x01DEEFC0 MOVZ W1, 0x1
	0x01DEEFC4 MOV X0, X19
	0x01DEEFC8 BL 0x21A45B8
	0x01DEEFCC STR X0, [X19 + 0x1E0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25EB000
	006 Move W8, [X21+3282]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x230C000
	014 Move X0, [X0+32]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3282], W8
	018 Compare X19, 0
	019 JumpIfEqual {44}
	020 Move X8, 0x230C000
	021 Move X8, [X8+32]
	022 Move W9, 1
	023 Move W1, [X20+36]
	024 Move [X19+88], W9
	025 Move X9, [X19]
	026 Move X8, [X8]
	027 Move W11, [X9+304]
	028 Move W10, [X8+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X9, [X9+200]
	031 Add X9, X9, X10
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Call CystController.RPC_Hit, X0, X1
	040 Return 
	041 Move X0, X19
	042 Move X1, X8
	043 Call 0x1C181E0
	044 Call 0x1C17F20

