Type: AnimalCompany.CystController

Method: Fusion.NetworkArray`1<UnityEngine.Vector3> get_tetherAttachmentPoints()

Disassembly:
	0x01CE258C LDR X0, [X0]
	0x01CE2590 BL 0x1B6E7F0
	0x01CE2594 ADRP X0, 0x226E000
	0x01CE2598 LDR X0, [X0 + 0x8]
	0x01CE259C BL 0x1B6E7F0
	0x01CE25A0 MOVZ W8, 0x1
	0x01CE25A4 STRB W8, [X20 + 0x64D]
	0x01CE25A8 STP X31, X31, [X31 + 0x20]
	0x01CE25AC STR X31, [X31 + 0x30]
	0x01CE25B0 LDR X8, [X19 + 0xD8]
	0x01CE25B4 CBZ X8, 0x1CE26E0
	0x01CE25B8 ADRP X24, 0x226E000
	0x01CE25BC ADRP X25, 0x226E000
	0x01CE25C0 ADRP X21, 0x226B000
	0x01CE25C4 ADRP X22, 0x226C000
	0x01CE25C8 LDR X24, [X24 + 0x8]
	0x01CE25CC LDR X25, [X25]
	0x01CE25D0 LDR X21, [X21 + 0x480]
	0x01CE25D4 LDR X22, [X22 + 0x1F8]
	0x01CE25D8 MOV W20, W31
	0x01CE25DC ADRP X26, 0x2541000
	0x01CE25E0 MOVZ W27, 0x1
	0x01CE25E4 ADRP X28, 0x2541000
	0x01CE25E8 LDR W8, [X8 + 0x18]
	0x01CE25EC CMP W20, W8
	0x01CE25F0 B.GE 0x1CE26E4
	0x01CE25F4 ADD X8, X31, 0x8
	0x01CE25F8 MOV X0, X19
	0x01CE25FC BL 0x1CE158C
	0x01CE2600 LDUR V0, [X31 + 0x8]
	0x01CE2604 LDR X8, [X31 + 0x18]
	0x01CE2608 LDRB W9, [X26 + 0x43F]
	0x01CE260C STR V0, [X31 + 0x2]
	0x01CE2610 STR X8, [X31 + 0x30]
	0x01CE2614 CBNZ W9, 0x1CE2624
	0x01CE2618 MOV X0, X21
	0x01CE261C BL 0x1B6E7F0
	0x01CE2620 STRB W27, [X26 + 0x43F]
	0x01CE2624 LDR X8, [X21]
	0x01CE2628 LDR X2, [X24]
	0x01CE262C ADD X0, X31, 0x20
	0x01CE2630 MOV W1, W20
	0x01CE2634 LDR X8, [X8 + 0xB8]
	0x01CE2638 LDP S0, S1, [X8]
	0x01CE263C LDR V2, [X8 + 0x8]
	0x01CE2640 BL 0x22B1F94

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2542000
	006 Move W9, [X21+1605]
	007 Move X20, X0
	008 Move X19, X8
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x226E000
	014 Move X0, [X0+3880]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1605], W8
	018 Move X20, [X20+80]
	019 Compare X20, 0
	020 JumpIfEqual {39}
	021 Move X21, 0x226E000
	022 Move X21, [X21+3880]
	023 Move X0, X31
	024 Call ReaderWriter@UnityEngine_Vector3.GetInstance
	025 Move X3, X0
	026 Move X4, [X21]
	027 Move [X19+8], X31
	028 Move [X19+16], X31
	029 Move [X19], X31
	030 Move X0, X19
	031 Move X1, X20
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move W2, 10
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call NetworkArray`1<Vector3>..ctor, X0, X1, X2, X3
	038 Return X0
	039 Move X0, 0x226C000
	040 Move X0, [X0+1168]
	041 Call 0x1B6F804
	042 Call 0x1B6FA0C
	043 Move X19, X0
	044 Move X0, 0x226E000
	045 Move X0, [X0+3888]
	046 Call 0x1B6F804
	047 Move X1, X0
	048 Move X0, X19
	049 Move X2, X31
	050 Call InvalidOperationException..ctor, X0, X1
	051 Move X0, 0x226E000
	052 Move X0, [X0+3896]
	053 Call 0x1B6F804
	054 Move X1, X0
	055 Move X0, X19
	056 Call 0x1B6F8E8

Method: AnimalCompany.NetPlayer get_target()

Disassembly:
	0x01CE2644 LDR X0, [X19 + 0xD8]
	0x01CE2648 CBZ X0, 0x1CE26E0
	0x01CE264C LDR X2, [X25]
	0x01CE2650 MOV W1, W20
	0x01CE2654 BL 0x2E46254
	0x01CE2658 CBZ X0, 0x1CE26E0
	0x01CE265C MOV X1, X31
	0x01CE2660 BL 0x3A9B084
	0x01CE2664 CBZ X0, 0x1CE26E0
	0x01CE2668 FMOV S0, 1
	0x01CE266C FMOV S1, 1
	0x01CE2670 FMOV S2, W31
	0x01CE2674 MOV X1, X31
	0x01CE2678 BL 0x3AA7D18
	0x01CE267C LDR X0, [X19 + 0xD8]
	0x01CE2680 CBZ X0, 0x1CE26E0
	0x01CE2684 LDR X2, [X25]
	0x01CE2688 MOV W1, W20
	0x01CE268C BL 0x2E46254
	0x01CE2690 CBZ X0, 0x1CE26E0
	0x01CE2694 MOV X1, X31
	0x01CE2698 BL 0x3A9B084
	0x01CE269C LDRB W8, [X28 + 0x454]
	0x01CE26A0 MOV X23, X0
	0x01CE26A4 CBNZ W8, 0x1CE26B4
	0x01CE26A8 MOV X0, X22
	0x01CE26AC BL 0x1B6E7F0
	0x01CE26B0 STRB W27, [X28 + 0x454]
	0x01CE26B4 CBZ X23, 0x1CE26E0
	0x01CE26B8 LDR X8, [X22]
	0x01CE26BC MOV X0, X23
	0x01CE26C0 MOV X1, X31
	0x01CE26C4 LDR X8, [X8 + 0xB8]
	0x01CE26C8 LDP S2, S3, [X8 + 0x8]
	0x01CE26CC LDP S0, S1, [X8]
	0x01CE26D0 BL 0x3AA7878
	0x01CE26D4 LDR X8, [X19 + 0xD8]
	0x01CE26D8 ADD W20, W20, 0x1
	0x01CE26DC CBNZ X8, 0x1CE25E8
	0x01CE26E0 BL 0x1B6EA1C
	0x01CE26E4 LDP X20, X19, [X31 + 0x90]
	0x01CE26E8 LDP X22, X21, [X31 + 0x80]
	0x01CE26EC LDP X24, X23, [X31 + 0x70]
	0x01CE26F0 LDP X26, X25, [X31 + 0x60]
	0x01CE26F4 LDP X28, X27, [X31 + 0x50]
	0x01CE26F8 LDR X30, [X31 + 0x40]
	0x01CE26FC ADD X31, X31, 0xA0
	0x01CE2700 RET
	0x01CE2704 SUB X31, X31, 0x150
	0x01CE2708 STP D15, D14, [X31 + 0xB0]
	0x01CE270C STP D13, D12, [X31 + 0xC0]
	0x01CE2710 STP D11, D10, [X31 + 0xD0]
	0x01CE2714 STP D9, D8, [X31 + 0xE0]
	0x01CE2718 STP X29, X30, [X31 + 0xF0]
	0x01CE271C STP X28, X27, [X31 + 0x100]
	0x01CE2720 STP X26, X25, [X31 + 0x110]
	0x01CE2724 STP X24, X23, [X31 + 0x120]
	0x01CE2728 STP X22, X21, [X31 + 0x130]
	0x01CE272C STP X20, X19, [X31 + 0x140]
	0x01CE2730 ADRP X20, 0x2541000
	0x01CE2734 LDRB W8, [X20 + 0x64E]
	0x01CE2738 MOV X19, X0
	0x01CE273C TBNZ X8, 0x0, 0x1CE279C
	0x01CE2740 ADRP X0, 0x226C000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2542000
	005 Move W8, [X20+1606]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x226D000
	012 Move X0, [X0+680]
	013 Call 0x1B6F7F0
	014 Move X0, 0x226E000
	015 Move X0, [X0+3904]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1606], W8
	019 Move X8, [X19+80]
	020 Compare X8, 0
	021 JumpIfEqual {52}
	022 Move [X31+8], X31
	023 Move X0, [X19+56]
	024 Move X19, 0x226E000
	025 Move X19, [X19+3904]
	026 Add X1, X8, 120
	027 Add X2, X31, 8
	028 Move X3, X31
	029 Call NetworkBehaviour.NetworkDeserialize, X0, X1, X2
	030 Move X2, [X19]
	031 Move W1, 8
	032 Call 0x2125C78, X0, X1
	033 Move X0, [X31+8]
	034 Compare X0, 0
	035 JumpIfEqual {47}
	036 Move X9, 0x226D000
	037 Move X9, [X9+680]
	038 Move X8, [X0]
	039 Move X1, [X9]
	040 Move W10, [X8+304]
	041 Move W9, [X1+304]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X8, [X8+200]
	044 Add X8, X8, X9
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Return X0
	051 Call 0x1B6FCDC
	052 Move X0, 0x226C000
	053 Move X0, [X0+1168]
	054 Call 0x1B6F804
	055 Call 0x1B6FA0C
	056 Move X19, X0
	057 Move X0, 0x226E000
	058 Move X0, [X0+3912]
	059 Call 0x1B6F804
	060 Move X1, X0
	061 Move X0, X19
	062 Move X2, X31
	063 Call InvalidOperationException..ctor, X0, X1
	064 Move X0, 0x226E000
	065 Move X0, [X0+3920]
	066 Call 0x1B6F804
	067 Move X1, X0
	068 Move X0, X19
	069 Call 0x1B6F8E8

Method: System.Void set_target(AnimalCompany.NetPlayer value)

Disassembly:
	0x01CE2744 LDR X0, [X0 + 0x3D8]
	0x01CE2748 BL 0x1B6E7F0
	0x01CE274C ADRP X0, 0x226D000
	0x01CE2750 LDR X0, [X0 + 0xFF8]
	0x01CE2754 BL 0x1B6E7F0
	0x01CE2758 ADRP X0, 0x226E000
	0x01CE275C LDR X0, [X0]
	0x01CE2760 BL 0x1B6E7F0
	0x01CE2764 ADRP X0, 0x226E000
	0x01CE2768 LDR X0, [X0 + 0x20]
	0x01CE276C BL 0x1B6E7F0
	0x01CE2770 ADRP X0, 0x226B000
	0x01CE2774 LDR X0, [X0 + 0x478]
	0x01CE2778 BL 0x1B6E7F0
	0x01CE277C ADRP X0, 0x226B000
	0x01CE2780 LDR X0, [X0 + 0x4C0]
	0x01CE2784 BL 0x1B6E7F0
	0x01CE2788 ADRP X0, 0x226E000
	0x01CE278C LDR X0, [X0 + 0x28]
	0x01CE2790 BL 0x1B6E7F0
	0x01CE2794 MOVZ W8, 0x1
	0x01CE2798 STRB W8, [X20 + 0x64E]
	0x01CE279C MOVI V0.2D, 0x0
	0x01CE27A0 STR W31, [X31 + 0xA8]
	0x01CE27A4 STP X31, X31, [X31 + 0x50]
	0x01CE27A8 STUR V0, [X31 + 0x8C]
	0x01CE27AC STP V0, V0, [X31 + 0x70]
	0x01CE27B0 STR X31, [X31 + 0x60]
	0x01CE27B4 LDR X0, [X19 + 0x40]
	0x01CE27B8 CBZ X0, 0x1CE35DC
	0x01CE27BC LDRB W8, [X0 + 0x60]
	0x01CE27C0 TBNZ X8, 0x1, 0x1CE35DC
	0x01CE27C4 MOV X1, X31
	0x01CE27C8 BL 0x1D9E780
	0x01CE27CC TBZ X0, 0x0, 0x1CE35DC
	0x01CE27D0 MOV X0, X19
	0x01CE27D4 BL 0x1CE1B04
	0x01CE27D8 TBZ X0, 0x0, 0x1CE283C
	0x01CE27DC MOV X0, X19
	0x01CE27E0 BL 0x1CE1BD0
	0x01CE27E4 STR W0, [X31 + 0xA8]
	0x01CE27E8 LDR X1, [X19 + 0x38]
	0x01CE27EC ADD X0, X31, 0xA8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2542000
	006 Move W8, [X21+1607]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x226E000
	014 Move X0, [X0+3928]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1607], W8
	018 Move X8, [X20+80]
	019 Compare X8, 0
	020 JumpIfEqual {35}
	021 Move X20, 0x226E000
	022 Move X20, [X20+3928]
	023 Add X1, X8, 120
	024 Move X0, X19
	025 Move X2, X31
	026 Call NetworkBehaviour.NetworkSerialize, X0, X1
	027 Move X2, [X20]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move W1, 8
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call 0x2125EA8, X0, X1
	034 Return 
	035 Move X0, 0x226C000
	036 Move X0, [X0+1168]
	037 Call 0x1B6F804
	038 Call 0x1B6FA0C
	039 Move X19, X0
	040 Move X0, 0x226E000
	041 Move X0, [X0+3912]
	042 Call 0x1B6F804
	043 Move X1, X0
	044 Move X0, X19
	045 Move X2, X31
	046 Call InvalidOperationException..ctor, X0, X1
	047 Move X0, 0x226E000
	048 Move X0, [X0+3936]
	049 Call 0x1B6F804
	050 Move X1, X0
	051 Move X0, X19
	052 Call 0x1B6F8E8

Method: System.Boolean get_attacked()

Disassembly:
	0x01CE27F0 MOV X2, X31
	0x01CE27F4 BL 0x1D9CBCC
	0x01CE27F8 TBZ X0, 0x0, 0x1CE35DC
	0x01CE27FC MOVZ W1, 0x64
	0x01CE2800 MOV X0, X19
	0x01CE2804 BL 0x1CE1AA4
	0x01CE2808 LDR X0, [X19 + 0x80]
	0x01CE280C CBZ X0, 0x1CE360C
	0x01CE2810 MOVZ W1, 0x1
	0x01CE2814 MOV X2, X31
	0x01CE2818 BL 0x3A9D9A8
	0x01CE281C MOV X0, X19
	0x01CE2820 MOV W1, W31
	0x01CE2824 BL 0x1CE1B6C
	0x01CE2828 MOV X0, X31
	0x01CE282C BL 0x1D9CB50
	0x01CE2830 AND X1, X0, 0x0
	0x01CE2834 MOV X0, X19
	0x01CE2838 BL 0x1CE1C30
	0x01CE283C MOV X0, X19
	0x01CE2840 BL 0x1CE1644
	0x01CE2844 ADRP X8, 0x226B000
	0x01CE2848 LDR X8, [X8 + 0x478]
	0x01CE284C MOV X20, X0
	0x01CE2850 LDR X8, [X8]
	0x01CE2854 LDR W9, [X8 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+128]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x226C000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x226E000
	018 Move X0, [X0+3944]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x226E000
	025 Move X0, [X0+3952]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Void set_attacked(System.Boolean value)

Disassembly:
	0x01CE2858 CBNZ W9, 0x1CE2864
	0x01CE285C MOV X0, X8
	0x01CE2860 BL 0x1B6E8F8
	0x01CE2864 MOV X0, X20
	0x01CE2868 MOV X1, X31
	0x01CE286C MOV X2, X31
	0x01CE2870 BL 0x3AA0AF0
	0x01CE2874 ADRP X20, 0x226B000
	0x01CE2878 ADRP X21, 0x226B000
	0x01CE287C LDR X20, [X20 + 0x480]
	0x01CE2880 LDR X21, [X21 + 0x488]
	0x01CE2884 ADRP X24, 0x2541000
	0x01CE2888 ADRP X25, 0x2541000
	0x01CE288C TBZ X0, 0x0, 0x1CE2A44
	0x01CE2890 LDR X22, [X19 + 0x90]
	0x01CE2894 CBZ X22, 0x1CE360C
	0x01CE2898 MOV X0, X22
	0x01CE289C MOV X1, X31
	0x01CE28A0 BL 0x3AA6C80
	0x01CE28A4 LDRB W8, [X24 + 0x43F]
	0x01CE28A8 MOV V8.16B, V0.16B
	0x01CE28AC MOV V9.16B, V1.16B
	0x01CE28B0 MOV V10.16B, V2.16B
	0x01CE28B4 CBNZ W8, 0x1CE28CC
	0x01CE28B8 ADRP X0, 0x226B000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+128], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x226C000
	012 Move X0, [X0+1168]
	013 Call 0x1B6F804
	014 Call 0x1B6FA0C
	015 Move X19, X0
	016 Move X0, 0x226E000
	017 Move X0, [X0+3944]
	018 Call 0x1B6F804
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x226E000
	024 Move X0, [X0+3960]
	025 Call 0x1B6F804
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1B6F8E8

Method: UnityEngine.Vector3 get_attackVector()

Disassembly:
	0x01CE28BC LDR X0, [X0 + 0x480]
	0x01CE28C0 BL 0x1B6E7F0
	0x01CE28C4 MOVZ W8, 0x1
	0x01CE28C8 STRB W8, [X24 + 0x43F]
	0x01CE28CC LDR X0, [X19 + 0x38]
	0x01CE28D0 CBZ X0, 0x1CE360C
	0x01CE28D4 LDR X8, [X20]
	0x01CE28D8 MOV X1, X31
	0x01CE28DC LDR X8, [X8 + 0xB8]
	0x01CE28E0 LDP S12, S11, [X8 + 0x4]
	0x01CE28E4 LDR V13, [X8]
	0x01CE28E8 BL 0x1D87058
	0x01CE28EC FMOV S1, 1
	0x01CE28F0 FCMP S0, 0x0
	0x01CE28F4 FMOV S2, W31
	0x01CE28F8 FMIN S0, S0, S1
	0x01CE28FC FSUB S3, S13, S8
	0x01CE2900 FSUB S4, S12, S9
	0x01CE2904 FSUB S5, S11, S10
	0x01CE2908 FCSEL S0, S0, S2, PL
	0x01CE290C FMUL S1, S3, S0
	0x01CE2910 FMUL S2, S4, S0
	0x01CE2914 FMUL S3, S5, S0
	0x01CE2918 FADD S0, S8, S1
	0x01CE291C FADD S1, S9, S2

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move S0, [X8+132]
	007 Move S1, [X8+136]
	008 Move V2, [X8+140]
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x226C000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x226E000
	018 Move X0, [X0+3968]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x226E000
	025 Move X0, [X0+3976]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Void set_attackVector(UnityEngine.Vector3 value)

Disassembly:
	0x01CE2920 FADD S2, S10, S3
	0x01CE2924 MOV X0, X22
	0x01CE2928 MOV X1, X31
	0x01CE292C BL 0x3AA6D0C
	0x01CE2930 LDR X22, [X19 + 0x88]
	0x01CE2934 CBZ X22, 0x1CE360C
	0x01CE2938 MOV X0, X22
	0x01CE293C MOV X1, X31
	0x01CE2940 BL 0x3AA5FBC
	0x01CE2944 ADRP X8, 0xFFFFFFFFFEDC7000
	0x01CE2948 MOV V8.16B, V0.16B
	0x01CE294C LDR V0, [X8 + 0xB94]
	0x01CE2950 MOV V9.16B, V1.16B
	0x01CE2954 MOV V10.16B, V2.16B
	0x01CE2958 FMOV S1, W31
	0x01CE295C FMOV S2, W31
	0x01CE2960 MOV X0, X31
	0x01CE2964 MOV V11.16B, V3.16B
	0x01CE2968 BL 0x3A928DC
	0x01CE296C LDR X0, [X19 + 0x38]
	0x01CE2970 CBZ X0, 0x1CE360C
	0x01CE2974 MOV X1, X31
	0x01CE2978 MOV V12.16B, V0.16B
	0x01CE297C MOV V13.16B, V1.16B
	0x01CE2980 MOV V14.16B, V2.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move [X8+132], S0
	007 Move [X8+140], S1
	008 Move [X8+140], S2
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 
	012 Move X0, 0x226C000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x226E000
	018 Move X0, [X0+3968]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x226E000
	025 Move X0, [X0+3984]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Single get_attackTimer()

Disassembly:
	0x01CE2984 MOV V15.16B, V3.16B
	0x01CE2988 BL 0x1D87058
	0x01CE298C STR S0, [X31]
	0x01CE2990 MOV V0.16B, V8.16B
	0x01CE2994 MOV V1.16B, V9.16B
	0x01CE2998 MOV V2.16B, V10.16B
	0x01CE299C MOV V3.16B, V11.16B
	0x01CE29A0 MOV V4.16B, V12.16B
	0x01CE29A4 MOV V5.16B, V13.16B
	0x01CE29A8 MOV V6.16B, V14.16B
	0x01CE29AC MOV V7.16B, V15.16B
	0x01CE29B0 MOV X0, X31
	0x01CE29B4 BL 0x3A92808
	0x01CE29B8 MOV X0, X22
	0x01CE29BC MOV X1, X31
	0x01CE29C0 BL 0x3AA7878
	0x01CE29C4 LDR X22, [X19 + 0x98]
	0x01CE29C8 CBZ X22, 0x1CE360C
	0x01CE29CC MOV X0, X22
	0x01CE29D0 MOV X1, X31
	0x01CE29D4 BL 0x3AA7C78
	0x01CE29D8 LDR X0, [X19 + 0x38]
	0x01CE29DC CBZ X0, 0x1CE360C
	0x01CE29E0 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+144]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x226C000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226E000
	016 Move X0, [X0+3992]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226E000
	023 Move X0, [X0+4000]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_attackTimer(System.Single value)

Disassembly:
	0x01CE29E4 MOV V8.16B, V0.16B
	0x01CE29E8 MOV V9.16B, V1.16B
	0x01CE29EC MOV V10.16B, V2.16B
	0x01CE29F0 BL 0x1D87058
	0x01CE29F4 FMOV S1, 12
	0x01CE29F8 FMOV S2, 1
	0x01CE29FC FMUL S0, S0, S1
	0x01CE2A00 FMOV S3, W31
	0x01CE2A04 FCMP S0, 0x0
	0x01CE2A08 FMIN S0, S0, S2
	0x01CE2A0C FSUB S1, S2, S8
	0x01CE2A10 FSUB S2, S2, S9
	0x01CE2A14 FCSEL S0, S0, S3, PL
	0x01CE2A18 FSUB S3, S3, S10
	0x01CE2A1C FMUL S1, S1, S0
	0x01CE2A20 FMUL S2, S2, S0
	0x01CE2A24 FMUL S3, S3, S0
	0x01CE2A28 FADD S0, S8, S1
	0x01CE2A2C FADD S1, S9, S2
	0x01CE2A30 FADD S2, S10, S3
	0x01CE2A34 MOV X0, X22
	0x01CE2A38 MOV X1, X31
	0x01CE2A3C BL 0x3AA7D18
	0x01CE2A40 B 0x1CE32AC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+144], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x226C000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226E000
	016 Move X0, [X0+3992]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226E000
	023 Move X0, [X0+4008]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Int32 get_health()

Disassembly:
	0x01CE2A44 MOV X0, X19
	0x01CE2A48 BL 0x1CE1984
	0x01CE2A4C LDR X0, [X19 + 0x38]
	0x01CE2A50 CBZ X0, 0x1CE360C
	0x01CE2A54 MOV X1, X31
	0x01CE2A58 MOV V8.16B, V0.16B
	0x01CE2A5C BL 0x1D87058
	0x01CE2A60 FADD S0, S8, S0
	0x01CE2A64 MOV X0, X19
	0x01CE2A68 BL 0x1CE19E4
	0x01CE2A6C MOV X0, X19
	0x01CE2A70 BL 0x1CE1984
	0x01CE2A74 FMOV S1, 2
	0x01CE2A78 FCMP S0, S1
	0x01CE2A7C B.GE 0x1CE2BEC
	0x01CE2A80 LDR X22, [X19 + 0x90]
	0x01CE2A84 CBZ X22, 0x1CE360C
	0x01CE2A88 MOV X0, X22
	0x01CE2A8C MOV X1, X31
	0x01CE2A90 BL 0x3AA6C80
	0x01CE2A94 LDR X0, [X19 + 0x38]
	0x01CE2A98 CBZ X0, 0x1CE360C
	0x01CE2A9C MOV X1, X31
	0x01CE2AA0 MOV V8.16B, V0.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+148]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x226C000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226E000
	016 Move X0, [X0+4016]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226E000
	023 Move X0, [X0+4024]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_health(System.Int32 value)

Disassembly:
	0x01CE2AA4 MOV V9.16B, V1.16B
	0x01CE2AA8 MOV V10.16B, V2.16B
	0x01CE2AAC BL 0x1D87058
	0x01CE2AB0 FADD S0, S0, S0
	0x01CE2AB4 FMOV S1, 1
	0x01CE2AB8 FMOV S2, W31
	0x01CE2ABC FMOV S3, 0.5
	0x01CE2AC0 FMIN S1, S0, S1
	0x01CE2AC4 FCMP S0, 0x0
	0x01CE2AC8 FSUB S0, S2, S8
	0x01CE2ACC FCSEL S1, S1, S2, PL
	0x01CE2AD0 FSUB S2, S2, S9
	0x01CE2AD4 FSUB S3, S3, S10
	0x01CE2AD8 FMUL S0, S0, S1
	0x01CE2ADC FMUL S2, S2, S1
	0x01CE2AE0 FMUL S3, S3, S1
	0x01CE2AE4 FADD S0, S8, S0
	0x01CE2AE8 FADD S1, S9, S2
	0x01CE2AEC FADD S2, S10, S3
	0x01CE2AF0 MOV X0, X22
	0x01CE2AF4 MOV X1, X31
	0x01CE2AF8 BL 0x3AA6D0C
	0x01CE2AFC MOV X0, X19
	0x01CE2B00 BL 0x1CE1644

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+148], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x226C000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226E000
	016 Move X0, [X0+4016]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226E000
	023 Move X0, [X0+4032]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Boolean get_isDie()

Disassembly:
	0x01CE2B04 CBZ X0, 0x1CE360C
	0x01CE2B08 MOV X1, X31
	0x01CE2B0C BL 0x3A9B084
	0x01CE2B10 CBZ X0, 0x1CE360C
	0x01CE2B14 MOV X1, X31
	0x01CE2B18 BL 0x3AA7658
	0x01CE2B1C MOV X0, X19
	0x01CE2B20 MOV X1, X31
	0x01CE2B24 MOV V8.16B, V0.16B
	0x01CE2B28 MOV V9.16B, V1.16B
	0x01CE2B2C MOV V10.16B, V2.16B
	0x01CE2B30 BL 0x3A9B084
	0x01CE2B34 CBZ X0, 0x1CE360C
	0x01CE2B38 MOV X1, X31
	0x01CE2B3C BL 0x3AA7658
	0x01CE2B40 FSUB S0, S8, S0
	0x01CE2B44 FSUB S1, S9, S1
	0x01CE2B48 FSUB S2, S10, S2
	0x01CE2B4C MOV X0, X31
	0x01CE2B50 BL 0x3A92C2C
	0x01CE2B54 LDR X22, [X19 + 0x88]
	0x01CE2B58 CBZ X22, 0x1CE360C
	0x01CE2B5C MOV X0, X22
	0x01CE2B60 MOV X1, X31
	0x01CE2B64 STR S3, [X31 + 0x1C]
	0x01CE2B68 MOV V11.16B, V2.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+152]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x226C000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x226E000
	018 Move X0, [X0+4040]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x226E000
	025 Move X0, [X0+4048]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Void set_isDie(System.Boolean value)

Disassembly:
	0x01CE2B6C MOV V10.16B, V1.16B
	0x01CE2B70 MOV V9.16B, V0.16B
	0x01CE2B74 BL 0x3AA5FBC
	0x01CE2B78 LDR X0, [X19 + 0x38]
	0x01CE2B7C CBZ X0, 0x1CE360C
	0x01CE2B80 MOV X1, X31
	0x01CE2B84 MOV V12.16B, V0.16B
	0x01CE2B88 MOV V13.16B, V1.16B
	0x01CE2B8C MOV V14.16B, V2.16B
	0x01CE2B90 MOV V15.16B, V3.16B
	0x01CE2B94 BL 0x1D87058
	0x01CE2B98 MOV X0, X19
	0x01CE2B9C MOV V8.16B, V0.16B
	0x01CE2BA0 BL 0x1CE1984
	0x01CE2BA4 FMOV S1, 4
	0x01CE2BA8 LDR V7, [X31 + 0x1C]
	0x01CE2BAC FMUL S1, S8, S1
	0x01CE2BB0 FMUL S0, S1, S0
	0x01CE2BB4 STR S0, [X31]
	0x01CE2BB8 MOV V0.16B, V12.16B
	0x01CE2BBC MOV V1.16B, V13.16B
	0x01CE2BC0 MOV V2.16B, V14.16B
	0x01CE2BC4 MOV V3.16B, V15.16B
	0x01CE2BC8 MOV V4.16B, V9.16B
	0x01CE2BCC MOV V5.16B, V10.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+152], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x226C000
	012 Move X0, [X0+1168]
	013 Call 0x1B6F804
	014 Call 0x1B6FA0C
	015 Move X19, X0
	016 Move X0, 0x226E000
	017 Move X0, [X0+4040]
	018 Call 0x1B6F804
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x226E000
	024 Move X0, [X0+4056]
	025 Call 0x1B6F804
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1B6F8E8

Method: Fusion.TickTimer get_respawnTimer()

Disassembly:
	0x01CE2BD0 MOV V6.16B, V11.16B
	0x01CE2BD4 MOV X0, X31
	0x01CE2BD8 BL 0x3A92808
	0x01CE2BDC MOV X0, X22
	0x01CE2BE0 MOV X1, X31
	0x01CE2BE4 BL 0x3AA7878
	0x01CE2BE8 B 0x1CE32AC
	0x01CE2BEC MOV X0, X19
	0x01CE2BF0 BL 0x1CE17F0
	0x01CE2BF4 TBNZ X0, 0x0, 0x1CE311C
	0x01CE2BF8 MOVZ W1, 0x1
	0x01CE2BFC MOV X0, X19
	0x01CE2C00 BL 0x1CE1858
	0x01CE2C04 MOV X0, X19
	0x01CE2C08 MOV X1, X31
	0x01CE2C0C BL 0x3A9B084
	0x01CE2C10 CBZ X0, 0x1CE360C
	0x01CE2C14 MOV X1, X31
	0x01CE2C18 BL 0x3AA7658
	0x01CE2C1C MOV X0, X19
	0x01CE2C20 MOV V8.16B, V0.16B
	0x01CE2C24 MOV V9.16B, V1.16B
	0x01CE2C28 MOV V10.16B, V2.16B
	0x01CE2C2C BL 0x1CE1644

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+156]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x226C000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226E000
	016 Move X0, [X0+4064]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226E000
	023 Move X0, [X0+4072]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_respawnTimer(Fusion.TickTimer value)

Disassembly:
	0x01CE2C30 CBZ X0, 0x1CE360C
	0x01CE2C34 MOV X1, X31
	0x01CE2C38 BL 0x3A9B084
	0x01CE2C3C CBZ X0, 0x1CE360C
	0x01CE2C40 MOV X1, X31
	0x01CE2C44 STR S8, [X31 + 0x1C]
	0x01CE2C48 BL 0x3AA7658
	0x01CE2C4C MOV X0, X19
	0x01CE2C50 MOV X1, X31
	0x01CE2C54 MOV V11.16B, V0.16B
	0x01CE2C58 MOV V12.16B, V1.16B
	0x01CE2C5C MOV V13.16B, V2.16B
	0x01CE2C60 BL 0x3A9B084
	0x01CE2C64 CBZ X0, 0x1CE360C
	0x01CE2C68 MOV X1, X31
	0x01CE2C6C BL 0x3AA7658
	0x01CE2C70 ADRP X23, 0x2541000
	0x01CE2C74 LDRB W8, [X23 + 0x441]
	0x01CE2C78 MOV V14.16B, V0.16B
	0x01CE2C7C MOV V15.16B, V1.16B
	0x01CE2C80 MOV V8.16B, V2.16B
	0x01CE2C84 CBNZ W8, 0x1CE2C9C
	0x01CE2C88 ADRP X0, 0x226B000
	0x01CE2C8C LDR X0, [X0 + 0x488]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+156], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x226C000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226E000
	016 Move X0, [X0+4064]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226E000
	023 Move X0, [X0+4080]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void Spawned()

Disassembly:
	0x01CE2C90 BL 0x1B6E7F0
	0x01CE2C94 MOVZ W8, 0x1
	0x01CE2C98 STRB W8, [X23 + 0x441]
	0x01CE2C9C LDR X0, [X21]
	0x01CE2CA0 FSUB S14, S11, S14
	0x01CE2CA4 FSUB S11, S12, S15
	0x01CE2CA8 FSUB S12, S13, S8
	0x01CE2CAC LDR W8, [X0 + 0xE0]
	0x01CE2CB0 CBNZ W8, 0x1CE2CB8
	0x01CE2CB4 BL 0x1B6E8F8
	0x01CE2CB8 ADRP X8, 0xFFFFFFFFFEDC7000
	0x01CE2CBC FMUL S0, S14, S14
	0x01CE2CC0 FMUL S1, S11, S11
	0x01CE2CC4 LDR V15, [X8 + 0xB64]
	0x01CE2CC8 FADD S0, S0, S1
	0x01CE2CCC FMUL S1, S12, S12
	0x01CE2CD0 FADD S0, S1, S0
	0x01CE2CD4 FSQRT S0, S0
	0x01CE2CD8 FCMP S0, S15
	0x01CE2CDC B.LE 0x1CE2CF0
	0x01CE2CE0 FDIV S8, S14, S0
	0x01CE2CE4 FDIV S11, S11, S0
	0x01CE2CE8 FDIV S12, S12, S0
	0x01CE2CEC B 0x1CE2D1C
	0x01CE2CF0 LDRB W8, [X24 + 0x43F]
	0x01CE2CF4 CBNZ W8, 0x1CE2D0C
	0x01CE2CF8 ADRP X0, 0x226B000
	0x01CE2CFC LDR X0, [X0 + 0x480]
	0x01CE2D00 BL 0x1B6E7F0
	0x01CE2D04 MOVZ W8, 0x1
	0x01CE2D08 STRB W8, [X24 + 0x43F]
	0x01CE2D0C LDR X8, [X20]
	0x01CE2D10 LDR X8, [X8 + 0xB8]
	0x01CE2D14 LDP S8, S11, [X8]
	0x01CE2D18 LDR V12, [X8 + 0x8]
	0x01CE2D1C ADRP X22, 0x226C000
	0x01CE2D20 LDR X22, [X22 + 0x3D8]
	0x01CE2D24 LDR X0, [X22]
	0x01CE2D28 LDR W8, [X0 + 0xE0]
	0x01CE2D2C CBNZ W8, 0x1CE2D38
	0x01CE2D30 BL 0x1B6E8F8
	0x01CE2D34 LDR X0, [X22]
	0x01CE2D38 LDR X8, [X0 + 0xB8]
	0x01CE2D3C MOV X1, X31
	0x01CE2D40 LDR W0, [X8]
	0x01CE2D44 BL 0x3A9DE68
	0x01CE2D48 ADRP X8, 0x226B000
	0x01CE2D4C LDR X8, [X8 + 0x4C0]
	0x01CE2D50 MOV W22, W0
	0x01CE2D54 LDR X8, [X8]
	0x01CE2D58 LDR W9, [X8 + 0xE0]
	0x01CE2D5C CBNZ W9, 0x1CE2D68
	0x01CE2D60 MOV X0, X8
	0x01CE2D64 BL 0x1B6E8F8
	0x01CE2D68 LDR V0, [X31 + 0x1C]
	0x01CE2D6C ADD X0, X31, 0x38
	0x01CE2D70 ADD X1, X31, 0x70
	0x01CE2D74 MOVZ W3, 0x1
	0x01CE2D78 STP S0, S9, [X31 + 0x38]
	0x01CE2D7C FMOV S0, 15
	0x01CE2D80 MOV W2, W22
	0x01CE2D84 MOV X4, X31
	0x01CE2D88 STP S10, S8, [X31 + 0x40]
	0x01CE2D8C STP S11, S12, [X31 + 0x48]
	0x01CE2D90 BL 0x3AF3708
	0x01CE2D94 MOV W22, W0
	0x01CE2D98 MOV X0, X19
	0x01CE2D9C BL 0x1CE1644
	0x01CE2DA0 CBZ X0, 0x1CE360C
	0x01CE2DA4 MOV X1, X31
	0x01CE2DA8 BL 0x3A9B084
	0x01CE2DAC CBZ X0, 0x1CE360C
	0x01CE2DB0 MOV X1, X31
	0x01CE2DB4 BL 0x3AA7658
	0x01CE2DB8 MOV X0, X19
	0x01CE2DBC MOV X1, X31
	0x01CE2DC0 MOV V10.16B, V0.16B
	0x01CE2DC4 MOV V11.16B, V1.16B
	0x01CE2DC8 MOV V12.16B, V2.16B
	0x01CE2DCC BL 0x3A9B084
	0x01CE2DD0 CBZ X0, 0x1CE360C
	0x01CE2DD4 MOV X1, X31
	0x01CE2DD8 BL 0x3AA7658
	0x01CE2DDC ADRP X26, 0x2541000
	0x01CE2DE0 LDRB W8, [X26 + 0x506]
	0x01CE2DE4 MOV V13.16B, V0.16B
	0x01CE2DE8 MOV V8.16B, V1.16B
	0x01CE2DEC MOV V9.16B, V2.16B
	0x01CE2DF0 CBNZ W8, 0x1CE2E08
	0x01CE2DF4 ADRP X0, 0x226B000
	0x01CE2DF8 LDR X0, [X0 + 0x488]
	0x01CE2DFC BL 0x1B6E7F0
	0x01CE2E00 MOVZ W8, 0x1
	0x01CE2E04 STRB W8, [X26 + 0x506]
	0x01CE2E08 LDR X0, [X21]
	0x01CE2E0C LDR W8, [X0 + 0xE0]
	0x01CE2E10 CBNZ W8, 0x1CE2E18
	0x01CE2E14 BL 0x1B6E8F8
	0x01CE2E18 STP S9, S8, [X31 + 0x18]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+80], X24
	004 Move [X31+88], X23
	005 Move [X31+96], X22
	006 Move [X31+104], X21
	007 Move [X31+112], X20
	008 Move [X31+120], X19
	009 Move X20, 0x2542000
	010 Move W8, [X20+1608]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x226E000
	017 Move X0, [X0+4088]
	018 Call 0x1B6F7F0
	019 Move X0, 0x226F000
	020 Move X0, [X0]
	021 Call 0x1B6F7F0
	022 Move X0, 0x226F000
	023 Move X0, [X0+8]
	024 Call 0x1B6F7F0
	025 Move W8, 1
	026 Move [X20+1608], W8
	027 Move X0, X19
	028 Move X1, X31
	029 Move [X31+32], X31
	030 Move [X31+40], X31
	031 Move [X31+48], X31
	032 Call NetworkBehaviour.Spawned, X0
	033 Move X0, [X19+64]
	034 Compare X0, 0
	035 JumpIfEqual {111}
	036 Move W8, [X0+96]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 2
	039 Compare TEMP, 2
	040 JumpIfEqual {111}
	041 Move X1, X31
	042 Call NetworkObject.get_HasStateAuthority, X0
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {111}
	047 Move W1, 100
	048 Move X0, X19
	049 Call CystController.set_health, X0, X1
	050 Move X0, [X19+128]
	051 Compare X0, 0
	052 JumpIfEqual {94}
	053 Move W1, 1
	054 Move X2, X31
	055 Move W22, 1
	056 Call GameObject.SetActive, X0, X1
	057 Move X0, [X19+216]
	058 Compare X0, 0
	059 JumpIfEqual {94}
	060 Move X21, 0x226C000
	061 Move X24, 0x226F000
	062 Move X21, [X21+1152]
	063 Move X24, [X24+8]
	064 Move W20, W31
	065 Move X23, 0x2542000
	066 Move W8, [X0+24]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Add X8, X31, 8
	069 Move X0, X19
	070 Call CystController.get_tetherAttachmentPoints, X0
	071 NotImplemented "Instruction LDUR not yet implemented."
	072 Move X8, [X31+24]
	073 Move W9, [X23+1087]
	074 Move [X31+2], V0
	075 Move [X31+48], X8
	076 Compare W9, 0
	077 JumpIfNotEqual {81}
	078 Move X0, X21
	079 Call 0x1B6F7F0
	080 Move [X23+1087], W22
	081 Move X8, [X21]
	082 Move X2, [X24]
	083 Add X0, X31, 32
	084 Move W1, W20
	085 Move X8, [X8+184]
	086 Move S0, [X8]
	087 Move S1, [X8+4]
	088 Move V2, [X8+8]
	089 Call NetworkArray`1<Vector3>.Set, X0, X1, X2
	090 Move X0, [X19+216]
	091 Add W20, W20, 1
	092 Compare X0, 0
	093 JumpIfNotEqual {66}
	094 Call 0x1B6FA1C
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X21, 0x226F000
	097 Move X21, [X21]
	098 Move W20, W31
	099 Move X2, [X21]
	100 Move W1, W20
	101 Call List`1<Object>.get_Item, X0, X1
	102 Move X1, X0
	103 Move X0, X19
	104 Call CystController.AttachTether, X0, X1
	105 Move X0, [X19+216]
	106 Compare X0, 0
	107 JumpIfEqual {94}
	108 Move W8, [X0+24]
	109 Add W20, W20, 1
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move X20, [X31+112]
	112 Move X19, [X31+120]
	113 Move X22, [X31+96]
	114 Move X21, [X31+104]
	115 Move X24, [X31+80]
	116 Move X23, [X31+88]
	117 Move X30, [X31+64]
	118 Add X31, X31, 128
	119 Return 

Method: System.Void BreakTether(AnimalCompany.CystTether tether, AnimalCompany.NetPlayer player)

Disassembly:
	0x01CE30E0 MOV X5, X31
	0x01CE30E4 BL 0x1CB95D8
	0x01CE30E8 LDR X22, [X19 + 0xC8]
	0x01CE30EC MOV X0, X19
	0x01CE30F0 MOV X1, X31
	0x01CE30F4 BL 0x3A9B084
	0x01CE30F8 CBZ X0, 0x1CE360C
	0x01CE30FC MOV X1, X31
	0x01CE3100 BL 0x3AA7658
	0x01CE3104 CBZ X22, 0x1CE360C
	0x01CE3108 FMOV S3, 1
	0x01CE310C MOVZ W1, 0x1
	0x01CE3110 MOV X0, X22
	0x01CE3114 MOV X2, X31
	0x01CE3118 BL 0x1CC35DC
	0x01CE311C MOV X0, X19
	0x01CE3120 BL 0x1CE18BC
	0x01CE3124 MOV X0, X31
	0x01CE3128 BL 0x3A92C2C
	0x01CE312C LDR X0, [X19 + 0x88]
	0x01CE3130 CBZ X0, 0x1CE360C
	0x01CE3134 MOV X1, X31
	0x01CE3138 MOV V8.16B, V0.16B
	0x01CE313C MOV V9.16B, V1.16B
	0x01CE3140 MOV V10.16B, V2.16B
	0x01CE3144 MOV V11.16B, V3.16B
	0x01CE3148 BL 0x3AA7878
	0x01CE314C LDR X0, [X19 + 0x98]
	0x01CE3150 CBZ X0, 0x1CE360C
	0x01CE3154 MOV V0.16B, V8.16B
	0x01CE3158 MOV V1.16B, V9.16B
	0x01CE315C MOV V2.16B, V10.16B
	0x01CE3160 MOV V3.16B, V11.16B
	0x01CE3164 MOV X1, X31
	0x01CE3168 BL 0x3AA7878
	0x01CE316C LDR X22, [X19 + 0x98]
	0x01CE3170 CBZ X22, 0x1CE360C
	0x01CE3174 MOV X0, X22
	0x01CE3178 MOV X1, X31
	0x01CE317C BL 0x3AA7C78
	0x01CE3180 MOV X0, X19
	0x01CE3184 MOV V8.16B, V0.16B
	0x01CE3188 MOV V9.16B, V1.16B
	0x01CE318C MOV V10.16B, V2.16B
	0x01CE3190 BL 0x1CE18BC
	0x01CE3194 LDRB W8, [X25 + 0x440]
	0x01CE3198 MOV V11.16B, V0.16B
	0x01CE319C MOV V12.16B, V1.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2541000
	007 Move W8, [X22+1609]
	008 Move X19, X2
	009 Move X21, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x226E000
	016 Move X0, [X0+16]
	017 Call 0x1B6F7F0
	018 Move W8, 1
	019 Move [X22+1609], W8
	020 Move X0, [X20+64]
	021 Compare X0, 0
	022 JumpIfEqual {42}
	023 Move W8, [X0+96]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 2
	026 Compare TEMP, 2
	027 JumpIfEqual {42}
	028 Move X1, X31
	029 Call NetworkObject.get_HasStateAuthority, X0
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {42}
	034 Move X0, X20
	035 Move X1, X21
	036 Move X2, X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Move X0, [X20+216]
	043 Compare X0, 0
	044 JumpIfEqual {66}
	045 Move X8, 0x226E000
	046 Move X8, [X8+16]
	047 Move X1, X21
	048 Move X2, [X8]
	049 Call List`1<Object>.IndexOf, X0, X1
	050 Compare X19, 0
	051 JumpIfEqual {66}
	052 Move W21, W0
	053 Move X0, X19
	054 Move X1, X31
	055 Call NetPlayer.get_playerID, X0
	056 Move W2, W0
	057 Move X0, X20
	058 Move W1, W21
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X30, [X31+48]
	064 Call CystController.RPC_ServerBreakTether, X0, X1, X2
	065 Return 
	066 Call 0x1B6FA1C

Method: System.Void RPC_ServerBreakTether(System.Int32 id, System.UInt32 playerID)

Disassembly:
	0x01CE3350 STRB W28, [X24 + 0x43F]
	0x01CE3354 CBZ X23, 0x1CE360C
	0x01CE3358 LDR X8, [X20]
	0x01CE335C MOV X0, X23
	0x01CE3360 MOV X1, X31
	0x01CE3364 LDR X8, [X8 + 0xB8]
	0x01CE3368 LDP S0, S1, [X8]
	0x01CE336C LDR V2, [X8 + 0x8]
	0x01CE3370 FSUB S0, S8, S0
	0x01CE3374 FSUB S1, S9, S1
	0x01CE3378 FSUB S2, S10, S2
	0x01CE337C FMUL S0, S0, S0
	0x01CE3380 FMUL S1, S1, S1
	0x01CE3384 FMUL S2, S2, S2
	0x01CE3388 FADD S0, S0, S1
	0x01CE338C FADD S13, S2, S0
	0x01CE3390 BL 0x3AA7C78
	0x01CE3394 MOV V11.16B, V0.16B
	0x01CE3398 MOV V12.16B, V1.16B
	0x01CE339C FCMP S13, S15
	0x01CE33A0 MOV V13.16B, V2.16B
	0x01CE33A4 B.PL 0x1CE340C
	0x01CE33A8 LDR X0, [X19 + 0x38]
	0x01CE33AC CBZ X0, 0x1CE360C
	0x01CE33B0 MOV X1, X31
	0x01CE33B4 BL 0x1D87058
	0x01CE33B8 FMOV S1, 8
	0x01CE33BC FMUL S0, S0, S1
	0x01CE33C0 FMOV S4, 1
	0x01CE33C4 FMOV S2, 3
	0x01CE33C8 FMOV S5, W31
	0x01CE33CC FMIN S4, S0, S4
	0x01CE33D0 FCMP S0, 0x0
	0x01CE33D4 FSUB S1, S2, S11
	0x01CE33D8 FSUB S2, S2, S12
	0x01CE33DC FSUB S3, S5, S13
	0x01CE33E0 FCSEL S0, S4, S5, PL
	0x01CE33E4 FMUL S1, S1, S0
	0x01CE33E8 FMUL S2, S2, S0
	0x01CE33EC FMUL S3, S3, S0
	0x01CE33F0 FADD S0, S11, S1
	0x01CE33F4 FADD S1, S12, S2
	0x01CE33F8 FADD S2, S13, S3
	0x01CE33FC MOV X0, X23
	0x01CE3400 MOV X1, X31
	0x01CE3404 BL 0x3AA7D18
	0x01CE3408 B 0x1CE34D0
	0x01CE340C LDRB W8, [X25 + 0x440]
	0x01CE3410 CBNZ W8, 0x1CE3420
	0x01CE3414 MOV X0, X21
	0x01CE3418 BL 0x1B6E7F0
	0x01CE341C STRB W28, [X25 + 0x440]
	0x01CE3420 LDR X0, [X21]
	0x01CE3424 LDR W8, [X0 + 0xE0]
	0x01CE3428 CBNZ W8, 0x1CE3430
	0x01CE342C BL 0x1B6E8F8
	0x01CE3430 LDR X0, [X19 + 0x38]
	0x01CE3434 CBZ X0, 0x1CE360C
	0x01CE3438 FMUL S0, S8, S8
	0x01CE343C FMUL S1, S9, S9
	0x01CE3440 FADD S0, S0, S1
	0x01CE3444 FMUL S1, S10, S10
	0x01CE3448 FADD S0, S1, S0
	0x01CE344C LDR V1, [X31 + 0x1C]
	0x01CE3450 FSQRT S0, S0
	0x01CE3454 MOV X1, X31
	0x01CE3458 FADD S14, S0, S1
	0x01CE345C BL 0x1D87058
	0x01CE3460 FMOV S1, 9
	0x01CE3464 FMUL S0, S0, S1
	0x01CE3468 FMOV S4, 1
	0x01CE346C FMOV S2, 3
	0x01CE3470 FMIN S4, S0, S4
	0x01CE3474 FCMP S0, 0x0
	0x01CE3478 FMOV S0, W31
	0x01CE347C FSUB S1, S2, S11
	0x01CE3480 FSUB S2, S2, S12
	0x01CE3484 FSUB S3, S14, S13
	0x01CE3488 FCSEL S0, S4, S0, PL
	0x01CE348C FMUL S1, S1, S0
	0x01CE3490 FMUL S2, S2, S0
	0x01CE3494 FMUL S3, S3, S0
	0x01CE3498 FADD S0, S11, S1
	0x01CE349C FADD S1, S12, S2
	0x01CE34A0 FADD S2, S13, S3
	0x01CE34A4 MOV X0, X23
	0x01CE34A8 MOV X1, X31
	0x01CE34AC BL 0x3AA7D18
	0x01CE34B0 MOV V0.16B, V8.16B
	0x01CE34B4 MOV V1.16B, V9.16B
	0x01CE34B8 MOV V2.16B, V10.16B
	0x01CE34BC MOV X0, X31
	0x01CE34C0 BL 0x3A92C2C
	0x01CE34C4 MOV X0, X23
	0x01CE34C8 MOV X1, X31
	0x01CE34CC BL 0x3AA7984
	0x01CE34D0 LDR X0, [X19 + 0xD8]
	0x01CE34D4 ADD W22, W22, 0x1
	0x01CE34D8 CBNZ X0, 0x1CE32E0
	0x01CE34DC B 0x1CE360C
	0x01CE34E0 LDR X0, [X19 + 0x38]
	0x01CE34E4 CBZ X0, 0x1CE360C
	0x01CE34E8 LDR V8, [X19 + 0x110]
	0x01CE34EC MOV X1, X31
	0x01CE34F0 BL 0x1D87058
	0x01CE34F4 FSUB S0, S8, S0
	0x01CE34F8 FCMP S0, 0x0
	0x01CE34FC STR S0, [X19 + 0x110]
	0x01CE3500 B.HI 0x1CE35DC
	0x01CE3504 LDR X8, [X19 + 0xD8]
	0x01CE3508 MOVZ W9, 0x40000000
	0x01CE350C STR W9, [X19 + 0x110]
	0x01CE3510 CBZ X8, 0x1CE360C
	0x01CE3514 MOV W21, W31
	0x01CE3518 MOVZ W22, 0x1
	0x01CE351C LDR W8, [X8 + 0x18]
	0x01CE3520 CMP W21, W8
	0x01CE3524 B.GE 0x1CE35DC
	0x01CE3528 ADD X8, X31, 0x20
	0x01CE352C MOV X0, X19
	0x01CE3530 BL 0x1CE158C
	0x01CE3534 LDR V0, [X31 + 0x2]
	0x01CE3538 LDR X8, [X31 + 0x30]
	0x01CE353C LDR X2, [X27]
	0x01CE3540 ADD X0, X31, 0x50
	0x01CE3544 MOV W1, W21
	0x01CE3548 STR V0, [X31 + 0x5]
	0x01CE354C STR X8, [X31 + 0x60]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2541000
	007 Move W8, [X22+1610]
	008 Move W21, W2
	009 Move W20, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x226E000
	016 Move X0, [X0]
	017 Call 0x1B6F7F0
	018 Move X0, 0x226C000
	019 Move X0, [X0+680]
	020 Call 0x1B6F7F0
	021 Move X0, 0x226C000
	022 Move X0, [X0+448]
	023 Call 0x1B6F7F0
	024 Move X0, 0x226E000
	025 Move X0, [X0+24]
	026 Call 0x1B6F7F0
	027 Move W8, 1
	028 Move [X22+1610], W8
	029 Move [X31+8], X31
	030 Move W8, [X19+88]
	031 Compare W8, 0
	032 JumpIfEqual {61}
	033 Move [X19+88], W31
	034 Move X8, 0x226C000
	035 Move X8, [X8+680]
	036 Move X0, [X8]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1B6F8F8
	041 Add X1, X31, 8
	042 Move W0, W21
	043 Move X2, X31
	044 Call NetPlayer.TryGetPlayerByID, X0, X1
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {148}
	049 Move X0, [X19+216]
	050 Compare X0, 0
	051 JumpIfEqual {154}
	052 Move X8, 0x226E000
	053 Move X8, [X8]
	054 Move W1, W20
	055 Move X2, [X8]
	056 Call List`1<Object>.get_Item, X0, X1
	057 Move X2, [X31+8]
	058 Move X1, X0
	059 Move X0, X19
	060 Call CystController.BreakTetherInternal, X0, X1, X2
	061 Move X22, 0x226C000
	062 Move X22, [X22+448]
	063 Move X0, [X22]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1B6F8F8
	068 Move X0, X19
	069 Move X1, X31
	070 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	071 Move X0, [X19+56]
	072 Compare X0, 0
	073 JumpIfEqual {154}
	074 Move X1, X31
	075 Call NetworkRunner.get_Stage, X0
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X0, [X19+64]
	078 Compare X0, 0
	079 JumpIfEqual {154}
	080 Move X1, X31
	081 Call NetworkObject.GetLocalAuthorityMask, X0
	082 And W31, W0, 7
	083 Move TEMP, X0
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfEqual {34}
	087 Move X8, [X19+56]
	088 Compare X8, 0
	089 JumpIfEqual {154}
	090 Move X0, [X8+80]
	091 Compare X0, 0
	092 JumpIfEqual {154}
	093 Move X1, X31
	094 Call Simulation.HasAnyActiveConnections, X0
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfNotEqual {148}
	099 Move X8, [X19+56]
	100 Compare X8, 0
	101 JumpIfEqual {154}
	102 Move X0, [X8+80]
	103 Move W1, 16
	104 Move X2, X31
	105 Call SimulationMessage.Allocate, X0, X1
	106 Move X22, X0
	107 Move W0, 1
	108 Move X1, X31
	109 Call Assert.Check, X0
	110 Move X8, [X19+64]
	111 Compare X8, 0
	112 JumpIfEqual {154}
	113 Move X8, [X8+32]
	114 Compare X8, 0
	115 JumpIfEqual {130}
	116 Move W0, [X8]
	117 Move X0, [X22]
	118 Move X19, [X19+64]
	119 Move W8, [X0+224]
	120 Compare W8, 0
	121 JumpIfNotEqual {123}
	122 Call 0x1B6F8F8
	123 Move X8, 0x226E000
	124 Move X8, [X8+24]
	125 Move W2, 7
	126 Move X1, X19
	127 Move X3, X31
	128 Move X0, [X8]
	129 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	130 Move X0, X31
	131 Move W1, [X19+104]
	132 Move W2, 1
	133 Move X3, X31
	134 Call RpcHeader.Create, X0, X1, X2
	135 Move [X22+28], X0
	136 Move [X22+36], W20
	137 Move [X22+40], W21
	138 Compare X22, 0
	139 JumpIfEqual {154}
	140 Move W8, 128
	141 Move [X22+12], W8
	142 Move X0, [X19+56]
	143 Compare X0, 0
	144 JumpIfEqual {154}
	145 Move X1, X22
	146 Move X2, X31
	147 Call NetworkRunner.SendRpc, X0, X1
	148 Move X20, [X31+32]
	149 Move X19, [X31+40]
	150 Move X22, [X31+16]
	151 Move X21, [X31+24]
	152 Move X30, [X31+48]
	153 Return 
	154 Call 0x1B6FA1C

Method: System.Void BreakTetherInternal(AnimalCompany.CystTether tether, AnimalCompany.NetPlayer player)

Disassembly:
	0x01CE31A0 MOV V13.16B, V2.16B
	0x01CE31A4 CBNZ W8, 0x1CE31BC
	0x01CE31A8 ADRP X0, 0x226A000
	0x01CE31AC LDR X0, [X0 + 0x488]
	0x01CE31B0 BL 0x1B6E7F0
	0x01CE31B4 MOVZ W8, 0x1
	0x01CE31B8 STRB W8, [X25 + 0x440]
	0x01CE31BC LDR X0, [X21]
	0x01CE31C0 LDR W8, [X0 + 0xE0]
	0x01CE31C4 CBNZ W8, 0x1CE31CC
	0x01CE31C8 BL 0x1B6E8F8
	0x01CE31CC LDR X0, [X19 + 0x38]
	0x01CE31D0 CBZ X0, 0x1CE360C
	0x01CE31D4 FMUL S0, S11, S11
	0x01CE31D8 FMUL S1, S12, S12
	0x01CE31DC FADD S0, S0, S1
	0x01CE31E0 FMUL S1, S13, S13
	0x01CE31E4 FADD S0, S1, S0
	0x01CE31E8 MOV X1, X31
	0x01CE31EC FSQRT S11, S0
	0x01CE31F0 BL 0x1D87058
	0x01CE31F4 FMOV S1, 12
	0x01CE31F8 FMOV S2, 1
	0x01CE31FC FMUL S0, S0, S1
	0x01CE3200 FMOV S1, W31
	0x01CE3204 FCMP S0, 0x0
	0x01CE3208 FMIN S0, S0, S2
	0x01CE320C FSUB S3, S11, S10
	0x01CE3210 FCSEL S0, S0, S1, PL
	0x01CE3214 FSUB S1, S2, S8
	0x01CE3218 FSUB S2, S2, S9
	0x01CE321C FMUL S1, S1, S0
	0x01CE3220 FMUL S2, S2, S0
	0x01CE3224 FMUL S3, S3, S0
	0x01CE3228 FADD S0, S8, S1
	0x01CE322C FADD S1, S9, S2
	0x01CE3230 FADD S2, S10, S3
	0x01CE3234 MOV X0, X22
	0x01CE3238 MOV X1, X31
	0x01CE323C BL 0x3AA7D18
	0x01CE3240 MOV X0, X19
	0x01CE3244 BL 0x1CE1984
	0x01CE3248 FMOV S1, 3
	0x01CE324C FCMP S0, S1
	0x01CE3250 B.LT 0x1CE32AC
	0x01CE3254 MOV X0, X19
	0x01CE3258 MOV X1, X31
	0x01CE325C BL 0x1CE1744
	0x01CE3260 MOV X0, X19
	0x01CE3264 MOV W1, W31
	0x01CE3268 BL 0x1CE1858
	0x01CE326C FMOV S0, W31
	0x01CE3270 MOV X0, X19
	0x01CE3274 BL 0x1CE19E4
	0x01CE3278 LDR X22, [X19 + 0xC0]
	0x01CE327C MOV X0, X19
	0x01CE3280 MOV X1, X31
	0x01CE3284 BL 0x3A9B084
	0x01CE3288 CBZ X0, 0x1CE360C
	0x01CE328C MOV X1, X31
	0x01CE3290 BL 0x3AA7658
	0x01CE3294 CBZ X22, 0x1CE360C
	0x01CE3298 FMOV S3, 1
	0x01CE329C MOVZ W1, 0x1
	0x01CE32A0 MOV X0, X22
	0x01CE32A4 MOV X2, X31
	0x01CE32A8 BL 0x1CC35DC
	0x01CE32AC LDR X0, [X19 + 0xD8]
	0x01CE32B0 CBZ X0, 0x1CE360C
	0x01CE32B4 ADRP X9, 0xFFFFFFFFFEDC6000
	0x01CE32B8 ADRP X26, 0x226D000
	0x01CE32BC ADRP X27, 0x226D000
	0x01CE32C0 ADRP X8, 0xFFFFFFFFFEDC6000
	0x01CE32C4 LDR V0, [X9 + 0xAB0]
	0x01CE32C8 LDR X26, [X26]
	0x01CE32CC LDR X27, [X27 + 0x20]
	0x01CE32D0 LDR V15, [X8 + 0x934]
	0x01CE32D4 MOV W22, W31
	0x01CE32D8 MOVZ W28, 0x1
	0x01CE32DC STR S0, [X31 + 0x1C]
	0x01CE32E0 LDR W8, [X0 + 0x18]
	0x01CE32E4 CMP W22, W8
	0x01CE32E8 B.GE 0x1CE34E0
	0x01CE32EC LDR X2, [X26]
	0x01CE32F0 MOV W1, W22
	0x01CE32F4 BL 0x2E46254
	0x01CE32F8 CBZ X0, 0x1CE360C
	0x01CE32FC MOV X1, X31
	0x01CE3300 BL 0x3A9B084
	0x01CE3304 MOV X23, X0
	0x01CE3308 ADD X8, X31, 0x20
	0x01CE330C MOV X0, X19
	0x01CE3310 BL 0x1CE158C
	0x01CE3314 LDR V0, [X31 + 0x2]
	0x01CE3318 LDR X8, [X31 + 0x30]
	0x01CE331C LDR X2, [X27]
	0x01CE3320 ADD X0, X31, 0x50
	0x01CE3324 MOV W1, W22
	0x01CE3328 STR V0, [X31 + 0x5]
	0x01CE332C STR X8, [X31 + 0x60]
	0x01CE3330 BL 0x22B1F50
	0x01CE3334 LDRB W8, [X24 + 0x43F]
	0x01CE3338 MOV V8.16B, V0.16B
	0x01CE333C MOV V9.16B, V1.16B
	0x01CE3340 MOV V10.16B, V2.16B
	0x01CE3344 CBNZ W8, 0x1CE3354
	0x01CE3348 MOV X0, X20
	0x01CE334C BL 0x1B6E7F0

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+72], X23
	004 Move [X31+80], X22
	005 Move [X31+88], X21
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 Move X22, 0x2541000
	009 Move W8, [X22+1611]
	010 Move X20, X2
	011 Move X21, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x226E000
	018 Move X0, [X0+16]
	019 Call 0x1B6F7F0
	020 Move X0, 0x226E000
	021 Move X0, [X0+8]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X22+1611], W8
	025 Move [X31+32], X31
	026 Move [X31+40], X31
	027 Move [X31+48], X31
	028 Move X0, [X19+216]
	029 Compare X0, 0
	030 JumpIfEqual {123}
	031 Move X8, 0x226E000
	032 Move X8, [X8+16]
	033 Move X22, 0x226E000
	034 Move X1, X21
	035 Move X2, [X8]
	036 Move X22, [X22+8]
	037 Call List`1<Object>.IndexOf, X0, X1
	038 Move W21, W0
	039 Add X8, X31, 8
	040 Move X0, X19
	041 Call CystController.get_tetherAttachmentPoints, X0
	042 Move X23, 0x2541000
	043 NotImplemented "Instruction LDUR not yet implemented."
	044 Move X8, [X31+24]
	045 Move W9, [X23+1087]
	046 Move [X31+2], V0
	047 Move [X31+48], X8
	048 Compare W9, 0
	049 JumpIfNotEqual {55}
	050 Move X0, 0x226B000
	051 Move X0, [X0+1152]
	052 Call 0x1B6F7F0
	053 Move W8, 1
	054 Move [X23+1087], W8
	055 Move X8, 0x226B000
	056 Move X8, [X8+1152]
	057 Move X2, [X22]
	058 Add X0, X31, 32
	059 Move W1, W21
	060 Move X8, [X8]
	061 Move X8, [X8+184]
	062 Move S0, [X8]
	063 Move S1, [X8+4]
	064 Move V2, [X8+8]
	065 Call NetworkArray`1<Vector3>.Set, X0, X1, X2
	066 Move X21, [X19+168]
	067 Compare X21, 0
	068 JumpIfEqual {81}
	069 Move X0, X19
	070 Move X1, X31
	071 Call Component.get_transform, X0
	072 Compare X0, 0
	073 JumpIfEqual {123}
	074 Move X1, X31
	075 Call Transform.get_position, X0
	076 Move S3, 1
	077 Move W1, 1
	078 Move X0, X21
	079 Move X2, X31
	080 Call RandomSFX.Play, X0, X1, V0, X2
	081 Move X0, X19
	082 Call CystController.get_attackTimer, X0
	083 Move S1, 2
	084 NotImplemented "Instruction FCMP not yet implemented."
	085 Move X0, X31
	086 Call Time.get_timeAsDouble
	087 Move V1, [X19+184]
	088 Subtract D0, D0, D1
	089 Move D1, 1.0000000000582077
	090 NotImplemented "Instruction FCMP not yet implemented."
	091 Move X21, [X19+176]
	092 Move X0, X19
	093 Move X1, X31
	094 Call Component.get_transform, X0
	095 Compare X0, 0
	096 JumpIfEqual {123}
	097 Move X1, X31
	098 Call Transform.get_position, X0
	099 Compare X21, 0
	100 JumpIfEqual {123}
	101 Move S3, 1
	102 Move W1, 1
	103 Move X0, X21
	104 Move X2, X31
	105 Call RandomSFX.Play, X0, X1, V0, X2
	106 Move X0, X31
	107 Call Time.get_timeAsDouble
	108 Move X0, X19
	109 Move X1, X20
	110 Move [X19+184], D0
	111 Call CystController.set_target, X0, X1
	112 Move S0, W31
	113 Move X0, X19
	114 Call CystController.set_attackTimer, X0, V0
	115 Move X20, [X31+96]
	116 Move X19, [X31+104]
	117 Move X22, [X31+80]
	118 Move X21, [X31+88]
	119 Move X30, [X31+64]
	120 Move X23, [X31+72]
	121 Add X31, X31, 112
	122 Return 
	123 Call 0x1B6FA1C

Method: System.Void AttachTether(AnimalCompany.CystTether tether)

Disassembly:
	0x01CE2E1C TBZ X22, 0x0, 0x1CE2E6C
	0x01CE2E20 ADD X0, X31, 0x70
	0x01CE2E24 MOV X1, X31
	0x01CE2E28 MOV V9.16B, V15.16B
	0x01CE2E2C BL 0x3AF6270
	0x01CE2E30 MOV X0, X19
	0x01CE2E34 MOV X1, X31
	0x01CE2E38 MOV V8.16B, V0.16B
	0x01CE2E3C MOV V14.16B, V1.16B
	0x01CE2E40 MOV V15.16B, V2.16B
	0x01CE2E44 BL 0x3A9B084
	0x01CE2E48 CBZ X0, 0x1CE360C
	0x01CE2E4C MOV X1, X31
	0x01CE2E50 BL 0x3AA7658
	0x01CE2E54 LDP S5, S4, [X31 + 0x18]
	0x01CE2E58 FSUB S0, S8, S0
	0x01CE2E5C FSUB S1, S14, S1
	0x01CE2E60 FSUB S2, S15, S2
	0x01CE2E64 MOV V15.16B, V9.16B
	0x01CE2E68 B 0x1CE2F88
	0x01CE2E6C MOV X0, X19
	0x01CE2E70 BL 0x1CE1644
	0x01CE2E74 CBZ X0, 0x1CE360C
	0x01CE2E78 MOV X1, X31
	0x01CE2E7C STP S13, S12, [X31 + 0xC]
	0x01CE2E80 STR S15, [X31 + 0x14]
	0x01CE2E84 BL 0x3A9B084
	0x01CE2E88 CBZ X0, 0x1CE360C
	0x01CE2E8C MOV X1, X31
	0x01CE2E90 MOV V12.16B, V11.16B
	0x01CE2E94 MOV V13.16B, V10.16B
	0x01CE2E98 BL 0x3AA7658
	0x01CE2E9C MOV X0, X19
	0x01CE2EA0 MOV X1, X31
	0x01CE2EA4 MOV V14.16B, V0.16B
	0x01CE2EA8 MOV V15.16B, V1.16B
	0x01CE2EAC MOV V8.16B, V2.16B
	0x01CE2EB0 BL 0x3A9B084
	0x01CE2EB4 CBZ X0, 0x1CE360C
	0x01CE2EB8 MOV X1, X31
	0x01CE2EBC BL 0x3AA7658
	0x01CE2EC0 LDRB W8, [X23 + 0x441]
	0x01CE2EC4 MOV V9.16B, V0.16B
	0x01CE2EC8 MOV V10.16B, V1.16B
	0x01CE2ECC MOV V11.16B, V2.16B
	0x01CE2ED0 CBNZ W8, 0x1CE2EE8
	0x01CE2ED4 ADRP X0, 0x226B000
	0x01CE2ED8 LDR X0, [X0 + 0x488]
	0x01CE2EDC BL 0x1B6E7F0
	0x01CE2EE0 MOVZ W8, 0x1
	0x01CE2EE4 STRB W8, [X23 + 0x441]
	0x01CE2EE8 LDR X0, [X21]
	0x01CE2EEC FSUB S14, S14, S9
	0x01CE2EF0 FSUB S9, S15, S10
	0x01CE2EF4 FSUB S8, S8, S11
	0x01CE2EF8 LDR W8, [X0 + 0xE0]
	0x01CE2EFC CBNZ W8, 0x1CE2F04
	0x01CE2F00 BL 0x1B6E8F8
	0x01CE2F04 FMUL S0, S14, S14
	0x01CE2F08 FMUL S1, S9, S9
	0x01CE2F0C LDR V15, [X31 + 0x14]
	0x01CE2F10 FADD S0, S0, S1
	0x01CE2F14 FMUL S1, S8, S8
	0x01CE2F18 FADD S0, S1, S0
	0x01CE2F1C FSQRT S2, S0
	0x01CE2F20 FCMP S2, S15
	0x01CE2F24 MOV V10.16B, V13.16B
	0x01CE2F28 MOV V11.16B, V12.16B
	0x01CE2F2C B.LE 0x1CE2F44
	0x01CE2F30 LDP S13, S12, [X31 + 0xC]
	0x01CE2F34 FDIV S0, S14, S2
	0x01CE2F38 FDIV S1, S9, S2
	0x01CE2F3C FDIV S2, S8, S2
	0x01CE2F40 B 0x1CE2F74
	0x01CE2F44 LDRB W8, [X24 + 0x43F]
	0x01CE2F48 LDP S13, S12, [X31 + 0xC]
	0x01CE2F4C CBNZ W8, 0x1CE2F64
	0x01CE2F50 ADRP X0, 0x226B000
	0x01CE2F54 LDR X0, [X0 + 0x480]
	0x01CE2F58 BL 0x1B6E7F0
	0x01CE2F5C MOVZ W8, 0x1
	0x01CE2F60 STRB W8, [X24 + 0x43F]
	0x01CE2F64 LDR X8, [X20]
	0x01CE2F68 LDR X8, [X8 + 0xB8]
	0x01CE2F6C LDP S0, S1, [X8]
	0x01CE2F70 LDR V2, [X8 + 0x8]
	0x01CE2F74 LDP S5, S4, [X31 + 0x18]
	0x01CE2F78 FMOV S3, 15
	0x01CE2F7C FMUL S0, S0, S3
	0x01CE2F80 FMUL S1, S1, S3
	0x01CE2F84 FMUL S2, S2, S3
	0x01CE2F88 FSUB S3, S10, S13
	0x01CE2F8C FSUB S4, S11, S4
	0x01CE2F90 FSUB S5, S12, S5
	0x01CE2F94 FMUL S3, S3, S3
	0x01CE2F98 FMUL S4, S4, S4
	0x01CE2F9C FADD S3, S3, S4
	0x01CE2FA0 FMUL S4, S5, S5
	0x01CE2FA4 FADD S3, S4, S3
	0x01CE2FA8 MOV X0, X19
	0x01CE2FAC FSQRT S8, S3
	0x01CE2FB0 BL 0x1CE1920
	0x01CE2FB4 FMOV S0, 15
	0x01CE2FB8 TBZ X22, 0x0, 0x1CE2FC8
	0x01CE2FBC ADD X0, X31, 0x70
	0x01CE2FC0 MOV X1, X31
	0x01CE2FC4 BL 0x3AF6288
	0x01CE2FC8 FCMP S8, S0
	0x01CE2FCC B.PL 0x1CE30E8
	0x01CE2FD0 MOV X0, X19
	0x01CE2FD4 BL 0x1CE1644
	0x01CE2FD8 MOV X22, X0
	0x01CE2FDC MOV X0, X19
	0x01CE2FE0 BL 0x1CE1644
	0x01CE2FE4 CBZ X0, 0x1CE360C
	0x01CE2FE8 MOV X1, X31
	0x01CE2FEC BL 0x3A9B084
	0x01CE2FF0 CBZ X0, 0x1CE360C
	0x01CE2FF4 MOV X1, X31
	0x01CE2FF8 BL 0x3AA7658
	0x01CE2FFC MOV X0, X19
	0x01CE3000 MOV V8.16B, V0.16B
	0x01CE3004 MOV V9.16B, V1.16B
	0x01CE3008 MOV V10.16B, V2.16B
	0x01CE300C BL 0x1CE18BC
	0x01CE3010 LDRB W8, [X23 + 0x441]
	0x01CE3014 MOV V11.16B, V0.16B
	0x01CE3018 MOV V12.16B, V1.16B
	0x01CE301C MOV V13.16B, V2.16B
	0x01CE3020 CBNZ W8, 0x1CE3038
	0x01CE3024 ADRP X0, 0x226A000
	0x01CE3028 LDR X0, [X0 + 0x488]
	0x01CE302C BL 0x1B6E7F0
	0x01CE3030 MOVZ W8, 0x1
	0x01CE3034 STRB W8, [X23 + 0x441]
	0x01CE3038 LDR X0, [X21]
	0x01CE303C LDR W8, [X0 + 0xE0]
	0x01CE3040 CBNZ W8, 0x1CE3048
	0x01CE3044 BL 0x1B6E8F8
	0x01CE3048 FMUL S0, S11, S11
	0x01CE304C FMUL S1, S12, S12
	0x01CE3050 FADD S0, S0, S1
	0x01CE3054 FMUL S1, S13, S13
	0x01CE3058 FADD S0, S1, S0
	0x01CE305C FSQRT S2, S0
	0x01CE3060 FCMP S2, S15
	0x01CE3064 B.LE 0x1CE3078
	0x01CE3068 FDIV S0, S11, S2
	0x01CE306C FDIV S1, S12, S2
	0x01CE3070 FDIV S2, S13, S2
	0x01CE3074 B 0x1CE30A4
	0x01CE3078 LDRB W8, [X24 + 0x43F]
	0x01CE307C CBNZ W8, 0x1CE3094
	0x01CE3080 ADRP X0, 0x226A000
	0x01CE3084 LDR X0, [X0 + 0x480]
	0x01CE3088 BL 0x1B6E7F0
	0x01CE308C MOVZ W8, 0x1
	0x01CE3090 STRB W8, [X24 + 0x43F]
	0x01CE3094 LDR X8, [X20]
	0x01CE3098 LDR X8, [X8 + 0xB8]
	0x01CE309C LDP S0, S1, [X8]
	0x01CE30A0 LDR V2, [X8 + 0x8]
	0x01CE30A4 CBZ X22, 0x1CE360C
	0x01CE30A8 ADRP X8, 0x226D000
	0x01CE30AC LDR X8, [X8 + 0x28]
	0x01CE30B0 FMOV S3, 10
	0x01CE30B4 FMUL S5, S2, S3
	0x01CE30B8 FMUL S4, S1, S3
	0x01CE30BC LDR X4, [X8]
	0x01CE30C0 FMUL S3, S0, S3
	0x01CE30C4 MOVZ W1, 0x1F4
	0x01CE30C8 MOV X0, X22
	0x01CE30CC MOV V0.16B, V8.16B
	0x01CE30D0 MOV V1.16B, V9.16B
	0x01CE30D4 MOV V2.16B, V10.16B
	0x01CE30D8 MOV X2, X31
	0x01CE30DC MOV X3, X31

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+128], D13
	003 Move [X31+136], D12
	004 Move [X31+144], D11
	005 Move [X31+152], D10
	006 Move [X31+160], D9
	007 Move [X31+168], D8
	008 Move [X31+176], X30
	009 Move [X31+192], X22
	010 Move [X31+200], X21
	011 Move [X31+208], X20
	012 Move [X31+216], X19
	013 Move X21, 0x2542000
	014 Move W8, [X21+1612]
	015 Move X20, X1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0x226D000
	022 Move X0, [X0+984]
	023 Call 0x1B6F7F0
	024 Move X0, 0x226F000
	025 Move X0, [X0+16]
	026 Call 0x1B6F7F0
	027 Move X0, 0x226F000
	028 Move X0, [X0+8]
	029 Call 0x1B6F7F0
	030 Move X0, 0x226C000
	031 Move X0, [X0+1216]
	032 Call 0x1B6F7F0
	033 Move W8, 1
	034 Move [X21+1612], W8
	035 NotImplemented "Instruction MOVI not yet implemented."
	036 Move X0, X31
	037 Move [X31+48], X31
	038 Move [X31+56], X31
	039 Move [X31+108], V0
	040 Move [X31+80], V0
	041 Move [X31+88], V0
	042 Move [X31+64], X31
	043 Call Random.get_onUnitSphere
	044 Move X0, X19
	045 Move X1, X31
	046 Move V11, V0
	047 Move V12, V1
	048 Move V13, V2
	049 Call Component.get_transform, X0
	050 Compare X0, 0
	051 JumpIfEqual {207}
	052 Move X1, X31
	053 Call Transform.get_position, X0
	054 Move X21, 0x2542000
	055 Move W8, [X21+1089]
	056 Move V8, V0
	057 Move V9, V1
	058 Move V10, V2
	059 Compare W8, 0
	060 JumpIfNotEqual {66}
	061 Move X0, 0x226C000
	062 Move X0, [X0+1160]
	063 Call 0x1B6F7F0
	064 Move W8, 1
	065 Move [X21+1089], W8
	066 Move X8, 0x226C000
	067 Move X8, [X8+1160]
	068 Move X0, [X8]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1B6F8F8
	073 Multiply S0, S11, S11
	074 Multiply S1, S12, S12
	075 Move X8, -19103744
	076 Add S0, S0, S1
	077 Move V1, [X8+2916]
	078 Move X21, 0x226D000
	079 Multiply S2, S13, S13
	080 Move X21, [X21+984]
	081 Add S0, S2, S0
	082 NotImplemented "Instruction FSQRT not yet implemented."
	083 NotImplemented "Instruction FCMP not yet implemented."
	084 NotImplemented "Instruction FDIV not yet implemented."
	085 NotImplemented "Instruction FDIV not yet implemented."
	086 NotImplemented "Instruction FDIV not yet implemented."
	087 Move X22, 0x2542000
	088 Move W8, [X22+1087]
	089 Compare W8, 0
	090 JumpIfNotEqual {96}
	091 Move X0, 0x226C000
	092 Move X0, [X0+1152]
	093 Call 0x1B6F7F0
	094 Move W8, 1
	095 Move [X22+1087], W8
	096 Move X8, 0x226C000
	097 Move X8, [X8+1152]
	098 Move X8, [X8]
	099 Move X8, [X8+184]
	100 Move S11, [X8]
	101 Move S12, [X8+4]
	102 Move V13, [X8+8]
	103 Move X0, [X21]
	104 Move X22, 0x226C000
	105 Move W8, [X0+224]
	106 Move X22, [X22+1216]
	107 Compare W8, 0
	108 JumpIfNotEqual {111}
	109 Call 0x1B6F8F8
	110 Move X0, [X21]
	111 Move X8, [X0+184]
	112 Move X1, X31
	113 Move W0, [X8]
	114 Call LayerMask.op_Implicit, X0
	115 Move X8, [X22]
	116 Move W21, W0
	117 Move W9, [X8+224]
	118 Compare W9, 0
	119 JumpIfNotEqual {122}
	120 Move X0, X8
	121 Call 0x1B6F8F8
	122 Add X0, X31, 24
	123 Add X1, X31, 80
	124 Move S0, 15
	125 Move W3, 1
	126 Move W2, W21
	127 Move X4, X31
	128 Move [X31+24], S8
	129 Move [X31+32], S9
	130 Move [X31+32], S10
	131 Move [X31+40], S11
	132 Move [X31+40], S12
	133 Move [X31+48], S13
	134 Call Physics.Raycast, X0, X1, V0, X2, X3
	135 Move TEMP, X0
	136 And TEMP, TEMP, 1
	137 Compare TEMP, 1
	138 JumpIfNotEqual {194}
	139 Move X0, X19
	140 Move X1, X31
	141 Call Component.get_transform, X0
	142 Move X21, X0
	143 Add X0, X31, 80
	144 Move X1, X31
	145 Call RaycastHit.get_point, X0
	146 Compare X21, 0
	147 JumpIfEqual {207}
	148 Move X0, X21
	149 Move X1, X31
	150 Call Transform.InverseTransformPoint, X0, X1
	151 Move X0, [X19+216]
	152 Compare X0, 0
	153 JumpIfEqual {207}
	154 Move X8, 0x226E000
	155 Move X8, [X8+16]
	156 Move X1, X20
	157 Move V8, V0
	158 Move V9, V1
	159 Move X2, [X8]
	160 Move V10, V2
	161 Call List`1<Object>.IndexOf, X0, X1
	162 Move W20, W0
	163 Add X8, X31, 0
	164 Move X0, X19
	165 Call CystController.get_tetherAttachmentPoints, X0
	166 Move X9, 0x226E000
	167 Move V0, [X31]
	168 Move X8, [X31+16]
	169 Move X9, [X9+8]
	170 Add X0, X31, 48
	171 Move [X31+3], V0
	172 Move W1, W20
	173 Move X2, [X9]
	174 Move V0, V8
	175 Move V1, V9
	176 Move V2, V10
	177 Move [X31+64], X8
	178 Call NetworkArray`1<Vector3>.Set, X0, X1, X2
	179 Move X20, [X19+160]
	180 Compare X20, 0
	181 JumpIfEqual {194}
	182 Move X0, X19
	183 Move X1, X31
	184 Call Component.get_transform, X0
	185 Compare X0, 0
	186 JumpIfEqual {207}
	187 Move X1, X31
	188 Call Transform.get_position, X0
	189 Move S3, 1
	190 Move W1, 1
	191 Move X0, X20
	192 Move X2, X31
	193 Call RandomSFX.Play, X0, X1, V0, X2
	194 Move X20, [X31+208]
	195 Move X19, [X31+216]
	196 Move X22, [X31+192]
	197 Move X21, [X31+200]
	198 Move X30, [X31+176]
	199 Move D9, [X31+160]
	200 Move D8, [X31+168]
	201 Move D11, [X31+144]
	202 Move D10, [X31+152]
	203 Move D13, [X31+128]
	204 Move D12, [X31+136]
	205 Add X31, X31, 224
	206 Return 
	207 Call 0x1B6FA1C

Method: System.Void ResetAllTethers()

Disassembly:
	0x01CE3550 BL 0x22B1F50
	0x01CE3554 LDRB W8, [X24 + 0x43F]
	0x01CE3558 MOV V8.16B, V0.16B
	0x01CE355C MOV V9.16B, V1.16B
	0x01CE3560 MOV V10.16B, V2.16B
	0x01CE3564 CBNZ W8, 0x1CE3574
	0x01CE3568 MOV X0, X20
	0x01CE356C BL 0x1B6E7F0
	0x01CE3570 STRB W22, [X24 + 0x43F]
	0x01CE3574 LDR X8, [X20]
	0x01CE3578 LDR X8, [X8 + 0xB8]
	0x01CE357C LDP S0, S1, [X8]
	0x01CE3580 LDR V2, [X8 + 0x8]
	0x01CE3584 FSUB S0, S8, S0
	0x01CE3588 FSUB S1, S9, S1
	0x01CE358C FSUB S2, S10, S2
	0x01CE3590 FMUL S0, S0, S0
	0x01CE3594 FMUL S1, S1, S1
	0x01CE3598 FADD S0, S0, S1
	0x01CE359C FMUL S1, S2, S2
	0x01CE35A0 FADD S0, S1, S0
	0x01CE35A4 FCMP S0, S15
	0x01CE35A8 B.MI 0x1CE35BC
	0x01CE35AC LDR X8, [X19 + 0xD8]
	0x01CE35B0 ADD W21, W21, 0x1
	0x01CE35B4 CBNZ X8, 0x1CE351C
	0x01CE35B8 B 0x1CE360C
	0x01CE35BC LDR X0, [X19 + 0xD8]
	0x01CE35C0 CBZ X0, 0x1CE360C
	0x01CE35C4 LDR X2, [X26]
	0x01CE35C8 MOV W1, W21
	0x01CE35CC BL 0x2E46254
	0x01CE35D0 MOV X1, X0
	0x01CE35D4 MOV X0, X19
	0x01CE35D8 BL 0x1CE1E1C
	0x01CE35DC LDP X20, X19, [X31 + 0x140]
	0x01CE35E0 LDP X22, X21, [X31 + 0x130]
	0x01CE35E4 LDP X24, X23, [X31 + 0x120]
	0x01CE35E8 LDP X26, X25, [X31 + 0x110]
	0x01CE35EC LDP X28, X27, [X31 + 0x100]
	0x01CE35F0 LDP X29, X30, [X31 + 0xF0]
	0x01CE35F4 LDP D9, D8, [X31 + 0xE0]
	0x01CE35F8 LDP D11, D10, [X31 + 0xD0]
	0x01CE35FC LDP D13, D12, [X31 + 0xC0]
	0x01CE3600 LDP D15, D14, [X31 + 0xB0]
	0x01CE3604 ADD X31, X31, 0x150
	0x01CE3608 RET
	0x01CE360C BL 0x1B6EA1C
	0x01CE3610 STR X30, [X31 - 0x20]!
	0x01CE3614 STP X20, X19, [X31 + 0x10]
	0x01CE3618 MOV W19, W1
	0x01CE361C MOV X20, X0
	0x01CE3620 BL 0x1CE1B04
	0x01CE3624 TBZ X0, 0x0, 0x1CE3634
	0x01CE3628 LDP X20, X19, [X31 + 0x10]
	0x01CE362C LDR X30, [X31], #0x20
	0x01CE3630 RET
	0x01CE3634 MOV X0, X20
	0x01CE3638 MOV W1, W19
	0x01CE363C LDP X20, X19, [X31 + 0x10]
	0x01CE3640 LDR X30, [X31], #0x20
	0x01CE3644 B 0x1CE3648
	0x01CE3648 STP X30, X21, [X31 - 0x20]!
	0x01CE364C STP X20, X19, [X31 + 0x10]
	0x01CE3650 ADRP X21, 0x2540000
	0x01CE3654 LDRB W8, [X21 + 0x64F]
	0x01CE3658 MOV W20, W1
	0x01CE365C MOV X19, X0
	0x01CE3660 TBNZ X8, 0x0, 0x1CE3684
	0x01CE3664 ADRP X0, 0x226B000
	0x01CE3668 LDR X0, [X0 + 0x1C0]
	0x01CE366C BL 0x1B6E7F0
	0x01CE3670 ADRP X0, 0x226D000
	0x01CE3674 LDR X0, [X0 + 0x30]
	0x01CE3678 BL 0x1B6E7F0
	0x01CE367C MOVZ W8, 0x1
	0x01CE3680 STRB W8, [X21 + 0x64F]
	0x01CE3684 LDRB W8, [X19 + 0x58]
	0x01CE3688 CBZ W8, 0x1CE36D0
	0x01CE368C STRB W31, [X19 + 0x58]
	0x01CE3690 MOV X0, X19
	0x01CE3694 BL 0x1CE1B04
	0x01CE3698 TBNZ X0, 0x0, 0x1CE370C
	0x01CE369C MOV X0, X19
	0x01CE36A0 BL 0x1CE1A44
	0x01CE36A4 SUB W1, W0, W20
	0x01CE36A8 MOV X0, X19
	0x01CE36AC BL 0x1CE1AA4
	0x01CE36B0 MOV X0, X19
	0x01CE36B4 BL 0x1CE1A44
	0x01CE36B8 CMP W0, 0x0
	0x01CE36BC B.GT 0x1CE370C
	0x01CE36C0 MOV X0, X19
	0x01CE36C4 LDP X20, X19, [X31 + 0x10]
	0x01CE36C8 LDP X30, X21, [X31], #0x20
	0x01CE36CC B 0x1CE3810
	0x01CE36D0 ADRP X21, 0x226B000
	0x01CE36D4 LDR X21, [X21 + 0x1C0]
	0x01CE36D8 LDR X0, [X21]
	0x01CE36DC LDR W8, [X0 + 0xE0]
	0x01CE36E0 CBNZ W8, 0x1CE36E8
	0x01CE36E4 BL 0x1B6E8F8
	0x01CE36E8 MOV X0, X19
	0x01CE36EC MOV X1, X31
	0x01CE36F0 BL 0x1D697C8
	0x01CE36F4 LDR X0, [X19 + 0x38]
	0x01CE36F8 CBZ X0, 0x1CE380C
	0x01CE36FC MOV X1, X31
	0x01CE3700 BL 0x1D87040

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], X30
	003 Move [X31+80], X28
	004 Move [X31+88], X27
	005 Move [X31+96], X26
	006 Move [X31+104], X25
	007 Move [X31+112], X24
	008 Move [X31+120], X23
	009 Move [X31+128], X22
	010 Move [X31+136], X21
	011 Move [X31+144], X20
	012 Move [X31+152], X19
	013 Move X20, 0x2541000
	014 Move W8, [X20+1613]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x226D000
	021 Move X0, [X0+4088]
	022 Call 0x1B6F7F0
	023 Move X0, 0x226E000
	024 Move X0, [X0]
	025 Call 0x1B6F7F0
	026 Move X0, 0x226E000
	027 Move X0, [X0+8]
	028 Call 0x1B6F7F0
	029 Move W8, 1
	030 Move [X20+1613], W8
	031 Move [X31+32], X31
	032 Move [X31+40], X31
	033 Move [X31+48], X31
	034 Move X8, [X19+216]
	035 Compare X8, 0
	036 JumpIfEqual {122}
	037 Move X24, 0x226E000
	038 Move X25, 0x226E000
	039 Move X21, 0x226B000
	040 Move X22, 0x226C000
	041 Move X24, [X24+8]
	042 Move X25, [X25]
	043 Move X21, [X21+1152]
	044 Move X22, [X22+504]
	045 Move W20, W31
	046 Move X26, 0x2541000
	047 Move W27, 1
	048 Move X28, 0x2541000
	049 Move W8, [X8+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Add X8, X31, 8
	052 Move X0, X19
	053 Call CystController.get_tetherAttachmentPoints, X0
	054 NotImplemented "Instruction LDUR not yet implemented."
	055 Move X8, [X31+24]
	056 Move W9, [X26+1087]
	057 Move [X31+2], V0
	058 Move [X31+48], X8
	059 Compare W9, 0
	060 JumpIfNotEqual {64}
	061 Move X0, X21
	062 Call 0x1B6F7F0
	063 Move [X26+1087], W27
	064 Move X8, [X21]
	065 Move X2, [X24]
	066 Add X0, X31, 32
	067 Move W1, W20
	068 Move X8, [X8+184]
	069 Move S0, [X8]
	070 Move S1, [X8+4]
	071 Move V2, [X8+8]
	072 Call NetworkArray`1<Vector3>.Set, X0, X1, X2
	073 Move X0, [X19+216]
	074 Compare X0, 0
	075 JumpIfEqual {122}
	076 Move X2, [X25]
	077 Move W1, W20
	078 Call List`1<Object>.get_Item, X0, X1
	079 Compare X0, 0
	080 JumpIfEqual {122}
	081 Move X1, X31
	082 Call Component.get_transform, X0
	083 Compare X0, 0
	084 JumpIfEqual {122}
	085 Move S0, 1
	086 Move S1, 1
	087 Move S2, W31
	088 Move X1, X31
	089 Call Transform.set_localScale, X0, X1
	090 Move X0, [X19+216]
	091 Compare X0, 0
	092 JumpIfEqual {122}
	093 Move X2, [X25]
	094 Move W1, W20
	095 Call List`1<Object>.get_Item, X0, X1
	096 Compare X0, 0
	097 JumpIfEqual {122}
	098 Move X1, X31
	099 Call Component.get_transform, X0
	100 Move W8, [X28+1108]
	101 Move X23, X0
	102 Compare W8, 0
	103 JumpIfNotEqual {107}
	104 Move X0, X22
	105 Call 0x1B6F7F0
	106 Move [X28+1108], W27
	107 Compare X23, 0
	108 JumpIfEqual {122}
	109 Move X8, [X22]
	110 Move X0, X23
	111 Move X1, X31
	112 Move X8, [X8+184]
	113 Move S2, [X8+8]
	114 Move S3, [X8+12]
	115 Move S0, [X8]
	116 Move S1, [X8+4]
	117 Call Transform.set_rotation, X0, X1
	118 Move X8, [X19+216]
	119 Add W20, W20, 1
	120 Compare X8, 0
	121 JumpIfNotEqual {49}
	122 Call 0x1B6FA1C
	123 Move X20, [X31+144]
	124 Move X19, [X31+152]
	125 Move X22, [X31+128]
	126 Move X21, [X31+136]
	127 Move X24, [X31+112]
	128 Move X23, [X31+120]
	129 Move X26, [X31+96]
	130 Move X25, [X31+104]
	131 Move X28, [X31+80]
	132 Move X27, [X31+88]
	133 Move X30, [X31+64]
	134 Add X31, X31, 160
	135 Return 

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01CE3704 CMP W0, 0x4
	0x01CE3708 B.NE 0x1CE3718
	0x01CE370C LDP X20, X19, [X31 + 0x10]
	0x01CE3710 LDP X30, X21, [X31], #0x20
	0x01CE3714 RET
	0x01CE3718 LDR X0, [X19 + 0x40]
	0x01CE371C CBZ X0, 0x1CE380C
	0x01CE3720 MOV X1, X31
	0x01CE3724 BL 0x1D9F538
	0x01CE3728 ANDS W31, W0, 0x7
	0x01CE372C B.EQ 0x1CE3790
	0x01CE3730 TBNZ X0, 0x0, 0x1CE3690
	0x01CE3734 LDR X8, [X19 + 0x38]
	0x01CE3738 CBZ X8, 0x1CE380C
	0x01CE373C LDR X0, [X8 + 0x50]
	0x01CE3740 CBZ X0, 0x1CE380C
	0x01CE3744 MOV X1, X31
	0x01CE3748 BL 0x1DBEFE4
	0x01CE374C TBZ X0, 0x0, 0x1CE370C
	0x01CE3750 LDR X8, [X19 + 0x38]
	0x01CE3754 CBZ X8, 0x1CE380C
	0x01CE3758 LDR X0, [X8 + 0x50]
	0x01CE375C MOVZ W1, 0xC
	0x01CE3760 MOV X2, X31
	0x01CE3764 BL 0x1DD601C
	0x01CE3768 MOV X21, X0
	0x01CE376C MOVZ W0, 0x1
	0x01CE3770 MOV X1, X31
	0x01CE3774 BL 0x1D29EBC
	0x01CE3778 LDR X8, [X19 + 0x40]
	0x01CE377C CBZ X8, 0x1CE380C
	0x01CE3780 LDR X8, [X8 + 0x20]
	0x01CE3784 CBZ X8, 0x1CE37C8
	0x01CE3788 LDR W0, [X8]
	0x01CE378C B 0x1CE37CC
	0x01CE3790 LDR X0, [X21]
	0x01CE3794 LDR X19, [X19 + 0x40]
	0x01CE3798 LDR W8, [X0 + 0xE0]
	0x01CE379C CBNZ W8, 0x1CE37A4
	0x01CE37A0 BL 0x1B6E8F8
	0x01CE37A4 ADRP X8, 0x226D000
	0x01CE37A8 LDR X8, [X8 + 0x30]
	0x01CE37AC MOV X1, X19
	0x01CE37B0 LDP X20, X19, [X31 + 0x10]
	0x01CE37B4 MOVZ W2, 0x7
	0x01CE37B8 LDR X0, [X8]
	0x01CE37BC MOV X3, X31
	0x01CE37C0 LDP X30, X21, [X31], #0x20
	0x01CE37C4 B 0x1D69640
	0x01CE37C8 MOV X0, X31
	0x01CE37CC LDR W1, [X19 + 0x68]
	0x01CE37D0 MOVZ W2, 0x2
	0x01CE37D4 MOV X3, X31
	0x01CE37D8 BL 0x1DA8258
	0x01CE37DC STUR X0, [X21 + 0x1C]
	0x01CE37E0 STR W20, [X21 + 0x24]
	0x01CE37E4 CBZ X21, 0x1CE380C
	0x01CE37E8 MOVZ W8, 0x60
	0x01CE37EC STR W8, [X21 + 0xC]
	0x01CE37F0 LDR X0, [X19 + 0x38]
	0x01CE37F4 CBZ X0, 0x1CE380C
	0x01CE37F8 LDP X20, X19, [X31 + 0x10]
	0x01CE37FC MOV X1, X21
	0x01CE3800 MOV X2, X31
	0x01CE3804 LDP X30, X21, [X31], #0x20
	0x01CE3808 B 0x1D8A710
	0x01CE380C BL 0x1B6EA1C
	0x01CE3810 STR D10, [X31 - 0x30]!
	0x01CE3814 STP D9, D8, [X31 + 0x8]
	0x01CE3818 STR X30, [X31 + 0x18]
	0x01CE381C STP X20, X19, [X31 + 0x20]
	0x01CE3820 MOV X19, X0
	0x01CE3824 BL 0x1CE1B04
	0x01CE3828 TBZ X0, 0x0, 0x1CE3840
	0x01CE382C LDP X20, X19, [X31 + 0x20]
	0x01CE3830 LDR X30, [X31 + 0x18]
	0x01CE3834 LDP D9, D8, [X31 + 0x8]
	0x01CE3838 LDR V10, [X31], #0x30
	0x01CE383C RET
	0x01CE3840 MOVZ W1, 0x1
	0x01CE3844 MOV X0, X19
	0x01CE3848 BL 0x1CE1B6C
	0x01CE384C LDR X20, [X19 + 0xD0]
	0x01CE3850 CBZ X20, 0x1CE3880
	0x01CE3854 MOV X0, X19
	0x01CE3858 MOV X1, X31
	0x01CE385C BL 0x3A9B084
	0x01CE3860 CBZ X0, 0x1CE394C
	0x01CE3864 MOV X1, X31
	0x01CE3868 BL 0x3AA7658
	0x01CE386C FMOV S3, 1
	0x01CE3870 MOVZ W1, 0x1
	0x01CE3874 MOV X0, X20
	0x01CE3878 MOV X2, X31
	0x01CE387C BL 0x1CC35DC
	0x01CE3880 MOV X0, X19
	0x01CE3884 MOV X1, X31
	0x01CE3888 BL 0x3A9B084
	0x01CE388C CBZ X0, 0x1CE394C
	0x01CE3890 MOV X1, X31
	0x01CE3894 BL 0x3AA7658
	0x01CE3898 ADRP X20, 0x2540000
	0x01CE389C LDRB W8, [X20 + 0x454]
	0x01CE38A0 MOV V8.16B, V0.16B
	0x01CE38A4 MOV V9.16B, V1.16B
	0x01CE38A8 MOV V10.16B, V2.16B
	0x01CE38AC CBNZ W8, 0x1CE38C4
	0x01CE38B0 ADRP X0, 0x226B000
	0x01CE38B4 LDR X0, [X0 + 0x1F8]
	0x01CE38B8 BL 0x1B6E7F0
	0x01CE38BC MOVZ W8, 0x1
	0x01CE38C0 STRB W8, [X20 + 0x454]
	0x01CE38C4 ADRP X8, 0x226B000
	0x01CE38C8 LDR X8, [X8 + 0x1F8]
	0x01CE38CC MOVZ W0, 0x80
	0x01CE38D0 MOV V0.16B, V8.16B
	0x01CE38D4 MOV V1.16B, V9.16B
	0x01CE38D8 LDR X8, [X8]
	0x01CE38DC MOV V2.16B, V10.16B
	0x01CE38E0 MOV X1, X31
	0x01CE38E4 LDR X8, [X8 + 0xB8]
	0x01CE38E8 LDP S3, S4, [X8]
	0x01CE38EC LDP S5, S6, [X8 + 0x8]
	0x01CE38F0 BL 0x1CF3540
	0x01CE38F4 LDR X0, [X19 + 0x38]
	0x01CE38F8 FMOV S0, 20
	0x01CE38FC MOV X1, X31
	0x01CE3900 BL 0x1D9CEB8
	0x01CE3904 AND X1, X0, 0x0
	0x01CE3908 MOV X0, X19
	0x01CE390C BL 0x1CE1C30
	0x01CE3910 FMOV S0, W31
	0x01CE3914 MOV X0, X19
	0x01CE3918 BL 0x1CE19E4
	0x01CE391C MOV X0, X19
	0x01CE3920 MOV X1, X31
	0x01CE3924 BL 0x1CE1744
	0x01CE3928 MOV X0, X19
	0x01CE392C MOV W1, W31
	0x01CE3930 BL 0x1CE1858
	0x01CE3934 MOV X0, X19
	0x01CE3938 LDP X20, X19, [X31 + 0x20]
	0x01CE393C LDR X30, [X31 + 0x18]
	0x01CE3940 LDP D9, D8, [X31 + 0x8]
	0x01CE3944 LDR V10, [X31], #0x30
	0x01CE3948 B 0x1CE2550
	0x01CE394C BL 0x1B6EA1C
	0x01CE3950 STP X30, X19, [X31 - 0x10]!
	0x01CE3954 LDR X19, [X0 + 0x80]
	0x01CE3958 BL 0x1CE1B04
	0x01CE395C CBZ X19, 0x1CE3978
	0x01CE3960 ORN W8, W31, W0, 0x0
	0x01CE3964 AND W1, W8, 0x1
	0x01CE3968 MOV X0, X19
	0x01CE396C MOV X2, X31
	0x01CE3970 LDP X30, X19, [X31], #0x10
	0x01CE3974 B 0x3A9D9A8
	0x01CE3978 BL 0x1B6EA1C
	0x01CE397C SUB X31, X31, 0xE0
	0x01CE3980 STR D14, [X31 + 0x50]
	0x01CE3984 STP D13, D12, [X31 + 0x58]
	0x01CE3988 STP D11, D10, [X31 + 0x68]
	0x01CE398C STP D9, D8, [X31 + 0x78]
	0x01CE3990 STR X30, [X31 + 0x88]
	0x01CE3994 STP X28, X27, [X31 + 0x90]
	0x01CE3998 STP X26, X25, [X31 + 0xA0]
	0x01CE399C STP X24, X23, [X31 + 0xB0]
	0x01CE39A0 STP X22, X21, [X31 + 0xC0]
	0x01CE39A4 STP X20, X19, [X31 + 0xD0]
	0x01CE39A8 ADRP X20, 0x2540000
	0x01CE39AC LDRB W8, [X20 + 0x650]
	0x01CE39B0 MOV X19, X0
	0x01CE39B4 TBNZ X8, 0x0, 0x1CE39D8
	0x01CE39B8 ADRP X0, 0x226B000
	0x01CE39BC LDR X0, [X0 + 0x3D8]
	0x01CE39C0 BL 0x1B6E7F0
	0x01CE39C4 ADRP X0, 0x226A000
	0x01CE39C8 LDR X0, [X0 + 0x4C0]
	0x01CE39CC BL 0x1B6E7F0
	0x01CE39D0 MOVZ W8, 0x1
	0x01CE39D4 STRB W8, [X20 + 0x650]
	0x01CE39D8 ADRP X8, 0xFFFFFFFFFEDC6000
	0x01CE39DC ADRP X9, 0xFFFFFFFFFEDC6000
	0x01CE39E0 ADRP X23, 0x226B000
	0x01CE39E4 ADRP X24, 0x226A000
	0x01CE39E8 LDR V1, [X8 + 0x994]
	0x01CE39EC LDR V2, [X9 + 0xA28]
	0x01CE39F0 LDR X23, [X23 + 0x3D8]
	0x01CE39F4 LDR X24, [X24 + 0x4C0]
	0x01CE39F8 MOVI V0.2D, 0x0
	0x01CE39FC STUR V0, [X31 + 0x3C]
	0x01CE3A00 STP V0, V0, [X31 + 0x20]
	0x01CE3A04 FMOV S0, 1
	0x01CE3A08 FMOV S3, 1
	0x01CE3A0C MOV X0, X31
	0x01CE3A10 BL 0x3A75B14
	0x01CE3A14 ADRP X20, 0x226A000
	0x01CE3A18 ADRP X8, 0xFFFFFFFFFEDC6000
	0x01CE3A1C ADRP X21, 0x226A000
	0x01CE3A20 LDR X20, [X20 + 0x488]
	0x01CE3A24 LDR V14, [X8 + 0xB64]
	0x01CE3A28 LDR X21, [X21 + 0x480]
	0x01CE3A2C MOVZ W25, 0x5
	0x01CE3A30 ADRP X26, 0x2540000
	0x01CE3A34 MOVZ W27, 0x1
	0x01CE3A38 ADRP X28, 0x2540000
	0x01CE3A3C MOV X0, X19
	0x01CE3A40 MOV X1, X31
	0x01CE3A44 BL 0x3A9B084
	0x01CE3A48 CBZ X0, 0x1CE3BD8
	0x01CE3A4C MOV X1, X31
	0x01CE3A50 BL 0x3AA7658
	0x01CE3A54 MOV X0, X31
	0x01CE3A58 MOV V8.16B, V0.16B
	0x01CE3A5C MOV V9.16B, V1.16B
	0x01CE3A60 MOV V10.16B, V2.16B
	0x01CE3A64 BL 0x3A98E48
	0x01CE3A68 LDRB W8, [X26 + 0x441]
	0x01CE3A6C MOV V11.16B, V0.16B
	0x01CE3A70 MOV V12.16B, V1.16B
	0x01CE3A74 MOV V13.16B, V2.16B
	0x01CE3A78 CBNZ W8, 0x1CE3A88
	0x01CE3A7C MOV X0, X20
	0x01CE3A80 BL 0x1B6E7F0
	0x01CE3A84 STRB W27, [X26 + 0x441]
	0x01CE3A88 LDR X0, [X20]
	0x01CE3A8C LDR W8, [X0 + 0xE0]
	0x01CE3A90 CBNZ W8, 0x1CE3A98
	0x01CE3A94 BL 0x1B6E8F8
	0x01CE3A98 FMUL S0, S11, S11
	0x01CE3A9C FMUL S1, S12, S12
	0x01CE3AA0 FADD S0, S0, S1
	0x01CE3AA4 FMUL S1, S13, S13
	0x01CE3AA8 FADD S0, S1, S0
	0x01CE3AAC FSQRT S0, S0
	0x01CE3AB0 FCMP S0, S14
	0x01CE3AB4 B.LE 0x1CE3AC8
	0x01CE3AB8 FDIV S11, S11, S0
	0x01CE3ABC FDIV S12, S12, S0
	0x01CE3AC0 FDIV S13, S13, S0
	0x01CE3AC4 B 0x1CE3AEC
	0x01CE3AC8 LDRB W8, [X28 + 0x43F]
	0x01CE3ACC CBNZ W8, 0x1CE3ADC
	0x01CE3AD0 MOV X0, X21
	0x01CE3AD4 BL 0x1B6E7F0
	0x01CE3AD8 STRB W27, [X28 + 0x43F]
	0x01CE3ADC LDR X8, [X21]
	0x01CE3AE0 LDR X8, [X8 + 0xB8]
	0x01CE3AE4 LDP S11, S12, [X8]
	0x01CE3AE8 LDR V13, [X8 + 0x8]
	0x01CE3AEC LDR X0, [X23]
	0x01CE3AF0 LDR W8, [X0 + 0xE0]
	0x01CE3AF4 CBNZ W8, 0x1CE3B00
	0x01CE3AF8 BL 0x1B6E8F8
	0x01CE3AFC LDR X0, [X23]
	0x01CE3B00 LDR X8, [X0 + 0xB8]
	0x01CE3B04 MOV X1, X31
	0x01CE3B08 LDR W0, [X8]
	0x01CE3B0C BL 0x3A9DE68
	0x01CE3B10 LDR X8, [X24]
	0x01CE3B14 MOV W22, W0
	0x01CE3B18 LDR W9, [X8 + 0xE0]
	0x01CE3B1C CBNZ W9, 0x1CE3B28
	0x01CE3B20 MOV X0, X8
	0x01CE3B24 BL 0x1B6E8F8
	0x01CE3B28 ADD X0, X31, 0x8
	0x01CE3B2C ADD X1, X31, 0x20
	0x01CE3B30 FMOV S0, 15
	0x01CE3B34 MOV W2, W22
	0x01CE3B38 MOV X3, X31
	0x01CE3B3C STP S8, S9, [X31 + 0x8]
	0x01CE3B40 STP S10, S11, [X31 + 0x10]
	0x01CE3B44 STP S12, S13, [X31 + 0x18]
	0x01CE3B48 BL 0x3AF37B8
	0x01CE3B4C TBZ X0, 0x0, 0x1CE3BA0
	0x01CE3B50 MOV X0, X19
	0x01CE3B54 MOV X1, X31
	0x01CE3B58 BL 0x3A9B084
	0x01CE3B5C CBZ X0, 0x1CE3BD8
	0x01CE3B60 MOV X1, X31
	0x01CE3B64 BL 0x3AA7658
	0x01CE3B68 ADD X0, X31, 0x20
	0x01CE3B6C MOV X1, X31
	0x01CE3B70 MOV V8.16B, V0.16B
	0x01CE3B74 MOV V9.16B, V1.16B
	0x01CE3B78 MOV V10.16B, V2.16B
	0x01CE3B7C BL 0x3AF6270
	0x01CE3B80 MOV V3.16B, V0.16B
	0x01CE3B84 MOV V4.16B, V1.16B
	0x01CE3B88 MOV V5.16B, V2.16B
	0x01CE3B8C MOV V0.16B, V8.16B
	0x01CE3B90 MOV V1.16B, V9.16B
	0x01CE3B94 MOV V2.16B, V10.16B
	0x01CE3B98 MOV X0, X31
	0x01CE3B9C BL 0x3A755E8
	0x01CE3BA0 SUBS W25, W25, 0x1
	0x01CE3BA4 B.NE 0x1CE3A3C
	0x01CE3BA8 LDP X20, X19, [X31 + 0xD0]
	0x01CE3BAC LDP X22, X21, [X31 + 0xC0]
	0x01CE3BB0 LDP X24, X23, [X31 + 0xB0]
	0x01CE3BB4 LDP X26, X25, [X31 + 0xA0]
	0x01CE3BB8 LDP X28, X27, [X31 + 0x90]
	0x01CE3BBC LDR X30, [X31 + 0x88]
	0x01CE3BC0 LDP D9, D8, [X31 + 0x78]
	0x01CE3BC4 LDP D11, D10, [X31 + 0x68]
	0x01CE3BC8 LDP D13, D12, [X31 + 0x58]
	0x01CE3BCC LDR V14, [X31 + 0x50]
	0x01CE3BD0 ADD X31, X31, 0xE0
	0x01CE3BD4 RET
	0x01CE3BD8 BL 0x1B6EA1C
	0x01CE3BDC MOV X1, X31
	0x01CE3BE0 B 0x1D661D8
	0x01CE3BE4 SUB X31, X31, 0x70
	0x01CE3BE8 STR X30, [X31 + 0x40]
	0x01CE3BEC STP X22, X21, [X31 + 0x50]
	0x01CE3BF0 STP X20, X19, [X31 + 0x60]
	0x01CE3BF4 ADRP X21, 0x2540000
	0x01CE3BF8 ADRP X20, 0x226B000
	0x01CE3BFC LDRB W8, [X21 + 0x651]
	0x01CE3C00 LDR X20, [X20 + 0x1C0]
	0x01CE3C04 MOV X19, X0
	0x01CE3C08 TBNZ X8, 0x0, 0x1CE3C38
	0x01CE3C0C ADRP X0, 0x226D000
	0x01CE3C10 LDR X0, [X0 + 0x38]
	0x01CE3C14 BL 0x1B6E7F0
	0x01CE3C18 ADRP X0, 0x226B000
	0x01CE3C1C LDR X0, [X0 + 0x1C0]
	0x01CE3C20 BL 0x1B6E7F0
	0x01CE3C24 ADRP X0, 0x226D000
	0x01CE3C28 LDR X0, [X0 + 0x40]
	0x01CE3C2C BL 0x1B6E7F0
	0x01CE3C30 MOVZ W8, 0x1
	0x01CE3C34 STRB W8, [X21 + 0x651]
	0x01CE3C38 ADRP X22, 0x226D000
	0x01CE3C3C ADRP X21, 0x226D000
	0x01CE3C40 LDR X22, [X22 + 0x40]
	0x01CE3C44 LDR X21, [X21 + 0x38]
	0x01CE3C48 ADD X8, X31, 0x20
	0x01CE3C4C MOV X0, X19
	0x01CE3C50 BL 0x1CE158C
	0x01CE3C54 LDR V0, [X31 + 0x2]
	0x01CE3C58 LDR X8, [X31 + 0x30]
	0x01CE3C5C LDR X0, [X20]
	0x01CE3C60 STR V0, [X31]
	0x01CE3C64 STR X8, [X31 + 0x10]
	0x01CE3C68 LDR W8, [X0 + 0xE0]
	0x01CE3C6C LDR X20, [X19 + 0xE0]
	0x01CE3C70 CBNZ W8, 0x1CE3C78
	0x01CE3C74 BL 0x1B6E8F8
	0x01CE3C78 LDR X2, [X22]
	0x01CE3C7C LDR V0, [X31]
	0x01CE3C80 LDR X8, [X31 + 0x10]
	0x01CE3C84 LDR X3, [X21]
	0x01CE3C88 ADD X0, X31, 0x20
	0x01CE3C8C MOV X1, X20
	0x01CE3C90 STR V0, [X31 + 0x2]
	0x01CE3C94 STR X8, [X31 + 0x30]
	0x01CE3C98 BL 0x210FE30
	0x01CE3C9C LDR X1, [X19 + 0xE8]
	0x01CE3CA0 MOV X0, X19
	0x01CE3CA4 BL 0x1CE1744
	0x01CE3CA8 LDRB W1, [X19 + 0xF0]
	0x01CE3CAC MOV X0, X19
	0x01CE3CB0 BL 0x1CE1858
	0x01CE3CB4 LDP S0, S1, [X19 + 0xF4]
	0x01CE3CB8 LDR V2, [X19 + 0xFC]
	0x01CE3CBC MOV X0, X19
	0x01CE3CC0 BL 0x1CE1920
	0x01CE3CC4 LDR V0, [X19 + 0x100]
	0x01CE3CC8 MOV X0, X19
	0x01CE3CCC BL 0x1CE19E4
	0x01CE3CD0 LDR W1, [X19 + 0x104]
	0x01CE3CD4 MOV X0, X19
	0x01CE3CD8 BL 0x1CE1AA4
	0x01CE3CDC LDRB W1, [X19 + 0x108]
	0x01CE3CE0 MOV X0, X19
	0x01CE3CE4 BL 0x1CE1B6C
	0x01CE3CE8 LDR W1, [X19 + 0x10C]
	0x01CE3CEC MOV X0, X19
	0x01CE3CF0 BL 0x1CE1C30
	0x01CE3CF4 LDP X20, X19, [X31 + 0x60]
	0x01CE3CF8 LDP X22, X21, [X31 + 0x50]
	0x01CE3CFC LDR X30, [X31 + 0x40]
	0x01CE3D00 ADD X31, X31, 0x70
	0x01CE3D04 RET
	0x01CE3D08 SUB X31, X31, 0x60
	0x01CE3D0C STP X30, X21, [X31 + 0x40]
	0x01CE3D10 STP X20, X19, [X31 + 0x50]
	0x01CE3D14 ADRP X21, 0x2540000
	0x01CE3D18 ADRP X20, 0x226B000
	0x01CE3D1C LDRB W8, [X21 + 0x652]
	0x01CE3D20 LDR X20, [X20 + 0x1C0]
	0x01CE3D24 MOV X19, X0
	0x01CE3D28 TBNZ X8, 0x0, 0x1CE3D4C
	0x01CE3D2C ADRP X0, 0x226D000
	0x01CE3D30 LDR X0, [X0 + 0x48]
	0x01CE3D34 BL 0x1B6E7F0
	0x01CE3D38 ADRP X0, 0x226B000
	0x01CE3D3C LDR X0, [X0 + 0x1C0]
	0x01CE3D40 BL 0x1B6E7F0
	0x01CE3D44 MOVZ W8, 0x1
	0x01CE3D48 STRB W8, [X21 + 0x652]
	0x01CE3D4C ADRP X21, 0x226D000
	0x01CE3D50 LDR X21, [X21 + 0x48]
	0x01CE3D54 ADD X8, X31, 0x20
	0x01CE3D58 MOV X0, X19
	0x01CE3D5C BL 0x1CE158C
	0x01CE3D60 LDR V0, [X31 + 0x2]
	0x01CE3D64 LDR X8, [X31 + 0x30]
	0x01CE3D68 LDR X0, [X20]
	0x01CE3D6C STR V0, [X31]
	0x01CE3D70 STR X8, [X31 + 0x10]
	0x01CE3D74 LDR W8, [X0 + 0xE0]
	0x01CE3D78 CBNZ W8, 0x1CE3D80
	0x01CE3D7C BL 0x1B6E8F8
	0x01CE3D80 LDR V0, [X31]
	0x01CE3D84 LDR X8, [X31 + 0x10]
	0x01CE3D88 LDR X2, [X21]
	0x01CE3D8C ADD X1, X19, 0xE0
	0x01CE3D90 ADD X0, X31, 0x20
	0x01CE3D94 STR V0, [X31 + 0x2]
	0x01CE3D98 STR X8, [X31 + 0x30]
	0x01CE3D9C BL 0x210F034
	0x01CE3DA0 MOV X0, X19
	0x01CE3DA4 BL 0x1CE1644
	0x01CE3DA8 STR X0, [X19 + 0xE8]
	0x01CE3DAC MOV X0, X19
	0x01CE3DB0 BL 0x1CE17F0
	0x01CE3DB4 AND W8, W0, 0x1
	0x01CE3DB8 MOV X0, X19
	0x01CE3DBC STRB W8, [X19 + 0xF0]
	0x01CE3DC0 BL 0x1CE18BC
	0x01CE3DC4 MOV X0, X19
	0x01CE3DC8 STP S0, S1, [X19 + 0xF4]
	0x01CE3DCC STR S2, [X19 + 0xFC]
	0x01CE3DD0 BL 0x1CE1984
	0x01CE3DD4 MOV X0, X19
	0x01CE3DD8 STR S0, [X19 + 0x100]
	0x01CE3DDC BL 0x1CE1A44
	0x01CE3DE0 STR W0, [X19 + 0x104]
	0x01CE3DE4 MOV X0, X19
	0x01CE3DE8 BL 0x1CE1B04
	0x01CE3DEC AND W8, W0, 0x1
	0x01CE3DF0 MOV X0, X19
	0x01CE3DF4 STRB W8, [X19 + 0x108]
	0x01CE3DF8 BL 0x1CE1BD0
	0x01CE3DFC STR W0, [X19 + 0x10C]
	0x01CE3E00 LDP X20, X19, [X31 + 0x50]
	0x01CE3E04 LDP X30, X21, [X31 + 0x40]
	0x01CE3E08 ADD X31, X31, 0x60
	0x01CE3E0C RET
	0x01CE3E10 STP X30, X21, [X31 - 0x20]!
	0x01CE3E14 STP X20, X19, [X31 + 0x10]
	0x01CE3E18 ADRP X21, 0x2540000
	0x01CE3E1C LDRB W8, [X21 + 0x653]
	0x01CE3E20 MOV X20, X1
	0x01CE3E24 MOV X19, X0
	0x01CE3E28 TBNZ X8, 0x0, 0x1CE3E40
	0x01CE3E2C ADRP X0, 0x226D000
	0x01CE3E30 LDR X0, [X0 + 0x50]
	0x01CE3E34 BL 0x1B6E7F0
	0x01CE3E38 MOVZ W8, 0x1
	0x01CE3E3C STRB W8, [X21 + 0x653]
	0x01CE3E40 MOVZ W0, 0x1
	0x01CE3E44 MOV X1, X31
	0x01CE3E48 MOVZ W21, 0x1
	0x01CE3E4C BL 0x1D29EBC
	0x01CE3E50 CBZ X19, 0x1CE3EAC
	0x01CE3E54 ADRP X8, 0x226D000
	0x01CE3E58 LDR X8, [X8 + 0x50]
	0x01CE3E5C LDP W1, W2, [X20 + 0x24]
	0x01CE3E60 STRB W21, [X19 + 0x58]
	0x01CE3E64 LDR X9, [X19]
	0x01CE3E68 LDR X8, [X8]
	0x01CE3E6C LDRB W11, [X9 + 0x130]
	0x01CE3E70 LDRB W10, [X8 + 0x130]
	0x01CE3E74 CMP W11, W10
	0x01CE3E78 B.CC 0x1CE3EA0
	0x01CE3E7C LDR X9, [X9 + 0xC8]
	0x01CE3E80 ADD X9, X9, X10, 0x3, LSL
	0x01CE3E84 LDUR X9, [X9 - 0x8]
	0x01CE3E88 CMP X9, X8
	0x01CE3E8C B.NE 0x1CE3EA0
	0x01CE3E90 MOV X0, X19
	0x01CE3E94 LDP X20, X19, [X31 + 0x10]
	0x01CE3E98 LDP X30, X21, [X31], #0x20
	0x01CE3E9C B 0x1CE2350
	0x01CE3EA0 MOV X0, X19
	0x01CE3EA4 MOV X1, X8
	0x01CE3EA8 BL 0x1B6ECDC
	0x01CE3EAC BL 0x1B6EA1C
	0x01CE3EB0 STP X30, X21, [X31 - 0x20]!
	0x01CE3EB4 STP X20, X19, [X31 + 0x10]
	0x01CE3EB8 ADRP X21, 0x2540000
	0x01CE3EBC LDRB W8, [X21 + 0x654]
	0x01CE3EC0 MOV X20, X1
	0x01CE3EC4 MOV X19, X0
	0x01CE3EC8 TBNZ X8, 0x0, 0x1CE3EE0
	0x01CE3ECC ADRP X0, 0x226D000
	0x01CE3ED0 LDR X0, [X0 + 0x50]
	0x01CE3ED4 BL 0x1B6E7F0
	0x01CE3ED8 MOVZ W8, 0x1
	0x01CE3EDC STRB W8, [X21 + 0x654]
	0x01CE3EE0 MOVZ W0, 0x1
	0x01CE3EE4 MOV X1, X31
	0x01CE3EE8 MOVZ W21, 0x1
	0x01CE3EEC BL 0x1D29EBC
	0x01CE3EF0 CBZ X19, 0x1CE3F4C
	0x01CE3EF4 ADRP X8, 0x226D000
	0x01CE3EF8 LDR X8, [X8 + 0x50]
	0x01CE3EFC LDR W1, [X20 + 0x24]
	0x01CE3F00 STRB W21, [X19 + 0x58]
	0x01CE3F04 LDR X9, [X19]
	0x01CE3F08 LDR X8, [X8]
	0x01CE3F0C LDRB W11, [X9 + 0x130]
	0x01CE3F10 LDRB W10, [X8 + 0x130]
	0x01CE3F14 CMP W11, W10
	0x01CE3F18 B.CC 0x1CE3F40
	0x01CE3F1C LDR X9, [X9 + 0xC8]
	0x01CE3F20 ADD X9, X9, X10, 0x3, LSL
	0x01CE3F24 LDUR X9, [X9 - 0x8]
	0x01CE3F28 CMP X9, X8
	0x01CE3F2C B.NE 0x1CE3F40
	0x01CE3F30 MOV X0, X19
	0x01CE3F34 LDP X20, X19, [X31 + 0x10]
	0x01CE3F38 LDP X30, X21, [X31], #0x20
	0x01CE3F3C B 0x1CE3648
	0x01CE3F40 MOV X0, X19
	0x01CE3F44 MOV X1, X8
	0x01CE3F48 BL 0x1B6ECDC
	0x01CE3F4C BL 0x1B6EA1C
	0x01CE3F50 STP X30, X21, [X31 - 0x20]!
	0x01CE3F54 STP X20, X19, [X31 + 0x10]
	0x01CE3F58 ADRP X21, 0x2540000
	0x01CE3F5C LDRB W8, [X21 + 0x655]
	0x01CE3F60 MOV X20, X1
	0x01CE3F64 MOV X19, X0
	0x01CE3F68 TBNZ X8, 0x0, 0x1CE3F80
	0x01CE3F6C ADRP X0, 0x226B000
	0x01CE3F70 LDR X0, [X0 + 0x2A8]
	0x01CE3F74 BL 0x1B6E7F0
	0x01CE3F78 MOVZ W8, 0x1
	0x01CE3F7C STRB W8, [X21 + 0x655]
	0x01CE3F80 CBZ X20, 0x1CE3FF4
	0x01CE3F84 MOV X0, X20
	0x01CE3F88 MOV X1, X31
	0x01CE3F8C BL 0x3A9B0C0
	0x01CE3F90 CBZ X0, 0x1CE3FF4
	0x01CE3F94 MOV X1, X31
	0x01CE3F98 BL 0x3A9D928
	0x01CE3F9C CMP W0, 0x6
	0x01CE3FA0 B.NE 0x1CE3FE8
	0x01CE3FA4 ADRP X8, 0x226B000
	0x01CE3FA8 LDR X8, [X8 + 0x2A8]
	0x01CE3FAC LDR X20, [X19 + 0x20]
	0x01CE3FB0 LDR X0, [X8]
	0x01CE3FB4 LDR W8, [X0 + 0xE0]
	0x01CE3FB8 CBNZ W8, 0x1CE3FC0
	0x01CE3FBC BL 0x1B6E8F8
	0x01CE3FC0 MOV X0, X31
	0x01CE3FC4 BL 0x1CAB1DC
	0x01CE3FC8 CBZ X20, 0x1CE3FF4
	0x01CE3FCC MOV X2, X0
	0x01CE3FD0 MOV X0, X20
	0x01CE3FD4 MOV X1, X19
	0x01CE3FD8 LDP X20, X19, [X31 + 0x10]
	0x01CE3FDC MOV X3, X31
	0x01CE3FE0 LDP X30, X21, [X31], #0x20
	0x01CE3FE4 B 0x1CE20E0
	0x01CE3FE8 LDP X20, X19, [X31 + 0x10]
	0x01CE3FEC LDP X30, X21, [X31], #0x20
	0x01CE3FF0 RET
	0x01CE3FF4 BL 0x1B6EA1C
	0x01CE3FF8 MOV X1, X31
	0x01CE3FFC B 0x3A9EEE4
	0x01CE4000 STP X30, X19, [X31 - 0x10]!
	0x01CE4004 LDR X8, [X0 + 0x50]
	0x01CE4008 CBZ X8, 0x1CE4020
	0x01CE400C LDR W8, [X8]
	0x01CE4010 CMP W8, 0x0
	0x01CE4014 CSET W0, NE
	0x01CE4018 LDP X30, X19, [X31], #0x10
	0x01CE401C RET
	0x01CE4020 ADRP X0, 0x2269000
	0x01CE4024 LDR X0, [X0 + 0x490]
	0x01CE4028 BL 0x1B6E804
	0x01CE402C BL 0x1B6EA0C
	0x01CE4030 MOV X19, X0
	0x01CE4034 ADRP X0, 0x226C000
	0x01CE4038 LDR X0, [X0 + 0x58]
	0x01CE403C BL 0x1B6E804
	0x01CE4040 MOV X1, X0
	0x01CE4044 MOV X0, X19
	0x01CE4048 MOV X2, X31
	0x01CE404C BL 0x31E7550
	0x01CE4050 ADRP X0, 0x226C000
	0x01CE4054 LDR X0, [X0 + 0x60]
	0x01CE4058 BL 0x1B6E804
	0x01CE405C MOV X1, X0
	0x01CE4060 MOV X0, X19
	0x01CE4064 BL 0x1B6E8E8
	0x01CE4068 STP X30, X19, [X31 - 0x10]!
	0x01CE406C LDR X8, [X0 + 0x50]
	0x01CE4070 CBZ X8, 0x1CE4084
	0x01CE4074 AND W9, W1, 0x1
	0x01CE4078 STR W9, [X8]
	0x01CE407C LDP X30, X19, [X31], #0x10
	0x01CE4080 RET
	0x01CE4084 ADRP X0, 0x2269000
	0x01CE4088 LDR X0, [X0 + 0x490]
	0x01CE408C BL 0x1B6E804
	0x01CE4090 BL 0x1B6EA0C
	0x01CE4094 MOV X19, X0
	0x01CE4098 ADRP X0, 0x226C000
	0x01CE409C LDR X0, [X0 + 0x58]
	0x01CE40A0 BL 0x1B6E804
	0x01CE40A4 MOV X1, X0
	0x01CE40A8 MOV X0, X19
	0x01CE40AC MOV X2, X31
	0x01CE40B0 BL 0x31E7550
	0x01CE40B4 ADRP X0, 0x226C000
	0x01CE40B8 LDR X0, [X0 + 0x68]
	0x01CE40BC BL 0x1B6E804
	0x01CE40C0 MOV X1, X0
	0x01CE40C4 MOV X0, X19
	0x01CE40C8 BL 0x1B6E8E8
	0x01CE40CC STP X30, X19, [X31 - 0x10]!
	0x01CE40D0 LDR X8, [X0 + 0x50]
	0x01CE40D4 CBZ X8, 0x1CE40E4
	0x01CE40D8 LDR W0, [X8 + 0x4]
	0x01CE40DC LDP X30, X19, [X31], #0x10
	0x01CE40E0 RET
	0x01CE40E4 ADRP X0, 0x2269000
	0x01CE40E8 LDR X0, [X0 + 0x490]
	0x01CE40EC BL 0x1B6E804
	0x01CE40F0 BL 0x1B6EA0C
	0x01CE40F4 MOV X19, X0
	0x01CE40F8 ADRP X0, 0x226C000
	0x01CE40FC LDR X0, [X0 + 0x70]
	0x01CE4100 BL 0x1B6E804
	0x01CE4104 MOV X1, X0
	0x01CE4108 MOV X0, X19
	0x01CE410C MOV X2, X31
	0x01CE4110 BL 0x31E7550
	0x01CE4114 ADRP X0, 0x226C000
	0x01CE4118 LDR X0, [X0 + 0x78]
	0x01CE411C BL 0x1B6E804
	0x01CE4120 MOV X1, X0
	0x01CE4124 MOV X0, X19
	0x01CE4128 BL 0x1B6E8E8
	0x01CE412C STP X30, X19, [X31 - 0x10]!
	0x01CE4130 LDR X8, [X0 + 0x50]
	0x01CE4134 CBZ X8, 0x1CE4144
	0x01CE4138 STR W1, [X8 + 0x4]
	0x01CE413C LDP X30, X19, [X31], #0x10
	0x01CE4140 RET
	0x01CE4144 ADRP X0, 0x2269000
	0x01CE4148 LDR X0, [X0 + 0x490]
	0x01CE414C BL 0x1B6E804
	0x01CE4150 BL 0x1B6EA0C
	0x01CE4154 MOV X19, X0
	0x01CE4158 ADRP X0, 0x226C000
	0x01CE415C LDR X0, [X0 + 0x70]
	0x01CE4160 BL 0x1B6E804
	0x01CE4164 MOV X1, X0
	0x01CE4168 MOV X0, X19
	0x01CE416C MOV X2, X31
	0x01CE4170 BL 0x31E7550
	0x01CE4174 ADRP X0, 0x226C000
	0x01CE4178 LDR X0, [X0 + 0x80]
	0x01CE417C BL 0x1B6E804
	0x01CE4180 MOV X1, X0
	0x01CE4184 MOV X0, X19
	0x01CE4188 BL 0x1B6E8E8
	0x01CE418C STP X30, X19, [X31 - 0x10]!
	0x01CE4190 LDR X8, [X0 + 0x50]
	0x01CE4194 CBZ X8, 0x1CE41A4
	0x01CE4198 LDR W0, [X8 + 0x8]
	0x01CE419C LDP X30, X19, [X31], #0x10
	0x01CE41A0 RET
	0x01CE41A4 ADRP X0, 0x2269000
	0x01CE41A8 LDR X0, [X0 + 0x490]
	0x01CE41AC BL 0x1B6E804
	0x01CE41B0 BL 0x1B6EA0C
	0x01CE41B4 MOV X19, X0
	0x01CE41B8 ADRP X0, 0x226C000
	0x01CE41BC LDR X0, [X0 + 0x88]
	0x01CE41C0 BL 0x1B6E804
	0x01CE41C4 MOV X1, X0
	0x01CE41C8 MOV X0, X19
	0x01CE41CC MOV X2, X31
	0x01CE41D0 BL 0x31E7550
	0x01CE41D4 ADRP X0, 0x226C000
	0x01CE41D8 LDR X0, [X0 + 0x90]
	0x01CE41DC BL 0x1B6E804
	0x01CE41E0 MOV X1, X0
	0x01CE41E4 MOV X0, X19
	0x01CE41E8 BL 0x1B6E8E8
	0x01CE41EC STP X30, X19, [X31 - 0x10]!
	0x01CE41F0 LDR X8, [X0 + 0x50]
	0x01CE41F4 CBZ X8, 0x1CE4204
	0x01CE41F8 STR W1, [X8 + 0x8]
	0x01CE41FC LDP X30, X19, [X31], #0x10
	0x01CE4200 RET
	0x01CE4204 ADRP X0, 0x2269000
	0x01CE4208 LDR X0, [X0 + 0x490]
	0x01CE420C BL 0x1B6E804
	0x01CE4210 BL 0x1B6EA0C
	0x01CE4214 MOV X19, X0
	0x01CE4218 ADRP X0, 0x226C000
	0x01CE421C LDR X0, [X0 + 0x88]
	0x01CE4220 BL 0x1B6E804
	0x01CE4224 MOV X1, X0
	0x01CE4228 MOV X0, X19
	0x01CE422C MOV X2, X31
	0x01CE4230 BL 0x31E7550
	0x01CE4234 ADRP X0, 0x226C000
	0x01CE4238 LDR X0, [X0 + 0x98]
	0x01CE423C BL 0x1B6E804
	0x01CE4240 MOV X1, X0
	0x01CE4244 MOV X0, X19
	0x01CE4248 BL 0x1B6E8E8
	0x01CE424C STP X30, X19, [X31 - 0x10]!
	0x01CE4250 LDR X8, [X0 + 0x50]
	0x01CE4254 CBZ X8, 0x1CE4264
	0x01CE4258 LDR V0, [X8 + 0xC]
	0x01CE425C LDP X30, X19, [X31], #0x10
	0x01CE4260 RET
	0x01CE4264 ADRP X0, 0x2269000
	0x01CE4268 LDR X0, [X0 + 0x490]
	0x01CE426C BL 0x1B6E804
	0x01CE4270 BL 0x1B6EA0C
	0x01CE4274 MOV X19, X0
	0x01CE4278 ADRP X0, 0x226C000
	0x01CE427C LDR X0, [X0 + 0xA0]
	0x01CE4280 BL 0x1B6E804
	0x01CE4284 MOV X1, X0
	0x01CE4288 MOV X0, X19
	0x01CE428C MOV X2, X31
	0x01CE4290 BL 0x31E7550
	0x01CE4294 ADRP X0, 0x226C000
	0x01CE4298 LDR X0, [X0 + 0xA8]
	0x01CE429C BL 0x1B6E804
	0x01CE42A0 MOV X1, X0
	0x01CE42A4 MOV X0, X19
	0x01CE42A8 BL 0x1B6E8E8
	0x01CE42AC STP X30, X19, [X31 - 0x10]!
	0x01CE42B0 LDR X8, [X0 + 0x50]
	0x01CE42B4 CBZ X8, 0x1CE42C4
	0x01CE42B8 STR S0, [X8 + 0xC]
	0x01CE42BC LDP X30, X19, [X31], #0x10
	0x01CE42C0 RET
	0x01CE42C4 ADRP X0, 0x2269000
	0x01CE42C8 LDR X0, [X0 + 0x490]
	0x01CE42CC BL 0x1B6E804
	0x01CE42D0 BL 0x1B6EA0C
	0x01CE42D4 MOV X19, X0
	0x01CE42D8 ADRP X0, 0x226C000
	0x01CE42DC LDR X0, [X0 + 0xA0]
	0x01CE42E0 BL 0x1B6E804
	0x01CE42E4 MOV X1, X0
	0x01CE42E8 MOV X0, X19
	0x01CE42EC MOV X2, X31
	0x01CE42F0 BL 0x31E7550
	0x01CE42F4 ADRP X0, 0x226C000
	0x01CE42F8 LDR X0, [X0 + 0xB0]
	0x01CE42FC BL 0x1B6E804
	0x01CE4300 MOV X1, X0
	0x01CE4304 MOV X0, X19
	0x01CE4308 BL 0x1B6E8E8
	0x01CE430C STP X30, X19, [X31 - 0x10]!
	0x01CE4310 LDR X8, [X0 + 0x50]
	0x01CE4314 CBZ X8, 0x1CE4324
	0x01CE4318 LDR V0, [X8 + 0x10]
	0x01CE431C LDP X30, X19, [X31], #0x10
	0x01CE4320 RET
	0x01CE4324 ADRP X0, 0x2269000
	0x01CE4328 LDR X0, [X0 + 0x490]
	0x01CE432C BL 0x1B6E804
	0x01CE4330 BL 0x1B6EA0C
	0x01CE4334 MOV X19, X0
	0x01CE4338 ADRP X0, 0x226C000
	0x01CE433C LDR X0, [X0 + 0xB8]
	0x01CE4340 BL 0x1B6E804
	0x01CE4344 MOV X1, X0
	0x01CE4348 MOV X0, X19
	0x01CE434C MOV X2, X31
	0x01CE4350 BL 0x31E7550
	0x01CE4354 ADRP X0, 0x226C000
	0x01CE4358 LDR X0, [X0 + 0xC0]
	0x01CE435C BL 0x1B6E804
	0x01CE4360 MOV X1, X0
	0x01CE4364 MOV X0, X19
	0x01CE4368 BL 0x1B6E8E8
	0x01CE436C STP X30, X19, [X31 - 0x10]!
	0x01CE4370 LDR X8, [X0 + 0x50]
	0x01CE4374 CBZ X8, 0x1CE4384
	0x01CE4378 STR S0, [X8 + 0x10]
	0x01CE437C LDP X30, X19, [X31], #0x10
	0x01CE4380 RET
	0x01CE4384 ADRP X0, 0x2269000
	0x01CE4388 LDR X0, [X0 + 0x490]
	0x01CE438C BL 0x1B6E804
	0x01CE4390 BL 0x1B6EA0C
	0x01CE4394 MOV X19, X0
	0x01CE4398 ADRP X0, 0x226C000
	0x01CE439C LDR X0, [X0 + 0xB8]
	0x01CE43A0 BL 0x1B6E804
	0x01CE43A4 MOV X1, X0
	0x01CE43A8 MOV X0, X19
	0x01CE43AC MOV X2, X31
	0x01CE43B0 BL 0x31E7550
	0x01CE43B4 ADRP X0, 0x226C000
	0x01CE43B8 LDR X0, [X0 + 0xC8]
	0x01CE43BC BL 0x1B6E804
	0x01CE43C0 MOV X1, X0
	0x01CE43C4 MOV X0, X19
	0x01CE43C8 BL 0x1B6E8E8
	0x01CE43CC STP X30, X19, [X31 - 0x10]!
	0x01CE43D0 LDR X8, [X0 + 0x50]
	0x01CE43D4 CBZ X8, 0x1CE43E4
	0x01CE43D8 LDR V0, [X8 + 0x14]
	0x01CE43DC LDP X30, X19, [X31], #0x10
	0x01CE43E0 RET
	0x01CE43E4 ADRP X0, 0x2269000
	0x01CE43E8 LDR X0, [X0 + 0x490]
	0x01CE43EC BL 0x1B6E804
	0x01CE43F0 BL 0x1B6EA0C
	0x01CE43F4 MOV X19, X0
	0x01CE43F8 ADRP X0, 0x226C000
	0x01CE43FC LDR X0, [X0 + 0xD0]
	0x01CE4400 BL 0x1B6E804
	0x01CE4404 MOV X1, X0
	0x01CE4408 MOV X0, X19
	0x01CE440C MOV X2, X31
	0x01CE4410 BL 0x31E7550
	0x01CE4414 ADRP X0, 0x226C000
	0x01CE4418 LDR X0, [X0 + 0xD8]
	0x01CE441C BL 0x1B6E804
	0x01CE4420 MOV X1, X0
	0x01CE4424 MOV X0, X19
	0x01CE4428 BL 0x1B6E8E8
	0x01CE442C STP X30, X19, [X31 - 0x10]!
	0x01CE4430 LDR X8, [X0 + 0x50]
	0x01CE4434 CBZ X8, 0x1CE4444
	0x01CE4438 STR S0, [X8 + 0x14]
	0x01CE443C LDP X30, X19, [X31], #0x10
	0x01CE4440 RET
	0x01CE4444 ADRP X0, 0x2269000
	0x01CE4448 LDR X0, [X0 + 0x490]
	0x01CE444C BL 0x1B6E804
	0x01CE4450 BL 0x1B6EA0C
	0x01CE4454 MOV X19, X0
	0x01CE4458 ADRP X0, 0x226C000
	0x01CE445C LDR X0, [X0 + 0xD0]
	0x01CE4460 BL 0x1B6E804
	0x01CE4464 MOV X1, X0
	0x01CE4468 MOV X0, X19
	0x01CE446C MOV X2, X31
	0x01CE4470 BL 0x31E7550
	0x01CE4474 ADRP X0, 0x226C000
	0x01CE4478 LDR X0, [X0 + 0xE0]
	0x01CE447C BL 0x1B6E804
	0x01CE4480 MOV X1, X0
	0x01CE4484 MOV X0, X19
	0x01CE4488 BL 0x1B6E8E8
	0x01CE448C STP X30, X19, [X31 - 0x10]!
	0x01CE4490 LDR X8, [X0 + 0x50]
	0x01CE4494 CBZ X8, 0x1CE44A4
	0x01CE4498 LDR V0, [X8 + 0x18]
	0x01CE449C LDP X30, X19, [X31], #0x10
	0x01CE44A0 RET
	0x01CE44A4 ADRP X0, 0x2269000
	0x01CE44A8 LDR X0, [X0 + 0x490]
	0x01CE44AC BL 0x1B6E804
	0x01CE44B0 BL 0x1B6EA0C
	0x01CE44B4 MOV X19, X0
	0x01CE44B8 ADRP X0, 0x226C000
	0x01CE44BC LDR X0, [X0 + 0xE8]
	0x01CE44C0 BL 0x1B6E804
	0x01CE44C4 MOV X1, X0
	0x01CE44C8 MOV X0, X19
	0x01CE44CC MOV X2, X31
	0x01CE44D0 BL 0x31E7550
	0x01CE44D4 ADRP X0, 0x226C000
	0x01CE44D8 LDR X0, [X0 + 0xF0]
	0x01CE44DC BL 0x1B6E804
	0x01CE44E0 MOV X1, X0
	0x01CE44E4 MOV X0, X19
	0x01CE44E8 BL 0x1B6E8E8
	0x01CE44EC STP X30, X19, [X31 - 0x10]!
	0x01CE44F0 LDR X8, [X0 + 0x50]
	0x01CE44F4 CBZ X8, 0x1CE4504
	0x01CE44F8 STR S0, [X8 + 0x18]
	0x01CE44FC LDP X30, X19, [X31], #0x10
	0x01CE4500 RET
	0x01CE4504 ADRP X0, 0x2269000
	0x01CE4508 LDR X0, [X0 + 0x490]
	0x01CE450C BL 0x1B6E804
	0x01CE4510 BL 0x1B6EA0C
	0x01CE4514 MOV X19, X0
	0x01CE4518 ADRP X0, 0x226C000
	0x01CE451C LDR X0, [X0 + 0xE8]
	0x01CE4520 BL 0x1B6E804
	0x01CE4524 MOV X1, X0
	0x01CE4528 MOV X0, X19
	0x01CE452C MOV X2, X31
	0x01CE4530 BL 0x31E7550
	0x01CE4534 ADRP X0, 0x226C000
	0x01CE4538 LDR X0, [X0 + 0xF8]
	0x01CE453C BL 0x1B6E804
	0x01CE4540 MOV X1, X0
	0x01CE4544 MOV X0, X19
	0x01CE4548 BL 0x1B6E8E8
	0x01CE454C STP X30, X19, [X31 - 0x10]!
	0x01CE4550 LDR X8, [X0 + 0x50]
	0x01CE4554 CBZ X8, 0x1CE4564
	0x01CE4558 LDR V0, [X8 + 0x1C]
	0x01CE455C LDP X30, X19, [X31], #0x10
	0x01CE4560 RET
	0x01CE4564 ADRP X0, 0x2269000
	0x01CE4568 LDR X0, [X0 + 0x490]
	0x01CE456C BL 0x1B6E804
	0x01CE4570 BL 0x1B6EA0C
	0x01CE4574 MOV X19, X0
	0x01CE4578 ADRP X0, 0x226C000
	0x01CE457C LDR X0, [X0 + 0x100]
	0x01CE4580 BL 0x1B6E804
	0x01CE4584 MOV X1, X0
	0x01CE4588 MOV X0, X19
	0x01CE458C MOV X2, X31
	0x01CE4590 BL 0x31E7550
	0x01CE4594 ADRP X0, 0x226C000
	0x01CE4598 LDR X0, [X0 + 0x108]
	0x01CE459C BL 0x1B6E804
	0x01CE45A0 MOV X1, X0
	0x01CE45A4 MOV X0, X19
	0x01CE45A8 BL 0x1B6E8E8
	0x01CE45AC STP X30, X19, [X31 - 0x10]!
	0x01CE45B0 LDR X8, [X0 + 0x50]
	0x01CE45B4 CBZ X8, 0x1CE45C4
	0x01CE45B8 STR S0, [X8 + 0x1C]
	0x01CE45BC LDP X30, X19, [X31], #0x10
	0x01CE45C0 RET
	0x01CE45C4 ADRP X0, 0x2269000
	0x01CE45C8 LDR X0, [X0 + 0x490]
	0x01CE45CC BL 0x1B6E804
	0x01CE45D0 BL 0x1B6EA0C
	0x01CE45D4 MOV X19, X0
	0x01CE45D8 ADRP X0, 0x226C000
	0x01CE45DC LDR X0, [X0 + 0x100]
	0x01CE45E0 BL 0x1B6E804
	0x01CE45E4 MOV X1, X0
	0x01CE45E8 MOV X0, X19
	0x01CE45EC MOV X2, X31
	0x01CE45F0 BL 0x31E7550
	0x01CE45F4 ADRP X0, 0x226C000
	0x01CE45F8 LDR X0, [X0 + 0x110]
	0x01CE45FC BL 0x1B6E804
	0x01CE4600 MOV X1, X0
	0x01CE4604 MOV X0, X19
	0x01CE4608 BL 0x1B6E8E8
	0x01CE460C STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Subtract X31, X31, 336
	002 Move [X31+176], D15
	003 Move [X31+184], D14
	004 Move [X31+192], D13
	005 Move [X31+200], D12
	006 Move [X31+208], D11
	007 Move [X31+216], D10
	008 Move [X31+224], D9
	009 Move [X31+232], D8
	010 Move [X31+240], X29
	011 Move [X31+248], X30
	012 Move [X31+256], X28
	013 Move [X31+264], X27
	014 Move [X31+272], X26
	015 Move [X31+280], X25
	016 Move [X31+288], X24
	017 Move [X31+296], X23
	018 Move [X31+304], X22
	019 Move [X31+312], X21
	020 Move [X31+320], X20
	021 Move [X31+328], X19
	022 Move X20, 0x2541000
	023 Move W8, [X20+1614]
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {52}
	029 Move X0, 0x226C000
	030 Move X0, [X0+984]
	031 Call 0x1B6F7F0
	032 Move X0, 0x226D000
	033 Move X0, [X0+4088]
	034 Call 0x1B6F7F0
	035 Move X0, 0x226E000
	036 Move X0, [X0]
	037 Call 0x1B6F7F0
	038 Move X0, 0x226E000
	039 Move X0, [X0+32]
	040 Call 0x1B6F7F0
	041 Move X0, 0x226B000
	042 Move X0, [X0+1144]
	043 Call 0x1B6F7F0
	044 Move X0, 0x226B000
	045 Move X0, [X0+1216]
	046 Call 0x1B6F7F0
	047 Move X0, 0x226E000
	048 Move X0, [X0+40]
	049 Call 0x1B6F7F0
	050 Move W8, 1
	051 Move [X20+1614], W8
	052 NotImplemented "Instruction MOVI not yet implemented."
	053 Move [X31+168], W31
	054 Move [X31+80], X31
	055 Move [X31+88], X31
	056 Move [X31+140], V0
	057 Move [X31+112], V0
	058 Move [X31+120], V0
	059 Move [X31+96], X31
	060 Move X0, [X19+64]
	061 Compare X0, 0
	062 JumpIfEqual {1054}
	063 Move W8, [X0+96]
	064 Move TEMP, X8
	065 And TEMP, TEMP, 2
	066 Compare TEMP, 2
	067 JumpIfEqual {1054}
	068 Move X1, X31
	069 Call NetworkObject.get_HasStateAuthority, X0
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {1054}
	074 Move X0, X19
	075 Call CystController.get_isDie, X0
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {108}
	080 Move X0, X19
	081 Call CystController.get_respawnTimer, X0
	082 Move [X31+168], W0
	083 Move X1, [X19+56]
	084 Add X0, X31, 168
	085 Move X2, X31
	086 Call TickTimer.Expired, X0, X1
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfNotEqual {1054}
	091 Move W1, 100
	092 Move X0, X19
	093 Call CystController.set_health, X0, X1
	094 Move X0, [X19+128]
	095 Compare X0, 0
	096 JumpIfEqual {1076}
	097 Move W1, 1
	098 Move X2, X31
	099 Call GameObject.SetActive, X0, X1
	100 Move X0, X19
	101 Move W1, W31
	102 Call CystController.set_isDie, X0, X1
	103 Move X0, X31
	104 Call TickTimer.get_None
	105 And X1, X0, 0
	106 Move X0, X19
	107 Call CystController.set_respawnTimer, X0, X1
	108 Move X0, X19
	109 Call CystController.get_target, X0
	110 Move X8, 0x226B000
	111 Move X8, [X8+1144]
	112 Move X20, X0
	113 Move X8, [X8]
	114 Move W9, [X8+224]
	115 Compare W9, 0
	116 JumpIfNotEqual {119}
	117 Move X0, X8
	118 Call 0x1B6F8F8
	119 Move X0, X20
	120 Move X1, X31
	121 Move X2, X31
	122 Call Object.op_Equality, X0, X1
	123 Move X20, 0x226B000
	124 Move X21, 0x226B000
	125 Move X20, [X20+1152]
	126 Move X21, [X21+1160]
	127 Move X24, 0x2541000
	128 Move X25, 0x2541000
	129 Move TEMP, X0
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfNotEqual {249}
	133 Move X22, [X19+144]
	134 Compare X22, 0
	135 JumpIfEqual {1076}
	136 Move X0, X22
	137 Move X1, X31
	138 Call Transform.get_localPosition, X0
	139 Move W8, [X24+1087]
	140 Move V8, V0
	141 Move V9, V1
	142 Move V10, V2
	143 Compare W8, 0
	144 JumpIfNotEqual {150}
	145 Move X0, 0x226B000
	146 Move X0, [X0+1152]
	147 Call 0x1B6F7F0
	148 Move W8, 1
	149 Move [X24+1087], W8
	150 Move X0, [X19+56]
	151 Compare X0, 0
	152 JumpIfEqual {1076}
	153 Move X8, [X20]
	154 Move X1, X31
	155 Move X8, [X8+184]
	156 Move S12, [X8+4]
	157 Move S11, [X8+8]
	158 Move V13, [X8]
	159 Call NetworkRunner.get_DeltaTime, X0
	160 Move S1, 1
	161 NotImplemented "Instruction FCMP not yet implemented."
	162 Move S2, W31
	163 NotImplemented "Instruction FMIN not yet implemented."
	164 Subtract S3, S13, S8
	165 Subtract S4, S12, S9
	166 Subtract S5, S11, S10
	167 NotImplemented "Instruction FCSEL not yet implemented."
	168 Multiply S1, S3, S0
	169 Multiply S2, S4, S0
	170 Multiply S3, S5, S0
	171 Add S0, S8, S1
	172 Add S1, S9, S2
	173 Add S2, S10, S3
	174 Move X0, X22
	175 Move X1, X31
	176 Call Transform.set_localPosition, X0, X1
	177 Move X22, [X19+136]
	178 Compare X22, 0
	179 JumpIfEqual {1076}
	180 Move X0, X22
	181 Move X1, X31
	182 Call Transform.get_rotation, X0
	183 Move X8, -19107840
	184 Move V8, V0
	185 Move V0, [X8+2964]
	186 Move V9, V1
	187 Move V10, V2
	188 Move S1, W31
	189 Move S2, W31
	190 Move X0, X31
	191 Move V11, V3
	192 Call Quaternion.Internal_FromEulerRad, X0
	193 Move X0, [X19+56]
	194 Compare X0, 0
	195 JumpIfEqual {1076}
	196 Move X1, X31
	197 Move V12, V0
	198 Move V13, V1
	199 Move V14, V2
	200 Move V15, V3
	201 Call NetworkRunner.get_DeltaTime, X0
	202 Move [X31], S0
	203 Move V0, V8
	204 Move V1, V9
	205 Move V2, V10
	206 Move V3, V11
	207 Move V4, V12
	208 Move V5, V13
	209 Move V6, V14
	210 Move V7, V15
	211 Move X0, X31
	212 Call Quaternion.Lerp, X0, X1, V0
	213 Move X0, X22
	214 Move X1, X31
	215 Call Transform.set_rotation, X0, X1
	216 Move X22, [X19+152]
	217 Compare X22, 0
	218 JumpIfEqual {1076}
	219 Move X0, X22
	220 Move X1, X31
	221 Call Transform.get_localScale, X0
	222 Move X0, [X19+56]
	223 Compare X0, 0
	224 JumpIfEqual {1076}
	225 Move X1, X31
	226 Move V8, V0
	227 Move V9, V1
	228 Move V10, V2
	229 Call NetworkRunner.get_DeltaTime, X0
	230 Move S1, 12
	231 Move S2, 1
	232 Multiply S0, S0, S1
	233 Move S3, W31
	234 NotImplemented "Instruction FCMP not yet implemented."
	235 NotImplemented "Instruction FMIN not yet implemented."
	236 Subtract S1, S2, S8
	237 Subtract S2, S2, S9
	238 NotImplemented "Instruction FCSEL not yet implemented."
	239 Subtract S3, S3, S10
	240 Multiply S1, S1, S0
	241 Multiply S2, S2, S0
	242 Multiply S3, S3, S0
	243 Add S0, S8, S1
	244 Add S1, S9, S2
	245 Add S2, S10, S3
	246 Move X0, X22
	247 Move X1, X31
	248 Call Transform.set_localScale, X0, X1
	249 Move X0, X19
	250 Call CystController.get_attackTimer, X0
	251 Move X0, [X19+56]
	252 Compare X0, 0
	253 JumpIfEqual {1076}
	254 Move X1, X31
	255 Move V8, V0
	256 Call NetworkRunner.get_DeltaTime, X0
	257 Add S0, S8, S0
	258 Move X0, X19
	259 Call CystController.set_attackTimer, X0, V0
	260 Move X0, X19
	261 Call CystController.get_attackTimer, X0
	262 Move S1, 2
	263 NotImplemented "Instruction FCMP not yet implemented."
	264 Move X22, [X19+144]
	265 Compare X22, 0
	266 JumpIfEqual {1076}
	267 Move X0, X22
	268 Move X1, X31
	269 Call Transform.get_localPosition, X0
	270 Move X0, [X19+56]
	271 Compare X0, 0
	272 JumpIfEqual {1076}
	273 Move X1, X31
	274 Move V8, V0
	275 Move V9, V1
	276 Move V10, V2
	277 Call NetworkRunner.get_DeltaTime, X0
	278 Add S0, S0, S0
	279 Move S1, 1
	280 Move S2, W31
	281 Move S3, 0.5
	282 NotImplemented "Instruction FMIN not yet implemented."
	283 NotImplemented "Instruction FCMP not yet implemented."
	284 Subtract S0, S2, S8
	285 NotImplemented "Instruction FCSEL not yet implemented."
	286 Subtract S2, S2, S9
	287 Subtract S3, S3, S10
	288 Multiply S0, S0, S1
	289 Multiply S2, S2, S1
	290 Multiply S3, S3, S1
	291 Add S0, S8, S0
	292 Add S1, S9, S2
	293 Add S2, S10, S3
	294 Move X0, X22
	295 Move X1, X31
	296 Call Transform.set_localPosition, X0, X1
	297 Move X0, X19
	298 Call CystController.get_target, X0
	299 Compare X0, 0
	300 JumpIfEqual {1076}
	301 Move X1, X31
	302 Call Component.get_transform, X0
	303 Compare X0, 0
	304 JumpIfEqual {1076}
	305 Move X1, X31
	306 Call Transform.get_position, X0
	307 Move X0, X19
	308 Move X1, X31
	309 Move V8, V0
	310 Move V9, V1
	311 Move V10, V2
	312 Call Component.get_transform, X0
	313 Compare X0, 0
	314 JumpIfEqual {1076}
	315 Move X1, X31
	316 Call Transform.get_position, X0
	317 Subtract S0, S8, S0
	318 Subtract S1, S9, S1
	319 Subtract S2, S10, S2
	320 Move X0, X31
	321 Call Quaternion.LookRotation, X0
	322 Move X22, [X19+136]
	323 Compare X22, 0
	324 JumpIfEqual {1076}
	325 Move X0, X22
	326 Move X1, X31
	327 Move [X31+28], S3
	328 Move V11, V2
	329 Move V10, V1
	330 Move V9, V0
	331 Call Transform.get_rotation, X0
	332 Move X0, [X19+56]
	333 Compare X0, 0
	334 JumpIfEqual {1076}
	335 Move X1, X31
	336 Move V12, V0
	337 Move V13, V1
	338 Move V14, V2
	339 Move V15, V3
	340 Call NetworkRunner.get_DeltaTime, X0
	341 Move X0, X19
	342 Move V8, V0
	343 Call CystController.get_attackTimer, X0
	344 Move S1, 4
	345 Move V7, [X31+28]
	346 Multiply S1, S8, S1
	347 Multiply S0, S1, S0
	348 Move [X31], S0
	349 Move V0, V12
	350 Move V1, V13
	351 Move V2, V14
	352 Move V3, V15
	353 Move V4, V9
	354 Move V5, V10
	355 Move V6, V11
	356 Move X0, X31
	357 Call Quaternion.Lerp, X0, X1, V0
	358 Move X0, X22
	359 Move X1, X31
	360 Call Transform.set_rotation, X0, X1
	361 Move X0, X19
	362 Call CystController.get_attacked, X0
	363 Move TEMP, X0
	364 And TEMP, TEMP, 1
	365 Compare TEMP, 1
	366 JumpIfEqual {735}
	367 Move W1, 1
	368 Move X0, X19
	369 Call CystController.set_attacked, X0, X1
	370 Move X0, X19
	371 Move X1, X31
	372 Call Component.get_transform, X0
	373 Compare X0, 0
	374 JumpIfEqual {1076}
	375 Move X1, X31
	376 Call Transform.get_position, X0
	377 Move X0, X19
	378 Move V8, V0
	379 Move V9, V1
	380 Move V10, V2
	381 Call CystController.get_target, X0
	382 Compare X0, 0
	383 JumpIfEqual {1076}
	384 Move X1, X31
	385 Call Component.get_transform, X0
	386 Compare X0, 0
	387 JumpIfEqual {1076}
	388 Move X1, X31
	389 Move [X31+28], S8
	390 Call Transform.get_position, X0
	391 Move X0, X19
	392 Move X1, X31
	393 Move V11, V0
	394 Move V12, V1
	395 Move V13, V2
	396 Call Component.get_transform, X0
	397 Compare X0, 0
	398 JumpIfEqual {1076}
	399 Move X1, X31
	400 Call Transform.get_position, X0
	401 Move X23, 0x2541000
	402 Move W8, [X23+1089]
	403 Move V14, V0
	404 Move V15, V1
	405 Move V8, V2
	406 Compare W8, 0
	407 JumpIfNotEqual {413}
	408 Move X0, 0x226B000
	409 Move X0, [X0+1160]
	410 Call 0x1B6F7F0
	411 Move W8, 1
	412 Move [X23+1089], W8
	413 Move X0, [X21]
	414 Subtract S14, S11, S14
	415 Subtract S11, S12, S15
	416 Subtract S12, S13, S8
	417 Move W8, [X0+224]
	418 Compare W8, 0
	419 JumpIfNotEqual {421}
	420 Call 0x1B6F8F8
	421 Move X8, -19107840
	422 Multiply S0, S14, S14
	423 Multiply S1, S11, S11
	424 Move V15, [X8+2916]
	425 Add S0, S0, S1
	426 Multiply S1, S12, S12
	427 Add S0, S1, S0
	428 NotImplemented "Instruction FSQRT not yet implemented."
	429 NotImplemented "Instruction FCMP not yet implemented."
	430 NotImplemented "Instruction FDIV not yet implemented."
	431 NotImplemented "Instruction FDIV not yet implemented."
	432 NotImplemented "Instruction FDIV not yet implemented."
	433 Move W8, [X24+1087]
	434 Compare W8, 0
	435 JumpIfNotEqual {441}
	436 Move X0, 0x226B000
	437 Move X0, [X0+1152]
	438 Call 0x1B6F7F0
	439 Move W8, 1
	440 Move [X24+1087], W8
	441 Move X8, [X20]
	442 Move X8, [X8+184]
	443 Move S8, [X8]
	444 Move S11, [X8+4]
	445 Move V12, [X8+8]
	446 Move X22, 0x226C000
	447 Move X22, [X22+984]
	448 Move X0, [X22]
	449 Move W8, [X0+224]
	450 Compare W8, 0
	451 JumpIfNotEqual {454}
	452 Call 0x1B6F8F8
	453 Move X0, [X22]
	454 Move X8, [X0+184]
	455 Move X1, X31
	456 Move W0, [X8]
	457 Call LayerMask.op_Implicit, X0
	458 Move X8, 0x226B000
	459 Move X8, [X8+1216]
	460 Move W22, W0
	461 Move X8, [X8]
	462 Move W9, [X8+224]
	463 Compare W9, 0
	464 JumpIfNotEqual {467}
	465 Move X0, X8
	466 Call 0x1B6F8F8
	467 Move V0, [X31+28]
	468 Add X0, X31, 56
	469 Add X1, X31, 112
	470 Move W3, 1
	471 Move [X31+56], S0
	472 Move [X31+64], S9
	473 Move S0, 15
	474 Move W2, W22
	475 Move X4, X31
	476 Move [X31+64], S10
	477 Move [X31+72], S8
	478 Move [X31+72], S11
	479 Move [X31+80], S12
	480 Call Physics.Raycast, X0, X1, V0, X2, X3
	481 Move W22, W0
	482 Move X0, X19
	483 Call CystController.get_target, X0
	484 Compare X0, 0
	485 JumpIfEqual {1076}
	486 Move X1, X31
	487 Call Component.get_transform, X0
	488 Compare X0, 0
	489 JumpIfEqual {1076}
	490 Move X1, X31
	491 Call Transform.get_position, X0
	492 Move X0, X19
	493 Move X1, X31
	494 Move V10, V0
	495 Move V11, V1
	496 Move V12, V2
	497 Call Component.get_transform, X0
	498 Compare X0, 0
	499 JumpIfEqual {1076}
	500 Move X1, X31
	501 Call Transform.get_position, X0
	502 Move X26, 0x2541000
	503 Move W8, [X26+1286]
	504 Move V13, V0
	505 Move V8, V1
	506 Move V9, V2
	507 Compare W8, 0
	508 JumpIfNotEqual {514}
	509 Move X0, 0x226B000
	510 Move X0, [X0+1160]
	511 Call 0x1B6F7F0
	512 Move W8, 1
	513 Move [X26+1286], W8
	514 Move X0, [X21]
	515 Move W8, [X0+224]
	516 Compare W8, 0
	517 JumpIfNotEqual {519}
	518 Call 0x1B6F8F8
	519 Move [X31+24], S9
	520 Move [X31+32], S8
	521 Move TEMP, X22
	522 And TEMP, TEMP, 1
	523 Compare TEMP, 1
	524 JumpIfNotEqual {545}
	525 Add X0, X31, 112
	526 Move X1, X31
	527 Move V9, V15
	528 Call RaycastHit.get_point, X0
	529 Move X0, X19
	530 Move X1, X31
	531 Move V8, V0
	532 Move V14, V1
	533 Move V15, V2
	534 Call Component.get_transform, X0
	535 Compare X0, 0
	536 JumpIfEqual {1076}
	537 Move X1, X31
	538 Call Transform.get_position, X0
	539 Move S5, [X31+24]
	540 Move S4, [X31+28]
	541 Subtract S0, S8, S0
	542 Subtract S1, S14, S1
	543 Subtract S2, S15, S2
	544 Move V15, V9
	545 Move X0, X19
	546 Call CystController.get_target, X0
	547 Compare X0, 0
	548 JumpIfEqual {1076}
	549 Move X1, X31
	550 Move [X31+12], S13
	551 Move [X31+20], S12
	552 Move [X31+20], S15
	553 Call Component.get_transform, X0
	554 Compare X0, 0
	555 JumpIfEqual {1076}
	556 Move X1, X31
	557 Move V12, V11
	558 Move V13, V10
	559 Call Transform.get_position, X0
	560 Move X0, X19
	561 Move X1, X31
	562 Move V14, V0
	563 Move V15, V1
	564 Move V8, V2
	565 Call Component.get_transform, X0
	566 Compare X0, 0
	567 JumpIfEqual {1076}
	568 Move X1, X31
	569 Call Transform.get_position, X0
	570 Move W8, [X23+1089]
	571 Move V9, V0
	572 Move V10, V1
	573 Move V11, V2
	574 Compare W8, 0
	575 JumpIfNotEqual {581}
	576 Move X0, 0x226B000
	577 Move X0, [X0+1160]
	578 Call 0x1B6F7F0
	579 Move W8, 1
	580 Move [X23+1089], W8
	581 Move X0, [X21]
	582 Subtract S14, S14, S9
	583 Subtract S9, S15, S10
	584 Subtract S8, S8, S11
	585 Move W8, [X0+224]
	586 Compare W8, 0
	587 JumpIfNotEqual {589}
	588 Call 0x1B6F8F8
	589 Multiply S0, S14, S14
	590 Multiply S1, S9, S9
	591 Move V15, [X31+20]
	592 Add S0, S0, S1
	593 Multiply S1, S8, S8
	594 Add S0, S1, S0
	595 NotImplemented "Instruction FSQRT not yet implemented."
	596 NotImplemented "Instruction FCMP not yet implemented."
	597 Move V10, V13
	598 Move V11, V12
	599 Move S13, [X31+12]
	600 Move S12, [X31+16]
	601 NotImplemented "Instruction FDIV not yet implemented."
	602 NotImplemented "Instruction FDIV not yet implemented."
	603 NotImplemented "Instruction FDIV not yet implemented."
	604 Move W8, [X24+1087]
	605 Move S13, [X31+12]
	606 Move S12, [X31+16]
	607 Compare W8, 0
	608 JumpIfNotEqual {614}
	609 Move X0, 0x226B000
	610 Move X0, [X0+1152]
	611 Call 0x1B6F7F0
	612 Move W8, 1
	613 Move [X24+1087], W8
	614 Move X8, [X20]
	615 Move X8, [X8+184]
	616 Move S0, [X8]
	617 Move S1, [X8+4]
	618 Move V2, [X8+8]
	619 Move S5, [X31+24]
	620 Move S4, [X31+28]
	621 Move S3, 15
	622 Multiply S0, S0, S3
	623 Multiply S1, S1, S3
	624 Multiply S2, S2, S3
	625 Subtract S3, S10, S13
	626 Subtract S4, S11, S4
	627 Subtract S5, S12, S5
	628 Multiply S3, S3, S3
	629 Multiply S4, S4, S4
	630 Add S3, S3, S4
	631 Multiply S4, S5, S5
	632 Add S3, S4, S3
	633 Move X0, X19
	634 NotImplemented "Instruction FSQRT not yet implemented."
	635 Call CystController.set_attackVector, X0, X1
	636 Move S0, 15
	637 Move TEMP, X22
	638 And TEMP, TEMP, 1
	639 Compare TEMP, 1
	640 JumpIfNotEqual {644}
	641 Add X0, X31, 112
	642 Move X1, X31
	643 Call RaycastHit.get_distance, X0
	644 NotImplemented "Instruction FCMP not yet implemented."
	645 Move X0, X19
	646 Call CystController.get_target, X0
	647 Move X22, X0
	648 Move X0, X19
	649 Call CystController.get_target, X0
	650 Compare X0, 0
	651 JumpIfEqual {1076}
	652 Move X1, X31
	653 Call Component.get_transform, X0
	654 Compare X0, 0
	655 JumpIfEqual {1076}
	656 Move X1, X31
	657 Call Transform.get_position, X0
	658 Move X0, X19
	659 Move V8, V0
	660 Move V9, V1
	661 Move V10, V2
	662 Call CystController.get_attackVector, X0
	663 Move W8, [X23+1089]
	664 Move V11, V0
	665 Move V12, V1
	666 Move V13, V2
	667 Compare W8, 0
	668 JumpIfNotEqual {674}
	669 Move X0, 0x226A000
	670 Move X0, [X0+1160]
	671 Call 0x1B6F7F0
	672 Move W8, 1
	673 Move [X23+1089], W8
	674 Move X0, [X21]
	675 Move W8, [X0+224]
	676 Compare W8, 0
	677 JumpIfNotEqual {679}
	678 Call 0x1B6F8F8
	679 Multiply S0, S11, S11
	680 Multiply S1, S12, S12
	681 Add S0, S0, S1
	682 Multiply S1, S13, S13
	683 Add S0, S1, S0
	684 NotImplemented "Instruction FSQRT not yet implemented."
	685 NotImplemented "Instruction FCMP not yet implemented."
	686 NotImplemented "Instruction FDIV not yet implemented."
	687 NotImplemented "Instruction FDIV not yet implemented."
	688 NotImplemented "Instruction FDIV not yet implemented."
	689 Move W8, [X24+1087]
	690 Compare W8, 0
	691 JumpIfNotEqual {697}
	692 Move X0, 0x226A000
	693 Move X0, [X0+1152]
	694 Call 0x1B6F7F0
	695 Move W8, 1
	696 Move [X24+1087], W8
	697 Move X8, [X20]
	698 Move X8, [X8+184]
	699 Move S0, [X8]
	700 Move S1, [X8+4]
	701 Move V2, [X8+8]
	702 Compare X22, 0
	703 JumpIfEqual {1076}
	704 Move X8, 0x226D000
	705 Move X8, [X8+40]
	706 Move S3, 10
	707 Multiply S5, S2, S3
	708 Multiply S4, S1, S3
	709 Move X4, [X8]
	710 Multiply S3, S0, S3
	711 Move W1, 500
	712 Move X0, X22
	713 Move V0, V8
	714 Move V1, V9
	715 Move V2, V10
	716 Move X2, X31
	717 Move X3, X31
	718 Move X5, X31
	719 Call NetPlayer.Hit, X0, X1, X2, X3, X4, X5, X6
	720 Move X22, [X19+200]
	721 Move X0, X19
	722 Move X1, X31
	723 Call Component.get_transform, X0
	724 Compare X0, 0
	725 JumpIfEqual {1076}
	726 Move X1, X31
	727 Call Transform.get_position, X0
	728 Compare X22, 0
	729 JumpIfEqual {1076}
	730 Move S3, 1
	731 Move W1, 1
	732 Move X0, X22
	733 Move X2, X31
	734 Call RandomSFX.Play, X0, X1, V0, X2
	735 Move X0, X19
	736 Call CystController.get_attackVector, X0
	737 Move X0, X31
	738 Call Quaternion.LookRotation, X0
	739 Move X0, [X19+136]
	740 Compare X0, 0
	741 JumpIfEqual {1076}
	742 Move X1, X31
	743 Move V8, V0
	744 Move V9, V1
	745 Move V10, V2
	746 Move V11, V3
	747 Call Transform.set_rotation, X0, X1
	748 Move X0, [X19+152]
	749 Compare X0, 0
	750 JumpIfEqual {1076}
	751 Move V0, V8
	752 Move V1, V9
	753 Move V2, V10
	754 Move V3, V11
	755 Move X1, X31
	756 Call Transform.set_rotation, X0, X1
	757 Move X22, [X19+152]
	758 Compare X22, 0
	759 JumpIfEqual {1076}
	760 Move X0, X22
	761 Move X1, X31
	762 Call Transform.get_localScale, X0
	763 Move X0, X19
	764 Move V8, V0
	765 Move V9, V1
	766 Move V10, V2
	767 Call CystController.get_attackVector, X0
	768 Move W8, [X25+1088]
	769 Move V11, V0
	770 Move V12, V1
	771 Move V13, V2
	772 Compare W8, 0
	773 JumpIfNotEqual {779}
	774 Move X0, 0x226A000
	775 Move X0, [X0+1160]
	776 Call 0x1B6F7F0
	777 Move W8, 1
	778 Move [X25+1088], W8
	779 Move X0, [X21]
	780 Move W8, [X0+224]
	781 Compare W8, 0
	782 JumpIfNotEqual {784}
	783 Call 0x1B6F8F8
	784 Move X0, [X19+56]
	785 Compare X0, 0
	786 JumpIfEqual {1076}
	787 Multiply S0, S11, S11
	788 Multiply S1, S12, S12
	789 Add S0, S0, S1
	790 Multiply S1, S13, S13
	791 Add S0, S1, S0
	792 Move X1, X31
	793 NotImplemented "Instruction FSQRT not yet implemented."
	794 Call NetworkRunner.get_DeltaTime, X0
	795 Move S1, 12
	796 Move S2, 1
	797 Multiply S0, S0, S1
	798 Move S1, W31
	799 NotImplemented "Instruction FCMP not yet implemented."
	800 NotImplemented "Instruction FMIN not yet implemented."
	801 Subtract S3, S11, S10
	802 NotImplemented "Instruction FCSEL not yet implemented."
	803 Subtract S1, S2, S8
	804 Subtract S2, S2, S9
	805 Multiply S1, S1, S0
	806 Multiply S2, S2, S0
	807 Multiply S3, S3, S0
	808 Add S0, S8, S1
	809 Add S1, S9, S2
	810 Add S2, S10, S3
	811 Move X0, X22
	812 Move X1, X31
	813 Call Transform.set_localScale, X0, X1
	814 Move X0, X19
	815 Call CystController.get_attackTimer, X0
	816 Move S1, 3
	817 NotImplemented "Instruction FCMP not yet implemented."
	818 Move X0, X19
	819 Move X1, X31
	820 Call CystController.set_target, X0, X1
	821 Move X0, X19
	822 Move W1, W31
	823 Call CystController.set_attacked, X0, X1
	824 Move S0, W31
	825 Move X0, X19
	826 Call CystController.set_attackTimer, X0, V0
	827 Move X22, [X19+192]
	828 Move X0, X19
	829 Move X1, X31
	830 Call Component.get_transform, X0
	831 Compare X0, 0
	832 JumpIfEqual {1076}
	833 Move X1, X31
	834 Call Transform.get_position, X0
	835 Compare X22, 0
	836 JumpIfEqual {1076}
	837 Move S3, 1
	838 Move W1, 1
	839 Move X0, X22
	840 Move X2, X31
	841 Call RandomSFX.Play, X0, X1, V0, X2
	842 Move X0, [X19+216]
	843 Compare X0, 0
	844 JumpIfEqual {1076}
	845 Move X9, -19111936
	846 Move X26, 0x226D000
	847 Move X27, 0x226D000
	848 Move X8, -19111936
	849 Move V0, [X9+2736]
	850 Move X26, [X26]
	851 Move X27, [X27+32]
	852 Move V15, [X8+2356]
	853 Move W22, W31
	854 Move W28, 1
	855 Move [X31+28], S0
	856 Move W8, [X0+24]
	857 NotImplemented "Instruction CMP not yet implemented."
	858 Move X2, [X26]
	859 Move W1, W22
	860 Call List`1<Object>.get_Item, X0, X1
	861 Compare X0, 0
	862 JumpIfEqual {1076}
	863 Move X1, X31
	864 Call Component.get_transform, X0
	865 Move X23, X0
	866 Add X8, X31, 32
	867 Move X0, X19
	868 Call CystController.get_tetherAttachmentPoints, X0
	869 Move V0, [X31+2]
	870 Move X8, [X31+48]
	871 Move X2, [X27]
	872 Add X0, X31, 80
	873 Move W1, W22
	874 Move [X31+5], V0
	875 Move [X31+96], X8
	876 Call NetworkArray`1<Vector3>.Get, X0, X1
	877 Move W8, [X24+1087]
	878 Move V8, V0
	879 Move V9, V1
	880 Move V10, V2
	881 Compare W8, 0
	882 JumpIfNotEqual {886}
	883 Move X0, X20
	884 Call 0x1B6F7F0
	885 Move [X24+1087], W28
	886 Compare X23, 0
	887 JumpIfEqual {1076}
	888 Move X8, [X20]
	889 Move X0, X23
	890 Move X1, X31
	891 Move X8, [X8+184]
	892 Move S0, [X8]
	893 Move S1, [X8+4]
	894 Move V2, [X8+8]
	895 Subtract S0, S8, S0
	896 Subtract S1, S9, S1
	897 Subtract S2, S10, S2
	898 Multiply S0, S0, S0
	899 Multiply S1, S1, S1
	900 Multiply S2, S2, S2
	901 Add S0, S0, S1
	902 Add S13, S2, S0
	903 Call Transform.get_localScale, X0
	904 Move V11, V0
	905 Move V12, V1
	906 NotImplemented "Instruction FCMP not yet implemented."
	907 Move V13, V2
	908 Move X0, [X19+56]
	909 Compare X0, 0
	910 JumpIfEqual {1076}
	911 Move X1, X31
	912 Call NetworkRunner.get_DeltaTime, X0
	913 Move S1, 8
	914 Multiply S0, S0, S1
	915 Move S4, 1
	916 Move S2, 3
	917 Move S5, W31
	918 NotImplemented "Instruction FMIN not yet implemented."
	919 NotImplemented "Instruction FCMP not yet implemented."
	920 Subtract S1, S2, S11
	921 Subtract S2, S2, S12
	922 Subtract S3, S5, S13
	923 NotImplemented "Instruction FCSEL not yet implemented."
	924 Multiply S1, S1, S0
	925 Multiply S2, S2, S0
	926 Multiply S3, S3, S0
	927 Add S0, S11, S1
	928 Add S1, S12, S2
	929 Add S2, S13, S3
	930 Move X0, X23
	931 Move X1, X31
	932 Call Transform.set_localScale, X0, X1
	933 Move W8, [X25+1088]
	934 Compare W8, 0
	935 JumpIfNotEqual {939}
	936 Move X0, X21
	937 Call 0x1B6F7F0
	938 Move [X25+1088], W28
	939 Move X0, [X21]
	940 Move W8, [X0+224]
	941 Compare W8, 0
	942 JumpIfNotEqual {944}
	943 Call 0x1B6F8F8
	944 Move X0, [X19+56]
	945 Compare X0, 0
	946 JumpIfEqual {1076}
	947 Multiply S0, S8, S8
	948 Multiply S1, S9, S9
	949 Add S0, S0, S1
	950 Multiply S1, S10, S10
	951 Add S0, S1, S0
	952 Move V1, [X31+28]
	953 NotImplemented "Instruction FSQRT not yet implemented."
	954 Move X1, X31
	955 Add S14, S0, S1
	956 Call NetworkRunner.get_DeltaTime, X0
	957 Move S1, 9
	958 Multiply S0, S0, S1
	959 Move S4, 1
	960 Move S2, 3
	961 NotImplemented "Instruction FMIN not yet implemented."
	962 NotImplemented "Instruction FCMP not yet implemented."
	963 Move S0, W31
	964 Subtract S1, S2, S11
	965 Subtract S2, S2, S12
	966 Subtract S3, S14, S13
	967 NotImplemented "Instruction FCSEL not yet implemented."
	968 Multiply S1, S1, S0
	969 Multiply S2, S2, S0
	970 Multiply S3, S3, S0
	971 Add S0, S11, S1
	972 Add S1, S12, S2
	973 Add S2, S13, S3
	974 Move X0, X23
	975 Move X1, X31
	976 Call Transform.set_localScale, X0, X1
	977 Move V0, V8
	978 Move V1, V9
	979 Move V2, V10
	980 Move X0, X31
	981 Call Quaternion.LookRotation, X0
	982 Move X0, X23
	983 Move X1, X31
	984 Call Transform.set_localRotation, X0, X1
	985 Move X0, [X19+216]
	986 Add W22, W22, 1
	987 Compare X0, 0
	988 JumpIfNotEqual {856}
	989 Move X0, [X19+56]
	990 Compare X0, 0
	991 JumpIfEqual {1076}
	992 Move V8, [X19+272]
	993 Move X1, X31
	994 Call NetworkRunner.get_DeltaTime, X0
	995 Subtract S0, S8, S0
	996 NotImplemented "Instruction FCMP not yet implemented."
	997 Move [X19+272], S0
	998 Move X8, [X19+216]
	999 Move W9, 0x40000000
	1000 Move [X19+272], W9
	1001 Compare X8, 0
	1002 JumpIfEqual {1076}
	1003 Move W21, W31
	1004 Move W22, 1
	1005 Move W8, [X8+24]
	1006 NotImplemented "Instruction CMP not yet implemented."
	1007 Add X8, X31, 32
	1008 Move X0, X19
	1009 Call CystController.get_tetherAttachmentPoints, X0
	1010 Move V0, [X31+2]
	1011 Move X8, [X31+48]
	1012 Move X2, [X27]
	1013 Add X0, X31, 80
	1014 Move W1, W21
	1015 Move [X31+5], V0
	1016 Move [X31+96], X8
	1017 Call NetworkArray`1<Vector3>.Get, X0, X1
	1018 Move W8, [X24+1087]
	1019 Move V8, V0
	1020 Move V9, V1
	1021 Move V10, V2
	1022 Compare W8, 0
	1023 JumpIfNotEqual {1027}
	1024 Move X0, X20
	1025 Call 0x1B6F7F0
	1026 Move [X24+1087], W22
	1027 Move X8, [X20]
	1028 Move X8, [X8+184]
	1029 Move S0, [X8]
	1030 Move S1, [X8+4]
	1031 Move V2, [X8+8]
	1032 Subtract S0, S8, S0
	1033 Subtract S1, S9, S1
	1034 Subtract S2, S10, S2
	1035 Multiply S0, S0, S0
	1036 Multiply S1, S1, S1
	1037 Add S0, S0, S1
	1038 Multiply S1, S2, S2
	1039 Add S0, S1, S0
	1040 NotImplemented "Instruction FCMP not yet implemented."
	1041 Move X8, [X19+216]
	1042 Add W21, W21, 1
	1043 Compare X8, 0
	1044 JumpIfNotEqual {1005}
	1045 Move X0, [X19+216]
	1046 Compare X0, 0
	1047 JumpIfEqual {1076}
	1048 Move X2, [X26]
	1049 Move W1, W21
	1050 Call List`1<Object>.get_Item, X0, X1
	1051 Move X1, X0
	1052 Move X0, X19
	1053 Call CystController.AttachTether, X0, X1
	1054 Move X20, [X31+320]
	1055 Move X19, [X31+328]
	1056 Move X22, [X31+304]
	1057 Move X21, [X31+312]
	1058 Move X24, [X31+288]
	1059 Move X23, [X31+296]
	1060 Move X26, [X31+272]
	1061 Move X25, [X31+280]
	1062 Move X28, [X31+256]
	1063 Move X27, [X31+264]
	1064 Move X29, [X31+240]
	1065 Move X30, [X31+248]
	1066 Move D9, [X31+224]
	1067 Move D8, [X31+232]
	1068 Move D11, [X31+208]
	1069 Move D10, [X31+216]
	1070 Move D13, [X31+192]
	1071 Move D12, [X31+200]
	1072 Move D15, [X31+176]
	1073 Move D14, [X31+184]
	1074 Add X31, X31, 336
	1075 Return 
	1076 Call 0x1B6FA1C

Method: System.Void Hit(System.Int32 damage, UnityEngine.Vector3 position, AnimalCompany.RandomSFX hitSound, AnimalCompany.RandomSFX killSound, UnityEngine.Vector3 force, System.String hitName)

Disassembly:
	0x01CE4610 LDR X8, [X0 + 0x50]
	0x01CE4614 CBZ X8, 0x1CE4624
	0x01CE4618 LDR W0, [X8 + 0x20]
	0x01CE461C LDP X30, X19, [X31], #0x10
	0x01CE4620 RET
	0x01CE4624 ADRP X0, 0x2269000
	0x01CE4628 LDR X0, [X0 + 0x490]
	0x01CE462C BL 0x1B6E804
	0x01CE4630 BL 0x1B6EA0C
	0x01CE4634 MOV X19, X0
	0x01CE4638 ADRP X0, 0x226C000
	0x01CE463C LDR X0, [X0 + 0x118]
	0x01CE4640 BL 0x1B6E804
	0x01CE4644 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X20, X0
	006 Call CystController.get_isDie, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {15}
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Return 
	015 Move X0, X20
	016 Move W1, W19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]

Method: System.Void RPC_Hit(System.Int32 damage)

Disassembly:
	0x01CE4648 MOV X0, X19
	0x01CE464C MOV X2, X31
	0x01CE4650 BL 0x31E7550
	0x01CE4654 ADRP X0, 0x226C000
	0x01CE4658 LDR X0, [X0 + 0x120]
	0x01CE465C BL 0x1B6E804
	0x01CE4660 MOV X1, X0
	0x01CE4664 MOV X0, X19
	0x01CE4668 BL 0x1B6E8E8
	0x01CE466C STP X30, X19, [X31 - 0x10]!
	0x01CE4670 LDR X8, [X0 + 0x50]
	0x01CE4674 CBZ X8, 0x1CE4684
	0x01CE4678 STR W1, [X8 + 0x20]
	0x01CE467C LDP X30, X19, [X31], #0x10
	0x01CE4680 RET
	0x01CE4684 ADRP X0, 0x2269000
	0x01CE4688 LDR X0, [X0 + 0x490]
	0x01CE468C BL 0x1B6E804
	0x01CE4690 BL 0x1B6EA0C
	0x01CE4694 MOV X19, X0
	0x01CE4698 ADRP X0, 0x226C000
	0x01CE469C LDR X0, [X0 + 0x118]
	0x01CE46A0 BL 0x1B6E804
	0x01CE46A4 MOV X1, X0
	0x01CE46A8 MOV X0, X19
	0x01CE46AC MOV X2, X31
	0x01CE46B0 BL 0x31E7550
	0x01CE46B4 ADRP X0, 0x226C000
	0x01CE46B8 LDR X0, [X0 + 0x128]
	0x01CE46BC BL 0x1B6E804
	0x01CE46C0 MOV X1, X0
	0x01CE46C4 MOV X0, X19
	0x01CE46C8 BL 0x1B6E8E8
	0x01CE46CC STP X30, X19, [X31 - 0x10]!
	0x01CE46D0 LDR X8, [X0 + 0x50]
	0x01CE46D4 CBZ X8, 0x1CE46E4
	0x01CE46D8 LDR V0, [X8 + 0x24]
	0x01CE46DC LDP X30, X19, [X31], #0x10
	0x01CE46E0 RET
	0x01CE46E4 ADRP X0, 0x2269000
	0x01CE46E8 LDR X0, [X0 + 0x490]
	0x01CE46EC BL 0x1B6E804
	0x01CE46F0 BL 0x1B6EA0C
	0x01CE46F4 MOV X19, X0
	0x01CE46F8 ADRP X0, 0x226C000
	0x01CE46FC LDR X0, [X0 + 0x130]
	0x01CE4700 BL 0x1B6E804
	0x01CE4704 MOV X1, X0
	0x01CE4708 MOV X0, X19
	0x01CE470C MOV X2, X31
	0x01CE4710 BL 0x31E7550
	0x01CE4714 ADRP X0, 0x226C000
	0x01CE4718 LDR X0, [X0 + 0x138]
	0x01CE471C BL 0x1B6E804
	0x01CE4720 MOV X1, X0
	0x01CE4724 MOV X0, X19
	0x01CE4728 BL 0x1B6E8E8
	0x01CE472C STP X30, X19, [X31 - 0x10]!
	0x01CE4730 LDR X8, [X0 + 0x50]
	0x01CE4734 CBZ X8, 0x1CE4744
	0x01CE4738 STR S0, [X8 + 0x24]
	0x01CE473C LDP X30, X19, [X31], #0x10
	0x01CE4740 RET
	0x01CE4744 ADRP X0, 0x2269000
	0x01CE4748 LDR X0, [X0 + 0x490]
	0x01CE474C BL 0x1B6E804
	0x01CE4750 BL 0x1B6EA0C
	0x01CE4754 MOV X19, X0
	0x01CE4758 ADRP X0, 0x226C000
	0x01CE475C LDR X0, [X0 + 0x130]
	0x01CE4760 BL 0x1B6E804
	0x01CE4764 MOV X1, X0
	0x01CE4768 MOV X0, X19
	0x01CE476C MOV X2, X31
	0x01CE4770 BL 0x31E7550
	0x01CE4774 ADRP X0, 0x226C000
	0x01CE4778 LDR X0, [X0 + 0x140]
	0x01CE477C BL 0x1B6E804
	0x01CE4780 MOV X1, X0
	0x01CE4784 MOV X0, X19
	0x01CE4788 BL 0x1B6E8E8
	0x01CE478C STP X30, X19, [X31 - 0x10]!
	0x01CE4790 LDR X8, [X0 + 0x50]
	0x01CE4794 CBZ X8, 0x1CE47A4
	0x01CE4798 LDR V0, [X8 + 0x28]
	0x01CE479C LDP X30, X19, [X31], #0x10
	0x01CE47A0 RET
	0x01CE47A4 ADRP X0, 0x2269000
	0x01CE47A8 LDR X0, [X0 + 0x490]
	0x01CE47AC BL 0x1B6E804
	0x01CE47B0 BL 0x1B6EA0C
	0x01CE47B4 MOV X19, X0
	0x01CE47B8 ADRP X0, 0x226C000
	0x01CE47BC LDR X0, [X0 + 0x148]
	0x01CE47C0 BL 0x1B6E804
	0x01CE47C4 MOV X1, X0
	0x01CE47C8 MOV X0, X19
	0x01CE47CC MOV X2, X31
	0x01CE47D0 BL 0x31E7550
	0x01CE47D4 ADRP X0, 0x226C000
	0x01CE47D8 LDR X0, [X0 + 0x150]
	0x01CE47DC BL 0x1B6E804
	0x01CE47E0 MOV X1, X0
	0x01CE47E4 MOV X0, X19
	0x01CE47E8 BL 0x1B6E8E8
	0x01CE47EC STP X30, X19, [X31 - 0x10]!
	0x01CE47F0 LDR X8, [X0 + 0x50]
	0x01CE47F4 CBZ X8, 0x1CE4804
	0x01CE47F8 STR S0, [X8 + 0x28]
	0x01CE47FC LDP X30, X19, [X31], #0x10
	0x01CE4800 RET
	0x01CE4804 ADRP X0, 0x2269000
	0x01CE4808 LDR X0, [X0 + 0x490]
	0x01CE480C BL 0x1B6E804

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2540000
	006 Move W8, [X21+1615]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x226B000
	014 Move X0, [X0+448]
	015 Call 0x1B6F7F0
	016 Move X0, 0x226D000
	017 Move X0, [X0+48]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X21+1615], W8
	021 Move W8, [X19+88]
	022 Compare W8, 0
	023 JumpIfEqual {44}
	024 Move [X19+88], W31
	025 Move X0, X19
	026 Call CystController.get_isDie, X0
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {60}
	031 Move X0, X19
	032 Call CystController.get_health, X0
	033 Subtract W1, W0, W20
	034 Move X0, X19
	035 Call CystController.set_health, X0, X1
	036 Move X0, X19
	037 Call CystController.get_health, X0
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X0, X19
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Move X21, 0x226B000
	045 Move X21, [X21+448]
	046 Move X0, [X21]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1B6F8F8
	051 Move X0, X19
	052 Move X1, X31
	053 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	054 Move X0, [X19+56]
	055 Compare X0, 0
	056 JumpIfEqual {145}
	057 Move X1, X31
	058 Call NetworkRunner.get_Stage, X0
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Return 
	065 Move X0, [X19+64]
	066 Compare X0, 0
	067 JumpIfEqual {145}
	068 Move X1, X31
	069 Call NetworkObject.GetLocalAuthorityMask, X0
	070 And W31, W0, 7
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {25}
	075 Move X8, [X19+56]
	076 Compare X8, 0
	077 JumpIfEqual {145}
	078 Move X0, [X8+80]
	079 Compare X0, 0
	080 JumpIfEqual {145}
	081 Move X1, X31
	082 Call Simulation.HasAnyActiveConnections, X0
	083 Move TEMP, X0
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfNotEqual {60}
	087 Move X8, [X19+56]
	088 Compare X8, 0
	089 JumpIfEqual {145}
	090 Move X0, [X8+80]
	091 Move W1, 12
	092 Move X2, X31
	093 Call SimulationMessage.Allocate, X0, X1
	094 Move X21, X0
	095 Move W0, 1
	096 Move X1, X31
	097 Call Assert.Check, X0
	098 Move X8, [X19+64]
	099 Compare X8, 0
	100 JumpIfEqual {145}
	101 Move X8, [X8+32]
	102 Compare X8, 0
	103 JumpIfEqual {123}
	104 Move W0, [X8]
	105 Move X0, [X21]
	106 Move X19, [X19+64]
	107 Move W8, [X0+224]
	108 Compare W8, 0
	109 JumpIfNotEqual {111}
	110 Call 0x1B6F8F8
	111 Move X8, 0x226D000
	112 Move X8, [X8+48]
	113 Move X1, X19
	114 Move X20, [X31+16]
	115 Move X19, [X31+24]
	116 Move W2, 7
	117 Move X0, [X8]
	118 Move X3, X31
	119 Move X30, [X31+32]
	120 Move X21, [X31+40]
	121 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	122 Return 
	123 Move X0, X31
	124 Move W1, [X19+104]
	125 Move W2, 2
	126 Move X3, X31
	127 Call RpcHeader.Create, X0, X1, X2
	128 Move [X21+28], X0
	129 Move [X21+36], W20
	130 Compare X21, 0
	131 JumpIfEqual {145}
	132 Move W8, 96
	133 Move [X21+12], W8
	134 Move X0, [X19+56]
	135 Compare X0, 0
	136 JumpIfEqual {145}
	137 Move X20, [X31+16]
	138 Move X19, [X31+24]
	139 Move X1, X21
	140 Move X2, X31
	141 Move X30, [X31+32]
	142 Move X21, [X31+40]
	143 Call NetworkRunner.SendRpc, X0, X1
	144 Return 
	145 Call 0x1B6FA1C

Method: System.Void Die()

Disassembly:
	0x01CE4810 BL 0x1B6EA0C
	0x01CE4814 MOV X19, X0
	0x01CE4818 ADRP X0, 0x226C000
	0x01CE481C LDR X0, [X0 + 0x148]
	0x01CE4820 BL 0x1B6E804
	0x01CE4824 MOV X1, X0
	0x01CE4828 MOV X0, X19
	0x01CE482C MOV X2, X31
	0x01CE4830 BL 0x31E7550
	0x01CE4834 ADRP X0, 0x226C000
	0x01CE4838 LDR X0, [X0 + 0x158]
	0x01CE483C BL 0x1B6E804
	0x01CE4840 MOV X1, X0
	0x01CE4844 MOV X0, X19
	0x01CE4848 BL 0x1B6E8E8
	0x01CE484C STP X30, X19, [X31 - 0x10]!
	0x01CE4850 LDR X8, [X0 + 0x50]
	0x01CE4854 CBZ X8, 0x1CE4864
	0x01CE4858 LDR V0, [X8 + 0x2C]
	0x01CE485C LDP X30, X19, [X31], #0x10
	0x01CE4860 RET
	0x01CE4864 ADRP X0, 0x2269000
	0x01CE4868 LDR X0, [X0 + 0x490]
	0x01CE486C BL 0x1B6E804
	0x01CE4870 BL 0x1B6EA0C
	0x01CE4874 MOV X19, X0
	0x01CE4878 ADRP X0, 0x226C000
	0x01CE487C LDR X0, [X0 + 0x160]
	0x01CE4880 BL 0x1B6E804
	0x01CE4884 MOV X1, X0
	0x01CE4888 MOV X0, X19
	0x01CE488C MOV X2, X31
	0x01CE4890 BL 0x31E7550
	0x01CE4894 ADRP X0, 0x226C000
	0x01CE4898 LDR X0, [X0 + 0x168]
	0x01CE489C BL 0x1B6E804
	0x01CE48A0 MOV X1, X0
	0x01CE48A4 MOV X0, X19
	0x01CE48A8 BL 0x1B6E8E8
	0x01CE48AC STP X30, X19, [X31 - 0x10]!
	0x01CE48B0 LDR X8, [X0 + 0x50]
	0x01CE48B4 CBZ X8, 0x1CE48C4
	0x01CE48B8 STR S0, [X8 + 0x2C]
	0x01CE48BC LDP X30, X19, [X31], #0x10
	0x01CE48C0 RET
	0x01CE48C4 ADRP X0, 0x2269000
	0x01CE48C8 LDR X0, [X0 + 0x490]
	0x01CE48CC BL 0x1B6E804
	0x01CE48D0 BL 0x1B6EA0C
	0x01CE48D4 MOV X19, X0
	0x01CE48D8 ADRP X0, 0x226C000
	0x01CE48DC LDR X0, [X0 + 0x160]
	0x01CE48E0 BL 0x1B6E804
	0x01CE48E4 MOV X1, X0
	0x01CE48E8 MOV X0, X19
	0x01CE48EC MOV X2, X31
	0x01CE48F0 BL 0x31E7550
	0x01CE48F4 ADRP X0, 0x226C000
	0x01CE48F8 LDR X0, [X0 + 0x170]
	0x01CE48FC BL 0x1B6E804
	0x01CE4900 MOV X1, X0
	0x01CE4904 MOV X0, X19
	0x01CE4908 BL 0x1B6E8E8
	0x01CE490C LDR X0, [X0 + 0xB8]
	0x01CE4910 RET
	0x01CE4914 LDR X0, [X0 + 0xC0]
	0x01CE4918 RET
	0x01CE491C LDR X0, [X0 + 0xD0]
	0x01CE4920 RET
	0x01CE4924 LDR X0, [X0 + 0xD8]
	0x01CE4928 RET
	0x01CE492C STR X30, [X31 - 0x10]!
	0x01CE4930 LDR X8, [X0 + 0xB8]
	0x01CE4934 CBZ X8, 0x1CE4960
	0x01CE4938 LDR X8, [X8 + 0x78]
	0x01CE493C CBZ X8, 0x1CE4960
	0x01CE4940 LDRSW X9, [X0 + 0xE0]
	0x01CE4944 LDR W10, [X8 + 0x18]
	0x01CE4948 CMP W9, W10
	0x01CE494C B.CS 0x1CE4964

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Call CystController.get_isDie, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {20}
	013 Move X20, [X31+32]
	014 Move X19, [X31+40]
	015 Move X30, [X31+24]
	016 Move D9, [X31+8]
	017 Move D8, [X31+16]
	018 Move V10, [X31+48]
	019 Return 
	020 Move W1, 1
	021 Move X0, X19
	022 Call CystController.set_isDie, X0, X1
	023 Move X20, [X19+208]
	024 Compare X20, 0
	025 JumpIfEqual {38}
	026 Move X0, X19
	027 Move X1, X31
	028 Call Component.get_transform, X0
	029 Compare X0, 0
	030 JumpIfEqual {96}
	031 Move X1, X31
	032 Call Transform.get_position, X0
	033 Move S3, 1
	034 Move W1, 1
	035 Move X0, X20
	036 Move X2, X31
	037 Call RandomSFX.Play, X0, X1, V0, X2
	038 Move X0, X19
	039 Move X1, X31
	040 Call Component.get_transform, X0
	041 Compare X0, 0
	042 JumpIfEqual {96}
	043 Move X1, X31
	044 Call Transform.get_position, X0
	045 Move X20, 0x2540000
	046 Move W8, [X20+1108]
	047 Move V8, V0
	048 Move V9, V1
	049 Move V10, V2
	050 Compare W8, 0
	051 JumpIfNotEqual {57}
	052 Move X0, 0x226B000
	053 Move X0, [X0+504]
	054 Call 0x1B6F7F0
	055 Move W8, 1
	056 Move [X20+1108], W8
	057 Move X8, 0x226B000
	058 Move X8, [X8+504]
	059 Move W0, 128
	060 Move V0, V8
	061 Move V1, V9
	062 Move X8, [X8]
	063 Move V2, V10
	064 Move X1, X31
	065 Move X8, [X8+184]
	066 Move S3, [X8]
	067 Move S4, [X8+4]
	068 Move S5, [X8+8]
	069 Move S6, [X8+12]
	070 Call NetworkVFX.PlayVFX, X0, X1, X2
	071 Move X0, [X19+56]
	072 Move S0, 20
	073 Move X1, X31
	074 Call TickTimer.CreateFromSeconds, X0, V0
	075 And X1, X0, 0
	076 Move X0, X19
	077 Call CystController.set_respawnTimer, X0, X1
	078 Move S0, W31
	079 Move X0, X19
	080 Call CystController.set_attackTimer, X0, V0
	081 Move X0, X19
	082 Move X1, X31
	083 Call CystController.set_target, X0, X1
	084 Move X0, X19
	085 Move W1, W31
	086 Call CystController.set_attacked, X0, X1
	087 Move X0, X19
	088 Move X20, [X31+32]
	089 Move X19, [X31+40]
	090 Move X30, [X31+24]
	091 Move D9, [X31+8]
	092 Move D8, [X31+16]
	093 Move V10, [X31+48]
	094 Call CystController.ResetAllTethers, X0
	095 Return 
	096 Call 0x1B6FA1C

Method: System.Void HandleIsDieChanged()

Disassembly:
	0x01CE4950 ADD X8, X8, X9, 0x2, LSL
	0x01CE4954 LDR V0, [X8 + 0x20]
	0x01CE4958 LDR X30, [X31], #0x10
	0x01CE495C RET
	0x01CE4960 BL 0x1B6EA1C
	0x01CE4964 BL 0x1B6EA24
	0x01CE4968 SUB X31, X31, 0x90
	0x01CE496C STP X30, X23, [X31 + 0x60]
	0x01CE4970 STP X22, X21, [X31 + 0x70]
	0x01CE4974 STP X20, X19, [X31 + 0x80]
	0x01CE4978 ADRP X21, 0x253F000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+128]
	004 Call CystController.get_isDie, X0
	005 Compare X19, 0
	006 JumpIfEqual {15}
	007 NotImplemented "Instruction ORN not yet implemented."
	008 And W1, W8, 1
	009 Move X0, X19
	010 Move X2, X31
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call GameObject.SetActive, X0, X1
	014 Return 
	015 Call 0x1B6FA1C

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x01CE497C LDRB W9, [X21 + 0x656]
	0x01CE4980 MOV X20, X0
	0x01CE4984 MOV X19, X8
	0x01CE4988 TBNZ X9, 0x0, 0x1CE4A00
	0x01CE498C ADRP X0, 0x226C000
	0x01CE4990 LDR X0, [X0 + 0x178]
	0x01CE4994 BL 0x1B6E7F0
	0x01CE4998 ADRP X0, 0x2269000
	0x01CE499C LDR X0, [X0 + 0x5F8]
	0x01CE49A0 BL 0x1B6E7F0
	0x01CE49A4 ADRP X0, 0x2269000
	0x01CE49A8 LDR X0, [X0 + 0x628]
	0x01CE49AC BL 0x1B6E7F0
	0x01CE49B0 ADRP X0, 0x226C000
	0x01CE49B4 LDR X0, [X0 + 0x180]
	0x01CE49B8 BL 0x1B6E7F0
	0x01CE49BC ADRP X0, 0x226C000
	0x01CE49C0 LDR X0, [X0 + 0x188]
	0x01CE49C4 BL 0x1B6E7F0
	0x01CE49C8 ADRP X0, 0x226C000
	0x01CE49CC LDR X0, [X0 + 0x190]
	0x01CE49D0 BL 0x1B6E7F0
	0x01CE49D4 ADRP X0, 0x226C000
	0x01CE49D8 LDR X0, [X0 + 0x198]
	0x01CE49DC BL 0x1B6E7F0
	0x01CE49E0 ADRP X0, 0x226C000
	0x01CE49E4 LDR X0, [X0 + 0x1A0]
	0x01CE49E8 BL 0x1B6E7F0
	0x01CE49EC ADRP X0, 0x226C000
	0x01CE49F0 LDR X0, [X0 + 0x1A8]
	0x01CE49F4 BL 0x1B6E7F0
	0x01CE49F8 MOVZ W8, 0x1
	0x01CE49FC STRB W8, [X21 + 0x656]
	0x01CE4A00 STP X31, X31, [X31 + 0x28]
	0x01CE4A04 STR X31, [X31 + 0x38]
	0x01CE4A08 MOV X21, X20
	0x01CE4A0C ADRP X23, 0x226C000
	0x01CE4A10 LDRB W8, [X21 + 0xE8]!
	0x01CE4A14 LDR X23, [X23 + 0x190]
	0x01CE4A18 CBNZ W8, 0x1CE4B0C
	0x01CE4A1C ADRP X8, 0x226C000
	0x01CE4A20 LDR X8, [X8 + 0x178]
	0x01CE4A24 LDR W22, [X20 + 0xE4]
	0x01CE4A28 LDR X0, [X8]
	0x01CE4A2C LDR W8, [X0 + 0xE0]
	0x01CE4A30 CBNZ W8, 0x1CE4A38
	0x01CE4A34 BL 0x1B6E8F8
	0x01CE4A38 ADD X1, X31, 0x28
	0x01CE4A3C MOV W0, W22
	0x01CE4A40 MOV X2, X31
	0x01CE4A44 BL 0x1D02BB0
	0x01CE4A48 TBZ X0, 0x0, 0x1CE4A88
	0x01CE4A4C ADRP X8, 0x226C000
	0x01CE4A50 LDR X8, [X8 + 0x180]
	0x01CE4A54 LDUR V1, [X31 + 0x28]
	0x01CE4A58 LDR X9, [X31 + 0x38]
	0x01CE4A5C MOVI V0.2D, 0x0
	0x01CE4A60 LDR X2, [X8]
	0x01CE4A64 ADD X0, X31, 0x0
	0x01CE4A68 ADD X1, X31, 0x40
	0x01CE4A6C STP V0, V0, [X31]
	0x01CE4A70 STR V1, [X31 + 0x4]
	0x01CE4A74 STR X9, [X31 + 0x50]
	0x01CE4A78 BL 0x22D5344
	0x01CE4A7C LDP V1, V0, [X31]
	0x01CE4A80 STP V1, V0, [X21]
	0x01CE4A84 B 0x1CE4B0C
	0x01CE4A88 ADRP X9, 0x2269000
	0x01CE4A8C LDR W8, [X20 + 0xE4]
	0x01CE4A90 LDR X9, [X9 + 0x5F8]
	0x01CE4A94 ADD X1, X31, 0x0
	0x01CE4A98 STR W8, [X31]
	0x01CE4A9C LDR X0, [X9]
	0x01CE4AA0 BL 0x1B6E900
	0x01CE4AA4 ADRP X8, 0x226C000
	0x01CE4AA8 LDR X8, [X8 + 0x1A8]
	0x01CE4AAC MOV X1, X0
	0x01CE4AB0 MOV X2, X31
	0x01CE4AB4 LDR X8, [X8]
	0x01CE4AB8 MOV X0, X8
	0x01CE4ABC BL 0x3087E18
	0x01CE4AC0 ADRP X8, 0x2269000
	0x01CE4AC4 LDR X8, [X8 + 0x628]
	0x01CE4AC8 MOV X22, X0
	0x01CE4ACC LDR X8, [X8]
	0x01CE4AD0 LDR W9, [X8 + 0xE0]
	0x01CE4AD4 CBNZ W9, 0x1CE4AE0
	0x01CE4AD8 MOV X0, X8
	0x01CE4ADC BL 0x1B6E8F8
	0x01CE4AE0 ADRP X8, 0x226C000
	0x01CE4AE4 ADRP X9, 0x226C000
	0x01CE4AE8 LDR X8, [X8 + 0x198]
	0x01CE4AEC LDR X9, [X9 + 0x1A0]
	0x01CE4AF0 MOVZ W4, 0x4A
	0x01CE4AF4 MOV X0, X22
	0x01CE4AF8 LDR X2, [X8]
	0x01CE4AFC LDR X3, [X9]
	0x01CE4B00 MOV X1, X31
	0x01CE4B04 MOV X5, X31
	0x01CE4B08 BL 0x342B554
	0x01CE4B0C LDR X1, [X23]
	0x01CE4B10 ADD X8, X31, 0x40
	0x01CE4B14 MOV X0, X21
	0x01CE4B18 BL 0x22D5368
	0x01CE4B1C LDR X8, [X31 + 0x50]
	0x01CE4B20 LDR V0, [X31 + 0x4]
	0x01CE4B24 ADD X9, X20, 0x108
	0x01CE4B28 MOV X0, X21
	0x01CE4B2C STR X8, [X31 + 0x10]
	0x01CE4B30 STR V0, [X31]
	0x01CE4B34 STR X8, [X9 + 0x10]
	0x01CE4B38 STR V0, [X9]
	0x01CE4B3C LDR X1, [X23]
	0x01CE4B40 ADD X8, X31, 0x40
	0x01CE4B44 BL 0x22D5368
	0x01CE4B48 LDR X8, [X31 + 0x50]
	0x01CE4B4C LDR V0, [X31 + 0x4]
	0x01CE4B50 LDP X22, X21, [X31 + 0x70]
	0x01CE4B54 LDP X30, X23, [X31 + 0x60]
	0x01CE4B58 STR X8, [X19 + 0x10]
	0x01CE4B5C STR V0, [X19]
	0x01CE4B60 LDP X20, X19, [X31 + 0x80]
	0x01CE4B64 ADD X31, X31, 0x90
	0x01CE4B68 RET
	0x01CE4B6C STR X30, [X31 - 0x20]!
	0x01CE4B70 STP X20, X19, [X31 + 0x10]
	0x01CE4B74 ADRP X20, 0x253F000
	0x01CE4B78 ADRP X19, 0x226A000
	0x01CE4B7C LDRB W8, [X20 + 0x657]
	0x01CE4B80 LDR X19, [X19 + 0x2A8]
	0x01CE4B84 TBNZ X8, 0x0, 0x1CE4B9C
	0x01CE4B88 ADRP X0, 0x226A000
	0x01CE4B8C LDR X0, [X0 + 0x2A8]
	0x01CE4B90 BL 0x1B6E7F0
	0x01CE4B94 MOVZ W8, 0x1
	0x01CE4B98 STRB W8, [X20 + 0x657]
	0x01CE4B9C LDR X0, [X19]
	0x01CE4BA0 LDR W8, [X0 + 0xE0]
	0x01CE4BA4 CBNZ W8, 0x1CE4BAC
	0x01CE4BA8 BL 0x1B6E8F8
	0x01CE4BAC ADRP X20, 0x253F000
	0x01CE4BB0 LDRB W8, [X20 + 0x50A]
	0x01CE4BB4 CBNZ W8, 0x1CE4BCC
	0x01CE4BB8 ADRP X0, 0x226A000
	0x01CE4BBC LDR X0, [X0 + 0x2A8]
	0x01CE4BC0 BL 0x1B6E7F0
	0x01CE4BC4 MOVZ W8, 0x1
	0x01CE4BC8 STRB W8, [X20 + 0x50A]
	0x01CE4BCC LDR X0, [X19]
	0x01CE4BD0 LDR W8, [X0 + 0xE0]
	0x01CE4BD4 CBNZ W8, 0x1CE4BE0
	0x01CE4BD8 BL 0x1B6E8F8

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+80], D14
	003 Move [X31+88], D13
	004 Move [X31+96], D12
	005 Move [X31+104], D11
	006 Move [X31+112], D10
	007 Move [X31+120], D9
	008 Move [X31+128], D8
	009 Move [X31+136], X30
	010 Move [X31+144], X28
	011 Move [X31+152], X27
	012 Move [X31+160], X26
	013 Move [X31+168], X25
	014 Move [X31+176], X24
	015 Move [X31+184], X23
	016 Move [X31+192], X22
	017 Move [X31+200], X21
	018 Move [X31+208], X20
	019 Move [X31+216], X19
	020 Move X20, 0x2540000
	021 Move W8, [X20+1616]
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {35}
	027 Move X0, 0x226B000
	028 Move X0, [X0+984]
	029 Call 0x1B6F7F0
	030 Move X0, 0x226A000
	031 Move X0, [X0+1216]
	032 Call 0x1B6F7F0
	033 Move W8, 1
	034 Move [X20+1616], W8
	035 Move X8, -19111936
	036 Move X9, -19111936
	037 Move X23, 0x226B000
	038 Move X24, 0x226A000
	039 Move V1, [X8+2452]
	040 Move V2, [X9+2600]
	041 Move X23, [X23+984]
	042 Move X24, [X24+1216]
	043 NotImplemented "Instruction MOVI not yet implemented."
	044 Move [X31+60], V0
	045 Move [X31+32], V0
	046 Move [X31+40], V0
	047 Move S0, 1
	048 Move S3, 1
	049 Move X0, X31
	050 Call Gizmos.set_color, X0
	051 Move X20, 0x226A000
	052 Move X8, -19111936
	053 Move X21, 0x226A000
	054 Move X20, [X20+1160]
	055 Move V14, [X8+2916]
	056 Move X21, [X21+1152]
	057 Move W25, 5
	058 Move X26, 0x2540000
	059 Move W27, 1
	060 Move X28, 0x2540000
	061 Move X0, X19
	062 Move X1, X31
	063 Call Component.get_transform, X0
	064 Compare X0, 0
	065 JumpIfEqual {183}
	066 Move X1, X31
	067 Call Transform.get_position, X0
	068 Move X0, X31
	069 Move V8, V0
	070 Move V9, V1
	071 Move V10, V2
	072 Call Random.get_onUnitSphere
	073 Move W8, [X26+1089]
	074 Move V11, V0
	075 Move V12, V1
	076 Move V13, V2
	077 Compare W8, 0
	078 JumpIfNotEqual {82}
	079 Move X0, X20
	080 Call 0x1B6F7F0
	081 Move [X26+1089], W27
	082 Move X0, [X20]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1B6F8F8
	087 Multiply S0, S11, S11
	088 Multiply S1, S12, S12
	089 Add S0, S0, S1
	090 Multiply S1, S13, S13
	091 Add S0, S1, S0
	092 NotImplemented "Instruction FSQRT not yet implemented."
	093 NotImplemented "Instruction FCMP not yet implemented."
	094 NotImplemented "Instruction FDIV not yet implemented."
	095 NotImplemented "Instruction FDIV not yet implemented."
	096 NotImplemented "Instruction FDIV not yet implemented."
	097 Move W8, [X28+1087]
	098 Compare W8, 0
	099 JumpIfNotEqual {103}
	100 Move X0, X21
	101 Call 0x1B6F7F0
	102 Move [X28+1087], W27
	103 Move X8, [X21]
	104 Move X8, [X8+184]
	105 Move S11, [X8]
	106 Move S12, [X8+4]
	107 Move V13, [X8+8]
	108 Move X0, [X23]
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {114}
	112 Call 0x1B6F8F8
	113 Move X0, [X23]
	114 Move X8, [X0+184]
	115 Move X1, X31
	116 Move W0, [X8]
	117 Call LayerMask.op_Implicit, X0
	118 Move X8, [X24]
	119 Move W22, W0
	120 Move W9, [X8+224]
	121 Compare W9, 0
	122 JumpIfNotEqual {125}
	123 Move X0, X8
	124 Call 0x1B6F8F8
	125 Add X0, X31, 8
	126 Add X1, X31, 32
	127 Move S0, 15
	128 Move W2, W22
	129 Move X3, X31
	130 Move [X31+8], S8
	131 Move [X31+16], S9
	132 Move [X31+16], S10
	133 Move [X31+24], S11
	134 Move [X31+24], S12
	135 Move [X31+32], S13
	136 Call Physics.Raycast, X0, X1, V0, X2
	137 Move TEMP, X0
	138 And TEMP, TEMP, 1
	139 Compare TEMP, 1
	140 JumpIfNotEqual {162}
	141 Move X0, X19
	142 Move X1, X31
	143 Call Component.get_transform, X0
	144 Compare X0, 0
	145 JumpIfEqual {183}
	146 Move X1, X31
	147 Call Transform.get_position, X0
	148 Add X0, X31, 32
	149 Move X1, X31
	150 Move V8, V0
	151 Move V9, V1
	152 Move V10, V2
	153 Call RaycastHit.get_point, X0
	154 Move V3, V0
	155 Move V4, V1
	156 Move V5, V2
	157 Move V0, V8
	158 Move V1, V9
	159 Move V2, V10
	160 Move X0, X31
	161 Call Gizmos.DrawLine, X0, X1
	162 Subtract W25, W25, 1
	163 Move X20, [X31+208]
	164 Move X19, [X31+216]
	165 Move X22, [X31+192]
	166 Move X21, [X31+200]
	167 Move X24, [X31+176]
	168 Move X23, [X31+184]
	169 Move X26, [X31+160]
	170 Move X25, [X31+168]
	171 Move X28, [X31+144]
	172 Move X27, [X31+152]
	173 Move X30, [X31+136]
	174 Move D9, [X31+120]
	175 Move D8, [X31+128]
	176 Move D11, [X31+104]
	177 Move D10, [X31+112]
	178 Move D13, [X31+88]
	179 Move D12, [X31+96]
	180 Move V14, [X31+80]
	181 Add X31, X31, 224
	182 Return 
	183 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CE4BDC LDR X0, [X19]
	0x01CE4BE0 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move X1, X31
	002 Call NetworkBehaviour..ctor, X0
	003 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01CE4BE4 LDP X20, X19, [X31 + 0x10]
	0x01CE4BE8 LDR X0, [X8]
	0x01CE4BEC LDR X30, [X31], #0x20
	0x01CE4BF0 RET
	0x01CE4BF4 LDR X0, [X0 + 0x140]
	0x01CE4BF8 RET
	0x01CE4BFC STP X30, X19, [X31 - 0x10]!
	0x01CE4C00 LDR X8, [X0 + 0x50]
	0x01CE4C04 CBZ X8, 0x1CE4C18
	0x01CE4C08 LDP S0, S1, [X8 + 0x30]
	0x01CE4C0C LDR V2, [X8 + 0x38]
	0x01CE4C10 LDP X30, X19, [X31], #0x10
	0x01CE4C14 RET
	0x01CE4C18 ADRP X0, 0x2269000
	0x01CE4C1C LDR X0, [X0 + 0x490]
	0x01CE4C20 BL 0x1B6E804
	0x01CE4C24 BL 0x1B6EA0C
	0x01CE4C28 MOV X19, X0
	0x01CE4C2C ADRP X0, 0x226C000
	0x01CE4C30 LDR X0, [X0 + 0x1B0]
	0x01CE4C34 BL 0x1B6E804
	0x01CE4C38 MOV X1, X0
	0x01CE4C3C MOV X0, X19
	0x01CE4C40 MOV X2, X31
	0x01CE4C44 BL 0x31E7550
	0x01CE4C48 ADRP X0, 0x226C000
	0x01CE4C4C LDR X0, [X0 + 0x1B8]
	0x01CE4C50 BL 0x1B6E804
	0x01CE4C54 MOV X1, X0
	0x01CE4C58 MOV X0, X19
	0x01CE4C5C BL 0x1B6E8E8
	0x01CE4C60 STP X30, X19, [X31 - 0x10]!
	0x01CE4C64 LDR X8, [X0 + 0x50]
	0x01CE4C68 CBZ X8, 0x1CE4C7C
	0x01CE4C6C STP S0, S1, [X8 + 0x30]
	0x01CE4C70 STR S2, [X8 + 0x38]
	0x01CE4C74 LDP X30, X19, [X31], #0x10
	0x01CE4C78 RET
	0x01CE4C7C ADRP X0, 0x2269000
	0x01CE4C80 LDR X0, [X0 + 0x490]
	0x01CE4C84 BL 0x1B6E804
	0x01CE4C88 BL 0x1B6EA0C
	0x01CE4C8C MOV X19, X0
	0x01CE4C90 ADRP X0, 0x226C000
	0x01CE4C94 LDR X0, [X0 + 0x1B0]
	0x01CE4C98 BL 0x1B6E804
	0x01CE4C9C MOV X1, X0
	0x01CE4CA0 MOV X0, X19
	0x01CE4CA4 MOV X2, X31
	0x01CE4CA8 BL 0x31E7550
	0x01CE4CAC ADRP X0, 0x226C000
	0x01CE4CB0 LDR X0, [X0 + 0x1C0]
	0x01CE4CB4 BL 0x1B6E804
	0x01CE4CB8 MOV X1, X0
	0x01CE4CBC MOV X0, X19
	0x01CE4CC0 BL 0x1B6E8E8
	0x01CE4CC4 STR X30, [X31 - 0x10]!
	0x01CE4CC8 LDR X0, [X0 + 0x38]
	0x01CE4CCC CBZ X0, 0x1CE4CDC
	0x01CE4CD0 MOV X1, X31
	0x01CE4CD4 LDR X30, [X31], #0x10
	0x01CE4CD8 B 0x1D87058
	0x01CE4CDC BL 0x1B6EA1C
	0x01CE4CE0 STP X30, X19, [X31 - 0x10]!
	0x01CE4CE4 MOV X19, X0
	0x01CE4CE8 LDR X0, [X0 + 0x40]
	0x01CE4CEC CBZ X0, 0x1CE4D14
	0x01CE4CF0 LDRB W8, [X0 + 0x60]
	0x01CE4CF4 TBNZ X8, 0x1, 0x1CE4D14
	0x01CE4CF8 MOV X1, X31
	0x01CE4CFC BL 0x1D9E780
	0x01CE4D00 TBZ X0, 0x0, 0x1CE4D14
	0x01CE4D04 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X21, 0x2540000
	008 Move X20, 0x226B000
	009 Move W8, [X21+1617]
	010 Move X20, [X20+448]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x226D000
	017 Move X0, [X0+56]
	018 Call 0x1B6F7F0
	019 Move X0, 0x226B000
	020 Move X0, [X0+448]
	021 Call 0x1B6F7F0
	022 Move X0, 0x226D000
	023 Move X0, [X0+64]
	024 Call 0x1B6F7F0
	025 Move W8, 1
	026 Move [X21+1617], W8
	027 Move X22, 0x226D000
	028 Move X21, 0x226D000
	029 Move X22, [X22+64]
	030 Move X21, [X21+56]
	031 Add X8, X31, 32
	032 Move X0, X19
	033 Call CystController.get_tetherAttachmentPoints, X0
	034 Move V0, [X31+2]
	035 Move X8, [X31+48]
	036 Move X0, [X20]
	037 Move [X31], V0
	038 Move [X31+16], X8
	039 Move W8, [X0+224]
	040 Move X20, [X19+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1B6F8F8
	044 Move X2, [X22]
	045 Move V0, [X31]
	046 Move X8, [X31+16]
	047 Move X3, [X21]
	048 Add X0, X31, 32
	049 Move X1, X20
	050 Move [X31+2], V0
	051 Move [X31+48], X8
	052 Call NetworkBehaviourUtils.InitializeNetworkArray, X0, X1, X2
	053 Move X1, [X19+232]
	054 Move X0, X19
	055 Call CystController.set_target, X0, X1
	056 Move W1, [X19+240]
	057 Move X0, X19
	058 Call CystController.set_attacked, X0, X1
	059 Move S0, [X19+244]
	060 Move S1, [X19+248]
	061 Move V2, [X19+252]
	062 Move X0, X19
	063 Call CystController.set_attackVector, X0, X1
	064 Move V0, [X19+256]
	065 Move X0, X19
	066 Call CystController.set_attackTimer, X0, V0
	067 Move W1, [X19+260]
	068 Move X0, X19
	069 Call CystController.set_health, X0, X1
	070 Move W1, [X19+264]
	071 Move X0, X19
	072 Call CystController.set_isDie, X0, X1
	073 Move W1, [X19+268]
	074 Move X0, X19
	075 Call CystController.set_respawnTimer, X0, X1
	076 Move X20, [X31+96]
	077 Move X19, [X31+104]
	078 Move X22, [X31+80]
	079 Move X21, [X31+88]
	080 Move X30, [X31+64]
	081 Add X31, X31, 112
	082 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01CE4D08 BL 0x1CE4000
	0x01CE4D0C EOR W8, W0, 0x1
	0x01CE4D10 B 0x1CE4D18
	0x01CE4D14 MOV W8, W31
	0x01CE4D18 AND W0, W8, 0x1
	0x01CE4D1C LDP X30, X19, [X31], #0x10
	0x01CE4D20 RET
	0x01CE4D24 STR X30, [X31 - 0x20]!
	0x01CE4D28 STP X20, X19, [X31 + 0x10]
	0x01CE4D2C ADRP X20, 0x253F000
	0x01CE4D30 ADRP X19, 0x226A000
	0x01CE4D34 LDRB W8, [X20 + 0x658]
	0x01CE4D38 LDR X19, [X19 + 0xD78]
	0x01CE4D3C TBNZ X8, 0x0, 0x1CE4D54
	0x01CE4D40 ADRP X0, 0x226A000
	0x01CE4D44 LDR X0, [X0 + 0xD78]
	0x01CE4D48 BL 0x1B6E7F0
	0x01CE4D4C MOVZ W8, 0x1
	0x01CE4D50 STRB W8, [X20 + 0x658]
	0x01CE4D54 LDR X0, [X19]
	0x01CE4D58 LDR W8, [X0 + 0xE0]
	0x01CE4D5C CBNZ W8, 0x1CE4D68
	0x01CE4D60 BL 0x1B6E8F8
	0x01CE4D64 LDR X0, [X19]
	0x01CE4D68 LDR X8, [X0 + 0xB8]
	0x01CE4D6C LDP X20, X19, [X31 + 0x10]
	0x01CE4D70 LDR X0, [X8 + 0x8]
	0x01CE4D74 LDR X30, [X31], #0x20
	0x01CE4D78 RET
	0x01CE4D7C STR W1, [X0 + 0xE4]
	0x01CE4D80 RET
	0x01CE4D84 SUB X31, X31, 0x30
	0x01CE4D88 STP X30, X21, [X31 + 0x10]
	0x01CE4D8C STP X20, X19, [X31 + 0x20]
	0x01CE4D90 ADRP X21, 0x253F000
	0x01CE4D94 LDRB W8, [X21 + 0x659]
	0x01CE4D98 MOV X19, X1
	0x01CE4D9C MOV X20, X0
	0x01CE4DA0 TBNZ X8, 0x0, 0x1CE4E00
	0x01CE4DA4 ADRP X0, 0x2269000
	0x01CE4DA8 LDR X0, [X0 + 0x8B8]
	0x01CE4DAC BL 0x1B6E7F0
	0x01CE4DB0 ADRP X0, 0x2269000
	0x01CE4DB4 LDR X0, [X0 + 0xBC8]
	0x01CE4DB8 BL 0x1B6E7F0
	0x01CE4DBC ADRP X0, 0x226C000
	0x01CE4DC0 LDR X0, [X0 + 0x1C8]
	0x01CE4DC4 BL 0x1B6E7F0
	0x01CE4DC8 ADRP X0, 0x226C000
	0x01CE4DCC LDR X0, [X0 + 0x1D0]
	0x01CE4DD0 BL 0x1B6E7F0
	0x01CE4DD4 ADRP X0, 0x226C000
	0x01CE4DD8 LDR X0, [X0 + 0x1D8]
	0x01CE4DDC BL 0x1B6E7F0
	0x01CE4DE0 ADRP X0, 0x226C000
	0x01CE4DE4 LDR X0, [X0 + 0x1E0]
	0x01CE4DE8 BL 0x1B6E7F0
	0x01CE4DEC ADRP X0, 0x226C000
	0x01CE4DF0 LDR X0, [X0 + 0x1E8]
	0x01CE4DF4 BL 0x1B6E7F0
	0x01CE4DF8 MOVZ W8, 0x1
	0x01CE4DFC STRB W8, [X21 + 0x659]
	0x01CE4E00 MOV X0, X31
	0x01CE4E04 BL 0x1CD2434
	0x01CE4E08 TBZ X0, 0x0, 0x1CE4F40
	0x01CE4E0C MOV X0, X31

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, 0x2540000
	007 Move X20, 0x226B000
	008 Move W8, [X21+1618]
	009 Move X20, [X20+448]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x226D000
	016 Move X0, [X0+72]
	017 Call 0x1B6F7F0
	018 Move X0, 0x226B000
	019 Move X0, [X0+448]
	020 Call 0x1B6F7F0
	021 Move W8, 1
	022 Move [X21+1618], W8
	023 Move X21, 0x226D000
	024 Move X21, [X21+72]
	025 Add X8, X31, 32
	026 Move X0, X19
	027 Call CystController.get_tetherAttachmentPoints, X0
	028 Move V0, [X31+2]
	029 Move X8, [X31+48]
	030 Move X0, [X20]
	031 Move [X31], V0
	032 Move [X31+16], X8
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1B6F8F8
	037 Move V0, [X31]
	038 Move X8, [X31+16]
	039 Move X2, [X21]
	040 Add X1, X19, 224
	041 Add X0, X31, 32
	042 Move [X31+2], V0
	043 Move [X31+48], X8
	044 Call NetworkBehaviourUtils.CopyFromNetworkArray, X0, X1
	045 Move X0, X19
	046 Call CystController.get_target, X0
	047 Move [X19+232], X0
	048 Move X0, X19
	049 Call CystController.get_attacked, X0
	050 And W8, W0, 1
	051 Move X0, X19
	052 Move [X19+240], W8
	053 Call CystController.get_attackVector, X0
	054 Move X0, X19
	055 Move [X19+244], S0
	056 Move [X19+252], S1
	057 Move [X19+252], S2
	058 Call CystController.get_attackTimer, X0
	059 Move X0, X19
	060 Move [X19+256], S0
	061 Call CystController.get_health, X0
	062 Move [X19+260], W0
	063 Move X0, X19
	064 Call CystController.get_isDie, X0
	065 And W8, W0, 1
	066 Move X0, X19
	067 Move [X19+264], W8
	068 Call CystController.get_respawnTimer, X0
	069 Move [X19+268], W0
	070 Move X20, [X31+80]
	071 Move X19, [X31+88]
	072 Move X30, [X31+64]
	073 Move X21, [X31+72]
	074 Add X31, X31, 96
	075 Return 

Method: System.Void RPC_ServerBreakTether@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01CE4E10 BL 0x3AA2810
	0x01CE4E14 LDR V1, [X20 + 0x160]
	0x01CE4E18 ADRP X8, 0xFFFFFFFFFEDC5000
	0x01CE4E1C LDR V2, [X8 + 0xD30]
	0x01CE4E20 MOVZ W8, 0x447A0000
	0x01CE4E24 FSUB S0, S0, S1
	0x01CE4E28 FMOV S1, W8
	0x01CE4E2C FMUL S0, S0, S1
	0x01CE4E30 FCMP S0, S2
	0x01CE4E34 STR S0, [X31 + 0xC]
	0x01CE4E38 B.LE 0x1CE4F40
	0x01CE4E3C ADRP X8, 0x2269000
	0x01CE4E40 LDR X8, [X8 + 0xBC8]
	0x01CE4E44 MOVZ W1, 0x7
	0x01CE4E48 LDR X0, [X8]
	0x01CE4E4C BL 0x1B6E868
	0x01CE4E50 CBZ X0, 0x1CE4F54
	0x01CE4E54 LDR W8, [X0 + 0x18]
	0x01CE4E58 MOV X21, X0
	0x01CE4E5C CBZ W8, 0x1CE4F50
	0x01CE4E60 ADRP X8, 0x226C000
	0x01CE4E64 LDR X8, [X8 + 0x1D8]
	0x01CE4E68 MOV X0, X20
	0x01CE4E6C MOV X1, X31
	0x01CE4E70 LDR X8, [X8]
	0x01CE4E74 STR X8, [X21 + 0x20]
	0x01CE4E78 BL 0x3AA0C88
	0x01CE4E7C LDR W8, [X21 + 0x18]
	0x01CE4E80 CMP W8, 0x1
	0x01CE4E84 B.LS 0x1CE4F50
	0x01CE4E88 CMP W8, 0x2
	0x01CE4E8C STR X0, [X21 + 0x28]
	0x01CE4E90 B.EQ 0x1CE4F50
	0x01CE4E94 ADRP X9, 0x226C000
	0x01CE4E98 LDR X9, [X9 + 0x1E8]
	0x01CE4E9C CMP W8, 0x3
	0x01CE4EA0 LDR X9, [X9]
	0x01CE4EA4 STR X9, [X21 + 0x30]
	0x01CE4EA8 B.LS 0x1CE4F50
	0x01CE4EAC CMP W8, 0x4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2540000
	006 Move W8, [X21+1619]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x226D000
	014 Move X0, [X0+80]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1619], W8
	018 Move W0, 1
	019 Move X1, X31
	020 Move W21, 1
	021 Call Assert.Check, X0
	022 Compare X19, 0
	023 JumpIfEqual {48}
	024 Move X8, 0x226D000
	025 Move X8, [X8+80]
	026 Move W1, [X20+36]
	027 Move W2, [X20+40]
	028 Move [X19+88], W21
	029 Move X9, [X19]
	030 Move X8, [X8]
	031 Move W11, [X9+304]
	032 Move W10, [X8+304]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X9, [X9+200]
	035 Add X9, X9, X10
	036 NotImplemented "Instruction LDUR not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X0, X19
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Call CystController.RPC_ServerBreakTether, X0, X1, X2
	044 Return 
	045 Move X0, X19
	046 Move X1, X8
	047 Call 0x1B6FCDC
	048 Call 0x1B6FA1C

Method: System.Void RPC_Hit@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01CE4EB0 STR X19, [X21 + 0x38]
	0x01CE4EB4 B.EQ 0x1CE4F50
	0x01CE4EB8 ADRP X8, 0x226C000
	0x01CE4EBC LDR X8, [X8 + 0x1D0]
	0x01CE4EC0 ADD X0, X31, 0xC
	0x01CE4EC4 MOV X2, X31
	0x01CE4EC8 LDR X8, [X8]
	0x01CE4ECC STR X8, [X21 + 0x40]
	0x01CE4ED0 ADRP X8, 0x226C000
	0x01CE4ED4 LDR X8, [X8 + 0x1C8]
	0x01CE4ED8 LDR X1, [X8]
	0x01CE4EDC BL 0x31F95D0
	0x01CE4EE0 LDR W8, [X21 + 0x18]
	0x01CE4EE4 CMP W8, 0x5
	0x01CE4EE8 B.LS 0x1CE4F50
	0x01CE4EEC CMP W8, 0x6
	0x01CE4EF0 STR X0, [X21 + 0x48]
	0x01CE4EF4 B.EQ 0x1CE4F50
	0x01CE4EF8 ADRP X8, 0x226C000
	0x01CE4EFC LDR X8, [X8 + 0x1E0]
	0x01CE4F00 MOV X0, X21
	0x01CE4F04 MOV X1, X31
	0x01CE4F08 LDR X8, [X8]
	0x01CE4F0C STR X8, [X21 + 0x50]
	0x01CE4F10 BL 0x3090714
	0x01CE4F14 ADRP X8, 0x2269000
	0x01CE4F18 LDR X8, [X8 + 0x8B8]
	0x01CE4F1C MOV X19, X0
	0x01CE4F20 LDR X8, [X8]
	0x01CE4F24 LDR W9, [X8 + 0xE0]
	0x01CE4F28 CBNZ W9, 0x1CE4F34
	0x01CE4F2C MOV X0, X8
	0x01CE4F30 BL 0x1B6E8F8
	0x01CE4F34 MOV X0, X19
	0x01CE4F38 MOV X1, X31
	0x01CE4F3C BL 0x3A6F5F8
	0x01CE4F40 LDP X20, X19, [X31 + 0x20]
	0x01CE4F44 LDP X30, X21, [X31 + 0x10]
	0x01CE4F48 ADD X31, X31, 0x30
	0x01CE4F4C RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2540000
	006 Move W8, [X21+1620]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x226D000
	014 Move X0, [X0+80]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1620], W8
	018 Move W0, 1
	019 Move X1, X31
	020 Move W21, 1
	021 Call Assert.Check, X0
	022 Compare X19, 0
	023 JumpIfEqual {47}
	024 Move X8, 0x226D000
	025 Move X8, [X8+80]
	026 Move W1, [X20+36]
	027 Move [X19+88], W21
	028 Move X9, [X19]
	029 Move X8, [X8]
	030 Move W11, [X9+304]
	031 Move W10, [X8+304]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X9, [X9+200]
	034 Add X9, X9, X10
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X19
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call CystController.RPC_Hit, X0, X1
	043 Return 
	044 Move X0, X19
	045 Move X1, X8
	046 Call 0x1B6FCDC
	047 Call 0x1B6FA1C

