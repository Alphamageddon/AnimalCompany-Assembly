Type: AnimalCompany.SinRotater

Method: System.Void Update()

Disassembly:
	0x01D7BC14 LDP X30, X21, [X31], #0x20
	0x01D7BC18 B 0x3C15C58
	0x01D7BC1C BL 0x1C16F20
	0x01D7BC20 STR X30, [X31 - 0x30]!
	0x01D7BC24 STP X22, X21, [X31 + 0x10]
	0x01D7BC28 STP X20, X19, [X31 + 0x20]
	0x01D7BC2C ADRP X22, 0x265D000
	0x01D7BC30 ADRP X21, 0x2378000
	0x01D7BC34 LDRB W8, [X22 + 0x948]
	0x01D7BC38 LDR X21, [X21 + 0x598]
	0x01D7BC3C MOV X20, X1
	0x01D7BC40 MOV X19, X0
	0x01D7BC44 TBNZ X8, 0x0, 0x1D7BC68
	0x01D7BC48 ADRP X0, 0x2378000
	0x01D7BC4C LDR X0, [X0 + 0x598]
	0x01D7BC50 BL 0x1C16CF4
	0x01D7BC54 ADRP X0, 0x237A000
	0x01D7BC58 LDR X0, [X0 + 0x680]
	0x01D7BC5C BL 0x1C16CF4
	0x01D7BC60 MOVZ W8, 0x1
	0x01D7BC64 STRB W8, [X22 + 0x948]
	0x01D7BC68 LDR X0, [X21]
	0x01D7BC6C LDR X21, [X19 + 0x40]
	0x01D7BC70 LDR W8, [X0 + 0xE0]
	0x01D7BC74 CBNZ W8, 0x1D7BC7C
	0x01D7BC78 BL 0x1C16DFC
	0x01D7BC7C MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X20, X0
	006 Call Component.get_transform, X0
	007 Move X19, X0
	008 Move X0, X31
	009 Call Time.get_time
	010 Move V1, [X20+36]
	011 Multiply S0, S0, S1
	012 Call 0x3EB2B70
	013 Move V1, [X20+32]
	014 Move X8, -19464192
	015 Move V2, [X8+260]
	016 Move X0, X31
	017 Multiply S0, S1, S0
	018 Move S1, W31
	019 Multiply S2, S0, S2
	020 Move S0, W31
	021 Call Quaternion.Internal_FromEulerRad, X0
	022 Compare X19, 0
	023 JumpIfEqual {31}
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Call Transform.set_localRotation, X0, X1
	030 Return 
	031 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01D7BC80 MOV X1, X21
	0x01D7BC84 MOV X2, X31
	0x01D7BC88 BL 0x3C3883C
	0x01D7BC8C TBZ X0, 0x0, 0x1D7BCEC
	0x01D7BC90 ADRP X8, 0xFFFFFFFFFED6F000

ISIL:
	001 Move X8, -19451904
	002 Move V0, [X8+1728]
	003 Move X1, X31
	004 Move [X0+32], D0
	005 Call MonoBehaviour..ctor, X0
	006 Return 

