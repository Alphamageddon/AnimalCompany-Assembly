Type: AnimalCompany.GorillaQWOPController

Method: System.Void Update()

Disassembly:
	0x01CB6718 CBNZ W8, 0x1CB6730
	0x01CB671C ADRP X0, 0x2297000
	0x01CB6720 LDR X0, [X0 + 0x4E8]
	0x01CB6724 BL 0x1B6E7F0
	0x01CB6728 MOVZ W8, 0x1
	0x01CB672C STRB W8, [X23 + 0x443]
	0x01CB6730 LDR X0, [X22]
	0x01CB6734 LDR W8, [X0 + 0xE0]
	0x01CB6738 CBNZ W8, 0x1CB6744
	0x01CB673C BL 0x1B6E8F8
	0x01CB6740 LDR X0, [X22]
	0x01CB6744 LDR X8, [X0 + 0xB8]
	0x01CB6748 LDR X8, [X8]
	0x01CB674C CBZ X8, 0x1CB6C58
	0x01CB6750 LDR X8, [X8 + 0xA8]
	0x01CB6754 CBZ X8, 0x1CB6C58
	0x01CB6758 CBZ X21, 0x1CB6C58
	0x01CB675C LDR X22, [X8 + 0x58]
	0x01CB6760 CBZ X22, 0x1CB6778
	0x01CB6764 LDR X8, [X21]
	0x01CB6768 MOV X0, X22
	0x01CB676C LDR X1, [X8 + 0x40]
	0x01CB6770 BL 0x1B6E8FC
	0x01CB6774 CBZ X0, 0x1CB6C60
	0x01CB6778 LDR W8, [X21 + 0x18]
	0x01CB677C CBZ W8, 0x1CB6C5C
	0x01CB6780 MOV X0, X20
	0x01CB6784 MOV X1, X21
	0x01CB6788 MOV X2, X31
	0x01CB678C STR X22, [X21 + 0x20]
	0x01CB6790 BL 0x1C8CFDC
	0x01CB6794 ADRP X22, 0x2298000
	0x01CB6798 LDR X22, [X22 + 0x198]
	0x01CB679C LDR X0, [X22]
	0x01CB67A0 LDR W8, [X0 + 0xE0]
	0x01CB67A4 CBNZ W8, 0x1CB67B0
	0x01CB67A8 BL 0x1B6E8F8
	0x01CB67AC LDR X0, [X22]
	0x01CB67B0 ADRP X23, 0x2298000
	0x01CB67B4 LDR X8, [X0 + 0xB8]
	0x01CB67B8 LDR X23, [X23 + 0xEF8]
	0x01CB67BC LDR X20, [X8 + 0x18]
	0x01CB67C0 LDR X0, [X23]
	0x01CB67C4 BL 0x1B6EA0C
	0x01CB67C8 ADRP X8, 0x2298000
	0x01CB67CC LDR X8, [X8 + 0xF18]
	0x01CB67D0 MOV X1, X19
	0x01CB67D4 MOV X3, X31
	0x01CB67D8 MOV X21, X0
	0x01CB67DC LDR X2, [X8]
	0x01CB67E0 BL 0x28D5A38
	0x01CB67E4 MOV X0, X20
	0x01CB67E8 MOV X1, X21
	0x01CB67EC MOV X2, X31
	0x01CB67F0 BL 0x322A750
	0x01CB67F4 CBZ X0, 0x1CB6884
	0x01CB67F8 LDR X21, [X23]
	0x01CB67FC MOV X20, X0
	0x01CB6800 MOV X1, X21
	0x01CB6804 BL 0x1B6E8FC
	0x01CB6808 CBZ X0, 0x1CB6A14
	0x01CB680C LDR X8, [X22]
	0x01CB6810 LDR X8, [X8 + 0xB8]
	0x01CB6814 STR X0, [X8 + 0x18]
	0x01CB6818 LDR X21, [X23]
	0x01CB681C MOV X0, X20
	0x01CB6820 MOV X1, X21
	0x01CB6824 BL 0x1B6E8FC
	0x01CB6828 CBZ X0, 0x1CB6A14
	0x01CB682C LDR X8, [X22]
	0x01CB6830 LDR X8, [X8 + 0xB8]
	0x01CB6834 B 0x1CB6890
	0x01CB6838 CBZ X8, 0x1CB6C58
	0x01CB683C LDP X2, X3, [X19 + 0x90]
	0x01CB6840 LDR X1, [X19 + 0x88]
	0x01CB6844 MOVZ W6, 0x1
	0x01CB6848 MOV X0, X8
	0x01CB684C MOV X4, X2
	0x01CB6850 MOV X5, X3
	0x01CB6854 MOV X7, X31
	0x01CB6858 BL 0x1CC0634
	0x01CB685C MOV X0, X19
	0x01CB6860 BL 0x1CB6D68
	0x01CB6864 MOV X0, X19
	0x01CB6868 BL 0x1CB6D8C
	0x01CB686C MOV X1, X0
	0x01CB6870 MOV X0, X19
	0x01CB6874 MOV X2, X31
	0x01CB6878 BL 0x3A9E9B0
	0x01CB687C STR X0, [X19 + 0x110]
	0x01CB6880 B 0x1CB6BE0
	0x01CB6884 LDR X8, [X22]
	0x01CB6888 LDR X8, [X8 + 0xB8]
	0x01CB688C STR X31, [X8 + 0x18]
	0x01CB6890 ADRP X23, 0x2297000
	0x01CB6894 LDR X20, [X8 + 0x20]
	0x01CB6898 LDR X23, [X23 + 0xB38]
	0x01CB689C LDR X0, [X23]
	0x01CB68A0 BL 0x1B6EA0C
	0x01CB68A4 ADRP X8, 0x2298000
	0x01CB68A8 LDR X8, [X8 + 0xF38]
	0x01CB68AC MOV X1, X19
	0x01CB68B0 MOV X3, X31
	0x01CB68B4 MOV X21, X0
	0x01CB68B8 LDR X2, [X8]
	0x01CB68BC BL 0x27E7BCC
	0x01CB68C0 MOV X0, X20
	0x01CB68C4 MOV X1, X21
	0x01CB68C8 MOV X2, X31
	0x01CB68CC BL 0x322A750
	0x01CB68D0 CBZ X0, 0x1CB6914
	0x01CB68D4 LDR X21, [X23]
	0x01CB68D8 MOV X20, X0
	0x01CB68DC MOV X1, X21
	0x01CB68E0 BL 0x1B6E8FC
	0x01CB68E4 CBZ X0, 0x1CB6A14
	0x01CB68E8 LDR X8, [X22]
	0x01CB68EC LDR X8, [X8 + 0xB8]
	0x01CB68F0 STR X0, [X8 + 0x20]
	0x01CB68F4 LDR X21, [X23]
	0x01CB68F8 MOV X0, X20
	0x01CB68FC MOV X1, X21
	0x01CB6900 BL 0x1B6E8FC
	0x01CB6904 CBZ X0, 0x1CB6A14
	0x01CB6908 LDR X8, [X22]
	0x01CB690C LDR X8, [X8 + 0xB8]
	0x01CB6910 B 0x1CB6920
	0x01CB6914 LDR X8, [X22]
	0x01CB6918 LDR X8, [X8 + 0xB8]
	0x01CB691C STR X31, [X8 + 0x20]
	0x01CB6920 ADRP X23, 0x2298000
	0x01CB6924 LDR X20, [X8 + 0x28]
	0x01CB6928 LDR X23, [X23 + 0x170]
	0x01CB692C LDR X0, [X23]
	0x01CB6930 BL 0x1B6EA0C
	0x01CB6934 ADRP X8, 0x2298000
	0x01CB6938 LDR X8, [X8 + 0xF40]
	0x01CB693C MOV X1, X19
	0x01CB6940 MOV X3, X31
	0x01CB6944 MOV X21, X0
	0x01CB6948 LDR X2, [X8]
	0x01CB694C BL 0x317DB24
	0x01CB6950 MOV X0, X20
	0x01CB6954 MOV X1, X21
	0x01CB6958 MOV X2, X31
	0x01CB695C BL 0x322A750
	0x01CB6960 CBZ X0, 0x1CB6990
	0x01CB6964 LDR X1, [X23]
	0x01CB6968 LDR X8, [X0]
	0x01CB696C CMP X8, X1
	0x01CB6970 B.NE 0x1CB6A1C
	0x01CB6974 LDR X8, [X22]
	0x01CB6978 LDR X8, [X8 + 0xB8]
	0x01CB697C STR X0, [X8 + 0x28]
	0x01CB6980 LDR X9, [X0]
	0x01CB6984 CMP X9, X1
	0x01CB6988 B.EQ 0x1CB699C
	0x01CB698C B 0x1CB6A1C
	0x01CB6990 LDR X8, [X22]
	0x01CB6994 LDR X8, [X8 + 0xB8]
	0x01CB6998 STR X0, [X8 + 0x28]
	0x01CB699C ADRP X23, 0x2298000
	0x01CB69A0 LDR X20, [X8 + 0x48]
	0x01CB69A4 LDR X23, [X23 + 0xEF0]
	0x01CB69A8 LDR X0, [X23]
	0x01CB69AC BL 0x1B6EA0C
	0x01CB69B0 ADRP X8, 0x2298000
	0x01CB69B4 LDR X8, [X8 + 0xF28]
	0x01CB69B8 MOV X1, X19
	0x01CB69BC MOV X3, X31
	0x01CB69C0 MOV X21, X0
	0x01CB69C4 LDR X2, [X8]
	0x01CB69C8 BL 0x27EA208
	0x01CB69CC MOV X0, X20
	0x01CB69D0 MOV X1, X21
	0x01CB69D4 MOV X2, X31
	0x01CB69D8 BL 0x322A750
	0x01CB69DC CBZ X0, 0x1CB6A20
	0x01CB69E0 LDR X21, [X23]
	0x01CB69E4 MOV X20, X0
	0x01CB69E8 MOV X1, X21
	0x01CB69EC BL 0x1B6E8FC
	0x01CB69F0 CBZ X0, 0x1CB6A14
	0x01CB69F4 LDR X8, [X22]
	0x01CB69F8 LDR X8, [X8 + 0xB8]
	0x01CB69FC STR X0, [X8 + 0x48]
	0x01CB6A00 LDR X21, [X23]
	0x01CB6A04 MOV X0, X20
	0x01CB6A08 MOV X1, X21
	0x01CB6A0C BL 0x1B6E8FC
	0x01CB6A10 CBNZ X0, 0x1CB6A2C
	0x01CB6A14 MOV X0, X20
	0x01CB6A18 MOV X1, X21
	0x01CB6A1C BL 0x1B6ECDC
	0x01CB6A20 LDR X8, [X22]
	0x01CB6A24 LDR X8, [X8 + 0xB8]
	0x01CB6A28 STR X31, [X8 + 0x48]
	0x01CB6A2C MOV X0, X19
	0x01CB6A30 BL 0x1CB6D00
	0x01CB6A34 MOV X1, X0
	0x01CB6A38 MOV X0, X19
	0x01CB6A3C MOV X2, X31
	0x01CB6A40 BL 0x3A9E9B0
	0x01CB6A44 LDR X22, [X19 + 0xC8]
	0x01CB6A48 STR X0, [X19 + 0x110]
	0x01CB6A4C CBZ X22, 0x1CB6C58
	0x01CB6A50 LDR W8, [X22 + 0x18]
	0x01CB6A54 CMP W8, 0x1
	0x01CB6A58 B.LT 0x1CB6BE0
	0x01CB6A5C ADRP X24, 0x2298000
	0x01CB6A60 ADRP X25, 0x2298000
	0x01CB6A64 ADRP X26, 0x2298000
	0x01CB6A68 ADRP X27, 0x2298000
	0x01CB6A6C LDR X24, [X24 + 0x270]
	0x01CB6A70 LDR X25, [X25 + 0xF10]
	0x01CB6A74 LDR X26, [X26 + 0xF00]
	0x01CB6A78 LDR X27, [X27 + 0xF20]
	0x01CB6A7C MOV W23, W31
	0x01CB6A80 CMP W23, W8
	0x01CB6A84 B.CS 0x1CB6C5C
	0x01CB6A88 ADD X8, X22, W23, 0x3, SXTW
	0x01CB6A8C LDR X28, [X8 + 0x20]
	0x01CB6A90 CBZ X28, 0x1CB6C58
	0x01CB6A94 LDR X0, [X24]
	0x01CB6A98 LDR X20, [X28 + 0x90]
	0x01CB6A9C BL 0x1B6EA0C
	0x01CB6AA0 LDR X2, [X25]
	0x01CB6AA4 MOV X1, X19
	0x01CB6AA8 MOV X3, X31
	0x01CB6AAC MOV X21, X0
	0x01CB6AB0 BL 0x28D5998

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+128], D13
	003 Move [X31+136], D12
	004 Move [X31+144], D11
	005 Move [X31+152], D10
	006 Move [X31+160], D9
	007 Move [X31+168], D8
	008 Move [X31+176], X30
	009 Move [X31+184], X21
	010 Move [X31+192], X20
	011 Move [X31+200], X19
	012 NotImplemented "Instruction MOVI not yet implemented."
	013 Move [X31+96], V0
	014 Move [X31+104], V0
	015 Move [X31+64], V0
	016 Move [X31+72], V0
	017 NotImplemented "Instruction LDUR not yet implemented."
	018 Move V9, [X0+68]
	019 Move X19, X0
	020 Move W0, 119
	021 Move X1, X31
	022 Call Input.GetKey, X0
	023 Move V8, 0
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {55}
	028 Move X20, 0x256E000
	029 Move W8, [X20+1294]
	030 Compare W8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, 0x2298000
	033 Move X0, [X0+1152]
	034 Call 0x1B6F7F0
	035 Move W8, 1
	036 Move [X20+1294], W8
	037 Move X20, 0x2298000
	038 Move X20, [X20+1152]
	039 Move X21, 0x256E000
	040 Move W9, [X21+1295]
	041 Move X8, [X20]
	042 Move X8, [X8+184]
	043 Move V10, [X8+48]
	044 Move V9, [X8+56]
	045 Compare W9, 0
	046 JumpIfNotEqual {53}
	047 Move X0, X20
	048 Call 0x1B6F7F0
	049 Move X8, [X20]
	050 Move W9, 1
	051 Move [X21+1295], W9
	052 Move X8, [X8+184]
	053 Add X9, X8, 72
	054 Add X8, X8, 80
	055 Move W0, 113
	056 Move X1, X31
	057 Call Input.GetKey, X0
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {96}
	062 Move X20, 0x256E000
	063 Move W8, [X20+1294]
	064 Compare W8, 0
	065 JumpIfNotEqual {71}
	066 Move X0, 0x2298000
	067 Move X0, [X0+1152]
	068 Call 0x1B6F7F0
	069 Move W8, 1
	070 Move [X20+1294], W8
	071 Move X20, 0x2298000
	072 Move X20, [X20+1152]
	073 Move X21, 0x256E000
	074 Move W9, [X21+1296]
	075 Move X8, [X20]
	076 Move X8, [X8+184]
	077 Move V10, [X8+48]
	078 Move V9, [X8+56]
	079 Compare W9, 0
	080 JumpIfNotEqual {87}
	081 Move X0, X20
	082 Call 0x1B6F7F0
	083 Move X8, [X20]
	084 Move W9, 1
	085 Move [X21+1296], W9
	086 Move X8, [X8+184]
	087 Add X9, X8, 36
	088 Add X8, X8, 44
	089 Move V0, [X9]
	090 Move V2, [X8]
	091 Move S3, 0.25
	092 NotImplemented "Instruction INVALID not yet implemented."
	093 Multiply S3, S9, S3
	094 Add V10, V1, V0
	095 Add S9, S3, S2
	096 NotImplemented "Instruction LDUR not yet implemented."
	097 Move V12, [X19+68]
	098 Move V13, [X19+56]
	099 Move X0, X31
	100 Call Time.get_deltaTime
	101 Multiply S0, S13, S0
	102 Move S1, 1
	103 NotImplemented "Instruction FMIN not yet implemented."
	104 NotImplemented "Instruction FCMP not yet implemented."
	105 Move S0, W31
	106 Move X0, [X19+32]
	107 Subtract V2, V10, V11
	108 Subtract S3, S9, S12
	109 NotImplemented "Instruction FCSEL not yet implemented."
	110 NotImplemented "Instruction INVALID not yet implemented."
	111 Multiply S0, S3, S0
	112 Add V1, V11, V1
	113 Add S0, S12, S0
	114 Move [X19+60], D1
	115 Move [X19+68], S0
	116 Compare X0, 0
	117 JumpIfEqual {275}
	118 Move X20, [X19+48]
	119 Add X8, X31, 0
	120 Move X1, X31
	121 Call Transform.get_localToWorldMatrix, X0
	122 Move V0, [X31]
	123 Move V1, [X31+16]
	124 Move V2, [X31+32]
	125 Move V3, [X31+48]
	126 Add X0, X31, 64
	127 Move X1, X31
	128 Move [X31+64], V0
	129 Move [X31+72], V1
	130 Move [X31+96], V2
	131 Move [X31+104], V3
	132 Move S0, [X19+60]
	133 Move S1, [X19+64]
	134 Move V2, [X19+68]
	135 Call Matrix4x4.MultiplyPoint, X0, X1
	136 Compare X20, 0
	137 JumpIfEqual {275}
	138 Move X0, X20
	139 Move X1, X31
	140 Call Transform.set_position, X0, X1
	141 Move V10, [X19+72]
	142 Move V9, [X19+80]
	143 Move W0, 111
	144 Move X1, X31
	145 Call Input.GetKey, X0
	146 Move TEMP, X0
	147 And TEMP, TEMP, 1
	148 Compare TEMP, 1
	149 JumpIfNotEqual {177}
	150 Move X20, 0x256E000
	151 Move W8, [X20+1297]
	152 Compare W8, 0
	153 JumpIfNotEqual {159}
	154 Move X0, 0x2298000
	155 Move X0, [X0+1152]
	156 Call 0x1B6F7F0
	157 Move W8, 1
	158 Move [X20+1297], W8
	159 Move X20, 0x2298000
	160 Move X20, [X20+1152]
	161 Move X21, 0x256E000
	162 Move W9, [X21+1295]
	163 Move X8, [X20]
	164 Move X8, [X8+184]
	165 NotImplemented "Instruction LDUR not yet implemented."
	166 Move V9, [X8+68]
	167 Compare W9, 0
	168 JumpIfNotEqual {175}
	169 Move X0, X20
	170 Call 0x1B6F7F0
	171 Move X8, [X20]
	172 Move W9, 1
	173 Move [X21+1295], W9
	174 Move X8, [X8+184]
	175 Add X9, X8, 72
	176 Add X8, X8, 80
	177 Move W0, 112
	178 Move X1, X31
	179 Call Input.GetKey, X0
	180 Move TEMP, X0
	181 And TEMP, TEMP, 1
	182 Compare TEMP, 1
	183 JumpIfNotEqual {218}
	184 Move X20, 0x256E000
	185 Move W8, [X20+1297]
	186 Compare W8, 0
	187 JumpIfNotEqual {193}
	188 Move X0, 0x2298000
	189 Move X0, [X0+1152]
	190 Call 0x1B6F7F0
	191 Move W8, 1
	192 Move [X20+1297], W8
	193 Move X20, 0x2298000
	194 Move X20, [X20+1152]
	195 Move X21, 0x256E000
	196 Move W9, [X21+1296]
	197 Move X8, [X20]
	198 Move X8, [X8+184]
	199 NotImplemented "Instruction LDUR not yet implemented."
	200 Move V9, [X8+68]
	201 Compare W9, 0
	202 JumpIfNotEqual {209}
	203 Move X0, X20
	204 Call 0x1B6F7F0
	205 Move X8, [X20]
	206 Move W9, 1
	207 Move [X21+1296], W9
	208 Move X8, [X8+184]
	209 Add X9, X8, 36
	210 Add X8, X8, 44
	211 Move V0, [X9]
	212 Move V2, [X8]
	213 Move S3, 0.25
	214 NotImplemented "Instruction INVALID not yet implemented."
	215 Multiply S3, S9, S3
	216 Add V10, V1, V0
	217 Add S9, S3, S2
	218 Move V8, [X19+72]
	219 Move V11, [X19+80]
	220 Move V12, [X19+56]
	221 Move X0, X31
	222 Call Time.get_deltaTime
	223 Multiply S0, S12, S0
	224 Move S1, 1
	225 NotImplemented "Instruction FMIN not yet implemented."
	226 NotImplemented "Instruction FCMP not yet implemented."
	227 Move S0, W31
	228 Move X0, [X19+32]
	229 Subtract V2, V10, V8
	230 Subtract S3, S9, S11
	231 NotImplemented "Instruction FCSEL not yet implemented."
	232 NotImplemented "Instruction INVALID not yet implemented."
	233 Multiply S0, S3, S0
	234 Add V1, V8, V1
	235 Add S0, S11, S0
	236 Move [X19+72], D1
	237 Move [X19+80], S0
	238 Compare X0, 0
	239 JumpIfEqual {275}
	240 Move X20, [X19+40]
	241 Add X8, X31, 0
	242 Move X1, X31
	243 Call Transform.get_localToWorldMatrix, X0
	244 Move V0, [X31]
	245 Move V1, [X31+16]
	246 Move V2, [X31+32]
	247 Move V3, [X31+48]
	248 Add X0, X31, 64
	249 Move X1, X31
	250 Move [X31+64], V0
	251 Move [X31+72], V1
	252 Move [X31+96], V2
	253 Move [X31+104], V3
	254 Move S0, [X19+72]
	255 Move S1, [X19+76]
	256 Move V2, [X19+80]
	257 Call Matrix4x4.MultiplyPoint, X0, X1
	258 Compare X20, 0
	259 JumpIfEqual {275}
	260 Move X0, X20
	261 Move X1, X31
	262 Call Transform.set_position, X0, X1
	263 Move X20, [X31+192]
	264 Move X19, [X31+200]
	265 Move X30, [X31+176]
	266 Move X21, [X31+184]
	267 Move D9, [X31+160]
	268 Move D8, [X31+168]
	269 Move D11, [X31+144]
	270 Move D10, [X31+152]
	271 Move D13, [X31+128]
	272 Move D12, [X31+136]
	273 Add X31, X31, 208
	274 Return 
	275 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CB6AB4 MOV X0, X20
	0x01CB6AB8 MOV X1, X21
	0x01CB6ABC MOV X2, X31
	0x01CB6AC0 BL 0x322A750

ISIL:
	001 Move W8, 0x40A00000
	002 Move X1, X31
	003 Move [X0+56], W8
	004 Call MonoBehaviour..ctor, X0
	005 Return 

