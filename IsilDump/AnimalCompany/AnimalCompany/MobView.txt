Type: AnimalCompany.MobView

Method: System.Void GetRenderers()

Disassembly:
	0x01DFA6D4 STR W0, [X8]
	0x01DFA6D8 LDR X0, [X21]
	0x01DFA6DC BL 0x3C124EC
	0x01DFA6E0 LDR X8, [X19]
	0x01DFA6E4 ADRP X9, 0xFFFFFFFFFECF1000
	0x01DFA6E8 LDR V0, [X9 + 0xD7]
	0x01DFA6EC ADRP X9, 0xFFFFFFFFFECF2000
	0x01DFA6F0 LDR X10, [X8 + 0xB8]
	0x01DFA6F4 MOV X1, X31
	0x01DFA6F8 STR W0, [X10 + 0x4]
	0x01DFA6FC STUR V0, [X10 + 0x8]
	0x01DFA700 LDR X8, [X8 + 0xB8]
	0x01DFA704 LDR V0, [X9 + 0x19]
	0x01DFA708 STUR V0, [X8 + 0x18]
	0x01DFA70C LDR X0, [X20]
	0x01DFA710 BL 0x3BF5D64
	0x01DFA714 LDR X8, [X19]
	0x01DFA718 MOV X1, X31
	0x01DFA71C LDR X8, [X8 + 0xB8]
	0x01DFA720 STR W0, [X8 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25DF000
	006 Move X21, 0x22FF000
	007 Move W8, [X20+3366]
	008 Move X21, [X21+3416]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22FF000
	015 Move X0, [X0+3416]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3366], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Call 0x21A553C, X0
	022 Move [X19+48], X0
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Return 

Method: System.Void Awake()

Disassembly:
	0x01DFA724 LDR X0, [X29]
	0x01DFA728 BL 0x3BF5D64
	0x01DFA72C LDR X8, [X19]
	0x01DFA730 MOV X1, X31
	0x01DFA734 LDR X8, [X8 + 0xB8]
	0x01DFA738 STR W0, [X8 + 0x2C]
	0x01DFA73C LDR X0, [X28]
	0x01DFA740 BL 0x3BF5D64
	0x01DFA744 LDR X8, [X19]
	0x01DFA748 MOV X1, X31
	0x01DFA74C LDR X8, [X8 + 0xB8]
	0x01DFA750 STR W0, [X8 + 0x30]
	0x01DFA754 LDR X0, [X27]
	0x01DFA758 BL 0x3BF5D64
	0x01DFA75C LDR X8, [X19]
	0x01DFA760 MOV X1, X31
	0x01DFA764 LDR X8, [X8 + 0xB8]
	0x01DFA768 STR W0, [X8 + 0x34]
	0x01DFA76C LDR X0, [X26]
	0x01DFA770 BL 0x3BF5D64
	0x01DFA774 LDR X8, [X19]
	0x01DFA778 MOV X1, X31
	0x01DFA77C LDR X8, [X8 + 0xB8]
	0x01DFA780 STR W0, [X8 + 0x38]
	0x01DFA784 LDR X0, [X25]
	0x01DFA788 BL 0x3BF5D64
	0x01DFA78C LDR X8, [X19]
	0x01DFA790 MOV X1, X31
	0x01DFA794 LDR X8, [X8 + 0xB8]
	0x01DFA798 STR W0, [X8 + 0x3C]
	0x01DFA79C LDR X0, [X24]
	0x01DFA7A0 BL 0x3BF5D64
	0x01DFA7A4 LDR X8, [X19]
	0x01DFA7A8 MOV X1, X31
	0x01DFA7AC LDR X8, [X8 + 0xB8]
	0x01DFA7B0 STR W0, [X8 + 0x40]
	0x01DFA7B4 ADRP X8, 0x22FF000
	0x01DFA7B8 LDR X8, [X8 + 0x4F8]
	0x01DFA7BC LDR X0, [X8]
	0x01DFA7C0 BL 0x3BF5D64
	0x01DFA7C4 LDR X8, [X19]
	0x01DFA7C8 MOV X1, X31
	0x01DFA7CC LDR X8, [X8 + 0xB8]
	0x01DFA7D0 STR W0, [X8 + 0x44]
	0x01DFA7D4 ADRP X8, 0x22FF000
	0x01DFA7D8 LDR X8, [X8 + 0x4E8]
	0x01DFA7DC LDR X0, [X8]
	0x01DFA7E0 BL 0x3BF5D64
	0x01DFA7E4 LDR X8, [X19]
	0x01DFA7E8 MOV X1, X31
	0x01DFA7EC LDR X8, [X8 + 0xB8]
	0x01DFA7F0 STR W0, [X8 + 0x48]
	0x01DFA7F4 ADRP X8, 0x22FF000
	0x01DFA7F8 LDR X8, [X8 + 0x4F0]
	0x01DFA7FC LDR X0, [X8]
	0x01DFA800 BL 0x3BF5D64
	0x01DFA804 LDR X8, [X19]
	0x01DFA808 MOV X1, X31
	0x01DFA80C LDR X8, [X8 + 0xB8]
	0x01DFA810 STR W0, [X8 + 0x4C]
	0x01DFA814 ADRP X8, 0x22FF000
	0x01DFA818 LDR X8, [X8 + 0x500]
	0x01DFA81C LDR X0, [X8]
	0x01DFA820 BL 0x3BF5D64
	0x01DFA824 LDR X8, [X19]
	0x01DFA828 LDP X20, X19, [X31 + 0x50]
	0x01DFA82C LDP X22, X21, [X31 + 0x40]
	0x01DFA830 LDP X24, X23, [X31 + 0x30]
	0x01DFA834 LDR X8, [X8 + 0xB8]
	0x01DFA838 LDP X26, X25, [X31 + 0x20]
	0x01DFA83C LDP X28, X27, [X31 + 0x10]
	0x01DFA840 STR W0, [X8 + 0x50]
	0x01DFA844 LDP X29, X30, [X31], #0x60
	0x01DFA848 RET
	0x01DFA84C STR X30, [X31 - 0x20]!
	0x01DFA850 STP X20, X19, [X31 + 0x10]
	0x01DFA854 MOV W19, W1
	0x01DFA858 MOV X1, X31
	0x01DFA85C MOV X20, X0
	0x01DFA860 BL 0x33BDD8C
	0x01DFA864 STR W19, [X20 + 0x10]
	0x01DFA868 LDP X20, X19, [X31 + 0x10]
	0x01DFA86C LDR X30, [X31], #0x20
	0x01DFA870 RET
	0x01DFA874 RET
	0x01DFA878 STR D10, [X31 - 0x40]!
	0x01DFA87C STP D9, D8, [X31 + 0x8]
	0x01DFA880 STR X30, [X31 + 0x18]
	0x01DFA884 STP X22, X21, [X31 + 0x20]
	0x01DFA888 STP X20, X19, [X31 + 0x30]
	0x01DFA88C ADRP X20, 0x25DE000
	0x01DFA890 LDRB W8, [X20 + 0xD36]
	0x01DFA894 MOV X19, X0
	0x01DFA898 TBNZ X8, 0x0, 0x1DFA8B0
	0x01DFA89C ADRP X0, 0x22FE000
	0x01DFA8A0 LDR X0, [X0 + 0xC88]
	0x01DFA8A4 BL 0x1C16CF4
	0x01DFA8A8 MOVZ W8, 0x1
	0x01DFA8AC STRB W8, [X20 + 0xD36]
	0x01DFA8B0 LDR W8, [X19 + 0x10]
	0x01DFA8B4 LDR X20, [X19 + 0x20]
	0x01DFA8B8 CMP W8, 0x1
	0x01DFA8BC B.EQ 0x1DFA8F4
	0x01DFA8C0 CBNZ W8, 0x1DFA970
	0x01DFA8C4 MOVN W8, 0x0
	0x01DFA8C8 STR W8, [X19 + 0x10]
	0x01DFA8CC CBZ X20, 0x1DFAB20
	0x01DFA8D0 MOV X0, X20
	0x01DFA8D4 MOV X1, X31
	0x01DFA8D8 BL 0x3C32E90

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x25DF000
	008 Move W8, [X20+3367]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x22FA000
	015 Move X0, [X0+2648]
	016 Call 0x1C17CF4
	017 Move X0, 0x22FA000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x2300000
	021 Move X0, [X0+1168]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3367], W8
	025 Move X0, X19
	026 Move X1, X31
	027 Call Component.get_transform, X0
	028 Compare X0, 0
	029 JumpIfEqual {133}
	030 Move X1, X31
	031 Call Transform.get_localPosition, X0
	032 Move X0, [X19+32]
	033 Move [X19+156], S0
	034 Move [X19+164], S1
	035 Move [X19+164], S2
	036 Compare X0, 0
	037 JumpIfEqual {133}
	038 Move X1, [X19+40]
	039 Move X20, 0x22FA000
	040 Move X20, [X20+1432]
	041 Move X2, X31
	042 Call Animator.set_runtimeAnimatorController, X0, X1
	043 Move X0, [X20]
	044 Move X20, [X19+64]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Equality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {126}
	057 Move X8, 0x22FA000
	058 Move X8, [X8+2648]
	059 Move X0, [X8]
	060 Call 0x1C17F10
	061 Move X8, 0x2300000
	062 Move X8, [X8+1168]
	063 Move X2, X31
	064 Move X20, X0
	065 Move X1, [X8]
	066 Call GameObject..ctor, X0, X1
	067 Compare X20, 0
	068 JumpIfEqual {133}
	069 Move X0, X20
	070 Move X1, X31
	071 Call GameObject.get_transform, X0
	072 Move X20, X0
	073 Move [X19+64], X0
	074 Move X0, X19
	075 Move X1, X31
	076 Call Component.get_transform, X0
	077 Compare X20, 0
	078 JumpIfEqual {133}
	079 Move X1, X0
	080 Move X0, X20
	081 Move X2, X31
	082 Call Transform.SetParent, X0, X1
	083 Move X0, [X19+56]
	084 Compare X0, 0
	085 JumpIfEqual {133}
	086 Move X19, [X19+64]
	087 Move X1, X31
	088 Call Transform.get_position, X0
	089 Move X20, 0x25DF000
	090 Move W8, [X20+2591]
	091 Move V8, V0
	092 Move V9, V1
	093 Move V10, V2
	094 Compare W8, 0
	095 JumpIfNotEqual {101}
	096 Move X0, 0x22FA000
	097 Move X0, [X0+1440]
	098 Call 0x1C17CF4
	099 Move W8, 1
	100 Move [X20+2591], W8
	101 Compare X19, 0
	102 JumpIfEqual {133}
	103 Move X8, 0x22FA000
	104 Move X8, [X8+1440]
	105 Move X0, X19
	106 Move X20, [X31+32]
	107 Move X19, [X31+40]
	108 Move X30, [X31+24]
	109 Move X8, [X8]
	110 Move X1, X31
	111 Move X8, [X8+184]
	112 Move S1, [X8+76]
	113 Move S0, [X8+80]
	114 Move V3, [X8+72]
	115 Add S0, S0, S0
	116 Add S2, S10, S0
	117 Add S0, S1, S1
	118 Add S1, S9, S0
	119 Add S0, S3, S3
	120 Add S0, S8, S0
	121 Move D9, [X31+8]
	122 Move D8, [X31+16]
	123 Move V10, [X31+48]
	124 Call Transform.set_position, X0, X1
	125 Return 
	126 Move X20, [X31+32]
	127 Move X19, [X31+40]
	128 Move X30, [X31+24]
	129 Move D9, [X31+8]
	130 Move D8, [X31+16]
	131 Move V10, [X31+48]
	132 Return 
	133 Call 0x1C17F20

Method: System.Void Setup(AnimalCompany.MobController mobController)

Disassembly:
	0x01DFA8DC CBZ X0, 0x1DFAB20
	0x01DFA8E0 MOV X1, X31
	0x01DFA8E4 BL 0x3C40EA8
	0x01DFA8E8 STP S0, S1, [X19 + 0x28]
	0x01DFA8EC STR S2, [X19 + 0x30]
	0x01DFA8F0 B 0x1DFA900
	0x01DFA8F4 MOVN W8, 0x0
	0x01DFA8F8 STR W8, [X19 + 0x10]
	0x01DFA8FC CBZ X20, 0x1DFAB20
	0x01DFA900 LDR V8, [X20 + 0x90]
	0x01DFA904 FCMP S8, 0x0
	0x01DFA908 B.GT 0x1DFA918
	0x01DFA90C LDR V0, [X20 + 0x94]
	0x01DFA910 FCMP S0, 0x0
	0x01DFA914 B.LE 0x1DFAA14
	0x01DFA918 MOV X0, X31
	0x01DFA91C BL 0x3C3C714
	0x01DFA920 LDR V9, [X20 + 0x94]
	0x01DFA924 FSUB S0, S8, S0
	0x01DFA928 MOV X0, X31
	0x01DFA92C STR S0, [X20 + 0x90]
	0x01DFA930 BL 0x3C3C714
	0x01DFA934 LDR V8, [X20 + 0x90]
	0x01DFA938 LDRB W9, [X20 + 0x98]
	0x01DFA93C FSUB S9, S9, S0
	0x01DFA940 STR S9, [X20 + 0x94]
	0x01DFA944 FCMP S8, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+56]
	006 Move W8, 1
	007 Move [X19+168], W8
	008 Compare X0, 0
	009 JumpIfEqual {36}
	010 Move X20, X1
	011 Move X1, X31
	012 Call Transform.get_rotation, X0
	013 Move X0, [X19+64]
	014 Move [X19+88], S0
	015 Move [X19+96], S1
	016 Move [X19+96], S2
	017 Move [X19+104], S3
	018 Compare X0, 0
	019 JumpIfEqual {36}
	020 Move X1, X31
	021 Call Transform.get_position, X0
	022 Move [X19+104], S0
	023 Move [X19+112], S1
	024 Move [X19+112], S2
	025 Compare X20, 0
	026 JumpIfEqual {36}
	027 Move X8, [X20+192]
	028 Compare X8, 0
	029 JumpIfEqual {36}
	030 Move X8, [X8+168]
	031 Move [X19+120], X8
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return 
	036 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x01DFA948 CSET W10, GT
	0x01DFA94C FCMP S9, 0x0
	0x01DFA950 CSET W8, GT
	0x01DFA954 CMP W9, W10
	0x01DFA958 MOV X9, X20
	0x01DFA95C B.NE 0x1DFA978
	0x01DFA960 LDRB W10, [X9 + 0x99]!
	0x01DFA964 CMP W10, W8
	0x01DFA968 B.NE 0x1DFA988

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, [X0+136]
	004 Compare X1, 0
	005 JumpIfEqual {10}
	006 Move X2, X31
	007 Move X19, X0
	008 Call MonoBehaviour.StopCoroutine, X0, X1
	009 Move [X19+136], X31
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 

Method: System.Void Update()

Disassembly:
	0x01DE86B0 MOV X0, X19
	0x01DE86B4 BL 0x1DF58C4
	0x01DE86B8 MOV X0, X19
	0x01DE86BC BL 0x1DF594C
	0x01DE86C0 LDR X0, [X19 + 0xC8]
	0x01DE86C4 CBZ X0, 0x1DE8780
	0x01DE86C8 LDR X8, [X0]
	0x01DE86CC MOV X1, X19
	0x01DE86D0 LDP X9, X2, [X8 + 0x188]
	0x01DE86D4 BLR X9
	0x01DE86D8 ADD X8, X31, 0x8
	0x01DE86DC MOV X0, X19
	0x01DE86E0 BL 0x1DF4E08
	0x01DE86E4 LDR X8, [X31 + 0x10]
	0x01DE86E8 CBZ X8, 0x1DE8780
	0x01DE86EC LDR X8, [X8 + 0x18]
	0x01DE86F0 CBNZ X8, 0x1DE8740
	0x01DE86F4 ADRP X8, 0x230B000
	0x01DE86F8 LDR X8, [X8 + 0x788]
	0x01DE86FC LDR X0, [X8]
	0x01DE8700 LDR W8, [X0 + 0xE0]
	0x01DE8704 CBNZ W8, 0x1DE870C
	0x01DE8708 BL 0x1C16DFC
	0x01DE870C ADRP X8, 0x2310000
	0x01DE8710 ADRP X9, 0x2310000
	0x01DE8714 ADRP X10, 0x2310000
	0x01DE8718 LDR X8, [X8 + 0xE58]
	0x01DE871C LDR X9, [X9 + 0xE50]
	0x01DE8720 LDR X10, [X10 + 0xE48]
	0x01DE8724 MOVZ W4, 0xF4
	0x01DE8728 LDR X0, [X8]
	0x01DE872C LDR X2, [X9]
	0x01DE8730 LDR X3, [X10]
	0x01DE8734 MOV X1, X31
	0x01DE8738 MOV X5, X31
	0x01DE873C BL 0x35C2344
	0x01DE8740 LDR X8, [X19]
	0x01DE8744 MOV X0, X19
	0x01DE8748 LDR X9, [X8 + 0x2F8]
	0x01DE874C LDR X1, [X8 + 0x300]
	0x01DE8750 BLR X9
	0x01DE8754 LDR X8, [X19]
	0x01DE8758 MOV X0, X19
	0x01DE875C LDR X9, [X8 + 0x308]
	0x01DE8760 LDR X1, [X8 + 0x310]
	0x01DE8764 BLR X9
	0x01DE8768 MOVZ W8, 0x1
	0x01DE876C STRB W8, [X19 + 0x1A0]
	0x01DE8770 LDP X20, X19, [X31 + 0x30]
	0x01DE8774 LDR X30, [X31 + 0x20]
	0x01DE8778 ADD X31, X31, 0x40
	0x01DE877C RET
	0x01DE8780 BL 0x1C16F20
	0x01DE8784 BL 0x1C16F28
	0x01DE8788 STP X30, X19, [X31 - 0x10]!
	0x01DE878C LDR X8, [X0 + 0x50]
	0x01DE8790 CBZ X8, 0x1DE87A0
	0x01DE8794 STR S0, [X8 + 0x2C]
	0x01DE8798 LDP X30, X19, [X31], #0x10
	0x01DE879C RET
	0x01DE87A0 ADRP X0, 0x230B000
	0x01DE87A4 LDR X0, [X0 + 0x5B0]
	0x01DE87A8 BL 0x1C16D08
	0x01DE87AC BL 0x1C16F10
	0x01DE87B0 MOV X19, X0
	0x01DE87B4 ADRP X0, 0x2310000
	0x01DE87B8 LDR X0, [X0 + 0xE60]
	0x01DE87BC BL 0x1C16D08
	0x01DE87C0 MOV X1, X0
	0x01DE87C4 MOV X0, X19
	0x01DE87C8 MOV X2, X31
	0x01DE87CC BL 0x337DF1C
	0x01DE87D0 ADRP X0, 0x2310000
	0x01DE87D4 LDR X0, [X0 + 0xE68]
	0x01DE87D8 BL 0x1C16D08
	0x01DE87DC MOV X1, X0
	0x01DE87E0 MOV X0, X19
	0x01DE87E4 BL 0x1C16DEC
	0x01DE87E8 STR D10, [X31 - 0x40]!
	0x01DE87EC STP D9, D8, [X31 + 0x10]
	0x01DE87F0 STP X30, X21, [X31 + 0x20]
	0x01DE87F4 STP X20, X19, [X31 + 0x30]
	0x01DE87F8 ADRP X21, 0x25F0000
	0x01DE87FC LDRB W8, [X21 + 0xCB5]
	0x01DE8800 MOV W20, W1
	0x01DE8804 MOV X19, X0
	0x01DE8808 TBNZ X8, 0x0, 0x1DE8820
	0x01DE880C ADRP X0, 0x230B000
	0x01DE8810 LDR X0, [X0 + 0x598]
	0x01DE8814 BL 0x1C16CF4
	0x01DE8818 MOVZ W8, 0x1
	0x01DE881C STRB W8, [X21 + 0xCB5]
	0x01DE8820 STR W31, [X31 + 0x8]
	0x01DE8824 TBZ X20, 0x0, 0x1DE88D0
	0x01DE8828 MOV X0, X31
	0x01DE882C BL 0x1E91B08
	0x01DE8830 AND X1, X0, 0x0
	0x01DE8834 MOV X0, X19
	0x01DE8838 BL 0x1DE7D0C
	0x01DE883C MOV X0, X19
	0x01DE8840 BL 0x1DE7FF0
	0x01DE8844 MOVZ W8, 0x43B40000
	0x01DE8848 MOV V8.16B, V0.16B
	0x01DE884C MOV V9.16B, V1.16B
	0x01DE8850 FMOV S0, W31
	0x01DE8854 FMOV S1, W8
	0x01DE8858 MOV X0, X31
	0x01DE885C MOV V10.16B, V2.16B
	0x01DE8860 BL 0x3C30968
	0x01DE8864 ADRP X8, 0xFFFFFFFFFED02000
	0x01DE8868 LDR V1, [X8 + 0x104]
	0x01DE886C FMOV S2, W31
	0x01DE8870 MOV X0, X31
	0x01DE8874 FMUL S1, S0, S1
	0x01DE8878 FMOV S0, W31
	0x01DE887C BL 0x3C2A574
	0x01DE8880 MOV V4.16B, V0.16B
	0x01DE8884 MOV V5.16B, V1.16B
	0x01DE8888 MOV V6.16B, V2.16B
	0x01DE888C MOV V7.16B, V3.16B
	0x01DE8890 MOV X0, X19
	0x01DE8894 MOV V0.16B, V8.16B
	0x01DE8898 MOV V1.16B, V9.16B
	0x01DE889C MOV V2.16B, V10.16B
	0x01DE88A0 MOV V3.16B, V4.16B
	0x01DE88A4 MOV V4.16B, V5.16B
	0x01DE88A8 MOV V5.16B, V6.16B
	0x01DE88AC MOV V6.16B, V7.16B
	0x01DE88B0 BL 0x1DE8D64
	0x01DE88B4 MOV X0, X19
	0x01DE88B8 BL 0x1DE7A64
	0x01DE88BC CMP W0, 0x5
	0x01DE88C0 B.NE 0x1DE8920
	0x01DE88C4 MOV X0, X19
	0x01DE88C8 BL 0x1DE8AFC
	0x01DE88CC B 0x1DE8920
	0x01DE88D0 ADRP X8, 0x230B000
	0x01DE88D4 LDR X8, [X8 + 0x598]
	0x01DE88D8 LDR X20, [X19 + 0x1E8]
	0x01DE88DC LDR X0, [X8]
	0x01DE88E0 LDR W8, [X0 + 0xE0]
	0x01DE88E4 CBNZ W8, 0x1DE88EC
	0x01DE88E8 BL 0x1C16DFC
	0x01DE88EC MOV X0, X20
	0x01DE88F0 MOV X1, X31
	0x01DE88F4 MOV X2, X31
	0x01DE88F8 BL 0x3C3883C
	0x01DE88FC TBZ X0, 0x0, 0x1DE8920
	0x01DE8900 MOV X0, X19
	0x01DE8904 BL 0x1DE7CAC
	0x01DE8908 STR W0, [X31 + 0x8]
	0x01DE890C LDR X1, [X19 + 0x38]
	0x01DE8910 ADD X0, X31, 0x8
	0x01DE8914 MOV X2, X31
	0x01DE8918 BL 0x1E91B84

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move W8, [X0+84]
	014 Compare W8, 0
	015 JumpIfEqual {64}
	016 Move X19, X0
	017 Move X0, [X0+64]
	018 Compare X0, 0
	019 JumpIfEqual {178}
	020 Move X1, X31
	021 Call Transform.get_position, X0
	022 Move X0, [X19+56]
	023 Compare X0, 0
	024 JumpIfEqual {178}
	025 Move X1, X31
	026 Move V8, V0
	027 Move V9, V1
	028 Move V10, V2
	029 Call Transform.get_position, X0
	030 Move X20, 0x25F1000
	031 Move W8, [X20+1925]
	032 Move V11, V0
	033 Move V12, V1
	034 Move V13, V2
	035 Compare W8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, 0x230C000
	038 Move X0, [X0+1448]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+1925], W8
	042 Move X8, 0x230C000
	043 Move X8, [X8+1448]
	044 Subtract S11, S8, S11
	045 Subtract S9, S9, S12
	046 Subtract S8, S10, S13
	047 Move X0, [X8]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Multiply S0, S11, S11
	053 Multiply S1, S9, S9
	054 Move X8, -19910656
	055 Add S0, S0, S1
	056 Move V1, [X8+380]
	057 Multiply S2, S8, S8
	058 Add S0, S2, S0
	059 NotImplemented "Instruction FSQRT not yet implemented."
	060 NotImplemented "Instruction FCMP not yet implemented."
	061 NotImplemented "Instruction FDIV not yet implemented."
	062 NotImplemented "Instruction FDIV not yet implemented."
	063 NotImplemented "Instruction FDIV not yet implemented."
	064 Move X20, [X31+96]
	065 Move X19, [X31+104]
	066 Move X30, [X31+80]
	067 Move D9, [X31+64]
	068 Move D8, [X31+72]
	069 Move D11, [X31+48]
	070 Move D10, [X31+56]
	071 Move D13, [X31+32]
	072 Move D12, [X31+40]
	073 Move D15, [X31+16]
	074 Move D14, [X31+24]
	075 Add X31, X31, 112
	076 Return 
	077 Move X20, 0x25F1000
	078 Move W8, [X20+1923]
	079 Compare W8, 0
	080 JumpIfNotEqual {86}
	081 Move X0, 0x230C000
	082 Move X0, [X0+1440]
	083 Call 0x1C17CF4
	084 Move W8, 1
	085 Move [X20+1923], W8
	086 Move X8, 0x230C000
	087 Move X8, [X8+1440]
	088 Move X8, [X8]
	089 Move X8, [X8+184]
	090 Move S0, [X8]
	091 Move S1, [X8+4]
	092 Move V2, [X8+8]
	093 Move X0, X31
	094 Call Quaternion.LookRotation, X0
	095 Move X8, -19910656
	096 Move V9, V0
	097 Move V11, V1
	098 Move V8, V2
	099 Move V10, V3
	100 Move V2, [X8+260]
	101 Move S0, [X19+72]
	102 Move S1, [X19+76]
	103 Move V3, [X19+80]
	104 Move X0, X31
	105 Multiply S0, S0, S2
	106 Multiply S1, S1, S2
	107 Multiply S2, S3, S2
	108 Call Quaternion.Internal_FromEulerRad, X0
	109 Move X19, [X19+56]
	110 Compare X19, 0
	111 JumpIfEqual {178}
	112 Multiply S4, S10, S3
	113 Multiply S5, S9, S0
	114 Multiply S17, S10, S2
	115 Multiply S18, S8, S3
	116 Multiply S19, S11, S0
	117 Multiply S20, S11, S3
	118 Multiply S3, S9, S3
	119 Multiply S22, S8, S0
	120 Multiply S0, S10, S0
	121 Multiply S23, S10, S1
	122 Multiply S6, S11, S1
	123 Multiply S16, S9, S1
	124 Multiply S21, S11, S2
	125 Subtract S4, S4, S5
	126 Add S5, S17, S18
	127 Add S17, S23, S20
	128 Add S0, S0, S3
	129 Multiply S7, S8, S2
	130 Multiply S2, S9, S2
	131 Multiply S1, S8, S1
	132 Subtract S3, S4, S6
	133 Add S4, S16, S5
	134 Add S5, S22, S17
	135 Add S0, S21, S0
	136 Move X0, X19
	137 Move X1, X31
	138 Subtract S8, S3, S7
	139 Subtract S9, S4, S19
	140 Subtract S10, S5, S2
	141 Subtract S11, S0, S1
	142 Call Transform.get_rotation, X0
	143 Move X0, X31
	144 Move V12, V0
	145 Move V13, V1
	146 Move V14, V2
	147 Move V15, V3
	148 Call Time.get_deltaTime
	149 Move S1, 10
	150 Multiply S0, S0, S1
	151 Move [X31], S0
	152 Move V0, V12
	153 Move V1, V13
	154 Move V2, V14
	155 Move V3, V15
	156 Move V4, V11
	157 Move V5, V10
	158 Move V6, V9
	159 Move V7, V8
	160 Move X0, X31
	161 Call Quaternion.Slerp, X0, X1, V0
	162 Move X0, X19
	163 Move X20, [X31+96]
	164 Move X19, [X31+104]
	165 Move X30, [X31+80]
	166 Move D9, [X31+64]
	167 Move D8, [X31+72]
	168 Move D11, [X31+48]
	169 Move D10, [X31+56]
	170 Move D13, [X31+32]
	171 Move D12, [X31+40]
	172 Move D15, [X31+16]
	173 Move D14, [X31+24]
	174 Move X1, X31
	175 Add X31, X31, 112
	176 Call Transform.set_rotation, X0, X1
	177 Return 
	178 Call 0x1C17F20

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01DFA96C B 0x1DFAA9C
	0x01DFA970 MOV W0, W31
	0x01DFA974 B 0x1DFAB08
	0x01DFA978 LDRB W11, [X9 + 0x99]!
	0x01DFA97C CMP W11, W8
	0x01DFA980 STURB W10, [X9 - 0x1]
	0x01DFA984 B.EQ 0x1DFA98C
	0x01DFA988 STRB W8, [X9]
	0x01DFA98C FCMP S8, 0x0
	0x01DFA990 B.LE 0x1DFA9C8
	0x01DFA994 ADRP X21, 0x22FE000
	0x01DFA998 LDR X21, [X21 + 0xC88]
	0x01DFA99C LDR X0, [X21]
	0x01DFA9A0 LDR W8, [X0 + 0xE0]
	0x01DFA9A4 CBNZ W8, 0x1DFA9B0
	0x01DFA9A8 BL 0x1C16DFC
	0x01DFA9AC LDR X0, [X21]
	0x01DFA9B0 LDR X11, [X0 + 0xB8]
	0x01DFA9B4 ADD X8, X11, 0x8
	0x01DFA9B8 ADD X9, X11, 0xC
	0x01DFA9BC ADD X10, X11, 0x10
	0x01DFA9C0 ADD X11, X11, 0x14
	0x01DFA9C4 B 0x1DFAA00
	0x01DFA9C8 FCMP S9, 0x0
	0x01DFA9CC B.LE 0x1DFAA60
	0x01DFA9D0 ADRP X21, 0x22FE000
	0x01DFA9D4 LDR X21, [X21 + 0xC88]
	0x01DFA9D8 LDR X0, [X21]
	0x01DFA9DC LDR W8, [X0 + 0xE0]
	0x01DFA9E0 CBNZ W8, 0x1DFA9EC
	0x01DFA9E4 BL 0x1C16DFC
	0x01DFA9E8 LDR X0, [X21]
	0x01DFA9EC LDR X11, [X0 + 0xB8]
	0x01DFA9F0 ADD X8, X11, 0x18
	0x01DFA9F4 ADD X9, X11, 0x1C
	0x01DFA9F8 ADD X10, X11, 0x20
	0x01DFA9FC ADD X11, X11, 0x24
	0x01DFAA00 LDR V2, [X10]
	0x01DFAA04 LDR V1, [X9]
	0x01DFAA08 LDR V0, [X8]
	0x01DFAA0C LDR V3, [X11]
	0x01DFAA10 B 0x1DFAA70
	0x01DFAA14 MOV X0, X20

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X8, -19988480
	007 Move X9, -19984384
	008 Move V1, [X8+3984]
	009 Move V2, [X9+48]
	010 Move X19, X0
	011 Move S0, 1
	012 Move S3, 1
	013 Move X0, X31
	014 Call Gizmos.set_color, X0
	015 Move X0, [X19+64]
	016 Compare X0, 0
	017 JumpIfEqual {51}
	018 Move X1, X31
	019 Call Transform.get_position, X0
	020 Move X8, -19984384
	021 Move V3, [X8+188]
	022 Move X0, X31
	023 Call Gizmos.DrawWireSphere, X0, V0
	024 Move X0, [X19+56]
	025 Compare X0, 0
	026 JumpIfEqual {51}
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X0, [X19+64]
	030 Compare X0, 0
	031 JumpIfEqual {51}
	032 Move X1, X31
	033 Move V8, V0
	034 Move V9, V1
	035 Move V10, V2
	036 Call Transform.get_position, X0
	037 Move V3, V0
	038 Move V4, V1
	039 Move V0, V8
	040 Move V1, V9
	041 Move X30, [X31+32]
	042 Move X19, [X31+40]
	043 Move D9, [X31+16]
	044 Move D8, [X31+24]
	045 Move V5, V2
	046 Move V2, V10
	047 Move X0, X31
	048 Move V10, [X31+48]
	049 Call Gizmos.DrawLine, X0, X1
	050 Return 
	051 Call 0x1C17F20

Method: System.Void OnFootStepEvent()

Disassembly:
	0x01DFAA18 MOV X1, X31
	0x01DFAA1C STRH W31, [X20 + 0x98]
	0x01DFAA20 BL 0x3C32E90
	0x01DFAA24 CBZ X0, 0x1DFAB20
	0x01DFAA28 LDP S1, S2, [X20 + 0xA0]
	0x01DFAA2C LDR V0, [X20 + 0x9C]
	0x01DFAA30 MOV X1, X31
	0x01DFAA34 BL 0x3C3EC04
	0x01DFAA38 FMOV S0, W31
	0x01DFAA3C FMOV S1, W31
	0x01DFAA40 FMOV S2, W31
	0x01DFAA44 FMOV S3, 1
	0x01DFAA48 MOV X0, X20
	0x01DFAA4C MOV X1, X31
	0x01DFAA50 BL 0x1DFA11C
	0x01DFAA54 MOV W0, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, [X0+120]
	005 Move X1, X31
	006 Move X19, X0
	007 Call Component.get_transform, X0
	008 Compare X0, 0
	009 JumpIfEqual {20}
	010 Move X1, X31
	011 Call Transform.get_position, X0
	012 Move V3, [X19+128]
	013 Move X0, X20
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X1, X31
	017 Move X30, [X31+32]
	018 Call SFXManager.PlaySFX, X0, X1, V0
	019 Return 
	020 Call 0x1C17F20

Method: System.Void SetFootstepVolume(System.Single volume)

Disassembly:
	0x01DFAA58 STR X31, [X20 + 0x88]
	0x01DFAA5C B 0x1DFAB08

ISIL:
	001 Move [X0+128], S0
	002 Return 

Method: System.Boolean get_isMove()

Disassembly:
	0x01DFAA60 FMOV S3, 1
	0x01DFAA64 FMOV S0, W31
	0x01DFAA68 FMOV S1, W31
	0x01DFAA6C FMOV S2, W31
	0x01DFAA70 FCMP S9, 0x0
	0x01DFAA74 CSET W21, GT
	0x01DFAA78 FCMP S8, 0x0
	0x01DFAA7C MOV X0, X20
	0x01DFAA80 MOV X1, X31
	0x01DFAA84 CSET W22, LE
	0x01DFAA88 BL 0x1DFA11C
	0x01DFAA8C AND W1, W21, W22, 0x0
	0x01DFAA90 MOV X0, X20
	0x01DFAA94 MOV X2, X31
	0x01DFAA98 BL 0x1DFA440
	0x01DFAA9C MOV X0, X20
	0x01DFAAA0 MOV X1, X31
	0x01DFAAA4 BL 0x3C32E90
	0x01DFAAA8 LDP S8, S9, [X20 + 0x9C]
	0x01DFAAAC LDR V10, [X20 + 0xA4]
	0x01DFAAB0 MOV X20, X0
	0x01DFAAB4 MOV X0, X31
	0x01DFAAB8 BL 0x3C30A58
	0x01DFAABC CBZ X20, 0x1DFAB20
	0x01DFAAC0 ADRP X8, 0xFFFFFFFFFECF0000
	0x01DFAAC4 LDR V3, [X8 + 0x200]
	0x01DFAAC8 LDR V4, [X19 + 0x28]
	0x01DFAACC MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25DF000
	006 Move X20, 0x22FF000
	007 Move W8, [X21+3368]
	008 Move X20, [X20+3208]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22FF000
	015 Move X0, [X0+3208]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3368], W8
	019 Move X0, [X20]
	020 Move X19, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Compare X19, 0
	026 JumpIfEqual {38}
	027 Move X8, [X20]
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X2, X31
	032 Move X8, [X8+184]
	033 Move W1, [X8+40]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call Animator.GetBool, X0, X1
	037 Return X0
	038 Call 0x1C17F20

Method: System.Void SetHeadLookAt(System.Boolean isHeadLookAt)

Disassembly:
	0x01DFAAD0 MOV X1, X31
	0x01DFAAD4 FMUL S2, S2, S3
	0x01DFAAD8 FMUL S1, S1, S3
	0x01DFAADC FMUL S0, S0, S3
	0x01DFAAE0 FMUL S2, S4, S2
	0x01DFAAE4 FMUL S1, S4, S1
	0x01DFAAE8 FMUL S0, S4, S0
	0x01DFAAEC FADD S2, S10, S2
	0x01DFAAF0 FADD S1, S9, S1
	0x01DFAAF4 FADD S0, S8, S0
	0x01DFAAF8 BL 0x3C3EC04
	0x01DFAAFC MOVZ W0, 0x1
	0x01DFAB00 STR X31, [X19 + 0x18]
	0x01DFAB04 STR W0, [X19 + 0x10]
	0x01DFAB08 LDP X20, X19, [X31 + 0x30]
	0x01DFAB0C LDP X22, X21, [X31 + 0x20]
	0x01DFAB10 LDR X30, [X31 + 0x18]
	0x01DFAB14 LDP D9, D8, [X31 + 0x8]
	0x01DFAB18 LDR V10, [X31], #0x40
	0x01DFAB1C RET
	0x01DFAB20 BL 0x1C16F20
	0x01DFAB24 LDR X0, [X0 + 0x18]
	0x01DFAB28 RET

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 And W8, W1, 1
	004 Move [X0+84], W8
	005 Move TEMP, X1
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfEqual {33}
	009 Move W8, [X0+168]
	010 Move X19, X0
	011 Compare W8, 0
	012 JumpIfEqual {33}
	013 Move X0, [X19+56]
	014 Compare X0, 0
	015 JumpIfEqual {36}
	016 Move S2, [X19+96]
	017 Move S3, [X19+100]
	018 Move S0, [X19+88]
	019 Move S1, [X19+92]
	020 Move X1, X31
	021 Call Transform.set_rotation, X0, X1
	022 Move X0, [X19+64]
	023 Compare X0, 0
	024 JumpIfEqual {36}
	025 Move S1, [X19+108]
	026 Move S2, [X19+112]
	027 Move V0, [X19+104]
	028 Move X1, X31
	029 Move X30, [X31+16]
	030 Move X19, [X31+24]
	031 Call Transform.set_position, X0, X1
	032 Return 
	033 Move X30, [X31+16]
	034 Move X19, [X31+24]
	035 Return 
	036 Call 0x1C17F20

Method: System.Void SetHeadLookAtPosition(UnityEngine.Vector3 position)

Disassembly:
	0x01DFAB2C STP X30, X19, [X31 - 0x10]!
	0x01DFAB30 ADRP X0, 0x22F9000
	0x01DFAB34 LDR X0, [X0 + 0xB40]
	0x01DFAB38 BL 0x1C16D08
	0x01DFAB3C BL 0x1C16F10
	0x01DFAB40 MOV X1, X31
	0x01DFAB44 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+64]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Transform.set_position, X0, X1
	008 Return 
	009 Call 0x1C17F20

Method: System.Void Initialize()

Disassembly:
	0x01DFAB48 BL 0x3380310
	0x01DFAB4C ADRP X0, 0x22FF000
	0x01DFAB50 LDR X0, [X0 + 0x508]
	0x01DFAB54 BL 0x1C16D08
	0x01DFAB58 MOV X1, X0
	0x01DFAB5C MOV X0, X19
	0x01DFAB60 BL 0x1C16DEC
	0x01DFAB64 LDR X0, [X0 + 0x18]
	0x01DFAB68 RET
	0x01DFAB6C STP X30, X19, [X31 - 0x10]!
	0x01DFAB70 LDR X8, [X0 + 0x50]
	0x01DFAB74 CBZ X8, 0x1DFAB84
	0x01DFAB78 LDR W0, [X8 + 0x3C]
	0x01DFAB7C LDP X30, X19, [X31], #0x10
	0x01DFAB80 RET
	0x01DFAB84 ADRP X0, 0x22F9000
	0x01DFAB88 LDR X0, [X0 + 0x5B0]
	0x01DFAB8C BL 0x1C16D08
	0x01DFAB90 BL 0x1C16F10
	0x01DFAB94 MOV X19, X0
	0x01DFAB98 ADRP X0, 0x22FF000
	0x01DFAB9C LDR X0, [X0 + 0x510]
	0x01DFABA0 BL 0x1C16D08
	0x01DFABA4 MOV X1, X0
	0x01DFABA8 MOV X0, X19
	0x01DFABAC MOV X2, X31
	0x01DFABB0 BL 0x337DF1C
	0x01DFABB4 ADRP X0, 0x22FF000
	0x01DFABB8 LDR X0, [X0 + 0x518]
	0x01DFABBC BL 0x1C16D08
	0x01DFABC0 MOV X1, X0
	0x01DFABC4 MOV X0, X19
	0x01DFABC8 BL 0x1C16DEC
	0x01DFABCC STP X30, X19, [X31 - 0x10]!
	0x01DFABD0 LDR X8, [X0 + 0x50]
	0x01DFABD4 CBZ X8, 0x1DFABE4
	0x01DFABD8 STR W1, [X8 + 0x3C]
	0x01DFABDC LDP X30, X19, [X31], #0x10
	0x01DFABE0 RET
	0x01DFABE4 ADRP X0, 0x22F9000
	0x01DFABE8 LDR X0, [X0 + 0x5B0]
	0x01DFABEC BL 0x1C16D08
	0x01DFABF0 BL 0x1C16F10
	0x01DFABF4 MOV X19, X0
	0x01DFABF8 ADRP X0, 0x22FF000
	0x01DFABFC LDR X0, [X0 + 0x510]
	0x01DFAC00 BL 0x1C16D08
	0x01DFAC04 MOV X1, X0
	0x01DFAC08 MOV X0, X19
	0x01DFAC0C MOV X2, X31
	0x01DFAC10 BL 0x337DF1C
	0x01DFAC14 ADRP X0, 0x22FF000
	0x01DFAC18 LDR X0, [X0 + 0x520]
	0x01DFAC1C BL 0x1C16D08
	0x01DFAC20 MOV X1, X0
	0x01DFAC24 MOV X0, X19
	0x01DFAC28 BL 0x1C16DEC
	0x01DFAC2C STP X30, X19, [X31 - 0x10]!
	0x01DFAC30 MOV X19, X0
	0x01DFAC34 LDR X0, [X0 + 0x220]
	0x01DFAC38 CBZ X0, 0x1DFAD00
	0x01DFAC3C MOV X1, X31
	0x01DFAC40 BL 0x3BFCC80
	0x01DFAC44 TBZ X0, 0x0, 0x1DFAC58
	0x01DFAC48 LDR X0, [X19 + 0x220]
	0x01DFAC4C CBZ X0, 0x1DFAD00
	0x01DFAC50 MOV X1, X31
	0x01DFAC54 BL 0x3BFCC04
	0x01DFAC58 MOV X0, X19
	0x01DFAC5C BL 0x1DFAB6C
	0x01DFAC60 SUB W8, W0, 0x1
	0x01DFAC64 CMP W8, 0x4
	0x01DFAC68 B.HI 0x1DFACDC
	0x01DFAC6C ADRP X9, 0xFFFFFFFFFED33000
	0x01DFAC70 ADD X9, X9, 0x976
	0x01DFAC74 ADR X10, 0x10
	0x01DFAC78 LDRB W11, [X9, X8, LSL]
	0x01DFAC7C ADD X10, X10, X11, 0x2, LSL
	0x01DFAC80 BR X10
	0x01DFAC84 LDR X0, [X19 + 0xC8]
	0x01DFAC88 CBZ X0, 0x1DFAD00

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0x25DF000
	009 Move W8, [X19+3369]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x22FF000
	016 Move X0, [X0+3416]
	017 Call 0x1C17CF4
	018 Move X0, 0x22FF000
	019 Move X0, [X0+3208]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+3369], W8
	023 Move X19, [X20+48]
	024 Compare X19, 0
	025 JumpIfEqual {29}
	026 Move X8, [X19+24]
	027 Compare X8, 0
	028 JumpIfNotEqual {38}
	029 Move X8, 0x22FF000
	030 Move X8, [X8+3416]
	031 Move X0, X20
	032 Move X1, [X8]
	033 Call 0x21A553C, X0
	034 Move X19, X0
	035 Move [X20+48], X0
	036 Compare X0, 0
	037 JumpIfEqual {91}
	038 Move W8, [X19+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X23, 0x22FF000
	041 Move X23, [X23+3208]
	042 Move W22, W31
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Add X8, X19, W22
	045 Move X0, [X8+32]
	046 Compare X0, 0
	047 JumpIfEqual {91}
	048 Move X1, X31
	049 Call Renderer.get_materials, X0
	050 Compare X0, 0
	051 JumpIfEqual {91}
	052 Move W8, [X0+24]
	053 Move X20, X0
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W24, W31
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X0, [X23]
	058 Add X8, X20, W24
	059 Move X21, [X8+32]
	060 Move W9, [X0+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Compare X21, 0
	065 JumpIfEqual {91}
	066 Move X8, [X23]
	067 Move S0, W31
	068 Move S1, W31
	069 Move S2, W31
	070 Move X8, [X8+184]
	071 Move S3, 1
	072 Move X0, X21
	073 Move X2, X31
	074 Move W1, [X8]
	075 Call Material.SetColor, X0, X1, X2
	076 Move W8, [X20+24]
	077 Add W24, W24, 1
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move W8, [X19+24]
	080 Add W22, W22, 1
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X20, [X31+48]
	083 Move X19, [X31+56]
	084 Move X22, [X31+32]
	085 Move X21, [X31+40]
	086 Move X24, [X31+16]
	087 Move X23, [X31+24]
	088 Move X30, [X31+64]
	089 Return 
	090 Call 0x1C17F28
	091 Call 0x1C17F20

Method: System.Void SetIdle()

Disassembly:
	0x01DFAC8C LDR X8, [X0]
	0x01DFAC90 LDP X2, X1, [X8 + 0x1D8]
	0x01DFAC94 B 0x1DFACF8
	0x01DFAC98 LDR X0, [X19 + 0xC8]
	0x01DFAC9C CBZ X0, 0x1DFAD00
	0x01DFACA0 LDR X8, [X0]
	0x01DFACA4 LDR X2, [X8 + 0x208]
	0x01DFACA8 LDR X1, [X8 + 0x210]
	0x01DFACAC B 0x1DFACF8
	0x01DFACB0 LDR X0, [X19 + 0xC8]
	0x01DFACB4 CBZ X0, 0x1DFAD00
	0x01DFACB8 LDR X8, [X0]
	0x01DFACBC FMOV S0, 1
	0x01DFACC0 LDP X9, X1, [X8 + 0x1F8]
	0x01DFACC4 BLR X9
	0x01DFACC8 LDR X0, [X19 + 0x220]
	0x01DFACCC CBZ X0, 0x1DFAD00
	0x01DFACD0 MOV X1, X31
	0x01DFACD4 LDP X30, X19, [X31], #0x10
	0x01DFACD8 B 0x3BFCAC0
	0x01DFACDC LDP X30, X19, [X31], #0x10
	0x01DFACE0 RET
	0x01DFACE4 LDR X0, [X19 + 0xC8]
	0x01DFACE8 CBZ X0, 0x1DFAD00
	0x01DFACEC LDR X8, [X0]
	0x01DFACF0 LDR X2, [X8 + 0x248]
	0x01DFACF4 LDR X1, [X8 + 0x250]
	0x01DFACF8 LDP X30, X19, [X31], #0x10
	0x01DFACFC BR X2
	0x01DFAD00 BL 0x1C16F20
	0x01DFAD04 STP X30, X19, [X31 - 0x10]!
	0x01DFAD08 MOV X1, X31
	0x01DFAD0C MOV X19, X0
	0x01DFAD10 BL 0x1DE8598
	0x01DFAD14 LDR X0, [X19 + 0xE8]
	0x01DFAD18 CBZ X0, 0x1DFAD88
	0x01DFAD1C MOVZ W1, 0x1
	0x01DFAD20 MOV X2, X31
	0x01DFAD24 BL 0x3BE1A80
	0x01DFAD28 LDR X0, [X19 + 0xE8]
	0x01DFAD2C CBZ X0, 0x1DFAD88
	0x01DFAD30 MOVZ W1, 0x1
	0x01DFAD34 MOV X2, X31
	0x01DFAD38 BL 0x3BE1AC4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25DF000
	006 Move X21, 0x22FF000
	007 Move W8, [X20+3370]
	008 Move X21, [X21+3208]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22FF000
	015 Move X0, [X0+3208]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3370], W8
	019 Move X0, [X21]
	020 Move X20, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Compare X20, 0
	026 JumpIfEqual {56}
	027 Move X8, [X21]
	028 Move X0, X20
	029 Move X2, X31
	030 Move X8, [X8+184]
	031 Move W1, [X8+72]
	032 Call Animator.SetTrigger, X0, X1
	033 Move X0, [X19+32]
	034 Compare X0, 0
	035 JumpIfEqual {56}
	036 Move X8, [X21]
	037 Move W2, W31
	038 Move X3, X31
	039 Move X8, [X8+184]
	040 Move W1, [X8+40]
	041 Call Animator.SetBool, X0, X1, X2
	042 Move X0, [X19+32]
	043 Compare X0, 0
	044 JumpIfEqual {56}
	045 Move X8, [X21]
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move W2, W31
	049 Move X3, X31
	050 Move X8, [X8+184]
	051 Move W1, [X8+44]
	052 Move X30, [X31+32]
	053 Move X21, [X31+40]
	054 Call Animator.SetBool, X0, X1, X2
	055 Return 
	056 Call 0x1C17F20

Method: System.Void SetWalk(System.Single speed = 1)

Disassembly:
	0x01DFAD3C LDR X8, [X19 + 0xC0]
	0x01DFAD40 CBZ X8, 0x1DFAD88
	0x01DFAD44 LDR X8, [X8 + 0x30]
	0x01DFAD48 CBZ X8, 0x1DFAD88
	0x01DFAD4C LDR W9, [X8 + 0x18]
	0x01DFAD50 CBZ W9, 0x1DFAD8C
	0x01DFAD54 LDR X0, [X19 + 0xE8]
	0x01DFAD58 CBZ X0, 0x1DFAD88
	0x01DFAD5C LDR V0, [X8 + 0x20]
	0x01DFAD60 MOV X1, X31
	0x01DFAD64 BL 0x3BE19E8
	0x01DFAD68 LDR X0, [X19 + 0xE8]
	0x01DFAD6C CBZ X0, 0x1DFAD88
	0x01DFAD70 MOV W1, W31
	0x01DFAD74 MOV X2, X31
	0x01DFAD78 BL 0x3BE17B4
	0x01DFAD7C MOV X0, X19
	0x01DFAD80 LDP X30, X19, [X31], #0x10
	0x01DFAD84 B 0x1DFAD90
	0x01DFAD88 BL 0x1C16F20
	0x01DFAD8C BL 0x1C16F28
	0x01DFAD90 STP X30, X19, [X31 - 0x10]!
	0x01DFAD94 MOVZ W1, 0x1
	0x01DFAD98 MOV X19, X0
	0x01DFAD9C BL 0x1DFABCC
	0x01DFADA0 MOV X0, X19
	0x01DFADA4 BL 0x1DFB0BC
	0x01DFADA8 MOV X0, X19
	0x01DFADAC BL 0x1DFADFC
	0x01DFADB0 ADD X8, X19, 0x1F4
	0x01DFADB4 LDR W9, [X19 + 0x1FC]
	0x01DFADB8 LDR X8, [X8]
	0x01DFADBC LDR X0, [X19 + 0xE8]
	0x01DFADC0 STR W9, [X19 + 0x1C8]
	0x01DFADC4 STR X8, [X19 + 0x1C0]
	0x01DFADC8 CBZ X0, 0x1DFADF8
	0x01DFADCC LDR V2, [X19 + 0x1F0]
	0x01DFADD0 LDR V1, [X19 + 0x1EC]
	0x01DFADD4 LDR V0, [X19 + 0x1E8]
	0x01DFADD8 MOV X1, X31
	0x01DFADDC BL 0x3BE13F8
	0x01DFADE0 LDR X0, [X19 + 0xE8]
	0x01DFADE4 CBZ X0, 0x1DFADF8
	0x01DFADE8 MOV W1, W31
	0x01DFADEC MOV X2, X31
	0x01DFADF0 LDP X30, X19, [X31], #0x10
	0x01DFADF4 B 0x3BE17B4
	0x01DFADF8 BL 0x1C16F20
	0x01DFADFC SUB X31, X31, 0xF0
	0x01DFAE00 STR D14, [X31 + 0x60]
	0x01DFAE04 STP D13, D12, [X31 + 0x68]
	0x01DFAE08 STP D11, D10, [X31 + 0x78]
	0x01DFAE0C STP D9, D8, [X31 + 0x88]
	0x01DFAE10 STR X30, [X31 + 0x98]
	0x01DFAE14 STP X28, X27, [X31 + 0xA0]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x25DF000
	007 Move X21, 0x22FF000
	008 Move W8, [X20+3371]
	009 Move X21, [X21+3208]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x22FF000
	017 Move X0, [X0+3208]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+3371], W8
	021 Move X0, [X21]
	022 Move X20, [X19+32]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Compare X20, 0
	028 JumpIfEqual {68}
	029 Move X8, [X21]
	030 Move W2, 1
	031 Move X0, X20
	032 Move X3, X31
	033 Move X8, [X8+184]
	034 Move W1, [X8+40]
	035 Call Animator.SetBool, X0, X1, X2
	036 Move X0, [X19+32]
	037 Compare X0, 0
	038 JumpIfEqual {68}
	039 Move X8, [X21]
	040 Move W2, W31
	041 Move X3, X31
	042 Move X8, [X8+184]
	043 Move W1, [X8+44]
	044 Call Animator.SetBool, X0, X1, X2
	045 Move X0, [X19+32]
	046 Compare X0, 0
	047 JumpIfEqual {68}
	048 Move X8, [X21]
	049 Move V0, V8
	050 Move X2, X31
	051 Move X8, [X8+184]
	052 Move W1, [X8+48]
	053 Call Animator.SetFloat, X0, X1, V0
	054 Move X0, [X19+32]
	055 Compare X0, 0
	056 JumpIfEqual {68}
	057 Move X8, [X21]
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X30, [X31+16]
	061 Move X21, [X31+24]
	062 Move X2, X31
	063 Move X8, [X8+184]
	064 Move W1, [X8+72]
	065 Move V8, [X31+48]
	066 Call Animator.SetTrigger, X0, X1
	067 Return 
	068 Call 0x1C17F20

Method: System.Void SetRun(System.Single speed = 1)

Disassembly:
	0x01DFAE18 STP X26, X25, [X31 + 0xB0]
	0x01DFAE1C STP X24, X23, [X31 + 0xC0]
	0x01DFAE20 STP X22, X21, [X31 + 0xD0]
	0x01DFAE24 STP X20, X19, [X31 + 0xE0]
	0x01DFAE28 ADRP X20, 0x25DE000
	0x01DFAE2C LDRB W8, [X20 + 0xD37]
	0x01DFAE30 MOV X19, X0
	0x01DFAE34 TBNZ X8, 0x0, 0x1DFAE64
	0x01DFAE38 ADRP X0, 0x22FF000
	0x01DFAE3C LDR X0, [X0 + 0x528]
	0x01DFAE40 BL 0x1C16CF4
	0x01DFAE44 ADRP X0, 0x22F9000
	0x01DFAE48 LDR X0, [X0 + 0x598]
	0x01DFAE4C BL 0x1C16CF4
	0x01DFAE50 ADRP X0, 0x22F9000
	0x01DFAE54 LDR X0, [X0 + 0x5F8]
	0x01DFAE58 BL 0x1C16CF4
	0x01DFAE5C MOVZ W8, 0x1
	0x01DFAE60 STRB W8, [X20 + 0xD37]
	0x01DFAE64 STR X31, [X31 + 0x58]
	0x01DFAE68 LDR X0, [X19 + 0xD0]
	0x01DFAE6C CBZ X0, 0x1DFB0B4
	0x01DFAE70 ADRP X20, 0x22F9000
	0x01DFAE74 LDR X20, [X20 + 0x5F8]
	0x01DFAE78 MOV X1, X31
	0x01DFAE7C BL 0x3C3F58C
	0x01DFAE80 LDR W0, [X19 + 0x210]
	0x01DFAE84 MOV X1, X31
	0x01DFAE88 MOV V8.16B, V0.16B
	0x01DFAE8C MOV V9.16B, V1.16B
	0x01DFAE90 MOV V10.16B, V2.16B
	0x01DFAE94 BL 0x3C35CB8
	0x01DFAE98 LDR X8, [X20]
	0x01DFAE9C MOV W20, W0
	0x01DFAEA0 LDR W9, [X8 + 0xE0]
	0x01DFAEA4 CBNZ W9, 0x1DFAEB0
	0x01DFAEA8 MOV X0, X8
	0x01DFAEAC BL 0x1C16DFC
	0x01DFAEB0 FMOV S3, 0.5
	0x01DFAEB4 MOV V0.16B, V8.16B
	0x01DFAEB8 MOV V1.16B, V9.16B
	0x01DFAEBC MOV V2.16B, V10.16B
	0x01DFAEC0 MOV W0, W20
	0x01DFAEC4 MOV X1, X31
	0x01DFAEC8 BL 0x3C8D090
	0x01DFAECC CBZ X0, 0x1DFB0B4
	0x01DFAED0 LDR W8, [X0 + 0x18]
	0x01DFAED4 ADRP X24, 0x22F9000
	0x01DFAED8 LDR X24, [X24 + 0x598]
	0x01DFAEDC MOV X21, X0
	0x01DFAEE0 CMP W8, 0x1
	0x01DFAEE4 B.LT 0x1DFB018
	0x01DFAEE8 ADRP X26, 0x22FF000
	0x01DFAEEC ADRP X22, 0x22F9000
	0x01DFAEF0 LDR X26, [X26 + 0x528]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x25DF000
	007 Move X21, 0x22FF000
	008 Move W8, [X20+3372]
	009 Move X21, [X21+3208]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x22FF000
	017 Move X0, [X0+3208]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+3372], W8
	021 Move X0, [X21]
	022 Move X20, [X19+32]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Compare X20, 0
	028 JumpIfEqual {68}
	029 Move X8, [X21]
	030 Move W2, 1
	031 Move X0, X20
	032 Move X3, X31
	033 Move X8, [X8+184]
	034 Move W1, [X8+40]
	035 Call Animator.SetBool, X0, X1, X2
	036 Move X0, [X19+32]
	037 Compare X0, 0
	038 JumpIfEqual {68}
	039 Move X8, [X21]
	040 Move W2, 1
	041 Move X3, X31
	042 Move X8, [X8+184]
	043 Move W1, [X8+44]
	044 Call Animator.SetBool, X0, X1, X2
	045 Move X0, [X19+32]
	046 Compare X0, 0
	047 JumpIfEqual {68}
	048 Move X8, [X21]
	049 Move V0, V8
	050 Move X2, X31
	051 Move X8, [X8+184]
	052 Move W1, [X8+52]
	053 Call Animator.SetFloat, X0, X1, V0
	054 Move X0, [X19+32]
	055 Compare X0, 0
	056 JumpIfEqual {68}
	057 Move X8, [X21]
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X30, [X31+16]
	061 Move X21, [X31+24]
	062 Move X2, X31
	063 Move X8, [X8+184]
	064 Move W1, [X8+72]
	065 Move V8, [X31+48]
	066 Call Animator.SetTrigger, X0, X1
	067 Return 
	068 Call 0x1C17F20

Method: System.Void SetAnticipation()

Disassembly:
	0x01DFAEF4 LDR X22, [X22 + 0x5A8]
	0x01DFAEF8 MOVN W9, 0x80800000
	0x01DFAEFC MOV W25, W31
	0x01DFAF00 MOV X20, X31
	0x01DFAF04 ADRP X27, 0x25DE000
	0x01DFAF08 FMOV S14, W9
	0x01DFAF0C MOVZ W28, 0x1
	0x01DFAF10 CMP W25, W8
	0x01DFAF14 B.CS 0x1DFB0B8
	0x01DFAF18 ADD X8, X21, W25, 0x3, SXTW
	0x01DFAF1C LDR X0, [X8 + 0x20]
	0x01DFAF20 CBZ X0, 0x1DFB0B4
	0x01DFAF24 LDR X2, [X26]
	0x01DFAF28 ADD X1, X31, 0x58
	0x01DFAF2C BL 0x21A4990
	0x01DFAF30 TBZ X0, 0x0, 0x1DFB004
	0x01DFAF34 LDR X0, [X24]
	0x01DFAF38 LDR X23, [X19 + 0x160]
	0x01DFAF3C LDR W8, [X0 + 0xE0]
	0x01DFAF40 CBNZ W8, 0x1DFAF48
	0x01DFAF44 BL 0x1C16DFC
	0x01DFAF48 MOV X0, X23
	0x01DFAF4C MOV X1, X31
	0x01DFAF50 MOV X2, X31
	0x01DFAF54 BL 0x3C354F8
	0x01DFAF58 TBZ X0, 0x0, 0x1DFB020
	0x01DFAF5C LDR X0, [X19 + 0x160]
	0x01DFAF60 CBZ X0, 0x1DFB0B4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25DF000
	006 Move X20, 0x22FF000
	007 Move W8, [X21+3373]
	008 Move X20, [X20+3208]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22FF000
	015 Move X0, [X0+3208]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3373], W8
	019 Move X0, [X20]
	020 Move X19, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Compare X19, 0
	026 JumpIfEqual {38}
	027 Move X8, [X20]
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X2, X31
	032 Move X8, [X8+184]
	033 Move W1, [X8+56]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call Animator.SetTrigger, X0, X1
	037 Return 
	038 Call 0x1C17F20

Method: System.Void SetAttack()

Disassembly:
	0x01DFAF64 MOV X1, X31
	0x01DFAF68 BL 0x3C32E90
	0x01DFAF6C CBZ X0, 0x1DFB0B4
	0x01DFAF70 MOV X1, X31
	0x01DFAF74 BL 0x3C3F58C
	0x01DFAF78 LDR X0, [X31 + 0x58]
	0x01DFAF7C CBZ X0, 0x1DFB0B4
	0x01DFAF80 MOV X1, X31
	0x01DFAF84 MOV V8.16B, V0.16B
	0x01DFAF88 MOV V9.16B, V1.16B
	0x01DFAF8C MOV V10.16B, V2.16B
	0x01DFAF90 BL 0x3C32E90
	0x01DFAF94 CBZ X0, 0x1DFB0B4
	0x01DFAF98 MOV X1, X31
	0x01DFAF9C BL 0x3C3F58C
	0x01DFAFA0 LDRB W8, [X27 + 0x85C]
	0x01DFAFA4 MOV V11.16B, V0.16B
	0x01DFAFA8 MOV V12.16B, V1.16B
	0x01DFAFAC MOV V13.16B, V2.16B
	0x01DFAFB0 CBNZ W8, 0x1DFAFC0
	0x01DFAFB4 MOV X0, X22
	0x01DFAFB8 BL 0x1C16CF4
	0x01DFAFBC STRB W28, [X27 + 0x85C]
	0x01DFAFC0 LDR X0, [X22]
	0x01DFAFC4 LDR W8, [X0 + 0xE0]
	0x01DFAFC8 CBNZ W8, 0x1DFAFD0
	0x01DFAFCC BL 0x1C16DFC
	0x01DFAFD0 FSUB S0, S8, S11

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25DF000
	006 Move X20, 0x22FF000
	007 Move W8, [X21+3374]
	008 Move X20, [X20+3208]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22FF000
	015 Move X0, [X0+3208]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3374], W8
	019 Move X0, [X20]
	020 Move X19, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Compare X19, 0
	026 JumpIfEqual {38}
	027 Move X8, [X20]
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X2, X31
	032 Move X8, [X8+184]
	033 Move W1, [X8+60]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call Animator.SetTrigger, X0, X1
	037 Return 
	038 Call 0x1C17F20

Method: System.Void SetHit()

Disassembly:
	0x01DFAFD4 FSUB S1, S9, S12
	0x01DFAFD8 FSUB S2, S10, S13
	0x01DFAFDC FMUL S0, S0, S0
	0x01DFAFE0 FMUL S1, S1, S1
	0x01DFAFE4 FADD S0, S0, S1
	0x01DFAFE8 FMUL S1, S2, S2
	0x01DFAFEC FADD S0, S1, S0
	0x01DFAFF0 FSQRT S0, S0
	0x01DFAFF4 FCMP S0, S14
	0x01DFAFF8 B.PL 0x1DFB004
	0x01DFAFFC LDR X20, [X31 + 0x58]
	0x01DFB000 MOV V14.16B, V0.16B
	0x01DFB004 LDR W8, [X21 + 0x18]
	0x01DFB008 ADD W25, W25, 0x1
	0x01DFB00C CMP W25, W8
	0x01DFB010 B.LT 0x1DFAF10

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+136]
	004 Move W9, 0xCCCD
	005 NotImplemented "Instruction MOVK not yet implemented."
	006 Move [X0+144], W9
	007 Compare X8, 0
	008 JumpIfEqual {12}
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 
	012 Move X19, X0
	013 Call MobView.MobEffectCoroutine, X0
	014 Move X1, X0
	015 Move [X19+136], X0
	016 Move X0, X19
	017 Move X2, X31
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Call MonoBehaviour.StartCoroutine, X0, X1
	021 Return 

Method: System.Void SetStun(System.Boolean isStun, System.Single duration)

Disassembly:
	0x01DFB07C STR X8, [X9 + 0x20]
	0x01DFB080 STP V1, V0, [X9]
	0x01DFB084 LDP X20, X19, [X31 + 0xE0]
	0x01DFB088 LDP X22, X21, [X31 + 0xD0]
	0x01DFB08C LDP X24, X23, [X31 + 0xC0]
	0x01DFB090 LDP X26, X25, [X31 + 0xB0]
	0x01DFB094 LDP X28, X27, [X31 + 0xA0]
	0x01DFB098 LDR X30, [X31 + 0x98]
	0x01DFB09C LDP D9, D8, [X31 + 0x88]
	0x01DFB0A0 LDP D11, D10, [X31 + 0x78]
	0x01DFB0A4 LDP D13, D12, [X31 + 0x68]
	0x01DFB0A8 LDR V14, [X31 + 0x60]
	0x01DFB0AC ADD X31, X31, 0xF0
	0x01DFB0B0 RET
	0x01DFB0B4 BL 0x1C16F20
	0x01DFB0B8 BL 0x1C16F28
	0x01DFB0BC STR X30, [X31 - 0x20]!
	0x01DFB0C0 STP X20, X19, [X31 + 0x10]
	0x01DFB0C4 ADRP X20, 0x25DD000
	0x01DFB0C8 LDRB W8, [X20 + 0xD38]
	0x01DFB0CC MOV X19, X0
	0x01DFB0D0 TBNZ X8, 0x0, 0x1DFB0E8
	0x01DFB0D4 ADRP X0, 0x22FE000
	0x01DFB0D8 LDR X0, [X0 + 0x158]
	0x01DFB0DC BL 0x1C16CF4
	0x01DFB0E0 MOVZ W8, 0x1
	0x01DFB0E4 STRB W8, [X20 + 0xD38]
	0x01DFB0E8 LDR X8, [X19 + 0x1B8]
	0x01DFB0EC CBZ X8, 0x1DFB13C
	0x01DFB0F0 LDP W2, W9, [X8 + 0x18]
	0x01DFB0F4 ADD W9, W9, 0x1
	0x01DFB0F8 CMP W2, 0x1
	0x01DFB0FC STP W31, W9, [X8 + 0x18]
	0x01DFB100 B.LT 0x1DFB114
	0x01DFB104 LDR X0, [X8 + 0x10]
	0x01DFB108 MOV W1, W31
	0x01DFB10C MOV X3, X31
	0x01DFB110 BL 0x339FA34
	0x01DFB114 LDR X8, [X19]
	0x01DFB118 MOV X0, X19

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move TEMP, X1
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {32}
	009 Move X0, X19
	010 Move X1, X31
	011 Move V8, V0
	012 Call Component.get_gameObject, X0
	013 Compare X0, 0
	014 JumpIfEqual {52}
	015 Move X1, X31
	016 Call GameObject.get_activeSelf, X0
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {28}
	021 Move V0, [X19+148]
	022 Move X8, [X19+136]
	023 NotImplemented "Instruction FCMP not yet implemented."
	024 NotImplemented "Instruction FCSEL not yet implemented."
	025 Move [X19+148], S0
	026 Compare X8, 0
	027 JumpIfEqual {41}
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Move V8, [X31+32]
	031 Return 
	032 Move [X19+148], W31
	033 Move X0, X19
	034 Move X30, [X31+16]
	035 Move X19, [X31+24]
	036 Move S0, W31
	037 Move S1, W31
	038 Move S2, W31
	039 Move S3, 1
	040 Move V8, [X31+32]
	041 Move X0, X19
	042 Call MobView.MobEffectCoroutine, X0
	043 Move X1, X0
	044 Move [X19+136], X0
	045 Move X0, X19
	046 Move X30, [X31+16]
	047 Move X19, [X31+24]
	048 Move X2, X31
	049 Move V8, [X31+32]
	050 Call MonoBehaviour.StartCoroutine, X0, X1
	051 Return 
	052 Call 0x1C17F20

Method: System.Void SetSearch()

Disassembly:
	0x01DFB280 ADRP X0, 0x22FD000
	0x01DFB284 LDR X0, [X0 + 0xE88]
	0x01DFB288 BL 0x1C16CF4
	0x01DFB28C ADRP X0, 0x22FD000
	0x01DFB290 LDR X0, [X0 + 0xE90]
	0x01DFB294 BL 0x1C16CF4
	0x01DFB298 ADRP X0, 0x22FD000
	0x01DFB29C LDR X0, [X0 + 0xC70]
	0x01DFB2A0 BL 0x1C16CF4
	0x01DFB2A4 ADRP X0, 0x22FE000
	0x01DFB2A8 LDR X0, [X0 + 0x538]
	0x01DFB2AC BL 0x1C16CF4
	0x01DFB2B0 ADRP X0, 0x22FD000
	0x01DFB2B4 LDR X0, [X0 + 0xC40]
	0x01DFB2B8 BL 0x1C16CF4
	0x01DFB2BC MOVZ W8, 0x1
	0x01DFB2C0 STRB W8, [X20 + 0xD3A]
	0x01DFB2C4 LDR X0, [X23]
	0x01DFB2C8 ADD X20, X19, 0x1B8
	0x01DFB2CC LDR W8, [X0 + 0xE0]
	0x01DFB2D0 CBNZ W8, 0x1DFB2D8
	0x01DFB2D4 BL 0x1C16DFC
	0x01DFB2D8 MOV X0, X19
	0x01DFB2DC MOV X1, X20
	0x01DFB2E0 MOV X2, X31
	0x01DFB2E4 BL 0x1DF8094
	0x01DFB2E8 TBZ X0, 0x0, 0x1DFB5B4
	0x01DFB2EC ADRP X8, 0x22FD000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25DE000
	006 Move X20, 0x22FE000
	007 Move W8, [X21+3375]
	008 Move X20, [X20+3208]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22FE000
	015 Move X0, [X0+3208]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3375], W8
	019 Move X0, [X20]
	020 Move X19, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Compare X19, 0
	026 JumpIfEqual {38}
	027 Move X8, [X20]
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X2, X31
	032 Move X8, [X8+184]
	033 Move W1, [X8+68]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call Animator.SetTrigger, X0, X1
	037 Return 
	038 Call 0x1C17F20

Method: System.Void SetDeath(System.Boolean isDie)

Disassembly:
	0x01DFB2F0 LDR X8, [X8 + 0xE88]
	0x01DFB2F4 ADRP X22, 0x22FE000
	0x01DFB2F8 LDR X21, [X19 + 0x1B8]
	0x01DFB2FC LDR X0, [X8]
	0x01DFB300 LDR X22, [X22 + 0x538]
	0x01DFB304 BL 0x1C16F10
	0x01DFB308 LDR X2, [X22]
	0x01DFB30C MOV X1, X19
	0x01DFB310 MOV X3, X31
	0x01DFB314 MOV X22, X0
	0x01DFB318 BL 0x295A080
	0x01DFB31C CBZ X21, 0x1DFB830
	0x01DFB320 ADRP X8, 0x22FD000
	0x01DFB324 LDR X8, [X8 + 0xE90]
	0x01DFB328 MOV X0, X21
	0x01DFB32C MOV X1, X22
	0x01DFB330 LDR X2, [X8]
	0x01DFB334 BL 0x301DD30
	0x01DFB338 LDR X0, [X20]
	0x01DFB33C CBZ X0, 0x1DFB830
	0x01DFB340 ADRP X8, 0x22FD000
	0x01DFB344 LDR X8, [X8 + 0xC70]
	0x01DFB348 MOV W1, W31
	0x01DFB34C LDR X2, [X8]
	0x01DFB350 BL 0x301BCCC
	0x01DFB354 CBZ X0, 0x1DFB830
	0x01DFB358 MOV X1, X31
	0x01DFB35C BL 0x3C32E90
	0x01DFB360 CBZ X0, 0x1DFB830
	0x01DFB364 MOV X1, X31
	0x01DFB368 BL 0x3C3F58C
	0x01DFB36C ADRP X20, 0x25DD000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x25DE000
	007 Move X21, 0x22FE000
	008 Move W8, [X22+3376]
	009 Move X21, [X21+3208]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x22FE000
	017 Move X0, [X0+3208]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3376], W8
	021 Move X0, [X21]
	022 Move X20, [X20+32]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Compare X20, 0
	028 JumpIfEqual {42}
	029 Move X8, [X21]
	030 And W2, W19, 1
	031 Move X0, X20
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X8, [X8+184]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X3, X31
	038 Move W1, [X8+80]
	039 Move X30, [X31+48]
	040 Call Animator.SetBool, X0, X1, X2
	041 Return 
	042 Call 0x1C17F20

Method: System.Void SetMove(System.Boolean isMove, System.Boolean isRun, System.Single speed)

Disassembly:
	0x01DFB370 LDR V11, [X19 + 0x1E8]
	0x01DFB374 LDR V13, [X19 + 0x1EC]
	0x01DFB378 LDRB W8, [X20 + 0x785]
	0x01DFB37C LDR V14, [X19 + 0x1F0]
	0x01DFB380 MOV V8.16B, V0.16B
	0x01DFB384 MOV V9.16B, V1.16B
	0x01DFB388 MOV V10.16B, V2.16B
	0x01DFB38C CBNZ W8, 0x1DFB3A4
	0x01DFB390 ADRP X0, 0x22F8000
	0x01DFB394 LDR X0, [X0 + 0x5A8]
	0x01DFB398 BL 0x1C16CF4
	0x01DFB39C MOVZ W8, 0x1
	0x01DFB3A0 STRB W8, [X20 + 0x785]
	0x01DFB3A4 ADRP X21, 0x22F8000
	0x01DFB3A8 LDR X21, [X21 + 0x5A8]
	0x01DFB3AC FSUB S12, S8, S11
	0x01DFB3B0 FSUB S9, S9, S13
	0x01DFB3B4 FSUB S8, S10, S14
	0x01DFB3B8 LDR X0, [X21]
	0x01DFB3BC LDR W8, [X0 + 0xE0]
	0x01DFB3C0 CBNZ W8, 0x1DFB3C8
	0x01DFB3C4 BL 0x1C16DFC
	0x01DFB3C8 ADRP X8, 0xFFFFFFFFFECEF000
	0x01DFB3CC FMUL S0, S12, S12
	0x01DFB3D0 FMUL S1, S9, S9
	0x01DFB3D4 LDR V11, [X8 + 0x17C]
	0x01DFB3D8 FADD S0, S0, S1
	0x01DFB3DC FMUL S1, S8, S8
	0x01DFB3E0 FADD S0, S1, S0
	0x01DFB3E4 FSQRT S2, S0
	0x01DFB3E8 FCMP S2, S11
	0x01DFB3EC B.LE 0x1DFB400
	0x01DFB3F0 FDIV S0, S12, S2
	0x01DFB3F4 FDIV S1, S9, S2
	0x01DFB3F8 FDIV S2, S8, S2
	0x01DFB3FC B 0x1DFB438
	0x01DFB400 ADRP X22, 0x25DD000
	0x01DFB404 LDRB W8, [X22 + 0x783]
	0x01DFB408 CBNZ W8, 0x1DFB420
	0x01DFB40C ADRP X0, 0x22F8000
	0x01DFB410 LDR X0, [X0 + 0x5A0]
	0x01DFB414 BL 0x1C16CF4
	0x01DFB418 MOVZ W8, 0x1
	0x01DFB41C STRB W8, [X22 + 0x783]
	0x01DFB420 ADRP X8, 0x22F8000
	0x01DFB424 LDR X8, [X8 + 0x5A0]
	0x01DFB428 LDR X8, [X8]
	0x01DFB42C LDR X8, [X8 + 0xB8]
	0x01DFB430 LDP S0, S1, [X8]
	0x01DFB434 LDR V2, [X8 + 0x8]
	0x01DFB438 LDR X8, [X19 + 0x208]
	0x01DFB43C CBZ X8, 0x1DFB830

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x25DE000
	009 Move X23, 0x22FE000
	010 Move W8, [X22+3377]
	011 Move X23, [X23+3208]
	012 Move V8, V0
	013 Move W20, W2
	014 Move W21, W1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x22FE000
	021 Move X0, [X0+3208]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3377], W8
	025 Move X0, [X23]
	026 Move X22, [X19+32]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Compare X22, 0
	032 JumpIfEqual {66}
	033 Move X8, [X23]
	034 And W2, W21, 1
	035 Move X0, X22
	036 Move X3, X31
	037 Move X8, [X8+184]
	038 Move W1, [X8+40]
	039 Call Animator.SetBool, X0, X1, X2
	040 Move X0, [X19+32]
	041 Compare X0, 0
	042 JumpIfEqual {66}
	043 Move X8, [X23]
	044 And W2, W20, 1
	045 Move X3, X31
	046 Move X8, [X8+184]
	047 Move W1, [X8+44]
	048 Call Animator.SetBool, X0, X1, X2
	049 Move X0, [X19+32]
	050 Compare X0, 0
	051 JumpIfEqual {66}
	052 Move X8, [X23]
	053 Move X20, [X31+48]
	054 Move X19, [X31+56]
	055 Move X22, [X31+32]
	056 Move X21, [X31+40]
	057 Move X30, [X31+16]
	058 Move X23, [X31+24]
	059 Move X8, [X8+184]
	060 Move V0, V8
	061 Move X2, X31
	062 Move W1, [X8+52]
	063 Move V8, [X31+64]
	064 Call Animator.SetFloat, X0, X1, V0
	065 Return 
	066 Call 0x1C17F20

Method: System.Collections.IEnumerator MobEffectCoroutine()

Disassembly:
	0x01DFB014 B 0x1DFB024
	0x01DFB018 MOV X20, X31
	0x01DFB01C B 0x1DFB024
	0x01DFB020 LDR X20, [X31 + 0x58]
	0x01DFB024 LDR X0, [X24]
	0x01DFB028 LDR W8, [X0 + 0xE0]
	0x01DFB02C CBNZ W8, 0x1DFB034
	0x01DFB030 BL 0x1C16DFC
	0x01DFB034 MOV X0, X20
	0x01DFB038 MOV X1, X31
	0x01DFB03C MOV X2, X31
	0x01DFB040 BL 0x3C354F8
	0x01DFB044 TBZ X0, 0x0, 0x1DFB084
	0x01DFB048 CBZ X20, 0x1DFB0B4
	0x01DFB04C ADRP X8, 0xFFFFFFFFFECEF000
	0x01DFB050 LDR V0, [X8 + 0x314]
	0x01DFB054 ADD X8, X31, 0x8
	0x01DFB058 MOV X0, X20
	0x01DFB05C MOV X1, X31
	0x01DFB060 BL 0x1DD5624
	0x01DFB064 LDR X8, [X31 + 0x28]
	0x01DFB068 LDUR V0, [X31 + 0x18]
	0x01DFB06C LDUR V1, [X31 + 0x8]
	0x01DFB070 ADD X9, X19, 0x1E8
	0x01DFB074 STR X8, [X31 + 0x50]
	0x01DFB078 STP V1, V0, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25DE000
	006 Move X21, 0x22FF000
	007 Move W8, [X20+3378]
	008 Move X21, [X21+1176]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22FF000
	015 Move X0, [X0+1176]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3378], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move W1, W31
	022 Move X2, X31
	023 Move X20, X0
	024 Call <MobEffectCoroutine>d__56..ctor, X0, X1
	025 Compare X20, 0
	026 JumpIfEqual {34}
	027 Move [X20+32], X19
	028 Move X0, X20
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return X0
	034 Call 0x1C17F20

Method: System.Void SetColorAdditive(UnityEngine.Color color)

Disassembly:
	0x01DFB11C MOV X1, X31
	0x01DFB120 LDR X9, [X8 + 0x3B8]
	0x01DFB124 LDR X2, [X8 + 0x3C0]
	0x01DFB128 BLR X9
	0x01DFB12C STP X31, X31, [X19 + 0x1A8]
	0x01DFB130 LDP X20, X19, [X31 + 0x10]
	0x01DFB134 LDR X30, [X31], #0x20
	0x01DFB138 RET
	0x01DFB13C BL 0x1C16F20
	0x01DFB140 SUB X31, X31, 0x40
	0x01DFB144 STR X30, [X31 + 0x20]
	0x01DFB148 STP X20, X19, [X31 + 0x30]
	0x01DFB14C ADRP X20, 0x25DD000
	0x01DFB150 LDRB W8, [X20 + 0xD39]
	0x01DFB154 MOV X19, X0
	0x01DFB158 TBNZ X8, 0x0, 0x1DFB170
	0x01DFB15C ADRP X0, 0x22FE000
	0x01DFB160 LDR X0, [X0 + 0x530]
	0x01DFB164 BL 0x1C16CF4
	0x01DFB168 MOVZ W8, 0x1
	0x01DFB16C STRB W8, [X20 + 0xD39]
	0x01DFB170 MOV X0, X19
	0x01DFB174 MOV X1, X31
	0x01DFB178 BL 0x1DE9038
	0x01DFB17C MOV X0, X19
	0x01DFB180 BL 0x1DFAB6C
	0x01DFB184 SUB W8, W0, 0x1
	0x01DFB188 CMP W8, 0x4
	0x01DFB18C B.HI 0x1DFB1E0
	0x01DFB190 ADRP X9, 0xFFFFFFFFFED32000
	0x01DFB194 ADD X9, X9, 0x97B
	0x01DFB198 ADR X10, 0x10
	0x01DFB19C LDRB W11, [X9, X8, LSL]
	0x01DFB1A0 ADD X10, X10, X11, 0x2, LSL
	0x01DFB1A4 BR X10
	0x01DFB1A8 MOV X0, X19
	0x01DFB1AC BL 0x1DFB248
	0x01DFB1B0 B 0x1DFB1E0
	0x01DFB1B4 MOV X0, X19
	0x01DFB1B8 BL 0x1DFB838
	0x01DFB1BC B 0x1DFB1E0
	0x01DFB1C0 MOV X0, X19
	0x01DFB1C4 BL 0x1DFBBC0
	0x01DFB1C8 B 0x1DFB1E0
	0x01DFB1CC MOV X0, X19
	0x01DFB1D0 BL 0x1DFC018
	0x01DFB1D4 B 0x1DFB1E0
	0x01DFB1D8 MOV X0, X19
	0x01DFB1DC BL 0x1DFC068
	0x01DFB1E0 MOV X0, X31
	0x01DFB1E4 BL 0x1DD6AE8
	0x01DFB1E8 TBZ X0, 0x0, 0x1DFB238
	0x01DFB1EC LDR X20, [X19 + 0x198]
	0x01DFB1F0 CBZ X20, 0x1DFB238
	0x01DFB1F4 MOV X0, X19
	0x01DFB1F8 BL 0x1DFAB6C
	0x01DFB1FC ADRP X8, 0x22FE000
	0x01DFB200 LDR X8, [X8 + 0x530]
	0x01DFB204 MOVN X9, 0x0
	0x01DFB208 STR W0, [X31 + 0x18]
	0x01DFB20C ADD X0, X31, 0x8
	0x01DFB210 LDR X8, [X8]
	0x01DFB214 MOV X1, X31
	0x01DFB218 STP X8, X9, [X31 + 0x8]
	0x01DFB21C BL 0x33B162C
	0x01DFB220 LDR X8, [X20 + 0x40]
	0x01DFB224 LDR X9, [X20 + 0x18]
	0x01DFB228 LDR X2, [X20 + 0x28]
	0x01DFB22C MOV X1, X0
	0x01DFB230 MOV X0, X8
	0x01DFB234 BLR X9
	0x01DFB238 LDP X20, X19, [X31 + 0x30]
	0x01DFB23C LDR X30, [X31 + 0x20]
	0x01DFB240 ADD X31, X31, 0x40
	0x01DFB244 RET
	0x01DFB248 SUB X31, X31, 0x80
	0x01DFB24C STP D15, D14, [X31 + 0x10]
	0x01DFB250 STP D13, D12, [X31 + 0x20]
	0x01DFB254 STP D11, D10, [X31 + 0x30]
	0x01DFB258 STP D9, D8, [X31 + 0x40]
	0x01DFB25C STP X30, X23, [X31 + 0x50]
	0x01DFB260 STP X22, X21, [X31 + 0x60]
	0x01DFB264 STP X20, X19, [X31 + 0x70]
	0x01DFB268 ADRP X20, 0x25DD000
	0x01DFB26C ADRP X23, 0x22FD000
	0x01DFB270 LDRB W8, [X20 + 0xD3A]
	0x01DFB274 LDR X23, [X23 + 0xC40]
	0x01DFB278 MOV X19, X0
	0x01DFB27C TBNZ X8, 0x0, 0x1DFB2C4

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X19, 0x25DE000
	013 Move W8, [X19+3379]
	014 Move V8, V3
	015 Move V9, V2
	016 Move V10, V1
	017 Move V11, V0
	018 Move X20, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0x22FE000
	024 Move X0, [X0+3416]
	025 Call 0x1C17CF4
	026 Move X0, 0x22FE000
	027 Move X0, [X0+3208]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X19+3379], W8
	031 Move X19, [X20+48]
	032 Compare X19, 0
	033 JumpIfEqual {37}
	034 Move X8, [X19+24]
	035 Compare X8, 0
	036 JumpIfNotEqual {46}
	037 Move X8, 0x22FE000
	038 Move X8, [X8+3416]
	039 Move X0, X20
	040 Move X1, [X8]
	041 Call 0x21A553C, X0
	042 Move X19, X0
	043 Move [X20+48], X0
	044 Compare X0, 0
	045 JumpIfEqual {103}
	046 Move W8, [X19+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X23, 0x22FE000
	049 Move X23, [X23+3208]
	050 Move W22, W31
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Add X8, X19, W22
	053 Move X0, [X8+32]
	054 Compare X0, 0
	055 JumpIfEqual {103}
	056 Move X1, X31
	057 Call Renderer.get_materials, X0
	058 Compare X0, 0
	059 JumpIfEqual {103}
	060 Move W8, [X0+24]
	061 Move X20, X0
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move W24, W31
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X0, [X23]
	066 Add X8, X20, W24
	067 Move X21, [X8+32]
	068 Move W9, [X0+224]
	069 Compare W9, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Compare X21, 0
	073 JumpIfEqual {103}
	074 Move X8, [X23]
	075 Move X0, X21
	076 Move V0, V11
	077 Move V1, V10
	078 Move X8, [X8+184]
	079 Move V2, V9
	080 Move V3, V8
	081 Move X2, X31
	082 Move W1, [X8]
	083 Call Material.SetColor, X0, X1, X2
	084 Move W8, [X20+24]
	085 Add W24, W24, 1
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move W8, [X19+24]
	088 Add W22, W22, 1
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X20, [X31+80]
	091 Move X19, [X31+88]
	092 Move X22, [X31+64]
	093 Move X21, [X31+72]
	094 Move X24, [X31+48]
	095 Move X23, [X31+56]
	096 Move X30, [X31+32]
	097 Move D9, [X31+16]
	098 Move D8, [X31+24]
	099 Move D11, [X31+96]
	100 Move D10, [X31+104]
	101 Return 
	102 Call 0x1C17F28
	103 Call 0x1C17F20

Method: System.Void SetColorAdditiveFresnel(System.Boolean isFrenel)

Disassembly:
	0x01DFB440 LDR V4, [X19 + 0x1F4]
	0x01DFB444 LDR V5, [X19 + 0x1F8]
	0x01DFB448 LDR V3, [X19 + 0x1FC]
	0x01DFB44C LDR W9, [X8 + 0x18]
	0x01DFB450 FMUL S0, S0, S4
	0x01DFB454 FMUL S1, S1, S5
	0x01DFB458 FMUL S2, S2, S3
	0x01DFB45C FADD S0, S0, S1
	0x01DFB460 FADD S0, S2, S0
	0x01DFB464 FCMP S0, 0x0
	0x01DFB468 B.LE 0x1DFB480
	0x01DFB46C CBZ W9, 0x1DFB834
	0x01DFB470 ADD X9, X8, 0x20
	0x01DFB474 ADD X10, X8, 0x24
	0x01DFB478 ADD X8, X8, 0x28
	0x01DFB47C B 0x1DFB494
	0x01DFB480 CMP W9, 0x1
	0x01DFB484 B.LS 0x1DFB834
	0x01DFB488 ADD X9, X8, 0x2C
	0x01DFB48C ADD X10, X8, 0x30
	0x01DFB490 ADD X8, X8, 0x34
	0x01DFB494 LDR V8, [X8]
	0x01DFB498 LDR V9, [X10]
	0x01DFB49C LDR V10, [X9]
	0x01DFB4A0 LDR V12, [X19 + 0x1E8]
	0x01DFB4A4 LDR V13, [X19 + 0x1EC]
	0x01DFB4A8 LDRB W8, [X20 + 0x785]
	0x01DFB4AC LDR V15, [X19 + 0x1F0]
	0x01DFB4B0 CBNZ W8, 0x1DFB4C8
	0x01DFB4B4 ADRP X0, 0x22F8000
	0x01DFB4B8 LDR X0, [X0 + 0x5A8]
	0x01DFB4BC BL 0x1C16CF4
	0x01DFB4C0 MOVZ W8, 0x1
	0x01DFB4C4 STRB W8, [X20 + 0x785]
	0x01DFB4C8 LDR X0, [X21]
	0x01DFB4CC FSUB S14, S10, S12
	0x01DFB4D0 FSUB S13, S9, S13
	0x01DFB4D4 FSUB S12, S8, S15
	0x01DFB4D8 LDR W8, [X0 + 0xE0]
	0x01DFB4DC CBNZ W8, 0x1DFB4E4
	0x01DFB4E0 BL 0x1C16DFC
	0x01DFB4E4 FMUL S0, S14, S14
	0x01DFB4E8 FMUL S1, S13, S13
	0x01DFB4EC FADD S0, S0, S1
	0x01DFB4F0 FMUL S1, S12, S12
	0x01DFB4F4 FADD S0, S1, S0
	0x01DFB4F8 FSQRT S2, S0
	0x01DFB4FC FCMP S2, S11
	0x01DFB500 B.LE 0x1DFB514
	0x01DFB504 FDIV S0, S14, S2
	0x01DFB508 FDIV S1, S13, S2
	0x01DFB50C FDIV S2, S12, S2
	0x01DFB510 B 0x1DFB54C
	0x01DFB514 ADRP X20, 0x25DD000
	0x01DFB518 LDRB W8, [X20 + 0x783]
	0x01DFB51C CBNZ W8, 0x1DFB534
	0x01DFB520 ADRP X0, 0x22F8000
	0x01DFB524 LDR X0, [X0 + 0x5A0]
	0x01DFB528 BL 0x1C16CF4
	0x01DFB52C MOVZ W8, 0x1
	0x01DFB530 STRB W8, [X20 + 0x783]
	0x01DFB534 ADRP X8, 0x22F8000
	0x01DFB538 LDR X8, [X8 + 0x5A0]
	0x01DFB53C LDR X8, [X8]
	0x01DFB540 LDR X8, [X8 + 0xB8]
	0x01DFB544 LDP S0, S1, [X8]
	0x01DFB548 LDR V2, [X8 + 0x8]
	0x01DFB54C LDR X0, [X19 + 0xE8]
	0x01DFB550 STR S0, [X19 + 0x1C0]
	0x01DFB554 STR S1, [X19 + 0x1C4]
	0x01DFB558 STR S2, [X19 + 0x1C8]
	0x01DFB55C CBZ X0, 0x1DFB830
	0x01DFB560 MOV X1, X31
	0x01DFB564 BL 0x3BE1494
	0x01DFB568 ADRP X8, 0xFFFFFFFFFECEE000
	0x01DFB56C FSUB S0, S0, S10
	0x01DFB570 FSUB S1, S1, S9
	0x01DFB574 LDR V3, [X8 + 0xF20]
	0x01DFB578 FSUB S2, S2, S8
	0x01DFB57C FMUL S0, S0, S0
	0x01DFB580 FMUL S1, S1, S1
	0x01DFB584 FADD S0, S0, S1
	0x01DFB588 FMUL S1, S2, S2
	0x01DFB58C FADD S0, S1, S0
	0x01DFB590 FCMP S0, S3
	0x01DFB594 B.MI 0x1DFB5B4

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X19, 0x25DE000
	010 Move W8, [X19+3380]
	011 Move W20, W1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x22FE000
	018 Move X0, [X0+3416]
	019 Call 0x1C17CF4
	020 Move X0, 0x22FE000
	021 Move X0, [X0+3208]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+3380], W8
	025 Move X19, [X21+48]
	026 Compare X19, 0
	027 JumpIfEqual {31}
	028 Move X8, [X19+24]
	029 Compare X8, 0
	030 JumpIfNotEqual {40}
	031 Move X8, 0x22FE000
	032 Move X8, [X8+3416]
	033 Move X0, X21
	034 Move X1, [X8]
	035 Call 0x21A553C, X0
	036 Move X19, X0
	037 Move [X21+48], X0
	038 Compare X0, 0
	039 JumpIfEqual {96}
	040 Move X8, -19988480
	041 Move V0, [X8+392]
	042 Move W8, [X19+24]
	043 And W31, W20, 1
	044 Move S1, W31
	045 NotImplemented "Instruction FCSEL not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X23, 0x22FE000
	048 Move X23, [X23+3208]
	049 Move W22, W31
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Add X8, X19, W22
	052 Move X0, [X8+32]
	053 Compare X0, 0
	054 JumpIfEqual {96}
	055 Move X1, X31
	056 Call Renderer.get_materials, X0
	057 Compare X0, 0
	058 JumpIfEqual {96}
	059 Move W8, [X0+24]
	060 Move X20, X0
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move W24, W31
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X0, [X23]
	065 Add X8, X20, W24
	066 Move X21, [X8+32]
	067 Move W9, [X0+224]
	068 Compare W9, 0
	069 JumpIfNotEqual {72}
	070 Call 0x1C17DFC
	071 Move X0, [X23]
	072 Compare X21, 0
	073 JumpIfEqual {96}
	074 Move X8, [X0+184]
	075 Move X0, X21
	076 Move V0, V8
	077 Move X2, X31
	078 Move W1, [X8+4]
	079 Call Material.SetFloat, X0, X1, V0
	080 Move W8, [X20+24]
	081 Add W24, W24, 1
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move W8, [X19+24]
	084 Add W22, W22, 1
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X20, [X31+48]
	087 Move X19, [X31+56]
	088 Move X22, [X31+32]
	089 Move X21, [X31+40]
	090 Move X24, [X31+16]
	091 Move X23, [X31+24]
	092 Move X30, [X31+8]
	093 Move V8, [X31+64]
	094 Return 
	095 Call 0x1C17F28
	096 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DE8994 LDR X3, [X10 + 0x2C8]
	0x01DE8998 LDR X2, [X10 + 0x2D0]
	0x01DE899C MOVZ W1, 0x1
	0x01DE89A0 MOV X0, X19
	0x01DE89A4 LDP X30, X19, [X31], #0x10
	0x01DE89A8 BR X3
	0x01DE89AC BL 0x1C16F20
	0x01DE89B0 BL 0x1C16F28
	0x01DE89B4 STP X30, X19, [X31 - 0x10]!
	0x01DE89B8 MOV X19, X0

ISIL:
	001 Move X8, -19894272
	002 Move V0, [X8+616]
	003 Move W8, 1
	004 Move W9, 0x3F800000
	005 Move X1, X31
	006 Move [X0+80], W31
	007 Move [X0+84], W8
	008 Move [X0+72], D0
	009 Move [X0+128], W9
	010 Call MonoBehaviour..ctor, X0
	011 Return 

Method: System.Void .cctor()

Disassembly:
	0x01DFB598 LDR X0, [X19 + 0xE8]
	0x01DFB59C CBZ X0, 0x1DFB830
	0x01DFB5A0 MOV V0.16B, V10.16B
	0x01DFB5A4 MOV V1.16B, V9.16B
	0x01DFB5A8 MOV V2.16B, V8.16B
	0x01DFB5AC MOV X1, X31
	0x01DFB5B0 BL 0x3BE13F8
	0x01DFB5B4 LDR V8, [X19 + 0x1C0]
	0x01DFB5B8 LDR V9, [X19 + 0x1C4]
	0x01DFB5BC LDR V10, [X19 + 0x1C8]
	0x01DFB5C0 MOV X0, X19
	0x01DFB5C4 MOV X1, X31
	0x01DFB5C8 BL 0x3C32E90
	0x01DFB5CC CBZ X0, 0x1DFB830
	0x01DFB5D0 MOV X1, X31
	0x01DFB5D4 BL 0x3C3FA04
	0x01DFB5D8 ADRP X8, 0xFFFFFFFFFECEF000
	0x01DFB5DC LDR V3, [X8 + 0x68]
	0x01DFB5E0 FMUL S0, S8, S0
	0x01DFB5E4 FMUL S1, S9, S1
	0x01DFB5E8 FADD S0, S0, S1
	0x01DFB5EC FMUL S1, S10, S2
	0x01DFB5F0 FADD S0, S1, S0
	0x01DFB5F4 FCMP S0, S3
	0x01DFB5F8 B.PL 0x1DFB7B8
	0x01DFB5FC LDR X8, [X19 + 0xC0]
	0x01DFB600 CBZ X8, 0x1DFB830
	0x01DFB604 LDR V11, [X8 + 0x40]
	0x01DFB608 MOV X0, X19
	0x01DFB60C MOV X1, X31
	0x01DFB610 BL 0x3C32E90
	0x01DFB614 CBZ X0, 0x1DFB830
	0x01DFB618 MOV X1, X31
	0x01DFB61C STR S11, [X31 + 0xC]
	0x01DFB620 BL 0x3C3FA04
	0x01DFB624 ADRP X20, 0x25DD000
	0x01DFB628 LDRB W8, [X20 + 0xA24]
	0x01DFB62C MOV V11.16B, V0.16B
	0x01DFB630 MOV V12.16B, V1.16B
	0x01DFB634 MOV V13.16B, V2.16B
	0x01DFB638 CBNZ W8, 0x1DFB650
	0x01DFB63C ADRP X0, 0x22F8000
	0x01DFB640 LDR X0, [X0 + 0x5A8]
	0x01DFB644 BL 0x1C16CF4
	0x01DFB648 MOVZ W8, 0x1
	0x01DFB64C STRB W8, [X20 + 0xA24]
	0x01DFB650 ADRP X20, 0x22F8000
	0x01DFB654 LDR X20, [X20 + 0x5A8]
	0x01DFB658 FMUL S0, S8, S8
	0x01DFB65C FMUL S1, S9, S9
	0x01DFB660 FADD S0, S0, S1
	0x01DFB664 LDR X0, [X20]
	0x01DFB668 FMUL S1, S10, S10
	0x01DFB66C FADD S15, S1, S0
	0x01DFB670 FMUL S0, S11, S11
	0x01DFB674 LDR W8, [X0 + 0xE0]
	0x01DFB678 FMUL S1, S12, S12
	0x01DFB67C FADD S0, S0, S1
	0x01DFB680 FMUL S1, S13, S13
	0x01DFB684 FADD S14, S1, S0
	0x01DFB688 CBNZ W8, 0x1DFB690
	0x01DFB68C BL 0x1C16DFC
	0x01DFB690 ADRP X8, 0xFFFFFFFFFECEE000
	0x01DFB694 LDR V1, [X8 + 0xFE8]
	0x01DFB698 FMUL S0, S15, S14
	0x01DFB69C FSQRT S0, S0
	0x01DFB6A0 FMOV S15, W31
	0x01DFB6A4 FCMP S0, S1
	0x01DFB6A8 B.MI 0x1DFB700
	0x01DFB6AC LDR X0, [X20]
	0x01DFB6B0 FMUL S1, S8, S11
	0x01DFB6B4 FMUL S2, S9, S12
	0x01DFB6B8 FMUL S3, S10, S13
	0x01DFB6BC FADD S1, S1, S2
	0x01DFB6C0 FADD S1, S3, S1
	0x01DFB6C4 LDR W8, [X0 + 0xE0]
	0x01DFB6C8 FDIV S0, S1, S0
	0x01DFB6CC FMOV S1, 1
	0x01DFB6D0 FMOV S2, -1
	0x01DFB6D4 FMIN S1, S0, S1
	0x01DFB6D8 FCMP S0, S2
	0x01DFB6DC FCSEL S11, S1, S2, PL
	0x01DFB6E0 CBNZ W8, 0x1DFB6E8
	0x01DFB6E4 BL 0x1C16DFC
	0x01DFB6E8 FCVT S0, S11
	0x01DFB6EC BL 0x3EB1B80
	0x01DFB6F0 ADRP X8, 0xFFFFFFFFFECEF000
	0x01DFB6F4 LDR V1, [X8 + 0x448]
	0x00000000 INVALID
	0x01DFB6FC FMUL S15, S0, S1
	0x01DFB700 MOV X0, X19
	0x01DFB704 MOV X1, X31
	0x01DFB708 BL 0x3C32E90
	0x01DFB70C MOV X20, X0
	0x01DFB710 MOV X0, X19
	0x01DFB714 MOV X1, X31
	0x01DFB718 BL 0x3C32E90
	0x01DFB71C CBZ X0, 0x1DFB830
	0x01DFB720 LDR V0, [X31 + 0xC]
	0x01DFB724 MOV X1, X31
	0x01DFB728 FDIV S0, S0, S15
	0x01DFB72C STR S0, [X31 + 0xC]
	0x01DFB730 BL 0x3C3DEB4
	0x01DFB734 MOV V11.16B, V0.16B
	0x01DFB738 MOV V12.16B, V1.16B
	0x01DFB73C MOV V13.16B, V2.16B
	0x01DFB740 MOV V0.16B, V8.16B
	0x01DFB744 MOV V1.16B, V9.16B
	0x01DFB748 MOV V2.16B, V10.16B
	0x01DFB74C MOV X0, X31
	0x01DFB750 MOV V14.16B, V3.16B
	0x01DFB754 BL 0x3C2A8C4
	0x01DFB758 MOV X0, X19
	0x01DFB75C MOV X1, X31
	0x01DFB760 MOV V8.16B, V0.16B
	0x01DFB764 MOV V9.16B, V1.16B
	0x01DFB768 MOV V10.16B, V2.16B
	0x01DFB76C MOV V15.16B, V3.16B
	0x01DFB770 BL 0x1DEA4B8
	0x01DFB774 LDR V1, [X31 + 0xC]
	0x01DFB778 MOV V2.16B, V13.16B
	0x01DFB77C MOV V3.16B, V14.16B
	0x01DFB780 MOV V4.16B, V8.16B
	0x01DFB784 FMUL S0, S1, S0
	0x01DFB788 STR S0, [X31]
	0x01DFB78C MOV V0.16B, V11.16B
	0x01DFB790 MOV V1.16B, V12.16B
	0x01DFB794 MOV V5.16B, V9.16B
	0x01DFB798 MOV V6.16B, V10.16B
	0x01DFB79C MOV V7.16B, V15.16B
	0x01DFB7A0 MOV X0, X31
	0x01DFB7A4 BL 0x3C2A2F8
	0x01DFB7A8 CBZ X20, 0x1DFB830
	0x01DFB7AC MOV X0, X20
	0x01DFB7B0 MOV X1, X31
	0x01DFB7B4 BL 0x3C3F7AC
	0x01DFB7B8 LDR X0, [X23]
	0x01DFB7BC ADD X20, X19, 0x178
	0x01DFB7C0 LDR W8, [X0 + 0xE0]
	0x01DFB7C4 CBNZ W8, 0x1DFB7CC
	0x01DFB7C8 BL 0x1C16DFC
	0x01DFB7CC MOV X0, X19
	0x01DFB7D0 MOV X1, X20
	0x01DFB7D4 MOV X2, X31
	0x01DFB7D8 BL 0x1DEA6E8
	0x01DFB7DC TBZ X0, 0x0, 0x1DFB80C
	0x01DFB7E0 LDR X1, [X19 + 0x178]
	0x01DFB7E4 MOV X0, X19
	0x01DFB7E8 LDP X20, X19, [X31 + 0x70]
	0x01DFB7EC LDP X22, X21, [X31 + 0x60]
	0x01DFB7F0 LDP X30, X23, [X31 + 0x50]
	0x01DFB7F4 LDP D9, D8, [X31 + 0x40]
	0x01DFB7F8 LDP D11, D10, [X31 + 0x30]
	0x01DFB7FC LDP D13, D12, [X31 + 0x20]
	0x01DFB800 LDP D15, D14, [X31 + 0x10]
	0x01DFB804 ADD X31, X31, 0x80
	0x01DFB808 B 0x1DFC128
	0x01DFB80C LDP X20, X19, [X31 + 0x70]
	0x01DFB810 LDP X22, X21, [X31 + 0x60]
	0x01DFB814 LDP X30, X23, [X31 + 0x50]
	0x01DFB818 LDP D9, D8, [X31 + 0x40]
	0x01DFB81C LDP D11, D10, [X31 + 0x30]
	0x01DFB820 LDP D13, D12, [X31 + 0x20]
	0x01DFB824 LDP D15, D14, [X31 + 0x10]
	0x01DFB828 ADD X31, X31, 0x80
	0x01DFB82C RET
	0x01DFB830 BL 0x1C16F20
	0x01DFB834 BL 0x1C16F28
	0x01DFB838 SUB X31, X31, 0x70
	0x01DFB83C STP D15, D14, [X31 + 0x10]
	0x01DFB840 STP D13, D12, [X31 + 0x20]
	0x01DFB844 STP D11, D10, [X31 + 0x30]
	0x01DFB848 STP D9, D8, [X31 + 0x40]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X22, 0x25DE000
	014 Move X23, 0x22FF000
	015 Move X19, 0x22FE000
	016 Move X21, 0x22FF000
	017 Move X20, 0x22FF000
	018 Move X29, 0x22FF000
	019 Move X28, 0x22FF000
	020 Move X27, 0x22FF000
	021 Move X26, 0x22FF000
	022 Move X25, 0x22FF000
	023 Move X24, 0x22FF000
	024 Move X23, [X23+1184]
	025 Move X19, [X19+3208]
	026 Move X21, [X21+1192]
	027 Move X20, [X20+1200]
	028 Move X29, [X29+1208]
	029 Move X28, [X28+1216]
	030 Move X27, [X27+1224]
	031 Move X26, [X26+1232]
	032 Move X25, [X25+1240]
	033 Move W8, [X22+3381]
	034 Move X24, [X24+1248]
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {83}
	039 Move X0, 0x22FE000
	040 Move X0, [X0+3208]
	041 Call 0x1C17CF4
	042 Move X0, 0x22FF000
	043 Move X0, [X0+1256]
	044 Call 0x1C17CF4
	045 Move X0, 0x22FF000
	046 Move X0, [X0+1208]
	047 Call 0x1C17CF4
	048 Move X0, 0x22FF000
	049 Move X0, [X0+1240]
	050 Call 0x1C17CF4
	051 Move X0, 0x22FF000
	052 Move X0, [X0+1264]
	053 Call 0x1C17CF4
	054 Move X0, 0x22FF000
	055 Move X0, [X0+1224]
	056 Call 0x1C17CF4
	057 Move X0, 0x22FF000
	058 Move X0, [X0+1200]
	059 Call 0x1C17CF4
	060 Move X0, 0x22FF000
	061 Move X0, [X0+1184]
	062 Call 0x1C17CF4
	063 Move X0, 0x22FF000
	064 Move X0, [X0+1272]
	065 Call 0x1C17CF4
	066 Move X0, 0x22FF000
	067 Move X0, [X0+1248]
	068 Call 0x1C17CF4
	069 Move X0, 0x22FF000
	070 Move X0, [X0+1216]
	071 Call 0x1C17CF4
	072 Move X0, 0x22FF000
	073 Move X0, [X0+1232]
	074 Call 0x1C17CF4
	075 Move X0, 0x22FF000
	076 Move X0, [X0+1192]
	077 Call 0x1C17CF4
	078 Move X0, 0x22FF000
	079 Move X0, [X0+1280]
	080 Call 0x1C17CF4
	081 Move W8, 1
	082 Move [X22+3381], W8
	083 Move X0, [X23]
	084 Move X1, X31
	085 Call Shader.PropertyToID, X0
	086 Move X8, [X19]
	087 Move X1, X31
	088 Move X8, [X8+184]
	089 Move [X8], W0
	090 Move X0, [X21]
	091 Call Shader.PropertyToID, X0
	092 Move X8, [X19]
	093 Move X9, -19984384
	094 Move V0, [X9+215]
	095 Move X9, -19980288
	096 Move X10, [X8+184]
	097 Move X1, X31
	098 Move [X10+4], W0
	099 Move [X10+8], V0
	100 Move X8, [X8+184]
	101 Move V0, [X9+25]
	102 Move [X8+24], V0
	103 Move X0, [X20]
	104 Call Animator.StringToHash, X0
	105 Move X8, [X19]
	106 Move X1, X31
	107 Move X8, [X8+184]
	108 Move [X8+40], W0
	109 Move X0, [X29]
	110 Call Animator.StringToHash, X0
	111 Move X8, [X19]
	112 Move X1, X31
	113 Move X8, [X8+184]
	114 Move [X8+44], W0
	115 Move X0, [X28]
	116 Call Animator.StringToHash, X0
	117 Move X8, [X19]
	118 Move X1, X31
	119 Move X8, [X8+184]
	120 Move [X8+48], W0
	121 Move X0, [X27]
	122 Call Animator.StringToHash, X0
	123 Move X8, [X19]
	124 Move X1, X31
	125 Move X8, [X8+184]
	126 Move [X8+52], W0
	127 Move X0, [X26]
	128 Call Animator.StringToHash, X0
	129 Move X8, [X19]
	130 Move X1, X31
	131 Move X8, [X8+184]
	132 Move [X8+56], W0
	133 Move X0, [X25]
	134 Call Animator.StringToHash, X0
	135 Move X8, [X19]
	136 Move X1, X31
	137 Move X8, [X8+184]
	138 Move [X8+60], W0
	139 Move X0, [X24]
	140 Call Animator.StringToHash, X0
	141 Move X8, [X19]
	142 Move X1, X31
	143 Move X8, [X8+184]
	144 Move [X8+64], W0
	145 Move X8, 0x22FF000
	146 Move X8, [X8+1272]
	147 Move X0, [X8]
	148 Call Animator.StringToHash, X0
	149 Move X8, [X19]
	150 Move X1, X31
	151 Move X8, [X8+184]
	152 Move [X8+68], W0
	153 Move X8, 0x22FF000
	154 Move X8, [X8+1256]
	155 Move X0, [X8]
	156 Call Animator.StringToHash, X0
	157 Move X8, [X19]
	158 Move X1, X31
	159 Move X8, [X8+184]
	160 Move [X8+72], W0
	161 Move X8, 0x22FF000
	162 Move X8, [X8+1264]
	163 Move X0, [X8]
	164 Call Animator.StringToHash, X0
	165 Move X8, [X19]
	166 Move X1, X31
	167 Move X8, [X8+184]
	168 Move [X8+76], W0
	169 Move X8, 0x22FF000
	170 Move X8, [X8+1280]
	171 Move X0, [X8]
	172 Call Animator.StringToHash, X0
	173 Move X8, [X19]
	174 Move X20, [X31+80]
	175 Move X19, [X31+88]
	176 Move X22, [X31+64]
	177 Move X21, [X31+72]
	178 Move X24, [X31+48]
	179 Move X23, [X31+56]
	180 Move X8, [X8+184]
	181 Move X26, [X31+32]
	182 Move X25, [X31+40]
	183 Move X28, [X31+16]
	184 Move X27, [X31+24]
	185 Move [X8+80], W0
	186 Move X29, [X31+96]
	187 Move X30, [X31+104]
	188 Return 

