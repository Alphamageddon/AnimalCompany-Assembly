Type: AnimalCompany.MobView

Method: System.Void Awake()

Disassembly:
	0x01CEABB0 FMOV S0, 1
	0x01CEABB4 LDP X9, X1, [X8 + 0x1D8]
	0x01CEABB8 BLR X9
	0x01CEABBC LDR X0, [X19 + 0x1F0]
	0x01CEABC0 CBZ X0, 0x1CEAC1C
	0x01CEABC4 MOV X1, X31
	0x01CEABC8 BL 0x3A65954
	0x01CEABCC B 0x1CEABE8
	0x01CEABD0 LDR X0, [X19 + 0xC0]
	0x01CEABD4 CBZ X0, 0x1CEAC1C
	0x01CEABD8 LDR X8, [X0]
	0x01CEABDC LDR X9, [X8 + 0x228]
	0x01CEABE0 LDR X1, [X8 + 0x230]
	0x01CEABE4 BLR X9
	0x01CEABE8 LDR X20, [X19 + 0xC0]
	0x01CEABEC MOV X0, X19
	0x01CEABF0 BL 0x1CEAA60
	0x01CEABF4 CBZ X20, 0x1CEAC1C
	0x01CEABF8 LDR X8, [X20]
	0x01CEABFC CMP W0, 0x4
	0x01CEAC00 MOV X0, X20
	0x01CEAC04 LDP X20, X19, [X31 + 0x10]
	0x01CEAC08 LDR X3, [X8 + 0x218]
	0x01CEAC0C LDR X2, [X8 + 0x220]
	0x01CEAC10 CSET W1, EQ
	0x01CEAC14 LDR X30, [X31], #0x20
	0x01CEAC18 BR X3
	0x01CEAC1C BL 0x1B6EA1C
	0x01CEAC20 STP X30, X19, [X31 - 0x10]!
	0x01CEAC24 MOV X19, X0
	0x01CEAC28 BL 0x1CE54EC
	0x01CEAC2C LDR X0, [X19 + 0xC8]
	0x01CEAC30 CBZ X0, 0x1CEACA0
	0x01CEAC34 MOVZ W1, 0x1
	0x01CEAC38 MOV X2, X31
	0x01CEAC3C BL 0x3A4ACE4
	0x01CEAC40 LDR X0, [X19 + 0xC8]
	0x01CEAC44 CBZ X0, 0x1CEACA0
	0x01CEAC48 MOVZ W1, 0x1
	0x01CEAC4C MOV X2, X31
	0x01CEAC50 BL 0x3A4AD28
	0x01CEAC54 LDR X8, [X19 + 0xB8]
	0x01CEAC58 CBZ X8, 0x1CEACA0
	0x01CEAC5C LDR X8, [X8 + 0x30]
	0x01CEAC60 CBZ X8, 0x1CEACA0
	0x01CEAC64 LDR W9, [X8 + 0x18]
	0x01CEAC68 CBZ W9, 0x1CEACA4
	0x01CEAC6C LDR X0, [X19 + 0xC8]
	0x01CEAC70 CBZ X0, 0x1CEACA0
	0x01CEAC74 LDR V0, [X8 + 0x20]
	0x01CEAC78 MOV X1, X31
	0x01CEAC7C BL 0x3A4AC4C
	0x01CEAC80 LDR X0, [X19 + 0xC8]
	0x01CEAC84 CBZ X0, 0x1CEACA0
	0x01CEAC88 MOV W1, W31
	0x01CEAC8C MOV X2, X31
	0x01CEAC90 BL 0x3A4AB90
	0x01CEAC94 MOV X0, X19
	0x01CEAC98 LDP X30, X19, [X31], #0x10
	0x01CEAC9C B 0x1CEACA8
	0x01CEACA0 BL 0x1B6EA1C
	0x01CEACA4 BL 0x1B6EA24
	0x01CEACA8 STP X30, X19, [X31 - 0x10]!
	0x01CEACAC MOVZ W1, 0x1
	0x01CEACB0 MOV X19, X0
	0x01CEACB4 BL 0x1CEAAC0
	0x01CEACB8 MOV X0, X19
	0x01CEACBC BL 0x1CEAFD4
	0x01CEACC0 MOV X0, X19
	0x01CEACC4 BL 0x1CEAD14
	0x01CEACC8 ADD X8, X19, 0x1C4
	0x01CEACCC LDR W9, [X19 + 0x1CC]
	0x01CEACD0 LDR X8, [X8]
	0x01CEACD4 LDR X0, [X19 + 0xC8]
	0x01CEACD8 STR W9, [X19 + 0x198]
	0x01CEACDC STR X8, [X19 + 0x190]
	0x01CEACE0 CBZ X0, 0x1CEAD10
	0x01CEACE4 LDR V2, [X19 + 0x1C0]
	0x01CEACE8 LDR V1, [X19 + 0x1BC]
	0x01CEACEC LDR V0, [X19 + 0x1B8]
	0x01CEACF0 MOV X1, X31
	0x01CEACF4 BL 0x3A4A810
	0x01CEACF8 LDR X0, [X19 + 0xC8]
	0x01CEACFC CBZ X0, 0x1CEAD10
	0x01CEAD00 MOV W1, W31
	0x01CEAD04 MOV X2, X31
	0x01CEAD08 LDP X30, X19, [X31], #0x10
	0x01CEAD0C B 0x3A4AB90
	0x01CEAD10 BL 0x1B6EA1C
	0x01CEAD14 SUB X31, X31, 0xF0
	0x01CEAD18 STR D14, [X31 + 0x60]
	0x01CEAD1C STP D13, D12, [X31 + 0x68]
	0x01CEAD20 STP D11, D10, [X31 + 0x78]
	0x01CEAD24 STP D9, D8, [X31 + 0x88]
	0x01CEAD28 STR X30, [X31 + 0x98]
	0x01CEAD2C STP X28, X27, [X31 + 0xA0]
	0x01CEAD30 STP X26, X25, [X31 + 0xB0]
	0x01CEAD34 STP X24, X23, [X31 + 0xC0]
	0x01CEAD38 STP X22, X21, [X31 + 0xD0]
	0x01CEAD3C STP X20, X19, [X31 + 0xE0]
	0x01CEAD40 ADRP X20, 0x2539000
	0x01CEAD44 LDRB W8, [X20 + 0x68B]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x253A000
	008 Move W8, [X20+1662]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x2264000
	015 Move X0, [X0+2272]
	016 Call 0x1B6F7F0
	017 Move X0, 0x2264000
	018 Move X0, [X0+1144]
	019 Call 0x1B6F7F0
	020 Move X0, 0x2267000
	021 Move X0, [X0+808]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X20+1662], W8
	025 Move X0, [X19+32]
	026 Compare X0, 0
	027 JumpIfEqual {123}
	028 Move X1, [X19+40]
	029 Move X20, 0x2264000
	030 Move X20, [X20+1144]
	031 Move X2, X31
	032 Call Animator.set_runtimeAnimatorController, X0, X1
	033 Move X0, [X20]
	034 Move X20, [X19+56]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1B6F8F8
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Equality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {116}
	047 Move X8, 0x2264000
	048 Move X8, [X8+2272]
	049 Move X0, [X8]
	050 Call 0x1B6FA0C
	051 Move X8, 0x2267000
	052 Move X8, [X8+808]
	053 Move X2, X31
	054 Move X20, X0
	055 Move X1, [X8]
	056 Call GameObject..ctor, X0, X1
	057 Compare X20, 0
	058 JumpIfEqual {123}
	059 Move X0, X20
	060 Move X1, X31
	061 Call GameObject.get_transform, X0
	062 Move X20, X0
	063 Move [X19+56], X0
	064 Move X0, X19
	065 Move X1, X31
	066 Call Component.get_transform, X0
	067 Compare X20, 0
	068 JumpIfEqual {123}
	069 Move X1, X0
	070 Move X0, X20
	071 Move X2, X31
	072 Call Transform.SetParent, X0, X1
	073 Move X0, [X19+48]
	074 Compare X0, 0
	075 JumpIfEqual {123}
	076 Move X19, [X19+56]
	077 Move X1, X31
	078 Call Transform.get_position, X0
	079 Move X20, 0x253A000
	080 Move W8, [X20+1295]
	081 Move V8, V0
	082 Move V9, V1
	083 Move V10, V2
	084 Compare W8, 0
	085 JumpIfNotEqual {91}
	086 Move X0, 0x2264000
	087 Move X0, [X0+1152]
	088 Call 0x1B6F7F0
	089 Move W8, 1
	090 Move [X20+1295], W8
	091 Compare X19, 0
	092 JumpIfEqual {123}
	093 Move X8, 0x2264000
	094 Move X8, [X8+1152]
	095 Move X0, X19
	096 Move X20, [X31+32]
	097 Move X19, [X31+40]
	098 Move X30, [X31+24]
	099 Move X8, [X8]
	100 Move X1, X31
	101 Move X8, [X8+184]
	102 Move S1, [X8+76]
	103 Move S0, [X8+80]
	104 Move V3, [X8+72]
	105 Add S0, S0, S0
	106 Add S2, S10, S0
	107 Add S0, S1, S1
	108 Add S1, S9, S0
	109 Add S0, S3, S3
	110 Add S0, S8, S0
	111 Move D9, [X31+8]
	112 Move D8, [X31+16]
	113 Move V10, [X31+48]
	114 Call Transform.set_position, X0, X1
	115 Return 
	116 Move X20, [X31+32]
	117 Move X19, [X31+40]
	118 Move X30, [X31+24]
	119 Move D9, [X31+8]
	120 Move D8, [X31+16]
	121 Move V10, [X31+48]
	122 Return 
	123 Call 0x1B6FA1C

Method: System.Void Setup(AnimalCompany.MobController mobController)

Disassembly:
	0x01CEAD48 MOV X19, X0
	0x01CEAD4C TBNZ X8, 0x0, 0x1CEAD7C
	0x01CEAD50 ADRP X0, 0x2266000
	0x01CEAD54 LDR X0, [X0 + 0x3A0]
	0x01CEAD58 BL 0x1B6E7F0
	0x01CEAD5C ADRP X0, 0x2263000
	0x01CEAD60 LDR X0, [X0 + 0x478]
	0x01CEAD64 BL 0x1B6E7F0
	0x01CEAD68 ADRP X0, 0x2263000
	0x01CEAD6C LDR X0, [X0 + 0x4C0]
	0x01CEAD70 BL 0x1B6E7F0
	0x01CEAD74 MOVZ W8, 0x1
	0x01CEAD78 STRB W8, [X20 + 0x68B]
	0x01CEAD7C STR X31, [X31 + 0x58]
	0x01CEAD80 LDR X0, [X19 + 0xD0]
	0x01CEAD84 CBZ X0, 0x1CEAFCC
	0x01CEAD88 ADRP X20, 0x2263000
	0x01CEAD8C LDR X20, [X20 + 0x4C0]
	0x01CEAD90 MOV X1, X31
	0x01CEAD94 BL 0x3AA7658
	0x01CEAD98 LDR W0, [X19 + 0x1E0]
	0x01CEAD9C MOV X1, X31
	0x01CEADA0 MOV V8.16B, V0.16B
	0x01CEADA4 MOV V9.16B, V1.16B
	0x01CEADA8 MOV V10.16B, V2.16B
	0x01CEADAC BL 0x3A9DE68
	0x01CEADB0 LDR X8, [X20]
	0x01CEADB4 MOV W20, W0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+48]
	006 Move W8, 1
	007 Move [X19+132], W8
	008 Move [X19+112], X1
	009 Compare X0, 0
	010 JumpIfEqual {37}
	011 Move X20, X1
	012 Move X1, X31
	013 Call Transform.get_rotation, X0
	014 Move X0, [X19+56]
	015 Move [X19+80], S0
	016 Move [X19+88], S1
	017 Move [X19+88], S2
	018 Move [X19+96], S3
	019 Compare X0, 0
	020 JumpIfEqual {37}
	021 Move X1, X31
	022 Call Transform.get_position, X0
	023 Move [X19+96], S0
	024 Move [X19+104], S1
	025 Move [X19+104], S2
	026 Compare X20, 0
	027 JumpIfEqual {37}
	028 Move X8, [X20+184]
	029 Compare X8, 0
	030 JumpIfEqual {37}
	031 Move X8, [X8+168]
	032 Move [X19+120], X8
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return 
	037 Call 0x1B6FA1C

Method: System.Void Update()

Disassembly:
	0x01CEADB8 LDR W9, [X8 + 0xE0]
	0x01CEADBC CBNZ W9, 0x1CEADC8
	0x01CEADC0 MOV X0, X8
	0x01CEADC4 BL 0x1B6E8F8
	0x01CEADC8 FMOV S3, 0.5
	0x01CEADCC MOV V0.16B, V8.16B
	0x01CEADD0 MOV V1.16B, V9.16B
	0x01CEADD4 MOV V2.16B, V10.16B
	0x01CEADD8 MOV W0, W20
	0x01CEADDC MOV X1, X31
	0x01CEADE0 BL 0x3AF52EC
	0x01CEADE4 CBZ X0, 0x1CEAFCC
	0x01CEADE8 LDR W8, [X0 + 0x18]
	0x01CEADEC ADRP X24, 0x2263000
	0x01CEADF0 LDR X24, [X24 + 0x478]
	0x01CEADF4 MOV X21, X0
	0x01CEADF8 CMP W8, 0x1
	0x01CEADFC B.LT 0x1CEAF30
	0x01CEAE00 ADRP X26, 0x2266000
	0x01CEAE04 ADRP X22, 0x2263000
	0x01CEAE08 LDR X26, [X26 + 0x3A0]
	0x01CEAE0C LDR X22, [X22 + 0x488]
	0x01CEAE10 MOVN W9, 0x80800000
	0x01CEAE14 MOV W25, W31
	0x01CEAE18 MOV X20, X31
	0x01CEAE1C ADRP X27, 0x2539000
	0x01CEAE20 FMOV S14, W9
	0x01CEAE24 MOVZ W28, 0x1
	0x01CEAE28 CMP W25, W8
	0x01CEAE2C B.CS 0x1CEAFD0
	0x01CEAE30 ADD X8, X21, W25, 0x3, SXTW
	0x01CEAE34 LDR X0, [X8 + 0x20]
	0x01CEAE38 CBZ X0, 0x1CEAFCC
	0x01CEAE3C LDR X2, [X26]
	0x01CEAE40 ADD X1, X31, 0x58
	0x01CEAE44 BL 0x2090EE4
	0x01CEAE48 TBZ X0, 0x0, 0x1CEAF1C
	0x01CEAE4C LDR X0, [X24]
	0x01CEAE50 LDR X23, [X19 + 0x140]
	0x01CEAE54 LDR W8, [X0 + 0xE0]
	0x01CEAE58 CBNZ W8, 0x1CEAE60
	0x01CEAE5C BL 0x1B6E8F8
	0x01CEAE60 MOV X0, X23
	0x01CEAE64 MOV X1, X31
	0x01CEAE68 MOV X2, X31
	0x01CEAE6C BL 0x3A9D6EC
	0x01CEAE70 TBZ X0, 0x0, 0x1CEAF38
	0x01CEAE74 LDR X0, [X19 + 0x140]
	0x01CEAE78 CBZ X0, 0x1CEAFCC
	0x01CEAE7C MOV X1, X31
	0x01CEAE80 BL 0x3A9B084
	0x01CEAE84 CBZ X0, 0x1CEAFCC
	0x01CEAE88 MOV X1, X31
	0x01CEAE8C BL 0x3AA7658
	0x01CEAE90 LDR X0, [X31 + 0x58]
	0x01CEAE94 CBZ X0, 0x1CEAFCC
	0x01CEAE98 MOV X1, X31
	0x01CEAE9C MOV V8.16B, V0.16B
	0x01CEAEA0 MOV V9.16B, V1.16B
	0x01CEAEA4 MOV V10.16B, V2.16B
	0x01CEAEA8 BL 0x3A9B084
	0x01CEAEAC CBZ X0, 0x1CEAFCC
	0x01CEAEB0 MOV X1, X31
	0x01CEAEB4 BL 0x3AA7658
	0x01CEAEB8 LDRB W8, [X27 + 0x506]
	0x01CEAEBC MOV V11.16B, V0.16B
	0x01CEAEC0 MOV V12.16B, V1.16B
	0x01CEAEC4 MOV V13.16B, V2.16B
	0x01CEAEC8 CBNZ W8, 0x1CEAED8
	0x01CEAECC MOV X0, X22
	0x01CEAED0 BL 0x1B6E7F0
	0x01CEAED4 STRB W28, [X27 + 0x506]
	0x01CEAED8 LDR X0, [X22]
	0x01CEAEDC LDR W8, [X0 + 0xE0]
	0x01CEAEE0 CBNZ W8, 0x1CEAEE8
	0x01CEAEE4 BL 0x1B6E8F8
	0x01CEAEE8 FSUB S0, S8, S11
	0x01CEAEEC FSUB S1, S9, S12
	0x01CEAEF0 FSUB S2, S10, S13
	0x01CEAEF4 FMUL S0, S0, S0
	0x01CEAEF8 FMUL S1, S1, S1
	0x01CEAEFC FADD S0, S0, S1
	0x01CEAF00 FMUL S1, S2, S2
	0x01CEAF04 FADD S0, S1, S0
	0x01CEAF08 FSQRT S0, S0
	0x01CEAF0C FCMP S0, S14
	0x01CEAF10 B.PL 0x1CEAF1C
	0x01CEAF14 LDR X20, [X31 + 0x58]
	0x01CEAF18 MOV V14.16B, V0.16B
	0x01CEAF1C LDR W8, [X21 + 0x18]
	0x01CEAF20 ADD W25, W25, 0x1
	0x01CEAF24 CMP W25, W8
	0x01CEAF28 B.LT 0x1CEAE28
	0x01CEAF2C B 0x1CEAF3C
	0x01CEAF30 MOV X20, X31
	0x01CEAF34 B 0x1CEAF3C
	0x01CEAF38 LDR X20, [X31 + 0x58]
	0x01CEAF3C LDR X0, [X24]
	0x01CEAF40 LDR W8, [X0 + 0xE0]
	0x01CEAF44 CBNZ W8, 0x1CEAF4C
	0x01CEAF48 BL 0x1B6E8F8
	0x01CEAF4C MOV X0, X20
	0x01CEAF50 MOV X1, X31
	0x01CEAF54 MOV X2, X31
	0x01CEAF58 BL 0x3A9D6EC
	0x01CEAF5C TBZ X0, 0x0, 0x1CEAF9C
	0x01CEAF60 CBZ X20, 0x1CEAFCC
	0x01CEAF64 ADRP X8, 0xFFFFFFFFFEDBF000
	0x01CEAF68 LDR V0, [X8 + 0xCEC]
	0x01CEAF6C ADD X8, X31, 0x8
	0x01CEAF70 MOV X0, X20
	0x01CEAF74 MOV X1, X31
	0x01CEAF78 BL 0x1CD1284
	0x01CEAF7C LDR X8, [X31 + 0x28]
	0x01CEAF80 LDUR V0, [X31 + 0x18]
	0x01CEAF84 LDUR V1, [X31 + 0x8]
	0x01CEAF88 ADD X9, X19, 0x1B8
	0x01CEAF8C STR X8, [X31 + 0x50]
	0x01CEAF90 STP V1, V0, [X31 + 0x30]
	0x01CEAF94 STR X8, [X9 + 0x20]
	0x01CEAF98 STP V1, V0, [X9]
	0x01CEAF9C LDP X20, X19, [X31 + 0xE0]
	0x01CEAFA0 LDP X22, X21, [X31 + 0xD0]
	0x01CEAFA4 LDP X24, X23, [X31 + 0xC0]
	0x01CEAFA8 LDP X26, X25, [X31 + 0xB0]
	0x01CEAFAC LDP X28, X27, [X31 + 0xA0]
	0x01CEAFB0 LDR X30, [X31 + 0x98]
	0x01CEAFB4 LDP D9, D8, [X31 + 0x88]
	0x01CEAFB8 LDP D11, D10, [X31 + 0x78]
	0x01CEAFBC LDP D13, D12, [X31 + 0x68]
	0x01CEAFC0 LDR V14, [X31 + 0x60]
	0x01CEAFC4 ADD X31, X31, 0xF0
	0x01CEAFC8 RET
	0x01CEAFCC BL 0x1B6EA1C
	0x01CEAFD0 BL 0x1B6EA24
	0x01CEAFD4 STR X30, [X31 - 0x20]!
	0x01CEAFD8 STP X20, X19, [X31 + 0x10]
	0x01CEAFDC ADRP X20, 0x2539000
	0x01CEAFE0 LDRB W8, [X20 + 0x68C]
	0x01CEAFE4 MOV X19, X0
	0x01CEAFE8 TBNZ X8, 0x0, 0x1CEB000
	0x01CEAFEC ADRP X0, 0x2266000
	0x01CEAFF0 LDR X0, [X0 + 0x3A8]
	0x01CEAFF4 BL 0x1B6E7F0
	0x01CEAFF8 MOVZ W8, 0x1
	0x01CEAFFC STRB W8, [X20 + 0x68C]
	0x01CEB000 LDR X8, [X19 + 0x188]
	0x01CEB004 CBZ X8, 0x1CEB054
	0x01CEB008 LDP W2, W9, [X8 + 0x18]
	0x01CEB00C ADD W9, W9, 0x1
	0x01CEB010 CMP W2, 0x1
	0x01CEB014 STP W31, W9, [X8 + 0x18]
	0x01CEB018 B.LT 0x1CEB02C
	0x01CEB01C LDR X0, [X8 + 0x10]
	0x01CEB020 MOV W1, W31

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move W8, [X0+76]
	014 Compare W8, 0
	015 JumpIfEqual {64}
	016 Move X19, X0
	017 Move X0, [X0+56]
	018 Compare X0, 0
	019 JumpIfEqual {178}
	020 Move X1, X31
	021 Call Transform.get_position, X0
	022 Move X0, [X19+48]
	023 Compare X0, 0
	024 JumpIfEqual {178}
	025 Move X1, X31
	026 Move V8, V0
	027 Move V9, V1
	028 Move V10, V2
	029 Call Transform.get_position, X0
	030 Move X20, 0x253A000
	031 Move W8, [X20+1089]
	032 Move V11, V0
	033 Move V12, V1
	034 Move V13, V2
	035 Compare W8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, 0x2264000
	038 Move X0, [X0+1160]
	039 Call 0x1B6F7F0
	040 Move W8, 1
	041 Move [X20+1089], W8
	042 Move X8, 0x2264000
	043 Move X8, [X8+1160]
	044 Subtract S11, S8, S11
	045 Subtract S9, S9, S12
	046 Subtract S8, S10, S13
	047 Move X0, [X8]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1B6F8F8
	052 Multiply S0, S11, S11
	053 Multiply S1, S9, S9
	054 Move X8, -19136512
	055 Add S0, S0, S1
	056 Move V1, [X8+2916]
	057 Multiply S2, S8, S8
	058 Add S0, S2, S0
	059 NotImplemented "Instruction FSQRT not yet implemented."
	060 NotImplemented "Instruction FCMP not yet implemented."
	061 NotImplemented "Instruction FDIV not yet implemented."
	062 NotImplemented "Instruction FDIV not yet implemented."
	063 NotImplemented "Instruction FDIV not yet implemented."
	064 Move X20, [X31+96]
	065 Move X19, [X31+104]
	066 Move X30, [X31+80]
	067 Move D9, [X31+64]
	068 Move D8, [X31+72]
	069 Move D11, [X31+48]
	070 Move D10, [X31+56]
	071 Move D13, [X31+32]
	072 Move D12, [X31+40]
	073 Move D15, [X31+16]
	074 Move D14, [X31+24]
	075 Add X31, X31, 112
	076 Return 
	077 Move X20, 0x253A000
	078 Move W8, [X20+1087]
	079 Compare W8, 0
	080 JumpIfNotEqual {86}
	081 Move X0, 0x2264000
	082 Move X0, [X0+1152]
	083 Call 0x1B6F7F0
	084 Move W8, 1
	085 Move [X20+1087], W8
	086 Move X8, 0x2264000
	087 Move X8, [X8+1152]
	088 Move X8, [X8]
	089 Move X8, [X8+184]
	090 Move S0, [X8]
	091 Move S1, [X8+4]
	092 Move V2, [X8+8]
	093 Move X0, X31
	094 Call Quaternion.LookRotation, X0
	095 Move X8, -19136512
	096 Move V9, V0
	097 Move V11, V1
	098 Move V8, V2
	099 Move V10, V3
	100 Move V2, [X8+2804]
	101 Move S0, [X19+64]
	102 Move S1, [X19+68]
	103 Move V3, [X19+72]
	104 Move X0, X31
	105 Multiply S0, S0, S2
	106 Multiply S1, S1, S2
	107 Multiply S2, S3, S2
	108 Call Quaternion.Internal_FromEulerRad, X0
	109 Move X19, [X19+48]
	110 Compare X19, 0
	111 JumpIfEqual {178}
	112 Multiply S4, S10, S3
	113 Multiply S5, S9, S0
	114 Multiply S17, S10, S2
	115 Multiply S18, S8, S3
	116 Multiply S19, S11, S0
	117 Multiply S20, S11, S3
	118 Multiply S3, S9, S3
	119 Multiply S22, S8, S0
	120 Multiply S0, S10, S0
	121 Multiply S23, S10, S1
	122 Multiply S6, S11, S1
	123 Multiply S16, S9, S1
	124 Multiply S21, S11, S2
	125 Subtract S4, S4, S5
	126 Add S5, S17, S18
	127 Add S17, S23, S20
	128 Add S0, S0, S3
	129 Multiply S7, S8, S2
	130 Multiply S2, S9, S2
	131 Multiply S1, S8, S1
	132 Subtract S3, S4, S6
	133 Add S4, S16, S5
	134 Add S5, S22, S17
	135 Add S0, S21, S0
	136 Move X0, X19
	137 Move X1, X31
	138 Subtract S8, S3, S7
	139 Subtract S9, S4, S19
	140 Subtract S10, S5, S2
	141 Subtract S11, S0, S1
	142 Call Transform.get_rotation, X0
	143 Move X0, X31
	144 Move V12, V0
	145 Move V13, V1
	146 Move V14, V2
	147 Move V15, V3
	148 Call Time.get_deltaTime
	149 Move S1, 10
	150 Multiply S0, S0, S1
	151 Move [X31], S0
	152 Move V0, V12
	153 Move V1, V13
	154 Move V2, V14
	155 Move V3, V15
	156 Move V4, V11
	157 Move V5, V10
	158 Move V6, V9
	159 Move V7, V8
	160 Move X0, X31
	161 Call Quaternion.Slerp, X0, X1, V0
	162 Move X0, X19
	163 Move X20, [X31+96]
	164 Move X19, [X31+104]
	165 Move X30, [X31+80]
	166 Move D9, [X31+64]
	167 Move D8, [X31+72]
	168 Move D11, [X31+48]
	169 Move D10, [X31+56]
	170 Move D13, [X31+32]
	171 Move D12, [X31+40]
	172 Move D15, [X31+16]
	173 Move D14, [X31+24]
	174 Move X1, X31
	175 Add X31, X31, 112
	176 Call Transform.set_rotation, X0, X1
	177 Return 
	178 Call 0x1B6FA1C

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01CEB024 MOV X3, X31
	0x01CEB028 BL 0x32093A0
	0x01CEB02C LDR X8, [X19]
	0x01CEB030 MOV X0, X19
	0x01CEB034 MOV X1, X31
	0x01CEB038 LDR X9, [X8 + 0x338]
	0x01CEB03C LDR X2, [X8 + 0x340]
	0x01CEB040 BLR X9
	0x01CEB044 STP X31, X31, [X19 + 0x178]
	0x01CEB048 LDP X20, X19, [X31 + 0x10]
	0x01CEB04C LDR X30, [X31], #0x20
	0x01CEB050 RET
	0x01CEB054 BL 0x1B6EA1C
	0x01CEB058 SUB X31, X31, 0x40
	0x01CEB05C STR X30, [X31 + 0x20]
	0x01CEB060 STP X20, X19, [X31 + 0x30]
	0x01CEB064 ADRP X20, 0x2538000
	0x01CEB068 LDRB W8, [X20 + 0x68D]
	0x01CEB06C MOV X19, X0
	0x01CEB070 TBNZ X8, 0x0, 0x1CEB088
	0x01CEB074 ADRP X0, 0x2265000
	0x01CEB078 LDR X0, [X0 + 0x3B0]
	0x01CEB07C BL 0x1B6E7F0
	0x01CEB080 MOVZ W8, 0x1
	0x01CEB084 STRB W8, [X20 + 0x68D]
	0x01CEB088 MOV X0, X19
	0x01CEB08C BL 0x1CE58BC
	0x01CEB090 MOV X0, X19
	0x01CEB094 BL 0x1CE4CE0
	0x01CEB098 TBZ X0, 0x0, 0x1CEB158
	0x01CEB09C MOV X0, X19
	0x01CEB0A0 BL 0x1CEAA60
	0x01CEB0A4 SUB W8, W0, 0x1
	0x01CEB0A8 CMP W8, 0x4
	0x01CEB0AC B.HI 0x1CEB100
	0x01CEB0B0 ADRP X9, 0xFFFFFFFFFEE01000
	0x01CEB0B4 ADD X9, X9, 0x958
	0x01CEB0B8 ADR X10, 0x10
	0x01CEB0BC LDRB W11, [X9, X8, LSL]
	0x01CEB0C0 ADD X10, X10, X11, 0x2, LSL
	0x01CEB0C4 BR X10
	0x01CEB0C8 MOV X0, X19
	0x01CEB0CC BL 0x1CEB168

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X8, -19140608
	007 Move X9, -19140608
	008 Move V1, [X8+2452]
	009 Move V2, [X9+2600]
	010 Move X19, X0
	011 Move S0, 1
	012 Move S3, 1
	013 Move X0, X31
	014 Call Gizmos.set_color, X0
	015 Move X0, [X19+56]
	016 Compare X0, 0
	017 JumpIfEqual {51}
	018 Move X1, X31
	019 Call Transform.get_position, X0
	020 Move X8, -19140608
	021 Move V3, [X8+2736]
	022 Move X0, X31
	023 Call Gizmos.DrawWireSphere, X0, V0
	024 Move X0, [X19+48]
	025 Compare X0, 0
	026 JumpIfEqual {51}
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X0, [X19+56]
	030 Compare X0, 0
	031 JumpIfEqual {51}
	032 Move X1, X31
	033 Move V8, V0
	034 Move V9, V1
	035 Move V10, V2
	036 Call Transform.get_position, X0
	037 Move V3, V0
	038 Move V4, V1
	039 Move V0, V8
	040 Move V1, V9
	041 Move X30, [X31+32]
	042 Move X19, [X31+40]
	043 Move D9, [X31+16]
	044 Move D8, [X31+24]
	045 Move V5, V2
	046 Move V2, V10
	047 Move X0, X31
	048 Move V10, [X31+48]
	049 Call Gizmos.DrawLine, X0, X1
	050 Return 
	051 Call 0x1B6FA1C

Method: System.Void OnFootStepEvent()

Disassembly:
	0x01CEB0D0 B 0x1CEB100
	0x01CEB0D4 MOV X0, X19
	0x01CEB0D8 BL 0x1CEB6F8
	0x01CEB0DC B 0x1CEB100
	0x01CEB0E0 MOV X0, X19
	0x01CEB0E4 BL 0x1CEBA80
	0x01CEB0E8 B 0x1CEB100
	0x01CEB0EC MOV X0, X19
	0x01CEB0F0 BL 0x1CEBEBC
	0x01CEB0F4 B 0x1CEB100
	0x01CEB0F8 MOV X0, X19
	0x01CEB0FC BL 0x1CEBF14
	0x01CEB100 MOV X0, X31
	0x01CEB104 BL 0x1CD2434
	0x01CEB108 TBZ X0, 0x0, 0x1CEB158
	0x01CEB10C LDR X20, [X19 + 0x168]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, [X0+120]
	005 Move X1, X31
	006 Move X19, X0
	007 Call Component.get_transform, X0
	008 Compare X0, 0
	009 JumpIfEqual {20}
	010 Move X1, X31
	011 Call Transform.get_position, X0
	012 Move V3, [X19+128]
	013 Move X0, X20
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X1, X31
	017 Move X30, [X31+32]
	018 Call SFXManager.PlaySFX, X0, X1, V0
	019 Return 
	020 Call 0x1B6FA1C

Method: System.Void SetFootstepVolume(System.Single volume)

Disassembly:
	0x01CEB110 CBZ X20, 0x1CEB158
	0x01CEB114 MOV X0, X19

ISIL:
	001 Move [X0+128], S0
	002 Return 

Method: System.Boolean get_isMove()

Disassembly:
	0x01CEB118 BL 0x1CEAA60
	0x01CEB11C ADRP X8, 0x2265000
	0x01CEB120 LDR X8, [X8 + 0x3B0]
	0x01CEB124 MOVN X9, 0x0
	0x01CEB128 STR W0, [X31 + 0x18]
	0x01CEB12C ADD X0, X31, 0x8
	0x01CEB130 LDR X8, [X8]
	0x01CEB134 MOV X1, X31
	0x01CEB138 STP X8, X9, [X31 + 0x8]
	0x01CEB13C BL 0x321AF98
	0x01CEB140 LDR X8, [X20 + 0x40]
	0x01CEB144 LDR X9, [X20 + 0x18]
	0x01CEB148 LDR X2, [X20 + 0x28]
	0x01CEB14C MOV X1, X0
	0x01CEB150 MOV X0, X8
	0x01CEB154 BLR X9
	0x01CEB158 LDP X20, X19, [X31 + 0x30]
	0x01CEB15C LDR X30, [X31 + 0x20]
	0x01CEB160 ADD X31, X31, 0x40
	0x01CEB164 RET
	0x01CEB168 SUB X31, X31, 0x80
	0x01CEB16C STP D15, D14, [X31 + 0x10]
	0x01CEB170 STP D13, D12, [X31 + 0x20]
	0x01CEB174 STP D11, D10, [X31 + 0x30]
	0x01CEB178 STP D9, D8, [X31 + 0x40]
	0x01CEB17C STR X30, [X31 + 0x50]
	0x01CEB180 STP X22, X21, [X31 + 0x60]
	0x01CEB184 STP X20, X19, [X31 + 0x70]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2539000
	006 Move X20, 0x2265000
	007 Move W8, [X21+1663]
	008 Move X20, [X20+3592]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2265000
	015 Move X0, [X0+3592]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1663], W8
	019 Move X0, [X20]
	020 Move X19, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1B6F8F8
	025 Compare X19, 0
	026 JumpIfEqual {38}
	027 Move X8, [X20]
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X2, X31
	032 Move X8, [X8+184]
	033 Move W1, [X8]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call Animator.GetBool, X0, X1
	037 Return X0
	038 Call 0x1B6FA1C

Method: System.Void SetHeadLookAt(System.Boolean isHeadLookAt)

Disassembly:
	0x01CEB188 ADRP X20, 0x2538000
	0x01CEB18C LDRB W8, [X20 + 0x68E]
	0x01CEB190 MOV X19, X0
	0x01CEB194 TBNZ X8, 0x0, 0x1CEB1D0
	0x01CEB198 ADRP X0, 0x2264000
	0x01CEB19C LDR X0, [X0 + 0xF10]
	0x01CEB1A0 BL 0x1B6E7F0
	0x01CEB1A4 ADRP X0, 0x2264000
	0x01CEB1A8 LDR X0, [X0 + 0xF18]
	0x01CEB1AC BL 0x1B6E7F0
	0x01CEB1B0 ADRP X0, 0x2264000
	0x01CEB1B4 LDR X0, [X0 + 0xDF0]
	0x01CEB1B8 BL 0x1B6E7F0
	0x01CEB1BC ADRP X0, 0x2265000
	0x01CEB1C0 LDR X0, [X0 + 0x3B8]
	0x01CEB1C4 BL 0x1B6E7F0
	0x01CEB1C8 MOVZ W8, 0x1
	0x01CEB1CC STRB W8, [X20 + 0x68E]
	0x01CEB1D0 ADD X20, X19, 0x188
	0x01CEB1D4 MOV X0, X19
	0x01CEB1D8 MOV X1, X20
	0x01CEB1DC STR X31, [X31 + 0x58]
	0x01CEB1E0 BL 0x1CE8818

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 And W8, W1, 1
	004 Move [X0+76], W8
	005 Move TEMP, X1
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfEqual {33}
	009 Move W8, [X0+132]
	010 Move X19, X0
	011 Compare W8, 0
	012 JumpIfEqual {33}
	013 Move X0, [X19+48]
	014 Compare X0, 0
	015 JumpIfEqual {36}
	016 Move S2, [X19+88]
	017 Move S3, [X19+92]
	018 Move S0, [X19+80]
	019 Move S1, [X19+84]
	020 Move X1, X31
	021 Call Transform.set_rotation, X0, X1
	022 Move X0, [X19+56]
	023 Compare X0, 0
	024 JumpIfEqual {36}
	025 Move S1, [X19+100]
	026 Move S2, [X19+104]
	027 Move V0, [X19+96]
	028 Move X1, X31
	029 Move X30, [X31+16]
	030 Move X19, [X31+24]
	031 Call Transform.set_position, X0, X1
	032 Return 
	033 Move X30, [X31+16]
	034 Move X19, [X31+24]
	035 Return 
	036 Call 0x1B6FA1C

Method: System.Void SetHeadLookAtPosition(UnityEngine.Vector3 position)

Disassembly:
	0x01CEB1E4 TBZ X0, 0x0, 0x1CEB4B0
	0x01CEB1E8 ADRP X8, 0x2264000
	0x01CEB1EC LDR X8, [X8 + 0xF10]
	0x01CEB1F0 ADRP X22, 0x2265000
	0x01CEB1F4 LDR X21, [X19 + 0x188]
	0x01CEB1F8 LDR X0, [X8]
	0x01CEB1FC LDR X22, [X22 + 0x3B8]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+56]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Transform.set_position, X0, X1
	008 Return 
	009 Call 0x1B6FA1C

Method: System.Void SetIdle()

Disassembly:
	0x01CEB200 BL 0x1B6EA0C
	0x01CEB204 LDR X2, [X22]
	0x01CEB208 MOV X1, X19
	0x01CEB20C MOV X3, X31
	0x01CEB210 MOV X22, X0
	0x01CEB214 BL 0x27B63FC
	0x01CEB218 CBZ X21, 0x1CEB6F0
	0x01CEB21C ADRP X8, 0x2264000
	0x01CEB220 LDR X8, [X8 + 0xF18]
	0x01CEB224 MOV X0, X21
	0x01CEB228 MOV X1, X22
	0x01CEB22C LDR X2, [X8]
	0x01CEB230 BL 0x2E482B8
	0x01CEB234 LDR X0, [X20]
	0x01CEB238 CBZ X0, 0x1CEB6F0
	0x01CEB23C ADRP X8, 0x2264000
	0x01CEB240 LDR X8, [X8 + 0xDF0]
	0x01CEB244 MOV W1, W31
	0x01CEB248 LDR X2, [X8]
	0x01CEB24C BL 0x2E46254
	0x01CEB250 CBZ X0, 0x1CEB6F0
	0x01CEB254 MOV X1, X31
	0x01CEB258 BL 0x3A9B084
	0x01CEB25C CBZ X0, 0x1CEB6F0
	0x01CEB260 MOV X1, X31
	0x01CEB264 BL 0x3AA7658
	0x01CEB268 ADRP X20, 0x2538000
	0x01CEB26C LDR V11, [X19 + 0x1B8]
	0x01CEB270 LDR V13, [X19 + 0x1BC]
	0x01CEB274 LDRB W8, [X20 + 0x441]
	0x01CEB278 LDR V14, [X19 + 0x1C0]
	0x01CEB27C MOV V8.16B, V0.16B
	0x01CEB280 MOV V9.16B, V1.16B
	0x01CEB284 MOV V10.16B, V2.16B
	0x01CEB288 CBNZ W8, 0x1CEB2A0
	0x01CEB28C ADRP X0, 0x2262000
	0x01CEB290 LDR X0, [X0 + 0x488]
	0x01CEB294 BL 0x1B6E7F0
	0x01CEB298 MOVZ W8, 0x1
	0x01CEB29C STRB W8, [X20 + 0x441]
	0x01CEB2A0 ADRP X21, 0x2262000
	0x01CEB2A4 LDR X21, [X21 + 0x488]
	0x01CEB2A8 FSUB S12, S8, S11
	0x01CEB2AC FSUB S9, S9, S13

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2539000
	006 Move X21, 0x2265000
	007 Move W8, [X20+1664]
	008 Move X21, [X21+3592]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2265000
	015 Move X0, [X0+3592]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1664], W8
	019 Move X0, [X21]
	020 Move X20, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1B6F8F8
	025 Compare X20, 0
	026 JumpIfEqual {56}
	027 Move X8, [X21]
	028 Move X0, X20
	029 Move X2, X31
	030 Move X8, [X8+184]
	031 Move W1, [X8+32]
	032 Call Animator.SetTrigger, X0, X1
	033 Move X0, [X19+32]
	034 Compare X0, 0
	035 JumpIfEqual {56}
	036 Move X8, [X21]
	037 Move W2, W31
	038 Move X3, X31
	039 Move X8, [X8+184]
	040 Move W1, [X8]
	041 Call Animator.SetBool, X0, X1, X2
	042 Move X0, [X19+32]
	043 Compare X0, 0
	044 JumpIfEqual {56}
	045 Move X8, [X21]
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move W2, W31
	049 Move X3, X31
	050 Move X8, [X8+184]
	051 Move W1, [X8+4]
	052 Move X30, [X31+32]
	053 Move X21, [X31+40]
	054 Call Animator.SetBool, X0, X1, X2
	055 Return 
	056 Call 0x1B6FA1C

Method: System.Void SetWalk(System.Single speed = 1)

Disassembly:
	0x01CEB2B0 FSUB S8, S10, S14
	0x01CEB2B4 LDR X0, [X21]
	0x01CEB2B8 LDR W8, [X0 + 0xE0]
	0x01CEB2BC CBNZ W8, 0x1CEB2C4
	0x01CEB2C0 BL 0x1B6E8F8
	0x01CEB2C4 ADRP X8, 0xFFFFFFFFFEDBE000
	0x01CEB2C8 FMUL S0, S12, S12
	0x01CEB2CC FMUL S1, S9, S9
	0x01CEB2D0 LDR V11, [X8 + 0xB64]
	0x01CEB2D4 FADD S0, S0, S1
	0x01CEB2D8 FMUL S1, S8, S8
	0x01CEB2DC FADD S0, S1, S0
	0x01CEB2E0 FSQRT S2, S0
	0x01CEB2E4 FCMP S2, S11
	0x01CEB2E8 B.LE 0x1CEB2FC
	0x01CEB2EC FDIV S0, S12, S2
	0x01CEB2F0 FDIV S1, S9, S2
	0x01CEB2F4 FDIV S2, S8, S2
	0x01CEB2F8 B 0x1CEB334
	0x01CEB2FC ADRP X22, 0x2538000
	0x01CEB300 LDRB W8, [X22 + 0x43F]
	0x01CEB304 CBNZ W8, 0x1CEB31C
	0x01CEB308 ADRP X0, 0x2262000
	0x01CEB30C LDR X0, [X0 + 0x480]
	0x01CEB310 BL 0x1B6E7F0
	0x01CEB314 MOVZ W8, 0x1
	0x01CEB318 STRB W8, [X22 + 0x43F]
	0x01CEB31C ADRP X8, 0x2262000
	0x01CEB320 LDR X8, [X8 + 0x480]
	0x01CEB324 LDR X8, [X8]
	0x01CEB328 LDR X8, [X8 + 0xB8]
	0x01CEB32C LDP S0, S1, [X8]
	0x01CEB330 LDR V2, [X8 + 0x8]
	0x01CEB334 LDR X8, [X19 + 0x1D8]
	0x01CEB338 CBZ X8, 0x1CEB6F0
	0x01CEB33C LDR V4, [X19 + 0x1C4]
	0x01CEB340 LDR V5, [X19 + 0x1C8]
	0x01CEB344 LDR V3, [X19 + 0x1CC]
	0x01CEB348 LDR W9, [X8 + 0x18]
	0x01CEB34C FMUL S0, S0, S4
	0x01CEB350 FMUL S1, S1, S5
	0x01CEB354 FMUL S2, S2, S3
	0x01CEB358 FADD S0, S0, S1
	0x01CEB35C FADD S0, S2, S0
	0x01CEB360 FCMP S0, 0x0
	0x01CEB364 B.LE 0x1CEB37C
	0x01CEB368 CBZ W9, 0x1CEB6F4
	0x01CEB36C ADD X9, X8, 0x20
	0x01CEB370 ADD X10, X8, 0x24
	0x01CEB374 ADD X8, X8, 0x28
	0x01CEB378 B 0x1CEB390
	0x01CEB37C CMP W9, 0x1
	0x01CEB380 B.LS 0x1CEB6F4
	0x01CEB384 ADD X9, X8, 0x2C
	0x01CEB388 ADD X10, X8, 0x30

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2539000
	007 Move X21, 0x2265000
	008 Move W8, [X20+1665]
	009 Move X21, [X21+3592]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2265000
	017 Move X0, [X0+3592]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X20+1665], W8
	021 Move X0, [X21]
	022 Move X20, [X19+32]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1B6F8F8
	027 Compare X20, 0
	028 JumpIfEqual {68}
	029 Move X8, [X21]
	030 Move W2, 1
	031 Move X0, X20
	032 Move X3, X31
	033 Move X8, [X8+184]
	034 Move W1, [X8]
	035 Call Animator.SetBool, X0, X1, X2
	036 Move X0, [X19+32]
	037 Compare X0, 0
	038 JumpIfEqual {68}
	039 Move X8, [X21]
	040 Move W2, W31
	041 Move X3, X31
	042 Move X8, [X8+184]
	043 Move W1, [X8+4]
	044 Call Animator.SetBool, X0, X1, X2
	045 Move X0, [X19+32]
	046 Compare X0, 0
	047 JumpIfEqual {68}
	048 Move X8, [X21]
	049 Move V0, V8
	050 Move X2, X31
	051 Move X8, [X8+184]
	052 Move W1, [X8+8]
	053 Call Animator.SetFloat, X0, X1, V0
	054 Move X0, [X19+32]
	055 Compare X0, 0
	056 JumpIfEqual {68}
	057 Move X8, [X21]
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X30, [X31+16]
	061 Move X21, [X31+24]
	062 Move X2, X31
	063 Move X8, [X8+184]
	064 Move W1, [X8+32]
	065 Move V8, [X31+48]
	066 Call Animator.SetTrigger, X0, X1
	067 Return 
	068 Call 0x1B6FA1C

Method: System.Void SetRun(System.Single speed = 1)

Disassembly:
	0x01CEB38C ADD X8, X8, 0x34
	0x01CEB390 LDR V8, [X8]
	0x01CEB394 LDR V9, [X10]
	0x01CEB398 LDR V10, [X9]
	0x01CEB39C LDR V12, [X19 + 0x1B8]
	0x01CEB3A0 LDR V13, [X19 + 0x1BC]
	0x01CEB3A4 LDRB W8, [X20 + 0x441]
	0x01CEB3A8 LDR V15, [X19 + 0x1C0]
	0x01CEB3AC CBNZ W8, 0x1CEB3C4
	0x01CEB3B0 ADRP X0, 0x2262000
	0x01CEB3B4 LDR X0, [X0 + 0x488]
	0x01CEB3B8 BL 0x1B6E7F0
	0x01CEB3BC MOVZ W8, 0x1
	0x01CEB3C0 STRB W8, [X20 + 0x441]
	0x01CEB3C4 LDR X0, [X21]
	0x01CEB3C8 FSUB S14, S10, S12
	0x01CEB3CC FSUB S13, S9, S13
	0x01CEB3D0 FSUB S12, S8, S15
	0x01CEB3D4 LDR W8, [X0 + 0xE0]
	0x01CEB3D8 CBNZ W8, 0x1CEB3E0
	0x01CEB3DC BL 0x1B6E8F8
	0x01CEB3E0 FMUL S0, S14, S14
	0x01CEB3E4 FMUL S1, S13, S13
	0x01CEB3E8 FADD S0, S0, S1
	0x01CEB3EC FMUL S1, S12, S12
	0x01CEB3F0 FADD S0, S1, S0
	0x01CEB3F4 FSQRT S2, S0
	0x01CEB3F8 FCMP S2, S11
	0x01CEB3FC B.LE 0x1CEB410
	0x01CEB400 FDIV S0, S14, S2
	0x01CEB404 FDIV S1, S13, S2
	0x01CEB408 FDIV S2, S12, S2
	0x01CEB40C B 0x1CEB448
	0x01CEB410 ADRP X20, 0x2538000
	0x01CEB414 LDRB W8, [X20 + 0x43F]
	0x01CEB418 CBNZ W8, 0x1CEB430
	0x01CEB41C ADRP X0, 0x2262000
	0x01CEB420 LDR X0, [X0 + 0x480]
	0x01CEB424 BL 0x1B6E7F0
	0x01CEB428 MOVZ W8, 0x1
	0x01CEB42C STRB W8, [X20 + 0x43F]
	0x01CEB430 ADRP X8, 0x2262000
	0x01CEB434 LDR X8, [X8 + 0x480]
	0x01CEB438 LDR X8, [X8]
	0x01CEB43C LDR X8, [X8 + 0xB8]
	0x01CEB440 LDP S0, S1, [X8]
	0x01CEB444 LDR V2, [X8 + 0x8]
	0x01CEB448 LDR X0, [X19 + 0xC8]
	0x01CEB44C STR S0, [X19 + 0x190]
	0x01CEB450 STR S1, [X19 + 0x194]
	0x01CEB454 STR S2, [X19 + 0x198]
	0x01CEB458 CBZ X0, 0x1CEB6F0
	0x01CEB45C MOV X1, X31
	0x01CEB460 BL 0x3A4A8AC
	0x01CEB464 ADRP X8, 0xFFFFFFFFFEDBE000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2539000
	007 Move X21, 0x2265000
	008 Move W8, [X20+1666]
	009 Move X21, [X21+3592]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2265000
	017 Move X0, [X0+3592]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X20+1666], W8
	021 Move X0, [X21]
	022 Move X20, [X19+32]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1B6F8F8
	027 Compare X20, 0
	028 JumpIfEqual {68}
	029 Move X8, [X21]
	030 Move W2, 1
	031 Move X0, X20
	032 Move X3, X31
	033 Move X8, [X8+184]
	034 Move W1, [X8]
	035 Call Animator.SetBool, X0, X1, X2
	036 Move X0, [X19+32]
	037 Compare X0, 0
	038 JumpIfEqual {68}
	039 Move X8, [X21]
	040 Move W2, 1
	041 Move X3, X31
	042 Move X8, [X8+184]
	043 Move W1, [X8+4]
	044 Call Animator.SetBool, X0, X1, X2
	045 Move X0, [X19+32]
	046 Compare X0, 0
	047 JumpIfEqual {68}
	048 Move X8, [X21]
	049 Move V0, V8
	050 Move X2, X31
	051 Move X8, [X8+184]
	052 Move W1, [X8+12]
	053 Call Animator.SetFloat, X0, X1, V0
	054 Move X0, [X19+32]
	055 Compare X0, 0
	056 JumpIfEqual {68}
	057 Move X8, [X21]
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X30, [X31+16]
	061 Move X21, [X31+24]
	062 Move X2, X31
	063 Move X8, [X8+184]
	064 Move W1, [X8+32]
	065 Move V8, [X31+48]
	066 Call Animator.SetTrigger, X0, X1
	067 Return 
	068 Call 0x1B6FA1C

Method: System.Void SetAnticipation()

Disassembly:
	0x01CEB468 FSUB S0, S0, S10
	0x01CEB46C FSUB S1, S1, S9
	0x01CEB470 LDR V3, [X8 + 0x934]
	0x01CEB474 FSUB S2, S2, S8
	0x01CEB478 FMUL S0, S0, S0
	0x01CEB47C FMUL S1, S1, S1
	0x01CEB480 FADD S0, S0, S1
	0x01CEB484 FMUL S1, S2, S2
	0x01CEB488 FADD S0, S1, S0
	0x01CEB48C FCMP S0, S3
	0x01CEB490 B.MI 0x1CEB4B0
	0x01CEB494 LDR X0, [X19 + 0xC8]
	0x01CEB498 CBZ X0, 0x1CEB6F0
	0x01CEB49C MOV V0.16B, V10.16B
	0x01CEB4A0 MOV V1.16B, V9.16B
	0x01CEB4A4 MOV V2.16B, V8.16B
	0x01CEB4A8 MOV X1, X31
	0x01CEB4AC BL 0x3A4A810
	0x01CEB4B0 LDR V8, [X19 + 0x190]
	0x01CEB4B4 LDR V9, [X19 + 0x194]
	0x01CEB4B8 LDR V10, [X19 + 0x198]
	0x01CEB4BC MOV X0, X19
	0x01CEB4C0 MOV X1, X31
	0x01CEB4C4 BL 0x3A9B084
	0x01CEB4C8 CBZ X0, 0x1CEB6F0
	0x01CEB4CC MOV X1, X31
	0x01CEB4D0 BL 0x3AA7AD0
	0x01CEB4D4 ADRP X8, 0xFFFFFFFFFEDBE000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2539000
	006 Move X20, 0x2265000
	007 Move W8, [X21+1667]
	008 Move X20, [X20+3592]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2265000
	015 Move X0, [X0+3592]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1667], W8
	019 Move X0, [X20]
	020 Move X19, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1B6F8F8
	025 Compare X19, 0
	026 JumpIfEqual {38}
	027 Move X8, [X20]
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X2, X31
	032 Move X8, [X8+184]
	033 Move W1, [X8+16]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call Animator.SetTrigger, X0, X1
	037 Return 
	038 Call 0x1B6FA1C

Method: System.Void SetAttack()

Disassembly:
	0x01CEB4D8 LDR V3, [X8 + 0xA58]
	0x01CEB4DC FMUL S0, S8, S0
	0x01CEB4E0 FMUL S1, S9, S1
	0x01CEB4E4 FADD S0, S0, S1
	0x01CEB4E8 FMUL S1, S10, S2
	0x01CEB4EC FADD S0, S1, S0
	0x01CEB4F0 FCMP S0, S3
	0x01CEB4F4 B.PL 0x1CEB6B0
	0x01CEB4F8 LDR X8, [X19 + 0xB8]
	0x01CEB4FC CBZ X8, 0x1CEB6F0
	0x01CEB500 LDR V11, [X8 + 0x40]
	0x01CEB504 MOV X0, X19
	0x01CEB508 MOV X1, X31
	0x01CEB50C BL 0x3A9B084
	0x01CEB510 CBZ X0, 0x1CEB6F0
	0x01CEB514 MOV X1, X31
	0x01CEB518 STR S11, [X31 + 0xC]
	0x01CEB51C BL 0x3AA7AD0
	0x01CEB520 ADRP X20, 0x2538000
	0x01CEB524 LDRB W8, [X20 + 0x457]
	0x01CEB528 MOV V11.16B, V0.16B
	0x01CEB52C MOV V12.16B, V1.16B
	0x01CEB530 MOV V13.16B, V2.16B
	0x01CEB534 CBNZ W8, 0x1CEB54C
	0x01CEB538 ADRP X0, 0x2262000
	0x01CEB53C LDR X0, [X0 + 0x488]
	0x01CEB540 BL 0x1B6E7F0
	0x01CEB544 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2539000
	006 Move X20, 0x2265000
	007 Move W8, [X21+1668]
	008 Move X20, [X20+3592]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2265000
	015 Move X0, [X0+3592]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1668], W8
	019 Move X0, [X20]
	020 Move X19, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1B6F8F8
	025 Compare X19, 0
	026 JumpIfEqual {38}
	027 Move X8, [X20]
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X2, X31
	032 Move X8, [X8+184]
	033 Move W1, [X8+20]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call Animator.SetTrigger, X0, X1
	037 Return 
	038 Call 0x1B6FA1C

Method: System.Void SetHit()

Disassembly:
	0x01CEB548 STRB W8, [X20 + 0x457]
	0x01CEB54C ADRP X20, 0x2262000
	0x01CEB550 LDR X20, [X20 + 0x488]
	0x01CEB554 FMUL S0, S8, S8
	0x01CEB558 FMUL S1, S9, S9
	0x01CEB55C FADD S0, S0, S1
	0x01CEB560 LDR X0, [X20]
	0x01CEB564 FMUL S1, S10, S10
	0x01CEB568 FADD S14, S1, S0
	0x01CEB56C FMUL S0, S11, S11
	0x01CEB570 LDR W8, [X0 + 0xE0]
	0x01CEB574 FMUL S1, S12, S12
	0x01CEB578 FADD S0, S0, S1
	0x01CEB57C FMUL S1, S13, S13
	0x01CEB580 FADD S15, S1, S0
	0x01CEB584 CBNZ W8, 0x1CEB58C
	0x01CEB588 BL 0x1B6E8F8
	0x01CEB58C ADRP X8, 0xFFFFFFFFFEDBE000
	0x01CEB590 LDR V1, [X8 + 0x9E4]
	0x01CEB594 FMUL S0, S14, S15
	0x01CEB598 FSQRT S0, S0
	0x01CEB59C FMOV S14, W31
	0x01CEB5A0 FCMP S0, S1
	0x01CEB5A4 B.MI 0x1CEB5FC
	0x01CEB5A8 LDR X0, [X20]
	0x01CEB5AC FMUL S1, S8, S11
	0x01CEB5B0 FMUL S2, S9, S12
	0x01CEB5B4 FMUL S3, S10, S13

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2539000
	006 Move X20, 0x2265000
	007 Move W8, [X21+1669]
	008 Move X20, [X20+3592]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2265000
	015 Move X0, [X0+3592]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1669], W8
	019 Move X0, [X20]
	020 Move X19, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1B6F8F8
	025 Compare X19, 0
	026 JumpIfEqual {38}
	027 Move X8, [X20]
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X2, X31
	032 Move X8, [X8+184]
	033 Move W1, [X8+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call Animator.SetTrigger, X0, X1
	037 Return 
	038 Call 0x1B6FA1C

Method: System.Void SetStun(System.Boolean isStun)

Disassembly:
	0x01CEB5B8 FADD S1, S1, S2
	0x01CEB5BC FADD S1, S3, S1
	0x01CEB5C0 LDR W8, [X0 + 0xE0]
	0x01CEB5C4 FDIV S0, S1, S0
	0x01CEB5C8 FMOV S1, 1
	0x01CEB5CC FMOV S2, -1
	0x01CEB5D0 FMIN S1, S0, S1
	0x01CEB5D4 FCMP S0, S2
	0x01CEB5D8 FCSEL S11, S1, S2, PL
	0x01CEB5DC CBNZ W8, 0x1CEB5E4
	0x01CEB5E0 BL 0x1B6E8F8
	0x01CEB5E4 FCVT S0, S11
	0x01CEB5E8 BL 0x3D19890
	0x01CEB5EC ADRP X8, 0xFFFFFFFFFEDBE000
	0x01CEB5F0 LDR V1, [X8 + 0xE1C]
	0x00000000 INVALID
	0x01CEB5F8 FMUL S14, S0, S1
	0x01CEB5FC MOV X0, X19
	0x01CEB600 MOV X1, X31
	0x01CEB604 BL 0x3A9B084
	0x01CEB608 MOV X20, X0
	0x01CEB60C MOV X0, X19
	0x01CEB610 MOV X1, X31
	0x01CEB614 BL 0x3A9B084
	0x01CEB618 CBZ X0, 0x1CEB6F0
	0x01CEB61C MOV X1, X31
	0x01CEB620 BL 0x3AA5FBC
	0x01CEB624 MOV V11.16B, V0.16B
	0x01CEB628 MOV V12.16B, V1.16B
	0x01CEB62C MOV V13.16B, V2.16B
	0x01CEB630 MOV V0.16B, V8.16B
	0x01CEB634 MOV V1.16B, V9.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2539000
	007 Move X21, 0x2265000
	008 Move W8, [X22+1670]
	009 Move X21, [X21+3592]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2265000
	017 Move X0, [X0+3592]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X22+1670], W8
	021 Move X0, [X21]
	022 Move X20, [X20+32]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1B6F8F8
	027 Compare X20, 0
	028 JumpIfEqual {42}
	029 Move X8, [X21]
	030 And W2, W19, 1
	031 Move X0, X20
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X8, [X8+184]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X3, X31
	038 Move W1, [X8+36]
	039 Move X30, [X31+48]
	040 Call Animator.SetBool, X0, X1, X2
	041 Return 
	042 Call 0x1B6FA1C

Method: System.Void SetSearch()

Disassembly:
	0x01CEB638 MOV V2.16B, V10.16B
	0x01CEB63C MOV X0, X31
	0x01CEB640 STR S3, [X31 + 0x8]
	0x01CEB644 BL 0x3A92C2C
	0x01CEB648 LDR X0, [X19 + 0x38]
	0x01CEB64C CBZ X0, 0x1CEB6F0
	0x01CEB650 MOV V8.16B, V0.16B
	0x01CEB654 LDR V0, [X31 + 0xC]
	0x01CEB658 MOV X1, X31
	0x01CEB65C MOV V9.16B, V1.16B
	0x01CEB660 MOV V10.16B, V2.16B
	0x01CEB664 MOV V15.16B, V3.16B
	0x01CEB668 FDIV S14, S0, S14
	0x01CEB66C BL 0x1D87058
	0x01CEB670 LDR V3, [X31 + 0x8]
	0x01CEB674 FMUL S0, S14, S0
	0x01CEB678 STR S0, [X31]
	0x01CEB67C MOV V0.16B, V11.16B
	0x01CEB680 MOV V1.16B, V12.16B
	0x01CEB684 MOV V2.16B, V13.16B
	0x01CEB688 MOV V4.16B, V8.16B
	0x01CEB68C MOV V5.16B, V9.16B
	0x01CEB690 MOV V6.16B, V10.16B
	0x01CEB694 MOV V7.16B, V15.16B
	0x01CEB698 MOV X0, X31
	0x01CEB69C BL 0x3A92660
	0x01CEB6A0 CBZ X20, 0x1CEB6F0
	0x01CEB6A4 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2539000
	006 Move X20, 0x2265000
	007 Move W8, [X21+1671]
	008 Move X20, [X20+3592]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2265000
	015 Move X0, [X0+3592]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1671], W8
	019 Move X0, [X20]
	020 Move X19, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1B6F8F8
	025 Compare X19, 0
	026 JumpIfEqual {38}
	027 Move X8, [X20]
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X2, X31
	032 Move X8, [X8+184]
	033 Move W1, [X8+28]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call Animator.SetTrigger, X0, X1
	037 Return 
	038 Call 0x1B6FA1C

Method: System.Void SetDeath(System.Boolean isDie)

Disassembly:
	0x01CEB6A8 MOV X1, X31
	0x01CEB6AC BL 0x3AA7878
	0x01CEB6B0 ADD X1, X31, 0x58
	0x01CEB6B4 MOV X0, X19
	0x01CEB6B8 BL 0x1CE85FC
	0x01CEB6BC TBZ X0, 0x0, 0x1CEB6CC
	0x01CEB6C0 LDR X1, [X31 + 0x58]
	0x01CEB6C4 MOV X0, X19
	0x01CEB6C8 BL 0x1CEBF84
	0x01CEB6CC LDP X20, X19, [X31 + 0x70]
	0x01CEB6D0 LDP X22, X21, [X31 + 0x60]
	0x01CEB6D4 LDR X30, [X31 + 0x50]
	0x01CEB6D8 LDP D9, D8, [X31 + 0x40]
	0x01CEB6DC LDP D11, D10, [X31 + 0x30]
	0x01CEB6E0 LDP D13, D12, [X31 + 0x20]
	0x01CEB6E4 LDP D15, D14, [X31 + 0x10]
	0x01CEB6E8 ADD X31, X31, 0x80
	0x01CEB6EC RET
	0x01CEB6F0 BL 0x1B6EA1C
	0x01CEB6F4 BL 0x1B6EA24
	0x01CEB6F8 SUB X31, X31, 0x70
	0x01CEB6FC STP D15, D14, [X31 + 0x10]
	0x01CEB700 STP D13, D12, [X31 + 0x20]
	0x01CEB704 STP D11, D10, [X31 + 0x30]
	0x01CEB708 STP D9, D8, [X31 + 0x40]
	0x01CEB70C STP X30, X21, [X31 + 0x50]
	0x01CEB710 STP X20, X19, [X31 + 0x60]
	0x01CEB714 MOV X19, X0
	0x01CEB718 LDR X0, [X0 + 0x140]
	0x01CEB71C CBZ X0, 0x1CEBA7C
	0x01CEB720 MOV X1, X31
	0x01CEB724 BL 0x3A9B084

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2539000
	007 Move X21, 0x2265000
	008 Move W8, [X22+1672]
	009 Move X21, [X21+3592]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2265000
	017 Move X0, [X0+3592]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X22+1672], W8
	021 Move X0, [X21]
	022 Move X20, [X20+32]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1B6F8F8
	027 Compare X20, 0
	028 JumpIfEqual {42}
	029 Move X8, [X21]
	030 And W2, W19, 1
	031 Move X0, X20
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X8, [X8+184]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X3, X31
	038 Move W1, [X8+40]
	039 Move X30, [X31+48]
	040 Call Animator.SetBool, X0, X1, X2
	041 Return 
	042 Call 0x1B6FA1C

Method: System.Void SetMove(System.Boolean isMove, System.Boolean isRun, System.Single speed)

Disassembly:
	0x01CEB728 CBZ X0, 0x1CEBA7C
	0x01CEB72C MOV X1, X31
	0x01CEB730 BL 0x3AA7658
	0x01CEB734 MOV X0, X19
	0x01CEB738 MOV X1, X31
	0x01CEB73C MOV V8.16B, V0.16B
	0x01CEB740 MOV V9.16B, V1.16B
	0x01CEB744 MOV V10.16B, V2.16B
	0x01CEB748 BL 0x3A9B084
	0x01CEB74C CBZ X0, 0x1CEBA7C
	0x01CEB750 MOV X1, X31
	0x01CEB754 BL 0x3AA7658
	0x01CEB758 ADRP X20, 0x2538000
	0x01CEB75C LDRB W8, [X20 + 0x441]
	0x01CEB760 MOV V11.16B, V0.16B
	0x01CEB764 MOV V12.16B, V1.16B
	0x01CEB768 MOV V13.16B, V2.16B
	0x01CEB76C CBNZ W8, 0x1CEB784
	0x01CEB770 ADRP X0, 0x2262000
	0x01CEB774 LDR X0, [X0 + 0x488]
	0x01CEB778 BL 0x1B6E7F0
	0x01CEB77C MOVZ W8, 0x1
	0x01CEB780 STRB W8, [X20 + 0x441]
	0x01CEB784 ADRP X20, 0x2262000
	0x01CEB788 LDR X20, [X20 + 0x488]
	0x01CEB78C FSUB S11, S8, S11
	0x01CEB790 FSUB S9, S9, S12
	0x01CEB794 FSUB S8, S10, S13
	0x01CEB798 LDR X0, [X20]
	0x01CEB79C LDR W8, [X0 + 0xE0]
	0x01CEB7A0 CBNZ W8, 0x1CEB7A8
	0x01CEB7A4 BL 0x1B6E8F8
	0x01CEB7A8 FMUL S0, S11, S11
	0x01CEB7AC FMUL S1, S9, S9
	0x01CEB7B0 ADRP X8, 0xFFFFFFFFFEDBE000
	0x01CEB7B4 FADD S0, S0, S1
	0x01CEB7B8 LDR V1, [X8 + 0xB64]
	0x01CEB7BC FMUL S2, S8, S8
	0x01CEB7C0 FADD S0, S2, S0
	0x01CEB7C4 FSQRT S0, S0
	0x01CEB7C8 FCMP S0, S1
	0x01CEB7CC B.LE 0x1CEB7E0
	0x01CEB7D0 FDIV S14, S11, S0
	0x01CEB7D4 FDIV S12, S9, S0
	0x01CEB7D8 FDIV S13, S8, S0
	0x01CEB7DC B 0x1CEB818
	0x01CEB7E0 ADRP X21, 0x2538000
	0x01CEB7E4 LDRB W8, [X21 + 0x43F]
	0x01CEB7E8 CBNZ W8, 0x1CEB800
	0x01CEB7EC ADRP X0, 0x2262000
	0x01CEB7F0 LDR X0, [X0 + 0x480]
	0x01CEB7F4 BL 0x1B6E7F0

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x2539000
	009 Move X23, 0x2265000
	010 Move W8, [X22+1673]
	011 Move X23, [X23+3592]
	012 Move V8, V0
	013 Move W20, W2
	014 Move W21, W1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x2265000
	021 Move X0, [X0+3592]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X22+1673], W8
	025 Move X0, [X23]
	026 Move X22, [X19+32]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1B6F8F8
	031 Compare X22, 0
	032 JumpIfEqual {66}
	033 Move X8, [X23]
	034 And W2, W21, 1
	035 Move X0, X22
	036 Move X3, X31
	037 Move X8, [X8+184]
	038 Move W1, [X8]
	039 Call Animator.SetBool, X0, X1, X2
	040 Move X0, [X19+32]
	041 Compare X0, 0
	042 JumpIfEqual {66}
	043 Move X8, [X23]
	044 And W2, W20, 1
	045 Move X3, X31
	046 Move X8, [X8+184]
	047 Move W1, [X8+4]
	048 Call Animator.SetBool, X0, X1, X2
	049 Move X0, [X19+32]
	050 Compare X0, 0
	051 JumpIfEqual {66}
	052 Move X8, [X23]
	053 Move X20, [X31+48]
	054 Move X19, [X31+56]
	055 Move X22, [X31+32]
	056 Move X21, [X31+40]
	057 Move X30, [X31+16]
	058 Move X23, [X31+24]
	059 Move X8, [X8+184]
	060 Move V0, V8
	061 Move X2, X31
	062 Move W1, [X8+12]
	063 Move V8, [X31+64]
	064 Call Animator.SetFloat, X0, X1, V0
	065 Return 
	066 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CEB7F8 MOVZ W8, 0x1
	0x01CEB7FC STRB W8, [X21 + 0x43F]
	0x01CEB800 ADRP X8, 0x2262000
	0x01CEB804 LDR X8, [X8 + 0x480]
	0x01CEB808 LDR X8, [X8]
	0x01CEB80C LDR X8, [X8 + 0xB8]
	0x01CEB810 LDP S14, S12, [X8]
	0x01CEB814 LDR V13, [X8 + 0x8]
	0x01CEB818 LDR V0, [X19 + 0x1C4]
	0x01CEB81C LDR V1, [X19 + 0x1C8]

ISIL:
	001 Move X8, -19124224
	002 Move V0, [X8+2784]
	003 Move W8, 1
	004 Move W9, 0x3F800000
	005 Move X1, X31
	006 Move [X0+72], W31
	007 Move [X0+76], W8
	008 Move [X0+64], D0
	009 Move [X0+128], W9
	010 Call MonoBehaviour..ctor, X0
	011 Return 

Method: System.Void .cctor()

Disassembly:
	0x01CEB820 LDR V2, [X19 + 0x1CC]
	0x01CEB824 LDR X8, [X19 + 0xB8]
	0x01CEB828 FMUL S3, S14, S0
	0x01CEB82C FMUL S4, S12, S1
	0x01CEB830 FADD S3, S3, S4
	0x01CEB834 FMUL S4, S13, S2
	0x01CEB838 FADD S3, S4, S3
	0x01CEB83C FNEG S4, S0
	0x01CEB840 FCMP S3, 0x0
	0x01CEB844 FNEG S3, S1
	0x01CEB848 FCSEL S0, S0, S4, GT
	0x01CEB84C FNEG S4, S2
	0x01CEB850 FCSEL S1, S1, S3, GT
	0x01CEB854 FCSEL S2, S2, S4, GT
	0x01CEB858 STR S0, [X19 + 0x19C]
	0x01CEB85C STR S1, [X19 + 0x1A0]
	0x01CEB860 STR S2, [X19 + 0x1A4]
	0x01CEB864 CBZ X8, 0x1CEBA7C
	0x01CEB868 LDR V8, [X8 + 0x40]
	0x01CEB86C MOV X0, X19
	0x01CEB870 MOV X1, X31
	0x01CEB874 BL 0x3A9B084
	0x01CEB878 CBZ X0, 0x1CEBA7C
	0x01CEB87C MOV X1, X31
	0x01CEB880 STR S8, [X31 + 0xC]
	0x01CEB884 BL 0x3AA7AD0
	0x01CEB888 ADRP X21, 0x2538000
	0x01CEB88C LDRB W8, [X21 + 0x457]
	0x01CEB890 MOV V8.16B, V0.16B
	0x01CEB894 MOV V9.16B, V1.16B
	0x01CEB898 MOV V10.16B, V2.16B
	0x01CEB89C CBNZ W8, 0x1CEB8B4
	0x01CEB8A0 ADRP X0, 0x2262000
	0x01CEB8A4 LDR X0, [X0 + 0x488]
	0x01CEB8A8 BL 0x1B6E7F0
	0x01CEB8AC MOVZ W8, 0x1
	0x01CEB8B0 STRB W8, [X21 + 0x457]
	0x01CEB8B4 LDR X0, [X20]
	0x01CEB8B8 FMUL S0, S14, S14
	0x01CEB8BC FMUL S1, S12, S12
	0x01CEB8C0 FADD S0, S0, S1
	0x01CEB8C4 FMUL S1, S13, S13
	0x01CEB8C8 LDR W8, [X0 + 0xE0]
	0x01CEB8CC FADD S11, S1, S0
	0x01CEB8D0 FMUL S0, S8, S8
	0x01CEB8D4 FMUL S1, S9, S9
	0x01CEB8D8 FADD S0, S0, S1
	0x01CEB8DC FMUL S1, S10, S10
	0x01CEB8E0 FADD S15, S1, S0
	0x01CEB8E4 CBNZ W8, 0x1CEB8EC
	0x01CEB8E8 BL 0x1B6E8F8
	0x01CEB8EC ADRP X8, 0xFFFFFFFFFEDBE000
	0x01CEB8F0 LDR V1, [X8 + 0x9E4]
	0x01CEB8F4 FMUL S0, S11, S15
	0x01CEB8F8 FSQRT S0, S0
	0x01CEB8FC FMOV S11, W31
	0x01CEB900 FCMP S0, S1
	0x01CEB904 B.MI 0x1CEB95C
	0x01CEB908 LDR X0, [X20]
	0x01CEB90C FMUL S1, S14, S8
	0x01CEB910 FMUL S2, S12, S9
	0x01CEB914 FMUL S3, S13, S10
	0x01CEB918 FADD S1, S1, S2
	0x01CEB91C FADD S1, S3, S1
	0x01CEB920 LDR W8, [X0 + 0xE0]
	0x01CEB924 FDIV S0, S1, S0
	0x01CEB928 FMOV S1, 1
	0x01CEB92C FMOV S2, -1
	0x01CEB930 FMIN S1, S0, S1
	0x01CEB934 FCMP S0, S2
	0x01CEB938 FCSEL S8, S1, S2, PL
	0x01CEB93C CBNZ W8, 0x1CEB944
	0x01CEB940 BL 0x1B6E8F8
	0x01CEB944 FCVT S0, S8
	0x01CEB948 BL 0x3D19890
	0x01CEB94C ADRP X8, 0xFFFFFFFFFEDBE000
	0x01CEB950 LDR V1, [X8 + 0xE1C]
	0x00000000 INVALID
	0x01CEB958 FMUL S11, S0, S1
	0x01CEB95C MOV X0, X19
	0x01CEB960 MOV X1, X31
	0x01CEB964 BL 0x3A9B084
	0x01CEB968 MOV X20, X0
	0x01CEB96C MOV X0, X19
	0x01CEB970 MOV X1, X31
	0x01CEB974 BL 0x3A9B084
	0x01CEB978 CBZ X0, 0x1CEBA7C
	0x01CEB97C MOV X1, X31
	0x01CEB980 BL 0x3AA5FBC
	0x01CEB984 STR S0, [X31 + 0x8]
	0x01CEB988 MOV V9.16B, V1.16B
	0x01CEB98C MOV V10.16B, V2.16B
	0x01CEB990 LDR V0, [X19 + 0x19C]
	0x01CEB994 LDR V1, [X19 + 0x1A0]
	0x01CEB998 LDR V2, [X19 + 0x1A4]
	0x01CEB99C MOV X0, X31
	0x01CEB9A0 MOV V8.16B, V3.16B
	0x01CEB9A4 BL 0x3A92C2C
	0x01CEB9A8 LDR X0, [X19 + 0x38]
	0x01CEB9AC CBZ X0, 0x1CEBA7C
	0x01CEB9B0 MOV V12.16B, V0.16B
	0x01CEB9B4 LDR V0, [X31 + 0xC]
	0x01CEB9B8 MOV X1, X31
	0x01CEB9BC MOV V13.16B, V1.16B
	0x01CEB9C0 MOV V14.16B, V2.16B
	0x01CEB9C4 MOV V15.16B, V3.16B
	0x01CEB9C8 FDIV S11, S0, S11
	0x01CEB9CC BL 0x1D87058
	0x01CEB9D0 FMUL S0, S11, S0
	0x01CEB9D4 STR S0, [X31]
	0x01CEB9D8 LDR V0, [X31 + 0x8]
	0x01CEB9DC MOV V1.16B, V9.16B
	0x01CEB9E0 MOV V2.16B, V10.16B
	0x01CEB9E4 MOV V3.16B, V8.16B
	0x01CEB9E8 MOV V4.16B, V12.16B
	0x01CEB9EC MOV V5.16B, V13.16B
	0x01CEB9F0 MOV V6.16B, V14.16B
	0x01CEB9F4 MOV V7.16B, V15.16B
	0x01CEB9F8 MOV X0, X31
	0x01CEB9FC BL 0x3A92660
	0x01CEBA00 CBZ X20, 0x1CEBA7C
	0x01CEBA04 MOV X0, X20
	0x01CEBA08 MOV X1, X31
	0x01CEBA0C BL 0x3AA7878
	0x01CEBA10 LDR V8, [X19 + 0x178]
	0x01CEBA14 FMOV S0, 1.5
	0x01CEBA18 FCMP S8, S0
	0x01CEBA1C B.GE 0x1CEBA58
	0x01CEBA20 LDR X0, [X19 + 0x38]
	0x01CEBA24 CBZ X0, 0x1CEBA7C
	0x01CEBA28 MOV X1, X31
	0x01CEBA2C BL 0x1D87058
	0x01CEBA30 FADD S0, S8, S0
	0x01CEBA34 STR S0, [X19 + 0x178]
	0x01CEBA38 LDP X20, X19, [X31 + 0x60]
	0x01CEBA3C LDP X30, X21, [X31 + 0x50]
	0x01CEBA40 LDP D9, D8, [X31 + 0x40]
	0x01CEBA44 LDP D11, D10, [X31 + 0x30]
	0x01CEBA48 LDP D13, D12, [X31 + 0x20]
	0x01CEBA4C LDP D15, D14, [X31 + 0x10]
	0x01CEBA50 ADD X31, X31, 0x70
	0x01CEBA54 RET
	0x01CEBA58 MOV X0, X19
	0x01CEBA5C LDP X20, X19, [X31 + 0x60]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0x2539000
	014 Move X21, 0x2266000
	015 Move X19, 0x2265000
	016 Move X29, 0x2266000
	017 Move X28, 0x2266000
	018 Move X27, 0x2266000
	019 Move X26, 0x2266000
	020 Move X25, 0x2266000
	021 Move X24, 0x2266000
	022 Move X23, 0x2266000
	023 Move X22, 0x2266000
	024 Move X21, [X21+816]
	025 Move X19, [X19+3592]
	026 Move X29, [X29+824]
	027 Move X28, [X28+832]
	028 Move X27, [X27+840]
	029 Move X26, [X26+848]
	030 Move X25, [X25+856]
	031 Move W8, [X20+1674]
	032 Move X24, [X24+864]
	033 Move X23, [X23+872]
	034 Move X22, [X22+880]
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {77}
	039 Move X0, 0x2265000
	040 Move X0, [X0+3592]
	041 Call 0x1B6F7F0
	042 Move X0, 0x2266000
	043 Move X0, [X0+880]
	044 Call 0x1B6F7F0
	045 Move X0, 0x2266000
	046 Move X0, [X0+824]
	047 Call 0x1B6F7F0
	048 Move X0, 0x2266000
	049 Move X0, [X0+856]
	050 Call 0x1B6F7F0
	051 Move X0, 0x2266000
	052 Move X0, [X0+888]
	053 Call 0x1B6F7F0
	054 Move X0, 0x2266000
	055 Move X0, [X0+840]
	056 Call 0x1B6F7F0
	057 Move X0, 0x2266000
	058 Move X0, [X0+816]
	059 Call 0x1B6F7F0
	060 Move X0, 0x2266000
	061 Move X0, [X0+872]
	062 Call 0x1B6F7F0
	063 Move X0, 0x2266000
	064 Move X0, [X0+864]
	065 Call 0x1B6F7F0
	066 Move X0, 0x2266000
	067 Move X0, [X0+832]
	068 Call 0x1B6F7F0
	069 Move X0, 0x2266000
	070 Move X0, [X0+848]
	071 Call 0x1B6F7F0
	072 Move X0, 0x2266000
	073 Move X0, [X0+896]
	074 Call 0x1B6F7F0
	075 Move W8, 1
	076 Move [X20+1674], W8
	077 Move X0, [X21]
	078 Move X1, X31
	079 Call Animator.StringToHash, X0
	080 Move X8, [X19]
	081 Move X1, X31
	082 Move X8, [X8+184]
	083 Move [X8], W0
	084 Move X0, [X29]
	085 Call Animator.StringToHash, X0
	086 Move X8, [X19]
	087 Move X1, X31
	088 Move X8, [X8+184]
	089 Move [X8+4], W0
	090 Move X0, [X28]
	091 Call Animator.StringToHash, X0
	092 Move X8, [X19]
	093 Move X1, X31
	094 Move X8, [X8+184]
	095 Move [X8+8], W0
	096 Move X0, [X27]
	097 Call Animator.StringToHash, X0
	098 Move X8, [X19]
	099 Move X1, X31
	100 Move X8, [X8+184]
	101 Move [X8+12], W0
	102 Move X0, [X26]
	103 Call Animator.StringToHash, X0
	104 Move X8, [X19]
	105 Move X1, X31
	106 Move X8, [X8+184]
	107 Move [X8+16], W0
	108 Move X0, [X25]
	109 Call Animator.StringToHash, X0
	110 Move X8, [X19]
	111 Move X1, X31
	112 Move X8, [X8+184]
	113 Move [X8+20], W0
	114 Move X0, [X24]
	115 Call Animator.StringToHash, X0
	116 Move X8, [X19]
	117 Move X1, X31
	118 Move X8, [X8+184]
	119 Move [X8+24], W0
	120 Move X0, [X23]
	121 Call Animator.StringToHash, X0
	122 Move X8, [X19]
	123 Move X1, X31
	124 Move X8, [X8+184]
	125 Move [X8+28], W0
	126 Move X0, [X22]
	127 Call Animator.StringToHash, X0
	128 Move X8, [X19]
	129 Move X1, X31
	130 Move X8, [X8+184]
	131 Move [X8+32], W0
	132 Move X8, 0x2266000
	133 Move X8, [X8+888]
	134 Move X0, [X8]
	135 Call Animator.StringToHash, X0
	136 Move X8, [X19]
	137 Move X1, X31
	138 Move X8, [X8+184]
	139 Move [X8+36], W0
	140 Move X8, 0x2266000
	141 Move X8, [X8+896]
	142 Move X0, [X8]
	143 Call Animator.StringToHash, X0
	144 Move X8, [X19]
	145 Move X20, [X31+80]
	146 Move X19, [X31+88]
	147 Move X22, [X31+64]
	148 Move X21, [X31+72]
	149 Move X24, [X31+48]
	150 Move X23, [X31+56]
	151 Move X8, [X8+184]
	152 Move X26, [X31+32]
	153 Move X25, [X31+40]
	154 Move X28, [X31+16]
	155 Move X27, [X31+24]
	156 Move [X8+40], W0
	157 Move X29, [X31+96]
	158 Move X30, [X31+104]
	159 Return 

