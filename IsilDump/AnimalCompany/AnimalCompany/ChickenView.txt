Type: AnimalCompany.ChickenView

Method: System.Void PlayRunningSound(System.Boolean play, System.Single volume = 1)

Disassembly:
	0x01CE073C LDR W11, [X10 + 0x18]
	0x01CE0740 CBZ W11, 0x1CE0784
	0x01CE0744 LDR X9, [X9 + 0x60]
	0x01CE0748 CBZ X9, 0x1CE0780
	0x01CE074C LDR W11, [X9 + 0x18]
	0x01CE0750 CBZ W11, 0x1CE0784
	0x01CE0754 LDR X11, [X19]
	0x01CE0758 LDR V0, [X8 + 0x20]
	0x01CE075C LDR V1, [X10 + 0x20]
	0x01CE0760 LDR V2, [X9 + 0x20]
	0x01CE0764 LDR X3, [X11 + 0x2A8]
	0x01CE0768 LDR X2, [X11 + 0x2B0]
	0x01CE076C MOV X0, X19
	0x01CE0770 LDP X20, X19, [X31 + 0x10]
	0x01CE0774 MOV W1, W31
	0x01CE0778 LDR X30, [X31], #0x20
	0x01CE077C BR X3
	0x01CE0780 BL 0x1B6EA1C
	0x01CE0784 BL 0x1B6EA24
	0x01CE0788 SUB X31, X31, 0x90
	0x01CE078C STP D15, D14, [X31 + 0x20]
	0x01CE0790 STP D13, D12, [X31 + 0x30]
	0x01CE0794 STP D11, D10, [X31 + 0x40]
	0x01CE0798 STP D9, D8, [X31 + 0x50]
	0x01CE079C STP X30, X23, [X31 + 0x60]
	0x01CE07A0 STP X22, X21, [X31 + 0x70]
	0x01CE07A4 STP X20, X19, [X31 + 0x80]
	0x01CE07A8 ADRP X20, 0x2543000
	0x01CE07AC ADRP X21, 0x226D000
	0x01CE07B0 LDRB W8, [X20 + 0x63D]
	0x01CE07B4 LDR X21, [X21 + 0x478]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move X0, [X0+136]
	007 Compare X0, 0
	008 JumpIfEqual {46}
	009 Move W20, W1
	010 Move X1, X31
	011 Move V8, V0
	012 Call AudioSource.get_isPlaying, X0
	013 Move TEMP, X20
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {26}
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, [X19+136]
	022 Compare X0, 0
	023 JumpIfEqual {46}
	024 Move X1, X31
	025 Call AudioSource.Play, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {35}
	030 Move X0, [X19+136]
	031 Compare X0, 0
	032 JumpIfEqual {46}
	033 Move X1, X31
	034 Call AudioSource.Stop, X0
	035 Move X0, [X19+136]
	036 Compare X0, 0
	037 JumpIfEqual {46}
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+8]
	041 Move V0, V8
	042 Move X1, X31
	043 Move V8, [X31+32]
	044 Call AudioSource.set_volume, X0, V0
	045 Return 
	046 Call 0x1B6FA1C

Method: System.Void SetTeethVisible(System.Boolean visible)

Disassembly:
	0x01CE071C LDR X9, [X19 + 0xB8]
	0x01CE0720 CBZ X9, 0x1CE0780
	0x01CE0724 LDR X8, [X9 + 0x38]
	0x01CE0728 CBZ X8, 0x1CE0780
	0x01CE072C LDR W10, [X8 + 0x18]
	0x01CE0730 CBZ W10, 0x1CE0784
	0x01CE0734 LDR X10, [X9 + 0x58]
	0x01CE0738 CBZ X10, 0x1CE0780

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+144]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 And W1, W1, 1
	006 Move X2, X31
	007 Move X30, [X31+16]
	008 Call Renderer.set_enabled, X0, X1
	009 Return 
	010 Call 0x1B6FA1C

Method: System.Void Update()

Disassembly:
	0x01CE2464 ANDS W31, W0, 0x7
	0x01CE2468 B.EQ 0x1CE24CC
	0x01CE246C TBNZ X0, 0x0, 0x1CE23BC
	0x01CE2470 LDR X8, [X19 + 0x38]
	0x01CE2474 CBZ X8, 0x1CE254C
	0x01CE2478 LDR X0, [X8 + 0x50]
	0x01CE247C CBZ X0, 0x1CE254C
	0x01CE2480 MOV X1, X31
	0x01CE2484 BL 0x1DBEFE4
	0x01CE2488 TBZ X0, 0x0, 0x1CE253C
	0x01CE248C LDR X8, [X19 + 0x38]
	0x01CE2490 CBZ X8, 0x1CE254C
	0x01CE2494 LDR X0, [X8 + 0x50]
	0x01CE2498 MOVZ W1, 0x10
	0x01CE249C MOV X2, X31
	0x01CE24A0 BL 0x1DD601C
	0x01CE24A4 MOV X22, X0
	0x01CE24A8 MOVZ W0, 0x1
	0x01CE24AC MOV X1, X31
	0x01CE24B0 BL 0x1D29EBC
	0x01CE24B4 LDR X8, [X19 + 0x40]
	0x01CE24B8 CBZ X8, 0x1CE254C
	0x01CE24BC LDR X8, [X8 + 0x20]
	0x01CE24C0 CBZ X8, 0x1CE2500
	0x01CE24C4 LDR W0, [X8]
	0x01CE24C8 B 0x1CE2504
	0x01CE24CC LDR X0, [X22]
	0x01CE24D0 LDR X19, [X19 + 0x40]
	0x01CE24D4 LDR W8, [X0 + 0xE0]
	0x01CE24D8 CBNZ W8, 0x1CE24E0
	0x01CE24DC BL 0x1B6E8F8
	0x01CE24E0 ADRP X8, 0x226E000
	0x01CE24E4 LDR X8, [X8 + 0x18]
	0x01CE24E8 MOVZ W2, 0x7
	0x01CE24EC MOV X1, X19
	0x01CE24F0 MOV X3, X31
	0x01CE24F4 LDR X0, [X8]
	0x01CE24F8 BL 0x1D69640
	0x01CE24FC B 0x1CE253C
	0x01CE2500 MOV X0, X31
	0x01CE2504 LDR W1, [X19 + 0x68]
	0x01CE2508 MOVZ W2, 0x1
	0x01CE250C MOV X3, X31
	0x01CE2510 BL 0x1DA8258
	0x01CE2514 STUR X0, [X22 + 0x1C]
	0x01CE2518 STP W20, W21, [X22 + 0x24]
	0x01CE251C CBZ X22, 0x1CE254C
	0x01CE2520 MOVZ W8, 0x80
	0x01CE2524 STR W8, [X22 + 0xC]
	0x01CE2528 LDR X0, [X19 + 0x38]
	0x01CE252C CBZ X0, 0x1CE254C
	0x01CE2530 MOV X1, X22

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2542000
	005 Move W8, [X20+1603]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x226C000
	012 Move X0, [X0+1144]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X20+1603], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call MobView.Update, X0
	019 Move W8, [X19+132]
	020 Compare W8, 0
	021 JumpIfEqual {66}
	022 Move W8, [X19+76]
	023 Compare W8, 0
	024 JumpIfEqual {66}
	025 Move X8, [X19+112]
	026 Compare X8, 0
	027 JumpIfEqual {70}
	028 Move X9, 0x226C000
	029 Move X9, [X9+1144]
	030 Move X20, [X8+320]
	031 Move X0, [X9]
	032 Move W9, [X0+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1B6F8F8
	036 Move X0, X20
	037 Move X1, X31
	038 Move X2, X31
	039 Call Object.op_Inequality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {66}
	044 Move X8, [X19+112]
	045 Compare X8, 0
	046 JumpIfEqual {70}
	047 Move X0, [X8+320]
	048 Compare X0, 0
	049 JumpIfEqual {70}
	050 Move X19, [X19+56]
	051 Move X1, X31
	052 Call Component.get_transform, X0
	053 Compare X0, 0
	054 JumpIfEqual {70}
	055 Move X1, X31
	056 Call Transform.get_position, X0
	057 Compare X19, 0
	058 JumpIfEqual {70}
	059 Move X0, X19
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X1, X31
	063 Move X30, [X31+32]
	064 Call Transform.set_position, X0, X1
	065 Return 
	066 Move X20, [X31+16]
	067 Move X19, [X31+24]
	068 Move X30, [X31+32]
	069 Return 
	070 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CE2534 MOV X2, X31
	0x01CE2538 BL 0x1D8A710
	0x01CE253C LDP X20, X19, [X31 + 0x20]
	0x01CE2540 LDP X22, X21, [X31 + 0x10]
	0x01CE2544 LDR X30, [X31], #0x30
	0x01CE2548 RET
	0x01CE254C BL 0x1B6EA1C
	0x01CE2550 SUB X31, X31, 0xA0
	0x01CE2554 STR X30, [X31 + 0x40]
	0x01CE2558 STP X28, X27, [X31 + 0x50]
	0x01CE255C STP X26, X25, [X31 + 0x60]
	0x01CE2560 STP X24, X23, [X31 + 0x70]
	0x01CE2564 STP X22, X21, [X31 + 0x80]
	0x01CE2568 STP X20, X19, [X31 + 0x90]
	0x01CE256C ADRP X20, 0x2541000
	0x01CE2570 LDRB W8, [X20 + 0x64D]
	0x01CE2574 MOV X19, X0
	0x01CE2578 TBNZ X8, 0x0, 0x1CE25A8
	0x01CE257C ADRP X0, 0x226D000
	0x01CE2580 LDR X0, [X0 + 0xFF8]
	0x01CE2584 BL 0x1B6E7F0
	0x01CE2588 ADRP X0, 0x226E000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2542000
	006 Move X21, 0x226E000
	007 Move W8, [X20+1604]
	008 Move X21, [X21+3592]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x226E000
	015 Move X0, [X0+3592]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1604], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1B6F8F8
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call MobView..ctor, X0
	031 Return 

