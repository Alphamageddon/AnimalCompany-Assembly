Type: AnimalCompany.FreeCamera

Method: System.Void Start()

Disassembly:
	0x01D7D2C8 BL 0x1C16CF4
	0x01D7D2CC MOVZ W8, 0x1
	0x01D7D2D0 STRB W8, [X26 + 0x787]
	0x01D7D2D4 LDR X0, [X23]
	0x01D7D2D8 LDR W8, [X0 + 0xE0]
	0x01D7D2DC CBNZ W8, 0x1D7D2E8
	0x01D7D2E0 BL 0x1C16DFC
	0x01D7D2E4 LDR X0, [X23]
	0x01D7D2E8 LDR X8, [X0 + 0xB8]
	0x01D7D2EC LDR X8, [X8]
	0x01D7D2F0 CBZ X8, 0x1D7D9C4
	0x01D7D2F4 LDR X8, [X8 + 0xE0]
	0x01D7D2F8 CBZ X8, 0x1D7D9C4
	0x01D7D2FC LDR X22, [X8 + 0x78]
	0x01D7D300 CBZ X22, 0x1D7D318
	0x01D7D304 LDR X8, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+32]
	005 Compare X0, 0
	006 JumpIfEqual {21}
	007 Move W1, 1
	008 Move X2, X31
	009 Call GameObject.SetActive, X0, X1
	010 Move X0, X19
	011 Move X1, X31
	012 Call Component.get_gameObject, X0
	013 Compare X0, 0
	014 JumpIfEqual {21}
	015 Move W1, W31
	016 Move X2, X31
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Call GameObject.SetActive, X0, X1
	020 Return 
	021 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01D7D308 MOV X0, X22
	0x01D7D30C LDR X1, [X8 + 0x40]
	0x01D7D310 BL 0x1C16E00
	0x01D7D314 CBZ X0, 0x1D7D9CC
	0x01D7D318 LDR W8, [X21 + 0x18]
	0x01D7D31C CMP W8, 0x1
	0x01D7D320 B.LS 0x1D7D9C8
	0x01D7D324 STR X22, [X21 + 0x28]
	0x01D7D328 LDRB W8, [X26 + 0x787]
	0x01D7D32C CBNZ W8, 0x1D7D344
	0x01D7D330 ADRP X0, 0x2376000
	0x01D7D334 LDR X0, [X0 + 0x648]
	0x01D7D338 BL 0x1C16CF4
	0x01D7D33C MOVZ W8, 0x1
	0x01D7D340 STRB W8, [X26 + 0x787]
	0x01D7D344 LDR X0, [X23]
	0x01D7D348 LDR W8, [X0 + 0xE0]
	0x01D7D34C CBNZ W8, 0x1D7D358
	0x01D7D350 BL 0x1C16DFC
	0x01D7D354 LDR X0, [X23]
	0x01D7D358 LDR X8, [X0 + 0xB8]
	0x01D7D35C LDR X8, [X8]
	0x01D7D360 CBZ X8, 0x1D7D9C4
	0x01D7D364 LDR X22, [X8 + 0xD8]
	0x01D7D368 CBZ X22, 0x1D7D380
	0x01D7D36C LDR X8, [X21]
	0x01D7D370 MOV X0, X22
	0x01D7D374 LDR X1, [X8 + 0x40]
	0x01D7D378 BL 0x1C16E00
	0x01D7D37C CBZ X0, 0x1D7D9CC
	0x01D7D380 LDR W8, [X21 + 0x18]
	0x01D7D384 CMP W8, 0x2
	0x01D7D388 B.LS 0x1D7D9C8
	0x01D7D38C STR X22, [X21 + 0x30]
	0x01D7D390 LDRB W8, [X26 + 0x787]
	0x01D7D394 CBNZ W8, 0x1D7D3AC
	0x01D7D398 ADRP X0, 0x2376000
	0x01D7D39C LDR X0, [X0 + 0x648]
	0x01D7D3A0 BL 0x1C16CF4
	0x01D7D3A4 MOVZ W8, 0x1
	0x01D7D3A8 STRB W8, [X26 + 0x787]
	0x01D7D3AC LDR X0, [X23]
	0x01D7D3B0 LDR W8, [X0 + 0xE0]
	0x01D7D3B4 CBNZ W8, 0x1D7D3C0
	0x01D7D3B8 BL 0x1C16DFC
	0x01D7D3BC LDR X0, [X23]
	0x01D7D3C0 LDR X8, [X0 + 0xB8]
	0x01D7D3C4 LDR X8, [X8]
	0x01D7D3C8 CBZ X8, 0x1D7D9C4
	0x01D7D3CC LDR X8, [X8 + 0xB8]
	0x01D7D3D0 CBZ X8, 0x1D7D9C4
	0x01D7D3D4 LDR X8, [X8 + 0xA0]
	0x01D7D3D8 CBZ X8, 0x1D7D9C4
	0x01D7D3DC LDR X22, [X8 + 0x48]
	0x01D7D3E0 CBZ X22, 0x1D7D3F8
	0x01D7D3E4 LDR X8, [X21]
	0x01D7D3E8 MOV X0, X22
	0x01D7D3EC LDR X1, [X8 + 0x40]
	0x01D7D3F0 BL 0x1C16E00
	0x01D7D3F4 CBZ X0, 0x1D7D9CC
	0x01D7D3F8 LDR W8, [X21 + 0x18]
	0x01D7D3FC CMP W8, 0x3
	0x01D7D400 B.LS 0x1D7D9C8
	0x01D7D404 ADRP X27, 0x2379000
	0x01D7D408 LDR X27, [X27 + 0x4B8]
	0x01D7D40C MOV X0, X20
	0x01D7D410 MOV X1, X21
	0x01D7D414 MOV X2, X31
	0x01D7D418 STR X22, [X21 + 0x38]
	0x01D7D41C BL 0x1D363F0
	0x01D7D420 LDR X0, [X25]
	0x01D7D424 BL 0x1C16F10
	0x01D7D428 LDR X2, [X27]
	0x01D7D42C MOV X1, X19
	0x01D7D430 MOV X3, X31
	0x01D7D434 MOV X20, X0
	0x01D7D438 BL 0x35C52F0
	0x01D7D43C LDR X0, [X24]
	0x01D7D440 MOVZ W1, 0x3
	0x01D7D444 BL 0x1C16D6C
	0x01D7D448 LDRB W8, [X26 + 0x787]
	0x01D7D44C MOV X21, X0
	0x01D7D450 CBNZ W8, 0x1D7D468
	0x01D7D454 ADRP X0, 0x2376000
	0x01D7D458 LDR X0, [X0 + 0x648]
	0x01D7D45C BL 0x1C16CF4
	0x01D7D460 MOVZ W8, 0x1
	0x01D7D464 STRB W8, [X26 + 0x787]
	0x01D7D468 LDR X0, [X23]
	0x01D7D46C LDR W8, [X0 + 0xE0]
	0x01D7D470 CBNZ W8, 0x1D7D47C
	0x01D7D474 BL 0x1C16DFC
	0x01D7D478 LDR X0, [X23]
	0x01D7D47C LDR X8, [X0 + 0xB8]
	0x01D7D480 LDR X8, [X8]
	0x01D7D484 CBZ X8, 0x1D7D9C4
	0x01D7D488 LDR X8, [X8 + 0xE0]
	0x01D7D48C CBZ X8, 0x1D7D9C4
	0x01D7D490 CBZ X21, 0x1D7D9C4
	0x01D7D494 LDR X22, [X8 + 0x48]
	0x01D7D498 CBZ X22, 0x1D7D4B0
	0x01D7D49C LDR X8, [X21]
	0x01D7D4A0 MOV X0, X22
	0x01D7D4A4 LDR X1, [X8 + 0x40]
	0x01D7D4A8 BL 0x1C16E00
	0x01D7D4AC CBZ X0, 0x1D7D9CC
	0x01D7D4B0 LDR W8, [X21 + 0x18]
	0x01D7D4B4 CBZ W8, 0x1D7D9C8
	0x01D7D4B8 STR X22, [X21 + 0x20]
	0x01D7D4BC LDRB W8, [X26 + 0x787]
	0x01D7D4C0 CBNZ W8, 0x1D7D4D8
	0x01D7D4C4 ADRP X0, 0x2376000
	0x01D7D4C8 LDR X0, [X0 + 0x648]
	0x01D7D4CC BL 0x1C16CF4
	0x01D7D4D0 MOVZ W8, 0x1
	0x01D7D4D4 STRB W8, [X26 + 0x787]
	0x01D7D4D8 LDR X0, [X23]
	0x01D7D4DC LDR W8, [X0 + 0xE0]
	0x01D7D4E0 CBNZ W8, 0x1D7D4EC
	0x01D7D4E4 BL 0x1C16DFC
	0x01D7D4E8 LDR X0, [X23]
	0x01D7D4EC LDR X8, [X0 + 0xB8]
	0x01D7D4F0 LDR X8, [X8]
	0x01D7D4F4 CBZ X8, 0x1D7D9C4
	0x01D7D4F8 LDR X8, [X8 + 0xE0]
	0x01D7D4FC CBZ X8, 0x1D7D9C4
	0x01D7D500 LDR X22, [X8 + 0x50]
	0x01D7D504 CBZ X22, 0x1D7D51C
	0x01D7D508 LDR X8, [X21]
	0x01D7D50C MOV X0, X22
	0x01D7D510 LDR X1, [X8 + 0x40]
	0x01D7D514 BL 0x1C16E00
	0x01D7D518 CBZ X0, 0x1D7D9CC
	0x01D7D51C LDR W8, [X21 + 0x18]
	0x01D7D520 CMP W8, 0x1
	0x01D7D524 B.LS 0x1D7D9C8
	0x01D7D528 STR X22, [X21 + 0x28]
	0x01D7D52C LDRB W8, [X26 + 0x787]
	0x01D7D530 CBNZ W8, 0x1D7D548
	0x01D7D534 ADRP X0, 0x2376000
	0x01D7D538 LDR X0, [X0 + 0x648]
	0x01D7D53C BL 0x1C16CF4
	0x01D7D540 MOVZ W8, 0x1
	0x01D7D544 STRB W8, [X26 + 0x787]
	0x01D7D548 LDR X0, [X23]
	0x01D7D54C LDR W8, [X0 + 0xE0]
	0x01D7D550 CBNZ W8, 0x1D7D55C
	0x01D7D554 BL 0x1C16DFC
	0x01D7D558 LDR X0, [X23]
	0x01D7D55C LDR X8, [X0 + 0xB8]
	0x01D7D560 LDR X8, [X8]
	0x01D7D564 CBZ X8, 0x1D7D9C4
	0x01D7D568 LDR X8, [X8 + 0xE0]
	0x01D7D56C CBZ X8, 0x1D7D9C4
	0x01D7D570 LDR X22, [X8 + 0x70]
	0x01D7D574 CBZ X22, 0x1D7D58C
	0x01D7D578 LDR X8, [X21]
	0x01D7D57C MOV X0, X22
	0x01D7D580 LDR X1, [X8 + 0x40]
	0x01D7D584 BL 0x1C16E00
	0x01D7D588 CBZ X0, 0x1D7D9CC
	0x01D7D58C LDR W8, [X21 + 0x18]
	0x01D7D590 CMP W8, 0x2
	0x01D7D594 B.LS 0x1D7D9C8
	0x01D7D598 ADRP X27, 0x2379000
	0x01D7D59C LDR X27, [X27 + 0x4B0]
	0x01D7D5A0 MOV X0, X20
	0x01D7D5A4 MOV X1, X21
	0x01D7D5A8 MOV X2, X31
	0x01D7D5AC STR X22, [X21 + 0x30]
	0x01D7D5B0 BL 0x1D363F0
	0x01D7D5B4 LDR X0, [X25]
	0x01D7D5B8 BL 0x1C16F10
	0x01D7D5BC LDR X2, [X27]
	0x01D7D5C0 MOV X1, X19
	0x01D7D5C4 MOV X3, X31
	0x01D7D5C8 MOV X20, X0
	0x01D7D5CC BL 0x35C52F0
	0x01D7D5D0 LDR X0, [X24]
	0x01D7D5D4 MOVZ W1, 0x1
	0x01D7D5D8 MOVZ W22, 0x1
	0x01D7D5DC BL 0x1C16D6C
	0x01D7D5E0 LDRB W8, [X26 + 0x787]
	0x01D7D5E4 MOV X21, X0
	0x01D7D5E8 CBNZ W8, 0x1D7D5FC
	0x01D7D5EC ADRP X0, 0x2376000
	0x01D7D5F0 LDR X0, [X0 + 0x648]
	0x01D7D5F4 BL 0x1C16CF4
	0x01D7D5F8 STRB W22, [X26 + 0x787]
	0x01D7D5FC LDR X0, [X23]
	0x01D7D600 LDR W8, [X0 + 0xE0]
	0x01D7D604 CBNZ W8, 0x1D7D610
	0x01D7D608 BL 0x1C16DFC
	0x01D7D60C LDR X0, [X23]
	0x01D7D610 LDR X8, [X0 + 0xB8]
	0x01D7D614 LDR X8, [X8]
	0x01D7D618 CBZ X8, 0x1D7D9C4
	0x01D7D61C LDR X8, [X8 + 0xE0]
	0x01D7D620 CBZ X8, 0x1D7D9C4
	0x01D7D624 CBZ X21, 0x1D7D9C4
	0x01D7D628 LDR X22, [X8 + 0x80]
	0x01D7D62C CBZ X22, 0x1D7D644
	0x01D7D630 LDR X8, [X21]
	0x01D7D634 MOV X0, X22
	0x01D7D638 LDR X1, [X8 + 0x40]
	0x01D7D63C BL 0x1C16E00
	0x01D7D640 CBZ X0, 0x1D7D9CC
	0x01D7D644 LDR W8, [X21 + 0x18]
	0x01D7D648 CBZ W8, 0x1D7D9C8
	0x01D7D64C ADRP X27, 0x2379000
	0x01D7D650 LDR X27, [X27 + 0x490]
	0x01D7D654 MOV X0, X20
	0x01D7D658 MOV X1, X21
	0x01D7D65C MOV X2, X31
	0x01D7D660 STR X22, [X21 + 0x20]
	0x01D7D664 BL 0x1D363F0
	0x01D7D668 LDR X0, [X25]
	0x01D7D66C BL 0x1C16F10
	0x01D7D670 LDR X2, [X27]
	0x01D7D674 MOV X1, X19
	0x01D7D678 MOV X3, X31
	0x01D7D67C MOV X20, X0
	0x01D7D680 BL 0x35C52F0
	0x01D7D684 LDR X0, [X24]
	0x01D7D688 MOVZ W1, 0x2
	0x01D7D68C BL 0x1C16D6C
	0x01D7D690 LDRB W8, [X26 + 0x787]
	0x01D7D694 MOV X21, X0
	0x01D7D698 CBNZ W8, 0x1D7D6B0
	0x01D7D69C ADRP X0, 0x2376000
	0x01D7D6A0 LDR X0, [X0 + 0x648]
	0x01D7D6A4 BL 0x1C16CF4
	0x01D7D6A8 MOVZ W8, 0x1
	0x01D7D6AC STRB W8, [X26 + 0x787]
	0x01D7D6B0 LDR X0, [X23]
	0x01D7D6B4 LDR W8, [X0 + 0xE0]
	0x01D7D6B8 CBNZ W8, 0x1D7D6C4
	0x01D7D6BC BL 0x1C16DFC
	0x01D7D6C0 LDR X0, [X23]
	0x01D7D6C4 LDR X8, [X0 + 0xB8]
	0x01D7D6C8 LDR X8, [X8]
	0x01D7D6CC CBZ X8, 0x1D7D9C4
	0x01D7D6D0 CBZ X21, 0x1D7D9C4
	0x01D7D6D4 LDR X22, [X8 + 0xD8]
	0x01D7D6D8 CBZ X22, 0x1D7D6F0
	0x01D7D6DC LDR X8, [X21]
	0x01D7D6E0 MOV X0, X22
	0x01D7D6E4 LDR X1, [X8 + 0x40]
	0x01D7D6E8 BL 0x1C16E00
	0x01D7D6EC CBZ X0, 0x1D7D9CC
	0x01D7D6F0 LDR W8, [X21 + 0x18]
	0x01D7D6F4 CBZ W8, 0x1D7D9C8
	0x01D7D6F8 STR X22, [X21 + 0x20]
	0x01D7D6FC LDRB W8, [X26 + 0x787]
	0x01D7D700 CBNZ W8, 0x1D7D718
	0x01D7D704 ADRP X0, 0x2376000
	0x01D7D708 LDR X0, [X0 + 0x648]
	0x01D7D70C BL 0x1C16CF4
	0x01D7D710 MOVZ W8, 0x1
	0x01D7D714 STRB W8, [X26 + 0x787]
	0x01D7D718 LDR X0, [X23]
	0x01D7D71C LDR W8, [X0 + 0xE0]
	0x01D7D720 CBNZ W8, 0x1D7D72C
	0x01D7D724 BL 0x1C16DFC
	0x01D7D728 LDR X0, [X23]
	0x01D7D72C LDR X8, [X0 + 0xB8]
	0x01D7D730 LDR X8, [X8]
	0x01D7D734 CBZ X8, 0x1D7D9C4
	0x01D7D738 LDR X8, [X8 + 0xB8]
	0x01D7D73C CBZ X8, 0x1D7D9C4
	0x01D7D740 LDR X8, [X8 + 0xA0]
	0x01D7D744 CBZ X8, 0x1D7D9C4
	0x01D7D748 LDR X22, [X8 + 0x48]
	0x01D7D74C CBZ X22, 0x1D7D764
	0x01D7D750 LDR X8, [X21]
	0x01D7D754 MOV X0, X22
	0x01D7D758 LDR X1, [X8 + 0x40]
	0x01D7D75C BL 0x1C16E00
	0x01D7D760 CBZ X0, 0x1D7D9CC
	0x01D7D764 LDR W8, [X21 + 0x18]
	0x01D7D768 CMP W8, 0x1
	0x01D7D76C B.LS 0x1D7D9C8
	0x01D7D770 ADRP X27, 0x2379000
	0x01D7D774 LDR X27, [X27 + 0x488]
	0x01D7D778 MOV X0, X20
	0x01D7D77C MOV X1, X21
	0x01D7D780 MOV X2, X31
	0x01D7D784 STR X22, [X21 + 0x28]
	0x01D7D788 BL 0x1D363F0
	0x01D7D78C LDR X0, [X25]
	0x01D7D790 BL 0x1C16F10
	0x01D7D794 LDR X2, [X27]
	0x01D7D798 MOV X1, X19
	0x01D7D79C MOV X3, X31
	0x01D7D7A0 MOV X20, X0
	0x01D7D7A4 BL 0x35C52F0
	0x01D7D7A8 LDR X0, [X24]
	0x01D7D7AC MOVZ W1, 0x1
	0x01D7D7B0 MOVZ W22, 0x1
	0x01D7D7B4 BL 0x1C16D6C
	0x01D7D7B8 LDRB W8, [X26 + 0x787]
	0x01D7D7BC MOV X21, X0
	0x01D7D7C0 CBNZ W8, 0x1D7D7D4
	0x01D7D7C4 ADRP X0, 0x2376000
	0x01D7D7C8 LDR X0, [X0 + 0x648]
	0x01D7D7CC BL 0x1C16CF4
	0x01D7D7D0 STRB W22, [X26 + 0x787]
	0x01D7D7D4 LDR X0, [X23]
	0x01D7D7D8 LDR W8, [X0 + 0xE0]
	0x01D7D7DC CBNZ W8, 0x1D7D7E8
	0x01D7D7E0 BL 0x1C16DFC
	0x01D7D7E4 LDR X0, [X23]
	0x01D7D7E8 LDR X8, [X0 + 0xB8]
	0x01D7D7EC LDR X8, [X8]
	0x01D7D7F0 CBZ X8, 0x1D7D9C4
	0x01D7D7F4 CBZ X21, 0x1D7D9C4
	0x01D7D7F8 LDR X22, [X8 + 0xD0]
	0x01D7D7FC CBZ X22, 0x1D7D814
	0x01D7D800 LDR X8, [X21]
	0x01D7D804 MOV X0, X22
	0x01D7D808 LDR X1, [X8 + 0x40]
	0x01D7D80C BL 0x1C16E00
	0x01D7D810 CBZ X0, 0x1D7D9CC
	0x01D7D814 LDR W8, [X21 + 0x18]
	0x01D7D818 CBZ W8, 0x1D7D9C8
	0x01D7D81C ADRP X27, 0x2379000
	0x01D7D820 LDR X27, [X27 + 0x4A0]
	0x01D7D824 MOV X0, X20
	0x01D7D828 MOV X1, X21
	0x01D7D82C MOV X2, X31
	0x01D7D830 STR X22, [X21 + 0x20]
	0x01D7D834 BL 0x1D363F0
	0x01D7D838 LDR X0, [X25]
	0x01D7D83C BL 0x1C16F10
	0x01D7D840 LDR X2, [X27]
	0x01D7D844 MOV X1, X19
	0x01D7D848 MOV X3, X31
	0x01D7D84C MOV X20, X0
	0x01D7D850 BL 0x35C52F0
	0x01D7D854 LDR X0, [X24]
	0x01D7D858 MOVZ W1, 0x1
	0x01D7D85C MOVZ W22, 0x1
	0x01D7D860 BL 0x1C16D6C
	0x01D7D864 LDRB W8, [X26 + 0x787]
	0x01D7D868 MOV X21, X0
	0x01D7D86C CBNZ W8, 0x1D7D880
	0x01D7D870 ADRP X0, 0x2376000
	0x01D7D874 LDR X0, [X0 + 0x648]
	0x01D7D878 BL 0x1C16CF4
	0x01D7D87C STRB W22, [X26 + 0x787]
	0x01D7D880 LDR X0, [X23]
	0x01D7D884 LDR W8, [X0 + 0xE0]
	0x01D7D888 CBNZ W8, 0x1D7D894
	0x01D7D88C BL 0x1C16DFC
	0x01D7D890 LDR X0, [X23]
	0x01D7D894 LDR X8, [X0 + 0xB8]
	0x01D7D898 LDR X8, [X8]
	0x01D7D89C CBZ X8, 0x1D7D9C4
	0x01D7D8A0 LDR X8, [X8 + 0xB8]
	0x01D7D8A4 CBZ X8, 0x1D7D9C4
	0x01D7D8A8 CBZ X21, 0x1D7D9C4
	0x01D7D8AC LDR X22, [X8 + 0x70]
	0x01D7D8B0 CBZ X22, 0x1D7D8C8
	0x01D7D8B4 LDR X8, [X21]
	0x01D7D8B8 MOV X0, X22
	0x01D7D8BC LDR X1, [X8 + 0x40]
	0x01D7D8C0 BL 0x1C16E00
	0x01D7D8C4 CBZ X0, 0x1D7D9CC
	0x01D7D8C8 LDR W8, [X21 + 0x18]
	0x01D7D8CC CBZ W8, 0x1D7D9C8
	0x01D7D8D0 ADRP X27, 0x2379000
	0x01D7D8D4 LDR X27, [X27 + 0x4A8]
	0x01D7D8D8 MOV X0, X20
	0x01D7D8DC MOV X1, X21
	0x01D7D8E0 MOV X2, X31
	0x01D7D8E4 STR X22, [X21 + 0x20]
	0x01D7D8E8 BL 0x1D363F0
	0x01D7D8EC LDR X0, [X25]
	0x01D7D8F0 BL 0x1C16F10
	0x01D7D8F4 LDR X2, [X27]
	0x01D7D8F8 MOV X1, X19
	0x01D7D8FC MOV X3, X31
	0x01D7D900 MOV X20, X0
	0x01D7D904 BL 0x35C52F0
	0x01D7D908 LDR X0, [X24]
	0x01D7D90C MOVZ W1, 0x1
	0x01D7D910 MOVZ W22, 0x1
	0x01D7D914 BL 0x1C16D6C
	0x01D7D918 LDRB W8, [X26 + 0x787]
	0x01D7D91C MOV X21, X0
	0x01D7D920 CBNZ W8, 0x1D7D934
	0x01D7D924 ADRP X0, 0x2376000
	0x01D7D928 LDR X0, [X0 + 0x648]
	0x01D7D92C BL 0x1C16CF4
	0x01D7D930 STRB W22, [X26 + 0x787]
	0x01D7D934 LDR X0, [X23]
	0x01D7D938 LDR W8, [X0 + 0xE0]
	0x01D7D93C CBNZ W8, 0x1D7D948
	0x01D7D940 BL 0x1C16DFC
	0x01D7D944 LDR X0, [X23]
	0x01D7D948 LDR X8, [X0 + 0xB8]
	0x01D7D94C LDR X8, [X8]
	0x01D7D950 CBZ X8, 0x1D7D9C4
	0x01D7D954 LDR X8, [X8 + 0xB8]
	0x01D7D958 CBZ X8, 0x1D7D9C4
	0x01D7D95C LDR X8, [X8 + 0xA8]
	0x01D7D960 CBZ X8, 0x1D7D9C4
	0x01D7D964 CBZ X21, 0x1D7D9C4
	0x01D7D968 LDR X22, [X8 + 0x48]
	0x01D7D96C CBZ X22, 0x1D7D984
	0x01D7D970 LDR X8, [X21]
	0x01D7D974 MOV X0, X22
	0x01D7D978 LDR X1, [X8 + 0x40]
	0x01D7D97C BL 0x1C16E00
	0x01D7D980 CBZ X0, 0x1D7D9CC
	0x01D7D984 LDR W8, [X21 + 0x18]
	0x01D7D988 CBZ W8, 0x1D7D9C8
	0x01D7D98C MOV X0, X20
	0x01D7D990 MOV X1, X21
	0x01D7D994 MOV X2, X31
	0x01D7D998 STR X22, [X21 + 0x20]
	0x01D7D99C BL 0x1D363F0
	0x01D7D9A0 LDR X0, [X19 + 0x28]
	0x01D7D9A4 CBZ X0, 0x1D7D9C4
	0x01D7D9A8 LDP X20, X19, [X31 + 0x40]
	0x01D7D9AC LDP X22, X21, [X31 + 0x30]
	0x01D7D9B0 LDP X24, X23, [X31 + 0x20]
	0x01D7D9B4 LDP X26, X25, [X31 + 0x10]
	0x01D7D9B8 MOV W1, W31
	0x01D7D9BC LDP X30, X27, [X31], #0x50
	0x01D7D9C0 B 0x1D7D9D8
	0x01D7D9C4 BL 0x1C16F20
	0x01D7D9C8 BL 0x1C16F28
	0x01D7D9CC BL 0x1C16F44
	0x01D7D9D0 MOV X1, X31
	0x01D7D9D4 BL 0x1C16DEC
	0x01D7D9D8 STR X30, [X31 - 0x20]!
	0x01D7D9DC STP X20, X19, [X31 + 0x10]
	0x01D7D9E0 MOV W20, W1
	0x01D7D9E4 LDR X1, [X0 + 0x28]
	0x01D7D9E8 LDR X2, [X0 + 0x68]
	0x01D7D9EC CMP W20, 0x0
	0x01D7D9F0 CSET W3, EQ
	0x01D7D9F4 MOV X19, X0
	0x01D7D9F8 STR W20, [X0 + 0xB8]
	0x01D7D9FC BL 0x1D84DE4
	0x01D7DA00 LDR X1, [X19 + 0x30]
	0x01D7DA04 LDR X2, [X19 + 0x70]
	0x01D7DA08 CMP W20, 0x1
	0x01D7DA0C CSET W3, EQ
	0x01D7DA10 MOV X0, X19
	0x01D7DA14 BL 0x1D84DE4
	0x01D7DA18 LDR X1, [X19 + 0x38]
	0x01D7DA1C LDR X2, [X19 + 0x78]
	0x01D7DA20 CMP W20, 0x2
	0x01D7DA24 CSET W3, EQ
	0x01D7DA28 MOV X0, X19
	0x01D7DA2C BL 0x1D84DE4
	0x01D7DA30 LDR X1, [X19 + 0x40]
	0x01D7DA34 LDR X2, [X19 + 0x80]
	0x01D7DA38 CMP W20, 0x3
	0x01D7DA3C CSET W3, EQ
	0x01D7DA40 MOV X0, X19
	0x01D7DA44 BL 0x1D84DE4
	0x01D7DA48 LDR X0, [X19 + 0xA0]
	0x01D7DA4C CBZ X0, 0x1D7DA78
	0x01D7DA50 CMP W20, 0x3
	0x01D7DA54 CSET W1, EQ
	0x01D7DA58 MOV X2, X31
	0x01D7DA5C BL 0x3C357B4
	0x01D7DA60 MOV X0, X19
	0x01D7DA64 BL 0x1D84E84
	0x01D7DA68 MOV X0, X19
	0x01D7DA6C LDP X20, X19, [X31 + 0x10]
	0x01D7DA70 LDR X30, [X31], #0x20
	0x01D7DA74 B 0x1D84ED8
	0x01D7DA78 BL 0x1C16F20
	0x01D7DA7C STR X30, [X31 - 0x60]!
	0x01D7DA80 STP X28, X27, [X31 + 0x10]
	0x01D7DA84 STP X26, X25, [X31 + 0x20]
	0x01D7DA88 STP X24, X23, [X31 + 0x30]
	0x01D7DA8C STP X22, X21, [X31 + 0x40]
	0x01D7DA90 STP X20, X19, [X31 + 0x50]
	0x01D7DA94 ADRP X22, 0x265B000
	0x01D7DA98 ADRP X21, 0x2376000
	0x01D7DA9C ADRP X20, 0x2379000
	0x01D7DAA0 ADRP X25, 0x2376000
	0x01D7DAA4 LDRB W8, [X22 + 0x951]
	0x01D7DAA8 LDR X21, [X21 + 0xDA0]
	0x01D7DAAC LDR X20, [X20 + 0x4C0]
	0x01D7DAB0 LDR X25, [X25 + 0x648]
	0x01D7DAB4 MOV X19, X0
	0x01D7DAB8 TBNZ X8, 0x0, 0x1D7DB60
	0x01D7DABC ADRP X0, 0x2379000
	0x01D7DAC0 LDR X0, [X0 + 0x478]
	0x01D7DAC4 BL 0x1C16CF4
	0x01D7DAC8 ADRP X0, 0x2377000
	0x01D7DACC LDR X0, [X0 + 0xE70]
	0x01D7DAD0 BL 0x1C16CF4
	0x01D7DAD4 ADRP X0, 0x2376000
	0x01D7DAD8 LDR X0, [X0 + 0x648]
	0x01D7DADC BL 0x1C16CF4
	0x01D7DAE0 ADRP X0, 0x2379000
	0x01D7DAE4 LDR X0, [X0 + 0x480]
	0x01D7DAE8 BL 0x1C16CF4
	0x01D7DAEC ADRP X0, 0x2379000
	0x01D7DAF0 LDR X0, [X0 + 0x488]
	0x01D7DAF4 BL 0x1C16CF4
	0x01D7DAF8 ADRP X0, 0x2379000
	0x01D7DAFC LDR X0, [X0 + 0x490]
	0x01D7DB00 BL 0x1C16CF4
	0x01D7DB04 ADRP X0, 0x2379000
	0x01D7DB08 LDR X0, [X0 + 0x498]
	0x01D7DB0C BL 0x1C16CF4
	0x01D7DB10 ADRP X0, 0x2379000
	0x01D7DB14 LDR X0, [X0 + 0x4A0]
	0x01D7DB18 BL 0x1C16CF4
	0x01D7DB1C ADRP X0, 0x2379000
	0x01D7DB20 LDR X0, [X0 + 0x4A8]
	0x01D7DB24 BL 0x1C16CF4
	0x01D7DB28 ADRP X0, 0x2379000
	0x01D7DB2C LDR X0, [X0 + 0x4B0]
	0x01D7DB30 BL 0x1C16CF4
	0x01D7DB34 ADRP X0, 0x2379000
	0x01D7DB38 LDR X0, [X0 + 0x4B8]
	0x01D7DB3C BL 0x1C16CF4
	0x01D7DB40 ADRP X0, 0x2379000

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], D13
	003 Move [X31+56], D12
	004 Move [X31+64], D11
	005 Move [X31+72], D10
	006 Move [X31+80], D9
	007 Move [X31+88], D8
	008 Move [X31+96], X30
	009 Move [X31+104], X23
	010 Move [X31+112], X22
	011 Move [X31+120], X21
	012 Move [X31+128], X20
	013 Move [X31+136], X19
	014 Move X20, 0x265C000
	015 Move W8, [X20+2380]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {32}
	021 Move X0, 0x237A000
	022 Move X0, [X0+1104]
	023 Call 0x1C17CF4
	024 Move X0, 0x237A000
	025 Move X0, [X0+1112]
	026 Call 0x1C17CF4
	027 Move X0, 0x237A000
	028 Move X0, [X0+1120]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+2380], W8
	032 Move W0, 304
	033 Move X1, X31
	034 Call Input.GetKey, X0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {40}
	039 Move W21, 1
	040 Move W0, 303
	041 Move X1, X31
	042 Call Input.GetKey, X0
	043 And W21, W0, 1
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move W8, 48
	046 Move W9, 44
	047 NotImplemented "Instruction CSEL not yet implemented."
	048 Move V0, [X19]
	049 Move W0, 97
	050 Move X1, X31
	051 Move [X31+2], V0
	052 Call Input.GetKey, X0
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {64}
	057 Move W0, 276
	058 Move X1, X31
	059 Call Input.GetKey, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {105}
	064 Move X0, X19
	065 Move X1, X31
	066 Call Component.get_transform, X0
	067 Move X20, X0
	068 Move X0, X19
	069 Move X1, X31
	070 Call Component.get_transform, X0
	071 Compare X0, 0
	072 JumpIfEqual {630}
	073 Move X1, X31
	074 Call Transform.get_position, X0
	075 Move X0, X19
	076 Move X1, X31
	077 Move V8, V0
	078 Move V9, V1
	079 Move V10, V2
	080 Call Component.get_transform, X0
	081 Compare X0, 0
	082 JumpIfEqual {630}
	083 Move X1, X31
	084 Call Transform.get_right, X0
	085 Move X0, X31
	086 Move V11, V0
	087 Move V12, V1
	088 Move V13, V2
	089 Call Time.get_deltaTime
	090 Compare X20, 0
	091 JumpIfEqual {630}
	092 Move V3, [X31+2]
	093 Move X0, X20
	094 Move X1, X31
	095 Multiply S1, S3, S13
	096 Multiply S2, S3, S12
	097 Multiply S3, S3, S11
	098 Multiply S1, S0, S1
	099 Multiply S4, S0, S2
	100 Multiply S0, S0, S3
	101 Subtract S2, S10, S1
	102 Subtract S1, S9, S4
	103 Subtract S0, S8, S0
	104 Call Transform.set_position, X0, X1
	105 Move W0, 100
	106 Move X1, X31
	107 Call Input.GetKey, X0
	108 Move TEMP, X0
	109 And TEMP, TEMP, 1
	110 Compare TEMP, 1
	111 JumpIfEqual {119}
	112 Move W0, 275
	113 Move X1, X31
	114 Call Input.GetKey, X0
	115 Move TEMP, X0
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {160}
	119 Move X0, X19
	120 Move X1, X31
	121 Call Component.get_transform, X0
	122 Move X20, X0
	123 Move X0, X19
	124 Move X1, X31
	125 Call Component.get_transform, X0
	126 Compare X0, 0
	127 JumpIfEqual {630}
	128 Move X1, X31
	129 Call Transform.get_position, X0
	130 Move X0, X19
	131 Move X1, X31
	132 Move V8, V0
	133 Move V9, V1
	134 Move V10, V2
	135 Call Component.get_transform, X0
	136 Compare X0, 0
	137 JumpIfEqual {630}
	138 Move X1, X31
	139 Call Transform.get_right, X0
	140 Move X0, X31
	141 Move V11, V0
	142 Move V12, V1
	143 Move V13, V2
	144 Call Time.get_deltaTime
	145 Compare X20, 0
	146 JumpIfEqual {630}
	147 Move V3, [X31+2]
	148 Move X0, X20
	149 Move X1, X31
	150 Multiply S1, S3, S13
	151 Multiply S2, S3, S12
	152 Multiply S3, S3, S11
	153 Multiply S1, S0, S1
	154 Multiply S4, S0, S2
	155 Multiply S0, S0, S3
	156 Add S2, S10, S1
	157 Add S1, S9, S4
	158 Add S0, S8, S0
	159 Call Transform.set_position, X0, X1
	160 Move W0, 119
	161 Move X1, X31
	162 Call Input.GetKey, X0
	163 Move TEMP, X0
	164 And TEMP, TEMP, 1
	165 Compare TEMP, 1
	166 JumpIfEqual {174}
	167 Move W0, 273
	168 Move X1, X31
	169 Call Input.GetKey, X0
	170 Move TEMP, X0
	171 And TEMP, TEMP, 1
	172 Compare TEMP, 1
	173 JumpIfNotEqual {215}
	174 Move X0, X19
	175 Move X1, X31
	176 Call Component.get_transform, X0
	177 Move X20, X0
	178 Move X0, X19
	179 Move X1, X31
	180 Call Component.get_transform, X0
	181 Compare X0, 0
	182 JumpIfEqual {630}
	183 Move X1, X31
	184 Call Transform.get_position, X0
	185 Move X0, X19
	186 Move X1, X31
	187 Move V8, V0
	188 Move V9, V1
	189 Move V10, V2
	190 Call Component.get_transform, X0
	191 Compare X0, 0
	192 JumpIfEqual {630}
	193 Move X1, X31
	194 Call Transform.get_forward, X0
	195 Move X0, X31
	196 Move V11, V0
	197 Move V12, V1
	198 Move V13, V2
	199 Call Time.get_deltaTime
	200 Compare X20, 0
	201 JumpIfEqual {630}
	202 Move V3, [X31+2]
	203 Move X0, X20
	204 Move X1, X31
	205 Multiply S1, S3, S13
	206 Multiply S2, S3, S12
	207 Multiply S3, S3, S11
	208 Multiply S1, S0, S1
	209 Multiply S4, S0, S2
	210 Multiply S0, S0, S3
	211 Add S2, S10, S1
	212 Add S1, S9, S4
	213 Add S0, S8, S0
	214 Call Transform.set_position, X0, X1
	215 Move W0, 115
	216 Move X1, X31
	217 Call Input.GetKey, X0
	218 Move TEMP, X0
	219 And TEMP, TEMP, 1
	220 Compare TEMP, 1
	221 JumpIfEqual {229}
	222 Move W0, 274
	223 Move X1, X31
	224 Call Input.GetKey, X0
	225 Move TEMP, X0
	226 And TEMP, TEMP, 1
	227 Compare TEMP, 1
	228 JumpIfNotEqual {270}
	229 Move X0, X19
	230 Move X1, X31
	231 Call Component.get_transform, X0
	232 Move X20, X0
	233 Move X0, X19
	234 Move X1, X31
	235 Call Component.get_transform, X0
	236 Compare X0, 0
	237 JumpIfEqual {630}
	238 Move X1, X31
	239 Call Transform.get_position, X0
	240 Move X0, X19
	241 Move X1, X31
	242 Move V8, V0
	243 Move V9, V1
	244 Move V10, V2
	245 Call Component.get_transform, X0
	246 Compare X0, 0
	247 JumpIfEqual {630}
	248 Move X1, X31
	249 Call Transform.get_forward, X0
	250 Move X0, X31
	251 Move V11, V0
	252 Move V12, V1
	253 Move V13, V2
	254 Call Time.get_deltaTime
	255 Compare X20, 0
	256 JumpIfEqual {630}
	257 Move V3, [X31+2]
	258 Move X0, X20
	259 Move X1, X31
	260 Multiply S1, S3, S13
	261 Multiply S2, S3, S12
	262 Multiply S3, S3, S11
	263 Multiply S1, S0, S1
	264 Multiply S4, S0, S2
	265 Multiply S0, S0, S3
	266 Subtract S2, S10, S1
	267 Subtract S1, S9, S4
	268 Subtract S0, S8, S0
	269 Call Transform.set_position, X0, X1
	270 Move W0, 113
	271 Move X1, X31
	272 Call Input.GetKey, X0
	273 Move TEMP, X0
	274 And TEMP, TEMP, 1
	275 Compare TEMP, 1
	276 JumpIfNotEqual {318}
	277 Move X0, X19
	278 Move X1, X31
	279 Call Component.get_transform, X0
	280 Move X20, X0
	281 Move X0, X19
	282 Move X1, X31
	283 Call Component.get_transform, X0
	284 Compare X0, 0
	285 JumpIfEqual {630}
	286 Move X1, X31
	287 Call Transform.get_position, X0
	288 Move X0, X19
	289 Move X1, X31
	290 Move V8, V0
	291 Move V9, V1
	292 Move V10, V2
	293 Call Component.get_transform, X0
	294 Compare X0, 0
	295 JumpIfEqual {630}
	296 Move X1, X31
	297 Call Transform.get_up, X0
	298 Move X0, X31
	299 Move V11, V0
	300 Move V12, V1
	301 Move V13, V2
	302 Call Time.get_deltaTime
	303 Compare X20, 0
	304 JumpIfEqual {630}
	305 Move V3, [X31+2]
	306 Move X0, X20
	307 Move X1, X31
	308 Multiply S1, S3, S13
	309 Multiply S2, S3, S12
	310 Multiply S3, S3, S11
	311 Multiply S1, S0, S1
	312 Multiply S4, S0, S2
	313 Multiply S0, S0, S3
	314 Add S2, S10, S1
	315 Add S1, S9, S4
	316 Add S0, S8, S0
	317 Call Transform.set_position, X0, X1
	318 Move W0, 101
	319 Move X1, X31
	320 Call Input.GetKey, X0
	321 Move TEMP, X0
	322 And TEMP, TEMP, 1
	323 Compare TEMP, 1
	324 JumpIfNotEqual {366}
	325 Move X0, X19
	326 Move X1, X31
	327 Call Component.get_transform, X0
	328 Move X20, X0
	329 Move X0, X19
	330 Move X1, X31
	331 Call Component.get_transform, X0
	332 Compare X0, 0
	333 JumpIfEqual {630}
	334 Move X1, X31
	335 Call Transform.get_position, X0
	336 Move X0, X19
	337 Move X1, X31
	338 Move V8, V0
	339 Move V9, V1
	340 Move V10, V2
	341 Call Component.get_transform, X0
	342 Compare X0, 0
	343 JumpIfEqual {630}
	344 Move X1, X31
	345 Call Transform.get_up, X0
	346 Move X0, X31
	347 Move V11, V0
	348 Move V12, V1
	349 Move V13, V2
	350 Call Time.get_deltaTime
	351 Compare X20, 0
	352 JumpIfEqual {630}
	353 Move V3, [X31+2]
	354 Move X0, X20
	355 Move X1, X31
	356 Multiply S1, S3, S13
	357 Multiply S2, S3, S12
	358 Multiply S3, S3, S11
	359 Multiply S1, S0, S1
	360 Multiply S4, S0, S2
	361 Multiply S0, S0, S3
	362 Subtract S2, S10, S1
	363 Subtract S1, S9, S4
	364 Subtract S0, S8, S0
	365 Call Transform.set_position, X0, X1
	366 Move W0, 114
	367 Move X1, X31
	368 Call Input.GetKey, X0
	369 Move X22, 0x2377000
	370 Move X22, [X22+1440]
	371 Move X23, 0x265C000
	372 Move TEMP, X0
	373 And TEMP, TEMP, 1
	374 Compare TEMP, 1
	375 JumpIfEqual {383}
	376 Move W0, 280
	377 Move X1, X31
	378 Call Input.GetKey, X0
	379 Move TEMP, X0
	380 And TEMP, TEMP, 1
	381 Compare TEMP, 1
	382 JumpIfNotEqual {427}
	383 Move X0, X19
	384 Move X1, X31
	385 Call Component.get_transform, X0
	386 Move X20, X0
	387 Move X0, X19
	388 Move X1, X31
	389 Call Component.get_transform, X0
	390 Compare X0, 0
	391 JumpIfEqual {630}
	392 Move X1, X31
	393 Call Transform.get_position, X0
	394 Move W8, [X23+1926]
	395 Move V8, V0
	396 Move V9, V1
	397 Move V10, V2
	398 Compare W8, 0
	399 JumpIfNotEqual {405}
	400 Move X0, 0x2377000
	401 Move X0, [X0+1440]
	402 Call 0x1C17CF4
	403 Move W8, 1
	404 Move [X23+1926], W8
	405 Move X8, [X22]
	406 Move X0, X31
	407 Move X8, [X8+184]
	408 Move S11, [X8+24]
	409 Move S12, [X8+28]
	410 Move V13, [X8+32]
	411 Call Time.get_deltaTime
	412 Compare X20, 0
	413 JumpIfEqual {630}
	414 Move V3, [X31+2]
	415 Move X0, X20
	416 Move X1, X31
	417 Multiply S1, S3, S13
	418 Multiply S2, S3, S12
	419 Multiply S3, S3, S11
	420 Multiply S1, S1, S0
	421 Multiply S4, S2, S0
	422 Multiply S0, S3, S0
	423 Add S2, S10, S1
	424 Add S1, S9, S4
	425 Add S0, S8, S0
	426 Call Transform.set_position, X0, X1
	427 Move W0, 102
	428 Move X1, X31
	429 Call Input.GetKey, X0
	430 Move TEMP, X0
	431 And TEMP, TEMP, 1
	432 Compare TEMP, 1
	433 JumpIfEqual {441}
	434 Move W0, 281
	435 Move X1, X31
	436 Call Input.GetKey, X0
	437 Move TEMP, X0
	438 And TEMP, TEMP, 1
	439 Compare TEMP, 1
	440 JumpIfNotEqual {485}
	441 Move X0, X19
	442 Move X1, X31
	443 Call Component.get_transform, X0
	444 Move X20, X0
	445 Move X0, X19
	446 Move X1, X31
	447 Call Component.get_transform, X0
	448 Compare X0, 0
	449 JumpIfEqual {630}
	450 Move X1, X31
	451 Call Transform.get_position, X0
	452 Move W8, [X23+1926]
	453 Move V8, V2
	454 Move [X31+16], D0
	455 Move [X31], D1
	456 Compare W8, 0
	457 JumpIfNotEqual {463}
	458 Move X0, 0x2377000
	459 Move X0, [X0+1440]
	460 Call 0x1C17CF4
	461 Move W8, 1
	462 Move [X23+1926], W8
	463 Move X8, [X22]
	464 Move X0, X31
	465 Move X8, [X8+184]
	466 Move V9, [X8+24]
	467 Move V10, [X8+32]
	468 Call Time.get_deltaTime
	469 Compare X20, 0
	470 JumpIfEqual {630}
	471 Move V3, [X31+16]
	472 Move V2, [X31+32]
	473 Move V4, [X31]
	474 Move X0, X20
	475 Move X1, X31
	476 Multiply S1, S2, S10
	477 NotImplemented "Instruction INVALID not yet implemented."
	478 Move V3.S[1], V4.S[0]
	479 Multiply S1, S1, S0
	480 NotImplemented "Instruction INVALID not yet implemented."
	481 Subtract V0, V3, V0
	482 Subtract S2, S8, S1
	483 Move S1, V0.S[1]
	484 Call Transform.set_position, X0, X1
	485 Move W8, [X19+64]
	486 Compare W8, 0
	487 JumpIfEqual {530}
	488 Move X0, X19
	489 Move X1, X31
	490 Call Component.get_transform, X0
	491 Compare X0, 0
	492 JumpIfEqual {630}
	493 Move X20, 0x237A000
	494 Move X20, [X20+1112]
	495 Move X1, X31
	496 Call Transform.get_localEulerAngles, X0
	497 Move X0, [X20]
	498 Move X1, X31
	499 Move V8, V1
	500 Call Input.GetAxis, X0
	501 Move V12, [X19+52]
	502 Move X0, X19
	503 Move X1, X31
	504 Move V9, V0
	505 Call Component.get_transform, X0
	506 Compare X0, 0
	507 JumpIfEqual {630}
	508 Move X20, 0x237A000
	509 Move X20, [X20+1104]
	510 Move X1, X31
	511 Call Transform.get_localEulerAngles, X0
	512 Move X0, [X20]
	513 Move X1, X31
	514 Move V10, V0
	515 Call Input.GetAxis, X0
	516 Move V13, [X19+52]
	517 Move X0, X19
	518 Move X1, X31
	519 Move V11, V0
	520 Call Component.get_transform, X0
	521 Compare X0, 0
	522 JumpIfEqual {630}
	523 Multiply S0, S9, S12
	524 Multiply S2, S11, S13
	525 Add S1, S8, S0
	526 Subtract S0, S10, S2
	527 Move S2, W31
	528 Move X1, X31
	529 Call Transform.set_localEulerAngles, X0, X1
	530 Move X8, 0x237A000
	531 Move X8, [X8+1120]
	532 Move X1, X31
	533 Move X0, [X8]
	534 Call Input.GetAxis, X0
	535 NotImplemented "Instruction FCMP not yet implemented."
	536 NotImplemented "Instruction CMP not yet implemented."
	537 Move W8, 60
	538 Move W9, 56
	539 NotImplemented "Instruction CSEL not yet implemented."
	540 Move V12, [X19]
	541 Move X0, X19
	542 Move X1, X31
	543 Move V8, V0
	544 Call Component.get_transform, X0
	545 Move X20, X0
	546 Move X0, X19
	547 Move X1, X31
	548 Call Component.get_transform, X0
	549 Compare X0, 0
	550 JumpIfEqual {630}
	551 Move X1, X31
	552 Call Transform.get_position, X0
	553 Move X0, X19
	554 Move X1, X31
	555 Move V9, V0
	556 Move V10, V1
	557 Move V11, V2
	558 Call Component.get_transform, X0
	559 Compare X0, 0
	560 JumpIfEqual {630}
	561 Move X1, X31
	562 Call Transform.get_forward, X0
	563 Compare X20, 0
	564 JumpIfEqual {630}
	565 Multiply S2, S8, S2
	566 Multiply S1, S8, S1
	567 Multiply S0, S8, S0
	568 Multiply S2, S12, S2
	569 Multiply S1, S12, S1
	570 Multiply S0, S12, S0
	571 Add S2, S11, S2
	572 Add S1, S10, S1
	573 Add S0, S9, S0
	574 Move X0, X20
	575 Move X1, X31
	576 Call Transform.set_position, X0, X1
	577 Move W0, 324
	578 Move X1, X31
	579 Call Input.GetKeyDown, X0
	580 Move W20, W0
	581 Move TEMP, X0
	582 And TEMP, TEMP, 1
	583 Compare TEMP, 1
	584 JumpIfNotEqual {586}
	585 Move W21, 1
	586 Move W0, 324
	587 Move X1, X31
	588 Call Input.GetKeyUp, X0
	589 Move TEMP, X0
	590 And TEMP, TEMP, 1
	591 Compare TEMP, 1
	592 JumpIfNotEqual {616}
	593 Move W21, W31
	594 NotImplemented "Instruction ORN not yet implemented."
	595 And W0, W8, 1
	596 Move X1, X31
	597 Move [X19+64], W21
	598 Call Cursor.set_visible, X0
	599 Move W0, W21
	600 Move X20, [X31+128]
	601 Move X19, [X31+136]
	602 Move X22, [X31+112]
	603 Move X21, [X31+120]
	604 Move X30, [X31+96]
	605 Move X23, [X31+104]
	606 Move D9, [X31+80]
	607 Move D8, [X31+88]
	608 Move D11, [X31+64]
	609 Move D10, [X31+72]
	610 Move D13, [X31+48]
	611 Move D12, [X31+56]
	612 Move X1, X31
	613 Add X31, X31, 144
	614 Call Cursor.set_lockState, X0
	615 Return 
	616 Move X20, [X31+128]
	617 Move X19, [X31+136]
	618 Move X22, [X31+112]
	619 Move X21, [X31+120]
	620 Move X30, [X31+96]
	621 Move X23, [X31+104]
	622 Move D9, [X31+80]
	623 Move D8, [X31+88]
	624 Move D11, [X31+64]
	625 Move D10, [X31+72]
	626 Move D13, [X31+48]
	627 Move D12, [X31+56]
	628 Add X31, X31, 144
	629 Return 
	630 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x01D7DB90 LDR X22, [X22 + 0x4A8]
	0x01D7DB94 BL 0x1C16F10
	0x01D7DB98 LDR X2, [X20]
	0x01D7DB9C MOV X1, X19
	0x01D7DBA0 MOV X3, X31
	0x01D7DBA4 MOV X20, X0
	0x01D7DBA8 BL 0x35C52F0
	0x01D7DBAC LDR X0, [X25]
	0x01D7DBB0 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X0+64], W31
	003 Move W0, 1
	004 Move X1, X31
	005 Call Cursor.set_visible, X0
	006 Move W0, W31
	007 Move X1, X31
	008 Move X30, [X31+16]
	009 Call Cursor.set_lockState, X0
	010 Return 

Method: System.Void StartLooking()

Disassembly:
	0x01D7DB44 LDR X0, [X0 + 0x4C0]
	0x01D7DB48 BL 0x1C16CF4
	0x01D7DB4C ADRP X0, 0x2376000
	0x01D7DB50 LDR X0, [X0 + 0xDA0]
	0x01D7DB54 BL 0x1C16CF4
	0x01D7DB58 MOVZ W8, 0x1
	0x01D7DB5C STRB W8, [X22 + 0x951]
	0x01D7DB60 ADRP X28, 0x2379000
	0x01D7DB64 ADRP X27, 0x2379000
	0x01D7DB68 ADRP X26, 0x2379000

ISIL:
	001 Move [X31-16], X30
	002 Move W8, 1
	003 Move [X0+64], W8
	004 Move W0, W31
	005 Move X1, X31
	006 Call Cursor.set_visible, X0
	007 Move W0, 1
	008 Move X1, X31
	009 Move X30, [X31+16]
	010 Call Cursor.set_lockState, X0
	011 Return 

Method: System.Void StopLooking()

Disassembly:
	0x01D7DB6C LDR X28, [X28 + 0x4B8]
	0x01D7DB70 LDR X27, [X27 + 0x4B0]
	0x01D7DB74 LDR X26, [X26 + 0x490]
	0x01D7DB78 LDR X0, [X21]
	0x01D7DB7C ADRP X24, 0x2379000
	0x01D7DB80 ADRP X23, 0x2379000
	0x01D7DB84 ADRP X22, 0x2379000
	0x01D7DB88 LDR X24, [X24 + 0x4A0]
	0x01D7DB8C LDR X23, [X23 + 0x488]

ISIL:
	001 Move [X31-16], X30
	002 Move [X0+64], W31
	003 Move W0, 1
	004 Move X1, X31
	005 Call Cursor.set_visible, X0
	006 Move W0, W31
	007 Move X1, X31
	008 Move X30, [X31+16]
	009 Call Cursor.set_lockState, X0
	010 Return 

Method: System.Void .ctor()

Disassembly:
	0x01D7DBB4 CBNZ W8, 0x1D7DBBC
	0x01D7DBB8 BL 0x1C16DFC
	0x01D7DBBC MOV X0, X20
	0x01D7DBC0 MOV X1, X31
	0x01D7DBC4 BL 0x1D36978
	0x01D7DBC8 LDR X0, [X21]
	0x01D7DBCC BL 0x1C16F10
	0x01D7DBD0 LDR X2, [X28]
	0x01D7DBD4 MOV X1, X19

ISIL:
	001 Move X8, -19472384
	002 Move V0, [X8+143]
	003 Move W8, 1
	004 Move W9, 0x42480000
	005 Move X1, X31
	006 Move [X0+40], W8
	007 Move [X0+44], V0
	008 Move [X0+60], W9
	009 Call MonoBehaviour..ctor, X0
	010 Return 

