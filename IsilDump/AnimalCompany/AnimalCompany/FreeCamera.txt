Type: AnimalCompany.FreeCamera

Method: System.Void Start()

Disassembly:
	0x01C9940C LDR X0, [X0 + 0x1A8]
	0x01C99410 BL 0x1B6E7F0
	0x01C99414 ADRP X0, 0x22B5000
	0x01C99418 LDR X0, [X0 + 0x1B0]
	0x01C9941C BL 0x1B6E7F0
	0x01C99420 ADRP X0, 0x22B5000
	0x01C99424 LDR X0, [X0 + 0x1B8]
	0x01C99428 BL 0x1B6E7F0
	0x01C9942C ADRP X0, 0x22B4000
	0x01C99430 LDR X0, [X0 + 0x478]
	0x01C99434 BL 0x1B6E7F0
	0x01C99438 MOVZ W8, 0x1
	0x01C9943C STRB W8, [X20 + 0x3E3]
	0x01C99440 LDR W8, [X19 + 0x80]
	0x01C99444 CMP W8, 0x3
	0x01C99448 B.NE 0x1C99574

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+32]
	005 Compare X0, 0
	006 JumpIfEqual {21}
	007 Move W1, 1
	008 Move X2, X31
	009 Call GameObject.SetActive, X0, X1
	010 Move X0, X19
	011 Move X1, X31
	012 Call Component.get_gameObject, X0
	013 Compare X0, 0
	014 JumpIfEqual {21}
	015 Move W1, W31
	016 Move X2, X31
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Call GameObject.SetActive, X0, X1
	020 Return 
	021 Call 0x1B6FA1C

Method: System.Void Update()

Disassembly:
	0x01C9944C ADRP X8, 0x22B5000
	0x01C99450 LDR X8, [X8 + 0x1B8]
	0x01C99454 ADRP X21, 0x22B4000
	0x01C99458 MOV X0, X19
	0x01C9945C LDR X1, [X8]
	0x01C99460 LDR X21, [X21 + 0x478]
	0x01C99464 BL 0x20904A4
	0x01C99468 STR X0, [X19 + 0xC8]
	0x01C9946C MOV X20, X0
	0x01C99470 LDR X0, [X21]
	0x01C99474 LDR W8, [X0 + 0xE0]
	0x01C99478 CBNZ W8, 0x1C99480
	0x01C9947C BL 0x1B6E8F8
	0x01C99480 MOV X0, X20
	0x01C99484 MOV X1, X31
	0x01C99488 MOV X2, X31
	0x01C9948C BL 0x3A9D6EC
	0x01C99490 TBZ X0, 0x0, 0x1C99574
	0x01C99494 LDR X23, [X19 + 0xC8]
	0x01C99498 CBZ X23, 0x1C99584
	0x01C9949C ADRP X22, 0x22B5000
	0x01C994A0 LDR X20, [X23 + 0x1C0]
	0x01C994A4 LDR X22, [X22 + 0x170]
	0x01C994A8 LDR X0, [X22]
	0x01C994AC BL 0x1B6EA0C
	0x01C994B0 ADRP X8, 0x22B5000
	0x01C994B4 LDR X8, [X8 + 0x1A8]
	0x01C994B8 MOV X1, X19
	0x01C994BC MOV X3, X31
	0x01C994C0 MOV X21, X0
	0x01C994C4 LDR X2, [X8]
	0x01C994C8 BL 0x317DB24
	0x01C994CC MOV X0, X20
	0x01C994D0 MOV X1, X21
	0x01C994D4 MOV X2, X31
	0x01C994D8 BL 0x322A750
	0x01C994DC LDR X1, [X22]
	0x01C994E0 CBZ X0, 0x1C99504
	0x01C994E4 LDR X8, [X0]
	0x01C994E8 CMP X8, X1
	0x01C994EC B.NE 0x1C9956C
	0x01C994F0 STR X0, [X23 + 0x1C0]
	0x01C994F4 LDR X8, [X0]
	0x01C994F8 CMP X8, X1
	0x01C994FC B.EQ 0x1C99508
	0x01C99500 B 0x1C9956C
	0x01C99504 STR X0, [X23 + 0x1C0]
	0x01C99508 LDR X23, [X19 + 0xC8]
	0x01C9950C CBZ X23, 0x1C99584
	0x01C99510 LDR X20, [X23 + 0x1C8]
	0x01C99514 MOV X0, X1
	0x01C99518 BL 0x1B6EA0C
	0x01C9951C ADRP X8, 0x22B5000
	0x01C99520 LDR X8, [X8 + 0x1B0]
	0x01C99524 MOV X1, X19
	0x01C99528 MOV X3, X31
	0x01C9952C MOV X21, X0
	0x01C99530 LDR X2, [X8]
	0x01C99534 BL 0x317DB24
	0x01C99538 MOV X0, X20
	0x01C9953C MOV X1, X21
	0x01C99540 MOV X2, X31
	0x01C99544 BL 0x322A750
	0x01C99548 CBZ X0, 0x1C99570
	0x01C9954C LDR X1, [X22]
	0x01C99550 LDR X8, [X0]
	0x01C99554 CMP X8, X1
	0x01C99558 B.NE 0x1C9956C
	0x01C9955C STR X0, [X23 + 0x1C8]
	0x01C99560 LDR X8, [X0]
	0x01C99564 CMP X8, X1
	0x01C99568 B.EQ 0x1C99574
	0x01C9956C BL 0x1B6ECDC
	0x01C99570 STR X0, [X23 + 0x1C8]
	0x01C99574 LDP X20, X19, [X31 + 0x20]
	0x01C99578 LDP X22, X21, [X31 + 0x10]
	0x01C9957C LDP X30, X23, [X31], #0x30
	0x01C99580 RET
	0x01C99584 BL 0x1B6EA1C
	0x01C99588 STP X30, X23, [X31 - 0x30]!
	0x01C9958C STP X22, X21, [X31 + 0x10]
	0x01C99590 STP X20, X19, [X31 + 0x20]
	0x01C99594 ADRP X20, 0x258A000
	0x01C99598 ADRP X21, 0x22B5000
	0x01C9959C LDRB W8, [X20 + 0x3E4]
	0x01C995A0 LDR X21, [X21 + 0x1C0]
	0x01C995A4 MOV X19, X0
	0x01C995A8 TBNZ X8, 0x0, 0x1C995F0
	0x01C995AC ADRP X0, 0x22B5000
	0x01C995B0 LDR X0, [X0 + 0x170]
	0x01C995B4 BL 0x1B6E7F0
	0x01C995B8 ADRP X0, 0x22B5000
	0x01C995BC LDR X0, [X0 + 0x1A8]
	0x01C995C0 BL 0x1B6E7F0
	0x01C995C4 ADRP X0, 0x22B5000
	0x01C995C8 LDR X0, [X0 + 0x1B0]
	0x01C995CC BL 0x1B6E7F0
	0x01C995D0 ADRP X0, 0x22B5000
	0x01C995D4 LDR X0, [X0 + 0x1C0]
	0x01C995D8 BL 0x1B6E7F0
	0x01C995DC ADRP X0, 0x22B4000
	0x01C995E0 LDR X0, [X0 + 0x478]
	0x01C995E4 BL 0x1B6E7F0
	0x01C995E8 MOVZ W8, 0x1
	0x01C995EC STRB W8, [X20 + 0x3E4]
	0x01C995F0 LDR X0, [X21]
	0x01C995F4 LDR W8, [X0 + 0xE0]
	0x01C995F8 CBNZ W8, 0x1C99600
	0x01C995FC BL 0x1B6E8F8
	0x01C99600 CBZ X19, 0x1C99730
	0x01C99604 LDR W8, [X19 + 0x30]
	0x01C99608 ADRP X9, 0x22B4000
	0x01C9960C LDR X9, [X9 + 0x478]
	0x01C99610 LDR X20, [X19 + 0xC8]
	0x01C99614 ORR W8, W8, 0x8
	0x01C99618 STR W8, [X19 + 0x30]
	0x01C9961C LDR X0, [X9]
	0x01C99620 LDR W8, [X0 + 0xE0]
	0x01C99624 CBNZ W8, 0x1C9962C
	0x01C99628 BL 0x1B6E8F8
	0x01C9962C MOV X0, X20
	0x01C99630 MOV X1, X31
	0x01C99634 MOV X2, X31
	0x01C99638 BL 0x3A9D6EC
	0x01C9963C TBZ X0, 0x0, 0x1C99720
	0x01C99640 LDR X23, [X19 + 0xC8]
	0x01C99644 CBZ X23, 0x1C99730
	0x01C99648 ADRP X22, 0x22B5000
	0x01C9964C LDR X20, [X23 + 0x1C0]
	0x01C99650 LDR X22, [X22 + 0x170]
	0x01C99654 LDR X0, [X22]
	0x01C99658 BL 0x1B6EA0C
	0x01C9965C ADRP X8, 0x22B5000
	0x01C99660 LDR X8, [X8 + 0x1A8]
	0x01C99664 MOV X1, X19
	0x01C99668 MOV X3, X31
	0x01C9966C MOV X21, X0
	0x01C99670 LDR X2, [X8]
	0x01C99674 BL 0x317DB24
	0x01C99678 MOV X0, X20
	0x01C9967C MOV X1, X21
	0x01C99680 MOV X2, X31
	0x01C99684 BL 0x322A948
	0x01C99688 LDR X1, [X22]
	0x01C9968C CBZ X0, 0x1C996B0
	0x01C99690 LDR X8, [X0]
	0x01C99694 CMP X8, X1
	0x01C99698 B.NE 0x1C99718
	0x01C9969C STR X0, [X23 + 0x1C0]
	0x01C996A0 LDR X8, [X0]
	0x01C996A4 CMP X8, X1
	0x01C996A8 B.EQ 0x1C996B4
	0x01C996AC B 0x1C99718
	0x01C996B0 STR X0, [X23 + 0x1C0]
	0x01C996B4 LDR X23, [X19 + 0xC8]
	0x01C996B8 CBZ X23, 0x1C99730
	0x01C996BC LDR X20, [X23 + 0x1C8]
	0x01C996C0 MOV X0, X1
	0x01C996C4 BL 0x1B6EA0C
	0x01C996C8 ADRP X8, 0x22B5000
	0x01C996CC LDR X8, [X8 + 0x1B0]
	0x01C996D0 MOV X1, X19
	0x01C996D4 MOV X3, X31
	0x01C996D8 MOV X21, X0
	0x01C996DC LDR X2, [X8]
	0x01C996E0 BL 0x317DB24
	0x01C996E4 MOV X0, X20
	0x01C996E8 MOV X1, X21
	0x01C996EC MOV X2, X31
	0x01C996F0 BL 0x322A948
	0x01C996F4 CBZ X0, 0x1C9971C
	0x01C996F8 LDR X1, [X22]
	0x01C996FC LDR X8, [X0]
	0x01C99700 CMP X8, X1
	0x01C99704 B.NE 0x1C99718
	0x01C99708 STR X0, [X23 + 0x1C8]
	0x01C9970C LDR X8, [X0]
	0x01C99710 CMP X8, X1
	0x01C99714 B.EQ 0x1C99720
	0x01C99718 BL 0x1B6ECDC
	0x01C9971C STR X0, [X23 + 0x1C8]
	0x01C99720 LDP X20, X19, [X31 + 0x20]
	0x01C99724 LDP X22, X21, [X31 + 0x10]
	0x01C99728 LDP X30, X23, [X31], #0x30
	0x01C9972C RET
	0x01C99730 BL 0x1B6EA1C
	0x01C99734 STP X30, X19, [X31 - 0x10]!
	0x01C99738 MOV X1, X31
	0x01C9973C MOV X19, X0
	0x01C99740 BL 0x3A9B084
	0x01C99744 CBZ X0, 0x1C99760
	0x01C99748 MOV X1, X31
	0x01C9974C BL 0x3AA7658
	0x01C99750 STP S0, S1, [X19 + 0xB4]
	0x01C99754 STR S2, [X19 + 0xBC]
	0x01C99758 LDP X30, X19, [X31], #0x10
	0x01C9975C RET
	0x01C99760 BL 0x1B6EA1C
	0x01C99764 STP D9, D8, [X31 - 0x20]!
	0x01C99768 STP X30, X19, [X31 + 0x10]
	0x01C9976C MOV X19, X0
	0x01C99770 LDR X0, [X0 + 0x40]
	0x01C99774 CBZ X0, 0x1C997F4
	0x01C99778 LDRB W8, [X0 + 0x60]
	0x01C9977C TBNZ X8, 0x1, 0x1C997F4
	0x01C99780 MOV X1, X31
	0x01C99784 BL 0x1D9E6A0
	0x01C99788 TBZ X0, 0x0, 0x1C997F4
	0x01C9978C MOV X0, X19
	0x01C99790 MOV X1, X31
	0x01C99794 BL 0x3A9B084
	0x01C99798 CBZ X0, 0x1C99800
	0x01C9979C MOV X1, X31
	0x01C997A0 BL 0x3AA7658
	0x01C997A4 LDUR V3, [X19 + 0xB4]
	0x01C997A8 LDR V4, [X19 + 0xBC]
	0x01C997AC MOV X0, X31
	0x01C997B0 MOV V0.S[1], V1.S[0]
	0x01C997B4 FSUB V8.2S, V0.2S, V3.2S
	0x01C997B8 FSUB S9, S2, S4
	0x01C997BC BL 0x3AA481C
	0x01C997C0 UNIMPLEMENTED
	0x01C997C4 FDIV S0, S9, S0
	0x00000000 INVALID
	0x01C997CC MOV X0, X19
	0x01C997D0 MOV X1, X31
	0x01C997D4 STR D1, [X19 + 0xA8]
	0x01C997D8 STR S0, [X19 + 0xB0]
	0x01C997DC BL 0x3A9B084
	0x01C997E0 CBZ X0, 0x1C99800
	0x01C997E4 MOV X1, X31
	0x01C997E8 BL 0x3AA7658
	0x01C997EC STP S0, S1, [X19 + 0xB4]
	0x01C997F0 STR S2, [X19 + 0xBC]
	0x01C997F4 LDP X30, X19, [X31 + 0x10]
	0x01C997F8 LDP D9, D8, [X31], #0x20
	0x01C997FC RET
	0x01C99800 BL 0x1B6EA1C
	0x01C99804 SUB X31, X31, 0x40
	0x01C99808 STP X30, X23, [X31 + 0x10]
	0x01C9980C STP X22, X21, [X31 + 0x20]
	0x01C99810 STP X20, X19, [X31 + 0x30]
	0x01C99814 ADRP X23, 0x258A000
	0x01C99818 LDRB W8, [X23 + 0x3E5]
	0x01C9981C MOV W20, W3
	0x01C99820 MOV W21, W2
	0x01C99824 MOV X22, X1
	0x01C99828 MOV X19, X0
	0x01C9982C TBNZ X8, 0x0, 0x1C9985C
	0x01C99830 ADRP X0, 0x22B5000
	0x01C99834 LDR X0, [X0 + 0x1C0]
	0x01C99838 BL 0x1B6E7F0
	0x01C9983C ADRP X0, 0x22B5000
	0x01C99840 LDR X0, [X0 + 0x190]
	0x01C99844 BL 0x1B6E7F0
	0x01C99848 ADRP X0, 0x22B5000
	0x01C9984C LDR X0, [X0 + 0x1C8]
	0x01C99850 BL 0x1B6E7F0
	0x01C99854 MOVZ W8, 0x1
	0x01C99858 STRB W8, [X23 + 0x3E5]
	0x01C9985C STP X31, X31, [X31]
	0x01C99860 LDRB W8, [X19 + 0x58]
	0x01C99864 CBZ W8, 0x1C998D4
	0x01C99868 STRB W31, [X19 + 0x58]
	0x01C9986C LDR X0, [X19 + 0x38]
	0x01C99870 CBZ X0, 0x1C99A5C
	0x01C99874 ADRP X8, 0x22B5000
	0x01C99878 LDR X8, [X8 + 0x190]
	0x01C9987C ADD X2, X31, 0x8
	0x01C99880 MOV X1, X22
	0x01C99884 LDR X3, [X8]
	0x01C99888 BL 0x2113594
	0x01C9988C TBZ X0, 0x0, 0x1C99A48
	0x01C99890 LDR X0, [X31 + 0x8]
	0x01C99894 CBZ X0, 0x1C99A5C
	0x01C99898 BL 0x1C99A60
	0x01C9989C STR X0, [X31]
	0x01C998A0 ADD X0, X31, 0x0
	0x01C998A4 MOV X1, X31
	0x01C998A8 BL 0x1D680F0
	0x01C998AC TBZ X0, 0x0, 0x1C998B4
	0x01C998B0 TBZ X21, 0x0, 0x1C99A48
	0x01C998B4 LDR X8, [X31 + 0x8]
	0x01C998B8 CBZ X8, 0x1C99A5C
	0x01C998BC LDR X9, [X8 + 0x40]
	0x01C998C0 CBZ X9, 0x1C9998C
	0x01C998C4 LDR X9, [X9 + 0x20]
	0x01C998C8 CBZ X9, 0x1C9998C
	0x01C998CC LDR W1, [X9]
	0x01C998D0 B 0x1C99990
	0x01C998D4 ADRP X23, 0x22B5000
	0x01C998D8 LDR X23, [X23 + 0x1C0]
	0x01C998DC LDR X0, [X23]
	0x01C998E0 LDR W8, [X0 + 0xE0]
	0x01C998E4 CBNZ W8, 0x1C998EC
	0x01C998E8 BL 0x1B6E8F8
	0x01C998EC MOV X0, X19
	0x01C998F0 MOV X1, X31
	0x01C998F4 BL 0x1D697C8
	0x01C998F8 LDR X0, [X19 + 0x38]
	0x01C998FC CBZ X0, 0x1C99A5C
	0x01C99900 MOV X1, X31
	0x01C99904 BL 0x1D87040
	0x01C99908 CMP W0, 0x4
	0x01C9990C B.EQ 0x1C99A48
	0x01C99910 LDR X0, [X19 + 0x40]
	0x01C99914 CBZ X0, 0x1C99A5C
	0x01C99918 MOV X1, X31
	0x01C9991C BL 0x1D9F538
	0x01C99920 ANDS W31, W0, 0x3
	0x01C99924 B.EQ 0x1C999B8
	0x01C99928 MOV W8, W0
	0x01C9992C LDR X0, [X19 + 0x38]
	0x01C99930 TBNZ X8, 0x0, 0x1C999EC
	0x01C99934 CBZ X0, 0x1C99A5C
	0x01C99938 LDR X0, [X0 + 0x50]
	0x01C9993C CBZ X0, 0x1C99A5C
	0x01C99940 MOV X1, X31
	0x01C99944 BL 0x1DBEFE4
	0x01C99948 TBZ X0, 0x0, 0x1C99A48
	0x01C9994C LDR X8, [X19 + 0x38]
	0x01C99950 CBZ X8, 0x1C99A5C
	0x01C99954 LDR X0, [X8 + 0x50]
	0x01C99958 MOVZ W1, 0x18
	0x01C9995C MOV X2, X31
	0x01C99960 BL 0x1DD601C
	0x01C99964 MOV X23, X0
	0x01C99968 MOVZ W0, 0x1
	0x01C9996C MOV X1, X31
	0x01C99970 BL 0x1D29EBC
	0x01C99974 LDR X8, [X19 + 0x40]
	0x01C99978 CBZ X8, 0x1C99A5C
	0x01C9997C LDR X8, [X8 + 0x20]
	0x01C99980 CBZ X8, 0x1C99A00
	0x01C99984 LDR W0, [X8]
	0x01C99988 B 0x1C99A04
	0x01C9998C MOV X1, X31
	0x01C99990 LDR W8, [X8 + 0x68]
	0x01C99994 MOV X0, X19
	0x01C99998 BFM X1, X8, 0x20, 0x1F
	0x01C9999C BL 0x1C98D7C
	0x01C999A0 LDR X0, [X31 + 0x8]
	0x01C999A4 CBZ X0, 0x1C99A5C
	0x01C999A8 AND W2, W20, 0x1
	0x01C999AC MOV X1, X19
	0x01C999B0 BL 0x1C99AC0
	0x01C999B4 B 0x1C99A48
	0x01C999B8 LDR X0, [X23]
	0x01C999BC LDR X19, [X19 + 0x40]
	0x01C999C0 LDR W8, [X0 + 0xE0]
	0x01C999C4 CBNZ W8, 0x1C999CC
	0x01C999C8 BL 0x1B6E8F8
	0x01C999CC ADRP X8, 0x22B5000
	0x01C999D0 LDR X8, [X8 + 0x1C8]
	0x01C999D4 MOVZ W2, 0x3
	0x01C999D8 MOV X1, X19
	0x01C999DC MOV X3, X31
	0x01C999E0 LDR X0, [X8]
	0x01C999E4 BL 0x1D69640
	0x01C999E8 B 0x1C99A48
	0x01C999EC MOV W1, W31
	0x01C999F0 MOV W2, W31
	0x01C999F4 MOV X3, X31
	0x01C999F8 BL 0x1DA84F4
	0x01C999FC B 0x1C9986C
	0x01C99A00 MOV X0, X31
	0x01C99A04 LDR W1, [X19 + 0x68]
	0x01C99A08 MOVZ W2, 0x1
	0x01C99A0C MOV X3, X31
	0x01C99A10 BL 0x1DA8258
	0x01C99A14 AND W8, W21, 0x1
	0x01C99A18 AND W9, W20, 0x1
	0x01C99A1C STUR X0, [X23 + 0x1C]
	0x01C99A20 STUR X22, [X23 + 0x24]
	0x01C99A24 STP W8, W9, [X23 + 0x2C]
	0x01C99A28 CBZ X23, 0x1C99A5C
	0x01C99A2C MOVZ W8, 0xC0
	0x01C99A30 STR W8, [X23 + 0xC]
	0x01C99A34 LDR X0, [X19 + 0x38]
	0x01C99A38 CBZ X0, 0x1C99A5C
	0x01C99A3C MOV X1, X23
	0x01C99A40 MOV X2, X31
	0x01C99A44 BL 0x1D8A710
	0x01C99A48 LDP X20, X19, [X31 + 0x30]
	0x01C99A4C LDP X22, X21, [X31 + 0x20]
	0x01C99A50 LDP X30, X23, [X31 + 0x10]
	0x01C99A54 ADD X31, X31, 0x40
	0x01C99A58 RET
	0x01C99A5C BL 0x1B6EA1C
	0x01C99A60 STP X30, X19, [X31 - 0x10]!
	0x01C99A64 LDR X8, [X0 + 0x50]
	0x01C99A68 CBZ X8, 0x1C99A78
	0x01C99A6C LDR X0, [X8]
	0x01C99A70 LDP X30, X19, [X31], #0x10
	0x01C99A74 RET
	0x01C99A78 ADRP X0, 0x22B4000
	0x01C99A7C LDR X0, [X0 + 0x490]
	0x01C99A80 BL 0x1B6E804
	0x01C99A84 BL 0x1B6EA0C
	0x01C99A88 MOV X19, X0
	0x01C99A8C ADRP X0, 0x22B5000
	0x01C99A90 LDR X0, [X0 + 0x1D0]
	0x01C99A94 BL 0x1B6E804
	0x01C99A98 MOV X1, X0
	0x01C99A9C MOV X0, X19
	0x01C99AA0 MOV X2, X31
	0x01C99AA4 BL 0x31E7550
	0x01C99AA8 ADRP X0, 0x22B5000
	0x01C99AAC LDR X0, [X0 + 0x1D8]
	0x01C99AB0 BL 0x1B6E804
	0x01C99AB4 MOV X1, X0
	0x01C99AB8 MOV X0, X19
	0x01C99ABC BL 0x1B6E8E8
	0x01C99AC0 STP X30, X21, [X31 - 0x20]!
	0x01C99AC4 STP X20, X19, [X31 + 0x10]
	0x01C99AC8 LDR X8, [X0 + 0x38]
	0x01C99ACC STR X1, [X0 + 0x168]
	0x01C99AD0 CBZ X8, 0x1C99BA0
	0x01C99AD4 LDR W8, [X8 + 0x180]
	0x01C99AD8 MOV W20, W2
	0x01C99ADC MOV X19, X0
	0x01C99AE0 MOV X21, X1
	0x01C99AE4 CMP W8, 0x2
	0x01C99AE8 B.NE 0x1C99B24
	0x01C99AEC LDR X0, [X19 + 0x40]
	0x01C99AF0 CBZ X0, 0x1C99BA0
	0x01C99AF4 LDRB W8, [X0 + 0x60]
	0x01C99AF8 TBNZ X8, 0x1, 0x1C99B70
	0x01C99AFC MOV X1, X31
	0x01C99B00 BL 0x1D9E780
	0x01C99B04 TBZ X0, 0x0, 0x1C99B68
	0x01C99B08 CBZ X21, 0x1C99BA0
	0x01C99B0C LDR X8, [X21 + 0x40]
	0x01C99B10 CBZ X8, 0x1C99B80
	0x01C99B14 LDR X8, [X8 + 0x20]
	0x01C99B18 CBZ X8, 0x1C99B80
	0x01C99B1C LDR W1, [X8]
	0x01C99B20 B 0x1C99B84
	0x01C99B24 CBZ X21, 0x1C99BA0
	0x01C99B28 LDR X8, [X21 + 0x40]
	0x01C99B2C CBZ X8, 0x1C99B40
	0x01C99B30 LDR X8, [X8 + 0x20]
	0x01C99B34 CBZ X8, 0x1C99B40
	0x01C99B38 LDR W1, [X8]
	0x01C99B3C B 0x1C99B44
	0x01C99B40 MOV X1, X31
	0x01C99B44 LDR W8, [X21 + 0x68]
	0x01C99B48 AND W2, W20, 0x1
	0x01C99B4C MOV X0, X19
	0x01C99B50 LDP X20, X19, [X31 + 0x10]
	0x01C99B54 BFM X1, X8, 0x20, 0x1F
	0x01C99B58 MOV X3, X31
	0x01C99B5C MOV X4, X31
	0x01C99B60 LDP X30, X21, [X31], #0x20
	0x01C99B64 B 0x1C9EF5C
	0x01C99B68 LDR X0, [X19 + 0x40]
	0x01C99B6C CBZ X0, 0x1C99BA0
	0x01C99B70 LDP X20, X19, [X31 + 0x10]
	0x01C99B74 MOV X1, X31
	0x01C99B78 LDP X30, X21, [X31], #0x20
	0x01C99B7C B 0x1D9F9D8
	0x01C99B80 MOV X1, X31
	0x01C99B84 LDR W8, [X21 + 0x68]
	0x01C99B88 AND W2, W20, 0x1
	0x01C99B8C MOV X0, X19
	0x01C99B90 LDP X20, X19, [X31 + 0x10]
	0x01C99B94 BFM X1, X8, 0x20, 0x1F
	0x01C99B98 LDP X30, X21, [X31], #0x20
	0x01C99B9C B 0x1C9EE84
	0x01C99BA0 BL 0x1B6EA1C
	0x01C99BA4 SUB X31, X31, 0x80
	0x01C99BA8 STP D15, D14, [X31 + 0x10]
	0x01C99BAC STP D13, D12, [X31 + 0x20]
	0x01C99BB0 STP D11, D10, [X31 + 0x30]
	0x01C99BB4 STP D9, D8, [X31 + 0x40]
	0x01C99BB8 STR X30, [X31 + 0x50]
	0x01C99BBC STP X22, X21, [X31 + 0x60]
	0x01C99BC0 STP X20, X19, [X31 + 0x70]
	0x01C99BC4 ADRP X22, 0x258A000
	0x01C99BC8 MOV V8.16B, V3.16B
	0x01C99BCC MOV V9.16B, V2.16B
	0x01C99BD0 MOV V10.16B, V1.16B
	0x01C99BD4 MOV V15.16B, V0.16B
	0x01C99BD8 LDP S0, S14, [X31 + 0x94]
	0x01C99BDC LDR V1, [X31 + 0x90]
	0x01C99BE0 LDP S2, S11, [X31 + 0x84]
	0x01C99BE4 LDRB W8, [X22 + 0x3E6]
	0x01C99BE8 LDR V3, [X31 + 0x80]
	0x01C99BEC MOV W19, W2
	0x01C99BF0 MOV V12.16B, V5.16B
	0x01C99BF4 MOV V13.16B, V4.16B
	0x01C99BF8 MOV X21, X1
	0x01C99BFC MOV X20, X0
	0x01C99C00 TBNZ X8, 0x0, 0x1C99C7C
	0x01C99C04 ADRP X0, 0x22B5000
	0x01C99C08 LDR X0, [X0 + 0x1C0]
	0x01C99C0C STP S11, S15, [X31 + 0x58]
	0x01C99C10 STP S14, S10, [X31 + 0x8]
	0x01C99C14 STR S9, [X31 + 0x4]
	0x01C99C18 MOV V9.16B, V8.16B
	0x01C99C1C MOV V8.16B, V13.16B
	0x01C99C20 MOV V13.16B, V12.16B
	0x01C99C24 MOV V12.16B, V6.16B
	0x01C99C28 MOV V15.16B, V0.16B
	0x01C99C2C MOV V11.16B, V1.16B
	0x01C99C30 MOV V10.16B, V2.16B
	0x01C99C34 MOV V14.16B, V3.16B
	0x01C99C38 BL 0x1B6E7F0
	0x01C99C3C ADRP X0, 0x22B5000
	0x01C99C40 LDR X0, [X0 + 0x1E0]
	0x01C99C44 BL 0x1B6E7F0
	0x01C99C48 MOV V3.16B, V14.16B
	0x01C99C4C MOV V2.16B, V10.16B
	0x01C99C50 MOV V1.16B, V11.16B
	0x01C99C54 MOV V0.16B, V15.16B
	0x01C99C58 MOV V6.16B, V12.16B
	0x01C99C5C MOV V12.16B, V13.16B
	0x01C99C60 MOV V13.16B, V8.16B
	0x01C99C64 MOV V8.16B, V9.16B
	0x01C99C68 LDP S9, S14, [X31 + 0x4]
	0x01C99C6C LDR V10, [X31 + 0xC]
	0x01C99C70 LDP S11, S15, [X31 + 0x58]
	0x01C99C74 MOVZ W8, 0x1
	0x01C99C78 STRB W8, [X22 + 0x3E6]
	0x01C99C7C LDRB W8, [X20 + 0x58]
	0x01C99C80 CBZ W8, 0x1C99CE0
	0x01C99C84 STRB W31, [X20 + 0x58]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], D13
	003 Move [X31+56], D12
	004 Move [X31+64], D11
	005 Move [X31+72], D10
	006 Move [X31+80], D9
	007 Move [X31+88], D8
	008 Move [X31+96], X30
	009 Move [X31+104], X23
	010 Move [X31+112], X22
	011 Move [X31+120], X21
	012 Move [X31+128], X20
	013 Move [X31+136], X19
	014 Move X20, 0x258B000
	015 Move W8, [X20+993]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {32}
	021 Move X0, 0x22B6000
	022 Move X0, [X0+312]
	023 Call 0x1B6F7F0
	024 Move X0, 0x22B6000
	025 Move X0, [X0+320]
	026 Call 0x1B6F7F0
	027 Move X0, 0x22B6000
	028 Move X0, [X0+328]
	029 Call 0x1B6F7F0
	030 Move W8, 1
	031 Move [X20+993], W8
	032 Move W0, 304
	033 Move X1, X31
	034 Call Input.GetKey, X0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {40}
	039 Move W21, 1
	040 Move W0, 303
	041 Move X1, X31
	042 Call Input.GetKey, X0
	043 And W21, W0, 1
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move W8, 48
	046 Move W9, 44
	047 NotImplemented "Instruction CSEL not yet implemented."
	048 Move V0, [X19]
	049 Move W0, 97
	050 Move X1, X31
	051 Move [X31+2], V0
	052 Call Input.GetKey, X0
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {64}
	057 Move W0, 276
	058 Move X1, X31
	059 Call Input.GetKey, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {105}
	064 Move X0, X19
	065 Move X1, X31
	066 Call Component.get_transform, X0
	067 Move X20, X0
	068 Move X0, X19
	069 Move X1, X31
	070 Call Component.get_transform, X0
	071 Compare X0, 0
	072 JumpIfEqual {630}
	073 Move X1, X31
	074 Call Transform.get_position, X0
	075 Move X0, X19
	076 Move X1, X31
	077 Move V8, V0
	078 Move V9, V1
	079 Move V10, V2
	080 Call Component.get_transform, X0
	081 Compare X0, 0
	082 JumpIfEqual {630}
	083 Move X1, X31
	084 Call Transform.get_right, X0
	085 Move X0, X31
	086 Move V11, V0
	087 Move V12, V1
	088 Move V13, V2
	089 Call Time.get_deltaTime
	090 Compare X20, 0
	091 JumpIfEqual {630}
	092 Move V3, [X31+2]
	093 Move X0, X20
	094 Move X1, X31
	095 Multiply S1, S3, S13
	096 Multiply S2, S3, S12
	097 Multiply S3, S3, S11
	098 Multiply S1, S0, S1
	099 Multiply S4, S0, S2
	100 Multiply S0, S0, S3
	101 Subtract S2, S10, S1
	102 Subtract S1, S9, S4
	103 Subtract S0, S8, S0
	104 Call Transform.set_position, X0, X1
	105 Move W0, 100
	106 Move X1, X31
	107 Call Input.GetKey, X0
	108 Move TEMP, X0
	109 And TEMP, TEMP, 1
	110 Compare TEMP, 1
	111 JumpIfEqual {119}
	112 Move W0, 275
	113 Move X1, X31
	114 Call Input.GetKey, X0
	115 Move TEMP, X0
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {160}
	119 Move X0, X19
	120 Move X1, X31
	121 Call Component.get_transform, X0
	122 Move X20, X0
	123 Move X0, X19
	124 Move X1, X31
	125 Call Component.get_transform, X0
	126 Compare X0, 0
	127 JumpIfEqual {630}
	128 Move X1, X31
	129 Call Transform.get_position, X0
	130 Move X0, X19
	131 Move X1, X31
	132 Move V8, V0
	133 Move V9, V1
	134 Move V10, V2
	135 Call Component.get_transform, X0
	136 Compare X0, 0
	137 JumpIfEqual {630}
	138 Move X1, X31
	139 Call Transform.get_right, X0
	140 Move X0, X31
	141 Move V11, V0
	142 Move V12, V1
	143 Move V13, V2
	144 Call Time.get_deltaTime
	145 Compare X20, 0
	146 JumpIfEqual {630}
	147 Move V3, [X31+2]
	148 Move X0, X20
	149 Move X1, X31
	150 Multiply S1, S3, S13
	151 Multiply S2, S3, S12
	152 Multiply S3, S3, S11
	153 Multiply S1, S0, S1
	154 Multiply S4, S0, S2
	155 Multiply S0, S0, S3
	156 Add S2, S10, S1
	157 Add S1, S9, S4
	158 Add S0, S8, S0
	159 Call Transform.set_position, X0, X1
	160 Move W0, 119
	161 Move X1, X31
	162 Call Input.GetKey, X0
	163 Move TEMP, X0
	164 And TEMP, TEMP, 1
	165 Compare TEMP, 1
	166 JumpIfEqual {174}
	167 Move W0, 273
	168 Move X1, X31
	169 Call Input.GetKey, X0
	170 Move TEMP, X0
	171 And TEMP, TEMP, 1
	172 Compare TEMP, 1
	173 JumpIfNotEqual {215}
	174 Move X0, X19
	175 Move X1, X31
	176 Call Component.get_transform, X0
	177 Move X20, X0
	178 Move X0, X19
	179 Move X1, X31
	180 Call Component.get_transform, X0
	181 Compare X0, 0
	182 JumpIfEqual {630}
	183 Move X1, X31
	184 Call Transform.get_position, X0
	185 Move X0, X19
	186 Move X1, X31
	187 Move V8, V0
	188 Move V9, V1
	189 Move V10, V2
	190 Call Component.get_transform, X0
	191 Compare X0, 0
	192 JumpIfEqual {630}
	193 Move X1, X31
	194 Call Transform.get_forward, X0
	195 Move X0, X31
	196 Move V11, V0
	197 Move V12, V1
	198 Move V13, V2
	199 Call Time.get_deltaTime
	200 Compare X20, 0
	201 JumpIfEqual {630}
	202 Move V3, [X31+2]
	203 Move X0, X20
	204 Move X1, X31
	205 Multiply S1, S3, S13
	206 Multiply S2, S3, S12
	207 Multiply S3, S3, S11
	208 Multiply S1, S0, S1
	209 Multiply S4, S0, S2
	210 Multiply S0, S0, S3
	211 Add S2, S10, S1
	212 Add S1, S9, S4
	213 Add S0, S8, S0
	214 Call Transform.set_position, X0, X1
	215 Move W0, 115
	216 Move X1, X31
	217 Call Input.GetKey, X0
	218 Move TEMP, X0
	219 And TEMP, TEMP, 1
	220 Compare TEMP, 1
	221 JumpIfEqual {229}
	222 Move W0, 274
	223 Move X1, X31
	224 Call Input.GetKey, X0
	225 Move TEMP, X0
	226 And TEMP, TEMP, 1
	227 Compare TEMP, 1
	228 JumpIfNotEqual {270}
	229 Move X0, X19
	230 Move X1, X31
	231 Call Component.get_transform, X0
	232 Move X20, X0
	233 Move X0, X19
	234 Move X1, X31
	235 Call Component.get_transform, X0
	236 Compare X0, 0
	237 JumpIfEqual {630}
	238 Move X1, X31
	239 Call Transform.get_position, X0
	240 Move X0, X19
	241 Move X1, X31
	242 Move V8, V0
	243 Move V9, V1
	244 Move V10, V2
	245 Call Component.get_transform, X0
	246 Compare X0, 0
	247 JumpIfEqual {630}
	248 Move X1, X31
	249 Call Transform.get_forward, X0
	250 Move X0, X31
	251 Move V11, V0
	252 Move V12, V1
	253 Move V13, V2
	254 Call Time.get_deltaTime
	255 Compare X20, 0
	256 JumpIfEqual {630}
	257 Move V3, [X31+2]
	258 Move X0, X20
	259 Move X1, X31
	260 Multiply S1, S3, S13
	261 Multiply S2, S3, S12
	262 Multiply S3, S3, S11
	263 Multiply S1, S0, S1
	264 Multiply S4, S0, S2
	265 Multiply S0, S0, S3
	266 Subtract S2, S10, S1
	267 Subtract S1, S9, S4
	268 Subtract S0, S8, S0
	269 Call Transform.set_position, X0, X1
	270 Move W0, 113
	271 Move X1, X31
	272 Call Input.GetKey, X0
	273 Move TEMP, X0
	274 And TEMP, TEMP, 1
	275 Compare TEMP, 1
	276 JumpIfNotEqual {318}
	277 Move X0, X19
	278 Move X1, X31
	279 Call Component.get_transform, X0
	280 Move X20, X0
	281 Move X0, X19
	282 Move X1, X31
	283 Call Component.get_transform, X0
	284 Compare X0, 0
	285 JumpIfEqual {630}
	286 Move X1, X31
	287 Call Transform.get_position, X0
	288 Move X0, X19
	289 Move X1, X31
	290 Move V8, V0
	291 Move V9, V1
	292 Move V10, V2
	293 Call Component.get_transform, X0
	294 Compare X0, 0
	295 JumpIfEqual {630}
	296 Move X1, X31
	297 Call Transform.get_up, X0
	298 Move X0, X31
	299 Move V11, V0
	300 Move V12, V1
	301 Move V13, V2
	302 Call Time.get_deltaTime
	303 Compare X20, 0
	304 JumpIfEqual {630}
	305 Move V3, [X31+2]
	306 Move X0, X20
	307 Move X1, X31
	308 Multiply S1, S3, S13
	309 Multiply S2, S3, S12
	310 Multiply S3, S3, S11
	311 Multiply S1, S0, S1
	312 Multiply S4, S0, S2
	313 Multiply S0, S0, S3
	314 Add S2, S10, S1
	315 Add S1, S9, S4
	316 Add S0, S8, S0
	317 Call Transform.set_position, X0, X1
	318 Move W0, 101
	319 Move X1, X31
	320 Call Input.GetKey, X0
	321 Move TEMP, X0
	322 And TEMP, TEMP, 1
	323 Compare TEMP, 1
	324 JumpIfNotEqual {366}
	325 Move X0, X19
	326 Move X1, X31
	327 Call Component.get_transform, X0
	328 Move X20, X0
	329 Move X0, X19
	330 Move X1, X31
	331 Call Component.get_transform, X0
	332 Compare X0, 0
	333 JumpIfEqual {630}
	334 Move X1, X31
	335 Call Transform.get_position, X0
	336 Move X0, X19
	337 Move X1, X31
	338 Move V8, V0
	339 Move V9, V1
	340 Move V10, V2
	341 Call Component.get_transform, X0
	342 Compare X0, 0
	343 JumpIfEqual {630}
	344 Move X1, X31
	345 Call Transform.get_up, X0
	346 Move X0, X31
	347 Move V11, V0
	348 Move V12, V1
	349 Move V13, V2
	350 Call Time.get_deltaTime
	351 Compare X20, 0
	352 JumpIfEqual {630}
	353 Move V3, [X31+2]
	354 Move X0, X20
	355 Move X1, X31
	356 Multiply S1, S3, S13
	357 Multiply S2, S3, S12
	358 Multiply S3, S3, S11
	359 Multiply S1, S0, S1
	360 Multiply S4, S0, S2
	361 Multiply S0, S0, S3
	362 Subtract S2, S10, S1
	363 Subtract S1, S9, S4
	364 Subtract S0, S8, S0
	365 Call Transform.set_position, X0, X1
	366 Move W0, 114
	367 Move X1, X31
	368 Call Input.GetKey, X0
	369 Move X22, 0x22B5000
	370 Move X22, [X22+1152]
	371 Move X23, 0x258B000
	372 Move TEMP, X0
	373 And TEMP, TEMP, 1
	374 Compare TEMP, 1
	375 JumpIfEqual {383}
	376 Move W0, 280
	377 Move X1, X31
	378 Call Input.GetKey, X0
	379 Move TEMP, X0
	380 And TEMP, TEMP, 1
	381 Compare TEMP, 1
	382 JumpIfNotEqual {427}
	383 Move X0, X19
	384 Move X1, X31
	385 Call Component.get_transform, X0
	386 Move X20, X0
	387 Move X0, X19
	388 Move X1, X31
	389 Call Component.get_transform, X0
	390 Compare X0, 0
	391 JumpIfEqual {630}
	392 Move X1, X31
	393 Call Transform.get_position, X0
	394 Move W8, [X23+1090]
	395 Move V8, V0
	396 Move V9, V1
	397 Move V10, V2
	398 Compare W8, 0
	399 JumpIfNotEqual {405}
	400 Move X0, 0x22B5000
	401 Move X0, [X0+1152]
	402 Call 0x1B6F7F0
	403 Move W8, 1
	404 Move [X23+1090], W8
	405 Move X8, [X22]
	406 Move X0, X31
	407 Move X8, [X8+184]
	408 Move S11, [X8+24]
	409 Move S12, [X8+28]
	410 Move V13, [X8+32]
	411 Call Time.get_deltaTime
	412 Compare X20, 0
	413 JumpIfEqual {630}
	414 Move V3, [X31+2]
	415 Move X0, X20
	416 Move X1, X31
	417 Multiply S1, S3, S13
	418 Multiply S2, S3, S12
	419 Multiply S3, S3, S11
	420 Multiply S1, S1, S0
	421 Multiply S4, S2, S0
	422 Multiply S0, S3, S0
	423 Add S2, S10, S1
	424 Add S1, S9, S4
	425 Add S0, S8, S0
	426 Call Transform.set_position, X0, X1
	427 Move W0, 102
	428 Move X1, X31
	429 Call Input.GetKey, X0
	430 Move TEMP, X0
	431 And TEMP, TEMP, 1
	432 Compare TEMP, 1
	433 JumpIfEqual {441}
	434 Move W0, 281
	435 Move X1, X31
	436 Call Input.GetKey, X0
	437 Move TEMP, X0
	438 And TEMP, TEMP, 1
	439 Compare TEMP, 1
	440 JumpIfNotEqual {485}
	441 Move X0, X19
	442 Move X1, X31
	443 Call Component.get_transform, X0
	444 Move X20, X0
	445 Move X0, X19
	446 Move X1, X31
	447 Call Component.get_transform, X0
	448 Compare X0, 0
	449 JumpIfEqual {630}
	450 Move X1, X31
	451 Call Transform.get_position, X0
	452 Move W8, [X23+1090]
	453 Move V8, V2
	454 Move [X31+16], D0
	455 Move [X31], D1
	456 Compare W8, 0
	457 JumpIfNotEqual {463}
	458 Move X0, 0x22B5000
	459 Move X0, [X0+1152]
	460 Call 0x1B6F7F0
	461 Move W8, 1
	462 Move [X23+1090], W8
	463 Move X8, [X22]
	464 Move X0, X31
	465 Move X8, [X8+184]
	466 Move V9, [X8+24]
	467 Move V10, [X8+32]
	468 Call Time.get_deltaTime
	469 Compare X20, 0
	470 JumpIfEqual {630}
	471 Move V3, [X31+16]
	472 Move V2, [X31+32]
	473 Move V4, [X31]
	474 Move X0, X20
	475 Move X1, X31
	476 Multiply S1, S2, S10
	477 NotImplemented "Instruction INVALID not yet implemented."
	478 Move V3.S[1], V4.S[0]
	479 Multiply S1, S1, S0
	480 NotImplemented "Instruction INVALID not yet implemented."
	481 Subtract V0, V3, V0
	482 Subtract S2, S8, S1
	483 Move S1, V0.S[1]
	484 Call Transform.set_position, X0, X1
	485 Move W8, [X19+64]
	486 Compare W8, 0
	487 JumpIfEqual {530}
	488 Move X0, X19
	489 Move X1, X31
	490 Call Component.get_transform, X0
	491 Compare X0, 0
	492 JumpIfEqual {630}
	493 Move X20, 0x22B6000
	494 Move X20, [X20+320]
	495 Move X1, X31
	496 Call Transform.get_localEulerAngles, X0
	497 Move X0, [X20]
	498 Move X1, X31
	499 Move V8, V1
	500 Call Input.GetAxis, X0
	501 Move V12, [X19+52]
	502 Move X0, X19
	503 Move X1, X31
	504 Move V9, V0
	505 Call Component.get_transform, X0
	506 Compare X0, 0
	507 JumpIfEqual {630}
	508 Move X20, 0x22B6000
	509 Move X20, [X20+312]
	510 Move X1, X31
	511 Call Transform.get_localEulerAngles, X0
	512 Move X0, [X20]
	513 Move X1, X31
	514 Move V10, V0
	515 Call Input.GetAxis, X0
	516 Move V13, [X19+52]
	517 Move X0, X19
	518 Move X1, X31
	519 Move V11, V0
	520 Call Component.get_transform, X0
	521 Compare X0, 0
	522 JumpIfEqual {630}
	523 Multiply S0, S9, S12
	524 Multiply S2, S11, S13
	525 Add S1, S8, S0
	526 Subtract S0, S10, S2
	527 Move S2, W31
	528 Move X1, X31
	529 Call Transform.set_localEulerAngles, X0, X1
	530 Move X8, 0x22B6000
	531 Move X8, [X8+328]
	532 Move X1, X31
	533 Move X0, [X8]
	534 Call Input.GetAxis, X0
	535 NotImplemented "Instruction FCMP not yet implemented."
	536 NotImplemented "Instruction CMP not yet implemented."
	537 Move W8, 60
	538 Move W9, 56
	539 NotImplemented "Instruction CSEL not yet implemented."
	540 Move V12, [X19]
	541 Move X0, X19
	542 Move X1, X31
	543 Move V8, V0
	544 Call Component.get_transform, X0
	545 Move X20, X0
	546 Move X0, X19
	547 Move X1, X31
	548 Call Component.get_transform, X0
	549 Compare X0, 0
	550 JumpIfEqual {630}
	551 Move X1, X31
	552 Call Transform.get_position, X0
	553 Move X0, X19
	554 Move X1, X31
	555 Move V9, V0
	556 Move V10, V1
	557 Move V11, V2
	558 Call Component.get_transform, X0
	559 Compare X0, 0
	560 JumpIfEqual {630}
	561 Move X1, X31
	562 Call Transform.get_forward, X0
	563 Compare X20, 0
	564 JumpIfEqual {630}
	565 Multiply S2, S8, S2
	566 Multiply S1, S8, S1
	567 Multiply S0, S8, S0
	568 Multiply S2, S12, S2
	569 Multiply S1, S12, S1
	570 Multiply S0, S12, S0
	571 Add S2, S11, S2
	572 Add S1, S10, S1
	573 Add S0, S9, S0
	574 Move X0, X20
	575 Move X1, X31
	576 Call Transform.set_position, X0, X1
	577 Move W0, 324
	578 Move X1, X31
	579 Call Input.GetKeyDown, X0
	580 Move W20, W0
	581 Move TEMP, X0
	582 And TEMP, TEMP, 1
	583 Compare TEMP, 1
	584 JumpIfNotEqual {586}
	585 Move W21, 1
	586 Move W0, 324
	587 Move X1, X31
	588 Call Input.GetKeyUp, X0
	589 Move TEMP, X0
	590 And TEMP, TEMP, 1
	591 Compare TEMP, 1
	592 JumpIfNotEqual {616}
	593 Move W21, W31
	594 NotImplemented "Instruction ORN not yet implemented."
	595 And W0, W8, 1
	596 Move X1, X31
	597 Move [X19+64], W21
	598 Call Cursor.set_visible, X0
	599 Move W0, W21
	600 Move X20, [X31+128]
	601 Move X19, [X31+136]
	602 Move X22, [X31+112]
	603 Move X21, [X31+120]
	604 Move X30, [X31+96]
	605 Move X23, [X31+104]
	606 Move D9, [X31+80]
	607 Move D8, [X31+88]
	608 Move D11, [X31+64]
	609 Move D10, [X31+72]
	610 Move D13, [X31+48]
	611 Move D12, [X31+56]
	612 Move X1, X31
	613 Add X31, X31, 144
	614 Call Cursor.set_lockState, X0
	615 Return 
	616 Move X20, [X31+128]
	617 Move X19, [X31+136]
	618 Move X22, [X31+112]
	619 Move X21, [X31+120]
	620 Move X30, [X31+96]
	621 Move X23, [X31+104]
	622 Move D9, [X31+80]
	623 Move D8, [X31+88]
	624 Move D11, [X31+64]
	625 Move D10, [X31+72]
	626 Move D13, [X31+48]
	627 Move D12, [X31+56]
	628 Add X31, X31, 144
	629 Return 
	630 Call 0x1B6FA1C

Method: System.Void OnDisable()

Disassembly:
	0x01C99CD4 LDP D15, D14, [X31 + 0x10]
	0x01C99CD8 ADD X31, X31, 0x80
	0x01C99CDC B 0x1C99ED0
	0x01C99CE0 STP S3, S2, [X31 + 0x4]
	0x01C99CE4 STR S1, [X31 + 0xC]
	0x01C99CE8 STP S0, S6, [X31 + 0x58]
	0x01C99CEC ADRP X22, 0x22B5000
	0x01C99CF0 LDR X22, [X22 + 0x1C0]
	0x01C99CF4 LDR X0, [X22]

ISIL:
	001 Move [X31-16], X30
	002 Move [X0+64], W31
	003 Move W0, 1
	004 Move X1, X31
	005 Call Cursor.set_visible, X0
	006 Move W0, W31
	007 Move X1, X31
	008 Move X30, [X31+16]
	009 Call Cursor.set_lockState, X0
	010 Return 

Method: System.Void StartLooking()

Disassembly:
	0x01C99C88 STP S1, S0, [X31 + 0x90]
	0x01C99C8C STP S3, S2, [X31 + 0x80]
	0x01C99C90 STR S14, [X31 + 0x98]
	0x01C99C94 AND W2, W19, 0x1
	0x01C99C98 STR S11, [X31 + 0x88]
	0x01C99C9C MOV X0, X20
	0x01C99CA0 MOV X1, X21
	0x01C99CA4 MOV V0.16B, V15.16B
	0x01C99CA8 MOV V1.16B, V10.16B
	0x01C99CAC MOV V2.16B, V9.16B

ISIL:
	001 Move [X31-16], X30
	002 Move W8, 1
	003 Move [X0+64], W8
	004 Move W0, W31
	005 Move X1, X31
	006 Call Cursor.set_visible, X0
	007 Move W0, 1
	008 Move X1, X31
	009 Move X30, [X31+16]
	010 Call Cursor.set_lockState, X0
	011 Return 

Method: System.Void StopLooking()

Disassembly:
	0x01C99CB0 MOV V3.16B, V8.16B
	0x01C99CB4 MOV V4.16B, V13.16B
	0x01C99CB8 MOV V5.16B, V12.16B
	0x01C99CBC LDP X20, X19, [X31 + 0x70]
	0x01C99CC0 LDP X22, X21, [X31 + 0x60]
	0x01C99CC4 LDR X30, [X31 + 0x50]
	0x01C99CC8 LDP D9, D8, [X31 + 0x40]
	0x01C99CCC LDP D11, D10, [X31 + 0x30]
	0x01C99CD0 LDP D13, D12, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X0+64], W31
	003 Move W0, 1
	004 Move X1, X31
	005 Call Cursor.set_visible, X0
	006 Move W0, W31
	007 Move X1, X31
	008 Move X30, [X31+16]
	009 Call Cursor.set_lockState, X0
	010 Return 

Method: System.Void .ctor()

Disassembly:
	0x01C99CF8 LDR W8, [X0 + 0xE0]
	0x01C99CFC CBNZ W8, 0x1C99D04
	0x01C99D00 BL 0x1B6E8F8
	0x01C99D04 MOV X0, X20
	0x01C99D08 MOV X1, X31
	0x01C99D0C BL 0x1D697C8
	0x01C99D10 LDR X0, [X20 + 0x38]
	0x01C99D14 CBZ X0, 0x1C99ECC
	0x01C99D18 MOV X1, X31

ISIL:
	001 Move X8, -18800640
	002 Move V0, [X8+41]
	003 Move W8, 1
	004 Move W9, 0x42480000
	005 Move X1, X31
	006 Move [X0+40], W8
	007 Move [X0+44], V0
	008 Move [X0+60], W9
	009 Call MonoBehaviour..ctor, X0
	010 Return 

