Type: AnimalCompany.AnglerController

Method: AnimalCompany.AnglerController/Phase get_phase()

Disassembly:
	0x01DDF3F0 FMOV S2, -1
	0x01DDF3F4 FMIN S1, S0, S1
	0x01DDF3F8 FCMP S0, S2
	0x01DDF3FC FCSEL S8, S1, S2, PL
	0x01DDF400 CBNZ W8, 0x1DDF408
	0x01DDF404 BL 0x1C16DFC
	0x01DDF408 FCVT S0, S8
	0x01DDF40C BL 0x3EB1B80
	0x01DDF410 ADRP X8, 0xFFFFFFFFFED0B000
	0x01DDF414 LDR V1, [X8 + 0x448]
	0x00000000 INVALID
	0x01DDF41C FMUL S10, S0, S1
	0x01DDF420 MOV X0, X19
	0x01DDF424 MOV X1, X31
	0x01DDF428 BL 0x3C32E90
	0x01DDF42C MOV X20, X0
	0x01DDF430 MOV X0, X19
	0x01DDF434 MOV X1, X31
	0x01DDF438 BL 0x3C32E90
	0x01DDF43C CBZ X0, 0x1DDF5E4
	0x01DDF440 FDIV S0, S11, S10
	0x01DDF444 MOV X1, X31
	0x01DDF448 STR S0, [X31 + 0xC]
	0x01DDF44C BL 0x3C3DEB4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+60]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2315000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x231A000
	016 Move X0, [X0+3016]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x231A000
	023 Move X0, [X0+3024]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_phase(AnimalCompany.AnglerController/Phase value)

Disassembly:
	0x01DDF450 MOV V14.16B, V1.16B
	0x01DDF454 LDR V1, [X31 + 0x1C]
	0x01DDF458 MOV V8.16B, V0.16B
	0x01DDF45C MOV V15.16B, V2.16B
	0x01DDF460 MOV V0.16B, V12.16B
	0x01DDF464 MOV V2.16B, V13.16B
	0x01DDF468 MOV X0, X31
	0x01DDF46C MOV V9.16B, V3.16B
	0x01DDF470 BL 0x3C2A8C4
	0x01DDF474 MOV X0, X19
	0x01DDF478 MOV X1, X31
	0x01DDF47C MOV V11.16B, V0.16B
	0x01DDF480 MOV V12.16B, V1.16B
	0x01DDF484 MOV V13.16B, V2.16B
	0x01DDF488 MOV V10.16B, V3.16B
	0x01DDF48C BL 0x1DEA4B8
	0x01DDF490 LDR V1, [X31 + 0xC]
	0x01DDF494 MOV V2.16B, V15.16B
	0x01DDF498 MOV V3.16B, V9.16B
	0x01DDF49C MOV V4.16B, V11.16B
	0x01DDF4A0 FMUL S0, S1, S0
	0x01DDF4A4 STR S0, [X31]
	0x01DDF4A8 MOV V0.16B, V8.16B
	0x01DDF4AC MOV V1.16B, V14.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+60], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2315000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x231A000
	016 Move X0, [X0+3016]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x231A000
	023 Move X0, [X0+3032]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get_timerAroundLight()

Disassembly:
	0x01DDF4B0 MOV V5.16B, V12.16B
	0x01DDF4B4 MOV V6.16B, V13.16B
	0x01DDF4B8 MOV V7.16B, V10.16B
	0x01DDF4BC MOV X0, X31
	0x01DDF4C0 BL 0x3C2A2F8
	0x01DDF4C4 CBZ X20, 0x1DDF5E4
	0x01DDF4C8 MOV X0, X20
	0x01DDF4CC MOV X1, X31
	0x01DDF4D0 BL 0x3C3F7AC
	0x01DDF4D4 LDR X20, [X19 + 0xE8]
	0x01DDF4D8 LDP S8, S10, [X31 + 0x10]
	0x01DDF4DC LDR V9, [X31 + 0x18]
	0x01DDF4E0 CBZ X20, 0x1DDF5E4
	0x01DDF4E4 MOV X0, X20
	0x01DDF4E8 MOV X1, X31
	0x01DDF4EC BL 0x3BE19AC
	0x01DDF4F0 MOV X0, X19
	0x01DDF4F4 MOV X1, X31
	0x01DDF4F8 FMUL S8, S8, S0
	0x01DDF4FC FMUL S9, S9, S0
	0x01DDF500 FMUL S10, S10, S0
	0x01DDF504 BL 0x1DEA4B8
	0x01DDF508 FMUL S3, S8, S0
	0x01DDF50C FMUL S1, S9, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+64]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2315000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x231A000
	016 Move X0, [X0+3040]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x231A000
	023 Move X0, [X0+3048]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_timerAroundLight(System.Single value)

Disassembly:
	0x01DDF510 FMUL S2, S10, S0
	0x01DDF514 MOV X0, X20
	0x01DDF518 MOV V0.16B, V3.16B
	0x01DDF51C MOV X1, X31
	0x01DDF520 BL 0x3BE16E0
	0x01DDF524 MOV X0, X19
	0x01DDF528 MOV X1, X31
	0x01DDF52C BL 0x1DEA5A0
	0x01DDF530 MOV X0, X19
	0x01DDF534 MOV X1, X31
	0x01DDF538 MOV V8.16B, V0.16B
	0x01DDF53C MOV V9.16B, V1.16B
	0x01DDF540 MOV V10.16B, V2.16B
	0x01DDF544 BL 0x3C32E90
	0x01DDF548 CBZ X0, 0x1DDF5E4
	0x01DDF54C MOV X1, X31
	0x01DDF550 BL 0x3C3F58C
	0x01DDF554 FSUB S0, S8, S0
	0x01DDF558 FSUB S1, S9, S1
	0x01DDF55C FSUB S2, S10, S2
	0x01DDF560 FMUL S0, S0, S0
	0x01DDF564 FMUL S1, S1, S1
	0x01DDF568 FMUL S2, S2, S2
	0x01DDF56C FADD S0, S0, S1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+64], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2315000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x231A000
	016 Move X0, [X0+3040]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x231A000
	023 Move X0, [X0+3056]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get_timerAnticipation()

Disassembly:
	0x01DDF570 FADD S0, S2, S0
	0x01DDF574 FMOV S1, 2
	0x01DDF578 FCMP S0, S1
	0x01DDF57C B.PL 0x1DDF5BC
	0x01DDF580 LDR X0, [X21]
	0x01DDF584 LDR X20, [X19 + 0x1A8]
	0x01DDF588 LDR W8, [X0 + 0xE0]
	0x01DDF58C CBNZ W8, 0x1DDF594
	0x01DDF590 BL 0x1C16DFC
	0x01DDF594 MOV X0, X20
	0x01DDF598 MOV X1, X31
	0x01DDF59C MOV X2, X31
	0x01DDF5A0 BL 0x3C354F8
	0x01DDF5A4 TBZ X0, 0x0, 0x1DDF5B4
	0x01DDF5A8 MOV X0, X19
	0x01DDF5AC BL 0x1DE0438
	0x01DDF5B0 B 0x1DDF5BC
	0x01DDF5B4 MOV X0, X19
	0x01DDF5B8 BL 0x1DDE6B0
	0x01DDF5BC LDP X20, X19, [X31 + 0xD0]
	0x01DDF5C0 LDP X22, X21, [X31 + 0xC0]
	0x01DDF5C4 LDP X24, X23, [X31 + 0xB0]
	0x01DDF5C8 LDR X30, [X31 + 0xA0]
	0x01DDF5CC LDP D9, D8, [X31 + 0x90]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+68]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2315000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x231A000
	016 Move X0, [X0+3064]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x231A000
	023 Move X0, [X0+3072]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_timerAnticipation(System.Single value)

Disassembly:
	0x01DDF5D0 LDP D11, D10, [X31 + 0x80]
	0x01DDF5D4 LDP D13, D12, [X31 + 0x70]
	0x01DDF5D8 LDP D15, D14, [X31 + 0x60]
	0x01DDF5DC ADD X31, X31, 0xE0
	0x01DDF5E0 RET
	0x01DDF5E4 BL 0x1C16F20
	0x01DDF5E8 BL 0x1C16F28
	0x01DDF5EC B 0x1DDF5F0
	0x01DDF5F0 MOV X21, X0
	0x01DDF5F4 CMP W1, 0x1
	0x01DDF5F8 B.NE 0x1DDF62C
	0x01DDF5FC MOV X0, X21
	0x01DDF600 BL 0x3EB1AD0
	0x01DDF604 LDR X20, [X0]
	0x01DDF608 BL 0x3EB1AE0
	0x01DDF60C ADRP X8, 0x2319000
	0x01DDF610 LDR X8, [X8 + 0xC20]
	0x01DDF614 ADD X0, X31, 0x40
	0x01DDF618 LDR X1, [X8]
	0x01DDF61C BL 0x2BC434C
	0x01DDF620 CBZ X20, 0x1DDED9C
	0x01DDF624 MOV X0, X20
	0x01DDF628 BL 0x1C16F18
	0x01DDF62C MOV X20, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+68], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2315000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x231A000
	016 Move X0, [X0+3064]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x231A000
	023 Move X0, [X0+3080]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: UnityEngine.Vector3 get__attackPosition()

Disassembly:
	0x01DDF630 B 0x1DDF638
	0x01DDF634 MOV X21, X0
	0x01DDF638 ADRP X8, 0x2319000
	0x01DDF63C LDR X8, [X8 + 0xC20]
	0x01DDF640 LDR X1, [X8]
	0x01DDF644 ADD X0, X31, 0x40
	0x01DDF648 BL 0x2BC434C

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+208]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Transform.get_position, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Void Setup()

Disassembly:
	0x01DDF64C CBNZ X20, 0x1DDF658
	0x01DDF650 MOV X0, X21
	0x01DDF654 BL 0x1D2C690
	0x01DDF658 MOV X0, X20
	0x01DDF65C BL 0x1C16F18
	0x01DDF660 BL 0x1990590
	0x01DDF664 SUB X31, X31, 0xC0
	0x01DDF668 STR D14, [X31 + 0x50]
	0x01DDF66C STP D13, D12, [X31 + 0x60]
	0x01DDF670 STP D11, D10, [X31 + 0x70]
	0x01DDF674 STP D9, D8, [X31 + 0x80]
	0x01DDF678 STP X30, X23, [X31 + 0x90]
	0x01DDF67C STP X22, X21, [X31 + 0xA0]
	0x01DDF680 STP X20, X19, [X31 + 0xB0]
	0x01DDF684 ADRP X20, 0x25F9000
	0x01DDF688 LDRB W8, [X20 + 0xC7E]
	0x01DDF68C MOV X19, X0
	0x01DDF690 TBNZ X8, 0x0, 0x1DDF6E4
	0x01DDF694 ADRP X0, 0x2319000
	0x01DDF698 LDR X0, [X0 + 0xC20]
	0x01DDF69C BL 0x1C16CF4
	0x01DDF6A0 ADRP X0, 0x2319000
	0x01DDF6A4 LDR X0, [X0 + 0xC28]
	0x01DDF6A8 BL 0x1C16CF4
	0x01DDF6AC ADRP X0, 0x2319000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.Setup, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {34}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {17}
	015 Move X0, X19
	016 Call AnglerController.SetRoaming, X0
	017 Move X0, [X19+232]
	018 Compare X0, 0
	019 JumpIfEqual {34}
	020 Move W1, 1
	021 Move X2, X31
	022 Call NavMeshAgent.set_updatePosition, X0, X1
	023 Move X0, [X19+232]
	024 Compare X0, 0
	025 JumpIfEqual {34}
	026 Move W1, 1
	027 Move X2, X31
	028 Call NavMeshAgent.set_updateRotation, X0, X1
	029 Move X0, X19
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Call AnglerController.HandlePhaseChanged, X0
	033 Return 
	034 Call 0x1C17F20

Method: System.Void HandleRevive()

Disassembly:
	0x01DDF8B0 FSUB S2, S10, S13
	0x01DDF8B4 LDR V3, [X8 + 0x20]
	0x01DDF8B8 FMUL S0, S0, S0
	0x01DDF8BC FMUL S1, S1, S1
	0x01DDF8C0 FADD S0, S0, S1
	0x01DDF8C4 FMUL S1, S2, S2
	0x01DDF8C8 FADD S0, S1, S0
	0x01DDF8CC FSQRT S0, S0
	0x01DDF8D0 FCMP S0, S3
	0x01DDF8D4 B.MI 0x1DDF9C4
	0x01DDF8D8 LDR X0, [X19 + 0xD0]
	0x01DDF8DC CBZ X0, 0x1DDFB08
	0x01DDF8E0 MOV X1, X31
	0x01DDF8E4 BL 0x3C3F58C
	0x01DDF8E8 LDR X0, [X19 + 0xD0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleRevive, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {23}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {20}
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call AnglerController.SetRoaming, X0
	019 Return 
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return 
	023 Call 0x1C17F20

Method: System.Void HandleDie()

Disassembly:
	0x01DDF8EC CBZ X0, 0x1DDFB08
	0x01DDF8F0 MOV X1, X31
	0x01DDF8F4 MOV V8.16B, V0.16B
	0x01DDF8F8 MOV V9.16B, V1.16B
	0x01DDF8FC MOV V10.16B, V2.16B
	0x01DDF900 BL 0x3C3FA04
	0x01DDF904 LDR X8, [X19 + 0xC0]
	0x01DDF908 CBZ X8, 0x1DDFB08
	0x01DDF90C LDR X0, [X22]
	0x01DDF910 LDR V14, [X8 + 0x80]
	0x01DDF914 MOV V11.16B, V0.16B
	0x01DDF918 MOV V12.16B, V1.16B
	0x01DDF91C LDR W9, [X0 + 0xE0]
	0x01DDF920 MOV V13.16B, V2.16B
	0x01DDF924 CBNZ W9, 0x1DDF92C
	0x01DDF928 BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleDie, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {24}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {21}
	015 Move W1, 6
	016 Move X0, X19
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Call AnglerController.set_phase, X0, X1
	020 Return 
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return 
	024 Call 0x1C17F20

Method: System.Void SetTargetFlashlight(AnimalCompany.Flashlight flashlight)

Disassembly:
	0x01DDF92C ADD X0, X31, 0x28
	0x01DDF930 MOV V0.16B, V8.16B

ISIL:
	001 Move [X0+424], X1
	002 Return 

Method: System.Void HandlePhaseChanged()

Disassembly:
	0x01DDF760 BL 0x1DE9804
	0x01DDF764 TBZ X0, 0x0, 0x1DDF7E4
	0x01DDF768 LDR X0, [X31 + 0x58]
	0x01DDF76C CBZ X0, 0x1DDFB08
	0x01DDF770 ADRP X8, 0x2319000
	0x01DDF774 LDR X8, [X8 + 0xC38]
	0x01DDF778 LDR X1, [X8]
	0x01DDF77C ADD X8, X31, 0x10
	0x01DDF780 BL 0x301CB58
	0x01DDF784 ADRP X9, 0x2319000
	0x01DDF788 LDR V0, [X31 + 0x1]
	0x01DDF78C LDR X8, [X31 + 0x20]
	0x01DDF790 LDR X9, [X9 + 0xC28]
	0x01DDF794 STR V0, [X31 + 0x3]
	0x01DDF798 STR X8, [X31 + 0x40]
	0x01DDF79C LDR X1, [X9]
	0x01DDF7A0 ADD X0, X31, 0x30
	0x01DDF7A4 BL 0x2BC4350
	0x01DDF7A8 TBZ X0, 0x0, 0x1DDF7D0
	0x01DDF7AC LDR X1, [X31 + 0x40]
	0x01DDF7B0 MOV X0, X19
	0x01DDF7B4 BL 0x1DE0324
	0x01DDF7B8 ADRP X8, 0x2319000
	0x01DDF7BC LDR X8, [X8 + 0xC20]
	0x01DDF7C0 ADD X0, X31, 0x30
	0x01DDF7C4 LDR X1, [X8]
	0x01DDF7C8 BL 0x2BC434C
	0x01DDF7CC B 0x1DDFAE4
	0x01DDF7D0 ADRP X8, 0x2319000
	0x01DDF7D4 LDR X8, [X8 + 0xC20]
	0x01DDF7D8 ADD X0, X31, 0x30
	0x01DDF7DC LDR X1, [X8]
	0x01DDF7E0 BL 0x2BC434C
	0x01DDF7E4 ADRP X23, 0x2314000
	0x01DDF7E8 LDR X23, [X23 + 0x598]
	0x01DDF7EC LDR X20, [X19 + 0x1A8]
	0x01DDF7F0 LDR X0, [X23]
	0x01DDF7F4 LDR W8, [X0 + 0xE0]
	0x01DDF7F8 CBNZ W8, 0x1DDF800
	0x01DDF7FC BL 0x1C16DFC
	0x01DDF800 MOV X0, X20
	0x01DDF804 MOV X1, X31
	0x01DDF808 MOV X2, X31
	0x01DDF80C BL 0x3C354F8
	0x01DDF810 TBZ X0, 0x0, 0x1DDF8D8
	0x01DDF814 LDR X0, [X19 + 0x1A8]
	0x01DDF818 CBZ X0, 0x1DDFB08
	0x01DDF81C MOV X1, X31
	0x01DDF820 BL 0x3C32E90
	0x01DDF824 CBZ X0, 0x1DDFB08
	0x01DDF828 MOV X1, X31
	0x01DDF82C BL 0x3C3F58C
	0x01DDF830 LDR X0, [X19 + 0xD0]
	0x01DDF834 CBZ X0, 0x1DDFB08
	0x01DDF838 MOV X1, X31
	0x01DDF83C MOV V8.16B, V0.16B
	0x01DDF840 MOV V9.16B, V1.16B
	0x01DDF844 MOV V10.16B, V2.16B
	0x01DDF848 BL 0x3C3F58C
	0x01DDF84C ADRP X20, 0x25F9000
	0x01DDF850 LDRB W8, [X20 + 0x85C]
	0x01DDF854 MOV V11.16B, V0.16B
	0x01DDF858 MOV V12.16B, V1.16B
	0x01DDF85C MOV V13.16B, V2.16B
	0x01DDF860 CBNZ W8, 0x1DDF878
	0x01DDF864 ADRP X0, 0x2314000
	0x01DDF868 LDR X0, [X0 + 0x5A8]
	0x01DDF86C BL 0x1C16CF4
	0x01DDF870 MOVZ W8, 0x1
	0x01DDF874 STRB W8, [X20 + 0x85C]
	0x01DDF878 ADRP X8, 0x2314000
	0x01DDF87C LDR X8, [X8 + 0x5A8]
	0x01DDF880 LDR X0, [X8]
	0x01DDF884 LDR W8, [X0 + 0xE0]
	0x01DDF888 CBNZ W8, 0x1DDF890
	0x01DDF88C BL 0x1C16DFC
	0x01DDF890 LDR X8, [X19 + 0xC0]
	0x01DDF894 CBZ X8, 0x1DDFB08
	0x01DDF898 LDR X8, [X8 + 0x78]
	0x01DDF89C CBZ X8, 0x1DDFB08
	0x01DDF8A0 LDR W9, [X8 + 0x18]
	0x01DDF8A4 CBZ W9, 0x1DDFB0C
	0x01DDF8A8 FSUB S0, S8, S11
	0x01DDF8AC FSUB S1, S9, S12

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Call AnglerController.get_phase, X0
	007 Subtract W8, W0, 1
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X9, -19599360
	010 Add X9, X9, 2373
	011 NotImplemented "Instruction ADR not yet implemented."
	012 Move W11, [X9]
	013 Add X10, X10, X11
	014 CallNoReturn X10
	015 Move X0, [X19+200]
	016 Compare X0, 0
	017 JumpIfEqual {95}
	018 Move X8, [X0]
	019 Move X9, [X8+488]
	020 Move X1, [X8+496]
	021 Move X0, [X19+200]
	022 Compare X0, 0
	023 JumpIfEqual {95}
	024 Move X8, [X0]
	025 Move S0, 1
	026 Move X9, [X8+488]
	027 Move X1, [X8+496]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move X8, [X19+440]
	030 Compare X8, 0
	031 JumpIfEqual {95}
	032 Move X0, [X8+232]
	033 Compare X0, 0
	034 JumpIfEqual {95}
	035 Move X1, X31
	036 Call AudioSource.Play, X0
	037 Move X0, [X19+200]
	038 Compare X0, 0
	039 JumpIfEqual {95}
	040 Move X8, [X0]
	041 Move X9, [X8+520]
	042 Move X1, [X8+528]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move X0, [X19+200]
	045 Compare X0, 0
	046 JumpIfEqual {95}
	047 Move X8, [X0]
	048 Move X9, [X8+504]
	049 Move X1, [X8+512]
	050 Move S0, 1
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Move X20, [X19+440]
	053 Move X0, X19
	054 Call AnglerController.get_phase, X0
	055 Compare X20, 0
	056 JumpIfEqual {95}
	057 NotImplemented "Instruction CMP not yet implemented."
	058 NotImplemented "Instruction CSET not yet implemented."
	059 Move S0, 1
	060 Move X0, X20
	061 Call AnglerView.PlayRunningSound, X0, X1, V0
	062 Move X20, [X19+440]
	063 Move X0, X19
	064 Call AnglerController.get_phase, X0
	065 Compare X20, 0
	066 JumpIfEqual {95}
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move S0, 1.5
	069 Move S1, 3.5
	070 NotImplemented "Instruction FCSEL not yet implemented."
	071 Move [X20+264], S0
	072 Move X20, [X19+440]
	073 Move X0, X19
	074 Call AnglerController.get_phase, X0
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move W21, 1
	077 Move X0, X19
	078 Call AnglerController.get_phase, X0
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction CSET not yet implemented."
	081 Move X0, X19
	082 Call AnglerController.get_phase, X0
	083 Compare X20, 0
	084 JumpIfEqual {95}
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X0, X20
	087 Move X20, [X31+16]
	088 Move X19, [X31+24]
	089 NotImplemented "Instruction CSET not yet implemented."
	090 Move W1, W21
	091 Move X30, [X31+32]
	092 Move X21, [X31+40]
	093 Call AnglerView.SetGlow, X0, X1, X2
	094 Return 
	095 Call 0x1C17F20

Method: System.Void UpdateMonsterBehaviour()

Disassembly:
	0x01DDFB04 RET
	0x01DDFB08 BL 0x1C16F20
	0x01DDFB0C BL 0x1C16F28
	0x01DDFB10 B 0x1DDFB14
	0x01DDFB14 MOV X21, X0
	0x01DDFB18 CMP W1, 0x1
	0x01DDFB1C B.NE 0x1DDFB50
	0x01DDFB20 MOV X0, X21
	0x01DDFB24 BL 0x3EB1AD0
	0x01DDFB28 LDR X20, [X0]
	0x01DDFB2C BL 0x3EB1AE0
	0x01DDFB30 ADRP X8, 0x2319000
	0x01DDFB34 LDR X8, [X8 + 0xC20]
	0x01DDFB38 ADD X0, X31, 0x30
	0x01DDFB3C LDR X1, [X8]
	0x01DDFB40 BL 0x2BC434C
	0x01DDFB44 CBZ X20, 0x1DDF7E4
	0x01DDFB48 MOV X0, X20
	0x01DDFB4C BL 0x1C16F18
	0x01DDFB50 MOV X20, X31
	0x01DDFB54 B 0x1DDFB5C
	0x01DDFB58 MOV X21, X0
	0x01DDFB5C ADRP X8, 0x2319000
	0x01DDFB60 LDR X8, [X8 + 0xC20]
	0x01DDFB64 LDR X1, [X8]
	0x01DDFB68 ADD X0, X31, 0x30
	0x01DDFB6C BL 0x2BC434C
	0x01DDFB70 CBNZ X20, 0x1DDFB7C
	0x01DDFB74 MOV X0, X21
	0x01DDFB78 BL 0x1D2C690
	0x01DDFB7C MOV X0, X20
	0x01DDFB80 BL 0x1C16F18
	0x01DDFB84 BL 0x1990590
	0x01DDFB88 SUB X31, X31, 0x80
	0x01DDFB8C STP D15, D14, [X31 + 0x10]
	0x01DDFB90 STP D13, D12, [X31 + 0x20]
	0x01DDFB94 STP D11, D10, [X31 + 0x30]
	0x01DDFB98 STP D9, D8, [X31 + 0x40]
	0x01DDFB9C STP X30, X23, [X31 + 0x50]
	0x01DDFBA0 STP X22, X21, [X31 + 0x60]
	0x01DDFBA4 STP X20, X19, [X31 + 0x70]
	0x01DDFBA8 MOV X1, X31
	0x01DDFBAC MOV X19, X0
	0x01DDFBB0 BL 0x1DEA1C0
	0x01DDFBB4 MOV X0, X19
	0x01DDFBB8 MOV X1, X31
	0x01DDFBBC BL 0x1DEA5A0
	0x01DDFBC0 MOV X0, X19
	0x01DDFBC4 MOV X1, X31
	0x01DDFBC8 MOV V8.16B, V0.16B
	0x01DDFBCC MOV V9.16B, V1.16B
	0x01DDFBD0 MOV V10.16B, V2.16B
	0x01DDFBD4 BL 0x3C32E90
	0x01DDFBD8 CBZ X0, 0x1DDFF80
	0x01DDFBDC MOV X1, X31
	0x01DDFBE0 BL 0x3C3F58C
	0x01DDFBE4 ADRP X21, 0x25F9000
	0x01DDFBE8 LDRB W8, [X21 + 0x785]
	0x01DDFBEC MOV V11.16B, V0.16B
	0x01DDFBF0 MOV V12.16B, V1.16B
	0x01DDFBF4 MOV V13.16B, V2.16B
	0x01DDFBF8 CBNZ W8, 0x1DDFC10
	0x01DDFBFC ADRP X0, 0x2314000
	0x01DDFC00 LDR X0, [X0 + 0x5A8]
	0x01DDFC04 BL 0x1C16CF4
	0x01DDFC08 MOVZ W8, 0x1
	0x01DDFC0C STRB W8, [X21 + 0x785]
	0x01DDFC10 ADRP X20, 0x2314000
	0x01DDFC14 LDR X20, [X20 + 0x5A8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x25FA000
	006 Move W8, [X20+3195]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x231A000
	013 Move X0, [X0+3096]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3195], W8
	017 Move X0, X19
	018 Move X1, X31
	019 Call MobController.UpdateMonsterBehaviour, X0
	020 Move X0, X19
	021 Call AnglerController.get_phase, X0
	022 Subtract W8, W0, 1
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X9, -19599360
	025 Add X9, X9, 2378
	026 NotImplemented "Instruction ADR not yet implemented."
	027 Move W11, [X9]
	028 Add X10, X10, X11
	029 CallNoReturn X10
	030 Move X8, [X19]
	031 Move X9, [X8+904]
	032 Move X1, [X8+912]
	033 Move X0, X19
	034 Call AnglerController.UpdateLightDetected, X0
	035 Move X0, X19
	036 Call AnglerController.UpdateAroundLight, X0
	037 Move X0, X19
	038 Call AnglerController.UpdateAnticipation, X0
	039 Move X8, [X19]
	040 Move X9, [X8+968]
	041 Move X1, [X8+976]
	042 Move X0, X19
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Call GameManager.get_isDebug
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {72}
	049 Move X20, [X19+408]
	050 Compare X20, 0
	051 JumpIfEqual {72}
	052 Move X0, X19
	053 Call AnglerController.get_phase, X0
	054 Move X8, 0x231A000
	055 Move X8, [X8+3096]
	056 Move TEMP, 0
	057 Not TEMP
	058 Move X9, TEMP
	059 Move [X31+24], W0
	060 Add X0, X31, 8
	061 Move X8, [X8]
	062 Move X1, X31
	063 Move [X31+8], X8
	064 Move [X31+16], X9
	065 Call Enum.ToString, X0
	066 Move X8, [X20+64]
	067 Move X9, [X20+24]
	068 Move X2, [X20+40]
	069 Move X1, X0
	070 Move X0, X8
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Move X20, [X31+48]
	073 Move X19, [X31+56]
	074 Move X30, [X31+32]
	075 Add X31, X31, 64
	076 Return 

Method: System.Void SetRoaming()

Disassembly:
	0x01DDF6B0 LDR X0, [X0 + 0xC30]
	0x01DDF6B4 BL 0x1C16CF4
	0x01DDF6B8 ADRP X0, 0x2319000
	0x01DDF6BC LDR X0, [X0 + 0xC38]
	0x01DDF6C0 BL 0x1C16CF4
	0x01DDF6C4 ADRP X0, 0x2319000
	0x01DDF6C8 LDR X0, [X0 + 0xC40]
	0x01DDF6CC BL 0x1C16CF4
	0x01DDF6D0 ADRP X0, 0x2314000
	0x01DDF6D4 LDR X0, [X0 + 0x598]
	0x01DDF6D8 BL 0x1C16CF4
	0x01DDF6DC MOVZ W8, 0x1
	0x01DDF6E0 STRB W8, [X20 + 0xC7E]
	0x01DDF6E4 STR X31, [X31 + 0x58]
	0x01DDF6E8 STP X31, X31, [X31 + 0x30]
	0x01DDF6EC STR X31, [X31 + 0x40]
	0x01DDF6F0 STR X31, [X31 + 0x28]
	0x01DDF6F4 LDR X0, [X19 + 0xD0]
	0x01DDF6F8 CBZ X0, 0x1DDFB08
	0x01DDF6FC MOV X1, X31
	0x01DDF700 BL 0x3C3F58C
	0x01DDF704 LDR X8, [X19 + 0xC0]
	0x01DDF708 CBZ X8, 0x1DDFB08
	0x01DDF70C LDR X8, [X8 + 0x78]
	0x01DDF710 CBZ X8, 0x1DDFB08
	0x01DDF714 LDR W9, [X8 + 0x18]
	0x01DDF718 CBZ W9, 0x1DDFB0C
	0x01DDF71C ADRP X22, 0x2319000
	0x01DDF720 LDR X22, [X22 + 0xC40]
	0x01DDF724 LDR V11, [X8 + 0x20]
	0x01DDF728 MOV V8.16B, V0.16B
	0x01DDF72C MOV V9.16B, V1.16B
	0x01DDF730 LDR X0, [X22]
	0x01DDF734 MOV V10.16B, V2.16B
	0x01DDF738 LDR W9, [X0 + 0xE0]
	0x01DDF73C CBNZ W9, 0x1DDF744
	0x01DDF740 BL 0x1C16DFC
	0x01DDF744 ADD X1, X31, 0x58
	0x01DDF748 MOV X0, X19
	0x01DDF74C MOV V0.16B, V8.16B
	0x01DDF750 MOV V1.16B, V9.16B
	0x01DDF754 MOV V2.16B, V10.16B
	0x01DDF758 MOV V3.16B, V11.16B
	0x01DDF75C MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 1
	004 Move X19, X0
	005 Call AnglerController.set_phase, X0, X1
	006 Move X8, [X19]
	007 Move X0, X19
	008 Move X1, X31
	009 Move X9, [X8+952]
	010 Move X2, [X8+960]
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Move X9, [X19+192]
	013 Compare X9, 0
	014 JumpIfEqual {52}
	015 Move X8, [X9+48]
	016 Compare X8, 0
	017 JumpIfEqual {52}
	018 Move W10, [X8+24]
	019 Compare W10, 0
	020 JumpIfEqual {53}
	021 Move X10, [X9+88]
	022 Compare X10, 0
	023 JumpIfEqual {52}
	024 Move W11, [X10+24]
	025 Compare W11, 0
	026 JumpIfEqual {53}
	027 Move X9, [X9+96]
	028 Compare X9, 0
	029 JumpIfEqual {52}
	030 Move W11, [X9+24]
	031 Compare W11, 0
	032 JumpIfEqual {53}
	033 Move X11, [X19]
	034 Move V0, [X8+32]
	035 Move V1, [X10+32]
	036 Move V2, [X9+32]
	037 Move X8, [X11+712]
	038 Move X2, [X11+720]
	039 Move X0, X19
	040 Move W1, W31
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move X8, [X19]
	043 Move W1, 1
	044 Move X0, X19
	045 Move X9, [X8+872]
	046 Move X2, [X8+880]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move [X19+224], W31
	049 Move X30, [X31+16]
	050 Move X19, [X31+24]
	051 Return 
	052 Call 0x1C17F20
	053 Call 0x1C17F28

Method: System.Void UpdateRoaming()

Disassembly:
	0x01DE0F84 MOV X1, X31
	0x01DE0F88 BL 0x3BE13F8
	0x01DE0F8C B 0x1DE126C
	0x01DE0F90 LDRB W8, [X23 + 0x783]
	0x01DE0F94 CBNZ W8, 0x1DE0FAC
	0x01DE0F98 ADRP X0, 0x2313000
	0x01DE0F9C LDR X0, [X0 + 0x5A0]
	0x01DE0FA0 BL 0x1C16CF4
	0x01DE0FA4 MOVZ W8, 0x1
	0x01DE0FA8 STRB W8, [X23 + 0x783]
	0x01DE0FAC LDR X8, [X22]
	0x01DE0FB0 LDR X8, [X8 + 0xB8]
	0x01DE0FB4 LDP S10, S1, [X8]
	0x01DE0FB8 LDR V2, [X8 + 0x8]
	0x01DE0FBC MOV V0.16B, V10.16B
	0x01DE0FC0 MOV X0, X31
	0x01DE0FC4 STP S2, S1, [X31 + 0x14]
	0x01DE0FC8 BL 0x1DC0890
	0x01DE0FCC LDRB W8, [X21 + 0x785]
	0x01DE0FD0 MOV V8.16B, V0.16B
	0x01DE0FD4 MOV V12.16B, V1.16B
	0x01DE0FD8 MOV V13.16B, V2.16B
	0x01DE0FDC CBNZ W8, 0x1DE0FF4
	0x01DE0FE0 ADRP X0, 0x2313000
	0x01DE0FE4 LDR X0, [X0 + 0x5A8]
	0x01DE0FE8 BL 0x1C16CF4
	0x01DE0FEC MOVZ W8, 0x1
	0x01DE0FF0 STRB W8, [X21 + 0x785]
	0x01DE0FF4 LDR X0, [X20]
	0x01DE0FF8 LDR W8, [X0 + 0xE0]
	0x01DE0FFC CBNZ W8, 0x1DE1004
	0x01DE1000 BL 0x1C16DFC
	0x01DE1004 FMUL S0, S8, S8
	0x01DE1008 FMUL S1, S12, S12
	0x01DE100C FADD S0, S0, S1
	0x01DE1010 FMUL S1, S13, S13
	0x01DE1014 FADD S0, S1, S0
	0x01DE1018 FSQRT S0, S0
	0x01DE101C FCMP S0, S9
	0x01DE1020 B.LE 0x1DE1034
	0x01DE1024 FDIV S11, S8, S0
	0x01DE1028 FDIV S12, S12, S0
	0x01DE102C FDIV S13, S13, S0
	0x01DE1030 B 0x1DE1060
	0x01DE1034 LDRB W8, [X23 + 0x783]
	0x01DE1038 CBNZ W8, 0x1DE1050
	0x01DE103C ADRP X0, 0x2312000
	0x01DE1040 LDR X0, [X0 + 0x5A0]
	0x01DE1044 BL 0x1C16CF4
	0x01DE1048 MOVZ W8, 0x1
	0x01DE104C STRB W8, [X23 + 0x783]
	0x01DE1050 LDR X8, [X22]
	0x01DE1054 LDR X8, [X8 + 0xB8]
	0x01DE1058 LDP S11, S12, [X8]
	0x01DE105C LDR V13, [X8 + 0x8]
	0x01DE1060 LDR X8, [X19 + 0xC0]
	0x01DE1064 CBZ X8, 0x1DE1290
	0x01DE1068 LDR V0, [X8 + 0x40]
	0x01DE106C MOV X0, X19
	0x01DE1070 MOV X1, X31
	0x01DE1074 STR S0, [X31 + 0x1C]
	0x01DE1078 BL 0x3C32E90
	0x01DE107C CBZ X0, 0x1DE1290
	0x01DE1080 MOV X1, X31
	0x01DE1084 STR S10, [X31 + 0x10]
	0x01DE1088 BL 0x3C3FA04
	0x01DE108C ADRP X21, 0x25F7000
	0x01DE1090 LDRB W8, [X21 + 0xA24]
	0x01DE1094 MOV V14.16B, V0.16B
	0x01DE1098 MOV V15.16B, V1.16B
	0x01DE109C MOV V8.16B, V2.16B
	0x01DE10A0 CBNZ W8, 0x1DE10B8
	0x01DE10A4 ADRP X0, 0x2312000
	0x01DE10A8 LDR X0, [X0 + 0x5A8]
	0x01DE10AC BL 0x1C16CF4
	0x01DE10B0 MOVZ W8, 0x1
	0x01DE10B4 STRB W8, [X21 + 0xA24]
	0x01DE10B8 LDR X0, [X20]
	0x01DE10BC FMUL S0, S11, S11
	0x01DE10C0 FMUL S1, S12, S12
	0x01DE10C4 FADD S0, S0, S1
	0x01DE10C8 FMUL S1, S13, S13
	0x01DE10CC LDR W8, [X0 + 0xE0]
	0x01DE10D0 FADD S10, S1, S0
	0x01DE10D4 FMUL S0, S14, S14
	0x01DE10D8 FMUL S1, S15, S15
	0x01DE10DC FADD S0, S0, S1
	0x01DE10E0 FMUL S1, S8, S8
	0x01DE10E4 FADD S9, S1, S0
	0x01DE10E8 CBNZ W8, 0x1DE10F0
	0x01DE10EC BL 0x1C16DFC
	0x01DE10F0 ADRP X8, 0xFFFFFFFFFED08000
	0x01DE10F4 LDR V1, [X8 + 0xFE8]
	0x01DE10F8 FMUL S0, S10, S9
	0x01DE10FC FSQRT S0, S0
	0x01DE1100 FMOV S10, W31
	0x01DE1104 FCMP S0, S1
	0x01DE1108 B.MI 0x1DE1160
	0x01DE110C LDR X0, [X20]
	0x01DE1110 FMUL S1, S11, S14
	0x01DE1114 FMUL S2, S12, S15
	0x01DE1118 FMUL S3, S13, S8
	0x01DE111C FADD S1, S1, S2
	0x01DE1120 FADD S1, S3, S1
	0x01DE1124 LDR W8, [X0 + 0xE0]
	0x01DE1128 FDIV S0, S1, S0
	0x01DE112C FMOV S1, 1
	0x01DE1130 FMOV S2, -1
	0x01DE1134 FMIN S1, S0, S1
	0x01DE1138 FCMP S0, S2
	0x01DE113C FCSEL S8, S1, S2, PL
	0x01DE1140 CBNZ W8, 0x1DE1148
	0x01DE1144 BL 0x1C16DFC
	0x01DE1148 FCVT S0, S8
	0x01DE114C BL 0x3EB1B80
	0x01DE1150 ADRP X8, 0xFFFFFFFFFED09000
	0x01DE1154 LDR V1, [X8 + 0x448]
	0x00000000 INVALID
	0x01DE115C FMUL S10, S0, S1
	0x01DE1160 MOV X0, X19
	0x01DE1164 MOV X1, X31
	0x01DE1168 BL 0x3C32E90
	0x01DE116C MOV X20, X0
	0x01DE1170 MOV X0, X19
	0x01DE1174 MOV X1, X31
	0x01DE1178 BL 0x3C32E90
	0x01DE117C CBZ X0, 0x1DE1290
	0x01DE1180 LDR V0, [X31 + 0x1C]
	0x01DE1184 MOV X1, X31
	0x01DE1188 FDIV S0, S0, S10
	0x01DE118C STR S0, [X31 + 0x1C]
	0x01DE1190 BL 0x3C3DEB4
	0x01DE1194 MOV V8.16B, V0.16B
	0x01DE1198 MOV V14.16B, V1.16B
	0x01DE119C MOV V15.16B, V2.16B
	0x01DE11A0 MOV V0.16B, V11.16B
	0x01DE11A4 MOV V1.16B, V12.16B
	0x01DE11A8 MOV V2.16B, V13.16B
	0x01DE11AC MOV X0, X31
	0x01DE11B0 MOV V9.16B, V3.16B
	0x01DE11B4 BL 0x3C2A8C4
	0x01DE11B8 MOV X0, X19
	0x01DE11BC MOV X1, X31
	0x01DE11C0 MOV V11.16B, V0.16B
	0x01DE11C4 MOV V12.16B, V1.16B
	0x01DE11C8 MOV V13.16B, V2.16B
	0x01DE11CC MOV V10.16B, V3.16B
	0x01DE11D0 BL 0x1DEA4B8
	0x01DE11D4 LDR V1, [X31 + 0x1C]
	0x01DE11D8 MOV V2.16B, V15.16B
	0x01DE11DC MOV V3.16B, V9.16B
	0x01DE11E0 MOV V4.16B, V11.16B
	0x01DE11E4 FMUL S0, S1, S0
	0x01DE11E8 STR S0, [X31]
	0x01DE11EC MOV V0.16B, V8.16B
	0x01DE11F0 MOV V1.16B, V14.16B
	0x01DE11F4 MOV V5.16B, V12.16B
	0x01DE11F8 MOV V6.16B, V13.16B
	0x01DE11FC MOV V7.16B, V10.16B
	0x01DE1200 MOV X0, X31
	0x01DE1204 BL 0x3C2A2F8
	0x01DE1208 CBZ X20, 0x1DE1290
	0x01DE120C MOV X0, X20
	0x01DE1210 MOV X1, X31
	0x01DE1214 BL 0x3C3F7AC
	0x01DE1218 LDR X20, [X19 + 0xE8]
	0x01DE121C LDR V8, [X31 + 0x10]
	0x01DE1220 CBZ X20, 0x1DE1290
	0x01DE1224 MOV X0, X20
	0x01DE1228 MOV X1, X31
	0x01DE122C BL 0x3BE19AC
	0x01DE1230 LDR V1, [X31 + 0x18]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+48], D14
	003 Move [X31+56], D13
	004 Move [X31+64], D12
	005 Move [X31+72], D11
	006 Move [X31+80], D10
	007 Move [X31+88], D9
	008 Move [X31+96], D8
	009 Move [X31+104], X30
	010 Move [X31+112], X20
	011 Move [X31+120], X19
	012 Move X20, 0x25F9000
	013 Move W8, [X20+3196]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {36}
	019 Move X0, 0x2319000
	020 Move X0, [X0+3104]
	021 Call 0x1C17CF4
	022 Move X0, 0x2319000
	023 Move X0, [X0+3112]
	024 Call 0x1C17CF4
	025 Move X0, 0x2319000
	026 Move X0, [X0+3120]
	027 Call 0x1C17CF4
	028 Move X0, 0x2319000
	029 Move X0, [X0+3128]
	030 Call 0x1C17CF4
	031 Move X0, 0x2319000
	032 Move X0, [X0+3136]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+3196], W8
	036 Move X0, X19
	037 Move X1, X31
	038 Move [X31+32], X31
	039 Move [X31+40], X31
	040 Move [X31+8], X31
	041 Move [X31+16], X31
	042 Move [X31+24], X31
	043 Call MobController.UpdateRoaming, X0
	044 Move X0, [X19+208]
	045 Compare X0, 0
	046 JumpIfEqual {174}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X0, [X19+208]
	050 Compare X0, 0
	051 JumpIfEqual {174}
	052 Move X1, X31
	053 Move V8, V0
	054 Move V9, V1
	055 Move V10, V2
	056 Call Transform.get_forward, X0
	057 Move X8, [X19+192]
	058 Compare X8, 0
	059 JumpIfEqual {174}
	060 Move X20, 0x2318000
	061 Move X20, [X20+3136]
	062 Move V14, [X8+128]
	063 Move V11, V0
	064 Move V12, V1
	065 Move X0, [X20]
	066 Move V13, V2
	067 Move W9, [X0+224]
	068 Compare W9, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Add X0, X31, 40
	072 Move V0, V8
	073 Move V1, V9
	074 Move V2, V10
	075 Move V3, V11
	076 Move V4, V12
	077 Move V5, V13
	078 Move V6, V14
	079 Move X1, X31
	080 Call MobDetectionUtil.TryGetAnyLightBySight, X0, X1, V0, X2
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {102}
	085 Move X8, [X19]
	086 Move X1, [X31+40]
	087 Move X0, X19
	088 Move X9, [X8+1112]
	089 Move X2, [X8+1120]
	090 NotImplemented "Instruction BLR not yet implemented."
	091 Move X0, [X31+40]
	092 Compare X0, 0
	093 JumpIfEqual {174}
	094 Move X1, X31
	095 Call Component.get_transform, X0
	096 Compare X0, 0
	097 JumpIfEqual {174}
	098 Move X1, X31
	099 Call Transform.get_position, X0
	100 Move X0, X19
	101 Call AnglerController.SetLightDetected, X0, X1
	102 Move X0, [X19+208]
	103 Compare X0, 0
	104 JumpIfEqual {174}
	105 Move X1, X31
	106 Call Transform.get_position, X0
	107 Move X8, [X19+192]
	108 Compare X8, 0
	109 JumpIfEqual {174}
	110 Move X8, [X8+120]
	111 Compare X8, 0
	112 JumpIfEqual {174}
	113 Move W9, [X8+24]
	114 Compare W9, 0
	115 JumpIfEqual {175}
	116 Move X0, [X20]
	117 Move V11, [X8+32]
	118 Move V8, V0
	119 Move V9, V1
	120 Move W9, [X0+224]
	121 Move V10, V2
	122 Compare W9, 0
	123 JumpIfNotEqual {125}
	124 Call 0x1C17DFC
	125 Add X1, X31, 32
	126 Move X0, X19
	127 Move V0, V8
	128 Move V1, V9
	129 Move V2, V10
	130 Move V3, V11
	131 Move X2, X31
	132 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfNotEqual {162}
	137 Move X0, [X31+32]
	138 Compare X0, 0
	139 JumpIfEqual {174}
	140 Move X8, 0x2318000
	141 Move X8, [X8+3128]
	142 Move X1, [X8]
	143 Add X8, X31, 8
	144 Call List`1<Object>.GetEnumerator, X0
	145 Move X8, 0x2318000
	146 Move X8, [X8+3112]
	147 Move X1, [X8]
	148 Add X0, X31, 8
	149 Call Enumerator<Object>.MoveNext, X0
	150 Move TEMP, X0
	151 And TEMP, TEMP, 1
	152 Compare TEMP, 1
	153 JumpIfNotEqual {157}
	154 Move X1, [X31+24]
	155 Move X0, X19
	156 Call AnglerController.SetAnticipation, X0, X1
	157 Move X8, 0x2318000
	158 Move X8, [X8+3104]
	159 Add X0, X31, 8
	160 Move X1, [X8]
	161 Call Enumerator<Object>.Dispose, X0
	162 Move X20, [X31+112]
	163 Move X19, [X31+120]
	164 Move X30, [X31+104]
	165 Move D9, [X31+88]
	166 Move D8, [X31+96]
	167 Move D11, [X31+72]
	168 Move D10, [X31+80]
	169 Move D13, [X31+56]
	170 Move D12, [X31+64]
	171 Move V14, [X31+48]
	172 Add X31, X31, 128
	173 Return 
	174 Call 0x1C17F20
	175 Call 0x1C17F28
	176 Move X20, X0
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Move X0, X20
	179 Call 0x3EB2AD0
	180 Move X19, [X0]
	181 Call 0x3EB2AE0
	182 Move X8, 0x2318000
	183 Move X8, [X8+3104]
	184 Add X0, X31, 8
	185 Move X1, [X8]
	186 Call Enumerator<Object>.Dispose, X0
	187 Compare X19, 0
	188 JumpIfEqual {162}
	189 Move X0, X19
	190 Call 0x1C17F18
	191 Move X19, X31
	192 Move X20, X0
	193 Move X8, 0x2318000
	194 Move X8, [X8+3104]
	195 Move X1, [X8]
	196 Add X0, X31, 8
	197 Call Enumerator<Object>.Dispose, X0
	198 Compare X19, 0
	199 JumpIfNotEqual {202}
	200 Move X0, X20
	201 Call 0x1D2D690
	202 Move X0, X19
	203 Call 0x1C17F18
	204 Call 0x1991590

Method: System.Void SetLightDetected(UnityEngine.Vector3 lightPosition)

Disassembly:
	0x01DE1234 MOV X0, X19
	0x01DE1238 MOV X1, X31
	0x01DE123C FMUL S8, S8, S0
	0x01DE1240 FMUL S9, S1, S0
	0x01DE1244 LDR V1, [X31 + 0x14]
	0x01DE1248 FMUL S10, S1, S0
	0x01DE124C BL 0x1DEA4B8
	0x01DE1250 FMUL S3, S8, S0
	0x01DE1254 FMUL S1, S9, S0
	0x01DE1258 FMUL S2, S10, S0
	0x01DE125C MOV X0, X20
	0x01DE1260 MOV V0.16B, V3.16B
	0x01DE1264 MOV X1, X31
	0x01DE1268 BL 0x3BE16E0
	0x01DE126C LDP X20, X19, [X31 + 0x90]
	0x01DE1270 LDP X22, X21, [X31 + 0x80]
	0x01DE1274 LDP X30, X23, [X31 + 0x70]
	0x01DE1278 LDP D9, D8, [X31 + 0x60]
	0x01DE127C LDP D11, D10, [X31 + 0x50]
	0x01DE1280 LDP D13, D12, [X31 + 0x40]
	0x01DE1284 LDP D15, D14, [X31 + 0x30]
	0x01DE1288 ADD X31, X31, 0xA0
	0x01DE128C RET
	0x01DE1290 BL 0x1C16F20
	0x01DE1294 BL 0x1C16F28
	0x01DE1298 STP X30, X21, [X31 - 0x20]!
	0x01DE129C STP X20, X19, [X31 + 0x10]
	0x01DE12A0 ADRP X20, 0x25F7000
	0x01DE12A4 LDRB W8, [X20 + 0xC82]
	0x01DE12A8 MOV X19, X0
	0x01DE12AC TBNZ X8, 0x0, 0x1DE12D0
	0x01DE12B0 ADRP X0, 0x2315000
	0x01DE12B4 LDR X0, [X0 + 0xA78]
	0x01DE12B8 BL 0x1C16CF4
	0x01DE12BC ADRP X0, 0x2317000
	0x01DE12C0 LDR X0, [X0 + 0xC80]
	0x01DE12C4 BL 0x1C16CF4
	0x01DE12C8 MOVZ W8, 0x1
	0x01DE12CC STRB W8, [X20 + 0xC82]
	0x01DE12D0 LDRB W8, [X19 + 0x58]
	0x01DE12D4 CBZ W8, 0x1DE12FC
	0x01DE12D8 STRB W31, [X19 + 0x58]
	0x01DE12DC LDR X0, [X19 + 0xC8]
	0x01DE12E0 CBZ X0, 0x1DE1428
	0x01DE12E4 LDR X8, [X0]
	0x01DE12E8 LDP X20, X19, [X31 + 0x10]
	0x01DE12EC LDR X2, [X8 + 0x218]
	0x01DE12F0 LDR X1, [X8 + 0x220]
	0x01DE12F4 LDP X30, X21, [X31], #0x20
	0x01DE12F8 BR X2
	0x01DE12FC ADRP X21, 0x2315000
	0x01DE1300 LDR X21, [X21 + 0xA78]
	0x01DE1304 LDR X0, [X21]
	0x01DE1308 LDR W8, [X0 + 0xE0]
	0x01DE130C CBNZ W8, 0x1DE1314
	0x01DE1310 BL 0x1C16DFC
	0x01DE1314 MOV X0, X19
	0x01DE1318 MOV X1, X31
	0x01DE131C BL 0x1E77B08
	0x01DE1320 LDR X0, [X19 + 0x38]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W1, 2
	008 Move V8, V2
	009 Move V9, V1
	010 Move V10, V0
	011 Move X19, X0
	012 Call AnglerController.set_phase, X0, X1
	013 Move X8, [X19]
	014 Move X0, X19
	015 Move X1, X31
	016 Move X9, [X8+952]
	017 Move X2, [X8+960]
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move X10, [X19+192]
	020 Compare X10, 0
	021 JumpIfEqual {72}
	022 Move X8, [X10+48]
	023 Compare X8, 0
	024 JumpIfEqual {72}
	025 Move W9, [X8+24]
	026 Compare W9, 0
	027 JumpIfEqual {73}
	028 Move X9, [X10+88]
	029 Compare X9, 0
	030 JumpIfEqual {72}
	031 Move W11, [X9+24]
	032 Compare W11, 0
	033 JumpIfEqual {73}
	034 Move X10, [X10+96]
	035 Compare X10, 0
	036 JumpIfEqual {72}
	037 Move W11, [X10+24]
	038 Compare W11, 0
	039 JumpIfEqual {73}
	040 Move X11, [X19]
	041 Move V0, [X8+32]
	042 Move V1, [X9+32]
	043 Move V2, [X10+32]
	044 Move X8, [X11+712]
	045 Move X2, [X11+720]
	046 Move X0, X19
	047 Move W1, W31
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move X0, X19
	050 Move V0, V10
	051 Move V1, V9
	052 Move V2, V8
	053 Move X1, X31
	054 Move [X19+224], W31
	055 Call MobController.set__targetPosition, X0, X1
	056 Move X20, [X19+232]
	057 Move X0, X19
	058 Move X1, X31
	059 Call MobController.get__targetPosition, X0
	060 Compare X20, 0
	061 JumpIfEqual {72}
	062 Move X0, X20
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X30, [X31+24]
	066 Move D9, [X31+8]
	067 Move D8, [X31+16]
	068 Move X1, X31
	069 Move V10, [X31+48]
	070 Call NavMeshAgent.SetDestination, X0, X1
	071 Return 
	072 Call 0x1C17F20
	073 Call 0x1C17F28

Method: System.Void UpdateLightDetected()

Disassembly:
	0x01DDFC18 FSUB S14, S8, S11
	0x01DDFC1C FSUB S9, S9, S12
	0x01DDFC20 FSUB S8, S10, S13
	0x01DDFC24 LDR X0, [X20]
	0x01DDFC28 LDR W8, [X0 + 0xE0]
	0x01DDFC2C CBNZ W8, 0x1DDFC34
	0x01DDFC30 BL 0x1C16DFC
	0x01DDFC34 ADRP X8, 0xFFFFFFFFFED0B000
	0x01DDFC38 FMUL S0, S14, S14
	0x01DDFC3C FMUL S1, S9, S9
	0x01DDFC40 LDR V11, [X8 + 0x17C]
	0x01DDFC44 ADRP X22, 0x2314000
	0x01DDFC48 FMUL S2, S8, S8
	0x01DDFC4C FADD S0, S0, S1
	0x01DDFC50 LDR X22, [X22 + 0x5A0]
	0x01DDFC54 FADD S0, S2, S0
	0x01DDFC58 FSQRT S2, S0
	0x01DDFC5C FCMP S2, S11
	0x01DDFC60 ADRP X23, 0x25F9000
	0x01DDFC64 B.LE 0x1DDFC78
	0x01DDFC68 FDIV S0, S14, S2
	0x01DDFC6C FDIV S1, S9, S2
	0x01DDFC70 FDIV S2, S8, S2
	0x01DDFC74 B 0x1DDFCA4
	0x01DDFC78 LDRB W8, [X23 + 0x783]
	0x01DDFC7C CBNZ W8, 0x1DDFC94
	0x01DDFC80 ADRP X0, 0x2314000
	0x01DDFC84 LDR X0, [X0 + 0x5A0]
	0x01DDFC88 BL 0x1C16CF4
	0x01DDFC8C MOVZ W8, 0x1
	0x01DDFC90 STRB W8, [X23 + 0x783]
	0x01DDFC94 LDR X8, [X22]
	0x01DDFC98 LDR X8, [X8 + 0xB8]
	0x01DDFC9C LDP S0, S1, [X8]
	0x01DDFCA0 LDR V2, [X8 + 0x8]
	0x01DDFCA4 MOV X0, X31
	0x01DDFCA8 BL 0x1DC0890
	0x01DDFCAC LDRB W8, [X21 + 0x785]
	0x01DDFCB0 MOV V8.16B, V0.16B
	0x01DDFCB4 MOV V9.16B, V1.16B
	0x01DDFCB8 MOV V10.16B, V2.16B
	0x01DDFCBC CBNZ W8, 0x1DDFCD4
	0x01DDFCC0 ADRP X0, 0x2314000
	0x01DDFCC4 LDR X0, [X0 + 0x5A8]
	0x01DDFCC8 BL 0x1C16CF4
	0x01DDFCCC MOVZ W8, 0x1
	0x01DDFCD0 STRB W8, [X21 + 0x785]
	0x01DDFCD4 LDR X0, [X20]
	0x01DDFCD8 LDR W8, [X0 + 0xE0]
	0x01DDFCDC CBNZ W8, 0x1DDFCE4
	0x01DDFCE0 BL 0x1C16DFC
	0x01DDFCE4 FMUL S0, S8, S8
	0x01DDFCE8 FMUL S1, S9, S9
	0x01DDFCEC FADD S0, S0, S1
	0x01DDFCF0 FMUL S1, S10, S10
	0x01DDFCF4 FADD S0, S1, S0
	0x01DDFCF8 FSQRT S0, S0
	0x01DDFCFC FCMP S0, S11
	0x01DDFD00 B.LE 0x1DDFD14
	0x01DDFD04 FDIV S8, S8, S0
	0x01DDFD08 FDIV S9, S9, S0
	0x01DDFD0C FDIV S10, S10, S0
	0x01DDFD10 B 0x1DDFD40
	0x01DDFD14 LDRB W8, [X23 + 0x783]
	0x01DDFD18 CBNZ W8, 0x1DDFD30
	0x01DDFD1C ADRP X0, 0x2314000
	0x01DDFD20 LDR X0, [X0 + 0x5A0]
	0x01DDFD24 BL 0x1C16CF4
	0x01DDFD28 MOVZ W8, 0x1
	0x01DDFD2C STRB W8, [X23 + 0x783]
	0x01DDFD30 LDR X8, [X22]
	0x01DDFD34 LDR X8, [X8 + 0xB8]
	0x01DDFD38 LDP S8, S9, [X8]
	0x01DDFD3C LDR V10, [X8 + 0x8]
	0x01DDFD40 LDR X8, [X19 + 0xC0]
	0x01DDFD44 CBZ X8, 0x1DDFF80
	0x01DDFD48 LDR V11, [X8 + 0x40]
	0x01DDFD4C MOV X0, X19
	0x01DDFD50 MOV X1, X31
	0x01DDFD54 BL 0x3C32E90
	0x01DDFD58 CBZ X0, 0x1DDFF80
	0x01DDFD5C MOV X1, X31
	0x01DDFD60 STR S11, [X31 + 0xC]
	0x01DDFD64 BL 0x3C3FA04
	0x01DDFD68 ADRP X21, 0x25F9000
	0x01DDFD6C LDRB W8, [X21 + 0xA24]
	0x01DDFD70 MOV V11.16B, V0.16B
	0x01DDFD74 MOV V12.16B, V1.16B
	0x01DDFD78 MOV V13.16B, V2.16B
	0x01DDFD7C CBNZ W8, 0x1DDFD94
	0x01DDFD80 ADRP X0, 0x2314000
	0x01DDFD84 LDR X0, [X0 + 0x5A8]
	0x01DDFD88 BL 0x1C16CF4
	0x01DDFD8C MOVZ W8, 0x1
	0x01DDFD90 STRB W8, [X21 + 0xA24]
	0x01DDFD94 LDR X0, [X20]
	0x01DDFD98 FMUL S0, S8, S8
	0x01DDFD9C FMUL S1, S9, S9
	0x01DDFDA0 FADD S0, S0, S1
	0x01DDFDA4 FMUL S1, S10, S10
	0x01DDFDA8 LDR W8, [X0 + 0xE0]
	0x01DDFDAC FADD S15, S1, S0
	0x01DDFDB0 FMUL S0, S11, S11
	0x01DDFDB4 FMUL S1, S12, S12
	0x01DDFDB8 FADD S0, S0, S1
	0x01DDFDBC FMUL S1, S13, S13
	0x01DDFDC0 FADD S14, S1, S0
	0x01DDFDC4 CBNZ W8, 0x1DDFDCC
	0x01DDFDC8 BL 0x1C16DFC
	0x01DDFDCC ADRP X8, 0xFFFFFFFFFED0A000
	0x01DDFDD0 LDR V1, [X8 + 0xFE8]
	0x01DDFDD4 FMUL S0, S15, S14
	0x01DDFDD8 FSQRT S0, S0
	0x01DDFDDC FMOV S15, W31
	0x01DDFDE0 FCMP S0, S1
	0x01DDFDE4 B.MI 0x1DDFE3C
	0x01DDFDE8 LDR X0, [X20]
	0x01DDFDEC FMUL S1, S8, S11
	0x01DDFDF0 FMUL S2, S9, S12
	0x01DDFDF4 FMUL S3, S10, S13
	0x01DDFDF8 FADD S1, S1, S2
	0x01DDFDFC FADD S1, S3, S1
	0x01DDFE00 LDR W8, [X0 + 0xE0]
	0x01DDFE04 FDIV S0, S1, S0
	0x01DDFE08 FMOV S1, 1
	0x01DDFE0C FMOV S2, -1
	0x01DDFE10 FMIN S1, S0, S1
	0x01DDFE14 FCMP S0, S2
	0x01DDFE18 FCSEL S11, S1, S2, PL
	0x01DDFE1C CBNZ W8, 0x1DDFE24
	0x01DDFE20 BL 0x1C16DFC
	0x01DDFE24 FCVT S0, S11
	0x01DDFE28 BL 0x3EB1B80
	0x01DDFE2C ADRP X8, 0xFFFFFFFFFED0B000
	0x01DDFE30 LDR V1, [X8 + 0x448]
	0x00000000 INVALID
	0x01DDFE38 FMUL S15, S0, S1
	0x01DDFE3C MOV X0, X19
	0x01DDFE40 MOV X1, X31
	0x01DDFE44 BL 0x3C32E90
	0x01DDFE48 MOV X20, X0
	0x01DDFE4C MOV X0, X19
	0x01DDFE50 MOV X1, X31
	0x01DDFE54 BL 0x3C32E90
	0x01DDFE58 CBZ X0, 0x1DDFF80
	0x01DDFE5C LDR V0, [X31 + 0xC]
	0x01DDFE60 MOV X1, X31
	0x01DDFE64 FDIV S0, S0, S15
	0x01DDFE68 STR S0, [X31 + 0xC]
	0x01DDFE6C BL 0x3C3DEB4
	0x01DDFE70 MOV V11.16B, V0.16B
	0x01DDFE74 MOV V12.16B, V1.16B
	0x01DDFE78 MOV V13.16B, V2.16B
	0x01DDFE7C MOV V0.16B, V8.16B
	0x01DDFE80 MOV V1.16B, V9.16B
	0x01DDFE84 MOV V2.16B, V10.16B
	0x01DDFE88 MOV X0, X31
	0x01DDFE8C MOV V14.16B, V3.16B
	0x01DDFE90 BL 0x3C2A8C4
	0x01DDFE94 MOV X0, X19
	0x01DDFE98 MOV X1, X31
	0x01DDFE9C MOV V8.16B, V0.16B
	0x01DDFEA0 MOV V9.16B, V1.16B
	0x01DDFEA4 MOV V10.16B, V2.16B
	0x01DDFEA8 MOV V15.16B, V3.16B
	0x01DDFEAC BL 0x1DEA4B8
	0x01DDFEB0 LDR V1, [X31 + 0xC]
	0x01DDFEB4 MOV V2.16B, V13.16B
	0x01DDFEB8 MOV V3.16B, V14.16B
	0x01DDFEBC MOV V4.16B, V8.16B
	0x01DDFEC0 FMUL S0, S1, S0
	0x01DDFEC4 STR S0, [X31]
	0x01DDFEC8 MOV V0.16B, V11.16B
	0x01DDFECC MOV V1.16B, V12.16B
	0x01DDFED0 MOV V5.16B, V9.16B
	0x01DDFED4 MOV V6.16B, V10.16B
	0x01DDFED8 MOV V7.16B, V15.16B
	0x01DDFEDC MOV X0, X31
	0x01DDFEE0 BL 0x3C2A2F8
	0x01DDFEE4 CBZ X20, 0x1DDFF80
	0x01DDFEE8 MOV X0, X20
	0x01DDFEEC MOV X1, X31
	0x01DDFEF0 BL 0x3C3F7AC
	0x01DDFEF4 MOV X0, X19
	0x01DDFEF8 BL 0x1DDE570
	0x01DDFEFC MOV X0, X19
	0x01DDFF00 MOV X1, X31
	0x01DDFF04 MOV V8.16B, V0.16B
	0x01DDFF08 BL 0x1DEA4B8
	0x01DDFF0C FADD S0, S8, S0
	0x01DDFF10 MOV X0, X19
	0x01DDFF14 BL 0x1DDE5D0
	0x01DDFF18 MOV X0, X19
	0x01DDFF1C BL 0x1DDE570
	0x01DDFF20 ADRP X8, 0xFFFFFFFFFED0B000
	0x01DDFF24 LDR V1, [X8 + 0x34]
	0x01DDFF28 FCMP S0, S1
	0x01DDFF2C B.GE 0x1DDFF54
	0x01DDFF30 LDP X20, X19, [X31 + 0x70]
	0x01DDFF34 LDP X22, X21, [X31 + 0x60]
	0x01DDFF38 LDP X30, X23, [X31 + 0x50]
	0x01DDFF3C LDP D9, D8, [X31 + 0x40]
	0x01DDFF40 LDP D11, D10, [X31 + 0x30]
	0x01DDFF44 LDP D13, D12, [X31 + 0x20]
	0x01DDFF48 LDP D15, D14, [X31 + 0x10]
	0x01DDFF4C ADD X31, X31, 0x80
	0x01DDFF50 RET
	0x01DDFF54 LDR X1, [X19 + 0x160]
	0x01DDFF58 MOV X0, X19
	0x01DDFF5C LDP X20, X19, [X31 + 0x70]
	0x01DDFF60 LDP X22, X21, [X31 + 0x60]
	0x01DDFF64 LDP X30, X23, [X31 + 0x50]
	0x01DDFF68 LDP D9, D8, [X31 + 0x40]
	0x01DDFF6C LDP D11, D10, [X31 + 0x30]
	0x01DDFF70 LDP D13, D12, [X31 + 0x20]
	0x01DDFF74 LDP D15, D14, [X31 + 0x10]
	0x01DDFF78 ADD X31, X31, 0x80
	0x01DDFF7C B 0x1DE05AC
	0x01DDFF80 BL 0x1C16F20
	0x01DDFF84 SUB X31, X31, 0x80
	0x01DDFF88 STR D14, [X31 + 0x30]
	0x01DDFF8C STP D13, D12, [X31 + 0x38]
	0x01DDFF90 STP D11, D10, [X31 + 0x48]
	0x01DDFF94 STP D9, D8, [X31 + 0x58]
	0x01DDFF98 STR X30, [X31 + 0x68]
	0x01DDFF9C STP X20, X19, [X31 + 0x70]
	0x01DDFFA0 ADRP X20, 0x25F9000
	0x01DDFFA4 LDRB W8, [X20 + 0xC7C]
	0x01DDFFA8 MOV X19, X0
	0x01DDFFAC TBNZ X8, 0x0, 0x1DDFFF4
	0x01DDFFB0 ADRP X0, 0x2319000
	0x01DDFFB4 LDR X0, [X0 + 0xC20]
	0x01DDFFB8 BL 0x1C16CF4
	0x01DDFFBC ADRP X0, 0x2319000
	0x01DDFFC0 LDR X0, [X0 + 0xC28]
	0x01DDFFC4 BL 0x1C16CF4
	0x01DDFFC8 ADRP X0, 0x2319000
	0x01DDFFCC LDR X0, [X0 + 0xC30]
	0x01DDFFD0 BL 0x1C16CF4
	0x01DDFFD4 ADRP X0, 0x2319000
	0x01DDFFD8 LDR X0, [X0 + 0xC38]
	0x01DDFFDC BL 0x1C16CF4
	0x01DDFFE0 ADRP X0, 0x2319000
	0x01DDFFE4 LDR X0, [X0 + 0xC40]
	0x01DDFFE8 BL 0x1C16CF4
	0x01DDFFEC MOVZ W8, 0x1
	0x01DDFFF0 STRB W8, [X20 + 0xC7C]
	0x01DDFFF4 MOV X0, X19
	0x01DDFFF8 MOV X1, X31
	0x01DDFFFC STP X31, X31, [X31 + 0x20]
	0x01DE0000 STP X31, X31, [X31 + 0x8]
	0x01DE0004 STR X31, [X31 + 0x18]
	0x01DE0008 BL 0x1DF2AA8
	0x01DE000C LDR X0, [X19 + 0xD0]
	0x01DE0010 CBZ X0, 0x1DE01B4
	0x01DE0014 MOV X1, X31
	0x01DE0018 BL 0x3C3F58C
	0x01DE001C LDR X0, [X19 + 0xD0]
	0x01DE0020 CBZ X0, 0x1DE01B4
	0x01DE0024 MOV X1, X31
	0x01DE0028 MOV V8.16B, V0.16B
	0x01DE002C MOV V9.16B, V1.16B
	0x01DE0030 MOV V10.16B, V2.16B
	0x01DE0034 BL 0x3C3FA04
	0x01DE0038 LDR X8, [X19 + 0xC0]
	0x01DE003C CBZ X8, 0x1DE01B4
	0x01DE0040 ADRP X20, 0x2318000
	0x01DE0044 LDR X20, [X20 + 0xC40]
	0x01DE0048 LDR V14, [X8 + 0x80]
	0x01DE004C MOV V11.16B, V0.16B
	0x01DE0050 MOV V12.16B, V1.16B
	0x01DE0054 LDR X0, [X20]
	0x01DE0058 MOV V13.16B, V2.16B
	0x01DE005C LDR W9, [X0 + 0xE0]
	0x01DE0060 CBNZ W9, 0x1DE0068
	0x01DE0064 BL 0x1C16DFC
	0x01DE0068 ADD X0, X31, 0x28
	0x01DE006C MOV V0.16B, V8.16B
	0x01DE0070 MOV V1.16B, V9.16B
	0x01DE0074 MOV V2.16B, V10.16B
	0x01DE0078 MOV V3.16B, V11.16B
	0x01DE007C MOV V4.16B, V12.16B
	0x01DE0080 MOV V5.16B, V13.16B
	0x01DE0084 MOV V6.16B, V14.16B
	0x01DE0088 MOV X1, X31
	0x01DE008C BL 0x1DF8984
	0x01DE0090 TBZ X0, 0x0, 0x1DE00D4
	0x01DE0094 LDR X8, [X19]
	0x01DE0098 LDR X1, [X31 + 0x28]
	0x01DE009C MOV X0, X19
	0x01DE00A0 LDR X9, [X8 + 0x458]
	0x01DE00A4 LDR X2, [X8 + 0x460]
	0x01DE00A8 BLR X9
	0x01DE00AC LDR X0, [X31 + 0x28]
	0x01DE00B0 CBZ X0, 0x1DE01B4
	0x01DE00B4 MOV X1, X31
	0x01DE00B8 BL 0x3C32E90
	0x01DE00BC CBZ X0, 0x1DE01B4
	0x01DE00C0 MOV X1, X31
	0x01DE00C4 BL 0x3C3F58C
	0x01DE00C8 MOV X0, X19
	0x01DE00CC BL 0x1DE0234
	0x01DE00D0 B 0x1DE0194
	0x01DE00D4 LDR X0, [X19 + 0xD0]
	0x01DE00D8 CBZ X0, 0x1DE01B4
	0x01DE00DC MOV X1, X31
	0x01DE00E0 BL 0x3C3F58C
	0x01DE00E4 LDR X8, [X19 + 0xC0]
	0x01DE00E8 CBZ X8, 0x1DE01B4
	0x01DE00EC LDR X8, [X8 + 0x78]
	0x01DE00F0 CBZ X8, 0x1DE01B4
	0x01DE00F4 LDR W9, [X8 + 0x18]
	0x01DE00F8 CBZ W9, 0x1DE01B8
	0x01DE00FC LDR X0, [X20]
	0x01DE0100 LDR V11, [X8 + 0x20]
	0x01DE0104 MOV V8.16B, V0.16B
	0x01DE0108 MOV V9.16B, V1.16B
	0x01DE010C LDR W9, [X0 + 0xE0]
	0x01DE0110 MOV V10.16B, V2.16B
	0x01DE0114 CBNZ W9, 0x1DE011C
	0x01DE0118 BL 0x1C16DFC
	0x01DE011C ADD X1, X31, 0x20
	0x01DE0120 MOV X0, X19
	0x01DE0124 MOV V0.16B, V8.16B
	0x01DE0128 MOV V1.16B, V9.16B
	0x01DE012C MOV V2.16B, V10.16B
	0x01DE0130 MOV V3.16B, V11.16B
	0x01DE0134 MOV X2, X31
	0x01DE0138 BL 0x1DE9804
	0x01DE013C TBZ X0, 0x0, 0x1DE0194
	0x01DE0140 LDR X0, [X31 + 0x20]
	0x01DE0144 CBZ X0, 0x1DE01B4
	0x01DE0148 ADRP X8, 0x2318000
	0x01DE014C LDR X8, [X8 + 0xC38]
	0x01DE0150 LDR X1, [X8]
	0x01DE0154 ADD X8, X31, 0x8
	0x01DE0158 BL 0x301CB58
	0x01DE015C ADRP X8, 0x2318000
	0x01DE0160 LDR X8, [X8 + 0xC28]
	0x01DE0164 LDR X1, [X8]
	0x01DE0168 ADD X0, X31, 0x8
	0x01DE016C BL 0x2BC4350
	0x01DE0170 TBZ X0, 0x0, 0x1DE0180
	0x01DE0174 LDR X1, [X31 + 0x18]
	0x01DE0178 MOV X0, X19
	0x01DE017C BL 0x1DE0324
	0x01DE0180 ADRP X8, 0x2318000
	0x01DE0184 LDR X8, [X8 + 0xC20]
	0x01DE0188 ADD X0, X31, 0x8
	0x01DE018C LDR X1, [X8]
	0x01DE0190 BL 0x2BC434C
	0x01DE0194 LDP X20, X19, [X31 + 0x70]
	0x01DE0198 LDR X30, [X31 + 0x68]
	0x01DE019C LDP D9, D8, [X31 + 0x58]
	0x01DE01A0 LDP D11, D10, [X31 + 0x48]
	0x01DE01A4 LDP D13, D12, [X31 + 0x38]
	0x01DE01A8 LDR V14, [X31 + 0x30]
	0x01DE01AC ADD X31, X31, 0x80
	0x01DE01B0 RET
	0x01DE01B4 BL 0x1C16F20
	0x01DE01B8 BL 0x1C16F28
	0x01DE01BC B 0x1DE01C0
	0x01DE01C0 MOV X20, X0
	0x01DE01C4 CMP W1, 0x1
	0x01DE01C8 B.NE 0x1DE01FC
	0x01DE01CC MOV X0, X20
	0x01DE01D0 BL 0x3EB1AD0
	0x01DE01D4 LDR X19, [X0]
	0x01DE01D8 BL 0x3EB1AE0
	0x01DE01DC ADRP X8, 0x2318000
	0x01DE01E0 LDR X8, [X8 + 0xC20]
	0x01DE01E4 ADD X0, X31, 0x8
	0x01DE01E8 LDR X1, [X8]
	0x01DE01EC BL 0x2BC434C
	0x01DE01F0 CBZ X19, 0x1DE0194
	0x01DE01F4 MOV X0, X19
	0x01DE01F8 BL 0x1C16F18
	0x01DE01FC MOV X19, X31
	0x01DE0200 B 0x1DE0208
	0x01DE0204 MOV X20, X0
	0x01DE0208 ADRP X8, 0x2318000
	0x01DE020C LDR X8, [X8 + 0xC20]
	0x01DE0210 LDR X1, [X8]
	0x01DE0214 ADD X0, X31, 0x8
	0x01DE0218 BL 0x2BC434C
	0x01DE021C CBNZ X19, 0x1DE0228
	0x01DE0220 MOV X0, X20
	0x01DE0224 BL 0x1D2C690
	0x01DE0228 MOV X0, X19
	0x01DE022C BL 0x1C16F18
	0x01DE0230 BL 0x1990590
	0x01DE0234 STR D10, [X31 - 0x30]!
	0x01DE0238 STP D9, D8, [X31 + 0x8]
	0x01DE023C STR X30, [X31 + 0x18]
	0x01DE0240 STP X20, X19, [X31 + 0x20]
	0x01DE0244 MOVZ W1, 0x2
	0x01DE0248 MOV V8.16B, V2.16B
	0x01DE024C MOV V9.16B, V1.16B
	0x01DE0250 MOV V10.16B, V0.16B
	0x01DE0254 MOV X19, X0
	0x01DE0258 BL 0x1DDE450
	0x01DE025C LDR X8, [X19]
	0x01DE0260 MOV X0, X19
	0x01DE0264 MOV X1, X31
	0x01DE0268 LDR X9, [X8 + 0x3B8]
	0x01DE026C LDR X2, [X8 + 0x3C0]
	0x01DE0270 BLR X9
	0x01DE0274 LDR X10, [X19 + 0xC0]
	0x01DE0278 CBZ X10, 0x1DE031C
	0x01DE027C LDR X8, [X10 + 0x30]
	0x01DE0280 CBZ X8, 0x1DE031C
	0x01DE0284 LDR W9, [X8 + 0x18]
	0x01DE0288 CBZ W9, 0x1DE0320
	0x01DE028C LDR X9, [X10 + 0x58]
	0x01DE0290 CBZ X9, 0x1DE031C
	0x01DE0294 LDR W11, [X9 + 0x18]
	0x01DE0298 CBZ W11, 0x1DE0320
	0x01DE029C LDR X10, [X10 + 0x60]
	0x01DE02A0 CBZ X10, 0x1DE031C
	0x01DE02A4 LDR W11, [X10 + 0x18]
	0x01DE02A8 CBZ W11, 0x1DE0320
	0x01DE02AC LDR X11, [X19]
	0x01DE02B0 LDR V0, [X8 + 0x20]
	0x01DE02B4 LDR V1, [X9 + 0x20]
	0x01DE02B8 LDR V2, [X10 + 0x20]
	0x01DE02BC LDR X8, [X11 + 0x2C8]
	0x01DE02C0 LDR X2, [X11 + 0x2D0]
	0x01DE02C4 MOV X0, X19
	0x01DE02C8 MOV W1, W31
	0x01DE02CC BLR X8
	0x01DE02D0 MOV X0, X19
	0x01DE02D4 MOV V0.16B, V10.16B
	0x01DE02D8 MOV V1.16B, V9.16B
	0x01DE02DC MOV V2.16B, V8.16B
	0x01DE02E0 MOV X1, X31
	0x01DE02E4 STR W31, [X19 + 0xE0]
	0x01DE02E8 BL 0x1DE9A40
	0x01DE02EC LDR X20, [X19 + 0xE8]
	0x01DE02F0 MOV X0, X19
	0x01DE02F4 MOV X1, X31
	0x01DE02F8 BL 0x1DEA5A0
	0x01DE02FC CBZ X20, 0x1DE031C
	0x01DE0300 MOV X0, X20
	0x01DE0304 LDP X20, X19, [X31 + 0x20]
	0x01DE0308 LDR X30, [X31 + 0x18]
	0x01DE030C LDP D9, D8, [X31 + 0x8]
	0x01DE0310 MOV X1, X31
	0x01DE0314 LDR V10, [X31], #0x30
	0x01DE0318 B 0x3BE13F8
	0x01DE031C BL 0x1C16F20
	0x01DE0320 BL 0x1C16F28
	0x01DE0324 STR X30, [X31 - 0x30]!
	0x01DE0328 STP X22, X21, [X31 + 0x10]
	0x01DE032C STP X20, X19, [X31 + 0x20]
	0x01DE0330 ADRP X22, 0x25F8000
	0x01DE0334 ADRP X21, 0x2313000
	0x01DE0338 LDRB W8, [X22 + 0xC7F]
	0x01DE033C LDR X21, [X21 + 0x598]
	0x01DE0340 MOV X20, X1
	0x01DE0344 MOV X19, X0
	0x01DE0348 TBNZ X8, 0x0, 0x1DE0360
	0x01DE034C ADRP X0, 0x2313000
	0x01DE0350 LDR X0, [X0 + 0x598]
	0x01DE0354 BL 0x1C16CF4
	0x01DE0358 MOVZ W8, 0x1
	0x01DE035C STRB W8, [X22 + 0xC7F]
	0x01DE0360 LDR X8, [X19]
	0x01DE0364 MOV X0, X19
	0x01DE0368 MOV X1, X20
	0x01DE036C LDR X9, [X8 + 0x3B8]
	0x01DE0370 LDR X2, [X8 + 0x3C0]
	0x01DE0374 BLR X9
	0x01DE0378 LDR X0, [X21]
	0x01DE037C LDR W8, [X0 + 0xE0]
	0x01DE0380 CBNZ W8, 0x1DE0388
	0x01DE0384 BL 0x1C16DFC
	0x01DE0388 MOV X0, X20
	0x01DE038C MOV X1, X31
	0x01DE0390 MOV X2, X31
	0x01DE0394 BL 0x3C354F8
	0x01DE0398 TBZ X0, 0x0, 0x1DE03C4
	0x01DE039C CBZ X20, 0x1DE03D8
	0x01DE03A0 MOV X0, X20
	0x01DE03A4 MOV X1, X31
	0x01DE03A8 BL 0x3C32E90
	0x01DE03AC CBZ X0, 0x1DE03D8
	0x01DE03B0 MOV X1, X31
	0x01DE03B4 BL 0x3C3F58C
	0x01DE03B8 MOV X0, X19
	0x01DE03BC MOV X1, X31
	0x01DE03C0 BL 0x1DE9A40
	0x01DE03C4 MOV X0, X19
	0x01DE03C8 LDP X20, X19, [X31 + 0x20]
	0x01DE03CC LDP X22, X21, [X31 + 0x10]
	0x01DE03D0 LDR X30, [X31], #0x30
	0x01DE03D4 B 0x1DE0518
	0x01DE03D8 BL 0x1C16F20
	0x01DE03DC STR D10, [X31 - 0x30]!
	0x01DE03E0 STP D9, D8, [X31 + 0x10]
	0x01DE03E4 STP X30, X19, [X31 + 0x20]
	0x01DE03E8 LDR X8, [X0]
	0x01DE03EC MOV X1, X31
	0x01DE03F0 MOV V8.16B, V2.16B
	0x01DE03F4 MOV V9.16B, V1.16B
	0x01DE03F8 LDR X9, [X8 + 0x3B8]
	0x01DE03FC LDR X2, [X8 + 0x3C0]
	0x01DE0400 MOV X19, X0
	0x01DE0404 MOV V10.16B, V0.16B
	0x01DE0408 BLR X9
	0x01DE040C MOV X0, X19
	0x01DE0410 MOV V0.16B, V10.16B
	0x01DE0414 MOV V1.16B, V9.16B
	0x01DE0418 MOV V2.16B, V8.16B
	0x01DE041C MOV X1, X31
	0x01DE0420 BL 0x1DE9A40
	0x01DE0424 MOV X0, X19
	0x01DE0428 LDP X30, X19, [X31 + 0x20]
	0x01DE042C LDP D9, D8, [X31 + 0x10]
	0x01DE0430 LDR V10, [X31], #0x30
	0x01DE0434 B 0x1DE0518
	0x01DE0438 STP X30, X19, [X31 - 0x10]!
	0x01DE043C MOVZ W1, 0x3
	0x01DE0440 MOV X19, X0
	0x01DE0444 BL 0x1DDE450
	0x01DE0448 LDR X8, [X19]
	0x01DE044C MOV X0, X19
	0x01DE0450 MOV X1, X31
	0x01DE0454 LDR X9, [X8 + 0x3B8]
	0x01DE0458 LDR X2, [X8 + 0x3C0]
	0x01DE045C BLR X9
	0x01DE0460 LDR X9, [X19 + 0xC0]
	0x01DE0464 CBZ X9, 0x1DE04D0
	0x01DE0468 LDR X8, [X9 + 0x30]
	0x01DE046C CBZ X8, 0x1DE04D0
	0x01DE0470 LDR W10, [X8 + 0x18]
	0x01DE0474 CBZ W10, 0x1DE04D4
	0x01DE0478 LDR X10, [X9 + 0x58]
	0x01DE047C CBZ X10, 0x1DE04D0
	0x01DE0480 LDR W11, [X10 + 0x18]
	0x01DE0484 CBZ W11, 0x1DE04D4
	0x01DE0488 LDR X9, [X9 + 0x60]
	0x01DE048C CBZ X9, 0x1DE04D0
	0x01DE0490 LDR W11, [X9 + 0x18]
	0x01DE0494 CBZ W11, 0x1DE04D4
	0x01DE0498 LDR X11, [X19]
	0x01DE049C LDR V0, [X8 + 0x20]
	0x01DE04A0 LDR V1, [X10 + 0x20]
	0x01DE04A4 LDR V2, [X9 + 0x20]
	0x01DE04A8 LDR X8, [X11 + 0x2C8]
	0x01DE04AC LDR X2, [X11 + 0x2D0]
	0x01DE04B0 MOV X0, X19
	0x01DE04B4 MOV W1, W31
	0x01DE04B8 BLR X8
	0x01DE04BC FMOV S0, W31
	0x01DE04C0 STR W31, [X19 + 0xE0]
	0x01DE04C4 MOV X0, X19
	0x01DE04C8 LDP X30, X19, [X31], #0x10
	0x01DE04CC B 0x1DDE510
	0x01DE04D0 BL 0x1C16F20
	0x01DE04D4 BL 0x1C16F28
	0x01DE04D8 STP D9, D8, [X31 - 0x20]!
	0x01DE04DC STR X30, [X31 + 0x10]
	0x01DE04E0 MOV V8.16B, V1.16B
	0x01DE04E4 MOV V9.16B, V0.16B
	0x01DE04E8 BL 0x1DDE4B0
	0x01DE04EC FMUL S0, S0, S8
	0x01DE04F0 ADD X0, X31, 0x1C
	0x01DE04F4 ADD X1, X31, 0x18
	0x01DE04F8 BL 0x3EB1BC0
	0x01DE04FC LDP S0, S1, [X31 + 0x18]
	0x01DE0500 LDR X30, [X31 + 0x10]
	0x01DE0504 FMUL S0, S0, S9
	0x01DE0508 FMUL S2, S1, S9
	0x01DE050C FMOV S1, W31
	0x01DE0510 LDP D9, D8, [X31], #0x20
	0x01DE0514 RET
	0x01DE0518 STR X30, [X31 - 0x20]!
	0x01DE051C STP X20, X19, [X31 + 0x10]
	0x01DE0520 MOVZ W1, 0x4
	0x01DE0524 MOV X19, X0
	0x01DE0528 BL 0x1DDE450
	0x01DE052C LDR X9, [X19 + 0xC0]
	0x01DE0530 CBZ X9, 0x1DE05A4
	0x01DE0534 LDR X8, [X9 + 0x58]
	0x01DE0538 CBZ X8, 0x1DE05A4
	0x01DE053C LDR W10, [X8 + 0x18]
	0x01DE0540 CBZ W10, 0x1DE05A8
	0x01DE0544 LDR X9, [X9 + 0x60]
	0x01DE0548 CBZ X9, 0x1DE05A4
	0x01DE054C LDR W10, [X9 + 0x18]
	0x01DE0550 CBZ W10, 0x1DE05A8
	0x01DE0554 LDR X10, [X19]
	0x01DE0558 LDR V1, [X8 + 0x20]
	0x01DE055C LDR V2, [X9 + 0x20]
	0x01DE0560 FMOV S0, W31
	0x01DE0564 LDR X8, [X10 + 0x2C8]
	0x01DE0568 LDR X2, [X10 + 0x2D0]
	0x01DE056C MOVZ W1, 0x1
	0x01DE0570 MOV X0, X19
	0x01DE0574 MOVZ W20, 0x1
	0x01DE0578 BLR X8
	0x01DE057C FMOV S0, W31
	0x01DE0580 MOV X0, X19
	0x01DE0584 STR W20, [X19 + 0xE0]
	0x01DE0588 BL 0x1DDE5D0
	0x01DE058C MOV X0, X19
	0x01DE0590 LDP X20, X19, [X31 + 0x10]
	0x01DE0594 FMOV S0, W31
	0x01DE0598 MOV X1, X31
	0x01DE059C LDR X30, [X31], #0x20
	0x01DE05A0 B 0x1DEA540
	0x01DE05A4 BL 0x1C16F20
	0x01DE05A8 BL 0x1C16F28
	0x01DE05AC STR X30, [X31 - 0x30]!
	0x01DE05B0 STP X22, X21, [X31 + 0x10]
	0x01DE05B4 STP X20, X19, [X31 + 0x20]
	0x01DE05B8 ADRP X22, 0x25F8000
	0x01DE05BC ADRP X21, 0x2313000
	0x01DE05C0 LDRB W8, [X22 + 0xC80]
	0x01DE05C4 LDR X21, [X21 + 0x598]
	0x01DE05C8 MOV X20, X1
	0x01DE05CC MOV X19, X0
	0x01DE05D0 TBNZ X8, 0x0, 0x1DE05E8
	0x01DE05D4 ADRP X0, 0x2313000
	0x01DE05D8 LDR X0, [X0 + 0x598]
	0x01DE05DC BL 0x1C16CF4
	0x01DE05E0 MOVZ W8, 0x1
	0x01DE05E4 STRB W8, [X22 + 0xC80]
	0x01DE05E8 MOVZ W1, 0x5
	0x01DE05EC MOV X0, X19
	0x01DE05F0 BL 0x1DDE450
	0x01DE05F4 LDR X8, [X19]
	0x01DE05F8 MOV X0, X19
	0x01DE05FC MOV X1, X20
	0x01DE0600 LDR X9, [X8 + 0x3B8]
	0x01DE0604 LDR X2, [X8 + 0x3C0]
	0x01DE0608 BLR X9
	0x01DE060C LDR X0, [X21]
	0x01DE0610 LDR W8, [X0 + 0xE0]
	0x01DE0614 CBNZ W8, 0x1DE061C
	0x01DE0618 BL 0x1C16DFC
	0x01DE061C MOV X0, X20
	0x01DE0620 MOV X1, X31
	0x01DE0624 MOV X2, X31
	0x01DE0628 BL 0x3C354F8
	0x01DE062C TBZ X0, 0x0, 0x1DE0658
	0x01DE0630 CBZ X20, 0x1DE06EC
	0x01DE0634 MOV X0, X20
	0x01DE0638 MOV X1, X31
	0x01DE063C BL 0x3C32E90
	0x01DE0640 CBZ X0, 0x1DE06EC
	0x01DE0644 MOV X1, X31
	0x01DE0648 BL 0x3C3F58C
	0x01DE064C MOV X0, X19
	0x01DE0650 MOV X1, X31
	0x01DE0654 BL 0x1DE9A40
	0x01DE0658 LDR X9, [X19 + 0xC0]
	0x01DE065C CBZ X9, 0x1DE06EC
	0x01DE0660 LDR X8, [X9 + 0x38]

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+96], D15
	003 Move [X31+104], D14
	004 Move [X31+112], D13
	005 Move [X31+120], D12
	006 Move [X31+128], D11
	007 Move [X31+136], D10
	008 Move [X31+144], D9
	009 Move [X31+152], D8
	010 Move [X31+160], X30
	011 Move [X31+176], X24
	012 Move [X31+184], X23
	013 Move [X31+192], X22
	014 Move [X31+200], X21
	015 Move [X31+208], X20
	016 Move [X31+216], X19
	017 Move X20, 0x25FA000
	018 Move W8, [X20+3197]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {44}
	024 Move X0, 0x231A000
	025 Move X0, [X0+3104]
	026 Call 0x1C17CF4
	027 Move X0, 0x231A000
	028 Move X0, [X0+3112]
	029 Call 0x1C17CF4
	030 Move X0, 0x231A000
	031 Move X0, [X0+3120]
	032 Call 0x1C17CF4
	033 Move X0, 0x231A000
	034 Move X0, [X0+3128]
	035 Call 0x1C17CF4
	036 Move X0, 0x231A000
	037 Move X0, [X0+3136]
	038 Call 0x1C17CF4
	039 Move X0, 0x2315000
	040 Move X0, [X0+1432]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X20+3197], W8
	044 Move [X31+168], X31
	045 Move [X31+64], X31
	046 Move [X31+72], X31
	047 Move [X31+80], X31
	048 Move [X31+56], X31
	049 Move X0, [X19+208]
	050 Compare X0, 0
	051 JumpIfEqual {712}
	052 Move X1, X31
	053 Call Transform.get_position, X0
	054 Move X8, [X19+192]
	055 Compare X8, 0
	056 JumpIfEqual {712}
	057 Move X8, [X8+120]
	058 Compare X8, 0
	059 JumpIfEqual {712}
	060 Move W9, [X8+24]
	061 Compare W9, 0
	062 JumpIfEqual {713}
	063 Move X22, 0x231A000
	064 Move X22, [X22+3136]
	065 Move V11, [X8+32]
	066 Move V8, V0
	067 Move V9, V1
	068 Move X0, [X22]
	069 Move V10, V2
	070 Move W9, [X0+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 Add X1, X31, 168
	075 Move X0, X19
	076 Move V0, V8
	077 Move V1, V9
	078 Move V2, V10
	079 Move V3, V11
	080 Move X2, X31
	081 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {120}
	086 Move X0, [X31+168]
	087 Compare X0, 0
	088 JumpIfEqual {712}
	089 Move X8, 0x231A000
	090 Move X8, [X8+3128]
	091 Move X1, [X8]
	092 Add X8, X31, 32
	093 Call List`1<Object>.GetEnumerator, X0
	094 Move X9, 0x231A000
	095 Move V0, [X31+2]
	096 Move X8, [X31+48]
	097 Move X9, [X9+3112]
	098 Move [X31+4], V0
	099 Move [X31+80], X8
	100 Move X1, [X9]
	101 Add X0, X31, 64
	102 Call Enumerator<Object>.MoveNext, X0
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {115}
	107 Move X1, [X31+80]
	108 Move X0, X19
	109 Call AnglerController.SetAnticipation, X0, X1
	110 Move X8, 0x231A000
	111 Move X8, [X8+3104]
	112 Add X0, X31, 64
	113 Move X1, [X8]
	114 Call Enumerator<Object>.Dispose, X0
	115 Move X8, 0x231A000
	116 Move X8, [X8+3104]
	117 Add X0, X31, 64
	118 Move X1, [X8]
	119 Call Enumerator<Object>.Dispose, X0
	120 Move X21, 0x2315000
	121 Move X21, [X21+1432]
	122 Move X20, [X19+424]
	123 Move X0, [X21]
	124 Move W8, [X0+224]
	125 Compare W8, 0
	126 JumpIfNotEqual {128}
	127 Call 0x1C17DFC
	128 Move X0, X20
	129 Move X1, X31
	130 Move X2, X31
	131 Call Object.op_Inequality, X0, X1
	132 Move S11, 1
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfNotEqual {295}
	137 Move X0, [X19+208]
	138 Compare X0, 0
	139 JumpIfEqual {712}
	140 Move X1, X31
	141 Call Transform.get_position, X0
	142 Move X0, [X19+424]
	143 Compare X0, 0
	144 JumpIfEqual {712}
	145 Move X1, X31
	146 Move V8, V0
	147 Move V9, V1
	148 Move V10, V2
	149 Call Component.get_transform, X0
	150 Compare X0, 0
	151 JumpIfEqual {712}
	152 Move X1, X31
	153 Call Transform.get_position, X0
	154 Move X20, 0x25FA000
	155 Move W8, [X20+1924]
	156 Move V11, V0
	157 Move V12, V1
	158 Move V13, V2
	159 Compare W8, 0
	160 JumpIfNotEqual {166}
	161 Move X0, 0x2315000
	162 Move X0, [X0+1448]
	163 Call 0x1C17CF4
	164 Move W8, 1
	165 Move [X20+1924], W8
	166 Move X20, 0x2315000
	167 Move X20, [X20+1448]
	168 Move X0, [X20]
	169 Move W8, [X0+224]
	170 Compare W8, 0
	171 JumpIfNotEqual {173}
	172 Call 0x1C17DFC
	173 Move X8, [X19+424]
	174 Compare X8, 0
	175 JumpIfEqual {712}
	176 Move X0, [X8+128]
	177 Compare X0, 0
	178 JumpIfEqual {712}
	179 Subtract S8, S8, S11
	180 Subtract S9, S9, S12
	181 Subtract S10, S10, S13
	182 Multiply S0, S8, S8
	183 Multiply S1, S9, S9
	184 Add S0, S0, S1
	185 Multiply S1, S10, S10
	186 Add S0, S1, S0
	187 Move X1, X31
	188 NotImplemented "Instruction FSQRT not yet implemented."
	189 Call GrabbableItem.get_isAttached, X0
	190 Move TEMP, X0
	191 And TEMP, TEMP, 1
	192 Compare TEMP, 1
	193 JumpIfNotEqual {295}
	194 Move X0, [X19+424]
	195 Compare X0, 0
	196 JumpIfEqual {712}
	197 Move X1, X31
	198 Call Component.get_transform, X0
	199 Compare X0, 0
	200 JumpIfEqual {712}
	201 Move X1, X31
	202 NotImplemented "Instruction FDIV not yet implemented."
	203 NotImplemented "Instruction FDIV not yet implemented."
	204 NotImplemented "Instruction FDIV not yet implemented."
	205 Call Transform.get_forward, X0
	206 Move X23, 0x25FA000
	207 Move W8, [X23+2596]
	208 Move V8, V0
	209 Move V9, V1
	210 Move V10, V2
	211 Compare W8, 0
	212 JumpIfNotEqual {218}
	213 Move X0, 0x2315000
	214 Move X0, [X0+1448]
	215 Call 0x1C17CF4
	216 Move W8, 1
	217 Move [X23+2596], W8
	218 Move X0, [X20]
	219 Multiply S0, S13, S13
	220 Multiply S1, S14, S14
	221 Add S0, S0, S1
	222 Multiply S1, S12, S12
	223 Move W8, [X0+224]
	224 Add S15, S1, S0
	225 Multiply S0, S8, S8
	226 Multiply S1, S9, S9
	227 Add S0, S0, S1
	228 Multiply S1, S10, S10
	229 Move [X31+28], S13
	230 Move V13, V12
	231 Add S12, S1, S0
	232 Compare W8, 0
	233 JumpIfNotEqual {235}
	234 Call 0x1C17DFC
	235 Move X8, -19877888
	236 Move V1, [X8+4072]
	237 Multiply S0, S15, S12
	238 NotImplemented "Instruction FSQRT not yet implemented."
	239 Move S15, W31
	240 NotImplemented "Instruction FCMP not yet implemented."
	241 Move V1, [X31+28]
	242 Move X0, [X20]
	243 Multiply S2, S14, S9
	244 Multiply S3, S13, S10
	245 Multiply S1, S1, S8
	246 Add S1, S1, S2
	247 Add S1, S3, S1
	248 Move W8, [X0+224]
	249 NotImplemented "Instruction FDIV not yet implemented."
	250 Move S1, 1
	251 Move S2, -1
	252 NotImplemented "Instruction FMIN not yet implemented."
	253 NotImplemented "Instruction FCMP not yet implemented."
	254 NotImplemented "Instruction FCSEL not yet implemented."
	255 Compare W8, 0
	256 JumpIfNotEqual {258}
	257 Call 0x1C17DFC
	258 NotImplemented "Instruction FCVT not yet implemented."
	259 Call 0x3EB2B80
	260 Move X8, -19873792
	261 Move V1, [X8+1096]
	262 NotImplemented "Instruction INVALID not yet implemented."
	263 Multiply S15, S0, S1
	264 Move X8, [X19+424]
	265 Compare X8, 0
	266 JumpIfEqual {712}
	267 Move X0, [X8+152]
	268 Compare X0, 0
	269 JumpIfEqual {712}
	270 Move X1, X31
	271 Call Light.get_range, X0
	272 NotImplemented "Instruction FCMP not yet implemented."
	273 Move X8, [X19+424]
	274 Compare X8, 0
	275 JumpIfEqual {712}
	276 Move X0, [X8+152]
	277 Compare X0, 0
	278 JumpIfEqual {712}
	279 Move X1, X31
	280 Call Light.get_spotAngle, X0
	281 Move S1, 0.5
	282 Multiply S0, S0, S1
	283 NotImplemented "Instruction FCMP not yet implemented."
	284 Move X0, [X19+424]
	285 Compare X0, 0
	286 JumpIfEqual {712}
	287 Move X1, X31
	288 Call Component.get_transform, X0
	289 Compare X0, 0
	290 JumpIfEqual {712}
	291 Move X1, X31
	292 Call Transform.get_position, X0
	293 Move X0, X19
	294 Call AnglerController.SetAnticipation, X0, X1
	295 Move X0, [X21]
	296 Move X20, [X19+424]
	297 Move W8, [X0+224]
	298 Compare W8, 0
	299 JumpIfNotEqual {301}
	300 Call 0x1C17DFC
	301 Move X0, X20
	302 Move X1, X31
	303 Move X2, X31
	304 Call Object.op_Inequality, X0, X1
	305 Move TEMP, X0
	306 And TEMP, TEMP, 1
	307 Compare TEMP, 1
	308 JumpIfNotEqual {320}
	309 Move X8, [X19+192]
	310 Compare X8, 0
	311 JumpIfEqual {712}
	312 Move X8, [X8+120]
	313 Compare X8, 0
	314 JumpIfEqual {712}
	315 Move W9, [X8+24]
	316 Compare W9, 0
	317 JumpIfEqual {713}
	318 Move V0, [X8+32]
	319 NotImplemented "Instruction FCMP not yet implemented."
	320 Move X0, [X19+208]
	321 Compare X0, 0
	322 JumpIfEqual {712}
	323 Move X1, X31
	324 Call Transform.get_position, X0
	325 Move X0, [X19+208]
	326 Compare X0, 0
	327 JumpIfEqual {712}
	328 Move X1, X31
	329 Move V8, V0
	330 Move V9, V1
	331 Move V10, V2
	332 Call Transform.get_forward, X0
	333 Move X8, [X19+192]
	334 Compare X8, 0
	335 JumpIfEqual {712}
	336 Move X0, [X22]
	337 Move V14, [X8+128]
	338 Move V11, V0
	339 Move V12, V1
	340 Move W9, [X0+224]
	341 Move V13, V2
	342 Compare W9, 0
	343 JumpIfNotEqual {345}
	344 Call 0x1C17DFC
	345 Add X0, X31, 56
	346 Move V0, V8
	347 Move V1, V9
	348 Move V2, V10
	349 Move V3, V11
	350 Move V4, V12
	351 Move V5, V13
	352 Move V6, V14
	353 Move X1, X31
	354 Call MobDetectionUtil.TryGetAnyLightBySight, X0, X1, V0, X2
	355 Move TEMP, X0
	356 And TEMP, TEMP, 1
	357 Compare TEMP, 1
	358 JumpIfNotEqual {377}
	359 Move X8, [X19]
	360 Move X1, [X31+56]
	361 Move X0, X19
	362 Move X9, [X8+1112]
	363 Move X2, [X8+1120]
	364 NotImplemented "Instruction BLR not yet implemented."
	365 Move X0, [X31+56]
	366 Compare X0, 0
	367 JumpIfEqual {712}
	368 Move X1, X31
	369 Call Component.get_transform, X0
	370 Compare X0, 0
	371 JumpIfEqual {712}
	372 Move X1, X31
	373 Call Transform.get_position, X0
	374 Move X0, X19
	375 Move X1, X31
	376 Call MobController.set__targetPosition, X0, X1
	377 Move X8, [X19]
	378 Move X0, X19
	379 Move X1, X31
	380 Move X9, [X8+1112]
	381 Move X2, [X8+1120]
	382 NotImplemented "Instruction BLR not yet implemented."
	383 Move X0, X19
	384 Call AnglerController.get_phase, X0
	385 NotImplemented "Instruction CMP not yet implemented."
	386 Move X0, [X19+232]
	387 Compare X0, 0
	388 JumpIfEqual {712}
	389 Move X1, X31
	390 Call NavMeshAgent.get_pathPending, X0
	391 Move TEMP, X0
	392 And TEMP, TEMP, 1
	393 Compare TEMP, 1
	394 JumpIfNotEqual {445}
	395 Move X0, X19
	396 Move X1, X31
	397 Call MobController.get__targetPosition, X0
	398 Move X0, X19
	399 Move X1, X31
	400 Move V8, V0
	401 Move V9, V1
	402 Move V10, V2
	403 Call Component.get_transform, X0
	404 Compare X0, 0
	405 JumpIfEqual {712}
	406 Move X1, X31
	407 Call Transform.get_position, X0
	408 Move X22, 0x25F9000
	409 Move W8, [X22+1925]
	410 Move V11, V0
	411 Move V12, V1
	412 Move V13, V2
	413 Compare W8, 0
	414 JumpIfNotEqual {420}
	415 Move X0, 0x2314000
	416 Move X0, [X0+1448]
	417 Call 0x1C17CF4
	418 Move W8, 1
	419 Move [X22+1925], W8
	420 Move X20, 0x2314000
	421 Move X20, [X20+1448]
	422 Subtract S14, S8, S11
	423 Subtract S11, S9, S12
	424 Subtract S8, S10, S13
	425 Move X0, [X20]
	426 Move W8, [X0+224]
	427 Compare W8, 0
	428 JumpIfNotEqual {430}
	429 Call 0x1C17DFC
	430 Move X8, -19877888
	431 Multiply S0, S14, S14
	432 Multiply S1, S11, S11
	433 Move V9, [X8+380]
	434 Move X23, 0x2314000
	435 Multiply S2, S8, S8
	436 Add S0, S0, S1
	437 Move X23, [X23+1440]
	438 Add S0, S2, S0
	439 NotImplemented "Instruction FSQRT not yet implemented."
	440 NotImplemented "Instruction FCMP not yet implemented."
	441 Move X24, 0x25F9000
	442 NotImplemented "Instruction FDIV not yet implemented."
	443 NotImplemented "Instruction FDIV not yet implemented."
	444 NotImplemented "Instruction FDIV not yet implemented."
	445 Move X20, [X19+232]
	446 Move X0, X19
	447 Move X1, X31
	448 Call MobController.get__targetPosition, X0
	449 Compare X20, 0
	450 JumpIfEqual {712}
	451 Move X0, X20
	452 Move X1, X31
	453 Call NavMeshAgent.SetDestination, X0, X1
	454 Move W8, [X24+1923]
	455 Compare W8, 0
	456 JumpIfNotEqual {462}
	457 Move X0, 0x2314000
	458 Move X0, [X0+1440]
	459 Call 0x1C17CF4
	460 Move W8, 1
	461 Move [X24+1923], W8
	462 Move X8, [X23]
	463 Move X8, [X8+184]
	464 Move S10, [X8]
	465 Move S14, [X8+4]
	466 Move V15, [X8+8]
	467 Move V0, V10
	468 Move V1, V14
	469 Move V2, V15
	470 Move X0, X31
	471 Call Extensions.Flatten, X0
	472 Move W8, [X22+1925]
	473 Move V8, V0
	474 Move V12, V1
	475 Move V13, V2
	476 Compare W8, 0
	477 JumpIfNotEqual {483}
	478 Move X0, 0x2314000
	479 Move X0, [X0+1448]
	480 Call 0x1C17CF4
	481 Move W8, 1
	482 Move [X22+1925], W8
	483 Move X0, [X20]
	484 Move W8, [X0+224]
	485 Compare W8, 0
	486 JumpIfNotEqual {488}
	487 Call 0x1C17DFC
	488 Multiply S0, S8, S8
	489 Multiply S1, S12, S12
	490 Add S0, S0, S1
	491 Multiply S1, S13, S13
	492 Add S0, S1, S0
	493 NotImplemented "Instruction FSQRT not yet implemented."
	494 NotImplemented "Instruction FCMP not yet implemented."
	495 NotImplemented "Instruction FDIV not yet implemented."
	496 NotImplemented "Instruction FDIV not yet implemented."
	497 Move [X31+28], S1
	498 NotImplemented "Instruction FDIV not yet implemented."
	499 Move W8, [X24+1923]
	500 Compare W8, 0
	501 JumpIfNotEqual {507}
	502 Move X0, 0x2314000
	503 Move X0, [X0+1440]
	504 Call 0x1C17CF4
	505 Move W8, 1
	506 Move [X24+1923], W8
	507 Move X8, [X23]
	508 Move X8, [X8+184]
	509 Move S9, [X8]
	510 Move S0, [X8+4]
	511 Move V13, [X8+8]
	512 Move [X31+28], S0
	513 Move X8, [X19+192]
	514 Compare X8, 0
	515 JumpIfEqual {712}
	516 Move V11, [X8+64]
	517 Move X0, X19
	518 Move X1, X31
	519 Move [X31+20], S15
	520 Move [X31+28], S14
	521 Call Component.get_transform, X0
	522 Compare X0, 0
	523 JumpIfEqual {712}
	524 Move X1, X31
	525 Move [X31+16], S10
	526 Call Transform.get_forward, X0
	527 Move X22, 0x25F9000
	528 Move W8, [X22+2596]
	529 Move V14, V0
	530 Move V15, V1
	531 Move V8, V2
	532 Compare W8, 0
	533 JumpIfNotEqual {539}
	534 Move X0, 0x2314000
	535 Move X0, [X0+1448]
	536 Call 0x1C17CF4
	537 Move W8, 1
	538 Move [X22+2596], W8
	539 Move V1, [X31+28]
	540 Move X0, [X20]
	541 Multiply S0, S9, S9
	542 Move V12, V9
	543 Multiply S1, S1, S1
	544 Add S0, S0, S1
	545 Multiply S1, S13, S13
	546 Move W8, [X0+224]
	547 Add S10, S1, S0
	548 Multiply S0, S14, S14
	549 Multiply S1, S15, S15
	550 Add S0, S0, S1
	551 Multiply S1, S8, S8
	552 Add S9, S1, S0
	553 Compare W8, 0
	554 JumpIfNotEqual {556}
	555 Call 0x1C17DFC
	556 Move X8, -19881984
	557 Move V1, [X8+4072]
	558 Multiply S0, S10, S9
	559 NotImplemented "Instruction FSQRT not yet implemented."
	560 Move S10, W31
	561 NotImplemented "Instruction FCMP not yet implemented."
	562 Move V2, [X31+28]
	563 Move X0, [X20]
	564 Multiply S1, S12, S14
	565 Multiply S3, S13, S8
	566 Multiply S2, S2, S15
	567 Add S1, S1, S2
	568 Add S1, S3, S1
	569 Move W8, [X0+224]
	570 NotImplemented "Instruction FDIV not yet implemented."
	571 Move S1, 1
	572 Move S2, -1
	573 NotImplemented "Instruction FMIN not yet implemented."
	574 NotImplemented "Instruction FCMP not yet implemented."
	575 NotImplemented "Instruction FCSEL not yet implemented."
	576 Compare W8, 0
	577 JumpIfNotEqual {579}
	578 Call 0x1C17DFC
	579 NotImplemented "Instruction FCVT not yet implemented."
	580 Call 0x3EB2B80
	581 Move X8, -19877888
	582 Move V1, [X8+1096]
	583 NotImplemented "Instruction INVALID not yet implemented."
	584 Multiply S10, S0, S1
	585 Move X0, X19
	586 Move X1, X31
	587 Call Component.get_transform, X0
	588 Move X20, X0
	589 Move X0, X19
	590 Move X1, X31
	591 Call Component.get_transform, X0
	592 Compare X0, 0
	593 JumpIfEqual {712}
	594 NotImplemented "Instruction FDIV not yet implemented."
	595 Move X1, X31
	596 Move [X31+12], S0
	597 Call Transform.get_rotation, X0
	598 Move V14, V1
	599 Move V1, [X31+28]
	600 Move V8, V0
	601 Move V15, V2
	602 Move V0, V12
	603 Move V2, V13
	604 Move X0, X31
	605 Move V9, V3
	606 Call Quaternion.LookRotation, X0
	607 Move X0, X19
	608 Move X1, X31
	609 Move V11, V0
	610 Move V12, V1
	611 Move V13, V2
	612 Move V10, V3
	613 Call MobController.get_deltaTime, X0
	614 Move V1, [X31+12]
	615 Move V2, V15
	616 Move V3, V9
	617 Move V4, V11
	618 Multiply S0, S1, S0
	619 Move [X31], S0
	620 Move V0, V8
	621 Move V1, V14
	622 Move V5, V12
	623 Move V6, V13
	624 Move V7, V10
	625 Move X0, X31
	626 Call Quaternion.Slerp, X0, X1, V0
	627 Compare X20, 0
	628 JumpIfEqual {712}
	629 Move X0, X20
	630 Move X1, X31
	631 Call Transform.set_rotation, X0, X1
	632 Move X20, [X19+232]
	633 Move S8, [X31+16]
	634 Move S10, [X31+20]
	635 Move V9, [X31+24]
	636 Compare X20, 0
	637 JumpIfEqual {712}
	638 Move X0, X20
	639 Move X1, X31
	640 Call NavMeshAgent.get_speed, X0
	641 Move X0, X19
	642 Move X1, X31
	643 Multiply S8, S8, S0
	644 Multiply S9, S9, S0
	645 Multiply S10, S10, S0
	646 Call MobController.get_deltaTime, X0
	647 Multiply S3, S8, S0
	648 Multiply S1, S9, S0
	649 Multiply S2, S10, S0
	650 Move X0, X20
	651 Move V0, V3
	652 Move X1, X31
	653 Call NavMeshAgent.Move, X0, X1
	654 Move X0, X19
	655 Move X1, X31
	656 Call MobController.get__targetPosition, X0
	657 Move X0, X19
	658 Move X1, X31
	659 Move V8, V0
	660 Move V9, V1
	661 Move V10, V2
	662 Call Component.get_transform, X0
	663 Compare X0, 0
	664 JumpIfEqual {712}
	665 Move X1, X31
	666 Call Transform.get_position, X0
	667 Subtract S0, S8, S0
	668 Subtract S1, S9, S1
	669 Subtract S2, S10, S2
	670 Multiply S0, S0, S0
	671 Multiply S1, S1, S1
	672 Multiply S2, S2, S2
	673 Add S0, S0, S1
	674 Add S0, S2, S0
	675 Move S1, 2
	676 NotImplemented "Instruction FCMP not yet implemented."
	677 Move X0, [X21]
	678 Move X20, [X19+424]
	679 Move W8, [X0+224]
	680 Compare W8, 0
	681 JumpIfNotEqual {683}
	682 Call 0x1C17DFC
	683 Move X0, X20
	684 Move X1, X31
	685 Move X2, X31
	686 Call Object.op_Inequality, X0, X1
	687 Move TEMP, X0
	688 And TEMP, TEMP, 1
	689 Compare TEMP, 1
	690 JumpIfNotEqual {693}
	691 Move X0, X19
	692 Call AnglerController.SetAroundLight, X0
	693 Move X0, X19
	694 Call AnglerController.SetRoaming, X0
	695 Move X20, [X31+208]
	696 Move X19, [X31+216]
	697 Move X22, [X31+192]
	698 Move X21, [X31+200]
	699 Move X24, [X31+176]
	700 Move X23, [X31+184]
	701 Move X30, [X31+160]
	702 Move D9, [X31+144]
	703 Move D8, [X31+152]
	704 Move D11, [X31+128]
	705 Move D10, [X31+136]
	706 Move D13, [X31+112]
	707 Move D12, [X31+120]
	708 Move D15, [X31+96]
	709 Move D14, [X31+104]
	710 Add X31, X31, 224
	711 Return 
	712 Call 0x1C17F20
	713 Call 0x1C17F28
	714 Move X21, X0
	715 NotImplemented "Instruction CMP not yet implemented."
	716 Move X0, X21
	717 Call 0x3EB2AD0
	718 Move X20, [X0]
	719 Call 0x3EB2AE0
	720 Move X8, 0x2319000
	721 Move X8, [X8+3104]
	722 Add X0, X31, 64
	723 Move X1, [X8]
	724 Call Enumerator<Object>.Dispose, X0
	725 Compare X20, 0
	726 JumpIfEqual {120}
	727 Move X0, X20
	728 Call 0x1C17F18
	729 Move X20, X31
	730 Move X21, X0
	731 Move X8, 0x2319000
	732 Move X8, [X8+3104]
	733 Move X1, [X8]
	734 Add X0, X31, 64
	735 Call Enumerator<Object>.Dispose, X0
	736 Compare X20, 0
	737 JumpIfNotEqual {740}
	738 Move X0, X21
	739 Call 0x1D2D690
	740 Move X0, X20
	741 Call 0x1C17F18
	742 Call 0x1991590

Method: System.Void SetAroundLight()

Disassembly:
	0x01DE1438 ADRP X20, 0x2317000
	0x01DE143C LDRB W8, [X21 + 0xC83]
	0x01DE1440 LDR X20, [X20 + 0xBC0]
	0x01DE1444 MOV X19, X0
	0x01DE1448 TBNZ X8, 0x0, 0x1DE1460
	0x01DE144C ADRP X0, 0x2317000
	0x01DE1450 LDR X0, [X0 + 0xBC0]
	0x01DE1454 BL 0x1C16CF4
	0x01DE1458 MOVZ W8, 0x1
	0x01DE145C STRB W8, [X21 + 0xC83]
	0x01DE1460 MOV X0, X19
	0x01DE1464 MOV X1, X31
	0x01DE1468 BL 0x1DEA894
	0x01DE146C LDR X0, [X20]
	0x01DE1470 LDR W8, [X0 + 0xE0]
	0x01DE1474 CBNZ W8, 0x1DE1480
	0x01DE1478 BL 0x1C16DFC
	0x01DE147C LDR X0, [X20]
	0x01DE1480 LDR X8, [X0 + 0xB8]
	0x01DE1484 MOV X0, X31
	0x01DE1488 LDP S0, S1, [X8 + 0xB0]
	0x01DE148C LDP S2, S3, [X8 + 0xB8]
	0x01DE1490 BL 0x3C0D030
	0x01DE1494 LDR X0, [X19 + 0xD0]
	0x01DE1498 CBZ X0, 0x1DE14C0
	0x01DE149C MOV X1, X31
	0x01DE14A0 BL 0x3C3F58C
	0x01DE14A4 LDR X8, [X19 + 0xC0]
	0x01DE14A8 CBZ X8, 0x1DE14C0
	0x01DE14AC LDR V3, [X8 + 0x4C]
	0x01DE14B0 LDP X20, X19, [X31 + 0x10]
	0x01DE14B4 MOV X0, X31
	0x01DE14B8 LDP X30, X21, [X31], #0x20
	0x01DE14BC B 0x3C0CB98
	0x01DE14C0 BL 0x1C16F20
	0x01DE14C4 STP X30, X21, [X31 - 0x20]!
	0x01DE14C8 STP X20, X19, [X31 + 0x10]
	0x01DE14CC ADRP X20, 0x25F7000
	0x01DE14D0 ADRP X21, 0x2316000
	0x01DE14D4 LDRB W8, [X20 + 0xC84]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 3
	004 Move X19, X0
	005 Call AnglerController.set_phase, X0, X1
	006 Move X8, [X19]
	007 Move X0, X19
	008 Move X1, X31
	009 Move X9, [X8+952]
	010 Move X2, [X8+960]
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Move X9, [X19+192]
	013 Compare X9, 0
	014 JumpIfEqual {49}
	015 Move X8, [X9+48]
	016 Compare X8, 0
	017 JumpIfEqual {49}
	018 Move W10, [X8+24]
	019 Compare W10, 0
	020 JumpIfEqual {50}
	021 Move X10, [X9+88]
	022 Compare X10, 0
	023 JumpIfEqual {49}
	024 Move W11, [X10+24]
	025 Compare W11, 0
	026 JumpIfEqual {50}
	027 Move X9, [X9+96]
	028 Compare X9, 0
	029 JumpIfEqual {49}
	030 Move W11, [X9+24]
	031 Compare W11, 0
	032 JumpIfEqual {50}
	033 Move X11, [X19]
	034 Move V0, [X8+32]
	035 Move V1, [X10+32]
	036 Move V2, [X9+32]
	037 Move X8, [X11+712]
	038 Move X2, [X11+720]
	039 Move X0, X19
	040 Move W1, W31
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move S0, W31
	043 Move [X19+224], W31
	044 Move X0, X19
	045 Move X30, [X31+16]
	046 Move X19, [X31+24]
	047 Call AnglerController.set_timerAroundLight, X0, V0
	048 Return 
	049 Call 0x1C17F20
	050 Call 0x1C17F28

Method: System.Void UpdateAroundLight()

Disassembly:
	0x01DE0664 CBZ X8, 0x1DE06EC
	0x01DE0668 LDR W10, [X8 + 0x18]
	0x01DE066C CBZ W10, 0x1DE06F0
	0x01DE0670 LDR X10, [X9 + 0x58]
	0x01DE0674 CBZ X10, 0x1DE06EC
	0x01DE0678 LDR W11, [X10 + 0x18]
	0x01DE067C CBZ W11, 0x1DE06F0
	0x01DE0680 LDR X9, [X9 + 0x60]
	0x01DE0684 CBZ X9, 0x1DE06EC
	0x01DE0688 LDR W11, [X9 + 0x18]
	0x01DE068C CBZ W11, 0x1DE06F0
	0x01DE0690 LDR X11, [X19]
	0x01DE0694 LDR V0, [X8 + 0x20]
	0x01DE0698 LDR V1, [X10 + 0x20]
	0x01DE069C LDR V2, [X9 + 0x20]
	0x01DE06A0 LDR X8, [X11 + 0x2C8]
	0x01DE06A4 LDR X2, [X11 + 0x2D0]
	0x01DE06A8 MOV X0, X19
	0x01DE06AC MOV W1, W31
	0x01DE06B0 BLR X8
	0x01DE06B4 MOVZ W8, 0x1
	0x01DE06B8 FMOV S0, W31
	0x01DE06BC MOV X0, X19
	0x01DE06C0 STR W8, [X19 + 0xE0]
	0x01DE06C4 BL 0x1DDE510
	0x01DE06C8 LDR X8, [X19 + 0xC0]
	0x01DE06CC CBZ X8, 0x1DE06EC
	0x01DE06D0 LDR V0, [X8 + 0x28]
	0x01DE06D4 MOV X0, X19
	0x01DE06D8 LDP X20, X19, [X31 + 0x20]
	0x01DE06DC LDP X22, X21, [X31 + 0x10]
	0x01DE06E0 MOV X1, X31
	0x01DE06E4 LDR X30, [X31], #0x30
	0x01DE06E8 B 0x1DE8788
	0x01DE06EC BL 0x1C16F20
	0x01DE06F0 BL 0x1C16F28
	0x01DE06F4 SUB X31, X31, 0xA0
	0x01DE06F8 STP D15, D14, [X31 + 0x30]
	0x01DE06FC STP D13, D12, [X31 + 0x40]
	0x01DE0700 STP D11, D10, [X31 + 0x50]
	0x01DE0704 STP D9, D8, [X31 + 0x60]
	0x01DE0708 STP X30, X23, [X31 + 0x70]
	0x01DE070C STP X22, X21, [X31 + 0x80]
	0x01DE0710 STP X20, X19, [X31 + 0x90]
	0x01DE0714 ADRP X20, 0x25F8000
	0x01DE0718 LDRB W8, [X20 + 0xC81]
	0x01DE071C MOV X19, X0
	0x01DE0720 TBNZ X8, 0x0, 0x1DE0798
	0x01DE0724 ADRP X0, 0x2318000
	0x01DE0728 LDR X0, [X0 + 0xC48]
	0x01DE072C BL 0x1C16CF4
	0x01DE0730 ADRP X0, 0x2318000
	0x01DE0734 LDR X0, [X0 + 0xC50]
	0x01DE0738 BL 0x1C16CF4
	0x01DE073C ADRP X0, 0x2318000
	0x01DE0740 LDR X0, [X0 + 0xC58]
	0x01DE0744 BL 0x1C16CF4
	0x01DE0748 ADRP X0, 0x2318000
	0x01DE074C LDR X0, [X0 + 0xC60]
	0x01DE0750 BL 0x1C16CF4
	0x01DE0754 ADRP X0, 0x2318000
	0x01DE0758 LDR X0, [X0 + 0xC68]
	0x01DE075C BL 0x1C16CF4
	0x01DE0760 ADRP X0, 0x2318000
	0x01DE0764 LDR X0, [X0 + 0xC70]
	0x01DE0768 BL 0x1C16CF4
	0x01DE076C ADRP X0, 0x2318000
	0x01DE0770 LDR X0, [X0 + 0xC78]
	0x01DE0774 BL 0x1C16CF4
	0x01DE0778 ADRP X0, 0x2318000
	0x01DE077C LDR X0, [X0 + 0xC40]
	0x01DE0780 BL 0x1C16CF4
	0x01DE0784 ADRP X0, 0x2313000
	0x01DE0788 LDR X0, [X0 + 0x598]
	0x01DE078C BL 0x1C16CF4
	0x01DE0790 MOVZ W8, 0x1
	0x01DE0794 STRB W8, [X20 + 0xC81]
	0x01DE0798 STR X31, [X31 + 0x28]
	0x01DE079C LDR X0, [X19 + 0xD0]
	0x01DE07A0 CBZ X0, 0x1DE1290
	0x01DE07A4 MOV X1, X31
	0x01DE07A8 BL 0x3C3F58C
	0x01DE07AC LDR X0, [X19 + 0xD0]
	0x01DE07B0 CBZ X0, 0x1DE1290
	0x01DE07B4 MOV X1, X31
	0x01DE07B8 MOV V8.16B, V0.16B
	0x01DE07BC MOV V9.16B, V1.16B
	0x01DE07C0 MOV V10.16B, V2.16B
	0x01DE07C4 BL 0x3C3FA04
	0x01DE07C8 LDR X8, [X19 + 0xC0]
	0x01DE07CC CBZ X8, 0x1DE1290
	0x01DE07D0 ADRP X23, 0x2318000
	0x01DE07D4 LDR X23, [X23 + 0xC40]
	0x01DE07D8 LDR V14, [X8 + 0x80]
	0x01DE07DC MOV V11.16B, V0.16B
	0x01DE07E0 MOV V12.16B, V1.16B
	0x01DE07E4 LDR X0, [X23]
	0x01DE07E8 MOV V13.16B, V2.16B
	0x01DE07EC LDR W9, [X0 + 0xE0]
	0x01DE07F0 CBNZ W9, 0x1DE07F8
	0x01DE07F4 BL 0x1C16DFC
	0x01DE07F8 ADRP X22, 0x2313000
	0x01DE07FC LDR X22, [X22 + 0x598]
	0x01DE0800 ADD X0, X31, 0x28
	0x01DE0804 MOV V0.16B, V8.16B
	0x01DE0808 MOV V1.16B, V9.16B
	0x01DE080C MOV V2.16B, V10.16B
	0x01DE0810 MOV V3.16B, V11.16B
	0x01DE0814 MOV V4.16B, V12.16B
	0x01DE0818 MOV V5.16B, V13.16B
	0x01DE081C MOV V6.16B, V14.16B
	0x01DE0820 MOV X1, X31
	0x01DE0824 BL 0x1DF84E8
	0x01DE0828 TBZ X0, 0x0, 0x1DE0A34
	0x01DE082C LDR X0, [X22]
	0x01DE0830 LDR X20, [X19 + 0x1A8]
	0x01DE0834 LDR W8, [X0 + 0xE0]
	0x01DE0838 CBNZ W8, 0x1DE0840
	0x01DE083C BL 0x1C16DFC
	0x01DE0840 MOV X0, X20
	0x01DE0844 MOV X1, X31
	0x01DE0848 MOV X2, X31
	0x01DE084C BL 0x3C3883C
	0x01DE0850 TBNZ X0, 0x0, 0x1DE0874
	0x01DE0854 LDR X0, [X31 + 0x28]
	0x01DE0858 CBZ X0, 0x1DE1290
	0x01DE085C ADRP X8, 0x2318000
	0x01DE0860 LDR X1, [X19 + 0x1A8]
	0x01DE0864 LDR X8, [X8 + 0xC58]
	0x01DE0868 LDR X2, [X8]
	0x01DE086C BL 0x301C318
	0x01DE0870 TBNZ X0, 0x0, 0x1DE08F4
	0x01DE0874 ADRP X8, 0x2318000
	0x01DE0878 LDR X20, [X31 + 0x28]
	0x01DE087C LDR X8, [X8 + 0xC50]
	0x01DE0880 LDR X0, [X8]
	0x01DE0884 BL 0x1C16F10
	0x01DE0888 ADRP X8, 0x2318000
	0x01DE088C LDR X8, [X8 + 0xC48]
	0x01DE0890 MOV X1, X19
	0x01DE0894 MOV X3, X31
	0x01DE0898 MOV X21, X0
	0x01DE089C LDR X2, [X8]
	0x01DE08A0 BL 0x295A080
	0x01DE08A4 CBZ X20, 0x1DE1290
	0x01DE08A8 ADRP X8, 0x2318000
	0x01DE08AC LDR X8, [X8 + 0xC60]
	0x01DE08B0 MOV X0, X20
	0x01DE08B4 MOV X1, X21
	0x01DE08B8 LDR X2, [X8]
	0x01DE08BC BL 0x301DD30
	0x01DE08C0 LDR X0, [X31 + 0x28]
	0x01DE08C4 CBZ X0, 0x1DE1290
	0x01DE08C8 ADRP X8, 0x2318000
	0x01DE08CC LDR X8, [X8 + 0xC78]
	0x01DE08D0 MOV W1, W31
	0x01DE08D4 LDR X2, [X8]
	0x01DE08D8 BL 0x301BCCC
	0x01DE08DC LDR X8, [X19]
	0x01DE08E0 MOV X1, X0
	0x01DE08E4 MOV X0, X19
	0x01DE08E8 LDR X9, [X8 + 0x458]
	0x01DE08EC LDR X2, [X8 + 0x460]
	0x01DE08F0 BLR X9
	0x01DE08F4 LDR X0, [X22]
	0x01DE08F8 LDR X20, [X19 + 0x1A8]
	0x01DE08FC LDR W8, [X0 + 0xE0]
	0x01DE0900 CBNZ W8, 0x1DE0908
	0x01DE0904 BL 0x1C16DFC
	0x01DE0908 MOV X0, X20
	0x01DE090C MOV X1, X31
	0x01DE0910 MOV X2, X31
	0x01DE0914 BL 0x3C354F8
	0x01DE0918 TBZ X0, 0x0, 0x1DE0A84
	0x01DE091C LDR X0, [X19 + 0x1A8]
	0x01DE0920 CBZ X0, 0x1DE1290
	0x01DE0924 MOV X1, X31
	0x01DE0928 BL 0x3C32E90
	0x01DE092C CBZ X0, 0x1DE1290
	0x01DE0930 MOV X1, X31
	0x01DE0934 BL 0x3C3F58C
	0x01DE0938 LDR X0, [X19 + 0xD0]
	0x01DE093C CBZ X0, 0x1DE1290
	0x01DE0940 MOV X1, X31
	0x01DE0944 MOV V8.16B, V0.16B
	0x01DE0948 MOV V9.16B, V1.16B
	0x01DE094C MOV V10.16B, V2.16B
	0x01DE0950 BL 0x3C3F58C
	0x01DE0954 ADRP X20, 0x25F8000
	0x01DE0958 LDRB W8, [X20 + 0x85C]
	0x01DE095C MOV V11.16B, V0.16B
	0x01DE0960 MOV V12.16B, V1.16B
	0x01DE0964 MOV V13.16B, V2.16B
	0x01DE0968 CBNZ W8, 0x1DE0980
	0x01DE096C ADRP X0, 0x2313000
	0x01DE0970 LDR X0, [X0 + 0x5A8]
	0x01DE0974 BL 0x1C16CF4
	0x01DE0978 MOVZ W8, 0x1
	0x01DE097C STRB W8, [X20 + 0x85C]
	0x01DE0980 ADRP X8, 0x2313000
	0x01DE0984 LDR X8, [X8 + 0x5A8]
	0x01DE0988 LDR X0, [X8]
	0x01DE098C LDR W8, [X0 + 0xE0]
	0x01DE0990 CBNZ W8, 0x1DE0998
	0x01DE0994 BL 0x1C16DFC
	0x01DE0998 LDR X8, [X19 + 0xC0]
	0x01DE099C CBZ X8, 0x1DE1290
	0x01DE09A0 LDR X8, [X8 + 0x78]
	0x01DE09A4 CBZ X8, 0x1DE1290
	0x01DE09A8 LDR W9, [X8 + 0x18]
	0x01DE09AC CBZ W9, 0x1DE1294
	0x01DE09B0 FSUB S0, S8, S11
	0x01DE09B4 FSUB S1, S9, S12
	0x01DE09B8 FSUB S2, S10, S13
	0x01DE09BC LDR V3, [X8 + 0x20]
	0x01DE09C0 FMUL S0, S0, S0
	0x01DE09C4 FMUL S1, S1, S1
	0x01DE09C8 FADD S0, S0, S1
	0x01DE09CC FMUL S1, S2, S2
	0x01DE09D0 FADD S0, S1, S0
	0x01DE09D4 FSQRT S0, S0
	0x01DE09D8 FCMP S0, S3
	0x01DE09DC B.PL 0x1DE0A5C
	0x01DE09E0 MOV X0, X19
	0x01DE09E4 BL 0x1DDE4B0
	0x01DE09E8 ADD X0, X31, 0x24
	0x01DE09EC ADD X1, X31, 0x20
	0x01DE09F0 BL 0x3EB1BC0
	0x01DE09F4 LDR X0, [X19 + 0x1A8]
	0x01DE09F8 CBZ X0, 0x1DE1290
	0x01DE09FC LDP S9, S8, [X31 + 0x20]
	0x01DE0A00 MOV X1, X31
	0x01DE0A04 BL 0x3C32E90
	0x01DE0A08 CBZ X0, 0x1DE1290
	0x01DE0A0C FMOV S0, 0.5
	0x01DE0A10 MOV X1, X31
	0x01DE0A14 FMUL S9, S9, S0
	0x01DE0A18 FMUL S8, S8, S0
	0x01DE0A1C BL 0x3C3F58C
	0x01DE0A20 FMOV S3, W31
	0x01DE0A24 FADD S0, S9, S0
	0x01DE0A28 FADD S1, S1, S3
	0x01DE0A2C FADD S2, S8, S2
	0x01DE0A30 B 0x1DE0A78
	0x01DE0A34 LDR X8, [X19]
	0x01DE0A38 MOV X0, X19
	0x01DE0A3C MOV X1, X31
	0x01DE0A40 LDR X9, [X8 + 0x458]
	0x01DE0A44 LDR X2, [X8 + 0x460]
	0x01DE0A48 BLR X9
	0x01DE0A4C FMOV S0, W31
	0x01DE0A50 MOV X0, X19
	0x01DE0A54 BL 0x1DDE510
	0x01DE0A58 B 0x1DE0BB8
	0x01DE0A5C LDR X0, [X19 + 0x1A8]
	0x01DE0A60 CBZ X0, 0x1DE1290
	0x01DE0A64 MOV X1, X31
	0x01DE0A68 BL 0x3C32E90
	0x01DE0A6C CBZ X0, 0x1DE1290
	0x01DE0A70 MOV X1, X31
	0x01DE0A74 BL 0x3C3F58C
	0x01DE0A78 MOV X0, X19
	0x01DE0A7C MOV X1, X31
	0x01DE0A80 BL 0x1DE9A40
	0x01DE0A84 LDR X8, [X31 + 0x28]
	0x01DE0A88 CBZ X8, 0x1DE1290
	0x01DE0A8C LDR W8, [X8 + 0x18]
	0x01DE0A90 FMOV S0, 3
	0x01DE0A94 FMOV S1, 10
	0x01DE0A98 MOV X0, X19
	0x01DE0A9C CMP W8, 0x1
	0x01DE0AA0 FCSEL S9, S1, S0, GT
	0x01DE0AA4 BL 0x1DDE4B0
	0x01DE0AA8 MOV X0, X19
	0x01DE0AAC MOV X1, X31
	0x01DE0AB0 MOV V8.16B, V0.16B
	0x01DE0AB4 BL 0x1DEA4B8
	0x01DE0AB8 FADD S0, S8, S0
	0x01DE0ABC MOV X0, X19
	0x01DE0AC0 BL 0x1DDE510
	0x01DE0AC4 MOV X0, X19
	0x01DE0AC8 BL 0x1DDE4B0
	0x01DE0ACC FCMP S0, S9
	0x01DE0AD0 B.LT 0x1DE0BB8
	0x01DE0AD4 FMOV S0, W31
	0x01DE0AD8 MOV X0, X19
	0x01DE0ADC BL 0x1DDE510
	0x01DE0AE0 LDR X0, [X22]
	0x01DE0AE4 LDR X20, [X19 + 0x1A8]
	0x01DE0AE8 LDR W8, [X0 + 0xE0]
	0x01DE0AEC CBNZ W8, 0x1DE0AF4
	0x01DE0AF0 BL 0x1C16DFC
	0x01DE0AF4 MOV X0, X20
	0x01DE0AF8 MOV X1, X31
	0x01DE0AFC MOV X2, X31
	0x01DE0B00 BL 0x3C354F8
	0x01DE0B04 TBZ X0, 0x0, 0x1DE0B34
	0x01DE0B08 LDR X0, [X19 + 0x1A8]
	0x01DE0B0C CBZ X0, 0x1DE1290
	0x01DE0B10 MOV W1, W31
	0x01DE0B14 MOV X2, X31
	0x01DE0B18 BL 0x1D8E048
	0x01DE0B1C LDR X8, [X19]
	0x01DE0B20 MOV X0, X19
	0x01DE0B24 MOV X1, X31
	0x01DE0B28 LDR X9, [X8 + 0x458]
	0x01DE0B2C LDR X2, [X8 + 0x460]
	0x01DE0B30 BLR X9
	0x01DE0B34 LDR X0, [X23]
	0x01DE0B38 ADD X20, X19, 0x178
	0x01DE0B3C LDR W8, [X0 + 0xE0]
	0x01DE0B40 CBNZ W8, 0x1DE0B48
	0x01DE0B44 BL 0x1C16DFC
	0x01DE0B48 MOV X0, X19
	0x01DE0B4C MOV X1, X20
	0x01DE0B50 MOV X2, X31
	0x01DE0B54 BL 0x1DEA6E8
	0x01DE0B58 TBZ X0, 0x0, 0x1DE0BB8
	0x01DE0B5C LDR X0, [X20]
	0x01DE0B60 CBZ X0, 0x1DE1290
	0x01DE0B64 ADRP X8, 0x2318000
	0x01DE0B68 LDR X8, [X8 + 0xC70]
	0x01DE0B6C MOV W1, W31
	0x01DE0B70 LDR X2, [X8]
	0x01DE0B74 BL 0x301BCCC
	0x01DE0B78 LDR X8, [X19]
	0x01DE0B7C MOV X1, X0
	0x01DE0B80 MOV X0, X19
	0x01DE0B84 LDR X9, [X8 + 0x3B8]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+80], D14
	003 Move [X31+96], D13
	004 Move [X31+104], D12
	005 Move [X31+112], D11
	006 Move [X31+120], D10
	007 Move [X31+128], D9
	008 Move [X31+136], D8
	009 Move [X31+144], X30
	010 Move [X31+152], X23
	011 Move [X31+160], X22
	012 Move [X31+168], X21
	013 Move [X31+176], X20
	014 Move [X31+184], X19
	015 Move X20, 0x25F9000
	016 Move W8, [X20+3198]
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {42}
	022 Move X0, 0x2319000
	023 Move X0, [X0+3104]
	024 Call 0x1C17CF4
	025 Move X0, 0x2319000
	026 Move X0, [X0+3112]
	027 Call 0x1C17CF4
	028 Move X0, 0x2319000
	029 Move X0, [X0+3120]
	030 Call 0x1C17CF4
	031 Move X0, 0x2319000
	032 Move X0, [X0+3128]
	033 Call 0x1C17CF4
	034 Move X0, 0x2319000
	035 Move X0, [X0+3136]
	036 Call 0x1C17CF4
	037 Move X0, 0x2314000
	038 Move X0, [X0+1432]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+3198], W8
	042 Move [X31+88], X31
	043 Move [X31+48], X31
	044 Move [X31+56], X31
	045 Move [X31+64], X31
	046 Move [X31+40], X31
	047 Move X0, [X19+208]
	048 Compare X0, 0
	049 JumpIfEqual {351}
	050 Move X1, X31
	051 Call Transform.get_position, X0
	052 Move X8, [X19+192]
	053 Compare X8, 0
	054 JumpIfEqual {351}
	055 Move X8, [X8+120]
	056 Compare X8, 0
	057 JumpIfEqual {351}
	058 Move W9, [X8+24]
	059 Compare W9, 0
	060 JumpIfEqual {352}
	061 Move X22, 0x2319000
	062 Move X22, [X22+3136]
	063 Move V11, [X8+32]
	064 Move V8, V0
	065 Move V9, V1
	066 Move X0, [X22]
	067 Move V10, V2
	068 Move W9, [X0+224]
	069 Compare W9, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Add X1, X31, 88
	073 Move X0, X19
	074 Move V0, V8
	075 Move V1, V9
	076 Move V2, V10
	077 Move V3, V11
	078 Move X2, X31
	079 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {118}
	084 Move X0, [X31+88]
	085 Compare X0, 0
	086 JumpIfEqual {351}
	087 Move X8, 0x2319000
	088 Move X8, [X8+3128]
	089 Move X1, [X8]
	090 Add X8, X31, 16
	091 Call List`1<Object>.GetEnumerator, X0
	092 Move X9, 0x2319000
	093 Move V0, [X31+1]
	094 Move X8, [X31+32]
	095 Move X9, [X9+3112]
	096 Move [X31+3], V0
	097 Move [X31+64], X8
	098 Move X1, [X9]
	099 Add X0, X31, 48
	100 Call Enumerator<Object>.MoveNext, X0
	101 Move TEMP, X0
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfNotEqual {113}
	105 Move X1, [X31+64]
	106 Move X0, X19
	107 Call AnglerController.SetAnticipation, X0, X1
	108 Move X8, 0x2319000
	109 Move X8, [X8+3104]
	110 Add X0, X31, 48
	111 Move X1, [X8]
	112 Call Enumerator<Object>.Dispose, X0
	113 Move X8, 0x2319000
	114 Move X8, [X8+3104]
	115 Add X0, X31, 48
	116 Move X1, [X8]
	117 Call Enumerator<Object>.Dispose, X0
	118 Move X23, 0x2314000
	119 Move X23, [X23+1432]
	120 Move X20, [X19+424]
	121 Move X0, [X23]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1C17DFC
	126 Move X0, X20
	127 Move X1, X31
	128 Move X2, X31
	129 Call Object.op_Inequality, X0, X1
	130 Move TEMP, X0
	131 And TEMP, TEMP, 1
	132 Compare TEMP, 1
	133 JumpIfNotEqual {190}
	134 Move X0, [X19+424]
	135 Compare X0, 0
	136 JumpIfEqual {351}
	137 Move X1, X31
	138 Call Component.get_transform, X0
	139 Compare X0, 0
	140 JumpIfEqual {351}
	141 Move X1, X31
	142 Call Transform.get_position, X0
	143 Move X0, [X19+208]
	144 Compare X0, 0
	145 JumpIfEqual {351}
	146 Move X1, X31
	147 Move V8, V0
	148 Move V9, V1
	149 Move V10, V2
	150 Call Transform.get_position, X0
	151 Move X20, 0x25F9000
	152 Move W8, [X20+2140]
	153 Move V11, V0
	154 Move V12, V1
	155 Move V13, V2
	156 Compare W8, 0
	157 JumpIfNotEqual {163}
	158 Move X0, 0x2314000
	159 Move X0, [X0+1448]
	160 Call 0x1C17CF4
	161 Move W8, 1
	162 Move [X20+2140], W8
	163 Move X8, 0x2314000
	164 Move X8, [X8+1448]
	165 Move X0, [X8]
	166 Move W8, [X0+224]
	167 Compare W8, 0
	168 JumpIfNotEqual {170}
	169 Call 0x1C17DFC
	170 Move X8, [X19+192]
	171 Compare X8, 0
	172 JumpIfEqual {351}
	173 Move X8, [X8+120]
	174 Compare X8, 0
	175 JumpIfEqual {351}
	176 Move W9, [X8+24]
	177 Compare W9, 0
	178 JumpIfEqual {352}
	179 Subtract S0, S8, S11
	180 Subtract S1, S9, S12
	181 Subtract S2, S10, S13
	182 Move V3, [X8+32]
	183 Multiply S0, S0, S0
	184 Multiply S1, S1, S1
	185 Add S0, S0, S1
	186 Multiply S1, S2, S2
	187 Add S0, S1, S0
	188 NotImplemented "Instruction FSQRT not yet implemented."
	189 NotImplemented "Instruction FCMP not yet implemented."
	190 Move X0, [X19+208]
	191 Compare X0, 0
	192 JumpIfEqual {351}
	193 Move X1, X31
	194 Call Transform.get_position, X0
	195 Move X0, [X19+208]
	196 Compare X0, 0
	197 JumpIfEqual {351}
	198 Move X1, X31
	199 Move V8, V0
	200 Move V9, V1
	201 Move V10, V2
	202 Call Transform.get_forward, X0
	203 Move X8, [X19+192]
	204 Compare X8, 0
	205 JumpIfEqual {351}
	206 Move X0, [X22]
	207 Move V14, [X8+128]
	208 Move V11, V0
	209 Move V12, V1
	210 Move W9, [X0+224]
	211 Move V13, V2
	212 Compare W9, 0
	213 JumpIfNotEqual {215}
	214 Call 0x1C17DFC
	215 Add X0, X31, 40
	216 Move V0, V8
	217 Move V1, V9
	218 Move V2, V10
	219 Move V3, V11
	220 Move V4, V12
	221 Move V5, V13
	222 Move V6, V14
	223 Move X1, X31
	224 Call MobDetectionUtil.TryGetAnyLightBySight, X0, X1, V0, X2
	225 Move TEMP, X0
	226 And TEMP, TEMP, 1
	227 Compare TEMP, 1
	228 JumpIfNotEqual {305}
	229 Move X0, [X23]
	230 Move X20, [X19+424]
	231 Move X21, [X31+40]
	232 Move W8, [X0+224]
	233 Compare W8, 0
	234 JumpIfNotEqual {236}
	235 Call 0x1C17DFC
	236 Move X0, X20
	237 Move X1, X21
	238 Move X2, X31
	239 Call Object.op_Inequality, X0, X1
	240 Move TEMP, X0
	241 And TEMP, TEMP, 1
	242 Compare TEMP, 1
	243 JumpIfNotEqual {261}
	244 Move X8, [X19]
	245 Move X1, [X31+40]
	246 Move X0, X19
	247 Move X9, [X8+1112]
	248 Move X2, [X8+1120]
	249 NotImplemented "Instruction BLR not yet implemented."
	250 Move X0, [X31+40]
	251 Compare X0, 0
	252 JumpIfEqual {351}
	253 Move X1, X31
	254 Call Component.get_transform, X0
	255 Compare X0, 0
	256 JumpIfEqual {351}
	257 Move X1, X31
	258 Call Transform.get_position, X0
	259 Move X0, X19
	260 Call AnglerController.SetLightDetected, X0, X1
	261 Move X0, X19
	262 Call AnglerController.get_timerAroundLight, X0
	263 Move X0, X19
	264 Move X1, X31
	265 Move V8, V0
	266 Call MobController.get_deltaTime, X0
	267 Add S0, S8, S0
	268 Move X0, X19
	269 Call AnglerController.set_timerAroundLight, X0, V0
	270 Move X0, X19
	271 Call AnglerController.get_timerAroundLight, X0
	272 Move S1, 10
	273 NotImplemented "Instruction FCMP not yet implemented."
	274 Move X0, X19
	275 Call AnglerController.get_phase, X0
	276 NotImplemented "Instruction CMP not yet implemented."
	277 Move X0, X19
	278 Call AnglerController.get_timerAroundLight, X0
	279 Move X0, X19
	280 Move X1, X31
	281 Move V10, V0
	282 Call MobController.get__targetPosition, X0
	283 Move X19, [X19+232]
	284 Compare X19, 0
	285 JumpIfEqual {351}
	286 Move V8, V0
	287 Add X0, X31, 12
	288 Add X1, X31, 8
	289 Move V0, V10
	290 Move V9, V1
	291 Move V11, V2
	292 Call 0x3EB2BC0
	293 Move S0, [X31+8]
	294 Move S2, [X31+12]
	295 Move S3, 0.5
	296 Move S1, W31
	297 Add S1, S9, S1
	298 Multiply S2, S2, S3
	299 Multiply S0, S0, S3
	300 Add S2, S11, S2
	301 Add S0, S8, S0
	302 Move X0, X19
	303 Move X1, X31
	304 Call NavMeshAgent.SetDestination, X0, X1
	305 Move X8, [X19]
	306 Move X0, X19
	307 Move X1, X31
	308 Move X9, [X8+1112]
	309 Move X2, [X8+1120]
	310 NotImplemented "Instruction BLR not yet implemented."
	311 Move S0, W31
	312 Move X0, X19
	313 Call AnglerController.set_timerAroundLight, X0, V0
	314 Move X0, [X23]
	315 Move X20, [X19+424]
	316 Move W8, [X0+224]
	317 Compare W8, 0
	318 JumpIfNotEqual {320}
	319 Call 0x1C17DFC
	320 Move X0, X20
	321 Move X1, X31
	322 Move X2, X31
	323 Call Object.op_Inequality, X0, X1
	324 Move TEMP, X0
	325 And TEMP, TEMP, 1
	326 Compare TEMP, 1
	327 JumpIfNotEqual {334}
	328 Move X0, [X19+424]
	329 Compare X0, 0
	330 JumpIfEqual {351}
	331 Move W1, W31
	332 Move X2, X31
	333 Call Flashlight.set_isOn, X0, X1
	334 Move X0, X19
	335 Call AnglerController.SetRoaming, X0
	336 Move X20, [X31+176]
	337 Move X19, [X31+184]
	338 Move X22, [X31+160]
	339 Move X21, [X31+168]
	340 Move X30, [X31+144]
	341 Move X23, [X31+152]
	342 Move D9, [X31+128]
	343 Move D8, [X31+136]
	344 Move D11, [X31+112]
	345 Move D10, [X31+120]
	346 Move D13, [X31+96]
	347 Move D12, [X31+104]
	348 Move V14, [X31+80]
	349 Add X31, X31, 192
	350 Return 
	351 Call 0x1C17F20
	352 Call 0x1C17F28
	353 Move X21, X0
	354 NotImplemented "Instruction CMP not yet implemented."
	355 Move X0, X21
	356 Call 0x3EB2AD0
	357 Move X20, [X0]
	358 Call 0x3EB2AE0
	359 Move X8, 0x2319000
	360 Move X8, [X8+3104]
	361 Add X0, X31, 48
	362 Move X1, [X8]
	363 Call Enumerator<Object>.Dispose, X0
	364 Compare X20, 0
	365 JumpIfEqual {118}
	366 Move X0, X20
	367 Call 0x1C17F18
	368 Move X20, X31
	369 Move X21, X0
	370 Move X8, 0x2319000
	371 Move X8, [X8+3104]
	372 Move X1, [X8]
	373 Add X0, X31, 48
	374 Call Enumerator<Object>.Dispose, X0
	375 Compare X20, 0
	376 JumpIfNotEqual {379}
	377 Move X0, X21
	378 Call 0x1D2D690
	379 Move X0, X20
	380 Call 0x1C17F18
	381 Call 0x1991590

Method: UnityEngine.Vector3 GetCircle(System.Single radius, System.Single speed)

Disassembly:
	0x01DE14D8 LDR X21, [X21 + 0x860]
	0x01DE14DC MOV X19, X0
	0x01DE14E0 TBNZ X8, 0x0, 0x1DE14F8
	0x01DE14E4 ADRP X0, 0x2316000
	0x01DE14E8 LDR X0, [X0 + 0x860]
	0x01DE14EC BL 0x1C16CF4
	0x01DE14F0 MOVZ W8, 0x1
	0x01DE14F4 STRB W8, [X20 + 0xC84]
	0x01DE14F8 LDR X0, [X21]
	0x01DE14FC LDR W8, [X0 + 0xE0]
	0x01DE1500 CBNZ W8, 0x1DE1508
	0x01DE1504 BL 0x1C16DFC
	0x01DE1508 MOV X0, X19
	0x01DE150C LDP X20, X19, [X31 + 0x10]
	0x01DE1510 MOV X1, X31
	0x01DE1514 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move V8, V1
	005 Move V9, V0
	006 Call AnglerController.get_timerAroundLight, X0
	007 Multiply S0, S0, S8
	008 Add X0, X31, 28
	009 Add X1, X31, 24
	010 Call 0x3EB2BC0
	011 Move S0, [X31+24]
	012 Move S1, [X31+28]
	013 Move X30, [X31+16]
	014 Multiply S0, S0, S9
	015 Multiply S2, S1, S9
	016 Move S1, W31
	017 Move D9, [X31+32]
	018 Move D8, [X31+40]
	019 Return X0

Method: System.Void SetAnticipation(AnimalCompany.NetPlayer player)

Disassembly:
	0x01DE1324 CBZ X0, 0x1DE1428
	0x01DE1328 MOV X1, X31
	0x01DE132C BL 0x1E9E538
	0x01DE1330 CMP W0, 0x4
	0x01DE1334 B.NE 0x1DE1344
	0x01DE1338 LDP X20, X19, [X31 + 0x10]
	0x01DE133C LDP X30, X21, [X31], #0x20
	0x01DE1340 RET
	0x01DE1344 LDR X0, [X19 + 0x40]
	0x01DE1348 CBZ X0, 0x1DE1428
	0x01DE134C MOV X1, X31
	0x01DE1350 BL 0x1E94078
	0x01DE1354 TBNZ X0, 0x0, 0x1DE1390
	0x01DE1358 LDR X0, [X21]
	0x01DE135C LDR X19, [X19 + 0x40]
	0x01DE1360 LDR W8, [X0 + 0xE0]
	0x01DE1364 CBNZ W8, 0x1DE136C
	0x01DE1368 BL 0x1C16DFC
	0x01DE136C ADRP X8, 0x2317000
	0x01DE1370 LDR X8, [X8 + 0xC80]
	0x01DE1374 MOV X1, X19
	0x01DE1378 LDP X20, X19, [X31 + 0x10]
	0x01DE137C MOVZ W2, 0x1
	0x01DE1380 LDR X0, [X8]
	0x01DE1384 MOV X3, X31
	0x01DE1388 LDP X30, X21, [X31], #0x20
	0x01DE138C B 0x1E77B00
	0x01DE1390 LDR X8, [X19 + 0x38]
	0x01DE1394 CBZ X8, 0x1DE1428
	0x01DE1398 MOV W20, W0
	0x01DE139C LDR X0, [X8 + 0x50]
	0x01DE13A0 CBZ X0, 0x1DE1428
	0x01DE13A4 MOV X1, X31
	0x01DE13A8 BL 0x1EC4D00
	0x01DE13AC TBZ X0, 0x0, 0x1DE141C
	0x01DE13B0 LDR X8, [X19 + 0x38]
	0x01DE13B4 CBZ X8, 0x1DE1428
	0x01DE13B8 LDR X0, [X8 + 0x50]
	0x01DE13BC MOVZ W1, 0x8
	0x01DE13C0 MOV X2, X31
	0x01DE13C4 BL 0x1ED9318
	0x01DE13C8 LDR X8, [X19 + 0x40]
	0x01DE13CC CBZ X8, 0x1DE1428
	0x01DE13D0 LDR X8, [X8 + 0x20]
	0x01DE13D4 MOV X21, X0
	0x01DE13D8 CBZ X8, 0x1DE13E4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x25F8000
	007 Move X21, 0x2313000
	008 Move W8, [X22+3199]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2313000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3199], W8
	021 Move X8, [X19]
	022 Move X0, X19
	023 Move X1, X20
	024 Move X9, [X8+952]
	025 Move X2, [X8+960]
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X31
	034 Move X2, X31
	035 Call Object.op_Inequality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {52}
	040 Compare X20, 0
	041 JumpIfEqual {60}
	042 Move X0, X20
	043 Move X1, X31
	044 Call Component.get_transform, X0
	045 Compare X0, 0
	046 JumpIfEqual {60}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X0, X19
	050 Move X1, X31
	051 Call MobController.set__targetPosition, X0, X1
	052 Move X0, X19
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]
	058 Call AnglerController.SetAnticipation, X0
	059 Return 
	060 Call 0x1C17F20

Method: System.Void SetAnticipation(UnityEngine.Vector3 targetPosition)

Disassembly:
	0x01DE13DC LDR W0, [X8]
	0x01DE13E0 B 0x1DE13E8
	0x01DE13E4 MOV X0, X31
	0x01DE13E8 LDR W1, [X19 + 0x68]
	0x01DE13EC MOVZ W2, 0x6
	0x01DE13F0 MOV X3, X31
	0x01DE13F4 BL 0x1E9C23C
	0x01DE13F8 STUR X0, [X21 + 0x1C]
	0x01DE13FC CBZ X21, 0x1DE1428
	0x01DE1400 MOVZ W8, 0x40
	0x01DE1404 STR W8, [X21 + 0xC]
	0x01DE1408 LDR X0, [X19 + 0x38]
	0x01DE140C CBZ X0, 0x1DE1428
	0x01DE1410 MOV X1, X21
	0x01DE1414 MOV X2, X31
	0x01DE1418 BL 0x1EA1E24
	0x01DE141C ANDS W31, W20, 0x7
	0x01DE1420 B.NE 0x1DE12DC
	0x01DE1424 B 0x1DE1338
	0x01DE1428 BL 0x1C16F20
	0x01DE142C STP X30, X21, [X31 - 0x20]!
	0x01DE1430 STP X20, X19, [X31 + 0x10]
	0x01DE1434 ADRP X21, 0x25F7000

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X8, [X0]
	007 Move X1, X31
	008 Move V8, V2
	009 Move V9, V1
	010 Move X9, [X8+952]
	011 Move X2, [X8+960]
	012 Move X19, X0
	013 Move V10, V0
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X0, X19
	016 Move V0, V10
	017 Move V1, V9
	018 Move V2, V8
	019 Move X1, X31
	020 Call MobController.set__targetPosition, X0, X1
	021 Move X0, X19
	022 Move X30, [X31+32]
	023 Move X19, [X31+40]
	024 Move D9, [X31+16]
	025 Move D8, [X31+24]
	026 Move V10, [X31+48]
	027 Call AnglerController.SetAnticipation, X0
	028 Return 

Method: System.Void SetAnticipation()

Disassembly:
	0x01DE1518 B 0x1DEAEA0
	0x01DE151C STP D13, D12, [X31 - 0x60]!
	0x01DE1520 STP D11, D10, [X31 + 0x10]
	0x01DE1524 STP D9, D8, [X31 + 0x20]
	0x01DE1528 STR X30, [X31 + 0x30]
	0x01DE152C STP X22, X21, [X31 + 0x40]
	0x01DE1530 STP X20, X19, [X31 + 0x50]
	0x01DE1534 MOV X21, X1
	0x01DE1538 MOV X1, X31
	0x01DE153C MOV X19, X2
	0x01DE1540 MOV X20, X0
	0x01DE1544 BL 0x3C32E90
	0x01DE1548 CBZ X0, 0x1DE16AC
	0x01DE154C MOV X1, X31
	0x01DE1550 BL 0x3C3F58C
	0x01DE1554 CBZ X21, 0x1DE16AC
	0x01DE1558 MOV X0, X21
	0x01DE155C MOV X1, X31
	0x01DE1560 MOV V8.16B, V0.16B
	0x01DE1564 MOV V9.16B, V1.16B
	0x01DE1568 MOV V10.16B, V2.16B
	0x01DE156C BL 0x3C32E90
	0x01DE1570 CBZ X0, 0x1DE16AC
	0x01DE1574 MOV X1, X31
	0x01DE1578 BL 0x3C3F58C
	0x01DE157C ADRP X21, 0x25F7000
	0x01DE1580 LDRB W8, [X21 + 0x85C]
	0x01DE1584 MOV V11.16B, V0.16B
	0x01DE1588 MOV V12.16B, V1.16B
	0x01DE158C MOV V13.16B, V2.16B
	0x01DE1590 CBNZ W8, 0x1DE15A8
	0x01DE1594 ADRP X0, 0x2312000
	0x01DE1598 LDR X0, [X0 + 0x5A8]
	0x01DE159C BL 0x1C16CF4
	0x01DE15A0 MOVZ W8, 0x1
	0x01DE15A4 STRB W8, [X21 + 0x85C]
	0x01DE15A8 ADRP X22, 0x2312000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W1, 4
	005 Move X19, X0
	006 Call AnglerController.set_phase, X0, X1
	007 Move X9, [X19+192]
	008 Compare X9, 0
	009 JumpIfEqual {44}
	010 Move X8, [X9+88]
	011 Compare X8, 0
	012 JumpIfEqual {44}
	013 Move W10, [X8+24]
	014 Compare W10, 0
	015 JumpIfEqual {45}
	016 Move X9, [X9+96]
	017 Compare X9, 0
	018 JumpIfEqual {44}
	019 Move W10, [X9+24]
	020 Compare W10, 0
	021 JumpIfEqual {45}
	022 Move X10, [X19]
	023 Move V1, [X8+32]
	024 Move V2, [X9+32]
	025 Move S0, W31
	026 Move X8, [X10+712]
	027 Move X2, [X10+720]
	028 Move W1, 1
	029 Move X0, X19
	030 Move W20, 1
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move S0, W31
	033 Move X0, X19
	034 Move [X19+224], W20
	035 Call AnglerController.set_timerAnticipation, X0, V0
	036 Move X0, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move S0, W31
	040 Move X1, X31
	041 Move X30, [X31+32]
	042 Call MobController.set__timerToChasing, X0, V0
	043 Return 
	044 Call 0x1C17F20
	045 Call 0x1C17F28

Method: System.Void UpdateAnticipation()

Disassembly:
	0x01DE0B88 LDR X2, [X8 + 0x3C0]
	0x01DE0B8C BLR X9
	0x01DE0B90 LDR X0, [X19 + 0x160]
	0x01DE0B94 CBZ X0, 0x1DE1290
	0x01DE0B98 MOV X1, X31
	0x01DE0B9C BL 0x3C32E90
	0x01DE0BA0 CBZ X0, 0x1DE1290
	0x01DE0BA4 MOV X1, X31
	0x01DE0BA8 BL 0x3C3F58C
	0x01DE0BAC MOV X0, X19
	0x01DE0BB0 MOV X1, X31
	0x01DE0BB4 BL 0x1DE9A40
	0x01DE0BB8 LDR X0, [X22]
	0x01DE0BBC LDR X20, [X19 + 0x1A8]
	0x01DE0BC0 LDR W8, [X0 + 0xE0]
	0x01DE0BC4 CBNZ W8, 0x1DE0BCC
	0x01DE0BC8 BL 0x1C16DFC
	0x01DE0BCC MOV X0, X20
	0x01DE0BD0 MOV X1, X31
	0x01DE0BD4 MOV X2, X31
	0x01DE0BD8 BL 0x3C3883C
	0x01DE0BDC TBZ X0, 0x0, 0x1DE0BEC
	0x01DE0BE0 MOV X0, X19
	0x01DE0BE4 MOV X1, X31
	0x01DE0BE8 BL 0x1DEA1C0
	0x01DE0BEC MOV X0, X19
	0x01DE0BF0 MOV X1, X31
	0x01DE0BF4 BL 0x1DEA458
	0x01DE0BF8 MOV X0, X19
	0x01DE0BFC MOV X1, X31
	0x01DE0C00 MOV V8.16B, V0.16B
	0x01DE0C04 BL 0x1DEA4B8
	0x01DE0C08 FADD S0, S8, S0
	0x01DE0C0C MOV X0, X19
	0x01DE0C10 MOV X1, X31
	0x01DE0C14 BL 0x1DE8788
	0x01DE0C18 MOV X0, X19
	0x01DE0C1C MOV X1, X31
	0x01DE0C20 BL 0x1DEA458
	0x01DE0C24 FMOV S1, 1
	0x01DE0C28 FCMP S0, S1
	0x01DE0C2C B.LE 0x1DE0C58
	0x01DE0C30 LDR X0, [X19 + 0xE8]
	0x01DE0C34 CBZ X0, 0x1DE1290
	0x01DE0C38 MOV X1, X31
	0x01DE0C3C BL 0x3BE1778
	0x01DE0C40 TBZ X0, 0x0, 0x1DE0C58
	0x01DE0C44 LDR X0, [X19 + 0xE8]
	0x01DE0C48 CBZ X0, 0x1DE1290
	0x01DE0C4C MOV W1, W31
	0x01DE0C50 MOV X2, X31
	0x01DE0C54 BL 0x3BE17B4
	0x01DE0C58 LDR X0, [X22]
	0x01DE0C5C LDR X20, [X19 + 0x160]
	0x01DE0C60 LDR W8, [X0 + 0xE0]
	0x01DE0C64 CBNZ W8, 0x1DE0C6C
	0x01DE0C68 BL 0x1C16DFC
	0x01DE0C6C MOV X0, X20
	0x01DE0C70 MOV X1, X31
	0x01DE0C74 MOV X2, X31
	0x01DE0C78 BL 0x3C354F8
	0x01DE0C7C TBZ X0, 0x0, 0x1DE0DD4
	0x01DE0C80 LDR X0, [X19 + 0xD0]
	0x01DE0C84 CBZ X0, 0x1DE1290
	0x01DE0C88 MOV X1, X31
	0x01DE0C8C BL 0x3C3F58C
	0x01DE0C90 MOV X0, X31
	0x01DE0C94 BL 0x1DC0890
	0x01DE0C98 LDR X0, [X19 + 0x160]
	0x01DE0C9C CBZ X0, 0x1DE1290
	0x01DE0CA0 MOV X1, X31
	0x01DE0CA4 MOV V8.16B, V0.16B
	0x01DE0CA8 MOV V9.16B, V1.16B
	0x01DE0CAC MOV V10.16B, V2.16B
	0x01DE0CB0 BL 0x3C32E90
	0x01DE0CB4 CBZ X0, 0x1DE1290
	0x01DE0CB8 MOV X1, X31
	0x01DE0CBC BL 0x3C3F58C
	0x01DE0CC0 MOV X0, X31
	0x01DE0CC4 BL 0x1DC0890
	0x01DE0CC8 LDR X0, [X19 + 0xD0]
	0x01DE0CCC CBZ X0, 0x1DE1290
	0x01DE0CD0 MOV X1, X31
	0x01DE0CD4 MOV V12.16B, V0.16B
	0x01DE0CD8 MOV V13.16B, V1.16B
	0x01DE0CDC MOV V14.16B, V2.16B
	0x01DE0CE0 BL 0x3C3F58C
	0x01DE0CE4 LDR X0, [X19 + 0x160]
	0x01DE0CE8 CBZ X0, 0x1DE1290
	0x01DE0CEC MOV X1, X31
	0x01DE0CF0 MOV V11.16B, V1.16B
	0x01DE0CF4 BL 0x3C32E90
	0x01DE0CF8 CBZ X0, 0x1DE1290
	0x01DE0CFC MOV X1, X31
	0x01DE0D00 BL 0x3C3F58C
	0x01DE0D04 MOV X0, X19
	0x01DE0D08 MOV X1, X31
	0x01DE0D0C MOV V15.16B, V1.16B
	0x01DE0D10 BL 0x1DEA458
	0x01DE0D14 LDR X0, [X19 + 0xC0]
	0x01DE0D18 CBZ X0, 0x1DE1290
	0x01DE0D1C LDR V1, [X0 + 0x28]
	0x01DE0D20 FCMP S0, S1
	0x01DE0D24 B.LT 0x1DE0E84
	0x01DE0D28 FSUB S0, S8, S12
	0x01DE0D2C FSUB S1, S9, S13
	0x01DE0D30 FSUB S2, S10, S14
	0x01DE0D34 FMUL S0, S0, S0
	0x01DE0D38 FMUL S1, S1, S1
	0x01DE0D3C FADD S0, S0, S1
	0x01DE0D40 FMUL S1, S2, S2
	0x01DE0D44 MOV X1, X31
	0x01DE0D48 FADD S8, S1, S0
	0x01DE0D4C BL 0x1DEA4D4
	0x01DE0D50 FCMP S8, S0
	0x01DE0D54 B.PL 0x1DE0E84
	0x01DE0D58 LDR X8, [X19 + 0xC0]
	0x01DE0D5C CBZ X8, 0x1DE1290
	0x01DE0D60 LDR V0, [X8 + 0x4C]
	0x01DE0D64 FABD S1, S11, S11
	0x01DE0D68 FCMP S1, S0
	0x01DE0D6C B.PL 0x1DE0E84
	0x01DE0D70 FMOV S0, W31
	0x01DE0D74 MOV X0, X19
	0x01DE0D78 MOV X1, X31
	0x01DE0D7C BL 0x1DE8788
	0x01DE0D80 LDR X0, [X19 + 0xE8]
	0x01DE0D84 CBZ X0, 0x1DE1290
	0x01DE0D88 MOVZ W1, 0x1
	0x01DE0D8C MOV X2, X31
	0x01DE0D90 BL 0x3BE17B4
	0x01DE0D94 LDR X8, [X19 + 0xC0]
	0x01DE0D98 CBZ X8, 0x1DE1290
	0x01DE0D9C LDR X20, [X19 + 0x160]
	0x01DE0DA0 LDR W21, [X8 + 0x24]
	0x01DE0DA4 MOV X0, X19
	0x01DE0DA8 MOV X1, X31
	0x01DE0DAC BL 0x3C32E90
	0x01DE0DB0 LDR X8, [X19 + 0xC0]
	0x01DE0DB4 CBZ X8, 0x1DE1290
	0x01DE0DB8 LDR X9, [X19 + 0x40]
	0x01DE0DBC MOV X2, X0
	0x01DE0DC0 CBZ X9, 0x1DE0E54
	0x01DE0DC4 LDR X9, [X9 + 0x20]
	0x01DE0DC8 CBZ X9, 0x1DE0E54
	0x01DE0DCC LDR W6, [X9]
	0x01DE0DD0 B 0x1DE0E58
	0x01DE0DD4 LDR X0, [X22]
	0x01DE0DD8 LDR X20, [X19 + 0x1A8]
	0x01DE0DDC LDR W8, [X0 + 0xE0]
	0x01DE0DE0 CBNZ W8, 0x1DE0DE8
	0x01DE0DE4 BL 0x1C16DFC
	0x01DE0DE8 MOV X0, X20
	0x01DE0DEC MOV X1, X31
	0x01DE0DF0 MOV X2, X31
	0x01DE0DF4 BL 0x3C3883C
	0x01DE0DF8 TBZ X0, 0x0, 0x1DE0E84
	0x01DE0DFC MOV X0, X19
	0x01DE0E00 MOV X1, X31
	0x01DE0E04 BL 0x1DEA4E0
	0x01DE0E08 MOV X0, X19
	0x01DE0E0C MOV X1, X31
	0x01DE0E10 MOV V8.16B, V0.16B
	0x01DE0E14 BL 0x1DEA4B8
	0x01DE0E18 FADD S0, S8, S0
	0x01DE0E1C MOV X0, X19
	0x01DE0E20 MOV X1, X31
	0x01DE0E24 BL 0x1DEA540
	0x01DE0E28 MOV X0, X19
	0x01DE0E2C MOV X1, X31
	0x01DE0E30 BL 0x1DEA4E0
	0x01DE0E34 LDR X8, [X19 + 0xC0]
	0x01DE0E38 CBZ X8, 0x1DE1290
	0x01DE0E3C LDR V1, [X8 + 0x68]
	0x01DE0E40 FCMP S0, S1
	0x01DE0E44 B.LT 0x1DE0E84
	0x01DE0E48 MOV X0, X19
	0x01DE0E4C BL 0x1DDE6B0
	0x01DE0E50 B 0x1DE0E84
	0x01DE0E54 MOV X6, X31
	0x01DE0E58 CBZ X20, 0x1DE1290
	0x01DE0E5C LDR W9, [X19 + 0x68]
	0x01DE0E60 LDP X4, X3, [X8 + 0xB8]
	0x01DE0E64 LDR X5, [X8 + 0x18]
	0x01DE0E68 MOV X0, X20
	0x01DE0E6C BFM X6, X9, 0x20, 0x1F
	0x01DE0E70 MOV W1, W21
	0x01DE0E74 MOV X7, X31
	0x01DE0E78 BL 0x1DB7644
	0x01DE0E7C MOV X0, X19
	0x01DE0E80 BL 0x1DE1298
	0x01DE0E84 MOV X0, X19
	0x01DE0E88 BL 0x1DDE3F0
	0x01DE0E8C CMP W0, 0x5
	0x01DE0E90 B.NE 0x1DE126C
	0x01DE0E94 LDR X0, [X19 + 0xE8]
	0x01DE0E98 CBZ X0, 0x1DE1290
	0x01DE0E9C MOV X1, X31
	0x01DE0EA0 BL 0x3BE1608
	0x01DE0EA4 TBZ X0, 0x0, 0x1DE0F6C
	0x01DE0EA8 MOV X0, X19
	0x01DE0EAC MOV X1, X31
	0x01DE0EB0 BL 0x1DEA5A0
	0x01DE0EB4 MOV X0, X19
	0x01DE0EB8 MOV X1, X31
	0x01DE0EBC MOV V8.16B, V0.16B
	0x01DE0EC0 MOV V9.16B, V1.16B
	0x01DE0EC4 MOV V10.16B, V2.16B
	0x01DE0EC8 BL 0x3C32E90
	0x01DE0ECC CBZ X0, 0x1DE1290
	0x01DE0ED0 MOV X1, X31
	0x01DE0ED4 BL 0x3C3F58C
	0x01DE0ED8 ADRP X21, 0x25F8000
	0x01DE0EDC LDRB W8, [X21 + 0x785]
	0x01DE0EE0 MOV V11.16B, V0.16B
	0x01DE0EE4 MOV V12.16B, V1.16B
	0x01DE0EE8 MOV V13.16B, V2.16B
	0x01DE0EEC CBNZ W8, 0x1DE0F04
	0x01DE0EF0 ADRP X0, 0x2313000
	0x01DE0EF4 LDR X0, [X0 + 0x5A8]
	0x01DE0EF8 BL 0x1C16CF4
	0x01DE0EFC MOVZ W8, 0x1
	0x01DE0F00 STRB W8, [X21 + 0x785]
	0x01DE0F04 ADRP X20, 0x2313000
	0x01DE0F08 LDR X20, [X20 + 0x5A8]
	0x01DE0F0C FSUB S14, S8, S11
	0x01DE0F10 FSUB S11, S9, S12
	0x01DE0F14 FSUB S8, S10, S13
	0x01DE0F18 LDR X0, [X20]
	0x01DE0F1C LDR W8, [X0 + 0xE0]
	0x01DE0F20 CBNZ W8, 0x1DE0F28
	0x01DE0F24 BL 0x1C16DFC
	0x01DE0F28 ADRP X8, 0xFFFFFFFFFED0A000
	0x01DE0F2C FMUL S0, S14, S14
	0x01DE0F30 FMUL S1, S11, S11
	0x01DE0F34 LDR V9, [X8 + 0x17C]
	0x01DE0F38 ADRP X22, 0x2313000
	0x01DE0F3C FMUL S2, S8, S8
	0x01DE0F40 FADD S0, S0, S1
	0x01DE0F44 LDR X22, [X22 + 0x5A0]
	0x01DE0F48 FADD S0, S2, S0
	0x01DE0F4C FSQRT S0, S0
	0x01DE0F50 FCMP S0, S9
	0x01DE0F54 ADRP X23, 0x25F8000
	0x01DE0F58 B.LE 0x1DE0F90
	0x01DE0F5C FDIV S10, S14, S0
	0x01DE0F60 FDIV S1, S11, S0
	0x01DE0F64 FDIV S2, S8, S0
	0x01DE0F68 B 0x1DE0FBC
	0x01DE0F6C LDR X20, [X19 + 0xE8]
	0x01DE0F70 MOV X0, X19
	0x01DE0F74 MOV X1, X31
	0x01DE0F78 BL 0x1DEA5A0
	0x01DE0F7C CBZ X20, 0x1DE1290
	0x01DE0F80 MOV X0, X20

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X1, X31
	017 Move X19, X0
	018 Call MobController.UpdateChasing, X0
	019 Move X0, X19
	020 Move X1, X31
	021 Call MobController.get__targetPosition, X0
	022 Move X0, X19
	023 Move X1, X31
	024 Move V8, V0
	025 Move V9, V1
	026 Move V10, V2
	027 Call Component.get_transform, X0
	028 Compare X0, 0
	029 JumpIfEqual {287}
	030 Move X1, X31
	031 Call Transform.get_position, X0
	032 Move X21, 0x25F9000
	033 Move W8, [X21+1925]
	034 Move V11, V0
	035 Move V12, V1
	036 Move V13, V2
	037 Compare W8, 0
	038 JumpIfNotEqual {44}
	039 Move X0, 0x2314000
	040 Move X0, [X0+1448]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X21+1925], W8
	044 Move X20, 0x2314000
	045 Move X20, [X20+1448]
	046 Subtract S14, S8, S11
	047 Subtract S9, S9, S12
	048 Subtract S8, S10, S13
	049 Move X0, [X20]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X8, -19877888
	055 Multiply S0, S14, S14
	056 Multiply S1, S9, S9
	057 Move V11, [X8+380]
	058 Move X22, 0x2314000
	059 Multiply S2, S8, S8
	060 Add S0, S0, S1
	061 Move X22, [X22+1440]
	062 Add S0, S2, S0
	063 NotImplemented "Instruction FSQRT not yet implemented."
	064 NotImplemented "Instruction FCMP not yet implemented."
	065 Move X23, 0x25F9000
	066 NotImplemented "Instruction FDIV not yet implemented."
	067 NotImplemented "Instruction FDIV not yet implemented."
	068 NotImplemented "Instruction FDIV not yet implemented."
	069 Move W8, [X23+1923]
	070 Compare W8, 0
	071 JumpIfNotEqual {77}
	072 Move X0, 0x2314000
	073 Move X0, [X0+1440]
	074 Call 0x1C17CF4
	075 Move W8, 1
	076 Move [X23+1923], W8
	077 Move X8, [X22]
	078 Move X8, [X8+184]
	079 Move S0, [X8]
	080 Move S1, [X8+4]
	081 Move V2, [X8+8]
	082 Move X0, X31
	083 Call Extensions.Flatten, X0
	084 Move W8, [X21+1925]
	085 Move V8, V0
	086 Move V9, V1
	087 Move V10, V2
	088 Compare W8, 0
	089 JumpIfNotEqual {95}
	090 Move X0, 0x2314000
	091 Move X0, [X0+1448]
	092 Call 0x1C17CF4
	093 Move W8, 1
	094 Move [X21+1925], W8
	095 Move X0, [X20]
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1C17DFC
	100 Multiply S0, S8, S8
	101 Multiply S1, S9, S9
	102 Add S0, S0, S1
	103 Multiply S1, S10, S10
	104 Add S0, S1, S0
	105 NotImplemented "Instruction FSQRT not yet implemented."
	106 NotImplemented "Instruction FCMP not yet implemented."
	107 NotImplemented "Instruction FDIV not yet implemented."
	108 NotImplemented "Instruction FDIV not yet implemented."
	109 NotImplemented "Instruction FDIV not yet implemented."
	110 Move W8, [X23+1923]
	111 Compare W8, 0
	112 JumpIfNotEqual {118}
	113 Move X0, 0x2314000
	114 Move X0, [X0+1440]
	115 Call 0x1C17CF4
	116 Move W8, 1
	117 Move [X23+1923], W8
	118 Move X8, [X22]
	119 Move X8, [X8+184]
	120 Move S8, [X8]
	121 Move S9, [X8+4]
	122 Move V10, [X8+8]
	123 Move X8, [X19+192]
	124 Compare X8, 0
	125 JumpIfEqual {287}
	126 Move V11, [X8+64]
	127 Move X0, X19
	128 Move X1, X31
	129 Call Component.get_transform, X0
	130 Compare X0, 0
	131 JumpIfEqual {287}
	132 Move X1, X31
	133 Move [X31+12], S11
	134 Call Transform.get_forward, X0
	135 Move X21, 0x25F9000
	136 Move W8, [X21+2596]
	137 Move V11, V0
	138 Move V12, V1
	139 Move V13, V2
	140 Compare W8, 0
	141 JumpIfNotEqual {147}
	142 Move X0, 0x2314000
	143 Move X0, [X0+1448]
	144 Call 0x1C17CF4
	145 Move W8, 1
	146 Move [X21+2596], W8
	147 Move X0, [X20]
	148 Multiply S0, S8, S8
	149 Multiply S1, S9, S9
	150 Add S0, S0, S1
	151 Multiply S1, S10, S10
	152 Move W8, [X0+224]
	153 Add S15, S1, S0
	154 Multiply S0, S11, S11
	155 Multiply S1, S12, S12
	156 Add S0, S0, S1
	157 Multiply S1, S13, S13
	158 Add S14, S1, S0
	159 Compare W8, 0
	160 JumpIfNotEqual {162}
	161 Call 0x1C17DFC
	162 Move X8, -19881984
	163 Move V1, [X8+4072]
	164 Multiply S0, S15, S14
	165 NotImplemented "Instruction FSQRT not yet implemented."
	166 Move S15, W31
	167 NotImplemented "Instruction FCMP not yet implemented."
	168 Move X0, [X20]
	169 Multiply S1, S8, S11
	170 Multiply S2, S9, S12
	171 Multiply S3, S10, S13
	172 Add S1, S1, S2
	173 Add S1, S3, S1
	174 Move W8, [X0+224]
	175 NotImplemented "Instruction FDIV not yet implemented."
	176 Move S1, 1
	177 Move S2, -1
	178 NotImplemented "Instruction FMIN not yet implemented."
	179 NotImplemented "Instruction FCMP not yet implemented."
	180 NotImplemented "Instruction FCSEL not yet implemented."
	181 Compare W8, 0
	182 JumpIfNotEqual {184}
	183 Call 0x1C17DFC
	184 NotImplemented "Instruction FCVT not yet implemented."
	185 Call 0x3EB2B80
	186 Move X8, -19877888
	187 Move V1, [X8+1096]
	188 NotImplemented "Instruction INVALID not yet implemented."
	189 Multiply S15, S0, S1
	190 Move X0, X19
	191 Move X1, X31
	192 Call Component.get_transform, X0
	193 Move X20, X0
	194 Move X0, X19
	195 Move X1, X31
	196 Call Component.get_transform, X0
	197 Compare X0, 0
	198 JumpIfEqual {287}
	199 Move V0, [X31+12]
	200 Move X1, X31
	201 NotImplemented "Instruction FDIV not yet implemented."
	202 Move [X31+12], S0
	203 Call Transform.get_rotation, X0
	204 Move V11, V0
	205 Move V12, V1
	206 Move V13, V2
	207 Move V0, V8
	208 Move V1, V9
	209 Move V2, V10
	210 Move X0, X31
	211 Move V14, V3
	212 Call Quaternion.LookRotation, X0
	213 Move X0, X19
	214 Move X1, X31
	215 Move V8, V0
	216 Move V9, V1
	217 Move V10, V2
	218 Move V15, V3
	219 Call MobController.get_deltaTime, X0
	220 Move V1, [X31+12]
	221 Move V2, V13
	222 Move V3, V14
	223 Move V4, V8
	224 Multiply S0, S1, S0
	225 Move [X31], S0
	226 Move V0, V11
	227 Move V1, V12
	228 Move V5, V9
	229 Move V6, V10
	230 Move V7, V15
	231 Move X0, X31
	232 Call Quaternion.Slerp, X0, X1, V0
	233 Compare X20, 0
	234 JumpIfEqual {287}
	235 Move X0, X20
	236 Move X1, X31
	237 Call Transform.set_rotation, X0, X1
	238 Move X0, X19
	239 Call AnglerController.get_timerAnticipation, X0
	240 Move X0, X19
	241 Move X1, X31
	242 Move V8, V0
	243 Call MobController.get_deltaTime, X0
	244 Add S0, S8, S0
	245 Move X0, X19
	246 Call AnglerController.set_timerAnticipation, X0, V0
	247 Move X0, X19
	248 Call AnglerController.get_timerAnticipation, X0
	249 Move X8, -19877888
	250 Move V1, [X8+52]
	251 NotImplemented "Instruction FCMP not yet implemented."
	252 Move X20, [X31+112]
	253 Move X19, [X31+120]
	254 Move X22, [X31+96]
	255 Move X21, [X31+104]
	256 Move X30, [X31+80]
	257 Move X23, [X31+88]
	258 Move D9, [X31+64]
	259 Move D8, [X31+72]
	260 Move D11, [X31+48]
	261 Move D10, [X31+56]
	262 Move D13, [X31+32]
	263 Move D12, [X31+40]
	264 Move D15, [X31+16]
	265 Move D14, [X31+24]
	266 Add X31, X31, 128
	267 Return 
	268 Move X1, [X19+352]
	269 Move X0, X19
	270 Move X20, [X31+112]
	271 Move X19, [X31+120]
	272 Move X22, [X31+96]
	273 Move X21, [X31+104]
	274 Move X30, [X31+80]
	275 Move X23, [X31+88]
	276 Move D9, [X31+64]
	277 Move D8, [X31+72]
	278 Move D11, [X31+48]
	279 Move D10, [X31+56]
	280 Move D13, [X31+32]
	281 Move D12, [X31+40]
	282 Move D15, [X31+16]
	283 Move D14, [X31+24]
	284 Add X31, X31, 128
	285 Call AnglerController.SetChasing, X0, X1
	286 Return 
	287 Call 0x1C17F20

Method: System.Void SetChasing(AnimalCompany.NetPlayer player)

Disassembly:
	0x01DE15AC LDR X22, [X22 + 0x5A8]
	0x01DE15B0 FSUB S11, S8, S11
	0x01DE15B4 FSUB S9, S9, S12
	0x01DE15B8 FSUB S8, S10, S13
	0x01DE15BC LDR X0, [X22]
	0x01DE15C0 LDR W8, [X0 + 0xE0]
	0x01DE15C4 CBNZ W8, 0x1DE15CC
	0x01DE15C8 BL 0x1C16DFC
	0x01DE15CC FMUL S0, S11, S11
	0x01DE15D0 FMUL S1, S9, S9
	0x01DE15D4 FADD S0, S0, S1
	0x01DE15D8 FMUL S1, S8, S8
	0x01DE15DC FADD S0, S1, S0
	0x01DE15E0 FSQRT S0, S0
	0x01DE15E4 MOV X0, X20
	0x01DE15E8 MOV X1, X31
	0x01DE15EC STR S0, [X31 + 0x3C]
	0x01DE15F0 BL 0x3C32E90
	0x01DE15F4 CBZ X0, 0x1DE16AC
	0x01DE15F8 MOV X1, X31
	0x01DE15FC BL 0x3C3F58C
	0x01DE1600 CBZ X19, 0x1DE16AC
	0x01DE1604 MOV X0, X19
	0x01DE1608 MOV X1, X31
	0x01DE160C MOV V8.16B, V0.16B
	0x01DE1610 MOV V9.16B, V1.16B
	0x01DE1614 MOV V10.16B, V2.16B
	0x01DE1618 BL 0x3C32E90
	0x01DE161C CBZ X0, 0x1DE16AC
	0x01DE1620 MOV X1, X31
	0x01DE1624 BL 0x3C3F58C
	0x01DE1628 LDRB W8, [X21 + 0x85C]
	0x01DE162C MOV V11.16B, V0.16B
	0x01DE1630 MOV V12.16B, V1.16B
	0x01DE1634 MOV V13.16B, V2.16B
	0x01DE1638 CBNZ W8, 0x1DE1650
	0x01DE163C ADRP X0, 0x2312000
	0x01DE1640 LDR X0, [X0 + 0x5A8]
	0x01DE1644 BL 0x1C16CF4
	0x01DE1648 MOVZ W8, 0x1
	0x01DE164C STRB W8, [X21 + 0x85C]
	0x01DE1650 LDR X0, [X22]
	0x01DE1654 FSUB S11, S8, S11
	0x01DE1658 FSUB S9, S9, S12
	0x01DE165C FSUB S8, S10, S13
	0x01DE1660 LDR W8, [X0 + 0xE0]
	0x01DE1664 CBNZ W8, 0x1DE166C
	0x01DE1668 BL 0x1C16DFC
	0x01DE166C FMUL S0, S11, S11
	0x01DE1670 FMUL S1, S9, S9
	0x01DE1674 FADD S0, S0, S1
	0x01DE1678 FMUL S1, S8, S8
	0x01DE167C FADD S0, S1, S0
	0x01DE1680 FSQRT S0, S0
	0x01DE1684 ADD X0, X31, 0x3C
	0x01DE1688 MOV X1, X31
	0x01DE168C BL 0x338FCB8
	0x01DE1690 LDP X20, X19, [X31 + 0x50]
	0x01DE1694 LDP X22, X21, [X31 + 0x40]
	0x01DE1698 LDR X30, [X31 + 0x30]
	0x01DE169C LDP D9, D8, [X31 + 0x20]
	0x01DE16A0 LDP D11, D10, [X31 + 0x10]
	0x01DE16A4 LDP D13, D12, [X31], #0x60
	0x01DE16A8 RET
	0x01DE16AC BL 0x1C16F20
	0x01DE16B0 STP X30, X19, [X31 - 0x10]!
	0x01DE16B4 AND W1, W1, 0x1
	0x01DE16B8 MOV X2, X31
	0x01DE16BC MOV X19, X0
	0x01DE16C0 BL 0x1DEB2A4
	0x01DE16C4 LDR W1, [X19 + 0x1A4]
	0x01DE16C8 MOV X0, X19
	0x01DE16CC BL 0x1DDE450
	0x01DE16D0 LDR V0, [X19 + 0x1B0]
	0x01DE16D4 MOV X0, X19
	0x01DE16D8 BL 0x1DDE510
	0x01DE16DC LDR V0, [X19 + 0x1B4]
	0x01DE16E0 MOV X0, X19
	0x01DE16E4 LDP X30, X19, [X31], #0x10
	0x01DE16E8 B 0x1DDE5D0
	0x01DE16EC STP X30, X19, [X31 - 0x10]!
	0x01DE16F0 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x25F8000
	007 Move X21, 0x2313000
	008 Move W8, [X22+3200]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2313000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3200], W8
	021 Move W1, 5
	022 Move X0, X19
	023 Call AnglerController.set_phase, X0, X1
	024 Move X8, [X19]
	025 Move X0, X19
	026 Move X1, X20
	027 Move X9, [X8+952]
	028 Move X2, [X8+960]
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move X0, [X21]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X20
	036 Move X1, X31
	037 Move X2, X31
	038 Call Object.op_Inequality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {55}
	043 Compare X20, 0
	044 JumpIfEqual {103}
	045 Move X0, X20
	046 Move X1, X31
	047 Call Component.get_transform, X0
	048 Compare X0, 0
	049 JumpIfEqual {103}
	050 Move X1, X31
	051 Call Transform.get_position, X0
	052 Move X0, X19
	053 Move X1, X31
	054 Call MobController.set__targetPosition, X0, X1
	055 Move X9, [X19+192]
	056 Compare X9, 0
	057 JumpIfEqual {103}
	058 Move X8, [X9+56]
	059 Compare X8, 0
	060 JumpIfEqual {103}
	061 Move W10, [X8+24]
	062 Compare W10, 0
	063 JumpIfEqual {104}
	064 Move X10, [X9+88]
	065 Compare X10, 0
	066 JumpIfEqual {103}
	067 Move W11, [X10+24]
	068 Compare W11, 0
	069 JumpIfEqual {104}
	070 Move X9, [X9+96]
	071 Compare X9, 0
	072 JumpIfEqual {103}
	073 Move W11, [X9+24]
	074 Compare W11, 0
	075 JumpIfEqual {104}
	076 Move X11, [X19]
	077 Move V0, [X8+32]
	078 Move V1, [X10+32]
	079 Move V2, [X9+32]
	080 Move X8, [X11+712]
	081 Move X2, [X11+720]
	082 Move X0, X19
	083 Move W1, W31
	084 NotImplemented "Instruction BLR not yet implemented."
	085 Move W8, 1
	086 Move S0, W31
	087 Move X0, X19
	088 Move [X19+224], W8
	089 Call AnglerController.set_timerAroundLight, X0, V0
	090 Move X8, [X19+192]
	091 Compare X8, 0
	092 JumpIfEqual {103}
	093 Move V0, [X8+40]
	094 Move X0, X19
	095 Move X20, [X31+32]
	096 Move X19, [X31+40]
	097 Move X22, [X31+16]
	098 Move X21, [X31+24]
	099 Move X1, X31
	100 Move X30, [X31+48]
	101 Call MobController.set__timerAttackInterval, X0, V0
	102 Return 
	103 Call 0x1C17F20
	104 Call 0x1C17F28

Method: System.Void UpdateChasing()

Disassembly:
	0x01DE16F4 MOV X19, X0
	0x01DE16F8 BL 0x1DEB39C
	0x01DE16FC MOV X0, X19
	0x01DE1700 BL 0x1DDE3F0
	0x01DE1704 STR W0, [X19 + 0x1A4]
	0x01DE1708 MOV X0, X19
	0x01DE170C BL 0x1DDE4B0
	0x01DE1710 MOV X0, X19
	0x01DE1714 STR S0, [X19 + 0x1B0]
	0x01DE1718 BL 0x1DDE570
	0x01DE171C STR S0, [X19 + 0x1B4]
	0x01DE1720 LDP X30, X19, [X31], #0x10
	0x01DE1724 RET
	0x01DE1728 STR X30, [X31 - 0x20]!
	0x01DE172C STP X20, X19, [X31 + 0x10]
	0x01DE1730 ADRP X20, 0x25F7000
	0x01DE1734 LDRB W8, [X20 + 0xC85]
	0x01DE1738 MOV X19, X0
	0x01DE173C TBNZ X8, 0x0, 0x1DE1754
	0x01DE1740 ADRP X0, 0x2316000
	0x01DE1744 LDR X0, [X0 + 0x878]
	0x01DE1748 BL 0x1C16CF4
	0x01DE174C MOVZ W8, 0x1
	0x01DE1750 STRB W8, [X20 + 0xC85]
	0x01DE1754 CBZ X19, 0x1DE17AC
	0x01DE1758 ADRP X9, 0x2316000
	0x01DE175C LDR X9, [X9 + 0x878]
	0x01DE1760 MOVZ W8, 0x1
	0x01DE1764 STRB W8, [X19 + 0x58]
	0x01DE1768 LDR X8, [X19]
	0x01DE176C LDR X1, [X9]
	0x01DE1770 LDRB W10, [X8 + 0x130]
	0x01DE1774 LDRB W9, [X1 + 0x130]
	0x01DE1778 CMP W10, W9
	0x01DE177C B.CC 0x1DE17A4
	0x01DE1780 LDR X8, [X8 + 0xC8]
	0x01DE1784 ADD X8, X8, X9, 0x3, LSL
	0x01DE1788 LDUR X8, [X8 - 0x8]
	0x01DE178C CMP X8, X1
	0x01DE1790 B.NE 0x1DE17A4
	0x01DE1794 MOV X0, X19
	0x01DE1798 LDP X20, X19, [X31 + 0x10]
	0x01DE179C LDR X30, [X31], #0x20
	0x01DE17A0 B 0x1DE1298
	0x01DE17A4 MOV X0, X19
	0x01DE17A8 BL 0x1C171E0
	0x01DE17AC BL 0x1C16F20
	0x01DE17B0 STP X30, X19, [X31 - 0x10]!
	0x01DE17B4 MOV X1, X31
	0x01DE17B8 MOV X19, X0
	0x01DE17BC BL 0x1DF9EF4
	0x01DE17C0 LDR X0, [X19 + 0xF0]
	0x01DE17C4 CBZ X0, 0x1DE17D4
	0x01DE17C8 MOV X1, X31
	0x01DE17CC LDP X30, X19, [X31], #0x10
	0x01DE17D0 B 0x3BFCAC0
	0x01DE17D4 BL 0x1C16F20
	0x01DE17D8 STP X30, X19, [X31 - 0x10]!
	0x01DE17DC MOV X1, X31
	0x01DE17E0 MOV X19, X0
	0x01DE17E4 BL 0x1DF9724
	0x01DE17E8 LDR X0, [X19 + 0x100]
	0x01DE17EC CBZ X0, 0x1DE184C
	0x01DE17F0 MOV X1, X31
	0x01DE17F4 BL 0x3C3EB78
	0x01DE17F8 LDR X0, [X19 + 0x100]
	0x01DE17FC STR S0, [X19 + 0x118]
	0x01DE1800 STR S1, [X19 + 0x11C]
	0x01DE1804 STR S2, [X19 + 0x120]
	0x01DE1808 CBZ X0, 0x1DE184C
	0x01DE180C MOV X1, X31
	0x01DE1810 BL 0x3C3F830
	0x01DE1814 MOV X0, X31
	0x01DE1818 BL 0x3C2A60C
	0x01DE181C ADRP X8, 0xFFFFFFFFFED09000
	0x01DE1820 LDR V3, [X8 + 0x448]
	0x01DE1824 MOV X0, X31
	0x01DE1828 FMUL S0, S0, S3
	0x01DE182C FMUL S1, S1, S3
	0x01DE1830 FMUL S2, S2, S3
	0x01DE1834 BL 0x3C2AB94
	0x01DE1838 STR S0, [X19 + 0x138]
	0x01DE183C STR S1, [X19 + 0x13C]
	0x01DE1840 STR S2, [X19 + 0x140]
	0x01DE1844 LDP X30, X19, [X31], #0x10
	0x01DE1848 RET
	0x01DE184C BL 0x1C16F20
	0x01DE1850 STP X30, X19, [X31 - 0x10]!
	0x01DE1854 MOV X1, X31
	0x01DE1858 MOV X19, X0
	0x01DE185C BL 0x1DE76B0
	0x01DE1860 LDR X0, [X19 + 0xD8]
	0x01DE1864 CBZ X0, 0x1DE1888
	0x01DE1868 LDR X19, [X19 + 0xE0]
	0x01DE186C MOV X1, X31
	0x01DE1870 BL 0x3C12FF8
	0x01DE1874 CBZ X19, 0x1DE1888
	0x01DE1878 AND W8, W0, 0x1
	0x01DE187C STRB W8, [X19 + 0x20]
	0x01DE1880 LDP X30, X19, [X31], #0x10
	0x01DE1884 RET
	0x01DE1888 BL 0x1C16F20
	0x01DE188C STR D14, [X31 - 0x50]!
	0x01DE1890 STP D13, D12, [X31 + 0x8]
	0x01DE1894 STP D11, D10, [X31 + 0x18]
	0x01DE1898 STP D9, D8, [X31 + 0x28]
	0x01DE189C STR X30, [X31 + 0x38]
	0x01DE18A0 STP X20, X19, [X31 + 0x40]
	0x01DE18A4 MOV X19, X0
	0x01DE18A8 MOV X0, X31
	0x01DE18AC BL 0x3C3C6C4
	0x01DE18B0 LDR X20, [X19 + 0x100]
	0x01DE18B4 CBZ X20, 0x1DE19C0
	0x01DE18B8 LDR V1, [X19 + 0x108]
	0x01DE18BC ADRP X8, 0xFFFFFFFFFED08000
	0x01DE18C0 LDR V3, [X19 + 0x114]
	0x01DE18C4 LDR V13, [X8 + 0xF4C]
	0x01DE18C8 LDR V2, [X19 + 0x120]
	0x01DE18CC LDR V10, [X19 + 0x11C]
	0x01DE18D0 FMUL S8, S0, S1
	0x01DE18D4 FADD S14, S8, S8
	0x01DE18D8 FMUL S0, S3, S13
	0x01DE18DC FMOV S12, W31
	0x01DE18E0 FADD S0, S14, S0
	0x01DE18E4 FADD S9, S2, S12
	0x01DE18E8 BL 0x3EB1BD0
	0x01DE18EC LDR V1, [X19 + 0x110]
	0x01DE18F0 LDR V11, [X19 + 0x118]
	0x01DE18F4 FMUL S0, S1, S0
	0x01DE18F8 FADD S10, S10, S0
	0x01DE18FC MOV V0.16B, V8.16B
	0x01DE1900 BL 0x3EB1BD0
	0x01DE1904 LDR V1, [X19 + 0x10C]
	0x01DE1908 LDR V2, [X19 + 0x130]
	0x01DE190C FMUL S0, S0, S1
	0x01DE1910 FMUL S1, S2, S13
	0x01DE1914 FADD S11, S11, S0
	0x01DE1918 FADD S0, S8, S1
	0x01DE191C BL 0x3EB1BD0
	0x01DE1920 LDR V1, [X19 + 0x128]
	0x01DE1924 LDR V2, [X19 + 0x12C]
	0x01DE1928 FMUL S8, S1, S0
	0x01DE192C FMUL S0, S2, S13
	0x01DE1930 FADD S0, S14, S0
	0x01DE1934 BL 0x3EB1BD0
	0x01DE1938 LDR V1, [X19 + 0x124]
	0x01DE193C MOV X0, X20
	0x01DE1940 MOV V2.16B, V9.16B
	0x01DE1944 MOV X1, X31
	0x01DE1948 FMUL S13, S1, S0
	0x01DE194C MOV V0.16B, V11.16B
	0x01DE1950 MOV V1.16B, V10.16B
	0x01DE1954 BL 0x3C3EC04
	0x01DE1958 LDR V2, [X19 + 0x134]
	0x01DE195C LDR V0, [X19 + 0x138]
	0x01DE1960 LDR V1, [X19 + 0x13C]
	0x01DE1964 LDR V3, [X19 + 0x140]
	0x01DE1968 ADRP X8, 0xFFFFFFFFFED09000
	0x01DE196C LDR V4, [X8 + 0x104]
	0x01DE1970 LDR X20, [X19 + 0x100]
	0x01DE1974 FADD S2, S13, S2
	0x01DE1978 FADD S1, S8, S1
	0x01DE197C FADD S3, S3, S12
	0x01DE1980 FADD S0, S0, S2
	0x01DE1984 FMUL S1, S1, S4
	0x01DE1988 FMUL S0, S0, S4
	0x01DE198C FMUL S2, S3, S4
	0x01DE1990 MOV X0, X31
	0x01DE1994 BL 0x3C2A574
	0x01DE1998 CBZ X20, 0x1DE19C0
	0x01DE199C MOV X0, X20
	0x01DE19A0 LDP X20, X19, [X31 + 0x40]
	0x01DE19A4 LDR X30, [X31 + 0x38]
	0x01DE19A8 LDP D9, D8, [X31 + 0x28]
	0x01DE19AC LDP D11, D10, [X31 + 0x18]
	0x01DE19B0 LDP D13, D12, [X31 + 0x8]
	0x01DE19B4 MOV X1, X31
	0x01DE19B8 LDR V14, [X31], #0x50
	0x01DE19BC B 0x3C3F8B8
	0x01DE19C0 BL 0x1C16F20
	0x01DE19C4 STR X30, [X31 - 0x30]!
	0x01DE19C8 STP X22, X21, [X31 + 0x10]
	0x01DE19CC STP X20, X19, [X31 + 0x20]
	0x01DE19D0 ADRP X22, 0x25F7000
	0x01DE19D4 ADRP X20, 0x2317000
	0x01DE19D8 LDRB W8, [X22 + 0xC87]
	0x01DE19DC LDR X20, [X20 + 0xC88]
	0x01DE19E0 MOV X19, X0
	0x01DE19E4 ADD X21, X0, 0x10C
	0x01DE19E8 TBNZ X8, 0x0, 0x1DE1A00
	0x01DE19EC ADRP X0, 0x2317000
	0x01DE19F0 LDR X0, [X0 + 0xC88]
	0x01DE19F4 BL 0x1C16CF4
	0x01DE19F8 MOVZ W8, 0x1
	0x01DE19FC STRB W8, [X22 + 0xC87]
	0x01DE1A00 ADRP X8, 0xFFFFFFFFFED0A000
	0x01DE1A04 LDR V0, [X8 + 0xFF]
	0x01DE1A08 ADRP X8, 0xFFFFFFFFFED0B000
	0x01DE1A0C STUR V0, [X19 + 0xAC]
	0x01DE1A10 LDR V0, [X8 + 0x3A]
	0x01DE1A14 MOVZ W8, 0x3FC00000
	0x01DE1A18 STR W8, [X19 + 0x108]
	0x01DE1A1C MOVZ W8, 0xCCCD
	0x01DE1A20 MOVK W8, 0x3E4C0000
	0x01DE1A24 STUR V0, [X19 + 0xBC]
	0x01DE1A28 UNIMPLEMENTED
	0x01DE1A2C ADRP X8, 0xFFFFFFFFFED0B000
	0x01DE1A30 STR D0, [X21]
	0x01DE1A34 LDR V0, [X8 + 0xBD]
	0x01DE1A38 MOVZ W8, 0x3F400000
	0x01DE1A3C STR W8, [X19 + 0x114]
	0x01DE1A40 MOVZ W8, 0x41400000
	0x01DE1A44 STUR V0, [X21 + 0x18]
	0x01DE1A48 STR W8, [X19 + 0x134]
	0x01DE1A4C LDR X0, [X20]
	0x01DE1A50 LDR W8, [X0 + 0xE0]
	0x01DE1A54 CBNZ W8, 0x1DE1A5C
	0x01DE1A58 BL 0x1C16DFC
	0x01DE1A5C MOV X0, X19
	0x01DE1A60 LDP X20, X19, [X31 + 0x20]
	0x01DE1A64 LDP X22, X21, [X31 + 0x10]
	0x01DE1A68 MOV X1, X31
	0x01DE1A6C LDR X30, [X31], #0x30
	0x01DE1A70 B 0x1DE7994
	0x01DE1A74 STP X30, X21, [X31 - 0x20]!
	0x01DE1A78 STP X20, X19, [X31 + 0x10]
	0x01DE1A7C ADRP X20, 0x25F7000
	0x01DE1A80 ADRP X21, 0x2315000
	0x01DE1A84 ADRP X19, 0x2317000
	0x01DE1A88 LDRB W8, [X20 + 0xC88]
	0x01DE1A8C LDR X21, [X21 + 0xC88]
	0x01DE1A90 LDR X19, [X19 + 0xC10]
	0x01DE1A94 TBNZ X8, 0x0, 0x1DE1AB8
	0x01DE1A98 ADRP X0, 0x2317000
	0x01DE1A9C LDR X0, [X0 + 0xC10]
	0x01DE1AA0 BL 0x1C16CF4
	0x01DE1AA4 ADRP X0, 0x2315000
	0x01DE1AA8 LDR X0, [X0 + 0xC88]
	0x01DE1AAC BL 0x1C16CF4
	0x01DE1AB0 MOVZ W8, 0x1
	0x01DE1AB4 STRB W8, [X20 + 0xC88]
	0x01DE1AB8 LDR X0, [X21]
	0x01DE1ABC MOV X1, X31
	0x01DE1AC0 BL 0x3C124EC
	0x01DE1AC4 LDR X8, [X19]
	0x01DE1AC8 LDP X20, X19, [X31 + 0x10]
	0x01DE1ACC LDR X8, [X8 + 0xB8]
	0x01DE1AD0 STR W0, [X8]
	0x01DE1AD4 LDP X30, X21, [X31], #0x20
	0x01DE1AD8 RET
	0x01DE1ADC STP X30, X19, [X31 - 0x10]!
	0x01DE1AE0 LDR X8, [X0 + 0x50]
	0x01DE1AE4 CBZ X8, 0x1DE1AF4
	0x01DE1AE8 LDR W0, [X8 + 0x3C]
	0x01DE1AEC LDP X30, X19, [X31], #0x10
	0x01DE1AF0 RET
	0x01DE1AF4 ADRP X0, 0x2312000
	0x01DE1AF8 LDR X0, [X0 + 0x5B0]
	0x01DE1AFC BL 0x1C16D08
	0x01DE1B00 BL 0x1C16F10
	0x01DE1B04 MOV X19, X0
	0x01DE1B08 ADRP X0, 0x2317000
	0x01DE1B0C LDR X0, [X0 + 0xC90]
	0x01DE1B10 BL 0x1C16D08
	0x01DE1B14 MOV X1, X0
	0x01DE1B18 MOV X0, X19
	0x01DE1B1C MOV X2, X31
	0x01DE1B20 BL 0x337DF1C
	0x01DE1B24 ADRP X0, 0x2317000
	0x01DE1B28 LDR X0, [X0 + 0xC98]
	0x01DE1B2C BL 0x1C16D08
	0x01DE1B30 MOV X1, X0
	0x01DE1B34 MOV X0, X19
	0x01DE1B38 BL 0x1C16DEC
	0x01DE1B3C STP X30, X19, [X31 - 0x10]!
	0x01DE1B40 LDR X8, [X0 + 0x50]
	0x01DE1B44 CBZ X8, 0x1DE1B54
	0x01DE1B48 STR W1, [X8 + 0x3C]
	0x01DE1B4C LDP X30, X19, [X31], #0x10
	0x01DE1B50 RET
	0x01DE1B54 ADRP X0, 0x2312000
	0x01DE1B58 LDR X0, [X0 + 0x5B0]
	0x01DE1B5C BL 0x1C16D08
	0x01DE1B60 BL 0x1C16F10
	0x01DE1B64 MOV X19, X0
	0x01DE1B68 ADRP X0, 0x2317000
	0x01DE1B6C LDR X0, [X0 + 0xC90]
	0x01DE1B70 BL 0x1C16D08
	0x01DE1B74 MOV X1, X0
	0x01DE1B78 MOV X0, X19
	0x01DE1B7C MOV X2, X31
	0x01DE1B80 BL 0x337DF1C
	0x01DE1B84 ADRP X0, 0x2317000
	0x01DE1B88 LDR X0, [X0 + 0xCA0]
	0x01DE1B8C BL 0x1C16D08
	0x01DE1B90 MOV X1, X0
	0x01DE1B94 MOV X0, X19
	0x01DE1B98 BL 0x1C16DEC
	0x01DE1B9C STR X30, [X31 - 0x10]!
	0x01DE1BA0 LDR X8, [X0 + 0xC0]
	0x01DE1BA4 CBZ X8, 0x1DE1BB4
	0x01DE1BA8 LDR V0, [X8 + 0x28]
	0x01DE1BAC LDR X30, [X31], #0x10
	0x01DE1BB0 RET
	0x01DE1BB4 BL 0x1C16F20
	0x01DE1BB8 SUB X31, X31, 0x70
	0x01DE1BBC STP D9, D8, [X31 + 0x50]
	0x01DE1BC0 STP X30, X19, [X31 + 0x60]
	0x01DE1BC4 MOV X19, X0
	0x01DE1BC8 LDR X0, [X0 + 0xD0]
	0x01DE1BCC CBZ X0, 0x1DE1CB0
	0x01DE1BD0 MOV X1, X31
	0x01DE1BD4 BL 0x3C3F58C
	0x01DE1BD8 LDR X0, [X19 + 0xD0]
	0x01DE1BDC STR D0, [X31 + 0x40]
	0x01DE1BE0 STR D1, [X31 + 0x30]
	0x01DE1BE4 CBZ X0, 0x1DE1CB0
	0x01DE1BE8 MOV X1, X31
	0x01DE1BEC MOV V8.16B, V2.16B
	0x01DE1BF0 BL 0x3C3FA04
	0x01DE1BF4 LDR X8, [X19 + 0xC0]
	0x01DE1BF8 CBZ X8, 0x1DE1CB0
	0x01DE1BFC ADRP X19, 0x25F7000
	0x01DE1C00 LDRB W9, [X19 + 0x786]
	0x01DE1C04 LDR V6, [X8 + 0x4C]
	0x01DE1C08 MOV V9.16B, V2.16B
	0x01DE1C0C CBNZ W9, 0x1DE1C34
	0x01DE1C10 ADRP X0, 0x2312000
	0x01DE1C14 LDR X0, [X0 + 0x5A0]
	0x01DE1C18 STP V6, V0, [X31 + 0x10]
	0x01DE1C1C STR V1, [X31]
	0x01DE1C20 BL 0x1C16CF4
	0x01DE1C24 LDP V1, V6, [X31]
	0x01DE1C28 LDR V0, [X31 + 0x2]
	0x01DE1C2C MOVZ W8, 0x1
	0x01DE1C30 STRB W8, [X19 + 0x786]
	0x01DE1C34 MOVZ W8, 0x999A
	0x01DE1C38 MOVK W8, 0xBE990000
	0x01DE1C3C MOV V0.S[1], V1.S[0]
	0x01DE1C40 UNIMPLEMENTED
	0x01DE1C44 ADRP X8, 0xFFFFFFFFFED09000
	0x01DE1C48 LDR V2, [X8 + 0x44C]
	0x01DE1C4C ADRP X8, 0x2312000
	0x01DE1C50 LDR X8, [X8 + 0x5A0]
	0x01DE1C54 LDP V3, V7, [X31 + 0x30]
	0x01DE1C58 FMUL S4, S9, S6
	0x01DE1C5C LDP X30, X19, [X31 + 0x60]
	0x01DE1C60 LDR X8, [X8]
	0x01DE1C64 MOV V7.S[1], V3.S[0]
	0x01DE1C68 FMOV S3, 0.5
	0x01DE1C6C FMUL S5, S4, S3
	0x01DE1C70 LDR X8, [X8 + 0xB8]
	0x00000000 INVALID
	0x01DE1C78 MOVI V3.2S, 0x3F, 0x18
	0x01DE1C7C FADD S5, S8, S5
	0x01DE1C80 LDR V0, [X8 + 0x18]
	0x01DE1C84 LDR V6, [X8 + 0x20]
	0x00000000 INVALID
	0x01DE1C8C LDP D9, D8, [X31 + 0x50]
	0x01DE1C90 FADD V3.2S, V7.2S, V3.2S
	0x00000000 INVALID
	0x01DE1C98 FMUL S1, S6, S2
	0x01DE1C9C FADD V0.2S, V3.2S, V0.2S
	0x01DE1CA0 FSUB S2, S5, S1
	0x01DE1CA4 MOV S1, V0.S[1]
	0x01DE1CA8 ADD X31, X31, 0x70
	0x01DE1CAC RET
	0x01DE1CB0 BL 0x1C16F20
	0x01DE1CB4 STR X30, [X31 - 0x10]!
	0x01DE1CB8 LDR X8, [X0 + 0xC0]
	0x01DE1CBC CBZ X8, 0x1DE1CD4
	0x01DE1CC0 LDR V0, [X8 + 0x4C]
	0x01DE1CC4 FMOV S1, 0.5
	0x01DE1CC8 FMUL S0, S0, S1
	0x01DE1CCC LDR X30, [X31], #0x10
	0x01DE1CD0 RET
	0x01DE1CD4 BL 0x1C16F20
	0x01DE1CD8 STP X30, X19, [X31 - 0x10]!
	0x01DE1CDC MOV X19, X0
	0x01DE1CE0 BL 0x1DE1ADC
	0x01DE1CE4 SUB W8, W0, 0x1
	0x01DE1CE8 CMP W8, 0x4
	0x01DE1CEC B.HI 0x1DE1EC4
	0x01DE1CF0 ADRP X9, 0xFFFFFFFFFED4C000
	0x01DE1CF4 ADD X9, X9, 0x94F
	0x01DE1CF8 ADR X10, 0x10
	0x01DE1CFC LDRB W11, [X9, X8, LSL]
	0x01DE1D00 ADD X10, X10, X11, 0x2, LSL
	0x01DE1D04 BR X10
	0x01DE1D08 LDR X8, [X19 + 0xC0]
	0x01DE1D0C CBZ X8, 0x1DE1ECC
	0x01DE1D10 LDR X8, [X8 + 0x30]
	0x01DE1D14 CBZ X8, 0x1DE1ECC
	0x01DE1D18 LDR W9, [X8 + 0x18]
	0x01DE1D1C CBZ W9, 0x1DE1ED0
	0x01DE1D20 LDR X0, [X19 + 0xC8]
	0x01DE1D24 CBZ X0, 0x1DE1ECC
	0x01DE1D28 LDR X9, [X0]
	0x01DE1D2C LDR V0, [X8 + 0x20]
	0x01DE1D30 ADRP X8, 0xFFFFFFFFFED09000
	0x01DE1D34 LDR V1, [X8 + 0xC0]
	0x01DE1D38 LDP X8, X1, [X9 + 0x1E8]
	0x01DE1D3C FDIV S0, S0, S1
	0x01DE1D40 BLR X8
	0x01DE1D44 LDR X8, [X19 + 0x1B0]
	0x01DE1D48 CBZ X8, 0x1DE1ECC
	0x01DE1D4C MOVZ W10, 0xCCCD
	0x01DE1D50 MOVZ W9, 0x1
	0x01DE1D54 MOVK W10, 0x3ECC0000
	0x01DE1D58 STRB W9, [X8 + 0xA9]
	0x01DE1D5C STR W10, [X8 + 0xAC]
	0x01DE1D60 B 0x1DE1E58
	0x01DE1D64 LDR X8, [X19 + 0xC0]
	0x01DE1D68 CBZ X8, 0x1DE1ECC
	0x01DE1D6C LDR X8, [X8 + 0x38]
	0x01DE1D70 CBZ X8, 0x1DE1ECC
	0x01DE1D74 LDR W9, [X8 + 0x18]
	0x01DE1D78 CBZ W9, 0x1DE1ED0
	0x01DE1D7C LDR X0, [X19 + 0xC8]
	0x01DE1D80 CBZ X0, 0x1DE1ECC
	0x01DE1D84 LDR X9, [X0]
	0x01DE1D88 LDR V0, [X8 + 0x20]
	0x01DE1D8C ADRP X8, 0xFFFFFFFFFED09000
	0x01DE1D90 LDR V1, [X8 + 0xC0]
	0x01DE1D94 LDP X8, X1, [X9 + 0x1F8]
	0x01DE1D98 FDIV S0, S0, S1
	0x01DE1D9C BLR X8
	0x01DE1DA0 LDR X0, [X19 + 0x1B0]
	0x01DE1DA4 CBZ X0, 0x1DE1ECC
	0x01DE1DA8 ADRP X8, 0xFFFFFFFFFED09000
	0x01DE1DAC LDR V0, [X8 + 0x35C]
	0x01DE1DB0 MOV W1, W31
	0x01DE1DB4 BL 0x1DE1ED4
	0x01DE1DB8 LDR X8, [X19 + 0x1B0]
	0x01DE1DBC CBNZ X8, 0x1DE1E18
	0x01DE1DC0 B 0x1DE1ECC
	0x01DE1DC4 LDR X8, [X19 + 0xC0]
	0x01DE1DC8 CBZ X8, 0x1DE1ECC
	0x01DE1DCC LDR X8, [X8 + 0x38]
	0x01DE1DD0 CBZ X8, 0x1DE1ECC
	0x01DE1DD4 LDR W9, [X8 + 0x18]
	0x01DE1DD8 CBZ W9, 0x1DE1ED0
	0x01DE1DDC LDR X0, [X19 + 0xC8]
	0x01DE1DE0 CBZ X0, 0x1DE1ECC
	0x01DE1DE4 LDR X9, [X0]
	0x01DE1DE8 LDR V0, [X8 + 0x20]
	0x01DE1DEC ADRP X8, 0xFFFFFFFFFED09000
	0x01DE1DF0 LDR V1, [X8 + 0xC0]
	0x01DE1DF4 LDP X8, X1, [X9 + 0x1F8]
	0x01DE1DF8 FDIV S0, S0, S1
	0x01DE1DFC BLR X8
	0x01DE1E00 LDR X8, [X19 + 0x1B0]
	0x01DE1E04 CBZ X8, 0x1DE1ECC
	0x01DE1E08 MOVZ W9, 0x1
	0x01DE1E0C MOVZ W10, 0x3FC00000
	0x01DE1E10 STRB W9, [X8 + 0xA9]
	0x01DE1E14 STR W10, [X8 + 0xAC]
	0x01DE1E18 FMOV S0, 1
	0x01DE1E1C B 0x1DE1EC0
	0x01DE1E20 LDR X0, [X19 + 0xC8]
	0x01DE1E24 CBZ X0, 0x1DE1ECC
	0x01DE1E28 LDR X8, [X0]
	0x01DE1E2C LDR X9, [X8 + 0x218]
	0x01DE1E30 LDR X1, [X8 + 0x220]
	0x01DE1E34 BLR X9
	0x01DE1E38 LDR X0, [X19 + 0x1B0]
	0x01DE1E3C CBZ X0, 0x1DE1ECC
	0x01DE1E40 ADRP X8, 0xFFFFFFFFFED09000
	0x01DE1E44 LDR V0, [X8 + 0x35C]
	0x01DE1E48 MOV W1, W31
	0x01DE1E4C BL 0x1DE1ED4
	0x01DE1E50 LDR X8, [X19 + 0x1B0]
	0x01DE1E54 CBZ X8, 0x1DE1ECC
	0x01DE1E58 FMOV S0, 0.5
	0x01DE1E5C B 0x1DE1EC0
	0x01DE1E60 LDR X8, [X19 + 0xC0]
	0x01DE1E64 CBZ X8, 0x1DE1ECC
	0x01DE1E68 LDR X8, [X8 + 0x30]
	0x01DE1E6C CBZ X8, 0x1DE1ECC
	0x01DE1E70 LDR W9, [X8 + 0x18]
	0x01DE1E74 CMP W9, 0x1
	0x01DE1E78 B.LS 0x1DE1ED0
	0x01DE1E7C LDR X0, [X19 + 0xC8]
	0x01DE1E80 CBZ X0, 0x1DE1ECC
	0x01DE1E84 LDR X9, [X0]
	0x01DE1E88 LDR V0, [X8 + 0x24]
	0x01DE1E8C ADRP X8, 0xFFFFFFFFFED09000
	0x01DE1E90 LDR V1, [X8 + 0xC0]
	0x01DE1E94 LDP X8, X1, [X9 + 0x1E8]
	0x01DE1E98 FDIV S0, S0, S1
	0x01DE1E9C BLR X8
	0x01DE1EA0 LDR X8, [X19 + 0x1B0]
	0x01DE1EA4 CBZ X8, 0x1DE1ECC
	0x01DE1EA8 ADRP X10, 0xFFFFFFFFFED09000
	0x01DE1EAC LDR V0, [X10 + 0x90]
	0x01DE1EB0 MOVZ W9, 0x1
	0x01DE1EB4 STRB W9, [X8 + 0xA9]
	0x01DE1EB8 MOVZ W9, 0x3FC00000
	0x01DE1EBC STR W9, [X8 + 0xAC]
	0x01DE1EC0 STR S0, [X8 + 0x80]
	0x01DE1EC4 LDP X30, X19, [X31], #0x10
	0x01DE1EC8 RET
	0x01DE1ECC BL 0x1C16F20
	0x01DE1ED0 BL 0x1C16F28
	0x01DE1ED4 STR X30, [X31 - 0x10]!
	0x01DE1ED8 AND W8, W1, 0x1
	0x01DE1EDC STRB W8, [X0 + 0xA9]
	0x01DE1EE0 STR S0, [X0 + 0xAC]
	0x01DE1EE4 TBZ X1, 0x0, 0x1DE1EF0
	0x01DE1EE8 LDR X30, [X31], #0x10
	0x01DE1EEC RET
	0x01DE1EF0 LDR X8, [X0 + 0x40]
	0x01DE1EF4 CBZ X8, 0x1DE1F10
	0x01DE1EF8 LDP S1, S2, [X0 + 0xB4]
	0x01DE1EFC LDR V0, [X0 + 0xB0]
	0x01DE1F00 MOV X0, X8
	0x01DE1F04 MOV X1, X31
	0x01DE1F08 LDR X30, [X31], #0x10
	0x01DE1F0C B 0x3C3EC04
	0x01DE1F10 BL 0x1C16F20
	0x01DE1F14 STP X30, X19, [X31 - 0x10]!
	0x01DE1F18 MOV X1, X31
	0x01DE1F1C MOV X19, X0
	0x01DE1F20 BL 0x1DE8598
	0x01DE1F24 LDR X0, [X19 + 0xE8]
	0x01DE1F28 CBZ X0, 0x1DE1F74
	0x01DE1F2C MOVZ W1, 0x1
	0x01DE1F30 MOV X2, X31
	0x01DE1F34 BL 0x3BE1A80
	0x01DE1F38 LDR X0, [X19 + 0xE8]
	0x01DE1F3C CBZ X0, 0x1DE1F74
	0x01DE1F40 MOVZ W1, 0x1
	0x01DE1F44 MOV X2, X31
	0x01DE1F48 BL 0x3BE1AC4
	0x01DE1F4C LDR X0, [X19 + 0x40]
	0x01DE1F50 CBZ X0, 0x1DE1F74
	0x01DE1F54 MOV X1, X31
	0x01DE1F58 BL 0x1E93668
	0x01DE1F5C TBZ X0, 0x0, 0x1DE1F68
	0x01DE1F60 MOV X0, X19
	0x01DE1F64 BL 0x1DE1F78
	0x01DE1F68 MOV X0, X19
	0x01DE1F6C LDP X30, X19, [X31], #0x10
	0x01DE1F70 B 0x1DE1CD8
	0x01DE1F74 BL 0x1C16F20
	0x01DE1F78 STP X30, X19, [X31 - 0x10]!
	0x01DE1F7C MOVZ W1, 0x1
	0x01DE1F80 MOV X19, X0
	0x01DE1F84 BL 0x1DE1B3C
	0x01DE1F88 LDR X9, [X19 + 0xC0]
	0x01DE1F8C CBZ X9, 0x1DE2000
	0x01DE1F90 LDR X8, [X9 + 0x30]
	0x01DE1F94 CBZ X8, 0x1DE2000
	0x01DE1F98 LDR W10, [X8 + 0x18]
	0x01DE1F9C CBZ W10, 0x1DE2004
	0x01DE1FA0 LDR X10, [X9 + 0x58]
	0x01DE1FA4 CBZ X10, 0x1DE2000
	0x01DE1FA8 LDR W11, [X10 + 0x18]
	0x01DE1FAC CBZ W11, 0x1DE2004
	0x01DE1FB0 LDR X9, [X9 + 0x60]
	0x01DE1FB4 CBZ X9, 0x1DE2000
	0x01DE1FB8 LDR W11, [X9 + 0x18]
	0x01DE1FBC CBZ W11, 0x1DE2004
	0x01DE1FC0 LDR X11, [X19]
	0x01DE1FC4 LDR V0, [X8 + 0x20]
	0x01DE1FC8 LDR V1, [X10 + 0x20]
	0x01DE1FCC LDR V2, [X9 + 0x20]
	0x01DE1FD0 LDR X8, [X11 + 0x2C8]
	0x01DE1FD4 LDR X2, [X11 + 0x2D0]
	0x01DE1FD8 MOV X0, X19
	0x01DE1FDC MOV W1, W31
	0x01DE1FE0 BLR X8
	0x01DE1FE4 LDR X8, [X19]
	0x01DE1FE8 MOVZ W1, 0x1
	0x01DE1FEC MOV X0, X19
	0x01DE1FF0 LDR X3, [X8 + 0x368]
	0x01DE1FF4 LDR X2, [X8 + 0x370]
	0x01DE1FF8 LDP X30, X19, [X31], #0x10
	0x01DE1FFC BR X3
	0x01DE2000 BL 0x1C16F20
	0x01DE2004 BL 0x1C16F28
	0x01DE2008 STP X30, X19, [X31 - 0x10]!
	0x01DE200C MOV X1, X31
	0x01DE2010 MOV X19, X0
	0x01DE2014 BL 0x1DE89FC
	0x01DE2018 LDR X0, [X19 + 0x40]
	0x01DE201C CBZ X0, 0x1DE2048
	0x01DE2020 MOV X1, X31
	0x01DE2024 BL 0x1E93668
	0x01DE2028 TBZ X0, 0x0, 0x1DE2040
	0x01DE202C MOV X0, X19
	0x01DE2030 BL 0x1DE204C
	0x01DE2034 MOV X0, X19
	0x01DE2038 LDP X30, X19, [X31], #0x10
	0x01DE203C B 0x1DE1F78
	0x01DE2040 LDP X30, X19, [X31], #0x10
	0x01DE2044 RET
	0x01DE2048 BL 0x1C16F20
	0x01DE204C STP X30, X19, [X31 - 0x10]!
	0x01DE2050 LDR X8, [X0]
	0x01DE2054 MOV X1, X31
	0x01DE2058 MOV X19, X0
	0x01DE205C LDR X9, [X8 + 0x3B8]
	0x01DE2060 LDR X2, [X8 + 0x3C0]
	0x01DE2064 BLR X9
	0x01DE2068 FMOV S0, W31
	0x01DE206C MOV X0, X19
	0x01DE2070 MOV X1, X31
	0x01DE2074 STR W31, [X19 + 0x1A8]
	0x01DE2078 BL 0x1DEA540
	0x01DE207C FMOV S0, W31
	0x01DE2080 MOV X0, X19
	0x01DE2084 MOV X1, X31
	0x01DE2088 BL 0x1DF38DC
	0x01DE208C STR W31, [X19 + 0x1AC]
	0x01DE2090 LDP X30, X19, [X31], #0x10
	0x01DE2094 RET
	0x01DE2098 STP X30, X19, [X31 - 0x10]!
	0x01DE209C MOV X1, X31
	0x01DE20A0 MOV X19, X0
	0x01DE20A4 BL 0x1DE8BF8
	0x01DE20A8 LDR X0, [X19 + 0x40]
	0x01DE20AC CBZ X0, 0x1DE20D4
	0x01DE20B0 MOV X1, X31
	0x01DE20B4 BL 0x1E93668
	0x01DE20B8 TBZ X0, 0x0, 0x1DE20CC
	0x01DE20BC MOVZ W1, 0x6
	0x01DE20C0 MOV X0, X19
	0x01DE20C4 LDP X30, X19, [X31], #0x10
	0x01DE20C8 B 0x1DE1B3C
	0x01DE20CC LDP X30, X19, [X31], #0x10
	0x01DE20D0 RET
	0x01DE20D4 BL 0x1C16F20
	0x01DE20D8 SUB X31, X31, 0x40
	0x01DE20DC STR X30, [X31 + 0x20]
	0x01DE20E0 STP X20, X19, [X31 + 0x30]
	0x01DE20E4 ADRP X20, 0x25F6000
	0x01DE20E8 LDRB W8, [X20 + 0xC89]
	0x01DE20EC MOV X19, X0
	0x01DE20F0 TBNZ X8, 0x0, 0x1DE2108
	0x01DE20F4 ADRP X0, 0x2316000
	0x01DE20F8 LDR X0, [X0 + 0xCA8]
	0x01DE20FC BL 0x1C16CF4
	0x01DE2100 MOVZ W8, 0x1
	0x01DE2104 STRB W8, [X20 + 0xC89]
	0x01DE2108 MOV X0, X19
	0x01DE210C MOV X1, X31
	0x01DE2110 BL 0x1DE9038
	0x01DE2114 MOV X0, X19
	0x01DE2118 BL 0x1DE1ADC
	0x01DE211C SUB W8, W0, 0x1
	0x01DE2120 CMP W8, 0x4
	0x01DE2124 B.HI 0x1DE2188
	0x01DE2128 ADRP X9, 0xFFFFFFFFFED4B000
	0x01DE212C ADD X9, X9, 0x954
	0x01DE2130 ADR X10, 0x10
	0x01DE2134 LDRB W11, [X9, X8, LSL]
	0x01DE2138 ADD X10, X10, X11, 0x2, LSL
	0x01DE213C BR X10
	0x01DE2140 LDR X8, [X19]
	0x01DE2144 LDR X9, [X8 + 0x388]
	0x01DE2148 LDR X1, [X8 + 0x390]
	0x01DE214C B 0x1DE2168
	0x01DE2150 MOV X0, X19
	0x01DE2154 BL 0x1DE21EC
	0x01DE2158 B 0x1DE2188
	0x01DE215C LDR X8, [X19]
	0x01DE2160 LDR X9, [X8 + 0x3C8]
	0x01DE2164 LDR X1, [X8 + 0x3D0]
	0x01DE2168 MOV X0, X19
	0x01DE216C BLR X9
	0x01DE2170 B 0x1DE2188
	0x01DE2174 MOV X0, X19
	0x01DE2178 BL 0x1DE22C0
	0x01DE217C B 0x1DE2188
	0x01DE2180 MOV X0, X19
	0x01DE2184 BL 0x1DE244C
	0x01DE2188 BL 0x1DD6AE8
	0x01DE218C TBZ X0, 0x0, 0x1DE21DC
	0x01DE2190 LDR X20, [X19 + 0x198]
	0x01DE2194 CBZ X20, 0x1DE21DC
	0x01DE2198 MOV X0, X19
	0x01DE219C BL 0x1DE1ADC
	0x01DE21A0 ADRP X8, 0x2316000
	0x01DE21A4 LDR X8, [X8 + 0xCA8]
	0x01DE21A8 MOVN X9, 0x0
	0x01DE21AC STR W0, [X31 + 0x18]
	0x01DE21B0 ADD X0, X31, 0x8
	0x01DE21B4 LDR X8, [X8]
	0x01DE21B8 MOV X1, X31
	0x01DE21BC STP X8, X9, [X31 + 0x8]
	0x01DE21C0 BL 0x33B162C
	0x01DE21C4 LDR X8, [X20 + 0x40]
	0x01DE21C8 LDR X9, [X20 + 0x18]
	0x01DE21CC LDR X2, [X20 + 0x28]
	0x01DE21D0 MOV X1, X0
	0x01DE21D4 MOV X0, X8
	0x01DE21D8 BLR X9
	0x01DE21DC LDP X20, X19, [X31 + 0x30]
	0x01DE21E0 LDR X30, [X31 + 0x20]
	0x01DE21E4 ADD X31, X31, 0x40
	0x01DE21E8 RET
	0x01DE21EC STR D8, [X31 - 0x20]!
	0x01DE21F0 STP X30, X19, [X31 + 0x10]
	0x01DE21F4 LDR V8, [X0 + 0x1A8]
	0x01DE21F8 MOV X1, X31
	0x01DE21FC MOV X19, X0
	0x01DE2200 BL 0x1DEA4B8
	0x01DE2204 FADD S0, S8, S0
	0x01DE2208 FMOV S1, 10
	0x01DE220C FCMP S0, S1
	0x01DE2210 STR S0, [X19 + 0x1A8]
	0x01DE2214 B.GE 0x1DE2230
	0x01DE2218 LDR X8, [X19]
	0x01DE221C MOV X0, X19
	0x01DE2220 LDR X9, [X8 + 0x388]
	0x01DE2224 LDR X1, [X8 + 0x390]
	0x01DE2228 BLR X9
	0x01DE222C B 0x1DE2238
	0x01DE2230 MOV X0, X19
	0x01DE2234 BL 0x1DE1F78
	0x01DE2238 LDRB W8, [X19 + 0xBD]
	0x01DE223C CBZ W8, 0x1DE2264
	0x01DE2240 LDRB W8, [X19 + 0xBC]
	0x01DE2244 CBZ W8, 0x1DE2270
	0x01DE2248 LDR X8, [X19]
	0x01DE224C MOV X0, X19
	0x01DE2250 LDP X30, X19, [X31 + 0x10]
	0x01DE2254 LDR X2, [X8 + 0x418]
	0x01DE2258 LDR X1, [X8 + 0x420]
	0x01DE225C LDR V8, [X31], #0x20
	0x01DE2260 BR X2
	0x01DE2264 LDP X30, X19, [X31 + 0x10]
	0x01DE2268 LDR V8, [X31], #0x20
	0x01DE226C RET
	0x01DE2270 LDR X8, [X19 + 0xC0]
	0x01DE2274 CBZ X8, 0x1DE22B8
	0x01DE2278 LDR X8, [X8 + 0x30]
	0x01DE227C CBZ X8, 0x1DE22B8
	0x01DE2280 LDR W9, [X8 + 0x18]
	0x01DE2284 CMP W9, 0x1
	0x01DE2288 B.LS 0x1DE22BC
	0x01DE228C LDR X9, [X19]
	0x01DE2290 LDR V0, [X8 + 0x24]
	0x01DE2294 ADRP X8, 0xFFFFFFFFFED08000

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X30
	011 Move [X31+120], X23
	012 Move [X31+128], X22
	013 Move [X31+136], X21
	014 Move [X31+144], X20
	015 Move [X31+152], X19
	016 Move X20, 0x25F8000
	017 Move W8, [X20+3201]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {52}
	023 Move X0, 0x2318000
	024 Move X0, [X0+3144]
	025 Call 0x1C17CF4
	026 Move X0, 0x2318000
	027 Move X0, [X0+3152]
	028 Call 0x1C17CF4
	029 Move X0, 0x2318000
	030 Move X0, [X0+3160]
	031 Call 0x1C17CF4
	032 Move X0, 0x2318000
	033 Move X0, [X0+3168]
	034 Call 0x1C17CF4
	035 Move X0, 0x2318000
	036 Move X0, [X0+3176]
	037 Call 0x1C17CF4
	038 Move X0, 0x2318000
	039 Move X0, [X0+3184]
	040 Call 0x1C17CF4
	041 Move X0, 0x2318000
	042 Move X0, [X0+3192]
	043 Call 0x1C17CF4
	044 Move X0, 0x2318000
	045 Move X0, [X0+3136]
	046 Call 0x1C17CF4
	047 Move X0, 0x2313000
	048 Move X0, [X0+1432]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X20+3201], W8
	052 Move [X31+40], X31
	053 Move X0, [X19+208]
	054 Compare X0, 0
	055 JumpIfEqual {846}
	056 Move X1, X31
	057 Call Transform.get_position, X0
	058 Move X0, [X19+208]
	059 Compare X0, 0
	060 JumpIfEqual {846}
	061 Move X1, X31
	062 Move V8, V0
	063 Move V9, V1
	064 Move V10, V2
	065 Call Transform.get_forward, X0
	066 Move X8, [X19+192]
	067 Compare X8, 0
	068 JumpIfEqual {846}
	069 Move X23, 0x2318000
	070 Move X23, [X23+3136]
	071 Move V14, [X8+128]
	072 Move V11, V0
	073 Move V12, V1
	074 Move X0, [X23]
	075 Move V13, V2
	076 Move W9, [X0+224]
	077 Compare W9, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move X22, 0x2313000
	081 Move X22, [X22+1432]
	082 Add X0, X31, 40
	083 Move V0, V8
	084 Move V1, V9
	085 Move V2, V10
	086 Move V3, V11
	087 Move V4, V12
	088 Move V5, V13
	089 Move V6, V14
	090 Move X1, X31
	091 Call MobDetectionUtil.TryGetLightsBySight, X0, X1, V0, X2
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {249}
	096 Move X0, [X22]
	097 Move X20, [X19+424]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move X0, X20
	103 Move X1, X31
	104 Move X2, X31
	105 Call Object.op_Equality, X0, X1
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfEqual {122}
	110 Move X0, [X31+40]
	111 Compare X0, 0
	112 JumpIfEqual {846}
	113 Move X8, 0x2318000
	114 Move X1, [X19+424]
	115 Move X8, [X8+3160]
	116 Move X2, [X8]
	117 Call List`1<Object>.Contains, X0, X1
	118 Move TEMP, X0
	119 And TEMP, TEMP, 1
	120 Compare TEMP, 1
	121 JumpIfEqual {156}
	122 Move X8, 0x2318000
	123 Move X20, [X31+40]
	124 Move X8, [X8+3152]
	125 Move X0, [X8]
	126 Call 0x1C17F10
	127 Move X8, 0x2318000
	128 Move X8, [X8+3144]
	129 Move X1, X19
	130 Move X3, X31
	131 Move X21, X0
	132 Move X2, [X8]
	133 Call Comparison`1<Object>..ctor, X0, X1, X2
	134 Compare X20, 0
	135 JumpIfEqual {846}
	136 Move X8, 0x2318000
	137 Move X8, [X8+3168]
	138 Move X0, X20
	139 Move X1, X21
	140 Move X2, [X8]
	141 Call List`1<Object>.Sort, X0, X1
	142 Move X0, [X31+40]
	143 Compare X0, 0
	144 JumpIfEqual {846}
	145 Move X8, 0x2318000
	146 Move X8, [X8+3192]
	147 Move W1, W31
	148 Move X2, [X8]
	149 Call List`1<Object>.get_Item, X0, X1
	150 Move X8, [X19]
	151 Move X1, X0
	152 Move X0, X19
	153 Move X9, [X8+1112]
	154 Move X2, [X8+1120]
	155 NotImplemented "Instruction BLR not yet implemented."
	156 Move X0, [X22]
	157 Move X20, [X19+424]
	158 Move W8, [X0+224]
	159 Compare W8, 0
	160 JumpIfNotEqual {162}
	161 Call 0x1C17DFC
	162 Move X0, X20
	163 Move X1, X31
	164 Move X2, X31
	165 Call Object.op_Inequality, X0, X1
	166 Move TEMP, X0
	167 And TEMP, TEMP, 1
	168 Compare TEMP, 1
	169 JumpIfNotEqual {270}
	170 Move X0, [X19+424]
	171 Compare X0, 0
	172 JumpIfEqual {846}
	173 Move X1, X31
	174 Call Component.get_transform, X0
	175 Compare X0, 0
	176 JumpIfEqual {846}
	177 Move X1, X31
	178 Call Transform.get_position, X0
	179 Move X0, [X19+208]
	180 Compare X0, 0
	181 JumpIfEqual {846}
	182 Move X1, X31
	183 Move V8, V0
	184 Move V9, V1
	185 Move V10, V2
	186 Call Transform.get_position, X0
	187 Move X20, 0x25F8000
	188 Move W8, [X20+2140]
	189 Move V11, V0
	190 Move V12, V1
	191 Move V13, V2
	192 Compare W8, 0
	193 JumpIfNotEqual {199}
	194 Move X0, 0x2313000
	195 Move X0, [X0+1448]
	196 Call 0x1C17CF4
	197 Move W8, 1
	198 Move [X20+2140], W8
	199 Move X8, 0x2313000
	200 Move X8, [X8+1448]
	201 Move X0, [X8]
	202 Move W8, [X0+224]
	203 Compare W8, 0
	204 JumpIfNotEqual {206}
	205 Call 0x1C17DFC
	206 Move X8, [X19+192]
	207 Compare X8, 0
	208 JumpIfEqual {846}
	209 Move X8, [X8+120]
	210 Compare X8, 0
	211 JumpIfEqual {846}
	212 Move W9, [X8+24]
	213 Compare W9, 0
	214 JumpIfEqual {847}
	215 Subtract S0, S8, S11
	216 Subtract S1, S9, S12
	217 Subtract S2, S10, S13
	218 Move V3, [X8+32]
	219 Multiply S0, S0, S0
	220 Multiply S1, S1, S1
	221 Add S0, S0, S1
	222 Multiply S1, S2, S2
	223 Add S0, S1, S0
	224 NotImplemented "Instruction FSQRT not yet implemented."
	225 NotImplemented "Instruction FCMP not yet implemented."
	226 Move X0, X19
	227 Call AnglerController.get_timerAroundLight, X0
	228 Add X0, X31, 36
	229 Add X1, X31, 32
	230 Call 0x3EB2BC0
	231 Move X0, [X19+424]
	232 Compare X0, 0
	233 JumpIfEqual {846}
	234 Move S9, [X31+32]
	235 Move S8, [X31+36]
	236 Move X1, X31
	237 Call Component.get_transform, X0
	238 Compare X0, 0
	239 JumpIfEqual {846}
	240 Move S0, 0.5
	241 Move X1, X31
	242 Multiply S9, S9, S0
	243 Multiply S8, S8, S0
	244 Call Transform.get_position, X0
	245 Move S3, W31
	246 Add S0, S9, S0
	247 Add S1, S1, S3
	248 Add S2, S8, S2
	249 Move X8, [X19]
	250 Move X0, X19
	251 Move X1, X31
	252 Move X9, [X8+1112]
	253 Move X2, [X8+1120]
	254 NotImplemented "Instruction BLR not yet implemented."
	255 Move S0, W31
	256 Move X0, X19
	257 Call AnglerController.set_timerAroundLight, X0, V0
	258 Move X0, [X19+424]
	259 Compare X0, 0
	260 JumpIfEqual {846}
	261 Move X1, X31
	262 Call Component.get_transform, X0
	263 Compare X0, 0
	264 JumpIfEqual {846}
	265 Move X1, X31
	266 Call Transform.get_position, X0
	267 Move X0, X19
	268 Move X1, X31
	269 Call MobController.set__targetPosition, X0, X1
	270 Move X8, [X31+40]
	271 Compare X8, 0
	272 JumpIfEqual {846}
	273 Move W8, [X8+24]
	274 Move S0, 3
	275 Move S1, 10
	276 Move X0, X19
	277 NotImplemented "Instruction CMP not yet implemented."
	278 NotImplemented "Instruction FCSEL not yet implemented."
	279 Call AnglerController.get_timerAroundLight, X0
	280 Move X0, X19
	281 Move X1, X31
	282 Move V8, V0
	283 Call MobController.get_deltaTime, X0
	284 Add S0, S8, S0
	285 Move X0, X19
	286 Call AnglerController.set_timerAroundLight, X0, V0
	287 Move X0, X19
	288 Call AnglerController.get_timerAroundLight, X0
	289 NotImplemented "Instruction FCMP not yet implemented."
	290 Move S0, W31
	291 Move X0, X19
	292 Call AnglerController.set_timerAroundLight, X0, V0
	293 Move X0, [X22]
	294 Move X20, [X19+424]
	295 Move W8, [X0+224]
	296 Compare W8, 0
	297 JumpIfNotEqual {299}
	298 Call 0x1C17DFC
	299 Move X0, X20
	300 Move X1, X31
	301 Move X2, X31
	302 Call Object.op_Inequality, X0, X1
	303 Move TEMP, X0
	304 And TEMP, TEMP, 1
	305 Compare TEMP, 1
	306 JumpIfNotEqual {319}
	307 Move X0, [X19+424]
	308 Compare X0, 0
	309 JumpIfEqual {846}
	310 Move W1, W31
	311 Move X2, X31
	312 Call Flashlight.set_isOn, X0, X1
	313 Move X8, [X19]
	314 Move X0, X19
	315 Move X1, X31
	316 Move X9, [X8+1112]
	317 Move X2, [X8+1120]
	318 NotImplemented "Instruction BLR not yet implemented."
	319 Move X0, [X23]
	320 Add X20, X19, 376
	321 Move W8, [X0+224]
	322 Compare W8, 0
	323 JumpIfNotEqual {325}
	324 Call 0x1C17DFC
	325 Move X0, X19
	326 Move X1, X20
	327 Move X2, X31
	328 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	329 Move TEMP, X0
	330 And TEMP, TEMP, 1
	331 Compare TEMP, 1
	332 JumpIfNotEqual {359}
	333 Move X0, [X20]
	334 Compare X0, 0
	335 JumpIfEqual {846}
	336 Move X8, 0x2318000
	337 Move X8, [X8+3184]
	338 Move W1, W31
	339 Move X2, [X8]
	340 Call List`1<Object>.get_Item, X0, X1
	341 Move X8, [X19]
	342 Move X1, X0
	343 Move X0, X19
	344 Move X9, [X8+952]
	345 Move X2, [X8+960]
	346 NotImplemented "Instruction BLR not yet implemented."
	347 Move X0, [X19+352]
	348 Compare X0, 0
	349 JumpIfEqual {846}
	350 Move X1, X31
	351 Call Component.get_transform, X0
	352 Compare X0, 0
	353 JumpIfEqual {846}
	354 Move X1, X31
	355 Call Transform.get_position, X0
	356 Move X0, X19
	357 Move X1, X31
	358 Call MobController.set__targetPosition, X0, X1
	359 Move X0, [X22]
	360 Move X20, [X19+424]
	361 Move W8, [X0+224]
	362 Compare W8, 0
	363 JumpIfNotEqual {365}
	364 Call 0x1C17DFC
	365 Move X0, X20
	366 Move X1, X31
	367 Move X2, X31
	368 Call Object.op_Equality, X0, X1
	369 Move TEMP, X0
	370 And TEMP, TEMP, 1
	371 Compare TEMP, 1
	372 JumpIfNotEqual {376}
	373 Move X0, X19
	374 Move X1, X31
	375 Call MobController.UpdateChasing, X0
	376 Move X0, X19
	377 Move X1, X31
	378 Call MobController.get__timerAttackInterval, X0
	379 Move X0, X19
	380 Move X1, X31
	381 Move V8, V0
	382 Call MobController.get_deltaTime, X0
	383 Add S0, S8, S0
	384 Move X0, X19
	385 Move X1, X31
	386 Call MobController.set__timerAttackInterval, X0, V0
	387 Move X0, X19
	388 Move X1, X31
	389 Call MobController.get__timerAttackInterval, X0
	390 Move S1, 1
	391 NotImplemented "Instruction FCMP not yet implemented."
	392 Move X0, [X19+232]
	393 Compare X0, 0
	394 JumpIfEqual {846}
	395 Move X1, X31
	396 Call NavMeshAgent.get_isStopped, X0
	397 Move TEMP, X0
	398 And TEMP, TEMP, 1
	399 Compare TEMP, 1
	400 JumpIfNotEqual {407}
	401 Move X0, [X19+232]
	402 Compare X0, 0
	403 JumpIfEqual {846}
	404 Move W1, W31
	405 Move X2, X31
	406 Call NavMeshAgent.set_isStopped, X0, X1
	407 Move X0, [X22]
	408 Move X20, [X19+352]
	409 Move W8, [X0+224]
	410 Compare W8, 0
	411 JumpIfNotEqual {413}
	412 Call 0x1C17DFC
	413 Move X0, X20
	414 Move X1, X31
	415 Move X2, X31
	416 Call Object.op_Inequality, X0, X1
	417 Move TEMP, X0
	418 And TEMP, TEMP, 1
	419 Compare TEMP, 1
	420 JumpIfNotEqual {515}
	421 Move X0, [X19+208]
	422 Compare X0, 0
	423 JumpIfEqual {846}
	424 Move X1, X31
	425 Call Transform.get_position, X0
	426 Move X0, X31
	427 Call Extensions.Flatten, X0
	428 Move X0, [X19+352]
	429 Compare X0, 0
	430 JumpIfEqual {846}
	431 Move X1, X31
	432 Move V8, V0
	433 Move V9, V1
	434 Move V10, V2
	435 Call Component.get_transform, X0
	436 Compare X0, 0
	437 JumpIfEqual {846}
	438 Move X1, X31
	439 Call Transform.get_position, X0
	440 Move X0, X31
	441 Call Extensions.Flatten, X0
	442 Move X0, [X19+208]
	443 Compare X0, 0
	444 JumpIfEqual {846}
	445 Move X1, X31
	446 Move V12, V0
	447 Move V13, V1
	448 Move V14, V2
	449 Call Transform.get_position, X0
	450 Move X0, [X19+352]
	451 Compare X0, 0
	452 JumpIfEqual {846}
	453 Move X1, X31
	454 Move V11, V1
	455 Call Component.get_transform, X0
	456 Compare X0, 0
	457 JumpIfEqual {846}
	458 Move X1, X31
	459 Call Transform.get_position, X0
	460 Move X0, X19
	461 Move X1, X31
	462 Move V15, V1
	463 Call MobController.get__timerAttackInterval, X0
	464 Move X0, [X19+192]
	465 Compare X0, 0
	466 JumpIfEqual {846}
	467 Move V1, [X0+40]
	468 NotImplemented "Instruction FCMP not yet implemented."
	469 Subtract S0, S8, S12
	470 Subtract S1, S9, S13
	471 Subtract S2, S10, S14
	472 Multiply S0, S0, S0
	473 Multiply S1, S1, S1
	474 Add S0, S0, S1
	475 Multiply S1, S2, S2
	476 Move X1, X31
	477 Add S8, S1, S0
	478 Call MobData.get_attackRangeSqr, X0
	479 NotImplemented "Instruction FCMP not yet implemented."
	480 Move X8, [X19+192]
	481 Compare X8, 0
	482 JumpIfEqual {846}
	483 Move V0, [X8+76]
	484 NotImplemented "Instruction FABD not yet implemented."
	485 NotImplemented "Instruction FCMP not yet implemented."
	486 Move S0, W31
	487 Move X0, X19
	488 Move X1, X31
	489 Call MobController.set__timerAttackInterval, X0, V0
	490 Move X0, [X19+232]
	491 Compare X0, 0
	492 JumpIfEqual {846}
	493 Move W1, 1
	494 Move X2, X31
	495 Call NavMeshAgent.set_isStopped, X0, X1
	496 Move X8, [X19+192]
	497 Compare X8, 0
	498 JumpIfEqual {846}
	499 Move X20, [X19+352]
	500 Move W21, [X8+36]
	501 Move X0, X19
	502 Move X1, X31
	503 Call Component.get_transform, X0
	504 Move X8, [X19+192]
	505 Compare X8, 0
	506 JumpIfEqual {846}
	507 Move X9, [X19+64]
	508 Move X2, X0
	509 Compare X9, 0
	510 JumpIfEqual {550}
	511 Move X9, [X9+32]
	512 Compare X9, 0
	513 JumpIfEqual {550}
	514 Move W6, [X9]
	515 Move X0, [X22]
	516 Move X20, [X19+424]
	517 Move W8, [X0+224]
	518 Compare W8, 0
	519 JumpIfNotEqual {521}
	520 Call 0x1C17DFC
	521 Move X0, X20
	522 Move X1, X31
	523 Move X2, X31
	524 Call Object.op_Equality, X0, X1
	525 Move TEMP, X0
	526 And TEMP, TEMP, 1
	527 Compare TEMP, 1
	528 JumpIfNotEqual {564}
	529 Move X0, X19
	530 Move X1, X31
	531 Call MobController.get__timerToChasing, X0
	532 Move X0, X19
	533 Move X1, X31
	534 Move V8, V0
	535 Call MobController.get_deltaTime, X0
	536 Add S0, S8, S0
	537 Move X0, X19
	538 Move X1, X31
	539 Call MobController.set__timerToChasing, X0, V0
	540 Move X0, X19
	541 Move X1, X31
	542 Call MobController.get__timerToChasing, X0
	543 Move X8, [X19+192]
	544 Compare X8, 0
	545 JumpIfEqual {846}
	546 Move V1, [X8+104]
	547 NotImplemented "Instruction FCMP not yet implemented."
	548 Move X0, X19
	549 Call AnglerController.SetRoaming, X0
	550 Move X6, X31
	551 Compare X20, 0
	552 JumpIfEqual {846}
	553 Move W9, [X19+104]
	554 Move X4, [X8+184]
	555 Move X3, [X8+192]
	556 Move X5, [X8+24]
	557 Move X0, X20
	558 NotImplemented "Instruction BFM not yet implemented."
	559 Move W1, W21
	560 Move X7, X31
	561 Call NetPlayer.PlayerHit, X0, X1, X2, X3, X4, X5, X6
	562 Move X0, X19
	563 Call AnglerController.RPC_PlayAttackAnimation, X0
	564 Move X0, X19
	565 Call AnglerController.get_phase, X0
	566 NotImplemented "Instruction CMP not yet implemented."
	567 Move X0, [X19+232]
	568 Compare X0, 0
	569 JumpIfEqual {846}
	570 Move X1, X31
	571 Call NavMeshAgent.get_pathPending, X0
	572 Move TEMP, X0
	573 And TEMP, TEMP, 1
	574 Compare TEMP, 1
	575 JumpIfNotEqual {626}
	576 Move X0, X19
	577 Move X1, X31
	578 Call MobController.get__targetPosition, X0
	579 Move X0, X19
	580 Move X1, X31
	581 Move V8, V0
	582 Move V9, V1
	583 Move V10, V2
	584 Call Component.get_transform, X0
	585 Compare X0, 0
	586 JumpIfEqual {846}
	587 Move X1, X31
	588 Call Transform.get_position, X0
	589 Move X21, 0x25F8000
	590 Move W8, [X21+1925]
	591 Move V11, V0
	592 Move V12, V1
	593 Move V13, V2
	594 Compare W8, 0
	595 JumpIfNotEqual {601}
	596 Move X0, 0x2313000
	597 Move X0, [X0+1448]
	598 Call 0x1C17CF4
	599 Move W8, 1
	600 Move [X21+1925], W8
	601 Move X20, 0x2313000
	602 Move X20, [X20+1448]
	603 Subtract S14, S8, S11
	604 Subtract S11, S9, S12
	605 Subtract S8, S10, S13
	606 Move X0, [X20]
	607 Move W8, [X0+224]
	608 Compare W8, 0
	609 JumpIfNotEqual {611}
	610 Call 0x1C17DFC
	611 Move X8, -19881984
	612 Multiply S0, S14, S14
	613 Multiply S1, S11, S11
	614 Move V9, [X8+380]
	615 Move X22, 0x2313000
	616 Multiply S2, S8, S8
	617 Add S0, S0, S1
	618 Move X22, [X22+1440]
	619 Add S0, S2, S0
	620 NotImplemented "Instruction FSQRT not yet implemented."
	621 NotImplemented "Instruction FCMP not yet implemented."
	622 Move X23, 0x25F8000
	623 NotImplemented "Instruction FDIV not yet implemented."
	624 NotImplemented "Instruction FDIV not yet implemented."
	625 NotImplemented "Instruction FDIV not yet implemented."
	626 Move X20, [X19+232]
	627 Move X0, X19
	628 Move X1, X31
	629 Call MobController.get__targetPosition, X0
	630 Compare X20, 0
	631 JumpIfEqual {846}
	632 Move X0, X20
	633 Move X1, X31
	634 Call NavMeshAgent.SetDestination, X0, X1
	635 Move W8, [X23+1923]
	636 Compare W8, 0
	637 JumpIfNotEqual {643}
	638 Move X0, 0x2313000
	639 Move X0, [X0+1440]
	640 Call 0x1C17CF4
	641 Move W8, 1
	642 Move [X23+1923], W8
	643 Move X8, [X22]
	644 Move X8, [X8+184]
	645 Move S10, [X8]
	646 Move S1, [X8+4]
	647 Move V2, [X8+8]
	648 Move V0, V10
	649 Move X0, X31
	650 Move [X31+20], S2
	651 Move [X31+28], S1
	652 Call Extensions.Flatten, X0
	653 Move W8, [X21+1925]
	654 Move V8, V0
	655 Move V12, V1
	656 Move V13, V2
	657 Compare W8, 0
	658 JumpIfNotEqual {664}
	659 Move X0, 0x2313000
	660 Move X0, [X0+1448]
	661 Call 0x1C17CF4
	662 Move W8, 1
	663 Move [X21+1925], W8
	664 Move X0, [X20]
	665 Move W8, [X0+224]
	666 Compare W8, 0
	667 JumpIfNotEqual {669}
	668 Call 0x1C17DFC
	669 Multiply S0, S8, S8
	670 Multiply S1, S12, S12
	671 Add S0, S0, S1
	672 Multiply S1, S13, S13
	673 Add S0, S1, S0
	674 NotImplemented "Instruction FSQRT not yet implemented."
	675 NotImplemented "Instruction FCMP not yet implemented."
	676 NotImplemented "Instruction FDIV not yet implemented."
	677 NotImplemented "Instruction FDIV not yet implemented."
	678 NotImplemented "Instruction FDIV not yet implemented."
	679 Move W8, [X23+1923]
	680 Compare W8, 0
	681 JumpIfNotEqual {687}
	682 Move X0, 0x2312000
	683 Move X0, [X0+1440]
	684 Call 0x1C17CF4
	685 Move W8, 1
	686 Move [X23+1923], W8
	687 Move X8, [X22]
	688 Move X8, [X8+184]
	689 Move S11, [X8]
	690 Move S12, [X8+4]
	691 Move V13, [X8+8]
	692 Move X8, [X19+192]
	693 Compare X8, 0
	694 JumpIfEqual {846}
	695 Move V0, [X8+64]
	696 Move X0, X19
	697 Move X1, X31
	698 Move [X31+28], S0
	699 Call Component.get_transform, X0
	700 Compare X0, 0
	701 JumpIfEqual {846}
	702 Move X1, X31
	703 Move [X31+16], S10
	704 Call Transform.get_forward, X0
	705 Move X21, 0x25F7000
	706 Move W8, [X21+2596]
	707 Move V14, V0
	708 Move V15, V1
	709 Move V8, V2
	710 Compare W8, 0
	711 JumpIfNotEqual {717}
	712 Move X0, 0x2312000
	713 Move X0, [X0+1448]
	714 Call 0x1C17CF4
	715 Move W8, 1
	716 Move [X21+2596], W8
	717 Move X0, [X20]
	718 Multiply S0, S11, S11
	719 Multiply S1, S12, S12
	720 Add S0, S0, S1
	721 Multiply S1, S13, S13
	722 Move W8, [X0+224]
	723 Add S10, S1, S0
	724 Multiply S0, S14, S14
	725 Multiply S1, S15, S15
	726 Add S0, S0, S1
	727 Multiply S1, S8, S8
	728 Add S9, S1, S0
	729 Compare W8, 0
	730 JumpIfNotEqual {732}
	731 Call 0x1C17DFC
	732 Move X8, -19890176
	733 Move V1, [X8+4072]
	734 Multiply S0, S10, S9
	735 NotImplemented "Instruction FSQRT not yet implemented."
	736 Move S10, W31
	737 NotImplemented "Instruction FCMP not yet implemented."
	738 Move X0, [X20]
	739 Multiply S1, S11, S14
	740 Multiply S2, S12, S15
	741 Multiply S3, S13, S8
	742 Add S1, S1, S2
	743 Add S1, S3, S1
	744 Move W8, [X0+224]
	745 NotImplemented "Instruction FDIV not yet implemented."
	746 Move S1, 1
	747 Move S2, -1
	748 NotImplemented "Instruction FMIN not yet implemented."
	749 NotImplemented "Instruction FCMP not yet implemented."
	750 NotImplemented "Instruction FCSEL not yet implemented."
	751 Compare W8, 0
	752 JumpIfNotEqual {754}
	753 Call 0x1C17DFC
	754 NotImplemented "Instruction FCVT not yet implemented."
	755 Call 0x3EB2B80
	756 Move X8, -19886080
	757 Move V1, [X8+1096]
	758 NotImplemented "Instruction INVALID not yet implemented."
	759 Multiply S10, S0, S1
	760 Move X0, X19
	761 Move X1, X31
	762 Call Component.get_transform, X0
	763 Move X20, X0
	764 Move X0, X19
	765 Move X1, X31
	766 Call Component.get_transform, X0
	767 Compare X0, 0
	768 JumpIfEqual {846}
	769 Move V0, [X31+28]
	770 Move X1, X31
	771 NotImplemented "Instruction FDIV not yet implemented."
	772 Move [X31+28], S0
	773 Call Transform.get_rotation, X0
	774 Move V8, V0
	775 Move V14, V1
	776 Move V15, V2
	777 Move V0, V11
	778 Move V1, V12
	779 Move V2, V13
	780 Move X0, X31
	781 Move V9, V3
	782 Call Quaternion.LookRotation, X0
	783 Move X0, X19
	784 Move X1, X31
	785 Move V11, V0
	786 Move V12, V1
	787 Move V13, V2
	788 Move V10, V3
	789 Call MobController.get_deltaTime, X0
	790 Move V1, [X31+28]
	791 Move V2, V15
	792 Move V3, V9
	793 Move V4, V11
	794 Multiply S0, S1, S0
	795 Move [X31], S0
	796 Move V0, V8
	797 Move V1, V14
	798 Move V5, V12
	799 Move V6, V13
	800 Move V7, V10
	801 Move X0, X31
	802 Call Quaternion.Slerp, X0, X1, V0
	803 Compare X20, 0
	804 JumpIfEqual {846}
	805 Move X0, X20
	806 Move X1, X31
	807 Call Transform.set_rotation, X0, X1
	808 Move X20, [X19+232]
	809 Move V8, [X31+16]
	810 Compare X20, 0
	811 JumpIfEqual {846}
	812 Move X0, X20
	813 Move X1, X31
	814 Call NavMeshAgent.get_speed, X0
	815 Move V1, [X31+24]
	816 Move X0, X19
	817 Move X1, X31
	818 Multiply S8, S8, S0
	819 Multiply S9, S1, S0
	820 Move V1, [X31+20]
	821 Multiply S10, S1, S0
	822 Call MobController.get_deltaTime, X0
	823 Multiply S3, S8, S0
	824 Multiply S1, S9, S0
	825 Multiply S2, S10, S0
	826 Move X0, X20
	827 Move V0, V3
	828 Move X1, X31
	829 Call NavMeshAgent.Move, X0, X1
	830 Move X20, [X31+144]
	831 Move X19, [X31+152]
	832 Move X22, [X31+128]
	833 Move X21, [X31+136]
	834 Move X30, [X31+112]
	835 Move X23, [X31+120]
	836 Move D9, [X31+96]
	837 Move D8, [X31+104]
	838 Move D11, [X31+80]
	839 Move D10, [X31+88]
	840 Move D13, [X31+64]
	841 Move D12, [X31+72]
	842 Move D15, [X31+48]
	843 Move D14, [X31+56]
	844 Add X31, X31, 160
	845 Return 
	846 Call 0x1C17F20
	847 Call 0x1C17F28

Method: System.Void RPC_PlayAttackAnimation()

Disassembly:
	0x01DE2298 LDR V1, [X8 + 0xC0]
	0x01DE229C LDR X2, [X9 + 0x428]
	0x01DE22A0 LDR X1, [X9 + 0x430]
	0x01DE22A4 MOV X0, X19
	0x01DE22A8 LDP X30, X19, [X31 + 0x10]
	0x01DE22AC FDIV S0, S0, S1
	0x01DE22B0 LDR V8, [X31], #0x20
	0x01DE22B4 BR X2
	0x01DE22B8 BL 0x1C16F20
	0x01DE22BC BL 0x1C16F28
	0x01DE22C0 STR D8, [X31 - 0x20]!
	0x01DE22C4 STR X30, [X31 + 0x8]
	0x01DE22C8 STP X20, X19, [X31 + 0x10]
	0x01DE22CC ADRP X20, 0x25F6000
	0x01DE22D0 LDRB W8, [X20 + 0xC8C]
	0x01DE22D4 MOV X19, X0
	0x01DE22D8 TBNZ X8, 0x0, 0x1DE2308
	0x01DE22DC ADRP X0, 0x2316000
	0x01DE22E0 LDR X0, [X0 + 0xCB0]
	0x01DE22E4 BL 0x1C16CF4
	0x01DE22E8 ADRP X0, 0x2316000
	0x01DE22EC LDR X0, [X0 + 0xC70]
	0x01DE22F0 BL 0x1C16CF4
	0x01DE22F4 ADRP X0, 0x2316000
	0x01DE22F8 LDR X0, [X0 + 0xC40]
	0x01DE22FC BL 0x1C16CF4
	0x01DE2300 MOVZ W8, 0x1
	0x01DE2304 STRB W8, [X20 + 0xC8C]
	0x01DE2308 MOV X0, X19
	0x01DE230C MOV X1, X31
	0x01DE2310 BL 0x1DF393C
	0x01DE2314 MOV X0, X19
	0x01DE2318 MOV X1, X31
	0x01DE231C MOV V8.16B, V0.16B
	0x01DE2320 BL 0x1DEA4B8
	0x01DE2324 FADD S0, S8, S0
	0x01DE2328 MOV X0, X19
	0x01DE232C MOV X1, X31
	0x01DE2330 BL 0x1DF38DC
	0x01DE2334 MOV X0, X19
	0x01DE2338 MOV X1, X31
	0x01DE233C BL 0x1DF393C
	0x01DE2340 LDR X8, [X19 + 0xC0]
	0x01DE2344 CBZ X8, 0x1DE2448
	0x01DE2348 LDR V1, [X8 + 0x6C]
	0x01DE234C FCMP S0, S1
	0x01DE2350 B.GE 0x1DE2414
	0x01DE2354 ADRP X8, 0x2316000
	0x01DE2358 LDR X8, [X8 + 0xC40]
	0x01DE235C ADD X20, X19, 0x178
	0x01DE2360 LDR X0, [X8]
	0x01DE2364 LDR W8, [X0 + 0xE0]
	0x01DE2368 CBNZ W8, 0x1DE2370
	0x01DE236C BL 0x1C16DFC
	0x01DE2370 MOV X0, X19
	0x01DE2374 MOV X1, X20
	0x01DE2378 MOV X2, X31
	0x01DE237C BL 0x1DEA6E8
	0x01DE2380 TBZ X0, 0x0, 0x1DE2428
	0x01DE2384 LDR X20, [X20]
	0x01DE2388 CBZ X20, 0x1DE2448
	0x01DE238C LDR W1, [X20 + 0x18]
	0x01DE2390 MOV W0, W31
	0x01DE2394 MOV X2, X31
	0x01DE2398 BL 0x3C309A8
	0x01DE239C ADRP X8, 0x2316000
	0x01DE23A0 LDR X8, [X8 + 0xC70]
	0x01DE23A4 MOV W1, W0
	0x01DE23A8 MOV X0, X20
	0x01DE23AC LDR X2, [X8]
	0x01DE23B0 BL 0x301BCCC
	0x01DE23B4 LDR X8, [X19]
	0x01DE23B8 MOV X1, X0
	0x01DE23BC MOV X0, X19
	0x01DE23C0 LDR X9, [X8 + 0x3B8]
	0x01DE23C4 LDR X2, [X8 + 0x3C0]
	0x01DE23C8 BLR X9
	0x01DE23CC LDR X0, [X19 + 0x160]
	0x01DE23D0 CBZ X0, 0x1DE2448
	0x01DE23D4 MOV X1, X31
	0x01DE23D8 BL 0x3C32E90
	0x01DE23DC CBZ X0, 0x1DE2448
	0x01DE23E0 MOV X1, X31
	0x01DE23E4 BL 0x3C3F58C
	0x01DE23E8 MOV X0, X19
	0x01DE23EC MOV X1, X31
	0x01DE23F0 BL 0x1DE9A40
	0x01DE23F4 MOV X0, X19
	0x01DE23F8 MOV X1, X31
	0x01DE23FC BL 0x1DEA5A0
	0x01DE2400 MOV X0, X19
	0x01DE2404 LDP X20, X19, [X31 + 0x10]
	0x01DE2408 LDR X30, [X31 + 0x8]
	0x01DE240C LDR V8, [X31], #0x20
	0x01DE2410 B 0x1DE2894
	0x01DE2414 MOV X0, X19
	0x01DE2418 LDP X20, X19, [X31 + 0x10]
	0x01DE241C LDR X30, [X31 + 0x8]
	0x01DE2420 LDR V8, [X31], #0x20
	0x01DE2424 B 0x1DE1F78
	0x01DE2428 LDR X8, [X19]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25F7000
	006 Move W8, [X20+3202]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x2315000
	013 Move X0, [X0+2680]
	014 Call 0x1C17CF4
	015 Move X0, 0x2317000
	016 Move X0, [X0+3200]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3202], W8
	020 Move W8, [X19+88]
	021 Compare W8, 0
	022 JumpIfEqual {35}
	023 Move [X19+88], W31
	024 Move X0, [X19+200]
	025 Compare X0, 0
	026 JumpIfEqual {128}
	027 Move X8, [X0]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, [X8+536]
	031 Move X1, [X8+544]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 CallNoReturn X2
	035 Move X21, 0x2315000
	036 Move X21, [X21+2680]
	037 Move X0, [X21]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X31
	044 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	045 Move X0, [X19+56]
	046 Compare X0, 0
	047 JumpIfEqual {128}
	048 Move X1, X31
	049 Call NetworkRunner.get_Stage, X0
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Return 
	056 Move X0, [X19+64]
	057 Compare X0, 0
	058 JumpIfEqual {128}
	059 Move X1, X31
	060 Call NetworkObject.GetLocalAuthorityMask, X0
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {83}
	065 Move X0, [X21]
	066 Move X19, [X19+64]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Move X8, 0x2317000
	072 Move X8, [X8+3200]
	073 Move X1, X19
	074 Move X20, [X31+16]
	075 Move X19, [X31+24]
	076 Move W2, 1
	077 Move X0, [X8]
	078 Move X3, X31
	079 Move X30, [X31+32]
	080 Move X21, [X31+40]
	081 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	082 Return 
	083 Move X8, [X19+56]
	084 Compare X8, 0
	085 JumpIfEqual {128}
	086 Move W20, W0
	087 Move X0, [X8+80]
	088 Compare X0, 0
	089 JumpIfEqual {128}
	090 Move X1, X31
	091 Call Simulation.HasAnyActiveConnections, X0
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {127}
	096 Move X8, [X19+56]
	097 Compare X8, 0
	098 JumpIfEqual {128}
	099 Move X0, [X8+80]
	100 Move W1, 8
	101 Move X2, X31
	102 Call SimulationMessage.Allocate, X0, X1
	103 Move X8, [X19+64]
	104 Compare X8, 0
	105 JumpIfEqual {128}
	106 Move X8, [X8+32]
	107 Move X21, X0
	108 Compare X8, 0
	109 JumpIfEqual {111}
	110 Move W0, [X8]
	111 Move X0, X31
	112 Move W1, [X19+104]
	113 Move W2, 6
	114 Move X3, X31
	115 Call RpcHeader.Create, X0, X1, X2
	116 Move [X21+28], X0
	117 Compare X21, 0
	118 JumpIfEqual {128}
	119 Move W8, 64
	120 Move [X21+12], W8
	121 Move X0, [X19+56]
	122 Compare X0, 0
	123 JumpIfEqual {128}
	124 Move X1, X21
	125 Move X2, X31
	126 Call NetworkRunner.SendRpc, X0, X1
	127 And W31, W20, 7
	128 Call 0x1C17F20

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01DE242C MOV X0, X19
	0x01DE2430 LDP X20, X19, [X31 + 0x10]
	0x01DE2434 LDR X30, [X31 + 0x8]
	0x01DE2438 LDR X2, [X8 + 0x388]
	0x01DE243C LDR X1, [X8 + 0x390]
	0x01DE2440 LDR V8, [X31], #0x20
	0x01DE2444 BR X2
	0x01DE2448 BL 0x1C16F20
	0x01DE244C STR D8, [X31 - 0x20]!
	0x01DE2450 STR X30, [X31 + 0x8]
	0x01DE2454 STP X20, X19, [X31 + 0x10]
	0x01DE2458 ADRP X20, 0x25F6000
	0x01DE245C LDRB W8, [X20 + 0xC8E]
	0x01DE2460 MOV X19, X0
	0x01DE2464 TBNZ X8, 0x0, 0x1DE2494
	0x01DE2468 ADRP X0, 0x2316000
	0x01DE246C LDR X0, [X0 + 0xCB0]
	0x01DE2470 BL 0x1C16CF4
	0x01DE2474 ADRP X0, 0x2316000
	0x01DE2478 LDR X0, [X0 + 0xC70]
	0x01DE247C BL 0x1C16CF4
	0x01DE2480 ADRP X0, 0x2316000
	0x01DE2484 LDR X0, [X0 + 0xC40]
	0x01DE2488 BL 0x1C16CF4
	0x01DE248C MOVZ W8, 0x1
	0x01DE2490 STRB W8, [X20 + 0xC8E]
	0x01DE2494 LDR V8, [X19 + 0x1AC]
	0x01DE2498 MOV X0, X19
	0x01DE249C MOV X1, X31
	0x01DE24A0 BL 0x1DEA4B8
	0x01DE24A4 LDR X8, [X19 + 0xC0]
	0x01DE24A8 FADD S0, S8, S0
	0x01DE24AC STR S0, [X19 + 0x1AC]
	0x01DE24B0 CBZ X8, 0x1DE258C
	0x01DE24B4 LDR V1, [X8 + 0x28]
	0x01DE24B8 FCMP S0, S1
	0x01DE24BC B.GE 0x1DE24D0
	0x01DE24C0 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25F7000
	006 Move X20, 0x2317000
	007 Move W8, [X21+3203]
	008 Move X20, [X20+3008]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2317000
	015 Move X0, [X0+3008]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3203], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call MobController.OnDrawGizmos, X0
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X20]
	028 Move X8, [X0+184]
	029 Move X0, X31
	030 Move S0, [X8+176]
	031 Move S1, [X8+180]
	032 Move S2, [X8+184]
	033 Move S3, [X8+188]
	034 Call Gizmos.set_color, X0
	035 Move X0, [X19+208]
	036 Compare X0, 0
	037 JumpIfEqual {51}
	038 Move X1, X31
	039 Call Transform.get_position, X0
	040 Move X8, [X19+192]
	041 Compare X8, 0
	042 JumpIfEqual {51}
	043 Move V3, [X8+76]
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X0, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Gizmos.DrawWireSphere, X0, V0
	050 Return 
	051 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DE24C4 LDR X30, [X31 + 0x8]
	0x01DE24C8 LDR V8, [X31], #0x20
	0x01DE24CC RET
	0x01DE24D0 ADRP X8, 0x2316000
	0x01DE24D4 LDR X8, [X8 + 0xC40]
	0x01DE24D8 ADD X20, X19, 0x178
	0x01DE24DC LDR X0, [X8]
	0x01DE24E0 LDR W8, [X0 + 0xE0]
	0x01DE24E4 CBNZ W8, 0x1DE24EC
	0x01DE24E8 BL 0x1C16DFC
	0x01DE24EC MOV X0, X19
	0x01DE24F0 MOV X1, X20
	0x01DE24F4 MOV X2, X31
	0x01DE24F8 BL 0x1DEA6E8
	0x01DE24FC TBZ X0, 0x0, 0x1DE2578
	0x01DE2500 LDR X20, [X20]
	0x01DE2504 CBZ X20, 0x1DE258C
	0x01DE2508 LDR W1, [X20 + 0x18]
	0x01DE250C MOV W0, W31
	0x01DE2510 MOV X2, X31
	0x01DE2514 BL 0x3C309A8
	0x01DE2518 ADRP X8, 0x2316000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25F7000
	006 Move X21, 0x2316000
	007 Move W8, [X20+3204]
	008 Move X21, [X21+2144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2316000
	015 Move X0, [X0+2144]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3204], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call MobController..ctor, X0
	031 Return 

Method: System.Int32 <UpdateChasing>b__39_0(AnimalCompany.Flashlight flashlightA, AnimalCompany.Flashlight flashlightB)

Disassembly:
	0x01DE251C LDR X8, [X8 + 0xC70]
	0x01DE2520 MOV W1, W0
	0x01DE2524 MOV X0, X20
	0x01DE2528 LDR X2, [X8]
	0x01DE252C BL 0x301BCCC
	0x01DE2530 LDR X8, [X19]
	0x01DE2534 MOV X1, X0
	0x01DE2538 MOV X0, X19
	0x01DE253C LDR X9, [X8 + 0x3B8]
	0x01DE2540 LDR X2, [X8 + 0x3C0]
	0x01DE2544 BLR X9
	0x01DE2548 LDR X0, [X19 + 0x160]
	0x01DE254C CBZ X0, 0x1DE258C
	0x01DE2550 MOV X1, X31
	0x01DE2554 BL 0x3C32E90
	0x01DE2558 CBZ X0, 0x1DE258C
	0x01DE255C MOV X1, X31
	0x01DE2560 BL 0x3C3F58C
	0x01DE2564 MOV X0, X19
	0x01DE2568 LDP X20, X19, [X31 + 0x10]
	0x01DE256C LDR X30, [X31 + 0x8]
	0x01DE2570 LDR V8, [X31], #0x20
	0x01DE2574 B 0x1DE2894
	0x01DE2578 MOV X0, X19
	0x01DE257C LDP X20, X19, [X31 + 0x10]
	0x01DE2580 LDR X30, [X31 + 0x8]
	0x01DE2584 LDR V8, [X31], #0x20
	0x01DE2588 B 0x1DE1F78
	0x01DE258C BL 0x1C16F20
	0x01DE2590 STR X30, [X31 - 0x30]!
	0x01DE2594 STP X22, X21, [X31 + 0x10]
	0x01DE2598 STP X20, X19, [X31 + 0x20]
	0x01DE259C ADRP X20, 0x25F6000
	0x01DE25A0 ADRP X21, 0x2316000
	0x01DE25A4 LDRB W8, [X20 + 0xC8A]
	0x01DE25A8 LDR X21, [X21 + 0xCB8]
	0x01DE25AC MOV X19, X0
	0x01DE25B0 TBNZ X8, 0x0, 0x1DE261C
	0x01DE25B4 ADRP X0, 0x2315000
	0x01DE25B8 LDR X0, [X0 + 0xA98]
	0x01DE25BC BL 0x1C16CF4
	0x01DE25C0 ADRP X0, 0x2315000
	0x01DE25C4 LDR X0, [X0 + 0xAA0]
	0x01DE25C8 BL 0x1C16CF4
	0x01DE25CC ADRP X0, 0x2316000
	0x01DE25D0 LDR X0, [X0 + 0xCB0]
	0x01DE25D4 BL 0x1C16CF4
	0x01DE25D8 ADRP X0, 0x2316000
	0x01DE25DC LDR X0, [X0 + 0xC70]
	0x01DE25E0 BL 0x1C16CF4
	0x01DE25E4 ADRP X0, 0x2316000
	0x01DE25E8 LDR X0, [X0 + 0xC40]
	0x01DE25EC BL 0x1C16CF4
	0x01DE25F0 ADRP X0, 0x2311000
	0x01DE25F4 LDR X0, [X0 + 0x598]
	0x01DE25F8 BL 0x1C16CF4
	0x01DE25FC ADRP X0, 0x2316000
	0x01DE2600 LDR X0, [X0 + 0xCC0]
	0x01DE2604 BL 0x1C16CF4
	0x01DE2608 ADRP X0, 0x2316000
	0x01DE260C LDR X0, [X0 + 0xCB8]
	0x01DE2610 BL 0x1C16CF4
	0x01DE2614 MOVZ W8, 0x1
	0x01DE2618 STRB W8, [X20 + 0xC8A]
	0x01DE261C LDR X0, [X21]
	0x01DE2620 BL 0x1C16F10
	0x01DE2624 MOV X1, X31
	0x01DE2628 MOV X20, X0
	0x01DE262C BL 0x33BDD8C
	0x01DE2630 CBZ X20, 0x1DE2884
	0x01DE2634 ADRP X22, 0x2316000
	0x01DE2638 LDR X22, [X22 + 0xC40]
	0x01DE263C MOV X0, X19
	0x01DE2640 MOV X1, X31
	0x01DE2644 STR X19, [X20 + 0x10]
	0x01DE2648 BL 0x1DF2AA8
	0x01DE264C LDR X0, [X22]
	0x01DE2650 ADD X21, X19, 0x178
	0x01DE2654 LDR W8, [X0 + 0xE0]
	0x01DE2658 CBNZ W8, 0x1DE2660
	0x01DE265C BL 0x1C16DFC
	0x01DE2660 MOV X0, X19
	0x01DE2664 MOV X1, X21
	0x01DE2668 MOV X2, X31
	0x01DE266C BL 0x1DEA6E8
	0x01DE2670 TBZ X0, 0x0, 0x1DE26EC
	0x01DE2674 LDR X20, [X21]
	0x01DE2678 CBZ X20, 0x1DE2884
	0x01DE267C LDR W1, [X20 + 0x18]
	0x01DE2680 MOV W0, W31
	0x01DE2684 MOV X2, X31
	0x01DE2688 BL 0x3C309A8
	0x01DE268C ADRP X8, 0x2316000
	0x01DE2690 LDR X8, [X8 + 0xC70]
	0x01DE2694 MOV W1, W0
	0x01DE2698 MOV X0, X20
	0x01DE269C LDR X2, [X8]
	0x01DE26A0 BL 0x301BCCC
	0x01DE26A4 LDR X8, [X19]
	0x01DE26A8 MOV X1, X0
	0x01DE26AC MOV X0, X19

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, X1
	013 Move X1, X31
	014 Move X19, X2
	015 Move X20, X0
	016 Call Component.get_transform, X0
	017 Compare X0, 0
	018 JumpIfEqual {121}
	019 Move X1, X31
	020 Call Transform.get_position, X0
	021 Compare X21, 0
	022 JumpIfEqual {121}
	023 Move X0, X21
	024 Move X1, X31
	025 Move V8, V0
	026 Move V9, V1
	027 Move V10, V2
	028 Call Component.get_transform, X0
	029 Compare X0, 0
	030 JumpIfEqual {121}
	031 Move X1, X31
	032 Call Transform.get_position, X0
	033 Move X21, 0x25F7000
	034 Move W8, [X21+2140]
	035 Move V11, V0
	036 Move V12, V1
	037 Move V13, V2
	038 Compare W8, 0
	039 JumpIfNotEqual {45}
	040 Move X0, 0x2312000
	041 Move X0, [X0+1448]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X21+2140], W8
	045 Move X22, 0x2312000
	046 Move X22, [X22+1448]
	047 Subtract S11, S8, S11
	048 Subtract S9, S9, S12
	049 Subtract S8, S10, S13
	050 Move X0, [X22]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Multiply S0, S11, S11
	056 Multiply S1, S9, S9
	057 Add S0, S0, S1
	058 Multiply S1, S8, S8
	059 Add S0, S1, S0
	060 NotImplemented "Instruction FSQRT not yet implemented."
	061 Move X0, X20
	062 Move X1, X31
	063 Move [X31+60], S0
	064 Call Component.get_transform, X0
	065 Compare X0, 0
	066 JumpIfEqual {121}
	067 Move X1, X31
	068 Call Transform.get_position, X0
	069 Compare X19, 0
	070 JumpIfEqual {121}
	071 Move X0, X19
	072 Move X1, X31
	073 Move V8, V0
	074 Move V9, V1
	075 Move V10, V2
	076 Call Component.get_transform, X0
	077 Compare X0, 0
	078 JumpIfEqual {121}
	079 Move X1, X31
	080 Call Transform.get_position, X0
	081 Move W8, [X21+2140]
	082 Move V11, V0
	083 Move V12, V1
	084 Move V13, V2
	085 Compare W8, 0
	086 JumpIfNotEqual {92}
	087 Move X0, 0x2312000
	088 Move X0, [X0+1448]
	089 Call 0x1C17CF4
	090 Move W8, 1
	091 Move [X21+2140], W8
	092 Move X0, [X22]
	093 Subtract S11, S8, S11
	094 Subtract S9, S9, S12
	095 Subtract S8, S10, S13
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1C17DFC
	100 Multiply S0, S11, S11
	101 Multiply S1, S9, S9
	102 Add S0, S0, S1
	103 Multiply S1, S8, S8
	104 Add S0, S1, S0
	105 NotImplemented "Instruction FSQRT not yet implemented."
	106 Add X0, X31, 60
	107 Move X1, X31
	108 Call Single.CompareTo, X0, V0
	109 Move X20, [X31+80]
	110 Move X19, [X31+88]
	111 Move X22, [X31+64]
	112 Move X21, [X31+72]
	113 Move X30, [X31+48]
	114 Move D9, [X31+32]
	115 Move D8, [X31+40]
	116 Move D11, [X31+16]
	117 Move D10, [X31+24]
	118 Move D13, [X31+96]
	119 Move D12, [X31+104]
	120 Return X0
	121 Call 0x1C17F20

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01DE26B0 LDR X9, [X8 + 0x3B8]
	0x01DE26B4 LDR X2, [X8 + 0x3C0]
	0x01DE26B8 BLR X9
	0x01DE26BC LDR X0, [X19 + 0x160]
	0x01DE26C0 CBZ X0, 0x1DE2884
	0x01DE26C4 MOV X1, X31
	0x01DE26C8 BL 0x3C32E90
	0x01DE26CC CBZ X0, 0x1DE2884
	0x01DE26D0 MOV X1, X31
	0x01DE26D4 BL 0x3C3F58C
	0x01DE26D8 MOV X0, X19
	0x01DE26DC LDP X20, X19, [X31 + 0x20]
	0x01DE26E0 LDP X22, X21, [X31 + 0x10]
	0x01DE26E4 LDR X30, [X31], #0x30
	0x01DE26E8 B 0x1DE2894

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 And W1, W1, 1
	004 Move X2, X31
	005 Move X19, X0
	006 Call MobController.CopyBackingFieldsToState, X0, X1
	007 Move W1, [X19+420]
	008 Move X0, X19
	009 Call AnglerController.set_phase, X0, X1
	010 Move V0, [X19+432]
	011 Move X0, X19
	012 Call AnglerController.set_timerAroundLight, X0, V0
	013 Move V0, [X19+436]
	014 Move X0, X19
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Call AnglerController.set_timerAnticipation, X0, V0
	018 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01DE26EC LDR X0, [X22]
	0x01DE26F0 LDR W8, [X0 + 0xE0]
	0x01DE26F4 CBNZ W8, 0x1DE26FC
	0x01DE26F8 BL 0x1C16DFC
	0x01DE26FC MOV X0, X19
	0x01DE2700 MOV X1, X21
	0x01DE2704 MOV X2, X31
	0x01DE2708 BL 0x1DF8094
	0x01DE270C TBZ X0, 0x0, 0x1DE27FC
	0x01DE2710 LDR X8, [X19 + 0xC0]
	0x01DE2714 CBZ X8, 0x1DE2884
	0x01DE2718 LDR X8, [X8 + 0x78]
	0x01DE271C CBZ X8, 0x1DE2884
	0x01DE2720 LDR W9, [X8 + 0x18]
	0x01DE2724 CBZ W9, 0x1DE2888

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.CopyStateToBackingFields, X0
	006 Move X0, X19
	007 Call AnglerController.get_phase, X0
	008 Move [X19+420], W0
	009 Move X0, X19
	010 Call AnglerController.get_timerAroundLight, X0
	011 Move X0, X19
	012 Move [X19+432], S0
	013 Call AnglerController.get_timerAnticipation, X0
	014 Move [X19+436], S0
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return 

Method: System.Void RPC_PlayAttackAnimation@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01DE2728 LDR V0, [X8 + 0x20]
	0x01DE272C ADRP X8, 0x2315000
	0x01DE2730 LDR X8, [X8 + 0xAA0]
	0x01DE2734 FMOV S1, 0.5
	0x01DE2738 FMUL S0, S0, S1
	0x01DE273C STR S0, [X20 + 0x18]
	0x01DE2740 LDR X0, [X8]
	0x01DE2744 LDR X21, [X21]
	0x01DE2748 BL 0x1C16F10
	0x01DE274C ADRP X8, 0x2316000
	0x01DE2750 LDR X8, [X8 + 0xCC0]
	0x01DE2754 MOV X1, X20
	0x01DE2758 MOV X3, X31
	0x01DE275C MOV X22, X0
	0x01DE2760 LDR X2, [X8]
	0x01DE2764 BL 0x2D2F428
	0x01DE2768 ADRP X8, 0x2315000
	0x01DE276C LDR X8, [X8 + 0xA98]
	0x01DE2770 MOV X0, X21
	0x01DE2774 MOV X1, X22
	0x01DE2778 LDR X2, [X8]
	0x01DE277C BL 0x21C570C
	0x01DE2780 ADRP X8, 0x2311000
	0x01DE2784 LDR X8, [X8 + 0x598]
	0x01DE2788 MOV X20, X0
	0x01DE278C LDR X8, [X8]
	0x01DE2790 LDR W9, [X8 + 0xE0]
	0x01DE2794 CBNZ W9, 0x1DE27A0
	0x01DE2798 MOV X0, X8
	0x01DE279C BL 0x1C16DFC
	0x01DE27A0 MOV X0, X20
	0x01DE27A4 MOV X1, X31
	0x01DE27A8 MOV X2, X31
	0x01DE27AC BL 0x3C354F8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25F7000
	005 Move W8, [X20+3205]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2316000
	012 Move X0, [X0+2168]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3205], W8
	016 Compare X19, 0
	017 JumpIfEqual {39}
	018 Move X9, 0x2316000
	019 Move X9, [X9+2168]
	020 Move W8, 1
	021 Move [X19+88], W8
	022 Move X8, [X19]
	023 Move X1, [X9]
	024 Move W10, [X8+304]
	025 Move W9, [X1+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, [X8+200]
	028 Add X8, X8, X9
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Call AnglerController.RPC_PlayAttackAnimation, X0
	036 Return 
	037 Move X0, X19
	038 Call 0x1C181E0
	039 Call 0x1C17F20

