Type: AnimalCompany.AnglerController

Method: AnimalCompany.AnglerController/Phase get_phase()

Disassembly:
	0x01CD9D54 MOV X1, X31
	0x01CD9D58 STR S0, [X31 + 0xC]
	0x01CD9D5C BL 0x3AA5FBC
	0x01CD9D60 MOV V14.16B, V1.16B
	0x01CD9D64 LDR V1, [X31 + 0x1C]
	0x01CD9D68 MOV V8.16B, V0.16B
	0x01CD9D6C MOV V15.16B, V2.16B
	0x01CD9D70 MOV V0.16B, V12.16B
	0x01CD9D74 MOV V2.16B, V13.16B
	0x01CD9D78 MOV X0, X31
	0x01CD9D7C MOV V9.16B, V3.16B
	0x01CD9D80 BL 0x3A92C2C
	0x01CD9D84 MOV X0, X19
	0x01CD9D88 MOV X1, X31
	0x01CD9D8C MOV V11.16B, V0.16B
	0x01CD9D90 MOV V12.16B, V1.16B
	0x01CD9D94 MOV V13.16B, V2.16B
	0x01CD9D98 MOV V10.16B, V3.16B
	0x01CD9D9C BL 0x1CE4CC4
	0x01CD9DA0 LDR V1, [X31 + 0xC]
	0x01CD9DA4 MOV V2.16B, V15.16B
	0x01CD9DA8 MOV V3.16B, V9.16B
	0x01CD9DAC MOV V4.16B, V11.16B
	0x01CD9DB0 FMUL S0, S1, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+60]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2275000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2277000
	016 Move X0, [X0+3408]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2277000
	023 Move X0, [X0+3416]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_phase(AnimalCompany.AnglerController/Phase value)

Disassembly:
	0x01CD9DB4 STR S0, [X31]
	0x01CD9DB8 MOV V0.16B, V8.16B
	0x01CD9DBC MOV V1.16B, V14.16B
	0x01CD9DC0 MOV V5.16B, V12.16B
	0x01CD9DC4 MOV V6.16B, V13.16B
	0x01CD9DC8 MOV V7.16B, V10.16B
	0x01CD9DCC MOV X0, X31
	0x01CD9DD0 BL 0x3A92660
	0x01CD9DD4 CBZ X20, 0x1CD9EF4
	0x01CD9DD8 MOV X0, X20
	0x01CD9DDC MOV X1, X31
	0x01CD9DE0 BL 0x3AA7878
	0x01CD9DE4 LDR X20, [X19 + 0xC8]
	0x01CD9DE8 LDP S8, S10, [X31 + 0x10]
	0x01CD9DEC LDR V9, [X31 + 0x18]
	0x01CD9DF0 CBZ X20, 0x1CD9EF4
	0x01CD9DF4 MOV X0, X20
	0x01CD9DF8 MOV X1, X31
	0x01CD9DFC BL 0x3A4AC10
	0x01CD9E00 MOV X0, X19
	0x01CD9E04 MOV X1, X31
	0x01CD9E08 FMUL S8, S8, S0
	0x01CD9E0C FMUL S9, S9, S0
	0x01CD9E10 FMUL S10, S10, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+60], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2275000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2277000
	016 Move X0, [X0+3408]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2277000
	023 Move X0, [X0+3424]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Single get_timerAroundLight()

Disassembly:
	0x01CD9E14 BL 0x1CE4CC4
	0x01CD9E18 FMUL S3, S8, S0
	0x01CD9E1C FMUL S1, S9, S0
	0x01CD9E20 FMUL S2, S10, S0
	0x01CD9E24 MOV X0, X20
	0x01CD9E28 MOV V0.16B, V3.16B
	0x01CD9E2C MOV X1, X31
	0x01CD9E30 BL 0x3A4AABC
	0x01CD9E34 MOV X0, X19
	0x01CD9E38 MOV X1, X31
	0x01CD9E3C BL 0x1CE4BFC
	0x01CD9E40 MOV X0, X19
	0x01CD9E44 MOV X1, X31
	0x01CD9E48 MOV V8.16B, V0.16B
	0x01CD9E4C MOV V9.16B, V1.16B
	0x01CD9E50 MOV V10.16B, V2.16B
	0x01CD9E54 BL 0x3A9B084
	0x01CD9E58 CBZ X0, 0x1CD9EF4
	0x01CD9E5C MOV X1, X31
	0x01CD9E60 BL 0x3AA7658
	0x01CD9E64 FSUB S0, S8, S0
	0x01CD9E68 FSUB S1, S9, S1
	0x01CD9E6C FSUB S2, S10, S2
	0x01CD9E70 FMUL S0, S0, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+64]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2275000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2277000
	016 Move X0, [X0+3432]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2277000
	023 Move X0, [X0+3440]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_timerAroundLight(System.Single value)

Disassembly:
	0x01CD9E74 FMUL S1, S1, S1
	0x01CD9E78 FMUL S2, S2, S2
	0x01CD9E7C FADD S0, S0, S1
	0x01CD9E80 FADD S0, S2, S0
	0x01CD9E84 FMOV S1, 2
	0x01CD9E88 FCMP S0, S1
	0x01CD9E8C B.PL 0x1CD9ECC
	0x01CD9E90 LDR X0, [X21]
	0x01CD9E94 LDR X20, [X19 + 0x178]
	0x01CD9E98 LDR W8, [X0 + 0xE0]
	0x01CD9E9C CBNZ W8, 0x1CD9EA4
	0x01CD9EA0 BL 0x1B6E8F8
	0x01CD9EA4 MOV X0, X20
	0x01CD9EA8 MOV X1, X31
	0x01CD9EAC MOV X2, X31
	0x01CD9EB0 BL 0x3A9D6EC
	0x01CD9EB4 TBZ X0, 0x0, 0x1CD9EC4
	0x01CD9EB8 MOV X0, X19
	0x01CD9EBC BL 0x1CDAC64
	0x01CD9EC0 B 0x1CD9ECC
	0x01CD9EC4 MOV X0, X19
	0x01CD9EC8 BL 0x1CD9014
	0x01CD9ECC LDP X20, X19, [X31 + 0xD0]
	0x01CD9ED0 LDP X22, X21, [X31 + 0xC0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+64], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2275000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2277000
	016 Move X0, [X0+3432]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2277000
	023 Move X0, [X0+3448]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Single get_timerAnticipation()

Disassembly:
	0x01CD9ED4 LDP X24, X23, [X31 + 0xB0]
	0x01CD9ED8 LDR X30, [X31 + 0xA0]
	0x01CD9EDC LDP D9, D8, [X31 + 0x90]
	0x01CD9EE0 LDP D11, D10, [X31 + 0x80]
	0x01CD9EE4 LDP D13, D12, [X31 + 0x70]
	0x01CD9EE8 LDP D15, D14, [X31 + 0x60]
	0x01CD9EEC ADD X31, X31, 0xE0
	0x01CD9EF0 RET
	0x01CD9EF4 BL 0x1B6EA1C
	0x01CD9EF8 BL 0x1B6EA24
	0x01CD9EFC B 0x1CD9F00
	0x01CD9F00 MOV X21, X0
	0x01CD9F04 CMP W1, 0x1
	0x01CD9F08 B.NE 0x1CD9F3C
	0x01CD9F0C MOV X0, X21
	0x01CD9F10 BL 0x3D19840
	0x01CD9F14 LDR X20, [X0]
	0x01CD9F18 BL 0x3D19850
	0x01CD9F1C ADRP X8, 0x2276000
	0x01CD9F20 LDR X8, [X8 + 0xDA8]
	0x01CD9F24 ADD X0, X31, 0x40
	0x01CD9F28 LDR X1, [X8]
	0x01CD9F2C BL 0x2A14F2C
	0x01CD9F30 CBZ X20, 0x1CD96CC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+68]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2275000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2277000
	016 Move X0, [X0+3456]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2277000
	023 Move X0, [X0+3464]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_timerAnticipation(System.Single value)

Disassembly:
	0x01CD9F34 MOV X0, X20
	0x01CD9F38 BL 0x1B6EA14
	0x01CD9F3C MOV X20, X31
	0x01CD9F40 B 0x1CD9F48
	0x01CD9F44 MOV X21, X0
	0x01CD9F48 ADRP X8, 0x2276000
	0x01CD9F4C LDR X8, [X8 + 0xDA8]
	0x01CD9F50 LDR X1, [X8]
	0x01CD9F54 ADD X0, X31, 0x40
	0x01CD9F58 BL 0x2A14F2C
	0x01CD9F5C CBNZ X20, 0x1CD9F68
	0x01CD9F60 MOV X0, X21
	0x01CD9F64 BL 0x1C8418C
	0x01CD9F68 MOV X0, X20
	0x01CD9F6C BL 0x1B6EA14
	0x01CD9F70 BL 0x18F46A8
	0x01CD9F74 SUB X31, X31, 0xB0
	0x01CD9F78 STP D13, D12, [X31 + 0x50]
	0x01CD9F7C STP D11, D10, [X31 + 0x60]
	0x01CD9F80 STP D9, D8, [X31 + 0x70]
	0x01CD9F84 STR X30, [X31 + 0x80]
	0x01CD9F88 STP X22, X21, [X31 + 0x90]
	0x01CD9F8C STP X20, X19, [X31 + 0xA0]
	0x01CD9F90 ADRP X20, 0x254A000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+68], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2275000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2277000
	016 Move X0, [X0+3456]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2277000
	023 Move X0, [X0+3472]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: UnityEngine.Vector3 get__attackPosition()

Disassembly:
	0x01CD9F94 LDRB W8, [X20 + 0x616]
	0x01CD9F98 MOV X19, X0
	0x01CD9F9C TBNZ X8, 0x0, 0x1CD9FE4
	0x01CD9FA0 ADRP X0, 0x2276000
	0x01CD9FA4 LDR X0, [X0 + 0xDA8]
	0x01CD9FA8 BL 0x1B6E7F0
	0x01CD9FAC ADRP X0, 0x2276000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+208]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Transform.get_position, X0
	008 Return X0
	009 Call 0x1B6FA1C

Method: System.Void Setup()

Disassembly:
	0x01CD9FB0 LDR X0, [X0 + 0xDB0]
	0x01CD9FB4 BL 0x1B6E7F0
	0x01CD9FB8 ADRP X0, 0x2276000
	0x01CD9FBC LDR X0, [X0 + 0xDB8]
	0x01CD9FC0 BL 0x1B6E7F0
	0x01CD9FC4 ADRP X0, 0x2276000
	0x01CD9FC8 LDR X0, [X0 + 0xDC0]
	0x01CD9FCC BL 0x1B6E7F0
	0x01CD9FD0 ADRP X0, 0x2274000
	0x01CD9FD4 LDR X0, [X0 + 0x478]
	0x01CD9FD8 BL 0x1B6E7F0
	0x01CD9FDC MOVZ W8, 0x1
	0x01CD9FE0 STRB W8, [X20 + 0x616]
	0x01CD9FE4 STR X31, [X31 + 0x88]
	0x01CD9FE8 STP X31, X31, [X31 + 0x30]
	0x01CD9FEC STR X31, [X31 + 0x40]
	0x01CD9FF0 STR X31, [X31 + 0x28]
	0x01CD9FF4 LDR X0, [X19 + 0xD0]
	0x01CD9FF8 CBZ X0, 0x1CDA3A4
	0x01CD9FFC MOV X1, X31
	0x01CDA000 BL 0x3AA7658
	0x01CDA004 LDR X8, [X19 + 0xB8]
	0x01CDA008 CBZ X8, 0x1CDA3A4
	0x01CDA00C LDR X8, [X8 + 0x78]
	0x01CDA010 CBZ X8, 0x1CDA3A4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.Setup, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {34}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {17}
	015 Move X0, X19
	016 Call AnglerController.SetRoaming, X0
	017 Move X0, [X19+200]
	018 Compare X0, 0
	019 JumpIfEqual {34}
	020 Move W1, 1
	021 Move X2, X31
	022 Call NavMeshAgent.set_updatePosition, X0, X1
	023 Move X0, [X19+200]
	024 Compare X0, 0
	025 JumpIfEqual {34}
	026 Move W1, 1
	027 Move X2, X31
	028 Call NavMeshAgent.set_updateRotation, X0, X1
	029 Move X0, X19
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Call AnglerController.HandlePhaseChanged, X0
	033 Return 
	034 Call 0x1B6FA1C

Method: System.Void HandleRevive()

Disassembly:
	0x01CDA210 LDR W8, [X0 + 0xE0]
	0x01CDA214 CBNZ W8, 0x1CDA21C
	0x01CDA218 BL 0x1B6E8F8
	0x01CDA21C MOV X0, X20
	0x01CDA220 MOV X1, X21
	0x01CDA224 MOV X2, X31
	0x01CDA228 BL 0x3A9D6EC
	0x01CDA22C TBZ X0, 0x0, 0x1CDA270
	0x01CDA230 LDR X8, [X19]
	0x01CDA234 LDR X1, [X31 + 0x28]
	0x01CDA238 MOV X0, X19
	0x01CDA23C LDR X9, [X8 + 0x398]
	0x01CDA240 LDR X2, [X8 + 0x3A0]
	0x01CDA244 BLR X9
	0x01CDA248 LDR X0, [X31 + 0x28]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleRevive, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {23}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {20}
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call AnglerController.SetRoaming, X0
	019 Return 
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return 
	023 Call 0x1B6FA1C

Method: System.Void HandleDie()

Disassembly:
	0x01CDA24C CBZ X0, 0x1CDA3A4
	0x01CDA250 MOV X1, X31
	0x01CDA254 BL 0x3A9B084
	0x01CDA258 CBZ X0, 0x1CDA3A4
	0x01CDA25C MOV X1, X31
	0x01CDA260 BL 0x3AA7658
	0x01CDA264 MOV X0, X19
	0x01CDA268 BL 0x1CDAA60
	0x01CDA26C B 0x1CDA384
	0x01CDA270 MOV X0, X19
	0x01CDA274 BL 0x1CD8E14
	0x01CDA278 MOV X0, X19
	0x01CDA27C MOV X1, X31
	0x01CDA280 MOV V8.16B, V0.16B
	0x01CDA284 BL 0x1CE4CC4
	0x01CDA288 FADD S0, S8, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleDie, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {24}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {21}
	015 Move W1, 6
	016 Move X0, X19
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Call AnglerController.set_phase, X0, X1
	020 Return 
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return 
	024 Call 0x1B6FA1C

Method: System.Void SetTargetFlashlight(AnimalCompany.Flashlight flashlight)

Disassembly:
	0x01CDA28C MOV X0, X19
	0x01CDA290 BL 0x1CD8E74

ISIL:
	001 Move [X0+376], X1
	002 Return 

Method: System.Void HandlePhaseChanged()

Disassembly:
	0x01CDA0C4 CBNZ W8, 0x1CDA0CC
	0x01CDA0C8 BL 0x1B6E8F8
	0x01CDA0CC MOV X0, X20
	0x01CDA0D0 MOV X1, X31
	0x01CDA0D4 MOV X2, X31
	0x01CDA0D8 BL 0x3A9D6EC
	0x01CDA0DC TBZ X0, 0x0, 0x1CDA1A4
	0x01CDA0E0 LDR X0, [X19 + 0x178]
	0x01CDA0E4 CBZ X0, 0x1CDA3A4
	0x01CDA0E8 MOV X1, X31
	0x01CDA0EC BL 0x3A9B084
	0x01CDA0F0 CBZ X0, 0x1CDA3A4
	0x01CDA0F4 MOV X1, X31
	0x01CDA0F8 BL 0x3AA7658
	0x01CDA0FC LDR X0, [X19 + 0xD0]
	0x01CDA100 CBZ X0, 0x1CDA3A4
	0x01CDA104 MOV X1, X31
	0x01CDA108 MOV V8.16B, V0.16B
	0x01CDA10C MOV V9.16B, V1.16B
	0x01CDA110 MOV V10.16B, V2.16B
	0x01CDA114 BL 0x3AA7658
	0x01CDA118 ADRP X20, 0x2549000
	0x01CDA11C LDRB W8, [X20 + 0x506]
	0x01CDA120 MOV V11.16B, V0.16B
	0x01CDA124 MOV V12.16B, V1.16B
	0x01CDA128 MOV V13.16B, V2.16B
	0x01CDA12C CBNZ W8, 0x1CDA144
	0x01CDA130 ADRP X0, 0x2273000
	0x01CDA134 LDR X0, [X0 + 0x488]
	0x01CDA138 BL 0x1B6E7F0
	0x01CDA13C MOVZ W8, 0x1
	0x01CDA140 STRB W8, [X20 + 0x506]
	0x01CDA144 ADRP X8, 0x2273000
	0x01CDA148 LDR X8, [X8 + 0x488]
	0x01CDA14C LDR X0, [X8]
	0x01CDA150 LDR W8, [X0 + 0xE0]
	0x01CDA154 CBNZ W8, 0x1CDA15C
	0x01CDA158 BL 0x1B6E8F8
	0x01CDA15C LDR X8, [X19 + 0xB8]
	0x01CDA160 CBZ X8, 0x1CDA3A4
	0x01CDA164 LDR X8, [X8 + 0x78]
	0x01CDA168 CBZ X8, 0x1CDA3A4
	0x01CDA16C LDR W9, [X8 + 0x18]
	0x01CDA170 CBZ W9, 0x1CDA3A8
	0x01CDA174 FSUB S0, S8, S11
	0x01CDA178 FSUB S1, S9, S12
	0x01CDA17C FSUB S2, S10, S13
	0x01CDA180 LDR V3, [X8 + 0x20]
	0x01CDA184 FMUL S0, S0, S0
	0x01CDA188 FMUL S1, S1, S1
	0x01CDA18C FADD S0, S0, S1
	0x01CDA190 FMUL S1, S2, S2
	0x01CDA194 FADD S0, S1, S0
	0x01CDA198 FSQRT S0, S0
	0x01CDA19C FCMP S0, S3
	0x01CDA1A0 B.MI 0x1CDA270
	0x01CDA1A4 LDR X0, [X19 + 0xD0]
	0x01CDA1A8 CBZ X0, 0x1CDA3A4
	0x01CDA1AC MOV X1, X31
	0x01CDA1B0 BL 0x3AA7658
	0x01CDA1B4 LDR X0, [X19 + 0xD0]
	0x01CDA1B8 CBZ X0, 0x1CDA3A4
	0x01CDA1BC MOV X1, X31
	0x01CDA1C0 MOV V8.16B, V0.16B
	0x01CDA1C4 MOV V9.16B, V1.16B
	0x01CDA1C8 MOV V10.16B, V2.16B
	0x01CDA1CC BL 0x3AA7AD0
	0x01CDA1D0 LDR X8, [X19 + 0xB8]
	0x01CDA1D4 CBZ X8, 0x1CDA3A4
	0x01CDA1D8 LDR V6, [X8 + 0x80]
	0x01CDA1DC MOV V3.16B, V0.16B
	0x01CDA1E0 MOV V4.16B, V1.16B
	0x01CDA1E4 MOV V5.16B, V2.16B
	0x01CDA1E8 ADD X0, X31, 0x28
	0x01CDA1EC MOV V0.16B, V8.16B
	0x01CDA1F0 MOV V1.16B, V9.16B
	0x01CDA1F4 MOV V2.16B, V10.16B
	0x01CDA1F8 MOV X1, X31
	0x01CDA1FC BL 0x1CE92BC
	0x01CDA200 TBZ X0, 0x0, 0x1CDA324
	0x01CDA204 LDR X0, [X22]
	0x01CDA208 LDR X20, [X19 + 0x178]
	0x01CDA20C LDR X21, [X31 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Call AnglerController.get_phase, X0
	007 Subtract W8, W0, 1
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X9, -18796544
	010 Add X9, X9, 2348
	011 NotImplemented "Instruction ADR not yet implemented."
	012 Move W11, [X9]
	013 Add X10, X10, X11
	014 CallNoReturn X10
	015 Move X0, [X19+192]
	016 Compare X0, 0
	017 JumpIfEqual {95}
	018 Move X8, [X0]
	019 Move X9, [X8+456]
	020 Move X1, [X8+464]
	021 Move X0, [X19+192]
	022 Compare X0, 0
	023 JumpIfEqual {95}
	024 Move X8, [X0]
	025 Move S0, 1
	026 Move X9, [X8+456]
	027 Move X1, [X8+464]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move X8, [X19+392]
	030 Compare X8, 0
	031 JumpIfEqual {95}
	032 Move X0, [X8+192]
	033 Compare X0, 0
	034 JumpIfEqual {95}
	035 Move X1, X31
	036 Call AudioSource.Play, X0
	037 Move X0, [X19+192]
	038 Compare X0, 0
	039 JumpIfEqual {95}
	040 Move X8, [X0]
	041 Move X9, [X8+488]
	042 Move X1, [X8+496]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move X0, [X19+192]
	045 Compare X0, 0
	046 JumpIfEqual {95}
	047 Move X8, [X0]
	048 Move X9, [X8+472]
	049 Move X1, [X8+480]
	050 Move S0, 1
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Move X20, [X19+392]
	053 Move X0, X19
	054 Call AnglerController.get_phase, X0
	055 Compare X20, 0
	056 JumpIfEqual {95}
	057 NotImplemented "Instruction CMP not yet implemented."
	058 NotImplemented "Instruction CSET not yet implemented."
	059 Move S0, 1
	060 Move X0, X20
	061 Call AnglerView.PlayRunningSound, X0, X1, V0
	062 Move X20, [X19+392]
	063 Move X0, X19
	064 Call AnglerController.get_phase, X0
	065 Compare X20, 0
	066 JumpIfEqual {95}
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move S0, 1.5
	069 Move S1, 3.5
	070 NotImplemented "Instruction FCSEL not yet implemented."
	071 Move [X20+224], S0
	072 Move X20, [X19+392]
	073 Move X0, X19
	074 Call AnglerController.get_phase, X0
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move W21, 1
	077 Move X0, X19
	078 Call AnglerController.get_phase, X0
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction CSET not yet implemented."
	081 Move X0, X19
	082 Call AnglerController.get_phase, X0
	083 Compare X20, 0
	084 JumpIfEqual {95}
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X0, X20
	087 Move X20, [X31+16]
	088 Move X19, [X31+24]
	089 NotImplemented "Instruction CSET not yet implemented."
	090 Move W1, W21
	091 Move X30, [X31+32]
	092 Move X21, [X31+40]
	093 Call AnglerView.SetGlow, X0, X1, X2
	094 Return 
	095 Call 0x1B6FA1C

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01CDA464 MOV V8.16B, V0.16B
	0x01CDA468 MOV V9.16B, V1.16B
	0x01CDA46C MOV V10.16B, V2.16B
	0x01CDA470 BL 0x3A9B084
	0x01CDA474 CBZ X0, 0x1CDA81C
	0x01CDA478 MOV X1, X31
	0x01CDA47C BL 0x3AA7658
	0x01CDA480 ADRP X21, 0x2549000
	0x01CDA484 LDRB W8, [X21 + 0x441]
	0x01CDA488 MOV V11.16B, V0.16B
	0x01CDA48C MOV V12.16B, V1.16B
	0x01CDA490 MOV V13.16B, V2.16B
	0x01CDA494 CBNZ W8, 0x1CDA4AC
	0x01CDA498 ADRP X0, 0x2273000
	0x01CDA49C LDR X0, [X0 + 0x488]
	0x01CDA4A0 BL 0x1B6E7F0
	0x01CDA4A4 MOVZ W8, 0x1
	0x01CDA4A8 STRB W8, [X21 + 0x441]
	0x01CDA4AC ADRP X20, 0x2273000
	0x01CDA4B0 LDR X20, [X20 + 0x488]
	0x01CDA4B4 FSUB S14, S8, S11
	0x01CDA4B8 FSUB S9, S9, S12
	0x01CDA4BC FSUB S8, S10, S13
	0x01CDA4C0 LDR X0, [X20]
	0x01CDA4C4 LDR W8, [X0 + 0xE0]
	0x01CDA4C8 CBNZ W8, 0x1CDA4D0
	0x01CDA4CC BL 0x1B6E8F8
	0x01CDA4D0 ADRP X8, 0xFFFFFFFFFEDCF000
	0x01CDA4D4 FMUL S0, S14, S14
	0x01CDA4D8 FMUL S1, S9, S9
	0x01CDA4DC LDR V11, [X8 + 0xB64]
	0x01CDA4E0 ADRP X22, 0x2273000
	0x01CDA4E4 FMUL S2, S8, S8
	0x01CDA4E8 FADD S0, S0, S1
	0x01CDA4EC LDR X22, [X22 + 0x480]
	0x01CDA4F0 FADD S0, S2, S0
	0x01CDA4F4 FSQRT S2, S0
	0x01CDA4F8 FCMP S2, S11
	0x01CDA4FC ADRP X23, 0x2549000
	0x01CDA500 B.LE 0x1CDA514
	0x01CDA504 FDIV S0, S14, S2
	0x01CDA508 FDIV S1, S9, S2
	0x01CDA50C FDIV S2, S8, S2
	0x01CDA510 B 0x1CDA540
	0x01CDA514 LDRB W8, [X23 + 0x43F]
	0x01CDA518 CBNZ W8, 0x1CDA530
	0x01CDA51C ADRP X0, 0x2273000
	0x01CDA520 LDR X0, [X0 + 0x480]
	0x01CDA524 BL 0x1B6E7F0
	0x01CDA528 MOVZ W8, 0x1
	0x01CDA52C STRB W8, [X23 + 0x43F]
	0x01CDA530 LDR X8, [X22]
	0x01CDA534 LDR X8, [X8 + 0xB8]
	0x01CDA538 LDP S0, S1, [X8]
	0x01CDA53C LDR V2, [X8 + 0x8]
	0x01CDA540 MOV X0, X31
	0x01CDA544 BL 0x1CC086C
	0x01CDA548 LDRB W8, [X21 + 0x441]
	0x01CDA54C MOV V8.16B, V0.16B
	0x01CDA550 MOV V9.16B, V1.16B
	0x01CDA554 MOV V10.16B, V2.16B
	0x01CDA558 CBNZ W8, 0x1CDA570
	0x01CDA55C ADRP X0, 0x2273000
	0x01CDA560 LDR X0, [X0 + 0x488]
	0x01CDA564 BL 0x1B6E7F0
	0x01CDA568 MOVZ W8, 0x1
	0x01CDA56C STRB W8, [X21 + 0x441]
	0x01CDA570 LDR X0, [X20]
	0x01CDA574 LDR W8, [X0 + 0xE0]
	0x01CDA578 CBNZ W8, 0x1CDA580
	0x01CDA57C BL 0x1B6E8F8
	0x01CDA580 FMUL S0, S8, S8
	0x01CDA584 FMUL S1, S9, S9

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x254A000
	006 Move W8, [X20+1555]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2276000
	013 Move X0, [X0+3488]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+1555], W8
	017 Move X0, X19
	018 Move X1, X31
	019 Call MobController.FixedUpdateNetwork, X0
	020 Move X0, X19
	021 Move X1, X31
	022 Call MobController.get__updateValid, X0
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {79}
	027 Move X0, X19
	028 Call AnglerController.get_phase, X0
	029 Subtract W8, W0, 1
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X9, -18796544
	032 Add X9, X9, 2353
	033 NotImplemented "Instruction ADR not yet implemented."
	034 Move W11, [X9]
	035 Add X10, X10, X11
	036 CallNoReturn X10
	037 Move X8, [X19]
	038 Move X9, [X8+808]
	039 Move X1, [X8+816]
	040 Move X0, X19
	041 Call AnglerController.UpdateLightDetected, X0
	042 Move X0, X19
	043 Call AnglerController.UpdateAroundLight, X0
	044 Move X0, X19
	045 Call AnglerController.UpdateAnticipation, X0
	046 Move X8, [X19]
	047 Move X9, [X8+840]
	048 Move X1, [X8+848]
	049 Move X0, X19
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Call GameManager.get_isDebug
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {79}
	056 Move X20, [X19+360]
	057 Compare X20, 0
	058 JumpIfEqual {79}
	059 Move X0, X19
	060 Call AnglerController.get_phase, X0
	061 Move X8, 0x2276000
	062 Move X8, [X8+3488]
	063 Move TEMP, 0
	064 Not TEMP
	065 Move X9, TEMP
	066 Move [X31+24], W0
	067 Add X0, X31, 8
	068 Move X8, [X8]
	069 Move X1, X31
	070 Move [X31+8], X8
	071 Move [X31+16], X9
	072 Call Enum.ToString, X0
	073 Move X8, [X20+64]
	074 Move X9, [X20+24]
	075 Move X2, [X20+40]
	076 Move X1, X0
	077 Move X0, X8
	078 NotImplemented "Instruction BLR not yet implemented."
	079 Move X20, [X31+48]
	080 Move X19, [X31+56]
	081 Move X30, [X31+32]
	082 Add X31, X31, 64
	083 Return 

Method: System.Void SetRoaming()

Disassembly:
	0x01CDA014 LDR W9, [X8 + 0x18]
	0x01CDA018 CBZ W9, 0x1CDA3A8
	0x01CDA01C LDR V3, [X8 + 0x20]
	0x01CDA020 ADD X1, X31, 0x88
	0x01CDA024 MOV X0, X19
	0x01CDA028 MOV X2, X31
	0x01CDA02C BL 0x1CE8C04
	0x01CDA030 TBZ X0, 0x0, 0x1CDA0B0
	0x01CDA034 LDR X0, [X31 + 0x88]
	0x01CDA038 CBZ X0, 0x1CDA3A4
	0x01CDA03C ADRP X8, 0x2275000
	0x01CDA040 LDR X8, [X8 + 0xDC0]
	0x01CDA044 LDR X1, [X8]
	0x01CDA048 ADD X8, X31, 0x10
	0x01CDA04C BL 0x2E470E0
	0x01CDA050 ADRP X9, 0x2275000
	0x01CDA054 LDR V0, [X31 + 0x1]
	0x01CDA058 LDR X8, [X31 + 0x20]
	0x01CDA05C LDR X9, [X9 + 0xDB0]
	0x01CDA060 STR V0, [X31 + 0x3]
	0x01CDA064 STR X8, [X31 + 0x40]
	0x01CDA068 LDR X1, [X9]
	0x01CDA06C ADD X0, X31, 0x30
	0x01CDA070 BL 0x2A14F30
	0x01CDA074 TBZ X0, 0x0, 0x1CDA09C
	0x01CDA078 LDR X1, [X31 + 0x40]
	0x01CDA07C MOV X0, X19
	0x01CDA080 BL 0x1CDAB50
	0x01CDA084 ADRP X8, 0x2275000
	0x01CDA088 LDR X8, [X8 + 0xDA8]
	0x01CDA08C ADD X0, X31, 0x30
	0x01CDA090 LDR X1, [X8]
	0x01CDA094 BL 0x2A14F2C
	0x01CDA098 B 0x1CDA384
	0x01CDA09C ADRP X8, 0x2275000
	0x01CDA0A0 LDR X8, [X8 + 0xDA8]
	0x01CDA0A4 ADD X0, X31, 0x30
	0x01CDA0A8 LDR X1, [X8]
	0x01CDA0AC BL 0x2A14F2C
	0x01CDA0B0 ADRP X22, 0x2273000
	0x01CDA0B4 LDR X22, [X22 + 0x478]
	0x01CDA0B8 LDR X20, [X19 + 0x178]
	0x01CDA0BC LDR X0, [X22]
	0x01CDA0C0 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 1
	004 Move X19, X0
	005 Call AnglerController.set_phase, X0, X1
	006 Move X8, [X19]
	007 Move X0, X19
	008 Move X1, X31
	009 Move X9, [X8+824]
	010 Move X2, [X8+832]
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Move X9, [X19+184]
	013 Compare X9, 0
	014 JumpIfEqual {52}
	015 Move X8, [X9+48]
	016 Compare X8, 0
	017 JumpIfEqual {52}
	018 Move W10, [X8+24]
	019 Compare W10, 0
	020 JumpIfEqual {53}
	021 Move X10, [X9+88]
	022 Compare X10, 0
	023 JumpIfEqual {52}
	024 Move W11, [X10+24]
	025 Compare W11, 0
	026 JumpIfEqual {53}
	027 Move X9, [X9+96]
	028 Compare X9, 0
	029 JumpIfEqual {52}
	030 Move W11, [X9+24]
	031 Compare W11, 0
	032 JumpIfEqual {53}
	033 Move X11, [X19]
	034 Move V0, [X8+32]
	035 Move V1, [X10+32]
	036 Move V2, [X9+32]
	037 Move X8, [X11+680]
	038 Move X2, [X11+688]
	039 Move X0, X19
	040 Move W1, W31
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move X8, [X19]
	043 Move W1, 1
	044 Move X0, X19
	045 Move X9, [X8+776]
	046 Move X2, [X8+784]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move [X19+224], W31
	049 Move X30, [X31+16]
	050 Move X19, [X31+24]
	051 Return 
	052 Call 0x1B6FA1C
	053 Call 0x1B6FA24

Method: System.Void UpdateRoaming()

Disassembly:
	0x01CDB820 MOV X1, X31
	0x01CDB824 MOV X2, X31
	0x01CDB828 BL 0x3A9D6EC
	0x01CDB82C TBZ X0, 0x0, 0x1CDB844
	0x01CDB830 LDR X0, [X19 + 0x178]
	0x01CDB834 CBZ X0, 0x1CDBBB4
	0x01CDB838 MOV W1, W31
	0x01CDB83C MOV X2, X31
	0x01CDB840 BL 0x1C9D8D0
	0x01CDB844 ADD X1, X31, 0x48
	0x01CDB848 MOV X0, X19
	0x01CDB84C MOV X2, X31
	0x01CDB850 BL 0x1CE85FC
	0x01CDB854 TBZ X0, 0x0, 0x1CDBB88
	0x01CDB858 LDR X0, [X31 + 0x48]
	0x01CDB85C CBZ X0, 0x1CDBBB4
	0x01CDB860 ADRP X8, 0x2274000
	0x01CDB864 LDR X8, [X8 + 0xDF0]
	0x01CDB868 MOV W1, W31
	0x01CDB86C LDR X2, [X8]
	0x01CDB870 BL 0x2E46254
	0x01CDB874 LDR X8, [X19]
	0x01CDB878 MOV X1, X0
	0x01CDB87C MOV X0, X19
	0x01CDB880 LDR X9, [X8 + 0x338]
	0x01CDB884 LDR X2, [X8 + 0x340]
	0x01CDB888 BLR X9
	0x01CDB88C LDR X0, [X19 + 0x140]
	0x01CDB890 CBNZ X0, 0x1CDB0F4
	0x01CDB894 B 0x1CDBBB4
	0x01CDB898 LDRB W8, [X23 + 0x43F]
	0x01CDB89C CBNZ W8, 0x1CDB8B4
	0x01CDB8A0 ADRP X0, 0x2272000
	0x01CDB8A4 LDR X0, [X0 + 0x480]
	0x01CDB8A8 BL 0x1B6E7F0
	0x01CDB8AC MOVZ W8, 0x1
	0x01CDB8B0 STRB W8, [X23 + 0x43F]
	0x01CDB8B4 LDR X8, [X22]
	0x01CDB8B8 LDR X8, [X8 + 0xB8]
	0x01CDB8BC LDP S10, S14, [X8]
	0x01CDB8C0 LDR V15, [X8 + 0x8]
	0x01CDB8C4 MOV V0.16B, V10.16B
	0x01CDB8C8 MOV V1.16B, V14.16B
	0x01CDB8CC MOV V2.16B, V15.16B
	0x01CDB8D0 MOV X0, X31
	0x01CDB8D4 BL 0x1CC086C
	0x01CDB8D8 LDRB W8, [X21 + 0x441]
	0x01CDB8DC MOV V8.16B, V0.16B
	0x01CDB8E0 MOV V12.16B, V1.16B
	0x01CDB8E4 MOV V13.16B, V2.16B
	0x01CDB8E8 CBNZ W8, 0x1CDB900
	0x01CDB8EC ADRP X0, 0x2272000
	0x01CDB8F0 LDR X0, [X0 + 0x488]
	0x01CDB8F4 BL 0x1B6E7F0
	0x01CDB8F8 MOVZ W8, 0x1
	0x01CDB8FC STRB W8, [X21 + 0x441]
	0x01CDB900 LDR X0, [X20]
	0x01CDB904 LDR W8, [X0 + 0xE0]
	0x01CDB908 CBNZ W8, 0x1CDB910
	0x01CDB90C BL 0x1B6E8F8
	0x01CDB910 FMUL S0, S8, S8
	0x01CDB914 FMUL S1, S12, S12
	0x01CDB918 FADD S0, S0, S1
	0x01CDB91C FMUL S1, S13, S13
	0x01CDB920 FADD S0, S1, S0
	0x01CDB924 FSQRT S0, S0
	0x01CDB928 FCMP S0, S9
	0x01CDB92C B.LE 0x1CDB944
	0x01CDB930 FDIV S1, S12, S0
	0x01CDB934 FDIV S9, S8, S0
	0x01CDB938 STR S1, [X31 + 0x24]
	0x01CDB93C FDIV S13, S13, S0
	0x01CDB940 B 0x1CDB974
	0x01CDB944 LDRB W8, [X23 + 0x43F]
	0x01CDB948 CBNZ W8, 0x1CDB960
	0x01CDB94C ADRP X0, 0x2272000
	0x01CDB950 LDR X0, [X0 + 0x480]
	0x01CDB954 BL 0x1B6E7F0
	0x01CDB958 MOVZ W8, 0x1
	0x01CDB95C STRB W8, [X23 + 0x43F]
	0x01CDB960 LDR X8, [X22]
	0x01CDB964 LDR X8, [X8 + 0xB8]
	0x01CDB968 LDP S9, S0, [X8]
	0x01CDB96C LDR V13, [X8 + 0x8]
	0x01CDB970 STR S0, [X31 + 0x24]
	0x01CDB974 LDR X8, [X19 + 0xB8]
	0x01CDB978 CBZ X8, 0x1CDBBB4
	0x01CDB97C LDR V11, [X8 + 0x40]
	0x01CDB980 MOV X0, X19
	0x01CDB984 MOV X1, X31
	0x01CDB988 STP S15, S14, [X31 + 0x1C]
	0x01CDB98C BL 0x3A9B084
	0x01CDB990 CBZ X0, 0x1CDBBB4
	0x01CDB994 MOV X1, X31
	0x01CDB998 STR S10, [X31 + 0x18]
	0x01CDB99C BL 0x3AA7AD0
	0x01CDB9A0 ADRP X21, 0x2548000
	0x01CDB9A4 LDRB W8, [X21 + 0x457]
	0x01CDB9A8 MOV V14.16B, V0.16B
	0x01CDB9AC MOV V15.16B, V1.16B
	0x01CDB9B0 MOV V8.16B, V2.16B
	0x01CDB9B4 CBNZ W8, 0x1CDB9CC
	0x01CDB9B8 ADRP X0, 0x2272000
	0x01CDB9BC LDR X0, [X0 + 0x488]
	0x01CDB9C0 BL 0x1B6E7F0
	0x01CDB9C4 MOVZ W8, 0x1
	0x01CDB9C8 STRB W8, [X21 + 0x457]
	0x01CDB9CC LDR V1, [X31 + 0x24]
	0x01CDB9D0 LDR X0, [X20]
	0x01CDB9D4 FMUL S0, S9, S9
	0x01CDB9D8 MOV V12.16B, V9.16B
	0x01CDB9DC FMUL S1, S1, S1
	0x01CDB9E0 FADD S0, S0, S1
	0x01CDB9E4 FMUL S1, S13, S13
	0x01CDB9E8 LDR W8, [X0 + 0xE0]
	0x01CDB9EC FADD S10, S1, S0
	0x01CDB9F0 FMUL S0, S14, S14
	0x01CDB9F4 FMUL S1, S15, S15
	0x01CDB9F8 FADD S0, S0, S1
	0x01CDB9FC FMUL S1, S8, S8
	0x01CDBA00 FADD S9, S1, S0
	0x01CDBA04 CBNZ W8, 0x1CDBA0C
	0x01CDBA08 BL 0x1B6E8F8
	0x01CDBA0C ADRP X8, 0xFFFFFFFFFEDCE000
	0x01CDBA10 LDR V1, [X8 + 0x9E4]
	0x01CDBA14 FMUL S0, S10, S9
	0x01CDBA18 FSQRT S0, S0
	0x01CDBA1C FMOV S10, W31
	0x01CDBA20 FCMP S0, S1
	0x01CDBA24 B.MI 0x1CDBA80
	0x01CDBA28 LDR V2, [X31 + 0x24]
	0x01CDBA2C LDR X0, [X20]
	0x01CDBA30 FMUL S1, S12, S14
	0x01CDBA34 FMUL S3, S13, S8
	0x01CDBA38 FMUL S2, S2, S15
	0x01CDBA3C FADD S1, S1, S2
	0x01CDBA40 FADD S1, S3, S1
	0x01CDBA44 LDR W8, [X0 + 0xE0]
	0x01CDBA48 FDIV S0, S1, S0
	0x01CDBA4C FMOV S1, 1
	0x01CDBA50 FMOV S2, -1
	0x01CDBA54 FMIN S1, S0, S1
	0x01CDBA58 FCMP S0, S2
	0x01CDBA5C FCSEL S8, S1, S2, PL

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], D10
	003 Move [X31+56], D9
	004 Move [X31+64], D8
	005 Move [X31+72], X30
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X20, 0x2549000
	009 Move W8, [X20+1556]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x2275000
	016 Move X0, [X0+3496]
	017 Call 0x1B6F7F0
	018 Move X0, 0x2275000
	019 Move X0, [X0+3504]
	020 Call 0x1B6F7F0
	021 Move X0, 0x2275000
	022 Move X0, [X0+3512]
	023 Call 0x1B6F7F0
	024 Move X0, 0x2275000
	025 Move X0, [X0+3520]
	026 Call 0x1B6F7F0
	027 Move W8, 1
	028 Move [X20+1556], W8
	029 Move X0, X19
	030 Move X1, X31
	031 Move [X31+32], X31
	032 Move [X31+40], X31
	033 Move [X31+8], X31
	034 Move [X31+16], X31
	035 Move [X31+24], X31
	036 Call MobController.UpdateRoaming, X0
	037 Move X0, [X19+208]
	038 Compare X0, 0
	039 JumpIfEqual {140}
	040 Move X1, X31
	041 Call Transform.get_position, X0
	042 Move X0, [X19+208]
	043 Compare X0, 0
	044 JumpIfEqual {140}
	045 Move X1, X31
	046 Move V8, V0
	047 Move V9, V1
	048 Move V10, V2
	049 Call Transform.get_forward, X0
	050 Move X8, [X19+184]
	051 Compare X8, 0
	052 JumpIfEqual {140}
	053 Move V6, [X8+128]
	054 Move V3, V0
	055 Move V4, V1
	056 Move V5, V2
	057 Add X0, X31, 40
	058 Move V0, V8
	059 Move V1, V9
	060 Move V2, V10
	061 Move X1, X31
	062 Call MobDetectionUtil.TryGetAnyLightBySight, X0, X1, V0, X2
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {84}
	067 Move X8, [X19]
	068 Move X1, [X31+40]
	069 Move X0, X19
	070 Move X9, [X8+920]
	071 Move X2, [X8+928]
	072 NotImplemented "Instruction BLR not yet implemented."
	073 Move X0, [X31+40]
	074 Compare X0, 0
	075 JumpIfEqual {140}
	076 Move X1, X31
	077 Call Component.get_transform, X0
	078 Compare X0, 0
	079 JumpIfEqual {140}
	080 Move X1, X31
	081 Call Transform.get_position, X0
	082 Move X0, X19
	083 Call AnglerController.SetLightDetected, X0, X1
	084 Move X0, [X19+208]
	085 Compare X0, 0
	086 JumpIfEqual {140}
	087 Move X1, X31
	088 Call Transform.get_position, X0
	089 Move X8, [X19+184]
	090 Compare X8, 0
	091 JumpIfEqual {140}
	092 Move X8, [X8+120]
	093 Compare X8, 0
	094 JumpIfEqual {140}
	095 Move W9, [X8+24]
	096 Compare W9, 0
	097 JumpIfEqual {141}
	098 Move V3, [X8+32]
	099 Add X1, X31, 32
	100 Move X0, X19
	101 Move X2, X31
	102 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {132}
	107 Move X0, [X31+32]
	108 Compare X0, 0
	109 JumpIfEqual {140}
	110 Move X8, 0x2275000
	111 Move X8, [X8+3520]
	112 Move X1, [X8]
	113 Add X8, X31, 8
	114 Call List`1<Object>.GetEnumerator, X0
	115 Move X8, 0x2275000
	116 Move X8, [X8+3504]
	117 Move X1, [X8]
	118 Add X0, X31, 8
	119 Call Enumerator<Object>.MoveNext, X0
	120 Move TEMP, X0
	121 And TEMP, TEMP, 1
	122 Compare TEMP, 1
	123 JumpIfNotEqual {127}
	124 Move X1, [X31+24]
	125 Move X0, X19
	126 Call AnglerController.SetAnticipation, X0, X1
	127 Move X8, 0x2275000
	128 Move X8, [X8+3496]
	129 Add X0, X31, 8
	130 Move X1, [X8]
	131 Call Enumerator<Object>.Dispose, X0
	132 Move X20, [X31+80]
	133 Move X19, [X31+88]
	134 Move X30, [X31+72]
	135 Move D9, [X31+56]
	136 Move D8, [X31+64]
	137 Move V10, [X31+48]
	138 Add X31, X31, 96
	139 Return 
	140 Call 0x1B6FA1C
	141 Call 0x1B6FA24
	142 Move X20, X0
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Move X0, X20
	145 Call 0x3D1A840
	146 Move X19, [X0]
	147 Call 0x3D1A850
	148 Move X8, 0x2275000
	149 Move X8, [X8+3496]
	150 Add X0, X31, 8
	151 Move X1, [X8]
	152 Call Enumerator<Object>.Dispose, X0
	153 Compare X19, 0
	154 JumpIfEqual {132}
	155 Move X0, X19
	156 Call 0x1B6FA14
	157 Move X19, X31
	158 Move X20, X0
	159 Move X8, 0x2275000
	160 Move X8, [X8+3496]
	161 Move X1, [X8]
	162 Add X0, X31, 8
	163 Call Enumerator<Object>.Dispose, X0
	164 Compare X19, 0
	165 JumpIfNotEqual {168}
	166 Move X0, X20
	167 Call 0x1C8518C
	168 Move X0, X19
	169 Call 0x1B6FA14
	170 Call 0x18F56A8

Method: System.Void SetLightDetected(UnityEngine.Vector3 lightPosition)

Disassembly:
	0x01CDBA60 CBNZ W8, 0x1CDBA68
	0x01CDBA64 BL 0x1B6E8F8
	0x01CDBA68 FCVT S0, S8
	0x01CDBA6C BL 0x3D19890
	0x01CDBA70 ADRP X8, 0xFFFFFFFFFEDCE000
	0x01CDBA74 LDR V1, [X8 + 0xE1C]
	0x00000000 INVALID
	0x01CDBA7C FMUL S10, S0, S1
	0x01CDBA80 MOV X0, X19
	0x01CDBA84 MOV X1, X31
	0x01CDBA88 BL 0x3A9B084
	0x01CDBA8C MOV X20, X0
	0x01CDBA90 MOV X0, X19
	0x01CDBA94 MOV X1, X31
	0x01CDBA98 BL 0x3A9B084
	0x01CDBA9C CBZ X0, 0x1CDBBB4
	0x01CDBAA0 FDIV S0, S11, S10
	0x01CDBAA4 MOV X1, X31
	0x01CDBAA8 STR S0, [X31 + 0x14]
	0x01CDBAAC BL 0x3AA5FBC
	0x01CDBAB0 MOV V14.16B, V1.16B
	0x01CDBAB4 LDR V1, [X31 + 0x24]
	0x01CDBAB8 MOV V8.16B, V0.16B
	0x01CDBABC MOV V15.16B, V2.16B
	0x01CDBAC0 MOV V0.16B, V12.16B
	0x01CDBAC4 MOV V2.16B, V13.16B
	0x01CDBAC8 MOV X0, X31
	0x01CDBACC MOV V9.16B, V3.16B
	0x01CDBAD0 BL 0x3A92C2C
	0x01CDBAD4 MOV X0, X19
	0x01CDBAD8 MOV X1, X31
	0x01CDBADC MOV V11.16B, V0.16B
	0x01CDBAE0 MOV V12.16B, V1.16B
	0x01CDBAE4 MOV V13.16B, V2.16B
	0x01CDBAE8 MOV V10.16B, V3.16B
	0x01CDBAEC BL 0x1CE4CC4
	0x01CDBAF0 LDR V1, [X31 + 0x14]
	0x01CDBAF4 MOV V2.16B, V15.16B
	0x01CDBAF8 MOV V3.16B, V9.16B
	0x01CDBAFC MOV V4.16B, V11.16B
	0x01CDBB00 FMUL S0, S1, S0
	0x01CDBB04 STR S0, [X31]
	0x01CDBB08 MOV V0.16B, V8.16B
	0x01CDBB0C MOV V1.16B, V14.16B
	0x01CDBB10 MOV V5.16B, V12.16B
	0x01CDBB14 MOV V6.16B, V13.16B
	0x01CDBB18 MOV V7.16B, V10.16B
	0x01CDBB1C MOV X0, X31
	0x01CDBB20 BL 0x3A92660
	0x01CDBB24 CBZ X20, 0x1CDBBB4
	0x01CDBB28 MOV X0, X20
	0x01CDBB2C MOV X1, X31
	0x01CDBB30 BL 0x3AA7878
	0x01CDBB34 LDR X20, [X19 + 0xC8]
	0x01CDBB38 LDP S8, S10, [X31 + 0x18]
	0x01CDBB3C LDR V9, [X31 + 0x20]
	0x01CDBB40 CBZ X20, 0x1CDBBB4
	0x01CDBB44 MOV X0, X20
	0x01CDBB48 MOV X1, X31
	0x01CDBB4C BL 0x3A4AC10

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W1, 2
	008 Move V8, V2
	009 Move V9, V1
	010 Move V10, V0
	011 Move X19, X0
	012 Call AnglerController.set_phase, X0, X1
	013 Move X8, [X19]
	014 Move X0, X19
	015 Move X1, X31
	016 Move X9, [X8+824]
	017 Move X2, [X8+832]
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move X10, [X19+184]
	020 Compare X10, 0
	021 JumpIfEqual {72}
	022 Move X8, [X10+48]
	023 Compare X8, 0
	024 JumpIfEqual {72}
	025 Move W9, [X8+24]
	026 Compare W9, 0
	027 JumpIfEqual {73}
	028 Move X9, [X10+88]
	029 Compare X9, 0
	030 JumpIfEqual {72}
	031 Move W11, [X9+24]
	032 Compare W11, 0
	033 JumpIfEqual {73}
	034 Move X10, [X10+96]
	035 Compare X10, 0
	036 JumpIfEqual {72}
	037 Move W11, [X10+24]
	038 Compare W11, 0
	039 JumpIfEqual {73}
	040 Move X11, [X19]
	041 Move V0, [X8+32]
	042 Move V1, [X9+32]
	043 Move V2, [X10+32]
	044 Move X8, [X11+680]
	045 Move X2, [X11+688]
	046 Move X0, X19
	047 Move W1, W31
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move X0, X19
	050 Move V0, V10
	051 Move V1, V9
	052 Move V2, V8
	053 Move X1, X31
	054 Move [X19+224], W31
	055 Call MobController.set__positionThatPlayerStayed, X0, X1
	056 Move X20, [X19+200]
	057 Move X0, X19
	058 Move X1, X31
	059 Call MobController.get__positionThatPlayerStayed, X0
	060 Compare X20, 0
	061 JumpIfEqual {72}
	062 Move X0, X20
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X30, [X31+24]
	066 Move D9, [X31+8]
	067 Move D8, [X31+16]
	068 Move X1, X31
	069 Move V10, [X31+48]
	070 Call NavMeshAgent.SetDestination, X0, X1
	071 Return 
	072 Call 0x1B6FA1C
	073 Call 0x1B6FA24

Method: System.Void UpdateLightDetected()

Disassembly:
	0x01CDA588 FADD S0, S0, S1
	0x01CDA58C FMUL S1, S10, S10
	0x01CDA590 FADD S0, S1, S0
	0x01CDA594 FSQRT S0, S0
	0x01CDA598 FCMP S0, S11
	0x01CDA59C B.LE 0x1CDA5B0
	0x01CDA5A0 FDIV S8, S8, S0
	0x01CDA5A4 FDIV S9, S9, S0
	0x01CDA5A8 FDIV S10, S10, S0
	0x01CDA5AC B 0x1CDA5DC
	0x01CDA5B0 LDRB W8, [X23 + 0x43F]
	0x01CDA5B4 CBNZ W8, 0x1CDA5CC
	0x01CDA5B8 ADRP X0, 0x2273000
	0x01CDA5BC LDR X0, [X0 + 0x480]
	0x01CDA5C0 BL 0x1B6E7F0
	0x01CDA5C4 MOVZ W8, 0x1
	0x01CDA5C8 STRB W8, [X23 + 0x43F]
	0x01CDA5CC LDR X8, [X22]
	0x01CDA5D0 LDR X8, [X8 + 0xB8]
	0x01CDA5D4 LDP S8, S9, [X8]
	0x01CDA5D8 LDR V10, [X8 + 0x8]
	0x01CDA5DC LDR X8, [X19 + 0xB8]
	0x01CDA5E0 CBZ X8, 0x1CDA81C
	0x01CDA5E4 LDR V11, [X8 + 0x40]
	0x01CDA5E8 MOV X0, X19
	0x01CDA5EC MOV X1, X31
	0x01CDA5F0 BL 0x3A9B084
	0x01CDA5F4 CBZ X0, 0x1CDA81C
	0x01CDA5F8 MOV X1, X31
	0x01CDA5FC STR S11, [X31 + 0xC]
	0x01CDA600 BL 0x3AA7AD0
	0x01CDA604 ADRP X21, 0x2549000
	0x01CDA608 LDRB W8, [X21 + 0x457]
	0x01CDA60C MOV V11.16B, V0.16B
	0x01CDA610 MOV V12.16B, V1.16B
	0x01CDA614 MOV V13.16B, V2.16B
	0x01CDA618 CBNZ W8, 0x1CDA630
	0x01CDA61C ADRP X0, 0x2273000
	0x01CDA620 LDR X0, [X0 + 0x488]
	0x01CDA624 BL 0x1B6E7F0
	0x01CDA628 MOVZ W8, 0x1
	0x01CDA62C STRB W8, [X21 + 0x457]
	0x01CDA630 LDR X0, [X20]
	0x01CDA634 FMUL S0, S8, S8
	0x01CDA638 FMUL S1, S9, S9
	0x01CDA63C FADD S0, S0, S1
	0x01CDA640 FMUL S1, S10, S10
	0x01CDA644 LDR W8, [X0 + 0xE0]
	0x01CDA648 FADD S15, S1, S0
	0x01CDA64C FMUL S0, S11, S11
	0x01CDA650 FMUL S1, S12, S12
	0x01CDA654 FADD S0, S0, S1
	0x01CDA658 FMUL S1, S13, S13
	0x01CDA65C FADD S14, S1, S0
	0x01CDA660 CBNZ W8, 0x1CDA668
	0x01CDA664 BL 0x1B6E8F8
	0x01CDA668 ADRP X8, 0xFFFFFFFFFEDCF000
	0x01CDA66C LDR V1, [X8 + 0x9E4]
	0x01CDA670 FMUL S0, S15, S14
	0x01CDA674 FSQRT S0, S0
	0x01CDA678 FMOV S15, W31
	0x01CDA67C FCMP S0, S1
	0x01CDA680 B.MI 0x1CDA6D8
	0x01CDA684 LDR X0, [X20]
	0x01CDA688 FMUL S1, S8, S11
	0x01CDA68C FMUL S2, S9, S12
	0x01CDA690 FMUL S3, S10, S13
	0x01CDA694 FADD S1, S1, S2
	0x01CDA698 FADD S1, S3, S1
	0x01CDA69C LDR W8, [X0 + 0xE0]
	0x01CDA6A0 FDIV S0, S1, S0
	0x01CDA6A4 FMOV S1, 1
	0x01CDA6A8 FMOV S2, -1
	0x01CDA6AC FMIN S1, S0, S1
	0x01CDA6B0 FCMP S0, S2
	0x01CDA6B4 FCSEL S11, S1, S2, PL
	0x01CDA6B8 CBNZ W8, 0x1CDA6C0
	0x01CDA6BC BL 0x1B6E8F8
	0x01CDA6C0 FCVT S0, S11
	0x01CDA6C4 BL 0x3D19890
	0x01CDA6C8 ADRP X8, 0xFFFFFFFFFEDCF000
	0x01CDA6CC LDR V1, [X8 + 0xE1C]
	0x00000000 INVALID
	0x01CDA6D4 FMUL S15, S0, S1
	0x01CDA6D8 MOV X0, X19
	0x01CDA6DC MOV X1, X31
	0x01CDA6E0 BL 0x3A9B084
	0x01CDA6E4 MOV X20, X0
	0x01CDA6E8 MOV X0, X19
	0x01CDA6EC MOV X1, X31
	0x01CDA6F0 BL 0x3A9B084
	0x01CDA6F4 CBZ X0, 0x1CDA81C
	0x01CDA6F8 LDR V0, [X31 + 0xC]
	0x01CDA6FC MOV X1, X31
	0x01CDA700 FDIV S0, S0, S15
	0x01CDA704 STR S0, [X31 + 0xC]
	0x01CDA708 BL 0x3AA5FBC
	0x01CDA70C MOV V11.16B, V0.16B
	0x01CDA710 MOV V12.16B, V1.16B
	0x01CDA714 MOV V13.16B, V2.16B
	0x01CDA718 MOV V0.16B, V8.16B
	0x01CDA71C MOV V1.16B, V9.16B
	0x01CDA720 MOV V2.16B, V10.16B
	0x01CDA724 MOV X0, X31
	0x01CDA728 MOV V14.16B, V3.16B
	0x01CDA72C BL 0x3A92C2C
	0x01CDA730 MOV X0, X19
	0x01CDA734 MOV X1, X31
	0x01CDA738 MOV V8.16B, V0.16B
	0x01CDA73C MOV V9.16B, V1.16B
	0x01CDA740 MOV V10.16B, V2.16B
	0x01CDA744 MOV V15.16B, V3.16B
	0x01CDA748 BL 0x1CE4CC4
	0x01CDA74C LDR V1, [X31 + 0xC]
	0x01CDA750 MOV V2.16B, V13.16B
	0x01CDA754 MOV V3.16B, V14.16B
	0x01CDA758 MOV V4.16B, V8.16B
	0x01CDA75C FMUL S0, S1, S0
	0x01CDA760 STR S0, [X31]
	0x01CDA764 MOV V0.16B, V11.16B
	0x01CDA768 MOV V1.16B, V12.16B
	0x01CDA76C MOV V5.16B, V9.16B
	0x01CDA770 MOV V6.16B, V10.16B
	0x01CDA774 MOV V7.16B, V15.16B
	0x01CDA778 MOV X0, X31
	0x01CDA77C BL 0x3A92660
	0x01CDA780 CBZ X20, 0x1CDA81C
	0x01CDA784 MOV X0, X20
	0x01CDA788 MOV X1, X31
	0x01CDA78C BL 0x3AA7878
	0x01CDA790 MOV X0, X19
	0x01CDA794 BL 0x1CD8ED4
	0x01CDA798 MOV X0, X19
	0x01CDA79C MOV X1, X31
	0x01CDA7A0 MOV V8.16B, V0.16B
	0x01CDA7A4 BL 0x1CE4CC4
	0x01CDA7A8 FADD S0, S8, S0
	0x01CDA7AC MOV X0, X19
	0x01CDA7B0 BL 0x1CD8F34
	0x01CDA7B4 MOV X0, X19
	0x01CDA7B8 BL 0x1CD8ED4
	0x01CDA7BC ADRP X8, 0xFFFFFFFFFEDCF000
	0x01CDA7C0 LDR V1, [X8 + 0xA24]
	0x01CDA7C4 FCMP S0, S1
	0x01CDA7C8 B.GE 0x1CDA7F0
	0x01CDA7CC LDP X20, X19, [X31 + 0x70]
	0x01CDA7D0 LDP X22, X21, [X31 + 0x60]
	0x01CDA7D4 LDP X30, X23, [X31 + 0x50]
	0x01CDA7D8 LDP D9, D8, [X31 + 0x40]
	0x01CDA7DC LDP D11, D10, [X31 + 0x30]
	0x01CDA7E0 LDP D13, D12, [X31 + 0x20]
	0x01CDA7E4 LDP D15, D14, [X31 + 0x10]
	0x01CDA7E8 ADD X31, X31, 0x80
	0x01CDA7EC RET
	0x01CDA7F0 LDR X1, [X19 + 0x140]
	0x01CDA7F4 MOV X0, X19
	0x01CDA7F8 LDP X20, X19, [X31 + 0x70]
	0x01CDA7FC LDP X22, X21, [X31 + 0x60]
	0x01CDA800 LDP X30, X23, [X31 + 0x50]
	0x01CDA804 LDP D9, D8, [X31 + 0x40]
	0x01CDA808 LDP D11, D10, [X31 + 0x30]
	0x01CDA80C LDP D13, D12, [X31 + 0x20]
	0x01CDA810 LDP D15, D14, [X31 + 0x10]
	0x01CDA814 ADD X31, X31, 0x80
	0x01CDA818 B 0x1CDADD8
	0x01CDA81C BL 0x1B6EA1C
	0x01CDA820 SUB X31, X31, 0x60
	0x01CDA824 STR D10, [X31 + 0x30]
	0x01CDA828 STP D9, D8, [X31 + 0x38]
	0x01CDA82C STR X30, [X31 + 0x48]
	0x01CDA830 STP X20, X19, [X31 + 0x50]
	0x01CDA834 ADRP X20, 0x2549000
	0x01CDA838 LDRB W8, [X20 + 0x614]
	0x01CDA83C MOV X19, X0
	0x01CDA840 TBNZ X8, 0x0, 0x1CDA87C
	0x01CDA844 ADRP X0, 0x2275000
	0x01CDA848 LDR X0, [X0 + 0xDA8]
	0x01CDA84C BL 0x1B6E7F0
	0x01CDA850 ADRP X0, 0x2275000
	0x01CDA854 LDR X0, [X0 + 0xDB0]
	0x01CDA858 BL 0x1B6E7F0
	0x01CDA85C ADRP X0, 0x2275000
	0x01CDA860 LDR X0, [X0 + 0xDB8]
	0x01CDA864 BL 0x1B6E7F0
	0x01CDA868 ADRP X0, 0x2275000
	0x01CDA86C LDR X0, [X0 + 0xDC0]
	0x01CDA870 BL 0x1B6E7F0
	0x01CDA874 MOVZ W8, 0x1
	0x01CDA878 STRB W8, [X20 + 0x614]
	0x01CDA87C MOV X0, X19
	0x01CDA880 MOV X1, X31
	0x01CDA884 STP X31, X31, [X31 + 0x20]
	0x01CDA888 STP X31, X31, [X31 + 0x8]
	0x01CDA88C STR X31, [X31 + 0x18]
	0x01CDA890 BL 0x1CE67C8
	0x01CDA894 LDR X0, [X19 + 0xD0]
	0x01CDA898 CBZ X0, 0x1CDA9E0
	0x01CDA89C MOV X1, X31
	0x01CDA8A0 BL 0x3AA7658
	0x01CDA8A4 LDR X0, [X19 + 0xD0]
	0x01CDA8A8 CBZ X0, 0x1CDA9E0
	0x01CDA8AC MOV X1, X31
	0x01CDA8B0 MOV V8.16B, V0.16B
	0x01CDA8B4 MOV V9.16B, V1.16B
	0x01CDA8B8 MOV V10.16B, V2.16B
	0x01CDA8BC BL 0x3AA7AD0
	0x01CDA8C0 LDR X8, [X19 + 0xB8]
	0x01CDA8C4 CBZ X8, 0x1CDA9E0
	0x01CDA8C8 LDR V6, [X8 + 0x80]
	0x01CDA8CC MOV V3.16B, V0.16B
	0x01CDA8D0 MOV V4.16B, V1.16B
	0x01CDA8D4 MOV V5.16B, V2.16B
	0x01CDA8D8 ADD X0, X31, 0x28
	0x01CDA8DC MOV V0.16B, V8.16B
	0x01CDA8E0 MOV V1.16B, V9.16B
	0x01CDA8E4 MOV V2.16B, V10.16B
	0x01CDA8E8 MOV X1, X31
	0x01CDA8EC BL 0x1CE92BC
	0x01CDA8F0 TBZ X0, 0x0, 0x1CDA934
	0x01CDA8F4 LDR X8, [X19]
	0x01CDA8F8 LDR X1, [X31 + 0x28]
	0x01CDA8FC MOV X0, X19
	0x01CDA900 LDR X9, [X8 + 0x398]
	0x01CDA904 LDR X2, [X8 + 0x3A0]
	0x01CDA908 BLR X9
	0x01CDA90C LDR X0, [X31 + 0x28]
	0x01CDA910 CBZ X0, 0x1CDA9E0
	0x01CDA914 MOV X1, X31
	0x01CDA918 BL 0x3A9B084
	0x01CDA91C CBZ X0, 0x1CDA9E0
	0x01CDA920 MOV X1, X31
	0x01CDA924 BL 0x3AA7658
	0x01CDA928 MOV X0, X19
	0x01CDA92C BL 0x1CDAA60
	0x01CDA930 B 0x1CDA9C8
	0x01CDA934 LDR X0, [X19 + 0xD0]
	0x01CDA938 CBZ X0, 0x1CDA9E0
	0x01CDA93C MOV X1, X31
	0x01CDA940 BL 0x3AA7658
	0x01CDA944 LDR X8, [X19 + 0xB8]
	0x01CDA948 CBZ X8, 0x1CDA9E0
	0x01CDA94C LDR X8, [X8 + 0x78]
	0x01CDA950 CBZ X8, 0x1CDA9E0
	0x01CDA954 LDR W9, [X8 + 0x18]
	0x01CDA958 CBZ W9, 0x1CDA9E4
	0x01CDA95C LDR V3, [X8 + 0x20]
	0x01CDA960 ADD X1, X31, 0x20
	0x01CDA964 MOV X0, X19
	0x01CDA968 MOV X2, X31
	0x01CDA96C BL 0x1CE8C04
	0x01CDA970 TBZ X0, 0x0, 0x1CDA9C8
	0x01CDA974 LDR X0, [X31 + 0x20]
	0x01CDA978 CBZ X0, 0x1CDA9E0
	0x01CDA97C ADRP X8, 0x2275000
	0x01CDA980 LDR X8, [X8 + 0xDC0]
	0x01CDA984 LDR X1, [X8]
	0x01CDA988 ADD X8, X31, 0x8
	0x01CDA98C BL 0x2E470E0
	0x01CDA990 ADRP X8, 0x2275000
	0x01CDA994 LDR X8, [X8 + 0xDB0]
	0x01CDA998 LDR X1, [X8]
	0x01CDA99C ADD X0, X31, 0x8
	0x01CDA9A0 BL 0x2A14F30
	0x01CDA9A4 TBZ X0, 0x0, 0x1CDA9B4
	0x01CDA9A8 LDR X1, [X31 + 0x18]
	0x01CDA9AC MOV X0, X19
	0x01CDA9B0 BL 0x1CDAB50
	0x01CDA9B4 ADRP X8, 0x2275000
	0x01CDA9B8 LDR X8, [X8 + 0xDA8]
	0x01CDA9BC ADD X0, X31, 0x8
	0x01CDA9C0 LDR X1, [X8]
	0x01CDA9C4 BL 0x2A14F2C
	0x01CDA9C8 LDP X20, X19, [X31 + 0x50]
	0x01CDA9CC LDR X30, [X31 + 0x48]
	0x01CDA9D0 LDP D9, D8, [X31 + 0x38]
	0x01CDA9D4 LDR V10, [X31 + 0x30]
	0x01CDA9D8 ADD X31, X31, 0x60
	0x01CDA9DC RET
	0x01CDA9E0 BL 0x1B6EA1C
	0x01CDA9E4 BL 0x1B6EA24
	0x01CDA9E8 B 0x1CDA9EC
	0x01CDA9EC MOV X20, X0
	0x01CDA9F0 CMP W1, 0x1
	0x01CDA9F4 B.NE 0x1CDAA28
	0x01CDA9F8 MOV X0, X20
	0x01CDA9FC BL 0x3D19840
	0x01CDAA00 LDR X19, [X0]
	0x01CDAA04 BL 0x3D19850
	0x01CDAA08 ADRP X8, 0x2275000
	0x01CDAA0C LDR X8, [X8 + 0xDA8]
	0x01CDAA10 ADD X0, X31, 0x8
	0x01CDAA14 LDR X1, [X8]
	0x01CDAA18 BL 0x2A14F2C
	0x01CDAA1C CBZ X19, 0x1CDA9C8
	0x01CDAA20 MOV X0, X19
	0x01CDAA24 BL 0x1B6EA14
	0x01CDAA28 MOV X19, X31
	0x01CDAA2C B 0x1CDAA34
	0x01CDAA30 MOV X20, X0
	0x01CDAA34 ADRP X8, 0x2275000
	0x01CDAA38 LDR X8, [X8 + 0xDA8]
	0x01CDAA3C LDR X1, [X8]
	0x01CDAA40 ADD X0, X31, 0x8
	0x01CDAA44 BL 0x2A14F2C
	0x01CDAA48 CBNZ X19, 0x1CDAA54
	0x01CDAA4C MOV X0, X20
	0x01CDAA50 BL 0x1C8418C
	0x01CDAA54 MOV X0, X19
	0x01CDAA58 BL 0x1B6EA14
	0x01CDAA5C BL 0x18F46A8
	0x01CDAA60 STR D10, [X31 - 0x30]!
	0x01CDAA64 STP D9, D8, [X31 + 0x8]
	0x01CDAA68 STR X30, [X31 + 0x18]
	0x01CDAA6C STP X20, X19, [X31 + 0x20]
	0x01CDAA70 MOVZ W1, 0x2
	0x01CDAA74 MOV V8.16B, V2.16B
	0x01CDAA78 MOV V9.16B, V1.16B
	0x01CDAA7C MOV V10.16B, V0.16B
	0x01CDAA80 MOV X19, X0
	0x01CDAA84 BL 0x1CD8DB4
	0x01CDAA88 LDR X8, [X19]
	0x01CDAA8C MOV X0, X19
	0x01CDAA90 MOV X1, X31
	0x01CDAA94 LDR X9, [X8 + 0x338]
	0x01CDAA98 LDR X2, [X8 + 0x340]
	0x01CDAA9C BLR X9
	0x01CDAAA0 LDR X10, [X19 + 0xB8]
	0x01CDAAA4 CBZ X10, 0x1CDAB48
	0x01CDAAA8 LDR X8, [X10 + 0x30]
	0x01CDAAAC CBZ X8, 0x1CDAB48
	0x01CDAAB0 LDR W9, [X8 + 0x18]
	0x01CDAAB4 CBZ W9, 0x1CDAB4C
	0x01CDAAB8 LDR X9, [X10 + 0x58]
	0x01CDAABC CBZ X9, 0x1CDAB48
	0x01CDAAC0 LDR W11, [X9 + 0x18]
	0x01CDAAC4 CBZ W11, 0x1CDAB4C
	0x01CDAAC8 LDR X10, [X10 + 0x60]
	0x01CDAACC CBZ X10, 0x1CDAB48
	0x01CDAAD0 LDR W11, [X10 + 0x18]
	0x01CDAAD4 CBZ W11, 0x1CDAB4C
	0x01CDAAD8 LDR X11, [X19]
	0x01CDAADC LDR V0, [X8 + 0x20]
	0x01CDAAE0 LDR V1, [X9 + 0x20]
	0x01CDAAE4 LDR V2, [X10 + 0x20]
	0x01CDAAE8 LDR X8, [X11 + 0x2A8]
	0x01CDAAEC LDR X2, [X11 + 0x2B0]
	0x01CDAAF0 MOV X0, X19
	0x01CDAAF4 MOV W1, W31
	0x01CDAAF8 BLR X8
	0x01CDAAFC MOV X0, X19
	0x01CDAB00 MOV V0.16B, V10.16B
	0x01CDAB04 MOV V1.16B, V9.16B
	0x01CDAB08 MOV V2.16B, V8.16B
	0x01CDAB0C MOV X1, X31
	0x01CDAB10 STR W31, [X19 + 0xE0]
	0x01CDAB14 BL 0x1CE4C60
	0x01CDAB18 LDR X20, [X19 + 0xC8]
	0x01CDAB1C MOV X0, X19
	0x01CDAB20 MOV X1, X31
	0x01CDAB24 BL 0x1CE4BFC
	0x01CDAB28 CBZ X20, 0x1CDAB48
	0x01CDAB2C MOV X0, X20
	0x01CDAB30 LDP X20, X19, [X31 + 0x20]
	0x01CDAB34 LDR X30, [X31 + 0x18]
	0x01CDAB38 LDP D9, D8, [X31 + 0x8]
	0x01CDAB3C MOV X1, X31
	0x01CDAB40 LDR V10, [X31], #0x30
	0x01CDAB44 B 0x3A4A810
	0x01CDAB48 BL 0x1B6EA1C
	0x01CDAB4C BL 0x1B6EA24
	0x01CDAB50 STR X30, [X31 - 0x30]!
	0x01CDAB54 STP X22, X21, [X31 + 0x10]
	0x01CDAB58 STP X20, X19, [X31 + 0x20]
	0x01CDAB5C ADRP X22, 0x2549000
	0x01CDAB60 ADRP X21, 0x2273000
	0x01CDAB64 LDRB W8, [X22 + 0x617]
	0x01CDAB68 LDR X21, [X21 + 0x478]
	0x01CDAB6C MOV X20, X1
	0x01CDAB70 MOV X19, X0
	0x01CDAB74 TBNZ X8, 0x0, 0x1CDAB8C
	0x01CDAB78 ADRP X0, 0x2273000
	0x01CDAB7C LDR X0, [X0 + 0x478]
	0x01CDAB80 BL 0x1B6E7F0
	0x01CDAB84 MOVZ W8, 0x1
	0x01CDAB88 STRB W8, [X22 + 0x617]
	0x01CDAB8C LDR X8, [X19]
	0x01CDAB90 MOV X0, X19
	0x01CDAB94 MOV X1, X20
	0x01CDAB98 LDR X9, [X8 + 0x338]
	0x01CDAB9C LDR X2, [X8 + 0x340]
	0x01CDABA0 BLR X9
	0x01CDABA4 LDR X0, [X21]
	0x01CDABA8 LDR W8, [X0 + 0xE0]
	0x01CDABAC CBNZ W8, 0x1CDABB4
	0x01CDABB0 BL 0x1B6E8F8
	0x01CDABB4 MOV X0, X20
	0x01CDABB8 MOV X1, X31
	0x01CDABBC MOV X2, X31
	0x01CDABC0 BL 0x3A9D6EC
	0x01CDABC4 TBZ X0, 0x0, 0x1CDABF0
	0x01CDABC8 CBZ X20, 0x1CDAC04
	0x01CDABCC MOV X0, X20
	0x01CDABD0 MOV X1, X31
	0x01CDABD4 BL 0x3A9B084
	0x01CDABD8 CBZ X0, 0x1CDAC04
	0x01CDABDC MOV X1, X31
	0x01CDABE0 BL 0x3AA7658
	0x01CDABE4 MOV X0, X19
	0x01CDABE8 MOV X1, X31
	0x01CDABEC BL 0x1CE4C60
	0x01CDABF0 MOV X0, X19
	0x01CDABF4 LDP X20, X19, [X31 + 0x20]
	0x01CDABF8 LDP X22, X21, [X31 + 0x10]
	0x01CDABFC LDR X30, [X31], #0x30
	0x01CDAC00 B 0x1CDAD44
	0x01CDAC04 BL 0x1B6EA1C
	0x01CDAC08 STR D10, [X31 - 0x30]!
	0x01CDAC0C STP D9, D8, [X31 + 0x10]
	0x01CDAC10 STP X30, X19, [X31 + 0x20]
	0x01CDAC14 LDR X8, [X0]
	0x01CDAC18 MOV X1, X31
	0x01CDAC1C MOV V8.16B, V2.16B
	0x01CDAC20 MOV V9.16B, V1.16B
	0x01CDAC24 LDR X9, [X8 + 0x338]
	0x01CDAC28 LDR X2, [X8 + 0x340]
	0x01CDAC2C MOV X19, X0
	0x01CDAC30 MOV V10.16B, V0.16B
	0x01CDAC34 BLR X9
	0x01CDAC38 MOV X0, X19
	0x01CDAC3C MOV V0.16B, V10.16B
	0x01CDAC40 MOV V1.16B, V9.16B
	0x01CDAC44 MOV V2.16B, V8.16B
	0x01CDAC48 MOV X1, X31
	0x01CDAC4C BL 0x1CE4C60
	0x01CDAC50 MOV X0, X19
	0x01CDAC54 LDP X30, X19, [X31 + 0x20]
	0x01CDAC58 LDP D9, D8, [X31 + 0x10]
	0x01CDAC5C LDR V10, [X31], #0x30
	0x01CDAC60 B 0x1CDAD44
	0x01CDAC64 STP X30, X19, [X31 - 0x10]!
	0x01CDAC68 MOVZ W1, 0x3
	0x01CDAC6C MOV X19, X0
	0x01CDAC70 BL 0x1CD8DB4
	0x01CDAC74 LDR X8, [X19]
	0x01CDAC78 MOV X0, X19
	0x01CDAC7C MOV X1, X31
	0x01CDAC80 LDR X9, [X8 + 0x338]
	0x01CDAC84 LDR X2, [X8 + 0x340]
	0x01CDAC88 BLR X9
	0x01CDAC8C LDR X9, [X19 + 0xB8]
	0x01CDAC90 CBZ X9, 0x1CDACFC
	0x01CDAC94 LDR X8, [X9 + 0x30]
	0x01CDAC98 CBZ X8, 0x1CDACFC
	0x01CDAC9C LDR W10, [X8 + 0x18]
	0x01CDACA0 CBZ W10, 0x1CDAD00
	0x01CDACA4 LDR X10, [X9 + 0x58]
	0x01CDACA8 CBZ X10, 0x1CDACFC
	0x01CDACAC LDR W11, [X10 + 0x18]
	0x01CDACB0 CBZ W11, 0x1CDAD00
	0x01CDACB4 LDR X9, [X9 + 0x60]
	0x01CDACB8 CBZ X9, 0x1CDACFC
	0x01CDACBC LDR W11, [X9 + 0x18]
	0x01CDACC0 CBZ W11, 0x1CDAD00
	0x01CDACC4 LDR X11, [X19]
	0x01CDACC8 LDR V0, [X8 + 0x20]
	0x01CDACCC LDR V1, [X10 + 0x20]
	0x01CDACD0 LDR V2, [X9 + 0x20]
	0x01CDACD4 LDR X8, [X11 + 0x2A8]
	0x01CDACD8 LDR X2, [X11 + 0x2B0]
	0x01CDACDC MOV X0, X19
	0x01CDACE0 MOV W1, W31
	0x01CDACE4 BLR X8
	0x01CDACE8 FMOV S0, W31
	0x01CDACEC STR W31, [X19 + 0xE0]
	0x01CDACF0 MOV X0, X19
	0x01CDACF4 LDP X30, X19, [X31], #0x10
	0x01CDACF8 B 0x1CD8E74
	0x01CDACFC BL 0x1B6EA1C
	0x01CDAD00 BL 0x1B6EA24
	0x01CDAD04 STP D9, D8, [X31 - 0x20]!
	0x01CDAD08 STR X30, [X31 + 0x10]
	0x01CDAD0C MOV V8.16B, V1.16B
	0x01CDAD10 MOV V9.16B, V0.16B
	0x01CDAD14 BL 0x1CD8E14
	0x01CDAD18 FMUL S0, S0, S8
	0x01CDAD1C ADD X0, X31, 0x1C
	0x01CDAD20 ADD X1, X31, 0x18
	0x01CDAD24 BL 0x3D198F0
	0x01CDAD28 LDP S0, S1, [X31 + 0x18]
	0x01CDAD2C LDR X30, [X31 + 0x10]
	0x01CDAD30 FMUL S0, S0, S9
	0x01CDAD34 FMUL S2, S1, S9
	0x01CDAD38 FMOV S1, W31
	0x01CDAD3C LDP D9, D8, [X31], #0x20
	0x01CDAD40 RET
	0x01CDAD44 STR X30, [X31 - 0x20]!
	0x01CDAD48 STP X20, X19, [X31 + 0x10]
	0x01CDAD4C MOVZ W1, 0x4
	0x01CDAD50 MOV X19, X0
	0x01CDAD54 BL 0x1CD8DB4
	0x01CDAD58 LDR X9, [X19 + 0xB8]
	0x01CDAD5C CBZ X9, 0x1CDADD0
	0x01CDAD60 LDR X8, [X9 + 0x58]
	0x01CDAD64 CBZ X8, 0x1CDADD0
	0x01CDAD68 LDR W10, [X8 + 0x18]
	0x01CDAD6C CBZ W10, 0x1CDADD4
	0x01CDAD70 LDR X9, [X9 + 0x60]
	0x01CDAD74 CBZ X9, 0x1CDADD0
	0x01CDAD78 LDR W10, [X9 + 0x18]
	0x01CDAD7C CBZ W10, 0x1CDADD4
	0x01CDAD80 LDR X10, [X19]
	0x01CDAD84 LDR V1, [X8 + 0x20]
	0x01CDAD88 LDR V2, [X9 + 0x20]
	0x01CDAD8C FMOV S0, W31
	0x01CDAD90 LDR X8, [X10 + 0x2A8]
	0x01CDAD94 LDR X2, [X10 + 0x2B0]
	0x01CDAD98 MOVZ W1, 0x1
	0x01CDAD9C MOV X0, X19
	0x01CDADA0 MOVZ W20, 0x1
	0x01CDADA4 BLR X8
	0x01CDADA8 FMOV S0, W31
	0x01CDADAC MOV X0, X19
	0x01CDADB0 STR W20, [X19 + 0xE0]
	0x01CDADB4 BL 0x1CD8F34
	0x01CDADB8 MOV X0, X19
	0x01CDADBC LDP X20, X19, [X31 + 0x10]
	0x01CDADC0 FMOV S0, W31
	0x01CDADC4 MOV X1, X31
	0x01CDADC8 LDR X30, [X31], #0x20
	0x01CDADCC B 0x1CE472C
	0x01CDADD0 BL 0x1B6EA1C
	0x01CDADD4 BL 0x1B6EA24
	0x01CDADD8 STR X30, [X31 - 0x30]!
	0x01CDADDC STP X22, X21, [X31 + 0x10]
	0x01CDADE0 STP X20, X19, [X31 + 0x20]
	0x01CDADE4 ADRP X22, 0x2549000
	0x01CDADE8 ADRP X21, 0x2273000
	0x01CDADEC LDRB W8, [X22 + 0x618]
	0x01CDADF0 LDR X21, [X21 + 0x478]
	0x01CDADF4 MOV X20, X1
	0x01CDADF8 MOV X19, X0
	0x01CDADFC TBNZ X8, 0x0, 0x1CDAE14
	0x01CDAE00 ADRP X0, 0x2273000
	0x01CDAE04 LDR X0, [X0 + 0x478]
	0x01CDAE08 BL 0x1B6E7F0
	0x01CDAE0C MOVZ W8, 0x1
	0x01CDAE10 STRB W8, [X22 + 0x618]
	0x01CDAE14 MOVZ W1, 0x5
	0x01CDAE18 MOV X0, X19
	0x01CDAE1C BL 0x1CD8DB4
	0x01CDAE20 LDR X8, [X19]
	0x01CDAE24 MOV X0, X19
	0x01CDAE28 MOV X1, X20
	0x01CDAE2C LDR X9, [X8 + 0x338]
	0x01CDAE30 LDR X2, [X8 + 0x340]
	0x01CDAE34 BLR X9
	0x01CDAE38 LDR X0, [X21]
	0x01CDAE3C LDR W8, [X0 + 0xE0]
	0x01CDAE40 CBNZ W8, 0x1CDAE48
	0x01CDAE44 BL 0x1B6E8F8
	0x01CDAE48 MOV X0, X20
	0x01CDAE4C MOV X1, X31
	0x01CDAE50 MOV X2, X31
	0x01CDAE54 BL 0x3A9D6EC
	0x01CDAE58 TBZ X0, 0x0, 0x1CDAE84
	0x01CDAE5C CBZ X20, 0x1CDAF18
	0x01CDAE60 MOV X0, X20
	0x01CDAE64 MOV X1, X31
	0x01CDAE68 BL 0x3A9B084
	0x01CDAE6C CBZ X0, 0x1CDAF18
	0x01CDAE70 MOV X1, X31
	0x01CDAE74 BL 0x3AA7658
	0x01CDAE78 MOV X0, X19
	0x01CDAE7C MOV X1, X31
	0x01CDAE80 BL 0x1CE4C60
	0x01CDAE84 LDR X9, [X19 + 0xB8]
	0x01CDAE88 CBZ X9, 0x1CDAF18
	0x01CDAE8C LDR X8, [X9 + 0x38]
	0x01CDAE90 CBZ X8, 0x1CDAF18
	0x01CDAE94 LDR W10, [X8 + 0x18]
	0x01CDAE98 CBZ W10, 0x1CDAF1C
	0x01CDAE9C LDR X10, [X9 + 0x58]
	0x01CDAEA0 CBZ X10, 0x1CDAF18
	0x01CDAEA4 LDR W11, [X10 + 0x18]
	0x01CDAEA8 CBZ W11, 0x1CDAF1C
	0x01CDAEAC LDR X9, [X9 + 0x60]
	0x01CDAEB0 CBZ X9, 0x1CDAF18
	0x01CDAEB4 LDR W11, [X9 + 0x18]
	0x01CDAEB8 CBZ W11, 0x1CDAF1C
	0x01CDAEBC LDR X11, [X19]
	0x01CDAEC0 LDR V0, [X8 + 0x20]
	0x01CDAEC4 LDR V1, [X10 + 0x20]
	0x01CDAEC8 LDR V2, [X9 + 0x20]
	0x01CDAECC LDR X8, [X11 + 0x2A8]
	0x01CDAED0 LDR X2, [X11 + 0x2B0]
	0x01CDAED4 MOV X0, X19
	0x01CDAED8 MOV W1, W31
	0x01CDAEDC BLR X8
	0x01CDAEE0 MOVZ W8, 0x1
	0x01CDAEE4 FMOV S0, W31
	0x01CDAEE8 MOV X0, X19
	0x01CDAEEC STR W8, [X19 + 0xE0]
	0x01CDAEF0 BL 0x1CD8E74
	0x01CDAEF4 LDR X8, [X19 + 0xB8]
	0x01CDAEF8 CBZ X8, 0x1CDAF18
	0x01CDAEFC LDR V0, [X8 + 0x28]
	0x01CDAF00 MOV X0, X19
	0x01CDAF04 LDP X20, X19, [X31 + 0x20]
	0x01CDAF08 LDP X22, X21, [X31 + 0x10]
	0x01CDAF0C MOV X1, X31
	0x01CDAF10 LDR X30, [X31], #0x30
	0x01CDAF14 B 0x1CE48AC
	0x01CDAF18 BL 0x1B6EA1C
	0x01CDAF1C BL 0x1B6EA24
	0x01CDAF20 SUB X31, X31, 0xE0
	0x01CDAF24 STP D15, D14, [X31 + 0x70]
	0x01CDAF28 STP D13, D12, [X31 + 0x80]
	0x01CDAF2C STP D11, D10, [X31 + 0x90]
	0x01CDAF30 STP D9, D8, [X31 + 0xA0]
	0x01CDAF34 STP X30, X23, [X31 + 0xB0]
	0x01CDAF38 STP X22, X21, [X31 + 0xC0]
	0x01CDAF3C STP X20, X19, [X31 + 0xD0]
	0x01CDAF40 ADRP X20, 0x2549000
	0x01CDAF44 ADRP X22, 0x2273000
	0x01CDAF48 LDRB W8, [X20 + 0x619]
	0x01CDAF4C LDR X22, [X22 + 0x478]
	0x01CDAF50 MOV X19, X0
	0x01CDAF54 TBNZ X8, 0x0, 0x1CDAFC0
	0x01CDAF58 ADRP X0, 0x2275000
	0x01CDAF5C LDR X0, [X0 + 0xDC8]
	0x01CDAF60 BL 0x1B6E7F0
	0x01CDAF64 ADRP X0, 0x2275000
	0x01CDAF68 LDR X0, [X0 + 0xDD0]
	0x01CDAF6C BL 0x1B6E7F0
	0x01CDAF70 ADRP X0, 0x2275000

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+96], D15
	003 Move [X31+104], D14
	004 Move [X31+112], D13
	005 Move [X31+120], D12
	006 Move [X31+128], D11
	007 Move [X31+136], D10
	008 Move [X31+144], D9
	009 Move [X31+152], D8
	010 Move [X31+160], X30
	011 Move [X31+176], X24
	012 Move [X31+184], X23
	013 Move [X31+192], X22
	014 Move [X31+200], X21
	015 Move [X31+208], X20
	016 Move [X31+216], X19
	017 Move X20, 0x254A000
	018 Move W8, [X20+1557]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {41}
	024 Move X0, 0x2276000
	025 Move X0, [X0+3496]
	026 Call 0x1B6F7F0
	027 Move X0, 0x2276000
	028 Move X0, [X0+3504]
	029 Call 0x1B6F7F0
	030 Move X0, 0x2276000
	031 Move X0, [X0+3512]
	032 Call 0x1B6F7F0
	033 Move X0, 0x2276000
	034 Move X0, [X0+3520]
	035 Call 0x1B6F7F0
	036 Move X0, 0x2274000
	037 Move X0, [X0+1144]
	038 Call 0x1B6F7F0
	039 Move W8, 1
	040 Move [X20+1557], W8
	041 Move [X31+168], X31
	042 Move [X31+64], X31
	043 Move [X31+72], X31
	044 Move [X31+80], X31
	045 Move [X31+56], X31
	046 Move X0, [X19+208]
	047 Compare X0, 0
	048 JumpIfEqual {686}
	049 Move X1, X31
	050 Call Transform.get_position, X0
	051 Move X8, [X19+184]
	052 Compare X8, 0
	053 JumpIfEqual {686}
	054 Move X8, [X8+120]
	055 Compare X8, 0
	056 JumpIfEqual {686}
	057 Move W9, [X8+24]
	058 Compare W9, 0
	059 JumpIfEqual {687}
	060 Move V3, [X8+32]
	061 Add X1, X31, 168
	062 Move X0, X19
	063 Move X2, X31
	064 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {103}
	069 Move X0, [X31+168]
	070 Compare X0, 0
	071 JumpIfEqual {686}
	072 Move X8, 0x2276000
	073 Move X8, [X8+3520]
	074 Move X1, [X8]
	075 Add X8, X31, 32
	076 Call List`1<Object>.GetEnumerator, X0
	077 Move X9, 0x2276000
	078 Move V0, [X31+2]
	079 Move X8, [X31+48]
	080 Move X9, [X9+3504]
	081 Move [X31+4], V0
	082 Move [X31+80], X8
	083 Move X1, [X9]
	084 Add X0, X31, 64
	085 Call Enumerator<Object>.MoveNext, X0
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {98}
	090 Move X1, [X31+80]
	091 Move X0, X19
	092 Call AnglerController.SetAnticipation, X0, X1
	093 Move X8, 0x2276000
	094 Move X8, [X8+3496]
	095 Add X0, X31, 64
	096 Move X1, [X8]
	097 Call Enumerator<Object>.Dispose, X0
	098 Move X8, 0x2276000
	099 Move X8, [X8+3496]
	100 Add X0, X31, 64
	101 Move X1, [X8]
	102 Call Enumerator<Object>.Dispose, X0
	103 Move X21, 0x2274000
	104 Move X21, [X21+1144]
	105 Move X20, [X19+376]
	106 Move X0, [X21]
	107 Move W8, [X0+224]
	108 Compare W8, 0
	109 JumpIfNotEqual {111}
	110 Call 0x1B6F8F8
	111 Move X0, X20
	112 Move X1, X31
	113 Move X2, X31
	114 Call Object.op_Inequality, X0, X1
	115 Move S11, 1
	116 Move TEMP, X0
	117 And TEMP, TEMP, 1
	118 Compare TEMP, 1
	119 JumpIfNotEqual {278}
	120 Move X0, [X19+208]
	121 Compare X0, 0
	122 JumpIfEqual {686}
	123 Move X1, X31
	124 Call Transform.get_position, X0
	125 Move X0, [X19+376]
	126 Compare X0, 0
	127 JumpIfEqual {686}
	128 Move X1, X31
	129 Move V8, V0
	130 Move V9, V1
	131 Move V10, V2
	132 Call Component.get_transform, X0
	133 Compare X0, 0
	134 JumpIfEqual {686}
	135 Move X1, X31
	136 Call Transform.get_position, X0
	137 Move X20, 0x254A000
	138 Move W8, [X20+1088]
	139 Move V11, V0
	140 Move V12, V1
	141 Move V13, V2
	142 Compare W8, 0
	143 JumpIfNotEqual {149}
	144 Move X0, 0x2274000
	145 Move X0, [X0+1160]
	146 Call 0x1B6F7F0
	147 Move W8, 1
	148 Move [X20+1088], W8
	149 Move X20, 0x2274000
	150 Move X20, [X20+1160]
	151 Move X0, [X20]
	152 Move W8, [X0+224]
	153 Compare W8, 0
	154 JumpIfNotEqual {156}
	155 Call 0x1B6F8F8
	156 Move X8, [X19+376]
	157 Compare X8, 0
	158 JumpIfEqual {686}
	159 Move X0, [X8+128]
	160 Compare X0, 0
	161 JumpIfEqual {686}
	162 Subtract S8, S8, S11
	163 Subtract S9, S9, S12
	164 Subtract S10, S10, S13
	165 Multiply S0, S8, S8
	166 Multiply S1, S9, S9
	167 Add S0, S0, S1
	168 Multiply S1, S10, S10
	169 Add S0, S1, S0
	170 Move X1, X31
	171 NotImplemented "Instruction FSQRT not yet implemented."
	172 Call GrabbableItem.get_isAttached, X0
	173 Move TEMP, X0
	174 And TEMP, TEMP, 1
	175 Compare TEMP, 1
	176 JumpIfNotEqual {278}
	177 Move X0, [X19+376]
	178 Compare X0, 0
	179 JumpIfEqual {686}
	180 Move X1, X31
	181 Call Component.get_transform, X0
	182 Compare X0, 0
	183 JumpIfEqual {686}
	184 Move X1, X31
	185 NotImplemented "Instruction FDIV not yet implemented."
	186 NotImplemented "Instruction FDIV not yet implemented."
	187 NotImplemented "Instruction FDIV not yet implemented."
	188 Call Transform.get_forward, X0
	189 Move X22, 0x254A000
	190 Move W8, [X22+1111]
	191 Move V8, V0
	192 Move V9, V1
	193 Move V10, V2
	194 Compare W8, 0
	195 JumpIfNotEqual {201}
	196 Move X0, 0x2274000
	197 Move X0, [X0+1160]
	198 Call 0x1B6F7F0
	199 Move W8, 1
	200 Move [X22+1111], W8
	201 Move X0, [X20]
	202 Multiply S0, S13, S13
	203 Multiply S1, S14, S14
	204 Add S0, S0, S1
	205 Multiply S1, S12, S12
	206 Move W8, [X0+224]
	207 Add S15, S1, S0
	208 Multiply S0, S8, S8
	209 Multiply S1, S9, S9
	210 Add S0, S0, S1
	211 Multiply S1, S10, S10
	212 Move [X31+28], S13
	213 Move V13, V12
	214 Add S12, S1, S0
	215 Compare W8, 0
	216 JumpIfNotEqual {218}
	217 Call 0x1B6F8F8
	218 Move X8, -19070976
	219 Move V1, [X8+2532]
	220 Multiply S0, S15, S12
	221 NotImplemented "Instruction FSQRT not yet implemented."
	222 Move S15, W31
	223 NotImplemented "Instruction FCMP not yet implemented."
	224 Move V1, [X31+28]
	225 Move X0, [X20]
	226 Multiply S2, S14, S9
	227 Multiply S3, S13, S10
	228 Multiply S1, S1, S8
	229 Add S1, S1, S2
	230 Add S1, S3, S1
	231 Move W8, [X0+224]
	232 NotImplemented "Instruction FDIV not yet implemented."
	233 Move S1, 1
	234 Move S2, -1
	235 NotImplemented "Instruction FMIN not yet implemented."
	236 NotImplemented "Instruction FCMP not yet implemented."
	237 NotImplemented "Instruction FCSEL not yet implemented."
	238 Compare W8, 0
	239 JumpIfNotEqual {241}
	240 Call 0x1B6F8F8
	241 NotImplemented "Instruction FCVT not yet implemented."
	242 Call 0x3D1A890
	243 Move X8, -19070976
	244 Move V1, [X8+3612]
	245 NotImplemented "Instruction INVALID not yet implemented."
	246 Multiply S15, S0, S1
	247 Move X8, [X19+376]
	248 Compare X8, 0
	249 JumpIfEqual {686}
	250 Move X0, [X8+152]
	251 Compare X0, 0
	252 JumpIfEqual {686}
	253 Move X1, X31
	254 Call Light.get_range, X0
	255 NotImplemented "Instruction FCMP not yet implemented."
	256 Move X8, [X19+376]
	257 Compare X8, 0
	258 JumpIfEqual {686}
	259 Move X0, [X8+152]
	260 Compare X0, 0
	261 JumpIfEqual {686}
	262 Move X1, X31
	263 Call Light.get_spotAngle, X0
	264 Move S1, 0.5
	265 Multiply S0, S0, S1
	266 NotImplemented "Instruction FCMP not yet implemented."
	267 Move X0, [X19+376]
	268 Compare X0, 0
	269 JumpIfEqual {686}
	270 Move X1, X31
	271 Call Component.get_transform, X0
	272 Compare X0, 0
	273 JumpIfEqual {686}
	274 Move X1, X31
	275 Call Transform.get_position, X0
	276 Move X0, X19
	277 Call AnglerController.SetAnticipation, X0, X1
	278 Move X0, [X21]
	279 Move X20, [X19+376]
	280 Move W8, [X0+224]
	281 Compare W8, 0
	282 JumpIfNotEqual {284}
	283 Call 0x1B6F8F8
	284 Move X0, X20
	285 Move X1, X31
	286 Move X2, X31
	287 Call Object.op_Inequality, X0, X1
	288 Move TEMP, X0
	289 And TEMP, TEMP, 1
	290 Compare TEMP, 1
	291 JumpIfNotEqual {303}
	292 Move X8, [X19+184]
	293 Compare X8, 0
	294 JumpIfEqual {686}
	295 Move X8, [X8+120]
	296 Compare X8, 0
	297 JumpIfEqual {686}
	298 Move W9, [X8+24]
	299 Compare W9, 0
	300 JumpIfEqual {687}
	301 Move V0, [X8+32]
	302 NotImplemented "Instruction FCMP not yet implemented."
	303 Move X0, [X19+208]
	304 Compare X0, 0
	305 JumpIfEqual {686}
	306 Move X1, X31
	307 Call Transform.get_position, X0
	308 Move X0, [X19+208]
	309 Compare X0, 0
	310 JumpIfEqual {686}
	311 Move X1, X31
	312 Move V8, V0
	313 Move V9, V1
	314 Move V10, V2
	315 Call Transform.get_forward, X0
	316 Move X8, [X19+184]
	317 Compare X8, 0
	318 JumpIfEqual {686}
	319 Move V6, [X8+128]
	320 Move V3, V0
	321 Move V4, V1
	322 Move V5, V2
	323 Add X0, X31, 56
	324 Move V0, V8
	325 Move V1, V9
	326 Move V2, V10
	327 Move X1, X31
	328 Call MobDetectionUtil.TryGetAnyLightBySight, X0, X1, V0, X2
	329 Move TEMP, X0
	330 And TEMP, TEMP, 1
	331 Compare TEMP, 1
	332 JumpIfNotEqual {351}
	333 Move X8, [X19]
	334 Move X1, [X31+56]
	335 Move X0, X19
	336 Move X9, [X8+920]
	337 Move X2, [X8+928]
	338 NotImplemented "Instruction BLR not yet implemented."
	339 Move X0, [X31+56]
	340 Compare X0, 0
	341 JumpIfEqual {686}
	342 Move X1, X31
	343 Call Component.get_transform, X0
	344 Compare X0, 0
	345 JumpIfEqual {686}
	346 Move X1, X31
	347 Call Transform.get_position, X0
	348 Move X0, X19
	349 Move X1, X31
	350 Call MobController.set__positionThatPlayerStayed, X0, X1
	351 Move X8, [X19]
	352 Move X0, X19
	353 Move X1, X31
	354 Move X9, [X8+920]
	355 Move X2, [X8+928]
	356 NotImplemented "Instruction BLR not yet implemented."
	357 Move X0, X19
	358 Call AnglerController.get_phase, X0
	359 NotImplemented "Instruction CMP not yet implemented."
	360 Move X0, [X19+200]
	361 Compare X0, 0
	362 JumpIfEqual {686}
	363 Move X1, X31
	364 Call NavMeshAgent.get_pathPending, X0
	365 Move TEMP, X0
	366 And TEMP, TEMP, 1
	367 Compare TEMP, 1
	368 JumpIfNotEqual {419}
	369 Move X0, X19
	370 Move X1, X31
	371 Call MobController.get__positionThatPlayerStayed, X0
	372 Move X0, X19
	373 Move X1, X31
	374 Move V8, V0
	375 Move V9, V1
	376 Move V10, V2
	377 Call Component.get_transform, X0
	378 Compare X0, 0
	379 JumpIfEqual {686}
	380 Move X1, X31
	381 Call Transform.get_position, X0
	382 Move X22, 0x254A000
	383 Move W8, [X22+1089]
	384 Move V11, V0
	385 Move V12, V1
	386 Move V13, V2
	387 Compare W8, 0
	388 JumpIfNotEqual {394}
	389 Move X0, 0x2274000
	390 Move X0, [X0+1160]
	391 Call 0x1B6F7F0
	392 Move W8, 1
	393 Move [X22+1089], W8
	394 Move X20, 0x2274000
	395 Move X20, [X20+1160]
	396 Subtract S14, S8, S11
	397 Subtract S11, S9, S12
	398 Subtract S8, S10, S13
	399 Move X0, [X20]
	400 Move W8, [X0+224]
	401 Compare W8, 0
	402 JumpIfNotEqual {404}
	403 Call 0x1B6F8F8
	404 Move X8, -19070976
	405 Multiply S0, S14, S14
	406 Multiply S1, S11, S11
	407 Move V9, [X8+2916]
	408 Move X23, 0x2274000
	409 Multiply S2, S8, S8
	410 Add S0, S0, S1
	411 Move X23, [X23+1152]
	412 Add S0, S2, S0
	413 NotImplemented "Instruction FSQRT not yet implemented."
	414 NotImplemented "Instruction FCMP not yet implemented."
	415 Move X24, 0x254A000
	416 NotImplemented "Instruction FDIV not yet implemented."
	417 NotImplemented "Instruction FDIV not yet implemented."
	418 NotImplemented "Instruction FDIV not yet implemented."
	419 Move X20, [X19+200]
	420 Move X0, X19
	421 Move X1, X31
	422 Call MobController.get__positionThatPlayerStayed, X0
	423 Compare X20, 0
	424 JumpIfEqual {686}
	425 Move X0, X20
	426 Move X1, X31
	427 Call NavMeshAgent.SetDestination, X0, X1
	428 Move W8, [X24+1087]
	429 Compare W8, 0
	430 JumpIfNotEqual {436}
	431 Move X0, 0x2274000
	432 Move X0, [X0+1152]
	433 Call 0x1B6F7F0
	434 Move W8, 1
	435 Move [X24+1087], W8
	436 Move X8, [X23]
	437 Move X8, [X8+184]
	438 Move S10, [X8]
	439 Move S14, [X8+4]
	440 Move V15, [X8+8]
	441 Move V0, V10
	442 Move V1, V14
	443 Move V2, V15
	444 Move X0, X31
	445 Call Extensions.Flatten, X0
	446 Move W8, [X22+1089]
	447 Move V8, V0
	448 Move V12, V1
	449 Move V13, V2
	450 Compare W8, 0
	451 JumpIfNotEqual {457}
	452 Move X0, 0x2274000
	453 Move X0, [X0+1160]
	454 Call 0x1B6F7F0
	455 Move W8, 1
	456 Move [X22+1089], W8
	457 Move X0, [X20]
	458 Move W8, [X0+224]
	459 Compare W8, 0
	460 JumpIfNotEqual {462}
	461 Call 0x1B6F8F8
	462 Multiply S0, S8, S8
	463 Multiply S1, S12, S12
	464 Add S0, S0, S1
	465 Multiply S1, S13, S13
	466 Add S0, S1, S0
	467 NotImplemented "Instruction FSQRT not yet implemented."
	468 NotImplemented "Instruction FCMP not yet implemented."
	469 NotImplemented "Instruction FDIV not yet implemented."
	470 NotImplemented "Instruction FDIV not yet implemented."
	471 Move [X31+28], S1
	472 NotImplemented "Instruction FDIV not yet implemented."
	473 Move W8, [X24+1087]
	474 Compare W8, 0
	475 JumpIfNotEqual {481}
	476 Move X0, 0x2274000
	477 Move X0, [X0+1152]
	478 Call 0x1B6F7F0
	479 Move W8, 1
	480 Move [X24+1087], W8
	481 Move X8, [X23]
	482 Move X8, [X8+184]
	483 Move S9, [X8]
	484 Move S0, [X8+4]
	485 Move V13, [X8+8]
	486 Move [X31+28], S0
	487 Move X8, [X19+184]
	488 Compare X8, 0
	489 JumpIfEqual {686}
	490 Move V11, [X8+64]
	491 Move X0, X19
	492 Move X1, X31
	493 Move [X31+20], S15
	494 Move [X31+28], S14
	495 Call Component.get_transform, X0
	496 Compare X0, 0
	497 JumpIfEqual {686}
	498 Move X1, X31
	499 Move [X31+16], S10
	500 Call Transform.get_forward, X0
	501 Move X22, 0x254A000
	502 Move W8, [X22+1111]
	503 Move V14, V0
	504 Move V15, V1
	505 Move V8, V2
	506 Compare W8, 0
	507 JumpIfNotEqual {513}
	508 Move X0, 0x2274000
	509 Move X0, [X0+1160]
	510 Call 0x1B6F7F0
	511 Move W8, 1
	512 Move [X22+1111], W8
	513 Move V1, [X31+28]
	514 Move X0, [X20]
	515 Multiply S0, S9, S9
	516 Move V12, V9
	517 Multiply S1, S1, S1
	518 Add S0, S0, S1
	519 Multiply S1, S13, S13
	520 Move W8, [X0+224]
	521 Add S10, S1, S0
	522 Multiply S0, S14, S14
	523 Multiply S1, S15, S15
	524 Add S0, S0, S1
	525 Multiply S1, S8, S8
	526 Add S9, S1, S0
	527 Compare W8, 0
	528 JumpIfNotEqual {530}
	529 Call 0x1B6F8F8
	530 Move X8, -19070976
	531 Move V1, [X8+2532]
	532 Multiply S0, S10, S9
	533 NotImplemented "Instruction FSQRT not yet implemented."
	534 Move S10, W31
	535 NotImplemented "Instruction FCMP not yet implemented."
	536 Move V2, [X31+28]
	537 Move X0, [X20]
	538 Multiply S1, S12, S14
	539 Multiply S3, S13, S8
	540 Multiply S2, S2, S15
	541 Add S1, S1, S2
	542 Add S1, S3, S1
	543 Move W8, [X0+224]
	544 NotImplemented "Instruction FDIV not yet implemented."
	545 Move S1, 1
	546 Move S2, -1
	547 NotImplemented "Instruction FMIN not yet implemented."
	548 NotImplemented "Instruction FCMP not yet implemented."
	549 NotImplemented "Instruction FCSEL not yet implemented."
	550 Compare W8, 0
	551 JumpIfNotEqual {553}
	552 Call 0x1B6F8F8
	553 NotImplemented "Instruction FCVT not yet implemented."
	554 Call 0x3D1A890
	555 Move X8, -19070976
	556 Move V1, [X8+3612]
	557 NotImplemented "Instruction INVALID not yet implemented."
	558 Multiply S10, S0, S1
	559 Move X0, X19
	560 Move X1, X31
	561 Call Component.get_transform, X0
	562 Move X20, X0
	563 Move X0, X19
	564 Move X1, X31
	565 Call Component.get_transform, X0
	566 Compare X0, 0
	567 JumpIfEqual {686}
	568 NotImplemented "Instruction FDIV not yet implemented."
	569 Move X1, X31
	570 Move [X31+12], S0
	571 Call Transform.get_rotation, X0
	572 Move V14, V1
	573 Move V1, [X31+28]
	574 Move V8, V0
	575 Move V15, V2
	576 Move V0, V12
	577 Move V2, V13
	578 Move X0, X31
	579 Move V9, V3
	580 Call Quaternion.LookRotation, X0
	581 Move X0, X19
	582 Move X1, X31
	583 Move V11, V0
	584 Move V12, V1
	585 Move V13, V2
	586 Move V10, V3
	587 Call MobController.get_deltaTime, X0
	588 Move V1, [X31+12]
	589 Move V2, V15
	590 Move V3, V9
	591 Move V4, V11
	592 Multiply S0, S1, S0
	593 Move [X31], S0
	594 Move V0, V8
	595 Move V1, V14
	596 Move V5, V12
	597 Move V6, V13
	598 Move V7, V10
	599 Move X0, X31
	600 Call Quaternion.Slerp, X0, X1, V0
	601 Compare X20, 0
	602 JumpIfEqual {686}
	603 Move X0, X20
	604 Move X1, X31
	605 Call Transform.set_rotation, X0, X1
	606 Move X20, [X19+200]
	607 Move S8, [X31+16]
	608 Move S10, [X31+20]
	609 Move V9, [X31+24]
	610 Compare X20, 0
	611 JumpIfEqual {686}
	612 Move X0, X20
	613 Move X1, X31
	614 Call NavMeshAgent.get_speed, X0
	615 Move X0, X19
	616 Move X1, X31
	617 Multiply S8, S8, S0
	618 Multiply S9, S9, S0
	619 Multiply S10, S10, S0
	620 Call MobController.get_deltaTime, X0
	621 Multiply S3, S8, S0
	622 Multiply S1, S9, S0
	623 Multiply S2, S10, S0
	624 Move X0, X20
	625 Move V0, V3
	626 Move X1, X31
	627 Call NavMeshAgent.Move, X0, X1
	628 Move X0, X19
	629 Move X1, X31
	630 Call MobController.get__positionThatPlayerStayed, X0
	631 Move X0, X19
	632 Move X1, X31
	633 Move V8, V0
	634 Move V9, V1
	635 Move V10, V2
	636 Call Component.get_transform, X0
	637 Compare X0, 0
	638 JumpIfEqual {686}
	639 Move X1, X31
	640 Call Transform.get_position, X0
	641 Subtract S0, S8, S0
	642 Subtract S1, S9, S1
	643 Subtract S2, S10, S2
	644 Multiply S0, S0, S0
	645 Multiply S1, S1, S1
	646 Multiply S2, S2, S2
	647 Add S0, S0, S1
	648 Add S0, S2, S0
	649 Move S1, 2
	650 NotImplemented "Instruction FCMP not yet implemented."
	651 Move X0, [X21]
	652 Move X20, [X19+376]
	653 Move W8, [X0+224]
	654 Compare W8, 0
	655 JumpIfNotEqual {657}
	656 Call 0x1B6F8F8
	657 Move X0, X20
	658 Move X1, X31
	659 Move X2, X31
	660 Call Object.op_Inequality, X0, X1
	661 Move TEMP, X0
	662 And TEMP, TEMP, 1
	663 Compare TEMP, 1
	664 JumpIfNotEqual {667}
	665 Move X0, X19
	666 Call AnglerController.SetAroundLight, X0
	667 Move X0, X19
	668 Call AnglerController.SetRoaming, X0
	669 Move X20, [X31+208]
	670 Move X19, [X31+216]
	671 Move X22, [X31+192]
	672 Move X21, [X31+200]
	673 Move X24, [X31+176]
	674 Move X23, [X31+184]
	675 Move X30, [X31+160]
	676 Move D9, [X31+144]
	677 Move D8, [X31+152]
	678 Move D11, [X31+128]
	679 Move D10, [X31+136]
	680 Move D13, [X31+112]
	681 Move D12, [X31+120]
	682 Move D15, [X31+96]
	683 Move D14, [X31+104]
	684 Add X31, X31, 224
	685 Return 
	686 Call 0x1B6FA1C
	687 Call 0x1B6FA24
	688 Move X21, X0
	689 NotImplemented "Instruction CMP not yet implemented."
	690 Move X0, X21
	691 Call 0x3D1A840
	692 Move X20, [X0]
	693 Call 0x3D1A850
	694 Move X8, 0x2276000
	695 Move X8, [X8+3496]
	696 Add X0, X31, 64
	697 Move X1, [X8]
	698 Call Enumerator<Object>.Dispose, X0
	699 Compare X20, 0
	700 JumpIfEqual {103}
	701 Move X0, X20
	702 Call 0x1B6FA14
	703 Move X20, X31
	704 Move X21, X0
	705 Move X8, 0x2276000
	706 Move X8, [X8+3496]
	707 Move X1, [X8]
	708 Add X0, X31, 64
	709 Call Enumerator<Object>.Dispose, X0
	710 Compare X20, 0
	711 JumpIfNotEqual {714}
	712 Move X0, X21
	713 Call 0x1C8518C
	714 Move X0, X20
	715 Call 0x1B6FA14
	716 Call 0x18F56A8

Method: System.Void SetAroundLight()

Disassembly:
	0x01CDBC64 MOV X0, X21
	0x01CDBC68 BL 0x1B6EA14
	0x01CDBC6C BL 0x18F46A8
	0x01CDBC70 STP X30, X21, [X31 - 0x20]!
	0x01CDBC74 STP X20, X19, [X31 + 0x10]
	0x01CDBC78 ADRP X20, 0x2548000
	0x01CDBC7C LDRB W8, [X20 + 0x61A]
	0x01CDBC80 MOV X19, X0
	0x01CDBC84 TBNZ X8, 0x0, 0x1CDBCA8
	0x01CDBC88 ADRP X0, 0x2273000
	0x01CDBC8C LDR X0, [X0 + 0x1C0]
	0x01CDBC90 BL 0x1B6E7F0
	0x01CDBC94 ADRP X0, 0x2274000
	0x01CDBC98 LDR X0, [X0 + 0xE00]
	0x01CDBC9C BL 0x1B6E7F0
	0x01CDBCA0 MOVZ W8, 0x1
	0x01CDBCA4 STRB W8, [X20 + 0x61A]
	0x01CDBCA8 LDRB W8, [X19 + 0x58]
	0x01CDBCAC CBZ W8, 0x1CDBCD0
	0x01CDBCB0 STRB W31, [X19 + 0x58]
	0x01CDBCB4 LDR X0, [X19 + 0xC0]
	0x01CDBCB8 CBZ X0, 0x1CDBE08
	0x01CDBCBC LDR X8, [X0]
	0x01CDBCC0 LDP X20, X19, [X31 + 0x10]
	0x01CDBCC4 LDP X2, X1, [X8 + 0x1F8]
	0x01CDBCC8 LDP X30, X21, [X31], #0x20
	0x01CDBCCC BR X2
	0x01CDBCD0 ADRP X21, 0x2273000
	0x01CDBCD4 LDR X21, [X21 + 0x1C0]
	0x01CDBCD8 LDR X0, [X21]
	0x01CDBCDC LDR W8, [X0 + 0xE0]
	0x01CDBCE0 CBNZ W8, 0x1CDBCE8
	0x01CDBCE4 BL 0x1B6E8F8
	0x01CDBCE8 MOV X0, X19
	0x01CDBCEC MOV X1, X31
	0x01CDBCF0 BL 0x1D697C8
	0x01CDBCF4 LDR X0, [X19 + 0x38]
	0x01CDBCF8 CBZ X0, 0x1CDBE08
	0x01CDBCFC MOV X1, X31
	0x01CDBD00 BL 0x1D87040

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 3
	004 Move X19, X0
	005 Call AnglerController.set_phase, X0, X1
	006 Move X8, [X19]
	007 Move X0, X19
	008 Move X1, X31
	009 Move X9, [X8+824]
	010 Move X2, [X8+832]
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Move X9, [X19+184]
	013 Compare X9, 0
	014 JumpIfEqual {49}
	015 Move X8, [X9+48]
	016 Compare X8, 0
	017 JumpIfEqual {49}
	018 Move W10, [X8+24]
	019 Compare W10, 0
	020 JumpIfEqual {50}
	021 Move X10, [X9+88]
	022 Compare X10, 0
	023 JumpIfEqual {49}
	024 Move W11, [X10+24]
	025 Compare W11, 0
	026 JumpIfEqual {50}
	027 Move X9, [X9+96]
	028 Compare X9, 0
	029 JumpIfEqual {49}
	030 Move W11, [X9+24]
	031 Compare W11, 0
	032 JumpIfEqual {50}
	033 Move X11, [X19]
	034 Move V0, [X8+32]
	035 Move V1, [X10+32]
	036 Move V2, [X9+32]
	037 Move X8, [X11+680]
	038 Move X2, [X11+688]
	039 Move X0, X19
	040 Move W1, W31
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move S0, W31
	043 Move [X19+224], W31
	044 Move X0, X19
	045 Move X30, [X31+16]
	046 Move X19, [X31+24]
	047 Call AnglerController.set_timerAroundLight, X0, V0
	048 Return 
	049 Call 0x1B6FA1C
	050 Call 0x1B6FA24

Method: System.Void UpdateAroundLight()

Disassembly:
	0x01CDAF74 LDR X0, [X0 + 0xDD8]
	0x01CDAF78 BL 0x1B6E7F0
	0x01CDAF7C ADRP X0, 0x2275000
	0x01CDAF80 LDR X0, [X0 + 0xDE0]
	0x01CDAF84 BL 0x1B6E7F0
	0x01CDAF88 ADRP X0, 0x2275000
	0x01CDAF8C LDR X0, [X0 + 0xDE8]
	0x01CDAF90 BL 0x1B6E7F0
	0x01CDAF94 ADRP X0, 0x2275000
	0x01CDAF98 LDR X0, [X0 + 0xDF0]
	0x01CDAF9C BL 0x1B6E7F0
	0x01CDAFA0 ADRP X0, 0x2275000
	0x01CDAFA4 LDR X0, [X0 + 0xDF8]
	0x01CDAFA8 BL 0x1B6E7F0
	0x01CDAFAC ADRP X0, 0x2273000
	0x01CDAFB0 LDR X0, [X0 + 0x478]
	0x01CDAFB4 BL 0x1B6E7F0
	0x01CDAFB8 MOVZ W8, 0x1
	0x01CDAFBC STRB W8, [X20 + 0x619]
	0x01CDAFC0 LDR X0, [X22]
	0x01CDAFC4 STP X31, X31, [X31 + 0x60]
	0x01CDAFC8 STP X31, X31, [X31 + 0x50]
	0x01CDAFCC STR X31, [X31 + 0x48]
	0x01CDAFD0 LDR W8, [X0 + 0xE0]
	0x01CDAFD4 LDR X20, [X19 + 0x178]
	0x01CDAFD8 CBNZ W8, 0x1CDAFE0
	0x01CDAFDC BL 0x1B6E8F8
	0x01CDAFE0 MOV X0, X20
	0x01CDAFE4 MOV X1, X31
	0x01CDAFE8 MOV X2, X31
	0x01CDAFEC BL 0x3A9D6EC
	0x01CDAFF0 TBZ X0, 0x0, 0x1CDB098
	0x01CDAFF4 LDR X0, [X19 + 0x178]
	0x01CDAFF8 CBZ X0, 0x1CDBBB4
	0x01CDAFFC MOV X1, X31
	0x01CDB000 BL 0x3A9B084
	0x01CDB004 CBZ X0, 0x1CDBBB4
	0x01CDB008 MOV X1, X31
	0x01CDB00C BL 0x3AA7658
	0x01CDB010 LDR X0, [X19 + 0xD0]
	0x01CDB014 CBZ X0, 0x1CDBBB4
	0x01CDB018 MOV X1, X31
	0x01CDB01C MOV V8.16B, V0.16B
	0x01CDB020 MOV V9.16B, V1.16B
	0x01CDB024 MOV V10.16B, V2.16B
	0x01CDB028 BL 0x3AA7658
	0x01CDB02C ADRP X20, 0x2548000
	0x01CDB030 LDRB W8, [X20 + 0x506]
	0x01CDB034 MOV V11.16B, V0.16B
	0x01CDB038 MOV V12.16B, V1.16B
	0x01CDB03C MOV V13.16B, V2.16B
	0x01CDB040 CBNZ W8, 0x1CDB058
	0x01CDB044 ADRP X0, 0x2272000
	0x01CDB048 LDR X0, [X0 + 0x488]
	0x01CDB04C BL 0x1B6E7F0
	0x01CDB050 MOVZ W8, 0x1
	0x01CDB054 STRB W8, [X20 + 0x506]
	0x01CDB058 ADRP X8, 0x2272000
	0x01CDB05C LDR X8, [X8 + 0x488]
	0x01CDB060 FSUB S11, S8, S11
	0x01CDB064 FSUB S9, S9, S12
	0x01CDB068 FSUB S8, S10, S13
	0x01CDB06C LDR X0, [X8]
	0x01CDB070 LDR W8, [X0 + 0xE0]
	0x01CDB074 CBNZ W8, 0x1CDB07C
	0x01CDB078 BL 0x1B6E8F8
	0x01CDB07C FMUL S0, S11, S11
	0x01CDB080 FMUL S1, S9, S9
	0x01CDB084 FADD S0, S0, S1
	0x01CDB088 FMUL S1, S8, S8
	0x01CDB08C FADD S0, S1, S0
	0x01CDB090 FSQRT S11, S0
	0x01CDB094 B 0x1CDB0A0
	0x01CDB098 MOVN W8, 0x80800000
	0x01CDB09C FMOV S11, W8
	0x01CDB0A0 LDR X0, [X22]
	0x01CDB0A4 LDR X20, [X19 + 0x178]
	0x01CDB0A8 LDR W8, [X0 + 0xE0]
	0x01CDB0AC CBNZ W8, 0x1CDB0B4
	0x01CDB0B0 BL 0x1B6E8F8
	0x01CDB0B4 MOV X0, X20
	0x01CDB0B8 MOV X1, X31
	0x01CDB0BC MOV X2, X31
	0x01CDB0C0 BL 0x3A9D6EC
	0x01CDB0C4 TBZ X0, 0x0, 0x1CDB118
	0x01CDB0C8 LDR X8, [X19 + 0xB8]
	0x01CDB0CC CBZ X8, 0x1CDBBB4
	0x01CDB0D0 LDR X8, [X8 + 0x78]
	0x01CDB0D4 CBZ X8, 0x1CDBBB4
	0x01CDB0D8 LDR W9, [X8 + 0x18]
	0x01CDB0DC CBZ W9, 0x1CDBBB8
	0x01CDB0E0 LDR V0, [X8 + 0x20]
	0x01CDB0E4 FCMP S11, S0
	0x01CDB0E8 B.LE 0x1CDB118
	0x01CDB0EC LDR X0, [X19 + 0x178]
	0x01CDB0F0 CBZ X0, 0x1CDBBB4
	0x01CDB0F4 MOV X1, X31
	0x01CDB0F8 BL 0x3A9B084
	0x01CDB0FC CBZ X0, 0x1CDBBB4
	0x01CDB100 MOV X1, X31
	0x01CDB104 BL 0x3AA7658
	0x01CDB108 MOV X0, X19
	0x01CDB10C MOV X1, X31
	0x01CDB110 BL 0x1CE4C60
	0x01CDB114 B 0x1CDB454
	0x01CDB118 LDR X0, [X19 + 0xD0]
	0x01CDB11C CBZ X0, 0x1CDBBB4
	0x01CDB120 MOV X1, X31
	0x01CDB124 BL 0x3AA7658
	0x01CDB128 LDR X0, [X19 + 0xD0]
	0x01CDB12C CBZ X0, 0x1CDBBB4
	0x01CDB130 MOV X1, X31
	0x01CDB134 MOV V8.16B, V0.16B
	0x01CDB138 MOV V9.16B, V1.16B
	0x01CDB13C MOV V10.16B, V2.16B
	0x01CDB140 BL 0x3AA7AD0
	0x01CDB144 LDR X8, [X19 + 0xB8]
	0x01CDB148 CBZ X8, 0x1CDBBB4
	0x01CDB14C LDR V6, [X8 + 0x80]
	0x01CDB150 MOV V3.16B, V0.16B
	0x01CDB154 MOV V4.16B, V1.16B
	0x01CDB158 MOV V5.16B, V2.16B
	0x01CDB15C ADD X0, X31, 0x68
	0x01CDB160 MOV V0.16B, V8.16B
	0x01CDB164 MOV V1.16B, V9.16B
	0x01CDB168 MOV V2.16B, V10.16B
	0x01CDB16C MOV X1, X31
	0x01CDB170 BL 0x1CE8E8C
	0x01CDB174 TBZ X0, 0x0, 0x1CDB310
	0x01CDB178 LDR X0, [X31 + 0x68]
	0x01CDB17C CBZ X0, 0x1CDBBB4
	0x01CDB180 LDR W8, [X0 + 0x18]
	0x01CDB184 CMP W8, 0x1
	0x01CDB188 B.NE 0x1CDB1D8
	0x01CDB18C ADRP X8, 0x2274000
	0x01CDB190 LDR X8, [X8 + 0xDF8]
	0x01CDB194 MOV W1, W31
	0x01CDB198 LDR X2, [X8]
	0x01CDB19C BL 0x2E46254
	0x01CDB1A0 LDR X8, [X22]
	0x01CDB1A4 LDR X20, [X19 + 0x178]
	0x01CDB1A8 MOV X21, X0
	0x01CDB1AC LDR W9, [X8 + 0xE0]
	0x01CDB1B0 CBNZ W9, 0x1CDB1BC
	0x01CDB1B4 MOV X0, X8
	0x01CDB1B8 BL 0x1B6E8F8
	0x01CDB1BC MOV X0, X21
	0x01CDB1C0 MOV X1, X20
	0x01CDB1C4 MOV X2, X31
	0x01CDB1C8 BL 0x3AA0AF0
	0x01CDB1CC TBNZ X0, 0x0, 0x1CDB34C
	0x01CDB1D0 LDR X0, [X31 + 0x68]
	0x01CDB1D4 CBZ X0, 0x1CDBBB4
	0x01CDB1D8 ADRP X8, 0x2274000
	0x01CDB1DC LDR X8, [X8 + 0xDE0]
	0x01CDB1E0 LDR X1, [X8]
	0x01CDB1E4 ADD X8, X31, 0x30
	0x01CDB1E8 BL 0x2E470E0
	0x01CDB1EC LDR V0, [X31 + 0x3]
	0x01CDB1F0 LDR X8, [X31 + 0x40]
	0x01CDB1F4 ADRP X23, 0x2274000
	0x01CDB1F8 STR V0, [X31 + 0x5]
	0x01CDB1FC STR X8, [X31 + 0x60]
	0x01CDB200 LDR X23, [X23 + 0xDD0]
	0x01CDB204 LDR X1, [X23]
	0x01CDB208 ADD X0, X31, 0x50
	0x01CDB20C BL 0x2A14F30
	0x01CDB210 TBZ X0, 0x0, 0x1CDB338
	0x01CDB214 LDR X0, [X22]
	0x01CDB218 LDR X20, [X31 + 0x60]
	0x01CDB21C LDR X21, [X19 + 0x178]
	0x01CDB220 LDR W8, [X0 + 0xE0]
	0x01CDB224 CBNZ W8, 0x1CDB22C
	0x01CDB228 BL 0x1B6E8F8
	0x01CDB22C MOV X0, X20
	0x01CDB230 MOV X1, X21
	0x01CDB234 MOV X2, X31
	0x01CDB238 BL 0x3A9D6EC
	0x01CDB23C TBZ X0, 0x0, 0x1CDB204
	0x01CDB240 LDR X0, [X22]
	0x01CDB244 LDR X21, [X19 + 0x178]
	0x01CDB248 LDR W8, [X0 + 0xE0]
	0x01CDB24C CBNZ W8, 0x1CDB254
	0x01CDB250 BL 0x1B6E8F8
	0x01CDB254 MOV X0, X21
	0x01CDB258 MOV X1, X31
	0x01CDB25C MOV X2, X31
	0x01CDB260 BL 0x3A9D6EC
	0x01CDB264 TBZ X0, 0x0, 0x1CDB27C
	0x01CDB268 LDR X0, [X19 + 0x178]
	0x01CDB26C CBZ X0, 0x1CDBBC8
	0x01CDB270 MOV W1, W31
	0x01CDB274 MOV X2, X31
	0x01CDB278 BL 0x1C9D8D0
	0x01CDB27C LDR X8, [X19]
	0x01CDB280 LDR X9, [X8 + 0x398]
	0x01CDB284 LDR X2, [X8 + 0x3A0]
	0x01CDB288 MOV X0, X19
	0x01CDB28C MOV X1, X20
	0x01CDB290 BLR X9
	0x01CDB294 CBZ X20, 0x1CDBBBC
	0x01CDB298 MOV X0, X20
	0x01CDB29C MOV X1, X31
	0x01CDB2A0 BL 0x3A9B084
	0x01CDB2A4 CBZ X0, 0x1CDBBC0
	0x01CDB2A8 MOV X1, X31
	0x01CDB2AC BL 0x3AA7658
	0x01CDB2B0 LDR X0, [X19 + 0xD0]
	0x01CDB2B4 CBZ X0, 0x1CDBBC4
	0x01CDB2B8 MOV X1, X31
	0x01CDB2BC BL 0x3AA7658
	0x01CDB2C0 ADRP X20, 0x2548000
	0x01CDB2C4 LDRB W8, [X20 + 0x506]
	0x01CDB2C8 CBNZ W8, 0x1CDB2E0
	0x01CDB2CC ADRP X0, 0x2272000
	0x01CDB2D0 LDR X0, [X0 + 0x488]
	0x01CDB2D4 BL 0x1B6E7F0
	0x01CDB2D8 MOVZ W8, 0x1
	0x01CDB2DC STRB W8, [X20 + 0x506]
	0x01CDB2E0 ADRP X8, 0x2272000
	0x01CDB2E4 LDR X8, [X8 + 0x488]
	0x01CDB2E8 LDR X0, [X8]
	0x01CDB2EC LDR W8, [X0 + 0xE0]
	0x01CDB2F0 CBNZ W8, 0x1CDB2F8
	0x01CDB2F4 BL 0x1B6E8F8
	0x01CDB2F8 ADRP X8, 0x2274000
	0x01CDB2FC LDR X8, [X8 + 0xDC8]
	0x01CDB300 ADD X0, X31, 0x50
	0x01CDB304 LDR X1, [X8]
	0x01CDB308 BL 0x2A14F2C
	0x01CDB30C B 0x1CDBB90
	0x01CDB310 LDR X8, [X19]
	0x01CDB314 MOV X0, X19
	0x01CDB318 MOV X1, X31
	0x01CDB31C LDR X9, [X8 + 0x398]
	0x01CDB320 LDR X2, [X8 + 0x3A0]
	0x01CDB324 BLR X9
	0x01CDB328 FMOV S0, W31
	0x01CDB32C MOV X0, X19
	0x01CDB330 BL 0x1CD8E74
	0x01CDB334 B 0x1CDB454
	0x01CDB338 ADRP X8, 0x2274000
	0x01CDB33C LDR X8, [X8 + 0xDC8]
	0x01CDB340 ADD X0, X31, 0x50
	0x01CDB344 LDR X1, [X8]
	0x01CDB348 BL 0x2A14F2C
	0x01CDB34C LDR X0, [X22]
	0x01CDB350 LDR X20, [X19 + 0x178]
	0x01CDB354 LDR W8, [X0 + 0xE0]
	0x01CDB358 CBNZ W8, 0x1CDB360
	0x01CDB35C BL 0x1B6E8F8
	0x01CDB360 MOV X0, X20
	0x01CDB364 MOV X1, X31
	0x01CDB368 MOV X2, X31
	0x01CDB36C BL 0x3A9D6EC
	0x01CDB370 TBZ X0, 0x0, 0x1CDB41C
	0x01CDB374 LDR X0, [X19 + 0x178]
	0x01CDB378 CBZ X0, 0x1CDBBB4
	0x01CDB37C MOV X1, X31
	0x01CDB380 BL 0x3A9B084
	0x01CDB384 CBZ X0, 0x1CDBBB4
	0x01CDB388 MOV X1, X31
	0x01CDB38C BL 0x3AA7658
	0x01CDB390 MOV X0, X19
	0x01CDB394 MOV X1, X31
	0x01CDB398 BL 0x1CE4C60
	0x01CDB39C LDR X8, [X19 + 0xB8]
	0x01CDB3A0 CBZ X8, 0x1CDBBB4
	0x01CDB3A4 LDR X8, [X8 + 0x78]
	0x01CDB3A8 CBZ X8, 0x1CDBBB4
	0x01CDB3AC LDR W9, [X8 + 0x18]
	0x01CDB3B0 CBZ W9, 0x1CDBBB8
	0x01CDB3B4 LDR V0, [X8 + 0x20]
	0x01CDB3B8 FCMP S11, S0
	0x01CDB3BC B.PL 0x1CDB41C
	0x01CDB3C0 MOV X0, X19
	0x01CDB3C4 BL 0x1CD8E14
	0x01CDB3C8 ADD X0, X31, 0x2C
	0x01CDB3CC ADD X1, X31, 0x28
	0x01CDB3D0 BL 0x3D198F0
	0x01CDB3D4 LDR X0, [X19 + 0x178]
	0x01CDB3D8 CBZ X0, 0x1CDBBB4
	0x01CDB3DC LDP S9, S8, [X31 + 0x28]
	0x01CDB3E0 MOV X1, X31
	0x01CDB3E4 BL 0x3A9B084
	0x01CDB3E8 CBZ X0, 0x1CDBBB4
	0x01CDB3EC FMOV S0, 0.5
	0x01CDB3F0 MOV X1, X31
	0x01CDB3F4 FMUL S9, S9, S0
	0x01CDB3F8 FMUL S8, S8, S0
	0x01CDB3FC BL 0x3AA7658
	0x01CDB400 FMOV S3, W31
	0x01CDB404 FADD S0, S9, S0
	0x01CDB408 FADD S1, S1, S3
	0x01CDB40C FADD S2, S8, S2
	0x01CDB410 MOV X0, X19
	0x01CDB414 MOV X1, X31
	0x01CDB418 BL 0x1CE4C60
	0x01CDB41C MOV X0, X19
	0x01CDB420 BL 0x1CD8E14

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+80], D13
	003 Move [X31+88], D12
	004 Move [X31+96], D11
	005 Move [X31+104], D10
	006 Move [X31+112], D9
	007 Move [X31+120], D8
	008 Move [X31+128], X30
	009 Move [X31+144], X22
	010 Move [X31+152], X21
	011 Move [X31+160], X20
	012 Move [X31+168], X19
	013 Move X20, 0x254A000
	014 Move W8, [X20+1558]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {37}
	020 Move X0, 0x2276000
	021 Move X0, [X0+3496]
	022 Call 0x1B6F7F0
	023 Move X0, 0x2276000
	024 Move X0, [X0+3504]
	025 Call 0x1B6F7F0
	026 Move X0, 0x2276000
	027 Move X0, [X0+3512]
	028 Call 0x1B6F7F0
	029 Move X0, 0x2276000
	030 Move X0, [X0+3520]
	031 Call 0x1B6F7F0
	032 Move X0, 0x2274000
	033 Move X0, [X0+1144]
	034 Call 0x1B6F7F0
	035 Move W8, 1
	036 Move [X20+1558], W8
	037 Move [X31+136], X31
	038 Move [X31+48], X31
	039 Move [X31+56], X31
	040 Move [X31+64], X31
	041 Move [X31+40], X31
	042 Move X0, [X19+208]
	043 Compare X0, 0
	044 JumpIfEqual {318}
	045 Move X1, X31
	046 Call Transform.get_position, X0
	047 Move X8, [X19+184]
	048 Compare X8, 0
	049 JumpIfEqual {318}
	050 Move X8, [X8+120]
	051 Compare X8, 0
	052 JumpIfEqual {318}
	053 Move W9, [X8+24]
	054 Compare W9, 0
	055 JumpIfEqual {319}
	056 Move V3, [X8+32]
	057 Add X1, X31, 136
	058 Move X0, X19
	059 Move X2, X31
	060 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {99}
	065 Move X0, [X31+136]
	066 Compare X0, 0
	067 JumpIfEqual {318}
	068 Move X8, 0x2275000
	069 Move X8, [X8+3520]
	070 Move X1, [X8]
	071 Add X8, X31, 16
	072 Call List`1<Object>.GetEnumerator, X0
	073 Move X9, 0x2275000
	074 Move V0, [X31+1]
	075 Move X8, [X31+32]
	076 Move X9, [X9+3504]
	077 Move [X31+3], V0
	078 Move [X31+64], X8
	079 Move X1, [X9]
	080 Add X0, X31, 48
	081 Call Enumerator<Object>.MoveNext, X0
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {94}
	086 Move X1, [X31+64]
	087 Move X0, X19
	088 Call AnglerController.SetAnticipation, X0, X1
	089 Move X8, 0x2275000
	090 Move X8, [X8+3496]
	091 Add X0, X31, 48
	092 Move X1, [X8]
	093 Call Enumerator<Object>.Dispose, X0
	094 Move X8, 0x2275000
	095 Move X8, [X8+3496]
	096 Add X0, X31, 48
	097 Move X1, [X8]
	098 Call Enumerator<Object>.Dispose, X0
	099 Move X22, 0x2273000
	100 Move X22, [X22+1144]
	101 Move X20, [X19+376]
	102 Move X0, [X22]
	103 Move W8, [X0+224]
	104 Compare W8, 0
	105 JumpIfNotEqual {107}
	106 Call 0x1B6F8F8
	107 Move X0, X20
	108 Move X1, X31
	109 Move X2, X31
	110 Call Object.op_Inequality, X0, X1
	111 Move TEMP, X0
	112 And TEMP, TEMP, 1
	113 Compare TEMP, 1
	114 JumpIfNotEqual {171}
	115 Move X0, [X19+376]
	116 Compare X0, 0
	117 JumpIfEqual {318}
	118 Move X1, X31
	119 Call Component.get_transform, X0
	120 Compare X0, 0
	121 JumpIfEqual {318}
	122 Move X1, X31
	123 Call Transform.get_position, X0
	124 Move X0, [X19+208]
	125 Compare X0, 0
	126 JumpIfEqual {318}
	127 Move X1, X31
	128 Move V8, V0
	129 Move V9, V1
	130 Move V10, V2
	131 Call Transform.get_position, X0
	132 Move X20, 0x2549000
	133 Move W8, [X20+1286]
	134 Move V11, V0
	135 Move V12, V1
	136 Move V13, V2
	137 Compare W8, 0
	138 JumpIfNotEqual {144}
	139 Move X0, 0x2273000
	140 Move X0, [X0+1160]
	141 Call 0x1B6F7F0
	142 Move W8, 1
	143 Move [X20+1286], W8
	144 Move X8, 0x2273000
	145 Move X8, [X8+1160]
	146 Move X0, [X8]
	147 Move W8, [X0+224]
	148 Compare W8, 0
	149 JumpIfNotEqual {151}
	150 Call 0x1B6F8F8
	151 Move X8, [X19+184]
	152 Compare X8, 0
	153 JumpIfEqual {318}
	154 Move X8, [X8+120]
	155 Compare X8, 0
	156 JumpIfEqual {318}
	157 Move W9, [X8+24]
	158 Compare W9, 0
	159 JumpIfEqual {319}
	160 Subtract S0, S8, S11
	161 Subtract S1, S9, S12
	162 Subtract S2, S10, S13
	163 Move V3, [X8+32]
	164 Multiply S0, S0, S0
	165 Multiply S1, S1, S1
	166 Add S0, S0, S1
	167 Multiply S1, S2, S2
	168 Add S0, S1, S0
	169 NotImplemented "Instruction FSQRT not yet implemented."
	170 NotImplemented "Instruction FCMP not yet implemented."
	171 Move X0, [X19+208]
	172 Compare X0, 0
	173 JumpIfEqual {318}
	174 Move X1, X31
	175 Call Transform.get_position, X0
	176 Move X0, [X19+208]
	177 Compare X0, 0
	178 JumpIfEqual {318}
	179 Move X1, X31
	180 Move V8, V0
	181 Move V9, V1
	182 Move V10, V2
	183 Call Transform.get_forward, X0
	184 Move X8, [X19+184]
	185 Compare X8, 0
	186 JumpIfEqual {318}
	187 Move V6, [X8+128]
	188 Move V3, V0
	189 Move V4, V1
	190 Move V5, V2
	191 Add X0, X31, 40
	192 Move V0, V8
	193 Move V1, V9
	194 Move V2, V10
	195 Move X1, X31
	196 Call MobDetectionUtil.TryGetAnyLightBySight, X0, X1, V0, X2
	197 Move TEMP, X0
	198 And TEMP, TEMP, 1
	199 Compare TEMP, 1
	200 JumpIfNotEqual {277}
	201 Move X0, [X22]
	202 Move X20, [X19+376]
	203 Move X21, [X31+40]
	204 Move W8, [X0+224]
	205 Compare W8, 0
	206 JumpIfNotEqual {208}
	207 Call 0x1B6F8F8
	208 Move X0, X20
	209 Move X1, X21
	210 Move X2, X31
	211 Call Object.op_Inequality, X0, X1
	212 Move TEMP, X0
	213 And TEMP, TEMP, 1
	214 Compare TEMP, 1
	215 JumpIfNotEqual {233}
	216 Move X8, [X19]
	217 Move X1, [X31+40]
	218 Move X0, X19
	219 Move X9, [X8+920]
	220 Move X2, [X8+928]
	221 NotImplemented "Instruction BLR not yet implemented."
	222 Move X0, [X31+40]
	223 Compare X0, 0
	224 JumpIfEqual {318}
	225 Move X1, X31
	226 Call Component.get_transform, X0
	227 Compare X0, 0
	228 JumpIfEqual {318}
	229 Move X1, X31
	230 Call Transform.get_position, X0
	231 Move X0, X19
	232 Call AnglerController.SetLightDetected, X0, X1
	233 Move X0, X19
	234 Call AnglerController.get_timerAroundLight, X0
	235 Move X0, X19
	236 Move X1, X31
	237 Move V8, V0
	238 Call MobController.get_deltaTime, X0
	239 Add S0, S8, S0
	240 Move X0, X19
	241 Call AnglerController.set_timerAroundLight, X0, V0
	242 Move X0, X19
	243 Call AnglerController.get_timerAroundLight, X0
	244 Move S1, 10
	245 NotImplemented "Instruction FCMP not yet implemented."
	246 Move X0, X19
	247 Call AnglerController.get_phase, X0
	248 NotImplemented "Instruction CMP not yet implemented."
	249 Move X0, X19
	250 Call AnglerController.get_timerAroundLight, X0
	251 Move X0, X19
	252 Move X1, X31
	253 Move V10, V0
	254 Call MobController.get__positionThatPlayerStayed, X0
	255 Move X19, [X19+200]
	256 Compare X19, 0
	257 JumpIfEqual {318}
	258 Move V8, V0
	259 Add X0, X31, 12
	260 Add X1, X31, 8
	261 Move V0, V10
	262 Move V9, V1
	263 Move V11, V2
	264 Call 0x3D1A8F0
	265 Move S0, [X31+8]
	266 Move S2, [X31+12]
	267 Move S3, 0.5
	268 Move S1, W31
	269 Add S1, S9, S1
	270 Multiply S2, S2, S3
	271 Multiply S0, S0, S3
	272 Add S2, S11, S2
	273 Add S0, S8, S0
	274 Move X0, X19
	275 Move X1, X31
	276 Call NavMeshAgent.SetDestination, X0, X1
	277 Move X8, [X19]
	278 Move X0, X19
	279 Move X1, X31
	280 Move X9, [X8+920]
	281 Move X2, [X8+928]
	282 NotImplemented "Instruction BLR not yet implemented."
	283 Move X0, [X22]
	284 Move X20, [X19+376]
	285 Move W8, [X0+224]
	286 Compare W8, 0
	287 JumpIfNotEqual {289}
	288 Call 0x1B6F8F8
	289 Move X0, X20
	290 Move X1, X31
	291 Move X2, X31
	292 Call Object.op_Inequality, X0, X1
	293 Move TEMP, X0
	294 And TEMP, TEMP, 1
	295 Compare TEMP, 1
	296 JumpIfNotEqual {303}
	297 Move X0, [X19+376]
	298 Compare X0, 0
	299 JumpIfEqual {318}
	300 Move W1, W31
	301 Move X2, X31
	302 Call Flashlight.set_isOn, X0, X1
	303 Move X0, X19
	304 Call AnglerController.SetRoaming, X0
	305 Move X20, [X31+160]
	306 Move X19, [X31+168]
	307 Move X22, [X31+144]
	308 Move X21, [X31+152]
	309 Move X30, [X31+128]
	310 Move D9, [X31+112]
	311 Move D8, [X31+120]
	312 Move D11, [X31+96]
	313 Move D10, [X31+104]
	314 Move D13, [X31+80]
	315 Move D12, [X31+88]
	316 Add X31, X31, 176
	317 Return 
	318 Call 0x1B6FA1C
	319 Call 0x1B6FA24
	320 Move X21, X0
	321 NotImplemented "Instruction CMP not yet implemented."
	322 Move X0, X21
	323 Call 0x3D1A840
	324 Move X20, [X0]
	325 Call 0x3D1A850
	326 Move X8, 0x2275000
	327 Move X8, [X8+3496]
	328 Add X0, X31, 48
	329 Move X1, [X8]
	330 Call Enumerator<Object>.Dispose, X0
	331 Compare X20, 0
	332 JumpIfEqual {99}
	333 Move X0, X20
	334 Call 0x1B6FA14
	335 Move X20, X31
	336 Move X21, X0
	337 Move X8, 0x2275000
	338 Move X8, [X8+3496]
	339 Move X1, [X8]
	340 Add X0, X31, 48
	341 Call Enumerator<Object>.Dispose, X0
	342 Compare X20, 0
	343 JumpIfNotEqual {346}
	344 Move X0, X21
	345 Call 0x1C8518C
	346 Move X0, X20
	347 Call 0x1B6FA14
	348 Call 0x18F56A8

Method: UnityEngine.Vector3 GetCircle(System.Single radius, System.Single speed)

Disassembly:
	0x01CDBD04 CMP W0, 0x4
	0x01CDBD08 B.NE 0x1CDBD18
	0x01CDBD0C LDP X20, X19, [X31 + 0x10]
	0x01CDBD10 LDP X30, X21, [X31], #0x20
	0x01CDBD14 RET
	0x01CDBD18 LDR X0, [X19 + 0x40]
	0x01CDBD1C CBZ X0, 0x1CDBE08
	0x01CDBD20 MOV X1, X31
	0x01CDBD24 BL 0x1D9F538
	0x01CDBD28 TBNZ X0, 0x0, 0x1CDBD64
	0x01CDBD2C LDR X0, [X21]
	0x01CDBD30 LDR X19, [X19 + 0x40]
	0x01CDBD34 LDR W8, [X0 + 0xE0]
	0x01CDBD38 CBNZ W8, 0x1CDBD40
	0x01CDBD3C BL 0x1B6E8F8
	0x01CDBD40 ADRP X8, 0x2274000

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move V8, V1
	005 Move V9, V0
	006 Call AnglerController.get_timerAroundLight, X0
	007 Multiply S0, S0, S8
	008 Add X0, X31, 28
	009 Add X1, X31, 24
	010 Call 0x3D1A8F0
	011 Move S0, [X31+24]
	012 Move S1, [X31+28]
	013 Move X30, [X31+16]
	014 Multiply S0, S0, S9
	015 Multiply S2, S1, S9
	016 Move S1, W31
	017 Move D9, [X31+32]
	018 Move D8, [X31+40]
	019 Return X0

Method: System.Void SetAnticipation(AnimalCompany.NetPlayer player)

Disassembly:
	0x01CDBB50 MOV X0, X19
	0x01CDBB54 MOV X1, X31
	0x01CDBB58 FMUL S8, S8, S0
	0x01CDBB5C FMUL S9, S9, S0
	0x01CDBB60 FMUL S10, S10, S0
	0x01CDBB64 BL 0x1CE4CC4
	0x01CDBB68 FMUL S3, S8, S0
	0x01CDBB6C FMUL S1, S9, S0
	0x01CDBB70 FMUL S2, S10, S0
	0x01CDBB74 MOV X0, X20
	0x01CDBB78 MOV V0.16B, V3.16B
	0x01CDBB7C MOV X1, X31
	0x01CDBB80 BL 0x3A4AABC
	0x01CDBB84 B 0x1CDBB90
	0x01CDBB88 MOV X0, X19
	0x01CDBB8C BL 0x1CD9014
	0x01CDBB90 LDP X20, X19, [X31 + 0xD0]
	0x01CDBB94 LDP X22, X21, [X31 + 0xC0]
	0x01CDBB98 LDP X30, X23, [X31 + 0xB0]
	0x01CDBB9C LDP D9, D8, [X31 + 0xA0]
	0x01CDBBA0 LDP D11, D10, [X31 + 0x90]
	0x01CDBBA4 LDP D13, D12, [X31 + 0x80]
	0x01CDBBA8 LDP D15, D14, [X31 + 0x70]
	0x01CDBBAC ADD X31, X31, 0xE0
	0x01CDBBB0 RET
	0x01CDBBB4 BL 0x1B6EA1C
	0x01CDBBB8 BL 0x1B6EA24
	0x01CDBBBC BL 0x1B6EA1C
	0x01CDBBC0 BL 0x1B6EA1C
	0x01CDBBC4 BL 0x1B6EA1C
	0x01CDBBC8 BL 0x1B6EA1C
	0x01CDBBCC B 0x1CDBBFC
	0x01CDBBD0 B 0x1CDBBFC
	0x01CDBBD4 B 0x1CDBBFC
	0x01CDBBD8 B 0x1CDBBFC
	0x01CDBBDC B 0x1CDBBFC
	0x01CDBBE0 B 0x1CDBBFC
	0x01CDBBE4 B 0x1CDBBFC
	0x01CDBBE8 B 0x1CDBBFC
	0x01CDBBEC B 0x1CDBBFC
	0x01CDBBF0 B 0x1CDBBFC
	0x01CDBBF4 B 0x1CDBBFC
	0x01CDBBF8 B 0x1CDBBFC
	0x01CDBBFC MOV X20, X0
	0x01CDBC00 CMP W1, 0x1
	0x01CDBC04 B.NE 0x1CDBC38

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2549000
	007 Move X21, 0x2273000
	008 Move W8, [X22+1559]
	009 Move X21, [X21+1144]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2273000
	017 Move X0, [X0+1144]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X22+1559], W8
	021 Move X8, [X19]
	022 Move X0, X19
	023 Move X1, X20
	024 Move X9, [X8+824]
	025 Move X2, [X8+832]
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1B6F8F8
	032 Move X0, X20
	033 Move X1, X31
	034 Move X2, X31
	035 Call Object.op_Inequality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {52}
	040 Compare X20, 0
	041 JumpIfEqual {60}
	042 Move X0, X20
	043 Move X1, X31
	044 Call Component.get_transform, X0
	045 Compare X0, 0
	046 JumpIfEqual {60}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X0, X19
	050 Move X1, X31
	051 Call MobController.set__positionThatPlayerStayed, X0, X1
	052 Move X0, X19
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]
	058 Call AnglerController.SetAnticipation, X0
	059 Return 
	060 Call 0x1B6FA1C

Method: System.Void SetAnticipation(UnityEngine.Vector3 targetPosition)

Disassembly:
	0x01CDBC08 MOV X0, X20
	0x01CDBC0C BL 0x3D19840
	0x01CDBC10 LDR X21, [X0]
	0x01CDBC14 BL 0x3D19850
	0x01CDBC18 ADRP X8, 0x2274000
	0x01CDBC1C LDR X8, [X8 + 0xDC8]
	0x01CDBC20 ADD X0, X31, 0x50
	0x01CDBC24 LDR X1, [X8]
	0x01CDBC28 BL 0x2A14F2C
	0x01CDBC2C CBZ X21, 0x1CDB34C
	0x01CDBC30 MOV X0, X21
	0x01CDBC34 BL 0x1B6EA14
	0x01CDBC38 MOV X21, X31
	0x01CDBC3C B 0x1CDBC44
	0x01CDBC40 MOV X20, X0
	0x01CDBC44 ADRP X8, 0x2274000
	0x01CDBC48 LDR X8, [X8 + 0xDC8]
	0x01CDBC4C LDR X1, [X8]
	0x01CDBC50 ADD X0, X31, 0x50
	0x01CDBC54 BL 0x2A14F2C
	0x01CDBC58 CBNZ X21, 0x1CDBC64
	0x01CDBC5C MOV X0, X20
	0x01CDBC60 BL 0x1C8418C

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X8, [X0]
	007 Move X1, X31
	008 Move V8, V2
	009 Move V9, V1
	010 Move X9, [X8+824]
	011 Move X2, [X8+832]
	012 Move X19, X0
	013 Move V10, V0
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X0, X19
	016 Move V0, V10
	017 Move V1, V9
	018 Move V2, V8
	019 Move X1, X31
	020 Call MobController.set__positionThatPlayerStayed, X0, X1
	021 Move X0, X19
	022 Move X30, [X31+32]
	023 Move X19, [X31+40]
	024 Move D9, [X31+16]
	025 Move D8, [X31+24]
	026 Move V10, [X31+48]
	027 Call AnglerController.SetAnticipation, X0
	028 Return 

Method: System.Void SetAnticipation()

Disassembly:
	0x01CDBD44 LDR X8, [X8 + 0xE00]
	0x01CDBD48 MOV X1, X19
	0x01CDBD4C LDP X20, X19, [X31 + 0x10]
	0x01CDBD50 MOVZ W2, 0x1
	0x01CDBD54 LDR X0, [X8]
	0x01CDBD58 MOV X3, X31
	0x01CDBD5C LDP X30, X21, [X31], #0x20
	0x01CDBD60 B 0x1D69640
	0x01CDBD64 LDR X8, [X19 + 0x38]
	0x01CDBD68 CBZ X8, 0x1CDBE08
	0x01CDBD6C MOV W20, W0
	0x01CDBD70 LDR X0, [X8 + 0x50]
	0x01CDBD74 CBZ X0, 0x1CDBE08
	0x01CDBD78 MOV X1, X31
	0x01CDBD7C BL 0x1DBEFE4
	0x01CDBD80 TBZ X0, 0x0, 0x1CDBDFC
	0x01CDBD84 LDR X8, [X19 + 0x38]
	0x01CDBD88 CBZ X8, 0x1CDBE08
	0x01CDBD8C LDR X0, [X8 + 0x50]
	0x01CDBD90 MOVZ W1, 0x8
	0x01CDBD94 MOV X2, X31
	0x01CDBD98 BL 0x1DD601C
	0x01CDBD9C MOV X21, X0
	0x01CDBDA0 MOVZ W0, 0x1
	0x01CDBDA4 MOV X1, X31
	0x01CDBDA8 BL 0x1D29EBC
	0x01CDBDAC LDR X8, [X19 + 0x40]
	0x01CDBDB0 CBZ X8, 0x1CDBE08
	0x01CDBDB4 LDR X8, [X8 + 0x20]
	0x01CDBDB8 CBZ X8, 0x1CDBDC4
	0x01CDBDBC LDR W0, [X8]
	0x01CDBDC0 B 0x1CDBDC8
	0x01CDBDC4 MOV X0, X31
	0x01CDBDC8 LDR W1, [X19 + 0x68]
	0x01CDBDCC MOVZ W2, 0x4
	0x01CDBDD0 MOV X3, X31
	0x01CDBDD4 BL 0x1DA8258

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W1, 4
	005 Move X19, X0
	006 Call AnglerController.set_phase, X0, X1
	007 Move X9, [X19+184]
	008 Compare X9, 0
	009 JumpIfEqual {44}
	010 Move X8, [X9+88]
	011 Compare X8, 0
	012 JumpIfEqual {44}
	013 Move W10, [X8+24]
	014 Compare W10, 0
	015 JumpIfEqual {45}
	016 Move X9, [X9+96]
	017 Compare X9, 0
	018 JumpIfEqual {44}
	019 Move W10, [X9+24]
	020 Compare W10, 0
	021 JumpIfEqual {45}
	022 Move X10, [X19]
	023 Move V1, [X8+32]
	024 Move V2, [X9+32]
	025 Move S0, W31
	026 Move X8, [X10+680]
	027 Move X2, [X10+688]
	028 Move W1, 1
	029 Move X0, X19
	030 Move W20, 1
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move S0, W31
	033 Move X0, X19
	034 Move [X19+224], W20
	035 Call AnglerController.set_timerAnticipation, X0, V0
	036 Move X0, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move S0, W31
	040 Move X1, X31
	041 Move X30, [X31+32]
	042 Call MobController.set__timerToChasing, X0, V0
	043 Return 
	044 Call 0x1B6FA1C
	045 Call 0x1B6FA24

Method: System.Void UpdateAnticipation()

Disassembly:
	0x01CDB424 MOV X0, X19
	0x01CDB428 MOV X1, X31
	0x01CDB42C MOV V8.16B, V0.16B
	0x01CDB430 BL 0x1CE4CC4
	0x01CDB434 FADD S0, S8, S0
	0x01CDB438 MOV X0, X19
	0x01CDB43C BL 0x1CD8E74
	0x01CDB440 MOV X0, X19
	0x01CDB444 BL 0x1CD8E14
	0x01CDB448 FMOV S1, 10
	0x01CDB44C FCMP S0, S1
	0x01CDB450 B.GE 0x1CDB808
	0x01CDB454 LDR X0, [X22]
	0x01CDB458 LDR X20, [X19 + 0x178]
	0x01CDB45C LDR W8, [X0 + 0xE0]
	0x01CDB460 CBNZ W8, 0x1CDB468
	0x01CDB464 BL 0x1B6E8F8
	0x01CDB468 MOV X0, X20
	0x01CDB46C MOV X1, X31
	0x01CDB470 MOV X2, X31
	0x01CDB474 BL 0x3AA0AF0
	0x01CDB478 TBZ X0, 0x0, 0x1CDB488
	0x01CDB47C MOV X0, X19
	0x01CDB480 MOV X1, X31
	0x01CDB484 BL 0x1CE6A44
	0x01CDB488 MOV X0, X19
	0x01CDB48C MOV X1, X31
	0x01CDB490 BL 0x1CE484C
	0x01CDB494 MOV X0, X19
	0x01CDB498 MOV X1, X31
	0x01CDB49C MOV V8.16B, V0.16B
	0x01CDB4A0 BL 0x1CE4CC4
	0x01CDB4A4 FADD S0, S8, S0
	0x01CDB4A8 MOV X0, X19
	0x01CDB4AC MOV X1, X31
	0x01CDB4B0 BL 0x1CE48AC
	0x01CDB4B4 MOV X0, X19
	0x01CDB4B8 MOV X1, X31
	0x01CDB4BC BL 0x1CE484C
	0x01CDB4C0 FMOV S1, 1
	0x01CDB4C4 FCMP S0, S1
	0x01CDB4C8 B.LE 0x1CDB4F4
	0x01CDB4CC LDR X0, [X19 + 0xC8]
	0x01CDB4D0 CBZ X0, 0x1CDBBB4
	0x01CDB4D4 MOV X1, X31
	0x01CDB4D8 BL 0x3A4AB54
	0x01CDB4DC TBZ X0, 0x0, 0x1CDB4F4
	0x01CDB4E0 LDR X0, [X19 + 0xC8]
	0x01CDB4E4 CBZ X0, 0x1CDBBB4
	0x01CDB4E8 MOV W1, W31
	0x01CDB4EC MOV X2, X31
	0x01CDB4F0 BL 0x3A4AB90
	0x01CDB4F4 LDR X0, [X22]
	0x01CDB4F8 LDR X20, [X19 + 0x140]
	0x01CDB4FC LDR W8, [X0 + 0xE0]
	0x01CDB500 CBNZ W8, 0x1CDB508
	0x01CDB504 BL 0x1B6E8F8
	0x01CDB508 MOV X0, X20
	0x01CDB50C MOV X1, X31
	0x01CDB510 MOV X2, X31
	0x01CDB514 BL 0x3A9D6EC
	0x01CDB518 TBZ X0, 0x0, 0x1CDB680
	0x01CDB51C LDR X0, [X19 + 0xD0]
	0x01CDB520 CBZ X0, 0x1CDBBB4
	0x01CDB524 MOV X1, X31
	0x01CDB528 BL 0x3AA7658
	0x01CDB52C MOV X0, X31
	0x01CDB530 BL 0x1CC086C
	0x01CDB534 LDR X0, [X19 + 0x140]
	0x01CDB538 CBZ X0, 0x1CDBBB4
	0x01CDB53C MOV X1, X31
	0x01CDB540 MOV V8.16B, V0.16B
	0x01CDB544 MOV V9.16B, V1.16B
	0x01CDB548 MOV V10.16B, V2.16B
	0x01CDB54C BL 0x3A9B084
	0x01CDB550 CBZ X0, 0x1CDBBB4
	0x01CDB554 MOV X1, X31
	0x01CDB558 BL 0x3AA7658
	0x01CDB55C MOV X0, X31
	0x01CDB560 BL 0x1CC086C
	0x01CDB564 LDR X0, [X19 + 0xD0]
	0x01CDB568 CBZ X0, 0x1CDBBB4
	0x01CDB56C MOV X1, X31
	0x01CDB570 MOV V12.16B, V0.16B
	0x01CDB574 MOV V13.16B, V1.16B
	0x01CDB578 MOV V14.16B, V2.16B
	0x01CDB57C BL 0x3AA7658
	0x01CDB580 LDR X0, [X19 + 0x140]
	0x01CDB584 CBZ X0, 0x1CDBBB4
	0x01CDB588 MOV X1, X31
	0x01CDB58C MOV V11.16B, V1.16B
	0x01CDB590 BL 0x3A9B084
	0x01CDB594 CBZ X0, 0x1CDBBB4
	0x01CDB598 MOV X1, X31
	0x01CDB59C BL 0x3AA7658
	0x01CDB5A0 MOV X0, X19
	0x01CDB5A4 MOV X1, X31
	0x01CDB5A8 MOV V15.16B, V1.16B
	0x01CDB5AC BL 0x1CE484C
	0x01CDB5B0 LDR X0, [X19 + 0xB8]
	0x01CDB5B4 CBZ X0, 0x1CDBBB4
	0x01CDB5B8 LDR V1, [X0 + 0x28]
	0x01CDB5BC FCMP S0, S1
	0x01CDB5C0 B.LT 0x1CDB6FC
	0x01CDB5C4 FSUB S0, S8, S12
	0x01CDB5C8 FSUB S1, S9, S13
	0x01CDB5CC FSUB S2, S10, S14
	0x01CDB5D0 FMUL S0, S0, S0
	0x01CDB5D4 FMUL S1, S1, S1
	0x01CDB5D8 FADD S0, S0, S1
	0x01CDB5DC FMUL S1, S2, S2
	0x01CDB5E0 MOV X1, X31
	0x01CDB5E4 FADD S8, S1, S0
	0x01CDB5E8 BL 0x1CE847C
	0x01CDB5EC FCMP S8, S0
	0x01CDB5F0 B.PL 0x1CDB6FC
	0x01CDB5F4 LDR X8, [X19 + 0xB8]
	0x01CDB5F8 CBZ X8, 0x1CDBBB4
	0x01CDB5FC LDR V0, [X8 + 0x4C]
	0x01CDB600 FABD S1, S11, S11
	0x01CDB604 FCMP S1, S0
	0x01CDB608 B.PL 0x1CDB6FC
	0x01CDB60C FMOV S0, W31
	0x01CDB610 MOV X0, X19
	0x01CDB614 MOV X1, X31
	0x01CDB618 BL 0x1CE48AC
	0x01CDB61C LDR X0, [X19 + 0xC8]
	0x01CDB620 CBZ X0, 0x1CDBBB4
	0x01CDB624 MOVZ W1, 0x1
	0x01CDB628 MOV X2, X31
	0x01CDB62C BL 0x3A4AB90
	0x01CDB630 LDR X8, [X19 + 0xB8]
	0x01CDB634 CBZ X8, 0x1CDBBB4
	0x01CDB638 LDR X20, [X19 + 0x140]
	0x01CDB63C LDR W21, [X8 + 0x24]
	0x01CDB640 MOV X0, X19
	0x01CDB644 MOV X1, X31
	0x01CDB648 BL 0x3A9B084
	0x01CDB64C LDR X8, [X19 + 0xB8]
	0x01CDB650 CBZ X8, 0x1CDBBB4
	0x01CDB654 CBZ X20, 0x1CDBBB4
	0x01CDB658 LDR X5, [X8 + 0x18]
	0x01CDB65C LDP X4, X3, [X8 + 0xB8]
	0x01CDB660 MOV X2, X0
	0x01CDB664 MOV X0, X20
	0x01CDB668 MOV W1, W21
	0x01CDB66C MOV X6, X31
	0x01CDB670 BL 0x1CB92E8
	0x01CDB674 MOV X0, X19
	0x01CDB678 BL 0x1CDBC70
	0x01CDB67C B 0x1CDB6FC
	0x01CDB680 LDR X0, [X22]
	0x01CDB684 LDR X20, [X19 + 0x178]
	0x01CDB688 LDR W8, [X0 + 0xE0]
	0x01CDB68C CBNZ W8, 0x1CDB694
	0x01CDB690 BL 0x1B6E8F8
	0x01CDB694 MOV X0, X20
	0x01CDB698 MOV X1, X31
	0x01CDB69C MOV X2, X31
	0x01CDB6A0 BL 0x3AA0AF0
	0x01CDB6A4 TBZ X0, 0x0, 0x1CDB6FC
	0x01CDB6A8 MOV X0, X19
	0x01CDB6AC MOV X1, X31
	0x01CDB6B0 BL 0x1CE46CC
	0x01CDB6B4 MOV X0, X19
	0x01CDB6B8 MOV X1, X31
	0x01CDB6BC MOV V8.16B, V0.16B
	0x01CDB6C0 BL 0x1CE4CC4
	0x01CDB6C4 FADD S0, S8, S0
	0x01CDB6C8 MOV X0, X19
	0x01CDB6CC MOV X1, X31
	0x01CDB6D0 BL 0x1CE472C
	0x01CDB6D4 MOV X0, X19
	0x01CDB6D8 MOV X1, X31
	0x01CDB6DC BL 0x1CE46CC
	0x01CDB6E0 LDR X8, [X19 + 0xB8]
	0x01CDB6E4 CBZ X8, 0x1CDBBB4
	0x01CDB6E8 LDR V1, [X8 + 0x68]
	0x01CDB6EC FCMP S0, S1
	0x01CDB6F0 B.LT 0x1CDB6FC
	0x01CDB6F4 MOV X0, X19
	0x01CDB6F8 BL 0x1CD9014
	0x01CDB6FC MOV X0, X19
	0x01CDB700 BL 0x1CD8D54
	0x01CDB704 CMP W0, 0x5
	0x01CDB708 B.NE 0x1CDBB90
	0x01CDB70C LDR X0, [X19 + 0xC8]
	0x01CDB710 CBZ X0, 0x1CDBBB4
	0x01CDB714 MOV X1, X31
	0x01CDB718 BL 0x3A4A9E4
	0x01CDB71C TBZ X0, 0x0, 0x1CDB7E4
	0x01CDB720 MOV X0, X19
	0x01CDB724 MOV X1, X31
	0x01CDB728 BL 0x1CE4BFC
	0x01CDB72C MOV X0, X19
	0x01CDB730 MOV X1, X31
	0x01CDB734 MOV V8.16B, V0.16B
	0x01CDB738 MOV V9.16B, V1.16B
	0x01CDB73C MOV V10.16B, V2.16B
	0x01CDB740 BL 0x3A9B084
	0x01CDB744 CBZ X0, 0x1CDBBB4
	0x01CDB748 MOV X1, X31
	0x01CDB74C BL 0x3AA7658
	0x01CDB750 ADRP X21, 0x2548000
	0x01CDB754 LDRB W8, [X21 + 0x441]
	0x01CDB758 MOV V11.16B, V0.16B
	0x01CDB75C MOV V12.16B, V1.16B
	0x01CDB760 MOV V13.16B, V2.16B
	0x01CDB764 CBNZ W8, 0x1CDB77C
	0x01CDB768 ADRP X0, 0x2272000
	0x01CDB76C LDR X0, [X0 + 0x488]
	0x01CDB770 BL 0x1B6E7F0
	0x01CDB774 MOVZ W8, 0x1
	0x01CDB778 STRB W8, [X21 + 0x441]
	0x01CDB77C ADRP X20, 0x2272000
	0x01CDB780 LDR X20, [X20 + 0x488]
	0x01CDB784 FSUB S14, S8, S11
	0x01CDB788 FSUB S11, S9, S12
	0x01CDB78C FSUB S8, S10, S13
	0x01CDB790 LDR X0, [X20]
	0x01CDB794 LDR W8, [X0 + 0xE0]
	0x01CDB798 CBNZ W8, 0x1CDB7A0
	0x01CDB79C BL 0x1B6E8F8
	0x01CDB7A0 ADRP X8, 0xFFFFFFFFFEDCE000
	0x01CDB7A4 FMUL S0, S14, S14
	0x01CDB7A8 FMUL S1, S11, S11
	0x01CDB7AC LDR V9, [X8 + 0xB64]
	0x01CDB7B0 ADRP X22, 0x2272000
	0x01CDB7B4 FMUL S2, S8, S8
	0x01CDB7B8 FADD S0, S0, S1
	0x01CDB7BC LDR X22, [X22 + 0x480]
	0x01CDB7C0 FADD S0, S2, S0
	0x01CDB7C4 FSQRT S0, S0
	0x01CDB7C8 FCMP S0, S9
	0x01CDB7CC ADRP X23, 0x2548000
	0x01CDB7D0 B.LE 0x1CDB898
	0x01CDB7D4 FDIV S10, S14, S0
	0x01CDB7D8 FDIV S14, S11, S0
	0x01CDB7DC FDIV S15, S8, S0
	0x01CDB7E0 B 0x1CDB8C4
	0x01CDB7E4 LDR X20, [X19 + 0xC8]
	0x01CDB7E8 MOV X0, X19
	0x01CDB7EC MOV X1, X31
	0x01CDB7F0 BL 0x1CE4BFC
	0x01CDB7F4 CBZ X20, 0x1CDBBB4
	0x01CDB7F8 MOV X0, X20
	0x01CDB7FC MOV X1, X31
	0x01CDB800 BL 0x3A4A810
	0x01CDB804 B 0x1CDBB90
	0x01CDB808 LDR X0, [X22]
	0x01CDB80C LDR X20, [X19 + 0x178]
	0x01CDB810 LDR W8, [X0 + 0xE0]
	0x01CDB814 CBNZ W8, 0x1CDB81C
	0x01CDB818 BL 0x1B6E8F8
	0x01CDB81C MOV X0, X20

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X1, X31
	017 Move X19, X0
	018 Call MobController.UpdateChasing, X0
	019 Move X0, X19
	020 Move X1, X31
	021 Call MobController.get__positionThatPlayerStayed, X0
	022 Move X0, X19
	023 Move X1, X31
	024 Move V8, V0
	025 Move V9, V1
	026 Move V10, V2
	027 Call Component.get_transform, X0
	028 Compare X0, 0
	029 JumpIfEqual {287}
	030 Move X1, X31
	031 Call Transform.get_position, X0
	032 Move X21, 0x2549000
	033 Move W8, [X21+1089]
	034 Move V11, V0
	035 Move V12, V1
	036 Move V13, V2
	037 Compare W8, 0
	038 JumpIfNotEqual {44}
	039 Move X0, 0x2273000
	040 Move X0, [X0+1160]
	041 Call 0x1B6F7F0
	042 Move W8, 1
	043 Move [X21+1089], W8
	044 Move X20, 0x2273000
	045 Move X20, [X20+1160]
	046 Subtract S14, S8, S11
	047 Subtract S9, S9, S12
	048 Subtract S8, S10, S13
	049 Move X0, [X20]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1B6F8F8
	054 Move X8, -19075072
	055 Multiply S0, S14, S14
	056 Multiply S1, S9, S9
	057 Move V11, [X8+2916]
	058 Move X22, 0x2273000
	059 Multiply S2, S8, S8
	060 Add S0, S0, S1
	061 Move X22, [X22+1152]
	062 Add S0, S2, S0
	063 NotImplemented "Instruction FSQRT not yet implemented."
	064 NotImplemented "Instruction FCMP not yet implemented."
	065 Move X23, 0x2549000
	066 NotImplemented "Instruction FDIV not yet implemented."
	067 NotImplemented "Instruction FDIV not yet implemented."
	068 NotImplemented "Instruction FDIV not yet implemented."
	069 Move W8, [X23+1087]
	070 Compare W8, 0
	071 JumpIfNotEqual {77}
	072 Move X0, 0x2273000
	073 Move X0, [X0+1152]
	074 Call 0x1B6F7F0
	075 Move W8, 1
	076 Move [X23+1087], W8
	077 Move X8, [X22]
	078 Move X8, [X8+184]
	079 Move S0, [X8]
	080 Move S1, [X8+4]
	081 Move V2, [X8+8]
	082 Move X0, X31
	083 Call Extensions.Flatten, X0
	084 Move W8, [X21+1089]
	085 Move V8, V0
	086 Move V9, V1
	087 Move V10, V2
	088 Compare W8, 0
	089 JumpIfNotEqual {95}
	090 Move X0, 0x2273000
	091 Move X0, [X0+1160]
	092 Call 0x1B6F7F0
	093 Move W8, 1
	094 Move [X21+1089], W8
	095 Move X0, [X20]
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1B6F8F8
	100 Multiply S0, S8, S8
	101 Multiply S1, S9, S9
	102 Add S0, S0, S1
	103 Multiply S1, S10, S10
	104 Add S0, S1, S0
	105 NotImplemented "Instruction FSQRT not yet implemented."
	106 NotImplemented "Instruction FCMP not yet implemented."
	107 NotImplemented "Instruction FDIV not yet implemented."
	108 NotImplemented "Instruction FDIV not yet implemented."
	109 NotImplemented "Instruction FDIV not yet implemented."
	110 Move W8, [X23+1087]
	111 Compare W8, 0
	112 JumpIfNotEqual {118}
	113 Move X0, 0x2273000
	114 Move X0, [X0+1152]
	115 Call 0x1B6F7F0
	116 Move W8, 1
	117 Move [X23+1087], W8
	118 Move X8, [X22]
	119 Move X8, [X8+184]
	120 Move S8, [X8]
	121 Move S9, [X8+4]
	122 Move V10, [X8+8]
	123 Move X8, [X19+184]
	124 Compare X8, 0
	125 JumpIfEqual {287}
	126 Move V11, [X8+64]
	127 Move X0, X19
	128 Move X1, X31
	129 Call Component.get_transform, X0
	130 Compare X0, 0
	131 JumpIfEqual {287}
	132 Move X1, X31
	133 Move [X31+12], S11
	134 Call Transform.get_forward, X0
	135 Move X21, 0x2549000
	136 Move W8, [X21+1111]
	137 Move V11, V0
	138 Move V12, V1
	139 Move V13, V2
	140 Compare W8, 0
	141 JumpIfNotEqual {147}
	142 Move X0, 0x2273000
	143 Move X0, [X0+1160]
	144 Call 0x1B6F7F0
	145 Move W8, 1
	146 Move [X21+1111], W8
	147 Move X0, [X20]
	148 Multiply S0, S8, S8
	149 Multiply S1, S9, S9
	150 Add S0, S0, S1
	151 Multiply S1, S10, S10
	152 Move W8, [X0+224]
	153 Add S15, S1, S0
	154 Multiply S0, S11, S11
	155 Multiply S1, S12, S12
	156 Add S0, S0, S1
	157 Multiply S1, S13, S13
	158 Add S14, S1, S0
	159 Compare W8, 0
	160 JumpIfNotEqual {162}
	161 Call 0x1B6F8F8
	162 Move X8, -19075072
	163 Move V1, [X8+2532]
	164 Multiply S0, S15, S14
	165 NotImplemented "Instruction FSQRT not yet implemented."
	166 Move S15, W31
	167 NotImplemented "Instruction FCMP not yet implemented."
	168 Move X0, [X20]
	169 Multiply S1, S8, S11
	170 Multiply S2, S9, S12
	171 Multiply S3, S10, S13
	172 Add S1, S1, S2
	173 Add S1, S3, S1
	174 Move W8, [X0+224]
	175 NotImplemented "Instruction FDIV not yet implemented."
	176 Move S1, 1
	177 Move S2, -1
	178 NotImplemented "Instruction FMIN not yet implemented."
	179 NotImplemented "Instruction FCMP not yet implemented."
	180 NotImplemented "Instruction FCSEL not yet implemented."
	181 Compare W8, 0
	182 JumpIfNotEqual {184}
	183 Call 0x1B6F8F8
	184 NotImplemented "Instruction FCVT not yet implemented."
	185 Call 0x3D1A890
	186 Move X8, -19075072
	187 Move V1, [X8+3612]
	188 NotImplemented "Instruction INVALID not yet implemented."
	189 Multiply S15, S0, S1
	190 Move X0, X19
	191 Move X1, X31
	192 Call Component.get_transform, X0
	193 Move X20, X0
	194 Move X0, X19
	195 Move X1, X31
	196 Call Component.get_transform, X0
	197 Compare X0, 0
	198 JumpIfEqual {287}
	199 Move V0, [X31+12]
	200 Move X1, X31
	201 NotImplemented "Instruction FDIV not yet implemented."
	202 Move [X31+12], S0
	203 Call Transform.get_rotation, X0
	204 Move V11, V0
	205 Move V12, V1
	206 Move V13, V2
	207 Move V0, V8
	208 Move V1, V9
	209 Move V2, V10
	210 Move X0, X31
	211 Move V14, V3
	212 Call Quaternion.LookRotation, X0
	213 Move X0, X19
	214 Move X1, X31
	215 Move V8, V0
	216 Move V9, V1
	217 Move V10, V2
	218 Move V15, V3
	219 Call MobController.get_deltaTime, X0
	220 Move V1, [X31+12]
	221 Move V2, V13
	222 Move V3, V14
	223 Move V4, V8
	224 Multiply S0, S1, S0
	225 Move [X31], S0
	226 Move V0, V11
	227 Move V1, V12
	228 Move V5, V9
	229 Move V6, V10
	230 Move V7, V15
	231 Move X0, X31
	232 Call Quaternion.Slerp, X0, X1, V0
	233 Compare X20, 0
	234 JumpIfEqual {287}
	235 Move X0, X20
	236 Move X1, X31
	237 Call Transform.set_rotation, X0, X1
	238 Move X0, X19
	239 Call AnglerController.get_timerAnticipation, X0
	240 Move X0, X19
	241 Move X1, X31
	242 Move V8, V0
	243 Call MobController.get_deltaTime, X0
	244 Add S0, S8, S0
	245 Move X0, X19
	246 Call AnglerController.set_timerAnticipation, X0, V0
	247 Move X0, X19
	248 Call AnglerController.get_timerAnticipation, X0
	249 Move X8, -19075072
	250 Move V1, [X8+2596]
	251 NotImplemented "Instruction FCMP not yet implemented."
	252 Move X20, [X31+112]
	253 Move X19, [X31+120]
	254 Move X22, [X31+96]
	255 Move X21, [X31+104]
	256 Move X30, [X31+80]
	257 Move X23, [X31+88]
	258 Move D9, [X31+64]
	259 Move D8, [X31+72]
	260 Move D11, [X31+48]
	261 Move D10, [X31+56]
	262 Move D13, [X31+32]
	263 Move D12, [X31+40]
	264 Move D15, [X31+16]
	265 Move D14, [X31+24]
	266 Add X31, X31, 128
	267 Return 
	268 Move X1, [X19+320]
	269 Move X0, X19
	270 Move X20, [X31+112]
	271 Move X19, [X31+120]
	272 Move X22, [X31+96]
	273 Move X21, [X31+104]
	274 Move X30, [X31+80]
	275 Move X23, [X31+88]
	276 Move D9, [X31+64]
	277 Move D8, [X31+72]
	278 Move D11, [X31+48]
	279 Move D10, [X31+56]
	280 Move D13, [X31+32]
	281 Move D12, [X31+40]
	282 Move D15, [X31+16]
	283 Move D14, [X31+24]
	284 Add X31, X31, 128
	285 Call AnglerController.SetChasing, X0, X1
	286 Return 
	287 Call 0x1B6FA1C

Method: System.Void SetChasing(AnimalCompany.NetPlayer player)

Disassembly:
	0x01CDBDD8 STUR X0, [X21 + 0x1C]
	0x01CDBDDC CBZ X21, 0x1CDBE08
	0x01CDBDE0 MOVZ W8, 0x40
	0x01CDBDE4 STR W8, [X21 + 0xC]
	0x01CDBDE8 LDR X0, [X19 + 0x38]
	0x01CDBDEC CBZ X0, 0x1CDBE08
	0x01CDBDF0 MOV X1, X21
	0x01CDBDF4 MOV X2, X31
	0x01CDBDF8 BL 0x1D8A710
	0x01CDBDFC ANDS W31, W20, 0x7
	0x01CDBE00 B.NE 0x1CDBCB4
	0x01CDBE04 B 0x1CDBD0C
	0x01CDBE08 BL 0x1B6EA1C
	0x01CDBE0C STP X30, X21, [X31 - 0x20]!
	0x01CDBE10 STP X20, X19, [X31 + 0x10]
	0x01CDBE14 ADRP X21, 0x2548000
	0x01CDBE18 ADRP X20, 0x2274000
	0x01CDBE1C LDRB W8, [X21 + 0x61B]
	0x01CDBE20 LDR X20, [X20 + 0xD48]
	0x01CDBE24 MOV X19, X0
	0x01CDBE28 TBNZ X8, 0x0, 0x1CDBE40
	0x01CDBE2C ADRP X0, 0x2274000
	0x01CDBE30 LDR X0, [X0 + 0xD48]
	0x01CDBE34 BL 0x1B6E7F0
	0x01CDBE38 MOVZ W8, 0x1
	0x01CDBE3C STRB W8, [X21 + 0x61B]
	0x01CDBE40 MOV X0, X19
	0x01CDBE44 MOV X1, X31
	0x01CDBE48 BL 0x1CE76C0
	0x01CDBE4C LDR X0, [X20]
	0x01CDBE50 LDR W8, [X0 + 0xE0]
	0x01CDBE54 CBNZ W8, 0x1CDBE60
	0x01CDBE58 BL 0x1B6E8F8
	0x01CDBE5C LDR X0, [X20]
	0x01CDBE60 LDR X8, [X0 + 0xB8]
	0x01CDBE64 MOV X0, X31
	0x01CDBE68 LDP S0, S1, [X8 + 0xB0]
	0x01CDBE6C LDP S2, S3, [X8 + 0xB8]
	0x01CDBE70 BL 0x3A75B14
	0x01CDBE74 LDR X0, [X19 + 0xD0]
	0x01CDBE78 CBZ X0, 0x1CDBEA0
	0x01CDBE7C MOV X1, X31
	0x01CDBE80 BL 0x3AA7658
	0x01CDBE84 LDR X8, [X19 + 0xB8]
	0x01CDBE88 CBZ X8, 0x1CDBEA0
	0x01CDBE8C LDR V3, [X8 + 0x4C]
	0x01CDBE90 LDP X20, X19, [X31 + 0x10]
	0x01CDBE94 MOV X0, X31
	0x01CDBE98 LDP X30, X21, [X31], #0x20
	0x01CDBE9C B 0x3A7567C
	0x01CDBEA0 BL 0x1B6EA1C
	0x01CDBEA4 STP X30, X21, [X31 - 0x20]!
	0x01CDBEA8 STP X20, X19, [X31 + 0x10]
	0x01CDBEAC ADRP X20, 0x2548000
	0x01CDBEB0 ADRP X21, 0x2273000
	0x01CDBEB4 LDRB W8, [X20 + 0x61C]
	0x01CDBEB8 LDR X21, [X21 + 0xD78]
	0x01CDBEBC MOV X19, X0
	0x01CDBEC0 TBNZ X8, 0x0, 0x1CDBED8
	0x01CDBEC4 ADRP X0, 0x2273000
	0x01CDBEC8 LDR X0, [X0 + 0xD78]
	0x01CDBECC BL 0x1B6E7F0
	0x01CDBED0 MOVZ W8, 0x1
	0x01CDBED4 STRB W8, [X20 + 0x61C]
	0x01CDBED8 LDR X0, [X21]
	0x01CDBEDC LDR W8, [X0 + 0xE0]
	0x01CDBEE0 CBNZ W8, 0x1CDBEE8
	0x01CDBEE4 BL 0x1B6E8F8
	0x01CDBEE8 MOV X0, X19
	0x01CDBEEC LDP X20, X19, [X31 + 0x10]
	0x01CDBEF0 MOV X1, X31
	0x01CDBEF4 LDP X30, X21, [X31], #0x20
	0x01CDBEF8 B 0x1CE8008
	0x01CDBEFC STP X30, X19, [X31 - 0x10]!
	0x01CDBF00 AND W1, W1, 0x1
	0x01CDBF04 MOV X2, X31
	0x01CDBF08 MOV X19, X0
	0x01CDBF0C BL 0x1CE8140
	0x01CDBF10 LDR W1, [X19 + 0x174]
	0x01CDBF14 MOV X0, X19
	0x01CDBF18 BL 0x1CD8DB4
	0x01CDBF1C LDR V0, [X19 + 0x180]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2549000
	007 Move X21, 0x2273000
	008 Move W8, [X22+1560]
	009 Move X21, [X21+1144]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2273000
	017 Move X0, [X0+1144]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X22+1560], W8
	021 Move W1, 5
	022 Move X0, X19
	023 Call AnglerController.set_phase, X0, X1
	024 Move X8, [X19]
	025 Move X0, X19
	026 Move X1, X20
	027 Move X9, [X8+824]
	028 Move X2, [X8+832]
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move X0, [X21]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1B6F8F8
	035 Move X0, X20
	036 Move X1, X31
	037 Move X2, X31
	038 Call Object.op_Inequality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {55}
	043 Compare X20, 0
	044 JumpIfEqual {103}
	045 Move X0, X20
	046 Move X1, X31
	047 Call Component.get_transform, X0
	048 Compare X0, 0
	049 JumpIfEqual {103}
	050 Move X1, X31
	051 Call Transform.get_position, X0
	052 Move X0, X19
	053 Move X1, X31
	054 Call MobController.set__positionThatPlayerStayed, X0, X1
	055 Move X9, [X19+184]
	056 Compare X9, 0
	057 JumpIfEqual {103}
	058 Move X8, [X9+56]
	059 Compare X8, 0
	060 JumpIfEqual {103}
	061 Move W10, [X8+24]
	062 Compare W10, 0
	063 JumpIfEqual {104}
	064 Move X10, [X9+88]
	065 Compare X10, 0
	066 JumpIfEqual {103}
	067 Move W11, [X10+24]
	068 Compare W11, 0
	069 JumpIfEqual {104}
	070 Move X9, [X9+96]
	071 Compare X9, 0
	072 JumpIfEqual {103}
	073 Move W11, [X9+24]
	074 Compare W11, 0
	075 JumpIfEqual {104}
	076 Move X11, [X19]
	077 Move V0, [X8+32]
	078 Move V1, [X10+32]
	079 Move V2, [X9+32]
	080 Move X8, [X11+680]
	081 Move X2, [X11+688]
	082 Move X0, X19
	083 Move W1, W31
	084 NotImplemented "Instruction BLR not yet implemented."
	085 Move W8, 1
	086 Move S0, W31
	087 Move X0, X19
	088 Move [X19+224], W8
	089 Call AnglerController.set_timerAroundLight, X0, V0
	090 Move X8, [X19+184]
	091 Compare X8, 0
	092 JumpIfEqual {103}
	093 Move V0, [X8+40]
	094 Move X0, X19
	095 Move X20, [X31+32]
	096 Move X19, [X31+40]
	097 Move X22, [X31+16]
	098 Move X21, [X31+24]
	099 Move X1, X31
	100 Move X30, [X31+48]
	101 Call MobController.set__timerAttackInterval, X0, V0
	102 Return 
	103 Call 0x1B6FA1C
	104 Call 0x1B6FA24

Method: System.Void UpdateChasing()

Disassembly:
	0x01CDBF20 MOV X0, X19
	0x01CDBF24 BL 0x1CD8E74
	0x01CDBF28 LDR V0, [X19 + 0x184]
	0x01CDBF2C MOV X0, X19
	0x01CDBF30 LDP X30, X19, [X31], #0x10
	0x01CDBF34 B 0x1CD8F34
	0x01CDBF38 STP X30, X19, [X31 - 0x10]!
	0x01CDBF3C MOV X1, X31
	0x01CDBF40 MOV X19, X0
	0x01CDBF44 BL 0x1CE81EC
	0x01CDBF48 MOV X0, X19
	0x01CDBF4C BL 0x1CD8D54
	0x01CDBF50 STR W0, [X19 + 0x174]
	0x01CDBF54 MOV X0, X19
	0x01CDBF58 BL 0x1CD8E14
	0x01CDBF5C MOV X0, X19
	0x01CDBF60 STR S0, [X19 + 0x180]
	0x01CDBF64 BL 0x1CD8ED4
	0x01CDBF68 STR S0, [X19 + 0x184]
	0x01CDBF6C LDP X30, X19, [X31], #0x10
	0x01CDBF70 RET
	0x01CDBF74 STR X30, [X31 - 0x20]!
	0x01CDBF78 STP X20, X19, [X31 + 0x10]
	0x01CDBF7C ADRP X20, 0x2548000
	0x01CDBF80 LDRB W8, [X20 + 0x61D]
	0x01CDBF84 MOV X19, X0
	0x01CDBF88 TBNZ X8, 0x0, 0x1CDBFA0
	0x01CDBF8C ADRP X0, 0x2273000
	0x01CDBF90 LDR X0, [X0 + 0xD90]
	0x01CDBF94 BL 0x1B6E7F0
	0x01CDBF98 MOVZ W8, 0x1
	0x01CDBF9C STRB W8, [X20 + 0x61D]
	0x01CDBFA0 MOVZ W0, 0x1
	0x01CDBFA4 MOV X1, X31
	0x01CDBFA8 MOVZ W20, 0x1
	0x01CDBFAC BL 0x1D29EBC
	0x01CDBFB0 CBZ X19, 0x1CDC004
	0x01CDBFB4 ADRP X9, 0x2273000
	0x01CDBFB8 LDR X9, [X9 + 0xD90]
	0x01CDBFBC STRB W20, [X19 + 0x58]
	0x01CDBFC0 LDR X8, [X19]
	0x01CDBFC4 LDR X1, [X9]
	0x01CDBFC8 LDRB W10, [X8 + 0x130]
	0x01CDBFCC LDRB W9, [X1 + 0x130]
	0x01CDBFD0 CMP W10, W9
	0x01CDBFD4 B.CC 0x1CDBFFC
	0x01CDBFD8 LDR X8, [X8 + 0xC8]
	0x01CDBFDC ADD X8, X8, X9, 0x3, LSL
	0x01CDBFE0 LDUR X8, [X8 - 0x8]
	0x01CDBFE4 CMP X8, X1
	0x01CDBFE8 B.NE 0x1CDBFFC
	0x01CDBFEC MOV X0, X19
	0x01CDBFF0 LDP X20, X19, [X31 + 0x10]
	0x01CDBFF4 LDR X30, [X31], #0x20
	0x01CDBFF8 B 0x1CDBC70
	0x01CDBFFC MOV X0, X19
	0x01CDC000 BL 0x1B6ECDC
	0x01CDC004 BL 0x1B6EA1C
	0x01CDC008 STP X30, X19, [X31 - 0x10]!
	0x01CDC00C MOV X1, X31
	0x01CDC010 MOV X19, X0
	0x01CDC014 BL 0x1CEA468
	0x01CDC018 LDR X0, [X19 + 0xC8]
	0x01CDC01C CBZ X0, 0x1CDC02C
	0x01CDC020 MOV X1, X31
	0x01CDC024 LDP X30, X19, [X31], #0x10
	0x01CDC028 B 0x3A65954
	0x01CDC02C BL 0x1B6EA1C
	0x01CDC030 STP X30, X19, [X31 - 0x10]!
	0x01CDC034 MOV X1, X31
	0x01CDC038 MOV X19, X0
	0x01CDC03C BL 0x1CE9BB0
	0x01CDC040 LDR X0, [X19 + 0xD8]
	0x01CDC044 CBZ X0, 0x1CDC0A0
	0x01CDC048 MOV X1, X31
	0x01CDC04C BL 0x3AA6C80
	0x01CDC050 LDR X0, [X19 + 0xD8]
	0x01CDC054 STP S0, S1, [X19 + 0xF0]
	0x01CDC058 STR S2, [X19 + 0xF8]
	0x01CDC05C CBZ X0, 0x1CDC0A0
	0x01CDC060 MOV X1, X31
	0x01CDC064 BL 0x3AA78FC
	0x01CDC068 MOV X0, X31
	0x01CDC06C BL 0x3A92974
	0x01CDC070 ADRP X8, 0xFFFFFFFFFEDCD000
	0x01CDC074 LDR V3, [X8 + 0xE1C]
	0x01CDC078 MOV X0, X31
	0x01CDC07C FMUL S0, S0, S3
	0x01CDC080 FMUL S1, S1, S3
	0x01CDC084 FMUL S2, S2, S3
	0x01CDC088 BL 0x3A92EFC
	0x01CDC08C STR S0, [X19 + 0x110]
	0x01CDC090 STR S1, [X19 + 0x114]
	0x01CDC094 STR S2, [X19 + 0x118]
	0x01CDC098 LDP X30, X19, [X31], #0x10
	0x01CDC09C RET
	0x01CDC0A0 BL 0x1B6EA1C
	0x01CDC0A4 STP X30, X19, [X31 - 0x10]!
	0x01CDC0A8 MOV X1, X31
	0x01CDC0AC MOV X19, X0
	0x01CDC0B0 BL 0x1CE9DB8
	0x01CDC0B4 LDR X0, [X19 + 0xB0]
	0x01CDC0B8 CBZ X0, 0x1CDC0DC
	0x01CDC0BC LDR X19, [X19 + 0xB8]
	0x01CDC0C0 MOV X1, X31
	0x01CDC0C4 BL 0x3A7B8A4
	0x01CDC0C8 CBZ X19, 0x1CDC0DC
	0x01CDC0CC AND W8, W0, 0x1
	0x01CDC0D0 STRB W8, [X19 + 0x20]
	0x01CDC0D4 LDP X30, X19, [X31], #0x10
	0x01CDC0D8 RET
	0x01CDC0DC BL 0x1B6EA1C
	0x01CDC0E0 STR D14, [X31 - 0x50]!
	0x01CDC0E4 STP D13, D12, [X31 + 0x8]
	0x01CDC0E8 STP D11, D10, [X31 + 0x18]
	0x01CDC0EC STP D9, D8, [X31 + 0x28]
	0x01CDC0F0 STR X30, [X31 + 0x38]
	0x01CDC0F4 STP X20, X19, [X31 + 0x40]
	0x01CDC0F8 MOV X19, X0
	0x01CDC0FC MOV X0, X31
	0x01CDC100 BL 0x3AA47CC
	0x01CDC104 LDR X20, [X19 + 0xD8]
	0x01CDC108 CBZ X20, 0x1CDC210
	0x01CDC10C LDR V1, [X19 + 0xE0]
	0x01CDC110 ADRP X8, 0xFFFFFFFFFEDCD000
	0x01CDC114 LDR V3, [X19 + 0xEC]
	0x01CDC118 LDR V13, [X8 + 0x95C]
	0x01CDC11C LDP S10, S2, [X19 + 0xF4]
	0x01CDC120 FMUL S8, S0, S1
	0x01CDC124 FADD S14, S8, S8
	0x01CDC128 FMUL S0, S3, S13
	0x01CDC12C FMOV S12, W31
	0x01CDC130 FADD S0, S14, S0
	0x01CDC134 FADD S9, S2, S12
	0x01CDC138 BL 0x3D19900
	0x01CDC13C LDR V1, [X19 + 0xE8]
	0x01CDC140 LDR V11, [X19 + 0xF0]
	0x01CDC144 FMUL S0, S1, S0
	0x01CDC148 FADD S10, S10, S0
	0x01CDC14C MOV V0.16B, V8.16B
	0x01CDC150 BL 0x3D19900
	0x01CDC154 LDR V1, [X19 + 0xE4]
	0x01CDC158 LDR V2, [X19 + 0x108]
	0x01CDC15C FMUL S0, S0, S1
	0x01CDC160 FMUL S1, S2, S13
	0x01CDC164 FADD S11, S11, S0
	0x01CDC168 FADD S0, S8, S1
	0x01CDC16C BL 0x3D19900
	0x01CDC170 LDR V1, [X19 + 0x100]
	0x01CDC174 LDR V2, [X19 + 0x104]
	0x01CDC178 FMUL S8, S1, S0
	0x01CDC17C FMUL S0, S2, S13
	0x01CDC180 FADD S0, S14, S0
	0x01CDC184 BL 0x3D19900
	0x01CDC188 LDR V1, [X19 + 0xFC]
	0x01CDC18C MOV X0, X20
	0x01CDC190 MOV V2.16B, V9.16B
	0x01CDC194 MOV X1, X31
	0x01CDC198 FMUL S13, S1, S0
	0x01CDC19C MOV V0.16B, V11.16B
	0x01CDC1A0 MOV V1.16B, V10.16B
	0x01CDC1A4 BL 0x3AA6D0C
	0x01CDC1A8 LDR V2, [X19 + 0x10C]
	0x01CDC1AC LDR V0, [X19 + 0x110]
	0x01CDC1B0 LDR V1, [X19 + 0x114]
	0x01CDC1B4 LDR V3, [X19 + 0x118]
	0x01CDC1B8 ADRP X8, 0xFFFFFFFFFEDCD000
	0x01CDC1BC LDR V4, [X8 + 0xAF4]
	0x01CDC1C0 LDR X20, [X19 + 0xD8]
	0x01CDC1C4 FADD S2, S13, S2
	0x01CDC1C8 FADD S1, S8, S1
	0x01CDC1CC FADD S3, S3, S12
	0x01CDC1D0 FADD S0, S0, S2
	0x01CDC1D4 FMUL S1, S1, S4
	0x01CDC1D8 FMUL S0, S0, S4
	0x01CDC1DC FMUL S2, S3, S4
	0x01CDC1E0 MOV X0, X31
	0x01CDC1E4 BL 0x3A928DC
	0x01CDC1E8 CBZ X20, 0x1CDC210
	0x01CDC1EC MOV X0, X20
	0x01CDC1F0 LDP X20, X19, [X31 + 0x40]
	0x01CDC1F4 LDR X30, [X31 + 0x38]
	0x01CDC1F8 LDP D9, D8, [X31 + 0x28]
	0x01CDC1FC LDP D11, D10, [X31 + 0x18]
	0x01CDC200 LDP D13, D12, [X31 + 0x8]
	0x01CDC204 MOV X1, X31
	0x01CDC208 LDR V14, [X31], #0x50
	0x01CDC20C B 0x3AA7984
	0x01CDC210 BL 0x1B6EA1C
	0x01CDC214 STP X30, X21, [X31 - 0x20]!
	0x01CDC218 STP X20, X19, [X31 + 0x10]
	0x01CDC21C ADRP X21, 0x2547000
	0x01CDC220 ADRP X20, 0x2273000
	0x01CDC224 LDRB W8, [X21 + 0x61F]
	0x01CDC228 LDR X20, [X20 + 0xE08]
	0x01CDC22C MOV X19, X0
	0x01CDC230 TBNZ X8, 0x0, 0x1CDC248
	0x01CDC234 ADRP X0, 0x2273000
	0x01CDC238 LDR X0, [X0 + 0xE08]
	0x01CDC23C BL 0x1B6E7F0
	0x01CDC240 MOVZ W8, 0x1
	0x01CDC244 STRB W8, [X21 + 0x61F]
	0x01CDC248 ADRP X8, 0xFFFFFFFFFEDCF000
	0x01CDC24C LDR V0, [X8 + 0x93]
	0x01CDC250 MOVZ W8, 0xCCCD
	0x01CDC254 MOVK W8, 0x3E4C0000
	0x01CDC258 UNIMPLEMENTED
	0x01CDC25C ADRP X8, 0xFFFFFFFFFEDCF000
	0x01CDC260 STUR V0, [X19 + 0x88]
	0x01CDC264 LDR V0, [X8 + 0xCD]
	0x01CDC268 MOVZ W8, 0x3FC00000
	0x01CDC26C STR W8, [X19 + 0xE0]
	0x01CDC270 ADRP X8, 0xFFFFFFFFFEDD0000
	0x01CDC274 STUR V0, [X19 + 0x98]
	0x01CDC278 LDR V0, [X8 + 0x4B]
	0x01CDC27C MOVZ W8, 0x3F400000
	0x01CDC280 STR W8, [X19 + 0xEC]
	0x01CDC284 MOVZ W8, 0x41400000
	0x01CDC288 STUR D1, [X19 + 0xE4]
	0x01CDC28C STUR V0, [X19 + 0xFC]
	0x01CDC290 STR W8, [X19 + 0x10C]
	0x01CDC294 LDR X0, [X20]
	0x01CDC298 LDR W8, [X0 + 0xE0]
	0x01CDC29C CBNZ W8, 0x1CDC2A4
	0x01CDC2A0 BL 0x1B6E8F8
	0x01CDC2A4 MOV X0, X19
	0x01CDC2A8 LDP X20, X19, [X31 + 0x10]
	0x01CDC2AC MOV X1, X31
	0x01CDC2B0 LDP X30, X21, [X31], #0x20
	0x01CDC2B4 B 0x1CEA7F8
	0x01CDC2B8 STP X30, X21, [X31 - 0x20]!
	0x01CDC2BC STP X20, X19, [X31 + 0x10]
	0x01CDC2C0 ADRP X20, 0x2547000
	0x01CDC2C4 ADRP X21, 0x2272000
	0x01CDC2C8 ADRP X19, 0x2273000
	0x01CDC2CC LDRB W8, [X20 + 0x620]
	0x01CDC2D0 LDR X21, [X21 + 0x340]
	0x01CDC2D4 LDR X19, [X19 + 0xD98]
	0x01CDC2D8 TBNZ X8, 0x0, 0x1CDC2FC
	0x01CDC2DC ADRP X0, 0x2273000
	0x01CDC2E0 LDR X0, [X0 + 0xD98]
	0x01CDC2E4 BL 0x1B6E7F0
	0x01CDC2E8 ADRP X0, 0x2272000
	0x01CDC2EC LDR X0, [X0 + 0x340]
	0x01CDC2F0 BL 0x1B6E7F0
	0x01CDC2F4 MOVZ W8, 0x1
	0x01CDC2F8 STRB W8, [X20 + 0x620]
	0x01CDC2FC LDR X0, [X21]
	0x01CDC300 MOV X1, X31
	0x01CDC304 BL 0x3A7AE20
	0x01CDC308 LDR X8, [X19]
	0x01CDC30C LDP X20, X19, [X31 + 0x10]
	0x01CDC310 LDR X8, [X8 + 0xB8]
	0x01CDC314 STR W0, [X8]
	0x01CDC318 LDP X30, X21, [X31], #0x20
	0x01CDC31C RET
	0x01CDC320 STP X30, X19, [X31 - 0x10]!
	0x01CDC324 LDR X8, [X0 + 0x50]
	0x01CDC328 CBZ X8, 0x1CDC338
	0x01CDC32C LDR W0, [X8 + 0x3C]
	0x01CDC330 LDP X30, X19, [X31], #0x10
	0x01CDC334 RET
	0x01CDC338 ADRP X0, 0x2271000
	0x01CDC33C LDR X0, [X0 + 0x490]
	0x01CDC340 BL 0x1B6E804
	0x01CDC344 BL 0x1B6EA0C
	0x01CDC348 MOV X19, X0
	0x01CDC34C ADRP X0, 0x2273000
	0x01CDC350 LDR X0, [X0 + 0xE10]
	0x01CDC354 BL 0x1B6E804
	0x01CDC358 MOV X1, X0
	0x01CDC35C MOV X0, X19
	0x01CDC360 MOV X2, X31
	0x01CDC364 BL 0x31E7550
	0x01CDC368 ADRP X0, 0x2273000
	0x01CDC36C LDR X0, [X0 + 0xE18]
	0x01CDC370 BL 0x1B6E804
	0x01CDC374 MOV X1, X0
	0x01CDC378 MOV X0, X19
	0x01CDC37C BL 0x1B6E8E8
	0x01CDC380 STP X30, X19, [X31 - 0x10]!
	0x01CDC384 LDR X8, [X0 + 0x50]
	0x01CDC388 CBZ X8, 0x1CDC398
	0x01CDC38C STR W1, [X8 + 0x3C]
	0x01CDC390 LDP X30, X19, [X31], #0x10
	0x01CDC394 RET
	0x01CDC398 ADRP X0, 0x2271000
	0x01CDC39C LDR X0, [X0 + 0x490]
	0x01CDC3A0 BL 0x1B6E804
	0x01CDC3A4 BL 0x1B6EA0C
	0x01CDC3A8 MOV X19, X0
	0x01CDC3AC ADRP X0, 0x2273000
	0x01CDC3B0 LDR X0, [X0 + 0xE10]
	0x01CDC3B4 BL 0x1B6E804
	0x01CDC3B8 MOV X1, X0
	0x01CDC3BC MOV X0, X19
	0x01CDC3C0 MOV X2, X31
	0x01CDC3C4 BL 0x31E7550
	0x01CDC3C8 ADRP X0, 0x2273000
	0x01CDC3CC LDR X0, [X0 + 0xE20]
	0x01CDC3D0 BL 0x1B6E804
	0x01CDC3D4 MOV X1, X0
	0x01CDC3D8 MOV X0, X19
	0x01CDC3DC BL 0x1B6E8E8
	0x01CDC3E0 STR X30, [X31 - 0x10]!
	0x01CDC3E4 LDR X8, [X0 + 0xB8]
	0x01CDC3E8 CBZ X8, 0x1CDC3F8
	0x01CDC3EC LDR V0, [X8 + 0x28]
	0x01CDC3F0 LDR X30, [X31], #0x10
	0x01CDC3F4 RET
	0x01CDC3F8 BL 0x1B6EA1C
	0x01CDC3FC SUB X31, X31, 0x70
	0x01CDC400 STP D9, D8, [X31 + 0x50]
	0x01CDC404 STP X30, X19, [X31 + 0x60]
	0x01CDC408 MOV X19, X0
	0x01CDC40C LDR X0, [X0 + 0xD0]
	0x01CDC410 CBZ X0, 0x1CDC4F4
	0x01CDC414 MOV X1, X31
	0x01CDC418 BL 0x3AA7658
	0x01CDC41C LDR X0, [X19 + 0xD0]
	0x01CDC420 STR D0, [X31 + 0x40]
	0x01CDC424 STR D1, [X31 + 0x30]
	0x01CDC428 CBZ X0, 0x1CDC4F4
	0x01CDC42C MOV X1, X31
	0x01CDC430 MOV V8.16B, V2.16B
	0x01CDC434 BL 0x3AA7AD0
	0x01CDC438 LDR X8, [X19 + 0xB8]
	0x01CDC43C CBZ X8, 0x1CDC4F4
	0x01CDC440 ADRP X19, 0x2547000
	0x01CDC444 LDRB W9, [X19 + 0x442]
	0x01CDC448 LDR V6, [X8 + 0x4C]
	0x01CDC44C MOV V9.16B, V2.16B
	0x01CDC450 CBNZ W9, 0x1CDC478
	0x01CDC454 ADRP X0, 0x2271000
	0x01CDC458 LDR X0, [X0 + 0x480]
	0x01CDC45C STP V6, V0, [X31 + 0x10]
	0x01CDC460 STR V1, [X31]
	0x01CDC464 BL 0x1B6E7F0
	0x01CDC468 LDP V1, V6, [X31]
	0x01CDC46C LDR V0, [X31 + 0x2]
	0x01CDC470 MOVZ W8, 0x1
	0x01CDC474 STRB W8, [X19 + 0x442]
	0x01CDC478 MOVZ W8, 0x999A
	0x01CDC47C MOVK W8, 0xBE990000
	0x01CDC480 MOV V0.S[1], V1.S[0]
	0x01CDC484 UNIMPLEMENTED
	0x01CDC488 ADRP X8, 0xFFFFFFFFFEDCD000
	0x01CDC48C LDR V2, [X8 + 0xE20]
	0x01CDC490 ADRP X8, 0x2271000
	0x01CDC494 LDR X8, [X8 + 0x480]
	0x01CDC498 LDP V3, V7, [X31 + 0x30]
	0x01CDC49C FMUL S4, S9, S6
	0x01CDC4A0 LDP X30, X19, [X31 + 0x60]
	0x01CDC4A4 LDR X8, [X8]
	0x01CDC4A8 MOV V7.S[1], V3.S[0]
	0x01CDC4AC FMOV S3, 0.5
	0x01CDC4B0 FMUL S5, S4, S3
	0x01CDC4B4 LDR X8, [X8 + 0xB8]
	0x00000000 INVALID
	0x01CDC4BC MOVI V3.2S, 0x3F, 0x18
	0x01CDC4C0 FADD S5, S8, S5
	0x01CDC4C4 LDR V0, [X8 + 0x18]
	0x01CDC4C8 LDR V6, [X8 + 0x20]
	0x00000000 INVALID
	0x01CDC4D0 LDP D9, D8, [X31 + 0x50]
	0x01CDC4D4 FADD V3.2S, V7.2S, V3.2S
	0x00000000 INVALID
	0x01CDC4DC FMUL S1, S6, S2
	0x01CDC4E0 FADD V0.2S, V3.2S, V0.2S
	0x01CDC4E4 FSUB S2, S5, S1
	0x01CDC4E8 MOV S1, V0.S[1]
	0x01CDC4EC ADD X31, X31, 0x70
	0x01CDC4F0 RET
	0x01CDC4F4 BL 0x1B6EA1C
	0x01CDC4F8 STR X30, [X31 - 0x10]!
	0x01CDC4FC LDR X8, [X0 + 0xB8]
	0x01CDC500 CBZ X8, 0x1CDC518
	0x01CDC504 LDR V0, [X8 + 0x4C]
	0x01CDC508 FMOV S1, 0.5
	0x01CDC50C FMUL S0, S0, S1
	0x01CDC510 LDR X30, [X31], #0x10
	0x01CDC514 RET
	0x01CDC518 BL 0x1B6EA1C
	0x01CDC51C STP X30, X19, [X31 - 0x10]!
	0x01CDC520 MOV X19, X0
	0x01CDC524 BL 0x1CDC320
	0x01CDC528 SUB W8, W0, 0x1
	0x01CDC52C CMP W8, 0x4
	0x01CDC530 B.HI 0x1CDC704
	0x01CDC534 ADRP X9, 0xFFFFFFFFFEE10000
	0x01CDC538 ADD X9, X9, 0x936
	0x01CDC53C ADR X10, 0x10
	0x01CDC540 LDRB W11, [X9, X8, LSL]
	0x01CDC544 ADD X10, X10, X11, 0x2, LSL
	0x01CDC548 BR X10
	0x01CDC54C LDR X8, [X19 + 0xB8]
	0x01CDC550 CBZ X8, 0x1CDC70C
	0x01CDC554 LDR X8, [X8 + 0x30]
	0x01CDC558 CBZ X8, 0x1CDC70C
	0x01CDC55C LDR W9, [X8 + 0x18]
	0x01CDC560 CBZ W9, 0x1CDC710
	0x01CDC564 LDR X0, [X19 + 0xC0]
	0x01CDC568 CBZ X0, 0x1CDC70C
	0x01CDC56C LDR X9, [X0]
	0x01CDC570 LDR V0, [X8 + 0x20]
	0x01CDC574 ADRP X8, 0xFFFFFFFFFEDCD000
	0x01CDC578 LDR V1, [X8 + 0xAB4]
	0x01CDC57C LDP X8, X1, [X9 + 0x1C8]
	0x01CDC580 FDIV S0, S0, S1
	0x01CDC584 BLR X8
	0x01CDC588 LDR X8, [X19 + 0x180]
	0x01CDC58C CBZ X8, 0x1CDC70C
	0x01CDC590 MOVZ W10, 0xCCCD
	0x01CDC594 MOVZ W9, 0x1
	0x01CDC598 MOVK W10, 0x3ECC0000
	0x01CDC59C STRB W9, [X8 + 0x85]
	0x01CDC5A0 STR W10, [X8 + 0x88]
	0x01CDC5A4 B 0x1CDC698
	0x01CDC5A8 LDR X8, [X19 + 0xB8]
	0x01CDC5AC CBZ X8, 0x1CDC70C
	0x01CDC5B0 LDR X8, [X8 + 0x38]
	0x01CDC5B4 CBZ X8, 0x1CDC70C
	0x01CDC5B8 LDR W9, [X8 + 0x18]
	0x01CDC5BC CBZ W9, 0x1CDC710
	0x01CDC5C0 LDR X0, [X19 + 0xC0]
	0x01CDC5C4 CBZ X0, 0x1CDC70C
	0x01CDC5C8 LDR X9, [X0]
	0x01CDC5CC LDR V0, [X8 + 0x20]
	0x01CDC5D0 ADRP X8, 0xFFFFFFFFFEDCD000
	0x01CDC5D4 LDR V1, [X8 + 0xAB4]
	0x01CDC5D8 LDP X8, X1, [X9 + 0x1D8]
	0x01CDC5DC FDIV S0, S0, S1
	0x01CDC5E0 BLR X8
	0x01CDC5E4 LDR X0, [X19 + 0x180]
	0x01CDC5E8 CBZ X0, 0x1CDC70C
	0x01CDC5EC ADRP X8, 0xFFFFFFFFFEDCD000
	0x01CDC5F0 LDR V0, [X8 + 0xD30]
	0x01CDC5F4 MOV W1, W31
	0x01CDC5F8 BL 0x1CDC714
	0x01CDC5FC LDR X8, [X19 + 0x180]
	0x01CDC600 CBNZ X8, 0x1CDC65C
	0x01CDC604 B 0x1CDC70C
	0x01CDC608 LDR X8, [X19 + 0xB8]
	0x01CDC60C CBZ X8, 0x1CDC70C
	0x01CDC610 LDR X8, [X8 + 0x38]
	0x01CDC614 CBZ X8, 0x1CDC70C
	0x01CDC618 LDR W9, [X8 + 0x18]
	0x01CDC61C CBZ W9, 0x1CDC710
	0x01CDC620 LDR X0, [X19 + 0xC0]
	0x01CDC624 CBZ X0, 0x1CDC70C
	0x01CDC628 LDR X9, [X0]
	0x01CDC62C LDR V0, [X8 + 0x20]
	0x01CDC630 ADRP X8, 0xFFFFFFFFFEDCD000
	0x01CDC634 LDR V1, [X8 + 0xAB4]
	0x01CDC638 LDP X8, X1, [X9 + 0x1D8]
	0x01CDC63C FDIV S0, S0, S1
	0x01CDC640 BLR X8
	0x01CDC644 LDR X8, [X19 + 0x180]
	0x01CDC648 CBZ X8, 0x1CDC70C
	0x01CDC64C MOVZ W9, 0x1
	0x01CDC650 MOVZ W10, 0x3FC00000
	0x01CDC654 STRB W9, [X8 + 0x85]
	0x01CDC658 STR W10, [X8 + 0x88]
	0x01CDC65C FMOV S0, 1
	0x01CDC660 B 0x1CDC700
	0x01CDC664 LDR X0, [X19 + 0xC0]
	0x01CDC668 CBZ X0, 0x1CDC70C
	0x01CDC66C LDR X8, [X0]
	0x01CDC670 LDP X9, X1, [X8 + 0x1F8]
	0x01CDC674 BLR X9
	0x01CDC678 LDR X0, [X19 + 0x180]
	0x01CDC67C CBZ X0, 0x1CDC70C
	0x01CDC680 ADRP X8, 0xFFFFFFFFFEDCD000
	0x01CDC684 LDR V0, [X8 + 0xD30]
	0x01CDC688 MOV W1, W31
	0x01CDC68C BL 0x1CDC714
	0x01CDC690 LDR X8, [X19 + 0x180]
	0x01CDC694 CBZ X8, 0x1CDC70C
	0x01CDC698 FMOV S0, 0.5
	0x01CDC69C B 0x1CDC700
	0x01CDC6A0 LDR X8, [X19 + 0xB8]
	0x01CDC6A4 CBZ X8, 0x1CDC70C
	0x01CDC6A8 LDR X8, [X8 + 0x30]
	0x01CDC6AC CBZ X8, 0x1CDC70C
	0x01CDC6B0 LDR W9, [X8 + 0x18]
	0x01CDC6B4 CMP W9, 0x1
	0x01CDC6B8 B.LS 0x1CDC710
	0x01CDC6BC LDR X0, [X19 + 0xC0]
	0x01CDC6C0 CBZ X0, 0x1CDC70C
	0x01CDC6C4 LDR X9, [X0]
	0x01CDC6C8 LDR V0, [X8 + 0x24]
	0x01CDC6CC ADRP X8, 0xFFFFFFFFFEDCD000
	0x01CDC6D0 LDR V1, [X8 + 0xAB4]
	0x01CDC6D4 LDP X8, X1, [X9 + 0x1C8]
	0x01CDC6D8 FDIV S0, S0, S1
	0x01CDC6DC BLR X8
	0x01CDC6E0 LDR X8, [X19 + 0x180]
	0x01CDC6E4 CBZ X8, 0x1CDC70C
	0x01CDC6E8 ADRP X10, 0xFFFFFFFFFEDCD000
	0x01CDC6EC LDR V0, [X10 + 0xA80]
	0x01CDC6F0 MOVZ W9, 0x1
	0x01CDC6F4 STRB W9, [X8 + 0x85]
	0x01CDC6F8 MOVZ W9, 0x3FC00000
	0x01CDC6FC STR W9, [X8 + 0x88]
	0x01CDC700 STR S0, [X8 + 0x80]
	0x01CDC704 LDP X30, X19, [X31], #0x10
	0x01CDC708 RET
	0x01CDC70C BL 0x1B6EA1C
	0x01CDC710 BL 0x1B6EA24
	0x01CDC714 STR X30, [X31 - 0x10]!
	0x01CDC718 AND W8, W1, 0x1
	0x01CDC71C STRB W8, [X0 + 0x85]
	0x01CDC720 STR S0, [X0 + 0x88]
	0x01CDC724 TBZ X1, 0x0, 0x1CDC730
	0x01CDC728 LDR X30, [X31], #0x10
	0x01CDC72C RET
	0x01CDC730 LDR X8, [X0 + 0x38]
	0x01CDC734 CBZ X8, 0x1CDC750
	0x01CDC738 LDP S1, S2, [X0 + 0x90]
	0x01CDC73C LDR V0, [X0 + 0x8C]
	0x01CDC740 MOV X0, X8
	0x01CDC744 MOV X1, X31
	0x01CDC748 LDR X30, [X31], #0x10
	0x01CDC74C B 0x3AA6D0C
	0x01CDC750 BL 0x1B6EA1C
	0x01CDC754 STP X30, X19, [X31 - 0x10]!
	0x01CDC758 MOV X1, X31
	0x01CDC75C MOV X19, X0
	0x01CDC760 BL 0x1CE54EC
	0x01CDC764 LDR X0, [X19 + 0xC8]
	0x01CDC768 CBZ X0, 0x1CDC7B4
	0x01CDC76C MOVZ W1, 0x1
	0x01CDC770 MOV X2, X31
	0x01CDC774 BL 0x3A4ACE4
	0x01CDC778 LDR X0, [X19 + 0xC8]
	0x01CDC77C CBZ X0, 0x1CDC7B4
	0x01CDC780 MOVZ W1, 0x1
	0x01CDC784 MOV X2, X31
	0x01CDC788 BL 0x3A4AD28
	0x01CDC78C LDR X0, [X19 + 0x40]
	0x01CDC790 CBZ X0, 0x1CDC7B4
	0x01CDC794 MOV X1, X31
	0x01CDC798 BL 0x1D9E780
	0x01CDC79C TBZ X0, 0x0, 0x1CDC7A8
	0x01CDC7A0 MOV X0, X19
	0x01CDC7A4 BL 0x1CDC7B8
	0x01CDC7A8 MOV X0, X19
	0x01CDC7AC LDP X30, X19, [X31], #0x10
	0x01CDC7B0 B 0x1CDC51C
	0x01CDC7B4 BL 0x1B6EA1C
	0x01CDC7B8 STP X30, X19, [X31 - 0x10]!
	0x01CDC7BC MOVZ W1, 0x1
	0x01CDC7C0 MOV X19, X0
	0x01CDC7C4 BL 0x1CDC380
	0x01CDC7C8 LDR X9, [X19 + 0xB8]
	0x01CDC7CC CBZ X9, 0x1CDC840
	0x01CDC7D0 LDR X8, [X9 + 0x30]
	0x01CDC7D4 CBZ X8, 0x1CDC840
	0x01CDC7D8 LDR W10, [X8 + 0x18]
	0x01CDC7DC CBZ W10, 0x1CDC844
	0x01CDC7E0 LDR X10, [X9 + 0x58]
	0x01CDC7E4 CBZ X10, 0x1CDC840
	0x01CDC7E8 LDR W11, [X10 + 0x18]
	0x01CDC7EC CBZ W11, 0x1CDC844
	0x01CDC7F0 LDR X9, [X9 + 0x60]
	0x01CDC7F4 CBZ X9, 0x1CDC840
	0x01CDC7F8 LDR W11, [X9 + 0x18]
	0x01CDC7FC CBZ W11, 0x1CDC844
	0x01CDC800 LDR X11, [X19]
	0x01CDC804 LDR V0, [X8 + 0x20]
	0x01CDC808 LDR V1, [X10 + 0x20]
	0x01CDC80C LDR V2, [X9 + 0x20]
	0x01CDC810 LDR X8, [X11 + 0x2A8]
	0x01CDC814 LDR X2, [X11 + 0x2B0]
	0x01CDC818 MOV X0, X19
	0x01CDC81C MOV W1, W31
	0x01CDC820 BLR X8
	0x01CDC824 LDR X8, [X19]
	0x01CDC828 MOVZ W1, 0x1
	0x01CDC82C MOV X0, X19
	0x01CDC830 LDR X3, [X8 + 0x308]
	0x01CDC834 LDR X2, [X8 + 0x310]
	0x01CDC838 LDP X30, X19, [X31], #0x10
	0x01CDC83C BR X3
	0x01CDC840 BL 0x1B6EA1C
	0x01CDC844 BL 0x1B6EA24
	0x01CDC848 STP X30, X19, [X31 - 0x10]!
	0x01CDC84C MOV X1, X31
	0x01CDC850 MOV X19, X0
	0x01CDC854 BL 0x1CE5C84
	0x01CDC858 LDR X0, [X19 + 0x40]
	0x01CDC85C CBZ X0, 0x1CDC888
	0x01CDC860 MOV X1, X31
	0x01CDC864 BL 0x1D9E780
	0x01CDC868 TBZ X0, 0x0, 0x1CDC880
	0x01CDC86C MOV X0, X19
	0x01CDC870 BL 0x1CDC88C
	0x01CDC874 MOV X0, X19
	0x01CDC878 LDP X30, X19, [X31], #0x10
	0x01CDC87C B 0x1CDC7B8
	0x01CDC880 LDP X30, X19, [X31], #0x10
	0x01CDC884 RET
	0x01CDC888 BL 0x1B6EA1C
	0x01CDC88C STP X30, X19, [X31 - 0x10]!
	0x01CDC890 LDR X8, [X0]
	0x01CDC894 MOV X1, X31
	0x01CDC898 MOV X19, X0
	0x01CDC89C LDR X9, [X8 + 0x338]
	0x01CDC8A0 LDR X2, [X8 + 0x340]
	0x01CDC8A4 BLR X9
	0x01CDC8A8 FMOV S0, W31
	0x01CDC8AC MOV X0, X19
	0x01CDC8B0 MOV X1, X31
	0x01CDC8B4 STR W31, [X19 + 0x178]
	0x01CDC8B8 BL 0x1CE472C
	0x01CDC8BC FMOV S0, W31
	0x01CDC8C0 MOV X0, X19
	0x01CDC8C4 MOV X1, X31
	0x01CDC8C8 BL 0x1CE47EC
	0x01CDC8CC STR W31, [X19 + 0x17C]
	0x01CDC8D0 LDP X30, X19, [X31], #0x10
	0x01CDC8D4 RET
	0x01CDC8D8 STP X30, X19, [X31 - 0x10]!
	0x01CDC8DC MOV X1, X31
	0x01CDC8E0 MOV X19, X0
	0x01CDC8E4 BL 0x1CE5B40
	0x01CDC8E8 LDR X0, [X19 + 0x40]
	0x01CDC8EC CBZ X0, 0x1CDC914
	0x01CDC8F0 MOV X1, X31
	0x01CDC8F4 BL 0x1D9E780
	0x01CDC8F8 TBZ X0, 0x0, 0x1CDC90C
	0x01CDC8FC MOVZ W1, 0x6
	0x01CDC900 MOV X0, X19
	0x01CDC904 LDP X30, X19, [X31], #0x10
	0x01CDC908 B 0x1CDC380
	0x01CDC90C LDP X30, X19, [X31], #0x10
	0x01CDC910 RET
	0x01CDC914 BL 0x1B6EA1C
	0x01CDC918 SUB X31, X31, 0x40
	0x01CDC91C STR X30, [X31 + 0x20]
	0x01CDC920 STP X20, X19, [X31 + 0x30]
	0x01CDC924 ADRP X20, 0x2547000
	0x01CDC928 LDRB W8, [X20 + 0x621]
	0x01CDC92C MOV X19, X0
	0x01CDC930 TBNZ X8, 0x0, 0x1CDC948
	0x01CDC934 ADRP X0, 0x2273000
	0x01CDC938 LDR X0, [X0 + 0xE28]
	0x01CDC93C BL 0x1B6E7F0
	0x01CDC940 MOVZ W8, 0x1
	0x01CDC944 STRB W8, [X20 + 0x621]
	0x01CDC948 MOV X0, X19
	0x01CDC94C MOV X1, X31
	0x01CDC950 BL 0x1CE58BC
	0x01CDC954 MOV X0, X19
	0x01CDC958 MOV X1, X31
	0x01CDC95C BL 0x1CE4CE0
	0x01CDC960 TBZ X0, 0x0, 0x1CDCA2C
	0x01CDC964 MOV X0, X19
	0x01CDC968 BL 0x1CDC320
	0x01CDC96C SUB W8, W0, 0x1
	0x01CDC970 CMP W8, 0x4
	0x01CDC974 B.HI 0x1CDC9D8
	0x01CDC978 ADRP X9, 0xFFFFFFFFFEE10000
	0x01CDC97C ADD X9, X9, 0x93B
	0x01CDC980 ADR X10, 0x10
	0x01CDC984 LDRB W11, [X9, X8, LSL]
	0x01CDC988 ADD X10, X10, X11, 0x2, LSL
	0x01CDC98C BR X10
	0x01CDC990 LDR X8, [X19]
	0x01CDC994 LDR X9, [X8 + 0x328]
	0x01CDC998 LDR X1, [X8 + 0x330]
	0x01CDC99C B 0x1CDC9B8
	0x01CDC9A0 MOV X0, X19
	0x01CDC9A4 BL 0x1CDCA3C
	0x01CDC9A8 B 0x1CDC9D8
	0x01CDC9AC LDR X8, [X19]
	0x01CDC9B0 LDR X9, [X8 + 0x348]
	0x01CDC9B4 LDR X1, [X8 + 0x350]
	0x01CDC9B8 MOV X0, X19
	0x01CDC9BC BLR X9
	0x01CDC9C0 B 0x1CDC9D8
	0x01CDC9C4 MOV X0, X19
	0x01CDC9C8 BL 0x1CDCB10
	0x01CDC9CC B 0x1CDC9D8
	0x01CDC9D0 MOV X0, X19
	0x01CDC9D4 BL 0x1CDCC74
	0x01CDC9D8 BL 0x1CD2434
	0x01CDC9DC TBZ X0, 0x0, 0x1CDCA2C
	0x01CDC9E0 LDR X20, [X19 + 0x168]
	0x01CDC9E4 CBZ X20, 0x1CDCA2C
	0x01CDC9E8 MOV X0, X19
	0x01CDC9EC BL 0x1CDC320
	0x01CDC9F0 ADRP X8, 0x2273000
	0x01CDC9F4 LDR X8, [X8 + 0xE28]
	0x01CDC9F8 MOVN X9, 0x0
	0x01CDC9FC STR W0, [X31 + 0x18]
	0x01CDCA00 ADD X0, X31, 0x8
	0x01CDCA04 LDR X8, [X8]
	0x01CDCA08 MOV X1, X31
	0x01CDCA0C STP X8, X9, [X31 + 0x8]
	0x01CDCA10 BL 0x321AF98
	0x01CDCA14 LDR X8, [X20 + 0x40]
	0x01CDCA18 LDR X9, [X20 + 0x18]
	0x01CDCA1C LDR X2, [X20 + 0x28]
	0x01CDCA20 MOV X1, X0
	0x01CDCA24 MOV X0, X8
	0x01CDCA28 BLR X9
	0x01CDCA2C LDP X20, X19, [X31 + 0x30]
	0x01CDCA30 LDR X30, [X31 + 0x20]
	0x01CDCA34 ADD X31, X31, 0x40
	0x01CDCA38 RET
	0x01CDCA3C STR D8, [X31 - 0x20]!
	0x01CDCA40 STP X30, X19, [X31 + 0x10]
	0x01CDCA44 LDR V8, [X0 + 0x178]
	0x01CDCA48 MOV X1, X31
	0x01CDCA4C MOV X19, X0
	0x01CDCA50 BL 0x1CE4CC4
	0x01CDCA54 FADD S0, S8, S0
	0x01CDCA58 FMOV S1, 10
	0x01CDCA5C FCMP S0, S1
	0x01CDCA60 STR S0, [X19 + 0x178]
	0x01CDCA64 B.GE 0x1CDCA80
	0x01CDCA68 LDR X8, [X19]
	0x01CDCA6C MOV X0, X19
	0x01CDCA70 LDR X9, [X8 + 0x328]
	0x01CDCA74 LDR X1, [X8 + 0x330]
	0x01CDCA78 BLR X9
	0x01CDCA7C B 0x1CDCA88
	0x01CDCA80 MOV X0, X19
	0x01CDCA84 BL 0x1CDC7B8
	0x01CDCA88 LDRB W8, [X19 + 0xB5]
	0x01CDCA8C CBZ W8, 0x1CDCAB4
	0x01CDCA90 LDRB W8, [X19 + 0xB4]
	0x01CDCA94 CBZ W8, 0x1CDCAC0
	0x01CDCA98 LDR X8, [X19]
	0x01CDCA9C MOV X0, X19
	0x01CDCAA0 LDP X30, X19, [X31 + 0x10]
	0x01CDCAA4 LDR X2, [X8 + 0x358]
	0x01CDCAA8 LDR X1, [X8 + 0x360]
	0x01CDCAAC LDR V8, [X31], #0x20
	0x01CDCAB0 BR X2
	0x01CDCAB4 LDP X30, X19, [X31 + 0x10]
	0x01CDCAB8 LDR V8, [X31], #0x20
	0x01CDCABC RET
	0x01CDCAC0 LDR X8, [X19 + 0xB8]
	0x01CDCAC4 CBZ X8, 0x1CDCB08
	0x01CDCAC8 LDR X8, [X8 + 0x30]
	0x01CDCACC CBZ X8, 0x1CDCB08
	0x01CDCAD0 LDR W9, [X8 + 0x18]
	0x01CDCAD4 CMP W9, 0x1
	0x01CDCAD8 B.LS 0x1CDCB0C
	0x01CDCADC LDR X9, [X19]
	0x01CDCAE0 LDR V0, [X8 + 0x24]
	0x01CDCAE4 ADRP X8, 0xFFFFFFFFFEDCD000
	0x01CDCAE8 LDR V1, [X8 + 0xAB4]
	0x01CDCAEC LDR X2, [X9 + 0x368]
	0x01CDCAF0 LDR X1, [X9 + 0x370]
	0x01CDCAF4 MOV X0, X19
	0x01CDCAF8 LDP X30, X19, [X31 + 0x10]
	0x01CDCAFC FDIV S0, S0, S1
	0x01CDCB00 LDR V8, [X31], #0x20
	0x01CDCB04 BR X2
	0x01CDCB08 BL 0x1B6EA1C
	0x01CDCB0C BL 0x1B6EA24
	0x01CDCB10 SUB X31, X31, 0x30
	0x01CDCB14 STR D8, [X31 + 0x10]
	0x01CDCB18 STR X30, [X31 + 0x18]
	0x01CDCB1C STP X20, X19, [X31 + 0x20]
	0x01CDCB20 ADRP X20, 0x2547000
	0x01CDCB24 LDRB W8, [X20 + 0x624]
	0x01CDCB28 MOV X19, X0
	0x01CDCB2C TBNZ X8, 0x0, 0x1CDCB50
	0x01CDCB30 ADRP X0, 0x2273000
	0x01CDCB34 LDR X0, [X0 + 0xE30]
	0x01CDCB38 BL 0x1B6E7F0
	0x01CDCB3C ADRP X0, 0x2273000
	0x01CDCB40 LDR X0, [X0 + 0xDF0]
	0x01CDCB44 BL 0x1B6E7F0
	0x01CDCB48 MOVZ W8, 0x1
	0x01CDCB4C STRB W8, [X20 + 0x624]
	0x01CDCB50 MOV X0, X19
	0x01CDCB54 MOV X1, X31
	0x01CDCB58 STR X31, [X31 + 0x8]
	0x01CDCB5C BL 0x1CE478C
	0x01CDCB60 MOV X0, X19
	0x01CDCB64 MOV X1, X31
	0x01CDCB68 MOV V8.16B, V0.16B
	0x01CDCB6C BL 0x1CE4CC4
	0x01CDCB70 FADD S0, S8, S0
	0x01CDCB74 MOV X0, X19
	0x01CDCB78 MOV X1, X31
	0x01CDCB7C BL 0x1CE47EC
	0x01CDCB80 MOV X0, X19
	0x01CDCB84 MOV X1, X31
	0x01CDCB88 BL 0x1CE478C
	0x01CDCB8C LDR X8, [X19 + 0xB8]
	0x01CDCB90 CBZ X8, 0x1CDCC70
	0x01CDCB94 LDR V1, [X8 + 0x6C]
	0x01CDCB98 FCMP S0, S1
	0x01CDCB9C B.GE 0x1CDCC3C
	0x01CDCBA0 ADD X1, X31, 0x8
	0x01CDCBA4 MOV X0, X19
	0x01CDCBA8 MOV X2, X31
	0x01CDCBAC BL 0x1CE85FC
	0x01CDCBB0 TBZ X0, 0x0, 0x1CDCC48
	0x01CDCBB4 LDR X20, [X31 + 0x8]
	0x01CDCBB8 CBZ X20, 0x1CDCC70
	0x01CDCBBC LDR W1, [X20 + 0x18]
	0x01CDCBC0 MOV W0, W31
	0x01CDCBC4 MOV X2, X31
	0x01CDCBC8 BL 0x3A98D10
	0x01CDCBCC ADRP X8, 0x2273000
	0x01CDCBD0 LDR X8, [X8 + 0xDF0]
	0x01CDCBD4 MOV W1, W0
	0x01CDCBD8 MOV X0, X20
	0x01CDCBDC LDR X2, [X8]
	0x01CDCBE0 BL 0x2E46254
	0x01CDCBE4 LDR X8, [X19]
	0x01CDCBE8 MOV X1, X0
	0x01CDCBEC MOV X0, X19
	0x01CDCBF0 LDR X9, [X8 + 0x338]
	0x01CDCBF4 LDR X2, [X8 + 0x340]
	0x01CDCBF8 BLR X9
	0x01CDCBFC LDR X0, [X19 + 0x140]
	0x01CDCC00 CBZ X0, 0x1CDCC70
	0x01CDCC04 MOV X1, X31
	0x01CDCC08 BL 0x3A9B084
	0x01CDCC0C CBZ X0, 0x1CDCC70
	0x01CDCC10 MOV X1, X31
	0x01CDCC14 BL 0x3AA7658
	0x01CDCC18 MOV X0, X19
	0x01CDCC1C MOV X1, X31
	0x01CDCC20 BL 0x1CE4C60
	0x01CDCC24 MOV X0, X19
	0x01CDCC28 MOV X1, X31
	0x01CDCC2C BL 0x1CE4BFC
	0x01CDCC30 MOV X0, X19
	0x01CDCC34 BL 0x1CDD048
	0x01CDCC38 B 0x1CDCC5C
	0x01CDCC3C MOV X0, X19
	0x01CDCC40 BL 0x1CDC7B8
	0x01CDCC44 B 0x1CDCC5C
	0x01CDCC48 LDR X8, [X19]
	0x01CDCC4C MOV X0, X19
	0x01CDCC50 LDR X9, [X8 + 0x328]
	0x01CDCC54 LDR X1, [X8 + 0x330]
	0x01CDCC58 BLR X9
	0x01CDCC5C LDP X20, X19, [X31 + 0x20]
	0x01CDCC60 LDR X30, [X31 + 0x18]
	0x01CDCC64 LDR V8, [X31 + 0x10]
	0x01CDCC68 ADD X31, X31, 0x30
	0x01CDCC6C RET

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+112], D15
	003 Move [X31+120], D14
	004 Move [X31+128], D13
	005 Move [X31+136], D12
	006 Move [X31+144], D11
	007 Move [X31+152], D10
	008 Move [X31+160], D9
	009 Move [X31+168], D8
	010 Move [X31+176], X30
	011 Move [X31+184], X23
	012 Move [X31+192], X22
	013 Move [X31+200], X21
	014 Move [X31+208], X20
	015 Move [X31+216], X19
	016 Move X20, 0x2549000
	017 Move X22, 0x2273000
	018 Move W8, [X20+1561]
	019 Move X22, [X22+1144]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {51}
	025 Move X0, 0x2275000
	026 Move X0, [X0+3528]
	027 Call 0x1B6F7F0
	028 Move X0, 0x2275000
	029 Move X0, [X0+3536]
	030 Call 0x1B6F7F0
	031 Move X0, 0x2275000
	032 Move X0, [X0+3544]
	033 Call 0x1B6F7F0
	034 Move X0, 0x2275000
	035 Move X0, [X0+3552]
	036 Call 0x1B6F7F0
	037 Move X0, 0x2275000
	038 Move X0, [X0+3560]
	039 Call 0x1B6F7F0
	040 Move X0, 0x2275000
	041 Move X0, [X0+3568]
	042 Call 0x1B6F7F0
	043 Move X0, 0x2275000
	044 Move X0, [X0+3576]
	045 Call 0x1B6F7F0
	046 Move X0, 0x2273000
	047 Move X0, [X0+1144]
	048 Call 0x1B6F7F0
	049 Move W8, 1
	050 Move [X20+1561], W8
	051 Move X0, [X22]
	052 Move [X31+96], X31
	053 Move [X31+104], X31
	054 Move [X31+80], X31
	055 Move [X31+88], X31
	056 Move [X31+72], X31
	057 Move W8, [X0+224]
	058 Move X20, [X19+376]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1B6F8F8
	062 Move X0, X20
	063 Move X1, X31
	064 Move X2, X31
	065 Call Object.op_Inequality, X0, X1
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {115}
	070 Move X0, [X19+376]
	071 Compare X0, 0
	072 JumpIfEqual {928}
	073 Move X1, X31
	074 Call Component.get_transform, X0
	075 Compare X0, 0
	076 JumpIfEqual {928}
	077 Move X1, X31
	078 Call Transform.get_position, X0
	079 Move X0, [X19+208]
	080 Compare X0, 0
	081 JumpIfEqual {928}
	082 Move X1, X31
	083 Move V8, V0
	084 Move V9, V1
	085 Move V10, V2
	086 Call Transform.get_position, X0
	087 Move X20, 0x2548000
	088 Move W8, [X20+1286]
	089 Move V11, V0
	090 Move V12, V1
	091 Move V13, V2
	092 Compare W8, 0
	093 JumpIfNotEqual {99}
	094 Move X0, 0x2272000
	095 Move X0, [X0+1160]
	096 Call 0x1B6F7F0
	097 Move W8, 1
	098 Move [X20+1286], W8
	099 Move X8, 0x2272000
	100 Move X8, [X8+1160]
	101 Subtract S11, S8, S11
	102 Subtract S9, S9, S12
	103 Subtract S8, S10, S13
	104 Move X0, [X8]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1B6F8F8
	109 Multiply S0, S11, S11
	110 Multiply S1, S9, S9
	111 Add S0, S0, S1
	112 Multiply S1, S8, S8
	113 Add S0, S1, S0
	114 NotImplemented "Instruction FSQRT not yet implemented."
	115 Move TEMP, 0x80800000
	116 Not TEMP
	117 Move W8, TEMP
	118 Move S11, W8
	119 Move X0, [X22]
	120 Move X20, [X19+376]
	121 Move W8, [X0+224]
	122 Compare W8, 0
	123 JumpIfNotEqual {125}
	124 Call 0x1B6F8F8
	125 Move X0, X20
	126 Move X1, X31
	127 Move X2, X31
	128 Call Object.op_Inequality, X0, X1
	129 Move TEMP, X0
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfNotEqual {156}
	133 Move X8, [X19+184]
	134 Compare X8, 0
	135 JumpIfEqual {928}
	136 Move X8, [X8+120]
	137 Compare X8, 0
	138 JumpIfEqual {928}
	139 Move W9, [X8+24]
	140 Compare W9, 0
	141 JumpIfEqual {929}
	142 Move V0, [X8+32]
	143 NotImplemented "Instruction FCMP not yet implemented."
	144 Move X0, [X19+376]
	145 Compare X0, 0
	146 JumpIfEqual {928}
	147 Move X1, X31
	148 Call Component.get_transform, X0
	149 Compare X0, 0
	150 JumpIfEqual {928}
	151 Move X1, X31
	152 Call Transform.get_position, X0
	153 Move X0, X19
	154 Move X1, X31
	155 Call MobController.set__positionThatPlayerStayed, X0, X1
	156 Move X0, [X19+208]
	157 Compare X0, 0
	158 JumpIfEqual {928}
	159 Move X1, X31
	160 Call Transform.get_position, X0
	161 Move X0, [X19+208]
	162 Compare X0, 0
	163 JumpIfEqual {928}
	164 Move X1, X31
	165 Move V8, V0
	166 Move V9, V1
	167 Move V10, V2
	168 Call Transform.get_forward, X0
	169 Move X8, [X19+184]
	170 Compare X8, 0
	171 JumpIfEqual {928}
	172 Move V6, [X8+128]
	173 Move V3, V0
	174 Move V4, V1
	175 Move V5, V2
	176 Add X0, X31, 104
	177 Move V0, V8
	178 Move V1, V9
	179 Move V2, V10
	180 Move X1, X31
	181 Call MobDetectionUtil.TryGetLightsBySight, X0, X1, V0, X2
	182 Move TEMP, X0
	183 And TEMP, TEMP, 1
	184 Compare TEMP, 1
	185 JumpIfNotEqual {309}
	186 Move X0, [X31+104]
	187 Compare X0, 0
	188 JumpIfEqual {928}
	189 Move W8, [X0+24]
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Move X8, 0x2274000
	192 Move X8, [X8+3576]
	193 Move W1, W31
	194 Move X2, [X8]
	195 Call List`1<Object>.get_Item, X0, X1
	196 Move X8, [X22]
	197 Move X20, [X19+376]
	198 Move X21, X0
	199 Move W9, [X8+224]
	200 Compare W9, 0
	201 JumpIfNotEqual {204}
	202 Move X0, X8
	203 Call 0x1B6F8F8
	204 Move X0, X21
	205 Move X1, X20
	206 Move X2, X31
	207 Call Object.op_Equality, X0, X1
	208 Move TEMP, X0
	209 And TEMP, TEMP, 1
	210 Compare TEMP, 1
	211 JumpIfEqual {323}
	212 Move X0, [X31+104]
	213 Compare X0, 0
	214 JumpIfEqual {928}
	215 Move X8, 0x2274000
	216 Move X8, [X8+3552]
	217 Move X1, [X8]
	218 Add X8, X31, 48
	219 Call List`1<Object>.GetEnumerator, X0
	220 Move V0, [X31+3]
	221 Move X8, [X31+64]
	222 Move X23, 0x2274000
	223 Move [X31+5], V0
	224 Move [X31+96], X8
	225 Move X23, [X23+3536]
	226 Move X1, [X23]
	227 Add X0, X31, 80
	228 Call Enumerator<Object>.MoveNext, X0
	229 Move TEMP, X0
	230 And TEMP, TEMP, 1
	231 Compare TEMP, 1
	232 JumpIfNotEqual {318}
	233 Move X0, [X22]
	234 Move X20, [X31+96]
	235 Move X21, [X19+376]
	236 Move W8, [X0+224]
	237 Compare W8, 0
	238 JumpIfNotEqual {240}
	239 Call 0x1B6F8F8
	240 Move X0, X20
	241 Move X1, X21
	242 Move X2, X31
	243 Call Object.op_Inequality, X0, X1
	244 Move TEMP, X0
	245 And TEMP, TEMP, 1
	246 Compare TEMP, 1
	247 JumpIfNotEqual {226}
	248 Move X0, [X22]
	249 Move X21, [X19+376]
	250 Move W8, [X0+224]
	251 Compare W8, 0
	252 JumpIfNotEqual {254}
	253 Call 0x1B6F8F8
	254 Move X0, X21
	255 Move X1, X31
	256 Move X2, X31
	257 Call Object.op_Inequality, X0, X1
	258 Move TEMP, X0
	259 And TEMP, TEMP, 1
	260 Compare TEMP, 1
	261 JumpIfNotEqual {268}
	262 Move X0, [X19+376]
	263 Compare X0, 0
	264 JumpIfEqual {933}
	265 Move W1, W31
	266 Move X2, X31
	267 Call Flashlight.set_isOn, X0, X1
	268 Move X8, [X19]
	269 Move X9, [X8+920]
	270 Move X2, [X8+928]
	271 Move X0, X19
	272 Move X1, X20
	273 NotImplemented "Instruction BLR not yet implemented."
	274 Compare X20, 0
	275 JumpIfEqual {930}
	276 Move X0, X20
	277 Move X1, X31
	278 Call Component.get_transform, X0
	279 Compare X0, 0
	280 JumpIfEqual {931}
	281 Move X1, X31
	282 Call Transform.get_position, X0
	283 Move X0, [X19+208]
	284 Compare X0, 0
	285 JumpIfEqual {932}
	286 Move X1, X31
	287 Call Transform.get_position, X0
	288 Move X20, 0x2548000
	289 Move W8, [X20+1286]
	290 Compare W8, 0
	291 JumpIfNotEqual {297}
	292 Move X0, 0x2272000
	293 Move X0, [X0+1160]
	294 Call 0x1B6F7F0
	295 Move W8, 1
	296 Move [X20+1286], W8
	297 Move X8, 0x2272000
	298 Move X8, [X8+1160]
	299 Move X0, [X8]
	300 Move W8, [X0+224]
	301 Compare W8, 0
	302 JumpIfNotEqual {304}
	303 Call 0x1B6F8F8
	304 Move X8, 0x2274000
	305 Move X8, [X8+3528]
	306 Add X0, X31, 80
	307 Move X1, [X8]
	308 Call Enumerator<Object>.Dispose, X0
	309 Move X8, [X19]
	310 Move X0, X19
	311 Move X1, X31
	312 Move X9, [X8+920]
	313 Move X2, [X8+928]
	314 NotImplemented "Instruction BLR not yet implemented."
	315 Move S0, W31
	316 Move X0, X19
	317 Call AnglerController.set_timerAroundLight, X0, V0
	318 Move X8, 0x2274000
	319 Move X8, [X8+3528]
	320 Add X0, X31, 80
	321 Move X1, [X8]
	322 Call Enumerator<Object>.Dispose, X0
	323 Move X0, [X22]
	324 Move X20, [X19+376]
	325 Move W8, [X0+224]
	326 Compare W8, 0
	327 JumpIfNotEqual {329}
	328 Call 0x1B6F8F8
	329 Move X0, X20
	330 Move X1, X31
	331 Move X2, X31
	332 Call Object.op_Inequality, X0, X1
	333 Move TEMP, X0
	334 And TEMP, TEMP, 1
	335 Compare TEMP, 1
	336 JumpIfNotEqual {386}
	337 Move X0, [X19+376]
	338 Compare X0, 0
	339 JumpIfEqual {928}
	340 Move X1, X31
	341 Call Component.get_transform, X0
	342 Compare X0, 0
	343 JumpIfEqual {928}
	344 Move X1, X31
	345 Call Transform.get_position, X0
	346 Move X0, X19
	347 Move X1, X31
	348 Call MobController.set__positionThatPlayerStayed, X0, X1
	349 Move X8, [X19+184]
	350 Compare X8, 0
	351 JumpIfEqual {928}
	352 Move X8, [X8+120]
	353 Compare X8, 0
	354 JumpIfEqual {928}
	355 Move W9, [X8+24]
	356 Compare W9, 0
	357 JumpIfEqual {929}
	358 Move V0, [X8+32]
	359 NotImplemented "Instruction FCMP not yet implemented."
	360 Move X0, X19
	361 Call AnglerController.get_timerAroundLight, X0
	362 Add X0, X31, 44
	363 Add X1, X31, 40
	364 Call 0x3D1A8F0
	365 Move X0, [X19+376]
	366 Compare X0, 0
	367 JumpIfEqual {928}
	368 Move S9, [X31+40]
	369 Move S8, [X31+44]
	370 Move X1, X31
	371 Call Component.get_transform, X0
	372 Compare X0, 0
	373 JumpIfEqual {928}
	374 Move S0, 0.5
	375 Move X1, X31
	376 Multiply S9, S9, S0
	377 Multiply S8, S8, S0
	378 Call Transform.get_position, X0
	379 Move S3, W31
	380 Add S0, S9, S0
	381 Add S1, S1, S3
	382 Add S2, S8, S2
	383 Move X0, X19
	384 Move X1, X31
	385 Call MobController.set__positionThatPlayerStayed, X0, X1
	386 Move X0, X19
	387 Call AnglerController.get_timerAroundLight, X0
	388 Move X0, X19
	389 Move X1, X31
	390 Move V8, V0
	391 Call MobController.get_deltaTime, X0
	392 Add S0, S8, S0
	393 Move X0, X19
	394 Call AnglerController.set_timerAroundLight, X0, V0
	395 Move X0, X19
	396 Call AnglerController.get_timerAroundLight, X0
	397 Move S1, 10
	398 NotImplemented "Instruction FCMP not yet implemented."
	399 Move X0, [X22]
	400 Move X20, [X19+376]
	401 Move W8, [X0+224]
	402 Compare W8, 0
	403 JumpIfNotEqual {405}
	404 Call 0x1B6F8F8
	405 Move X0, X20
	406 Move X1, X31
	407 Move X2, X31
	408 Call Object.op_Equality, X0, X1
	409 Move TEMP, X0
	410 And TEMP, TEMP, 1
	411 Compare TEMP, 1
	412 JumpIfNotEqual {416}
	413 Move X0, X19
	414 Move X1, X31
	415 Call MobController.UpdateChasing, X0
	416 Move X0, X19
	417 Move X1, X31
	418 Call MobController.get__timerAttackInterval, X0
	419 Move X0, X19
	420 Move X1, X31
	421 Move V8, V0
	422 Call MobController.get_deltaTime, X0
	423 Add S0, S8, S0
	424 Move X0, X19
	425 Move X1, X31
	426 Call MobController.set__timerAttackInterval, X0, V0
	427 Move X0, X19
	428 Move X1, X31
	429 Call MobController.get__timerAttackInterval, X0
	430 Move S1, 1
	431 NotImplemented "Instruction FCMP not yet implemented."
	432 Move X0, [X19+200]
	433 Compare X0, 0
	434 JumpIfEqual {928}
	435 Move X1, X31
	436 Call NavMeshAgent.get_isStopped, X0
	437 Move TEMP, X0
	438 And TEMP, TEMP, 1
	439 Compare TEMP, 1
	440 JumpIfNotEqual {447}
	441 Move X0, [X19+200]
	442 Compare X0, 0
	443 JumpIfEqual {928}
	444 Move W1, W31
	445 Move X2, X31
	446 Call NavMeshAgent.set_isStopped, X0, X1
	447 Move X0, [X22]
	448 Move X20, [X19+320]
	449 Move W8, [X0+224]
	450 Compare W8, 0
	451 JumpIfNotEqual {453}
	452 Call 0x1B6F8F8
	453 Move X0, X20
	454 Move X1, X31
	455 Move X2, X31
	456 Call Object.op_Inequality, X0, X1
	457 Move TEMP, X0
	458 And TEMP, TEMP, 1
	459 Compare TEMP, 1
	460 JumpIfNotEqual {559}
	461 Move X0, [X19+208]
	462 Compare X0, 0
	463 JumpIfEqual {928}
	464 Move X1, X31
	465 Call Transform.get_position, X0
	466 Move X0, X31
	467 Call Extensions.Flatten, X0
	468 Move X0, [X19+320]
	469 Compare X0, 0
	470 JumpIfEqual {928}
	471 Move X1, X31
	472 Move V8, V0
	473 Move V9, V1
	474 Move V10, V2
	475 Call Component.get_transform, X0
	476 Compare X0, 0
	477 JumpIfEqual {928}
	478 Move X1, X31
	479 Call Transform.get_position, X0
	480 Move X0, X31
	481 Call Extensions.Flatten, X0
	482 Move X0, [X19+208]
	483 Compare X0, 0
	484 JumpIfEqual {928}
	485 Move X1, X31
	486 Move V12, V0
	487 Move V13, V1
	488 Move V14, V2
	489 Call Transform.get_position, X0
	490 Move X0, [X19+320]
	491 Compare X0, 0
	492 JumpIfEqual {928}
	493 Move X1, X31
	494 Move V11, V1
	495 Call Component.get_transform, X0
	496 Compare X0, 0
	497 JumpIfEqual {928}
	498 Move X1, X31
	499 Call Transform.get_position, X0
	500 Move X0, X19
	501 Move X1, X31
	502 Move V15, V1
	503 Call MobController.get__timerAttackInterval, X0
	504 Move X0, [X19+184]
	505 Compare X0, 0
	506 JumpIfEqual {928}
	507 Move V1, [X0+40]
	508 NotImplemented "Instruction FCMP not yet implemented."
	509 Subtract S0, S8, S12
	510 Subtract S1, S9, S13
	511 Subtract S2, S10, S14
	512 Multiply S0, S0, S0
	513 Multiply S1, S1, S1
	514 Add S0, S0, S1
	515 Multiply S1, S2, S2
	516 Move X1, X31
	517 Add S8, S1, S0
	518 Call MobData.get_attackRangeSqr, X0
	519 NotImplemented "Instruction FCMP not yet implemented."
	520 Move X8, [X19+184]
	521 Compare X8, 0
	522 JumpIfEqual {928}
	523 Move V0, [X8+76]
	524 NotImplemented "Instruction FABD not yet implemented."
	525 NotImplemented "Instruction FCMP not yet implemented."
	526 Move S0, W31
	527 Move X0, X19
	528 Move X1, X31
	529 Call MobController.set__timerAttackInterval, X0, V0
	530 Move X0, [X19+200]
	531 Compare X0, 0
	532 JumpIfEqual {928}
	533 Move W1, 1
	534 Move X2, X31
	535 Call NavMeshAgent.set_isStopped, X0, X1
	536 Move X8, [X19+184]
	537 Compare X8, 0
	538 JumpIfEqual {928}
	539 Move X20, [X19+320]
	540 Move W21, [X8+36]
	541 Move X0, X19
	542 Move X1, X31
	543 Call Component.get_transform, X0
	544 Move X8, [X19+184]
	545 Compare X8, 0
	546 JumpIfEqual {928}
	547 Compare X20, 0
	548 JumpIfEqual {928}
	549 Move X5, [X8+24]
	550 Move X4, [X8+184]
	551 Move X3, [X8+192]
	552 Move X2, X0
	553 Move X0, X20
	554 Move W1, W21
	555 Move X6, X31
	556 Call NetPlayer.PlayerHit, X0, X1, X2, X3, X4, X5
	557 Move X0, X19
	558 Call AnglerController.RPC_PlayAttackAnimation, X0
	559 Move X0, [X22]
	560 Move X20, [X19+376]
	561 Move W8, [X0+224]
	562 Compare W8, 0
	563 JumpIfNotEqual {565}
	564 Call 0x1B6F8F8
	565 Move X0, X20
	566 Move X1, X31
	567 Move X2, X31
	568 Call Object.op_Equality, X0, X1
	569 Move TEMP, X0
	570 And TEMP, TEMP, 1
	571 Compare TEMP, 1
	572 JumpIfNotEqual {594}
	573 Move X0, X19
	574 Move X1, X31
	575 Call MobController.get__timerToChasing, X0
	576 Move X0, X19
	577 Move X1, X31
	578 Move V8, V0
	579 Call MobController.get_deltaTime, X0
	580 Add S0, S8, S0
	581 Move X0, X19
	582 Move X1, X31
	583 Call MobController.set__timerToChasing, X0, V0
	584 Move X0, X19
	585 Move X1, X31
	586 Call MobController.get__timerToChasing, X0
	587 Move X8, [X19+184]
	588 Compare X8, 0
	589 JumpIfEqual {928}
	590 Move V1, [X8+104]
	591 NotImplemented "Instruction FCMP not yet implemented."
	592 Move X0, X19
	593 Call AnglerController.SetRoaming, X0
	594 Move X0, X19
	595 Call AnglerController.get_phase, X0
	596 NotImplemented "Instruction CMP not yet implemented."
	597 Move X0, [X19+200]
	598 Compare X0, 0
	599 JumpIfEqual {928}
	600 Move X1, X31
	601 Call NavMeshAgent.get_pathPending, X0
	602 Move TEMP, X0
	603 And TEMP, TEMP, 1
	604 Compare TEMP, 1
	605 JumpIfNotEqual {656}
	606 Move X0, X19
	607 Move X1, X31
	608 Call MobController.get__positionThatPlayerStayed, X0
	609 Move X0, X19
	610 Move X1, X31
	611 Move V8, V0
	612 Move V9, V1
	613 Move V10, V2
	614 Call Component.get_transform, X0
	615 Compare X0, 0
	616 JumpIfEqual {928}
	617 Move X1, X31
	618 Call Transform.get_position, X0
	619 Move X21, 0x2548000
	620 Move W8, [X21+1089]
	621 Move V11, V0
	622 Move V12, V1
	623 Move V13, V2
	624 Compare W8, 0
	625 JumpIfNotEqual {631}
	626 Move X0, 0x2272000
	627 Move X0, [X0+1160]
	628 Call 0x1B6F7F0
	629 Move W8, 1
	630 Move [X21+1089], W8
	631 Move X20, 0x2272000
	632 Move X20, [X20+1160]
	633 Subtract S14, S8, S11
	634 Subtract S11, S9, S12
	635 Subtract S8, S10, S13
	636 Move X0, [X20]
	637 Move W8, [X0+224]
	638 Compare W8, 0
	639 JumpIfNotEqual {641}
	640 Call 0x1B6F8F8
	641 Move X8, -19079168
	642 Multiply S0, S14, S14
	643 Multiply S1, S11, S11
	644 Move V9, [X8+2916]
	645 Move X22, 0x2272000
	646 Multiply S2, S8, S8
	647 Add S0, S0, S1
	648 Move X22, [X22+1152]
	649 Add S0, S2, S0
	650 NotImplemented "Instruction FSQRT not yet implemented."
	651 NotImplemented "Instruction FCMP not yet implemented."
	652 Move X23, 0x2548000
	653 NotImplemented "Instruction FDIV not yet implemented."
	654 NotImplemented "Instruction FDIV not yet implemented."
	655 NotImplemented "Instruction FDIV not yet implemented."
	656 Move X20, [X19+200]
	657 Move X0, X19
	658 Move X1, X31
	659 Call MobController.get__positionThatPlayerStayed, X0
	660 Compare X20, 0
	661 JumpIfEqual {928}
	662 Move X0, X20
	663 Move X1, X31
	664 Call NavMeshAgent.SetDestination, X0, X1
	665 Move X0, [X22]
	666 Move X20, [X19+376]
	667 Move W8, [X0+224]
	668 Compare W8, 0
	669 JumpIfNotEqual {671}
	670 Call 0x1B6F8F8
	671 Move X0, X20
	672 Move X1, X31
	673 Move X2, X31
	674 Call Object.op_Inequality, X0, X1
	675 Move TEMP, X0
	676 And TEMP, TEMP, 1
	677 Compare TEMP, 1
	678 JumpIfNotEqual {685}
	679 Move X0, [X19+376]
	680 Compare X0, 0
	681 JumpIfEqual {928}
	682 Move W1, W31
	683 Move X2, X31
	684 Call Flashlight.set_isOn, X0, X1
	685 Add X1, X31, 72
	686 Move X0, X19
	687 Move X2, X31
	688 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	689 Move TEMP, X0
	690 And TEMP, TEMP, 1
	691 Compare TEMP, 1
	692 JumpIfNotEqual {910}
	693 Move X0, [X31+72]
	694 Compare X0, 0
	695 JumpIfEqual {928}
	696 Move X8, 0x2274000
	697 Move X8, [X8+3568]
	698 Move W1, W31
	699 Move X2, [X8]
	700 Call List`1<Object>.get_Item, X0, X1
	701 Move X8, [X19]
	702 Move X1, X0
	703 Move X0, X19
	704 Move X9, [X8+824]
	705 Move X2, [X8+832]
	706 NotImplemented "Instruction BLR not yet implemented."
	707 Move X0, [X19+320]
	708 Compare X0, 0
	709 JumpIfNotEqual {147}
	710 Move W8, [X23+1087]
	711 Compare W8, 0
	712 JumpIfNotEqual {718}
	713 Move X0, 0x2272000
	714 Move X0, [X0+1152]
	715 Call 0x1B6F7F0
	716 Move W8, 1
	717 Move [X23+1087], W8
	718 Move X8, [X22]
	719 Move X8, [X8+184]
	720 Move S10, [X8]
	721 Move S14, [X8+4]
	722 Move V15, [X8+8]
	723 Move V0, V10
	724 Move V1, V14
	725 Move V2, V15
	726 Move X0, X31
	727 Call Extensions.Flatten, X0
	728 Move W8, [X21+1089]
	729 Move V8, V0
	730 Move V12, V1
	731 Move V13, V2
	732 Compare W8, 0
	733 JumpIfNotEqual {739}
	734 Move X0, 0x2272000
	735 Move X0, [X0+1160]
	736 Call 0x1B6F7F0
	737 Move W8, 1
	738 Move [X21+1089], W8
	739 Move X0, [X20]
	740 Move W8, [X0+224]
	741 Compare W8, 0
	742 JumpIfNotEqual {744}
	743 Call 0x1B6F8F8
	744 Multiply S0, S8, S8
	745 Multiply S1, S12, S12
	746 Add S0, S0, S1
	747 Multiply S1, S13, S13
	748 Add S0, S1, S0
	749 NotImplemented "Instruction FSQRT not yet implemented."
	750 NotImplemented "Instruction FCMP not yet implemented."
	751 NotImplemented "Instruction FDIV not yet implemented."
	752 NotImplemented "Instruction FDIV not yet implemented."
	753 Move [X31+36], S1
	754 NotImplemented "Instruction FDIV not yet implemented."
	755 Move W8, [X23+1087]
	756 Compare W8, 0
	757 JumpIfNotEqual {763}
	758 Move X0, 0x2272000
	759 Move X0, [X0+1152]
	760 Call 0x1B6F7F0
	761 Move W8, 1
	762 Move [X23+1087], W8
	763 Move X8, [X22]
	764 Move X8, [X8+184]
	765 Move S9, [X8]
	766 Move S0, [X8+4]
	767 Move V13, [X8+8]
	768 Move [X31+36], S0
	769 Move X8, [X19+184]
	770 Compare X8, 0
	771 JumpIfEqual {928}
	772 Move V11, [X8+64]
	773 Move X0, X19
	774 Move X1, X31
	775 Move [X31+28], S15
	776 Move [X31+36], S14
	777 Call Component.get_transform, X0
	778 Compare X0, 0
	779 JumpIfEqual {928}
	780 Move X1, X31
	781 Move [X31+24], S10
	782 Call Transform.get_forward, X0
	783 Move X21, 0x2548000
	784 Move W8, [X21+1111]
	785 Move V14, V0
	786 Move V15, V1
	787 Move V8, V2
	788 Compare W8, 0
	789 JumpIfNotEqual {795}
	790 Move X0, 0x2272000
	791 Move X0, [X0+1160]
	792 Call 0x1B6F7F0
	793 Move W8, 1
	794 Move [X21+1111], W8
	795 Move V1, [X31+36]
	796 Move X0, [X20]
	797 Multiply S0, S9, S9
	798 Move V12, V9
	799 Multiply S1, S1, S1
	800 Add S0, S0, S1
	801 Multiply S1, S13, S13
	802 Move W8, [X0+224]
	803 Add S10, S1, S0
	804 Multiply S0, S14, S14
	805 Multiply S1, S15, S15
	806 Add S0, S0, S1
	807 Multiply S1, S8, S8
	808 Add S9, S1, S0
	809 Compare W8, 0
	810 JumpIfNotEqual {812}
	811 Call 0x1B6F8F8
	812 Move X8, -19079168
	813 Move V1, [X8+2532]
	814 Multiply S0, S10, S9
	815 NotImplemented "Instruction FSQRT not yet implemented."
	816 Move S10, W31
	817 NotImplemented "Instruction FCMP not yet implemented."
	818 Move V2, [X31+36]
	819 Move X0, [X20]
	820 Multiply S1, S12, S14
	821 Multiply S3, S13, S8
	822 Multiply S2, S2, S15
	823 Add S1, S1, S2
	824 Add S1, S3, S1
	825 Move W8, [X0+224]
	826 NotImplemented "Instruction FDIV not yet implemented."
	827 Move S1, 1
	828 Move S2, -1
	829 NotImplemented "Instruction FMIN not yet implemented."
	830 NotImplemented "Instruction FCMP not yet implemented."
	831 NotImplemented "Instruction FCSEL not yet implemented."
	832 Compare W8, 0
	833 JumpIfNotEqual {835}
	834 Call 0x1B6F8F8
	835 NotImplemented "Instruction FCVT not yet implemented."
	836 Call 0x3D1A890
	837 Move X8, -19079168
	838 Move V1, [X8+3612]
	839 NotImplemented "Instruction INVALID not yet implemented."
	840 Multiply S10, S0, S1
	841 Move X0, X19
	842 Move X1, X31
	843 Call Component.get_transform, X0
	844 Move X20, X0
	845 Move X0, X19
	846 Move X1, X31
	847 Call Component.get_transform, X0
	848 Compare X0, 0
	849 JumpIfEqual {928}
	850 NotImplemented "Instruction FDIV not yet implemented."
	851 Move X1, X31
	852 Move [X31+20], S0
	853 Call Transform.get_rotation, X0
	854 Move V14, V1
	855 Move V1, [X31+36]
	856 Move V8, V0
	857 Move V15, V2
	858 Move V0, V12
	859 Move V2, V13
	860 Move X0, X31
	861 Move V9, V3
	862 Call Quaternion.LookRotation, X0
	863 Move X0, X19
	864 Move X1, X31
	865 Move V11, V0
	866 Move V12, V1
	867 Move V13, V2
	868 Move V10, V3
	869 Call MobController.get_deltaTime, X0
	870 Move V1, [X31+20]
	871 Move V2, V15
	872 Move V3, V9
	873 Move V4, V11
	874 Multiply S0, S1, S0
	875 Move [X31], S0
	876 Move V0, V8
	877 Move V1, V14
	878 Move V5, V12
	879 Move V6, V13
	880 Move V7, V10
	881 Move X0, X31
	882 Call Quaternion.Slerp, X0, X1, V0
	883 Compare X20, 0
	884 JumpIfEqual {928}
	885 Move X0, X20
	886 Move X1, X31
	887 Call Transform.set_rotation, X0, X1
	888 Move X20, [X19+200]
	889 Move S8, [X31+24]
	890 Move S10, [X31+28]
	891 Move V9, [X31+32]
	892 Compare X20, 0
	893 JumpIfEqual {928}
	894 Move X0, X20
	895 Move X1, X31
	896 Call NavMeshAgent.get_speed, X0
	897 Move X0, X19
	898 Move X1, X31
	899 Multiply S8, S8, S0
	900 Multiply S9, S9, S0
	901 Multiply S10, S10, S0
	902 Call MobController.get_deltaTime, X0
	903 Multiply S3, S8, S0
	904 Multiply S1, S9, S0
	905 Multiply S2, S10, S0
	906 Move X0, X20
	907 Move V0, V3
	908 Move X1, X31
	909 Call NavMeshAgent.Move, X0, X1
	910 Move X0, X19
	911 Call AnglerController.SetRoaming, X0
	912 Move X20, [X31+208]
	913 Move X19, [X31+216]
	914 Move X22, [X31+192]
	915 Move X21, [X31+200]
	916 Move X30, [X31+176]
	917 Move X23, [X31+184]
	918 Move D9, [X31+160]
	919 Move D8, [X31+168]
	920 Move D11, [X31+144]
	921 Move D10, [X31+152]
	922 Move D13, [X31+128]
	923 Move D12, [X31+136]
	924 Move D15, [X31+112]
	925 Move D14, [X31+120]
	926 Add X31, X31, 224
	927 Return 
	928 Call 0x1B6FA1C
	929 Call 0x1B6FA24
	930 Call 0x1B6FA1C
	931 Call 0x1B6FA1C
	932 Call 0x1B6FA1C
	933 Call 0x1B6FA1C
	934 Move X20, X0
	935 NotImplemented "Instruction CMP not yet implemented."
	936 Move X0, X20
	937 Call 0x3D1A840
	938 Move X21, [X0]
	939 Call 0x3D1A850
	940 Move X8, 0x2274000
	941 Move X8, [X8+3528]
	942 Add X0, X31, 80
	943 Move X1, [X8]
	944 Call Enumerator<Object>.Dispose, X0
	945 Compare X21, 0
	946 JumpIfEqual {323}
	947 Move X0, X21
	948 Call 0x1B6FA14
	949 Move X21, X31
	950 Move X20, X0
	951 Move X8, 0x2274000
	952 Move X8, [X8+3528]
	953 Move X1, [X8]
	954 Add X0, X31, 80
	955 Call Enumerator<Object>.Dispose, X0
	956 Compare X21, 0
	957 JumpIfNotEqual {960}
	958 Move X0, X20
	959 Call 0x1C8518C
	960 Move X0, X21
	961 Call 0x1B6FA14
	962 Call 0x18F56A8

Method: System.Void RPC_PlayAttackAnimation()

Disassembly:
	0x01CDCC70 BL 0x1B6EA1C
	0x01CDCC74 SUB X31, X31, 0x30
	0x01CDCC78 STR D8, [X31 + 0x10]
	0x01CDCC7C STR X30, [X31 + 0x18]
	0x01CDCC80 STP X20, X19, [X31 + 0x20]
	0x01CDCC84 ADRP X20, 0x2547000
	0x01CDCC88 LDRB W8, [X20 + 0x626]
	0x01CDCC8C MOV X19, X0
	0x01CDCC90 TBNZ X8, 0x0, 0x1CDCCB4
	0x01CDCC94 ADRP X0, 0x2273000
	0x01CDCC98 LDR X0, [X0 + 0xE30]
	0x01CDCC9C BL 0x1B6E7F0
	0x01CDCCA0 ADRP X0, 0x2273000
	0x01CDCCA4 LDR X0, [X0 + 0xDF0]
	0x01CDCCA8 BL 0x1B6E7F0
	0x01CDCCAC MOVZ W8, 0x1
	0x01CDCCB0 STRB W8, [X20 + 0x626]
	0x01CDCCB4 STR X31, [X31 + 0x8]
	0x01CDCCB8 LDR V8, [X19 + 0x17C]
	0x01CDCCBC MOV X0, X19
	0x01CDCCC0 MOV X1, X31
	0x01CDCCC4 BL 0x1CE4CC4
	0x01CDCCC8 LDR X8, [X19 + 0xB8]
	0x01CDCCCC FADD S0, S8, S0
	0x01CDCCD0 STR S0, [X19 + 0x17C]
	0x01CDCCD4 CBZ X8, 0x1CDCD84
	0x01CDCCD8 LDR V1, [X8 + 0x28]
	0x01CDCCDC FCMP S0, S1
	0x01CDCCE0 B.LT 0x1CDCD70
	0x01CDCCE4 ADD X1, X31, 0x8
	0x01CDCCE8 MOV X0, X19
	0x01CDCCEC MOV X2, X31
	0x01CDCCF0 BL 0x1CE85FC
	0x01CDCCF4 TBZ X0, 0x0, 0x1CDCD68
	0x01CDCCF8 LDR X20, [X31 + 0x8]
	0x01CDCCFC CBZ X20, 0x1CDCD84
	0x01CDCD00 LDR W1, [X20 + 0x18]
	0x01CDCD04 MOV W0, W31
	0x01CDCD08 MOV X2, X31
	0x01CDCD0C BL 0x3A98D10
	0x01CDCD10 ADRP X8, 0x2273000
	0x01CDCD14 LDR X8, [X8 + 0xDF0]
	0x01CDCD18 MOV W1, W0
	0x01CDCD1C MOV X0, X20
	0x01CDCD20 LDR X2, [X8]
	0x01CDCD24 BL 0x2E46254
	0x01CDCD28 LDR X8, [X19]
	0x01CDCD2C MOV X1, X0
	0x01CDCD30 MOV X0, X19
	0x01CDCD34 LDR X9, [X8 + 0x338]
	0x01CDCD38 LDR X2, [X8 + 0x340]
	0x01CDCD3C BLR X9
	0x01CDCD40 LDR X0, [X19 + 0x140]
	0x01CDCD44 CBZ X0, 0x1CDCD84
	0x01CDCD48 MOV X1, X31
	0x01CDCD4C BL 0x3A9B084
	0x01CDCD50 CBZ X0, 0x1CDCD84
	0x01CDCD54 MOV X1, X31
	0x01CDCD58 BL 0x3AA7658
	0x01CDCD5C MOV X0, X19
	0x01CDCD60 BL 0x1CDD048
	0x01CDCD64 B 0x1CDCD70
	0x01CDCD68 MOV X0, X19
	0x01CDCD6C BL 0x1CDC7B8
	0x01CDCD70 LDP X20, X19, [X31 + 0x20]
	0x01CDCD74 LDR X30, [X31 + 0x18]
	0x01CDCD78 LDR V8, [X31 + 0x10]
	0x01CDCD7C ADD X31, X31, 0x30
	0x01CDCD80 RET
	0x01CDCD84 BL 0x1B6EA1C
	0x01CDCD88 SUB X31, X31, 0x40
	0x01CDCD8C STR X30, [X31 + 0x10]
	0x01CDCD90 STP X22, X21, [X31 + 0x20]
	0x01CDCD94 STP X20, X19, [X31 + 0x30]
	0x01CDCD98 ADRP X21, 0x2547000
	0x01CDCD9C ADRP X20, 0x2273000
	0x01CDCDA0 LDRB W8, [X21 + 0x622]
	0x01CDCDA4 LDR X20, [X20 + 0xE38]
	0x01CDCDA8 MOV X19, X0
	0x01CDCDAC TBNZ X8, 0x0, 0x1CDCE0C
	0x01CDCDB0 ADRP X0, 0x2272000
	0x01CDCDB4 LDR X0, [X0 + 0x810]
	0x01CDCDB8 BL 0x1B6E7F0
	0x01CDCDBC ADRP X0, 0x2272000
	0x01CDCDC0 LDR X0, [X0 + 0x818]
	0x01CDCDC4 BL 0x1B6E7F0
	0x01CDCDC8 ADRP X0, 0x2273000
	0x01CDCDCC LDR X0, [X0 + 0xE30]
	0x01CDCDD0 BL 0x1B6E7F0
	0x01CDCDD4 ADRP X0, 0x2273000
	0x01CDCDD8 LDR X0, [X0 + 0xDF0]
	0x01CDCDDC BL 0x1B6E7F0
	0x01CDCDE0 ADRP X0, 0x2271000
	0x01CDCDE4 LDR X0, [X0 + 0x478]
	0x01CDCDE8 BL 0x1B6E7F0
	0x01CDCDEC ADRP X0, 0x2273000
	0x01CDCDF0 LDR X0, [X0 + 0xE40]
	0x01CDCDF4 BL 0x1B6E7F0
	0x01CDCDF8 ADRP X0, 0x2273000
	0x01CDCDFC LDR X0, [X0 + 0xE38]
	0x01CDCE00 BL 0x1B6E7F0
	0x01CDCE04 MOVZ W8, 0x1
	0x01CDCE08 STRB W8, [X21 + 0x622]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2548000
	006 Move W8, [X20+1562]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x2273000
	013 Move X0, [X0+448]
	014 Call 0x1B6F7F0
	015 Move X0, 0x2274000
	016 Move X0, [X0+3584]
	017 Call 0x1B6F7F0
	018 Move W8, 1
	019 Move [X20+1562], W8
	020 Move W8, [X19+88]
	021 Compare W8, 0
	022 JumpIfEqual {35}
	023 Move [X19+88], W31
	024 Move X0, [X19+192]
	025 Compare X0, 0
	026 JumpIfEqual {131}
	027 Move X8, [X0]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, [X8+504]
	031 Move X1, [X8+512]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 CallNoReturn X2
	035 Move X21, 0x2273000
	036 Move X21, [X21+448]
	037 Move X0, [X21]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1B6F8F8
	042 Move X0, X19
	043 Move X1, X31
	044 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	045 Move X0, [X19+56]
	046 Compare X0, 0
	047 JumpIfEqual {131}
	048 Move X1, X31
	049 Call NetworkRunner.get_Stage, X0
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Return 
	056 Move X0, [X19+64]
	057 Compare X0, 0
	058 JumpIfEqual {131}
	059 Move X1, X31
	060 Call NetworkObject.GetLocalAuthorityMask, X0
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {83}
	065 Move X0, [X21]
	066 Move X19, [X19+64]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1B6F8F8
	071 Move X8, 0x2274000
	072 Move X8, [X8+3584]
	073 Move X1, X19
	074 Move X20, [X31+16]
	075 Move X19, [X31+24]
	076 Move W2, 1
	077 Move X0, [X8]
	078 Move X3, X31
	079 Move X30, [X31+32]
	080 Move X21, [X31+40]
	081 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	082 Return 
	083 Move X8, [X19+56]
	084 Compare X8, 0
	085 JumpIfEqual {131}
	086 Move W20, W0
	087 Move X0, [X8+80]
	088 Compare X0, 0
	089 JumpIfEqual {131}
	090 Move X1, X31
	091 Call Simulation.HasAnyActiveConnections, X0
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {130}
	096 Move X8, [X19+56]
	097 Compare X8, 0
	098 JumpIfEqual {131}
	099 Move X0, [X8+80]
	100 Move W1, 8
	101 Move X2, X31
	102 Call SimulationMessage.Allocate, X0, X1
	103 Move X21, X0
	104 Move W0, 1
	105 Move X1, X31
	106 Call Assert.Check, X0
	107 Move X8, [X19+64]
	108 Compare X8, 0
	109 JumpIfEqual {131}
	110 Move X8, [X8+32]
	111 Compare X8, 0
	112 JumpIfEqual {114}
	113 Move W0, [X8]
	114 Move X0, X31
	115 Move W1, [X19+104]
	116 Move W2, 4
	117 Move X3, X31
	118 Call RpcHeader.Create, X0, X1, X2
	119 Move [X21+28], X0
	120 Compare X21, 0
	121 JumpIfEqual {131}
	122 Move W8, 64
	123 Move [X21+12], W8
	124 Move X0, [X19+56]
	125 Compare X0, 0
	126 JumpIfEqual {131}
	127 Move X1, X21
	128 Move X2, X31
	129 Call NetworkRunner.SendRpc, X0, X1
	130 And W31, W20, 7
	131 Call 0x1B6FA1C

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01CDCE0C LDR X0, [X20]
	0x01CDCE10 STR X31, [X31 + 0x18]
	0x01CDCE14 STR X31, [X31 + 0x8]
	0x01CDCE18 BL 0x1B6EA0C
	0x01CDCE1C MOV X1, X31
	0x01CDCE20 MOV X20, X0
	0x01CDCE24 BL 0x32276F8
	0x01CDCE28 CBZ X20, 0x1CDD038
	0x01CDCE2C MOV X0, X19
	0x01CDCE30 MOV X1, X31
	0x01CDCE34 STR X19, [X20 + 0x10]
	0x01CDCE38 BL 0x1CE67C8
	0x01CDCE3C ADD X1, X31, 0x18
	0x01CDCE40 MOV X0, X19
	0x01CDCE44 MOV X2, X31
	0x01CDCE48 BL 0x1CE85FC
	0x01CDCE4C TBZ X0, 0x0, 0x1CDCEC0
	0x01CDCE50 LDR X20, [X31 + 0x18]
	0x01CDCE54 CBZ X20, 0x1CDD038
	0x01CDCE58 LDR W1, [X20 + 0x18]
	0x01CDCE5C MOV W0, W31
	0x01CDCE60 MOV X2, X31
	0x01CDCE64 BL 0x3A98D10
	0x01CDCE68 ADRP X8, 0x2273000
	0x01CDCE6C LDR X8, [X8 + 0xDF0]
	0x01CDCE70 MOV W1, W0
	0x01CDCE74 MOV X0, X20
	0x01CDCE78 LDR X2, [X8]
	0x01CDCE7C BL 0x2E46254
	0x01CDCE80 LDR X8, [X19]
	0x01CDCE84 MOV X1, X0
	0x01CDCE88 MOV X0, X19
	0x01CDCE8C LDR X9, [X8 + 0x338]
	0x01CDCE90 LDR X2, [X8 + 0x340]
	0x01CDCE94 BLR X9
	0x01CDCE98 LDR X0, [X19 + 0x140]
	0x01CDCE9C CBZ X0, 0x1CDD038
	0x01CDCEA0 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2548000
	006 Move X20, 0x2274000
	007 Move W8, [X21+1563]
	008 Move X20, [X20+3400]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2274000
	015 Move X0, [X0+3400]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1563], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call MobController.OnDrawGizmos, X0
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1B6F8F8
	027 Move X0, [X20]
	028 Move X8, [X0+184]
	029 Move X0, X31
	030 Move S0, [X8+176]
	031 Move S1, [X8+180]
	032 Move S2, [X8+184]
	033 Move S3, [X8+188]
	034 Call Gizmos.set_color, X0
	035 Move X0, [X19+208]
	036 Compare X0, 0
	037 JumpIfEqual {51}
	038 Move X1, X31
	039 Call Transform.get_position, X0
	040 Move X8, [X19+184]
	041 Compare X8, 0
	042 JumpIfEqual {51}
	043 Move V3, [X8+76]
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X0, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Gizmos.DrawWireSphere, X0, V0
	050 Return 
	051 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CDCEA4 BL 0x3A9B084
	0x01CDCEA8 CBZ X0, 0x1CDD038
	0x01CDCEAC MOV X1, X31
	0x01CDCEB0 BL 0x3AA7658
	0x01CDCEB4 MOV X0, X19
	0x01CDCEB8 BL 0x1CDD048
	0x01CDCEBC B 0x1CDD024
	0x01CDCEC0 ADD X1, X31, 0x8
	0x01CDCEC4 MOV X0, X19
	0x01CDCEC8 MOV X2, X31
	0x01CDCECC BL 0x1CE8818
	0x01CDCED0 TBZ X0, 0x0, 0x1CDCFC0
	0x01CDCED4 LDR X8, [X19 + 0xB8]
	0x01CDCED8 CBZ X8, 0x1CDD038
	0x01CDCEDC LDR X8, [X8 + 0x78]
	0x01CDCEE0 CBZ X8, 0x1CDD038
	0x01CDCEE4 LDR W9, [X8 + 0x18]
	0x01CDCEE8 CBZ W9, 0x1CDD03C
	0x01CDCEEC LDR V0, [X8 + 0x20]
	0x01CDCEF0 ADRP X8, 0x2272000
	0x01CDCEF4 LDR X8, [X8 + 0x818]
	0x01CDCEF8 FMOV S1, 0.5

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2548000
	006 Move X21, 0x2273000
	007 Move W8, [X20+1564]
	008 Move X21, [X21+3448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2273000
	015 Move X0, [X0+3448]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1564], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1B6F8F8
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call MobController..ctor, X0
	031 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01CDCEFC FMUL S0, S0, S1
	0x01CDCF00 STR S0, [X20 + 0x18]
	0x01CDCF04 LDR X0, [X8]
	0x01CDCF08 LDR X21, [X31 + 0x8]
	0x01CDCF0C BL 0x1B6EA0C
	0x01CDCF10 ADRP X8, 0x2273000
	0x01CDCF14 LDR X8, [X8 + 0xE40]
	0x01CDCF18 MOV X1, X20
	0x01CDCF1C MOV X3, X31
	0x01CDCF20 MOV X22, X0
	0x01CDCF24 LDR X2, [X8]
	0x01CDCF28 BL 0x2B796E4
	0x01CDCF2C ADRP X8, 0x2272000
	0x01CDCF30 LDR X8, [X8 + 0x810]
	0x01CDCF34 MOV X0, X21

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 And W1, W1, 1
	004 Move X2, X31
	005 Move X19, X0
	006 Call MobController.CopyBackingFieldsToState, X0, X1
	007 Move W1, [X19+372]
	008 Move X0, X19
	009 Call AnglerController.set_phase, X0, X1
	010 Move V0, [X19+384]
	011 Move X0, X19
	012 Call AnglerController.set_timerAroundLight, X0, V0
	013 Move V0, [X19+388]
	014 Move X0, X19
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Call AnglerController.set_timerAnticipation, X0, V0
	018 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01CDCF38 MOV X1, X22
	0x01CDCF3C LDR X2, [X8]
	0x01CDCF40 BL 0x20B0E40
	0x01CDCF44 ADRP X8, 0x2271000
	0x01CDCF48 LDR X8, [X8 + 0x478]
	0x01CDCF4C MOV X20, X0
	0x01CDCF50 LDR X8, [X8]
	0x01CDCF54 LDR W9, [X8 + 0xE0]
	0x01CDCF58 CBNZ W9, 0x1CDCF64
	0x01CDCF5C MOV X0, X8
	0x01CDCF60 BL 0x1B6E8F8
	0x01CDCF64 MOV X0, X20
	0x01CDCF68 MOV X1, X31
	0x01CDCF6C MOV X2, X31
	0x01CDCF70 BL 0x3A9D6EC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.CopyStateToBackingFields, X0
	006 Move X0, X19
	007 Call AnglerController.get_phase, X0
	008 Move [X19+372], W0
	009 Move X0, X19
	010 Call AnglerController.get_timerAroundLight, X0
	011 Move X0, X19
	012 Move [X19+384], S0
	013 Call AnglerController.get_timerAnticipation, X0
	014 Move [X19+388], S0
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return 

Method: System.Void RPC_PlayAttackAnimation@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01CDCF74 TBZ X0, 0x0, 0x1CDCFB8
	0x01CDCF78 LDR X8, [X19]
	0x01CDCF7C MOV X0, X19
	0x01CDCF80 MOV X1, X20
	0x01CDCF84 LDR X9, [X8 + 0x338]
	0x01CDCF88 LDR X2, [X8 + 0x340]
	0x01CDCF8C BLR X9
	0x01CDCF90 CBZ X20, 0x1CDD038
	0x01CDCF94 MOV X0, X20
	0x01CDCF98 MOV X1, X31
	0x01CDCF9C BL 0x3A9B084
	0x01CDCFA0 CBZ X0, 0x1CDD038
	0x01CDCFA4 MOV X1, X31
	0x01CDCFA8 BL 0x3AA7658
	0x01CDCFAC MOV X0, X19
	0x01CDCFB0 BL 0x1CDD048
	0x01CDCFB4 B 0x1CDCFC0
	0x01CDCFB8 MOV X0, X19
	0x01CDCFBC BL 0x1CDD104
	0x01CDCFC0 LDRB W8, [X19 + 0xB5]
	0x01CDCFC4 CBZ W8, 0x1CDD024
	0x01CDCFC8 LDRB W8, [X19 + 0xB4]
	0x01CDCFCC CBZ W8, 0x1CDCFE8
	0x01CDCFD0 LDR X8, [X19]
	0x01CDCFD4 MOV X0, X19
	0x01CDCFD8 LDR X9, [X8 + 0x358]
	0x01CDCFDC LDR X1, [X8 + 0x360]
	0x01CDCFE0 BLR X9
	0x01CDCFE4 B 0x1CDD024
	0x01CDCFE8 LDR X8, [X19 + 0xB8]
	0x01CDCFEC CBZ X8, 0x1CDD038
	0x01CDCFF0 LDR X8, [X8 + 0x30]
	0x01CDCFF4 CBZ X8, 0x1CDD038
	0x01CDCFF8 LDR W9, [X8 + 0x18]
	0x01CDCFFC CBZ W9, 0x1CDD03C
	0x01CDD000 LDR X9, [X19]
	0x01CDD004 LDR V0, [X8 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2548000
	005 Move W8, [X20+1565]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2273000
	012 Move X0, [X0+3472]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X20+1565], W8
	016 Move W0, 1
	017 Move X1, X31
	018 Move W20, 1
	019 Call Assert.Check, X0
	020 Compare X19, 0
	021 JumpIfEqual {42}
	022 Move X9, 0x2273000
	023 Move X9, [X9+3472]
	024 Move [X19+88], W20
	025 Move X8, [X19]
	026 Move X1, [X9]
	027 Move W10, [X8+304]
	028 Move W9, [X1+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, [X8+200]
	031 Add X8, X8, X9
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Call AnglerController.RPC_PlayAttackAnimation, X0
	039 Return 
	040 Move X0, X19
	041 Call 0x1B6FCDC
	042 Call 0x1B6FA1C

