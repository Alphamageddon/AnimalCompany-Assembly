Type: AnimalCompany.AnalyticTrigger

Method: System.Void Start()

Disassembly:
	0x01CD0C28 LDR X2, [X8 + 0x560]
	0x01CD0C2C BLR X9
	0x01CD0C30 LDR X8, [X20 + 0x30]
	0x01CD0C34 MOVZ W9, 0x1
	0x01CD0C38 STR W9, [X19 + 0x10]
	0x01CD0C3C STR X8, [X19 + 0x18]
	0x01CD0C40 CMP W23, 0x2
	0x01CD0C44 LDP X20, X19, [X31 + 0x40]
	0x01CD0C48 LDP X22, X21, [X31 + 0x30]
	0x01CD0C4C LDP X24, X23, [X31 + 0x20]
	0x01CD0C50 LDR X30, [X31 + 0x10]
	0x01CD0C54 CSET W0, CC
	0x01CD0C58 ADD X31, X31, 0x50
	0x01CD0C5C RET
	0x01CD0C60 BL 0x1B6EA24
	0x01CD0C64 BL 0x1B6EA1C
	0x01CD0C68 BL 0x1B6EA40
	0x01CD0C6C MOV X1, X31
	0x01CD0C70 BL 0x1B6E8E8
	0x01CD0C74 LDR X0, [X0 + 0x18]
	0x01CD0C78 RET
	0x01CD0C7C STP X30, X19, [X31 - 0x10]!
	0x01CD0C80 ADRP X0, 0x227D000
	0x01CD0C84 LDR X0, [X0 + 0x990]
	0x01CD0C88 BL 0x1B6E804
	0x01CD0C8C BL 0x1B6EA0C
	0x01CD0C90 MOV X1, X31
	0x01CD0C94 MOV X19, X0
	0x01CD0C98 BL 0x31E99B4
	0x01CD0C9C ADRP X0, 0x227F000
	0x01CD0CA0 LDR X0, [X0 + 0xA08]
	0x01CD0CA4 BL 0x1B6E804
	0x01CD0CA8 MOV X1, X0
	0x01CD0CAC MOV X0, X19
	0x01CD0CB0 BL 0x1B6E8E8
	0x01CD0CB4 LDR X0, [X0 + 0x18]
	0x01CD0CB8 RET
	0x01CD0CBC STR W1, [X0 + 0x20]
	0x01CD0CC0 RET
	0x01CD0CC4 STP X30, X19, [X31 - 0x10]!
	0x01CD0CC8 MOV X19, X0
	0x01CD0CCC FMOV S0, 0.5
	0x01CD0CD0 FMOV S1, 0.5
	0x01CD0CD4 FMOV S2, 0.5
	0x01CD0CD8 FMOV S3, 0.5
	0x01CD0CDC MOV X0, X31
	0x01CD0CE0 BL 0x3A75B14
	0x01CD0CE4 MOV X0, X19
	0x01CD0CE8 MOV X1, X31
	0x01CD0CEC BL 0x3A9B084
	0x01CD0CF0 CBZ X0, 0x1CD0D10
	0x01CD0CF4 MOV X1, X31
	0x01CD0CF8 BL 0x3AA7658
	0x01CD0CFC ADRP X8, 0xFFFFFFFFFEDD9000
	0x01CD0D00 LDR V3, [X8 + 0xAB0]
	0x01CD0D04 MOV X0, X31
	0x01CD0D08 LDP X30, X19, [X31], #0x10
	0x01CD0D0C B 0x3A7571C
	0x01CD0D10 BL 0x1B6EA1C
	0x01CD0D14 MOV X1, X31
	0x01CD0D18 B 0x3A9EEE4
	0x01CD0D1C SUB X31, X31, 0x80
	0x01CD0D20 STP D11, D10, [X31 + 0x30]
	0x01CD0D24 STP D9, D8, [X31 + 0x40]
	0x01CD0D28 STR X30, [X31 + 0x50]
	0x01CD0D2C STP X22, X21, [X31 + 0x60]
	0x01CD0D30 STP X20, X19, [X31 + 0x70]
	0x01CD0D34 STR D6, [X31]
	0x01CD0D38 STR D1, [X31 + 0x10]
	0x01CD0D3C ADRP X22, 0x2553000
	0x01CD0D40 ADRP X21, 0x227F000
	0x01CD0D44 LDRB W8, [X22 + 0x5CE]
	0x01CD0D48 LDR X21, [X21 + 0x2D0]
	0x01CD0D4C MOV X19, X1
	0x01CD0D50 MOV V9.16B, V5.16B
	0x01CD0D54 MOV V10.16B, V4.16B
	0x01CD0D58 MOV V11.16B, V3.16B
	0x01CD0D5C MOV V8.16B, V2.16B
	0x01CD0D60 MOV X20, X0
	0x01CD0D64 STR V0, [X31 + 0x2]
	0x01CD0D68 TBNZ X8, 0x0, 0x1CD0D84
	0x01CD0D6C ADRP X0, 0x227F000
	0x01CD0D70 LDR X0, [X0 + 0x2D0]
	0x01CD0D74 BL 0x1B6E7F0
	0x01CD0D78 LDR V0, [X31 + 0x2]
	0x01CD0D7C MOVZ W8, 0x1
	0x01CD0D80 STRB W8, [X22 + 0x5CE]
	0x01CD0D84 STR S0, [X20]
	0x01CD0D88 LDR V0, [X31 + 0x1]
	0x01CD0D8C STP S11, S10, [X20 + 0xC]
	0x01CD0D90 STR S9, [X20 + 0x14]
	0x01CD0D94 MOVZ W1, 0x2
	0x01CD0D98 STP S0, S8, [X20 + 0x4]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2554000
	007 Move W8, [X20+1477]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {33}
	013 Move X0, 0x2280000
	014 Move X0, [X0+2336]
	015 Call 0x1B6F7F0
	016 Move X0, 0x227E000
	017 Move X0, [X0+1576]
	018 Call 0x1B6F7F0
	019 Move X0, 0x2280000
	020 Move X0, [X0+2344]
	021 Call 0x1B6F7F0
	022 Move X0, 0x2280000
	023 Move X0, [X0+2352]
	024 Call 0x1B6F7F0
	025 Move X0, 0x2280000
	026 Move X0, [X0+2360]
	027 Call 0x1B6F7F0
	028 Move X0, 0x2280000
	029 Move X0, [X0+2368]
	030 Call 0x1B6F7F0
	031 Move W8, 1
	032 Move [X20+1477], W8
	033 Move [X31+8], X31
	034 Move X0, [X19+32]
	035 Move X22, 0x227E000
	036 Move X21, 0x2280000
	037 Move X20, 0x2280000
	038 Move X22, [X22+1576]
	039 Move X21, [X21+2360]
	040 Move X20, [X20+2368]
	041 Move X1, X31
	042 Call String.IsNullOrEmpty, X0
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {59}
	047 Move X0, [X22]
	048 Move X22, 0x2280000
	049 Move W8, [X0+224]
	050 Move X22, [X22+2344]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1B6F8F8
	054 Move X1, [X22]
	055 Move X3, [X21]
	056 Move X4, [X20]
	057 Move W0, 16
	058 Move W5, 38
	059 Move X0, X19
	060 Move X1, X31
	061 Call Component.get_gameObject, X0
	062 Compare X0, 0
	063 JumpIfEqual {108}
	064 Move W1, 20
	065 Move X2, X31
	066 Call GameObject.set_layer, X0, X1
	067 Move X8, 0x2280000
	068 Move X8, [X8+2336]
	069 Add X1, X31, 8
	070 Move X0, X19
	071 Move X2, [X8]
	072 Call 0x2091EE4, X0, X1
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {83}
	077 Move X0, [X31+8]
	078 Compare X0, 0
	079 JumpIfEqual {108}
	080 Move W1, 1
	081 Move X2, X31
	082 Call Collider.set_isTrigger, X0, X1
	083 Move X0, [X22]
	084 Move W8, [X0+224]
	085 Compare W8, 0
	086 JumpIfNotEqual {88}
	087 Call 0x1B6F8F8
	088 Move X8, 0x2280000
	089 Move X8, [X8+2352]
	090 Move X3, [X21]
	091 Move X4, [X20]
	092 Move W0, 16
	093 Move X1, [X8]
	094 Move W5, 50
	095 Move X2, X31
	096 Move X6, X31
	097 Call Log.Warning, X0, X1, X2, X3, X4, X5
	098 Move X0, X19
	099 Move W1, W31
	100 Move X2, X31
	101 Call Behaviour.set_enabled, X0, X1
	102 Move X20, [X31+32]
	103 Move X19, [X31+40]
	104 Move X22, [X31+16]
	105 Move X21, [X31+24]
	106 Move X30, [X31+48]
	107 Return 
	108 Call 0x1B6FA1C

Method: System.Void OnTriggerEnter(UnityEngine.Collider other)

Disassembly:
	0x01CD0D9C LDR X0, [X21]
	0x01CD0DA0 BL 0x1B6E868
	0x01CD0DA4 STR X0, [X20 + 0x18]
	0x01CD0DA8 LDR X0, [X21]
	0x01CD0DAC MOVZ W1, 0x2
	0x01CD0DB0 BL 0x1B6E868
	0x01CD0DB4 STR X0, [X20 + 0x20]
	0x01CD0DB8 CBZ X19, 0x1CD0F44
	0x01CD0DBC LDR W8, [X19 + 0x18]
	0x01CD0DC0 CBZ W8, 0x1CD0F40
	0x01CD0DC4 LDR X8, [X20 + 0x18]
	0x01CD0DC8 CBZ X8, 0x1CD0F44
	0x01CD0DCC LDR W9, [X8 + 0x18]
	0x01CD0DD0 CBZ W9, 0x1CD0F40
	0x01CD0DD4 LDR V0, [X19 + 0x20]
	0x01CD0DD8 LDR V1, [X19 + 0x28]
	0x01CD0DDC STR D0, [X8 + 0x20]
	0x01CD0DE0 STR S1, [X8 + 0x28]
	0x01CD0DE4 LDR W8, [X19 + 0x18]
	0x01CD0DE8 CBZ W8, 0x1CD0F40
	0x01CD0DEC ADRP X22, 0x2553000
	0x01CD0DF0 LDP V1, V0, [X31 + 0x10]
	0x01CD0DF4 LDR V9, [X19 + 0x20]
	0x01CD0DF8 LDRB W8, [X22 + 0x441]
	0x01CD0DFC LDR V11, [X19 + 0x28]
	0x01CD0E00 MOV V0.S[1], V1.S[0]
	0x01CD0E04 CBNZ W8, 0x1CD0E24
	0x01CD0E08 ADRP X0, 0x227D000
	0x01CD0E0C LDR X0, [X0 + 0x488]
	0x01CD0E10 STR V0, [X31 + 0x2]
	0x01CD0E14 BL 0x1B6E7F0
	0x01CD0E18 LDR V0, [X31 + 0x2]
	0x01CD0E1C MOVZ W8, 0x1
	0x01CD0E20 STRB W8, [X22 + 0x441]
	0x01CD0E24 ADRP X8, 0x227D000
	0x01CD0E28 LDR X8, [X8 + 0x488]
	0x01CD0E2C FSUB V10.2S, V0.2S, V9.2S
	0x01CD0E30 FSUB S9, S8, S11
	0x01CD0E34 LDR X0, [X8]
	0x01CD0E38 LDR W8, [X0 + 0xE0]
	0x01CD0E3C CBNZ W8, 0x1CD0E44
	0x01CD0E40 BL 0x1B6E8F8
	0x01CD0E44 ADRP X8, 0xFFFFFFFFFEDD9000
	0x00000000 INVALID
	0x01CD0E4C LDR V1, [X8 + 0xB64]
	0x01CD0E50 FADDP S0, V0.2S
	0x01CD0E54 FMUL S2, S9, S9
	0x01CD0E58 FADD S0, S2, S0
	0x01CD0E5C FSQRT S0, S0
	0x01CD0E60 FCMP S0, S1
	0x01CD0E64 B.LE 0x1CD0E78
	0x01CD0E68 UNIMPLEMENTED
	0x00000000 INVALID
	0x01CD0E70 FDIV S9, S9, S0
	0x01CD0E74 B 0x1CD0EB0
	0x01CD0E78 ADRP X22, 0x2553000
	0x01CD0E7C LDRB W8, [X22 + 0x43F]
	0x01CD0E80 CBNZ W8, 0x1CD0E98
	0x01CD0E84 ADRP X0, 0x227D000
	0x01CD0E88 LDR X0, [X0 + 0x480]
	0x01CD0E8C BL 0x1B6E7F0
	0x01CD0E90 MOVZ W8, 0x1
	0x01CD0E94 STRB W8, [X22 + 0x43F]
	0x01CD0E98 ADRP X8, 0x227D000
	0x01CD0E9C LDR X8, [X8 + 0x480]
	0x01CD0EA0 LDR X8, [X8]
	0x01CD0EA4 LDR X8, [X8 + 0xB8]
	0x01CD0EA8 LDR V8, [X8]
	0x01CD0EAC LDR V9, [X8 + 0x8]
	0x01CD0EB0 LDR X0, [X21]
	0x01CD0EB4 MOVZ W1, 0x2
	0x01CD0EB8 BL 0x1B6E868
	0x01CD0EBC LDR W8, [X19 + 0x18]
	0x01CD0EC0 CBZ W8, 0x1CD0F40
	0x01CD0EC4 CBZ X0, 0x1CD0F44
	0x01CD0EC8 LDR W8, [X0 + 0x18]
	0x01CD0ECC CBZ W8, 0x1CD0F40
	0x01CD0ED0 LDR V1, [X31]
	0x01CD0ED4 LDR V2, [X19 + 0x20]
	0x01CD0ED8 LDR V3, [X19 + 0x28]
	0x00000000 INVALID
	0x01CD0EE0 FMUL S1, S9, S1
	0x01CD0EE4 FADD V2.2S, V0.2S, V2.2S
	0x01CD0EE8 FADD S3, S1, S3
	0x01CD0EEC STR D2, [X0 + 0x20]
	0x01CD0EF0 STR S3, [X0 + 0x28]
	0x01CD0EF4 LDR W9, [X19 + 0x18]
	0x01CD0EF8 CMP W9, 0x1
	0x01CD0EFC B.LS 0x1CD0F40
	0x01CD0F00 CMP W8, 0x1
	0x01CD0F04 B.LS 0x1CD0F40
	0x01CD0F08 LDR V2, [X19 + 0x34]
	0x01CD0F0C LDUR V3, [X19 + 0x2C]
	0x01CD0F10 LDP X22, X21, [X31 + 0x60]
	0x01CD0F14 LDR X30, [X31 + 0x50]
	0x01CD0F18 FSUB S1, S2, S1
	0x01CD0F1C FSUB V0.2S, V3.2S, V0.2S
	0x01CD0F20 STUR D0, [X0 + 0x2C]
	0x01CD0F24 STR S1, [X0 + 0x34]
	0x01CD0F28 STR X0, [X20 + 0x20]
	0x01CD0F2C LDP X20, X19, [X31 + 0x70]
	0x01CD0F30 LDP D9, D8, [X31 + 0x40]
	0x01CD0F34 LDP D11, D10, [X31 + 0x30]
	0x01CD0F38 ADD X31, X31, 0x80
	0x01CD0F3C RET
	0x01CD0F40 BL 0x1B6EA24
	0x01CD0F44 BL 0x1B6EA1C
	0x01CD0F48 STR D10, [X31 - 0x30]!
	0x01CD0F4C STP D9, D8, [X31 + 0x10]
	0x01CD0F50 STP X30, X19, [X31 + 0x20]
	0x01CD0F54 MOV X1, X31
	0x01CD0F58 MOV X19, X0
	0x01CD0F5C BL 0x3A9B084
	0x01CD0F60 CBZ X0, 0x1CD0FBC
	0x01CD0F64 MOV X1, X31
	0x01CD0F68 BL 0x3AA7658
	0x01CD0F6C MOV X0, X19
	0x01CD0F70 MOV X1, X31
	0x01CD0F74 MOV V8.16B, V0.16B
	0x01CD0F78 MOV V9.16B, V1.16B
	0x01CD0F7C MOV V10.16B, V2.16B
	0x01CD0F80 BL 0x3A9B084
	0x01CD0F84 CBZ X0, 0x1CD0FBC
	0x01CD0F88 MOV X1, X31
	0x01CD0F8C BL 0x3AA5FBC
	0x01CD0F90 LDP S4, S5, [X19 + 0x24]
	0x01CD0F94 LDR V6, [X19 + 0x2C]
	0x01CD0F98 MOV X0, X31
	0x01CD0F9C BL 0x3A92D64
	0x01CD0FA0 FADD S0, S8, S0
	0x01CD0FA4 FADD S1, S9, S1
	0x01CD0FA8 LDP X30, X19, [X31 + 0x20]
	0x01CD0FAC LDP D9, D8, [X31 + 0x10]
	0x01CD0FB0 FADD S2, S10, S2
	0x01CD0FB4 LDR V10, [X31], #0x30
	0x01CD0FB8 RET
	0x01CD0FBC BL 0x1B6EA1C
	0x01CD0FC0 STP D11, D10, [X31 - 0x30]!
	0x01CD0FC4 STP D9, D8, [X31 + 0x10]
	0x01CD0FC8 STP X30, X19, [X31 + 0x20]
	0x01CD0FCC LDR W8, [X0 + 0x20]
	0x01CD0FD0 CMP W8, 0x2
	0x01CD0FD4 B.EQ 0x1CD1044
	0x01CD0FD8 CMP W8, 0x1
	0x01CD0FDC B.EQ 0x1CD10A4
	0x01CD0FE0 CBNZ W8, 0x1CD1124
	0x01CD0FE4 MOV X1, X31
	0x01CD0FE8 BL 0x3A9B084
	0x01CD0FEC CBZ X0, 0x1CD116C
	0x01CD0FF0 MOV X1, X31
	0x01CD0FF4 BL 0x3AA5FBC
	0x01CD0FF8 ADRP X19, 0x2553000
	0x01CD0FFC LDRB W8, [X19 + 0x50F]
	0x01CD1000 MOV V8.16B, V0.16B
	0x01CD1004 MOV V9.16B, V1.16B
	0x01CD1008 MOV V10.16B, V2.16B
	0x01CD100C MOV V11.16B, V3.16B
	0x01CD1010 CBNZ W8, 0x1CD1028
	0x01CD1014 ADRP X0, 0x227C000
	0x01CD1018 LDR X0, [X0 + 0x480]
	0x01CD101C BL 0x1B6E7F0
	0x01CD1020 MOVZ W8, 0x1
	0x01CD1024 STRB W8, [X19 + 0x50F]
	0x01CD1028 ADRP X8, 0x227C000
	0x01CD102C LDR X8, [X8 + 0x480]
	0x01CD1030 LDR X8, [X8]
	0x01CD1034 LDR X8, [X8 + 0xB8]
	0x01CD1038 LDP S4, S5, [X8 + 0x48]
	0x01CD103C LDR V6, [X8 + 0x50]
	0x01CD1040 B 0x1CD1100
	0x01CD1044 MOV X1, X31
	0x01CD1048 BL 0x3A9B084
	0x01CD104C CBZ X0, 0x1CD116C
	0x01CD1050 MOV X1, X31
	0x01CD1054 BL 0x3AA5FBC
	0x01CD1058 ADRP X19, 0x2552000
	0x01CD105C LDRB W8, [X19 + 0x442]
	0x01CD1060 MOV V8.16B, V0.16B
	0x01CD1064 MOV V9.16B, V1.16B
	0x01CD1068 MOV V10.16B, V2.16B
	0x01CD106C MOV V11.16B, V3.16B
	0x01CD1070 CBNZ W8, 0x1CD1088
	0x01CD1074 ADRP X0, 0x227C000
	0x01CD1078 LDR X0, [X0 + 0x480]
	0x01CD107C BL 0x1B6E7F0
	0x01CD1080 MOVZ W8, 0x1
	0x01CD1084 STRB W8, [X19 + 0x442]
	0x01CD1088 ADRP X8, 0x227C000
	0x01CD108C LDR X8, [X8 + 0x480]
	0x01CD1090 LDR X8, [X8]
	0x01CD1094 LDR X8, [X8 + 0xB8]
	0x01CD1098 LDP S4, S5, [X8 + 0x18]
	0x01CD109C LDR V6, [X8 + 0x20]
	0x01CD10A0 B 0x1CD1100
	0x01CD10A4 MOV X1, X31
	0x01CD10A8 BL 0x3A9B084
	0x01CD10AC CBZ X0, 0x1CD116C
	0x01CD10B0 MOV X1, X31
	0x01CD10B4 BL 0x3AA5FBC
	0x01CD10B8 ADRP X19, 0x2552000
	0x01CD10BC LDRB W8, [X19 + 0x511]
	0x01CD10C0 MOV V8.16B, V0.16B

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+72], X23
	004 Move [X31+80], X22
	005 Move [X31+88], X21
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 Move X21, 0x2554000
	009 Move W8, [X21+1478]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {57}
	016 Move X0, 0x2280000
	017 Move X0, [X0+2376]
	018 Call 0x1B6F7F0
	019 Move X0, 0x227E000
	020 Move X0, [X0+2464]
	021 Call 0x1B6F7F0
	022 Move X0, 0x227E000
	023 Move X0, [X0+2480]
	024 Call 0x1B6F7F0
	025 Move X0, 0x2280000
	026 Move X0, [X0+2384]
	027 Call 0x1B6F7F0
	028 Move X0, 0x2280000
	029 Move X0, [X0+2392]
	030 Call 0x1B6F7F0
	031 Move X0, 0x2280000
	032 Move X0, [X0+2400]
	033 Call 0x1B6F7F0
	034 Move X0, 0x227E000
	035 Move X0, [X0+1528]
	036 Call 0x1B6F7F0
	037 Move X0, 0x227F000
	038 Move X0, [X0+1984]
	039 Call 0x1B6F7F0
	040 Move X0, 0x227F000
	041 Move X0, [X0+1992]
	042 Call 0x1B6F7F0
	043 Move X0, 0x2280000
	044 Move X0, [X0+2408]
	045 Call 0x1B6F7F0
	046 Move X0, 0x2280000
	047 Move X0, [X0+2416]
	048 Call 0x1B6F7F0
	049 Move X0, 0x2280000
	050 Move X0, [X0+2424]
	051 Call 0x1B6F7F0
	052 Move X0, 0x2280000
	053 Move X0, [X0+2432]
	054 Call 0x1B6F7F0
	055 Move W8, 1
	056 Move [X21+1478], W8
	057 Compare X20, 0
	058 JumpIfEqual {232}
	059 Move X8, 0x2280000
	060 Move X8, [X8+2432]
	061 Move X0, X20
	062 Move X2, X31
	063 Move X1, [X8]
	064 Call Component.CompareTag, X0, X1
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {224}
	069 Move W8, [X19+40]
	070 Compare W8, 0
	071 JumpIfNotEqual {93}
	072 Move X20, 0x2280000
	073 Move X20, [X20+2376]
	074 Move X0, [X20]
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {80}
	078 Call 0x1B6F8F8
	079 Move X0, [X20]
	080 Move X8, [X0+184]
	081 Move X0, [X8]
	082 Compare X0, 0
	083 JumpIfEqual {232}
	084 Move X8, 0x2280000
	085 Move X1, [X19+32]
	086 Move X8, [X8+2384]
	087 Move X2, [X8]
	088 Call Dictionary`2<Object, Int32>.ContainsKey, X0, X1
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfEqual {224}
	093 Move X22, 0x2280000
	094 Move X22, [X22+2376]
	095 Move X0, [X22]
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {101}
	099 Call 0x1B6F8F8
	100 Move X0, [X22]
	101 Move X8, [X0+184]
	102 Move X20, [X8]
	103 Compare X20, 0
	104 JumpIfEqual {232}
	105 Move X8, 0x2280000
	106 Move X21, [X19+32]
	107 Move X8, [X8+2384]
	108 Move X0, X20
	109 Move X1, X21
	110 Move X2, [X8]
	111 Call Dictionary`2<Object, Int32>.ContainsKey, X0, X1
	112 Move TEMP, X0
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfNotEqual {132}
	116 Move X0, [X22]
	117 Move W8, [X0+224]
	118 Compare W8, 0
	119 JumpIfNotEqual {122}
	120 Call 0x1B6F8F8
	121 Move X0, [X22]
	122 Move X8, [X0+184]
	123 Move X0, [X8]
	124 Compare X0, 0
	125 JumpIfEqual {232}
	126 Move X8, 0x2280000
	127 Move X1, [X19+32]
	128 Move X8, [X8+2392]
	129 Move X2, [X8]
	130 Call Dictionary`2<Object, Int32>.get_Item, X0, X1
	131 Add W2, W0, 1
	132 Move W2, 1
	133 Move X8, 0x2280000
	134 Move X8, [X8+2400]
	135 Move X0, X20
	136 Move X1, X21
	137 Move X3, [X8]
	138 Call Dictionary`2<Object, Int32>.set_Item, X0, X1, X2
	139 Move X8, 0x2280000
	140 Move X1, [X19+32]
	141 Move X8, [X8+2424]
	142 Move X2, X31
	143 Move X0, [X8]
	144 Call String.Concat, X0, X1
	145 Move X8, 0x227F000
	146 Move X8, [X8+1984]
	147 Move X20, X0
	148 Move W1, 2
	149 Move X8, [X8]
	150 Move X0, X8
	151 Call 0x1B6F868
	152 Move X9, 0x227E000
	153 Move W8, [X19+40]
	154 Move X9, [X9+2480]
	155 Move X21, X0
	156 Add X1, X31, 60
	157 Move [X31+60], W8
	158 Move X0, [X9]
	159 Call 0x1B6F900
	160 Move X8, 0x2280000
	161 Move X23, 0x227F000
	162 Move X8, [X8+2416]
	163 Move X23, [X23+1992]
	164 Move X2, X0
	165 Add X0, X31, 32
	166 Move X1, [X8]
	167 Move X3, [X23]
	168 Move [X31+32], X31
	169 Move [X31+40], X31
	170 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	171 Compare X21, 0
	172 JumpIfEqual {232}
	173 Move W8, [X21+24]
	174 Compare W8, 0
	175 JumpIfEqual {233}
	176 Move V0, [X31+2]
	177 Move [X21+2], V0
	178 Move X0, [X22]
	179 Move W8, [X0+224]
	180 Compare W8, 0
	181 JumpIfNotEqual {184}
	182 Call 0x1B6F8F8
	183 Move X0, [X22]
	184 Move X8, [X0+184]
	185 Move X0, [X8]
	186 Compare X0, 0
	187 JumpIfEqual {232}
	188 Move X8, 0x227F000
	189 Move X1, [X19+32]
	190 Move X8, [X8+2392]
	191 Move X2, [X8]
	192 Call Dictionary`2<Object, Int32>.get_Item, X0, X1
	193 Move X8, 0x227D000
	194 Move X8, [X8+1528]
	195 Move [X31+28], W0
	196 Add X1, X31, 28
	197 Move X8, [X8]
	198 Move X0, X8
	199 Call 0x1B6F900
	200 Move X8, 0x227F000
	201 Move X8, [X8+2408]
	202 Move X3, [X23]
	203 Move X2, X0
	204 Add X0, X31, 0
	205 Move X1, [X8]
	206 Move [X31], X31
	207 Move [X31+8], X31
	208 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	209 Move W8, [X21+24]
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move V0, [X31]
	212 Move X8, 0x227D000
	213 Move [X21+3], V0
	214 Move X8, [X8+2464]
	215 Move X0, [X8]
	216 Move W8, [X0+224]
	217 Compare W8, 0
	218 JumpIfNotEqual {220}
	219 Call 0x1B6F8F8
	220 Move X0, X20
	221 Move X1, X21
	222 Move X2, X31
	223 Call Analytics.Track, X0, X1
	224 Move X20, [X31+96]
	225 Move X19, [X31+104]
	226 Move X22, [X31+80]
	227 Move X21, [X31+88]
	228 Move X30, [X31+64]
	229 Move X23, [X31+72]
	230 Add X31, X31, 112
	231 Return 
	232 Call 0x1B6FA1C
	233 Call 0x1B6FA24

Method: System.Void .ctor()

Disassembly:
	0x01CD10C4 MOV V9.16B, V1.16B
	0x01CD10C8 MOV V10.16B, V2.16B
	0x01CD10CC MOV V11.16B, V3.16B
	0x01CD10D0 CBNZ W8, 0x1CD10E8

ISIL:
	001 Move W8, 1
	002 Move X1, X31
	003 Move [X0+41], W8
	004 Call MonoBehaviour..ctor, X0
	005 Return 

Method: System.Void .cctor()

Disassembly:
	0x01CD10D4 ADRP X0, 0x227C000
	0x01CD10D8 LDR X0, [X0 + 0x480]
	0x01CD10DC BL 0x1B6E7F0
	0x01CD10E0 MOVZ W8, 0x1
	0x01CD10E4 STRB W8, [X19 + 0x511]
	0x01CD10E8 ADRP X8, 0x227C000
	0x01CD10EC LDR X8, [X8 + 0x480]
	0x01CD10F0 LDR X8, [X8]
	0x01CD10F4 LDR X8, [X8 + 0xB8]
	0x01CD10F8 LDP S4, S5, [X8 + 0x3C]
	0x01CD10FC LDR V6, [X8 + 0x44]
	0x01CD1100 MOV V0.16B, V8.16B
	0x01CD1104 MOV V1.16B, V9.16B
	0x01CD1108 LDP X30, X19, [X31 + 0x20]
	0x01CD110C LDP D9, D8, [X31 + 0x10]
	0x01CD1110 MOV V2.16B, V10.16B
	0x01CD1114 MOV V3.16B, V11.16B
	0x01CD1118 MOV X0, X31
	0x01CD111C LDP D11, D10, [X31], #0x30
	0x01CD1120 B 0x3A92D64
	0x01CD1124 ADRP X19, 0x2552000
	0x01CD1128 LDRB W8, [X19 + 0x50F]
	0x01CD112C CBNZ W8, 0x1CD1144
	0x01CD1130 ADRP X0, 0x227C000
	0x01CD1134 LDR X0, [X0 + 0x480]
	0x01CD1138 BL 0x1B6E7F0
	0x01CD113C MOVZ W8, 0x1
	0x01CD1140 STRB W8, [X19 + 0x50F]
	0x01CD1144 ADRP X8, 0x227C000
	0x01CD1148 LDR X8, [X8 + 0x480]
	0x01CD114C LDP X30, X19, [X31 + 0x20]
	0x01CD1150 LDP D9, D8, [X31 + 0x10]
	0x01CD1154 LDR X8, [X8]
	0x01CD1158 LDR X8, [X8 + 0xB8]
	0x01CD115C LDP S0, S1, [X8 + 0x48]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2553000
	007 Move X22, 0x227F000
	008 Move X19, 0x227F000
	009 Move X20, 0x227F000
	010 Move W8, [X21+1479]
	011 Move X22, [X22+2440]
	012 Move X19, [X19+2448]
	013 Move X20, [X20+2376]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x227F000
	019 Move X0, [X0+2376]
	020 Call 0x1B6F7F0
	021 Move X0, 0x227F000
	022 Move X0, [X0+2448]
	023 Call 0x1B6F7F0
	024 Move X0, 0x227F000
	025 Move X0, [X0+2440]
	026 Call 0x1B6F7F0
	027 Move W8, 1
	028 Move [X21+1479], W8
	029 Move X0, [X22]
	030 Call 0x1B6FA0C
	031 Move X1, [X19]
	032 Move X19, X0
	033 Call Dictionary`2<Object, Int32>..ctor, X0
	034 Move X8, [X20]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X8, [X8+184]
	038 Move [X8], X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

