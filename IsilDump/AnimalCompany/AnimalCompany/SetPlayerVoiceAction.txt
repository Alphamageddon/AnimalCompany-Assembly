Type: AnimalCompany.SetPlayerVoiceAction

Method: System.Void .ctor(System.Int32 playerID, System.Single voice)

Disassembly:
	0x01DBA100 LDR X0, [X0 + 0xD20]
	0x01DBA104 BL 0x1C16CF4
	0x01DBA108 MOVZ W8, 0x1
	0x01DBA10C STRB W8, [X21 + 0xB31]
	0x01DBA110 LDR X0, [X23]
	0x01DBA114 LDR W8, [X0 + 0xE0]
	0x01DBA118 CBNZ W8, 0x1DBA124
	0x01DBA11C BL 0x1C16DFC
	0x01DBA120 LDR X0, [X23]
	0x01DBA124 LDR X8, [X0 + 0xB8]
	0x01DBA128 ADRP X24, 0x233D000
	0x01DBA12C LDR X21, [X8 + 0x8]
	0x01DBA130 LDR X24, [X24 + 0xD28]
	0x01DBA134 CBNZ X21, 0x1DBA188

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W19, W1
	006 Move X1, X31
	007 Move V8, V0
	008 Move X20, X0
	009 Call BaseAction..ctor, X0
	010 Move [X20+20], W19
	011 Move [X20+24], S8
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+8]
	015 Move V8, [X31+32]
	016 Return 

Method: System.Void Execute(AnimalCompany.AppState state)

Disassembly:
	0x01DBB42C ADRP X22, 0x2338000
	0x01DBB430 ADRP X20, 0x233C000
	0x01DBB434 ADRP X21, 0x2338000
	0x01DBB438 LDR X0, [X19 + 0x48]
	0x01DBB43C LDR X22, [X22 + 0x958]
	0x01DBB440 LDR X20, [X20 + 0xDB0]
	0x01DBB444 LDR X21, [X21 + 0x648]
	0x01DBB448 CBZ X0, 0x1DBB454
	0x01DBB44C MOV X1, X31
	0x01DBB450 BL 0x35B9B84
	0x01DBB454 LDR X0, [X22]
	0x01DBB458 BL 0x1C16F10
	0x01DBB45C LDR X2, [X20]
	0x01DBB460 MOV X1, X19
	0x01DBB464 MOV X3, X31
	0x01DBB468 MOV X20, X0
	0x01DBB46C BL 0x35BC6F0
	0x01DBB470 MOV X0, X20
	0x01DBB474 MOV W1, W31
	0x01DBB478 MOV X2, X31
	0x01DBB47C BL 0x35BBFC4
	0x01DBB480 LDR X8, [X21]
	0x01DBB484 MOV X20, X0
	0x01DBB488 LDR W9, [X8 + 0xE0]
	0x01DBB48C CBNZ W9, 0x1DBB498
	0x01DBB490 MOV X0, X8
	0x01DBB494 BL 0x1C16DFC
	0x01DBB498 MOV X0, X20
	0x01DBB49C MOV W1, W31
	0x01DBB4A0 MOV X2, X31
	0x01DBB4A4 BL 0x1D35D6C
	0x01DBB4A8 STR X0, [X19 + 0x48]
	0x01DBB4AC LDP X20, X19, [X31 + 0x20]
	0x01DBB4B0 LDP X22, X21, [X31 + 0x10]
	0x01DBB4B4 LDR X30, [X31], #0x30
	0x01DBB4B8 RET
	0x01DBB4BC STR X30, [X31 - 0x30]!
	0x01DBB4C0 STP X22, X21, [X31 + 0x10]
	0x01DBB4C4 STP X20, X19, [X31 + 0x20]
	0x01DBB4C8 ADRP X21, 0x261D000
	0x01DBB4CC LDRB W8, [X21 + 0xB44]
	0x01DBB4D0 MOV X20, X2
	0x01DBB4D4 MOV X19, X1

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x261E000
	007 Move W8, [X21+2869]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x233D000
	015 Move X0, [X0+3416]
	016 Call 0x1C17CF4
	017 Move X0, 0x233D000
	018 Move X0, [X0+3432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2869], W8
	022 Move [X31+8], X31
	023 Compare X20, 0
	024 JumpIfEqual {58}
	025 Move X8, [X20+224]
	026 Compare X8, 0
	027 JumpIfEqual {58}
	028 Move X0, [X8+128]
	029 Compare X0, 0
	030 JumpIfEqual {58}
	031 Move X8, 0x233D000
	032 Move X8, [X8+3416]
	033 Move W1, [X19+20]
	034 Add X2, X31, 8
	035 Move X3, [X8]
	036 Call 0x260832C, X0, X1, X2
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {52}
	041 Move X8, [X31+8]
	042 Compare X8, 0
	043 JumpIfEqual {58}
	044 Move X0, [X8+88]
	045 Compare X0, 0
	046 JumpIfEqual {58}
	047 Move X8, 0x233D000
	048 Move V0, [X19+24]
	049 Move X8, [X8+3432]
	050 Move X1, [X8]
	051 Call StatePrimitive`1<Single>.set_value, X0, V0
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X30, [X31+16]
	055 Move X21, [X31+24]
	056 Add X31, X31, 48
	057 Return 
	058 Call 0x1C17F20

