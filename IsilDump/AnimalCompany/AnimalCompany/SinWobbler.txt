Type: AnimalCompany.SinWobbler

Method: System.Void Start()

Disassembly:
	0x01D7BC94 ADRP X9, 0xFFFFFFFFFED6F000
	0x01D7BC98 LDR W0, [X19 + 0x5C]
	0x01D7BC9C LDR V0, [X8 + 0x10C]
	0x01D7BCA0 LDR V1, [X9 + 0xBC]
	0x01D7BCA4 MOV X1, X31
	0x01D7BCA8 BL 0x1DC2324
	0x01D7BCAC LDR X0, [X19 + 0x30]
	0x01D7BCB0 STR X31, [X19 + 0x40]
	0x01D7BCB4 CBZ X0, 0x1D7BCFC
	0x01D7BCB8 MOV X1, X31
	0x01D7BCBC BL 0x3C1341C
	0x01D7BCC0 CBZ X0, 0x1D7BCFC
	0x01D7BCC4 ADRP X8, 0x237A000
	0x01D7BCC8 LDR X8, [X8 + 0x680]
	0x01D7BCCC ADRP X9, 0xFFFFFFFFFED6E000
	0x01D7BCD0 LDR V0, [X9 + 0xFB8]
	0x01D7BCD4 LDP X20, X19, [X31 + 0x20]
	0x01D7BCD8 LDR X1, [X8]
	0x01D7BCDC LDP X22, X21, [X31 + 0x10]
	0x01D7BCE0 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Component.get_transform, X0
	006 Compare X0, 0
	007 JumpIfEqual {27}
	008 Move X1, X31
	009 Call Transform.get_localPosition, X0
	010 Move X0, X19
	011 Move X1, X31
	012 Move [X19+80], S0
	013 Move [X19+88], S1
	014 Move [X19+88], S2
	015 Call Component.get_transform, X0
	016 Compare X0, 0
	017 JumpIfEqual {27}
	018 Move X1, X31
	019 Call Transform.get_localRotation, X0
	020 Move [X19+92], S0
	021 Move [X19+100], S1
	022 Move [X19+100], S2
	023 Move [X19+108], S3
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Return 
	027 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01D7BCE4 LDR X30, [X31], #0x30
	0x01D7BCE8 B 0x3C15C58
	0x01D7BCEC LDP X20, X19, [X31 + 0x20]
	0x01D7BCF0 LDP X22, X21, [X31 + 0x10]
	0x01D7BCF4 LDR X30, [X31], #0x30
	0x01D7BCF8 RET
	0x01D7BCFC BL 0x1C16F20
	0x01D7BD00 MOVZ W8, 0x3E800000
	0x01D7BD04 MOVZ W9, 0x3F800000
	0x01D7BD08 MOV X1, X31
	0x01D7BD0C STR W8, [X0 + 0x58]
	0x01D7BD10 STR W9, [X0 + 0x60]
	0x01D7BD14 B 0x3C36C30
	0x01D7BD18 STR X30, [X31 - 0x40]!
	0x01D7BD1C STP X24, X23, [X31 + 0x10]
	0x01D7BD20 STP X22, X21, [X31 + 0x20]
	0x01D7BD24 STP X20, X19, [X31 + 0x30]
	0x01D7BD28 ADRP X23, 0x265D000
	0x01D7BD2C ADRP X24, 0x2378000
	0x01D7BD30 ADRP X19, 0x237B000
	0x01D7BD34 ADRP X22, 0x2378000
	0x01D7BD38 ADRP X21, 0x2378000
	0x01D7BD3C LDRB W8, [X23 + 0x949]
	0x01D7BD40 LDR X24, [X24 + 0xDA0]
	0x01D7BD44 LDR X19, [X19 + 0x448]
	0x01D7BD48 LDR X22, [X22 + 0xDB0]
	0x01D7BD4C LDR X21, [X21 + 0x648]
	0x01D7BD50 MOV X20, X0
	0x01D7BD54 TBNZ X8, 0x0, 0x1D7BD90
	0x01D7BD58 ADRP X0, 0x2378000
	0x01D7BD5C LDR X0, [X0 + 0x648]
	0x01D7BD60 BL 0x1C16CF4
	0x01D7BD64 ADRP X0, 0x2378000
	0x01D7BD68 LDR X0, [X0 + 0xDB0]
	0x01D7BD6C BL 0x1C16CF4
	0x01D7BD70 ADRP X0, 0x2378000
	0x01D7BD74 LDR X0, [X0 + 0xDA0]
	0x01D7BD78 BL 0x1C16CF4
	0x01D7BD7C ADRP X0, 0x237B000
	0x01D7BD80 LDR X0, [X0 + 0x448]
	0x01D7BD84 BL 0x1C16CF4
	0x01D7BD88 MOVZ W8, 0x1
	0x01D7BD8C STRB W8, [X23 + 0x949]
	0x01D7BD90 LDR X0, [X24]
	0x01D7BD94 BL 0x1C16F10
	0x01D7BD98 LDR X2, [X19]
	0x01D7BD9C MOV X1, X20
	0x01D7BDA0 MOV X3, X31
	0x01D7BDA4 MOV X19, X0
	0x01D7BDA8 BL 0x35C52F0
	0x01D7BDAC LDR X0, [X22]
	0x01D7BDB0 MOVZ W1, 0x1
	0x01D7BDB4 BL 0x1C16D6C
	0x01D7BDB8 LDR X8, [X21]
	0x01D7BDBC MOV X20, X0
	0x01D7BDC0 LDR W9, [X8 + 0xE0]
	0x01D7BDC4 CBNZ W9, 0x1D7BDD0
	0x01D7BDC8 MOV X0, X8
	0x01D7BDCC BL 0x1C16DFC
	0x01D7BDD0 ADRP X22, 0x265D000
	0x01D7BDD4 LDRB W8, [X22 + 0x787]
	0x01D7BDD8 CBNZ W8, 0x1D7BDF0
	0x01D7BDDC ADRP X0, 0x2378000
	0x01D7BDE0 LDR X0, [X0 + 0x648]
	0x01D7BDE4 BL 0x1C16CF4
	0x01D7BDE8 MOVZ W8, 0x1
	0x01D7BDEC STRB W8, [X22 + 0x787]
	0x01D7BDF0 LDR X0, [X21]
	0x01D7BDF4 LDR W8, [X0 + 0xE0]
	0x01D7BDF8 CBNZ W8, 0x1D7BE04
	0x01D7BDFC BL 0x1C16DFC
	0x01D7BE00 LDR X0, [X21]
	0x01D7BE04 LDR X8, [X0 + 0xB8]
	0x01D7BE08 LDR X8, [X8]
	0x01D7BE0C CBZ X8, 0x1D7BE6C
	0x01D7BE10 LDR X8, [X8 + 0xB8]
	0x01D7BE14 CBZ X8, 0x1D7BE6C
	0x01D7BE18 LDR X8, [X8 + 0x80]
	0x01D7BE1C CBZ X8, 0x1D7BE6C
	0x01D7BE20 CBZ X20, 0x1D7BE6C
	0x01D7BE24 LDR X21, [X8 + 0x50]
	0x01D7BE28 CBZ X21, 0x1D7BE40
	0x01D7BE2C LDR X8, [X20]
	0x01D7BE30 MOV X0, X21
	0x01D7BE34 LDR X1, [X8 + 0x40]
	0x01D7BE38 BL 0x1C16E00
	0x01D7BE3C CBZ X0, 0x1D7BE74
	0x01D7BE40 LDR W8, [X20 + 0x18]
	0x01D7BE44 CBZ W8, 0x1D7BE70
	0x01D7BE48 STR X21, [X20 + 0x20]
	0x01D7BE4C MOV X0, X19
	0x01D7BE50 MOV X1, X20
	0x01D7BE54 LDP X20, X19, [X31 + 0x30]
	0x01D7BE58 LDP X22, X21, [X31 + 0x20]
	0x01D7BE5C LDP X24, X23, [X31 + 0x10]
	0x01D7BE60 MOV X2, X31
	0x01D7BE64 LDR X30, [X31], #0x40
	0x01D7BE68 B 0x1D363F0
	0x01D7BE6C BL 0x1C16F20
	0x01D7BE70 BL 0x1C16F28
	0x01D7BE74 BL 0x1C16F44
	0x01D7BE78 MOV X1, X31
	0x01D7BE7C BL 0x1C16DEC
	0x01D7BE80 STP X30, X23, [X31 - 0x30]!
	0x01D7BE84 STP X22, X21, [X31 + 0x10]
	0x01D7BE88 STP X20, X19, [X31 + 0x20]
	0x01D7BE8C ADRP X22, 0x265D000
	0x01D7BE90 ADRP X23, 0x2378000
	0x01D7BE94 ADRP X20, 0x237B000
	0x01D7BE98 ADRP X21, 0x2378000
	0x01D7BE9C LDRB W8, [X22 + 0x94A]
	0x01D7BEA0 LDR X23, [X23 + 0xDA0]
	0x01D7BEA4 LDR X20, [X20 + 0x448]

ISIL:
	001 Move [X31-96], D15
	002 Move [X31-88], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X19, X0
	013 Move X0, X31
	014 Call Time.get_time
	015 Move S2, [X19+80]
	016 Move S10, [X19+84]
	017 Move S1, [X19+32]
	018 Move S14, [X19+36]
	019 Move V9, [X19+88]
	020 Move S11, [X19+40]
	021 Move S13, [X19+44]
	022 Move S15, [X19+48]
	023 Move S12, [X19+52]
	024 Move X0, X19
	025 Move X1, X31
	026 Move [X31+72], S1
	027 Move [X31+80], S2
	028 Move V8, V0
	029 Call Component.get_transform, X0
	030 Compare X0, 0
	031 JumpIfEqual {134}
	032 Multiply S0, S8, S12
	033 Move X20, X0
	034 Call 0x3EB2B70
	035 Multiply S0, S11, S0
	036 Add S9, S9, S0
	037 Multiply S0, S8, S15
	038 Call 0x3EB2B70
	039 Multiply S0, S14, S0
	040 Add S10, S10, S0
	041 Multiply S0, S8, S13
	042 Call 0x3EB2B70
	043 Move V1, [X31+72]
	044 Move X0, X20
	045 Move V2, V9
	046 Move X1, X31
	047 Multiply S0, S1, S0
	048 Move V1, [X31+76]
	049 Add S0, S1, S0
	050 Move V1, V10
	051 Call Transform.set_localPosition, X0, X1
	052 Move V0, [X19+68]
	053 Move V1, [X19+56]
	054 Move S13, [X19+92]
	055 Move S15, [X19+96]
	056 Move S12, [X19+100]
	057 Move S14, [X19+104]
	058 Multiply S0, S8, S0
	059 Move [X31+76], S1
	060 Call 0x3EB2B70
	061 Move [X31+72], S0
	062 Move V0, [X19+72]
	063 Move V11, [X19+60]
	064 Multiply S0, S8, S0
	065 Call 0x3EB2B70
	066 Move V10, V0
	067 Move V0, [X19+76]
	068 Move V9, [X19+64]
	069 Multiply S0, S8, S0
	070 Call 0x3EB2B70
	071 Move X8, -19464192
	072 Move S3, [X31+72]
	073 Move S1, [X31+76]
	074 Move V2, [X8+260]
	075 Multiply S4, S9, S0
	076 Move X0, X31
	077 Multiply S1, S1, S3
	078 Multiply S3, S11, S10
	079 Multiply S0, S1, S2
	080 Multiply S1, S3, S2
	081 Multiply S2, S4, S2
	082 Call Quaternion.Internal_FromEulerRad, X0
	083 Move X0, X19
	084 Move X1, X31
	085 Move V9, V0
	086 Move V8, V1
	087 Move V11, V2
	088 Move V10, V3
	089 Call Component.get_transform, X0
	090 Compare X0, 0
	091 JumpIfEqual {134}
	092 Multiply S0, S14, S10
	093 Multiply S1, S13, S9
	094 Multiply S2, S15, S8
	095 Multiply S3, S12, S11
	096 Multiply S4, S13, S8
	097 Multiply S5, S14, S11
	098 Multiply S6, S12, S10
	099 Multiply S7, S15, S9
	100 Multiply S16, S15, S10
	101 Multiply S17, S15, S11
	102 Multiply S18, S13, S11
	103 Multiply S19, S13, S10
	104 Multiply S20, S12, S9
	105 Multiply S21, S14, S9
	106 Multiply S22, S14, S8
	107 Multiply S23, S12, S8
	108 Move X20, [X31+80]
	109 Move X19, [X31+88]
	110 Move X30, [X31+64]
	111 Move D9, [X31+48]
	112 Move D8, [X31+56]
	113 Move D11, [X31+32]
	114 Move D10, [X31+40]
	115 Move D13, [X31+16]
	116 Move D12, [X31+24]
	117 Subtract S0, S0, S1
	118 Add S1, S5, S6
	119 Add S5, S22, S16
	120 Add S6, S21, S19
	121 Subtract S0, S0, S2
	122 Add S1, S4, S1
	123 Add S4, S20, S5
	124 Add S5, S17, S6
	125 Subtract S3, S0, S3
	126 Subtract S2, S1, S7
	127 Subtract S1, S4, S18
	128 Subtract S0, S5, S23
	129 Move X1, X31
	130 Move D15, [X31+96]
	131 Move D14, [X31+104]
	132 Call Transform.set_localRotation, X0, X1
	133 Return 
	134 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01D7BEA8 LDR X21, [X21 + 0x648]
	0x01D7BEAC MOV X19, X0
	0x01D7BEB0 TBNZ X8, 0x0, 0x1D7BEE0
	0x01D7BEB4 ADRP X0, 0x2378000
	0x01D7BEB8 LDR X0, [X0 + 0x648]
	0x01D7BEBC BL 0x1C16CF4
	0x01D7BEC0 ADRP X0, 0x2378000
	0x01D7BEC4 LDR X0, [X0 + 0xDA0]
	0x01D7BEC8 BL 0x1C16CF4
	0x01D7BECC ADRP X0, 0x237B000

ISIL:
	001 Move X8, -19456000
	002 Move X9, -19464192
	003 Move X10, -19460096
	004 Move V0, [X8+187]
	005 Move V1, [X9+142]
	006 Move V2, [X10+213]
	007 Move X1, X31
	008 Move [X0+32], V0
	009 Move [X0+40], V1
	010 Move [X0+4], V2
	011 Call MonoBehaviour..ctor, X0
	012 Return 

