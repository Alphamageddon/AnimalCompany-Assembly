Type: AnimalCompany.XRInputManager

Method: UnityEngine.XR.Interaction.Toolkit.XRController GetXRController(AnimalCompany.HandSide side)

Disassembly:
	0x01CCC374 BL 0x3173C38
	0x01CCC378 ADRP X0, 0x2283000
	0x01CCC37C LDR X0, [X0 + 0x728]
	0x01CCC380 BL 0x1B6E804
	0x01CCC384 MOV X1, X0
	0x01CCC388 MOV X0, X19
	0x01CCC38C BL 0x1B6E8E8
	0x01CCC390 SUB X31, X31, 0x110
	0x01CCC394 STR D14, [X31 + 0x90]
	0x01CCC398 STP D13, D12, [X31 + 0x98]
	0x01CCC39C STP D11, D10, [X31 + 0xA8]
	0x01CCC3A0 STP D9, D8, [X31 + 0xB8]
	0x01CCC3A4 STR X29, [X31 + 0xC8]
	0x01CCC3A8 STP X30, X25, [X31 + 0xD0]
	0x01CCC3AC STP X24, X23, [X31 + 0xE0]
	0x01CCC3B0 STP X22, X21, [X31 + 0xF0]
	0x01CCC3B4 STP X20, X19, [X31 + 0x100]
	0x01CCC3B8 ADRP X20, 0x2557000
	0x01CCC3BC ADRP X21, 0x2283000
	0x01CCC3C0 LDRB W8, [X20 + 0x59B]
	0x01CCC3C4 LDR X21, [X21 + 0x368]
	0x01CCC3C8 MOV V8.16B, V6.16B
	0x01CCC3CC MOV V9.16B, V5.16B
	0x01CCC3D0 MOV V10.16B, V4.16B
	0x01CCC3D4 MOV V11.16B, V3.16B
	0x01CCC3D8 MOV V12.16B, V2.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2558000
	006 Move X21, 0x2283000
	007 Move W8, [X20+1419]
	008 Move X21, [X21+1104]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2283000
	015 Move X0, [X0+1104]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1419], W8
	019 Move X8, [X21]
	020 Move X8, [X8+184]
	021 Move X8, [X8]
	022 Compare X8, 0
	023 JumpIfEqual {34}
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W9, 40
	026 Move W10, 32
	027 NotImplemented "Instruction CSEL not yet implemented."
	028 Move X0, [X8]
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return X0
	034 Call 0x1B6FA1C

Method: System.Void Awake()

Disassembly:
	0x01CCC3DC MOV V13.16B, V1.16B
	0x01CCC3E0 MOV V14.16B, V0.16B
	0x01CCC3E4 MOV W19, W0
	0x01CCC3E8 TBNZ X8, 0x0, 0x1CCC448
	0x01CCC3EC ADRP X0, 0x2282000
	0x01CCC3F0 LDR X0, [X0 + 0x248]
	0x01CCC3F4 BL 0x1B6E7F0
	0x01CCC3F8 ADRP X0, 0x2282000
	0x01CCC3FC LDR X0, [X0 + 0x250]
	0x01CCC400 BL 0x1B6E7F0
	0x01CCC404 ADRP X0, 0x2281000
	0x01CCC408 LDR X0, [X0 + 0x478]
	0x01CCC40C BL 0x1B6E7F0
	0x01CCC410 ADRP X0, 0x2282000
	0x01CCC414 LDR X0, [X0 + 0xB88]
	0x01CCC418 BL 0x1B6E7F0
	0x01CCC41C ADRP X0, 0x2283000
	0x01CCC420 LDR X0, [X0 + 0x368]
	0x01CCC424 BL 0x1B6E7F0
	0x01CCC428 ADRP X0, 0x2283000
	0x01CCC42C LDR X0, [X0 + 0x730]
	0x01CCC430 BL 0x1B6E7F0
	0x01CCC434 ADRP X0, 0x2283000
	0x01CCC438 LDR X0, [X0 + 0x738]
	0x01CCC43C BL 0x1B6E7F0
	0x01CCC440 MOVZ W8, 0x1
	0x01CCC444 STRB W8, [X20 + 0x59B]
	0x01CCC448 LDR X0, [X21]
	0x01CCC44C STP X31, X31, [X31 + 0x70]
	0x01CCC450 STR W31, [X31 + 0x80]
	0x01CCC454 STP X31, X31, [X31 + 0x50]
	0x01CCC458 STR W31, [X31 + 0x60]
	0x01CCC45C LDR W8, [X0 + 0xE0]
	0x01CCC460 CBNZ W8, 0x1CCC468
	0x01CCC464 BL 0x1B6E8F8
	0x01CCC468 MOV W0, W19
	0x01CCC46C BL 0x1CCC6A0
	0x01CCC470 LDR X8, [X21]
	0x01CCC474 LDR X8, [X8 + 0xB8]
	0x01CCC478 LDR X8, [X8 + 0x8]
	0x01CCC47C CBZ X8, 0x1CCC69C
	0x01CCC480 ADRP X9, 0x2281000
	0x01CCC484 LDR X9, [X9 + 0x478]
	0x01CCC488 MOV X19, X0
	0x01CCC48C LDR X20, [X8 + 0x48]
	0x01CCC490 LDR X0, [X9]
	0x01CCC494 LDR W9, [X0 + 0xE0]
	0x01CCC498 CBNZ W9, 0x1CCC4A0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2558000
	007 Move X21, 0x2283000
	008 Move X22, 0x2282000
	009 Move W8, [X20+1420]
	010 Move X21, [X21+1104]
	011 Move X22, [X22+1144]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2282000
	018 Move X0, [X0+1144]
	019 Call 0x1B6F7F0
	020 Move X0, 0x2283000
	021 Move X0, [X0+1104]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X20+1420], W8
	025 Move X8, [X21]
	026 Move X0, [X22]
	027 Move X8, [X8+184]
	028 Move W9, [X0+224]
	029 Move X20, [X8]
	030 Compare W9, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1B6F8F8
	033 Move X0, X20
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {50}
	041 Move X8, [X21]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X8, [X8+184]
	045 Move [X8], X19
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X30, [X31+48]
	049 Return 
	050 Move X0, [X22]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1B6F8F8
	055 Move X0, X19
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move X1, X31
	061 Move X30, [X31+48]
	062 Call Object.Destroy, X0
	063 Return 

Method: System.Void OnDestroy()

Disassembly:
	0x01CCC49C BL 0x1B6E8F8
	0x01CCC4A0 MOV X0, X20
	0x01CCC4A4 MOV X1, X31
	0x01CCC4A8 MOV X2, X31
	0x01CCC4AC BL 0x3AA0AF0
	0x01CCC4B0 TBZ X0, 0x0, 0x1CCC514
	0x01CCC4B4 LDR X0, [X21]
	0x01CCC4B8 LDR W8, [X0 + 0xE0]
	0x01CCC4BC CBNZ W8, 0x1CCC4C8
	0x01CCC4C0 BL 0x1B6E8F8
	0x01CCC4C4 LDR X0, [X21]
	0x01CCC4C8 LDR X8, [X0 + 0xB8]
	0x01CCC4CC ADRP X22, 0x2557000
	0x01CCC4D0 LDRB W9, [X22 + 0x508]
	0x01CCC4D4 LDR X20, [X8 + 0x8]
	0x01CCC4D8 CBNZ W9, 0x1CCC4F0
	0x01CCC4DC ADRP X0, 0x2281000
	0x01CCC4E0 LDR X0, [X0 + 0xF78]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x2558000
	005 Move X20, 0x2283000
	006 Move W8, [X19+1421]
	007 Move X20, [X20+1104]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2283000
	013 Move X0, [X0+1104]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X19+1421], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move [X8], X31
	022 Move X30, [X31+32]
	023 Return 

Method: System.Void SendHapticImpulse(AnimalCompany.HandSide side, System.Single amplitude, System.Single duration)

Disassembly:
	0x01CC320C TBNZ X0, 0x0, 0x1CC34FC
	0x01CC3210 STR S10, [X31 + 0xC]
	0x01CC3214 ADRP X23, 0x228B000
	0x01CC3218 LDR X23, [X23 + 0x198]
	0x01CC321C MOV V10.16B, V9.16B
	0x01CC3220 LDR X0, [X23]
	0x01CC3224 LDR W8, [X0 + 0xE0]
	0x01CC3228 CBZ W8, 0x1CC3234
	0x01CC322C MOV V9.16B, V8.16B
	0x01CC3230 B 0x1CC3240
	0x01CC3234 MOV V9.16B, V8.16B
	0x01CC3238 BL 0x1B6E8F8
	0x01CC323C LDR X0, [X23]
	0x01CC3240 LDR X8, [X0 + 0xB8]
	0x01CC3244 ADRP X21, 0x2560000

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move V8, V1
	005 Move V9, V0
	006 Call XRInputManager.GetXRController, X0
	007 Compare X0, 0
	008 JumpIfEqual {18}
	009 Move X8, [X0]
	010 Move X30, [X31+16]
	011 Move V0, V9
	012 Move V1, V8
	013 Move X2, [X8+552]
	014 Move X1, [X8+560]
	015 Move D9, [X31+32]
	016 Move D8, [X31+40]
	017 CallNoReturn X2
	018 Call 0x1B6FA1C

Method: System.Void SendHapticImpulse(AnimalCompany.AttachedLocation location, System.Single amplitude, System.Single duration)

Disassembly:
	0x01CCC4E4 BL 0x1B6E7F0
	0x01CCC4E8 MOVZ W8, 0x1
	0x01CCC4EC STRB W8, [X22 + 0x508]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	004 Return 

Method: System.Void Update()

Disassembly:
	0x01CCC4F0 ADRP X8, 0x2281000
	0x01CCC4F4 LDR X8, [X8 + 0xF78]
	0x01CCC4F8 LDR X8, [X8]
	0x01CCC4FC LDR X8, [X8 + 0xB8]
	0x01CCC500 LDR X8, [X8 + 0x40]
	0x01CCC504 CBZ X8, 0x1CCC69C
	0x01CCC508 CBZ X20, 0x1CCC69C
	0x01CCC50C LDR X8, [X8 + 0x98]
	0x01CCC510 STR X8, [X20 + 0x48]
	0x01CCC514 LDR X0, [X21]
	0x01CCC518 LDR W8, [X0 + 0xE0]
	0x01CCC51C CBNZ W8, 0x1CCC528
	0x01CCC520 BL 0x1B6E8F8
	0x01CCC524 LDR X0, [X21]
	0x01CCC528 LDR X8, [X0 + 0xB8]
	0x01CCC52C LDR X8, [X8 + 0x8]
	0x01CCC530 CBZ X8, 0x1CCC69C
	0x01CCC534 ADRP X9, 0x2282000
	0x01CCC538 LDR X9, [X9 + 0x248]
	0x01CCC53C ADRP X21, 0x2282000
	0x01CCC540 LDR X21, [X21 + 0x250]
	0x01CCC544 ADRP X25, 0x2283000
	0x01CCC548 LDR X1, [X9]
	0x01CCC54C LDR X20, [X8 + 0x48]
	0x01CCC550 LDR X25, [X25 + 0x738]
	0x01CCC554 ADD X0, X31, 0x40
	0x01CCC558 MOV V0.16B, V14.16B
	0x01CCC55C MOV V1.16B, V13.16B
	0x01CCC560 MOV V2.16B, V12.16B
	0x01CCC564 STP X31, X31, [X31 + 0x40]
	0x01CCC568 BL 0x22DC630
	0x01CCC56C LDR X1, [X21]
	0x01CCC570 ADD X0, X31, 0x28
	0x01CCC574 MOV V0.16B, V11.16B
	0x01CCC578 MOV V1.16B, V10.16B
	0x01CCC57C MOV V2.16B, V9.16B
	0x01CCC580 MOV V3.16B, V8.16B
	0x01CCC584 STP X31, X31, [X31 + 0x28]
	0x01CCC588 STR W31, [X31 + 0x38]
	0x01CCC58C BL 0x22D82D0
	0x01CCC590 LDR X0, [X25]
	0x01CCC594 LDR W8, [X0 + 0xE0]
	0x01CCC598 CBNZ W8, 0x1CCC5A4
	0x01CCC59C BL 0x1B6E8F8
	0x01CCC5A0 LDR X0, [X25]
	0x01CCC5A4 LDR X8, [X0 + 0xB8]
	0x01CCC5A8 LDR X23, [X8 + 0x8]
	0x01CCC5AC CBZ X23, 0x1CCC5C0
	0x01CCC5B0 LDUR V0, [X31 + 0x28]
	0x01CCC5B4 LDR W8, [X31 + 0x38]
	0x01CCC5B8 LDP X21, X22, [X31 + 0x40]
	0x01CCC5BC B 0x1CCC62C
	0x01CCC5C0 LDUR V0, [X31 + 0x28]
	0x01CCC5C4 LDR W8, [X31 + 0x38]
	0x01CCC5C8 LDP X21, X22, [X31 + 0x40]
	0x01CCC5CC STR V0, [X31 + 0x5]
	0x01CCC5D0 STR W8, [X31 + 0x60]
	0x01CCC5D4 LDR W8, [X0 + 0xE0]
	0x01CCC5D8 CBNZ W8, 0x1CCC5E4
	0x01CCC5DC BL 0x1B6E8F8
	0x01CCC5E0 LDR X0, [X25]
	0x01CCC5E4 ADRP X9, 0x2282000
	0x01CCC5E8 LDR X8, [X0 + 0xB8]
	0x01CCC5EC LDR X9, [X9 + 0xB88]
	0x01CCC5F0 LDR X24, [X8]
	0x01CCC5F4 LDR X0, [X9]
	0x01CCC5F8 BL 0x1B6EA0C
	0x01CCC5FC ADRP X8, 0x2283000
	0x01CCC600 LDR X8, [X8 + 0x730]
	0x01CCC604 MOV X1, X24
	0x01CCC608 MOV X3, X31
	0x01CCC60C MOV X23, X0
	0x01CCC610 LDR X2, [X8]
	0x01CCC614 BL 0x1DA90FC
	0x01CCC618 LDR X8, [X25]
	0x01CCC61C LDR X8, [X8 + 0xB8]
	0x01CCC620 STR X23, [X8 + 0x8]
	0x01CCC624 LDR V0, [X31 + 0x5]
	0x01CCC628 LDR W8, [X31 + 0x60]
	0x01CCC62C STR V0, [X31 + 0x7]
	0x01CCC630 STR W8, [X31 + 0x80]
	0x01CCC634 CBZ X20, 0x1CCC69C
	0x01CCC638 LDR V0, [X31 + 0x7]
	0x01CCC63C LDR W8, [X31 + 0x80]
	0x01CCC640 ADD X4, X31, 0x10
	0x01CCC644 MOV X0, X20
	0x01CCC648 MOV X1, X19
	0x01CCC64C MOV X2, X21
	0x01CCC650 MOV X3, X22
	0x01CCC654 MOV X5, X31
	0x01CCC658 MOV X6, X23
	0x01CCC65C MOV W7, W31
	0x01CCC660 STR V0, [X31 + 0x1]
	0x01CCC664 STR W8, [X31 + 0x20]
	0x01CCC668 STR X31, [X31]
	0x01CCC66C BL 0x1D98EB8
	0x01CCC670 LDP X20, X19, [X31 + 0x100]
	0x01CCC674 LDP X22, X21, [X31 + 0xF0]
	0x01CCC678 LDP X24, X23, [X31 + 0xE0]
	0x01CCC67C LDP X30, X25, [X31 + 0xD0]
	0x01CCC680 LDR X29, [X31 + 0xC8]
	0x01CCC684 LDP D9, D8, [X31 + 0xB8]
	0x01CCC688 LDP D11, D10, [X31 + 0xA8]
	0x01CCC68C LDP D13, D12, [X31 + 0x98]
	0x01CCC690 LDR V14, [X31 + 0x90]
	0x01CCC694 ADD X31, X31, 0x110
	0x01CCC698 RET
	0x01CCC69C BL 0x1B6EA1C
	0x01CCC6A0 SUB X31, X31, 0x40
	0x01CCC6A4 STP X30, X21, [X31 + 0x20]
	0x01CCC6A8 STP X20, X19, [X31 + 0x30]
	0x01CCC6AC ADRP X20, 0x2557000
	0x01CCC6B0 ADRP X21, 0x2283000
	0x01CCC6B4 LDRB W8, [X20 + 0x59C]
	0x01CCC6B8 LDR X21, [X21 + 0x368]
	0x01CCC6BC MOV W19, W0
	0x01CCC6C0 TBNZ X8, 0x0, 0x1CCC720
	0x01CCC6C4 ADRP X0, 0x2283000
	0x01CCC6C8 LDR X0, [X0 + 0x740]
	0x01CCC6CC BL 0x1B6E7F0
	0x01CCC6D0 ADRP X0, 0x2283000
	0x01CCC6D4 LDR X0, [X0 + 0x748]
	0x01CCC6D8 BL 0x1B6E7F0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2558000
	006 Move X20, 0x2284000
	007 Move W8, [X21+1422]
	008 Move X20, [X20+1016]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x2284000
	015 Move X0, [X0+1016]
	016 Call 0x1B6F7F0
	017 Move X0, 0x2283000
	018 Move X0, [X0+1104]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X21+1422], W8
	022 Move X0, [X20]
	023 Move X21, 0x2283000
	024 Move W8, [X0+224]
	025 Move X21, [X21+1104]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1B6F8F8
	029 Move X0, [X20]
	030 Move X8, [X21]
	031 Move X9, [X0+184]
	032 Move X0, X19
	033 Move W1, W31
	034 Move X8, [X8+184]
	035 Move X2, [X9+8]
	036 Move X3, [X8+72]
	037 Move X4, [X8+80]
	038 Call XRInputManager.GetButtonEvent, X0, X1, X2, X3, X4
	039 Move X8, [X20]
	040 Move X9, [X21]
	041 Move W1, 1
	042 Move X0, X19
	043 Move X8, [X8+184]
	044 Move X9, [X9+184]
	045 Move X2, [X8+8]
	046 Move X3, [X9+88]
	047 Move X4, [X9+96]
	048 Call XRInputManager.GetButtonEvent, X0, X1, X2, X3, X4
	049 Move X8, [X20]
	050 Move X9, [X21]
	051 Move X0, X19
	052 Move W1, W31
	053 Move X8, [X8+184]
	054 Move X9, [X9+184]
	055 Move X2, [X8+40]
	056 Move X3, [X9+40]
	057 Move X4, [X9+48]
	058 Call XRInputManager.GetButtonEvent, X0, X1, X2, X3, X4
	059 Move X8, [X20]
	060 Move X9, [X21]
	061 Move W1, 1
	062 Move X0, X19
	063 Move X8, [X8+184]
	064 Move X9, [X9+184]
	065 Move X2, [X8+40]
	066 Move X3, [X9+56]
	067 Move X4, [X9+64]
	068 Call XRInputManager.GetButtonEvent, X0, X1, X2, X3, X4
	069 Move X8, [X20]
	070 Move X9, [X21]
	071 Move X0, X19
	072 Move W1, W31
	073 Move X8, [X8+184]
	074 Move X9, [X9+184]
	075 Move X2, [X8+48]
	076 Move X3, [X9+8]
	077 Move X4, [X9+16]
	078 Call XRInputManager.GetButtonEvent, X0, X1, X2, X3, X4
	079 Move X8, [X20]
	080 Move X9, [X21]
	081 Move W1, 1
	082 Move X0, X19
	083 Move X8, [X8+184]
	084 Move X9, [X9+184]
	085 Move X2, [X8+48]
	086 Move X3, [X9+24]
	087 Move X4, [X9+32]
	088 Call XRInputManager.GetButtonEvent, X0, X1, X2, X3, X4
	089 Move X8, [X20]
	090 Move X9, [X21]
	091 Move X0, X19
	092 Move W1, W31
	093 Move X8, [X8+184]
	094 Move X9, [X9+184]
	095 Move X2, [X8+24]
	096 Move X3, [X9+104]
	097 Move X4, [X9+112]
	098 Call XRInputManager.GetButtonEvent, X0, X1, X2, X3, X4
	099 Move X8, [X20]
	100 Move X9, [X21]
	101 Move W1, 1
	102 Move X0, X19
	103 Move X8, [X8+184]
	104 Move X9, [X9+184]
	105 Move X2, [X8+24]
	106 Move X3, [X9+120]
	107 Move X4, [X9+128]
	108 Call XRInputManager.GetButtonEvent, X0, X1, X2, X3, X4
	109 Move X8, [X20]
	110 Move X9, [X21]
	111 Move X0, X19
	112 Move W1, W31
	113 Move X8, [X8+184]
	114 Move X9, [X9+184]
	115 Move X2, [X8+64]
	116 Move X3, [X9+136]
	117 Move X4, [X9+144]
	118 Call XRInputManager.GetButtonEvent, X0, X1, X2, X3, X4
	119 Move X8, [X20]
	120 Move X9, [X21]
	121 Move W1, 1
	122 Move X0, X19
	123 Move X8, [X8+184]
	124 Move X9, [X9+184]
	125 Move X2, [X8+64]
	126 Move X3, [X9+152]
	127 Move X4, [X9+160]
	128 Call XRInputManager.GetButtonEvent, X0, X1, X2, X3, X4
	129 Move X8, [X20]
	130 Move X9, [X21]
	131 Move X0, X19
	132 Move X20, [X31+16]
	133 Move X19, [X31+24]
	134 Move X8, [X8+184]
	135 Move X9, [X9+184]
	136 Move W1, W31
	137 Move X2, [X8+56]
	138 Move X3, [X9+168]
	139 Move X4, [X9+176]
	140 Move X30, [X31+32]
	141 Move X21, [X31+40]

Method: System.Void GetButtonEvent(AnimalCompany.HandSide side, UnityEngine.XR.InputFeatureUsage`1<System.Boolean> inputFeatureUsage, System.Action onPressed, System.Action onReleased)

Disassembly:
	0x01CCC6DC ADRP X0, 0x2283000
	0x01CCC6E0 LDR X0, [X0 + 0x750]
	0x01CCC6E4 BL 0x1B6E7F0
	0x01CCC6E8 ADRP X0, 0x2283000
	0x01CCC6EC LDR X0, [X0 + 0x368]
	0x01CCC6F0 BL 0x1B6E7F0
	0x01CCC6F4 ADRP X0, 0x2283000
	0x01CCC6F8 LDR X0, [X0 + 0x758]
	0x01CCC6FC BL 0x1B6E7F0
	0x01CCC700 ADRP X0, 0x2283000
	0x01CCC704 LDR X0, [X0 + 0x760]
	0x01CCC708 BL 0x1B6E7F0
	0x01CCC70C ADRP X0, 0x2283000
	0x01CCC710 LDR X0, [X0 + 0x768]
	0x01CCC714 BL 0x1B6E7F0
	0x01CCC718 MOVZ W8, 0x1
	0x01CCC71C STRB W8, [X20 + 0x59C]
	0x01CCC720 LDR X0, [X21]
	0x01CCC724 LDR W8, [X0 + 0xE0]
	0x01CCC728 CBNZ W8, 0x1CCC734
	0x01CCC72C BL 0x1B6E8F8
	0x01CCC730 LDR X0, [X21]
	0x01CCC734 LDR X8, [X0 + 0xB8]
	0x01CCC738 LDR X0, [X8]
	0x01CCC73C CBZ X0, 0x1CCC834
	0x01CCC740 ADRP X8, 0x2283000
	0x01CCC744 LDR X8, [X8 + 0x748]
	0x01CCC748 MOV W1, W19
	0x01CCC74C LDR X2, [X8]
	0x01CCC750 BL 0x2894380
	0x01CCC754 TBNZ X0, 0x0, 0x1CCC7E8
	0x01CCC758 ADRP X8, 0x2283000
	0x01CCC75C LDR X8, [X8 + 0x758]
	0x01CCC760 MOVN X9, 0x0
	0x01CCC764 ADD X0, X31, 0x8
	0x01CCC768 MOV X1, X31
	0x01CCC76C LDR X8, [X8]
	0x01CCC770 STR W19, [X31 + 0x18]
	0x01CCC774 STP X8, X9, [X31 + 0x8]
	0x01CCC778 BL 0x321AF98
	0x01CCC77C ADRP X8, 0x2283000
	0x01CCC780 LDR X8, [X8 + 0x768]
	0x01CCC784 MOV X1, X0
	0x01CCC788 MOV X2, X31
	0x01CCC78C LDR X8, [X8]
	0x01CCC790 MOV X0, X8
	0x01CCC794 BL 0x3084780
	0x01CCC798 ADRP X8, 0x2283000
	0x01CCC79C LDR X8, [X8 + 0x760]
	0x01CCC7A0 LDR X1, [X8]
	0x01CCC7A4 BL 0x21293B0
	0x01CCC7A8 LDR X8, [X21]
	0x01CCC7AC MOV X20, X0
	0x01CCC7B0 LDR W9, [X8 + 0xE0]
	0x01CCC7B4 CBNZ W9, 0x1CCC7C4
	0x01CCC7B8 MOV X0, X8
	0x01CCC7BC BL 0x1B6E8F8
	0x01CCC7C0 LDR X8, [X21]
	0x01CCC7C4 LDR X8, [X8 + 0xB8]
	0x01CCC7C8 LDR X0, [X8]
	0x01CCC7CC CBZ X0, 0x1CCC834
	0x01CCC7D0 ADRP X8, 0x2283000
	0x01CCC7D4 LDR X8, [X8 + 0x740]
	0x01CCC7D8 MOV W1, W19
	0x01CCC7DC MOV X2, X20
	0x01CCC7E0 LDR X3, [X8]
	0x01CCC7E4 BL 0x289418C
	0x01CCC7E8 LDR X0, [X21]
	0x01CCC7EC LDR W8, [X0 + 0xE0]
	0x01CCC7F0 CBNZ W8, 0x1CCC7FC
	0x01CCC7F4 BL 0x1B6E8F8
	0x01CCC7F8 LDR X0, [X21]
	0x01CCC7FC LDR X8, [X0 + 0xB8]
	0x01CCC800 LDR X0, [X8]
	0x01CCC804 CBZ X0, 0x1CCC834
	0x01CCC808 ADRP X8, 0x2283000
	0x01CCC80C LDR X8, [X8 + 0x750]
	0x01CCC810 MOV W1, W19
	0x01CCC814 LDR X2, [X8]
	0x01CCC818 BL 0x28940EC
	0x01CCC81C CBZ X0, 0x1CCC834
	0x01CCC820 BL 0x1CCC838
	0x01CCC824 LDP X20, X19, [X31 + 0x30]
	0x01CCC828 LDP X30, X21, [X31 + 0x20]
	0x01CCC82C ADD X31, X31, 0x40
	0x01CCC830 RET
	0x01CCC834 BL 0x1B6EA1C
	0x01CCC838 STP X30, X19, [X31 - 0x10]!
	0x01CCC83C LDR X19, [X0 + 0x18]
	0x01CCC840 CBZ X19, 0x1CCC88C
	0x01CCC844 LDR W1, [X19 + 0x18]
	0x01CCC848 CBZ W1, 0x1CCC880
	0x01CCC84C CMP W1, 0x1
	0x01CCC850 MOV X8, X31
	0x01CCC854 B.EQ 0x1CCC874
	0x01CCC858 MOV W0, W31
	0x01CCC85C MOV X2, X31
	0x01CCC860 BL 0x3A98D10
	0x01CCC864 LDR W8, [X19 + 0x18]
	0x01CCC868 CMP W0, W8
	0x01CCC86C B.CS 0x1CCC890
	0x01CCC870 SXTW X8, W0

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X24, 0x2558000
	010 Move W8, [X24+1423]
	011 Move X19, X4
	012 Move X20, X3
	013 Move X21, X2
	014 Move W22, W1
	015 Move X23, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {34}
	020 Move X0, 0x2284000
	021 Move X0, [X0+1664]
	022 Call 0x1B6F7F0
	023 Move X0, 0x2284000
	024 Move X0, [X0+1672]
	025 Call 0x1B6F7F0
	026 Move X0, 0x2284000
	027 Move X0, [X0+1680]
	028 Call 0x1B6F7F0
	029 Move X0, 0x2284000
	030 Move X0, [X0+1688]
	031 Call 0x1B6F7F0
	032 Move W8, 1
	033 Move [X24+1423], W8
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move W8, 56
	036 Move W9, 48
	037 Move [X31+28], W31
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 Move X22, [X23]
	040 Move W8, 40
	041 Move W9, 32
	042 NotImplemented "Instruction CSEL not yet implemented."
	043 Compare X22, 0
	044 JumpIfEqual {120}
	045 Move X9, 0x2284000
	046 Move X9, [X9+1672]
	047 Move X23, [X23]
	048 Move X0, X22
	049 Move X1, X21
	050 Move X2, [X9]
	051 Call 0x2813BE8, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {63}
	056 Move X8, 0x2284000
	057 Move X8, [X8+1664]
	058 Move X0, X22
	059 Move X1, X21
	060 Move W2, W31
	061 Move X3, [X8]
	062 Call 0x28139E0, X0, X1, X2
	063 Compare X23, 0
	064 JumpIfEqual {120}
	065 Move X24, 0x2284000
	066 Move X24, [X24+1680]
	067 Move X0, X23
	068 Move X1, X31
	069 Call XRController.get_inputDevice, X0
	070 Move [X31], X0
	071 Move [X31+8], X1
	072 Add X0, X31, 0
	073 Add X2, X31, 28
	074 Move X1, X21
	075 Move X3, X31
	076 Call InputDevice.TryGetFeatureValue, X0, X1, X2
	077 Move X2, [X24]
	078 Move X0, X22
	079 Move X1, X21
	080 Call 0x2813934, X0, X1
	081 Move W8, [X31+28]
	082 And W9, W0, 1
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X9, 0x2284000
	085 Move X9, [X9+1688]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CSET not yet implemented."
	088 Move X0, X22
	089 Move X3, [X9]
	090 Move X1, X21
	091 Call 0x28139C8, X0, X1, X2
	092 Move X2, [X24]
	093 Move X0, X22
	094 Move X1, X21
	095 Call 0x2813934, X0, X1
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfNotEqual {105}
	100 Compare X20, 0
	101 JumpIfEqual {111}
	102 Move X8, [X20+24]
	103 Move X0, [X20+64]
	104 Move X1, [X20+40]
	105 Compare X19, 0
	106 JumpIfEqual {111}
	107 Move X8, [X19+24]
	108 Move X0, [X19+64]
	109 Move X1, [X19+40]
	110 NotImplemented "Instruction BLR not yet implemented."
	111 Move X20, [X31+64]
	112 Move X19, [X31+72]
	113 Move X22, [X31+48]
	114 Move X21, [X31+56]
	115 Move X24, [X31+32]
	116 Move X23, [X31+40]
	117 Move X30, [X31+16]
	118 Add X31, X31, 80
	119 Return 
	120 Call 0x1B6FA1C

Method: System.Boolean GetJoystickValue(AnimalCompany.HandSide side, out UnityEngine.Vector2 value)

Disassembly:
	0x01CC4FDC BL 0x1B6EA0C
	0x01CC4FE0 MOV X1, X31
	0x01CC4FE4 MOV X20, X0
	0x01CC4FE8 BL 0x32276F8
	0x01CC4FEC STR W31, [X20 + 0x10]
	0x01CC4FF0 STR X19, [X20 + 0x28]
	0x01CC4FF4 STRB W21, [X20 + 0x20]
	0x01CC4FF8 STP S13, S12, [X20 + 0x40]
	0x01CC4FFC STP S10, S9, [X20 + 0x30]
	0x01CC5000 STP S8, S11, [X20 + 0x38]
	0x01CC5004 MOV X0, X20
	0x01CC5008 LDP X20, X19, [X31 + 0x50]
	0x01CC500C LDP X22, X21, [X31 + 0x40]
	0x01CC5010 LDR X30, [X31 + 0x30]
	0x01CC5014 LDP D9, D8, [X31 + 0x20]
	0x01CC5018 LDP D11, D10, [X31 + 0x10]
	0x01CC501C LDP D13, D12, [X31], #0x60
	0x01CC5020 RET
	0x01CC5024 STR X30, [X31 - 0x20]!
	0x01CC5028 STP X20, X19, [X31 + 0x10]
	0x01CC502C MOV W19, W1
	0x01CC5030 MOV X1, X31
	0x01CC5034 MOV X20, X0
	0x01CC5038 BL 0x32276F8
	0x01CC503C STR W19, [X20 + 0x10]
	0x01CC5040 LDP X20, X19, [X31 + 0x10]
	0x01CC5044 LDR X30, [X31], #0x20
	0x01CC5048 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2560000
	007 Move X21, 0x228C000
	008 Move W8, [X22+1424]
	009 Move X21, [X21+1016]
	010 Move X19, X1
	011 Move W20, W0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x228B000
	017 Move X0, [X0+1016]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X22+1424], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1B6F8F8
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move W0, W20
	029 Move X2, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X1, [X8+136]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Call XRInputManager.TryGetFeatureValue, X0, X1, X2
	037 Return X0

Method: System.Boolean TryGetFeatureValue(AnimalCompany.HandSide side, UnityEngine.XR.InputFeatureUsage`1<UnityEngine.Vector2> inputFeatureUsage, out UnityEngine.Vector2 value)

Disassembly:
	0x01CCC874 ADD X8, X19, X8, 0x3, LSL
	0x01CCC878 LDR X0, [X8 + 0x20]
	0x01CCC87C B 0x1CCC884
	0x01CCC880 MOV X0, X31
	0x01CCC884 LDP X30, X19, [X31], #0x10
	0x01CCC888 RET
	0x01CCC88C BL 0x1B6EA1C
	0x01CCC890 BL 0x1B6EA24
	0x01CCC894 STR X30, [X31 - 0x30]!
	0x01CCC898 STP X22, X21, [X31 + 0x10]
	0x01CCC89C STP X20, X19, [X31 + 0x20]
	0x01CCC8A0 ADRP X21, 0x2557000
	0x01CCC8A4 ADRP X22, 0x2283000
	0x01CCC8A8 ADRP X20, 0x2283000
	0x01CCC8AC LDRB W8, [X21 + 0x59D]
	0x01CCC8B0 LDR X22, [X22 + 0x770]
	0x01CCC8B4 LDR X20, [X20 + 0x778]
	0x01CCC8B8 MOV X19, X0
	0x01CCC8BC TBNZ X8, 0x0, 0x1CCC8E0
	0x01CCC8C0 ADRP X0, 0x2283000
	0x01CCC8C4 LDR X0, [X0 + 0x778]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X19, X2
	006 Move X20, X1
	007 Call XRInputManager.GetXRController, X0
	008 Compare X0, 0
	009 JumpIfEqual {25}
	010 Move X1, X31
	011 Call XRController.get_inputDevice, X0
	012 Move [X31], X0
	013 Move [X31+8], X1
	014 Add X0, X31, 0
	015 Move X1, X20
	016 Move X2, X19
	017 Move X3, X31
	018 Call InputDevice.TryGetFeatureValue, X0, X1, X2
	019 Move X20, [X31+32]
	020 Move X19, [X31+40]
	021 Move X30, [X31+16]
	022 And W0, W0, 1
	023 Add X31, X31, 48
	024 Return X0
	025 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CCC8C8 BL 0x1B6E7F0
	0x01CCC8CC ADRP X0, 0x2283000
	0x01CCC8D0 LDR X0, [X0 + 0x770]
	0x01CCC8D4 BL 0x1B6E7F0
	0x01CCC8D8 MOVZ W8, 0x1
	0x01CCC8DC STRB W8, [X21 + 0x59D]
	0x01CCC8E0 LDR X0, [X22]
	0x01CCC8E4 BL 0x1B6EA0C
	0x01CCC8E8 LDR X1, [X20]
	0x01CCC8EC MOV X20, X0
	0x01CCC8F0 BL 0x2E45D4C
	0x01CCC8F4 STR X20, [X19 + 0x50]
	0x01CCC8F8 MOV X0, X19
	0x01CCC8FC LDP X20, X19, [X31 + 0x20]
	0x01CCC900 LDP X22, X21, [X31 + 0x10]
	0x01CCC904 MOV X1, X31
	0x01CCC908 LDR X30, [X31], #0x30
	0x01CCC90C B 0x1D6B70C
	0x01CCC910 STR X30, [X31 - 0x30]!
	0x01CCC914 STP X22, X21, [X31 + 0x10]
	0x01CCC918 STP X20, X19, [X31 + 0x20]
	0x01CCC91C ADRP X21, 0x2557000
	0x01CCC920 ADRP X22, 0x2283000
	0x01CCC924 ADRP X19, 0x2283000
	0x01CCC928 ADRP X20, 0x2283000
	0x01CCC92C LDRB W8, [X21 + 0x59E]
	0x01CCC930 LDR X22, [X22 + 0x780]
	0x01CCC934 LDR X19, [X19 + 0x788]
	0x01CCC938 LDR X20, [X20 + 0x368]
	0x01CCC93C TBNZ X8, 0x0, 0x1CCC96C
	0x01CCC940 ADRP X0, 0x2283000
	0x01CCC944 LDR X0, [X0 + 0x788]
	0x01CCC948 BL 0x1B6E7F0
	0x01CCC94C ADRP X0, 0x2283000
	0x01CCC950 LDR X0, [X0 + 0x780]
	0x01CCC954 BL 0x1B6E7F0
	0x01CCC958 ADRP X0, 0x2283000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2558000
	007 Move X22, 0x2284000
	008 Move X21, 0x2284000
	009 Move W8, [X20+1425]
	010 Move X22, [X22+1696]
	011 Move X21, [X21+1704]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2284000
	018 Move X0, [X0+1704]
	019 Call 0x1B6F7F0
	020 Move X0, 0x2284000
	021 Move X0, [X0+1696]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X20+1425], W8
	025 Move X0, [X22]
	026 Call 0x1B6FA0C
	027 Move X1, [X21]
	028 Move X20, X0
	029 Call 0x281311C, X0
	030 Move [X19+48], X20
	031 Move X0, [X22]
	032 Call 0x1B6FA0C
	033 Move X1, [X21]
	034 Move X20, X0
	035 Call 0x281311C, X0
	036 Move [X19+56], X20
	037 Move X0, X19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X1, X31
	043 Move X30, [X31+48]
	044 Call MonoBehaviour..ctor, X0
	045 Return 

