Type: AnimalCompany.PlayerView

Method: AnimalCompany.PlayerView/Mode get_mode()

Disassembly:
	0x01CC65E0 MOVZ W8, 0x1
	0x01CC65E4 STRB W8, [X20 + 0x55D]

ISIL:
	001 Move W0, [X0+144]
	002 Return X0

Method: UnityEngine.Transform get_ragdollHead()

Disassembly:
	0x01CC4C80 LDRB W9, [X24 + 0x454]
	0x01CC4C84 LDR X8, [X8 + 0xB8]
	0x01CC4C88 LDP S13, S12, [X8]
	0x01CC4C8C LDR V11, [X8 + 0x8]
	0x01CC4C90 CBNZ W9, 0x1CC4CA8
	0x01CC4C94 ADRP X0, 0x228A000
	0x01CC4C98 LDR X0, [X0 + 0x1F8]
	0x01CC4C9C BL 0x1B6E7F0
	0x01CC4CA0 MOVZ W8, 0x1
	0x01CC4CA4 STRB W8, [X24 + 0x454]
	0x01CC4CA8 CBZ X21, 0x1CC4E68
	0x01CC4CAC ADRP X8, 0x228A000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+152]
	003 Compare X8, 0
	004 JumpIfEqual {15}
	005 Move W9, [X8+24]
	006 Compare W9, 0
	007 JumpIfEqual {16}
	008 Move X0, [X8+32]
	009 Compare X0, 0
	010 JumpIfEqual {15}
	011 Move X1, X31
	012 Move X30, [X31+16]
	013 Call GameObject.get_transform, X0
	014 Return X0
	015 Call 0x1B6FA1C
	016 Call 0x1B6FA24

Method: UnityEngine.Transform get_ragdollHandLeft()

Disassembly:
	0x01CC4CE4 MOV X1, X31
	0x01CC4CE8 BL 0x3AA7658
	0x01CC4CEC LDR X0, [X19 + 0x78]
	0x01CC4CF0 STP S0, S1, [X19 + 0xC0]
	0x01CC4CF4 STR S2, [X19 + 0xC8]
	0x01CC4CF8 CBZ X0, 0x1CC4E68
	0x01CC4CFC MOV X1, X31
	0x01CC4D00 BL 0x3AA7658
	0x01CC4D04 STP S0, S1, [X19 + 0xCC]
	0x01CC4D08 STR S2, [X19 + 0xD4]
	0x01CC4D0C LDRB W8, [X23 + 0x43F]
	0x01CC4D10 CBNZ W8, 0x1CC4D28
	0x01CC4D14 ADRP X0, 0x2289000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+152]
	003 Compare X8, 0
	004 JumpIfEqual {14}
	005 Move W9, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X0, [X8+40]
	008 Compare X0, 0
	009 JumpIfEqual {14}
	010 Move X1, X31
	011 Move X30, [X31+16]
	012 Call GameObject.get_transform, X0
	013 Return X0
	014 Call 0x1B6FA1C
	015 Call 0x1B6FA24

Method: UnityEngine.Transform get_ragdollHandRight()

Disassembly:
	0x01CC4CB0 LDR X8, [X8 + 0x1F8]
	0x01CC4CB4 MOV X0, X21
	0x01CC4CB8 MOV V0.16B, V13.16B
	0x01CC4CBC MOV V1.16B, V12.16B
	0x01CC4CC0 LDR X8, [X8]
	0x01CC4CC4 MOV V2.16B, V11.16B
	0x01CC4CC8 MOV X1, X31
	0x01CC4CCC LDR X8, [X8 + 0xB8]
	0x01CC4CD0 LDP S5, S6, [X8 + 0x8]
	0x01CC4CD4 LDP S3, S4, [X8]
	0x01CC4CD8 BL 0x3AA8180
	0x01CC4CDC LDR X0, [X19 + 0x70]
	0x01CC4CE0 CBZ X0, 0x1CC4E68

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+152]
	003 Compare X8, 0
	004 JumpIfEqual {14}
	005 Move W9, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X0, [X8+48]
	008 Compare X0, 0
	009 JumpIfEqual {14}
	010 Move X1, X31
	011 Move X30, [X31+16]
	012 Call GameObject.get_transform, X0
	013 Return X0
	014 Call 0x1B6FA1C
	015 Call 0x1B6FA24

Method: UnityEngine.Transform get_backAttachAnchor()

Disassembly:
	0x01CC65E8 LDR W8, [X19 + 0x10]
	0x01CC65EC CMP W8, 0x1

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Void SetRagdoll(System.Boolean ragdoll, UnityEngine.Vector3 force = null)

Disassembly:
	0x01CC5C0C LDUR V8, [X19 + 0xB4]
	0x01CC5C10 LDR V9, [X19 + 0xBC]
	0x01CC5C14 LDR X20, [X20 + 0x4C0]
	0x01CC5C18 MOV X1, X31
	0x01CC5C1C BL 0x3AF6B78
	0x01CC5C20 LDUR V3, [X19 + 0xCC]
	0x01CC5C24 LDR V4, [X19 + 0xD4]
	0x01CC5C28 MOVZ W8, 0x999A
	0x01CC5C2C MOVK W8, 0x3E990000
	0x01CC5C30 MOV V0.S[1], V1.S[0]
	0x01CC5C34 UNIMPLEMENTED
	0x01CC5C38 FSUB V0.2S, V0.2S, V3.2S
	0x01CC5C3C FSUB S2, S2, S4
	0x00000000 INVALID
	0x01CC5C44 FMUL S1, S2, S10
	0x01CC5C48 FADD V0.2S, V8.2S, V0.2S
	0x01CC5C4C FADD S1, S9, S1
	0x01CC5C50 STUR D0, [X19 + 0xB4]
	0x01CC5C54 STR S1, [X19 + 0xBC]
	0x01CC5C58 LDR X0, [X20]
	0x01CC5C5C LDR V10, [X19 + 0xA8]
	0x01CC5C60 LDR V9, [X19 + 0xB0]
	0x01CC5C64 LDR W8, [X0 + 0xE0]
	0x01CC5C68 CBNZ W8, 0x1CC5C70
	0x01CC5C6C BL 0x1B6E8F8
	0x01CC5C70 MOV X0, X31
	0x01CC5C74 BL 0x3AF272C
	0x01CC5C78 MOV X0, X31
	0x01CC5C7C STR D0, [X31 + 0x10]
	0x01CC5C80 STR D1, [X31]
	0x01CC5C84 MOV V8.16B, V2.16B
	0x01CC5C88 BL 0x3AA48E4
	0x01CC5C8C LDP V1, V2, [X31]
	0x01CC5C90 MOVZ W8, 0xD70A
	0x01CC5C94 MOVK W8, 0x3BA30000
	0x01CC5C98 UNIMPLEMENTED
	0x01CC5C9C ADRP X8, 0xFFFFFFFFFEDE4000
	0x01CC5CA0 MOV V2.S[1], V1.S[0]
	0x01CC5CA4 LDR V13, [X8 + 0xDE0]
	0x01CC5CA8 FMUL S1, S8, S0
	0x00000000 INVALID
	0x00000000 INVALID
	0x01CC5CB4 LDUR V12, [X19 + 0xB4]
	0x01CC5CB8 FADD V0.2S, V10.2S, V0.2S
	0x01CC5CBC LDR V10, [X19 + 0xBC]
	0x01CC5CC0 FMUL S1, S1, S13
	0x01CC5CC4 FADD S1, S9, S1
	0x01CC5CC8 MOV X0, X31
	0x01CC5CCC STR D0, [X19 + 0xA8]
	0x01CC5CD0 STR S1, [X19 + 0xB0]
	0x01CC5CD4 BL 0x3AF272C
	0x01CC5CD8 MOV X0, X31
	0x01CC5CDC STR D0, [X31]
	0x01CC5CE0 STR D1, [X31 + 0x10]
	0x01CC5CE4 MOV V8.16B, V2.16B
	0x01CC5CE8 BL 0x3AA48E4
	0x01CC5CEC LDP V2, V1, [X31]
	0x01CC5CF0 LDR X8, [X19 + 0xA0]
	0x01CC5CF4 MOV V2.S[1], V1.S[0]
	0x01CC5CF8 FMUL S1, S8, S0
	0x00000000 INVALID
	0x01CC5D00 FMUL S1, S1, S13
	0x00000000 INVALID
	0x01CC5D08 FADD S1, S10, S1
	0x01CC5D0C FADD V0.2S, V12.2S, V0.2S
	0x01CC5D10 STUR D0, [X19 + 0xB4]
	0x01CC5D14 STR S1, [X19 + 0xBC]
	0x01CC5D18 CBZ X8, 0x1CC638C
	0x01CC5D1C LDR W9, [X8 + 0x18]
	0x01CC5D20 CMP W9, 0x1
	0x01CC5D24 B.LS 0x1CC6390
	0x01CC5D28 LDR X0, [X8 + 0x28]
	0x01CC5D2C CBZ X0, 0x1CC638C
	0x01CC5D30 LDR V0, [X19 + 0xC8]
	0x01CC5D34 LDR V1, [X19 + 0xB0]
	0x01CC5D38 LDR V3, [X19 + 0xC0]
	0x01CC5D3C LDR V4, [X19 + 0xA8]
	0x01CC5D40 MOV X1, X31
	0x01CC5D44 FADD S2, S0, S1
	0x01CC5D48 FADD V0.2S, V3.2S, V4.2S
	0x01CC5D4C MOV S1, V0.S[1]
	0x01CC5D50 BL 0x3AF6C18
	0x01CC5D54 LDR X8, [X19 + 0xA0]
	0x01CC5D58 CBZ X8, 0x1CC638C
	0x01CC5D5C LDR W9, [X8 + 0x18]
	0x01CC5D60 CMP W9, 0x2
	0x01CC5D64 B.LS 0x1CC6390
	0x01CC5D68 LDR X0, [X8 + 0x30]
	0x01CC5D6C CBZ X0, 0x1CC638C
	0x01CC5D70 LDR V0, [X19 + 0xD4]
	0x01CC5D74 LDR V1, [X19 + 0xBC]
	0x01CC5D78 LDUR V3, [X19 + 0xCC]
	0x01CC5D7C LDUR V4, [X19 + 0xB4]
	0x01CC5D80 MOV X1, X31
	0x01CC5D84 FADD S2, S0, S1
	0x01CC5D88 FADD V0.2S, V3.2S, V4.2S
	0x01CC5D8C MOV S1, V0.S[1]
	0x01CC5D90 BL 0x3AF6C18
	0x01CC5D94 LDR X0, [X19 + 0x70]
	0x01CC5D98 CBZ X0, 0x1CC638C
	0x01CC5D9C MOV X1, X31
	0x01CC5DA0 BL 0x3AA7658
	0x01CC5DA4 LDR X0, [X19 + 0x68]
	0x01CC5DA8 CBZ X0, 0x1CC638C
	0x01CC5DAC MOV X1, X31
	0x01CC5DB0 MOV V8.16B, V0.16B
	0x01CC5DB4 MOV V9.16B, V1.16B
	0x01CC5DB8 MOV V10.16B, V2.16B
	0x01CC5DBC BL 0x3AA7658
	0x01CC5DC0 ADRP X24, 0x255E000
	0x01CC5DC4 LDRB W8, [X24 + 0x506]
	0x01CC5DC8 MOV V11.16B, V0.16B
	0x01CC5DCC MOV V12.16B, V1.16B
	0x01CC5DD0 MOV V13.16B, V2.16B
	0x01CC5DD4 CBNZ W8, 0x1CC5DEC
	0x01CC5DD8 ADRP X0, 0x2288000
	0x01CC5DDC LDR X0, [X0 + 0x488]
	0x01CC5DE0 BL 0x1B6E7F0
	0x01CC5DE4 MOVZ W8, 0x1
	0x01CC5DE8 STRB W8, [X24 + 0x506]
	0x01CC5DEC ADRP X23, 0x2288000
	0x01CC5DF0 LDR X23, [X23 + 0x488]
	0x01CC5DF4 FSUB S11, S8, S11
	0x01CC5DF8 FSUB S9, S9, S12
	0x01CC5DFC FSUB S8, S10, S13
	0x01CC5E00 LDR X0, [X23]
	0x01CC5E04 LDR W8, [X0 + 0xE0]
	0x01CC5E08 CBNZ W8, 0x1CC5E10
	0x01CC5E0C BL 0x1B6E8F8
	0x01CC5E10 FMUL S0, S11, S11
	0x01CC5E14 FMUL S1, S9, S9
	0x01CC5E18 FMUL S2, S8, S8
	0x01CC5E1C FADD S0, S0, S1
	0x01CC5E20 FADD S0, S2, S0
	0x01CC5E24 FSQRT S0, S0
	0x01CC5E28 FMOV S1, 0.75
	0x01CC5E2C FCMP S0, S1
	0x01CC5E30 B.LE 0x1CC5FC4
	0x01CC5E34 LDR X8, [X19 + 0xA0]
	0x01CC5E38 CBZ X8, 0x1CC638C
	0x01CC5E3C LDR W9, [X8 + 0x18]
	0x01CC5E40 CMP W9, 0x1
	0x01CC5E44 B.LS 0x1CC6390
	0x01CC5E48 LDR X0, [X19 + 0x68]
	0x01CC5E4C CBZ X0, 0x1CC638C
	0x01CC5E50 LDR X20, [X8 + 0x28]
	0x01CC5E54 MOV X1, X31
	0x01CC5E58 BL 0x3AA7658
	0x01CC5E5C LDR X0, [X19 + 0x70]
	0x01CC5E60 STR S0, [X31 + 0x10]
	0x01CC5E64 CBZ X0, 0x1CC638C
	0x01CC5E68 MOV X1, X31
	0x01CC5E6C MOV V9.16B, V1.16B

ISIL:
	001 Move [X31-112], D13
	002 Move [X31-104], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Compare X0, 0
	015 JumpIfEqual {197}
	016 And W8, W1, 1
	017 Move [X0+144], W8
	018 Move X22, 0x2289000
	019 Move X22, [X22+1152]
	020 Move V10, V2
	021 Move V9, V1
	022 Move V8, V0
	023 Move W20, W1
	024 Move X19, X0
	025 Move X23, 0x255F000
	026 Move TEMP, X1
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {69}
	030 Move W8, [X23+1087]
	031 Move X21, [X19+104]
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0x2289000
	035 Move X0, [X0+1152]
	036 Call 0x1B6F7F0
	037 Move W8, 1
	038 Move [X23+1087], W8
	039 Move X8, [X22]
	040 Move X24, 0x255F000
	041 Move W9, [X24+1108]
	042 Move X8, [X8+184]
	043 Move S13, [X8]
	044 Move S12, [X8+4]
	045 Move V11, [X8+8]
	046 Compare W9, 0
	047 JumpIfNotEqual {53}
	048 Move X0, 0x228A000
	049 Move X0, [X0+504]
	050 Call 0x1B6F7F0
	051 Move W8, 1
	052 Move [X24+1108], W8
	053 Compare X21, 0
	054 JumpIfEqual {197}
	055 Move X8, 0x228A000
	056 Move X8, [X8+504]
	057 Move X0, X21
	058 Move V0, V13
	059 Move V1, V12
	060 Move X8, [X8]
	061 Move V2, V11
	062 Move X1, X31
	063 Move X8, [X8+184]
	064 Move S5, [X8+8]
	065 Move S6, [X8+12]
	066 Move S3, [X8]
	067 Move S4, [X8+4]
	068 Call Transform.SetLocalPositionAndRotation, X0, X1, X2
	069 Move X0, [X19+112]
	070 Compare X0, 0
	071 JumpIfEqual {197}
	072 Move X1, X31
	073 Call Transform.get_position, X0
	074 Move X0, [X19+120]
	075 Move [X19+192], S0
	076 Move [X19+200], S1
	077 Move [X19+200], S2
	078 Compare X0, 0
	079 JumpIfEqual {197}
	080 Move X1, X31
	081 Call Transform.get_position, X0
	082 Move [X19+204], S0
	083 Move [X19+212], S1
	084 Move [X19+212], S2
	085 Move W8, [X23+1087]
	086 Compare W8, 0
	087 JumpIfNotEqual {93}
	088 Move X0, 0x2289000
	089 Move X0, [X0+1152]
	090 Call 0x1B6F7F0
	091 Move W8, 1
	092 Move [X23+1087], W8
	093 Move X8, [X22]
	094 Move X9, [X8+184]
	095 Move V0, [X9]
	096 Move V1, [X9+8]
	097 Move [X19+168], D0
	098 Move [X19+176], S1
	099 Move X9, [X8+184]
	100 Move X8, [X19+160]
	101 Move V0, [X9]
	102 Move V1, [X9+8]
	103 Move [X19+180], D0
	104 Move [X19+188], S1
	105 Compare X8, 0
	106 JumpIfEqual {197}
	107 Move W9, [X8+24]
	108 Compare W9, 0
	109 JumpIfEqual {198}
	110 Move X0, [X8+32]
	111 Compare X0, 0
	112 JumpIfEqual {197}
	113 NotImplemented "Instruction ORN not yet implemented."
	114 And W1, W8, 1
	115 Move X2, X31
	116 Call Rigidbody.set_isKinematic, X0, X1
	117 Move X21, [X19+152]
	118 Compare X21, 0
	119 JumpIfEqual {197}
	120 Move W8, [X21+24]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move W22, W31
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Add X8, X21, W22
	125 Move X0, [X8+32]
	126 Compare X0, 0
	127 JumpIfEqual {197}
	128 And W1, W20, 1
	129 Move X2, X31
	130 Call GameObject.SetActive, X0, X1
	131 Move W8, [X21+24]
	132 Add W22, W22, 1
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move TEMP, X20
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfNotEqual {183}
	138 Move X8, [X19+160]
	139 Compare X8, 0
	140 JumpIfEqual {197}
	141 Move W9, [X8+24]
	142 Compare W9, 0
	143 JumpIfEqual {198}
	144 Move X0, [X8+32]
	145 Compare X0, 0
	146 JumpIfEqual {197}
	147 Move W1, 2
	148 Move V0, V8
	149 Move V1, V9
	150 Move V2, V10
	151 Move X2, X31
	152 Call Rigidbody.AddForce, X0, X1, X2
	153 Move X8, [X19+160]
	154 Compare X8, 0
	155 JumpIfEqual {197}
	156 Move W9, [X8+24]
	157 Compare W9, 0
	158 JumpIfEqual {198}
	159 Move X0, [X8+32]
	160 Compare X0, 0
	161 JumpIfEqual {197}
	162 Move S0, 3
	163 Multiply S2, S10, S0
	164 Multiply S1, S9, S0
	165 Multiply S0, S8, S0
	166 Move X20, [X31+96]
	167 Move X19, [X31+104]
	168 Move X22, [X31+80]
	169 Move X21, [X31+88]
	170 Move X24, [X31+64]
	171 Move X23, [X31+72]
	172 Move X30, [X31+48]
	173 Move D9, [X31+32]
	174 Move D8, [X31+40]
	175 Move D11, [X31+16]
	176 Move D10, [X31+24]
	177 Move W1, 2
	178 Move X2, X31
	179 Move D13, [X31+112]
	180 Move D12, [X31+120]
	181 Call Rigidbody.AddTorque, X0, X1, X2
	182 Return 
	183 Move X20, [X31+96]
	184 Move X19, [X31+104]
	185 Move X22, [X31+80]
	186 Move X21, [X31+88]
	187 Move X24, [X31+64]
	188 Move X23, [X31+72]
	189 Move X30, [X31+48]
	190 Move D9, [X31+32]
	191 Move D8, [X31+40]
	192 Move D11, [X31+16]
	193 Move D10, [X31+24]
	194 Move D13, [X31+112]
	195 Move D12, [X31+120]
	196 Return 
	197 Call 0x1B6FA1C
	198 Call 0x1B6FA24

Method: System.Void Setup(UnityEngine.Transform camera, UnityEngine.Transform handLeft, UnityEngine.Transform handRight, UnityEngine.Transform controllerLeft, UnityEngine.Transform controllerRight, AnimalCompany.PlayerView/Type type)

Disassembly:
	0x01CC1634 CBZ X0, 0x1CC16C8
	0x01CC1638 ADRP X8, 0x228E000
	0x01CC163C LDR X8, [X8 + 0x350]
	0x01CC1640 MOV X1, X20
	0x01CC1644 LDR X2, [X8]
	0x01CC1648 BL 0x28FA49C
	0x01CC164C LDR X8, [X21]
	0x01CC1650 LDR X8, [X8 + 0xB8]
	0x01CC1654 LDR X9, [X8]
	0x01CC1658 CBZ X9, 0x1CC16C8
	0x01CC165C MOV W8, W0
	0x01CC1660 LDR X0, [X9 + 0x30]
	0x01CC1664 CBZ X0, 0x1CC16C8
	0x01CC1668 TBZ X8, 0x0, 0x1CC1688
	0x01CC166C ADRP X8, 0x228C000
	0x01CC1670 LDR X8, [X8 + 0xD58]
	0x01CC1674 MOV X1, X20
	0x01CC1678 MOV X2, X19
	0x01CC167C LDR X3, [X8]
	0x01CC1680 BL 0x28FA294
	0x01CC1684 B 0x1CC16A0
	0x01CC1688 ADRP X8, 0x228C000
	0x01CC168C LDR X8, [X8 + 0xF10]
	0x01CC1690 MOV X1, X20
	0x01CC1694 MOV X2, X19
	0x01CC1698 LDR X3, [X8]
	0x01CC169C BL 0x28FA2A8
	0x01CC16A0 LDR X8, [X21]
	0x01CC16A4 LDR X8, [X8 + 0xB8]
	0x01CC16A8 LDR X8, [X8]
	0x01CC16AC CBZ X8, 0x1CC16C8
	0x01CC16B0 LDP X20, X19, [X31 + 0x20]
	0x01CC16B4 LDP X22, X21, [X31 + 0x10]
	0x01CC16B8 MOVZ W9, 0x1
	0x01CC16BC STRB W9, [X8 + 0x38]
	0x01CC16C0 LDR X30, [X31], #0x30
	0x01CC16C4 RET
	0x01CC16C8 BL 0x1B6EA1C
	0x01CC16CC STR D8, [X31 - 0x30]!
	0x01CC16D0 STP X30, X21, [X31 + 0x10]
	0x01CC16D4 STP X20, X19, [X31 + 0x20]
	0x01CC16D8 ADRP X21, 0x2562000
	0x01CC16DC ADRP X20, 0x228D000
	0x01CC16E0 LDRB W8, [X21 + 0x551]
	0x01CC16E4 LDR X20, [X20 + 0x198]
	0x01CC16E8 MOV X19, X0
	0x01CC16EC TBNZ X8, 0x0, 0x1CC1704
	0x01CC16F0 ADRP X0, 0x228D000
	0x01CC16F4 LDR X0, [X0 + 0x198]
	0x01CC16F8 BL 0x1B6E7F0
	0x01CC16FC MOVZ W8, 0x1
	0x01CC1700 STRB W8, [X21 + 0x551]
	0x01CC1704 LDR X0, [X20]
	0x01CC1708 ADD X20, X19, 0x118
	0x01CC170C LDR W8, [X0 + 0xE0]
	0x01CC1710 CBNZ W8, 0x1CC1718
	0x01CC1714 BL 0x1B6E8F8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, [X0+88]
	006 Move [X0+32], X1
	007 Move [X0+40], X2
	008 Move [X0+48], X3
	009 Move [X0+56], X4
	010 Move [X0+64], X5
	011 Move [X0+80], W6
	012 Compare X20, 0
	013 JumpIfEqual {62}
	014 Move W8, [X20+24]
	015 Move X19, X0
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W21, W31
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Add X8, X20, W21
	020 Move X0, [X8+32]
	021 Compare X0, 0
	022 JumpIfEqual {62}
	023 Move W8, [X19+80]
	024 Move X2, X31
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CSET not yet implemented."
	027 Call Renderer.set_enabled, X0, X1
	028 Move W8, [X20+24]
	029 Add W21, W21, 1
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X20, [X19+96]
	032 Compare X20, 0
	033 JumpIfEqual {62}
	034 Move W8, [X20+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W21, W31
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Add X8, X20, W21
	039 Move X0, [X8+32]
	040 Compare X0, 0
	041 JumpIfEqual {62}
	042 Move W8, [X19+80]
	043 Move X2, X31
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CSET not yet implemented."
	046 Call Renderer.set_enabled, X0, X1
	047 Move W8, [X20+24]
	048 Add W21, W21, 1
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X0, X19
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move S0, W31
	054 Move S1, W31
	055 Move S2, W31
	056 Move W1, W31
	057 Move X30, [X31+32]
	058 Move X21, [X31+40]
	059 Call PlayerView.SetRagdoll, X0, X1, X2
	060 Return 
	061 Call 0x1B6FA24
	062 Call 0x1B6FA1C

Method: System.Void PlayerHit()

Disassembly:
	0x01CC3248 LDRB W9, [X21 + 0x440]
	0x01CC324C LDP S15, S8, [X8 + 0x50]
	0x01CC3250 CBNZ W9, 0x1CC3268
	0x01CC3254 ADRP X0, 0x228A000
	0x01CC3258 LDR X0, [X0 + 0x488]
	0x01CC325C BL 0x1B6E7F0
	0x01CC3260 MOVZ W8, 0x1
	0x01CC3264 STRB W8, [X21 + 0x440]
	0x01CC3268 ADRP X8, 0x228A000
	0x01CC326C LDR X8, [X8 + 0x488]
	0x01CC3270 LDR X0, [X8]
	0x01CC3274 LDR W8, [X0 + 0xE0]
	0x01CC3278 CBNZ W8, 0x1CC3280
	0x01CC327C BL 0x1B6E8F8
	0x01CC3280 FMOV S0, W31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, [X0+416]
	004 Move X19, X0
	005 Compare X1, 0
	006 JumpIfEqual {10}
	007 Move X0, X19
	008 Move X2, X31
	009 Call MonoBehaviour.StopCoroutine, X0, X1
	010 Move X0, X19
	011 Call PlayerView.PlayerHitCoroutine, X0
	012 Move X1, X0
	013 Move [X19+416], X0
	014 Move X0, X19
	015 Move X2, X31
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call MonoBehaviour.StartCoroutine, X0, X1
	019 Return 

Method: System.Void SetRenderType(AnimalCompany.PlayerView/Type type)

Disassembly:
	0x01CC64D4 STP X30, X21, [X31 - 0x20]!
	0x01CC64D8 STP X20, X19, [X31 + 0x10]
	0x01CC64DC ADRP X21, 0x255D000
	0x01CC64E0 ADRP X19, 0x2289000
	0x01CC64E4 ADRP X20, 0x2288000
	0x01CC64E8 LDRB W8, [X21 + 0x55C]
	0x01CC64EC LDR X19, [X19 + 0x388]
	0x01CC64F0 LDR X20, [X20 + 0x340]
	0x01CC64F4 TBNZ X8, 0x0, 0x1CC6518
	0x01CC64F8 ADRP X0, 0x2289000
	0x01CC64FC LDR X0, [X0 + 0x388]
	0x01CC6500 BL 0x1B6E7F0
	0x01CC6504 ADRP X0, 0x2288000
	0x01CC6508 LDR X0, [X0 + 0x340]
	0x01CC650C BL 0x1B6E7F0
	0x01CC6510 MOVZ W8, 0x1
	0x01CC6514 STRB W8, [X21 + 0x55C]
	0x01CC6518 LDR X8, [X19]
	0x01CC651C ADRP X9, 0xFFFFFFFFFEDE7000
	0x01CC6520 LDR V0, [X9 + 0x6E0]
	0x01CC6524 MOVZ W9, 0xC2B40000
	0x01CC6528 LDR X8, [X8 + 0xB8]
	0x01CC652C ADRP X10, 0xFFFFFFFFFEDE7000
	0x01CC6530 MOV X1, X31
	0x01CC6534 STR D0, [X8]
	0x01CC6538 STR W9, [X8 + 0x8]
	0x01CC653C LDR X8, [X19]
	0x01CC6540 LDR X9, [X8 + 0xB8]
	0x01CC6544 STUR D0, [X9 + 0xC]
	0x01CC6548 LDR V0, [X10 + 0xD70]
	0x01CC654C MOVZ W10, 0x42B40000
	0x01CC6550 STR W10, [X9 + 0x14]
	0x01CC6554 LDR X9, [X8 + 0xB8]
	0x01CC6558 ADRP X10, 0xFFFFFFFFFEDE6000
	0x01CC655C STR D0, [X9 + 0x18]
	0x01CC6560 LDR V0, [X10 + 0xC90]
	0x01CC6564 MOVZ W10, 0xC0000000
	0x01CC6568 STR W10, [X9 + 0x20]
	0x01CC656C LDR X8, [X8 + 0xB8]
	0x01CC6570 STUR D0, [X8 + 0x24]
	0x01CC6574 STR W10, [X8 + 0x2C]
	0x01CC6578 LDR X0, [X20]
	0x01CC657C BL 0x3A7AE20
	0x01CC6580 LDR X8, [X19]
	0x01CC6584 LDP X20, X19, [X31 + 0x10]
	0x01CC6588 LDR X8, [X8 + 0xB8]
	0x01CC658C STR W0, [X8 + 0x30]
	0x01CC6590 LDP X30, X21, [X31], #0x20
	0x01CC6594 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, [X0+88]
	007 Compare X21, 0
	008 JumpIfEqual {51}
	009 Move W8, [X21+24]
	010 Move X20, X0
	011 Move W19, W1
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W22, W31
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Add X8, X21, W22
	016 Move X0, [X8+32]
	017 Compare X0, 0
	018 JumpIfEqual {51}
	019 NotImplemented "Instruction CMP not yet implemented."
	020 NotImplemented "Instruction CSET not yet implemented."
	021 Move X2, X31
	022 Call Renderer.set_enabled, X0, X1
	023 Move W8, [X21+24]
	024 Add W22, W22, 1
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X20, [X20+96]
	027 Compare X20, 0
	028 JumpIfEqual {51}
	029 Move W8, [X20+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move W21, W31
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Add X8, X20, W21
	034 Move X0, [X8+32]
	035 Compare X0, 0
	036 JumpIfEqual {51}
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CSET not yet implemented."
	039 Move X2, X31
	040 Call Renderer.set_enabled, X0, X1
	041 Move W8, [X20+24]
	042 Add W21, W21, 1
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Return 
	050 Call 0x1B6FA24
	051 Call 0x1B6FA1C

Method: System.Collections.IEnumerator PlayerHitCoroutine()

Disassembly:
	0x01CC65F0 B.EQ 0x1CC670C
	0x01CC65F4 CBNZ W8, 0x1CC67CC
	0x01CC65F8 LDR X8, [X19 + 0x20]
	0x01CC65FC MOVN W9, 0x0
	0x01CC6600 STR W9, [X19 + 0x10]
	0x01CC6604 CBZ X8, 0x1CC67E4
	0x01CC6608 LDR W9, [X8 + 0x50]
	0x01CC660C MOVZ W10, 0x60
	0x01CC6610 CMP W9, 0x0
	0x01CC6614 MOVZ W9, 0x58
	0x01CC6618 CSEL X9, X9, X10, EQ
	0x01CC661C LDR X21, [X8, X9, LSL]
	0x01CC6620 STR X21, [X19 + 0x28]
	0x01CC6624 CBZ X21, 0x1CC67E4
	0x01CC6628 LDR W8, [X21 + 0x18]
	0x01CC662C CMP W8, 0x1
	0x01CC6630 B.LT 0x1CC66D8
	0x01CC6634 ADRP X23, 0x2289000
	0x01CC6638 ADRP X24, 0x2289000
	0x01CC663C LDR X23, [X23 + 0x450]
	0x01CC6640 LDR X24, [X24 + 0x388]
	0x01CC6644 MOV W22, W31
	0x01CC6648 CMP W22, W8
	0x01CC664C B.CS 0x1CC67E8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x255E000
	006 Move X21, 0x228A000
	007 Move W8, [X20+1368]
	008 Move X21, [X21+1096]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x228A000
	015 Move X0, [X0+1096]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1368], W8
	019 Move X0, [X21]
	020 Call 0x1B6FA0C
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move [X20+16], W31
	025 Move [X20+32], X19
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Void Awake()

Disassembly:
	0x01CC6678 MOV X0, X20
	0x01CC667C MOV X1, X31
	0x01CC6680 BL 0x3A7BCC8
	0x01CC6684 LDR X8, [X24]
	0x01CC6688 MOV X20, X0
	0x01CC668C LDR W9, [X8 + 0xE0]
	0x01CC6690 CBNZ W9, 0x1CC669C
	0x01CC6694 MOV X0, X8
	0x01CC6698 BL 0x1B6E8F8
	0x01CC669C CBZ X20, 0x1CC67E4
	0x01CC66A0 LDR X8, [X24]
	0x01CC66A4 FMOV S0, 1
	0x01CC66A8 FMOV S1, W31
	0x01CC66AC FMOV S2, W31
	0x01CC66B0 LDR X8, [X8 + 0xB8]
	0x01CC66B4 FMOV S3, 1
	0x01CC66B8 MOV X0, X20
	0x01CC66BC MOV X2, X31
	0x01CC66C0 LDR W1, [X8 + 0x30]
	0x01CC66C4 BL 0x3A7D234
	0x01CC66C8 LDR W8, [X21 + 0x18]
	0x01CC66CC ADD W22, W22, 0x1
	0x01CC66D0 CMP W22, W8
	0x01CC66D4 B.LT 0x1CC6648
	0x01CC66D8 ADRP X8, 0x2288000
	0x01CC66DC LDR X8, [X8 + 0x2E8]
	0x01CC66E0 LDR X0, [X8]
	0x01CC66E4 BL 0x1B6EA0C
	0x01CC66E8 ADRP X8, 0xFFFFFFFFFEDE3000
	0x01CC66EC LDR V0, [X8 + 0xAB0]
	0x01CC66F0 MOV X1, X31
	0x01CC66F4 MOV X20, X0
	0x01CC66F8 BL 0x3AA273C
	0x01CC66FC MOVZ W0, 0x1
	0x01CC6700 STR X20, [X19 + 0x18]
	0x01CC6704 STR W0, [X19 + 0x10]
	0x01CC6708 B 0x1CC67D0
	0x01CC670C LDR X20, [X19 + 0x28]
	0x01CC6710 MOVN W8, 0x0
	0x01CC6714 STR W8, [X19 + 0x10]
	0x01CC6718 CBZ X20, 0x1CC67E4
	0x01CC671C LDR W8, [X20 + 0x18]
	0x01CC6720 CMP W8, 0x1
	0x01CC6724 B.LT 0x1CC67CC
	0x01CC6728 ADRP X22, 0x2289000
	0x01CC672C ADRP X23, 0x2289000
	0x01CC6730 LDR X22, [X22 + 0x450]
	0x01CC6734 LDR X23, [X23 + 0x388]
	0x01CC6738 MOV W21, W31
	0x01CC673C CMP W21, W8
	0x01CC6740 B.CS 0x1CC67E8
	0x01CC6744 ADD X8, X20, W21, 0x3, SXTW
	0x01CC6748 LDR X19, [X8 + 0x20]
	0x01CC674C CBZ X19, 0x1CC67E4
	0x01CC6750 MOV X0, X19
	0x01CC6754 MOV X1, X31
	0x01CC6758 BL 0x3A7BCC8
	0x01CC675C CBZ X0, 0x1CC67E4
	0x01CC6760 LDR X1, [X22]
	0x01CC6764 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+296]
	006 Compare X0, 0
	007 JumpIfEqual {71}
	008 Move X1, X31
	009 Call Transform.get_position, X0
	010 Move X0, [X19+304]
	011 Move [X19+360], S0
	012 Move [X19+364], S1
	013 Move [X19+368], S2
	014 Compare X0, 0
	015 JumpIfEqual {71}
	016 Move X1, X31
	017 Call Transform.get_position, X0
	018 Move X0, [X19+296]
	019 Move [X19+372], S0
	020 Move [X19+376], S1
	021 Move [X19+380], S2
	022 Compare X0, 0
	023 JumpIfEqual {71}
	024 Move X20, [X19+328]
	025 Move X1, X31
	026 Call Transform.get_position, X0
	027 Compare X20, 0
	028 JumpIfEqual {71}
	029 Move X0, X20
	030 Move X1, X31
	031 Call Transform.InverseTransformPoint, X0, X1
	032 Move X0, [X19+304]
	033 Move [X19+336], S0
	034 Move [X19+340], S1
	035 Move [X19+344], S2
	036 Compare X0, 0
	037 JumpIfEqual {71}
	038 Move X20, [X19+328]
	039 Move X1, X31
	040 Call Transform.get_position, X0
	041 Compare X20, 0
	042 JumpIfEqual {71}
	043 Move X0, X20
	044 Move X1, X31
	045 Call Transform.InverseTransformPoint, X0, X1
	046 Move X0, [X19+240]
	047 Move [X19+348], S0
	048 Move [X19+352], S1
	049 Move [X19+356], S2
	050 Compare X0, 0
	051 JumpIfEqual {71}
	052 Move X1, X31
	053 Call Transform.get_localEulerAngles, X0
	054 Move X8, [X19+264]
	055 Move [X19+280], S0
	056 Compare X8, 0
	057 JumpIfEqual {71}
	058 Move W9, [X8+24]
	059 Compare W9, 0
	060 JumpIfEqual {72}
	061 Move X0, [X8+32]
	062 Compare X0, 0
	063 JumpIfEqual {71}
	064 Move X1, X31
	065 Call Transform.get_localScale, X0
	066 Move [X19+284], S0
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X30, [X31+32]
	070 Return 
	071 Call 0x1B6FA1C
	072 Call 0x1B6FA24

Method: System.Void Update()

Disassembly:
	0x01CC6768 BL 0x3A7D72C
	0x01CC676C MOV X0, X19
	0x01CC6770 MOV X1, X31
	0x01CC6774 BL 0x3A7BCC8
	0x01CC6778 LDR X8, [X23]
	0x01CC677C MOV X19, X0
	0x01CC6780 LDR W9, [X8 + 0xE0]
	0x01CC6784 CBNZ W9, 0x1CC6790
	0x01CC6788 MOV X0, X8
	0x01CC678C BL 0x1B6E8F8
	0x01CC6790 CBZ X19, 0x1CC67E4
	0x01CC6794 LDR X8, [X23]
	0x01CC6798 FMOV S0, W31
	0x01CC679C FMOV S1, W31
	0x01CC67A0 FMOV S2, W31
	0x01CC67A4 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+144]
	004 Move X19, X0
	005 Compare W8, 0
	006 JumpIfNotEqual {12}
	007 Move W8, [X19+409]
	008 Compare W8, 0
	009 JumpIfNotEqual {12}
	010 Move X0, X19
	011 Call PlayerView.UpdateTransforms, X0
	012 Move W8, [X19+408]
	013 Compare W8, 0
	014 JumpIfEqual {18}
	015 Move V0, [X19+412]
	016 Move X0, X19
	017 Call PlayerView.UpdateVoice, X0, V0
	018 Move X0, X19
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]

Method: System.Void FixedUpdate()

Disassembly:
	0x01CC6A84 LDP X30, X19, [X31], #0x10
	0x01CC6A88 RET
	0x01CC6A8C ADRP X0, 0x2287000
	0x01CC6A90 LDR X0, [X0 + 0x490]
	0x01CC6A94 BL 0x1B6E804

ISIL:
	001 Move W8, [X0+144]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 

Method: System.Void UpdateTransforms()

Disassembly:
	0x01CC3684 STP X20, X19, [X31 + 0x1D0]
	0x01CC3688 MRS X20, 0xC000
	0x01CC368C LDR X8, [X20 + 0x28]
	0x01CC3690 ADRP X21, 0x2560000
	0x01CC3694 MOV X19, X0
	0x01CC3698 STR X8, [X31 + 0x168]
	0x01CC369C LDRB W8, [X21 + 0x552]
	0x01CC36A0 STP X1, X2, [X31 + 0xB0]
	0x01CC36A4 TBNZ X8, 0x0, 0x1CC36BC
	0x01CC36A8 ADRP X0, 0x228C000
	0x01CC36AC LDR X0, [X0 + 0x3D0]
	0x01CC36B0 BL 0x1B6E7F0
	0x01CC36B4 MOVZ W8, 0x1
	0x01CC36B8 STRB W8, [X21 + 0x552]
	0x01CC36BC LDR X0, [X19 + 0x38]
	0x01CC36C0 CBZ X0, 0x1CC3C78
	0x01CC36C4 LDR W8, [X0 + 0x90]
	0x01CC36C8 CMP W8, 0x1
	0x01CC36CC B.EQ 0x1CC3844
	0x01CC36D0 FMOV S28, W31
	0x01CC36D4 STR S28, [X31 + 0x94]
	0x01CC36D8 FMOV S28, W31
	0x01CC36DC FMOV S0, W31
	0x01CC36E0 STR S28, [X31 + 0x90]
	0x01CC36E4 FMOV S28, W31
	0x01CC36E8 STR S0, [X31 + 0xAC]
	0x01CC36EC FMOV S0, W31
	0x01CC36F0 STR S28, [X31 + 0x8C]
	0x01CC36F4 FMOV S28, W31
	0x01CC36F8 STR S0, [X31 + 0xA8]
	0x01CC36FC FMOV S0, W31
	0x01CC3700 STR S28, [X31 + 0x88]
	0x01CC3704 FMOV S28, W31
	0x01CC3708 STR S0, [X31 + 0xA4]
	0x01CC370C FMOV S0, W31
	0x01CC3710 STR S28, [X31 + 0x9C]
	0x01CC3714 FMOV S28, W31
	0x01CC3718 FMOV S4, W31
	0x01CC371C FMOV S5, W31
	0x01CC3720 FMOV S6, W31
	0x01CC3724 FMOV S7, W31
	0x01CC3728 FMOV S16, W31
	0x01CC372C FMOV S17, W31
	0x01CC3730 FMOV S18, W31
	0x01CC3734 FMOV S23, W31
	0x01CC3738 FMOV S24, W31
	0x01CC373C FMOV S25, W31
	0x01CC3740 STR S0, [X31 + 0xA0]
	0x01CC3744 FMOV S19, W31
	0x01CC3748 FMOV S1, W31
	0x01CC374C FMOV S0, W31
	0x01CC3750 FMOV S2, W31
	0x01CC3754 FMOV S3, W31
	0x01CC3758 FMOV S20, W31
	0x01CC375C FMOV S21, W31
	0x01CC3760 FMOV S22, W31
	0x01CC3764 FMOV S26, W31
	0x01CC3768 FMOV S27, W31
	0x01CC376C FMOV S15, W31
	0x01CC3770 FMOV S8, W31
	0x01CC3774 FMOV S9, W31
	0x01CC3778 FMOV S10, W31
	0x01CC377C FMOV S11, W31
	0x01CC3780 FMOV S12, W31
	0x01CC3784 FMOV S13, W31
	0x01CC3788 STR S28, [X31 + 0x98]
	0x01CC378C FMOV S28, W31
	0x01CC3790 FMOV S29, W31
	0x01CC3794 FMOV S30, W31
	0x01CC3798 FMOV S31, W31
	0x01CC379C FMOV S14, W31
	0x01CC37A0 CBNZ W8, 0x1CC3B78
	0x01CC37A4 LDR X0, [X19 + 0x50]
	0x01CC37A8 CBZ X0, 0x1CC3C78
	0x01CC37AC MOV X1, X31
	0x01CC37B0 BL 0x3AA7658
	0x01CC37B4 LDR X0, [X19 + 0x50]
	0x01CC37B8 STP S1, S0, [X31 + 0x80]
	0x01CC37BC STR S2, [X31 + 0x7C]
	0x01CC37C0 CBZ X0, 0x1CC3C78
	0x01CC37C4 MOV X1, X31
	0x01CC37C8 BL 0x3AA7AD0
	0x01CC37CC ADRP X21, 0x2560000
	0x01CC37D0 LDRB W8, [X21 + 0x441]
	0x01CC37D4 MOV V8.16B, V0.16B
	0x01CC37D8 MOV V9.16B, V2.16B
	0x01CC37DC CBNZ W8, 0x1CC37F4
	0x01CC37E0 ADRP X0, 0x228A000
	0x01CC37E4 LDR X0, [X0 + 0x488]
	0x01CC37E8 BL 0x1B6E7F0
	0x01CC37EC MOVZ W8, 0x1
	0x01CC37F0 STRB W8, [X21 + 0x441]
	0x01CC37F4 ADRP X8, 0x228A000
	0x01CC37F8 LDR X8, [X8 + 0x488]
	0x01CC37FC LDR X0, [X8]
	0x01CC3800 LDR W8, [X0 + 0xE0]
	0x01CC3804 CBNZ W8, 0x1CC380C
	0x01CC3808 BL 0x1B6E8F8
	0x01CC380C ADRP X8, 0xFFFFFFFFFEDE6000
	0x01CC3810 FMUL S0, S8, S8
	0x01CC3814 FMOV S1, W31
	0x01CC3818 LDR V3, [X8 + 0xB64]
	0x01CC381C FADD S0, S0, S1
	0x01CC3820 FMUL S2, S9, S9
	0x01CC3824 FADD S0, S2, S0
	0x01CC3828 FSQRT S2, S0
	0x01CC382C FCMP S2, S3
	0x01CC3830 B.LE 0x1CC39D4
	0x01CC3834 FDIV S0, S8, S2
	0x01CC3838 FDIV S1, S1, S2
	0x01CC383C FDIV S2, S9, S2
	0x01CC3840 B 0x1CC3A0C
	0x01CC3844 BL 0x1CC3C80
	0x01CC3848 CBZ X0, 0x1CC3C78
	0x01CC384C MOV X1, X31
	0x01CC3850 BL 0x3AA7658
	0x01CC3854 LDR X0, [X19 + 0x38]
	0x01CC3858 STP S1, S0, [X31 + 0x80]
	0x01CC385C STR S2, [X31 + 0x7C]
	0x01CC3860 CBZ X0, 0x1CC3C78
	0x01CC3864 BL 0x1CC3C80
	0x01CC3868 CBZ X0, 0x1CC3C78
	0x01CC386C MOV X1, X31
	0x01CC3870 BL 0x3AA5FBC
	0x01CC3874 LDR X0, [X19 + 0x38]
	0x01CC3878 STP S1, S0, [X31 + 0x74]
	0x01CC387C STP S3, S2, [X31 + 0x6C]
	0x01CC3880 CBZ X0, 0x1CC3C78
	0x01CC3884 BL 0x1CC3C80
	0x01CC3888 CBZ X0, 0x1CC3C78
	0x01CC388C MOV X1, X31
	0x01CC3890 BL 0x3AA7658
	0x01CC3894 LDR X0, [X19 + 0x38]
	0x01CC3898 STP S1, S0, [X31 + 0x64]
	0x01CC389C STR S2, [X31 + 0x60]
	0x01CC38A0 CBZ X0, 0x1CC3C78
	0x01CC38A4 BL 0x1CC3C80
	0x01CC38A8 CBZ X0, 0x1CC3C78
	0x01CC38AC MOV X1, X31
	0x01CC38B0 BL 0x3AA5FBC
	0x01CC38B4 LDR X0, [X19 + 0x38]
	0x01CC38B8 STP S1, S0, [X31 + 0xA8]
	0x01CC38BC STP S3, S2, [X31 + 0xA0]
	0x01CC38C0 CBZ X0, 0x1CC3C78
	0x01CC38C4 BL 0x1CC3CB0
	0x01CC38C8 CBZ X0, 0x1CC3C78
	0x01CC38CC MOV X1, X31
	0x01CC38D0 BL 0x3AA7658
	0x01CC38D4 LDR X0, [X19 + 0x38]
	0x01CC38D8 STP S1, S0, [X31 + 0x98]
	0x01CC38DC STR S2, [X31 + 0x5C]
	0x01CC38E0 CBZ X0, 0x1CC3C78
	0x01CC38E4 BL 0x1CC3CB0
	0x01CC38E8 CBZ X0, 0x1CC3C78
	0x01CC38EC MOV X1, X31
	0x01CC38F0 BL 0x3AA5FBC
	0x01CC38F4 LDR X0, [X19 + 0x38]
	0x01CC38F8 STP S1, S0, [X31 + 0x54]
	0x01CC38FC STR S2, [X31 + 0x50]
	0x01CC3900 CBZ X0, 0x1CC3C78
	0x01CC3904 MOV V11.16B, V3.16B
	0x01CC3908 BL 0x1CC3CE4
	0x01CC390C CBZ X0, 0x1CC3C78
	0x01CC3910 MOV X1, X31
	0x01CC3914 BL 0x3AA7658
	0x01CC3918 LDR X0, [X19 + 0x38]
	0x01CC391C CBZ X0, 0x1CC3C78
	0x01CC3920 MOV V14.16B, V0.16B
	0x01CC3924 MOV V15.16B, V1.16B
	0x01CC3928 MOV V8.16B, V2.16B
	0x01CC392C BL 0x1CC3CE4
	0x01CC3930 CBZ X0, 0x1CC3C78
	0x01CC3934 MOV X1, X31
	0x01CC3938 BL 0x3AA5FBC
	0x01CC393C LDR X0, [X19 + 0x38]
	0x01CC3940 CBZ X0, 0x1CC3C78
	0x01CC3944 MOV V9.16B, V0.16B
	0x01CC3948 MOV V10.16B, V1.16B
	0x01CC394C MOV V12.16B, V2.16B
	0x01CC3950 MOV V13.16B, V3.16B
	0x01CC3954 BL 0x1CC3CB0
	0x01CC3958 CBZ X0, 0x1CC3C78
	0x01CC395C MOV X1, X31
	0x01CC3960 BL 0x3AA7658
	0x01CC3964 LDR X0, [X19 + 0x38]
	0x01CC3968 STP S2, S0, [X31 + 0x40]
	0x01CC396C STR S1, [X31 + 0x4C]
	0x01CC3970 CBZ X0, 0x1CC3C78
	0x01CC3974 BL 0x1CC3CB0
	0x01CC3978 CBZ X0, 0x1CC3C78
	0x01CC397C MOV X1, X31
	0x01CC3980 BL 0x3AA5FBC
	0x01CC3984 LDR X0, [X19 + 0x38]
	0x01CC3988 STP S1, S0, [X31 + 0x28]
	0x01CC398C STP S3, S2, [X31 + 0x20]
	0x01CC3990 CBZ X0, 0x1CC3C78
	0x01CC3994 STR S13, [X31 + 0x48]
	0x01CC3998 STR S12, [X31 + 0x30]
	0x01CC399C STP S8, S11, [X31 + 0x38]
	0x01CC39A0 BL 0x1CC3CE4
	0x01CC39A4 CBZ X0, 0x1CC3C78
	0x01CC39A8 MOV X1, X31
	0x01CC39AC BL 0x3AA7658
	0x01CC39B0 LDR X0, [X19 + 0x38]
	0x01CC39B4 CBZ X0, 0x1CC3C78
	0x01CC39B8 STP S2, S1, [X31 + 0x8]
	0x01CC39BC STP S0, S10, [X31 + 0x10]
	0x01CC39C0 STR S9, [X31 + 0x34]
	0x01CC39C4 STP S15, S14, [X31 + 0x18]
	0x01CC39C8 BL 0x1CC3CE4
	0x01CC39CC CBNZ X0, 0x1CC3B24
	0x01CC39D0 B 0x1CC3C78
	0x01CC39D4 ADRP X21, 0x2560000
	0x01CC39D8 LDRB W8, [X21 + 0x43F]
	0x01CC39DC CBNZ W8, 0x1CC39F4
	0x01CC39E0 ADRP X0, 0x228A000
	0x01CC39E4 LDR X0, [X0 + 0x480]
	0x01CC39E8 BL 0x1B6E7F0
	0x01CC39EC MOVZ W8, 0x1
	0x01CC39F0 STRB W8, [X21 + 0x43F]
	0x01CC39F4 ADRP X8, 0x228A000
	0x01CC39F8 LDR X8, [X8 + 0x480]
	0x01CC39FC LDR X8, [X8]
	0x01CC3A00 LDR X8, [X8 + 0xB8]
	0x01CC3A04 LDP S0, S1, [X8]
	0x01CC3A08 LDR V2, [X8 + 0x8]
	0x01CC3A0C MOV X0, X31
	0x01CC3A10 BL 0x3A92C2C
	0x01CC3A14 LDR X0, [X19 + 0x58]
	0x01CC3A18 STP S1, S0, [X31 + 0x74]
	0x01CC3A1C STP S3, S2, [X31 + 0x6C]
	0x01CC3A20 CBZ X0, 0x1CC3C78
	0x01CC3A24 MOV X1, X31
	0x01CC3A28 BL 0x3AA7658
	0x01CC3A2C LDR X0, [X19 + 0x58]
	0x01CC3A30 STP S1, S0, [X31 + 0x64]
	0x01CC3A34 STR S2, [X31 + 0x60]
	0x01CC3A38 CBZ X0, 0x1CC3C78
	0x01CC3A3C MOV X1, X31
	0x01CC3A40 BL 0x3AA5FBC
	0x01CC3A44 LDR X0, [X19 + 0x78]
	0x01CC3A48 STP S1, S0, [X31 + 0xA8]
	0x01CC3A4C STP S3, S2, [X31 + 0xA0]
	0x01CC3A50 CBZ X0, 0x1CC3C78
	0x01CC3A54 MOV X1, X31
	0x01CC3A58 BL 0x3AA7658
	0x01CC3A5C LDR X0, [X19 + 0x78]
	0x01CC3A60 STP S1, S0, [X31 + 0x98]
	0x01CC3A64 STR S2, [X31 + 0x5C]
	0x01CC3A68 CBZ X0, 0x1CC3C78
	0x01CC3A6C MOV X1, X31
	0x01CC3A70 BL 0x3AA5FBC
	0x01CC3A74 LDR X0, [X19 + 0x70]
	0x01CC3A78 STP S1, S0, [X31 + 0x54]
	0x01CC3A7C STR S2, [X31 + 0x50]
	0x01CC3A80 CBZ X0, 0x1CC3C78
	0x01CC3A84 MOV X1, X31
	0x01CC3A88 MOV V8.16B, V3.16B
	0x01CC3A8C BL 0x3AA7658
	0x01CC3A90 LDR X0, [X19 + 0x70]
	0x01CC3A94 CBZ X0, 0x1CC3C78
	0x01CC3A98 MOV X1, X31
	0x01CC3A9C MOV V11.16B, V0.16B
	0x01CC3AA0 MOV V12.16B, V1.16B
	0x01CC3AA4 MOV V9.16B, V2.16B
	0x01CC3AA8 BL 0x3AA5FBC
	0x01CC3AAC LDR X0, [X19 + 0x68]
	0x01CC3AB0 STR S0, [X31 + 0x34]
	0x01CC3AB4 STR S3, [X31 + 0x48]
	0x01CC3AB8 CBZ X0, 0x1CC3C78
	0x01CC3ABC MOV X1, X31
	0x01CC3AC0 MOV V10.16B, V1.16B
	0x01CC3AC4 MOV V13.16B, V2.16B
	0x01CC3AC8 BL 0x3AA7658
	0x01CC3ACC LDR X0, [X19 + 0x78]
	0x01CC3AD0 STR S1, [X31 + 0x4C]
	0x01CC3AD4 CBZ X0, 0x1CC3C78
	0x01CC3AD8 MOV X1, X31
	0x01CC3ADC MOV V14.16B, V0.16B
	0x01CC3AE0 MOV V15.16B, V2.16B
	0x01CC3AE4 STR S13, [X31 + 0x30]
	0x01CC3AE8 STP S9, S8, [X31 + 0x38]
	0x01CC3AEC BL 0x3AA5FBC
	0x01CC3AF0 LDR X0, [X19 + 0x60]
	0x01CC3AF4 CBZ X0, 0x1CC3C78
	0x01CC3AF8 MOV X1, X31
	0x01CC3AFC STP S3, S2, [X31 + 0x20]
	0x01CC3B00 STP S1, S0, [X31 + 0x28]
	0x01CC3B04 STP S15, S14, [X31 + 0x40]
	0x01CC3B08 STP S10, S12, [X31 + 0x14]
	0x01CC3B0C STR S11, [X31 + 0x1C]
	0x01CC3B10 BL 0x3AA7658
	0x01CC3B14 LDR X0, [X19 + 0x70]
	0x01CC3B18 STP S1, S0, [X31 + 0xC]
	0x01CC3B1C STR S2, [X31 + 0x8]
	0x01CC3B20 CBZ X0, 0x1CC3C78
	0x01CC3B24 MOV X1, X31
	0x01CC3B28 BL 0x3AA5FBC
	0x01CC3B2C STP S1, S0, [X31 + 0x90]
	0x01CC3B30 STP S3, S2, [X31 + 0x88]
	0x01CC3B34 LDP S5, S4, [X31 + 0x80]
	0x01CC3B38 LDP S7, S6, [X31 + 0x78]
	0x01CC3B3C LDP S17, S16, [X31 + 0x70]
	0x01CC3B40 LDP S23, S18, [X31 + 0x68]
	0x01CC3B44 LDP S25, S24, [X31 + 0x60]
	0x01CC3B48 LDP S29, S28, [X31 + 0x58]
	0x01CC3B4C LDP S31, S30, [X31 + 0x50]
	0x01CC3B50 LDP S9, S14, [X31 + 0x38]
	0x01CC3B54 LDP S8, S15, [X31 + 0x18]
	0x01CC3B58 LDP S12, S10, [X31 + 0x30]
	0x01CC3B5C LDP S22, S11, [X31 + 0x10]
	0x01CC3B60 LDP S19, S13, [X31 + 0x44]
	0x01CC3B64 LDR V0, [X31 + 0x40]
	0x01CC3B68 LDR V1, [X31 + 0x4C]
	0x01CC3B6C LDP S3, S2, [X31 + 0x28]
	0x01CC3B70 LDP S21, S20, [X31 + 0x20]
	0x01CC3B74 LDP S27, S26, [X31 + 0x8]
	0x01CC3B78 STP S4, S5, [X31 + 0xC0]
	0x01CC3B7C STP S6, S7, [X31 + 0xC8]
	0x01CC3B80 STP S16, S17, [X31 + 0xD0]
	0x01CC3B84 STP S18, S23, [X31 + 0xD8]
	0x01CC3B88 STP S24, S25, [X31 + 0xE0]
	0x01CC3B8C ADRP X8, 0x228C000
	0x01CC3B90 LDR X8, [X8 + 0x3D0]
	0x01CC3B94 STP S1, S0, [X31 + 0xFC]
	0x01CC3B98 LDR V0, [X31 + 0x94]
	0x01CC3B9C LDR V4, [X31 + 0xAC]
	0x01CC3BA0 LDR X2, [X8]
	0x01CC3BA4 ADD X0, X31, 0xB0
	0x01CC3BA8 STR S0, [X31 + 0x120]
	0x01CC3BAC LDR V0, [X31 + 0x90]
	0x01CC3BB0 STR S4, [X31 + 0xE8]
	0x01CC3BB4 LDR V4, [X31 + 0xA8]
	0x01CC3BB8 ADD X1, X31, 0xC0
	0x01CC3BBC STR S0, [X31 + 0x124]
	0x01CC3BC0 LDR V0, [X31 + 0x8C]
	0x01CC3BC4 STR S4, [X31 + 0xEC]
	0x01CC3BC8 LDR V4, [X31 + 0xA4]
	0x01CC3BCC STR S2, [X31 + 0x104]
	0x01CC3BD0 STR S0, [X31 + 0x128]
	0x01CC3BD4 LDR V0, [X31 + 0x88]
	0x01CC3BD8 STR S4, [X31 + 0xF0]
	0x01CC3BDC LDR V4, [X31 + 0xA0]
	0x01CC3BE0 STR S3, [X31 + 0x108]
	0x01CC3BE4 STR S0, [X31 + 0x12C]
	0x01CC3BE8 LDR V0, [X31 + 0x9C]
	0x01CC3BEC STP S4, S19, [X31 + 0xF4]
	0x01CC3BF0 STR S20, [X31 + 0x10C]
	0x01CC3BF4 STR S21, [X31 + 0x110]
	0x01CC3BF8 STR S0, [X31 + 0x14C]
	0x01CC3BFC LDR V0, [X31 + 0x98]
	0x01CC3C00 STR S22, [X31 + 0x114]
	0x01CC3C04 STR S26, [X31 + 0x118]
	0x01CC3C08 STR S27, [X31 + 0x11C]
	0x01CC3C0C STR S15, [X31 + 0x130]
	0x01CC3C10 STR S8, [X31 + 0x134]
	0x01CC3C14 STR S9, [X31 + 0x138]
	0x01CC3C18 STR S10, [X31 + 0x13C]
	0x01CC3C1C STR S11, [X31 + 0x140]
	0x01CC3C20 STR S12, [X31 + 0x144]
	0x01CC3C24 STR S13, [X31 + 0x148]
	0x01CC3C28 STR S0, [X31 + 0x150]
	0x01CC3C2C STR S28, [X31 + 0x154]
	0x01CC3C30 STR S29, [X31 + 0x158]
	0x01CC3C34 STR S30, [X31 + 0x15C]
	0x01CC3C38 STR S31, [X31 + 0x160]
	0x01CC3C3C STR S14, [X31 + 0x164]
	0x01CC3C40 BL 0x21118A8
	0x01CC3C44 LDR X8, [X20 + 0x28]
	0x01CC3C48 LDR X9, [X31 + 0x168]
	0x01CC3C4C CMP X8, X9
	0x01CC3C50 B.NE 0x1CC3C7C
	0x01CC3C54 LDP X20, X19, [X31 + 0x1D0]
	0x01CC3C58 LDP X30, X21, [X31 + 0x1C0]
	0x01CC3C5C LDR X29, [X31 + 0x1B0]
	0x01CC3C60 LDP D9, D8, [X31 + 0x1A0]
	0x01CC3C64 LDP D11, D10, [X31 + 0x190]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+112], X22
	012 Move [X31+120], X21
	013 Move [X31+128], X20
	014 Move [X31+136], X19
	015 Move X21, 0x2561000
	016 Move X20, 0x228B000
	017 Move W8, [X21+1369]
	018 Move X20, [X20+1144]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0x228B000
	025 Move X0, [X0+1144]
	026 Call 0x1B6F7F0
	027 Move X0, 0x228D000
	028 Move X0, [X0+904]
	029 Call 0x1B6F7F0
	030 Move W8, 1
	031 Move [X21+1369], W8
	032 Move X0, [X20]
	033 Move X20, [X19+32]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1B6F8F8
	038 Move X0, X20
	039 Move X1, X31
	040 Move X2, X31
	041 Call Object.op_Equality, X0, X1
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {61}
	046 Move X20, [X31+128]
	047 Move X19, [X31+136]
	048 Move X22, [X31+112]
	049 Move X21, [X31+120]
	050 Move X30, [X31+96]
	051 Move D9, [X31+80]
	052 Move D8, [X31+88]
	053 Move D11, [X31+64]
	054 Move D10, [X31+72]
	055 Move D13, [X31+48]
	056 Move D12, [X31+56]
	057 Move D15, [X31+32]
	058 Move D14, [X31+40]
	059 Add X31, X31, 144
	060 Return 
	061 Move X0, X19
	062 Move X1, X31
	063 Call Component.get_transform, X0
	064 Move X8, [X19+32]
	065 Compare X8, 0
	066 JumpIfEqual {433}
	067 Move X20, X0
	068 Move X0, X8
	069 Move X1, X31
	070 Call Transform.get_position, X0
	071 Compare X20, 0
	072 JumpIfEqual {433}
	073 Move X0, X20
	074 Move X1, X31
	075 Call Transform.set_position, X0, X1
	076 Move X0, [X19+32]
	077 Compare X0, 0
	078 JumpIfEqual {433}
	079 Move X1, X31
	080 Call Transform.get_position, X0
	081 Move X0, [X19+32]
	082 Compare X0, 0
	083 JumpIfEqual {433}
	084 Move X20, [X19+104]
	085 Move X1, X31
	086 Move V8, V0
	087 Move V10, V1
	088 Move V9, V2
	089 Call Transform.get_rotation, X0
	090 Compare X20, 0
	091 JumpIfEqual {433}
	092 Move V4, V0
	093 Move V5, V1
	094 Move V6, V2
	095 Move V7, V3
	096 Move X0, X20
	097 Move V0, V8
	098 Move V1, V10
	099 Move V2, V9
	100 Move V3, V4
	101 Move V4, V5
	102 Move V5, V6
	103 Move V6, V7
	104 Move X1, X31
	105 Call Transform.SetPositionAndRotation, X0, X1, X2
	106 Move X0, [X19+40]
	107 Compare X0, 0
	108 JumpIfEqual {433}
	109 Move X1, X31
	110 Call Transform.get_position, X0
	111 Move X0, [X19+48]
	112 Compare X0, 0
	113 JumpIfEqual {433}
	114 Move X1, X31
	115 Move V8, V0
	116 Move V11, V1
	117 Move V9, V2
	118 Call Transform.get_position, X0
	119 Move [X31+12], S1
	120 Move X21, 0x228D000
	121 Move X21, [X21+904]
	122 Move [X31+104], S9
	123 Move [X31+112], S8
	124 Move [X31+20], S2
	125 Move [X31+28], S0
	126 Move [X31+16], S10
	127 Move X0, [X21]
	128 Move [X31+28], S11
	129 Move W8, [X0+224]
	130 Compare W8, 0
	131 JumpIfNotEqual {134}
	132 Call 0x1B6F8F8
	133 Move X0, [X21]
	134 Move X8, [X0+184]
	135 Move X9, -18976768
	136 Move V8, [X9+2804]
	137 Move X0, X31
	138 Move S0, [X8]
	139 Move S1, [X8+4]
	140 Move V2, [X8+8]
	141 Multiply S0, S0, S8
	142 Multiply S1, S1, S8
	143 Multiply S2, S2, S8
	144 Call Quaternion.Internal_FromEulerRad, X0
	145 Move X8, [X21]
	146 Move V11, V0
	147 Move V10, V1
	148 Move V14, V2
	149 Move X8, [X8+184]
	150 Move X0, X31
	151 Move V13, V3
	152 Move S0, [X8+12]
	153 Move S1, [X8+16]
	154 Move V2, [X8+20]
	155 Multiply S0, S0, S8
	156 Multiply S1, S1, S8
	157 Multiply S2, S2, S8
	158 Call Quaternion.Internal_FromEulerRad, X0
	159 Move X0, [X19+56]
	160 Compare X0, 0
	161 JumpIfEqual {433}
	162 Move X20, [X19+112]
	163 Move X1, X31
	164 Move V12, V0
	165 Move V15, V1
	166 Move V8, V2
	167 Move V9, V3
	168 Call Transform.get_rotation, X0
	169 Compare X20, 0
	170 JumpIfEqual {433}
	171 Multiply S4, S13, S3
	172 Multiply S5, S11, S0
	173 Multiply S6, S10, S1
	174 Multiply S7, S14, S2
	175 Multiply S16, S10, S0
	176 Multiply S17, S14, S3
	177 Multiply S18, S13, S2
	178 Multiply S19, S11, S1
	179 Multiply S20, S13, S1
	180 Multiply S1, S14, S1
	181 Multiply S21, S14, S0
	182 Multiply S0, S13, S0
	183 Multiply S22, S11, S2
	184 Multiply S23, S11, S3
	185 Multiply S3, S10, S3
	186 Multiply S2, S10, S2
	187 Move S14, [X31+104]
	188 Move S13, [X31+108]
	189 Move V10, [X31+28]
	190 Subtract S4, S4, S5
	191 Add S5, S17, S18
	192 Add S3, S3, S20
	193 Add S0, S23, S0
	194 Subtract S4, S4, S6
	195 Add S5, S16, S5
	196 Add S3, S22, S3
	197 Add S0, S1, S0
	198 Subtract S6, S4, S7
	199 Subtract S5, S5, S19
	200 Subtract S4, S3, S21
	201 Subtract S3, S0, S2
	202 Move X0, X20
	203 Move V0, V13
	204 Move V1, V10
	205 Move V2, V14
	206 Move X1, X31
	207 Call Transform.SetPositionAndRotation, X0, X1, X2
	208 Move X0, [X19+64]
	209 Compare X0, 0
	210 JumpIfEqual {433}
	211 Move X20, [X19+120]
	212 Move X1, X31
	213 Call Transform.get_rotation, X0
	214 Compare X20, 0
	215 JumpIfEqual {433}
	216 Multiply S4, S9, S3
	217 Multiply S5, S12, S0
	218 Multiply S6, S15, S1
	219 Multiply S7, S8, S2
	220 Multiply S16, S15, S0
	221 Multiply S17, S8, S3
	222 Multiply S18, S9, S2
	223 Multiply S19, S12, S1
	224 Multiply S20, S9, S1
	225 Multiply S1, S8, S1
	226 Multiply S21, S8, S0
	227 Multiply S22, S12, S2
	228 Multiply S23, S12, S3
	229 Multiply S3, S15, S3
	230 Multiply S2, S15, S2
	231 Move S15, [X31+20]
	232 Move S12, [X31+24]
	233 Move V8, [X31+12]
	234 Multiply S0, S9, S0
	235 Subtract S4, S4, S5
	236 Add S5, S17, S18
	237 Add S3, S3, S20
	238 Add S0, S23, S0
	239 Subtract S4, S4, S6
	240 Add S5, S16, S5
	241 Add S3, S22, S3
	242 Add S0, S1, S0
	243 Subtract S6, S4, S7
	244 Subtract S5, S5, S19
	245 Subtract S4, S3, S21
	246 Subtract S3, S0, S2
	247 Move X0, X20
	248 Move V0, V12
	249 Move V1, V8
	250 Move V2, V15
	251 Move X1, X31
	252 Call Transform.SetPositionAndRotation, X0, X1, X2
	253 Move V2, [X31+16]
	254 Move X20, 0x2561000
	255 NotImplemented "Instruction FCMP not yet implemented."
	256 Move W8, [X20+1089]
	257 Move S1, -0.5
	258 NotImplemented "Instruction FCSEL not yet implemented."
	259 Add S1, S2, S1
	260 NotImplemented "Instruction FCMP not yet implemented."
	261 NotImplemented "Instruction FCSEL not yet implemented."
	262 Compare W8, 0
	263 JumpIfNotEqual {269}
	264 Move X0, 0x228B000
	265 Move X0, [X0+1160]
	266 Call 0x1B6F7F0
	267 Move W8, 1
	268 Move [X20+1089], W8
	269 Move X8, 0x228B000
	270 Move X8, [X8+1160]
	271 Subtract S8, S12, S13
	272 Subtract S9, S11, S11
	273 Subtract S10, S15, S14
	274 Move X0, [X8]
	275 Move W8, [X0+224]
	276 Compare W8, 0
	277 JumpIfNotEqual {279}
	278 Call 0x1B6F8F8
	279 Multiply S0, S8, S8
	280 Multiply S1, S9, S9
	281 Move X8, -18976768
	282 Add S0, S0, S1
	283 Move V1, [X8+2916]
	284 Move X20, 0x228B000
	285 Multiply S2, S10, S10
	286 Move X20, [X20+1152]
	287 Add S0, S2, S0
	288 NotImplemented "Instruction FSQRT not yet implemented."
	289 NotImplemented "Instruction FCMP not yet implemented."
	290 NotImplemented "Instruction FDIV not yet implemented."
	291 NotImplemented "Instruction FDIV not yet implemented."
	292 NotImplemented "Instruction FDIV not yet implemented."
	293 Move X22, 0x2561000
	294 Move W8, [X22+1087]
	295 Compare W8, 0
	296 JumpIfNotEqual {302}
	297 Move X0, 0x228B000
	298 Move X0, [X0+1152]
	299 Call 0x1B6F7F0
	300 Move W8, 1
	301 Move [X22+1087], W8
	302 Move X8, [X20]
	303 Move X8, [X8+184]
	304 Move S8, [X8]
	305 Move S9, [X8+4]
	306 Move V10, [X8+8]
	307 Move X22, 0x2561000
	308 Move W8, [X22+1090]
	309 Compare W8, 0
	310 JumpIfNotEqual {316}
	311 Move X0, 0x228B000
	312 Move X0, [X0+1152]
	313 Call 0x1B6F7F0
	314 Move W8, 1
	315 Move [X22+1090], W8
	316 Move X0, [X19+128]
	317 Compare X0, 0
	318 JumpIfEqual {433}
	319 Move X8, [X20]
	320 Move X9, [X21]
	321 Add S0, S13, S12
	322 Add S1, S11, S11
	323 Move X8, [X8+184]
	324 Move X9, [X9+184]
	325 Add S2, S14, S15
	326 Move S3, 0.5
	327 Multiply S17, S0, S3
	328 Multiply S19, S1, S3
	329 Multiply S18, S2, S3
	330 Move S0, [X8+24]
	331 Move S5, [X8+28]
	332 Move S1, [X9+24]
	333 Move S2, [X9+28]
	334 Move S6, [X8+28]
	335 Move S3, [X8+32]
	336 Move V4, [X8+32]
	337 Move V7, [X8+24]
	338 Multiply S5, S2, S5
	339 Multiply S3, S2, S3
	340 Multiply S16, S9, S4
	341 Multiply S2, S2, S7
	342 Multiply S7, S10, S6
	343 Subtract S14, S16, S7
	344 Multiply S7, S10, S0
	345 Multiply S4, S8, S4
	346 Multiply S6, S8, S6
	347 Multiply S0, S9, S0
	348 Subtract S15, S7, S4
	349 Move V4, [X9+32]
	350 Subtract S11, S6, S0
	351 Multiply S0, S10, S1
	352 Add S0, S18, S0
	353 Add S0, S0, S3
	354 Multiply S3, S9, S1
	355 Multiply S1, S8, S1
	356 Add S3, S19, S3
	357 Add S1, S17, S1
	358 Add S3, S3, S5
	359 Multiply S5, S11, S4
	360 Add S6, S1, S2
	361 Multiply S1, S15, S4
	362 Multiply S4, S14, S4
	363 Add S2, S5, S0
	364 Add S1, S1, S3
	365 Add S0, S4, S6
	366 Move X1, X31
	367 Move [X31+104], S18
	368 Move [X31+112], S17
	369 Move [X31+28], S19
	370 Call Transform.set_position, X0, X1
	371 Move X8, [X21]
	372 Move X19, [X19+136]
	373 Move W9, [X22+1090]
	374 Move X8, [X8+184]
	375 Move S13, [X8+36]
	376 Move S12, [X8+40]
	377 Compare W9, 0
	378 JumpIfNotEqual {386}
	379 Move X0, 0x228B000
	380 Move X0, [X0+1152]
	381 Call 0x1B6F7F0
	382 Move X8, [X21]
	383 Move W9, 1
	384 Move [X22+1090], W9
	385 Move X8, [X8+184]
	386 Compare X19, 0
	387 JumpIfEqual {433}
	388 Move X9, [X20]
	389 Move V4, [X31+108]
	390 Multiply S0, S8, S13
	391 Move V3, [X8+44]
	392 Move X8, [X9+184]
	393 Add S0, S4, S0
	394 Move V4, [X31+28]
	395 Multiply S1, S9, S13
	396 Move S7, [X8+28]
	397 Move S6, [X8+32]
	398 Move V16, [X8+24]
	399 Add S1, S4, S1
	400 Move V4, [X31+104]
	401 Multiply S2, S10, S13
	402 Multiply S5, S15, S3
	403 Multiply S6, S12, S6
	404 Add S2, S4, S2
	405 Multiply S4, S11, S3
	406 Multiply S3, S14, S3
	407 Multiply S7, S12, S7
	408 Multiply S16, S12, S16
	409 Move X0, X19
	410 Move X20, [X31+128]
	411 Move X19, [X31+136]
	412 Move X22, [X31+112]
	413 Move X21, [X31+120]
	414 Move X30, [X31+96]
	415 Move D9, [X31+80]
	416 Move D8, [X31+88]
	417 Move D11, [X31+64]
	418 Move D10, [X31+72]
	419 Move D13, [X31+48]
	420 Move D12, [X31+56]
	421 Move D15, [X31+32]
	422 Move D14, [X31+40]
	423 Add S2, S2, S6
	424 Add S1, S1, S7
	425 Add S0, S0, S16
	426 Add S2, S4, S2
	427 Add S1, S5, S1
	428 Add S0, S3, S0
	429 Move X1, X31
	430 Add X31, X31, 144
	431 Call Transform.set_position, X0, X1
	432 Return 
	433 Call 0x1B6FA1C

Method: System.Void UpdateRagdoll()

Disassembly:
	0x01CC6A98 BL 0x1B6EA0C
	0x01CC6A9C MOV X19, X0
	0x01CC6AA0 ADRP X0, 0x2289000
	0x01CC6AA4 LDR X0, [X0 + 0x4A8]
	0x01CC6AA8 BL 0x1B6E804
	0x01CC6AAC MOV X1, X0
	0x01CC6AB0 MOV X0, X19
	0x01CC6AB4 MOV X2, X31
	0x01CC6AB8 BL 0x31E7550
	0x01CC6ABC ADRP X0, 0x2289000
	0x01CC6AC0 LDR X0, [X0 + 0x4B0]
	0x01CC6AC4 BL 0x1B6E804
	0x01CC6AC8 MOV X1, X0
	0x01CC6ACC MOV X0, X19
	0x01CC6AD0 BL 0x1B6E8E8
	0x01CC6AD4 STP X30, X19, [X31 - 0x10]!
	0x01CC6AD8 LDR X8, [X0 + 0x50]
	0x01CC6ADC CBZ X8, 0x1CC6AEC
	0x01CC6AE0 STR W1, [X8 + 0xC]
	0x01CC6AE4 LDP X30, X19, [X31], #0x10
	0x01CC6AE8 RET
	0x01CC6AEC ADRP X0, 0x2287000
	0x01CC6AF0 LDR X0, [X0 + 0x490]
	0x01CC6AF4 BL 0x1B6E804
	0x01CC6AF8 BL 0x1B6EA0C
	0x01CC6AFC MOV X19, X0
	0x01CC6B00 ADRP X0, 0x2289000
	0x01CC6B04 LDR X0, [X0 + 0x4A8]
	0x01CC6B08 BL 0x1B6E804
	0x01CC6B0C MOV X1, X0
	0x01CC6B10 MOV X0, X19
	0x01CC6B14 MOV X2, X31
	0x01CC6B18 BL 0x31E7550
	0x01CC6B1C ADRP X0, 0x2289000
	0x01CC6B20 LDR X0, [X0 + 0x4B8]
	0x01CC6B24 BL 0x1B6E804
	0x01CC6B28 MOV X1, X0
	0x01CC6B2C MOV X0, X19
	0x01CC6B30 BL 0x1B6E8E8
	0x01CC6B34 STR X30, [X31 - 0x10]!
	0x01CC6B38 BL 0x1CC6834
	0x01CC6B3C ORN W8, W31, W0, 0x0
	0x01CC6B40 UBFM W0, W8, 0x1F, 0x1F
	0x01CC6B44 LDR X30, [X31], #0x10
	0x01CC6B48 RET
	0x01CC6B4C STP X30, X21, [X31 - 0x20]!
	0x01CC6B50 STP X20, X19, [X31 + 0x10]
	0x01CC6B54 ADRP X21, 0x255D000
	0x01CC6B58 ADRP X20, 0x2287000
	0x01CC6B5C LDRB W8, [X21 + 0x55E]
	0x01CC6B60 LDR X20, [X20 + 0x478]
	0x01CC6B64 MOV X19, X0
	0x01CC6B68 TBNZ X8, 0x0, 0x1CC6B80
	0x01CC6B6C ADRP X0, 0x2287000
	0x01CC6B70 LDR X0, [X0 + 0x478]
	0x01CC6B74 BL 0x1B6E7F0
	0x01CC6B78 MOVZ W8, 0x1
	0x01CC6B7C STRB W8, [X21 + 0x55E]
	0x01CC6B80 LDR X0, [X20]
	0x01CC6B84 LDR X20, [X19 + 0x40]
	0x01CC6B88 LDR W8, [X0 + 0xE0]
	0x01CC6B8C CBNZ W8, 0x1CC6B94
	0x01CC6B90 BL 0x1B6E8F8
	0x01CC6B94 MOV X0, X20
	0x01CC6B98 MOV X1, X31
	0x01CC6B9C MOV X2, X31
	0x01CC6BA0 BL 0x3A9D6EC
	0x01CC6BA4 TBZ X0, 0x0, 0x1CC6BC0
	0x01CC6BA8 LDR X0, [X19 + 0x40]
	0x01CC6BAC CBZ X0, 0x1CC6BD0
	0x01CC6BB0 LDP X20, X19, [X31 + 0x10]
	0x01CC6BB4 MOV X1, X31
	0x01CC6BB8 LDP X30, X21, [X31], #0x20
	0x01CC6BBC B 0x1D9E6A0
	0x01CC6BC0 LDP X20, X19, [X31 + 0x10]
	0x01CC6BC4 MOV W0, W31
	0x01CC6BC8 LDP X30, X21, [X31], #0x20
	0x01CC6BCC RET
	0x01CC6BD0 BL 0x1B6EA1C
	0x01CC6BD4 STR X30, [X31 - 0x10]!
	0x01CC6BD8 LDR X0, [X0 + 0xA0]
	0x01CC6BDC CBZ X0, 0x1CC6BE8
	0x01CC6BE0 LDR X30, [X31], #0x10
	0x01CC6BE4 B 0x1CC6BEC
	0x01CC6BE8 BL 0x1B6EA1C
	0x01CC6BEC STP X30, X19, [X31 - 0x10]!
	0x01CC6BF0 MOV W1, W31
	0x01CC6BF4 MOV X19, X0
	0x01CC6BF8 BL 0x1CC7C28
	0x01CC6BFC MOV X0, X19
	0x01CC6C00 MOV W1, W31
	0x01CC6C04 BL 0x1CC87B0
	0x01CC6C08 FMOV S0, 1
	0x01CC6C0C MOV X0, X19
	0x01CC6C10 BL 0x1CC9CA4
	0x01CC6C14 FMOV S0, 1
	0x01CC6C18 MOV X0, X19
	0x01CC6C1C BL 0x1CC7D98
	0x01CC6C20 FMOV S0, 1
	0x01CC6C24 MOV X0, X19
	0x01CC6C28 LDP X30, X19, [X31], #0x10
	0x01CC6C2C B 0x1CC9D38
	0x01CC6C30 STP X30, X23, [X31 - 0x30]!
	0x01CC6C34 STP X22, X21, [X31 + 0x10]
	0x01CC6C38 STP X20, X19, [X31 + 0x20]
	0x01CC6C3C ADRP X20, 0x255D000
	0x01CC6C40 LDRB W8, [X20 + 0x55F]
	0x01CC6C44 MOV X19, X0
	0x01CC6C48 TBNZ X8, 0x0, 0x1CC6CFC
	0x01CC6C4C ADRP X0, 0x2288000
	0x01CC6C50 LDR X0, [X0 + 0x6C8]
	0x01CC6C54 BL 0x1B6E7F0
	0x01CC6C58 ADRP X0, 0x2288000
	0x01CC6C5C LDR X0, [X0 + 0xEF0]
	0x01CC6C60 BL 0x1B6E7F0
	0x01CC6C64 ADRP X0, 0x2289000
	0x01CC6C68 LDR X0, [X0 + 0x4C0]
	0x01CC6C6C BL 0x1B6E7F0
	0x01CC6C70 ADRP X0, 0x2288000
	0x01CC6C74 LDR X0, [X0 + 0x170]
	0x01CC6C78 BL 0x1B6E7F0
	0x01CC6C7C ADRP X0, 0x2287000
	0x01CC6C80 LDR X0, [X0 + 0x4E8]
	0x01CC6C84 BL 0x1B6E7F0
	0x01CC6C88 ADRP X0, 0x2287000
	0x01CC6C8C LDR X0, [X0 + 0xBA0]
	0x01CC6C90 BL 0x1B6E7F0
	0x01CC6C94 ADRP X0, 0x2287000
	0x01CC6C98 LDR X0, [X0 + 0xB90]
	0x01CC6C9C BL 0x1B6E7F0
	0x01CC6CA0 ADRP X0, 0x2288000
	0x01CC6CA4 LDR X0, [X0 + 0x198]
	0x01CC6CA8 BL 0x1B6E7F0
	0x01CC6CAC ADRP X0, 0x2289000
	0x01CC6CB0 LDR X0, [X0 + 0x4C8]
	0x01CC6CB4 BL 0x1B6E7F0
	0x01CC6CB8 ADRP X0, 0x2289000
	0x01CC6CBC LDR X0, [X0 + 0x4D0]
	0x01CC6CC0 BL 0x1B6E7F0
	0x01CC6CC4 ADRP X0, 0x2289000
	0x01CC6CC8 LDR X0, [X0 + 0x4D8]
	0x01CC6CCC BL 0x1B6E7F0
	0x01CC6CD0 ADRP X0, 0x2289000
	0x01CC6CD4 LDR X0, [X0 + 0x4E0]
	0x01CC6CD8 BL 0x1B6E7F0
	0x01CC6CDC ADRP X0, 0x2289000
	0x01CC6CE0 LDR X0, [X0 + 0x4E8]
	0x01CC6CE4 BL 0x1B6E7F0
	0x01CC6CE8 ADRP X0, 0x2288000
	0x01CC6CEC LDR X0, [X0 + 0x450]
	0x01CC6CF0 BL 0x1B6E7F0
	0x01CC6CF4 MOVZ W8, 0x1
	0x01CC6CF8 STRB W8, [X20 + 0x55F]
	0x01CC6CFC MOV X0, X19
	0x01CC6D00 BL 0x1CC6B4C
	0x01CC6D04 TBZ X0, 0x0, 0x1CC7050
	0x01CC6D08 ADRP X8, 0x2287000
	0x01CC6D0C LDR X8, [X8 + 0xB90]
	0x01CC6D10 LDR X0, [X8]
	0x01CC6D14 BL 0x1B6EA0C
	0x01CC6D18 ADRP X8, 0x2289000
	0x01CC6D1C LDR X8, [X8 + 0x4D0]
	0x01CC6D20 MOV X1, X19
	0x01CC6D24 MOV X3, X31
	0x01CC6D28 MOV X20, X0
	0x01CC6D2C LDR X2, [X8]
	0x01CC6D30 BL 0x342E500
	0x01CC6D34 ADRP X8, 0x2287000
	0x01CC6D38 LDR X8, [X8 + 0xBA0]
	0x01CC6D3C MOVZ W1, 0x1
	0x01CC6D40 LDR X0, [X8]
	0x01CC6D44 BL 0x1B6E868
	0x01CC6D48 ADRP X22, 0x2287000
	0x01CC6D4C LDR X22, [X22 + 0x4E8]
	0x01CC6D50 MOV X21, X0
	0x01CC6D54 LDR X8, [X22]
	0x01CC6D58 LDR W9, [X8 + 0xE0]
	0x01CC6D5C CBNZ W9, 0x1CC6D68
	0x01CC6D60 MOV X0, X8
	0x01CC6D64 BL 0x1B6E8F8
	0x01CC6D68 ADRP X23, 0x255D000
	0x01CC6D6C LDRB W8, [X23 + 0x443]
	0x01CC6D70 CBNZ W8, 0x1CC6D88
	0x01CC6D74 ADRP X0, 0x2287000
	0x01CC6D78 LDR X0, [X0 + 0x4E8]
	0x01CC6D7C BL 0x1B6E7F0
	0x01CC6D80 MOVZ W8, 0x1
	0x01CC6D84 STRB W8, [X23 + 0x443]
	0x01CC6D88 LDR X0, [X22]
	0x01CC6D8C LDR W8, [X0 + 0xE0]
	0x01CC6D90 CBNZ W8, 0x1CC6D9C
	0x01CC6D94 BL 0x1B6E8F8
	0x01CC6D98 LDR X0, [X22]
	0x01CC6D9C LDR X8, [X0 + 0xB8]
	0x01CC6DA0 LDR X8, [X8]
	0x01CC6DA4 CBZ X8, 0x1CC7060
	0x01CC6DA8 LDR X8, [X8 + 0xA8]
	0x01CC6DAC CBZ X8, 0x1CC7060
	0x01CC6DB0 LDR X8, [X8 + 0x68]
	0x01CC6DB4 CBZ X8, 0x1CC7060
	0x01CC6DB8 CBZ X21, 0x1CC7060
	0x01CC6DBC LDR X22, [X8 + 0x48]
	0x01CC6DC0 CBZ X22, 0x1CC6DD8
	0x01CC6DC4 LDR X8, [X21]
	0x01CC6DC8 MOV X0, X22
	0x01CC6DCC LDR X1, [X8 + 0x40]
	0x01CC6DD0 BL 0x1B6E8FC
	0x01CC6DD4 CBZ X0, 0x1CC7068
	0x01CC6DD8 LDR W8, [X21 + 0x18]
	0x01CC6DDC CBZ W8, 0x1CC7064
	0x01CC6DE0 MOV X0, X20
	0x01CC6DE4 MOV X1, X21
	0x01CC6DE8 MOV X2, X31
	0x01CC6DEC STR X22, [X21 + 0x20]
	0x01CC6DF0 BL 0x1C8CFDC
	0x01CC6DF4 ADRP X22, 0x2288000
	0x01CC6DF8 LDR X22, [X22 + 0x198]
	0x01CC6DFC LDR X0, [X22]
	0x01CC6E00 LDR W8, [X0 + 0xE0]
	0x01CC6E04 CBNZ W8, 0x1CC6E10
	0x01CC6E08 BL 0x1B6E8F8
	0x01CC6E0C LDR X0, [X22]
	0x01CC6E10 ADRP X23, 0x2288000
	0x01CC6E14 LDR X8, [X0 + 0xB8]
	0x01CC6E18 LDR X23, [X23 + 0xEF0]
	0x01CC6E1C LDR X20, [X8 + 0x30]
	0x01CC6E20 LDR X0, [X23]
	0x01CC6E24 BL 0x1B6EA0C
	0x01CC6E28 ADRP X8, 0x2289000
	0x01CC6E2C LDR X8, [X8 + 0x4D8]
	0x01CC6E30 MOV X1, X19
	0x01CC6E34 MOV X3, X31
	0x01CC6E38 MOV X21, X0
	0x01CC6E3C LDR X2, [X8]
	0x01CC6E40 BL 0x27EA208
	0x01CC6E44 MOV X0, X20
	0x01CC6E48 MOV X1, X21
	0x01CC6E4C MOV X2, X31
	0x01CC6E50 BL 0x322A750
	0x01CC6E54 CBZ X0, 0x1CC6E98
	0x01CC6E58 LDR X21, [X23]
	0x01CC6E5C MOV X20, X0
	0x01CC6E60 MOV X1, X21
	0x01CC6E64 BL 0x1B6E8FC
	0x01CC6E68 CBZ X0, 0x1CC6FAC
	0x01CC6E6C LDR X8, [X22]
	0x01CC6E70 LDR X8, [X8 + 0xB8]
	0x01CC6E74 STR X0, [X8 + 0x30]
	0x01CC6E78 LDR X21, [X23]
	0x01CC6E7C MOV X0, X20
	0x01CC6E80 MOV X1, X21
	0x01CC6E84 BL 0x1B6E8FC
	0x01CC6E88 CBZ X0, 0x1CC6FAC
	0x01CC6E8C LDR X8, [X22]
	0x01CC6E90 LDR X8, [X8 + 0xB8]
	0x01CC6E94 B 0x1CC6EA4
	0x01CC6E98 LDR X8, [X22]
	0x01CC6E9C LDR X8, [X8 + 0xB8]
	0x01CC6EA0 STR X31, [X8 + 0x30]
	0x01CC6EA4 ADRP X23, 0x2289000
	0x01CC6EA8 LDR X20, [X8 + 0x38]
	0x01CC6EAC LDR X23, [X23 + 0x4C0]
	0x01CC6EB0 LDR X0, [X23]
	0x01CC6EB4 BL 0x1B6EA0C
	0x01CC6EB8 ADRP X8, 0x2289000
	0x01CC6EBC LDR X8, [X8 + 0x4E0]
	0x01CC6EC0 MOV X1, X19
	0x01CC6EC4 MOV X3, X31
	0x01CC6EC8 MOV X21, X0
	0x01CC6ECC LDR X2, [X8]
	0x01CC6ED0 BL 0x28D534C
	0x01CC6ED4 MOV X0, X20
	0x01CC6ED8 MOV X1, X21
	0x01CC6EDC MOV X2, X31
	0x01CC6EE0 BL 0x322A750
	0x01CC6EE4 CBZ X0, 0x1CC6F28
	0x01CC6EE8 LDR X21, [X23]
	0x01CC6EEC MOV X20, X0
	0x01CC6EF0 MOV X1, X21
	0x01CC6EF4 BL 0x1B6E8FC
	0x01CC6EF8 CBZ X0, 0x1CC6FAC
	0x01CC6EFC LDR X8, [X22]
	0x01CC6F00 LDR X8, [X8 + 0xB8]
	0x01CC6F04 STR X0, [X8 + 0x38]
	0x01CC6F08 LDR X21, [X23]
	0x01CC6F0C MOV X0, X20
	0x01CC6F10 MOV X1, X21
	0x01CC6F14 BL 0x1B6E8FC
	0x01CC6F18 CBZ X0, 0x1CC6FAC
	0x01CC6F1C LDR X8, [X22]
	0x01CC6F20 LDR X8, [X8 + 0xB8]
	0x01CC6F24 B 0x1CC6F34
	0x01CC6F28 LDR X8, [X22]
	0x01CC6F2C LDR X8, [X8 + 0xB8]
	0x01CC6F30 STR X31, [X8 + 0x38]
	0x01CC6F34 ADRP X23, 0x2288000
	0x01CC6F38 LDR X20, [X8 + 0x40]
	0x01CC6F3C LDR X23, [X23 + 0x6C8]
	0x01CC6F40 LDR X0, [X23]
	0x01CC6F44 BL 0x1B6EA0C
	0x01CC6F48 ADRP X8, 0x2289000
	0x01CC6F4C LDR X8, [X8 + 0x4E8]
	0x01CC6F50 MOV X1, X19
	0x01CC6F54 MOV X3, X31
	0x01CC6F58 MOV X21, X0
	0x01CC6F5C LDR X2, [X8]
	0x01CC6F60 BL 0x27EE464
	0x01CC6F64 MOV X0, X20
	0x01CC6F68 MOV X1, X21
	0x01CC6F6C MOV X2, X31
	0x01CC6F70 BL 0x322A750
	0x01CC6F74 CBZ X0, 0x1CC6FB8
	0x01CC6F78 LDR X21, [X23]
	0x01CC6F7C MOV X20, X0
	0x01CC6F80 MOV X1, X21
	0x01CC6F84 BL 0x1B6E8FC
	0x01CC6F88 CBZ X0, 0x1CC6FAC
	0x01CC6F8C LDR X8, [X22]
	0x01CC6F90 LDR X8, [X8 + 0xB8]
	0x01CC6F94 STR X0, [X8 + 0x40]
	0x01CC6F98 LDR X21, [X23]
	0x01CC6F9C MOV X0, X20
	0x01CC6FA0 MOV X1, X21
	0x01CC6FA4 BL 0x1B6E8FC
	0x01CC6FA8 CBNZ X0, 0x1CC6FC4
	0x01CC6FAC MOV X0, X20
	0x01CC6FB0 MOV X1, X21
	0x01CC6FB4 BL 0x1B6ECDC
	0x01CC6FB8 LDR X8, [X22]
	0x01CC6FBC LDR X8, [X8 + 0xB8]
	0x01CC6FC0 STR X31, [X8 + 0x40]
	0x01CC6FC4 ADRP X22, 0x2288000
	0x01CC6FC8 LDR X22, [X22 + 0x450]
	0x01CC6FCC ADRP X23, 0x2288000
	0x01CC6FD0 LDR X8, [X22]
	0x01CC6FD4 LDR X8, [X8 + 0xB8]
	0x01CC6FD8 LDR X23, [X23 + 0x170]
	0x01CC6FDC LDR X20, [X8 + 0x88]
	0x01CC6FE0 LDR X0, [X23]
	0x01CC6FE4 BL 0x1B6EA0C
	0x01CC6FE8 ADRP X8, 0x2289000
	0x01CC6FEC LDR X8, [X8 + 0x4C8]
	0x01CC6FF0 MOV X1, X19
	0x01CC6FF4 MOV X3, X31
	0x01CC6FF8 MOV X21, X0
	0x01CC6FFC LDR X2, [X8]
	0x01CC7000 BL 0x317DB24
	0x01CC7004 MOV X0, X20
	0x01CC7008 MOV X1, X21
	0x01CC700C MOV X2, X31
	0x01CC7010 BL 0x322A750
	0x01CC7014 CBZ X0, 0x1CC7044
	0x01CC7018 LDR X1, [X23]
	0x01CC701C LDR X8, [X0]
	0x01CC7020 CMP X8, X1
	0x01CC7024 B.NE 0x1CC6FB4
	0x01CC7028 LDR X8, [X22]
	0x01CC702C LDR X8, [X8 + 0xB8]
	0x01CC7030 STR X0, [X8 + 0x88]
	0x01CC7034 LDR X8, [X0]
	0x01CC7038 CMP X8, X1
	0x01CC703C B.EQ 0x1CC7050
	0x01CC7040 B 0x1CC6FB4
	0x01CC7044 LDR X8, [X22]
	0x01CC7048 LDR X8, [X8 + 0xB8]
	0x01CC704C STR X0, [X8 + 0x88]
	0x01CC7050 LDP X20, X19, [X31 + 0x20]
	0x01CC7054 LDP X22, X21, [X31 + 0x10]
	0x01CC7058 LDP X30, X23, [X31], #0x30
	0x01CC705C RET
	0x01CC7060 BL 0x1B6EA1C
	0x01CC7064 BL 0x1B6EA24
	0x01CC7068 BL 0x1B6EA40
	0x01CC706C MOV X1, X31
	0x01CC7070 BL 0x1B6E8E8
	0x01CC7074 STP X30, X23, [X31 - 0x30]!
	0x01CC7078 STP X22, X21, [X31 + 0x10]
	0x01CC707C STP X20, X19, [X31 + 0x20]
	0x01CC7080 ADRP X20, 0x255C000
	0x01CC7084 ADRP X21, 0x2287000
	0x01CC7088 LDRB W8, [X20 + 0x560]
	0x01CC708C LDR X21, [X21 + 0x1C0]
	0x01CC7090 MOV X19, X0
	0x01CC7094 TBNZ X8, 0x0, 0x1CC7160
	0x01CC7098 ADRP X0, 0x2287000
	0x01CC709C LDR X0, [X0 + 0x6C8]
	0x01CC70A0 BL 0x1B6E7F0
	0x01CC70A4 ADRP X0, 0x2287000
	0x01CC70A8 LDR X0, [X0 + 0xEF0]
	0x01CC70AC BL 0x1B6E7F0
	0x01CC70B0 ADRP X0, 0x2288000
	0x01CC70B4 LDR X0, [X0 + 0x4C0]
	0x01CC70B8 BL 0x1B6E7F0
	0x01CC70BC ADRP X0, 0x2287000
	0x01CC70C0 LDR X0, [X0 + 0x170]
	0x01CC70C4 BL 0x1B6E7F0
	0x01CC70C8 ADRP X0, 0x2286000
	0x01CC70CC LDR X0, [X0 + 0x4E8]
	0x01CC70D0 BL 0x1B6E7F0
	0x01CC70D4 ADRP X0, 0x2288000
	0x01CC70D8 LDR X0, [X0 + 0x4F0]
	0x01CC70DC BL 0x1B6E7F0
	0x01CC70E0 ADRP X0, 0x2287000
	0x01CC70E4 LDR X0, [X0 + 0x1C0]
	0x01CC70E8 BL 0x1B6E7F0
	0x01CC70EC ADRP X0, 0x2286000
	0x01CC70F0 LDR X0, [X0 + 0xB90]
	0x01CC70F4 BL 0x1B6E7F0
	0x01CC70F8 ADRP X0, 0x2287000
	0x01CC70FC LDR X0, [X0 + 0x198]
	0x01CC7100 BL 0x1B6E7F0
	0x01CC7104 ADRP X0, 0x2288000
	0x01CC7108 LDR X0, [X0 + 0x4C8]
	0x01CC710C BL 0x1B6E7F0
	0x01CC7110 ADRP X0, 0x2288000
	0x01CC7114 LDR X0, [X0 + 0x4D0]
	0x01CC7118 BL 0x1B6E7F0
	0x01CC711C ADRP X0, 0x2288000
	0x01CC7120 LDR X0, [X0 + 0x4D8]
	0x01CC7124 BL 0x1B6E7F0
	0x01CC7128 ADRP X0, 0x2288000
	0x01CC712C LDR X0, [X0 + 0x4E0]
	0x01CC7130 BL 0x1B6E7F0
	0x01CC7134 ADRP X0, 0x2288000
	0x01CC7138 LDR X0, [X0 + 0x4E8]
	0x01CC713C BL 0x1B6E7F0
	0x01CC7140 ADRP X0, 0x2288000
	0x01CC7144 LDR X0, [X0 + 0x4F8]
	0x01CC7148 BL 0x1B6E7F0
	0x01CC714C ADRP X0, 0x2287000
	0x01CC7150 LDR X0, [X0 + 0x450]
	0x01CC7154 BL 0x1B6E7F0
	0x01CC7158 MOVZ W8, 0x1
	0x01CC715C STRB W8, [X20 + 0x560]
	0x01CC7160 LDR X0, [X21]
	0x01CC7164 LDR W8, [X0 + 0xE0]
	0x01CC7168 CBNZ W8, 0x1CC7170
	0x01CC716C BL 0x1B6E8F8
	0x01CC7170 CBZ X19, 0x1CC7474
	0x01CC7174 LDR W8, [X19 + 0x30]
	0x01CC7178 ADRP X9, 0x2286000
	0x01CC717C LDR X9, [X9 + 0xB90]
	0x01CC7180 ADRP X20, 0x2288000
	0x01CC7184 ORR W8, W8, 0x8
	0x01CC7188 STR W8, [X19 + 0x30]
	0x01CC718C LDR X0, [X9]
	0x01CC7190 ADRP X21, 0x2286000
	0x01CC7194 ADRP X22, 0x2287000
	0x01CC7198 LDR X20, [X20 + 0x4D0]
	0x01CC719C LDR X21, [X21 + 0x4E8]
	0x01CC71A0 LDR X22, [X22 + 0x198]
	0x01CC71A4 BL 0x1B6EA0C
	0x01CC71A8 LDR X2, [X20]
	0x01CC71AC MOV X1, X19
	0x01CC71B0 MOV X3, X31
	0x01CC71B4 MOV X20, X0
	0x01CC71B8 BL 0x342E500
	0x01CC71BC LDR X0, [X21]
	0x01CC71C0 LDR W8, [X0 + 0xE0]
	0x01CC71C4 CBNZ W8, 0x1CC71CC
	0x01CC71C8 BL 0x1B6E8F8
	0x01CC71CC ADRP X23, 0x2287000
	0x01CC71D0 ADRP X21, 0x2288000
	0x01CC71D4 LDR X23, [X23 + 0xEF0]
	0x01CC71D8 LDR X21, [X21 + 0x4D8]
	0x01CC71DC MOV X0, X20
	0x01CC71E0 MOV X1, X31
	0x01CC71E4 BL 0x1C8D564
	0x01CC71E8 LDR X0, [X22]
	0x01CC71EC LDR W8, [X0 + 0xE0]
	0x01CC71F0 CBNZ W8, 0x1CC71FC
	0x01CC71F4 BL 0x1B6E8F8
	0x01CC71F8 LDR X0, [X22]
	0x01CC71FC LDR X8, [X0 + 0xB8]
	0x01CC7200 LDR X0, [X23]
	0x01CC7204 LDR X20, [X8 + 0x30]
	0x01CC7208 BL 0x1B6EA0C
	0x01CC720C LDR X2, [X21]
	0x01CC7210 MOV X1, X19
	0x01CC7214 MOV X3, X31
	0x01CC7218 MOV X21, X0
	0x01CC721C BL 0x27EA208
	0x01CC7220 MOV X0, X20
	0x01CC7224 MOV X1, X21
	0x01CC7228 MOV X2, X31
	0x01CC722C BL 0x322A948
	0x01CC7230 CBZ X0, 0x1CC7274
	0x01CC7234 LDR X21, [X23]
	0x01CC7238 MOV X20, X0
	0x01CC723C MOV X1, X21
	0x01CC7240 BL 0x1B6E8FC
	0x01CC7244 CBZ X0, 0x1CC7388
	0x01CC7248 LDR X8, [X22]
	0x01CC724C LDR X8, [X8 + 0xB8]
	0x01CC7250 STR X0, [X8 + 0x30]
	0x01CC7254 LDR X21, [X23]
	0x01CC7258 MOV X0, X20
	0x01CC725C MOV X1, X21
	0x01CC7260 BL 0x1B6E8FC
	0x01CC7264 CBZ X0, 0x1CC7388
	0x01CC7268 LDR X8, [X22]
	0x01CC726C LDR X8, [X8 + 0xB8]
	0x01CC7270 B 0x1CC7280
	0x01CC7274 LDR X8, [X22]
	0x01CC7278 LDR X8, [X8 + 0xB8]
	0x01CC727C STR X31, [X8 + 0x30]
	0x01CC7280 ADRP X23, 0x2288000
	0x01CC7284 LDR X23, [X23 + 0x4C0]
	0x01CC7288 ADRP X21, 0x2288000
	0x01CC728C LDR X20, [X8 + 0x38]
	0x01CC7290 LDR X0, [X23]
	0x01CC7294 LDR X21, [X21 + 0x4E0]
	0x01CC7298 BL 0x1B6EA0C
	0x01CC729C LDR X2, [X21]
	0x01CC72A0 MOV X1, X19
	0x01CC72A4 MOV X3, X31
	0x01CC72A8 MOV X21, X0
	0x01CC72AC BL 0x28D534C
	0x01CC72B0 MOV X0, X20
	0x01CC72B4 MOV X1, X21
	0x01CC72B8 MOV X2, X31
	0x01CC72BC BL 0x322A948
	0x01CC72C0 CBZ X0, 0x1CC7304
	0x01CC72C4 LDR X21, [X23]
	0x01CC72C8 MOV X20, X0
	0x01CC72CC MOV X1, X21
	0x01CC72D0 BL 0x1B6E8FC
	0x01CC72D4 CBZ X0, 0x1CC7388
	0x01CC72D8 LDR X8, [X22]
	0x01CC72DC LDR X8, [X8 + 0xB8]
	0x01CC72E0 STR X0, [X8 + 0x38]
	0x01CC72E4 LDR X21, [X23]
	0x01CC72E8 MOV X0, X20
	0x01CC72EC MOV X1, X21
	0x01CC72F0 BL 0x1B6E8FC
	0x01CC72F4 CBZ X0, 0x1CC7388
	0x01CC72F8 LDR X8, [X22]
	0x01CC72FC LDR X8, [X8 + 0xB8]
	0x01CC7300 B 0x1CC7310
	0x01CC7304 LDR X8, [X22]
	0x01CC7308 LDR X8, [X8 + 0xB8]
	0x01CC730C STR X31, [X8 + 0x38]
	0x01CC7310 ADRP X23, 0x2287000
	0x01CC7314 LDR X23, [X23 + 0x6C8]
	0x01CC7318 ADRP X21, 0x2288000
	0x01CC731C LDR X20, [X8 + 0x40]
	0x01CC7320 LDR X0, [X23]
	0x01CC7324 LDR X21, [X21 + 0x4E8]
	0x01CC7328 BL 0x1B6EA0C
	0x01CC732C LDR X2, [X21]
	0x01CC7330 MOV X1, X19
	0x01CC7334 MOV X3, X31
	0x01CC7338 MOV X21, X0
	0x01CC733C BL 0x27EE464
	0x01CC7340 MOV X0, X20
	0x01CC7344 MOV X1, X21
	0x01CC7348 MOV X2, X31
	0x01CC734C BL 0x322A948
	0x01CC7350 CBZ X0, 0x1CC7394
	0x01CC7354 LDR X21, [X23]
	0x01CC7358 MOV X20, X0
	0x01CC735C MOV X1, X21
	0x01CC7360 BL 0x1B6E8FC
	0x01CC7364 CBZ X0, 0x1CC7388
	0x01CC7368 LDR X8, [X22]
	0x01CC736C LDR X8, [X8 + 0xB8]
	0x01CC7370 STR X0, [X8 + 0x40]
	0x01CC7374 LDR X21, [X23]
	0x01CC7378 MOV X0, X20
	0x01CC737C MOV X1, X21
	0x01CC7380 BL 0x1B6E8FC
	0x01CC7384 CBNZ X0, 0x1CC73A0
	0x01CC7388 MOV X0, X20
	0x01CC738C MOV X1, X21
	0x01CC7390 BL 0x1B6ECDC

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X25
	012 Move [X31+112], X24
	013 Move [X31+120], X23
	014 Move [X31+128], X22
	015 Move [X31+136], X21
	016 Move [X31+144], X20
	017 Move [X31+152], X19
	018 Move X20, 0x255E000
	019 Move W8, [X20+1370]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x2288000
	026 Move X0, [X0+1216]
	027 Call 0x1B6F7F0
	028 Move W8, 1
	029 Move [X20+1370], W8
	030 Move X21, 0x255E000
	031 Move V8, [X19+168]
	032 Move W8, [X21+1087]
	033 Move V9, [X19+176]
	034 Compare W8, 0
	035 JumpIfNotEqual {41}
	036 Move X0, 0x2288000
	037 Move X0, [X0+1152]
	038 Call 0x1B6F7F0
	039 Move W8, 1
	040 Move [X21+1087], W8
	041 Move X22, 0x2288000
	042 Move X22, [X22+1152]
	043 Move W10, 0xCCCD
	044 NotImplemented "Instruction MOVK not yet implemented."
	045 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	046 Move X8, [X22]
	047 Move X9, [X8+184]
	048 Move V1, [X9]
	049 Move V2, [X9+8]
	050 Move X9, -18989056
	051 Move V3, [X9+3376]
	052 Subtract V1, V1, V8
	053 Subtract S2, S2, S9
	054 NotImplemented "Instruction INVALID not yet implemented."
	055 Multiply S2, S2, S3
	056 Add V8, V8, V1
	057 Add S9, S9, S2
	058 Move [X19+168], D8
	059 Move [X19+176], S9
	060 Move X8, [X8+184]
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 Move V2, [X19+188]
	063 Move V4, [X8]
	064 Move V5, [X8+8]
	065 Move X8, [X19+160]
	066 Subtract V4, V4, V1
	067 Subtract S5, S5, S2
	068 NotImplemented "Instruction INVALID not yet implemented."
	069 Multiply S3, S5, S3
	070 Add V0, V1, V0
	071 Add S1, S2, S3
	072 Move [X19+180], D0
	073 Move [X19+188], S1
	074 Compare X8, 0
	075 JumpIfEqual {636}
	076 Move W9, [X8+24]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X0, [X8+40]
	079 Compare X0, 0
	080 JumpIfEqual {636}
	081 Move X1, X31
	082 Call Rigidbody.get_position, X0
	083 Move W8, 0x999A
	084 NotImplemented "Instruction MOVK not yet implemented."
	085 Move V3, [X19+192]
	086 Move V4, [X19+200]
	087 Move V0.S[1], V1.S[0]
	088 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	089 Move X8, -18989056
	090 Move V10, [X8+3616]
	091 Move X8, [X19+160]
	092 Subtract V0, V0, V3
	093 Subtract S2, S2, S4
	094 NotImplemented "Instruction INVALID not yet implemented."
	095 Multiply S1, S2, S10
	096 Add V0, V8, V0
	097 Add S1, S9, S1
	098 Move [X19+168], D0
	099 Move [X19+176], S1
	100 Compare X8, 0
	101 JumpIfEqual {636}
	102 Move W9, [X8+24]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move X0, [X8+48]
	105 Compare X0, 0
	106 JumpIfEqual {636}
	107 Move X20, 0x2288000
	108 NotImplemented "Instruction LDUR not yet implemented."
	109 Move V9, [X19+188]
	110 Move X20, [X20+1216]
	111 Move X1, X31
	112 Call Rigidbody.get_position, X0
	113 NotImplemented "Instruction LDUR not yet implemented."
	114 Move V4, [X19+212]
	115 Move W8, 0x999A
	116 NotImplemented "Instruction MOVK not yet implemented."
	117 Move V0.S[1], V1.S[0]
	118 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	119 Subtract V0, V0, V3
	120 Subtract S2, S2, S4
	121 NotImplemented "Instruction INVALID not yet implemented."
	122 Multiply S1, S2, S10
	123 Add V0, V8, V0
	124 Add S1, S9, S1
	125 Move [X19+180], D0
	126 Move [X19+188], S1
	127 Move X0, [X20]
	128 Move V10, [X19+168]
	129 Move V9, [X19+176]
	130 Move W8, [X0+224]
	131 Compare W8, 0
	132 JumpIfNotEqual {134}
	133 Call 0x1B6F8F8
	134 Move X0, X31
	135 Call Physics.get_gravity
	136 Move X0, X31
	137 Move [X31+16], D0
	138 Move [X31], D1
	139 Move V8, V2
	140 Call Time.get_fixedDeltaTime
	141 Move V1, [X31]
	142 Move V2, [X31+16]
	143 Move W8, 0xD70A
	144 NotImplemented "Instruction MOVK not yet implemented."
	145 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	146 Move X8, -18989056
	147 Move V2.S[1], V1.S[0]
	148 Move V13, [X8+3552]
	149 Multiply S1, S8, S0
	150 NotImplemented "Instruction INVALID not yet implemented."
	151 NotImplemented "Instruction INVALID not yet implemented."
	152 NotImplemented "Instruction LDUR not yet implemented."
	153 Add V0, V10, V0
	154 Move V10, [X19+188]
	155 Multiply S1, S1, S13
	156 Add S1, S9, S1
	157 Move X0, X31
	158 Move [X19+168], D0
	159 Move [X19+176], S1
	160 Call Physics.get_gravity
	161 Move X0, X31
	162 Move [X31], D0
	163 Move [X31+16], D1
	164 Move V8, V2
	165 Call Time.get_fixedDeltaTime
	166 Move V2, [X31]
	167 Move V1, [X31+16]
	168 Move X8, [X19+160]
	169 Move V2.S[1], V1.S[0]
	170 Multiply S1, S8, S0
	171 NotImplemented "Instruction INVALID not yet implemented."
	172 Multiply S1, S1, S13
	173 NotImplemented "Instruction INVALID not yet implemented."
	174 Add S1, S10, S1
	175 Add V0, V12, V0
	176 Move [X19+180], D0
	177 Move [X19+188], S1
	178 Compare X8, 0
	179 JumpIfEqual {636}
	180 Move W9, [X8+24]
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Move X0, [X8+40]
	183 Compare X0, 0
	184 JumpIfEqual {636}
	185 Move V0, [X19+200]
	186 Move V1, [X19+176]
	187 Move V3, [X19+192]
	188 Move V4, [X19+168]
	189 Move X1, X31
	190 Add S2, S0, S1
	191 Add V0, V3, V4
	192 Move S1, V0.S[1]
	193 Call Rigidbody.set_position, X0, X1
	194 Move X8, [X19+160]
	195 Compare X8, 0
	196 JumpIfEqual {636}
	197 Move W9, [X8+24]
	198 NotImplemented "Instruction CMP not yet implemented."
	199 Move X0, [X8+48]
	200 Compare X0, 0
	201 JumpIfEqual {636}
	202 Move V0, [X19+212]
	203 Move V1, [X19+188]
	204 NotImplemented "Instruction LDUR not yet implemented."
	205 NotImplemented "Instruction LDUR not yet implemented."
	206 Move X1, X31
	207 Add S2, S0, S1
	208 Add V0, V3, V4
	209 Move S1, V0.S[1]
	210 Call Rigidbody.set_position, X0, X1
	211 Move X0, [X19+112]
	212 Compare X0, 0
	213 JumpIfEqual {636}
	214 Move X1, X31
	215 Call Transform.get_position, X0
	216 Move X0, [X19+104]
	217 Compare X0, 0
	218 JumpIfEqual {636}
	219 Move X1, X31
	220 Move V8, V0
	221 Move V9, V1
	222 Move V10, V2
	223 Call Transform.get_position, X0
	224 Move X24, 0x255E000
	225 Move W8, [X24+1286]
	226 Move V11, V0
	227 Move V12, V1
	228 Move V13, V2
	229 Compare W8, 0
	230 JumpIfNotEqual {236}
	231 Move X0, 0x2288000
	232 Move X0, [X0+1160]
	233 Call 0x1B6F7F0
	234 Move W8, 1
	235 Move [X24+1286], W8
	236 Move X23, 0x2288000
	237 Move X23, [X23+1160]
	238 Subtract S11, S8, S11
	239 Subtract S9, S9, S12
	240 Subtract S8, S10, S13
	241 Move X0, [X23]
	242 Move W8, [X0+224]
	243 Compare W8, 0
	244 JumpIfNotEqual {246}
	245 Call 0x1B6F8F8
	246 Multiply S0, S11, S11
	247 Multiply S1, S9, S9
	248 Multiply S2, S8, S8
	249 Add S0, S0, S1
	250 Add S0, S2, S0
	251 NotImplemented "Instruction FSQRT not yet implemented."
	252 Move S1, 0.75
	253 NotImplemented "Instruction FCMP not yet implemented."
	254 Move X8, [X19+160]
	255 Compare X8, 0
	256 JumpIfEqual {636}
	257 Move W9, [X8+24]
	258 NotImplemented "Instruction CMP not yet implemented."
	259 Move X0, [X19+104]
	260 Compare X0, 0
	261 JumpIfEqual {636}
	262 Move X20, [X8+40]
	263 Move X1, X31
	264 Call Transform.get_position, X0
	265 Move X0, [X19+112]
	266 Move [X31+16], S0
	267 Compare X0, 0
	268 JumpIfEqual {636}
	269 Move X1, X31
	270 Move V9, V1
	271 Move V10, V2
	272 Call Transform.get_position, X0
	273 Move X0, [X19+104]
	274 Compare X0, 0
	275 JumpIfEqual {636}
	276 Move X1, X31
	277 Move V11, V0
	278 Move V12, V1
	279 Move V13, V2
	280 Call Transform.get_position, X0
	281 Move X25, 0x255E000
	282 Move W8, [X25+1089]
	283 Move V14, V0
	284 Move V15, V1
	285 Move V8, V2
	286 Compare W8, 0
	287 JumpIfNotEqual {293}
	288 Move X0, 0x2288000
	289 Move X0, [X0+1160]
	290 Call 0x1B6F7F0
	291 Move W8, 1
	292 Move [X25+1089], W8
	293 Move X0, [X23]
	294 Subtract S14, S11, S14
	295 Subtract S11, S12, S15
	296 Subtract S8, S13, S8
	297 Move W8, [X0+224]
	298 Compare W8, 0
	299 JumpIfNotEqual {301}
	300 Call 0x1B6F8F8
	301 Multiply S0, S14, S14
	302 Multiply S1, S11, S11
	303 Move X8, -18989056
	304 Add S0, S0, S1
	305 Move V1, [X8+2916]
	306 Multiply S2, S8, S8
	307 Add S0, S2, S0
	308 NotImplemented "Instruction FSQRT not yet implemented."
	309 NotImplemented "Instruction FCMP not yet implemented."
	310 NotImplemented "Instruction FDIV not yet implemented."
	311 NotImplemented "Instruction FDIV not yet implemented."
	312 NotImplemented "Instruction FDIV not yet implemented."
	313 Move W8, [X21+1087]
	314 Compare W8, 0
	315 JumpIfNotEqual {321}
	316 Move X0, 0x2288000
	317 Move X0, [X0+1152]
	318 Call 0x1B6F7F0
	319 Move W8, 1
	320 Move [X21+1087], W8
	321 Move X8, [X22]
	322 Move X8, [X8+184]
	323 Move S0, [X8]
	324 Move S1, [X8+4]
	325 Move V2, [X8+8]
	326 Compare X20, 0
	327 JumpIfEqual {636}
	328 Move S3, 0.75
	329 Multiply S2, S2, S3
	330 Multiply S1, S1, S3
	331 Multiply S0, S0, S3
	332 Move V3, [X31+16]
	333 Add S2, S10, S2
	334 Add S1, S9, S1
	335 Move X0, X20
	336 Add S0, S3, S0
	337 Move X1, X31
	338 Call Rigidbody.set_position, X0, X1
	339 Move X8, [X19+160]
	340 Compare X8, 0
	341 JumpIfEqual {636}
	342 Move W9, [X8+24]
	343 NotImplemented "Instruction CMP not yet implemented."
	344 Move W9, [X21+1087]
	345 Move X20, [X8+40]
	346 Compare W9, 0
	347 JumpIfNotEqual {353}
	348 Move X0, 0x2288000
	349 Move X0, [X0+1152]
	350 Call 0x1B6F7F0
	351 Move W8, 1
	352 Move [X21+1087], W8
	353 Compare X20, 0
	354 JumpIfEqual {636}
	355 Move X8, [X22]
	356 Move X0, X20
	357 Move X1, X31
	358 Move X8, [X8+184]
	359 Move S1, [X8+4]
	360 Move S2, [X8+8]
	361 Move V0, [X8]
	362 Call Rigidbody.set_velocity, X0, X1
	363 Move X0, [X19+120]
	364 Compare X0, 0
	365 JumpIfEqual {636}
	366 Move X1, X31
	367 Call Transform.get_position, X0
	368 Move X0, [X19+104]
	369 Compare X0, 0
	370 JumpIfEqual {636}
	371 Move X1, X31
	372 Move V8, V0
	373 Move V9, V1
	374 Move V10, V2
	375 Call Transform.get_position, X0
	376 Move W8, [X24+1286]
	377 Move V11, V0
	378 Move V12, V1
	379 Move V13, V2
	380 Compare W8, 0
	381 JumpIfNotEqual {387}
	382 Move X0, 0x2287000
	383 Move X0, [X0+1160]
	384 Call 0x1B6F7F0
	385 Move W8, 1
	386 Move [X24+1286], W8
	387 Move X0, [X23]
	388 Subtract S11, S8, S11
	389 Subtract S9, S9, S12
	390 Subtract S8, S10, S13
	391 Move W8, [X0+224]
	392 Compare W8, 0
	393 JumpIfNotEqual {395}
	394 Call 0x1B6F8F8
	395 Multiply S0, S11, S11
	396 Multiply S1, S9, S9
	397 Multiply S2, S8, S8
	398 Add S0, S0, S1
	399 Add S0, S2, S0
	400 NotImplemented "Instruction FSQRT not yet implemented."
	401 Move S1, 0.75
	402 NotImplemented "Instruction FCMP not yet implemented."
	403 Move X8, [X19+160]
	404 Compare X8, 0
	405 JumpIfEqual {636}
	406 Move W9, [X8+24]
	407 NotImplemented "Instruction CMP not yet implemented."
	408 Move X0, [X19+104]
	409 Compare X0, 0
	410 JumpIfEqual {636}
	411 Move X20, [X8+48]
	412 Move X1, X31
	413 Call Transform.get_position, X0
	414 Move X0, [X19+120]
	415 Move [X31+16], S0
	416 Compare X0, 0
	417 JumpIfEqual {636}
	418 Move X1, X31
	419 Move V9, V1
	420 Move V10, V2
	421 Call Transform.get_position, X0
	422 Move X0, [X19+104]
	423 Compare X0, 0
	424 JumpIfEqual {636}
	425 Move X1, X31
	426 Move V11, V0
	427 Move V12, V1
	428 Move V13, V2
	429 Call Transform.get_position, X0
	430 Move X24, 0x255D000
	431 Move W8, [X24+1089]
	432 Move V14, V0
	433 Move V15, V1
	434 Move V8, V2
	435 Compare W8, 0
	436 JumpIfNotEqual {442}
	437 Move X0, 0x2287000
	438 Move X0, [X0+1160]
	439 Call 0x1B6F7F0
	440 Move W8, 1
	441 Move [X24+1089], W8
	442 Move X0, [X23]
	443 Subtract S14, S11, S14
	444 Subtract S11, S12, S15
	445 Subtract S8, S13, S8
	446 Move W8, [X0+224]
	447 Compare W8, 0
	448 JumpIfNotEqual {450}
	449 Call 0x1B6F8F8
	450 Multiply S0, S14, S14
	451 Multiply S1, S11, S11
	452 Move X8, -18993152
	453 Add S0, S0, S1
	454 Move V1, [X8+2916]
	455 Multiply S2, S8, S8
	456 Add S0, S2, S0
	457 NotImplemented "Instruction FSQRT not yet implemented."
	458 NotImplemented "Instruction FCMP not yet implemented."
	459 NotImplemented "Instruction FDIV not yet implemented."
	460 NotImplemented "Instruction FDIV not yet implemented."
	461 NotImplemented "Instruction FDIV not yet implemented."
	462 Move W8, [X21+1087]
	463 Compare W8, 0
	464 JumpIfNotEqual {470}
	465 Move X0, 0x2287000
	466 Move X0, [X0+1152]
	467 Call 0x1B6F7F0
	468 Move W8, 1
	469 Move [X21+1087], W8
	470 Move X8, [X22]
	471 Move X8, [X8+184]
	472 Move S0, [X8]
	473 Move S1, [X8+4]
	474 Move V2, [X8+8]
	475 Compare X20, 0
	476 JumpIfEqual {636}
	477 Move S3, 0.75
	478 Multiply S2, S2, S3
	479 Multiply S1, S1, S3
	480 Multiply S0, S0, S3
	481 Move V3, [X31+16]
	482 Add S2, S10, S2
	483 Add S1, S9, S1
	484 Move X0, X20
	485 Add S0, S3, S0
	486 Move X1, X31
	487 Call Rigidbody.set_position, X0, X1
	488 Move X8, [X19+160]
	489 Compare X8, 0
	490 JumpIfEqual {636}
	491 Move W9, [X8+24]
	492 NotImplemented "Instruction CMP not yet implemented."
	493 Move W9, [X21+1087]
	494 Move X20, [X8+48]
	495 Compare W9, 0
	496 JumpIfNotEqual {502}
	497 Move X0, 0x2287000
	498 Move X0, [X0+1152]
	499 Call 0x1B6F7F0
	500 Move W8, 1
	501 Move [X21+1087], W8
	502 Compare X20, 0
	503 JumpIfEqual {636}
	504 Move X8, [X22]
	505 Move X0, X20
	506 Move X1, X31
	507 Move X8, [X8+184]
	508 Move S1, [X8+4]
	509 Move S2, [X8+8]
	510 Move V0, [X8]
	511 Call Rigidbody.set_velocity, X0, X1
	512 Move X8, [X19+160]
	513 Compare X8, 0
	514 JumpIfEqual {636}
	515 Move W9, [X8+24]
	516 NotImplemented "Instruction CMP not yet implemented."
	517 Move X0, [X8+40]
	518 Compare X0, 0
	519 JumpIfEqual {636}
	520 Move X1, X31
	521 Call Rigidbody.get_position, X0
	522 Move X8, [X19+160]
	523 Move [X19+192], S0
	524 Move [X19+200], S1
	525 Move [X19+200], S2
	526 Compare X8, 0
	527 JumpIfEqual {636}
	528 Move W9, [X8+24]
	529 NotImplemented "Instruction CMP not yet implemented."
	530 Move X0, [X8+48]
	531 Compare X0, 0
	532 JumpIfEqual {636}
	533 Move X1, X31
	534 Call Rigidbody.get_position, X0
	535 Move X8, [X19+160]
	536 Move [X19+204], S0
	537 Move [X19+212], S1
	538 Move [X19+212], S2
	539 Compare X8, 0
	540 JumpIfEqual {636}
	541 Move W9, [X8+24]
	542 NotImplemented "Instruction CMP not yet implemented."
	543 Move X0, [X8+40]
	544 Compare X0, 0
	545 JumpIfEqual {636}
	546 Move X20, [X19+112]
	547 Move X1, X31
	548 Call Rigidbody.get_position, X0
	549 Move X8, [X19+160]
	550 Compare X8, 0
	551 JumpIfEqual {636}
	552 Move W9, [X8+24]
	553 NotImplemented "Instruction CMP not yet implemented."
	554 Move X0, [X8+40]
	555 Compare X0, 0
	556 JumpIfEqual {636}
	557 Move X1, X31
	558 Move V8, V0
	559 Move V9, V1
	560 Move V10, V2
	561 Call Rigidbody.get_rotation, X0
	562 Compare X20, 0
	563 JumpIfEqual {636}
	564 Move V4, V0
	565 Move V5, V1
	566 Move V6, V2
	567 Move V7, V3
	568 Move X0, X20
	569 Move V0, V8
	570 Move V1, V9
	571 Move V2, V10
	572 Move V3, V4
	573 Move V4, V5
	574 Move V5, V6
	575 Move V6, V7
	576 Move X1, X31
	577 Call Transform.SetPositionAndRotation, X0, X1, X2
	578 Move X8, [X19+160]
	579 Compare X8, 0
	580 JumpIfEqual {636}
	581 Move W9, [X8+24]
	582 NotImplemented "Instruction CMP not yet implemented."
	583 Move X0, [X8+48]
	584 Compare X0, 0
	585 JumpIfEqual {636}
	586 Move X20, [X19+120]
	587 Move X1, X31
	588 Call Rigidbody.get_position, X0
	589 Move X8, [X19+160]
	590 Compare X8, 0
	591 JumpIfEqual {636}
	592 Move W9, [X8+24]
	593 NotImplemented "Instruction CMP not yet implemented."
	594 Move X0, [X8+48]
	595 Compare X0, 0
	596 JumpIfEqual {636}
	597 Move X1, X31
	598 Move V8, V0
	599 Move V9, V1
	600 Move V10, V2
	601 Call Rigidbody.get_rotation, X0
	602 Compare X20, 0
	603 JumpIfEqual {636}
	604 Move V4, V0
	605 Move V5, V1
	606 Move V6, V2
	607 Move X0, X20
	608 Move V0, V8
	609 Move V1, V9
	610 Move V2, V10
	611 Move X20, [X31+144]
	612 Move X19, [X31+152]
	613 Move X22, [X31+128]
	614 Move X21, [X31+136]
	615 Move X24, [X31+112]
	616 Move X23, [X31+120]
	617 Move X30, [X31+96]
	618 Move X25, [X31+104]
	619 Move D9, [X31+80]
	620 Move D8, [X31+88]
	621 Move D11, [X31+64]
	622 Move D10, [X31+72]
	623 Move D13, [X31+48]
	624 Move D12, [X31+56]
	625 Move D15, [X31+32]
	626 Move D14, [X31+40]
	627 Move V7, V3
	628 Move V3, V4
	629 Move V4, V5
	630 Move V5, V6
	631 Move V6, V7
	632 Move X1, X31
	633 Add X31, X31, 160
	634 Call Transform.SetPositionAndRotation, X0, X1, X2
	635 Return 
	636 Call 0x1B6FA1C
	637 Call 0x1B6FA24

Method: System.Void UpdateElasticHip()

Disassembly:
	0x01CC67A8 FMOV S3, 1
	0x01CC67AC MOV X0, X19
	0x01CC67B0 MOV X2, X31
	0x01CC67B4 LDR W1, [X8 + 0x30]
	0x01CC67B8 BL 0x3A7D234
	0x01CC67BC LDR W8, [X20 + 0x18]
	0x01CC67C0 ADD W21, W21, 0x1
	0x01CC67C4 CMP W21, W8
	0x01CC67C8 B.LT 0x1CC673C
	0x01CC67CC MOV W0, W31
	0x01CC67D0 LDP X20, X19, [X31 + 0x30]
	0x01CC67D4 LDP X22, X21, [X31 + 0x20]
	0x01CC67D8 LDP X24, X23, [X31 + 0x10]
	0x01CC67DC LDR X30, [X31], #0x40
	0x01CC67E0 RET
	0x01CC67E4 BL 0x1B6EA1C
	0x01CC67E8 BL 0x1B6EA24
	0x01CC67EC LDR X0, [X0 + 0x18]
	0x01CC67F0 RET
	0x01CC67F4 STP X30, X19, [X31 - 0x10]!
	0x01CC67F8 ADRP X0, 0x2287000
	0x01CC67FC LDR X0, [X0 + 0x990]
	0x01CC6800 BL 0x1B6E804
	0x01CC6804 BL 0x1B6EA0C
	0x01CC6808 MOV X1, X31
	0x01CC680C MOV X19, X0
	0x01CC6810 BL 0x31E99B4
	0x01CC6814 ADRP X0, 0x2289000
	0x01CC6818 LDR X0, [X0 + 0x458]
	0x01CC681C BL 0x1B6E804
	0x01CC6820 MOV X1, X0
	0x01CC6824 MOV X0, X19
	0x01CC6828 BL 0x1B6E8E8
	0x01CC682C LDR X0, [X0 + 0x18]
	0x01CC6830 RET
	0x01CC6834 STP X30, X19, [X31 - 0x10]!
	0x01CC6838 LDR X8, [X0 + 0x50]
	0x01CC683C CBZ X8, 0x1CC684C
	0x01CC6840 LDR W0, [X8]
	0x01CC6844 LDP X30, X19, [X31], #0x10
	0x01CC6848 RET
	0x01CC684C ADRP X0, 0x2287000
	0x01CC6850 LDR X0, [X0 + 0x490]
	0x01CC6854 BL 0x1B6E804
	0x01CC6858 BL 0x1B6EA0C
	0x01CC685C MOV X19, X0
	0x01CC6860 ADRP X0, 0x2289000
	0x01CC6864 LDR X0, [X0 + 0x460]
	0x01CC6868 BL 0x1B6E804
	0x01CC686C MOV X1, X0
	0x01CC6870 MOV X0, X19
	0x01CC6874 MOV X2, X31
	0x01CC6878 BL 0x31E7550
	0x01CC687C ADRP X0, 0x2289000
	0x01CC6880 LDR X0, [X0 + 0x468]
	0x01CC6884 BL 0x1B6E804
	0x01CC6888 MOV X1, X0
	0x01CC688C MOV X0, X19
	0x01CC6890 BL 0x1B6E8E8
	0x01CC6894 STP X30, X19, [X31 - 0x10]!
	0x01CC6898 LDR X8, [X0 + 0x50]
	0x01CC689C CBZ X8, 0x1CC68AC
	0x01CC68A0 STR W1, [X8]
	0x01CC68A4 LDP X30, X19, [X31], #0x10
	0x01CC68A8 RET
	0x01CC68AC ADRP X0, 0x2287000
	0x01CC68B0 LDR X0, [X0 + 0x490]
	0x01CC68B4 BL 0x1B6E804
	0x01CC68B8 BL 0x1B6EA0C
	0x01CC68BC MOV X19, X0
	0x01CC68C0 ADRP X0, 0x2289000
	0x01CC68C4 LDR X0, [X0 + 0x460]
	0x01CC68C8 BL 0x1B6E804
	0x01CC68CC MOV X1, X0
	0x01CC68D0 MOV X0, X19
	0x01CC68D4 MOV X2, X31
	0x01CC68D8 BL 0x31E7550
	0x01CC68DC ADRP X0, 0x2289000
	0x01CC68E0 LDR X0, [X0 + 0x470]
	0x01CC68E4 BL 0x1B6E804
	0x01CC68E8 MOV X1, X0
	0x01CC68EC MOV X0, X19
	0x01CC68F0 BL 0x1B6E8E8
	0x01CC68F4 STP X30, X19, [X31 - 0x10]!
	0x01CC68F8 LDR X8, [X0 + 0x50]
	0x01CC68FC CBZ X8, 0x1CC690C
	0x01CC6900 LDR W0, [X8 + 0x4]
	0x01CC6904 LDP X30, X19, [X31], #0x10
	0x01CC6908 RET
	0x01CC690C ADRP X0, 0x2287000
	0x01CC6910 LDR X0, [X0 + 0x490]
	0x01CC6914 BL 0x1B6E804
	0x01CC6918 BL 0x1B6EA0C
	0x01CC691C MOV X19, X0
	0x01CC6920 ADRP X0, 0x2289000
	0x01CC6924 LDR X0, [X0 + 0x478]
	0x01CC6928 BL 0x1B6E804
	0x01CC692C MOV X1, X0
	0x01CC6930 MOV X0, X19
	0x01CC6934 MOV X2, X31
	0x01CC6938 BL 0x31E7550
	0x01CC693C ADRP X0, 0x2289000
	0x01CC6940 LDR X0, [X0 + 0x480]
	0x01CC6944 BL 0x1B6E804
	0x01CC6948 MOV X1, X0
	0x01CC694C MOV X0, X19
	0x01CC6950 BL 0x1B6E8E8
	0x01CC6954 STP X30, X19, [X31 - 0x10]!
	0x01CC6958 LDR X8, [X0 + 0x50]
	0x01CC695C CBZ X8, 0x1CC696C
	0x01CC6960 STR W1, [X8 + 0x4]
	0x01CC6964 LDP X30, X19, [X31], #0x10
	0x01CC6968 RET
	0x01CC696C ADRP X0, 0x2287000
	0x01CC6970 LDR X0, [X0 + 0x490]
	0x01CC6974 BL 0x1B6E804
	0x01CC6978 BL 0x1B6EA0C
	0x01CC697C MOV X19, X0
	0x01CC6980 ADRP X0, 0x2289000
	0x01CC6984 LDR X0, [X0 + 0x478]
	0x01CC6988 BL 0x1B6E804
	0x01CC698C MOV X1, X0
	0x01CC6990 MOV X0, X19
	0x01CC6994 MOV X2, X31
	0x01CC6998 BL 0x31E7550
	0x01CC699C ADRP X0, 0x2289000
	0x01CC69A0 LDR X0, [X0 + 0x488]
	0x01CC69A4 BL 0x1B6E804
	0x01CC69A8 MOV X1, X0
	0x01CC69AC MOV X0, X19
	0x01CC69B0 BL 0x1B6E8E8
	0x01CC69B4 STP X30, X19, [X31 - 0x10]!
	0x01CC69B8 LDR X8, [X0 + 0x50]
	0x01CC69BC CBZ X8, 0x1CC69CC
	0x01CC69C0 LDR W0, [X8 + 0x8]
	0x01CC69C4 LDP X30, X19, [X31], #0x10
	0x01CC69C8 RET
	0x01CC69CC ADRP X0, 0x2287000
	0x01CC69D0 LDR X0, [X0 + 0x490]
	0x01CC69D4 BL 0x1B6E804
	0x01CC69D8 BL 0x1B6EA0C
	0x01CC69DC MOV X19, X0
	0x01CC69E0 ADRP X0, 0x2289000
	0x01CC69E4 LDR X0, [X0 + 0x490]
	0x01CC69E8 BL 0x1B6E804
	0x01CC69EC MOV X1, X0
	0x01CC69F0 MOV X0, X19
	0x01CC69F4 MOV X2, X31
	0x01CC69F8 BL 0x31E7550
	0x01CC69FC ADRP X0, 0x2289000
	0x01CC6A00 LDR X0, [X0 + 0x498]
	0x01CC6A04 BL 0x1B6E804
	0x01CC6A08 MOV X1, X0
	0x01CC6A0C MOV X0, X19
	0x01CC6A10 BL 0x1B6E8E8
	0x01CC6A14 STP X30, X19, [X31 - 0x10]!
	0x01CC6A18 LDR X8, [X0 + 0x50]
	0x01CC6A1C CBZ X8, 0x1CC6A2C
	0x01CC6A20 STR W1, [X8 + 0x8]
	0x01CC6A24 LDP X30, X19, [X31], #0x10
	0x01CC6A28 RET
	0x01CC6A2C ADRP X0, 0x2287000
	0x01CC6A30 LDR X0, [X0 + 0x490]
	0x01CC6A34 BL 0x1B6E804
	0x01CC6A38 BL 0x1B6EA0C
	0x01CC6A3C MOV X19, X0
	0x01CC6A40 ADRP X0, 0x2289000
	0x01CC6A44 LDR X0, [X0 + 0x490]
	0x01CC6A48 BL 0x1B6E804
	0x01CC6A4C MOV X1, X0
	0x01CC6A50 MOV X0, X19
	0x01CC6A54 MOV X2, X31
	0x01CC6A58 BL 0x31E7550
	0x01CC6A5C ADRP X0, 0x2289000
	0x01CC6A60 LDR X0, [X0 + 0x4A0]
	0x01CC6A64 BL 0x1B6E804
	0x01CC6A68 MOV X1, X0
	0x01CC6A6C MOV X0, X19
	0x01CC6A70 BL 0x1B6E8E8
	0x01CC6A74 STP X30, X19, [X31 - 0x10]!
	0x01CC6A78 LDR X8, [X0 + 0x50]
	0x01CC6A7C CBZ X8, 0x1CC6A8C
	0x01CC6A80 LDR W0, [X8 + 0xC]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], D13
	003 Move [X31+72], D12
	004 Move [X31+80], D11
	005 Move [X31+88], D10
	006 Move [X31+96], D9
	007 Move [X31+104], D8
	008 Move [X31+112], X30
	009 Move [X31+128], X22
	010 Move [X31+136], X21
	011 Move [X31+144], X20
	012 Move [X31+152], X19
	013 Move X21, 0x255E000
	014 Move V8, [X0+384]
	015 Move W8, [X21+1087]
	016 Move V9, [X0+392]
	017 Move X19, X0
	018 Add X20, X0, 360
	019 Compare W8, 0
	020 JumpIfNotEqual {26}
	021 Move X0, 0x2288000
	022 Move X0, [X0+1152]
	023 Call 0x1B6F7F0
	024 Move W8, 1
	025 Move [X21+1087], W8
	026 Move X21, 0x2288000
	027 Move X21, [X21+1152]
	028 Move V0, [X19+292]
	029 Move S1, 1
	030 Move S3, W31
	031 Move X8, [X21]
	032 NotImplemented "Instruction FMIN not yet implemented."
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 NotImplemented "Instruction FCSEL not yet implemented."
	035 Move X9, [X8+184]
	036 Move V3, [X19+404]
	037 Move V0, [X9]
	038 Move V2, [X9+8]
	039 Subtract V0, V0, V8
	040 Subtract S2, S2, S9
	041 NotImplemented "Instruction INVALID not yet implemented."
	042 Multiply S2, S2, S1
	043 Add V0, V8, V0
	044 Add S2, S9, S2
	045 Move [X19+384], D0
	046 Move [X19+392], S2
	047 Move X8, [X8+184]
	048 NotImplemented "Instruction LDUR not yet implemented."
	049 Move V2, [X8]
	050 Move V4, [X8+8]
	051 Subtract V2, V2, V0
	052 NotImplemented "Instruction INVALID not yet implemented."
	053 Add V0, V0, V2
	054 Move [X20+36], D0
	055 Move X0, [X19+328]
	056 Subtract S0, S4, S3
	057 Multiply S0, S0, S1
	058 Add S0, S3, S0
	059 Move [X19+404], S0
	060 Compare X0, 0
	061 JumpIfEqual {203}
	062 Move V2, [X19+344]
	063 Move V1, [X19+340]
	064 Move V0, [X19+336]
	065 Move X1, X31
	066 Call Transform.TransformPoint, X0, X1
	067 Move X0, [X19+328]
	068 Move [X31+48], D0
	069 Move [X31+16], D1
	070 Move [X31+32], D2
	071 Compare X0, 0
	072 JumpIfEqual {203}
	073 Move V2, [X19+356]
	074 Move V1, [X19+352]
	075 Move V0, [X19+348]
	076 Move X1, X31
	077 Call Transform.TransformPoint, X0, X1
	078 Move V7, [X31+3]
	079 Move V17, [X31+1]
	080 Move V16, [X20]
	081 Move V6, [X19+376]
	082 Move V3, [X19+288]
	083 Move V7.S[1], V17.S[0]
	084 Move V17, [X31+2]
	085 Move V4, [X19+24]
	086 Move V5, [X19+400]
	087 Move V1.S[1], V2.S[0]
	088 Move V7.S[2], V17.S[0]
	089 Move V7.S[3], V0.S[0]
	090 Subtract V0, V7, V16
	091 Subtract V1, V1, V6
	092 NotImplemented "Instruction INVALID not yet implemented."
	093 NotImplemented "Instruction INVALID not yet implemented."
	094 Add V2, V4, V0
	095 Add V0, V5, V1
	096 Move X0, X31
	097 Move [X31], V16
	098 Move [X31+3], V2
	099 Move [X19+24], V2
	100 Move [X19+400], D0
	101 Call Time.get_deltaTime
	102 Move V2, [X31+3]
	103 Move V3, [X31]
	104 Move V8, [X19+380]
	105 Move V11, [X19+404]
	106 NotImplemented "Instruction INVALID not yet implemented."
	107 Multiply S0, S0, V2.S[2]
	108 Move S2, V3.S[2]
	109 Add V1, V3, V1
	110 Add S0, S2, S0
	111 Move [X19+360], D1
	112 Move [X19+368], S0
	113 NotImplemented "Instruction LDUR not yet implemented."
	114 NotImplemented "Instruction LDUR not yet implemented."
	115 Move X0, X31
	116 Call Time.get_deltaTime
	117 NotImplemented "Instruction INVALID not yet implemented."
	118 Add V1, V9, V1
	119 Move [X20+12], D1
	120 Move X20, [X19+312]
	121 Multiply S0, S11, S0
	122 Add S0, S8, S0
	123 Move [X19+380], S0
	124 Compare X20, 0
	125 JumpIfEqual {203}
	126 Move V8, [X19+368]
	127 Move V9, [X19+364]
	128 Move V10, [X19+360]
	129 Move X0, X20
	130 Move X1, X31
	131 Call Transform.get_position, X0
	132 Move X22, 0x255E000
	133 Move W8, [X22+1090]
	134 Subtract S10, S10, S0
	135 Subtract S9, S9, S1
	136 Subtract S8, S8, S2
	137 Compare W8, 0
	138 JumpIfNotEqual {144}
	139 Move X0, 0x2288000
	140 Move X0, [X0+1152]
	141 Call 0x1B6F7F0
	142 Move W8, 1
	143 Move [X22+1090], W8
	144 Move X8, [X21]
	145 Move V0, V10
	146 Move V1, V9
	147 Move V2, V8
	148 Move X8, [X8+184]
	149 Move X0, X31
	150 Move S3, [X8+24]
	151 Move S4, [X8+28]
	152 Move V5, [X8+32]
	153 Call Quaternion.LookRotation, X0, X1
	154 Move X0, X20
	155 Move X1, X31
	156 Call Transform.set_rotation, X0, X1
	157 Move X20, [X19+320]
	158 Compare X20, 0
	159 JumpIfEqual {203}
	160 Move V11, [X19+380]
	161 Move V12, [X19+376]
	162 Move V13, [X19+372]
	163 Move X0, X20
	164 Move X1, X31
	165 Call Transform.get_position, X0
	166 Move W8, [X22+1090]
	167 Move V8, V0
	168 Move V9, V1
	169 Move V10, V2
	170 Compare W8, 0
	171 JumpIfNotEqual {177}
	172 Move X0, 0x2288000
	173 Move X0, [X0+1152]
	174 Call 0x1B6F7F0
	175 Move W8, 1
	176 Move [X22+1090], W8
	177 Move X8, [X21]
	178 Subtract S2, S11, S10
	179 Subtract S1, S12, S9
	180 Subtract S0, S13, S8
	181 Move X8, [X8+184]
	182 Move X0, X31
	183 Move S3, [X8+24]
	184 Move S4, [X8+28]
	185 Move V5, [X8+32]
	186 Call Quaternion.LookRotation, X0, X1
	187 Move X0, X20
	188 Move X20, [X31+144]
	189 Move X19, [X31+152]
	190 Move X22, [X31+128]
	191 Move X21, [X31+136]
	192 Move X30, [X31+112]
	193 Move D9, [X31+96]
	194 Move D8, [X31+104]
	195 Move D11, [X31+80]
	196 Move D10, [X31+88]
	197 Move D13, [X31+64]
	198 Move D12, [X31+72]
	199 Move X1, X31
	200 Add X31, X31, 160
	201 Call Transform.set_rotation, X0, X1
	202 Return 
	203 Call 0x1B6FA1C

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01CC7394 LDR X8, [X22]
	0x01CC7398 LDR X8, [X8 + 0xB8]
	0x01CC739C STR X31, [X8 + 0x40]
	0x01CC73A0 ADRP X22, 0x2287000
	0x01CC73A4 LDR X22, [X22 + 0x450]
	0x01CC73A8 ADRP X23, 0x2287000
	0x01CC73AC ADRP X21, 0x2288000
	0x01CC73B0 LDR X8, [X22]
	0x01CC73B4 LDR X8, [X8 + 0xB8]
	0x01CC73B8 LDR X23, [X23 + 0x170]
	0x01CC73BC LDR X20, [X8 + 0x88]
	0x01CC73C0 LDR X0, [X23]
	0x01CC73C4 LDR X21, [X21 + 0x4C8]
	0x01CC73C8 BL 0x1B6EA0C
	0x01CC73CC LDR X2, [X21]
	0x01CC73D0 MOV X1, X19
	0x01CC73D4 MOV X3, X31
	0x01CC73D8 MOV X21, X0
	0x01CC73DC BL 0x317DB24
	0x01CC73E0 MOV X0, X20
	0x01CC73E4 MOV X1, X21
	0x01CC73E8 MOV X2, X31
	0x01CC73EC BL 0x322A948
	0x01CC73F0 CBZ X0, 0x1CC7420
	0x01CC73F4 LDR X1, [X23]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move S0, 1
	006 Move S1, W31
	007 Move S2, W31
	008 Move S3, 1
	009 Move X0, X31
	010 Call Gizmos.set_color, X0
	011 Move X8, -18993152
	012 Move V8, [X8+3044]
	013 Move V0, [X19+360]
	014 Move V1, [X19+364]
	015 Move V2, [X19+368]
	016 Move V3, V8
	017 Move X0, X31
	018 Call Gizmos.DrawWireSphere, X0, V0
	019 Move V0, [X19+372]
	020 Move V1, [X19+376]
	021 Move V2, [X19+380]
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Move V3, V8
	025 Move X0, X31
	026 Move V8, [X31+32]
	027 Call Gizmos.DrawWireSphere, X0, V0
	028 Return 

Method: System.Void SetColor(UnityEngine.Color color)

Disassembly:
	0x01CC1A4C MOV X0, X20
	0x01CC1A50 MOV W1, W24
	0x01CC1A54 MOV V0.16B, V10.16B
	0x01CC1A58 MOV V1.16B, V9.16B
	0x01CC1A5C MOV V2.16B, V8.16B
	0x01CC1A60 MOV X2, X23
	0x01CC1A64 MOV X3, X22
	0x01CC1A68 MOV X4, X21
	0x01CC1A6C BL 0x1CC1B3C
	0x01CC1A70 LDRB W8, [X20 + 0x84]
	0x01CC1A74 CBZ W8, 0x1CC1B14
	0x01CC1A78 LDR X0, [X20 + 0x50]
	0x01CC1A7C CBZ X0, 0x1CC1B38
	0x01CC1A80 MOV X1, X31
	0x01CC1A84 BL 0x3AA7658
	0x01CC1A88 LDR X0, [X20 + 0x50]
	0x01CC1A8C CBZ X0, 0x1CC1B38
	0x01CC1A90 ADRP X20, 0x228E000
	0x01CC1A94 LDR X20, [X20 + 0x368]
	0x01CC1A98 MOV X1, X31
	0x01CC1A9C MOV V8.16B, V0.16B
	0x01CC1AA0 MOV V9.16B, V1.16B
	0x01CC1AA4 MOV V10.16B, V2.16B
	0x01CC1AA8 BL 0x3AA5FBC
	0x01CC1AAC LDR X0, [X20]
	0x01CC1AB0 MOV V11.16B, V0.16B
	0x01CC1AB4 MOV V12.16B, V1.16B
	0x01CC1AB8 MOV V13.16B, V2.16B
	0x01CC1ABC LDR W8, [X0 + 0xE0]
	0x01CC1AC0 MOV V14.16B, V3.16B
	0x01CC1AC4 CBNZ W8, 0x1CC1ACC
	0x01CC1AC8 BL 0x1B6E8F8
	0x01CC1ACC MOV W0, W19
	0x01CC1AD0 MOV V0.16B, V8.16B
	0x01CC1AD4 MOV V1.16B, V9.16B
	0x01CC1AD8 MOV V2.16B, V10.16B
	0x01CC1ADC MOV V3.16B, V11.16B
	0x01CC1AE0 MOV V4.16B, V12.16B
	0x01CC1AE4 MOV V5.16B, V13.16B
	0x01CC1AE8 LDP X20, X19, [X31 + 0x70]
	0x01CC1AEC LDP X22, X21, [X31 + 0x60]
	0x01CC1AF0 LDP X24, X23, [X31 + 0x50]
	0x01CC1AF4 LDP X30, X25, [X31 + 0x40]
	0x01CC1AF8 LDP D9, D8, [X31 + 0x30]
	0x01CC1AFC LDP D11, D10, [X31 + 0x20]
	0x01CC1B00 LDP D13, D12, [X31 + 0x10]
	0x01CC1B04 MOV V6.16B, V14.16B
	0x01CC1B08 MOV W1, W31
	0x01CC1B0C LDR V14, [X31], #0x80
	0x01CC1B10 B 0x1CC1E8C
	0x01CC1B14 LDP X20, X19, [X31 + 0x70]
	0x01CC1B18 LDP X22, X21, [X31 + 0x60]
	0x01CC1B1C LDP X24, X23, [X31 + 0x50]
	0x01CC1B20 LDP X30, X25, [X31 + 0x40]
	0x01CC1B24 LDP D9, D8, [X31 + 0x30]
	0x01CC1B28 LDP D11, D10, [X31 + 0x20]
	0x01CC1B2C LDP D13, D12, [X31 + 0x10]
	0x01CC1B30 LDR V14, [X31], #0x80
	0x01CC1B34 RET
	0x01CC1B38 BL 0x1B6EA1C
	0x01CC1B3C STR D14, [X31 - 0x80]!
	0x01CC1B40 STP D13, D12, [X31 + 0x10]
	0x01CC1B44 STP D11, D10, [X31 + 0x20]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x2563000
	010 Move W8, [X20+1371]
	011 Move V8, V3
	012 Move V9, V2
	013 Move V10, V1
	014 Move V11, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x228E000
	021 Move X0, [X0+2216]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X20+1371], W8
	025 Move X0, [X19+248]
	026 Compare X0, 0
	027 JumpIfEqual {75}
	028 Move X1, X31
	029 Call Renderer.get_material, X0
	030 Compare X0, 0
	031 JumpIfEqual {75}
	032 Move X20, 0x228E000
	033 Move X20, [X20+2216]
	034 Move V0, V11
	035 Move V1, V10
	036 Move V2, V9
	037 Move X1, [X20]
	038 Move V3, V8
	039 Move X2, X31
	040 Call Material.SetColor, X0, X1, X2
	041 Move X19, [X19+88]
	042 Compare X19, 0
	043 JumpIfEqual {75}
	044 Move W8, [X19+24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move W21, W31
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Add X8, X19, W21
	049 Move X0, [X8+32]
	050 Compare X0, 0
	051 JumpIfEqual {75}
	052 Move X1, X31
	053 Call Renderer.get_material, X0
	054 Compare X0, 0
	055 JumpIfEqual {75}
	056 Move X1, [X20]
	057 Move V0, V11
	058 Move V1, V10
	059 Move V2, V9
	060 Move V3, V8
	061 Move X2, X31
	062 Call Material.SetColor, X0, X1, X2
	063 Move W8, [X19+24]
	064 Add W21, W21, 1
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X20, [X31+48]
	067 Move X19, [X31+56]
	068 Move X30, [X31+32]
	069 Move X21, [X31+40]
	070 Move D9, [X31+16]
	071 Move D8, [X31+24]
	072 Move D11, [X31+64]
	073 Move D10, [X31+72]
	074 Return 
	075 Call 0x1B6FA1C
	076 Call 0x1B6FA24

Method: System.Void UpdateVoice(System.Single volume)

Disassembly:
	0x01CBB280 BL 0x1B6E7F0
	0x01CBB284 ADRP X0, 0x2294000
	0x01CBB288 LDR X0, [X0 + 0x50]
	0x01CBB28C BL 0x1B6E7F0
	0x01CBB290 ADRP X0, 0x2292000
	0x01CBB294 LDR X0, [X0 + 0xF78]
	0x01CBB298 BL 0x1B6E7F0
	0x01CBB29C ADRP X0, 0x2292000
	0x01CBB2A0 LDR X0, [X0 + 0x478]
	0x01CBB2A4 BL 0x1B6E7F0
	0x01CBB2A8 ADRP X0, 0x2292000
	0x01CBB2AC LDR X0, [X0 + 0xB90]
	0x01CBB2B0 BL 0x1B6E7F0
	0x01CBB2B4 ADRP X0, 0x2294000
	0x01CBB2B8 LDR X0, [X0 + 0x58]
	0x01CBB2BC BL 0x1B6E7F0
	0x01CBB2C0 ADRP X0, 0x2293000
	0x01CBB2C4 LDR X0, [X0 + 0xE10]
	0x01CBB2C8 BL 0x1B6E7F0
	0x01CBB2CC MOVZ W8, 0x1
	0x01CBB2D0 STRB W8, [X20 + 0x522]
	0x01CBB2D4 LDR X8, [X21]
	0x01CBB2D8 MOV X0, X19
	0x01CBB2DC MOV X1, X31
	0x01CBB2E0 LDR X8, [X8 + 0xB8]
	0x01CBB2E4 STR X19, [X8 + 0x40]
	0x01CBB2E8 BL 0x3A9B0C0
	0x01CBB2EC CBZ X0, 0x1CBB540
	0x01CBB2F0 ADRP X8, 0x2294000
	0x01CBB2F4 LDR X8, [X8 + 0x40]
	0x01CBB2F8 LDR X1, [X8]
	0x01CBB2FC BL 0x20CEE08
	0x01CBB300 STR X0, [X19 + 0xB0]
	0x01CBB304 CBZ X0, 0x1CBB540
	0x01CBB308 ADRP X8, 0x2292000
	0x01CBB30C LDR X8, [X8 + 0x478]
	0x01CBB310 STRB W31, [X0 + 0x20]
	0x01CBB314 LDR X20, [X19 + 0x70]
	0x01CBB318 LDR X0, [X8]
	0x01CBB31C LDR W8, [X0 + 0xE0]
	0x01CBB320 CBNZ W8, 0x1CBB328
	0x01CBB324 BL 0x1B6E8F8
	0x01CBB328 MOV X0, X20
	0x01CBB32C MOV X1, X31
	0x01CBB330 MOV X2, X31
	0x01CBB334 BL 0x3AA0AF0
	0x01CBB338 TBZ X0, 0x0, 0x1CBB34C
	0x01CBB33C MOV X0, X19
	0x01CBB340 MOV X1, X31
	0x01CBB344 BL 0x3A9B084
	0x01CBB348 STR X0, [X19 + 0x70]
	0x01CBB34C LDR X8, [X21]
	0x01CBB350 ADRP X22, 0x2293000
	0x01CBB354 ADRP X23, 0x2294000
	0x01CBB358 ADRP X24, 0x2294000
	0x01CBB35C LDR X8, [X8 + 0xB8]
	0x01CBB360 LDR X8, [X8]
	0x01CBB364 LDR X22, [X22 + 0xE10]
	0x01CBB368 LDR X23, [X23 + 0x58]
	0x01CBB36C LDR X24, [X24 + 0x50]
	0x01CBB370 CBNZ X8, 0x1CBB3D8
	0x01CBB374 MOV X0, X31
	0x01CBB378 BL 0x31DFE80
	0x01CBB37C STP X0, X1, [X31 + 0x10]
	0x01CBB380 ADD X0, X31, 0x10
	0x01CBB384 MOV X1, X31
	0x01CBB388 BL 0x31E1C0C
	0x01CBB38C LDR X8, [X21]
	0x01CBB390 MOV X2, X31
	0x01CBB394 LDR X8, [X8 + 0xB8]
	0x01CBB398 STR X0, [X8]
	0x01CBB39C LDR X8, [X21]
	0x01CBB3A0 ADD X0, X31, 0x0
	0x01CBB3A4 LDR X8, [X8 + 0xB8]
	0x01CBB3A8 LDR X1, [X8]
	0x01CBB3AC STP X31, X31, [X31 + 0x10]
	0x01CBB3B0 STP X31, X31, [X31]
	0x01CBB3B4 BL 0x31DFECC
	0x01CBB3B8 LDR V0, [X31]
	0x01CBB3BC ADD X0, X31, 0x10
	0x01CBB3C0 MOV X1, X31
	0x01CBB3C4 STR V0, [X31 + 0x1]
	0x01CBB3C8 BL 0x31E1EE0
	0x01CBB3CC LDR X8, [X21]
	0x01CBB3D0 LDR X8, [X8 + 0xB8]
	0x01CBB3D4 STR W0, [X8 + 0x8]
	0x01CBB3D8 LDR X8, [X22]
	0x01CBB3DC LDR X0, [X23]
	0x01CBB3E0 LDR X8, [X8 + 0xB8]
	0x01CBB3E4 LDR X20, [X8 + 0x8]
	0x01CBB3E8 BL 0x1B6EA0C
	0x01CBB3EC LDR X2, [X24]
	0x01CBB3F0 MOV X1, X19
	0x01CBB3F4 MOV X3, X31
	0x01CBB3F8 MOV X21, X0
	0x01CBB3FC BL 0x1CB510C
	0x01CBB400 MOV X0, X20
	0x01CBB404 MOV X1, X21
	0x01CBB408 MOV X2, X31
	0x01CBB40C BL 0x322A750
	0x01CBB410 CBZ X0, 0x1CBB440
	0x01CBB414 LDR X1, [X23]
	0x01CBB418 LDR X8, [X0]
	0x01CBB41C CMP X8, X1
	0x01CBB420 B.NE 0x1CBB43C
	0x01CBB424 LDR X8, [X22]
	0x01CBB428 LDR X8, [X8 + 0xB8]
	0x01CBB42C STR X0, [X8 + 0x8]
	0x01CBB430 LDR X8, [X0]
	0x01CBB434 CMP X8, X1
	0x01CBB438 B.EQ 0x1CBB44C
	0x01CBB43C BL 0x1B6ECDC
	0x01CBB440 LDR X8, [X22]
	0x01CBB444 LDR X8, [X8 + 0xB8]
	0x01CBB448 STR X0, [X8 + 0x8]
	0x01CBB44C ADRP X8, 0x2292000
	0x01CBB450 LDR X8, [X8 + 0xB90]
	0x01CBB454 ADRP X20, 0x2294000

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move W8, [X0+80]
	010 Compare W8, 0
	011 JumpIfEqual {120}
	012 Move S9, 1
	013 NotImplemented "Instruction FCMP not yet implemented."
	014 Move S1, W31
	015 NotImplemented "Instruction FMIN not yet implemented."
	016 Move S2, -0.5
	017 Move S5, [X0+216]
	018 Move S4, [X0+220]
	019 NotImplemented "Instruction FCSEL not yet implemented."
	020 Move V3, [X0+276]
	021 Add S2, S0, S2
	022 Move V10, [X0+272]
	023 Add S2, S2, S2
	024 NotImplemented "Instruction FCMP not yet implemented."
	025 NotImplemented "Instruction FMIN not yet implemented."
	026 NotImplemented "Instruction FCSEL not yet implemented."
	027 NotImplemented "Instruction FCMP not yet implemented."
	028 NotImplemented "Instruction FMIN not yet implemented."
	029 NotImplemented "Instruction FCSEL not yet implemented."
	030 Subtract S1, S1, S3
	031 Multiply S1, S1, S2
	032 Subtract S0, S0, S10
	033 Add S1, S3, S1
	034 Multiply S0, S0, S5
	035 Add S11, S0, S1
	036 Move X19, X0
	037 Move [X0+276], S11
	038 Move X0, X31
	039 Call Time.get_deltaTime
	040 Multiply S0, S0, S11
	041 Add S10, S10, S0
	042 Move X0, X31
	043 Move [X19+272], S10
	044 Call Time.get_time
	045 Move V1, [X19+224]
	046 Multiply S0, S0, S1
	047 Call 0x3D1A8B0
	048 Move X0, [X19+248]
	049 Compare X0, 0
	050 JumpIfEqual {129}
	051 Multiply S8, S8, S0
	052 Move V0, [X19+228]
	053 Multiply S1, S10, S10
	054 Move S2, 3
	055 Multiply S3, S1, S1
	056 Add S1, S1, S1
	057 Subtract S1, S2, S1
	058 Multiply S1, S3, S1
	059 Subtract S2, S9, S0
	060 Multiply S0, S0, S8
	061 Multiply S1, S2, S1
	062 Move W8, 0x42C80000
	063 Add S9, S0, S1
	064 Move S0, W8
	065 Multiply S0, S9, S0
	066 Move W1, W31
	067 Move X2, X31
	068 Call SkinnedMeshRenderer.SetBlendShapeWeight, X0, X1, V0
	069 Move X0, [X19+240]
	070 Compare X0, 0
	071 JumpIfEqual {129}
	072 Move S0, 0.5
	073 Move S2, [X19+232]
	074 Move S3, [X19+236]
	075 Multiply S5, S8, S0
	076 Move S10, 1
	077 Add S0, S5, S0
	078 Move V1, [X19+280]
	079 Move S4, W31
	080 NotImplemented "Instruction FMIN not yet implemented."
	081 NotImplemented "Instruction FCMP not yet implemented."
	082 Subtract S0, S3, S2
	083 NotImplemented "Instruction FCSEL not yet implemented."
	084 Multiply S0, S3, S0
	085 Add S0, S2, S0
	086 Add S0, S1, S0
	087 Move S1, W31
	088 Move S2, W31
	089 Move X1, X31
	090 Call Transform.set_localEulerAngles, X0, X1
	091 Move X20, [X19+264]
	092 Compare X20, 0
	093 JumpIfEqual {129}
	094 Move W8, [X20+24]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move V0, [X19+256]
	097 Move V3, [X19+228]
	098 Move S1, -1
	099 Move V2, [X19+284]
	100 Add S0, S0, S1
	101 Multiply S0, S9, S0
	102 Add S0, S0, S10
	103 Multiply S1, S8, S3
	104 Add S0, S0, S1
	105 Move W21, W31
	106 Multiply S8, S2, S0
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Add X8, X20, W21
	109 Move X0, [X8+32]
	110 Compare X0, 0
	111 JumpIfEqual {129}
	112 Move V0, V8
	113 Move V1, V8
	114 Move V2, V8
	115 Move X1, X31
	116 Call Transform.set_localScale, X0, X1
	117 Move W8, [X20+24]
	118 Add W21, W21, 1
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move X20, [X31+48]
	121 Move X19, [X31+56]
	122 Move X30, [X31+32]
	123 Move X21, [X31+40]
	124 Move D9, [X31+16]
	125 Move D8, [X31+24]
	126 Move D11, [X31+64]
	127 Move D10, [X31+72]
	128 Return 
	129 Call 0x1B6FA1C
	130 Call 0x1B6FA24

Method: System.Boolean GetIsLocal()

Disassembly:
	0x01CC73F8 LDR X8, [X0]
	0x01CC73FC CMP X8, X1
	0x01CC7400 B.NE 0x1CC7390
	0x01CC7404 LDR X8, [X22]

ISIL:
	001 Move W8, [X0+80]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Void .ctor()

Disassembly:
	0x01CC7408 LDR X8, [X8 + 0xB8]
	0x01CC740C STR X0, [X8 + 0x88]
	0x01CC7410 LDR X8, [X0]
	0x01CC7414 CMP X8, X1
	0x01CC7418 B.EQ 0x1CC742C
	0x01CC741C B 0x1CC7390
	0x01CC7420 LDR X8, [X22]
	0x01CC7424 LDR X8, [X8 + 0xB8]
	0x01CC7428 STR X0, [X8 + 0x88]
	0x01CC742C ADRP X20, 0x2288000
	0x01CC7430 LDR X20, [X20 + 0x4F8]
	0x01CC7434 LDR X0, [X20]
	0x01CC7438 LDR W8, [X0 + 0xE0]
	0x01CC743C CBNZ W8, 0x1CC7448
	0x01CC7440 BL 0x1B6E8F8
	0x01CC7444 LDR X0, [X20]
	0x01CC7448 LDR X8, [X0 + 0xB8]
	0x01CC744C LDR X0, [X8]
	0x01CC7450 CBZ X0, 0x1CC7474
	0x01CC7454 ADRP X8, 0x2288000
	0x01CC7458 LDR X8, [X8 + 0x4F0]
	0x01CC745C MOV X1, X19
	0x01CC7460 LDP X20, X19, [X31 + 0x20]
	0x01CC7464 LDP X22, X21, [X31 + 0x10]
	0x01CC7468 LDR X2, [X8]
	0x01CC746C LDP X30, X23, [X31], #0x30
	0x01CC7470 B 0x2BD3B48
	0x01CC7474 BL 0x1B6EA1C
	0x01CC7478 STP X30, X21, [X31 - 0x20]!
	0x01CC747C STP X20, X19, [X31 + 0x10]
	0x01CC7480 ADRP X20, 0x255C000
	0x01CC7484 LDRB W8, [X20 + 0x561]
	0x01CC7488 MOV X19, X0
	0x01CC748C TBNZ X8, 0x0, 0x1CC74B0
	0x01CC7490 ADRP X0, 0x2286000
	0x01CC7494 LDR X0, [X0 + 0x4E8]
	0x01CC7498 BL 0x1B6E7F0
	0x01CC749C ADRP X0, 0x2287000
	0x01CC74A0 LDR X0, [X0 + 0xD8]
	0x01CC74A4 BL 0x1B6E7F0
	0x01CC74A8 MOVZ W8, 0x1
	0x01CC74AC STRB W8, [X20 + 0x561]
	0x01CC74B0 MOV X0, X19
	0x01CC74B4 BL 0x1CC6B4C
	0x01CC74B8 TBZ X0, 0x0, 0x1CC754C
	0x01CC74BC ADRP X20, 0x2286000
	0x01CC74C0 LDR X20, [X20 + 0x4E8]
	0x01CC74C4 LDR X0, [X20]
	0x01CC74C8 LDR W8, [X0 + 0xE0]
	0x01CC74CC CBNZ W8, 0x1CC74D4
	0x01CC74D0 BL 0x1B6E8F8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x255D000
	006 Move W8, [X21+1087]
	007 Move X19, X0
	008 Add X20, X0, 280
	009 Compare W8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, 0x2287000
	012 Move X0, [X0+1152]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X21+1087], W8
	016 Move X8, 0x2287000
	017 Move X8, [X8+1152]
	018 Move X0, X19
	019 Move X1, X31
	020 Move X8, [X8]
	021 Move X9, [X8+184]
	022 Move V0, [X9]
	023 Move V1, [X9+8]
	024 Move X9, -18989056
	025 Move [X19+168], D0
	026 Move [X19+176], S1
	027 Move X10, [X8+184]
	028 Move V0, [X9+133]
	029 Move X9, -18976768
	030 Move V1, [X9+672]
	031 Move X9, -18980864
	032 Move V2, [X10]
	033 Move V3, [X10+8]
	034 Move [X19+216], V0
	035 Move V0, [X9+38]
	036 Move W9, 0x3FC00000
	037 Move [X19+232], D1
	038 Move [X19+180], D2
	039 Move [X19+256], W9
	040 Move [X19+188], S3
	041 Move [X20], V0
	042 Move X9, [X8+184]
	043 Move V0, [X9]
	044 Move V1, [X9+8]
	045 Move [X19+384], D0
	046 Move [X19+392], S1
	047 Move X8, [X8+184]
	048 Move V0, [X8]
	049 Move V1, [X8+8]
	050 Move [X20+116], D0
	051 Move [X19+404], S1
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Call MonoBehaviour..ctor, X0
	057 Return 

Method: System.Void .cctor()

Disassembly:
	0x01CC74D4 ADRP X21, 0x255C000
	0x01CC74D8 LDRB W8, [X21 + 0x443]
	0x01CC74DC CBNZ W8, 0x1CC74F4
	0x01CC74E0 ADRP X0, 0x2286000
	0x01CC74E4 LDR X0, [X0 + 0x4E8]
	0x01CC74E8 BL 0x1B6E7F0
	0x01CC74EC MOVZ W8, 0x1
	0x01CC74F0 STRB W8, [X21 + 0x443]
	0x01CC74F4 LDR X0, [X20]
	0x01CC74F8 LDR W8, [X0 + 0xE0]
	0x01CC74FC CBNZ W8, 0x1CC7508
	0x01CC7500 BL 0x1B6E8F8
	0x01CC7504 LDR X0, [X20]
	0x01CC7508 LDR X8, [X0 + 0xB8]
	0x01CC750C LDR X8, [X8]
	0x01CC7510 CBZ X8, 0x1CC7558
	0x01CC7514 LDR X8, [X8 + 0xA8]
	0x01CC7518 CBZ X8, 0x1CC7558
	0x01CC751C LDR X8, [X8 + 0x68]
	0x01CC7520 CBZ X8, 0x1CC7558
	0x01CC7524 LDR X8, [X8 + 0x48]
	0x01CC7528 CBZ X8, 0x1CC7558
	0x01CC752C LDR W1, [X8 + 0x4C]
	0x01CC7530 MOV X0, X19
	0x01CC7534 BL 0x1CC6A14
	0x01CC7538 MOV X0, X19
	0x01CC753C BL 0x1CC755C
	0x01CC7540 MOV X0, X19
	0x01CC7544 BL 0x1CC69B4
	0x01CC7548 STR W0, [X19 + 0xB4]
	0x01CC754C LDP X20, X19, [X31 + 0x10]
	0x01CC7550 LDP X30, X21, [X31], #0x20
	0x01CC7554 RET
	0x01CC7558 BL 0x1B6EA1C
	0x01CC755C STR X30, [X31 - 0x30]!
	0x01CC7560 STP X22, X21, [X31 + 0x10]
	0x01CC7564 STP X20, X19, [X31 + 0x20]
	0x01CC7568 LDR X20, [X0 + 0xA0]
	0x01CC756C MOV X19, X0
	0x01CC7570 BL 0x1CC69B4
	0x01CC7574 LDR W21, [X19 + 0xB4]
	0x01CC7578 MOV W22, W0
	0x01CC757C MOV X0, X19
	0x01CC7580 BL 0x1CC6B4C
	0x01CC7584 CBZ X20, 0x1CC75B8
	0x01CC7588 AND W3, W0, 0x1
	0x01CC758C MOV X0, X20
	0x01CC7590 MOV W1, W22
	0x01CC7594 MOV W2, W21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x255D000
	006 Move X19, 0x2289000
	007 Move X20, 0x2288000
	008 Move W8, [X21+1372]
	009 Move X19, [X19+904]
	010 Move X20, [X20+832]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x2289000
	016 Move X0, [X0+904]
	017 Call 0x1B6F7F0
	018 Move X0, 0x2288000
	019 Move X0, [X0+832]
	020 Call 0x1B6F7F0
	021 Move W8, 1
	022 Move [X21+1372], W8
	023 Move X8, [X19]
	024 Move X9, -18976768
	025 Move V0, [X9+1760]
	026 Move W9, 0xC2B40000
	027 Move X8, [X8+184]
	028 Move X10, -18976768
	029 Move X1, X31
	030 Move [X8], D0
	031 Move [X8+8], W9
	032 Move X8, [X19]
	033 Move X9, [X8+184]
	034 Move [X9+12], D0
	035 Move V0, [X10+3440]
	036 Move W10, 0x42B40000
	037 Move [X9+20], W10
	038 Move X9, [X8+184]
	039 Move X10, -18980864
	040 Move [X9+24], D0
	041 Move V0, [X10+3216]
	042 Move W10, 0xC0000000
	043 Move [X9+32], W10
	044 Move X8, [X8+184]
	045 Move [X8+36], D0
	046 Move [X8+44], W10
	047 Move X0, [X20]
	048 Call Shader.PropertyToID, X0
	049 Move X8, [X19]
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X8, [X8+184]
	053 Move [X8+48], W0
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return 

